
build_gd32/main.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08007000 <__gVectors>:
 8007000:	20018000 	andcs	r8, r1, r0
 8007004:	08008525 	stmdaeq	r0, {r0, r2, r5, r8, sl, pc}
 8007008:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 800700c:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007010:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007014:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007018:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
	...
 800702c:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007030:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007034:	00000000 	andeq	r0, r0, r0
 8007038:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 800703c:	08014ac1 	stmdaeq	r1, {r0, r6, r7, r9, fp, lr}
 8007040:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007044:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007048:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 800704c:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007050:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007054:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007058:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 800705c:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007060:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007064:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007068:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 800706c:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007070:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007074:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007078:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 800707c:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007080:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007084:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007088:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 800708c:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007090:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007094:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007098:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 800709c:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070a0:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070a4:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070a8:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070ac:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070b0:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070b4:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070b8:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070bc:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070c0:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070c4:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070c8:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070cc:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070d0:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070d4:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070d8:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070dc:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070e0:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070e4:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070e8:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070ec:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070f0:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070f4:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
	...
 8007100:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007104:	00000000 	andeq	r0, r0, r0
 8007108:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 800710c:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007110:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007114:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007118:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 800711c:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007120:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007124:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007128:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 800712c:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007130:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007134:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007138:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 800713c:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007140:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007144:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007148:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 800714c:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}

Disassembly of section .text:

08007150 <net_init>:
 8007150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007154:	460c      	mov	r4, r1
 8007156:	4616      	mov	r6, r2
 8007158:	9f06      	ldr	r7, [sp, #24]
 800715a:	4a22      	ldr	r2, [pc, #136]	; (80071e4 <net_init+0x94>)
 800715c:	461d      	mov	r5, r3
 800715e:	1e43      	subs	r3, r0, #1
 8007160:	3005      	adds	r0, #5
 8007162:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8007166:	4283      	cmp	r3, r0
 8007168:	f802 1b01 	strb.w	r1, [r2], #1
 800716c:	d1f9      	bne.n	8007162 <net_init+0x12>
 800716e:	4623      	mov	r3, r4
 8007170:	4a1d      	ldr	r2, [pc, #116]	; (80071e8 <net_init+0x98>)
 8007172:	f104 010c 	add.w	r1, r4, #12
 8007176:	f813 0b01 	ldrb.w	r0, [r3], #1
 800717a:	428b      	cmp	r3, r1
 800717c:	f802 0b01 	strb.w	r0, [r2], #1
 8007180:	d1f9      	bne.n	8007176 <net_init+0x26>
 8007182:	f04f 0800 	mov.w	r8, #0
 8007186:	4918      	ldr	r1, [pc, #96]	; (80071e8 <net_init+0x98>)
 8007188:	4816      	ldr	r0, [pc, #88]	; (80071e4 <net_init+0x94>)
 800718a:	f000 f9a7 	bl	80074dc <ip_init>
 800718e:	4815      	ldr	r0, [pc, #84]	; (80071e4 <net_init+0x94>)
 8007190:	f000 f83c 	bl	800720c <rfc3927_init>
 8007194:	f887 8000 	strb.w	r8, [r7]
 8007198:	782b      	ldrb	r3, [r5, #0]
 800719a:	b163      	cbz	r3, 80071b6 <net_init+0x66>
 800719c:	4632      	mov	r2, r6
 800719e:	4912      	ldr	r1, [pc, #72]	; (80071e8 <net_init+0x98>)
 80071a0:	4810      	ldr	r0, [pc, #64]	; (80071e4 <net_init+0x94>)
 80071a2:	f00b fc11 	bl	80129c8 <dhcp_client>
 80071a6:	4540      	cmp	r0, r8
 80071a8:	da05      	bge.n	80071b6 <net_init+0x66>
 80071aa:	480f      	ldr	r0, [pc, #60]	; (80071e8 <net_init+0x98>)
 80071ac:	f885 8000 	strb.w	r8, [r5]
 80071b0:	f009 fe86 	bl	8010ec0 <rfc3927>
 80071b4:	7038      	strb	r0, [r7, #0]
 80071b6:	490c      	ldr	r1, [pc, #48]	; (80071e8 <net_init+0x98>)
 80071b8:	480a      	ldr	r0, [pc, #40]	; (80071e4 <net_init+0x94>)
 80071ba:	f000 f883 	bl	80072c4 <arp_init>
 80071be:	480a      	ldr	r0, [pc, #40]	; (80071e8 <net_init+0x98>)
 80071c0:	f00b fe22 	bl	8012e08 <ip_set_ip>
 80071c4:	f000 f82e 	bl	8007224 <tcp_init>
 80071c8:	4a07      	ldr	r2, [pc, #28]	; (80071e8 <net_init+0x98>)
 80071ca:	1e63      	subs	r3, r4, #1
 80071cc:	340b      	adds	r4, #11
 80071ce:	f812 1b01 	ldrb.w	r1, [r2], #1
 80071d2:	f803 1f01 	strb.w	r1, [r3, #1]!
 80071d6:	429c      	cmp	r4, r3
 80071d8:	d1f9      	bne.n	80071ce <net_init+0x7e>
 80071da:	782a      	ldrb	r2, [r5, #0]
 80071dc:	4b03      	ldr	r3, [pc, #12]	; (80071ec <net_init+0x9c>)
 80071de:	701a      	strb	r2, [r3, #0]
 80071e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071e4:	200029e0 	andcs	r2, r0, r0, ror #19
 80071e8:	200029d4 	ldrdcs	r2, [r0], -r4
 80071ec:	200029e6 	andcs	r2, r0, r6, ror #19

080071f0 <net_shutdown>:
 80071f0:	b508      	push	{r3, lr}
 80071f2:	f000 f97e 	bl	80074f2 <ip_shutdown>
 80071f6:	4b04      	ldr	r3, [pc, #16]	; (8007208 <net_shutdown+0x18>)
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	b11b      	cbz	r3, 8007204 <net_shutdown+0x14>
 80071fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007200:	f00b bcea 	b.w	8012bd8 <dhcp_client_release>
 8007204:	bd08      	pop	{r3, pc}
 8007206:	bf00      	nop
 8007208:	200029e6 	andcs	r2, r0, r6, ror #19

0800720c <rfc3927_init>:
 800720c:	4b04      	ldr	r3, [pc, #16]	; (8007220 <rfc3927_init+0x14>)
 800720e:	1d82      	adds	r2, r0, #6
 8007210:	4290      	cmp	r0, r2
 8007212:	d100      	bne.n	8007216 <rfc3927_init+0xa>
 8007214:	4770      	bx	lr
 8007216:	f810 1b01 	ldrb.w	r1, [r0], #1
 800721a:	f803 1b01 	strb.w	r1, [r3], #1
 800721e:	e7f7      	b.n	8007210 <rfc3927_init+0x4>
 8007220:	200029f0 	strdcs	r2, [r0], -r0

08007224 <tcp_init>:
 8007224:	2206      	movs	r2, #6
 8007226:	b513      	push	{r0, r1, r4, lr}
 8007228:	4c0b      	ldr	r4, [pc, #44]	; (8007258 <tcp_init+0x34>)
 800722a:	490c      	ldr	r1, [pc, #48]	; (800725c <tcp_init+0x38>)
 800722c:	18a0      	adds	r0, r4, r2
 800722e:	f009 fea1 	bl	8010f74 <memcpy.isra.0>
 8007232:	2308      	movs	r3, #8
 8007234:	2204      	movs	r2, #4
 8007236:	81a3      	strh	r3, [r4, #12]
 8007238:	4b09      	ldr	r3, [pc, #36]	; (8007260 <tcp_init+0x3c>)
 800723a:	eb0d 0102 	add.w	r1, sp, r2
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f104 001a 	add.w	r0, r4, #26
 8007244:	9301      	str	r3, [sp, #4]
 8007246:	f009 fe95 	bl	8010f74 <memcpy.isra.0>
 800724a:	2345      	movs	r3, #69	; 0x45
 800724c:	81e3      	strh	r3, [r4, #14]
 800724e:	4b05      	ldr	r3, [pc, #20]	; (8007264 <tcp_init+0x40>)
 8007250:	6163      	str	r3, [r4, #20]
 8007252:	b002      	add	sp, #8
 8007254:	bd10      	pop	{r4, pc}
 8007256:	bf00      	nop
 8007258:	200035b8 			; <UNDEFINED> instruction: 0x200035b8
 800725c:	200029e0 	andcs	r2, r0, r0, ror #19
 8007260:	200029d4 	ldrdcs	r2, [r0], -r4
 8007264:	06400040 	strbeq	r0, [r0], -r0, asr #32

08007268 <udp_init>:
 8007268:	b570      	push	{r4, r5, r6, lr}
 800726a:	2200      	movs	r2, #0
 800726c:	2408      	movs	r4, #8
 800726e:	460e      	mov	r6, r1
 8007270:	4b0d      	ldr	r3, [pc, #52]	; (80072a8 <udp_init+0x40>)
 8007272:	490e      	ldr	r1, [pc, #56]	; (80072ac <udp_init+0x44>)
 8007274:	3c01      	subs	r4, #1
 8007276:	801a      	strh	r2, [r3, #0]
 8007278:	805a      	strh	r2, [r3, #2]
 800727a:	f841 2b04 	str.w	r2, [r1], #4
 800727e:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 8007282:	d1f7      	bne.n	8007274 <udp_init+0xc>
 8007284:	2206      	movs	r2, #6
 8007286:	4d0a      	ldr	r5, [pc, #40]	; (80072b0 <udp_init+0x48>)
 8007288:	4b0a      	ldr	r3, [pc, #40]	; (80072b4 <udp_init+0x4c>)
 800728a:	4601      	mov	r1, r0
 800728c:	18a8      	adds	r0, r5, r2
 800728e:	801c      	strh	r4, [r3, #0]
 8007290:	f009 fff4 	bl	801127c <memcpy.isra.0>
 8007294:	4b08      	ldr	r3, [pc, #32]	; (80072b8 <udp_init+0x50>)
 8007296:	4630      	mov	r0, r6
 8007298:	60eb      	str	r3, [r5, #12]
 800729a:	4b08      	ldr	r3, [pc, #32]	; (80072bc <udp_init+0x54>)
 800729c:	616b      	str	r3, [r5, #20]
 800729e:	f00a f815 	bl	80112cc <udp_set_ip>
 80072a2:	852c      	strh	r4, [r5, #40]	; 0x28
 80072a4:	bd70      	pop	{r4, r5, r6, pc}
 80072a6:	bf00      	nop
 80072a8:	20003bd4 	ldrdcs	r3, [r0], -r4
 80072ac:	20003bb4 			; <UNDEFINED> instruction: 0x20003bb4
 80072b0:	20009874 	andcs	r9, r0, r4, ror r8
 80072b4:	20003bb0 			; <UNDEFINED> instruction: 0x20003bb0
 80072b8:	00450008 	subeq	r0, r5, r8
 80072bc:	11400040 	cmpne	r0, r0, asr #32

080072c0 <udp_shutdown>:
 80072c0:	4770      	bx	lr
	...

080072c4 <arp_init>:
 80072c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072c8:	4604      	mov	r4, r0
 80072ca:	460d      	mov	r5, r1
 80072cc:	f000 f876 	bl	80073bc <arp_cache_init>
 80072d0:	2206      	movs	r2, #6
 80072d2:	4621      	mov	r1, r4
 80072d4:	482e      	ldr	r0, [pc, #184]	; (8007390 <arp_init+0xcc>)
 80072d6:	682f      	ldr	r7, [r5, #0]
 80072d8:	f00b f9fa 	bl	80126d0 <memcpy.isra.0>
 80072dc:	4b2d      	ldr	r3, [pc, #180]	; (8007394 <arp_init+0xd0>)
 80072de:	2507      	movs	r5, #7
 80072e0:	461e      	mov	r6, r3
 80072e2:	22ff      	movs	r2, #255	; 0xff
 80072e4:	3d01      	subs	r5, #1
 80072e6:	d146      	bne.n	8007376 <arp_init+0xb2>
 80072e8:	4b2b      	ldr	r3, [pc, #172]	; (8007398 <arp_init+0xd4>)
 80072ea:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800739c <arp_init+0xd8>
 80072ee:	2206      	movs	r2, #6
 80072f0:	e9c6 3803 	strd	r3, r8, [r6, #12]
 80072f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072f8:	4621      	mov	r1, r4
 80072fa:	4829      	ldr	r0, [pc, #164]	; (80073a0 <arp_init+0xdc>)
 80072fc:	82b3      	strh	r3, [r6, #20]
 80072fe:	f00b f9e7 	bl	80126d0 <memcpy.isra.0>
 8007302:	2307      	movs	r3, #7
 8007304:	4a27      	ldr	r2, [pc, #156]	; (80073a4 <arp_init+0xe0>)
 8007306:	61f7      	str	r7, [r6, #28]
 8007308:	3b01      	subs	r3, #1
 800730a:	d137      	bne.n	800737c <arp_init+0xb8>
 800730c:	2206      	movs	r2, #6
 800730e:	4621      	mov	r1, r4
 8007310:	4825      	ldr	r0, [pc, #148]	; (80073a8 <arp_init+0xe4>)
 8007312:	f8c6 7026 	str.w	r7, [r6, #38]	; 0x26
 8007316:	f00b f9db 	bl	80126d0 <memcpy.isra.0>
 800731a:	4a24      	ldr	r2, [pc, #144]	; (80073ac <arp_init+0xe8>)
 800731c:	2306      	movs	r3, #6
 800731e:	4615      	mov	r5, r2
 8007320:	21ff      	movs	r1, #255	; 0xff
 8007322:	3b01      	subs	r3, #1
 8007324:	d22d      	bcs.n	8007382 <arp_init+0xbe>
 8007326:	4b1c      	ldr	r3, [pc, #112]	; (8007398 <arp_init+0xd4>)
 8007328:	2206      	movs	r2, #6
 800732a:	e9c5 3803 	strd	r3, r8, [r5, #12]
 800732e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007332:	4621      	mov	r1, r4
 8007334:	481e      	ldr	r0, [pc, #120]	; (80073b0 <arp_init+0xec>)
 8007336:	82ab      	strh	r3, [r5, #20]
 8007338:	f00b f9ca 	bl	80126d0 <memcpy.isra.0>
 800733c:	2307      	movs	r3, #7
 800733e:	2100      	movs	r1, #0
 8007340:	4a1c      	ldr	r2, [pc, #112]	; (80073b4 <arp_init+0xf0>)
 8007342:	61ef      	str	r7, [r5, #28]
 8007344:	3b01      	subs	r3, #1
 8007346:	d11f      	bne.n	8007388 <arp_init+0xc4>
 8007348:	2206      	movs	r2, #6
 800734a:	4d1b      	ldr	r5, [pc, #108]	; (80073b8 <arp_init+0xf4>)
 800734c:	4621      	mov	r1, r4
 800734e:	18a8      	adds	r0, r5, r2
 8007350:	f00b f9be 	bl	80126d0 <memcpy.isra.0>
 8007354:	4b10      	ldr	r3, [pc, #64]	; (8007398 <arp_init+0xd4>)
 8007356:	4621      	mov	r1, r4
 8007358:	e9c5 3803 	strd	r3, r8, [r5, #12]
 800735c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007360:	f105 0016 	add.w	r0, r5, #22
 8007364:	2206      	movs	r2, #6
 8007366:	82ab      	strh	r3, [r5, #20]
 8007368:	f00b f9b2 	bl	80126d0 <memcpy.isra.0>
 800736c:	61ef      	str	r7, [r5, #28]
 800736e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007372:	f00b b9b7 	b.w	80126e4 <arp_announce>
 8007376:	f803 2b01 	strb.w	r2, [r3], #1
 800737a:	e7b3      	b.n	80072e4 <arp_init+0x20>
 800737c:	f802 5b01 	strb.w	r5, [r2], #1
 8007380:	e7c2      	b.n	8007308 <arp_init+0x44>
 8007382:	f802 1b01 	strb.w	r1, [r2], #1
 8007386:	e7cc      	b.n	8007322 <arp_init+0x5e>
 8007388:	f802 1b01 	strb.w	r1, [r2], #1
 800738c:	e7da      	b.n	8007344 <arp_init+0x80>
 800738e:	bf00      	nop
 8007390:	2000a30a 	andcs	sl, r0, sl, lsl #6
 8007394:	2000a304 	andcs	sl, r0, r4, lsl #6
 8007398:	01000608 	tsteq	r0, r8, lsl #12
 800739c:	04060008 	streq	r0, [r6], #-8
 80073a0:	2000a31a 	andcs	sl, r0, sl, lsl r3
 80073a4:	2000a324 	andcs	sl, r0, r4, lsr #6
 80073a8:	2000a362 	andcs	sl, r0, r2, ror #6
 80073ac:	2000a35c 	andcs	sl, r0, ip, asr r3
 80073b0:	2000a372 	andcs	sl, r0, r2, ror r3
 80073b4:	2000a37c 	andcs	sl, r0, ip, ror r3
 80073b8:	2000a330 	andcs	sl, r0, r0, lsr r3

080073bc <arp_cache_init>:
 80073bc:	2300      	movs	r3, #0
 80073be:	4618      	mov	r0, r3
 80073c0:	4a09      	ldr	r2, [pc, #36]	; (80073e8 <arp_cache_init+0x2c>)
 80073c2:	b510      	push	{r4, lr}
 80073c4:	8013      	strh	r3, [r2, #0]
 80073c6:	4a09      	ldr	r2, [pc, #36]	; (80073ec <arp_cache_init+0x30>)
 80073c8:	4611      	mov	r1, r2
 80073ca:	f842 0c04 	str.w	r0, [r2, #-4]
 80073ce:	1d94      	adds	r4, r2, #6
 80073d0:	42a1      	cmp	r1, r4
 80073d2:	d105      	bne.n	80073e0 <arp_cache_init+0x24>
 80073d4:	3303      	adds	r3, #3
 80073d6:	2b60      	cmp	r3, #96	; 0x60
 80073d8:	f102 020c 	add.w	r2, r2, #12
 80073dc:	d1f4      	bne.n	80073c8 <arp_cache_init+0xc>
 80073de:	bd10      	pop	{r4, pc}
 80073e0:	f801 0b01 	strb.w	r0, [r1], #1
 80073e4:	e7f4      	b.n	80073d0 <arp_cache_init+0x14>
 80073e6:	bf00      	nop
 80073e8:	2000a508 	andcs	sl, r0, r8, lsl #10
 80073ec:	2000a38c 	andcs	sl, r0, ip, lsl #7

080073f0 <igmp_init>:
 80073f0:	2200      	movs	r2, #0
 80073f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073f6:	4605      	mov	r5, r0
 80073f8:	4608      	mov	r0, r1
 80073fa:	4611      	mov	r1, r2
 80073fc:	4b23      	ldr	r3, [pc, #140]	; (800748c <igmp_init+0x9c>)
 80073fe:	f103 0408 	add.w	r4, r3, #8
 8007402:	42a3      	cmp	r3, r4
 8007404:	d13e      	bne.n	8007484 <igmp_init+0x94>
 8007406:	3201      	adds	r2, #1
 8007408:	2a24      	cmp	r2, #36	; 0x24
 800740a:	d1f8      	bne.n	80073fe <igmp_init+0xe>
 800740c:	2600      	movs	r6, #0
 800740e:	4b20      	ldr	r3, [pc, #128]	; (8007490 <igmp_init+0xa0>)
 8007410:	4c20      	ldr	r4, [pc, #128]	; (8007494 <igmp_init+0xa4>)
 8007412:	601e      	str	r6, [r3, #0]
 8007414:	4b20      	ldr	r3, [pc, #128]	; (8007498 <igmp_init+0xa8>)
 8007416:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 800741a:	801e      	strh	r6, [r3, #0]
 800741c:	f00b fc54 	bl	8012cc8 <igmp_set_ip>
 8007420:	2201      	movs	r2, #1
 8007422:	4b1e      	ldr	r3, [pc, #120]	; (800749c <igmp_init+0xac>)
 8007424:	4629      	mov	r1, r5
 8007426:	801a      	strh	r2, [r3, #0]
 8007428:	225e      	movs	r2, #94	; 0x5e
 800742a:	709a      	strb	r2, [r3, #2]
 800742c:	2206      	movs	r2, #6
 800742e:	18a0      	adds	r0, r4, r2
 8007430:	f00b fc00 	bl	8012c34 <memcpy.isra.0>
 8007434:	f240 4394 	movw	r3, #1172	; 0x494
 8007438:	8463      	strh	r3, [r4, #34]	; 0x22
 800743a:	2316      	movs	r3, #22
 800743c:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80074a0 <igmp_init+0xb0>
 8007440:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80074a4 <igmp_init+0xb4>
 8007444:	84e3      	strh	r3, [r4, #38]	; 0x26
 8007446:	f8c4 9014 	str.w	r9, [r4, #20]
 800744a:	4b17      	ldr	r3, [pc, #92]	; (80074a8 <igmp_init+0xb8>)
 800744c:	f8c4 800c 	str.w	r8, [r4, #12]
 8007450:	8227      	strh	r7, [r4, #16]
 8007452:	84a6      	strh	r6, [r4, #36]	; 0x24
 8007454:	4c15      	ldr	r4, [pc, #84]	; (80074ac <igmp_init+0xbc>)
 8007456:	2206      	movs	r2, #6
 8007458:	6023      	str	r3, [r4, #0]
 800745a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800745e:	18a0      	adds	r0, r4, r2
 8007460:	80a3      	strh	r3, [r4, #4]
 8007462:	4629      	mov	r1, r5
 8007464:	f00b fbe6 	bl	8012c34 <memcpy.isra.0>
 8007468:	23e0      	movs	r3, #224	; 0xe0
 800746a:	83e3      	strh	r3, [r4, #30]
 800746c:	f44f 13b8 	mov.w	r3, #1507328	; 0x170000
 8007470:	4a0f      	ldr	r2, [pc, #60]	; (80074b0 <igmp_init+0xc0>)
 8007472:	f8c4 9014 	str.w	r9, [r4, #20]
 8007476:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800747a:	f8c4 800c 	str.w	r8, [r4, #12]
 800747e:	8227      	strh	r7, [r4, #16]
 8007480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007484:	f803 1b01 	strb.w	r1, [r3], #1
 8007488:	e7bb      	b.n	8007402 <igmp_init+0x12>
 800748a:	bf00      	nop
 800748c:	2000a740 	andcs	sl, r0, r0, asr #14
 8007490:	2000a864 	andcs	sl, r0, r4, ror #16
 8007494:	2000a8a0 	andcs	sl, r0, r0, lsr #17
 8007498:	2000a860 	andcs	sl, r0, r0, ror #16
 800749c:	2000a898 	mulcs	r0, r8, r8
 80074a0:	02010040 	andeq	r0, r1, #64	; 0x40
 80074a4:	00460008 	subeq	r0, r6, r8
 80074a8:	005e0001 	subseq	r0, lr, r1
 80074ac:	2000a868 	andcs	sl, r0, r8, ror #16
 80074b0:	04940200 	ldreq	r0, [r4], #512	; 0x200

080074b4 <igmp_shutdown>:
 80074b4:	b570      	push	{r4, r5, r6, lr}
 80074b6:	2500      	movs	r5, #0
 80074b8:	462e      	mov	r6, r5
 80074ba:	4c07      	ldr	r4, [pc, #28]	; (80074d8 <igmp_shutdown+0x24>)
 80074bc:	6820      	ldr	r0, [r4, #0]
 80074be:	b120      	cbz	r0, 80074ca <igmp_shutdown+0x16>
 80074c0:	f00b fc5e 	bl	8012d80 <igmp_leave>
 80074c4:	6026      	str	r6, [r4, #0]
 80074c6:	7166      	strb	r6, [r4, #5]
 80074c8:	7126      	strb	r6, [r4, #4]
 80074ca:	3501      	adds	r5, #1
 80074cc:	2d24      	cmp	r5, #36	; 0x24
 80074ce:	f104 0408 	add.w	r4, r4, #8
 80074d2:	d1f3      	bne.n	80074bc <igmp_shutdown+0x8>
 80074d4:	bd70      	pop	{r4, r5, r6, pc}
 80074d6:	bf00      	nop
 80074d8:	2000a740 	andcs	sl, r0, r0, asr #14

080074dc <ip_init>:
 80074dc:	b538      	push	{r3, r4, r5, lr}
 80074de:	4604      	mov	r4, r0
 80074e0:	460d      	mov	r5, r1
 80074e2:	f7ff fec1 	bl	8007268 <udp_init>
 80074e6:	4629      	mov	r1, r5
 80074e8:	4620      	mov	r0, r4
 80074ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074ee:	f7ff bf7f 	b.w	80073f0 <igmp_init>

080074f2 <ip_shutdown>:
 80074f2:	b508      	push	{r3, lr}
 80074f4:	f7ff ffde 	bl	80074b4 <igmp_shutdown>
 80074f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80074fc:	f7ff bee0 	b.w	80072c0 <udp_shutdown>

08007500 <console_init>:
 8007500:	b508      	push	{r3, lr}
 8007502:	f00d fa7f 	bl	8014a04 <uart0_init>
 8007506:	4804      	ldr	r0, [pc, #16]	; (8007518 <console_init+0x18>)
 8007508:	f00d faac 	bl	8014a64 <uart0_puts>
 800750c:	4803      	ldr	r0, [pc, #12]	; (800751c <console_init+0x1c>)
 800750e:	f00d faa9 	bl	8014a64 <uart0_puts>
 8007512:	2000      	movs	r0, #0
 8007514:	bd08      	pop	{r3, pc}
 8007516:	bf00      	nop
 8007518:	080169b0 	stmdaeq	r1, {r4, r5, r7, r8, fp, sp, lr}
 800751c:	08018cd0 	stmdaeq	r1, {r4, r6, r7, sl, fp, pc}

08007520 <net_handle>:
 8007520:	b510      	push	{r4, lr}
 8007522:	4c0c      	ldr	r4, [pc, #48]	; (8007554 <net_handle+0x34>)
 8007524:	4620      	mov	r0, r4
 8007526:	f00e f811 	bl	801554c <emac_eth_recv>
 800752a:	2800      	cmp	r0, #0
 800752c:	dd07      	ble.n	800753e <net_handle+0x1e>
 800752e:	6820      	ldr	r0, [r4, #0]
 8007530:	8983      	ldrh	r3, [r0, #12]
 8007532:	2b08      	cmp	r3, #8
 8007534:	d107      	bne.n	8007546 <net_handle+0x26>
 8007536:	f000 fa6f 	bl	8007a18 <ip_handle>
 800753a:	f00e f81b 	bl	8015574 <emac_free_pkt>
 800753e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007542:	f009 bcad 	b.w	8010ea0 <net_timers_run>
 8007546:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800754a:	d1f6      	bne.n	800753a <net_handle+0x1a>
 800754c:	f000 fa08 	bl	8007960 <arp_handle>
 8007550:	e7f3      	b.n	800753a <net_handle+0x1a>
 8007552:	bf00      	nop
 8007554:	200029e8 	andcs	r2, r0, r8, ror #19

08007558 <tcp_handle>:
 8007558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800755c:	4605      	mov	r5, r0
 800755e:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8007560:	f8b0 8010 	ldrh.w	r8, [r0, #16]
 8007564:	ba5b      	rev16	r3, r3
 8007566:	8443      	strh	r3, [r0, #34]	; 0x22
 8007568:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 800756a:	f890 902e 	ldrb.w	r9, [r0, #46]	; 0x2e
 800756e:	ba5b      	rev16	r3, r3
 8007570:	8483      	strh	r3, [r0, #36]	; 0x24
 8007572:	f009 fd09 	bl	8010f88 <_bswap32>
 8007576:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 8007578:	4ca5      	ldr	r4, [pc, #660]	; (8007810 <tcp_handle+0x2b8>)
 800757a:	ba5b      	rev16	r3, r3
 800757c:	862b      	strh	r3, [r5, #48]	; 0x30
 800757e:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 8007580:	8822      	ldrh	r2, [r4, #0]
 8007582:	ba5b      	rev16	r3, r3
 8007584:	86ab      	strh	r3, [r5, #52]	; 0x34
 8007586:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 8007588:	429a      	cmp	r2, r3
 800758a:	d14d      	bne.n	8007628 <tcp_handle+0xd0>
 800758c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007590:	2b01      	cmp	r3, #1
 8007592:	d00d      	beq.n	80075b0 <tcp_handle+0x58>
 8007594:	2204      	movs	r2, #4
 8007596:	4668      	mov	r0, sp
 8007598:	f105 011a 	add.w	r1, r5, #26
 800759c:	f009 fcea 	bl	8010f74 <memcpy.isra.0>
 80075a0:	8862      	ldrh	r2, [r4, #2]
 80075a2:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d13f      	bne.n	8007628 <tcp_handle+0xd0>
 80075a8:	6862      	ldr	r2, [r4, #4]
 80075aa:	9b00      	ldr	r3, [sp, #0]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d13b      	bne.n	8007628 <tcp_handle+0xd0>
 80075b0:	2204      	movs	r2, #4
 80075b2:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 80075b6:	eb0d 0002 	add.w	r0, sp, r2
 80075ba:	f009 fcdb 	bl	8010f74 <memcpy.isra.0>
 80075be:	2204      	movs	r2, #4
 80075c0:	f105 0126 	add.w	r1, r5, #38	; 0x26
 80075c4:	eb0d 0002 	add.w	r0, sp, r2
 80075c8:	9e01      	ldr	r6, [sp, #4]
 80075ca:	f009 fcd3 	bl	8010f74 <memcpy.isra.0>
 80075ce:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 80075d2:	9f01      	ldr	r7, [sp, #4]
 80075d4:	2a01      	cmp	r2, #1
 80075d6:	f8b5 a030 	ldrh.w	sl, [r5, #48]	; 0x30
 80075da:	d01b      	beq.n	8007614 <tcp_handle+0xbc>
 80075dc:	1ed3      	subs	r3, r2, #3
 80075de:	2b07      	cmp	r3, #7
 80075e0:	d822      	bhi.n	8007628 <tcp_handle+0xd0>
 80075e2:	fa98 f198 	rev16.w	r1, r8
 80075e6:	f64f 78ec 	movw	r8, #65516	; 0xffec
 80075ea:	ea4f 1319 	mov.w	r3, r9, lsr #4
 80075ee:	eba8 0883 	sub.w	r8, r8, r3, lsl #2
 80075f2:	4488      	add	r8, r1
 80075f4:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 80075f6:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
 80075fa:	ea4f 0983 	mov.w	r9, r3, lsl #2
 80075fe:	fa1f f888 	uxth.w	r8, r8
 8007602:	2900      	cmp	r1, #0
 8007604:	d142      	bne.n	800768c <tcp_handle+0x134>
 8007606:	f1b8 0f00 	cmp.w	r8, #0
 800760a:	d16b      	bne.n	80076e4 <tcp_handle+0x18c>
 800760c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800760e:	42bb      	cmp	r3, r7
 8007610:	d168      	bne.n	80076e4 <tcp_handle+0x18c>
 8007612:	e048      	b.n	80076a6 <tcp_handle+0x14e>
 8007614:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8007618:	075a      	lsls	r2, r3, #29
 800761a:	d405      	bmi.n	8007628 <tcp_handle+0xd0>
 800761c:	06d8      	lsls	r0, r3, #27
 800761e:	d506      	bpl.n	800762e <tcp_handle+0xd6>
 8007620:	4628      	mov	r0, r5
 8007622:	497b      	ldr	r1, [pc, #492]	; (8007810 <tcp_handle+0x2b8>)
 8007624:	f009 fd7c 	bl	8011120 <_send_reset>
 8007628:	b004      	add	sp, #16
 800762a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800762e:	0799      	lsls	r1, r3, #30
 8007630:	d5fa      	bpl.n	8007628 <tcp_handle+0xd0>
 8007632:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
 8007636:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800763a:	4668      	mov	r0, sp
 800763c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007640:	f105 011a 	add.w	r1, r5, #26
 8007644:	2204      	movs	r2, #4
 8007646:	8063      	strh	r3, [r4, #2]
 8007648:	f009 fc94 	bl	8010f74 <memcpy.isra.0>
 800764c:	2206      	movs	r2, #6
 800764e:	9b00      	ldr	r3, [sp, #0]
 8007650:	18a9      	adds	r1, r5, r2
 8007652:	4870      	ldr	r0, [pc, #448]	; (8007814 <tcp_handle+0x2bc>)
 8007654:	6063      	str	r3, [r4, #4]
 8007656:	f009 fc8d 	bl	8010f74 <memcpy.isra.0>
 800765a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800765c:	1c7b      	adds	r3, r7, #1
 800765e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8007662:	6363      	str	r3, [r4, #52]	; 0x34
 8007664:	2312      	movs	r3, #18
 8007666:	486a      	ldr	r0, [pc, #424]	; (8007810 <tcp_handle+0x2b8>)
 8007668:	a901      	add	r1, sp, #4
 800766a:	f88d 300c 	strb.w	r3, [sp, #12]
 800766e:	e9c4 7608 	strd	r7, r6, [r4, #32]
 8007672:	63e7      	str	r7, [r4, #60]	; 0x3c
 8007674:	f8c4 a018 	str.w	sl, [r4, #24]
 8007678:	f009 fcac 	bl	8010fd4 <_tcp_send_package>
 800767c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800767e:	1c5a      	adds	r2, r3, #1
 8007680:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8007684:	2303      	movs	r3, #3
 8007686:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800768a:	e7cd      	b.n	8007628 <tcp_handle+0xd0>
 800768c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800768e:	eba3 0c07 	sub.w	ip, r3, r7
 8007692:	f1b8 0f00 	cmp.w	r8, #0
 8007696:	d10d      	bne.n	80076b4 <tcp_handle+0x15c>
 8007698:	f1bc 0f00 	cmp.w	ip, #0
 800769c:	dc22      	bgt.n	80076e4 <tcp_handle+0x18c>
 800769e:	1afb      	subs	r3, r7, r3
 80076a0:	1a5b      	subs	r3, r3, r1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	da1e      	bge.n	80076e4 <tcp_handle+0x18c>
 80076a6:	0743      	lsls	r3, r0, #29
 80076a8:	d530      	bpl.n	800770c <tcp_handle+0x1b4>
 80076aa:	8821      	ldrh	r1, [r4, #0]
 80076ac:	4858      	ldr	r0, [pc, #352]	; (8007810 <tcp_handle+0x2b8>)
 80076ae:	f009 fc47 	bl	8010f40 <_init_tcb>
 80076b2:	e7b9      	b.n	8007628 <tcp_handle+0xd0>
 80076b4:	f1bc 0f00 	cmp.w	ip, #0
 80076b8:	dc06      	bgt.n	80076c8 <tcp_handle+0x170>
 80076ba:	eba7 0c03 	sub.w	ip, r7, r3
 80076be:	ebac 0c01 	sub.w	ip, ip, r1
 80076c2:	f1bc 0f00 	cmp.w	ip, #0
 80076c6:	dbee      	blt.n	80076a6 <tcp_handle+0x14e>
 80076c8:	eb08 0c07 	add.w	ip, r8, r7
 80076cc:	f103 0e01 	add.w	lr, r3, #1
 80076d0:	ebae 0e0c 	sub.w	lr, lr, ip
 80076d4:	f1be 0f00 	cmp.w	lr, #0
 80076d8:	dc04      	bgt.n	80076e4 <tcp_handle+0x18c>
 80076da:	43db      	mvns	r3, r3
 80076dc:	1a5b      	subs	r3, r3, r1
 80076de:	eb13 0f0c 	cmn.w	r3, ip
 80076e2:	d4e0      	bmi.n	80076a6 <tcp_handle+0x14e>
 80076e4:	0742      	lsls	r2, r0, #29
 80076e6:	d505      	bpl.n	80076f4 <tcp_handle+0x19c>
 80076e8:	8821      	ldrh	r1, [r4, #0]
 80076ea:	4849      	ldr	r0, [pc, #292]	; (8007810 <tcp_handle+0x2b8>)
 80076ec:	f009 fc28 	bl	8010f40 <_init_tcb>
 80076f0:	2301      	movs	r3, #1
 80076f2:	e7c8      	b.n	8007686 <tcp_handle+0x12e>
 80076f4:	6963      	ldr	r3, [r4, #20]
 80076f6:	9301      	str	r3, [sp, #4]
 80076f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076fa:	9302      	str	r3, [sp, #8]
 80076fc:	2310      	movs	r3, #16
 80076fe:	4844      	ldr	r0, [pc, #272]	; (8007810 <tcp_handle+0x2b8>)
 8007700:	a901      	add	r1, sp, #4
 8007702:	f88d 300c 	strb.w	r3, [sp, #12]
 8007706:	f009 fc65 	bl	8010fd4 <_tcp_send_package>
 800770a:	e78d      	b.n	8007628 <tcp_handle+0xd0>
 800770c:	0781      	lsls	r1, r0, #30
 800770e:	d505      	bpl.n	800771c <tcp_handle+0x1c4>
 8007710:	2a03      	cmp	r2, #3
 8007712:	d0ed      	beq.n	80076f0 <tcp_handle+0x198>
 8007714:	4628      	mov	r0, r5
 8007716:	493e      	ldr	r1, [pc, #248]	; (8007810 <tcp_handle+0x2b8>)
 8007718:	f009 fd02 	bl	8011120 <_send_reset>
 800771c:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8007720:	06da      	lsls	r2, r3, #27
 8007722:	d581      	bpl.n	8007628 <tcp_handle+0xd0>
 8007724:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007728:	3b03      	subs	r3, #3
 800772a:	2b07      	cmp	r3, #7
 800772c:	d818      	bhi.n	8007760 <tcp_handle+0x208>
 800772e:	e8df f003 	tbb	[pc, r3]
 8007732:	75757504 	ldrbvc	r7, [r5, #-1284]!	; 0xfffffafc
 8007736:	a59c7575 	ldrge	r7, [ip, #1397]	; 0x575
 800773a:	6923      	ldr	r3, [r4, #16]
 800773c:	1b9b      	subs	r3, r3, r6
 800773e:	2b00      	cmp	r3, #0
 8007740:	dc0a      	bgt.n	8007758 <tcp_handle+0x200>
 8007742:	6963      	ldr	r3, [r4, #20]
 8007744:	1af3      	subs	r3, r6, r3
 8007746:	2b00      	cmp	r3, #0
 8007748:	dc06      	bgt.n	8007758 <tcp_handle+0x200>
 800774a:	2304      	movs	r3, #4
 800774c:	e9c4 7608 	strd	r7, r6, [r4, #32]
 8007750:	f8c4 a018 	str.w	sl, [r4, #24]
 8007754:	6126      	str	r6, [r4, #16]
 8007756:	e796      	b.n	8007686 <tcp_handle+0x12e>
 8007758:	4628      	mov	r0, r5
 800775a:	492d      	ldr	r1, [pc, #180]	; (8007810 <tcp_handle+0x2b8>)
 800775c:	f009 fce0 	bl	8011120 <_send_reset>
 8007760:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007764:	3b04      	subs	r3, #4
 8007766:	2b02      	cmp	r3, #2
 8007768:	d830      	bhi.n	80077cc <tcp_handle+0x274>
 800776a:	f1b8 0f00 	cmp.w	r8, #0
 800776e:	d02d      	beq.n	80077cc <tcp_handle+0x274>
 8007770:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007772:	42bb      	cmp	r3, r7
 8007774:	f040 8091 	bne.w	800789a <tcp_handle+0x342>
 8007778:	f240 53b6 	movw	r3, #1462	; 0x5b6
 800777c:	f8df a098 	ldr.w	sl, [pc, #152]	; 8007818 <tcp_handle+0x2c0>
 8007780:	f105 0122 	add.w	r1, r5, #34	; 0x22
 8007784:	f8ba 7000 	ldrh.w	r7, [sl]
 8007788:	4642      	mov	r2, r8
 800778a:	435f      	muls	r7, r3
 800778c:	1d38      	adds	r0, r7, #4
 800778e:	4449      	add	r1, r9
 8007790:	4450      	add	r0, sl
 8007792:	f009 fbef 	bl	8010f74 <memcpy.isra.0>
 8007796:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8007798:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800779a:	f2a2 52b4 	subw	r2, r2, #1460	; 0x5b4
 800779e:	8722      	strh	r2, [r4, #56]	; 0x38
 80077a0:	6962      	ldr	r2, [r4, #20]
 80077a2:	4443      	add	r3, r8
 80077a4:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80077a8:	6363      	str	r3, [r4, #52]	; 0x34
 80077aa:	2310      	movs	r3, #16
 80077ac:	4457      	add	r7, sl
 80077ae:	4818      	ldr	r0, [pc, #96]	; (8007810 <tcp_handle+0x2b8>)
 80077b0:	f8a7 85b8 	strh.w	r8, [r7, #1464]	; 0x5b8
 80077b4:	a901      	add	r1, sp, #4
 80077b6:	f88d 300c 	strb.w	r3, [sp, #12]
 80077ba:	f009 fc0b 	bl	8010fd4 <_tcp_send_package>
 80077be:	f8ba 3000 	ldrh.w	r3, [sl]
 80077c2:	3301      	adds	r3, #1
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	f8aa 3000 	strh.w	r3, [sl]
 80077cc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	f67f af29 	bls.w	8007628 <tcp_handle+0xd0>
 80077d6:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 80077da:	07db      	lsls	r3, r3, #31
 80077dc:	f57f af24 	bpl.w	8007628 <tcp_handle+0xd0>
 80077e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077e2:	6962      	ldr	r2, [r4, #20]
 80077e4:	3301      	adds	r3, #1
 80077e6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80077ea:	6363      	str	r3, [r4, #52]	; 0x34
 80077ec:	2310      	movs	r3, #16
 80077ee:	4808      	ldr	r0, [pc, #32]	; (8007810 <tcp_handle+0x2b8>)
 80077f0:	a901      	add	r1, sp, #4
 80077f2:	f88d 300c 	strb.w	r3, [sp, #12]
 80077f6:	f009 fbed 	bl	8010fd4 <_tcp_send_package>
 80077fa:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80077fe:	2b05      	cmp	r3, #5
 8007800:	d053      	beq.n	80078aa <tcp_handle+0x352>
 8007802:	d84d      	bhi.n	80078a0 <tcp_handle+0x348>
 8007804:	3b03      	subs	r3, #3
 8007806:	2b01      	cmp	r3, #1
 8007808:	f63f af0e 	bhi.w	8007628 <tcp_handle+0xd0>
 800780c:	2307      	movs	r3, #7
 800780e:	e73a      	b.n	8007686 <tcp_handle+0x12e>
 8007810:	20003574 	andcs	r3, r0, r4, ror r5
 8007814:	2000357c 	andcs	r3, r0, ip, ror r5
 8007818:	20002a04 	andcs	r2, r0, r4, lsl #20
 800781c:	6923      	ldr	r3, [r4, #16]
 800781e:	1b99      	subs	r1, r3, r6
 8007820:	d513      	bpl.n	800784a <tcp_handle+0x2f2>
 8007822:	6962      	ldr	r2, [r4, #20]
 8007824:	1ab2      	subs	r2, r6, r2
 8007826:	2a00      	cmp	r2, #0
 8007828:	dc0f      	bgt.n	800784a <tcp_handle+0x2f2>
 800782a:	6126      	str	r6, [r4, #16]
 800782c:	6a23      	ldr	r3, [r4, #32]
 800782e:	1bda      	subs	r2, r3, r7
 8007830:	2a00      	cmp	r2, #0
 8007832:	db05      	blt.n	8007840 <tcp_handle+0x2e8>
 8007834:	42bb      	cmp	r3, r7
 8007836:	d193      	bne.n	8007760 <tcp_handle+0x208>
 8007838:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800783a:	1b9b      	subs	r3, r3, r6
 800783c:	2b00      	cmp	r3, #0
 800783e:	dc8f      	bgt.n	8007760 <tcp_handle+0x208>
 8007840:	e9c4 7608 	strd	r7, r6, [r4, #32]
 8007844:	f8c4 a018 	str.w	sl, [r4, #24]
 8007848:	e78a      	b.n	8007760 <tcp_handle+0x208>
 800784a:	1af3      	subs	r3, r6, r3
 800784c:	2b00      	cmp	r3, #0
 800784e:	dc06      	bgt.n	800785e <tcp_handle+0x306>
 8007850:	2900      	cmp	r1, #0
 8007852:	dc85      	bgt.n	8007760 <tcp_handle+0x208>
 8007854:	6963      	ldr	r3, [r4, #20]
 8007856:	1af3      	subs	r3, r6, r3
 8007858:	2b00      	cmp	r3, #0
 800785a:	dc81      	bgt.n	8007760 <tcp_handle+0x208>
 800785c:	e7e6      	b.n	800782c <tcp_handle+0x2d4>
 800785e:	6963      	ldr	r3, [r4, #20]
 8007860:	1b9a      	subs	r2, r3, r6
 8007862:	2a00      	cmp	r2, #0
 8007864:	f6bf af7c 	bge.w	8007760 <tcp_handle+0x208>
 8007868:	e745      	b.n	80076f6 <tcp_handle+0x19e>
 800786a:	6963      	ldr	r3, [r4, #20]
 800786c:	42b3      	cmp	r3, r6
 800786e:	f47f af77 	bne.w	8007760 <tcp_handle+0x208>
 8007872:	8821      	ldrh	r1, [r4, #0]
 8007874:	480f      	ldr	r0, [pc, #60]	; (80078b4 <tcp_handle+0x35c>)
 8007876:	f009 fb63 	bl	8010f40 <_init_tcb>
 800787a:	e771      	b.n	8007760 <tcp_handle+0x208>
 800787c:	6963      	ldr	r3, [r4, #20]
 800787e:	42b3      	cmp	r3, r6
 8007880:	f47f af6e 	bne.w	8007760 <tcp_handle+0x208>
 8007884:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007886:	480b      	ldr	r0, [pc, #44]	; (80078b4 <tcp_handle+0x35c>)
 8007888:	9302      	str	r3, [sp, #8]
 800788a:	2310      	movs	r3, #16
 800788c:	a901      	add	r1, sp, #4
 800788e:	9601      	str	r6, [sp, #4]
 8007890:	f88d 300c 	strb.w	r3, [sp, #12]
 8007894:	f009 fb9e 	bl	8010fd4 <_tcp_send_package>
 8007898:	e762      	b.n	8007760 <tcp_handle+0x208>
 800789a:	6962      	ldr	r2, [r4, #20]
 800789c:	9201      	str	r2, [sp, #4]
 800789e:	e72c      	b.n	80076fa <tcp_handle+0x1a2>
 80078a0:	2b06      	cmp	r3, #6
 80078a2:	f47f aec1 	bne.w	8007628 <tcp_handle+0xd0>
 80078a6:	230a      	movs	r3, #10
 80078a8:	e6ed      	b.n	8007686 <tcp_handle+0x12e>
 80078aa:	6963      	ldr	r3, [r4, #20]
 80078ac:	42b3      	cmp	r3, r6
 80078ae:	d0fa      	beq.n	80078a6 <tcp_handle+0x34e>
 80078b0:	2308      	movs	r3, #8
 80078b2:	e6e8      	b.n	8007686 <tcp_handle+0x12e>
 80078b4:	20003574 	andcs	r3, r0, r4, ror r5

080078b8 <udp_handle>:
 80078b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80078bc:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 80078be:	4607      	mov	r7, r0
 80078c0:	ba5b      	rev16	r3, r3
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
 80078c8:	2a01      	cmp	r2, #1
 80078ca:	d904      	bls.n	80078d6 <udp_handle+0x1e>
 80078cc:	2b7b      	cmp	r3, #123	; 0x7b
 80078ce:	d002      	beq.n	80078d6 <udp_handle+0x1e>
 80078d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078d4:	d308      	bcc.n	80078e8 <udp_handle+0x30>
 80078d6:	2400      	movs	r4, #0
 80078d8:	4a1f      	ldr	r2, [pc, #124]	; (8007958 <udp_handle+0xa0>)
 80078da:	f852 1b04 	ldr.w	r1, [r2], #4
 80078de:	4299      	cmp	r1, r3
 80078e0:	d005      	beq.n	80078ee <udp_handle+0x36>
 80078e2:	3401      	adds	r4, #1
 80078e4:	2c08      	cmp	r4, #8
 80078e6:	d1f8      	bne.n	80078da <udp_handle+0x22>
 80078e8:	b002      	add	sp, #8
 80078ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078ee:	f640 3394 	movw	r3, #2964	; 0xb94
 80078f2:	8cfe      	ldrh	r6, [r7, #38]	; 0x26
 80078f4:	435c      	muls	r4, r3
 80078f6:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 80078fa:	ba76      	rev16	r6, r6
 80078fc:	3e08      	subs	r6, #8
 80078fe:	b2b6      	uxth	r6, r6
 8007900:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 8007904:	bf28      	it	cs
 8007906:	f44f 66b8 	movcs.w	r6, #1472	; 0x5c0
 800790a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 800795c <udp_handle+0xa4>
 800790e:	1d20      	adds	r0, r4, #4
 8007910:	f838 5004 	ldrh.w	r5, [r8, r4]
 8007914:	4632      	mov	r2, r6
 8007916:	435d      	muls	r5, r3
 8007918:	4428      	add	r0, r5
 800791a:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 800791e:	4440      	add	r0, r8
 8007920:	f009 fcac 	bl	801127c <memcpy.isra.0>
 8007924:	2204      	movs	r2, #4
 8007926:	f107 011a 	add.w	r1, r7, #26
 800792a:	eb0d 0002 	add.w	r0, sp, r2
 800792e:	f009 fca5 	bl	801127c <memcpy.isra.0>
 8007932:	9a01      	ldr	r2, [sp, #4]
 8007934:	192b      	adds	r3, r5, r4
 8007936:	4443      	add	r3, r8
 8007938:	f8c3 25c4 	str.w	r2, [r3, #1476]	; 0x5c4
 800793c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800793e:	f8a3 65ca 	strh.w	r6, [r3, #1482]	; 0x5ca
 8007942:	ba52      	rev16	r2, r2
 8007944:	f8a3 25c8 	strh.w	r2, [r3, #1480]	; 0x5c8
 8007948:	f838 3004 	ldrh.w	r3, [r8, r4]
 800794c:	3301      	adds	r3, #1
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	f828 3004 	strh.w	r3, [r8, r4]
 8007956:	e7c7      	b.n	80078e8 <udp_handle+0x30>
 8007958:	20003bb4 			; <UNDEFINED> instruction: 0x20003bb4
 800795c:	20003bd4 	ldrdcs	r3, [r0], -r4

08007960 <arp_handle>:
 8007960:	8a83      	ldrh	r3, [r0, #20]
 8007962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007966:	d003      	beq.n	8007970 <arp_handle+0x10>
 8007968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800796c:	d002      	beq.n	8007974 <arp_handle+0x14>
 800796e:	4770      	bx	lr
 8007970:	f00a bec2 	b.w	80126f8 <arp_handle_request>
 8007974:	f00a bee8 	b.w	8012748 <arp_handle_reply>

08007978 <igmp_handle>:
 8007978:	7b83      	ldrb	r3, [r0, #14]
 800797a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800797e:	2b45      	cmp	r3, #69	; 0x45
 8007980:	d116      	bne.n	80079b0 <igmp_handle+0x38>
 8007982:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8007986:	2b11      	cmp	r3, #17
 8007988:	d112      	bne.n	80079b0 <igmp_handle+0x38>
 800798a:	4b20      	ldr	r3, [pc, #128]	; (8007a0c <igmp_handle+0x94>)
 800798c:	f100 051e 	add.w	r5, r0, #30
 8007990:	9300      	str	r3, [sp, #0]
 8007992:	466a      	mov	r2, sp
 8007994:	462b      	mov	r3, r5
 8007996:	f100 0622 	add.w	r6, r0, #34	; 0x22
 800799a:	42b3      	cmp	r3, r6
 800799c:	d10b      	bne.n	80079b6 <igmp_handle+0x3e>
 800799e:	2401      	movs	r4, #1
 80079a0:	2100      	movs	r1, #0
 80079a2:	f04f 0c01 	mov.w	ip, #1
 80079a6:	4b1a      	ldr	r3, [pc, #104]	; (8007a10 <igmp_handle+0x98>)
 80079a8:	4a1a      	ldr	r2, [pc, #104]	; (8007a14 <igmp_handle+0x9c>)
 80079aa:	681f      	ldr	r7, [r3, #0]
 80079ac:	428f      	cmp	r7, r1
 80079ae:	d10a      	bne.n	80079c6 <igmp_handle+0x4e>
 80079b0:	b003      	add	sp, #12
 80079b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079b6:	f813 4b01 	ldrb.w	r4, [r3], #1
 80079ba:	f812 1b01 	ldrb.w	r1, [r2], #1
 80079be:	428c      	cmp	r4, r1
 80079c0:	d0eb      	beq.n	800799a <igmp_handle+0x22>
 80079c2:	2400      	movs	r4, #0
 80079c4:	e7ec      	b.n	80079a0 <igmp_handle+0x28>
 80079c6:	6813      	ldr	r3, [r2, #0]
 80079c8:	9301      	str	r3, [sp, #4]
 80079ca:	b924      	cbnz	r4, 80079d6 <igmp_handle+0x5e>
 80079cc:	462b      	mov	r3, r5
 80079ce:	f10d 0e04 	add.w	lr, sp, #4
 80079d2:	42b3      	cmp	r3, r6
 80079d4:	d10e      	bne.n	80079f4 <igmp_handle+0x7c>
 80079d6:	f892 e005 	ldrb.w	lr, [r2, #5]
 80079da:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 80079de:	f1be 0f01 	cmp.w	lr, #1
 80079e2:	d110      	bne.n	8007a06 <igmp_handle+0x8e>
 80079e4:	f892 e004 	ldrb.w	lr, [r2, #4]
 80079e8:	459e      	cmp	lr, r3
 80079ea:	d909      	bls.n	8007a00 <igmp_handle+0x88>
 80079ec:	085b      	lsrs	r3, r3, #1
 80079ee:	3301      	adds	r3, #1
 80079f0:	7113      	strb	r3, [r2, #4]
 80079f2:	e005      	b.n	8007a00 <igmp_handle+0x88>
 80079f4:	f813 9b01 	ldrb.w	r9, [r3], #1
 80079f8:	f81e 8b01 	ldrb.w	r8, [lr], #1
 80079fc:	45c1      	cmp	r9, r8
 80079fe:	d0e8      	beq.n	80079d2 <igmp_handle+0x5a>
 8007a00:	3101      	adds	r1, #1
 8007a02:	3208      	adds	r2, #8
 8007a04:	e7d2      	b.n	80079ac <igmp_handle+0x34>
 8007a06:	f882 c005 	strb.w	ip, [r2, #5]
 8007a0a:	e7ef      	b.n	80079ec <igmp_handle+0x74>
 8007a0c:	010000e0 	smlatteq	r0, r0, r0, r0
 8007a10:	2000a864 	andcs	sl, r0, r4, ror #16
 8007a14:	2000a740 	andcs	sl, r0, r0, asr #14

08007a18 <ip_handle>:
 8007a18:	7b82      	ldrb	r2, [r0, #14]
 8007a1a:	7dc3      	ldrb	r3, [r0, #23]
 8007a1c:	2a45      	cmp	r2, #69	; 0x45
 8007a1e:	d003      	beq.n	8007a28 <ip_handle+0x10>
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d111      	bne.n	8007a48 <ip_handle+0x30>
 8007a24:	f7ff bfa8 	b.w	8007978 <igmp_handle>
 8007a28:	2b06      	cmp	r3, #6
 8007a2a:	d00b      	beq.n	8007a44 <ip_handle+0x2c>
 8007a2c:	d804      	bhi.n	8007a38 <ip_handle+0x20>
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d006      	beq.n	8007a40 <ip_handle+0x28>
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d0f6      	beq.n	8007a24 <ip_handle+0xc>
 8007a36:	4770      	bx	lr
 8007a38:	2b11      	cmp	r3, #17
 8007a3a:	d105      	bne.n	8007a48 <ip_handle+0x30>
 8007a3c:	f7ff bf3c 	b.w	80078b8 <udp_handle>
 8007a40:	f000 b804 	b.w	8007a4c <icmp_handle>
 8007a44:	f7ff bd88 	b.w	8007558 <tcp_handle>
 8007a48:	4770      	bx	lr
	...

08007a4c <icmp_handle>:
 8007a4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a4e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8007a52:	4604      	mov	r4, r0
 8007a54:	2b08      	cmp	r3, #8
 8007a56:	d13e      	bne.n	8007ad6 <icmp_handle+0x8a>
 8007a58:	f890 5023 	ldrb.w	r5, [r0, #35]	; 0x23
 8007a5c:	2d00      	cmp	r5, #0
 8007a5e:	d13a      	bne.n	8007ad6 <icmp_handle+0x8a>
 8007a60:	1d86      	adds	r6, r0, #6
 8007a62:	4631      	mov	r1, r6
 8007a64:	2206      	movs	r2, #6
 8007a66:	f00b f9f1 	bl	8012e4c <memcpy.isra.0>
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	2206      	movs	r2, #6
 8007a6e:	491b      	ldr	r1, [pc, #108]	; (8007adc <icmp_handle+0x90>)
 8007a70:	f00b f9ec 	bl	8012e4c <memcpy.isra.0>
 8007a74:	8a63      	ldrh	r3, [r4, #18]
 8007a76:	f104 061a 	add.w	r6, r4, #26
 8007a7a:	43db      	mvns	r3, r3
 8007a7c:	4631      	mov	r1, r6
 8007a7e:	2204      	movs	r2, #4
 8007a80:	8263      	strh	r3, [r4, #18]
 8007a82:	f104 001e 	add.w	r0, r4, #30
 8007a86:	f00b f9e1 	bl	8012e4c <memcpy.isra.0>
 8007a8a:	2204      	movs	r2, #4
 8007a8c:	4b14      	ldr	r3, [pc, #80]	; (8007ae0 <icmp_handle+0x94>)
 8007a8e:	eb0d 0102 	add.w	r1, sp, r2
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4630      	mov	r0, r6
 8007a96:	f104 060e 	add.w	r6, r4, #14
 8007a9a:	9301      	str	r3, [sp, #4]
 8007a9c:	f00b f9d6 	bl	8012e4c <memcpy.isra.0>
 8007aa0:	2114      	movs	r1, #20
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	7625      	strb	r5, [r4, #24]
 8007aa6:	7665      	strb	r5, [r4, #25]
 8007aa8:	f00b f9b7 	bl	8012e1a <net_chksum>
 8007aac:	8a21      	ldrh	r1, [r4, #16]
 8007aae:	8320      	strh	r0, [r4, #24]
 8007ab0:	ba49      	rev16	r1, r1
 8007ab2:	b289      	uxth	r1, r1
 8007ab4:	4630      	mov	r0, r6
 8007ab6:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8007aba:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 8007abe:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 8007ac2:	f00b f9aa 	bl	8012e1a <net_chksum>
 8007ac6:	8a21      	ldrh	r1, [r4, #16]
 8007ac8:	84a0      	strh	r0, [r4, #36]	; 0x24
 8007aca:	ba49      	rev16	r1, r1
 8007acc:	b289      	uxth	r1, r1
 8007ace:	4620      	mov	r0, r4
 8007ad0:	310e      	adds	r1, #14
 8007ad2:	f00d fd53 	bl	801557c <emac_eth_send>
 8007ad6:	b002      	add	sp, #8
 8007ad8:	bd70      	pop	{r4, r5, r6, pc}
 8007ada:	bf00      	nop
 8007adc:	200029e0 	andcs	r2, r0, r0, ror #19
 8007ae0:	200029d4 	ldrdcs	r2, [r0], -r4

08007ae4 <__aeabi_d2f>:
 8007ae4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007ae8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8007aec:	bf24      	itt	cs
 8007aee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8007af2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8007af6:	d90d      	bls.n	8007b14 <__aeabi_d2f+0x30>
 8007af8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8007afc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8007b00:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8007b04:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8007b08:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8007b0c:	bf08      	it	eq
 8007b0e:	f020 0001 	biceq.w	r0, r0, #1
 8007b12:	4770      	bx	lr
 8007b14:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8007b18:	d121      	bne.n	8007b5e <__aeabi_d2f+0x7a>
 8007b1a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8007b1e:	bfbc      	itt	lt
 8007b20:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8007b24:	4770      	bxlt	lr
 8007b26:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007b2a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8007b2e:	f1c2 0218 	rsb	r2, r2, #24
 8007b32:	f1c2 0c20 	rsb	ip, r2, #32
 8007b36:	fa10 f30c 	lsls.w	r3, r0, ip
 8007b3a:	fa20 f002 	lsr.w	r0, r0, r2
 8007b3e:	bf18      	it	ne
 8007b40:	f040 0001 	orrne.w	r0, r0, #1
 8007b44:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8007b48:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8007b4c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8007b50:	ea40 000c 	orr.w	r0, r0, ip
 8007b54:	fa23 f302 	lsr.w	r3, r3, r2
 8007b58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007b5c:	e7cc      	b.n	8007af8 <__aeabi_d2f+0x14>
 8007b5e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8007b62:	d107      	bne.n	8007b74 <__aeabi_d2f+0x90>
 8007b64:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8007b68:	bf1e      	ittt	ne
 8007b6a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8007b6e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8007b72:	4770      	bxne	lr
 8007b74:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8007b78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8007b7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop

08007b84 <__aeabi_frsub>:
 8007b84:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8007b88:	e002      	b.n	8007b90 <__addsf3>
 8007b8a:	bf00      	nop

08007b8c <__aeabi_fsub>:
 8007b8c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08007b90 <__addsf3>:
 8007b90:	0042      	lsls	r2, r0, #1
 8007b92:	bf1f      	itttt	ne
 8007b94:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8007b98:	ea92 0f03 	teqne	r2, r3
 8007b9c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8007ba0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007ba4:	d06a      	beq.n	8007c7c <__addsf3+0xec>
 8007ba6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8007baa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8007bae:	bfc1      	itttt	gt
 8007bb0:	18d2      	addgt	r2, r2, r3
 8007bb2:	4041      	eorgt	r1, r0
 8007bb4:	4048      	eorgt	r0, r1
 8007bb6:	4041      	eorgt	r1, r0
 8007bb8:	bfb8      	it	lt
 8007bba:	425b      	neglt	r3, r3
 8007bbc:	2b19      	cmp	r3, #25
 8007bbe:	bf88      	it	hi
 8007bc0:	4770      	bxhi	lr
 8007bc2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8007bc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007bca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8007bce:	bf18      	it	ne
 8007bd0:	4240      	negne	r0, r0
 8007bd2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007bd6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8007bda:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8007bde:	bf18      	it	ne
 8007be0:	4249      	negne	r1, r1
 8007be2:	ea92 0f03 	teq	r2, r3
 8007be6:	d03f      	beq.n	8007c68 <__addsf3+0xd8>
 8007be8:	f1a2 0201 	sub.w	r2, r2, #1
 8007bec:	fa41 fc03 	asr.w	ip, r1, r3
 8007bf0:	eb10 000c 	adds.w	r0, r0, ip
 8007bf4:	f1c3 0320 	rsb	r3, r3, #32
 8007bf8:	fa01 f103 	lsl.w	r1, r1, r3
 8007bfc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8007c00:	d502      	bpl.n	8007c08 <__addsf3+0x78>
 8007c02:	4249      	negs	r1, r1
 8007c04:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8007c08:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8007c0c:	d313      	bcc.n	8007c36 <__addsf3+0xa6>
 8007c0e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007c12:	d306      	bcc.n	8007c22 <__addsf3+0x92>
 8007c14:	0840      	lsrs	r0, r0, #1
 8007c16:	ea4f 0131 	mov.w	r1, r1, rrx
 8007c1a:	f102 0201 	add.w	r2, r2, #1
 8007c1e:	2afe      	cmp	r2, #254	; 0xfe
 8007c20:	d251      	bcs.n	8007cc6 <__addsf3+0x136>
 8007c22:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8007c26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8007c2a:	bf08      	it	eq
 8007c2c:	f020 0001 	biceq.w	r0, r0, #1
 8007c30:	ea40 0003 	orr.w	r0, r0, r3
 8007c34:	4770      	bx	lr
 8007c36:	0049      	lsls	r1, r1, #1
 8007c38:	eb40 0000 	adc.w	r0, r0, r0
 8007c3c:	3a01      	subs	r2, #1
 8007c3e:	bf28      	it	cs
 8007c40:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8007c44:	d2ed      	bcs.n	8007c22 <__addsf3+0x92>
 8007c46:	fab0 fc80 	clz	ip, r0
 8007c4a:	f1ac 0c08 	sub.w	ip, ip, #8
 8007c4e:	ebb2 020c 	subs.w	r2, r2, ip
 8007c52:	fa00 f00c 	lsl.w	r0, r0, ip
 8007c56:	bfaa      	itet	ge
 8007c58:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8007c5c:	4252      	neglt	r2, r2
 8007c5e:	4318      	orrge	r0, r3
 8007c60:	bfbc      	itt	lt
 8007c62:	40d0      	lsrlt	r0, r2
 8007c64:	4318      	orrlt	r0, r3
 8007c66:	4770      	bx	lr
 8007c68:	f092 0f00 	teq	r2, #0
 8007c6c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8007c70:	bf06      	itte	eq
 8007c72:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8007c76:	3201      	addeq	r2, #1
 8007c78:	3b01      	subne	r3, #1
 8007c7a:	e7b5      	b.n	8007be8 <__addsf3+0x58>
 8007c7c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8007c80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007c84:	bf18      	it	ne
 8007c86:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007c8a:	d021      	beq.n	8007cd0 <__addsf3+0x140>
 8007c8c:	ea92 0f03 	teq	r2, r3
 8007c90:	d004      	beq.n	8007c9c <__addsf3+0x10c>
 8007c92:	f092 0f00 	teq	r2, #0
 8007c96:	bf08      	it	eq
 8007c98:	4608      	moveq	r0, r1
 8007c9a:	4770      	bx	lr
 8007c9c:	ea90 0f01 	teq	r0, r1
 8007ca0:	bf1c      	itt	ne
 8007ca2:	2000      	movne	r0, #0
 8007ca4:	4770      	bxne	lr
 8007ca6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8007caa:	d104      	bne.n	8007cb6 <__addsf3+0x126>
 8007cac:	0040      	lsls	r0, r0, #1
 8007cae:	bf28      	it	cs
 8007cb0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8007cb4:	4770      	bx	lr
 8007cb6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8007cba:	bf3c      	itt	cc
 8007cbc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8007cc0:	4770      	bxcc	lr
 8007cc2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8007cc6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8007cca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007cce:	4770      	bx	lr
 8007cd0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8007cd4:	bf16      	itet	ne
 8007cd6:	4608      	movne	r0, r1
 8007cd8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8007cdc:	4601      	movne	r1, r0
 8007cde:	0242      	lsls	r2, r0, #9
 8007ce0:	bf06      	itte	eq
 8007ce2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8007ce6:	ea90 0f01 	teqeq	r0, r1
 8007cea:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8007cee:	4770      	bx	lr

08007cf0 <__aeabi_ui2f>:
 8007cf0:	f04f 0300 	mov.w	r3, #0
 8007cf4:	e004      	b.n	8007d00 <__aeabi_i2f+0x8>
 8007cf6:	bf00      	nop

08007cf8 <__aeabi_i2f>:
 8007cf8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8007cfc:	bf48      	it	mi
 8007cfe:	4240      	negmi	r0, r0
 8007d00:	ea5f 0c00 	movs.w	ip, r0
 8007d04:	bf08      	it	eq
 8007d06:	4770      	bxeq	lr
 8007d08:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8007d0c:	4601      	mov	r1, r0
 8007d0e:	f04f 0000 	mov.w	r0, #0
 8007d12:	e01c      	b.n	8007d4e <__aeabi_l2f+0x2a>

08007d14 <__aeabi_ul2f>:
 8007d14:	ea50 0201 	orrs.w	r2, r0, r1
 8007d18:	bf08      	it	eq
 8007d1a:	4770      	bxeq	lr
 8007d1c:	f04f 0300 	mov.w	r3, #0
 8007d20:	e00a      	b.n	8007d38 <__aeabi_l2f+0x14>
 8007d22:	bf00      	nop

08007d24 <__aeabi_l2f>:
 8007d24:	ea50 0201 	orrs.w	r2, r0, r1
 8007d28:	bf08      	it	eq
 8007d2a:	4770      	bxeq	lr
 8007d2c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8007d30:	d502      	bpl.n	8007d38 <__aeabi_l2f+0x14>
 8007d32:	4240      	negs	r0, r0
 8007d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007d38:	ea5f 0c01 	movs.w	ip, r1
 8007d3c:	bf02      	ittt	eq
 8007d3e:	4684      	moveq	ip, r0
 8007d40:	4601      	moveq	r1, r0
 8007d42:	2000      	moveq	r0, #0
 8007d44:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8007d48:	bf08      	it	eq
 8007d4a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8007d4e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8007d52:	fabc f28c 	clz	r2, ip
 8007d56:	3a08      	subs	r2, #8
 8007d58:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8007d5c:	db10      	blt.n	8007d80 <__aeabi_l2f+0x5c>
 8007d5e:	fa01 fc02 	lsl.w	ip, r1, r2
 8007d62:	4463      	add	r3, ip
 8007d64:	fa00 fc02 	lsl.w	ip, r0, r2
 8007d68:	f1c2 0220 	rsb	r2, r2, #32
 8007d6c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007d70:	fa20 f202 	lsr.w	r2, r0, r2
 8007d74:	eb43 0002 	adc.w	r0, r3, r2
 8007d78:	bf08      	it	eq
 8007d7a:	f020 0001 	biceq.w	r0, r0, #1
 8007d7e:	4770      	bx	lr
 8007d80:	f102 0220 	add.w	r2, r2, #32
 8007d84:	fa01 fc02 	lsl.w	ip, r1, r2
 8007d88:	f1c2 0220 	rsb	r2, r2, #32
 8007d8c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8007d90:	fa21 f202 	lsr.w	r2, r1, r2
 8007d94:	eb43 0002 	adc.w	r0, r3, r2
 8007d98:	bf08      	it	eq
 8007d9a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8007d9e:	4770      	bx	lr

08007da0 <__gesf2>:
 8007da0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007da4:	e006      	b.n	8007db4 <__cmpsf2+0x4>
 8007da6:	bf00      	nop

08007da8 <__lesf2>:
 8007da8:	f04f 0c01 	mov.w	ip, #1
 8007dac:	e002      	b.n	8007db4 <__cmpsf2+0x4>
 8007dae:	bf00      	nop

08007db0 <__cmpsf2>:
 8007db0:	f04f 0c01 	mov.w	ip, #1
 8007db4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8007db8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8007dbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8007dc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007dc4:	bf18      	it	ne
 8007dc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007dca:	d011      	beq.n	8007df0 <__cmpsf2+0x40>
 8007dcc:	b001      	add	sp, #4
 8007dce:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8007dd2:	bf18      	it	ne
 8007dd4:	ea90 0f01 	teqne	r0, r1
 8007dd8:	bf58      	it	pl
 8007dda:	ebb2 0003 	subspl.w	r0, r2, r3
 8007dde:	bf88      	it	hi
 8007de0:	17c8      	asrhi	r0, r1, #31
 8007de2:	bf38      	it	cc
 8007de4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8007de8:	bf18      	it	ne
 8007dea:	f040 0001 	orrne.w	r0, r0, #1
 8007dee:	4770      	bx	lr
 8007df0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007df4:	d102      	bne.n	8007dfc <__cmpsf2+0x4c>
 8007df6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8007dfa:	d105      	bne.n	8007e08 <__cmpsf2+0x58>
 8007dfc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8007e00:	d1e4      	bne.n	8007dcc <__cmpsf2+0x1c>
 8007e02:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8007e06:	d0e1      	beq.n	8007dcc <__cmpsf2+0x1c>
 8007e08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop

08007e10 <__aeabi_cfrcmple>:
 8007e10:	4684      	mov	ip, r0
 8007e12:	4608      	mov	r0, r1
 8007e14:	4661      	mov	r1, ip
 8007e16:	e7ff      	b.n	8007e18 <__aeabi_cfcmpeq>

08007e18 <__aeabi_cfcmpeq>:
 8007e18:	b50f      	push	{r0, r1, r2, r3, lr}
 8007e1a:	f7ff ffc9 	bl	8007db0 <__cmpsf2>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	bf48      	it	mi
 8007e22:	f110 0f00 	cmnmi.w	r0, #0
 8007e26:	bd0f      	pop	{r0, r1, r2, r3, pc}

08007e28 <__aeabi_fcmpeq>:
 8007e28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007e2c:	f7ff fff4 	bl	8007e18 <__aeabi_cfcmpeq>
 8007e30:	bf0c      	ite	eq
 8007e32:	2001      	moveq	r0, #1
 8007e34:	2000      	movne	r0, #0
 8007e36:	f85d fb08 	ldr.w	pc, [sp], #8
 8007e3a:	bf00      	nop

08007e3c <__aeabi_fcmplt>:
 8007e3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007e40:	f7ff ffea 	bl	8007e18 <__aeabi_cfcmpeq>
 8007e44:	bf34      	ite	cc
 8007e46:	2001      	movcc	r0, #1
 8007e48:	2000      	movcs	r0, #0
 8007e4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8007e4e:	bf00      	nop

08007e50 <__aeabi_fcmple>:
 8007e50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007e54:	f7ff ffe0 	bl	8007e18 <__aeabi_cfcmpeq>
 8007e58:	bf94      	ite	ls
 8007e5a:	2001      	movls	r0, #1
 8007e5c:	2000      	movhi	r0, #0
 8007e5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8007e62:	bf00      	nop

08007e64 <__aeabi_fcmpge>:
 8007e64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007e68:	f7ff ffd2 	bl	8007e10 <__aeabi_cfrcmple>
 8007e6c:	bf94      	ite	ls
 8007e6e:	2001      	movls	r0, #1
 8007e70:	2000      	movhi	r0, #0
 8007e72:	f85d fb08 	ldr.w	pc, [sp], #8
 8007e76:	bf00      	nop

08007e78 <__aeabi_fcmpgt>:
 8007e78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007e7c:	f7ff ffc8 	bl	8007e10 <__aeabi_cfrcmple>
 8007e80:	bf34      	ite	cc
 8007e82:	2001      	movcc	r0, #1
 8007e84:	2000      	movcs	r0, #0
 8007e86:	f85d fb08 	ldr.w	pc, [sp], #8
 8007e8a:	bf00      	nop

08007e8c <__aeabi_f2iz>:
 8007e8c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8007e90:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8007e94:	d30f      	bcc.n	8007eb6 <__aeabi_f2iz+0x2a>
 8007e96:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8007e9a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8007e9e:	d90d      	bls.n	8007ebc <__aeabi_f2iz+0x30>
 8007ea0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8007ea4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ea8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8007eac:	fa23 f002 	lsr.w	r0, r3, r2
 8007eb0:	bf18      	it	ne
 8007eb2:	4240      	negne	r0, r0
 8007eb4:	4770      	bx	lr
 8007eb6:	f04f 0000 	mov.w	r0, #0
 8007eba:	4770      	bx	lr
 8007ebc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8007ec0:	d101      	bne.n	8007ec6 <__aeabi_f2iz+0x3a>
 8007ec2:	0242      	lsls	r2, r0, #9
 8007ec4:	d105      	bne.n	8007ed2 <__aeabi_f2iz+0x46>
 8007ec6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8007eca:	bf08      	it	eq
 8007ecc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8007ed0:	4770      	bx	lr
 8007ed2:	f04f 0000 	mov.w	r0, #0
 8007ed6:	4770      	bx	lr

08007ed8 <__aeabi_uldivmod>:
 8007ed8:	b953      	cbnz	r3, 8007ef0 <__aeabi_uldivmod+0x18>
 8007eda:	b94a      	cbnz	r2, 8007ef0 <__aeabi_uldivmod+0x18>
 8007edc:	2900      	cmp	r1, #0
 8007ede:	bf08      	it	eq
 8007ee0:	2800      	cmpeq	r0, #0
 8007ee2:	bf1c      	itt	ne
 8007ee4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8007ee8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8007eec:	f000 b80c 	b.w	8007f08 <__aeabi_idiv0>
 8007ef0:	f1ad 0c08 	sub.w	ip, sp, #8
 8007ef4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8007ef8:	f001 fa9c 	bl	8009434 <__udivmoddi4>
 8007efc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007f00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f04:	b004      	add	sp, #16
 8007f06:	4770      	bx	lr

08007f08 <__aeabi_idiv0>:
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop

08007f0c <__aeabi_drsub>:
 8007f0c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8007f10:	e002      	b.n	8007f18 <__adddf3>
 8007f12:	bf00      	nop

08007f14 <__aeabi_dsub>:
 8007f14:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08007f18 <__adddf3>:
 8007f18:	b530      	push	{r4, r5, lr}
 8007f1a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8007f1e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8007f22:	ea94 0f05 	teq	r4, r5
 8007f26:	bf08      	it	eq
 8007f28:	ea90 0f02 	teqeq	r0, r2
 8007f2c:	bf1f      	itttt	ne
 8007f2e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8007f32:	ea55 0c02 	orrsne.w	ip, r5, r2
 8007f36:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8007f3a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007f3e:	f000 80e2 	beq.w	8008106 <__adddf3+0x1ee>
 8007f42:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8007f46:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8007f4a:	bfb8      	it	lt
 8007f4c:	426d      	neglt	r5, r5
 8007f4e:	dd0c      	ble.n	8007f6a <__adddf3+0x52>
 8007f50:	442c      	add	r4, r5
 8007f52:	ea80 0202 	eor.w	r2, r0, r2
 8007f56:	ea81 0303 	eor.w	r3, r1, r3
 8007f5a:	ea82 0000 	eor.w	r0, r2, r0
 8007f5e:	ea83 0101 	eor.w	r1, r3, r1
 8007f62:	ea80 0202 	eor.w	r2, r0, r2
 8007f66:	ea81 0303 	eor.w	r3, r1, r3
 8007f6a:	2d36      	cmp	r5, #54	; 0x36
 8007f6c:	bf88      	it	hi
 8007f6e:	bd30      	pophi	{r4, r5, pc}
 8007f70:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007f74:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007f78:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8007f7c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8007f80:	d002      	beq.n	8007f88 <__adddf3+0x70>
 8007f82:	4240      	negs	r0, r0
 8007f84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007f88:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8007f8c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007f90:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8007f94:	d002      	beq.n	8007f9c <__adddf3+0x84>
 8007f96:	4252      	negs	r2, r2
 8007f98:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8007f9c:	ea94 0f05 	teq	r4, r5
 8007fa0:	f000 80a7 	beq.w	80080f2 <__adddf3+0x1da>
 8007fa4:	f1a4 0401 	sub.w	r4, r4, #1
 8007fa8:	f1d5 0e20 	rsbs	lr, r5, #32
 8007fac:	db0d      	blt.n	8007fca <__adddf3+0xb2>
 8007fae:	fa02 fc0e 	lsl.w	ip, r2, lr
 8007fb2:	fa22 f205 	lsr.w	r2, r2, r5
 8007fb6:	1880      	adds	r0, r0, r2
 8007fb8:	f141 0100 	adc.w	r1, r1, #0
 8007fbc:	fa03 f20e 	lsl.w	r2, r3, lr
 8007fc0:	1880      	adds	r0, r0, r2
 8007fc2:	fa43 f305 	asr.w	r3, r3, r5
 8007fc6:	4159      	adcs	r1, r3
 8007fc8:	e00e      	b.n	8007fe8 <__adddf3+0xd0>
 8007fca:	f1a5 0520 	sub.w	r5, r5, #32
 8007fce:	f10e 0e20 	add.w	lr, lr, #32
 8007fd2:	2a01      	cmp	r2, #1
 8007fd4:	fa03 fc0e 	lsl.w	ip, r3, lr
 8007fd8:	bf28      	it	cs
 8007fda:	f04c 0c02 	orrcs.w	ip, ip, #2
 8007fde:	fa43 f305 	asr.w	r3, r3, r5
 8007fe2:	18c0      	adds	r0, r0, r3
 8007fe4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8007fe8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007fec:	d507      	bpl.n	8007ffe <__adddf3+0xe6>
 8007fee:	f04f 0e00 	mov.w	lr, #0
 8007ff2:	f1dc 0c00 	rsbs	ip, ip, #0
 8007ff6:	eb7e 0000 	sbcs.w	r0, lr, r0
 8007ffa:	eb6e 0101 	sbc.w	r1, lr, r1
 8007ffe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008002:	d31b      	bcc.n	800803c <__adddf3+0x124>
 8008004:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8008008:	d30c      	bcc.n	8008024 <__adddf3+0x10c>
 800800a:	0849      	lsrs	r1, r1, #1
 800800c:	ea5f 0030 	movs.w	r0, r0, rrx
 8008010:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008014:	f104 0401 	add.w	r4, r4, #1
 8008018:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800801c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008020:	f080 809a 	bcs.w	8008158 <__adddf3+0x240>
 8008024:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8008028:	bf08      	it	eq
 800802a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800802e:	f150 0000 	adcs.w	r0, r0, #0
 8008032:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008036:	ea41 0105 	orr.w	r1, r1, r5
 800803a:	bd30      	pop	{r4, r5, pc}
 800803c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008040:	4140      	adcs	r0, r0
 8008042:	eb41 0101 	adc.w	r1, r1, r1
 8008046:	3c01      	subs	r4, #1
 8008048:	bf28      	it	cs
 800804a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800804e:	d2e9      	bcs.n	8008024 <__adddf3+0x10c>
 8008050:	f091 0f00 	teq	r1, #0
 8008054:	bf04      	itt	eq
 8008056:	4601      	moveq	r1, r0
 8008058:	2000      	moveq	r0, #0
 800805a:	fab1 f381 	clz	r3, r1
 800805e:	bf08      	it	eq
 8008060:	3320      	addeq	r3, #32
 8008062:	f1a3 030b 	sub.w	r3, r3, #11
 8008066:	f1b3 0220 	subs.w	r2, r3, #32
 800806a:	da0c      	bge.n	8008086 <__adddf3+0x16e>
 800806c:	320c      	adds	r2, #12
 800806e:	dd08      	ble.n	8008082 <__adddf3+0x16a>
 8008070:	f102 0c14 	add.w	ip, r2, #20
 8008074:	f1c2 020c 	rsb	r2, r2, #12
 8008078:	fa01 f00c 	lsl.w	r0, r1, ip
 800807c:	fa21 f102 	lsr.w	r1, r1, r2
 8008080:	e00c      	b.n	800809c <__adddf3+0x184>
 8008082:	f102 0214 	add.w	r2, r2, #20
 8008086:	bfd8      	it	le
 8008088:	f1c2 0c20 	rsble	ip, r2, #32
 800808c:	fa01 f102 	lsl.w	r1, r1, r2
 8008090:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008094:	bfdc      	itt	le
 8008096:	ea41 010c 	orrle.w	r1, r1, ip
 800809a:	4090      	lslle	r0, r2
 800809c:	1ae4      	subs	r4, r4, r3
 800809e:	bfa2      	ittt	ge
 80080a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80080a4:	4329      	orrge	r1, r5
 80080a6:	bd30      	popge	{r4, r5, pc}
 80080a8:	ea6f 0404 	mvn.w	r4, r4
 80080ac:	3c1f      	subs	r4, #31
 80080ae:	da1c      	bge.n	80080ea <__adddf3+0x1d2>
 80080b0:	340c      	adds	r4, #12
 80080b2:	dc0e      	bgt.n	80080d2 <__adddf3+0x1ba>
 80080b4:	f104 0414 	add.w	r4, r4, #20
 80080b8:	f1c4 0220 	rsb	r2, r4, #32
 80080bc:	fa20 f004 	lsr.w	r0, r0, r4
 80080c0:	fa01 f302 	lsl.w	r3, r1, r2
 80080c4:	ea40 0003 	orr.w	r0, r0, r3
 80080c8:	fa21 f304 	lsr.w	r3, r1, r4
 80080cc:	ea45 0103 	orr.w	r1, r5, r3
 80080d0:	bd30      	pop	{r4, r5, pc}
 80080d2:	f1c4 040c 	rsb	r4, r4, #12
 80080d6:	f1c4 0220 	rsb	r2, r4, #32
 80080da:	fa20 f002 	lsr.w	r0, r0, r2
 80080de:	fa01 f304 	lsl.w	r3, r1, r4
 80080e2:	ea40 0003 	orr.w	r0, r0, r3
 80080e6:	4629      	mov	r1, r5
 80080e8:	bd30      	pop	{r4, r5, pc}
 80080ea:	fa21 f004 	lsr.w	r0, r1, r4
 80080ee:	4629      	mov	r1, r5
 80080f0:	bd30      	pop	{r4, r5, pc}
 80080f2:	f094 0f00 	teq	r4, #0
 80080f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80080fa:	bf06      	itte	eq
 80080fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008100:	3401      	addeq	r4, #1
 8008102:	3d01      	subne	r5, #1
 8008104:	e74e      	b.n	8007fa4 <__adddf3+0x8c>
 8008106:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800810a:	bf18      	it	ne
 800810c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008110:	d029      	beq.n	8008166 <__adddf3+0x24e>
 8008112:	ea94 0f05 	teq	r4, r5
 8008116:	bf08      	it	eq
 8008118:	ea90 0f02 	teqeq	r0, r2
 800811c:	d005      	beq.n	800812a <__adddf3+0x212>
 800811e:	ea54 0c00 	orrs.w	ip, r4, r0
 8008122:	bf04      	itt	eq
 8008124:	4619      	moveq	r1, r3
 8008126:	4610      	moveq	r0, r2
 8008128:	bd30      	pop	{r4, r5, pc}
 800812a:	ea91 0f03 	teq	r1, r3
 800812e:	bf1e      	ittt	ne
 8008130:	2100      	movne	r1, #0
 8008132:	2000      	movne	r0, #0
 8008134:	bd30      	popne	{r4, r5, pc}
 8008136:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800813a:	d105      	bne.n	8008148 <__adddf3+0x230>
 800813c:	0040      	lsls	r0, r0, #1
 800813e:	4149      	adcs	r1, r1
 8008140:	bf28      	it	cs
 8008142:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8008146:	bd30      	pop	{r4, r5, pc}
 8008148:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800814c:	bf3c      	itt	cc
 800814e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008152:	bd30      	popcc	{r4, r5, pc}
 8008154:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008158:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800815c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008160:	f04f 0000 	mov.w	r0, #0
 8008164:	bd30      	pop	{r4, r5, pc}
 8008166:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800816a:	bf1a      	itte	ne
 800816c:	4619      	movne	r1, r3
 800816e:	4610      	movne	r0, r2
 8008170:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008174:	bf1c      	itt	ne
 8008176:	460b      	movne	r3, r1
 8008178:	4602      	movne	r2, r0
 800817a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800817e:	bf06      	itte	eq
 8008180:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008184:	ea91 0f03 	teqeq	r1, r3
 8008188:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800818c:	bd30      	pop	{r4, r5, pc}
 800818e:	bf00      	nop

08008190 <__aeabi_ui2d>:
 8008190:	f090 0f00 	teq	r0, #0
 8008194:	bf04      	itt	eq
 8008196:	2100      	moveq	r1, #0
 8008198:	4770      	bxeq	lr
 800819a:	b530      	push	{r4, r5, lr}
 800819c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80081a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80081a4:	f04f 0500 	mov.w	r5, #0
 80081a8:	f04f 0100 	mov.w	r1, #0
 80081ac:	e750      	b.n	8008050 <__adddf3+0x138>
 80081ae:	bf00      	nop

080081b0 <__aeabi_i2d>:
 80081b0:	f090 0f00 	teq	r0, #0
 80081b4:	bf04      	itt	eq
 80081b6:	2100      	moveq	r1, #0
 80081b8:	4770      	bxeq	lr
 80081ba:	b530      	push	{r4, r5, lr}
 80081bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80081c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80081c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80081c8:	bf48      	it	mi
 80081ca:	4240      	negmi	r0, r0
 80081cc:	f04f 0100 	mov.w	r1, #0
 80081d0:	e73e      	b.n	8008050 <__adddf3+0x138>
 80081d2:	bf00      	nop

080081d4 <__aeabi_f2d>:
 80081d4:	0042      	lsls	r2, r0, #1
 80081d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80081da:	ea4f 0131 	mov.w	r1, r1, rrx
 80081de:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80081e2:	bf1f      	itttt	ne
 80081e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80081e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80081ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80081f0:	4770      	bxne	lr
 80081f2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80081f6:	bf08      	it	eq
 80081f8:	4770      	bxeq	lr
 80081fa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80081fe:	bf04      	itt	eq
 8008200:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8008204:	4770      	bxeq	lr
 8008206:	b530      	push	{r4, r5, lr}
 8008208:	f44f 7460 	mov.w	r4, #896	; 0x380
 800820c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008210:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008214:	e71c      	b.n	8008050 <__adddf3+0x138>
 8008216:	bf00      	nop

08008218 <__aeabi_ul2d>:
 8008218:	ea50 0201 	orrs.w	r2, r0, r1
 800821c:	bf08      	it	eq
 800821e:	4770      	bxeq	lr
 8008220:	b530      	push	{r4, r5, lr}
 8008222:	f04f 0500 	mov.w	r5, #0
 8008226:	e00a      	b.n	800823e <__aeabi_l2d+0x16>

08008228 <__aeabi_l2d>:
 8008228:	ea50 0201 	orrs.w	r2, r0, r1
 800822c:	bf08      	it	eq
 800822e:	4770      	bxeq	lr
 8008230:	b530      	push	{r4, r5, lr}
 8008232:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8008236:	d502      	bpl.n	800823e <__aeabi_l2d+0x16>
 8008238:	4240      	negs	r0, r0
 800823a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800823e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008242:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008246:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800824a:	f43f aed8 	beq.w	8007ffe <__adddf3+0xe6>
 800824e:	f04f 0203 	mov.w	r2, #3
 8008252:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008256:	bf18      	it	ne
 8008258:	3203      	addne	r2, #3
 800825a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800825e:	bf18      	it	ne
 8008260:	3203      	addne	r2, #3
 8008262:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8008266:	f1c2 0320 	rsb	r3, r2, #32
 800826a:	fa00 fc03 	lsl.w	ip, r0, r3
 800826e:	fa20 f002 	lsr.w	r0, r0, r2
 8008272:	fa01 fe03 	lsl.w	lr, r1, r3
 8008276:	ea40 000e 	orr.w	r0, r0, lr
 800827a:	fa21 f102 	lsr.w	r1, r1, r2
 800827e:	4414      	add	r4, r2
 8008280:	e6bd      	b.n	8007ffe <__adddf3+0xe6>
 8008282:	bf00      	nop

08008284 <__aeabi_fmul>:
 8008284:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008288:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800828c:	bf1e      	ittt	ne
 800828e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8008292:	ea92 0f0c 	teqne	r2, ip
 8008296:	ea93 0f0c 	teqne	r3, ip
 800829a:	d06f      	beq.n	800837c <__aeabi_fmul+0xf8>
 800829c:	441a      	add	r2, r3
 800829e:	ea80 0c01 	eor.w	ip, r0, r1
 80082a2:	0240      	lsls	r0, r0, #9
 80082a4:	bf18      	it	ne
 80082a6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80082aa:	d01e      	beq.n	80082ea <__aeabi_fmul+0x66>
 80082ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80082b0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80082b4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80082b8:	fba0 3101 	umull	r3, r1, r0, r1
 80082bc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80082c0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80082c4:	bf3e      	ittt	cc
 80082c6:	0049      	lslcc	r1, r1, #1
 80082c8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80082cc:	005b      	lslcc	r3, r3, #1
 80082ce:	ea40 0001 	orr.w	r0, r0, r1
 80082d2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80082d6:	2afd      	cmp	r2, #253	; 0xfd
 80082d8:	d81d      	bhi.n	8008316 <__aeabi_fmul+0x92>
 80082da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80082e2:	bf08      	it	eq
 80082e4:	f020 0001 	biceq.w	r0, r0, #1
 80082e8:	4770      	bx	lr
 80082ea:	f090 0f00 	teq	r0, #0
 80082ee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80082f2:	bf08      	it	eq
 80082f4:	0249      	lsleq	r1, r1, #9
 80082f6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80082fa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80082fe:	3a7f      	subs	r2, #127	; 0x7f
 8008300:	bfc2      	ittt	gt
 8008302:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8008306:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800830a:	4770      	bxgt	lr
 800830c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008310:	f04f 0300 	mov.w	r3, #0
 8008314:	3a01      	subs	r2, #1
 8008316:	dc5d      	bgt.n	80083d4 <__aeabi_fmul+0x150>
 8008318:	f112 0f19 	cmn.w	r2, #25
 800831c:	bfdc      	itt	le
 800831e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8008322:	4770      	bxle	lr
 8008324:	f1c2 0200 	rsb	r2, r2, #0
 8008328:	0041      	lsls	r1, r0, #1
 800832a:	fa21 f102 	lsr.w	r1, r1, r2
 800832e:	f1c2 0220 	rsb	r2, r2, #32
 8008332:	fa00 fc02 	lsl.w	ip, r0, r2
 8008336:	ea5f 0031 	movs.w	r0, r1, rrx
 800833a:	f140 0000 	adc.w	r0, r0, #0
 800833e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8008342:	bf08      	it	eq
 8008344:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8008348:	4770      	bx	lr
 800834a:	f092 0f00 	teq	r2, #0
 800834e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8008352:	bf02      	ittt	eq
 8008354:	0040      	lsleq	r0, r0, #1
 8008356:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800835a:	3a01      	subeq	r2, #1
 800835c:	d0f9      	beq.n	8008352 <__aeabi_fmul+0xce>
 800835e:	ea40 000c 	orr.w	r0, r0, ip
 8008362:	f093 0f00 	teq	r3, #0
 8008366:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800836a:	bf02      	ittt	eq
 800836c:	0049      	lsleq	r1, r1, #1
 800836e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8008372:	3b01      	subeq	r3, #1
 8008374:	d0f9      	beq.n	800836a <__aeabi_fmul+0xe6>
 8008376:	ea41 010c 	orr.w	r1, r1, ip
 800837a:	e78f      	b.n	800829c <__aeabi_fmul+0x18>
 800837c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8008380:	ea92 0f0c 	teq	r2, ip
 8008384:	bf18      	it	ne
 8008386:	ea93 0f0c 	teqne	r3, ip
 800838a:	d00a      	beq.n	80083a2 <__aeabi_fmul+0x11e>
 800838c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8008390:	bf18      	it	ne
 8008392:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8008396:	d1d8      	bne.n	800834a <__aeabi_fmul+0xc6>
 8008398:	ea80 0001 	eor.w	r0, r0, r1
 800839c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80083a0:	4770      	bx	lr
 80083a2:	f090 0f00 	teq	r0, #0
 80083a6:	bf17      	itett	ne
 80083a8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80083ac:	4608      	moveq	r0, r1
 80083ae:	f091 0f00 	teqne	r1, #0
 80083b2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80083b6:	d014      	beq.n	80083e2 <__aeabi_fmul+0x15e>
 80083b8:	ea92 0f0c 	teq	r2, ip
 80083bc:	d101      	bne.n	80083c2 <__aeabi_fmul+0x13e>
 80083be:	0242      	lsls	r2, r0, #9
 80083c0:	d10f      	bne.n	80083e2 <__aeabi_fmul+0x15e>
 80083c2:	ea93 0f0c 	teq	r3, ip
 80083c6:	d103      	bne.n	80083d0 <__aeabi_fmul+0x14c>
 80083c8:	024b      	lsls	r3, r1, #9
 80083ca:	bf18      	it	ne
 80083cc:	4608      	movne	r0, r1
 80083ce:	d108      	bne.n	80083e2 <__aeabi_fmul+0x15e>
 80083d0:	ea80 0001 	eor.w	r0, r0, r1
 80083d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80083d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80083dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80083e0:	4770      	bx	lr
 80083e2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80083e6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80083ea:	4770      	bx	lr

080083ec <__aeabi_fdiv>:
 80083ec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80083f0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80083f4:	bf1e      	ittt	ne
 80083f6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80083fa:	ea92 0f0c 	teqne	r2, ip
 80083fe:	ea93 0f0c 	teqne	r3, ip
 8008402:	d069      	beq.n	80084d8 <__aeabi_fdiv+0xec>
 8008404:	eba2 0203 	sub.w	r2, r2, r3
 8008408:	ea80 0c01 	eor.w	ip, r0, r1
 800840c:	0249      	lsls	r1, r1, #9
 800840e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8008412:	d037      	beq.n	8008484 <__aeabi_fdiv+0x98>
 8008414:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008418:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800841c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8008420:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8008424:	428b      	cmp	r3, r1
 8008426:	bf38      	it	cc
 8008428:	005b      	lslcc	r3, r3, #1
 800842a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800842e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8008432:	428b      	cmp	r3, r1
 8008434:	bf24      	itt	cs
 8008436:	1a5b      	subcs	r3, r3, r1
 8008438:	ea40 000c 	orrcs.w	r0, r0, ip
 800843c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8008440:	bf24      	itt	cs
 8008442:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8008446:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800844a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800844e:	bf24      	itt	cs
 8008450:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8008454:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008458:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800845c:	bf24      	itt	cs
 800845e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8008462:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008466:	011b      	lsls	r3, r3, #4
 8008468:	bf18      	it	ne
 800846a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800846e:	d1e0      	bne.n	8008432 <__aeabi_fdiv+0x46>
 8008470:	2afd      	cmp	r2, #253	; 0xfd
 8008472:	f63f af50 	bhi.w	8008316 <__aeabi_fmul+0x92>
 8008476:	428b      	cmp	r3, r1
 8008478:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800847c:	bf08      	it	eq
 800847e:	f020 0001 	biceq.w	r0, r0, #1
 8008482:	4770      	bx	lr
 8008484:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8008488:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800848c:	327f      	adds	r2, #127	; 0x7f
 800848e:	bfc2      	ittt	gt
 8008490:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8008494:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8008498:	4770      	bxgt	lr
 800849a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800849e:	f04f 0300 	mov.w	r3, #0
 80084a2:	3a01      	subs	r2, #1
 80084a4:	e737      	b.n	8008316 <__aeabi_fmul+0x92>
 80084a6:	f092 0f00 	teq	r2, #0
 80084aa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80084ae:	bf02      	ittt	eq
 80084b0:	0040      	lsleq	r0, r0, #1
 80084b2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80084b6:	3a01      	subeq	r2, #1
 80084b8:	d0f9      	beq.n	80084ae <__aeabi_fdiv+0xc2>
 80084ba:	ea40 000c 	orr.w	r0, r0, ip
 80084be:	f093 0f00 	teq	r3, #0
 80084c2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80084c6:	bf02      	ittt	eq
 80084c8:	0049      	lsleq	r1, r1, #1
 80084ca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80084ce:	3b01      	subeq	r3, #1
 80084d0:	d0f9      	beq.n	80084c6 <__aeabi_fdiv+0xda>
 80084d2:	ea41 010c 	orr.w	r1, r1, ip
 80084d6:	e795      	b.n	8008404 <__aeabi_fdiv+0x18>
 80084d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80084dc:	ea92 0f0c 	teq	r2, ip
 80084e0:	d108      	bne.n	80084f4 <__aeabi_fdiv+0x108>
 80084e2:	0242      	lsls	r2, r0, #9
 80084e4:	f47f af7d 	bne.w	80083e2 <__aeabi_fmul+0x15e>
 80084e8:	ea93 0f0c 	teq	r3, ip
 80084ec:	f47f af70 	bne.w	80083d0 <__aeabi_fmul+0x14c>
 80084f0:	4608      	mov	r0, r1
 80084f2:	e776      	b.n	80083e2 <__aeabi_fmul+0x15e>
 80084f4:	ea93 0f0c 	teq	r3, ip
 80084f8:	d104      	bne.n	8008504 <__aeabi_fdiv+0x118>
 80084fa:	024b      	lsls	r3, r1, #9
 80084fc:	f43f af4c 	beq.w	8008398 <__aeabi_fmul+0x114>
 8008500:	4608      	mov	r0, r1
 8008502:	e76e      	b.n	80083e2 <__aeabi_fmul+0x15e>
 8008504:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8008508:	bf18      	it	ne
 800850a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800850e:	d1ca      	bne.n	80084a6 <__aeabi_fdiv+0xba>
 8008510:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8008514:	f47f af5c 	bne.w	80083d0 <__aeabi_fmul+0x14c>
 8008518:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800851c:	f47f af3c 	bne.w	8008398 <__aeabi_fmul+0x114>
 8008520:	e75f      	b.n	80083e2 <__aeabi_fmul+0x15e>
 8008522:	bf00      	nop

08008524 <Reset_Handler>:
 8008524:	480c      	ldr	r0, [pc, #48]	; (8008558 <Zerobss+0x10>)
 8008526:	4685      	mov	sp, r0
 8008528:	2100      	movs	r1, #0
 800852a:	e003      	b.n	8008534 <DataInit>

0800852c <CopyData>:
 800852c:	4b0b      	ldr	r3, [pc, #44]	; (800855c <Zerobss+0x14>)
 800852e:	585b      	ldr	r3, [r3, r1]
 8008530:	5043      	str	r3, [r0, r1]
 8008532:	3104      	adds	r1, #4

08008534 <DataInit>:
 8008534:	480a      	ldr	r0, [pc, #40]	; (8008560 <Zerobss+0x18>)
 8008536:	4b0b      	ldr	r3, [pc, #44]	; (8008564 <Zerobss+0x1c>)
 8008538:	1842      	adds	r2, r0, r1
 800853a:	429a      	cmp	r2, r3
 800853c:	d3f6      	bcc.n	800852c <CopyData>
 800853e:	4a0a      	ldr	r2, [pc, #40]	; (8008568 <Zerobss+0x20>)
 8008540:	e002      	b.n	8008548 <Zerobss>

08008542 <FillZerobss>:
 8008542:	2300      	movs	r3, #0
 8008544:	f842 3b04 	str.w	r3, [r2], #4

08008548 <Zerobss>:
 8008548:	4b08      	ldr	r3, [pc, #32]	; (800856c <Zerobss+0x24>)
 800854a:	429a      	cmp	r2, r3
 800854c:	d3f9      	bcc.n	8008542 <FillZerobss>
 800854e:	f00c fabf 	bl	8014ad0 <SystemInit>
 8008552:	f000 fa05 	bl	8008960 <main>
 8008556:	4770      	bx	lr
 8008558:	20018000 	andcs	r8, r1, r0
 800855c:	08018dcc 	stmdaeq	r1, {r2, r3, r6, r7, r8, sl, fp, pc}
 8008560:	20000000 	andcs	r0, r0, r0
 8008564:	200000e4 	andcs	r0, r0, r4, ror #1
 8008568:	200000e8 	andcs	r0, r0, r8, ror #1
 800856c:	2001465c 	andcs	r4, r1, ip, asr r6

08008570 <ADC0_1_IRQHandler>:
 8008570:	e7fe      	b.n	8008570 <ADC0_1_IRQHandler>

08008572 <DisplayHandler::~DisplayHandler()>:
 8008572:	4770      	bx	lr

08008574 <DisplayUdfHandler::~DisplayUdfHandler()>:
 8008574:	4770      	bx	lr

08008576 <DisplayUdfHandler::ShowLongName(char const*)>:
 8008576:	4770      	bx	lr

08008578 <ArtNetTriggerHandler::~ArtNetTriggerHandler()>:
 8008578:	4770      	bx	lr

0800857a <PixelDmxStartStop::~PixelDmxStartStop()>:
 800857a:	4770      	bx	lr

0800857c <PixelDmxStartStop::Start()>:
 800857c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008580:	4b01      	ldr	r3, [pc, #4]	; (8008588 <PixelDmxStartStop::Start()+0xc>)
 8008582:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 8008586:	4770      	bx	lr
 8008588:	40010000 	andmi	r0, r1, r0

0800858c <PixelDmxStartStop::Stop()>:
 800858c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008590:	4b01      	ldr	r3, [pc, #4]	; (8008598 <PixelDmxStartStop::Stop()+0xc>)
 8008592:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8008596:	4770      	bx	lr
 8008598:	40010000 	andmi	r0, r1, r0

0800859c <Reboot::~Reboot()>:
 800859c:	4770      	bx	lr
	...

080085a0 <Reboot::Run()>:
 80085a0:	b508      	push	{r3, lr}
 80085a2:	4b05      	ldr	r3, [pc, #20]	; (80085b8 <Reboot::Run()+0x18>)
 80085a4:	6818      	ldr	r0, [r3, #0]
 80085a6:	f001 fa3b 	bl	8009a20 <ArtNetNode::Stop()>
 80085aa:	4b04      	ldr	r3, [pc, #16]	; (80085bc <Reboot::Run()+0x1c>)
 80085ac:	6818      	ldr	r0, [r3, #0]
 80085ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80085b2:	f006 bb67 	b.w	800ec84 <WS28xx::Blackout()>
 80085b6:	bf00      	nop
 80085b8:	20001900 	andcs	r1, r0, r0, lsl #18
 80085bc:	20001958 	andcs	r1, r0, r8, asr r9

080085c0 <Reboot::~Reboot()>:
 80085c0:	b510      	push	{r4, lr}
 80085c2:	4604      	mov	r4, r0
 80085c4:	f00c f830 	bl	8014628 <operator delete(void*)>
 80085c8:	4620      	mov	r0, r4
 80085ca:	bd10      	pop	{r4, pc}

080085cc <DisplayHandler::~DisplayHandler()>:
 80085cc:	b510      	push	{r4, lr}
 80085ce:	4604      	mov	r4, r0
 80085d0:	f00c f82a 	bl	8014628 <operator delete(void*)>
 80085d4:	4620      	mov	r0, r4
 80085d6:	bd10      	pop	{r4, pc}

080085d8 <DisplayUdfHandler::~DisplayUdfHandler()>:
 80085d8:	b510      	push	{r4, lr}
 80085da:	4604      	mov	r4, r0
 80085dc:	f00c f824 	bl	8014628 <operator delete(void*)>
 80085e0:	4620      	mov	r0, r4
 80085e2:	bd10      	pop	{r4, pc}

080085e4 <ArtNetTriggerHandler::~ArtNetTriggerHandler()>:
 80085e4:	b510      	push	{r4, lr}
 80085e6:	4604      	mov	r4, r0
 80085e8:	f00c f81e 	bl	8014628 <operator delete(void*)>
 80085ec:	4620      	mov	r0, r4
 80085ee:	bd10      	pop	{r4, pc}

080085f0 <PixelDmxStartStop::~PixelDmxStartStop()>:
 80085f0:	b510      	push	{r4, lr}
 80085f2:	4604      	mov	r4, r0
 80085f4:	f00c f818 	bl	8014628 <operator delete(void*)>
 80085f8:	4620      	mov	r0, r4
 80085fa:	bd10      	pop	{r4, pc}

080085fc <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)>:
 80085fc:	4b02      	ldr	r3, [pc, #8]	; (8008608 <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)+0xc>)
 80085fe:	6819      	ldr	r1, [r3, #0]
 8008600:	4b02      	ldr	r3, [pc, #8]	; (800860c <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)+0x10>)
 8008602:	6818      	ldr	r0, [r3, #0]
 8008604:	f00a bfa8 	b.w	8013558 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8008608:	20001900 	andcs	r1, r0, r0, lsl #18
 800860c:	2000a8d0 	ldrdcs	sl, [r0], -r0

08008610 <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)>:
 8008610:	4b02      	ldr	r3, [pc, #8]	; (800861c <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)+0xc>)
 8008612:	6819      	ldr	r1, [r3, #0]
 8008614:	4b02      	ldr	r3, [pc, #8]	; (8008620 <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)+0x10>)
 8008616:	6818      	ldr	r0, [r3, #0]
 8008618:	f00a bf9e 	b.w	8013558 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 800861c:	20001900 	andcs	r1, r0, r0, lsl #18
 8008620:	2000a8d0 	ldrdcs	sl, [r0], -r0

08008624 <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)>:
 8008624:	4b02      	ldr	r3, [pc, #8]	; (8008630 <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)+0xc>)
 8008626:	6819      	ldr	r1, [r3, #0]
 8008628:	4b02      	ldr	r3, [pc, #8]	; (8008634 <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)+0x10>)
 800862a:	6818      	ldr	r0, [r3, #0]
 800862c:	f00a bf94 	b.w	8013558 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8008630:	20001900 	andcs	r1, r0, r0, lsl #18
 8008634:	2000a8d0 	ldrdcs	sl, [r0], -r0

08008638 <DisplayUdfHandler::ShowNetSwitch(unsigned char)>:
 8008638:	4b02      	ldr	r3, [pc, #8]	; (8008644 <DisplayUdfHandler::ShowNetSwitch(unsigned char)+0xc>)
 800863a:	6819      	ldr	r1, [r3, #0]
 800863c:	4b02      	ldr	r3, [pc, #8]	; (8008648 <DisplayUdfHandler::ShowNetSwitch(unsigned char)+0x10>)
 800863e:	6818      	ldr	r0, [r3, #0]
 8008640:	f00a bf8a 	b.w	8013558 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8008644:	20001900 	andcs	r1, r0, r0, lsl #18
 8008648:	2000a8d0 	ldrdcs	sl, [r0], -r0

0800864c <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)>:
 800864c:	4b02      	ldr	r3, [pc, #8]	; (8008658 <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)+0xc>)
 800864e:	6819      	ldr	r1, [r3, #0]
 8008650:	4b02      	ldr	r3, [pc, #8]	; (800865c <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)+0x10>)
 8008652:	6818      	ldr	r0, [r3, #0]
 8008654:	f00a bf80 	b.w	8013558 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8008658:	20001900 	andcs	r1, r0, r0, lsl #18
 800865c:	2000a8d0 	ldrdcs	sl, [r0], -r0

08008660 <DisplayUdfHandler::ShowShortName(char const*)>:
 8008660:	4b02      	ldr	r3, [pc, #8]	; (800866c <DisplayUdfHandler::ShowShortName(char const*)+0xc>)
 8008662:	6819      	ldr	r1, [r3, #0]
 8008664:	4b02      	ldr	r3, [pc, #8]	; (8008670 <DisplayUdfHandler::ShowShortName(char const*)+0x10>)
 8008666:	6818      	ldr	r0, [r3, #0]
 8008668:	f00a bf53 	b.w	8013512 <DisplayUdf::ShowNodeName(ArtNetNode*)>
 800866c:	20001900 	andcs	r1, r0, r0, lsl #18
 8008670:	2000a8d0 	ldrdcs	sl, [r0], -r0

08008674 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>:
 8008674:	b110      	cbz	r0, 800867c <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]+0x8>
 8008676:	6803      	ldr	r3, [r0, #0]
 8008678:	6a1b      	ldr	r3, [r3, #32]
 800867a:	4718      	bx	r3
 800867c:	4770      	bx	lr

0800867e <Display::PutChar(int) [clone .isra.0]>:
 800867e:	b110      	cbz	r0, 8008686 <Display::PutChar(int) [clone .isra.0]+0x8>
 8008680:	6803      	ldr	r3, [r0, #0]
 8008682:	695b      	ldr	r3, [r3, #20]
 8008684:	4718      	bx	r3
 8008686:	4770      	bx	lr

08008688 <DisplayHandler::Print(unsigned int)>:
 8008688:	b538      	push	{r3, r4, r5, lr}
 800868a:	7903      	ldrb	r3, [r0, #4]
 800868c:	b1f3      	cbz	r3, 80086cc <DisplayHandler::Print(unsigned int)+0x44>
 800868e:	2904      	cmp	r1, #4
 8008690:	bf98      	it	ls
 8008692:	4b0f      	ldrls	r3, [pc, #60]	; (80086d0 <DisplayHandler::Print(unsigned int)+0x48>)
 8008694:	4d0f      	ldr	r5, [pc, #60]	; (80086d4 <DisplayHandler::Print(unsigned int)+0x4c>)
 8008696:	bf98      	it	ls
 8008698:	5c5c      	ldrbls	r4, [r3, r1]
 800869a:	682b      	ldr	r3, [r5, #0]
 800869c:	bf88      	it	hi
 800869e:	2455      	movhi	r4, #85	; 0x55
 80086a0:	6998      	ldr	r0, [r3, #24]
 80086a2:	b178      	cbz	r0, 80086c4 <DisplayHandler::Print(unsigned int)+0x3c>
 80086a4:	7901      	ldrb	r1, [r0, #4]
 80086a6:	3901      	subs	r1, #1
 80086a8:	b2c9      	uxtb	r1, r1
 80086aa:	b168      	cbz	r0, 80086c8 <DisplayHandler::Print(unsigned int)+0x40>
 80086ac:	7942      	ldrb	r2, [r0, #5]
 80086ae:	3a01      	subs	r2, #1
 80086b0:	b2d2      	uxtb	r2, r2
 80086b2:	f7ff ffdf 	bl	8008674 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 80086b6:	682b      	ldr	r3, [r5, #0]
 80086b8:	4621      	mov	r1, r4
 80086ba:	6998      	ldr	r0, [r3, #24]
 80086bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086c0:	f7ff bfdd 	b.w	800867e <Display::PutChar(int) [clone .isra.0]>
 80086c4:	4601      	mov	r1, r0
 80086c6:	e7ee      	b.n	80086a6 <DisplayHandler::Print(unsigned int)+0x1e>
 80086c8:	4602      	mov	r2, r0
 80086ca:	e7f0      	b.n	80086ae <DisplayHandler::Print(unsigned int)+0x26>
 80086cc:	bd38      	pop	{r3, r4, r5, pc}
 80086ce:	bf00      	nop
 80086d0:	08016a7c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r9, fp, sp, lr}
 80086d4:	2000a8d8 	ldrdcs	sl, [r0], -r8

080086d8 <Display::SetSleep(bool)>:
 80086d8:	b538      	push	{r3, r4, r5, lr}
 80086da:	4604      	mov	r4, r0
 80086dc:	6980      	ldr	r0, [r0, #24]
 80086de:	460d      	mov	r5, r1
 80086e0:	b138      	cbz	r0, 80086f2 <Display::SetSleep(bool)+0x1a>
 80086e2:	6803      	ldr	r3, [r0, #0]
 80086e4:	7421      	strb	r1, [r4, #16]
 80086e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e8:	4798      	blx	r3
 80086ea:	b915      	cbnz	r5, 80086f2 <Display::SetSleep(bool)+0x1a>
 80086ec:	4b01      	ldr	r3, [pc, #4]	; (80086f4 <Display::SetSleep(bool)+0x1c>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	6063      	str	r3, [r4, #4]
 80086f2:	bd38      	pop	{r3, r4, r5, pc}
 80086f4:	2000a9dc 	ldrdcs	sl, [r0], -ip

080086f8 <Display::ClearLine(unsigned char)>:
 80086f8:	6980      	ldr	r0, [r0, #24]
 80086fa:	b110      	cbz	r0, 8008702 <Display::ClearLine(unsigned char)+0xa>
 80086fc:	6803      	ldr	r3, [r0, #0]
 80086fe:	691b      	ldr	r3, [r3, #16]
 8008700:	4718      	bx	r3
 8008702:	4770      	bx	lr

08008704 <Display::Printf(unsigned char, char const*, ...)>:
 8008704:	b40c      	push	{r2, r3}
 8008706:	b570      	push	{r4, r5, r6, lr}
 8008708:	6984      	ldr	r4, [r0, #24]
 800870a:	4605      	mov	r5, r0
 800870c:	460e      	mov	r6, r1
 800870e:	b08a      	sub	sp, #40	; 0x28
 8008710:	b174      	cbz	r4, 8008730 <Display::Printf(unsigned char, char const*, ...)+0x2c>
 8008712:	ab0f      	add	r3, sp, #60	; 0x3c
 8008714:	2120      	movs	r1, #32
 8008716:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008718:	a802      	add	r0, sp, #8
 800871a:	9301      	str	r3, [sp, #4]
 800871c:	f000 fe7a 	bl	8009414 <vsnprintf>
 8008720:	4604      	mov	r4, r0
 8008722:	69a8      	ldr	r0, [r5, #24]
 8008724:	4631      	mov	r1, r6
 8008726:	6803      	ldr	r3, [r0, #0]
 8008728:	aa02      	add	r2, sp, #8
 800872a:	69dd      	ldr	r5, [r3, #28]
 800872c:	b2a3      	uxth	r3, r4
 800872e:	47a8      	blx	r5
 8008730:	4620      	mov	r0, r4
 8008732:	b00a      	add	sp, #40	; 0x28
 8008734:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008738:	b002      	add	sp, #8
 800873a:	4770      	bx	lr

0800873c <Display::TextStatus(char const*)>:
 800873c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008740:	4604      	mov	r4, r0
 8008742:	6980      	ldr	r0, [r0, #24]
 8008744:	460d      	mov	r5, r1
 8008746:	b360      	cbz	r0, 80087a2 <Display::TextStatus(char const*)+0x66>
 8008748:	7947      	ldrb	r7, [r0, #5]
 800874a:	2100      	movs	r1, #0
 800874c:	1e7e      	subs	r6, r7, #1
 800874e:	b2f6      	uxtb	r6, r6
 8008750:	4632      	mov	r2, r6
 8008752:	f890 9004 	ldrb.w	r9, [r0, #4]
 8008756:	f04f 0800 	mov.w	r8, #0
 800875a:	f7ff ff8b 	bl	8008674 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 800875e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008762:	45c1      	cmp	r9, r8
 8008764:	69a0      	ldr	r0, [r4, #24]
 8008766:	d816      	bhi.n	8008796 <Display::TextStatus(char const*)+0x5a>
 8008768:	4632      	mov	r2, r6
 800876a:	2100      	movs	r1, #0
 800876c:	f7ff ff82 	bl	8008674 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 8008770:	69a0      	ldr	r0, [r4, #24]
 8008772:	b1b0      	cbz	r0, 80087a2 <Display::TextStatus(char const*)+0x66>
 8008774:	2300      	movs	r3, #0
 8008776:	7901      	ldrb	r1, [r0, #4]
 8008778:	5cea      	ldrb	r2, [r5, r3]
 800877a:	b11a      	cbz	r2, 8008784 <Display::TextStatus(char const*)+0x48>
 800877c:	1c5a      	adds	r2, r3, #1
 800877e:	4299      	cmp	r1, r3
 8008780:	4613      	mov	r3, r2
 8008782:	dcf9      	bgt.n	8008778 <Display::TextStatus(char const*)+0x3c>
 8008784:	6802      	ldr	r2, [r0, #0]
 8008786:	4639      	mov	r1, r7
 8008788:	69d4      	ldr	r4, [r2, #28]
 800878a:	b2db      	uxtb	r3, r3
 800878c:	462a      	mov	r2, r5
 800878e:	46a4      	mov	ip, r4
 8008790:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008794:	4760      	bx	ip
 8008796:	2120      	movs	r1, #32
 8008798:	f7ff ff71 	bl	800867e <Display::PutChar(int) [clone .isra.0]>
 800879c:	f108 0801 	add.w	r8, r8, #1
 80087a0:	e7df      	b.n	8008762 <Display::TextStatus(char const*)+0x26>
 80087a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080087a6 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>:
 80087a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087a8:	4605      	mov	r5, r0
 80087aa:	461e      	mov	r6, r3
 80087ac:	460f      	mov	r7, r1
 80087ae:	4614      	mov	r4, r2
 80087b0:	f7ff ffc4 	bl	800873c <Display::TextStatus(char const*)>
 80087b4:	7c6b      	ldrb	r3, [r5, #17]
 80087b6:	b19b      	cbz	r3, 80087e0 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x3a>
 80087b8:	43e2      	mvns	r2, r4
 80087ba:	2312      	movs	r3, #18
 80087bc:	7a28      	ldrb	r0, [r5, #8]
 80087be:	f88d 3004 	strb.w	r3, [sp, #4]
 80087c2:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80087c6:	f88d 3005 	strb.w	r3, [sp, #5]
 80087ca:	f88d 2006 	strb.w	r2, [sp, #6]
 80087ce:	f00c ff6d 	bl	80156ac <gd32_i2c_set_address(unsigned char)>
 80087d2:	68e8      	ldr	r0, [r5, #12]
 80087d4:	f00c ff62 	bl	801569c <gd32_i2c_set_baudrate(unsigned int)>
 80087d8:	2103      	movs	r1, #3
 80087da:	a801      	add	r0, sp, #4
 80087dc:	f00c ff6c 	bl	80156b8 <gd32_i2c_write(char const*, unsigned int)>
 80087e0:	1c73      	adds	r3, r6, #1
 80087e2:	d006      	beq.n	80087f2 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x4c>
 80087e4:	4639      	mov	r1, r7
 80087e6:	4630      	mov	r0, r6
 80087e8:	b003      	add	sp, #12
 80087ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80087ee:	f00b bdb7 	b.w	8014360 <console_status>
 80087f2:	b003      	add	sp, #12
 80087f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080087f8 <display::timeout::gpio_init()>:
 80087f8:	b510      	push	{r4, lr}
 80087fa:	f240 6003 	movw	r0, #1539	; 0x603
 80087fe:	f00c fb37 	bl	8014e70 <rcu_periph_clock_enable>
 8008802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008806:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800880a:	2203      	movs	r2, #3
 800880c:	2148      	movs	r1, #72	; 0x48
 800880e:	4801      	ldr	r0, [pc, #4]	; (8008814 <display::timeout::gpio_init()+0x1c>)
 8008810:	f00c ba96 	b.w	8014d40 <gpio_init>
 8008814:	40010c00 	andmi	r0, r1, r0, lsl #24

08008818 <display::timeout::gpio_renew()>:
 8008818:	4b03      	ldr	r3, [pc, #12]	; (8008828 <display::timeout::gpio_renew()+0x10>)
 800881a:	f8d3 0c08 	ldr.w	r0, [r3, #3080]	; 0xc08
 800881e:	f480 4080 	eor.w	r0, r0, #16384	; 0x4000
 8008822:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8008826:	4770      	bx	lr
 8008828:	40010000 	andmi	r0, r1, r0

0800882c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>:
 800882c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800882e:	2905      	cmp	r1, #5
 8008830:	b085      	sub	sp, #20
 8008832:	dc46      	bgt.n	80088c2 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x96>
 8008834:	4b24      	ldr	r3, [pc, #144]	; (80088c8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x9c>)
 8008836:	6019      	str	r1, [r3, #0]
 8008838:	2905      	cmp	r1, #5
 800883a:	d809      	bhi.n	8008850 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 800883c:	e8df f001 	tbb	[pc, r1]
 8008840:	130a032c 	movwne	r0, #41772	; 0xa32c
 8008844:	2300211a 	movwcs	r2, #282	; 0x11a
 8008848:	2264      	movs	r2, #100	; 0x64
 800884a:	4619      	mov	r1, r3
 800884c:	f005 f868 	bl	800d920 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 8008850:	2001      	movs	r0, #1
 8008852:	e037      	b.n	80088c4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x98>
 8008854:	2200      	movs	r2, #0
 8008856:	2364      	movs	r3, #100	; 0x64
 8008858:	4611      	mov	r1, r2
 800885a:	e9cd 3200 	strd	r3, r2, [sp]
 800885e:	4b1b      	ldr	r3, [pc, #108]	; (80088cc <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa0>)
 8008860:	f005 f872 	bl	800d948 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8008864:	e7f4      	b.n	8008850 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8008866:	2100      	movs	r1, #0
 8008868:	2364      	movs	r3, #100	; 0x64
 800886a:	4a18      	ldr	r2, [pc, #96]	; (80088cc <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa0>)
 800886c:	9100      	str	r1, [sp, #0]
 800886e:	f005 f887 	bl	800d980 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8008872:	e7ed      	b.n	8008850 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8008874:	2364      	movs	r3, #100	; 0x64
 8008876:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800887a:	2100      	movs	r1, #0
 800887c:	f005 f89a 	bl	800d9b4 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 8008880:	e7e6      	b.n	8008850 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8008882:	2200      	movs	r2, #0
 8008884:	2364      	movs	r3, #100	; 0x64
 8008886:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800888a:	230a      	movs	r3, #10
 800888c:	4611      	mov	r1, r2
 800888e:	9300      	str	r3, [sp, #0]
 8008890:	4b0e      	ldr	r3, [pc, #56]	; (80088cc <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa0>)
 8008892:	f005 f8c1 	bl	800da18 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8008896:	e7db      	b.n	8008850 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8008898:	2400      	movs	r4, #0
 800889a:	4627      	mov	r7, r4
 800889c:	4b0c      	ldr	r3, [pc, #48]	; (80088d0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa4>)
 800889e:	4e0d      	ldr	r6, [pc, #52]	; (80088d4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa8>)
 80088a0:	4d0d      	ldr	r5, [pc, #52]	; (80088d8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xac>)
 80088a2:	61dc      	str	r4, [r3, #28]
 80088a4:	682b      	ldr	r3, [r5, #0]
 80088a6:	6830      	ldr	r0, [r6, #0]
 80088a8:	429c      	cmp	r4, r3
 80088aa:	d302      	bcc.n	80088b2 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x86>
 80088ac:	f006 f9ce 	bl	800ec4c <WS28xx::Update()>
 80088b0:	e7ce      	b.n	8008850 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 80088b2:	2300      	movs	r3, #0
 80088b4:	4621      	mov	r1, r4
 80088b6:	461a      	mov	r2, r3
 80088b8:	9700      	str	r7, [sp, #0]
 80088ba:	f005 fb87 	bl	800dfcc <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 80088be:	3401      	adds	r4, #1
 80088c0:	e7f0      	b.n	80088a4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x78>
 80088c2:	2000      	movs	r0, #0
 80088c4:	b005      	add	sp, #20
 80088c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088c8:	20001950 	andcs	r1, r0, r0, asr r9
 80088cc:	00646464 	rsbeq	r6, r4, r4, ror #8
 80088d0:	2000191c 	andcs	r1, r0, ip, lsl r9
 80088d4:	20001948 	andcs	r1, r0, r8, asr #18
 80088d8:	20001944 	andcs	r1, r0, r4, asr #18

080088dc <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)>:
 80088dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80088de:	780b      	ldrb	r3, [r1, #0]
 80088e0:	4605      	mov	r5, r0
 80088e2:	2b03      	cmp	r3, #3
 80088e4:	d11f      	bne.n	8008926 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4a>
 80088e6:	4b18      	ldr	r3, [pc, #96]	; (8008948 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x6c>)
 80088e8:	784c      	ldrb	r4, [r1, #1]
 80088ea:	6818      	ldr	r0, [r3, #0]
 80088ec:	4b17      	ldr	r3, [pc, #92]	; (800894c <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x70>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	429c      	cmp	r4, r3
 80088f2:	d018      	beq.n	8008926 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4a>
 80088f4:	4621      	mov	r1, r4
 80088f6:	f7ff ff99 	bl	800882c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 80088fa:	b1a0      	cbz	r0, 8008926 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4a>
 80088fc:	4e14      	ldr	r6, [pc, #80]	; (8008950 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x74>)
 80088fe:	b1a4      	cbz	r4, 800892a <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4e>
 8008900:	2200      	movs	r2, #0
 8008902:	6833      	ldr	r3, [r6, #0]
 8008904:	4d13      	ldr	r5, [pc, #76]	; (8008954 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x78>)
 8008906:	609a      	str	r2, [r3, #8]
 8008908:	2106      	movs	r1, #6
 800890a:	6828      	ldr	r0, [r5, #0]
 800890c:	f7ff fef4 	bl	80086f8 <Display::ClearLine(unsigned char)>
 8008910:	4620      	mov	r0, r4
 8008912:	682d      	ldr	r5, [r5, #0]
 8008914:	f004 fff8 	bl	800d908 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8008918:	2106      	movs	r1, #6
 800891a:	4603      	mov	r3, r0
 800891c:	4a0e      	ldr	r2, [pc, #56]	; (8008958 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x7c>)
 800891e:	4628      	mov	r0, r5
 8008920:	9400      	str	r4, [sp, #0]
 8008922:	f7ff feef 	bl	8008704 <Display::Printf(unsigned char, char const*, ...)>
 8008926:	b002      	add	sp, #8
 8008928:	bd70      	pop	{r4, r5, r6, pc}
 800892a:	6868      	ldr	r0, [r5, #4]
 800892c:	2101      	movs	r1, #1
 800892e:	6803      	ldr	r3, [r0, #0]
 8008930:	695b      	ldr	r3, [r3, #20]
 8008932:	4798      	blx	r3
 8008934:	6833      	ldr	r3, [r6, #0]
 8008936:	686a      	ldr	r2, [r5, #4]
 8008938:	609a      	str	r2, [r3, #8]
 800893a:	4b08      	ldr	r3, [pc, #32]	; (800895c <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x80>)
 800893c:	6818      	ldr	r0, [r3, #0]
 800893e:	b002      	add	sp, #8
 8008940:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008944:	f00a bb7e 	b.w	8013044 <DisplayUdf::Show()>
 8008948:	2000194c 	andcs	r1, r0, ip, asr #18
 800894c:	20001950 	andcs	r1, r0, r0, asr r9
 8008950:	20001900 	andcs	r1, r0, r0, lsl #18
 8008954:	2000a8d8 	ldrdcs	sl, [r0], -r8
 8008958:	08016965 	stmdaeq	r1, {r0, r2, r5, r6, r8, fp, sp, lr}
 800895c:	2000a8d0 	ldrdcs	sl, [r0], -r0

08008960 <main>:
 8008960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008964:	2501      	movs	r5, #1
 8008966:	f5ad 5db7 	sub.w	sp, sp, #5856	; 0x16e0
 800896a:	b085      	sub	sp, #20
 800896c:	a80c      	add	r0, sp, #48	; 0x30
 800896e:	f00b fdab 	bl	80144c8 <Hardware::Hardware()>
 8008972:	a88c      	add	r0, sp, #560	; 0x230
 8008974:	f009 f9f6 	bl	8011d64 <Network::Network()>
 8008978:	a816      	add	r0, sp, #88	; 0x58
 800897a:	f00b fd4f 	bl	801441c <LedBlink::LedBlink()>
 800897e:	a853      	add	r0, sp, #332	; 0x14c
 8008980:	f00a faa0 	bl	8012ec4 <DisplayUdf::DisplayUdf()>
 8008984:	4abd      	ldr	r2, [pc, #756]	; (8008c7c <main+0x31c>)
 8008986:	4bbe      	ldr	r3, [pc, #760]	; (8008c80 <main+0x320>)
 8008988:	49be      	ldr	r1, [pc, #760]	; (8008c84 <main+0x324>)
 800898a:	a804      	add	r0, sp, #16
 800898c:	f00b fd00 	bl	8014390 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
 8008990:	a805      	add	r0, sp, #20
 8008992:	f008 f8bf 	bl	8010b14 <FlashRom::FlashRom()>
 8008996:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 8008c88 <main+0x328>
 800899a:	a806      	add	r0, sp, #24
 800899c:	f007 fcbe 	bl	801031c <SpiFlashStore::SpiFlashStore()>
 80089a0:	49ba      	ldr	r1, [pc, #744]	; (8008c8c <main+0x32c>)
 80089a2:	a804      	add	r0, sp, #16
 80089a4:	f00b fd2c 	bl	8014400 <FirmwareVersion::Print(char const*)>
 80089a8:	2004      	movs	r0, #4
 80089aa:	f8c8 5010 	str.w	r5, [r8, #16]
 80089ae:	f00b fe3f 	bl	8014630 <operator new(unsigned int)>
 80089b2:	4bb7      	ldr	r3, [pc, #732]	; (8008c90 <main+0x330>)
 80089b4:	ae0c      	add	r6, sp, #48	; 0x30
 80089b6:	f846 0914 	str.w	r0, [r6], #-20
 80089ba:	6003      	str	r3, [r0, #0]
 80089bc:	2008      	movs	r0, #8
 80089be:	f00b fe37 	bl	8014630 <operator new(unsigned int)>
 80089c2:	4bb4      	ldr	r3, [pc, #720]	; (8008c94 <main+0x334>)
 80089c4:	2400      	movs	r4, #0
 80089c6:	6003      	str	r3, [r0, #0]
 80089c8:	4bb3      	ldr	r3, [pc, #716]	; (8008c98 <main+0x338>)
 80089ca:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	49b2      	ldr	r1, [pc, #712]	; (8008c9c <main+0x33c>)
 80089d2:	3b00      	subs	r3, #0
 80089d4:	bf18      	it	ne
 80089d6:	2301      	movne	r3, #1
 80089d8:	7103      	strb	r3, [r0, #4]
 80089da:	9018      	str	r0, [sp, #96]	; 0x60
 80089dc:	ab16      	add	r3, sp, #88	; 0x58
 80089de:	a853      	add	r0, sp, #332	; 0x14c
 80089e0:	2303      	movs	r3, #3
 80089e2:	f7ff fee0 	bl	80087a6 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 80089e6:	af14      	add	r7, sp, #80	; 0x50
 80089e8:	a80e      	add	r0, sp, #56	; 0x38
 80089ea:	f007 ff75 	bl	80108d8 <StoreNetwork::StoreNetwork()>
 80089ee:	f1a7 0314 	sub.w	r3, r7, #20
 80089f2:	a90e      	add	r1, sp, #56	; 0x38
 80089f4:	a88c      	add	r0, sp, #560	; 0x230
 80089f6:	93b9      	str	r3, [sp, #740]	; 0x2e4
 80089f8:	f009 fa0c 	bl	8011e14 <Network::Init(NetworkParamsStore*)>
 80089fc:	a88c      	add	r0, sp, #560	; 0x230
 80089fe:	f009 fbe3 	bl	80121c8 <Network::Print()>
 8008a02:	2303      	movs	r3, #3
 8008a04:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008a08:	49a5      	ldr	r1, [pc, #660]	; (8008ca0 <main+0x340>)
 8008a0a:	a853      	add	r0, sp, #332	; 0x14c
 8008a0c:	f7ff fecb 	bl	80087a6 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008a10:	4630      	mov	r0, r6
 8008a12:	f008 fde9 	bl	80115e8 <MDNS::MDNS()>
 8008a16:	4630      	mov	r0, r6
 8008a18:	f008 fea6 	bl	8011768 <MDNS::Start()>
 8008a1c:	f642 1305 	movw	r3, #10501	; 0x2905
 8008a20:	4621      	mov	r1, r4
 8008a22:	4aa0      	ldr	r2, [pc, #640]	; (8008ca4 <main+0x344>)
 8008a24:	4630      	mov	r0, r6
 8008a26:	e9cd 4400 	strd	r4, r4, [sp]
 8008a2a:	f009 f807 	bl	8011a3c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 8008a2e:	4b9e      	ldr	r3, [pc, #632]	; (8008ca8 <main+0x348>)
 8008a30:	4621      	mov	r1, r4
 8008a32:	4a9e      	ldr	r2, [pc, #632]	; (8008cac <main+0x34c>)
 8008a34:	e9cd 5300 	strd	r5, r3, [sp]
 8008a38:	4630      	mov	r0, r6
 8008a3a:	2350      	movs	r3, #80	; 0x50
 8008a3c:	f008 fffe 	bl	8011a3c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 8008a40:	4630      	mov	r0, r6
 8008a42:	f009 f941 	bl	8011cc8 <MDNS::Print()>
 8008a46:	2303      	movs	r3, #3
 8008a48:	f44f 42cc 	mov.w	r2, #26112	; 0x6600
 8008a4c:	4998      	ldr	r1, [pc, #608]	; (8008cb0 <main+0x350>)
 8008a4e:	a853      	add	r0, sp, #332	; 0x14c
 8008a50:	f7ff fea9 	bl	80087a6 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008a54:	a810      	add	r0, sp, #64	; 0x40
 8008a56:	f007 fe5b 	bl	8010710 <StoreArtNet::StoreArtNet()>
 8008a5a:	a910      	add	r1, sp, #64	; 0x40
 8008a5c:	a869      	add	r0, sp, #420	; 0x1a4
 8008a5e:	f002 fcc7 	bl	800b3f0 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 8008a62:	4629      	mov	r1, r5
 8008a64:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
 8008a68:	f000 ff12 	bl	8009890 <ArtNet4Node::ArtNet4Node(unsigned char)>
 8008a6c:	a869      	add	r0, sp, #420	; 0x1a4
 8008a6e:	f002 fce3 	bl	800b438 <ArtNetParams::Load()>
 8008a72:	b138      	cbz	r0, 8008a84 <main+0x124>
 8008a74:	a869      	add	r0, sp, #420	; 0x1a4
 8008a76:	f60d 01ec 	addw	r1, sp, #2284	; 0x8ec
 8008a7a:	f003 f890 	bl	800bb9e <ArtNetParams::Set(ArtNetNode*)>
 8008a7e:	a869      	add	r0, sp, #420	; 0x1a4
 8008a80:	f003 f90d 	bl	800bc9e <ArtNetParams::Dump()>
 8008a84:	f1a7 030c 	sub.w	r3, r7, #12
 8008a88:	4a8a      	ldr	r2, [pc, #552]	; (8008cb4 <main+0x354>)
 8008a8a:	f8cd 390c 	str.w	r3, [sp, #2316]	; 0x90c
 8008a8e:	4d8a      	ldr	r5, [pc, #552]	; (8008cb8 <main+0x358>)
 8008a90:	9209      	str	r2, [sp, #36]	; 0x24
 8008a92:	ab09      	add	r3, sp, #36	; 0x24
 8008a94:	ac1c      	add	r4, sp, #112	; 0x70
 8008a96:	ab09      	add	r3, sp, #36	; 0x24
 8008a98:	f8cd 3910 	str.w	r3, [sp, #2320]	; 0x910
 8008a9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008aa0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008aa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008aa8:	a812      	add	r0, sp, #72	; 0x48
 8008aaa:	f008 f827 	bl	8010afc <StoreWS28xxDmx::StoreWS28xxDmx()>
 8008aae:	a912      	add	r1, sp, #72	; 0x48
 8008ab0:	a837      	add	r0, sp, #220	; 0xdc
 8008ab2:	f004 fb0b 	bl	800d0cc <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>
 8008ab6:	a837      	add	r0, sp, #220	; 0xdc
 8008ab8:	f004 fb3c 	bl	800d134 <WS28xxDmxParams::Load()>
 8008abc:	b130      	cbz	r0, 8008acc <main+0x16c>
 8008abe:	a837      	add	r0, sp, #220	; 0xdc
 8008ac0:	a91c      	add	r1, sp, #112	; 0x70
 8008ac2:	f004 fdb6 	bl	800d632 <WS28xxDmxParams::Set(PixelDmxConfiguration*)>
 8008ac6:	a837      	add	r0, sp, #220	; 0xdc
 8008ac8:	f004 fde9 	bl	800d69e <WS28xxDmxParams::Dump()>
 8008acc:	ad42      	add	r5, sp, #264	; 0x108
 8008ace:	a91c      	add	r1, sp, #112	; 0x70
 8008ad0:	4628      	mov	r0, r5
 8008ad2:	f004 fa01 	bl	800ced8 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>
 8008ad6:	2004      	movs	r0, #4
 8008ad8:	f00b fdaa 	bl	8014630 <operator new(unsigned int)>
 8008adc:	4b77      	ldr	r3, [pc, #476]	; (8008cbc <main+0x35c>)
 8008ade:	4604      	mov	r4, r0
 8008ae0:	6003      	str	r3, [r0, #0]
 8008ae2:	2203      	movs	r2, #3
 8008ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ae8:	2110      	movs	r1, #16
 8008aea:	4875      	ldr	r0, [pc, #468]	; (8008cc0 <main+0x360>)
 8008aec:	f00c f928 	bl	8014d40 <gpio_init>
 8008af0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008af4:	4b73      	ldr	r3, [pc, #460]	; (8008cc4 <main+0x364>)
 8008af6:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8008afa:	63ec      	str	r4, [r5, #60]	; 0x3c
 8008afc:	2400      	movs	r4, #0
 8008afe:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8008b00:	f8d5 a01c 	ldr.w	sl, [r5, #28]
 8008b04:	f8bd b0f6 	ldrh.w	fp, [sp, #246]	; 0xf6
 8008b08:	ab37      	add	r3, sp, #220	; 0xdc
 8008b0a:	f402 5980 	and.w	r9, r2, #4096	; 0x1000
 8008b0e:	4554      	cmp	r4, sl
 8008b10:	f040 812d 	bne.w	8008d6e <main+0x40e>
 8008b14:	f89d 4106 	ldrb.w	r4, [sp, #262]	; 0x106
 8008b18:	2101      	movs	r1, #1
 8008b1a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8008cc8 <main+0x368>
 8008b1e:	a808      	add	r0, sp, #32
 8008b20:	ab37      	add	r3, sp, #220	; 0xdc
 8008b22:	f004 fed1 	bl	800d8c8 <PixelPatterns::PixelPatterns(unsigned int)>
 8008b26:	4621      	mov	r1, r4
 8008b28:	a808      	add	r0, sp, #32
 8008b2a:	f8c9 4000 	str.w	r4, [r9]
 8008b2e:	f7ff fe7d 	bl	800882c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 8008b32:	f8d9 3000 	ldr.w	r3, [r9]
 8008b36:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	bf0c      	ite	eq
 8008b3e:	462b      	moveq	r3, r5
 8008b40:	2300      	movne	r3, #0
 8008b42:	f8cd 38f4 	str.w	r3, [sp, #2292]	; 0x8f4
 8008b46:	4b61      	ldr	r3, [pc, #388]	; (8008ccc <main+0x36c>)
 8008b48:	e9c7 3500 	strd	r3, r5, [r7]
 8008b4c:	4b60      	ldr	r3, [pc, #384]	; (8008cd0 <main+0x370>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	619f      	str	r7, [r3, #24]
 8008b52:	f000 fefb 	bl	800994c <ArtNet4Node::Print()>
 8008b56:	4628      	mov	r0, r5
 8008b58:	f004 fda2 	bl	800d6a0 <WS28xxDmx::Print()>
 8008b5c:	495d      	ldr	r1, [pc, #372]	; (8008cd4 <main+0x374>)
 8008b5e:	a853      	add	r0, sp, #332	; 0x14c
 8008b60:	f00a f9c6 	bl	8012ef0 <DisplayUdf::SetTitle(char const*, ...)>
 8008b64:	2202      	movs	r2, #2
 8008b66:	a853      	add	r0, sp, #332	; 0x14c
 8008b68:	4611      	mov	r1, r2
 8008b6a:	f00a fb17 	bl	801319c <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008b6e:	2206      	movs	r2, #6
 8008b70:	2103      	movs	r1, #3
 8008b72:	a853      	add	r0, sp, #332	; 0x14c
 8008b74:	f00a fb12 	bl	801319c <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008b78:	2203      	movs	r2, #3
 8008b7a:	2104      	movs	r1, #4
 8008b7c:	a853      	add	r0, sp, #332	; 0x14c
 8008b7e:	f00a fb0d 	bl	801319c <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008b82:	2208      	movs	r2, #8
 8008b84:	2105      	movs	r1, #5
 8008b86:	a853      	add	r0, sp, #332	; 0x14c
 8008b88:	f00a fb08 	bl	801319c <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	2106      	movs	r1, #6
 8008b90:	a853      	add	r0, sp, #332	; 0x14c
 8008b92:	f00a fb03 	bl	801319c <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008b96:	981c      	ldr	r0, [sp, #112]	; 0x70
 8008b98:	f005 f8f8 	bl	800dd8c <PixelType::GetType(pixel::Type)>
 8008b9c:	4605      	mov	r5, r0
 8008b9e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8008ba0:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8008ba2:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 8008ba6:	f005 f949 	bl	800de3c <PixelType::GetMap(pixel::Map)>
 8008baa:	462b      	mov	r3, r5
 8008bac:	2107      	movs	r1, #7
 8008bae:	4a4a      	ldr	r2, [pc, #296]	; (8008cd8 <main+0x378>)
 8008bb0:	e9cd a001 	strd	sl, r0, [sp, #4]
 8008bb4:	9700      	str	r7, [sp, #0]
 8008bb6:	a853      	add	r0, sp, #332	; 0x14c
 8008bb8:	f7ff fda4 	bl	8008704 <Display::Printf(unsigned char, char const*, ...)>
 8008bbc:	a80a      	add	r0, sp, #40	; 0x28
 8008bbe:	f007 fddf 	bl	8010780 <StoreDisplayUdf::StoreDisplayUdf()>
 8008bc2:	a90a      	add	r1, sp, #40	; 0x28
 8008bc4:	a82d      	add	r0, sp, #180	; 0xb4
 8008bc6:	f00a fb2b 	bl	8013220 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 8008bca:	a82d      	add	r0, sp, #180	; 0xb4
 8008bcc:	f00a fb35 	bl	801323a <DisplayUdfParams::Load()>
 8008bd0:	b130      	cbz	r0, 8008be0 <main+0x280>
 8008bd2:	a82d      	add	r0, sp, #180	; 0xb4
 8008bd4:	a953      	add	r1, sp, #332	; 0x14c
 8008bd6:	f00a fc68 	bl	80134aa <DisplayUdfParams::Set(DisplayUdf*)>
 8008bda:	a82d      	add	r0, sp, #180	; 0xb4
 8008bdc:	f00a fc98 	bl	8013510 <DisplayUdfParams::Dump()>
 8008be0:	f60d 01ec 	addw	r1, sp, #2284	; 0x8ec
 8008be4:	a853      	add	r0, sp, #332	; 0x14c
 8008be6:	f00a fd63 	bl	80136b0 <DisplayUdf::Show(ArtNetNode*)>
 8008bea:	b16c      	cbz	r4, 8008c08 <main+0x2a8>
 8008bec:	2106      	movs	r1, #6
 8008bee:	a853      	add	r0, sp, #332	; 0x14c
 8008bf0:	f7ff fd82 	bl	80086f8 <Display::ClearLine(unsigned char)>
 8008bf4:	4620      	mov	r0, r4
 8008bf6:	f004 fe87 	bl	800d908 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8008bfa:	2106      	movs	r1, #6
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	4a37      	ldr	r2, [pc, #220]	; (8008cdc <main+0x37c>)
 8008c00:	9400      	str	r4, [sp, #0]
 8008c02:	a853      	add	r0, sp, #332	; 0x14c
 8008c04:	f7ff fd7e 	bl	8008704 <Display::Printf(unsigned char, char const*, ...)>
 8008c08:	2203      	movs	r2, #3
 8008c0a:	2100      	movs	r1, #0
 8008c0c:	f89d 3fca 	ldrb.w	r3, [sp, #4042]	; 0xfca
 8008c10:	a8be      	add	r0, sp, #760	; 0x2f8
 8008c12:	f006 f9c5 	bl	800efa0 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>
 8008c16:	a80b      	add	r0, sp, #44	; 0x2c
 8008c18:	f007 fe94 	bl	8010944 <StoreRemoteConfig::StoreRemoteConfig()>
 8008c1c:	a90b      	add	r1, sp, #44	; 0x2c
 8008c1e:	a824      	add	r0, sp, #144	; 0x90
 8008c20:	f006 fcbe 	bl	800f5a0 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 8008c24:	a824      	add	r0, sp, #144	; 0x90
 8008c26:	f006 fcc5 	bl	800f5b4 <RemoteConfigParams::Load()>
 8008c2a:	b130      	cbz	r0, 8008c3a <main+0x2da>
 8008c2c:	a824      	add	r0, sp, #144	; 0x90
 8008c2e:	a9be      	add	r1, sp, #760	; 0x2f8
 8008c30:	f006 fde7 	bl	800f802 <RemoteConfigParams::Set(RemoteConfig*)>
 8008c34:	a824      	add	r0, sp, #144	; 0x90
 8008c36:	f006 fe08 	bl	800f84a <RemoteConfigParams::Dump()>
 8008c3a:	a806      	add	r0, sp, #24
 8008c3c:	f007 fc10 	bl	8010460 <SpiFlashStore::Flash()>
 8008c40:	2800      	cmp	r0, #0
 8008c42:	d1fa      	bne.n	8008c3a <main+0x2da>
 8008c44:	2303      	movs	r3, #3
 8008c46:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8008c4a:	4925      	ldr	r1, [pc, #148]	; (8008ce0 <main+0x380>)
 8008c4c:	a853      	add	r0, sp, #332	; 0x14c
 8008c4e:	f7ff fdaa 	bl	80087a6 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008c52:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
 8008c56:	f000 fe2f 	bl	80098b8 <ArtNet4Node::Start()>
 8008c5a:	2302      	movs	r3, #2
 8008c5c:	f248 0280 	movw	r2, #32896	; 0x8080
 8008c60:	4920      	ldr	r1, [pc, #128]	; (8008ce4 <main+0x384>)
 8008c62:	a853      	add	r0, sp, #332	; 0x14c
 8008c64:	f7ff fd9f 	bl	80087a6 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008c68:	2102      	movs	r1, #2
 8008c6a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008c6e:	f00c f83d 	bl	8014cec <fwdgt_config>
 8008c72:	2801      	cmp	r0, #1
 8008c74:	bf08      	it	eq
 8008c76:	2301      	moveq	r3, #1
 8008c78:	e036      	b.n	8008ce8 <main+0x388>
 8008c7a:	bf00      	nop
 8008c7c:	08016974 	stmdaeq	r1, {r2, r4, r5, r6, r8, fp, sp, lr}
 8008c80:	0801696b 	stmdaeq	r1, {r0, r1, r3, r5, r6, r8, fp, sp, lr}
 8008c84:	08016a81 	stmdaeq	r1, {r0, r7, r9, fp, sp, lr}
 8008c88:	40011000 	andmi	r1, r1, r0
 8008c8c:	08016980 	stmdaeq	r1, {r7, r8, fp, sp, lr}
 8008c90:	08016a70 	stmdaeq	r1, {r4, r5, r6, r9, fp, sp, lr}
 8008c94:	08016a04 	stmdaeq	r1, {r2, r9, fp, sp, lr}
 8008c98:	2000a8d8 	ldrdcs	sl, [r0], -r8
 8008c9c:	08018401 	stmdaeq	r1, {r0, sl, pc}
 8008ca0:	080183f0 	stmdaeq	r1, {r4, r5, r6, r7, r8, r9, pc}
 8008ca4:	080169b6 	stmdaeq	r1, {r1, r2, r4, r5, r7, r8, fp, sp, lr}
 8008ca8:	080169c6 	stmdaeq	r1, {r1, r2, r6, r7, r8, fp, sp, lr}
 8008cac:	080169bf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, r8, fp, sp, lr}
 8008cb0:	08016ad5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r9, fp, sp, lr}
 8008cb4:	08016a18 	stmdaeq	r1, {r3, r4, r9, fp, sp, lr}
 8008cb8:	08016924 	stmdaeq	r1, {r2, r5, r8, fp, sp, lr}
 8008cbc:	08016a58 	stmdaeq	r1, {r3, r4, r6, r9, fp, sp, lr}
 8008cc0:	40010c00 	andmi	r0, r1, r0, lsl #24
 8008cc4:	40010000 	andmi	r0, r1, r0
 8008cc8:	20001950 	andcs	r1, r0, r0, asr r9
 8008ccc:	08016a44 	stmdaeq	r1, {r2, r6, r9, fp, sp, lr}
 8008cd0:	20001900 	andcs	r1, r0, r0, lsl #18
 8008cd4:	080169db 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, r8, fp, sp, lr}
 8008cd8:	080169ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r8, fp, sp, lr}
 8008cdc:	08016965 	stmdaeq	r1, {r0, r2, r5, r6, r8, fp, sp, lr}
 8008ce0:	08016ac4 	stmdaeq	r1, {r2, r6, r7, r9, fp, sp, lr}
 8008ce4:	08016ae9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r9, fp, sp, lr}
 8008ce8:	bf18      	it	ne
 8008cea:	2300      	movne	r3, #0
 8008cec:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8008cf0:	d101      	bne.n	8008cf6 <main+0x396>
 8008cf2:	f00b ffeb 	bl	8014ccc <fwdgt_enable>
 8008cf6:	2701      	movs	r7, #1
 8008cf8:	4d27      	ldr	r5, [pc, #156]	; (8008d98 <main+0x438>)
 8008cfa:	ac16      	add	r4, sp, #88	; 0x58
 8008cfc:	f00b ffee 	bl	8014cdc <fwdgt_counter_reload>
 8008d00:	f7fe fc0e 	bl	8007520 <net_handle>
 8008d04:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
 8008d08:	f000 fe11 	bl	800992e <ArtNet4Node::Run()>
 8008d0c:	a8be      	add	r0, sp, #760	; 0x2f8
 8008d0e:	f006 faf7 	bl	800f300 <RemoteConfig::Run()>
 8008d12:	a806      	add	r0, sp, #24
 8008d14:	f007 fba4 	bl	8010460 <SpiFlashStore::Flash()>
 8008d18:	68e2      	ldr	r2, [r4, #12]
 8008d1a:	b182      	cbz	r2, 8008d3e <main+0x3de>
 8008d1c:	682b      	ldr	r3, [r5, #0]
 8008d1e:	6961      	ldr	r1, [r4, #20]
 8008d20:	1a5b      	subs	r3, r3, r1
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d80b      	bhi.n	8008d3e <main+0x3de>
 8008d26:	682b      	ldr	r3, [r5, #0]
 8008d28:	6163      	str	r3, [r4, #20]
 8008d2a:	6923      	ldr	r3, [r4, #16]
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	f083 0201 	eor.w	r2, r3, #1
 8008d32:	6122      	str	r2, [r4, #16]
 8008d34:	bf14      	ite	ne
 8008d36:	f8c8 7010 	strne.w	r7, [r8, #16]
 8008d3a:	f8c8 3014 	streq.w	r3, [r8, #20]
 8008d3e:	9958      	ldr	r1, [sp, #352]	; 0x160
 8008d40:	aa53      	add	r2, sp, #332	; 0x14c
 8008d42:	b151      	cbz	r1, 8008d5a <main+0x3fa>
 8008d44:	7c13      	ldrb	r3, [r2, #16]
 8008d46:	bb03      	cbnz	r3, 8008d8a <main+0x42a>
 8008d48:	682b      	ldr	r3, [r5, #0]
 8008d4a:	6852      	ldr	r2, [r2, #4]
 8008d4c:	1a9b      	subs	r3, r3, r2
 8008d4e:	4299      	cmp	r1, r3
 8008d50:	d203      	bcs.n	8008d5a <main+0x3fa>
 8008d52:	2101      	movs	r1, #1
 8008d54:	a853      	add	r0, sp, #332	; 0x14c
 8008d56:	f7ff fcbf 	bl	80086d8 <Display::SetSleep(bool)>
 8008d5a:	f8d9 3000 	ldr.w	r3, [r9]
 8008d5e:	b113      	cbz	r3, 8008d66 <main+0x406>
 8008d60:	a808      	add	r0, sp, #32
 8008d62:	f004 ffeb 	bl	800dd3c <PixelPatterns::Run()>
 8008d66:	4630      	mov	r0, r6
 8008d68:	f008 ff8a 	bl	8011c80 <MDNS::Run()>
 8008d6c:	e7c6      	b.n	8008cfc <main+0x39c>
 8008d6e:	f1b9 0f00 	cmp.w	r9, #0
 8008d72:	d008      	beq.n	8008d86 <main+0x426>
 8008d74:	eb0b 0304 	add.w	r3, fp, r4
 8008d78:	2201      	movs	r2, #1
 8008d7a:	4621      	mov	r1, r4
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	f60d 00ec 	addw	r0, sp, #2284	; 0x8ec
 8008d82:	f001 f9cc 	bl	800a11e <ArtNetNode::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 8008d86:	3401      	adds	r4, #1
 8008d88:	e6c1      	b.n	8008b0e <main+0x1ae>
 8008d8a:	f7ff fd45 	bl	8008818 <display::timeout::gpio_renew()>
 8008d8e:	2800      	cmp	r0, #0
 8008d90:	d0e3      	beq.n	8008d5a <main+0x3fa>
 8008d92:	2100      	movs	r1, #0
 8008d94:	e7de      	b.n	8008d54 <main+0x3f4>
 8008d96:	bf00      	nop
 8008d98:	2000a9dc 	ldrdcs	sl, [r0], -ip

08008d9c <_itostr>:
 8008d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d9e:	0fc7      	lsrs	r7, r0, #31
 8008da0:	b091      	sub	sp, #68	; 0x44
 8008da2:	bf18      	it	ne
 8008da4:	4240      	negne	r0, r0
 8008da6:	f10d 043f 	add.w	r4, sp, #63	; 0x3f
 8008daa:	b9c8      	cbnz	r0, 8008de0 <_itostr+0x44>
 8008dac:	2330      	movs	r3, #48	; 0x30
 8008dae:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8008db2:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8008db6:	b132      	cbz	r2, 8008dc6 <_itostr+0x2a>
 8008db8:	4668      	mov	r0, sp
 8008dba:	2530      	movs	r5, #48	; 0x30
 8008dbc:	1ae6      	subs	r6, r4, r3
 8008dbe:	4296      	cmp	r6, r2
 8008dc0:	da01      	bge.n	8008dc6 <_itostr+0x2a>
 8008dc2:	4283      	cmp	r3, r0
 8008dc4:	d81c      	bhi.n	8008e00 <_itostr+0x64>
 8008dc6:	b117      	cbz	r7, 8008dce <_itostr+0x32>
 8008dc8:	222d      	movs	r2, #45	; 0x2d
 8008dca:	f803 2901 	strb.w	r2, [r3], #-1
 8008dce:	3301      	adds	r3, #1
 8008dd0:	1ae0      	subs	r0, r4, r3
 8008dd2:	3901      	subs	r1, #1
 8008dd4:	aa10      	add	r2, sp, #64	; 0x40
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d315      	bcc.n	8008e06 <_itostr+0x6a>
 8008dda:	3001      	adds	r0, #1
 8008ddc:	b011      	add	sp, #68	; 0x44
 8008dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008de0:	4623      	mov	r3, r4
 8008de2:	250a      	movs	r5, #10
 8008de4:	46ec      	mov	ip, sp
 8008de6:	fb90 f6f5 	sdiv	r6, r0, r5
 8008dea:	fb05 0016 	mls	r0, r5, r6, r0
 8008dee:	3030      	adds	r0, #48	; 0x30
 8008df0:	f803 0901 	strb.w	r0, [r3], #-1
 8008df4:	4630      	mov	r0, r6
 8008df6:	2e00      	cmp	r6, #0
 8008df8:	d0dd      	beq.n	8008db6 <_itostr+0x1a>
 8008dfa:	4563      	cmp	r3, ip
 8008dfc:	d1f3      	bne.n	8008de6 <_itostr+0x4a>
 8008dfe:	e7da      	b.n	8008db6 <_itostr+0x1a>
 8008e00:	f803 5901 	strb.w	r5, [r3], #-1
 8008e04:	e7da      	b.n	8008dbc <_itostr+0x20>
 8008e06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e0a:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008e0e:	e7e1      	b.n	8008dd4 <_itostr+0x38>

08008e10 <_xputch>:
 8008e10:	4603      	mov	r3, r0
 8008e12:	b410      	push	{r4}
 8008e14:	4c08      	ldr	r4, [pc, #32]	; (8008e38 <_xputch+0x28>)
 8008e16:	68da      	ldr	r2, [r3, #12]
 8008e18:	4608      	mov	r0, r1
 8008e1a:	6821      	ldr	r1, [r4, #0]
 8008e1c:	3201      	adds	r2, #1
 8008e1e:	60da      	str	r2, [r3, #12]
 8008e20:	b139      	cbz	r1, 8008e32 <_xputch+0x22>
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	da02      	bge.n	8008e2e <_xputch+0x1e>
 8008e28:	1c4b      	adds	r3, r1, #1
 8008e2a:	6023      	str	r3, [r4, #0]
 8008e2c:	7008      	strb	r0, [r1, #0]
 8008e2e:	bc10      	pop	{r4}
 8008e30:	4770      	bx	lr
 8008e32:	bc10      	pop	{r4}
 8008e34:	f00b ba5c 	b.w	80142f0 <console_putc>
 8008e38:	200000e8 	andcs	r0, r0, r8, ror #1

08008e3c <_format_int>:
 8008e3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e40:	4698      	mov	r8, r3
 8008e42:	b091      	sub	sp, #68	; 0x44
 8008e44:	ea52 0308 	orrs.w	r3, r2, r8
 8008e48:	4606      	mov	r6, r0
 8008e4a:	4617      	mov	r7, r2
 8008e4c:	f10d 053f 	add.w	r5, sp, #63	; 0x3f
 8008e50:	d133      	bne.n	8008eba <_format_int+0x7e>
 8008e52:	2330      	movs	r3, #48	; 0x30
 8008e54:	f10d 043e 	add.w	r4, sp, #62	; 0x3e
 8008e58:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8008e5c:	6833      	ldr	r3, [r6, #0]
 8008e5e:	07d8      	lsls	r0, r3, #31
 8008e60:	d507      	bpl.n	8008e72 <_format_int+0x36>
 8008e62:	466a      	mov	r2, sp
 8008e64:	2030      	movs	r0, #48	; 0x30
 8008e66:	6871      	ldr	r1, [r6, #4]
 8008e68:	1b2f      	subs	r7, r5, r4
 8008e6a:	428f      	cmp	r7, r1
 8008e6c:	da01      	bge.n	8008e72 <_format_int+0x36>
 8008e6e:	4294      	cmp	r4, r2
 8008e70:	d839      	bhi.n	8008ee6 <_format_int+0xaa>
 8008e72:	0699      	lsls	r1, r3, #26
 8008e74:	d507      	bpl.n	8008e86 <_format_int+0x4a>
 8008e76:	466a      	mov	r2, sp
 8008e78:	2030      	movs	r0, #48	; 0x30
 8008e7a:	68b1      	ldr	r1, [r6, #8]
 8008e7c:	1b2f      	subs	r7, r5, r4
 8008e7e:	428f      	cmp	r7, r1
 8008e80:	da01      	bge.n	8008e86 <_format_int+0x4a>
 8008e82:	4294      	cmp	r4, r2
 8008e84:	d832      	bhi.n	8008eec <_format_int+0xb0>
 8008e86:	071a      	lsls	r2, r3, #28
 8008e88:	bf44      	itt	mi
 8008e8a:	222d      	movmi	r2, #45	; 0x2d
 8008e8c:	f804 2901 	strbmi.w	r2, [r4], #-1
 8008e90:	065b      	lsls	r3, r3, #25
 8008e92:	d407      	bmi.n	8008ea4 <_format_int+0x68>
 8008e94:	466b      	mov	r3, sp
 8008e96:	2120      	movs	r1, #32
 8008e98:	68b2      	ldr	r2, [r6, #8]
 8008e9a:	1b28      	subs	r0, r5, r4
 8008e9c:	4290      	cmp	r0, r2
 8008e9e:	da01      	bge.n	8008ea4 <_format_int+0x68>
 8008ea0:	429c      	cmp	r4, r3
 8008ea2:	d826      	bhi.n	8008ef2 <_format_int+0xb6>
 8008ea4:	1b2d      	subs	r5, r5, r4
 8008ea6:	3401      	adds	r4, #1
 8008ea8:	ab10      	add	r3, sp, #64	; 0x40
 8008eaa:	429c      	cmp	r4, r3
 8008eac:	d324      	bcc.n	8008ef8 <_format_int+0xbc>
 8008eae:	68b3      	ldr	r3, [r6, #8]
 8008eb0:	42ab      	cmp	r3, r5
 8008eb2:	dc27      	bgt.n	8008f04 <_format_int+0xc8>
 8008eb4:	b011      	add	sp, #68	; 0x44
 8008eb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008eba:	462c      	mov	r4, r5
 8008ebc:	46e9      	mov	r9, sp
 8008ebe:	4638      	mov	r0, r7
 8008ec0:	4641      	mov	r1, r8
 8008ec2:	220a      	movs	r2, #10
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	f7ff f807 	bl	8007ed8 <__aeabi_uldivmod>
 8008eca:	3230      	adds	r2, #48	; 0x30
 8008ecc:	f804 2901 	strb.w	r2, [r4], #-1
 8008ed0:	463a      	mov	r2, r7
 8008ed2:	4643      	mov	r3, r8
 8008ed4:	2a0a      	cmp	r2, #10
 8008ed6:	f173 0300 	sbcs.w	r3, r3, #0
 8008eda:	4607      	mov	r7, r0
 8008edc:	4688      	mov	r8, r1
 8008ede:	d3bd      	bcc.n	8008e5c <_format_int+0x20>
 8008ee0:	454c      	cmp	r4, r9
 8008ee2:	d1ec      	bne.n	8008ebe <_format_int+0x82>
 8008ee4:	e7ba      	b.n	8008e5c <_format_int+0x20>
 8008ee6:	f804 0901 	strb.w	r0, [r4], #-1
 8008eea:	e7bd      	b.n	8008e68 <_format_int+0x2c>
 8008eec:	f804 0901 	strb.w	r0, [r4], #-1
 8008ef0:	e7c4      	b.n	8008e7c <_format_int+0x40>
 8008ef2:	f804 1901 	strb.w	r1, [r4], #-1
 8008ef6:	e7d0      	b.n	8008e9a <_format_int+0x5e>
 8008ef8:	4630      	mov	r0, r6
 8008efa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008efe:	f7ff ff87 	bl	8008e10 <_xputch>
 8008f02:	e7d1      	b.n	8008ea8 <_format_int+0x6c>
 8008f04:	2120      	movs	r1, #32
 8008f06:	4630      	mov	r0, r6
 8008f08:	f7ff ff82 	bl	8008e10 <_xputch>
 8008f0c:	3501      	adds	r5, #1
 8008f0e:	e7ce      	b.n	8008eae <_format_int+0x72>

08008f10 <_format_hex>:
 8008f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f12:	b091      	sub	sp, #68	; 0x44
 8008f14:	4606      	mov	r6, r0
 8008f16:	6804      	ldr	r4, [r0, #0]
 8008f18:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 8008f1c:	bb61      	cbnz	r1, 8008f78 <_format_hex+0x68>
 8008f1e:	2330      	movs	r3, #48	; 0x30
 8008f20:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8008f24:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8008f28:	07e5      	lsls	r5, r4, #31
 8008f2a:	d507      	bpl.n	8008f3c <_format_hex+0x2c>
 8008f2c:	4669      	mov	r1, sp
 8008f2e:	2530      	movs	r5, #48	; 0x30
 8008f30:	6870      	ldr	r0, [r6, #4]
 8008f32:	1ad7      	subs	r7, r2, r3
 8008f34:	4287      	cmp	r7, r0
 8008f36:	da01      	bge.n	8008f3c <_format_hex+0x2c>
 8008f38:	428b      	cmp	r3, r1
 8008f3a:	d831      	bhi.n	8008fa0 <_format_hex+0x90>
 8008f3c:	06a0      	lsls	r0, r4, #26
 8008f3e:	d507      	bpl.n	8008f50 <_format_hex+0x40>
 8008f40:	4669      	mov	r1, sp
 8008f42:	2530      	movs	r5, #48	; 0x30
 8008f44:	68b0      	ldr	r0, [r6, #8]
 8008f46:	1ad7      	subs	r7, r2, r3
 8008f48:	4287      	cmp	r7, r0
 8008f4a:	da01      	bge.n	8008f50 <_format_hex+0x40>
 8008f4c:	428b      	cmp	r3, r1
 8008f4e:	d82a      	bhi.n	8008fa6 <_format_hex+0x96>
 8008f50:	0661      	lsls	r1, r4, #25
 8008f52:	d407      	bmi.n	8008f64 <_format_hex+0x54>
 8008f54:	4669      	mov	r1, sp
 8008f56:	2420      	movs	r4, #32
 8008f58:	68b0      	ldr	r0, [r6, #8]
 8008f5a:	1ad5      	subs	r5, r2, r3
 8008f5c:	4285      	cmp	r5, r0
 8008f5e:	da01      	bge.n	8008f64 <_format_hex+0x54>
 8008f60:	428b      	cmp	r3, r1
 8008f62:	d823      	bhi.n	8008fac <_format_hex+0x9c>
 8008f64:	1ad5      	subs	r5, r2, r3
 8008f66:	1c5c      	adds	r4, r3, #1
 8008f68:	ab10      	add	r3, sp, #64	; 0x40
 8008f6a:	429c      	cmp	r4, r3
 8008f6c:	d321      	bcc.n	8008fb2 <_format_hex+0xa2>
 8008f6e:	68b3      	ldr	r3, [r6, #8]
 8008f70:	429d      	cmp	r5, r3
 8008f72:	db24      	blt.n	8008fbe <_format_hex+0xae>
 8008f74:	b011      	add	sp, #68	; 0x44
 8008f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f78:	f014 0f02 	tst.w	r4, #2
 8008f7c:	bf0c      	ite	eq
 8008f7e:	2757      	moveq	r7, #87	; 0x57
 8008f80:	2737      	movne	r7, #55	; 0x37
 8008f82:	4613      	mov	r3, r2
 8008f84:	466d      	mov	r5, sp
 8008f86:	f001 000f 	and.w	r0, r1, #15
 8008f8a:	2809      	cmp	r0, #9
 8008f8c:	bf94      	ite	ls
 8008f8e:	3030      	addls	r0, #48	; 0x30
 8008f90:	19c0      	addhi	r0, r0, r7
 8008f92:	0909      	lsrs	r1, r1, #4
 8008f94:	f803 0901 	strb.w	r0, [r3], #-1
 8008f98:	d0c6      	beq.n	8008f28 <_format_hex+0x18>
 8008f9a:	42ab      	cmp	r3, r5
 8008f9c:	d1f3      	bne.n	8008f86 <_format_hex+0x76>
 8008f9e:	e7c3      	b.n	8008f28 <_format_hex+0x18>
 8008fa0:	f803 5901 	strb.w	r5, [r3], #-1
 8008fa4:	e7c5      	b.n	8008f32 <_format_hex+0x22>
 8008fa6:	f803 5901 	strb.w	r5, [r3], #-1
 8008faa:	e7cc      	b.n	8008f46 <_format_hex+0x36>
 8008fac:	f803 4901 	strb.w	r4, [r3], #-1
 8008fb0:	e7d3      	b.n	8008f5a <_format_hex+0x4a>
 8008fb2:	4630      	mov	r0, r6
 8008fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fb8:	f7ff ff2a 	bl	8008e10 <_xputch>
 8008fbc:	e7d4      	b.n	8008f68 <_format_hex+0x58>
 8008fbe:	2120      	movs	r1, #32
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	f7ff ff25 	bl	8008e10 <_xputch>
 8008fc6:	3501      	adds	r5, #1
 8008fc8:	e7d1      	b.n	8008f6e <_format_hex+0x5e>
	...

08008fcc <_vprintf>:
 8008fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd0:	4614      	mov	r4, r2
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	f04f 0800 	mov.w	r8, #0
 8008fda:	b099      	sub	sp, #100	; 0x64
 8008fdc:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8008fe0:	af08      	add	r7, sp, #32
 8008fe2:	7819      	ldrb	r1, [r3, #0]
 8008fe4:	b919      	cbnz	r1, 8008fee <_vprintf+0x22>
 8008fe6:	9806      	ldr	r0, [sp, #24]
 8008fe8:	b019      	add	sp, #100	; 0x64
 8008fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fee:	2925      	cmp	r1, #37	; 0x25
 8008ff0:	f103 0601 	add.w	r6, r3, #1
 8008ff4:	d004      	beq.n	8009000 <_vprintf+0x34>
 8008ff6:	a803      	add	r0, sp, #12
 8008ff8:	f7ff ff0a 	bl	8008e10 <_xputch>
 8008ffc:	4633      	mov	r3, r6
 8008ffe:	e7f0      	b.n	8008fe2 <_vprintf+0x16>
 8009000:	2200      	movs	r2, #0
 8009002:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8009006:	9205      	str	r2, [sp, #20]
 8009008:	785a      	ldrb	r2, [r3, #1]
 800900a:	2a30      	cmp	r2, #48	; 0x30
 800900c:	d129      	bne.n	8009062 <_vprintf+0x96>
 800900e:	2220      	movs	r2, #32
 8009010:	9203      	str	r2, [sp, #12]
 8009012:	1c9e      	adds	r6, r3, #2
 8009014:	2200      	movs	r2, #0
 8009016:	4635      	mov	r5, r6
 8009018:	4613      	mov	r3, r2
 800901a:	f04f 0c0a 	mov.w	ip, #10
 800901e:	7829      	ldrb	r1, [r5, #0]
 8009020:	462e      	mov	r6, r5
 8009022:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8009026:	2809      	cmp	r0, #9
 8009028:	f105 0501 	add.w	r5, r5, #1
 800902c:	d91d      	bls.n	800906a <_vprintf+0x9e>
 800902e:	b12a      	cbz	r2, 800903c <_vprintf+0x70>
 8009030:	9305      	str	r3, [sp, #20]
 8009032:	b11b      	cbz	r3, 800903c <_vprintf+0x70>
 8009034:	9b03      	ldr	r3, [sp, #12]
 8009036:	f043 0310 	orr.w	r3, r3, #16
 800903a:	9303      	str	r3, [sp, #12]
 800903c:	292e      	cmp	r1, #46	; 0x2e
 800903e:	d123      	bne.n	8009088 <_vprintf+0xbc>
 8009040:	7873      	ldrb	r3, [r6, #1]
 8009042:	2b2a      	cmp	r3, #42	; 0x2a
 8009044:	d015      	beq.n	8009072 <_vprintf+0xa6>
 8009046:	2100      	movs	r1, #0
 8009048:	250a      	movs	r5, #10
 800904a:	460a      	mov	r2, r1
 800904c:	1c70      	adds	r0, r6, #1
 800904e:	7803      	ldrb	r3, [r0, #0]
 8009050:	4606      	mov	r6, r0
 8009052:	3b30      	subs	r3, #48	; 0x30
 8009054:	2b09      	cmp	r3, #9
 8009056:	f100 0001 	add.w	r0, r0, #1
 800905a:	d959      	bls.n	8009110 <_vprintf+0x144>
 800905c:	b181      	cbz	r1, 8009080 <_vprintf+0xb4>
 800905e:	9204      	str	r2, [sp, #16]
 8009060:	e00e      	b.n	8009080 <_vprintf+0xb4>
 8009062:	2a2d      	cmp	r2, #45	; 0x2d
 8009064:	d1d6      	bne.n	8009014 <_vprintf+0x48>
 8009066:	2240      	movs	r2, #64	; 0x40
 8009068:	e7d2      	b.n	8009010 <_vprintf+0x44>
 800906a:	2201      	movs	r2, #1
 800906c:	fb0c 0303 	mla	r3, ip, r3, r0
 8009070:	e7d5      	b.n	800901e <_vprintf+0x52>
 8009072:	f854 3b04 	ldr.w	r3, [r4], #4
 8009076:	3602      	adds	r6, #2
 8009078:	2b00      	cmp	r3, #0
 800907a:	bfb8      	it	lt
 800907c:	425b      	neglt	r3, r3
 800907e:	9304      	str	r3, [sp, #16]
 8009080:	9b03      	ldr	r3, [sp, #12]
 8009082:	f043 0301 	orr.w	r3, r3, #1
 8009086:	9303      	str	r3, [sp, #12]
 8009088:	7833      	ldrb	r3, [r6, #0]
 800908a:	2b6c      	cmp	r3, #108	; 0x6c
 800908c:	bf04      	itt	eq
 800908e:	9b03      	ldreq	r3, [sp, #12]
 8009090:	3601      	addeq	r6, #1
 8009092:	7831      	ldrb	r1, [r6, #0]
 8009094:	bf04      	itt	eq
 8009096:	f043 0304 	orreq.w	r3, r3, #4
 800909a:	9303      	streq	r3, [sp, #12]
 800909c:	2958      	cmp	r1, #88	; 0x58
 800909e:	f000 8171 	beq.w	8009384 <_vprintf+0x3b8>
 80090a2:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 80090a6:	b2da      	uxtb	r2, r3
 80090a8:	2a15      	cmp	r2, #21
 80090aa:	d8a4      	bhi.n	8008ff6 <_vprintf+0x2a>
 80090ac:	2b15      	cmp	r3, #21
 80090ae:	d8a2      	bhi.n	8008ff6 <_vprintf+0x2a>
 80090b0:	a201      	add	r2, pc, #4	; (adr r2, 80090b8 <_vprintf+0xec>)
 80090b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b6:	bf00      	nop
 80090b8:	08009119 	stmdaeq	r0, {r0, r3, r4, r8, ip, pc}
 80090bc:	0800912b 	stmdaeq	r0, {r0, r1, r3, r5, r8, ip, pc}
 80090c0:	08008ff7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090c4:	08009161 	stmdaeq	r0, {r0, r5, r6, r8, ip, pc}
 80090c8:	08008ff7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090cc:	08008ff7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d0:	0800912b 	stmdaeq	r0, {r0, r1, r3, r5, r8, ip, pc}
 80090d4:	08008ff7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d8:	08008ff7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090dc:	08008ff7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e0:	08008ff7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e4:	08008ff7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e8:	08008ff7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ec:	080092c7 	stmdaeq	r0, {r0, r1, r2, r6, r7, r9, ip, pc}
 80090f0:	08008ff7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f4:	08008ff7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f8:	080092ef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, r9, ip, pc}
 80090fc:	08008ff7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009100:	08009365 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, ip, pc}
 8009104:	08008ff7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009108:	08008ff7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800910c:	0800938d 	stmdaeq	r0, {r0, r2, r3, r7, r8, r9, ip, pc}
 8009110:	2101      	movs	r1, #1
 8009112:	fb05 3202 	mla	r2, r5, r2, r3
 8009116:	e79a      	b.n	800904e <_vprintf+0x82>
 8009118:	4625      	mov	r5, r4
 800911a:	a803      	add	r0, sp, #12
 800911c:	f855 1b04 	ldr.w	r1, [r5], #4
 8009120:	f7ff fe76 	bl	8008e10 <_xputch>
 8009124:	462c      	mov	r4, r5
 8009126:	3601      	adds	r6, #1
 8009128:	e768      	b.n	8008ffc <_vprintf+0x30>
 800912a:	9903      	ldr	r1, [sp, #12]
 800912c:	074d      	lsls	r5, r1, #29
 800912e:	bf51      	iteee	pl
 8009130:	4625      	movpl	r5, r4
 8009132:	3407      	addmi	r4, #7
 8009134:	f024 0407 	bicmi.w	r4, r4, #7
 8009138:	4625      	movmi	r5, r4
 800913a:	bf55      	itete	pl
 800913c:	f855 2b04 	ldrpl.w	r2, [r5], #4
 8009140:	6863      	ldrmi	r3, [r4, #4]
 8009142:	17d3      	asrpl	r3, r2, #31
 8009144:	f855 2b08 	ldrmi.w	r2, [r5], #8
 8009148:	2b00      	cmp	r3, #0
 800914a:	da05      	bge.n	8009158 <_vprintf+0x18c>
 800914c:	f041 0108 	orr.w	r1, r1, #8
 8009150:	4252      	negs	r2, r2
 8009152:	9103      	str	r1, [sp, #12]
 8009154:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8009158:	a803      	add	r0, sp, #12
 800915a:	f7ff fe6f 	bl	8008e3c <_format_int>
 800915e:	e7e1      	b.n	8009124 <_vprintf+0x158>
 8009160:	3407      	adds	r4, #7
 8009162:	f024 0507 	bic.w	r5, r4, #7
 8009166:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800916a:	f7fe fcbb 	bl	8007ae4 <__aeabi_d2f>
 800916e:	9b03      	ldr	r3, [sp, #12]
 8009170:	4641      	mov	r1, r8
 8009172:	07dc      	lsls	r4, r3, #31
 8009174:	bf54      	ite	pl
 8009176:	f04f 0a06 	movpl.w	sl, #6
 800917a:	f8dd a010 	ldrmi.w	sl, [sp, #16]
 800917e:	4681      	mov	r9, r0
 8009180:	f7fe fe5c 	bl	8007e3c <__aeabi_fcmplt>
 8009184:	2800      	cmp	r0, #0
 8009186:	d063      	beq.n	8009250 <_vprintf+0x284>
 8009188:	232d      	movs	r3, #45	; 0x2d
 800918a:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000
 800918e:	f88d 3020 	strb.w	r3, [sp, #32]
 8009192:	f10d 0b21 	add.w	fp, sp, #33	; 0x21
 8009196:	4648      	mov	r0, r9
 8009198:	f7fe fe78 	bl	8007e8c <__aeabi_f2iz>
 800919c:	4659      	mov	r1, fp
 800919e:	2200      	movs	r2, #0
 80091a0:	4604      	mov	r4, r0
 80091a2:	f7ff fdfb 	bl	8008d9c <_itostr>
 80091a6:	eb0b 0200 	add.w	r2, fp, r0
 80091aa:	e9cd 2000 	strd	r2, r0, [sp]
 80091ae:	4620      	mov	r0, r4
 80091b0:	f7fe fda2 	bl	8007cf8 <__aeabi_i2f>
 80091b4:	4601      	mov	r1, r0
 80091b6:	4648      	mov	r0, r9
 80091b8:	f7fe fce8 	bl	8007b8c <__aeabi_fsub>
 80091bc:	222e      	movs	r2, #46	; 0x2e
 80091be:	4601      	mov	r1, r0
 80091c0:	200a      	movs	r0, #10
 80091c2:	9b00      	ldr	r3, [sp, #0]
 80091c4:	f10a 0901 	add.w	r9, sl, #1
 80091c8:	1c5c      	adds	r4, r3, #1
 80091ca:	9b01      	ldr	r3, [sp, #4]
 80091cc:	f80b 2003 	strb.w	r2, [fp, r3]
 80091d0:	4603      	mov	r3, r0
 80091d2:	f1ba 0f00 	cmp.w	sl, #0
 80091d6:	dc3d      	bgt.n	8009254 <_vprintf+0x288>
 80091d8:	9100      	str	r1, [sp, #0]
 80091da:	f7fe fd8d 	bl	8007cf8 <__aeabi_i2f>
 80091de:	9900      	ldr	r1, [sp, #0]
 80091e0:	f7ff f850 	bl	8008284 <__aeabi_fmul>
 80091e4:	f7fe fe52 	bl	8007e8c <__aeabi_f2iz>
 80091e8:	464a      	mov	r2, r9
 80091ea:	4621      	mov	r1, r4
 80091ec:	f7ff fdd6 	bl	8008d9c <_itostr>
 80091f0:	4404      	add	r4, r0
 80091f2:	1be0      	subs	r0, r4, r7
 80091f4:	1e44      	subs	r4, r0, #1
 80091f6:	5d3b      	ldrb	r3, [r7, r4]
 80091f8:	193a      	adds	r2, r7, r4
 80091fa:	2b34      	cmp	r3, #52	; 0x34
 80091fc:	d910      	bls.n	8009220 <_vprintf+0x254>
 80091fe:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8009202:	1e53      	subs	r3, r2, #1
 8009204:	292e      	cmp	r1, #46	; 0x2e
 8009206:	d02c      	beq.n	8009262 <_vprintf+0x296>
 8009208:	469c      	mov	ip, r3
 800920a:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800920e:	4663      	mov	r3, ip
 8009210:	f81c 1901 	ldrb.w	r1, [ip], #-1
 8009214:	2939      	cmp	r1, #57	; 0x39
 8009216:	d021      	beq.n	800925c <_vprintf+0x290>
 8009218:	292e      	cmp	r1, #46	; 0x2e
 800921a:	d022      	beq.n	8009262 <_vprintf+0x296>
 800921c:	3101      	adds	r1, #1
 800921e:	7019      	strb	r1, [r3, #0]
 8009220:	f104 0360 	add.w	r3, r4, #96	; 0x60
 8009224:	446b      	add	r3, sp
 8009226:	f813 3c41 	ldrb.w	r3, [r3, #-65]
 800922a:	2b2e      	cmp	r3, #46	; 0x2e
 800922c:	bf08      	it	eq
 800922e:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 8009232:	46a1      	mov	r9, r4
 8009234:	9b05      	ldr	r3, [sp, #20]
 8009236:	4599      	cmp	r9, r3
 8009238:	db3e      	blt.n	80092b8 <_vprintf+0x2ec>
 800923a:	46b9      	mov	r9, r7
 800923c:	2c00      	cmp	r4, #0
 800923e:	f77f af71 	ble.w	8009124 <_vprintf+0x158>
 8009242:	f819 1b01 	ldrb.w	r1, [r9], #1
 8009246:	a803      	add	r0, sp, #12
 8009248:	f7ff fde2 	bl	8008e10 <_xputch>
 800924c:	3c01      	subs	r4, #1
 800924e:	e7f5      	b.n	800923c <_vprintf+0x270>
 8009250:	46bb      	mov	fp, r7
 8009252:	e7a0      	b.n	8009196 <_vprintf+0x1ca>
 8009254:	4358      	muls	r0, r3
 8009256:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800925a:	e7ba      	b.n	80091d2 <_vprintf+0x206>
 800925c:	f88c e001 	strb.w	lr, [ip, #1]
 8009260:	e7d5      	b.n	800920e <_vprintf+0x242>
 8009262:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8009266:	3b01      	subs	r3, #1
 8009268:	7819      	ldrb	r1, [r3, #0]
 800926a:	2939      	cmp	r1, #57	; 0x39
 800926c:	d112      	bne.n	8009294 <_vprintf+0x2c8>
 800926e:	42bb      	cmp	r3, r7
 8009270:	d20d      	bcs.n	800928e <_vprintf+0x2c2>
 8009272:	1c5c      	adds	r4, r3, #1
 8009274:	1c99      	adds	r1, r3, #2
 8009276:	428c      	cmp	r4, r1
 8009278:	eba2 0203 	sub.w	r2, r2, r3
 800927c:	d913      	bls.n	80092a6 <_vprintf+0x2da>
 800927e:	3201      	adds	r2, #1
 8009280:	441a      	add	r2, r3
 8009282:	42a2      	cmp	r2, r4
 8009284:	d10b      	bne.n	800929e <_vprintf+0x2d2>
 8009286:	2231      	movs	r2, #49	; 0x31
 8009288:	4604      	mov	r4, r0
 800928a:	705a      	strb	r2, [r3, #1]
 800928c:	e7c8      	b.n	8009220 <_vprintf+0x254>
 800928e:	f803 c901 	strb.w	ip, [r3], #-1
 8009292:	e7e9      	b.n	8009268 <_vprintf+0x29c>
 8009294:	42bb      	cmp	r3, r7
 8009296:	d3ec      	bcc.n	8009272 <_vprintf+0x2a6>
 8009298:	292d      	cmp	r1, #45	; 0x2d
 800929a:	d0ea      	beq.n	8009272 <_vprintf+0x2a6>
 800929c:	e7be      	b.n	800921c <_vprintf+0x250>
 800929e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092a2:	7021      	strb	r1, [r4, #0]
 80092a4:	e7ed      	b.n	8009282 <_vprintf+0x2b6>
 80092a6:	4414      	add	r4, r2
 80092a8:	440a      	add	r2, r1
 80092aa:	428a      	cmp	r2, r1
 80092ac:	d0eb      	beq.n	8009286 <_vprintf+0x2ba>
 80092ae:	f814 cd01 	ldrb.w	ip, [r4, #-1]!
 80092b2:	f802 cd01 	strb.w	ip, [r2, #-1]!
 80092b6:	e7f8      	b.n	80092aa <_vprintf+0x2de>
 80092b8:	2120      	movs	r1, #32
 80092ba:	a803      	add	r0, sp, #12
 80092bc:	f7ff fda8 	bl	8008e10 <_xputch>
 80092c0:	f109 0901 	add.w	r9, r9, #1
 80092c4:	e7b6      	b.n	8009234 <_vprintf+0x268>
 80092c6:	2308      	movs	r3, #8
 80092c8:	4625      	mov	r5, r4
 80092ca:	9305      	str	r3, [sp, #20]
 80092cc:	2320      	movs	r3, #32
 80092ce:	2130      	movs	r1, #48	; 0x30
 80092d0:	f855 4b04 	ldr.w	r4, [r5], #4
 80092d4:	a803      	add	r0, sp, #12
 80092d6:	9303      	str	r3, [sp, #12]
 80092d8:	f7ff fd9a 	bl	8008e10 <_xputch>
 80092dc:	2178      	movs	r1, #120	; 0x78
 80092de:	a803      	add	r0, sp, #12
 80092e0:	f7ff fd96 	bl	8008e10 <_xputch>
 80092e4:	4621      	mov	r1, r4
 80092e6:	a803      	add	r0, sp, #12
 80092e8:	f7ff fe12 	bl	8008f10 <_format_hex>
 80092ec:	e71a      	b.n	8009124 <_vprintf+0x158>
 80092ee:	4625      	mov	r5, r4
 80092f0:	2400      	movs	r4, #0
 80092f2:	f855 9b04 	ldr.w	r9, [r5], #4
 80092f6:	f819 3004 	ldrb.w	r3, [r9, r4]
 80092fa:	b993      	cbnz	r3, 8009322 <_vprintf+0x356>
 80092fc:	9b03      	ldr	r3, [sp, #12]
 80092fe:	07d9      	lsls	r1, r3, #31
 8009300:	d503      	bpl.n	800930a <_vprintf+0x33e>
 8009302:	9b04      	ldr	r3, [sp, #16]
 8009304:	429c      	cmp	r4, r3
 8009306:	bfa8      	it	ge
 8009308:	461c      	movge	r4, r3
 800930a:	9b03      	ldr	r3, [sp, #12]
 800930c:	f104 0a01 	add.w	sl, r4, #1
 8009310:	065a      	lsls	r2, r3, #25
 8009312:	d403      	bmi.n	800931c <_vprintf+0x350>
 8009314:	9b05      	ldr	r3, [sp, #20]
 8009316:	429c      	cmp	r4, r3
 8009318:	db05      	blt.n	8009326 <_vprintf+0x35a>
 800931a:	4654      	mov	r4, sl
 800931c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8009320:	e00d      	b.n	800933e <_vprintf+0x372>
 8009322:	3401      	adds	r4, #1
 8009324:	e7e7      	b.n	80092f6 <_vprintf+0x32a>
 8009326:	2120      	movs	r1, #32
 8009328:	a803      	add	r0, sp, #12
 800932a:	f7ff fd71 	bl	8008e10 <_xputch>
 800932e:	4654      	mov	r4, sl
 8009330:	e7eb      	b.n	800930a <_vprintf+0x33e>
 8009332:	a803      	add	r0, sp, #12
 8009334:	f7ff fd6c 	bl	8008e10 <_xputch>
 8009338:	9b04      	ldr	r3, [sp, #16]
 800933a:	3b01      	subs	r3, #1
 800933c:	9304      	str	r3, [sp, #16]
 800933e:	9b03      	ldr	r3, [sp, #12]
 8009340:	07db      	lsls	r3, r3, #31
 8009342:	d501      	bpl.n	8009348 <_vprintf+0x37c>
 8009344:	9b04      	ldr	r3, [sp, #16]
 8009346:	b11b      	cbz	r3, 8009350 <_vprintf+0x384>
 8009348:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 800934c:	2900      	cmp	r1, #0
 800934e:	d1f0      	bne.n	8009332 <_vprintf+0x366>
 8009350:	9b05      	ldr	r3, [sp, #20]
 8009352:	429c      	cmp	r4, r3
 8009354:	f6bf aee6 	bge.w	8009124 <_vprintf+0x158>
 8009358:	2120      	movs	r1, #32
 800935a:	a803      	add	r0, sp, #12
 800935c:	f7ff fd58 	bl	8008e10 <_xputch>
 8009360:	3401      	adds	r4, #1
 8009362:	e7f5      	b.n	8009350 <_vprintf+0x384>
 8009364:	9b03      	ldr	r3, [sp, #12]
 8009366:	f013 0304 	ands.w	r3, r3, #4
 800936a:	bf1d      	ittte	ne
 800936c:	3407      	addne	r4, #7
 800936e:	f024 0407 	bicne.w	r4, r4, #7
 8009372:	4625      	movne	r5, r4
 8009374:	4625      	moveq	r5, r4
 8009376:	bf1a      	itte	ne
 8009378:	f855 2b08 	ldrne.w	r2, [r5], #8
 800937c:	6863      	ldrne	r3, [r4, #4]
 800937e:	f855 2b04 	ldreq.w	r2, [r5], #4
 8009382:	e6e9      	b.n	8009158 <_vprintf+0x18c>
 8009384:	9b03      	ldr	r3, [sp, #12]
 8009386:	f043 0302 	orr.w	r3, r3, #2
 800938a:	9303      	str	r3, [sp, #12]
 800938c:	4625      	mov	r5, r4
 800938e:	f855 1b04 	ldr.w	r1, [r5], #4
 8009392:	e7a8      	b.n	80092e6 <_vprintf+0x31a>

08009394 <printf>:
 8009394:	b40f      	push	{r0, r1, r2, r3}
 8009396:	b507      	push	{r0, r1, r2, lr}
 8009398:	aa04      	add	r2, sp, #16
 800939a:	f852 1b04 	ldr.w	r1, [r2], #4
 800939e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80093a2:	9201      	str	r2, [sp, #4]
 80093a4:	f7ff fe12 	bl	8008fcc <_vprintf>
 80093a8:	b003      	add	sp, #12
 80093aa:	f85d eb04 	ldr.w	lr, [sp], #4
 80093ae:	b004      	add	sp, #16
 80093b0:	4770      	bx	lr
	...

080093b4 <sprintf>:
 80093b4:	b40e      	push	{r1, r2, r3}
 80093b6:	b517      	push	{r0, r1, r2, r4, lr}
 80093b8:	4c09      	ldr	r4, [pc, #36]	; (80093e0 <sprintf+0x2c>)
 80093ba:	aa05      	add	r2, sp, #20
 80093bc:	f852 1b04 	ldr.w	r1, [r2], #4
 80093c0:	6020      	str	r0, [r4, #0]
 80093c2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80093c6:	9201      	str	r2, [sp, #4]
 80093c8:	f7ff fe00 	bl	8008fcc <_vprintf>
 80093cc:	2300      	movs	r3, #0
 80093ce:	6822      	ldr	r2, [r4, #0]
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	7013      	strb	r3, [r2, #0]
 80093d4:	b003      	add	sp, #12
 80093d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093da:	b003      	add	sp, #12
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop
 80093e0:	200000e8 	andcs	r0, r0, r8, ror #1

080093e4 <snprintf>:
 80093e4:	b40c      	push	{r2, r3}
 80093e6:	460b      	mov	r3, r1
 80093e8:	b513      	push	{r0, r1, r4, lr}
 80093ea:	4c09      	ldr	r4, [pc, #36]	; (8009410 <snprintf+0x2c>)
 80093ec:	aa04      	add	r2, sp, #16
 80093ee:	f852 1b04 	ldr.w	r1, [r2], #4
 80093f2:	6020      	str	r0, [r4, #0]
 80093f4:	4618      	mov	r0, r3
 80093f6:	9201      	str	r2, [sp, #4]
 80093f8:	f7ff fde8 	bl	8008fcc <_vprintf>
 80093fc:	2300      	movs	r3, #0
 80093fe:	6822      	ldr	r2, [r4, #0]
 8009400:	6023      	str	r3, [r4, #0]
 8009402:	7013      	strb	r3, [r2, #0]
 8009404:	b002      	add	sp, #8
 8009406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800940a:	b002      	add	sp, #8
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	200000e8 	andcs	r0, r0, r8, ror #1

08009414 <vsnprintf>:
 8009414:	b538      	push	{r3, r4, r5, lr}
 8009416:	4605      	mov	r5, r0
 8009418:	4c05      	ldr	r4, [pc, #20]	; (8009430 <vsnprintf+0x1c>)
 800941a:	4608      	mov	r0, r1
 800941c:	4611      	mov	r1, r2
 800941e:	461a      	mov	r2, r3
 8009420:	6025      	str	r5, [r4, #0]
 8009422:	f7ff fdd3 	bl	8008fcc <_vprintf>
 8009426:	2300      	movs	r3, #0
 8009428:	6822      	ldr	r2, [r4, #0]
 800942a:	6023      	str	r3, [r4, #0]
 800942c:	7013      	strb	r3, [r2, #0]
 800942e:	bd38      	pop	{r3, r4, r5, pc}
 8009430:	200000e8 	andcs	r0, r0, r8, ror #1

08009434 <__udivmoddi4>:
 8009434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009438:	9e08      	ldr	r6, [sp, #32]
 800943a:	460d      	mov	r5, r1
 800943c:	4604      	mov	r4, r0
 800943e:	468e      	mov	lr, r1
 8009440:	2b00      	cmp	r3, #0
 8009442:	d14c      	bne.n	80094de <__udivmoddi4+0xaa>
 8009444:	428a      	cmp	r2, r1
 8009446:	4694      	mov	ip, r2
 8009448:	d967      	bls.n	800951a <__udivmoddi4+0xe6>
 800944a:	fab2 f382 	clz	r3, r2
 800944e:	b153      	cbz	r3, 8009466 <__udivmoddi4+0x32>
 8009450:	fa02 fc03 	lsl.w	ip, r2, r3
 8009454:	f1c3 0220 	rsb	r2, r3, #32
 8009458:	fa01 fe03 	lsl.w	lr, r1, r3
 800945c:	fa20 f202 	lsr.w	r2, r0, r2
 8009460:	ea42 0e0e 	orr.w	lr, r2, lr
 8009464:	409c      	lsls	r4, r3
 8009466:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800946a:	fbbe f1f7 	udiv	r1, lr, r7
 800946e:	fa1f f58c 	uxth.w	r5, ip
 8009472:	fb07 ee11 	mls	lr, r7, r1, lr
 8009476:	fb01 f005 	mul.w	r0, r1, r5
 800947a:	0c22      	lsrs	r2, r4, #16
 800947c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8009480:	4290      	cmp	r0, r2
 8009482:	d90a      	bls.n	800949a <__udivmoddi4+0x66>
 8009484:	eb1c 0202 	adds.w	r2, ip, r2
 8009488:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 800948c:	f080 8119 	bcs.w	80096c2 <__udivmoddi4+0x28e>
 8009490:	4290      	cmp	r0, r2
 8009492:	f240 8116 	bls.w	80096c2 <__udivmoddi4+0x28e>
 8009496:	3902      	subs	r1, #2
 8009498:	4462      	add	r2, ip
 800949a:	1a12      	subs	r2, r2, r0
 800949c:	fbb2 f0f7 	udiv	r0, r2, r7
 80094a0:	fb07 2210 	mls	r2, r7, r0, r2
 80094a4:	fb00 f505 	mul.w	r5, r0, r5
 80094a8:	b2a4      	uxth	r4, r4
 80094aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80094ae:	42a5      	cmp	r5, r4
 80094b0:	d90a      	bls.n	80094c8 <__udivmoddi4+0x94>
 80094b2:	eb1c 0404 	adds.w	r4, ip, r4
 80094b6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80094ba:	f080 8104 	bcs.w	80096c6 <__udivmoddi4+0x292>
 80094be:	42a5      	cmp	r5, r4
 80094c0:	f240 8101 	bls.w	80096c6 <__udivmoddi4+0x292>
 80094c4:	4464      	add	r4, ip
 80094c6:	3802      	subs	r0, #2
 80094c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80094cc:	2100      	movs	r1, #0
 80094ce:	1b64      	subs	r4, r4, r5
 80094d0:	b11e      	cbz	r6, 80094da <__udivmoddi4+0xa6>
 80094d2:	40dc      	lsrs	r4, r3
 80094d4:	2300      	movs	r3, #0
 80094d6:	e9c6 4300 	strd	r4, r3, [r6]
 80094da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094de:	428b      	cmp	r3, r1
 80094e0:	d908      	bls.n	80094f4 <__udivmoddi4+0xc0>
 80094e2:	2e00      	cmp	r6, #0
 80094e4:	f000 80ea 	beq.w	80096bc <__udivmoddi4+0x288>
 80094e8:	2100      	movs	r1, #0
 80094ea:	e9c6 0500 	strd	r0, r5, [r6]
 80094ee:	4608      	mov	r0, r1
 80094f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094f4:	fab3 f183 	clz	r1, r3
 80094f8:	2900      	cmp	r1, #0
 80094fa:	d148      	bne.n	800958e <__udivmoddi4+0x15a>
 80094fc:	42ab      	cmp	r3, r5
 80094fe:	d302      	bcc.n	8009506 <__udivmoddi4+0xd2>
 8009500:	4282      	cmp	r2, r0
 8009502:	f200 80f8 	bhi.w	80096f6 <__udivmoddi4+0x2c2>
 8009506:	1a84      	subs	r4, r0, r2
 8009508:	eb65 0203 	sbc.w	r2, r5, r3
 800950c:	2001      	movs	r0, #1
 800950e:	4696      	mov	lr, r2
 8009510:	2e00      	cmp	r6, #0
 8009512:	d0e2      	beq.n	80094da <__udivmoddi4+0xa6>
 8009514:	e9c6 4e00 	strd	r4, lr, [r6]
 8009518:	e7df      	b.n	80094da <__udivmoddi4+0xa6>
 800951a:	b902      	cbnz	r2, 800951e <__udivmoddi4+0xea>
 800951c:	deff      	udf	#255	; 0xff
 800951e:	fab2 f382 	clz	r3, r2
 8009522:	2b00      	cmp	r3, #0
 8009524:	f040 808e 	bne.w	8009644 <__udivmoddi4+0x210>
 8009528:	1a88      	subs	r0, r1, r2
 800952a:	2101      	movs	r1, #1
 800952c:	0c17      	lsrs	r7, r2, #16
 800952e:	fa1f fe82 	uxth.w	lr, r2
 8009532:	fbb0 f5f7 	udiv	r5, r0, r7
 8009536:	fb07 0015 	mls	r0, r7, r5, r0
 800953a:	0c22      	lsrs	r2, r4, #16
 800953c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8009540:	fb0e f005 	mul.w	r0, lr, r5
 8009544:	4290      	cmp	r0, r2
 8009546:	d908      	bls.n	800955a <__udivmoddi4+0x126>
 8009548:	eb1c 0202 	adds.w	r2, ip, r2
 800954c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8009550:	d202      	bcs.n	8009558 <__udivmoddi4+0x124>
 8009552:	4290      	cmp	r0, r2
 8009554:	f200 80cc 	bhi.w	80096f0 <__udivmoddi4+0x2bc>
 8009558:	4645      	mov	r5, r8
 800955a:	1a12      	subs	r2, r2, r0
 800955c:	fbb2 f0f7 	udiv	r0, r2, r7
 8009560:	fb07 2210 	mls	r2, r7, r0, r2
 8009564:	fb0e fe00 	mul.w	lr, lr, r0
 8009568:	b2a4      	uxth	r4, r4
 800956a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800956e:	45a6      	cmp	lr, r4
 8009570:	d908      	bls.n	8009584 <__udivmoddi4+0x150>
 8009572:	eb1c 0404 	adds.w	r4, ip, r4
 8009576:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800957a:	d202      	bcs.n	8009582 <__udivmoddi4+0x14e>
 800957c:	45a6      	cmp	lr, r4
 800957e:	f200 80b4 	bhi.w	80096ea <__udivmoddi4+0x2b6>
 8009582:	4610      	mov	r0, r2
 8009584:	eba4 040e 	sub.w	r4, r4, lr
 8009588:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800958c:	e7a0      	b.n	80094d0 <__udivmoddi4+0x9c>
 800958e:	f1c1 0720 	rsb	r7, r1, #32
 8009592:	408b      	lsls	r3, r1
 8009594:	fa22 fc07 	lsr.w	ip, r2, r7
 8009598:	ea4c 0c03 	orr.w	ip, ip, r3
 800959c:	fa25 fa07 	lsr.w	sl, r5, r7
 80095a0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80095a4:	fbba f8f9 	udiv	r8, sl, r9
 80095a8:	408d      	lsls	r5, r1
 80095aa:	fa20 f307 	lsr.w	r3, r0, r7
 80095ae:	fb09 aa18 	mls	sl, r9, r8, sl
 80095b2:	fa1f fe8c 	uxth.w	lr, ip
 80095b6:	432b      	orrs	r3, r5
 80095b8:	fa00 f501 	lsl.w	r5, r0, r1
 80095bc:	fb08 f00e 	mul.w	r0, r8, lr
 80095c0:	0c1c      	lsrs	r4, r3, #16
 80095c2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80095c6:	42a0      	cmp	r0, r4
 80095c8:	fa02 f201 	lsl.w	r2, r2, r1
 80095cc:	d90b      	bls.n	80095e6 <__udivmoddi4+0x1b2>
 80095ce:	eb1c 0404 	adds.w	r4, ip, r4
 80095d2:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80095d6:	f080 8086 	bcs.w	80096e6 <__udivmoddi4+0x2b2>
 80095da:	42a0      	cmp	r0, r4
 80095dc:	f240 8083 	bls.w	80096e6 <__udivmoddi4+0x2b2>
 80095e0:	f1a8 0802 	sub.w	r8, r8, #2
 80095e4:	4464      	add	r4, ip
 80095e6:	1a24      	subs	r4, r4, r0
 80095e8:	b298      	uxth	r0, r3
 80095ea:	fbb4 f3f9 	udiv	r3, r4, r9
 80095ee:	fb09 4413 	mls	r4, r9, r3, r4
 80095f2:	fb03 fe0e 	mul.w	lr, r3, lr
 80095f6:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80095fa:	45a6      	cmp	lr, r4
 80095fc:	d908      	bls.n	8009610 <__udivmoddi4+0x1dc>
 80095fe:	eb1c 0404 	adds.w	r4, ip, r4
 8009602:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8009606:	d26a      	bcs.n	80096de <__udivmoddi4+0x2aa>
 8009608:	45a6      	cmp	lr, r4
 800960a:	d968      	bls.n	80096de <__udivmoddi4+0x2aa>
 800960c:	3b02      	subs	r3, #2
 800960e:	4464      	add	r4, ip
 8009610:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8009614:	fba0 9302 	umull	r9, r3, r0, r2
 8009618:	eba4 040e 	sub.w	r4, r4, lr
 800961c:	429c      	cmp	r4, r3
 800961e:	46c8      	mov	r8, r9
 8009620:	469e      	mov	lr, r3
 8009622:	d354      	bcc.n	80096ce <__udivmoddi4+0x29a>
 8009624:	d051      	beq.n	80096ca <__udivmoddi4+0x296>
 8009626:	2e00      	cmp	r6, #0
 8009628:	d067      	beq.n	80096fa <__udivmoddi4+0x2c6>
 800962a:	ebb5 0308 	subs.w	r3, r5, r8
 800962e:	eb64 040e 	sbc.w	r4, r4, lr
 8009632:	40cb      	lsrs	r3, r1
 8009634:	fa04 f707 	lsl.w	r7, r4, r7
 8009638:	431f      	orrs	r7, r3
 800963a:	40cc      	lsrs	r4, r1
 800963c:	e9c6 7400 	strd	r7, r4, [r6]
 8009640:	2100      	movs	r1, #0
 8009642:	e74a      	b.n	80094da <__udivmoddi4+0xa6>
 8009644:	fa02 fc03 	lsl.w	ip, r2, r3
 8009648:	f1c3 0020 	rsb	r0, r3, #32
 800964c:	40c1      	lsrs	r1, r0
 800964e:	409d      	lsls	r5, r3
 8009650:	fa24 f000 	lsr.w	r0, r4, r0
 8009654:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8009658:	4328      	orrs	r0, r5
 800965a:	fbb1 f5f7 	udiv	r5, r1, r7
 800965e:	fb07 1115 	mls	r1, r7, r5, r1
 8009662:	fa1f fe8c 	uxth.w	lr, ip
 8009666:	0c02      	lsrs	r2, r0, #16
 8009668:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800966c:	fb05 f10e 	mul.w	r1, r5, lr
 8009670:	4291      	cmp	r1, r2
 8009672:	fa04 f403 	lsl.w	r4, r4, r3
 8009676:	d908      	bls.n	800968a <__udivmoddi4+0x256>
 8009678:	eb1c 0202 	adds.w	r2, ip, r2
 800967c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8009680:	d22f      	bcs.n	80096e2 <__udivmoddi4+0x2ae>
 8009682:	4291      	cmp	r1, r2
 8009684:	d92d      	bls.n	80096e2 <__udivmoddi4+0x2ae>
 8009686:	3d02      	subs	r5, #2
 8009688:	4462      	add	r2, ip
 800968a:	1a52      	subs	r2, r2, r1
 800968c:	fbb2 f1f7 	udiv	r1, r2, r7
 8009690:	fb07 2211 	mls	r2, r7, r1, r2
 8009694:	b280      	uxth	r0, r0
 8009696:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800969a:	fb01 f20e 	mul.w	r2, r1, lr
 800969e:	4282      	cmp	r2, r0
 80096a0:	d908      	bls.n	80096b4 <__udivmoddi4+0x280>
 80096a2:	eb1c 0000 	adds.w	r0, ip, r0
 80096a6:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80096aa:	d216      	bcs.n	80096da <__udivmoddi4+0x2a6>
 80096ac:	4282      	cmp	r2, r0
 80096ae:	d914      	bls.n	80096da <__udivmoddi4+0x2a6>
 80096b0:	3902      	subs	r1, #2
 80096b2:	4460      	add	r0, ip
 80096b4:	1a80      	subs	r0, r0, r2
 80096b6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80096ba:	e73a      	b.n	8009532 <__udivmoddi4+0xfe>
 80096bc:	4631      	mov	r1, r6
 80096be:	4630      	mov	r0, r6
 80096c0:	e70b      	b.n	80094da <__udivmoddi4+0xa6>
 80096c2:	4671      	mov	r1, lr
 80096c4:	e6e9      	b.n	800949a <__udivmoddi4+0x66>
 80096c6:	4610      	mov	r0, r2
 80096c8:	e6fe      	b.n	80094c8 <__udivmoddi4+0x94>
 80096ca:	454d      	cmp	r5, r9
 80096cc:	d2ab      	bcs.n	8009626 <__udivmoddi4+0x1f2>
 80096ce:	ebb9 0802 	subs.w	r8, r9, r2
 80096d2:	eb63 0e0c 	sbc.w	lr, r3, ip
 80096d6:	3801      	subs	r0, #1
 80096d8:	e7a5      	b.n	8009626 <__udivmoddi4+0x1f2>
 80096da:	4641      	mov	r1, r8
 80096dc:	e7ea      	b.n	80096b4 <__udivmoddi4+0x280>
 80096de:	4603      	mov	r3, r0
 80096e0:	e796      	b.n	8009610 <__udivmoddi4+0x1dc>
 80096e2:	4645      	mov	r5, r8
 80096e4:	e7d1      	b.n	800968a <__udivmoddi4+0x256>
 80096e6:	46d0      	mov	r8, sl
 80096e8:	e77d      	b.n	80095e6 <__udivmoddi4+0x1b2>
 80096ea:	4464      	add	r4, ip
 80096ec:	3802      	subs	r0, #2
 80096ee:	e749      	b.n	8009584 <__udivmoddi4+0x150>
 80096f0:	3d02      	subs	r5, #2
 80096f2:	4462      	add	r2, ip
 80096f4:	e731      	b.n	800955a <__udivmoddi4+0x126>
 80096f6:	4608      	mov	r0, r1
 80096f8:	e70a      	b.n	8009510 <__udivmoddi4+0xdc>
 80096fa:	4631      	mov	r1, r6
 80096fc:	e6ed      	b.n	80094da <__udivmoddi4+0xa6>
 80096fe:	bf00      	nop

08009700 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)>:
 8009700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009702:	4616      	mov	r6, r2
 8009704:	1d07      	adds	r7, r0, #4
 8009706:	4604      	mov	r4, r0
 8009708:	4613      	mov	r3, r2
 800970a:	4638      	mov	r0, r7
 800970c:	f10d 0206 	add.w	r2, sp, #6
 8009710:	460d      	mov	r5, r1
 8009712:	f000 fc11 	bl	8009f38 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 8009716:	b1b6      	cbz	r6, 8009746 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>
 8009718:	b1a8      	cbz	r0, 8009746 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>
 800971a:	4629      	mov	r1, r5
 800971c:	4638      	mov	r0, r7
 800971e:	f000 fd95 	bl	800a24c <ArtNetNode::GetPortProtocol(unsigned int) const>
 8009722:	2801      	cmp	r0, #1
 8009724:	d10f      	bne.n	8009746 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>
 8009726:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 800972a:	b123      	cbz	r3, 8009736 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x36>
 800972c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009730:	3301      	adds	r3, #1
 8009732:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009736:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800973a:	b933      	cbnz	r3, 800974a <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x4a>
 800973c:	2202      	movs	r2, #2
 800973e:	4629      	mov	r1, r5
 8009740:	4638      	mov	r0, r7
 8009742:	f000 fc3d 	bl	8009fc0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 8009746:	b003      	add	sp, #12
 8009748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800974a:	1e71      	subs	r1, r6, #1
 800974c:	424a      	negs	r2, r1
 800974e:	414a      	adcs	r2, r1
 8009750:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 8009754:	4629      	mov	r1, r5
 8009756:	f002 fc1d 	bl	800bf94 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 800975a:	e7f4      	b.n	8009746 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>

0800975c <ArtNet4Node::~ArtNet4Node()>:
 800975c:	b510      	push	{r4, lr}
 800975e:	4604      	mov	r4, r0
 8009760:	4b05      	ldr	r3, [pc, #20]	; (8009778 <ArtNet4Node::~ArtNet4Node()+0x1c>)
 8009762:	6003      	str	r3, [r0, #0]
 8009764:	f500 60f7 	add.w	r0, r0, #1976	; 0x7b8
 8009768:	f002 fb26 	bl	800bdb8 <E131Bridge::Stop()>
 800976c:	1d20      	adds	r0, r4, #4
 800976e:	f000 f957 	bl	8009a20 <ArtNetNode::Stop()>
 8009772:	4620      	mov	r0, r4
 8009774:	bd10      	pop	{r4, pc}
 8009776:	bf00      	nop
 8009778:	08016aac 	stmdaeq	r1, {r2, r3, r5, r7, r9, fp, sp, lr}

0800977c <ArtNet4Node::HandleAddress(unsigned char)>:
 800977c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800977e:	4605      	mov	r5, r0
 8009780:	460c      	mov	r4, r1
 8009782:	2600      	movs	r6, #0
 8009784:	1d07      	adds	r7, r0, #4
 8009786:	792b      	ldrb	r3, [r5, #4]
 8009788:	ebb6 0f83 	cmp.w	r6, r3, lsl #2
 800978c:	d30e      	bcc.n	80097ac <ArtNet4Node::HandleAddress(unsigned char)+0x30>
 800978e:	2c13      	cmp	r4, #19
 8009790:	f004 0603 	and.w	r6, r4, #3
 8009794:	d82f      	bhi.n	80097f6 <ArtNet4Node::HandleAddress(unsigned char)+0x7a>
 8009796:	2c0f      	cmp	r4, #15
 8009798:	d83e      	bhi.n	8009818 <ArtNet4Node::HandleAddress(unsigned char)+0x9c>
 800979a:	2c02      	cmp	r4, #2
 800979c:	d03a      	beq.n	8009814 <ArtNet4Node::HandleAddress(unsigned char)+0x98>
 800979e:	3c03      	subs	r4, #3
 80097a0:	2c01      	cmp	r4, #1
 80097a2:	d835      	bhi.n	8009810 <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 80097a4:	2300      	movs	r3, #0
 80097a6:	f885 37c0 	strb.w	r3, [r5, #1984]	; 0x7c0
 80097aa:	e031      	b.n	8009810 <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 80097ac:	2301      	movs	r3, #1
 80097ae:	4631      	mov	r1, r6
 80097b0:	4638      	mov	r0, r7
 80097b2:	f10d 0206 	add.w	r2, sp, #6
 80097b6:	f000 fbbf 	bl	8009f38 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 80097ba:	b150      	cbz	r0, 80097d2 <ArtNet4Node::HandleAddress(unsigned char)+0x56>
 80097bc:	f895 30a2 	ldrb.w	r3, [r5, #162]	; 0xa2
 80097c0:	b123      	cbz	r3, 80097cc <ArtNet4Node::HandleAddress(unsigned char)+0x50>
 80097c2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80097c6:	3301      	adds	r3, #1
 80097c8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80097cc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80097d0:	b90b      	cbnz	r3, 80097d6 <ArtNet4Node::HandleAddress(unsigned char)+0x5a>
 80097d2:	3601      	adds	r6, #1
 80097d4:	e7d7      	b.n	8009786 <ArtNet4Node::HandleAddress(unsigned char)+0xa>
 80097d6:	4631      	mov	r1, r6
 80097d8:	4638      	mov	r0, r7
 80097da:	f000 fd37 	bl	800a24c <ArtNetNode::GetPortProtocol(unsigned int) const>
 80097de:	4602      	mov	r2, r0
 80097e0:	2a01      	cmp	r2, #1
 80097e2:	bf18      	it	ne
 80097e4:	2202      	movne	r2, #2
 80097e6:	4631      	mov	r1, r6
 80097e8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80097ec:	f505 60f7 	add.w	r0, r5, #1976	; 0x7b8
 80097f0:	f002 fbd0 	bl	800bf94 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 80097f4:	e7ed      	b.n	80097d2 <ArtNet4Node::HandleAddress(unsigned char)+0x56>
 80097f6:	2c53      	cmp	r4, #83	; 0x53
 80097f8:	d806      	bhi.n	8009808 <ArtNet4Node::HandleAddress(unsigned char)+0x8c>
 80097fa:	2c4f      	cmp	r4, #79	; 0x4f
 80097fc:	d908      	bls.n	8009810 <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 80097fe:	2344      	movs	r3, #68	; 0x44
 8009800:	fb03 5606 	mla	r6, r3, r6, r5
 8009804:	2300      	movs	r3, #0
 8009806:	e00b      	b.n	8009820 <ArtNet4Node::HandleAddress(unsigned char)+0xa4>
 8009808:	3470      	adds	r4, #112	; 0x70
 800980a:	b2e4      	uxtb	r4, r4
 800980c:	2c03      	cmp	r4, #3
 800980e:	d90a      	bls.n	8009826 <ArtNet4Node::HandleAddress(unsigned char)+0xaa>
 8009810:	b003      	add	sp, #12
 8009812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009814:	2301      	movs	r3, #1
 8009816:	e7c6      	b.n	80097a6 <ArtNet4Node::HandleAddress(unsigned char)+0x2a>
 8009818:	2344      	movs	r3, #68	; 0x44
 800981a:	fb03 5606 	mla	r6, r3, r6, r5
 800981e:	2301      	movs	r3, #1
 8009820:	f8c6 3d04 	str.w	r3, [r6, #3332]	; 0xd04
 8009824:	e7f4      	b.n	8009810 <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 8009826:	4631      	mov	r1, r6
 8009828:	1d28      	adds	r0, r5, #4
 800982a:	f000 fd0f 	bl	800a24c <ArtNetNode::GetPortProtocol(unsigned int) const>
 800982e:	2801      	cmp	r0, #1
 8009830:	d1ee      	bne.n	8009810 <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 8009832:	4631      	mov	r1, r6
 8009834:	f505 60f7 	add.w	r0, r5, #1976	; 0x7b8
 8009838:	b003      	add	sp, #12
 800983a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800983e:	f002 bec3 	b.w	800c5c8 <E131Bridge::Clear(unsigned int)>

08009842 <ArtNet4Node::IsStatusChanged()>:
 8009842:	f500 60f7 	add.w	r0, r0, #1976	; 0x7b8
 8009846:	f002 beb7 	b.w	800c5b8 <E131Bridge::IsStatusChanged()>

0800984a <ArtNet4Node::~ArtNet4Node()>:
 800984a:	b510      	push	{r4, lr}
 800984c:	4604      	mov	r4, r0
 800984e:	f7ff ff85 	bl	800975c <ArtNet4Node::~ArtNet4Node()>
 8009852:	4620      	mov	r0, r4
 8009854:	f00a fee8 	bl	8014628 <operator delete(void*)>
 8009858:	4620      	mov	r0, r4
 800985a:	bd10      	pop	{r4, pc}

0800985c <ArtNet4Node::GetStatus(unsigned int)>:
 800985c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800985e:	2301      	movs	r3, #1
 8009860:	4604      	mov	r4, r0
 8009862:	f10d 0206 	add.w	r2, sp, #6
 8009866:	f500 60f7 	add.w	r0, r0, #1976	; 0x7b8
 800986a:	460d      	mov	r5, r1
 800986c:	f002 fc0a 	bl	800c084 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 8009870:	b160      	cbz	r0, 800988c <ArtNet4Node::GetStatus(unsigned int)+0x30>
 8009872:	2344      	movs	r3, #68	; 0x44
 8009874:	fb03 4405 	mla	r4, r3, r5, r4
 8009878:	f894 0d0a 	ldrb.w	r0, [r4, #3338]	; 0xd0a
 800987c:	f894 3d09 	ldrb.w	r3, [r4, #3337]	; 0xd09
 8009880:	01c0      	lsls	r0, r0, #7
 8009882:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 8009886:	f040 0001 	orr.w	r0, r0, #1
 800988a:	b2c0      	uxtb	r0, r0
 800988c:	b003      	add	sp, #12
 800988e:	bd30      	pop	{r4, r5, pc}

08009890 <ArtNet4Node::ArtNet4Node(unsigned char)>:
 8009890:	b538      	push	{r3, r4, r5, lr}
 8009892:	4604      	mov	r4, r0
 8009894:	1d05      	adds	r5, r0, #4
 8009896:	4628      	mov	r0, r5
 8009898:	f000 f960 	bl	8009b5c <ArtNetNode::ArtNetNode(unsigned char)>
 800989c:	4b05      	ldr	r3, [pc, #20]	; (80098b4 <ArtNet4Node::ArtNet4Node(unsigned char)+0x24>)
 800989e:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 80098a2:	6023      	str	r3, [r4, #0]
 80098a4:	f002 fad8 	bl	800be58 <E131Bridge::E131Bridge()>
 80098a8:	4628      	mov	r0, r5
 80098aa:	4621      	mov	r1, r4
 80098ac:	f000 f866 	bl	800997c <ArtNetNode::SetArtNet4Handler(ArtNet4Handler*)>
 80098b0:	4620      	mov	r0, r4
 80098b2:	bd38      	pop	{r3, r4, r5, pc}
 80098b4:	08016aac 	stmdaeq	r1, {r2, r3, r5, r7, r9, fp, sp, lr}

080098b8 <ArtNet4Node::Start()>:
 80098b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098ba:	4604      	mov	r4, r0
 80098bc:	2500      	movs	r5, #0
 80098be:	1d06      	adds	r6, r0, #4
 80098c0:	7923      	ldrb	r3, [r4, #4]
 80098c2:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
 80098c6:	d319      	bcc.n	80098fc <ArtNet4Node::Start()+0x44>
 80098c8:	f8d4 36d0 	ldr.w	r3, [r4, #1744]	; 0x6d0
 80098cc:	4630      	mov	r0, r6
 80098ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80098d2:	bf2c      	ite	cs
 80098d4:	2300      	movcs	r3, #0
 80098d6:	2301      	movcc	r3, #1
 80098d8:	f884 3cb1 	strb.w	r3, [r4, #3249]	; 0xcb1
 80098dc:	f894 36e0 	ldrb.w	r3, [r4, #1760]	; 0x6e0
 80098e0:	f884 3cb2 	strb.w	r3, [r4, #3250]	; 0xcb2
 80098e4:	68e3      	ldr	r3, [r4, #12]
 80098e6:	f8c4 37bc 	str.w	r3, [r4, #1980]	; 0x7bc
 80098ea:	f000 f859 	bl	80099a0 <ArtNetNode::Start()>
 80098ee:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 80098f2:	b002      	add	sp, #8
 80098f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80098f8:	f002 ba22 	b.w	800bd40 <E131Bridge::Start()>
 80098fc:	2301      	movs	r3, #1
 80098fe:	4629      	mov	r1, r5
 8009900:	4630      	mov	r0, r6
 8009902:	f10d 0206 	add.w	r2, sp, #6
 8009906:	f000 fb17 	bl	8009f38 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800990a:	b170      	cbz	r0, 800992a <ArtNet4Node::Start()+0x72>
 800990c:	4629      	mov	r1, r5
 800990e:	4630      	mov	r0, r6
 8009910:	f000 fc9c 	bl	800a24c <ArtNetNode::GetPortProtocol(unsigned int) const>
 8009914:	2801      	cmp	r0, #1
 8009916:	d108      	bne.n	800992a <ArtNet4Node::Start()+0x72>
 8009918:	4629      	mov	r1, r5
 800991a:	4630      	mov	r0, r6
 800991c:	f000 fcc7 	bl	800a2ae <ArtNetNode::GetMergeMode(unsigned int) const>
 8009920:	2344      	movs	r3, #68	; 0x44
 8009922:	436b      	muls	r3, r5
 8009924:	f604 5204 	addw	r2, r4, #3332	; 0xd04
 8009928:	50d0      	str	r0, [r2, r3]
 800992a:	3501      	adds	r5, #1
 800992c:	e7c8      	b.n	80098c0 <ArtNet4Node::Start()+0x8>

0800992e <ArtNet4Node::Run()>:
 800992e:	b510      	push	{r4, lr}
 8009930:	4604      	mov	r4, r0
 8009932:	3004      	adds	r0, #4
 8009934:	f000 fa24 	bl	8009d80 <ArtNetNode::Run()>
 8009938:	f894 3cc3 	ldrb.w	r3, [r4, #3267]	; 0xcc3
 800993c:	b12b      	cbz	r3, 800994a <ArtNet4Node::Run()+0x1c>
 800993e:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 8009942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009946:	f002 bea1 	b.w	800c68c <E131Bridge::Run()>
 800994a:	bd10      	pop	{r4, pc}

0800994c <ArtNet4Node::Print()>:
 800994c:	b510      	push	{r4, lr}
 800994e:	4604      	mov	r4, r0
 8009950:	3004      	adds	r0, #4
 8009952:	f001 fbfd 	bl	800b150 <ArtNetNode::Print()>
 8009956:	f894 36e2 	ldrb.w	r3, [r4, #1762]	; 0x6e2
 800995a:	b15b      	cbz	r3, 8009974 <ArtNet4Node::Print()+0x28>
 800995c:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 8009960:	b113      	cbz	r3, 8009968 <ArtNet4Node::Print()+0x1c>
 8009962:	4805      	ldr	r0, [pc, #20]	; (8009978 <ArtNet4Node::Print()+0x2c>)
 8009964:	f7ff fd16 	bl	8009394 <printf>
 8009968:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 800996c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009970:	f003 b8e4 	b.w	800cb3c <E131Bridge::Print()>
 8009974:	bd10      	pop	{r4, pc}
 8009976:	bf00      	nop
 8009978:	08016a85 	stmdaeq	r1, {r0, r2, r7, r9, fp, sp, lr}

0800997c <ArtNetNode::SetArtNet4Handler(ArtNet4Handler*)>:
 800997c:	61c1      	str	r1, [r0, #28]
 800997e:	4770      	bx	lr

08009980 <strncpy.isra.0>:
 8009980:	3901      	subs	r1, #1
 8009982:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009986:	b92b      	cbnz	r3, 8009994 <strncpy.isra.0+0x14>
 8009988:	4402      	add	r2, r0
 800998a:	4290      	cmp	r0, r2
 800998c:	d006      	beq.n	800999c <strncpy.isra.0+0x1c>
 800998e:	f800 3b01 	strb.w	r3, [r0], #1
 8009992:	e7fa      	b.n	800998a <strncpy.isra.0+0xa>
 8009994:	3a01      	subs	r2, #1
 8009996:	f800 3b01 	strb.w	r3, [r0], #1
 800999a:	d1f2      	bne.n	8009982 <strncpy.isra.0+0x2>
 800999c:	4770      	bx	lr
	...

080099a0 <ArtNetNode::Start()>:
 80099a0:	b570      	push	{r4, r5, r6, lr}
 80099a2:	4d1d      	ldr	r5, [pc, #116]	; (8009a18 <ArtNetNode::Start()+0x78>)
 80099a4:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
 80099a8:	682a      	ldr	r2, [r5, #0]
 80099aa:	f023 0302 	bic.w	r3, r3, #2
 80099ae:	7851      	ldrb	r1, [r2, #1]
 80099b0:	4604      	mov	r4, r0
 80099b2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80099b6:	b25b      	sxtb	r3, r3
 80099b8:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
 80099bc:	7812      	ldrb	r2, [r2, #0]
 80099be:	f023 0304 	bic.w	r3, r3, #4
 80099c2:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 80099c6:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
 80099ca:	f001 f8e5 	bl	800ab98 <ArtNetNode::FillPollReply()>
 80099ce:	f641 1136 	movw	r1, #6454	; 0x1936
 80099d2:	6828      	ldr	r0, [r5, #0]
 80099d4:	f008 f9f6 	bl	8011dc4 <Network::Begin(unsigned short)>
 80099d8:	2302      	movs	r3, #2
 80099da:	f884 36d5 	strb.w	r3, [r4, #1749]	; 0x6d5
 80099de:	6963      	ldr	r3, [r4, #20]
 80099e0:	6060      	str	r0, [r4, #4]
 80099e2:	b16b      	cbz	r3, 8009a00 <ArtNetNode::Start()+0x60>
 80099e4:	2500      	movs	r5, #0
 80099e6:	f504 66ef 	add.w	r6, r4, #1912	; 0x778
 80099ea:	012b      	lsls	r3, r5, #4
 80099ec:	5cf3      	ldrb	r3, [r6, r3]
 80099ee:	b123      	cbz	r3, 80099fa <ArtNetNode::Start()+0x5a>
 80099f0:	6960      	ldr	r0, [r4, #20]
 80099f2:	4629      	mov	r1, r5
 80099f4:	6803      	ldr	r3, [r0, #0]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	4798      	blx	r3
 80099fa:	3501      	adds	r5, #1
 80099fc:	2d04      	cmp	r5, #4
 80099fe:	d1f4      	bne.n	80099ea <ArtNetNode::Start()+0x4a>
 8009a00:	4b06      	ldr	r3, [pc, #24]	; (8009a1c <ArtNetNode::Start()+0x7c>)
 8009a02:	2102      	movs	r1, #2
 8009a04:	6818      	ldr	r0, [r3, #0]
 8009a06:	f00a fd2b 	bl	8014460 <LedBlink::SetMode(ledblink::Mode)>
 8009a0a:	4620      	mov	r0, r4
 8009a0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009a10:	2100      	movs	r1, #0
 8009a12:	f001 b933 	b.w	800ac7c <ArtNetNode::SendPollRelply(bool)>
 8009a16:	bf00      	nop
 8009a18:	2000a2a0 	andcs	sl, r0, r0, lsr #5
 8009a1c:	2000a9c4 	andcs	sl, r0, r4, asr #19

08009a20 <ArtNetNode::Stop()>:
 8009a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a24:	2500      	movs	r5, #0
 8009a26:	4604      	mov	r4, r0
 8009a28:	4606      	mov	r6, r0
 8009a2a:	46a9      	mov	r9, r5
 8009a2c:	f04f 0a01 	mov.w	sl, #1
 8009a30:	4f1f      	ldr	r7, [pc, #124]	; (8009ab0 <ArtNetNode::Stop()+0x90>)
 8009a32:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8009ab4 <ArtNetNode::Stop()+0x94>
 8009a36:	f8d6 3700 	ldr.w	r3, [r6, #1792]	; 0x700
 8009a3a:	b97b      	cbnz	r3, 8009a5c <ArtNetNode::Stop()+0x3c>
 8009a3c:	68a0      	ldr	r0, [r4, #8]
 8009a3e:	b118      	cbz	r0, 8009a48 <ArtNetNode::Stop()+0x28>
 8009a40:	6803      	ldr	r3, [r0, #0]
 8009a42:	4629      	mov	r1, r5
 8009a44:	68db      	ldr	r3, [r3, #12]
 8009a46:	4798      	blx	r3
 8009a48:	f8d8 3000 	ldr.w	r3, [r8]
 8009a4c:	f8c7 9600 	str.w	r9, [r7, #1536]	; 0x600
 8009a50:	07db      	lsls	r3, r3, #31
 8009a52:	bf58      	it	pl
 8009a54:	f8c8 a000 	strpl.w	sl, [r8]
 8009a58:	f886 9705 	strb.w	r9, [r6, #1797]	; 0x705
 8009a5c:	3501      	adds	r5, #1
 8009a5e:	2d04      	cmp	r5, #4
 8009a60:	f106 0624 	add.w	r6, r6, #36	; 0x24
 8009a64:	f207 6704 	addw	r7, r7, #1540	; 0x604
 8009a68:	d1e5      	bne.n	8009a36 <ArtNetNode::Stop()+0x16>
 8009a6a:	6963      	ldr	r3, [r4, #20]
 8009a6c:	b16b      	cbz	r3, 8009a8a <ArtNetNode::Stop()+0x6a>
 8009a6e:	2500      	movs	r5, #0
 8009a70:	f504 66ef 	add.w	r6, r4, #1912	; 0x778
 8009a74:	012b      	lsls	r3, r5, #4
 8009a76:	5cf3      	ldrb	r3, [r6, r3]
 8009a78:	b123      	cbz	r3, 8009a84 <ArtNetNode::Stop()+0x64>
 8009a7a:	6960      	ldr	r0, [r4, #20]
 8009a7c:	4629      	mov	r1, r5
 8009a7e:	6803      	ldr	r3, [r0, #0]
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	4798      	blx	r3
 8009a84:	3501      	adds	r5, #1
 8009a86:	2d04      	cmp	r5, #4
 8009a88:	d1f4      	bne.n	8009a74 <ArtNetNode::Stop()+0x54>
 8009a8a:	4b0b      	ldr	r3, [pc, #44]	; (8009ab8 <ArtNetNode::Stop()+0x98>)
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	6818      	ldr	r0, [r3, #0]
 8009a90:	f00a fce6 	bl	8014460 <LedBlink::SetMode(ledblink::Mode)>
 8009a94:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8009a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009aa0:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	f884 36d5 	strb.w	r3, [r4, #1749]	; 0x6d5
 8009aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aae:	bf00      	nop
 8009ab0:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8009ab4:	200000ec 	andcs	r0, r0, ip, ror #1
 8009ab8:	2000a9c4 	andcs	sl, r0, r4, asr #19

08009abc <ArtNetNode::SetShortName(char const*)>:
 8009abc:	b570      	push	{r4, r5, r6, lr}
 8009abe:	f100 0542 	add.w	r5, r0, #66	; 0x42
 8009ac2:	4604      	mov	r4, r0
 8009ac4:	2211      	movs	r2, #17
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	f7ff ff5a 	bl	8009980 <strncpy.isra.0>
 8009acc:	2300      	movs	r3, #0
 8009ace:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
 8009ad2:	462b      	mov	r3, r5
 8009ad4:	f104 0254 	add.w	r2, r4, #84	; 0x54
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d111      	bne.n	8009b00 <ArtNetNode::SetShortName(char const*)+0x44>
 8009adc:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	d112      	bne.n	8009b0a <ArtNetNode::SetShortName(char const*)+0x4e>
 8009ae4:	6a20      	ldr	r0, [r4, #32]
 8009ae6:	b118      	cbz	r0, 8009af0 <ArtNetNode::SetShortName(char const*)+0x34>
 8009ae8:	6803      	ldr	r3, [r0, #0]
 8009aea:	4629      	mov	r1, r5
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	4798      	blx	r3
 8009af0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009af2:	b150      	cbz	r0, 8009b0a <ArtNetNode::SetShortName(char const*)+0x4e>
 8009af4:	6803      	ldr	r3, [r0, #0]
 8009af6:	4629      	mov	r1, r5
 8009af8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	4718      	bx	r3
 8009b00:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009b04:	f883 154b 	strb.w	r1, [r3, #1355]	; 0x54b
 8009b08:	e7e6      	b.n	8009ad8 <ArtNetNode::SetShortName(char const*)+0x1c>
 8009b0a:	bd70      	pop	{r4, r5, r6, pc}

08009b0c <ArtNetNode::SetLongName(char const*)>:
 8009b0c:	b570      	push	{r4, r5, r6, lr}
 8009b0e:	f100 0554 	add.w	r5, r0, #84	; 0x54
 8009b12:	4604      	mov	r4, r0
 8009b14:	223f      	movs	r2, #63	; 0x3f
 8009b16:	4628      	mov	r0, r5
 8009b18:	f7ff ff32 	bl	8009980 <strncpy.isra.0>
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
 8009b22:	462b      	mov	r3, r5
 8009b24:	f104 0294 	add.w	r2, r4, #148	; 0x94
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d111      	bne.n	8009b50 <ArtNetNode::SetLongName(char const*)+0x44>
 8009b2c:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 8009b30:	2b02      	cmp	r3, #2
 8009b32:	d112      	bne.n	8009b5a <ArtNetNode::SetLongName(char const*)+0x4e>
 8009b34:	6a20      	ldr	r0, [r4, #32]
 8009b36:	b118      	cbz	r0, 8009b40 <ArtNetNode::SetLongName(char const*)+0x34>
 8009b38:	6803      	ldr	r3, [r0, #0]
 8009b3a:	4629      	mov	r1, r5
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	4798      	blx	r3
 8009b40:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009b42:	b150      	cbz	r0, 8009b5a <ArtNetNode::SetLongName(char const*)+0x4e>
 8009b44:	6803      	ldr	r3, [r0, #0]
 8009b46:	4629      	mov	r1, r5
 8009b48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009b4c:	68db      	ldr	r3, [r3, #12]
 8009b4e:	4718      	bx	r3
 8009b50:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009b54:	f883 154b 	strb.w	r1, [r3, #1355]	; 0x54b
 8009b58:	e7e6      	b.n	8009b28 <ArtNetNode::SetLongName(char const*)+0x1c>
 8009b5a:	bd70      	pop	{r4, r5, r6, pc}

08009b5c <ArtNetNode::ArtNetNode(unsigned char)>:
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b62:	2901      	cmp	r1, #1
 8009b64:	bf28      	it	cs
 8009b66:	2101      	movcs	r1, #1
 8009b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	e9c0 2301 	strd	r2, r3, [r0, #4]
 8009b70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b74:	4a41      	ldr	r2, [pc, #260]	; (8009c7c <ArtNetNode::ArtNetNode(unsigned char)+0x120>)
 8009b76:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8009b7a:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8009b7e:	7001      	strb	r1, [r0, #0]
 8009b80:	6010      	str	r0, [r2, #0]
 8009b82:	b085      	sub	sp, #20
 8009b84:	6243      	str	r3, [r0, #36]	; 0x24
 8009b86:	f8c0 3664 	str.w	r3, [r0, #1636]	; 0x664
 8009b8a:	f8c0 3668 	str.w	r3, [r0, #1640]	; 0x668
 8009b8e:	f880 366e 	strb.w	r3, [r0, #1646]	; 0x66e
 8009b92:	f100 0228 	add.w	r2, r0, #40	; 0x28
 8009b96:	f100 01a0 	add.w	r1, r0, #160	; 0xa0
 8009b9a:	428a      	cmp	r2, r1
 8009b9c:	d15f      	bne.n	8009c5e <ArtNetNode::ArtNetNode(unsigned char)+0x102>
 8009b9e:	4b38      	ldr	r3, [pc, #224]	; (8009c80 <ArtNetNode::ArtNetNode(unsigned char)+0x124>)
 8009ba0:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8009ba4:	6818      	ldr	r0, [r3, #0]
 8009ba6:	6903      	ldr	r3, [r0, #16]
 8009ba8:	62a3      	str	r3, [r4, #40]	; 0x28
 8009baa:	6982      	ldr	r2, [r0, #24]
 8009bac:	ea63 0302 	orn	r3, r3, r2
 8009bb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009bb2:	6363      	str	r3, [r4, #52]	; 0x34
 8009bb4:	f008 f90c 	bl	8011dd0 <Network::MacAddressCopyTo(unsigned char*)>
 8009bb8:	23d0      	movs	r3, #208	; 0xd0
 8009bba:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8009bbe:	f244 0318 	movw	r3, #16408	; 0x4018
 8009bc2:	2100      	movs	r1, #0
 8009bc4:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 8009bc8:	f204 62e4 	addw	r2, r4, #1764	; 0x6e4
 8009bcc:	f504 63d8 	add.w	r3, r4, #1728	; 0x6c0
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d147      	bne.n	8009c64 <ArtNetNode::ArtNetNode(unsigned char)+0x108>
 8009bd4:	f240 1201 	movw	r2, #257	; 0x101
 8009bd8:	f8a4 26d4 	strh.w	r2, [r4, #1748]	; 0x6d4
 8009bdc:	f242 7210 	movw	r2, #10000	; 0x2710
 8009be0:	2500      	movs	r5, #0
 8009be2:	2708      	movs	r7, #8
 8009be4:	f8c4 26cc 	str.w	r2, [r4, #1740]	; 0x6cc
 8009be8:	f204 7174 	addw	r1, r4, #1908	; 0x774
 8009bec:	f204 76b4 	addw	r6, r4, #1972	; 0x7b4
 8009bf0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009bf4:	4283      	cmp	r3, r0
 8009bf6:	d13b      	bne.n	8009c70 <ArtNetNode::ArtNetNode(unsigned char)+0x114>
 8009bf8:	460a      	mov	r2, r1
 8009bfa:	f101 0310 	add.w	r3, r1, #16
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d139      	bne.n	8009c76 <ArtNetNode::ArtNetNode(unsigned char)+0x11a>
 8009c02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009c04:	4296      	cmp	r6, r2
 8009c06:	608b      	str	r3, [r1, #8]
 8009c08:	70cf      	strb	r7, [r1, #3]
 8009c0a:	d12e      	bne.n	8009c6a <ArtNetNode::ArtNetNode(unsigned char)+0x10e>
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	491d      	ldr	r1, [pc, #116]	; (8009c84 <ArtNetNode::ArtNetNode(unsigned char)+0x128>)
 8009c10:	f7ff ff54 	bl	8009abc <ArtNetNode::SetShortName(char const*)>
 8009c14:	4b1c      	ldr	r3, [pc, #112]	; (8009c88 <ArtNetNode::ArtNetNode(unsigned char)+0x12c>)
 8009c16:	f204 657f 	addw	r5, r4, #1663	; 0x67f
 8009c1a:	9302      	str	r3, [sp, #8]
 8009c1c:	2304      	movs	r3, #4
 8009c1e:	9301      	str	r3, [sp, #4]
 8009c20:	4b1a      	ldr	r3, [pc, #104]	; (8009c8c <ArtNetNode::ArtNetNode(unsigned char)+0x130>)
 8009c22:	4a1b      	ldr	r2, [pc, #108]	; (8009c90 <ArtNetNode::ArtNetNode(unsigned char)+0x134>)
 8009c24:	9300      	str	r3, [sp, #0]
 8009c26:	2140      	movs	r1, #64	; 0x40
 8009c28:	4b1a      	ldr	r3, [pc, #104]	; (8009c94 <ArtNetNode::ArtNetNode(unsigned char)+0x138>)
 8009c2a:	4628      	mov	r0, r5
 8009c2c:	f7ff fbda 	bl	80093e4 <snprintf>
 8009c30:	4629      	mov	r1, r5
 8009c32:	4620      	mov	r0, r4
 8009c34:	f7ff ff6a 	bl	8009b0c <ArtNetNode::SetLongName(char const*)>
 8009c38:	4b17      	ldr	r3, [pc, #92]	; (8009c98 <ArtNetNode::ArtNetNode(unsigned char)+0x13c>)
 8009c3a:	f204 606f 	addw	r0, r4, #1647	; 0x66f
 8009c3e:	781a      	ldrb	r2, [r3, #0]
 8009c40:	4916      	ldr	r1, [pc, #88]	; (8009c9c <ArtNetNode::ArtNetNode(unsigned char)+0x140>)
 8009c42:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 8009c46:	785b      	ldrb	r3, [r3, #1]
 8009c48:	220f      	movs	r2, #15
 8009c4a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009c4e:	f7ff fe97 	bl	8009980 <strncpy.isra.0>
 8009c52:	2300      	movs	r3, #0
 8009c54:	4620      	mov	r0, r4
 8009c56:	f884 367e 	strb.w	r3, [r4, #1662]	; 0x67e
 8009c5a:	b005      	add	sp, #20
 8009c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c5e:	f802 3b01 	strb.w	r3, [r2], #1
 8009c62:	e79a      	b.n	8009b9a <ArtNetNode::ArtNetNode(unsigned char)+0x3e>
 8009c64:	f803 1b01 	strb.w	r1, [r3], #1
 8009c68:	e7b2      	b.n	8009bd0 <ArtNetNode::ArtNetNode(unsigned char)+0x74>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	4611      	mov	r1, r2
 8009c6e:	e7bf      	b.n	8009bf0 <ArtNetNode::ArtNetNode(unsigned char)+0x94>
 8009c70:	f803 5b01 	strb.w	r5, [r3], #1
 8009c74:	e7be      	b.n	8009bf4 <ArtNetNode::ArtNetNode(unsigned char)+0x98>
 8009c76:	f802 5b01 	strb.w	r5, [r2], #1
 8009c7a:	e7c0      	b.n	8009bfe <ArtNetNode::ArtNetNode(unsigned char)+0xa2>
 8009c7c:	20001900 	andcs	r1, r0, r0, lsl #18
 8009c80:	2000a2a0 	andcs	sl, r0, r0, lsr #5
 8009c84:	08016b34 	stmdaeq	r1, {r2, r4, r5, r8, r9, fp, sp, lr}
 8009c88:	08016b0f 	stmdaeq	r1, {r0, r1, r2, r3, r8, r9, fp, sp, lr}
 8009c8c:	08016b2c 	stmdaeq	r1, {r2, r3, r5, r8, r9, fp, sp, lr}
 8009c90:	08016b03 	stmdaeq	r1, {r0, r1, r8, r9, fp, sp, lr}
 8009c94:	08016af9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, sp, lr}
 8009c98:	08016df5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, sl, fp, sp, lr}
 8009c9c:	08016b23 	stmdaeq	r1, {r0, r1, r5, r8, r9, fp, sp, lr}

08009ca0 <ArtNetNode::SetOemValue(unsigned char const*)>:
 8009ca0:	780b      	ldrb	r3, [r1, #0]
 8009ca2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8009ca6:	784b      	ldrb	r3, [r1, #1]
 8009ca8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8009cac:	4770      	bx	lr
	...

08009cb0 <ArtNetNode::SetNetworkDataLossCondition()>:
 8009cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cb4:	2400      	movs	r4, #0
 8009cb6:	4606      	mov	r6, r0
 8009cb8:	4605      	mov	r5, r0
 8009cba:	46a0      	mov	r8, r4
 8009cbc:	46a2      	mov	sl, r4
 8009cbe:	4f1a      	ldr	r7, [pc, #104]	; (8009d28 <ArtNetNode::SetNetworkDataLossCondition()+0x78>)
 8009cc0:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8009d2c <ArtNetNode::SetNetworkDataLossCondition()+0x7c>
 8009cc4:	f880 46da 	strb.w	r4, [r0, #1754]	; 0x6da
 8009cc8:	f880 46d9 	strb.w	r4, [r0, #1753]	; 0x6d9
 8009ccc:	7833      	ldrb	r3, [r6, #0]
 8009cce:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
 8009cd2:	d301      	bcc.n	8009cd8 <ArtNetNode::SetNetworkDataLossCondition()+0x28>
 8009cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cd8:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 8009cdc:	b953      	cbnz	r3, 8009cf4 <ArtNetNode::SetNetworkDataLossCondition()+0x44>
 8009cde:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 8009ce2:	b13b      	cbz	r3, 8009cf4 <ArtNetNode::SetNetworkDataLossCondition()+0x44>
 8009ce4:	68b0      	ldr	r0, [r6, #8]
 8009ce6:	b118      	cbz	r0, 8009cf0 <ArtNetNode::SetNetworkDataLossCondition()+0x40>
 8009ce8:	6803      	ldr	r3, [r0, #0]
 8009cea:	4621      	mov	r1, r4
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	4798      	blx	r3
 8009cf0:	f885 8705 	strb.w	r8, [r5, #1797]	; 0x705
 8009cf4:	f895 36e7 	ldrb.w	r3, [r5, #1767]	; 0x6e7
 8009cf8:	f8c5 86f0 	str.w	r8, [r5, #1776]	; 0x6f0
 8009cfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d00:	f885 36e7 	strb.w	r3, [r5, #1767]	; 0x6e7
 8009d04:	f8c5 86f8 	str.w	r8, [r5, #1784]	; 0x6f8
 8009d08:	f8d9 3000 	ldr.w	r3, [r9]
 8009d0c:	f8c7 a600 	str.w	sl, [r7, #1536]	; 0x600
 8009d10:	07db      	lsls	r3, r3, #31
 8009d12:	bf58      	it	pl
 8009d14:	2301      	movpl	r3, #1
 8009d16:	f104 0401 	add.w	r4, r4, #1
 8009d1a:	bf58      	it	pl
 8009d1c:	f8c9 3000 	strpl.w	r3, [r9]
 8009d20:	f207 6704 	addw	r7, r7, #1540	; 0x604
 8009d24:	3524      	adds	r5, #36	; 0x24
 8009d26:	e7d1      	b.n	8009ccc <ArtNetNode::SetNetworkDataLossCondition()+0x1c>
 8009d28:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8009d2c:	200000ec 	andcs	r0, r0, ip, ror #1

08009d30 <ArtNetNode::GetType()>:
 8009d30:	f8b0 3570 	ldrh.w	r3, [r0, #1392]	; 0x570
 8009d34:	b530      	push	{r4, r5, lr}
 8009d36:	2b0b      	cmp	r3, #11
 8009d38:	d91d      	bls.n	8009d76 <ArtNetNode::GetType()+0x46>
 8009d3a:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
 8009d3e:	b9d3      	cbnz	r3, 8009d76 <ArtNetNode::GetType()+0x46>
 8009d40:	f890 20ab 	ldrb.w	r2, [r0, #171]	; 0xab
 8009d44:	2a0e      	cmp	r2, #14
 8009d46:	d10d      	bne.n	8009d64 <ArtNetNode::GetType()+0x34>
 8009d48:	4a0c      	ldr	r2, [pc, #48]	; (8009d7c <ArtNetNode::GetType()+0x4c>)
 8009d4a:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
 8009d4e:	f100 01a8 	add.w	r1, r0, #168	; 0xa8
 8009d52:	428b      	cmp	r3, r1
 8009d54:	d109      	bne.n	8009d6a <ArtNetNode::GetType()+0x3a>
 8009d56:	f890 20a9 	ldrb.w	r2, [r0, #169]	; 0xa9
 8009d5a:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
 8009d5e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	f8a0 3572 	strh.w	r3, [r0, #1394]	; 0x572
 8009d68:	bd30      	pop	{r4, r5, pc}
 8009d6a:	f813 5b01 	ldrb.w	r5, [r3], #1
 8009d6e:	f812 4b01 	ldrb.w	r4, [r2], #1
 8009d72:	42a5      	cmp	r5, r4
 8009d74:	d0ed      	beq.n	8009d52 <ArtNetNode::GetType()+0x22>
 8009d76:	2300      	movs	r3, #0
 8009d78:	e7f4      	b.n	8009d64 <ArtNetNode::GetType()+0x34>
 8009d7a:	bf00      	nop
 8009d7c:	08016944 	stmdaeq	r1, {r2, r6, r8, fp, sp, lr}

08009d80 <ArtNetNode::Run()>:
 8009d80:	b530      	push	{r4, r5, lr}
 8009d82:	b085      	sub	sp, #20
 8009d84:	f10d 030e 	add.w	r3, sp, #14
 8009d88:	9300      	str	r3, [sp, #0]
 8009d8a:	4604      	mov	r4, r0
 8009d8c:	f200 536c 	addw	r3, r0, #1388	; 0x56c
 8009d90:	f100 01a0 	add.w	r1, r0, #160	; 0xa0
 8009d94:	f240 42cc 	movw	r2, #1228	; 0x4cc
 8009d98:	7900      	ldrb	r0, [r0, #4]
 8009d9a:	f007 faf1 	bl	8011380 <udp_recv>
 8009d9e:	4b64      	ldr	r3, [pc, #400]	; (8009f30 <ArtNetNode::Run()+0x1b0>)
 8009da0:	681d      	ldr	r5, [r3, #0]
 8009da2:	f8c4 5664 	str.w	r5, [r4, #1636]	; 0x664
 8009da6:	2800      	cmp	r0, #0
 8009da8:	d143      	bne.n	8009e32 <ArtNetNode::Run()+0xb2>
 8009daa:	f8d4 36cc 	ldr.w	r3, [r4, #1740]	; 0x6cc
 8009dae:	b13b      	cbz	r3, 8009dc0 <ArtNetNode::Run()+0x40>
 8009db0:	f8d4 2668 	ldr.w	r2, [r4, #1640]	; 0x668
 8009db4:	1aad      	subs	r5, r5, r2
 8009db6:	42ab      	cmp	r3, r5
 8009db8:	d802      	bhi.n	8009dc0 <ArtNetNode::Run()+0x40>
 8009dba:	4620      	mov	r0, r4
 8009dbc:	f7ff ff78 	bl	8009cb0 <ArtNetNode::SetNetworkDataLossCondition()>
 8009dc0:	f894 36d6 	ldrb.w	r3, [r4, #1750]	; 0x6d6
 8009dc4:	b16b      	cbz	r3, 8009de2 <ArtNetNode::Run()+0x62>
 8009dc6:	69e0      	ldr	r0, [r4, #28]
 8009dc8:	f894 56db 	ldrb.w	r5, [r4, #1755]	; 0x6db
 8009dcc:	b120      	cbz	r0, 8009dd8 <ArtNetNode::Run()+0x58>
 8009dce:	6803      	ldr	r3, [r0, #0]
 8009dd0:	695b      	ldr	r3, [r3, #20]
 8009dd2:	4798      	blx	r3
 8009dd4:	4305      	orrs	r5, r0
 8009dd6:	b2ed      	uxtb	r5, r5
 8009dd8:	b11d      	cbz	r5, 8009de2 <ArtNetNode::Run()+0x62>
 8009dda:	2100      	movs	r1, #0
 8009ddc:	4620      	mov	r0, r4
 8009dde:	f000 ff4d 	bl	800ac7c <ArtNetNode::SendPollRelply(bool)>
 8009de2:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 8009de6:	f8d4 2668 	ldr.w	r2, [r4, #1640]	; 0x668
 8009dea:	1a9b      	subs	r3, r3, r2
 8009dec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009df0:	d305      	bcc.n	8009dfe <ArtNetNode::Run()+0x7e>
 8009df2:	f894 36dd 	ldrb.w	r3, [r4, #1757]	; 0x6dd
 8009df6:	f023 0302 	bic.w	r3, r3, #2
 8009dfa:	f884 36dd 	strb.w	r3, [r4, #1757]	; 0x6dd
 8009dfe:	6963      	ldr	r3, [r4, #20]
 8009e00:	b113      	cbz	r3, 8009e08 <ArtNetNode::Run()+0x88>
 8009e02:	4620      	mov	r0, r4
 8009e04:	f000 fd58 	bl	800a8b8 <ArtNetNode::HandleDmxIn()>
 8009e08:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8009e0c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009e10:	2bc0      	cmp	r3, #192	; 0xc0
 8009e12:	d10c      	bne.n	8009e2e <ArtNetNode::Run()+0xae>
 8009e14:	4b47      	ldr	r3, [pc, #284]	; (8009f34 <ArtNetNode::Run()+0x1b4>)
 8009e16:	6818      	ldr	r0, [r3, #0]
 8009e18:	6843      	ldr	r3, [r0, #4]
 8009e1a:	2b04      	cmp	r3, #4
 8009e1c:	d007      	beq.n	8009e2e <ArtNetNode::Run()+0xae>
 8009e1e:	f894 36dd 	ldrb.w	r3, [r4, #1757]	; 0x6dd
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f000 8082 	beq.w	8009f2c <ArtNetNode::Run()+0x1ac>
 8009e28:	2103      	movs	r1, #3
 8009e2a:	f00a fb19 	bl	8014460 <LedBlink::SetMode(ledblink::Mode)>
 8009e2e:	b005      	add	sp, #20
 8009e30:	bd30      	pop	{r4, r5, pc}
 8009e32:	f8a4 0570 	strh.w	r0, [r4, #1392]	; 0x570
 8009e36:	f8c4 5668 	str.w	r5, [r4, #1640]	; 0x668
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	f7ff ff78 	bl	8009d30 <ArtNetNode::GetType()>
 8009e40:	f894 36d9 	ldrb.w	r3, [r4, #1753]	; 0x6d9
 8009e44:	b143      	cbz	r3, 8009e58 <ArtNetNode::Run()+0xd8>
 8009e46:	f8d4 36d0 	ldr.w	r3, [r4, #1744]	; 0x6d0
 8009e4a:	1aed      	subs	r5, r5, r3
 8009e4c:	f5b5 6f7a 	cmp.w	r5, #4000	; 0xfa0
 8009e50:	bf24      	itt	cs
 8009e52:	2300      	movcs	r3, #0
 8009e54:	f884 36d9 	strbcs.w	r3, [r4, #1753]	; 0x6d9
 8009e58:	f8b4 3572 	ldrh.w	r3, [r4, #1394]	; 0x572
 8009e5c:	f5b3 4f02 	cmp.w	r3, #33280	; 0x8200
 8009e60:	d04c      	beq.n	8009efc <ArtNetNode::Run()+0x17c>
 8009e62:	d81d      	bhi.n	8009ea0 <ArtNetNode::Run()+0x120>
 8009e64:	f5b3 4fa4 	cmp.w	r3, #20992	; 0x5200
 8009e68:	d039      	beq.n	8009ede <ArtNetNode::Run()+0x15e>
 8009e6a:	d80c      	bhi.n	8009e86 <ArtNetNode::Run()+0x106>
 8009e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e70:	d031      	beq.n	8009ed6 <ArtNetNode::Run()+0x156>
 8009e72:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009e76:	d1c2      	bne.n	8009dfe <ArtNetNode::Run()+0x7e>
 8009e78:	68a3      	ldr	r3, [r4, #8]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d0bf      	beq.n	8009dfe <ArtNetNode::Run()+0x7e>
 8009e7e:	4620      	mov	r0, r4
 8009e80:	f000 fc30 	bl	800a6e4 <ArtNetNode::HandleDmx()>
 8009e84:	e7bb      	b.n	8009dfe <ArtNetNode::Run()+0x7e>
 8009e86:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009e8a:	d02f      	beq.n	8009eec <ArtNetNode::Run()+0x16c>
 8009e8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e90:	d1b5      	bne.n	8009dfe <ArtNetNode::Run()+0x7e>
 8009e92:	6923      	ldr	r3, [r4, #16]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d0b2      	beq.n	8009dfe <ArtNetNode::Run()+0x7e>
 8009e98:	4620      	mov	r0, r4
 8009e9a:	f001 f85a 	bl	800af52 <ArtNetNode::HandleTodRequest()>
 8009e9e:	e7ae      	b.n	8009dfe <ArtNetNode::Run()+0x7e>
 8009ea0:	f5b3 4f18 	cmp.w	r3, #38912	; 0x9800
 8009ea4:	d026      	beq.n	8009ef4 <ArtNetNode::Run()+0x174>
 8009ea6:	d80c      	bhi.n	8009ec2 <ArtNetNode::Run()+0x142>
 8009ea8:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 8009eac:	d02e      	beq.n	8009f0c <ArtNetNode::Run()+0x18c>
 8009eae:	f5b3 4f17 	cmp.w	r3, #38656	; 0x9700
 8009eb2:	d1a4      	bne.n	8009dfe <ArtNetNode::Run()+0x7e>
 8009eb4:	68e3      	ldr	r3, [r4, #12]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d0a1      	beq.n	8009dfe <ArtNetNode::Run()+0x7e>
 8009eba:	4620      	mov	r0, r4
 8009ebc:	f001 f920 	bl	800b100 <ArtNetNode::HandleTimeCode()>
 8009ec0:	e79d      	b.n	8009dfe <ArtNetNode::Run()+0x7e>
 8009ec2:	f5b3 4f19 	cmp.w	r3, #39168	; 0x9900
 8009ec6:	d029      	beq.n	8009f1c <ArtNetNode::Run()+0x19c>
 8009ec8:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 8009ecc:	d197      	bne.n	8009dfe <ArtNetNode::Run()+0x7e>
 8009ece:	4620      	mov	r0, r4
 8009ed0:	f000 fd9c 	bl	800aa0c <ArtNetNode::HandleIpProg()>
 8009ed4:	e793      	b.n	8009dfe <ArtNetNode::Run()+0x7e>
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	f000 ff6e 	bl	800adb8 <ArtNetNode::HandlePoll()>
 8009edc:	e78f      	b.n	8009dfe <ArtNetNode::Run()+0x7e>
 8009ede:	68a3      	ldr	r3, [r4, #8]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d08c      	beq.n	8009dfe <ArtNetNode::Run()+0x7e>
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	f001 f8bf 	bl	800b068 <ArtNetNode::HandleSync()>
 8009eea:	e788      	b.n	8009dfe <ArtNetNode::Run()+0x7e>
 8009eec:	4620      	mov	r0, r4
 8009eee:	f000 f9e5 	bl	800a2bc <ArtNetNode::HandleAddress()>
 8009ef2:	e784      	b.n	8009dfe <ArtNetNode::Run()+0x7e>
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	f001 f909 	bl	800b10c <ArtNetNode::HandleTimeSync()>
 8009efa:	e780      	b.n	8009dfe <ArtNetNode::Run()+0x7e>
 8009efc:	6923      	ldr	r3, [r4, #16]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	f43f af7d 	beq.w	8009dfe <ArtNetNode::Run()+0x7e>
 8009f04:	4620      	mov	r0, r4
 8009f06:	f000 ffea 	bl	800aede <ArtNetNode::HandleTodControl()>
 8009f0a:	e778      	b.n	8009dfe <ArtNetNode::Run()+0x7e>
 8009f0c:	6923      	ldr	r3, [r4, #16]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	f43f af75 	beq.w	8009dfe <ArtNetNode::Run()+0x7e>
 8009f14:	4620      	mov	r0, r4
 8009f16:	f001 f837 	bl	800af88 <ArtNetNode::HandleRdm()>
 8009f1a:	e770      	b.n	8009dfe <ArtNetNode::Run()+0x7e>
 8009f1c:	69a3      	ldr	r3, [r4, #24]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	f43f af6d 	beq.w	8009dfe <ArtNetNode::Run()+0x7e>
 8009f24:	4620      	mov	r0, r4
 8009f26:	f001 febb 	bl	800bca0 <ArtNetNode::HandleTrigger()>
 8009f2a:	e768      	b.n	8009dfe <ArtNetNode::Run()+0x7e>
 8009f2c:	2102      	movs	r1, #2
 8009f2e:	e77c      	b.n	8009e2a <ArtNetNode::Run()+0xaa>
 8009f30:	2000a9dc 	ldrdcs	sl, [r0], -ip
 8009f34:	2000a9c4 	andcs	sl, r0, r4, asr #19

08009f38 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>:
 8009f38:	b93b      	cbnz	r3, 8009f4a <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const+0x12>
 8009f3a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8009f3e:	f8b0 3774 	ldrh.w	r3, [r0, #1908]	; 0x774
 8009f42:	8013      	strh	r3, [r2, #0]
 8009f44:	f890 0778 	ldrb.w	r0, [r0, #1912]	; 0x778
 8009f48:	4770      	bx	lr
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	bf01      	itttt	eq
 8009f4e:	2324      	moveq	r3, #36	; 0x24
 8009f50:	fb03 0001 	mlaeq	r0, r3, r1, r0
 8009f54:	f8b0 36e4 	ldrheq.w	r3, [r0, #1764]	; 0x6e4
 8009f58:	f890 06e8 	ldrbeq.w	r0, [r0, #1768]	; 0x6e8
 8009f5c:	bf0c      	ite	eq
 8009f5e:	8013      	strheq	r3, [r2, #0]
 8009f60:	2000      	movne	r0, #0
 8009f62:	4770      	bx	lr

08009f64 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>:
 8009f64:	b94b      	cbnz	r3, 8009f7a <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x16>
 8009f66:	2903      	cmp	r1, #3
 8009f68:	d810      	bhi.n	8009f8c <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x28>
 8009f6a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8009f6e:	f890 3776 	ldrb.w	r3, [r0, #1910]	; 0x776
 8009f72:	7013      	strb	r3, [r2, #0]
 8009f74:	f890 0778 	ldrb.w	r0, [r0, #1912]	; 0x778
 8009f78:	4770      	bx	lr
 8009f7a:	2324      	movs	r3, #36	; 0x24
 8009f7c:	fb03 0001 	mla	r0, r3, r1, r0
 8009f80:	f890 36e6 	ldrb.w	r3, [r0, #1766]	; 0x6e6
 8009f84:	7013      	strb	r3, [r2, #0]
 8009f86:	f890 06e8 	ldrb.w	r0, [r0, #1768]	; 0x6e8
 8009f8a:	4770      	bx	lr
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	4770      	bx	lr

08009f90 <ArtNetNode::GetSubnetSwitch(unsigned int) const>:
 8009f90:	4408      	add	r0, r1
 8009f92:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 8009f96:	4770      	bx	lr

08009f98 <ArtNetNode::GetNetSwitch(unsigned int) const>:
 8009f98:	4408      	add	r0, r1
 8009f9a:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8009f9e:	4770      	bx	lr

08009fa0 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>:
 8009fa0:	4402      	add	r2, r0
 8009fa2:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 8009fa6:	f892 203f 	ldrb.w	r2, [r2, #63]	; 0x3f
 8009faa:	021b      	lsls	r3, r3, #8
 8009fac:	0112      	lsls	r2, r2, #4
 8009fae:	b2d2      	uxtb	r2, r2
 8009fb0:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	f001 010f 	and.w	r1, r1, #15
 8009fba:	ea43 0001 	orr.w	r0, r3, r1
 8009fbe:	4770      	bx	lr

08009fc0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>:
 8009fc0:	2903      	cmp	r1, #3
 8009fc2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fc6:	4604      	mov	r4, r0
 8009fc8:	460d      	mov	r5, r1
 8009fca:	4617      	mov	r7, r2
 8009fcc:	461e      	mov	r6, r3
 8009fce:	f200 80a3 	bhi.w	800a118 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x158>
 8009fd2:	2a02      	cmp	r2, #2
 8009fd4:	d121      	bne.n	800a01a <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x5a>
 8009fd6:	2324      	movs	r3, #36	; 0x24
 8009fd8:	fb03 0301 	mla	r3, r3, r1, r0
 8009fdc:	f893 26e8 	ldrb.w	r2, [r3, #1768]	; 0x6e8
 8009fe0:	b13a      	cbz	r2, 8009ff2 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x32>
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f883 26e8 	strb.w	r2, [r3, #1768]	; 0x6e8
 8009fe8:	f890 36de 	ldrb.w	r3, [r0, #1758]	; 0x6de
 8009fec:	3b01      	subs	r3, #1
 8009fee:	f880 36de 	strb.w	r3, [r0, #1758]	; 0x6de
 8009ff2:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8009ff6:	f895 3778 	ldrb.w	r3, [r5, #1912]	; 0x778
 8009ffa:	b90b      	cbnz	r3, 800a000 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x40>
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	e00a      	b.n	800a016 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x56>
 800a000:	2308      	movs	r3, #8
 800a002:	2000      	movs	r0, #0
 800a004:	f885 3777 	strb.w	r3, [r5, #1911]	; 0x777
 800a008:	f885 0778 	strb.w	r0, [r5, #1912]	; 0x778
 800a00c:	f894 36df 	ldrb.w	r3, [r4, #1759]	; 0x6df
 800a010:	3b01      	subs	r3, #1
 800a012:	f884 36df 	strb.w	r3, [r4, #1759]	; 0x6df
 800a016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a01a:	2a00      	cmp	r2, #0
 800a01c:	d13b      	bne.n	800a096 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xd6>
 800a01e:	eb00 1801 	add.w	r8, r0, r1, lsl #4
 800a022:	f898 3778 	ldrb.w	r3, [r8, #1912]	; 0x778
 800a026:	b923      	cbnz	r3, 800a032 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x72>
 800a028:	f890 36df 	ldrb.w	r3, [r0, #1759]	; 0x6df
 800a02c:	3301      	adds	r3, #1
 800a02e:	f880 36df 	strb.w	r3, [r0, #1759]	; 0x6df
 800a032:	2301      	movs	r3, #1
 800a034:	f04f 0900 	mov.w	r9, #0
 800a038:	f888 3778 	strb.w	r3, [r8, #1912]	; 0x778
 800a03c:	f006 030f 	and.w	r3, r6, #15
 800a040:	464a      	mov	r2, r9
 800a042:	f888 3776 	strb.w	r3, [r8, #1910]	; 0x776
 800a046:	4631      	mov	r1, r6
 800a048:	4620      	mov	r0, r4
 800a04a:	f888 9777 	strb.w	r9, [r8, #1911]	; 0x777
 800a04e:	f7ff ffa7 	bl	8009fa0 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800a052:	2324      	movs	r3, #36	; 0x24
 800a054:	fb03 4305 	mla	r3, r3, r5, r4
 800a058:	f8a8 0774 	strh.w	r0, [r8, #1908]	; 0x774
 800a05c:	f893 26e8 	ldrb.w	r2, [r3, #1768]	; 0x6e8
 800a060:	b132      	cbz	r2, 800a070 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 800a062:	f883 96e8 	strb.w	r9, [r3, #1768]	; 0x6e8
 800a066:	f894 36de 	ldrb.w	r3, [r4, #1758]	; 0x6de
 800a06a:	3b01      	subs	r3, #1
 800a06c:	f884 36de 	strb.w	r3, [r4, #1758]	; 0x6de
 800a070:	69e0      	ldr	r0, [r4, #28]
 800a072:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 800a076:	2800      	cmp	r0, #0
 800a078:	d042      	beq.n	800a100 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x140>
 800a07a:	2b02      	cmp	r3, #2
 800a07c:	d13b      	bne.n	800a0f6 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x136>
 800a07e:	6a20      	ldr	r0, [r4, #32]
 800a080:	2800      	cmp	r0, #0
 800a082:	d143      	bne.n	800a10c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x14c>
 800a084:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a086:	2800      	cmp	r0, #0
 800a088:	d0b8      	beq.n	8009ffc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 800a08a:	6803      	ldr	r3, [r0, #0]
 800a08c:	4632      	mov	r2, r6
 800a08e:	4629      	mov	r1, r5
 800a090:	691b      	ldr	r3, [r3, #16]
 800a092:	4798      	blx	r3
 800a094:	e7b2      	b.n	8009ffc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 800a096:	2a01      	cmp	r2, #1
 800a098:	d1ea      	bne.n	800a070 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 800a09a:	f04f 0824 	mov.w	r8, #36	; 0x24
 800a09e:	fb08 0301 	mla	r3, r8, r1, r0
 800a0a2:	f893 36e8 	ldrb.w	r3, [r3, #1768]	; 0x6e8
 800a0a6:	b923      	cbnz	r3, 800a0b2 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xf2>
 800a0a8:	f890 36de 	ldrb.w	r3, [r0, #1758]	; 0x6de
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	f880 36de 	strb.w	r3, [r0, #1758]	; 0x6de
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	fb08 4805 	mla	r8, r8, r5, r4
 800a0b8:	f888 36e8 	strb.w	r3, [r8, #1768]	; 0x6e8
 800a0bc:	f006 030f 	and.w	r3, r6, #15
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f888 36e6 	strb.w	r3, [r8, #1766]	; 0x6e6
 800a0c6:	4631      	mov	r1, r6
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	f7ff ff69 	bl	8009fa0 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800a0ce:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 800a0d2:	f8a8 06e4 	strh.w	r0, [r8, #1764]	; 0x6e4
 800a0d6:	f893 2778 	ldrb.w	r2, [r3, #1912]	; 0x778
 800a0da:	2a00      	cmp	r2, #0
 800a0dc:	d0c8      	beq.n	800a070 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f883 2778 	strb.w	r2, [r3, #1912]	; 0x778
 800a0e4:	2208      	movs	r2, #8
 800a0e6:	f883 2777 	strb.w	r2, [r3, #1911]	; 0x777
 800a0ea:	f894 36df 	ldrb.w	r3, [r4, #1759]	; 0x6df
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	f884 36df 	strb.w	r3, [r4, #1759]	; 0x6df
 800a0f4:	e7bc      	b.n	800a070 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 800a0f6:	6803      	ldr	r3, [r0, #0]
 800a0f8:	463a      	mov	r2, r7
 800a0fa:	4629      	mov	r1, r5
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	4798      	blx	r3
 800a100:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 800a104:	2b02      	cmp	r3, #2
 800a106:	f47f af79 	bne.w	8009ffc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 800a10a:	e7b8      	b.n	800a07e <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xbe>
 800a10c:	6803      	ldr	r3, [r0, #0]
 800a10e:	4632      	mov	r2, r6
 800a110:	4629      	mov	r1, r5
 800a112:	691b      	ldr	r3, [r3, #16]
 800a114:	4798      	blx	r3
 800a116:	e7b5      	b.n	800a084 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xc4>
 800a118:	f06f 0004 	mvn.w	r0, #4
 800a11c:	e77b      	b.n	800a016 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x56>

0800a11e <ArtNetNode::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
 800a11e:	b430      	push	{r4, r5}
 800a120:	eb00 0491 	add.w	r4, r0, r1, lsr #2
 800a124:	f3c3 2506 	ubfx	r5, r3, #8, #7
 800a128:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
 800a12c:	f3c3 1503 	ubfx	r5, r3, #4, #4
 800a130:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
 800a134:	f003 030f 	and.w	r3, r3, #15
 800a138:	bc30      	pop	{r4, r5}
 800a13a:	f7ff bf41 	b.w	8009fc0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>

0800a13e <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>:
 800a13e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a142:	2524      	movs	r5, #36	; 0x24
 800a144:	4604      	mov	r4, r0
 800a146:	460f      	mov	r7, r1
 800a148:	4616      	mov	r6, r2
 800a14a:	1883      	adds	r3, r0, r2
 800a14c:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
 800a150:	0093      	lsls	r3, r2, #2
 800a152:	b2db      	uxtb	r3, r3
 800a154:	fb05 0503 	mla	r5, r5, r3, r0
 800a158:	f103 0905 	add.w	r9, r3, #5
 800a15c:	f103 0801 	add.w	r8, r3, #1
 800a160:	45c8      	cmp	r8, r9
 800a162:	f105 0524 	add.w	r5, r5, #36	; 0x24
 800a166:	d10c      	bne.n	800a182 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x44>
 800a168:	6a20      	ldr	r0, [r4, #32]
 800a16a:	b1a0      	cbz	r0, 800a196 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x58>
 800a16c:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 800a170:	2b02      	cmp	r3, #2
 800a172:	d110      	bne.n	800a196 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x58>
 800a174:	b97e      	cbnz	r6, 800a196 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x58>
 800a176:	6803      	ldr	r3, [r0, #0]
 800a178:	4639      	mov	r1, r7
 800a17a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a17e:	699b      	ldr	r3, [r3, #24]
 800a180:	4718      	bx	r3
 800a182:	f8b5 16c0 	ldrh.w	r1, [r5, #1728]	; 0x6c0
 800a186:	089a      	lsrs	r2, r3, #2
 800a188:	4620      	mov	r0, r4
 800a18a:	f7ff ff09 	bl	8009fa0 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800a18e:	4643      	mov	r3, r8
 800a190:	f8a5 06c0 	strh.w	r0, [r5, #1728]	; 0x6c0
 800a194:	e7e2      	b.n	800a15c <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x1e>
 800a196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a19a <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>:
 800a19a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a19e:	2524      	movs	r5, #36	; 0x24
 800a1a0:	4604      	mov	r4, r0
 800a1a2:	460f      	mov	r7, r1
 800a1a4:	4616      	mov	r6, r2
 800a1a6:	1883      	adds	r3, r0, r2
 800a1a8:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
 800a1ac:	0093      	lsls	r3, r2, #2
 800a1ae:	b2db      	uxtb	r3, r3
 800a1b0:	fb05 0503 	mla	r5, r5, r3, r0
 800a1b4:	f103 0905 	add.w	r9, r3, #5
 800a1b8:	f103 0801 	add.w	r8, r3, #1
 800a1bc:	45c8      	cmp	r8, r9
 800a1be:	f105 0524 	add.w	r5, r5, #36	; 0x24
 800a1c2:	d10c      	bne.n	800a1de <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x44>
 800a1c4:	6a20      	ldr	r0, [r4, #32]
 800a1c6:	b1a0      	cbz	r0, 800a1f2 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x58>
 800a1c8:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 800a1cc:	2b02      	cmp	r3, #2
 800a1ce:	d110      	bne.n	800a1f2 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x58>
 800a1d0:	b97e      	cbnz	r6, 800a1f2 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x58>
 800a1d2:	6803      	ldr	r3, [r0, #0]
 800a1d4:	4639      	mov	r1, r7
 800a1d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1da:	695b      	ldr	r3, [r3, #20]
 800a1dc:	4718      	bx	r3
 800a1de:	f8b5 16c0 	ldrh.w	r1, [r5, #1728]	; 0x6c0
 800a1e2:	089a      	lsrs	r2, r3, #2
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	f7ff fedb 	bl	8009fa0 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800a1ea:	4643      	mov	r3, r8
 800a1ec:	f8a5 06c0 	strh.w	r0, [r5, #1728]	; 0x6c0
 800a1f0:	e7e2      	b.n	800a1b8 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x1e>
 800a1f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a1f6 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>:
 800a1f6:	b570      	push	{r4, r5, r6, lr}
 800a1f8:	4616      	mov	r6, r2
 800a1fa:	2224      	movs	r2, #36	; 0x24
 800a1fc:	fb02 0301 	mla	r3, r2, r1, r0
 800a200:	fb02 0201 	mla	r2, r2, r1, r0
 800a204:	f8c3 6700 	str.w	r6, [r3, #1792]	; 0x700
 800a208:	f893 36e7 	ldrb.w	r3, [r3, #1767]	; 0x6e7
 800a20c:	2e01      	cmp	r6, #1
 800a20e:	bf0c      	ite	eq
 800a210:	f043 0301 	orreq.w	r3, r3, #1
 800a214:	f003 03fe 	andne.w	r3, r3, #254	; 0xfe
 800a218:	f882 36e7 	strb.w	r3, [r2, #1767]	; 0x6e7
 800a21c:	f890 36d5 	ldrb.w	r3, [r0, #1749]	; 0x6d5
 800a220:	4605      	mov	r5, r0
 800a222:	2b02      	cmp	r3, #2
 800a224:	460c      	mov	r4, r1
 800a226:	d110      	bne.n	800a24a <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 800a228:	2903      	cmp	r1, #3
 800a22a:	d80e      	bhi.n	800a24a <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 800a22c:	6a00      	ldr	r0, [r0, #32]
 800a22e:	b118      	cbz	r0, 800a238 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x42>
 800a230:	6803      	ldr	r3, [r0, #0]
 800a232:	4632      	mov	r2, r6
 800a234:	6a1b      	ldr	r3, [r3, #32]
 800a236:	4798      	blx	r3
 800a238:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a23a:	b130      	cbz	r0, 800a24a <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 800a23c:	6803      	ldr	r3, [r0, #0]
 800a23e:	4632      	mov	r2, r6
 800a240:	4621      	mov	r1, r4
 800a242:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a246:	6a1b      	ldr	r3, [r3, #32]
 800a248:	4718      	bx	r3
 800a24a:	bd70      	pop	{r4, r5, r6, pc}

0800a24c <ArtNetNode::GetPortProtocol(unsigned int) const>:
 800a24c:	2324      	movs	r3, #36	; 0x24
 800a24e:	fb03 0001 	mla	r0, r3, r1, r0
 800a252:	f8d0 0700 	ldr.w	r0, [r0, #1792]	; 0x700
 800a256:	4770      	bx	lr

0800a258 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>:
 800a258:	b570      	push	{r4, r5, r6, lr}
 800a25a:	4616      	mov	r6, r2
 800a25c:	2224      	movs	r2, #36	; 0x24
 800a25e:	fb02 0301 	mla	r3, r2, r1, r0
 800a262:	fb02 0201 	mla	r2, r2, r1, r0
 800a266:	f8c3 66fc 	str.w	r6, [r3, #1788]	; 0x6fc
 800a26a:	f893 36e7 	ldrb.w	r3, [r3, #1767]	; 0x6e7
 800a26e:	2e01      	cmp	r6, #1
 800a270:	bf0c      	ite	eq
 800a272:	f043 0302 	orreq.w	r3, r3, #2
 800a276:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
 800a27a:	f882 36e7 	strb.w	r3, [r2, #1767]	; 0x6e7
 800a27e:	f890 36d5 	ldrb.w	r3, [r0, #1749]	; 0x6d5
 800a282:	4605      	mov	r5, r0
 800a284:	2b02      	cmp	r3, #2
 800a286:	460c      	mov	r4, r1
 800a288:	d110      	bne.n	800a2ac <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 800a28a:	2903      	cmp	r1, #3
 800a28c:	d80e      	bhi.n	800a2ac <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 800a28e:	6a00      	ldr	r0, [r0, #32]
 800a290:	b118      	cbz	r0, 800a29a <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x42>
 800a292:	6803      	ldr	r3, [r0, #0]
 800a294:	4632      	mov	r2, r6
 800a296:	69db      	ldr	r3, [r3, #28]
 800a298:	4798      	blx	r3
 800a29a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a29c:	b130      	cbz	r0, 800a2ac <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 800a29e:	6803      	ldr	r3, [r0, #0]
 800a2a0:	4632      	mov	r2, r6
 800a2a2:	4621      	mov	r1, r4
 800a2a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a2a8:	69db      	ldr	r3, [r3, #28]
 800a2aa:	4718      	bx	r3
 800a2ac:	bd70      	pop	{r4, r5, r6, pc}

0800a2ae <ArtNetNode::GetMergeMode(unsigned int) const>:
 800a2ae:	2324      	movs	r3, #36	; 0x24
 800a2b0:	fb03 0001 	mla	r0, r3, r1, r0
 800a2b4:	f8d0 06fc 	ldr.w	r0, [r0, #1788]	; 0x6fc
 800a2b8:	4770      	bx	lr
	...

0800a2bc <ArtNetNode::HandleAddress()>:
 800a2bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	f880 36d4 	strb.w	r3, [r0, #1748]	; 0x6d4
 800a2c6:	f890 30ae 	ldrb.w	r3, [r0, #174]	; 0xae
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	b133      	cbz	r3, 800a2dc <ArtNetNode::HandleAddress()+0x20>
 800a2ce:	f100 01ae 	add.w	r1, r0, #174	; 0xae
 800a2d2:	f7ff fbf3 	bl	8009abc <ArtNetNode::SetShortName(char const*)>
 800a2d6:	2306      	movs	r3, #6
 800a2d8:	f884 36d4 	strb.w	r3, [r4, #1748]	; 0x6d4
 800a2dc:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 800a2e0:	b13b      	cbz	r3, 800a2f2 <ArtNetNode::HandleAddress()+0x36>
 800a2e2:	4620      	mov	r0, r4
 800a2e4:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
 800a2e8:	f7ff fc10 	bl	8009b0c <ArtNetNode::SetLongName(char const*)>
 800a2ec:	2307      	movs	r3, #7
 800a2ee:	f884 36d4 	strb.w	r3, [r4, #1748]	; 0x6d4
 800a2f2:	f894 50ad 	ldrb.w	r5, [r4, #173]	; 0xad
 800a2f6:	b105      	cbz	r5, 800a2fa <ArtNetNode::HandleAddress()+0x3e>
 800a2f8:	3d01      	subs	r5, #1
 800a2fa:	f894 1108 	ldrb.w	r1, [r4, #264]	; 0x108
 800a2fe:	2900      	cmp	r1, #0
 800a300:	d13d      	bne.n	800a37e <ArtNetNode::HandleAddress()+0xc2>
 800a302:	462a      	mov	r2, r5
 800a304:	4620      	mov	r0, r4
 800a306:	f7ff ff1a 	bl	800a13e <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800a30a:	f894 10ac 	ldrb.w	r1, [r4, #172]	; 0xac
 800a30e:	2900      	cmp	r1, #0
 800a310:	d13b      	bne.n	800a38a <ArtNetNode::HandleAddress()+0xce>
 800a312:	462a      	mov	r2, r5
 800a314:	4620      	mov	r0, r4
 800a316:	f7ff ff40 	bl	800a19a <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800a31a:	00ad      	lsls	r5, r5, #2
 800a31c:	b2ed      	uxtb	r5, r5
 800a31e:	4627      	mov	r7, r4
 800a320:	462e      	mov	r6, r5
 800a322:	f504 7882 	add.w	r8, r4, #260	; 0x104
 800a326:	f504 7984 	add.w	r9, r4, #264	; 0x108
 800a32a:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a32e:	2b7f      	cmp	r3, #127	; 0x7f
 800a330:	d006      	beq.n	800a340 <ArtNetNode::HandleAddress()+0x84>
 800a332:	bb83      	cbnz	r3, 800a396 <ArtNetNode::HandleAddress()+0xda>
 800a334:	2301      	movs	r3, #1
 800a336:	2201      	movs	r2, #1
 800a338:	4631      	mov	r1, r6
 800a33a:	4620      	mov	r0, r4
 800a33c:	f7ff fe40 	bl	8009fc0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 800a340:	f818 2c05 	ldrb.w	r2, [r8, #-5]
 800a344:	2a7f      	cmp	r2, #127	; 0x7f
 800a346:	d005      	beq.n	800a354 <ArtNetNode::HandleAddress()+0x98>
 800a348:	bb52      	cbnz	r2, 800a3a0 <ArtNetNode::HandleAddress()+0xe4>
 800a34a:	2301      	movs	r3, #1
 800a34c:	4631      	mov	r1, r6
 800a34e:	4620      	mov	r0, r4
 800a350:	f7ff fe36 	bl	8009fc0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 800a354:	3601      	adds	r6, #1
 800a356:	45c1      	cmp	r9, r8
 800a358:	b2f6      	uxtb	r6, r6
 800a35a:	d1e6      	bne.n	800a32a <ArtNetNode::HandleAddress()+0x6e>
 800a35c:	f894 110a 	ldrb.w	r1, [r4, #266]	; 0x10a
 800a360:	2913      	cmp	r1, #19
 800a362:	d823      	bhi.n	800a3ac <ArtNetNode::HandleAddress()+0xf0>
 800a364:	290f      	cmp	r1, #15
 800a366:	f200 80b9 	bhi.w	800a4dc <ArtNetNode::HandleAddress()+0x220>
 800a36a:	1e4b      	subs	r3, r1, #1
 800a36c:	2b03      	cmp	r3, #3
 800a36e:	d82d      	bhi.n	800a3cc <ArtNetNode::HandleAddress()+0x110>
 800a370:	3902      	subs	r1, #2
 800a372:	2902      	cmp	r1, #2
 800a374:	d87c      	bhi.n	800a470 <ArtNetNode::HandleAddress()+0x1b4>
 800a376:	e8df f001 	tbb	[pc, r1]
 800a37a:	00a5998d 	adceq	r9, r5, sp, lsl #19
 800a37e:	060f      	lsls	r7, r1, #24
 800a380:	d5c3      	bpl.n	800a30a <ArtNetNode::HandleAddress()+0x4e>
 800a382:	462a      	mov	r2, r5
 800a384:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800a388:	e7bc      	b.n	800a304 <ArtNetNode::HandleAddress()+0x48>
 800a38a:	060e      	lsls	r6, r1, #24
 800a38c:	d5c5      	bpl.n	800a31a <ArtNetNode::HandleAddress()+0x5e>
 800a38e:	462a      	mov	r2, r5
 800a390:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800a394:	e7be      	b.n	800a314 <ArtNetNode::HandleAddress()+0x58>
 800a396:	0618      	lsls	r0, r3, #24
 800a398:	d5d2      	bpl.n	800a340 <ArtNetNode::HandleAddress()+0x84>
 800a39a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a39e:	e7ca      	b.n	800a336 <ArtNetNode::HandleAddress()+0x7a>
 800a3a0:	0611      	lsls	r1, r2, #24
 800a3a2:	d5d7      	bpl.n	800a354 <ArtNetNode::HandleAddress()+0x98>
 800a3a4:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	e7cf      	b.n	800a34c <ArtNetNode::HandleAddress()+0x90>
 800a3ac:	2973      	cmp	r1, #115	; 0x73
 800a3ae:	d81a      	bhi.n	800a3e6 <ArtNetNode::HandleAddress()+0x12a>
 800a3b0:	296f      	cmp	r1, #111	; 0x6f
 800a3b2:	f200 80a1 	bhi.w	800a4f8 <ArtNetNode::HandleAddress()+0x23c>
 800a3b6:	2953      	cmp	r1, #83	; 0x53
 800a3b8:	d803      	bhi.n	800a3c2 <ArtNetNode::HandleAddress()+0x106>
 800a3ba:	294f      	cmp	r1, #79	; 0x4f
 800a3bc:	d906      	bls.n	800a3cc <ArtNetNode::HandleAddress()+0x110>
 800a3be:	2200      	movs	r2, #0
 800a3c0:	e08d      	b.n	800a4de <ArtNetNode::HandleAddress()+0x222>
 800a3c2:	f1a1 0360 	sub.w	r3, r1, #96	; 0x60
 800a3c6:	2b03      	cmp	r3, #3
 800a3c8:	f240 808f 	bls.w	800a4ea <ArtNetNode::HandleAddress()+0x22e>
 800a3cc:	69e0      	ldr	r0, [r4, #28]
 800a3ce:	b120      	cbz	r0, 800a3da <ArtNetNode::HandleAddress()+0x11e>
 800a3d0:	6803      	ldr	r3, [r0, #0]
 800a3d2:	f894 110a 	ldrb.w	r1, [r4, #266]	; 0x10a
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	4798      	blx	r3
 800a3da:	4620      	mov	r0, r4
 800a3dc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3e0:	2101      	movs	r1, #1
 800a3e2:	f000 bc4b 	b.w	800ac7c <ArtNetNode::SendPollRelply(bool)>
 800a3e6:	f101 0370 	add.w	r3, r1, #112	; 0x70
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	2b03      	cmp	r3, #3
 800a3ee:	d8ed      	bhi.n	800a3cc <ArtNetNode::HandleAddress()+0x110>
 800a3f0:	4b44      	ldr	r3, [pc, #272]	; (800a504 <ArtNetNode::HandleAddress()+0x248>)
 800a3f2:	f001 0103 	and.w	r1, r1, #3
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	440d      	add	r5, r1
 800a3fa:	07d2      	lsls	r2, r2, #31
 800a3fc:	bf5c      	itt	pl
 800a3fe:	2201      	movpl	r2, #1
 800a400:	601a      	strpl	r2, [r3, #0]
 800a402:	f240 6204 	movw	r2, #1540	; 0x604
 800a406:	b2ed      	uxtb	r5, r5
 800a408:	436a      	muls	r2, r5
 800a40a:	4b3f      	ldr	r3, [pc, #252]	; (800a508 <ArtNetNode::HandleAddress()+0x24c>)
 800a40c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a410:	441a      	add	r2, r3
 800a412:	4611      	mov	r1, r2
 800a414:	2700      	movs	r7, #0
 800a416:	68a0      	ldr	r0, [r4, #8]
 800a418:	f502 7600 	add.w	r6, r2, #512	; 0x200
 800a41c:	42b1      	cmp	r1, r6
 800a41e:	d16d      	bne.n	800a4fc <ArtNetNode::HandleAddress()+0x240>
 800a420:	f240 6104 	movw	r1, #1540	; 0x604
 800a424:	fb01 3105 	mla	r1, r1, r5, r3
 800a428:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a42c:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
 800a430:	6801      	ldr	r1, [r0, #0]
 800a432:	690e      	ldr	r6, [r1, #16]
 800a434:	4629      	mov	r1, r5
 800a436:	47b0      	blx	r6
 800a438:	2d03      	cmp	r5, #3
 800a43a:	d8c7      	bhi.n	800a3cc <ArtNetNode::HandleAddress()+0x110>
 800a43c:	2624      	movs	r6, #36	; 0x24
 800a43e:	fb06 4605 	mla	r6, r6, r5, r4
 800a442:	f8d6 3700 	ldr.w	r3, [r6, #1792]	; 0x700
 800a446:	2b00      	cmp	r3, #0
 800a448:	d1c0      	bne.n	800a3cc <ArtNetNode::HandleAddress()+0x110>
 800a44a:	f896 3705 	ldrb.w	r3, [r6, #1797]	; 0x705
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d1bc      	bne.n	800a3cc <ArtNetNode::HandleAddress()+0x110>
 800a452:	68a0      	ldr	r0, [r4, #8]
 800a454:	4629      	mov	r1, r5
 800a456:	6803      	ldr	r3, [r0, #0]
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	4798      	blx	r3
 800a45c:	2301      	movs	r3, #1
 800a45e:	f886 3705 	strb.w	r3, [r6, #1797]	; 0x705
 800a462:	f896 36e7 	ldrb.w	r3, [r6, #1767]	; 0x6e7
 800a466:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a46a:	f886 36e7 	strb.w	r3, [r6, #1767]	; 0x6e7
 800a46e:	e7ad      	b.n	800a3cc <ArtNetNode::HandleAddress()+0x110>
 800a470:	2300      	movs	r3, #0
 800a472:	2224      	movs	r2, #36	; 0x24
 800a474:	f884 36da 	strb.w	r3, [r4, #1754]	; 0x6da
 800a478:	7823      	ldrb	r3, [r4, #0]
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	fb02 4303 	mla	r3, r2, r3, r4
 800a480:	429f      	cmp	r7, r3
 800a482:	d0a3      	beq.n	800a3cc <ArtNetNode::HandleAddress()+0x110>
 800a484:	f897 26e7 	ldrb.w	r2, [r7, #1767]	; 0x6e7
 800a488:	3724      	adds	r7, #36	; 0x24
 800a48a:	f022 0208 	bic.w	r2, r2, #8
 800a48e:	f887 26c3 	strb.w	r2, [r7, #1731]	; 0x6c3
 800a492:	e7f5      	b.n	800a480 <ArtNetNode::HandleAddress()+0x1c4>
 800a494:	4b1d      	ldr	r3, [pc, #116]	; (800a50c <ArtNetNode::HandleAddress()+0x250>)
 800a496:	2102      	movs	r1, #2
 800a498:	6818      	ldr	r0, [r3, #0]
 800a49a:	f009 ffe1 	bl	8014460 <LedBlink::SetMode(ledblink::Mode)>
 800a49e:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800a4a2:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800a4a6:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 800a4aa:	e78f      	b.n	800a3cc <ArtNetNode::HandleAddress()+0x110>
 800a4ac:	4b17      	ldr	r3, [pc, #92]	; (800a50c <ArtNetNode::HandleAddress()+0x250>)
 800a4ae:	2100      	movs	r1, #0
 800a4b0:	6818      	ldr	r0, [r3, #0]
 800a4b2:	f009 ffd5 	bl	8014460 <LedBlink::SetMode(ledblink::Mode)>
 800a4b6:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800a4ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a4be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a4c2:	e7f0      	b.n	800a4a6 <ArtNetNode::HandleAddress()+0x1ea>
 800a4c4:	4b11      	ldr	r3, [pc, #68]	; (800a50c <ArtNetNode::HandleAddress()+0x250>)
 800a4c6:	2104      	movs	r1, #4
 800a4c8:	6818      	ldr	r0, [r3, #0]
 800a4ca:	f009 ffc9 	bl	8014460 <LedBlink::SetMode(ledblink::Mode)>
 800a4ce:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800a4d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a4d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4da:	e7e4      	b.n	800a4a6 <ArtNetNode::HandleAddress()+0x1ea>
 800a4dc:	2201      	movs	r2, #1
 800a4de:	4620      	mov	r0, r4
 800a4e0:	f001 0103 	and.w	r1, r1, #3
 800a4e4:	f7ff feb8 	bl	800a258 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 800a4e8:	e770      	b.n	800a3cc <ArtNetNode::HandleAddress()+0x110>
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	f001 0103 	and.w	r1, r1, #3
 800a4f2:	f7ff fe80 	bl	800a1f6 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 800a4f6:	e769      	b.n	800a3cc <ArtNetNode::HandleAddress()+0x110>
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	e7f7      	b.n	800a4ec <ArtNetNode::HandleAddress()+0x230>
 800a4fc:	f801 7b01 	strb.w	r7, [r1], #1
 800a500:	e78c      	b.n	800a41c <ArtNetNode::HandleAddress()+0x160>
 800a502:	bf00      	nop
 800a504:	200000ec 	andcs	r0, r0, ip, ror #1
 800a508:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800a50c:	2000a9c4 	andcs	sl, r0, r4, asr #19

0800a510 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>:
 800a510:	f240 6304 	movw	r3, #1540	; 0x604
 800a514:	fb03 0001 	mla	r0, r3, r1, r0
 800a518:	2300      	movs	r3, #0
 800a51a:	b510      	push	{r4, lr}
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d100      	bne.n	800a522 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0x12>
 800a520:	bd10      	pop	{r4, pc}
 800a522:	f810 4b01 	ldrb.w	r4, [r0], #1
 800a526:	3301      	adds	r3, #1
 800a528:	f890 11ff 	ldrb.w	r1, [r0, #511]	; 0x1ff
 800a52c:	42a1      	cmp	r1, r4
 800a52e:	bf38      	it	cc
 800a530:	4621      	movcc	r1, r4
 800a532:	f880 13ff 	strb.w	r1, [r0, #1023]	; 0x3ff
 800a536:	e7f1      	b.n	800a51c <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0xc>

0800a538 <memcpy.isra.0>:
 800a538:	3801      	subs	r0, #1
 800a53a:	440a      	add	r2, r1
 800a53c:	4291      	cmp	r1, r2
 800a53e:	d100      	bne.n	800a542 <memcpy.isra.0+0xa>
 800a540:	4770      	bx	lr
 800a542:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a546:	f800 3f01 	strb.w	r3, [r0, #1]!
 800a54a:	e7f7      	b.n	800a53c <memcpy.isra.0+0x4>

0800a54c <lightset::Data::Get()>:
 800a54c:	4b03      	ldr	r3, [pc, #12]	; (800a55c <lightset::Data::Get()+0x10>)
 800a54e:	4804      	ldr	r0, [pc, #16]	; (800a560 <lightset::Data::Get()+0x14>)
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	07d2      	lsls	r2, r2, #31
 800a554:	bf5c      	itt	pl
 800a556:	2201      	movpl	r2, #1
 800a558:	601a      	strpl	r2, [r3, #0]
 800a55a:	4770      	bx	lr
 800a55c:	200000ec 	andcs	r0, r0, ip, ror #1
 800a560:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

0800a564 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>:
 800a564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a568:	4615      	mov	r5, r2
 800a56a:	460f      	mov	r7, r1
 800a56c:	4604      	mov	r4, r0
 800a56e:	f7ff ffed 	bl	800a54c <lightset::Data::Get()>
 800a572:	f240 6304 	movw	r3, #1540	; 0x604
 800a576:	4606      	mov	r6, r0
 800a578:	435c      	muls	r4, r3
 800a57a:	eb00 0804 	add.w	r8, r0, r4
 800a57e:	462a      	mov	r2, r5
 800a580:	4639      	mov	r1, r7
 800a582:	4640      	mov	r0, r8
 800a584:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800a588:	f7ff ffd6 	bl	800a538 <memcpy.isra.0>
 800a58c:	462a      	mov	r2, r5
 800a58e:	4639      	mov	r1, r7
 800a590:	f8c8 5600 	str.w	r5, [r8, #1536]	; 0x600
 800a594:	1930      	adds	r0, r6, r4
 800a596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a59a:	f7ff bfcd 	b.w	800a538 <memcpy.isra.0>

0800a59e <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 800a59e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5a2:	4680      	mov	r8, r0
 800a5a4:	f240 6404 	movw	r4, #1540	; 0x604
 800a5a8:	4615      	mov	r5, r2
 800a5aa:	460f      	mov	r7, r1
 800a5ac:	4699      	mov	r9, r3
 800a5ae:	f7ff ffcd 	bl	800a54c <lightset::Data::Get()>
 800a5b2:	fb04 f408 	mul.w	r4, r4, r8
 800a5b6:	eb00 0a04 	add.w	sl, r0, r4
 800a5ba:	4606      	mov	r6, r0
 800a5bc:	462a      	mov	r2, r5
 800a5be:	4639      	mov	r1, r7
 800a5c0:	4650      	mov	r0, sl
 800a5c2:	f7ff ffb9 	bl	800a538 <memcpy.isra.0>
 800a5c6:	f8ca 5600 	str.w	r5, [sl, #1536]	; 0x600
 800a5ca:	f1b9 0f00 	cmp.w	r9, #0
 800a5ce:	d106      	bne.n	800a5de <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x40>
 800a5d0:	462a      	mov	r2, r5
 800a5d2:	4641      	mov	r1, r8
 800a5d4:	4630      	mov	r0, r6
 800a5d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5da:	f7ff bf99 	b.w	800a510 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 800a5de:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800a5e2:	462a      	mov	r2, r5
 800a5e4:	4639      	mov	r1, r7
 800a5e6:	1930      	adds	r0, r6, r4
 800a5e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5ec:	f7ff bfa4 	b.w	800a538 <memcpy.isra.0>

0800a5f0 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 800a5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5f4:	4616      	mov	r6, r2
 800a5f6:	4699      	mov	r9, r3
 800a5f8:	4680      	mov	r8, r0
 800a5fa:	460f      	mov	r7, r1
 800a5fc:	f7ff ffa6 	bl	800a54c <lightset::Data::Get()>
 800a600:	f240 6404 	movw	r4, #1540	; 0x604
 800a604:	4605      	mov	r5, r0
 800a606:	fb04 f408 	mul.w	r4, r4, r8
 800a60a:	f504 7000 	add.w	r0, r4, #512	; 0x200
 800a60e:	4632      	mov	r2, r6
 800a610:	4639      	mov	r1, r7
 800a612:	4428      	add	r0, r5
 800a614:	f7ff ff90 	bl	800a538 <memcpy.isra.0>
 800a618:	192b      	adds	r3, r5, r4
 800a61a:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
 800a61e:	f1b9 0f00 	cmp.w	r9, #0
 800a622:	d106      	bne.n	800a632 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x42>
 800a624:	4632      	mov	r2, r6
 800a626:	4641      	mov	r1, r8
 800a628:	4628      	mov	r0, r5
 800a62a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a62e:	f7ff bf6f 	b.w	800a510 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 800a632:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800a636:	4632      	mov	r2, r6
 800a638:	4639      	mov	r1, r7
 800a63a:	1928      	adds	r0, r5, r4
 800a63c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a640:	f7ff bf7a 	b.w	800a538 <memcpy.isra.0>

0800a644 <ArtNetNode::UpdateMergeStatus(unsigned int)>:
 800a644:	f890 36da 	ldrb.w	r3, [r0, #1754]	; 0x6da
 800a648:	b91b      	cbnz	r3, 800a652 <ArtNetNode::UpdateMergeStatus(unsigned int)+0xe>
 800a64a:	f240 1301 	movw	r3, #257	; 0x101
 800a64e:	f8a0 36da 	strh.w	r3, [r0, #1754]	; 0x6da
 800a652:	2324      	movs	r3, #36	; 0x24
 800a654:	fb03 0001 	mla	r0, r3, r1, r0
 800a658:	f890 36e7 	ldrb.w	r3, [r0, #1767]	; 0x6e7
 800a65c:	f043 0308 	orr.w	r3, r3, #8
 800a660:	f880 36e7 	strb.w	r3, [r0, #1767]	; 0x6e7
 800a664:	4770      	bx	lr

0800a666 <ArtNetNode::CheckMergeTimeouts(unsigned int)>:
 800a666:	2324      	movs	r3, #36	; 0x24
 800a668:	b530      	push	{r4, r5, lr}
 800a66a:	f242 7510 	movw	r5, #10000	; 0x2710
 800a66e:	fb03 0301 	mla	r3, r3, r1, r0
 800a672:	f8d0 2664 	ldr.w	r2, [r0, #1636]	; 0x664
 800a676:	f8d3 46ec 	ldr.w	r4, [r3, #1772]	; 0x6ec
 800a67a:	1b14      	subs	r4, r2, r4
 800a67c:	42ac      	cmp	r4, r5
 800a67e:	d908      	bls.n	800a692 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x2c>
 800a680:	2400      	movs	r4, #0
 800a682:	f8c3 46f0 	str.w	r4, [r3, #1776]	; 0x6f0
 800a686:	f893 46e7 	ldrb.w	r4, [r3, #1767]	; 0x6e7
 800a68a:	f024 0408 	bic.w	r4, r4, #8
 800a68e:	f883 46e7 	strb.w	r4, [r3, #1767]	; 0x6e7
 800a692:	2324      	movs	r3, #36	; 0x24
 800a694:	fb03 0101 	mla	r1, r3, r1, r0
 800a698:	f8d1 36f4 	ldr.w	r3, [r1, #1780]	; 0x6f4
 800a69c:	1ad2      	subs	r2, r2, r3
 800a69e:	f242 7310 	movw	r3, #10000	; 0x2710
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d908      	bls.n	800a6b8 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x52>
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	f8c1 36f8 	str.w	r3, [r1, #1784]	; 0x6f8
 800a6ac:	f891 36e7 	ldrb.w	r3, [r1, #1767]	; 0x6e7
 800a6b0:	f023 0308 	bic.w	r3, r3, #8
 800a6b4:	f881 36e7 	strb.w	r3, [r1, #1767]	; 0x6e7
 800a6b8:	2124      	movs	r1, #36	; 0x24
 800a6ba:	7803      	ldrb	r3, [r0, #0]
 800a6bc:	4602      	mov	r2, r0
 800a6be:	009b      	lsls	r3, r3, #2
 800a6c0:	fb01 0303 	mla	r3, r1, r3, r0
 800a6c4:	2100      	movs	r1, #0
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d105      	bne.n	800a6d6 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x70>
 800a6ca:	b919      	cbnz	r1, 800a6d4 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x6e>
 800a6cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6d0:	f8a0 36da 	strh.w	r3, [r0, #1754]	; 0x6da
 800a6d4:	bd30      	pop	{r4, r5, pc}
 800a6d6:	f892 46e7 	ldrb.w	r4, [r2, #1767]	; 0x6e7
 800a6da:	3224      	adds	r2, #36	; 0x24
 800a6dc:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 800a6e0:	4321      	orrs	r1, r4
 800a6e2:	e7f0      	b.n	800a6c6 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x60>

0800a6e4 <ArtNetNode::HandleDmx()>:
 800a6e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e8:	f8b0 70b0 	ldrh.w	r7, [r0, #176]	; 0xb0
 800a6ec:	4604      	mov	r4, r0
 800a6ee:	ba7f      	rev16	r7, r7
 800a6f0:	b2bf      	uxth	r7, r7
 800a6f2:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 800a6f6:	bf28      	it	cs
 800a6f8:	f44f 7700 	movcs.w	r7, #512	; 0x200
 800a6fc:	4605      	mov	r5, r0
 800a6fe:	2600      	movs	r6, #0
 800a700:	f04f 0901 	mov.w	r9, #1
 800a704:	f100 08b2 	add.w	r8, r0, #178	; 0xb2
 800a708:	7823      	ldrb	r3, [r4, #0]
 800a70a:	ebb6 0f83 	cmp.w	r6, r3, lsl #2
 800a70e:	f080 809f 	bcs.w	800a850 <ArtNetNode::HandleDmx()+0x16c>
 800a712:	f895 36e8 	ldrb.w	r3, [r5, #1768]	; 0x6e8
 800a716:	2b00      	cmp	r3, #0
 800a718:	d056      	beq.n	800a7c8 <ArtNetNode::HandleDmx()+0xe4>
 800a71a:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d152      	bne.n	800a7c8 <ArtNetNode::HandleDmx()+0xe4>
 800a722:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	; 0xae
 800a726:	f8b5 36e4 	ldrh.w	r3, [r5, #1764]	; 0x6e4
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d14c      	bne.n	800a7c8 <ArtNetNode::HandleDmx()+0xe4>
 800a72e:	f895 36e7 	ldrb.w	r3, [r5, #1767]	; 0x6e7
 800a732:	f8d5 b6f0 	ldr.w	fp, [r5, #1776]	; 0x6f0
 800a736:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a73a:	f885 36e7 	strb.w	r3, [r5, #1767]	; 0x6e7
 800a73e:	f894 36da 	ldrb.w	r3, [r4, #1754]	; 0x6da
 800a742:	f8d5 a6f8 	ldr.w	sl, [r5, #1784]	; 0x6f8
 800a746:	b133      	cbz	r3, 800a756 <ArtNetNode::HandleDmx()+0x72>
 800a748:	f894 36dc 	ldrb.w	r3, [r4, #1756]	; 0x6dc
 800a74c:	b91b      	cbnz	r3, 800a756 <ArtNetNode::HandleDmx()+0x72>
 800a74e:	4631      	mov	r1, r6
 800a750:	4620      	mov	r0, r4
 800a752:	f7ff ff88 	bl	800a666 <ArtNetNode::CheckMergeTimeouts(unsigned int)>
 800a756:	ea5b 020a 	orrs.w	r2, fp, sl
 800a75a:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
 800a75e:	d136      	bne.n	800a7ce <ArtNetNode::HandleDmx()+0xea>
 800a760:	f8c5 36f0 	str.w	r3, [r5, #1776]	; 0x6f0
 800a764:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 800a768:	463a      	mov	r2, r7
 800a76a:	4641      	mov	r1, r8
 800a76c:	4630      	mov	r0, r6
 800a76e:	f8c5 36ec 	str.w	r3, [r5, #1772]	; 0x6ec
 800a772:	f7ff fef7 	bl	800a564 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 800a776:	f894 36d9 	ldrb.w	r3, [r4, #1753]	; 0x6d9
 800a77a:	b9fb      	cbnz	r3, 800a7bc <ArtNetNode::HandleDmx()+0xd8>
 800a77c:	f8d4 a008 	ldr.w	sl, [r4, #8]
 800a780:	f7ff fee4 	bl	800a54c <lightset::Data::Get()>
 800a784:	f240 6304 	movw	r3, #1540	; 0x604
 800a788:	4373      	muls	r3, r6
 800a78a:	18c2      	adds	r2, r0, r3
 800a78c:	f503 6180 	add.w	r1, r3, #1024	; 0x400
 800a790:	f8da 3000 	ldr.w	r3, [sl]
 800a794:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800a798:	f8d2 3600 	ldr.w	r3, [r2, #1536]	; 0x600
 800a79c:	1842      	adds	r2, r0, r1
 800a79e:	4631      	mov	r1, r6
 800a7a0:	4650      	mov	r0, sl
 800a7a2:	47d8      	blx	fp
 800a7a4:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 800a7a8:	b943      	cbnz	r3, 800a7bc <ArtNetNode::HandleDmx()+0xd8>
 800a7aa:	68a0      	ldr	r0, [r4, #8]
 800a7ac:	4631      	mov	r1, r6
 800a7ae:	6803      	ldr	r3, [r0, #0]
 800a7b0:	689b      	ldr	r3, [r3, #8]
 800a7b2:	4798      	blx	r3
 800a7b4:	f884 96db 	strb.w	r9, [r4, #1755]	; 0x6db
 800a7b8:	f885 9705 	strb.w	r9, [r5, #1797]	; 0x705
 800a7bc:	f894 36dd 	ldrb.w	r3, [r4, #1757]	; 0x6dd
 800a7c0:	f043 0302 	orr.w	r3, r3, #2
 800a7c4:	f884 36dd 	strb.w	r3, [r4, #1757]	; 0x6dd
 800a7c8:	3601      	adds	r6, #1
 800a7ca:	3524      	adds	r5, #36	; 0x24
 800a7cc:	e79c      	b.n	800a708 <ArtNetNode::HandleDmx()+0x24>
 800a7ce:	459b      	cmp	fp, r3
 800a7d0:	d104      	bne.n	800a7dc <ArtNetNode::HandleDmx()+0xf8>
 800a7d2:	f1ba 0f00 	cmp.w	sl, #0
 800a7d6:	d0c5      	beq.n	800a764 <ArtNetNode::HandleDmx()+0x80>
 800a7d8:	b11b      	cbz	r3, 800a7e2 <ArtNetNode::HandleDmx()+0xfe>
 800a7da:	e037      	b.n	800a84c <ArtNetNode::HandleDmx()+0x168>
 800a7dc:	f1bb 0f00 	cmp.w	fp, #0
 800a7e0:	d132      	bne.n	800a848 <ArtNetNode::HandleDmx()+0x164>
 800a7e2:	459a      	cmp	sl, r3
 800a7e4:	d11d      	bne.n	800a822 <ArtNetNode::HandleDmx()+0x13e>
 800a7e6:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 800a7ea:	f8c5 36f4 	str.w	r3, [r5, #1780]	; 0x6f4
 800a7ee:	f7ff fead 	bl	800a54c <lightset::Data::Get()>
 800a7f2:	f240 6304 	movw	r3, #1540	; 0x604
 800a7f6:	4683      	mov	fp, r0
 800a7f8:	fb03 fa06 	mul.w	sl, r3, r6
 800a7fc:	f50a 7000 	add.w	r0, sl, #512	; 0x200
 800a800:	463a      	mov	r2, r7
 800a802:	4641      	mov	r1, r8
 800a804:	4458      	add	r0, fp
 800a806:	f7ff fe97 	bl	800a538 <memcpy.isra.0>
 800a80a:	eb0b 030a 	add.w	r3, fp, sl
 800a80e:	f50a 6080 	add.w	r0, sl, #1024	; 0x400
 800a812:	463a      	mov	r2, r7
 800a814:	4641      	mov	r1, r8
 800a816:	f8c3 7600 	str.w	r7, [r3, #1536]	; 0x600
 800a81a:	4458      	add	r0, fp
 800a81c:	f7ff fe8c 	bl	800a538 <memcpy.isra.0>
 800a820:	e7a9      	b.n	800a776 <ArtNetNode::HandleDmx()+0x92>
 800a822:	b9bb      	cbnz	r3, 800a854 <ArtNetNode::HandleDmx()+0x170>
 800a824:	f8c5 36f0 	str.w	r3, [r5, #1776]	; 0x6f0
 800a828:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 800a82c:	4631      	mov	r1, r6
 800a82e:	4620      	mov	r0, r4
 800a830:	f8c5 36ec 	str.w	r3, [r5, #1772]	; 0x6ec
 800a834:	f7ff ff06 	bl	800a644 <ArtNetNode::UpdateMergeStatus(unsigned int)>
 800a838:	463a      	mov	r2, r7
 800a83a:	4641      	mov	r1, r8
 800a83c:	4630      	mov	r0, r6
 800a83e:	f8d5 36fc 	ldr.w	r3, [r5, #1788]	; 0x6fc
 800a842:	f7ff feac 	bl	800a59e <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800a846:	e796      	b.n	800a776 <ArtNetNode::HandleDmx()+0x92>
 800a848:	459b      	cmp	fp, r3
 800a84a:	d118      	bne.n	800a87e <ArtNetNode::HandleDmx()+0x19a>
 800a84c:	459a      	cmp	sl, r3
 800a84e:	d1eb      	bne.n	800a828 <ArtNetNode::HandleDmx()+0x144>
 800a850:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a854:	f1ba 0f00 	cmp.w	sl, #0
 800a858:	d1e4      	bne.n	800a824 <ArtNetNode::HandleDmx()+0x140>
 800a85a:	f8c5 36f8 	str.w	r3, [r5, #1784]	; 0x6f8
 800a85e:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 800a862:	4631      	mov	r1, r6
 800a864:	4620      	mov	r0, r4
 800a866:	f8c5 36f4 	str.w	r3, [r5, #1780]	; 0x6f4
 800a86a:	f7ff feeb 	bl	800a644 <ArtNetNode::UpdateMergeStatus(unsigned int)>
 800a86e:	463a      	mov	r2, r7
 800a870:	4641      	mov	r1, r8
 800a872:	4630      	mov	r0, r6
 800a874:	f8d5 36fc 	ldr.w	r3, [r5, #1788]	; 0x6fc
 800a878:	f7ff feba 	bl	800a5f0 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800a87c:	e77b      	b.n	800a776 <ArtNetNode::HandleDmx()+0x92>
 800a87e:	f1ba 0f00 	cmp.w	sl, #0
 800a882:	d0ea      	beq.n	800a85a <ArtNetNode::HandleDmx()+0x176>
 800a884:	459a      	cmp	sl, r3
 800a886:	d0ea      	beq.n	800a85e <ArtNetNode::HandleDmx()+0x17a>
 800a888:	e7e2      	b.n	800a850 <ArtNetNode::HandleDmx()+0x16c>
	...

0800a88c <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>:
 800a88c:	2903      	cmp	r1, #3
 800a88e:	b510      	push	{r4, lr}
 800a890:	d80f      	bhi.n	800a8b2 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x26>
 800a892:	4b08      	ldr	r3, [pc, #32]	; (800a8b4 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x28>)
 800a894:	0109      	lsls	r1, r1, #4
 800a896:	681c      	ldr	r4, [r3, #0]
 800a898:	6923      	ldr	r3, [r4, #16]
 800a89a:	69a4      	ldr	r4, [r4, #24]
 800a89c:	4053      	eors	r3, r2
 800a89e:	4223      	tst	r3, r4
 800a8a0:	bf15      	itete	ne
 800a8a2:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
 800a8a4:	1840      	addeq	r0, r0, r1
 800a8a6:	1809      	addne	r1, r1, r0
 800a8a8:	f8c0 277c 	streq.w	r2, [r0, #1916]	; 0x77c
 800a8ac:	bf18      	it	ne
 800a8ae:	f8c1 377c 	strne.w	r3, [r1, #1916]	; 0x77c
 800a8b2:	bd10      	pop	{r4, pc}
 800a8b4:	2000a2a0 	andcs	sl, r0, r0, lsr #5

0800a8b8 <ArtNetNode::HandleDmxIn()>:
 800a8b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a8bc:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800a8c0:	aa05      	add	r2, sp, #20
 800a8c2:	4605      	mov	r5, r0
 800a8c4:	2308      	movs	r3, #8
 800a8c6:	4617      	mov	r7, r2
 800a8c8:	493f      	ldr	r1, [pc, #252]	; (800a9c8 <ArtNetNode::HandleDmxIn()+0x110>)
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	d256      	bcs.n	800a97c <ArtNetNode::HandleDmxIn()+0xc4>
 800a8ce:	462c      	mov	r4, r5
 800a8d0:	2600      	movs	r6, #0
 800a8d2:	4b3e      	ldr	r3, [pc, #248]	; (800a9cc <ArtNetNode::HandleDmxIn()+0x114>)
 800a8d4:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800a9d0 <ArtNetNode::HandleDmxIn()+0x118>
 800a8d8:	60bb      	str	r3, [r7, #8]
 800a8da:	f894 3778 	ldrb.w	r3, [r4, #1912]	; 0x778
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d043      	beq.n	800a96a <ArtNetNode::HandleDmxIn()+0xb2>
 800a8e2:	6968      	ldr	r0, [r5, #20]
 800a8e4:	4631      	mov	r1, r6
 800a8e6:	6803      	ldr	r3, [r0, #0]
 800a8e8:	aa03      	add	r2, sp, #12
 800a8ea:	f8d3 9010 	ldr.w	r9, [r3, #16]
 800a8ee:	ab04      	add	r3, sp, #16
 800a8f0:	47c8      	blx	r9
 800a8f2:	2800      	cmp	r0, #0
 800a8f4:	d04c      	beq.n	800a990 <ArtNetNode::HandleDmxIn()+0xd8>
 800a8f6:	f894 3780 	ldrb.w	r3, [r4, #1920]	; 0x780
 800a8fa:	737e      	strb	r6, [r7, #13]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	f884 3780 	strb.w	r3, [r4, #1920]	; 0x780
 800a904:	733b      	strb	r3, [r7, #12]
 800a906:	f8b4 3774 	ldrh.w	r3, [r4, #1908]	; 0x774
 800a90a:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800a90e:	81fb      	strh	r3, [r7, #14]
 800a910:	9b03      	ldr	r3, [sp, #12]
 800a912:	18c1      	adds	r1, r0, r3
 800a914:	4288      	cmp	r0, r1
 800a916:	d136      	bne.n	800a986 <ArtNetNode::HandleDmxIn()+0xce>
 800a918:	07da      	lsls	r2, r3, #31
 800a91a:	d504      	bpl.n	800a926 <ArtNetNode::HandleDmxIn()+0x6e>
 800a91c:	2100      	movs	r1, #0
 800a91e:	18fa      	adds	r2, r7, r3
 800a920:	3301      	adds	r3, #1
 800a922:	7491      	strb	r1, [r2, #18]
 800a924:	9303      	str	r3, [sp, #12]
 800a926:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800a92a:	f240 2212 	movw	r2, #530	; 0x212
 800a92e:	ba5b      	rev16	r3, r3
 800a930:	823b      	strh	r3, [r7, #16]
 800a932:	2380      	movs	r3, #128	; 0x80
 800a934:	f884 3777 	strb.w	r3, [r4, #1911]	; 0x777
 800a938:	f641 1336 	movw	r3, #6454	; 0x1936
 800a93c:	9300      	str	r3, [sp, #0]
 800a93e:	4639      	mov	r1, r7
 800a940:	f8d4 377c 	ldr.w	r3, [r4, #1916]	; 0x77c
 800a944:	7928      	ldrb	r0, [r5, #4]
 800a946:	f006 fd77 	bl	8011438 <udp_send>
 800a94a:	2301      	movs	r3, #1
 800a94c:	f8d8 2000 	ldr.w	r2, [r8]
 800a950:	40b3      	lsls	r3, r6
 800a952:	ea33 0102 	bics.w	r1, r3, r2
 800a956:	d008      	beq.n	800a96a <ArtNetNode::HandleDmxIn()+0xb2>
 800a958:	4313      	orrs	r3, r2
 800a95a:	f8c8 3000 	str.w	r3, [r8]
 800a95e:	f895 36dd 	ldrb.w	r3, [r5, #1757]	; 0x6dd
 800a962:	f043 0301 	orr.w	r3, r3, #1
 800a966:	f885 36dd 	strb.w	r3, [r5, #1757]	; 0x6dd
 800a96a:	3601      	adds	r6, #1
 800a96c:	2e04      	cmp	r6, #4
 800a96e:	f104 0410 	add.w	r4, r4, #16
 800a972:	d1b2      	bne.n	800a8da <ArtNetNode::HandleDmxIn()+0x22>
 800a974:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c
 800a978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a97c:	f811 0b01 	ldrb.w	r0, [r1], #1
 800a980:	f802 0b01 	strb.w	r0, [r2], #1
 800a984:	e7a1      	b.n	800a8ca <ArtNetNode::HandleDmxIn()+0x12>
 800a986:	f810 cb01 	ldrb.w	ip, [r0], #1
 800a98a:	f802 cb01 	strb.w	ip, [r2], #1
 800a98e:	e7c1      	b.n	800a914 <ArtNetNode::HandleDmxIn()+0x5c>
 800a990:	f994 2777 	ldrsb.w	r2, [r4, #1911]	; 0x777
 800a994:	f894 3777 	ldrb.w	r3, [r4, #1911]	; 0x777
 800a998:	2a00      	cmp	r2, #0
 800a99a:	dae6      	bge.n	800a96a <ArtNetNode::HandleDmxIn()+0xb2>
 800a99c:	9a04      	ldr	r2, [sp, #16]
 800a99e:	2a00      	cmp	r2, #0
 800a9a0:	d1e3      	bne.n	800a96a <ArtNetNode::HandleDmxIn()+0xb2>
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9a8:	f884 3777 	strb.w	r3, [r4, #1911]	; 0x777
 800a9ac:	f8d8 3000 	ldr.w	r3, [r8]
 800a9b0:	40b2      	lsls	r2, r6
 800a9b2:	ea23 0302 	bic.w	r3, r3, r2
 800a9b6:	f8c8 3000 	str.w	r3, [r8]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d1d5      	bne.n	800a96a <ArtNetNode::HandleDmxIn()+0xb2>
 800a9be:	f895 36dd 	ldrb.w	r3, [r5, #1757]	; 0x6dd
 800a9c2:	f023 0301 	bic.w	r3, r3, #1
 800a9c6:	e7ce      	b.n	800a966 <ArtNetNode::HandleDmxIn()+0xae>
 800a9c8:	08016b45 	stmdaeq	r1, {r0, r2, r6, r8, r9, fp, sp, lr}
 800a9cc:	0e005000 	cdpeq	0, 0, cr5, cr0, cr0, {0}
 800a9d0:	20001904 	andcs	r1, r0, r4, lsl #18

0800a9d4 <memcmp.constprop.0>:
 800a9d4:	b510      	push	{r4, lr}
 800a9d6:	4907      	ldr	r1, [pc, #28]	; (800a9f4 <memcmp.constprop.0+0x20>)
 800a9d8:	1e42      	subs	r2, r0, #1
 800a9da:	3003      	adds	r0, #3
 800a9dc:	4282      	cmp	r2, r0
 800a9de:	d101      	bne.n	800a9e4 <memcmp.constprop.0+0x10>
 800a9e0:	2000      	movs	r0, #0
 800a9e2:	e006      	b.n	800a9f2 <memcmp.constprop.0+0x1e>
 800a9e4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800a9e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9ec:	42a3      	cmp	r3, r4
 800a9ee:	d0f5      	beq.n	800a9dc <memcmp.constprop.0+0x8>
 800a9f0:	1b18      	subs	r0, r3, r4
 800a9f2:	bd10      	pop	{r4, pc}
 800a9f4:	20001908 	andcs	r1, r0, r8, lsl #18

0800a9f8 <memcpy.constprop.0.isra.0>:
 800a9f8:	3801      	subs	r0, #1
 800a9fa:	1d0b      	adds	r3, r1, #4
 800a9fc:	4299      	cmp	r1, r3
 800a9fe:	d100      	bne.n	800aa02 <memcpy.constprop.0.isra.0+0xa>
 800aa00:	4770      	bx	lr
 800aa02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa06:	f800 2f01 	strb.w	r2, [r0, #1]!
 800aa0a:	e7f7      	b.n	800a9fc <memcpy.constprop.0.isra.0+0x4>

0800aa0c <ArtNetNode::HandleIpProg()>:
 800aa0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa10:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
 800aa14:	b085      	sub	sp, #20
 800aa16:	4604      	mov	r4, r0
 800aa18:	9303      	str	r3, [sp, #12]
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	4d57      	ldr	r5, [pc, #348]	; (800ab7c <ArtNetNode::HandleIpProg()+0x170>)
 800aa1e:	f890 70ae 	ldrb.w	r7, [r0, #174]	; 0xae
 800aa22:	6828      	ldr	r0, [r5, #0]
 800aa24:	f890 b001 	ldrb.w	fp, [r0, #1]
 800aa28:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
 800aa2c:	f06f 0306 	mvn.w	r3, #6
 800aa30:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
 800aa34:	f007 03c0 	and.w	r3, r7, #192	; 0xc0
 800aa38:	2bc0      	cmp	r3, #192	; 0xc0
 800aa3a:	d101      	bne.n	800aa40 <ArtNetNode::HandleIpProg()+0x34>
 800aa3c:	f007 fb7a 	bl	8012134 <Network::EnableDhcp()>
 800aa40:	f007 0388 	and.w	r3, r7, #136	; 0x88
 800aa44:	2b88      	cmp	r3, #136	; 0x88
 800aa46:	d103      	bne.n	800aa50 <ArtNetNode::HandleIpProg()+0x44>
 800aa48:	2100      	movs	r1, #0
 800aa4a:	6828      	ldr	r0, [r5, #0]
 800aa4c:	f007 fb16 	bl	801207c <Network::SetIp(unsigned int)>
 800aa50:	f007 0384 	and.w	r3, r7, #132	; 0x84
 800aa54:	2b84      	cmp	r3, #132	; 0x84
 800aa56:	4e4a      	ldr	r6, [pc, #296]	; (800ab80 <ArtNetNode::HandleIpProg()+0x174>)
 800aa58:	f104 08b0 	add.w	r8, r4, #176	; 0xb0
 800aa5c:	d107      	bne.n	800aa6e <ArtNetNode::HandleIpProg()+0x62>
 800aa5e:	4641      	mov	r1, r8
 800aa60:	4630      	mov	r0, r6
 800aa62:	f7ff ffc9 	bl	800a9f8 <memcpy.constprop.0.isra.0>
 800aa66:	6831      	ldr	r1, [r6, #0]
 800aa68:	6828      	ldr	r0, [r5, #0]
 800aa6a:	f007 fb07 	bl	801207c <Network::SetIp(unsigned int)>
 800aa6e:	f007 0382 	and.w	r3, r7, #130	; 0x82
 800aa72:	2b82      	cmp	r3, #130	; 0x82
 800aa74:	f104 09b4 	add.w	r9, r4, #180	; 0xb4
 800aa78:	d107      	bne.n	800aa8a <ArtNetNode::HandleIpProg()+0x7e>
 800aa7a:	4649      	mov	r1, r9
 800aa7c:	4840      	ldr	r0, [pc, #256]	; (800ab80 <ArtNetNode::HandleIpProg()+0x174>)
 800aa7e:	f7ff ffbb 	bl	800a9f8 <memcpy.constprop.0.isra.0>
 800aa82:	6831      	ldr	r1, [r6, #0]
 800aa84:	6828      	ldr	r0, [r5, #0]
 800aa86:	f007 fb27 	bl	80120d8 <Network::SetNetmask(unsigned int)>
 800aa8a:	f007 0790 	and.w	r7, r7, #144	; 0x90
 800aa8e:	2f90      	cmp	r7, #144	; 0x90
 800aa90:	f104 0aba 	add.w	sl, r4, #186	; 0xba
 800aa94:	d107      	bne.n	800aaa6 <ArtNetNode::HandleIpProg()+0x9a>
 800aa96:	4651      	mov	r1, sl
 800aa98:	4839      	ldr	r0, [pc, #228]	; (800ab80 <ArtNetNode::HandleIpProg()+0x174>)
 800aa9a:	f7ff ffad 	bl	800a9f8 <memcpy.constprop.0.isra.0>
 800aa9e:	6831      	ldr	r1, [r6, #0]
 800aaa0:	6828      	ldr	r0, [r5, #0]
 800aaa2:	f007 fb2f 	bl	8012104 <Network::SetGatewayIp(unsigned int)>
 800aaa6:	6829      	ldr	r1, [r5, #0]
 800aaa8:	784a      	ldrb	r2, [r1, #1]
 800aaaa:	0192      	lsls	r2, r2, #6
 800aaac:	f884 20ba 	strb.w	r2, [r4, #186]	; 0xba
 800aab0:	2200      	movs	r2, #0
 800aab2:	f884 20bb 	strb.w	r2, [r4, #187]	; 0xbb
 800aab6:	7848      	ldrb	r0, [r1, #1]
 800aab8:	6909      	ldr	r1, [r1, #16]
 800aaba:	ea8b 0b00 	eor.w	fp, fp, r0
 800aabe:	4640      	mov	r0, r8
 800aac0:	6031      	str	r1, [r6, #0]
 800aac2:	f7ff ff87 	bl	800a9d4 <memcmp.constprop.0>
 800aac6:	492e      	ldr	r1, [pc, #184]	; (800ab80 <ArtNetNode::HandleIpProg()+0x174>)
 800aac8:	4607      	mov	r7, r0
 800aaca:	4640      	mov	r0, r8
 800aacc:	f7ff ff94 	bl	800a9f8 <memcpy.constprop.0.isra.0>
 800aad0:	6829      	ldr	r1, [r5, #0]
 800aad2:	4648      	mov	r0, r9
 800aad4:	6989      	ldr	r1, [r1, #24]
 800aad6:	6031      	str	r1, [r6, #0]
 800aad8:	f7ff ff7c 	bl	800a9d4 <memcmp.constprop.0>
 800aadc:	4928      	ldr	r1, [pc, #160]	; (800ab80 <ArtNetNode::HandleIpProg()+0x174>)
 800aade:	9003      	str	r0, [sp, #12]
 800aae0:	4648      	mov	r0, r9
 800aae2:	f7ff ff89 	bl	800a9f8 <memcpy.constprop.0.isra.0>
 800aae6:	6829      	ldr	r1, [r5, #0]
 800aae8:	4650      	mov	r0, sl
 800aaea:	6949      	ldr	r1, [r1, #20]
 800aaec:	6031      	str	r1, [r6, #0]
 800aaee:	f7ff ff71 	bl	800a9d4 <memcmp.constprop.0>
 800aaf2:	9b03      	ldr	r3, [sp, #12]
 800aaf4:	4922      	ldr	r1, [pc, #136]	; (800ab80 <ArtNetNode::HandleIpProg()+0x174>)
 800aaf6:	431f      	orrs	r7, r3
 800aaf8:	4307      	orrs	r7, r0
 800aafa:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 800aafe:	bf0c      	ite	eq
 800ab00:	465e      	moveq	r6, fp
 800ab02:	f04b 0601 	orrne.w	r6, fp, #1
 800ab06:	f7ff ff77 	bl	800a9f8 <memcpy.constprop.0.isra.0>
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f641 1336 	movw	r3, #6454	; 0x1936
 800ab10:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
 800ab14:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
 800ab18:	9300      	str	r3, [sp, #0]
 800ab1a:	2222      	movs	r2, #34	; 0x22
 800ab1c:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
 800ab20:	7920      	ldrb	r0, [r4, #4]
 800ab22:	f104 01a0 	add.w	r1, r4, #160	; 0xa0
 800ab26:	f006 fc87 	bl	8011438 <udp_send>
 800ab2a:	b31e      	cbz	r6, 800ab74 <ArtNetNode::HandleIpProg()+0x168>
 800ab2c:	682a      	ldr	r2, [r5, #0]
 800ab2e:	f204 507e 	addw	r0, r4, #1406	; 0x57e
 800ab32:	6913      	ldr	r3, [r2, #16]
 800ab34:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab36:	6991      	ldr	r1, [r2, #24]
 800ab38:	7852      	ldrb	r2, [r2, #1]
 800ab3a:	ea63 0301 	orn	r3, r3, r1
 800ab3e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab40:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800ab44:	4641      	mov	r1, r8
 800ab46:	f023 0302 	bic.w	r3, r3, #2
 800ab4a:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800ab4e:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
 800ab52:	f7ff ff51 	bl	800a9f8 <memcpy.constprop.0.isra.0>
 800ab56:	4641      	mov	r1, r8
 800ab58:	f204 6043 	addw	r0, r4, #1603	; 0x643
 800ab5c:	f7ff ff4c 	bl	800a9f8 <memcpy.constprop.0.isra.0>
 800ab60:	f894 36d6 	ldrb.w	r3, [r4, #1750]	; 0x6d6
 800ab64:	b133      	cbz	r3, 800ab74 <ArtNetNode::HandleIpProg()+0x168>
 800ab66:	2101      	movs	r1, #1
 800ab68:	4620      	mov	r0, r4
 800ab6a:	b005      	add	sp, #20
 800ab6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab70:	f000 b884 	b.w	800ac7c <ArtNetNode::SendPollRelply(bool)>
 800ab74:	b005      	add	sp, #20
 800ab76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab7a:	bf00      	nop
 800ab7c:	2000a2a0 	andcs	sl, r0, r0, lsr #5
 800ab80:	20001908 	andcs	r1, r0, r8, lsl #18

0800ab84 <memcpy.isra.0>:
 800ab84:	3801      	subs	r0, #1
 800ab86:	440a      	add	r2, r1
 800ab88:	4291      	cmp	r1, r2
 800ab8a:	d100      	bne.n	800ab8e <memcpy.isra.0+0xa>
 800ab8c:	4770      	bx	lr
 800ab8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab92:	f800 3f01 	strb.w	r3, [r0, #1]!
 800ab96:	e7f7      	b.n	800ab88 <memcpy.isra.0+0x4>

0800ab98 <ArtNetNode::FillPollReply()>:
 800ab98:	b538      	push	{r3, r4, r5, lr}
 800ab9a:	4604      	mov	r4, r0
 800ab9c:	f200 5074 	addw	r0, r0, #1396	; 0x574
 800aba0:	4603      	mov	r3, r0
 800aba2:	2100      	movs	r1, #0
 800aba4:	f204 6263 	addw	r2, r4, #1635	; 0x663
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d15c      	bne.n	800ac66 <ArtNetNode::FillPollReply()+0xce>
 800abac:	2208      	movs	r2, #8
 800abae:	492f      	ldr	r1, [pc, #188]	; (800ac6c <ArtNetNode::FillPollReply()+0xd4>)
 800abb0:	f7ff ffe8 	bl	800ab84 <memcpy.isra.0>
 800abb4:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 800abb8:	4d2d      	ldr	r5, [pc, #180]	; (800ac70 <ArtNetNode::FillPollReply()+0xd8>)
 800abba:	f8a4 357c 	strh.w	r3, [r4, #1404]	; 0x57c
 800abbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800abc0:	4629      	mov	r1, r5
 800abc2:	f204 507e 	addw	r0, r4, #1406	; 0x57e
 800abc6:	2204      	movs	r2, #4
 800abc8:	602b      	str	r3, [r5, #0]
 800abca:	f7ff ffdb 	bl	800ab84 <memcpy.isra.0>
 800abce:	f641 1336 	movw	r3, #6454	; 0x1936
 800abd2:	f8a4 3582 	strh.w	r3, [r4, #1410]	; 0x582
 800abd6:	4b27      	ldr	r3, [pc, #156]	; (800ac74 <ArtNetNode::FillPollReply()+0xdc>)
 800abd8:	f104 0142 	add.w	r1, r4, #66	; 0x42
 800abdc:	781a      	ldrb	r2, [r3, #0]
 800abde:	f204 508e 	addw	r0, r4, #1422	; 0x58e
 800abe2:	f884 2584 	strb.w	r2, [r4, #1412]	; 0x584
 800abe6:	785b      	ldrb	r3, [r3, #1]
 800abe8:	f884 3585 	strb.w	r3, [r4, #1413]	; 0x585
 800abec:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 800abf0:	f8a4 3588 	strh.w	r3, [r4, #1416]	; 0x588
 800abf4:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800abf8:	f884 358b 	strb.w	r3, [r4, #1419]	; 0x58b
 800abfc:	4b1e      	ldr	r3, [pc, #120]	; (800ac78 <ArtNetNode::FillPollReply()+0xe0>)
 800abfe:	785a      	ldrb	r2, [r3, #1]
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	f884 258c 	strb.w	r2, [r4, #1420]	; 0x58c
 800ac06:	f884 358d 	strb.w	r3, [r4, #1421]	; 0x58d
 800ac0a:	2212      	movs	r2, #18
 800ac0c:	f7ff ffba 	bl	800ab84 <memcpy.isra.0>
 800ac10:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800ac14:	f504 60b4 	add.w	r0, r4, #1440	; 0x5a0
 800ac18:	2240      	movs	r2, #64	; 0x40
 800ac1a:	f7ff ffb3 	bl	800ab84 <memcpy.isra.0>
 800ac1e:	2300      	movs	r3, #0
 800ac20:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800ac24:	f884 363c 	strb.w	r3, [r4, #1596]	; 0x63c
 800ac28:	f204 603d 	addw	r0, r4, #1597	; 0x63d
 800ac2c:	2206      	movs	r2, #6
 800ac2e:	f7ff ffa9 	bl	800ab84 <memcpy.isra.0>
 800ac32:	4629      	mov	r1, r5
 800ac34:	f204 6043 	addw	r0, r4, #1603	; 0x643
 800ac38:	2204      	movs	r2, #4
 800ac3a:	f7ff ffa3 	bl	800ab84 <memcpy.isra.0>
 800ac3e:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800ac42:	f104 0198 	add.w	r1, r4, #152	; 0x98
 800ac46:	f884 3648 	strb.w	r3, [r4, #1608]	; 0x648
 800ac4a:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 800ac4e:	f204 604e 	addw	r0, r4, #1614	; 0x64e
 800ac52:	f884 364d 	strb.w	r3, [r4, #1613]	; 0x64d
 800ac56:	2304      	movs	r3, #4
 800ac58:	2206      	movs	r2, #6
 800ac5a:	f884 3621 	strb.w	r3, [r4, #1569]	; 0x621
 800ac5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac62:	f7ff bf8f 	b.w	800ab84 <memcpy.isra.0>
 800ac66:	f803 1b01 	strb.w	r1, [r3], #1
 800ac6a:	e79d      	b.n	800aba8 <ArtNetNode::FillPollReply()+0x10>
 800ac6c:	08016b60 	stmdaeq	r1, {r5, r6, r8, r9, fp, sp, lr}
 800ac70:	2000190c 	andcs	r1, r0, ip, lsl #18
 800ac74:	08016df9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r8, sl, fp, sp, lr}
 800ac78:	08016df7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, r8, sl, fp, sp, lr}

0800ac7c <ArtNetNode::SendPollRelply(bool)>:
 800ac7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac80:	4604      	mov	r4, r0
 800ac82:	b087      	sub	sp, #28
 800ac84:	b941      	cbnz	r1, 800ac98 <ArtNetNode::SendPollRelply(bool)+0x1c>
 800ac86:	f890 36d5 	ldrb.w	r3, [r0, #1749]	; 0x6d5
 800ac8a:	2b02      	cmp	r3, #2
 800ac8c:	bf02      	ittt	eq
 800ac8e:	f8d0 36c0 	ldreq.w	r3, [r0, #1728]	; 0x6c0
 800ac92:	3301      	addeq	r3, #1
 800ac94:	f8c0 36c0 	streq.w	r3, [r0, #1728]	; 0x6c0
 800ac98:	2600      	movs	r6, #0
 800ac9a:	f04f 0a24 	mov.w	sl, #36	; 0x24
 800ac9e:	4635      	mov	r5, r6
 800aca0:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800aca4:	f8df b10c 	ldr.w	fp, [pc, #268]	; 800adb4 <ArtNetNode::SendPollRelply(bool)+0x138>
 800aca8:	f884 358b 	strb.w	r3, [r4, #1419]	; 0x58b
 800acac:	f104 093e 	add.w	r9, r4, #62	; 0x3e
 800acb0:	7823      	ldrb	r3, [r4, #0]
 800acb2:	42ab      	cmp	r3, r5
 800acb4:	dc05      	bgt.n	800acc2 <ArtNetNode::SendPollRelply(bool)+0x46>
 800acb6:	2300      	movs	r3, #0
 800acb8:	f884 36db 	strb.w	r3, [r4, #1755]	; 0x6db
 800acbc:	b007      	add	sp, #28
 800acbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acc2:	f04f 0800 	mov.w	r8, #0
 800acc6:	f899 3000 	ldrb.w	r3, [r9]
 800acca:	3501      	adds	r5, #1
 800accc:	f884 3586 	strb.w	r3, [r4, #1414]	; 0x586
 800acd0:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 800acd4:	b2f1      	uxtb	r1, r6
 800acd6:	f884 3587 	strb.w	r3, [r4, #1415]	; 0x587
 800acda:	1cf3      	adds	r3, r6, #3
 800acdc:	f884 5647 	strb.w	r5, [r4, #1607]	; 0x647
 800ace0:	9303      	str	r3, [sp, #12]
 800ace2:	9b03      	ldr	r3, [sp, #12]
 800ace4:	428b      	cmp	r3, r1
 800ace6:	da1b      	bge.n	800ad20 <ArtNetNode::SendPollRelply(bool)+0xa4>
 800ace8:	f204 636f 	addw	r3, r4, #1647	; 0x66f
 800acec:	9301      	str	r3, [sp, #4]
 800acee:	f8d4 36c0 	ldr.w	r3, [r4, #1728]	; 0x6c0
 800acf2:	465a      	mov	r2, fp
 800acf4:	2140      	movs	r1, #64	; 0x40
 800acf6:	9300      	str	r3, [sp, #0]
 800acf8:	f884 8621 	strb.w	r8, [r4, #1569]	; 0x621
 800acfc:	f894 36d4 	ldrb.w	r3, [r4, #1748]	; 0x6d4
 800ad00:	f504 60bc 	add.w	r0, r4, #1504	; 0x5e0
 800ad04:	f7fe fb6e 	bl	80093e4 <snprintf>
 800ad08:	f641 1336 	movw	r3, #6454	; 0x1936
 800ad0c:	22ef      	movs	r2, #239	; 0xef
 800ad0e:	9300      	str	r3, [sp, #0]
 800ad10:	7920      	ldrb	r0, [r4, #4]
 800ad12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ad14:	f204 5174 	addw	r1, r4, #1396	; 0x574
 800ad18:	f006 fb8e 	bl	8011438 <udp_send>
 800ad1c:	3604      	adds	r6, #4
 800ad1e:	e7c7      	b.n	800acb0 <ArtNetNode::SendPollRelply(bool)+0x34>
 800ad20:	fb0a 4301 	mla	r3, sl, r1, r4
 800ad24:	69e0      	ldr	r0, [r4, #28]
 800ad26:	f893 76e7 	ldrb.w	r7, [r3, #1767]	; 0x6e7
 800ad2a:	b1a8      	cbz	r0, 800ad58 <ArtNetNode::SendPollRelply(bool)+0xdc>
 800ad2c:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
 800ad30:	2a01      	cmp	r2, #1
 800ad32:	d111      	bne.n	800ad58 <ArtNetNode::SendPollRelply(bool)+0xdc>
 800ad34:	6802      	ldr	r2, [r0, #0]
 800ad36:	9305      	str	r3, [sp, #20]
 800ad38:	9104      	str	r1, [sp, #16]
 800ad3a:	6912      	ldr	r2, [r2, #16]
 800ad3c:	4790      	blx	r2
 800ad3e:	f007 0776 	and.w	r7, r7, #118	; 0x76
 800ad42:	f000 0089 	and.w	r0, r0, #137	; 0x89
 800ad46:	4307      	orrs	r7, r0
 800ad48:	f010 0001 	ands.w	r0, r0, #1
 800ad4c:	bf08      	it	eq
 800ad4e:	9b05      	ldreq	r3, [sp, #20]
 800ad50:	9904      	ldr	r1, [sp, #16]
 800ad52:	bf08      	it	eq
 800ad54:	f8c3 0700 	streq.w	r0, [r3, #1792]	; 0x700
 800ad58:	fb0a 4201 	mla	r2, sl, r1, r4
 800ad5c:	f882 76e7 	strb.w	r7, [r2, #1767]	; 0x6e7
 800ad60:	f892 26e8 	ldrb.w	r2, [r2, #1768]	; 0x6e8
 800ad64:	1b8b      	subs	r3, r1, r6
 800ad66:	b112      	cbz	r2, 800ad6e <ArtNetNode::SendPollRelply(bool)+0xf2>
 800ad68:	2280      	movs	r2, #128	; 0x80
 800ad6a:	f108 0801 	add.w	r8, r8, #1
 800ad6e:	fb0a 4001 	mla	r0, sl, r1, r4
 800ad72:	4423      	add	r3, r4
 800ad74:	f883 2622 	strb.w	r2, [r3, #1570]	; 0x622
 800ad78:	f883 762a 	strb.w	r7, [r3, #1578]	; 0x62a
 800ad7c:	f890 06e6 	ldrb.w	r0, [r0, #1766]	; 0x6e6
 800ad80:	2903      	cmp	r1, #3
 800ad82:	f883 0632 	strb.w	r0, [r3, #1586]	; 0x632
 800ad86:	d812      	bhi.n	800adae <ArtNetNode::SendPollRelply(bool)+0x132>
 800ad88:	eb04 1001 	add.w	r0, r4, r1, lsl #4
 800ad8c:	f890 7778 	ldrb.w	r7, [r0, #1912]	; 0x778
 800ad90:	b12f      	cbz	r7, 800ad9e <ArtNetNode::SendPollRelply(bool)+0x122>
 800ad92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad96:	f883 2622 	strb.w	r2, [r3, #1570]	; 0x622
 800ad9a:	f108 0801 	add.w	r8, r8, #1
 800ad9e:	f890 2777 	ldrb.w	r2, [r0, #1911]	; 0x777
 800ada2:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
 800ada6:	f890 2776 	ldrb.w	r2, [r0, #1910]	; 0x776
 800adaa:	f883 262e 	strb.w	r2, [r3, #1582]	; 0x62e
 800adae:	3101      	adds	r1, #1
 800adb0:	b2c9      	uxtb	r1, r1
 800adb2:	e796      	b.n	800ace2 <ArtNetNode::SendPollRelply(bool)+0x66>
 800adb4:	08016b4d 	stmdaeq	r1, {r0, r2, r3, r6, r8, r9, fp, sp, lr}

0800adb8 <ArtNetNode::HandlePoll()>:
 800adb8:	f890 20ac 	ldrb.w	r2, [r0, #172]	; 0xac
 800adbc:	b410      	push	{r4}
 800adbe:	f3c2 0340 	ubfx	r3, r2, #1, #1
 800adc2:	f880 36d6 	strb.w	r3, [r0, #1750]	; 0x6d6
 800adc6:	f012 0304 	ands.w	r3, r2, #4
 800adca:	d02e      	beq.n	800ae2a <ArtNetNode::HandlePoll()+0x72>
 800adcc:	2301      	movs	r3, #1
 800adce:	f8d0 16c8 	ldr.w	r1, [r0, #1736]	; 0x6c8
 800add2:	f890 46d8 	ldrb.w	r4, [r0, #1752]	; 0x6d8
 800add6:	f880 36d7 	strb.w	r3, [r0, #1751]	; 0x6d7
 800adda:	b979      	cbnz	r1, 800adfc <ArtNetNode::HandlePoll()+0x44>
 800addc:	f8d0 356c 	ldr.w	r3, [r0, #1388]	; 0x56c
 800ade0:	f8c0 36c8 	str.w	r3, [r0, #1736]	; 0x6c8
 800ade4:	b19c      	cbz	r4, 800ae0e <ArtNetNode::HandlePoll()+0x56>
 800ade6:	f890 36e0 	ldrb.w	r3, [r0, #1760]	; 0x6e0
 800adea:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 800adee:	4293      	cmp	r3, r2
 800adf0:	bf28      	it	cs
 800adf2:	4613      	movcs	r3, r2
 800adf4:	f880 36e0 	strb.w	r3, [r0, #1760]	; 0x6e0
 800adf8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800adfa:	e010      	b.n	800ae1e <ArtNetNode::HandlePoll()+0x66>
 800adfc:	2c00      	cmp	r4, #0
 800adfe:	d1f2      	bne.n	800ade6 <ArtNetNode::HandlePoll()+0x2e>
 800ae00:	f8d0 456c 	ldr.w	r4, [r0, #1388]	; 0x56c
 800ae04:	42a1      	cmp	r1, r4
 800ae06:	d002      	beq.n	800ae0e <ArtNetNode::HandlePoll()+0x56>
 800ae08:	f880 36d8 	strb.w	r3, [r0, #1752]	; 0x6d8
 800ae0c:	e7eb      	b.n	800ade6 <ArtNetNode::HandlePoll()+0x2e>
 800ae0e:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
 800ae12:	f880 36e0 	strb.w	r3, [r0, #1760]	; 0x6e0
 800ae16:	0713      	lsls	r3, r2, #28
 800ae18:	d5ee      	bpl.n	800adf8 <ArtNetNode::HandlePoll()+0x40>
 800ae1a:	f8d0 356c 	ldr.w	r3, [r0, #1388]	; 0x56c
 800ae1e:	2101      	movs	r1, #1
 800ae20:	bc10      	pop	{r4}
 800ae22:	f8c0 36c4 	str.w	r3, [r0, #1732]	; 0x6c4
 800ae26:	f7ff bf29 	b.w	800ac7c <ArtNetNode::SendPollRelply(bool)>
 800ae2a:	f880 36d7 	strb.w	r3, [r0, #1751]	; 0x6d7
 800ae2e:	e7f6      	b.n	800ae1e <ArtNetNode::HandlePoll()+0x66>

0800ae30 <ArtNetNode::SendTod(unsigned int)>:
 800ae30:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800ae34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ae38:	2500      	movs	r5, #0
 800ae3a:	f880 30a9 	strb.w	r3, [r0, #169]	; 0xa9
 800ae3e:	2301      	movs	r3, #1
 800ae40:	4688      	mov	r8, r1
 800ae42:	4604      	mov	r4, r0
 800ae44:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
 800ae48:	f880 50a8 	strb.w	r5, [r0, #168]	; 0xa8
 800ae4c:	6900      	ldr	r0, [r0, #16]
 800ae4e:	088f      	lsrs	r7, r1, #2
 800ae50:	6803      	ldr	r3, [r0, #0]
 800ae52:	68db      	ldr	r3, [r3, #12]
 800ae54:	4798      	blx	r3
 800ae56:	f008 0303 	and.w	r3, r8, #3
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 800ae60:	1c7b      	adds	r3, r7, #1
 800ae62:	b2ff      	uxtb	r7, r7
 800ae64:	f884 50ae 	strb.w	r5, [r4, #174]	; 0xae
 800ae68:	f884 50af 	strb.w	r5, [r4, #175]	; 0xaf
 800ae6c:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 800ae70:	f884 50b1 	strb.w	r5, [r4, #177]	; 0xb1
 800ae74:	f884 50b2 	strb.w	r5, [r4, #178]	; 0xb2
 800ae78:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
 800ae7c:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 800ae80:	4427      	add	r7, r4
 800ae82:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ae86:	f884 50b6 	strb.w	r5, [r4, #182]	; 0xb6
 800ae8a:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
 800ae8e:	2324      	movs	r3, #36	; 0x24
 800ae90:	fb03 4308 	mla	r3, r3, r8, r4
 800ae94:	f893 36e6 	ldrb.w	r3, [r3, #1766]	; 0x6e6
 800ae98:	b2c6      	uxtb	r6, r0
 800ae9a:	6920      	ldr	r0, [r4, #16]
 800ae9c:	f884 50b8 	strb.w	r5, [r4, #184]	; 0xb8
 800aea0:	f884 50ba 	strb.w	r5, [r4, #186]	; 0xba
 800aea4:	f884 30b7 	strb.w	r3, [r4, #183]	; 0xb7
 800aea8:	f884 60b9 	strb.w	r6, [r4, #185]	; 0xb9
 800aeac:	f884 60bb 	strb.w	r6, [r4, #187]	; 0xbb
 800aeb0:	6803      	ldr	r3, [r0, #0]
 800aeb2:	4641      	mov	r1, r8
 800aeb4:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 800aeb8:	691b      	ldr	r3, [r3, #16]
 800aeba:	4798      	blx	r3
 800aebc:	2306      	movs	r3, #6
 800aebe:	fb03 f206 	mul.w	r2, r3, r6
 800aec2:	f641 1336 	movw	r3, #6454	; 0x1936
 800aec6:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
 800aeca:	9300      	str	r3, [sp, #0]
 800aecc:	4629      	mov	r1, r5
 800aece:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aed0:	7920      	ldrb	r0, [r4, #4]
 800aed2:	321c      	adds	r2, #28
 800aed4:	f006 fab0 	bl	8011438 <udp_send>
 800aed8:	b002      	add	sp, #8
 800aeda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aede <ArtNetNode::HandleTodControl()>:
 800aede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aee0:	4604      	mov	r4, r0
 800aee2:	4606      	mov	r6, r0
 800aee4:	2500      	movs	r5, #0
 800aee6:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
 800aeea:	f890 70b7 	ldrb.w	r7, [r0, #183]	; 0xb7
 800aeee:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800aef2:	f8b6 36e4 	ldrh.w	r3, [r6, #1764]	; 0x6e4
 800aef6:	42bb      	cmp	r3, r7
 800aef8:	d125      	bne.n	800af46 <ArtNetNode::HandleTodControl()+0x68>
 800aefa:	f896 36e8 	ldrb.w	r3, [r6, #1768]	; 0x6e8
 800aefe:	b313      	cbz	r3, 800af46 <ArtNetNode::HandleTodControl()+0x68>
 800af00:	f896 3705 	ldrb.w	r3, [r6, #1797]	; 0x705
 800af04:	b13b      	cbz	r3, 800af16 <ArtNetNode::HandleTodControl()+0x38>
 800af06:	f894 366e 	ldrb.w	r3, [r4, #1646]	; 0x66e
 800af0a:	b923      	cbnz	r3, 800af16 <ArtNetNode::HandleTodControl()+0x38>
 800af0c:	68a0      	ldr	r0, [r4, #8]
 800af0e:	4629      	mov	r1, r5
 800af10:	6803      	ldr	r3, [r0, #0]
 800af12:	68db      	ldr	r3, [r3, #12]
 800af14:	4798      	blx	r3
 800af16:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
 800af1a:	2b01      	cmp	r3, #1
 800af1c:	d104      	bne.n	800af28 <ArtNetNode::HandleTodControl()+0x4a>
 800af1e:	6920      	ldr	r0, [r4, #16]
 800af20:	4629      	mov	r1, r5
 800af22:	6803      	ldr	r3, [r0, #0]
 800af24:	689b      	ldr	r3, [r3, #8]
 800af26:	4798      	blx	r3
 800af28:	4629      	mov	r1, r5
 800af2a:	4620      	mov	r0, r4
 800af2c:	f7ff ff80 	bl	800ae30 <ArtNetNode::SendTod(unsigned int)>
 800af30:	f896 3705 	ldrb.w	r3, [r6, #1797]	; 0x705
 800af34:	b13b      	cbz	r3, 800af46 <ArtNetNode::HandleTodControl()+0x68>
 800af36:	f894 366e 	ldrb.w	r3, [r4, #1646]	; 0x66e
 800af3a:	b923      	cbnz	r3, 800af46 <ArtNetNode::HandleTodControl()+0x68>
 800af3c:	68a0      	ldr	r0, [r4, #8]
 800af3e:	4629      	mov	r1, r5
 800af40:	6803      	ldr	r3, [r0, #0]
 800af42:	689b      	ldr	r3, [r3, #8]
 800af44:	4798      	blx	r3
 800af46:	3501      	adds	r5, #1
 800af48:	2d04      	cmp	r5, #4
 800af4a:	f106 0624 	add.w	r6, r6, #36	; 0x24
 800af4e:	d1d0      	bne.n	800aef2 <ArtNetNode::HandleTodControl()+0x14>
 800af50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800af52 <ArtNetNode::HandleTodRequest()>:
 800af52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af54:	4604      	mov	r4, r0
 800af56:	4606      	mov	r6, r0
 800af58:	2500      	movs	r5, #0
 800af5a:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
 800af5e:	f890 70b8 	ldrb.w	r7, [r0, #184]	; 0xb8
 800af62:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800af66:	f8b6 36e4 	ldrh.w	r3, [r6, #1764]	; 0x6e4
 800af6a:	42bb      	cmp	r3, r7
 800af6c:	d106      	bne.n	800af7c <ArtNetNode::HandleTodRequest()+0x2a>
 800af6e:	f896 36e8 	ldrb.w	r3, [r6, #1768]	; 0x6e8
 800af72:	b11b      	cbz	r3, 800af7c <ArtNetNode::HandleTodRequest()+0x2a>
 800af74:	4629      	mov	r1, r5
 800af76:	4620      	mov	r0, r4
 800af78:	f7ff ff5a 	bl	800ae30 <ArtNetNode::SendTod(unsigned int)>
 800af7c:	3501      	adds	r5, #1
 800af7e:	2d04      	cmp	r5, #4
 800af80:	f106 0624 	add.w	r6, r6, #36	; 0x24
 800af84:	d1ef      	bne.n	800af66 <ArtNetNode::HandleTodRequest()+0x14>
 800af86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800af88 <ArtNetNode::HandleRdm()>:
 800af88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af8c:	4604      	mov	r4, r0
 800af8e:	4605      	mov	r5, r0
 800af90:	2600      	movs	r6, #0
 800af92:	f04f 0b01 	mov.w	fp, #1
 800af96:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
 800af9a:	f890 70b7 	ldrb.w	r7, [r0, #183]	; 0xb7
 800af9e:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b064 <ArtNetNode::HandleRdm()+0xdc>
 800afa2:	f100 09a0 	add.w	r9, r0, #160	; 0xa0
 800afa6:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800afaa:	f100 08b8 	add.w	r8, r0, #184	; 0xb8
 800afae:	f8b5 36e4 	ldrh.w	r3, [r5, #1764]	; 0x6e4
 800afb2:	42bb      	cmp	r3, r7
 800afb4:	d145      	bne.n	800b042 <ArtNetNode::HandleRdm()+0xba>
 800afb6:	f895 36e8 	ldrb.w	r3, [r5, #1768]	; 0x6e8
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d041      	beq.n	800b042 <ArtNetNode::HandleRdm()+0xba>
 800afbe:	f894 366e 	ldrb.w	r3, [r4, #1646]	; 0x66e
 800afc2:	b9c3      	cbnz	r3, 800aff6 <ArtNetNode::HandleRdm()+0x6e>
 800afc4:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d10c      	bne.n	800afe6 <ArtNetNode::HandleRdm()+0x5e>
 800afcc:	69e0      	ldr	r0, [r4, #28]
 800afce:	b150      	cbz	r0, 800afe6 <ArtNetNode::HandleRdm()+0x5e>
 800afd0:	6803      	ldr	r3, [r0, #0]
 800afd2:	4631      	mov	r1, r6
 800afd4:	691b      	ldr	r3, [r3, #16]
 800afd6:	4798      	blx	r3
 800afd8:	f010 0f89 	tst.w	r0, #137	; 0x89
 800afdc:	bf14      	ite	ne
 800afde:	2301      	movne	r3, #1
 800afe0:	2300      	moveq	r3, #0
 800afe2:	f885 3705 	strb.w	r3, [r5, #1797]	; 0x705
 800afe6:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 800afea:	b123      	cbz	r3, 800aff6 <ArtNetNode::HandleRdm()+0x6e>
 800afec:	68a0      	ldr	r0, [r4, #8]
 800afee:	4631      	mov	r1, r6
 800aff0:	6803      	ldr	r3, [r0, #0]
 800aff2:	68db      	ldr	r3, [r3, #12]
 800aff4:	4798      	blx	r3
 800aff6:	6920      	ldr	r0, [r4, #16]
 800aff8:	4642      	mov	r2, r8
 800affa:	6803      	ldr	r3, [r0, #0]
 800affc:	4631      	mov	r1, r6
 800affe:	695b      	ldr	r3, [r3, #20]
 800b000:	4798      	blx	r3
 800b002:	b358      	cbz	r0, 800b05c <ArtNetNode::HandleRdm()+0xd4>
 800b004:	46c4      	mov	ip, r8
 800b006:	f884 b0ac 	strb.w	fp, [r4, #172]	; 0xac
 800b00a:	7881      	ldrb	r1, [r0, #2]
 800b00c:	1c43      	adds	r3, r0, #1
 800b00e:	460a      	mov	r2, r1
 800b010:	3102      	adds	r1, #2
 800b012:	4408      	add	r0, r1
 800b014:	4298      	cmp	r0, r3
 800b016:	d11c      	bne.n	800b052 <ArtNetNode::HandleRdm()+0xca>
 800b018:	f641 1336 	movw	r3, #6454	; 0x1936
 800b01c:	4649      	mov	r1, r9
 800b01e:	9300      	str	r3, [sp, #0]
 800b020:	7920      	ldrb	r0, [r4, #4]
 800b022:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
 800b026:	3219      	adds	r2, #25
 800b028:	f006 fa06 	bl	8011438 <udp_send>
 800b02c:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 800b030:	b13b      	cbz	r3, 800b042 <ArtNetNode::HandleRdm()+0xba>
 800b032:	f894 366e 	ldrb.w	r3, [r4, #1646]	; 0x66e
 800b036:	b923      	cbnz	r3, 800b042 <ArtNetNode::HandleRdm()+0xba>
 800b038:	68a0      	ldr	r0, [r4, #8]
 800b03a:	4631      	mov	r1, r6
 800b03c:	6803      	ldr	r3, [r0, #0]
 800b03e:	689b      	ldr	r3, [r3, #8]
 800b040:	4798      	blx	r3
 800b042:	3601      	adds	r6, #1
 800b044:	2e04      	cmp	r6, #4
 800b046:	f105 0524 	add.w	r5, r5, #36	; 0x24
 800b04a:	d1b0      	bne.n	800afae <ArtNetNode::HandleRdm()+0x26>
 800b04c:	b003      	add	sp, #12
 800b04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b052:	f813 1b01 	ldrb.w	r1, [r3], #1
 800b056:	f80c 1b01 	strb.w	r1, [ip], #1
 800b05a:	e7db      	b.n	800b014 <ArtNetNode::HandleRdm()+0x8c>
 800b05c:	4650      	mov	r0, sl
 800b05e:	f7fe f999 	bl	8009394 <printf>
 800b062:	e7e3      	b.n	800b02c <ArtNetNode::HandleRdm()+0xa4>
 800b064:	08016b68 	stmdaeq	r1, {r3, r5, r6, r8, r9, fp, sp, lr}

0800b068 <ArtNetNode::HandleSync()>:
 800b068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b06c:	2500      	movs	r5, #0
 800b06e:	2301      	movs	r3, #1
 800b070:	4604      	mov	r4, r0
 800b072:	4606      	mov	r6, r0
 800b074:	46a9      	mov	r9, r5
 800b076:	f880 36d9 	strb.w	r3, [r0, #1753]	; 0x6d9
 800b07a:	4b1e      	ldr	r3, [pc, #120]	; (800b0f4 <ArtNetNode::HandleSync()+0x8c>)
 800b07c:	4f1e      	ldr	r7, [pc, #120]	; (800b0f8 <ArtNetNode::HandleSync()+0x90>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800b0fc <ArtNetNode::HandleSync()+0x94>
 800b084:	f8c0 36d0 	str.w	r3, [r0, #1744]	; 0x6d0
 800b088:	7823      	ldrb	r3, [r4, #0]
 800b08a:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
 800b08e:	d301      	bcc.n	800b094 <ArtNetNode::HandleSync()+0x2c>
 800b090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b094:	f8d6 3700 	ldr.w	r3, [r6, #1792]	; 0x700
 800b098:	bb3b      	cbnz	r3, 800b0ea <ArtNetNode::HandleSync()+0x82>
 800b09a:	f896 36e8 	ldrb.w	r3, [r6, #1768]	; 0x6e8
 800b09e:	b323      	cbz	r3, 800b0ea <ArtNetNode::HandleSync()+0x82>
 800b0a0:	f8d8 3000 	ldr.w	r3, [r8]
 800b0a4:	68a0      	ldr	r0, [r4, #8]
 800b0a6:	07da      	lsls	r2, r3, #31
 800b0a8:	bf5c      	itt	pl
 800b0aa:	2301      	movpl	r3, #1
 800b0ac:	f8c8 3000 	strpl.w	r3, [r8]
 800b0b0:	6803      	ldr	r3, [r0, #0]
 800b0b2:	4629      	mov	r1, r5
 800b0b4:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800b0b8:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 800b0bc:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800b0c0:	47d0      	blx	sl
 800b0c2:	f896 3705 	ldrb.w	r3, [r6, #1797]	; 0x705
 800b0c6:	b93b      	cbnz	r3, 800b0d8 <ArtNetNode::HandleSync()+0x70>
 800b0c8:	68a0      	ldr	r0, [r4, #8]
 800b0ca:	4629      	mov	r1, r5
 800b0cc:	6803      	ldr	r3, [r0, #0]
 800b0ce:	689b      	ldr	r3, [r3, #8]
 800b0d0:	4798      	blx	r3
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	f886 3705 	strb.w	r3, [r6, #1797]	; 0x705
 800b0d8:	f8d8 3000 	ldr.w	r3, [r8]
 800b0dc:	f8c7 9600 	str.w	r9, [r7, #1536]	; 0x600
 800b0e0:	07db      	lsls	r3, r3, #31
 800b0e2:	bf5c      	itt	pl
 800b0e4:	2301      	movpl	r3, #1
 800b0e6:	f8c8 3000 	strpl.w	r3, [r8]
 800b0ea:	3501      	adds	r5, #1
 800b0ec:	f207 6704 	addw	r7, r7, #1540	; 0x604
 800b0f0:	3624      	adds	r6, #36	; 0x24
 800b0f2:	e7c9      	b.n	800b088 <ArtNetNode::HandleSync()+0x20>
 800b0f4:	2000a9dc 	ldrdcs	sl, [r0], -ip
 800b0f8:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800b0fc:	200000ec 	andcs	r0, r0, ip, ror #1

0800b100 <ArtNetNode::HandleTimeCode()>:
 800b100:	4601      	mov	r1, r0
 800b102:	68c0      	ldr	r0, [r0, #12]
 800b104:	31ae      	adds	r1, #174	; 0xae
 800b106:	6803      	ldr	r3, [r0, #0]
 800b108:	691b      	ldr	r3, [r3, #16]
 800b10a:	4718      	bx	r3

0800b10c <ArtNetNode::HandleTimeSync()>:
 800b10c:	b500      	push	{lr}
 800b10e:	f890 30af 	ldrb.w	r3, [r0, #175]	; 0xaf
 800b112:	b08b      	sub	sp, #44	; 0x2c
 800b114:	9301      	str	r3, [sp, #4]
 800b116:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 800b11a:	f890 20b4 	ldrb.w	r2, [r0, #180]	; 0xb4
 800b11e:	9302      	str	r3, [sp, #8]
 800b120:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
 800b124:	a901      	add	r1, sp, #4
 800b126:	9303      	str	r3, [sp, #12]
 800b128:	f890 30b2 	ldrb.w	r3, [r0, #178]	; 0xb2
 800b12c:	9304      	str	r3, [sp, #16]
 800b12e:	f890 30b3 	ldrb.w	r3, [r0, #179]	; 0xb3
 800b132:	9305      	str	r3, [sp, #20]
 800b134:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
 800b138:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b13c:	9306      	str	r3, [sp, #24]
 800b13e:	4b03      	ldr	r3, [pc, #12]	; (800b14c <ArtNetNode::HandleTimeSync()+0x40>)
 800b140:	6818      	ldr	r0, [r3, #0]
 800b142:	f009 fa31 	bl	80145a8 <Hardware::SetTime(tm const*)>
 800b146:	b00b      	add	sp, #44	; 0x2c
 800b148:	f85d fb04 	ldr.w	pc, [sp], #4
 800b14c:	2000a9c8 	andcs	sl, r0, r8, asr #19

0800b150 <ArtNetNode::Print()>:
 800b150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b154:	4605      	mov	r5, r0
 800b156:	4604      	mov	r4, r0
 800b158:	b08b      	sub	sp, #44	; 0x2c
 800b15a:	f815 2b42 	ldrb.w	r2, [r5], #66
 800b15e:	2104      	movs	r1, #4
 800b160:	4852      	ldr	r0, [pc, #328]	; (800b2ac <ArtNetNode::Print()+0x15c>)
 800b162:	f7fe f917 	bl	8009394 <printf>
 800b166:	4b52      	ldr	r3, [pc, #328]	; (800b2b0 <ArtNetNode::Print()+0x160>)
 800b168:	4852      	ldr	r0, [pc, #328]	; (800b2b4 <ArtNetNode::Print()+0x164>)
 800b16a:	7819      	ldrb	r1, [r3, #0]
 800b16c:	785a      	ldrb	r2, [r3, #1]
 800b16e:	f7fe f911 	bl	8009394 <printf>
 800b172:	4629      	mov	r1, r5
 800b174:	4850      	ldr	r0, [pc, #320]	; (800b2b8 <ArtNetNode::Print()+0x168>)
 800b176:	f7fe f90d 	bl	8009394 <printf>
 800b17a:	4850      	ldr	r0, [pc, #320]	; (800b2bc <ArtNetNode::Print()+0x16c>)
 800b17c:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800b180:	f7fe f908 	bl	8009394 <printf>
 800b184:	f894 36de 	ldrb.w	r3, [r4, #1758]	; 0x6de
 800b188:	b983      	cbnz	r3, 800b1ac <ArtNetNode::Print()+0x5c>
 800b18a:	f894 36df 	ldrb.w	r3, [r4, #1759]	; 0x6df
 800b18e:	b153      	cbz	r3, 800b1a6 <ArtNetNode::Print()+0x56>
 800b190:	484b      	ldr	r0, [pc, #300]	; (800b2c0 <ArtNetNode::Print()+0x170>)
 800b192:	f7fe f8ff 	bl	8009394 <printf>
 800b196:	f04f 0b00 	mov.w	fp, #0
 800b19a:	4e4a      	ldr	r6, [pc, #296]	; (800b2c4 <ArtNetNode::Print()+0x174>)
 800b19c:	4f4a      	ldr	r7, [pc, #296]	; (800b2c8 <ArtNetNode::Print()+0x178>)
 800b19e:	7823      	ldrb	r3, [r4, #0]
 800b1a0:	ebbb 0f83 	cmp.w	fp, r3, lsl #2
 800b1a4:	d347      	bcc.n	800b236 <ArtNetNode::Print()+0xe6>
 800b1a6:	b00b      	add	sp, #44	; 0x2c
 800b1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ac:	4847      	ldr	r0, [pc, #284]	; (800b2cc <ArtNetNode::Print()+0x17c>)
 800b1ae:	f7fe f8f1 	bl	8009394 <printf>
 800b1b2:	4626      	mov	r6, r4
 800b1b4:	2500      	movs	r5, #0
 800b1b6:	f8df 8118 	ldr.w	r8, [pc, #280]	; 800b2d0 <ArtNetNode::Print()+0x180>
 800b1ba:	f8df 9118 	ldr.w	r9, [pc, #280]	; 800b2d4 <ArtNetNode::Print()+0x184>
 800b1be:	7823      	ldrb	r3, [r4, #0]
 800b1c0:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
 800b1c4:	d2e1      	bcs.n	800b18a <ArtNetNode::Print()+0x3a>
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	4629      	mov	r1, r5
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	f10d 0225 	add.w	r2, sp, #37	; 0x25
 800b1d0:	f7fe fec8 	bl	8009f64 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 800b1d4:	b360      	cbz	r0, 800b230 <ArtNetNode::Print()+0xe0>
 800b1d6:	eb04 0395 	add.w	r3, r4, r5, lsr #2
 800b1da:	f893 a03e 	ldrb.w	sl, [r3, #62]	; 0x3e
 800b1de:	f893 b03f 	ldrb.w	fp, [r3, #63]	; 0x3f
 800b1e2:	4629      	mov	r1, r5
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800b1ea:	4620      	mov	r0, r4
 800b1ec:	f7fe fea4 	bl	8009f38 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800b1f0:	f8d6 06fc 	ldr.w	r0, [r6, #1788]	; 0x6fc
 800b1f4:	4938      	ldr	r1, [pc, #224]	; (800b2d8 <ArtNetNode::Print()+0x188>)
 800b1f6:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800b1fa:	2800      	cmp	r0, #0
 800b1fc:	bf18      	it	ne
 800b1fe:	4641      	movne	r1, r8
 800b200:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800b204:	08af      	lsrs	r7, r5, #2
 800b206:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800b20a:	e9cd b300 	strd	fp, r3, [sp]
 800b20e:	463a      	mov	r2, r7
 800b210:	4653      	mov	r3, sl
 800b212:	4629      	mov	r1, r5
 800b214:	4648      	mov	r0, r9
 800b216:	f7fe f8bd 	bl	8009394 <printf>
 800b21a:	f8d6 1700 	ldr.w	r1, [r6, #1792]	; 0x700
 800b21e:	4a2f      	ldr	r2, [pc, #188]	; (800b2dc <ArtNetNode::Print()+0x18c>)
 800b220:	4b2f      	ldr	r3, [pc, #188]	; (800b2e0 <ArtNetNode::Print()+0x190>)
 800b222:	4830      	ldr	r0, [pc, #192]	; (800b2e4 <ArtNetNode::Print()+0x194>)
 800b224:	2900      	cmp	r1, #0
 800b226:	bf0c      	ite	eq
 800b228:	4611      	moveq	r1, r2
 800b22a:	4619      	movne	r1, r3
 800b22c:	f7fe f8b2 	bl	8009394 <printf>
 800b230:	3501      	adds	r5, #1
 800b232:	3624      	adds	r6, #36	; 0x24
 800b234:	e7c3      	b.n	800b1be <ArtNetNode::Print()+0x6e>
 800b236:	2300      	movs	r3, #0
 800b238:	4659      	mov	r1, fp
 800b23a:	4620      	mov	r0, r4
 800b23c:	f10d 0225 	add.w	r2, sp, #37	; 0x25
 800b240:	f7fe fe90 	bl	8009f64 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 800b244:	b378      	cbz	r0, 800b2a6 <ArtNetNode::Print()+0x156>
 800b246:	eb04 039b 	add.w	r3, r4, fp, lsr #2
 800b24a:	f893 903e 	ldrb.w	r9, [r3, #62]	; 0x3e
 800b24e:	f893 a03f 	ldrb.w	sl, [r3, #63]	; 0x3f
 800b252:	eb04 130b 	add.w	r3, r4, fp, lsl #4
 800b256:	f8d3 577c 	ldr.w	r5, [r3, #1916]	; 0x77c
 800b25a:	ea4f 089b 	mov.w	r8, fp, lsr #2
 800b25e:	b925      	cbnz	r5, 800b26a <ArtNetNode::Print()+0x11a>
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	699a      	ldr	r2, [r3, #24]
 800b264:	691d      	ldr	r5, [r3, #16]
 800b266:	ea65 0502 	orn	r5, r5, r2
 800b26a:	2300      	movs	r3, #0
 800b26c:	4659      	mov	r1, fp
 800b26e:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800b272:	4620      	mov	r0, r4
 800b274:	f7fe fe60 	bl	8009f38 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800b278:	0e2b      	lsrs	r3, r5, #24
 800b27a:	9306      	str	r3, [sp, #24]
 800b27c:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800b280:	9305      	str	r3, [sp, #20]
 800b282:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800b286:	9304      	str	r3, [sp, #16]
 800b288:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800b28c:	b2ed      	uxtb	r5, r5
 800b28e:	9302      	str	r3, [sp, #8]
 800b290:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800b294:	4642      	mov	r2, r8
 800b296:	e9cd a300 	strd	sl, r3, [sp]
 800b29a:	4659      	mov	r1, fp
 800b29c:	464b      	mov	r3, r9
 800b29e:	4630      	mov	r0, r6
 800b2a0:	9503      	str	r5, [sp, #12]
 800b2a2:	f7fe f877 	bl	8009394 <printf>
 800b2a6:	f10b 0b01 	add.w	fp, fp, #1
 800b2aa:	e778      	b.n	800b19e <ArtNetNode::Print()+0x4e>
 800b2ac:	08016b8e 	stmdaeq	r1, {r1, r2, r3, r7, r8, r9, fp, sp, lr}
 800b2b0:	08016df9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r8, sl, fp, sp, lr}
 800b2b4:	08016b9c 	stmdaeq	r1, {r2, r3, r4, r7, r8, r9, fp, sp, lr}
 800b2b8:	08016bb1 	stmdaeq	r1, {r0, r4, r5, r7, r8, r9, fp, sp, lr}
 800b2bc:	08016bc3 	stmdaeq	r1, {r0, r1, r6, r7, r8, r9, fp, sp, lr}
 800b2c0:	08016c0d 	stmdaeq	r1, {r0, r2, r3, sl, fp, sp, lr}
 800b2c4:	08016c15 	stmdaeq	r1, {r0, r2, r4, sl, fp, sp, lr}
 800b2c8:	2000a2a0 	andcs	sl, r0, r0, lsr #5
 800b2cc:	08016bd5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, r9, fp, sp, lr}
 800b2d0:	08016b7d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r8, r9, fp, sp, lr}
 800b2d4:	08016bde 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r8, r9, fp, sp, lr}
 800b2d8:	08016b79 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, r9, fp, sp, lr}
 800b2dc:	08016b81 	stmdaeq	r1, {r0, r7, r8, r9, fp, sp, lr}
 800b2e0:	08016b89 	stmdaeq	r1, {r0, r3, r7, r8, r9, fp, sp, lr}
 800b2e4:	08016c06 	stmdaeq	r1, {r1, r2, sl, fp, sp, lr}

0800b2e8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 800b2e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b2ea:	88c6      	ldrh	r6, [r0, #6]
 800b2ec:	8885      	ldrh	r5, [r0, #4]
 800b2ee:	42ae      	cmp	r6, r5
 800b2f0:	d216      	bcs.n	800b320 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 800b2f2:	4604      	mov	r4, r0
 800b2f4:	6800      	ldr	r0, [r0, #0]
 800b2f6:	1bad      	subs	r5, r5, r6
 800b2f8:	4430      	add	r0, r6
 800b2fa:	7a26      	ldrb	r6, [r4, #8]
 800b2fc:	b923      	cbnz	r3, 800b308 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 800b2fe:	b926      	cbnz	r6, 800b30a <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 800b300:	9200      	str	r2, [sp, #0]
 800b302:	460b      	mov	r3, r1
 800b304:	4a09      	ldr	r2, [pc, #36]	; (800b32c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 800b306:	e003      	b.n	800b310 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800b308:	b166      	cbz	r6, 800b324 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 800b30a:	460b      	mov	r3, r1
 800b30c:	9200      	str	r2, [sp, #0]
 800b30e:	4a08      	ldr	r2, [pc, #32]	; (800b330 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 800b310:	4629      	mov	r1, r5
 800b312:	f7fe f867 	bl	80093e4 <snprintf>
 800b316:	4285      	cmp	r5, r0
 800b318:	bfa2      	ittt	ge
 800b31a:	88e3      	ldrhge	r3, [r4, #6]
 800b31c:	181b      	addge	r3, r3, r0
 800b31e:	80e3      	strhge	r3, [r4, #6]
 800b320:	b002      	add	sp, #8
 800b322:	bd70      	pop	{r4, r5, r6, pc}
 800b324:	9200      	str	r2, [sp, #0]
 800b326:	460b      	mov	r3, r1
 800b328:	4a02      	ldr	r2, [pc, #8]	; (800b334 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 800b32a:	e7f1      	b.n	800b310 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800b32c:	08016c51 	stmdaeq	r1, {r0, r4, r6, sl, fp, sp, lr}
 800b330:	08016c48 	stmdaeq	r1, {r3, r6, sl, fp, sp, lr}
 800b334:	08016c52 	stmdaeq	r1, {r1, r4, r6, sl, fp, sp, lr}

0800b338 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800b338:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b33a:	88c6      	ldrh	r6, [r0, #6]
 800b33c:	8885      	ldrh	r5, [r0, #4]
 800b33e:	42ae      	cmp	r6, r5
 800b340:	d216      	bcs.n	800b370 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800b342:	4604      	mov	r4, r0
 800b344:	6800      	ldr	r0, [r0, #0]
 800b346:	1bad      	subs	r5, r5, r6
 800b348:	4430      	add	r0, r6
 800b34a:	7a26      	ldrb	r6, [r4, #8]
 800b34c:	b923      	cbnz	r3, 800b358 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800b34e:	b926      	cbnz	r6, 800b35a <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800b350:	9200      	str	r2, [sp, #0]
 800b352:	460b      	mov	r3, r1
 800b354:	4a09      	ldr	r2, [pc, #36]	; (800b37c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800b356:	e003      	b.n	800b360 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800b358:	b166      	cbz	r6, 800b374 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800b35a:	460b      	mov	r3, r1
 800b35c:	9200      	str	r2, [sp, #0]
 800b35e:	4a08      	ldr	r2, [pc, #32]	; (800b380 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800b360:	4629      	mov	r1, r5
 800b362:	f7fe f83f 	bl	80093e4 <snprintf>
 800b366:	4285      	cmp	r5, r0
 800b368:	bfa2      	ittt	ge
 800b36a:	88e3      	ldrhge	r3, [r4, #6]
 800b36c:	181b      	addge	r3, r3, r0
 800b36e:	80e3      	strhge	r3, [r4, #6]
 800b370:	b002      	add	sp, #8
 800b372:	bd70      	pop	{r4, r5, r6, pc}
 800b374:	9200      	str	r2, [sp, #0]
 800b376:	460b      	mov	r3, r1
 800b378:	4a02      	ldr	r2, [pc, #8]	; (800b384 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800b37a:	e7f1      	b.n	800b360 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800b37c:	08016c64 	stmdaeq	r1, {r2, r5, r6, sl, fp, sp, lr}
 800b380:	08016c59 	stmdaeq	r1, {r0, r3, r4, r6, sl, fp, sp, lr}
 800b384:	08016c65 	stmdaeq	r1, {r0, r2, r5, r6, sl, fp, sp, lr}

0800b388 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800b388:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b38a:	460b      	mov	r3, r1
 800b38c:	8885      	ldrh	r5, [r0, #4]
 800b38e:	88c1      	ldrh	r1, [r0, #6]
 800b390:	42a9      	cmp	r1, r5
 800b392:	d214      	bcs.n	800b3be <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800b394:	4604      	mov	r4, r0
 800b396:	6800      	ldr	r0, [r0, #0]
 800b398:	1a6d      	subs	r5, r5, r1
 800b39a:	4408      	add	r0, r1
 800b39c:	7a21      	ldrb	r1, [r4, #8]
 800b39e:	b91a      	cbnz	r2, 800b3a8 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800b3a0:	b919      	cbnz	r1, 800b3aa <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800b3a2:	4a0a      	ldr	r2, [pc, #40]	; (800b3cc <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800b3a4:	9100      	str	r1, [sp, #0]
 800b3a6:	e002      	b.n	800b3ae <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800b3a8:	b159      	cbz	r1, 800b3c2 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800b3aa:	9200      	str	r2, [sp, #0]
 800b3ac:	4a08      	ldr	r2, [pc, #32]	; (800b3d0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800b3ae:	4629      	mov	r1, r5
 800b3b0:	f7fe f818 	bl	80093e4 <snprintf>
 800b3b4:	4285      	cmp	r5, r0
 800b3b6:	bfa2      	ittt	ge
 800b3b8:	88e3      	ldrhge	r3, [r4, #6]
 800b3ba:	181b      	addge	r3, r3, r0
 800b3bc:	80e3      	strhge	r3, [r4, #6]
 800b3be:	b003      	add	sp, #12
 800b3c0:	bd30      	pop	{r4, r5, pc}
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	9200      	str	r2, [sp, #0]
 800b3c6:	4a03      	ldr	r2, [pc, #12]	; (800b3d4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800b3c8:	e7f1      	b.n	800b3ae <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800b3ca:	bf00      	nop
 800b3cc:	08016c51 	stmdaeq	r1, {r0, r4, r6, sl, fp, sp, lr}
 800b3d0:	08016c48 	stmdaeq	r1, {r3, r6, sl, fp, sp, lr}
 800b3d4:	08016c52 	stmdaeq	r1, {r1, r4, r6, sl, fp, sp, lr}

0800b3d8 <strncpy.isra.0>:
 800b3d8:	1e4b      	subs	r3, r1, #1
 800b3da:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800b3de:	b909      	cbnz	r1, 800b3e4 <strncpy.isra.0+0xc>
 800b3e0:	f009 b9fc 	b.w	80147dc <memset>
 800b3e4:	3a01      	subs	r2, #1
 800b3e6:	f800 1b01 	strb.w	r1, [r0], #1
 800b3ea:	d1f6      	bne.n	800b3da <strncpy.isra.0+0x2>
 800b3ec:	4770      	bx	lr
	...

0800b3f0 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>:
 800b3f0:	b510      	push	{r4, lr}
 800b3f2:	2287      	movs	r2, #135	; 0x87
 800b3f4:	4604      	mov	r4, r0
 800b3f6:	f840 1b04 	str.w	r1, [r0], #4
 800b3fa:	2100      	movs	r1, #0
 800b3fc:	f009 f9ee 	bl	80147dc <memset>
 800b400:	2301      	movs	r3, #1
 800b402:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800b406:	f240 3302 	movw	r3, #770	; 0x302
 800b40a:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800b40e:	2304      	movs	r3, #4
 800b410:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 800b414:	4b07      	ldr	r3, [pc, #28]	; (800b434 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)+0x44>)
 800b416:	4620      	mov	r0, r4
 800b418:	785a      	ldrb	r2, [r3, #1]
 800b41a:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
 800b424:	230a      	movs	r3, #10
 800b426:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
 800b42a:	23ff      	movs	r3, #255	; 0xff
 800b42c:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800b430:	bd10      	pop	{r4, pc}
 800b432:	bf00      	nop
 800b434:	08016df5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, sl, fp, sp, lr}

0800b438 <ArtNetParams::Load()>:
 800b438:	b508      	push	{r3, lr}
 800b43a:	2300      	movs	r3, #0
 800b43c:	4601      	mov	r1, r0
 800b43e:	6043      	str	r3, [r0, #4]
 800b440:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800b444:	6800      	ldr	r0, [r0, #0]
 800b446:	b120      	cbz	r0, 800b452 <ArtNetParams::Load()+0x1a>
 800b448:	6803      	ldr	r3, [r0, #0]
 800b44a:	3104      	adds	r1, #4
 800b44c:	68db      	ldr	r3, [r3, #12]
 800b44e:	4798      	blx	r3
 800b450:	2001      	movs	r0, #1
 800b452:	bd08      	pop	{r3, pc}

0800b454 <ArtNetParams::Load(char const*, unsigned int)>:
 800b454:	6803      	ldr	r3, [r0, #0]
 800b456:	b1e3      	cbz	r3, 800b492 <ArtNetParams::Load(char const*, unsigned int)+0x3e>
 800b458:	2300      	movs	r3, #0
 800b45a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b45c:	460d      	mov	r5, r1
 800b45e:	4616      	mov	r6, r2
 800b460:	4604      	mov	r4, r0
 800b462:	6043      	str	r3, [r0, #4]
 800b464:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800b468:	4602      	mov	r2, r0
 800b46a:	490a      	ldr	r1, [pc, #40]	; (800b494 <ArtNetParams::Load(char const*, unsigned int)+0x40>)
 800b46c:	4668      	mov	r0, sp
 800b46e:	f008 fb03 	bl	8013a78 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800b472:	4632      	mov	r2, r6
 800b474:	4629      	mov	r1, r5
 800b476:	4668      	mov	r0, sp
 800b478:	f008 fb02 	bl	8013a80 <ReadConfigFile::Read(char const*, unsigned int)>
 800b47c:	4621      	mov	r1, r4
 800b47e:	f851 0b04 	ldr.w	r0, [r1], #4
 800b482:	6803      	ldr	r3, [r0, #0]
 800b484:	689b      	ldr	r3, [r3, #8]
 800b486:	4798      	blx	r3
 800b488:	4668      	mov	r0, sp
 800b48a:	f008 faf8 	bl	8013a7e <ReadConfigFile::~ReadConfigFile()>
 800b48e:	b002      	add	sp, #8
 800b490:	bd70      	pop	{r4, r5, r6, pc}
 800b492:	4770      	bx	lr
 800b494:	0800b855 	stmdaeq	r0, {r0, r2, r4, r6, fp, ip, sp, pc}

0800b498 <ArtNetParams::SetBool(unsigned char, unsigned int)>:
 800b498:	6843      	ldr	r3, [r0, #4]
 800b49a:	b111      	cbz	r1, 800b4a2 <ArtNetParams::SetBool(unsigned char, unsigned int)+0xa>
 800b49c:	4313      	orrs	r3, r2
 800b49e:	6043      	str	r3, [r0, #4]
 800b4a0:	4770      	bx	lr
 800b4a2:	ea23 0302 	bic.w	r3, r3, r2
 800b4a6:	e7fa      	b.n	800b49e <ArtNetParams::SetBool(unsigned char, unsigned int)+0x6>

0800b4a8 <ArtNetParams::callbackFunction(char const*)>:
 800b4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ac:	460e      	mov	r6, r1
 800b4ae:	b0a5      	sub	sp, #148	; 0x94
 800b4b0:	4604      	mov	r4, r0
 800b4b2:	49a6      	ldr	r1, [pc, #664]	; (800b74c <ArtNetParams::callbackFunction(char const*)+0x2a4>)
 800b4b4:	4630      	mov	r0, r6
 800b4b6:	f10d 0205 	add.w	r2, sp, #5
 800b4ba:	f008 fc43 	bl	8013d44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b4be:	b940      	cbnz	r0, 800b4d2 <ArtNetParams::callbackFunction(char const*)+0x2a>
 800b4c0:	2220      	movs	r2, #32
 800b4c2:	4620      	mov	r0, r4
 800b4c4:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800b4c8:	b025      	add	sp, #148	; 0x94
 800b4ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ce:	f7ff bfe3 	b.w	800b498 <ArtNetParams::SetBool(unsigned char, unsigned int)>
 800b4d2:	2311      	movs	r3, #17
 800b4d4:	4630      	mov	r0, r6
 800b4d6:	9303      	str	r3, [sp, #12]
 800b4d8:	499d      	ldr	r1, [pc, #628]	; (800b750 <ArtNetParams::callbackFunction(char const*)+0x2a8>)
 800b4da:	ab03      	add	r3, sp, #12
 800b4dc:	f104 0210 	add.w	r2, r4, #16
 800b4e0:	f008 fb02 	bl	8013ae8 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b4e4:	b938      	cbnz	r0, 800b4f6 <ArtNetParams::callbackFunction(char const*)+0x4e>
 800b4e6:	9b03      	ldr	r3, [sp, #12]
 800b4e8:	4423      	add	r3, r4
 800b4ea:	7418      	strb	r0, [r3, #16]
 800b4ec:	6863      	ldr	r3, [r4, #4]
 800b4ee:	f043 0302 	orr.w	r3, r3, #2
 800b4f2:	6063      	str	r3, [r4, #4]
 800b4f4:	e0d0      	b.n	800b698 <ArtNetParams::callbackFunction(char const*)+0x1f0>
 800b4f6:	233f      	movs	r3, #63	; 0x3f
 800b4f8:	4630      	mov	r0, r6
 800b4fa:	9303      	str	r3, [sp, #12]
 800b4fc:	4995      	ldr	r1, [pc, #596]	; (800b754 <ArtNetParams::callbackFunction(char const*)+0x2ac>)
 800b4fe:	ab03      	add	r3, sp, #12
 800b500:	f104 0222 	add.w	r2, r4, #34	; 0x22
 800b504:	f008 faf0 	bl	8013ae8 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b508:	b938      	cbnz	r0, 800b51a <ArtNetParams::callbackFunction(char const*)+0x72>
 800b50a:	9b03      	ldr	r3, [sp, #12]
 800b50c:	4423      	add	r3, r4
 800b50e:	f883 0022 	strb.w	r0, [r3, #34]	; 0x22
 800b512:	6863      	ldr	r3, [r4, #4]
 800b514:	f043 0301 	orr.w	r3, r3, #1
 800b518:	e7eb      	b.n	800b4f2 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800b51a:	4630      	mov	r0, r6
 800b51c:	498e      	ldr	r1, [pc, #568]	; (800b758 <ArtNetParams::callbackFunction(char const*)+0x2b0>)
 800b51e:	f10d 0206 	add.w	r2, sp, #6
 800b522:	f008 fb5d 	bl	8013be0 <Sscan::HexUint16(char const*, char const*, unsigned short&)>
 800b526:	b940      	cbnz	r0, 800b53a <ArtNetParams::callbackFunction(char const*)+0x92>
 800b528:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b52c:	ba5b      	rev16	r3, r3
 800b52e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 800b532:	6863      	ldr	r3, [r4, #4]
 800b534:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b538:	e7db      	b.n	800b4f2 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800b53a:	4630      	mov	r0, r6
 800b53c:	4987      	ldr	r1, [pc, #540]	; (800b75c <ArtNetParams::callbackFunction(char const*)+0x2b4>)
 800b53e:	f10d 0205 	add.w	r2, sp, #5
 800b542:	f008 fbff 	bl	8013d44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b546:	b958      	cbnz	r0, 800b560 <ArtNetParams::callbackFunction(char const*)+0xb8>
 800b548:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b54c:	6863      	ldr	r3, [r4, #4]
 800b54e:	2a0a      	cmp	r2, #10
 800b550:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
 800b554:	bf14      	ite	ne
 800b556:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 800b55a:	f423 6300 	biceq.w	r3, r3, #2048	; 0x800
 800b55e:	e7c8      	b.n	800b4f2 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800b560:	4630      	mov	r0, r6
 800b562:	497f      	ldr	r1, [pc, #508]	; (800b760 <ArtNetParams::callbackFunction(char const*)+0x2b8>)
 800b564:	f10d 0205 	add.w	r2, sp, #5
 800b568:	f008 fbec 	bl	8013d44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b56c:	b910      	cbnz	r0, 800b574 <ArtNetParams::callbackFunction(char const*)+0xcc>
 800b56e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b572:	e7a6      	b.n	800b4c2 <ArtNetParams::callbackFunction(char const*)+0x1a>
 800b574:	4630      	mov	r0, r6
 800b576:	497b      	ldr	r1, [pc, #492]	; (800b764 <ArtNetParams::callbackFunction(char const*)+0x2bc>)
 800b578:	f10d 0205 	add.w	r2, sp, #5
 800b57c:	f008 fbe2 	bl	8013d44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b580:	b950      	cbnz	r0, 800b598 <ArtNetParams::callbackFunction(char const*)+0xf0>
 800b582:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b586:	6863      	ldr	r3, [r4, #4]
 800b588:	7222      	strb	r2, [r4, #8]
 800b58a:	b112      	cbz	r2, 800b592 <ArtNetParams::callbackFunction(char const*)+0xea>
 800b58c:	f043 0304 	orr.w	r3, r3, #4
 800b590:	e7af      	b.n	800b4f2 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800b592:	f023 0304 	bic.w	r3, r3, #4
 800b596:	e7ac      	b.n	800b4f2 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800b598:	4630      	mov	r0, r6
 800b59a:	4973      	ldr	r1, [pc, #460]	; (800b768 <ArtNetParams::callbackFunction(char const*)+0x2c0>)
 800b59c:	f10d 0205 	add.w	r2, sp, #5
 800b5a0:	f008 fbd0 	bl	8013d44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b5a4:	b950      	cbnz	r0, 800b5bc <ArtNetParams::callbackFunction(char const*)+0x114>
 800b5a6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b5aa:	6863      	ldr	r3, [r4, #4]
 800b5ac:	7262      	strb	r2, [r4, #9]
 800b5ae:	b112      	cbz	r2, 800b5b6 <ArtNetParams::callbackFunction(char const*)+0x10e>
 800b5b0:	f043 0308 	orr.w	r3, r3, #8
 800b5b4:	e79d      	b.n	800b4f2 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800b5b6:	f023 0308 	bic.w	r3, r3, #8
 800b5ba:	e79a      	b.n	800b4f2 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800b5bc:	2303      	movs	r3, #3
 800b5be:	4630      	mov	r0, r6
 800b5c0:	9303      	str	r3, [sp, #12]
 800b5c2:	496a      	ldr	r1, [pc, #424]	; (800b76c <ArtNetParams::callbackFunction(char const*)+0x2c4>)
 800b5c4:	ab03      	add	r3, sp, #12
 800b5c6:	aa04      	add	r2, sp, #16
 800b5c8:	f008 fa8e 	bl	8013ae8 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b5cc:	b9f0      	cbnz	r0, 800b60c <ArtNetParams::callbackFunction(char const*)+0x164>
 800b5ce:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800b5d2:	6863      	ldr	r3, [r4, #4]
 800b5d4:	f042 0220 	orr.w	r2, r2, #32
 800b5d8:	2a6c      	cmp	r2, #108	; 0x6c
 800b5da:	d111      	bne.n	800b600 <ArtNetParams::callbackFunction(char const*)+0x158>
 800b5dc:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800b5e0:	f042 0220 	orr.w	r2, r2, #32
 800b5e4:	2a74      	cmp	r2, #116	; 0x74
 800b5e6:	d10b      	bne.n	800b600 <ArtNetParams::callbackFunction(char const*)+0x158>
 800b5e8:	f89d 2012 	ldrb.w	r2, [sp, #18]
 800b5ec:	f042 0220 	orr.w	r2, r2, #32
 800b5f0:	2a70      	cmp	r2, #112	; 0x70
 800b5f2:	d105      	bne.n	800b600 <ArtNetParams::callbackFunction(char const*)+0x158>
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5fa:	f884 206f 	strb.w	r2, [r4, #111]	; 0x6f
 800b5fe:	e778      	b.n	800b4f2 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800b600:	2200      	movs	r2, #0
 800b602:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b606:	f884 206f 	strb.w	r2, [r4, #111]	; 0x6f
 800b60a:	e772      	b.n	800b4f2 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800b60c:	2304      	movs	r3, #4
 800b60e:	4630      	mov	r0, r6
 800b610:	9303      	str	r3, [sp, #12]
 800b612:	4957      	ldr	r1, [pc, #348]	; (800b770 <ArtNetParams::callbackFunction(char const*)+0x2c8>)
 800b614:	ab03      	add	r3, sp, #12
 800b616:	aa04      	add	r2, sp, #16
 800b618:	f008 fa66 	bl	8013ae8 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b61c:	b9c0      	cbnz	r0, 800b650 <ArtNetParams::callbackFunction(char const*)+0x1a8>
 800b61e:	2304      	movs	r3, #4
 800b620:	4954      	ldr	r1, [pc, #336]	; (800b774 <ArtNetParams::callbackFunction(char const*)+0x2cc>)
 800b622:	aa04      	add	r2, sp, #16
 800b624:	3b01      	subs	r3, #1
 800b626:	d206      	bcs.n	800b636 <ArtNetParams::callbackFunction(char const*)+0x18e>
 800b628:	2301      	movs	r3, #1
 800b62a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
 800b62e:	6863      	ldr	r3, [r4, #4]
 800b630:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b634:	e75d      	b.n	800b4f2 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800b636:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b63a:	f811 0b01 	ldrb.w	r0, [r1], #1
 800b63e:	4285      	cmp	r5, r0
 800b640:	d0f0      	beq.n	800b624 <ArtNetParams::callbackFunction(char const*)+0x17c>
 800b642:	2200      	movs	r2, #0
 800b644:	6863      	ldr	r3, [r4, #4]
 800b646:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
 800b64a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800b64e:	e750      	b.n	800b4f2 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800b650:	2500      	movs	r5, #0
 800b652:	4f49      	ldr	r7, [pc, #292]	; (800b778 <ArtNetParams::callbackFunction(char const*)+0x2d0>)
 800b654:	f8df 8124 	ldr.w	r8, [pc, #292]	; 800b77c <ArtNetParams::callbackFunction(char const*)+0x2d4>
 800b658:	f8df 9124 	ldr.w	r9, [pc, #292]	; 800b780 <ArtNetParams::callbackFunction(char const*)+0x2d8>
 800b65c:	f8df a124 	ldr.w	sl, [pc, #292]	; 800b784 <ArtNetParams::callbackFunction(char const*)+0x2dc>
 800b660:	4639      	mov	r1, r7
 800b662:	4630      	mov	r0, r6
 800b664:	f10d 0205 	add.w	r2, sp, #5
 800b668:	f008 fb6c 	bl	8013d44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b66c:	b9b8      	cbnz	r0, 800b69e <ArtNetParams::callbackFunction(char const*)+0x1f6>
 800b66e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b672:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800b676:	6862      	ldr	r2, [r4, #4]
 800b678:	280f      	cmp	r0, #15
 800b67a:	fa03 f305 	lsl.w	r3, r3, r5
 800b67e:	eb04 0105 	add.w	r1, r4, r5
 800b682:	d803      	bhi.n	800b68c <ArtNetParams::callbackFunction(char const*)+0x1e4>
 800b684:	f881 006b 	strb.w	r0, [r1, #107]	; 0x6b
 800b688:	4313      	orrs	r3, r2
 800b68a:	e732      	b.n	800b4f2 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800b68c:	3501      	adds	r5, #1
 800b68e:	f881 506b 	strb.w	r5, [r1, #107]	; 0x6b
 800b692:	ea22 0203 	bic.w	r2, r2, r3
 800b696:	6062      	str	r2, [r4, #4]
 800b698:	b025      	add	sp, #148	; 0x94
 800b69a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b69e:	f04f 0b12 	mov.w	fp, #18
 800b6a2:	2303      	movs	r3, #3
 800b6a4:	fb0b fb05 	mul.w	fp, fp, r5
 800b6a8:	9303      	str	r3, [sp, #12]
 800b6aa:	4630      	mov	r0, r6
 800b6ac:	ab03      	add	r3, sp, #12
 800b6ae:	aa04      	add	r2, sp, #16
 800b6b0:	eb08 010b 	add.w	r1, r8, fp
 800b6b4:	f008 fa18 	bl	8013ae8 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b6b8:	b9f0      	cbnz	r0, 800b6f8 <ArtNetParams::callbackFunction(char const*)+0x250>
 800b6ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b6be:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800b6c2:	40ab      	lsls	r3, r5
 800b6c4:	f041 0120 	orr.w	r1, r1, #32
 800b6c8:	296c      	cmp	r1, #108	; 0x6c
 800b6ca:	6862      	ldr	r2, [r4, #4]
 800b6cc:	4425      	add	r5, r4
 800b6ce:	d10f      	bne.n	800b6f0 <ArtNetParams::callbackFunction(char const*)+0x248>
 800b6d0:	f89d 1011 	ldrb.w	r1, [sp, #17]
 800b6d4:	f041 0120 	orr.w	r1, r1, #32
 800b6d8:	2974      	cmp	r1, #116	; 0x74
 800b6da:	d109      	bne.n	800b6f0 <ArtNetParams::callbackFunction(char const*)+0x248>
 800b6dc:	f89d 1012 	ldrb.w	r1, [sp, #18]
 800b6e0:	f041 0120 	orr.w	r1, r1, #32
 800b6e4:	2970      	cmp	r1, #112	; 0x70
 800b6e6:	d103      	bne.n	800b6f0 <ArtNetParams::callbackFunction(char const*)+0x248>
 800b6e8:	2101      	movs	r1, #1
 800b6ea:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800b6ee:	e7cb      	b.n	800b688 <ArtNetParams::callbackFunction(char const*)+0x1e0>
 800b6f0:	2100      	movs	r1, #0
 800b6f2:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800b6f6:	e7cc      	b.n	800b692 <ArtNetParams::callbackFunction(char const*)+0x1ea>
 800b6f8:	2304      	movs	r3, #4
 800b6fa:	4630      	mov	r0, r6
 800b6fc:	9303      	str	r3, [sp, #12]
 800b6fe:	aa04      	add	r2, sp, #16
 800b700:	ab03      	add	r3, sp, #12
 800b702:	eb09 1105 	add.w	r1, r9, r5, lsl #4
 800b706:	f008 f9ef 	bl	8013ae8 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b70a:	2305      	movs	r3, #5
 800b70c:	2800      	cmp	r0, #0
 800b70e:	d13b      	bne.n	800b788 <ArtNetParams::callbackFunction(char const*)+0x2e0>
 800b710:	4a18      	ldr	r2, [pc, #96]	; (800b774 <ArtNetParams::callbackFunction(char const*)+0x2cc>)
 800b712:	a904      	add	r1, sp, #16
 800b714:	3b01      	subs	r3, #1
 800b716:	d108      	bne.n	800b72a <ArtNetParams::callbackFunction(char const*)+0x282>
 800b718:	2201      	movs	r2, #1
 800b71a:	1963      	adds	r3, r4, r5
 800b71c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800b720:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b724:	6863      	ldr	r3, [r4, #4]
 800b726:	40aa      	lsls	r2, r5
 800b728:	e7ae      	b.n	800b688 <ArtNetParams::callbackFunction(char const*)+0x1e0>
 800b72a:	f811 6b01 	ldrb.w	r6, [r1], #1
 800b72e:	f812 0b01 	ldrb.w	r0, [r2], #1
 800b732:	4286      	cmp	r6, r0
 800b734:	d0ee      	beq.n	800b714 <ArtNetParams::callbackFunction(char const*)+0x26c>
 800b736:	2100      	movs	r1, #0
 800b738:	1962      	adds	r2, r4, r5
 800b73a:	6863      	ldr	r3, [r4, #4]
 800b73c:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
 800b740:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b744:	40aa      	lsls	r2, r5
 800b746:	ea23 0302 	bic.w	r3, r3, r2
 800b74a:	e6d2      	b.n	800b4f2 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800b74c:	08016cce 	stmdaeq	r1, {r1, r2, r3, r6, r7, sl, fp, sp, lr}
 800b750:	08016d3b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r8, sl, fp, sp, lr}
 800b754:	08016d27 	stmdaeq	r1, {r0, r1, r2, r5, r8, sl, fp, sp, lr}
 800b758:	08016d31 	stmdaeq	r1, {r0, r4, r5, r8, sl, fp, sp, lr}
 800b75c:	08016dbc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r8, sl, fp, sp, lr}
 800b760:	08016da6 	stmdaeq	r1, {r1, r2, r5, r7, r8, sl, fp, sp, lr}
 800b764:	08016dd6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r8, sl, fp, sp, lr}
 800b768:	08016dda 	stmdaeq	r1, {r1, r3, r4, r6, r7, r8, sl, fp, sp, lr}
 800b76c:	080187fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, r9, sl, pc}
 800b770:	08016de1 	stmdaeq	r1, {r0, r5, r6, r7, r8, sl, fp, sp, lr}
 800b774:	08016c6c 	stmdaeq	r1, {r2, r3, r5, r6, sl, fp, sp, lr}
 800b778:	08018813 	stmdaeq	r1, {r0, r1, r4, fp, pc}
 800b77c:	080188e3 	stmdaeq	r1, {r0, r1, r5, r6, r7, fp, pc}
 800b780:	08016ce7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, sl, fp, sp, lr}
 800b784:	08018946 	stmdaeq	r1, {r1, r2, r6, r8, fp, pc}
 800b788:	9303      	str	r3, [sp, #12]
 800b78a:	4630      	mov	r0, r6
 800b78c:	ab03      	add	r3, sp, #12
 800b78e:	aa04      	add	r2, sp, #16
 800b790:	eb0a 010b 	add.w	r1, sl, fp
 800b794:	f008 f9a8 	bl	8013ae8 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b798:	bb60      	cbnz	r0, 800b7f4 <ArtNetParams::callbackFunction(char const*)+0x34c>
 800b79a:	2201      	movs	r2, #1
 800b79c:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
 800b7a0:	40aa      	lsls	r2, r5
 800b7a2:	ea23 0302 	bic.w	r3, r3, r2
 800b7a6:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800b7aa:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800b7ae:	f042 0220 	orr.w	r2, r2, #32
 800b7b2:	2a69      	cmp	r2, #105	; 0x69
 800b7b4:	d118      	bne.n	800b7e8 <ArtNetParams::callbackFunction(char const*)+0x340>
 800b7b6:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800b7ba:	f042 0220 	orr.w	r2, r2, #32
 800b7be:	2a6e      	cmp	r2, #110	; 0x6e
 800b7c0:	d112      	bne.n	800b7e8 <ArtNetParams::callbackFunction(char const*)+0x340>
 800b7c2:	f89d 2012 	ldrb.w	r2, [sp, #18]
 800b7c6:	f042 0220 	orr.w	r2, r2, #32
 800b7ca:	2a70      	cmp	r2, #112	; 0x70
 800b7cc:	d10c      	bne.n	800b7e8 <ArtNetParams::callbackFunction(char const*)+0x340>
 800b7ce:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800b7d2:	f042 0220 	orr.w	r2, r2, #32
 800b7d6:	2a75      	cmp	r2, #117	; 0x75
 800b7d8:	d106      	bne.n	800b7e8 <ArtNetParams::callbackFunction(char const*)+0x340>
 800b7da:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800b7de:	f042 0220 	orr.w	r2, r2, #32
 800b7e2:	2a74      	cmp	r2, #116	; 0x74
 800b7e4:	f43f af58 	beq.w	800b698 <ArtNetParams::callbackFunction(char const*)+0x1f0>
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	40aa      	lsls	r2, r5
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800b7f2:	e751      	b.n	800b698 <ArtNetParams::callbackFunction(char const*)+0x1f0>
 800b7f4:	2118      	movs	r1, #24
 800b7f6:	4b15      	ldr	r3, [pc, #84]	; (800b84c <ArtNetParams::callbackFunction(char const*)+0x3a4>)
 800b7f8:	4630      	mov	r0, r6
 800b7fa:	fb01 3105 	mla	r1, r1, r5, r3
 800b7fe:	aa02      	add	r2, sp, #8
 800b800:	f008 fa18 	bl	8013c34 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 800b804:	b968      	cbnz	r0, 800b822 <ArtNetParams::callbackFunction(char const*)+0x37a>
 800b806:	2201      	movs	r2, #1
 800b808:	9902      	ldr	r1, [sp, #8]
 800b80a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b80e:	40aa      	lsls	r2, r5
 800b810:	f8c3 107b 	str.w	r1, [r3, #123]	; 0x7b
 800b814:	b292      	uxth	r2, r2
 800b816:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b81a:	b1a1      	cbz	r1, 800b846 <ArtNetParams::callbackFunction(char const*)+0x39e>
 800b81c:	4313      	orrs	r3, r2
 800b81e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 800b822:	3501      	adds	r5, #1
 800b824:	2d04      	cmp	r5, #4
 800b826:	f107 0710 	add.w	r7, r7, #16
 800b82a:	f47f af19 	bne.w	800b660 <ArtNetParams::callbackFunction(char const*)+0x1b8>
 800b82e:	4630      	mov	r0, r6
 800b830:	4907      	ldr	r1, [pc, #28]	; (800b850 <ArtNetParams::callbackFunction(char const*)+0x3a8>)
 800b832:	f10d 0205 	add.w	r2, sp, #5
 800b836:	f008 fa85 	bl	8013d44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b83a:	2800      	cmp	r0, #0
 800b83c:	f47f af2c 	bne.w	800b698 <ArtNetParams::callbackFunction(char const*)+0x1f0>
 800b840:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b844:	e63d      	b.n	800b4c2 <ArtNetParams::callbackFunction(char const*)+0x1a>
 800b846:	ea23 0302 	bic.w	r3, r3, r2
 800b84a:	e7e8      	b.n	800b81e <ArtNetParams::callbackFunction(char const*)+0x376>
 800b84c:	08016d46 	stmdaeq	r1, {r1, r2, r6, r8, sl, fp, sp, lr}
 800b850:	08016cd9 	stmdaeq	r1, {r0, r3, r4, r6, r7, sl, fp, sp, lr}

0800b854 <ArtNetParams::staticCallbackFunction(void*, char const*)>:
 800b854:	f7ff be28 	b.w	800b4a8 <ArtNetParams::callbackFunction(char const*)>

0800b858 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>:
 800b858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b85c:	4604      	mov	r4, r0
 800b85e:	4615      	mov	r5, r2
 800b860:	461e      	mov	r6, r3
 800b862:	b086      	sub	sp, #24
 800b864:	3004      	adds	r0, #4
 800b866:	2900      	cmp	r1, #0
 800b868:	f000 814b 	beq.w	800bb02 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2aa>
 800b86c:	2287      	movs	r2, #135	; 0x87
 800b86e:	f008 ff9e 	bl	80147ae <memmove>
 800b872:	4633      	mov	r3, r6
 800b874:	462a      	mov	r2, r5
 800b876:	49a6      	ldr	r1, [pc, #664]	; (800bb10 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b8>)
 800b878:	a803      	add	r0, sp, #12
 800b87a:	f008 f82d 	bl	80138d8 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800b87e:	2500      	movs	r5, #0
 800b880:	4ea4      	ldr	r6, [pc, #656]	; (800bb14 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2bc>)
 800b882:	f8df 8294 	ldr.w	r8, [pc, #660]	; 800bb18 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c0>
 800b886:	4fa5      	ldr	r7, [pc, #660]	; (800bb1c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c4>)
 800b888:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
 800b88c:	4631      	mov	r1, r6
 800b88e:	412b      	asrs	r3, r5
 800b890:	f013 0f01 	tst.w	r3, #1
 800b894:	ea6f 0303 	mvn.w	r3, r3
 800b898:	bf0c      	ite	eq
 800b89a:	4642      	moveq	r2, r8
 800b89c:	463a      	movne	r2, r7
 800b89e:	f003 0301 	and.w	r3, r3, #1
 800b8a2:	a803      	add	r0, sp, #12
 800b8a4:	3501      	adds	r5, #1
 800b8a6:	f7ff fd47 	bl	800b338 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800b8aa:	2d04      	cmp	r5, #4
 800b8ac:	f106 0612 	add.w	r6, r6, #18
 800b8b0:	d1ea      	bne.n	800b888 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x30>
 800b8b2:	6863      	ldr	r3, [r4, #4]
 800b8b4:	7a22      	ldrb	r2, [r4, #8]
 800b8b6:	499a      	ldr	r1, [pc, #616]	; (800bb20 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c8>)
 800b8b8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b8bc:	a803      	add	r0, sp, #12
 800b8be:	f7ff fd13 	bl	800b2e8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800b8c2:	6863      	ldr	r3, [r4, #4]
 800b8c4:	7a62      	ldrb	r2, [r4, #9]
 800b8c6:	4997      	ldr	r1, [pc, #604]	; (800bb24 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2cc>)
 800b8c8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b8cc:	a803      	add	r0, sp, #12
 800b8ce:	f7ff fd0b 	bl	800b2e8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800b8d2:	4995      	ldr	r1, [pc, #596]	; (800bb28 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d0>)
 800b8d4:	a803      	add	r0, sp, #12
 800b8d6:	f008 f885 	bl	80139e4 <PropertiesBuilder::AddComment(char const*)>
 800b8da:	2500      	movs	r5, #0
 800b8dc:	f44f 5800 	mov.w	r8, #8192	; 0x2000
 800b8e0:	4e92      	ldr	r6, [pc, #584]	; (800bb2c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d4>)
 800b8e2:	f104 076b 	add.w	r7, r4, #107	; 0x6b
 800b8e6:	6862      	ldr	r2, [r4, #4]
 800b8e8:	fa08 f305 	lsl.w	r3, r8, r5
 800b8ec:	4393      	bics	r3, r2
 800b8ee:	bf0c      	ite	eq
 800b8f0:	2301      	moveq	r3, #1
 800b8f2:	2300      	movne	r3, #0
 800b8f4:	4631      	mov	r1, r6
 800b8f6:	f817 2b01 	ldrb.w	r2, [r7], #1
 800b8fa:	a803      	add	r0, sp, #12
 800b8fc:	3501      	adds	r5, #1
 800b8fe:	f7ff fcf3 	bl	800b2e8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800b902:	2d04      	cmp	r5, #4
 800b904:	f106 0610 	add.w	r6, r6, #16
 800b908:	d1ed      	bne.n	800b8e6 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 800b90a:	4989      	ldr	r1, [pc, #548]	; (800bb30 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d8>)
 800b90c:	a803      	add	r0, sp, #12
 800b90e:	f008 f869 	bl	80139e4 <PropertiesBuilder::AddComment(char const*)>
 800b912:	6863      	ldr	r3, [r4, #4]
 800b914:	f104 0622 	add.w	r6, r4, #34	; 0x22
 800b918:	f013 0501 	ands.w	r5, r3, #1
 800b91c:	d108      	bne.n	800b930 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0xd8>
 800b91e:	4b85      	ldr	r3, [pc, #532]	; (800bb34 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 800b920:	223f      	movs	r2, #63	; 0x3f
 800b922:	6819      	ldr	r1, [r3, #0]
 800b924:	4630      	mov	r0, r6
 800b926:	3154      	adds	r1, #84	; 0x54
 800b928:	f7ff fd56 	bl	800b3d8 <strncpy.isra.0>
 800b92c:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 800b930:	6863      	ldr	r3, [r4, #4]
 800b932:	4632      	mov	r2, r6
 800b934:	f003 0301 	and.w	r3, r3, #1
 800b938:	497f      	ldr	r1, [pc, #508]	; (800bb38 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2e0>)
 800b93a:	a803      	add	r0, sp, #12
 800b93c:	f7ff fcfc 	bl	800b338 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800b940:	6863      	ldr	r3, [r4, #4]
 800b942:	f104 0610 	add.w	r6, r4, #16
 800b946:	f013 0502 	ands.w	r5, r3, #2
 800b94a:	d108      	bne.n	800b95e <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x106>
 800b94c:	4b79      	ldr	r3, [pc, #484]	; (800bb34 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 800b94e:	2211      	movs	r2, #17
 800b950:	6819      	ldr	r1, [r3, #0]
 800b952:	4630      	mov	r0, r6
 800b954:	3142      	adds	r1, #66	; 0x42
 800b956:	f7ff fd3f 	bl	800b3d8 <strncpy.isra.0>
 800b95a:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 800b95e:	6863      	ldr	r3, [r4, #4]
 800b960:	4632      	mov	r2, r6
 800b962:	4976      	ldr	r1, [pc, #472]	; (800bb3c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2e4>)
 800b964:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b968:	a803      	add	r0, sp, #12
 800b96a:	f7ff fce5 	bl	800b338 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800b96e:	2104      	movs	r1, #4
 800b970:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 800b974:	6863      	ldr	r3, [r4, #4]
 800b976:	ba52      	rev16	r2, r2
 800b978:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800b97c:	b292      	uxth	r2, r2
 800b97e:	9100      	str	r1, [sp, #0]
 800b980:	a803      	add	r0, sp, #12
 800b982:	496f      	ldr	r1, [pc, #444]	; (800bb40 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2e8>)
 800b984:	f008 f848 	bl	8013a18 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)>
 800b988:	496e      	ldr	r1, [pc, #440]	; (800bb44 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2ec>)
 800b98a:	a803      	add	r0, sp, #12
 800b98c:	f008 f82a 	bl	80139e4 <PropertiesBuilder::AddComment(char const*)>
 800b990:	6862      	ldr	r2, [r4, #4]
 800b992:	496d      	ldr	r1, [pc, #436]	; (800bb48 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2f0>)
 800b994:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800b998:	a803      	add	r0, sp, #12
 800b99a:	f7ff fcf5 	bl	800b388 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800b99e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 800bb4c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2f4>
 800b9a2:	f894 206f 	ldrb.w	r2, [r4, #111]	; 0x6f
 800b9a6:	6863      	ldr	r3, [r4, #4]
 800b9a8:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bb50 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2f8>
 800b9ac:	4969      	ldr	r1, [pc, #420]	; (800bb54 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2fc>)
 800b9ae:	2a00      	cmp	r2, #0
 800b9b0:	bf0c      	ite	eq
 800b9b2:	464a      	moveq	r2, r9
 800b9b4:	4642      	movne	r2, r8
 800b9b6:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800b9ba:	a803      	add	r0, sp, #12
 800b9bc:	f7ff fcbc 	bl	800b338 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800b9c0:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
 800b9c4:	6863      	ldr	r3, [r4, #4]
 800b9c6:	4964      	ldr	r1, [pc, #400]	; (800bb58 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x300>)
 800b9c8:	4a64      	ldr	r2, [pc, #400]	; (800bb5c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x304>)
 800b9ca:	f3c3 5380 	ubfx	r3, r3, #22, #1
 800b9ce:	2800      	cmp	r0, #0
 800b9d0:	bf18      	it	ne
 800b9d2:	460a      	movne	r2, r1
 800b9d4:	4962      	ldr	r1, [pc, #392]	; (800bb60 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x308>)
 800b9d6:	a803      	add	r0, sp, #12
 800b9d8:	f7ff fcae 	bl	800b338 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800b9dc:	2500      	movs	r5, #0
 800b9de:	4e61      	ldr	r6, [pc, #388]	; (800bb64 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x30c>)
 800b9e0:	f8df a184 	ldr.w	sl, [pc, #388]	; 800bb68 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x310>
 800b9e4:	f104 0770 	add.w	r7, r4, #112	; 0x70
 800b9e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b9ec:	6861      	ldr	r1, [r4, #4]
 800b9ee:	40ab      	lsls	r3, r5
 800b9f0:	438b      	bics	r3, r1
 800b9f2:	f04f 0112 	mov.w	r1, #18
 800b9f6:	f817 2b01 	ldrb.w	r2, [r7], #1
 800b9fa:	bf0c      	ite	eq
 800b9fc:	2301      	moveq	r3, #1
 800b9fe:	2300      	movne	r3, #0
 800ba00:	fb01 a105 	mla	r1, r1, r5, sl
 800ba04:	2a00      	cmp	r2, #0
 800ba06:	bf0c      	ite	eq
 800ba08:	464a      	moveq	r2, r9
 800ba0a:	4642      	movne	r2, r8
 800ba0c:	a803      	add	r0, sp, #12
 800ba0e:	f7ff fc93 	bl	800b338 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800ba12:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ba16:	6862      	ldr	r2, [r4, #4]
 800ba18:	40ab      	lsls	r3, r5
 800ba1a:	4393      	bics	r3, r2
 800ba1c:	7938      	ldrb	r0, [r7, #4]
 800ba1e:	494e      	ldr	r1, [pc, #312]	; (800bb58 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x300>)
 800ba20:	4a4e      	ldr	r2, [pc, #312]	; (800bb5c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x304>)
 800ba22:	bf0c      	ite	eq
 800ba24:	2301      	moveq	r3, #1
 800ba26:	2300      	movne	r3, #0
 800ba28:	3501      	adds	r5, #1
 800ba2a:	2800      	cmp	r0, #0
 800ba2c:	bf18      	it	ne
 800ba2e:	460a      	movne	r2, r1
 800ba30:	4631      	mov	r1, r6
 800ba32:	a803      	add	r0, sp, #12
 800ba34:	f7ff fc80 	bl	800b338 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800ba38:	2d04      	cmp	r5, #4
 800ba3a:	f106 0610 	add.w	r6, r6, #16
 800ba3e:	d1d3      	bne.n	800b9e8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x190>
 800ba40:	6863      	ldr	r3, [r4, #4]
 800ba42:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
 800ba46:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 800ba4a:	4948      	ldr	r1, [pc, #288]	; (800bb6c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x314>)
 800ba4c:	a803      	add	r0, sp, #12
 800ba4e:	f7ff fc4b 	bl	800b2e8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800ba52:	6862      	ldr	r2, [r4, #4]
 800ba54:	4946      	ldr	r1, [pc, #280]	; (800bb70 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x318>)
 800ba56:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800ba5a:	a803      	add	r0, sp, #12
 800ba5c:	f7ff fc94 	bl	800b388 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800ba60:	4944      	ldr	r1, [pc, #272]	; (800bb74 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x31c>)
 800ba62:	a803      	add	r0, sp, #12
 800ba64:	f007 ffbe 	bl	80139e4 <PropertiesBuilder::AddComment(char const*)>
 800ba68:	2500      	movs	r5, #0
 800ba6a:	2601      	movs	r6, #1
 800ba6c:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800bb78 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x320>
 800ba70:	4f30      	ldr	r7, [pc, #192]	; (800bb34 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 800ba72:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800ba76:	fa06 f305 	lsl.w	r3, r6, r5
 800ba7a:	b29b      	uxth	r3, r3
 800ba7c:	401a      	ands	r2, r3
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	bf0c      	ite	eq
 800ba82:	2301      	moveq	r3, #1
 800ba84:	2300      	movne	r3, #0
 800ba86:	f105 021c 	add.w	r2, r5, #28
 800ba8a:	d008      	beq.n	800ba9e <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x246>
 800ba8c:	6839      	ldr	r1, [r7, #0]
 800ba8e:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800ba92:	f8d1 077c 	ldr.w	r0, [r1, #1916]	; 0x77c
 800ba96:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800ba9a:	f8c1 000b 	str.w	r0, [r1, #11]
 800ba9e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800baa2:	4641      	mov	r1, r8
 800baa4:	f8d2 200b 	ldr.w	r2, [r2, #11]
 800baa8:	a803      	add	r0, sp, #12
 800baaa:	3501      	adds	r5, #1
 800baac:	f007 ff56 	bl	801395c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 800bab0:	2d04      	cmp	r5, #4
 800bab2:	f108 0818 	add.w	r8, r8, #24
 800bab6:	d1dc      	bne.n	800ba72 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x21a>
 800bab8:	4930      	ldr	r1, [pc, #192]	; (800bb7c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x324>)
 800baba:	a803      	add	r0, sp, #12
 800babc:	f007 ff92 	bl	80139e4 <PropertiesBuilder::AddComment(char const*)>
 800bac0:	6862      	ldr	r2, [r4, #4]
 800bac2:	492f      	ldr	r1, [pc, #188]	; (800bb80 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x328>)
 800bac4:	f3c2 62c0 	ubfx	r2, r2, #27, #1
 800bac8:	a803      	add	r0, sp, #12
 800baca:	f7ff fc5d 	bl	800b388 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800bace:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800bad2:	b17b      	cbz	r3, 800baf4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x29c>
 800bad4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800bad8:	9b03      	ldr	r3, [sp, #12]
 800bada:	4413      	add	r3, r2
 800badc:	227d      	movs	r2, #125	; 0x7d
 800bade:	f803 2c01 	strb.w	r2, [r3, #-1]
 800bae2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800bae6:	9903      	ldr	r1, [sp, #12]
 800bae8:	54ca      	strb	r2, [r1, r3]
 800baea:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800baee:	3301      	adds	r3, #1
 800baf0:	f8ad 3012 	strh.w	r3, [sp, #18]
 800baf4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800baf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bafa:	601a      	str	r2, [r3, #0]
 800bafc:	b006      	add	sp, #24
 800bafe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb02:	6823      	ldr	r3, [r4, #0]
 800bb04:	4601      	mov	r1, r0
 800bb06:	681a      	ldr	r2, [r3, #0]
 800bb08:	4618      	mov	r0, r3
 800bb0a:	68d2      	ldr	r2, [r2, #12]
 800bb0c:	4790      	blx	r2
 800bb0e:	e6b0      	b.n	800b872 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x1a>
 800bb10:	08016dea 	stmdaeq	r1, {r1, r3, r5, r6, r7, r8, sl, fp, sp, lr}
 800bb14:	08018946 	stmdaeq	r1, {r1, r2, r6, r8, fp, pc}
 800bb18:	08016c71 	stmdaeq	r1, {r0, r4, r5, r6, sl, fp, sp, lr}
 800bb1c:	08016c77 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, sl, fp, sp, lr}
 800bb20:	08016dd6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r8, sl, fp, sp, lr}
 800bb24:	08016dda 	stmdaeq	r1, {r1, r3, r4, r6, r7, r8, sl, fp, sp, lr}
 800bb28:	08016c8d 	stmdaeq	r1, {r0, r2, r3, r7, sl, fp, sp, lr}
 800bb2c:	08018813 	stmdaeq	r1, {r0, r1, r4, fp, pc}
 800bb30:	08016ca6 	stmdaeq	r1, {r1, r2, r5, r7, sl, fp, sp, lr}
 800bb34:	20001900 	andcs	r1, r0, r0, lsl #18
 800bb38:	08016d27 	stmdaeq	r1, {r0, r1, r2, r5, r8, sl, fp, sp, lr}
 800bb3c:	08016d3b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r8, sl, fp, sp, lr}
 800bb40:	08016d31 	stmdaeq	r1, {r0, r4, r5, r8, sl, fp, sp, lr}
 800bb44:	08016cab 	stmdaeq	r1, {r0, r1, r3, r5, r7, sl, fp, sp, lr}
 800bb48:	08016cce 	stmdaeq	r1, {r1, r2, r3, r6, r7, sl, fp, sp, lr}
 800bb4c:	08016c82 	stmdaeq	r1, {r1, r7, sl, fp, sp, lr}
 800bb50:	08016c7e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, sl, fp, sp, lr}
 800bb54:	080187fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, r9, sl, pc}
 800bb58:	08016c6c 	stmdaeq	r1, {r2, r3, r5, r6, sl, fp, sp, lr}
 800bb5c:	08016c86 	stmdaeq	r1, {r1, r2, r7, sl, fp, sp, lr}
 800bb60:	08016de1 	stmdaeq	r1, {r0, r5, r6, r7, r8, sl, fp, sp, lr}
 800bb64:	08016ce7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, sl, fp, sp, lr}
 800bb68:	080188e3 	stmdaeq	r1, {r0, r1, r5, r6, r7, fp, pc}
 800bb6c:	08016dbc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r8, sl, fp, sp, lr}
 800bb70:	08016da6 	stmdaeq	r1, {r1, r2, r5, r7, r8, sl, fp, sp, lr}
 800bb74:	08016cba 	stmdaeq	r1, {r1, r3, r4, r5, r7, sl, fp, sp, lr}
 800bb78:	08016d46 	stmdaeq	r1, {r1, r2, r6, r8, sl, fp, sp, lr}
 800bb7c:	08016cc4 	stmdaeq	r1, {r2, r6, r7, sl, fp, sp, lr}
 800bb80:	08016cd9 	stmdaeq	r1, {r0, r3, r4, r6, r7, sl, fp, sp, lr}

0800bb84 <ArtNetParams::Save(char*, unsigned int, unsigned int&)>:
 800bb84:	b513      	push	{r0, r1, r4, lr}
 800bb86:	6804      	ldr	r4, [r0, #0]
 800bb88:	b914      	cbnz	r4, 800bb90 <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800bb8a:	601c      	str	r4, [r3, #0]
 800bb8c:	b002      	add	sp, #8
 800bb8e:	bd10      	pop	{r4, pc}
 800bb90:	9300      	str	r3, [sp, #0]
 800bb92:	4613      	mov	r3, r2
 800bb94:	460a      	mov	r2, r1
 800bb96:	2100      	movs	r1, #0
 800bb98:	f7ff fe5e 	bl	800b858 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>
 800bb9c:	e7f6      	b.n	800bb8c <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800bb9e <ArtNetParams::Set(ArtNetNode*)>:
 800bb9e:	6843      	ldr	r3, [r0, #4]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d07b      	beq.n	800bc9c <ArtNetParams::Set(ArtNetNode*)+0xfe>
 800bba4:	079a      	lsls	r2, r3, #30
 800bba6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbaa:	4604      	mov	r4, r0
 800bbac:	460d      	mov	r5, r1
 800bbae:	d504      	bpl.n	800bbba <ArtNetParams::Set(ArtNetNode*)+0x1c>
 800bbb0:	f100 0110 	add.w	r1, r0, #16
 800bbb4:	4628      	mov	r0, r5
 800bbb6:	f7fd ff81 	bl	8009abc <ArtNetNode::SetShortName(char const*)>
 800bbba:	6863      	ldr	r3, [r4, #4]
 800bbbc:	07db      	lsls	r3, r3, #31
 800bbbe:	d504      	bpl.n	800bbca <ArtNetParams::Set(ArtNetNode*)+0x2c>
 800bbc0:	4628      	mov	r0, r5
 800bbc2:	f104 0122 	add.w	r1, r4, #34	; 0x22
 800bbc6:	f7fd ffa1 	bl	8009b0c <ArtNetNode::SetLongName(char const*)>
 800bbca:	6863      	ldr	r3, [r4, #4]
 800bbcc:	075f      	lsls	r7, r3, #29
 800bbce:	d504      	bpl.n	800bbda <ArtNetParams::Set(ArtNetNode*)+0x3c>
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	4628      	mov	r0, r5
 800bbd4:	7a21      	ldrb	r1, [r4, #8]
 800bbd6:	f7fe fae0 	bl	800a19a <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800bbda:	6863      	ldr	r3, [r4, #4]
 800bbdc:	071e      	lsls	r6, r3, #28
 800bbde:	d504      	bpl.n	800bbea <ArtNetParams::Set(ArtNetNode*)+0x4c>
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	4628      	mov	r0, r5
 800bbe4:	7a61      	ldrb	r1, [r4, #9]
 800bbe6:	f7fe faaa 	bl	800a13e <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800bbea:	6863      	ldr	r3, [r4, #4]
 800bbec:	0558      	lsls	r0, r3, #21
 800bbee:	d504      	bpl.n	800bbfa <ArtNetParams::Set(ArtNetNode*)+0x5c>
 800bbf0:	4628      	mov	r0, r5
 800bbf2:	f104 0164 	add.w	r1, r4, #100	; 0x64
 800bbf6:	f7fe f853 	bl	8009ca0 <ArtNetNode::SetOemValue(unsigned char const*)>
 800bbfa:	6863      	ldr	r3, [r4, #4]
 800bbfc:	2600      	movs	r6, #0
 800bbfe:	0519      	lsls	r1, r3, #20
 800bc00:	bf44      	itt	mi
 800bc02:	f44f 727a 	movmi.w	r2, #1000	; 0x3e8
 800bc06:	f894 3066 	ldrbmi.w	r3, [r4, #102]	; 0x66
 800bc0a:	f44f 2880 	mov.w	r8, #262144	; 0x40000
 800bc0e:	bf44      	itt	mi
 800bc10:	4353      	mulmi	r3, r2
 800bc12:	f8c5 36cc 	strmi.w	r3, [r5, #1740]	; 0x6cc
 800bc16:	6863      	ldr	r3, [r4, #4]
 800bc18:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
 800bc1c:	04da      	lsls	r2, r3, #19
 800bc1e:	bf48      	it	mi
 800bc20:	2301      	movmi	r3, #1
 800bc22:	f04f 0a01 	mov.w	sl, #1
 800bc26:	bf48      	it	mi
 800bc28:	f885 36dc 	strbmi.w	r3, [r5, #1756]	; 0x6dc
 800bc2c:	f104 0770 	add.w	r7, r4, #112	; 0x70
 800bc30:	6863      	ldr	r3, [r4, #4]
 800bc32:	fa08 f206 	lsl.w	r2, r8, r6
 800bc36:	439a      	bics	r2, r3
 800bc38:	bf0c      	ite	eq
 800bc3a:	783a      	ldrbeq	r2, [r7, #0]
 800bc3c:	f894 206f 	ldrbne.w	r2, [r4, #111]	; 0x6f
 800bc40:	4631      	mov	r1, r6
 800bc42:	4628      	mov	r0, r5
 800bc44:	f7fe fb08 	bl	800a258 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 800bc48:	6863      	ldr	r3, [r4, #4]
 800bc4a:	fa09 f206 	lsl.w	r2, r9, r6
 800bc4e:	439a      	bics	r2, r3
 800bc50:	bf0c      	ite	eq
 800bc52:	797a      	ldrbeq	r2, [r7, #5]
 800bc54:	f894 2074 	ldrbne.w	r2, [r4, #116]	; 0x74
 800bc58:	4631      	mov	r1, r6
 800bc5a:	4628      	mov	r0, r5
 800bc5c:	f7fe facb 	bl	800a1f6 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 800bc60:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800bc64:	fa0a f306 	lsl.w	r3, sl, r6
 800bc68:	b29b      	uxth	r3, r3
 800bc6a:	4393      	bics	r3, r2
 800bc6c:	d109      	bne.n	800bc82 <ArtNetParams::Set(ArtNetNode*)+0xe4>
 800bc6e:	f106 031c 	add.w	r3, r6, #28
 800bc72:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bc76:	4631      	mov	r1, r6
 800bc78:	4628      	mov	r0, r5
 800bc7a:	f8d3 200b 	ldr.w	r2, [r3, #11]
 800bc7e:	f7fe fe05 	bl	800a88c <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>
 800bc82:	3601      	adds	r6, #1
 800bc84:	2e04      	cmp	r6, #4
 800bc86:	f107 0701 	add.w	r7, r7, #1
 800bc8a:	d1d1      	bne.n	800bc30 <ArtNetParams::Set(ArtNetNode*)+0x92>
 800bc8c:	6863      	ldr	r3, [r4, #4]
 800bc8e:	011b      	lsls	r3, r3, #4
 800bc90:	bf44      	itt	mi
 800bc92:	2301      	movmi	r3, #1
 800bc94:	f885 309e 	strbmi.w	r3, [r5, #158]	; 0x9e
 800bc98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc9c:	4770      	bx	lr

0800bc9e <ArtNetParams::Dump()>:
 800bc9e:	4770      	bx	lr

0800bca0 <ArtNetNode::HandleTrigger()>:
 800bca0:	f890 30ae 	ldrb.w	r3, [r0, #174]	; 0xae
 800bca4:	4601      	mov	r1, r0
 800bca6:	2bff      	cmp	r3, #255	; 0xff
 800bca8:	d103      	bne.n	800bcb2 <ArtNetNode::HandleTrigger()+0x12>
 800bcaa:	f890 20af 	ldrb.w	r2, [r0, #175]	; 0xaf
 800bcae:	2aff      	cmp	r2, #255	; 0xff
 800bcb0:	d009      	beq.n	800bcc6 <ArtNetNode::HandleTrigger()+0x26>
 800bcb2:	f891 2040 	ldrb.w	r2, [r1, #64]	; 0x40
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	d10a      	bne.n	800bcd0 <ArtNetNode::HandleTrigger()+0x30>
 800bcba:	f891 20af 	ldrb.w	r2, [r1, #175]	; 0xaf
 800bcbe:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d104      	bne.n	800bcd0 <ArtNetNode::HandleTrigger()+0x30>
 800bcc6:	6988      	ldr	r0, [r1, #24]
 800bcc8:	31b0      	adds	r1, #176	; 0xb0
 800bcca:	6803      	ldr	r3, [r0, #0]
 800bccc:	689b      	ldr	r3, [r3, #8]
 800bcce:	4718      	bx	r3
 800bcd0:	4770      	bx	lr
	...

0800bcd4 <e131::universe_to_multicast_ip(unsigned short)>:
 800bcd4:	b513      	push	{r0, r1, r4, lr}
 800bcd6:	4604      	mov	r4, r0
 800bcd8:	a901      	add	r1, sp, #4
 800bcda:	4806      	ldr	r0, [pc, #24]	; (800bcf4 <e131::universe_to_multicast_ip(unsigned short)+0x20>)
 800bcdc:	f008 fcac 	bl	8014638 <inet_aton>
 800bce0:	9801      	ldr	r0, [sp, #4]
 800bce2:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 800bce6:	0224      	lsls	r4, r4, #8
 800bce8:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800bcec:	4320      	orrs	r0, r4
 800bcee:	b002      	add	sp, #8
 800bcf0:	bd10      	pop	{r4, pc}
 800bcf2:	bf00      	nop
 800bcf4:	08016dfb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, sl, fp, sp, lr}

0800bcf8 <memset.constprop.0.isra.0>:
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	4401      	add	r1, r0
 800bcfc:	4288      	cmp	r0, r1
 800bcfe:	d100      	bne.n	800bd02 <memset.constprop.0.isra.0+0xa>
 800bd00:	4770      	bx	lr
 800bd02:	f800 3b01 	strb.w	r3, [r0], #1
 800bd06:	e7f9      	b.n	800bcfc <memset.constprop.0.isra.0+0x4>

0800bd08 <memcpy.isra.0>:
 800bd08:	3801      	subs	r0, #1
 800bd0a:	440a      	add	r2, r1
 800bd0c:	4291      	cmp	r1, r2
 800bd0e:	d100      	bne.n	800bd12 <memcpy.isra.0+0xa>
 800bd10:	4770      	bx	lr
 800bd12:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd16:	f800 3f01 	strb.w	r3, [r0, #1]!
 800bd1a:	e7f7      	b.n	800bd0c <memcpy.isra.0+0x4>

0800bd1c <lightset::Data::IOutput(LightSet*, unsigned int) const>:
 800bd1c:	f240 6304 	movw	r3, #1540	; 0x604
 800bd20:	b470      	push	{r4, r5, r6}
 800bd22:	4605      	mov	r5, r0
 800bd24:	4608      	mov	r0, r1
 800bd26:	4353      	muls	r3, r2
 800bd28:	4611      	mov	r1, r2
 800bd2a:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 800bd2e:	18ea      	adds	r2, r5, r3
 800bd30:	6803      	ldr	r3, [r0, #0]
 800bd32:	691e      	ldr	r6, [r3, #16]
 800bd34:	f8d2 3600 	ldr.w	r3, [r2, #1536]	; 0x600
 800bd38:	46b4      	mov	ip, r6
 800bd3a:	192a      	adds	r2, r5, r4
 800bd3c:	bc70      	pop	{r4, r5, r6}
 800bd3e:	4760      	bx	ip

0800bd40 <E131Bridge::Start()>:
 800bd40:	6943      	ldr	r3, [r0, #20]
 800bd42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd44:	4604      	mov	r4, r0
 800bd46:	b35b      	cbz	r3, 800bda0 <E131Bridge::Start()+0x60>
 800bd48:	6983      	ldr	r3, [r0, #24]
 800bd4a:	b9cb      	cbnz	r3, 800bd80 <E131Bridge::Start()+0x40>
 800bd4c:	a901      	add	r1, sp, #4
 800bd4e:	4818      	ldr	r0, [pc, #96]	; (800bdb0 <E131Bridge::Start()+0x70>)
 800bd50:	f008 fc72 	bl	8014638 <inet_aton>
 800bd54:	9b01      	ldr	r3, [sp, #4]
 800bd56:	f240 207e 	movw	r0, #638	; 0x27e
 800bd5a:	f043 4356 	orr.w	r3, r3, #3590324224	; 0xd6000000
 800bd5e:	f443 037a 	orr.w	r3, r3, #16384000	; 0xfa0000
 800bd62:	6223      	str	r3, [r4, #32]
 800bd64:	f008 fc64 	bl	8014630 <operator new(unsigned int)>
 800bd68:	61a0      	str	r0, [r4, #24]
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	f000 fdc4 	bl	800c8f8 <E131Bridge::FillDataPacket()>
 800bd70:	f44f 608f 	mov.w	r0, #1144	; 0x478
 800bd74:	f008 fc5c 	bl	8014630 <operator new(unsigned int)>
 800bd78:	61e0      	str	r0, [r4, #28]
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	f000 fd12 	bl	800c7a4 <E131Bridge::FillDiscoveryPacket()>
 800bd80:	2500      	movs	r5, #0
 800bd82:	270c      	movs	r7, #12
 800bd84:	f204 6622 	addw	r6, r4, #1570	; 0x622
 800bd88:	fb07 f305 	mul.w	r3, r7, r5
 800bd8c:	5cf3      	ldrb	r3, [r6, r3]
 800bd8e:	b123      	cbz	r3, 800bd9a <E131Bridge::Start()+0x5a>
 800bd90:	6960      	ldr	r0, [r4, #20]
 800bd92:	4629      	mov	r1, r5
 800bd94:	6803      	ldr	r3, [r0, #0]
 800bd96:	689b      	ldr	r3, [r3, #8]
 800bd98:	4798      	blx	r3
 800bd9a:	3501      	adds	r5, #1
 800bd9c:	2d04      	cmp	r5, #4
 800bd9e:	d1f3      	bne.n	800bd88 <E131Bridge::Start()+0x48>
 800bda0:	2102      	movs	r1, #2
 800bda2:	4b04      	ldr	r3, [pc, #16]	; (800bdb4 <E131Bridge::Start()+0x74>)
 800bda4:	6818      	ldr	r0, [r3, #0]
 800bda6:	b003      	add	sp, #12
 800bda8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bdac:	f008 bb58 	b.w	8014460 <LedBlink::SetMode(ledblink::Mode)>
 800bdb0:	08016dfb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, sl, fp, sp, lr}
 800bdb4:	2000a9c4 	andcs	sl, r0, r4, asr #19

0800bdb8 <E131Bridge::Stop()>:
 800bdb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdbc:	2500      	movs	r5, #0
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	4604      	mov	r4, r0
 800bdc2:	f240 6804 	movw	r8, #1540	; 0x604
 800bdc6:	462e      	mov	r6, r5
 800bdc8:	f880 34f4 	strb.w	r3, [r0, #1268]	; 0x4f4
 800bdcc:	f500 67aa 	add.w	r7, r0, #1360	; 0x550
 800bdd0:	6860      	ldr	r0, [r4, #4]
 800bdd2:	b118      	cbz	r0, 800bddc <E131Bridge::Stop()+0x24>
 800bdd4:	6803      	ldr	r3, [r0, #0]
 800bdd6:	4629      	mov	r1, r5
 800bdd8:	68db      	ldr	r3, [r3, #12]
 800bdda:	4798      	blx	r3
 800bddc:	f7fe fbb6 	bl	800a54c <lightset::Data::Get()>
 800bde0:	2344      	movs	r3, #68	; 0x44
 800bde2:	fb08 0005 	mla	r0, r8, r5, r0
 800bde6:	436b      	muls	r3, r5
 800bde8:	3501      	adds	r5, #1
 800bdea:	2d04      	cmp	r5, #4
 800bdec:	f8c0 6600 	str.w	r6, [r0, #1536]	; 0x600
 800bdf0:	54fe      	strb	r6, [r7, r3]
 800bdf2:	d1ed      	bne.n	800bdd0 <E131Bridge::Stop()+0x18>
 800bdf4:	6963      	ldr	r3, [r4, #20]
 800bdf6:	b17b      	cbz	r3, 800be18 <E131Bridge::Stop()+0x60>
 800bdf8:	2500      	movs	r5, #0
 800bdfa:	270c      	movs	r7, #12
 800bdfc:	f204 6622 	addw	r6, r4, #1570	; 0x622
 800be00:	fb07 f305 	mul.w	r3, r7, r5
 800be04:	5cf3      	ldrb	r3, [r6, r3]
 800be06:	b123      	cbz	r3, 800be12 <E131Bridge::Stop()+0x5a>
 800be08:	6960      	ldr	r0, [r4, #20]
 800be0a:	4629      	mov	r1, r5
 800be0c:	6803      	ldr	r3, [r0, #0]
 800be0e:	68db      	ldr	r3, [r3, #12]
 800be10:	4798      	blx	r3
 800be12:	3501      	adds	r5, #1
 800be14:	2d04      	cmp	r5, #4
 800be16:	d1f3      	bne.n	800be00 <E131Bridge::Stop()+0x48>
 800be18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be1c:	4b02      	ldr	r3, [pc, #8]	; (800be28 <E131Bridge::Stop()+0x70>)
 800be1e:	2100      	movs	r1, #0
 800be20:	6818      	ldr	r0, [r3, #0]
 800be22:	f008 bb1d 	b.w	8014460 <LedBlink::SetMode(ledblink::Mode)>
 800be26:	bf00      	nop
 800be28:	2000a9c4 	andcs	sl, r0, r4, asr #19

0800be2c <E131Bridge::SetSourceName(char const*)>:
 800be2c:	233f      	movs	r3, #63	; 0x3f
 800be2e:	b510      	push	{r4, lr}
 800be30:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800be34:	3901      	subs	r1, #1
 800be36:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800be3a:	b92c      	cbnz	r4, 800be48 <E131Bridge::SetSourceName(char const*)+0x1c>
 800be3c:	4413      	add	r3, r2
 800be3e:	429a      	cmp	r2, r3
 800be40:	d006      	beq.n	800be50 <E131Bridge::SetSourceName(char const*)+0x24>
 800be42:	f802 4b01 	strb.w	r4, [r2], #1
 800be46:	e7fa      	b.n	800be3e <E131Bridge::SetSourceName(char const*)+0x12>
 800be48:	3b01      	subs	r3, #1
 800be4a:	f802 4b01 	strb.w	r4, [r2], #1
 800be4e:	d1f2      	bne.n	800be36 <E131Bridge::SetSourceName(char const*)+0xa>
 800be50:	2300      	movs	r3, #0
 800be52:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
 800be56:	bd10      	pop	{r4, pc}

0800be58 <E131Bridge::E131Bridge()>:
 800be58:	2300      	movs	r3, #0
 800be5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be60:	e9c0 2300 	strd	r2, r3, [r0]
 800be64:	2201      	movs	r2, #1
 800be66:	4604      	mov	r4, r0
 800be68:	2764      	movs	r7, #100	; 0x64
 800be6a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800be6e:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800be72:	e9c0 3307 	strd	r3, r3, [r0, #28]
 800be76:	6743      	str	r3, [r0, #116]	; 0x74
 800be78:	4b1e      	ldr	r3, [pc, #120]	; (800bef4 <E131Bridge::E131Bridge()+0x9c>)
 800be7a:	7202      	strb	r2, [r0, #8]
 800be7c:	b093      	sub	sp, #76	; 0x4c
 800be7e:	6018      	str	r0, [r3, #0]
 800be80:	f500 65a2 	add.w	r5, r0, #1296	; 0x510
 800be84:	f500 62c4 	add.w	r2, r0, #1568	; 0x620
 800be88:	f500 66ca 	add.w	r6, r0, #1616	; 0x650
 800be8c:	4628      	mov	r0, r5
 800be8e:	2144      	movs	r1, #68	; 0x44
 800be90:	f7ff ff32 	bl	800bcf8 <memset.constprop.0.isra.0>
 800be94:	4610      	mov	r0, r2
 800be96:	210c      	movs	r1, #12
 800be98:	f7ff ff2e 	bl	800bcf8 <memset.constprop.0.isra.0>
 800be9c:	320c      	adds	r2, #12
 800be9e:	f802 7c03 	strb.w	r7, [r2, #-3]
 800bea2:	42b2      	cmp	r2, r6
 800bea4:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800bea8:	d1f0      	bne.n	800be8c <E131Bridge::E131Bridge()+0x34>
 800beaa:	f204 40f4 	addw	r0, r4, #1268	; 0x4f4
 800beae:	211c      	movs	r1, #28
 800beb0:	f7ff ff22 	bl	800bcf8 <memset.constprop.0.isra.0>
 800beb4:	2301      	movs	r3, #1
 800beb6:	4d10      	ldr	r5, [pc, #64]	; (800bef8 <E131Bridge::E131Bridge()+0xa0>)
 800beb8:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
 800bebc:	4a0f      	ldr	r2, [pc, #60]	; (800befc <E131Bridge::E131Bridge()+0xa4>)
 800bebe:	682b      	ldr	r3, [r5, #0]
 800bec0:	2140      	movs	r1, #64	; 0x40
 800bec2:	331c      	adds	r3, #28
 800bec4:	9200      	str	r2, [sp, #0]
 800bec6:	a802      	add	r0, sp, #8
 800bec8:	4a0d      	ldr	r2, [pc, #52]	; (800bf00 <E131Bridge::E131Bridge()+0xa8>)
 800beca:	f7fd fa8b 	bl	80093e4 <snprintf>
 800bece:	4620      	mov	r0, r4
 800bed0:	a902      	add	r1, sp, #8
 800bed2:	f7ff ffab 	bl	800be2c <E131Bridge::SetSourceName(char const*)>
 800bed6:	f44f 51ae 	mov.w	r1, #5568	; 0x15c0
 800beda:	6828      	ldr	r0, [r5, #0]
 800bedc:	f005 ff72 	bl	8011dc4 <Network::Begin(unsigned short)>
 800bee0:	4621      	mov	r1, r4
 800bee2:	4b08      	ldr	r3, [pc, #32]	; (800bf04 <E131Bridge::E131Bridge()+0xac>)
 800bee4:	f841 0b24 	str.w	r0, [r1], #36
 800bee8:	6818      	ldr	r0, [r3, #0]
 800beea:	f008 fb41 	bl	8014570 <Hardware::GetUuid(unsigned char*)>
 800beee:	4620      	mov	r0, r4
 800bef0:	b013      	add	sp, #76	; 0x4c
 800bef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bef4:	20001910 	andcs	r1, r0, r0, lsl r9
 800bef8:	2000a2a0 	andcs	sl, r0, r0, lsr #5
 800befc:	08016af9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, sp, lr}
 800bf00:	08016e07 	stmdaeq	r1, {r0, r1, r2, r9, sl, fp, sp, lr}
 800bf04:	2000a9c8 	andcs	sl, r0, r8, asr #19

0800bf08 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>:
 800bf08:	b570      	push	{r4, r5, r6, lr}
 800bf0a:	4604      	mov	r4, r0
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	2544      	movs	r5, #68	; 0x44
 800bf10:	4610      	mov	r0, r2
 800bf12:	f504 62a2 	add.w	r2, r4, #1296	; 0x510
 800bf16:	4299      	cmp	r1, r3
 800bf18:	d004      	beq.n	800bf24 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x1c>
 800bf1a:	fb05 f603 	mul.w	r6, r5, r3
 800bf1e:	5b96      	ldrh	r6, [r2, r6]
 800bf20:	4286      	cmp	r6, r0
 800bf22:	d00e      	beq.n	800bf42 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x3a>
 800bf24:	3301      	adds	r3, #1
 800bf26:	2b04      	cmp	r3, #4
 800bf28:	d1f5      	bne.n	800bf16 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0xe>
 800bf2a:	4b06      	ldr	r3, [pc, #24]	; (800bf44 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x3c>)
 800bf2c:	6824      	ldr	r4, [r4, #0]
 800bf2e:	681d      	ldr	r5, [r3, #0]
 800bf30:	f7ff fed0 	bl	800bcd4 <e131::universe_to_multicast_ip(unsigned short)>
 800bf34:	4621      	mov	r1, r4
 800bf36:	4602      	mov	r2, r0
 800bf38:	4628      	mov	r0, r5
 800bf3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf3e:	f005 bf55 	b.w	8011dec <Network::LeaveGroup(int, unsigned int)>
 800bf42:	bd70      	pop	{r4, r5, r6, pc}
 800bf44:	2000a2a0 	andcs	sl, r0, r0, lsr #5

0800bf48 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>:
 800bf48:	b570      	push	{r4, r5, r6, lr}
 800bf4a:	4604      	mov	r4, r0
 800bf4c:	461d      	mov	r5, r3
 800bf4e:	b1c1      	cbz	r1, 800bf82 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x3a>
 800bf50:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800bf54:	f200 5606 	addw	r6, r0, #1286	; 0x506
 800bf58:	b12a      	cbz	r2, 800bf66 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x1e>
 800bf5a:	42aa      	cmp	r2, r5
 800bf5c:	d017      	beq.n	800bf8e <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x46>
 800bf5e:	2104      	movs	r1, #4
 800bf60:	4620      	mov	r0, r4
 800bf62:	f7ff ffd1 	bl	800bf08 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800bf66:	4b0a      	ldr	r3, [pc, #40]	; (800bf90 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x48>)
 800bf68:	8035      	strh	r5, [r6, #0]
 800bf6a:	4628      	mov	r0, r5
 800bf6c:	6826      	ldr	r6, [r4, #0]
 800bf6e:	681c      	ldr	r4, [r3, #0]
 800bf70:	f7ff feb0 	bl	800bcd4 <e131::universe_to_multicast_ip(unsigned short)>
 800bf74:	4631      	mov	r1, r6
 800bf76:	4602      	mov	r2, r0
 800bf78:	4620      	mov	r0, r4
 800bf7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf7e:	f005 bf32 	b.w	8011de6 <Network::JoinGroup(int, unsigned int)>
 800bf82:	b122      	cbz	r2, 800bf8e <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x46>
 800bf84:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800bf88:	f500 66a1 	add.w	r6, r0, #1288	; 0x508
 800bf8c:	e7e4      	b.n	800bf58 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x10>
 800bf8e:	bd70      	pop	{r4, r5, r6, pc}
 800bf90:	2000a2a0 	andcs	sl, r0, r0, lsr #5

0800bf94 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
 800bf94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf98:	4604      	mov	r4, r0
 800bf9a:	460d      	mov	r5, r1
 800bf9c:	461e      	mov	r6, r3
 800bf9e:	bb02      	cbnz	r2, 800bfe2 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x4e>
 800bfa0:	2903      	cmp	r1, #3
 800bfa2:	d843      	bhi.n	800c02c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x98>
 800bfa4:	230c      	movs	r3, #12
 800bfa6:	fb03 0301 	mla	r3, r3, r1, r0
 800bfaa:	f893 2622 	ldrb.w	r2, [r3, #1570]	; 0x622
 800bfae:	b12a      	cbz	r2, 800bfbc <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x28>
 800bfb0:	f8b3 3620 	ldrh.w	r3, [r3, #1568]	; 0x620
 800bfb4:	42b3      	cmp	r3, r6
 800bfb6:	d109      	bne.n	800bfcc <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x38>
 800bfb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfbc:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800bfc0:	3201      	adds	r2, #1
 800bfc2:	f880 250a 	strb.w	r2, [r0, #1290]	; 0x50a
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	f883 2622 	strb.w	r2, [r3, #1570]	; 0x622
 800bfcc:	230c      	movs	r3, #12
 800bfce:	fb03 4405 	mla	r4, r3, r5, r4
 800bfd2:	4630      	mov	r0, r6
 800bfd4:	f8a4 6620 	strh.w	r6, [r4, #1568]	; 0x620
 800bfd8:	f7ff fe7c 	bl	800bcd4 <e131::universe_to_multicast_ip(unsigned short)>
 800bfdc:	f8c4 0624 	str.w	r0, [r4, #1572]	; 0x624
 800bfe0:	e7ea      	b.n	800bfb8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800bfe2:	2a02      	cmp	r2, #2
 800bfe4:	d122      	bne.n	800c02c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x98>
 800bfe6:	2903      	cmp	r1, #3
 800bfe8:	d8e6      	bhi.n	800bfb8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800bfea:	2344      	movs	r3, #68	; 0x44
 800bfec:	fb03 0301 	mla	r3, r3, r1, r0
 800bff0:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 800bff4:	b152      	cbz	r2, 800c00c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x78>
 800bff6:	2200      	movs	r2, #0
 800bff8:	f883 2512 	strb.w	r2, [r3, #1298]	; 0x512
 800bffc:	f890 350b 	ldrb.w	r3, [r0, #1291]	; 0x50b
 800c000:	4632      	mov	r2, r6
 800c002:	3b01      	subs	r3, #1
 800c004:	f880 350b 	strb.w	r3, [r0, #1291]	; 0x50b
 800c008:	f7ff ff7e 	bl	800bf08 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800c00c:	230c      	movs	r3, #12
 800c00e:	fb03 4505 	mla	r5, r3, r5, r4
 800c012:	f895 3622 	ldrb.w	r3, [r5, #1570]	; 0x622
 800c016:	2b00      	cmp	r3, #0
 800c018:	d0ce      	beq.n	800bfb8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800c01a:	2300      	movs	r3, #0
 800c01c:	f885 3622 	strb.w	r3, [r5, #1570]	; 0x622
 800c020:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800c024:	3b01      	subs	r3, #1
 800c026:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
 800c02a:	e7c5      	b.n	800bfb8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800c02c:	2344      	movs	r3, #68	; 0x44
 800c02e:	fb03 4305 	mla	r3, r3, r5, r4
 800c032:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 800c036:	b1d2      	cbz	r2, 800c06e <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xda>
 800c038:	f8b3 3510 	ldrh.w	r3, [r3, #1296]	; 0x510
 800c03c:	42b3      	cmp	r3, r6
 800c03e:	d0bb      	beq.n	800bfb8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800c040:	4632      	mov	r2, r6
 800c042:	4629      	mov	r1, r5
 800c044:	4620      	mov	r0, r4
 800c046:	f7ff ff5f 	bl	800bf08 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800c04a:	4b0d      	ldr	r3, [pc, #52]	; (800c080 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xec>)
 800c04c:	4630      	mov	r0, r6
 800c04e:	681f      	ldr	r7, [r3, #0]
 800c050:	f8d4 8000 	ldr.w	r8, [r4]
 800c054:	f7ff fe3e 	bl	800bcd4 <e131::universe_to_multicast_ip(unsigned short)>
 800c058:	4641      	mov	r1, r8
 800c05a:	4602      	mov	r2, r0
 800c05c:	4638      	mov	r0, r7
 800c05e:	f005 fec2 	bl	8011de6 <Network::JoinGroup(int, unsigned int)>
 800c062:	2344      	movs	r3, #68	; 0x44
 800c064:	fb03 4305 	mla	r3, r3, r5, r4
 800c068:	f8a3 6510 	strh.w	r6, [r3, #1296]	; 0x510
 800c06c:	e7a4      	b.n	800bfb8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800c06e:	f894 250b 	ldrb.w	r2, [r4, #1291]	; 0x50b
 800c072:	3201      	adds	r2, #1
 800c074:	f884 250b 	strb.w	r2, [r4, #1291]	; 0x50b
 800c078:	2201      	movs	r2, #1
 800c07a:	f883 2512 	strb.w	r2, [r3, #1298]	; 0x512
 800c07e:	e7e4      	b.n	800c04a <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xb6>
 800c080:	2000a2a0 	andcs	sl, r0, r0, lsr #5

0800c084 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>:
 800c084:	b953      	cbnz	r3, 800c09c <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x18>
 800c086:	2903      	cmp	r1, #3
 800c088:	d811      	bhi.n	800c0ae <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x2a>
 800c08a:	230c      	movs	r3, #12
 800c08c:	fb03 0001 	mla	r0, r3, r1, r0
 800c090:	f8b0 3620 	ldrh.w	r3, [r0, #1568]	; 0x620
 800c094:	f890 0622 	ldrb.w	r0, [r0, #1570]	; 0x622
 800c098:	8013      	strh	r3, [r2, #0]
 800c09a:	4770      	bx	lr
 800c09c:	2344      	movs	r3, #68	; 0x44
 800c09e:	fb03 0001 	mla	r0, r3, r1, r0
 800c0a2:	f8b0 3510 	ldrh.w	r3, [r0, #1296]	; 0x510
 800c0a6:	f890 0512 	ldrb.w	r0, [r0, #1298]	; 0x512
 800c0aa:	8013      	strh	r3, [r2, #0]
 800c0ac:	4770      	bx	lr
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	4770      	bx	lr

0800c0b2 <E131Bridge::UpdateMergeStatus(unsigned int)>:
 800c0b2:	f890 34f5 	ldrb.w	r3, [r0, #1269]	; 0x4f5
 800c0b6:	b923      	cbnz	r3, 800c0c2 <E131Bridge::UpdateMergeStatus(unsigned int)+0x10>
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	f880 34f5 	strb.w	r3, [r0, #1269]	; 0x4f5
 800c0be:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800c0c2:	2344      	movs	r3, #68	; 0x44
 800c0c4:	fb03 0001 	mla	r0, r3, r1, r0
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	f880 3551 	strb.w	r3, [r0, #1361]	; 0x551
 800c0ce:	4770      	bx	lr

0800c0d0 <E131Bridge::CheckMergeTimeouts(unsigned int)>:
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	2044      	movs	r0, #68	; 0x44
 800c0d4:	4348      	muls	r0, r1
 800c0d6:	b570      	push	{r4, r5, r6, lr}
 800c0d8:	1815      	adds	r5, r2, r0
 800c0da:	460c      	mov	r4, r1
 800c0dc:	68d3      	ldr	r3, [r2, #12]
 800c0de:	f8d5 1514 	ldr.w	r1, [r5, #1300]	; 0x514
 800c0e2:	1a5b      	subs	r3, r3, r1
 800c0e4:	f242 7110 	movw	r1, #10000	; 0x2710
 800c0e8:	428b      	cmp	r3, r1
 800c0ea:	d90a      	bls.n	800c102 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x32>
 800c0ec:	2600      	movs	r6, #0
 800c0ee:	f200 501c 	addw	r0, r0, #1308	; 0x51c
 800c0f2:	2110      	movs	r1, #16
 800c0f4:	f8c5 6518 	str.w	r6, [r5, #1304]	; 0x518
 800c0f8:	4410      	add	r0, r2
 800c0fa:	f7ff fdfd 	bl	800bcf8 <memset.constprop.0.isra.0>
 800c0fe:	f885 6551 	strb.w	r6, [r5, #1361]	; 0x551
 800c102:	2344      	movs	r3, #68	; 0x44
 800c104:	435c      	muls	r4, r3
 800c106:	1915      	adds	r5, r2, r4
 800c108:	f8d5 1530 	ldr.w	r1, [r5, #1328]	; 0x530
 800c10c:	68d3      	ldr	r3, [r2, #12]
 800c10e:	1a5b      	subs	r3, r3, r1
 800c110:	f242 7110 	movw	r1, #10000	; 0x2710
 800c114:	428b      	cmp	r3, r1
 800c116:	d90a      	bls.n	800c12e <E131Bridge::CheckMergeTimeouts(unsigned int)+0x5e>
 800c118:	2600      	movs	r6, #0
 800c11a:	f504 64a7 	add.w	r4, r4, #1336	; 0x538
 800c11e:	2110      	movs	r1, #16
 800c120:	f8c5 6534 	str.w	r6, [r5, #1332]	; 0x534
 800c124:	1910      	adds	r0, r2, r4
 800c126:	f7ff fde7 	bl	800bcf8 <memset.constprop.0.isra.0>
 800c12a:	f885 6551 	strb.w	r6, [r5, #1361]	; 0x551
 800c12e:	f892 1595 	ldrb.w	r1, [r2, #1429]	; 0x595
 800c132:	f892 3551 	ldrb.w	r3, [r2, #1361]	; 0x551
 800c136:	430b      	orrs	r3, r1
 800c138:	f892 15d9 	ldrb.w	r1, [r2, #1497]	; 0x5d9
 800c13c:	430b      	orrs	r3, r1
 800c13e:	d107      	bne.n	800c150 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x80>
 800c140:	f892 361d 	ldrb.w	r3, [r2, #1565]	; 0x61d
 800c144:	b923      	cbnz	r3, 800c150 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x80>
 800c146:	2101      	movs	r1, #1
 800c148:	f882 34f5 	strb.w	r3, [r2, #1269]	; 0x4f5
 800c14c:	f882 14f8 	strb.w	r1, [r2, #1272]	; 0x4f8
 800c150:	bd70      	pop	{r4, r5, r6, pc}

0800c152 <E131Bridge::IsPriorityTimeOut(unsigned int) const>:
 800c152:	2244      	movs	r2, #68	; 0x44
 800c154:	fb02 0101 	mla	r1, r2, r1, r0
 800c158:	68c3      	ldr	r3, [r0, #12]
 800c15a:	b510      	push	{r4, lr}
 800c15c:	f8d1 2530 	ldr.w	r2, [r1, #1328]	; 0x530
 800c160:	f8d1 4518 	ldr.w	r4, [r1, #1304]	; 0x518
 800c164:	f8d1 0534 	ldr.w	r0, [r1, #1332]	; 0x534
 800c168:	1a9a      	subs	r2, r3, r2
 800c16a:	b184      	cbz	r4, 800c18e <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3c>
 800c16c:	f8d1 1514 	ldr.w	r1, [r1, #1300]	; 0x514
 800c170:	1a5b      	subs	r3, r3, r1
 800c172:	b128      	cbz	r0, 800c180 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2e>
 800c174:	f242 700f 	movw	r0, #9999	; 0x270f
 800c178:	4283      	cmp	r3, r0
 800c17a:	d90d      	bls.n	800c198 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x46>
 800c17c:	4282      	cmp	r2, r0
 800c17e:	e002      	b.n	800c186 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x34>
 800c180:	f242 7010 	movw	r0, #10000	; 0x2710
 800c184:	4283      	cmp	r3, r0
 800c186:	bf94      	ite	ls
 800c188:	2000      	movls	r0, #0
 800c18a:	2001      	movhi	r0, #1
 800c18c:	bd10      	pop	{r4, pc}
 800c18e:	2800      	cmp	r0, #0
 800c190:	d0fc      	beq.n	800c18c <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>
 800c192:	f242 7010 	movw	r0, #10000	; 0x2710
 800c196:	e7f1      	b.n	800c17c <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2a>
 800c198:	2000      	movs	r0, #0
 800c19a:	e7f7      	b.n	800c18c <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>

0800c19c <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>:
 800c19c:	684a      	ldr	r2, [r1, #4]
 800c19e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800c1a0:	b510      	push	{r4, lr}
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d10d      	bne.n	800c1c2 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x26>
 800c1a6:	f100 0392 	add.w	r3, r0, #146	; 0x92
 800c1aa:	3108      	adds	r1, #8
 800c1ac:	30a2      	adds	r0, #162	; 0xa2
 800c1ae:	4283      	cmp	r3, r0
 800c1b0:	d101      	bne.n	800c1b6 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x1a>
 800c1b2:	2001      	movs	r0, #1
 800c1b4:	bd10      	pop	{r4, pc}
 800c1b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1be:	4294      	cmp	r4, r2
 800c1c0:	d0f5      	beq.n	800c1ae <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x12>
 800c1c2:	2000      	movs	r0, #0
 800c1c4:	e7f6      	b.n	800c1b4 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x18>
	...

0800c1c8 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>:
 800c1c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	4605      	mov	r5, r0
 800c1d0:	4690      	mov	r8, r2
 800c1d2:	460f      	mov	r7, r1
 800c1d4:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800c1d8:	2900      	cmp	r1, #0
 800c1da:	d03d      	beq.n	800c258 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x90>
 800c1dc:	2a00      	cmp	r2, #0
 800c1de:	d03b      	beq.n	800c258 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x90>
 800c1e0:	2600      	movs	r6, #0
 800c1e2:	f240 6804 	movw	r8, #1540	; 0x604
 800c1e6:	4637      	mov	r7, r6
 800c1e8:	f8c0 34f4 	str.w	r3, [r0, #1268]	; 0x4f4
 800c1ec:	f880 350c 	strb.w	r3, [r0, #1292]	; 0x50c
 800c1f0:	f200 541c 	addw	r4, r0, #1308	; 0x51c
 800c1f4:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800c1f8:	b1e3      	cbz	r3, 800c234 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x6c>
 800c1fa:	6868      	ldr	r0, [r5, #4]
 800c1fc:	4631      	mov	r1, r6
 800c1fe:	6803      	ldr	r3, [r0, #0]
 800c200:	68db      	ldr	r3, [r3, #12]
 800c202:	4798      	blx	r3
 800c204:	2110      	movs	r1, #16
 800c206:	4620      	mov	r0, r4
 800c208:	f844 7c04 	str.w	r7, [r4, #-4]
 800c20c:	f7ff fd74 	bl	800bcf8 <memset.constprop.0.isra.0>
 800c210:	2110      	movs	r1, #16
 800c212:	f104 001c 	add.w	r0, r4, #28
 800c216:	61a7      	str	r7, [r4, #24]
 800c218:	f7ff fd6e 	bl	800bcf8 <memset.constprop.0.isra.0>
 800c21c:	f7fe f996 	bl	800a54c <lightset::Data::Get()>
 800c220:	fb08 0006 	mla	r0, r8, r6, r0
 800c224:	f8c0 7600 	str.w	r7, [r0, #1536]	; 0x600
 800c228:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
 800c22c:	f884 7036 	strb.w	r7, [r4, #54]	; 0x36
 800c230:	f884 7035 	strb.w	r7, [r4, #53]	; 0x35
 800c234:	3601      	adds	r6, #1
 800c236:	2e04      	cmp	r6, #4
 800c238:	f104 0444 	add.w	r4, r4, #68	; 0x44
 800c23c:	d1da      	bne.n	800c1f4 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x2c>
 800c23e:	4b25      	ldr	r3, [pc, #148]	; (800c2d4 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x10c>)
 800c240:	2102      	movs	r1, #2
 800c242:	6818      	ldr	r0, [r3, #0]
 800c244:	f008 f90c 	bl	8014460 <LedBlink::SetMode(ledblink::Mode)>
 800c248:	f895 350d 	ldrb.w	r3, [r5, #1293]	; 0x50d
 800c24c:	f023 0302 	bic.w	r3, r3, #2
 800c250:	f885 350d 	strb.w	r3, [r5, #1293]	; 0x50d
 800c254:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c258:	2600      	movs	r6, #0
 800c25a:	f240 6b04 	movw	fp, #1540	; 0x604
 800c25e:	46b1      	mov	r9, r6
 800c260:	f505 64a7 	add.w	r4, r5, #1336	; 0x538
 800c264:	7ea3      	ldrb	r3, [r4, #26]
 800c266:	b373      	cbz	r3, 800c2c6 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xfe>
 800c268:	b15f      	cbz	r7, 800c282 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xba>
 800c26a:	f854 3c20 	ldr.w	r3, [r4, #-32]
 800c26e:	b143      	cbz	r3, 800c282 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xba>
 800c270:	2110      	movs	r1, #16
 800c272:	f844 9c20 	str.w	r9, [r4, #-32]
 800c276:	f1a4 001c 	sub.w	r0, r4, #28
 800c27a:	f7ff fd3d 	bl	800bcf8 <memset.constprop.0.isra.0>
 800c27e:	f884 9019 	strb.w	r9, [r4, #25]
 800c282:	f1b8 0f00 	cmp.w	r8, #0
 800c286:	d00a      	beq.n	800c29e <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd6>
 800c288:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c28c:	b13b      	cbz	r3, 800c29e <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd6>
 800c28e:	2110      	movs	r1, #16
 800c290:	4620      	mov	r0, r4
 800c292:	f844 9c04 	str.w	r9, [r4, #-4]
 800c296:	f7ff fd2f 	bl	800bcf8 <memset.constprop.0.isra.0>
 800c29a:	f884 9019 	strb.w	r9, [r4, #25]
 800c29e:	f895 a4f5 	ldrb.w	sl, [r5, #1269]	; 0x4f5
 800c2a2:	f1ba 0f00 	cmp.w	sl, #0
 800c2a6:	d10e      	bne.n	800c2c6 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xfe>
 800c2a8:	6868      	ldr	r0, [r5, #4]
 800c2aa:	4631      	mov	r1, r6
 800c2ac:	6803      	ldr	r3, [r0, #0]
 800c2ae:	68db      	ldr	r3, [r3, #12]
 800c2b0:	4798      	blx	r3
 800c2b2:	f7fe f94b 	bl	800a54c <lightset::Data::Get()>
 800c2b6:	fb0b 0006 	mla	r0, fp, r6, r0
 800c2ba:	f8c0 a600 	str.w	sl, [r0, #1536]	; 0x600
 800c2be:	f884 a018 	strb.w	sl, [r4, #24]
 800c2c2:	f884 a01a 	strb.w	sl, [r4, #26]
 800c2c6:	3601      	adds	r6, #1
 800c2c8:	2e04      	cmp	r6, #4
 800c2ca:	f104 0444 	add.w	r4, r4, #68	; 0x44
 800c2ce:	d1c9      	bne.n	800c264 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x9c>
 800c2d0:	e7b5      	b.n	800c23e <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x76>
 800c2d2:	bf00      	nop
 800c2d4:	2000a9c4 	andcs	sl, r0, r4, asr #19

0800c2d8 <E131Bridge::HandleDmx()>:
 800c2d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2dc:	4604      	mov	r4, r0
 800c2de:	2600      	movs	r6, #0
 800c2e0:	f8b0 70f7 	ldrh.w	r7, [r0, #247]	; 0xf7
 800c2e4:	f100 09fa 	add.w	r9, r0, #250	; 0xfa
 800c2e8:	ba7f      	rev16	r7, r7
 800c2ea:	b2bf      	uxth	r7, r7
 800c2ec:	3f01      	subs	r7, #1
 800c2ee:	f200 551c 	addw	r5, r0, #1308	; 0x51c
 800c2f2:	f815 3c0a 	ldrb.w	r3, [r5, #-10]
 800c2f6:	b353      	cbz	r3, 800c34e <E131Bridge::HandleDmx()+0x76>
 800c2f8:	f835 3c0c 	ldrh.w	r3, [r5, #-12]
 800c2fc:	f8b4 20ed 	ldrh.w	r2, [r4, #237]	; 0xed
 800c300:	ba5b      	rev16	r3, r3
 800c302:	b29b      	uxth	r3, r3
 800c304:	429a      	cmp	r2, r3
 800c306:	d122      	bne.n	800c34e <E131Bridge::HandleDmx()+0x76>
 800c308:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800c30c:	f1a5 0108 	sub.w	r1, r5, #8
 800c310:	4620      	mov	r0, r4
 800c312:	9300      	str	r3, [sp, #0]
 800c314:	f7ff ff42 	bl	800c19c <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800c318:	f105 0114 	add.w	r1, r5, #20
 800c31c:	4682      	mov	sl, r0
 800c31e:	4620      	mov	r0, r4
 800c320:	f7ff ff3c 	bl	800c19c <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800c324:	f8d5 b018 	ldr.w	fp, [r5, #24]
 800c328:	4680      	mov	r8, r0
 800c32a:	f1ba 0f00 	cmp.w	sl, #0
 800c32e:	d016      	beq.n	800c35e <E131Bridge::HandleDmx()+0x86>
 800c330:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c334:	7c2a      	ldrb	r2, [r5, #16]
 800c336:	742b      	strb	r3, [r5, #16]
 800c338:	3313      	adds	r3, #19
 800c33a:	1a9b      	subs	r3, r3, r2
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	2b13      	cmp	r3, #19
 800c340:	d905      	bls.n	800c34e <E131Bridge::HandleDmx()+0x76>
 800c342:	f994 20ec 	ldrsb.w	r2, [r4, #236]	; 0xec
 800c346:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800c34a:	2a00      	cmp	r2, #0
 800c34c:	da10      	bge.n	800c370 <E131Bridge::HandleDmx()+0x98>
 800c34e:	3601      	adds	r6, #1
 800c350:	2e04      	cmp	r6, #4
 800c352:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800c356:	d1cc      	bne.n	800c2f2 <E131Bridge::HandleDmx()+0x1a>
 800c358:	b003      	add	sp, #12
 800c35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c35e:	2800      	cmp	r0, #0
 800c360:	d0ef      	beq.n	800c342 <E131Bridge::HandleDmx()+0x6a>
 800c362:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c366:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 800c36a:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800c36e:	e7e3      	b.n	800c338 <E131Bridge::HandleDmx()+0x60>
 800c370:	065a      	lsls	r2, r3, #25
 800c372:	d50b      	bpl.n	800c38c <E131Bridge::HandleDmx()+0xb4>
 800c374:	f1ba 0f00 	cmp.w	sl, #0
 800c378:	d102      	bne.n	800c380 <E131Bridge::HandleDmx()+0xa8>
 800c37a:	f1b8 0f00 	cmp.w	r8, #0
 800c37e:	d0e6      	beq.n	800c34e <E131Bridge::HandleDmx()+0x76>
 800c380:	4642      	mov	r2, r8
 800c382:	4651      	mov	r1, sl
 800c384:	4620      	mov	r0, r4
 800c386:	f7ff ff1f 	bl	800c1c8 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800c38a:	e7e0      	b.n	800c34e <E131Bridge::HandleDmx()+0x76>
 800c38c:	f894 34f5 	ldrb.w	r3, [r4, #1269]	; 0x4f5
 800c390:	b133      	cbz	r3, 800c3a0 <E131Bridge::HandleDmx()+0xc8>
 800c392:	f894 34fa 	ldrb.w	r3, [r4, #1274]	; 0x4fa
 800c396:	b91b      	cbnz	r3, 800c3a0 <E131Bridge::HandleDmx()+0xc8>
 800c398:	4631      	mov	r1, r6
 800c39a:	4620      	mov	r0, r4
 800c39c:	f7ff fe98 	bl	800c0d0 <E131Bridge::CheckMergeTimeouts(unsigned int)>
 800c3a0:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
 800c3a4:	f894 250c 	ldrb.w	r2, [r4, #1292]	; 0x50c
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	d259      	bcs.n	800c460 <E131Bridge::HandleDmx()+0x188>
 800c3ac:	4631      	mov	r1, r6
 800c3ae:	4620      	mov	r0, r4
 800c3b0:	9301      	str	r3, [sp, #4]
 800c3b2:	f7ff fece 	bl	800c152 <E131Bridge::IsPriorityTimeOut(unsigned int) const>
 800c3b6:	2800      	cmp	r0, #0
 800c3b8:	d0c9      	beq.n	800c34e <E131Bridge::HandleDmx()+0x76>
 800c3ba:	9b01      	ldr	r3, [sp, #4]
 800c3bc:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
 800c3c0:	9b00      	ldr	r3, [sp, #0]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d154      	bne.n	800c470 <E131Bridge::HandleDmx()+0x198>
 800c3c6:	f1bb 0f00 	cmp.w	fp, #0
 800c3ca:	d15c      	bne.n	800c486 <E131Bridge::HandleDmx()+0x1ae>
 800c3cc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c3ce:	2210      	movs	r2, #16
 800c3d0:	f845 3c04 	str.w	r3, [r5, #-4]
 800c3d4:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c3d8:	4628      	mov	r0, r5
 800c3da:	742b      	strb	r3, [r5, #16]
 800c3dc:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800c3e0:	f7ff fc92 	bl	800bd08 <memcpy.isra.0>
 800c3e4:	68e3      	ldr	r3, [r4, #12]
 800c3e6:	463a      	mov	r2, r7
 800c3e8:	4649      	mov	r1, r9
 800c3ea:	4630      	mov	r0, r6
 800c3ec:	f845 3c08 	str.w	r3, [r5, #-8]
 800c3f0:	f7fe f8b8 	bl	800a564 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 800c3f4:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800c3f8:	069b      	lsls	r3, r3, #26
 800c3fa:	f100 80ad 	bmi.w	800c558 <E131Bridge::HandleDmx()+0x280>
 800c3fe:	f8b4 30e9 	ldrh.w	r3, [r4, #233]	; 0xe9
 800c402:	b29a      	uxth	r2, r3
 800c404:	2a00      	cmp	r2, #0
 800c406:	f000 80ab 	beq.w	800c560 <E131Bridge::HandleDmx()+0x288>
 800c40a:	f894 24f7 	ldrb.w	r2, [r4, #1271]	; 0x4f7
 800c40e:	2a00      	cmp	r2, #0
 800c410:	f040 80a6 	bne.w	800c560 <E131Bridge::HandleDmx()+0x288>
 800c414:	ba5b      	rev16	r3, r3
 800c416:	b29b      	uxth	r3, r3
 800c418:	f1ba 0f00 	cmp.w	sl, #0
 800c41c:	f040 8099 	bne.w	800c552 <E131Bridge::HandleDmx()+0x27a>
 800c420:	f1b8 0f00 	cmp.w	r8, #0
 800c424:	f040 8095 	bne.w	800c552 <E131Bridge::HandleDmx()+0x27a>
 800c428:	69aa      	ldr	r2, [r5, #24]
 800c42a:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800c42e:	3a00      	subs	r2, #0
 800c430:	bf18      	it	ne
 800c432:	2201      	movne	r2, #1
 800c434:	3900      	subs	r1, #0
 800c436:	bf18      	it	ne
 800c438:	2101      	movne	r1, #1
 800c43a:	4620      	mov	r0, r4
 800c43c:	f7ff fd84 	bl	800bf48 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>
 800c440:	f240 1301 	movw	r3, #257	; 0x101
 800c444:	f8a4 34f6 	strh.w	r3, [r4, #1270]	; 0x4f6
 800c448:	f894 34fb 	ldrb.w	r3, [r4, #1275]	; 0x4fb
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	f040 808c 	bne.w	800c56a <E131Bridge::HandleDmx()+0x292>
 800c452:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800c456:	f043 0302 	orr.w	r3, r3, #2
 800c45a:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800c45e:	e776      	b.n	800c34e <E131Bridge::HandleDmx()+0x76>
 800c460:	d9ae      	bls.n	800c3c0 <E131Bridge::HandleDmx()+0xe8>
 800c462:	2200      	movs	r2, #0
 800c464:	f845 2c04 	str.w	r2, [r5, #-4]
 800c468:	61aa      	str	r2, [r5, #24]
 800c46a:	f884 24f5 	strb.w	r2, [r4, #1269]	; 0x4f5
 800c46e:	e7a5      	b.n	800c3bc <E131Bridge::HandleDmx()+0xe4>
 800c470:	f1ba 0f00 	cmp.w	sl, #0
 800c474:	f000 8092 	beq.w	800c59c <E131Bridge::HandleDmx()+0x2c4>
 800c478:	f1bb 0f00 	cmp.w	fp, #0
 800c47c:	d15c      	bne.n	800c538 <E131Bridge::HandleDmx()+0x260>
 800c47e:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c482:	742b      	strb	r3, [r5, #16]
 800c484:	e7ae      	b.n	800c3e4 <E131Bridge::HandleDmx()+0x10c>
 800c486:	f1b8 0f00 	cmp.w	r8, #0
 800c48a:	d03b      	beq.n	800c504 <E131Bridge::HandleDmx()+0x22c>
 800c48c:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c490:	f240 6b04 	movw	fp, #1540	; 0x604
 800c494:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800c498:	68e3      	ldr	r3, [r4, #12]
 800c49a:	fb0b fb06 	mul.w	fp, fp, r6
 800c49e:	616b      	str	r3, [r5, #20]
 800c4a0:	f7fe f854 	bl	800a54c <lightset::Data::Get()>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	f50b 7000 	add.w	r0, fp, #512	; 0x200
 800c4aa:	463a      	mov	r2, r7
 800c4ac:	4649      	mov	r1, r9
 800c4ae:	4418      	add	r0, r3
 800c4b0:	9300      	str	r3, [sp, #0]
 800c4b2:	f7ff fc29 	bl	800bd08 <memcpy.isra.0>
 800c4b6:	9b00      	ldr	r3, [sp, #0]
 800c4b8:	f50b 6080 	add.w	r0, fp, #1024	; 0x400
 800c4bc:	eb03 020b 	add.w	r2, r3, fp
 800c4c0:	f8c2 7600 	str.w	r7, [r2, #1536]	; 0x600
 800c4c4:	4649      	mov	r1, r9
 800c4c6:	463a      	mov	r2, r7
 800c4c8:	4418      	add	r0, r3
 800c4ca:	f7ff fc1d 	bl	800bd08 <memcpy.isra.0>
 800c4ce:	e791      	b.n	800c3f4 <E131Bridge::HandleDmx()+0x11c>
 800c4d0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c4d2:	2210      	movs	r2, #16
 800c4d4:	61ab      	str	r3, [r5, #24]
 800c4d6:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c4da:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800c4de:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800c4e2:	f105 001c 	add.w	r0, r5, #28
 800c4e6:	f7ff fc0f 	bl	800bd08 <memcpy.isra.0>
 800c4ea:	68e3      	ldr	r3, [r4, #12]
 800c4ec:	4631      	mov	r1, r6
 800c4ee:	4620      	mov	r0, r4
 800c4f0:	616b      	str	r3, [r5, #20]
 800c4f2:	f7ff fdde 	bl	800c0b2 <E131Bridge::UpdateMergeStatus(unsigned int)>
 800c4f6:	463a      	mov	r2, r7
 800c4f8:	4649      	mov	r1, r9
 800c4fa:	4630      	mov	r0, r6
 800c4fc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800c4fe:	f7fe f877 	bl	800a5f0 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800c502:	e777      	b.n	800c3f4 <E131Bridge::HandleDmx()+0x11c>
 800c504:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c506:	2210      	movs	r2, #16
 800c508:	f845 3c04 	str.w	r3, [r5, #-4]
 800c50c:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c510:	4628      	mov	r0, r5
 800c512:	742b      	strb	r3, [r5, #16]
 800c514:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800c518:	f7ff fbf6 	bl	800bd08 <memcpy.isra.0>
 800c51c:	68e3      	ldr	r3, [r4, #12]
 800c51e:	4631      	mov	r1, r6
 800c520:	4620      	mov	r0, r4
 800c522:	f845 3c08 	str.w	r3, [r5, #-8]
 800c526:	f7ff fdc4 	bl	800c0b2 <E131Bridge::UpdateMergeStatus(unsigned int)>
 800c52a:	463a      	mov	r2, r7
 800c52c:	4649      	mov	r1, r9
 800c52e:	4630      	mov	r0, r6
 800c530:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800c532:	f7fe f834 	bl	800a59e <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800c536:	e75d      	b.n	800c3f4 <E131Bridge::HandleDmx()+0x11c>
 800c538:	f1b8 0f00 	cmp.w	r8, #0
 800c53c:	d103      	bne.n	800c546 <E131Bridge::HandleDmx()+0x26e>
 800c53e:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c542:	742b      	strb	r3, [r5, #16]
 800c544:	e7ea      	b.n	800c51c <E131Bridge::HandleDmx()+0x244>
 800c546:	481b      	ldr	r0, [pc, #108]	; (800c5b4 <E131Bridge::HandleDmx()+0x2dc>)
 800c548:	b003      	add	sp, #12
 800c54a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c54e:	f7fc bf21 	b.w	8009394 <printf>
 800c552:	4642      	mov	r2, r8
 800c554:	4651      	mov	r1, sl
 800c556:	e770      	b.n	800c43a <E131Bridge::HandleDmx()+0x162>
 800c558:	f04f 0300 	mov.w	r3, #0
 800c55c:	f884 34f7 	strb.w	r3, [r4, #1271]	; 0x4f7
 800c560:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800c564:	2b00      	cmp	r3, #0
 800c566:	f47f af6f 	bne.w	800c448 <E131Bridge::HandleDmx()+0x170>
 800c56a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800c56e:	f7fd ffed 	bl	800a54c <lightset::Data::Get()>
 800c572:	4632      	mov	r2, r6
 800c574:	4641      	mov	r1, r8
 800c576:	f7ff fbd1 	bl	800bd1c <lightset::Data::IOutput(LightSet*, unsigned int) const>
 800c57a:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
 800c57e:	2b00      	cmp	r3, #0
 800c580:	f47f af67 	bne.w	800c452 <E131Bridge::HandleDmx()+0x17a>
 800c584:	6860      	ldr	r0, [r4, #4]
 800c586:	4631      	mov	r1, r6
 800c588:	6803      	ldr	r3, [r0, #0]
 800c58a:	689b      	ldr	r3, [r3, #8]
 800c58c:	4798      	blx	r3
 800c58e:	f04f 0301 	mov.w	r3, #1
 800c592:	f884 34f8 	strb.w	r3, [r4, #1272]	; 0x4f8
 800c596:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 800c59a:	e75a      	b.n	800c452 <E131Bridge::HandleDmx()+0x17a>
 800c59c:	f1bb 0f00 	cmp.w	fp, #0
 800c5a0:	d096      	beq.n	800c4d0 <E131Bridge::HandleDmx()+0x1f8>
 800c5a2:	f1b8 0f00 	cmp.w	r8, #0
 800c5a6:	d0ce      	beq.n	800c546 <E131Bridge::HandleDmx()+0x26e>
 800c5a8:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c5ac:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800c5b0:	e79b      	b.n	800c4ea <E131Bridge::HandleDmx()+0x212>
 800c5b2:	bf00      	nop
 800c5b4:	08016e10 	stmdaeq	r1, {r4, r9, sl, fp, sp, lr}

0800c5b8 <E131Bridge::IsStatusChanged()>:
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	f890 04f8 	ldrb.w	r0, [r0, #1272]	; 0x4f8
 800c5be:	b110      	cbz	r0, 800c5c6 <E131Bridge::IsStatusChanged()+0xe>
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	f883 24f8 	strb.w	r2, [r3, #1272]	; 0x4f8
 800c5c6:	4770      	bx	lr

0800c5c8 <E131Bridge::Clear(unsigned int)>:
 800c5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ca:	460d      	mov	r5, r1
 800c5cc:	4604      	mov	r4, r0
 800c5ce:	6847      	ldr	r7, [r0, #4]
 800c5d0:	f7fd ffbc 	bl	800a54c <lightset::Data::Get()>
 800c5d4:	f240 6204 	movw	r2, #1540	; 0x604
 800c5d8:	4606      	mov	r6, r0
 800c5da:	436a      	muls	r2, r5
 800c5dc:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 800c5e0:	4430      	add	r0, r6
 800c5e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c5e6:	f7ff fb87 	bl	800bcf8 <memset.constprop.0.isra.0>
 800c5ea:	4432      	add	r2, r6
 800c5ec:	4630      	mov	r0, r6
 800c5ee:	2644      	movs	r6, #68	; 0x44
 800c5f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c5f4:	fb06 4605 	mla	r6, r6, r5, r4
 800c5f8:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
 800c5fc:	4639      	mov	r1, r7
 800c5fe:	462a      	mov	r2, r5
 800c600:	f7ff fb8c 	bl	800bd1c <lightset::Data::IOutput(LightSet*, unsigned int) const>
 800c604:	f896 3512 	ldrb.w	r3, [r6, #1298]	; 0x512
 800c608:	b153      	cbz	r3, 800c620 <E131Bridge::Clear(unsigned int)+0x58>
 800c60a:	f896 3552 	ldrb.w	r3, [r6, #1362]	; 0x552
 800c60e:	b93b      	cbnz	r3, 800c620 <E131Bridge::Clear(unsigned int)+0x58>
 800c610:	6860      	ldr	r0, [r4, #4]
 800c612:	4629      	mov	r1, r5
 800c614:	6803      	ldr	r3, [r0, #0]
 800c616:	689b      	ldr	r3, [r3, #8]
 800c618:	4798      	blx	r3
 800c61a:	2301      	movs	r3, #1
 800c61c:	f886 3552 	strb.w	r3, [r6, #1362]	; 0x552
 800c620:	2300      	movs	r3, #0
 800c622:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
 800c626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c628 <E131Bridge::IsValidRoot()>:
 800c628:	b530      	push	{r4, r5, lr}
 800c62a:	4a0d      	ldr	r2, [pc, #52]	; (800c660 <E131Bridge::IsValidRoot()+0x38>)
 800c62c:	f100 0380 	add.w	r3, r0, #128	; 0x80
 800c630:	f100 018c 	add.w	r1, r0, #140	; 0x8c
 800c634:	4299      	cmp	r1, r3
 800c636:	d109      	bne.n	800c64c <E131Bridge::IsValidRoot()+0x24>
 800c638:	f8d0 008e 	ldr.w	r0, [r0, #142]	; 0x8e
 800c63c:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800c640:	d00c      	beq.n	800c65c <E131Bridge::IsValidRoot()+0x34>
 800c642:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 800c646:	4258      	negs	r0, r3
 800c648:	4158      	adcs	r0, r3
 800c64a:	bd30      	pop	{r4, r5, pc}
 800c64c:	f813 5b01 	ldrb.w	r5, [r3], #1
 800c650:	f812 4b01 	ldrb.w	r4, [r2], #1
 800c654:	42a5      	cmp	r5, r4
 800c656:	d0ed      	beq.n	800c634 <E131Bridge::IsValidRoot()+0xc>
 800c658:	2000      	movs	r0, #0
 800c65a:	e7f6      	b.n	800c64a <E131Bridge::IsValidRoot()+0x22>
 800c65c:	2001      	movs	r0, #1
 800c65e:	e7f4      	b.n	800c64a <E131Bridge::IsValidRoot()+0x22>
 800c660:	08016ec0 	stmdaeq	r1, {r6, r7, r9, sl, fp, sp, lr}

0800c664 <E131Bridge::IsValidDataPacket()>:
 800c664:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
 800c668:	2b02      	cmp	r3, #2
 800c66a:	d10d      	bne.n	800c688 <E131Bridge::IsValidDataPacket()+0x24>
 800c66c:	f890 30f2 	ldrb.w	r3, [r0, #242]	; 0xf2
 800c670:	2ba1      	cmp	r3, #161	; 0xa1
 800c672:	d109      	bne.n	800c688 <E131Bridge::IsValidDataPacket()+0x24>
 800c674:	f8b0 30f3 	ldrh.w	r3, [r0, #243]	; 0xf3
 800c678:	b933      	cbnz	r3, 800c688 <E131Bridge::IsValidDataPacket()+0x24>
 800c67a:	f8b0 00f5 	ldrh.w	r0, [r0, #245]	; 0xf5
 800c67e:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800c682:	4258      	negs	r0, r3
 800c684:	4158      	adcs	r0, r3
 800c686:	4770      	bx	lr
 800c688:	2000      	movs	r0, #0
 800c68a:	4770      	bx	lr

0800c68c <E131Bridge::Run()>:
 800c68c:	b530      	push	{r4, r5, lr}
 800c68e:	4601      	mov	r1, r0
 800c690:	4604      	mov	r4, r0
 800c692:	b085      	sub	sp, #20
 800c694:	f10d 030e 	add.w	r3, sp, #14
 800c698:	f811 0b7c 	ldrb.w	r0, [r1], #124
 800c69c:	f44f 628f 	mov.w	r2, #1144	; 0x478
 800c6a0:	9300      	str	r3, [sp, #0]
 800c6a2:	f104 0378 	add.w	r3, r4, #120	; 0x78
 800c6a6:	f004 fe6b 	bl	8011380 <udp_recv>
 800c6aa:	4b3c      	ldr	r3, [pc, #240]	; (800c79c <E131Bridge::Run()+0x110>)
 800c6ac:	681d      	ldr	r5, [r3, #0]
 800c6ae:	60e5      	str	r5, [r4, #12]
 800c6b0:	2800      	cmp	r0, #0
 800c6b2:	d13b      	bne.n	800c72c <E131Bridge::Run()+0xa0>
 800c6b4:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800c6b8:	b183      	cbz	r3, 800c6dc <E131Bridge::Run()+0x50>
 800c6ba:	f894 24f9 	ldrb.w	r2, [r4, #1273]	; 0x4f9
 800c6be:	6923      	ldr	r3, [r4, #16]
 800c6c0:	bb6a      	cbnz	r2, 800c71e <E131Bridge::Run()+0x92>
 800c6c2:	1aed      	subs	r5, r5, r3
 800c6c4:	f640 13c3 	movw	r3, #2499	; 0x9c3
 800c6c8:	429d      	cmp	r5, r3
 800c6ca:	d928      	bls.n	800c71e <E131Bridge::Run()+0x92>
 800c6cc:	6863      	ldr	r3, [r4, #4]
 800c6ce:	b9eb      	cbnz	r3, 800c70c <E131Bridge::Run()+0x80>
 800c6d0:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800c6d4:	f023 0302 	bic.w	r3, r3, #2
 800c6d8:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800c6dc:	6963      	ldr	r3, [r4, #20]
 800c6de:	b12b      	cbz	r3, 800c6ec <E131Bridge::Run()+0x60>
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	f000 f94f 	bl	800c984 <E131Bridge::HandleDmxIn()>
 800c6e6:	4620      	mov	r0, r4
 800c6e8:	f000 f8ca 	bl	800c880 <E131Bridge::SendDiscoveryPacket()>
 800c6ec:	7a23      	ldrb	r3, [r4, #8]
 800c6ee:	b15b      	cbz	r3, 800c708 <E131Bridge::Run()+0x7c>
 800c6f0:	4b2b      	ldr	r3, [pc, #172]	; (800c7a0 <E131Bridge::Run()+0x114>)
 800c6f2:	6818      	ldr	r0, [r3, #0]
 800c6f4:	6843      	ldr	r3, [r0, #4]
 800c6f6:	2b04      	cmp	r3, #4
 800c6f8:	d006      	beq.n	800c708 <E131Bridge::Run()+0x7c>
 800c6fa:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d049      	beq.n	800c796 <E131Bridge::Run()+0x10a>
 800c702:	2103      	movs	r1, #3
 800c704:	f007 feac 	bl	8014460 <LedBlink::SetMode(ledblink::Mode)>
 800c708:	b005      	add	sp, #20
 800c70a:	bd30      	pop	{r4, r5, pc}
 800c70c:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 800c710:	2b00      	cmp	r3, #0
 800c712:	d1dd      	bne.n	800c6d0 <E131Bridge::Run()+0x44>
 800c714:	2201      	movs	r2, #1
 800c716:	4620      	mov	r0, r4
 800c718:	4611      	mov	r1, r2
 800c71a:	f7ff fd55 	bl	800c1c8 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800c71e:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 800c722:	1a9b      	subs	r3, r3, r2
 800c724:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c728:	d3d8      	bcc.n	800c6dc <E131Bridge::Run()+0x50>
 800c72a:	e7d1      	b.n	800c6d0 <E131Bridge::Run()+0x44>
 800c72c:	4620      	mov	r0, r4
 800c72e:	f7ff ff7b 	bl	800c628 <E131Bridge::IsValidRoot()>
 800c732:	2800      	cmp	r0, #0
 800c734:	d0e8      	beq.n	800c708 <E131Bridge::Run()+0x7c>
 800c736:	2300      	movs	r3, #0
 800c738:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
 800c73c:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800c740:	6125      	str	r5, [r4, #16]
 800c742:	b15b      	cbz	r3, 800c75c <E131Bridge::Run()+0xd0>
 800c744:	f894 34f7 	ldrb.w	r3, [r4, #1271]	; 0x4f7
 800c748:	b943      	cbnz	r3, 800c75c <E131Bridge::Run()+0xd0>
 800c74a:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	; 0x4fc
 800c74e:	1aad      	subs	r5, r5, r2
 800c750:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800c754:	4295      	cmp	r5, r2
 800c756:	bf88      	it	hi
 800c758:	f884 34f6 	strbhi.w	r3, [r4, #1270]	; 0x4f6
 800c75c:	6863      	ldr	r3, [r4, #4]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d0bc      	beq.n	800c6dc <E131Bridge::Run()+0x50>
 800c762:	f8d4 308e 	ldr.w	r3, [r4, #142]	; 0x8e
 800c766:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c76a:	ba1a      	rev	r2, r3
 800c76c:	d108      	bne.n	800c780 <E131Bridge::Run()+0xf4>
 800c76e:	4620      	mov	r0, r4
 800c770:	f7ff ff78 	bl	800c664 <E131Bridge::IsValidDataPacket()>
 800c774:	2800      	cmp	r0, #0
 800c776:	d0b1      	beq.n	800c6dc <E131Bridge::Run()+0x50>
 800c778:	4620      	mov	r0, r4
 800c77a:	f7ff fdad 	bl	800c2d8 <E131Bridge::HandleDmx()>
 800c77e:	e7ad      	b.n	800c6dc <E131Bridge::Run()+0x50>
 800c780:	2a08      	cmp	r2, #8
 800c782:	d1ab      	bne.n	800c6dc <E131Bridge::Run()+0x50>
 800c784:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800c788:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c78c:	d1a6      	bne.n	800c6dc <E131Bridge::Run()+0x50>
 800c78e:	4620      	mov	r0, r4
 800c790:	f000 f976 	bl	800ca80 <E131Bridge::HandleSynchronization()>
 800c794:	e7a2      	b.n	800c6dc <E131Bridge::Run()+0x50>
 800c796:	2102      	movs	r1, #2
 800c798:	e7b4      	b.n	800c704 <E131Bridge::Run()+0x78>
 800c79a:	bf00      	nop
 800c79c:	2000a9dc 	ldrdcs	sl, [r0], -ip
 800c7a0:	2000a9c4 	andcs	sl, r0, r4, asr #19

0800c7a4 <E131Bridge::FillDiscoveryPacket()>:
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800c7aa:	b510      	push	{r4, lr}
 800c7ac:	333c      	adds	r3, #60	; 0x3c
 800c7ae:	005b      	lsls	r3, r3, #1
 800c7b0:	f8a0 3504 	strh.w	r3, [r0, #1284]	; 0x504
 800c7b4:	69c3      	ldr	r3, [r0, #28]
 800c7b6:	f503 618f 	add.w	r1, r3, #1144	; 0x478
 800c7ba:	428b      	cmp	r3, r1
 800c7bc:	d14b      	bne.n	800c856 <E131Bridge::FillDiscoveryPacket()+0xb2>
 800c7be:	69c3      	ldr	r3, [r0, #28]
 800c7c0:	492e      	ldr	r1, [pc, #184]	; (800c87c <E131Bridge::FillDiscoveryPacket()+0xd8>)
 800c7c2:	701a      	strb	r2, [r3, #0]
 800c7c4:	2210      	movs	r2, #16
 800c7c6:	705a      	strb	r2, [r3, #1]
 800c7c8:	1d1a      	adds	r2, r3, #4
 800c7ca:	3310      	adds	r3, #16
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d145      	bne.n	800c85c <E131Bridge::FillDiscoveryPacket()+0xb8>
 800c7d0:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800c7d4:	69c3      	ldr	r3, [r0, #28]
 800c7d6:	3234      	adds	r2, #52	; 0x34
 800c7d8:	0052      	lsls	r2, r2, #1
 800c7da:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800c7de:	ba52      	rev16	r2, r2
 800c7e0:	821a      	strh	r2, [r3, #16]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	749a      	strb	r2, [r3, #18]
 800c7e6:	74da      	strb	r2, [r3, #19]
 800c7e8:	751a      	strb	r2, [r3, #20]
 800c7ea:	2208      	movs	r2, #8
 800c7ec:	f100 0124 	add.w	r1, r0, #36	; 0x24
 800c7f0:	755a      	strb	r2, [r3, #21]
 800c7f2:	3316      	adds	r3, #22
 800c7f4:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800c7f8:	4291      	cmp	r1, r2
 800c7fa:	d134      	bne.n	800c866 <E131Bridge::FillDiscoveryPacket()+0xc2>
 800c7fc:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800c800:	69c3      	ldr	r3, [r0, #28]
 800c802:	3229      	adds	r2, #41	; 0x29
 800c804:	0052      	lsls	r2, r2, #1
 800c806:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800c80a:	ba52      	rev16	r2, r2
 800c80c:	84da      	strh	r2, [r3, #38]	; 0x26
 800c80e:	2200      	movs	r2, #0
 800c810:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800c814:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800c818:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800c81c:	2202      	movs	r2, #2
 800c81e:	332c      	adds	r3, #44	; 0x2c
 800c820:	f803 2c01 	strb.w	r2, [r3, #-1]
 800c824:	f100 0274 	add.w	r2, r0, #116	; 0x74
 800c828:	4291      	cmp	r1, r2
 800c82a:	d121      	bne.n	800c870 <E131Bridge::FillDiscoveryPacket()+0xcc>
 800c82c:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800c830:	69c2      	ldr	r2, [r0, #28]
 800c832:	3304      	adds	r3, #4
 800c834:	005b      	lsls	r3, r3, #1
 800c836:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800c83a:	ba5b      	rev16	r3, r3
 800c83c:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
 800c840:	2300      	movs	r3, #0
 800c842:	f882 3072 	strb.w	r3, [r2, #114]	; 0x72
 800c846:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
 800c84a:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
 800c84e:	2301      	movs	r3, #1
 800c850:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
 800c854:	bd10      	pop	{r4, pc}
 800c856:	f803 2b01 	strb.w	r2, [r3], #1
 800c85a:	e7ae      	b.n	800c7ba <E131Bridge::FillDiscoveryPacket()+0x16>
 800c85c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c860:	f802 4b01 	strb.w	r4, [r2], #1
 800c864:	e7b2      	b.n	800c7cc <E131Bridge::FillDiscoveryPacket()+0x28>
 800c866:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c86a:	f803 4b01 	strb.w	r4, [r3], #1
 800c86e:	e7c3      	b.n	800c7f8 <E131Bridge::FillDiscoveryPacket()+0x54>
 800c870:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c874:	f803 4b01 	strb.w	r4, [r3], #1
 800c878:	e7d6      	b.n	800c828 <E131Bridge::FillDiscoveryPacket()+0x84>
 800c87a:	bf00      	nop
 800c87c:	08016ec0 	stmdaeq	r1, {r6, r7, r9, sl, fp, sp, lr}

0800c880 <E131Bridge::SendDiscoveryPacket()>:
 800c880:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c882:	f242 710f 	movw	r1, #9999	; 0x270f
 800c886:	68c2      	ldr	r2, [r0, #12]
 800c888:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
 800c88c:	4604      	mov	r4, r0
 800c88e:	1ad3      	subs	r3, r2, r3
 800c890:	428b      	cmp	r3, r1
 800c892:	d924      	bls.n	800c8de <E131Bridge::SendDiscoveryPacket()+0x5e>
 800c894:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800c898:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
 800c89c:	b1ab      	cbz	r3, 800c8ca <E131Bridge::SendDiscoveryPacket()+0x4a>
 800c89e:	2500      	movs	r5, #0
 800c8a0:	462e      	mov	r6, r5
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	4629      	mov	r1, r5
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	f10d 020e 	add.w	r2, sp, #14
 800c8ac:	f7ff fbea 	bl	800c084 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800c8b0:	b140      	cbz	r0, 800c8c4 <E131Bridge::SendDiscoveryPacket()+0x44>
 800c8b2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800c8b6:	69e2      	ldr	r2, [r4, #28]
 800c8b8:	f106 013c 	add.w	r1, r6, #60	; 0x3c
 800c8bc:	ba5b      	rev16	r3, r3
 800c8be:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800c8c2:	3601      	adds	r6, #1
 800c8c4:	3501      	adds	r5, #1
 800c8c6:	2d04      	cmp	r5, #4
 800c8c8:	d1eb      	bne.n	800c8a2 <E131Bridge::SendDiscoveryPacket()+0x22>
 800c8ca:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800c8ce:	f8b4 2504 	ldrh.w	r2, [r4, #1284]	; 0x504
 800c8d2:	9300      	str	r3, [sp, #0]
 800c8d4:	69e1      	ldr	r1, [r4, #28]
 800c8d6:	6a23      	ldr	r3, [r4, #32]
 800c8d8:	7820      	ldrb	r0, [r4, #0]
 800c8da:	f004 fdad 	bl	8011438 <udp_send>
 800c8de:	b004      	add	sp, #16
 800c8e0:	bd70      	pop	{r4, r5, r6, pc}

0800c8e2 <memcpy.isra.0>:
 800c8e2:	3801      	subs	r0, #1
 800c8e4:	440a      	add	r2, r1
 800c8e6:	4291      	cmp	r1, r2
 800c8e8:	d100      	bne.n	800c8ec <memcpy.isra.0+0xa>
 800c8ea:	4770      	bx	lr
 800c8ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8f0:	f800 3f01 	strb.w	r3, [r0, #1]!
 800c8f4:	e7f7      	b.n	800c8e6 <memcpy.isra.0+0x4>
	...

0800c8f8 <E131Bridge::FillDataPacket()>:
 800c8f8:	b570      	push	{r4, r5, r6, lr}
 800c8fa:	2400      	movs	r4, #0
 800c8fc:	2610      	movs	r6, #16
 800c8fe:	4605      	mov	r5, r0
 800c900:	6980      	ldr	r0, [r0, #24]
 800c902:	220c      	movs	r2, #12
 800c904:	7046      	strb	r6, [r0, #1]
 800c906:	7004      	strb	r4, [r0, #0]
 800c908:	7084      	strb	r4, [r0, #2]
 800c90a:	70c4      	strb	r4, [r0, #3]
 800c90c:	491c      	ldr	r1, [pc, #112]	; (800c980 <E131Bridge::FillDataPacket()+0x88>)
 800c90e:	3004      	adds	r0, #4
 800c910:	f7ff ffe7 	bl	800c8e2 <memcpy.isra.0>
 800c914:	2304      	movs	r3, #4
 800c916:	4632      	mov	r2, r6
 800c918:	2602      	movs	r6, #2
 800c91a:	69a8      	ldr	r0, [r5, #24]
 800c91c:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800c920:	7543      	strb	r3, [r0, #21]
 800c922:	7484      	strb	r4, [r0, #18]
 800c924:	74c4      	strb	r4, [r0, #19]
 800c926:	7504      	strb	r4, [r0, #20]
 800c928:	3016      	adds	r0, #22
 800c92a:	f7ff ffda 	bl	800c8e2 <memcpy.isra.0>
 800c92e:	69a8      	ldr	r0, [r5, #24]
 800c930:	2240      	movs	r2, #64	; 0x40
 800c932:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
 800c936:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
 800c93a:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
 800c93e:	f880 602b 	strb.w	r6, [r0, #43]	; 0x2b
 800c942:	f105 0134 	add.w	r1, r5, #52	; 0x34
 800c946:	302c      	adds	r0, #44	; 0x2c
 800c948:	f7ff ffcb 	bl	800c8e2 <memcpy.isra.0>
 800c94c:	22a1      	movs	r2, #161	; 0xa1
 800c94e:	69ab      	ldr	r3, [r5, #24]
 800c950:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
 800c954:	f883 406d 	strb.w	r4, [r3, #109]	; 0x6d
 800c958:	f883 406e 	strb.w	r4, [r3, #110]	; 0x6e
 800c95c:	69ab      	ldr	r3, [r5, #24]
 800c95e:	f883 6075 	strb.w	r6, [r3, #117]	; 0x75
 800c962:	69ab      	ldr	r3, [r5, #24]
 800c964:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800c968:	2201      	movs	r2, #1
 800c96a:	69ab      	ldr	r3, [r5, #24]
 800c96c:	f883 4077 	strb.w	r4, [r3, #119]	; 0x77
 800c970:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
 800c974:	f883 4079 	strb.w	r4, [r3, #121]	; 0x79
 800c978:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 800c97c:	bd70      	pop	{r4, r5, r6, pc}
 800c97e:	bf00      	nop
 800c980:	08016ec0 	stmdaeq	r1, {r6, r7, r9, sl, fp, sp, lr}

0800c984 <E131Bridge::HandleDmxIn()>:
 800c984:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800c988:	4604      	mov	r4, r0
 800c98a:	4605      	mov	r5, r0
 800c98c:	2600      	movs	r6, #0
 800c98e:	4f3b      	ldr	r7, [pc, #236]	; (800ca7c <E131Bridge::HandleDmxIn()+0xf8>)
 800c990:	f895 3622 	ldrb.w	r3, [r5, #1570]	; 0x622
 800c994:	2b00      	cmp	r3, #0
 800c996:	d058      	beq.n	800ca4a <E131Bridge::HandleDmxIn()+0xc6>
 800c998:	6960      	ldr	r0, [r4, #20]
 800c99a:	4631      	mov	r1, r6
 800c99c:	6803      	ldr	r3, [r0, #0]
 800c99e:	aa02      	add	r2, sp, #8
 800c9a0:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800c9a4:	ab03      	add	r3, sp, #12
 800c9a6:	47c0      	blx	r8
 800c9a8:	4601      	mov	r1, r0
 800c9aa:	2800      	cmp	r0, #0
 800c9ac:	d055      	beq.n	800ca5a <E131Bridge::HandleDmxIn()+0xd6>
 800c9ae:	9a02      	ldr	r2, [sp, #8]
 800c9b0:	69a0      	ldr	r0, [r4, #24]
 800c9b2:	b293      	uxth	r3, r2
 800c9b4:	f103 0c6d 	add.w	ip, r3, #109	; 0x6d
 800c9b8:	f44c 4ce0 	orr.w	ip, ip, #28672	; 0x7000
 800c9bc:	fa9c fc9c 	rev16.w	ip, ip
 800c9c0:	f8a0 c010 	strh.w	ip, [r0, #16]
 800c9c4:	f103 0c57 	add.w	ip, r3, #87	; 0x57
 800c9c8:	f44c 4ce0 	orr.w	ip, ip, #28672	; 0x7000
 800c9cc:	fa9c fc9c 	rev16.w	ip, ip
 800c9d0:	f8a0 c026 	strh.w	ip, [r0, #38]	; 0x26
 800c9d4:	f895 c629 	ldrb.w	ip, [r5, #1577]	; 0x629
 800c9d8:	330a      	adds	r3, #10
 800c9da:	f880 c06c 	strb.w	ip, [r0, #108]	; 0x6c
 800c9de:	f895 c628 	ldrb.w	ip, [r5, #1576]	; 0x628
 800c9e2:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800c9e6:	f10c 0001 	add.w	r0, ip, #1
 800c9ea:	f885 0628 	strb.w	r0, [r5, #1576]	; 0x628
 800c9ee:	69a0      	ldr	r0, [r4, #24]
 800c9f0:	ba5b      	rev16	r3, r3
 800c9f2:	f880 c06f 	strb.w	ip, [r0, #111]	; 0x6f
 800c9f6:	f8b5 c620 	ldrh.w	ip, [r5, #1568]	; 0x620
 800c9fa:	69a0      	ldr	r0, [r4, #24]
 800c9fc:	fa9c fc9c 	rev16.w	ip, ip
 800ca00:	f8a0 c071 	strh.w	ip, [r0, #113]	; 0x71
 800ca04:	f8a0 3073 	strh.w	r3, [r0, #115]	; 0x73
 800ca08:	307d      	adds	r0, #125	; 0x7d
 800ca0a:	f7ff ff6a 	bl	800c8e2 <memcpy.isra.0>
 800ca0e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800ca12:	69a1      	ldr	r1, [r4, #24]
 800ca14:	ba53      	rev16	r3, r2
 800ca16:	f8a1 307b 	strh.w	r3, [r1, #123]	; 0x7b
 800ca1a:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800ca1e:	327d      	adds	r2, #125	; 0x7d
 800ca20:	9300      	str	r3, [sp, #0]
 800ca22:	f8d5 3624 	ldr.w	r3, [r5, #1572]	; 0x624
 800ca26:	b292      	uxth	r2, r2
 800ca28:	7820      	ldrb	r0, [r4, #0]
 800ca2a:	f004 fd05 	bl	8011438 <udp_send>
 800ca2e:	2301      	movs	r3, #1
 800ca30:	683a      	ldr	r2, [r7, #0]
 800ca32:	40b3      	lsls	r3, r6
 800ca34:	ea33 0102 	bics.w	r1, r3, r2
 800ca38:	d007      	beq.n	800ca4a <E131Bridge::HandleDmxIn()+0xc6>
 800ca3a:	4313      	orrs	r3, r2
 800ca3c:	603b      	str	r3, [r7, #0]
 800ca3e:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800ca42:	f043 0301 	orr.w	r3, r3, #1
 800ca46:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800ca4a:	3601      	adds	r6, #1
 800ca4c:	2e04      	cmp	r6, #4
 800ca4e:	f105 050c 	add.w	r5, r5, #12
 800ca52:	d19d      	bne.n	800c990 <E131Bridge::HandleDmxIn()+0xc>
 800ca54:	b004      	add	sp, #16
 800ca56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca5a:	9b03      	ldr	r3, [sp, #12]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d1f4      	bne.n	800ca4a <E131Bridge::HandleDmxIn()+0xc6>
 800ca60:	2201      	movs	r2, #1
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	40b2      	lsls	r2, r6
 800ca66:	ea23 0302 	bic.w	r3, r3, r2
 800ca6a:	603b      	str	r3, [r7, #0]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d1ec      	bne.n	800ca4a <E131Bridge::HandleDmxIn()+0xc6>
 800ca70:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800ca74:	f023 0301 	bic.w	r3, r3, #1
 800ca78:	e7e5      	b.n	800ca46 <E131Bridge::HandleDmxIn()+0xc2>
 800ca7a:	bf00      	nop
 800ca7c:	20001914 	andcs	r1, r0, r4, lsl r9

0800ca80 <E131Bridge::HandleSynchronization()>:
 800ca80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca84:	f8b0 30a9 	ldrh.w	r3, [r0, #169]	; 0xa9
 800ca88:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800ca8c:	ba5b      	rev16	r3, r3
 800ca8e:	b29b      	uxth	r3, r3
 800ca90:	429a      	cmp	r2, r3
 800ca92:	4604      	mov	r4, r0
 800ca94:	d00a      	beq.n	800caac <E131Bridge::HandleSynchronization()+0x2c>
 800ca96:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	d006      	beq.n	800caac <E131Bridge::HandleSynchronization()+0x2c>
 800ca9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caa2:	4b23      	ldr	r3, [pc, #140]	; (800cb30 <E131Bridge::HandleSynchronization()+0xb0>)
 800caa4:	2102      	movs	r1, #2
 800caa6:	6818      	ldr	r0, [r3, #0]
 800caa8:	f007 bcda 	b.w	8014460 <LedBlink::SetMode(ledblink::Mode)>
 800caac:	2500      	movs	r5, #0
 800caae:	4627      	mov	r7, r4
 800cab0:	46a9      	mov	r9, r5
 800cab2:	68e3      	ldr	r3, [r4, #12]
 800cab4:	4e1f      	ldr	r6, [pc, #124]	; (800cb34 <E131Bridge::HandleSynchronization()+0xb4>)
 800cab6:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800cb38 <E131Bridge::HandleSynchronization()+0xb8>
 800caba:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
 800cabe:	f897 3512 	ldrb.w	r3, [r7, #1298]	; 0x512
 800cac2:	b323      	cbz	r3, 800cb0e <E131Bridge::HandleSynchronization()+0x8e>
 800cac4:	f8d8 3000 	ldr.w	r3, [r8]
 800cac8:	6860      	ldr	r0, [r4, #4]
 800caca:	07da      	lsls	r2, r3, #31
 800cacc:	bf5c      	itt	pl
 800cace:	2301      	movpl	r3, #1
 800cad0:	f8c8 3000 	strpl.w	r3, [r8]
 800cad4:	6803      	ldr	r3, [r0, #0]
 800cad6:	4629      	mov	r1, r5
 800cad8:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800cadc:	f506 6280 	add.w	r2, r6, #1024	; 0x400
 800cae0:	f8d6 3600 	ldr.w	r3, [r6, #1536]	; 0x600
 800cae4:	47d0      	blx	sl
 800cae6:	f897 3552 	ldrb.w	r3, [r7, #1362]	; 0x552
 800caea:	b93b      	cbnz	r3, 800cafc <E131Bridge::HandleSynchronization()+0x7c>
 800caec:	6860      	ldr	r0, [r4, #4]
 800caee:	4629      	mov	r1, r5
 800caf0:	6803      	ldr	r3, [r0, #0]
 800caf2:	689b      	ldr	r3, [r3, #8]
 800caf4:	4798      	blx	r3
 800caf6:	2301      	movs	r3, #1
 800caf8:	f887 3552 	strb.w	r3, [r7, #1362]	; 0x552
 800cafc:	f8d8 3000 	ldr.w	r3, [r8]
 800cb00:	f8c6 9600 	str.w	r9, [r6, #1536]	; 0x600
 800cb04:	07db      	lsls	r3, r3, #31
 800cb06:	bf5c      	itt	pl
 800cb08:	2301      	movpl	r3, #1
 800cb0a:	f8c8 3000 	strpl.w	r3, [r8]
 800cb0e:	3501      	adds	r5, #1
 800cb10:	2d04      	cmp	r5, #4
 800cb12:	f107 0744 	add.w	r7, r7, #68	; 0x44
 800cb16:	f206 6604 	addw	r6, r6, #1540	; 0x604
 800cb1a:	d1d0      	bne.n	800cabe <E131Bridge::HandleSynchronization()+0x3e>
 800cb1c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800cb1e:	b120      	cbz	r0, 800cb2a <E131Bridge::HandleSynchronization()+0xaa>
 800cb20:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb24:	6803      	ldr	r3, [r0, #0]
 800cb26:	689b      	ldr	r3, [r3, #8]
 800cb28:	4718      	bx	r3
 800cb2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb2e:	bf00      	nop
 800cb30:	2000a9c4 	andcs	sl, r0, r4, asr #19
 800cb34:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800cb38:	200000ec 	andcs	r0, r0, ip, ror #1

0800cb3c <E131Bridge::Print()>:
 800cb3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb40:	2500      	movs	r5, #0
 800cb42:	4604      	mov	r4, r0
 800cb44:	b08c      	sub	sp, #48	; 0x30
 800cb46:	a902      	add	r1, sp, #8
 800cb48:	3024      	adds	r0, #36	; 0x24
 800cb4a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800cb4e:	f000 f8b3 	bl	800ccb8 <uuid_unparse>
 800cb52:	482c      	ldr	r0, [pc, #176]	; (800cc04 <E131Bridge::Print()+0xc8>)
 800cb54:	f7fc fc1e 	bl	8009394 <printf>
 800cb58:	4b2b      	ldr	r3, [pc, #172]	; (800cc08 <E131Bridge::Print()+0xcc>)
 800cb5a:	482c      	ldr	r0, [pc, #176]	; (800cc0c <E131Bridge::Print()+0xd0>)
 800cb5c:	7819      	ldrb	r1, [r3, #0]
 800cb5e:	785a      	ldrb	r2, [r3, #1]
 800cb60:	f7fc fc18 	bl	8009394 <printf>
 800cb64:	482a      	ldr	r0, [pc, #168]	; (800cc10 <E131Bridge::Print()+0xd4>)
 800cb66:	a902      	add	r1, sp, #8
 800cb68:	f7fc fc14 	bl	8009394 <printf>
 800cb6c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800cb70:	b303      	cbz	r3, 800cbb4 <E131Bridge::Print()+0x78>
 800cb72:	4828      	ldr	r0, [pc, #160]	; (800cc14 <E131Bridge::Print()+0xd8>)
 800cb74:	f7fc fc0e 	bl	8009394 <printf>
 800cb78:	4e27      	ldr	r6, [pc, #156]	; (800cc18 <E131Bridge::Print()+0xdc>)
 800cb7a:	4f28      	ldr	r7, [pc, #160]	; (800cc1c <E131Bridge::Print()+0xe0>)
 800cb7c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800cc20 <E131Bridge::Print()+0xe4>
 800cb80:	2301      	movs	r3, #1
 800cb82:	4629      	mov	r1, r5
 800cb84:	4620      	mov	r0, r4
 800cb86:	f10d 0206 	add.w	r2, sp, #6
 800cb8a:	f7ff fa7b 	bl	800c084 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800cb8e:	b170      	cbz	r0, 800cbae <E131Bridge::Print()+0x72>
 800cb90:	2344      	movs	r3, #68	; 0x44
 800cb92:	436b      	muls	r3, r5
 800cb94:	f204 524c 	addw	r2, r4, #1356	; 0x54c
 800cb98:	58d3      	ldr	r3, [r2, r3]
 800cb9a:	4629      	mov	r1, r5
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	bf0c      	ite	eq
 800cba0:	4633      	moveq	r3, r6
 800cba2:	463b      	movne	r3, r7
 800cba4:	4640      	mov	r0, r8
 800cba6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cbaa:	f7fc fbf3 	bl	8009394 <printf>
 800cbae:	3501      	adds	r5, #1
 800cbb0:	2d04      	cmp	r5, #4
 800cbb2:	d1e5      	bne.n	800cb80 <E131Bridge::Print()+0x44>
 800cbb4:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800cbb8:	b1d3      	cbz	r3, 800cbf0 <E131Bridge::Print()+0xb4>
 800cbba:	481a      	ldr	r0, [pc, #104]	; (800cc24 <E131Bridge::Print()+0xe8>)
 800cbbc:	f7fc fbea 	bl	8009394 <printf>
 800cbc0:	2500      	movs	r5, #0
 800cbc2:	4e19      	ldr	r6, [pc, #100]	; (800cc28 <E131Bridge::Print()+0xec>)
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	4629      	mov	r1, r5
 800cbc8:	4620      	mov	r0, r4
 800cbca:	f10d 0206 	add.w	r2, sp, #6
 800cbce:	f7ff fa59 	bl	800c084 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800cbd2:	b150      	cbz	r0, 800cbea <E131Bridge::Print()+0xae>
 800cbd4:	230c      	movs	r3, #12
 800cbd6:	436b      	muls	r3, r5
 800cbd8:	f204 6229 	addw	r2, r4, #1577	; 0x629
 800cbdc:	5cd3      	ldrb	r3, [r2, r3]
 800cbde:	4629      	mov	r1, r5
 800cbe0:	4630      	mov	r0, r6
 800cbe2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cbe6:	f7fc fbd5 	bl	8009394 <printf>
 800cbea:	3501      	adds	r5, #1
 800cbec:	2d04      	cmp	r5, #4
 800cbee:	d1e9      	bne.n	800cbc4 <E131Bridge::Print()+0x88>
 800cbf0:	f894 34fb 	ldrb.w	r3, [r4, #1275]	; 0x4fb
 800cbf4:	b113      	cbz	r3, 800cbfc <E131Bridge::Print()+0xc0>
 800cbf6:	480d      	ldr	r0, [pc, #52]	; (800cc2c <E131Bridge::Print()+0xf0>)
 800cbf8:	f7fc fbcc 	bl	8009394 <printf>
 800cbfc:	b00c      	add	sp, #48	; 0x30
 800cbfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc02:	bf00      	nop
 800cc04:	08016e3d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r9, sl, fp, sp, lr}
 800cc08:	08016ecc 	stmdaeq	r1, {r2, r3, r6, r7, r9, sl, fp, sp, lr}
 800cc0c:	08016e45 	stmdaeq	r1, {r0, r2, r6, r9, sl, fp, sp, lr}
 800cc10:	08016e58 	stmdaeq	r1, {r3, r4, r6, r9, sl, fp, sp, lr}
 800cc14:	08016bd5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, r9, fp, sp, lr}
 800cc18:	08016b79 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, r9, fp, sp, lr}
 800cc1c:	08016b7d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r8, r9, fp, sp, lr}
 800cc20:	08016e68 	stmdaeq	r1, {r3, r5, r6, r9, sl, fp, sp, lr}
 800cc24:	08016c0d 	stmdaeq	r1, {r0, r2, r3, sl, fp, sp, lr}
 800cc28:	08016e87 	stmdaeq	r1, {r0, r1, r2, r7, r9, sl, fp, sp, lr}
 800cc2c:	08016ea6 	stmdaeq	r1, {r1, r2, r5, r7, r9, sl, fp, sp, lr}

0800cc30 <uuid_unparse_x>:
 800cc30:	4603      	mov	r3, r0
 800cc32:	b530      	push	{r4, r5, lr}
 800cc34:	4608      	mov	r0, r1
 800cc36:	4611      	mov	r1, r2
 800cc38:	681a      	ldr	r2, [r3, #0]
 800cc3a:	b08f      	sub	sp, #60	; 0x3c
 800cc3c:	ba12      	rev	r2, r2
 800cc3e:	920a      	str	r2, [sp, #40]	; 0x28
 800cc40:	889a      	ldrh	r2, [r3, #4]
 800cc42:	891c      	ldrh	r4, [r3, #8]
 800cc44:	ba52      	rev16	r2, r2
 800cc46:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800cc4a:	88da      	ldrh	r2, [r3, #6]
 800cc4c:	ba64      	rev16	r4, r4
 800cc4e:	ba52      	rev16	r2, r2
 800cc50:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 800cc54:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
 800cc58:	f103 020a 	add.w	r2, r3, #10
 800cc5c:	f10d 0432 	add.w	r4, sp, #50	; 0x32
 800cc60:	3310      	adds	r3, #16
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d122      	bne.n	800ccac <uuid_unparse_x+0x7c>
 800cc66:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800cc6a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800cc6e:	9208      	str	r2, [sp, #32]
 800cc70:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 800cc74:	0a1b      	lsrs	r3, r3, #8
 800cc76:	9207      	str	r2, [sp, #28]
 800cc78:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800cc7c:	9301      	str	r3, [sp, #4]
 800cc7e:	9206      	str	r2, [sp, #24]
 800cc80:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800cc84:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800cc88:	9205      	str	r2, [sp, #20]
 800cc8a:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800cc8e:	9300      	str	r3, [sp, #0]
 800cc90:	9204      	str	r2, [sp, #16]
 800cc92:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800cc96:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800cc9a:	9203      	str	r2, [sp, #12]
 800cc9c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800cca0:	9202      	str	r2, [sp, #8]
 800cca2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cca4:	f7fc fb86 	bl	80093b4 <sprintf>
 800cca8:	b00f      	add	sp, #60	; 0x3c
 800ccaa:	bd30      	pop	{r4, r5, pc}
 800ccac:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ccb0:	f804 5b01 	strb.w	r5, [r4], #1
 800ccb4:	e7d5      	b.n	800cc62 <uuid_unparse_x+0x32>
	...

0800ccb8 <uuid_unparse>:
 800ccb8:	4a01      	ldr	r2, [pc, #4]	; (800ccc0 <uuid_unparse+0x8>)
 800ccba:	f7ff bfb9 	b.w	800cc30 <uuid_unparse_x>
 800ccbe:	bf00      	nop
 800ccc0:	08016ece 	stmdaeq	r1, {r1, r2, r3, r6, r7, r9, sl, fp, sp, lr}

0800ccc4 <WS28xxDmx::GetDmxStartAddress()>:
 800ccc4:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
 800ccc6:	4770      	bx	lr

0800ccc8 <WS28xxDmx::GetDmxFootprint()>:
 800ccc8:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 800ccca:	4770      	bx	lr

0800cccc <WS28xxDmx::~WS28xxDmx()>:
 800cccc:	b538      	push	{r3, r4, r5, lr}
 800ccce:	4b06      	ldr	r3, [pc, #24]	; (800cce8 <WS28xxDmx::~WS28xxDmx()+0x1c>)
 800ccd0:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800ccd2:	4604      	mov	r4, r0
 800ccd4:	6003      	str	r3, [r0, #0]
 800ccd6:	b12d      	cbz	r5, 800cce4 <WS28xxDmx::~WS28xxDmx()+0x18>
 800ccd8:	4628      	mov	r0, r5
 800ccda:	f001 ff59 	bl	800eb90 <WS28xx::~WS28xx()>
 800ccde:	4628      	mov	r0, r5
 800cce0:	f007 fca2 	bl	8014628 <operator delete(void*)>
 800cce4:	4620      	mov	r0, r4
 800cce6:	bd38      	pop	{r3, r4, r5, pc}
 800cce8:	08016f08 	stmdaeq	r1, {r3, r8, r9, sl, fp, sp, lr}

0800ccec <WS28xxDmx::~WS28xxDmx()>:
 800ccec:	b510      	push	{r4, lr}
 800ccee:	4604      	mov	r4, r0
 800ccf0:	f7ff ffec 	bl	800cccc <WS28xxDmx::~WS28xxDmx()>
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	f007 fc97 	bl	8014628 <operator delete(void*)>
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	bd10      	pop	{r4, pc}

0800ccfe <WS28xxDmx::Blackout(bool)>:
 800ccfe:	b538      	push	{r3, r4, r5, lr}
 800cd00:	4605      	mov	r5, r0
 800cd02:	460c      	mov	r4, r1
 800cd04:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
 800cd08:	f008 fe8c 	bl	8015a24 <gd32_spi_dma_tx_is_active()>
 800cd0c:	2800      	cmp	r0, #0
 800cd0e:	d1fb      	bne.n	800cd08 <WS28xxDmx::Blackout(bool)+0xa>
 800cd10:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800cd12:	b11c      	cbz	r4, 800cd1c <WS28xxDmx::Blackout(bool)+0x1e>
 800cd14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd18:	f001 bfb4 	b.w	800ec84 <WS28xx::Blackout()>
 800cd1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd20:	f001 bf94 	b.w	800ec4c <WS28xx::Update()>

0800cd24 <WS28xxDmx::Start(unsigned int)>:
 800cd24:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800cd28:	b93b      	cbnz	r3, 800cd3a <WS28xxDmx::Start(unsigned int)+0x16>
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800cd30:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800cd32:	b110      	cbz	r0, 800cd3a <WS28xxDmx::Start(unsigned int)+0x16>
 800cd34:	6803      	ldr	r3, [r0, #0]
 800cd36:	689b      	ldr	r3, [r3, #8]
 800cd38:	4718      	bx	r3
 800cd3a:	4770      	bx	lr

0800cd3c <WS28xxDmx::SetDmxStartAddress(unsigned short)>:
 800cd3c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
 800cd3e:	b508      	push	{r3, lr}
 800cd40:	428a      	cmp	r2, r1
 800cd42:	d101      	bne.n	800cd48 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xc>
 800cd44:	2001      	movs	r0, #1
 800cd46:	bd08      	pop	{r3, pc}
 800cd48:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 800cd4a:	440a      	add	r2, r1
 800cd4c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800cd50:	dc0b      	bgt.n	800cd6a <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x2e>
 800cd52:	1e4a      	subs	r2, r1, #1
 800cd54:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800cd58:	d207      	bcs.n	800cd6a <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x2e>
 800cd5a:	85c1      	strh	r1, [r0, #46]	; 0x2e
 800cd5c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800cd5e:	2800      	cmp	r0, #0
 800cd60:	d0f0      	beq.n	800cd44 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x8>
 800cd62:	6803      	ldr	r3, [r0, #0]
 800cd64:	69db      	ldr	r3, [r3, #28]
 800cd66:	4798      	blx	r3
 800cd68:	e7ec      	b.n	800cd44 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x8>
 800cd6a:	2000      	movs	r0, #0
 800cd6c:	e7eb      	b.n	800cd46 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xa>

0800cd6e <WS28xxDmx::Stop(unsigned int)>:
 800cd6e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800cd72:	b510      	push	{r4, lr}
 800cd74:	4604      	mov	r4, r0
 800cd76:	b16b      	cbz	r3, 800cd94 <WS28xxDmx::Stop(unsigned int)+0x26>
 800cd78:	2300      	movs	r3, #0
 800cd7a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800cd7e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800cd80:	b108      	cbz	r0, 800cd86 <WS28xxDmx::Stop(unsigned int)+0x18>
 800cd82:	f001 ff7f 	bl	800ec84 <WS28xx::Blackout()>
 800cd86:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800cd88:	b120      	cbz	r0, 800cd94 <WS28xxDmx::Stop(unsigned int)+0x26>
 800cd8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd8e:	6803      	ldr	r3, [r0, #0]
 800cd90:	68db      	ldr	r3, [r3, #12]
 800cd92:	4718      	bx	r3
 800cd94:	bd10      	pop	{r4, pc}

0800cd96 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 800cd96:	4603      	mov	r3, r0
 800cd98:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 800cd9a:	4288      	cmp	r0, r1
 800cd9c:	f04f 0000 	mov.w	r0, #0
 800cda0:	d30f      	bcc.n	800cdc2 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x2c>
 800cda2:	7090      	strb	r0, [r2, #2]
 800cda4:	6a1b      	ldr	r3, [r3, #32]
 800cda6:	fbb1 f0f3 	udiv	r0, r1, r3
 800cdaa:	fb03 1110 	mls	r1, r3, r0, r1
 800cdae:	2903      	cmp	r1, #3
 800cdb0:	d80e      	bhi.n	800cdd0 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x3a>
 800cdb2:	e8df f001 	tbb	[pc, r1]
 800cdb6:	0d0a0702 	stceq	7, cr0, [sl, #-8]
 800cdba:	f240 2305 	movw	r3, #517	; 0x205
 800cdbe:	2001      	movs	r0, #1
 800cdc0:	8013      	strh	r3, [r2, #0]
 800cdc2:	4770      	bx	lr
 800cdc4:	f240 2306 	movw	r3, #518	; 0x206
 800cdc8:	e7f9      	b.n	800cdbe <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>
 800cdca:	f240 2307 	movw	r3, #519	; 0x207
 800cdce:	e7f6      	b.n	800cdbe <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>
 800cdd0:	f240 2312 	movw	r3, #530	; 0x212
 800cdd4:	e7f3      	b.n	800cdbe <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>

0800cdd6 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)>:
 800cdd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdda:	b085      	sub	sp, #20
 800cddc:	4606      	mov	r6, r0
 800cdde:	4691      	mov	r9, r2
 800cde0:	4698      	mov	r8, r3
 800cde2:	9103      	str	r1, [sp, #12]
 800cde4:	f008 fe1e 	bl	8015a24 <gd32_spi_dma_tx_is_active()>
 800cde8:	2800      	cmp	r0, #0
 800cdea:	d172      	bne.n	800ced2 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xfc>
 800cdec:	9b03      	ldr	r3, [sp, #12]
 800cdee:	6972      	ldr	r2, [r6, #20]
 800cdf0:	f003 0103 	and.w	r1, r3, #3
 800cdf4:	6a33      	ldr	r3, [r6, #32]
 800cdf6:	2902      	cmp	r1, #2
 800cdf8:	fbb8 f7f3 	udiv	r7, r8, r3
 800cdfc:	d01f      	beq.n	800ce3e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x68>
 800cdfe:	2903      	cmp	r1, #3
 800ce00:	d024      	beq.n	800ce4c <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x76>
 800ce02:	2901      	cmp	r1, #1
 800ce04:	6875      	ldr	r5, [r6, #4]
 800ce06:	d01b      	beq.n	800ce40 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x6a>
 800ce08:	4297      	cmp	r7, r2
 800ce0a:	bf28      	it	cs
 800ce0c:	4617      	movcs	r7, r2
 800ce0e:	4295      	cmp	r5, r2
 800ce10:	d91e      	bls.n	800ce50 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x7a>
 800ce12:	4605      	mov	r5, r0
 800ce14:	8df4      	ldrh	r4, [r6, #46]	; 0x2e
 800ce16:	3c01      	subs	r4, #1
 800ce18:	2b03      	cmp	r3, #3
 800ce1a:	444c      	add	r4, r9
 800ce1c:	d144      	bne.n	800cea8 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xd2>
 800ce1e:	42bd      	cmp	r5, r7
 800ce20:	d325      	bcc.n	800ce6e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x98>
 800ce22:	6933      	ldr	r3, [r6, #16]
 800ce24:	9a03      	ldr	r2, [sp, #12]
 800ce26:	429a      	cmp	r2, r3
 800ce28:	d153      	bne.n	800ced2 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xfc>
 800ce2a:	f896 3041 	ldrb.w	r3, [r6, #65]	; 0x41
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d14f      	bne.n	800ced2 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xfc>
 800ce32:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800ce34:	b005      	add	sp, #20
 800ce36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce3a:	f001 bf07 	b.w	800ec4c <WS28xx::Update()>
 800ce3e:	68b5      	ldr	r5, [r6, #8]
 800ce40:	442f      	add	r7, r5
 800ce42:	4297      	cmp	r7, r2
 800ce44:	bf28      	it	cs
 800ce46:	4617      	movcs	r7, r2
 800ce48:	4604      	mov	r4, r0
 800ce4a:	e7e5      	b.n	800ce18 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x42>
 800ce4c:	68f5      	ldr	r5, [r6, #12]
 800ce4e:	e7f7      	b.n	800ce40 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x6a>
 800ce50:	4605      	mov	r5, r0
 800ce52:	4604      	mov	r4, r0
 800ce54:	e7e0      	b.n	800ce18 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x42>
 800ce56:	78a2      	ldrb	r2, [r4, #2]
 800ce58:	7863      	ldrb	r3, [r4, #1]
 800ce5a:	9200      	str	r2, [sp, #0]
 800ce5c:	eb0b 010a 	add.w	r1, fp, sl
 800ce60:	7822      	ldrb	r2, [r4, #0]
 800ce62:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800ce64:	f001 f8b2 	bl	800dfcc <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 800ce68:	f10a 0a01 	add.w	sl, sl, #1
 800ce6c:	e00a      	b.n	800ce84 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xae>
 800ce6e:	eba4 0309 	sub.w	r3, r4, r9
 800ce72:	4598      	cmp	r8, r3
 800ce74:	d9d5      	bls.n	800ce22 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x4c>
 800ce76:	f04f 0a00 	mov.w	sl, #0
 800ce7a:	69b3      	ldr	r3, [r6, #24]
 800ce7c:	f894 f000 	pld	[r4]
 800ce80:	fb03 fb05 	mul.w	fp, r3, r5
 800ce84:	69b3      	ldr	r3, [r6, #24]
 800ce86:	459a      	cmp	sl, r3
 800ce88:	d3e5      	bcc.n	800ce56 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x80>
 800ce8a:	3501      	adds	r5, #1
 800ce8c:	3403      	adds	r4, #3
 800ce8e:	e7c6      	b.n	800ce1e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x48>
 800ce90:	f04f 0a00 	mov.w	sl, #0
 800ce94:	69b3      	ldr	r3, [r6, #24]
 800ce96:	f894 f000 	pld	[r4]
 800ce9a:	fb03 fb05 	mul.w	fp, r3, r5
 800ce9e:	69b3      	ldr	r3, [r6, #24]
 800cea0:	459a      	cmp	sl, r3
 800cea2:	d308      	bcc.n	800ceb6 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xe0>
 800cea4:	3501      	adds	r5, #1
 800cea6:	3404      	adds	r4, #4
 800cea8:	42af      	cmp	r7, r5
 800ceaa:	d9ba      	bls.n	800ce22 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x4c>
 800ceac:	eba4 0309 	sub.w	r3, r4, r9
 800ceb0:	4598      	cmp	r8, r3
 800ceb2:	d8ed      	bhi.n	800ce90 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xba>
 800ceb4:	e7b5      	b.n	800ce22 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x4c>
 800ceb6:	78e2      	ldrb	r2, [r4, #3]
 800ceb8:	7863      	ldrb	r3, [r4, #1]
 800ceba:	9201      	str	r2, [sp, #4]
 800cebc:	78a2      	ldrb	r2, [r4, #2]
 800cebe:	eb0b 010a 	add.w	r1, fp, sl
 800cec2:	9200      	str	r2, [sp, #0]
 800cec4:	7822      	ldrb	r2, [r4, #0]
 800cec6:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800cec8:	f001 fd4c 	bl	800e964 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 800cecc:	f10a 0a01 	add.w	sl, sl, #1
 800ced0:	e7e5      	b.n	800ce9e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xc8>
 800ced2:	b005      	add	sp, #20
 800ced4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ced8 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>:
 800ced8:	22ff      	movs	r2, #255	; 0xff
 800ceda:	4b1d      	ldr	r3, [pc, #116]	; (800cf50 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x78>)
 800cedc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cede:	6003      	str	r3, [r0, #0]
 800cee0:	2300      	movs	r3, #0
 800cee2:	460d      	mov	r5, r1
 800cee4:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 800cee8:	2101      	movs	r1, #1
 800ceea:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 800ceee:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
 800cef2:	8483      	strh	r3, [r0, #36]	; 0x24
 800cef4:	6283      	str	r3, [r0, #40]	; 0x28
 800cef6:	63c3      	str	r3, [r0, #60]	; 0x3c
 800cef8:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 800cefc:	4b15      	ldr	r3, [pc, #84]	; (800cf54 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x7c>)
 800cefe:	85c1      	strh	r1, [r0, #46]	; 0x2e
 800cf00:	6018      	str	r0, [r3, #0]
 800cf02:	f100 031c 	add.w	r3, r0, #28
 800cf06:	8602      	strh	r2, [r0, #48]	; 0x30
 800cf08:	9301      	str	r3, [sp, #4]
 800cf0a:	f100 0314 	add.w	r3, r0, #20
 800cf0e:	4604      	mov	r4, r0
 800cf10:	f100 0220 	add.w	r2, r0, #32
 800cf14:	9300      	str	r3, [sp, #0]
 800cf16:	1d03      	adds	r3, r0, #4
 800cf18:	4628      	mov	r0, r5
 800cf1a:	f000 fbd5 	bl	800d6c8 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)>
 800cf1e:	201c      	movs	r0, #28
 800cf20:	f007 fb86 	bl	8014630 <operator new(unsigned int)>
 800cf24:	4606      	mov	r6, r0
 800cf26:	4629      	mov	r1, r5
 800cf28:	f001 fe50 	bl	800ebcc <WS28xx::WS28xx(PixelConfiguration&)>
 800cf2c:	4630      	mov	r0, r6
 800cf2e:	6366      	str	r6, [r4, #52]	; 0x34
 800cf30:	f001 fea8 	bl	800ec84 <WS28xx::Blackout()>
 800cf34:	69ab      	ldr	r3, [r5, #24]
 800cf36:	6a22      	ldr	r2, [r4, #32]
 800cf38:	61a3      	str	r3, [r4, #24]
 800cf3a:	8bab      	ldrh	r3, [r5, #28]
 800cf3c:	4628      	mov	r0, r5
 800cf3e:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800cf40:	6963      	ldr	r3, [r4, #20]
 800cf42:	4353      	muls	r3, r2
 800cf44:	8623      	strh	r3, [r4, #48]	; 0x30
 800cf46:	f000 fc15 	bl	800d774 <PixelDmxConfiguration::Dump()>
 800cf4a:	4620      	mov	r0, r4
 800cf4c:	b002      	add	sp, #8
 800cf4e:	bd70      	pop	{r4, r5, r6, pc}
 800cf50:	08016f08 	stmdaeq	r1, {r3, r8, r9, sl, fp, sp, lr}
 800cf54:	20001918 	andcs	r1, r0, r8, lsl r9

0800cf58 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 800cf58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf5a:	88c6      	ldrh	r6, [r0, #6]
 800cf5c:	8885      	ldrh	r5, [r0, #4]
 800cf5e:	42ae      	cmp	r6, r5
 800cf60:	d216      	bcs.n	800cf90 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 800cf62:	4604      	mov	r4, r0
 800cf64:	6800      	ldr	r0, [r0, #0]
 800cf66:	1bad      	subs	r5, r5, r6
 800cf68:	4430      	add	r0, r6
 800cf6a:	7a26      	ldrb	r6, [r4, #8]
 800cf6c:	b923      	cbnz	r3, 800cf78 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 800cf6e:	b926      	cbnz	r6, 800cf7a <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 800cf70:	9200      	str	r2, [sp, #0]
 800cf72:	460b      	mov	r3, r1
 800cf74:	4a09      	ldr	r2, [pc, #36]	; (800cf9c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 800cf76:	e003      	b.n	800cf80 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800cf78:	b166      	cbz	r6, 800cf94 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 800cf7a:	460b      	mov	r3, r1
 800cf7c:	9200      	str	r2, [sp, #0]
 800cf7e:	4a08      	ldr	r2, [pc, #32]	; (800cfa0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 800cf80:	4629      	mov	r1, r5
 800cf82:	f7fc fa2f 	bl	80093e4 <snprintf>
 800cf86:	4285      	cmp	r5, r0
 800cf88:	bfa2      	ittt	ge
 800cf8a:	88e3      	ldrhge	r3, [r4, #6]
 800cf8c:	181b      	addge	r3, r3, r0
 800cf8e:	80e3      	strhge	r3, [r4, #6]
 800cf90:	b002      	add	sp, #8
 800cf92:	bd70      	pop	{r4, r5, r6, pc}
 800cf94:	9200      	str	r2, [sp, #0]
 800cf96:	460b      	mov	r3, r1
 800cf98:	4a02      	ldr	r2, [pc, #8]	; (800cfa4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 800cf9a:	e7f1      	b.n	800cf80 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800cf9c:	08016c51 	stmdaeq	r1, {r0, r4, r6, sl, fp, sp, lr}
 800cfa0:	08016c48 	stmdaeq	r1, {r3, r6, sl, fp, sp, lr}
 800cfa4:	08016c52 	stmdaeq	r1, {r1, r4, r6, sl, fp, sp, lr}

0800cfa8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>:
 800cfa8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cfaa:	88c6      	ldrh	r6, [r0, #6]
 800cfac:	8885      	ldrh	r5, [r0, #4]
 800cfae:	42ae      	cmp	r6, r5
 800cfb0:	d216      	bcs.n	800cfe0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x38>
 800cfb2:	4604      	mov	r4, r0
 800cfb4:	6800      	ldr	r0, [r0, #0]
 800cfb6:	1bad      	subs	r5, r5, r6
 800cfb8:	4430      	add	r0, r6
 800cfba:	7a26      	ldrb	r6, [r4, #8]
 800cfbc:	b923      	cbnz	r3, 800cfc8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x20>
 800cfbe:	b926      	cbnz	r6, 800cfca <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x22>
 800cfc0:	9200      	str	r2, [sp, #0]
 800cfc2:	460b      	mov	r3, r1
 800cfc4:	4a09      	ldr	r2, [pc, #36]	; (800cfec <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x44>)
 800cfc6:	e003      	b.n	800cfd0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800cfc8:	b166      	cbz	r6, 800cfe4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x3c>
 800cfca:	460b      	mov	r3, r1
 800cfcc:	9200      	str	r2, [sp, #0]
 800cfce:	4a08      	ldr	r2, [pc, #32]	; (800cff0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x48>)
 800cfd0:	4629      	mov	r1, r5
 800cfd2:	f7fc fa07 	bl	80093e4 <snprintf>
 800cfd6:	4285      	cmp	r5, r0
 800cfd8:	bfa2      	ittt	ge
 800cfda:	88e3      	ldrhge	r3, [r4, #6]
 800cfdc:	181b      	addge	r3, r3, r0
 800cfde:	80e3      	strhge	r3, [r4, #6]
 800cfe0:	b002      	add	sp, #8
 800cfe2:	bd70      	pop	{r4, r5, r6, pc}
 800cfe4:	9200      	str	r2, [sp, #0]
 800cfe6:	460b      	mov	r3, r1
 800cfe8:	4a02      	ldr	r2, [pc, #8]	; (800cff4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x4c>)
 800cfea:	e7f1      	b.n	800cfd0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800cfec:	08016c51 	stmdaeq	r1, {r0, r4, r6, sl, fp, sp, lr}
 800cff0:	08016c48 	stmdaeq	r1, {r3, r6, sl, fp, sp, lr}
 800cff4:	08016c52 	stmdaeq	r1, {r1, r4, r6, sl, fp, sp, lr}

0800cff8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800cff8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cffa:	88c6      	ldrh	r6, [r0, #6]
 800cffc:	8885      	ldrh	r5, [r0, #4]
 800cffe:	42ae      	cmp	r6, r5
 800d000:	d216      	bcs.n	800d030 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800d002:	4604      	mov	r4, r0
 800d004:	6800      	ldr	r0, [r0, #0]
 800d006:	1bad      	subs	r5, r5, r6
 800d008:	4430      	add	r0, r6
 800d00a:	7a26      	ldrb	r6, [r4, #8]
 800d00c:	b923      	cbnz	r3, 800d018 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800d00e:	b926      	cbnz	r6, 800d01a <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800d010:	9200      	str	r2, [sp, #0]
 800d012:	460b      	mov	r3, r1
 800d014:	4a09      	ldr	r2, [pc, #36]	; (800d03c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800d016:	e003      	b.n	800d020 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800d018:	b166      	cbz	r6, 800d034 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800d01a:	460b      	mov	r3, r1
 800d01c:	9200      	str	r2, [sp, #0]
 800d01e:	4a08      	ldr	r2, [pc, #32]	; (800d040 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800d020:	4629      	mov	r1, r5
 800d022:	f7fc f9df 	bl	80093e4 <snprintf>
 800d026:	4285      	cmp	r5, r0
 800d028:	bfa2      	ittt	ge
 800d02a:	88e3      	ldrhge	r3, [r4, #6]
 800d02c:	181b      	addge	r3, r3, r0
 800d02e:	80e3      	strhge	r3, [r4, #6]
 800d030:	b002      	add	sp, #8
 800d032:	bd70      	pop	{r4, r5, r6, pc}
 800d034:	9200      	str	r2, [sp, #0]
 800d036:	460b      	mov	r3, r1
 800d038:	4a02      	ldr	r2, [pc, #8]	; (800d044 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800d03a:	e7f1      	b.n	800d020 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800d03c:	08016c64 	stmdaeq	r1, {r2, r5, r6, sl, fp, sp, lr}
 800d040:	08016c59 	stmdaeq	r1, {r0, r3, r4, r6, sl, fp, sp, lr}
 800d044:	08016c65 	stmdaeq	r1, {r0, r2, r5, r6, sl, fp, sp, lr}

0800d048 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>:
 800d048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d04c:	4699      	mov	r9, r3
 800d04e:	8885      	ldrh	r5, [r0, #4]
 800d050:	88c3      	ldrh	r3, [r0, #6]
 800d052:	4604      	mov	r4, r0
 800d054:	42ab      	cmp	r3, r5
 800d056:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800d05a:	d227      	bcs.n	800d0ac <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x64>
 800d05c:	6826      	ldr	r6, [r4, #0]
 800d05e:	4610      	mov	r0, r2
 800d060:	460f      	mov	r7, r1
 800d062:	f894 a008 	ldrb.w	sl, [r4, #8]
 800d066:	441e      	add	r6, r3
 800d068:	1aed      	subs	r5, r5, r3
 800d06a:	f7fb f8b3 	bl	80081d4 <__aeabi_f2d>
 800d06e:	f1b9 0f00 	cmp.w	r9, #0
 800d072:	d109      	bne.n	800d088 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x40>
 800d074:	f1ba 0f00 	cmp.w	sl, #0
 800d078:	d109      	bne.n	800d08e <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x46>
 800d07a:	463b      	mov	r3, r7
 800d07c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d080:	4a0f      	ldr	r2, [pc, #60]	; (800d0c0 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x78>)
 800d082:	f8cd 8000 	str.w	r8, [sp]
 800d086:	e008      	b.n	800d09a <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x52>
 800d088:	f1ba 0f00 	cmp.w	sl, #0
 800d08c:	d011      	beq.n	800d0b2 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x6a>
 800d08e:	463b      	mov	r3, r7
 800d090:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d094:	4a0b      	ldr	r2, [pc, #44]	; (800d0c4 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x7c>)
 800d096:	f8cd 8000 	str.w	r8, [sp]
 800d09a:	4629      	mov	r1, r5
 800d09c:	4630      	mov	r0, r6
 800d09e:	f7fc f9a1 	bl	80093e4 <snprintf>
 800d0a2:	4285      	cmp	r5, r0
 800d0a4:	bfa2      	ittt	ge
 800d0a6:	88e3      	ldrhge	r3, [r4, #6]
 800d0a8:	181b      	addge	r3, r3, r0
 800d0aa:	80e3      	strhge	r3, [r4, #6]
 800d0ac:	b004      	add	sp, #16
 800d0ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0b2:	463b      	mov	r3, r7
 800d0b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0b8:	4a03      	ldr	r2, [pc, #12]	; (800d0c8 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x80>)
 800d0ba:	f8cd 8000 	str.w	r8, [sp]
 800d0be:	e7ec      	b.n	800d09a <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x52>
 800d0c0:	08016f3f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r8, r9, sl, fp, sp, lr}
 800d0c4:	08016f34 	stmdaeq	r1, {r2, r4, r5, r8, r9, sl, fp, sp, lr}
 800d0c8:	08016f40 	stmdaeq	r1, {r6, r8, r9, sl, fp, sp, lr}

0800d0cc <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>:
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	4a18      	ldr	r2, [pc, #96]	; (800d130 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x64>)
 800d0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0d2:	e9c0 3201 	strd	r3, r2, [r0, #4]
 800d0d6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d0da:	81c2      	strh	r2, [r0, #14]
 800d0dc:	223d      	movs	r2, #61	; 0x3d
 800d0de:	8202      	strh	r2, [r0, #16]
 800d0e0:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d0e4:	2501      	movs	r5, #1
 800d0e6:	8242      	strh	r2, [r0, #18]
 800d0e8:	2206      	movs	r2, #6
 800d0ea:	f647 76f0 	movw	r6, #32752	; 0x7ff0
 800d0ee:	6001      	str	r1, [r0, #0]
 800d0f0:	7303      	strb	r3, [r0, #12]
 800d0f2:	7545      	strb	r5, [r0, #21]
 800d0f4:	7583      	strb	r3, [r0, #22]
 800d0f6:	75c2      	strb	r2, [r0, #23]
 800d0f8:	8303      	strh	r3, [r0, #24]
 800d0fa:	f100 041a 	add.w	r4, r0, #26
 800d0fe:	f824 5b02 	strh.w	r5, [r4], #2
 800d102:	b16b      	cbz	r3, 800d120 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x54>
 800d104:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 800d108:	1d11      	adds	r1, r2, #4
 800d10a:	3207      	adds	r2, #7
 800d10c:	b289      	uxth	r1, r1
 800d10e:	b292      	uxth	r2, r2
 800d110:	ea81 0702 	eor.w	r7, r1, r2
 800d114:	423e      	tst	r6, r7
 800d116:	bf18      	it	ne
 800d118:	ea02 0106 	andne.w	r1, r2, r6
 800d11c:	f824 1c02 	strh.w	r1, [r4, #-2]
 800d120:	3301      	adds	r3, #1
 800d122:	2b08      	cmp	r3, #8
 800d124:	d1eb      	bne.n	800d0fe <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x32>
 800d126:	2300      	movs	r3, #0
 800d128:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
 800d12c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d12e:	bf00      	nop
 800d130:	0100aa03 	tsteq	r0, r3, lsl #20

0800d134 <WS28xxDmxParams::Load()>:
 800d134:	b508      	push	{r3, lr}
 800d136:	2300      	movs	r3, #0
 800d138:	4601      	mov	r1, r0
 800d13a:	6043      	str	r3, [r0, #4]
 800d13c:	6800      	ldr	r0, [r0, #0]
 800d13e:	b120      	cbz	r0, 800d14a <WS28xxDmxParams::Load()+0x16>
 800d140:	6803      	ldr	r3, [r0, #0]
 800d142:	3104      	adds	r1, #4
 800d144:	68db      	ldr	r3, [r3, #12]
 800d146:	4798      	blx	r3
 800d148:	2001      	movs	r0, #1
 800d14a:	bd08      	pop	{r3, pc}

0800d14c <WS28xxDmxParams::Load(char const*, unsigned int)>:
 800d14c:	6803      	ldr	r3, [r0, #0]
 800d14e:	b1d3      	cbz	r3, 800d186 <WS28xxDmxParams::Load(char const*, unsigned int)+0x3a>
 800d150:	2300      	movs	r3, #0
 800d152:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d154:	460d      	mov	r5, r1
 800d156:	4616      	mov	r6, r2
 800d158:	4604      	mov	r4, r0
 800d15a:	6043      	str	r3, [r0, #4]
 800d15c:	4602      	mov	r2, r0
 800d15e:	490a      	ldr	r1, [pc, #40]	; (800d188 <WS28xxDmxParams::Load(char const*, unsigned int)+0x3c>)
 800d160:	4668      	mov	r0, sp
 800d162:	f006 fc89 	bl	8013a78 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800d166:	4632      	mov	r2, r6
 800d168:	4629      	mov	r1, r5
 800d16a:	4668      	mov	r0, sp
 800d16c:	f006 fc88 	bl	8013a80 <ReadConfigFile::Read(char const*, unsigned int)>
 800d170:	4621      	mov	r1, r4
 800d172:	f851 0b04 	ldr.w	r0, [r1], #4
 800d176:	6803      	ldr	r3, [r0, #0]
 800d178:	689b      	ldr	r3, [r3, #8]
 800d17a:	4798      	blx	r3
 800d17c:	4668      	mov	r0, sp
 800d17e:	f006 fc7e 	bl	8013a7e <ReadConfigFile::~ReadConfigFile()>
 800d182:	b002      	add	sp, #8
 800d184:	bd70      	pop	{r4, r5, r6, pc}
 800d186:	4770      	bx	lr
 800d188:	0800d3c9 	stmdaeq	r0, {r0, r3, r6, r7, r8, r9, ip, lr, pc}

0800d18c <WS28xxDmxParams::callbackFunction(char const*)>:
 800d18c:	b530      	push	{r4, r5, lr}
 800d18e:	2308      	movs	r3, #8
 800d190:	460d      	mov	r5, r1
 800d192:	b089      	sub	sp, #36	; 0x24
 800d194:	4604      	mov	r4, r0
 800d196:	9302      	str	r3, [sp, #8]
 800d198:	4628      	mov	r0, r5
 800d19a:	497f      	ldr	r1, [pc, #508]	; (800d398 <WS28xxDmxParams::callbackFunction(char const*)+0x20c>)
 800d19c:	446b      	add	r3, sp
 800d19e:	aa04      	add	r2, sp, #16
 800d1a0:	f006 fca2 	bl	8013ae8 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800d1a4:	b9a0      	cbnz	r0, 800d1d0 <WS28xxDmxParams::callbackFunction(char const*)+0x44>
 800d1a6:	9b02      	ldr	r3, [sp, #8]
 800d1a8:	3320      	adds	r3, #32
 800d1aa:	446b      	add	r3, sp
 800d1ac:	f803 0c10 	strb.w	r0, [r3, #-16]
 800d1b0:	a804      	add	r0, sp, #16
 800d1b2:	f000 fdf7 	bl	800dda4 <PixelType::GetType(char const*)>
 800d1b6:	280e      	cmp	r0, #14
 800d1b8:	bf08      	it	eq
 800d1ba:	2203      	moveq	r2, #3
 800d1bc:	6863      	ldr	r3, [r4, #4]
 800d1be:	bf19      	ittee	ne
 800d1c0:	7220      	strbne	r0, [r4, #8]
 800d1c2:	f043 0301 	orrne.w	r3, r3, #1
 800d1c6:	7222      	strbeq	r2, [r4, #8]
 800d1c8:	f023 0301 	biceq.w	r3, r3, #1
 800d1cc:	6063      	str	r3, [r4, #4]
 800d1ce:	e033      	b.n	800d238 <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800d1d0:	4628      	mov	r0, r5
 800d1d2:	4972      	ldr	r1, [pc, #456]	; (800d39c <WS28xxDmxParams::callbackFunction(char const*)+0x210>)
 800d1d4:	f10d 0202 	add.w	r2, sp, #2
 800d1d8:	f006 fd6d 	bl	8013cb6 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800d1dc:	b990      	cbnz	r0, 800d204 <WS28xxDmxParams::callbackFunction(char const*)+0x78>
 800d1de:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d1e2:	6863      	ldr	r3, [r4, #4]
 800d1e4:	1e51      	subs	r1, r2, #1
 800d1e6:	f5b1 7f2a 	cmp.w	r1, #680	; 0x2a8
 800d1ea:	bf2d      	iteet	cs
 800d1ec:	f06f 0255 	mvncs.w	r2, #85	; 0x55
 800d1f0:	f8a4 2009 	strhcc.w	r2, [r4, #9]
 800d1f4:	f043 0302 	orrcc.w	r3, r3, #2
 800d1f8:	7262      	strbcs	r2, [r4, #9]
 800d1fa:	bf24      	itt	cs
 800d1fc:	72a0      	strbcs	r0, [r4, #10]
 800d1fe:	f023 0302 	biccs.w	r3, r3, #2
 800d202:	e7e3      	b.n	800d1cc <WS28xxDmxParams::callbackFunction(char const*)+0x40>
 800d204:	2303      	movs	r3, #3
 800d206:	4628      	mov	r0, r5
 800d208:	9302      	str	r3, [sp, #8]
 800d20a:	4965      	ldr	r1, [pc, #404]	; (800d3a0 <WS28xxDmxParams::callbackFunction(char const*)+0x214>)
 800d20c:	ab02      	add	r3, sp, #8
 800d20e:	aa04      	add	r2, sp, #16
 800d210:	f006 fc6a 	bl	8013ae8 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800d214:	b990      	cbnz	r0, 800d23c <WS28xxDmxParams::callbackFunction(char const*)+0xb0>
 800d216:	9b02      	ldr	r3, [sp, #8]
 800d218:	3320      	adds	r3, #32
 800d21a:	446b      	add	r3, sp
 800d21c:	f803 0c10 	strb.w	r0, [r3, #-16]
 800d220:	a804      	add	r0, sp, #16
 800d222:	f000 fde3 	bl	800ddec <PixelType::GetMap(char const*)>
 800d226:	6863      	ldr	r3, [r4, #4]
 800d228:	2806      	cmp	r0, #6
 800d22a:	bf14      	ite	ne
 800d22c:	f443 7300 	orrne.w	r3, r3, #512	; 0x200
 800d230:	f423 7300 	biceq.w	r3, r3, #512	; 0x200
 800d234:	6063      	str	r3, [r4, #4]
 800d236:	75e0      	strb	r0, [r4, #23]
 800d238:	b009      	add	sp, #36	; 0x24
 800d23a:	bd30      	pop	{r4, r5, pc}
 800d23c:	4628      	mov	r0, r5
 800d23e:	4959      	ldr	r1, [pc, #356]	; (800d3a4 <WS28xxDmxParams::callbackFunction(char const*)+0x218>)
 800d240:	aa01      	add	r2, sp, #4
 800d242:	f006 fc6a 	bl	8013b1a <Sscan::Float(char const*, char const*, float&)>
 800d246:	b960      	cbnz	r0, 800d262 <WS28xxDmxParams::callbackFunction(char const*)+0xd6>
 800d248:	9801      	ldr	r0, [sp, #4]
 800d24a:	f000 fe31 	bl	800deb0 <PixelType::ConvertTxH(float)>
 800d24e:	6863      	ldr	r3, [r4, #4]
 800d250:	b120      	cbz	r0, 800d25c <WS28xxDmxParams::callbackFunction(char const*)+0xd0>
 800d252:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d256:	6063      	str	r3, [r4, #4]
 800d258:	7620      	strb	r0, [r4, #24]
 800d25a:	e7ed      	b.n	800d238 <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800d25c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d260:	e7f9      	b.n	800d256 <WS28xxDmxParams::callbackFunction(char const*)+0xca>
 800d262:	4628      	mov	r0, r5
 800d264:	4950      	ldr	r1, [pc, #320]	; (800d3a8 <WS28xxDmxParams::callbackFunction(char const*)+0x21c>)
 800d266:	aa01      	add	r2, sp, #4
 800d268:	f006 fc57 	bl	8013b1a <Sscan::Float(char const*, char const*, float&)>
 800d26c:	b960      	cbnz	r0, 800d288 <WS28xxDmxParams::callbackFunction(char const*)+0xfc>
 800d26e:	9801      	ldr	r0, [sp, #4]
 800d270:	f000 fe1e 	bl	800deb0 <PixelType::ConvertTxH(float)>
 800d274:	6863      	ldr	r3, [r4, #4]
 800d276:	b120      	cbz	r0, 800d282 <WS28xxDmxParams::callbackFunction(char const*)+0xf6>
 800d278:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d27c:	6063      	str	r3, [r4, #4]
 800d27e:	7660      	strb	r0, [r4, #25]
 800d280:	e7da      	b.n	800d238 <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800d282:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d286:	e7f9      	b.n	800d27c <WS28xxDmxParams::callbackFunction(char const*)+0xf0>
 800d288:	4628      	mov	r0, r5
 800d28a:	4948      	ldr	r1, [pc, #288]	; (800d3ac <WS28xxDmxParams::callbackFunction(char const*)+0x220>)
 800d28c:	f10d 0202 	add.w	r2, sp, #2
 800d290:	f006 fd11 	bl	8013cb6 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800d294:	b998      	cbnz	r0, 800d2be <WS28xxDmxParams::callbackFunction(char const*)+0x132>
 800d296:	f240 25a6 	movw	r5, #678	; 0x2a6
 800d29a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800d29e:	6863      	ldr	r3, [r4, #4]
 800d2a0:	1e8a      	subs	r2, r1, #2
 800d2a2:	b292      	uxth	r2, r2
 800d2a4:	42aa      	cmp	r2, r5
 800d2a6:	bf81      	itttt	hi
 800d2a8:	2201      	movhi	r2, #1
 800d2aa:	75a0      	strbhi	r0, [r4, #22]
 800d2ac:	7562      	strbhi	r2, [r4, #21]
 800d2ae:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 800d2b2:	bf9c      	itt	ls
 800d2b4:	f8a4 1015 	strhls.w	r1, [r4, #21]
 800d2b8:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 800d2bc:	e786      	b.n	800d1cc <WS28xxDmxParams::callbackFunction(char const*)+0x40>
 800d2be:	4628      	mov	r0, r5
 800d2c0:	493b      	ldr	r1, [pc, #236]	; (800d3b0 <WS28xxDmxParams::callbackFunction(char const*)+0x224>)
 800d2c2:	aa03      	add	r2, sp, #12
 800d2c4:	f006 fd15 	bl	8013cf2 <Sscan::Uint32(char const*, char const*, unsigned int&)>
 800d2c8:	b960      	cbnz	r0, 800d2e4 <WS28xxDmxParams::callbackFunction(char const*)+0x158>
 800d2ca:	9a03      	ldr	r2, [sp, #12]
 800d2cc:	4939      	ldr	r1, [pc, #228]	; (800d3b4 <WS28xxDmxParams::callbackFunction(char const*)+0x228>)
 800d2ce:	6863      	ldr	r3, [r4, #4]
 800d2d0:	428a      	cmp	r2, r1
 800d2d2:	bf14      	ite	ne
 800d2d4:	f043 0310 	orrne.w	r3, r3, #16
 800d2d8:	f023 0310 	biceq.w	r3, r3, #16
 800d2dc:	6063      	str	r3, [r4, #4]
 800d2de:	f8c4 200e 	str.w	r2, [r4, #14]
 800d2e2:	e7a9      	b.n	800d238 <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800d2e4:	4628      	mov	r0, r5
 800d2e6:	4934      	ldr	r1, [pc, #208]	; (800d3b8 <WS28xxDmxParams::callbackFunction(char const*)+0x22c>)
 800d2e8:	f10d 0201 	add.w	r2, sp, #1
 800d2ec:	f006 fd2a 	bl	8013d44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d2f0:	b988      	cbnz	r0, 800d316 <WS28xxDmxParams::callbackFunction(char const*)+0x18a>
 800d2f2:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800d2f6:	6863      	ldr	r3, [r4, #4]
 800d2f8:	1e4a      	subs	r2, r1, #1
 800d2fa:	b2d2      	uxtb	r2, r2
 800d2fc:	2afd      	cmp	r2, #253	; 0xfd
 800d2fe:	bf83      	ittte	hi
 800d300:	f023 0320 	bichi.w	r3, r3, #32
 800d304:	6063      	strhi	r3, [r4, #4]
 800d306:	23ff      	movhi	r3, #255	; 0xff
 800d308:	f043 0320 	orrls.w	r3, r3, #32
 800d30c:	bf9a      	itte	ls
 800d30e:	6063      	strls	r3, [r4, #4]
 800d310:	74a1      	strbls	r1, [r4, #18]
 800d312:	74a3      	strbhi	r3, [r4, #18]
 800d314:	e790      	b.n	800d238 <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800d316:	4628      	mov	r0, r5
 800d318:	4928      	ldr	r1, [pc, #160]	; (800d3bc <WS28xxDmxParams::callbackFunction(char const*)+0x230>)
 800d31a:	f10d 0202 	add.w	r2, sp, #2
 800d31e:	f006 fcca 	bl	8013cb6 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800d322:	b990      	cbnz	r0, 800d34a <WS28xxDmxParams::callbackFunction(char const*)+0x1be>
 800d324:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d328:	6863      	ldr	r3, [r4, #4]
 800d32a:	1e91      	subs	r1, r2, #2
 800d32c:	f5b1 7fff 	cmp.w	r1, #510	; 0x1fe
 800d330:	bf83      	ittte	hi
 800d332:	2201      	movhi	r2, #1
 800d334:	72e2      	strbhi	r2, [r4, #11]
 800d336:	2200      	movhi	r2, #0
 800d338:	f8a4 200b 	strhls.w	r2, [r4, #11]
 800d33c:	bf92      	itee	ls
 800d33e:	f043 0304 	orrls.w	r3, r3, #4
 800d342:	7322      	strbhi	r2, [r4, #12]
 800d344:	f023 0304 	bichi.w	r3, r3, #4
 800d348:	e740      	b.n	800d1cc <WS28xxDmxParams::callbackFunction(char const*)+0x40>
 800d34a:	4628      	mov	r0, r5
 800d34c:	491c      	ldr	r1, [pc, #112]	; (800d3c0 <WS28xxDmxParams::callbackFunction(char const*)+0x234>)
 800d34e:	f10d 0202 	add.w	r2, sp, #2
 800d352:	f006 fcb0 	bl	8013cb6 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800d356:	b930      	cbnz	r0, 800d366 <WS28xxDmxParams::callbackFunction(char const*)+0x1da>
 800d358:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800d35c:	8363      	strh	r3, [r4, #26]
 800d35e:	6863      	ldr	r3, [r4, #4]
 800d360:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d364:	6063      	str	r3, [r4, #4]
 800d366:	4628      	mov	r0, r5
 800d368:	4916      	ldr	r1, [pc, #88]	; (800d3c4 <WS28xxDmxParams::callbackFunction(char const*)+0x238>)
 800d36a:	f10d 0201 	add.w	r2, sp, #1
 800d36e:	f006 fce9 	bl	8013d44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d372:	2800      	cmp	r0, #0
 800d374:	f47f af60 	bne.w	800d238 <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800d378:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d37c:	6863      	ldr	r3, [r4, #4]
 800d37e:	1e51      	subs	r1, r2, #1
 800d380:	2904      	cmp	r1, #4
 800d382:	bf99      	ittee	ls
 800d384:	f884 202a 	strbls.w	r2, [r4, #42]	; 0x2a
 800d388:	f443 1380 	orrls.w	r3, r3, #1048576	; 0x100000
 800d38c:	f884 002a 	strbhi.w	r0, [r4, #42]	; 0x2a
 800d390:	f423 1380 	bichi.w	r3, r3, #1048576	; 0x100000
 800d394:	e71a      	b.n	800d1cc <WS28xxDmxParams::callbackFunction(char const*)+0x40>
 800d396:	bf00      	nop
 800d398:	08018788 	stmdaeq	r1, {r3, r7, r8, r9, sl, pc}
 800d39c:	08018791 	stmdaeq	r1, {r0, r4, r7, r8, r9, sl, pc}
 800d3a0:	08018778 	stmdaeq	r1, {r3, r4, r5, r6, r8, r9, sl, pc}
 800d3a4:	0801879b 	stmdaeq	r1, {r0, r1, r3, r4, r7, r8, r9, sl, pc}
 800d3a8:	080187a3 	stmdaeq	r1, {r0, r1, r5, r7, r8, r9, sl, pc}
 800d3ac:	08018756 	stmdaeq	r1, {r1, r2, r4, r6, r8, r9, sl, pc}
 800d3b0:	08018747 	stmdaeq	r1, {r0, r1, r2, r6, r8, r9, sl, pc}
 800d3b4:	003d0900 	eorseq	r0, sp, r0, lsl #18
 800d3b8:	08018766 	stmdaeq	r1, {r1, r2, r5, r6, r8, r9, sl, pc}
 800d3bc:	0801892b 	stmdaeq	r1, {r0, r1, r3, r5, r8, fp, pc}
 800d3c0:	08018853 	stmdaeq	r1, {r0, r1, r4, r6, fp, pc}
 800d3c4:	08018806 	stmdaeq	r1, {r1, r2, fp, pc}

0800d3c8 <WS28xxDmxParams::staticCallbackFunction(void*, char const*)>:
 800d3c8:	f7ff bee0 	b.w	800d18c <WS28xxDmxParams::callbackFunction(char const*)>

0800d3cc <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)>:
 800d3cc:	b570      	push	{r4, r5, r6, lr}
 800d3ce:	4604      	mov	r4, r0
 800d3d0:	4615      	mov	r5, r2
 800d3d2:	461e      	mov	r6, r3
 800d3d4:	b086      	sub	sp, #24
 800d3d6:	3004      	adds	r0, #4
 800d3d8:	2900      	cmp	r1, #0
 800d3da:	f000 808f 	beq.w	800d4fc <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x130>
 800d3de:	2227      	movs	r2, #39	; 0x27
 800d3e0:	f007 f9e5 	bl	80147ae <memmove>
 800d3e4:	4633      	mov	r3, r6
 800d3e6:	462a      	mov	r2, r5
 800d3e8:	4975      	ldr	r1, [pc, #468]	; (800d5c0 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1f4>)
 800d3ea:	a803      	add	r0, sp, #12
 800d3ec:	f006 fa74 	bl	80138d8 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800d3f0:	7a20      	ldrb	r0, [r4, #8]
 800d3f2:	f000 fccb 	bl	800dd8c <PixelType::GetType(pixel::Type)>
 800d3f6:	6863      	ldr	r3, [r4, #4]
 800d3f8:	4602      	mov	r2, r0
 800d3fa:	4972      	ldr	r1, [pc, #456]	; (800d5c4 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1f8>)
 800d3fc:	f003 0301 	and.w	r3, r3, #1
 800d400:	a803      	add	r0, sp, #12
 800d402:	f7ff fdf9 	bl	800cff8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800d406:	6863      	ldr	r3, [r4, #4]
 800d408:	f8b4 2009 	ldrh.w	r2, [r4, #9]
 800d40c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d410:	496d      	ldr	r1, [pc, #436]	; (800d5c8 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1fc>)
 800d412:	a803      	add	r0, sp, #12
 800d414:	f7ff fdc8 	bl	800cfa8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800d418:	496c      	ldr	r1, [pc, #432]	; (800d5cc <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x200>)
 800d41a:	a803      	add	r0, sp, #12
 800d41c:	f006 fae2 	bl	80139e4 <PropertiesBuilder::AddComment(char const*)>
 800d420:	6863      	ldr	r3, [r4, #4]
 800d422:	059e      	lsls	r6, r3, #22
 800d424:	d403      	bmi.n	800d42e <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x62>
 800d426:	7a20      	ldrb	r0, [r4, #8]
 800d428:	f000 f9a6 	bl	800d778 <PixelConfiguration::GetRgbMapping(pixel::Type)>
 800d42c:	75e0      	strb	r0, [r4, #23]
 800d42e:	7de0      	ldrb	r0, [r4, #23]
 800d430:	f000 fd04 	bl	800de3c <PixelType::GetMap(pixel::Map)>
 800d434:	6863      	ldr	r3, [r4, #4]
 800d436:	4602      	mov	r2, r0
 800d438:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800d43c:	4964      	ldr	r1, [pc, #400]	; (800d5d0 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x204>)
 800d43e:	a803      	add	r0, sp, #12
 800d440:	f7ff fdda 	bl	800cff8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800d444:	6863      	ldr	r3, [r4, #4]
 800d446:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d44a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d44e:	d011      	beq.n	800d474 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0xa8>
 800d450:	f10d 020b 	add.w	r2, sp, #11
 800d454:	7a20      	ldrb	r0, [r4, #8]
 800d456:	f10d 010a 	add.w	r1, sp, #10
 800d45a:	f000 f997 	bl	800d78c <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 800d45e:	6863      	ldr	r3, [r4, #4]
 800d460:	055d      	lsls	r5, r3, #21
 800d462:	bf5c      	itt	pl
 800d464:	f89d 200a 	ldrbpl.w	r2, [sp, #10]
 800d468:	7622      	strbpl	r2, [r4, #24]
 800d46a:	0518      	lsls	r0, r3, #20
 800d46c:	bf5c      	itt	pl
 800d46e:	f89d 300b 	ldrbpl.w	r3, [sp, #11]
 800d472:	7663      	strbpl	r3, [r4, #25]
 800d474:	4957      	ldr	r1, [pc, #348]	; (800d5d4 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x208>)
 800d476:	a803      	add	r0, sp, #12
 800d478:	f006 fab4 	bl	80139e4 <PropertiesBuilder::AddComment(char const*)>
 800d47c:	7e20      	ldrb	r0, [r4, #24]
 800d47e:	f000 fce9 	bl	800de54 <PixelType::ConvertTxH(unsigned char)>
 800d482:	2502      	movs	r5, #2
 800d484:	6863      	ldr	r3, [r4, #4]
 800d486:	4602      	mov	r2, r0
 800d488:	4953      	ldr	r1, [pc, #332]	; (800d5d8 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x20c>)
 800d48a:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800d48e:	9500      	str	r5, [sp, #0]
 800d490:	a803      	add	r0, sp, #12
 800d492:	f7ff fdd9 	bl	800d048 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 800d496:	7e60      	ldrb	r0, [r4, #25]
 800d498:	f000 fcdc 	bl	800de54 <PixelType::ConvertTxH(unsigned char)>
 800d49c:	6863      	ldr	r3, [r4, #4]
 800d49e:	4602      	mov	r2, r0
 800d4a0:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 800d4a4:	494d      	ldr	r1, [pc, #308]	; (800d5dc <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x210>)
 800d4a6:	9500      	str	r5, [sp, #0]
 800d4a8:	a803      	add	r0, sp, #12
 800d4aa:	f7ff fdcd 	bl	800d048 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 800d4ae:	494c      	ldr	r1, [pc, #304]	; (800d5e0 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x214>)
 800d4b0:	a803      	add	r0, sp, #12
 800d4b2:	f006 fa97 	bl	80139e4 <PropertiesBuilder::AddComment(char const*)>
 800d4b6:	6863      	ldr	r3, [r4, #4]
 800d4b8:	f8b4 2015 	ldrh.w	r2, [r4, #21]
 800d4bc:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800d4c0:	4948      	ldr	r1, [pc, #288]	; (800d5e4 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x218>)
 800d4c2:	a803      	add	r0, sp, #12
 800d4c4:	f7ff fd70 	bl	800cfa8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800d4c8:	4947      	ldr	r1, [pc, #284]	; (800d5e8 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x21c>)
 800d4ca:	a803      	add	r0, sp, #12
 800d4cc:	f006 fa8a 	bl	80139e4 <PropertiesBuilder::AddComment(char const*)>
 800d4d0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800d4d4:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800d4d8:	f8d4 300e 	ldr.w	r3, [r4, #14]
 800d4dc:	42aa      	cmp	r2, r5
 800d4de:	6861      	ldr	r1, [r4, #4]
 800d4e0:	d222      	bcs.n	800d528 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x15c>
 800d4e2:	9803      	ldr	r0, [sp, #12]
 800d4e4:	06c9      	lsls	r1, r1, #27
 800d4e6:	4410      	add	r0, r2
 800d4e8:	eba5 0502 	sub.w	r5, r5, r2
 800d4ec:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800d4f0:	d40b      	bmi.n	800d50a <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x13e>
 800d4f2:	b962      	cbnz	r2, 800d50e <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x142>
 800d4f4:	9300      	str	r3, [sp, #0]
 800d4f6:	4a3d      	ldr	r2, [pc, #244]	; (800d5ec <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x220>)
 800d4f8:	4b3d      	ldr	r3, [pc, #244]	; (800d5f0 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x224>)
 800d4fa:	e00b      	b.n	800d514 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x148>
 800d4fc:	6823      	ldr	r3, [r4, #0]
 800d4fe:	4601      	mov	r1, r0
 800d500:	681a      	ldr	r2, [r3, #0]
 800d502:	4618      	mov	r0, r3
 800d504:	68d2      	ldr	r2, [r2, #12]
 800d506:	4790      	blx	r2
 800d508:	e76c      	b.n	800d3e4 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x18>
 800d50a:	2a00      	cmp	r2, #0
 800d50c:	d053      	beq.n	800d5b6 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1ea>
 800d50e:	9300      	str	r3, [sp, #0]
 800d510:	4a38      	ldr	r2, [pc, #224]	; (800d5f4 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x228>)
 800d512:	4b37      	ldr	r3, [pc, #220]	; (800d5f0 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x224>)
 800d514:	4629      	mov	r1, r5
 800d516:	f7fb ff65 	bl	80093e4 <snprintf>
 800d51a:	4285      	cmp	r5, r0
 800d51c:	bfa2      	ittt	ge
 800d51e:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800d522:	18c0      	addge	r0, r0, r3
 800d524:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800d528:	4933      	ldr	r1, [pc, #204]	; (800d5f8 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x22c>)
 800d52a:	a803      	add	r0, sp, #12
 800d52c:	f006 fa5a 	bl	80139e4 <PropertiesBuilder::AddComment(char const*)>
 800d530:	6863      	ldr	r3, [r4, #4]
 800d532:	7ca2      	ldrb	r2, [r4, #18]
 800d534:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d538:	4930      	ldr	r1, [pc, #192]	; (800d5fc <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x230>)
 800d53a:	a803      	add	r0, sp, #12
 800d53c:	f7ff fd0c 	bl	800cf58 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800d540:	492f      	ldr	r1, [pc, #188]	; (800d600 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x234>)
 800d542:	a803      	add	r0, sp, #12
 800d544:	f006 fa4e 	bl	80139e4 <PropertiesBuilder::AddComment(char const*)>
 800d548:	6863      	ldr	r3, [r4, #4]
 800d54a:	f8b4 200b 	ldrh.w	r2, [r4, #11]
 800d54e:	492d      	ldr	r1, [pc, #180]	; (800d604 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x238>)
 800d550:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d554:	a803      	add	r0, sp, #12
 800d556:	f7ff fd27 	bl	800cfa8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800d55a:	6863      	ldr	r3, [r4, #4]
 800d55c:	8b62      	ldrh	r2, [r4, #26]
 800d55e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800d562:	4929      	ldr	r1, [pc, #164]	; (800d608 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x23c>)
 800d564:	a803      	add	r0, sp, #12
 800d566:	f7ff fd1f 	bl	800cfa8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800d56a:	4928      	ldr	r1, [pc, #160]	; (800d60c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x240>)
 800d56c:	a803      	add	r0, sp, #12
 800d56e:	f006 fa39 	bl	80139e4 <PropertiesBuilder::AddComment(char const*)>
 800d572:	6863      	ldr	r3, [r4, #4]
 800d574:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800d578:	f3c3 5300 	ubfx	r3, r3, #20, #1
 800d57c:	4924      	ldr	r1, [pc, #144]	; (800d610 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x244>)
 800d57e:	a803      	add	r0, sp, #12
 800d580:	f7ff fcea 	bl	800cf58 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800d584:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800d588:	b17b      	cbz	r3, 800d5aa <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1de>
 800d58a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800d58e:	9b03      	ldr	r3, [sp, #12]
 800d590:	4413      	add	r3, r2
 800d592:	227d      	movs	r2, #125	; 0x7d
 800d594:	f803 2c01 	strb.w	r2, [r3, #-1]
 800d598:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800d59c:	9903      	ldr	r1, [sp, #12]
 800d59e:	54ca      	strb	r2, [r1, r3]
 800d5a0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	f8ad 3012 	strh.w	r3, [sp, #18]
 800d5aa:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800d5ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5b0:	601a      	str	r2, [r3, #0]
 800d5b2:	b006      	add	sp, #24
 800d5b4:	bd70      	pop	{r4, r5, r6, pc}
 800d5b6:	9300      	str	r3, [sp, #0]
 800d5b8:	4a16      	ldr	r2, [pc, #88]	; (800d614 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x248>)
 800d5ba:	4b0d      	ldr	r3, [pc, #52]	; (800d5f0 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x224>)
 800d5bc:	e7aa      	b.n	800d514 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x148>
 800d5be:	bf00      	nop
 800d5c0:	080187ab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r8, r9, sl, pc}
 800d5c4:	08018788 	stmdaeq	r1, {r3, r7, r8, r9, sl, pc}
 800d5c8:	08018791 	stmdaeq	r1, {r0, r4, r7, r8, r9, sl, pc}
 800d5cc:	08016f49 	stmdaeq	r1, {r0, r3, r6, r8, r9, sl, fp, sp, lr}
 800d5d0:	08018778 	stmdaeq	r1, {r3, r4, r5, r6, r8, r9, sl, pc}
 800d5d4:	08016f5d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, r9, sl, fp, sp, lr}
 800d5d8:	0801879b 	stmdaeq	r1, {r0, r1, r3, r4, r7, r8, r9, sl, pc}
 800d5dc:	080187a3 	stmdaeq	r1, {r0, r1, r5, r7, r8, r9, sl, pc}
 800d5e0:	08016f73 	stmdaeq	r1, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}
 800d5e4:	08018756 	stmdaeq	r1, {r1, r2, r4, r6, r8, r9, sl, pc}
 800d5e8:	08016f7c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, r9, sl, fp, sp, lr}
 800d5ec:	08016c51 	stmdaeq	r1, {r0, r4, r6, sl, fp, sp, lr}
 800d5f0:	08018747 	stmdaeq	r1, {r0, r1, r2, r6, r8, r9, sl, pc}
 800d5f4:	08016c48 	stmdaeq	r1, {r3, r6, sl, fp, sp, lr}
 800d5f8:	08016f8e 	stmdaeq	r1, {r1, r2, r3, r7, r8, r9, sl, fp, sp, lr}
 800d5fc:	08018766 	stmdaeq	r1, {r1, r2, r5, r6, r8, r9, sl, pc}
 800d600:	08018739 	stmdaeq	r1, {r0, r3, r4, r5, r8, r9, sl, pc}
 800d604:	0801892b 	stmdaeq	r1, {r0, r1, r3, r5, r8, fp, pc}
 800d608:	08018853 	stmdaeq	r1, {r0, r1, r4, r6, fp, pc}
 800d60c:	08016f9c 	stmdaeq	r1, {r2, r3, r4, r7, r8, r9, sl, fp, sp, lr}
 800d610:	08018806 	stmdaeq	r1, {r1, r2, fp, pc}
 800d614:	08016c52 	stmdaeq	r1, {r1, r4, r6, sl, fp, sp, lr}

0800d618 <WS28xxDmxParams::Save(char*, unsigned int, unsigned int&)>:
 800d618:	b513      	push	{r0, r1, r4, lr}
 800d61a:	6804      	ldr	r4, [r0, #0]
 800d61c:	b914      	cbnz	r4, 800d624 <WS28xxDmxParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800d61e:	601c      	str	r4, [r3, #0]
 800d620:	b002      	add	sp, #8
 800d622:	bd10      	pop	{r4, pc}
 800d624:	9300      	str	r3, [sp, #0]
 800d626:	4613      	mov	r3, r2
 800d628:	460a      	mov	r2, r1
 800d62a:	2100      	movs	r1, #0
 800d62c:	f7ff fece 	bl	800d3cc <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)>
 800d630:	e7f6      	b.n	800d620 <WS28xxDmxParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800d632 <WS28xxDmxParams::Set(PixelDmxConfiguration*)>:
 800d632:	6843      	ldr	r3, [r0, #4]
 800d634:	07da      	lsls	r2, r3, #31
 800d636:	bf44      	itt	mi
 800d638:	7a02      	ldrbmi	r2, [r0, #8]
 800d63a:	600a      	strmi	r2, [r1, #0]
 800d63c:	079a      	lsls	r2, r3, #30
 800d63e:	d505      	bpl.n	800d64c <WS28xxDmxParams::Set(PixelDmxConfiguration*)+0x1a>
 800d640:	f8b0 2009 	ldrh.w	r2, [r0, #9]
 800d644:	2a00      	cmp	r2, #0
 800d646:	bf08      	it	eq
 800d648:	22aa      	moveq	r2, #170	; 0xaa
 800d64a:	604a      	str	r2, [r1, #4]
 800d64c:	059a      	lsls	r2, r3, #22
 800d64e:	bf44      	itt	mi
 800d650:	7dc2      	ldrbmi	r2, [r0, #23]
 800d652:	608a      	strmi	r2, [r1, #8]
 800d654:	055a      	lsls	r2, r3, #21
 800d656:	bf44      	itt	mi
 800d658:	7e02      	ldrbmi	r2, [r0, #24]
 800d65a:	740a      	strbmi	r2, [r1, #16]
 800d65c:	051a      	lsls	r2, r3, #20
 800d65e:	bf44      	itt	mi
 800d660:	7e42      	ldrbmi	r2, [r0, #25]
 800d662:	744a      	strbmi	r2, [r1, #17]
 800d664:	06da      	lsls	r2, r3, #27
 800d666:	bf44      	itt	mi
 800d668:	f8d0 200e 	ldrmi.w	r2, [r0, #14]
 800d66c:	60ca      	strmi	r2, [r1, #12]
 800d66e:	069a      	lsls	r2, r3, #26
 800d670:	bf44      	itt	mi
 800d672:	7c82      	ldrbmi	r2, [r0, #18]
 800d674:	748a      	strbmi	r2, [r1, #18]
 800d676:	075a      	lsls	r2, r3, #29
 800d678:	d50b      	bpl.n	800d692 <WS28xxDmxParams::Set(PixelDmxConfiguration*)+0x60>
 800d67a:	7ac2      	ldrb	r2, [r0, #11]
 800d67c:	b510      	push	{r4, lr}
 800d67e:	7b04      	ldrb	r4, [r0, #12]
 800d680:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800d684:	838a      	strh	r2, [r1, #28]
 800d686:	05da      	lsls	r2, r3, #23
 800d688:	bf44      	itt	mi
 800d68a:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 800d68e:	618b      	strmi	r3, [r1, #24]
 800d690:	bd10      	pop	{r4, pc}
 800d692:	05db      	lsls	r3, r3, #23
 800d694:	bf44      	itt	mi
 800d696:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 800d69a:	618b      	strmi	r3, [r1, #24]
 800d69c:	4770      	bx	lr

0800d69e <WS28xxDmxParams::Dump()>:
 800d69e:	4770      	bx	lr

0800d6a0 <WS28xxDmx::Print()>:
 800d6a0:	b510      	push	{r4, lr}
 800d6a2:	4604      	mov	r4, r0
 800d6a4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800d6a6:	f000 fc4f 	bl	800df48 <WS28xx::Print()>
 800d6aa:	4805      	ldr	r0, [pc, #20]	; (800d6c0 <WS28xxDmx::Print()+0x20>)
 800d6ac:	f7fb fe72 	bl	8009394 <printf>
 800d6b0:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 800d6b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6b8:	4802      	ldr	r0, [pc, #8]	; (800d6c4 <WS28xxDmx::Print()+0x24>)
 800d6ba:	f7fb be6b 	b.w	8009394 <printf>
 800d6be:	bf00      	nop
 800d6c0:	08016fa9 	stmdaeq	r1, {r0, r3, r5, r7, r8, r9, sl, fp, sp, lr}
 800d6c4:	08016fbf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, r8, r9, sl, fp, sp, lr}

0800d6c8 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)>:
 800d6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6cc:	460e      	mov	r6, r1
 800d6ce:	4611      	mov	r1, r2
 800d6d0:	4604      	mov	r4, r0
 800d6d2:	4690      	mov	r8, r2
 800d6d4:	461d      	mov	r5, r3
 800d6d6:	9f06      	ldr	r7, [sp, #24]
 800d6d8:	f000 f866 	bl	800d7a8 <PixelConfiguration::Validate(unsigned int&)>
 800d6dc:	2e01      	cmp	r6, #1
 800d6de:	d009      	beq.n	800d6f4 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x2c>
 800d6e0:	7ce2      	ldrb	r2, [r4, #19]
 800d6e2:	b93a      	cbnz	r2, 800d6f4 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x2c>
 800d6e4:	2e04      	cmp	r6, #4
 800d6e6:	d13d      	bne.n	800d764 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x9c>
 800d6e8:	2303      	movs	r3, #3
 800d6ea:	6023      	str	r3, [r4, #0]
 800d6ec:	4641      	mov	r1, r8
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	f000 f85a 	bl	800d7a8 <PixelConfiguration::Validate(unsigned int&)>
 800d6f4:	6823      	ldr	r3, [r4, #0]
 800d6f6:	2b07      	cmp	r3, #7
 800d6f8:	bf15      	itete	ne
 800d6fa:	f44f 72aa 	movne.w	r2, #340	; 0x154
 800d6fe:	f44f 7280 	moveq.w	r2, #256	; 0x100
 800d702:	21aa      	movne	r1, #170	; 0xaa
 800d704:	2180      	moveq	r1, #128	; 0x80
 800d706:	bf14      	ite	ne
 800d708:	f44f 73ff 	movne.w	r3, #510	; 0x1fe
 800d70c:	f44f 73c0 	moveq.w	r3, #384	; 0x180
 800d710:	e9c5 1200 	strd	r1, r2, [r5]
 800d714:	69a2      	ldr	r2, [r4, #24]
 800d716:	60ab      	str	r3, [r5, #8]
 800d718:	6863      	ldr	r3, [r4, #4]
 800d71a:	b10a      	cbz	r2, 800d720 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x58>
 800d71c:	4293      	cmp	r3, r2
 800d71e:	d200      	bcs.n	800d722 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x5a>
 800d720:	61a3      	str	r3, [r4, #24]
 800d722:	69a2      	ldr	r2, [r4, #24]
 800d724:	fbb3 f3f2 	udiv	r3, r3, r2
 800d728:	603b      	str	r3, [r7, #0]
 800d72a:	6963      	ldr	r3, [r4, #20]
 800d72c:	42b3      	cmp	r3, r6
 800d72e:	bf94      	ite	ls
 800d730:	6163      	strls	r3, [r4, #20]
 800d732:	6166      	strhi	r6, [r4, #20]
 800d734:	682b      	ldr	r3, [r5, #0]
 800d736:	683a      	ldr	r2, [r7, #0]
 800d738:	3301      	adds	r3, #1
 800d73a:	fbb2 f2f3 	udiv	r2, r2, r3
 800d73e:	9b07      	ldr	r3, [sp, #28]
 800d740:	1c51      	adds	r1, r2, #1
 800d742:	2e01      	cmp	r6, #1
 800d744:	6019      	str	r1, [r3, #0]
 800d746:	bf01      	itttt	eq
 800d748:	682b      	ldreq	r3, [r5, #0]
 800d74a:	683a      	ldreq	r2, [r7, #0]
 800d74c:	3301      	addeq	r3, #1
 800d74e:	fbb2 f2f3 	udiveq	r2, r2, r3
 800d752:	bf1e      	ittt	ne
 800d754:	6963      	ldrne	r3, [r4, #20]
 800d756:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 800d75a:	eb02 0283 	addne.w	r2, r2, r3, lsl #2
 800d75e:	60ea      	str	r2, [r5, #12]
 800d760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d764:	6823      	ldr	r3, [r4, #0]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d0c0      	beq.n	800d6ec <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x24>
 800d76a:	3b0b      	subs	r3, #11
 800d76c:	2b01      	cmp	r3, #1
 800d76e:	bf88      	it	hi
 800d770:	6022      	strhi	r2, [r4, #0]
 800d772:	e7bb      	b.n	800d6ec <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x24>

0800d774 <PixelDmxConfiguration::Dump()>:
 800d774:	4770      	bx	lr
	...

0800d778 <PixelConfiguration::GetRgbMapping(pixel::Type)>:
 800d778:	3801      	subs	r0, #1
 800d77a:	2809      	cmp	r0, #9
 800d77c:	bf9a      	itte	ls
 800d77e:	4b02      	ldrls	r3, [pc, #8]	; (800d788 <PixelConfiguration::GetRgbMapping(pixel::Type)+0x10>)
 800d780:	5618      	ldrsbls	r0, [r3, r0]
 800d782:	2002      	movhi	r0, #2
 800d784:	4770      	bx	lr
 800d786:	bf00      	nop
 800d788:	08016fe3 	stmdaeq	r1, {r0, r1, r5, r6, r7, r8, r9, sl, fp, sp, lr}

0800d78c <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>:
 800d78c:	23c0      	movs	r3, #192	; 0xc0
 800d78e:	2803      	cmp	r0, #3
 800d790:	700b      	strb	r3, [r1, #0]
 800d792:	d006      	beq.n	800d7a2 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x16>
 800d794:	3808      	subs	r0, #8
 800d796:	2803      	cmp	r0, #3
 800d798:	bf34      	ite	cc
 800d79a:	23fc      	movcc	r3, #252	; 0xfc
 800d79c:	23f0      	movcs	r3, #240	; 0xf0
 800d79e:	7013      	strb	r3, [r2, #0]
 800d7a0:	4770      	bx	lr
 800d7a2:	23f8      	movs	r3, #248	; 0xf8
 800d7a4:	e7fb      	b.n	800d79e <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x12>
	...

0800d7a8 <PixelConfiguration::Validate(unsigned int&)>:
 800d7a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d7aa:	e9d0 5300 	ldrd	r5, r3, [r0]
 800d7ae:	2d07      	cmp	r5, #7
 800d7b0:	4604      	mov	r4, r0
 800d7b2:	6882      	ldr	r2, [r0, #8]
 800d7b4:	d129      	bne.n	800d80a <PixelConfiguration::Validate(unsigned int&)+0x62>
 800d7b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7ba:	bf28      	it	cs
 800d7bc:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800d7c0:	6043      	str	r3, [r0, #4]
 800d7c2:	2304      	movs	r3, #4
 800d7c4:	600b      	str	r3, [r1, #0]
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	2a06      	cmp	r2, #6
 800d7ca:	74e3      	strb	r3, [r4, #19]
 800d7cc:	d103      	bne.n	800d7d6 <PixelConfiguration::Validate(unsigned int&)+0x2e>
 800d7ce:	4628      	mov	r0, r5
 800d7d0:	f7ff ffd2 	bl	800d778 <PixelConfiguration::GetRgbMapping(pixel::Type)>
 800d7d4:	60a0      	str	r0, [r4, #8]
 800d7d6:	7c63      	ldrb	r3, [r4, #17]
 800d7d8:	7c22      	ldrb	r2, [r4, #16]
 800d7da:	4628      	mov	r0, r5
 800d7dc:	429a      	cmp	r2, r3
 800d7de:	bf28      	it	cs
 800d7e0:	2300      	movcs	r3, #0
 800d7e2:	f10d 0207 	add.w	r2, sp, #7
 800d7e6:	bf28      	it	cs
 800d7e8:	8223      	strhcs	r3, [r4, #16]
 800d7ea:	f10d 0106 	add.w	r1, sp, #6
 800d7ee:	f7ff ffcd 	bl	800d78c <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 800d7f2:	7c23      	ldrb	r3, [r4, #16]
 800d7f4:	b913      	cbnz	r3, 800d7fc <PixelConfiguration::Validate(unsigned int&)+0x54>
 800d7f6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d7fa:	7423      	strb	r3, [r4, #16]
 800d7fc:	7c63      	ldrb	r3, [r4, #17]
 800d7fe:	b913      	cbnz	r3, 800d806 <PixelConfiguration::Validate(unsigned int&)+0x5e>
 800d800:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d804:	7463      	strb	r3, [r4, #17]
 800d806:	4b1a      	ldr	r3, [pc, #104]	; (800d870 <PixelConfiguration::Validate(unsigned int&)+0xc8>)
 800d808:	e020      	b.n	800d84c <PixelConfiguration::Validate(unsigned int&)+0xa4>
 800d80a:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 800d80e:	bf28      	it	cs
 800d810:	f44f 732a 	movcs.w	r3, #680	; 0x2a8
 800d814:	6043      	str	r3, [r0, #4]
 800d816:	2303      	movs	r3, #3
 800d818:	600b      	str	r3, [r1, #0]
 800d81a:	f1a5 030b 	sub.w	r3, r5, #11
 800d81e:	2b01      	cmp	r3, #1
 800d820:	d806      	bhi.n	800d830 <PixelConfiguration::Validate(unsigned int&)+0x88>
 800d822:	7c83      	ldrb	r3, [r0, #18]
 800d824:	2b1f      	cmp	r3, #31
 800d826:	d81d      	bhi.n	800d864 <PixelConfiguration::Validate(unsigned int&)+0xbc>
 800d828:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800d82c:	74a3      	strb	r3, [r4, #18]
 800d82e:	e000      	b.n	800d832 <PixelConfiguration::Validate(unsigned int&)+0x8a>
 800d830:	b9d5      	cbnz	r5, 800d868 <PixelConfiguration::Validate(unsigned int&)+0xc0>
 800d832:	2300      	movs	r3, #0
 800d834:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800d838:	2a06      	cmp	r2, #6
 800d83a:	bf08      	it	eq
 800d83c:	60a3      	streq	r3, [r4, #8]
 800d83e:	2d0d      	cmp	r5, #13
 800d840:	74e3      	strb	r3, [r4, #19]
 800d842:	8221      	strh	r1, [r4, #16]
 800d844:	68e3      	ldr	r3, [r4, #12]
 800d846:	d109      	bne.n	800d85c <PixelConfiguration::Validate(unsigned int&)+0xb4>
 800d848:	b913      	cbnz	r3, 800d850 <PixelConfiguration::Validate(unsigned int&)+0xa8>
 800d84a:	4b0a      	ldr	r3, [pc, #40]	; (800d874 <PixelConfiguration::Validate(unsigned int&)+0xcc>)
 800d84c:	60e3      	str	r3, [r4, #12]
 800d84e:	e003      	b.n	800d858 <PixelConfiguration::Validate(unsigned int&)+0xb0>
 800d850:	4a09      	ldr	r2, [pc, #36]	; (800d878 <PixelConfiguration::Validate(unsigned int&)+0xd0>)
 800d852:	4293      	cmp	r3, r2
 800d854:	d900      	bls.n	800d858 <PixelConfiguration::Validate(unsigned int&)+0xb0>
 800d856:	60e2      	str	r2, [r4, #12]
 800d858:	b003      	add	sp, #12
 800d85a:	bd30      	pop	{r4, r5, pc}
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d0f4      	beq.n	800d84a <PixelConfiguration::Validate(unsigned int&)+0xa2>
 800d860:	4a06      	ldr	r2, [pc, #24]	; (800d87c <PixelConfiguration::Validate(unsigned int&)+0xd4>)
 800d862:	e7f6      	b.n	800d852 <PixelConfiguration::Validate(unsigned int&)+0xaa>
 800d864:	23ff      	movs	r3, #255	; 0xff
 800d866:	e7e1      	b.n	800d82c <PixelConfiguration::Validate(unsigned int&)+0x84>
 800d868:	2d0d      	cmp	r5, #13
 800d86a:	d1ac      	bne.n	800d7c6 <PixelConfiguration::Validate(unsigned int&)+0x1e>
 800d86c:	e7e1      	b.n	800d832 <PixelConfiguration::Validate(unsigned int&)+0x8a>
 800d86e:	bf00      	nop
 800d870:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 800d874:	003d0900 	eorseq	r0, sp, r0, lsl #18
 800d878:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 800d87c:	017d7840 	cmneq	sp, r0, asr #16

0800d880 <PixelConfiguration::Dump()>:
 800d880:	4770      	bx	lr
	...

0800d884 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>:
 800d884:	b507      	push	{r0, r1, r2, lr}
 800d886:	b2cb      	uxtb	r3, r1
 800d888:	9300      	str	r3, [sp, #0]
 800d88a:	f3c1 4207 	ubfx	r2, r1, #16, #8
 800d88e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800d892:	4601      	mov	r1, r0
 800d894:	4803      	ldr	r0, [pc, #12]	; (800d8a4 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]+0x20>)
 800d896:	6800      	ldr	r0, [r0, #0]
 800d898:	f000 fb98 	bl	800dfcc <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 800d89c:	b003      	add	sp, #12
 800d89e:	f85d fb04 	ldr.w	pc, [sp], #4
 800d8a2:	bf00      	nop
 800d8a4:	20001948 	andcs	r1, r0, r8, asr #18

0800d8a8 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>:
 800d8a8:	b538      	push	{r3, r4, r5, lr}
 800d8aa:	2400      	movs	r4, #0
 800d8ac:	4d05      	ldr	r5, [pc, #20]	; (800d8c4 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x1c>)
 800d8ae:	682b      	ldr	r3, [r5, #0]
 800d8b0:	429c      	cmp	r4, r3
 800d8b2:	d300      	bcc.n	800d8b6 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0xe>
 800d8b4:	bd38      	pop	{r3, r4, r5, pc}
 800d8b6:	4620      	mov	r0, r4
 800d8b8:	2100      	movs	r1, #0
 800d8ba:	f7ff ffe3 	bl	800d884 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800d8be:	3401      	adds	r4, #1
 800d8c0:	e7f5      	b.n	800d8ae <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x6>
 800d8c2:	bf00      	nop
 800d8c4:	20001944 	andcs	r1, r0, r4, asr #18

0800d8c8 <PixelPatterns::PixelPatterns(unsigned int)>:
 800d8c8:	2901      	cmp	r1, #1
 800d8ca:	bf28      	it	cs
 800d8cc:	2101      	movcs	r1, #1
 800d8ce:	4b08      	ldr	r3, [pc, #32]	; (800d8f0 <PixelPatterns::PixelPatterns(unsigned int)+0x28>)
 800d8d0:	4a08      	ldr	r2, [pc, #32]	; (800d8f4 <PixelPatterns::PixelPatterns(unsigned int)+0x2c>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	6013      	str	r3, [r2, #0]
 800d8d6:	4a08      	ldr	r2, [pc, #32]	; (800d8f8 <PixelPatterns::PixelPatterns(unsigned int)+0x30>)
 800d8d8:	6011      	str	r1, [r2, #0]
 800d8da:	685a      	ldr	r2, [r3, #4]
 800d8dc:	4b07      	ldr	r3, [pc, #28]	; (800d8fc <PixelPatterns::PixelPatterns(unsigned int)+0x34>)
 800d8de:	601a      	str	r2, [r3, #0]
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	4b07      	ldr	r3, [pc, #28]	; (800d900 <PixelPatterns::PixelPatterns(unsigned int)+0x38>)
 800d8e4:	6819      	ldr	r1, [r3, #0]
 800d8e6:	4b07      	ldr	r3, [pc, #28]	; (800d904 <PixelPatterns::PixelPatterns(unsigned int)+0x3c>)
 800d8e8:	61da      	str	r2, [r3, #28]
 800d8ea:	6019      	str	r1, [r3, #0]
 800d8ec:	619a      	str	r2, [r3, #24]
 800d8ee:	4770      	bx	lr
 800d8f0:	20001958 	andcs	r1, r0, r8, asr r9
 800d8f4:	20001948 	andcs	r1, r0, r8, asr #18
 800d8f8:	2000193c 	andcs	r1, r0, ip, lsr r9
 800d8fc:	20001944 	andcs	r1, r0, r4, asr #18
 800d900:	2000a9dc 	ldrdcs	sl, [r0], -ip
 800d904:	2000191c 	andcs	r1, r0, ip, lsl r9

0800d908 <PixelPatterns::GetName(pixelpatterns::Pattern)>:
 800d908:	2805      	cmp	r0, #5
 800d90a:	bfdd      	ittte	le
 800d90c:	220e      	movle	r2, #14
 800d90e:	4b02      	ldrle	r3, [pc, #8]	; (800d918 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x10>)
 800d910:	fb02 3000 	mlale	r0, r2, r0, r3
 800d914:	4801      	ldrgt	r0, [pc, #4]	; (800d91c <PixelPatterns::GetName(pixelpatterns::Pattern)+0x14>)
 800d916:	4770      	bx	lr
 800d918:	08016ff5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 800d91c:	08016fed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r8, r9, sl, fp, sp, lr}

0800d920 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>:
 800d920:	b570      	push	{r4, r5, r6, lr}
 800d922:	460e      	mov	r6, r1
 800d924:	4615      	mov	r5, r2
 800d926:	461c      	mov	r4, r3
 800d928:	f7ff ffbe 	bl	800d8a8 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800d92c:	2301      	movs	r3, #1
 800d92e:	4905      	ldr	r1, [pc, #20]	; (800d944 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)+0x24>)
 800d930:	22ff      	movs	r2, #255	; 0xff
 800d932:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800d936:	61cb      	str	r3, [r1, #28]
 800d938:	2300      	movs	r3, #0
 800d93a:	604d      	str	r5, [r1, #4]
 800d93c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800d940:	618c      	str	r4, [r1, #24]
 800d942:	bd70      	pop	{r4, r5, r6, pc}
 800d944:	2000191c 	andcs	r1, r0, ip, lsl r9

0800d948 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 800d948:	b570      	push	{r4, r5, r6, lr}
 800d94a:	460e      	mov	r6, r1
 800d94c:	461c      	mov	r4, r3
 800d94e:	4615      	mov	r5, r2
 800d950:	f7ff ffaa 	bl	800d8a8 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800d954:	2302      	movs	r3, #2
 800d956:	4908      	ldr	r1, [pc, #32]	; (800d978 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 800d958:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800d95c:	61cb      	str	r3, [r1, #28]
 800d95e:	9b04      	ldr	r3, [sp, #16]
 800d960:	e9c1 5402 	strd	r5, r4, [r1, #8]
 800d964:	604b      	str	r3, [r1, #4]
 800d966:	4b05      	ldr	r3, [pc, #20]	; (800d97c <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x34>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	610b      	str	r3, [r1, #16]
 800d96c:	2300      	movs	r3, #0
 800d96e:	614b      	str	r3, [r1, #20]
 800d970:	9b05      	ldr	r3, [sp, #20]
 800d972:	618b      	str	r3, [r1, #24]
 800d974:	bd70      	pop	{r4, r5, r6, pc}
 800d976:	bf00      	nop
 800d978:	2000191c 	andcs	r1, r0, ip, lsl r9
 800d97c:	20001944 	andcs	r1, r0, r4, asr #18

0800d980 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 800d980:	b570      	push	{r4, r5, r6, lr}
 800d982:	460e      	mov	r6, r1
 800d984:	461d      	mov	r5, r3
 800d986:	4614      	mov	r4, r2
 800d988:	f7ff ff8e 	bl	800d8a8 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800d98c:	2303      	movs	r3, #3
 800d98e:	4907      	ldr	r1, [pc, #28]	; (800d9ac <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 800d990:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800d994:	61cb      	str	r3, [r1, #28]
 800d996:	4b06      	ldr	r3, [pc, #24]	; (800d9b0 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 800d998:	604d      	str	r5, [r1, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	608c      	str	r4, [r1, #8]
 800d99e:	610b      	str	r3, [r1, #16]
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	614b      	str	r3, [r1, #20]
 800d9a4:	9b04      	ldr	r3, [sp, #16]
 800d9a6:	618b      	str	r3, [r1, #24]
 800d9a8:	bd70      	pop	{r4, r5, r6, pc}
 800d9aa:	bf00      	nop
 800d9ac:	2000191c 	andcs	r1, r0, ip, lsl r9
 800d9b0:	20001944 	andcs	r1, r0, r4, asr #18

0800d9b4 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>:
 800d9b4:	b570      	push	{r4, r5, r6, lr}
 800d9b6:	460e      	mov	r6, r1
 800d9b8:	461d      	mov	r5, r3
 800d9ba:	4614      	mov	r4, r2
 800d9bc:	f7ff ff74 	bl	800d8a8 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800d9c0:	2304      	movs	r3, #4
 800d9c2:	4912      	ldr	r1, [pc, #72]	; (800da0c <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x58>)
 800d9c4:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800d9c8:	604d      	str	r5, [r1, #4]
 800d9ca:	4d11      	ldr	r5, [pc, #68]	; (800da10 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x5c>)
 800d9cc:	61cb      	str	r3, [r1, #28]
 800d9ce:	6828      	ldr	r0, [r5, #0]
 800d9d0:	608c      	str	r4, [r1, #8]
 800d9d2:	1e43      	subs	r3, r0, #1
 800d9d4:	005b      	lsls	r3, r3, #1
 800d9d6:	b29b      	uxth	r3, r3
 800d9d8:	610b      	str	r3, [r1, #16]
 800d9da:	2300      	movs	r3, #0
 800d9dc:	4c0d      	ldr	r4, [pc, #52]	; (800da14 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x60>)
 800d9de:	614b      	str	r3, [r1, #20]
 800d9e0:	6823      	ldr	r3, [r4, #0]
 800d9e2:	b97b      	cbnz	r3, 800da04 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x50>
 800d9e4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800d9e8:	4298      	cmp	r0, r3
 800d9ea:	bf2c      	ite	cs
 800d9ec:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 800d9f0:	0080      	lslcc	r0, r0, #2
 800d9f2:	f006 fe1f 	bl	8014634 <operator new[](unsigned int)>
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	682b      	ldr	r3, [r5, #0]
 800d9fa:	6020      	str	r0, [r4, #0]
 800d9fc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800da00:	4298      	cmp	r0, r3
 800da02:	d100      	bne.n	800da06 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x52>
 800da04:	bd70      	pop	{r4, r5, r6, pc}
 800da06:	f840 2b04 	str.w	r2, [r0], #4
 800da0a:	e7f9      	b.n	800da00 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x4c>
 800da0c:	2000191c 	andcs	r1, r0, ip, lsl r9
 800da10:	20001944 	andcs	r1, r0, r4, asr #18
 800da14:	20001940 	andcs	r1, r0, r0, asr #18

0800da18 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 800da18:	b570      	push	{r4, r5, r6, lr}
 800da1a:	460e      	mov	r6, r1
 800da1c:	461c      	mov	r4, r3
 800da1e:	4615      	mov	r5, r2
 800da20:	f7ff ff42 	bl	800d8a8 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800da24:	2305      	movs	r3, #5
 800da26:	4907      	ldr	r1, [pc, #28]	; (800da44 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 800da28:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800da2c:	61cb      	str	r3, [r1, #28]
 800da2e:	9b05      	ldr	r3, [sp, #20]
 800da30:	e9c1 5402 	strd	r5, r4, [r1, #8]
 800da34:	604b      	str	r3, [r1, #4]
 800da36:	9b04      	ldr	r3, [sp, #16]
 800da38:	610b      	str	r3, [r1, #16]
 800da3a:	2300      	movs	r3, #0
 800da3c:	614b      	str	r3, [r1, #20]
 800da3e:	9b06      	ldr	r3, [sp, #24]
 800da40:	618b      	str	r3, [r1, #24]
 800da42:	bd70      	pop	{r4, r5, r6, pc}
 800da44:	2000191c 	andcs	r1, r0, ip, lsl r9

0800da48 <PixelPatterns::Wheel(unsigned char)>:
 800da48:	43cb      	mvns	r3, r1
 800da4a:	b2db      	uxtb	r3, r3
 800da4c:	2b54      	cmp	r3, #84	; 0x54
 800da4e:	d809      	bhi.n	800da64 <PixelPatterns::Wheel(unsigned char)+0x1c>
 800da50:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 800da54:	b2db      	uxtb	r3, r3
 800da56:	1e5a      	subs	r2, r3, #1
 800da58:	4258      	negs	r0, r3
 800da5a:	b2d2      	uxtb	r2, r2
 800da5c:	b2c0      	uxtb	r0, r0
 800da5e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800da62:	4770      	bx	lr
 800da64:	2ba9      	cmp	r3, #169	; 0xa9
 800da66:	d809      	bhi.n	800da7c <PixelPatterns::Wheel(unsigned char)+0x34>
 800da68:	f1c1 01aa 	rsb	r1, r1, #170	; 0xaa
 800da6c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800da70:	b2c9      	uxtb	r1, r1
 800da72:	43c8      	mvns	r0, r1
 800da74:	b2c0      	uxtb	r0, r0
 800da76:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 800da7a:	4770      	bx	lr
 800da7c:	f1c1 0155 	rsb	r1, r1, #85	; 0x55
 800da80:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800da84:	b2c9      	uxtb	r1, r1
 800da86:	0208      	lsls	r0, r1, #8
 800da88:	f480 407f 	eor.w	r0, r0, #65280	; 0xff00
 800da8c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800da90:	4770      	bx	lr
	...

0800da94 <PixelPatterns::Increment(unsigned int)>:
 800da94:	4a0d      	ldr	r2, [pc, #52]	; (800dacc <PixelPatterns::Increment(unsigned int)+0x38>)
 800da96:	b510      	push	{r4, lr}
 800da98:	014c      	lsls	r4, r1, #5
 800da9a:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 800da9e:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
 800daa2:	b930      	cbnz	r0, 800dab2 <PixelPatterns::Increment(unsigned int)+0x1e>
 800daa4:	690a      	ldr	r2, [r1, #16]
 800daa6:	3301      	adds	r3, #1
 800daa8:	4293      	cmp	r3, r2
 800daaa:	bf18      	it	ne
 800daac:	4618      	movne	r0, r3
 800daae:	6148      	str	r0, [r1, #20]
 800dab0:	bd10      	pop	{r4, pc}
 800dab2:	b92b      	cbnz	r3, 800dac0 <PixelPatterns::Increment(unsigned int)+0x2c>
 800dab4:	4422      	add	r2, r4
 800dab6:	6913      	ldr	r3, [r2, #16]
 800dab8:	3b01      	subs	r3, #1
 800daba:	b29b      	uxth	r3, r3
 800dabc:	6153      	str	r3, [r2, #20]
 800dabe:	e7f7      	b.n	800dab0 <PixelPatterns::Increment(unsigned int)+0x1c>
 800dac0:	3b01      	subs	r3, #1
 800dac2:	614b      	str	r3, [r1, #20]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d1f3      	bne.n	800dab0 <PixelPatterns::Increment(unsigned int)+0x1c>
 800dac8:	e7f4      	b.n	800dab4 <PixelPatterns::Increment(unsigned int)+0x20>
 800daca:	bf00      	nop
 800dacc:	2000191c 	andcs	r1, r0, ip, lsl r9

0800dad0 <PixelPatterns::RainbowCycleUpdate(unsigned int)>:
 800dad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dad4:	4604      	mov	r4, r0
 800dad6:	460d      	mov	r5, r1
 800dad8:	2700      	movs	r7, #0
 800dada:	4b10      	ldr	r3, [pc, #64]	; (800db1c <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x4c>)
 800dadc:	f8df 8040 	ldr.w	r8, [pc, #64]	; 800db20 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x50>
 800dae0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800dae4:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800dae8:	f8d8 2000 	ldr.w	r2, [r8]
 800daec:	b2be      	uxth	r6, r7
 800daee:	42b2      	cmp	r2, r6
 800daf0:	f107 0701 	add.w	r7, r7, #1
 800daf4:	d805      	bhi.n	800db02 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x32>
 800daf6:	4629      	mov	r1, r5
 800daf8:	4620      	mov	r0, r4
 800dafa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dafe:	f7ff bfc9 	b.w	800da94 <PixelPatterns::Increment(unsigned int)>
 800db02:	0233      	lsls	r3, r6, #8
 800db04:	fbb3 f3f2 	udiv	r3, r3, r2
 800db08:	444b      	add	r3, r9
 800db0a:	b2d9      	uxtb	r1, r3
 800db0c:	4620      	mov	r0, r4
 800db0e:	f7ff ff9b 	bl	800da48 <PixelPatterns::Wheel(unsigned char)>
 800db12:	4601      	mov	r1, r0
 800db14:	4630      	mov	r0, r6
 800db16:	f7ff feb5 	bl	800d884 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800db1a:	e7e5      	b.n	800dae8 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x18>
 800db1c:	2000191c 	andcs	r1, r0, ip, lsl r9
 800db20:	20001944 	andcs	r1, r0, r4, asr #18

0800db24 <PixelPatterns::TheaterChaseUpdate(unsigned int)>:
 800db24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db28:	4605      	mov	r5, r0
 800db2a:	460c      	mov	r4, r1
 800db2c:	f04f 0b00 	mov.w	fp, #0
 800db30:	4b11      	ldr	r3, [pc, #68]	; (800db78 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x54>)
 800db32:	4e12      	ldr	r6, [pc, #72]	; (800db7c <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x58>)
 800db34:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800db38:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800db3c:	f8df a040 	ldr.w	sl, [pc, #64]	; 800db80 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x5c>
 800db40:	e9d3 7802 	ldrd	r7, r8, [r3, #8]
 800db44:	6833      	ldr	r3, [r6, #0]
 800db46:	fa1f f08b 	uxth.w	r0, fp
 800db4a:	4283      	cmp	r3, r0
 800db4c:	d805      	bhi.n	800db5a <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x36>
 800db4e:	4621      	mov	r1, r4
 800db50:	4628      	mov	r0, r5
 800db52:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db56:	f7ff bf9d 	b.w	800da94 <PixelPatterns::Increment(unsigned int)>
 800db5a:	eb09 0300 	add.w	r3, r9, r0
 800db5e:	fb0a f303 	mul.w	r3, sl, r3
 800db62:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 800db66:	bf94      	ite	ls
 800db68:	4639      	movls	r1, r7
 800db6a:	4641      	movhi	r1, r8
 800db6c:	f7ff fe8a 	bl	800d884 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800db70:	f10b 0b01 	add.w	fp, fp, #1
 800db74:	e7e6      	b.n	800db44 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x20>
 800db76:	bf00      	nop
 800db78:	2000191c 	andcs	r1, r0, ip, lsl r9
 800db7c:	20001944 	andcs	r1, r0, r4, asr #18
 800db80:	aaaaaaab 	bge	6ab8634 <__stack_size+0x6ab6e34>

0800db84 <PixelPatterns::ColourWipeUpdate(unsigned int)>:
 800db84:	b538      	push	{r3, r4, r5, lr}
 800db86:	4605      	mov	r5, r0
 800db88:	460c      	mov	r4, r1
 800db8a:	4b06      	ldr	r3, [pc, #24]	; (800dba4 <PixelPatterns::ColourWipeUpdate(unsigned int)+0x20>)
 800db8c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800db90:	6899      	ldr	r1, [r3, #8]
 800db92:	6958      	ldr	r0, [r3, #20]
 800db94:	f7ff fe76 	bl	800d884 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800db98:	4621      	mov	r1, r4
 800db9a:	4628      	mov	r0, r5
 800db9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dba0:	f7ff bf78 	b.w	800da94 <PixelPatterns::Increment(unsigned int)>
 800dba4:	2000191c 	andcs	r1, r0, ip, lsl r9

0800dba8 <PixelPatterns::ScannerUpdate(unsigned int)>:
 800dba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbac:	460d      	mov	r5, r1
 800dbae:	f04f 0900 	mov.w	r9, #0
 800dbb2:	4a27      	ldr	r2, [pc, #156]	; (800dc50 <PixelPatterns::ScannerUpdate(unsigned int)+0xa8>)
 800dbb4:	b085      	sub	sp, #20
 800dbb6:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 800dbba:	e9d2 7604 	ldrd	r7, r6, [r2, #16]
 800dbbe:	f8d2 b008 	ldr.w	fp, [r2, #8]
 800dbc2:	00b3      	lsls	r3, r6, #2
 800dbc4:	f8df a08c 	ldr.w	sl, [pc, #140]	; 800dc54 <PixelPatterns::ScannerUpdate(unsigned int)+0xac>
 800dbc8:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800dc58 <PixelPatterns::ScannerUpdate(unsigned int)+0xb0>
 800dbcc:	9002      	str	r0, [sp, #8]
 800dbce:	9301      	str	r3, [sp, #4]
 800dbd0:	1bbf      	subs	r7, r7, r6
 800dbd2:	f8da 1000 	ldr.w	r1, [sl]
 800dbd6:	fa1f f489 	uxth.w	r4, r9
 800dbda:	42a1      	cmp	r1, r4
 800dbdc:	d806      	bhi.n	800dbec <PixelPatterns::ScannerUpdate(unsigned int)+0x44>
 800dbde:	4629      	mov	r1, r5
 800dbe0:	9802      	ldr	r0, [sp, #8]
 800dbe2:	b005      	add	sp, #20
 800dbe4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbe8:	f7ff bf54 	b.w	800da94 <PixelPatterns::Increment(unsigned int)>
 800dbec:	42a6      	cmp	r6, r4
 800dbee:	d10b      	bne.n	800dc08 <PixelPatterns::ScannerUpdate(unsigned int)+0x60>
 800dbf0:	4659      	mov	r1, fp
 800dbf2:	4630      	mov	r0, r6
 800dbf4:	f7ff fe46 	bl	800d884 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800dbf8:	f8d8 1000 	ldr.w	r1, [r8]
 800dbfc:	9b01      	ldr	r3, [sp, #4]
 800dbfe:	f841 b003 	str.w	fp, [r1, r3]
 800dc02:	f109 0901 	add.w	r9, r9, #1
 800dc06:	e7e4      	b.n	800dbd2 <PixelPatterns::ScannerUpdate(unsigned int)+0x2a>
 800dc08:	42a7      	cmp	r7, r4
 800dc0a:	d108      	bne.n	800dc1e <PixelPatterns::ScannerUpdate(unsigned int)+0x76>
 800dc0c:	4659      	mov	r1, fp
 800dc0e:	4638      	mov	r0, r7
 800dc10:	f7ff fe38 	bl	800d884 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800dc14:	f8d8 1000 	ldr.w	r1, [r8]
 800dc18:	f841 b024 	str.w	fp, [r1, r4, lsl #2]
 800dc1c:	e7f1      	b.n	800dc02 <PixelPatterns::ScannerUpdate(unsigned int)+0x5a>
 800dc1e:	f8d8 1000 	ldr.w	r1, [r8]
 800dc22:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 800dc26:	f3c0 2146 	ubfx	r1, r0, #9, #7
 800dc2a:	f3c0 4c46 	ubfx	ip, r0, #17, #7
 800dc2e:	0209      	lsls	r1, r1, #8
 800dc30:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800dc34:	f3c0 0046 	ubfx	r0, r0, #1, #7
 800dc38:	4301      	orrs	r1, r0
 800dc3a:	4620      	mov	r0, r4
 800dc3c:	9103      	str	r1, [sp, #12]
 800dc3e:	f7ff fe21 	bl	800d884 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800dc42:	f8d8 0000 	ldr.w	r0, [r8]
 800dc46:	9903      	ldr	r1, [sp, #12]
 800dc48:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 800dc4c:	e7d9      	b.n	800dc02 <PixelPatterns::ScannerUpdate(unsigned int)+0x5a>
 800dc4e:	bf00      	nop
 800dc50:	2000191c 	andcs	r1, r0, ip, lsl r9
 800dc54:	20001944 	andcs	r1, r0, r4, asr #18
 800dc58:	20001940 	andcs	r1, r0, r0, asr #18

0800dc5c <PixelPatterns::FadeUpdate(unsigned int)>:
 800dc5c:	4a21      	ldr	r2, [pc, #132]	; (800dce4 <PixelPatterns::FadeUpdate(unsigned int)+0x88>)
 800dc5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc62:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 800dc66:	4605      	mov	r5, r0
 800dc68:	e9d2 0704 	ldrd	r0, r7, [r2, #16]
 800dc6c:	460c      	mov	r4, r1
 800dc6e:	e9d2 1302 	ldrd	r1, r3, [r2, #8]
 800dc72:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800dc76:	437a      	muls	r2, r7
 800dc78:	1bc6      	subs	r6, r0, r7
 800dc7a:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 800dc7e:	fb06 220c 	mla	r2, r6, ip, r2
 800dc82:	fbb2 f2f0 	udiv	r2, r2, r0
 800dc86:	0212      	lsls	r2, r2, #8
 800dc88:	fa1f fc82 	uxth.w	ip, r2
 800dc8c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800dc90:	437a      	muls	r2, r7
 800dc92:	b2db      	uxtb	r3, r3
 800dc94:	437b      	muls	r3, r7
 800dc96:	f3c1 4e07 	ubfx	lr, r1, #16, #8
 800dc9a:	fb06 220e 	mla	r2, r6, lr, r2
 800dc9e:	b2c9      	uxtb	r1, r1
 800dca0:	fb06 3301 	mla	r3, r6, r1, r3
 800dca4:	fbb2 f2f0 	udiv	r2, r2, r0
 800dca8:	fbb3 f3f0 	udiv	r3, r3, r0
 800dcac:	2700      	movs	r7, #0
 800dcae:	0412      	lsls	r2, r2, #16
 800dcb0:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800dcb4:	ea4c 0202 	orr.w	r2, ip, r2
 800dcb8:	b2db      	uxtb	r3, r3
 800dcba:	f8df 802c 	ldr.w	r8, [pc, #44]	; 800dce8 <PixelPatterns::FadeUpdate(unsigned int)+0x8c>
 800dcbe:	ea42 0603 	orr.w	r6, r2, r3
 800dcc2:	f8d8 3000 	ldr.w	r3, [r8]
 800dcc6:	429f      	cmp	r7, r3
 800dcc8:	d305      	bcc.n	800dcd6 <PixelPatterns::FadeUpdate(unsigned int)+0x7a>
 800dcca:	4621      	mov	r1, r4
 800dccc:	4628      	mov	r0, r5
 800dcce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dcd2:	f7ff bedf 	b.w	800da94 <PixelPatterns::Increment(unsigned int)>
 800dcd6:	4638      	mov	r0, r7
 800dcd8:	4631      	mov	r1, r6
 800dcda:	f7ff fdd3 	bl	800d884 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800dcde:	3701      	adds	r7, #1
 800dce0:	e7ef      	b.n	800dcc2 <PixelPatterns::FadeUpdate(unsigned int)+0x66>
 800dce2:	bf00      	nop
 800dce4:	2000191c 	andcs	r1, r0, ip, lsl r9
 800dce8:	20001944 	andcs	r1, r0, r4, asr #18

0800dcec <PixelPatterns::PortUpdate(unsigned int, unsigned int)>:
 800dcec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcee:	4b12      	ldr	r3, [pc, #72]	; (800dd38 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x4c>)
 800dcf0:	014e      	lsls	r6, r1, #5
 800dcf2:	599c      	ldr	r4, [r3, r6]
 800dcf4:	eb03 1541 	add.w	r5, r3, r1, lsl #5
 800dcf8:	686f      	ldr	r7, [r5, #4]
 800dcfa:	1b14      	subs	r4, r2, r4
 800dcfc:	42bc      	cmp	r4, r7
 800dcfe:	d319      	bcc.n	800dd34 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 800dd00:	519a      	str	r2, [r3, r6]
 800dd02:	69eb      	ldr	r3, [r5, #28]
 800dd04:	3b01      	subs	r3, #1
 800dd06:	2b04      	cmp	r3, #4
 800dd08:	d814      	bhi.n	800dd34 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 800dd0a:	e8df f003 	tbb	[pc, r3]
 800dd0e:	0d0a0703 	stceq	7, cr0, [sl, #-12]
 800dd12:	f7ff0010 			; <UNDEFINED> instruction: 0xf7ff0010
 800dd16:	fedc 2001 	cdp2	0, 13, cr2, cr12, cr1, {0}
 800dd1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd1c:	f7ff ff02 	bl	800db24 <PixelPatterns::TheaterChaseUpdate(unsigned int)>
 800dd20:	e7fa      	b.n	800dd18 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800dd22:	f7ff ff2f 	bl	800db84 <PixelPatterns::ColourWipeUpdate(unsigned int)>
 800dd26:	e7f7      	b.n	800dd18 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800dd28:	f7ff ff3e 	bl	800dba8 <PixelPatterns::ScannerUpdate(unsigned int)>
 800dd2c:	e7f4      	b.n	800dd18 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800dd2e:	f7ff ff95 	bl	800dc5c <PixelPatterns::FadeUpdate(unsigned int)>
 800dd32:	e7f1      	b.n	800dd18 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800dd34:	2000      	movs	r0, #0
 800dd36:	e7f0      	b.n	800dd1a <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2e>
 800dd38:	2000191c 	andcs	r1, r0, ip, lsl r9

0800dd3c <PixelPatterns::Run()>:
 800dd3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd40:	4606      	mov	r6, r0
 800dd42:	f007 fe6f 	bl	8015a24 <gd32_spi_dma_tx_is_active()>
 800dd46:	4604      	mov	r4, r0
 800dd48:	b9c0      	cbnz	r0, 800dd7c <PixelPatterns::Run()+0x40>
 800dd4a:	4605      	mov	r5, r0
 800dd4c:	4b0c      	ldr	r3, [pc, #48]	; (800dd80 <PixelPatterns::Run()+0x44>)
 800dd4e:	4f0d      	ldr	r7, [pc, #52]	; (800dd84 <PixelPatterns::Run()+0x48>)
 800dd50:	f8d3 8000 	ldr.w	r8, [r3]
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	b2e9      	uxtb	r1, r5
 800dd58:	428b      	cmp	r3, r1
 800dd5a:	f105 0501 	add.w	r5, r5, #1
 800dd5e:	d806      	bhi.n	800dd6e <PixelPatterns::Run()+0x32>
 800dd60:	b164      	cbz	r4, 800dd7c <PixelPatterns::Run()+0x40>
 800dd62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd66:	4b08      	ldr	r3, [pc, #32]	; (800dd88 <PixelPatterns::Run()+0x4c>)
 800dd68:	6818      	ldr	r0, [r3, #0]
 800dd6a:	f000 bf6f 	b.w	800ec4c <WS28xx::Update()>
 800dd6e:	4642      	mov	r2, r8
 800dd70:	4630      	mov	r0, r6
 800dd72:	f7ff ffbb 	bl	800dcec <PixelPatterns::PortUpdate(unsigned int, unsigned int)>
 800dd76:	4304      	orrs	r4, r0
 800dd78:	b2e4      	uxtb	r4, r4
 800dd7a:	e7eb      	b.n	800dd54 <PixelPatterns::Run()+0x18>
 800dd7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd80:	2000a9dc 	ldrdcs	sl, [r0], -ip
 800dd84:	2000193c 	andcs	r1, r0, ip, lsr r9
 800dd88:	20001948 	andcs	r1, r0, r8, asr #18

0800dd8c <PixelType::GetType(pixel::Type)>:
 800dd8c:	280d      	cmp	r0, #13
 800dd8e:	bfda      	itte	le
 800dd90:	4b02      	ldrle	r3, [pc, #8]	; (800dd9c <PixelType::GetType(pixel::Type)+0x10>)
 800dd92:	eb03 00c0 	addle.w	r0, r3, r0, lsl #3
 800dd96:	4802      	ldrgt	r0, [pc, #8]	; (800dda0 <PixelType::GetType(pixel::Type)+0x14>)
 800dd98:	4770      	bx	lr
 800dd9a:	bf00      	nop
 800dd9c:	0801706b 	stmdaeq	r1, {r0, r1, r3, r5, r6, ip, sp, lr}
 800dda0:	08016fed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r8, r9, sl, fp, sp, lr}

0800dda4 <PixelType::GetType(char const*)>:
 800dda4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dda6:	4604      	mov	r4, r0
 800dda8:	2000      	movs	r0, #0
 800ddaa:	490f      	ldr	r1, [pc, #60]	; (800dde8 <PixelType::GetType(char const*)+0x44>)
 800ddac:	1e67      	subs	r7, r4, #1
 800ddae:	1e4e      	subs	r6, r1, #1
 800ddb0:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800ddb4:	4615      	mov	r5, r2
 800ddb6:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 800ddba:	2b19      	cmp	r3, #25
 800ddbc:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800ddc0:	bf98      	it	ls
 800ddc2:	f102 0520 	addls.w	r5, r2, #32
 800ddc6:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 800ddca:	f1bc 0f19 	cmp.w	ip, #25
 800ddce:	bf98      	it	ls
 800ddd0:	3320      	addls	r3, #32
 800ddd2:	42ab      	cmp	r3, r5
 800ddd4:	d005      	beq.n	800dde2 <PixelType::GetType(char const*)+0x3e>
 800ddd6:	3001      	adds	r0, #1
 800ddd8:	280e      	cmp	r0, #14
 800ddda:	f101 0108 	add.w	r1, r1, #8
 800ddde:	d1e5      	bne.n	800ddac <PixelType::GetType(char const*)+0x8>
 800dde0:	e001      	b.n	800dde6 <PixelType::GetType(char const*)+0x42>
 800dde2:	2a00      	cmp	r2, #0
 800dde4:	d1e4      	bne.n	800ddb0 <PixelType::GetType(char const*)+0xc>
 800dde6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dde8:	0801706b 	stmdaeq	r1, {r0, r1, r3, r5, r6, ip, sp, lr}

0800ddec <PixelType::GetMap(char const*)>:
 800ddec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddee:	4605      	mov	r5, r0
 800ddf0:	2000      	movs	r0, #0
 800ddf2:	4b11      	ldr	r3, [pc, #68]	; (800de38 <PixelType::GetMap(char const*)+0x4c>)
 800ddf4:	1e5c      	subs	r4, r3, #1
 800ddf6:	1e6e      	subs	r6, r5, #1
 800ddf8:	f103 0c02 	add.w	ip, r3, #2
 800ddfc:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 800de00:	4617      	mov	r7, r2
 800de02:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 800de06:	2919      	cmp	r1, #25
 800de08:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800de0c:	bf98      	it	ls
 800de0e:	f102 0720 	addls.w	r7, r2, #32
 800de12:	f1a1 0e41 	sub.w	lr, r1, #65	; 0x41
 800de16:	f1be 0f19 	cmp.w	lr, #25
 800de1a:	bf98      	it	ls
 800de1c:	3120      	addls	r1, #32
 800de1e:	42b9      	cmp	r1, r7
 800de20:	d005      	beq.n	800de2e <PixelType::GetMap(char const*)+0x42>
 800de22:	3001      	adds	r0, #1
 800de24:	2806      	cmp	r0, #6
 800de26:	f103 0304 	add.w	r3, r3, #4
 800de2a:	d1e3      	bne.n	800ddf4 <PixelType::GetMap(char const*)+0x8>
 800de2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de2e:	2a00      	cmp	r2, #0
 800de30:	d0fc      	beq.n	800de2c <PixelType::GetMap(char const*)+0x40>
 800de32:	4564      	cmp	r4, ip
 800de34:	d1e2      	bne.n	800ddfc <PixelType::GetMap(char const*)+0x10>
 800de36:	e7f9      	b.n	800de2c <PixelType::GetMap(char const*)+0x40>
 800de38:	08017053 	stmdaeq	r1, {r0, r1, r4, r6, ip, sp, lr}

0800de3c <PixelType::GetMap(pixel::Map)>:
 800de3c:	2805      	cmp	r0, #5
 800de3e:	bfda      	itte	le
 800de40:	4b02      	ldrle	r3, [pc, #8]	; (800de4c <PixelType::GetMap(pixel::Map)+0x10>)
 800de42:	eb03 0080 	addle.w	r0, r3, r0, lsl #2
 800de46:	4802      	ldrgt	r0, [pc, #8]	; (800de50 <PixelType::GetMap(pixel::Map)+0x14>)
 800de48:	4770      	bx	lr
 800de4a:	bf00      	nop
 800de4c:	08017053 	stmdaeq	r1, {r0, r1, r4, r6, ip, sp, lr}
 800de50:	08017049 	stmdaeq	r1, {r0, r3, r6, ip, sp, lr}

0800de54 <PixelType::ConvertTxH(unsigned char)>:
 800de54:	28f0      	cmp	r0, #240	; 0xf0
 800de56:	d010      	beq.n	800de7a <PixelType::ConvertTxH(unsigned char)+0x26>
 800de58:	d807      	bhi.n	800de6a <PixelType::ConvertTxH(unsigned char)+0x16>
 800de5a:	28c0      	cmp	r0, #192	; 0xc0
 800de5c:	d00f      	beq.n	800de7e <PixelType::ConvertTxH(unsigned char)+0x2a>
 800de5e:	28e0      	cmp	r0, #224	; 0xe0
 800de60:	d00f      	beq.n	800de82 <PixelType::ConvertTxH(unsigned char)+0x2e>
 800de62:	2880      	cmp	r0, #128	; 0x80
 800de64:	d113      	bne.n	800de8e <PixelType::ConvertTxH(unsigned char)+0x3a>
 800de66:	480b      	ldr	r0, [pc, #44]	; (800de94 <PixelType::ConvertTxH(unsigned char)+0x40>)
 800de68:	4770      	bx	lr
 800de6a:	28fc      	cmp	r0, #252	; 0xfc
 800de6c:	d00b      	beq.n	800de86 <PixelType::ConvertTxH(unsigned char)+0x32>
 800de6e:	28fe      	cmp	r0, #254	; 0xfe
 800de70:	d00b      	beq.n	800de8a <PixelType::ConvertTxH(unsigned char)+0x36>
 800de72:	28f8      	cmp	r0, #248	; 0xf8
 800de74:	d10b      	bne.n	800de8e <PixelType::ConvertTxH(unsigned char)+0x3a>
 800de76:	4808      	ldr	r0, [pc, #32]	; (800de98 <PixelType::ConvertTxH(unsigned char)+0x44>)
 800de78:	4770      	bx	lr
 800de7a:	4808      	ldr	r0, [pc, #32]	; (800de9c <PixelType::ConvertTxH(unsigned char)+0x48>)
 800de7c:	4770      	bx	lr
 800de7e:	4808      	ldr	r0, [pc, #32]	; (800dea0 <PixelType::ConvertTxH(unsigned char)+0x4c>)
 800de80:	4770      	bx	lr
 800de82:	4808      	ldr	r0, [pc, #32]	; (800dea4 <PixelType::ConvertTxH(unsigned char)+0x50>)
 800de84:	4770      	bx	lr
 800de86:	4808      	ldr	r0, [pc, #32]	; (800dea8 <PixelType::ConvertTxH(unsigned char)+0x54>)
 800de88:	4770      	bx	lr
 800de8a:	4808      	ldr	r0, [pc, #32]	; (800deac <PixelType::ConvertTxH(unsigned char)+0x58>)
 800de8c:	4770      	bx	lr
 800de8e:	2000      	movs	r0, #0
 800de90:	4770      	bx	lr
 800de92:	bf00      	nop
 800de94:	3e200000 	cdpcc	0, 2, cr0, cr0, cr0, {0}
 800de98:	3f480000 	svccc	0x00480000
 800de9c:	3f200000 	svccc	0x00200000
 800dea0:	3ea00000 	cdpcc	0, 10, cr0, cr0, cr0, {0}
 800dea4:	3ef00000 	cdpcc	0, 15, cr0, cr0, cr0, {0}
 800dea8:	3f700000 	svccc	0x00700000
 800deac:	3f8c0000 	svccc	0x008c0000

0800deb0 <PixelType::ConvertTxH(float)>:
 800deb0:	b510      	push	{r4, lr}
 800deb2:	491d      	ldr	r1, [pc, #116]	; (800df28 <PixelType::ConvertTxH(float)+0x78>)
 800deb4:	4604      	mov	r4, r0
 800deb6:	f7f9 ffc1 	bl	8007e3c <__aeabi_fcmplt>
 800deba:	bb30      	cbnz	r0, 800df0a <PixelType::ConvertTxH(float)+0x5a>
 800debc:	4620      	mov	r0, r4
 800debe:	491b      	ldr	r1, [pc, #108]	; (800df2c <PixelType::ConvertTxH(float)+0x7c>)
 800dec0:	f7f9 ffbc 	bl	8007e3c <__aeabi_fcmplt>
 800dec4:	bb18      	cbnz	r0, 800df0e <PixelType::ConvertTxH(float)+0x5e>
 800dec6:	4620      	mov	r0, r4
 800dec8:	4919      	ldr	r1, [pc, #100]	; (800df30 <PixelType::ConvertTxH(float)+0x80>)
 800deca:	f7f9 ffb7 	bl	8007e3c <__aeabi_fcmplt>
 800dece:	bb00      	cbnz	r0, 800df12 <PixelType::ConvertTxH(float)+0x62>
 800ded0:	4620      	mov	r0, r4
 800ded2:	4918      	ldr	r1, [pc, #96]	; (800df34 <PixelType::ConvertTxH(float)+0x84>)
 800ded4:	f7f9 ffb2 	bl	8007e3c <__aeabi_fcmplt>
 800ded8:	b9e8      	cbnz	r0, 800df16 <PixelType::ConvertTxH(float)+0x66>
 800deda:	4620      	mov	r0, r4
 800dedc:	4916      	ldr	r1, [pc, #88]	; (800df38 <PixelType::ConvertTxH(float)+0x88>)
 800dede:	f7f9 ffad 	bl	8007e3c <__aeabi_fcmplt>
 800dee2:	b9d0      	cbnz	r0, 800df1a <PixelType::ConvertTxH(float)+0x6a>
 800dee4:	4620      	mov	r0, r4
 800dee6:	4915      	ldr	r1, [pc, #84]	; (800df3c <PixelType::ConvertTxH(float)+0x8c>)
 800dee8:	f7f9 ffa8 	bl	8007e3c <__aeabi_fcmplt>
 800deec:	b9b8      	cbnz	r0, 800df1e <PixelType::ConvertTxH(float)+0x6e>
 800deee:	4620      	mov	r0, r4
 800def0:	4913      	ldr	r1, [pc, #76]	; (800df40 <PixelType::ConvertTxH(float)+0x90>)
 800def2:	f7f9 ffa3 	bl	8007e3c <__aeabi_fcmplt>
 800def6:	b9a0      	cbnz	r0, 800df22 <PixelType::ConvertTxH(float)+0x72>
 800def8:	4620      	mov	r0, r4
 800defa:	4912      	ldr	r1, [pc, #72]	; (800df44 <PixelType::ConvertTxH(float)+0x94>)
 800defc:	f7f9 ff9e 	bl	8007e3c <__aeabi_fcmplt>
 800df00:	2800      	cmp	r0, #0
 800df02:	bf14      	ite	ne
 800df04:	20fe      	movne	r0, #254	; 0xfe
 800df06:	2000      	moveq	r0, #0
 800df08:	bd10      	pop	{r4, pc}
 800df0a:	2000      	movs	r0, #0
 800df0c:	e7fc      	b.n	800df08 <PixelType::ConvertTxH(float)+0x58>
 800df0e:	2080      	movs	r0, #128	; 0x80
 800df10:	e7fa      	b.n	800df08 <PixelType::ConvertTxH(float)+0x58>
 800df12:	20c0      	movs	r0, #192	; 0xc0
 800df14:	e7f8      	b.n	800df08 <PixelType::ConvertTxH(float)+0x58>
 800df16:	20e0      	movs	r0, #224	; 0xe0
 800df18:	e7f6      	b.n	800df08 <PixelType::ConvertTxH(float)+0x58>
 800df1a:	20f0      	movs	r0, #240	; 0xf0
 800df1c:	e7f4      	b.n	800df08 <PixelType::ConvertTxH(float)+0x58>
 800df1e:	20f8      	movs	r0, #248	; 0xf8
 800df20:	e7f2      	b.n	800df08 <PixelType::ConvertTxH(float)+0x58>
 800df22:	20fc      	movs	r0, #252	; 0xfc
 800df24:	e7f0      	b.n	800df08 <PixelType::ConvertTxH(float)+0x58>
 800df26:	bf00      	nop
 800df28:	3da00000 	stccc	0, cr0, [r0]
 800df2c:	3e700000 	cdpcc	0, 7, cr0, cr0, cr0, {0}
 800df30:	3ec80000 	cdpcc	0, 12, cr0, cr8, cr0, {0}
 800df34:	3f0c0000 	svccc	0x000c0000
 800df38:	3f340000 	svccc	0x00340000
 800df3c:	3f5c0000 	svccc	0x005c0000
 800df40:	3f820000 	svccc	0x00820000
 800df44:	3f960000 	svccc	0x00960000

0800df48 <WS28xx::Print()>:
 800df48:	b513      	push	{r0, r1, r4, lr}
 800df4a:	4604      	mov	r4, r0
 800df4c:	4819      	ldr	r0, [pc, #100]	; (800dfb4 <WS28xx::Print()+0x6c>)
 800df4e:	f7fb fa21 	bl	8009394 <printf>
 800df52:	6820      	ldr	r0, [r4, #0]
 800df54:	f7ff ff1a 	bl	800dd8c <PixelType::GetType(pixel::Type)>
 800df58:	6822      	ldr	r2, [r4, #0]
 800df5a:	4601      	mov	r1, r0
 800df5c:	4816      	ldr	r0, [pc, #88]	; (800dfb8 <WS28xx::Print()+0x70>)
 800df5e:	f7fb fa19 	bl	8009394 <printf>
 800df62:	6861      	ldr	r1, [r4, #4]
 800df64:	4815      	ldr	r0, [pc, #84]	; (800dfbc <WS28xx::Print()+0x74>)
 800df66:	f7fb fa15 	bl	8009394 <printf>
 800df6a:	7ca3      	ldrb	r3, [r4, #18]
 800df6c:	b1fb      	cbz	r3, 800dfae <WS28xx::Print()+0x66>
 800df6e:	68a0      	ldr	r0, [r4, #8]
 800df70:	f7ff ff64 	bl	800de3c <PixelType::GetMap(pixel::Map)>
 800df74:	68a2      	ldr	r2, [r4, #8]
 800df76:	4601      	mov	r1, r0
 800df78:	4811      	ldr	r0, [pc, #68]	; (800dfc0 <WS28xx::Print()+0x78>)
 800df7a:	f7fb fa0b 	bl	8009394 <printf>
 800df7e:	7c20      	ldrb	r0, [r4, #16]
 800df80:	f7ff ff68 	bl	800de54 <PixelType::ConvertTxH(unsigned char)>
 800df84:	f7fa f926 	bl	80081d4 <__aeabi_f2d>
 800df88:	460b      	mov	r3, r1
 800df8a:	7c21      	ldrb	r1, [r4, #16]
 800df8c:	4602      	mov	r2, r0
 800df8e:	9100      	str	r1, [sp, #0]
 800df90:	480c      	ldr	r0, [pc, #48]	; (800dfc4 <WS28xx::Print()+0x7c>)
 800df92:	f7fb f9ff 	bl	8009394 <printf>
 800df96:	7c60      	ldrb	r0, [r4, #17]
 800df98:	f7ff ff5c 	bl	800de54 <PixelType::ConvertTxH(unsigned char)>
 800df9c:	f7fa f91a 	bl	80081d4 <__aeabi_f2d>
 800dfa0:	460b      	mov	r3, r1
 800dfa2:	7c61      	ldrb	r1, [r4, #17]
 800dfa4:	4602      	mov	r2, r0
 800dfa6:	9100      	str	r1, [sp, #0]
 800dfa8:	4807      	ldr	r0, [pc, #28]	; (800dfc8 <WS28xx::Print()+0x80>)
 800dfaa:	f7fb f9f3 	bl	8009394 <printf>
 800dfae:	b002      	add	sp, #8
 800dfb0:	bd10      	pop	{r4, pc}
 800dfb2:	bf00      	nop
 800dfb4:	080170db 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, ip, sp, lr}
 800dfb8:	080170ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, ip, sp, lr}
 800dfbc:	08017101 	stmdaeq	r1, {r0, r8, ip, sp, lr}
 800dfc0:	08017110 	stmdaeq	r1, {r4, r8, ip, sp, lr}
 800dfc4:	08017124 	stmdaeq	r1, {r2, r5, r8, ip, sp, lr}
 800dfc8:	0801713c 	stmdaeq	r1, {r2, r3, r4, r5, r8, ip, sp, lr}

0800dfcc <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>:
 800dfcc:	b530      	push	{r4, r5, lr}
 800dfce:	7c84      	ldrb	r4, [r0, #18]
 800dfd0:	f89d c00c 	ldrb.w	ip, [sp, #12]
 800dfd4:	b994      	cbnz	r4, 800dffc <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x30>
 800dfd6:	6804      	ldr	r4, [r0, #0]
 800dfd8:	f1a4 0e0b 	sub.w	lr, r4, #11
 800dfdc:	f1be 0f01 	cmp.w	lr, #1
 800dfe0:	d93d      	bls.n	800e05e <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x92>
 800dfe2:	b9d4      	cbnz	r4, 800e01a <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x4e>
 800dfe4:	6944      	ldr	r4, [r0, #20]
 800dfe6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800dfea:	5462      	strb	r2, [r4, r1]
 800dfec:	6942      	ldr	r2, [r0, #20]
 800dfee:	440a      	add	r2, r1
 800dff0:	7053      	strb	r3, [r2, #1]
 800dff2:	6943      	ldr	r3, [r0, #20]
 800dff4:	440b      	add	r3, r1
 800dff6:	f883 c002 	strb.w	ip, [r3, #2]
 800dffa:	bd30      	pop	{r4, r5, pc}
 800dffc:	6884      	ldr	r4, [r0, #8]
 800dffe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800e002:	00c9      	lsls	r1, r1, #3
 800e004:	2c05      	cmp	r4, #5
 800e006:	f200 812d 	bhi.w	800e264 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x298>
 800e00a:	e8df f014 	tbh	[pc, r4, lsl #1]
 800e00e:	02ed012b 	rsceq	r0, sp, #-1073741814	; 0xc000000a
 800e012:	04140384 	ldreq	r0, [r4], #-900	; 0xfffffc7c
 800e016:	0202003b 	andeq	r0, r2, #59	; 0x3b
 800e01a:	ea6f 0e9c 	mvn.w	lr, ip, lsr #2
 800e01e:	ea6f 1413 	mvn.w	r4, r3, lsr #4
 800e022:	f082 05c0 	eor.w	r5, r2, #192	; 0xc0
 800e026:	f00e 0e30 	and.w	lr, lr, #48	; 0x30
 800e02a:	f004 040c 	and.w	r4, r4, #12
 800e02e:	ea4e 1e95 	orr.w	lr, lr, r5, lsr #6
 800e032:	ea4e 0e04 	orr.w	lr, lr, r4
 800e036:	6944      	ldr	r4, [r0, #20]
 800e038:	3101      	adds	r1, #1
 800e03a:	f06e 0e3f 	orn	lr, lr, #63	; 0x3f
 800e03e:	f804 e021 	strb.w	lr, [r4, r1, lsl #2]
 800e042:	6944      	ldr	r4, [r0, #20]
 800e044:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800e048:	f884 c001 	strb.w	ip, [r4, #1]
 800e04c:	6944      	ldr	r4, [r0, #20]
 800e04e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800e052:	70a3      	strb	r3, [r4, #2]
 800e054:	6943      	ldr	r3, [r0, #20]
 800e056:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800e05a:	70da      	strb	r2, [r3, #3]
 800e05c:	bd30      	pop	{r4, r5, pc}
 800e05e:	6944      	ldr	r4, [r0, #20]
 800e060:	7cc5      	ldrb	r5, [r0, #19]
 800e062:	3101      	adds	r1, #1
 800e064:	f804 5021 	strb.w	r5, [r4, r1, lsl #2]
 800e068:	6944      	ldr	r4, [r0, #20]
 800e06a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800e06e:	7062      	strb	r2, [r4, #1]
 800e070:	6942      	ldr	r2, [r0, #20]
 800e072:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800e076:	7093      	strb	r3, [r2, #2]
 800e078:	6943      	ldr	r3, [r0, #20]
 800e07a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800e07e:	f883 c003 	strb.w	ip, [r3, #3]
 800e082:	bd30      	pop	{r4, r5, pc}
 800e084:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800e088:	bf0c      	ite	eq
 800e08a:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800e08e:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800e092:	6945      	ldr	r5, [r0, #20]
 800e094:	1c4c      	adds	r4, r1, #1
 800e096:	f805 e004 	strb.w	lr, [r5, r4]
 800e09a:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800e09e:	bf0c      	ite	eq
 800e0a0:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800e0a4:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800e0a8:	6945      	ldr	r5, [r0, #20]
 800e0aa:	1c8c      	adds	r4, r1, #2
 800e0ac:	f805 e004 	strb.w	lr, [r5, r4]
 800e0b0:	f01c 0f20 	tst.w	ip, #32
 800e0b4:	bf0c      	ite	eq
 800e0b6:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800e0ba:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800e0be:	6945      	ldr	r5, [r0, #20]
 800e0c0:	1ccc      	adds	r4, r1, #3
 800e0c2:	f805 e004 	strb.w	lr, [r5, r4]
 800e0c6:	f01c 0f10 	tst.w	ip, #16
 800e0ca:	bf0c      	ite	eq
 800e0cc:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800e0d0:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800e0d4:	6945      	ldr	r5, [r0, #20]
 800e0d6:	1d0c      	adds	r4, r1, #4
 800e0d8:	f01c 0f08 	tst.w	ip, #8
 800e0dc:	f805 e004 	strb.w	lr, [r5, r4]
 800e0e0:	bf0c      	ite	eq
 800e0e2:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800e0e6:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800e0ea:	6945      	ldr	r5, [r0, #20]
 800e0ec:	1d4c      	adds	r4, r1, #5
 800e0ee:	f01c 0f04 	tst.w	ip, #4
 800e0f2:	f805 e004 	strb.w	lr, [r5, r4]
 800e0f6:	bf0c      	ite	eq
 800e0f8:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800e0fc:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800e100:	6945      	ldr	r5, [r0, #20]
 800e102:	1d8c      	adds	r4, r1, #6
 800e104:	f01c 0f02 	tst.w	ip, #2
 800e108:	f805 e004 	strb.w	lr, [r5, r4]
 800e10c:	bf0c      	ite	eq
 800e10e:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800e112:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800e116:	6945      	ldr	r5, [r0, #20]
 800e118:	1dcc      	adds	r4, r1, #7
 800e11a:	f01c 0f01 	tst.w	ip, #1
 800e11e:	f805 e004 	strb.w	lr, [r5, r4]
 800e122:	bf14      	ite	ne
 800e124:	f890 c011 	ldrbne.w	ip, [r0, #17]
 800e128:	f890 c010 	ldrbeq.w	ip, [r0, #16]
 800e12c:	6945      	ldr	r5, [r0, #20]
 800e12e:	f101 0408 	add.w	r4, r1, #8
 800e132:	f805 c004 	strb.w	ip, [r5, r4]
 800e136:	0615      	lsls	r5, r2, #24
 800e138:	bf54      	ite	pl
 800e13a:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800e13e:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800e142:	6945      	ldr	r5, [r0, #20]
 800e144:	f101 0409 	add.w	r4, r1, #9
 800e148:	f805 c004 	strb.w	ip, [r5, r4]
 800e14c:	0655      	lsls	r5, r2, #25
 800e14e:	bf54      	ite	pl
 800e150:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800e154:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800e158:	6945      	ldr	r5, [r0, #20]
 800e15a:	f101 040a 	add.w	r4, r1, #10
 800e15e:	f805 c004 	strb.w	ip, [r5, r4]
 800e162:	0695      	lsls	r5, r2, #26
 800e164:	bf54      	ite	pl
 800e166:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800e16a:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800e16e:	6945      	ldr	r5, [r0, #20]
 800e170:	f101 040b 	add.w	r4, r1, #11
 800e174:	f805 c004 	strb.w	ip, [r5, r4]
 800e178:	06d5      	lsls	r5, r2, #27
 800e17a:	bf54      	ite	pl
 800e17c:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800e180:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800e184:	6945      	ldr	r5, [r0, #20]
 800e186:	f101 040c 	add.w	r4, r1, #12
 800e18a:	f805 c004 	strb.w	ip, [r5, r4]
 800e18e:	0715      	lsls	r5, r2, #28
 800e190:	bf54      	ite	pl
 800e192:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800e196:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800e19a:	6945      	ldr	r5, [r0, #20]
 800e19c:	f101 040d 	add.w	r4, r1, #13
 800e1a0:	f805 c004 	strb.w	ip, [r5, r4]
 800e1a4:	0755      	lsls	r5, r2, #29
 800e1a6:	bf54      	ite	pl
 800e1a8:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800e1ac:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800e1b0:	6945      	ldr	r5, [r0, #20]
 800e1b2:	f101 040e 	add.w	r4, r1, #14
 800e1b6:	f805 c004 	strb.w	ip, [r5, r4]
 800e1ba:	0795      	lsls	r5, r2, #30
 800e1bc:	bf58      	it	pl
 800e1be:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800e1c2:	6945      	ldr	r5, [r0, #20]
 800e1c4:	bf48      	it	mi
 800e1c6:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800e1ca:	f101 040f 	add.w	r4, r1, #15
 800e1ce:	f805 c004 	strb.w	ip, [r5, r4]
 800e1d2:	07d5      	lsls	r5, r2, #31
 800e1d4:	bf4c      	ite	mi
 800e1d6:	7c45      	ldrbmi	r5, [r0, #17]
 800e1d8:	7c05      	ldrbpl	r5, [r0, #16]
 800e1da:	6942      	ldr	r2, [r0, #20]
 800e1dc:	f101 0410 	add.w	r4, r1, #16
 800e1e0:	5515      	strb	r5, [r2, r4]
 800e1e2:	061c      	lsls	r4, r3, #24
 800e1e4:	bf54      	ite	pl
 800e1e6:	7c05      	ldrbpl	r5, [r0, #16]
 800e1e8:	7c45      	ldrbmi	r5, [r0, #17]
 800e1ea:	6944      	ldr	r4, [r0, #20]
 800e1ec:	f101 0211 	add.w	r2, r1, #17
 800e1f0:	54a5      	strb	r5, [r4, r2]
 800e1f2:	065d      	lsls	r5, r3, #25
 800e1f4:	bf54      	ite	pl
 800e1f6:	7c05      	ldrbpl	r5, [r0, #16]
 800e1f8:	7c45      	ldrbmi	r5, [r0, #17]
 800e1fa:	6944      	ldr	r4, [r0, #20]
 800e1fc:	f101 0212 	add.w	r2, r1, #18
 800e200:	54a5      	strb	r5, [r4, r2]
 800e202:	069c      	lsls	r4, r3, #26
 800e204:	bf54      	ite	pl
 800e206:	7c05      	ldrbpl	r5, [r0, #16]
 800e208:	7c45      	ldrbmi	r5, [r0, #17]
 800e20a:	6944      	ldr	r4, [r0, #20]
 800e20c:	f101 0213 	add.w	r2, r1, #19
 800e210:	54a5      	strb	r5, [r4, r2]
 800e212:	06dd      	lsls	r5, r3, #27
 800e214:	bf54      	ite	pl
 800e216:	7c05      	ldrbpl	r5, [r0, #16]
 800e218:	7c45      	ldrbmi	r5, [r0, #17]
 800e21a:	6944      	ldr	r4, [r0, #20]
 800e21c:	f101 0214 	add.w	r2, r1, #20
 800e220:	54a5      	strb	r5, [r4, r2]
 800e222:	071c      	lsls	r4, r3, #28
 800e224:	bf54      	ite	pl
 800e226:	7c05      	ldrbpl	r5, [r0, #16]
 800e228:	7c45      	ldrbmi	r5, [r0, #17]
 800e22a:	6944      	ldr	r4, [r0, #20]
 800e22c:	f101 0215 	add.w	r2, r1, #21
 800e230:	54a5      	strb	r5, [r4, r2]
 800e232:	075d      	lsls	r5, r3, #29
 800e234:	bf54      	ite	pl
 800e236:	7c05      	ldrbpl	r5, [r0, #16]
 800e238:	7c45      	ldrbmi	r5, [r0, #17]
 800e23a:	6944      	ldr	r4, [r0, #20]
 800e23c:	f101 0216 	add.w	r2, r1, #22
 800e240:	54a5      	strb	r5, [r4, r2]
 800e242:	079c      	lsls	r4, r3, #30
 800e244:	bf54      	ite	pl
 800e246:	7c05      	ldrbpl	r5, [r0, #16]
 800e248:	7c45      	ldrbmi	r5, [r0, #17]
 800e24a:	6944      	ldr	r4, [r0, #20]
 800e24c:	f101 0217 	add.w	r2, r1, #23
 800e250:	54a5      	strb	r5, [r4, r2]
 800e252:	3118      	adds	r1, #24
 800e254:	f013 0f01 	tst.w	r3, #1
 800e258:	f000 80d9 	beq.w	800e40e <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x442>
 800e25c:	7c42      	ldrb	r2, [r0, #17]
 800e25e:	6943      	ldr	r3, [r0, #20]
 800e260:	545a      	strb	r2, [r3, r1]
 800e262:	bd30      	pop	{r4, r5, pc}
 800e264:	0615      	lsls	r5, r2, #24
 800e266:	bf54      	ite	pl
 800e268:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e26c:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e270:	6945      	ldr	r5, [r0, #20]
 800e272:	1c4c      	adds	r4, r1, #1
 800e274:	f805 e004 	strb.w	lr, [r5, r4]
 800e278:	0655      	lsls	r5, r2, #25
 800e27a:	bf54      	ite	pl
 800e27c:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e280:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e284:	6945      	ldr	r5, [r0, #20]
 800e286:	1c8c      	adds	r4, r1, #2
 800e288:	f805 e004 	strb.w	lr, [r5, r4]
 800e28c:	0695      	lsls	r5, r2, #26
 800e28e:	bf54      	ite	pl
 800e290:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e294:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e298:	6945      	ldr	r5, [r0, #20]
 800e29a:	1ccc      	adds	r4, r1, #3
 800e29c:	f805 e004 	strb.w	lr, [r5, r4]
 800e2a0:	06d5      	lsls	r5, r2, #27
 800e2a2:	bf54      	ite	pl
 800e2a4:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e2a8:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e2ac:	6945      	ldr	r5, [r0, #20]
 800e2ae:	1d0c      	adds	r4, r1, #4
 800e2b0:	f805 e004 	strb.w	lr, [r5, r4]
 800e2b4:	0715      	lsls	r5, r2, #28
 800e2b6:	bf54      	ite	pl
 800e2b8:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e2bc:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e2c0:	6945      	ldr	r5, [r0, #20]
 800e2c2:	1d4c      	adds	r4, r1, #5
 800e2c4:	f805 e004 	strb.w	lr, [r5, r4]
 800e2c8:	0755      	lsls	r5, r2, #29
 800e2ca:	bf54      	ite	pl
 800e2cc:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e2d0:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e2d4:	6945      	ldr	r5, [r0, #20]
 800e2d6:	1d8c      	adds	r4, r1, #6
 800e2d8:	f805 e004 	strb.w	lr, [r5, r4]
 800e2dc:	0795      	lsls	r5, r2, #30
 800e2de:	bf58      	it	pl
 800e2e0:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e2e4:	6945      	ldr	r5, [r0, #20]
 800e2e6:	bf48      	it	mi
 800e2e8:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e2ec:	1dcc      	adds	r4, r1, #7
 800e2ee:	f805 e004 	strb.w	lr, [r5, r4]
 800e2f2:	07d5      	lsls	r5, r2, #31
 800e2f4:	bf4c      	ite	mi
 800e2f6:	7c45      	ldrbmi	r5, [r0, #17]
 800e2f8:	7c05      	ldrbpl	r5, [r0, #16]
 800e2fa:	6942      	ldr	r2, [r0, #20]
 800e2fc:	f101 0408 	add.w	r4, r1, #8
 800e300:	5515      	strb	r5, [r2, r4]
 800e302:	061c      	lsls	r4, r3, #24
 800e304:	bf54      	ite	pl
 800e306:	7c05      	ldrbpl	r5, [r0, #16]
 800e308:	7c45      	ldrbmi	r5, [r0, #17]
 800e30a:	6944      	ldr	r4, [r0, #20]
 800e30c:	f101 0209 	add.w	r2, r1, #9
 800e310:	54a5      	strb	r5, [r4, r2]
 800e312:	065d      	lsls	r5, r3, #25
 800e314:	bf54      	ite	pl
 800e316:	7c05      	ldrbpl	r5, [r0, #16]
 800e318:	7c45      	ldrbmi	r5, [r0, #17]
 800e31a:	6944      	ldr	r4, [r0, #20]
 800e31c:	f101 020a 	add.w	r2, r1, #10
 800e320:	54a5      	strb	r5, [r4, r2]
 800e322:	069c      	lsls	r4, r3, #26
 800e324:	bf54      	ite	pl
 800e326:	7c05      	ldrbpl	r5, [r0, #16]
 800e328:	7c45      	ldrbmi	r5, [r0, #17]
 800e32a:	6944      	ldr	r4, [r0, #20]
 800e32c:	f101 020b 	add.w	r2, r1, #11
 800e330:	54a5      	strb	r5, [r4, r2]
 800e332:	06dd      	lsls	r5, r3, #27
 800e334:	bf54      	ite	pl
 800e336:	7c05      	ldrbpl	r5, [r0, #16]
 800e338:	7c45      	ldrbmi	r5, [r0, #17]
 800e33a:	6944      	ldr	r4, [r0, #20]
 800e33c:	f101 020c 	add.w	r2, r1, #12
 800e340:	54a5      	strb	r5, [r4, r2]
 800e342:	071c      	lsls	r4, r3, #28
 800e344:	bf54      	ite	pl
 800e346:	7c05      	ldrbpl	r5, [r0, #16]
 800e348:	7c45      	ldrbmi	r5, [r0, #17]
 800e34a:	6944      	ldr	r4, [r0, #20]
 800e34c:	f101 020d 	add.w	r2, r1, #13
 800e350:	54a5      	strb	r5, [r4, r2]
 800e352:	075d      	lsls	r5, r3, #29
 800e354:	bf54      	ite	pl
 800e356:	7c05      	ldrbpl	r5, [r0, #16]
 800e358:	7c45      	ldrbmi	r5, [r0, #17]
 800e35a:	6944      	ldr	r4, [r0, #20]
 800e35c:	f101 020e 	add.w	r2, r1, #14
 800e360:	54a5      	strb	r5, [r4, r2]
 800e362:	079c      	lsls	r4, r3, #30
 800e364:	bf58      	it	pl
 800e366:	7c05      	ldrbpl	r5, [r0, #16]
 800e368:	6944      	ldr	r4, [r0, #20]
 800e36a:	bf48      	it	mi
 800e36c:	7c45      	ldrbmi	r5, [r0, #17]
 800e36e:	f101 020f 	add.w	r2, r1, #15
 800e372:	54a5      	strb	r5, [r4, r2]
 800e374:	07db      	lsls	r3, r3, #31
 800e376:	bf4c      	ite	mi
 800e378:	7c44      	ldrbmi	r4, [r0, #17]
 800e37a:	7c04      	ldrbpl	r4, [r0, #16]
 800e37c:	6943      	ldr	r3, [r0, #20]
 800e37e:	f101 0210 	add.w	r2, r1, #16
 800e382:	549c      	strb	r4, [r3, r2]
 800e384:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800e388:	bf0c      	ite	eq
 800e38a:	7c04      	ldrbeq	r4, [r0, #16]
 800e38c:	7c44      	ldrbne	r4, [r0, #17]
 800e38e:	6942      	ldr	r2, [r0, #20]
 800e390:	f101 0311 	add.w	r3, r1, #17
 800e394:	54d4      	strb	r4, [r2, r3]
 800e396:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800e39a:	bf0c      	ite	eq
 800e39c:	7c04      	ldrbeq	r4, [r0, #16]
 800e39e:	7c44      	ldrbne	r4, [r0, #17]
 800e3a0:	6942      	ldr	r2, [r0, #20]
 800e3a2:	f101 0312 	add.w	r3, r1, #18
 800e3a6:	54d4      	strb	r4, [r2, r3]
 800e3a8:	f01c 0f20 	tst.w	ip, #32
 800e3ac:	bf0c      	ite	eq
 800e3ae:	7c04      	ldrbeq	r4, [r0, #16]
 800e3b0:	7c44      	ldrbne	r4, [r0, #17]
 800e3b2:	6942      	ldr	r2, [r0, #20]
 800e3b4:	f101 0313 	add.w	r3, r1, #19
 800e3b8:	54d4      	strb	r4, [r2, r3]
 800e3ba:	f01c 0f10 	tst.w	ip, #16
 800e3be:	bf0c      	ite	eq
 800e3c0:	7c04      	ldrbeq	r4, [r0, #16]
 800e3c2:	7c44      	ldrbne	r4, [r0, #17]
 800e3c4:	6942      	ldr	r2, [r0, #20]
 800e3c6:	f101 0314 	add.w	r3, r1, #20
 800e3ca:	54d4      	strb	r4, [r2, r3]
 800e3cc:	f01c 0f08 	tst.w	ip, #8
 800e3d0:	bf0c      	ite	eq
 800e3d2:	7c04      	ldrbeq	r4, [r0, #16]
 800e3d4:	7c44      	ldrbne	r4, [r0, #17]
 800e3d6:	6942      	ldr	r2, [r0, #20]
 800e3d8:	f101 0315 	add.w	r3, r1, #21
 800e3dc:	54d4      	strb	r4, [r2, r3]
 800e3de:	f01c 0f04 	tst.w	ip, #4
 800e3e2:	bf0c      	ite	eq
 800e3e4:	7c04      	ldrbeq	r4, [r0, #16]
 800e3e6:	7c44      	ldrbne	r4, [r0, #17]
 800e3e8:	6942      	ldr	r2, [r0, #20]
 800e3ea:	f101 0316 	add.w	r3, r1, #22
 800e3ee:	54d4      	strb	r4, [r2, r3]
 800e3f0:	f01c 0f02 	tst.w	ip, #2
 800e3f4:	bf0c      	ite	eq
 800e3f6:	7c04      	ldrbeq	r4, [r0, #16]
 800e3f8:	7c44      	ldrbne	r4, [r0, #17]
 800e3fa:	6942      	ldr	r2, [r0, #20]
 800e3fc:	f101 0317 	add.w	r3, r1, #23
 800e400:	f01c 0f01 	tst.w	ip, #1
 800e404:	54d4      	strb	r4, [r2, r3]
 800e406:	f101 0118 	add.w	r1, r1, #24
 800e40a:	f47f af27 	bne.w	800e25c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x290>
 800e40e:	7c02      	ldrb	r2, [r0, #16]
 800e410:	e725      	b.n	800e25e <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x292>
 800e412:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800e416:	bf0c      	ite	eq
 800e418:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800e41c:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800e420:	6945      	ldr	r5, [r0, #20]
 800e422:	1c4c      	adds	r4, r1, #1
 800e424:	f805 e004 	strb.w	lr, [r5, r4]
 800e428:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800e42c:	bf0c      	ite	eq
 800e42e:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800e432:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800e436:	6945      	ldr	r5, [r0, #20]
 800e438:	1c8c      	adds	r4, r1, #2
 800e43a:	f805 e004 	strb.w	lr, [r5, r4]
 800e43e:	f01c 0f20 	tst.w	ip, #32
 800e442:	bf0c      	ite	eq
 800e444:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800e448:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800e44c:	6945      	ldr	r5, [r0, #20]
 800e44e:	1ccc      	adds	r4, r1, #3
 800e450:	f805 e004 	strb.w	lr, [r5, r4]
 800e454:	f01c 0f10 	tst.w	ip, #16
 800e458:	bf0c      	ite	eq
 800e45a:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800e45e:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800e462:	6945      	ldr	r5, [r0, #20]
 800e464:	1d0c      	adds	r4, r1, #4
 800e466:	f01c 0f08 	tst.w	ip, #8
 800e46a:	f805 e004 	strb.w	lr, [r5, r4]
 800e46e:	bf0c      	ite	eq
 800e470:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800e474:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800e478:	6945      	ldr	r5, [r0, #20]
 800e47a:	1d4c      	adds	r4, r1, #5
 800e47c:	f01c 0f04 	tst.w	ip, #4
 800e480:	f805 e004 	strb.w	lr, [r5, r4]
 800e484:	bf0c      	ite	eq
 800e486:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800e48a:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800e48e:	6945      	ldr	r5, [r0, #20]
 800e490:	1d8c      	adds	r4, r1, #6
 800e492:	f01c 0f02 	tst.w	ip, #2
 800e496:	f805 e004 	strb.w	lr, [r5, r4]
 800e49a:	bf0c      	ite	eq
 800e49c:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800e4a0:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800e4a4:	6945      	ldr	r5, [r0, #20]
 800e4a6:	1dcc      	adds	r4, r1, #7
 800e4a8:	f01c 0f01 	tst.w	ip, #1
 800e4ac:	f805 e004 	strb.w	lr, [r5, r4]
 800e4b0:	bf14      	ite	ne
 800e4b2:	f890 c011 	ldrbne.w	ip, [r0, #17]
 800e4b6:	f890 c010 	ldrbeq.w	ip, [r0, #16]
 800e4ba:	6945      	ldr	r5, [r0, #20]
 800e4bc:	f101 0408 	add.w	r4, r1, #8
 800e4c0:	f805 c004 	strb.w	ip, [r5, r4]
 800e4c4:	061d      	lsls	r5, r3, #24
 800e4c6:	bf54      	ite	pl
 800e4c8:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800e4cc:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800e4d0:	6945      	ldr	r5, [r0, #20]
 800e4d2:	f101 0409 	add.w	r4, r1, #9
 800e4d6:	f805 c004 	strb.w	ip, [r5, r4]
 800e4da:	065d      	lsls	r5, r3, #25
 800e4dc:	bf54      	ite	pl
 800e4de:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800e4e2:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800e4e6:	6945      	ldr	r5, [r0, #20]
 800e4e8:	f101 040a 	add.w	r4, r1, #10
 800e4ec:	f805 c004 	strb.w	ip, [r5, r4]
 800e4f0:	069d      	lsls	r5, r3, #26
 800e4f2:	bf54      	ite	pl
 800e4f4:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800e4f8:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800e4fc:	6945      	ldr	r5, [r0, #20]
 800e4fe:	f101 040b 	add.w	r4, r1, #11
 800e502:	f805 c004 	strb.w	ip, [r5, r4]
 800e506:	06dd      	lsls	r5, r3, #27
 800e508:	bf54      	ite	pl
 800e50a:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800e50e:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800e512:	6945      	ldr	r5, [r0, #20]
 800e514:	f101 040c 	add.w	r4, r1, #12
 800e518:	f805 c004 	strb.w	ip, [r5, r4]
 800e51c:	071d      	lsls	r5, r3, #28
 800e51e:	bf54      	ite	pl
 800e520:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800e524:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800e528:	6945      	ldr	r5, [r0, #20]
 800e52a:	f101 040d 	add.w	r4, r1, #13
 800e52e:	f805 c004 	strb.w	ip, [r5, r4]
 800e532:	075d      	lsls	r5, r3, #29
 800e534:	bf54      	ite	pl
 800e536:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800e53a:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800e53e:	6945      	ldr	r5, [r0, #20]
 800e540:	f101 040e 	add.w	r4, r1, #14
 800e544:	f805 c004 	strb.w	ip, [r5, r4]
 800e548:	079d      	lsls	r5, r3, #30
 800e54a:	bf58      	it	pl
 800e54c:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800e550:	6945      	ldr	r5, [r0, #20]
 800e552:	bf48      	it	mi
 800e554:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800e558:	f101 040f 	add.w	r4, r1, #15
 800e55c:	f805 c004 	strb.w	ip, [r5, r4]
 800e560:	07dd      	lsls	r5, r3, #31
 800e562:	bf4c      	ite	mi
 800e564:	7c45      	ldrbmi	r5, [r0, #17]
 800e566:	7c05      	ldrbpl	r5, [r0, #16]
 800e568:	6943      	ldr	r3, [r0, #20]
 800e56a:	f101 0410 	add.w	r4, r1, #16
 800e56e:	551d      	strb	r5, [r3, r4]
 800e570:	0614      	lsls	r4, r2, #24
 800e572:	bf54      	ite	pl
 800e574:	7c05      	ldrbpl	r5, [r0, #16]
 800e576:	7c45      	ldrbmi	r5, [r0, #17]
 800e578:	6944      	ldr	r4, [r0, #20]
 800e57a:	f101 0311 	add.w	r3, r1, #17
 800e57e:	54e5      	strb	r5, [r4, r3]
 800e580:	0655      	lsls	r5, r2, #25
 800e582:	bf54      	ite	pl
 800e584:	7c05      	ldrbpl	r5, [r0, #16]
 800e586:	7c45      	ldrbmi	r5, [r0, #17]
 800e588:	6944      	ldr	r4, [r0, #20]
 800e58a:	f101 0312 	add.w	r3, r1, #18
 800e58e:	54e5      	strb	r5, [r4, r3]
 800e590:	0694      	lsls	r4, r2, #26
 800e592:	bf54      	ite	pl
 800e594:	7c05      	ldrbpl	r5, [r0, #16]
 800e596:	7c45      	ldrbmi	r5, [r0, #17]
 800e598:	6944      	ldr	r4, [r0, #20]
 800e59a:	f101 0313 	add.w	r3, r1, #19
 800e59e:	54e5      	strb	r5, [r4, r3]
 800e5a0:	06d5      	lsls	r5, r2, #27
 800e5a2:	bf54      	ite	pl
 800e5a4:	7c05      	ldrbpl	r5, [r0, #16]
 800e5a6:	7c45      	ldrbmi	r5, [r0, #17]
 800e5a8:	6944      	ldr	r4, [r0, #20]
 800e5aa:	f101 0314 	add.w	r3, r1, #20
 800e5ae:	54e5      	strb	r5, [r4, r3]
 800e5b0:	0714      	lsls	r4, r2, #28
 800e5b2:	bf54      	ite	pl
 800e5b4:	7c05      	ldrbpl	r5, [r0, #16]
 800e5b6:	7c45      	ldrbmi	r5, [r0, #17]
 800e5b8:	6944      	ldr	r4, [r0, #20]
 800e5ba:	f101 0315 	add.w	r3, r1, #21
 800e5be:	54e5      	strb	r5, [r4, r3]
 800e5c0:	0755      	lsls	r5, r2, #29
 800e5c2:	bf54      	ite	pl
 800e5c4:	7c05      	ldrbpl	r5, [r0, #16]
 800e5c6:	7c45      	ldrbmi	r5, [r0, #17]
 800e5c8:	6944      	ldr	r4, [r0, #20]
 800e5ca:	f101 0316 	add.w	r3, r1, #22
 800e5ce:	54e5      	strb	r5, [r4, r3]
 800e5d0:	0794      	lsls	r4, r2, #30
 800e5d2:	bf54      	ite	pl
 800e5d4:	7c05      	ldrbpl	r5, [r0, #16]
 800e5d6:	7c45      	ldrbmi	r5, [r0, #17]
 800e5d8:	6944      	ldr	r4, [r0, #20]
 800e5da:	f101 0317 	add.w	r3, r1, #23
 800e5de:	54e5      	strb	r5, [r4, r3]
 800e5e0:	3118      	adds	r1, #24
 800e5e2:	f012 0f01 	tst.w	r2, #1
 800e5e6:	e637      	b.n	800e258 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x28c>
 800e5e8:	0615      	lsls	r5, r2, #24
 800e5ea:	bf54      	ite	pl
 800e5ec:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e5f0:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e5f4:	6945      	ldr	r5, [r0, #20]
 800e5f6:	1c4c      	adds	r4, r1, #1
 800e5f8:	f805 e004 	strb.w	lr, [r5, r4]
 800e5fc:	0655      	lsls	r5, r2, #25
 800e5fe:	bf54      	ite	pl
 800e600:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e604:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e608:	6945      	ldr	r5, [r0, #20]
 800e60a:	1c8c      	adds	r4, r1, #2
 800e60c:	f805 e004 	strb.w	lr, [r5, r4]
 800e610:	0695      	lsls	r5, r2, #26
 800e612:	bf54      	ite	pl
 800e614:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e618:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e61c:	6945      	ldr	r5, [r0, #20]
 800e61e:	1ccc      	adds	r4, r1, #3
 800e620:	f805 e004 	strb.w	lr, [r5, r4]
 800e624:	06d5      	lsls	r5, r2, #27
 800e626:	bf54      	ite	pl
 800e628:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e62c:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e630:	6945      	ldr	r5, [r0, #20]
 800e632:	1d0c      	adds	r4, r1, #4
 800e634:	f805 e004 	strb.w	lr, [r5, r4]
 800e638:	0715      	lsls	r5, r2, #28
 800e63a:	bf54      	ite	pl
 800e63c:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e640:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e644:	6945      	ldr	r5, [r0, #20]
 800e646:	1d4c      	adds	r4, r1, #5
 800e648:	f805 e004 	strb.w	lr, [r5, r4]
 800e64c:	0755      	lsls	r5, r2, #29
 800e64e:	bf54      	ite	pl
 800e650:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e654:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e658:	6945      	ldr	r5, [r0, #20]
 800e65a:	1d8c      	adds	r4, r1, #6
 800e65c:	f805 e004 	strb.w	lr, [r5, r4]
 800e660:	0795      	lsls	r5, r2, #30
 800e662:	bf58      	it	pl
 800e664:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e668:	6945      	ldr	r5, [r0, #20]
 800e66a:	bf48      	it	mi
 800e66c:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e670:	1dcc      	adds	r4, r1, #7
 800e672:	f805 e004 	strb.w	lr, [r5, r4]
 800e676:	07d2      	lsls	r2, r2, #31
 800e678:	bf4c      	ite	mi
 800e67a:	7c45      	ldrbmi	r5, [r0, #17]
 800e67c:	7c05      	ldrbpl	r5, [r0, #16]
 800e67e:	6942      	ldr	r2, [r0, #20]
 800e680:	f101 0408 	add.w	r4, r1, #8
 800e684:	5515      	strb	r5, [r2, r4]
 800e686:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800e68a:	bf0c      	ite	eq
 800e68c:	7c05      	ldrbeq	r5, [r0, #16]
 800e68e:	7c45      	ldrbne	r5, [r0, #17]
 800e690:	6944      	ldr	r4, [r0, #20]
 800e692:	f101 0209 	add.w	r2, r1, #9
 800e696:	54a5      	strb	r5, [r4, r2]
 800e698:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800e69c:	bf0c      	ite	eq
 800e69e:	7c05      	ldrbeq	r5, [r0, #16]
 800e6a0:	7c45      	ldrbne	r5, [r0, #17]
 800e6a2:	6944      	ldr	r4, [r0, #20]
 800e6a4:	f101 020a 	add.w	r2, r1, #10
 800e6a8:	54a5      	strb	r5, [r4, r2]
 800e6aa:	f01c 0f20 	tst.w	ip, #32
 800e6ae:	bf0c      	ite	eq
 800e6b0:	7c05      	ldrbeq	r5, [r0, #16]
 800e6b2:	7c45      	ldrbne	r5, [r0, #17]
 800e6b4:	6944      	ldr	r4, [r0, #20]
 800e6b6:	f101 020b 	add.w	r2, r1, #11
 800e6ba:	54a5      	strb	r5, [r4, r2]
 800e6bc:	f01c 0f10 	tst.w	ip, #16
 800e6c0:	bf0c      	ite	eq
 800e6c2:	7c05      	ldrbeq	r5, [r0, #16]
 800e6c4:	7c45      	ldrbne	r5, [r0, #17]
 800e6c6:	6944      	ldr	r4, [r0, #20]
 800e6c8:	f101 020c 	add.w	r2, r1, #12
 800e6cc:	54a5      	strb	r5, [r4, r2]
 800e6ce:	f01c 0f08 	tst.w	ip, #8
 800e6d2:	bf0c      	ite	eq
 800e6d4:	7c05      	ldrbeq	r5, [r0, #16]
 800e6d6:	7c45      	ldrbne	r5, [r0, #17]
 800e6d8:	6944      	ldr	r4, [r0, #20]
 800e6da:	f101 020d 	add.w	r2, r1, #13
 800e6de:	54a5      	strb	r5, [r4, r2]
 800e6e0:	f01c 0f04 	tst.w	ip, #4
 800e6e4:	bf0c      	ite	eq
 800e6e6:	7c05      	ldrbeq	r5, [r0, #16]
 800e6e8:	7c45      	ldrbne	r5, [r0, #17]
 800e6ea:	6944      	ldr	r4, [r0, #20]
 800e6ec:	f101 020e 	add.w	r2, r1, #14
 800e6f0:	54a5      	strb	r5, [r4, r2]
 800e6f2:	f01c 0f02 	tst.w	ip, #2
 800e6f6:	bf0c      	ite	eq
 800e6f8:	7c05      	ldrbeq	r5, [r0, #16]
 800e6fa:	7c45      	ldrbne	r5, [r0, #17]
 800e6fc:	6944      	ldr	r4, [r0, #20]
 800e6fe:	f101 020f 	add.w	r2, r1, #15
 800e702:	54a5      	strb	r5, [r4, r2]
 800e704:	f01c 0f01 	tst.w	ip, #1
 800e708:	bf14      	ite	ne
 800e70a:	7c45      	ldrbne	r5, [r0, #17]
 800e70c:	7c05      	ldrbeq	r5, [r0, #16]
 800e70e:	6944      	ldr	r4, [r0, #20]
 800e710:	f101 0210 	add.w	r2, r1, #16
 800e714:	e564      	b.n	800e1e0 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x214>
 800e716:	061d      	lsls	r5, r3, #24
 800e718:	bf54      	ite	pl
 800e71a:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e71e:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e722:	6945      	ldr	r5, [r0, #20]
 800e724:	1c4c      	adds	r4, r1, #1
 800e726:	f805 e004 	strb.w	lr, [r5, r4]
 800e72a:	065d      	lsls	r5, r3, #25
 800e72c:	bf54      	ite	pl
 800e72e:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e732:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e736:	6945      	ldr	r5, [r0, #20]
 800e738:	1c8c      	adds	r4, r1, #2
 800e73a:	f805 e004 	strb.w	lr, [r5, r4]
 800e73e:	069d      	lsls	r5, r3, #26
 800e740:	bf54      	ite	pl
 800e742:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e746:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e74a:	6945      	ldr	r5, [r0, #20]
 800e74c:	1ccc      	adds	r4, r1, #3
 800e74e:	f805 e004 	strb.w	lr, [r5, r4]
 800e752:	06dd      	lsls	r5, r3, #27
 800e754:	bf54      	ite	pl
 800e756:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e75a:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e75e:	6945      	ldr	r5, [r0, #20]
 800e760:	1d0c      	adds	r4, r1, #4
 800e762:	f805 e004 	strb.w	lr, [r5, r4]
 800e766:	071d      	lsls	r5, r3, #28
 800e768:	bf54      	ite	pl
 800e76a:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e76e:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e772:	6945      	ldr	r5, [r0, #20]
 800e774:	1d4c      	adds	r4, r1, #5
 800e776:	f805 e004 	strb.w	lr, [r5, r4]
 800e77a:	075d      	lsls	r5, r3, #29
 800e77c:	bf54      	ite	pl
 800e77e:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e782:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e786:	6945      	ldr	r5, [r0, #20]
 800e788:	1d8c      	adds	r4, r1, #6
 800e78a:	f805 e004 	strb.w	lr, [r5, r4]
 800e78e:	079d      	lsls	r5, r3, #30
 800e790:	bf58      	it	pl
 800e792:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e796:	6945      	ldr	r5, [r0, #20]
 800e798:	bf48      	it	mi
 800e79a:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e79e:	1dcc      	adds	r4, r1, #7
 800e7a0:	f805 e004 	strb.w	lr, [r5, r4]
 800e7a4:	07dd      	lsls	r5, r3, #31
 800e7a6:	bf4c      	ite	mi
 800e7a8:	7c45      	ldrbmi	r5, [r0, #17]
 800e7aa:	7c05      	ldrbpl	r5, [r0, #16]
 800e7ac:	6943      	ldr	r3, [r0, #20]
 800e7ae:	f101 0408 	add.w	r4, r1, #8
 800e7b2:	551d      	strb	r5, [r3, r4]
 800e7b4:	0614      	lsls	r4, r2, #24
 800e7b6:	bf54      	ite	pl
 800e7b8:	7c05      	ldrbpl	r5, [r0, #16]
 800e7ba:	7c45      	ldrbmi	r5, [r0, #17]
 800e7bc:	6944      	ldr	r4, [r0, #20]
 800e7be:	f101 0309 	add.w	r3, r1, #9
 800e7c2:	54e5      	strb	r5, [r4, r3]
 800e7c4:	0655      	lsls	r5, r2, #25
 800e7c6:	bf54      	ite	pl
 800e7c8:	7c05      	ldrbpl	r5, [r0, #16]
 800e7ca:	7c45      	ldrbmi	r5, [r0, #17]
 800e7cc:	6944      	ldr	r4, [r0, #20]
 800e7ce:	f101 030a 	add.w	r3, r1, #10
 800e7d2:	54e5      	strb	r5, [r4, r3]
 800e7d4:	0694      	lsls	r4, r2, #26
 800e7d6:	bf54      	ite	pl
 800e7d8:	7c05      	ldrbpl	r5, [r0, #16]
 800e7da:	7c45      	ldrbmi	r5, [r0, #17]
 800e7dc:	6944      	ldr	r4, [r0, #20]
 800e7de:	f101 030b 	add.w	r3, r1, #11
 800e7e2:	54e5      	strb	r5, [r4, r3]
 800e7e4:	06d5      	lsls	r5, r2, #27
 800e7e6:	bf54      	ite	pl
 800e7e8:	7c05      	ldrbpl	r5, [r0, #16]
 800e7ea:	7c45      	ldrbmi	r5, [r0, #17]
 800e7ec:	6944      	ldr	r4, [r0, #20]
 800e7ee:	f101 030c 	add.w	r3, r1, #12
 800e7f2:	54e5      	strb	r5, [r4, r3]
 800e7f4:	0714      	lsls	r4, r2, #28
 800e7f6:	bf54      	ite	pl
 800e7f8:	7c05      	ldrbpl	r5, [r0, #16]
 800e7fa:	7c45      	ldrbmi	r5, [r0, #17]
 800e7fc:	6944      	ldr	r4, [r0, #20]
 800e7fe:	f101 030d 	add.w	r3, r1, #13
 800e802:	54e5      	strb	r5, [r4, r3]
 800e804:	0755      	lsls	r5, r2, #29
 800e806:	bf54      	ite	pl
 800e808:	7c05      	ldrbpl	r5, [r0, #16]
 800e80a:	7c45      	ldrbmi	r5, [r0, #17]
 800e80c:	6944      	ldr	r4, [r0, #20]
 800e80e:	f101 030e 	add.w	r3, r1, #14
 800e812:	54e5      	strb	r5, [r4, r3]
 800e814:	0794      	lsls	r4, r2, #30
 800e816:	bf58      	it	pl
 800e818:	7c05      	ldrbpl	r5, [r0, #16]
 800e81a:	6944      	ldr	r4, [r0, #20]
 800e81c:	bf48      	it	mi
 800e81e:	7c45      	ldrbmi	r5, [r0, #17]
 800e820:	f101 030f 	add.w	r3, r1, #15
 800e824:	54e5      	strb	r5, [r4, r3]
 800e826:	07d2      	lsls	r2, r2, #31
 800e828:	bf4c      	ite	mi
 800e82a:	7c44      	ldrbmi	r4, [r0, #17]
 800e82c:	7c04      	ldrbpl	r4, [r0, #16]
 800e82e:	6942      	ldr	r2, [r0, #20]
 800e830:	f101 0310 	add.w	r3, r1, #16
 800e834:	e5a5      	b.n	800e382 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x3b6>
 800e836:	061d      	lsls	r5, r3, #24
 800e838:	bf54      	ite	pl
 800e83a:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e83e:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e842:	6945      	ldr	r5, [r0, #20]
 800e844:	1c4c      	adds	r4, r1, #1
 800e846:	f805 e004 	strb.w	lr, [r5, r4]
 800e84a:	065d      	lsls	r5, r3, #25
 800e84c:	bf54      	ite	pl
 800e84e:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e852:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e856:	6945      	ldr	r5, [r0, #20]
 800e858:	1c8c      	adds	r4, r1, #2
 800e85a:	f805 e004 	strb.w	lr, [r5, r4]
 800e85e:	069d      	lsls	r5, r3, #26
 800e860:	bf54      	ite	pl
 800e862:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e866:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e86a:	6945      	ldr	r5, [r0, #20]
 800e86c:	1ccc      	adds	r4, r1, #3
 800e86e:	f805 e004 	strb.w	lr, [r5, r4]
 800e872:	06dd      	lsls	r5, r3, #27
 800e874:	bf54      	ite	pl
 800e876:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e87a:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e87e:	6945      	ldr	r5, [r0, #20]
 800e880:	1d0c      	adds	r4, r1, #4
 800e882:	f805 e004 	strb.w	lr, [r5, r4]
 800e886:	071d      	lsls	r5, r3, #28
 800e888:	bf54      	ite	pl
 800e88a:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e88e:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e892:	6945      	ldr	r5, [r0, #20]
 800e894:	1d4c      	adds	r4, r1, #5
 800e896:	f805 e004 	strb.w	lr, [r5, r4]
 800e89a:	075d      	lsls	r5, r3, #29
 800e89c:	bf54      	ite	pl
 800e89e:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e8a2:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e8a6:	6945      	ldr	r5, [r0, #20]
 800e8a8:	1d8c      	adds	r4, r1, #6
 800e8aa:	f805 e004 	strb.w	lr, [r5, r4]
 800e8ae:	079d      	lsls	r5, r3, #30
 800e8b0:	bf58      	it	pl
 800e8b2:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e8b6:	6945      	ldr	r5, [r0, #20]
 800e8b8:	bf48      	it	mi
 800e8ba:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e8be:	1dcc      	adds	r4, r1, #7
 800e8c0:	f805 e004 	strb.w	lr, [r5, r4]
 800e8c4:	07db      	lsls	r3, r3, #31
 800e8c6:	bf4c      	ite	mi
 800e8c8:	7c45      	ldrbmi	r5, [r0, #17]
 800e8ca:	7c05      	ldrbpl	r5, [r0, #16]
 800e8cc:	6943      	ldr	r3, [r0, #20]
 800e8ce:	f101 0408 	add.w	r4, r1, #8
 800e8d2:	551d      	strb	r5, [r3, r4]
 800e8d4:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800e8d8:	bf0c      	ite	eq
 800e8da:	7c05      	ldrbeq	r5, [r0, #16]
 800e8dc:	7c45      	ldrbne	r5, [r0, #17]
 800e8de:	6944      	ldr	r4, [r0, #20]
 800e8e0:	f101 0309 	add.w	r3, r1, #9
 800e8e4:	54e5      	strb	r5, [r4, r3]
 800e8e6:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800e8ea:	bf0c      	ite	eq
 800e8ec:	7c05      	ldrbeq	r5, [r0, #16]
 800e8ee:	7c45      	ldrbne	r5, [r0, #17]
 800e8f0:	6944      	ldr	r4, [r0, #20]
 800e8f2:	f101 030a 	add.w	r3, r1, #10
 800e8f6:	54e5      	strb	r5, [r4, r3]
 800e8f8:	f01c 0f20 	tst.w	ip, #32
 800e8fc:	bf0c      	ite	eq
 800e8fe:	7c05      	ldrbeq	r5, [r0, #16]
 800e900:	7c45      	ldrbne	r5, [r0, #17]
 800e902:	6944      	ldr	r4, [r0, #20]
 800e904:	f101 030b 	add.w	r3, r1, #11
 800e908:	54e5      	strb	r5, [r4, r3]
 800e90a:	f01c 0f10 	tst.w	ip, #16
 800e90e:	bf0c      	ite	eq
 800e910:	7c05      	ldrbeq	r5, [r0, #16]
 800e912:	7c45      	ldrbne	r5, [r0, #17]
 800e914:	6944      	ldr	r4, [r0, #20]
 800e916:	f101 030c 	add.w	r3, r1, #12
 800e91a:	54e5      	strb	r5, [r4, r3]
 800e91c:	f01c 0f08 	tst.w	ip, #8
 800e920:	bf0c      	ite	eq
 800e922:	7c05      	ldrbeq	r5, [r0, #16]
 800e924:	7c45      	ldrbne	r5, [r0, #17]
 800e926:	6944      	ldr	r4, [r0, #20]
 800e928:	f101 030d 	add.w	r3, r1, #13
 800e92c:	54e5      	strb	r5, [r4, r3]
 800e92e:	f01c 0f04 	tst.w	ip, #4
 800e932:	bf0c      	ite	eq
 800e934:	7c05      	ldrbeq	r5, [r0, #16]
 800e936:	7c45      	ldrbne	r5, [r0, #17]
 800e938:	6944      	ldr	r4, [r0, #20]
 800e93a:	f101 030e 	add.w	r3, r1, #14
 800e93e:	54e5      	strb	r5, [r4, r3]
 800e940:	f01c 0f02 	tst.w	ip, #2
 800e944:	bf0c      	ite	eq
 800e946:	7c05      	ldrbeq	r5, [r0, #16]
 800e948:	7c45      	ldrbne	r5, [r0, #17]
 800e94a:	6944      	ldr	r4, [r0, #20]
 800e94c:	f101 030f 	add.w	r3, r1, #15
 800e950:	54e5      	strb	r5, [r4, r3]
 800e952:	f01c 0f01 	tst.w	ip, #1
 800e956:	bf14      	ite	ne
 800e958:	7c45      	ldrbne	r5, [r0, #17]
 800e95a:	7c05      	ldrbeq	r5, [r0, #16]
 800e95c:	6944      	ldr	r4, [r0, #20]
 800e95e:	f101 0310 	add.w	r3, r1, #16
 800e962:	e604      	b.n	800e56e <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x5a2>

0800e964 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>:
 800e964:	b570      	push	{r4, r5, r6, lr}
 800e966:	6804      	ldr	r4, [r0, #0]
 800e968:	f89d c010 	ldrb.w	ip, [sp, #16]
 800e96c:	2c07      	cmp	r4, #7
 800e96e:	f89d e014 	ldrb.w	lr, [sp, #20]
 800e972:	d000      	beq.n	800e976 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)+0x12>
 800e974:	bd70      	pop	{r4, r5, r6, pc}
 800e976:	061e      	lsls	r6, r3, #24
 800e978:	ea4f 1141 	mov.w	r1, r1, lsl #5
 800e97c:	bf54      	ite	pl
 800e97e:	7c06      	ldrbpl	r6, [r0, #16]
 800e980:	7c46      	ldrbmi	r6, [r0, #17]
 800e982:	6945      	ldr	r5, [r0, #20]
 800e984:	1c4c      	adds	r4, r1, #1
 800e986:	552e      	strb	r6, [r5, r4]
 800e988:	065d      	lsls	r5, r3, #25
 800e98a:	bf54      	ite	pl
 800e98c:	7c06      	ldrbpl	r6, [r0, #16]
 800e98e:	7c46      	ldrbmi	r6, [r0, #17]
 800e990:	6945      	ldr	r5, [r0, #20]
 800e992:	1c8c      	adds	r4, r1, #2
 800e994:	552e      	strb	r6, [r5, r4]
 800e996:	069e      	lsls	r6, r3, #26
 800e998:	bf54      	ite	pl
 800e99a:	7c06      	ldrbpl	r6, [r0, #16]
 800e99c:	7c46      	ldrbmi	r6, [r0, #17]
 800e99e:	6945      	ldr	r5, [r0, #20]
 800e9a0:	1ccc      	adds	r4, r1, #3
 800e9a2:	552e      	strb	r6, [r5, r4]
 800e9a4:	06dd      	lsls	r5, r3, #27
 800e9a6:	bf54      	ite	pl
 800e9a8:	7c06      	ldrbpl	r6, [r0, #16]
 800e9aa:	7c46      	ldrbmi	r6, [r0, #17]
 800e9ac:	6945      	ldr	r5, [r0, #20]
 800e9ae:	1d0c      	adds	r4, r1, #4
 800e9b0:	552e      	strb	r6, [r5, r4]
 800e9b2:	071e      	lsls	r6, r3, #28
 800e9b4:	bf54      	ite	pl
 800e9b6:	7c06      	ldrbpl	r6, [r0, #16]
 800e9b8:	7c46      	ldrbmi	r6, [r0, #17]
 800e9ba:	6945      	ldr	r5, [r0, #20]
 800e9bc:	1d4c      	adds	r4, r1, #5
 800e9be:	552e      	strb	r6, [r5, r4]
 800e9c0:	075d      	lsls	r5, r3, #29
 800e9c2:	bf54      	ite	pl
 800e9c4:	7c06      	ldrbpl	r6, [r0, #16]
 800e9c6:	7c46      	ldrbmi	r6, [r0, #17]
 800e9c8:	6945      	ldr	r5, [r0, #20]
 800e9ca:	1d8c      	adds	r4, r1, #6
 800e9cc:	552e      	strb	r6, [r5, r4]
 800e9ce:	079e      	lsls	r6, r3, #30
 800e9d0:	6945      	ldr	r5, [r0, #20]
 800e9d2:	bf54      	ite	pl
 800e9d4:	7c06      	ldrbpl	r6, [r0, #16]
 800e9d6:	7c46      	ldrbmi	r6, [r0, #17]
 800e9d8:	1dcc      	adds	r4, r1, #7
 800e9da:	552e      	strb	r6, [r5, r4]
 800e9dc:	07dd      	lsls	r5, r3, #31
 800e9de:	bf4c      	ite	mi
 800e9e0:	7c45      	ldrbmi	r5, [r0, #17]
 800e9e2:	7c05      	ldrbpl	r5, [r0, #16]
 800e9e4:	6943      	ldr	r3, [r0, #20]
 800e9e6:	f101 0408 	add.w	r4, r1, #8
 800e9ea:	551d      	strb	r5, [r3, r4]
 800e9ec:	0614      	lsls	r4, r2, #24
 800e9ee:	bf54      	ite	pl
 800e9f0:	7c05      	ldrbpl	r5, [r0, #16]
 800e9f2:	7c45      	ldrbmi	r5, [r0, #17]
 800e9f4:	6944      	ldr	r4, [r0, #20]
 800e9f6:	f101 0309 	add.w	r3, r1, #9
 800e9fa:	54e5      	strb	r5, [r4, r3]
 800e9fc:	0656      	lsls	r6, r2, #25
 800e9fe:	bf54      	ite	pl
 800ea00:	7c05      	ldrbpl	r5, [r0, #16]
 800ea02:	7c45      	ldrbmi	r5, [r0, #17]
 800ea04:	6944      	ldr	r4, [r0, #20]
 800ea06:	f101 030a 	add.w	r3, r1, #10
 800ea0a:	54e5      	strb	r5, [r4, r3]
 800ea0c:	0695      	lsls	r5, r2, #26
 800ea0e:	bf54      	ite	pl
 800ea10:	7c05      	ldrbpl	r5, [r0, #16]
 800ea12:	7c45      	ldrbmi	r5, [r0, #17]
 800ea14:	6944      	ldr	r4, [r0, #20]
 800ea16:	f101 030b 	add.w	r3, r1, #11
 800ea1a:	54e5      	strb	r5, [r4, r3]
 800ea1c:	06d4      	lsls	r4, r2, #27
 800ea1e:	bf54      	ite	pl
 800ea20:	7c05      	ldrbpl	r5, [r0, #16]
 800ea22:	7c45      	ldrbmi	r5, [r0, #17]
 800ea24:	6944      	ldr	r4, [r0, #20]
 800ea26:	f101 030c 	add.w	r3, r1, #12
 800ea2a:	54e5      	strb	r5, [r4, r3]
 800ea2c:	0716      	lsls	r6, r2, #28
 800ea2e:	bf54      	ite	pl
 800ea30:	7c05      	ldrbpl	r5, [r0, #16]
 800ea32:	7c45      	ldrbmi	r5, [r0, #17]
 800ea34:	6944      	ldr	r4, [r0, #20]
 800ea36:	f101 030d 	add.w	r3, r1, #13
 800ea3a:	54e5      	strb	r5, [r4, r3]
 800ea3c:	0755      	lsls	r5, r2, #29
 800ea3e:	bf54      	ite	pl
 800ea40:	7c05      	ldrbpl	r5, [r0, #16]
 800ea42:	7c45      	ldrbmi	r5, [r0, #17]
 800ea44:	6944      	ldr	r4, [r0, #20]
 800ea46:	f101 030e 	add.w	r3, r1, #14
 800ea4a:	54e5      	strb	r5, [r4, r3]
 800ea4c:	0794      	lsls	r4, r2, #30
 800ea4e:	bf58      	it	pl
 800ea50:	7c05      	ldrbpl	r5, [r0, #16]
 800ea52:	6944      	ldr	r4, [r0, #20]
 800ea54:	bf48      	it	mi
 800ea56:	7c45      	ldrbmi	r5, [r0, #17]
 800ea58:	f101 030f 	add.w	r3, r1, #15
 800ea5c:	54e5      	strb	r5, [r4, r3]
 800ea5e:	07d2      	lsls	r2, r2, #31
 800ea60:	bf4c      	ite	mi
 800ea62:	7c44      	ldrbmi	r4, [r0, #17]
 800ea64:	7c04      	ldrbpl	r4, [r0, #16]
 800ea66:	6942      	ldr	r2, [r0, #20]
 800ea68:	f101 0310 	add.w	r3, r1, #16
 800ea6c:	54d4      	strb	r4, [r2, r3]
 800ea6e:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800ea72:	bf0c      	ite	eq
 800ea74:	7c04      	ldrbeq	r4, [r0, #16]
 800ea76:	7c44      	ldrbne	r4, [r0, #17]
 800ea78:	6942      	ldr	r2, [r0, #20]
 800ea7a:	f101 0311 	add.w	r3, r1, #17
 800ea7e:	54d4      	strb	r4, [r2, r3]
 800ea80:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800ea84:	bf14      	ite	ne
 800ea86:	7c44      	ldrbne	r4, [r0, #17]
 800ea88:	7c04      	ldrbeq	r4, [r0, #16]
 800ea8a:	6942      	ldr	r2, [r0, #20]
 800ea8c:	f101 0312 	add.w	r3, r1, #18
 800ea90:	54d4      	strb	r4, [r2, r3]
 800ea92:	f01c 0f20 	tst.w	ip, #32
 800ea96:	bf14      	ite	ne
 800ea98:	7c44      	ldrbne	r4, [r0, #17]
 800ea9a:	7c04      	ldrbeq	r4, [r0, #16]
 800ea9c:	6942      	ldr	r2, [r0, #20]
 800ea9e:	f101 0313 	add.w	r3, r1, #19
 800eaa2:	54d4      	strb	r4, [r2, r3]
 800eaa4:	f01c 0f10 	tst.w	ip, #16
 800eaa8:	bf14      	ite	ne
 800eaaa:	7c44      	ldrbne	r4, [r0, #17]
 800eaac:	7c04      	ldrbeq	r4, [r0, #16]
 800eaae:	6942      	ldr	r2, [r0, #20]
 800eab0:	f101 0314 	add.w	r3, r1, #20
 800eab4:	54d4      	strb	r4, [r2, r3]
 800eab6:	f01c 0f08 	tst.w	ip, #8
 800eaba:	bf14      	ite	ne
 800eabc:	7c44      	ldrbne	r4, [r0, #17]
 800eabe:	7c04      	ldrbeq	r4, [r0, #16]
 800eac0:	6942      	ldr	r2, [r0, #20]
 800eac2:	f101 0315 	add.w	r3, r1, #21
 800eac6:	54d4      	strb	r4, [r2, r3]
 800eac8:	f01c 0f04 	tst.w	ip, #4
 800eacc:	bf14      	ite	ne
 800eace:	7c44      	ldrbne	r4, [r0, #17]
 800ead0:	7c04      	ldrbeq	r4, [r0, #16]
 800ead2:	6942      	ldr	r2, [r0, #20]
 800ead4:	f101 0316 	add.w	r3, r1, #22
 800ead8:	54d4      	strb	r4, [r2, r3]
 800eada:	f01c 0f02 	tst.w	ip, #2
 800eade:	bf14      	ite	ne
 800eae0:	7c44      	ldrbne	r4, [r0, #17]
 800eae2:	7c04      	ldrbeq	r4, [r0, #16]
 800eae4:	6942      	ldr	r2, [r0, #20]
 800eae6:	f101 0317 	add.w	r3, r1, #23
 800eaea:	54d4      	strb	r4, [r2, r3]
 800eaec:	f01c 0f01 	tst.w	ip, #1
 800eaf0:	bf14      	ite	ne
 800eaf2:	7c44      	ldrbne	r4, [r0, #17]
 800eaf4:	7c04      	ldrbeq	r4, [r0, #16]
 800eaf6:	6942      	ldr	r2, [r0, #20]
 800eaf8:	f101 0318 	add.w	r3, r1, #24
 800eafc:	54d4      	strb	r4, [r2, r3]
 800eafe:	f01e 0f80 	tst.w	lr, #128	; 0x80
 800eb02:	bf0c      	ite	eq
 800eb04:	7c04      	ldrbeq	r4, [r0, #16]
 800eb06:	7c44      	ldrbne	r4, [r0, #17]
 800eb08:	6942      	ldr	r2, [r0, #20]
 800eb0a:	f101 0319 	add.w	r3, r1, #25
 800eb0e:	54d4      	strb	r4, [r2, r3]
 800eb10:	f01e 0f40 	tst.w	lr, #64	; 0x40
 800eb14:	bf0c      	ite	eq
 800eb16:	7c04      	ldrbeq	r4, [r0, #16]
 800eb18:	7c44      	ldrbne	r4, [r0, #17]
 800eb1a:	6942      	ldr	r2, [r0, #20]
 800eb1c:	f101 031a 	add.w	r3, r1, #26
 800eb20:	54d4      	strb	r4, [r2, r3]
 800eb22:	f01e 0f20 	tst.w	lr, #32
 800eb26:	bf0c      	ite	eq
 800eb28:	7c04      	ldrbeq	r4, [r0, #16]
 800eb2a:	7c44      	ldrbne	r4, [r0, #17]
 800eb2c:	6942      	ldr	r2, [r0, #20]
 800eb2e:	f101 031b 	add.w	r3, r1, #27
 800eb32:	54d4      	strb	r4, [r2, r3]
 800eb34:	f01e 0f10 	tst.w	lr, #16
 800eb38:	bf0c      	ite	eq
 800eb3a:	7c04      	ldrbeq	r4, [r0, #16]
 800eb3c:	7c44      	ldrbne	r4, [r0, #17]
 800eb3e:	6942      	ldr	r2, [r0, #20]
 800eb40:	f101 031c 	add.w	r3, r1, #28
 800eb44:	54d4      	strb	r4, [r2, r3]
 800eb46:	f01e 0f08 	tst.w	lr, #8
 800eb4a:	bf0c      	ite	eq
 800eb4c:	7c04      	ldrbeq	r4, [r0, #16]
 800eb4e:	7c44      	ldrbne	r4, [r0, #17]
 800eb50:	6942      	ldr	r2, [r0, #20]
 800eb52:	f101 031d 	add.w	r3, r1, #29
 800eb56:	54d4      	strb	r4, [r2, r3]
 800eb58:	f01e 0f04 	tst.w	lr, #4
 800eb5c:	bf0c      	ite	eq
 800eb5e:	7c04      	ldrbeq	r4, [r0, #16]
 800eb60:	7c44      	ldrbne	r4, [r0, #17]
 800eb62:	6942      	ldr	r2, [r0, #20]
 800eb64:	f101 031e 	add.w	r3, r1, #30
 800eb68:	54d4      	strb	r4, [r2, r3]
 800eb6a:	f01e 0f02 	tst.w	lr, #2
 800eb6e:	6942      	ldr	r2, [r0, #20]
 800eb70:	bf0c      	ite	eq
 800eb72:	7c04      	ldrbeq	r4, [r0, #16]
 800eb74:	7c44      	ldrbne	r4, [r0, #17]
 800eb76:	f101 031f 	add.w	r3, r1, #31
 800eb7a:	54d4      	strb	r4, [r2, r3]
 800eb7c:	f01e 0f01 	tst.w	lr, #1
 800eb80:	bf14      	ite	ne
 800eb82:	7c42      	ldrbne	r2, [r0, #17]
 800eb84:	7c02      	ldrbeq	r2, [r0, #16]
 800eb86:	6943      	ldr	r3, [r0, #20]
 800eb88:	3120      	adds	r1, #32
 800eb8a:	545a      	strb	r2, [r3, r1]
 800eb8c:	bd70      	pop	{r4, r5, r6, pc}
 800eb8e:	bf00      	nop

0800eb90 <WS28xx::~WS28xx()>:
 800eb90:	2200      	movs	r2, #0
 800eb92:	4b01      	ldr	r3, [pc, #4]	; (800eb98 <WS28xx::~WS28xx()+0x8>)
 800eb94:	601a      	str	r2, [r3, #0]
 800eb96:	4770      	bx	lr
 800eb98:	20001958 	andcs	r1, r0, r8, asr r9

0800eb9c <WS28xx::SetupBuffers()>:
 800eb9c:	b513      	push	{r0, r1, r4, lr}
 800eb9e:	4604      	mov	r4, r0
 800eba0:	a801      	add	r0, sp, #4
 800eba2:	f006 ff1d 	bl	80159e0 <gd32_spi_dma_tx_prepare(unsigned int*)>
 800eba6:	9b01      	ldr	r3, [sp, #4]
 800eba8:	4a07      	ldr	r2, [pc, #28]	; (800ebc8 <WS28xx::SetupBuffers()+0x2c>)
 800ebaa:	085b      	lsrs	r3, r3, #1
 800ebac:	f023 0303 	bic.w	r3, r3, #3
 800ebb0:	6160      	str	r0, [r4, #20]
 800ebb2:	4418      	add	r0, r3
 800ebb4:	68e3      	ldr	r3, [r4, #12]
 800ebb6:	61a0      	str	r0, [r4, #24]
 800ebb8:	6013      	str	r3, [r2, #0]
 800ebba:	3303      	adds	r3, #3
 800ebbc:	f023 0303 	bic.w	r3, r3, #3
 800ebc0:	60e3      	str	r3, [r4, #12]
 800ebc2:	b002      	add	sp, #8
 800ebc4:	bd10      	pop	{r4, pc}
 800ebc6:	bf00      	nop
 800ebc8:	20001954 	andcs	r1, r0, r4, asr r9

0800ebcc <WS28xx::WS28xx(PixelConfiguration&)>:
 800ebcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ebce:	23aa      	movs	r3, #170	; 0xaa
 800ebd0:	2203      	movs	r2, #3
 800ebd2:	e9c0 2300 	strd	r2, r3, [r0]
 800ebd6:	2306      	movs	r3, #6
 800ebd8:	6083      	str	r3, [r0, #8]
 800ebda:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800ebde:	8243      	strh	r3, [r0, #18]
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	460d      	mov	r5, r1
 800ebe4:	4604      	mov	r4, r0
 800ebe6:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800ebea:	4b17      	ldr	r3, [pc, #92]	; (800ec48 <WS28xx::WS28xx(PixelConfiguration&)+0x7c>)
 800ebec:	a901      	add	r1, sp, #4
 800ebee:	6018      	str	r0, [r3, #0]
 800ebf0:	4628      	mov	r0, r5
 800ebf2:	f7fe fdd9 	bl	800d7a8 <PixelConfiguration::Validate(unsigned int&)>
 800ebf6:	4628      	mov	r0, r5
 800ebf8:	f7fe fe42 	bl	800d880 <PixelConfiguration::Dump()>
 800ebfc:	68ab      	ldr	r3, [r5, #8]
 800ebfe:	686a      	ldr	r2, [r5, #4]
 800ec00:	60a3      	str	r3, [r4, #8]
 800ec02:	8a2b      	ldrh	r3, [r5, #16]
 800ec04:	6829      	ldr	r1, [r5, #0]
 800ec06:	8223      	strh	r3, [r4, #16]
 800ec08:	7cab      	ldrb	r3, [r5, #18]
 800ec0a:	7ce8      	ldrb	r0, [r5, #19]
 800ec0c:	74e3      	strb	r3, [r4, #19]
 800ec0e:	9b01      	ldr	r3, [sp, #4]
 800ec10:	6021      	str	r1, [r4, #0]
 800ec12:	4353      	muls	r3, r2
 800ec14:	6062      	str	r2, [r4, #4]
 800ec16:	74a0      	strb	r0, [r4, #18]
 800ec18:	b998      	cbnz	r0, 800ec42 <WS28xx::WS28xx(PixelConfiguration&)+0x76>
 800ec1a:	390b      	subs	r1, #11
 800ec1c:	2902      	cmp	r1, #2
 800ec1e:	60e3      	str	r3, [r4, #12]
 800ec20:	bf9e      	ittt	ls
 800ec22:	68e3      	ldrls	r3, [r4, #12]
 800ec24:	3208      	addls	r2, #8
 800ec26:	189b      	addls	r3, r3, r2
 800ec28:	4620      	mov	r0, r4
 800ec2a:	bf98      	it	ls
 800ec2c:	60e3      	strls	r3, [r4, #12]
 800ec2e:	f7ff ffb5 	bl	800eb9c <WS28xx::SetupBuffers()>
 800ec32:	f006 fe4b 	bl	80158cc <gd32_spi_dma_begin()>
 800ec36:	68e8      	ldr	r0, [r5, #12]
 800ec38:	f006 febe 	bl	80159b8 <gd32_spi_dma_set_speed_hz(unsigned int)>
 800ec3c:	4620      	mov	r0, r4
 800ec3e:	b003      	add	sp, #12
 800ec40:	bd30      	pop	{r4, r5, pc}
 800ec42:	00db      	lsls	r3, r3, #3
 800ec44:	3301      	adds	r3, #1
 800ec46:	e7e8      	b.n	800ec1a <WS28xx::WS28xx(PixelConfiguration&)+0x4e>
 800ec48:	20001958 	andcs	r1, r0, r8, asr r9

0800ec4c <WS28xx::Update()>:
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	b430      	push	{r4, r5}
 800ec50:	4b0b      	ldr	r3, [pc, #44]	; (800ec80 <WS28xx::Update()+0x34>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	68c1      	ldr	r1, [r0, #12]
 800ec56:	6944      	ldr	r4, [r0, #20]
 800ec58:	4299      	cmp	r1, r3
 800ec5a:	d807      	bhi.n	800ec6c <WS28xx::Update()+0x20>
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	6980      	ldr	r0, [r0, #24]
 800ec60:	084d      	lsrs	r5, r1, #1
 800ec62:	42ab      	cmp	r3, r5
 800ec64:	d105      	bne.n	800ec72 <WS28xx::Update()+0x26>
 800ec66:	bc30      	pop	{r4, r5}
 800ec68:	f006 bec2 	b.w	80159f0 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>
 800ec6c:	54e2      	strb	r2, [r4, r3]
 800ec6e:	3301      	adds	r3, #1
 800ec70:	e7f0      	b.n	800ec54 <WS28xx::Update()+0x8>
 800ec72:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
 800ec76:	ba52      	rev16	r2, r2
 800ec78:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 800ec7c:	3301      	adds	r3, #1
 800ec7e:	e7f0      	b.n	800ec62 <WS28xx::Update()+0x16>
 800ec80:	20001954 	andcs	r1, r0, r4, asr r9

0800ec84 <WS28xx::Blackout()>:
 800ec84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec86:	e9d0 6305 	ldrd	r6, r3, [r0, #20]
 800ec8a:	4604      	mov	r4, r0
 800ec8c:	6143      	str	r3, [r0, #20]
 800ec8e:	f3bf 8f6f 	isb	sy
 800ec92:	f006 fec7 	bl	8015a24 <gd32_spi_dma_tx_is_active()>
 800ec96:	2800      	cmp	r0, #0
 800ec98:	d1f9      	bne.n	800ec8e <WS28xx::Blackout()+0xa>
 800ec9a:	6822      	ldr	r2, [r4, #0]
 800ec9c:	6963      	ldr	r3, [r4, #20]
 800ec9e:	3a0b      	subs	r2, #11
 800eca0:	2a02      	cmp	r2, #2
 800eca2:	7018      	strb	r0, [r3, #0]
 800eca4:	d82a      	bhi.n	800ecfc <WS28xx::Blackout()+0x78>
 800eca6:	4605      	mov	r5, r0
 800eca8:	4607      	mov	r7, r0
 800ecaa:	7058      	strb	r0, [r3, #1]
 800ecac:	7098      	strb	r0, [r3, #2]
 800ecae:	70d8      	strb	r0, [r3, #3]
 800ecb0:	6863      	ldr	r3, [r4, #4]
 800ecb2:	42ab      	cmp	r3, r5
 800ecb4:	d819      	bhi.n	800ecea <WS28xx::Blackout()+0x66>
 800ecb6:	6821      	ldr	r1, [r4, #0]
 800ecb8:	68e2      	ldr	r2, [r4, #12]
 800ecba:	390b      	subs	r1, #11
 800ecbc:	2901      	cmp	r1, #1
 800ecbe:	bf94      	ite	ls
 800ecc0:	21ff      	movls	r1, #255	; 0xff
 800ecc2:	2100      	movhi	r1, #0
 800ecc4:	6960      	ldr	r0, [r4, #20]
 800ecc6:	3a04      	subs	r2, #4
 800ecc8:	1883      	adds	r3, r0, r2
 800ecca:	5481      	strb	r1, [r0, r2]
 800eccc:	7059      	strb	r1, [r3, #1]
 800ecce:	7099      	strb	r1, [r3, #2]
 800ecd0:	70d9      	strb	r1, [r3, #3]
 800ecd2:	4620      	mov	r0, r4
 800ecd4:	f7ff ffba 	bl	800ec4c <WS28xx::Update()>
 800ecd8:	f3bf 8f6f 	isb	sy
 800ecdc:	f006 fea2 	bl	8015a24 <gd32_spi_dma_tx_is_active()>
 800ece0:	2800      	cmp	r0, #0
 800ece2:	d1f9      	bne.n	800ecd8 <WS28xx::Blackout()+0x54>
 800ece4:	6166      	str	r6, [r4, #20]
 800ece6:	b003      	add	sp, #12
 800ece8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecea:	2300      	movs	r3, #0
 800ecec:	4629      	mov	r1, r5
 800ecee:	461a      	mov	r2, r3
 800ecf0:	4620      	mov	r0, r4
 800ecf2:	9700      	str	r7, [sp, #0]
 800ecf4:	f7ff f96a 	bl	800dfcc <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 800ecf8:	3501      	adds	r5, #1
 800ecfa:	e7d9      	b.n	800ecb0 <WS28xx::Blackout()+0x2c>
 800ecfc:	6963      	ldr	r3, [r4, #20]
 800ecfe:	6821      	ldr	r1, [r4, #0]
 800ed00:	1c5a      	adds	r2, r3, #1
 800ed02:	b101      	cbz	r1, 800ed06 <WS28xx::Blackout()+0x82>
 800ed04:	7c21      	ldrb	r1, [r4, #16]
 800ed06:	68e0      	ldr	r0, [r4, #12]
 800ed08:	3001      	adds	r0, #1
 800ed0a:	4403      	add	r3, r0
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	d0e0      	beq.n	800ecd2 <WS28xx::Blackout()+0x4e>
 800ed10:	f802 1b01 	strb.w	r1, [r2], #1
 800ed14:	e7fa      	b.n	800ed0c <WS28xx::Blackout()+0x88>
	...

0800ed18 <RemoteConfig::HandleList()>:
 800ed18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed1c:	6801      	ldr	r1, [r0, #0]
 800ed1e:	4604      	mov	r4, r0
 800ed20:	2012      	movs	r0, #18
 800ed22:	f04f 080c 	mov.w	r8, #12
 800ed26:	4a2b      	ldr	r2, [pc, #172]	; (800edd4 <RemoteConfig::HandleList()+0xbc>)
 800ed28:	4b2b      	ldr	r3, [pc, #172]	; (800edd8 <RemoteConfig::HandleList()+0xc0>)
 800ed2a:	fb00 2201 	mla	r2, r0, r1, r2
 800ed2e:	6860      	ldr	r0, [r4, #4]
 800ed30:	492a      	ldr	r1, [pc, #168]	; (800eddc <RemoteConfig::HandleList()+0xc4>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	fb08 1100 	mla	r1, r8, r0, r1
 800ed38:	4e29      	ldr	r6, [pc, #164]	; (800ede0 <RemoteConfig::HandleList()+0xc8>)
 800ed3a:	482a      	ldr	r0, [pc, #168]	; (800ede4 <RemoteConfig::HandleList()+0xcc>)
 800ed3c:	691f      	ldr	r7, [r3, #16]
 800ed3e:	6835      	ldr	r5, [r6, #0]
 800ed40:	f890 9009 	ldrb.w	r9, [r0, #9]
 800ed44:	b2fb      	uxtb	r3, r7
 800ed46:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 800ed4a:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 800ed4e:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800ed52:	b089      	sub	sp, #36	; 0x24
 800ed54:	3507      	adds	r5, #7
 800ed56:	0e3f      	lsrs	r7, r7, #24
 800ed58:	f1b9 0f00 	cmp.w	r9, #0
 800ed5c:	d020      	beq.n	800eda0 <RemoteConfig::HandleList()+0x88>
 800ed5e:	3009      	adds	r0, #9
 800ed60:	e9cd 2103 	strd	r2, r1, [sp, #12]
 800ed64:	e9cd 8005 	strd	r8, r0, [sp, #20]
 800ed68:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800ed6c:	4628      	mov	r0, r5
 800ed6e:	e9cd e701 	strd	lr, r7, [sp, #4]
 800ed72:	4a1d      	ldr	r2, [pc, #116]	; (800ede8 <RemoteConfig::HandleList()+0xd0>)
 800ed74:	f8cd c000 	str.w	ip, [sp]
 800ed78:	f7fa fb34 	bl	80093e4 <snprintf>
 800ed7c:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 800ed80:	2b05      	cmp	r3, #5
 800ed82:	d11a      	bne.n	800edba <RemoteConfig::HandleList()+0xa2>
 800ed84:	f642 1305 	movw	r3, #10501	; 0x2905
 800ed88:	9300      	str	r3, [sp, #0]
 800ed8a:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800ed8e:	b282      	uxth	r2, r0
 800ed90:	4629      	mov	r1, r5
 800ed92:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800ed96:	f002 fb4f 	bl	8011438 <udp_send>
 800ed9a:	b009      	add	sp, #36	; 0x24
 800ed9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eda0:	e9cd 1804 	strd	r1, r8, [sp, #16]
 800eda4:	e9cd 7202 	strd	r7, r2, [sp, #8]
 800eda8:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800edac:	4628      	mov	r0, r5
 800edae:	e9cd ce00 	strd	ip, lr, [sp]
 800edb2:	4a0e      	ldr	r2, [pc, #56]	; (800edec <RemoteConfig::HandleList()+0xd4>)
 800edb4:	f7fa fb16 	bl	80093e4 <snprintf>
 800edb8:	e7e0      	b.n	800ed7c <RemoteConfig::HandleList()+0x64>
 800edba:	2b06      	cmp	r3, #6
 800edbc:	d1ed      	bne.n	800ed9a <RemoteConfig::HandleList()+0x82>
 800edbe:	6833      	ldr	r3, [r6, #0]
 800edc0:	799b      	ldrb	r3, [r3, #6]
 800edc2:	2b2a      	cmp	r3, #42	; 0x2a
 800edc4:	d1e9      	bne.n	800ed9a <RemoteConfig::HandleList()+0x82>
 800edc6:	f642 1305 	movw	r3, #10501	; 0x2905
 800edca:	9300      	str	r3, [sp, #0]
 800edcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800edd0:	e7dd      	b.n	800ed8e <RemoteConfig::HandleList()+0x76>
 800edd2:	bf00      	nop
 800edd4:	0801721a 	stmdaeq	r1, {r1, r3, r4, r9, ip, sp, lr}
 800edd8:	2000a2a0 	andcs	sl, r0, r0, lsr #5
 800eddc:	080172bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r9, ip, sp, lr}
 800ede0:	2000195c 	andcs	r1, r0, ip, asr r9
 800ede4:	20001960 	andcs	r1, r0, r0, ror #18
 800ede8:	08017154 	stmdaeq	r1, {r2, r4, r6, r8, ip, sp, lr}
 800edec:	0801716d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r8, ip, sp, lr}

0800edf0 <RemoteConfig::HandleDisplayGet()>:
 800edf0:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800edf4:	2b08      	cmp	r3, #8
 800edf6:	d11d      	bne.n	800ee34 <RemoteConfig::HandleDisplayGet()+0x44>
 800edf8:	4b0f      	ldr	r3, [pc, #60]	; (800ee38 <RemoteConfig::HandleDisplayGet()+0x48>)
 800edfa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	4d0f      	ldr	r5, [pc, #60]	; (800ee3c <RemoteConfig::HandleDisplayGet()+0x4c>)
 800ee00:	7c19      	ldrb	r1, [r3, #16]
 800ee02:	4a0f      	ldr	r2, [pc, #60]	; (800ee40 <RemoteConfig::HandleDisplayGet()+0x50>)
 800ee04:	4b0f      	ldr	r3, [pc, #60]	; (800ee44 <RemoteConfig::HandleDisplayGet()+0x54>)
 800ee06:	4604      	mov	r4, r0
 800ee08:	2900      	cmp	r1, #0
 800ee0a:	bf18      	it	ne
 800ee0c:	4613      	movne	r3, r2
 800ee0e:	6828      	ldr	r0, [r5, #0]
 800ee10:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800ee14:	4a0c      	ldr	r2, [pc, #48]	; (800ee48 <RemoteConfig::HandleDisplayGet()+0x58>)
 800ee16:	f7fa fae5 	bl	80093e4 <snprintf>
 800ee1a:	f642 1305 	movw	r3, #10501	; 0x2905
 800ee1e:	9300      	str	r3, [sp, #0]
 800ee20:	b282      	uxth	r2, r0
 800ee22:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800ee26:	6829      	ldr	r1, [r5, #0]
 800ee28:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800ee2c:	f002 fb04 	bl	8011438 <udp_send>
 800ee30:	b003      	add	sp, #12
 800ee32:	bd30      	pop	{r4, r5, pc}
 800ee34:	4770      	bx	lr
 800ee36:	bf00      	nop
 800ee38:	2000a8d8 	ldrdcs	sl, [r0], -r8
 800ee3c:	2000195c 	andcs	r1, r0, ip, asr r9
 800ee40:	08017186 	stmdaeq	r1, {r1, r2, r7, r8, ip, sp, lr}
 800ee44:	08017183 	stmdaeq	r1, {r0, r1, r7, r8, ip, sp, lr}
 800ee48:	0801718a 	stmdaeq	r1, {r1, r3, r7, r8, ip, sp, lr}

0800ee4c <RemoteConfig::HandleTftpSet()>:
 800ee4c:	f8d0 25e4 	ldr.w	r2, [r0, #1508]	; 0x5e4
 800ee50:	2a06      	cmp	r2, #6
 800ee52:	d109      	bne.n	800ee68 <RemoteConfig::HandleTftpSet()+0x1c>
 800ee54:	4a05      	ldr	r2, [pc, #20]	; (800ee6c <RemoteConfig::HandleTftpSet()+0x20>)
 800ee56:	6812      	ldr	r2, [r2, #0]
 800ee58:	7992      	ldrb	r2, [r2, #6]
 800ee5a:	3a30      	subs	r2, #48	; 0x30
 800ee5c:	bf18      	it	ne
 800ee5e:	2201      	movne	r2, #1
 800ee60:	f880 25ec 	strb.w	r2, [r0, #1516]	; 0x5ec
 800ee64:	f000 bd70 	b.w	800f948 <RemoteConfig::PlatformHandleTftpSet()>
 800ee68:	4770      	bx	lr
 800ee6a:	bf00      	nop
 800ee6c:	2000195c 	andcs	r1, r0, ip, asr r9

0800ee70 <RemoteConfig::HandleTftpGet()>:
 800ee70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ee72:	4604      	mov	r4, r0
 800ee74:	f000 fd70 	bl	800f958 <RemoteConfig::PlatformHandleTftpGet()>
 800ee78:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 800ee7c:	2b05      	cmp	r3, #5
 800ee7e:	d118      	bne.n	800eeb2 <RemoteConfig::HandleTftpGet()+0x42>
 800ee80:	f894 15ec 	ldrb.w	r1, [r4, #1516]	; 0x5ec
 800ee84:	4d0c      	ldr	r5, [pc, #48]	; (800eeb8 <RemoteConfig::HandleTftpGet()+0x48>)
 800ee86:	4a0d      	ldr	r2, [pc, #52]	; (800eebc <RemoteConfig::HandleTftpGet()+0x4c>)
 800ee88:	4b0d      	ldr	r3, [pc, #52]	; (800eec0 <RemoteConfig::HandleTftpGet()+0x50>)
 800ee8a:	6828      	ldr	r0, [r5, #0]
 800ee8c:	2900      	cmp	r1, #0
 800ee8e:	bf08      	it	eq
 800ee90:	4613      	moveq	r3, r2
 800ee92:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800ee96:	4a0b      	ldr	r2, [pc, #44]	; (800eec4 <RemoteConfig::HandleTftpGet()+0x54>)
 800ee98:	f7fa faa4 	bl	80093e4 <snprintf>
 800ee9c:	f642 1305 	movw	r3, #10501	; 0x2905
 800eea0:	b282      	uxth	r2, r0
 800eea2:	9300      	str	r3, [sp, #0]
 800eea4:	6829      	ldr	r1, [r5, #0]
 800eea6:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800eeaa:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800eeae:	f002 fac3 	bl	8011438 <udp_send>
 800eeb2:	b003      	add	sp, #12
 800eeb4:	bd30      	pop	{r4, r5, pc}
 800eeb6:	bf00      	nop
 800eeb8:	2000195c 	andcs	r1, r0, ip, asr r9
 800eebc:	08017186 	stmdaeq	r1, {r1, r2, r7, r8, ip, sp, lr}
 800eec0:	08017183 	stmdaeq	r1, {r0, r1, r7, r8, ip, sp, lr}
 800eec4:	08017196 	stmdaeq	r1, {r1, r2, r4, r7, r8, ip, sp, lr}

0800eec8 <RemoteConfig::HandleVersion()>:
 800eec8:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800eecc:	2b08      	cmp	r3, #8
 800eece:	d116      	bne.n	800eefe <RemoteConfig::HandleVersion()+0x36>
 800eed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eed2:	4d0b      	ldr	r5, [pc, #44]	; (800ef00 <RemoteConfig::HandleVersion()+0x38>)
 800eed4:	4604      	mov	r4, r0
 800eed6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800eeda:	4b0a      	ldr	r3, [pc, #40]	; (800ef04 <RemoteConfig::HandleVersion()+0x3c>)
 800eedc:	4a0a      	ldr	r2, [pc, #40]	; (800ef08 <RemoteConfig::HandleVersion()+0x40>)
 800eede:	6828      	ldr	r0, [r5, #0]
 800eee0:	f7fa fa80 	bl	80093e4 <snprintf>
 800eee4:	f642 1305 	movw	r3, #10501	; 0x2905
 800eee8:	9300      	str	r3, [sp, #0]
 800eeea:	b282      	uxth	r2, r0
 800eeec:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800eef0:	6829      	ldr	r1, [r5, #0]
 800eef2:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800eef6:	f002 fa9f 	bl	8011438 <udp_send>
 800eefa:	b003      	add	sp, #12
 800eefc:	bd30      	pop	{r4, r5, pc}
 800eefe:	4770      	bx	lr
 800ef00:	2000195c 	andcs	r1, r0, ip, asr r9
 800ef04:	2000a97e 	andcs	sl, r0, lr, ror r9
 800ef08:	0801719f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r8, ip, sp, lr}

0800ef0c <RemoteConfig::HandleUptime()>:
 800ef0c:	f890 35d7 	ldrb.w	r3, [r0, #1495]	; 0x5d7
 800ef10:	b1fb      	cbz	r3, 800ef52 <RemoteConfig::HandleUptime()+0x46>
 800ef12:	4b10      	ldr	r3, [pc, #64]	; (800ef54 <RemoteConfig::HandleUptime()+0x48>)
 800ef14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef16:	681a      	ldr	r2, [r3, #0]
 800ef18:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800ef1c:	4604      	mov	r4, r0
 800ef1e:	2b07      	cmp	r3, #7
 800ef20:	d115      	bne.n	800ef4e <RemoteConfig::HandleUptime()+0x42>
 800ef22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ef26:	4d0c      	ldr	r5, [pc, #48]	; (800ef58 <RemoteConfig::HandleUptime()+0x4c>)
 800ef28:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef2c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800ef30:	4a0a      	ldr	r2, [pc, #40]	; (800ef5c <RemoteConfig::HandleUptime()+0x50>)
 800ef32:	6828      	ldr	r0, [r5, #0]
 800ef34:	f7fa fa56 	bl	80093e4 <snprintf>
 800ef38:	f642 1305 	movw	r3, #10501	; 0x2905
 800ef3c:	9300      	str	r3, [sp, #0]
 800ef3e:	b282      	uxth	r2, r0
 800ef40:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800ef44:	6829      	ldr	r1, [r5, #0]
 800ef46:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800ef4a:	f002 fa75 	bl	8011438 <udp_send>
 800ef4e:	b003      	add	sp, #12
 800ef50:	bd30      	pop	{r4, r5, pc}
 800ef52:	4770      	bx	lr
 800ef54:	2000a9dc 	ldrdcs	sl, [r0], -ip
 800ef58:	2000195c 	andcs	r1, r0, ip, asr r9
 800ef5c:	080171aa 	stmdaeq	r1, {r1, r3, r5, r7, r8, ip, sp, lr}

0800ef60 <RemoteConfig::HandleDisplaySet()>:
 800ef60:	b538      	push	{r3, r4, r5, lr}
 800ef62:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800ef66:	2b09      	cmp	r3, #9
 800ef68:	d113      	bne.n	800ef92 <RemoteConfig::HandleDisplaySet()+0x32>
 800ef6a:	4b0a      	ldr	r3, [pc, #40]	; (800ef94 <RemoteConfig::HandleDisplaySet()+0x34>)
 800ef6c:	681c      	ldr	r4, [r3, #0]
 800ef6e:	4b0a      	ldr	r3, [pc, #40]	; (800ef98 <RemoteConfig::HandleDisplaySet()+0x38>)
 800ef70:	69a0      	ldr	r0, [r4, #24]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	7a5d      	ldrb	r5, [r3, #9]
 800ef76:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800ef7a:	4259      	negs	r1, r3
 800ef7c:	4159      	adcs	r1, r3
 800ef7e:	b140      	cbz	r0, 800ef92 <RemoteConfig::HandleDisplaySet()+0x32>
 800ef80:	6803      	ldr	r3, [r0, #0]
 800ef82:	7421      	strb	r1, [r4, #16]
 800ef84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef86:	4798      	blx	r3
 800ef88:	2d30      	cmp	r5, #48	; 0x30
 800ef8a:	bf1e      	ittt	ne
 800ef8c:	4b03      	ldrne	r3, [pc, #12]	; (800ef9c <RemoteConfig::HandleDisplaySet()+0x3c>)
 800ef8e:	681b      	ldrne	r3, [r3, #0]
 800ef90:	6063      	strne	r3, [r4, #4]
 800ef92:	bd38      	pop	{r3, r4, r5, pc}
 800ef94:	2000a8d8 	ldrdcs	sl, [r0], -r8
 800ef98:	2000195c 	andcs	r1, r0, ip, asr r9
 800ef9c:	2000a9dc 	ldrdcs	sl, [r0], -ip

0800efa0 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>:
 800efa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efa4:	f100 0a0c 	add.w	sl, r0, #12
 800efa8:	4604      	mov	r4, r0
 800efaa:	e9c0 1200 	strd	r1, r2, [r0]
 800efae:	6083      	str	r3, [r0, #8]
 800efb0:	4650      	mov	r0, sl
 800efb2:	4690      	mov	r8, r2
 800efb4:	4689      	mov	r9, r1
 800efb6:	461f      	mov	r7, r3
 800efb8:	f000 fd0e 	bl	800f9d8 <HttpDaemon::HttpDaemon()>
 800efbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800efc0:	2500      	movs	r5, #0
 800efc2:	4e16      	ldr	r6, [pc, #88]	; (800f01c <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x7c>)
 800efc4:	f8df b058 	ldr.w	fp, [pc, #88]	; 800f020 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x80>
 800efc8:	f8c4 35dc 	str.w	r3, [r4, #1500]	; 0x5dc
 800efcc:	4b15      	ldr	r3, [pc, #84]	; (800f024 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x84>)
 800efce:	4631      	mov	r1, r6
 800efd0:	f8db 0000 	ldr.w	r0, [fp]
 800efd4:	f8c4 55d4 	str.w	r5, [r4, #1492]	; 0x5d4
 800efd8:	f8a4 55d8 	strh.w	r5, [r4, #1496]	; 0x5d8
 800efdc:	f8c4 55e0 	str.w	r5, [r4, #1504]	; 0x5e0
 800efe0:	f8c4 55e4 	str.w	r5, [r4, #1508]	; 0x5e4
 800efe4:	f8c4 55e8 	str.w	r5, [r4, #1512]	; 0x5e8
 800efe8:	f884 55ec 	strb.w	r5, [r4, #1516]	; 0x5ec
 800efec:	601c      	str	r4, [r3, #0]
 800efee:	f002 feef 	bl	8011dd0 <Network::MacAddressCopyTo(unsigned char*)>
 800eff2:	f642 1105 	movw	r1, #10501	; 0x2905
 800eff6:	f8db 0000 	ldr.w	r0, [fp]
 800effa:	f886 9006 	strb.w	r9, [r6, #6]
 800effe:	f886 8007 	strb.w	r8, [r6, #7]
 800f002:	7237      	strb	r7, [r6, #8]
 800f004:	7275      	strb	r5, [r6, #9]
 800f006:	f002 fedd 	bl	8011dc4 <Network::Begin(unsigned short)>
 800f00a:	f8c4 05dc 	str.w	r0, [r4, #1500]	; 0x5dc
 800f00e:	4650      	mov	r0, sl
 800f010:	f000 fcfa 	bl	800fa08 <HttpDaemon::Start()>
 800f014:	4620      	mov	r0, r4
 800f016:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f01a:	bf00      	nop
 800f01c:	20001960 	andcs	r1, r0, r0, ror #18
 800f020:	2000a2a0 	andcs	sl, r0, r0, lsr #5
 800f024:	20001984 	andcs	r1, r0, r4, lsl #19

0800f028 <RemoteConfig::GetStringNode() const>:
 800f028:	2012      	movs	r0, #18
 800f02a:	4b03      	ldr	r3, [pc, #12]	; (800f038 <RemoteConfig::GetStringNode() const+0x10>)
 800f02c:	799a      	ldrb	r2, [r3, #6]
 800f02e:	4b03      	ldr	r3, [pc, #12]	; (800f03c <RemoteConfig::GetStringNode() const+0x14>)
 800f030:	fb00 3002 	mla	r0, r0, r2, r3
 800f034:	4770      	bx	lr
 800f036:	bf00      	nop
 800f038:	20001960 	andcs	r1, r0, r0, ror #18
 800f03c:	0801721a 	stmdaeq	r1, {r1, r3, r4, r9, ip, sp, lr}

0800f040 <RemoteConfig::GetStringOutput() const>:
 800f040:	200c      	movs	r0, #12
 800f042:	4b03      	ldr	r3, [pc, #12]	; (800f050 <RemoteConfig::GetStringOutput() const+0x10>)
 800f044:	79da      	ldrb	r2, [r3, #7]
 800f046:	4b03      	ldr	r3, [pc, #12]	; (800f054 <RemoteConfig::GetStringOutput() const+0x14>)
 800f048:	fb00 3002 	mla	r0, r0, r2, r3
 800f04c:	4770      	bx	lr
 800f04e:	bf00      	nop
 800f050:	20001960 	andcs	r1, r0, r0, ror #18
 800f054:	080172bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r9, ip, sp, lr}

0800f058 <RemoteConfig::SetDisable(bool)>:
 800f058:	b538      	push	{r3, r4, r5, lr}
 800f05a:	4604      	mov	r4, r0
 800f05c:	f890 35d4 	ldrb.w	r3, [r0, #1492]	; 0x5d4
 800f060:	b171      	cbz	r1, 800f080 <RemoteConfig::SetDisable(bool)+0x28>
 800f062:	b963      	cbnz	r3, 800f07e <RemoteConfig::SetDisable(bool)+0x26>
 800f064:	4b0d      	ldr	r3, [pc, #52]	; (800f09c <RemoteConfig::SetDisable(bool)+0x44>)
 800f066:	f642 1105 	movw	r1, #10501	; 0x2905
 800f06a:	6818      	ldr	r0, [r3, #0]
 800f06c:	f002 fead 	bl	8011dca <Network::End(unsigned short)>
 800f070:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f074:	f8c4 35dc 	str.w	r3, [r4, #1500]	; 0x5dc
 800f078:	2301      	movs	r3, #1
 800f07a:	f884 35d4 	strb.w	r3, [r4, #1492]	; 0x5d4
 800f07e:	bd38      	pop	{r3, r4, r5, pc}
 800f080:	2b00      	cmp	r3, #0
 800f082:	d0fc      	beq.n	800f07e <RemoteConfig::SetDisable(bool)+0x26>
 800f084:	4b05      	ldr	r3, [pc, #20]	; (800f09c <RemoteConfig::SetDisable(bool)+0x44>)
 800f086:	460d      	mov	r5, r1
 800f088:	6818      	ldr	r0, [r3, #0]
 800f08a:	f642 1105 	movw	r1, #10501	; 0x2905
 800f08e:	f002 fe99 	bl	8011dc4 <Network::Begin(unsigned short)>
 800f092:	f884 55d4 	strb.w	r5, [r4, #1492]	; 0x5d4
 800f096:	f8c4 05dc 	str.w	r0, [r4, #1500]	; 0x5dc
 800f09a:	e7f0      	b.n	800f07e <RemoteConfig::SetDisable(bool)+0x26>
 800f09c:	2000a2a0 	andcs	sl, r0, r0, lsr #5

0800f0a0 <RemoteConfig::SetDisplayName(char const*)>:
 800f0a0:	2217      	movs	r2, #23
 800f0a2:	4809      	ldr	r0, [pc, #36]	; (800f0c8 <RemoteConfig::SetDisplayName(char const*)+0x28>)
 800f0a4:	b508      	push	{r3, lr}
 800f0a6:	1e4b      	subs	r3, r1, #1
 800f0a8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800f0ac:	b911      	cbnz	r1, 800f0b4 <RemoteConfig::SetDisplayName(char const*)+0x14>
 800f0ae:	f005 fb95 	bl	80147dc <memset>
 800f0b2:	e003      	b.n	800f0bc <RemoteConfig::SetDisplayName(char const*)+0x1c>
 800f0b4:	3a01      	subs	r2, #1
 800f0b6:	f800 1b01 	strb.w	r1, [r0], #1
 800f0ba:	d1f5      	bne.n	800f0a8 <RemoteConfig::SetDisplayName(char const*)+0x8>
 800f0bc:	2200      	movs	r2, #0
 800f0be:	4b03      	ldr	r3, [pc, #12]	; (800f0cc <RemoteConfig::SetDisplayName(char const*)+0x2c>)
 800f0c0:	f883 2020 	strb.w	r2, [r3, #32]
 800f0c4:	bd08      	pop	{r3, pc}
 800f0c6:	bf00      	nop
 800f0c8:	20001969 	andcs	r1, r0, r9, ror #18
 800f0cc:	20001960 	andcs	r1, r0, r0, ror #18

0800f0d0 <RemoteConfig::HandleGet(void*, unsigned int)>:
 800f0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0d2:	4604      	mov	r4, r0
 800f0d4:	4616      	mov	r6, r2
 800f0d6:	460d      	mov	r5, r1
 800f0d8:	4f2a      	ldr	r7, [pc, #168]	; (800f184 <RemoteConfig::HandleGet(void*, unsigned int)+0xb4>)
 800f0da:	b085      	sub	sp, #20
 800f0dc:	b9b9      	cbnz	r1, 800f10e <RemoteConfig::HandleGet(void*, unsigned int)+0x3e>
 800f0de:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 800f0e2:	6839      	ldr	r1, [r7, #0]
 800f0e4:	aa03      	add	r2, sp, #12
 800f0e6:	3105      	adds	r1, #5
 800f0e8:	9303      	str	r3, [sp, #12]
 800f0ea:	f000 fc03 	bl	800f8f4 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800f0ee:	1e03      	subs	r3, r0, #0
 800f0f0:	da1d      	bge.n	800f12e <RemoteConfig::HandleGet(void*, unsigned int)+0x5e>
 800f0f2:	f642 1305 	movw	r3, #10501	; 0x2905
 800f0f6:	220b      	movs	r2, #11
 800f0f8:	9300      	str	r3, [sp, #0]
 800f0fa:	4923      	ldr	r1, [pc, #140]	; (800f188 <RemoteConfig::HandleGet(void*, unsigned int)+0xb8>)
 800f0fc:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800f100:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800f104:	f002 f998 	bl	8011438 <udp_send>
 800f108:	200c      	movs	r0, #12
 800f10a:	b005      	add	sp, #20
 800f10c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f10e:	9203      	str	r2, [sp, #12]
 800f110:	aa03      	add	r2, sp, #12
 800f112:	6039      	str	r1, [r7, #0]
 800f114:	f000 fbee 	bl	800f8f4 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800f118:	1e03      	subs	r3, r0, #0
 800f11a:	da08      	bge.n	800f12e <RemoteConfig::HandleGet(void*, unsigned int)+0x5e>
 800f11c:	2e0b      	cmp	r6, #11
 800f11e:	4632      	mov	r2, r6
 800f120:	4628      	mov	r0, r5
 800f122:	bf28      	it	cs
 800f124:	220b      	movcs	r2, #11
 800f126:	4918      	ldr	r1, [pc, #96]	; (800f188 <RemoteConfig::HandleGet(void*, unsigned int)+0xb8>)
 800f128:	f005 fb36 	bl	8014798 <memcpy>
 800f12c:	e7ec      	b.n	800f108 <RemoteConfig::HandleGet(void*, unsigned int)+0x38>
 800f12e:	221c      	movs	r2, #28
 800f130:	4353      	muls	r3, r2
 800f132:	4916      	ldr	r1, [pc, #88]	; (800f18c <RemoteConfig::HandleGet(void*, unsigned int)+0xbc>)
 800f134:	18ca      	adds	r2, r1, r3
 800f136:	6852      	ldr	r2, [r2, #4]
 800f138:	58cb      	ldr	r3, [r1, r3]
 800f13a:	ea4f 0c62 	mov.w	ip, r2, asr #1
 800f13e:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800f142:	07d2      	lsls	r2, r2, #31
 800f144:	bf48      	it	mi
 800f146:	f854 200c 	ldrmi.w	r2, [r4, ip]
 800f14a:	a903      	add	r1, sp, #12
 800f14c:	bf48      	it	mi
 800f14e:	58d3      	ldrmi	r3, [r2, r3]
 800f150:	4798      	blx	r3
 800f152:	b96d      	cbnz	r5, 800f170 <RemoteConfig::HandleGet(void*, unsigned int)+0xa0>
 800f154:	f642 1305 	movw	r3, #10501	; 0x2905
 800f158:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800f15c:	9300      	str	r3, [sp, #0]
 800f15e:	6839      	ldr	r1, [r7, #0]
 800f160:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800f164:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800f168:	f002 f966 	bl	8011438 <udp_send>
 800f16c:	9803      	ldr	r0, [sp, #12]
 800f16e:	e7cc      	b.n	800f10a <RemoteConfig::HandleGet(void*, unsigned int)+0x3a>
 800f170:	9a03      	ldr	r2, [sp, #12]
 800f172:	4628      	mov	r0, r5
 800f174:	42b2      	cmp	r2, r6
 800f176:	bf28      	it	cs
 800f178:	4632      	movcs	r2, r6
 800f17a:	6839      	ldr	r1, [r7, #0]
 800f17c:	f005 fb17 	bl	80147ae <memmove>
 800f180:	e7f4      	b.n	800f16c <RemoteConfig::HandleGet(void*, unsigned int)+0x9c>
 800f182:	bf00      	nop
 800f184:	2000195c 	andcs	r1, r0, ip, asr r9
 800f188:	080171b7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, r8, ip, sp, lr}
 800f18c:	08017454 	stmdaeq	r1, {r2, r4, r6, sl, ip, sp, lr}

0800f190 <RemoteConfig::HandleGetNoParams()>:
 800f190:	2200      	movs	r2, #0
 800f192:	4611      	mov	r1, r2
 800f194:	f7ff bf9c 	b.w	800f0d0 <RemoteConfig::HandleGet(void*, unsigned int)>

0800f198 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)>:
 800f198:	b510      	push	{r4, lr}
 800f19a:	460c      	mov	r4, r1
 800f19c:	4b07      	ldr	r3, [pc, #28]	; (800f1bc <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x24>)
 800f19e:	b08a      	sub	sp, #40	; 0x28
 800f1a0:	6819      	ldr	r1, [r3, #0]
 800f1a2:	a801      	add	r0, sp, #4
 800f1a4:	f000 f9fc 	bl	800f5a0 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 800f1a8:	4905      	ldr	r1, [pc, #20]	; (800f1c0 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x28>)
 800f1aa:	4623      	mov	r3, r4
 800f1ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f1b0:	6809      	ldr	r1, [r1, #0]
 800f1b2:	a801      	add	r0, sp, #4
 800f1b4:	f000 fb18 	bl	800f7e8 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>
 800f1b8:	b00a      	add	sp, #40	; 0x28
 800f1ba:	bd10      	pop	{r4, pc}
 800f1bc:	200029b0 			; <UNDEFINED> instruction: 0x200029b0
 800f1c0:	2000195c 	andcs	r1, r0, ip, asr r9

0800f1c4 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)>:
 800f1c4:	b513      	push	{r0, r1, r4, lr}
 800f1c6:	460c      	mov	r4, r1
 800f1c8:	4b07      	ldr	r3, [pc, #28]	; (800f1e8 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x24>)
 800f1ca:	a801      	add	r0, sp, #4
 800f1cc:	6819      	ldr	r1, [r3, #0]
 800f1ce:	f003 f883 	bl	80122d8 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800f1d2:	4906      	ldr	r1, [pc, #24]	; (800f1ec <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x28>)
 800f1d4:	4623      	mov	r3, r4
 800f1d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f1da:	6809      	ldr	r1, [r1, #0]
 800f1dc:	a801      	add	r0, sp, #4
 800f1de:	f003 fa69 	bl	80126b4 <NetworkParams::Save(char*, unsigned int, unsigned int&)>
 800f1e2:	b002      	add	sp, #8
 800f1e4:	bd10      	pop	{r4, pc}
 800f1e6:	bf00      	nop
 800f1e8:	200029ac 	andcs	r2, r0, ip, lsr #19
 800f1ec:	2000195c 	andcs	r1, r0, ip, asr r9

0800f1f0 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)>:
 800f1f0:	b510      	push	{r4, lr}
 800f1f2:	460c      	mov	r4, r1
 800f1f4:	4b07      	ldr	r3, [pc, #28]	; (800f214 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x24>)
 800f1f6:	b0a4      	sub	sp, #144	; 0x90
 800f1f8:	6819      	ldr	r1, [r3, #0]
 800f1fa:	a801      	add	r0, sp, #4
 800f1fc:	f7fc f8f8 	bl	800b3f0 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 800f200:	4905      	ldr	r1, [pc, #20]	; (800f218 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x28>)
 800f202:	4623      	mov	r3, r4
 800f204:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f208:	6809      	ldr	r1, [r1, #0]
 800f20a:	a801      	add	r0, sp, #4
 800f20c:	f7fc fcba 	bl	800bb84 <ArtNetParams::Save(char*, unsigned int, unsigned int&)>
 800f210:	b024      	add	sp, #144	; 0x90
 800f212:	bd10      	pop	{r4, pc}
 800f214:	200029a4 	andcs	r2, r0, r4, lsr #19
 800f218:	2000195c 	andcs	r1, r0, ip, asr r9

0800f21c <RemoteConfig::HandleGetDevicesTxt(unsigned int&)>:
 800f21c:	b510      	push	{r4, lr}
 800f21e:	460c      	mov	r4, r1
 800f220:	4b07      	ldr	r3, [pc, #28]	; (800f240 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)+0x24>)
 800f222:	b08c      	sub	sp, #48	; 0x30
 800f224:	6819      	ldr	r1, [r3, #0]
 800f226:	a801      	add	r0, sp, #4
 800f228:	f7fd ff50 	bl	800d0cc <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>
 800f22c:	4905      	ldr	r1, [pc, #20]	; (800f244 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)+0x28>)
 800f22e:	4623      	mov	r3, r4
 800f230:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f234:	6809      	ldr	r1, [r1, #0]
 800f236:	a801      	add	r0, sp, #4
 800f238:	f7fe f9ee 	bl	800d618 <WS28xxDmxParams::Save(char*, unsigned int, unsigned int&)>
 800f23c:	b00c      	add	sp, #48	; 0x30
 800f23e:	bd10      	pop	{r4, pc}
 800f240:	200029b4 			; <UNDEFINED> instruction: 0x200029b4
 800f244:	2000195c 	andcs	r1, r0, ip, asr r9

0800f248 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)>:
 800f248:	b510      	push	{r4, lr}
 800f24a:	460c      	mov	r4, r1
 800f24c:	4b07      	ldr	r3, [pc, #28]	; (800f26c <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x24>)
 800f24e:	b08a      	sub	sp, #40	; 0x28
 800f250:	6819      	ldr	r1, [r3, #0]
 800f252:	4668      	mov	r0, sp
 800f254:	f003 ffe4 	bl	8013220 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 800f258:	4905      	ldr	r1, [pc, #20]	; (800f270 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x28>)
 800f25a:	4623      	mov	r3, r4
 800f25c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f260:	4668      	mov	r0, sp
 800f262:	6809      	ldr	r1, [r1, #0]
 800f264:	f004 f914 	bl	8013490 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>
 800f268:	b00a      	add	sp, #40	; 0x28
 800f26a:	bd10      	pop	{r4, pc}
 800f26c:	200029a8 	andcs	r2, r0, r8, lsr #19
 800f270:	2000195c 	andcs	r1, r0, ip, asr r9

0800f274 <RemoteConfig::HandleSet(void*, unsigned int)>:
 800f274:	b530      	push	{r4, r5, lr}
 800f276:	b085      	sub	sp, #20
 800f278:	4604      	mov	r4, r0
 800f27a:	9201      	str	r2, [sp, #4]
 800f27c:	b9d1      	cbnz	r1, 800f2b4 <RemoteConfig::HandleSet(void*, unsigned int)+0x40>
 800f27e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800f282:	9303      	str	r3, [sp, #12]
 800f284:	4b1b      	ldr	r3, [pc, #108]	; (800f2f4 <RemoteConfig::HandleSet(void*, unsigned int)+0x80>)
 800f286:	aa03      	add	r2, sp, #12
 800f288:	6819      	ldr	r1, [r3, #0]
 800f28a:	3101      	adds	r1, #1
 800f28c:	f000 fb32 	bl	800f8f4 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800f290:	2800      	cmp	r0, #0
 800f292:	db0d      	blt.n	800f2b0 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 800f294:	221c      	movs	r2, #28
 800f296:	4b18      	ldr	r3, [pc, #96]	; (800f2f8 <RemoteConfig::HandleSet(void*, unsigned int)+0x84>)
 800f298:	fb02 3300 	mla	r3, r2, r0, r3
 800f29c:	68da      	ldr	r2, [r3, #12]
 800f29e:	689b      	ldr	r3, [r3, #8]
 800f2a0:	1051      	asrs	r1, r2, #1
 800f2a2:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800f2a6:	07d2      	lsls	r2, r2, #31
 800f2a8:	bf44      	itt	mi
 800f2aa:	5862      	ldrmi	r2, [r4, r1]
 800f2ac:	58d3      	ldrmi	r3, [r2, r3]
 800f2ae:	4798      	blx	r3
 800f2b0:	b005      	add	sp, #20
 800f2b2:	bd30      	pop	{r4, r5, pc}
 800f2b4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800f2b8:	4613      	mov	r3, r2
 800f2ba:	d8f9      	bhi.n	800f2b0 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 800f2bc:	2200      	movs	r2, #0
 800f2be:	460d      	mov	r5, r1
 800f2c0:	490e      	ldr	r1, [pc, #56]	; (800f2fc <RemoteConfig::HandleSet(void*, unsigned int)+0x88>)
 800f2c2:	f8c0 25e8 	str.w	r2, [r0, #1512]	; 0x5e8
 800f2c6:	7809      	ldrb	r1, [r1, #0]
 800f2c8:	07c9      	lsls	r1, r1, #31
 800f2ca:	d50a      	bpl.n	800f2e2 <RemoteConfig::HandleSet(void*, unsigned int)+0x6e>
 800f2cc:	7829      	ldrb	r1, [r5, #0]
 800f2ce:	297b      	cmp	r1, #123	; 0x7b
 800f2d0:	d107      	bne.n	800f2e2 <RemoteConfig::HandleSet(void*, unsigned int)+0x6e>
 800f2d2:	3b01      	subs	r3, #1
 800f2d4:	b299      	uxth	r1, r3
 800f2d6:	4628      	mov	r0, r5
 800f2d8:	f004 fa4c 	bl	8013774 <properties::convert_json_file(char*, unsigned short, bool)>
 800f2dc:	1e03      	subs	r3, r0, #0
 800f2de:	dde7      	ble.n	800f2b0 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 800f2e0:	b29b      	uxth	r3, r3
 800f2e2:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
 800f2e6:	4b03      	ldr	r3, [pc, #12]	; (800f2f4 <RemoteConfig::HandleSet(void*, unsigned int)+0x80>)
 800f2e8:	4620      	mov	r0, r4
 800f2ea:	601d      	str	r5, [r3, #0]
 800f2ec:	aa01      	add	r2, sp, #4
 800f2ee:	1c69      	adds	r1, r5, #1
 800f2f0:	e7cc      	b.n	800f28c <RemoteConfig::HandleSet(void*, unsigned int)+0x18>
 800f2f2:	bf00      	nop
 800f2f4:	2000195c 	andcs	r1, r0, ip, asr r9
 800f2f8:	08017454 	stmdaeq	r1, {r2, r4, r6, sl, ip, sp, lr}
 800f2fc:	2000a8d4 	ldrdcs	sl, [r0], -r4

0800f300 <RemoteConfig::Run()>:
 800f300:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800f304:	f890 55d4 	ldrb.w	r5, [r0, #1492]	; 0x5d4
 800f308:	2d00      	cmp	r5, #0
 800f30a:	d15d      	bne.n	800f3c8 <RemoteConfig::Run()+0xc8>
 800f30c:	4604      	mov	r4, r0
 800f30e:	4e4a      	ldr	r6, [pc, #296]	; (800f438 <RemoteConfig::Run()+0x138>)
 800f310:	300c      	adds	r0, #12
 800f312:	f000 fdf3 	bl	800fefc <HttpDaemon::Run()>
 800f316:	4631      	mov	r1, r6
 800f318:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800f31c:	f10d 030e 	add.w	r3, sp, #14
 800f320:	f504 62bc 	add.w	r2, r4, #1504	; 0x5e0
 800f324:	f002 f862 	bl	80113ec <udp_recv2>
 800f328:	2803      	cmp	r0, #3
 800f32a:	f8c4 05e4 	str.w	r0, [r4, #1508]	; 0x5e4
 800f32e:	d94b      	bls.n	800f3c8 <RemoteConfig::Run()+0xc8>
 800f330:	6831      	ldr	r1, [r6, #0]
 800f332:	1e43      	subs	r3, r0, #1
 800f334:	5cca      	ldrb	r2, [r1, r3]
 800f336:	2a0a      	cmp	r2, #10
 800f338:	bf18      	it	ne
 800f33a:	4603      	movne	r3, r0
 800f33c:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
 800f340:	7808      	ldrb	r0, [r1, #0]
 800f342:	283f      	cmp	r0, #63	; 0x3f
 800f344:	d135      	bne.n	800f3b2 <RemoteConfig::Run()+0xb2>
 800f346:	483d      	ldr	r0, [pc, #244]	; (800f43c <RemoteConfig::Run()+0x13c>)
 800f348:	462a      	mov	r2, r5
 800f34a:	4607      	mov	r7, r0
 800f34c:	3b01      	subs	r3, #1
 800f34e:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
 800f352:	7b86      	ldrb	r6, [r0, #14]
 800f354:	8985      	ldrh	r5, [r0, #12]
 800f356:	b176      	cbz	r6, 800f376 <RemoteConfig::Run()+0x76>
 800f358:	42ab      	cmp	r3, r5
 800f35a:	d80e      	bhi.n	800f37a <RemoteConfig::Run()+0x7a>
 800f35c:	3201      	adds	r2, #1
 800f35e:	2a09      	cmp	r2, #9
 800f360:	f100 0010 	add.w	r0, r0, #16
 800f364:	d1f5      	bne.n	800f352 <RemoteConfig::Run()+0x52>
 800f366:	f642 1305 	movw	r3, #10501	; 0x2905
 800f36a:	9300      	str	r3, [sp, #0]
 800f36c:	2208      	movs	r2, #8
 800f36e:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800f372:	4933      	ldr	r1, [pc, #204]	; (800f440 <RemoteConfig::Run()+0x140>)
 800f374:	e052      	b.n	800f41c <RemoteConfig::Run()+0x11c>
 800f376:	42ab      	cmp	r3, r5
 800f378:	d1f0      	bne.n	800f35c <RemoteConfig::Run()+0x5c>
 800f37a:	6886      	ldr	r6, [r0, #8]
 800f37c:	f101 0c01 	add.w	ip, r1, #1
 800f380:	4435      	add	r5, r6
 800f382:	42b5      	cmp	r5, r6
 800f384:	d10b      	bne.n	800f39e <RemoteConfig::Run()+0x9e>
 800f386:	0113      	lsls	r3, r2, #4
 800f388:	eb07 1202 	add.w	r2, r7, r2, lsl #4
 800f38c:	6852      	ldr	r2, [r2, #4]
 800f38e:	58fb      	ldr	r3, [r7, r3]
 800f390:	1051      	asrs	r1, r2, #1
 800f392:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800f396:	07d2      	lsls	r2, r2, #31
 800f398:	d408      	bmi.n	800f3ac <RemoteConfig::Run()+0xac>
 800f39a:	4798      	blx	r3
 800f39c:	e014      	b.n	800f3c8 <RemoteConfig::Run()+0xc8>
 800f39e:	f81c 8b01 	ldrb.w	r8, [ip], #1
 800f3a2:	f816 eb01 	ldrb.w	lr, [r6], #1
 800f3a6:	45f0      	cmp	r8, lr
 800f3a8:	d0eb      	beq.n	800f382 <RemoteConfig::Run()+0x82>
 800f3aa:	e7d7      	b.n	800f35c <RemoteConfig::Run()+0x5c>
 800f3ac:	5862      	ldr	r2, [r4, r1]
 800f3ae:	58d3      	ldr	r3, [r2, r3]
 800f3b0:	e7f3      	b.n	800f39a <RemoteConfig::Run()+0x9a>
 800f3b2:	f894 25d5 	ldrb.w	r2, [r4, #1493]	; 0x5d5
 800f3b6:	b93a      	cbnz	r2, 800f3c8 <RemoteConfig::Run()+0xc8>
 800f3b8:	2823      	cmp	r0, #35	; 0x23
 800f3ba:	d108      	bne.n	800f3ce <RemoteConfig::Run()+0xce>
 800f3bc:	4611      	mov	r1, r2
 800f3be:	4620      	mov	r0, r4
 800f3c0:	f8c4 25e8 	str.w	r2, [r4, #1512]	; 0x5e8
 800f3c4:	f7ff ff56 	bl	800f274 <RemoteConfig::HandleSet(void*, unsigned int)>
 800f3c8:	b004      	add	sp, #16
 800f3ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3ce:	2821      	cmp	r0, #33	; 0x21
 800f3d0:	d1fa      	bne.n	800f3c8 <RemoteConfig::Run()+0xc8>
 800f3d2:	3b01      	subs	r3, #1
 800f3d4:	2b05      	cmp	r3, #5
 800f3d6:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
 800f3da:	d918      	bls.n	800f40e <RemoteConfig::Run()+0x10e>
 800f3dc:	1c4a      	adds	r2, r1, #1
 800f3de:	4610      	mov	r0, r2
 800f3e0:	4d18      	ldr	r5, [pc, #96]	; (800f444 <RemoteConfig::Run()+0x144>)
 800f3e2:	f101 0c06 	add.w	ip, r1, #6
 800f3e6:	4560      	cmp	r0, ip
 800f3e8:	d01d      	beq.n	800f426 <RemoteConfig::Run()+0x126>
 800f3ea:	f810 7b01 	ldrb.w	r7, [r0], #1
 800f3ee:	f815 6b01 	ldrb.w	r6, [r5], #1
 800f3f2:	42b7      	cmp	r7, r6
 800f3f4:	d0f7      	beq.n	800f3e6 <RemoteConfig::Run()+0xe6>
 800f3f6:	2b08      	cmp	r3, #8
 800f3f8:	d909      	bls.n	800f40e <RemoteConfig::Run()+0x10e>
 800f3fa:	4b13      	ldr	r3, [pc, #76]	; (800f448 <RemoteConfig::Run()+0x148>)
 800f3fc:	3109      	adds	r1, #9
 800f3fe:	428a      	cmp	r2, r1
 800f400:	d017      	beq.n	800f432 <RemoteConfig::Run()+0x132>
 800f402:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f406:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f40a:	4285      	cmp	r5, r0
 800f40c:	d0f7      	beq.n	800f3fe <RemoteConfig::Run()+0xfe>
 800f40e:	f642 1305 	movw	r3, #10501	; 0x2905
 800f412:	2208      	movs	r2, #8
 800f414:	9300      	str	r3, [sp, #0]
 800f416:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800f41a:	490c      	ldr	r1, [pc, #48]	; (800f44c <RemoteConfig::Run()+0x14c>)
 800f41c:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800f420:	f002 f80a 	bl	8011438 <udp_send>
 800f424:	e7d0      	b.n	800f3c8 <RemoteConfig::Run()+0xc8>
 800f426:	2300      	movs	r3, #0
 800f428:	4a09      	ldr	r2, [pc, #36]	; (800f450 <RemoteConfig::Run()+0x150>)
 800f42a:	011b      	lsls	r3, r3, #4
 800f42c:	4620      	mov	r0, r4
 800f42e:	58d3      	ldr	r3, [r2, r3]
 800f430:	e7b3      	b.n	800f39a <RemoteConfig::Run()+0x9a>
 800f432:	2301      	movs	r3, #1
 800f434:	e7f8      	b.n	800f428 <RemoteConfig::Run()+0x128>
 800f436:	bf00      	nop
 800f438:	2000195c 	andcs	r1, r0, ip, asr r9
 800f43c:	0801734c 	stmdaeq	r1, {r2, r3, r6, r8, r9, ip, sp, lr}
 800f440:	080171db 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, r8, ip, sp, lr}
 800f444:	080171c3 	stmdaeq	r1, {r0, r1, r6, r7, r8, ip, sp, lr}
 800f448:	080171c9 	stmdaeq	r1, {r0, r3, r6, r7, r8, ip, sp, lr}
 800f44c:	080171d2 	stmdaeq	r1, {r1, r4, r6, r7, r8, ip, sp, lr}
 800f450:	080173dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, r9, ip, sp, lr}

0800f454 <RemoteConfig::HandleSetRconfig()>:
 800f454:	b510      	push	{r4, lr}
 800f456:	4604      	mov	r4, r0
 800f458:	4b09      	ldr	r3, [pc, #36]	; (800f480 <RemoteConfig::HandleSetRconfig()+0x2c>)
 800f45a:	b08a      	sub	sp, #40	; 0x28
 800f45c:	6819      	ldr	r1, [r3, #0]
 800f45e:	a801      	add	r0, sp, #4
 800f460:	f000 f89e 	bl	800f5a0 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 800f464:	4b07      	ldr	r3, [pc, #28]	; (800f484 <RemoteConfig::HandleSetRconfig()+0x30>)
 800f466:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800f46a:	6819      	ldr	r1, [r3, #0]
 800f46c:	a801      	add	r0, sp, #4
 800f46e:	f000 f8ad 	bl	800f5cc <RemoteConfigParams::Load(char const*, unsigned int)>
 800f472:	4621      	mov	r1, r4
 800f474:	a801      	add	r0, sp, #4
 800f476:	f000 f9c4 	bl	800f802 <RemoteConfigParams::Set(RemoteConfig*)>
 800f47a:	b00a      	add	sp, #40	; 0x28
 800f47c:	bd10      	pop	{r4, pc}
 800f47e:	bf00      	nop
 800f480:	200029b0 			; <UNDEFINED> instruction: 0x200029b0
 800f484:	2000195c 	andcs	r1, r0, ip, asr r9

0800f488 <RemoteConfig::HandleSetNetworkTxt()>:
 800f488:	b513      	push	{r0, r1, r4, lr}
 800f48a:	4604      	mov	r4, r0
 800f48c:	4b06      	ldr	r3, [pc, #24]	; (800f4a8 <RemoteConfig::HandleSetNetworkTxt()+0x20>)
 800f48e:	a801      	add	r0, sp, #4
 800f490:	6819      	ldr	r1, [r3, #0]
 800f492:	f002 ff21 	bl	80122d8 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800f496:	4b05      	ldr	r3, [pc, #20]	; (800f4ac <RemoteConfig::HandleSetNetworkTxt()+0x24>)
 800f498:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800f49c:	6819      	ldr	r1, [r3, #0]
 800f49e:	a801      	add	r0, sp, #4
 800f4a0:	f002 ff3a 	bl	8012318 <NetworkParams::Load(char const*, unsigned int)>
 800f4a4:	b002      	add	sp, #8
 800f4a6:	bd10      	pop	{r4, pc}
 800f4a8:	200029ac 	andcs	r2, r0, ip, lsr #19
 800f4ac:	2000195c 	andcs	r1, r0, ip, asr r9

0800f4b0 <RemoteConfig::HandleSetArtnetTxt()>:
 800f4b0:	b510      	push	{r4, lr}
 800f4b2:	4604      	mov	r4, r0
 800f4b4:	4b07      	ldr	r3, [pc, #28]	; (800f4d4 <RemoteConfig::HandleSetArtnetTxt()+0x24>)
 800f4b6:	b0a4      	sub	sp, #144	; 0x90
 800f4b8:	6819      	ldr	r1, [r3, #0]
 800f4ba:	a801      	add	r0, sp, #4
 800f4bc:	f7fb ff98 	bl	800b3f0 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 800f4c0:	4b05      	ldr	r3, [pc, #20]	; (800f4d8 <RemoteConfig::HandleSetArtnetTxt()+0x28>)
 800f4c2:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800f4c6:	6819      	ldr	r1, [r3, #0]
 800f4c8:	a801      	add	r0, sp, #4
 800f4ca:	f7fb ffc3 	bl	800b454 <ArtNetParams::Load(char const*, unsigned int)>
 800f4ce:	b024      	add	sp, #144	; 0x90
 800f4d0:	bd10      	pop	{r4, pc}
 800f4d2:	bf00      	nop
 800f4d4:	200029a4 	andcs	r2, r0, r4, lsr #19
 800f4d8:	2000195c 	andcs	r1, r0, ip, asr r9

0800f4dc <RemoteConfig::HandleSetDevicesTxt()>:
 800f4dc:	b510      	push	{r4, lr}
 800f4de:	4604      	mov	r4, r0
 800f4e0:	4b07      	ldr	r3, [pc, #28]	; (800f500 <RemoteConfig::HandleSetDevicesTxt()+0x24>)
 800f4e2:	b08c      	sub	sp, #48	; 0x30
 800f4e4:	6819      	ldr	r1, [r3, #0]
 800f4e6:	a801      	add	r0, sp, #4
 800f4e8:	f7fd fdf0 	bl	800d0cc <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>
 800f4ec:	4b05      	ldr	r3, [pc, #20]	; (800f504 <RemoteConfig::HandleSetDevicesTxt()+0x28>)
 800f4ee:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800f4f2:	6819      	ldr	r1, [r3, #0]
 800f4f4:	a801      	add	r0, sp, #4
 800f4f6:	f7fd fe29 	bl	800d14c <WS28xxDmxParams::Load(char const*, unsigned int)>
 800f4fa:	b00c      	add	sp, #48	; 0x30
 800f4fc:	bd10      	pop	{r4, pc}
 800f4fe:	bf00      	nop
 800f500:	200029b4 			; <UNDEFINED> instruction: 0x200029b4
 800f504:	2000195c 	andcs	r1, r0, ip, asr r9

0800f508 <RemoteConfig::HandleSetDisplayTxt()>:
 800f508:	b510      	push	{r4, lr}
 800f50a:	4604      	mov	r4, r0
 800f50c:	4b07      	ldr	r3, [pc, #28]	; (800f52c <RemoteConfig::HandleSetDisplayTxt()+0x24>)
 800f50e:	b08a      	sub	sp, #40	; 0x28
 800f510:	6819      	ldr	r1, [r3, #0]
 800f512:	4668      	mov	r0, sp
 800f514:	f003 fe84 	bl	8013220 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 800f518:	4b05      	ldr	r3, [pc, #20]	; (800f530 <RemoteConfig::HandleSetDisplayTxt()+0x28>)
 800f51a:	4668      	mov	r0, sp
 800f51c:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800f520:	6819      	ldr	r1, [r3, #0]
 800f522:	f003 fe97 	bl	8013254 <DisplayUdfParams::Load(char const*, unsigned int)>
 800f526:	b00a      	add	sp, #40	; 0x28
 800f528:	bd10      	pop	{r4, pc}
 800f52a:	bf00      	nop
 800f52c:	200029a8 	andcs	r2, r0, r8, lsr #19
 800f530:	2000195c 	andcs	r1, r0, ip, asr r9

0800f534 <RemoteConfig::HandleFactory()>:
 800f534:	b538      	push	{r3, r4, r5, lr}
 800f536:	2400      	movs	r4, #0
 800f538:	4d04      	ldr	r5, [pc, #16]	; (800f54c <RemoteConfig::HandleFactory()+0x18>)
 800f53a:	4621      	mov	r1, r4
 800f53c:	6828      	ldr	r0, [r5, #0]
 800f53e:	3401      	adds	r4, #1
 800f540:	f000 ff12 	bl	8010368 <SpiFlashStore::ResetSetList(spiflashstore::Store)>
 800f544:	2c1c      	cmp	r4, #28
 800f546:	d1f8      	bne.n	800f53a <RemoteConfig::HandleFactory()+0x6>
 800f548:	bd38      	pop	{r3, r4, r5, pc}
 800f54a:	bf00      	nop
 800f54c:	2000299c 	mulcs	r0, ip, r9

0800f550 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800f550:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f552:	460b      	mov	r3, r1
 800f554:	8885      	ldrh	r5, [r0, #4]
 800f556:	88c1      	ldrh	r1, [r0, #6]
 800f558:	42a9      	cmp	r1, r5
 800f55a:	d214      	bcs.n	800f586 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800f55c:	4604      	mov	r4, r0
 800f55e:	6800      	ldr	r0, [r0, #0]
 800f560:	1a6d      	subs	r5, r5, r1
 800f562:	4408      	add	r0, r1
 800f564:	7a21      	ldrb	r1, [r4, #8]
 800f566:	b91a      	cbnz	r2, 800f570 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800f568:	b919      	cbnz	r1, 800f572 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800f56a:	4a0a      	ldr	r2, [pc, #40]	; (800f594 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800f56c:	9100      	str	r1, [sp, #0]
 800f56e:	e002      	b.n	800f576 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800f570:	b159      	cbz	r1, 800f58a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800f572:	9200      	str	r2, [sp, #0]
 800f574:	4a08      	ldr	r2, [pc, #32]	; (800f598 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800f576:	4629      	mov	r1, r5
 800f578:	f7f9 ff34 	bl	80093e4 <snprintf>
 800f57c:	4285      	cmp	r5, r0
 800f57e:	bfa2      	ittt	ge
 800f580:	88e3      	ldrhge	r3, [r4, #6]
 800f582:	181b      	addge	r3, r3, r0
 800f584:	80e3      	strhge	r3, [r4, #6]
 800f586:	b003      	add	sp, #12
 800f588:	bd30      	pop	{r4, r5, pc}
 800f58a:	2201      	movs	r2, #1
 800f58c:	9200      	str	r2, [sp, #0]
 800f58e:	4a03      	ldr	r2, [pc, #12]	; (800f59c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800f590:	e7f1      	b.n	800f576 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800f592:	bf00      	nop
 800f594:	08016c51 	stmdaeq	r1, {r0, r4, r6, sl, fp, sp, lr}
 800f598:	08016c48 	stmdaeq	r1, {r3, r6, sl, fp, sp, lr}
 800f59c:	08016c52 	stmdaeq	r1, {r1, r4, r6, sl, fp, sp, lr}

0800f5a0 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>:
 800f5a0:	b510      	push	{r4, lr}
 800f5a2:	4604      	mov	r4, r0
 800f5a4:	2220      	movs	r2, #32
 800f5a6:	f840 1b04 	str.w	r1, [r0], #4
 800f5aa:	2100      	movs	r1, #0
 800f5ac:	f005 f916 	bl	80147dc <memset>
 800f5b0:	4620      	mov	r0, r4
 800f5b2:	bd10      	pop	{r4, pc}

0800f5b4 <RemoteConfigParams::Load()>:
 800f5b4:	b508      	push	{r3, lr}
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	4601      	mov	r1, r0
 800f5ba:	6043      	str	r3, [r0, #4]
 800f5bc:	6800      	ldr	r0, [r0, #0]
 800f5be:	b120      	cbz	r0, 800f5ca <RemoteConfigParams::Load()+0x16>
 800f5c0:	6803      	ldr	r3, [r0, #0]
 800f5c2:	3104      	adds	r1, #4
 800f5c4:	68db      	ldr	r3, [r3, #12]
 800f5c6:	4798      	blx	r3
 800f5c8:	2001      	movs	r0, #1
 800f5ca:	bd08      	pop	{r3, pc}

0800f5cc <RemoteConfigParams::Load(char const*, unsigned int)>:
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f5d0:	460d      	mov	r5, r1
 800f5d2:	4616      	mov	r6, r2
 800f5d4:	4604      	mov	r4, r0
 800f5d6:	6043      	str	r3, [r0, #4]
 800f5d8:	4602      	mov	r2, r0
 800f5da:	490a      	ldr	r1, [pc, #40]	; (800f604 <RemoteConfigParams::Load(char const*, unsigned int)+0x38>)
 800f5dc:	4668      	mov	r0, sp
 800f5de:	f004 fa4b 	bl	8013a78 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800f5e2:	4632      	mov	r2, r6
 800f5e4:	4629      	mov	r1, r5
 800f5e6:	4668      	mov	r0, sp
 800f5e8:	f004 fa4a 	bl	8013a80 <ReadConfigFile::Read(char const*, unsigned int)>
 800f5ec:	4621      	mov	r1, r4
 800f5ee:	f851 0b04 	ldr.w	r0, [r1], #4
 800f5f2:	6803      	ldr	r3, [r0, #0]
 800f5f4:	689b      	ldr	r3, [r3, #8]
 800f5f6:	4798      	blx	r3
 800f5f8:	4668      	mov	r0, sp
 800f5fa:	f004 fa40 	bl	8013a7e <ReadConfigFile::~ReadConfigFile()>
 800f5fe:	b002      	add	sp, #8
 800f600:	bd70      	pop	{r4, r5, r6, pc}
 800f602:	bf00      	nop
 800f604:	0800f6c5 	stmdaeq	r0, {r0, r2, r6, r7, r9, sl, ip, sp, lr, pc}

0800f608 <RemoteConfigParams::SetBool(unsigned char, unsigned int)>:
 800f608:	6843      	ldr	r3, [r0, #4]
 800f60a:	b111      	cbz	r1, 800f612 <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0xa>
 800f60c:	4313      	orrs	r3, r2
 800f60e:	6043      	str	r3, [r0, #4]
 800f610:	4770      	bx	lr
 800f612:	ea23 0302 	bic.w	r3, r3, r2
 800f616:	e7fa      	b.n	800f60e <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0x6>

0800f618 <RemoteConfigParams::callbackFunction(char const*)>:
 800f618:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f61a:	460d      	mov	r5, r1
 800f61c:	4604      	mov	r4, r0
 800f61e:	4923      	ldr	r1, [pc, #140]	; (800f6ac <RemoteConfigParams::callbackFunction(char const*)+0x94>)
 800f620:	4628      	mov	r0, r5
 800f622:	f10d 0203 	add.w	r2, sp, #3
 800f626:	f004 fb8d 	bl	8013d44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800f62a:	b940      	cbnz	r0, 800f63e <RemoteConfigParams::callbackFunction(char const*)+0x26>
 800f62c:	2201      	movs	r2, #1
 800f62e:	4620      	mov	r0, r4
 800f630:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800f634:	b003      	add	sp, #12
 800f636:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f63a:	f7ff bfe5 	b.w	800f608 <RemoteConfigParams::SetBool(unsigned char, unsigned int)>
 800f63e:	4628      	mov	r0, r5
 800f640:	491b      	ldr	r1, [pc, #108]	; (800f6b0 <RemoteConfigParams::callbackFunction(char const*)+0x98>)
 800f642:	f10d 0203 	add.w	r2, sp, #3
 800f646:	f004 fb7d 	bl	8013d44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800f64a:	b908      	cbnz	r0, 800f650 <RemoteConfigParams::callbackFunction(char const*)+0x38>
 800f64c:	2202      	movs	r2, #2
 800f64e:	e7ee      	b.n	800f62e <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800f650:	4628      	mov	r0, r5
 800f652:	4918      	ldr	r1, [pc, #96]	; (800f6b4 <RemoteConfigParams::callbackFunction(char const*)+0x9c>)
 800f654:	f10d 0203 	add.w	r2, sp, #3
 800f658:	f004 fb74 	bl	8013d44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800f65c:	b908      	cbnz	r0, 800f662 <RemoteConfigParams::callbackFunction(char const*)+0x4a>
 800f65e:	2204      	movs	r2, #4
 800f660:	e7e5      	b.n	800f62e <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800f662:	4628      	mov	r0, r5
 800f664:	4914      	ldr	r1, [pc, #80]	; (800f6b8 <RemoteConfigParams::callbackFunction(char const*)+0xa0>)
 800f666:	f10d 0203 	add.w	r2, sp, #3
 800f66a:	f004 fb6b 	bl	8013d44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800f66e:	b908      	cbnz	r0, 800f674 <RemoteConfigParams::callbackFunction(char const*)+0x5c>
 800f670:	2208      	movs	r2, #8
 800f672:	e7dc      	b.n	800f62e <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800f674:	4628      	mov	r0, r5
 800f676:	4911      	ldr	r1, [pc, #68]	; (800f6bc <RemoteConfigParams::callbackFunction(char const*)+0xa4>)
 800f678:	f10d 0203 	add.w	r2, sp, #3
 800f67c:	f004 fb62 	bl	8013d44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800f680:	b908      	cbnz	r0, 800f686 <RemoteConfigParams::callbackFunction(char const*)+0x6e>
 800f682:	2220      	movs	r2, #32
 800f684:	e7d3      	b.n	800f62e <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800f686:	2317      	movs	r3, #23
 800f688:	4628      	mov	r0, r5
 800f68a:	9301      	str	r3, [sp, #4]
 800f68c:	490c      	ldr	r1, [pc, #48]	; (800f6c0 <RemoteConfigParams::callbackFunction(char const*)+0xa8>)
 800f68e:	ab01      	add	r3, sp, #4
 800f690:	f104 020c 	add.w	r2, r4, #12
 800f694:	f004 fa28 	bl	8013ae8 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800f698:	b930      	cbnz	r0, 800f6a8 <RemoteConfigParams::callbackFunction(char const*)+0x90>
 800f69a:	9b01      	ldr	r3, [sp, #4]
 800f69c:	4423      	add	r3, r4
 800f69e:	7318      	strb	r0, [r3, #12]
 800f6a0:	6863      	ldr	r3, [r4, #4]
 800f6a2:	f043 0310 	orr.w	r3, r3, #16
 800f6a6:	6063      	str	r3, [r4, #4]
 800f6a8:	b003      	add	sp, #12
 800f6aa:	bd30      	pop	{r4, r5, pc}
 800f6ac:	080177ba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r8, r9, sl, ip, sp, lr}
 800f6b0:	080177db 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, r8, r9, sl, ip, sp, lr}
 800f6b4:	080177e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, r9, sl, ip, sp, lr}
 800f6b8:	080177f7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, ip, sp, lr}
 800f6bc:	08017805 	stmdaeq	r1, {r0, r2, fp, ip, sp, lr}
 800f6c0:	080177ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r8, r9, sl, ip, sp, lr}

0800f6c4 <RemoteConfigParams::staticCallbackFunction(void*, char const*)>:
 800f6c4:	f7ff bfa8 	b.w	800f618 <RemoteConfigParams::callbackFunction(char const*)>

0800f6c8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>:
 800f6c8:	b570      	push	{r4, r5, r6, lr}
 800f6ca:	4604      	mov	r4, r0
 800f6cc:	4615      	mov	r5, r2
 800f6ce:	461e      	mov	r6, r3
 800f6d0:	b086      	sub	sp, #24
 800f6d2:	3004      	adds	r0, #4
 800f6d4:	2900      	cmp	r1, #0
 800f6d6:	d041      	beq.n	800f75c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x94>
 800f6d8:	2220      	movs	r2, #32
 800f6da:	f005 f868 	bl	80147ae <memmove>
 800f6de:	4633      	mov	r3, r6
 800f6e0:	462a      	mov	r2, r5
 800f6e2:	4937      	ldr	r1, [pc, #220]	; (800f7c0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf8>)
 800f6e4:	a803      	add	r0, sp, #12
 800f6e6:	f004 f8f7 	bl	80138d8 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800f6ea:	6862      	ldr	r2, [r4, #4]
 800f6ec:	4935      	ldr	r1, [pc, #212]	; (800f7c4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xfc>)
 800f6ee:	f002 0201 	and.w	r2, r2, #1
 800f6f2:	a803      	add	r0, sp, #12
 800f6f4:	f7ff ff2c 	bl	800f550 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800f6f8:	6862      	ldr	r2, [r4, #4]
 800f6fa:	4933      	ldr	r1, [pc, #204]	; (800f7c8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x100>)
 800f6fc:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800f700:	a803      	add	r0, sp, #12
 800f702:	f7ff ff25 	bl	800f550 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800f706:	6862      	ldr	r2, [r4, #4]
 800f708:	4930      	ldr	r1, [pc, #192]	; (800f7cc <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x104>)
 800f70a:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800f70e:	a803      	add	r0, sp, #12
 800f710:	f7ff ff1e 	bl	800f550 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800f714:	6862      	ldr	r2, [r4, #4]
 800f716:	492e      	ldr	r1, [pc, #184]	; (800f7d0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x108>)
 800f718:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800f71c:	a803      	add	r0, sp, #12
 800f71e:	f7ff ff17 	bl	800f550 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800f722:	6862      	ldr	r2, [r4, #4]
 800f724:	492b      	ldr	r1, [pc, #172]	; (800f7d4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x10c>)
 800f726:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800f72a:	a803      	add	r0, sp, #12
 800f72c:	f7ff ff10 	bl	800f550 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800f730:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800f734:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800f738:	6862      	ldr	r2, [r4, #4]
 800f73a:	42ab      	cmp	r3, r5
 800f73c:	d223      	bcs.n	800f786 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xbe>
 800f73e:	9803      	ldr	r0, [sp, #12]
 800f740:	06d2      	lsls	r2, r2, #27
 800f742:	4418      	add	r0, r3
 800f744:	eba5 0503 	sub.w	r5, r5, r3
 800f748:	f104 040c 	add.w	r4, r4, #12
 800f74c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800f750:	d40b      	bmi.n	800f76a <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa2>
 800f752:	b95b      	cbnz	r3, 800f76c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa4>
 800f754:	4b20      	ldr	r3, [pc, #128]	; (800f7d8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 800f756:	4a21      	ldr	r2, [pc, #132]	; (800f7dc <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>)
 800f758:	9400      	str	r4, [sp, #0]
 800f75a:	e00a      	b.n	800f772 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xaa>
 800f75c:	6823      	ldr	r3, [r4, #0]
 800f75e:	4601      	mov	r1, r0
 800f760:	681a      	ldr	r2, [r3, #0]
 800f762:	4618      	mov	r0, r3
 800f764:	68d2      	ldr	r2, [r2, #12]
 800f766:	4790      	blx	r2
 800f768:	e7b9      	b.n	800f6de <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x16>
 800f76a:	b32b      	cbz	r3, 800f7b8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf0>
 800f76c:	4b1a      	ldr	r3, [pc, #104]	; (800f7d8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 800f76e:	4a1c      	ldr	r2, [pc, #112]	; (800f7e0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x118>)
 800f770:	9400      	str	r4, [sp, #0]
 800f772:	4629      	mov	r1, r5
 800f774:	f7f9 fe36 	bl	80093e4 <snprintf>
 800f778:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800f77c:	4285      	cmp	r5, r0
 800f77e:	bfa4      	itt	ge
 800f780:	181b      	addge	r3, r3, r0
 800f782:	f8ad 3012 	strhge.w	r3, [sp, #18]
 800f786:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800f78a:	b17b      	cbz	r3, 800f7ac <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xe4>
 800f78c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800f790:	9b03      	ldr	r3, [sp, #12]
 800f792:	4413      	add	r3, r2
 800f794:	227d      	movs	r2, #125	; 0x7d
 800f796:	f803 2c01 	strb.w	r2, [r3, #-1]
 800f79a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800f79e:	9903      	ldr	r1, [sp, #12]
 800f7a0:	54ca      	strb	r2, [r1, r3]
 800f7a2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800f7a6:	3301      	adds	r3, #1
 800f7a8:	f8ad 3012 	strh.w	r3, [sp, #18]
 800f7ac:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800f7b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7b2:	601a      	str	r2, [r3, #0]
 800f7b4:	b006      	add	sp, #24
 800f7b6:	bd70      	pop	{r4, r5, r6, pc}
 800f7b8:	4b07      	ldr	r3, [pc, #28]	; (800f7d8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 800f7ba:	4a0a      	ldr	r2, [pc, #40]	; (800f7e4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x11c>)
 800f7bc:	9400      	str	r4, [sp, #0]
 800f7be:	e7d8      	b.n	800f772 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xaa>
 800f7c0:	080177c2 	stmdaeq	r1, {r1, r6, r7, r8, r9, sl, ip, sp, lr}
 800f7c4:	080177ba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r8, r9, sl, ip, sp, lr}
 800f7c8:	080177db 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, r8, r9, sl, ip, sp, lr}
 800f7cc:	080177e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, r9, sl, ip, sp, lr}
 800f7d0:	080177f7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, ip, sp, lr}
 800f7d4:	08017805 	stmdaeq	r1, {r0, r2, fp, ip, sp, lr}
 800f7d8:	080177ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r8, r9, sl, ip, sp, lr}
 800f7dc:	08016c64 	stmdaeq	r1, {r2, r5, r6, sl, fp, sp, lr}
 800f7e0:	08016c59 	stmdaeq	r1, {r0, r3, r4, r6, sl, fp, sp, lr}
 800f7e4:	08016c65 	stmdaeq	r1, {r0, r2, r5, r6, sl, fp, sp, lr}

0800f7e8 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>:
 800f7e8:	b513      	push	{r0, r1, r4, lr}
 800f7ea:	6804      	ldr	r4, [r0, #0]
 800f7ec:	b914      	cbnz	r4, 800f7f4 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800f7ee:	601c      	str	r4, [r3, #0]
 800f7f0:	b002      	add	sp, #8
 800f7f2:	bd10      	pop	{r4, pc}
 800f7f4:	9300      	str	r3, [sp, #0]
 800f7f6:	4613      	mov	r3, r2
 800f7f8:	460a      	mov	r2, r1
 800f7fa:	2100      	movs	r1, #0
 800f7fc:	f7ff ff64 	bl	800f6c8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>
 800f800:	e7f6      	b.n	800f7f0 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800f802 <RemoteConfigParams::Set(RemoteConfig*)>:
 800f802:	b538      	push	{r3, r4, r5, lr}
 800f804:	460c      	mov	r4, r1
 800f806:	4605      	mov	r5, r0
 800f808:	6841      	ldr	r1, [r0, #4]
 800f80a:	4620      	mov	r0, r4
 800f80c:	f001 0101 	and.w	r1, r1, #1
 800f810:	f7ff fc22 	bl	800f058 <RemoteConfig::SetDisable(bool)>
 800f814:	686b      	ldr	r3, [r5, #4]
 800f816:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800f81a:	f884 25d5 	strb.w	r2, [r4, #1493]	; 0x5d5
 800f81e:	f3c3 0280 	ubfx	r2, r3, #2, #1
 800f822:	f884 25d6 	strb.w	r2, [r4, #1494]	; 0x5d6
 800f826:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 800f82a:	f884 25d7 	strb.w	r2, [r4, #1495]	; 0x5d7
 800f82e:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800f832:	06db      	lsls	r3, r3, #27
 800f834:	f884 25d8 	strb.w	r2, [r4, #1496]	; 0x5d8
 800f838:	d506      	bpl.n	800f848 <RemoteConfigParams::Set(RemoteConfig*)+0x46>
 800f83a:	4620      	mov	r0, r4
 800f83c:	f105 010c 	add.w	r1, r5, #12
 800f840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f844:	f7ff bc2c 	b.w	800f0a0 <RemoteConfig::SetDisplayName(char const*)>
 800f848:	bd38      	pop	{r3, r4, r5, pc}

0800f84a <RemoteConfigParams::Dump()>:
 800f84a:	4770      	bx	lr

0800f84c <RemoteConfig::HandleReboot()>:
 800f84c:	f890 35d6 	ldrb.w	r3, [r0, #1494]	; 0x5d6
 800f850:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f852:	2b00      	cmp	r3, #0
 800f854:	d03d      	beq.n	800f8d2 <RemoteConfig::HandleReboot()+0x86>
 800f856:	2301      	movs	r3, #1
 800f858:	4c1f      	ldr	r4, [pc, #124]	; (800f8d8 <RemoteConfig::HandleReboot()+0x8c>)
 800f85a:	f880 35d9 	strb.w	r3, [r0, #1497]	; 0x5d9
 800f85e:	6825      	ldr	r5, [r4, #0]
 800f860:	69a8      	ldr	r0, [r5, #24]
 800f862:	b138      	cbz	r0, 800f874 <RemoteConfig::HandleReboot()+0x28>
 800f864:	2100      	movs	r1, #0
 800f866:	6803      	ldr	r3, [r0, #0]
 800f868:	7429      	strb	r1, [r5, #16]
 800f86a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f86c:	4798      	blx	r3
 800f86e:	4b1b      	ldr	r3, [pc, #108]	; (800f8dc <RemoteConfig::HandleReboot()+0x90>)
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	606b      	str	r3, [r5, #4]
 800f874:	4d1a      	ldr	r5, [pc, #104]	; (800f8e0 <RemoteConfig::HandleReboot()+0x94>)
 800f876:	6828      	ldr	r0, [r5, #0]
 800f878:	f000 fdf2 	bl	8010460 <SpiFlashStore::Flash()>
 800f87c:	2800      	cmp	r0, #0
 800f87e:	d1fa      	bne.n	800f876 <RemoteConfig::HandleReboot()+0x2a>
 800f880:	4b18      	ldr	r3, [pc, #96]	; (800f8e4 <RemoteConfig::HandleReboot()+0x98>)
 800f882:	6818      	ldr	r0, [r3, #0]
 800f884:	f002 fa96 	bl	8011db4 <Network::Shutdown()>
 800f888:	4817      	ldr	r0, [pc, #92]	; (800f8e8 <RemoteConfig::HandleReboot()+0x9c>)
 800f88a:	f7f9 fd83 	bl	8009394 <printf>
 800f88e:	6823      	ldr	r3, [r4, #0]
 800f890:	6998      	ldr	r0, [r3, #24]
 800f892:	b110      	cbz	r0, 800f89a <RemoteConfig::HandleReboot()+0x4e>
 800f894:	6803      	ldr	r3, [r0, #0]
 800f896:	68db      	ldr	r3, [r3, #12]
 800f898:	4798      	blx	r3
 800f89a:	6824      	ldr	r4, [r4, #0]
 800f89c:	4913      	ldr	r1, [pc, #76]	; (800f8ec <RemoteConfig::HandleReboot()+0xa0>)
 800f89e:	4620      	mov	r0, r4
 800f8a0:	f7f8 ff4c 	bl	800873c <Display::TextStatus(char const*)>
 800f8a4:	7c63      	ldrb	r3, [r4, #17]
 800f8a6:	b183      	cbz	r3, 800f8ca <RemoteConfig::HandleReboot()+0x7e>
 800f8a8:	f64b 7312 	movw	r3, #48914	; 0xbf12
 800f8ac:	f8ad 3004 	strh.w	r3, [sp, #4]
 800f8b0:	23bf      	movs	r3, #191	; 0xbf
 800f8b2:	7a20      	ldrb	r0, [r4, #8]
 800f8b4:	f88d 3006 	strb.w	r3, [sp, #6]
 800f8b8:	f005 fef8 	bl	80156ac <gd32_i2c_set_address(unsigned char)>
 800f8bc:	68e0      	ldr	r0, [r4, #12]
 800f8be:	f005 feed 	bl	801569c <gd32_i2c_set_baudrate(unsigned int)>
 800f8c2:	2103      	movs	r1, #3
 800f8c4:	a801      	add	r0, sp, #4
 800f8c6:	f005 fef7 	bl	80156b8 <gd32_i2c_write(char const*, unsigned int)>
 800f8ca:	4b09      	ldr	r3, [pc, #36]	; (800f8f0 <RemoteConfig::HandleReboot()+0xa4>)
 800f8cc:	6818      	ldr	r0, [r3, #0]
 800f8ce:	f004 fe6d 	bl	80145ac <Hardware::Reboot()>
 800f8d2:	b003      	add	sp, #12
 800f8d4:	bd30      	pop	{r4, r5, pc}
 800f8d6:	bf00      	nop
 800f8d8:	2000a8d8 	ldrdcs	sl, [r0], -r8
 800f8dc:	2000a9dc 	ldrdcs	sl, [r0], -ip
 800f8e0:	2000299c 	mulcs	r0, ip, r9
 800f8e4:	2000a2a0 	andcs	sl, r0, r0, lsr #5
 800f8e8:	080173fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r8, r9, ip, sp, lr}
 800f8ec:	0801740b 	stmdaeq	r1, {r0, r1, r3, sl, ip, sp, lr}
 800f8f0:	2000a9c8 	andcs	sl, r0, r8, asr #19

0800f8f4 <RemoteConfig::GetIndex(void const*, unsigned int&)>:
 800f8f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f8f8:	2000      	movs	r0, #0
 800f8fa:	4d12      	ldr	r5, [pc, #72]	; (800f944 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x50>)
 800f8fc:	f10d 0c04 	add.w	ip, sp, #4
 800f900:	6814      	ldr	r4, [r2, #0]
 800f902:	7d2b      	ldrb	r3, [r5, #20]
 800f904:	692e      	ldr	r6, [r5, #16]
 800f906:	42a3      	cmp	r3, r4
 800f908:	bf34      	ite	cc
 800f90a:	4664      	movcc	r4, ip
 800f90c:	4614      	movcs	r4, r2
 800f90e:	9301      	str	r3, [sp, #4]
 800f910:	6827      	ldr	r7, [r4, #0]
 800f912:	460c      	mov	r4, r1
 800f914:	3e01      	subs	r6, #1
 800f916:	440f      	add	r7, r1
 800f918:	42bc      	cmp	r4, r7
 800f91a:	d101      	bne.n	800f920 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x2c>
 800f91c:	6013      	str	r3, [r2, #0]
 800f91e:	e00c      	b.n	800f93a <RemoteConfig::GetIndex(void const*, unsigned int&)+0x46>
 800f920:	f894 8000 	ldrb.w	r8, [r4]
 800f924:	f816 ef01 	ldrb.w	lr, [r6, #1]!
 800f928:	45f0      	cmp	r8, lr
 800f92a:	d009      	beq.n	800f940 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x4c>
 800f92c:	3001      	adds	r0, #1
 800f92e:	2805      	cmp	r0, #5
 800f930:	f105 051c 	add.w	r5, r5, #28
 800f934:	d1e4      	bne.n	800f900 <RemoteConfig::GetIndex(void const*, unsigned int&)+0xc>
 800f936:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f93a:	b002      	add	sp, #8
 800f93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f940:	3401      	adds	r4, #1
 800f942:	e7e9      	b.n	800f918 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x24>
 800f944:	08017454 	stmdaeq	r1, {r2, r4, r6, sl, ip, sp, lr}

0800f948 <RemoteConfig::PlatformHandleTftpSet()>:
 800f948:	f890 15ec 	ldrb.w	r1, [r0, #1516]	; 0x5ec
 800f94c:	b109      	cbz	r1, 800f952 <RemoteConfig::PlatformHandleTftpSet()+0xa>
 800f94e:	f24a 51a5 	movw	r1, #42405	; 0xa5a5
 800f952:	2002      	movs	r0, #2
 800f954:	f005 b93c 	b.w	8014bd0 <bkp_data_write>

0800f958 <RemoteConfig::PlatformHandleTftpGet()>:
 800f958:	b510      	push	{r4, lr}
 800f95a:	4604      	mov	r4, r0
 800f95c:	2002      	movs	r0, #2
 800f95e:	f005 f94d 	bl	8014bfc <bkp_data_read>
 800f962:	f24a 53a5 	movw	r3, #42405	; 0xa5a5
 800f966:	1ac3      	subs	r3, r0, r3
 800f968:	4258      	negs	r0, r3
 800f96a:	4158      	adcs	r0, r3
 800f96c:	f884 05ec 	strb.w	r0, [r4, #1516]	; 0x5ec
 800f970:	bd10      	pop	{r4, pc}

0800f972 <strcmp>:
 800f972:	1e43      	subs	r3, r0, #1
 800f974:	3901      	subs	r1, #1
 800f976:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800f97a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f97e:	4290      	cmp	r0, r2
 800f980:	d001      	beq.n	800f986 <strcmp+0x14>
 800f982:	1a80      	subs	r0, r0, r2
 800f984:	e001      	b.n	800f98a <strcmp+0x18>
 800f986:	2800      	cmp	r0, #0
 800f988:	d1f5      	bne.n	800f976 <strcmp+0x4>
 800f98a:	4770      	bx	lr

0800f98c <strcasecmp>:
 800f98c:	b530      	push	{r4, r5, lr}
 800f98e:	1e42      	subs	r2, r0, #1
 800f990:	3901      	subs	r1, #1
 800f992:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800f996:	4604      	mov	r4, r0
 800f998:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f99c:	2b19      	cmp	r3, #25
 800f99e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f9a2:	bf98      	it	ls
 800f9a4:	f100 0420 	addls.w	r4, r0, #32
 800f9a8:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
 800f9ac:	2d19      	cmp	r5, #25
 800f9ae:	bf98      	it	ls
 800f9b0:	3320      	addls	r3, #32
 800f9b2:	42a3      	cmp	r3, r4
 800f9b4:	d001      	beq.n	800f9ba <strcasecmp+0x2e>
 800f9b6:	1ae0      	subs	r0, r4, r3
 800f9b8:	e001      	b.n	800f9be <strcasecmp+0x32>
 800f9ba:	2800      	cmp	r0, #0
 800f9bc:	d1e9      	bne.n	800f992 <strcasecmp+0x6>
 800f9be:	bd30      	pop	{r4, r5, pc}

0800f9c0 <PropertiesConfig::EnableJSON(bool)>:
 800f9c0:	4a04      	ldr	r2, [pc, #16]	; (800f9d4 <PropertiesConfig::EnableJSON(bool)+0x14>)
 800f9c2:	7813      	ldrb	r3, [r2, #0]
 800f9c4:	b118      	cbz	r0, 800f9ce <PropertiesConfig::EnableJSON(bool)+0xe>
 800f9c6:	f043 0301 	orr.w	r3, r3, #1
 800f9ca:	7013      	strb	r3, [r2, #0]
 800f9cc:	4770      	bx	lr
 800f9ce:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800f9d2:	e7fa      	b.n	800f9ca <PropertiesConfig::EnableJSON(bool)+0xa>
 800f9d4:	2000a8d4 	ldrdcs	sl, [r0], -r4

0800f9d8 <HttpDaemon::HttpDaemon()>:
 800f9d8:	4a0a      	ldr	r2, [pc, #40]	; (800fa04 <HttpDaemon::HttpDaemon()+0x2c>)
 800f9da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f9de:	6002      	str	r2, [r0, #0]
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	f44f 7c02 	mov.w	ip, #520	; 0x208
 800f9e6:	e9c0 1204 	strd	r1, r2, [r0, #16]
 800f9ea:	2102      	movs	r1, #2
 800f9ec:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800f9f0:	e9c0 c106 	strd	ip, r1, [r0, #24]
 800f9f4:	60c2      	str	r2, [r0, #12]
 800f9f6:	8402      	strh	r2, [r0, #32]
 800f9f8:	f8a0 25c2 	strh.w	r2, [r0, #1474]	; 0x5c2
 800f9fc:	f8c0 25c4 	str.w	r2, [r0, #1476]	; 0x5c4
 800fa00:	4770      	bx	lr
 800fa02:	bf00      	nop
 800fa04:	0801773a 	stmdaeq	r1, {r1, r3, r4, r5, r8, r9, sl, ip, sp, lr}

0800fa08 <HttpDaemon::Start()>:
 800fa08:	4b04      	ldr	r3, [pc, #16]	; (800fa1c <HttpDaemon::Start()+0x14>)
 800fa0a:	b510      	push	{r4, lr}
 800fa0c:	2150      	movs	r1, #80	; 0x50
 800fa0e:	4604      	mov	r4, r0
 800fa10:	6818      	ldr	r0, [r3, #0]
 800fa12:	f002 fc55 	bl	80122c0 <Network::TcpBegin(unsigned short)>
 800fa16:	6120      	str	r0, [r4, #16]
 800fa18:	bd10      	pop	{r4, pc}
 800fa1a:	bf00      	nop
 800fa1c:	2000a2a0 	andcs	sl, r0, r0, lsr #5

0800fa20 <HttpDaemon::ParseMethod(char*)>:
 800fa20:	b538      	push	{r3, r4, r5, lr}
 800fa22:	4604      	mov	r4, r0
 800fa24:	4608      	mov	r0, r1
 800fa26:	491a      	ldr	r1, [pc, #104]	; (800fa90 <HttpDaemon::ParseMethod(char*)+0x70>)
 800fa28:	f004 ff02 	bl	8014830 <strtok>
 800fa2c:	4605      	mov	r5, r0
 800fa2e:	b360      	cbz	r0, 800fa8a <HttpDaemon::ParseMethod(char*)+0x6a>
 800fa30:	4918      	ldr	r1, [pc, #96]	; (800fa94 <HttpDaemon::ParseMethod(char*)+0x74>)
 800fa32:	f7ff ff9e 	bl	800f972 <strcmp>
 800fa36:	b128      	cbz	r0, 800fa44 <HttpDaemon::ParseMethod(char*)+0x24>
 800fa38:	4628      	mov	r0, r5
 800fa3a:	4917      	ldr	r1, [pc, #92]	; (800fa98 <HttpDaemon::ParseMethod(char*)+0x78>)
 800fa3c:	f7ff ff99 	bl	800f972 <strcmp>
 800fa40:	bb18      	cbnz	r0, 800fa8a <HttpDaemon::ParseMethod(char*)+0x6a>
 800fa42:	2001      	movs	r0, #1
 800fa44:	61e0      	str	r0, [r4, #28]
 800fa46:	4912      	ldr	r1, [pc, #72]	; (800fa90 <HttpDaemon::ParseMethod(char*)+0x70>)
 800fa48:	2000      	movs	r0, #0
 800fa4a:	f004 fef1 	bl	8014830 <strtok>
 800fa4e:	b910      	cbnz	r0, 800fa56 <HttpDaemon::ParseMethod(char*)+0x36>
 800fa50:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800fa54:	bd38      	pop	{r3, r4, r5, pc}
 800fa56:	6060      	str	r0, [r4, #4]
 800fa58:	4910      	ldr	r1, [pc, #64]	; (800fa9c <HttpDaemon::ParseMethod(char*)+0x7c>)
 800fa5a:	2000      	movs	r0, #0
 800fa5c:	f004 fee8 	bl	8014830 <strtok>
 800fa60:	2800      	cmp	r0, #0
 800fa62:	d0f5      	beq.n	800fa50 <HttpDaemon::ParseMethod(char*)+0x30>
 800fa64:	490e      	ldr	r1, [pc, #56]	; (800faa0 <HttpDaemon::ParseMethod(char*)+0x80>)
 800fa66:	f7ff ff84 	bl	800f972 <strcmp>
 800fa6a:	2800      	cmp	r0, #0
 800fa6c:	d1f0      	bne.n	800fa50 <HttpDaemon::ParseMethod(char*)+0x30>
 800fa6e:	490d      	ldr	r1, [pc, #52]	; (800faa4 <HttpDaemon::ParseMethod(char*)+0x84>)
 800fa70:	f004 fede 	bl	8014830 <strtok>
 800fa74:	2800      	cmp	r0, #0
 800fa76:	d0eb      	beq.n	800fa50 <HttpDaemon::ParseMethod(char*)+0x30>
 800fa78:	490b      	ldr	r1, [pc, #44]	; (800faa8 <HttpDaemon::ParseMethod(char*)+0x88>)
 800fa7a:	f7ff ff7a 	bl	800f972 <strcmp>
 800fa7e:	2800      	cmp	r0, #0
 800fa80:	f240 10f9 	movw	r0, #505	; 0x1f9
 800fa84:	bf08      	it	eq
 800fa86:	20c8      	moveq	r0, #200	; 0xc8
 800fa88:	e7e4      	b.n	800fa54 <HttpDaemon::ParseMethod(char*)+0x34>
 800fa8a:	f240 10f5 	movw	r0, #501	; 0x1f5
 800fa8e:	e7e1      	b.n	800fa54 <HttpDaemon::ParseMethod(char*)+0x34>
 800fa90:	080186f3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r9, sl, pc}
 800fa94:	080174e0 	stmdaeq	r1, {r5, r6, r7, sl, ip, sp, lr}
 800fa98:	080174e4 	stmdaeq	r1, {r2, r5, r6, r7, sl, ip, sp, lr}
 800fa9c:	0801754e 	stmdaeq	r1, {r1, r2, r3, r6, r8, sl, ip, sp, lr}
 800faa0:	080174e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, sl, ip, sp, lr}
 800faa4:	080174ee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, sl, ip, sp, lr}
 800faa8:	080174f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, sl, ip, sp, lr}

0800faac <HttpDaemon::ParseHeaderField(char*)>:
 800faac:	b538      	push	{r3, r4, r5, lr}
 800faae:	4605      	mov	r5, r0
 800fab0:	4608      	mov	r0, r1
 800fab2:	491d      	ldr	r1, [pc, #116]	; (800fb28 <HttpDaemon::ParseHeaderField(char*)+0x7c>)
 800fab4:	f004 febc 	bl	8014830 <strtok>
 800fab8:	4604      	mov	r4, r0
 800faba:	b910      	cbnz	r0, 800fac2 <HttpDaemon::ParseHeaderField(char*)+0x16>
 800fabc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800fac0:	bd38      	pop	{r3, r4, r5, pc}
 800fac2:	491a      	ldr	r1, [pc, #104]	; (800fb2c <HttpDaemon::ParseHeaderField(char*)+0x80>)
 800fac4:	f7ff ff62 	bl	800f98c <strcasecmp>
 800fac8:	b970      	cbnz	r0, 800fae8 <HttpDaemon::ParseHeaderField(char*)+0x3c>
 800faca:	4919      	ldr	r1, [pc, #100]	; (800fb30 <HttpDaemon::ParseHeaderField(char*)+0x84>)
 800facc:	f004 feb0 	bl	8014830 <strtok>
 800fad0:	2800      	cmp	r0, #0
 800fad2:	d0f3      	beq.n	800fabc <HttpDaemon::ParseHeaderField(char*)+0x10>
 800fad4:	4917      	ldr	r1, [pc, #92]	; (800fb34 <HttpDaemon::ParseHeaderField(char*)+0x88>)
 800fad6:	f7ff ff4c 	bl	800f972 <strcmp>
 800fada:	b108      	cbz	r0, 800fae0 <HttpDaemon::ParseHeaderField(char*)+0x34>
 800fadc:	20c8      	movs	r0, #200	; 0xc8
 800fade:	e7ef      	b.n	800fac0 <HttpDaemon::ParseHeaderField(char*)+0x14>
 800fae0:	2301      	movs	r3, #1
 800fae2:	f885 3020 	strb.w	r3, [r5, #32]
 800fae6:	e7f9      	b.n	800fadc <HttpDaemon::ParseHeaderField(char*)+0x30>
 800fae8:	4620      	mov	r0, r4
 800faea:	4913      	ldr	r1, [pc, #76]	; (800fb38 <HttpDaemon::ParseHeaderField(char*)+0x8c>)
 800faec:	f7ff ff4e 	bl	800f98c <strcasecmp>
 800faf0:	4604      	mov	r4, r0
 800faf2:	2800      	cmp	r0, #0
 800faf4:	d1f2      	bne.n	800fadc <HttpDaemon::ParseHeaderField(char*)+0x30>
 800faf6:	4911      	ldr	r1, [pc, #68]	; (800fb3c <HttpDaemon::ParseHeaderField(char*)+0x90>)
 800faf8:	f004 fe9a 	bl	8014830 <strtok>
 800fafc:	2800      	cmp	r0, #0
 800fafe:	d0dd      	beq.n	800fabc <HttpDaemon::ParseHeaderField(char*)+0x10>
 800fb00:	1e42      	subs	r2, r0, #1
 800fb02:	4623      	mov	r3, r4
 800fb04:	200a      	movs	r0, #10
 800fb06:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800fb0a:	b911      	cbnz	r1, 800fb12 <HttpDaemon::ParseHeaderField(char*)+0x66>
 800fb0c:	f8a5 35c6 	strh.w	r3, [r5, #1478]	; 0x5c6
 800fb10:	e7e4      	b.n	800fadc <HttpDaemon::ParseHeaderField(char*)+0x30>
 800fb12:	3930      	subs	r1, #48	; 0x30
 800fb14:	2909      	cmp	r1, #9
 800fb16:	d8d1      	bhi.n	800fabc <HttpDaemon::ParseHeaderField(char*)+0x10>
 800fb18:	fb00 1303 	mla	r3, r0, r3, r1
 800fb1c:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 800fb20:	d9f1      	bls.n	800fb06 <HttpDaemon::ParseHeaderField(char*)+0x5a>
 800fb22:	f240 109d 	movw	r0, #413	; 0x19d
 800fb26:	e7cb      	b.n	800fac0 <HttpDaemon::ParseHeaderField(char*)+0x14>
 800fb28:	080174f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, sl, ip, sp, lr}
 800fb2c:	080174f7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, sl, ip, sp, lr}
 800fb30:	08017504 	stmdaeq	r1, {r2, r8, sl, ip, sp, lr}
 800fb34:	08017507 	stmdaeq	r1, {r0, r1, r2, r8, sl, ip, sp, lr}
 800fb38:	08017518 	stmdaeq	r1, {r3, r4, r8, sl, ip, sp, lr}
 800fb3c:	080186f3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r9, sl, pc}

0800fb40 <HttpDaemon::ParseRequest()>:
 800fb40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb42:	2400      	movs	r4, #0
 800fb44:	4605      	mov	r5, r0
 800fb46:	4622      	mov	r2, r4
 800fb48:	4626      	mov	r6, r4
 800fb4a:	68c1      	ldr	r1, [r0, #12]
 800fb4c:	f880 4020 	strb.w	r4, [r0, #32]
 800fb50:	f8c0 45c4 	str.w	r4, [r0, #1476]	; 0x5c4
 800fb54:	8aab      	ldrh	r3, [r5, #20]
 800fb56:	42a3      	cmp	r3, r4
 800fb58:	d91e      	bls.n	800fb98 <HttpDaemon::ParseRequest()+0x58>
 800fb5a:	68eb      	ldr	r3, [r5, #12]
 800fb5c:	5d18      	ldrb	r0, [r3, r4]
 800fb5e:	280a      	cmp	r0, #10
 800fb60:	d10e      	bne.n	800fb80 <HttpDaemon::ParseRequest()+0x40>
 800fb62:	4423      	add	r3, r4
 800fb64:	f803 6c01 	strb.w	r6, [r3, #-1]
 800fb68:	1c57      	adds	r7, r2, #1
 800fb6a:	b962      	cbnz	r2, 800fb86 <HttpDaemon::ParseRequest()+0x46>
 800fb6c:	4628      	mov	r0, r5
 800fb6e:	f7ff ff57 	bl	800fa20 <HttpDaemon::ParseMethod(char*)>
 800fb72:	28c8      	cmp	r0, #200	; 0xc8
 800fb74:	d111      	bne.n	800fb9a <HttpDaemon::ParseRequest()+0x5a>
 800fb76:	463a      	mov	r2, r7
 800fb78:	68e9      	ldr	r1, [r5, #12]
 800fb7a:	3401      	adds	r4, #1
 800fb7c:	b2a4      	uxth	r4, r4
 800fb7e:	4421      	add	r1, r4
 800fb80:	3401      	adds	r4, #1
 800fb82:	b2a4      	uxth	r4, r4
 800fb84:	e7e6      	b.n	800fb54 <HttpDaemon::ParseRequest()+0x14>
 800fb86:	7808      	ldrb	r0, [r1, #0]
 800fb88:	b970      	cbnz	r0, 800fba8 <HttpDaemon::ParseRequest()+0x68>
 800fb8a:	696b      	ldr	r3, [r5, #20]
 800fb8c:	3b01      	subs	r3, #1
 800fb8e:	1b1b      	subs	r3, r3, r4
 800fb90:	b29b      	uxth	r3, r3
 800fb92:	f8a5 35c4 	strh.w	r3, [r5, #1476]	; 0x5c4
 800fb96:	b90b      	cbnz	r3, 800fb9c <HttpDaemon::ParseRequest()+0x5c>
 800fb98:	20c8      	movs	r0, #200	; 0xc8
 800fb9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb9c:	68ea      	ldr	r2, [r5, #12]
 800fb9e:	3401      	adds	r4, #1
 800fba0:	4414      	add	r4, r2
 800fba2:	60ac      	str	r4, [r5, #8]
 800fba4:	54e0      	strb	r0, [r4, r3]
 800fba6:	e7f7      	b.n	800fb98 <HttpDaemon::ParseRequest()+0x58>
 800fba8:	4628      	mov	r0, r5
 800fbaa:	f7ff ff7f 	bl	800faac <HttpDaemon::ParseHeaderField(char*)>
 800fbae:	e7e0      	b.n	800fb72 <HttpDaemon::ParseRequest()+0x32>

0800fbb0 <HttpDaemon::HandleGetTxt()>:
 800fbb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbb4:	6847      	ldr	r7, [r0, #4]
 800fbb6:	4604      	mov	r4, r0
 800fbb8:	1dbd      	adds	r5, r7, #6
 800fbba:	462b      	mov	r3, r5
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	7802      	ldrb	r2, [r0, #0]
 800fbc0:	3301      	adds	r3, #1
 800fbc2:	2a00      	cmp	r2, #0
 800fbc4:	d1fa      	bne.n	800fbbc <HttpDaemon::HandleGetTxt()+0xc>
 800fbc6:	1b40      	subs	r0, r0, r5
 800fbc8:	2804      	cmp	r0, #4
 800fbca:	d803      	bhi.n	800fbd4 <HttpDaemon::HandleGetTxt()+0x24>
 800fbcc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800fbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbd4:	3804      	subs	r0, #4
 800fbd6:	4914      	ldr	r1, [pc, #80]	; (800fc28 <HttpDaemon::HandleGetTxt()+0x78>)
 800fbd8:	4428      	add	r0, r5
 800fbda:	f7ff feca 	bl	800f972 <strcmp>
 800fbde:	2800      	cmp	r0, #0
 800fbe0:	d1f4      	bne.n	800fbcc <HttpDaemon::HandleGetTxt()+0x1c>
 800fbe2:	4b12      	ldr	r3, [pc, #72]	; (800fc2c <HttpDaemon::HandleGetTxt()+0x7c>)
 800fbe4:	2001      	movs	r0, #1
 800fbe6:	f893 8000 	ldrb.w	r8, [r3]
 800fbea:	f7ff fee9 	bl	800f9c0 <PropertiesConfig::EnableJSON(bool)>
 800fbee:	4b10      	ldr	r3, [pc, #64]	; (800fc30 <HttpDaemon::HandleGetTxt()+0x80>)
 800fbf0:	f240 529b 	movw	r2, #1435	; 0x59b
 800fbf4:	4629      	mov	r1, r5
 800fbf6:	6818      	ldr	r0, [r3, #0]
 800fbf8:	f7ff fa6a 	bl	800f0d0 <RemoteConfig::HandleGet(void*, unsigned int)>
 800fbfc:	4606      	mov	r6, r0
 800fbfe:	f008 0801 	and.w	r8, r8, #1
 800fc02:	4640      	mov	r0, r8
 800fc04:	f7ff fedc 	bl	800f9c0 <PropertiesConfig::EnableJSON(bool)>
 800fc08:	2e00      	cmp	r6, #0
 800fc0a:	d0df      	beq.n	800fbcc <HttpDaemon::HandleGetTxt()+0x1c>
 800fc0c:	f8a4 65c2 	strh.w	r6, [r4, #1474]	; 0x5c2
 800fc10:	3606      	adds	r6, #6
 800fc12:	3422      	adds	r4, #34	; 0x22
 800fc14:	4437      	add	r7, r6
 800fc16:	42bd      	cmp	r5, r7
 800fc18:	d101      	bne.n	800fc1e <HttpDaemon::HandleGetTxt()+0x6e>
 800fc1a:	20c8      	movs	r0, #200	; 0xc8
 800fc1c:	e7d8      	b.n	800fbd0 <HttpDaemon::HandleGetTxt()+0x20>
 800fc1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fc22:	f804 3b01 	strb.w	r3, [r4], #1
 800fc26:	e7f6      	b.n	800fc16 <HttpDaemon::HandleGetTxt()+0x66>
 800fc28:	08017420 	stmdaeq	r1, {r5, sl, ip, sp, lr}
 800fc2c:	2000a8d4 	ldrdcs	sl, [r0], -r4
 800fc30:	20001984 	andcs	r1, r0, r4, lsl #19

0800fc34 <HttpDaemon::HandleGet()>:
 800fc34:	b570      	push	{r4, r5, r6, lr}
 800fc36:	6845      	ldr	r5, [r0, #4]
 800fc38:	4604      	mov	r4, r0
 800fc3a:	4943      	ldr	r1, [pc, #268]	; (800fd48 <HttpDaemon::HandleGet()+0x114>)
 800fc3c:	4628      	mov	r0, r5
 800fc3e:	f7ff fe98 	bl	800f972 <strcmp>
 800fc42:	b120      	cbz	r0, 800fc4e <HttpDaemon::HandleGet()+0x1a>
 800fc44:	4628      	mov	r0, r5
 800fc46:	4941      	ldr	r1, [pc, #260]	; (800fd4c <HttpDaemon::HandleGet()+0x118>)
 800fc48:	f7ff fe93 	bl	800f972 <strcmp>
 800fc4c:	b960      	cbnz	r0, 800fc68 <HttpDaemon::HandleGet()+0x34>
 800fc4e:	4621      	mov	r1, r4
 800fc50:	4b3f      	ldr	r3, [pc, #252]	; (800fd50 <HttpDaemon::HandleGet()+0x11c>)
 800fc52:	4840      	ldr	r0, [pc, #256]	; (800fd54 <HttpDaemon::HandleGet()+0x120>)
 800fc54:	f841 3b22 	str.w	r3, [r1], #34
 800fc58:	f000 fa7a 	bl	8010150 <get_file_content(char const*, char*)>
 800fc5c:	2800      	cmp	r0, #0
 800fc5e:	dd33      	ble.n	800fcc8 <HttpDaemon::HandleGet()+0x94>
 800fc60:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 800fc64:	20c8      	movs	r0, #200	; 0xc8
 800fc66:	bd70      	pop	{r4, r5, r6, pc}
 800fc68:	4628      	mov	r0, r5
 800fc6a:	493b      	ldr	r1, [pc, #236]	; (800fd58 <HttpDaemon::HandleGet()+0x124>)
 800fc6c:	f7ff fe81 	bl	800f972 <strcmp>
 800fc70:	b928      	cbnz	r0, 800fc7e <HttpDaemon::HandleGet()+0x4a>
 800fc72:	4621      	mov	r1, r4
 800fc74:	4b39      	ldr	r3, [pc, #228]	; (800fd5c <HttpDaemon::HandleGet()+0x128>)
 800fc76:	483a      	ldr	r0, [pc, #232]	; (800fd60 <HttpDaemon::HandleGet()+0x12c>)
 800fc78:	f841 3b22 	str.w	r3, [r1], #34
 800fc7c:	e7ec      	b.n	800fc58 <HttpDaemon::HandleGet()+0x24>
 800fc7e:	4628      	mov	r0, r5
 800fc80:	4938      	ldr	r1, [pc, #224]	; (800fd64 <HttpDaemon::HandleGet()+0x130>)
 800fc82:	f7ff fe76 	bl	800f972 <strcmp>
 800fc86:	b198      	cbz	r0, 800fcb0 <HttpDaemon::HandleGet()+0x7c>
 800fc88:	4a37      	ldr	r2, [pc, #220]	; (800fd68 <HttpDaemon::HandleGet()+0x134>)
 800fc8a:	1e6b      	subs	r3, r5, #1
 800fc8c:	1d69      	adds	r1, r5, #5
 800fc8e:	428b      	cmp	r3, r1
 800fc90:	d114      	bne.n	800fcbc <HttpDaemon::HandleGet()+0x88>
 800fc92:	4b36      	ldr	r3, [pc, #216]	; (800fd6c <HttpDaemon::HandleGet()+0x138>)
 800fc94:	3506      	adds	r5, #6
 800fc96:	4628      	mov	r0, r5
 800fc98:	4935      	ldr	r1, [pc, #212]	; (800fd70 <HttpDaemon::HandleGet()+0x13c>)
 800fc9a:	6023      	str	r3, [r4, #0]
 800fc9c:	f7ff fe69 	bl	800f972 <strcmp>
 800fca0:	b9a8      	cbnz	r0, 800fcce <HttpDaemon::HandleGet()+0x9a>
 800fca2:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800fca6:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800fcaa:	f000 f9d9 	bl	8010060 <remoteconfig::json_get_list(char*, unsigned short)>
 800fcae:	e7d5      	b.n	800fc5c <HttpDaemon::HandleGet()+0x28>
 800fcb0:	4621      	mov	r1, r4
 800fcb2:	4b30      	ldr	r3, [pc, #192]	; (800fd74 <HttpDaemon::HandleGet()+0x140>)
 800fcb4:	4830      	ldr	r0, [pc, #192]	; (800fd78 <HttpDaemon::HandleGet()+0x144>)
 800fcb6:	f841 3b22 	str.w	r3, [r1], #34
 800fcba:	e7cd      	b.n	800fc58 <HttpDaemon::HandleGet()+0x24>
 800fcbc:	f812 0b01 	ldrb.w	r0, [r2], #1
 800fcc0:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 800fcc4:	4286      	cmp	r6, r0
 800fcc6:	d0e2      	beq.n	800fc8e <HttpDaemon::HandleGet()+0x5a>
 800fcc8:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800fccc:	e7cb      	b.n	800fc66 <HttpDaemon::HandleGet()+0x32>
 800fcce:	4628      	mov	r0, r5
 800fcd0:	492a      	ldr	r1, [pc, #168]	; (800fd7c <HttpDaemon::HandleGet()+0x148>)
 800fcd2:	f7ff fe4e 	bl	800f972 <strcmp>
 800fcd6:	b930      	cbnz	r0, 800fce6 <HttpDaemon::HandleGet()+0xb2>
 800fcd8:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800fcdc:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800fce0:	f000 f9f2 	bl	80100c8 <remoteconfig::json_get_version(char*, unsigned short)>
 800fce4:	e7ba      	b.n	800fc5c <HttpDaemon::HandleGet()+0x28>
 800fce6:	4628      	mov	r0, r5
 800fce8:	4925      	ldr	r1, [pc, #148]	; (800fd80 <HttpDaemon::HandleGet()+0x14c>)
 800fcea:	f7ff fe42 	bl	800f972 <strcmp>
 800fcee:	b958      	cbnz	r0, 800fd08 <HttpDaemon::HandleGet()+0xd4>
 800fcf0:	4b24      	ldr	r3, [pc, #144]	; (800fd84 <HttpDaemon::HandleGet()+0x150>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	f893 35d7 	ldrb.w	r3, [r3, #1495]	; 0x5d7
 800fcf8:	b31b      	cbz	r3, 800fd42 <HttpDaemon::HandleGet()+0x10e>
 800fcfa:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800fcfe:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800fd02:	f000 f9fd 	bl	8010100 <remoteconfig::json_get_uptime(char*, unsigned short)>
 800fd06:	e7a9      	b.n	800fc5c <HttpDaemon::HandleGet()+0x28>
 800fd08:	4628      	mov	r0, r5
 800fd0a:	491f      	ldr	r1, [pc, #124]	; (800fd88 <HttpDaemon::HandleGet()+0x154>)
 800fd0c:	f7ff fe31 	bl	800f972 <strcmp>
 800fd10:	b930      	cbnz	r0, 800fd20 <HttpDaemon::HandleGet()+0xec>
 800fd12:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800fd16:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800fd1a:	f000 fa01 	bl	8010120 <remoteconfig::json_get_display(char*, unsigned short)>
 800fd1e:	e79d      	b.n	800fc5c <HttpDaemon::HandleGet()+0x28>
 800fd20:	4628      	mov	r0, r5
 800fd22:	491a      	ldr	r1, [pc, #104]	; (800fd8c <HttpDaemon::HandleGet()+0x158>)
 800fd24:	f7ff fe25 	bl	800f972 <strcmp>
 800fd28:	b930      	cbnz	r0, 800fd38 <HttpDaemon::HandleGet()+0x104>
 800fd2a:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800fd2e:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800fd32:	f000 fa05 	bl	8010140 <remoteconfig::json_get_directory(char*, unsigned short)>
 800fd36:	e791      	b.n	800fc5c <HttpDaemon::HandleGet()+0x28>
 800fd38:	4620      	mov	r0, r4
 800fd3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fd3e:	f7ff bf37 	b.w	800fbb0 <HttpDaemon::HandleGetTxt()>
 800fd42:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800fd46:	e78e      	b.n	800fc66 <HttpDaemon::HandleGet()+0x32>
 800fd48:	0801754e 	stmdaeq	r1, {r1, r2, r3, r6, r8, sl, ip, sp, lr}
 800fd4c:	08017527 	stmdaeq	r1, {r0, r1, r2, r5, r8, sl, ip, sp, lr}
 800fd50:	0801773a 	stmdaeq	r1, {r1, r3, r4, r5, r8, r9, sl, ip, sp, lr}
 800fd54:	08017528 	stmdaeq	r1, {r3, r5, r8, sl, ip, sp, lr}
 800fd58:	08017533 	stmdaeq	r1, {r0, r1, r4, r5, r8, sl, ip, sp, lr}
 800fd5c:	0801775a 	stmdaeq	r1, {r1, r3, r4, r6, r8, r9, sl, ip, sp, lr}
 800fd60:	08017534 	stmdaeq	r1, {r2, r4, r5, r8, sl, ip, sp, lr}
 800fd64:	0801753f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r8, sl, ip, sp, lr}
 800fd68:	08017549 	stmdaeq	r1, {r0, r3, r6, r8, sl, ip, sp, lr}
 800fd6c:	0801779a 	stmdaeq	r1, {r1, r3, r4, r7, r8, r9, sl, ip, sp, lr}
 800fd70:	08017550 	stmdaeq	r1, {r4, r6, r8, sl, ip, sp, lr}
 800fd74:	0801777a 	stmdaeq	r1, {r1, r3, r4, r5, r6, r8, r9, sl, ip, sp, lr}
 800fd78:	08017540 	stmdaeq	r1, {r6, r8, sl, ip, sp, lr}
 800fd7c:	08017555 	stmdaeq	r1, {r0, r2, r4, r6, r8, sl, ip, sp, lr}
 800fd80:	0801755d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, sl, ip, sp, lr}
 800fd84:	20001984 	andcs	r1, r0, r4, lsl #19
 800fd88:	08017564 	stmdaeq	r1, {r2, r5, r6, r8, sl, ip, sp, lr}
 800fd8c:	0801756c 	stmdaeq	r1, {r2, r3, r5, r6, r8, sl, ip, sp, lr}

0800fd90 <HttpDaemon::HandlePost(bool)>:
 800fd90:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fd92:	4604      	mov	r4, r0
 800fd94:	2900      	cmp	r1, #0
 800fd96:	f040 8091 	bne.w	800febc <HttpDaemon::HandlePost(bool)+0x12c>
 800fd9a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d05d      	beq.n	800fe5e <HttpDaemon::HandlePost(bool)+0xce>
 800fda2:	6845      	ldr	r5, [r0, #4]
 800fda4:	4948      	ldr	r1, [pc, #288]	; (800fec8 <HttpDaemon::HandlePost(bool)+0x138>)
 800fda6:	4628      	mov	r0, r5
 800fda8:	f7ff fde3 	bl	800f972 <strcmp>
 800fdac:	2800      	cmp	r0, #0
 800fdae:	bf0c      	ite	eq
 800fdb0:	2301      	moveq	r3, #1
 800fdb2:	2300      	movne	r3, #0
 800fdb4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 800fdb8:	d055      	beq.n	800fe66 <HttpDaemon::HandlePost(bool)+0xd6>
 800fdba:	4628      	mov	r0, r5
 800fdbc:	4943      	ldr	r1, [pc, #268]	; (800fecc <HttpDaemon::HandlePost(bool)+0x13c>)
 800fdbe:	f7ff fdd8 	bl	800f972 <strcmp>
 800fdc2:	2800      	cmp	r0, #0
 800fdc4:	d04f      	beq.n	800fe66 <HttpDaemon::HandlePost(bool)+0xd6>
 800fdc6:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800fdca:	e04a      	b.n	800fe62 <HttpDaemon::HandlePost(bool)+0xd2>
 800fdcc:	4940      	ldr	r1, [pc, #256]	; (800fed0 <HttpDaemon::HandlePost(bool)+0x140>)
 800fdce:	68a0      	ldr	r0, [r4, #8]
 800fdd0:	f10d 0207 	add.w	r2, sp, #7
 800fdd4:	f003 ffb6 	bl	8013d44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800fdd8:	b9e8      	cbnz	r0, 800fe16 <HttpDaemon::HandlePost(bool)+0x86>
 800fdda:	f89d 6007 	ldrb.w	r6, [sp, #7]
 800fdde:	4b3d      	ldr	r3, [pc, #244]	; (800fed4 <HttpDaemon::HandlePost(bool)+0x144>)
 800fde0:	fab6 f186 	clz	r1, r6
 800fde4:	681d      	ldr	r5, [r3, #0]
 800fde6:	0949      	lsrs	r1, r1, #5
 800fde8:	69a8      	ldr	r0, [r5, #24]
 800fdea:	b138      	cbz	r0, 800fdfc <HttpDaemon::HandlePost(bool)+0x6c>
 800fdec:	6803      	ldr	r3, [r0, #0]
 800fdee:	7429      	strb	r1, [r5, #16]
 800fdf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdf2:	4798      	blx	r3
 800fdf4:	b116      	cbz	r6, 800fdfc <HttpDaemon::HandlePost(bool)+0x6c>
 800fdf6:	4b38      	ldr	r3, [pc, #224]	; (800fed8 <HttpDaemon::HandlePost(bool)+0x148>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	606b      	str	r3, [r5, #4]
 800fdfc:	4620      	mov	r0, r4
 800fdfe:	4b37      	ldr	r3, [pc, #220]	; (800fedc <HttpDaemon::HandlePost(bool)+0x14c>)
 800fe00:	f240 519f 	movw	r1, #1439	; 0x59f
 800fe04:	4a36      	ldr	r2, [pc, #216]	; (800fee0 <HttpDaemon::HandlePost(bool)+0x150>)
 800fe06:	f840 3b22 	str.w	r3, [r0], #34
 800fe0a:	f7f9 faeb 	bl	80093e4 <snprintf>
 800fe0e:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 800fe12:	20c8      	movs	r0, #200	; 0xc8
 800fe14:	e025      	b.n	800fe62 <HttpDaemon::HandlePost(bool)+0xd2>
 800fe16:	4933      	ldr	r1, [pc, #204]	; (800fee4 <HttpDaemon::HandlePost(bool)+0x154>)
 800fe18:	68a0      	ldr	r0, [r4, #8]
 800fe1a:	f10d 0207 	add.w	r2, sp, #7
 800fe1e:	f003 ff91 	bl	8013d44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800fe22:	b9e0      	cbnz	r0, 800fe5e <HttpDaemon::HandlePost(bool)+0xce>
 800fe24:	4b30      	ldr	r3, [pc, #192]	; (800fee8 <HttpDaemon::HandlePost(bool)+0x158>)
 800fe26:	6818      	ldr	r0, [r3, #0]
 800fe28:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fe2c:	b11b      	cbz	r3, 800fe36 <HttpDaemon::HandlePost(bool)+0xa6>
 800fe2e:	2104      	movs	r1, #4
 800fe30:	f004 fb16 	bl	8014460 <LedBlink::SetMode(ledblink::Mode)>
 800fe34:	e7e2      	b.n	800fdfc <HttpDaemon::HandlePost(bool)+0x6c>
 800fe36:	2102      	movs	r1, #2
 800fe38:	e7fa      	b.n	800fe30 <HttpDaemon::HandlePost(bool)+0xa0>
 800fe3a:	4b2c      	ldr	r3, [pc, #176]	; (800feec <HttpDaemon::HandlePost(bool)+0x15c>)
 800fe3c:	2001      	movs	r0, #1
 800fe3e:	781d      	ldrb	r5, [r3, #0]
 800fe40:	f7ff fdbe 	bl	800f9c0 <PropertiesConfig::EnableJSON(bool)>
 800fe44:	4b2a      	ldr	r3, [pc, #168]	; (800fef0 <HttpDaemon::HandlePost(bool)+0x160>)
 800fe46:	f8b4 25c4 	ldrh.w	r2, [r4, #1476]	; 0x5c4
 800fe4a:	6818      	ldr	r0, [r3, #0]
 800fe4c:	68a1      	ldr	r1, [r4, #8]
 800fe4e:	f005 0501 	and.w	r5, r5, #1
 800fe52:	f7ff fa0f 	bl	800f274 <RemoteConfig::HandleSet(void*, unsigned int)>
 800fe56:	4628      	mov	r0, r5
 800fe58:	f7ff fdb2 	bl	800f9c0 <PropertiesConfig::EnableJSON(bool)>
 800fe5c:	e7ce      	b.n	800fdfc <HttpDaemon::HandlePost(bool)+0x6c>
 800fe5e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800fe62:	b002      	add	sp, #8
 800fe64:	bd70      	pop	{r4, r5, r6, pc}
 800fe66:	f8b4 35c6 	ldrh.w	r3, [r4, #1478]	; 0x5c6
 800fe6a:	6962      	ldr	r2, [r4, #20]
 800fe6c:	429a      	cmp	r2, r3
 800fe6e:	dbd0      	blt.n	800fe12 <HttpDaemon::HandlePost(bool)+0x82>
 800fe70:	f8b4 35c4 	ldrh.w	r3, [r4, #1476]	; 0x5c4
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d0cc      	beq.n	800fe12 <HttpDaemon::HandlePost(bool)+0x82>
 800fe78:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d0dc      	beq.n	800fe3a <HttpDaemon::HandlePost(bool)+0xaa>
 800fe80:	2201      	movs	r2, #1
 800fe82:	f8b4 15c4 	ldrh.w	r1, [r4, #1476]	; 0x5c4
 800fe86:	68a0      	ldr	r0, [r4, #8]
 800fe88:	f003 fc74 	bl	8013774 <properties::convert_json_file(char*, unsigned short, bool)>
 800fe8c:	2800      	cmp	r0, #0
 800fe8e:	dde6      	ble.n	800fe5e <HttpDaemon::HandlePost(bool)+0xce>
 800fe90:	4918      	ldr	r1, [pc, #96]	; (800fef4 <HttpDaemon::HandlePost(bool)+0x164>)
 800fe92:	68a0      	ldr	r0, [r4, #8]
 800fe94:	f10d 0207 	add.w	r2, sp, #7
 800fe98:	f003 ff54 	bl	8013d44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800fe9c:	2800      	cmp	r0, #0
 800fe9e:	d195      	bne.n	800fdcc <HttpDaemon::HandlePost(bool)+0x3c>
 800fea0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d0a9      	beq.n	800fdfc <HttpDaemon::HandlePost(bool)+0x6c>
 800fea8:	4b11      	ldr	r3, [pc, #68]	; (800fef0 <HttpDaemon::HandlePost(bool)+0x160>)
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	f893 35d6 	ldrb.w	r3, [r3, #1494]	; 0x5d6
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d0d4      	beq.n	800fe5e <HttpDaemon::HandlePost(bool)+0xce>
 800feb4:	4b10      	ldr	r3, [pc, #64]	; (800fef8 <HttpDaemon::HandlePost(bool)+0x168>)
 800feb6:	6818      	ldr	r0, [r3, #0]
 800feb8:	f004 fb78 	bl	80145ac <Hardware::Reboot()>
 800febc:	68c3      	ldr	r3, [r0, #12]
 800febe:	6083      	str	r3, [r0, #8]
 800fec0:	6943      	ldr	r3, [r0, #20]
 800fec2:	f8a0 35c4 	strh.w	r3, [r0, #1476]	; 0x5c4
 800fec6:	e7d7      	b.n	800fe78 <HttpDaemon::HandlePost(bool)+0xe8>
 800fec8:	08017576 	stmdaeq	r1, {r1, r2, r4, r5, r6, r8, sl, ip, sp, lr}
 800fecc:	08017512 	stmdaeq	r1, {r1, r4, r8, sl, ip, sp, lr}
 800fed0:	08017564 	stmdaeq	r1, {r2, r5, r6, r8, sl, ip, sp, lr}
 800fed4:	2000a8d8 	ldrdcs	sl, [r0], -r8
 800fed8:	2000a9dc 	ldrdcs	sl, [r0], -ip
 800fedc:	0801773a 	stmdaeq	r1, {r1, r3, r4, r5, r8, r9, sl, ip, sp, lr}
 800fee0:	08017593 	stmdaeq	r1, {r0, r1, r4, r7, r8, sl, ip, sp, lr}
 800fee4:	0801758a 	stmdaeq	r1, {r1, r3, r7, r8, sl, ip, sp, lr}
 800fee8:	2000a9c4 	andcs	sl, r0, r4, asr #19
 800feec:	2000a8d4 	ldrdcs	sl, [r0], -r4
 800fef0:	20001984 	andcs	r1, r0, r4, lsl #19
 800fef4:	08017583 	stmdaeq	r1, {r0, r1, r7, r8, sl, ip, sp, lr}
 800fef8:	2000a9c8 	andcs	sl, r0, r8, asr #19

0800fefc <HttpDaemon::Run()>:
 800fefc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fefe:	4e4a      	ldr	r6, [pc, #296]	; (8010028 <HttpDaemon::Run()+0x12c>)
 800ff00:	4604      	mov	r4, r0
 800ff02:	6901      	ldr	r1, [r0, #16]
 800ff04:	f100 020c 	add.w	r2, r0, #12
 800ff08:	b085      	sub	sp, #20
 800ff0a:	6830      	ldr	r0, [r6, #0]
 800ff0c:	f002 f9db 	bl	80122c6 <Network::TcpRead(int, unsigned char const**)>
 800ff10:	6160      	str	r0, [r4, #20]
 800ff12:	2800      	cmp	r0, #0
 800ff14:	d061      	beq.n	800ffda <HttpDaemon::Run()+0xde>
 800ff16:	69a3      	ldr	r3, [r4, #24]
 800ff18:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800ff1c:	d15f      	bne.n	800ffde <HttpDaemon::Run()+0xe2>
 800ff1e:	4620      	mov	r0, r4
 800ff20:	f7ff fe0e 	bl	800fb40 <HttpDaemon::ParseRequest()>
 800ff24:	28c8      	cmp	r0, #200	; 0xc8
 800ff26:	61a0      	str	r0, [r4, #24]
 800ff28:	d106      	bne.n	800ff38 <HttpDaemon::Run()+0x3c>
 800ff2a:	69e3      	ldr	r3, [r4, #28]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d147      	bne.n	800ffc0 <HttpDaemon::Run()+0xc4>
 800ff30:	4620      	mov	r0, r4
 800ff32:	f7ff fe7f 	bl	800fc34 <HttpDaemon::HandleGet()>
 800ff36:	61a0      	str	r0, [r4, #24]
 800ff38:	69a3      	ldr	r3, [r4, #24]
 800ff3a:	f104 0722 	add.w	r7, r4, #34	; 0x22
 800ff3e:	2bc8      	cmp	r3, #200	; 0xc8
 800ff40:	d06f      	beq.n	8010022 <HttpDaemon::Run()+0x126>
 800ff42:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 800ff46:	d062      	beq.n	801000e <HttpDaemon::Run()+0x112>
 800ff48:	dc52      	bgt.n	800fff0 <HttpDaemon::Run()+0xf4>
 800ff4a:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 800ff4e:	d060      	beq.n	8010012 <HttpDaemon::Run()+0x116>
 800ff50:	f240 129d 	movw	r2, #413	; 0x19d
 800ff54:	4293      	cmp	r3, r2
 800ff56:	d05e      	beq.n	8010016 <HttpDaemon::Run()+0x11a>
 800ff58:	4d34      	ldr	r5, [pc, #208]	; (801002c <HttpDaemon::Run()+0x130>)
 800ff5a:	4a35      	ldr	r2, [pc, #212]	; (8010030 <HttpDaemon::Run()+0x134>)
 800ff5c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800ff60:	bf18      	it	ne
 800ff62:	4615      	movne	r5, r2
 800ff64:	4a33      	ldr	r2, [pc, #204]	; (8010034 <HttpDaemon::Run()+0x138>)
 800ff66:	f240 519f 	movw	r1, #1439	; 0x59f
 800ff6a:	6022      	str	r2, [r4, #0]
 800ff6c:	4638      	mov	r0, r7
 800ff6e:	e9cd 5500 	strd	r5, r5, [sp]
 800ff72:	4a31      	ldr	r2, [pc, #196]	; (8010038 <HttpDaemon::Run()+0x13c>)
 800ff74:	f7f9 fa36 	bl	80093e4 <snprintf>
 800ff78:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 800ff7c:	f8b4 35c2 	ldrh.w	r3, [r4, #1474]	; 0x5c2
 800ff80:	f240 519f 	movw	r1, #1439	; 0x59f
 800ff84:	9303      	str	r3, [sp, #12]
 800ff86:	6823      	ldr	r3, [r4, #0]
 800ff88:	4a2c      	ldr	r2, [pc, #176]	; (801003c <HttpDaemon::Run()+0x140>)
 800ff8a:	9302      	str	r3, [sp, #8]
 800ff8c:	4b2c      	ldr	r3, [pc, #176]	; (8010040 <HttpDaemon::Run()+0x144>)
 800ff8e:	68e0      	ldr	r0, [r4, #12]
 800ff90:	e9cd 5300 	strd	r5, r3, [sp]
 800ff94:	69a3      	ldr	r3, [r4, #24]
 800ff96:	f7f9 fa25 	bl	80093e4 <snprintf>
 800ff9a:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800ff9e:	b283      	uxth	r3, r0
 800ffa0:	6830      	ldr	r0, [r6, #0]
 800ffa2:	f002 f994 	bl	80122ce <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 800ffa6:	463a      	mov	r2, r7
 800ffa8:	f8b4 35c2 	ldrh.w	r3, [r4, #1474]	; 0x5c2
 800ffac:	6921      	ldr	r1, [r4, #16]
 800ffae:	6830      	ldr	r0, [r6, #0]
 800ffb0:	f002 f98d 	bl	80122ce <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 800ffb4:	f44f 7202 	mov.w	r2, #520	; 0x208
 800ffb8:	2302      	movs	r3, #2
 800ffba:	e9c4 2306 	strd	r2, r3, [r4, #24]
 800ffbe:	e00c      	b.n	800ffda <HttpDaemon::Run()+0xde>
 800ffc0:	2b01      	cmp	r3, #1
 800ffc2:	d1b9      	bne.n	800ff38 <HttpDaemon::Run()+0x3c>
 800ffc4:	2100      	movs	r1, #0
 800ffc6:	4620      	mov	r0, r4
 800ffc8:	f7ff fee2 	bl	800fd90 <HttpDaemon::HandlePost(bool)>
 800ffcc:	28c8      	cmp	r0, #200	; 0xc8
 800ffce:	61a0      	str	r0, [r4, #24]
 800ffd0:	d1b2      	bne.n	800ff38 <HttpDaemon::Run()+0x3c>
 800ffd2:	f8b4 35c4 	ldrh.w	r3, [r4, #1476]	; 0x5c4
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d1ae      	bne.n	800ff38 <HttpDaemon::Run()+0x3c>
 800ffda:	b005      	add	sp, #20
 800ffdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffde:	2bc8      	cmp	r3, #200	; 0xc8
 800ffe0:	d1aa      	bne.n	800ff38 <HttpDaemon::Run()+0x3c>
 800ffe2:	69e1      	ldr	r1, [r4, #28]
 800ffe4:	2901      	cmp	r1, #1
 800ffe6:	d1a7      	bne.n	800ff38 <HttpDaemon::Run()+0x3c>
 800ffe8:	4620      	mov	r0, r4
 800ffea:	f7ff fed1 	bl	800fd90 <HttpDaemon::HandlePost(bool)>
 800ffee:	e7a2      	b.n	800ff36 <HttpDaemon::Run()+0x3a>
 800fff0:	f240 12f5 	movw	r2, #501	; 0x1f5
 800fff4:	4293      	cmp	r3, r2
 800fff6:	d010      	beq.n	801001a <HttpDaemon::Run()+0x11e>
 800fff8:	f240 12f9 	movw	r2, #505	; 0x1f9
 800fffc:	4293      	cmp	r3, r2
 800fffe:	d00e      	beq.n	801001e <HttpDaemon::Run()+0x122>
 8010000:	4d10      	ldr	r5, [pc, #64]	; (8010044 <HttpDaemon::Run()+0x148>)
 8010002:	4a0b      	ldr	r2, [pc, #44]	; (8010030 <HttpDaemon::Run()+0x134>)
 8010004:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8010008:	bf18      	it	ne
 801000a:	4615      	movne	r5, r2
 801000c:	e7aa      	b.n	800ff64 <HttpDaemon::Run()+0x68>
 801000e:	4d0e      	ldr	r5, [pc, #56]	; (8010048 <HttpDaemon::Run()+0x14c>)
 8010010:	e7a8      	b.n	800ff64 <HttpDaemon::Run()+0x68>
 8010012:	4d0e      	ldr	r5, [pc, #56]	; (801004c <HttpDaemon::Run()+0x150>)
 8010014:	e7a6      	b.n	800ff64 <HttpDaemon::Run()+0x68>
 8010016:	4d0e      	ldr	r5, [pc, #56]	; (8010050 <HttpDaemon::Run()+0x154>)
 8010018:	e7a4      	b.n	800ff64 <HttpDaemon::Run()+0x68>
 801001a:	4d0e      	ldr	r5, [pc, #56]	; (8010054 <HttpDaemon::Run()+0x158>)
 801001c:	e7a2      	b.n	800ff64 <HttpDaemon::Run()+0x68>
 801001e:	4d0e      	ldr	r5, [pc, #56]	; (8010058 <HttpDaemon::Run()+0x15c>)
 8010020:	e7a0      	b.n	800ff64 <HttpDaemon::Run()+0x68>
 8010022:	4d0e      	ldr	r5, [pc, #56]	; (801005c <HttpDaemon::Run()+0x160>)
 8010024:	e7aa      	b.n	800ff7c <HttpDaemon::Run()+0x80>
 8010026:	bf00      	nop
 8010028:	2000a2a0 	andcs	sl, r0, r0, lsr #5
 801002c:	080175ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r8, sl, ip, sp, lr}
 8010030:	08017676 	stmdaeq	r1, {r1, r2, r4, r5, r6, r9, sl, ip, sp, lr}
 8010034:	0801773a 	stmdaeq	r1, {r1, r3, r4, r5, r8, r9, sl, ip, sp, lr}
 8010038:	08017687 	stmdaeq	r1, {r0, r1, r2, r7, r9, sl, ip, sp, lr}
 801003c:	080176e2 	stmdaeq	r1, {r1, r5, r6, r7, r9, sl, ip, sp, lr}
 8010040:	08016af9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, sp, lr}
 8010044:	08017633 	stmdaeq	r1, {r0, r1, r4, r5, r9, sl, ip, sp, lr}
 8010048:	0801761e 	stmdaeq	r1, {r1, r2, r3, r4, r9, sl, ip, sp, lr}
 801004c:	080175fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, sl, ip, sp, lr}
 8010050:	08017605 	stmdaeq	r1, {r0, r2, r9, sl, ip, sp, lr}
 8010054:	08017649 	stmdaeq	r1, {r0, r3, r6, r9, sl, ip, sp, lr}
 8010058:	08017660 	stmdaeq	r1, {r5, r6, r9, sl, ip, sp, lr}
 801005c:	08017684 	stmdaeq	r1, {r2, r7, r9, sl, ip, sp, lr}

08010060 <remoteconfig::json_get_list(char*, unsigned short)>:
 8010060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010064:	4b14      	ldr	r3, [pc, #80]	; (80100b8 <remoteconfig::json_get_list(char*, unsigned short)+0x58>)
 8010066:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80100bc <remoteconfig::json_get_list(char*, unsigned short)+0x5c>
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	b088      	sub	sp, #32
 801006e:	4605      	mov	r5, r0
 8010070:	f8d8 0000 	ldr.w	r0, [r8]
 8010074:	691c      	ldr	r4, [r3, #16]
 8010076:	460e      	mov	r6, r1
 8010078:	f7fe ffd6 	bl	800f028 <RemoteConfig::GetStringNode() const>
 801007c:	4607      	mov	r7, r0
 801007e:	f8d8 0000 	ldr.w	r0, [r8]
 8010082:	f7fe ffdd 	bl	800f040 <RemoteConfig::GetStringOutput() const>
 8010086:	4b0e      	ldr	r3, [pc, #56]	; (80100c0 <remoteconfig::json_get_list(char*, unsigned short)+0x60>)
 8010088:	4631      	mov	r1, r6
 801008a:	7a1a      	ldrb	r2, [r3, #8]
 801008c:	3309      	adds	r3, #9
 801008e:	9303      	str	r3, [sp, #12]
 8010090:	0e23      	lsrs	r3, r4, #24
 8010092:	9302      	str	r3, [sp, #8]
 8010094:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8010098:	9301      	str	r3, [sp, #4]
 801009a:	f3c4 2307 	ubfx	r3, r4, #8, #8
 801009e:	e9cd 0205 	strd	r0, r2, [sp, #20]
 80100a2:	9300      	str	r3, [sp, #0]
 80100a4:	4628      	mov	r0, r5
 80100a6:	4a07      	ldr	r2, [pc, #28]	; (80100c4 <remoteconfig::json_get_list(char*, unsigned short)+0x64>)
 80100a8:	9704      	str	r7, [sp, #16]
 80100aa:	b2e3      	uxtb	r3, r4
 80100ac:	f7f9 f99a 	bl	80093e4 <snprintf>
 80100b0:	b280      	uxth	r0, r0
 80100b2:	b008      	add	sp, #32
 80100b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100b8:	2000a2a0 	andcs	sl, r0, r0, lsr #5
 80100bc:	20001984 	andcs	r1, r0, r4, lsl #19
 80100c0:	20001960 	andcs	r1, r0, r0, ror #18
 80100c4:	08017814 	stmdaeq	r1, {r2, r4, fp, ip, sp, lr}

080100c8 <remoteconfig::json_get_version(char*, unsigned short)>:
 80100c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80100ca:	2208      	movs	r2, #8
 80100cc:	4b09      	ldr	r3, [pc, #36]	; (80100f4 <remoteconfig::json_get_version(char*, unsigned short)+0x2c>)
 80100ce:	9204      	str	r2, [sp, #16]
 80100d0:	f1a3 020b 	sub.w	r2, r3, #11
 80100d4:	9203      	str	r2, [sp, #12]
 80100d6:	220b      	movs	r2, #11
 80100d8:	9202      	str	r2, [sp, #8]
 80100da:	4a07      	ldr	r2, [pc, #28]	; (80100f8 <remoteconfig::json_get_version(char*, unsigned short)+0x30>)
 80100dc:	9305      	str	r3, [sp, #20]
 80100de:	3b0e      	subs	r3, #14
 80100e0:	9201      	str	r2, [sp, #4]
 80100e2:	9300      	str	r3, [sp, #0]
 80100e4:	4a05      	ldr	r2, [pc, #20]	; (80100fc <remoteconfig::json_get_version(char*, unsigned short)+0x34>)
 80100e6:	2303      	movs	r3, #3
 80100e8:	f7f9 f97c 	bl	80093e4 <snprintf>
 80100ec:	b280      	uxth	r0, r0
 80100ee:	b007      	add	sp, #28
 80100f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80100f4:	2000a976 	andcs	sl, r0, r6, ror r9
 80100f8:	08016af9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, sp, lr}
 80100fc:	08017873 	stmdaeq	r1, {r0, r1, r4, r5, r6, fp, ip, sp, lr}

08010100 <remoteconfig::json_get_uptime(char*, unsigned short)>:
 8010100:	b508      	push	{r3, lr}
 8010102:	4b05      	ldr	r3, [pc, #20]	; (8010118 <remoteconfig::json_get_uptime(char*, unsigned short)+0x18>)
 8010104:	681a      	ldr	r2, [r3, #0]
 8010106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801010a:	fbb2 f3f3 	udiv	r3, r2, r3
 801010e:	4a03      	ldr	r2, [pc, #12]	; (801011c <remoteconfig::json_get_uptime(char*, unsigned short)+0x1c>)
 8010110:	f7f9 f968 	bl	80093e4 <snprintf>
 8010114:	b280      	uxth	r0, r0
 8010116:	bd08      	pop	{r3, pc}
 8010118:	2000a9dc 	ldrdcs	sl, [r0], -ip
 801011c:	080178b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, fp, ip, sp, lr}

08010120 <remoteconfig::json_get_display(char*, unsigned short)>:
 8010120:	b508      	push	{r3, lr}
 8010122:	4b05      	ldr	r3, [pc, #20]	; (8010138 <remoteconfig::json_get_display(char*, unsigned short)+0x18>)
 8010124:	4a05      	ldr	r2, [pc, #20]	; (801013c <remoteconfig::json_get_display(char*, unsigned short)+0x1c>)
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	7c1b      	ldrb	r3, [r3, #16]
 801012a:	f083 0301 	eor.w	r3, r3, #1
 801012e:	f7f9 f959 	bl	80093e4 <snprintf>
 8010132:	b280      	uxth	r0, r0
 8010134:	bd08      	pop	{r3, pc}
 8010136:	bf00      	nop
 8010138:	2000a8d8 	ldrdcs	sl, [r0], -r8
 801013c:	080178c8 	stmdaeq	r1, {r3, r6, r7, fp, ip, sp, lr}

08010140 <remoteconfig::json_get_directory(char*, unsigned short)>:
 8010140:	b508      	push	{r3, lr}
 8010142:	4a02      	ldr	r2, [pc, #8]	; (801014c <remoteconfig::json_get_directory(char*, unsigned short)+0xc>)
 8010144:	f7f9 f94e 	bl	80093e4 <snprintf>
 8010148:	b280      	uxth	r0, r0
 801014a:	bd08      	pop	{r3, pc}
 801014c:	080178d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, fp, ip, sp, lr}

08010150 <get_file_content(char const*, char*)>:
 8010150:	2300      	movs	r3, #0
 8010152:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010154:	4a18      	ldr	r2, [pc, #96]	; (80101b8 <get_file_content(char const*, char*)+0x68>)
 8010156:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 801015a:	1e47      	subs	r7, r0, #1
 801015c:	1e6e      	subs	r6, r5, #1
 801015e:	f817 cf01 	ldrb.w	ip, [r7, #1]!
 8010162:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 8010166:	4564      	cmp	r4, ip
 8010168:	d00b      	beq.n	8010182 <get_file_content(char const*, char*)+0x32>
 801016a:	3301      	adds	r3, #1
 801016c:	2b03      	cmp	r3, #3
 801016e:	d1f2      	bne.n	8010156 <get_file_content(char const*, char*)+0x6>
 8010170:	2333      	movs	r3, #51	; 0x33
 8010172:	4a12      	ldr	r2, [pc, #72]	; (80101bc <get_file_content(char const*, char*)+0x6c>)
 8010174:	4912      	ldr	r1, [pc, #72]	; (80101c0 <get_file_content(char const*, char*)+0x70>)
 8010176:	4813      	ldr	r0, [pc, #76]	; (80101c4 <get_file_content(char const*, char*)+0x74>)
 8010178:	f7f9 f90c 	bl	8009394 <printf>
 801017c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010180:	e016      	b.n	80101b0 <get_file_content(char const*, char*)+0x60>
 8010182:	2c00      	cmp	r4, #0
 8010184:	d1eb      	bne.n	801015e <get_file_content(char const*, char*)+0xe>
 8010186:	460c      	mov	r4, r1
 8010188:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801018c:	6853      	ldr	r3, [r2, #4]
 801018e:	3b01      	subs	r3, #1
 8010190:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8010194:	f804 2b01 	strb.w	r2, [r4], #1
 8010198:	2a00      	cmp	r2, #0
 801019a:	d1f9      	bne.n	8010190 <get_file_content(char const*, char*)+0x40>
 801019c:	1a64      	subs	r4, r4, r1
 801019e:	3c01      	subs	r4, #1
 80101a0:	232e      	movs	r3, #46	; 0x2e
 80101a2:	e9cd 5400 	strd	r5, r4, [sp]
 80101a6:	4a06      	ldr	r2, [pc, #24]	; (80101c0 <get_file_content(char const*, char*)+0x70>)
 80101a8:	4904      	ldr	r1, [pc, #16]	; (80101bc <get_file_content(char const*, char*)+0x6c>)
 80101aa:	4807      	ldr	r0, [pc, #28]	; (80101c8 <get_file_content(char const*, char*)+0x78>)
 80101ac:	f7f9 f8f2 	bl	8009394 <printf>
 80101b0:	4620      	mov	r0, r4
 80101b2:	b003      	add	sp, #12
 80101b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101b6:	bf00      	nop
 80101b8:	08017c70 	stmdaeq	r1, {r4, r5, r6, sl, fp, ip, sp, lr}
 80101bc:	0801798c 	stmdaeq	r1, {r2, r3, r7, r8, fp, ip, sp, lr}
 80101c0:	0801796d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r8, fp, ip, sp, lr}
 80101c4:	080179b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r8, fp, ip, sp, lr}
 80101c8:	0801799d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, fp, ip, sp, lr}

080101cc <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>:
 80101cc:	2300      	movs	r3, #0
 80101ce:	2020      	movs	r0, #32
 80101d0:	b510      	push	{r4, lr}
 80101d2:	4a04      	ldr	r2, [pc, #16]	; (80101e4 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x18>)
 80101d4:	428b      	cmp	r3, r1
 80101d6:	d100      	bne.n	80101da <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0xe>
 80101d8:	bd10      	pop	{r4, pc}
 80101da:	f852 4b04 	ldr.w	r4, [r2], #4
 80101de:	3301      	adds	r3, #1
 80101e0:	4420      	add	r0, r4
 80101e2:	e7f7      	b.n	80101d4 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x8>
 80101e4:	080181b4 	stmdaeq	r1, {r2, r4, r5, r7, r8, pc}

080101e8 <SpiFlashStore::Init()>:
 80101e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80101ec:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8010304 <SpiFlashStore::Init()+0x11c>
 80101f0:	4607      	mov	r7, r0
 80101f2:	b085      	sub	sp, #20
 80101f4:	f8d8 0000 	ldr.w	r0, [r8]
 80101f8:	f000 fcac 	bl	8010b54 <FlashRom::GetSectorSize() const>
 80101fc:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8010200:	4605      	mov	r5, r0
 8010202:	d17d      	bne.n	8010300 <SpiFlashStore::Init()+0x118>
 8010204:	f8d8 0000 	ldr.w	r0, [r8]
 8010208:	f000 fc9c 	bl	8010b44 <FlashRom::GetSize() const>
 801020c:	4b3e      	ldr	r3, [pc, #248]	; (8010308 <SpiFlashStore::Init()+0x120>)
 801020e:	f5a0 5180 	sub.w	r1, r0, #4096	; 0x1000
 8010212:	f3c1 060b 	ubfx	r6, r1, #0, #12
 8010216:	6019      	str	r1, [r3, #0]
 8010218:	2e00      	cmp	r6, #0
 801021a:	d171      	bne.n	8010300 <SpiFlashStore::Init()+0x118>
 801021c:	4c3b      	ldr	r4, [pc, #236]	; (801030c <SpiFlashStore::Init()+0x124>)
 801021e:	ab03      	add	r3, sp, #12
 8010220:	9300      	str	r3, [sp, #0]
 8010222:	462a      	mov	r2, r5
 8010224:	4623      	mov	r3, r4
 8010226:	f8d8 0000 	ldr.w	r0, [r8]
 801022a:	f000 fc96 	bl	8010b5a <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>
 801022e:	7823      	ldrb	r3, [r4, #0]
 8010230:	2b41      	cmp	r3, #65	; 0x41
 8010232:	bf1c      	itt	ne
 8010234:	2341      	movne	r3, #65	; 0x41
 8010236:	7023      	strbne	r3, [r4, #0]
 8010238:	7863      	ldrb	r3, [r4, #1]
 801023a:	bf14      	ite	ne
 801023c:	4635      	movne	r5, r6
 801023e:	2501      	moveq	r5, #1
 8010240:	2b76      	cmp	r3, #118	; 0x76
 8010242:	bf1c      	itt	ne
 8010244:	2376      	movne	r3, #118	; 0x76
 8010246:	7063      	strbne	r3, [r4, #1]
 8010248:	78a3      	ldrb	r3, [r4, #2]
 801024a:	bf18      	it	ne
 801024c:	2500      	movne	r5, #0
 801024e:	2b56      	cmp	r3, #86	; 0x56
 8010250:	bf1c      	itt	ne
 8010252:	2356      	movne	r3, #86	; 0x56
 8010254:	70a3      	strbne	r3, [r4, #2]
 8010256:	78e3      	ldrb	r3, [r4, #3]
 8010258:	bf18      	it	ne
 801025a:	2500      	movne	r5, #0
 801025c:	2b10      	cmp	r3, #16
 801025e:	d022      	beq.n	80102a6 <SpiFlashStore::Init()+0xbe>
 8010260:	2310      	movs	r3, #16
 8010262:	70e3      	strb	r3, [r4, #3]
 8010264:	2201      	movs	r2, #1
 8010266:	2500      	movs	r5, #0
 8010268:	f04f 09ff 	mov.w	r9, #255	; 0xff
 801026c:	4b28      	ldr	r3, [pc, #160]	; (8010310 <SpiFlashStore::Init()+0x128>)
 801026e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8010314 <SpiFlashStore::Init()+0x12c>
 8010272:	701a      	strb	r2, [r3, #0]
 8010274:	4631      	mov	r1, r6
 8010276:	4638      	mov	r0, r7
 8010278:	f7ff ffa8 	bl	80101cc <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 801027c:	1823      	adds	r3, r4, r0
 801027e:	5425      	strb	r5, [r4, r0]
 8010280:	705d      	strb	r5, [r3, #1]
 8010282:	709d      	strb	r5, [r3, #2]
 8010284:	70dd      	strb	r5, [r3, #3]
 8010286:	f858 3b04 	ldr.w	r3, [r8], #4
 801028a:	1d02      	adds	r2, r0, #4
 801028c:	4403      	add	r3, r0
 801028e:	429a      	cmp	r2, r3
 8010290:	d332      	bcc.n	80102f8 <SpiFlashStore::Init()+0x110>
 8010292:	3601      	adds	r6, #1
 8010294:	2e1c      	cmp	r6, #28
 8010296:	d1ed      	bne.n	8010274 <SpiFlashStore::Init()+0x8c>
 8010298:	2501      	movs	r5, #1
 801029a:	4b1f      	ldr	r3, [pc, #124]	; (8010318 <SpiFlashStore::Init()+0x130>)
 801029c:	601d      	str	r5, [r3, #0]
 801029e:	4628      	mov	r0, r5
 80102a0:	b005      	add	sp, #20
 80102a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102a6:	2d00      	cmp	r5, #0
 80102a8:	d0dc      	beq.n	8010264 <SpiFlashStore::Init()+0x7c>
 80102aa:	f04f 0900 	mov.w	r9, #0
 80102ae:	46c8      	mov	r8, r9
 80102b0:	4631      	mov	r1, r6
 80102b2:	4638      	mov	r0, r7
 80102b4:	f7ff ff8a 	bl	80101cc <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 80102b8:	5c23      	ldrb	r3, [r4, r0]
 80102ba:	2bff      	cmp	r3, #255	; 0xff
 80102bc:	d112      	bne.n	80102e4 <SpiFlashStore::Init()+0xfc>
 80102be:	1823      	adds	r3, r4, r0
 80102c0:	785a      	ldrb	r2, [r3, #1]
 80102c2:	2aff      	cmp	r2, #255	; 0xff
 80102c4:	d10e      	bne.n	80102e4 <SpiFlashStore::Init()+0xfc>
 80102c6:	789a      	ldrb	r2, [r3, #2]
 80102c8:	2aff      	cmp	r2, #255	; 0xff
 80102ca:	d10b      	bne.n	80102e4 <SpiFlashStore::Init()+0xfc>
 80102cc:	78da      	ldrb	r2, [r3, #3]
 80102ce:	2aff      	cmp	r2, #255	; 0xff
 80102d0:	d108      	bne.n	80102e4 <SpiFlashStore::Init()+0xfc>
 80102d2:	46a9      	mov	r9, r5
 80102d4:	f804 8000 	strb.w	r8, [r4, r0]
 80102d8:	f883 8001 	strb.w	r8, [r3, #1]
 80102dc:	f883 8002 	strb.w	r8, [r3, #2]
 80102e0:	f883 8003 	strb.w	r8, [r3, #3]
 80102e4:	3601      	adds	r6, #1
 80102e6:	2e1c      	cmp	r6, #28
 80102e8:	d1e2      	bne.n	80102b0 <SpiFlashStore::Init()+0xc8>
 80102ea:	f1b9 0f00 	cmp.w	r9, #0
 80102ee:	d0d6      	beq.n	801029e <SpiFlashStore::Init()+0xb6>
 80102f0:	2201      	movs	r2, #1
 80102f2:	4b09      	ldr	r3, [pc, #36]	; (8010318 <SpiFlashStore::Init()+0x130>)
 80102f4:	601a      	str	r2, [r3, #0]
 80102f6:	e7d2      	b.n	801029e <SpiFlashStore::Init()+0xb6>
 80102f8:	f804 9002 	strb.w	r9, [r4, r2]
 80102fc:	3201      	adds	r2, #1
 80102fe:	e7c6      	b.n	801028e <SpiFlashStore::Init()+0xa6>
 8010300:	2500      	movs	r5, #0
 8010302:	e7cc      	b.n	801029e <SpiFlashStore::Init()+0xb6>
 8010304:	200029b8 			; <UNDEFINED> instruction: 0x200029b8
 8010308:	2000298c 	andcs	r2, r0, ip, lsl #19
 801030c:	2000198c 	andcs	r1, r0, ip, lsl #19
 8010310:	200029a0 	andcs	r2, r0, r0, lsr #19
 8010314:	080181b4 	stmdaeq	r1, {r2, r4, r5, r7, r8, pc}
 8010318:	20002998 	mulcs	r0, r8, r9

0801031c <SpiFlashStore::SpiFlashStore()>:
 801031c:	b538      	push	{r3, r4, r5, lr}
 801031e:	4b0d      	ldr	r3, [pc, #52]	; (8010354 <SpiFlashStore::SpiFlashStore()+0x38>)
 8010320:	4604      	mov	r4, r0
 8010322:	6018      	str	r0, [r3, #0]
 8010324:	4b0c      	ldr	r3, [pc, #48]	; (8010358 <SpiFlashStore::SpiFlashStore()+0x3c>)
 8010326:	4d0d      	ldr	r5, [pc, #52]	; (801035c <SpiFlashStore::SpiFlashStore()+0x40>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	781b      	ldrb	r3, [r3, #0]
 801032c:	b113      	cbz	r3, 8010334 <SpiFlashStore::SpiFlashStore()+0x18>
 801032e:	f7ff ff5b 	bl	80101e8 <SpiFlashStore::Init()>
 8010332:	7028      	strb	r0, [r5, #0]
 8010334:	782b      	ldrb	r3, [r5, #0]
 8010336:	b153      	cbz	r3, 801034e <SpiFlashStore::SpiFlashStore()+0x32>
 8010338:	2320      	movs	r3, #32
 801033a:	2200      	movs	r2, #0
 801033c:	4908      	ldr	r1, [pc, #32]	; (8010360 <SpiFlashStore::SpiFlashStore()+0x44>)
 801033e:	f851 0b04 	ldr.w	r0, [r1], #4
 8010342:	3201      	adds	r2, #1
 8010344:	2a1c      	cmp	r2, #28
 8010346:	4403      	add	r3, r0
 8010348:	d1f9      	bne.n	801033e <SpiFlashStore::SpiFlashStore()+0x22>
 801034a:	4a06      	ldr	r2, [pc, #24]	; (8010364 <SpiFlashStore::SpiFlashStore()+0x48>)
 801034c:	6013      	str	r3, [r2, #0]
 801034e:	4620      	mov	r0, r4
 8010350:	bd38      	pop	{r3, r4, r5, pc}
 8010352:	bf00      	nop
 8010354:	2000299c 	mulcs	r0, ip, r9
 8010358:	200029b8 			; <UNDEFINED> instruction: 0x200029b8
 801035c:	20002990 	mulcs	r0, r0, r9
 8010360:	080181b4 	stmdaeq	r1, {r2, r4, r5, r7, r8, pc}
 8010364:	20002994 	mulcs	r0, r4, r9

08010368 <SpiFlashStore::ResetSetList(spiflashstore::Store)>:
 8010368:	b508      	push	{r3, lr}
 801036a:	f7ff ff2f 	bl	80101cc <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 801036e:	2300      	movs	r3, #0
 8010370:	4904      	ldr	r1, [pc, #16]	; (8010384 <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x1c>)
 8010372:	1842      	adds	r2, r0, r1
 8010374:	540b      	strb	r3, [r1, r0]
 8010376:	7053      	strb	r3, [r2, #1]
 8010378:	7093      	strb	r3, [r2, #2]
 801037a:	70d3      	strb	r3, [r2, #3]
 801037c:	2201      	movs	r2, #1
 801037e:	4b02      	ldr	r3, [pc, #8]	; (8010388 <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x20>)
 8010380:	601a      	str	r2, [r3, #0]
 8010382:	bd08      	pop	{r3, pc}
 8010384:	2000198c 	andcs	r1, r0, ip, lsl #19
 8010388:	20002998 	mulcs	r0, r8, r9

0801038c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>:
 801038c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010390:	461c      	mov	r4, r3
 8010392:	4b19      	ldr	r3, [pc, #100]	; (80103f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x6c>)
 8010394:	4615      	mov	r5, r2
 8010396:	781f      	ldrb	r7, [r3, #0]
 8010398:	9e07      	ldr	r6, [sp, #28]
 801039a:	b307      	cbz	r7, 80103de <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 801039c:	f7ff ff16 	bl	80101cc <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 80103a0:	f04f 0c00 	mov.w	ip, #0
 80103a4:	4a15      	ldr	r2, [pc, #84]	; (80103fc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x70>)
 80103a6:	1941      	adds	r1, r0, r5
 80103a8:	1e63      	subs	r3, r4, #1
 80103aa:	9c06      	ldr	r4, [sp, #24]
 80103ac:	4411      	add	r1, r2
 80103ae:	440c      	add	r4, r1
 80103b0:	42a1      	cmp	r1, r4
 80103b2:	d116      	bne.n	80103e2 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x56>
 80103b4:	f1bc 0f00 	cmp.w	ip, #0
 80103b8:	d011      	beq.n	80103de <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 80103ba:	4b11      	ldr	r3, [pc, #68]	; (8010400 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x74>)
 80103bc:	6819      	ldr	r1, [r3, #0]
 80103be:	b109      	cbz	r1, 80103c4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x38>
 80103c0:	2906      	cmp	r1, #6
 80103c2:	d101      	bne.n	80103c8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x3c>
 80103c4:	2101      	movs	r1, #1
 80103c6:	6019      	str	r1, [r3, #0]
 80103c8:	4b0e      	ldr	r3, [pc, #56]	; (8010404 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x78>)
 80103ca:	6819      	ldr	r1, [r3, #0]
 80103cc:	4b0e      	ldr	r3, [pc, #56]	; (8010408 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x7c>)
 80103ce:	6019      	str	r1, [r3, #0]
 80103d0:	b12d      	cbz	r5, 80103de <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 80103d2:	b126      	cbz	r6, 80103de <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 80103d4:	9b08      	ldr	r3, [sp, #32]
 80103d6:	4418      	add	r0, r3
 80103d8:	5813      	ldr	r3, [r2, r0]
 80103da:	4333      	orrs	r3, r6
 80103dc:	5013      	str	r3, [r2, r0]
 80103de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103e2:	f891 8000 	ldrb.w	r8, [r1]
 80103e6:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80103ea:	3101      	adds	r1, #1
 80103ec:	45f0      	cmp	r8, lr
 80103ee:	bf1c      	itt	ne
 80103f0:	f801 ec01 	strbne.w	lr, [r1, #-1]
 80103f4:	46bc      	movne	ip, r7
 80103f6:	e7db      	b.n	80103b0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x24>
 80103f8:	20002990 	mulcs	r0, r0, r9
 80103fc:	2000198c 	andcs	r1, r0, ip, lsl #19
 8010400:	20002998 	mulcs	r0, r8, r9
 8010404:	2000a9dc 	ldrdcs	sl, [r0], -ip
 8010408:	20001988 	andcs	r1, r0, r8, lsl #19

0801040c <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>:
 801040c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8010410:	461d      	mov	r5, r3
 8010412:	4b11      	ldr	r3, [pc, #68]	; (8010458 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x4c>)
 8010414:	4607      	mov	r7, r0
 8010416:	781b      	ldrb	r3, [r3, #0]
 8010418:	4614      	mov	r4, r2
 801041a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 801041e:	b1c3      	cbz	r3, 8010452 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x46>
 8010420:	f7ff fed4 	bl	80101cc <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 8010424:	4a0d      	ldr	r2, [pc, #52]	; (801045c <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x50>)
 8010426:	eb00 0608 	add.w	r6, r0, r8
 801042a:	5990      	ldr	r0, [r2, r6]
 801042c:	18b3      	adds	r3, r6, r2
 801042e:	b140      	cbz	r0, 8010442 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x36>
 8010430:	3c01      	subs	r4, #1
 8010432:	441d      	add	r5, r3
 8010434:	429d      	cmp	r5, r3
 8010436:	d00c      	beq.n	8010452 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x46>
 8010438:	f813 2b01 	ldrb.w	r2, [r3], #1
 801043c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010440:	e7f8      	b.n	8010434 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x28>
 8010442:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8010446:	4623      	mov	r3, r4
 8010448:	4642      	mov	r2, r8
 801044a:	4638      	mov	r0, r7
 801044c:	9500      	str	r5, [sp, #0]
 801044e:	f7ff ff9d 	bl	801038c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010452:	b004      	add	sp, #16
 8010454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010458:	20002990 	mulcs	r0, r0, r9
 801045c:	2000198c 	andcs	r1, r0, ip, lsl #19

08010460 <SpiFlashStore::Flash()>:
 8010460:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010462:	4c25      	ldr	r4, [pc, #148]	; (80104f8 <SpiFlashStore::Flash()+0x98>)
 8010464:	6820      	ldr	r0, [r4, #0]
 8010466:	2800      	cmp	r0, #0
 8010468:	d043      	beq.n	80104f2 <SpiFlashStore::Flash()+0x92>
 801046a:	3801      	subs	r0, #1
 801046c:	2805      	cmp	r0, #5
 801046e:	d831      	bhi.n	80104d4 <SpiFlashStore::Flash()+0x74>
 8010470:	e8df f000 	tbb	[pc, r0]
 8010474:	2e140b03 	vnmlscs.f64	d0, d4, d3
 8010478:	4b203025 	blmi	881c514 <__exidx_end+0x803748>
 801047c:	681a      	ldr	r2, [r3, #0]
 801047e:	4b20      	ldr	r3, [pc, #128]	; (8010500 <SpiFlashStore::Flash()+0xa0>)
 8010480:	601a      	str	r2, [r3, #0]
 8010482:	2302      	movs	r3, #2
 8010484:	6023      	str	r3, [r4, #0]
 8010486:	2001      	movs	r0, #1
 8010488:	e033      	b.n	80104f2 <SpiFlashStore::Flash()+0x92>
 801048a:	4b1c      	ldr	r3, [pc, #112]	; (80104fc <SpiFlashStore::Flash()+0x9c>)
 801048c:	4a1c      	ldr	r2, [pc, #112]	; (8010500 <SpiFlashStore::Flash()+0xa0>)
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	6812      	ldr	r2, [r2, #0]
 8010492:	1a9b      	subs	r3, r3, r2
 8010494:	2b63      	cmp	r3, #99	; 0x63
 8010496:	d9f6      	bls.n	8010486 <SpiFlashStore::Flash()+0x26>
 8010498:	2303      	movs	r3, #3
 801049a:	e7f3      	b.n	8010484 <SpiFlashStore::Flash()+0x24>
 801049c:	4919      	ldr	r1, [pc, #100]	; (8010504 <SpiFlashStore::Flash()+0xa4>)
 801049e:	481a      	ldr	r0, [pc, #104]	; (8010508 <SpiFlashStore::Flash()+0xa8>)
 80104a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80104a4:	6809      	ldr	r1, [r1, #0]
 80104a6:	6800      	ldr	r0, [r0, #0]
 80104a8:	ab03      	add	r3, sp, #12
 80104aa:	f000 fb65 	bl	8010b78 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>
 80104ae:	2800      	cmp	r0, #0
 80104b0:	d0e9      	beq.n	8010486 <SpiFlashStore::Flash()+0x26>
 80104b2:	4b12      	ldr	r3, [pc, #72]	; (80104fc <SpiFlashStore::Flash()+0x9c>)
 80104b4:	681a      	ldr	r2, [r3, #0]
 80104b6:	4b12      	ldr	r3, [pc, #72]	; (8010500 <SpiFlashStore::Flash()+0xa0>)
 80104b8:	601a      	str	r2, [r3, #0]
 80104ba:	2305      	movs	r3, #5
 80104bc:	e7e2      	b.n	8010484 <SpiFlashStore::Flash()+0x24>
 80104be:	4b0f      	ldr	r3, [pc, #60]	; (80104fc <SpiFlashStore::Flash()+0x9c>)
 80104c0:	4a0f      	ldr	r2, [pc, #60]	; (8010500 <SpiFlashStore::Flash()+0xa0>)
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	6812      	ldr	r2, [r2, #0]
 80104c6:	1a9b      	subs	r3, r3, r2
 80104c8:	2b63      	cmp	r3, #99	; 0x63
 80104ca:	d9dc      	bls.n	8010486 <SpiFlashStore::Flash()+0x26>
 80104cc:	2304      	movs	r3, #4
 80104ce:	e7d9      	b.n	8010484 <SpiFlashStore::Flash()+0x24>
 80104d0:	2306      	movs	r3, #6
 80104d2:	e7d7      	b.n	8010484 <SpiFlashStore::Flash()+0x24>
 80104d4:	ab03      	add	r3, sp, #12
 80104d6:	4a0d      	ldr	r2, [pc, #52]	; (801050c <SpiFlashStore::Flash()+0xac>)
 80104d8:	490a      	ldr	r1, [pc, #40]	; (8010504 <SpiFlashStore::Flash()+0xa4>)
 80104da:	480b      	ldr	r0, [pc, #44]	; (8010508 <SpiFlashStore::Flash()+0xa8>)
 80104dc:	9300      	str	r3, [sp, #0]
 80104de:	6812      	ldr	r2, [r2, #0]
 80104e0:	4b0b      	ldr	r3, [pc, #44]	; (8010510 <SpiFlashStore::Flash()+0xb0>)
 80104e2:	6809      	ldr	r1, [r1, #0]
 80104e4:	6800      	ldr	r0, [r0, #0]
 80104e6:	f000 fbe7 	bl	8010cb8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>
 80104ea:	2800      	cmp	r0, #0
 80104ec:	d0cb      	beq.n	8010486 <SpiFlashStore::Flash()+0x26>
 80104ee:	2000      	movs	r0, #0
 80104f0:	6020      	str	r0, [r4, #0]
 80104f2:	b004      	add	sp, #16
 80104f4:	bd10      	pop	{r4, pc}
 80104f6:	bf00      	nop
 80104f8:	20002998 	mulcs	r0, r8, r9
 80104fc:	2000a9dc 	ldrdcs	sl, [r0], -ip
 8010500:	20001988 	andcs	r1, r0, r8, lsl #19
 8010504:	2000298c 	andcs	r2, r0, ip, lsl #19
 8010508:	200029b8 			; <UNDEFINED> instruction: 0x200029b8
 801050c:	20002994 	mulcs	r0, r4, r9
 8010510:	2000198c 	andcs	r1, r0, ip, lsl #19

08010514 <StoreArtNet::~StoreArtNet()>:
 8010514:	4770      	bx	lr

08010516 <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 8010516:	3804      	subs	r0, #4
 8010518:	4770      	bx	lr
	...

0801051c <StoreArtNet::Update(artnetparams::Params const*)>:
 801051c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801051e:	2200      	movs	r2, #0
 8010520:	460b      	mov	r3, r1
 8010522:	2187      	movs	r1, #135	; 0x87
 8010524:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8010528:	4804      	ldr	r0, [pc, #16]	; (801053c <StoreArtNet::Update(artnetparams::Params const*)+0x20>)
 801052a:	9100      	str	r1, [sp, #0]
 801052c:	6800      	ldr	r0, [r0, #0]
 801052e:	2101      	movs	r1, #1
 8010530:	f7ff ff2c 	bl	801038c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010534:	b005      	add	sp, #20
 8010536:	f85d fb04 	ldr.w	pc, [sp], #4
 801053a:	bf00      	nop
 801053c:	2000299c 	mulcs	r0, ip, r9

08010540 <StoreArtNet::SaveShortName(char const*)>:
 8010540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010542:	460b      	mov	r3, r1
 8010544:	2202      	movs	r2, #2
 8010546:	2100      	movs	r1, #0
 8010548:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801054c:	2212      	movs	r2, #18
 801054e:	4805      	ldr	r0, [pc, #20]	; (8010564 <StoreArtNet::SaveShortName(char const*)+0x24>)
 8010550:	9200      	str	r2, [sp, #0]
 8010552:	2101      	movs	r1, #1
 8010554:	220c      	movs	r2, #12
 8010556:	6800      	ldr	r0, [r0, #0]
 8010558:	f7ff ff18 	bl	801038c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801055c:	b005      	add	sp, #20
 801055e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010562:	bf00      	nop
 8010564:	2000299c 	mulcs	r0, ip, r9

08010568 <non-virtual thunk to StoreArtNet::SaveShortName(char const*)>:
 8010568:	f1a0 0004 	sub.w	r0, r0, #4
 801056c:	f7ff bfe8 	b.w	8010540 <StoreArtNet::SaveShortName(char const*)>

08010570 <StoreArtNet::SaveLongName(char const*)>:
 8010570:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010572:	460b      	mov	r3, r1
 8010574:	2200      	movs	r2, #0
 8010576:	2101      	movs	r1, #1
 8010578:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801057c:	2240      	movs	r2, #64	; 0x40
 801057e:	4804      	ldr	r0, [pc, #16]	; (8010590 <StoreArtNet::SaveLongName(char const*)+0x20>)
 8010580:	9200      	str	r2, [sp, #0]
 8010582:	6800      	ldr	r0, [r0, #0]
 8010584:	221e      	movs	r2, #30
 8010586:	f7ff ff01 	bl	801038c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801058a:	b005      	add	sp, #20
 801058c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010590:	2000299c 	mulcs	r0, ip, r9

08010594 <non-virtual thunk to StoreArtNet::SaveLongName(char const*)>:
 8010594:	f1a0 0004 	sub.w	r0, r0, #4
 8010598:	f7ff bfea 	b.w	8010570 <StoreArtNet::SaveLongName(char const*)>

0801059c <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 801059c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801059e:	2300      	movs	r3, #0
 80105a0:	9302      	str	r3, [sp, #8]
 80105a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80105a6:	4608      	mov	r0, r1
 80105a8:	408b      	lsls	r3, r1
 80105aa:	2101      	movs	r1, #1
 80105ac:	f88d 2017 	strb.w	r2, [sp, #23]
 80105b0:	f100 0267 	add.w	r2, r0, #103	; 0x67
 80105b4:	4805      	ldr	r0, [pc, #20]	; (80105cc <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x30>)
 80105b6:	9301      	str	r3, [sp, #4]
 80105b8:	9100      	str	r1, [sp, #0]
 80105ba:	6800      	ldr	r0, [r0, #0]
 80105bc:	f10d 0317 	add.w	r3, sp, #23
 80105c0:	f7ff fee4 	bl	801038c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80105c4:	b007      	add	sp, #28
 80105c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80105ca:	bf00      	nop
 80105cc:	2000299c 	mulcs	r0, ip, r9

080105d0 <non-virtual thunk to StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 80105d0:	f1a0 0004 	sub.w	r0, r0, #4
 80105d4:	f7ff bfe2 	b.w	801059c <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>

080105d8 <StoreArtNet::SaveNetSwitch(unsigned char)>:
 80105d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80105da:	2204      	movs	r2, #4
 80105dc:	2300      	movs	r3, #0
 80105de:	f88d 1017 	strb.w	r1, [sp, #23]
 80105e2:	2101      	movs	r1, #1
 80105e4:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80105e8:	4804      	ldr	r0, [pc, #16]	; (80105fc <StoreArtNet::SaveNetSwitch(unsigned char)+0x24>)
 80105ea:	9100      	str	r1, [sp, #0]
 80105ec:	6800      	ldr	r0, [r0, #0]
 80105ee:	f10d 0317 	add.w	r3, sp, #23
 80105f2:	f7ff fecb 	bl	801038c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80105f6:	b007      	add	sp, #28
 80105f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80105fc:	2000299c 	mulcs	r0, ip, r9

08010600 <non-virtual thunk to StoreArtNet::SaveNetSwitch(unsigned char)>:
 8010600:	f1a0 0004 	sub.w	r0, r0, #4
 8010604:	f7ff bfe8 	b.w	80105d8 <StoreArtNet::SaveNetSwitch(unsigned char)>

08010608 <StoreArtNet::SaveSubnetSwitch(unsigned char)>:
 8010608:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801060a:	2308      	movs	r3, #8
 801060c:	2200      	movs	r2, #0
 801060e:	f88d 1017 	strb.w	r1, [sp, #23]
 8010612:	2101      	movs	r1, #1
 8010614:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010618:	4805      	ldr	r0, [pc, #20]	; (8010630 <StoreArtNet::SaveSubnetSwitch(unsigned char)+0x28>)
 801061a:	9100      	str	r1, [sp, #0]
 801061c:	2205      	movs	r2, #5
 801061e:	6800      	ldr	r0, [r0, #0]
 8010620:	f10d 0317 	add.w	r3, sp, #23
 8010624:	f7ff feb2 	bl	801038c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010628:	b007      	add	sp, #28
 801062a:	f85d fb04 	ldr.w	pc, [sp], #4
 801062e:	bf00      	nop
 8010630:	2000299c 	mulcs	r0, ip, r9

08010634 <non-virtual thunk to StoreArtNet::SaveSubnetSwitch(unsigned char)>:
 8010634:	f1a0 0004 	sub.w	r0, r0, #4
 8010638:	f7ff bfe6 	b.w	8010608 <StoreArtNet::SaveSubnetSwitch(unsigned char)>

0801063c <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 801063c:	b530      	push	{r4, r5, lr}
 801063e:	b087      	sub	sp, #28
 8010640:	460c      	mov	r4, r1
 8010642:	4d0f      	ldr	r5, [pc, #60]	; (8010680 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x44>)
 8010644:	9205      	str	r2, [sp, #20]
 8010646:	b951      	cbnz	r1, 801065e <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x22>
 8010648:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801064c:	9102      	str	r1, [sp, #8]
 801064e:	2101      	movs	r1, #1
 8010650:	226b      	movs	r2, #107	; 0x6b
 8010652:	e9cd 1300 	strd	r1, r3, [sp]
 8010656:	6828      	ldr	r0, [r5, #0]
 8010658:	ab05      	add	r3, sp, #20
 801065a:	f7ff fe97 	bl	801038c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801065e:	2300      	movs	r3, #0
 8010660:	9302      	str	r3, [sp, #8]
 8010662:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010666:	2101      	movs	r1, #1
 8010668:	40a3      	lsls	r3, r4
 801066a:	9301      	str	r3, [sp, #4]
 801066c:	6828      	ldr	r0, [r5, #0]
 801066e:	9100      	str	r1, [sp, #0]
 8010670:	ab05      	add	r3, sp, #20
 8010672:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 8010676:	f7ff fe89 	bl	801038c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801067a:	b007      	add	sp, #28
 801067c:	bd30      	pop	{r4, r5, pc}
 801067e:	bf00      	nop
 8010680:	2000299c 	mulcs	r0, ip, r9

08010684 <non-virtual thunk to StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 8010684:	f1a0 0004 	sub.w	r0, r0, #4
 8010688:	f7ff bfd8 	b.w	801063c <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>

0801068c <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 801068c:	b530      	push	{r4, r5, lr}
 801068e:	b087      	sub	sp, #28
 8010690:	460c      	mov	r4, r1
 8010692:	4d0f      	ldr	r5, [pc, #60]	; (80106d0 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x44>)
 8010694:	9205      	str	r2, [sp, #20]
 8010696:	b951      	cbnz	r1, 80106ae <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x22>
 8010698:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801069c:	9102      	str	r1, [sp, #8]
 801069e:	2101      	movs	r1, #1
 80106a0:	2270      	movs	r2, #112	; 0x70
 80106a2:	e9cd 1300 	strd	r1, r3, [sp]
 80106a6:	6828      	ldr	r0, [r5, #0]
 80106a8:	ab05      	add	r3, sp, #20
 80106aa:	f7ff fe6f 	bl	801038c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80106ae:	2300      	movs	r3, #0
 80106b0:	9302      	str	r3, [sp, #8]
 80106b2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80106b6:	2101      	movs	r1, #1
 80106b8:	40a3      	lsls	r3, r4
 80106ba:	9301      	str	r3, [sp, #4]
 80106bc:	6828      	ldr	r0, [r5, #0]
 80106be:	9100      	str	r1, [sp, #0]
 80106c0:	ab05      	add	r3, sp, #20
 80106c2:	f104 0271 	add.w	r2, r4, #113	; 0x71
 80106c6:	f7ff fe61 	bl	801038c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80106ca:	b007      	add	sp, #28
 80106cc:	bd30      	pop	{r4, r5, pc}
 80106ce:	bf00      	nop
 80106d0:	2000299c 	mulcs	r0, ip, r9

080106d4 <non-virtual thunk to StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 80106d4:	f1a0 0004 	sub.w	r0, r0, #4
 80106d8:	f7ff bfd8 	b.w	801068c <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>

080106dc <StoreArtNet::~StoreArtNet()>:
 80106dc:	b510      	push	{r4, lr}
 80106de:	4604      	mov	r4, r0
 80106e0:	f003 ffa2 	bl	8014628 <operator delete(void*)>
 80106e4:	4620      	mov	r0, r4
 80106e6:	bd10      	pop	{r4, pc}

080106e8 <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 80106e8:	f1a0 0004 	sub.w	r0, r0, #4
 80106ec:	e7f6      	b.n	80106dc <StoreArtNet::~StoreArtNet()>
	...

080106f0 <StoreArtNet::Copy(artnetparams::Params*)>:
 80106f0:	2300      	movs	r3, #0
 80106f2:	b507      	push	{r0, r1, r2, lr}
 80106f4:	4805      	ldr	r0, [pc, #20]	; (801070c <StoreArtNet::Copy(artnetparams::Params*)+0x1c>)
 80106f6:	9300      	str	r3, [sp, #0]
 80106f8:	460a      	mov	r2, r1
 80106fa:	2387      	movs	r3, #135	; 0x87
 80106fc:	2101      	movs	r1, #1
 80106fe:	6800      	ldr	r0, [r0, #0]
 8010700:	f7ff fe84 	bl	801040c <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 8010704:	b003      	add	sp, #12
 8010706:	f85d fb04 	ldr.w	pc, [sp], #4
 801070a:	bf00      	nop
 801070c:	2000299c 	mulcs	r0, ip, r9

08010710 <StoreArtNet::StoreArtNet()>:
 8010710:	4a04      	ldr	r2, [pc, #16]	; (8010724 <StoreArtNet::StoreArtNet()+0x14>)
 8010712:	f102 0108 	add.w	r1, r2, #8
 8010716:	323c      	adds	r2, #60	; 0x3c
 8010718:	6042      	str	r2, [r0, #4]
 801071a:	4a03      	ldr	r2, [pc, #12]	; (8010728 <StoreArtNet::StoreArtNet()+0x18>)
 801071c:	6001      	str	r1, [r0, #0]
 801071e:	6010      	str	r0, [r2, #0]
 8010720:	4770      	bx	lr
 8010722:	bf00      	nop
 8010724:	08018224 	stmdaeq	r1, {r2, r5, r9, pc}
 8010728:	200029a4 	andcs	r2, r0, r4, lsr #19

0801072c <StoreDisplayUdf::~StoreDisplayUdf()>:
 801072c:	4770      	bx	lr
	...

08010730 <StoreDisplayUdf::Copy(displayudfparams::Params*)>:
 8010730:	2300      	movs	r3, #0
 8010732:	b507      	push	{r0, r1, r2, lr}
 8010734:	4805      	ldr	r0, [pc, #20]	; (801074c <StoreDisplayUdf::Copy(displayudfparams::Params*)+0x1c>)
 8010736:	9300      	str	r3, [sp, #0]
 8010738:	460a      	mov	r2, r1
 801073a:	2322      	movs	r3, #34	; 0x22
 801073c:	210f      	movs	r1, #15
 801073e:	6800      	ldr	r0, [r0, #0]
 8010740:	f7ff fe64 	bl	801040c <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 8010744:	b003      	add	sp, #12
 8010746:	f85d fb04 	ldr.w	pc, [sp], #4
 801074a:	bf00      	nop
 801074c:	2000299c 	mulcs	r0, ip, r9

08010750 <StoreDisplayUdf::Update(displayudfparams::Params const*)>:
 8010750:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010752:	2200      	movs	r2, #0
 8010754:	460b      	mov	r3, r1
 8010756:	2122      	movs	r1, #34	; 0x22
 8010758:	e9cd 2201 	strd	r2, r2, [sp, #4]
 801075c:	4804      	ldr	r0, [pc, #16]	; (8010770 <StoreDisplayUdf::Update(displayudfparams::Params const*)+0x20>)
 801075e:	9100      	str	r1, [sp, #0]
 8010760:	6800      	ldr	r0, [r0, #0]
 8010762:	210f      	movs	r1, #15
 8010764:	f7ff fe12 	bl	801038c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010768:	b005      	add	sp, #20
 801076a:	f85d fb04 	ldr.w	pc, [sp], #4
 801076e:	bf00      	nop
 8010770:	2000299c 	mulcs	r0, ip, r9

08010774 <StoreDisplayUdf::~StoreDisplayUdf()>:
 8010774:	b510      	push	{r4, lr}
 8010776:	4604      	mov	r4, r0
 8010778:	f003 ff56 	bl	8014628 <operator delete(void*)>
 801077c:	4620      	mov	r0, r4
 801077e:	bd10      	pop	{r4, pc}

08010780 <StoreDisplayUdf::StoreDisplayUdf()>:
 8010780:	4a02      	ldr	r2, [pc, #8]	; (801078c <StoreDisplayUdf::StoreDisplayUdf()+0xc>)
 8010782:	6002      	str	r2, [r0, #0]
 8010784:	4a02      	ldr	r2, [pc, #8]	; (8010790 <StoreDisplayUdf::StoreDisplayUdf()+0x10>)
 8010786:	6010      	str	r0, [r2, #0]
 8010788:	4770      	bx	lr
 801078a:	bf00      	nop
 801078c:	0801828c 	stmdaeq	r1, {r2, r3, r7, r9, pc}
 8010790:	200029a8 	andcs	r2, r0, r8, lsr #19

08010794 <StoreNetwork::~StoreNetwork()>:
 8010794:	4770      	bx	lr

08010796 <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 8010796:	3804      	subs	r0, #4
 8010798:	4770      	bx	lr
	...

0801079c <StoreNetwork::Update(TNetworkParams const*)>:
 801079c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801079e:	2200      	movs	r2, #0
 80107a0:	460b      	mov	r3, r1
 80107a2:	215e      	movs	r1, #94	; 0x5e
 80107a4:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80107a8:	4804      	ldr	r0, [pc, #16]	; (80107bc <StoreNetwork::Update(TNetworkParams const*)+0x20>)
 80107aa:	9100      	str	r1, [sp, #0]
 80107ac:	6800      	ldr	r0, [r0, #0]
 80107ae:	4611      	mov	r1, r2
 80107b0:	f7ff fdec 	bl	801038c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80107b4:	b005      	add	sp, #20
 80107b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80107ba:	bf00      	nop
 80107bc:	2000299c 	mulcs	r0, ip, r9

080107c0 <StoreNetwork::SaveDhcp(bool)>:
 80107c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80107c2:	2301      	movs	r3, #1
 80107c4:	f88d 1017 	strb.w	r1, [sp, #23]
 80107c8:	2100      	movs	r1, #0
 80107ca:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80107ce:	4805      	ldr	r0, [pc, #20]	; (80107e4 <StoreNetwork::SaveDhcp(bool)+0x24>)
 80107d0:	9300      	str	r3, [sp, #0]
 80107d2:	2214      	movs	r2, #20
 80107d4:	6800      	ldr	r0, [r0, #0]
 80107d6:	f10d 0317 	add.w	r3, sp, #23
 80107da:	f7ff fdd7 	bl	801038c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80107de:	b007      	add	sp, #28
 80107e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80107e4:	2000299c 	mulcs	r0, ip, r9

080107e8 <non-virtual thunk to StoreNetwork::SaveDhcp(bool)>:
 80107e8:	f1a0 0004 	sub.w	r0, r0, #4
 80107ec:	e7e8      	b.n	80107c0 <StoreNetwork::SaveDhcp(bool)>
 80107ee:	bf00      	nop

080107f0 <StoreNetwork::SaveGatewayIp(unsigned int)>:
 80107f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80107f2:	2308      	movs	r3, #8
 80107f4:	9105      	str	r1, [sp, #20]
 80107f6:	2100      	movs	r1, #0
 80107f8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80107fc:	2304      	movs	r3, #4
 80107fe:	4805      	ldr	r0, [pc, #20]	; (8010814 <StoreNetwork::SaveGatewayIp(unsigned int)+0x24>)
 8010800:	9300      	str	r3, [sp, #0]
 8010802:	220c      	movs	r2, #12
 8010804:	6800      	ldr	r0, [r0, #0]
 8010806:	ab05      	add	r3, sp, #20
 8010808:	f7ff fdc0 	bl	801038c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801080c:	b007      	add	sp, #28
 801080e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010812:	bf00      	nop
 8010814:	2000299c 	mulcs	r0, ip, r9

08010818 <non-virtual thunk to StoreNetwork::SaveGatewayIp(unsigned int)>:
 8010818:	f1a0 0004 	sub.w	r0, r0, #4
 801081c:	e7e8      	b.n	80107f0 <StoreNetwork::SaveGatewayIp(unsigned int)>
 801081e:	bf00      	nop

08010820 <StoreNetwork::SaveNetMask(unsigned int)>:
 8010820:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010822:	2304      	movs	r3, #4
 8010824:	9105      	str	r1, [sp, #20]
 8010826:	2100      	movs	r1, #0
 8010828:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801082c:	4804      	ldr	r0, [pc, #16]	; (8010840 <StoreNetwork::SaveNetMask(unsigned int)+0x20>)
 801082e:	9300      	str	r3, [sp, #0]
 8010830:	2208      	movs	r2, #8
 8010832:	6800      	ldr	r0, [r0, #0]
 8010834:	ab05      	add	r3, sp, #20
 8010836:	f7ff fda9 	bl	801038c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801083a:	b007      	add	sp, #28
 801083c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010840:	2000299c 	mulcs	r0, ip, r9

08010844 <non-virtual thunk to StoreNetwork::SaveNetMask(unsigned int)>:
 8010844:	f1a0 0004 	sub.w	r0, r0, #4
 8010848:	e7ea      	b.n	8010820 <StoreNetwork::SaveNetMask(unsigned int)>
 801084a:	bf00      	nop

0801084c <StoreNetwork::SaveIp(unsigned int)>:
 801084c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801084e:	2302      	movs	r3, #2
 8010850:	9105      	str	r1, [sp, #20]
 8010852:	2100      	movs	r1, #0
 8010854:	2204      	movs	r2, #4
 8010856:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801085a:	4804      	ldr	r0, [pc, #16]	; (801086c <StoreNetwork::SaveIp(unsigned int)+0x20>)
 801085c:	9200      	str	r2, [sp, #0]
 801085e:	6800      	ldr	r0, [r0, #0]
 8010860:	ab05      	add	r3, sp, #20
 8010862:	f7ff fd93 	bl	801038c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010866:	b007      	add	sp, #28
 8010868:	f85d fb04 	ldr.w	pc, [sp], #4
 801086c:	2000299c 	mulcs	r0, ip, r9

08010870 <non-virtual thunk to StoreNetwork::SaveIp(unsigned int)>:
 8010870:	f1a0 0004 	sub.w	r0, r0, #4
 8010874:	e7ea      	b.n	801084c <StoreNetwork::SaveIp(unsigned int)>
 8010876:	bf00      	nop

08010878 <StoreNetwork::SaveHostName(char const*, unsigned int)>:
 8010878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801087a:	460b      	mov	r3, r1
 801087c:	2020      	movs	r0, #32
 801087e:	2100      	movs	r1, #0
 8010880:	2a40      	cmp	r2, #64	; 0x40
 8010882:	bf28      	it	cs
 8010884:	2240      	movcs	r2, #64	; 0x40
 8010886:	e9cd 0101 	strd	r0, r1, [sp, #4]
 801088a:	4804      	ldr	r0, [pc, #16]	; (801089c <StoreNetwork::SaveHostName(char const*, unsigned int)+0x24>)
 801088c:	9200      	str	r2, [sp, #0]
 801088e:	6800      	ldr	r0, [r0, #0]
 8010890:	2215      	movs	r2, #21
 8010892:	f7ff fd7b 	bl	801038c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010896:	b005      	add	sp, #20
 8010898:	f85d fb04 	ldr.w	pc, [sp], #4
 801089c:	2000299c 	mulcs	r0, ip, r9

080108a0 <non-virtual thunk to StoreNetwork::SaveHostName(char const*, unsigned int)>:
 80108a0:	f1a0 0004 	sub.w	r0, r0, #4
 80108a4:	e7e8      	b.n	8010878 <StoreNetwork::SaveHostName(char const*, unsigned int)>
 80108a6:	bf00      	nop

080108a8 <StoreNetwork::~StoreNetwork()>:
 80108a8:	b510      	push	{r4, lr}
 80108aa:	4604      	mov	r4, r0
 80108ac:	f003 febc 	bl	8014628 <operator delete(void*)>
 80108b0:	4620      	mov	r0, r4
 80108b2:	bd10      	pop	{r4, pc}

080108b4 <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 80108b4:	f1a0 0004 	sub.w	r0, r0, #4
 80108b8:	e7f6      	b.n	80108a8 <StoreNetwork::~StoreNetwork()>
	...

080108bc <StoreNetwork::Copy(TNetworkParams*)>:
 80108bc:	b507      	push	{r0, r1, r2, lr}
 80108be:	460a      	mov	r2, r1
 80108c0:	2100      	movs	r1, #0
 80108c2:	4804      	ldr	r0, [pc, #16]	; (80108d4 <StoreNetwork::Copy(TNetworkParams*)+0x18>)
 80108c4:	9100      	str	r1, [sp, #0]
 80108c6:	235e      	movs	r3, #94	; 0x5e
 80108c8:	6800      	ldr	r0, [r0, #0]
 80108ca:	f7ff fd9f 	bl	801040c <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 80108ce:	b003      	add	sp, #12
 80108d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80108d4:	2000299c 	mulcs	r0, ip, r9

080108d8 <StoreNetwork::StoreNetwork()>:
 80108d8:	4a03      	ldr	r2, [pc, #12]	; (80108e8 <StoreNetwork::StoreNetwork()+0x10>)
 80108da:	6002      	str	r2, [r0, #0]
 80108dc:	322c      	adds	r2, #44	; 0x2c
 80108de:	6042      	str	r2, [r0, #4]
 80108e0:	4a02      	ldr	r2, [pc, #8]	; (80108ec <StoreNetwork::StoreNetwork()+0x14>)
 80108e2:	6010      	str	r0, [r2, #0]
 80108e4:	4770      	bx	lr
 80108e6:	bf00      	nop
 80108e8:	080182a4 	stmdaeq	r1, {r2, r5, r7, r9, pc}
 80108ec:	200029ac 	andcs	r2, r0, ip, lsr #19

080108f0 <StoreRemoteConfig::~StoreRemoteConfig()>:
 80108f0:	4770      	bx	lr
	...

080108f4 <StoreRemoteConfig::Copy(TRemoteConfigParams*)>:
 80108f4:	2300      	movs	r3, #0
 80108f6:	b507      	push	{r0, r1, r2, lr}
 80108f8:	4805      	ldr	r0, [pc, #20]	; (8010910 <StoreRemoteConfig::Copy(TRemoteConfigParams*)+0x1c>)
 80108fa:	9300      	str	r3, [sp, #0]
 80108fc:	460a      	mov	r2, r1
 80108fe:	2320      	movs	r3, #32
 8010900:	210c      	movs	r1, #12
 8010902:	6800      	ldr	r0, [r0, #0]
 8010904:	f7ff fd82 	bl	801040c <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 8010908:	b003      	add	sp, #12
 801090a:	f85d fb04 	ldr.w	pc, [sp], #4
 801090e:	bf00      	nop
 8010910:	2000299c 	mulcs	r0, ip, r9

08010914 <StoreRemoteConfig::Update(TRemoteConfigParams const*)>:
 8010914:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010916:	2200      	movs	r2, #0
 8010918:	460b      	mov	r3, r1
 801091a:	2120      	movs	r1, #32
 801091c:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8010920:	4804      	ldr	r0, [pc, #16]	; (8010934 <StoreRemoteConfig::Update(TRemoteConfigParams const*)+0x20>)
 8010922:	9100      	str	r1, [sp, #0]
 8010924:	6800      	ldr	r0, [r0, #0]
 8010926:	210c      	movs	r1, #12
 8010928:	f7ff fd30 	bl	801038c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801092c:	b005      	add	sp, #20
 801092e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010932:	bf00      	nop
 8010934:	2000299c 	mulcs	r0, ip, r9

08010938 <StoreRemoteConfig::~StoreRemoteConfig()>:
 8010938:	b510      	push	{r4, lr}
 801093a:	4604      	mov	r4, r0
 801093c:	f003 fe74 	bl	8014628 <operator delete(void*)>
 8010940:	4620      	mov	r0, r4
 8010942:	bd10      	pop	{r4, pc}

08010944 <StoreRemoteConfig::StoreRemoteConfig()>:
 8010944:	4a02      	ldr	r2, [pc, #8]	; (8010950 <StoreRemoteConfig::StoreRemoteConfig()+0xc>)
 8010946:	6002      	str	r2, [r0, #0]
 8010948:	4a02      	ldr	r2, [pc, #8]	; (8010954 <StoreRemoteConfig::StoreRemoteConfig()+0x10>)
 801094a:	6010      	str	r0, [r2, #0]
 801094c:	4770      	bx	lr
 801094e:	bf00      	nop
 8010950:	080182f4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r9, pc}
 8010954:	200029b0 			; <UNDEFINED> instruction: 0x200029b0

08010958 <StoreWS28xxDmx::~StoreWS28xxDmx()>:
 8010958:	4770      	bx	lr

0801095a <non-virtual thunk to StoreWS28xxDmx::~StoreWS28xxDmx()>:
 801095a:	3804      	subs	r0, #4
 801095c:	4770      	bx	lr
	...

08010960 <StoreWS28xxDmx::Update(TWS28xxDmxParams const*)>:
 8010960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010962:	2200      	movs	r2, #0
 8010964:	460b      	mov	r3, r1
 8010966:	2127      	movs	r1, #39	; 0x27
 8010968:	e9cd 2201 	strd	r2, r2, [sp, #4]
 801096c:	4804      	ldr	r0, [pc, #16]	; (8010980 <StoreWS28xxDmx::Update(TWS28xxDmxParams const*)+0x20>)
 801096e:	9100      	str	r1, [sp, #0]
 8010970:	6800      	ldr	r0, [r0, #0]
 8010972:	2103      	movs	r1, #3
 8010974:	f7ff fd0a 	bl	801038c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010978:	b005      	add	sp, #20
 801097a:	f85d fb04 	ldr.w	pc, [sp], #4
 801097e:	bf00      	nop
 8010980:	2000299c 	mulcs	r0, ip, r9

08010984 <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>:
 8010984:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010986:	2304      	movs	r3, #4
 8010988:	2200      	movs	r2, #0
 801098a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801098e:	2302      	movs	r3, #2
 8010990:	4806      	ldr	r0, [pc, #24]	; (80109ac <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)+0x28>)
 8010992:	9300      	str	r3, [sp, #0]
 8010994:	f8ad 1016 	strh.w	r1, [sp, #22]
 8010998:	2207      	movs	r2, #7
 801099a:	2103      	movs	r1, #3
 801099c:	6800      	ldr	r0, [r0, #0]
 801099e:	f10d 0316 	add.w	r3, sp, #22
 80109a2:	f7ff fcf3 	bl	801038c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80109a6:	b007      	add	sp, #28
 80109a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80109ac:	2000299c 	mulcs	r0, ip, r9

080109b0 <non-virtual thunk to StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>:
 80109b0:	f1a0 0004 	sub.w	r0, r0, #4
 80109b4:	e7e6      	b.n	8010984 <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>
 80109b6:	bf00      	nop

080109b8 <StoreWS28xxDmx::SaveTestPattern(unsigned char)>:
 80109b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80109ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80109be:	2200      	movs	r2, #0
 80109c0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80109c4:	2301      	movs	r3, #1
 80109c6:	4807      	ldr	r0, [pc, #28]	; (80109e4 <StoreWS28xxDmx::SaveTestPattern(unsigned char)+0x2c>)
 80109c8:	9300      	str	r3, [sp, #0]
 80109ca:	f88d 1017 	strb.w	r1, [sp, #23]
 80109ce:	2226      	movs	r2, #38	; 0x26
 80109d0:	2103      	movs	r1, #3
 80109d2:	6800      	ldr	r0, [r0, #0]
 80109d4:	f10d 0317 	add.w	r3, sp, #23
 80109d8:	f7ff fcd8 	bl	801038c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80109dc:	b007      	add	sp, #28
 80109de:	f85d fb04 	ldr.w	pc, [sp], #4
 80109e2:	bf00      	nop
 80109e4:	2000299c 	mulcs	r0, ip, r9

080109e8 <non-virtual thunk to StoreWS28xxDmx::SaveTestPattern(unsigned char)>:
 80109e8:	f1a0 0004 	sub.w	r0, r0, #4
 80109ec:	e7e4      	b.n	80109b8 <StoreWS28xxDmx::SaveTestPattern(unsigned char)>
 80109ee:	bf00      	nop

080109f0 <StoreWS28xxDmx::SaveMap(unsigned char)>:
 80109f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80109f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80109f6:	2200      	movs	r2, #0
 80109f8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80109fc:	2301      	movs	r3, #1
 80109fe:	4807      	ldr	r0, [pc, #28]	; (8010a1c <StoreWS28xxDmx::SaveMap(unsigned char)+0x2c>)
 8010a00:	9300      	str	r3, [sp, #0]
 8010a02:	f88d 1017 	strb.w	r1, [sp, #23]
 8010a06:	2213      	movs	r2, #19
 8010a08:	2103      	movs	r1, #3
 8010a0a:	6800      	ldr	r0, [r0, #0]
 8010a0c:	f10d 0317 	add.w	r3, sp, #23
 8010a10:	f7ff fcbc 	bl	801038c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010a14:	b007      	add	sp, #28
 8010a16:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a1a:	bf00      	nop
 8010a1c:	2000299c 	mulcs	r0, ip, r9

08010a20 <non-virtual thunk to StoreWS28xxDmx::SaveMap(unsigned char)>:
 8010a20:	f1a0 0004 	sub.w	r0, r0, #4
 8010a24:	e7e4      	b.n	80109f0 <StoreWS28xxDmx::SaveMap(unsigned char)>
 8010a26:	bf00      	nop

08010a28 <StoreWS28xxDmx::SaveGroupingCount(unsigned short)>:
 8010a28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010a2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a2e:	2200      	movs	r2, #0
 8010a30:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010a34:	2302      	movs	r3, #2
 8010a36:	4807      	ldr	r0, [pc, #28]	; (8010a54 <StoreWS28xxDmx::SaveGroupingCount(unsigned short)+0x2c>)
 8010a38:	9300      	str	r3, [sp, #0]
 8010a3a:	f8ad 1016 	strh.w	r1, [sp, #22]
 8010a3e:	2211      	movs	r2, #17
 8010a40:	2103      	movs	r1, #3
 8010a42:	6800      	ldr	r0, [r0, #0]
 8010a44:	f10d 0316 	add.w	r3, sp, #22
 8010a48:	f7ff fca0 	bl	801038c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010a4c:	b007      	add	sp, #28
 8010a4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a52:	bf00      	nop
 8010a54:	2000299c 	mulcs	r0, ip, r9

08010a58 <non-virtual thunk to StoreWS28xxDmx::SaveGroupingCount(unsigned short)>:
 8010a58:	f1a0 0004 	sub.w	r0, r0, #4
 8010a5c:	e7e4      	b.n	8010a28 <StoreWS28xxDmx::SaveGroupingCount(unsigned short)>
 8010a5e:	bf00      	nop

08010a60 <StoreWS28xxDmx::SaveCount(unsigned short)>:
 8010a60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010a62:	2302      	movs	r3, #2
 8010a64:	2200      	movs	r2, #0
 8010a66:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010a6a:	4807      	ldr	r0, [pc, #28]	; (8010a88 <StoreWS28xxDmx::SaveCount(unsigned short)+0x28>)
 8010a6c:	9300      	str	r3, [sp, #0]
 8010a6e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8010a72:	2205      	movs	r2, #5
 8010a74:	2103      	movs	r1, #3
 8010a76:	6800      	ldr	r0, [r0, #0]
 8010a78:	f10d 0316 	add.w	r3, sp, #22
 8010a7c:	f7ff fc86 	bl	801038c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010a80:	b007      	add	sp, #28
 8010a82:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a86:	bf00      	nop
 8010a88:	2000299c 	mulcs	r0, ip, r9

08010a8c <non-virtual thunk to StoreWS28xxDmx::SaveCount(unsigned short)>:
 8010a8c:	f1a0 0004 	sub.w	r0, r0, #4
 8010a90:	e7e6      	b.n	8010a60 <StoreWS28xxDmx::SaveCount(unsigned short)>
 8010a92:	bf00      	nop

08010a94 <StoreWS28xxDmx::SaveType(unsigned char)>:
 8010a94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010a96:	2301      	movs	r3, #1
 8010a98:	2200      	movs	r2, #0
 8010a9a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010a9e:	4807      	ldr	r0, [pc, #28]	; (8010abc <StoreWS28xxDmx::SaveType(unsigned char)+0x28>)
 8010aa0:	9300      	str	r3, [sp, #0]
 8010aa2:	f88d 1017 	strb.w	r1, [sp, #23]
 8010aa6:	2204      	movs	r2, #4
 8010aa8:	2103      	movs	r1, #3
 8010aaa:	6800      	ldr	r0, [r0, #0]
 8010aac:	f10d 0317 	add.w	r3, sp, #23
 8010ab0:	f7ff fc6c 	bl	801038c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010ab4:	b007      	add	sp, #28
 8010ab6:	f85d fb04 	ldr.w	pc, [sp], #4
 8010aba:	bf00      	nop
 8010abc:	2000299c 	mulcs	r0, ip, r9

08010ac0 <non-virtual thunk to StoreWS28xxDmx::SaveType(unsigned char)>:
 8010ac0:	f1a0 0004 	sub.w	r0, r0, #4
 8010ac4:	e7e6      	b.n	8010a94 <StoreWS28xxDmx::SaveType(unsigned char)>
 8010ac6:	bf00      	nop

08010ac8 <StoreWS28xxDmx::~StoreWS28xxDmx()>:
 8010ac8:	b510      	push	{r4, lr}
 8010aca:	4604      	mov	r4, r0
 8010acc:	f003 fdac 	bl	8014628 <operator delete(void*)>
 8010ad0:	4620      	mov	r0, r4
 8010ad2:	bd10      	pop	{r4, pc}

08010ad4 <non-virtual thunk to StoreWS28xxDmx::~StoreWS28xxDmx()>:
 8010ad4:	f1a0 0004 	sub.w	r0, r0, #4
 8010ad8:	e7f6      	b.n	8010ac8 <StoreWS28xxDmx::~StoreWS28xxDmx()>
	...

08010adc <StoreWS28xxDmx::Copy(TWS28xxDmxParams*)>:
 8010adc:	2300      	movs	r3, #0
 8010ade:	b507      	push	{r0, r1, r2, lr}
 8010ae0:	4805      	ldr	r0, [pc, #20]	; (8010af8 <StoreWS28xxDmx::Copy(TWS28xxDmxParams*)+0x1c>)
 8010ae2:	9300      	str	r3, [sp, #0]
 8010ae4:	460a      	mov	r2, r1
 8010ae6:	2327      	movs	r3, #39	; 0x27
 8010ae8:	2103      	movs	r1, #3
 8010aea:	6800      	ldr	r0, [r0, #0]
 8010aec:	f7ff fc8e 	bl	801040c <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 8010af0:	b003      	add	sp, #12
 8010af2:	f85d fb04 	ldr.w	pc, [sp], #4
 8010af6:	bf00      	nop
 8010af8:	2000299c 	mulcs	r0, ip, r9

08010afc <StoreWS28xxDmx::StoreWS28xxDmx()>:
 8010afc:	4a03      	ldr	r2, [pc, #12]	; (8010b0c <StoreWS28xxDmx::StoreWS28xxDmx()+0x10>)
 8010afe:	6002      	str	r2, [r0, #0]
 8010b00:	3230      	adds	r2, #48	; 0x30
 8010b02:	6042      	str	r2, [r0, #4]
 8010b04:	4a02      	ldr	r2, [pc, #8]	; (8010b10 <StoreWS28xxDmx::StoreWS28xxDmx()+0x14>)
 8010b06:	6010      	str	r0, [r2, #0]
 8010b08:	4770      	bx	lr
 8010b0a:	bf00      	nop
 8010b0c:	0801830c 	stmdaeq	r1, {r2, r3, r8, r9, pc}
 8010b10:	200029b4 			; <UNDEFINED> instruction: 0x200029b4

08010b14 <FlashRom::FlashRom()>:
 8010b14:	4b07      	ldr	r3, [pc, #28]	; (8010b34 <FlashRom::FlashRom()+0x20>)
 8010b16:	b510      	push	{r4, lr}
 8010b18:	6018      	str	r0, [r3, #0]
 8010b1a:	2301      	movs	r3, #1
 8010b1c:	4604      	mov	r4, r0
 8010b1e:	7003      	strb	r3, [r0, #0]
 8010b20:	4b05      	ldr	r3, [pc, #20]	; (8010b38 <FlashRom::FlashRom()+0x24>)
 8010b22:	4906      	ldr	r1, [pc, #24]	; (8010b3c <FlashRom::FlashRom()+0x28>)
 8010b24:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8010b28:	4805      	ldr	r0, [pc, #20]	; (8010b40 <FlashRom::FlashRom()+0x2c>)
 8010b2a:	029a      	lsls	r2, r3, #10
 8010b2c:	f7f8 fc32 	bl	8009394 <printf>
 8010b30:	4620      	mov	r0, r4
 8010b32:	bd10      	pop	{r4, pc}
 8010b34:	200029b8 			; <UNDEFINED> instruction: 0x200029b8
 8010b38:	1ffff700 	svcne	0x00fff700
 8010b3c:	08016af9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, sp, lr}
 8010b40:	0801835c 	stmdaeq	r1, {r2, r3, r4, r6, r8, r9, pc}

08010b44 <FlashRom::GetSize() const>:
 8010b44:	4b02      	ldr	r3, [pc, #8]	; (8010b50 <FlashRom::GetSize() const+0xc>)
 8010b46:	f8b3 00e0 	ldrh.w	r0, [r3, #224]	; 0xe0
 8010b4a:	0280      	lsls	r0, r0, #10
 8010b4c:	4770      	bx	lr
 8010b4e:	bf00      	nop
 8010b50:	1ffff700 	svcne	0x00fff700

08010b54 <FlashRom::GetSectorSize() const>:
 8010b54:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8010b58:	4770      	bx	lr

08010b5a <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>:
 8010b5a:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8010b5e:	441a      	add	r2, r3
 8010b60:	4293      	cmp	r3, r2
 8010b62:	d104      	bne.n	8010b6e <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x14>
 8010b64:	2200      	movs	r2, #0
 8010b66:	9b00      	ldr	r3, [sp, #0]
 8010b68:	2001      	movs	r0, #1
 8010b6a:	601a      	str	r2, [r3, #0]
 8010b6c:	4770      	bx	lr
 8010b6e:	f851 0b04 	ldr.w	r0, [r1], #4
 8010b72:	f843 0b04 	str.w	r0, [r3], #4
 8010b76:	e7f3      	b.n	8010b60 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x6>

08010b78 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>:
 8010b78:	2000      	movs	r0, #0
 8010b7a:	b538      	push	{r3, r4, r5, lr}
 8010b7c:	4c47      	ldr	r4, [pc, #284]	; (8010c9c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x124>)
 8010b7e:	6018      	str	r0, [r3, #0]
 8010b80:	6823      	ldr	r3, [r4, #0]
 8010b82:	2b04      	cmp	r3, #4
 8010b84:	f200 8082 	bhi.w	8010c8c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 8010b88:	e8df f003 	tbb	[pc, r3]
 8010b8c:	78452003 	stmdavc	r5, {r0, r1, sp}^
 8010b90:	4b430080 	blmi	90d0d98 <__exidx_end+0x10b7fcc>
 8010b94:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8010b98:	6019      	str	r1, [r3, #0]
 8010b9a:	4b42      	ldr	r3, [pc, #264]	; (8010ca4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 8010b9c:	601a      	str	r2, [r3, #0]
 8010b9e:	4b42      	ldr	r3, [pc, #264]	; (8010ca8 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x130>)
 8010ba0:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8010ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010ba8:	4b40      	ldr	r3, [pc, #256]	; (8010cac <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8010baa:	d807      	bhi.n	8010bbc <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x44>
 8010bac:	2201      	movs	r2, #1
 8010bae:	701a      	strb	r2, [r3, #0]
 8010bb0:	f004 f83c 	bl	8014c2c <fmc_bank0_unlock>
 8010bb4:	2301      	movs	r3, #1
 8010bb6:	6023      	str	r3, [r4, #0]
 8010bb8:	2000      	movs	r0, #0
 8010bba:	e026      	b.n	8010c0a <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 8010bbc:	4a3c      	ldr	r2, [pc, #240]	; (8010cb0 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x138>)
 8010bbe:	4291      	cmp	r1, r2
 8010bc0:	d3f4      	bcc.n	8010bac <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x34>
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	701a      	strb	r2, [r3, #0]
 8010bc6:	f004 f83f 	bl	8014c48 <fmc_bank1_unlock>
 8010bca:	e7f3      	b.n	8010bb4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 8010bcc:	4d37      	ldr	r5, [pc, #220]	; (8010cac <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8010bce:	782b      	ldrb	r3, [r5, #0]
 8010bd0:	b15b      	cbz	r3, 8010bea <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x72>
 8010bd2:	f004 f857 	bl	8014c84 <fmc_bank0_state_get>
 8010bd6:	2801      	cmp	r0, #1
 8010bd8:	d0ee      	beq.n	8010bb8 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x40>
 8010bda:	7829      	ldrb	r1, [r5, #0]
 8010bdc:	4b35      	ldr	r3, [pc, #212]	; (8010cb4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 8010bde:	b939      	cbnz	r1, 8010bf0 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x78>
 8010be0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010be2:	f022 0202 	bic.w	r2, r2, #2
 8010be6:	651a      	str	r2, [r3, #80]	; 0x50
 8010be8:	e006      	b.n	8010bf8 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x80>
 8010bea:	f004 f85d 	bl	8014ca8 <fmc_bank1_state_get>
 8010bee:	e7f2      	b.n	8010bd6 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x5e>
 8010bf0:	691a      	ldr	r2, [r3, #16]
 8010bf2:	f022 0202 	bic.w	r2, r2, #2
 8010bf6:	611a      	str	r2, [r3, #16]
 8010bf8:	4b2a      	ldr	r3, [pc, #168]	; (8010ca4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	b94b      	cbnz	r3, 8010c12 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x9a>
 8010bfe:	b129      	cbz	r1, 8010c0c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x94>
 8010c00:	f004 f830 	bl	8014c64 <fmc_bank0_lock>
 8010c04:	2300      	movs	r3, #0
 8010c06:	2001      	movs	r0, #1
 8010c08:	6023      	str	r3, [r4, #0]
 8010c0a:	bd38      	pop	{r3, r4, r5, pc}
 8010c0c:	f004 f832 	bl	8014c74 <fmc_bank1_lock>
 8010c10:	e7f8      	b.n	8010c04 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x8c>
 8010c12:	2302      	movs	r3, #2
 8010c14:	e7cf      	b.n	8010bb6 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3e>
 8010c16:	4923      	ldr	r1, [pc, #140]	; (8010ca4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 8010c18:	680b      	ldr	r3, [r1, #0]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d0ca      	beq.n	8010bb4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 8010c1e:	4b23      	ldr	r3, [pc, #140]	; (8010cac <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8010c20:	4a1f      	ldr	r2, [pc, #124]	; (8010ca0 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x128>)
 8010c22:	7818      	ldrb	r0, [r3, #0]
 8010c24:	4b23      	ldr	r3, [pc, #140]	; (8010cb4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 8010c26:	b190      	cbz	r0, 8010c4e <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd6>
 8010c28:	6918      	ldr	r0, [r3, #16]
 8010c2a:	f040 0002 	orr.w	r0, r0, #2
 8010c2e:	6118      	str	r0, [r3, #16]
 8010c30:	6810      	ldr	r0, [r2, #0]
 8010c32:	6158      	str	r0, [r3, #20]
 8010c34:	6918      	ldr	r0, [r3, #16]
 8010c36:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8010c3a:	6118      	str	r0, [r3, #16]
 8010c3c:	680b      	ldr	r3, [r1, #0]
 8010c3e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8010c42:	600b      	str	r3, [r1, #0]
 8010c44:	6813      	ldr	r3, [r2, #0]
 8010c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c4a:	6013      	str	r3, [r2, #0]
 8010c4c:	e7b2      	b.n	8010bb4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 8010c4e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8010c50:	f040 0002 	orr.w	r0, r0, #2
 8010c54:	6518      	str	r0, [r3, #80]	; 0x50
 8010c56:	6810      	ldr	r0, [r2, #0]
 8010c58:	6558      	str	r0, [r3, #84]	; 0x54
 8010c5a:	69dd      	ldr	r5, [r3, #28]
 8010c5c:	07ad      	lsls	r5, r5, #30
 8010c5e:	bf48      	it	mi
 8010c60:	6158      	strmi	r0, [r3, #20]
 8010c62:	4814      	ldr	r0, [pc, #80]	; (8010cb4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 8010c64:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c6a:	6503      	str	r3, [r0, #80]	; 0x50
 8010c6c:	680b      	ldr	r3, [r1, #0]
 8010c6e:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8010c72:	600b      	str	r3, [r1, #0]
 8010c74:	6813      	ldr	r3, [r2, #0]
 8010c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c7a:	e7e6      	b.n	8010c4a <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd2>
 8010c7c:	4b0b      	ldr	r3, [pc, #44]	; (8010cac <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8010c7e:	781a      	ldrb	r2, [r3, #0]
 8010c80:	4b0c      	ldr	r3, [pc, #48]	; (8010cb4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 8010c82:	b132      	cbz	r2, 8010c92 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x11a>
 8010c84:	691a      	ldr	r2, [r3, #16]
 8010c86:	f022 0201 	bic.w	r2, r2, #1
 8010c8a:	611a      	str	r2, [r3, #16]
 8010c8c:	2000      	movs	r0, #0
 8010c8e:	6020      	str	r0, [r4, #0]
 8010c90:	e7bb      	b.n	8010c0a <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 8010c92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010c94:	f022 0201 	bic.w	r2, r2, #1
 8010c98:	651a      	str	r2, [r3, #80]	; 0x50
 8010c9a:	e7f7      	b.n	8010c8c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 8010c9c:	200029c0 	andcs	r2, r0, r0, asr #19
 8010ca0:	200029c4 	andcs	r2, r0, r4, asr #19
 8010ca4:	200029d0 	ldrdcs	r2, [r0], -r0
 8010ca8:	1ffff700 	svcne	0x00fff700
 8010cac:	200029cc 	andcs	r2, r0, ip, asr #19
 8010cb0:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 8010cb4:	40022000 	andmi	r2, r2, r0

08010cb8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>:
 8010cb8:	b570      	push	{r4, r5, r6, lr}
 8010cba:	2400      	movs	r4, #0
 8010cbc:	9804      	ldr	r0, [sp, #16]
 8010cbe:	6004      	str	r4, [r0, #0]
 8010cc0:	4c48      	ldr	r4, [pc, #288]	; (8010de4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x12c>)
 8010cc2:	6820      	ldr	r0, [r4, #0]
 8010cc4:	2804      	cmp	r0, #4
 8010cc6:	d848      	bhi.n	8010d5a <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xa2>
 8010cc8:	e8df f000 	tbb	[pc, r0]
 8010ccc:	22847c03 	addcs	r7, r4, #768	; 0x300
 8010cd0:	48450047 	stmdami	r5, {r0, r1, r2, r6}^
 8010cd4:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8010cd8:	6001      	str	r1, [r0, #0]
 8010cda:	4844      	ldr	r0, [pc, #272]	; (8010dec <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 8010cdc:	6003      	str	r3, [r0, #0]
 8010cde:	4b44      	ldr	r3, [pc, #272]	; (8010df0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 8010ce0:	601a      	str	r2, [r3, #0]
 8010ce2:	4b44      	ldr	r3, [pc, #272]	; (8010df4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x13c>)
 8010ce4:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8010ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010cec:	4b42      	ldr	r3, [pc, #264]	; (8010df8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8010cee:	d807      	bhi.n	8010d00 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x48>
 8010cf0:	2201      	movs	r2, #1
 8010cf2:	701a      	strb	r2, [r3, #0]
 8010cf4:	f003 ff9a 	bl	8014c2c <fmc_bank0_unlock>
 8010cf8:	2303      	movs	r3, #3
 8010cfa:	6023      	str	r3, [r4, #0]
 8010cfc:	2000      	movs	r0, #0
 8010cfe:	e026      	b.n	8010d4e <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 8010d00:	4a3e      	ldr	r2, [pc, #248]	; (8010dfc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x144>)
 8010d02:	4291      	cmp	r1, r2
 8010d04:	d3f4      	bcc.n	8010cf0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x38>
 8010d06:	2200      	movs	r2, #0
 8010d08:	701a      	strb	r2, [r3, #0]
 8010d0a:	f003 ff9d 	bl	8014c48 <fmc_bank1_unlock>
 8010d0e:	e7f3      	b.n	8010cf8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8010d10:	4d39      	ldr	r5, [pc, #228]	; (8010df8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8010d12:	782b      	ldrb	r3, [r5, #0]
 8010d14:	b15b      	cbz	r3, 8010d2e <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x76>
 8010d16:	f003 ffb5 	bl	8014c84 <fmc_bank0_state_get>
 8010d1a:	2801      	cmp	r0, #1
 8010d1c:	d0ee      	beq.n	8010cfc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x44>
 8010d1e:	7829      	ldrb	r1, [r5, #0]
 8010d20:	4b37      	ldr	r3, [pc, #220]	; (8010e00 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 8010d22:	b939      	cbnz	r1, 8010d34 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x7c>
 8010d24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010d26:	f022 0201 	bic.w	r2, r2, #1
 8010d2a:	651a      	str	r2, [r3, #80]	; 0x50
 8010d2c:	e006      	b.n	8010d3c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x84>
 8010d2e:	f003 ffbb 	bl	8014ca8 <fmc_bank1_state_get>
 8010d32:	e7f2      	b.n	8010d1a <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x62>
 8010d34:	691a      	ldr	r2, [r3, #16]
 8010d36:	f022 0201 	bic.w	r2, r2, #1
 8010d3a:	611a      	str	r2, [r3, #16]
 8010d3c:	4b2c      	ldr	r3, [pc, #176]	; (8010df0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	b94b      	cbnz	r3, 8010d56 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x9e>
 8010d42:	b129      	cbz	r1, 8010d50 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x98>
 8010d44:	f003 ff8e 	bl	8014c64 <fmc_bank0_lock>
 8010d48:	2300      	movs	r3, #0
 8010d4a:	2001      	movs	r0, #1
 8010d4c:	6023      	str	r3, [r4, #0]
 8010d4e:	bd70      	pop	{r4, r5, r6, pc}
 8010d50:	f003 ff90 	bl	8014c74 <fmc_bank1_lock>
 8010d54:	e7f8      	b.n	8010d48 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x90>
 8010d56:	2304      	movs	r3, #4
 8010d58:	e7cf      	b.n	8010cfa <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x42>
 8010d5a:	4a25      	ldr	r2, [pc, #148]	; (8010df0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 8010d5c:	6813      	ldr	r3, [r2, #0]
 8010d5e:	2b03      	cmp	r3, #3
 8010d60:	d91a      	bls.n	8010d98 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xe0>
 8010d62:	4b25      	ldr	r3, [pc, #148]	; (8010df8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8010d64:	7819      	ldrb	r1, [r3, #0]
 8010d66:	4b26      	ldr	r3, [pc, #152]	; (8010e00 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 8010d68:	b189      	cbz	r1, 8010d8e <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xd6>
 8010d6a:	6919      	ldr	r1, [r3, #16]
 8010d6c:	f041 0101 	orr.w	r1, r1, #1
 8010d70:	6119      	str	r1, [r3, #16]
 8010d72:	4d1e      	ldr	r5, [pc, #120]	; (8010dec <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 8010d74:	481c      	ldr	r0, [pc, #112]	; (8010de8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 8010d76:	6829      	ldr	r1, [r5, #0]
 8010d78:	6803      	ldr	r3, [r0, #0]
 8010d7a:	f851 6b04 	ldr.w	r6, [r1], #4
 8010d7e:	f843 6b04 	str.w	r6, [r3], #4
 8010d82:	6003      	str	r3, [r0, #0]
 8010d84:	6813      	ldr	r3, [r2, #0]
 8010d86:	6029      	str	r1, [r5, #0]
 8010d88:	3b04      	subs	r3, #4
 8010d8a:	6013      	str	r3, [r2, #0]
 8010d8c:	e7b4      	b.n	8010cf8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8010d8e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8010d90:	f041 0101 	orr.w	r1, r1, #1
 8010d94:	6519      	str	r1, [r3, #80]	; 0x50
 8010d96:	e7ec      	b.n	8010d72 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xba>
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d0ad      	beq.n	8010cf8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8010d9c:	4b16      	ldr	r3, [pc, #88]	; (8010df8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8010d9e:	781a      	ldrb	r2, [r3, #0]
 8010da0:	4b17      	ldr	r3, [pc, #92]	; (8010e00 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 8010da2:	b152      	cbz	r2, 8010dba <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x102>
 8010da4:	691a      	ldr	r2, [r3, #16]
 8010da6:	f042 0201 	orr.w	r2, r2, #1
 8010daa:	611a      	str	r2, [r3, #16]
 8010dac:	4a0f      	ldr	r2, [pc, #60]	; (8010dec <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 8010dae:	4b0e      	ldr	r3, [pc, #56]	; (8010de8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 8010db0:	6812      	ldr	r2, [r2, #0]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	6812      	ldr	r2, [r2, #0]
 8010db6:	601a      	str	r2, [r3, #0]
 8010db8:	e79e      	b.n	8010cf8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8010dba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010dbc:	f042 0201 	orr.w	r2, r2, #1
 8010dc0:	651a      	str	r2, [r3, #80]	; 0x50
 8010dc2:	e7f3      	b.n	8010dac <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xf4>
 8010dc4:	4b0c      	ldr	r3, [pc, #48]	; (8010df8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8010dc6:	781a      	ldrb	r2, [r3, #0]
 8010dc8:	4b0d      	ldr	r3, [pc, #52]	; (8010e00 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 8010dca:	b132      	cbz	r2, 8010dda <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x122>
 8010dcc:	691a      	ldr	r2, [r3, #16]
 8010dce:	f022 0202 	bic.w	r2, r2, #2
 8010dd2:	611a      	str	r2, [r3, #16]
 8010dd4:	2000      	movs	r0, #0
 8010dd6:	6020      	str	r0, [r4, #0]
 8010dd8:	e7b9      	b.n	8010d4e <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 8010dda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010ddc:	f022 0202 	bic.w	r2, r2, #2
 8010de0:	651a      	str	r2, [r3, #80]	; 0x50
 8010de2:	e7f7      	b.n	8010dd4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x11c>
 8010de4:	200029c0 	andcs	r2, r0, r0, asr #19
 8010de8:	200029bc 			; <UNDEFINED> instruction: 0x200029bc
 8010dec:	200029c8 	andcs	r2, r0, r8, asr #19
 8010df0:	200029d0 	ldrdcs	r2, [r0], -r0
 8010df4:	1ffff700 	svcne	0x00fff700
 8010df8:	200029cc 	andcs	r2, r0, ip, asr #19
 8010dfc:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 8010e00:	40022000 	andmi	r2, r2, r0

08010e04 <net_set_ip>:
 8010e04:	b510      	push	{r4, lr}
 8010e06:	4c05      	ldr	r4, [pc, #20]	; (8010e1c <net_set_ip+0x18>)
 8010e08:	6020      	str	r0, [r4, #0]
 8010e0a:	4621      	mov	r1, r4
 8010e0c:	4804      	ldr	r0, [pc, #16]	; (8010e20 <net_set_ip+0x1c>)
 8010e0e:	f7f6 fa59 	bl	80072c4 <arp_init>
 8010e12:	4620      	mov	r0, r4
 8010e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e18:	f001 bff6 	b.w	8012e08 <ip_set_ip>
 8010e1c:	200029d4 	ldrdcs	r2, [r0], -r4
 8010e20:	200029e0 	andcs	r2, r0, r0, ror #19

08010e24 <net_set_gw>:
 8010e24:	4b02      	ldr	r3, [pc, #8]	; (8010e30 <net_set_gw+0xc>)
 8010e26:	6098      	str	r0, [r3, #8]
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f001 bfed 	b.w	8012e08 <ip_set_ip>
 8010e2e:	bf00      	nop
 8010e30:	200029d4 	ldrdcs	r2, [r0], -r4

08010e34 <net_set_dhcp>:
 8010e34:	b570      	push	{r4, r5, r6, lr}
 8010e36:	2400      	movs	r4, #0
 8010e38:	4605      	mov	r5, r0
 8010e3a:	7014      	strb	r4, [r2, #0]
 8010e3c:	4616      	mov	r6, r2
 8010e3e:	4810      	ldr	r0, [pc, #64]	; (8010e80 <net_set_dhcp+0x4c>)
 8010e40:	460a      	mov	r2, r1
 8010e42:	4910      	ldr	r1, [pc, #64]	; (8010e84 <net_set_dhcp+0x50>)
 8010e44:	f001 fdc0 	bl	80129c8 <dhcp_client>
 8010e48:	42a0      	cmp	r0, r4
 8010e4a:	da17      	bge.n	8010e7c <net_set_dhcp+0x48>
 8010e4c:	480d      	ldr	r0, [pc, #52]	; (8010e84 <net_set_dhcp+0x50>)
 8010e4e:	f000 f837 	bl	8010ec0 <rfc3927>
 8010e52:	7030      	strb	r0, [r6, #0]
 8010e54:	490b      	ldr	r1, [pc, #44]	; (8010e84 <net_set_dhcp+0x50>)
 8010e56:	480a      	ldr	r0, [pc, #40]	; (8010e80 <net_set_dhcp+0x4c>)
 8010e58:	f7f6 fa34 	bl	80072c4 <arp_init>
 8010e5c:	4809      	ldr	r0, [pc, #36]	; (8010e84 <net_set_dhcp+0x50>)
 8010e5e:	f001 ffd3 	bl	8012e08 <ip_set_ip>
 8010e62:	4a08      	ldr	r2, [pc, #32]	; (8010e84 <net_set_dhcp+0x50>)
 8010e64:	1e6b      	subs	r3, r5, #1
 8010e66:	350b      	adds	r5, #11
 8010e68:	f812 1b01 	ldrb.w	r1, [r2], #1
 8010e6c:	f803 1f01 	strb.w	r1, [r3, #1]!
 8010e70:	42ab      	cmp	r3, r5
 8010e72:	d1f9      	bne.n	8010e68 <net_set_dhcp+0x34>
 8010e74:	4b04      	ldr	r3, [pc, #16]	; (8010e88 <net_set_dhcp+0x54>)
 8010e76:	4620      	mov	r0, r4
 8010e78:	701c      	strb	r4, [r3, #0]
 8010e7a:	bd70      	pop	{r4, r5, r6, pc}
 8010e7c:	2401      	movs	r4, #1
 8010e7e:	e7e9      	b.n	8010e54 <net_set_dhcp+0x20>
 8010e80:	200029e0 	andcs	r2, r0, r0, ror #19
 8010e84:	200029d4 	ldrdcs	r2, [r0], -r4
 8010e88:	200029e6 	andcs	r2, r0, r6, ror #19

08010e8c <net_dhcp_release>:
 8010e8c:	b508      	push	{r3, lr}
 8010e8e:	f001 fea3 	bl	8012bd8 <dhcp_client_release>
 8010e92:	2200      	movs	r2, #0
 8010e94:	4b01      	ldr	r3, [pc, #4]	; (8010e9c <net_dhcp_release+0x10>)
 8010e96:	701a      	strb	r2, [r3, #0]
 8010e98:	bd08      	pop	{r3, pc}
 8010e9a:	bf00      	nop
 8010e9c:	200029e6 	andcs	r2, r0, r6, ror #19

08010ea0 <net_timers_run>:
 8010ea0:	4b05      	ldr	r3, [pc, #20]	; (8010eb8 <net_timers_run+0x18>)
 8010ea2:	4a06      	ldr	r2, [pc, #24]	; (8010ebc <net_timers_run+0x1c>)
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	6811      	ldr	r1, [r2, #0]
 8010ea8:	4299      	cmp	r1, r3
 8010eaa:	d803      	bhi.n	8010eb4 <net_timers_run+0x14>
 8010eac:	3364      	adds	r3, #100	; 0x64
 8010eae:	6013      	str	r3, [r2, #0]
 8010eb0:	f001 bf20 	b.w	8012cf4 <igmp_timer>
 8010eb4:	4770      	bx	lr
 8010eb6:	bf00      	nop
 8010eb8:	2000a9dc 	ldrdcs	sl, [r0], -ip
 8010ebc:	200029ec 	andcs	r2, r0, ip, ror #19

08010ec0 <rfc3927>:
 8010ec0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ec4:	4606      	mov	r6, r0
 8010ec6:	25ff      	movs	r5, #255	; 0xff
 8010ec8:	4b18      	ldr	r3, [pc, #96]	; (8010f2c <rfc3927+0x6c>)
 8010eca:	4f19      	ldr	r7, [pc, #100]	; (8010f30 <rfc3927+0x70>)
 8010ecc:	791a      	ldrb	r2, [r3, #4]
 8010ece:	78dc      	ldrb	r4, [r3, #3]
 8010ed0:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8010f34 <rfc3927+0x74>
 8010ed4:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 8010ed8:	f8d7 9000 	ldr.w	r9, [r7]
 8010edc:	f8df b058 	ldr.w	fp, [pc, #88]	; 8010f38 <rfc3927+0x78>
 8010ee0:	f8df a058 	ldr.w	sl, [pc, #88]	; 8010f3c <rfc3927+0x7c>
 8010ee4:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8010ee8:	4659      	mov	r1, fp
 8010eea:	4620      	mov	r0, r4
 8010eec:	f001 fc62 	bl	80127b4 <arp_cache_lookup>
 8010ef0:	b190      	cbz	r0, 8010f18 <rfc3927+0x58>
 8010ef2:	ba24      	rev	r4, r4
 8010ef4:	3401      	adds	r4, #1
 8010ef6:	3d01      	subs	r5, #1
 8010ef8:	ba24      	rev	r4, r4
 8010efa:	b2ad      	uxth	r5, r5
 8010efc:	4554      	cmp	r4, sl
 8010efe:	bf08      	it	eq
 8010f00:	4644      	moveq	r4, r8
 8010f02:	b18d      	cbz	r5, 8010f28 <rfc3927+0x68>
 8010f04:	683b      	ldr	r3, [r7, #0]
 8010f06:	eba3 0309 	sub.w	r3, r3, r9
 8010f0a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8010f0e:	d3eb      	bcc.n	8010ee8 <rfc3927+0x28>
 8010f10:	2400      	movs	r4, #0
 8010f12:	4623      	mov	r3, r4
 8010f14:	4620      	mov	r0, r4
 8010f16:	e002      	b.n	8010f1e <rfc3927+0x5e>
 8010f18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010f1c:	2001      	movs	r0, #1
 8010f1e:	e9c6 3401 	strd	r3, r4, [r6, #4]
 8010f22:	6034      	str	r4, [r6, #0]
 8010f24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f28:	462c      	mov	r4, r5
 8010f2a:	e7f2      	b.n	8010f12 <rfc3927+0x52>
 8010f2c:	200029f0 	strdcs	r2, [r0], -r0
 8010f30:	2000a9dc 	ldrdcs	sl, [r0], -ip
 8010f34:	0100fea9 	smlatbeq	r0, r9, lr, pc	; <UNPREDICTABLE>
 8010f38:	200029f8 	strdcs	r2, [r0], -r8
 8010f3c:	fffefea9 			; <UNDEFINED> instruction: 0xfffefea9

08010f40 <_init_tcb>:
 8010f40:	b510      	push	{r4, lr}
 8010f42:	4603      	mov	r3, r0
 8010f44:	2400      	movs	r4, #0
 8010f46:	f100 0244 	add.w	r2, r0, #68	; 0x44
 8010f4a:	4293      	cmp	r3, r2
 8010f4c:	d10d      	bne.n	8010f6a <_init_tcb+0x2a>
 8010f4e:	4b08      	ldr	r3, [pc, #32]	; (8010f70 <_init_tcb+0x30>)
 8010f50:	f640 3268 	movw	r2, #2920	; 0xb68
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	8702      	strh	r2, [r0, #56]	; 0x38
 8010f58:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010f5c:	6283      	str	r3, [r0, #40]	; 0x28
 8010f5e:	6243      	str	r3, [r0, #36]	; 0x24
 8010f60:	2301      	movs	r3, #1
 8010f62:	8001      	strh	r1, [r0, #0]
 8010f64:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8010f68:	bd10      	pop	{r4, pc}
 8010f6a:	f803 4b01 	strb.w	r4, [r3], #1
 8010f6e:	e7ec      	b.n	8010f4a <_init_tcb+0xa>
 8010f70:	2000a9dc 	ldrdcs	sl, [r0], -ip

08010f74 <memcpy.isra.0>:
 8010f74:	3801      	subs	r0, #1
 8010f76:	440a      	add	r2, r1
 8010f78:	4291      	cmp	r1, r2
 8010f7a:	d100      	bne.n	8010f7e <memcpy.isra.0+0xa>
 8010f7c:	4770      	bx	lr
 8010f7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f82:	f800 3f01 	strb.w	r3, [r0, #1]!
 8010f86:	e7f7      	b.n	8010f78 <memcpy.isra.0+0x4>

08010f88 <_bswap32>:
 8010f88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010f8a:	2204      	movs	r2, #4
 8010f8c:	f100 052a 	add.w	r5, r0, #42	; 0x2a
 8010f90:	4629      	mov	r1, r5
 8010f92:	4604      	mov	r4, r0
 8010f94:	eb0d 0002 	add.w	r0, sp, r2
 8010f98:	f7ff ffec 	bl	8010f74 <memcpy.isra.0>
 8010f9c:	2204      	movs	r2, #4
 8010f9e:	9b01      	ldr	r3, [sp, #4]
 8010fa0:	eb0d 0102 	add.w	r1, sp, r2
 8010fa4:	ba1b      	rev	r3, r3
 8010fa6:	4628      	mov	r0, r5
 8010fa8:	9301      	str	r3, [sp, #4]
 8010faa:	f7ff ffe3 	bl	8010f74 <memcpy.isra.0>
 8010fae:	2204      	movs	r2, #4
 8010fb0:	3426      	adds	r4, #38	; 0x26
 8010fb2:	eb0d 0002 	add.w	r0, sp, r2
 8010fb6:	4621      	mov	r1, r4
 8010fb8:	f7ff ffdc 	bl	8010f74 <memcpy.isra.0>
 8010fbc:	2204      	movs	r2, #4
 8010fbe:	9b01      	ldr	r3, [sp, #4]
 8010fc0:	4620      	mov	r0, r4
 8010fc2:	ba1b      	rev	r3, r3
 8010fc4:	eb0d 0102 	add.w	r1, sp, r2
 8010fc8:	9301      	str	r3, [sp, #4]
 8010fca:	f7ff ffd3 	bl	8010f74 <memcpy.isra.0>
 8010fce:	b003      	add	sp, #12
 8010fd0:	bd30      	pop	{r4, r5, pc}
	...

08010fd4 <_tcp_send_package>:
 8010fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010fd8:	7a0b      	ldrb	r3, [r1, #8]
 8010fda:	4605      	mov	r5, r0
 8010fdc:	f013 0f02 	tst.w	r3, #2
 8010fe0:	bf0c      	ite	eq
 8010fe2:	f04f 0805 	moveq.w	r8, #5
 8010fe6:	f04f 0806 	movne.w	r8, #6
 8010fea:	f04f 0a00 	mov.w	sl, #0
 8010fee:	4c47      	ldr	r4, [pc, #284]	; (801110c <_tcp_send_package+0x138>)
 8010ff0:	460f      	mov	r7, r1
 8010ff2:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 8010ff4:	f100 0108 	add.w	r1, r0, #8
 8010ff8:	2206      	movs	r2, #6
 8010ffa:	4620      	mov	r0, r4
 8010ffc:	f7ff ffba 	bl	8010f74 <memcpy.isra.0>
 8011000:	4a43      	ldr	r2, [pc, #268]	; (8011110 <_tcp_send_package+0x13c>)
 8011002:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 8011006:	8813      	ldrh	r3, [r2, #0]
 8011008:	b2b6      	uxth	r6, r6
 801100a:	1c59      	adds	r1, r3, #1
 801100c:	8263      	strh	r3, [r4, #18]
 801100e:	f105 0904 	add.w	r9, r5, #4
 8011012:	f106 0314 	add.w	r3, r6, #20
 8011016:	ba5b      	rev16	r3, r3
 8011018:	8011      	strh	r1, [r2, #0]
 801101a:	f104 001e 	add.w	r0, r4, #30
 801101e:	2204      	movs	r2, #4
 8011020:	4649      	mov	r1, r9
 8011022:	8223      	strh	r3, [r4, #16]
 8011024:	f7ff ffa6 	bl	8010f74 <memcpy.isra.0>
 8011028:	2114      	movs	r1, #20
 801102a:	f104 000e 	add.w	r0, r4, #14
 801102e:	f8a4 a018 	strh.w	sl, [r4, #24]
 8011032:	f001 fef2 	bl	8012e1a <net_chksum>
 8011036:	882b      	ldrh	r3, [r5, #0]
 8011038:	ea4f 1808 	mov.w	r8, r8, lsl #4
 801103c:	8463      	strh	r3, [r4, #34]	; 0x22
 801103e:	886b      	ldrh	r3, [r5, #2]
 8011040:	8320      	strh	r0, [r4, #24]
 8011042:	84a3      	strh	r3, [r4, #36]	; 0x24
 8011044:	683b      	ldr	r3, [r7, #0]
 8011046:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
 8011048:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	f884 802e 	strb.w	r8, [r4, #46]	; 0x2e
 8011052:	f8c4 302a 	str.w	r3, [r4, #42]	; 0x2a
 8011056:	7a3b      	ldrb	r3, [r7, #8]
 8011058:	8622      	strh	r2, [r4, #48]	; 0x30
 801105a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 801105e:	079b      	lsls	r3, r3, #30
 8011060:	bf48      	it	mi
 8011062:	f240 4302 	movwmi	r3, #1026	; 0x402
 8011066:	8baa      	ldrh	r2, [r5, #28]
 8011068:	bf48      	it	mi
 801106a:	86e3      	strhmi	r3, [r4, #54]	; 0x36
 801106c:	86a2      	strh	r2, [r4, #52]	; 0x34
 801106e:	bf42      	ittt	mi
 8011070:	f24b 4305 	movwmi	r3, #46085	; 0xb405
 8011074:	4622      	movmi	r2, r4
 8011076:	f822 3f38 	strhmi.w	r3, [r2, #56]!
 801107a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801107c:	f8a4 a032 	strh.w	sl, [r4, #50]	; 0x32
 8011080:	bf58      	it	pl
 8011082:	f104 0236 	addpl.w	r2, r4, #54	; 0x36
 8011086:	2b00      	cmp	r3, #0
 8011088:	d13e      	bne.n	8011108 <_tcp_send_package+0x134>
 801108a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 801108c:	481f      	ldr	r0, [pc, #124]	; (801110c <_tcp_send_package+0x138>)
 801108e:	ba5b      	rev16	r3, r3
 8011090:	8463      	strh	r3, [r4, #34]	; 0x22
 8011092:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8011094:	ba5b      	rev16	r3, r3
 8011096:	84a3      	strh	r3, [r4, #36]	; 0x24
 8011098:	f7ff ff76 	bl	8010f88 <_bswap32>
 801109c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801109e:	a801      	add	r0, sp, #4
 80110a0:	ba5b      	rev16	r3, r3
 80110a2:	8623      	strh	r3, [r4, #48]	; 0x30
 80110a4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80110a6:	220c      	movs	r2, #12
 80110a8:	ba5b      	rev16	r3, r3
 80110aa:	491a      	ldr	r1, [pc, #104]	; (8011114 <_tcp_send_package+0x140>)
 80110ac:	86a3      	strh	r3, [r4, #52]	; 0x34
 80110ae:	f7ff ff61 	bl	8010f74 <memcpy.isra.0>
 80110b2:	2204      	movs	r2, #4
 80110b4:	4918      	ldr	r1, [pc, #96]	; (8011118 <_tcp_send_package+0x144>)
 80110b6:	4817      	ldr	r0, [pc, #92]	; (8011114 <_tcp_send_package+0x140>)
 80110b8:	f7ff ff5c 	bl	8010f74 <memcpy.isra.0>
 80110bc:	2204      	movs	r2, #4
 80110be:	4649      	mov	r1, r9
 80110c0:	4816      	ldr	r0, [pc, #88]	; (801111c <_tcp_send_package+0x148>)
 80110c2:	f7ff ff57 	bl	8010f74 <memcpy.isra.0>
 80110c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80110ca:	f106 010c 	add.w	r1, r6, #12
 80110ce:	83e3      	strh	r3, [r4, #30]
 80110d0:	4810      	ldr	r0, [pc, #64]	; (8011114 <_tcp_send_package+0x140>)
 80110d2:	ba73      	rev16	r3, r6
 80110d4:	8423      	strh	r3, [r4, #32]
 80110d6:	f001 fea0 	bl	8012e1a <net_chksum>
 80110da:	a901      	add	r1, sp, #4
 80110dc:	4605      	mov	r5, r0
 80110de:	220c      	movs	r2, #12
 80110e0:	480c      	ldr	r0, [pc, #48]	; (8011114 <_tcp_send_package+0x140>)
 80110e2:	f7ff ff47 	bl	8010f74 <memcpy.isra.0>
 80110e6:	4809      	ldr	r0, [pc, #36]	; (801110c <_tcp_send_package+0x138>)
 80110e8:	f106 0122 	add.w	r1, r6, #34	; 0x22
 80110ec:	8665      	strh	r5, [r4, #50]	; 0x32
 80110ee:	b004      	add	sp, #16
 80110f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110f4:	f004 ba42 	b.w	801557c <emac_eth_send>
 80110f8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80110fa:	5cc9      	ldrb	r1, [r1, r3]
 80110fc:	54d1      	strb	r1, [r2, r3]
 80110fe:	3301      	adds	r3, #1
 8011100:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 8011102:	4299      	cmp	r1, r3
 8011104:	d8f8      	bhi.n	80110f8 <_tcp_send_package+0x124>
 8011106:	e7c0      	b.n	801108a <_tcp_send_package+0xb6>
 8011108:	2300      	movs	r3, #0
 801110a:	e7f9      	b.n	8011100 <_tcp_send_package+0x12c>
 801110c:	200035b8 			; <UNDEFINED> instruction: 0x200035b8
 8011110:	20002a00 	andcs	r2, r0, r0, lsl #20
 8011114:	200035ce 	andcs	r3, r0, lr, asr #11
 8011118:	200029d4 	ldrdcs	r2, [r0], -r4
 801111c:	200035d2 	ldrdcs	r3, [r0], -r2

08011120 <_send_reset>:
 8011120:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011122:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8011126:	4604      	mov	r4, r0
 8011128:	075a      	lsls	r2, r3, #29
 801112a:	460e      	mov	r6, r1
 801112c:	d421      	bmi.n	8011172 <_send_reset+0x52>
 801112e:	2204      	movs	r2, #4
 8011130:	f013 0310 	ands.w	r3, r3, #16
 8011134:	f88d 200c 	strb.w	r2, [sp, #12]
 8011138:	d01d      	beq.n	8011176 <_send_reset+0x56>
 801113a:	f100 012a 	add.w	r1, r0, #42	; 0x2a
 801113e:	4668      	mov	r0, sp
 8011140:	f7ff ff18 	bl	8010f74 <memcpy.isra.0>
 8011144:	9b00      	ldr	r3, [sp, #0]
 8011146:	9301      	str	r3, [sp, #4]
 8011148:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801114c:	4668      	mov	r0, sp
 801114e:	f3c3 0540 	ubfx	r5, r3, #1, #1
 8011152:	f104 0126 	add.w	r1, r4, #38	; 0x26
 8011156:	07db      	lsls	r3, r3, #31
 8011158:	f04f 0204 	mov.w	r2, #4
 801115c:	bf48      	it	mi
 801115e:	3501      	addmi	r5, #1
 8011160:	f7ff ff08 	bl	8010f74 <memcpy.isra.0>
 8011164:	9b00      	ldr	r3, [sp, #0]
 8011166:	4630      	mov	r0, r6
 8011168:	441d      	add	r5, r3
 801116a:	a901      	add	r1, sp, #4
 801116c:	9502      	str	r5, [sp, #8]
 801116e:	f7ff ff31 	bl	8010fd4 <_tcp_send_package>
 8011172:	b004      	add	sp, #16
 8011174:	bd70      	pop	{r4, r5, r6, pc}
 8011176:	9301      	str	r3, [sp, #4]
 8011178:	2314      	movs	r3, #20
 801117a:	f88d 300c 	strb.w	r3, [sp, #12]
 801117e:	e7e3      	b.n	8011148 <_send_reset+0x28>

08011180 <tcp_begin>:
 8011180:	b508      	push	{r3, lr}
 8011182:	4b0a      	ldr	r3, [pc, #40]	; (80111ac <tcp_begin+0x2c>)
 8011184:	4601      	mov	r1, r0
 8011186:	881a      	ldrh	r2, [r3, #0]
 8011188:	4282      	cmp	r2, r0
 801118a:	d102      	bne.n	8011192 <tcp_begin+0x12>
 801118c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011190:	b130      	cbz	r0, 80111a0 <tcp_begin+0x20>
 8011192:	b12a      	cbz	r2, 80111a0 <tcp_begin+0x20>
 8011194:	4806      	ldr	r0, [pc, #24]	; (80111b0 <tcp_begin+0x30>)
 8011196:	f003 f8d1 	bl	801433c <console_error>
 801119a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801119e:	bd08      	pop	{r3, pc}
 80111a0:	4802      	ldr	r0, [pc, #8]	; (80111ac <tcp_begin+0x2c>)
 80111a2:	8019      	strh	r1, [r3, #0]
 80111a4:	f7ff fecc 	bl	8010f40 <_init_tcb>
 80111a8:	2000      	movs	r0, #0
 80111aa:	e7f8      	b.n	801119e <tcp_begin+0x1e>
 80111ac:	20003574 	andcs	r3, r0, r4, ror r5
 80111b0:	0801838a 	stmdaeq	r1, {r1, r3, r7, r8, r9, pc}

080111b4 <tcp_write>:
 80111b4:	f240 53b4 	movw	r3, #1460	; 0x5b4
 80111b8:	429a      	cmp	r2, r3
 80111ba:	bf28      	it	cs
 80111bc:	461a      	movcs	r2, r3
 80111be:	2344      	movs	r3, #68	; 0x44
 80111c0:	b530      	push	{r4, r5, lr}
 80111c2:	4c0d      	ldr	r4, [pc, #52]	; (80111f8 <tcp_write+0x44>)
 80111c4:	b085      	sub	sp, #20
 80111c6:	fb03 4400 	mla	r4, r3, r0, r4
 80111ca:	6963      	ldr	r3, [r4, #20]
 80111cc:	62e1      	str	r1, [r4, #44]	; 0x2c
 80111ce:	9301      	str	r3, [sp, #4]
 80111d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80111d2:	4620      	mov	r0, r4
 80111d4:	9302      	str	r3, [sp, #8]
 80111d6:	2318      	movs	r3, #24
 80111d8:	8622      	strh	r2, [r4, #48]	; 0x30
 80111da:	a901      	add	r1, sp, #4
 80111dc:	4615      	mov	r5, r2
 80111de:	f88d 300c 	strb.w	r3, [sp, #12]
 80111e2:	f7ff fef7 	bl	8010fd4 <_tcp_send_package>
 80111e6:	2300      	movs	r3, #0
 80111e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80111ea:	8623      	strh	r3, [r4, #48]	; 0x30
 80111ec:	6963      	ldr	r3, [r4, #20]
 80111ee:	442b      	add	r3, r5
 80111f0:	6163      	str	r3, [r4, #20]
 80111f2:	b005      	add	sp, #20
 80111f4:	bd30      	pop	{r4, r5, pc}
 80111f6:	bf00      	nop
 80111f8:	20003574 	andcs	r3, r0, r4, ror r5

080111fc <tcp_read>:
 80111fc:	2344      	movs	r3, #68	; 0x44
 80111fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011200:	4c1c      	ldr	r4, [pc, #112]	; (8011274 <tcp_read+0x78>)
 8011202:	b085      	sub	sp, #20
 8011204:	fb03 4400 	mla	r4, r3, r0, r4
 8011208:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801120c:	2b07      	cmp	r3, #7
 801120e:	d112      	bne.n	8011236 <tcp_read+0x3a>
 8011210:	6963      	ldr	r3, [r4, #20]
 8011212:	4620      	mov	r0, r4
 8011214:	9301      	str	r3, [sp, #4]
 8011216:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011218:	a901      	add	r1, sp, #4
 801121a:	9302      	str	r3, [sp, #8]
 801121c:	2311      	movs	r3, #17
 801121e:	f88d 300c 	strb.w	r3, [sp, #12]
 8011222:	f7ff fed7 	bl	8010fd4 <_tcp_send_package>
 8011226:	2309      	movs	r3, #9
 8011228:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 801122c:	6963      	ldr	r3, [r4, #20]
 801122e:	3301      	adds	r3, #1
 8011230:	6163      	str	r3, [r4, #20]
 8011232:	2000      	movs	r0, #0
 8011234:	e01b      	b.n	801126e <tcp_read+0x72>
 8011236:	f44f 6337 	mov.w	r3, #2928	; 0xb70
 801123a:	4358      	muls	r0, r3
 801123c:	4a0e      	ldr	r2, [pc, #56]	; (8011278 <tcp_read+0x7c>)
 801123e:	1817      	adds	r7, r2, r0
 8011240:	887b      	ldrh	r3, [r7, #2]
 8011242:	5a15      	ldrh	r5, [r2, r0]
 8011244:	429d      	cmp	r5, r3
 8011246:	d0f4      	beq.n	8011232 <tcp_read+0x36>
 8011248:	f240 55b6 	movw	r5, #1462	; 0x5b6
 801124c:	435d      	muls	r5, r3
 801124e:	1d06      	adds	r6, r0, #4
 8011250:	442e      	add	r6, r5
 8011252:	4416      	add	r6, r2
 8011254:	4405      	add	r5, r0
 8011256:	600e      	str	r6, [r1, #0]
 8011258:	442a      	add	r2, r5
 801125a:	f8b2 05b8 	ldrh.w	r0, [r2, #1464]	; 0x5b8
 801125e:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8011260:	3301      	adds	r3, #1
 8011262:	f202 52b4 	addw	r2, r2, #1460	; 0x5b4
 8011266:	f003 0301 	and.w	r3, r3, #1
 801126a:	8722      	strh	r2, [r4, #56]	; 0x38
 801126c:	807b      	strh	r3, [r7, #2]
 801126e:	b005      	add	sp, #20
 8011270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011272:	bf00      	nop
 8011274:	20003574 	andcs	r3, r0, r4, ror r5
 8011278:	20002a04 	andcs	r2, r0, r4, lsl #20

0801127c <memcpy.isra.0>:
 801127c:	3801      	subs	r0, #1
 801127e:	440a      	add	r2, r1
 8011280:	4291      	cmp	r1, r2
 8011282:	d100      	bne.n	8011286 <memcpy.isra.0+0xa>
 8011284:	4770      	bx	lr
 8011286:	f811 3b01 	ldrb.w	r3, [r1], #1
 801128a:	f800 3f01 	strb.w	r3, [r0, #1]!
 801128e:	e7f7      	b.n	8011280 <memcpy.isra.0+0x4>

08011290 <net_memcpy>:
 8011290:	ea40 0301 	orr.w	r3, r0, r1
 8011294:	079b      	lsls	r3, r3, #30
 8011296:	b570      	push	{r4, r5, r6, lr}
 8011298:	d108      	bne.n	80112ac <net_memcpy+0x1c>
 801129a:	f022 0303 	bic.w	r3, r2, #3
 801129e:	1f04      	subs	r4, r0, #4
 80112a0:	18cd      	adds	r5, r1, r3
 80112a2:	42a9      	cmp	r1, r5
 80112a4:	d108      	bne.n	80112b8 <net_memcpy+0x28>
 80112a6:	1ad2      	subs	r2, r2, r3
 80112a8:	4403      	add	r3, r0
 80112aa:	e000      	b.n	80112ae <net_memcpy+0x1e>
 80112ac:	4603      	mov	r3, r0
 80112ae:	3b01      	subs	r3, #1
 80112b0:	440a      	add	r2, r1
 80112b2:	4291      	cmp	r1, r2
 80112b4:	d105      	bne.n	80112c2 <net_memcpy+0x32>
 80112b6:	bd70      	pop	{r4, r5, r6, pc}
 80112b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80112bc:	f844 6f04 	str.w	r6, [r4, #4]!
 80112c0:	e7ef      	b.n	80112a2 <net_memcpy+0x12>
 80112c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80112c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80112ca:	e7f2      	b.n	80112b2 <net_memcpy+0x22>

080112cc <udp_set_ip>:
 80112cc:	2204      	movs	r2, #4
 80112ce:	b513      	push	{r0, r1, r4, lr}
 80112d0:	4604      	mov	r4, r0
 80112d2:	6803      	ldr	r3, [r0, #0]
 80112d4:	eb0d 0102 	add.w	r1, sp, r2
 80112d8:	4808      	ldr	r0, [pc, #32]	; (80112fc <udp_set_ip+0x30>)
 80112da:	9301      	str	r3, [sp, #4]
 80112dc:	f7ff ffce 	bl	801127c <memcpy.isra.0>
 80112e0:	6862      	ldr	r2, [r4, #4]
 80112e2:	4b07      	ldr	r3, [pc, #28]	; (8011300 <udp_set_ip+0x34>)
 80112e4:	43d1      	mvns	r1, r2
 80112e6:	6019      	str	r1, [r3, #0]
 80112e8:	6823      	ldr	r3, [r4, #0]
 80112ea:	4013      	ands	r3, r2
 80112ec:	4a05      	ldr	r2, [pc, #20]	; (8011304 <udp_set_ip+0x38>)
 80112ee:	6013      	str	r3, [r2, #0]
 80112f0:	68a2      	ldr	r2, [r4, #8]
 80112f2:	4b05      	ldr	r3, [pc, #20]	; (8011308 <udp_set_ip+0x3c>)
 80112f4:	601a      	str	r2, [r3, #0]
 80112f6:	b002      	add	sp, #8
 80112f8:	bd10      	pop	{r4, pc}
 80112fa:	bf00      	nop
 80112fc:	2000988e 	andcs	r9, r0, lr, lsl #17
 8011300:	20003ba4 	andcs	r3, r0, r4, lsr #23
 8011304:	20003bac 	andcs	r3, r0, ip, lsr #23
 8011308:	20003ba8 	andcs	r3, r0, r8, lsr #23

0801130c <udp_bind>:
 801130c:	4a0a      	ldr	r2, [pc, #40]	; (8011338 <udp_bind+0x2c>)
 801130e:	4603      	mov	r3, r0
 8011310:	b510      	push	{r4, lr}
 8011312:	2000      	movs	r0, #0
 8011314:	4614      	mov	r4, r2
 8011316:	f852 1b04 	ldr.w	r1, [r2], #4
 801131a:	4299      	cmp	r1, r3
 801131c:	d008      	beq.n	8011330 <udp_bind+0x24>
 801131e:	b141      	cbz	r1, 8011332 <udp_bind+0x26>
 8011320:	3001      	adds	r0, #1
 8011322:	2808      	cmp	r0, #8
 8011324:	d1f7      	bne.n	8011316 <udp_bind+0xa>
 8011326:	4805      	ldr	r0, [pc, #20]	; (801133c <udp_bind+0x30>)
 8011328:	f003 f808 	bl	801433c <console_error>
 801132c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011330:	bd10      	pop	{r4, pc}
 8011332:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 8011336:	e7fb      	b.n	8011330 <udp_bind+0x24>
 8011338:	20003bb4 			; <UNDEFINED> instruction: 0x20003bb4
 801133c:	080183aa 	stmdaeq	r1, {r1, r3, r5, r7, r8, r9, pc}

08011340 <udp_unbind>:
 8011340:	4a0c      	ldr	r2, [pc, #48]	; (8011374 <udp_unbind+0x34>)
 8011342:	2300      	movs	r3, #0
 8011344:	4611      	mov	r1, r2
 8011346:	b510      	push	{r4, lr}
 8011348:	f852 4b04 	ldr.w	r4, [r2], #4
 801134c:	4284      	cmp	r4, r0
 801134e:	d108      	bne.n	8011362 <udp_unbind+0x22>
 8011350:	2000      	movs	r0, #0
 8011352:	f640 3294 	movw	r2, #2964	; 0xb94
 8011356:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 801135a:	4353      	muls	r3, r2
 801135c:	4a06      	ldr	r2, [pc, #24]	; (8011378 <udp_unbind+0x38>)
 801135e:	50d0      	str	r0, [r2, r3]
 8011360:	bd10      	pop	{r4, pc}
 8011362:	3301      	adds	r3, #1
 8011364:	2b08      	cmp	r3, #8
 8011366:	d1ef      	bne.n	8011348 <udp_unbind+0x8>
 8011368:	4804      	ldr	r0, [pc, #16]	; (801137c <udp_unbind+0x3c>)
 801136a:	f002 ffe7 	bl	801433c <console_error>
 801136e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011372:	e7f5      	b.n	8011360 <udp_unbind+0x20>
 8011374:	20003bb4 			; <UNDEFINED> instruction: 0x20003bb4
 8011378:	20003bd4 	ldrdcs	r3, [r0], -r4
 801137c:	080183af 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, r8, r9, pc}

08011380 <udp_recv>:
 8011380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011384:	4604      	mov	r4, r0
 8011386:	4698      	mov	r8, r3
 8011388:	f640 3394 	movw	r3, #2964	; 0xb94
 801138c:	435c      	muls	r4, r3
 801138e:	4608      	mov	r0, r1
 8011390:	4915      	ldr	r1, [pc, #84]	; (80113e8 <udp_recv+0x68>)
 8011392:	190f      	adds	r7, r1, r4
 8011394:	f8b7 c002 	ldrh.w	ip, [r7, #2]
 8011398:	5b0b      	ldrh	r3, [r1, r4]
 801139a:	4563      	cmp	r3, ip
 801139c:	d021      	beq.n	80113e2 <udp_recv+0x62>
 801139e:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 80113a2:	fb03 fc0c 	mul.w	ip, r3, ip
 80113a6:	eb0c 0604 	add.w	r6, ip, r4
 80113aa:	440e      	add	r6, r1
 80113ac:	f8b6 55ca 	ldrh.w	r5, [r6, #1482]	; 0x5ca
 80113b0:	3404      	adds	r4, #4
 80113b2:	4295      	cmp	r5, r2
 80113b4:	bf28      	it	cs
 80113b6:	4615      	movcs	r5, r2
 80113b8:	4464      	add	r4, ip
 80113ba:	462a      	mov	r2, r5
 80113bc:	4421      	add	r1, r4
 80113be:	f7ff ff67 	bl	8011290 <net_memcpy>
 80113c2:	f8d6 35c4 	ldr.w	r3, [r6, #1476]	; 0x5c4
 80113c6:	f8c8 3000 	str.w	r3, [r8]
 80113ca:	f8b6 25c8 	ldrh.w	r2, [r6, #1480]	; 0x5c8
 80113ce:	9b06      	ldr	r3, [sp, #24]
 80113d0:	801a      	strh	r2, [r3, #0]
 80113d2:	887b      	ldrh	r3, [r7, #2]
 80113d4:	3301      	adds	r3, #1
 80113d6:	f003 0301 	and.w	r3, r3, #1
 80113da:	807b      	strh	r3, [r7, #2]
 80113dc:	4628      	mov	r0, r5
 80113de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113e2:	2500      	movs	r5, #0
 80113e4:	e7fa      	b.n	80113dc <udp_recv+0x5c>
 80113e6:	bf00      	nop
 80113e8:	20003bd4 	ldrdcs	r3, [r0], -r4

080113ec <udp_recv2>:
 80113ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113ee:	f640 3594 	movw	r5, #2964	; 0xb94
 80113f2:	4368      	muls	r0, r5
 80113f4:	4c0f      	ldr	r4, [pc, #60]	; (8011434 <udp_recv2+0x48>)
 80113f6:	1827      	adds	r7, r4, r0
 80113f8:	887d      	ldrh	r5, [r7, #2]
 80113fa:	5a26      	ldrh	r6, [r4, r0]
 80113fc:	42ae      	cmp	r6, r5
 80113fe:	d017      	beq.n	8011430 <udp_recv2+0x44>
 8011400:	f44f 6cb9 	mov.w	ip, #1480	; 0x5c8
 8011404:	fb0c f505 	mul.w	r5, ip, r5
 8011408:	1d06      	adds	r6, r0, #4
 801140a:	442e      	add	r6, r5
 801140c:	4405      	add	r5, r0
 801140e:	4426      	add	r6, r4
 8011410:	442c      	add	r4, r5
 8011412:	600e      	str	r6, [r1, #0]
 8011414:	f8d4 15c4 	ldr.w	r1, [r4, #1476]	; 0x5c4
 8011418:	6011      	str	r1, [r2, #0]
 801141a:	f8b4 25c8 	ldrh.w	r2, [r4, #1480]	; 0x5c8
 801141e:	801a      	strh	r2, [r3, #0]
 8011420:	887b      	ldrh	r3, [r7, #2]
 8011422:	f8b4 05ca 	ldrh.w	r0, [r4, #1482]	; 0x5ca
 8011426:	3301      	adds	r3, #1
 8011428:	f003 0301 	and.w	r3, r3, #1
 801142c:	807b      	strh	r3, [r7, #2]
 801142e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011430:	2000      	movs	r0, #0
 8011432:	e7fc      	b.n	801142e <udp_recv2+0x42>
 8011434:	20003bd4 	ldrdcs	r3, [r0], -r4

08011438 <udp_send>:
 8011438:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801143c:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8011570 <udp_send+0x138>
 8011440:	461c      	mov	r4, r3
 8011442:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
 8011446:	4607      	mov	r7, r0
 8011448:	4688      	mov	r8, r1
 801144a:	4616      	mov	r6, r2
 801144c:	2b00      	cmp	r3, #0
 801144e:	f000 808b 	beq.w	8011568 <udp_send+0x130>
 8011452:	1c63      	adds	r3, r4, #1
 8011454:	d141      	bne.n	80114da <udp_send+0xa2>
 8011456:	4a47      	ldr	r2, [pc, #284]	; (8011574 <udp_send+0x13c>)
 8011458:	2307      	movs	r3, #7
 801145a:	4611      	mov	r1, r2
 801145c:	20ff      	movs	r0, #255	; 0xff
 801145e:	e001      	b.n	8011464 <udp_send+0x2c>
 8011460:	f802 0b01 	strb.w	r0, [r2], #1
 8011464:	3b01      	subs	r3, #1
 8011466:	d1fb      	bne.n	8011460 <udp_send+0x28>
 8011468:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801146c:	83cb      	strh	r3, [r1, #30]
 801146e:	840b      	strh	r3, [r1, #32]
 8011470:	2500      	movs	r5, #0
 8011472:	f8df a104 	ldr.w	sl, [pc, #260]	; 8011578 <udp_send+0x140>
 8011476:	4c3f      	ldr	r4, [pc, #252]	; (8011574 <udp_send+0x13c>)
 8011478:	f8ba 3000 	ldrh.w	r3, [sl]
 801147c:	2114      	movs	r1, #20
 801147e:	8263      	strh	r3, [r4, #18]
 8011480:	f106 031c 	add.w	r3, r6, #28
 8011484:	ba5b      	rev16	r3, r3
 8011486:	f104 000e 	add.w	r0, r4, #14
 801148a:	8223      	strh	r3, [r4, #16]
 801148c:	8325      	strh	r5, [r4, #24]
 801148e:	f001 fcc4 	bl	8012e1a <net_chksum>
 8011492:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
 8011496:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 801149a:	ba5b      	rev16	r3, r3
 801149c:	8463      	strh	r3, [r4, #34]	; 0x22
 801149e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80114a2:	4632      	mov	r2, r6
 80114a4:	ba5b      	rev16	r3, r3
 80114a6:	84a3      	strh	r3, [r4, #36]	; 0x24
 80114a8:	f106 0308 	add.w	r3, r6, #8
 80114ac:	ba5b      	rev16	r3, r3
 80114ae:	bf28      	it	cs
 80114b0:	f44f 62b8 	movcs.w	r2, #1472	; 0x5c0
 80114b4:	4641      	mov	r1, r8
 80114b6:	8320      	strh	r0, [r4, #24]
 80114b8:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 80114bc:	84e3      	strh	r3, [r4, #38]	; 0x26
 80114be:	f7ff fee7 	bl	8011290 <net_memcpy>
 80114c2:	4620      	mov	r0, r4
 80114c4:	f106 012a 	add.w	r1, r6, #42	; 0x2a
 80114c8:	f004 f858 	bl	801557c <emac_eth_send>
 80114cc:	f8ba 3000 	ldrh.w	r3, [sl]
 80114d0:	4628      	mov	r0, r5
 80114d2:	3301      	adds	r3, #1
 80114d4:	f8aa 3000 	strh.w	r3, [sl]
 80114d8:	e037      	b.n	801154a <udp_send+0x112>
 80114da:	4b28      	ldr	r3, [pc, #160]	; (801157c <udp_send+0x144>)
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	43a3      	bics	r3, r4
 80114e0:	d10f      	bne.n	8011502 <udp_send+0xca>
 80114e2:	2307      	movs	r3, #7
 80114e4:	21ff      	movs	r1, #255	; 0xff
 80114e6:	4a23      	ldr	r2, [pc, #140]	; (8011574 <udp_send+0x13c>)
 80114e8:	e001      	b.n	80114ee <udp_send+0xb6>
 80114ea:	f802 1b01 	strb.w	r1, [r2], #1
 80114ee:	3b01      	subs	r3, #1
 80114f0:	d1fb      	bne.n	80114ea <udp_send+0xb2>
 80114f2:	2204      	movs	r2, #4
 80114f4:	4822      	ldr	r0, [pc, #136]	; (8011580 <udp_send+0x148>)
 80114f6:	eb0d 0102 	add.w	r1, sp, r2
 80114fa:	9401      	str	r4, [sp, #4]
 80114fc:	f7ff febe 	bl	801127c <memcpy.isra.0>
 8011500:	e7b6      	b.n	8011470 <udp_send+0x38>
 8011502:	f004 03e0 	and.w	r3, r4, #224	; 0xe0
 8011506:	2be0      	cmp	r3, #224	; 0xe0
 8011508:	d10e      	bne.n	8011528 <udp_send+0xf0>
 801150a:	491e      	ldr	r1, [pc, #120]	; (8011584 <udp_send+0x14c>)
 801150c:	f3c4 2306 	ubfx	r3, r4, #8, #7
 8011510:	70cb      	strb	r3, [r1, #3]
 8011512:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8011516:	710b      	strb	r3, [r1, #4]
 8011518:	f3c4 6307 	ubfx	r3, r4, #24, #8
 801151c:	2206      	movs	r2, #6
 801151e:	4815      	ldr	r0, [pc, #84]	; (8011574 <udp_send+0x13c>)
 8011520:	714b      	strb	r3, [r1, #5]
 8011522:	f7ff feab 	bl	801127c <memcpy.isra.0>
 8011526:	e7e4      	b.n	80114f2 <udp_send+0xba>
 8011528:	4b17      	ldr	r3, [pc, #92]	; (8011588 <udp_send+0x150>)
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	43a3      	bics	r3, r4
 801152e:	d00f      	beq.n	8011550 <udp_send+0x118>
 8011530:	4d16      	ldr	r5, [pc, #88]	; (801158c <udp_send+0x154>)
 8011532:	4910      	ldr	r1, [pc, #64]	; (8011574 <udp_send+0x13c>)
 8011534:	6828      	ldr	r0, [r5, #0]
 8011536:	f001 f93d 	bl	80127b4 <arp_cache_lookup>
 801153a:	682b      	ldr	r3, [r5, #0]
 801153c:	4298      	cmp	r0, r3
 801153e:	d0d8      	beq.n	80114f2 <udp_send+0xba>
 8011540:	4813      	ldr	r0, [pc, #76]	; (8011590 <udp_send+0x158>)
 8011542:	f002 fefb 	bl	801433c <console_error>
 8011546:	f06f 0002 	mvn.w	r0, #2
 801154a:	b002      	add	sp, #8
 801154c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011550:	4620      	mov	r0, r4
 8011552:	4908      	ldr	r1, [pc, #32]	; (8011574 <udp_send+0x13c>)
 8011554:	f001 f92e 	bl	80127b4 <arp_cache_lookup>
 8011558:	42a0      	cmp	r0, r4
 801155a:	d0ca      	beq.n	80114f2 <udp_send+0xba>
 801155c:	480d      	ldr	r0, [pc, #52]	; (8011594 <udp_send+0x15c>)
 801155e:	f002 feed 	bl	801433c <console_error>
 8011562:	f06f 0001 	mvn.w	r0, #1
 8011566:	e7f0      	b.n	801154a <udp_send+0x112>
 8011568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801156c:	e7ed      	b.n	801154a <udp_send+0x112>
 801156e:	bf00      	nop
 8011570:	20003bb4 			; <UNDEFINED> instruction: 0x20003bb4
 8011574:	20009874 	andcs	r9, r0, r4, ror r8
 8011578:	20003bb0 			; <UNDEFINED> instruction: 0x20003bb0
 801157c:	20003ba4 	andcs	r3, r0, r4, lsr #23
 8011580:	20009892 	mulcs	r0, r2, r8
 8011584:	20000000 	andcs	r0, r0, r0
 8011588:	20003bac 	andcs	r3, r0, ip, lsr #23
 801158c:	20003ba8 	andcs	r3, r0, r8, lsr #23
 8011590:	080183b7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, r8, r9, pc}
 8011594:	080183dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r8, r9, pc}

08011598 <strlen>:
 8011598:	4603      	mov	r3, r0
 801159a:	461a      	mov	r2, r3
 801159c:	7811      	ldrb	r1, [r2, #0]
 801159e:	3301      	adds	r3, #1
 80115a0:	2900      	cmp	r1, #0
 80115a2:	d1fa      	bne.n	801159a <strlen+0x2>
 80115a4:	1a10      	subs	r0, r2, r0
 80115a6:	4770      	bx	lr

080115a8 <strcmp>:
 80115a8:	1e43      	subs	r3, r0, #1
 80115aa:	3901      	subs	r1, #1
 80115ac:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80115b0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80115b4:	4290      	cmp	r0, r2
 80115b6:	d001      	beq.n	80115bc <strcmp+0x14>
 80115b8:	1a80      	subs	r0, r0, r2
 80115ba:	e001      	b.n	80115c0 <strcmp+0x18>
 80115bc:	2800      	cmp	r0, #0
 80115be:	d1f5      	bne.n	80115ac <strcmp+0x4>
 80115c0:	4770      	bx	lr

080115c2 <strcpy.isra.0>:
 80115c2:	3801      	subs	r0, #1
 80115c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80115c8:	f800 3f01 	strb.w	r3, [r0, #1]!
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d1f9      	bne.n	80115c4 <strcpy.isra.0+0x2>
 80115d0:	4770      	bx	lr

080115d2 <strcat.isra.0>:
 80115d2:	b538      	push	{r3, r4, r5, lr}
 80115d4:	4604      	mov	r4, r0
 80115d6:	460d      	mov	r5, r1
 80115d8:	f7ff ffde 	bl	8011598 <strlen>
 80115dc:	4629      	mov	r1, r5
 80115de:	4420      	add	r0, r4
 80115e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80115e4:	f7ff bfed 	b.w	80115c2 <strcpy.isra.0>

080115e8 <MDNS::MDNS()>:
 80115e8:	b513      	push	{r0, r1, r4, lr}
 80115ea:	4604      	mov	r4, r0
 80115ec:	a901      	add	r1, sp, #4
 80115ee:	4804      	ldr	r0, [pc, #16]	; (8011600 <MDNS::MDNS()+0x18>)
 80115f0:	f003 f822 	bl	8014638 <inet_aton>
 80115f4:	4620      	mov	r0, r4
 80115f6:	4b03      	ldr	r3, [pc, #12]	; (8011604 <MDNS::MDNS()+0x1c>)
 80115f8:	9a01      	ldr	r2, [sp, #4]
 80115fa:	601a      	str	r2, [r3, #0]
 80115fc:	b002      	add	sp, #8
 80115fe:	bd10      	pop	{r4, pc}
 8011600:	08018418 	stmdaeq	r1, {r3, r4, sl, pc}
 8011604:	20009e68 	andcs	r9, r0, r8, ror #28

08011608 <MDNS::SetName(char const*)>:
 8011608:	b538      	push	{r3, r4, r5, lr}
 801160a:	4d0b      	ldr	r5, [pc, #44]	; (8011638 <MDNS::SetName(char const*)+0x30>)
 801160c:	460c      	mov	r4, r1
 801160e:	6828      	ldr	r0, [r5, #0]
 8011610:	b108      	cbz	r0, 8011616 <MDNS::SetName(char const*)+0xe>
 8011612:	f003 f80b 	bl	801462c <operator delete[](void*)>
 8011616:	4620      	mov	r0, r4
 8011618:	f7ff ffbe 	bl	8011598 <strlen>
 801161c:	3007      	adds	r0, #7
 801161e:	f003 f809 	bl	8014634 <operator new[](unsigned int)>
 8011622:	4621      	mov	r1, r4
 8011624:	6028      	str	r0, [r5, #0]
 8011626:	f7ff ffcc 	bl	80115c2 <strcpy.isra.0>
 801162a:	6828      	ldr	r0, [r5, #0]
 801162c:	4903      	ldr	r1, [pc, #12]	; (801163c <MDNS::SetName(char const*)+0x34>)
 801162e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011632:	f7ff bfce 	b.w	80115d2 <strcat.isra.0>
 8011636:	bf00      	nop
 8011638:	2000a298 	mulcs	r0, r8, r2
 801163c:	08018428 	stmdaeq	r1, {r3, r5, sl, pc}

08011640 <MDNS::DecodeDNSNameNotation(char const*, char*)>:
 8011640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011644:	f04f 0e00 	mov.w	lr, #0
 8011648:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
 801164c:	4675      	mov	r5, lr
 801164e:	4e1b      	ldr	r6, [pc, #108]	; (80116bc <MDNS::DecodeDNSNameNotation(char const*, char*)+0x7c>)
 8011650:	4f1b      	ldr	r7, [pc, #108]	; (80116c0 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x80>)
 8011652:	780b      	ldrb	r3, [r1, #0]
 8011654:	1c68      	adds	r0, r5, #1
 8011656:	b913      	cbnz	r3, 801165e <MDNS::DecodeDNSNameNotation(char const*, char*)+0x1e>
 8011658:	7013      	strb	r3, [r2, #0]
 801165a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801165e:	2b3f      	cmp	r3, #63	; 0x3f
 8011660:	d91c      	bls.n	801169c <MDNS::DecodeDNSNameNotation(char const*, char*)+0x5c>
 8011662:	7849      	ldrb	r1, [r1, #1]
 8011664:	ea06 2303 	and.w	r3, r6, r3, lsl #8
 8011668:	430b      	orrs	r3, r1
 801166a:	6839      	ldr	r1, [r7, #0]
 801166c:	f1be 0f00 	cmp.w	lr, #0
 8011670:	bf08      	it	eq
 8011672:	4605      	moveq	r5, r0
 8011674:	5ccc      	ldrb	r4, [r1, r3]
 8011676:	3301      	adds	r3, #1
 8011678:	4419      	add	r1, r3
 801167a:	2300      	movs	r3, #0
 801167c:	42a3      	cmp	r3, r4
 801167e:	5cc8      	ldrb	r0, [r1, r3]
 8011680:	d309      	bcc.n	8011696 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x56>
 8011682:	f04f 0e01 	mov.w	lr, #1
 8011686:	4421      	add	r1, r4
 8011688:	4414      	add	r4, r2
 801168a:	780b      	ldrb	r3, [r1, #0]
 801168c:	b10b      	cbz	r3, 8011692 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x52>
 801168e:	f804 cb01 	strb.w	ip, [r4], #1
 8011692:	4622      	mov	r2, r4
 8011694:	e7dd      	b.n	8011652 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x12>
 8011696:	54d0      	strb	r0, [r2, r3]
 8011698:	3301      	adds	r3, #1
 801169a:	e7ef      	b.n	801167c <MDNS::DecodeDNSNameNotation(char const*, char*)+0x3c>
 801169c:	4688      	mov	r8, r1
 801169e:	18d4      	adds	r4, r2, r3
 80116a0:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 80116a4:	f802 9b01 	strb.w	r9, [r2], #1
 80116a8:	4294      	cmp	r4, r2
 80116aa:	d1f9      	bne.n	80116a0 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x60>
 80116ac:	1c5a      	adds	r2, r3, #1
 80116ae:	4411      	add	r1, r2
 80116b0:	f1be 0f00 	cmp.w	lr, #0
 80116b4:	d1e9      	bne.n	801168a <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4a>
 80116b6:	181d      	adds	r5, r3, r0
 80116b8:	e7e7      	b.n	801168a <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4a>
 80116ba:	bf00      	nop
 80116bc:	ffff3f00 			; <UNDEFINED> instruction: 0xffff3f00
 80116c0:	2000a29c 	mulcs	r0, ip, r2

080116c4 <MDNS::FindFirstDotFromRight(char const*) const>:
 80116c4:	b510      	push	{r4, lr}
 80116c6:	4608      	mov	r0, r1
 80116c8:	460c      	mov	r4, r1
 80116ca:	f7ff ff65 	bl	8011598 <strlen>
 80116ce:	4420      	add	r0, r4
 80116d0:	42a0      	cmp	r0, r4
 80116d2:	d903      	bls.n	80116dc <MDNS::FindFirstDotFromRight(char const*) const+0x18>
 80116d4:	f810 3901 	ldrb.w	r3, [r0], #-1
 80116d8:	2b2e      	cmp	r3, #46	; 0x2e
 80116da:	d1f9      	bne.n	80116d0 <MDNS::FindFirstDotFromRight(char const*) const+0xc>
 80116dc:	3001      	adds	r0, #1
 80116de:	bd10      	pop	{r4, pc}

080116e0 <MDNS::WriteDnsName(char const*, char*, bool)>:
 80116e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116e2:	4614      	mov	r4, r2
 80116e4:	460f      	mov	r7, r1
 80116e6:	1c60      	adds	r0, r4, #1
 80116e8:	463d      	mov	r5, r7
 80116ea:	f817 6b01 	ldrb.w	r6, [r7], #1
 80116ee:	b946      	cbnz	r6, 8011702 <MDNS::WriteDnsName(char const*, char*, bool)+0x22>
 80116f0:	1a69      	subs	r1, r5, r1
 80116f2:	7021      	strb	r1, [r4, #0]
 80116f4:	7829      	ldrb	r1, [r5, #0]
 80116f6:	b949      	cbnz	r1, 801170c <MDNS::WriteDnsName(char const*, char*, bool)+0x2c>
 80116f8:	b10b      	cbz	r3, 80116fe <MDNS::WriteDnsName(char const*, char*, bool)+0x1e>
 80116fa:	f800 1b01 	strb.w	r1, [r0], #1
 80116fe:	1a80      	subs	r0, r0, r2
 8011700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011702:	2e2e      	cmp	r6, #46	; 0x2e
 8011704:	d0f4      	beq.n	80116f0 <MDNS::WriteDnsName(char const*, char*, bool)+0x10>
 8011706:	f800 6b01 	strb.w	r6, [r0], #1
 801170a:	e7ed      	b.n	80116e8 <MDNS::WriteDnsName(char const*, char*, bool)+0x8>
 801170c:	4604      	mov	r4, r0
 801170e:	1c69      	adds	r1, r5, #1
 8011710:	e7e8      	b.n	80116e4 <MDNS::WriteDnsName(char const*, char*, bool)+0x4>
	...

08011714 <MDNS::CreateAnswerLocalIpAddress()>:
 8011714:	2384      	movs	r3, #132	; 0x84
 8011716:	b510      	push	{r4, lr}
 8011718:	4c0f      	ldr	r4, [pc, #60]	; (8011758 <MDNS::CreateAnswerLocalIpAddress()+0x44>)
 801171a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801171e:	80e3      	strh	r3, [r4, #6]
 8011720:	2300      	movs	r3, #0
 8011722:	490e      	ldr	r1, [pc, #56]	; (801175c <MDNS::CreateAnswerLocalIpAddress()+0x48>)
 8011724:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8011728:	6809      	ldr	r1, [r1, #0]
 801172a:	f104 0210 	add.w	r2, r4, #16
 801172e:	2301      	movs	r3, #1
 8011730:	f7ff ffd6 	bl	80116e0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8011734:	490a      	ldr	r1, [pc, #40]	; (8011760 <MDNS::CreateAnswerLocalIpAddress()+0x4c>)
 8011736:	1813      	adds	r3, r2, r0
 8011738:	5011      	str	r1, [r2, r0]
 801173a:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 801173e:	605a      	str	r2, [r3, #4]
 8011740:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011744:	811a      	strh	r2, [r3, #8]
 8011746:	4a07      	ldr	r2, [pc, #28]	; (8011764 <MDNS::CreateAnswerLocalIpAddress()+0x50>)
 8011748:	6812      	ldr	r2, [r2, #0]
 801174a:	6912      	ldr	r2, [r2, #16]
 801174c:	f8c3 200a 	str.w	r2, [r3, #10]
 8011750:	1b1b      	subs	r3, r3, r4
 8011752:	330a      	adds	r3, #10
 8011754:	6023      	str	r3, [r4, #0]
 8011756:	bd10      	pop	{r4, pc}
 8011758:	20009e6c 	andcs	r9, r0, ip, ror #28
 801175c:	2000a298 	mulcs	r0, r8, r2
 8011760:	01800100 	orreq	r0, r0, r0, lsl #2
 8011764:	2000a2a0 	andcs	sl, r0, r0, lsr #5

08011768 <MDNS::Start()>:
 8011768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801176a:	4c1d      	ldr	r4, [pc, #116]	; (80117e0 <MDNS::Start()+0x78>)
 801176c:	f241 41e9 	movw	r1, #5353	; 0x14e9
 8011770:	4605      	mov	r5, r0
 8011772:	6820      	ldr	r0, [r4, #0]
 8011774:	f000 fb26 	bl	8011dc4 <Network::Begin(unsigned short)>
 8011778:	4e1a      	ldr	r6, [pc, #104]	; (80117e4 <MDNS::Start()+0x7c>)
 801177a:	4f1b      	ldr	r7, [pc, #108]	; (80117e8 <MDNS::Start()+0x80>)
 801177c:	4601      	mov	r1, r0
 801177e:	6030      	str	r0, [r6, #0]
 8011780:	683a      	ldr	r2, [r7, #0]
 8011782:	6820      	ldr	r0, [r4, #0]
 8011784:	f000 fb2f 	bl	8011de6 <Network::JoinGroup(int, unsigned int)>
 8011788:	4b18      	ldr	r3, [pc, #96]	; (80117ec <MDNS::Start()+0x84>)
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	b923      	cbnz	r3, 8011798 <MDNS::Start()+0x30>
 801178e:	6821      	ldr	r1, [r4, #0]
 8011790:	4628      	mov	r0, r5
 8011792:	311c      	adds	r1, #28
 8011794:	f7ff ff38 	bl	8011608 <MDNS::SetName(char const*)>
 8011798:	4628      	mov	r0, r5
 801179a:	f7ff ffbb 	bl	8011714 <MDNS::CreateAnswerLocalIpAddress()>
 801179e:	f241 43e9 	movw	r3, #5353	; 0x14e9
 80117a2:	4913      	ldr	r1, [pc, #76]	; (80117f0 <MDNS::Start()+0x88>)
 80117a4:	7830      	ldrb	r0, [r6, #0]
 80117a6:	f831 2b04 	ldrh.w	r2, [r1], #4
 80117aa:	9300      	str	r3, [sp, #0]
 80117ac:	683b      	ldr	r3, [r7, #0]
 80117ae:	f7ff fe43 	bl	8011438 <udp_send>
 80117b2:	233f      	movs	r3, #63	; 0x3f
 80117b4:	6820      	ldr	r0, [r4, #0]
 80117b6:	4c0f      	ldr	r4, [pc, #60]	; (80117f4 <MDNS::Start()+0x8c>)
 80117b8:	f100 025c 	add.w	r2, r0, #92	; 0x5c
 80117bc:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80117c0:	b929      	cbnz	r1, 80117ce <MDNS::Start()+0x66>
 80117c2:	4413      	add	r3, r2
 80117c4:	429a      	cmp	r2, r3
 80117c6:	d006      	beq.n	80117d6 <MDNS::Start()+0x6e>
 80117c8:	f802 1b01 	strb.w	r1, [r2], #1
 80117cc:	e7fa      	b.n	80117c4 <MDNS::Start()+0x5c>
 80117ce:	3b01      	subs	r3, #1
 80117d0:	f802 1b01 	strb.w	r1, [r2], #1
 80117d4:	d1f2      	bne.n	80117bc <MDNS::Start()+0x54>
 80117d6:	2300      	movs	r3, #0
 80117d8:	f880 309b 	strb.w	r3, [r0, #155]	; 0x9b
 80117dc:	b003      	add	sp, #12
 80117de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117e0:	2000a2a0 	andcs	sl, r0, r0, lsr #5
 80117e4:	20000008 	andcs	r0, r0, r8
 80117e8:	20009e68 	andcs	r9, r0, r8, ror #28
 80117ec:	2000a298 	mulcs	r0, r8, r2
 80117f0:	20009e6c 	andcs	r9, r0, ip, ror #28
 80117f4:	08018428 	stmdaeq	r1, {r3, r5, sl, pc}

080117f8 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>:
 80117f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117fc:	4c1b      	ldr	r4, [pc, #108]	; (801186c <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x74>)
 80117fe:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 8011802:	eb04 1501 	add.w	r5, r4, r1, lsl #4
 8011806:	2300      	movs	r3, #0
 8011808:	f854 100c 	ldr.w	r1, [r4, ip]
 801180c:	4607      	mov	r7, r0
 801180e:	f7ff ff67 	bl	80116e0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8011812:	2301      	movs	r3, #1
 8011814:	7bac      	ldrb	r4, [r5, #14]
 8011816:	4616      	mov	r6, r2
 8011818:	4915      	ldr	r1, [pc, #84]	; (8011870 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x78>)
 801181a:	4402      	add	r2, r0
 801181c:	4815      	ldr	r0, [pc, #84]	; (8011874 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x7c>)
 801181e:	429c      	cmp	r4, r3
 8011820:	bf18      	it	ne
 8011822:	4601      	movne	r1, r0
 8011824:	4638      	mov	r0, r7
 8011826:	f7ff ff5b 	bl	80116e0 <MDNS::WriteDnsName(char const*, char*, bool)>
 801182a:	4b13      	ldr	r3, [pc, #76]	; (8011878 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x80>)
 801182c:	1814      	adds	r4, r2, r0
 801182e:	5013      	str	r3, [r2, r0]
 8011830:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8011834:	6063      	str	r3, [r4, #4]
 8011836:	4b11      	ldr	r3, [pc, #68]	; (801187c <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x84>)
 8011838:	f8d3 8000 	ldr.w	r8, [r3]
 801183c:	4640      	mov	r0, r8
 801183e:	f7ff feab 	bl	8011598 <strlen>
 8011842:	f100 0308 	add.w	r3, r0, #8
 8011846:	ba5b      	rev16	r3, r3
 8011848:	8123      	strh	r3, [r4, #8]
 801184a:	2300      	movs	r3, #0
 801184c:	f8c4 300a 	str.w	r3, [r4, #10]
 8011850:	89ab      	ldrh	r3, [r5, #12]
 8011852:	f104 0210 	add.w	r2, r4, #16
 8011856:	ba5b      	rev16	r3, r3
 8011858:	81e3      	strh	r3, [r4, #14]
 801185a:	4641      	mov	r1, r8
 801185c:	2301      	movs	r3, #1
 801185e:	4638      	mov	r0, r7
 8011860:	f7ff ff3e 	bl	80116e0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8011864:	4410      	add	r0, r2
 8011866:	1b80      	subs	r0, r0, r6
 8011868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801186c:	2000a070 	andcs	sl, r0, r0, ror r0
 8011870:	08018424 	stmdaeq	r1, {r2, r5, sl, pc}
 8011874:	08018441 	stmdaeq	r1, {r0, r6, sl, pc}
 8011878:	01802100 	orreq	r2, r0, r0, lsl #2
 801187c:	2000a298 	mulcs	r0, r8, r2

08011880 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>:
 8011880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011884:	4e19      	ldr	r6, [pc, #100]	; (80118ec <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x6c>)
 8011886:	010f      	lsls	r7, r1, #4
 8011888:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 801188c:	2300      	movs	r3, #0
 801188e:	59f1      	ldr	r1, [r6, r7]
 8011890:	4604      	mov	r4, r0
 8011892:	f7ff ff25 	bl	80116e0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8011896:	2301      	movs	r3, #1
 8011898:	7bae      	ldrb	r6, [r5, #14]
 801189a:	4690      	mov	r8, r2
 801189c:	4914      	ldr	r1, [pc, #80]	; (80118f0 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x70>)
 801189e:	4402      	add	r2, r0
 80118a0:	4814      	ldr	r0, [pc, #80]	; (80118f4 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x74>)
 80118a2:	429e      	cmp	r6, r3
 80118a4:	bf18      	it	ne
 80118a6:	4601      	movne	r1, r0
 80118a8:	4620      	mov	r0, r4
 80118aa:	f7ff ff19 	bl	80116e0 <MDNS::WriteDnsName(char const*, char*, bool)>
 80118ae:	4b12      	ldr	r3, [pc, #72]	; (80118f8 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x78>)
 80118b0:	1816      	adds	r6, r2, r0
 80118b2:	5013      	str	r3, [r2, r0]
 80118b4:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 80118b8:	68a8      	ldr	r0, [r5, #8]
 80118ba:	6073      	str	r3, [r6, #4]
 80118bc:	f106 040b 	add.w	r4, r6, #11
 80118c0:	b938      	cbnz	r0, 80118d2 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x52>
 80118c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80118c6:	72b0      	strb	r0, [r6, #10]
 80118c8:	8133      	strh	r3, [r6, #8]
 80118ca:	eba4 0008 	sub.w	r0, r4, r8
 80118ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118d2:	f7ff fe61 	bl	8011598 <strlen>
 80118d6:	4607      	mov	r7, r0
 80118d8:	1c43      	adds	r3, r0, #1
 80118da:	72b0      	strb	r0, [r6, #10]
 80118dc:	ba5b      	rev16	r3, r3
 80118de:	4620      	mov	r0, r4
 80118e0:	68a9      	ldr	r1, [r5, #8]
 80118e2:	8133      	strh	r3, [r6, #8]
 80118e4:	f7ff fe6d 	bl	80115c2 <strcpy.isra.0>
 80118e8:	443c      	add	r4, r7
 80118ea:	e7ee      	b.n	80118ca <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x4a>
 80118ec:	2000a070 	andcs	sl, r0, r0, ror r0
 80118f0:	08018424 	stmdaeq	r1, {r2, r5, sl, pc}
 80118f4:	08018441 	stmdaeq	r1, {r0, r6, sl, pc}
 80118f8:	01801000 	orreq	r1, r0, r0

080118fc <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>:
 80118fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011900:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8011964 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x68>
 8011904:	ea4f 1901 	mov.w	r9, r1, lsl #4
 8011908:	eb08 1501 	add.w	r5, r8, r1, lsl #4
 801190c:	6869      	ldr	r1, [r5, #4]
 801190e:	2301      	movs	r3, #1
 8011910:	4607      	mov	r7, r0
 8011912:	f7ff fee5 	bl	80116e0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8011916:	4b14      	ldr	r3, [pc, #80]	; (8011968 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x6c>)
 8011918:	f858 8009 	ldr.w	r8, [r8, r9]
 801191c:	5013      	str	r3, [r2, r0]
 801191e:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8011922:	1816      	adds	r6, r2, r0
 8011924:	6073      	str	r3, [r6, #4]
 8011926:	4640      	mov	r0, r8
 8011928:	4614      	mov	r4, r2
 801192a:	f7ff fe35 	bl	8011598 <strlen>
 801192e:	f100 030d 	add.w	r3, r0, #13
 8011932:	ba5b      	rev16	r3, r3
 8011934:	4641      	mov	r1, r8
 8011936:	8133      	strh	r3, [r6, #8]
 8011938:	f106 020a 	add.w	r2, r6, #10
 801193c:	2300      	movs	r3, #0
 801193e:	4638      	mov	r0, r7
 8011940:	f7ff fece 	bl	80116e0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8011944:	2301      	movs	r3, #1
 8011946:	4402      	add	r2, r0
 8011948:	7bad      	ldrb	r5, [r5, #14]
 801194a:	4808      	ldr	r0, [pc, #32]	; (801196c <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x70>)
 801194c:	4908      	ldr	r1, [pc, #32]	; (8011970 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x74>)
 801194e:	429d      	cmp	r5, r3
 8011950:	bf18      	it	ne
 8011952:	4601      	movne	r1, r0
 8011954:	4638      	mov	r0, r7
 8011956:	f7ff fec3 	bl	80116e0 <MDNS::WriteDnsName(char const*, char*, bool)>
 801195a:	4410      	add	r0, r2
 801195c:	1b00      	subs	r0, r0, r4
 801195e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011962:	bf00      	nop
 8011964:	2000a070 	andcs	sl, r0, r0, ror r0
 8011968:	01000c00 	tsteq	r0, r0, lsl #24
 801196c:	08018441 	stmdaeq	r1, {r0, r6, sl, pc}
 8011970:	08018424 	stmdaeq	r1, {r2, r5, sl, pc}

08011974 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>:
 8011974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011976:	460f      	mov	r7, r1
 8011978:	2301      	movs	r3, #1
 801197a:	490f      	ldr	r1, [pc, #60]	; (80119b8 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x44>)
 801197c:	4606      	mov	r6, r0
 801197e:	f7ff feaf 	bl	80116e0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8011982:	4b0e      	ldr	r3, [pc, #56]	; (80119bc <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x48>)
 8011984:	490e      	ldr	r1, [pc, #56]	; (80119c0 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x4c>)
 8011986:	5013      	str	r3, [r2, r0]
 8011988:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 801198c:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8011990:	684f      	ldr	r7, [r1, #4]
 8011992:	1815      	adds	r5, r2, r0
 8011994:	606b      	str	r3, [r5, #4]
 8011996:	4638      	mov	r0, r7
 8011998:	4614      	mov	r4, r2
 801199a:	f7ff fdfd 	bl	8011598 <strlen>
 801199e:	1c83      	adds	r3, r0, #2
 80119a0:	ba5b      	rev16	r3, r3
 80119a2:	812b      	strh	r3, [r5, #8]
 80119a4:	f105 020a 	add.w	r2, r5, #10
 80119a8:	2301      	movs	r3, #1
 80119aa:	4639      	mov	r1, r7
 80119ac:	4630      	mov	r0, r6
 80119ae:	f7ff fe97 	bl	80116e0 <MDNS::WriteDnsName(char const*, char*, bool)>
 80119b2:	4410      	add	r0, r2
 80119b4:	1b00      	subs	r0, r0, r4
 80119b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119b8:	0801842f 	stmdaeq	r1, {r0, r1, r2, r3, r5, sl, pc}
 80119bc:	01000c00 	tsteq	r0, r0, lsl #24
 80119c0:	2000a070 	andcs	sl, r0, r0, ror r0

080119c4 <MDNS::CreateMDNSMessage(unsigned int)>:
 80119c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119c6:	2384      	movs	r3, #132	; 0x84
 80119c8:	4d19      	ldr	r5, [pc, #100]	; (8011a30 <MDNS::CreateMDNSMessage(unsigned int)+0x6c>)
 80119ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80119ce:	80eb      	strh	r3, [r5, #6]
 80119d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80119d4:	f105 0410 	add.w	r4, r5, #16
 80119d8:	e9c5 2302 	strd	r2, r3, [r5, #8]
 80119dc:	4622      	mov	r2, r4
 80119de:	4606      	mov	r6, r0
 80119e0:	460f      	mov	r7, r1
 80119e2:	f7ff ff09 	bl	80117f8 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>
 80119e6:	4404      	add	r4, r0
 80119e8:	4622      	mov	r2, r4
 80119ea:	4639      	mov	r1, r7
 80119ec:	4630      	mov	r0, r6
 80119ee:	f7ff ff47 	bl	8011880 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>
 80119f2:	4404      	add	r4, r0
 80119f4:	4622      	mov	r2, r4
 80119f6:	4639      	mov	r1, r7
 80119f8:	4630      	mov	r0, r6
 80119fa:	f7ff ffbb 	bl	8011974 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>
 80119fe:	4404      	add	r4, r0
 8011a00:	4622      	mov	r2, r4
 8011a02:	4639      	mov	r1, r7
 8011a04:	4630      	mov	r0, r6
 8011a06:	f7ff ff79 	bl	80118fc <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>
 8011a0a:	4a0a      	ldr	r2, [pc, #40]	; (8011a34 <MDNS::CreateMDNSMessage(unsigned int)+0x70>)
 8011a0c:	4404      	add	r4, r0
 8011a0e:	f852 3b10 	ldr.w	r3, [r2], #16
 8011a12:	1e60      	subs	r0, r4, #1
 8011a14:	3b0c      	subs	r3, #12
 8011a16:	4619      	mov	r1, r3
 8011a18:	3901      	subs	r1, #1
 8011a1a:	d204      	bcs.n	8011a26 <MDNS::CreateMDNSMessage(unsigned int)+0x62>
 8011a1c:	441c      	add	r4, r3
 8011a1e:	4b06      	ldr	r3, [pc, #24]	; (8011a38 <MDNS::CreateMDNSMessage(unsigned int)+0x74>)
 8011a20:	1ae4      	subs	r4, r4, r3
 8011a22:	602c      	str	r4, [r5, #0]
 8011a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a26:	f812 6b01 	ldrb.w	r6, [r2], #1
 8011a2a:	f800 6f01 	strb.w	r6, [r0, #1]!
 8011a2e:	e7f3      	b.n	8011a18 <MDNS::CreateMDNSMessage(unsigned int)+0x54>
 8011a30:	2000a094 	mulcs	r0, r4, r0
 8011a34:	20009e6c 	andcs	r9, r0, ip, ror #28
 8011a38:	2000a098 	mulcs	r0, r8, r0

08011a3c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>:
 8011a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a40:	4d40      	ldr	r5, [pc, #256]	; (8011b44 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x108>)
 8011a42:	b085      	sub	sp, #20
 8011a44:	682c      	ldr	r4, [r5, #0]
 8011a46:	4680      	mov	r8, r0
 8011a48:	460f      	mov	r7, r1
 8011a4a:	4616      	mov	r6, r2
 8011a4c:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 8011a50:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8011a54:	b11c      	cbz	r4, 8011a5e <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x22>
 8011a56:	692a      	ldr	r2, [r5, #16]
 8011a58:	2a00      	cmp	r2, #0
 8011a5a:	d16e      	bne.n	8011b3a <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xfe>
 8011a5c:	2401      	movs	r4, #1
 8011a5e:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 8011a62:	ea4f 1904 	mov.w	r9, r4, lsl #4
 8011a66:	8193      	strh	r3, [r2, #12]
 8011a68:	f882 b00e 	strb.w	fp, [r2, #14]
 8011a6c:	2f00      	cmp	r7, #0
 8011a6e:	d154      	bne.n	8011b1a <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xde>
 8011a70:	4b35      	ldr	r3, [pc, #212]	; (8011b48 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10c>)
 8011a72:	6818      	ldr	r0, [r3, #0]
 8011a74:	301c      	adds	r0, #28
 8011a76:	f7ff fd8f 	bl	8011598 <strlen>
 8011a7a:	4607      	mov	r7, r0
 8011a7c:	4630      	mov	r0, r6
 8011a7e:	f7ff fd8b 	bl	8011598 <strlen>
 8011a82:	4438      	add	r0, r7
 8011a84:	3001      	adds	r0, #1
 8011a86:	f002 fdd5 	bl	8014634 <operator new[](unsigned int)>
 8011a8a:	4b2f      	ldr	r3, [pc, #188]	; (8011b48 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10c>)
 8011a8c:	f845 0009 	str.w	r0, [r5, r9]
 8011a90:	6819      	ldr	r1, [r3, #0]
 8011a92:	311c      	adds	r1, #28
 8011a94:	f7ff fd95 	bl	80115c2 <strcpy.isra.0>
 8011a98:	f855 0009 	ldr.w	r0, [r5, r9]
 8011a9c:	4631      	mov	r1, r6
 8011a9e:	f7ff fd98 	bl	80115d2 <strcat.isra.0>
 8011aa2:	4631      	mov	r1, r6
 8011aa4:	4640      	mov	r0, r8
 8011aa6:	f7ff fe0d 	bl	80116c4 <MDNS::FindFirstDotFromRight(char const*) const>
 8011aaa:	eb05 0709 	add.w	r7, r5, r9
 8011aae:	4605      	mov	r5, r0
 8011ab0:	f7ff fd72 	bl	8011598 <strlen>
 8011ab4:	300d      	adds	r0, #13
 8011ab6:	f002 fdbd 	bl	8014634 <operator new[](unsigned int)>
 8011aba:	4629      	mov	r1, r5
 8011abc:	6078      	str	r0, [r7, #4]
 8011abe:	f7ff fd80 	bl	80115c2 <strcpy.isra.0>
 8011ac2:	4922      	ldr	r1, [pc, #136]	; (8011b4c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x110>)
 8011ac4:	6878      	ldr	r0, [r7, #4]
 8011ac6:	f7ff fd84 	bl	80115d2 <strcat.isra.0>
 8011aca:	4921      	ldr	r1, [pc, #132]	; (8011b50 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x114>)
 8011acc:	4b21      	ldr	r3, [pc, #132]	; (8011b54 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x118>)
 8011ace:	6878      	ldr	r0, [r7, #4]
 8011ad0:	f1bb 0f01 	cmp.w	fp, #1
 8011ad4:	bf18      	it	ne
 8011ad6:	4619      	movne	r1, r3
 8011ad8:	f7ff fd7b 	bl	80115d2 <strcat.isra.0>
 8011adc:	f1ba 0f00 	cmp.w	sl, #0
 8011ae0:	d009      	beq.n	8011af6 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xba>
 8011ae2:	4650      	mov	r0, sl
 8011ae4:	f7ff fd58 	bl	8011598 <strlen>
 8011ae8:	3001      	adds	r0, #1
 8011aea:	f002 fda3 	bl	8014634 <operator new[](unsigned int)>
 8011aee:	4651      	mov	r1, sl
 8011af0:	60b8      	str	r0, [r7, #8]
 8011af2:	f7ff fd66 	bl	80115c2 <strcpy.isra.0>
 8011af6:	4621      	mov	r1, r4
 8011af8:	4640      	mov	r0, r8
 8011afa:	f7ff ff63 	bl	80119c4 <MDNS::CreateMDNSMessage(unsigned int)>
 8011afe:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8011b02:	4915      	ldr	r1, [pc, #84]	; (8011b58 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x11c>)
 8011b04:	4815      	ldr	r0, [pc, #84]	; (8011b5c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x120>)
 8011b06:	f831 2b04 	ldrh.w	r2, [r1], #4
 8011b0a:	9300      	str	r3, [sp, #0]
 8011b0c:	4b14      	ldr	r3, [pc, #80]	; (8011b60 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x124>)
 8011b0e:	7800      	ldrb	r0, [r0, #0]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	f7ff fc91 	bl	8011438 <udp_send>
 8011b16:	2001      	movs	r0, #1
 8011b18:	e010      	b.n	8011b3c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x100>
 8011b1a:	4638      	mov	r0, r7
 8011b1c:	f7ff fd3c 	bl	8011598 <strlen>
 8011b20:	9003      	str	r0, [sp, #12]
 8011b22:	4630      	mov	r0, r6
 8011b24:	f7ff fd38 	bl	8011598 <strlen>
 8011b28:	9b03      	ldr	r3, [sp, #12]
 8011b2a:	4418      	add	r0, r3
 8011b2c:	3001      	adds	r0, #1
 8011b2e:	f002 fd81 	bl	8014634 <operator new[](unsigned int)>
 8011b32:	4639      	mov	r1, r7
 8011b34:	f845 0009 	str.w	r0, [r5, r9]
 8011b38:	e7ac      	b.n	8011a94 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x58>
 8011b3a:	2000      	movs	r0, #0
 8011b3c:	b005      	add	sp, #20
 8011b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b42:	bf00      	nop
 8011b44:	2000a070 	andcs	sl, r0, r0, ror r0
 8011b48:	2000a2a0 	andcs	sl, r0, r0, lsr #5
 8011b4c:	08017417 	stmdaeq	r1, {r0, r1, r2, r4, sl, ip, sp, lr}
 8011b50:	08018424 	stmdaeq	r1, {r2, r5, sl, pc}
 8011b54:	08018441 	stmdaeq	r1, {r0, r6, sl, pc}
 8011b58:	2000a094 	mulcs	r0, r4, r0
 8011b5c:	20000008 	andcs	r0, r0, r8
 8011b60:	20009e68 	andcs	r9, r0, r8, ror #28

08011b64 <MDNS::HandleRequest(unsigned short)>:
 8011b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b68:	4605      	mov	r5, r0
 8011b6a:	2700      	movs	r7, #0
 8011b6c:	f04f 080c 	mov.w	r8, #12
 8011b70:	b0c5      	sub	sp, #276	; 0x114
 8011b72:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8011c34 <MDNS::HandleRequest(unsigned short)+0xd0>
 8011b76:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 8011c38 <MDNS::HandleRequest(unsigned short)+0xd4>
 8011b7a:	9103      	str	r1, [sp, #12]
 8011b7c:	9b03      	ldr	r3, [sp, #12]
 8011b7e:	42bb      	cmp	r3, r7
 8011b80:	d802      	bhi.n	8011b88 <MDNS::HandleRequest(unsigned short)+0x24>
 8011b82:	b045      	add	sp, #276	; 0x114
 8011b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b88:	f8da 1000 	ldr.w	r1, [sl]
 8011b8c:	aa04      	add	r2, sp, #16
 8011b8e:	4441      	add	r1, r8
 8011b90:	4628      	mov	r0, r5
 8011b92:	f7ff fd55 	bl	8011640 <MDNS::DecodeDNSNameNotation(char const*, char*)>
 8011b96:	f8da 2000 	ldr.w	r2, [sl]
 8011b9a:	4440      	add	r0, r8
 8011b9c:	1813      	adds	r3, r2, r0
 8011b9e:	885b      	ldrh	r3, [r3, #2]
 8011ba0:	f100 0804 	add.w	r8, r0, #4
 8011ba4:	ba5b      	rev16	r3, r3
 8011ba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011baa:	2b01      	cmp	r3, #1
 8011bac:	d13d      	bne.n	8011c2a <MDNS::HandleRequest(unsigned short)+0xc6>
 8011bae:	5a14      	ldrh	r4, [r2, r0]
 8011bb0:	4b22      	ldr	r3, [pc, #136]	; (8011c3c <MDNS::HandleRequest(unsigned short)+0xd8>)
 8011bb2:	ba64      	rev16	r4, r4
 8011bb4:	6818      	ldr	r0, [r3, #0]
 8011bb6:	a904      	add	r1, sp, #16
 8011bb8:	b2a4      	uxth	r4, r4
 8011bba:	f7ff fcf5 	bl	80115a8 <strcmp>
 8011bbe:	b968      	cbnz	r0, 8011bdc <MDNS::HandleRequest(unsigned short)+0x78>
 8011bc0:	2c01      	cmp	r4, #1
 8011bc2:	d10b      	bne.n	8011bdc <MDNS::HandleRequest(unsigned short)+0x78>
 8011bc4:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8011bc8:	491d      	ldr	r1, [pc, #116]	; (8011c40 <MDNS::HandleRequest(unsigned short)+0xdc>)
 8011bca:	481e      	ldr	r0, [pc, #120]	; (8011c44 <MDNS::HandleRequest(unsigned short)+0xe0>)
 8011bcc:	f831 2b04 	ldrh.w	r2, [r1], #4
 8011bd0:	9300      	str	r3, [sp, #0]
 8011bd2:	4b1d      	ldr	r3, [pc, #116]	; (8011c48 <MDNS::HandleRequest(unsigned short)+0xe4>)
 8011bd4:	7800      	ldrb	r0, [r0, #0]
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	f7ff fc2e 	bl	8011438 <udp_send>
 8011bdc:	481b      	ldr	r0, [pc, #108]	; (8011c4c <MDNS::HandleRequest(unsigned short)+0xe8>)
 8011bde:	a904      	add	r1, sp, #16
 8011be0:	f7ff fce2 	bl	80115a8 <strcmp>
 8011be4:	f04f 0900 	mov.w	r9, #0
 8011be8:	4e19      	ldr	r6, [pc, #100]	; (8011c50 <MDNS::HandleRequest(unsigned short)+0xec>)
 8011bea:	9002      	str	r0, [sp, #8]
 8011bec:	6833      	ldr	r3, [r6, #0]
 8011bee:	b1c3      	cbz	r3, 8011c22 <MDNS::HandleRequest(unsigned short)+0xbe>
 8011bf0:	9b02      	ldr	r3, [sp, #8]
 8011bf2:	b123      	cbz	r3, 8011bfe <MDNS::HandleRequest(unsigned short)+0x9a>
 8011bf4:	6870      	ldr	r0, [r6, #4]
 8011bf6:	a904      	add	r1, sp, #16
 8011bf8:	f7ff fcd6 	bl	80115a8 <strcmp>
 8011bfc:	b988      	cbnz	r0, 8011c22 <MDNS::HandleRequest(unsigned short)+0xbe>
 8011bfe:	2c0c      	cmp	r4, #12
 8011c00:	d10f      	bne.n	8011c22 <MDNS::HandleRequest(unsigned short)+0xbe>
 8011c02:	4649      	mov	r1, r9
 8011c04:	4628      	mov	r0, r5
 8011c06:	f7ff fedd 	bl	80119c4 <MDNS::CreateMDNSMessage(unsigned int)>
 8011c0a:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8011c0e:	480d      	ldr	r0, [pc, #52]	; (8011c44 <MDNS::HandleRequest(unsigned short)+0xe0>)
 8011c10:	9300      	str	r3, [sp, #0]
 8011c12:	4b0d      	ldr	r3, [pc, #52]	; (8011c48 <MDNS::HandleRequest(unsigned short)+0xe4>)
 8011c14:	f8bb 2000 	ldrh.w	r2, [fp]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	490e      	ldr	r1, [pc, #56]	; (8011c54 <MDNS::HandleRequest(unsigned short)+0xf0>)
 8011c1c:	7800      	ldrb	r0, [r0, #0]
 8011c1e:	f7ff fc0b 	bl	8011438 <udp_send>
 8011c22:	3610      	adds	r6, #16
 8011c24:	f1b9 0f00 	cmp.w	r9, #0
 8011c28:	d001      	beq.n	8011c2e <MDNS::HandleRequest(unsigned short)+0xca>
 8011c2a:	3701      	adds	r7, #1
 8011c2c:	e7a6      	b.n	8011b7c <MDNS::HandleRequest(unsigned short)+0x18>
 8011c2e:	f04f 0901 	mov.w	r9, #1
 8011c32:	e7db      	b.n	8011bec <MDNS::HandleRequest(unsigned short)+0x88>
 8011c34:	2000a29c 	mulcs	r0, ip, r2
 8011c38:	2000a094 	mulcs	r0, r4, r0
 8011c3c:	2000a298 	mulcs	r0, r8, r2
 8011c40:	20009e6c 	andcs	r9, r0, ip, ror #28
 8011c44:	20000008 	andcs	r0, r0, r8
 8011c48:	20009e68 	andcs	r9, r0, r8, ror #28
 8011c4c:	0801842f 	stmdaeq	r1, {r0, r1, r2, r3, r5, sl, pc}
 8011c50:	2000a070 	andcs	sl, r0, r0, ror r0
 8011c54:	2000a098 	mulcs	r0, r8, r0

08011c58 <MDNS::Parse()>:
 8011c58:	4b08      	ldr	r3, [pc, #32]	; (8011c7c <MDNS::Parse()+0x24>)
 8011c5a:	681a      	ldr	r2, [r3, #0]
 8011c5c:	8853      	ldrh	r3, [r2, #2]
 8011c5e:	ba5b      	rev16	r3, r3
 8011c60:	b299      	uxth	r1, r3
 8011c62:	041b      	lsls	r3, r3, #16
 8011c64:	d408      	bmi.n	8011c78 <MDNS::Parse()+0x20>
 8011c66:	0b89      	lsrs	r1, r1, #14
 8011c68:	d106      	bne.n	8011c78 <MDNS::Parse()+0x20>
 8011c6a:	8891      	ldrh	r1, [r2, #4]
 8011c6c:	b28b      	uxth	r3, r1
 8011c6e:	b11b      	cbz	r3, 8011c78 <MDNS::Parse()+0x20>
 8011c70:	ba49      	rev16	r1, r1
 8011c72:	b289      	uxth	r1, r1
 8011c74:	f7ff bf76 	b.w	8011b64 <MDNS::HandleRequest(unsigned short)>
 8011c78:	4770      	bx	lr
 8011c7a:	bf00      	nop
 8011c7c:	2000a29c 	mulcs	r0, ip, r2

08011c80 <MDNS::Run()>:
 8011c80:	b538      	push	{r3, r4, r5, lr}
 8011c82:	4d0c      	ldr	r5, [pc, #48]	; (8011cb4 <MDNS::Run()+0x34>)
 8011c84:	4604      	mov	r4, r0
 8011c86:	480c      	ldr	r0, [pc, #48]	; (8011cb8 <MDNS::Run()+0x38>)
 8011c88:	462b      	mov	r3, r5
 8011c8a:	4a0c      	ldr	r2, [pc, #48]	; (8011cbc <MDNS::Run()+0x3c>)
 8011c8c:	490c      	ldr	r1, [pc, #48]	; (8011cc0 <MDNS::Run()+0x40>)
 8011c8e:	7800      	ldrb	r0, [r0, #0]
 8011c90:	f7ff fbac 	bl	80113ec <udp_recv2>
 8011c94:	4b0b      	ldr	r3, [pc, #44]	; (8011cc4 <MDNS::Run()+0x44>)
 8011c96:	882a      	ldrh	r2, [r5, #0]
 8011c98:	8018      	strh	r0, [r3, #0]
 8011c9a:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8011c9e:	429a      	cmp	r2, r3
 8011ca0:	d106      	bne.n	8011cb0 <MDNS::Run()+0x30>
 8011ca2:	280c      	cmp	r0, #12
 8011ca4:	d904      	bls.n	8011cb0 <MDNS::Run()+0x30>
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011cac:	f7ff bfd4 	b.w	8011c58 <MDNS::Parse()>
 8011cb0:	bd38      	pop	{r3, r4, r5, pc}
 8011cb2:	bf00      	nop
 8011cb4:	20009e64 	andcs	r9, r0, r4, ror #28
 8011cb8:	20000008 	andcs	r0, r0, r8
 8011cbc:	20009e60 	andcs	r9, r0, r0, ror #28
 8011cc0:	2000a29c 	mulcs	r0, ip, r2
 8011cc4:	2000a090 	mulcs	r0, r0, r0

08011cc8 <MDNS::Print()>:
 8011cc8:	b510      	push	{r4, lr}
 8011cca:	4816      	ldr	r0, [pc, #88]	; (8011d24 <MDNS::Print()+0x5c>)
 8011ccc:	f7f7 fb62 	bl	8009394 <printf>
 8011cd0:	4b15      	ldr	r3, [pc, #84]	; (8011d28 <MDNS::Print()+0x60>)
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	3301      	adds	r3, #1
 8011cd6:	d104      	bne.n	8011ce2 <MDNS::Print()+0x1a>
 8011cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cdc:	4813      	ldr	r0, [pc, #76]	; (8011d2c <MDNS::Print()+0x64>)
 8011cde:	f7f7 bb59 	b.w	8009394 <printf>
 8011ce2:	4b13      	ldr	r3, [pc, #76]	; (8011d30 <MDNS::Print()+0x68>)
 8011ce4:	4c13      	ldr	r4, [pc, #76]	; (8011d34 <MDNS::Print()+0x6c>)
 8011ce6:	6819      	ldr	r1, [r3, #0]
 8011ce8:	4813      	ldr	r0, [pc, #76]	; (8011d38 <MDNS::Print()+0x70>)
 8011cea:	f7f7 fb53 	bl	8009394 <printf>
 8011cee:	6823      	ldr	r3, [r4, #0]
 8011cf0:	b14b      	cbz	r3, 8011d06 <MDNS::Print()+0x3e>
 8011cf2:	4a12      	ldr	r2, [pc, #72]	; (8011d3c <MDNS::Print()+0x74>)
 8011cf4:	68a3      	ldr	r3, [r4, #8]
 8011cf6:	6861      	ldr	r1, [r4, #4]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	bf08      	it	eq
 8011cfc:	4613      	moveq	r3, r2
 8011cfe:	4810      	ldr	r0, [pc, #64]	; (8011d40 <MDNS::Print()+0x78>)
 8011d00:	89a2      	ldrh	r2, [r4, #12]
 8011d02:	f7f7 fb47 	bl	8009394 <printf>
 8011d06:	6923      	ldr	r3, [r4, #16]
 8011d08:	b15b      	cbz	r3, 8011d22 <MDNS::Print()+0x5a>
 8011d0a:	69a3      	ldr	r3, [r4, #24]
 8011d0c:	4a0b      	ldr	r2, [pc, #44]	; (8011d3c <MDNS::Print()+0x74>)
 8011d0e:	6961      	ldr	r1, [r4, #20]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	bf08      	it	eq
 8011d14:	4613      	moveq	r3, r2
 8011d16:	480a      	ldr	r0, [pc, #40]	; (8011d40 <MDNS::Print()+0x78>)
 8011d18:	8ba2      	ldrh	r2, [r4, #28]
 8011d1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d1e:	f7f7 bb39 	b.w	8009394 <printf>
 8011d22:	bd10      	pop	{r4, pc}
 8011d24:	0801844c 	stmdaeq	r1, {r2, r3, r6, sl, pc}
 8011d28:	20000008 	andcs	r0, r0, r8
 8011d2c:	08018452 	stmdaeq	r1, {r1, r4, r6, sl, pc}
 8011d30:	2000a298 	mulcs	r0, r8, r2
 8011d34:	2000a070 	andcs	sl, r0, r0, ror r0
 8011d38:	08018460 	stmdaeq	r1, {r5, r6, sl, pc}
 8011d3c:	08017739 	stmdaeq	r1, {r0, r3, r4, r5, r8, r9, sl, ip, sp, lr}
 8011d40:	0801846c 	stmdaeq	r1, {r2, r3, r5, r6, sl, pc}

08011d44 <strncpy.constprop.0.isra.0>:
 8011d44:	233f      	movs	r3, #63	; 0x3f
 8011d46:	3901      	subs	r1, #1
 8011d48:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011d4c:	b92a      	cbnz	r2, 8011d5a <strncpy.constprop.0.isra.0+0x16>
 8011d4e:	4403      	add	r3, r0
 8011d50:	4298      	cmp	r0, r3
 8011d52:	d006      	beq.n	8011d62 <strncpy.constprop.0.isra.0+0x1e>
 8011d54:	f800 2b01 	strb.w	r2, [r0], #1
 8011d58:	e7fa      	b.n	8011d50 <strncpy.constprop.0.isra.0+0xc>
 8011d5a:	3b01      	subs	r3, #1
 8011d5c:	f800 2b01 	strb.w	r2, [r0], #1
 8011d60:	d1f2      	bne.n	8011d48 <strncpy.constprop.0.isra.0+0x4>
 8011d62:	4770      	bx	lr

08011d64 <Network::Network()>:
 8011d64:	4a11      	ldr	r2, [pc, #68]	; (8011dac <Network::Network()+0x48>)
 8011d66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8011d6a:	6010      	str	r0, [r2, #0]
 8011d6c:	2201      	movs	r2, #1
 8011d6e:	2300      	movs	r3, #0
 8011d70:	e9c0 1200 	strd	r1, r2, [r0]
 8011d74:	2200      	movs	r2, #0
 8011d76:	e9c0 332f 	strd	r3, r3, [r0, #188]	; 0xbc
 8011d7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011d7e:	490c      	ldr	r1, [pc, #48]	; (8011db0 <Network::Network()+0x4c>)
 8011d80:	60c2      	str	r2, [r0, #12]
 8011d82:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
 8011d86:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
 8011d8a:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
 8011d8e:	6083      	str	r3, [r0, #8]
 8011d90:	6183      	str	r3, [r0, #24]
 8011d92:	7703      	strb	r3, [r0, #28]
 8011d94:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 8011d98:	f100 02a2 	add.w	r2, r0, #162	; 0xa2
 8011d9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011da0:	f802 3b01 	strb.w	r3, [r2], #1
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d1f9      	bne.n	8011d9c <Network::Network()+0x38>
 8011da8:	4770      	bx	lr
 8011daa:	bf00      	nop
 8011dac:	2000a2a0 	andcs	sl, r0, r0, lsr #5
 8011db0:	08018477 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, sl, pc}

08011db4 <Network::Shutdown()>:
 8011db4:	b508      	push	{r3, lr}
 8011db6:	30b8      	adds	r0, #184	; 0xb8
 8011db8:	f001 fcd0 	bl	801375c <NetworkDisplay::ShowShutdown()>
 8011dbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011dc0:	f7f5 ba16 	b.w	80071f0 <net_shutdown>

08011dc4 <Network::Begin(unsigned short)>:
 8011dc4:	4608      	mov	r0, r1
 8011dc6:	f7ff baa1 	b.w	801130c <udp_bind>

08011dca <Network::End(unsigned short)>:
 8011dca:	4608      	mov	r0, r1
 8011dcc:	f7ff bab8 	b.w	8011340 <udp_unbind>

08011dd0 <Network::MacAddressCopyTo(unsigned char*)>:
 8011dd0:	f100 039c 	add.w	r3, r0, #156	; 0x9c
 8011dd4:	3901      	subs	r1, #1
 8011dd6:	30a2      	adds	r0, #162	; 0xa2
 8011dd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ddc:	4283      	cmp	r3, r0
 8011dde:	f801 2f01 	strb.w	r2, [r1, #1]!
 8011de2:	d1f9      	bne.n	8011dd8 <Network::MacAddressCopyTo(unsigned char*)+0x8>
 8011de4:	4770      	bx	lr

08011de6 <Network::JoinGroup(int, unsigned int)>:
 8011de6:	4610      	mov	r0, r2
 8011de8:	f000 bf9e 	b.w	8012d28 <igmp_join>

08011dec <Network::LeaveGroup(int, unsigned int)>:
 8011dec:	4610      	mov	r0, r2
 8011dee:	f000 bfc7 	b.w	8012d80 <igmp_leave>

08011df2 <Network::SetDefaultIp()>:
 8011df2:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8011df6:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
 8011dfa:	041b      	lsls	r3, r3, #16
 8011dfc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011e00:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
 8011e04:	3302      	adds	r3, #2
 8011e06:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8011e0a:	22ff      	movs	r2, #255	; 0xff
 8011e0c:	6103      	str	r3, [r0, #16]
 8011e0e:	e9c0 3205 	strd	r3, r2, [r0, #20]
 8011e12:	4770      	bx	lr

08011e14 <Network::Init(NetworkParamsStore*)>:
 8011e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e18:	b08b      	sub	sp, #44	; 0x2c
 8011e1a:	4604      	mov	r4, r0
 8011e1c:	a806      	add	r0, sp, #24
 8011e1e:	f000 fa5b 	bl	80122d8 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 8011e22:	a806      	add	r0, sp, #24
 8011e24:	f000 fa68 	bl	80122f8 <NetworkParams::Load()>
 8011e28:	b110      	cbz	r0, 8011e30 <Network::Init(NetworkParamsStore*)+0x1c>
 8011e2a:	a806      	add	r0, sp, #24
 8011e2c:	f000 fc4f 	bl	80126ce <NetworkParams::Dump()>
 8011e30:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
 8011e34:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8012064 <Network::Init(NetworkParamsStore*)+0x250>
 8011e38:	4628      	mov	r0, r5
 8011e3a:	f104 079c 	add.w	r7, r4, #156	; 0x9c
 8011e3e:	f001 fc75 	bl	801372c <NetworkDisplay::ShowEmacStart()>
 8011e42:	4638      	mov	r0, r7
 8011e44:	f003 fad6 	bl	80153f4 <emac_start>
 8011e48:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011e4c:	f104 061c 	add.w	r6, r4, #28
 8011e50:	9307      	str	r3, [sp, #28]
 8011e52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011e56:	9308      	str	r3, [sp, #32]
 8011e58:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8011e5e:	f898 3014 	ldrb.w	r3, [r8, #20]
 8011e62:	7063      	strb	r3, [r4, #1]
 8011e64:	f8d8 3000 	ldr.w	r3, [r8]
 8011e68:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 8011e6c:	bf18      	it	ne
 8011e6e:	f8d8 2055 	ldrne.w	r2, [r8, #85]	; 0x55
 8011e72:	061b      	lsls	r3, r3, #24
 8011e74:	bf58      	it	pl
 8011e76:	2300      	movpl	r3, #0
 8011e78:	60a2      	str	r2, [r4, #8]
 8011e7a:	bf48      	it	mi
 8011e7c:	f8d8 3059 	ldrmi.w	r3, [r8, #89]	; 0x59
 8011e80:	60e3      	str	r3, [r4, #12]
 8011e82:	f898 3015 	ldrb.w	r3, [r8, #21]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	f040 80bc 	bne.w	8012004 <Network::Init(NetworkParamsStore*)+0x1f0>
 8011e8c:	4630      	mov	r0, r6
 8011e8e:	4976      	ldr	r1, [pc, #472]	; (8012068 <Network::Init(NetworkParamsStore*)+0x254>)
 8011e90:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011e94:	f103 0c01 	add.w	ip, r3, #1
 8011e98:	2a00      	cmp	r2, #0
 8011e9a:	f040 80af 	bne.w	8011ffc <Network::Init(NetworkParamsStore*)+0x1e8>
 8011e9e:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
 8011ea2:	18e1      	adds	r1, r4, r3
 8011ea4:	0910      	lsrs	r0, r2, #4
 8011ea6:	2a9f      	cmp	r2, #159	; 0x9f
 8011ea8:	f002 020f 	and.w	r2, r2, #15
 8011eac:	bf94      	ite	ls
 8011eae:	3030      	addls	r0, #48	; 0x30
 8011eb0:	3037      	addhi	r0, #55	; 0x37
 8011eb2:	2a09      	cmp	r2, #9
 8011eb4:	bf94      	ite	ls
 8011eb6:	3230      	addls	r2, #48	; 0x30
 8011eb8:	3237      	addhi	r2, #55	; 0x37
 8011eba:	44a4      	add	ip, r4
 8011ebc:	7708      	strb	r0, [r1, #28]
 8011ebe:	f88c 201c 	strb.w	r2, [ip, #28]
 8011ec2:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
 8011ec6:	f103 0e02 	add.w	lr, r3, #2
 8011eca:	0910      	lsrs	r0, r2, #4
 8011ecc:	2a9f      	cmp	r2, #159	; 0x9f
 8011ece:	f002 020f 	and.w	r2, r2, #15
 8011ed2:	bf94      	ite	ls
 8011ed4:	3030      	addls	r0, #48	; 0x30
 8011ed6:	3037      	addhi	r0, #55	; 0x37
 8011ed8:	f103 0903 	add.w	r9, r3, #3
 8011edc:	2a09      	cmp	r2, #9
 8011ede:	44a6      	add	lr, r4
 8011ee0:	f88e 001c 	strb.w	r0, [lr, #28]
 8011ee4:	bf94      	ite	ls
 8011ee6:	3230      	addls	r2, #48	; 0x30
 8011ee8:	3237      	addhi	r2, #55	; 0x37
 8011eea:	eb04 0009 	add.w	r0, r4, r9
 8011eee:	7702      	strb	r2, [r0, #28]
 8011ef0:	f894 20a1 	ldrb.w	r2, [r4, #161]	; 0xa1
 8011ef4:	f103 0c04 	add.w	ip, r3, #4
 8011ef8:	0910      	lsrs	r0, r2, #4
 8011efa:	2a9f      	cmp	r2, #159	; 0x9f
 8011efc:	f002 020f 	and.w	r2, r2, #15
 8011f00:	bf94      	ite	ls
 8011f02:	3030      	addls	r0, #48	; 0x30
 8011f04:	3037      	addhi	r0, #55	; 0x37
 8011f06:	3305      	adds	r3, #5
 8011f08:	2a09      	cmp	r2, #9
 8011f0a:	4423      	add	r3, r4
 8011f0c:	44a4      	add	ip, r4
 8011f0e:	bf94      	ite	ls
 8011f10:	3230      	addls	r2, #48	; 0x30
 8011f12:	3237      	addhi	r2, #55	; 0x37
 8011f14:	f88c 001c 	strb.w	r0, [ip, #28]
 8011f18:	771a      	strb	r2, [r3, #28]
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	f881 3022 	strb.w	r3, [r1, #34]	; 0x22
 8011f20:	7863      	ldrb	r3, [r4, #1]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	f040 8098 	bne.w	8012058 <Network::Init(NetworkParamsStore*)+0x244>
 8011f28:	9b07      	ldr	r3, [sp, #28]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d172      	bne.n	8012014 <Network::Init(NetworkParamsStore*)+0x200>
 8011f2e:	4620      	mov	r0, r4
 8011f30:	f7ff ff5f 	bl	8011df2 <Network::SetDefaultIp()>
 8011f34:	6923      	ldr	r3, [r4, #16]
 8011f36:	69a2      	ldr	r2, [r4, #24]
 8011f38:	9307      	str	r3, [sp, #28]
 8011f3a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011f3e:	1ce3      	adds	r3, r4, #3
 8011f40:	f104 0901 	add.w	r9, r4, #1
 8011f44:	9302      	str	r3, [sp, #8]
 8011f46:	9300      	str	r3, [sp, #0]
 8011f48:	4632      	mov	r2, r6
 8011f4a:	464b      	mov	r3, r9
 8011f4c:	4638      	mov	r0, r7
 8011f4e:	a907      	add	r1, sp, #28
 8011f50:	f7f5 f8fe 	bl	8007150 <net_init>
 8011f54:	78e3      	ldrb	r3, [r4, #3]
 8011f56:	b11b      	cbz	r3, 8011f60 <Network::Init(NetworkParamsStore*)+0x14c>
 8011f58:	2104      	movs	r1, #4
 8011f5a:	4628      	mov	r0, r5
 8011f5c:	f001 fc04 	bl	8013768 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8011f60:	f898 3014 	ldrb.w	r3, [r8, #20]
 8011f64:	f898 a05d 	ldrb.w	sl, [r8, #93]	; 0x5d
 8011f68:	9304      	str	r3, [sp, #16]
 8011f6a:	233c      	movs	r3, #60	; 0x3c
 8011f6c:	fb03 f30a 	mul.w	r3, r3, sl
 8011f70:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 801206c <Network::Init(NetworkParamsStore*)+0x258>
 8011f74:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 8012070 <Network::Init(NetworkParamsStore*)+0x25c>
 8011f78:	9303      	str	r3, [sp, #12]
 8011f7a:	78e3      	ldrb	r3, [r4, #3]
 8011f7c:	b393      	cbz	r3, 8011fe4 <Network::Init(NetworkParamsStore*)+0x1d0>
 8011f7e:	f1ba 0f00 	cmp.w	sl, #0
 8011f82:	d02f      	beq.n	8011fe4 <Network::Init(NetworkParamsStore*)+0x1d0>
 8011f84:	9b04      	ldr	r3, [sp, #16]
 8011f86:	b36b      	cbz	r3, 8011fe4 <Network::Init(NetworkParamsStore*)+0x1d0>
 8011f88:	2104      	movs	r1, #4
 8011f8a:	f8d8 0000 	ldr.w	r0, [r8]
 8011f8e:	f002 fa67 	bl	8014460 <LedBlink::SetMode(ledblink::Mode)>
 8011f92:	2103      	movs	r1, #3
 8011f94:	4628      	mov	r0, r5
 8011f96:	f001 fbe7 	bl	8013768 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8011f9a:	2000      	movs	r0, #0
 8011f9c:	f002 fd26 	bl	80149ec <time>
 8011fa0:	9005      	str	r0, [sp, #20]
 8011fa2:	2000      	movs	r0, #0
 8011fa4:	f002 fd22 	bl	80149ec <time>
 8011fa8:	9b05      	ldr	r3, [sp, #20]
 8011faa:	4932      	ldr	r1, [pc, #200]	; (8012074 <Network::Init(NetworkParamsStore*)+0x260>)
 8011fac:	1ac0      	subs	r0, r0, r3
 8011fae:	9b03      	ldr	r3, [sp, #12]
 8011fb0:	4298      	cmp	r0, r3
 8011fb2:	db37      	blt.n	8012024 <Network::Init(NetworkParamsStore*)+0x210>
 8011fb4:	2101      	movs	r1, #1
 8011fb6:	4628      	mov	r0, r5
 8011fb8:	f001 fbd6 	bl	8013768 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8011fbc:	2101      	movs	r1, #1
 8011fbe:	f8d8 0000 	ldr.w	r0, [r8]
 8011fc2:	f002 fa4d 	bl	8014460 <LedBlink::SetMode(ledblink::Mode)>
 8011fc6:	2301      	movs	r3, #1
 8011fc8:	7063      	strb	r3, [r4, #1]
 8011fca:	2300      	movs	r3, #0
 8011fcc:	70e3      	strb	r3, [r4, #3]
 8011fce:	9b02      	ldr	r3, [sp, #8]
 8011fd0:	4632      	mov	r2, r6
 8011fd2:	9300      	str	r3, [sp, #0]
 8011fd4:	4638      	mov	r0, r7
 8011fd6:	464b      	mov	r3, r9
 8011fd8:	a907      	add	r1, sp, #28
 8011fda:	f7f5 f8b9 	bl	8007150 <net_init>
 8011fde:	7863      	ldrb	r3, [r4, #1]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d0ca      	beq.n	8011f7a <Network::Init(NetworkParamsStore*)+0x166>
 8011fe4:	9b07      	ldr	r3, [sp, #28]
 8011fe6:	4628      	mov	r0, r5
 8011fe8:	6123      	str	r3, [r4, #16]
 8011fea:	9b08      	ldr	r3, [sp, #32]
 8011fec:	61a3      	str	r3, [r4, #24]
 8011fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ff0:	6163      	str	r3, [r4, #20]
 8011ff2:	f001 fba1 	bl	8013738 <NetworkDisplay::ShowIp()>
 8011ff6:	b00b      	add	sp, #44	; 0x2c
 8011ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ffc:	4663      	mov	r3, ip
 8011ffe:	f800 2b01 	strb.w	r2, [r0], #1
 8012002:	e745      	b.n	8011e90 <Network::Init(NetworkParamsStore*)+0x7c>
 8012004:	4630      	mov	r0, r6
 8012006:	491c      	ldr	r1, [pc, #112]	; (8012078 <Network::Init(NetworkParamsStore*)+0x264>)
 8012008:	f7ff fe9c 	bl	8011d44 <strncpy.constprop.0.isra.0>
 801200c:	2300      	movs	r3, #0
 801200e:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 8012012:	e785      	b.n	8011f20 <Network::Init(NetworkParamsStore*)+0x10c>
 8012014:	69a1      	ldr	r1, [r4, #24]
 8012016:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801201a:	4053      	eors	r3, r2
 801201c:	420b      	tst	r3, r1
 801201e:	bf18      	it	ne
 8012020:	9209      	strne	r2, [sp, #36]	; 0x24
 8012022:	e78c      	b.n	8011f3e <Network::Init(NetworkParamsStore*)+0x12a>
 8012024:	f8d8 3000 	ldr.w	r3, [r8]
 8012028:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 801202c:	f1bc 0f00 	cmp.w	ip, #0
 8012030:	d0b7      	beq.n	8011fa2 <Network::Init(NetworkParamsStore*)+0x18e>
 8012032:	6808      	ldr	r0, [r1, #0]
 8012034:	695a      	ldr	r2, [r3, #20]
 8012036:	1a80      	subs	r0, r0, r2
 8012038:	4584      	cmp	ip, r0
 801203a:	d8b2      	bhi.n	8011fa2 <Network::Init(NetworkParamsStore*)+0x18e>
 801203c:	6808      	ldr	r0, [r1, #0]
 801203e:	6158      	str	r0, [r3, #20]
 8012040:	6918      	ldr	r0, [r3, #16]
 8012042:	2801      	cmp	r0, #1
 8012044:	f080 0201 	eor.w	r2, r0, #1
 8012048:	611a      	str	r2, [r3, #16]
 801204a:	bf16      	itet	ne
 801204c:	2301      	movne	r3, #1
 801204e:	f8cb 0014 	streq.w	r0, [fp, #20]
 8012052:	f8cb 3010 	strne.w	r3, [fp, #16]
 8012056:	e7a4      	b.n	8011fa2 <Network::Init(NetworkParamsStore*)+0x18e>
 8012058:	2101      	movs	r1, #1
 801205a:	4628      	mov	r0, r5
 801205c:	f001 fb84 	bl	8013768 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8012060:	e76d      	b.n	8011f3e <Network::Init(NetworkParamsStore*)+0x12a>
 8012062:	bf00      	nop
 8012064:	2000a2a4 	andcs	sl, r0, r4, lsr #5
 8012068:	0801847c 	stmdaeq	r1, {r2, r3, r4, r5, r6, sl, pc}
 801206c:	2000a9c4 	andcs	sl, r0, r4, asr #19
 8012070:	40011000 	andmi	r1, r1, r0
 8012074:	2000a9dc 	ldrdcs	sl, [r0], -ip
 8012078:	2000a2b9 			; <UNDEFINED> instruction: 0x2000a2b9

0801207c <Network::SetIp(unsigned int)>:
 801207c:	7843      	ldrb	r3, [r0, #1]
 801207e:	b570      	push	{r4, r5, r6, lr}
 8012080:	4604      	mov	r4, r0
 8012082:	460d      	mov	r5, r1
 8012084:	2600      	movs	r6, #0
 8012086:	b113      	cbz	r3, 801208e <Network::SetIp(unsigned int)+0x12>
 8012088:	7046      	strb	r6, [r0, #1]
 801208a:	f7fe feff 	bl	8010e8c <net_dhcp_release>
 801208e:	70e6      	strb	r6, [r4, #3]
 8012090:	b975      	cbnz	r5, 80120b0 <Network::SetIp(unsigned int)+0x34>
 8012092:	4620      	mov	r0, r4
 8012094:	f7ff fead 	bl	8011df2 <Network::SetDefaultIp()>
 8012098:	6920      	ldr	r0, [r4, #16]
 801209a:	f7fe feb3 	bl	8010e04 <net_set_ip>
 801209e:	34b8      	adds	r4, #184	; 0xb8
 80120a0:	4620      	mov	r0, r4
 80120a2:	f001 fb49 	bl	8013738 <NetworkDisplay::ShowIp()>
 80120a6:	4620      	mov	r0, r4
 80120a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80120ac:	f001 bb4a 	b.w	8013744 <NetworkDisplay::ShowNetMask()>
 80120b0:	4628      	mov	r0, r5
 80120b2:	f7fe fea7 	bl	8010e04 <net_set_ip>
 80120b6:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 80120ba:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80120be:	2800      	cmp	r0, #0
 80120c0:	d0ed      	beq.n	801209e <Network::SetIp(unsigned int)+0x22>
 80120c2:	6803      	ldr	r3, [r0, #0]
 80120c4:	4629      	mov	r1, r5
 80120c6:	689b      	ldr	r3, [r3, #8]
 80120c8:	4798      	blx	r3
 80120ca:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 80120ce:	2100      	movs	r1, #0
 80120d0:	6803      	ldr	r3, [r0, #0]
 80120d2:	699b      	ldr	r3, [r3, #24]
 80120d4:	4798      	blx	r3
 80120d6:	e7e2      	b.n	801209e <Network::SetIp(unsigned int)+0x22>

080120d8 <Network::SetNetmask(unsigned int)>:
 80120d8:	6982      	ldr	r2, [r0, #24]
 80120da:	b510      	push	{r4, lr}
 80120dc:	428a      	cmp	r2, r1
 80120de:	4604      	mov	r4, r0
 80120e0:	d00f      	beq.n	8012102 <Network::SetNetmask(unsigned int)+0x2a>
 80120e2:	6181      	str	r1, [r0, #24]
 80120e4:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
 80120e8:	b110      	cbz	r0, 80120f0 <Network::SetNetmask(unsigned int)+0x18>
 80120ea:	6803      	ldr	r3, [r0, #0]
 80120ec:	68db      	ldr	r3, [r3, #12]
 80120ee:	4798      	blx	r3
 80120f0:	34b8      	adds	r4, #184	; 0xb8
 80120f2:	4620      	mov	r0, r4
 80120f4:	f001 fb20 	bl	8013738 <NetworkDisplay::ShowIp()>
 80120f8:	4620      	mov	r0, r4
 80120fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120fe:	f001 bb21 	b.w	8013744 <NetworkDisplay::ShowNetMask()>
 8012102:	bd10      	pop	{r4, pc}

08012104 <Network::SetGatewayIp(unsigned int)>:
 8012104:	b538      	push	{r3, r4, r5, lr}
 8012106:	6943      	ldr	r3, [r0, #20]
 8012108:	4604      	mov	r4, r0
 801210a:	428b      	cmp	r3, r1
 801210c:	460d      	mov	r5, r1
 801210e:	d00f      	beq.n	8012130 <Network::SetGatewayIp(unsigned int)+0x2c>
 8012110:	4608      	mov	r0, r1
 8012112:	f7fe fe87 	bl	8010e24 <net_set_gw>
 8012116:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 801211a:	b118      	cbz	r0, 8012124 <Network::SetGatewayIp(unsigned int)+0x20>
 801211c:	6803      	ldr	r3, [r0, #0]
 801211e:	4629      	mov	r1, r5
 8012120:	691b      	ldr	r3, [r3, #16]
 8012122:	4798      	blx	r3
 8012124:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 8012128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801212c:	f001 bb10 	b.w	8013750 <NetworkDisplay::ShowGatewayIp()>
 8012130:	bd38      	pop	{r3, r4, r5, pc}
	...

08012134 <Network::EnableDhcp()>:
 8012134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012136:	4e23      	ldr	r6, [pc, #140]	; (80121c4 <Network::EnableDhcp()+0x90>)
 8012138:	4604      	mov	r4, r0
 801213a:	6833      	ldr	r3, [r6, #0]
 801213c:	b085      	sub	sp, #20
 801213e:	791f      	ldrb	r7, [r3, #4]
 8012140:	b137      	cbz	r7, 8012150 <Network::EnableDhcp()+0x1c>
 8012142:	2200      	movs	r2, #0
 8012144:	2104      	movs	r1, #4
 8012146:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801214a:	711a      	strb	r2, [r3, #4]
 801214c:	f002 fdce 	bl	8014cec <fwdgt_config>
 8012150:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
 8012154:	2101      	movs	r1, #1
 8012156:	4628      	mov	r0, r5
 8012158:	f001 fb06 	bl	8013768 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 801215c:	1ce2      	adds	r2, r4, #3
 801215e:	f104 011c 	add.w	r1, r4, #28
 8012162:	a801      	add	r0, sp, #4
 8012164:	f7fe fe66 	bl	8010e34 <net_set_dhcp>
 8012168:	78e3      	ldrb	r3, [r4, #3]
 801216a:	7060      	strb	r0, [r4, #1]
 801216c:	b343      	cbz	r3, 80121c0 <Network::EnableDhcp()+0x8c>
 801216e:	2104      	movs	r1, #4
 8012170:	4628      	mov	r0, r5
 8012172:	f001 faf9 	bl	8013768 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8012176:	b16f      	cbz	r7, 8012194 <Network::EnableDhcp()+0x60>
 8012178:	2102      	movs	r1, #2
 801217a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801217e:	6836      	ldr	r6, [r6, #0]
 8012180:	f002 fdb4 	bl	8014cec <fwdgt_config>
 8012184:	2801      	cmp	r0, #1
 8012186:	bf0c      	ite	eq
 8012188:	2301      	moveq	r3, #1
 801218a:	2300      	movne	r3, #0
 801218c:	7133      	strb	r3, [r6, #4]
 801218e:	d101      	bne.n	8012194 <Network::EnableDhcp()+0x60>
 8012190:	f002 fd9c 	bl	8014ccc <fwdgt_enable>
 8012194:	9b01      	ldr	r3, [sp, #4]
 8012196:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 801219a:	6123      	str	r3, [r4, #16]
 801219c:	9b02      	ldr	r3, [sp, #8]
 801219e:	61a3      	str	r3, [r4, #24]
 80121a0:	9b03      	ldr	r3, [sp, #12]
 80121a2:	6163      	str	r3, [r4, #20]
 80121a4:	b118      	cbz	r0, 80121ae <Network::EnableDhcp()+0x7a>
 80121a6:	6803      	ldr	r3, [r0, #0]
 80121a8:	7861      	ldrb	r1, [r4, #1]
 80121aa:	699b      	ldr	r3, [r3, #24]
 80121ac:	4798      	blx	r3
 80121ae:	4628      	mov	r0, r5
 80121b0:	f001 fac2 	bl	8013738 <NetworkDisplay::ShowIp()>
 80121b4:	4628      	mov	r0, r5
 80121b6:	f001 fac5 	bl	8013744 <NetworkDisplay::ShowNetMask()>
 80121ba:	7860      	ldrb	r0, [r4, #1]
 80121bc:	b005      	add	sp, #20
 80121be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121c0:	2102      	movs	r1, #2
 80121c2:	e7d5      	b.n	8012170 <Network::EnableDhcp()+0x3c>
 80121c4:	2000a9c8 	andcs	sl, r0, r8, asr #19

080121c8 <Network::Print()>:
 80121c8:	b530      	push	{r4, r5, lr}
 80121ca:	4604      	mov	r4, r0
 80121cc:	b085      	sub	sp, #20
 80121ce:	4832      	ldr	r0, [pc, #200]	; (8012298 <Network::Print()+0xd0>)
 80121d0:	f7f7 f8e0 	bl	8009394 <printf>
 80121d4:	f104 011c 	add.w	r1, r4, #28
 80121d8:	4830      	ldr	r0, [pc, #192]	; (801229c <Network::Print()+0xd4>)
 80121da:	f7f7 f8db 	bl	8009394 <printf>
 80121de:	6861      	ldr	r1, [r4, #4]
 80121e0:	f104 02a2 	add.w	r2, r4, #162	; 0xa2
 80121e4:	482e      	ldr	r0, [pc, #184]	; (80122a0 <Network::Print()+0xd8>)
 80121e6:	f7f7 f8d5 	bl	8009394 <printf>
 80121ea:	69a0      	ldr	r0, [r4, #24]
 80121ec:	f004 fb86 	bl	80168fc <__popcountsi2>
 80121f0:	6925      	ldr	r5, [r4, #16]
 80121f2:	9001      	str	r0, [sp, #4]
 80121f4:	0e2b      	lsrs	r3, r5, #24
 80121f6:	9300      	str	r3, [sp, #0]
 80121f8:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80121fc:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8012200:	b2e9      	uxtb	r1, r5
 8012202:	4828      	ldr	r0, [pc, #160]	; (80122a4 <Network::Print()+0xdc>)
 8012204:	f7f7 f8c6 	bl	8009394 <printf>
 8012208:	69a1      	ldr	r1, [r4, #24]
 801220a:	4827      	ldr	r0, [pc, #156]	; (80122a8 <Network::Print()+0xe0>)
 801220c:	0e0b      	lsrs	r3, r1, #24
 801220e:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8012212:	9300      	str	r3, [sp, #0]
 8012214:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8012218:	b2c9      	uxtb	r1, r1
 801221a:	f7f7 f8bb 	bl	8009394 <printf>
 801221e:	6961      	ldr	r1, [r4, #20]
 8012220:	4822      	ldr	r0, [pc, #136]	; (80122ac <Network::Print()+0xe4>)
 8012222:	0e0b      	lsrs	r3, r1, #24
 8012224:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8012228:	9300      	str	r3, [sp, #0]
 801222a:	f3c1 4307 	ubfx	r3, r1, #16, #8
 801222e:	b2c9      	uxtb	r1, r1
 8012230:	f7f7 f8b0 	bl	8009394 <printf>
 8012234:	69a3      	ldr	r3, [r4, #24]
 8012236:	6921      	ldr	r1, [r4, #16]
 8012238:	481d      	ldr	r0, [pc, #116]	; (80122b0 <Network::Print()+0xe8>)
 801223a:	ea61 0103 	orn	r1, r1, r3
 801223e:	0e0b      	lsrs	r3, r1, #24
 8012240:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8012244:	9300      	str	r3, [sp, #0]
 8012246:	f3c1 4307 	ubfx	r3, r1, #16, #8
 801224a:	b2c9      	uxtb	r1, r1
 801224c:	f7f7 f8a2 	bl	8009394 <printf>
 8012250:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 8012254:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
 8012258:	9302      	str	r3, [sp, #8]
 801225a:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 801225e:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
 8012262:	9301      	str	r3, [sp, #4]
 8012264:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
 8012268:	4812      	ldr	r0, [pc, #72]	; (80122b4 <Network::Print()+0xec>)
 801226a:	9300      	str	r3, [sp, #0]
 801226c:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
 8012270:	f7f7 f890 	bl	8009394 <printf>
 8012274:	4b10      	ldr	r3, [pc, #64]	; (80122b8 <Network::Print()+0xf0>)
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	78da      	ldrb	r2, [r3, #3]
 801227a:	b952      	cbnz	r2, 8012292 <Network::Print()+0xca>
 801227c:	785b      	ldrb	r3, [r3, #1]
 801227e:	2b00      	cmp	r3, #0
 8012280:	bf14      	ite	ne
 8012282:	2144      	movne	r1, #68	; 0x44
 8012284:	2153      	moveq	r1, #83	; 0x53
 8012286:	480d      	ldr	r0, [pc, #52]	; (80122bc <Network::Print()+0xf4>)
 8012288:	b005      	add	sp, #20
 801228a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801228e:	f7f7 b881 	b.w	8009394 <printf>
 8012292:	215a      	movs	r1, #90	; 0x5a
 8012294:	e7f7      	b.n	8012286 <Network::Print()+0xbe>
 8012296:	bf00      	nop
 8012298:	08018488 	stmdaeq	r1, {r3, r7, sl, pc}
 801229c:	08018491 	stmdaeq	r1, {r0, r4, r7, sl, pc}
 80122a0:	080184a2 	stmdaeq	r1, {r1, r5, r7, sl, pc}
 80122a4:	080184b7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, sl, pc}
 80122a8:	080184d4 	stmdaeq	r1, {r2, r4, r6, r7, sl, pc}
 80122ac:	080184ee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, sl, pc}
 80122b0:	08018508 	stmdaeq	r1, {r3, r8, sl, pc}
 80122b4:	08018522 	stmdaeq	r1, {r1, r5, r8, sl, pc}
 80122b8:	2000a2a0 	andcs	sl, r0, r0, lsr #5
 80122bc:	0801854e 	stmdaeq	r1, {r1, r2, r3, r6, r8, sl, pc}

080122c0 <Network::TcpBegin(unsigned short)>:
 80122c0:	4608      	mov	r0, r1
 80122c2:	f7fe bf5d 	b.w	8011180 <tcp_begin>

080122c6 <Network::TcpRead(int, unsigned char const**)>:
 80122c6:	4608      	mov	r0, r1
 80122c8:	4611      	mov	r1, r2
 80122ca:	f7fe bf97 	b.w	80111fc <tcp_read>

080122ce <Network::TcpWrite(int, unsigned char const*, unsigned short)>:
 80122ce:	4608      	mov	r0, r1
 80122d0:	4611      	mov	r1, r2
 80122d2:	461a      	mov	r2, r3
 80122d4:	f7fe bf6e 	b.w	80111b4 <tcp_write>

080122d8 <NetworkParams::NetworkParams(NetworkParamsStore*)>:
 80122d8:	4b06      	ldr	r3, [pc, #24]	; (80122f4 <NetworkParams::NetworkParams(NetworkParamsStore*)+0x1c>)
 80122da:	b510      	push	{r4, lr}
 80122dc:	225e      	movs	r2, #94	; 0x5e
 80122de:	4604      	mov	r4, r0
 80122e0:	6001      	str	r1, [r0, #0]
 80122e2:	2100      	movs	r1, #0
 80122e4:	4618      	mov	r0, r3
 80122e6:	f002 fa79 	bl	80147dc <memset>
 80122ea:	2201      	movs	r2, #1
 80122ec:	7502      	strb	r2, [r0, #20]
 80122ee:	4620      	mov	r0, r4
 80122f0:	bd10      	pop	{r4, pc}
 80122f2:	bf00      	nop
 80122f4:	2000a2a4 	andcs	sl, r0, r4, lsr #5

080122f8 <NetworkParams::Load()>:
 80122f8:	b508      	push	{r3, lr}
 80122fa:	2300      	movs	r3, #0
 80122fc:	4905      	ldr	r1, [pc, #20]	; (8012314 <NetworkParams::Load()+0x1c>)
 80122fe:	6800      	ldr	r0, [r0, #0]
 8012300:	700b      	strb	r3, [r1, #0]
 8012302:	704b      	strb	r3, [r1, #1]
 8012304:	708b      	strb	r3, [r1, #2]
 8012306:	70cb      	strb	r3, [r1, #3]
 8012308:	b118      	cbz	r0, 8012312 <NetworkParams::Load()+0x1a>
 801230a:	6803      	ldr	r3, [r0, #0]
 801230c:	68db      	ldr	r3, [r3, #12]
 801230e:	4798      	blx	r3
 8012310:	2001      	movs	r0, #1
 8012312:	bd08      	pop	{r3, pc}
 8012314:	2000a2a4 	andcs	sl, r0, r4, lsr #5

08012318 <NetworkParams::Load(char const*, unsigned int)>:
 8012318:	6803      	ldr	r3, [r0, #0]
 801231a:	b1eb      	cbz	r3, 8012358 <NetworkParams::Load(char const*, unsigned int)+0x40>
 801231c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801231e:	2300      	movs	r3, #0
 8012320:	460e      	mov	r6, r1
 8012322:	4617      	mov	r7, r2
 8012324:	4605      	mov	r5, r0
 8012326:	4c0d      	ldr	r4, [pc, #52]	; (801235c <NetworkParams::Load(char const*, unsigned int)+0x44>)
 8012328:	4602      	mov	r2, r0
 801232a:	490d      	ldr	r1, [pc, #52]	; (8012360 <NetworkParams::Load(char const*, unsigned int)+0x48>)
 801232c:	4668      	mov	r0, sp
 801232e:	7023      	strb	r3, [r4, #0]
 8012330:	7063      	strb	r3, [r4, #1]
 8012332:	70a3      	strb	r3, [r4, #2]
 8012334:	70e3      	strb	r3, [r4, #3]
 8012336:	f001 fb9f 	bl	8013a78 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 801233a:	463a      	mov	r2, r7
 801233c:	4631      	mov	r1, r6
 801233e:	4668      	mov	r0, sp
 8012340:	f001 fb9e 	bl	8013a80 <ReadConfigFile::Read(char const*, unsigned int)>
 8012344:	6828      	ldr	r0, [r5, #0]
 8012346:	4621      	mov	r1, r4
 8012348:	6803      	ldr	r3, [r0, #0]
 801234a:	689b      	ldr	r3, [r3, #8]
 801234c:	4798      	blx	r3
 801234e:	4668      	mov	r0, sp
 8012350:	f001 fb95 	bl	8013a7e <ReadConfigFile::~ReadConfigFile()>
 8012354:	b003      	add	sp, #12
 8012356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012358:	4770      	bx	lr
 801235a:	bf00      	nop
 801235c:	2000a2a4 	andcs	sl, r0, r4, lsr #5
 8012360:	08012495 	stmdaeq	r1, {r0, r2, r4, r7, sl, sp}

08012364 <NetworkParams::callbackFunction(char const*)>:
 8012364:	b530      	push	{r4, r5, lr}
 8012366:	460c      	mov	r4, r1
 8012368:	b085      	sub	sp, #20
 801236a:	4620      	mov	r0, r4
 801236c:	4942      	ldr	r1, [pc, #264]	; (8012478 <NetworkParams::callbackFunction(char const*)+0x114>)
 801236e:	f10d 0207 	add.w	r2, sp, #7
 8012372:	f001 fce7 	bl	8013d44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8012376:	b980      	cbnz	r0, 801239a <NetworkParams::callbackFunction(char const*)+0x36>
 8012378:	4940      	ldr	r1, [pc, #256]	; (801247c <NetworkParams::callbackFunction(char const*)+0x118>)
 801237a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801237e:	680b      	ldr	r3, [r1, #0]
 8012380:	b142      	cbz	r2, 8012394 <NetworkParams::callbackFunction(char const*)+0x30>
 8012382:	f023 0301 	bic.w	r3, r3, #1
 8012386:	3a00      	subs	r2, #0
 8012388:	bf18      	it	ne
 801238a:	2201      	movne	r2, #1
 801238c:	600b      	str	r3, [r1, #0]
 801238e:	750a      	strb	r2, [r1, #20]
 8012390:	b005      	add	sp, #20
 8012392:	bd30      	pop	{r4, r5, pc}
 8012394:	f043 0301 	orr.w	r3, r3, #1
 8012398:	e7f5      	b.n	8012386 <NetworkParams::callbackFunction(char const*)+0x22>
 801239a:	4620      	mov	r0, r4
 801239c:	4938      	ldr	r1, [pc, #224]	; (8012480 <NetworkParams::callbackFunction(char const*)+0x11c>)
 801239e:	f10d 0207 	add.w	r2, sp, #7
 80123a2:	f001 fccf 	bl	8013d44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80123a6:	b988      	cbnz	r0, 80123cc <NetworkParams::callbackFunction(char const*)+0x68>
 80123a8:	4a34      	ldr	r2, [pc, #208]	; (801247c <NetworkParams::callbackFunction(char const*)+0x118>)
 80123aa:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80123ae:	6813      	ldr	r3, [r2, #0]
 80123b0:	1e4d      	subs	r5, r1, #1
 80123b2:	2d04      	cmp	r5, #4
 80123b4:	bf97      	itett	ls
 80123b6:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 80123ba:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 80123be:	6013      	strls	r3, [r2, #0]
 80123c0:	f882 105d 	strbls.w	r1, [r2, #93]	; 0x5d
 80123c4:	bf84      	itt	hi
 80123c6:	6013      	strhi	r3, [r2, #0]
 80123c8:	f882 005d 	strbhi.w	r0, [r2, #93]	; 0x5d
 80123cc:	4620      	mov	r0, r4
 80123ce:	492d      	ldr	r1, [pc, #180]	; (8012484 <NetworkParams::callbackFunction(char const*)+0x120>)
 80123d0:	aa02      	add	r2, sp, #8
 80123d2:	f001 fc2f 	bl	8013c34 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 80123d6:	b9d0      	cbnz	r0, 801240e <NetworkParams::callbackFunction(char const*)+0xaa>
 80123d8:	9b02      	ldr	r3, [sp, #8]
 80123da:	b2d9      	uxtb	r1, r3
 80123dc:	29ac      	cmp	r1, #172	; 0xac
 80123de:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80123e2:	d00a      	beq.n	80123fa <NetworkParams::callbackFunction(char const*)+0x96>
 80123e4:	29c0      	cmp	r1, #192	; 0xc0
 80123e6:	d00c      	beq.n	8012402 <NetworkParams::callbackFunction(char const*)+0x9e>
 80123e8:	290a      	cmp	r1, #10
 80123ea:	d10d      	bne.n	8012408 <NetworkParams::callbackFunction(char const*)+0xa4>
 80123ec:	4a23      	ldr	r2, [pc, #140]	; (801247c <NetworkParams::callbackFunction(char const*)+0x118>)
 80123ee:	6053      	str	r3, [r2, #4]
 80123f0:	6813      	ldr	r3, [r2, #0]
 80123f2:	f043 0302 	orr.w	r3, r3, #2
 80123f6:	6013      	str	r3, [r2, #0]
 80123f8:	e7ca      	b.n	8012390 <NetworkParams::callbackFunction(char const*)+0x2c>
 80123fa:	3a10      	subs	r2, #16
 80123fc:	2a0f      	cmp	r2, #15
 80123fe:	d8c7      	bhi.n	8012390 <NetworkParams::callbackFunction(char const*)+0x2c>
 8012400:	e7f4      	b.n	80123ec <NetworkParams::callbackFunction(char const*)+0x88>
 8012402:	2aa8      	cmp	r2, #168	; 0xa8
 8012404:	d1c4      	bne.n	8012390 <NetworkParams::callbackFunction(char const*)+0x2c>
 8012406:	e7f1      	b.n	80123ec <NetworkParams::callbackFunction(char const*)+0x88>
 8012408:	2b00      	cmp	r3, #0
 801240a:	d0ef      	beq.n	80123ec <NetworkParams::callbackFunction(char const*)+0x88>
 801240c:	e7c0      	b.n	8012390 <NetworkParams::callbackFunction(char const*)+0x2c>
 801240e:	4620      	mov	r0, r4
 8012410:	491d      	ldr	r1, [pc, #116]	; (8012488 <NetworkParams::callbackFunction(char const*)+0x124>)
 8012412:	aa02      	add	r2, sp, #8
 8012414:	f001 fc0e 	bl	8013c34 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8012418:	b970      	cbnz	r0, 8012438 <NetworkParams::callbackFunction(char const*)+0xd4>
 801241a:	9a02      	ldr	r2, [sp, #8]
 801241c:	2a00      	cmp	r2, #0
 801241e:	d0b7      	beq.n	8012390 <NetworkParams::callbackFunction(char const*)+0x2c>
 8012420:	ba13      	rev	r3, r2
 8012422:	43d9      	mvns	r1, r3
 8012424:	ea13 0351 	ands.w	r3, r3, r1, lsr #1
 8012428:	d1b2      	bne.n	8012390 <NetworkParams::callbackFunction(char const*)+0x2c>
 801242a:	4b14      	ldr	r3, [pc, #80]	; (801247c <NetworkParams::callbackFunction(char const*)+0x118>)
 801242c:	609a      	str	r2, [r3, #8]
 801242e:	681a      	ldr	r2, [r3, #0]
 8012430:	f042 0204 	orr.w	r2, r2, #4
 8012434:	601a      	str	r2, [r3, #0]
 8012436:	e7ab      	b.n	8012390 <NetworkParams::callbackFunction(char const*)+0x2c>
 8012438:	4620      	mov	r0, r4
 801243a:	4914      	ldr	r1, [pc, #80]	; (801248c <NetworkParams::callbackFunction(char const*)+0x128>)
 801243c:	aa02      	add	r2, sp, #8
 801243e:	f001 fbf9 	bl	8013c34 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8012442:	4d0e      	ldr	r5, [pc, #56]	; (801247c <NetworkParams::callbackFunction(char const*)+0x118>)
 8012444:	b930      	cbnz	r0, 8012454 <NetworkParams::callbackFunction(char const*)+0xf0>
 8012446:	9b02      	ldr	r3, [sp, #8]
 8012448:	60eb      	str	r3, [r5, #12]
 801244a:	682b      	ldr	r3, [r5, #0]
 801244c:	f043 0308 	orr.w	r3, r3, #8
 8012450:	602b      	str	r3, [r5, #0]
 8012452:	e79d      	b.n	8012390 <NetworkParams::callbackFunction(char const*)+0x2c>
 8012454:	233f      	movs	r3, #63	; 0x3f
 8012456:	4620      	mov	r0, r4
 8012458:	9303      	str	r3, [sp, #12]
 801245a:	490d      	ldr	r1, [pc, #52]	; (8012490 <NetworkParams::callbackFunction(char const*)+0x12c>)
 801245c:	ab03      	add	r3, sp, #12
 801245e:	f105 0215 	add.w	r2, r5, #21
 8012462:	f001 fb41 	bl	8013ae8 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 8012466:	2800      	cmp	r0, #0
 8012468:	d192      	bne.n	8012390 <NetworkParams::callbackFunction(char const*)+0x2c>
 801246a:	9b03      	ldr	r3, [sp, #12]
 801246c:	442b      	add	r3, r5
 801246e:	7558      	strb	r0, [r3, #21]
 8012470:	682b      	ldr	r3, [r5, #0]
 8012472:	f043 0320 	orr.w	r3, r3, #32
 8012476:	e7eb      	b.n	8012450 <NetworkParams::callbackFunction(char const*)+0xec>
 8012478:	080185a6 	stmdaeq	r1, {r1, r2, r5, r7, r8, sl, pc}
 801247c:	2000a2a4 	andcs	sl, r0, r4, lsr #5
 8012480:	08018584 	stmdaeq	r1, {r2, r7, r8, sl, pc}
 8012484:	08018569 	stmdaeq	r1, {r0, r3, r5, r6, r8, sl, pc}
 8012488:	0801859d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, sl, pc}
 801248c:	08018574 	stmdaeq	r1, {r2, r4, r5, r6, r8, sl, pc}
 8012490:	08018594 	stmdaeq	r1, {r2, r4, r7, r8, sl, pc}

08012494 <NetworkParams::staticCallbackFunction(void*, char const*)>:
 8012494:	f7ff bf66 	b.w	8012364 <NetworkParams::callbackFunction(char const*)>

08012498 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)>:
 8012498:	b530      	push	{r4, r5, lr}
 801249a:	4614      	mov	r4, r2
 801249c:	461d      	mov	r5, r3
 801249e:	b087      	sub	sp, #28
 80124a0:	2900      	cmp	r1, #0
 80124a2:	d02a      	beq.n	80124fa <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x62>
 80124a4:	225e      	movs	r2, #94	; 0x5e
 80124a6:	4872      	ldr	r0, [pc, #456]	; (8012670 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1d8>)
 80124a8:	f002 f981 	bl	80147ae <memmove>
 80124ac:	4622      	mov	r2, r4
 80124ae:	462b      	mov	r3, r5
 80124b0:	4970      	ldr	r1, [pc, #448]	; (8012674 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1dc>)
 80124b2:	a803      	add	r0, sp, #12
 80124b4:	f001 fa10 	bl	80138d8 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 80124b8:	4c6d      	ldr	r4, [pc, #436]	; (8012670 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1d8>)
 80124ba:	6823      	ldr	r3, [r4, #0]
 80124bc:	0799      	lsls	r1, r3, #30
 80124be:	bf5f      	itttt	pl
 80124c0:	4a6d      	ldrpl	r2, [pc, #436]	; (8012678 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e0>)
 80124c2:	6812      	ldrpl	r2, [r2, #0]
 80124c4:	6912      	ldrpl	r2, [r2, #16]
 80124c6:	6062      	strpl	r2, [r4, #4]
 80124c8:	075a      	lsls	r2, r3, #29
 80124ca:	bf5f      	itttt	pl
 80124cc:	4a6a      	ldrpl	r2, [pc, #424]	; (8012678 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e0>)
 80124ce:	6812      	ldrpl	r2, [r2, #0]
 80124d0:	6992      	ldrpl	r2, [r2, #24]
 80124d2:	60a2      	strpl	r2, [r4, #8]
 80124d4:	071d      	lsls	r5, r3, #28
 80124d6:	bf5f      	itttt	pl
 80124d8:	4a67      	ldrpl	r2, [pc, #412]	; (8012678 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e0>)
 80124da:	6812      	ldrpl	r2, [r2, #0]
 80124dc:	6952      	ldrpl	r2, [r2, #20]
 80124de:	60e2      	strpl	r2, [r4, #12]
 80124e0:	0698      	lsls	r0, r3, #26
 80124e2:	d417      	bmi.n	8012514 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x7c>
 80124e4:	223f      	movs	r2, #63	; 0x3f
 80124e6:	4b64      	ldr	r3, [pc, #400]	; (8012678 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e0>)
 80124e8:	4864      	ldr	r0, [pc, #400]	; (801267c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e4>)
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	331b      	adds	r3, #27
 80124ee:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80124f2:	b941      	cbnz	r1, 8012506 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x6e>
 80124f4:	f002 f972 	bl	80147dc <memset>
 80124f8:	e009      	b.n	801250e <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x76>
 80124fa:	6800      	ldr	r0, [r0, #0]
 80124fc:	495c      	ldr	r1, [pc, #368]	; (8012670 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1d8>)
 80124fe:	6803      	ldr	r3, [r0, #0]
 8012500:	68db      	ldr	r3, [r3, #12]
 8012502:	4798      	blx	r3
 8012504:	e7d2      	b.n	80124ac <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x14>
 8012506:	3a01      	subs	r2, #1
 8012508:	f800 1b01 	strb.w	r1, [r0], #1
 801250c:	d1ef      	bne.n	80124ee <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x56>
 801250e:	2300      	movs	r3, #0
 8012510:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8012514:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8012518:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 801251c:	7d23      	ldrb	r3, [r4, #20]
 801251e:	42aa      	cmp	r2, r5
 8012520:	6821      	ldr	r1, [r4, #0]
 8012522:	d21a      	bcs.n	801255a <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xc2>
 8012524:	9803      	ldr	r0, [sp, #12]
 8012526:	07c9      	lsls	r1, r1, #31
 8012528:	4410      	add	r0, r2
 801252a:	eba5 0502 	sub.w	r5, r5, r2
 801252e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8012532:	d404      	bmi.n	801253e <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xa6>
 8012534:	b922      	cbnz	r2, 8012540 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xa8>
 8012536:	9300      	str	r3, [sp, #0]
 8012538:	4a51      	ldr	r2, [pc, #324]	; (8012680 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e8>)
 801253a:	4b52      	ldr	r3, [pc, #328]	; (8012684 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1ec>)
 801253c:	e003      	b.n	8012546 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xae>
 801253e:	b312      	cbz	r2, 8012586 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xee>
 8012540:	9300      	str	r3, [sp, #0]
 8012542:	4a51      	ldr	r2, [pc, #324]	; (8012688 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f0>)
 8012544:	4b4f      	ldr	r3, [pc, #316]	; (8012684 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1ec>)
 8012546:	4629      	mov	r1, r5
 8012548:	f7f6 ff4c 	bl	80093e4 <snprintf>
 801254c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8012550:	4285      	cmp	r5, r0
 8012552:	bfa4      	itt	ge
 8012554:	181b      	addge	r3, r3, r0
 8012556:	f8ad 3012 	strhge.w	r3, [sp, #18]
 801255a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801255e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8012562:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8012566:	42aa      	cmp	r2, r5
 8012568:	6821      	ldr	r1, [r4, #0]
 801256a:	d21f      	bcs.n	80125ac <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x114>
 801256c:	9803      	ldr	r0, [sp, #12]
 801256e:	05c9      	lsls	r1, r1, #23
 8012570:	4410      	add	r0, r2
 8012572:	eba5 0502 	sub.w	r5, r5, r2
 8012576:	f89d 2014 	ldrb.w	r2, [sp, #20]
 801257a:	d408      	bmi.n	801258e <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xf6>
 801257c:	b94a      	cbnz	r2, 8012592 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xfa>
 801257e:	9300      	str	r3, [sp, #0]
 8012580:	4a3f      	ldr	r2, [pc, #252]	; (8012680 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e8>)
 8012582:	4b42      	ldr	r3, [pc, #264]	; (801268c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f4>)
 8012584:	e008      	b.n	8012598 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x100>
 8012586:	9300      	str	r3, [sp, #0]
 8012588:	4a41      	ldr	r2, [pc, #260]	; (8012690 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f8>)
 801258a:	4b3e      	ldr	r3, [pc, #248]	; (8012684 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1ec>)
 801258c:	e7db      	b.n	8012546 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xae>
 801258e:	2a00      	cmp	r2, #0
 8012590:	d03e      	beq.n	8012610 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x178>
 8012592:	9300      	str	r3, [sp, #0]
 8012594:	4a3c      	ldr	r2, [pc, #240]	; (8012688 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f0>)
 8012596:	4b3d      	ldr	r3, [pc, #244]	; (801268c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f4>)
 8012598:	4629      	mov	r1, r5
 801259a:	f7f6 ff23 	bl	80093e4 <snprintf>
 801259e:	4285      	cmp	r5, r0
 80125a0:	bfa2      	ittt	ge
 80125a2:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 80125a6:	18c0      	addge	r0, r0, r3
 80125a8:	f8ad 0012 	strhge.w	r0, [sp, #18]
 80125ac:	4939      	ldr	r1, [pc, #228]	; (8012694 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1fc>)
 80125ae:	a803      	add	r0, sp, #12
 80125b0:	f001 fa18 	bl	80139e4 <PropertiesBuilder::AddComment(char const*)>
 80125b4:	6823      	ldr	r3, [r4, #0]
 80125b6:	6862      	ldr	r2, [r4, #4]
 80125b8:	4937      	ldr	r1, [pc, #220]	; (8012698 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x200>)
 80125ba:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80125be:	a803      	add	r0, sp, #12
 80125c0:	f001 f9cc 	bl	801395c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 80125c4:	6823      	ldr	r3, [r4, #0]
 80125c6:	68a2      	ldr	r2, [r4, #8]
 80125c8:	4934      	ldr	r1, [pc, #208]	; (801269c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x204>)
 80125ca:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80125ce:	a803      	add	r0, sp, #12
 80125d0:	f001 f9c4 	bl	801395c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 80125d4:	6823      	ldr	r3, [r4, #0]
 80125d6:	68e2      	ldr	r2, [r4, #12]
 80125d8:	4931      	ldr	r1, [pc, #196]	; (80126a0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x208>)
 80125da:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80125de:	a803      	add	r0, sp, #12
 80125e0:	f001 f9bc 	bl	801395c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 80125e4:	6821      	ldr	r1, [r4, #0]
 80125e6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80125ea:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 80125ee:	42a3      	cmp	r3, r4
 80125f0:	d220      	bcs.n	8012634 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x19c>
 80125f2:	9803      	ldr	r0, [sp, #12]
 80125f4:	f011 0f20 	tst.w	r1, #32
 80125f8:	4418      	add	r0, r3
 80125fa:	eba4 0403 	sub.w	r4, r4, r3
 80125fe:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8012602:	4b1e      	ldr	r3, [pc, #120]	; (801267c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e4>)
 8012604:	d108      	bne.n	8012618 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x180>
 8012606:	b942      	cbnz	r2, 801261a <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x182>
 8012608:	9300      	str	r3, [sp, #0]
 801260a:	4a26      	ldr	r2, [pc, #152]	; (80126a4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x20c>)
 801260c:	4b26      	ldr	r3, [pc, #152]	; (80126a8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x210>)
 801260e:	e007      	b.n	8012620 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x188>
 8012610:	9300      	str	r3, [sp, #0]
 8012612:	4a1f      	ldr	r2, [pc, #124]	; (8012690 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f8>)
 8012614:	4b1d      	ldr	r3, [pc, #116]	; (801268c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f4>)
 8012616:	e7bf      	b.n	8012598 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x100>
 8012618:	b32a      	cbz	r2, 8012666 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1ce>
 801261a:	9300      	str	r3, [sp, #0]
 801261c:	4a23      	ldr	r2, [pc, #140]	; (80126ac <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x214>)
 801261e:	4b22      	ldr	r3, [pc, #136]	; (80126a8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x210>)
 8012620:	4621      	mov	r1, r4
 8012622:	f7f6 fedf 	bl	80093e4 <snprintf>
 8012626:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801262a:	4284      	cmp	r4, r0
 801262c:	bfa4      	itt	ge
 801262e:	181b      	addge	r3, r3, r0
 8012630:	f8ad 3012 	strhge.w	r3, [sp, #18]
 8012634:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8012638:	b17b      	cbz	r3, 801265a <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1c2>
 801263a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801263e:	9b03      	ldr	r3, [sp, #12]
 8012640:	4413      	add	r3, r2
 8012642:	227d      	movs	r2, #125	; 0x7d
 8012644:	f803 2c01 	strb.w	r2, [r3, #-1]
 8012648:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801264c:	9903      	ldr	r1, [sp, #12]
 801264e:	54ca      	strb	r2, [r1, r3]
 8012650:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8012654:	3301      	adds	r3, #1
 8012656:	f8ad 3012 	strh.w	r3, [sp, #18]
 801265a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801265e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012660:	601a      	str	r2, [r3, #0]
 8012662:	b007      	add	sp, #28
 8012664:	bd30      	pop	{r4, r5, pc}
 8012666:	9300      	str	r3, [sp, #0]
 8012668:	4a11      	ldr	r2, [pc, #68]	; (80126b0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x218>)
 801266a:	4b0f      	ldr	r3, [pc, #60]	; (80126a8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x210>)
 801266c:	e7d8      	b.n	8012620 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x188>
 801266e:	bf00      	nop
 8012670:	2000a2a4 	andcs	sl, r0, r4, lsr #5
 8012674:	080185af 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, r8, sl, pc}
 8012678:	2000a2a0 	andcs	sl, r0, r0, lsr #5
 801267c:	2000a2b9 			; <UNDEFINED> instruction: 0x2000a2b9
 8012680:	08016c51 	stmdaeq	r1, {r0, r4, r6, sl, fp, sp, lr}
 8012684:	080185a6 	stmdaeq	r1, {r1, r2, r5, r7, r8, sl, pc}
 8012688:	08016c48 	stmdaeq	r1, {r3, r6, sl, fp, sp, lr}
 801268c:	08018584 	stmdaeq	r1, {r2, r7, r8, sl, pc}
 8012690:	08016c52 	stmdaeq	r1, {r1, r4, r6, sl, fp, sp, lr}
 8012694:	0801855f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r8, sl, pc}
 8012698:	08018569 	stmdaeq	r1, {r0, r3, r5, r6, r8, sl, pc}
 801269c:	0801859d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, sl, pc}
 80126a0:	08018574 	stmdaeq	r1, {r2, r4, r5, r6, r8, sl, pc}
 80126a4:	08016c64 	stmdaeq	r1, {r2, r5, r6, sl, fp, sp, lr}
 80126a8:	08018594 	stmdaeq	r1, {r2, r4, r7, r8, sl, pc}
 80126ac:	08016c59 	stmdaeq	r1, {r0, r3, r4, r6, sl, fp, sp, lr}
 80126b0:	08016c65 	stmdaeq	r1, {r0, r2, r5, r6, sl, fp, sp, lr}

080126b4 <NetworkParams::Save(char*, unsigned int, unsigned int&)>:
 80126b4:	b513      	push	{r0, r1, r4, lr}
 80126b6:	6804      	ldr	r4, [r0, #0]
 80126b8:	b914      	cbnz	r4, 80126c0 <NetworkParams::Save(char*, unsigned int, unsigned int&)+0xc>
 80126ba:	601c      	str	r4, [r3, #0]
 80126bc:	b002      	add	sp, #8
 80126be:	bd10      	pop	{r4, pc}
 80126c0:	9300      	str	r3, [sp, #0]
 80126c2:	4613      	mov	r3, r2
 80126c4:	460a      	mov	r2, r1
 80126c6:	2100      	movs	r1, #0
 80126c8:	f7ff fee6 	bl	8012498 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)>
 80126cc:	e7f6      	b.n	80126bc <NetworkParams::Save(char*, unsigned int, unsigned int&)+0x8>

080126ce <NetworkParams::Dump()>:
 80126ce:	4770      	bx	lr

080126d0 <memcpy.isra.0>:
 80126d0:	3801      	subs	r0, #1
 80126d2:	440a      	add	r2, r1
 80126d4:	4291      	cmp	r1, r2
 80126d6:	d100      	bne.n	80126da <memcpy.isra.0+0xa>
 80126d8:	4770      	bx	lr
 80126da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80126de:	f800 3f01 	strb.w	r3, [r0, #1]!
 80126e2:	e7f7      	b.n	80126d4 <memcpy.isra.0+0x4>

080126e4 <arp_announce>:
 80126e4:	4803      	ldr	r0, [pc, #12]	; (80126f4 <arp_announce+0x10>)
 80126e6:	69c3      	ldr	r3, [r0, #28]
 80126e8:	b113      	cbz	r3, 80126f0 <arp_announce+0xc>
 80126ea:	212a      	movs	r1, #42	; 0x2a
 80126ec:	f002 bf46 	b.w	801557c <emac_eth_send>
 80126f0:	4770      	bx	lr
 80126f2:	bf00      	nop
 80126f4:	2000a304 	andcs	sl, r0, r4, lsl #6

080126f8 <arp_handle_request>:
 80126f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80126fa:	2204      	movs	r2, #4
 80126fc:	f100 0126 	add.w	r1, r0, #38	; 0x26
 8012700:	4604      	mov	r4, r0
 8012702:	eb0d 0002 	add.w	r0, sp, r2
 8012706:	f7ff ffe3 	bl	80126d0 <memcpy.isra.0>
 801270a:	4b0d      	ldr	r3, [pc, #52]	; (8012740 <arp_handle_request+0x48>)
 801270c:	9a01      	ldr	r2, [sp, #4]
 801270e:	69db      	ldr	r3, [r3, #28]
 8012710:	429a      	cmp	r2, r3
 8012712:	d113      	bne.n	801273c <arp_handle_request+0x44>
 8012714:	2206      	movs	r2, #6
 8012716:	4d0b      	ldr	r5, [pc, #44]	; (8012744 <arp_handle_request+0x4c>)
 8012718:	18a1      	adds	r1, r4, r2
 801271a:	4628      	mov	r0, r5
 801271c:	f7ff ffd8 	bl	80126d0 <memcpy.isra.0>
 8012720:	f104 0116 	add.w	r1, r4, #22
 8012724:	f105 0020 	add.w	r0, r5, #32
 8012728:	2206      	movs	r2, #6
 801272a:	f7ff ffd1 	bl	80126d0 <memcpy.isra.0>
 801272e:	69e3      	ldr	r3, [r4, #28]
 8012730:	212a      	movs	r1, #42	; 0x2a
 8012732:	4628      	mov	r0, r5
 8012734:	f8c5 3026 	str.w	r3, [r5, #38]	; 0x26
 8012738:	f002 ff20 	bl	801557c <emac_eth_send>
 801273c:	b003      	add	sp, #12
 801273e:	bd30      	pop	{r4, r5, pc}
 8012740:	2000a304 	andcs	sl, r0, r4, lsl #6
 8012744:	2000a330 	andcs	sl, r0, r0, lsr r3

08012748 <arp_handle_reply>:
 8012748:	69c1      	ldr	r1, [r0, #28]
 801274a:	3016      	adds	r0, #22
 801274c:	f000 b80a 	b.w	8012764 <arp_cache_update>

08012750 <arp_send_request>:
 8012750:	4b03      	ldr	r3, [pc, #12]	; (8012760 <arp_send_request+0x10>)
 8012752:	212a      	movs	r1, #42	; 0x2a
 8012754:	f8c3 0026 	str.w	r0, [r3, #38]	; 0x26
 8012758:	4618      	mov	r0, r3
 801275a:	f002 bf0f 	b.w	801557c <emac_eth_send>
 801275e:	bf00      	nop
 8012760:	2000a35c 	andcs	sl, r0, ip, asr r3

08012764 <arp_cache_update>:
 8012764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012766:	4e11      	ldr	r6, [pc, #68]	; (80127ac <arp_cache_update+0x48>)
 8012768:	8833      	ldrh	r3, [r6, #0]
 801276a:	2b20      	cmp	r3, #32
 801276c:	d018      	beq.n	80127a0 <arp_cache_update+0x3c>
 801276e:	2400      	movs	r4, #0
 8012770:	220c      	movs	r2, #12
 8012772:	4d0f      	ldr	r5, [pc, #60]	; (80127b0 <arp_cache_update+0x4c>)
 8012774:	b2a7      	uxth	r7, r4
 8012776:	42bb      	cmp	r3, r7
 8012778:	d80b      	bhi.n	8012792 <arp_cache_update+0x2e>
 801277a:	fb02 5203 	mla	r2, r2, r3, r5
 801277e:	1d84      	adds	r4, r0, #6
 8012780:	3203      	adds	r2, #3
 8012782:	42a0      	cmp	r0, r4
 8012784:	d10d      	bne.n	80127a2 <arp_cache_update+0x3e>
 8012786:	220c      	movs	r2, #12
 8012788:	435a      	muls	r2, r3
 801278a:	3301      	adds	r3, #1
 801278c:	50a9      	str	r1, [r5, r2]
 801278e:	8033      	strh	r3, [r6, #0]
 8012790:	e006      	b.n	80127a0 <arp_cache_update+0x3c>
 8012792:	3401      	adds	r4, #1
 8012794:	fb02 5704 	mla	r7, r2, r4, r5
 8012798:	f857 7c0c 	ldr.w	r7, [r7, #-12]
 801279c:	428f      	cmp	r7, r1
 801279e:	d1e9      	bne.n	8012774 <arp_cache_update+0x10>
 80127a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127a2:	f810 7b01 	ldrb.w	r7, [r0], #1
 80127a6:	f802 7f01 	strb.w	r7, [r2, #1]!
 80127aa:	e7ea      	b.n	8012782 <arp_cache_update+0x1e>
 80127ac:	2000a508 	andcs	sl, r0, r8, lsl #10
 80127b0:	2000a388 	andcs	sl, r0, r8, lsl #7

080127b4 <arp_cache_lookup>:
 80127b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127b8:	2200      	movs	r2, #0
 80127ba:	4606      	mov	r6, r0
 80127bc:	460c      	mov	r4, r1
 80127be:	200c      	movs	r0, #12
 80127c0:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8012848 <arp_cache_lookup+0x94>
 80127c4:	fb00 f302 	mul.w	r3, r0, r2
 80127c8:	f853 1008 	ldr.w	r1, [r3, r8]
 80127cc:	42b1      	cmp	r1, r6
 80127ce:	d10d      	bne.n	80127ec <arp_cache_lookup+0x38>
 80127d0:	3304      	adds	r3, #4
 80127d2:	4443      	add	r3, r8
 80127d4:	3c01      	subs	r4, #1
 80127d6:	1d9a      	adds	r2, r3, #6
 80127d8:	4293      	cmp	r3, r2
 80127da:	d102      	bne.n	80127e2 <arp_cache_lookup+0x2e>
 80127dc:	4630      	mov	r0, r6
 80127de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127e2:	f813 1b01 	ldrb.w	r1, [r3], #1
 80127e6:	f804 1f01 	strb.w	r1, [r4, #1]!
 80127ea:	e7f5      	b.n	80127d8 <arp_cache_lookup+0x24>
 80127ec:	b111      	cbz	r1, 80127f4 <arp_cache_lookup+0x40>
 80127ee:	3201      	adds	r2, #1
 80127f0:	2a20      	cmp	r2, #32
 80127f2:	d1e7      	bne.n	80127c4 <arp_cache_lookup+0x10>
 80127f4:	2704      	movs	r7, #4
 80127f6:	f8df a054 	ldr.w	sl, [pc, #84]	; 801284c <arp_cache_lookup+0x98>
 80127fa:	f8ba 5000 	ldrh.w	r5, [sl]
 80127fe:	3f01      	subs	r7, #1
 8012800:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8012804:	d101      	bne.n	801280a <arp_cache_lookup+0x56>
 8012806:	463e      	mov	r6, r7
 8012808:	e7e8      	b.n	80127dc <arp_cache_lookup+0x28>
 801280a:	4630      	mov	r0, r6
 801280c:	f7ff ffa0 	bl	8012750 <arp_send_request>
 8012810:	f44f 3900 	mov.w	r9, #131072	; 0x20000
 8012814:	f1b9 0901 	subs.w	r9, r9, #1
 8012818:	f8ba 3000 	ldrh.w	r3, [sl]
 801281c:	d011      	beq.n	8012842 <arp_cache_lookup+0x8e>
 801281e:	429d      	cmp	r5, r3
 8012820:	d00c      	beq.n	801283c <arp_cache_lookup+0x88>
 8012822:	230c      	movs	r3, #12
 8012824:	fb03 8505 	mla	r5, r3, r5, r8
 8012828:	3c01      	subs	r4, #1
 801282a:	1d2b      	adds	r3, r5, #4
 801282c:	350a      	adds	r5, #10
 801282e:	42ab      	cmp	r3, r5
 8012830:	d0d4      	beq.n	80127dc <arp_cache_lookup+0x28>
 8012832:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012836:	f804 2f01 	strb.w	r2, [r4, #1]!
 801283a:	e7f8      	b.n	801282e <arp_cache_lookup+0x7a>
 801283c:	f7f4 fe70 	bl	8007520 <net_handle>
 8012840:	e7e8      	b.n	8012814 <arp_cache_lookup+0x60>
 8012842:	429d      	cmp	r5, r3
 8012844:	d0db      	beq.n	80127fe <arp_cache_lookup+0x4a>
 8012846:	e7ec      	b.n	8012822 <arp_cache_lookup+0x6e>
 8012848:	2000a388 	andcs	sl, r0, r8, lsl #7
 801284c:	2000a508 	andcs	sl, r0, r8, lsl #10

08012850 <_parse_response>:
 8012850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012854:	2400      	movs	r4, #0
 8012856:	460d      	mov	r5, r1
 8012858:	46a3      	mov	fp, r4
 801285a:	4627      	mov	r7, r4
 801285c:	46a2      	mov	sl, r4
 801285e:	46a1      	mov	r9, r4
 8012860:	46a0      	mov	r8, r4
 8012862:	4e4f      	ldr	r6, [pc, #316]	; (80129a0 <_parse_response+0x150>)
 8012864:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8012868:	6833      	ldr	r3, [r6, #0]
 801286a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 801286e:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8012872:	9009      	str	r0, [sp, #36]	; 0x24
 8012874:	9402      	str	r4, [sp, #8]
 8012876:	9407      	str	r4, [sp, #28]
 8012878:	9308      	str	r3, [sp, #32]
 801287a:	f7f4 fe51 	bl	8007520 <net_handle>
 801287e:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8012882:	9300      	str	r3, [sp, #0]
 8012884:	f44f 7209 	mov.w	r2, #548	; 0x224
 8012888:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 801288c:	ab0c      	add	r3, sp, #48	; 0x30
 801288e:	a90d      	add	r1, sp, #52	; 0x34
 8012890:	f7fe fd76 	bl	8011380 <udp_recv>
 8012894:	2800      	cmp	r0, #0
 8012896:	d03e      	beq.n	8012916 <_parse_response+0xc6>
 8012898:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801289c:	2b43      	cmp	r3, #67	; 0x43
 801289e:	d13a      	bne.n	8012916 <_parse_response+0xc6>
 80128a0:	aa14      	add	r2, sp, #80	; 0x50
 80128a2:	1e6b      	subs	r3, r5, #1
 80128a4:	1d69      	adds	r1, r5, #5
 80128a6:	4299      	cmp	r1, r3
 80128a8:	d12f      	bne.n	801290a <_parse_response+0xba>
 80128aa:	2100      	movs	r1, #0
 80128ac:	ab0d      	add	r3, sp, #52	; 0x34
 80128ae:	181d      	adds	r5, r3, r0
 80128b0:	468c      	mov	ip, r1
 80128b2:	460e      	mov	r6, r1
 80128b4:	4608      	mov	r0, r1
 80128b6:	ab49      	add	r3, sp, #292	; 0x124
 80128b8:	42ab      	cmp	r3, r5
 80128ba:	d337      	bcc.n	801292c <_parse_response+0xdc>
 80128bc:	b141      	cbz	r1, 80128d0 <_parse_response+0x80>
 80128be:	4b39      	ldr	r3, [pc, #228]	; (80129a4 <_parse_response+0x154>)
 80128c0:	9a07      	ldr	r2, [sp, #28]
 80128c2:	f883 8003 	strb.w	r8, [r3, #3]
 80128c6:	709a      	strb	r2, [r3, #2]
 80128c8:	9a06      	ldr	r2, [sp, #24]
 80128ca:	705a      	strb	r2, [r3, #1]
 80128cc:	9a05      	ldr	r2, [sp, #20]
 80128ce:	701a      	strb	r2, [r3, #0]
 80128d0:	f1bc 0f00 	cmp.w	ip, #0
 80128d4:	d007      	beq.n	80128e6 <_parse_response+0x96>
 80128d6:	4b34      	ldr	r3, [pc, #208]	; (80129a8 <_parse_response+0x158>)
 80128d8:	9a04      	ldr	r2, [sp, #16]
 80128da:	705c      	strb	r4, [r3, #1]
 80128dc:	70da      	strb	r2, [r3, #3]
 80128de:	9a03      	ldr	r2, [sp, #12]
 80128e0:	709a      	strb	r2, [r3, #2]
 80128e2:	9a02      	ldr	r2, [sp, #8]
 80128e4:	701a      	strb	r2, [r3, #0]
 80128e6:	b13e      	cbz	r6, 80128f8 <_parse_response+0xa8>
 80128e8:	4b30      	ldr	r3, [pc, #192]	; (80129ac <_parse_response+0x15c>)
 80128ea:	70df      	strb	r7, [r3, #3]
 80128ec:	f883 a002 	strb.w	sl, [r3, #2]
 80128f0:	f883 9001 	strb.w	r9, [r3, #1]
 80128f4:	f883 b000 	strb.w	fp, [r3]
 80128f8:	2802      	cmp	r0, #2
 80128fa:	d102      	bne.n	8012902 <_parse_response+0xb2>
 80128fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80128fe:	4b2c      	ldr	r3, [pc, #176]	; (80129b0 <_parse_response+0x160>)
 8012900:	601a      	str	r2, [r3, #0]
 8012902:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 8012906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801290a:	f812 cb01 	ldrb.w	ip, [r2], #1
 801290e:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8012912:	45e6      	cmp	lr, ip
 8012914:	d0c7      	beq.n	80128a6 <_parse_response+0x56>
 8012916:	6833      	ldr	r3, [r6, #0]
 8012918:	9a08      	ldr	r2, [sp, #32]
 801291a:	1a9b      	subs	r3, r3, r2
 801291c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8012920:	d3ab      	bcc.n	801287a <_parse_response+0x2a>
 8012922:	2800      	cmp	r0, #0
 8012924:	d1c1      	bne.n	80128aa <_parse_response+0x5a>
 8012926:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801292a:	e7ea      	b.n	8012902 <_parse_response+0xb2>
 801292c:	781a      	ldrb	r2, [r3, #0]
 801292e:	2a35      	cmp	r2, #53	; 0x35
 8012930:	d011      	beq.n	8012956 <_parse_response+0x106>
 8012932:	d808      	bhi.n	8012946 <_parse_response+0xf6>
 8012934:	2a01      	cmp	r2, #1
 8012936:	d011      	beq.n	801295c <_parse_response+0x10c>
 8012938:	2a03      	cmp	r2, #3
 801293a:	d019      	beq.n	8012970 <_parse_response+0x120>
 801293c:	b14a      	cbz	r2, 8012952 <_parse_response+0x102>
 801293e:	1c9a      	adds	r2, r3, #2
 8012940:	785b      	ldrb	r3, [r3, #1]
 8012942:	4413      	add	r3, r2
 8012944:	e7b8      	b.n	80128b8 <_parse_response+0x68>
 8012946:	2a36      	cmp	r2, #54	; 0x36
 8012948:	d01f      	beq.n	801298a <_parse_response+0x13a>
 801294a:	2aff      	cmp	r2, #255	; 0xff
 801294c:	d1f7      	bne.n	801293e <_parse_response+0xee>
 801294e:	462b      	mov	r3, r5
 8012950:	e7b2      	b.n	80128b8 <_parse_response+0x68>
 8012952:	3301      	adds	r3, #1
 8012954:	e7b0      	b.n	80128b8 <_parse_response+0x68>
 8012956:	7898      	ldrb	r0, [r3, #2]
 8012958:	3303      	adds	r3, #3
 801295a:	e7ad      	b.n	80128b8 <_parse_response+0x68>
 801295c:	f893 b002 	ldrb.w	fp, [r3, #2]
 8012960:	f893 9003 	ldrb.w	r9, [r3, #3]
 8012964:	f893 a004 	ldrb.w	sl, [r3, #4]
 8012968:	795f      	ldrb	r7, [r3, #5]
 801296a:	4616      	mov	r6, r2
 801296c:	3306      	adds	r3, #6
 801296e:	e7a3      	b.n	80128b8 <_parse_response+0x68>
 8012970:	789a      	ldrb	r2, [r3, #2]
 8012972:	78dc      	ldrb	r4, [r3, #3]
 8012974:	9202      	str	r2, [sp, #8]
 8012976:	791a      	ldrb	r2, [r3, #4]
 8012978:	f04f 0c01 	mov.w	ip, #1
 801297c:	9203      	str	r2, [sp, #12]
 801297e:	795a      	ldrb	r2, [r3, #5]
 8012980:	9204      	str	r2, [sp, #16]
 8012982:	785a      	ldrb	r2, [r3, #1]
 8012984:	4413      	add	r3, r2
 8012986:	3302      	adds	r3, #2
 8012988:	e796      	b.n	80128b8 <_parse_response+0x68>
 801298a:	789a      	ldrb	r2, [r3, #2]
 801298c:	f893 8005 	ldrb.w	r8, [r3, #5]
 8012990:	9205      	str	r2, [sp, #20]
 8012992:	78da      	ldrb	r2, [r3, #3]
 8012994:	2101      	movs	r1, #1
 8012996:	9206      	str	r2, [sp, #24]
 8012998:	791a      	ldrb	r2, [r3, #4]
 801299a:	3306      	adds	r3, #6
 801299c:	9207      	str	r2, [sp, #28]
 801299e:	e78b      	b.n	80128b8 <_parse_response+0x68>
 80129a0:	2000a9dc 	ldrdcs	sl, [r0], -ip
 80129a4:	2000a73c 	andcs	sl, r0, ip, lsr r7
 80129a8:	2000a50c 	andcs	sl, r0, ip, lsl #10
 80129ac:	2000a514 	andcs	sl, r0, r4, lsl r5
 80129b0:	2000a510 	andcs	sl, r0, r0, lsl r5

080129b4 <memcpy.isra.0>:
 80129b4:	3801      	subs	r0, #1
 80129b6:	440a      	add	r2, r1
 80129b8:	4291      	cmp	r1, r2
 80129ba:	d100      	bne.n	80129be <memcpy.isra.0+0xa>
 80129bc:	4770      	bx	lr
 80129be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80129c2:	f800 3f01 	strb.w	r3, [r0, #1]!
 80129c6:	e7f7      	b.n	80129b8 <memcpy.isra.0+0x4>

080129c8 <dhcp_client>:
 80129c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129cc:	b087      	sub	sp, #28
 80129ce:	9203      	str	r2, [sp, #12]
 80129d0:	4a77      	ldr	r2, [pc, #476]	; (8012bb0 <dhcp_client+0x1e8>)
 80129d2:	460f      	mov	r7, r1
 80129d4:	4605      	mov	r5, r0
 80129d6:	f44f 7309 	mov.w	r3, #548	; 0x224
 80129da:	4614      	mov	r4, r2
 80129dc:	2100      	movs	r1, #0
 80129de:	3b01      	subs	r3, #1
 80129e0:	f802 1b01 	strb.w	r1, [r2], #1
 80129e4:	d1fb      	bne.n	80129de <dhcp_client+0x16>
 80129e6:	f240 1301 	movw	r3, #257	; 0x101
 80129ea:	2206      	movs	r2, #6
 80129ec:	4629      	mov	r1, r5
 80129ee:	4871      	ldr	r0, [pc, #452]	; (8012bb4 <dhcp_client+0x1ec>)
 80129f0:	8023      	strh	r3, [r4, #0]
 80129f2:	70a2      	strb	r2, [r4, #2]
 80129f4:	f7ff ffde 	bl	80129b4 <memcpy.isra.0>
 80129f8:	4b6f      	ldr	r3, [pc, #444]	; (8012bb8 <dhcp_client+0x1f0>)
 80129fa:	2044      	movs	r0, #68	; 0x44
 80129fc:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 8012a00:	f240 1335 	movw	r3, #309	; 0x135
 8012a04:	f8a4 30f0 	strh.w	r3, [r4, #240]	; 0xf0
 8012a08:	f7fe fc80 	bl	801130c <udp_bind>
 8012a0c:	1e06      	subs	r6, r0, #0
 8012a0e:	f2c0 80c9 	blt.w	8012ba4 <dhcp_client+0x1dc>
 8012a12:	f04f 0915 	mov.w	r9, #21
 8012a16:	f8df a198 	ldr.w	sl, [pc, #408]	; 8012bb0 <dhcp_client+0x1e8>
 8012a1a:	f1b9 0901 	subs.w	r9, r9, #1
 8012a1e:	d11f      	bne.n	8012a60 <dhcp_client+0x98>
 8012a20:	464c      	mov	r4, r9
 8012a22:	2044      	movs	r0, #68	; 0x44
 8012a24:	f7fe fc8c 	bl	8011340 <udp_unbind>
 8012a28:	2c00      	cmp	r4, #0
 8012a2a:	f000 80be 	beq.w	8012baa <dhcp_client+0x1e2>
 8012a2e:	2204      	movs	r2, #4
 8012a30:	4962      	ldr	r1, [pc, #392]	; (8012bbc <dhcp_client+0x1f4>)
 8012a32:	a805      	add	r0, sp, #20
 8012a34:	f7ff ffbe 	bl	80129b4 <memcpy.isra.0>
 8012a38:	9b05      	ldr	r3, [sp, #20]
 8012a3a:	2204      	movs	r2, #4
 8012a3c:	4960      	ldr	r1, [pc, #384]	; (8012bc0 <dhcp_client+0x1f8>)
 8012a3e:	603b      	str	r3, [r7, #0]
 8012a40:	a805      	add	r0, sp, #20
 8012a42:	f7ff ffb7 	bl	80129b4 <memcpy.isra.0>
 8012a46:	9b05      	ldr	r3, [sp, #20]
 8012a48:	a805      	add	r0, sp, #20
 8012a4a:	60bb      	str	r3, [r7, #8]
 8012a4c:	2204      	movs	r2, #4
 8012a4e:	495d      	ldr	r1, [pc, #372]	; (8012bc4 <dhcp_client+0x1fc>)
 8012a50:	f7ff ffb0 	bl	80129b4 <memcpy.isra.0>
 8012a54:	2000      	movs	r0, #0
 8012a56:	9b05      	ldr	r3, [sp, #20]
 8012a58:	607b      	str	r3, [r7, #4]
 8012a5a:	b007      	add	sp, #28
 8012a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a60:	f643 5301 	movw	r3, #15617	; 0x3d01
 8012a64:	f240 1807 	movw	r8, #263	; 0x107
 8012a68:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 8012a6c:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 8012a70:	782b      	ldrb	r3, [r5, #0]
 8012a72:	4a55      	ldr	r2, [pc, #340]	; (8012bc8 <dhcp_client+0x200>)
 8012a74:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 8012a78:	786b      	ldrb	r3, [r5, #1]
 8012a7a:	fa5f fb86 	uxtb.w	fp, r6
 8012a7e:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 8012a82:	78ab      	ldrb	r3, [r5, #2]
 8012a84:	4651      	mov	r1, sl
 8012a86:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 8012a8a:	78eb      	ldrb	r3, [r5, #3]
 8012a8c:	4658      	mov	r0, fp
 8012a8e:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 8012a92:	792b      	ldrb	r3, [r5, #4]
 8012a94:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 8012a98:	796b      	ldrb	r3, [r5, #5]
 8012a9a:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 8012a9e:	4b4b      	ldr	r3, [pc, #300]	; (8012bcc <dhcp_client+0x204>)
 8012aa0:	e9c4 233f 	strd	r2, r3, [r4, #252]	; 0xfc
 8012aa4:	23ff      	movs	r3, #255	; 0xff
 8012aa6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8012aaa:	2343      	movs	r3, #67	; 0x43
 8012aac:	f240 1205 	movw	r2, #261	; 0x105
 8012ab0:	9300      	str	r3, [sp, #0]
 8012ab2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012ab6:	f7fe fcbf 	bl	8011438 <udp_send>
 8012aba:	4629      	mov	r1, r5
 8012abc:	4630      	mov	r0, r6
 8012abe:	f7ff fec7 	bl	8012850 <_parse_response>
 8012ac2:	2802      	cmp	r0, #2
 8012ac4:	d1a9      	bne.n	8012a1a <dhcp_client+0x52>
 8012ac6:	f643 5303 	movw	r3, #15619	; 0x3d03
 8012aca:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 8012ace:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 8012ad2:	782b      	ldrb	r3, [r5, #0]
 8012ad4:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8012bd0 <dhcp_client+0x208>
 8012ad8:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 8012adc:	786b      	ldrb	r3, [r5, #1]
 8012ade:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 8012ae2:	78ab      	ldrb	r3, [r5, #2]
 8012ae4:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 8012ae8:	78eb      	ldrb	r3, [r5, #3]
 8012aea:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 8012aee:	792b      	ldrb	r3, [r5, #4]
 8012af0:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 8012af4:	796b      	ldrb	r3, [r5, #5]
 8012af6:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 8012afa:	f240 4332 	movw	r3, #1074	; 0x432
 8012afe:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
 8012b02:	4b2e      	ldr	r3, [pc, #184]	; (8012bbc <dhcp_client+0x1f4>)
 8012b04:	881a      	ldrh	r2, [r3, #0]
 8012b06:	885b      	ldrh	r3, [r3, #2]
 8012b08:	f8a4 20fe 	strh.w	r2, [r4, #254]	; 0xfe
 8012b0c:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 8012b10:	f240 4336 	movw	r3, #1078	; 0x436
 8012b14:	f8a4 3102 	strh.w	r3, [r4, #258]	; 0x102
 8012b18:	4b2e      	ldr	r3, [pc, #184]	; (8012bd4 <dhcp_client+0x20c>)
 8012b1a:	221e      	movs	r2, #30
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 8012b22:	230c      	movs	r3, #12
 8012b24:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
 8012b28:	9b03      	ldr	r3, [sp, #12]
 8012b2a:	1e58      	subs	r0, r3, #1
 8012b2c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8012b30:	f1a2 0e1e 	sub.w	lr, r2, #30
 8012b34:	1c51      	adds	r1, r2, #1
 8012b36:	bb8b      	cbnz	r3, 8012b9c <dhcp_client+0x1d4>
 8012b38:	2037      	movs	r0, #55	; 0x37
 8012b3a:	18a3      	adds	r3, r4, r2
 8012b3c:	f883 00ec 	strb.w	r0, [r3, #236]	; 0xec
 8012b40:	2006      	movs	r0, #6
 8012b42:	4421      	add	r1, r4
 8012b44:	f881 00ec 	strb.w	r0, [r1, #236]	; 0xec
 8012b48:	2103      	movs	r1, #3
 8012b4a:	f883 10ef 	strb.w	r1, [r3, #239]	; 0xef
 8012b4e:	210f      	movs	r1, #15
 8012b50:	f883 10f1 	strb.w	r1, [r3, #241]	; 0xf1
 8012b54:	213a      	movs	r1, #58	; 0x3a
 8012b56:	f883 10f2 	strb.w	r1, [r3, #242]	; 0xf2
 8012b5a:	213b      	movs	r1, #59	; 0x3b
 8012b5c:	f04f 0801 	mov.w	r8, #1
 8012b60:	f883 10f3 	strb.w	r1, [r3, #243]	; 0xf3
 8012b64:	21ff      	movs	r1, #255	; 0xff
 8012b66:	f883 00f0 	strb.w	r0, [r3, #240]	; 0xf0
 8012b6a:	f883 10f4 	strb.w	r1, [r3, #244]	; 0xf4
 8012b6e:	f883 80ee 	strb.w	r8, [r3, #238]	; 0xee
 8012b72:	2343      	movs	r3, #67	; 0x43
 8012b74:	32f5      	adds	r2, #245	; 0xf5
 8012b76:	f884 e109 	strb.w	lr, [r4, #265]	; 0x109
 8012b7a:	4651      	mov	r1, sl
 8012b7c:	9300      	str	r3, [sp, #0]
 8012b7e:	b292      	uxth	r2, r2
 8012b80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012b84:	4658      	mov	r0, fp
 8012b86:	f7fe fc57 	bl	8011438 <udp_send>
 8012b8a:	4629      	mov	r1, r5
 8012b8c:	4630      	mov	r0, r6
 8012b8e:	f7ff fe5f 	bl	8012850 <_parse_response>
 8012b92:	2805      	cmp	r0, #5
 8012b94:	f47f af41 	bne.w	8012a1a <dhcp_client+0x52>
 8012b98:	4644      	mov	r4, r8
 8012b9a:	e742      	b.n	8012a22 <dhcp_client+0x5a>
 8012b9c:	460a      	mov	r2, r1
 8012b9e:	f80c 3b01 	strb.w	r3, [ip], #1
 8012ba2:	e7c3      	b.n	8012b2c <dhcp_client+0x164>
 8012ba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012ba8:	e757      	b.n	8012a5a <dhcp_client+0x92>
 8012baa:	f06f 0001 	mvn.w	r0, #1
 8012bae:	e754      	b.n	8012a5a <dhcp_client+0x92>
 8012bb0:	2000a518 	andcs	sl, r0, r8, lsl r5
 8012bb4:	2000a534 	andcs	sl, r0, r4, lsr r5
 8012bb8:	63538263 	cmpvs	r3, #805306374	; 0x30000006
 8012bbc:	2000a510 	andcs	sl, r0, r0, lsl r5
 8012bc0:	2000a50c 	andcs	sl, r0, ip, lsl #10
 8012bc4:	2000a514 	andcs	sl, r0, r4, lsl r5
 8012bc8:	03010637 	movweq	r0, #5687	; 0x1637
 8012bcc:	3b3a0f06 	blcc	8e967ec <__exidx_end+0xe7da20>
 8012bd0:	2000a622 	andcs	sl, r0, r2, lsr #12
 8012bd4:	2000a73c 	andcs	sl, r0, ip, lsr r7

08012bd8 <dhcp_client_release>:
 8012bd8:	b507      	push	{r0, r1, r2, lr}
 8012bda:	2044      	movs	r0, #68	; 0x44
 8012bdc:	f7fe fb96 	bl	801130c <udp_bind>
 8012be0:	f243 6307 	movw	r3, #13831	; 0x3607
 8012be4:	4911      	ldr	r1, [pc, #68]	; (8012c2c <dhcp_client_release+0x54>)
 8012be6:	b2c0      	uxtb	r0, r0
 8012be8:	f8a1 30f2 	strh.w	r3, [r1, #242]	; 0xf2
 8012bec:	2304      	movs	r3, #4
 8012bee:	f881 30f4 	strb.w	r3, [r1, #244]	; 0xf4
 8012bf2:	4b0f      	ldr	r3, [pc, #60]	; (8012c30 <dhcp_client_release+0x58>)
 8012bf4:	781a      	ldrb	r2, [r3, #0]
 8012bf6:	f881 20f5 	strb.w	r2, [r1, #245]	; 0xf5
 8012bfa:	785a      	ldrb	r2, [r3, #1]
 8012bfc:	f881 20f6 	strb.w	r2, [r1, #246]	; 0xf6
 8012c00:	789a      	ldrb	r2, [r3, #2]
 8012c02:	78db      	ldrb	r3, [r3, #3]
 8012c04:	f881 20f7 	strb.w	r2, [r1, #247]	; 0xf7
 8012c08:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
 8012c0c:	23ff      	movs	r3, #255	; 0xff
 8012c0e:	f881 30f9 	strb.w	r3, [r1, #249]	; 0xf9
 8012c12:	2343      	movs	r3, #67	; 0x43
 8012c14:	22fa      	movs	r2, #250	; 0xfa
 8012c16:	9300      	str	r3, [sp, #0]
 8012c18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012c1c:	f7fe fc0c 	bl	8011438 <udp_send>
 8012c20:	2044      	movs	r0, #68	; 0x44
 8012c22:	b003      	add	sp, #12
 8012c24:	f85d eb04 	ldr.w	lr, [sp], #4
 8012c28:	f7fe bb8a 	b.w	8011340 <udp_unbind>
 8012c2c:	2000a518 	andcs	sl, r0, r8, lsl r5
 8012c30:	2000a73c 	andcs	sl, r0, ip, lsr r7

08012c34 <memcpy.isra.0>:
 8012c34:	3801      	subs	r0, #1
 8012c36:	440a      	add	r2, r1
 8012c38:	4291      	cmp	r1, r2
 8012c3a:	d100      	bne.n	8012c3e <memcpy.isra.0+0xa>
 8012c3c:	4770      	bx	lr
 8012c3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012c42:	f800 3f01 	strb.w	r3, [r0, #1]!
 8012c46:	e7f7      	b.n	8012c38 <memcpy.isra.0+0x4>

08012c48 <_send_report>:
 8012c48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012c4a:	491c      	ldr	r1, [pc, #112]	; (8012cbc <_send_report+0x74>)
 8012c4c:	4c1c      	ldr	r4, [pc, #112]	; (8012cc0 <_send_report+0x78>)
 8012c4e:	f3c0 2306 	ubfx	r3, r0, #8, #7
 8012c52:	9001      	str	r0, [sp, #4]
 8012c54:	70cb      	strb	r3, [r1, #3]
 8012c56:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8012c5a:	f3c0 6007 	ubfx	r0, r0, #24, #8
 8012c5e:	710b      	strb	r3, [r1, #4]
 8012c60:	7148      	strb	r0, [r1, #5]
 8012c62:	2206      	movs	r2, #6
 8012c64:	4620      	mov	r0, r4
 8012c66:	f7ff ffe5 	bl	8012c34 <memcpy.isra.0>
 8012c6a:	2204      	movs	r2, #4
 8012c6c:	2700      	movs	r7, #0
 8012c6e:	4d15      	ldr	r5, [pc, #84]	; (8012cc4 <_send_report+0x7c>)
 8012c70:	eb0d 0102 	add.w	r1, sp, r2
 8012c74:	882b      	ldrh	r3, [r5, #0]
 8012c76:	f104 001e 	add.w	r0, r4, #30
 8012c7a:	f104 060e 	add.w	r6, r4, #14
 8012c7e:	8263      	strh	r3, [r4, #18]
 8012c80:	f7ff ffd8 	bl	8012c34 <memcpy.isra.0>
 8012c84:	2118      	movs	r1, #24
 8012c86:	4630      	mov	r0, r6
 8012c88:	8327      	strh	r7, [r4, #24]
 8012c8a:	f000 f8c6 	bl	8012e1a <net_chksum>
 8012c8e:	2204      	movs	r2, #4
 8012c90:	8320      	strh	r0, [r4, #24]
 8012c92:	eb0d 0102 	add.w	r1, sp, r2
 8012c96:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 8012c9a:	f7ff ffcb 	bl	8012c34 <memcpy.isra.0>
 8012c9e:	2120      	movs	r1, #32
 8012ca0:	4630      	mov	r0, r6
 8012ca2:	8527      	strh	r7, [r4, #40]	; 0x28
 8012ca4:	f000 f8b9 	bl	8012e1a <net_chksum>
 8012ca8:	212e      	movs	r1, #46	; 0x2e
 8012caa:	8520      	strh	r0, [r4, #40]	; 0x28
 8012cac:	4620      	mov	r0, r4
 8012cae:	f002 fc65 	bl	801557c <emac_eth_send>
 8012cb2:	882b      	ldrh	r3, [r5, #0]
 8012cb4:	3301      	adds	r3, #1
 8012cb6:	802b      	strh	r3, [r5, #0]
 8012cb8:	b003      	add	sp, #12
 8012cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012cbc:	2000a898 	mulcs	r0, r8, r8
 8012cc0:	2000a8a0 	andcs	sl, r0, r0, lsr #17
 8012cc4:	2000a860 	andcs	sl, r0, r0, ror #16

08012cc8 <igmp_set_ip>:
 8012cc8:	b507      	push	{r0, r1, r2, lr}
 8012cca:	2204      	movs	r2, #4
 8012ccc:	6803      	ldr	r3, [r0, #0]
 8012cce:	eb0d 0102 	add.w	r1, sp, r2
 8012cd2:	4806      	ldr	r0, [pc, #24]	; (8012cec <igmp_set_ip+0x24>)
 8012cd4:	9301      	str	r3, [sp, #4]
 8012cd6:	f7ff ffad 	bl	8012c34 <memcpy.isra.0>
 8012cda:	2204      	movs	r2, #4
 8012cdc:	4804      	ldr	r0, [pc, #16]	; (8012cf0 <igmp_set_ip+0x28>)
 8012cde:	eb0d 0102 	add.w	r1, sp, r2
 8012ce2:	f7ff ffa7 	bl	8012c34 <memcpy.isra.0>
 8012ce6:	b003      	add	sp, #12
 8012ce8:	f85d fb04 	ldr.w	pc, [sp], #4
 8012cec:	2000a8ba 			; <UNDEFINED> instruction: 0x2000a8ba
 8012cf0:	2000a882 	andcs	sl, r0, r2, lsl #17

08012cf4 <igmp_timer>:
 8012cf4:	b570      	push	{r4, r5, r6, lr}
 8012cf6:	2500      	movs	r5, #0
 8012cf8:	2602      	movs	r6, #2
 8012cfa:	4c0a      	ldr	r4, [pc, #40]	; (8012d24 <igmp_timer+0x30>)
 8012cfc:	7963      	ldrb	r3, [r4, #5]
 8012cfe:	2b01      	cmp	r3, #1
 8012d00:	d109      	bne.n	8012d16 <igmp_timer+0x22>
 8012d02:	7923      	ldrb	r3, [r4, #4]
 8012d04:	b13b      	cbz	r3, 8012d16 <igmp_timer+0x22>
 8012d06:	3b01      	subs	r3, #1
 8012d08:	b2db      	uxtb	r3, r3
 8012d0a:	7123      	strb	r3, [r4, #4]
 8012d0c:	b91b      	cbnz	r3, 8012d16 <igmp_timer+0x22>
 8012d0e:	6820      	ldr	r0, [r4, #0]
 8012d10:	f7ff ff9a 	bl	8012c48 <_send_report>
 8012d14:	7166      	strb	r6, [r4, #5]
 8012d16:	3501      	adds	r5, #1
 8012d18:	2d24      	cmp	r5, #36	; 0x24
 8012d1a:	f104 0408 	add.w	r4, r4, #8
 8012d1e:	d1ed      	bne.n	8012cfc <igmp_timer+0x8>
 8012d20:	bd70      	pop	{r4, r5, r6, pc}
 8012d22:	bf00      	nop
 8012d24:	2000a740 	andcs	sl, r0, r0, asr #14

08012d28 <igmp_join>:
 8012d28:	b538      	push	{r3, r4, r5, lr}
 8012d2a:	f000 03e0 	and.w	r3, r0, #224	; 0xe0
 8012d2e:	2be0      	cmp	r3, #224	; 0xe0
 8012d30:	d11b      	bne.n	8012d6a <igmp_join+0x42>
 8012d32:	4911      	ldr	r1, [pc, #68]	; (8012d78 <igmp_join+0x50>)
 8012d34:	680c      	ldr	r4, [r1, #0]
 8012d36:	2c24      	cmp	r4, #36	; 0x24
 8012d38:	d01a      	beq.n	8012d70 <igmp_join+0x48>
 8012d3a:	2300      	movs	r3, #0
 8012d3c:	4a0f      	ldr	r2, [pc, #60]	; (8012d7c <igmp_join+0x54>)
 8012d3e:	429c      	cmp	r4, r3
 8012d40:	dc0d      	bgt.n	8012d5e <igmp_join+0x36>
 8012d42:	f44f 7381 	mov.w	r3, #258	; 0x102
 8012d46:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
 8012d4a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8012d4e:	8093      	strh	r3, [r2, #4]
 8012d50:	1c63      	adds	r3, r4, #1
 8012d52:	600b      	str	r3, [r1, #0]
 8012d54:	f7ff ff78 	bl	8012c48 <_send_report>
 8012d58:	4623      	mov	r3, r4
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	bd38      	pop	{r3, r4, r5, pc}
 8012d5e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8012d62:	4285      	cmp	r5, r0
 8012d64:	d0f9      	beq.n	8012d5a <igmp_join+0x32>
 8012d66:	3301      	adds	r3, #1
 8012d68:	e7e9      	b.n	8012d3e <igmp_join+0x16>
 8012d6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012d6e:	e7f4      	b.n	8012d5a <igmp_join+0x32>
 8012d70:	f06f 0301 	mvn.w	r3, #1
 8012d74:	e7f1      	b.n	8012d5a <igmp_join+0x32>
 8012d76:	bf00      	nop
 8012d78:	2000a864 	andcs	sl, r0, r4, ror #16
 8012d7c:	2000a740 	andcs	sl, r0, r0, asr #14

08012d80 <igmp_leave>:
 8012d80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012d84:	2600      	movs	r6, #0
 8012d86:	4f1c      	ldr	r7, [pc, #112]	; (8012df8 <igmp_leave+0x78>)
 8012d88:	f857 3036 	ldr.w	r3, [r7, r6, lsl #3]
 8012d8c:	4283      	cmp	r3, r0
 8012d8e:	d007      	beq.n	8012da0 <igmp_leave+0x20>
 8012d90:	3601      	adds	r6, #1
 8012d92:	2e24      	cmp	r6, #36	; 0x24
 8012d94:	d1f8      	bne.n	8012d88 <igmp_leave+0x8>
 8012d96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012d9a:	b002      	add	sp, #8
 8012d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012da0:	2400      	movs	r4, #0
 8012da2:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8012dfc <igmp_leave+0x7c>
 8012da6:	4d16      	ldr	r5, [pc, #88]	; (8012e00 <igmp_leave+0x80>)
 8012da8:	f8b8 3000 	ldrh.w	r3, [r8]
 8012dac:	2118      	movs	r1, #24
 8012dae:	9001      	str	r0, [sp, #4]
 8012db0:	4814      	ldr	r0, [pc, #80]	; (8012e04 <igmp_leave+0x84>)
 8012db2:	826b      	strh	r3, [r5, #18]
 8012db4:	832c      	strh	r4, [r5, #24]
 8012db6:	f000 f830 	bl	8012e1a <net_chksum>
 8012dba:	2204      	movs	r2, #4
 8012dbc:	8328      	strh	r0, [r5, #24]
 8012dbe:	eb0d 0102 	add.w	r1, sp, r2
 8012dc2:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 8012dc6:	f7ff ff35 	bl	8012c34 <memcpy.isra.0>
 8012dca:	2120      	movs	r1, #32
 8012dcc:	f105 000e 	add.w	r0, r5, #14
 8012dd0:	852c      	strh	r4, [r5, #40]	; 0x28
 8012dd2:	f000 f822 	bl	8012e1a <net_chksum>
 8012dd6:	212e      	movs	r1, #46	; 0x2e
 8012dd8:	8528      	strh	r0, [r5, #40]	; 0x28
 8012dda:	4628      	mov	r0, r5
 8012ddc:	f002 fbce 	bl	801557c <emac_eth_send>
 8012de0:	f8b8 3000 	ldrh.w	r3, [r8]
 8012de4:	f847 4036 	str.w	r4, [r7, r6, lsl #3]
 8012de8:	3301      	adds	r3, #1
 8012dea:	eb07 07c6 	add.w	r7, r7, r6, lsl #3
 8012dee:	4620      	mov	r0, r4
 8012df0:	f8a8 3000 	strh.w	r3, [r8]
 8012df4:	80bc      	strh	r4, [r7, #4]
 8012df6:	e7d0      	b.n	8012d9a <igmp_leave+0x1a>
 8012df8:	2000a740 	andcs	sl, r0, r0, asr #14
 8012dfc:	2000a860 	andcs	sl, r0, r0, ror #16
 8012e00:	2000a868 	andcs	sl, r0, r8, ror #16
 8012e04:	2000a8ae 	andcs	sl, r0, lr, lsr #17

08012e08 <ip_set_ip>:
 8012e08:	b510      	push	{r4, lr}
 8012e0a:	4604      	mov	r4, r0
 8012e0c:	f7fe fa5e 	bl	80112cc <udp_set_ip>
 8012e10:	4620      	mov	r0, r4
 8012e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e16:	f7ff bf57 	b.w	8012cc8 <igmp_set_ip>

08012e1a <net_chksum>:
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	f021 0201 	bic.w	r2, r1, #1
 8012e20:	b530      	push	{r4, r5, lr}
 8012e22:	1884      	adds	r4, r0, r2
 8012e24:	42a0      	cmp	r0, r4
 8012e26:	d10b      	bne.n	8012e40 <net_chksum+0x26>
 8012e28:	4291      	cmp	r1, r2
 8012e2a:	d004      	beq.n	8012e36 <net_chksum+0x1c>
 8012e2c:	7802      	ldrb	r2, [r0, #0]
 8012e2e:	0212      	lsls	r2, r2, #8
 8012e30:	ba52      	rev16	r2, r2
 8012e32:	b292      	uxth	r2, r2
 8012e34:	4413      	add	r3, r2
 8012e36:	0c1a      	lsrs	r2, r3, #16
 8012e38:	d106      	bne.n	8012e48 <net_chksum+0x2e>
 8012e3a:	43d8      	mvns	r0, r3
 8012e3c:	b280      	uxth	r0, r0
 8012e3e:	bd30      	pop	{r4, r5, pc}
 8012e40:	f830 5b02 	ldrh.w	r5, [r0], #2
 8012e44:	442b      	add	r3, r5
 8012e46:	e7ed      	b.n	8012e24 <net_chksum+0xa>
 8012e48:	b29b      	uxth	r3, r3
 8012e4a:	e7f3      	b.n	8012e34 <net_chksum+0x1a>

08012e4c <memcpy.isra.0>:
 8012e4c:	3801      	subs	r0, #1
 8012e4e:	440a      	add	r2, r1
 8012e50:	4291      	cmp	r1, r2
 8012e52:	d100      	bne.n	8012e56 <memcpy.isra.0+0xa>
 8012e54:	4770      	bx	lr
 8012e56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012e5a:	f800 3f01 	strb.w	r3, [r0, #1]!
 8012e5e:	e7f7      	b.n	8012e50 <memcpy.isra.0+0x4>

08012e60 <Display::Write(unsigned char, char const*) [clone .isra.0]>:
 8012e60:	b430      	push	{r4, r5}
 8012e62:	b168      	cbz	r0, 8012e80 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x20>
 8012e64:	2300      	movs	r3, #0
 8012e66:	7905      	ldrb	r5, [r0, #4]
 8012e68:	5cd4      	ldrb	r4, [r2, r3]
 8012e6a:	b11c      	cbz	r4, 8012e74 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x14>
 8012e6c:	1c5c      	adds	r4, r3, #1
 8012e6e:	429d      	cmp	r5, r3
 8012e70:	4623      	mov	r3, r4
 8012e72:	dcf9      	bgt.n	8012e68 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x8>
 8012e74:	6804      	ldr	r4, [r0, #0]
 8012e76:	b2db      	uxtb	r3, r3
 8012e78:	69e4      	ldr	r4, [r4, #28]
 8012e7a:	46a4      	mov	ip, r4
 8012e7c:	bc30      	pop	{r4, r5}
 8012e7e:	4760      	bx	ip
 8012e80:	bc30      	pop	{r4, r5}
 8012e82:	4770      	bx	lr

08012e84 <Display::ClearLine(unsigned char) [clone .isra.0]>:
 8012e84:	b110      	cbz	r0, 8012e8c <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 8012e86:	6803      	ldr	r3, [r0, #0]
 8012e88:	691b      	ldr	r3, [r3, #16]
 8012e8a:	4718      	bx	r3
 8012e8c:	4770      	bx	lr

08012e8e <Display::Status(Display7SegmentMessage)>:
 8012e8e:	7c43      	ldrb	r3, [r0, #17]
 8012e90:	b513      	push	{r0, r1, r4, lr}
 8012e92:	4604      	mov	r4, r0
 8012e94:	b19b      	cbz	r3, 8012ebe <Display::Status(Display7SegmentMessage)+0x30>
 8012e96:	43c9      	mvns	r1, r1
 8012e98:	2312      	movs	r3, #18
 8012e9a:	7a00      	ldrb	r0, [r0, #8]
 8012e9c:	f88d 3004 	strb.w	r3, [sp, #4]
 8012ea0:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8012ea4:	f88d 1006 	strb.w	r1, [sp, #6]
 8012ea8:	f88d 3005 	strb.w	r3, [sp, #5]
 8012eac:	f002 fbfe 	bl	80156ac <gd32_i2c_set_address(unsigned char)>
 8012eb0:	68e0      	ldr	r0, [r4, #12]
 8012eb2:	f002 fbf3 	bl	801569c <gd32_i2c_set_baudrate(unsigned int)>
 8012eb6:	2103      	movs	r1, #3
 8012eb8:	a801      	add	r0, sp, #4
 8012eba:	f002 fbfd 	bl	80156b8 <gd32_i2c_write(char const*, unsigned int)>
 8012ebe:	b002      	add	sp, #8
 8012ec0:	bd10      	pop	{r4, pc}
	...

08012ec4 <DisplayUdf::DisplayUdf()>:
 8012ec4:	b510      	push	{r4, lr}
 8012ec6:	4604      	mov	r4, r0
 8012ec8:	f000 fff0 	bl	8013eac <Display::Display()>
 8012ecc:	2202      	movs	r2, #2
 8012ece:	2300      	movs	r3, #0
 8012ed0:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
 8012ed4:	4b05      	ldr	r3, [pc, #20]	; (8012eec <DisplayUdf::DisplayUdf()+0x28>)
 8012ed6:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8012eda:	601c      	str	r4, [r3, #0]
 8012edc:	2301      	movs	r3, #1
 8012ede:	f802 3b01 	strb.w	r3, [r2], #1
 8012ee2:	3301      	adds	r3, #1
 8012ee4:	2b15      	cmp	r3, #21
 8012ee6:	d1fa      	bne.n	8012ede <DisplayUdf::DisplayUdf()+0x1a>
 8012ee8:	4620      	mov	r0, r4
 8012eea:	bd10      	pop	{r4, pc}
 8012eec:	2000a8d0 	ldrdcs	sl, [r0], -r0

08012ef0 <DisplayUdf::SetTitle(char const*, ...)>:
 8012ef0:	b40e      	push	{r1, r2, r3}
 8012ef2:	b517      	push	{r0, r1, r2, r4, lr}
 8012ef4:	ab05      	add	r3, sp, #20
 8012ef6:	f853 2b04 	ldr.w	r2, [r3], #4
 8012efa:	4604      	mov	r4, r0
 8012efc:	211f      	movs	r1, #31
 8012efe:	301c      	adds	r0, #28
 8012f00:	9301      	str	r3, [sp, #4]
 8012f02:	f7f6 fa87 	bl	8009414 <vsnprintf>
 8012f06:	2300      	movs	r3, #0
 8012f08:	4404      	add	r4, r0
 8012f0a:	7723      	strb	r3, [r4, #28]
 8012f0c:	b003      	add	sp, #12
 8012f0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f12:	b003      	add	sp, #12
 8012f14:	4770      	bx	lr
	...

08012f18 <DisplayUdf::ShowEmacStart()>:
 8012f18:	b510      	push	{r4, lr}
 8012f1a:	4604      	mov	r4, r0
 8012f1c:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 8012f20:	6980      	ldr	r0, [r0, #24]
 8012f22:	f7ff ffaf 	bl	8012e84 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8012f26:	4620      	mov	r0, r4
 8012f28:	4a02      	ldr	r2, [pc, #8]	; (8012f34 <DisplayUdf::ShowEmacStart()+0x1c>)
 8012f2a:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8012f2e:	f7f5 fbe9 	bl	8008704 <Display::Printf(unsigned char, char const*, ...)>
 8012f32:	bd10      	pop	{r4, pc}
 8012f34:	080185bb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r8, sl, pc}

08012f38 <DisplayUdf::ShowIpAddress()>:
 8012f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f3c:	4604      	mov	r4, r0
 8012f3e:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 8012f42:	b086      	sub	sp, #24
 8012f44:	6980      	ldr	r0, [r0, #24]
 8012f46:	f7ff ff9d 	bl	8012e84 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8012f4a:	4b13      	ldr	r3, [pc, #76]	; (8012f98 <DisplayUdf::ShowIpAddress()+0x60>)
 8012f4c:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
 8012f50:	681d      	ldr	r5, [r3, #0]
 8012f52:	69a8      	ldr	r0, [r5, #24]
 8012f54:	692e      	ldr	r6, [r5, #16]
 8012f56:	f003 fcd1 	bl	80168fc <__popcountsi2>
 8012f5a:	78eb      	ldrb	r3, [r5, #3]
 8012f5c:	fa5f f886 	uxtb.w	r8, r6
 8012f60:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8012f64:	f3c6 4a07 	ubfx	sl, r6, #16, #8
 8012f68:	0e36      	lsrs	r6, r6, #24
 8012f6a:	b99b      	cbnz	r3, 8012f94 <DisplayUdf::ShowIpAddress()+0x5c>
 8012f6c:	786b      	ldrb	r3, [r5, #1]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	bf14      	ite	ne
 8012f72:	2244      	movne	r2, #68	; 0x44
 8012f74:	2253      	moveq	r2, #83	; 0x53
 8012f76:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8012f7a:	4643      	mov	r3, r8
 8012f7c:	4639      	mov	r1, r7
 8012f7e:	4620      	mov	r0, r4
 8012f80:	e9cd a601 	strd	sl, r6, [sp, #4]
 8012f84:	4a05      	ldr	r2, [pc, #20]	; (8012f9c <DisplayUdf::ShowIpAddress()+0x64>)
 8012f86:	f8cd 9000 	str.w	r9, [sp]
 8012f8a:	f7f5 fbbb 	bl	8008704 <Display::Printf(unsigned char, char const*, ...)>
 8012f8e:	b006      	add	sp, #24
 8012f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f94:	225a      	movs	r2, #90	; 0x5a
 8012f96:	e7ee      	b.n	8012f76 <DisplayUdf::ShowIpAddress()+0x3e>
 8012f98:	2000a2a0 	andcs	sl, r0, r0, lsr #5
 8012f9c:	080185ca 	stmdaeq	r1, {r1, r3, r6, r7, r8, sl, pc}

08012fa0 <DisplayUdf::ShowNetmask()>:
 8012fa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012fa2:	4604      	mov	r4, r0
 8012fa4:	4b0b      	ldr	r3, [pc, #44]	; (8012fd4 <DisplayUdf::ShowNetmask()+0x34>)
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	699b      	ldr	r3, [r3, #24]
 8012faa:	0e1a      	lsrs	r2, r3, #24
 8012fac:	9202      	str	r2, [sp, #8]
 8012fae:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8012fb2:	9201      	str	r2, [sp, #4]
 8012fb4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012fb8:	9200      	str	r2, [sp, #0]
 8012fba:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 8012fbe:	4a06      	ldr	r2, [pc, #24]	; (8012fd8 <DisplayUdf::ShowNetmask()+0x38>)
 8012fc0:	b2db      	uxtb	r3, r3
 8012fc2:	f7f5 fb9f 	bl	8008704 <Display::Printf(unsigned char, char const*, ...)>
 8012fc6:	4620      	mov	r0, r4
 8012fc8:	b004      	add	sp, #16
 8012fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012fce:	f7ff bfb3 	b.w	8012f38 <DisplayUdf::ShowIpAddress()>
 8012fd2:	bf00      	nop
 8012fd4:	2000a2a0 	andcs	sl, r0, r0, lsr #5
 8012fd8:	080185dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, sl, pc}

08012fdc <DisplayUdf::ShowGatewayIp()>:
 8012fdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012fde:	4604      	mov	r4, r0
 8012fe0:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 8012fe4:	6980      	ldr	r0, [r0, #24]
 8012fe6:	f7ff ff4d 	bl	8012e84 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8012fea:	4b0a      	ldr	r3, [pc, #40]	; (8013014 <DisplayUdf::ShowGatewayIp()+0x38>)
 8012fec:	4620      	mov	r0, r4
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	f894 104e 	ldrb.w	r1, [r4, #78]	; 0x4e
 8012ff4:	695b      	ldr	r3, [r3, #20]
 8012ff6:	0e1a      	lsrs	r2, r3, #24
 8012ff8:	9202      	str	r2, [sp, #8]
 8012ffa:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8012ffe:	9201      	str	r2, [sp, #4]
 8013000:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8013004:	9200      	str	r2, [sp, #0]
 8013006:	b2db      	uxtb	r3, r3
 8013008:	4a03      	ldr	r2, [pc, #12]	; (8013018 <DisplayUdf::ShowGatewayIp()+0x3c>)
 801300a:	f7f5 fb7b 	bl	8008704 <Display::Printf(unsigned char, char const*, ...)>
 801300e:	b004      	add	sp, #16
 8013010:	bd10      	pop	{r4, pc}
 8013012:	bf00      	nop
 8013014:	2000a2a0 	andcs	sl, r0, r0, lsr #5
 8013018:	080185eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r8, sl, pc}

0801301c <DisplayUdf::ShowHostName()>:
 801301c:	b510      	push	{r4, lr}
 801301e:	4604      	mov	r4, r0
 8013020:	f890 1043 	ldrb.w	r1, [r0, #67]	; 0x43
 8013024:	6980      	ldr	r0, [r0, #24]
 8013026:	f7ff ff2d 	bl	8012e84 <Display::ClearLine(unsigned char) [clone .isra.0]>
 801302a:	4b05      	ldr	r3, [pc, #20]	; (8013040 <DisplayUdf::ShowHostName()+0x24>)
 801302c:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 8013030:	681a      	ldr	r2, [r3, #0]
 8013032:	69a0      	ldr	r0, [r4, #24]
 8013034:	321c      	adds	r2, #28
 8013036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801303a:	f7ff bf11 	b.w	8012e60 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 801303e:	bf00      	nop
 8013040:	2000a2a0 	andcs	sl, r0, r0, lsr #5

08013044 <DisplayUdf::Show()>:
 8013044:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013046:	4604      	mov	r4, r0
 8013048:	21ff      	movs	r1, #255	; 0xff
 801304a:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 801304e:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8013052:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013056:	2806      	cmp	r0, #6
 8013058:	bf88      	it	hi
 801305a:	f803 1c01 	strbhi.w	r1, [r3, #-1]
 801305e:	429a      	cmp	r2, r3
 8013060:	d1f7      	bne.n	8013052 <DisplayUdf::Show()+0xe>
 8013062:	2501      	movs	r5, #1
 8013064:	4629      	mov	r1, r5
 8013066:	3501      	adds	r5, #1
 8013068:	69a0      	ldr	r0, [r4, #24]
 801306a:	b2ed      	uxtb	r5, r5
 801306c:	f7ff ff0a 	bl	8012e84 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8013070:	2d06      	cmp	r5, #6
 8013072:	d1f7      	bne.n	8013064 <DisplayUdf::Show()+0x20>
 8013074:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8013078:	69a0      	ldr	r0, [r4, #24]
 801307a:	f104 021c 	add.w	r2, r4, #28
 801307e:	f7ff feef 	bl	8012e60 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8013082:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8013086:	69a0      	ldr	r0, [r4, #24]
 8013088:	4a0d      	ldr	r2, [pc, #52]	; (80130c0 <DisplayUdf::Show()+0x7c>)
 801308a:	f7ff fee9 	bl	8012e60 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 801308e:	4b0d      	ldr	r3, [pc, #52]	; (80130c4 <DisplayUdf::Show()+0x80>)
 8013090:	4a0d      	ldr	r2, [pc, #52]	; (80130c8 <DisplayUdf::Show()+0x84>)
 8013092:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 8013096:	9300      	str	r3, [sp, #0]
 8013098:	4620      	mov	r0, r4
 801309a:	2303      	movs	r3, #3
 801309c:	f7f5 fb32 	bl	8008704 <Display::Printf(unsigned char, char const*, ...)>
 80130a0:	4620      	mov	r0, r4
 80130a2:	f7ff ff49 	bl	8012f38 <DisplayUdf::ShowIpAddress()>
 80130a6:	4620      	mov	r0, r4
 80130a8:	f7ff ff98 	bl	8012fdc <DisplayUdf::ShowGatewayIp()>
 80130ac:	4620      	mov	r0, r4
 80130ae:	f7ff ff77 	bl	8012fa0 <DisplayUdf::ShowNetmask()>
 80130b2:	4620      	mov	r0, r4
 80130b4:	b003      	add	sp, #12
 80130b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80130ba:	f7ff bfaf 	b.w	801301c <DisplayUdf::ShowHostName()>
 80130be:	bf00      	nop
 80130c0:	08016af9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, sp, lr}
 80130c4:	2000a968 	andcs	sl, r0, r8, ror #18
 80130c8:	080185fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r8, sl, pc}

080130cc <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 80130cc:	3901      	subs	r1, #1
 80130ce:	b510      	push	{r4, lr}
 80130d0:	4604      	mov	r4, r0
 80130d2:	2903      	cmp	r1, #3
 80130d4:	d814      	bhi.n	8013100 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 80130d6:	e8df f001 	tbb	[pc, r1]
 80130da:	281b1402 	ldmdacs	fp, {r1, sl, ip}
 80130de:	4b14      	ldr	r3, [pc, #80]	; (8013130 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 80130e0:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 80130e4:	6818      	ldr	r0, [r3, #0]
 80130e6:	f7ff fed2 	bl	8012e8e <Display::Status(Display7SegmentMessage)>
 80130ea:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 80130ee:	69a0      	ldr	r0, [r4, #24]
 80130f0:	f7ff fec8 	bl	8012e84 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80130f4:	4a0f      	ldr	r2, [pc, #60]	; (8013134 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x68>)
 80130f6:	4620      	mov	r0, r4
 80130f8:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 80130fc:	f7f5 fb02 	bl	8008704 <Display::Printf(unsigned char, char const*, ...)>
 8013100:	bd10      	pop	{r4, pc}
 8013102:	f248 0180 	movw	r1, #32896	; 0x8080
 8013106:	4b0a      	ldr	r3, [pc, #40]	; (8013130 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8013108:	6818      	ldr	r0, [r3, #0]
 801310a:	f7ff fec0 	bl	8012e8e <Display::Status(Display7SegmentMessage)>
 801310e:	e7f7      	b.n	8013100 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 8013110:	4b07      	ldr	r3, [pc, #28]	; (8013130 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8013112:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 8013116:	6818      	ldr	r0, [r3, #0]
 8013118:	f7ff feb9 	bl	8012e8e <Display::Status(Display7SegmentMessage)>
 801311c:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8013120:	69a0      	ldr	r0, [r4, #24]
 8013122:	f7ff feaf 	bl	8012e84 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8013126:	4a04      	ldr	r2, [pc, #16]	; (8013138 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x6c>)
 8013128:	e7e5      	b.n	80130f6 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x2a>
 801312a:	f645 3179 	movw	r1, #23417	; 0x5b79
 801312e:	e7ea      	b.n	8013106 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x3a>
 8013130:	2000a8d8 	ldrdcs	sl, [r0], -r8
 8013134:	08018609 	stmdaeq	r1, {r0, r3, r9, sl, pc}
 8013138:	08018617 	stmdaeq	r1, {r0, r1, r2, r4, r9, sl, pc}

0801313c <DisplayUdf::ShowShutdown()>:
 801313c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013140:	4604      	mov	r4, r0
 8013142:	6980      	ldr	r0, [r0, #24]
 8013144:	b1d0      	cbz	r0, 801317c <DisplayUdf::ShowShutdown()+0x40>
 8013146:	f890 8005 	ldrb.w	r8, [r0, #5]
 801314a:	6803      	ldr	r3, [r0, #0]
 801314c:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
 8013150:	b2ed      	uxtb	r5, r5
 8013152:	462a      	mov	r2, r5
 8013154:	2100      	movs	r1, #0
 8013156:	6a1b      	ldr	r3, [r3, #32]
 8013158:	7906      	ldrb	r6, [r0, #4]
 801315a:	2700      	movs	r7, #0
 801315c:	4798      	blx	r3
 801315e:	3e01      	subs	r6, #1
 8013160:	42b7      	cmp	r7, r6
 8013162:	69a0      	ldr	r0, [r4, #24]
 8013164:	d311      	bcc.n	801318a <DisplayUdf::ShowShutdown()+0x4e>
 8013166:	b120      	cbz	r0, 8013172 <DisplayUdf::ShowShutdown()+0x36>
 8013168:	6803      	ldr	r3, [r0, #0]
 801316a:	462a      	mov	r2, r5
 801316c:	2100      	movs	r1, #0
 801316e:	6a1b      	ldr	r3, [r3, #32]
 8013170:	4798      	blx	r3
 8013172:	4641      	mov	r1, r8
 8013174:	4a08      	ldr	r2, [pc, #32]	; (8013198 <DisplayUdf::ShowShutdown()+0x5c>)
 8013176:	69a0      	ldr	r0, [r4, #24]
 8013178:	f7ff fe72 	bl	8012e60 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 801317c:	f44f 41de 	mov.w	r1, #28416	; 0x6f00
 8013180:	4620      	mov	r0, r4
 8013182:	f7ff fe84 	bl	8012e8e <Display::Status(Display7SegmentMessage)>
 8013186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801318a:	b118      	cbz	r0, 8013194 <DisplayUdf::ShowShutdown()+0x58>
 801318c:	6803      	ldr	r3, [r0, #0]
 801318e:	2120      	movs	r1, #32
 8013190:	695b      	ldr	r3, [r3, #20]
 8013192:	4798      	blx	r3
 8013194:	3701      	adds	r7, #1
 8013196:	e7e3      	b.n	8013160 <DisplayUdf::ShowShutdown()+0x24>
 8013198:	08018625 	stmdaeq	r1, {r0, r2, r5, r9, sl, pc}

0801319c <DisplayUdf::Set(unsigned char, displayudf::Labels)>:
 801319c:	1e4b      	subs	r3, r1, #1
 801319e:	2b05      	cmp	r3, #5
 80131a0:	b530      	push	{r4, r5, lr}
 80131a2:	d80f      	bhi.n	80131c4 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x28>
 80131a4:	2300      	movs	r3, #0
 80131a6:	f100 043c 	add.w	r4, r0, #60	; 0x3c
 80131aa:	f814 5b01 	ldrb.w	r5, [r4], #1
 80131ae:	428d      	cmp	r5, r1
 80131b0:	d109      	bne.n	80131c6 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x2a>
 80131b2:	1884      	adds	r4, r0, r2
 80131b4:	f894 403c 	ldrb.w	r4, [r4, #60]	; 0x3c
 80131b8:	4403      	add	r3, r0
 80131ba:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
 80131be:	4410      	add	r0, r2
 80131c0:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
 80131c4:	bd30      	pop	{r4, r5, pc}
 80131c6:	3301      	adds	r3, #1
 80131c8:	2b14      	cmp	r3, #20
 80131ca:	d1ee      	bne.n	80131aa <DisplayUdf::Set(unsigned char, displayudf::Labels)+0xe>
 80131cc:	e7f7      	b.n	80131be <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x22>
	...

080131d0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 80131d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80131d2:	88c6      	ldrh	r6, [r0, #6]
 80131d4:	8885      	ldrh	r5, [r0, #4]
 80131d6:	42ae      	cmp	r6, r5
 80131d8:	d216      	bcs.n	8013208 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 80131da:	4604      	mov	r4, r0
 80131dc:	6800      	ldr	r0, [r0, #0]
 80131de:	1bad      	subs	r5, r5, r6
 80131e0:	4430      	add	r0, r6
 80131e2:	7a26      	ldrb	r6, [r4, #8]
 80131e4:	b923      	cbnz	r3, 80131f0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 80131e6:	b926      	cbnz	r6, 80131f2 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 80131e8:	9200      	str	r2, [sp, #0]
 80131ea:	460b      	mov	r3, r1
 80131ec:	4a09      	ldr	r2, [pc, #36]	; (8013214 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 80131ee:	e003      	b.n	80131f8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 80131f0:	b166      	cbz	r6, 801320c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 80131f2:	460b      	mov	r3, r1
 80131f4:	9200      	str	r2, [sp, #0]
 80131f6:	4a08      	ldr	r2, [pc, #32]	; (8013218 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 80131f8:	4629      	mov	r1, r5
 80131fa:	f7f6 f8f3 	bl	80093e4 <snprintf>
 80131fe:	4285      	cmp	r5, r0
 8013200:	bfa2      	ittt	ge
 8013202:	88e3      	ldrhge	r3, [r4, #6]
 8013204:	181b      	addge	r3, r3, r0
 8013206:	80e3      	strhge	r3, [r4, #6]
 8013208:	b002      	add	sp, #8
 801320a:	bd70      	pop	{r4, r5, r6, pc}
 801320c:	9200      	str	r2, [sp, #0]
 801320e:	460b      	mov	r3, r1
 8013210:	4a02      	ldr	r2, [pc, #8]	; (801321c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 8013212:	e7f1      	b.n	80131f8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8013214:	08016c51 	stmdaeq	r1, {r0, r4, r6, sl, fp, sp, lr}
 8013218:	08016c48 	stmdaeq	r1, {r3, r6, sl, fp, sp, lr}
 801321c:	08016c52 	stmdaeq	r1, {r1, r4, r6, sl, fp, sp, lr}

08013220 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>:
 8013220:	b510      	push	{r4, lr}
 8013222:	2220      	movs	r2, #32
 8013224:	4604      	mov	r4, r0
 8013226:	f840 1b04 	str.w	r1, [r0], #4
 801322a:	2100      	movs	r1, #0
 801322c:	f001 fad6 	bl	80147dc <memset>
 8013230:	f647 7305 	movw	r3, #32517	; 0x7f05
 8013234:	4620      	mov	r0, r4
 8013236:	84a3      	strh	r3, [r4, #36]	; 0x24
 8013238:	bd10      	pop	{r4, pc}

0801323a <DisplayUdfParams::Load()>:
 801323a:	b508      	push	{r3, lr}
 801323c:	2300      	movs	r3, #0
 801323e:	4601      	mov	r1, r0
 8013240:	6043      	str	r3, [r0, #4]
 8013242:	6800      	ldr	r0, [r0, #0]
 8013244:	b120      	cbz	r0, 8013250 <DisplayUdfParams::Load()+0x16>
 8013246:	6803      	ldr	r3, [r0, #0]
 8013248:	3104      	adds	r1, #4
 801324a:	68db      	ldr	r3, [r3, #12]
 801324c:	4798      	blx	r3
 801324e:	2001      	movs	r0, #1
 8013250:	bd08      	pop	{r3, pc}
	...

08013254 <DisplayUdfParams::Load(char const*, unsigned int)>:
 8013254:	6803      	ldr	r3, [r0, #0]
 8013256:	b1d3      	cbz	r3, 801328e <DisplayUdfParams::Load(char const*, unsigned int)+0x3a>
 8013258:	2300      	movs	r3, #0
 801325a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801325c:	460d      	mov	r5, r1
 801325e:	4616      	mov	r6, r2
 8013260:	4604      	mov	r4, r0
 8013262:	6043      	str	r3, [r0, #4]
 8013264:	4602      	mov	r2, r0
 8013266:	490a      	ldr	r1, [pc, #40]	; (8013290 <DisplayUdfParams::Load(char const*, unsigned int)+0x3c>)
 8013268:	4668      	mov	r0, sp
 801326a:	f000 fc05 	bl	8013a78 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 801326e:	4632      	mov	r2, r6
 8013270:	4629      	mov	r1, r5
 8013272:	4668      	mov	r0, sp
 8013274:	f000 fc04 	bl	8013a80 <ReadConfigFile::Read(char const*, unsigned int)>
 8013278:	4621      	mov	r1, r4
 801327a:	f851 0b04 	ldr.w	r0, [r1], #4
 801327e:	6803      	ldr	r3, [r0, #0]
 8013280:	689b      	ldr	r3, [r3, #8]
 8013282:	4798      	blx	r3
 8013284:	4668      	mov	r0, sp
 8013286:	f000 fbfa 	bl	8013a7e <ReadConfigFile::~ReadConfigFile()>
 801328a:	b002      	add	sp, #8
 801328c:	bd70      	pop	{r4, r5, r6, pc}
 801328e:	4770      	bx	lr
 8013290:	0801335d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, r9, ip, sp}

08013294 <DisplayUdfParams::callbackFunction(char const*)>:
 8013294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013296:	460e      	mov	r6, r1
 8013298:	4604      	mov	r4, r0
 801329a:	492c      	ldr	r1, [pc, #176]	; (801334c <DisplayUdfParams::callbackFunction(char const*)+0xb8>)
 801329c:	4630      	mov	r0, r6
 801329e:	f10d 0207 	add.w	r2, sp, #7
 80132a2:	f000 fd4f 	bl	8013d44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80132a6:	b968      	cbnz	r0, 80132c4 <DisplayUdfParams::callbackFunction(char const*)+0x30>
 80132a8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80132ac:	6863      	ldr	r3, [r4, #4]
 80132ae:	2a7f      	cmp	r2, #127	; 0x7f
 80132b0:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 80132b4:	bf14      	ite	ne
 80132b6:	f043 5300 	orrne.w	r3, r3, #536870912	; 0x20000000
 80132ba:	f023 5300 	biceq.w	r3, r3, #536870912	; 0x20000000
 80132be:	6063      	str	r3, [r4, #4]
 80132c0:	b003      	add	sp, #12
 80132c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132c4:	4630      	mov	r0, r6
 80132c6:	4922      	ldr	r1, [pc, #136]	; (8013350 <DisplayUdfParams::callbackFunction(char const*)+0xbc>)
 80132c8:	f10d 0207 	add.w	r2, sp, #7
 80132cc:	f000 fd3a 	bl	8013d44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80132d0:	b958      	cbnz	r0, 80132ea <DisplayUdfParams::callbackFunction(char const*)+0x56>
 80132d2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80132d6:	6863      	ldr	r3, [r4, #4]
 80132d8:	2a05      	cmp	r2, #5
 80132da:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 80132de:	bf14      	ite	ne
 80132e0:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80132e4:	f023 5380 	biceq.w	r3, r3, #268435456	; 0x10000000
 80132e8:	e7e9      	b.n	80132be <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 80132ea:	4630      	mov	r0, r6
 80132ec:	4919      	ldr	r1, [pc, #100]	; (8013354 <DisplayUdfParams::callbackFunction(char const*)+0xc0>)
 80132ee:	f10d 0207 	add.w	r2, sp, #7
 80132f2:	f000 fd27 	bl	8013d44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80132f6:	b948      	cbnz	r0, 801330c <DisplayUdfParams::callbackFunction(char const*)+0x78>
 80132f8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80132fc:	6863      	ldr	r3, [r4, #4]
 80132fe:	b112      	cbz	r2, 8013306 <DisplayUdfParams::callbackFunction(char const*)+0x72>
 8013300:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013304:	e7db      	b.n	80132be <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8013306:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801330a:	e7d8      	b.n	80132be <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 801330c:	2500      	movs	r5, #0
 801330e:	4f12      	ldr	r7, [pc, #72]	; (8013358 <DisplayUdfParams::callbackFunction(char const*)+0xc4>)
 8013310:	4630      	mov	r0, r6
 8013312:	f857 1b04 	ldr.w	r1, [r7], #4
 8013316:	f10d 0207 	add.w	r2, sp, #7
 801331a:	f000 fd13 	bl	8013d44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 801331e:	b980      	cbnz	r0, 8013342 <DisplayUdfParams::callbackFunction(char const*)+0xae>
 8013320:	2301      	movs	r3, #1
 8013322:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8013326:	40ab      	lsls	r3, r5
 8013328:	1e4e      	subs	r6, r1, #1
 801332a:	2e05      	cmp	r6, #5
 801332c:	6862      	ldr	r2, [r4, #4]
 801332e:	4425      	add	r5, r4
 8013330:	d802      	bhi.n	8013338 <DisplayUdfParams::callbackFunction(char const*)+0xa4>
 8013332:	7229      	strb	r1, [r5, #8]
 8013334:	4313      	orrs	r3, r2
 8013336:	e7c2      	b.n	80132be <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8013338:	ea22 0203 	bic.w	r2, r2, r3
 801333c:	7228      	strb	r0, [r5, #8]
 801333e:	6062      	str	r2, [r4, #4]
 8013340:	e7be      	b.n	80132c0 <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 8013342:	3501      	adds	r5, #1
 8013344:	2d14      	cmp	r5, #20
 8013346:	d1e3      	bne.n	8013310 <DisplayUdfParams::callbackFunction(char const*)+0x7c>
 8013348:	e7ba      	b.n	80132c0 <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 801334a:	bf00      	nop
 801334c:	080186e6 	stmdaeq	r1, {r1, r2, r5, r6, r7, r9, sl, pc}
 8013350:	080186ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r9, sl, pc}
 8013354:	080186bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r9, sl, pc}
 8013358:	08018638 	stmdaeq	r1, {r3, r4, r5, r9, sl, pc}

0801335c <DisplayUdfParams::staticCallbackFunction(void*, char const*)>:
 801335c:	f7ff bf9a 	b.w	8013294 <DisplayUdfParams::callbackFunction(char const*)>

08013360 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>:
 8013360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013364:	4604      	mov	r4, r0
 8013366:	4615      	mov	r5, r2
 8013368:	461e      	mov	r6, r3
 801336a:	b086      	sub	sp, #24
 801336c:	3004      	adds	r0, #4
 801336e:	b379      	cbz	r1, 80133d0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x70>
 8013370:	2222      	movs	r2, #34	; 0x22
 8013372:	f001 fa1c 	bl	80147ae <memmove>
 8013376:	462a      	mov	r2, r5
 8013378:	4633      	mov	r3, r6
 801337a:	493d      	ldr	r1, [pc, #244]	; (8013470 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x110>)
 801337c:	a803      	add	r0, sp, #12
 801337e:	f000 faab 	bl	80138d8 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 8013382:	6863      	ldr	r3, [r4, #4]
 8013384:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8013388:	493a      	ldr	r1, [pc, #232]	; (8013474 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x114>)
 801338a:	f3c3 7340 	ubfx	r3, r3, #29, #1
 801338e:	a803      	add	r0, sp, #12
 8013390:	f7ff ff1e 	bl	80131d0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8013394:	6863      	ldr	r3, [r4, #4]
 8013396:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 801339a:	f3c3 7300 	ubfx	r3, r3, #28, #1
 801339e:	4936      	ldr	r1, [pc, #216]	; (8013478 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x118>)
 80133a0:	a803      	add	r0, sp, #12
 80133a2:	f7ff ff15 	bl	80131d0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 80133a6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80133aa:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80133ae:	6863      	ldr	r3, [r4, #4]
 80133b0:	42aa      	cmp	r2, r5
 80133b2:	d226      	bcs.n	8013402 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xa2>
 80133b4:	9803      	ldr	r0, [sp, #12]
 80133b6:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
 80133ba:	4410      	add	r0, r2
 80133bc:	eba5 0502 	sub.w	r5, r5, r2
 80133c0:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80133c4:	d10b      	bne.n	80133de <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x7e>
 80133c6:	b962      	cbnz	r2, 80133e2 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x82>
 80133c8:	9200      	str	r2, [sp, #0]
 80133ca:	4b2c      	ldr	r3, [pc, #176]	; (801347c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 80133cc:	4a2c      	ldr	r2, [pc, #176]	; (8013480 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x120>)
 80133ce:	e00e      	b.n	80133ee <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 80133d0:	6823      	ldr	r3, [r4, #0]
 80133d2:	4601      	mov	r1, r0
 80133d4:	681a      	ldr	r2, [r3, #0]
 80133d6:	4618      	mov	r0, r3
 80133d8:	68d2      	ldr	r2, [r2, #12]
 80133da:	4790      	blx	r2
 80133dc:	e7cb      	b.n	8013376 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x16>
 80133de:	2a00      	cmp	r2, #0
 80133e0:	d041      	beq.n	8013466 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x106>
 80133e2:	3b00      	subs	r3, #0
 80133e4:	bf18      	it	ne
 80133e6:	2301      	movne	r3, #1
 80133e8:	4a26      	ldr	r2, [pc, #152]	; (8013484 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x124>)
 80133ea:	9300      	str	r3, [sp, #0]
 80133ec:	4b23      	ldr	r3, [pc, #140]	; (801347c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 80133ee:	4629      	mov	r1, r5
 80133f0:	f7f5 fff8 	bl	80093e4 <snprintf>
 80133f4:	4285      	cmp	r5, r0
 80133f6:	bfa2      	ittt	ge
 80133f8:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 80133fc:	181b      	addge	r3, r3, r0
 80133fe:	f8ad 3012 	strhge.w	r3, [sp, #18]
 8013402:	2500      	movs	r5, #0
 8013404:	2701      	movs	r7, #1
 8013406:	4e20      	ldr	r6, [pc, #128]	; (8013488 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x128>)
 8013408:	f104 0808 	add.w	r8, r4, #8
 801340c:	f856 1b04 	ldr.w	r1, [r6], #4
 8013410:	780b      	ldrb	r3, [r1, #0]
 8013412:	b15b      	cbz	r3, 801342c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xcc>
 8013414:	6862      	ldr	r2, [r4, #4]
 8013416:	fa07 f305 	lsl.w	r3, r7, r5
 801341a:	4393      	bics	r3, r2
 801341c:	bf0c      	ite	eq
 801341e:	2301      	moveq	r3, #1
 8013420:	2300      	movne	r3, #0
 8013422:	f818 2005 	ldrb.w	r2, [r8, r5]
 8013426:	a803      	add	r0, sp, #12
 8013428:	f7ff fed2 	bl	80131d0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 801342c:	3501      	adds	r5, #1
 801342e:	2d14      	cmp	r5, #20
 8013430:	d1ec      	bne.n	801340c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xac>
 8013432:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8013436:	b17b      	cbz	r3, 8013458 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xf8>
 8013438:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801343c:	9b03      	ldr	r3, [sp, #12]
 801343e:	4413      	add	r3, r2
 8013440:	227d      	movs	r2, #125	; 0x7d
 8013442:	f803 2c01 	strb.w	r2, [r3, #-1]
 8013446:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801344a:	9903      	ldr	r1, [sp, #12]
 801344c:	54ca      	strb	r2, [r1, r3]
 801344e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8013452:	3301      	adds	r3, #1
 8013454:	f8ad 3012 	strh.w	r3, [sp, #18]
 8013458:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801345c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801345e:	601a      	str	r2, [r3, #0]
 8013460:	b006      	add	sp, #24
 8013462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013466:	2301      	movs	r3, #1
 8013468:	4a08      	ldr	r2, [pc, #32]	; (801348c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x12c>)
 801346a:	9300      	str	r3, [sp, #0]
 801346c:	4b03      	ldr	r3, [pc, #12]	; (801347c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 801346e:	e7be      	b.n	80133ee <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 8013470:	080186da 	stmdaeq	r1, {r1, r3, r4, r6, r7, r9, sl, pc}
 8013474:	080186e6 	stmdaeq	r1, {r1, r2, r5, r6, r7, r9, sl, pc}
 8013478:	080186ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r9, sl, pc}
 801347c:	080186bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r9, sl, pc}
 8013480:	08016c51 	stmdaeq	r1, {r0, r4, r6, sl, fp, sp, lr}
 8013484:	08016c48 	stmdaeq	r1, {r3, r6, sl, fp, sp, lr}
 8013488:	08018638 	stmdaeq	r1, {r3, r4, r5, r9, sl, pc}
 801348c:	08016c52 	stmdaeq	r1, {r1, r4, r6, sl, fp, sp, lr}

08013490 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>:
 8013490:	b513      	push	{r0, r1, r4, lr}
 8013492:	6804      	ldr	r4, [r0, #0]
 8013494:	b914      	cbnz	r4, 801349c <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0xc>
 8013496:	601c      	str	r4, [r3, #0]
 8013498:	b002      	add	sp, #8
 801349a:	bd10      	pop	{r4, pc}
 801349c:	9300      	str	r3, [sp, #0]
 801349e:	4613      	mov	r3, r2
 80134a0:	460a      	mov	r2, r1
 80134a2:	2100      	movs	r1, #0
 80134a4:	f7ff ff5c 	bl	8013360 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>
 80134a8:	e7f6      	b.n	8013498 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0x8>

080134aa <DisplayUdfParams::Set(DisplayUdf*)>:
 80134aa:	6843      	ldr	r3, [r0, #4]
 80134ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134b0:	009a      	lsls	r2, r3, #2
 80134b2:	4604      	mov	r4, r0
 80134b4:	460e      	mov	r6, r1
 80134b6:	d506      	bpl.n	80134c6 <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 80134b8:	6988      	ldr	r0, [r1, #24]
 80134ba:	b120      	cbz	r0, 80134c6 <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 80134bc:	6803      	ldr	r3, [r0, #0]
 80134be:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 80134c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134c4:	4798      	blx	r3
 80134c6:	6863      	ldr	r3, [r4, #4]
 80134c8:	69b0      	ldr	r0, [r6, #24]
 80134ca:	00db      	lsls	r3, r3, #3
 80134cc:	bf41      	itttt	mi
 80134ce:	f64e 2260 	movwmi	r2, #60000	; 0xea60
 80134d2:	f894 3024 	ldrbmi.w	r3, [r4, #36]	; 0x24
 80134d6:	4353      	mulmi	r3, r2
 80134d8:	6173      	strmi	r3, [r6, #20]
 80134da:	6861      	ldr	r1, [r4, #4]
 80134dc:	f3c1 7180 	ubfx	r1, r1, #30, #1
 80134e0:	b110      	cbz	r0, 80134e8 <DisplayUdfParams::Set(DisplayUdf*)+0x3e>
 80134e2:	6803      	ldr	r3, [r0, #0]
 80134e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134e6:	4798      	blx	r3
 80134e8:	2500      	movs	r5, #0
 80134ea:	2701      	movs	r7, #1
 80134ec:	f104 0808 	add.w	r8, r4, #8
 80134f0:	6862      	ldr	r2, [r4, #4]
 80134f2:	fa07 f305 	lsl.w	r3, r7, r5
 80134f6:	4393      	bics	r3, r2
 80134f8:	d105      	bne.n	8013506 <DisplayUdfParams::Set(DisplayUdf*)+0x5c>
 80134fa:	462a      	mov	r2, r5
 80134fc:	4630      	mov	r0, r6
 80134fe:	f818 1005 	ldrb.w	r1, [r8, r5]
 8013502:	f7ff fe4b 	bl	801319c <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8013506:	3501      	adds	r5, #1
 8013508:	2d14      	cmp	r5, #20
 801350a:	d1f1      	bne.n	80134f0 <DisplayUdfParams::Set(DisplayUdf*)+0x46>
 801350c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013510 <DisplayUdfParams::Dump()>:
 8013510:	4770      	bx	lr

08013512 <DisplayUdf::ShowNodeName(ArtNetNode*)>:
 8013512:	b570      	push	{r4, r5, r6, lr}
 8013514:	4605      	mov	r5, r0
 8013516:	6980      	ldr	r0, [r0, #24]
 8013518:	460c      	mov	r4, r1
 801351a:	b120      	cbz	r0, 8013526 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x14>
 801351c:	6803      	ldr	r3, [r0, #0]
 801351e:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
 8013522:	691b      	ldr	r3, [r3, #16]
 8013524:	4798      	blx	r3
 8013526:	69a8      	ldr	r0, [r5, #24]
 8013528:	f104 0242 	add.w	r2, r4, #66	; 0x42
 801352c:	b190      	cbz	r0, 8013554 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x42>
 801352e:	2300      	movs	r3, #0
 8013530:	7906      	ldrb	r6, [r0, #4]
 8013532:	3441      	adds	r4, #65	; 0x41
 8013534:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8013538:	b119      	cbz	r1, 8013542 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x30>
 801353a:	1c59      	adds	r1, r3, #1
 801353c:	429e      	cmp	r6, r3
 801353e:	460b      	mov	r3, r1
 8013540:	dcf8      	bgt.n	8013534 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x22>
 8013542:	6801      	ldr	r1, [r0, #0]
 8013544:	b2db      	uxtb	r3, r3
 8013546:	69cc      	ldr	r4, [r1, #28]
 8013548:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
 801354c:	46a4      	mov	ip, r4
 801354e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013552:	4760      	bx	ip
 8013554:	bd70      	pop	{r4, r5, r6, pc}
	...

08013558 <DisplayUdf::ShowUniverse(ArtNetNode*)>:
 8013558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801355c:	460c      	mov	r4, r1
 801355e:	b08b      	sub	sp, #44	; 0x2c
 8013560:	4606      	mov	r6, r0
 8013562:	2301      	movs	r3, #1
 8013564:	2100      	movs	r1, #0
 8013566:	4620      	mov	r0, r4
 8013568:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 801356c:	f7f6 fcfa 	bl	8009f64 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 8013570:	b350      	cbz	r0, 80135c8 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x70>
 8013572:	2100      	movs	r1, #0
 8013574:	4620      	mov	r0, r4
 8013576:	f896 9040 	ldrb.w	r9, [r6, #64]	; 0x40
 801357a:	f7f6 fd0d 	bl	8009f98 <ArtNetNode::GetNetSwitch(unsigned int) const>
 801357e:	2100      	movs	r1, #0
 8013580:	4605      	mov	r5, r0
 8013582:	4620      	mov	r0, r4
 8013584:	f7f6 fd04 	bl	8009f90 <ArtNetNode::GetSubnetSwitch(unsigned int) const>
 8013588:	2100      	movs	r1, #0
 801358a:	4607      	mov	r7, r0
 801358c:	4620      	mov	r0, r4
 801358e:	f89d a027 	ldrb.w	sl, [sp, #39]	; 0x27
 8013592:	f7f6 fe8c 	bl	800a2ae <ArtNetNode::GetMergeMode(unsigned int) const>
 8013596:	4a2d      	ldr	r2, [pc, #180]	; (801364c <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf4>)
 8013598:	4b2d      	ldr	r3, [pc, #180]	; (8013650 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf8>)
 801359a:	2100      	movs	r1, #0
 801359c:	2800      	cmp	r0, #0
 801359e:	bf0c      	ite	eq
 80135a0:	4690      	moveq	r8, r2
 80135a2:	4698      	movne	r8, r3
 80135a4:	4620      	mov	r0, r4
 80135a6:	f7f6 fe51 	bl	800a24c <ArtNetNode::GetPortProtocol(unsigned int) const>
 80135aa:	4a2a      	ldr	r2, [pc, #168]	; (8013654 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xfc>)
 80135ac:	4b2a      	ldr	r3, [pc, #168]	; (8013658 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x100>)
 80135ae:	4649      	mov	r1, r9
 80135b0:	2800      	cmp	r0, #0
 80135b2:	bf18      	it	ne
 80135b4:	4613      	movne	r3, r2
 80135b6:	e9cd 7a00 	strd	r7, sl, [sp]
 80135ba:	e9cd 8302 	strd	r8, r3, [sp, #8]
 80135be:	4630      	mov	r0, r6
 80135c0:	462b      	mov	r3, r5
 80135c2:	4a26      	ldr	r2, [pc, #152]	; (801365c <DisplayUdf::ShowUniverse(ArtNetNode*)+0x104>)
 80135c4:	f7f5 f89e 	bl	8008704 <Display::Printf(unsigned char, char const*, ...)>
 80135c8:	2500      	movs	r5, #0
 80135ca:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8013658 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x100>
 80135ce:	4629      	mov	r1, r5
 80135d0:	2301      	movs	r3, #1
 80135d2:	4620      	mov	r0, r4
 80135d4:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 80135d8:	f7f6 fcc4 	bl	8009f64 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 80135dc:	46a9      	mov	r9, r5
 80135de:	3501      	adds	r5, #1
 80135e0:	b378      	cbz	r0, 8013642 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xea>
 80135e2:	f106 0343 	add.w	r3, r6, #67	; 0x43
 80135e6:	2100      	movs	r1, #0
 80135e8:	4620      	mov	r0, r4
 80135ea:	f813 b005 	ldrb.w	fp, [r3, r5]
 80135ee:	f7f6 fcd3 	bl	8009f98 <ArtNetNode::GetNetSwitch(unsigned int) const>
 80135f2:	2100      	movs	r1, #0
 80135f4:	4607      	mov	r7, r0
 80135f6:	4620      	mov	r0, r4
 80135f8:	f7f6 fcca 	bl	8009f90 <ArtNetNode::GetSubnetSwitch(unsigned int) const>
 80135fc:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8013600:	4680      	mov	r8, r0
 8013602:	4649      	mov	r1, r9
 8013604:	4620      	mov	r0, r4
 8013606:	9307      	str	r3, [sp, #28]
 8013608:	f7f6 fe51 	bl	800a2ae <ArtNetNode::GetMergeMode(unsigned int) const>
 801360c:	4b10      	ldr	r3, [pc, #64]	; (8013650 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf8>)
 801360e:	4a0f      	ldr	r2, [pc, #60]	; (801364c <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf4>)
 8013610:	4649      	mov	r1, r9
 8013612:	2800      	cmp	r0, #0
 8013614:	bf18      	it	ne
 8013616:	461a      	movne	r2, r3
 8013618:	4620      	mov	r0, r4
 801361a:	9206      	str	r2, [sp, #24]
 801361c:	f7f6 fe16 	bl	800a24c <ArtNetNode::GetPortProtocol(unsigned int) const>
 8013620:	490c      	ldr	r1, [pc, #48]	; (8013654 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xfc>)
 8013622:	9a06      	ldr	r2, [sp, #24]
 8013624:	2800      	cmp	r0, #0
 8013626:	bf08      	it	eq
 8013628:	4651      	moveq	r1, sl
 801362a:	9b07      	ldr	r3, [sp, #28]
 801362c:	9104      	str	r1, [sp, #16]
 801362e:	e9cd 8301 	strd	r8, r3, [sp, #4]
 8013632:	9203      	str	r2, [sp, #12]
 8013634:	462b      	mov	r3, r5
 8013636:	4659      	mov	r1, fp
 8013638:	4630      	mov	r0, r6
 801363a:	4a09      	ldr	r2, [pc, #36]	; (8013660 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x108>)
 801363c:	9700      	str	r7, [sp, #0]
 801363e:	f7f5 f861 	bl	8008704 <Display::Printf(unsigned char, char const*, ...)>
 8013642:	2d04      	cmp	r5, #4
 8013644:	d1c3      	bne.n	80135ce <DisplayUdf::ShowUniverse(ArtNetNode*)+0x76>
 8013646:	b00b      	add	sp, #44	; 0x2c
 8013648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801364c:	08016b79 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, r9, fp, sp, lr}
 8013650:	08016b7d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r8, r9, fp, sp, lr}
 8013654:	08016b89 	stmdaeq	r1, {r0, r3, r7, r8, r9, fp, sp, lr}
 8013658:	080186f0 	stmdaeq	r1, {r4, r5, r6, r7, r9, sl, pc}
 801365c:	080186f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r9, sl, pc}
 8013660:	08018709 	stmdaeq	r1, {r0, r3, r8, r9, sl, pc}

08013664 <DisplayUdf::ShowDestinationIp(ArtNetNode*)>:
 8013664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013668:	4606      	mov	r6, r0
 801366a:	2541      	movs	r5, #65	; 0x41
 801366c:	f8df 903c 	ldr.w	r9, [pc, #60]	; 80136ac <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x48>
 8013670:	b085      	sub	sp, #20
 8013672:	f100 084a 	add.w	r8, r0, #74	; 0x4a
 8013676:	f501 775b 	add.w	r7, r1, #876	; 0x36c
 801367a:	012b      	lsls	r3, r5, #4
 801367c:	58fc      	ldr	r4, [r7, r3]
 801367e:	464a      	mov	r2, r9
 8013680:	0e23      	lsrs	r3, r4, #24
 8013682:	9303      	str	r3, [sp, #12]
 8013684:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8013688:	9302      	str	r3, [sp, #8]
 801368a:	f3c4 2307 	ubfx	r3, r4, #8, #8
 801368e:	b2e4      	uxtb	r4, r4
 8013690:	9301      	str	r3, [sp, #4]
 8013692:	9400      	str	r4, [sp, #0]
 8013694:	462b      	mov	r3, r5
 8013696:	4630      	mov	r0, r6
 8013698:	f818 1b01 	ldrb.w	r1, [r8], #1
 801369c:	3501      	adds	r5, #1
 801369e:	f7f5 f831 	bl	8008704 <Display::Printf(unsigned char, char const*, ...)>
 80136a2:	2d45      	cmp	r5, #69	; 0x45
 80136a4:	d1e9      	bne.n	801367a <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x16>
 80136a6:	b005      	add	sp, #20
 80136a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80136ac:	0801871f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r8, r9, sl, pc}

080136b0 <DisplayUdf::Show(ArtNetNode*)>:
 80136b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80136b2:	4604      	mov	r4, r0
 80136b4:	460d      	mov	r5, r1
 80136b6:	f7ff fcc5 	bl	8013044 <DisplayUdf::Show()>
 80136ba:	4629      	mov	r1, r5
 80136bc:	4620      	mov	r0, r4
 80136be:	f7ff ff28 	bl	8013512 <DisplayUdf::ShowNodeName(ArtNetNode*)>
 80136c2:	4629      	mov	r1, r5
 80136c4:	4620      	mov	r0, r4
 80136c6:	f7ff ff47 	bl	8013558 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 80136ca:	4629      	mov	r1, r5
 80136cc:	4620      	mov	r0, r4
 80136ce:	f7ff ffc9 	bl	8013664 <DisplayUdf::ShowDestinationIp(ArtNetNode*)>
 80136d2:	f895 26de 	ldrb.w	r2, [r5, #1758]	; 0x6de
 80136d6:	f895 36df 	ldrb.w	r3, [r5, #1759]	; 0x6df
 80136da:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 80136de:	4413      	add	r3, r2
 80136e0:	4620      	mov	r0, r4
 80136e2:	4a0d      	ldr	r2, [pc, #52]	; (8013718 <DisplayUdf::Show(ArtNetNode*)+0x68>)
 80136e4:	f7f5 f80e 	bl	8008704 <Display::Printf(unsigned char, char const*, ...)>
 80136e8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80136ea:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
 80136ee:	2a02      	cmp	r2, #2
 80136f0:	d001      	beq.n	80136f6 <DisplayUdf::Show(ArtNetNode*)+0x46>
 80136f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80136f4:	b92b      	cbnz	r3, 8013702 <DisplayUdf::Show(ArtNetNode*)+0x52>
 80136f6:	4620      	mov	r0, r4
 80136f8:	4a08      	ldr	r2, [pc, #32]	; (801371c <DisplayUdf::Show(ArtNetNode*)+0x6c>)
 80136fa:	f7f5 f803 	bl	8008704 <Display::Printf(unsigned char, char const*, ...)>
 80136fe:	b003      	add	sp, #12
 8013700:	bd30      	pop	{r4, r5, pc}
 8013702:	4807      	ldr	r0, [pc, #28]	; (8013720 <DisplayUdf::Show(ArtNetNode*)+0x70>)
 8013704:	9300      	str	r3, [sp, #0]
 8013706:	4b07      	ldr	r3, [pc, #28]	; (8013724 <DisplayUdf::Show(ArtNetNode*)+0x74>)
 8013708:	2a00      	cmp	r2, #0
 801370a:	bf08      	it	eq
 801370c:	4603      	moveq	r3, r0
 801370e:	4620      	mov	r0, r4
 8013710:	4a05      	ldr	r2, [pc, #20]	; (8013728 <DisplayUdf::Show(ArtNetNode*)+0x78>)
 8013712:	f7f4 fff7 	bl	8008704 <Display::Printf(unsigned char, char const*, ...)>
 8013716:	e7f2      	b.n	80136fe <DisplayUdf::Show(ArtNetNode*)+0x4e>
 8013718:	0801872f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r8, r9, sl, pc}
 801371c:	08018736 	stmdaeq	r1, {r1, r2, r4, r5, r8, r9, sl, pc}
 8013720:	08016cbe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r7, sl, fp, sp, lr}
 8013724:	08016cb3 	stmdaeq	r1, {r0, r1, r4, r5, r7, sl, fp, sp, lr}
 8013728:	0801873d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r8, r9, sl, pc}

0801372c <NetworkDisplay::ShowEmacStart()>:
 801372c:	4b01      	ldr	r3, [pc, #4]	; (8013734 <NetworkDisplay::ShowEmacStart()+0x8>)
 801372e:	6818      	ldr	r0, [r3, #0]
 8013730:	f7ff bbf2 	b.w	8012f18 <DisplayUdf::ShowEmacStart()>
 8013734:	2000a8d0 	ldrdcs	sl, [r0], -r0

08013738 <NetworkDisplay::ShowIp()>:
 8013738:	4b01      	ldr	r3, [pc, #4]	; (8013740 <NetworkDisplay::ShowIp()+0x8>)
 801373a:	6818      	ldr	r0, [r3, #0]
 801373c:	f7ff bbfc 	b.w	8012f38 <DisplayUdf::ShowIpAddress()>
 8013740:	2000a8d0 	ldrdcs	sl, [r0], -r0

08013744 <NetworkDisplay::ShowNetMask()>:
 8013744:	4b01      	ldr	r3, [pc, #4]	; (801374c <NetworkDisplay::ShowNetMask()+0x8>)
 8013746:	6818      	ldr	r0, [r3, #0]
 8013748:	f7ff bc2a 	b.w	8012fa0 <DisplayUdf::ShowNetmask()>
 801374c:	2000a8d0 	ldrdcs	sl, [r0], -r0

08013750 <NetworkDisplay::ShowGatewayIp()>:
 8013750:	4b01      	ldr	r3, [pc, #4]	; (8013758 <NetworkDisplay::ShowGatewayIp()+0x8>)
 8013752:	6818      	ldr	r0, [r3, #0]
 8013754:	f7ff bc42 	b.w	8012fdc <DisplayUdf::ShowGatewayIp()>
 8013758:	2000a8d0 	ldrdcs	sl, [r0], -r0

0801375c <NetworkDisplay::ShowShutdown()>:
 801375c:	4b01      	ldr	r3, [pc, #4]	; (8013764 <NetworkDisplay::ShowShutdown()+0x8>)
 801375e:	6818      	ldr	r0, [r3, #0]
 8013760:	f7ff bcec 	b.w	801313c <DisplayUdf::ShowShutdown()>
 8013764:	2000a8d0 	ldrdcs	sl, [r0], -r0

08013768 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 8013768:	4b01      	ldr	r3, [pc, #4]	; (8013770 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)+0x8>)
 801376a:	6818      	ldr	r0, [r3, #0]
 801376c:	f7ff bcae 	b.w	80130cc <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8013770:	2000a8d0 	ldrdcs	sl, [r0], -r0

08013774 <properties::convert_json_file(char*, unsigned short, bool)>:
 8013774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013778:	4603      	mov	r3, r0
 801377a:	7800      	ldrb	r0, [r0, #0]
 801377c:	287b      	cmp	r0, #123	; 0x7b
 801377e:	f040 80a2 	bne.w	80138c6 <properties::convert_json_file(char*, unsigned short, bool)+0x152>
 8013782:	b17a      	cbz	r2, 80137a4 <properties::convert_json_file(char*, unsigned short, bool)+0x30>
 8013784:	2401      	movs	r4, #1
 8013786:	461e      	mov	r6, r3
 8013788:	4620      	mov	r0, r4
 801378a:	2a00      	cmp	r2, #0
 801378c:	bf0c      	ite	eq
 801378e:	f04f 0c0a 	moveq.w	ip, #10
 8013792:	f04f 0c00 	movne.w	ip, #0
 8013796:	273d      	movs	r7, #61	; 0x3d
 8013798:	42a1      	cmp	r1, r4
 801379a:	d850      	bhi.n	801383e <properties::convert_json_file(char*, unsigned short, bool)+0xca>
 801379c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137a0:	463c      	mov	r4, r7
 80137a2:	e7f2      	b.n	801378a <properties::convert_json_file(char*, unsigned short, bool)+0x16>
 80137a4:	2023      	movs	r0, #35	; 0x23
 80137a6:	f803 0b01 	strb.w	r0, [r3], #1
 80137aa:	461c      	mov	r4, r3
 80137ac:	2701      	movs	r7, #1
 80137ae:	42b9      	cmp	r1, r7
 80137b0:	d811      	bhi.n	80137d6 <properties::convert_json_file(char*, unsigned short, bool)+0x62>
 80137b2:	2001      	movs	r0, #1
 80137b4:	461e      	mov	r6, r3
 80137b6:	230a      	movs	r3, #10
 80137b8:	4625      	mov	r5, r4
 80137ba:	f806 3b01 	strb.w	r3, [r6], #1
 80137be:	3001      	adds	r0, #1
 80137c0:	462b      	mov	r3, r5
 80137c2:	781c      	ldrb	r4, [r3, #0]
 80137c4:	3501      	adds	r5, #1
 80137c6:	2c7b      	cmp	r4, #123	; 0x7b
 80137c8:	d0ea      	beq.n	80137a0 <properties::convert_json_file(char*, unsigned short, bool)+0x2c>
 80137ca:	42b9      	cmp	r1, r7
 80137cc:	f107 0401 	add.w	r4, r7, #1
 80137d0:	d9db      	bls.n	801378a <properties::convert_json_file(char*, unsigned short, bool)+0x16>
 80137d2:	4627      	mov	r7, r4
 80137d4:	e7f4      	b.n	80137c0 <properties::convert_json_file(char*, unsigned short, bool)+0x4c>
 80137d6:	f814 0b01 	ldrb.w	r0, [r4], #1
 80137da:	2822      	cmp	r0, #34	; 0x22
 80137dc:	d119      	bne.n	8013812 <properties::convert_json_file(char*, unsigned short, bool)+0x9e>
 80137de:	46a4      	mov	ip, r4
 80137e0:	461d      	mov	r5, r3
 80137e2:	2601      	movs	r6, #1
 80137e4:	f89c e000 	ldrb.w	lr, [ip]
 80137e8:	4664      	mov	r4, ip
 80137ea:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 80137ee:	462b      	mov	r3, r5
 80137f0:	4630      	mov	r0, r6
 80137f2:	f10c 0c01 	add.w	ip, ip, #1
 80137f6:	f105 0501 	add.w	r5, r5, #1
 80137fa:	f106 0601 	add.w	r6, r6, #1
 80137fe:	d0d9      	beq.n	80137b4 <properties::convert_json_file(char*, unsigned short, bool)+0x40>
 8013800:	3701      	adds	r7, #1
 8013802:	42b9      	cmp	r1, r7
 8013804:	4664      	mov	r4, ip
 8013806:	f805 ec01 	strb.w	lr, [r5, #-1]
 801380a:	d8eb      	bhi.n	80137e4 <properties::convert_json_file(char*, unsigned short, bool)+0x70>
 801380c:	4630      	mov	r0, r6
 801380e:	462b      	mov	r3, r5
 8013810:	e7d0      	b.n	80137b4 <properties::convert_json_file(char*, unsigned short, bool)+0x40>
 8013812:	3701      	adds	r7, #1
 8013814:	e7cb      	b.n	80137ae <properties::convert_json_file(char*, unsigned short, bool)+0x3a>
 8013816:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 801381a:	d110      	bne.n	801383e <properties::convert_json_file(char*, unsigned short, bool)+0xca>
 801381c:	eba0 0803 	sub.w	r8, r0, r3
 8013820:	461a      	mov	r2, r3
 8013822:	eb08 0003 	add.w	r0, r8, r3
 8013826:	f813 eb01 	ldrb.w	lr, [r3], #1
 801382a:	1c65      	adds	r5, r4, #1
 801382c:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8013830:	d04c      	beq.n	80138cc <properties::convert_json_file(char*, unsigned short, bool)+0x158>
 8013832:	42a1      	cmp	r1, r4
 8013834:	d911      	bls.n	801385a <properties::convert_json_file(char*, unsigned short, bool)+0xe6>
 8013836:	462c      	mov	r4, r5
 8013838:	f806 eb01 	strb.w	lr, [r6], #1
 801383c:	e7f0      	b.n	8013820 <properties::convert_json_file(char*, unsigned short, bool)+0xac>
 801383e:	42a1      	cmp	r1, r4
 8013840:	461d      	mov	r5, r3
 8013842:	f893 e000 	ldrb.w	lr, [r3]
 8013846:	f104 0401 	add.w	r4, r4, #1
 801384a:	f103 0301 	add.w	r3, r3, #1
 801384e:	d8e2      	bhi.n	8013816 <properties::convert_json_file(char*, unsigned short, bool)+0xa2>
 8013850:	462b      	mov	r3, r5
 8013852:	e7e3      	b.n	801381c <properties::convert_json_file(char*, unsigned short, bool)+0xa8>
 8013854:	f1be 0f3a 	cmp.w	lr, #58	; 0x3a
 8013858:	d009      	beq.n	801386e <properties::convert_json_file(char*, unsigned short, bool)+0xfa>
 801385a:	42a9      	cmp	r1, r5
 801385c:	4614      	mov	r4, r2
 801385e:	f892 e000 	ldrb.w	lr, [r2]
 8013862:	f105 0501 	add.w	r5, r5, #1
 8013866:	f102 0201 	add.w	r2, r2, #1
 801386a:	d8f3      	bhi.n	8013854 <properties::convert_json_file(char*, unsigned short, bool)+0xe0>
 801386c:	4622      	mov	r2, r4
 801386e:	7814      	ldrb	r4, [r2, #0]
 8013870:	4696      	mov	lr, r2
 8013872:	2c2f      	cmp	r4, #47	; 0x2f
 8013874:	462b      	mov	r3, r5
 8013876:	f102 0201 	add.w	r2, r2, #1
 801387a:	f105 0501 	add.w	r5, r5, #1
 801387e:	d81a      	bhi.n	80138b6 <properties::convert_json_file(char*, unsigned short, bool)+0x142>
 8013880:	4299      	cmp	r1, r3
 8013882:	d8f4      	bhi.n	801386e <properties::convert_json_file(char*, unsigned short, bool)+0xfa>
 8013884:	2c22      	cmp	r4, #34	; 0x22
 8013886:	bf08      	it	eq
 8013888:	4696      	moveq	lr, r2
 801388a:	4673      	mov	r3, lr
 801388c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013890:	1c6c      	adds	r4, r5, #1
 8013892:	2a22      	cmp	r2, #34	; 0x22
 8013894:	d011      	beq.n	80138ba <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 8013896:	2a2c      	cmp	r2, #44	; 0x2c
 8013898:	d00f      	beq.n	80138ba <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 801389a:	2a7d      	cmp	r2, #125	; 0x7d
 801389c:	d00d      	beq.n	80138ba <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 801389e:	42a9      	cmp	r1, r5
 80138a0:	d90f      	bls.n	80138c2 <properties::convert_json_file(char*, unsigned short, bool)+0x14e>
 80138a2:	f1a2 0520 	sub.w	r5, r2, #32
 80138a6:	2d5a      	cmp	r5, #90	; 0x5a
 80138a8:	d803      	bhi.n	80138b2 <properties::convert_json_file(char*, unsigned short, bool)+0x13e>
 80138aa:	469e      	mov	lr, r3
 80138ac:	f806 2b01 	strb.w	r2, [r6], #1
 80138b0:	3001      	adds	r0, #1
 80138b2:	4625      	mov	r5, r4
 80138b4:	e7e9      	b.n	801388a <properties::convert_json_file(char*, unsigned short, bool)+0x116>
 80138b6:	461d      	mov	r5, r3
 80138b8:	e7e7      	b.n	801388a <properties::convert_json_file(char*, unsigned short, bool)+0x116>
 80138ba:	462c      	mov	r4, r5
 80138bc:	f806 cb01 	strb.w	ip, [r6], #1
 80138c0:	3001      	adds	r0, #1
 80138c2:	3401      	adds	r4, #1
 80138c4:	e768      	b.n	8013798 <properties::convert_json_file(char*, unsigned short, bool)+0x24>
 80138c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80138ca:	e767      	b.n	801379c <properties::convert_json_file(char*, unsigned short, bool)+0x28>
 80138cc:	4625      	mov	r5, r4
 80138ce:	f806 7b01 	strb.w	r7, [r6], #1
 80138d2:	3001      	adds	r0, #1
 80138d4:	e7c1      	b.n	801385a <properties::convert_json_file(char*, unsigned short, bool)+0xe6>
	...

080138d8 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>:
 80138d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138dc:	6002      	str	r2, [r0, #0]
 80138de:	4614      	mov	r4, r2
 80138e0:	2200      	movs	r2, #0
 80138e2:	80c2      	strh	r2, [r0, #6]
 80138e4:	4a1c      	ldr	r2, [pc, #112]	; (8013958 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x80>)
 80138e6:	4606      	mov	r6, r0
 80138e8:	7812      	ldrb	r2, [r2, #0]
 80138ea:	8083      	strh	r3, [r0, #4]
 80138ec:	f002 0201 	and.w	r2, r2, #1
 80138f0:	7202      	strb	r2, [r0, #8]
 80138f2:	4608      	mov	r0, r1
 80138f4:	4605      	mov	r5, r0
 80138f6:	782f      	ldrb	r7, [r5, #0]
 80138f8:	3001      	adds	r0, #1
 80138fa:	2f00      	cmp	r7, #0
 80138fc:	d1fa      	bne.n	80138f4 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x1c>
 80138fe:	1a6d      	subs	r5, r5, r1
 8013900:	b29b      	uxth	r3, r3
 8013902:	b1d2      	cbz	r2, 801393a <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x62>
 8013904:	1d2f      	adds	r7, r5, #4
 8013906:	429f      	cmp	r7, r3
 8013908:	d814      	bhi.n	8013934 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 801390a:	f04f 087b 	mov.w	r8, #123	; 0x7b
 801390e:	f04f 0922 	mov.w	r9, #34	; 0x22
 8013912:	462a      	mov	r2, r5
 8013914:	f884 8000 	strb.w	r8, [r4]
 8013918:	f884 9001 	strb.w	r9, [r4, #1]
 801391c:	1ca0      	adds	r0, r4, #2
 801391e:	f000 ff46 	bl	80147ae <memmove>
 8013922:	223a      	movs	r2, #58	; 0x3a
 8013924:	1963      	adds	r3, r4, r5
 8013926:	3505      	adds	r5, #5
 8013928:	f883 9002 	strb.w	r9, [r3, #2]
 801392c:	70da      	strb	r2, [r3, #3]
 801392e:	80f5      	strh	r5, [r6, #6]
 8013930:	f804 8007 	strb.w	r8, [r4, r7]
 8013934:	4630      	mov	r0, r6
 8013936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801393a:	1caf      	adds	r7, r5, #2
 801393c:	429f      	cmp	r7, r3
 801393e:	d8f9      	bhi.n	8013934 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8013940:	4620      	mov	r0, r4
 8013942:	2323      	movs	r3, #35	; 0x23
 8013944:	462a      	mov	r2, r5
 8013946:	f800 3b01 	strb.w	r3, [r0], #1
 801394a:	f000 ff30 	bl	80147ae <memmove>
 801394e:	230a      	movs	r3, #10
 8013950:	442c      	add	r4, r5
 8013952:	7063      	strb	r3, [r4, #1]
 8013954:	80f7      	strh	r7, [r6, #6]
 8013956:	e7ed      	b.n	8013934 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8013958:	2000a8d4 	ldrdcs	sl, [r0], -r4

0801395c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>:
 801395c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801395e:	469c      	mov	ip, r3
 8013960:	8885      	ldrh	r5, [r0, #4]
 8013962:	88c3      	ldrh	r3, [r0, #6]
 8013964:	b085      	sub	sp, #20
 8013966:	42ab      	cmp	r3, r5
 8013968:	d302      	bcc.n	8013970 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x14>
 801396a:	2000      	movs	r0, #0
 801396c:	b005      	add	sp, #20
 801396e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013970:	4604      	mov	r4, r0
 8013972:	6800      	ldr	r0, [r0, #0]
 8013974:	1aed      	subs	r5, r5, r3
 8013976:	4418      	add	r0, r3
 8013978:	b2d6      	uxtb	r6, r2
 801397a:	f3c2 2707 	ubfx	r7, r2, #8, #8
 801397e:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8013982:	f894 e008 	ldrb.w	lr, [r4, #8]
 8013986:	0e12      	lsrs	r2, r2, #24
 8013988:	f1bc 0f00 	cmp.w	ip, #0
 801398c:	d109      	bne.n	80139a2 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x46>
 801398e:	f1be 0f00 	cmp.w	lr, #0
 8013992:	d109      	bne.n	80139a8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x4c>
 8013994:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8013998:	e9cd 6700 	strd	r6, r7, [sp]
 801399c:	460b      	mov	r3, r1
 801399e:	4a0e      	ldr	r2, [pc, #56]	; (80139d8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x7c>)
 80139a0:	e008      	b.n	80139b4 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 80139a2:	f1be 0f00 	cmp.w	lr, #0
 80139a6:	d00f      	beq.n	80139c8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x6c>
 80139a8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80139ac:	460b      	mov	r3, r1
 80139ae:	e9cd 6700 	strd	r6, r7, [sp]
 80139b2:	4a0a      	ldr	r2, [pc, #40]	; (80139dc <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x80>)
 80139b4:	4629      	mov	r1, r5
 80139b6:	f7f5 fd15 	bl	80093e4 <snprintf>
 80139ba:	4285      	cmp	r5, r0
 80139bc:	dbd5      	blt.n	801396a <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0xe>
 80139be:	88e3      	ldrh	r3, [r4, #6]
 80139c0:	4403      	add	r3, r0
 80139c2:	80e3      	strh	r3, [r4, #6]
 80139c4:	2001      	movs	r0, #1
 80139c6:	e7d1      	b.n	801396c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x10>
 80139c8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80139cc:	e9cd 6700 	strd	r6, r7, [sp]
 80139d0:	460b      	mov	r3, r1
 80139d2:	4a03      	ldr	r2, [pc, #12]	; (80139e0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x84>)
 80139d4:	e7ee      	b.n	80139b4 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 80139d6:	bf00      	nop
 80139d8:	080187cb 	stmdaeq	r1, {r0, r1, r3, r6, r7, r8, r9, sl, pc}
 80139dc:	080187b7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, r8, r9, sl, pc}
 80139e0:	080187cc 	stmdaeq	r1, {r2, r3, r6, r7, r8, r9, sl, pc}

080139e4 <PropertiesBuilder::AddComment(char const*)>:
 80139e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139e6:	7a06      	ldrb	r6, [r0, #8]
 80139e8:	b996      	cbnz	r6, 8013a10 <PropertiesBuilder::AddComment(char const*)+0x2c>
 80139ea:	4604      	mov	r4, r0
 80139ec:	88c0      	ldrh	r0, [r0, #6]
 80139ee:	88a5      	ldrh	r5, [r4, #4]
 80139f0:	42a8      	cmp	r0, r5
 80139f2:	d20d      	bcs.n	8013a10 <PropertiesBuilder::AddComment(char const*)+0x2c>
 80139f4:	6827      	ldr	r7, [r4, #0]
 80139f6:	1a2d      	subs	r5, r5, r0
 80139f8:	460b      	mov	r3, r1
 80139fa:	4a06      	ldr	r2, [pc, #24]	; (8013a14 <PropertiesBuilder::AddComment(char const*)+0x30>)
 80139fc:	4629      	mov	r1, r5
 80139fe:	4438      	add	r0, r7
 8013a00:	f7f5 fcf0 	bl	80093e4 <snprintf>
 8013a04:	4285      	cmp	r5, r0
 8013a06:	bfa1      	itttt	ge
 8013a08:	2601      	movge	r6, #1
 8013a0a:	88e3      	ldrhge	r3, [r4, #6]
 8013a0c:	18c0      	addge	r0, r0, r3
 8013a0e:	80e0      	strhge	r0, [r4, #6]
 8013a10:	4630      	mov	r0, r6
 8013a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a14:	080187dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, r9, sl, pc}

08013a18 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)>:
 8013a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013a1a:	88c7      	ldrh	r7, [r0, #6]
 8013a1c:	8885      	ldrh	r5, [r0, #4]
 8013a1e:	9e08      	ldr	r6, [sp, #32]
 8013a20:	42af      	cmp	r7, r5
 8013a22:	d302      	bcc.n	8013a2a <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x12>
 8013a24:	2000      	movs	r0, #0
 8013a26:	b003      	add	sp, #12
 8013a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a2a:	4604      	mov	r4, r0
 8013a2c:	6800      	ldr	r0, [r0, #0]
 8013a2e:	1bed      	subs	r5, r5, r7
 8013a30:	4438      	add	r0, r7
 8013a32:	7a27      	ldrb	r7, [r4, #8]
 8013a34:	b92b      	cbnz	r3, 8013a42 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x2a>
 8013a36:	b92f      	cbnz	r7, 8013a44 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x2c>
 8013a38:	e9cd 6200 	strd	r6, r2, [sp]
 8013a3c:	460b      	mov	r3, r1
 8013a3e:	4a0b      	ldr	r2, [pc, #44]	; (8013a6c <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x54>)
 8013a40:	e004      	b.n	8013a4c <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x34>
 8013a42:	b16f      	cbz	r7, 8013a60 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x48>
 8013a44:	460b      	mov	r3, r1
 8013a46:	e9cd 6200 	strd	r6, r2, [sp]
 8013a4a:	4a09      	ldr	r2, [pc, #36]	; (8013a70 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x58>)
 8013a4c:	4629      	mov	r1, r5
 8013a4e:	f7f5 fcc9 	bl	80093e4 <snprintf>
 8013a52:	4285      	cmp	r5, r0
 8013a54:	dbe6      	blt.n	8013a24 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0xc>
 8013a56:	88e3      	ldrh	r3, [r4, #6]
 8013a58:	4403      	add	r3, r0
 8013a5a:	80e3      	strh	r3, [r4, #6]
 8013a5c:	2001      	movs	r0, #1
 8013a5e:	e7e2      	b.n	8013a26 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0xe>
 8013a60:	e9cd 6200 	strd	r6, r2, [sp]
 8013a64:	460b      	mov	r3, r1
 8013a66:	4a03      	ldr	r2, [pc, #12]	; (8013a74 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x5c>)
 8013a68:	e7f0      	b.n	8013a4c <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x34>
 8013a6a:	bf00      	nop
 8013a6c:	080187f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r8, r9, sl, pc}
 8013a70:	080187e4 	stmdaeq	r1, {r2, r5, r6, r7, r8, r9, sl, pc}
 8013a74:	080187f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, r8, r9, sl, pc}

08013a78 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>:
 8013a78:	e9c0 1200 	strd	r1, r2, [r0]
 8013a7c:	4770      	bx	lr

08013a7e <ReadConfigFile::~ReadConfigFile()>:
 8013a7e:	4770      	bx	lr

08013a80 <ReadConfigFile::Read(char const*, unsigned int)>:
 8013a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a84:	4606      	mov	r6, r0
 8013a86:	460d      	mov	r5, r1
 8013a88:	4614      	mov	r4, r2
 8013a8a:	f04f 0800 	mov.w	r8, #0
 8013a8e:	b090      	sub	sp, #64	; 0x40
 8013a90:	b33c      	cbz	r4, 8013ae2 <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 8013a92:	466b      	mov	r3, sp
 8013a94:	462a      	mov	r2, r5
 8013a96:	4619      	mov	r1, r3
 8013a98:	e007      	b.n	8013aaa <ReadConfigFile::Read(char const*, unsigned int)+0x2a>
 8013a9a:	f803 7b01 	strb.w	r7, [r3], #1
 8013a9e:	1a58      	subs	r0, r3, r1
 8013aa0:	283f      	cmp	r0, #63	; 0x3f
 8013aa2:	4615      	mov	r5, r2
 8013aa4:	dc1d      	bgt.n	8013ae2 <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 8013aa6:	3c01      	subs	r4, #1
 8013aa8:	d00f      	beq.n	8013aca <ReadConfigFile::Read(char const*, unsigned int)+0x4a>
 8013aaa:	7817      	ldrb	r7, [r2, #0]
 8013aac:	4610      	mov	r0, r2
 8013aae:	2f0d      	cmp	r7, #13
 8013ab0:	f102 0201 	add.w	r2, r2, #1
 8013ab4:	d001      	beq.n	8013aba <ReadConfigFile::Read(char const*, unsigned int)+0x3a>
 8013ab6:	2f0a      	cmp	r7, #10
 8013ab8:	d1ef      	bne.n	8013a9a <ReadConfigFile::Read(char const*, unsigned int)+0x1a>
 8013aba:	4605      	mov	r5, r0
 8013abc:	b12c      	cbz	r4, 8013aca <ReadConfigFile::Read(char const*, unsigned int)+0x4a>
 8013abe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013ac2:	2a0d      	cmp	r2, #13
 8013ac4:	d00b      	beq.n	8013ade <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 8013ac6:	2a0a      	cmp	r2, #10
 8013ac8:	d009      	beq.n	8013ade <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 8013aca:	f89d 2000 	ldrb.w	r2, [sp]
 8013ace:	2a60      	cmp	r2, #96	; 0x60
 8013ad0:	d9de      	bls.n	8013a90 <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 8013ad2:	f883 8000 	strb.w	r8, [r3]
 8013ad6:	e9d6 3000 	ldrd	r3, r0, [r6]
 8013ada:	4798      	blx	r3
 8013adc:	e7d8      	b.n	8013a90 <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 8013ade:	3c01      	subs	r4, #1
 8013ae0:	e7eb      	b.n	8013aba <ReadConfigFile::Read(char const*, unsigned int)+0x3a>
 8013ae2:	b010      	add	sp, #64	; 0x40
 8013ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013ae8 <Sscan::Char(char const*, char const*, char*, unsigned int&)>:
 8013ae8:	b570      	push	{r4, r5, r6, lr}
 8013aea:	4615      	mov	r5, r2
 8013aec:	461c      	mov	r4, r3
 8013aee:	f000 f946 	bl	8013d7e <Sscan::checkName(char const*, char const*)>
 8013af2:	b180      	cbz	r0, 8013b16 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2e>
 8013af4:	2100      	movs	r1, #0
 8013af6:	5c43      	ldrb	r3, [r0, r1]
 8013af8:	6826      	ldr	r6, [r4, #0]
 8013afa:	b28a      	uxth	r2, r1
 8013afc:	b143      	cbz	r3, 8013b10 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x28>
 8013afe:	42b2      	cmp	r2, r6
 8013b00:	d303      	bcc.n	8013b0a <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x22>
 8013b02:	2b0a      	cmp	r3, #10
 8013b04:	d004      	beq.n	8013b10 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x28>
 8013b06:	2002      	movs	r0, #2
 8013b08:	e004      	b.n	8013b14 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2c>
 8013b0a:	546b      	strb	r3, [r5, r1]
 8013b0c:	3101      	adds	r1, #1
 8013b0e:	e7f2      	b.n	8013af6 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0xe>
 8013b10:	2000      	movs	r0, #0
 8013b12:	6022      	str	r2, [r4, #0]
 8013b14:	bd70      	pop	{r4, r5, r6, pc}
 8013b16:	2001      	movs	r0, #1
 8013b18:	e7fc      	b.n	8013b14 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2c>

08013b1a <Sscan::Float(char const*, char const*, float&)>:
 8013b1a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b1e:	4616      	mov	r6, r2
 8013b20:	f000 f92d 	bl	8013d7e <Sscan::checkName(char const*, char const*)>
 8013b24:	2800      	cmp	r0, #0
 8013b26:	d059      	beq.n	8013bdc <Sscan::Float(char const*, char const*, float&)+0xc2>
 8013b28:	4604      	mov	r4, r0
 8013b2a:	7803      	ldrb	r3, [r0, #0]
 8013b2c:	2b2d      	cmp	r3, #45	; 0x2d
 8013b2e:	bf08      	it	eq
 8013b30:	3401      	addeq	r4, #1
 8013b32:	7823      	ldrb	r3, [r4, #0]
 8013b34:	bf0c      	ite	eq
 8013b36:	f04f 0801 	moveq.w	r8, #1
 8013b3a:	f04f 0800 	movne.w	r8, #0
 8013b3e:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8013b42:	d103      	bne.n	8013b4c <Sscan::Float(char const*, char const*, float&)+0x32>
 8013b44:	2702      	movs	r7, #2
 8013b46:	4638      	mov	r0, r7
 8013b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b4c:	2000      	movs	r0, #0
 8013b4e:	220a      	movs	r2, #10
 8013b50:	7823      	ldrb	r3, [r4, #0]
 8013b52:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013b56:	2909      	cmp	r1, #9
 8013b58:	d8f4      	bhi.n	8013b44 <Sscan::Float(char const*, char const*, float&)+0x2a>
 8013b5a:	fb02 3000 	mla	r0, r2, r0, r3
 8013b5e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013b62:	3830      	subs	r0, #48	; 0x30
 8013b64:	2b2e      	cmp	r3, #46	; 0x2e
 8013b66:	d002      	beq.n	8013b6e <Sscan::Float(char const*, char const*, float&)+0x54>
 8013b68:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8013b6c:	d1f0      	bne.n	8013b50 <Sscan::Float(char const*, char const*, float&)+0x36>
 8013b6e:	f7f4 f8bf 	bl	8007cf0 <__aeabi_ui2f>
 8013b72:	6030      	str	r0, [r6, #0]
 8013b74:	7823      	ldrb	r3, [r4, #0]
 8013b76:	4605      	mov	r5, r0
 8013b78:	2b2e      	cmp	r3, #46	; 0x2e
 8013b7a:	d008      	beq.n	8013b8e <Sscan::Float(char const*, char const*, float&)+0x74>
 8013b7c:	f1b8 0f00 	cmp.w	r8, #0
 8013b80:	d101      	bne.n	8013b86 <Sscan::Float(char const*, char const*, float&)+0x6c>
 8013b82:	2700      	movs	r7, #0
 8013b84:	e7df      	b.n	8013b46 <Sscan::Float(char const*, char const*, float&)+0x2c>
 8013b86:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 8013b8a:	6035      	str	r5, [r6, #0]
 8013b8c:	e7f9      	b.n	8013b82 <Sscan::Float(char const*, char const*, float&)+0x68>
 8013b8e:	f04f 0901 	mov.w	r9, #1
 8013b92:	2000      	movs	r0, #0
 8013b94:	220a      	movs	r2, #10
 8013b96:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013b9a:	f013 07df 	ands.w	r7, r3, #223	; 0xdf
 8013b9e:	d111      	bne.n	8013bc4 <Sscan::Float(char const*, char const*, float&)+0xaa>
 8013ba0:	f7f4 f8a6 	bl	8007cf0 <__aeabi_ui2f>
 8013ba4:	4604      	mov	r4, r0
 8013ba6:	4648      	mov	r0, r9
 8013ba8:	f7f4 f8a2 	bl	8007cf0 <__aeabi_ui2f>
 8013bac:	4601      	mov	r1, r0
 8013bae:	4620      	mov	r0, r4
 8013bb0:	f7f4 fc1c 	bl	80083ec <__aeabi_fdiv>
 8013bb4:	4629      	mov	r1, r5
 8013bb6:	f7f3 ffeb 	bl	8007b90 <__addsf3>
 8013bba:	f1b8 0f00 	cmp.w	r8, #0
 8013bbe:	d109      	bne.n	8013bd4 <Sscan::Float(char const*, char const*, float&)+0xba>
 8013bc0:	6030      	str	r0, [r6, #0]
 8013bc2:	e7de      	b.n	8013b82 <Sscan::Float(char const*, char const*, float&)+0x68>
 8013bc4:	3b30      	subs	r3, #48	; 0x30
 8013bc6:	2b09      	cmp	r3, #9
 8013bc8:	d8bc      	bhi.n	8013b44 <Sscan::Float(char const*, char const*, float&)+0x2a>
 8013bca:	fb02 3000 	mla	r0, r2, r0, r3
 8013bce:	fb02 f909 	mul.w	r9, r2, r9
 8013bd2:	e7e0      	b.n	8013b96 <Sscan::Float(char const*, char const*, float&)+0x7c>
 8013bd4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8013bd8:	6030      	str	r0, [r6, #0]
 8013bda:	e7b4      	b.n	8013b46 <Sscan::Float(char const*, char const*, float&)+0x2c>
 8013bdc:	2701      	movs	r7, #1
 8013bde:	e7b2      	b.n	8013b46 <Sscan::Float(char const*, char const*, float&)+0x2c>

08013be0 <Sscan::HexUint16(char const*, char const*, unsigned short&)>:
 8013be0:	b570      	push	{r4, r5, r6, lr}
 8013be2:	4616      	mov	r6, r2
 8013be4:	f000 f8cb 	bl	8013d7e <Sscan::checkName(char const*, char const*)>
 8013be8:	bb08      	cbnz	r0, 8013c2e <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x4e>
 8013bea:	2001      	movs	r0, #1
 8013bec:	bd70      	pop	{r4, r5, r6, pc}
 8013bee:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
 8013bf2:	2d09      	cmp	r5, #9
 8013bf4:	d904      	bls.n	8013c00 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x20>
 8013bf6:	f041 0220 	orr.w	r2, r1, #32
 8013bfa:	3a61      	subs	r2, #97	; 0x61
 8013bfc:	2a05      	cmp	r2, #5
 8013bfe:	d8f4      	bhi.n	8013bea <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xa>
 8013c00:	2939      	cmp	r1, #57	; 0x39
 8013c02:	bf83      	ittte	hi
 8013c04:	f041 0120 	orrhi.w	r1, r1, #32
 8013c08:	3957      	subhi	r1, #87	; 0x57
 8013c0a:	b2c9      	uxtbhi	r1, r1
 8013c0c:	b2e9      	uxtbls	r1, r5
 8013c0e:	ea41 1404 	orr.w	r4, r1, r4, lsl #4
 8013c12:	b2a4      	uxth	r4, r4
 8013c14:	3301      	adds	r3, #1
 8013c16:	8034      	strh	r4, [r6, #0]
 8013c18:	5cc1      	ldrb	r1, [r0, r3]
 8013c1a:	b119      	cbz	r1, 8013c24 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x44>
 8013c1c:	2b04      	cmp	r3, #4
 8013c1e:	d1e6      	bne.n	8013bee <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xe>
 8013c20:	2920      	cmp	r1, #32
 8013c22:	d1e2      	bne.n	8013bea <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xa>
 8013c24:	1f18      	subs	r0, r3, #4
 8013c26:	bf18      	it	ne
 8013c28:	2001      	movne	r0, #1
 8013c2a:	0040      	lsls	r0, r0, #1
 8013c2c:	e7de      	b.n	8013bec <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xc>
 8013c2e:	2400      	movs	r4, #0
 8013c30:	4623      	mov	r3, r4
 8013c32:	e7f0      	b.n	8013c16 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x36>

08013c34 <Sscan::IpAddress(char const*, char const*, unsigned int&)>:
 8013c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013c36:	4615      	mov	r5, r2
 8013c38:	f000 f8a1 	bl	8013d7e <Sscan::checkName(char const*, char const*)>
 8013c3c:	bb58      	cbnz	r0, 8013c96 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x62>
 8013c3e:	2001      	movs	r0, #1
 8013c40:	e027      	b.n	8013c92 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5e>
 8013c42:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8013c46:	2b09      	cmp	r3, #9
 8013c48:	d822      	bhi.n	8013c90 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8013c4a:	4603      	mov	r3, r0
 8013c4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013c50:	3930      	subs	r1, #48	; 0x30
 8013c52:	4618      	mov	r0, r3
 8013c54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c58:	2a2e      	cmp	r2, #46	; 0x2e
 8013c5a:	d115      	bne.n	8013c88 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x54>
 8013c5c:	29ff      	cmp	r1, #255	; 0xff
 8013c5e:	d817      	bhi.n	8013c90 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8013c60:	3401      	adds	r4, #1
 8013c62:	2c03      	cmp	r4, #3
 8013c64:	f806 1b01 	strb.w	r1, [r6], #1
 8013c68:	d119      	bne.n	8013c9e <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x6a>
 8013c6a:	2400      	movs	r4, #0
 8013c6c:	260a      	movs	r6, #10
 8013c6e:	1d1a      	adds	r2, r3, #4
 8013c70:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8013c74:	f011 00df 	ands.w	r0, r1, #223	; 0xdf
 8013c78:	d115      	bne.n	8013ca6 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x72>
 8013c7a:	2cff      	cmp	r4, #255	; 0xff
 8013c7c:	d808      	bhi.n	8013c90 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8013c7e:	f88d 4007 	strb.w	r4, [sp, #7]
 8013c82:	9b01      	ldr	r3, [sp, #4]
 8013c84:	602b      	str	r3, [r5, #0]
 8013c86:	e004      	b.n	8013c92 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5e>
 8013c88:	2a00      	cmp	r2, #0
 8013c8a:	d0e7      	beq.n	8013c5c <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 8013c8c:	42b8      	cmp	r0, r7
 8013c8e:	d1d8      	bne.n	8013c42 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0xe>
 8013c90:	2002      	movs	r0, #2
 8013c92:	b003      	add	sp, #12
 8013c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c96:	2400      	movs	r4, #0
 8013c98:	f04f 0c0a 	mov.w	ip, #10
 8013c9c:	ae01      	add	r6, sp, #4
 8013c9e:	4603      	mov	r3, r0
 8013ca0:	2100      	movs	r1, #0
 8013ca2:	1d07      	adds	r7, r0, #4
 8013ca4:	e7d5      	b.n	8013c52 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x1e>
 8013ca6:	4293      	cmp	r3, r2
 8013ca8:	d0f2      	beq.n	8013c90 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8013caa:	3930      	subs	r1, #48	; 0x30
 8013cac:	2909      	cmp	r1, #9
 8013cae:	d8ef      	bhi.n	8013c90 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8013cb0:	fb06 1404 	mla	r4, r6, r4, r1
 8013cb4:	e7dc      	b.n	8013c70 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x3c>

08013cb6 <Sscan::Uint16(char const*, char const*, unsigned short&)>:
 8013cb6:	b538      	push	{r3, r4, r5, lr}
 8013cb8:	4615      	mov	r5, r2
 8013cba:	f000 f860 	bl	8013d7e <Sscan::checkName(char const*, char const*)>
 8013cbe:	b1a0      	cbz	r0, 8013cea <Sscan::Uint16(char const*, char const*, unsigned short&)+0x34>
 8013cc0:	4604      	mov	r4, r0
 8013cc2:	2100      	movs	r1, #0
 8013cc4:	220a      	movs	r2, #10
 8013cc6:	7823      	ldrb	r3, [r4, #0]
 8013cc8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8013ccc:	2809      	cmp	r0, #9
 8013cce:	d80e      	bhi.n	8013cee <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 8013cd0:	fb02 3101 	mla	r1, r2, r1, r3
 8013cd4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013cd8:	3930      	subs	r1, #48	; 0x30
 8013cda:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 8013cde:	d1f2      	bne.n	8013cc6 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x10>
 8013ce0:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8013ce4:	d203      	bcs.n	8013cee <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 8013ce6:	8029      	strh	r1, [r5, #0]
 8013ce8:	bd38      	pop	{r3, r4, r5, pc}
 8013cea:	2001      	movs	r0, #1
 8013cec:	e7fc      	b.n	8013ce8 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>
 8013cee:	2002      	movs	r0, #2
 8013cf0:	e7fa      	b.n	8013ce8 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>

08013cf2 <Sscan::Uint32(char const*, char const*, unsigned int&)>:
 8013cf2:	b570      	push	{r4, r5, r6, lr}
 8013cf4:	4615      	mov	r5, r2
 8013cf6:	f000 f842 	bl	8013d7e <Sscan::checkName(char const*, char const*)>
 8013cfa:	b1f8      	cbz	r0, 8013d3c <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4a>
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	4604      	mov	r4, r0
 8013d00:	461a      	mov	r2, r3
 8013d02:	260a      	movs	r6, #10
 8013d04:	7820      	ldrb	r0, [r4, #0]
 8013d06:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
 8013d0a:	2909      	cmp	r1, #9
 8013d0c:	d818      	bhi.n	8013d40 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4e>
 8013d0e:	fba3 3106 	umull	r3, r1, r3, r6
 8013d12:	fb06 1102 	mla	r1, r6, r2, r1
 8013d16:	3b30      	subs	r3, #48	; 0x30
 8013d18:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 8013d1c:	18c3      	adds	r3, r0, r3
 8013d1e:	f141 0200 	adc.w	r2, r1, #0
 8013d22:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8013d26:	f011 00df 	ands.w	r0, r1, #223	; 0xdf
 8013d2a:	d1eb      	bne.n	8013d04 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x12>
 8013d2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013d30:	4299      	cmp	r1, r3
 8013d32:	eb70 0202 	sbcs.w	r2, r0, r2
 8013d36:	d303      	bcc.n	8013d40 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4e>
 8013d38:	602b      	str	r3, [r5, #0]
 8013d3a:	bd70      	pop	{r4, r5, r6, pc}
 8013d3c:	2001      	movs	r0, #1
 8013d3e:	e7fc      	b.n	8013d3a <Sscan::Uint32(char const*, char const*, unsigned int&)+0x48>
 8013d40:	2002      	movs	r0, #2
 8013d42:	e7fa      	b.n	8013d3a <Sscan::Uint32(char const*, char const*, unsigned int&)+0x48>

08013d44 <Sscan::Uint8(char const*, char const*, unsigned char&)>:
 8013d44:	b538      	push	{r3, r4, r5, lr}
 8013d46:	4615      	mov	r5, r2
 8013d48:	f000 f819 	bl	8013d7e <Sscan::checkName(char const*, char const*)>
 8013d4c:	b198      	cbz	r0, 8013d76 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x32>
 8013d4e:	4604      	mov	r4, r0
 8013d50:	2100      	movs	r1, #0
 8013d52:	220a      	movs	r2, #10
 8013d54:	7823      	ldrb	r3, [r4, #0]
 8013d56:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8013d5a:	2809      	cmp	r0, #9
 8013d5c:	d80d      	bhi.n	8013d7a <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 8013d5e:	fb02 3101 	mla	r1, r2, r1, r3
 8013d62:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013d66:	3930      	subs	r1, #48	; 0x30
 8013d68:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 8013d6c:	d1f2      	bne.n	8013d54 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x10>
 8013d6e:	29ff      	cmp	r1, #255	; 0xff
 8013d70:	d803      	bhi.n	8013d7a <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 8013d72:	7029      	strb	r1, [r5, #0]
 8013d74:	bd38      	pop	{r3, r4, r5, pc}
 8013d76:	2001      	movs	r0, #1
 8013d78:	e7fc      	b.n	8013d74 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>
 8013d7a:	2002      	movs	r0, #2
 8013d7c:	e7fa      	b.n	8013d74 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>

08013d7e <Sscan::checkName(char const*, char const*)>:
 8013d7e:	4603      	mov	r3, r0
 8013d80:	b510      	push	{r4, lr}
 8013d82:	3901      	subs	r1, #1
 8013d84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013d88:	461c      	mov	r4, r3
 8013d8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013d8e:	b120      	cbz	r0, 8013d9a <Sscan::checkName(char const*, char const*)+0x1c>
 8013d90:	b10a      	cbz	r2, 8013d96 <Sscan::checkName(char const*, char const*)+0x18>
 8013d92:	4290      	cmp	r0, r2
 8013d94:	d0f6      	beq.n	8013d84 <Sscan::checkName(char const*, char const*)+0x6>
 8013d96:	2000      	movs	r0, #0
 8013d98:	e006      	b.n	8013da8 <Sscan::checkName(char const*, char const*)+0x2a>
 8013d9a:	2a3d      	cmp	r2, #61	; 0x3d
 8013d9c:	d104      	bne.n	8013da8 <Sscan::checkName(char const*, char const*)+0x2a>
 8013d9e:	7860      	ldrb	r0, [r4, #1]
 8013da0:	f010 00df 	ands.w	r0, r0, #223	; 0xdf
 8013da4:	d000      	beq.n	8013da8 <Sscan::checkName(char const*, char const*)+0x2a>
 8013da6:	1c60      	adds	r0, r4, #1
 8013da8:	bd10      	pop	{r4, pc}
	...

08013dac <Display::PrintInfo() [clone .isra.0]>:
 8013dac:	b910      	cbnz	r0, 8013db4 <Display::PrintInfo() [clone .isra.0]+0x8>
 8013dae:	4803      	ldr	r0, [pc, #12]	; (8013dbc <Display::PrintInfo() [clone .isra.0]+0x10>)
 8013db0:	f000 bd35 	b.w	801481e <puts>
 8013db4:	6803      	ldr	r3, [r0, #0]
 8013db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013db8:	4718      	bx	r3
 8013dba:	bf00      	nop
 8013dbc:	0801898e 	stmdaeq	r1, {r1, r2, r3, r7, r8, fp, pc}

08013dc0 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
 8013dc0:	b513      	push	{r0, r1, r4, lr}
 8013dc2:	4604      	mov	r4, r0
 8013dc4:	0a13      	lsrs	r3, r2, #8
 8013dc6:	7800      	ldrb	r0, [r0, #0]
 8013dc8:	f88d 1004 	strb.w	r1, [sp, #4]
 8013dcc:	f88d 3005 	strb.w	r3, [sp, #5]
 8013dd0:	f88d 2006 	strb.w	r2, [sp, #6]
 8013dd4:	f001 fc6a 	bl	80156ac <gd32_i2c_set_address(unsigned char)>
 8013dd8:	6860      	ldr	r0, [r4, #4]
 8013dda:	f001 fc5f 	bl	801569c <gd32_i2c_set_baudrate(unsigned int)>
 8013dde:	2103      	movs	r1, #3
 8013de0:	a801      	add	r0, sp, #4
 8013de2:	f001 fc69 	bl	80156b8 <gd32_i2c_write(char const*, unsigned int)>
 8013de6:	b002      	add	sp, #8
 8013de8:	bd10      	pop	{r4, pc}

08013dea <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
 8013dea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013dec:	460d      	mov	r5, r1
 8013dee:	4604      	mov	r4, r0
 8013df0:	f001 fc5c 	bl	80156ac <gd32_i2c_set_address(unsigned char)>
 8013df4:	4628      	mov	r0, r5
 8013df6:	f001 fc51 	bl	801569c <gd32_i2c_set_baudrate(unsigned int)>
 8013dfa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8013dfe:	2b07      	cmp	r3, #7
 8013e00:	d902      	bls.n	8013e08 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x1e>
 8013e02:	3c50      	subs	r4, #80	; 0x50
 8013e04:	2c0f      	cmp	r4, #15
 8013e06:	d809      	bhi.n	8013e1c <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x32>
 8013e08:	2101      	movs	r1, #1
 8013e0a:	f10d 0007 	add.w	r0, sp, #7
 8013e0e:	f001 fcb9 	bl	8015784 <gd32_i2c_read(char*, unsigned int)>
 8013e12:	fab0 f080 	clz	r0, r0
 8013e16:	0940      	lsrs	r0, r0, #5
 8013e18:	b003      	add	sp, #12
 8013e1a:	bd30      	pop	{r4, r5, pc}
 8013e1c:	2100      	movs	r1, #0
 8013e1e:	4608      	mov	r0, r1
 8013e20:	f001 fc4a 	bl	80156b8 <gd32_i2c_write(char const*, unsigned int)>
 8013e24:	e7f5      	b.n	8013e12 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x28>

08013e26 <Display::Detect7Segment()>:
 8013e26:	b538      	push	{r3, r4, r5, lr}
 8013e28:	68c1      	ldr	r1, [r0, #12]
 8013e2a:	4604      	mov	r4, r0
 8013e2c:	7a00      	ldrb	r0, [r0, #8]
 8013e2e:	f7ff ffdc 	bl	8013dea <HAL_I2C::IsConnected_(unsigned char, unsigned int)>
 8013e32:	7460      	strb	r0, [r4, #17]
 8013e34:	b170      	cbz	r0, 8013e54 <Display::Detect7Segment()+0x2e>
 8013e36:	2200      	movs	r2, #0
 8013e38:	f104 0508 	add.w	r5, r4, #8
 8013e3c:	4611      	mov	r1, r2
 8013e3e:	4628      	mov	r0, r5
 8013e40:	f7ff ffbe 	bl	8013dc0 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8013e44:	7c63      	ldrb	r3, [r4, #17]
 8013e46:	b12b      	cbz	r3, 8013e54 <Display::Detect7Segment()+0x2e>
 8013e48:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 8013e4c:	2112      	movs	r1, #18
 8013e4e:	4628      	mov	r0, r5
 8013e50:	f7ff ffb6 	bl	8013dc0 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8013e54:	bd38      	pop	{r3, r4, r5, pc}

08013e56 <Display::Detect(display::Type)>:
 8013e56:	2902      	cmp	r1, #2
 8013e58:	b538      	push	{r3, r4, r5, lr}
 8013e5a:	4604      	mov	r4, r0
 8013e5c:	d014      	beq.n	8013e88 <Display::Detect(display::Type)+0x32>
 8013e5e:	2904      	cmp	r1, #4
 8013e60:	d01b      	beq.n	8013e9a <Display::Detect(display::Type)+0x44>
 8013e62:	69a0      	ldr	r0, [r4, #24]
 8013e64:	b168      	cbz	r0, 8013e82 <Display::Detect(display::Type)+0x2c>
 8013e66:	6803      	ldr	r3, [r0, #0]
 8013e68:	689b      	ldr	r3, [r3, #8]
 8013e6a:	4798      	blx	r3
 8013e6c:	4603      	mov	r3, r0
 8013e6e:	69a0      	ldr	r0, [r4, #24]
 8013e70:	b9ab      	cbnz	r3, 8013e9e <Display::Detect(display::Type)+0x48>
 8013e72:	b110      	cbz	r0, 8013e7a <Display::Detect(display::Type)+0x24>
 8013e74:	6803      	ldr	r3, [r0, #0]
 8013e76:	685b      	ldr	r3, [r3, #4]
 8013e78:	4798      	blx	r3
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	61a3      	str	r3, [r4, #24]
 8013e7e:	2304      	movs	r3, #4
 8013e80:	6023      	str	r3, [r4, #0]
 8013e82:	2300      	movs	r3, #0
 8013e84:	6163      	str	r3, [r4, #20]
 8013e86:	e010      	b.n	8013eaa <Display::Detect(display::Type)+0x54>
 8013e88:	2018      	movs	r0, #24
 8013e8a:	f000 fbd1 	bl	8014630 <operator new(unsigned int)>
 8013e8e:	4605      	mov	r5, r0
 8013e90:	2100      	movs	r1, #0
 8013e92:	f000 f89d 	bl	8013fd0 <Ssd1306::Ssd1306(TOledPanel)>
 8013e96:	61a5      	str	r5, [r4, #24]
 8013e98:	e7e3      	b.n	8013e62 <Display::Detect(display::Type)+0xc>
 8013e9a:	6001      	str	r1, [r0, #0]
 8013e9c:	e7e1      	b.n	8013e62 <Display::Detect(display::Type)+0xc>
 8013e9e:	6803      	ldr	r3, [r0, #0]
 8013ea0:	68db      	ldr	r3, [r3, #12]
 8013ea2:	4798      	blx	r3
 8013ea4:	69a3      	ldr	r3, [r4, #24]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d0eb      	beq.n	8013e82 <Display::Detect(display::Type)+0x2c>
 8013eaa:	bd38      	pop	{r3, r4, r5, pc}

08013eac <Display::Display()>:
 8013eac:	2304      	movs	r3, #4
 8013eae:	b510      	push	{r4, lr}
 8013eb0:	6003      	str	r3, [r0, #0]
 8013eb2:	4b0f      	ldr	r3, [pc, #60]	; (8013ef0 <Display::Display()+0x44>)
 8013eb4:	4604      	mov	r4, r0
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	4a0e      	ldr	r2, [pc, #56]	; (8013ef4 <Display::Display()+0x48>)
 8013eba:	6043      	str	r3, [r0, #4]
 8013ebc:	2321      	movs	r3, #33	; 0x21
 8013ebe:	7203      	strb	r3, [r0, #8]
 8013ec0:	4b0d      	ldr	r3, [pc, #52]	; (8013ef8 <Display::Display()+0x4c>)
 8013ec2:	2102      	movs	r1, #2
 8013ec4:	60c3      	str	r3, [r0, #12]
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	e9c0 2305 	strd	r2, r3, [r0, #20]
 8013ecc:	8203      	strh	r3, [r0, #16]
 8013ece:	4b0b      	ldr	r3, [pc, #44]	; (8013efc <Display::Display()+0x50>)
 8013ed0:	6018      	str	r0, [r3, #0]
 8013ed2:	f7ff ffc0 	bl	8013e56 <Display::Detect(display::Type)>
 8013ed6:	4620      	mov	r0, r4
 8013ed8:	f7ff ffa5 	bl	8013e26 <Display::Detect7Segment()>
 8013edc:	69a3      	ldr	r3, [r4, #24]
 8013ede:	b10b      	cbz	r3, 8013ee4 <Display::Display()+0x38>
 8013ee0:	f7f4 fc8a 	bl	80087f8 <display::timeout::gpio_init()>
 8013ee4:	69a0      	ldr	r0, [r4, #24]
 8013ee6:	f7ff ff61 	bl	8013dac <Display::PrintInfo() [clone .isra.0]>
 8013eea:	4620      	mov	r0, r4
 8013eec:	bd10      	pop	{r4, pc}
 8013eee:	bf00      	nop
 8013ef0:	2000a9dc 	ldrdcs	sl, [r0], -ip
 8013ef4:	000493e0 	andeq	r9, r4, r0, ror #7
 8013ef8:	00061a80 	andeq	r1, r6, r0, lsl #21
 8013efc:	2000a8d8 	ldrdcs	sl, [r0], -r8

08013f00 <Ssd1306::~Ssd1306()>:
 8013f00:	4770      	bx	lr

08013f02 <Ssd1306::SetCursor(unsigned int)>:
 8013f02:	4770      	bx	lr

08013f04 <Ssd1306::PrintInfo()>:
 8013f04:	b410      	push	{r4}
 8013f06:	4906      	ldr	r1, [pc, #24]	; (8013f20 <Ssd1306::PrintInfo()+0x1c>)
 8013f08:	7c44      	ldrb	r4, [r0, #17]
 8013f0a:	7903      	ldrb	r3, [r0, #4]
 8013f0c:	7942      	ldrb	r2, [r0, #5]
 8013f0e:	4805      	ldr	r0, [pc, #20]	; (8013f24 <Ssd1306::PrintInfo()+0x20>)
 8013f10:	2c00      	cmp	r4, #0
 8013f12:	bf08      	it	eq
 8013f14:	4601      	moveq	r1, r0
 8013f16:	4804      	ldr	r0, [pc, #16]	; (8013f28 <Ssd1306::PrintInfo()+0x24>)
 8013f18:	bc10      	pop	{r4}
 8013f1a:	f7f5 ba3b 	b.w	8009394 <printf>
 8013f1e:	bf00      	nop
 8013f20:	0801899f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r8, fp, pc}
 8013f24:	080189a6 	stmdaeq	r1, {r1, r2, r5, r7, r8, fp, pc}
 8013f28:	080189ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, fp, pc}

08013f2c <Ssd1306::~Ssd1306()>:
 8013f2c:	b510      	push	{r4, lr}
 8013f2e:	4604      	mov	r4, r0
 8013f30:	f000 fb7a 	bl	8014628 <operator delete(void*)>
 8013f34:	4620      	mov	r0, r4
 8013f36:	bd10      	pop	{r4, pc}

08013f38 <HAL_I2C::Setup()>:
 8013f38:	b510      	push	{r4, lr}
 8013f3a:	4604      	mov	r4, r0
 8013f3c:	7800      	ldrb	r0, [r0, #0]
 8013f3e:	f001 fbb5 	bl	80156ac <gd32_i2c_set_address(unsigned char)>
 8013f42:	6860      	ldr	r0, [r4, #4]
 8013f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f48:	f001 bba8 	b.w	801569c <gd32_i2c_set_baudrate(unsigned int)>

08013f4c <Ssd1306::PutChar(int)>:
 8013f4c:	b510      	push	{r4, lr}
 8013f4e:	f1a1 0420 	sub.w	r4, r1, #32
 8013f52:	2c5f      	cmp	r4, #95	; 0x5f
 8013f54:	bf88      	it	hi
 8013f56:	2400      	movhi	r4, #0
 8013f58:	3008      	adds	r0, #8
 8013f5a:	f7ff ffed 	bl	8013f38 <HAL_I2C::Setup()>
 8013f5e:	4804      	ldr	r0, [pc, #16]	; (8013f70 <Ssd1306::PutChar(int)+0x24>)
 8013f60:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8013f64:	4420      	add	r0, r4
 8013f66:	2107      	movs	r1, #7
 8013f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f6c:	f001 bba4 	b.w	80156b8 <gd32_i2c_write(char const*, unsigned int)>
 8013f70:	080189c0 	stmdaeq	r1, {r6, r7, r8, fp, pc}

08013f74 <Ssd1306::PutString(char const*)>:
 8013f74:	b538      	push	{r3, r4, r5, lr}
 8013f76:	4605      	mov	r5, r0
 8013f78:	1e4c      	subs	r4, r1, #1
 8013f7a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8013f7e:	b901      	cbnz	r1, 8013f82 <Ssd1306::PutString(char const*)+0xe>
 8013f80:	bd38      	pop	{r3, r4, r5, pc}
 8013f82:	4628      	mov	r0, r5
 8013f84:	f7ff ffe2 	bl	8013f4c <Ssd1306::PutChar(int)>
 8013f88:	e7f7      	b.n	8013f7a <Ssd1306::PutString(char const*)+0x6>

08013f8a <Ssd1306::Text(char const*, unsigned int)>:
 8013f8a:	b570      	push	{r4, r5, r6, lr}
 8013f8c:	7903      	ldrb	r3, [r0, #4]
 8013f8e:	4605      	mov	r5, r0
 8013f90:	460c      	mov	r4, r1
 8013f92:	4293      	cmp	r3, r2
 8013f94:	bf94      	ite	ls
 8013f96:	18ce      	addls	r6, r1, r3
 8013f98:	188e      	addhi	r6, r1, r2
 8013f9a:	42b4      	cmp	r4, r6
 8013f9c:	d100      	bne.n	8013fa0 <Ssd1306::Text(char const*, unsigned int)+0x16>
 8013f9e:	bd70      	pop	{r4, r5, r6, pc}
 8013fa0:	4628      	mov	r0, r5
 8013fa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013fa6:	f7ff ffd1 	bl	8013f4c <Ssd1306::PutChar(int)>
 8013faa:	e7f6      	b.n	8013f9a <Ssd1306::Text(char const*, unsigned int)+0x10>

08013fac <Ssd1306::InitMembers()>:
 8013fac:	7c03      	ldrb	r3, [r0, #16]
 8013fae:	b14b      	cbz	r3, 8013fc4 <Ssd1306::InitMembers()+0x18>
 8013fb0:	3b01      	subs	r3, #1
 8013fb2:	2b01      	cmp	r3, #1
 8013fb4:	d909      	bls.n	8013fca <Ssd1306::InitMembers()+0x1e>
 8013fb6:	2308      	movs	r3, #8
 8013fb8:	2204      	movs	r2, #4
 8013fba:	2115      	movs	r1, #21
 8013fbc:	7143      	strb	r3, [r0, #5]
 8013fbe:	7101      	strb	r1, [r0, #4]
 8013fc0:	6142      	str	r2, [r0, #20]
 8013fc2:	4770      	bx	lr
 8013fc4:	2308      	movs	r3, #8
 8013fc6:	461a      	mov	r2, r3
 8013fc8:	e7f7      	b.n	8013fba <Ssd1306::InitMembers()+0xe>
 8013fca:	2304      	movs	r3, #4
 8013fcc:	e7fb      	b.n	8013fc6 <Ssd1306::InitMembers()+0x1a>
	...

08013fd0 <Ssd1306::Ssd1306(TOledPanel)>:
 8013fd0:	4a08      	ldr	r2, [pc, #32]	; (8013ff4 <Ssd1306::Ssd1306(TOledPanel)+0x24>)
 8013fd2:	b508      	push	{r3, lr}
 8013fd4:	6002      	str	r2, [r0, #0]
 8013fd6:	227f      	movs	r2, #127	; 0x7f
 8013fd8:	80c2      	strh	r2, [r0, #6]
 8013fda:	223c      	movs	r2, #60	; 0x3c
 8013fdc:	7202      	strb	r2, [r0, #8]
 8013fde:	4a06      	ldr	r2, [pc, #24]	; (8013ff8 <Ssd1306::Ssd1306(TOledPanel)+0x28>)
 8013fe0:	7401      	strb	r1, [r0, #16]
 8013fe2:	60c2      	str	r2, [r0, #12]
 8013fe4:	2200      	movs	r2, #0
 8013fe6:	7442      	strb	r2, [r0, #17]
 8013fe8:	4a04      	ldr	r2, [pc, #16]	; (8013ffc <Ssd1306::Ssd1306(TOledPanel)+0x2c>)
 8013fea:	6010      	str	r0, [r2, #0]
 8013fec:	f7ff ffde 	bl	8013fac <Ssd1306::InitMembers()>
 8013ff0:	bd08      	pop	{r3, pc}
 8013ff2:	bf00      	nop
 8013ff4:	08018c98 	stmdaeq	r1, {r3, r4, r7, sl, fp, pc}
 8013ff8:	00061a80 	andeq	r1, r6, r0, lsl #21
 8013ffc:	2000a964 	andcs	sl, r0, r4, ror #18

08014000 <Ssd1306::SendCommand(unsigned char)>:
 8014000:	2300      	movs	r3, #0
 8014002:	b507      	push	{r0, r1, r2, lr}
 8014004:	3008      	adds	r0, #8
 8014006:	f88d 3004 	strb.w	r3, [sp, #4]
 801400a:	f88d 1005 	strb.w	r1, [sp, #5]
 801400e:	f7ff ff93 	bl	8013f38 <HAL_I2C::Setup()>
 8014012:	2102      	movs	r1, #2
 8014014:	a801      	add	r0, sp, #4
 8014016:	f001 fb4f 	bl	80156b8 <gd32_i2c_write(char const*, unsigned int)>
 801401a:	b003      	add	sp, #12
 801401c:	f85d fb04 	ldr.w	pc, [sp], #4

08014020 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>:
 8014020:	2914      	cmp	r1, #20
 8014022:	b570      	push	{r4, r5, r6, lr}
 8014024:	4605      	mov	r5, r0
 8014026:	4616      	mov	r6, r2
 8014028:	d81c      	bhi.n	8014064 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 801402a:	7943      	ldrb	r3, [r0, #5]
 801402c:	4293      	cmp	r3, r2
 801402e:	d919      	bls.n	8014064 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 8014030:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8014034:	7c43      	ldrb	r3, [r0, #17]
 8014036:	004c      	lsls	r4, r1, #1
 8014038:	b2e4      	uxtb	r4, r4
 801403a:	b10b      	cbz	r3, 8014040 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x20>
 801403c:	3404      	adds	r4, #4
 801403e:	b2e4      	uxtb	r4, r4
 8014040:	4628      	mov	r0, r5
 8014042:	f004 010e 	and.w	r1, r4, #14
 8014046:	f7ff ffdb 	bl	8014000 <Ssd1306::SendCommand(unsigned char)>
 801404a:	0921      	lsrs	r1, r4, #4
 801404c:	4628      	mov	r0, r5
 801404e:	f041 0110 	orr.w	r1, r1, #16
 8014052:	f7ff ffd5 	bl	8014000 <Ssd1306::SendCommand(unsigned char)>
 8014056:	4628      	mov	r0, r5
 8014058:	f046 01b0 	orr.w	r1, r6, #176	; 0xb0
 801405c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014060:	f7ff bfce 	b.w	8014000 <Ssd1306::SendCommand(unsigned char)>
 8014064:	bd70      	pop	{r4, r5, r6, pc}

08014066 <Ssd1306::TextLine(unsigned char, char const*, unsigned int)>:
 8014066:	b570      	push	{r4, r5, r6, lr}
 8014068:	4604      	mov	r4, r0
 801406a:	4615      	mov	r5, r2
 801406c:	461e      	mov	r6, r3
 801406e:	b171      	cbz	r1, 801408e <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x28>
 8014070:	7943      	ldrb	r3, [r0, #5]
 8014072:	428b      	cmp	r3, r1
 8014074:	d30b      	bcc.n	801408e <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x28>
 8014076:	3901      	subs	r1, #1
 8014078:	b2ca      	uxtb	r2, r1
 801407a:	2100      	movs	r1, #0
 801407c:	f7ff ffd0 	bl	8014020 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8014080:	4632      	mov	r2, r6
 8014082:	4629      	mov	r1, r5
 8014084:	4620      	mov	r0, r4
 8014086:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801408a:	f7ff bf7e 	b.w	8013f8a <Ssd1306::Text(char const*, unsigned int)>
 801408e:	bd70      	pop	{r4, r5, r6, pc}

08014090 <Ssd1306::ClearLine(unsigned char)>:
 8014090:	b538      	push	{r3, r4, r5, lr}
 8014092:	4605      	mov	r5, r0
 8014094:	b1b9      	cbz	r1, 80140c6 <Ssd1306::ClearLine(unsigned char)+0x36>
 8014096:	7943      	ldrb	r3, [r0, #5]
 8014098:	428b      	cmp	r3, r1
 801409a:	d314      	bcc.n	80140c6 <Ssd1306::ClearLine(unsigned char)+0x36>
 801409c:	3901      	subs	r1, #1
 801409e:	b2cc      	uxtb	r4, r1
 80140a0:	4622      	mov	r2, r4
 80140a2:	2100      	movs	r1, #0
 80140a4:	f7ff ffbc 	bl	8014020 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 80140a8:	f105 0008 	add.w	r0, r5, #8
 80140ac:	f7ff ff44 	bl	8013f38 <HAL_I2C::Setup()>
 80140b0:	2181      	movs	r1, #129	; 0x81
 80140b2:	4805      	ldr	r0, [pc, #20]	; (80140c8 <Ssd1306::ClearLine(unsigned char)+0x38>)
 80140b4:	f001 fb00 	bl	80156b8 <gd32_i2c_write(char const*, unsigned int)>
 80140b8:	4622      	mov	r2, r4
 80140ba:	4628      	mov	r0, r5
 80140bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80140c0:	2100      	movs	r1, #0
 80140c2:	f7ff bfad 	b.w	8014020 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 80140c6:	bd38      	pop	{r3, r4, r5, pc}
 80140c8:	2000a8dc 	ldrdcs	sl, [r0], -ip

080140cc <Ssd1306::SetSleep(bool)>:
 80140cc:	b111      	cbz	r1, 80140d4 <Ssd1306::SetSleep(bool)+0x8>
 80140ce:	21ae      	movs	r1, #174	; 0xae
 80140d0:	f7ff bf96 	b.w	8014000 <Ssd1306::SendCommand(unsigned char)>
 80140d4:	21af      	movs	r1, #175	; 0xaf
 80140d6:	e7fb      	b.n	80140d0 <Ssd1306::SetSleep(bool)+0x4>

080140d8 <Ssd1306::SetContrast(unsigned char)>:
 80140d8:	b538      	push	{r3, r4, r5, lr}
 80140da:	4604      	mov	r4, r0
 80140dc:	460d      	mov	r5, r1
 80140de:	7181      	strb	r1, [r0, #6]
 80140e0:	2181      	movs	r1, #129	; 0x81
 80140e2:	f7ff ff8d 	bl	8014000 <Ssd1306::SendCommand(unsigned char)>
 80140e6:	4629      	mov	r1, r5
 80140e8:	4620      	mov	r0, r4
 80140ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80140ee:	f7ff bf87 	b.w	8014000 <Ssd1306::SendCommand(unsigned char)>

080140f2 <Ssd1306::SetFlipVertically(bool)>:
 80140f2:	b510      	push	{r4, lr}
 80140f4:	4604      	mov	r4, r0
 80140f6:	71c1      	strb	r1, [r0, #7]
 80140f8:	b141      	cbz	r1, 801410c <Ssd1306::SetFlipVertically(bool)+0x1a>
 80140fa:	21c0      	movs	r1, #192	; 0xc0
 80140fc:	f7ff ff80 	bl	8014000 <Ssd1306::SendCommand(unsigned char)>
 8014100:	21a0      	movs	r1, #160	; 0xa0
 8014102:	4620      	mov	r0, r4
 8014104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014108:	f7ff bf7a 	b.w	8014000 <Ssd1306::SendCommand(unsigned char)>
 801410c:	21c8      	movs	r1, #200	; 0xc8
 801410e:	f7ff ff77 	bl	8014000 <Ssd1306::SendCommand(unsigned char)>
 8014112:	21a1      	movs	r1, #161	; 0xa1
 8014114:	e7f5      	b.n	8014102 <Ssd1306::SetFlipVertically(bool)+0x10>
	...

08014118 <Ssd1306::CheckSH1106()>:
 8014118:	b570      	push	{r4, r5, r6, lr}
 801411a:	4604      	mov	r4, r0
 801411c:	b086      	sub	sp, #24
 801411e:	2100      	movs	r1, #0
 8014120:	f7ff ff6e 	bl	8014000 <Ssd1306::SendCommand(unsigned char)>
 8014124:	2190      	movs	r1, #144	; 0x90
 8014126:	4620      	mov	r0, r4
 8014128:	f7ff ff6a 	bl	8014000 <Ssd1306::SendCommand(unsigned char)>
 801412c:	21b0      	movs	r1, #176	; 0xb0
 801412e:	4620      	mov	r0, r4
 8014130:	f7ff ff66 	bl	8014000 <Ssd1306::SendCommand(unsigned char)>
 8014134:	4b22      	ldr	r3, [pc, #136]	; (80141c0 <Ssd1306::CheckSH1106()+0xa8>)
 8014136:	f104 0608 	add.w	r6, r4, #8
 801413a:	6818      	ldr	r0, [r3, #0]
 801413c:	791b      	ldrb	r3, [r3, #4]
 801413e:	ad02      	add	r5, sp, #8
 8014140:	9002      	str	r0, [sp, #8]
 8014142:	4630      	mov	r0, r6
 8014144:	712b      	strb	r3, [r5, #4]
 8014146:	f7ff fef7 	bl	8013f38 <HAL_I2C::Setup()>
 801414a:	2105      	movs	r1, #5
 801414c:	4628      	mov	r0, r5
 801414e:	f001 fab3 	bl	80156b8 <gd32_i2c_write(char const*, unsigned int)>
 8014152:	2100      	movs	r1, #0
 8014154:	4620      	mov	r0, r4
 8014156:	f7ff ff53 	bl	8014000 <Ssd1306::SendCommand(unsigned char)>
 801415a:	2190      	movs	r1, #144	; 0x90
 801415c:	4620      	mov	r0, r4
 801415e:	f7ff ff4f 	bl	8014000 <Ssd1306::SendCommand(unsigned char)>
 8014162:	21b0      	movs	r1, #176	; 0xb0
 8014164:	4620      	mov	r0, r4
 8014166:	f7ff ff4b 	bl	8014000 <Ssd1306::SendCommand(unsigned char)>
 801416a:	2300      	movs	r3, #0
 801416c:	9304      	str	r3, [sp, #16]
 801416e:	f88d 3014 	strb.w	r3, [sp, #20]
 8014172:	2340      	movs	r3, #64	; 0x40
 8014174:	4630      	mov	r0, r6
 8014176:	f88d 3007 	strb.w	r3, [sp, #7]
 801417a:	f7ff fedd 	bl	8013f38 <HAL_I2C::Setup()>
 801417e:	2101      	movs	r1, #1
 8014180:	f10d 0007 	add.w	r0, sp, #7
 8014184:	f001 fa98 	bl	80156b8 <gd32_i2c_write(char const*, unsigned int)>
 8014188:	4630      	mov	r0, r6
 801418a:	f7ff fed5 	bl	8013f38 <HAL_I2C::Setup()>
 801418e:	2105      	movs	r1, #5
 8014190:	a804      	add	r0, sp, #16
 8014192:	f001 faf7 	bl	8015784 <gd32_i2c_read(char*, unsigned int)>
 8014196:	2201      	movs	r2, #1
 8014198:	5cab      	ldrb	r3, [r5, r2]
 801419a:	a904      	add	r1, sp, #16
 801419c:	3201      	adds	r2, #1
 801419e:	4411      	add	r1, r2
 80141a0:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 80141a4:	428b      	cmp	r3, r1
 80141a6:	d006      	beq.n	80141b6 <Ssd1306::CheckSH1106()+0x9e>
 80141a8:	1a5b      	subs	r3, r3, r1
 80141aa:	fab3 f383 	clz	r3, r3
 80141ae:	095b      	lsrs	r3, r3, #5
 80141b0:	7463      	strb	r3, [r4, #17]
 80141b2:	b006      	add	sp, #24
 80141b4:	bd70      	pop	{r4, r5, r6, pc}
 80141b6:	2a05      	cmp	r2, #5
 80141b8:	d1ee      	bne.n	8014198 <Ssd1306::CheckSH1106()+0x80>
 80141ba:	2300      	movs	r3, #0
 80141bc:	e7f5      	b.n	80141aa <Ssd1306::CheckSH1106()+0x92>
 80141be:	bf00      	nop
 80141c0:	080189ba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r8, fp, pc}

080141c4 <Ssd1306::Cls()>:
 80141c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141c8:	4604      	mov	r4, r0
 80141ca:	2600      	movs	r6, #0
 80141cc:	7c45      	ldrb	r5, [r0, #17]
 80141ce:	00ad      	lsls	r5, r5, #2
 80141d0:	b2ed      	uxtb	r5, r5
 80141d2:	f1a5 077f 	sub.w	r7, r5, #127	; 0x7f
 80141d6:	f045 0810 	orr.w	r8, r5, #16
 80141da:	b2ff      	uxtb	r7, r7
 80141dc:	6963      	ldr	r3, [r4, #20]
 80141de:	4629      	mov	r1, r5
 80141e0:	42b3      	cmp	r3, r6
 80141e2:	4620      	mov	r0, r4
 80141e4:	d80b      	bhi.n	80141fe <Ssd1306::Cls()+0x3a>
 80141e6:	f7ff ff0b 	bl	8014000 <Ssd1306::SendCommand(unsigned char)>
 80141ea:	4641      	mov	r1, r8
 80141ec:	4620      	mov	r0, r4
 80141ee:	f7ff ff07 	bl	8014000 <Ssd1306::SendCommand(unsigned char)>
 80141f2:	4620      	mov	r0, r4
 80141f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80141f8:	21b0      	movs	r1, #176	; 0xb0
 80141fa:	f7ff bf01 	b.w	8014000 <Ssd1306::SendCommand(unsigned char)>
 80141fe:	f7ff feff 	bl	8014000 <Ssd1306::SendCommand(unsigned char)>
 8014202:	4641      	mov	r1, r8
 8014204:	4620      	mov	r0, r4
 8014206:	f7ff fefb 	bl	8014000 <Ssd1306::SendCommand(unsigned char)>
 801420a:	f066 014f 	orn	r1, r6, #79	; 0x4f
 801420e:	4620      	mov	r0, r4
 8014210:	b2c9      	uxtb	r1, r1
 8014212:	f7ff fef5 	bl	8014000 <Ssd1306::SendCommand(unsigned char)>
 8014216:	7c23      	ldrb	r3, [r4, #16]
 8014218:	b123      	cbz	r3, 8014224 <Ssd1306::Cls()+0x60>
 801421a:	3b01      	subs	r3, #1
 801421c:	2b01      	cmp	r3, #1
 801421e:	d901      	bls.n	8014224 <Ssd1306::Cls()+0x60>
 8014220:	3601      	adds	r6, #1
 8014222:	e7db      	b.n	80141dc <Ssd1306::Cls()+0x18>
 8014224:	f104 0008 	add.w	r0, r4, #8
 8014228:	f7ff fe86 	bl	8013f38 <HAL_I2C::Setup()>
 801422c:	4639      	mov	r1, r7
 801422e:	4802      	ldr	r0, [pc, #8]	; (8014238 <Ssd1306::Cls()+0x74>)
 8014230:	f001 fa42 	bl	80156b8 <gd32_i2c_write(char const*, unsigned int)>
 8014234:	e7f4      	b.n	8014220 <Ssd1306::Cls()+0x5c>
 8014236:	bf00      	nop
 8014238:	2000a8dc 	ldrdcs	sl, [r0], -ip

0801423c <Ssd1306::Start()>:
 801423c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801423e:	7a04      	ldrb	r4, [r0, #8]
 8014240:	68c6      	ldr	r6, [r0, #12]
 8014242:	4605      	mov	r5, r0
 8014244:	4620      	mov	r0, r4
 8014246:	f001 fa31 	bl	80156ac <gd32_i2c_set_address(unsigned char)>
 801424a:	4630      	mov	r0, r6
 801424c:	f001 fa26 	bl	801569c <gd32_i2c_set_baudrate(unsigned int)>
 8014250:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8014254:	2b07      	cmp	r3, #7
 8014256:	d902      	bls.n	801425e <Ssd1306::Start()+0x22>
 8014258:	3c50      	subs	r4, #80	; 0x50
 801425a:	2c0f      	cmp	r4, #15
 801425c:	d80f      	bhi.n	801427e <Ssd1306::Start()+0x42>
 801425e:	2101      	movs	r1, #1
 8014260:	f10d 0007 	add.w	r0, sp, #7
 8014264:	f001 fa8e 	bl	8015784 <gd32_i2c_read(char*, unsigned int)>
 8014268:	fab0 f480 	clz	r4, r0
 801426c:	0964      	lsrs	r4, r4, #5
 801426e:	b35c      	cbz	r4, 80142c8 <Ssd1306::Start()+0x8c>
 8014270:	7c2e      	ldrb	r6, [r5, #16]
 8014272:	b14e      	cbz	r6, 8014288 <Ssd1306::Start()+0x4c>
 8014274:	3e01      	subs	r6, #1
 8014276:	2e01      	cmp	r6, #1
 8014278:	d929      	bls.n	80142ce <Ssd1306::Start()+0x92>
 801427a:	2400      	movs	r4, #0
 801427c:	e024      	b.n	80142c8 <Ssd1306::Start()+0x8c>
 801427e:	2100      	movs	r1, #0
 8014280:	4608      	mov	r0, r1
 8014282:	f001 fa19 	bl	80156b8 <gd32_i2c_write(char const*, unsigned int)>
 8014286:	e7ef      	b.n	8014268 <Ssd1306::Start()+0x2c>
 8014288:	4f16      	ldr	r7, [pc, #88]	; (80142e4 <Ssd1306::Start()+0xa8>)
 801428a:	4628      	mov	r0, r5
 801428c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8014290:	3601      	adds	r6, #1
 8014292:	f7ff feb5 	bl	8014000 <Ssd1306::SendCommand(unsigned char)>
 8014296:	2e18      	cmp	r6, #24
 8014298:	d1f7      	bne.n	801428a <Ssd1306::Start()+0x4e>
 801429a:	2300      	movs	r3, #0
 801429c:	4a12      	ldr	r2, [pc, #72]	; (80142e8 <Ssd1306::Start()+0xac>)
 801429e:	4618      	mov	r0, r3
 80142a0:	4611      	mov	r1, r2
 80142a2:	3301      	adds	r3, #1
 80142a4:	2b86      	cmp	r3, #134	; 0x86
 80142a6:	f802 0b01 	strb.w	r0, [r2], #1
 80142aa:	d1fa      	bne.n	80142a2 <Ssd1306::Start()+0x66>
 80142ac:	2340      	movs	r3, #64	; 0x40
 80142ae:	4628      	mov	r0, r5
 80142b0:	700b      	strb	r3, [r1, #0]
 80142b2:	f7ff ff31 	bl	8014118 <Ssd1306::CheckSH1106()>
 80142b6:	4628      	mov	r0, r5
 80142b8:	f7ff ff84 	bl	80141c4 <Ssd1306::Cls()>
 80142bc:	21af      	movs	r1, #175	; 0xaf
 80142be:	4628      	mov	r0, r5
 80142c0:	f7ff fe9e 	bl	8014000 <Ssd1306::SendCommand(unsigned char)>
 80142c4:	2301      	movs	r3, #1
 80142c6:	71eb      	strb	r3, [r5, #7]
 80142c8:	4620      	mov	r0, r4
 80142ca:	b003      	add	sp, #12
 80142cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142ce:	2600      	movs	r6, #0
 80142d0:	4f06      	ldr	r7, [pc, #24]	; (80142ec <Ssd1306::Start()+0xb0>)
 80142d2:	4628      	mov	r0, r5
 80142d4:	f817 1b01 	ldrb.w	r1, [r7], #1
 80142d8:	3601      	adds	r6, #1
 80142da:	f7ff fe91 	bl	8014000 <Ssd1306::SendCommand(unsigned char)>
 80142de:	2e18      	cmp	r6, #24
 80142e0:	d1f7      	bne.n	80142d2 <Ssd1306::Start()+0x96>
 80142e2:	e7da      	b.n	801429a <Ssd1306::Start()+0x5e>
 80142e4:	08018c78 	stmdaeq	r1, {r3, r4, r5, r6, sl, fp, pc}
 80142e8:	2000a8dc 	ldrdcs	sl, [r0], -ip
 80142ec:	08018c60 	stmdaeq	r1, {r5, r6, sl, fp, pc}

080142f0 <console_putc>:
 80142f0:	f000 bb98 	b.w	8014a24 <uart0_putc>

080142f4 <console_puts>:
 80142f4:	f000 bbb6 	b.w	8014a64 <uart0_puts>

080142f8 <console_set_fg_color>:
 80142f8:	2807      	cmp	r0, #7
 80142fa:	d810      	bhi.n	801431e <console_set_fg_color+0x26>
 80142fc:	e8df f000 	tbb	[pc, r0]
 8014300:	0b090704 	bleq	8255f18 <__exidx_end+0x23d14c>
 8014304:	0d0f0f0f 	stceq	15, cr0, [pc, #-60]	; 80142d0 <Ssd1306::Start()+0x94>
 8014308:	4806      	ldr	r0, [pc, #24]	; (8014324 <console_set_fg_color+0x2c>)
 801430a:	f000 bbab 	b.w	8014a64 <uart0_puts>
 801430e:	4806      	ldr	r0, [pc, #24]	; (8014328 <console_set_fg_color+0x30>)
 8014310:	e7fb      	b.n	801430a <console_set_fg_color+0x12>
 8014312:	4806      	ldr	r0, [pc, #24]	; (801432c <console_set_fg_color+0x34>)
 8014314:	e7f9      	b.n	801430a <console_set_fg_color+0x12>
 8014316:	4806      	ldr	r0, [pc, #24]	; (8014330 <console_set_fg_color+0x38>)
 8014318:	e7f7      	b.n	801430a <console_set_fg_color+0x12>
 801431a:	4806      	ldr	r0, [pc, #24]	; (8014334 <console_set_fg_color+0x3c>)
 801431c:	e7f5      	b.n	801430a <console_set_fg_color+0x12>
 801431e:	4806      	ldr	r0, [pc, #24]	; (8014338 <console_set_fg_color+0x40>)
 8014320:	e7f3      	b.n	801430a <console_set_fg_color+0x12>
 8014322:	bf00      	nop
 8014324:	08018cd6 	stmdaeq	r1, {r1, r2, r4, r6, r7, sl, fp, pc}
 8014328:	08018cdc 	stmdaeq	r1, {r2, r3, r4, r6, r7, sl, fp, pc}
 801432c:	08018ce2 	stmdaeq	r1, {r1, r5, r6, r7, sl, fp, pc}
 8014330:	08018ce8 	stmdaeq	r1, {r3, r5, r6, r7, sl, fp, pc}
 8014334:	080169b0 	stmdaeq	r1, {r4, r5, r7, r8, fp, sp, lr}
 8014338:	08018cee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, sl, fp, pc}

0801433c <console_error>:
 801433c:	b510      	push	{r4, lr}
 801433e:	4604      	mov	r4, r0
 8014340:	4805      	ldr	r0, [pc, #20]	; (8014358 <console_error+0x1c>)
 8014342:	f000 fb8f 	bl	8014a64 <uart0_puts>
 8014346:	4620      	mov	r0, r4
 8014348:	f000 fb8c 	bl	8014a64 <uart0_puts>
 801434c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014350:	4802      	ldr	r0, [pc, #8]	; (801435c <console_error+0x20>)
 8014352:	f000 bb87 	b.w	8014a64 <uart0_puts>
 8014356:	bf00      	nop
 8014358:	08018cdc 	stmdaeq	r1, {r2, r3, r4, r6, r7, sl, fp, pc}
 801435c:	080169b0 	stmdaeq	r1, {r4, r5, r7, r8, fp, sp, lr}

08014360 <console_status>:
 8014360:	b510      	push	{r4, lr}
 8014362:	460c      	mov	r4, r1
 8014364:	b280      	uxth	r0, r0
 8014366:	f7ff ffc7 	bl	80142f8 <console_set_fg_color>
 801436a:	4807      	ldr	r0, [pc, #28]	; (8014388 <console_status+0x28>)
 801436c:	f000 fb7a 	bl	8014a64 <uart0_puts>
 8014370:	4620      	mov	r0, r4
 8014372:	f000 fb77 	bl	8014a64 <uart0_puts>
 8014376:	200a      	movs	r0, #10
 8014378:	f000 fb54 	bl	8014a24 <uart0_putc>
 801437c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014380:	4802      	ldr	r0, [pc, #8]	; (801438c <console_status+0x2c>)
 8014382:	f000 bb6f 	b.w	8014a64 <uart0_puts>
 8014386:	bf00      	nop
 8014388:	08018cd0 	stmdaeq	r1, {r4, r6, r7, sl, fp, pc}
 801438c:	080169b0 	stmdaeq	r1, {r4, r5, r7, r8, fp, sp, lr}

08014390 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
 8014390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014394:	4617      	mov	r7, r2
 8014396:	461e      	mov	r6, r3
 8014398:	4d14      	ldr	r5, [pc, #80]	; (80143ec <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>)
 801439a:	4b15      	ldr	r3, [pc, #84]	; (80143f0 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x60>)
 801439c:	b086      	sub	sp, #24
 801439e:	6018      	str	r0, [r3, #0]
 80143a0:	4604      	mov	r4, r0
 80143a2:	f105 0803 	add.w	r8, r5, #3
 80143a6:	2203      	movs	r2, #3
 80143a8:	4628      	mov	r0, r5
 80143aa:	f000 fa00 	bl	80147ae <memmove>
 80143ae:	4639      	mov	r1, r7
 80143b0:	220b      	movs	r2, #11
 80143b2:	4640      	mov	r0, r8
 80143b4:	f000 f9fb 	bl	80147ae <memmove>
 80143b8:	f105 030e 	add.w	r3, r5, #14
 80143bc:	4631      	mov	r1, r6
 80143be:	2208      	movs	r2, #8
 80143c0:	4618      	mov	r0, r3
 80143c2:	f000 f9f4 	bl	80147ae <memmove>
 80143c6:	2308      	movs	r3, #8
 80143c8:	e9cd 8303 	strd	r8, r3, [sp, #12]
 80143cc:	230b      	movs	r3, #11
 80143ce:	9302      	str	r3, [sp, #8]
 80143d0:	4b08      	ldr	r3, [pc, #32]	; (80143f4 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x64>)
 80143d2:	9005      	str	r0, [sp, #20]
 80143d4:	e9cd 5300 	strd	r5, r3, [sp]
 80143d8:	213f      	movs	r1, #63	; 0x3f
 80143da:	2303      	movs	r3, #3
 80143dc:	4a06      	ldr	r2, [pc, #24]	; (80143f8 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x68>)
 80143de:	4807      	ldr	r0, [pc, #28]	; (80143fc <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x6c>)
 80143e0:	f7f5 f800 	bl	80093e4 <snprintf>
 80143e4:	4620      	mov	r0, r4
 80143e6:	b006      	add	sp, #24
 80143e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143ec:	2000a968 	andcs	sl, r0, r8, ror #18
 80143f0:	2000a9c0 	andcs	sl, r0, r0, asr #19
 80143f4:	08016af9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, sp, lr}
 80143f8:	08018cf4 	stmdaeq	r1, {r2, r4, r5, r6, r7, sl, fp, pc}
 80143fc:	2000a97e 	andcs	sl, r0, lr, ror r9

08014400 <FirmwareVersion::Print(char const*)>:
 8014400:	b510      	push	{r4, lr}
 8014402:	460c      	mov	r4, r1
 8014404:	4804      	ldr	r0, [pc, #16]	; (8014418 <FirmwareVersion::Print(char const*)+0x18>)
 8014406:	f000 fa0a 	bl	801481e <puts>
 801440a:	b124      	cbz	r4, 8014416 <FirmwareVersion::Print(char const*)+0x16>
 801440c:	4620      	mov	r0, r4
 801440e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014412:	f000 ba04 	b.w	801481e <puts>
 8014416:	bd10      	pop	{r4, pc}
 8014418:	2000a97e 	andcs	sl, r0, lr, ror r9

0801441c <LedBlink::LedBlink()>:
 801441c:	b538      	push	{r3, r4, r5, lr}
 801441e:	2205      	movs	r2, #5
 8014420:	2300      	movs	r3, #0
 8014422:	e9c0 3200 	strd	r3, r2, [r0]
 8014426:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801442a:	6083      	str	r3, [r0, #8]
 801442c:	e9c0 2303 	strd	r2, r3, [r0, #12]
 8014430:	6143      	str	r3, [r0, #20]
 8014432:	4b09      	ldr	r3, [pc, #36]	; (8014458 <LedBlink::LedBlink()+0x3c>)
 8014434:	4d09      	ldr	r5, [pc, #36]	; (801445c <LedBlink::LedBlink()+0x40>)
 8014436:	4604      	mov	r4, r0
 8014438:	6018      	str	r0, [r3, #0]
 801443a:	f240 6004 	movw	r0, #1540	; 0x604
 801443e:	f000 fd17 	bl	8014e70 <rcu_periph_clock_enable>
 8014442:	4628      	mov	r0, r5
 8014444:	2301      	movs	r3, #1
 8014446:	2203      	movs	r2, #3
 8014448:	2110      	movs	r1, #16
 801444a:	f000 fc79 	bl	8014d40 <gpio_init>
 801444e:	2301      	movs	r3, #1
 8014450:	4620      	mov	r0, r4
 8014452:	616b      	str	r3, [r5, #20]
 8014454:	bd38      	pop	{r3, r4, r5, pc}
 8014456:	bf00      	nop
 8014458:	2000a9c4 	andcs	sl, r0, r4, asr #19
 801445c:	40011000 	andmi	r1, r1, r0

08014460 <LedBlink::SetMode(ledblink::Mode)>:
 8014460:	6843      	ldr	r3, [r0, #4]
 8014462:	428b      	cmp	r3, r1
 8014464:	d02f      	beq.n	80144c6 <LedBlink::SetMode(ledblink::Mode)+0x66>
 8014466:	6041      	str	r1, [r0, #4]
 8014468:	2904      	cmp	r1, #4
 801446a:	d822      	bhi.n	80144b2 <LedBlink::SetMode(ledblink::Mode)+0x52>
 801446c:	e8df f001 	tbb	[pc, r1]
 8014470:	18120321 	ldmdane	r2, {r0, r5, r8, r9}
 8014474:	23ff001d 	mvnscs	r0, #29
 8014478:	6003      	str	r3, [r0, #0]
 801447a:	2300      	movs	r3, #0
 801447c:	2201      	movs	r2, #1
 801447e:	60c3      	str	r3, [r0, #12]
 8014480:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014484:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8014488:	611a      	str	r2, [r3, #16]
 801448a:	6880      	ldr	r0, [r0, #8]
 801448c:	b1d8      	cbz	r0, 80144c6 <LedBlink::SetMode(ledblink::Mode)+0x66>
 801448e:	6803      	ldr	r3, [r0, #0]
 8014490:	689b      	ldr	r3, [r3, #8]
 8014492:	4718      	bx	r3
 8014494:	2301      	movs	r3, #1
 8014496:	6003      	str	r3, [r0, #0]
 8014498:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801449c:	60c3      	str	r3, [r0, #12]
 801449e:	e7f4      	b.n	801448a <LedBlink::SetMode(ledblink::Mode)+0x2a>
 80144a0:	2303      	movs	r3, #3
 80144a2:	6003      	str	r3, [r0, #0]
 80144a4:	f240 134d 	movw	r3, #333	; 0x14d
 80144a8:	e7f8      	b.n	801449c <LedBlink::SetMode(ledblink::Mode)+0x3c>
 80144aa:	2305      	movs	r3, #5
 80144ac:	6003      	str	r3, [r0, #0]
 80144ae:	23c8      	movs	r3, #200	; 0xc8
 80144b0:	e7f4      	b.n	801449c <LedBlink::SetMode(ledblink::Mode)+0x3c>
 80144b2:	2300      	movs	r3, #0
 80144b4:	2201      	movs	r2, #1
 80144b6:	6003      	str	r3, [r0, #0]
 80144b8:	60c3      	str	r3, [r0, #12]
 80144ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80144be:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80144c2:	615a      	str	r2, [r3, #20]
 80144c4:	e7e1      	b.n	801448a <LedBlink::SetMode(ledblink::Mode)+0x2a>
 80144c6:	4770      	bx	lr

080144c8 <Hardware::Hardware()>:
 80144c8:	b570      	push	{r4, r5, r6, lr}
 80144ca:	2400      	movs	r4, #0
 80144cc:	4b26      	ldr	r3, [pc, #152]	; (8014568 <Hardware::Hardware()+0xa0>)
 80144ce:	b090      	sub	sp, #64	; 0x40
 80144d0:	6004      	str	r4, [r0, #0]
 80144d2:	7104      	strb	r4, [r0, #4]
 80144d4:	6018      	str	r0, [r3, #0]
 80144d6:	4605      	mov	r5, r0
 80144d8:	f7f3 f812 	bl	8007500 <console_init>
 80144dc:	f000 fad2 	bl	8014a84 <systick_config>
 80144e0:	f001 fb84 	bl	8015bec <udelay_init()>
 80144e4:	f001 fb80 	bl	8015be8 <micros_init()>
 80144e8:	f240 701b 	movw	r0, #1819	; 0x71b
 80144ec:	f000 fcc0 	bl	8014e70 <rcu_periph_clock_enable>
 80144f0:	f240 701c 	movw	r0, #1820	; 0x71c
 80144f4:	f000 fcbc 	bl	8014e70 <rcu_periph_clock_enable>
 80144f8:	4e1c      	ldr	r6, [pc, #112]	; (801456c <Hardware::Hardware()+0xa4>)
 80144fa:	f000 fcb1 	bl	8014e60 <pmu_backup_write_enable>
 80144fe:	f000 fb5f 	bl	8014bc0 <bkp_deinit>
 8014502:	4621      	mov	r1, r4
 8014504:	2002      	movs	r0, #2
 8014506:	f000 fb63 	bl	8014bd0 <bkp_data_write>
 801450a:	f240 7004 	movw	r0, #1796	; 0x704
 801450e:	f000 fcaf 	bl	8014e70 <rcu_periph_clock_enable>
 8014512:	4630      	mov	r0, r6
 8014514:	f000 fe0a 	bl	801512c <timer_deinit>
 8014518:	236b      	movs	r3, #107	; 0x6b
 801451a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801451e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014522:	a903      	add	r1, sp, #12
 8014524:	4630      	mov	r0, r6
 8014526:	9305      	str	r3, [sp, #20]
 8014528:	f000 fe62 	bl	80151f0 <timer_init>
 801452c:	4630      	mov	r0, r6
 801452e:	f000 feb7 	bl	80152a0 <timer_enable>
 8014532:	f001 f825 	bl	8015580 <gd32_adc_init()>
 8014536:	2213      	movs	r2, #19
 8014538:	2302      	movs	r3, #2
 801453a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801453e:	237a      	movs	r3, #122	; 0x7a
 8014540:	a807      	add	r0, sp, #28
 8014542:	930c      	str	r3, [sp, #48]	; 0x30
 8014544:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8014548:	9407      	str	r4, [sp, #28]
 801454a:	940f      	str	r4, [sp, #60]	; 0x3c
 801454c:	f000 f9c0 	bl	80148d0 <mktime>
 8014550:	4621      	mov	r1, r4
 8014552:	e9cd 0401 	strd	r0, r4, [sp, #4]
 8014556:	a801      	add	r0, sp, #4
 8014558:	f000 fa30 	bl	80149bc <settimeofday>
 801455c:	f001 f86a 	bl	8015634 <gd32_i2c_begin()>
 8014560:	4628      	mov	r0, r5
 8014562:	b010      	add	sp, #64	; 0x40
 8014564:	bd70      	pop	{r4, r5, r6, pc}
 8014566:	bf00      	nop
 8014568:	2000a9c8 	andcs	sl, r0, r8, asr #19
 801456c:	40001000 	andmi	r1, r0, r0

08014570 <Hardware::GetUuid(unsigned char*)>:
 8014570:	4a0c      	ldr	r2, [pc, #48]	; (80145a4 <Hardware::GetUuid(unsigned char*)+0x34>)
 8014572:	b084      	sub	sp, #16
 8014574:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 8014578:	9300      	str	r3, [sp, #0]
 801457a:	f8d2 07ec 	ldr.w	r0, [r2, #2028]	; 0x7ec
 801457e:	9001      	str	r0, [sp, #4]
 8014580:	f8d2 27f0 	ldr.w	r2, [r2, #2032]	; 0x7f0
 8014584:	4403      	add	r3, r0
 8014586:	4413      	add	r3, r2
 8014588:	9202      	str	r2, [sp, #8]
 801458a:	466a      	mov	r2, sp
 801458c:	9303      	str	r3, [sp, #12]
 801458e:	1e4b      	subs	r3, r1, #1
 8014590:	310f      	adds	r1, #15
 8014592:	428b      	cmp	r3, r1
 8014594:	d101      	bne.n	801459a <Hardware::GetUuid(unsigned char*)+0x2a>
 8014596:	b004      	add	sp, #16
 8014598:	4770      	bx	lr
 801459a:	f812 0b01 	ldrb.w	r0, [r2], #1
 801459e:	f803 0f01 	strb.w	r0, [r3, #1]!
 80145a2:	e7f6      	b.n	8014592 <Hardware::GetUuid(unsigned char*)+0x22>
 80145a4:	1ffff000 	svcne	0x00fff000

080145a8 <Hardware::SetTime(tm const*)>:
 80145a8:	2000      	movs	r0, #0
 80145aa:	4770      	bx	lr

080145ac <Hardware::Reboot()>:
 80145ac:	b508      	push	{r3, lr}
 80145ae:	6803      	ldr	r3, [r0, #0]
 80145b0:	4604      	mov	r4, r0
 80145b2:	b153      	cbz	r3, 80145ca <Hardware::Reboot()+0x1e>
 80145b4:	2300      	movs	r3, #0
 80145b6:	2104      	movs	r1, #4
 80145b8:	7103      	strb	r3, [r0, #4]
 80145ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80145be:	f000 fb95 	bl	8014cec <fwdgt_config>
 80145c2:	6820      	ldr	r0, [r4, #0]
 80145c4:	6803      	ldr	r3, [r0, #0]
 80145c6:	689b      	ldr	r3, [r3, #8]
 80145c8:	4798      	blx	r3
 80145ca:	2102      	movs	r1, #2
 80145cc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80145d0:	f000 fb8c 	bl	8014cec <fwdgt_config>
 80145d4:	2801      	cmp	r0, #1
 80145d6:	bf0c      	ite	eq
 80145d8:	2301      	moveq	r3, #1
 80145da:	2300      	movne	r3, #0
 80145dc:	7123      	strb	r3, [r4, #4]
 80145de:	d101      	bne.n	80145e4 <Hardware::Reboot()+0x38>
 80145e0:	f000 fb74 	bl	8014ccc <fwdgt_enable>
 80145e4:	2208      	movs	r2, #8
 80145e6:	4b0d      	ldr	r3, [pc, #52]	; (801461c <Hardware::Reboot()+0x70>)
 80145e8:	2501      	movs	r5, #1
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	480c      	ldr	r0, [pc, #48]	; (8014620 <Hardware::Reboot()+0x74>)
 80145ee:	601a      	str	r2, [r3, #0]
 80145f0:	227d      	movs	r2, #125	; 0x7d
 80145f2:	490c      	ldr	r1, [pc, #48]	; (8014624 <Hardware::Reboot()+0x78>)
 80145f4:	60da      	str	r2, [r3, #12]
 80145f6:	68dc      	ldr	r4, [r3, #12]
 80145f8:	b904      	cbnz	r4, 80145fc <Hardware::Reboot()+0x50>
 80145fa:	e7fe      	b.n	80145fa <Hardware::Reboot()+0x4e>
 80145fc:	6802      	ldr	r2, [r0, #0]
 80145fe:	695e      	ldr	r6, [r3, #20]
 8014600:	1b92      	subs	r2, r2, r6
 8014602:	4294      	cmp	r4, r2
 8014604:	d8f8      	bhi.n	80145f8 <Hardware::Reboot()+0x4c>
 8014606:	6802      	ldr	r2, [r0, #0]
 8014608:	615a      	str	r2, [r3, #20]
 801460a:	691a      	ldr	r2, [r3, #16]
 801460c:	2a01      	cmp	r2, #1
 801460e:	f082 0401 	eor.w	r4, r2, #1
 8014612:	611c      	str	r4, [r3, #16]
 8014614:	bf14      	ite	ne
 8014616:	610d      	strne	r5, [r1, #16]
 8014618:	614a      	streq	r2, [r1, #20]
 801461a:	e7ec      	b.n	80145f6 <Hardware::Reboot()+0x4a>
 801461c:	2000a9c4 	andcs	sl, r0, r4, asr #19
 8014620:	2000a9dc 	ldrdcs	sl, [r0], -ip
 8014624:	40011000 	andmi	r1, r1, r0

08014628 <operator delete(void*)>:
 8014628:	f000 b890 	b.w	801474c <free>

0801462c <operator delete[](void*)>:
 801462c:	f000 b88e 	b.w	801474c <free>

08014630 <operator new(unsigned int)>:
 8014630:	f000 b842 	b.w	80146b8 <malloc>

08014634 <operator new[](unsigned int)>:
 8014634:	f000 b840 	b.w	80146b8 <malloc>

08014638 <inet_aton>:
 8014638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801463a:	f04f 0c0a 	mov.w	ip, #10
 801463e:	2500      	movs	r5, #0
 8014640:	ae01      	add	r6, sp, #4
 8014642:	4603      	mov	r3, r0
 8014644:	2200      	movs	r2, #0
 8014646:	1d07      	adds	r7, r0, #4
 8014648:	e007      	b.n	801465a <inet_aton+0x22>
 801464a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801464e:	2b09      	cmp	r3, #9
 8014650:	d820      	bhi.n	8014694 <inet_aton+0x5c>
 8014652:	4603      	mov	r3, r0
 8014654:	fb0c 4202 	mla	r2, ip, r2, r4
 8014658:	3a30      	subs	r2, #48	; 0x30
 801465a:	4618      	mov	r0, r3
 801465c:	f810 4b01 	ldrb.w	r4, [r0], #1
 8014660:	2c2e      	cmp	r4, #46	; 0x2e
 8014662:	d111      	bne.n	8014688 <inet_aton+0x50>
 8014664:	3501      	adds	r5, #1
 8014666:	2d03      	cmp	r5, #3
 8014668:	f806 2b01 	strb.w	r2, [r6], #1
 801466c:	d1e9      	bne.n	8014642 <inet_aton+0xa>
 801466e:	2200      	movs	r2, #0
 8014670:	250a      	movs	r5, #10
 8014672:	1d1c      	adds	r4, r3, #4
 8014674:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8014678:	f010 0fdf 	tst.w	r0, #223	; 0xdf
 801467c:	d10d      	bne.n	801469a <inet_aton+0x62>
 801467e:	f88d 2007 	strb.w	r2, [sp, #7]
 8014682:	b9b1      	cbnz	r1, 80146b2 <inet_aton+0x7a>
 8014684:	2001      	movs	r0, #1
 8014686:	e006      	b.n	8014696 <inet_aton+0x5e>
 8014688:	2c00      	cmp	r4, #0
 801468a:	d0eb      	beq.n	8014664 <inet_aton+0x2c>
 801468c:	2c0a      	cmp	r4, #10
 801468e:	d0e9      	beq.n	8014664 <inet_aton+0x2c>
 8014690:	42b8      	cmp	r0, r7
 8014692:	d1da      	bne.n	801464a <inet_aton+0x12>
 8014694:	2000      	movs	r0, #0
 8014696:	b003      	add	sp, #12
 8014698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801469a:	280a      	cmp	r0, #10
 801469c:	d0ef      	beq.n	801467e <inet_aton+0x46>
 801469e:	42a3      	cmp	r3, r4
 80146a0:	d0f8      	beq.n	8014694 <inet_aton+0x5c>
 80146a2:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
 80146a6:	2e09      	cmp	r6, #9
 80146a8:	d8f4      	bhi.n	8014694 <inet_aton+0x5c>
 80146aa:	fb05 0202 	mla	r2, r5, r2, r0
 80146ae:	3a30      	subs	r2, #48	; 0x30
 80146b0:	e7e0      	b.n	8014674 <inet_aton+0x3c>
 80146b2:	9b01      	ldr	r3, [sp, #4]
 80146b4:	600b      	str	r3, [r1, #0]
 80146b6:	e7e5      	b.n	8014684 <inet_aton+0x4c>

080146b8 <malloc>:
 80146b8:	b538      	push	{r3, r4, r5, lr}
 80146ba:	4604      	mov	r4, r0
 80146bc:	4601      	mov	r1, r0
 80146be:	481c      	ldr	r0, [pc, #112]	; (8014730 <malloc+0x78>)
 80146c0:	f7f4 fe68 	bl	8009394 <printf>
 80146c4:	b17c      	cbz	r4, 80146e6 <malloc+0x2e>
 80146c6:	4b1b      	ldr	r3, [pc, #108]	; (8014734 <malloc+0x7c>)
 80146c8:	6818      	ldr	r0, [r3, #0]
 80146ca:	b978      	cbnz	r0, 80146ec <malloc+0x34>
 80146cc:	4a1a      	ldr	r2, [pc, #104]	; (8014738 <malloc+0x80>)
 80146ce:	f104 031b 	add.w	r3, r4, #27
 80146d2:	6811      	ldr	r1, [r2, #0]
 80146d4:	4819      	ldr	r0, [pc, #100]	; (801473c <malloc+0x84>)
 80146d6:	f023 030f 	bic.w	r3, r3, #15
 80146da:	440b      	add	r3, r1
 80146dc:	4283      	cmp	r3, r0
 80146de:	d921      	bls.n	8014724 <malloc+0x6c>
 80146e0:	4817      	ldr	r0, [pc, #92]	; (8014740 <malloc+0x88>)
 80146e2:	f7f4 fe57 	bl	8009394 <printf>
 80146e6:	2500      	movs	r5, #0
 80146e8:	4628      	mov	r0, r5
 80146ea:	bd38      	pop	{r3, r4, r5, pc}
 80146ec:	4284      	cmp	r4, r0
 80146ee:	d80a      	bhi.n	8014706 <malloc+0x4e>
 80146f0:	685a      	ldr	r2, [r3, #4]
 80146f2:	6899      	ldr	r1, [r3, #8]
 80146f4:	3201      	adds	r2, #1
 80146f6:	428a      	cmp	r2, r1
 80146f8:	605a      	str	r2, [r3, #4]
 80146fa:	d900      	bls.n	80146fe <malloc+0x46>
 80146fc:	609a      	str	r2, [r3, #8]
 80146fe:	68d9      	ldr	r1, [r3, #12]
 8014700:	b919      	cbnz	r1, 801470a <malloc+0x52>
 8014702:	4604      	mov	r4, r0
 8014704:	e7e2      	b.n	80146cc <malloc+0x14>
 8014706:	3310      	adds	r3, #16
 8014708:	e7de      	b.n	80146c8 <malloc+0x10>
 801470a:	4604      	mov	r4, r0
 801470c:	688a      	ldr	r2, [r1, #8]
 801470e:	60da      	str	r2, [r3, #12]
 8014710:	2300      	movs	r3, #0
 8014712:	f101 050c 	add.w	r5, r1, #12
 8014716:	608b      	str	r3, [r1, #8]
 8014718:	4622      	mov	r2, r4
 801471a:	462b      	mov	r3, r5
 801471c:	4809      	ldr	r0, [pc, #36]	; (8014744 <malloc+0x8c>)
 801471e:	f7f4 fe39 	bl	8009394 <printf>
 8014722:	e7e1      	b.n	80146e8 <malloc+0x30>
 8014724:	6013      	str	r3, [r2, #0]
 8014726:	4b08      	ldr	r3, [pc, #32]	; (8014748 <malloc+0x90>)
 8014728:	e9c1 3400 	strd	r3, r4, [r1]
 801472c:	e7f0      	b.n	8014710 <malloc+0x58>
 801472e:	bf00      	nop
 8014730:	08018d18 	stmdaeq	r1, {r3, r4, r8, sl, fp, pc}
 8014734:	20000010 	andcs	r0, r0, r0, lsl r0
 8014738:	2000000c 	andcs	r0, r0, ip
 801473c:	20016800 	andcs	r6, r1, r0, lsl #16
 8014740:	08018d24 	stmdaeq	r1, {r2, r5, r8, sl, fp, pc}
 8014744:	08018d40 	stmdaeq	r1, {r6, r8, sl, fp, pc}
 8014748:	424c4d43 	submi	r4, ip, #4288	; 0x10c0

0801474c <free>:
 801474c:	b538      	push	{r3, r4, r5, lr}
 801474e:	4604      	mov	r4, r0
 8014750:	b1c8      	cbz	r0, 8014786 <free+0x3a>
 8014752:	f1a0 050c 	sub.w	r5, r0, #12
 8014756:	4602      	mov	r2, r0
 8014758:	4629      	mov	r1, r5
 801475a:	480c      	ldr	r0, [pc, #48]	; (801478c <free+0x40>)
 801475c:	f7f4 fe1a 	bl	8009394 <printf>
 8014760:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8014764:	4b0a      	ldr	r3, [pc, #40]	; (8014790 <free+0x44>)
 8014766:	429a      	cmp	r2, r3
 8014768:	d10d      	bne.n	8014786 <free+0x3a>
 801476a:	4b0a      	ldr	r3, [pc, #40]	; (8014794 <free+0x48>)
 801476c:	681a      	ldr	r2, [r3, #0]
 801476e:	b152      	cbz	r2, 8014786 <free+0x3a>
 8014770:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8014774:	4291      	cmp	r1, r2
 8014776:	d107      	bne.n	8014788 <free+0x3c>
 8014778:	68da      	ldr	r2, [r3, #12]
 801477a:	f844 2c04 	str.w	r2, [r4, #-4]
 801477e:	685a      	ldr	r2, [r3, #4]
 8014780:	60dd      	str	r5, [r3, #12]
 8014782:	3a01      	subs	r2, #1
 8014784:	605a      	str	r2, [r3, #4]
 8014786:	bd38      	pop	{r3, r4, r5, pc}
 8014788:	3310      	adds	r3, #16
 801478a:	e7ef      	b.n	801476c <free+0x20>
 801478c:	08018d6b 	stmdaeq	r1, {r0, r1, r3, r5, r6, r8, sl, fp, pc}
 8014790:	424c4d43 	submi	r4, ip, #4288	; 0x10c0
 8014794:	20000010 	andcs	r0, r0, r0, lsl r0

08014798 <memcpy>:
 8014798:	b510      	push	{r4, lr}
 801479a:	1e43      	subs	r3, r0, #1
 801479c:	440a      	add	r2, r1
 801479e:	4291      	cmp	r1, r2
 80147a0:	d100      	bne.n	80147a4 <memcpy+0xc>
 80147a2:	bd10      	pop	{r4, pc}
 80147a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80147a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80147ac:	e7f7      	b.n	801479e <memcpy+0x6>

080147ae <memmove>:
 80147ae:	4288      	cmp	r0, r1
 80147b0:	b510      	push	{r4, lr}
 80147b2:	eb01 0302 	add.w	r3, r1, r2
 80147b6:	d208      	bcs.n	80147ca <memmove+0x1c>
 80147b8:	1e42      	subs	r2, r0, #1
 80147ba:	4299      	cmp	r1, r3
 80147bc:	d100      	bne.n	80147c0 <memmove+0x12>
 80147be:	bd10      	pop	{r4, pc}
 80147c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80147c4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80147c8:	e7f7      	b.n	80147ba <memmove+0xc>
 80147ca:	4601      	mov	r1, r0
 80147cc:	4402      	add	r2, r0
 80147ce:	428a      	cmp	r2, r1
 80147d0:	d0f5      	beq.n	80147be <memmove+0x10>
 80147d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80147d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80147da:	e7f8      	b.n	80147ce <memmove+0x20>

080147dc <memset>:
 80147dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147de:	b1c2      	cbz	r2, 8014812 <memset+0x36>
 80147e0:	4603      	mov	r3, r0
 80147e2:	b2c9      	uxtb	r1, r1
 80147e4:	075c      	lsls	r4, r3, #29
 80147e6:	d110      	bne.n	801480a <memset+0x2e>
 80147e8:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
 80147ec:	ea44 4704 	orr.w	r7, r4, r4, lsl #16
 80147f0:	463d      	mov	r5, r7
 80147f2:	461e      	mov	r6, r3
 80147f4:	f022 0407 	bic.w	r4, r2, #7
 80147f8:	441c      	add	r4, r3
 80147fa:	42a6      	cmp	r6, r4
 80147fc:	d10a      	bne.n	8014814 <memset+0x38>
 80147fe:	4413      	add	r3, r2
 8014800:	429c      	cmp	r4, r3
 8014802:	d006      	beq.n	8014812 <memset+0x36>
 8014804:	f804 1b01 	strb.w	r1, [r4], #1
 8014808:	e7fa      	b.n	8014800 <memset+0x24>
 801480a:	3a01      	subs	r2, #1
 801480c:	f803 1b01 	strb.w	r1, [r3], #1
 8014810:	d1e8      	bne.n	80147e4 <memset+0x8>
 8014812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014814:	f846 7b08 	str.w	r7, [r6], #8
 8014818:	f846 5c04 	str.w	r5, [r6, #-4]
 801481c:	e7ed      	b.n	80147fa <memset+0x1e>

0801481e <puts>:
 801481e:	b508      	push	{r3, lr}
 8014820:	f7ff fd68 	bl	80142f4 <console_puts>
 8014824:	200a      	movs	r0, #10
 8014826:	f7ff fd63 	bl	80142f0 <console_putc>
 801482a:	2001      	movs	r0, #1
 801482c:	bd08      	pop	{r3, pc}
	...

08014830 <strtok>:
 8014830:	b530      	push	{r4, r5, lr}
 8014832:	b910      	cbnz	r0, 801483a <strtok+0xa>
 8014834:	4b12      	ldr	r3, [pc, #72]	; (8014880 <strtok+0x50>)
 8014836:	6818      	ldr	r0, [r3, #0]
 8014838:	b158      	cbz	r0, 8014852 <strtok+0x22>
 801483a:	4603      	mov	r3, r0
 801483c:	460d      	mov	r5, r1
 801483e:	4618      	mov	r0, r3
 8014840:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014844:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014848:	b924      	cbnz	r4, 8014854 <strtok+0x24>
 801484a:	b94a      	cbnz	r2, 8014860 <strtok+0x30>
 801484c:	4610      	mov	r0, r2
 801484e:	4b0c      	ldr	r3, [pc, #48]	; (8014880 <strtok+0x50>)
 8014850:	601a      	str	r2, [r3, #0]
 8014852:	bd30      	pop	{r4, r5, pc}
 8014854:	42a2      	cmp	r2, r4
 8014856:	d1f5      	bne.n	8014844 <strtok+0x14>
 8014858:	e7f0      	b.n	801483c <strtok+0xc>
 801485a:	4613      	mov	r3, r2
 801485c:	e00c      	b.n	8014878 <strtok+0x48>
 801485e:	b914      	cbnz	r4, 8014866 <strtok+0x36>
 8014860:	460d      	mov	r5, r1
 8014862:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014866:	f815 4b01 	ldrb.w	r4, [r5], #1
 801486a:	42a2      	cmp	r2, r4
 801486c:	d1f7      	bne.n	801485e <strtok+0x2e>
 801486e:	2a00      	cmp	r2, #0
 8014870:	d0f3      	beq.n	801485a <strtok+0x2a>
 8014872:	2200      	movs	r2, #0
 8014874:	f803 2c01 	strb.w	r2, [r3, #-1]
 8014878:	4a01      	ldr	r2, [pc, #4]	; (8014880 <strtok+0x50>)
 801487a:	6013      	str	r3, [r2, #0]
 801487c:	e7e9      	b.n	8014852 <strtok+0x22>
 801487e:	bf00      	nop
 8014880:	2000a9cc 	andcs	sl, r0, ip, asr #19

08014884 <isleapyear>:
 8014884:	2264      	movs	r2, #100	; 0x64
 8014886:	fb90 f3f2 	sdiv	r3, r0, r2
 801488a:	fb02 0313 	mls	r3, r2, r3, r0
 801488e:	b94b      	cbnz	r3, 80148a4 <isleapyear+0x20>
 8014890:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8014894:	fb90 f2f3 	sdiv	r2, r0, r3
 8014898:	fb03 0012 	mls	r0, r3, r2, r0
 801489c:	fab0 f080 	clz	r0, r0
 80148a0:	0940      	lsrs	r0, r0, #5
 80148a2:	4770      	bx	lr
 80148a4:	f010 0f03 	tst.w	r0, #3
 80148a8:	bf0c      	ite	eq
 80148aa:	2001      	moveq	r0, #1
 80148ac:	2000      	movne	r0, #0
 80148ae:	4770      	bx	lr

080148b0 <getdaysofmonth>:
 80148b0:	b510      	push	{r4, lr}
 80148b2:	4604      	mov	r4, r0
 80148b4:	2c01      	cmp	r4, #1
 80148b6:	4608      	mov	r0, r1
 80148b8:	d102      	bne.n	80148c0 <getdaysofmonth+0x10>
 80148ba:	f7ff ffe3 	bl	8014884 <isleapyear>
 80148be:	b918      	cbnz	r0, 80148c8 <getdaysofmonth+0x18>
 80148c0:	4b02      	ldr	r3, [pc, #8]	; (80148cc <getdaysofmonth+0x1c>)
 80148c2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80148c6:	bd10      	pop	{r4, pc}
 80148c8:	201d      	movs	r0, #29
 80148ca:	e7fc      	b.n	80148c6 <getdaysofmonth+0x16>
 80148cc:	08018d94 	stmdaeq	r1, {r2, r4, r7, r8, sl, fp, pc}

080148d0 <mktime>:
 80148d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148d4:	4604      	mov	r4, r0
 80148d6:	2800      	cmp	r0, #0
 80148d8:	d043      	beq.n	8014962 <mktime+0x92>
 80148da:	6941      	ldr	r1, [r0, #20]
 80148dc:	f1a1 0346 	sub.w	r3, r1, #70	; 0x46
 80148e0:	2b45      	cmp	r3, #69	; 0x45
 80148e2:	d83e      	bhi.n	8014962 <mktime+0x92>
 80148e4:	2600      	movs	r6, #0
 80148e6:	f240 75b2 	movw	r5, #1970	; 0x7b2
 80148ea:	f240 186d 	movw	r8, #365	; 0x16d
 80148ee:	f201 776b 	addw	r7, r1, #1899	; 0x76b
 80148f2:	42af      	cmp	r7, r5
 80148f4:	da24      	bge.n	8014940 <mktime+0x70>
 80148f6:	6927      	ldr	r7, [r4, #16]
 80148f8:	2f0b      	cmp	r7, #11
 80148fa:	d832      	bhi.n	8014962 <mktime+0x92>
 80148fc:	2500      	movs	r5, #0
 80148fe:	42af      	cmp	r7, r5
 8014900:	d129      	bne.n	8014956 <mktime+0x86>
 8014902:	68e5      	ldr	r5, [r4, #12]
 8014904:	2d00      	cmp	r5, #0
 8014906:	dd2c      	ble.n	8014962 <mktime+0x92>
 8014908:	4638      	mov	r0, r7
 801490a:	f7ff ffd1 	bl	80148b0 <getdaysofmonth>
 801490e:	4285      	cmp	r5, r0
 8014910:	dc27      	bgt.n	8014962 <mktime+0x92>
 8014912:	2318      	movs	r3, #24
 8014914:	3d01      	subs	r5, #1
 8014916:	4435      	add	r5, r6
 8014918:	435d      	muls	r5, r3
 801491a:	68a3      	ldr	r3, [r4, #8]
 801491c:	2b17      	cmp	r3, #23
 801491e:	d820      	bhi.n	8014962 <mktime+0x92>
 8014920:	213c      	movs	r1, #60	; 0x3c
 8014922:	442b      	add	r3, r5
 8014924:	fb01 f203 	mul.w	r2, r1, r3
 8014928:	6863      	ldr	r3, [r4, #4]
 801492a:	2b3b      	cmp	r3, #59	; 0x3b
 801492c:	d819      	bhi.n	8014962 <mktime+0x92>
 801492e:	6820      	ldr	r0, [r4, #0]
 8014930:	4413      	add	r3, r2
 8014932:	283b      	cmp	r0, #59	; 0x3b
 8014934:	fb01 f303 	mul.w	r3, r1, r3
 8014938:	d813      	bhi.n	8014962 <mktime+0x92>
 801493a:	4418      	add	r0, r3
 801493c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014940:	4628      	mov	r0, r5
 8014942:	f7ff ff9f 	bl	8014884 <isleapyear>
 8014946:	2800      	cmp	r0, #0
 8014948:	bf14      	ite	ne
 801494a:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 801494e:	4643      	moveq	r3, r8
 8014950:	3501      	adds	r5, #1
 8014952:	441e      	add	r6, r3
 8014954:	e7cd      	b.n	80148f2 <mktime+0x22>
 8014956:	4628      	mov	r0, r5
 8014958:	f7ff ffaa 	bl	80148b0 <getdaysofmonth>
 801495c:	3501      	adds	r5, #1
 801495e:	4406      	add	r6, r0
 8014960:	e7cd      	b.n	80148fe <mktime+0x2e>
 8014962:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014966:	e7e9      	b.n	801493c <mktime+0x6c>

08014968 <gettimeofday>:
 8014968:	b538      	push	{r3, r4, r5, lr}
 801496a:	4b10      	ldr	r3, [pc, #64]	; (80149ac <gettimeofday+0x44>)
 801496c:	4a10      	ldr	r2, [pc, #64]	; (80149b0 <gettimeofday+0x48>)
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	6814      	ldr	r4, [r2, #0]
 8014972:	6013      	str	r3, [r2, #0]
 8014974:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014978:	429c      	cmp	r4, r3
 801497a:	bf2c      	ite	cs
 801497c:	1ae4      	subcs	r4, r4, r3
 801497e:	1b1c      	subcc	r4, r3, r4
 8014980:	4354      	muls	r4, r2
 8014982:	4b0c      	ldr	r3, [pc, #48]	; (80149b4 <gettimeofday+0x4c>)
 8014984:	4605      	mov	r5, r0
 8014986:	e9d3 2100 	ldrd	r2, r1, [r3]
 801498a:	18a4      	adds	r4, r4, r2
 801498c:	f141 0100 	adc.w	r1, r1, #0
 8014990:	e9c3 4100 	strd	r4, r1, [r3]
 8014994:	4620      	mov	r0, r4
 8014996:	2300      	movs	r3, #0
 8014998:	4a07      	ldr	r2, [pc, #28]	; (80149b8 <gettimeofday+0x50>)
 801499a:	f7f3 fa9d 	bl	8007ed8 <__aeabi_uldivmod>
 801499e:	4b06      	ldr	r3, [pc, #24]	; (80149b8 <gettimeofday+0x50>)
 80149a0:	6028      	str	r0, [r5, #0]
 80149a2:	fb03 4410 	mls	r4, r3, r0, r4
 80149a6:	2000      	movs	r0, #0
 80149a8:	606c      	str	r4, [r5, #4]
 80149aa:	bd38      	pop	{r3, r4, r5, pc}
 80149ac:	2000a9dc 	ldrdcs	sl, [r0], -ip
 80149b0:	2000a9d8 	ldrdcs	sl, [r0], -r8
 80149b4:	2000a9d0 	ldrdcs	sl, [r0], -r0
 80149b8:	000f4240 	andeq	r4, pc, r0, asr #4

080149bc <settimeofday>:
 80149bc:	4b07      	ldr	r3, [pc, #28]	; (80149dc <settimeofday+0x20>)
 80149be:	b510      	push	{r4, lr}
 80149c0:	681a      	ldr	r2, [r3, #0]
 80149c2:	4b07      	ldr	r3, [pc, #28]	; (80149e0 <settimeofday+0x24>)
 80149c4:	6804      	ldr	r4, [r0, #0]
 80149c6:	601a      	str	r2, [r3, #0]
 80149c8:	6843      	ldr	r3, [r0, #4]
 80149ca:	4806      	ldr	r0, [pc, #24]	; (80149e4 <settimeofday+0x28>)
 80149cc:	17da      	asrs	r2, r3, #31
 80149ce:	fbc4 3200 	smlal	r3, r2, r4, r0
 80149d2:	4905      	ldr	r1, [pc, #20]	; (80149e8 <settimeofday+0x2c>)
 80149d4:	2000      	movs	r0, #0
 80149d6:	e9c1 3200 	strd	r3, r2, [r1]
 80149da:	bd10      	pop	{r4, pc}
 80149dc:	2000a9dc 	ldrdcs	sl, [r0], -ip
 80149e0:	2000a9d8 	ldrdcs	sl, [r0], -r8
 80149e4:	000f4240 	andeq	r4, pc, r0, asr #4
 80149e8:	2000a9d0 	ldrdcs	sl, [r0], -r0

080149ec <time>:
 80149ec:	b513      	push	{r0, r1, r4, lr}
 80149ee:	4604      	mov	r4, r0
 80149f0:	2100      	movs	r1, #0
 80149f2:	4668      	mov	r0, sp
 80149f4:	f7ff ffb8 	bl	8014968 <gettimeofday>
 80149f8:	9800      	ldr	r0, [sp, #0]
 80149fa:	b104      	cbz	r4, 80149fe <time+0x12>
 80149fc:	6020      	str	r0, [r4, #0]
 80149fe:	b002      	add	sp, #8
 8014a00:	bd10      	pop	{r4, pc}
	...

08014a04 <uart0_init>:
 8014a04:	2301      	movs	r3, #1
 8014a06:	b507      	push	{r0, r1, r2, lr}
 8014a08:	2208      	movs	r2, #8
 8014a0a:	9300      	str	r3, [sp, #0]
 8014a0c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8014a10:	2300      	movs	r3, #0
 8014a12:	4803      	ldr	r0, [pc, #12]	; (8014a20 <uart0_init+0x1c>)
 8014a14:	f001 f810 	bl	8015a38 <gd32_uart_begin>
 8014a18:	b003      	add	sp, #12
 8014a1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8014a1e:	bf00      	nop
 8014a20:	40013800 	andmi	r3, r1, r0, lsl #16

08014a24 <uart0_putc>:
 8014a24:	280a      	cmp	r0, #10
 8014a26:	b538      	push	{r3, r4, r5, lr}
 8014a28:	4604      	mov	r4, r0
 8014a2a:	d10a      	bne.n	8014a42 <uart0_putc+0x1e>
 8014a2c:	4d0b      	ldr	r5, [pc, #44]	; (8014a5c <uart0_putc+0x38>)
 8014a2e:	2107      	movs	r1, #7
 8014a30:	4628      	mov	r0, r5
 8014a32:	f000 fcd3 	bl	80153dc <usart_flag_get>
 8014a36:	2800      	cmp	r0, #0
 8014a38:	d0f9      	beq.n	8014a2e <uart0_putc+0xa>
 8014a3a:	220d      	movs	r2, #13
 8014a3c:	4b08      	ldr	r3, [pc, #32]	; (8014a60 <uart0_putc+0x3c>)
 8014a3e:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8014a42:	4d06      	ldr	r5, [pc, #24]	; (8014a5c <uart0_putc+0x38>)
 8014a44:	2107      	movs	r1, #7
 8014a46:	4628      	mov	r0, r5
 8014a48:	f000 fcc8 	bl	80153dc <usart_flag_get>
 8014a4c:	2800      	cmp	r0, #0
 8014a4e:	d0f9      	beq.n	8014a44 <uart0_putc+0x20>
 8014a50:	4b03      	ldr	r3, [pc, #12]	; (8014a60 <uart0_putc+0x3c>)
 8014a52:	b2e4      	uxtb	r4, r4
 8014a54:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
 8014a58:	bd38      	pop	{r3, r4, r5, pc}
 8014a5a:	bf00      	nop
 8014a5c:	40013800 	andmi	r3, r1, r0, lsl #16
 8014a60:	40013000 	andmi	r3, r1, r0

08014a64 <uart0_puts>:
 8014a64:	b510      	push	{r4, lr}
 8014a66:	1e44      	subs	r4, r0, #1
 8014a68:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8014a6c:	b903      	cbnz	r3, 8014a70 <uart0_puts+0xc>
 8014a6e:	bd10      	pop	{r4, pc}
 8014a70:	2b0a      	cmp	r3, #10
 8014a72:	d102      	bne.n	8014a7a <uart0_puts+0x16>
 8014a74:	200d      	movs	r0, #13
 8014a76:	f7ff ffd5 	bl	8014a24 <uart0_putc>
 8014a7a:	7820      	ldrb	r0, [r4, #0]
 8014a7c:	f7ff ffd2 	bl	8014a24 <uart0_putc>
 8014a80:	e7f2      	b.n	8014a68 <uart0_puts+0x4>
	...

08014a84 <systick_config>:
 8014a84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014a88:	4b0b      	ldr	r3, [pc, #44]	; (8014ab8 <systick_config+0x34>)
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8014a90:	3b01      	subs	r3, #1
 8014a92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8014a96:	d20d      	bcs.n	8014ab4 <systick_config+0x30>
 8014a98:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8014a9c:	21f0      	movs	r1, #240	; 0xf0
 8014a9e:	6153      	str	r3, [r2, #20]
 8014aa0:	4b06      	ldr	r3, [pc, #24]	; (8014abc <systick_config+0x38>)
 8014aa2:	2007      	movs	r0, #7
 8014aa4:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 8014aa8:	2100      	movs	r1, #0
 8014aaa:	6191      	str	r1, [r2, #24]
 8014aac:	6110      	str	r0, [r2, #16]
 8014aae:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 8014ab2:	4770      	bx	lr
 8014ab4:	e7fe      	b.n	8014ab4 <systick_config+0x30>
 8014ab6:	bf00      	nop
 8014ab8:	200000e0 	andcs	r0, r0, r0, ror #1
 8014abc:	e000ed00 	and	lr, r0, r0, lsl #26

08014ac0 <SysTick_Handler>:
 8014ac0:	4a02      	ldr	r2, [pc, #8]	; (8014acc <SysTick_Handler+0xc>)
 8014ac2:	6813      	ldr	r3, [r2, #0]
 8014ac4:	3301      	adds	r3, #1
 8014ac6:	6013      	str	r3, [r2, #0]
 8014ac8:	4770      	bx	lr
 8014aca:	bf00      	nop
 8014acc:	2000a9dc 	ldrdcs	sl, [r0], -ip

08014ad0 <SystemInit>:
 8014ad0:	4b37      	ldr	r3, [pc, #220]	; (8014bb0 <SystemInit+0xe0>)
 8014ad2:	4938      	ldr	r1, [pc, #224]	; (8014bb4 <SystemInit+0xe4>)
 8014ad4:	681a      	ldr	r2, [r3, #0]
 8014ad6:	f042 0201 	orr.w	r2, r2, #1
 8014ada:	601a      	str	r2, [r3, #0]
 8014adc:	685a      	ldr	r2, [r3, #4]
 8014ade:	f022 0203 	bic.w	r2, r2, #3
 8014ae2:	605a      	str	r2, [r3, #4]
 8014ae4:	681a      	ldr	r2, [r3, #0]
 8014ae6:	400a      	ands	r2, r1
 8014ae8:	601a      	str	r2, [r3, #0]
 8014aea:	6858      	ldr	r0, [r3, #4]
 8014aec:	4a32      	ldr	r2, [pc, #200]	; (8014bb8 <SystemInit+0xe8>)
 8014aee:	4002      	ands	r2, r0
 8014af0:	605a      	str	r2, [r3, #4]
 8014af2:	681a      	ldr	r2, [r3, #0]
 8014af4:	400a      	ands	r2, r1
 8014af6:	601a      	str	r2, [r3, #0]
 8014af8:	681a      	ldr	r2, [r3, #0]
 8014afa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8014afe:	601a      	str	r2, [r3, #0]
 8014b00:	685a      	ldr	r2, [r3, #4]
 8014b02:	f022 5203 	bic.w	r2, r2, #549453824	; 0x20c00000
 8014b06:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8014b0a:	605a      	str	r2, [r3, #4]
 8014b0c:	2200      	movs	r2, #0
 8014b0e:	62da      	str	r2, [r3, #44]	; 0x2c
 8014b10:	681a      	ldr	r2, [r3, #0]
 8014b12:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8014b16:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8014b1a:	601a      	str	r2, [r3, #0]
 8014b1c:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8014b20:	609a      	str	r2, [r3, #8]
 8014b22:	681a      	ldr	r2, [r3, #0]
 8014b24:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8014b28:	601a      	str	r2, [r3, #0]
 8014b2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014b2e:	6819      	ldr	r1, [r3, #0]
 8014b30:	0389      	lsls	r1, r1, #14
 8014b32:	d401      	bmi.n	8014b38 <SystemInit+0x68>
 8014b34:	3a01      	subs	r2, #1
 8014b36:	d1fa      	bne.n	8014b2e <SystemInit+0x5e>
 8014b38:	681a      	ldr	r2, [r3, #0]
 8014b3a:	0392      	lsls	r2, r2, #14
 8014b3c:	d400      	bmi.n	8014b40 <SystemInit+0x70>
 8014b3e:	e7fe      	b.n	8014b3e <SystemInit+0x6e>
 8014b40:	685a      	ldr	r2, [r3, #4]
 8014b42:	605a      	str	r2, [r3, #4]
 8014b44:	685a      	ldr	r2, [r3, #4]
 8014b46:	605a      	str	r2, [r3, #4]
 8014b48:	685a      	ldr	r2, [r3, #4]
 8014b4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8014b4e:	605a      	str	r2, [r3, #4]
 8014b50:	685a      	ldr	r2, [r3, #4]
 8014b52:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8014b56:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 8014b5a:	605a      	str	r2, [r3, #4]
 8014b5c:	685a      	ldr	r2, [r3, #4]
 8014b5e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8014b62:	f442 1224 	orr.w	r2, r2, #2686976	; 0x290000
 8014b66:	605a      	str	r2, [r3, #4]
 8014b68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8014b6a:	4a14      	ldr	r2, [pc, #80]	; (8014bbc <SystemInit+0xec>)
 8014b6c:	400a      	ands	r2, r1
 8014b6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8014b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b72:	f442 3283 	orr.w	r2, r2, #67072	; 0x10600
 8014b76:	f042 0249 	orr.w	r2, r2, #73	; 0x49
 8014b7a:	62da      	str	r2, [r3, #44]	; 0x2c
 8014b7c:	681a      	ldr	r2, [r3, #0]
 8014b7e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8014b82:	601a      	str	r2, [r3, #0]
 8014b84:	681a      	ldr	r2, [r3, #0]
 8014b86:	0110      	lsls	r0, r2, #4
 8014b88:	d5fc      	bpl.n	8014b84 <SystemInit+0xb4>
 8014b8a:	681a      	ldr	r2, [r3, #0]
 8014b8c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8014b90:	601a      	str	r2, [r3, #0]
 8014b92:	681a      	ldr	r2, [r3, #0]
 8014b94:	0191      	lsls	r1, r2, #6
 8014b96:	d5fc      	bpl.n	8014b92 <SystemInit+0xc2>
 8014b98:	685a      	ldr	r2, [r3, #4]
 8014b9a:	f022 0203 	bic.w	r2, r2, #3
 8014b9e:	605a      	str	r2, [r3, #4]
 8014ba0:	685a      	ldr	r2, [r3, #4]
 8014ba2:	f042 0202 	orr.w	r2, r2, #2
 8014ba6:	605a      	str	r2, [r3, #4]
 8014ba8:	685a      	ldr	r2, [r3, #4]
 8014baa:	0712      	lsls	r2, r2, #28
 8014bac:	d5fc      	bpl.n	8014ba8 <SystemInit+0xd8>
 8014bae:	4770      	bx	lr
 8014bb0:	40021000 	andmi	r1, r2, r0
 8014bb4:	fef6ffff 	mrc2	15, 7, pc, cr6, cr15, {7}
 8014bb8:	e0ff000c 	rscs	r0, pc, ip
 8014bbc:	fffef000 			; <UNDEFINED> instruction: 0xfffef000

08014bc0 <bkp_deinit>:
 8014bc0:	b508      	push	{r3, lr}
 8014bc2:	f000 f975 	bl	8014eb0 <rcu_bkp_reset_enable>
 8014bc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014bca:	f000 b979 	b.w	8014ec0 <rcu_bkp_reset_disable>
	...

08014bd0 <bkp_data_write>:
 8014bd0:	f1a0 030b 	sub.w	r3, r0, #11
 8014bd4:	2b1f      	cmp	r3, #31
 8014bd6:	d804      	bhi.n	8014be2 <bkp_data_write+0x12>
 8014bd8:	4b07      	ldr	r3, [pc, #28]	; (8014bf8 <bkp_data_write+0x28>)
 8014bda:	4403      	add	r3, r0
 8014bdc:	009b      	lsls	r3, r3, #2
 8014bde:	8019      	strh	r1, [r3, #0]
 8014be0:	4770      	bx	lr
 8014be2:	1e43      	subs	r3, r0, #1
 8014be4:	2b09      	cmp	r3, #9
 8014be6:	bf9f      	itttt	ls
 8014be8:	f100 5080 	addls.w	r0, r0, #268435456	; 0x10000000
 8014bec:	f500 50d8 	addls.w	r0, r0, #6912	; 0x1b00
 8014bf0:	0080      	lslls	r0, r0, #2
 8014bf2:	8001      	strhls	r1, [r0, #0]
 8014bf4:	4770      	bx	lr
 8014bf6:	bf00      	nop
 8014bf8:	10001b05 	andne	r1, r0, r5, lsl #22

08014bfc <bkp_data_read>:
 8014bfc:	f1a0 030b 	sub.w	r3, r0, #11
 8014c00:	2b1f      	cmp	r3, #31
 8014c02:	d805      	bhi.n	8014c10 <bkp_data_read+0x14>
 8014c04:	4b08      	ldr	r3, [pc, #32]	; (8014c28 <bkp_data_read+0x2c>)
 8014c06:	4403      	add	r3, r0
 8014c08:	009b      	lsls	r3, r3, #2
 8014c0a:	8818      	ldrh	r0, [r3, #0]
 8014c0c:	b280      	uxth	r0, r0
 8014c0e:	4770      	bx	lr
 8014c10:	1e43      	subs	r3, r0, #1
 8014c12:	2b09      	cmp	r3, #9
 8014c14:	d806      	bhi.n	8014c24 <bkp_data_read+0x28>
 8014c16:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
 8014c1a:	f500 50d8 	add.w	r0, r0, #6912	; 0x1b00
 8014c1e:	0080      	lsls	r0, r0, #2
 8014c20:	8800      	ldrh	r0, [r0, #0]
 8014c22:	e7f3      	b.n	8014c0c <bkp_data_read+0x10>
 8014c24:	2000      	movs	r0, #0
 8014c26:	4770      	bx	lr
 8014c28:	10001b05 	andne	r1, r0, r5, lsl #22

08014c2c <fmc_bank0_unlock>:
 8014c2c:	4b04      	ldr	r3, [pc, #16]	; (8014c40 <fmc_bank0_unlock+0x14>)
 8014c2e:	691a      	ldr	r2, [r3, #16]
 8014c30:	0612      	lsls	r2, r2, #24
 8014c32:	bf41      	itttt	mi
 8014c34:	4a03      	ldrmi	r2, [pc, #12]	; (8014c44 <fmc_bank0_unlock+0x18>)
 8014c36:	605a      	strmi	r2, [r3, #4]
 8014c38:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8014c3c:	605a      	strmi	r2, [r3, #4]
 8014c3e:	4770      	bx	lr
 8014c40:	40022000 	andmi	r2, r2, r0
 8014c44:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08014c48 <fmc_bank1_unlock>:
 8014c48:	4b04      	ldr	r3, [pc, #16]	; (8014c5c <fmc_bank1_unlock+0x14>)
 8014c4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014c4c:	0612      	lsls	r2, r2, #24
 8014c4e:	bf41      	itttt	mi
 8014c50:	4a03      	ldrmi	r2, [pc, #12]	; (8014c60 <fmc_bank1_unlock+0x18>)
 8014c52:	645a      	strmi	r2, [r3, #68]	; 0x44
 8014c54:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8014c58:	645a      	strmi	r2, [r3, #68]	; 0x44
 8014c5a:	4770      	bx	lr
 8014c5c:	40022000 	andmi	r2, r2, r0
 8014c60:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08014c64 <fmc_bank0_lock>:
 8014c64:	4a02      	ldr	r2, [pc, #8]	; (8014c70 <fmc_bank0_lock+0xc>)
 8014c66:	6913      	ldr	r3, [r2, #16]
 8014c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014c6c:	6113      	str	r3, [r2, #16]
 8014c6e:	4770      	bx	lr
 8014c70:	40022000 	andmi	r2, r2, r0

08014c74 <fmc_bank1_lock>:
 8014c74:	4a02      	ldr	r2, [pc, #8]	; (8014c80 <fmc_bank1_lock+0xc>)
 8014c76:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8014c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014c7c:	6513      	str	r3, [r2, #80]	; 0x50
 8014c7e:	4770      	bx	lr
 8014c80:	40022000 	andmi	r2, r2, r0

08014c84 <fmc_bank0_state_get>:
 8014c84:	4b07      	ldr	r3, [pc, #28]	; (8014ca4 <fmc_bank0_state_get+0x20>)
 8014c86:	68da      	ldr	r2, [r3, #12]
 8014c88:	07d1      	lsls	r1, r2, #31
 8014c8a:	d407      	bmi.n	8014c9c <fmc_bank0_state_get+0x18>
 8014c8c:	68da      	ldr	r2, [r3, #12]
 8014c8e:	06d2      	lsls	r2, r2, #27
 8014c90:	d406      	bmi.n	8014ca0 <fmc_bank0_state_get+0x1c>
 8014c92:	68d8      	ldr	r0, [r3, #12]
 8014c94:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8014c98:	0040      	lsls	r0, r0, #1
 8014c9a:	4770      	bx	lr
 8014c9c:	2001      	movs	r0, #1
 8014c9e:	4770      	bx	lr
 8014ca0:	2003      	movs	r0, #3
 8014ca2:	4770      	bx	lr
 8014ca4:	40022000 	andmi	r2, r2, r0

08014ca8 <fmc_bank1_state_get>:
 8014ca8:	4b07      	ldr	r3, [pc, #28]	; (8014cc8 <fmc_bank1_state_get+0x20>)
 8014caa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014cac:	07d1      	lsls	r1, r2, #31
 8014cae:	d407      	bmi.n	8014cc0 <fmc_bank1_state_get+0x18>
 8014cb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014cb2:	06d2      	lsls	r2, r2, #27
 8014cb4:	d406      	bmi.n	8014cc4 <fmc_bank1_state_get+0x1c>
 8014cb6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8014cb8:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8014cbc:	0040      	lsls	r0, r0, #1
 8014cbe:	4770      	bx	lr
 8014cc0:	2001      	movs	r0, #1
 8014cc2:	4770      	bx	lr
 8014cc4:	2003      	movs	r0, #3
 8014cc6:	4770      	bx	lr
 8014cc8:	40022000 	andmi	r2, r2, r0

08014ccc <fwdgt_enable>:
 8014ccc:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8014cd0:	4b01      	ldr	r3, [pc, #4]	; (8014cd8 <fwdgt_enable+0xc>)
 8014cd2:	601a      	str	r2, [r3, #0]
 8014cd4:	4770      	bx	lr
 8014cd6:	bf00      	nop
 8014cd8:	40003000 	andmi	r3, r0, r0

08014cdc <fwdgt_counter_reload>:
 8014cdc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8014ce0:	4b01      	ldr	r3, [pc, #4]	; (8014ce8 <fwdgt_counter_reload+0xc>)
 8014ce2:	601a      	str	r2, [r3, #0]
 8014ce4:	4770      	bx	lr
 8014ce6:	bf00      	nop
 8014ce8:	40003000 	andmi	r3, r0, r0

08014cec <fwdgt_config>:
 8014cec:	f245 5355 	movw	r3, #21845	; 0x5555
 8014cf0:	4a11      	ldr	r2, [pc, #68]	; (8014d38 <fwdgt_config+0x4c>)
 8014cf2:	b510      	push	{r4, lr}
 8014cf4:	4c11      	ldr	r4, [pc, #68]	; (8014d3c <fwdgt_config+0x50>)
 8014cf6:	6013      	str	r3, [r2, #0]
 8014cf8:	68d3      	ldr	r3, [r2, #12]
 8014cfa:	3c01      	subs	r4, #1
 8014cfc:	f003 0301 	and.w	r3, r3, #1
 8014d00:	d013      	beq.n	8014d2a <fwdgt_config+0x3e>
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d1f8      	bne.n	8014cf8 <fwdgt_config+0xc>
 8014d06:	6051      	str	r1, [r2, #4]
 8014d08:	490c      	ldr	r1, [pc, #48]	; (8014d3c <fwdgt_config+0x50>)
 8014d0a:	4a0b      	ldr	r2, [pc, #44]	; (8014d38 <fwdgt_config+0x4c>)
 8014d0c:	68d3      	ldr	r3, [r2, #12]
 8014d0e:	3901      	subs	r1, #1
 8014d10:	f003 0302 	and.w	r3, r3, #2
 8014d14:	d00d      	beq.n	8014d32 <fwdgt_config+0x46>
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d1f8      	bne.n	8014d0c <fwdgt_config+0x20>
 8014d1a:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8014d1e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8014d22:	6090      	str	r0, [r2, #8]
 8014d24:	2001      	movs	r0, #1
 8014d26:	6013      	str	r3, [r2, #0]
 8014d28:	e002      	b.n	8014d30 <fwdgt_config+0x44>
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d0eb      	beq.n	8014d06 <fwdgt_config+0x1a>
 8014d2e:	2000      	movs	r0, #0
 8014d30:	bd10      	pop	{r4, pc}
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d1fb      	bne.n	8014d2e <fwdgt_config+0x42>
 8014d36:	e7f0      	b.n	8014d1a <fwdgt_config+0x2e>
 8014d38:	40003000 	andmi	r3, r0, r0
 8014d3c:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08014d40 <gpio_init>:
 8014d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d44:	f04f 0c0f 	mov.w	ip, #15
 8014d48:	06cf      	lsls	r7, r1, #27
 8014d4a:	f04f 0400 	mov.w	r4, #0
 8014d4e:	f04f 0701 	mov.w	r7, #1
 8014d52:	f001 050f 	and.w	r5, r1, #15
 8014d56:	bf48      	it	mi
 8014d58:	4315      	orrmi	r5, r2
 8014d5a:	fa23 f204 	lsr.w	r2, r3, r4
 8014d5e:	07d6      	lsls	r6, r2, #31
 8014d60:	d510      	bpl.n	8014d84 <gpio_init+0x44>
 8014d62:	00a2      	lsls	r2, r4, #2
 8014d64:	6806      	ldr	r6, [r0, #0]
 8014d66:	fa0c fe02 	lsl.w	lr, ip, r2
 8014d6a:	ea26 060e 	bic.w	r6, r6, lr
 8014d6e:	fa05 f202 	lsl.w	r2, r5, r2
 8014d72:	2928      	cmp	r1, #40	; 0x28
 8014d74:	ea42 0206 	orr.w	r2, r2, r6
 8014d78:	d128      	bne.n	8014dcc <gpio_init+0x8c>
 8014d7a:	fa07 f604 	lsl.w	r6, r7, r4
 8014d7e:	401e      	ands	r6, r3
 8014d80:	6146      	str	r6, [r0, #20]
 8014d82:	6002      	str	r2, [r0, #0]
 8014d84:	3401      	adds	r4, #1
 8014d86:	2c08      	cmp	r4, #8
 8014d88:	d1e7      	bne.n	8014d5a <gpio_init+0x1a>
 8014d8a:	2600      	movs	r6, #0
 8014d8c:	f04f 0c0f 	mov.w	ip, #15
 8014d90:	2701      	movs	r7, #1
 8014d92:	f106 0208 	add.w	r2, r6, #8
 8014d96:	fa23 f402 	lsr.w	r4, r3, r2
 8014d9a:	07e4      	lsls	r4, r4, #31
 8014d9c:	d511      	bpl.n	8014dc2 <gpio_init+0x82>
 8014d9e:	00b4      	lsls	r4, r6, #2
 8014da0:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8014da4:	fa0c f804 	lsl.w	r8, ip, r4
 8014da8:	ea2e 0e08 	bic.w	lr, lr, r8
 8014dac:	fa05 f404 	lsl.w	r4, r5, r4
 8014db0:	2928      	cmp	r1, #40	; 0x28
 8014db2:	ea44 040e 	orr.w	r4, r4, lr
 8014db6:	d110      	bne.n	8014dda <gpio_init+0x9a>
 8014db8:	fa07 f202 	lsl.w	r2, r7, r2
 8014dbc:	401a      	ands	r2, r3
 8014dbe:	6142      	str	r2, [r0, #20]
 8014dc0:	6044      	str	r4, [r0, #4]
 8014dc2:	3601      	adds	r6, #1
 8014dc4:	2e08      	cmp	r6, #8
 8014dc6:	d1e4      	bne.n	8014d92 <gpio_init+0x52>
 8014dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dcc:	2948      	cmp	r1, #72	; 0x48
 8014dce:	bf02      	ittt	eq
 8014dd0:	fa07 f604 	lsleq.w	r6, r7, r4
 8014dd4:	401e      	andeq	r6, r3
 8014dd6:	6106      	streq	r6, [r0, #16]
 8014dd8:	e7d3      	b.n	8014d82 <gpio_init+0x42>
 8014dda:	2948      	cmp	r1, #72	; 0x48
 8014ddc:	bf02      	ittt	eq
 8014dde:	fa07 f202 	lsleq.w	r2, r7, r2
 8014de2:	401a      	andeq	r2, r3
 8014de4:	6102      	streq	r2, [r0, #16]
 8014de6:	e7eb      	b.n	8014dc0 <gpio_init+0x80>

08014de8 <gpio_pin_remap_config>:
 8014de8:	2800      	cmp	r0, #0
 8014dea:	4a16      	ldr	r2, [pc, #88]	; (8014e44 <gpio_pin_remap_config+0x5c>)
 8014dec:	b530      	push	{r4, r5, lr}
 8014dee:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 8014df2:	bfb4      	ite	lt
 8014df4:	69d3      	ldrlt	r3, [r2, #28]
 8014df6:	6853      	ldrge	r3, [r2, #4]
 8014df8:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
 8014dfc:	b284      	uxth	r4, r0
 8014dfe:	d110      	bne.n	8014e22 <gpio_pin_remap_config+0x3a>
 8014e00:	6855      	ldr	r5, [r2, #4]
 8014e02:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8014e06:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 8014e0a:	6055      	str	r5, [r2, #4]
 8014e0c:	b119      	cbz	r1, 8014e16 <gpio_pin_remap_config+0x2e>
 8014e0e:	0d42      	lsrs	r2, r0, #21
 8014e10:	0112      	lsls	r2, r2, #4
 8014e12:	4094      	lsls	r4, r2
 8014e14:	4323      	orrs	r3, r4
 8014e16:	4a0b      	ldr	r2, [pc, #44]	; (8014e44 <gpio_pin_remap_config+0x5c>)
 8014e18:	2800      	cmp	r0, #0
 8014e1a:	bfb4      	ite	lt
 8014e1c:	61d3      	strlt	r3, [r2, #28]
 8014e1e:	6053      	strge	r3, [r2, #4]
 8014e20:	bd30      	pop	{r4, r5, pc}
 8014e22:	02c2      	lsls	r2, r0, #11
 8014e24:	bf4d      	iteet	mi
 8014e26:	2203      	movmi	r2, #3
 8014e28:	0d42      	lsrpl	r2, r0, #21
 8014e2a:	0112      	lslpl	r2, r2, #4
 8014e2c:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
 8014e30:	bf4c      	ite	mi
 8014e32:	40aa      	lslmi	r2, r5
 8014e34:	fa04 f202 	lslpl.w	r2, r4, r2
 8014e38:	ea23 0302 	bic.w	r3, r3, r2
 8014e3c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8014e40:	e7e4      	b.n	8014e0c <gpio_pin_remap_config+0x24>
 8014e42:	bf00      	nop
 8014e44:	40010000 	andmi	r0, r1, r0

08014e48 <gpio_ethernet_phy_select>:
 8014e48:	4b04      	ldr	r3, [pc, #16]	; (8014e5c <gpio_ethernet_phy_select+0x14>)
 8014e4a:	685a      	ldr	r2, [r3, #4]
 8014e4c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8014e50:	605a      	str	r2, [r3, #4]
 8014e52:	685a      	ldr	r2, [r3, #4]
 8014e54:	4302      	orrs	r2, r0
 8014e56:	605a      	str	r2, [r3, #4]
 8014e58:	4770      	bx	lr
 8014e5a:	bf00      	nop
 8014e5c:	40010000 	andmi	r0, r1, r0

08014e60 <pmu_backup_write_enable>:
 8014e60:	4a02      	ldr	r2, [pc, #8]	; (8014e6c <pmu_backup_write_enable+0xc>)
 8014e62:	6813      	ldr	r3, [r2, #0]
 8014e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014e68:	6013      	str	r3, [r2, #0]
 8014e6a:	4770      	bx	lr
 8014e6c:	40007000 	andmi	r7, r0, r0

08014e70 <rcu_periph_clock_enable>:
 8014e70:	2201      	movs	r2, #1
 8014e72:	0983      	lsrs	r3, r0, #6
 8014e74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014e78:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8014e7c:	6819      	ldr	r1, [r3, #0]
 8014e7e:	f000 001f 	and.w	r0, r0, #31
 8014e82:	4082      	lsls	r2, r0
 8014e84:	430a      	orrs	r2, r1
 8014e86:	601a      	str	r2, [r3, #0]
 8014e88:	4770      	bx	lr

08014e8a <rcu_periph_clock_disable>:
 8014e8a:	2101      	movs	r1, #1
 8014e8c:	0983      	lsrs	r3, r0, #6
 8014e8e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014e92:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8014e96:	681a      	ldr	r2, [r3, #0]
 8014e98:	f000 001f 	and.w	r0, r0, #31
 8014e9c:	4081      	lsls	r1, r0
 8014e9e:	ea22 0201 	bic.w	r2, r2, r1
 8014ea2:	601a      	str	r2, [r3, #0]
 8014ea4:	4770      	bx	lr

08014ea6 <rcu_periph_reset_enable>:
 8014ea6:	f7ff bfe3 	b.w	8014e70 <rcu_periph_clock_enable>

08014eaa <rcu_periph_reset_disable>:
 8014eaa:	f7ff bfee 	b.w	8014e8a <rcu_periph_clock_disable>
	...

08014eb0 <rcu_bkp_reset_enable>:
 8014eb0:	4a02      	ldr	r2, [pc, #8]	; (8014ebc <rcu_bkp_reset_enable+0xc>)
 8014eb2:	6a13      	ldr	r3, [r2, #32]
 8014eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014eb8:	6213      	str	r3, [r2, #32]
 8014eba:	4770      	bx	lr
 8014ebc:	40021000 	andmi	r1, r2, r0

08014ec0 <rcu_bkp_reset_disable>:
 8014ec0:	4a02      	ldr	r2, [pc, #8]	; (8014ecc <rcu_bkp_reset_disable+0xc>)
 8014ec2:	6a13      	ldr	r3, [r2, #32]
 8014ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014ec8:	6213      	str	r3, [r2, #32]
 8014eca:	4770      	bx	lr
 8014ecc:	40021000 	andmi	r1, r2, r0

08014ed0 <rcu_ckout0_config>:
 8014ed0:	4a03      	ldr	r2, [pc, #12]	; (8014ee0 <rcu_ckout0_config+0x10>)
 8014ed2:	6853      	ldr	r3, [r2, #4]
 8014ed4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8014ed8:	4303      	orrs	r3, r0
 8014eda:	6053      	str	r3, [r2, #4]
 8014edc:	4770      	bx	lr
 8014ede:	bf00      	nop
 8014ee0:	40021000 	andmi	r1, r2, r0

08014ee4 <rcu_pll2_config>:
 8014ee4:	4b04      	ldr	r3, [pc, #16]	; (8014ef8 <rcu_pll2_config+0x14>)
 8014ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ee8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8014eec:	62da      	str	r2, [r3, #44]	; 0x2c
 8014eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ef0:	4302      	orrs	r2, r0
 8014ef2:	62da      	str	r2, [r3, #44]	; 0x2c
 8014ef4:	4770      	bx	lr
 8014ef6:	bf00      	nop
 8014ef8:	40021000 	andmi	r1, r2, r0

08014efc <rcu_adc_clock_config>:
 8014efc:	490c      	ldr	r1, [pc, #48]	; (8014f30 <rcu_adc_clock_config+0x34>)
 8014efe:	2805      	cmp	r0, #5
 8014f00:	684b      	ldr	r3, [r1, #4]
 8014f02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014f06:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8014f0a:	d006      	beq.n	8014f1a <rcu_adc_clock_config+0x1e>
 8014f0c:	d803      	bhi.n	8014f16 <rcu_adc_clock_config+0x1a>
 8014f0e:	2804      	cmp	r0, #4
 8014f10:	d10a      	bne.n	8014f28 <rcu_adc_clock_config+0x2c>
 8014f12:	604b      	str	r3, [r1, #4]
 8014f14:	4770      	bx	lr
 8014f16:	2807      	cmp	r0, #7
 8014f18:	d1fb      	bne.n	8014f12 <rcu_adc_clock_config+0x16>
 8014f1a:	4a06      	ldr	r2, [pc, #24]	; (8014f34 <rcu_adc_clock_config+0x38>)
 8014f1c:	ea02 3280 	and.w	r2, r2, r0, lsl #14
 8014f20:	4313      	orrs	r3, r2
 8014f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014f26:	e7f4      	b.n	8014f12 <rcu_adc_clock_config+0x16>
 8014f28:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 8014f2c:	e7f1      	b.n	8014f12 <rcu_adc_clock_config+0x16>
 8014f2e:	bf00      	nop
 8014f30:	40021000 	andmi	r1, r2, r0
 8014f34:	fffec000 			; <UNDEFINED> instruction: 0xfffec000

08014f38 <rcu_flag_get>:
 8014f38:	0983      	lsrs	r3, r0, #6
 8014f3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014f3e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8014f42:	681a      	ldr	r2, [r3, #0]
 8014f44:	2301      	movs	r3, #1
 8014f46:	f000 001f 	and.w	r0, r0, #31
 8014f4a:	4083      	lsls	r3, r0
 8014f4c:	4213      	tst	r3, r2
 8014f4e:	bf14      	ite	ne
 8014f50:	2001      	movne	r0, #1
 8014f52:	2000      	moveq	r0, #0
 8014f54:	4770      	bx	lr
	...

08014f58 <rcu_osci_stab_wait>:
 8014f58:	281a      	cmp	r0, #26
 8014f5a:	b508      	push	{r3, lr}
 8014f5c:	d051      	beq.n	8015002 <rcu_osci_stab_wait+0xaa>
 8014f5e:	d806      	bhi.n	8014f6e <rcu_osci_stab_wait+0x16>
 8014f60:	2810      	cmp	r0, #16
 8014f62:	d015      	beq.n	8014f90 <rcu_osci_stab_wait+0x38>
 8014f64:	2818      	cmp	r0, #24
 8014f66:	d043      	beq.n	8014ff0 <rcu_osci_stab_wait+0x98>
 8014f68:	b368      	cbz	r0, 8014fc6 <rcu_osci_stab_wait+0x6e>
 8014f6a:	2000      	movs	r0, #0
 8014f6c:	bd08      	pop	{r3, pc}
 8014f6e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8014f72:	d01c      	beq.n	8014fae <rcu_osci_stab_wait+0x56>
 8014f74:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
 8014f78:	d02f      	beq.n	8014fda <rcu_osci_stab_wait+0x82>
 8014f7a:	281c      	cmp	r0, #28
 8014f7c:	d1f5      	bne.n	8014f6a <rcu_osci_stab_wait+0x12>
 8014f7e:	4925      	ldr	r1, [pc, #148]	; (8015014 <rcu_osci_stab_wait+0xbc>)
 8014f80:	201d      	movs	r0, #29
 8014f82:	f7ff ffd9 	bl	8014f38 <rcu_flag_get>
 8014f86:	b908      	cbnz	r0, 8014f8c <rcu_osci_stab_wait+0x34>
 8014f88:	3901      	subs	r1, #1
 8014f8a:	d1f9      	bne.n	8014f80 <rcu_osci_stab_wait+0x28>
 8014f8c:	201d      	movs	r0, #29
 8014f8e:	e008      	b.n	8014fa2 <rcu_osci_stab_wait+0x4a>
 8014f90:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014f94:	2011      	movs	r0, #17
 8014f96:	f7ff ffcf 	bl	8014f38 <rcu_flag_get>
 8014f9a:	b908      	cbnz	r0, 8014fa0 <rcu_osci_stab_wait+0x48>
 8014f9c:	3901      	subs	r1, #1
 8014f9e:	d1f9      	bne.n	8014f94 <rcu_osci_stab_wait+0x3c>
 8014fa0:	2011      	movs	r0, #17
 8014fa2:	f7ff ffc9 	bl	8014f38 <rcu_flag_get>
 8014fa6:	3800      	subs	r0, #0
 8014fa8:	bf18      	it	ne
 8014faa:	2001      	movne	r0, #1
 8014fac:	e7de      	b.n	8014f6c <rcu_osci_stab_wait+0x14>
 8014fae:	f06f 417c 	mvn.w	r1, #4227858432	; 0xfc000000
 8014fb2:	f640 0001 	movw	r0, #2049	; 0x801
 8014fb6:	f7ff ffbf 	bl	8014f38 <rcu_flag_get>
 8014fba:	b908      	cbnz	r0, 8014fc0 <rcu_osci_stab_wait+0x68>
 8014fbc:	3901      	subs	r1, #1
 8014fbe:	d1f8      	bne.n	8014fb2 <rcu_osci_stab_wait+0x5a>
 8014fc0:	f640 0001 	movw	r0, #2049	; 0x801
 8014fc4:	e7ed      	b.n	8014fa2 <rcu_osci_stab_wait+0x4a>
 8014fc6:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8014fca:	2001      	movs	r0, #1
 8014fcc:	f7ff ffb4 	bl	8014f38 <rcu_flag_get>
 8014fd0:	b908      	cbnz	r0, 8014fd6 <rcu_osci_stab_wait+0x7e>
 8014fd2:	3901      	subs	r1, #1
 8014fd4:	d1f9      	bne.n	8014fca <rcu_osci_stab_wait+0x72>
 8014fd6:	2001      	movs	r0, #1
 8014fd8:	e7e3      	b.n	8014fa2 <rcu_osci_stab_wait+0x4a>
 8014fda:	490e      	ldr	r1, [pc, #56]	; (8015014 <rcu_osci_stab_wait+0xbc>)
 8014fdc:	f640 1001 	movw	r0, #2305	; 0x901
 8014fe0:	f7ff ffaa 	bl	8014f38 <rcu_flag_get>
 8014fe4:	b908      	cbnz	r0, 8014fea <rcu_osci_stab_wait+0x92>
 8014fe6:	3901      	subs	r1, #1
 8014fe8:	d1f8      	bne.n	8014fdc <rcu_osci_stab_wait+0x84>
 8014fea:	f640 1001 	movw	r0, #2305	; 0x901
 8014fee:	e7d8      	b.n	8014fa2 <rcu_osci_stab_wait+0x4a>
 8014ff0:	4908      	ldr	r1, [pc, #32]	; (8015014 <rcu_osci_stab_wait+0xbc>)
 8014ff2:	2019      	movs	r0, #25
 8014ff4:	f7ff ffa0 	bl	8014f38 <rcu_flag_get>
 8014ff8:	b908      	cbnz	r0, 8014ffe <rcu_osci_stab_wait+0xa6>
 8014ffa:	3901      	subs	r1, #1
 8014ffc:	d1f9      	bne.n	8014ff2 <rcu_osci_stab_wait+0x9a>
 8014ffe:	2019      	movs	r0, #25
 8015000:	e7cf      	b.n	8014fa2 <rcu_osci_stab_wait+0x4a>
 8015002:	4904      	ldr	r1, [pc, #16]	; (8015014 <rcu_osci_stab_wait+0xbc>)
 8015004:	201b      	movs	r0, #27
 8015006:	f7ff ff97 	bl	8014f38 <rcu_flag_get>
 801500a:	b908      	cbnz	r0, 8015010 <rcu_osci_stab_wait+0xb8>
 801500c:	3901      	subs	r1, #1
 801500e:	d1f9      	bne.n	8015004 <rcu_osci_stab_wait+0xac>
 8015010:	201b      	movs	r0, #27
 8015012:	e7c6      	b.n	8014fa2 <rcu_osci_stab_wait+0x4a>
 8015014:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08015018 <rcu_osci_on>:
 8015018:	f7ff bf2a 	b.w	8014e70 <rcu_periph_clock_enable>

0801501c <rcu_clock_freq_get>:
 801501c:	4b3e      	ldr	r3, [pc, #248]	; (8015118 <rcu_clock_freq_get+0xfc>)
 801501e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015020:	4604      	mov	r4, r0
 8015022:	461f      	mov	r7, r3
 8015024:	b089      	sub	sp, #36	; 0x24
 8015026:	ad04      	add	r5, sp, #16
 8015028:	f103 0610 	add.w	r6, r3, #16
 801502c:	462a      	mov	r2, r5
 801502e:	6818      	ldr	r0, [r3, #0]
 8015030:	6859      	ldr	r1, [r3, #4]
 8015032:	3308      	adds	r3, #8
 8015034:	c203      	stmia	r2!, {r0, r1}
 8015036:	42b3      	cmp	r3, r6
 8015038:	4615      	mov	r5, r2
 801503a:	d1f7      	bne.n	801502c <rcu_clock_freq_get+0x10>
 801503c:	466b      	mov	r3, sp
 801503e:	6938      	ldr	r0, [r7, #16]
 8015040:	6871      	ldr	r1, [r6, #4]
 8015042:	4a36      	ldr	r2, [pc, #216]	; (801511c <rcu_clock_freq_get+0x100>)
 8015044:	c303      	stmia	r3!, {r0, r1}
 8015046:	c303      	stmia	r3!, {r0, r1}
 8015048:	6853      	ldr	r3, [r2, #4]
 801504a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801504e:	2b01      	cmp	r3, #1
 8015050:	d053      	beq.n	80150fa <rcu_clock_freq_get+0xde>
 8015052:	2b02      	cmp	r3, #2
 8015054:	d153      	bne.n	80150fe <rcu_clock_freq_get+0xe2>
 8015056:	6853      	ldr	r3, [r2, #4]
 8015058:	03dd      	lsls	r5, r3, #15
 801505a:	d523      	bpl.n	80150a4 <rcu_clock_freq_get+0x88>
 801505c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 801505e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8015062:	4b2f      	ldr	r3, [pc, #188]	; (8015120 <rcu_clock_freq_get+0x104>)
 8015064:	d00e      	beq.n	8015084 <rcu_clock_freq_get+0x68>
 8015066:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8015068:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 801506a:	f3c1 1103 	ubfx	r1, r1, #4, #4
 801506e:	f3c0 2003 	ubfx	r0, r0, #8, #4
 8015072:	3101      	adds	r1, #1
 8015074:	280f      	cmp	r0, #15
 8015076:	f100 0502 	add.w	r5, r0, #2
 801507a:	fbb3 f3f1 	udiv	r3, r3, r1
 801507e:	bf08      	it	eq
 8015080:	2514      	moveq	r5, #20
 8015082:	436b      	muls	r3, r5
 8015084:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8015086:	f001 010f 	and.w	r1, r1, #15
 801508a:	3101      	adds	r1, #1
 801508c:	fbb3 f3f1 	udiv	r3, r3, r1
 8015090:	6851      	ldr	r1, [r2, #4]
 8015092:	6850      	ldr	r0, [r2, #4]
 8015094:	f3c1 4183 	ubfx	r1, r1, #18, #4
 8015098:	0080      	lsls	r0, r0, #2
 801509a:	d505      	bpl.n	80150a8 <rcu_clock_freq_get+0x8c>
 801509c:	f041 0110 	orr.w	r1, r1, #16
 80150a0:	1c48      	adds	r0, r1, #1
 80150a2:	e007      	b.n	80150b4 <rcu_clock_freq_get+0x98>
 80150a4:	4b1f      	ldr	r3, [pc, #124]	; (8015124 <rcu_clock_freq_get+0x108>)
 80150a6:	e7f3      	b.n	8015090 <rcu_clock_freq_get+0x74>
 80150a8:	290f      	cmp	r1, #15
 80150aa:	d0f9      	beq.n	80150a0 <rcu_clock_freq_get+0x84>
 80150ac:	290d      	cmp	r1, #13
 80150ae:	f101 0002 	add.w	r0, r1, #2
 80150b2:	d01d      	beq.n	80150f0 <rcu_clock_freq_get+0xd4>
 80150b4:	4358      	muls	r0, r3
 80150b6:	6853      	ldr	r3, [r2, #4]
 80150b8:	6851      	ldr	r1, [r2, #4]
 80150ba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80150be:	6852      	ldr	r2, [r2, #4]
 80150c0:	3320      	adds	r3, #32
 80150c2:	446b      	add	r3, sp
 80150c4:	f3c1 2102 	ubfx	r1, r1, #8, #3
 80150c8:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 80150cc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80150d0:	3120      	adds	r1, #32
 80150d2:	3220      	adds	r2, #32
 80150d4:	4469      	add	r1, sp
 80150d6:	446a      	add	r2, sp
 80150d8:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 80150dc:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80150e0:	fa20 f303 	lsr.w	r3, r0, r3
 80150e4:	2c03      	cmp	r4, #3
 80150e6:	d815      	bhi.n	8015114 <rcu_clock_freq_get+0xf8>
 80150e8:	e8df f004 	tbb	[pc, r4]
 80150ec:	110e0b0c 	tstne	lr, ip, lsl #22
 80150f0:	2006      	movs	r0, #6
 80150f2:	0859      	lsrs	r1, r3, #1
 80150f4:	fb00 1003 	mla	r0, r0, r3, r1
 80150f8:	e7dd      	b.n	80150b6 <rcu_clock_freq_get+0x9a>
 80150fa:	4809      	ldr	r0, [pc, #36]	; (8015120 <rcu_clock_freq_get+0x104>)
 80150fc:	e7db      	b.n	80150b6 <rcu_clock_freq_get+0x9a>
 80150fe:	480a      	ldr	r0, [pc, #40]	; (8015128 <rcu_clock_freq_get+0x10c>)
 8015100:	e7d9      	b.n	80150b6 <rcu_clock_freq_get+0x9a>
 8015102:	4618      	mov	r0, r3
 8015104:	b009      	add	sp, #36	; 0x24
 8015106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015108:	fa23 f001 	lsr.w	r0, r3, r1
 801510c:	e7fa      	b.n	8015104 <rcu_clock_freq_get+0xe8>
 801510e:	fa23 f002 	lsr.w	r0, r3, r2
 8015112:	e7f7      	b.n	8015104 <rcu_clock_freq_get+0xe8>
 8015114:	2000      	movs	r0, #0
 8015116:	e7f5      	b.n	8015104 <rcu_clock_freq_get+0xe8>
 8015118:	0801694d 	stmdaeq	r1, {r0, r2, r3, r6, r8, fp, sp, lr}
 801511c:	40021000 	andmi	r1, r2, r0
 8015120:	017d7840 	cmneq	sp, r0, asr #16
 8015124:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8015128:	007a1200 	rsbseq	r1, sl, r0, lsl #4

0801512c <timer_deinit>:
 801512c:	b508      	push	{r3, lr}
 801512e:	4b2d      	ldr	r3, [pc, #180]	; (80151e4 <timer_deinit+0xb8>)
 8015130:	4298      	cmp	r0, r3
 8015132:	d048      	beq.n	80151c6 <timer_deinit+0x9a>
 8015134:	d816      	bhi.n	8015164 <timer_deinit+0x38>
 8015136:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801513a:	4298      	cmp	r0, r3
 801513c:	d03c      	beq.n	80151b8 <timer_deinit+0x8c>
 801513e:	d807      	bhi.n	8015150 <timer_deinit+0x24>
 8015140:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8015144:	d02a      	beq.n	801519c <timer_deinit+0x70>
 8015146:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801514a:	4298      	cmp	r0, r3
 801514c:	d02d      	beq.n	80151aa <timer_deinit+0x7e>
 801514e:	bd08      	pop	{r3, pc}
 8015150:	4b25      	ldr	r3, [pc, #148]	; (80151e8 <timer_deinit+0xbc>)
 8015152:	4298      	cmp	r0, r3
 8015154:	d1fb      	bne.n	801514e <timer_deinit+0x22>
 8015156:	f240 4003 	movw	r0, #1027	; 0x403
 801515a:	f7ff fea4 	bl	8014ea6 <rcu_periph_reset_enable>
 801515e:	f240 4003 	movw	r0, #1027	; 0x403
 8015162:	e017      	b.n	8015194 <timer_deinit+0x68>
 8015164:	4b21      	ldr	r3, [pc, #132]	; (80151ec <timer_deinit+0xc0>)
 8015166:	4298      	cmp	r0, r3
 8015168:	d00e      	beq.n	8015188 <timer_deinit+0x5c>
 801516a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801516e:	4298      	cmp	r0, r3
 8015170:	d030      	beq.n	80151d4 <timer_deinit+0xa8>
 8015172:	f5a3 3390 	sub.w	r3, r3, #73728	; 0x12000
 8015176:	4298      	cmp	r0, r3
 8015178:	d1e9      	bne.n	801514e <timer_deinit+0x22>
 801517a:	f240 4005 	movw	r0, #1029	; 0x405
 801517e:	f7ff fe92 	bl	8014ea6 <rcu_periph_reset_enable>
 8015182:	f240 4005 	movw	r0, #1029	; 0x405
 8015186:	e005      	b.n	8015194 <timer_deinit+0x68>
 8015188:	f240 300b 	movw	r0, #779	; 0x30b
 801518c:	f7ff fe8b 	bl	8014ea6 <rcu_periph_reset_enable>
 8015190:	f240 300b 	movw	r0, #779	; 0x30b
 8015194:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015198:	f7ff be87 	b.w	8014eaa <rcu_periph_reset_disable>
 801519c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80151a0:	f7ff fe81 	bl	8014ea6 <rcu_periph_reset_enable>
 80151a4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80151a8:	e7f4      	b.n	8015194 <timer_deinit+0x68>
 80151aa:	f240 4001 	movw	r0, #1025	; 0x401
 80151ae:	f7ff fe7a 	bl	8014ea6 <rcu_periph_reset_enable>
 80151b2:	f240 4001 	movw	r0, #1025	; 0x401
 80151b6:	e7ed      	b.n	8015194 <timer_deinit+0x68>
 80151b8:	f240 4002 	movw	r0, #1026	; 0x402
 80151bc:	f7ff fe73 	bl	8014ea6 <rcu_periph_reset_enable>
 80151c0:	f240 4002 	movw	r0, #1026	; 0x402
 80151c4:	e7e6      	b.n	8015194 <timer_deinit+0x68>
 80151c6:	f240 4004 	movw	r0, #1028	; 0x404
 80151ca:	f7ff fe6c 	bl	8014ea6 <rcu_periph_reset_enable>
 80151ce:	f240 4004 	movw	r0, #1028	; 0x404
 80151d2:	e7df      	b.n	8015194 <timer_deinit+0x68>
 80151d4:	f240 300d 	movw	r0, #781	; 0x30d
 80151d8:	f7ff fe65 	bl	8014ea6 <rcu_periph_reset_enable>
 80151dc:	f240 300d 	movw	r0, #781	; 0x30d
 80151e0:	e7d8      	b.n	8015194 <timer_deinit+0x68>
 80151e2:	bf00      	nop
 80151e4:	40001000 	andmi	r1, r0, r0
 80151e8:	40000c00 	andmi	r0, r0, r0, lsl #24
 80151ec:	40012c00 	andmi	r2, r1, r0, lsl #24

080151f0 <timer_init>:
 80151f0:	880b      	ldrh	r3, [r1, #0]
 80151f2:	6283      	str	r3, [r0, #40]	; 0x28
 80151f4:	4b26      	ldr	r3, [pc, #152]	; (8015290 <timer_init+0xa0>)
 80151f6:	4298      	cmp	r0, r3
 80151f8:	d018      	beq.n	801522c <timer_init+0x3c>
 80151fa:	f420 6240 	bic.w	r2, r0, #3072	; 0xc00
 80151fe:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8015202:	f420 6380 	bic.w	r3, r0, #1024	; 0x400
 8015206:	d011      	beq.n	801522c <timer_init+0x3c>
 8015208:	4a22      	ldr	r2, [pc, #136]	; (8015294 <timer_init+0xa4>)
 801520a:	4290      	cmp	r0, r2
 801520c:	d00e      	beq.n	801522c <timer_init+0x3c>
 801520e:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 8015212:	4290      	cmp	r0, r2
 8015214:	d00a      	beq.n	801522c <timer_init+0x3c>
 8015216:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801521a:	4293      	cmp	r3, r2
 801521c:	d006      	beq.n	801522c <timer_init+0x3c>
 801521e:	f5a2 329c 	sub.w	r2, r2, #79872	; 0x13800
 8015222:	4293      	cmp	r3, r2
 8015224:	d002      	beq.n	801522c <timer_init+0x3c>
 8015226:	4b1c      	ldr	r3, [pc, #112]	; (8015298 <timer_init+0xa8>)
 8015228:	4298      	cmp	r0, r3
 801522a:	d10f      	bne.n	801524c <timer_init+0x5c>
 801522c:	6803      	ldr	r3, [r0, #0]
 801522e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015232:	6003      	str	r3, [r0, #0]
 8015234:	884b      	ldrh	r3, [r1, #2]
 8015236:	6802      	ldr	r2, [r0, #0]
 8015238:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801523c:	4313      	orrs	r3, r2
 801523e:	6003      	str	r3, [r0, #0]
 8015240:	888b      	ldrh	r3, [r1, #4]
 8015242:	6802      	ldr	r2, [r0, #0]
 8015244:	f003 0310 	and.w	r3, r3, #16
 8015248:	4313      	orrs	r3, r2
 801524a:	6003      	str	r3, [r0, #0]
 801524c:	688b      	ldr	r3, [r1, #8]
 801524e:	62c3      	str	r3, [r0, #44]	; 0x2c
 8015250:	4b12      	ldr	r3, [pc, #72]	; (801529c <timer_init+0xac>)
 8015252:	4298      	cmp	r0, r3
 8015254:	d003      	beq.n	801525e <timer_init+0x6e>
 8015256:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801525a:	4298      	cmp	r0, r3
 801525c:	d104      	bne.n	8015268 <timer_init+0x78>
 801525e:	6943      	ldr	r3, [r0, #20]
 8015260:	f043 0301 	orr.w	r3, r3, #1
 8015264:	6143      	str	r3, [r0, #20]
 8015266:	4770      	bx	lr
 8015268:	6803      	ldr	r3, [r0, #0]
 801526a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801526e:	6003      	str	r3, [r0, #0]
 8015270:	898b      	ldrh	r3, [r1, #12]
 8015272:	6802      	ldr	r2, [r0, #0]
 8015274:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015278:	4313      	orrs	r3, r2
 801527a:	6003      	str	r3, [r0, #0]
 801527c:	4b04      	ldr	r3, [pc, #16]	; (8015290 <timer_init+0xa0>)
 801527e:	4298      	cmp	r0, r3
 8015280:	d002      	beq.n	8015288 <timer_init+0x98>
 8015282:	4b04      	ldr	r3, [pc, #16]	; (8015294 <timer_init+0xa4>)
 8015284:	4298      	cmp	r0, r3
 8015286:	d1ea      	bne.n	801525e <timer_init+0x6e>
 8015288:	7b8b      	ldrb	r3, [r1, #14]
 801528a:	6303      	str	r3, [r0, #48]	; 0x30
 801528c:	e7e7      	b.n	801525e <timer_init+0x6e>
 801528e:	bf00      	nop
 8015290:	40012c00 	andmi	r2, r1, r0, lsl #24
 8015294:	40013400 	andmi	r3, r1, r0, lsl #8
 8015298:	40002000 	andmi	r2, r0, r0
 801529c:	40001000 	andmi	r1, r0, r0

080152a0 <timer_enable>:
 80152a0:	6803      	ldr	r3, [r0, #0]
 80152a2:	f043 0301 	orr.w	r3, r3, #1
 80152a6:	6003      	str	r3, [r0, #0]
 80152a8:	4770      	bx	lr
	...

080152ac <usart_deinit>:
 80152ac:	b508      	push	{r3, lr}
 80152ae:	4b1d      	ldr	r3, [pc, #116]	; (8015324 <usart_deinit+0x78>)
 80152b0:	4298      	cmp	r0, r3
 80152b2:	d028      	beq.n	8015306 <usart_deinit+0x5a>
 80152b4:	d808      	bhi.n	80152c8 <usart_deinit+0x1c>
 80152b6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80152ba:	4298      	cmp	r0, r3
 80152bc:	d015      	beq.n	80152ea <usart_deinit+0x3e>
 80152be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80152c2:	4298      	cmp	r0, r3
 80152c4:	d018      	beq.n	80152f8 <usart_deinit+0x4c>
 80152c6:	bd08      	pop	{r3, pc}
 80152c8:	4b17      	ldr	r3, [pc, #92]	; (8015328 <usart_deinit+0x7c>)
 80152ca:	4298      	cmp	r0, r3
 80152cc:	d022      	beq.n	8015314 <usart_deinit+0x68>
 80152ce:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 80152d2:	4298      	cmp	r0, r3
 80152d4:	d1f7      	bne.n	80152c6 <usart_deinit+0x1a>
 80152d6:	f240 300e 	movw	r0, #782	; 0x30e
 80152da:	f7ff fde4 	bl	8014ea6 <rcu_periph_reset_enable>
 80152de:	f240 300e 	movw	r0, #782	; 0x30e
 80152e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80152e6:	f7ff bde0 	b.w	8014eaa <rcu_periph_reset_disable>
 80152ea:	f240 4011 	movw	r0, #1041	; 0x411
 80152ee:	f7ff fdda 	bl	8014ea6 <rcu_periph_reset_enable>
 80152f2:	f240 4011 	movw	r0, #1041	; 0x411
 80152f6:	e7f4      	b.n	80152e2 <usart_deinit+0x36>
 80152f8:	f240 4012 	movw	r0, #1042	; 0x412
 80152fc:	f7ff fdd3 	bl	8014ea6 <rcu_periph_reset_enable>
 8015300:	f240 4012 	movw	r0, #1042	; 0x412
 8015304:	e7ed      	b.n	80152e2 <usart_deinit+0x36>
 8015306:	f240 4013 	movw	r0, #1043	; 0x413
 801530a:	f7ff fdcc 	bl	8014ea6 <rcu_periph_reset_enable>
 801530e:	f240 4013 	movw	r0, #1043	; 0x413
 8015312:	e7e6      	b.n	80152e2 <usart_deinit+0x36>
 8015314:	f240 4014 	movw	r0, #1044	; 0x414
 8015318:	f7ff fdc5 	bl	8014ea6 <rcu_periph_reset_enable>
 801531c:	f240 4014 	movw	r0, #1044	; 0x414
 8015320:	e7df      	b.n	80152e2 <usart_deinit+0x36>
 8015322:	bf00      	nop
 8015324:	40004c00 	andmi	r4, r0, r0, lsl #24
 8015328:	40005000 	andmi	r5, r0, r0

0801532c <usart_baudrate_set>:
 801532c:	b538      	push	{r3, r4, r5, lr}
 801532e:	4b11      	ldr	r3, [pc, #68]	; (8015374 <usart_baudrate_set+0x48>)
 8015330:	4604      	mov	r4, r0
 8015332:	4298      	cmp	r0, r3
 8015334:	460d      	mov	r5, r1
 8015336:	d01b      	beq.n	8015370 <usart_baudrate_set+0x44>
 8015338:	d809      	bhi.n	801534e <usart_baudrate_set+0x22>
 801533a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801533e:	4298      	cmp	r0, r3
 8015340:	d016      	beq.n	8015370 <usart_baudrate_set+0x44>
 8015342:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015346:	4298      	cmp	r0, r3
 8015348:	d012      	beq.n	8015370 <usart_baudrate_set+0x44>
 801534a:	2000      	movs	r0, #0
 801534c:	e009      	b.n	8015362 <usart_baudrate_set+0x36>
 801534e:	4b0a      	ldr	r3, [pc, #40]	; (8015378 <usart_baudrate_set+0x4c>)
 8015350:	4298      	cmp	r0, r3
 8015352:	d00d      	beq.n	8015370 <usart_baudrate_set+0x44>
 8015354:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8015358:	4298      	cmp	r0, r3
 801535a:	d1f6      	bne.n	801534a <usart_baudrate_set+0x1e>
 801535c:	2003      	movs	r0, #3
 801535e:	f7ff fe5d 	bl	801501c <rcu_clock_freq_get>
 8015362:	eb00 0155 	add.w	r1, r0, r5, lsr #1
 8015366:	fbb1 f1f5 	udiv	r1, r1, r5
 801536a:	b289      	uxth	r1, r1
 801536c:	60a1      	str	r1, [r4, #8]
 801536e:	bd38      	pop	{r3, r4, r5, pc}
 8015370:	2002      	movs	r0, #2
 8015372:	e7f4      	b.n	801535e <usart_baudrate_set+0x32>
 8015374:	40004c00 	andmi	r4, r0, r0, lsl #24
 8015378:	40005000 	andmi	r5, r0, r0

0801537c <usart_parity_config>:
 801537c:	68c3      	ldr	r3, [r0, #12]
 801537e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8015382:	60c3      	str	r3, [r0, #12]
 8015384:	68c3      	ldr	r3, [r0, #12]
 8015386:	430b      	orrs	r3, r1
 8015388:	60c3      	str	r3, [r0, #12]
 801538a:	4770      	bx	lr

0801538c <usart_word_length_set>:
 801538c:	68c3      	ldr	r3, [r0, #12]
 801538e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015392:	60c3      	str	r3, [r0, #12]
 8015394:	68c3      	ldr	r3, [r0, #12]
 8015396:	430b      	orrs	r3, r1
 8015398:	60c3      	str	r3, [r0, #12]
 801539a:	4770      	bx	lr

0801539c <usart_stop_bit_set>:
 801539c:	6903      	ldr	r3, [r0, #16]
 801539e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80153a2:	6103      	str	r3, [r0, #16]
 80153a4:	6903      	ldr	r3, [r0, #16]
 80153a6:	430b      	orrs	r3, r1
 80153a8:	6103      	str	r3, [r0, #16]
 80153aa:	4770      	bx	lr

080153ac <usart_transmit_config>:
 80153ac:	68c3      	ldr	r3, [r0, #12]
 80153ae:	f023 0308 	bic.w	r3, r3, #8
 80153b2:	430b      	orrs	r3, r1
 80153b4:	60c3      	str	r3, [r0, #12]
 80153b6:	4770      	bx	lr

080153b8 <usart_receive_config>:
 80153b8:	68c3      	ldr	r3, [r0, #12]
 80153ba:	f023 0304 	bic.w	r3, r3, #4
 80153be:	430b      	orrs	r3, r1
 80153c0:	60c3      	str	r3, [r0, #12]
 80153c2:	4770      	bx	lr

080153c4 <usart_hardware_flow_rts_config>:
 80153c4:	6943      	ldr	r3, [r0, #20]
 80153c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80153ca:	430b      	orrs	r3, r1
 80153cc:	6143      	str	r3, [r0, #20]
 80153ce:	4770      	bx	lr

080153d0 <usart_hardware_flow_cts_config>:
 80153d0:	6943      	ldr	r3, [r0, #20]
 80153d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80153d6:	430b      	orrs	r3, r1
 80153d8:	6143      	str	r3, [r0, #20]
 80153da:	4770      	bx	lr

080153dc <usart_flag_get>:
 80153dc:	098b      	lsrs	r3, r1, #6
 80153de:	581a      	ldr	r2, [r3, r0]
 80153e0:	2301      	movs	r3, #1
 80153e2:	f001 011f 	and.w	r1, r1, #31
 80153e6:	408b      	lsls	r3, r1
 80153e8:	4213      	tst	r3, r2
 80153ea:	bf14      	ite	ne
 80153ec:	2001      	movne	r0, #1
 80153ee:	2000      	moveq	r0, #0
 80153f0:	4770      	bx	lr
	...

080153f4 <emac_start>:
 80153f4:	b510      	push	{r4, lr}
 80153f6:	4604      	mov	r4, r0
 80153f8:	f240 6002 	movw	r0, #1538	; 0x602
 80153fc:	f7ff fd38 	bl	8014e70 <rcu_periph_clock_enable>
 8015400:	f240 6003 	movw	r0, #1539	; 0x603
 8015404:	f7ff fd34 	bl	8014e70 <rcu_periph_clock_enable>
 8015408:	f240 6004 	movw	r0, #1540	; 0x604
 801540c:	f7ff fd30 	bl	8014e70 <rcu_periph_clock_enable>
 8015410:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015414:	2203      	movs	r2, #3
 8015416:	2118      	movs	r1, #24
 8015418:	4846      	ldr	r0, [pc, #280]	; (8015534 <emac_start+0x140>)
 801541a:	f7ff fc91 	bl	8014d40 <gpio_init>
 801541e:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8015422:	f7ff fd25 	bl	8014e70 <rcu_periph_clock_enable>
 8015426:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 801542a:	f7ff fd5b 	bl	8014ee4 <rcu_pll2_config>
 801542e:	201c      	movs	r0, #28
 8015430:	f7ff fdf2 	bl	8015018 <rcu_osci_on>
 8015434:	201c      	movs	r0, #28
 8015436:	f7ff fd8f 	bl	8014f58 <rcu_osci_stab_wait>
 801543a:	f04f 6030 	mov.w	r0, #184549376	; 0xb000000
 801543e:	f7ff fd47 	bl	8014ed0 <rcu_ckout0_config>
 8015442:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8015446:	f7ff fcff 	bl	8014e48 <gpio_ethernet_phy_select>
 801544a:	2302      	movs	r3, #2
 801544c:	2203      	movs	r2, #3
 801544e:	2104      	movs	r1, #4
 8015450:	4838      	ldr	r0, [pc, #224]	; (8015534 <emac_start+0x140>)
 8015452:	f7ff fc75 	bl	8014d40 <gpio_init>
 8015456:	2304      	movs	r3, #4
 8015458:	2203      	movs	r2, #3
 801545a:	2118      	movs	r1, #24
 801545c:	4835      	ldr	r0, [pc, #212]	; (8015534 <emac_start+0x140>)
 801545e:	f7ff fc6f 	bl	8014d40 <gpio_init>
 8015462:	2380      	movs	r3, #128	; 0x80
 8015464:	2203      	movs	r2, #3
 8015466:	2104      	movs	r1, #4
 8015468:	4832      	ldr	r0, [pc, #200]	; (8015534 <emac_start+0x140>)
 801546a:	f7ff fc69 	bl	8014d40 <gpio_init>
 801546e:	2302      	movs	r3, #2
 8015470:	2203      	movs	r2, #3
 8015472:	2118      	movs	r1, #24
 8015474:	4830      	ldr	r0, [pc, #192]	; (8015538 <emac_start+0x144>)
 8015476:	f7ff fc63 	bl	8014d40 <gpio_init>
 801547a:	2310      	movs	r3, #16
 801547c:	2203      	movs	r2, #3
 801547e:	2104      	movs	r1, #4
 8015480:	482d      	ldr	r0, [pc, #180]	; (8015538 <emac_start+0x144>)
 8015482:	f7ff fc5d 	bl	8014d40 <gpio_init>
 8015486:	2320      	movs	r3, #32
 8015488:	2203      	movs	r2, #3
 801548a:	2104      	movs	r1, #4
 801548c:	482a      	ldr	r0, [pc, #168]	; (8015538 <emac_start+0x144>)
 801548e:	f7ff fc57 	bl	8014d40 <gpio_init>
 8015492:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015496:	2203      	movs	r2, #3
 8015498:	2118      	movs	r1, #24
 801549a:	4828      	ldr	r0, [pc, #160]	; (801553c <emac_start+0x148>)
 801549c:	f7ff fc50 	bl	8014d40 <gpio_init>
 80154a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80154a4:	2203      	movs	r2, #3
 80154a6:	2118      	movs	r1, #24
 80154a8:	4824      	ldr	r0, [pc, #144]	; (801553c <emac_start+0x148>)
 80154aa:	f7ff fc49 	bl	8014d40 <gpio_init>
 80154ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80154b2:	2203      	movs	r2, #3
 80154b4:	2118      	movs	r1, #24
 80154b6:	4821      	ldr	r0, [pc, #132]	; (801553c <emac_start+0x148>)
 80154b8:	f7ff fc42 	bl	8014d40 <gpio_init>
 80154bc:	f240 500e 	movw	r0, #1294	; 0x50e
 80154c0:	f7ff fcd6 	bl	8014e70 <rcu_periph_clock_enable>
 80154c4:	f240 500f 	movw	r0, #1295	; 0x50f
 80154c8:	f7ff fcd2 	bl	8014e70 <rcu_periph_clock_enable>
 80154cc:	f44f 60a2 	mov.w	r0, #1296	; 0x510
 80154d0:	f7ff fcce 	bl	8014e70 <rcu_periph_clock_enable>
 80154d4:	f001 f8dc 	bl	8016690 <enet_deinit>
 80154d8:	f000 fd3a 	bl	8015f50 <enet_software_reset>
 80154dc:	b900      	cbnz	r0, 80154e0 <emac_start+0xec>
 80154de:	e7fe      	b.n	80154de <emac_start+0xea>
 80154e0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80154e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80154e8:	2001      	movs	r0, #1
 80154ea:	f000 feb5 	bl	8016258 <enet_init>
 80154ee:	4b14      	ldr	r3, [pc, #80]	; (8015540 <emac_start+0x14c>)
 80154f0:	6018      	str	r0, [r3, #0]
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	b903      	cbnz	r3, 80154f8 <emac_start+0x104>
 80154f6:	e7fe      	b.n	80154f6 <emac_start+0x102>
 80154f8:	4620      	mov	r0, r4
 80154fa:	f000 fba3 	bl	8015c44 <mac_address_get>
 80154fe:	4621      	mov	r1, r4
 8015500:	2000      	movs	r0, #0
 8015502:	f000 fe09 	bl	8016118 <enet_mac_address_set>
 8015506:	f44f 00e0 	mov.w	r0, #7340032	; 0x700000
 801550a:	f000 fd35 	bl	8015f78 <enet_descriptors_chain_init>
 801550e:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
 8015512:	f000 fd31 	bl	8015f78 <enet_descriptors_chain_init>
 8015516:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 801551a:	480a      	ldr	r0, [pc, #40]	; (8015544 <emac_start+0x150>)
 801551c:	f000 fdf6 	bl	801610c <enet_transmit_checksum_config>
 8015520:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8015524:	4808      	ldr	r0, [pc, #32]	; (8015548 <emac_start+0x154>)
 8015526:	f000 fdf1 	bl	801610c <enet_transmit_checksum_config>
 801552a:	f001 f829 	bl	8016580 <enet_enable>
 801552e:	2001      	movs	r0, #1
 8015530:	bd10      	pop	{r4, pc}
 8015532:	bf00      	nop
 8015534:	40010800 	andmi	r0, r1, r0, lsl #16
 8015538:	40011000 	andmi	r1, r1, r0
 801553c:	40010c00 	andmi	r0, r1, r0, lsl #24
 8015540:	2000a9e0 	andcs	sl, r0, r0, ror #19
 8015544:	2001463c 	andcs	r4, r1, ip, lsr r6
 8015548:	2001464c 	andcs	r4, r1, ip, asr #12

0801554c <emac_eth_recv>:
 801554c:	b538      	push	{r3, r4, r5, lr}
 801554e:	4605      	mov	r5, r0
 8015550:	f001 f86e 	bl	8016630 <enet_rxframe_size_get>
 8015554:	4604      	mov	r4, r0
 8015556:	b138      	cbz	r0, 8015568 <emac_eth_recv+0x1c>
 8015558:	4b05      	ldr	r3, [pc, #20]	; (8015570 <emac_eth_recv+0x24>)
 801555a:	2105      	movs	r1, #5
 801555c:	6818      	ldr	r0, [r3, #0]
 801555e:	f001 f816 	bl	801658e <enet_desc_information_get>
 8015562:	6028      	str	r0, [r5, #0]
 8015564:	4620      	mov	r0, r4
 8015566:	bd38      	pop	{r3, r4, r5, pc}
 8015568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801556c:	e7fb      	b.n	8015566 <emac_eth_recv+0x1a>
 801556e:	bf00      	nop
 8015570:	200109f0 	strdcs	r0, [r1], -r0	; <UNPREDICTABLE>

08015574 <emac_free_pkt>:
 8015574:	2100      	movs	r1, #0
 8015576:	4608      	mov	r0, r1
 8015578:	f000 bd46 	b.w	8016008 <enet_frame_receive>

0801557c <emac_eth_send>:
 801557c:	f000 bd84 	b.w	8016088 <enet_frame_transmit>

08015580 <gd32_adc_init()>:
 8015580:	b510      	push	{r4, lr}
 8015582:	f240 6009 	movw	r0, #1545	; 0x609
 8015586:	4c21      	ldr	r4, [pc, #132]	; (801560c <gd32_adc_init()+0x8c>)
 8015588:	f7ff fc72 	bl	8014e70 <rcu_periph_clock_enable>
 801558c:	2005      	movs	r0, #5
 801558e:	f7ff fcb5 	bl	8014efc <rcu_adc_clock_config>
 8015592:	4620      	mov	r0, r4
 8015594:	2201      	movs	r2, #1
 8015596:	f44f 7180 	mov.w	r1, #256	; 0x100
 801559a:	f000 fb75 	bl	8015c88 <adc_special_function_config>
 801559e:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80155a2:	4620      	mov	r0, r4
 80155a4:	2102      	movs	r1, #2
 80155a6:	f000 fc0e 	bl	8015dc6 <adc_external_trigger_source_config>
 80155aa:	2100      	movs	r1, #0
 80155ac:	4620      	mov	r0, r4
 80155ae:	f000 fb93 	bl	8015cd8 <adc_data_alignment_config>
 80155b2:	2000      	movs	r0, #0
 80155b4:	f000 fb58 	bl	8015c68 <adc_mode_config>
 80155b8:	2202      	movs	r2, #2
 80155ba:	4620      	mov	r0, r4
 80155bc:	4611      	mov	r1, r2
 80155be:	f000 fbb7 	bl	8015d30 <adc_channel_length_config>
 80155c2:	4620      	mov	r0, r4
 80155c4:	2307      	movs	r3, #7
 80155c6:	2210      	movs	r2, #16
 80155c8:	2100      	movs	r1, #0
 80155ca:	f000 fbce 	bl	8015d6a <adc_inserted_channel_config>
 80155ce:	2307      	movs	r3, #7
 80155d0:	4620      	mov	r0, r4
 80155d2:	2211      	movs	r2, #17
 80155d4:	2101      	movs	r1, #1
 80155d6:	f000 fbc8 	bl	8015d6a <adc_inserted_channel_config>
 80155da:	2201      	movs	r2, #1
 80155dc:	2102      	movs	r1, #2
 80155de:	4620      	mov	r0, r4
 80155e0:	f000 fc02 	bl	8015de8 <adc_external_trigger_config>
 80155e4:	f000 fb9a 	bl	8015d1c <adc_tempsensor_vrefint_enable>
 80155e8:	4620      	mov	r0, r4
 80155ea:	f000 fb7e 	bl	8015cea <adc_enable>
 80155ee:	2100      	movs	r1, #0
 80155f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80155f4:	f000 fb0e 	bl	8015c14 <udelay(unsigned int, unsigned int)>
 80155f8:	4620      	mov	r0, r4
 80155fa:	f000 fb7e 	bl	8015cfa <adc_calibration_enable>
 80155fe:	4620      	mov	r0, r4
 8015600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015604:	2102      	movs	r1, #2
 8015606:	f000 bc0a 	b.w	8015e1e <adc_software_trigger_enable>
 801560a:	bf00      	nop
 801560c:	40012400 	andmi	r2, r1, r0, lsl #8

08015610 <_stop() [clone .isra.0]>:
 8015610:	b508      	push	{r3, lr}
 8015612:	4806      	ldr	r0, [pc, #24]	; (801562c <_stop() [clone .isra.0]+0x1c>)
 8015614:	f001 f8d0 	bl	80167b8 <i2c_stop_on_bus>
 8015618:	f640 73ff 	movw	r3, #4095	; 0xfff
 801561c:	4904      	ldr	r1, [pc, #16]	; (8015630 <_stop() [clone .isra.0]+0x20>)
 801561e:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 8015622:	0592      	lsls	r2, r2, #22
 8015624:	d501      	bpl.n	801562a <_stop() [clone .isra.0]+0x1a>
 8015626:	3b01      	subs	r3, #1
 8015628:	d1f9      	bne.n	801561e <_stop() [clone .isra.0]+0xe>
 801562a:	bd08      	pop	{r3, pc}
 801562c:	40005400 	andmi	r5, r0, r0, lsl #8
 8015630:	40005000 	andmi	r5, r0, r0

08015634 <gd32_i2c_begin()>:
 8015634:	b510      	push	{r4, lr}
 8015636:	f240 7015 	movw	r0, #1813	; 0x715
 801563a:	f7ff fc19 	bl	8014e70 <rcu_periph_clock_enable>
 801563e:	4c15      	ldr	r4, [pc, #84]	; (8015694 <gd32_i2c_begin()+0x60>)
 8015640:	f240 6003 	movw	r0, #1539	; 0x603
 8015644:	f7ff fc14 	bl	8014e70 <rcu_periph_clock_enable>
 8015648:	f240 6003 	movw	r0, #1539	; 0x603
 801564c:	f7ff fc10 	bl	8014e70 <rcu_periph_clock_enable>
 8015650:	4620      	mov	r0, r4
 8015652:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015656:	2203      	movs	r2, #3
 8015658:	211c      	movs	r1, #28
 801565a:	f7ff fb71 	bl	8014d40 <gpio_init>
 801565e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015662:	2203      	movs	r2, #3
 8015664:	4620      	mov	r0, r4
 8015666:	211c      	movs	r1, #28
 8015668:	f7ff fb6a 	bl	8014d40 <gpio_init>
 801566c:	f5a4 4438 	sub.w	r4, r4, #47104	; 0xb800
 8015670:	2101      	movs	r1, #1
 8015672:	2002      	movs	r0, #2
 8015674:	f7ff fbb8 	bl	8014de8 <gpio_pin_remap_config>
 8015678:	4620      	mov	r0, r4
 801567a:	4907      	ldr	r1, [pc, #28]	; (8015698 <gd32_i2c_begin()+0x64>)
 801567c:	2200      	movs	r2, #0
 801567e:	f001 f815 	bl	80166ac <i2c_clock_config>
 8015682:	4620      	mov	r0, r4
 8015684:	f001 f88e 	bl	80167a4 <i2c_enable>
 8015688:	4620      	mov	r0, r4
 801568a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801568e:	2101      	movs	r1, #1
 8015690:	f001 b86e 	b.w	8016770 <i2c_ack_config>
 8015694:	40010c00 	andmi	r0, r1, r0, lsl #24
 8015698:	00061a80 	andeq	r1, r6, r0, lsl #21

0801569c <gd32_i2c_set_baudrate(unsigned int)>:
 801569c:	4601      	mov	r1, r0
 801569e:	2200      	movs	r2, #0
 80156a0:	4801      	ldr	r0, [pc, #4]	; (80156a8 <gd32_i2c_set_baudrate(unsigned int)+0xc>)
 80156a2:	f001 b803 	b.w	80166ac <i2c_clock_config>
 80156a6:	bf00      	nop
 80156a8:	40005400 	andmi	r5, r0, r0, lsl #8

080156ac <gd32_i2c_set_address(unsigned char)>:
 80156ac:	4b01      	ldr	r3, [pc, #4]	; (80156b4 <gd32_i2c_set_address(unsigned char)+0x8>)
 80156ae:	0040      	lsls	r0, r0, #1
 80156b0:	7018      	strb	r0, [r3, #0]
 80156b2:	4770      	bx	lr
 80156b4:	2000a9e4 	andcs	sl, r0, r4, ror #19

080156b8 <gd32_i2c_write(char const*, unsigned int)>:
 80156b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156ba:	4604      	mov	r4, r0
 80156bc:	460f      	mov	r7, r1
 80156be:	f640 75ff 	movw	r5, #4095	; 0xfff
 80156c2:	4e2e      	ldr	r6, [pc, #184]	; (801577c <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 80156c4:	f240 6101 	movw	r1, #1537	; 0x601
 80156c8:	4630      	mov	r0, r6
 80156ca:	f001 f87f 	bl	80167cc <i2c_flag_get>
 80156ce:	b9b0      	cbnz	r0, 80156fe <gd32_i2c_write(char const*, unsigned int)+0x46>
 80156d0:	482a      	ldr	r0, [pc, #168]	; (801577c <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 80156d2:	f001 f86c 	bl	80167ae <i2c_start_on_bus>
 80156d6:	f640 75ff 	movw	r5, #4095	; 0xfff
 80156da:	4e28      	ldr	r6, [pc, #160]	; (801577c <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 80156dc:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80156e0:	4630      	mov	r0, r6
 80156e2:	f001 f873 	bl	80167cc <i2c_flag_get>
 80156e6:	b190      	cbz	r0, 801570e <gd32_i2c_write(char const*, unsigned int)+0x56>
 80156e8:	4b25      	ldr	r3, [pc, #148]	; (8015780 <gd32_i2c_write(char const*, unsigned int)+0xc8>)
 80156ea:	f06f 0201 	mvn.w	r2, #1
 80156ee:	7819      	ldrb	r1, [r3, #0]
 80156f0:	4822      	ldr	r0, [pc, #136]	; (801577c <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 80156f2:	f001 f84f 	bl	8016794 <i2c_master_addressing>
 80156f6:	f640 75ff 	movw	r5, #4095	; 0xfff
 80156fa:	4e20      	ldr	r6, [pc, #128]	; (801577c <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 80156fc:	e00c      	b.n	8015718 <gd32_i2c_write(char const*, unsigned int)+0x60>
 80156fe:	3d01      	subs	r5, #1
 8015700:	d1e0      	bne.n	80156c4 <gd32_i2c_write(char const*, unsigned int)+0xc>
 8015702:	f7ff ff85 	bl	8015610 <_stop() [clone .isra.0]>
 8015706:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801570a:	4240      	negs	r0, r0
 801570c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801570e:	3d01      	subs	r5, #1
 8015710:	d1e4      	bne.n	80156dc <gd32_i2c_write(char const*, unsigned int)+0x24>
 8015712:	e7f6      	b.n	8015702 <gd32_i2c_write(char const*, unsigned int)+0x4a>
 8015714:	3d01      	subs	r5, #1
 8015716:	d0f4      	beq.n	8015702 <gd32_i2c_write(char const*, unsigned int)+0x4a>
 8015718:	f240 5101 	movw	r1, #1281	; 0x501
 801571c:	4630      	mov	r0, r6
 801571e:	f001 f855 	bl	80167cc <i2c_flag_get>
 8015722:	2800      	cmp	r0, #0
 8015724:	d0f6      	beq.n	8015714 <gd32_i2c_write(char const*, unsigned int)+0x5c>
 8015726:	f240 5101 	movw	r1, #1281	; 0x501
 801572a:	4814      	ldr	r0, [pc, #80]	; (801577c <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 801572c:	f001 f859 	bl	80167e2 <i2c_flag_clear>
 8015730:	f640 75ff 	movw	r5, #4095	; 0xfff
 8015734:	4e11      	ldr	r6, [pc, #68]	; (801577c <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8015736:	f240 5107 	movw	r1, #1287	; 0x507
 801573a:	4630      	mov	r0, r6
 801573c:	f001 f846 	bl	80167cc <i2c_flag_get>
 8015740:	2801      	cmp	r0, #1
 8015742:	d107      	bne.n	8015754 <gd32_i2c_write(char const*, unsigned int)+0x9c>
 8015744:	4e0d      	ldr	r6, [pc, #52]	; (801577c <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8015746:	4427      	add	r7, r4
 8015748:	42a7      	cmp	r7, r4
 801574a:	d106      	bne.n	801575a <gd32_i2c_write(char const*, unsigned int)+0xa2>
 801574c:	f7ff ff60 	bl	8015610 <_stop() [clone .isra.0]>
 8015750:	2000      	movs	r0, #0
 8015752:	e7da      	b.n	801570a <gd32_i2c_write(char const*, unsigned int)+0x52>
 8015754:	3d01      	subs	r5, #1
 8015756:	d1ee      	bne.n	8015736 <gd32_i2c_write(char const*, unsigned int)+0x7e>
 8015758:	e7d3      	b.n	8015702 <gd32_i2c_write(char const*, unsigned int)+0x4a>
 801575a:	4630      	mov	r0, r6
 801575c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015760:	f001 f82f 	bl	80167c2 <i2c_data_transmit>
 8015764:	f640 75ff 	movw	r5, #4095	; 0xfff
 8015768:	f240 5102 	movw	r1, #1282	; 0x502
 801576c:	4630      	mov	r0, r6
 801576e:	f001 f82d 	bl	80167cc <i2c_flag_get>
 8015772:	2800      	cmp	r0, #0
 8015774:	d1e8      	bne.n	8015748 <gd32_i2c_write(char const*, unsigned int)+0x90>
 8015776:	3d01      	subs	r5, #1
 8015778:	d1f6      	bne.n	8015768 <gd32_i2c_write(char const*, unsigned int)+0xb0>
 801577a:	e7c2      	b.n	8015702 <gd32_i2c_write(char const*, unsigned int)+0x4a>
 801577c:	40005400 	andmi	r5, r0, r0, lsl #8
 8015780:	2000a9e4 	andcs	sl, r0, r4, ror #19

08015784 <gd32_i2c_read(char*, unsigned int)>:
 8015784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015788:	4680      	mov	r8, r0
 801578a:	460c      	mov	r4, r1
 801578c:	f640 76ff 	movw	r6, #4095	; 0xfff
 8015790:	4f4b      	ldr	r7, [pc, #300]	; (80158c0 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8015792:	f240 6101 	movw	r1, #1537	; 0x601
 8015796:	4638      	mov	r0, r7
 8015798:	f001 f818 	bl	80167cc <i2c_flag_get>
 801579c:	4605      	mov	r5, r0
 801579e:	bb08      	cbnz	r0, 80157e4 <gd32_i2c_read(char*, unsigned int)+0x60>
 80157a0:	2c02      	cmp	r4, #2
 80157a2:	d103      	bne.n	80157ac <gd32_i2c_read(char*, unsigned int)+0x28>
 80157a4:	4601      	mov	r1, r0
 80157a6:	4846      	ldr	r0, [pc, #280]	; (80158c0 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 80157a8:	f000 ffeb 	bl	8016782 <i2c_ackpos_config>
 80157ac:	4844      	ldr	r0, [pc, #272]	; (80158c0 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 80157ae:	f000 fffe 	bl	80167ae <i2c_start_on_bus>
 80157b2:	f640 76ff 	movw	r6, #4095	; 0xfff
 80157b6:	4f42      	ldr	r7, [pc, #264]	; (80158c0 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 80157b8:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80157bc:	4638      	mov	r0, r7
 80157be:	f001 f805 	bl	80167cc <i2c_flag_get>
 80157c2:	b1a8      	cbz	r0, 80157f0 <gd32_i2c_read(char*, unsigned int)+0x6c>
 80157c4:	4b3f      	ldr	r3, [pc, #252]	; (80158c4 <gd32_i2c_read(char*, unsigned int)+0x140>)
 80157c6:	2201      	movs	r2, #1
 80157c8:	7819      	ldrb	r1, [r3, #0]
 80157ca:	483d      	ldr	r0, [pc, #244]	; (80158c0 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 80157cc:	f000 ffe2 	bl	8016794 <i2c_master_addressing>
 80157d0:	2c02      	cmp	r4, #2
 80157d2:	d803      	bhi.n	80157dc <gd32_i2c_read(char*, unsigned int)+0x58>
 80157d4:	2100      	movs	r1, #0
 80157d6:	483a      	ldr	r0, [pc, #232]	; (80158c0 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 80157d8:	f000 ffca 	bl	8016770 <i2c_ack_config>
 80157dc:	f640 76ff 	movw	r6, #4095	; 0xfff
 80157e0:	4f37      	ldr	r7, [pc, #220]	; (80158c0 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 80157e2:	e00a      	b.n	80157fa <gd32_i2c_read(char*, unsigned int)+0x76>
 80157e4:	3e01      	subs	r6, #1
 80157e6:	d1d4      	bne.n	8015792 <gd32_i2c_read(char*, unsigned int)+0xe>
 80157e8:	f7ff ff12 	bl	8015610 <_stop() [clone .isra.0]>
 80157ec:	2504      	movs	r5, #4
 80157ee:	e04d      	b.n	801588c <gd32_i2c_read(char*, unsigned int)+0x108>
 80157f0:	3e01      	subs	r6, #1
 80157f2:	d1e1      	bne.n	80157b8 <gd32_i2c_read(char*, unsigned int)+0x34>
 80157f4:	e7f8      	b.n	80157e8 <gd32_i2c_read(char*, unsigned int)+0x64>
 80157f6:	3e01      	subs	r6, #1
 80157f8:	d0f6      	beq.n	80157e8 <gd32_i2c_read(char*, unsigned int)+0x64>
 80157fa:	f240 5101 	movw	r1, #1281	; 0x501
 80157fe:	4638      	mov	r0, r7
 8015800:	f000 ffe4 	bl	80167cc <i2c_flag_get>
 8015804:	2800      	cmp	r0, #0
 8015806:	d0f6      	beq.n	80157f6 <gd32_i2c_read(char*, unsigned int)+0x72>
 8015808:	f240 5101 	movw	r1, #1281	; 0x501
 801580c:	482c      	ldr	r0, [pc, #176]	; (80158c0 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 801580e:	f000 ffe8 	bl	80167e2 <i2c_flag_clear>
 8015812:	2c01      	cmp	r4, #1
 8015814:	d102      	bne.n	801581c <gd32_i2c_read(char*, unsigned int)+0x98>
 8015816:	482a      	ldr	r0, [pc, #168]	; (80158c0 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8015818:	f000 ffce 	bl	80167b8 <i2c_stop_on_bus>
 801581c:	f640 77ff 	movw	r7, #4095	; 0xfff
 8015820:	4e27      	ldr	r6, [pc, #156]	; (80158c0 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8015822:	e022      	b.n	801586a <gd32_i2c_read(char*, unsigned int)+0xe6>
 8015824:	2c03      	cmp	r4, #3
 8015826:	d134      	bne.n	8015892 <gd32_i2c_read(char*, unsigned int)+0x10e>
 8015828:	f640 79ff 	movw	r9, #4095	; 0xfff
 801582c:	e002      	b.n	8015834 <gd32_i2c_read(char*, unsigned int)+0xb0>
 801582e:	f1b9 0901 	subs.w	r9, r9, #1
 8015832:	d0d9      	beq.n	80157e8 <gd32_i2c_read(char*, unsigned int)+0x64>
 8015834:	f240 5102 	movw	r1, #1282	; 0x502
 8015838:	4630      	mov	r0, r6
 801583a:	f000 ffc7 	bl	80167cc <i2c_flag_get>
 801583e:	2800      	cmp	r0, #0
 8015840:	d0f5      	beq.n	801582e <gd32_i2c_read(char*, unsigned int)+0xaa>
 8015842:	2100      	movs	r1, #0
 8015844:	4630      	mov	r0, r6
 8015846:	f000 ff93 	bl	8016770 <i2c_ack_config>
 801584a:	f240 5106 	movw	r1, #1286	; 0x506
 801584e:	4630      	mov	r0, r6
 8015850:	f000 ffbc 	bl	80167cc <i2c_flag_get>
 8015854:	b138      	cbz	r0, 8015866 <gd32_i2c_read(char*, unsigned int)+0xe2>
 8015856:	4630      	mov	r0, r6
 8015858:	f000 ffb5 	bl	80167c6 <i2c_data_receive>
 801585c:	f640 77ff 	movw	r7, #4095	; 0xfff
 8015860:	f808 0b01 	strb.w	r0, [r8], #1
 8015864:	3c01      	subs	r4, #1
 8015866:	3f01      	subs	r7, #1
 8015868:	d0be      	beq.n	80157e8 <gd32_i2c_read(char*, unsigned int)+0x64>
 801586a:	2c00      	cmp	r4, #0
 801586c:	d1da      	bne.n	8015824 <gd32_i2c_read(char*, unsigned int)+0xa0>
 801586e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8015872:	4915      	ldr	r1, [pc, #84]	; (80158c8 <gd32_i2c_read(char*, unsigned int)+0x144>)
 8015874:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 8015878:	0592      	lsls	r2, r2, #22
 801587a:	d41d      	bmi.n	80158b8 <gd32_i2c_read(char*, unsigned int)+0x134>
 801587c:	2101      	movs	r1, #1
 801587e:	4810      	ldr	r0, [pc, #64]	; (80158c0 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8015880:	f000 ff76 	bl	8016770 <i2c_ack_config>
 8015884:	2101      	movs	r1, #1
 8015886:	480e      	ldr	r0, [pc, #56]	; (80158c0 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8015888:	f000 ff7b 	bl	8016782 <i2c_ackpos_config>
 801588c:	4628      	mov	r0, r5
 801588e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015892:	2c02      	cmp	r4, #2
 8015894:	d1d9      	bne.n	801584a <gd32_i2c_read(char*, unsigned int)+0xc6>
 8015896:	f640 79ff 	movw	r9, #4095	; 0xfff
 801589a:	e002      	b.n	80158a2 <gd32_i2c_read(char*, unsigned int)+0x11e>
 801589c:	f1b9 0901 	subs.w	r9, r9, #1
 80158a0:	d0a2      	beq.n	80157e8 <gd32_i2c_read(char*, unsigned int)+0x64>
 80158a2:	f240 5102 	movw	r1, #1282	; 0x502
 80158a6:	4630      	mov	r0, r6
 80158a8:	f000 ff90 	bl	80167cc <i2c_flag_get>
 80158ac:	2800      	cmp	r0, #0
 80158ae:	d0f5      	beq.n	801589c <gd32_i2c_read(char*, unsigned int)+0x118>
 80158b0:	4630      	mov	r0, r6
 80158b2:	f000 ff81 	bl	80167b8 <i2c_stop_on_bus>
 80158b6:	e7c8      	b.n	801584a <gd32_i2c_read(char*, unsigned int)+0xc6>
 80158b8:	3b01      	subs	r3, #1
 80158ba:	d1db      	bne.n	8015874 <gd32_i2c_read(char*, unsigned int)+0xf0>
 80158bc:	e796      	b.n	80157ec <gd32_i2c_read(char*, unsigned int)+0x68>
 80158be:	bf00      	nop
 80158c0:	40005400 	andmi	r5, r0, r0, lsl #8
 80158c4:	2000a9e4 	andcs	sl, r0, r4, ror #19
 80158c8:	40005000 	andmi	r5, r0, r0

080158cc <gd32_spi_dma_begin()>:
 80158cc:	b530      	push	{r4, r5, lr}
 80158ce:	f240 6002 	movw	r0, #1538	; 0x602
 80158d2:	b089      	sub	sp, #36	; 0x24
 80158d4:	f7ff facc 	bl	8014e70 <rcu_periph_clock_enable>
 80158d8:	f240 6003 	movw	r0, #1539	; 0x603
 80158dc:	f7ff fac8 	bl	8014e70 <rcu_periph_clock_enable>
 80158e0:	f240 700f 	movw	r0, #1807	; 0x70f
 80158e4:	f7ff fac4 	bl	8014e70 <rcu_periph_clock_enable>
 80158e8:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80158ec:	f7ff fac0 	bl	8014e70 <rcu_periph_clock_enable>
 80158f0:	2338      	movs	r3, #56	; 0x38
 80158f2:	2203      	movs	r2, #3
 80158f4:	2118      	movs	r1, #24
 80158f6:	4829      	ldr	r0, [pc, #164]	; (801599c <gd32_spi_dma_begin()+0xd0>)
 80158f8:	f7ff fa22 	bl	8014d40 <gpio_init>
 80158fc:	4c28      	ldr	r4, [pc, #160]	; (80159a0 <gd32_spi_dma_begin()+0xd4>)
 80158fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015902:	2203      	movs	r2, #3
 8015904:	2118      	movs	r1, #24
 8015906:	4827      	ldr	r0, [pc, #156]	; (80159a4 <gd32_spi_dma_begin()+0xd8>)
 8015908:	f7ff fa1a 	bl	8014d40 <gpio_init>
 801590c:	2101      	movs	r1, #1
 801590e:	4826      	ldr	r0, [pc, #152]	; (80159a8 <gd32_spi_dma_begin()+0xdc>)
 8015910:	f7ff fa6a 	bl	8014de8 <gpio_pin_remap_config>
 8015914:	4620      	mov	r0, r4
 8015916:	f000 ffe2 	bl	80168de <i2s_disable>
 801591a:	2300      	movs	r3, #0
 801591c:	4620      	mov	r0, r4
 801591e:	461a      	mov	r2, r3
 8015920:	4922      	ldr	r1, [pc, #136]	; (80159ac <gd32_spi_dma_begin()+0xe0>)
 8015922:	f000 ff7f 	bl	8016824 <i2s_psc_config>
 8015926:	2300      	movs	r3, #0
 8015928:	2210      	movs	r2, #16
 801592a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801592e:	4620      	mov	r0, r4
 8015930:	f000 ff69 	bl	8016806 <i2s_init>
 8015934:	4620      	mov	r0, r4
 8015936:	f000 ffcd 	bl	80168d4 <i2s_enable>
 801593a:	f504 34e4 	add.w	r4, r4, #116736	; 0x1c800
 801593e:	f240 5001 	movw	r0, #1281	; 0x501
 8015942:	f7ff fa95 	bl	8014e70 <rcu_periph_clock_enable>
 8015946:	2101      	movs	r1, #1
 8015948:	4620      	mov	r0, r4
 801594a:	f000 fa75 	bl	8015e38 <dma_deinit>
 801594e:	a801      	add	r0, sp, #4
 8015950:	f000 fa8e 	bl	8015e70 <dma_struct_para_init>
 8015954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015958:	2501      	movs	r5, #1
 801595a:	9304      	str	r3, [sp, #16]
 801595c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8015960:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015964:	4912      	ldr	r1, [pc, #72]	; (80159b0 <gd32_spi_dma_begin()+0xe4>)
 8015966:	4620      	mov	r0, r4
 8015968:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801596c:	9206      	str	r2, [sp, #24]
 801596e:	4629      	mov	r1, r5
 8015970:	aa01      	add	r2, sp, #4
 8015972:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015976:	f88d 501e 	strb.w	r5, [sp, #30]
 801597a:	f000 fa83 	bl	8015e84 <dma_init>
 801597e:	4629      	mov	r1, r5
 8015980:	4620      	mov	r0, r4
 8015982:	f000 fab9 	bl	8015ef8 <dma_circulation_disable>
 8015986:	4629      	mov	r1, r5
 8015988:	4620      	mov	r0, r4
 801598a:	f000 fac5 	bl	8015f18 <dma_memory_to_memory_disable>
 801598e:	2200      	movs	r2, #0
 8015990:	4b08      	ldr	r3, [pc, #32]	; (80159b4 <gd32_spi_dma_begin()+0xe8>)
 8015992:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8015996:	b009      	add	sp, #36	; 0x24
 8015998:	bd30      	pop	{r4, r5, pc}
 801599a:	bf00      	nop
 801599c:	40010c00 	andmi	r0, r1, r0, lsl #24
 80159a0:	40003c00 	andmi	r3, r0, r0, lsl #24
 80159a4:	40010800 	andmi	r0, r1, r0, lsl #16
 80159a8:	00300400 	eorseq	r0, r0, r0, lsl #8
 80159ac:	00030d40 	andeq	r0, r3, r0, asr #26
 80159b0:	40003c0c 	andmi	r3, r0, ip, lsl #24
 80159b4:	40020000 	andmi	r0, r2, r0

080159b8 <gd32_spi_dma_set_speed_hz(unsigned int)>:
 80159b8:	b538      	push	{r3, r4, r5, lr}
 80159ba:	4c08      	ldr	r4, [pc, #32]	; (80159dc <gd32_spi_dma_set_speed_hz(unsigned int)+0x24>)
 80159bc:	4605      	mov	r5, r0
 80159be:	4620      	mov	r0, r4
 80159c0:	f000 ff8d 	bl	80168de <i2s_disable>
 80159c4:	2300      	movs	r3, #0
 80159c6:	4620      	mov	r0, r4
 80159c8:	461a      	mov	r2, r3
 80159ca:	0969      	lsrs	r1, r5, #5
 80159cc:	f000 ff2a 	bl	8016824 <i2s_psc_config>
 80159d0:	4620      	mov	r0, r4
 80159d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80159d6:	f000 bf7d 	b.w	80168d4 <i2s_enable>
 80159da:	bf00      	nop
 80159dc:	40003c00 	andmi	r3, r0, r0, lsl #24

080159e0 <gd32_spi_dma_tx_prepare(unsigned int*)>:
 80159e0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80159e4:	6003      	str	r3, [r0, #0]
 80159e6:	4801      	ldr	r0, [pc, #4]	; (80159ec <gd32_spi_dma_tx_prepare(unsigned int*)+0xc>)
 80159e8:	4770      	bx	lr
 80159ea:	bf00      	nop
 80159ec:	2000a9e8 	andcs	sl, r0, r8, ror #19

080159f0 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>:
 80159f0:	4a0a      	ldr	r2, [pc, #40]	; (8015a1c <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x2c>)
 80159f2:	3101      	adds	r1, #1
 80159f4:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
 80159f8:	f3c1 014f 	ubfx	r1, r1, #1, #16
 80159fc:	f023 0301 	bic.w	r3, r3, #1
 8015a00:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 8015a04:	f043 0301 	orr.w	r3, r3, #1
 8015a08:	f8c2 0428 	str.w	r0, [r2, #1064]	; 0x428
 8015a0c:	f8c2 1420 	str.w	r1, [r2, #1056]	; 0x420
 8015a10:	4803      	ldr	r0, [pc, #12]	; (8015a20 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x30>)
 8015a12:	2100      	movs	r1, #0
 8015a14:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 8015a18:	f000 bf66 	b.w	80168e8 <spi_dma_enable>
 8015a1c:	40020000 	andmi	r0, r2, r0
 8015a20:	40003c00 	andmi	r3, r0, r0, lsl #24

08015a24 <gd32_spi_dma_tx_is_active()>:
 8015a24:	4b03      	ldr	r3, [pc, #12]	; (8015a34 <gd32_spi_dma_tx_is_active()+0x10>)
 8015a26:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
 8015a2a:	3800      	subs	r0, #0
 8015a2c:	bf18      	it	ne
 8015a2e:	2001      	movne	r0, #1
 8015a30:	4770      	bx	lr
 8015a32:	bf00      	nop
 8015a34:	40020000 	andmi	r0, r2, r0

08015a38 <gd32_uart_begin>:
 8015a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a3a:	461e      	mov	r6, r3
 8015a3c:	4b63      	ldr	r3, [pc, #396]	; (8015bcc <gd32_uart_begin+0x194>)
 8015a3e:	4604      	mov	r4, r0
 8015a40:	4298      	cmp	r0, r3
 8015a42:	460f      	mov	r7, r1
 8015a44:	4615      	mov	r5, r2
 8015a46:	d03b      	beq.n	8015ac0 <gd32_uart_begin+0x88>
 8015a48:	d80a      	bhi.n	8015a60 <gd32_uart_begin+0x28>
 8015a4a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015a4e:	4298      	cmp	r0, r3
 8015a50:	d02f      	beq.n	8015ab2 <gd32_uart_begin+0x7a>
 8015a52:	f240 7012 	movw	r0, #1810	; 0x712
 8015a56:	f7ff fa0b 	bl	8014e70 <rcu_periph_clock_enable>
 8015a5a:	f240 6004 	movw	r0, #1540	; 0x604
 8015a5e:	e008      	b.n	8015a72 <gd32_uart_begin+0x3a>
 8015a60:	4b5b      	ldr	r3, [pc, #364]	; (8015bd0 <gd32_uart_begin+0x198>)
 8015a62:	4298      	cmp	r0, r3
 8015a64:	d02f      	beq.n	8015ac6 <gd32_uart_begin+0x8e>
 8015a66:	f240 600e 	movw	r0, #1550	; 0x60e
 8015a6a:	f7ff fa01 	bl	8014e70 <rcu_periph_clock_enable>
 8015a6e:	f240 6003 	movw	r0, #1539	; 0x603
 8015a72:	f7ff f9fd 	bl	8014e70 <rcu_periph_clock_enable>
 8015a76:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8015a7a:	f7ff f9f9 	bl	8014e70 <rcu_periph_clock_enable>
 8015a7e:	4b53      	ldr	r3, [pc, #332]	; (8015bcc <gd32_uart_begin+0x194>)
 8015a80:	429c      	cmp	r4, r3
 8015a82:	f000 8084 	beq.w	8015b8e <gd32_uart_begin+0x156>
 8015a86:	d829      	bhi.n	8015adc <gd32_uart_begin+0xa4>
 8015a88:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015a8c:	429c      	cmp	r4, r3
 8015a8e:	d071      	beq.n	8015b74 <gd32_uart_begin+0x13c>
 8015a90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015a94:	2203      	movs	r2, #3
 8015a96:	2118      	movs	r1, #24
 8015a98:	484e      	ldr	r0, [pc, #312]	; (8015bd4 <gd32_uart_begin+0x19c>)
 8015a9a:	f7ff f951 	bl	8014d40 <gpio_init>
 8015a9e:	2104      	movs	r1, #4
 8015aa0:	484c      	ldr	r0, [pc, #304]	; (8015bd4 <gd32_uart_begin+0x19c>)
 8015aa2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015aa6:	2203      	movs	r2, #3
 8015aa8:	f7ff f94a 	bl	8014d40 <gpio_init>
 8015aac:	2101      	movs	r1, #1
 8015aae:	484a      	ldr	r0, [pc, #296]	; (8015bd8 <gd32_uart_begin+0x1a0>)
 8015ab0:	e025      	b.n	8015afe <gd32_uart_begin+0xc6>
 8015ab2:	f240 7011 	movw	r0, #1809	; 0x711
 8015ab6:	f7ff f9db 	bl	8014e70 <rcu_periph_clock_enable>
 8015aba:	f240 6002 	movw	r0, #1538	; 0x602
 8015abe:	e7d8      	b.n	8015a72 <gd32_uart_begin+0x3a>
 8015ac0:	f240 7013 	movw	r0, #1811	; 0x713
 8015ac4:	e7c7      	b.n	8015a56 <gd32_uart_begin+0x1e>
 8015ac6:	f240 7014 	movw	r0, #1812	; 0x714
 8015aca:	f7ff f9d1 	bl	8014e70 <rcu_periph_clock_enable>
 8015ace:	f240 6004 	movw	r0, #1540	; 0x604
 8015ad2:	f7ff f9cd 	bl	8014e70 <rcu_periph_clock_enable>
 8015ad6:	f240 6005 	movw	r0, #1541	; 0x605
 8015ada:	e7ca      	b.n	8015a72 <gd32_uart_begin+0x3a>
 8015adc:	4b3c      	ldr	r3, [pc, #240]	; (8015bd0 <gd32_uart_begin+0x198>)
 8015ade:	429c      	cmp	r4, r3
 8015ae0:	d062      	beq.n	8015ba8 <gd32_uart_begin+0x170>
 8015ae2:	2340      	movs	r3, #64	; 0x40
 8015ae4:	2203      	movs	r2, #3
 8015ae6:	2118      	movs	r1, #24
 8015ae8:	483c      	ldr	r0, [pc, #240]	; (8015bdc <gd32_uart_begin+0x1a4>)
 8015aea:	f7ff f929 	bl	8014d40 <gpio_init>
 8015aee:	2104      	movs	r1, #4
 8015af0:	483a      	ldr	r0, [pc, #232]	; (8015bdc <gd32_uart_begin+0x1a4>)
 8015af2:	2380      	movs	r3, #128	; 0x80
 8015af4:	2203      	movs	r2, #3
 8015af6:	f7ff f923 	bl	8014d40 <gpio_init>
 8015afa:	2101      	movs	r1, #1
 8015afc:	2004      	movs	r0, #4
 8015afe:	f7ff f973 	bl	8014de8 <gpio_pin_remap_config>
 8015b02:	4620      	mov	r0, r4
 8015b04:	f7ff fbd2 	bl	80152ac <usart_deinit>
 8015b08:	68e3      	ldr	r3, [r4, #12]
 8015b0a:	4639      	mov	r1, r7
 8015b0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8015b10:	4620      	mov	r0, r4
 8015b12:	60e3      	str	r3, [r4, #12]
 8015b14:	f7ff fc0a 	bl	801532c <usart_baudrate_set>
 8015b18:	f1a5 0309 	sub.w	r3, r5, #9
 8015b1c:	4259      	negs	r1, r3
 8015b1e:	4159      	adcs	r1, r3
 8015b20:	4620      	mov	r0, r4
 8015b22:	0309      	lsls	r1, r1, #12
 8015b24:	f7ff fc32 	bl	801538c <usart_word_length_set>
 8015b28:	9906      	ldr	r1, [sp, #24]
 8015b2a:	4620      	mov	r0, r4
 8015b2c:	1e8a      	subs	r2, r1, #2
 8015b2e:	4251      	negs	r1, r2
 8015b30:	4151      	adcs	r1, r2
 8015b32:	0349      	lsls	r1, r1, #13
 8015b34:	f7ff fc32 	bl	801539c <usart_stop_bit_set>
 8015b38:	2e01      	cmp	r6, #1
 8015b3a:	d041      	beq.n	8015bc0 <gd32_uart_begin+0x188>
 8015b3c:	2e02      	cmp	r6, #2
 8015b3e:	d142      	bne.n	8015bc6 <gd32_uart_begin+0x18e>
 8015b40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8015b44:	4620      	mov	r0, r4
 8015b46:	f7ff fc19 	bl	801537c <usart_parity_config>
 8015b4a:	2100      	movs	r1, #0
 8015b4c:	4620      	mov	r0, r4
 8015b4e:	f7ff fc39 	bl	80153c4 <usart_hardware_flow_rts_config>
 8015b52:	2100      	movs	r1, #0
 8015b54:	4620      	mov	r0, r4
 8015b56:	f7ff fc3b 	bl	80153d0 <usart_hardware_flow_cts_config>
 8015b5a:	2104      	movs	r1, #4
 8015b5c:	4620      	mov	r0, r4
 8015b5e:	f7ff fc2b 	bl	80153b8 <usart_receive_config>
 8015b62:	2108      	movs	r1, #8
 8015b64:	4620      	mov	r0, r4
 8015b66:	f7ff fc21 	bl	80153ac <usart_transmit_config>
 8015b6a:	68e3      	ldr	r3, [r4, #12]
 8015b6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015b70:	60e3      	str	r3, [r4, #12]
 8015b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b74:	2304      	movs	r3, #4
 8015b76:	2203      	movs	r2, #3
 8015b78:	2118      	movs	r1, #24
 8015b7a:	4819      	ldr	r0, [pc, #100]	; (8015be0 <gd32_uart_begin+0x1a8>)
 8015b7c:	f7ff f8e0 	bl	8014d40 <gpio_init>
 8015b80:	2308      	movs	r3, #8
 8015b82:	2203      	movs	r2, #3
 8015b84:	2104      	movs	r1, #4
 8015b86:	4816      	ldr	r0, [pc, #88]	; (8015be0 <gd32_uart_begin+0x1a8>)
 8015b88:	f7ff f8da 	bl	8014d40 <gpio_init>
 8015b8c:	e7b9      	b.n	8015b02 <gd32_uart_begin+0xca>
 8015b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015b92:	2203      	movs	r2, #3
 8015b94:	2118      	movs	r1, #24
 8015b96:	480f      	ldr	r0, [pc, #60]	; (8015bd4 <gd32_uart_begin+0x19c>)
 8015b98:	f7ff f8d2 	bl	8014d40 <gpio_init>
 8015b9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015ba0:	2203      	movs	r2, #3
 8015ba2:	2104      	movs	r1, #4
 8015ba4:	480b      	ldr	r0, [pc, #44]	; (8015bd4 <gd32_uart_begin+0x19c>)
 8015ba6:	e7ef      	b.n	8015b88 <gd32_uart_begin+0x150>
 8015ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015bac:	2203      	movs	r2, #3
 8015bae:	2118      	movs	r1, #24
 8015bb0:	4808      	ldr	r0, [pc, #32]	; (8015bd4 <gd32_uart_begin+0x19c>)
 8015bb2:	f7ff f8c5 	bl	8014d40 <gpio_init>
 8015bb6:	2304      	movs	r3, #4
 8015bb8:	2203      	movs	r2, #3
 8015bba:	4619      	mov	r1, r3
 8015bbc:	4809      	ldr	r0, [pc, #36]	; (8015be4 <gd32_uart_begin+0x1ac>)
 8015bbe:	e7e3      	b.n	8015b88 <gd32_uart_begin+0x150>
 8015bc0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8015bc4:	e7be      	b.n	8015b44 <gd32_uart_begin+0x10c>
 8015bc6:	2100      	movs	r1, #0
 8015bc8:	e7bc      	b.n	8015b44 <gd32_uart_begin+0x10c>
 8015bca:	bf00      	nop
 8015bcc:	40004c00 	andmi	r4, r0, r0, lsl #24
 8015bd0:	40005000 	andmi	r5, r0, r0
 8015bd4:	40011000 	andmi	r1, r1, r0
 8015bd8:	00140010 	andseq	r0, r4, r0, lsl r0
 8015bdc:	40010c00 	andmi	r0, r1, r0, lsl #24
 8015be0:	40010800 	andmi	r0, r1, r0, lsl #16
 8015be4:	40011400 	andmi	r1, r1, r0, lsl #8

08015be8 <micros_init()>:
 8015be8:	4770      	bx	lr
	...

08015bec <udelay_init()>:
 8015bec:	4a07      	ldr	r2, [pc, #28]	; (8015c0c <udelay_init()+0x20>)
 8015bee:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8015bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8015bf6:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8015bfa:	2200      	movs	r2, #0
 8015bfc:	4b04      	ldr	r3, [pc, #16]	; (8015c10 <udelay_init()+0x24>)
 8015bfe:	605a      	str	r2, [r3, #4]
 8015c00:	681a      	ldr	r2, [r3, #0]
 8015c02:	f042 0201 	orr.w	r2, r2, #1
 8015c06:	601a      	str	r2, [r3, #0]
 8015c08:	4770      	bx	lr
 8015c0a:	bf00      	nop
 8015c0c:	e000ed00 	and	lr, r0, r0, lsl #26
 8015c10:	e0001000 	and	r1, r0, r0

08015c14 <udelay(unsigned int, unsigned int)>:
 8015c14:	236c      	movs	r3, #108	; 0x6c
 8015c16:	b530      	push	{r4, r5, lr}
 8015c18:	4358      	muls	r0, r3
 8015c1a:	b909      	cbnz	r1, 8015c20 <udelay(unsigned int, unsigned int)+0xc>
 8015c1c:	4b08      	ldr	r3, [pc, #32]	; (8015c40 <udelay(unsigned int, unsigned int)+0x2c>)
 8015c1e:	6859      	ldr	r1, [r3, #4]
 8015c20:	2300      	movs	r3, #0
 8015c22:	4c07      	ldr	r4, [pc, #28]	; (8015c40 <udelay(unsigned int, unsigned int)+0x2c>)
 8015c24:	6862      	ldr	r2, [r4, #4]
 8015c26:	4291      	cmp	r1, r2
 8015c28:	d0fc      	beq.n	8015c24 <udelay(unsigned int, unsigned int)+0x10>
 8015c2a:	bf2a      	itet	cs
 8015c2c:	f102 35ff 	addcs.w	r5, r2, #4294967295	; 0xffffffff
 8015c30:	189b      	addcc	r3, r3, r2
 8015c32:	195b      	addcs	r3, r3, r5
 8015c34:	1a5b      	subs	r3, r3, r1
 8015c36:	4283      	cmp	r3, r0
 8015c38:	d300      	bcc.n	8015c3c <udelay(unsigned int, unsigned int)+0x28>
 8015c3a:	bd30      	pop	{r4, r5, pc}
 8015c3c:	4611      	mov	r1, r2
 8015c3e:	e7f1      	b.n	8015c24 <udelay(unsigned int, unsigned int)+0x10>
 8015c40:	e0001000 	and	r1, r0, r0

08015c44 <mac_address_get>:
 8015c44:	2102      	movs	r1, #2
 8015c46:	4a07      	ldr	r2, [pc, #28]	; (8015c64 <mac_address_get+0x20>)
 8015c48:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 8015c4c:	f8d2 27ec 	ldr.w	r2, [r2, #2028]	; 0x7ec
 8015c50:	7001      	strb	r1, [r0, #0]
 8015c52:	7042      	strb	r2, [r0, #1]
 8015c54:	0e1a      	lsrs	r2, r3, #24
 8015c56:	7082      	strb	r2, [r0, #2]
 8015c58:	0c1a      	lsrs	r2, r3, #16
 8015c5a:	70c2      	strb	r2, [r0, #3]
 8015c5c:	0a1a      	lsrs	r2, r3, #8
 8015c5e:	7102      	strb	r2, [r0, #4]
 8015c60:	7143      	strb	r3, [r0, #5]
 8015c62:	4770      	bx	lr
 8015c64:	1ffff000 	svcne	0x00fff000

08015c68 <adc_mode_config>:
 8015c68:	4b06      	ldr	r3, [pc, #24]	; (8015c84 <adc_mode_config+0x1c>)
 8015c6a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8015c6e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8015c72:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8015c76:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8015c7a:	4302      	orrs	r2, r0
 8015c7c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8015c80:	4770      	bx	lr
 8015c82:	bf00      	nop
 8015c84:	40012000 	andmi	r2, r1, r0

08015c88 <adc_special_function_config>:
 8015c88:	b510      	push	{r4, lr}
 8015c8a:	f401 7380 	and.w	r3, r1, #256	; 0x100
 8015c8e:	f401 6480 	and.w	r4, r1, #1024	; 0x400
 8015c92:	f001 0102 	and.w	r1, r1, #2
 8015c96:	b17a      	cbz	r2, 8015cb8 <adc_special_function_config+0x30>
 8015c98:	b11b      	cbz	r3, 8015ca2 <adc_special_function_config+0x1a>
 8015c9a:	6843      	ldr	r3, [r0, #4]
 8015c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015ca0:	6043      	str	r3, [r0, #4]
 8015ca2:	b11c      	cbz	r4, 8015cac <adc_special_function_config+0x24>
 8015ca4:	6843      	ldr	r3, [r0, #4]
 8015ca6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8015caa:	6043      	str	r3, [r0, #4]
 8015cac:	b119      	cbz	r1, 8015cb6 <adc_special_function_config+0x2e>
 8015cae:	6883      	ldr	r3, [r0, #8]
 8015cb0:	f043 0302 	orr.w	r3, r3, #2
 8015cb4:	6083      	str	r3, [r0, #8]
 8015cb6:	bd10      	pop	{r4, pc}
 8015cb8:	b11b      	cbz	r3, 8015cc2 <adc_special_function_config+0x3a>
 8015cba:	6843      	ldr	r3, [r0, #4]
 8015cbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015cc0:	6043      	str	r3, [r0, #4]
 8015cc2:	b11c      	cbz	r4, 8015ccc <adc_special_function_config+0x44>
 8015cc4:	6843      	ldr	r3, [r0, #4]
 8015cc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8015cca:	6043      	str	r3, [r0, #4]
 8015ccc:	2900      	cmp	r1, #0
 8015cce:	d0f2      	beq.n	8015cb6 <adc_special_function_config+0x2e>
 8015cd0:	6883      	ldr	r3, [r0, #8]
 8015cd2:	f023 0302 	bic.w	r3, r3, #2
 8015cd6:	e7ed      	b.n	8015cb4 <adc_special_function_config+0x2c>

08015cd8 <adc_data_alignment_config>:
 8015cd8:	6883      	ldr	r3, [r0, #8]
 8015cda:	b119      	cbz	r1, 8015ce4 <adc_data_alignment_config+0xc>
 8015cdc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015ce0:	6083      	str	r3, [r0, #8]
 8015ce2:	4770      	bx	lr
 8015ce4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015ce8:	e7fa      	b.n	8015ce0 <adc_data_alignment_config+0x8>

08015cea <adc_enable>:
 8015cea:	6883      	ldr	r3, [r0, #8]
 8015cec:	07db      	lsls	r3, r3, #31
 8015cee:	bf5e      	ittt	pl
 8015cf0:	6883      	ldrpl	r3, [r0, #8]
 8015cf2:	f043 0301 	orrpl.w	r3, r3, #1
 8015cf6:	6083      	strpl	r3, [r0, #8]
 8015cf8:	4770      	bx	lr

08015cfa <adc_calibration_enable>:
 8015cfa:	6883      	ldr	r3, [r0, #8]
 8015cfc:	f100 0208 	add.w	r2, r0, #8
 8015d00:	f043 0308 	orr.w	r3, r3, #8
 8015d04:	6083      	str	r3, [r0, #8]
 8015d06:	6813      	ldr	r3, [r2, #0]
 8015d08:	0719      	lsls	r1, r3, #28
 8015d0a:	d4fc      	bmi.n	8015d06 <adc_calibration_enable+0xc>
 8015d0c:	6883      	ldr	r3, [r0, #8]
 8015d0e:	f043 0304 	orr.w	r3, r3, #4
 8015d12:	6083      	str	r3, [r0, #8]
 8015d14:	6813      	ldr	r3, [r2, #0]
 8015d16:	075b      	lsls	r3, r3, #29
 8015d18:	d4fc      	bmi.n	8015d14 <adc_calibration_enable+0x1a>
 8015d1a:	4770      	bx	lr

08015d1c <adc_tempsensor_vrefint_enable>:
 8015d1c:	4a03      	ldr	r2, [pc, #12]	; (8015d2c <adc_tempsensor_vrefint_enable+0x10>)
 8015d1e:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 8015d22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015d26:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
 8015d2a:	4770      	bx	lr
 8015d2c:	40012000 	andmi	r2, r1, r0

08015d30 <adc_channel_length_config>:
 8015d30:	2901      	cmp	r1, #1
 8015d32:	d002      	beq.n	8015d3a <adc_channel_length_config+0xa>
 8015d34:	2902      	cmp	r1, #2
 8015d36:	d00c      	beq.n	8015d52 <adc_channel_length_config+0x22>
 8015d38:	4770      	bx	lr
 8015d3a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015d3c:	3a01      	subs	r2, #1
 8015d3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8015d42:	62c3      	str	r3, [r0, #44]	; 0x2c
 8015d44:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015d46:	0512      	lsls	r2, r2, #20
 8015d48:	f402 0270 	and.w	r2, r2, #15728640	; 0xf00000
 8015d4c:	431a      	orrs	r2, r3
 8015d4e:	62c2      	str	r2, [r0, #44]	; 0x2c
 8015d50:	4770      	bx	lr
 8015d52:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8015d54:	3a01      	subs	r2, #1
 8015d56:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8015d5a:	6383      	str	r3, [r0, #56]	; 0x38
 8015d5c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8015d5e:	0512      	lsls	r2, r2, #20
 8015d60:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8015d64:	431a      	orrs	r2, r3
 8015d66:	6382      	str	r2, [r0, #56]	; 0x38
 8015d68:	4770      	bx	lr

08015d6a <adc_inserted_channel_config>:
 8015d6a:	b530      	push	{r4, r5, lr}
 8015d6c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8015d6e:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8015d70:	f3c4 5401 	ubfx	r4, r4, #20, #2
 8015d74:	1a61      	subs	r1, r4, r1
 8015d76:	f06f 0404 	mvn.w	r4, #4
 8015d7a:	4361      	muls	r1, r4
 8015d7c:	241f      	movs	r4, #31
 8015d7e:	310f      	adds	r1, #15
 8015d80:	408c      	lsls	r4, r1
 8015d82:	ea25 0504 	bic.w	r5, r5, r4
 8015d86:	fa02 f101 	lsl.w	r1, r2, r1
 8015d8a:	4329      	orrs	r1, r5
 8015d8c:	2a09      	cmp	r2, #9
 8015d8e:	6381      	str	r1, [r0, #56]	; 0x38
 8015d90:	d80b      	bhi.n	8015daa <adc_inserted_channel_config+0x40>
 8015d92:	2407      	movs	r4, #7
 8015d94:	6901      	ldr	r1, [r0, #16]
 8015d96:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015d9a:	4094      	lsls	r4, r2
 8015d9c:	ea21 0104 	bic.w	r1, r1, r4
 8015da0:	fa03 f202 	lsl.w	r2, r3, r2
 8015da4:	430a      	orrs	r2, r1
 8015da6:	6102      	str	r2, [r0, #16]
 8015da8:	bd30      	pop	{r4, r5, pc}
 8015daa:	2a11      	cmp	r2, #17
 8015dac:	d8fc      	bhi.n	8015da8 <adc_inserted_channel_config+0x3e>
 8015dae:	2407      	movs	r4, #7
 8015db0:	3a0a      	subs	r2, #10
 8015db2:	68c1      	ldr	r1, [r0, #12]
 8015db4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015db8:	4094      	lsls	r4, r2
 8015dba:	ea21 0104 	bic.w	r1, r1, r4
 8015dbe:	4093      	lsls	r3, r2
 8015dc0:	430b      	orrs	r3, r1
 8015dc2:	60c3      	str	r3, [r0, #12]
 8015dc4:	e7f0      	b.n	8015da8 <adc_inserted_channel_config+0x3e>

08015dc6 <adc_external_trigger_source_config>:
 8015dc6:	2901      	cmp	r1, #1
 8015dc8:	d002      	beq.n	8015dd0 <adc_external_trigger_source_config+0xa>
 8015dca:	2902      	cmp	r1, #2
 8015dcc:	d008      	beq.n	8015de0 <adc_external_trigger_source_config+0x1a>
 8015dce:	4770      	bx	lr
 8015dd0:	6883      	ldr	r3, [r0, #8]
 8015dd2:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8015dd6:	6083      	str	r3, [r0, #8]
 8015dd8:	6883      	ldr	r3, [r0, #8]
 8015dda:	4313      	orrs	r3, r2
 8015ddc:	6083      	str	r3, [r0, #8]
 8015dde:	4770      	bx	lr
 8015de0:	6883      	ldr	r3, [r0, #8]
 8015de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015de6:	e7f6      	b.n	8015dd6 <adc_external_trigger_source_config+0x10>

08015de8 <adc_external_trigger_config>:
 8015de8:	f001 0301 	and.w	r3, r1, #1
 8015dec:	f001 0102 	and.w	r1, r1, #2
 8015df0:	b152      	cbz	r2, 8015e08 <adc_external_trigger_config+0x20>
 8015df2:	b11b      	cbz	r3, 8015dfc <adc_external_trigger_config+0x14>
 8015df4:	6883      	ldr	r3, [r0, #8]
 8015df6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015dfa:	6083      	str	r3, [r0, #8]
 8015dfc:	b119      	cbz	r1, 8015e06 <adc_external_trigger_config+0x1e>
 8015dfe:	6883      	ldr	r3, [r0, #8]
 8015e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015e04:	6083      	str	r3, [r0, #8]
 8015e06:	4770      	bx	lr
 8015e08:	b11b      	cbz	r3, 8015e12 <adc_external_trigger_config+0x2a>
 8015e0a:	6883      	ldr	r3, [r0, #8]
 8015e0c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015e10:	6083      	str	r3, [r0, #8]
 8015e12:	2900      	cmp	r1, #0
 8015e14:	d0f7      	beq.n	8015e06 <adc_external_trigger_config+0x1e>
 8015e16:	6883      	ldr	r3, [r0, #8]
 8015e18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8015e1c:	e7f2      	b.n	8015e04 <adc_external_trigger_config+0x1c>

08015e1e <adc_software_trigger_enable>:
 8015e1e:	07ca      	lsls	r2, r1, #31
 8015e20:	bf42      	ittt	mi
 8015e22:	6883      	ldrmi	r3, [r0, #8]
 8015e24:	f443 0380 	orrmi.w	r3, r3, #4194304	; 0x400000
 8015e28:	6083      	strmi	r3, [r0, #8]
 8015e2a:	078b      	lsls	r3, r1, #30
 8015e2c:	bf42      	ittt	mi
 8015e2e:	6883      	ldrmi	r3, [r0, #8]
 8015e30:	f443 1300 	orrmi.w	r3, r3, #2097152	; 0x200000
 8015e34:	6083      	strmi	r3, [r0, #8]
 8015e36:	4770      	bx	lr

08015e38 <dma_deinit>:
 8015e38:	4b0c      	ldr	r3, [pc, #48]	; (8015e6c <dma_deinit+0x34>)
 8015e3a:	4298      	cmp	r0, r3
 8015e3c:	d102      	bne.n	8015e44 <dma_deinit+0xc>
 8015e3e:	2904      	cmp	r1, #4
 8015e40:	d900      	bls.n	8015e44 <dma_deinit+0xc>
 8015e42:	e7fe      	b.n	8015e42 <dma_deinit+0xa>
 8015e44:	2314      	movs	r3, #20
 8015e46:	fb03 0301 	mla	r3, r3, r1, r0
 8015e4a:	689a      	ldr	r2, [r3, #8]
 8015e4c:	0089      	lsls	r1, r1, #2
 8015e4e:	f022 0201 	bic.w	r2, r2, #1
 8015e52:	609a      	str	r2, [r3, #8]
 8015e54:	2200      	movs	r2, #0
 8015e56:	609a      	str	r2, [r3, #8]
 8015e58:	60da      	str	r2, [r3, #12]
 8015e5a:	611a      	str	r2, [r3, #16]
 8015e5c:	615a      	str	r2, [r3, #20]
 8015e5e:	230f      	movs	r3, #15
 8015e60:	6842      	ldr	r2, [r0, #4]
 8015e62:	408b      	lsls	r3, r1
 8015e64:	4313      	orrs	r3, r2
 8015e66:	6043      	str	r3, [r0, #4]
 8015e68:	4770      	bx	lr
 8015e6a:	bf00      	nop
 8015e6c:	40020400 	andmi	r0, r2, r0, lsl #8

08015e70 <dma_struct_para_init>:
 8015e70:	2300      	movs	r3, #0
 8015e72:	e9c0 3300 	strd	r3, r3, [r0]
 8015e76:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8015e7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015e7e:	8303      	strh	r3, [r0, #24]
 8015e80:	7683      	strb	r3, [r0, #26]
 8015e82:	4770      	bx	lr

08015e84 <dma_init>:
 8015e84:	4b1b      	ldr	r3, [pc, #108]	; (8015ef4 <dma_init+0x70>)
 8015e86:	b510      	push	{r4, lr}
 8015e88:	4298      	cmp	r0, r3
 8015e8a:	d102      	bne.n	8015e92 <dma_init+0xe>
 8015e8c:	2904      	cmp	r1, #4
 8015e8e:	d900      	bls.n	8015e92 <dma_init+0xe>
 8015e90:	e7fe      	b.n	8015e90 <dma_init+0xc>
 8015e92:	2314      	movs	r3, #20
 8015e94:	fb03 0101 	mla	r1, r3, r1, r0
 8015e98:	6813      	ldr	r3, [r2, #0]
 8015e9a:	610b      	str	r3, [r1, #16]
 8015e9c:	6893      	ldr	r3, [r2, #8]
 8015e9e:	614b      	str	r3, [r1, #20]
 8015ea0:	8a13      	ldrh	r3, [r2, #16]
 8015ea2:	60cb      	str	r3, [r1, #12]
 8015ea4:	68d4      	ldr	r4, [r2, #12]
 8015ea6:	6853      	ldr	r3, [r2, #4]
 8015ea8:	6888      	ldr	r0, [r1, #8]
 8015eaa:	4323      	orrs	r3, r4
 8015eac:	6954      	ldr	r4, [r2, #20]
 8015eae:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8015eb2:	4323      	orrs	r3, r4
 8015eb4:	4303      	orrs	r3, r0
 8015eb6:	608b      	str	r3, [r1, #8]
 8015eb8:	7e13      	ldrb	r3, [r2, #24]
 8015eba:	2b01      	cmp	r3, #1
 8015ebc:	688b      	ldr	r3, [r1, #8]
 8015ebe:	bf0c      	ite	eq
 8015ec0:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 8015ec4:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8015ec8:	608b      	str	r3, [r1, #8]
 8015eca:	7e53      	ldrb	r3, [r2, #25]
 8015ecc:	2b01      	cmp	r3, #1
 8015ece:	688b      	ldr	r3, [r1, #8]
 8015ed0:	bf0c      	ite	eq
 8015ed2:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
 8015ed6:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 8015eda:	608b      	str	r3, [r1, #8]
 8015edc:	7e93      	ldrb	r3, [r2, #26]
 8015ede:	b923      	cbnz	r3, 8015eea <dma_init+0x66>
 8015ee0:	688b      	ldr	r3, [r1, #8]
 8015ee2:	f023 0310 	bic.w	r3, r3, #16
 8015ee6:	608b      	str	r3, [r1, #8]
 8015ee8:	bd10      	pop	{r4, pc}
 8015eea:	688b      	ldr	r3, [r1, #8]
 8015eec:	f043 0310 	orr.w	r3, r3, #16
 8015ef0:	e7f9      	b.n	8015ee6 <dma_init+0x62>
 8015ef2:	bf00      	nop
 8015ef4:	40020400 	andmi	r0, r2, r0, lsl #8

08015ef8 <dma_circulation_disable>:
 8015ef8:	4b06      	ldr	r3, [pc, #24]	; (8015f14 <dma_circulation_disable+0x1c>)
 8015efa:	4298      	cmp	r0, r3
 8015efc:	d102      	bne.n	8015f04 <dma_circulation_disable+0xc>
 8015efe:	2904      	cmp	r1, #4
 8015f00:	d900      	bls.n	8015f04 <dma_circulation_disable+0xc>
 8015f02:	e7fe      	b.n	8015f02 <dma_circulation_disable+0xa>
 8015f04:	2314      	movs	r3, #20
 8015f06:	4359      	muls	r1, r3
 8015f08:	3008      	adds	r0, #8
 8015f0a:	580b      	ldr	r3, [r1, r0]
 8015f0c:	f023 0320 	bic.w	r3, r3, #32
 8015f10:	500b      	str	r3, [r1, r0]
 8015f12:	4770      	bx	lr
 8015f14:	40020400 	andmi	r0, r2, r0, lsl #8

08015f18 <dma_memory_to_memory_disable>:
 8015f18:	4b06      	ldr	r3, [pc, #24]	; (8015f34 <dma_memory_to_memory_disable+0x1c>)
 8015f1a:	4298      	cmp	r0, r3
 8015f1c:	d102      	bne.n	8015f24 <dma_memory_to_memory_disable+0xc>
 8015f1e:	2904      	cmp	r1, #4
 8015f20:	d900      	bls.n	8015f24 <dma_memory_to_memory_disable+0xc>
 8015f22:	e7fe      	b.n	8015f22 <dma_memory_to_memory_disable+0xa>
 8015f24:	2314      	movs	r3, #20
 8015f26:	4359      	muls	r1, r3
 8015f28:	3008      	adds	r0, #8
 8015f2a:	580b      	ldr	r3, [r1, r0]
 8015f2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8015f30:	500b      	str	r3, [r1, r0]
 8015f32:	4770      	bx	lr
 8015f34:	40020400 	andmi	r0, r2, r0, lsl #8

08015f38 <enet_delay>:
 8015f38:	2300      	movs	r3, #0
 8015f3a:	b082      	sub	sp, #8
 8015f3c:	9301      	str	r3, [sp, #4]
 8015f3e:	9001      	str	r0, [sp, #4]
 8015f40:	9b01      	ldr	r3, [sp, #4]
 8015f42:	b90b      	cbnz	r3, 8015f48 <enet_delay+0x10>
 8015f44:	b002      	add	sp, #8
 8015f46:	4770      	bx	lr
 8015f48:	9b01      	ldr	r3, [sp, #4]
 8015f4a:	3b01      	subs	r3, #1
 8015f4c:	9301      	str	r3, [sp, #4]
 8015f4e:	e7f7      	b.n	8015f40 <enet_delay+0x8>

08015f50 <enet_software_reset>:
 8015f50:	4b07      	ldr	r3, [pc, #28]	; (8015f70 <enet_software_reset+0x20>)
 8015f52:	681a      	ldr	r2, [r3, #0]
 8015f54:	f042 0201 	orr.w	r2, r2, #1
 8015f58:	601a      	str	r2, [r3, #0]
 8015f5a:	4a06      	ldr	r2, [pc, #24]	; (8015f74 <enet_software_reset+0x24>)
 8015f5c:	6819      	ldr	r1, [r3, #0]
 8015f5e:	07c9      	lsls	r1, r1, #31
 8015f60:	d501      	bpl.n	8015f66 <enet_software_reset+0x16>
 8015f62:	3a01      	subs	r2, #1
 8015f64:	d1fa      	bne.n	8015f5c <enet_software_reset+0xc>
 8015f66:	6818      	ldr	r0, [r3, #0]
 8015f68:	43c0      	mvns	r0, r0
 8015f6a:	f000 0001 	and.w	r0, r0, #1
 8015f6e:	4770      	bx	lr
 8015f70:	40029000 	andmi	r9, r2, r0
 8015f74:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08015f78 <enet_descriptors_chain_init>:
 8015f78:	f5b0 0fe0 	cmp.w	r0, #7340032	; 0x700000
 8015f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f7e:	4a19      	ldr	r2, [pc, #100]	; (8015fe4 <enet_descriptors_chain_init+0x6c>)
 8015f80:	d125      	bne.n	8015fce <enet_descriptors_chain_init+0x56>
 8015f82:	2500      	movs	r5, #0
 8015f84:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 8015f88:	2002      	movs	r0, #2
 8015f8a:	4b17      	ldr	r3, [pc, #92]	; (8015fe8 <enet_descriptors_chain_init+0x70>)
 8015f8c:	4c17      	ldr	r4, [pc, #92]	; (8015fec <enet_descriptors_chain_init+0x74>)
 8015f8e:	6113      	str	r3, [r2, #16]
 8015f90:	4a17      	ldr	r2, [pc, #92]	; (8015ff0 <enet_descriptors_chain_init+0x78>)
 8015f92:	6013      	str	r3, [r2, #0]
 8015f94:	2200      	movs	r2, #0
 8015f96:	f240 5ef4 	movw	lr, #1524	; 0x5f4
 8015f9a:	4916      	ldr	r1, [pc, #88]	; (8015ff4 <enet_descriptors_chain_init+0x7c>)
 8015f9c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8015fa0:	600a      	str	r2, [r1, #0]
 8015fa2:	4915      	ldr	r1, [pc, #84]	; (8015ff8 <enet_descriptors_chain_init+0x80>)
 8015fa4:	600a      	str	r2, [r1, #0]
 8015fa6:	f103 0110 	add.w	r1, r3, #16
 8015faa:	fb0e 4702 	mla	r7, lr, r2, r4
 8015fae:	f841 7c08 	str.w	r7, [r1, #-8]
 8015fb2:	4594      	cmp	ip, r2
 8015fb4:	bf94      	ite	ls
 8015fb6:	461f      	movls	r7, r3
 8015fb8:	460f      	movhi	r7, r1
 8015fba:	3201      	adds	r2, #1
 8015fbc:	4290      	cmp	r0, r2
 8015fbe:	e941 6504 	strd	r6, r5, [r1, #-16]
 8015fc2:	f841 7c04 	str.w	r7, [r1, #-4]
 8015fc6:	f101 0110 	add.w	r1, r1, #16
 8015fca:	d1ee      	bne.n	8015faa <enet_descriptors_chain_init+0x32>
 8015fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015fce:	4b0b      	ldr	r3, [pc, #44]	; (8015ffc <enet_descriptors_chain_init+0x84>)
 8015fd0:	f244 55f4 	movw	r5, #17908	; 0x45f4
 8015fd4:	60d3      	str	r3, [r2, #12]
 8015fd6:	4a0a      	ldr	r2, [pc, #40]	; (8016000 <enet_descriptors_chain_init+0x88>)
 8015fd8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8015fdc:	2008      	movs	r0, #8
 8015fde:	4c09      	ldr	r4, [pc, #36]	; (8016004 <enet_descriptors_chain_init+0x8c>)
 8015fe0:	6013      	str	r3, [r2, #0]
 8015fe2:	e7d7      	b.n	8015f94 <enet_descriptors_chain_init+0x1c>
 8015fe4:	40029000 	andmi	r9, r2, r0
 8015fe8:	2001463c 	andcs	r4, r1, ip, lsr r6
 8015fec:	20013a54 	andcs	r3, r1, r4, asr sl
 8015ff0:	200109f4 	strdcs	r0, [r1], -r4
 8015ff4:	200109e8 	andcs	r0, r1, r8, ror #19
 8015ff8:	200109ec 	andcs	r0, r1, ip, ror #19
 8015ffc:	200139d4 	ldrdcs	r3, [r1], -r4
 8016000:	200109f0 	strdcs	r0, [r1], -r0	; <UNPREDICTABLE>
 8016004:	20010a34 	andcs	r0, r1, r4, lsr sl

08016008 <enet_frame_receive>:
 8016008:	4a1d      	ldr	r2, [pc, #116]	; (8016080 <enet_frame_receive+0x78>)
 801600a:	b510      	push	{r4, lr}
 801600c:	6813      	ldr	r3, [r2, #0]
 801600e:	681b      	ldr	r3, [r3, #0]
 8016010:	2b00      	cmp	r3, #0
 8016012:	db33      	blt.n	801607c <enet_frame_receive+0x74>
 8016014:	b970      	cbnz	r0, 8016034 <enet_frame_receive+0x2c>
 8016016:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801601a:	6813      	ldr	r3, [r2, #0]
 801601c:	6019      	str	r1, [r3, #0]
 801601e:	4919      	ldr	r1, [pc, #100]	; (8016084 <enet_frame_receive+0x7c>)
 8016020:	6948      	ldr	r0, [r1, #20]
 8016022:	0604      	lsls	r4, r0, #24
 8016024:	d419      	bmi.n	801605a <enet_frame_receive+0x52>
 8016026:	6859      	ldr	r1, [r3, #4]
 8016028:	0448      	lsls	r0, r1, #17
 801602a:	d51b      	bpl.n	8016064 <enet_frame_receive+0x5c>
 801602c:	68db      	ldr	r3, [r3, #12]
 801602e:	2001      	movs	r0, #1
 8016030:	6013      	str	r3, [r2, #0]
 8016032:	bd10      	pop	{r4, pc}
 8016034:	f403 4403 	and.w	r4, r3, #33536	; 0x8300
 8016038:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 801603c:	d11e      	bne.n	801607c <enet_frame_receive+0x74>
 801603e:	f3c3 430d 	ubfx	r3, r3, #16, #14
 8016042:	3b04      	subs	r3, #4
 8016044:	428b      	cmp	r3, r1
 8016046:	d819      	bhi.n	801607c <enet_frame_receive+0x74>
 8016048:	2100      	movs	r1, #0
 801604a:	4299      	cmp	r1, r3
 801604c:	6814      	ldr	r4, [r2, #0]
 801604e:	d2e2      	bcs.n	8016016 <enet_frame_receive+0xe>
 8016050:	68a4      	ldr	r4, [r4, #8]
 8016052:	5d0c      	ldrb	r4, [r1, r4]
 8016054:	5444      	strb	r4, [r0, r1]
 8016056:	3101      	adds	r1, #1
 8016058:	e7f7      	b.n	801604a <enet_frame_receive+0x42>
 801605a:	2080      	movs	r0, #128	; 0x80
 801605c:	6148      	str	r0, [r1, #20]
 801605e:	2000      	movs	r0, #0
 8016060:	6088      	str	r0, [r1, #8]
 8016062:	e7e0      	b.n	8016026 <enet_frame_receive+0x1e>
 8016064:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8016068:	4906      	ldr	r1, [pc, #24]	; (8016084 <enet_frame_receive+0x7c>)
 801606a:	bf05      	ittet	eq
 801606c:	3310      	addeq	r3, #16
 801606e:	6809      	ldreq	r1, [r1, #0]
 8016070:	68cb      	ldrne	r3, [r1, #12]
 8016072:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 8016076:	bf08      	it	eq
 8016078:	185b      	addeq	r3, r3, r1
 801607a:	e7d8      	b.n	801602e <enet_frame_receive+0x26>
 801607c:	2000      	movs	r0, #0
 801607e:	e7d8      	b.n	8016032 <enet_frame_receive+0x2a>
 8016080:	200109f0 	strdcs	r0, [r1], -r0	; <UNPREDICTABLE>
 8016084:	40029000 	andmi	r9, r2, r0

08016088 <enet_frame_transmit>:
 8016088:	4a1e      	ldr	r2, [pc, #120]	; (8016104 <enet_frame_transmit+0x7c>)
 801608a:	b530      	push	{r4, r5, lr}
 801608c:	6813      	ldr	r3, [r2, #0]
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	2b00      	cmp	r3, #0
 8016092:	db34      	blt.n	80160fe <enet_frame_transmit+0x76>
 8016094:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8016098:	4299      	cmp	r1, r3
 801609a:	d830      	bhi.n	80160fe <enet_frame_transmit+0x76>
 801609c:	b9e8      	cbnz	r0, 80160da <enet_frame_transmit+0x52>
 801609e:	6813      	ldr	r3, [r2, #0]
 80160a0:	4819      	ldr	r0, [pc, #100]	; (8016108 <enet_frame_transmit+0x80>)
 80160a2:	6059      	str	r1, [r3, #4]
 80160a4:	6819      	ldr	r1, [r3, #0]
 80160a6:	f041 4130 	orr.w	r1, r1, #2952790016	; 0xb0000000
 80160aa:	6019      	str	r1, [r3, #0]
 80160ac:	6941      	ldr	r1, [r0, #20]
 80160ae:	6944      	ldr	r4, [r0, #20]
 80160b0:	f001 0104 	and.w	r1, r1, #4
 80160b4:	f004 0420 	and.w	r4, r4, #32
 80160b8:	4321      	orrs	r1, r4
 80160ba:	d110      	bne.n	80160de <enet_frame_transmit+0x56>
 80160bc:	6819      	ldr	r1, [r3, #0]
 80160be:	02c8      	lsls	r0, r1, #11
 80160c0:	d511      	bpl.n	80160e6 <enet_frame_transmit+0x5e>
 80160c2:	68db      	ldr	r3, [r3, #12]
 80160c4:	2001      	movs	r0, #1
 80160c6:	6013      	str	r3, [r2, #0]
 80160c8:	bd30      	pop	{r4, r5, pc}
 80160ca:	5cc5      	ldrb	r5, [r0, r3]
 80160cc:	68a4      	ldr	r4, [r4, #8]
 80160ce:	551d      	strb	r5, [r3, r4]
 80160d0:	3301      	adds	r3, #1
 80160d2:	428b      	cmp	r3, r1
 80160d4:	6814      	ldr	r4, [r2, #0]
 80160d6:	d1f8      	bne.n	80160ca <enet_frame_transmit+0x42>
 80160d8:	e7e1      	b.n	801609e <enet_frame_transmit+0x16>
 80160da:	2300      	movs	r3, #0
 80160dc:	e7f9      	b.n	80160d2 <enet_frame_transmit+0x4a>
 80160de:	6141      	str	r1, [r0, #20]
 80160e0:	2100      	movs	r1, #0
 80160e2:	6041      	str	r1, [r0, #4]
 80160e4:	e7ea      	b.n	80160bc <enet_frame_transmit+0x34>
 80160e6:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 80160ea:	4907      	ldr	r1, [pc, #28]	; (8016108 <enet_frame_transmit+0x80>)
 80160ec:	bf05      	ittet	eq
 80160ee:	3310      	addeq	r3, #16
 80160f0:	6809      	ldreq	r1, [r1, #0]
 80160f2:	690b      	ldrne	r3, [r1, #16]
 80160f4:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 80160f8:	bf08      	it	eq
 80160fa:	185b      	addeq	r3, r3, r1
 80160fc:	e7e2      	b.n	80160c4 <enet_frame_transmit+0x3c>
 80160fe:	2000      	movs	r0, #0
 8016100:	e7e2      	b.n	80160c8 <enet_frame_transmit+0x40>
 8016102:	bf00      	nop
 8016104:	200109f4 	strdcs	r0, [r1], -r4
 8016108:	40029000 	andmi	r9, r2, r0

0801610c <enet_transmit_checksum_config>:
 801610c:	6803      	ldr	r3, [r0, #0]
 801610e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8016112:	430b      	orrs	r3, r1
 8016114:	6003      	str	r3, [r0, #0]
 8016116:	4770      	bx	lr

08016118 <enet_mac_address_set>:
 8016118:	888a      	ldrh	r2, [r1, #4]
 801611a:	4b03      	ldr	r3, [pc, #12]	; (8016128 <enet_mac_address_set+0x10>)
 801611c:	50c2      	str	r2, [r0, r3]
 801611e:	680a      	ldr	r2, [r1, #0]
 8016120:	3304      	adds	r3, #4
 8016122:	50c2      	str	r2, [r0, r3]
 8016124:	4770      	bx	lr
 8016126:	bf00      	nop
 8016128:	40028040 	andmi	r8, r2, r0, asr #32

0801612c <enet_rx_enable>:
 801612c:	4a05      	ldr	r2, [pc, #20]	; (8016144 <enet_rx_enable+0x18>)
 801612e:	6813      	ldr	r3, [r2, #0]
 8016130:	f043 0304 	orr.w	r3, r3, #4
 8016134:	6013      	str	r3, [r2, #0]
 8016136:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801613a:	6993      	ldr	r3, [r2, #24]
 801613c:	f043 0302 	orr.w	r3, r3, #2
 8016140:	6193      	str	r3, [r2, #24]
 8016142:	4770      	bx	lr
 8016144:	40028000 	andmi	r8, r2, r0

08016148 <enet_phy_write_read>:
 8016148:	b530      	push	{r4, r5, lr}
 801614a:	4604      	mov	r4, r0
 801614c:	4d13      	ldr	r5, [pc, #76]	; (801619c <enet_phy_write_read+0x54>)
 801614e:	0192      	lsls	r2, r2, #6
 8016150:	6928      	ldr	r0, [r5, #16]
 8016152:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 8016156:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
 801615a:	f020 00c3 	bic.w	r0, r0, #195	; 0xc3
 801615e:	4302      	orrs	r2, r0
 8016160:	02c9      	lsls	r1, r1, #11
 8016162:	b289      	uxth	r1, r1
 8016164:	2c02      	cmp	r4, #2
 8016166:	ea42 0204 	orr.w	r2, r2, r4
 801616a:	ea42 0201 	orr.w	r2, r2, r1
 801616e:	bf08      	it	eq
 8016170:	8819      	ldrheq	r1, [r3, #0]
 8016172:	f042 0201 	orr.w	r2, r2, #1
 8016176:	bf08      	it	eq
 8016178:	6169      	streq	r1, [r5, #20]
 801617a:	612a      	str	r2, [r5, #16]
 801617c:	4907      	ldr	r1, [pc, #28]	; (801619c <enet_phy_write_read+0x54>)
 801617e:	4a08      	ldr	r2, [pc, #32]	; (80161a0 <enet_phy_write_read+0x58>)
 8016180:	6908      	ldr	r0, [r1, #16]
 8016182:	07c0      	lsls	r0, r0, #31
 8016184:	d501      	bpl.n	801618a <enet_phy_write_read+0x42>
 8016186:	3a01      	subs	r2, #1
 8016188:	d1fa      	bne.n	8016180 <enet_phy_write_read+0x38>
 801618a:	690a      	ldr	r2, [r1, #16]
 801618c:	43d2      	mvns	r2, r2
 801618e:	f002 0001 	and.w	r0, r2, #1
 8016192:	b90c      	cbnz	r4, 8016198 <enet_phy_write_read+0x50>
 8016194:	694a      	ldr	r2, [r1, #20]
 8016196:	801a      	strh	r2, [r3, #0]
 8016198:	bd30      	pop	{r4, r5, pc}
 801619a:	bf00      	nop
 801619c:	40028000 	andmi	r8, r2, r0
 80161a0:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

080161a4 <enet_phy_config>:
 80161a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80161a6:	4d22      	ldr	r5, [pc, #136]	; (8016230 <enet_phy_config+0x8c>)
 80161a8:	2001      	movs	r0, #1
 80161aa:	692c      	ldr	r4, [r5, #16]
 80161ac:	f7fe ff36 	bl	801501c <rcu_clock_freq_get>
 80161b0:	4b20      	ldr	r3, [pc, #128]	; (8016234 <enet_phy_config+0x90>)
 80161b2:	4a21      	ldr	r2, [pc, #132]	; (8016238 <enet_phy_config+0x94>)
 80161b4:	4403      	add	r3, r0
 80161b6:	4293      	cmp	r3, r2
 80161b8:	f024 041c 	bic.w	r4, r4, #28
 80161bc:	d21f      	bcs.n	80161fe <enet_phy_config+0x5a>
 80161be:	f044 0408 	orr.w	r4, r4, #8
 80161c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80161c6:	612c      	str	r4, [r5, #16]
 80161c8:	2200      	movs	r2, #0
 80161ca:	f8ad 3006 	strh.w	r3, [sp, #6]
 80161ce:	2101      	movs	r1, #1
 80161d0:	2002      	movs	r0, #2
 80161d2:	f10d 0306 	add.w	r3, sp, #6
 80161d6:	f7ff ffb7 	bl	8016148 <enet_phy_write_read>
 80161da:	b310      	cbz	r0, 8016222 <enet_phy_config+0x7e>
 80161dc:	2200      	movs	r2, #0
 80161de:	4817      	ldr	r0, [pc, #92]	; (801623c <enet_phy_config+0x98>)
 80161e0:	f7ff feaa 	bl	8015f38 <enet_delay>
 80161e4:	2101      	movs	r1, #1
 80161e6:	4610      	mov	r0, r2
 80161e8:	f10d 0306 	add.w	r3, sp, #6
 80161ec:	f7ff ffac 	bl	8016148 <enet_phy_write_read>
 80161f0:	b1b8      	cbz	r0, 8016222 <enet_phy_config+0x7e>
 80161f2:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80161f6:	43c0      	mvns	r0, r0
 80161f8:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 80161fc:	e012      	b.n	8016224 <enet_phy_config+0x80>
 80161fe:	4b10      	ldr	r3, [pc, #64]	; (8016240 <enet_phy_config+0x9c>)
 8016200:	4a10      	ldr	r2, [pc, #64]	; (8016244 <enet_phy_config+0xa0>)
 8016202:	4403      	add	r3, r0
 8016204:	4293      	cmp	r3, r2
 8016206:	d802      	bhi.n	801620e <enet_phy_config+0x6a>
 8016208:	f044 040c 	orr.w	r4, r4, #12
 801620c:	e7d9      	b.n	80161c2 <enet_phy_config+0x1e>
 801620e:	4b0e      	ldr	r3, [pc, #56]	; (8016248 <enet_phy_config+0xa4>)
 8016210:	4a0e      	ldr	r2, [pc, #56]	; (801624c <enet_phy_config+0xa8>)
 8016212:	4403      	add	r3, r0
 8016214:	4293      	cmp	r3, r2
 8016216:	d9d4      	bls.n	80161c2 <enet_phy_config+0x1e>
 8016218:	4b0d      	ldr	r3, [pc, #52]	; (8016250 <enet_phy_config+0xac>)
 801621a:	4a0e      	ldr	r2, [pc, #56]	; (8016254 <enet_phy_config+0xb0>)
 801621c:	4403      	add	r3, r0
 801621e:	4293      	cmp	r3, r2
 8016220:	d902      	bls.n	8016228 <enet_phy_config+0x84>
 8016222:	2000      	movs	r0, #0
 8016224:	b003      	add	sp, #12
 8016226:	bd30      	pop	{r4, r5, pc}
 8016228:	f044 0404 	orr.w	r4, r4, #4
 801622c:	e7c9      	b.n	80161c2 <enet_phy_config+0x1e>
 801622e:	bf00      	nop
 8016230:	40028000 	andmi	r8, r2, r0
 8016234:	feced300 	cdp2	3, 12, cr13, cr14, cr0, {0}
 8016238:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 801623c:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 8016240:	fde9f140 	stc2l	1, cr15, [r9, #256]!	; 0x100
 8016244:	017d783f 	cmneq	sp, pc, lsr r8
 8016248:	fc6c7900 	stc2l	9, cr7, [ip], #-0	; <UNPREDICTABLE>
 801624c:	01c9c37f 	biceq	ip, r9, pc, ror r3
 8016250:	faa2b580 	blx	68c3858 <__stack_size+0x68c2058>
 8016254:	0112a880 	tsteq	r2, r0, lsl #17

08016258 <enet_init>:
 8016258:	2300      	movs	r3, #0
 801625a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801625c:	4604      	mov	r4, r0
 801625e:	460d      	mov	r5, r1
 8016260:	4616      	mov	r6, r2
 8016262:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016266:	f7ff ff9d 	bl	80161a4 <enet_phy_config>
 801626a:	2800      	cmp	r0, #0
 801626c:	d037      	beq.n	80162de <enet_init+0x86>
 801626e:	4b3b      	ldr	r3, [pc, #236]	; (801635c <enet_init+0x104>)
 8016270:	4a3b      	ldr	r2, [pc, #236]	; (8016360 <enet_init+0x108>)
 8016272:	6819      	ldr	r1, [r3, #0]
 8016274:	2c01      	cmp	r4, #1
 8016276:	ea02 0201 	and.w	r2, r2, r1
 801627a:	601a      	str	r2, [r3, #0]
 801627c:	f04f 0200 	mov.w	r2, #0
 8016280:	605a      	str	r2, [r3, #4]
 8016282:	609a      	str	r2, [r3, #8]
 8016284:	60da      	str	r2, [r3, #12]
 8016286:	6999      	ldr	r1, [r3, #24]
 8016288:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
 801628c:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8016290:	ea4f 4111 	mov.w	r1, r1, lsr #16
 8016294:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8016298:	6199      	str	r1, [r3, #24]
 801629a:	4932      	ldr	r1, [pc, #200]	; (8016364 <enet_init+0x10c>)
 801629c:	61da      	str	r2, [r3, #28]
 801629e:	6988      	ldr	r0, [r1, #24]
 80162a0:	4b31      	ldr	r3, [pc, #196]	; (8016368 <enet_init+0x110>)
 80162a2:	ea03 0300 	and.w	r3, r3, r0
 80162a6:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80162aa:	618b      	str	r3, [r1, #24]
 80162ac:	680b      	ldr	r3, [r1, #0]
 80162ae:	4b2f      	ldr	r3, [pc, #188]	; (801636c <enet_init+0x114>)
 80162b0:	600b      	str	r3, [r1, #0]
 80162b2:	d01e      	beq.n	80162f2 <enet_init+0x9a>
 80162b4:	08e3      	lsrs	r3, r4, #3
 80162b6:	0861      	lsrs	r1, r4, #1
 80162b8:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 80162bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80162c0:	430b      	orrs	r3, r1
 80162c2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80162c6:	2101      	movs	r1, #1
 80162c8:	2002      	movs	r0, #2
 80162ca:	f10d 0306 	add.w	r3, sp, #6
 80162ce:	f7ff ff3b 	bl	8016148 <enet_phy_write_read>
 80162d2:	b158      	cbz	r0, 80162ec <enet_init+0x94>
 80162d4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80162d8:	f7ff fe2e 	bl	8015f38 <enet_delay>
 80162dc:	e05d      	b.n	801639a <enet_init+0x142>
 80162de:	4824      	ldr	r0, [pc, #144]	; (8016370 <enet_init+0x118>)
 80162e0:	f7ff fe2a 	bl	8015f38 <enet_delay>
 80162e4:	f7ff ff5e 	bl	80161a4 <enet_phy_config>
 80162e8:	2800      	cmp	r0, #0
 80162ea:	d1c0      	bne.n	801626e <enet_init+0x16>
 80162ec:	2000      	movs	r0, #0
 80162ee:	b003      	add	sp, #12
 80162f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162f2:	4614      	mov	r4, r2
 80162f4:	4f1f      	ldr	r7, [pc, #124]	; (8016374 <enet_init+0x11c>)
 80162f6:	2201      	movs	r2, #1
 80162f8:	2000      	movs	r0, #0
 80162fa:	4611      	mov	r1, r2
 80162fc:	f10d 0306 	add.w	r3, sp, #6
 8016300:	f7ff ff22 	bl	8016148 <enet_phy_write_read>
 8016304:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8016308:	3401      	adds	r4, #1
 801630a:	f002 0204 	and.w	r2, r2, #4
 801630e:	f8ad 2006 	strh.w	r2, [sp, #6]
 8016312:	b912      	cbnz	r2, 801631a <enet_init+0xc2>
 8016314:	42bc      	cmp	r4, r7
 8016316:	d1ee      	bne.n	80162f6 <enet_init+0x9e>
 8016318:	e7e8      	b.n	80162ec <enet_init+0x94>
 801631a:	42bc      	cmp	r4, r7
 801631c:	d0e6      	beq.n	80162ec <enet_init+0x94>
 801631e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016322:	2101      	movs	r1, #1
 8016324:	f8ad 2006 	strh.w	r2, [sp, #6]
 8016328:	2002      	movs	r0, #2
 801632a:	2200      	movs	r2, #0
 801632c:	f7ff ff0c 	bl	8016148 <enet_phy_write_read>
 8016330:	2800      	cmp	r0, #0
 8016332:	d0db      	beq.n	80162ec <enet_init+0x94>
 8016334:	2400      	movs	r4, #0
 8016336:	4f0f      	ldr	r7, [pc, #60]	; (8016374 <enet_init+0x11c>)
 8016338:	2201      	movs	r2, #1
 801633a:	2000      	movs	r0, #0
 801633c:	4611      	mov	r1, r2
 801633e:	f10d 0306 	add.w	r3, sp, #6
 8016342:	f7ff ff01 	bl	8016148 <enet_phy_write_read>
 8016346:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801634a:	3401      	adds	r4, #1
 801634c:	f002 0220 	and.w	r2, r2, #32
 8016350:	f8ad 2006 	strh.w	r2, [sp, #6]
 8016354:	b982      	cbnz	r2, 8016378 <enet_init+0x120>
 8016356:	42bc      	cmp	r4, r7
 8016358:	d1ee      	bne.n	8016338 <enet_init+0xe0>
 801635a:	e7c7      	b.n	80162ec <enet_init+0x94>
 801635c:	40028000 	andmi	r8, r2, r0
 8016360:	fd30810f 	ldc2	1, cr8, [r0, #-60]!	; 0xffffffc4
 8016364:	40029000 	andmi	r9, r2, r0
 8016368:	f8de3f23 			; <UNDEFINED> instruction: 0xf8de3f23
 801636c:	02c16000 	sbceq	r6, r1, #0
 8016370:	008fffff 	strdeq	pc, [pc], pc	; <UNPREDICTABLE>
 8016374:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 8016378:	42bc      	cmp	r4, r7
 801637a:	d0b7      	beq.n	80162ec <enet_init+0x94>
 801637c:	2101      	movs	r1, #1
 801637e:	2210      	movs	r2, #16
 8016380:	2000      	movs	r0, #0
 8016382:	f7ff fee1 	bl	8016148 <enet_phy_write_read>
 8016386:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801638a:	f3c3 0480 	ubfx	r4, r3, #2, #1
 801638e:	0799      	lsls	r1, r3, #30
 8016390:	ea4f 24c4 	mov.w	r4, r4, lsl #11
 8016394:	d401      	bmi.n	801639a <enet_init+0x142>
 8016396:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 801639a:	4b63      	ldr	r3, [pc, #396]	; (8016528 <enet_init+0x2d0>)
 801639c:	681a      	ldr	r2, [r3, #0]
 801639e:	f422 42b0 	bic.w	r2, r2, #22528	; 0x5800
 80163a2:	4314      	orrs	r4, r2
 80163a4:	056a      	lsls	r2, r5, #21
 80163a6:	601c      	str	r4, [r3, #0]
 80163a8:	d50b      	bpl.n	80163c2 <enet_init+0x16a>
 80163aa:	681a      	ldr	r2, [r3, #0]
 80163ac:	f005 6580 	and.w	r5, r5, #67108864	; 0x4000000
 80163b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80163b4:	601a      	str	r2, [r3, #0]
 80163b6:	4a5d      	ldr	r2, [pc, #372]	; (801652c <enet_init+0x2d4>)
 80163b8:	6993      	ldr	r3, [r2, #24]
 80163ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80163be:	431d      	orrs	r5, r3
 80163c0:	6195      	str	r5, [r2, #24]
 80163c2:	4959      	ldr	r1, [pc, #356]	; (8016528 <enet_init+0x2d0>)
 80163c4:	684b      	ldr	r3, [r1, #4]
 80163c6:	431e      	orrs	r6, r3
 80163c8:	4b59      	ldr	r3, [pc, #356]	; (8016530 <enet_init+0x2d8>)
 80163ca:	604e      	str	r6, [r1, #4]
 80163cc:	681a      	ldr	r2, [r3, #0]
 80163ce:	07d7      	lsls	r7, r2, #31
 80163d0:	d510      	bpl.n	80163f4 <enet_init+0x19c>
 80163d2:	685a      	ldr	r2, [r3, #4]
 80163d4:	680c      	ldr	r4, [r1, #0]
 80163d6:	f002 0080 	and.w	r0, r2, #128	; 0x80
 80163da:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 80163de:	4320      	orrs	r0, r4
 80163e0:	6008      	str	r0, [r1, #0]
 80163e2:	4852      	ldr	r0, [pc, #328]	; (801652c <enet_init+0x2d4>)
 80163e4:	0892      	lsrs	r2, r2, #2
 80163e6:	6981      	ldr	r1, [r0, #24]
 80163e8:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 80163ec:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80163f0:	430a      	orrs	r2, r1
 80163f2:	6182      	str	r2, [r0, #24]
 80163f4:	681a      	ldr	r2, [r3, #0]
 80163f6:	0796      	lsls	r6, r2, #30
 80163f8:	d508      	bpl.n	801640c <enet_init+0x1b4>
 80163fa:	494c      	ldr	r1, [pc, #304]	; (801652c <enet_init+0x2d4>)
 80163fc:	6898      	ldr	r0, [r3, #8]
 80163fe:	680a      	ldr	r2, [r1, #0]
 8016400:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8016404:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8016408:	4302      	orrs	r2, r0
 801640a:	600a      	str	r2, [r1, #0]
 801640c:	681a      	ldr	r2, [r3, #0]
 801640e:	0755      	lsls	r5, r2, #29
 8016410:	d508      	bpl.n	8016424 <enet_init+0x1cc>
 8016412:	4946      	ldr	r1, [pc, #280]	; (801652c <enet_init+0x2d4>)
 8016414:	68d8      	ldr	r0, [r3, #12]
 8016416:	680a      	ldr	r2, [r1, #0]
 8016418:	f422 027e 	bic.w	r2, r2, #16646144	; 0xfe0000
 801641c:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8016420:	4302      	orrs	r2, r0
 8016422:	600a      	str	r2, [r1, #0]
 8016424:	681a      	ldr	r2, [r3, #0]
 8016426:	0714      	lsls	r4, r2, #28
 8016428:	d508      	bpl.n	801643c <enet_init+0x1e4>
 801642a:	4940      	ldr	r1, [pc, #256]	; (801652c <enet_init+0x2d4>)
 801642c:	6918      	ldr	r0, [r3, #16]
 801642e:	680a      	ldr	r2, [r1, #0]
 8016430:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8016434:	f022 0202 	bic.w	r2, r2, #2
 8016438:	4302      	orrs	r2, r0
 801643a:	600a      	str	r2, [r1, #0]
 801643c:	681a      	ldr	r2, [r3, #0]
 801643e:	06d0      	lsls	r0, r2, #27
 8016440:	d506      	bpl.n	8016450 <enet_init+0x1f8>
 8016442:	493a      	ldr	r1, [pc, #232]	; (801652c <enet_init+0x2d4>)
 8016444:	4a3b      	ldr	r2, [pc, #236]	; (8016534 <enet_init+0x2dc>)
 8016446:	6988      	ldr	r0, [r1, #24]
 8016448:	4002      	ands	r2, r0
 801644a:	6958      	ldr	r0, [r3, #20]
 801644c:	4302      	orrs	r2, r0
 801644e:	618a      	str	r2, [r1, #24]
 8016450:	681a      	ldr	r2, [r3, #0]
 8016452:	0691      	lsls	r1, r2, #26
 8016454:	d508      	bpl.n	8016468 <enet_init+0x210>
 8016456:	4935      	ldr	r1, [pc, #212]	; (801652c <enet_init+0x2d4>)
 8016458:	6998      	ldr	r0, [r3, #24]
 801645a:	698a      	ldr	r2, [r1, #24]
 801645c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8016460:	f022 0204 	bic.w	r2, r2, #4
 8016464:	4302      	orrs	r2, r0
 8016466:	618a      	str	r2, [r1, #24]
 8016468:	681a      	ldr	r2, [r3, #0]
 801646a:	0652      	lsls	r2, r2, #25
 801646c:	d506      	bpl.n	801647c <enet_init+0x224>
 801646e:	492e      	ldr	r1, [pc, #184]	; (8016528 <enet_init+0x2d0>)
 8016470:	69d8      	ldr	r0, [r3, #28]
 8016472:	69ca      	ldr	r2, [r1, #28]
 8016474:	0c52      	lsrs	r2, r2, #17
 8016476:	0452      	lsls	r2, r2, #17
 8016478:	4302      	orrs	r2, r0
 801647a:	61ca      	str	r2, [r1, #28]
 801647c:	681a      	ldr	r2, [r3, #0]
 801647e:	0617      	lsls	r7, r2, #24
 8016480:	d517      	bpl.n	80164b2 <enet_init+0x25a>
 8016482:	4c29      	ldr	r4, [pc, #164]	; (8016528 <enet_init+0x2d0>)
 8016484:	6a1a      	ldr	r2, [r3, #32]
 8016486:	69a0      	ldr	r0, [r4, #24]
 8016488:	f422 417f 	bic.w	r1, r2, #65280	; 0xff00
 801648c:	f020 00be 	bic.w	r0, r0, #190	; 0xbe
 8016490:	0400      	lsls	r0, r0, #16
 8016492:	0c00      	lsrs	r0, r0, #16
 8016494:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8016498:	4301      	orrs	r1, r0
 801649a:	4824      	ldr	r0, [pc, #144]	; (801652c <enet_init+0x2d4>)
 801649c:	61a1      	str	r1, [r4, #24]
 801649e:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 80164a2:	0a12      	lsrs	r2, r2, #8
 80164a4:	f021 0177 	bic.w	r1, r1, #119	; 0x77
 80164a8:	f002 0277 	and.w	r2, r2, #119	; 0x77
 80164ac:	430a      	orrs	r2, r1
 80164ae:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 80164b2:	681a      	ldr	r2, [r3, #0]
 80164b4:	05d6      	lsls	r6, r2, #23
 80164b6:	bf42      	ittt	mi
 80164b8:	6a59      	ldrmi	r1, [r3, #36]	; 0x24
 80164ba:	4a1b      	ldrmi	r2, [pc, #108]	; (8016528 <enet_init+0x2d0>)
 80164bc:	6091      	strmi	r1, [r2, #8]
 80164be:	681a      	ldr	r2, [r3, #0]
 80164c0:	0595      	lsls	r5, r2, #22
 80164c2:	bf42      	ittt	mi
 80164c4:	4a18      	ldrmi	r2, [pc, #96]	; (8016528 <enet_init+0x2d0>)
 80164c6:	6a99      	ldrmi	r1, [r3, #40]	; 0x28
 80164c8:	60d1      	strmi	r1, [r2, #12]
 80164ca:	681a      	ldr	r2, [r3, #0]
 80164cc:	0554      	lsls	r4, r2, #21
 80164ce:	d508      	bpl.n	80164e2 <enet_init+0x28a>
 80164d0:	4915      	ldr	r1, [pc, #84]	; (8016528 <enet_init+0x2d0>)
 80164d2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80164d4:	684a      	ldr	r2, [r1, #4]
 80164d6:	f422 62fb 	bic.w	r2, r2, #2008	; 0x7d8
 80164da:	f022 0206 	bic.w	r2, r2, #6
 80164de:	4302      	orrs	r2, r0
 80164e0:	604a      	str	r2, [r1, #4]
 80164e2:	681a      	ldr	r2, [r3, #0]
 80164e4:	0510      	lsls	r0, r2, #20
 80164e6:	d508      	bpl.n	80164fa <enet_init+0x2a2>
 80164e8:	490f      	ldr	r1, [pc, #60]	; (8016528 <enet_init+0x2d0>)
 80164ea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80164ec:	680a      	ldr	r2, [r1, #0]
 80164ee:	f422 3291 	bic.w	r2, r2, #74240	; 0x12200
 80164f2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80164f6:	4302      	orrs	r2, r0
 80164f8:	600a      	str	r2, [r1, #0]
 80164fa:	681a      	ldr	r2, [r3, #0]
 80164fc:	04d1      	lsls	r1, r2, #19
 80164fe:	d506      	bpl.n	801650e <enet_init+0x2b6>
 8016500:	4909      	ldr	r1, [pc, #36]	; (8016528 <enet_init+0x2d0>)
 8016502:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8016504:	680a      	ldr	r2, [r1, #0]
 8016506:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 801650a:	4302      	orrs	r2, r0
 801650c:	600a      	str	r2, [r1, #0]
 801650e:	681a      	ldr	r2, [r3, #0]
 8016510:	0492      	lsls	r2, r2, #18
 8016512:	d506      	bpl.n	8016522 <enet_init+0x2ca>
 8016514:	4904      	ldr	r1, [pc, #16]	; (8016528 <enet_init+0x2d0>)
 8016516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016518:	680a      	ldr	r2, [r1, #0]
 801651a:	f422 2260 	bic.w	r2, r2, #917504	; 0xe0000
 801651e:	4313      	orrs	r3, r2
 8016520:	600b      	str	r3, [r1, #0]
 8016522:	2001      	movs	r0, #1
 8016524:	e6e3      	b.n	80162ee <enet_init+0x96>
 8016526:	bf00      	nop
 8016528:	40028000 	andmi	r8, r2, r0
 801652c:	40029000 	andmi	r9, r2, r0
 8016530:	200109f8 	strdcs	r0, [r1], -r8
 8016534:	fdde3fe7 	ldc2l	15, cr3, [lr, #924]	; 0x39c

08016538 <enet_txfifo_flush>:
 8016538:	4b06      	ldr	r3, [pc, #24]	; (8016554 <enet_txfifo_flush+0x1c>)
 801653a:	4807      	ldr	r0, [pc, #28]	; (8016558 <enet_txfifo_flush+0x20>)
 801653c:	699a      	ldr	r2, [r3, #24]
 801653e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8016542:	619a      	str	r2, [r3, #24]
 8016544:	699a      	ldr	r2, [r3, #24]
 8016546:	02d2      	lsls	r2, r2, #11
 8016548:	d502      	bpl.n	8016550 <enet_txfifo_flush+0x18>
 801654a:	3801      	subs	r0, #1
 801654c:	d1fa      	bne.n	8016544 <enet_txfifo_flush+0xc>
 801654e:	4770      	bx	lr
 8016550:	2001      	movs	r0, #1
 8016552:	4770      	bx	lr
 8016554:	40029000 	andmi	r9, r2, r0
 8016558:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

0801655c <enet_tx_enable>:
 801655c:	4a06      	ldr	r2, [pc, #24]	; (8016578 <enet_tx_enable+0x1c>)
 801655e:	b508      	push	{r3, lr}
 8016560:	6813      	ldr	r3, [r2, #0]
 8016562:	f043 0308 	orr.w	r3, r3, #8
 8016566:	6013      	str	r3, [r2, #0]
 8016568:	f7ff ffe6 	bl	8016538 <enet_txfifo_flush>
 801656c:	4a03      	ldr	r2, [pc, #12]	; (801657c <enet_tx_enable+0x20>)
 801656e:	6993      	ldr	r3, [r2, #24]
 8016570:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016574:	6193      	str	r3, [r2, #24]
 8016576:	bd08      	pop	{r3, pc}
 8016578:	40028000 	andmi	r8, r2, r0
 801657c:	40029000 	andmi	r9, r2, r0

08016580 <enet_enable>:
 8016580:	b508      	push	{r3, lr}
 8016582:	f7ff ffeb 	bl	801655c <enet_tx_enable>
 8016586:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801658a:	f7ff bdcf 	b.w	801612c <enet_rx_enable>

0801658e <enet_desc_information_get>:
 801658e:	2905      	cmp	r1, #5
 8016590:	d817      	bhi.n	80165c2 <enet_desc_information_get+0x34>
 8016592:	e8df f001 	tbb	[pc, r1]
 8016596:	03091012 	movweq	r1, #36882	; 0x9012
 801659a:	68401007 	stmdavs	r0, {r0, r1, r2, ip}^
 801659e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80165a2:	4770      	bx	lr
 80165a4:	88c0      	ldrh	r0, [r0, #6]
 80165a6:	e7fa      	b.n	801659e <enet_desc_information_get+0x10>
 80165a8:	8840      	ldrh	r0, [r0, #2]
 80165aa:	f3c0 000d 	ubfx	r0, r0, #0, #14
 80165ae:	2804      	cmp	r0, #4
 80165b0:	d90a      	bls.n	80165c8 <enet_desc_information_get+0x3a>
 80165b2:	3804      	subs	r0, #4
 80165b4:	4770      	bx	lr
 80165b6:	6880      	ldr	r0, [r0, #8]
 80165b8:	4770      	bx	lr
 80165ba:	6800      	ldr	r0, [r0, #0]
 80165bc:	f3c0 00c3 	ubfx	r0, r0, #3, #4
 80165c0:	4770      	bx	lr
 80165c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80165c6:	4770      	bx	lr
 80165c8:	2000      	movs	r0, #0
 80165ca:	4770      	bx	lr

080165cc <enet_rxframe_drop>:
 80165cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80165d0:	4814      	ldr	r0, [pc, #80]	; (8016624 <enet_rxframe_drop+0x58>)
 80165d2:	b510      	push	{r4, lr}
 80165d4:	6802      	ldr	r2, [r0, #0]
 80165d6:	4914      	ldr	r1, [pc, #80]	; (8016628 <enet_rxframe_drop+0x5c>)
 80165d8:	6854      	ldr	r4, [r2, #4]
 80165da:	6013      	str	r3, [r2, #0]
 80165dc:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 80165e0:	680b      	ldr	r3, [r1, #0]
 80165e2:	d009      	beq.n	80165f8 <enet_rxframe_drop+0x2c>
 80165e4:	b12b      	cbz	r3, 80165f2 <enet_rxframe_drop+0x26>
 80165e6:	68da      	ldr	r2, [r3, #12]
 80165e8:	6002      	str	r2, [r0, #0]
 80165ea:	681a      	ldr	r2, [r3, #0]
 80165ec:	b1ba      	cbz	r2, 801661e <enet_rxframe_drop+0x52>
 80165ee:	600a      	str	r2, [r1, #0]
 80165f0:	bd10      	pop	{r4, pc}
 80165f2:	68d3      	ldr	r3, [r2, #12]
 80165f4:	6003      	str	r3, [r0, #0]
 80165f6:	e7fb      	b.n	80165f0 <enet_rxframe_drop+0x24>
 80165f8:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80165fc:	4c0b      	ldr	r4, [pc, #44]	; (801662c <enet_rxframe_drop+0x60>)
 80165fe:	d006      	beq.n	801660e <enet_rxframe_drop+0x42>
 8016600:	68e2      	ldr	r2, [r4, #12]
 8016602:	6002      	str	r2, [r0, #0]
 8016604:	2b00      	cmp	r3, #0
 8016606:	d0f3      	beq.n	80165f0 <enet_rxframe_drop+0x24>
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	600b      	str	r3, [r1, #0]
 801660c:	e7f0      	b.n	80165f0 <enet_rxframe_drop+0x24>
 801660e:	6824      	ldr	r4, [r4, #0]
 8016610:	3210      	adds	r2, #16
 8016612:	f3c4 0484 	ubfx	r4, r4, #2, #5
 8016616:	4422      	add	r2, r4
 8016618:	6002      	str	r2, [r0, #0]
 801661a:	2b00      	cmp	r3, #0
 801661c:	d0e8      	beq.n	80165f0 <enet_rxframe_drop+0x24>
 801661e:	3310      	adds	r3, #16
 8016620:	e7f3      	b.n	801660a <enet_rxframe_drop+0x3e>
 8016622:	bf00      	nop
 8016624:	200109f0 	strdcs	r0, [r1], -r0	; <UNPREDICTABLE>
 8016628:	200109e8 	andcs	r0, r1, r8, ror #19
 801662c:	40029000 	andmi	r9, r2, r0

08016630 <enet_rxframe_size_get>:
 8016630:	b508      	push	{r3, lr}
 8016632:	4b0c      	ldr	r3, [pc, #48]	; (8016664 <enet_rxframe_size_get+0x34>)
 8016634:	681b      	ldr	r3, [r3, #0]
 8016636:	6818      	ldr	r0, [r3, #0]
 8016638:	2800      	cmp	r0, #0
 801663a:	db10      	blt.n	801665e <enet_rxframe_size_get+0x2e>
 801663c:	f400 4303 	and.w	r3, r0, #33536	; 0x8300
 8016640:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016644:	d003      	beq.n	801664e <enet_rxframe_size_get+0x1e>
 8016646:	f7ff ffc1 	bl	80165cc <enet_rxframe_drop>
 801664a:	2001      	movs	r0, #1
 801664c:	bd08      	pop	{r3, pc}
 801664e:	f000 0321 	and.w	r3, r0, #33	; 0x21
 8016652:	2b21      	cmp	r3, #33	; 0x21
 8016654:	d0f7      	beq.n	8016646 <enet_rxframe_size_get+0x16>
 8016656:	f3c0 400d 	ubfx	r0, r0, #16, #14
 801665a:	3804      	subs	r0, #4
 801665c:	e7f6      	b.n	801664c <enet_rxframe_size_get+0x1c>
 801665e:	2000      	movs	r0, #0
 8016660:	e7f4      	b.n	801664c <enet_rxframe_size_get+0x1c>
 8016662:	bf00      	nop
 8016664:	200109f0 	strdcs	r0, [r1], -r0	; <UNPREDICTABLE>

08016668 <enet_initpara_reset>:
 8016668:	2200      	movs	r2, #0
 801666a:	4b08      	ldr	r3, [pc, #32]	; (801668c <enet_initpara_reset+0x24>)
 801666c:	e9c3 2200 	strd	r2, r2, [r3]
 8016670:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8016674:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8016678:	e9c3 2206 	strd	r2, r2, [r3, #24]
 801667c:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8016680:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 8016684:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
 8016688:	639a      	str	r2, [r3, #56]	; 0x38
 801668a:	4770      	bx	lr
 801668c:	200109f8 	strdcs	r0, [r1], -r8

08016690 <enet_deinit>:
 8016690:	b508      	push	{r3, lr}
 8016692:	f640 200e 	movw	r0, #2574	; 0xa0e
 8016696:	f7fe fc06 	bl	8014ea6 <rcu_periph_reset_enable>
 801669a:	f640 200e 	movw	r0, #2574	; 0xa0e
 801669e:	f7fe fc04 	bl	8014eaa <rcu_periph_reset_disable>
 80166a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80166a6:	f7ff bfdf 	b.w	8016668 <enet_initpara_reset>
	...

080166ac <i2c_clock_config>:
 80166ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166ae:	4605      	mov	r5, r0
 80166b0:	2002      	movs	r0, #2
 80166b2:	460c      	mov	r4, r1
 80166b4:	4617      	mov	r7, r2
 80166b6:	f7fe fcb1 	bl	801501c <rcu_clock_freq_get>
 80166ba:	4603      	mov	r3, r0
 80166bc:	4828      	ldr	r0, [pc, #160]	; (8016760 <i2c_clock_config+0xb4>)
 80166be:	4a29      	ldr	r2, [pc, #164]	; (8016764 <i2c_clock_config+0xb8>)
 80166c0:	fbb3 f0f0 	udiv	r0, r3, r0
 80166c4:	4293      	cmp	r3, r2
 80166c6:	bf34      	ite	cc
 80166c8:	4601      	movcc	r1, r0
 80166ca:	2136      	movcs	r1, #54	; 0x36
 80166cc:	686e      	ldr	r6, [r5, #4]
 80166ce:	4a26      	ldr	r2, [pc, #152]	; (8016768 <i2c_clock_config+0xbc>)
 80166d0:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 80166d4:	430e      	orrs	r6, r1
 80166d6:	4294      	cmp	r4, r2
 80166d8:	606e      	str	r6, [r5, #4]
 80166da:	d816      	bhi.n	801670a <i2c_clock_config+0x5e>
 80166dc:	3001      	adds	r0, #1
 80166de:	2835      	cmp	r0, #53	; 0x35
 80166e0:	d90d      	bls.n	80166fe <i2c_clock_config+0x52>
 80166e2:	2236      	movs	r2, #54	; 0x36
 80166e4:	622a      	str	r2, [r5, #32]
 80166e6:	0064      	lsls	r4, r4, #1
 80166e8:	fbb3 f4f4 	udiv	r4, r3, r4
 80166ec:	2c04      	cmp	r4, #4
 80166ee:	bf38      	it	cc
 80166f0:	2404      	movcc	r4, #4
 80166f2:	69ea      	ldr	r2, [r5, #28]
 80166f4:	f3c4 040b 	ubfx	r4, r4, #0, #12
 80166f8:	4314      	orrs	r4, r2
 80166fa:	61ec      	str	r4, [r5, #28]
 80166fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80166fe:	2802      	cmp	r0, #2
 8016700:	d801      	bhi.n	8016706 <i2c_clock_config+0x5a>
 8016702:	2202      	movs	r2, #2
 8016704:	e7ee      	b.n	80166e4 <i2c_clock_config+0x38>
 8016706:	6228      	str	r0, [r5, #32]
 8016708:	e7ed      	b.n	80166e6 <i2c_clock_config+0x3a>
 801670a:	4a18      	ldr	r2, [pc, #96]	; (801676c <i2c_clock_config+0xc0>)
 801670c:	4294      	cmp	r4, r2
 801670e:	d8f5      	bhi.n	80166fc <i2c_clock_config+0x50>
 8016710:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8016714:	4351      	muls	r1, r2
 8016716:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801671a:	fbb1 f1f2 	udiv	r1, r1, r2
 801671e:	3101      	adds	r1, #1
 8016720:	6229      	str	r1, [r5, #32]
 8016722:	b9a7      	cbnz	r7, 801674e <i2c_clock_config+0xa2>
 8016724:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016728:	fbb3 f4f4 	udiv	r4, r3, r4
 801672c:	69eb      	ldr	r3, [r5, #28]
 801672e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8016732:	61eb      	str	r3, [r5, #28]
 8016734:	f3c4 030b 	ubfx	r3, r4, #0, #12
 8016738:	b90b      	cbnz	r3, 801673e <i2c_clock_config+0x92>
 801673a:	f044 0401 	orr.w	r4, r4, #1
 801673e:	69eb      	ldr	r3, [r5, #28]
 8016740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8016744:	61eb      	str	r3, [r5, #28]
 8016746:	69eb      	ldr	r3, [r5, #28]
 8016748:	4323      	orrs	r3, r4
 801674a:	61eb      	str	r3, [r5, #28]
 801674c:	e7d6      	b.n	80166fc <i2c_clock_config+0x50>
 801674e:	2219      	movs	r2, #25
 8016750:	4354      	muls	r4, r2
 8016752:	fbb3 f4f4 	udiv	r4, r3, r4
 8016756:	69eb      	ldr	r3, [r5, #28]
 8016758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801675c:	e7e9      	b.n	8016732 <i2c_clock_config+0x86>
 801675e:	bf00      	nop
 8016760:	000f4240 	andeq	r4, pc, r0, asr #4
 8016764:	0337f980 	teqeq	r7, #128, 18	; 0x200000	; <UNPREDICTABLE>
 8016768:	000186a0 	andeq	r8, r1, r0, lsr #13
 801676c:	00061a80 	andeq	r1, r6, r0, lsl #21

08016770 <i2c_ack_config>:
 8016770:	6803      	ldr	r3, [r0, #0]
 8016772:	2901      	cmp	r1, #1
 8016774:	bf0c      	ite	eq
 8016776:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
 801677a:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 801677e:	6003      	str	r3, [r0, #0]
 8016780:	4770      	bx	lr

08016782 <i2c_ackpos_config>:
 8016782:	6803      	ldr	r3, [r0, #0]
 8016784:	b919      	cbnz	r1, 801678e <i2c_ackpos_config+0xc>
 8016786:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801678a:	6003      	str	r3, [r0, #0]
 801678c:	4770      	bx	lr
 801678e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016792:	e7fa      	b.n	801678a <i2c_ackpos_config+0x8>

08016794 <i2c_master_addressing>:
 8016794:	3202      	adds	r2, #2
 8016796:	bf0c      	ite	eq
 8016798:	f021 0101 	biceq.w	r1, r1, #1
 801679c:	f041 0101 	orrne.w	r1, r1, #1
 80167a0:	6101      	str	r1, [r0, #16]
 80167a2:	4770      	bx	lr

080167a4 <i2c_enable>:
 80167a4:	6803      	ldr	r3, [r0, #0]
 80167a6:	f043 0301 	orr.w	r3, r3, #1
 80167aa:	6003      	str	r3, [r0, #0]
 80167ac:	4770      	bx	lr

080167ae <i2c_start_on_bus>:
 80167ae:	6803      	ldr	r3, [r0, #0]
 80167b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80167b4:	6003      	str	r3, [r0, #0]
 80167b6:	4770      	bx	lr

080167b8 <i2c_stop_on_bus>:
 80167b8:	6803      	ldr	r3, [r0, #0]
 80167ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80167be:	6003      	str	r3, [r0, #0]
 80167c0:	4770      	bx	lr

080167c2 <i2c_data_transmit>:
 80167c2:	6101      	str	r1, [r0, #16]
 80167c4:	4770      	bx	lr

080167c6 <i2c_data_receive>:
 80167c6:	6900      	ldr	r0, [r0, #16]
 80167c8:	b2c0      	uxtb	r0, r0
 80167ca:	4770      	bx	lr

080167cc <i2c_flag_get>:
 80167cc:	098b      	lsrs	r3, r1, #6
 80167ce:	581a      	ldr	r2, [r3, r0]
 80167d0:	2301      	movs	r3, #1
 80167d2:	f001 011f 	and.w	r1, r1, #31
 80167d6:	408b      	lsls	r3, r1
 80167d8:	4213      	tst	r3, r2
 80167da:	bf14      	ite	ne
 80167dc:	2001      	movne	r0, #1
 80167de:	2000      	moveq	r0, #0
 80167e0:	4770      	bx	lr

080167e2 <i2c_flag_clear>:
 80167e2:	f240 5301 	movw	r3, #1281	; 0x501
 80167e6:	4299      	cmp	r1, r3
 80167e8:	b510      	push	{r4, lr}
 80167ea:	d102      	bne.n	80167f2 <i2c_flag_clear+0x10>
 80167ec:	6943      	ldr	r3, [r0, #20]
 80167ee:	6983      	ldr	r3, [r0, #24]
 80167f0:	bd10      	pop	{r4, pc}
 80167f2:	2201      	movs	r2, #1
 80167f4:	098c      	lsrs	r4, r1, #6
 80167f6:	5823      	ldr	r3, [r4, r0]
 80167f8:	f001 011f 	and.w	r1, r1, #31
 80167fc:	408a      	lsls	r2, r1
 80167fe:	ea23 0302 	bic.w	r3, r3, r2
 8016802:	5023      	str	r3, [r4, r0]
 8016804:	e7f4      	b.n	80167f0 <i2c_flag_clear+0xe>

08016806 <i2s_init>:
 8016806:	b510      	push	{r4, lr}
 8016808:	69c4      	ldr	r4, [r0, #28]
 801680a:	f424 647b 	bic.w	r4, r4, #4016	; 0xfb0
 801680e:	f024 0408 	bic.w	r4, r4, #8
 8016812:	0424      	lsls	r4, r4, #16
 8016814:	0c24      	lsrs	r4, r4, #16
 8016816:	431c      	orrs	r4, r3
 8016818:	4314      	orrs	r4, r2
 801681a:	430c      	orrs	r4, r1
 801681c:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8016820:	61c4      	str	r4, [r0, #28]
 8016822:	bd10      	pop	{r4, pc}

08016824 <i2s_psc_config>:
 8016824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016828:	4698      	mov	r8, r3
 801682a:	2302      	movs	r3, #2
 801682c:	6203      	str	r3, [r0, #32]
 801682e:	4b26      	ldr	r3, [pc, #152]	; (80168c8 <i2s_psc_config+0xa4>)
 8016830:	4617      	mov	r7, r2
 8016832:	4298      	cmp	r0, r3
 8016834:	bf0c      	ite	eq
 8016836:	f44f 3300 	moveq.w	r3, #131072	; 0x20000
 801683a:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 801683e:	4a23      	ldr	r2, [pc, #140]	; (80168cc <i2s_psc_config+0xa8>)
 8016840:	4605      	mov	r5, r0
 8016842:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8016844:	460e      	mov	r6, r1
 8016846:	4018      	ands	r0, r3
 8016848:	d036      	beq.n	80168b8 <i2s_psc_config+0x94>
 801684a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 801684c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8016850:	1f99      	subs	r1, r3, #6
 8016852:	2908      	cmp	r1, #8
 8016854:	d82c      	bhi.n	80168b0 <i2s_psc_config+0x8c>
 8016856:	3302      	adds	r3, #2
 8016858:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801685a:	481d      	ldr	r0, [pc, #116]	; (80168d0 <i2s_psc_config+0xac>)
 801685c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8016860:	3201      	adds	r2, #1
 8016862:	fbb0 f0f2 	udiv	r0, r0, r2
 8016866:	4358      	muls	r0, r3
 8016868:	0040      	lsls	r0, r0, #1
 801686a:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
 801686e:	f04f 030a 	mov.w	r3, #10
 8016872:	d124      	bne.n	80168be <i2s_psc_config+0x9a>
 8016874:	0a04      	lsrs	r4, r0, #8
 8016876:	435c      	muls	r4, r3
 8016878:	fbb4 f6f6 	udiv	r6, r4, r6
 801687c:	230a      	movs	r3, #10
 801687e:	3605      	adds	r6, #5
 8016880:	fbb6 f6f3 	udiv	r6, r6, r3
 8016884:	f006 0301 	and.w	r3, r6, #1
 8016888:	0876      	lsrs	r6, r6, #1
 801688a:	1eb2      	subs	r2, r6, #2
 801688c:	2afd      	cmp	r2, #253	; 0xfd
 801688e:	bf86      	itte	hi
 8016890:	2300      	movhi	r3, #0
 8016892:	2602      	movhi	r6, #2
 8016894:	021b      	lslls	r3, r3, #8
 8016896:	431e      	orrs	r6, r3
 8016898:	ea46 0608 	orr.w	r6, r6, r8
 801689c:	622e      	str	r6, [r5, #32]
 801689e:	69eb      	ldr	r3, [r5, #28]
 80168a0:	f023 0307 	bic.w	r3, r3, #7
 80168a4:	61eb      	str	r3, [r5, #28]
 80168a6:	69eb      	ldr	r3, [r5, #28]
 80168a8:	433b      	orrs	r3, r7
 80168aa:	61eb      	str	r3, [r5, #28]
 80168ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168b0:	2b0f      	cmp	r3, #15
 80168b2:	bf08      	it	eq
 80168b4:	2314      	moveq	r3, #20
 80168b6:	e7cf      	b.n	8016858 <i2s_psc_config+0x34>
 80168b8:	f7fe fbb0 	bl	801501c <rcu_clock_freq_get>
 80168bc:	e7d5      	b.n	801686a <i2s_psc_config+0x46>
 80168be:	b90f      	cbnz	r7, 80168c4 <i2s_psc_config+0xa0>
 80168c0:	0944      	lsrs	r4, r0, #5
 80168c2:	e7d8      	b.n	8016876 <i2s_psc_config+0x52>
 80168c4:	0984      	lsrs	r4, r0, #6
 80168c6:	e7d6      	b.n	8016876 <i2s_psc_config+0x52>
 80168c8:	40003800 	andmi	r3, r0, r0, lsl #16
 80168cc:	40021000 	andmi	r1, r2, r0
 80168d0:	017d7840 	cmneq	sp, r0, asr #16

080168d4 <i2s_enable>:
 80168d4:	69c3      	ldr	r3, [r0, #28]
 80168d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80168da:	61c3      	str	r3, [r0, #28]
 80168dc:	4770      	bx	lr

080168de <i2s_disable>:
 80168de:	69c3      	ldr	r3, [r0, #28]
 80168e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80168e4:	61c3      	str	r3, [r0, #28]
 80168e6:	4770      	bx	lr

080168e8 <spi_dma_enable>:
 80168e8:	6843      	ldr	r3, [r0, #4]
 80168ea:	b919      	cbnz	r1, 80168f4 <spi_dma_enable+0xc>
 80168ec:	f043 0302 	orr.w	r3, r3, #2
 80168f0:	6043      	str	r3, [r0, #4]
 80168f2:	4770      	bx	lr
 80168f4:	f043 0301 	orr.w	r3, r3, #1
 80168f8:	e7fa      	b.n	80168f0 <spi_dma_enable+0x8>
	...

080168fc <__popcountsi2>:
 80168fc:	0843      	lsrs	r3, r0, #1
 80168fe:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8016902:	1ac0      	subs	r0, r0, r3
 8016904:	0883      	lsrs	r3, r0, #2
 8016906:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 801690a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 801690e:	4418      	add	r0, r3
 8016910:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8016914:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8016918:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 801691c:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8016920:	0e00      	lsrs	r0, r0, #24
 8016922:	4770      	bx	lr

Disassembly of section .rodata:

08016924 <vtable for DisplayHandler-0xd8>:
 8016924:	00000003 	andeq	r0, r0, r3
 8016928:	000000aa 	andeq	r0, r0, sl, lsr #1
 801692c:	00000006 	andeq	r0, r0, r6
 8016930:	00000000 	andeq	r0, r0, r0
 8016934:	01ff0000 	mvnseq	r0, r0
 8016938:	00000001 	andeq	r0, r0, r1
 801693c:	00000001 	andeq	r0, r0, r1
 8016940:	00000001 	andeq	r0, r0, r1
 8016944:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016948:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 8016954:	03020100 	movweq	r0, #8448	; 0x2100
 8016958:	08070604 	stmdaeq	r7, {r2, r9, sl}
 801695c:	00000009 	andeq	r0, r0, r9
 8016960:	03020100 	movweq	r0, #8448	; 0x2100
 8016964:	3a732504 	bcc	9cdfd7c <__exidx_end+0x1cc6fb0>
 8016968:	31007525 	tstcc	r0, r5, lsr #10
 801696c:	31353a37 	teqcc	r5, r7, lsr sl
 8016970:	0039323a 	eorseq	r3, r9, sl, lsr r2
 8016974:	2072614d 	rsbscs	r6, r2, sp, asr #2
 8016978:	32203931 	eorcc	r3, r0, #802816	; 0xc4000
 801697c:	00323230 	eorseq	r3, r2, r0, lsr r2
 8016980:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016984:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8016988:	5b1b2034 	blpl	86dea60 <__exidx_end+0x6c5c94>
 801698c:	506d3233 	rsbpl	r3, sp, r3, lsr r2
 8016990:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 8016994:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 8016998:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 80167d0 <i2c_flag_get+0x4>
 801699c:	2072656c 	rsbscs	r6, r2, ip, ror #10
 80169a0:	2078317b 	rsbscs	r3, r8, fp, ror r1
 80169a4:	6e552034 	mrcvs	0, 2, r2, cr5, cr4, {1}
 80169a8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 80169ac:	7d736573 	cfldr64vc	mvdx6, [r3, #-460]!	; 0xfffffe34
 80169b0:	37335b1b 			; <UNDEFINED> instruction: 0x37335b1b
 80169b4:	5f2e006d 	svcpl	0x002e006d
 80169b8:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 80169bc:	2e006769 	cdpcs	7, 0, cr6, cr0, cr9, {3}
 80169c0:	7474685f 	ldrbtvc	r6, [r4], #-2143	; 0xfffff7a1
 80169c4:	6f6e0070 	svcvs	0x006e0070
 80169c8:	413d6564 	teqmi	sp, r4, ror #10
 80169cc:	4e2d7472 	mcrmi	4, 1, r7, cr13, cr2, {3}
 80169d0:	34207465 	strtcc	r7, [r0], #-1125	; 0xfffffb9b
 80169d4:	78695020 	stmdavc	r9!, {r5, ip, lr}^
 80169d8:	41006c65 	tstmi	r0, r5, ror #24
 80169dc:	4e2d7472 	mcrmi	4, 1, r7, cr13, cr2, {3}
 80169e0:	34207465 	strtcc	r7, [r0], #-1125	; 0xfffffb9b
 80169e4:	78695020 	stmdavc	r9!, {r5, ip, lr}^
 80169e8:	31206c65 			; <UNDEFINED> instruction: 0x31206c65
 80169ec:	3a732500 	bcc	9cdfdf4 <__exidx_end+0x1cc7028>
 80169f0:	47206425 	strmi	r6, [r0, -r5, lsr #8]!
 80169f4:	25206425 	strcs	r6, [r0, #-1061]!	; 0xfffffbdb
 80169f8:	00000073 	andeq	r0, r0, r3, ror r0

080169fc <vtable for DisplayHandler>:
	...
 8016a04:	08008573 	stmdaeq	r0, {r0, r1, r4, r5, r6, r8, sl, pc}
 8016a08:	080085cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, sl, pc}
 8016a0c:	08008689 	stmdaeq	r0, {r0, r3, r7, r9, sl, pc}

08016a10 <vtable for DisplayUdfHandler>:
	...
 8016a18:	08008575 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8, sl, pc}
 8016a1c:	080085d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, sl, pc}
 8016a20:	08008661 	stmdaeq	r0, {r0, r5, r6, r9, sl, pc}
 8016a24:	08008577 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r8, sl, pc}
 8016a28:	0800864d 	stmdaeq	r0, {r0, r2, r3, r6, r9, sl, pc}
 8016a2c:	08008639 	stmdaeq	r0, {r0, r3, r4, r5, r9, sl, pc}
 8016a30:	08008625 	stmdaeq	r0, {r0, r2, r5, r9, sl, pc}
 8016a34:	08008611 	stmdaeq	r0, {r0, r4, r9, sl, pc}
 8016a38:	080085fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8, sl, pc}

08016a3c <vtable for ArtNetTriggerHandler>:
	...
 8016a44:	08008579 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, sl, pc}
 8016a48:	080085e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, sl, pc}
 8016a4c:	080088dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, fp, pc}

08016a50 <vtable for PixelDmxStartStop>:
	...
 8016a58:	0800857b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r8, sl, pc}
 8016a5c:	080085f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, sl, pc}
 8016a60:	0800857d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, sl, pc}
 8016a64:	0800858d 	stmdaeq	r0, {r0, r2, r3, r7, r8, sl, pc}

08016a68 <vtable for Reboot>:
	...
 8016a70:	0800859d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, sl, pc}
 8016a74:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8016a78:	080085a1 	stmdaeq	r0, {r0, r5, r7, r8, sl, pc}

08016a7c <CSWTCH.68>:
 8016a7c:	444e4f4f 	strbmi	r4, [lr], #-3919	; 0xfffff0b1
 8016a80:	 	eorcc	r3, lr, #-2147483631	; 0x80000011

08016a81 <SOFTWARE_VERSION>:
 8016a81:	00322e31 	eorseq	r2, r2, r1, lsr lr
 8016a85:	6e552020 	cdpvs	0, 5, cr2, cr5, cr0, {1}
 8016a89:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 8016a8d:	20736573 	rsbscs	r6, r3, r3, ror r5
 8016a91:	20657261 	rsbcs	r7, r5, r1, ror #4
 8016a95:	7070616d 	rsbsvc	r6, r0, sp, ror #2
 8016a99:	20646570 	rsbcs	r6, r4, r0, ror r5
 8016a9d:	000a312b 	andeq	r3, sl, fp, lsr #2
 8016aa1:	 	andeq	r0, r0, r0

08016aa4 <vtable for ArtNet4Node>:
	...
 8016aac:	0800975d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, r9, sl, ip, pc}
 8016ab0:	0800984b 	stmdaeq	r0, {r0, r1, r3, r6, fp, ip, pc}
 8016ab4:	08009701 	stmdaeq	r0, {r0, r8, r9, sl, ip, pc}
 8016ab8:	0800977d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, r9, sl, ip, pc}
 8016abc:	0800985d 	stmdaeq	r0, {r0, r2, r3, r4, r6, fp, ip, pc}
 8016ac0:	08009843 	stmdaeq	r0, {r0, r1, r6, fp, ip, pc}

08016ac4 <ArtNetMsgConst::START>:
 8016ac4:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
 8016ac8:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 8016acc:	74724120 	ldrbtvc	r4, [r2], #-288	; 0xfffffee0
 8016ad0:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
	...

08016ad5 <ArtNetMsgConst::PARAMS>:
 8016ad5:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 8016ad9:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 8016add:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8016ae1:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016ae5:	0074654e 	rsbseq	r6, r4, lr, asr #10

08016ae9 <ArtNetMsgConst::STARTED>:
 8016ae9:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016aed:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8016af1:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8016af5:	00646574 	rsbeq	r6, r4, r4, ror r5
 8016af9:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 8016afd:	37303146 	ldrcc	r3, [r0, -r6, asr #2]!
 8016b01:	73250052 			; <UNDEFINED> instruction: 0x73250052
 8016b05:	20732520 	rsbscs	r2, r3, r0, lsr #10
 8016b09:	25206425 	strcs	r6, [r0, #-1061]!	; 0xfffffbdb
 8016b0d:	74680073 	strbtvc	r0, [r8], #-115	; 0xffffff8d
 8016b11:	2f3a7074 	svccs	0x003a7074
 8016b15:	3364672f 	cmncc	r4, #12320768	; 0xbc0000
 8016b19:	6d642d32 	stclvs	13, cr2, [r4, #-200]!	; 0xffffff38
 8016b1d:	726f2e78 	rsbvc	r2, pc, #120, 28	; 0x780
 8016b21:	6d450067 	stclvs	0, cr0, [r5, #-412]	; 0xfffffe64
 8016b25:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
 8016b29:	 	tstmi	r0, r5, ror #8

08016b2c <artnet::NODE_ID>:
 8016b2c:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016b30:	0074654e 	rsbseq	r6, r4, lr, asr #10

08016b34 <defaults::SHORT_NAME>:
 8016b34:	20567641 	subscs	r7, r6, r1, asr #12
 8016b38:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016b3c:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8016b40:	65646f4e 	strbvs	r6, [r4, #-3918]!	; 0xfffff0b2
	...

08016b45 <artnet::NODE_ID>:
 8016b45:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016b49:	0074654e 	rsbseq	r6, r4, lr, asr #10
 8016b4d:	78343025 	ldmdavc	r4!, {r0, r2, r5, ip, sp}
 8016b51:	30255b20 	eorcc	r5, r5, r0, lsr #22
 8016b55:	205d6434 	subscs	r6, sp, r4, lsr r4
 8016b59:	41207325 			; <UNDEFINED> instruction: 0x41207325
 8016b5d:	 	tstmi	r0, r6, ror r6

08016b60 <artnet::NODE_ID>:
 8016b60:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016b64:	0074654e 	rsbseq	r6, r4, lr, asr #10
 8016b68:	52206f4e 	eorpl	r6, r0, #312	; 0x138
 8016b6c:	72204d44 	eorvc	r4, r0, #68, 26	; 0x1100
 8016b70:	6f707365 	svcvs	0x00707365
 8016b74:	0a65736e 	beq	9973934 <__exidx_end+0x195ab68>
 8016b78:	50544800 	subspl	r4, r4, r0, lsl #16
 8016b7c:	50544c00 	subspl	r4, r4, r0, lsl #24
 8016b80:	74724100 	ldrbtvc	r4, [r2], #-256	; 0xffffff00
 8016b84:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
 8016b88:	43417300 	movtmi	r7, #4864	; 0x1300
 8016b8c:	6f4e004e 	svcvs	0x004e004e
 8016b90:	25206564 	strcs	r6, [r0, #-1380]!	; 0xfffffa9c
 8016b94:	255b2064 	ldrbcs	r2, [fp, #-100]	; 0xffffff9c
 8016b98:	000a5d75 	andeq	r5, sl, r5, ror sp
 8016b9c:	72694620 	rsbvc	r4, r9, #32, 12	; 0x2000000
 8016ba0:	7261776d 	rsbvc	r7, r1, #28573696	; 0x1b40000
 8016ba4:	20202065 	eorcs	r2, r0, r5, rrx
 8016ba8:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8016bac:	0a64252e 	beq	992006c <__exidx_end+0x19072a0>
 8016bb0:	68532000 	ldmdavs	r3, {sp}^
 8016bb4:	2074726f 	rsbscs	r7, r4, pc, ror #4
 8016bb8:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 8016bbc:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8016bc0:	20000a73 	andcs	r0, r0, r3, ror sl
 8016bc4:	676e6f4c 	strbvs	r6, [lr, -ip, asr #30]!
 8016bc8:	6d616e20 	stclvs	14, cr6, [r1, #-128]!	; 0xffffff80
 8016bcc:	3a202065 	bcc	881ed68 <__exidx_end+0x805f9c>
 8016bd0:	0a732520 	beq	9ce0058 <__exidx_end+0x1cc728c>
 8016bd4:	754f2000 	strbvc	r2, [pc, #-0]	; 8016bdc <artnet::NODE_ID+0x7c>
 8016bd8:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
 8016bdc:	2020000a 	eorcs	r0, r0, sl
 8016be0:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
 8016be4:	64322520 	ldrtvs	r2, [r2], #-1312	; 0xfffffae0
 8016be8:	3a642520 	bcc	9920070 <__exidx_end+0x19072a4>
 8016bec:	322d255b 	eorcc	r2, sp, #381681664	; 0x16c00000
 8016bf0:	2d253a64 	vstmdbcs	r5!, {s6-s105}
 8016bf4:	253a6432 	ldrcs	r6, [sl, #-1074]!	; 0xfffffbce
 8016bf8:	5d64322d 	sfmpl	f3, 2, [r4, #-180]!	; 0xffffff4c
 8016bfc:	7534253a 	ldrvc	r2, [r4, #-1338]!	; 0xfffffac6
 8016c00:	73255b20 			; <UNDEFINED> instruction: 0x73255b20
 8016c04:	7b20005d 	blvc	8816d80 <__exidx_end+0x7fdfb4>
 8016c08:	0a7d7325 	beq	9f738a4 <__exidx_end+0x1f5aad8>
 8016c0c:	6e492000 	cdpvs	0, 4, cr2, cr9, cr0, {0}
 8016c10:	0a747570 	beq	9d341d8 <__exidx_end+0x1d1b40c>
 8016c14:	50202000 	eorpl	r2, r0, r0
 8016c18:	2074726f 	rsbscs	r7, r4, pc, ror #4
 8016c1c:	20643225 	rsbcs	r3, r4, r5, lsr #4
 8016c20:	5b3a6425 	blpl	8eafcbc <__exidx_end+0xe96ef0>
 8016c24:	64322d25 	ldrtvs	r2, [r2], #-3365	; 0xfffff2db
 8016c28:	322d253a 	eorcc	r2, sp, #243269632	; 0xe800000
 8016c2c:	2d253a64 	vstmdbcs	r5!, {s6-s105}
 8016c30:	3a5d6432 	bcc	976fd00 <__exidx_end+0x1756f34>
 8016c34:	20753425 	rsbscs	r3, r5, r5, lsr #8
 8016c38:	25203e2d 	strcs	r3, [r0, #-3629]!	; 0xfffff1d3
 8016c3c:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016c40:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8016c44:	000a6425 	andeq	r6, sl, r5, lsr #8
 8016c48:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8016c4c:	2c64253a 	cfstr64cs	mvdx2, [r4], #-232	; 0xffffff18
 8016c50:	73252300 			; <UNDEFINED> instruction: 0x73252300
 8016c54:	0a64253d 	beq	9920150 <__exidx_end+0x1907384>
 8016c58:	73252200 			; <UNDEFINED> instruction: 0x73252200
 8016c5c:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8016c60:	002c2273 	eoreq	r2, ip, r3, ror r2
 8016c64:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
 8016c68:	000a7325 	andeq	r7, sl, r5, lsr #6
 8016c6c:	6e636173 	mcrvs	1, 3, r6, cr3, cr3, {3}
 8016c70:	706e6900 	rsbvc	r6, lr, r0, lsl #18
 8016c74:	6f007475 	svcvs	0x00007475
 8016c78:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 8016c7c:	746c0074 	strbtvc	r0, [ip], #-116	; 0xffffff8c
 8016c80:	74680070 	strbtvc	r0, [r8], #-112	; 0xffffff90
 8016c84:	72610070 	rsbvc	r0, r1, #112	; 0x70
 8016c88:	74656e74 	strbtvc	r6, [r5], #-3700	; 0xfffff18c
 8016c8c:	6c754d00 	ldclvs	13, cr4, [r5], #-0
 8016c90:	70206974 	eorvc	r6, r0, r4, ror r9
 8016c94:	2074726f 	rsbscs	r7, r4, pc, ror #4
 8016c98:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 8016c9c:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 8016ca0:	6f697461 	svcvs	0x00697461
 8016ca4:	6f4e006e 	svcvs	0x004e006e
 8016ca8:	44006564 	strmi	r6, [r0], #-1380	; 0xfffffa9c
 8016cac:	522f584d 	eorpl	r5, pc, #5046272	; 0x4d0000
 8016cb0:	4f204d44 	svcmi	0x00204d44
 8016cb4:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 8016cb8:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
 8016cbc:	6e492058 	mcrvs	0, 2, r2, cr9, cr8, {2}
 8016cc0:	00747570 	rsbseq	r7, r4, r0, ror r5
 8016cc4:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016cc8:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8016ccc:	 	mcrvs	0, 3, r0, cr5, cr4, {1}

08016cce <ArtNetParamsConst::ENABLE_RDM>:
 8016cce:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8016cd2:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 8016cd6:	 	stcvs	13, cr6, [r0, #-400]	; 0xfffffe70

08016cd9 <ArtNetParamsConst::MAP_UNIVERSE0>:
 8016cd9:	5f70616d 	svcpl	0x0070616d
 8016cdd:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8016ce1:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8016ce5:	 	rsbsvc	r0, r0, #48	; 0x30

08016ce7 <ArtNetParamsConst::PROTOCOL_PORT>:
 8016ce7:	746f7270 	strbtvc	r7, [pc], #-624	; 8016cef <ArtNetParamsConst::PROTOCOL_PORT+0x8>
 8016ceb:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8016b34 <defaults::SHORT_NAME>
 8016cef:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016cf3:	00615f74 	rsbeq	r5, r1, r4, ror pc
 8016cf7:	746f7270 	strbtvc	r7, [pc], #-624	; 8016cff <ArtNetParamsConst::PROTOCOL_PORT+0x18>
 8016cfb:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8016b44 <defaults::SHORT_NAME+0x10>
 8016cff:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016d03:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8016d07:	746f7270 	strbtvc	r7, [pc], #-624	; 8016d0f <ArtNetParamsConst::PROTOCOL_PORT+0x28>
 8016d0b:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8016b54 <artnet::NODE_ID+0xf>
 8016d0f:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016d13:	00635f74 	rsbeq	r5, r3, r4, ror pc
 8016d17:	746f7270 	strbtvc	r7, [pc], #-624	; 8016d1f <ArtNetParamsConst::PROTOCOL_PORT+0x38>
 8016d1b:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8016b64 <artnet::NODE_ID+0x4>
 8016d1f:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016d23:	00645f74 	rsbeq	r5, r4, r4, ror pc

08016d27 <ArtNetParamsConst::NODE_LONG_NAME>:
 8016d27:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 8016d2b:	6d616e5f 	stclvs	14, cr6, [r1, #-380]!	; 0xfffffe84
 8016d2f:	 	strbvs	r0, [pc, #-101]!	; 8016cd2 <ArtNetParamsConst::ENABLE_RDM+0x4>

08016d31 <ArtNetParamsConst::NODE_OEM_VALUE>:
 8016d31:	5f6d656f 	svcpl	0x006d656f
 8016d35:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 8016d39:	 	ldmdavs	r3!, {r0, r2, r5, r6}^

08016d3b <ArtNetParamsConst::NODE_SHORT_NAME>:
 8016d3b:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 8016d3f:	616e5f74 	smcvs	58868	; 0xe5f4
 8016d43:	 	strvs	r6, [r0], #-1389	; 0xfffffa93

08016d46 <ArtNetParamsConst::DESTINATION_IP_PORT>:
 8016d46:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 8016d4a:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 8016d4e:	5f6e6f69 	svcpl	0x006e6f69
 8016d52:	705f7069 	subsvc	r7, pc, r9, rrx
 8016d56:	5f74726f 	svcpl	0x0074726f
 8016d5a:	00000061 	andeq	r0, r0, r1, rrx
 8016d5e:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 8016d62:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 8016d66:	5f6e6f69 	svcpl	0x006e6f69
 8016d6a:	705f7069 	subsvc	r7, pc, r9, rrx
 8016d6e:	5f74726f 	svcpl	0x0074726f
 8016d72:	00000062 	andeq	r0, r0, r2, rrx
 8016d76:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 8016d7a:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 8016d7e:	5f6e6f69 	svcpl	0x006e6f69
 8016d82:	705f7069 	subsvc	r7, pc, r9, rrx
 8016d86:	5f74726f 	svcpl	0x0074726f
 8016d8a:	00000063 	andeq	r0, r0, r3, rrx
 8016d8e:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 8016d92:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 8016d96:	5f6e6f69 	svcpl	0x006e6f69
 8016d9a:	705f7069 	subsvc	r7, pc, r9, rrx
 8016d9e:	5f74726f 	svcpl	0x0074726f
 8016da2:	00000064 	andeq	r0, r0, r4, rrx

08016da6 <ArtNetParamsConst::DISABLE_MERGE_TIMEOUT>:
 8016da6:	61736964 	cmnvs	r3, r4, ror #18
 8016daa:	5f656c62 	svcpl	0x00656c62
 8016dae:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 8016db2:	69745f65 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 8016db6:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8016851 <i2s_psc_config+0x2d>
 8016dba:	 	strbvs	r0, [lr, #-116]!	; 0xffffff8c

08016dbc <ArtNetParamsConst::NODE_NETWORK_DATA_LOSS_TIMEOUT>:
 8016dbc:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 8016dc0:	5f6b726f 	svcpl	0x006b726f
 8016dc4:	61746164 	cmnvs	r4, r4, ror #2
 8016dc8:	736f6c5f 	cmnvc	pc, #24320	; 0x5f00
 8016dcc:	69745f73 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 8016dd0:	756f656d 	strbvc	r6, [pc, #-1389]!	; 801686b <i2s_psc_config+0x47>
 8016dd4:	 	strbvs	r0, [lr, #-116]!	; 0xffffff8c

08016dd6 <ArtNetParamsConst::NET>:
 8016dd6:	0074656e 	rsbseq	r6, r4, lr, ror #10

08016dda <ArtNetParamsConst::SUBNET>:
 8016dda:	6e627573 	mcrvs	5, 3, r7, cr2, cr3, {3}
 8016dde:	 	andvc	r7, r0, r5, ror #8

08016de1 <ArtNetParamsConst::PROTOCOL>:
 8016de1:	746f7270 	strbtvc	r7, [pc], #-624	; 8016de9 <ArtNetParamsConst::PROTOCOL+0x8>
 8016de5:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8016c30 <artnet::NODE_ID+0xd0>
	...

08016dea <ArtNetParamsConst::FILE_NAME>:
 8016dea:	6e747261 	cdpvs	2, 7, cr7, cr4, cr1, {3}
 8016dee:	742e7465 	strtvc	r7, [lr], #-1125	; 0xfffffb9b
 8016df2:	 			; <UNDEFINED> instruction: 0xff007478

08016df5 <ArtNetConst::OEM_ID>:
 8016df5:	 	ldrsheq	pc, [r0], #-255	; 0xffffff01	; <UNPREDICTABLE>

08016df7 <ArtNetConst::ESTA_ID>:
 8016df7:	 			; <UNDEFINED> instruction: 0x36010050

08016df9 <ArtNetConst::VERSION>:
 8016df9:	33323601 	teqcc	r2, #1048576	; 0x100000
 8016dfd:	35322e39 	ldrcc	r2, [r2, #-3641]!	; 0xfffff1c7
 8016e01:	2e302e35 	mrccs	14, 1, r2, cr0, cr5, {1}
 8016e05:	2e250030 	mcrcs	0, 1, r0, cr5, cr0, {1}
 8016e09:	20733834 	rsbscs	r3, r3, r4, lsr r8
 8016e0d:	30007325 	andcc	r7, r0, r5, lsr #6
 8016e11:	6f4e202e 	svcvs	0x004e202e
 8016e15:	73616320 	cmnvc	r1, #32, 6	; 0x80000000
 8016e19:	6d207365 	stcvs	3, cr7, [r0, #-404]!	; 0xfffffe6c
 8016e1d:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
 8016e21:	202c6465 	eorcs	r6, ip, r5, ror #8
 8016e25:	73696874 	cmnvc	r9, #116, 16	; 0x740000
 8016e29:	6f687320 	svcvs	0x00687320
 8016e2d:	6e646c75 	mcrvs	12, 3, r6, cr4, cr5, {3}
 8016e31:	68207427 	stmdavs	r0!, {r0, r1, r2, r5, sl, ip, sp, lr}
 8016e35:	65707061 	ldrbvs	r7, [r0, #-97]!	; 0xffffff9f
 8016e39:	000a216e 	andeq	r2, sl, lr, ror #2
 8016e3d:	64697242 	strbtvs	r7, [r9], #-578	; 0xfffffdbe
 8016e41:	000a6567 	andeq	r6, sl, r7, ror #10
 8016e45:	72694620 	rsbvc	r4, r9, #32, 12	; 0x2000000
 8016e49:	7261776d 	rsbvc	r7, r1, #28573696	; 0x1b40000
 8016e4d:	203a2065 	eorscs	r2, sl, r5, rrx
 8016e51:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016e55:	20000a64 	andcs	r0, r0, r4, ror #20
 8016e59:	20444943 	subcs	r4, r4, r3, asr #18
 8016e5d:	20202020 	eorcs	r2, r0, r0, lsr #32
 8016e61:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8016e65:	20000a73 	andcs	r0, r0, r3, ror sl
 8016e69:	726f5020 	rsbvc	r5, pc, #32
 8016e6d:	32252074 	eorcc	r2, r5, #116	; 0x74
 8016e71:	6e552064 	cdpvs	0, 5, cr2, cr5, cr4, {3}
 8016e75:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 8016e79:	25206573 	strcs	r6, [r0, #-1395]!	; 0xfffffa8d
 8016e7d:	2064332d 	rsbcs	r3, r4, sp, lsr #6
 8016e81:	5d73255b 	cfldr64pl	mvdx2, [r3, #-364]!	; 0xfffffe94
 8016e85:	2020000a 	eorcs	r0, r0, sl
 8016e89:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
 8016e8d:	64322520 	ldrtvs	r2, [r2], #-1312	; 0xfffffae0
 8016e91:	696e5520 	stmdbvs	lr!, {r5, r8, sl, ip, lr}^
 8016e95:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8016e99:	2d252065 	stccs	0, cr2, [r5, #-404]!	; 0xfffffe6c
 8016e9d:	5b206433 	blpl	882ff71 <__exidx_end+0x8171a5>
 8016ea1:	0a5d6425 	beq	976ff3d <__exidx_end+0x1757171>
 8016ea5:	79532000 	ldmdbvc	r3, {sp}^
 8016ea9:	7268636e 	rsbvc	r6, r8, #-1207959551	; 0xb8000001
 8016ead:	7a696e6f 	bvc	9a72871 <__exidx_end+0x1a59aa5>
 8016eb1:	73692065 	cmnvc	r9, #101	; 0x65
 8016eb5:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 8016eb9:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8016ebd:	 	tstmi	r0, r4, ror #20

08016ec0 <E117Const::ACN_PACKET_IDENTIFIER>:
 8016ec0:	2d435341 	stclcs	3, cr5, [r3, #-260]	; 0xfffffefc
 8016ec4:	312e3145 			; <UNDEFINED> instruction: 0x312e3145
 8016ec8:	00000037 	andeq	r0, r0, r7, lsr r0

08016ecc <E131BridgeConst::VERSION>:
 8016ecc:	30251801 	eorcc	r1, r5, r1, lsl #16
 8016ed0:	252d7838 	strcs	r7, [sp, #-2104]!	; 0xfffff7c8
 8016ed4:	2d783430 	cfldrdcs	mvd3, [r8, #-192]!	; 0xffffff40
 8016ed8:	78343025 	ldmdavc	r4!, {r0, r2, r5, ip, sp}
 8016edc:	3230252d 	eorscc	r2, r0, #188743680	; 0xb400000
 8016ee0:	32302578 	eorscc	r2, r0, #120, 10	; 0x1e000000
 8016ee4:	30252d78 	eorcc	r2, r5, r8, ror sp
 8016ee8:	30257832 	eorcc	r7, r5, r2, lsr r8
 8016eec:	30257832 	eorcc	r7, r5, r2, lsr r8
 8016ef0:	30257832 	eorcc	r7, r5, r2, lsr r8
 8016ef4:	30257832 	eorcc	r7, r5, r2, lsr r8
 8016ef8:	30257832 	eorcc	r7, r5, r2, lsr r8
 8016efc:	00007832 	andeq	r7, r0, r2, lsr r8

08016f00 <vtable for WS28xxDmx>:
	...
 8016f08:	0800cccd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, fp, lr, pc}
 8016f0c:	0800cced 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, sl, fp, lr, pc}
 8016f10:	0800cd25 	stmdaeq	r0, {r0, r2, r5, r8, sl, fp, lr, pc}
 8016f14:	0800cd6f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r8, sl, fp, lr, pc}
 8016f18:	0800cdd7 	stmdaeq	r0, {r0, r1, r2, r4, r6, r7, r8, sl, fp, lr, pc}
 8016f1c:	0800ccff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, sl, fp, lr, pc}
 8016f20:	0800d6a1 	stmdaeq	r0, {r0, r5, r7, r9, sl, ip, lr, pc}
 8016f24:	0800cd3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, sl, fp, lr, pc}
 8016f28:	0800ccc5 	stmdaeq	r0, {r0, r2, r6, r7, sl, fp, lr, pc}
 8016f2c:	0800ccc9 	stmdaeq	r0, {r0, r3, r6, r7, sl, fp, lr, pc}
 8016f30:	0800cd97 	stmdaeq	r0, {r0, r1, r2, r4, r7, r8, sl, fp, lr, pc}
 8016f34:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8016f38:	2a2e253a 	bcs	8ba0428 <__exidx_end+0xb8765c>
 8016f3c:	23002c66 	movwcs	r2, #3174	; 0xc66
 8016f40:	253d7325 	ldrcs	r7, [sp, #-805]!	; 0xfffffcdb
 8016f44:	0a662a2e 	beq	99a1804 <__exidx_end+0x1988a38>
 8016f48:	65764f00 	ldrbvs	r4, [r6, #-3840]!	; 0xfffff100
 8016f4c:	69727772 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
 8016f50:	64206574 	strtvs	r6, [r0], #-1396	; 0xfffffa8c
 8016f54:	73617461 	cmnvc	r1, #1627389952	; 0x61000000
 8016f58:	74656568 	strbtvc	r6, [r5], #-1384	; 0xfffffa98
 8016f5c:	65764f00 	ldrbvs	r4, [r6, #-3840]!	; 0xfffff100
 8016f60:	69727772 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
 8016f64:	74206574 	strtvc	r6, [r0], #-1396	; 0xfffffa8c
 8016f68:	6e696d69 	cdpvs	13, 6, cr6, cr9, cr9, {3}
 8016f6c:	75282067 	strvc	r2, [r8, #-103]!	; 0xffffff99
 8016f70:	47002973 	smlsdxmi	r0, r3, r9, r2
 8016f74:	70756f72 	rsbsvc	r6, r5, r2, ror pc
 8016f78:	00676e69 	rsbeq	r6, r7, r9, ror #28
 8016f7c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
 8016f80:	6162206b 	cmnvs	r2, fp, rrx
 8016f84:	20646573 	rsbcs	r6, r4, r3, ror r5
 8016f88:	70696863 	rsbvc	r6, r9, r3, ror #16
 8016f8c:	50410073 	subpl	r0, r1, r3, ror r0
 8016f90:	32303141 	eorscc	r3, r0, #1073741840	; 0x40000010
 8016f94:	394b532f 	stmdbcc	fp, {r0, r1, r2, r3, r5, r8, r9, ip, lr}^
 8016f98:	00323238 	eorseq	r3, r2, r8, lsr r2
 8016f9c:	74736554 	ldrbtvc	r6, [r3], #-1364	; 0xfffffaac
 8016fa0:	74617020 	strbtvc	r7, [r1], #-32	; 0xffffffe0
 8016fa4:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
 8016fa8:	78695000 	stmdavc	r9!, {ip, lr}^
 8016fac:	44206c65 	strtmi	r6, [r0], #-3173	; 0xfffff39b
 8016fb0:	7020584d 	eorvc	r5, r0, sp, asr #16
 8016fb4:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 8016fb8:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 8016fbc:	20000a73 	andcs	r0, r0, r3, ror sl
 8016fc0:	756f7247 	strbvc	r7, [pc, #-583]!	; 8016d81 <ArtNetParamsConst::DESTINATION_IP_PORT+0x3b>
 8016fc4:	676e6970 			; <UNDEFINED> instruction: 0x676e6970
 8016fc8:	756f6320 	strbvc	r6, [pc, #-800]!	; 8016cb0 <artnet::NODE_ID+0x150>
 8016fcc:	3a20746e 	bcc	883418c <__exidx_end+0x81b3c0>
 8016fd0:	20642520 	rsbcs	r2, r4, r0, lsr #10
 8016fd4:	6f72475b 	svcvs	0x0072475b
 8016fd8:	20737075 	rsbscs	r7, r3, r5, ror r0
 8016fdc:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8016fe0:	 	andeq	r0, r0, sp, asr sl

08016fe3 <CSWTCH.6>:
 8016fe3:	02020200 	andeq	r0, r2, #0, 4
 8016fe7:	04020202 	streq	r0, [r2], #-514	; 0xfffffdfe
 8016feb:	6e550500 	cdpvs	5, 5, cr0, cr5, cr0, {0}
 8016fef:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
 8016ff3:	 	svcvs	0x004e006e

08016ff5 <s_patternName>:
 8016ff5:	656e6f4e 	strbvs	r6, [lr, #-3918]!	; 0xfffff0b2
	...
 8017001:	61520000 	cmpvs	r2, r0
 8017005:	6f626e69 	svcvs	0x00626e69
 8017009:	79632077 	stmdbvc	r3!, {r0, r1, r2, r4, r5, r6, sp}^
 801700d:	00656c63 	rsbeq	r6, r5, r3, ror #24
 8017011:	61656854 	cmnvs	r5, r4, asr r8
 8017015:	20726574 	rsbscs	r6, r2, r4, ror r5
 8017019:	73616863 	cmnvc	r1, #6488064	; 0x630000
 801701d:	6f430065 	svcvs	0x00430065
 8017021:	72756f6c 	rsbsvc	r6, r5, #108, 30	; 0x1b0
 8017025:	70697720 	rsbvc	r7, r9, r0, lsr #14
 8017029:	00000065 	andeq	r0, r0, r5, rrx
 801702d:	6e616353 	mcrvs	3, 3, r6, cr1, cr3, {2}
 8017031:	0072656e 	rsbseq	r6, r2, lr, ror #10
 8017035:	00000000 	andeq	r0, r0, r0
 8017039:	61460000 	mrsvs	r0, (UNDEF: 70)
 801703d:	00006564 	andeq	r6, r0, r4, ror #10
	...
 8017049:	65646e55 	strbvs	r6, [r4, #-3669]!	; 0xfffff1ab
 801704d:	656e6966 	strbvs	r6, [lr, #-2406]!	; 0xfffff69a
 8017051:	 	ldrbmi	r0, [r2, -r4, rrx]

08017053 <PixelType::MAPS>:
 8017053:	00424752 	subeq	r4, r2, r2, asr r7
 8017057:	00474252 	subeq	r4, r7, r2, asr r2
 801705b:	00425247 	subeq	r5, r2, r7, asr #4
 801705f:	00524247 	subseq	r4, r2, r7, asr #4
 8017063:	00475242 	subeq	r5, r7, r2, asr #4
 8017067:	00524742 	subseq	r4, r2, r2, asr #14

0801706b <PixelType::TYPES>:
 801706b:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801706f:	00003130 	andeq	r3, r0, r0, lsr r1
 8017073:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8017077:	00003131 	andeq	r3, r0, r1, lsr r1
 801707b:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801707f:	00003231 	andeq	r3, r0, r1, lsr r2
 8017083:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8017087:	00423231 	subeq	r3, r2, r1, lsr r2
 801708b:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801708f:	00003331 	andeq	r3, r0, r1, lsr r3
 8017093:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8017097:	00003531 	andeq	r3, r0, r1, lsr r5
 801709b:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 801709f:	00003231 	andeq	r3, r0, r1, lsr r2
 80170a3:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 80170a7:	00573231 	subseq	r3, r7, r1, lsr r2
 80170ab:	31534355 	cmpcc	r3, r5, asr r3
 80170af:	00333039 	eorseq	r3, r3, r9, lsr r0
 80170b3:	32534355 	subscc	r4, r3, #1409286145	; 0x54000001
 80170b7:	00333039 	eorseq	r3, r3, r9, lsr r0
 80170bb:	38385343 	ldmdacc	r8!, {r0, r1, r6, r8, r9, ip, lr}
 80170bf:	00003231 	andeq	r3, r0, r1, lsr r2
 80170c3:	31415041 	cmpcc	r1, r1, asr #32
 80170c7:	00003230 	andeq	r3, r0, r0, lsr r2
 80170cb:	38394b53 	ldmdacc	r9!, {r0, r1, r4, r6, r8, r9, fp, lr}
 80170cf:	00003232 	andeq	r3, r0, r2, lsr r2
 80170d3:	31383950 	teqcc	r8, r0, asr r9
 80170d7:	00000033 	andeq	r0, r0, r3, lsr r0
 80170db:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 80170df:	6170206c 	cmnvs	r0, ip, rrx
 80170e3:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
 80170e7:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
 80170eb:	5420000a 	strtpl	r0, [r0], #-10
 80170ef:	20657079 	rsbcs	r7, r5, r9, ror r0
 80170f3:	3a202020 	bcc	881f17b <__exidx_end+0x8063af>
 80170f7:	20732520 	rsbscs	r2, r3, r0, lsr #10
 80170fb:	5d64255b 	cfstr64pl	mvdx2, [r4, #-364]!	; 0xfffffe94
 80170ff:	4320000a 			; <UNDEFINED> instruction: 0x4320000a
 8017103:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 8017107:	3a202020 	bcc	881f18f <__exidx_end+0x8063c3>
 801710b:	0a642520 	beq	9920593 <__exidx_end+0x19077c7>
 801710f:	614d2000 	mrsvs	r2, (UNDEF: 77)
 8017113:	6e697070 	mcrvs	0, 3, r7, cr9, cr0, {3}
 8017117:	203a2067 	eorscs	r2, sl, r7, rrx
 801711b:	5b207325 	blpl	8833db7 <__exidx_end+0x81afeb>
 801711f:	0a5d6425 	beq	97701bb <__exidx_end+0x17573ef>
 8017123:	30542000 	subscc	r2, r4, r0
 8017127:	20202048 	eorcs	r2, r0, r8, asr #32
 801712b:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801712f:	66322e25 	ldrtvs	r2, [r2], -r5, lsr #28
 8017133:	78305b20 	ldmdavc	r0!, {r5, r8, r9, fp, ip, lr}
 8017137:	0a5d5825 	beq	976d1d3 <__exidx_end+0x1754407>
 801713b:	31542000 	cmpcc	r4, r0
 801713f:	20202048 	eorcs	r2, r0, r8, asr #32
 8017143:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8017147:	66322e25 	ldrtvs	r2, [r2], -r5, lsr #28
 801714b:	78305b20 	ldmdavc	r0!, {r5, r8, r9, fp, ip, lr}
 801714f:	0a5d5825 	beq	976d1eb <__exidx_end+0x175441f>
 8017153:	2e642500 	cdpcs	5, 6, cr2, cr4, cr0, {0}
 8017157:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801715b:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801715f:	2c73252c 	cfldr64cs	mvdx2, [r3], #-176	; 0xffffff50
 8017163:	252c7325 	strcs	r7, [ip, #-805]!	; 0xfffffcdb
 8017167:	73252c64 			; <UNDEFINED> instruction: 0x73252c64
 801716b:	6425000a 	strtvs	r0, [r5], #-10
 801716f:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8017173:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017177:	73252c64 			; <UNDEFINED> instruction: 0x73252c64
 801717b:	2c73252c 	cfldr64cs	mvdx2, [r3], #-176	; 0xffffff50
 801717f:	000a6425 	andeq	r6, sl, r5, lsr #8
 8017183:	4f006e4f 	svcmi	0x00006e4f
 8017187:	64006666 	strvs	r6, [r0], #-1638	; 0xfffff99a
 801718b:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 801718f:	253a7961 	ldrcs	r7, [sl, #-2401]!	; 0xfffff69f
 8017193:	74000a73 	strvc	r0, [r0], #-2675	; 0xfffff58d
 8017197:	3a707466 	bcc	9c34337 <__exidx_end+0x1c1b56b>
 801719b:	000a7325 	andeq	r7, sl, r5, lsr #6
 801719f:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 80171a3:	3a6e6f69 	bcc	9bb2f4f <__exidx_end+0x1b9a183>
 80171a7:	75007325 	strvc	r7, [r0, #-805]	; 0xfffffcdb
 80171ab:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 80171af:	25203a65 	strcs	r3, [r0, #-2661]!	; 0xfffff59b
 80171b3:	000a7375 	andeq	r7, sl, r5, ror r3
 80171b7:	4f525245 	svcmi	0x00525245
 80171bb:	673f2352 			; <UNDEFINED> instruction: 0x673f2352
 80171bf:	000a7465 	andeq	r7, sl, r5, ror #8
 80171c3:	70746674 	rsbsvc	r6, r4, r4, ror r6
 80171c7:	69640023 	stmdbvs	r4!, {r0, r1, r5}^
 80171cb:	616c7073 	smcvs	50947	; 0xc703
 80171cf:	45002379 	strmi	r2, [r0, #-889]	; 0xfffffc87
 80171d3:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
 80171d7:	000a2123 	andeq	r2, sl, r3, lsr #2
 80171db:	4f525245 	svcmi	0x00525245
 80171df:	0a3f2352 	beq	8fdff2f <__exidx_end+0xfc7163>
 80171e3:	62657200 	rsbvs	r7, r5, #0, 4
 80171e7:	23746f6f 	cmncs	r4, #444	; 0x1bc
 80171eb:	696c0023 	stmdbvs	ip!, {r0, r1, r5}^
 80171ef:	00237473 	eoreq	r7, r3, r3, ror r4
 80171f3:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 80171f7:	75002a23 	strvc	r2, [r0, #-2595]	; 0xfffff5dd
 80171fb:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 80171ff:	76002365 	strvc	r2, [r0], -r5, ror #6
 8017203:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8017207:	00236e6f 	eoreq	r6, r3, pc, ror #28
 801720b:	23746567 	cmncs	r4, #432013312	; 0x19c00000
 801720f:	63616600 	cmnvs	r1, #0, 12
 8017213:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8017217:	 	tstmi	r0, r3, lsr #6

0801721a <s_Node>:
 801721a:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801721e:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 801722a:	41730000 	cmnmi	r3, r0
 801722e:	45204e43 	strmi	r4, [r0, #-3651]!	; 0xfffff1bd
 8017232:	31332e31 	teqcc	r3, r1, lsr lr
	...
 801723e:	2043534f 	subcs	r5, r3, pc, asr #6
 8017242:	76726553 			; <UNDEFINED> instruction: 0x76726553
 8017246:	00007265 	andeq	r7, r0, r5, ror #4
 801724a:	00000000 	andeq	r0, r0, r0
 801724e:	544c0000 	strbpl	r0, [ip], #-0
 8017252:	00000043 	andeq	r0, r0, r3, asr #32
	...
 8017262:	2043534f 	subcs	r5, r3, pc, asr #6
 8017266:	65696c43 	strbvs	r6, [r9, #-3139]!	; 0xfffff3bd
 801726a:	0000746e 	andeq	r7, r0, lr, ror #8
 801726e:	00000000 	andeq	r0, r0, r0
 8017272:	44520000 	ldrbmi	r0, [r2], #-0
 8017276:	74654e4d 	strbtvc	r4, [r5], #-3661	; 0xfffff1b3
 801727a:	524c4c20 	subpl	r4, ip, #32, 24	; 0x2000
 801727e:	6e4f2050 	mcrvs	0, 2, r2, cr15, cr0, {2}
 8017282:	0000796c 	andeq	r7, r0, ip, ror #18
 8017286:	776f6853 			; <UNDEFINED> instruction: 0x776f6853
 801728a:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
	...
 8017296:	494d0000 	stmdbmi	sp, {}^	; <UNPREDICTABLE>
 801729a:	00004944 	andeq	r4, r0, r4, asr #18
	...
 80172aa:	00504444 	subseq	r4, r0, r4, asr #8
	...

080172bc <s_Output>:
 80172bc:	00584d44 	subseq	r4, r8, r4, asr #26
	...
 80172c8:	004d4452 	subeq	r4, sp, r2, asr r4
	...
 80172d4:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
 80172d8:	00726f74 	rsbseq	r6, r2, r4, ror pc
 80172dc:	00000000 	andeq	r0, r0, r0
 80172e0:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 80172e4:	0000006c 	andeq	r0, r0, ip, rrx
 80172e8:	00000000 	andeq	r0, r0, r0
 80172ec:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
 80172f0:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 80172f4:	00000000 	andeq	r0, r0, r0
 80172f8:	0043534f 	subeq	r5, r3, pc, asr #6
	...
 8017304:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 8017308:	00006769 	andeq	r6, r0, r9, ror #14
 801730c:	00000000 	andeq	r0, r0, r0
 8017310:	70657453 	rsbvc	r7, r5, r3, asr r4
 8017314:	00726570 	rsbseq	r6, r2, r0, ror r5
 8017318:	00000000 	andeq	r0, r0, r0
 801731c:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
 8017320:	00007265 	andeq	r7, r0, r5, ror #4
 8017324:	00000000 	andeq	r0, r0, r0
 8017328:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801732c:	0074654e 	rsbseq	r6, r4, lr, asr #10
 8017330:	00000000 	andeq	r0, r0, r0
 8017334:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
 8017338:	00006c61 	andeq	r6, r0, r1, ror #24
 801733c:	00000000 	andeq	r0, r0, r0
 8017340:	20424752 	subcs	r4, r2, r2, asr r7
 8017344:	656e6150 	strbvs	r6, [lr, #-336]!	; 0xfffffeb0
 8017348:	0000006c 	andeq	r0, r0, ip, rrx

0801734c <RemoteConfig::s_GET>:
 801734c:	0800f84d 	stmdaeq	r0, {r0, r2, r3, r6, fp, ip, sp, lr, pc}
 8017350:	00000000 	andeq	r0, r0, r0
 8017354:	080171e4 	stmdaeq	r1, {r2, r5, r6, r7, r8, ip, sp, lr}
 8017358:	00000008 	andeq	r0, r0, r8
 801735c:	0800ed19 	stmdaeq	r0, {r0, r3, r4, r8, sl, fp, sp, lr, pc}
 8017360:	00000000 	andeq	r0, r0, r0
 8017364:	080171ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r8, ip, sp, lr}
 8017368:	00000005 	andeq	r0, r0, r5
 801736c:	0800ed19 	stmdaeq	r0, {r0, r3, r4, r8, sl, fp, sp, lr, pc}
 8017370:	00000000 	andeq	r0, r0, r0
 8017374:	080171f3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r8, ip, sp, lr}
 8017378:	00000006 	andeq	r0, r0, r6
 801737c:	0800ef0d 	stmdaeq	r0, {r0, r2, r3, r8, r9, sl, fp, sp, lr, pc}
 8017380:	00000000 	andeq	r0, r0, r0
 8017384:	080171fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r8, ip, sp, lr}
 8017388:	00000007 	andeq	r0, r0, r7
 801738c:	0800eec9 	stmdaeq	r0, {r0, r3, r6, r7, r9, sl, fp, sp, lr, pc}
 8017390:	00000000 	andeq	r0, r0, r0
 8017394:	08017202 	stmdaeq	r1, {r1, r9, ip, sp, lr}
 8017398:	00000008 	andeq	r0, r0, r8
 801739c:	0800edf1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, sl, fp, sp, lr, pc}
 80173a0:	00000000 	andeq	r0, r0, r0
 80173a4:	080171c9 	stmdaeq	r1, {r0, r3, r6, r7, r8, ip, sp, lr}
 80173a8:	00000008 	andeq	r0, r0, r8
 80173ac:	0800f191 	stmdaeq	r0, {r0, r4, r7, r8, ip, sp, lr, pc}
 80173b0:	00000000 	andeq	r0, r0, r0
 80173b4:	0801720b 	stmdaeq	r1, {r0, r1, r3, r9, ip, sp, lr}
 80173b8:	00010004 	andeq	r0, r1, r4
 80173bc:	0800ee71 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, fp, sp, lr, pc}
 80173c0:	00000000 	andeq	r0, r0, r0
 80173c4:	080171c3 	stmdaeq	r1, {r0, r1, r6, r7, r8, ip, sp, lr}
 80173c8:	00000005 	andeq	r0, r0, r5
 80173cc:	0800f535 	stmdaeq	r0, {r0, r2, r4, r5, r8, sl, ip, sp, lr, pc}
 80173d0:	00000000 	andeq	r0, r0, r0
 80173d4:	08017210 	stmdaeq	r1, {r4, r9, ip, sp, lr}
 80173d8:	00000009 	andeq	r0, r0, r9

080173dc <RemoteConfig::s_SET>:
 80173dc:	0800ee4d 	stmdaeq	r0, {r0, r2, r3, r6, r9, sl, fp, sp, lr, pc}
 80173e0:	00000000 	andeq	r0, r0, r0
 80173e4:	080171c3 	stmdaeq	r1, {r0, r1, r6, r7, r8, ip, sp, lr}
 80173e8:	00010005 	andeq	r0, r1, r5
 80173ec:	0800ef61 	stmdaeq	r0, {r0, r5, r6, r8, r9, sl, fp, sp, lr, pc}
 80173f0:	00000000 	andeq	r0, r0, r0
 80173f4:	080171c9 	stmdaeq	r1, {r0, r3, r6, r7, r8, ip, sp, lr}
 80173f8:	00010008 	andeq	r0, r1, r8
 80173fc:	6f626552 	svcvs	0x00626552
 8017400:	6e69746f 	cdpvs	4, 6, cr7, cr9, cr15, {3}
 8017404:	2e2e2067 	cdpcs	0, 2, cr2, cr14, cr7, {3}
 8017408:	52000a2e 	andpl	r0, r0, #188416	; 0x2e000
 801740c:	6f6f6265 	svcvs	0x006f6265
 8017410:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 8017414:	2e2e2e20 	cdpcs	14, 2, cr2, cr14, cr0, {1}
 8017418:	6f637200 	svcvs	0x00637200
 801741c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 8017420:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8017424:	74656e00 	strbtvc	r6, [r5], #-3584	; 0xfffff200
 8017428:	6b726f77 	blvs	9cb320c <__exidx_end+0x1c9a440>
 801742c:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8017430:	73696400 	cmnvc	r9, #0, 8
 8017434:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8017438:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 801743c:	74726100 	ldrbtvc	r6, [r2], #-256	; 0xffffff00
 8017440:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 8017444:	00747874 	rsbseq	r7, r4, r4, ror r8
 8017448:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 801744c:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 8017450:	00747874 	rsbseq	r7, r4, r4, ror r8

08017454 <RemoteConfig::s_TXT>:
 8017454:	0800f199 	stmdaeq	r0, {r0, r3, r4, r7, r8, ip, sp, lr, pc}
 8017458:	00000000 	andeq	r0, r0, r0
 801745c:	0800f455 	stmdaeq	r0, {r0, r2, r4, r6, sl, ip, sp, lr, pc}
 8017460:	00000000 	andeq	r0, r0, r0
 8017464:	08017419 	stmdaeq	r1, {r0, r3, r4, sl, ip, sp, lr}
 8017468:	0000000b 	andeq	r0, r0, fp
 801746c:	0000000c 	andeq	r0, r0, ip
 8017470:	0800f1c5 	stmdaeq	r0, {r0, r2, r6, r7, r8, ip, sp, lr, pc}
 8017474:	00000000 	andeq	r0, r0, r0
 8017478:	0800f489 	stmdaeq	r0, {r0, r3, r7, sl, ip, sp, lr, pc}
 801747c:	00000000 	andeq	r0, r0, r0
 8017480:	08017425 	stmdaeq	r1, {r0, r2, r5, sl, ip, sp, lr}
 8017484:	0000000b 	andeq	r0, r0, fp
 8017488:	00000000 	andeq	r0, r0, r0
 801748c:	0800f249 	stmdaeq	r0, {r0, r3, r6, r9, ip, sp, lr, pc}
 8017490:	00000000 	andeq	r0, r0, r0
 8017494:	0800f509 	stmdaeq	r0, {r0, r3, r8, sl, ip, sp, lr, pc}
 8017498:	00000000 	andeq	r0, r0, r0
 801749c:	08017431 	stmdaeq	r1, {r0, r4, r5, sl, ip, sp, lr}
 80174a0:	0000000b 	andeq	r0, r0, fp
 80174a4:	0000000f 	andeq	r0, r0, pc
 80174a8:	0800f1f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, ip, sp, lr, pc}
 80174ac:	00000000 	andeq	r0, r0, r0
 80174b0:	0800f4b1 	stmdaeq	r0, {r0, r4, r5, r7, sl, ip, sp, lr, pc}
 80174b4:	00000000 	andeq	r0, r0, r0
 80174b8:	0801743d 	stmdaeq	r1, {r0, r2, r3, r4, r5, sl, ip, sp, lr}
 80174bc:	0000000a 	andeq	r0, r0, sl
 80174c0:	00000001 	andeq	r0, r0, r1
 80174c4:	0800f21d 	stmdaeq	r0, {r0, r2, r3, r4, r9, ip, sp, lr, pc}
 80174c8:	00000000 	andeq	r0, r0, r0
 80174cc:	0800f4dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, sl, ip, sp, lr, pc}
 80174d0:	00000000 	andeq	r0, r0, r0
 80174d4:	08017448 	stmdaeq	r1, {r3, r6, sl, ip, sp, lr}
 80174d8:	0000000b 	andeq	r0, r0, fp
 80174dc:	00000003 	andeq	r0, r0, r3
 80174e0:	00544547 	subseq	r4, r4, r7, asr #10
 80174e4:	54534f50 	ldrbpl	r4, [r3], #-3920	; 0xfffff0b0
 80174e8:	54544800 	ldrbpl	r4, [r4], #-2048	; 0xfffff800
 80174ec:	0a200050 	beq	8817634 <__exidx_end+0x7fe868>
 80174f0:	312e3100 			; <UNDEFINED> instruction: 0x312e3100
 80174f4:	43003a00 	movwmi	r3, #2560	; 0xa00
 80174f8:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 80174fc:	542d746e 	strtpl	r7, [sp], #-1134	; 0xfffffb92
 8017500:	00657079 	rsbeq	r7, r5, r9, ror r0
 8017504:	61003b20 	tstvs	r0, r0, lsr #22
 8017508:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
 801750c:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
 8017510:	6a2f6e6f 	bvs	8bf2ed4 <__exidx_end+0xbda108>
 8017514:	006e6f73 	rsbeq	r6, lr, r3, ror pc
 8017518:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 801751c:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 8017520:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 8017524:	2f006874 	svccs	0x00006874
 8017528:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 801752c:	74682e78 	strbtvc	r2, [r8], #-3704	; 0xfffff188
 8017530:	2f006c6d 	svccs	0x00006c6d
 8017534:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 8017538:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 801753c:	2f007373 	svccs	0x00007373
 8017540:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 8017544:	736a2e78 	cmnvc	sl, #120, 28	; 0x780
 8017548:	736a2f00 	cmnvc	sl, #0, 30
 801754c:	002f6e6f 	eoreq	r6, pc, pc, ror #28
 8017550:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8017554:	72657600 	rsbvc	r7, r5, #0, 12
 8017558:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 801755c:	74707500 	ldrbtvc	r7, [r0], #-1280	; 0xfffffb00
 8017560:	00656d69 	rsbeq	r6, r5, r9, ror #26
 8017564:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8017568:	0079616c 	rsbseq	r6, r9, ip, ror #2
 801756c:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8017570:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8017574:	6a2f0079 	bvs	8bd7760 <__exidx_end+0xbbe994>
 8017578:	2f6e6f73 	svccs	0x006e6f73
 801757c:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 8017580:	72006e6f 	andvc	r6, r0, #1776	; 0x6f0
 8017584:	6f6f6265 	svcvs	0x006f6265
 8017588:	64690074 	strbtvs	r0, [r9], #-116	; 0xffffff8c
 801758c:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 8017590:	3c007966 			; <UNDEFINED> instruction: 0x3c007966
 8017594:	434f4421 	movtmi	r4, #62497	; 0xf421
 8017598:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 801759c:	6d746820 	ldclvs	8, cr6, [r4, #-128]!	; 0xffffff80
 80175a0:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 80175a4:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 80175a8:	683c0a3e 	ldmdavs	ip!, {r1, r2, r3, r4, r5, r9, fp}
 80175ac:	3e646165 	powccsz	f6, f4, f5
 80175b0:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 80175b4:	533e656c 	teqpl	lr, #108, 10	; 0x1b000000
 80175b8:	696d6275 	stmdbvs	sp!, {r0, r2, r4, r5, r6, r9, sp, lr}^
 80175bc:	742f3c74 	strtvc	r3, [pc], #-3188	; 80175c4 <RemoteConfig::s_TXT+0x170>
 80175c0:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
 80175c4:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 80175c8:	3e646165 	powccsz	f6, f4, f5
 80175cc:	6f623c0a 	svcvs	0x00623c0a
 80175d0:	3c3e7964 			; <UNDEFINED> instruction: 0x3c3e7964
 80175d4:	4f3e3168 	svcmi	0x003e3168
 80175d8:	682f3c4b 	stmdavs	pc!, {r0, r1, r3, r6, sl, fp, ip, sp}	; <UNPREDICTABLE>
 80175dc:	2f3c3e31 	svccs	0x003c3e31
 80175e0:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 80175e4:	2f3c0a3e 	svccs	0x003c0a3e
 80175e8:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 80175ec:	42000a3e 	andmi	r0, r0, #253952	; 0x3e000
 80175f0:	52206461 	eorpl	r6, r0, #1627389952	; 0x61000000
 80175f4:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
 80175f8:	4e007473 	mcrmi	4, 0, r7, cr0, cr3, {3}
 80175fc:	4620746f 	strtmi	r7, [r0], -pc, ror #8
 8017600:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 8017604:	71655200 	cmnvc	r5, r0, lsl #4
 8017608:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0xfffffa8b
 801760c:	746e4520 	strbtvc	r4, [lr], #-1312	; 0xfffffae0
 8017610:	20797469 	rsbscs	r7, r9, r9, ror #8
 8017614:	206f6f54 	rsbcs	r6, pc, r4, asr pc	; <UNPREDICTABLE>
 8017618:	6772614c 	ldrbvs	r6, [r2, -ip, asr #2]!
 801761c:	65520065 	ldrbvs	r0, [r2, #-101]	; 0xffffff9b
 8017620:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
 8017624:	52552d74 	subspl	r2, r5, #116, 26	; 0x1d00
 8017628:	6f542049 	svcvs	0x00542049
 801762c:	6f4c206f 	svcvs	0x004c206f
 8017630:	4900676e 	stmdbmi	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 8017634:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 8017638:	206c616e 	rsbcs	r6, ip, lr, ror #2
 801763c:	76726553 			; <UNDEFINED> instruction: 0x76726553
 8017640:	45207265 	strmi	r7, [r0, #-613]!	; 0xfffffd9b
 8017644:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 8017648:	74654d00 	strbtvc	r4, [r5], #-3328	; 0xfffff300
 801764c:	20646f68 	rsbcs	r6, r4, r8, ror #30
 8017650:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 8017654:	6c706d49 	ldclvs	13, cr6, [r0], #-292	; 0xfffffedc
 8017658:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 801765c:	00646574 	rsbeq	r6, r4, r4, ror r5
 8017660:	73726556 	cmnvc	r2, #360710144	; 0x15800000
 8017664:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 8017668:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 801766c:	70707553 	rsbsvc	r7, r0, r3, asr r5
 8017670:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
 8017674:	6e550064 	cdpvs	0, 5, cr0, cr5, cr4, {3}
 8017678:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
 801767c:	7245206e 	subvc	r2, r5, #110	; 0x6e
 8017680:	00726f72 	rsbseq	r6, r2, r2, ror pc
 8017684:	3c004b4f 			; <UNDEFINED> instruction: 0x3c004b4f
 8017688:	434f4421 	movtmi	r4, #62497	; 0xf421
 801768c:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 8017690:	6d746820 	ldclvs	8, cr6, [r4, #-128]!	; 0xffffff80
 8017694:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 8017698:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 801769c:	683c0a3e 	ldmdavs	ip!, {r1, r2, r3, r4, r5, r9, fp}
 80176a0:	3e646165 	powccsz	f6, f4, f5
 80176a4:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 80176a8:	253e656c 	ldrcs	r6, [lr, #-1388]!	; 0xfffffa94
 80176ac:	73252075 			; <UNDEFINED> instruction: 0x73252075
 80176b0:	69742f3c 	ldmdbvs	r4!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 80176b4:	3e656c74 	mcrcc	12, 3, r6, cr5, cr4, {3}
 80176b8:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 80176bc:	0a3e6461 	beq	8fb0848 <__exidx_end+0xf97a7c>
 80176c0:	646f623c 	strbtvs	r6, [pc], #-572	; 80176c8 <RemoteConfig::s_TXT+0x274>
 80176c4:	683c3e79 	ldmdavs	ip!, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 80176c8:	73253e31 			; <UNDEFINED> instruction: 0x73253e31
 80176cc:	31682f3c 	cmncc	r8, ip, lsr pc
 80176d0:	622f3c3e 	eorvs	r3, pc, #15872	; 0x3e00
 80176d4:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 80176d8:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 80176dc:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 80176e0:	5448000a 	strbpl	r0, [r8], #-10
 80176e4:	312f5054 	qsubcc	r5, r4, pc	; <UNPREDICTABLE>
 80176e8:	2520312e 	strcs	r3, [r0, #-302]!	; 0xfffffed2
 80176ec:	73252075 			; <UNDEFINED> instruction: 0x73252075
 80176f0:	65530a0d 	ldrbvs	r0, [r3, #-2573]	; 0xfffff5f3
 80176f4:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
 80176f8:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 80176fc:	6f430a0d 	svcvs	0x00430a0d
 8017700:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 8017704:	79542d74 	ldmdbvc	r4, {r2, r4, r5, r6, r8, sl, fp, sp}^
 8017708:	203a6570 	eorscs	r6, sl, r0, ror r5
 801770c:	0a0d7325 	beq	83743a8 <__exidx_end+0x35b5dc>
 8017710:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 8017714:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 8017718:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 801771c:	203a6874 	eorscs	r6, sl, r4, ror r8
 8017720:	0a0d7525 	beq	8374bbc <__exidx_end+0x35bdf0>
 8017724:	6e6e6f43 	cdpvs	15, 6, cr6, cr14, cr3, {2}
 8017728:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 801772c:	203a6e6f 	eorscs	r6, sl, pc, ror #28
 8017730:	736f6c63 	cmnvc	pc, #25344	; 0x6300
 8017734:	0d0a0d65 	stceq	13, cr0, [sl, #-404]	; 0xfffffe6c
 8017738:	 	ldrbvs	r0, [r4, #-10]!

0801773a <contentType>:
 801773a:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 801773e:	6d74682f 	ldclvs	8, cr6, [r4, #-188]!	; 0xffffff44
 8017742:	0000006c 	andeq	r0, r0, ip, rrx
	...
 801775a:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 801775e:	7373632f 	cmnvc	r3, #-1140850688	; 0xbc000000
	...
 801777a:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 801777e:	76616a2f 	strbtvc	r6, [r1], -pc, lsr #20
 8017782:	72637361 	rsbvc	r7, r3, #-2080374783	; 0x84000001
 8017786:	00747069 	rsbseq	r7, r4, r9, rrx
	...
 801779a:	6c707061 	ldclvs	0, cr7, [r0], #-388	; 0xfffffe7c
 801779e:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
 80177a2:	2f6e6f69 	svccs	0x006e6f69
 80177a6:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
	...

080177ba <RemoteConfigConst::PARAMS_DISABLE>:
 80177ba:	61736964 	cmnvs	r3, r4, ror #18
 80177be:	00656c62 	rsbeq	r6, r5, r2, ror #24

080177c2 <RemoteConfigConst::PARAMS_FILE_NAME>:
 80177c2:	6e6f6372 	mcrvs	3, 3, r6, cr15, cr2, {3}
 80177c6:	2e676966 	vnmulcs.f16	s13, s14, s13	; <UNPREDICTABLE>
 80177ca:	00747874 	rsbseq	r7, r4, r4, ror r8

080177ce <RemoteConfigConst::PARAMS_DISPLAY_NAME>:
 80177ce:	70736964 	rsbsvc	r6, r3, r4, ror #18
 80177d2:	5f79616c 	svcpl	0x0079616c
 80177d6:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

080177db <RemoteConfigConst::PARAMS_DISABLE_WRITE>:
 80177db:	61736964 	cmnvs	r3, r4, ror #18
 80177df:	5f656c62 	svcpl	0x00656c62
 80177e3:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 80177e7:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

080177e9 <RemoteConfigConst::PARAMS_ENABLE_REBOOT>:
 80177e9:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 80177ed:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 80177f1:	6f6f6265 	svcvs	0x006f6265
 80177f5:	 	mcrvs	0, 3, r0, cr5, cr4, {3}

080177f7 <RemoteConfigConst::PARAMS_ENABLE_UPTIME>:
 80177f7:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 80177fb:	755f656c 	ldrbvc	r6, [pc, #-1388]	; 8017297 <s_Node+0x7d>
 80177ff:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 8017803:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

08017805 <RemoteConfigConst::PARAMS_ENABLE_FACTORY>:
 8017805:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8017809:	665f656c 	ldrbvs	r6, [pc], -ip, ror #10
 801780d:	6f746361 	svcvs	0x00746361
 8017811:	7b007972 	blvc	8035de1 <__exidx_end+0x1d015>
 8017815:	73696c22 	cmnvc	r9, #8704	; 0x2200
 8017819:	7b3a2274 	blvc	8ea01f1 <__exidx_end+0xe87425>
 801781d:	22706922 	rsbscs	r6, r0, #557056	; 0x88000
 8017821:	6425223a 	strtvs	r2, [r5], #-570	; 0xfffffdc6
 8017825:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8017829:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801782d:	222c2264 	eorcs	r2, ip, #100, 4	; 0x40000006
 8017831:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 8017835:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8017839:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 801783d:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
 8017841:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 8017845:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8017849:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 801784d:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8017851:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8017855:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 8017859:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 801785d:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8017861:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8017865:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 8017869:	253a2274 	ldrcs	r2, [sl, #-628]!	; 0xfffffd8c
 801786d:	7d7d7d64 	ldclvc	13, cr7, [sp, #-400]!	; 0xfffffe70
 8017871:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 8017875:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8017879:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 801787d:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 8017881:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 8017885:	616f6222 	cmnvs	pc, r2, lsr #4
 8017889:	3a226472 	bcc	88b0a59 <__exidx_end+0x897c8d>
 801788d:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8017891:	7562222c 	strbvc	r2, [r2, #-556]!	; 0xfffffdd4
 8017895:	22646c69 	rsbcs	r6, r4, #26880	; 0x6900
 8017899:	64227b3a 	strtvs	r7, [r2], #-2874	; 0xfffff4c6
 801789d:	22657461 	rsbcs	r7, r5, #1627389952	; 0x61000000
 80178a1:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 80178a5:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 80178a9:	6d697422 	cfstrdvs	mvd7, [r9, #-136]!	; 0xffffff78
 80178ad:	223a2265 	eorscs	r2, sl, #1342177286	; 0x50000006
 80178b1:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 80178b5:	007d7d22 	rsbseq	r7, sp, r2, lsr #26
 80178b9:	7075227b 	rsbsvc	r2, r5, fp, ror r2
 80178bd:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 80178c1:	75253a22 	strvc	r3, [r5, #-2594]!	; 0xfffff5de
 80178c5:	7b000a7d 	blvc	801a2c1 <__exidx_end+0x14f5>
 80178c9:	73696422 	cmnvc	r9, #570425344	; 0x22000000
 80178cd:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 80178d1:	64253a22 	strtvs	r3, [r5], #-2594	; 0xfffff5de
 80178d5:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 80178d9:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 80178dd:	7b3a2273 	blvc	8ea02b1 <__exidx_end+0xe874e5>
 80178e1:	74726122 	ldrbtvc	r6, [r2], #-290	; 0xfffffede
 80178e5:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 80178e9:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 80178ed:	7241223a 	subvc	r2, r1, #-1610612733	; 0xa0000003
 80178f1:	654e2d74 	strbvs	r2, [lr, #-3444]	; 0xfffff28c
 80178f5:	222c2274 	eorcs	r2, ip, #116, 4	; 0x40000007
 80178f9:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 80178fd:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 8017901:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 8017905:	4d44223a 	sfmmi	f2, 2, [r4, #-232]	; 0xffffff18
 8017909:	69502058 	ldmdbvs	r0, {r3, r4, r6, sp}^
 801790d:	226c6578 	rsbcs	r6, ip, #120, 10	; 0x1e000000
 8017911:	6964222c 	stmdbvs	r4!, {r2, r3, r5, r9, sp}^
 8017915:	616c7073 	smcvs	50947	; 0xc703
 8017919:	78742e79 	ldmdavc	r4!, {r0, r3, r4, r5, r6, r9, sl, fp, sp}^
 801791d:	223a2274 	eorscs	r2, sl, #116, 4	; 0x40000007
 8017921:	70736944 	rsbsvc	r6, r3, r4, asr #18
 8017925:	2079616c 	rsbscs	r6, r9, ip, ror #2
 8017929:	22464455 	subcs	r4, r6, #1426063360	; 0x55000000
 801792d:	656e222c 	strbvs	r2, [lr, #-556]!	; 0xfffffdd4
 8017931:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 8017935:	78742e6b 	ldmdavc	r4!, {r0, r1, r3, r5, r6, r9, sl, fp, sp}^
 8017939:	223a2274 	eorscs	r2, sl, #116, 4	; 0x40000007
 801793d:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 8017941:	226b726f 	rsbcs	r7, fp, #-268435450	; 0xf0000006
 8017945:	6372222c 	cmnvs	r2, #44, 4	; 0xc0000002
 8017949:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 801794d:	78742e67 	ldmdavc	r4!, {r0, r1, r2, r5, r6, r9, sl, fp, sp}^
 8017951:	223a2274 	eorscs	r2, sl, #116, 4	; 0x40000007
 8017955:	6f6d6552 	svcvs	0x006d6552
 8017959:	63206574 			; <UNDEFINED> instruction: 0x63206574
 801795d:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 8017961:	61727567 	cmnvs	r2, r7, ror #10
 8017965:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8017969:	007d7d22 	rsbseq	r7, sp, r2, lsr #26
 801796d:	2f637273 	svccs	0x00637273
 8017971:	70747468 	rsbsvc	r7, r4, r8, ror #8
 8017975:	65672f64 	strbvs	r2, [r7, #-3940]!	; 0xfffff09c
 8017979:	69665f74 	stmdbvs	r6!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 801797d:	635f656c 	cmpvs	pc, #108, 10	; 0x1b000000
 8017981:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 8017985:	632e746e 			; <UNDEFINED> instruction: 0x632e746e
 8017989:	67007070 	smlsdxvs	r0, r0, r0, r7
 801798d:	665f7465 	ldrbvs	r7, [pc], -r5, ror #8
 8017991:	5f656c69 	svcpl	0x00656c69
 8017995:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 8017999:	00746e65 	rsbseq	r6, r4, r5, ror #28
 801799d:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 80179a1:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	; 0xffffff80
 80179a5:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 80179a9:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 80179ad:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 80179b1:	203e2d20 	eorscs	r2, lr, r0, lsr #26
 80179b5:	000a6425 	andeq	r6, sl, r5, lsr #8
 80179b9:	202d2d3c 	eorcs	r2, sp, ip, lsr sp
 80179bd:	253a7325 	ldrcs	r7, [sl, #-805]!	; 0xfffffcdb
 80179c1:	64253a73 	strtvs	r3, [r5], #-2675	; 0xfffff58d
 80179c5:	 	teqcs	ip, sl

080179c7 <index_html>:
 80179c7:	4f44213c 	svcmi	0x0044213c
 80179cb:	50595443 	subspl	r5, r9, r3, asr #8
 80179cf:	74682045 	strbtvc	r2, [r8], #-69	; 0xffffffbb
 80179d3:	0a3e6c6d 	beq	8fb2b8f <__exidx_end+0xf99dc3>
 80179d7:	6d74683c 	ldclvs	8, cr6, [r4, #-240]!	; 0xffffff10
 80179db:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 80179df:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
 80179e3:	3c090a3e 			; <UNDEFINED> instruction: 0x3c090a3e
 80179e7:	6b6e696c 	blvs	9bb1f9f <__exidx_end+0x1b991d3>
 80179eb:	6c657220 	sfmvs	f7, 2, [r5], #-128	; 0xffffff80
 80179ef:	7473223d 	ldrbtvc	r2, [r3], #-573	; 0xfffffdc3
 80179f3:	73656c79 	cmnvc	r5, #30976	; 0x7900
 80179f7:	74656568 	strbtvc	r6, [r5], #-1384	; 0xfffffa98
 80179fb:	72682022 	rsbvc	r2, r8, #34	; 0x22
 80179ff:	223d6665 	eorscs	r6, sp, #105906176	; 0x6500000
 8017a03:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 8017a07:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 8017a0b:	20227373 	eorcs	r7, r2, r3, ror r3
 8017a0f:	090a3e2f 	stmdbeq	sl, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}
 8017a13:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 8017a17:	3c3e656c 	cfldr32cc	mvfx6, [lr], #-432	; 0xfffffe50
 8017a1b:	7469742f 	strbtvc	r7, [r9], #-1071	; 0xfffffbd1
 8017a1f:	0a3e656c 	beq	8fb0fd7 <__exidx_end+0xf9820b>
 8017a23:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 8017a27:	0a3e6461 	beq	8fb0bb3 <__exidx_end+0xf97de7>
 8017a2b:	646f623c 	strbtvs	r6, [pc], #-572	; 8017a33 <index_html+0x6c>
 8017a2f:	090a3e79 	stmdbeq	sl, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 8017a33:	6165683c 	cmnvs	r5, ip, lsr r8
 8017a37:	3e726564 	cdpcc	5, 7, cr6, cr2, cr4, {3}
 8017a3b:	206c753c 	rsbcs	r7, ip, ip, lsr r5
 8017a3f:	223d6469 	eorscs	r6, sp, #1761607680	; 0x69000000
 8017a43:	694c6469 	stmdbvs	ip, {r0, r3, r5, r6, sl, sp, lr}^
 8017a47:	3e227473 	mcrcc	4, 1, r7, cr2, cr3, {3}
 8017a4b:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 8017a4f:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8017a53:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 8017a57:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 8017a5b:	3c3e703c 	ldccc	0, cr7, [lr], #-240	; 0xffffff10
 8017a5f:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 8017a63:	69207463 	stmdbvs	r0!, {r0, r1, r5, r6, sl, ip, sp, lr}
 8017a67:	69223d64 	stmdbvs	r2!, {r2, r5, r6, r8, sl, fp, ip, sp}
 8017a6b:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 8017a6f:	6f746365 	svcvs	0x00746365
 8017a73:	20227972 	eorcs	r7, r2, r2, ror r9
 8017a77:	68636e6f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 8017a7b:	65676e61 	strbvs	r6, [r7, #-3681]!	; 0xfffff19f
 8017a7f:	6567223d 	strbvs	r2, [r7, #-573]!	; 0xfffffdc3
 8017a83:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 8017a87:	68742874 	ldmdavs	r4!, {r2, r4, r5, r6, fp, sp}^
 8017a8b:	762e7369 	strtvc	r7, [lr], -r9, ror #6
 8017a8f:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 8017a93:	3c3e2229 	lfmcc	f2, 4, [lr], #-164	; 0xffffff5c
 8017a97:	6c65732f 	stclvs	3, cr7, [r5], #-188	; 0xffffff44
 8017a9b:	3e746365 	cdpcc	3, 7, cr6, cr4, cr5, {3}
 8017a9f:	3e702f3c 	mrccc	15, 3, r2, cr0, cr12, {1}
 8017aa3:	743c090a 	ldrtvc	r0, [ip], #-2314	; 0xfffff6f6
 8017aa7:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8017aab:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 8017aaf:	54646922 	strbtpl	r6, [r4], #-2338	; 0xfffff6de
 8017ab3:	20227478 	eorcs	r7, r2, r8, ror r4
 8017ab7:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 8017abb:	273d7265 	ldrcs	r7, [sp, -r5, ror #4]!
 8017abf:	3c3e2731 	ldccc	7, cr2, [lr], #-196	; 0xffffff3c
 8017ac3:	6261742f 	rsbvs	r7, r1, #788529152	; 0x2f000000
 8017ac7:	0a3e656c 	beq	8fb107f <__exidx_end+0xf982b3>
 8017acb:	6f663c09 	svcvs	0x00663c09
 8017acf:	7265746f 	rsbvc	r7, r5, #1862270976	; 0x6f000000
 8017ad3:	6c753c3e 	ldclvs	12, cr3, [r5], #-248	; 0xffffff08
 8017ad7:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 8017adb:	56646922 	strbtpl	r6, [r4], -r2, lsr #18
 8017adf:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8017ae3:	3e226e6f 	cdpcc	14, 2, cr6, cr2, cr15, {3}
 8017ae7:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 8017aeb:	662f3c3e 			; <UNDEFINED> instruction: 0x662f3c3e
 8017aef:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 8017af3:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 8017af7:	7263733c 	rsbvc	r7, r3, #60, 6	; 0xf0000000
 8017afb:	20747069 	rsbscs	r7, r4, r9, rrx
 8017aff:	3d637273 	sfmcc	f7, 2, [r3, #-460]!	; 0xfffffe34
 8017b03:	646e6922 	strbtvs	r6, [lr], #-2338	; 0xfffff6de
 8017b07:	6a2e7865 	bvs	8bb5ca3 <__exidx_end+0xb9ced7>
 8017b0b:	3c3e2273 	lfmcc	f2, 4, [lr], #-460	; 0xfffffe34
 8017b0f:	7263732f 	rsbvc	r7, r3, #-1140850688	; 0xbc000000
 8017b13:	3e747069 	cdpcc	0, 7, cr7, cr4, cr9, {3}
 8017b17:	622f3c0a 	eorvs	r3, pc, #2560	; 0xa00
 8017b1b:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 8017b1f:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8017b23:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 8017b27:	 	svcvs	0x0062000a

08017b29 <styles_css>:
 8017b29:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 8017b2d:	200a7b20 	andcs	r7, sl, r0, lsr #22
 8017b31:	63616220 	cmnvs	r1, #32, 4
 8017b35:	6f72676b 	svcvs	0x0072676b
 8017b39:	2d646e75 	stclcs	14, cr6, [r4, #-468]!	; 0xfffffe2c
 8017b3d:	6f6c6f63 	svcvs	0x006c6f63
 8017b41:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 8017b45:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 8017b49:	30322c30 	eorscc	r2, r2, r0, lsr ip
 8017b4d:	2930322c 	ldmdbcs	r0!, {r2, r3, r5, r9, ip, sp}
 8017b51:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 8017b55:	6f6c6f63 	svcvs	0x006c6f63
 8017b59:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 8017b5d:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 8017b61:	202c3535 	eorcs	r3, ip, r5, lsr r5
 8017b65:	2c353532 	cfldr32cs	mvfx3, [r5], #-200	; 0xffffff38
 8017b69:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
 8017b6d:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 8017b71:	6c750a0a 			; <UNDEFINED> instruction: 0x6c750a0a
 8017b75:	200a7b20 	andcs	r7, sl, r0, lsr #22
 8017b79:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 8017b7d:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8017b81:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 8017b85:	0a3b7865 	beq	8ef5d21 <__exidx_end+0xedcf55>
 8017b89:	6c0a0a7d 			; <UNDEFINED> instruction: 0x6c0a0a7d
 8017b8d:	0a7b2069 	beq	9edfd39 <__exidx_end+0x1ec6f6d>
 8017b91:	696c2020 	stmdbvs	ip!, {r5, sp}^
 8017b95:	732d7473 			; <UNDEFINED> instruction: 0x732d7473
 8017b99:	656c7974 	strbvs	r7, [ip, #-2420]!	; 0xfffff68c
 8017b9d:	6f6e203a 	svcvs	0x006e203a
 8017ba1:	0a3b656e 	beq	8ef1161 <__exidx_end+0xed8395>
 8017ba5:	616d2020 	cmnvs	sp, r0, lsr #32
 8017ba9:	6e696772 	mcrvs	7, 3, r6, cr9, cr2, {3}
 8017bad:	7031203a 	eorsvc	r2, r1, sl, lsr r0
 8017bb1:	70352078 	eorsvc	r2, r5, r8, ror r0
 8017bb5:	7d0a3b78 	vstrvc	d3, [sl, #-480]	; 0xfffffe20
 8017bb9:	65680a0a 	strbvs	r0, [r8, #-2570]!	; 0xfffff5f6
 8017bbd:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 8017bc1:	200a7b20 	andcs	r7, sl, r0, lsr #22
 8017bc5:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 8017bc9:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8017bcd:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 8017bd1:	0a3b7865 	beq	8ef5d6d <__exidx_end+0xedcfa1>
 8017bd5:	6f622020 	svcvs	0x00622020
 8017bd9:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 8017bdd:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 8017be1:	3a737569 	bcc	9cf518d <__exidx_end+0x1cdc3c1>
 8017be5:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 8017be9:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 8017bed:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 8017bf1:	203a7265 	eorscs	r7, sl, r5, ror #4
 8017bf5:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8017bf9:	72672064 	rsbvc	r2, r7, #100	; 0x64
 8017bfd:	31207965 			; <UNDEFINED> instruction: 0x31207965
 8017c01:	0a3b7870 	beq	8ef5dc9 <__exidx_end+0xedcffd>
 8017c05:	660a0a7d 			; <UNDEFINED> instruction: 0x660a0a7d
 8017c09:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 8017c0d:	0a7b2072 	beq	9edfddd <__exidx_end+0x1ec7011>
 8017c11:	69642020 	stmdbvs	r4!, {r5, sp}^
 8017c15:	616c7073 	smcvs	50947	; 0xc703
 8017c19:	66203a79 			; <UNDEFINED> instruction: 0x66203a79
 8017c1d:	3b78656c 	blcc	9e311d5 <__exidx_end+0x1e18409>
 8017c21:	6a20200a 	bvs	881fc51 <__exidx_end+0x806e85>
 8017c25:	69747375 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
 8017c29:	632d7966 			; <UNDEFINED> instruction: 0x632d7966
 8017c2d:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 8017c31:	203a746e 	eorscs	r7, sl, lr, ror #8
 8017c35:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
 8017c39:	0a3b7265 	beq	8ef45d5 <__exidx_end+0xedb809>
 8017c3d:	6f622020 	svcvs	0x00622020
 8017c41:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 8017c45:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 8017c49:	3a737569 	bcc	9cf51f5 <__exidx_end+0x1cdc429>
 8017c4d:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 8017c51:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 8017c55:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 8017c59:	203a7265 	eorscs	r7, sl, r5, ror #4
 8017c5d:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8017c61:	72672064 	rsbvc	r2, r7, #100	; 0x64
 8017c65:	31207965 			; <UNDEFINED> instruction: 0x31207965
 8017c69:	0a3b7870 	beq	8ef5e31 <__exidx_end+0xedd065>
 8017c6d:	 	strcc	r0, [r0], #-2685	; 0xfffff583

08017c70 <HttpContent>:
 8017c70:	08017534 	stmdaeq	r1, {r2, r4, r5, r8, sl, ip, sp, lr}
 8017c74:	08017b29 	stmdaeq	r1, {r0, r3, r5, r8, r9, fp, ip, sp, lr}
 8017c78:	08017540 	stmdaeq	r1, {r6, r8, sl, ip, sp, lr}
 8017c7c:	08017c88 	stmdaeq	r1, {r3, r7, sl, fp, ip, sp, lr}
 8017c80:	08017528 	stmdaeq	r1, {r3, r5, r8, sl, ip, sp, lr}
 8017c84:	080179c7 	stmdaeq	r1, {r0, r1, r2, r6, r7, r8, fp, ip, sp, lr}

08017c88 <index_js>:
 8017c88:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 8017c8c:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 8017c90:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8017c94:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 8017c98:	534a7465 	movtpl	r7, #42085	; 0xa465
 8017c9c:	6a284e4f 	bvs	8a2b5e0 <__exidx_end+0xa12814>
 8017ca0:	296e6f73 	stmdbcs	lr!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8017ca4:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 8017ca8:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 8017cac:	6c727520 	cfldr64vs	mvdx7, [r2], #-128	; 0xffffff80
 8017cb0:	6a2f273d 	bvs	8be19ac <__exidx_end+0xbc8be0>
 8017cb4:	2f6e6f73 	svccs	0x006e6f73
 8017cb8:	202b2027 	eorcs	r2, fp, r7, lsr #32
 8017cbc:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 8017cc0:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 8017cc4:	20797274 	rsbscs	r7, r9, r4, ror r2
 8017cc8:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 8017ccc:	656c0909 	strbvs	r0, [ip, #-2313]!	; 0xfffff6f7
 8017cd0:	65722074 	ldrbvs	r2, [r2, #-116]!	; 0xffffff8c
 8017cd4:	77613d73 			; <UNDEFINED> instruction: 0x77613d73
 8017cd8:	20746961 	rsbscs	r6, r4, r1, ror #18
 8017cdc:	63746566 	cmnvs	r4, #427819008	; 0x19800000
 8017ce0:	72752868 	rsbsvc	r2, r5, #104, 16	; 0x680000
 8017ce4:	0a3b296c 	beq	8ee229c <__exidx_end+0xec94d0>
 8017ce8:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 8017cec:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
 8017cf0:	61206e72 			; <UNDEFINED> instruction: 0x61206e72
 8017cf4:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 8017cf8:	73657220 	cmnvc	r5, #32, 4
 8017cfc:	6f736a2e 	svcvs	0x00736a2e
 8017d00:	3b29286e 	blcc	8a61ec0 <__exidx_end+0xa490f4>
 8017d04:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 8017d08:	74616320 	strbtvc	r6, [r1], #-800	; 0xfffffce0
 8017d0c:	28206863 	stmdacs	r0!, {r0, r1, r5, r6, fp, sp, lr}
 8017d10:	6f727265 	svcvs	0x00727265
 8017d14:	7b202972 	blvc	88222e4 <__exidx_end+0x809518>
 8017d18:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8017d1c:	6e6f6309 	cdpvs	3, 6, cr6, cr15, cr9, {0}
 8017d20:	656c6f73 	strbvs	r6, [ip, #-3955]!	; 0xfffff08d
 8017d24:	676f6c2e 	strbvs	r6, [pc, -lr, lsr #24]!
 8017d28:	72726528 	rsbsvc	r6, r2, #40, 10	; 0xa000000
 8017d2c:	3b29726f 	blcc	8a746f0 <__exidx_end+0xa5b924>
 8017d30:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 8017d34:	0a0a7d0a 	beq	82b7164 <__exidx_end+0x29e398>
 8017d38:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 8017d3c:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 8017d40:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8017d44:	72206e6f 	eorvc	r6, r0, #1776	; 0x6f0
 8017d48:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 8017d4c:	73694c72 	cmnvc	r9, #29184	; 0x7200
 8017d50:	20292874 	eorcs	r2, r9, r4, ror r8
 8017d54:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 8017d58:	2074656c 	rsbscs	r6, r4, ip, ror #10
 8017d5c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8017d60:	6177613d 	cmnvs	r7, sp, lsr r1
 8017d64:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 8017d68:	534a7465 	movtpl	r7, #42085	; 0xa465
 8017d6c:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8017d70:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8017d74:	0a3b2927 	beq	8ee2218 <__exidx_end+0xec944c>
 8017d78:	6f640909 	svcvs	0x00640909
 8017d7c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 8017d80:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 8017d84:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 8017d88:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 8017d8c:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 8017d90:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 8017d94:	73694c64 	cmnvc	r9, #100, 24	; 0x6400
 8017d98:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 8017d9c:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 8017da0:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 8017da4:	3c223d4c 	stccc	13, cr3, [r2], #-304	; 0xfffffed0
 8017da8:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 8017dac:	73696c2b 	cmnvc	r9, #11008	; 0x2b00
 8017db0:	696c2e74 	stmdbvs	ip!, {r2, r4, r5, r6, r9, sl, fp, sp}^
 8017db4:	6e2e7473 	mcrvs	4, 1, r7, cr14, cr3, {3}
 8017db8:	2b656d61 	blcs	9973344 <__exidx_end+0x195a578>
 8017dbc:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8017d3c <index_js+0xb4>
 8017dc0:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 8017dc4:	2b223e69 	blcs	88a7770 <__exidx_end+0x88e9a4>
 8017dc8:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8017dcc:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 8017dd0:	6f6e2e74 	svcvs	0x006e2e74
 8017dd4:	742e6564 	strtvc	r6, [lr], #-1380	; 0xfffffa9c
 8017dd8:	2b657079 	blcs	9973fc4 <__exidx_end+0x195b1f8>
 8017ddc:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8017d5c <index_js+0xd4>
 8017de0:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 8017de4:	2b223e69 	blcs	88a7790 <__exidx_end+0x88e9c4>
 8017de8:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8017dec:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 8017df0:	6f6e2e74 	svcvs	0x006e2e74
 8017df4:	702e6564 	eorvc	r6, lr, r4, ror #10
 8017df8:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
 8017dfc:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8017e00:	2f3c222b 	svccs	0x003c222b
 8017e04:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 8017e08:	0a7d0a3b 	beq	9f5a6fc <__exidx_end+0x1f41930>
 8017e0c:	7973610a 	ldmdbvc	r3!, {r1, r3, r8, sp, lr}^
 8017e10:	6620636e 	strtvs	r6, [r0], -lr, ror #6
 8017e14:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 8017e18:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 8017e1c:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 8017e20:	69447265 	stmdbvs	r4, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8017e24:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8017e28:	2879726f 	ldmdacs	r9!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 8017e2c:	0a7b2029 	beq	9edfed8 <__exidx_end+0x1ec710c>
 8017e30:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 8017e34:	64207465 	strtvs	r7, [r0], #-1125	; 0xfffffb9b
 8017e38:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 8017e3c:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8017e40:	6177613d 	cmnvs	r7, sp, lsr r1
 8017e44:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 8017e48:	534a7465 	movtpl	r7, #42085	; 0xa465
 8017e4c:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8017e50:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8017e54:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8017e58:	3b292779 	blcc	8a61c44 <__exidx_end+0xa48e78>
 8017e5c:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8017e60:	2074656c 	rsbscs	r6, r4, ip, ror #10
 8017e64:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8017e68:	0a22223d 	beq	88a0764 <__exidx_end+0x887998>
 8017e6c:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 8017e70:	66207465 	strtvs	r7, [r0], -r5, ror #8
 8017e74:	6e656c69 	cdpvs	12, 6, cr6, cr5, cr9, {3}
 8017e78:	73656d61 	cmnvc	r5, #6208	; 0x1840
 8017e7c:	6a624f3d 	bvs	98abb78 <__exidx_end+0x1892dac>
 8017e80:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 8017e84:	7379656b 	cmnvc	r9, #448790528	; 0x1ac00000
 8017e88:	72696428 	rsbvc	r6, r9, #40, 8	; 0x28000000
 8017e8c:	6f746365 	svcvs	0x00746365
 8017e90:	225b7972 	subscs	r7, fp, #1867776	; 0x1c8000
 8017e94:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8017e98:	295d2273 	ldmdbcs	sp, {r0, r1, r4, r5, r6, r9, sp}^
 8017e9c:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 8017ea0:	6c696609 	stclvs	6, cr6, [r9], #-36	; 0xffffffdc
 8017ea4:	6d616e65 	stclvs	14, cr6, [r1, #-404]!	; 0xfffffe6c
 8017ea8:	662e7365 	strtvs	r7, [lr], -r5, ror #6
 8017eac:	6145726f 	cmpvs	r5, pc, ror #4
 8017eb0:	66286863 	strtvs	r6, [r8], -r3, ror #16
 8017eb4:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 8017eb8:	286e6f69 	stmdacs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 8017ebc:	2979656b 	ldmdbcs	r9!, {r0, r1, r3, r5, r6, r8, sl, sp, lr}^
 8017ec0:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 8017ec4:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 8017ec8:	20726176 	rsbscs	r6, r2, r6, ror r1
 8017ecc:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 8017ed0:	203d2065 	eorscs	r2, sp, r5, rrx
 8017ed4:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8017ed8:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8017edc:	66225b79 			; <UNDEFINED> instruction: 0x66225b79
 8017ee0:	73656c69 	cmnvc	r5, #26880	; 0x6900
 8017ee4:	6b5b5d22 	blvs	96ef374 <__exidx_end+0x16d65a8>
 8017ee8:	3b5d7965 	blcc	9776484 <__exidx_end+0x175d6b8>
 8017eec:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8017ef0:	74680909 	strbtvc	r0, [r8], #-2313	; 0xfffff6f7
 8017ef4:	3d2b6c6d 	stccc	12, cr6, [fp, #-436]!	; 0xfffffe4c
 8017ef8:	706f3c22 	rsbvc	r3, pc, r2, lsr #24
 8017efc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8017f00:	6c617620 	stclvs	6, cr7, [r1], #-128	; 0xffffff80
 8017f04:	223d6575 	eorscs	r6, sp, #490733568	; 0x1d400000
 8017f08:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 8017f0c:	223e222b 	eorscs	r2, lr, #-1342177278	; 0xb0000002
 8017f10:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 8017f14:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 8017f18:	706f2f3c 	rsbvc	r2, pc, ip, lsr pc	; <UNPREDICTABLE>
 8017f1c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8017f20:	0a3b223e 	beq	8ee0820 <__exidx_end+0xec7a54>
 8017f24:	7d090909 	vstrvc.16	s0, [r9, #-18]	; 0xffffffee	; <UNPREDICTABLE>
 8017f28:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 8017f2c:	6f640909 	svcvs	0x00640909
 8017f30:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 8017f34:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 8017f38:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 8017f3c:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 8017f40:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 8017f44:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 8017f48:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 8017f4c:	6f746365 	svcvs	0x00746365
 8017f50:	29227972 	stmdbcs	r2!, {r1, r4, r5, r6, r8, fp, ip, sp, lr}
 8017f54:	6e6e692e 	vmulvs.f16	s13, s28, s29	; <UNPREDICTABLE>
 8017f58:	54487265 	strbpl	r7, [r8], #-613	; 0xfffffd9b
 8017f5c:	683d4c4d 	ldmdavs	sp!, {r0, r2, r3, r6, sl, fp, lr}
 8017f60:	3b6c6d74 	blcc	9b33538 <__exidx_end+0x1b1a76c>
 8017f64:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8017f68:	5f746567 	svcpl	0x00746567
 8017f6c:	28747874 	ldmdacs	r4!, {r2, r4, r5, r6, fp, ip, sp, lr}^
 8017f70:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8017f74:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 8017f78:	5d305b73 	fldmdbxpl	r0!, {d5-d61}	;@ Deprecated
 8017f7c:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 8017f80:	73610a0a 	cmnvc	r1, #40960	; 0xa000
 8017f84:	20636e79 	rsbcs	r6, r3, r9, ror lr
 8017f88:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 8017f8c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8017f90:	6e657220 	cdpvs	2, 6, cr7, cr5, cr0, {1}
 8017f94:	56726564 	ldrbtpl	r6, [r2], -r4, ror #10
 8017f98:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8017f9c:	29286e6f 	stmdbcs	r8!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
 8017fa0:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 8017fa4:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 8017fa8:	72657620 	rsbvc	r7, r5, #32, 12	; 0x2000000
 8017fac:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 8017fb0:	6177613d 	cmnvs	r7, sp, lsr r1
 8017fb4:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 8017fb8:	534a7465 	movtpl	r7, #42085	; 0xa465
 8017fbc:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8017fc0:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8017fc4:	276e6f69 	strbcs	r6, [lr, -r9, ror #30]!
 8017fc8:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 8017fcc:	636f6409 	cmnvs	pc, #150994944	; 0x9000000
 8017fd0:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 8017fd4:	65672e74 	strbvs	r2, [r7, #-3700]!	; 0xfffff18c
 8017fd8:	656c4574 	strbvs	r4, [ip, #-1396]!	; 0xfffffa8c
 8017fdc:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 8017fe0:	64497942 	strbvs	r7, [r9], #-2370	; 0xfffff6be
 8017fe4:	64692228 	strbtvs	r2, [r9], #-552	; 0xfffffdd8
 8017fe8:	73726556 	cmnvc	r2, #360710144	; 0x15800000
 8017fec:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 8017ff0:	6e692e29 	cdpvs	14, 6, cr2, cr9, cr9, {1}
 8017ff4:	4872656e 	ldmdami	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 8017ff8:	3d4c4d54 	stclcc	13, cr4, [ip, #-336]	; 0xfffffeb0
 8017ffc:	696c3c22 	stmdbvs	ip!, {r1, r5, sl, fp, ip, sp}^
 8018000:	2b22563e 	blcs	88ad900 <__exidx_end+0x894b34>
 8018004:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8018008:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 801800c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8018010:	2b6e6f69 	blcs	9bb3dbc <__exidx_end+0x1b9aff0>
 8018014:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8017f94 <index_js+0x30c>
 8018018:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 801801c:	2b223e69 	blcs	88a79c8 <__exidx_end+0x88ebfc>
 8018020:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8018024:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 8018028:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 801802c:	61642e64 	cmnvs	r4, r4, ror #28
 8018030:	222b6574 	eorcs	r6, fp, #116, 10	; 0x1d000000
 8018034:	696c2f3c 	stmdbvs	ip!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 8018038:	696c3c3e 	stmdbvs	ip!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 801803c:	762b223e 			; <UNDEFINED> instruction: 0x762b223e
 8018040:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8018044:	622e6e6f 	eorvs	r6, lr, #1776	; 0x6f0
 8018048:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
 801804c:	6d69742e 	cfstrdvs	mvd7, [r9, #-184]!	; 0xffffff48
 8018050:	3c222b65 			; <UNDEFINED> instruction: 0x3c222b65
 8018054:	3e696c2f 	cdpcc	12, 6, cr6, cr9, cr15, {1}
 8018058:	3e696c3c 	mcrcc	12, 3, r6, cr9, cr12, {1}
 801805c:	65762b22 	ldrbvs	r2, [r6, #-2850]!	; 0xfffff4de
 8018060:	6f697372 	svcvs	0x00697372
 8018064:	6f622e6e 	svcvs	0x00622e6e
 8018068:	2b647261 	blcs	99349f4 <__exidx_end+0x191bc28>
 801806c:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8017fec <index_js+0x364>
 8018070:	3b223e69 	blcc	88a7a1c <__exidx_end+0x88ec50>
 8018074:	0a0a7d0a 	beq	82b74a4 <__exidx_end+0x29e6d8>
 8018078:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 801807c:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 8018080:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8018084:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 8018088:	745f7465 	ldrbvc	r7, [pc], #-1125	; 8018090 <index_js+0x408>
 801808c:	73287478 			; <UNDEFINED> instruction: 0x73287478
 8018090:	20296c65 	eorcs	r6, r9, r5, ror #24
 8018094:	6c090a7b 			; <UNDEFINED> instruction: 0x6c090a7b
 8018098:	74207465 	strtvc	r7, [r0], #-1125	; 0xfffffb9b
 801809c:	613d7478 	teqvs	sp, r8, ror r4
 80180a0:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 80180a4:	74656720 	strbtvc	r6, [r5], #-1824	; 0xfffff8e0
 80180a8:	4e4f534a 	cdpmi	3, 4, cr5, cr15, cr10, {2}
 80180ac:	6c657328 	stclvs	3, cr7, [r5], #-160	; 0xffffff60
 80180b0:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 80180b4:	2074656c 	rsbscs	r6, r4, ip, ror #10
 80180b8:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 80180bc:	3b22223d 	blcc	88a09b8 <__exidx_end+0x887bec>
 80180c0:	624f090a 	subvs	r0, pc, #163840	; 0x28000
 80180c4:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 80180c8:	79656b2e 	stmdbvc	r5!, {r1, r2, r3, r5, r8, r9, fp, sp, lr}^
 80180cc:	78742873 	ldmdavc	r4!, {r0, r1, r4, r5, r6, fp, sp}^
 80180d0:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 80180d4:	2e295d6c 	cdpcs	13, 2, cr5, cr9, cr12, {3}
 80180d8:	45726f66 	ldrbmi	r6, [r2, #-3942]!	; 0xfffff09a
 80180dc:	28686361 	stmdacs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 80180e0:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 80180e4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 80180e8:	79656b28 	stmdbvc	r5!, {r3, r5, r8, r9, fp, sp, lr}^
 80180ec:	0a7b2029 	beq	9ee0198 <__exidx_end+0x1ec73cc>
 80180f0:	61760909 	cmnvs	r6, r9, lsl #18
 80180f4:	61762072 	cmnvs	r6, r2, ror r0
 80180f8:	2065756c 	rsbcs	r7, r5, ip, ror #10
 80180fc:	7874203d 	ldmdavc	r4!, {r0, r2, r3, r4, r5, sp}^
 8018100:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 8018104:	6b5b5d6c 	blvs	96ef6bc <__exidx_end+0x16d68f0>
 8018108:	3b5d7965 	blcc	97766a4 <__exidx_end+0x175d8d8>
 801810c:	2009090a 	andcs	r0, r9, sl, lsl #18
 8018110:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8018114:	3c223d2b 	stccc	13, cr3, [r2], #-172	; 0xffffff54
 8018118:	3c3e7274 	lfmcc	f7, 4, [lr], #-464	; 0xfffffe30
 801811c:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 8018120:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 8018124:	2f3c222b 	svccs	0x003c222b
 8018128:	3c3e6474 	cfldrscc	mvf6, [lr], #-464	; 0xfffffe30
 801812c:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 8018130:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 8018134:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 8018138:	64742f3c 	ldrbtvs	r2, [r4], #-3900	; 0xfffff0c4
 801813c:	742f3c3e 	strtvc	r3, [pc], #-3134	; 8018144 <index_js+0x4bc>
 8018140:	3b223e72 	blcc	88a7b10 <__exidx_end+0x88ed44>
 8018144:	297d090a 	ldmdbcs	sp!, {r1, r3, r8, fp}^
 8018148:	64090a3b 	strvs	r0, [r9], #-2619	; 0xfffff5c5
 801814c:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 8018150:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 8018154:	45746567 	ldrbmi	r6, [r4, #-1383]!	; 0xfffffa99
 8018158:	656d656c 	strbvs	r6, [sp, #-1388]!	; 0xfffffa94
 801815c:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 8018160:	22286449 	eorcs	r6, r8, #1224736768	; 0x49000000
 8018164:	78546469 	ldmdavc	r4, {r0, r3, r5, r6, sl, sp, lr}^
 8018168:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 801816c:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 8018170:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 8018174:	74683d4c 	strbtvc	r3, [r8], #-3404	; 0xfffff2b4
 8018178:	0a3b6c6d 	beq	8ef3334 <__exidx_end+0xeda568>
 801817c:	720a0a7d 	andvc	r0, sl, #512000	; 0x7d000
 8018180:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 8018184:	73694c72 	cmnvc	r9, #29184	; 0x7200
 8018188:	3b292874 	blcc	8a62360 <__exidx_end+0xa49594>
 801818c:	6e65720a 	cdpvs	2, 6, cr7, cr5, cr10, {0}
 8018190:	44726564 	ldrbtmi	r6, [r2], #-1380	; 0xfffffa9c
 8018194:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 8018198:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801819c:	0a3b2928 	beq	8ee2644 <__exidx_end+0xec9878>
 80181a0:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 80181a4:	65567265 	ldrbvs	r7, [r6, #-613]	; 0xfffffd9b
 80181a8:	6f697372 	svcvs	0x00697372
 80181ac:	3b29286e 	blcc	8a6236c <__exidx_end+0xa495a0>
 80181b0:	0000000a 	andeq	r0, r0, sl

080181b4 <s_aStorSize>:
 80181b4:	00000060 	andeq	r0, r0, r0, rrx
 80181b8:	00000090 	muleq	r0, r0, r0
 80181bc:	00000020 	andeq	r0, r0, r0, lsr #32
 80181c0:	00000040 	andeq	r0, r0, r0, asr #32
 80181c4:	00000060 	andeq	r0, r0, r0, rrx
 80181c8:	00000040 	andeq	r0, r0, r0, asr #32
 80181cc:	00000020 	andeq	r0, r0, r0, lsr #32
 80181d0:	00000020 	andeq	r0, r0, r0, lsr #32
 80181d4:	000001e0 	andeq	r0, r0, r0, ror #3
 80181d8:	00000040 	andeq	r0, r0, r0, asr #32
 80181dc:	00000020 	andeq	r0, r0, r0, lsr #32
 80181e0:	00000060 	andeq	r0, r0, r0, rrx
 80181e4:	00000030 	andeq	r0, r0, r0, lsr r0
 80181e8:	00000020 	andeq	r0, r0, r0, lsr #32
 80181ec:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
 80181f0:	00000030 	andeq	r0, r0, r0, lsr r0
 80181f4:	00000040 	andeq	r0, r0, r0, asr #32
 80181f8:	00000020 	andeq	r0, r0, r0, lsr #32
 80181fc:	00000060 	andeq	r0, r0, r0, rrx
 8018200:	00000020 	andeq	r0, r0, r0, lsr #32
 8018204:	00000400 	andeq	r0, r0, r0, lsl #8
 8018208:	00000020 	andeq	r0, r0, r0, lsr #32
 801820c:	00000020 	andeq	r0, r0, r0, lsr #32
 8018210:	00000040 	andeq	r0, r0, r0, asr #32
 8018214:	00000060 	andeq	r0, r0, r0, rrx
 8018218:	00000020 	andeq	r0, r0, r0, lsr #32
 801821c:	00000020 	andeq	r0, r0, r0, lsr #32
 8018220:	00000020 	andeq	r0, r0, r0, lsr #32

08018224 <vtable for StoreArtNet>:
	...
 801822c:	08010515 	stmdaeq	r1, {r0, r2, r4, r8, sl}
 8018230:	080106dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r9, sl}
 8018234:	0801051d 	stmdaeq	r1, {r0, r2, r3, r4, r8, sl}
 8018238:	080106f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r9, sl}
 801823c:	08010541 	stmdaeq	r1, {r0, r6, r8, sl}
 8018240:	08010571 	stmdaeq	r1, {r0, r4, r5, r6, r8, sl}
 8018244:	0801059d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, sl}
 8018248:	080105d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r8, sl}
 801824c:	08010609 	stmdaeq	r1, {r0, r3, r9, sl}
 8018250:	0801063d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r9, sl}
 8018254:	0801068d 	stmdaeq	r1, {r0, r2, r3, r7, r9, sl}
 8018258:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 801825c:	00000000 	andeq	r0, r0, r0
 8018260:	08010517 	stmdaeq	r1, {r0, r1, r2, r4, r8, sl}
 8018264:	080106e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r9, sl}
 8018268:	08010569 	stmdaeq	r1, {r0, r3, r5, r6, r8, sl}
 801826c:	08010595 	stmdaeq	r1, {r0, r2, r4, r7, r8, sl}
 8018270:	080105d1 	stmdaeq	r1, {r0, r4, r6, r7, r8, sl}
 8018274:	08010601 	stmdaeq	r1, {r0, r9, sl}
 8018278:	08010635 	stmdaeq	r1, {r0, r2, r4, r5, r9, sl}
 801827c:	08010685 	stmdaeq	r1, {r0, r2, r7, r9, sl}
 8018280:	080106d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r9, sl}

08018284 <vtable for StoreDisplayUdf>:
	...
 801828c:	0801072d 	stmdaeq	r1, {r0, r2, r3, r5, r8, r9, sl}
 8018290:	08010775 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, r9, sl}
 8018294:	08010751 	stmdaeq	r1, {r0, r4, r6, r8, r9, sl}
 8018298:	08010731 	stmdaeq	r1, {r0, r4, r5, r8, r9, sl}

0801829c <vtable for StoreNetwork>:
	...
 80182a4:	08010795 	stmdaeq	r1, {r0, r2, r4, r7, r8, r9, sl}
 80182a8:	080108a9 	stmdaeq	r1, {r0, r3, r5, r7, fp}
 80182ac:	0801079d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, r9, sl}
 80182b0:	080108bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, fp}
 80182b4:	0801084d 	stmdaeq	r1, {r0, r2, r3, r6, fp}
 80182b8:	08010821 	stmdaeq	r1, {r0, r5, fp}
 80182bc:	080107f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r8, r9, sl}
 80182c0:	08010879 	stmdaeq	r1, {r0, r3, r4, r5, r6, fp}
 80182c4:	080107c1 	stmdaeq	r1, {r0, r6, r7, r8, r9, sl}
 80182c8:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 80182cc:	00000000 	andeq	r0, r0, r0
 80182d0:	08010797 	stmdaeq	r1, {r0, r1, r2, r4, r7, r8, r9, sl}
 80182d4:	080108b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, fp}
 80182d8:	08010871 	stmdaeq	r1, {r0, r4, r5, r6, fp}
 80182dc:	08010845 	stmdaeq	r1, {r0, r2, r6, fp}
 80182e0:	08010819 	stmdaeq	r1, {r0, r3, r4, fp}
 80182e4:	080108a1 	stmdaeq	r1, {r0, r5, r7, fp}
 80182e8:	080107e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, r9, sl}

080182ec <vtable for StoreRemoteConfig>:
	...
 80182f4:	080108f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, fp}
 80182f8:	08010939 	stmdaeq	r1, {r0, r3, r4, r5, r8, fp}
 80182fc:	08010915 	stmdaeq	r1, {r0, r2, r4, r8, fp}
 8018300:	080108f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, fp}

08018304 <vtable for StoreWS28xxDmx>:
	...
 801830c:	08010959 	stmdaeq	r1, {r0, r3, r4, r6, r8, fp}
 8018310:	08010ac9 	stmdaeq	r1, {r0, r3, r6, r7, r9, fp}
 8018314:	08010961 	stmdaeq	r1, {r0, r5, r6, r8, fp}
 8018318:	08010add 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r9, fp}
 801831c:	08010a95 	stmdaeq	r1, {r0, r2, r4, r7, r9, fp}
 8018320:	08010a61 	stmdaeq	r1, {r0, r5, r6, r9, fp}
 8018324:	08010a29 	stmdaeq	r1, {r0, r3, r5, r9, fp}
 8018328:	080109f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r8, fp}
 801832c:	080109b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r8, fp}
 8018330:	08010985 	stmdaeq	r1, {r0, r2, r7, r8, fp}
 8018334:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 8018338:	00000000 	andeq	r0, r0, r0
 801833c:	0801095b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r8, fp}
 8018340:	08010ad5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r9, fp}
 8018344:	08010ac1 	stmdaeq	r1, {r0, r6, r7, r9, fp}
 8018348:	08010a8d 	stmdaeq	r1, {r0, r2, r3, r7, r9, fp}
 801834c:	08010a59 	stmdaeq	r1, {r0, r3, r4, r6, r9, fp}
 8018350:	08010a21 	stmdaeq	r1, {r0, r5, r9, fp}
 8018354:	080109e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, fp}
 8018358:	080109b1 	stmdaeq	r1, {r0, r4, r5, r7, r8, fp}
 801835c:	3a434d46 	bcc	90eb87c <__exidx_end+0x10d2ab0>
 8018360:	74654420 	strbtvc	r4, [r5], #-1056	; 0xfffffbe0
 8018364:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0xfffffc9b
 8018368:	73252064 			; <UNDEFINED> instruction: 0x73252064
 801836c:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
 8018370:	6f742068 	svcvs	0x00742068
 8018374:	206c6174 	rsbcs	r6, ip, r4, ror r1
 8018378:	62206425 	eorvs	r6, r0, #620756992	; 0x25000000
 801837c:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
 8018380:	64255b20 	strtvs	r5, [r5], #-2848	; 0xfffff4e0
 8018384:	5d426b20 	vstrpl	d22, [r2, #-128]	; 0xffffff80
 8018388:	6374000a 	cmnvs	r4, #10
 801838c:	65625f70 	strbvs	r5, [r2, #-3952]!	; 0xfffff090
 8018390:	3a6e6967 	bcc	9bb2934 <__exidx_end+0x1b99b68>
 8018394:	6f6f7420 	svcvs	0x006f7420
 8018398:	6e616d20 	cdpvs	13, 6, cr6, cr1, cr0, {1}
 801839c:	6f632079 	svcvs	0x00632079
 80183a0:	63656e6e 	cmnvs	r5, #1760	; 0x6e0
 80183a4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 80183a8:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
 80183ac:	7500646e 	strvc	r6, [r0, #-1134]	; 0xfffffb92
 80183b0:	6e69626e 	cdpvs	2, 6, cr6, cr9, cr14, {3}
 80183b4:	41000a64 	tstmi	r0, r4, ror #20
 80183b8:	6c205052 	stcvs	0, cr5, [r0], #-328	; 0xfffffeb8
 80183bc:	756b6f6f 	strbvc	r6, [fp, #-3951]!	; 0xfffff091
 80183c0:	61662070 	smcvs	25088	; 0x6200
 80183c4:	64656c69 	strbtvs	r6, [r5], #-3177	; 0xfffff397
 80183c8:	203e2d20 	eorscs	r2, lr, r0, lsr #26
 80183cc:	61666564 	cmnvs	r6, r4, ror #10
 80183d0:	20746c75 	rsbscs	r6, r4, r5, ror ip
 80183d4:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 80183d8:	0a796177 	beq	9e709bc <__exidx_end+0x1e57bf0>
 80183dc:	50524100 	subspl	r4, r2, r0, lsl #2
 80183e0:	6f6f6c20 	svcvs	0x006f6c20
 80183e4:	2070756b 	rsbscs	r7, r0, fp, ror #10
 80183e8:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
 80183ec:	000a6465 	andeq	r6, sl, r5, ror #8

080183f0 <NetworkConst::MSG_MDNS_CONFIG>:
 80183f0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 80183f4:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 80183f8:	20676e69 	rsbcs	r6, r7, r9, ror #28
 80183fc:	534e444d 	movtpl	r4, #58445	; 0xe44d
	...

08018401 <NetworkConst::MSG_NETWORK_INIT>:
 8018401:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 8018405:	206b726f 	rsbcs	r7, fp, pc, ror #4
 8018409:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 801840d:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
 8018411:	6974617a 	ldmdbvs	r4!, {r1, r3, r4, r5, r6, r8, sp, lr}^
 8018415:	32006e6f 	andcc	r6, r0, #1776	; 0x6f0
 8018419:	302e3432 	eorcc	r3, lr, r2, lsr r4
 801841d:	322e302e 	eorcc	r3, lr, #46	; 0x2e
 8018421:	5f003135 	svcpl	0x00003135
 8018425:	2e706374 	mrccs	3, 3, r6, cr0, cr4, {3}
 8018429:	61636f6c 	cmnvs	r3, ip, ror #30
 801842d:	735f006c 	cmpvc	pc, #108	; 0x6c
 8018431:	69767265 	ldmdbvs	r6!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8018435:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 8018439:	736e645f 	cmnvc	lr, #1593835520	; 0x5f000000
 801843d:	2e64732d 	cdpcs	3, 6, cr7, cr4, cr13, {1}
 8018441:	7064755f 	rsbvc	r7, r4, pc, asr r5
 8018445:	636f6c2e 	cmnvs	pc, #11776	; 0x2e00
 8018449:	6d006c61 	stcvs	12, cr6, [r0, #-388]	; 0xfffffe7c
 801844d:	0a534e44 	beq	94ebd65 <__exidx_end+0x14d2f99>
 8018451:	6f4e2000 	svcvs	0x004e2000
 8018455:	75722074 	ldrbvc	r2, [r2, #-116]!	; 0xffffff8c
 8018459:	6e696e6e 	cdpvs	14, 6, cr6, cr9, cr14, {3}
 801845d:	20000a67 	andcs	r0, r0, r7, ror #20
 8018461:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
 8018465:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8018469:	20000a73 	andcs	r0, r0, r3, ror sl
 801846d:	25207325 	strcs	r7, [r0, #-805]!	; 0xfffffcdb
 8018471:	73252064 			; <UNDEFINED> instruction: 0x73252064
 8018475:	7465000a 	strbtvc	r0, [r5], #-10
 8018479:	67003068 	strvs	r3, [r0, -r8, rrx]
 801847d:	64616769 	strbtvs	r6, [r1], #-1897	; 0xfffff897
 8018481:	63697665 	cmnvs	r9, #105906176	; 0x6500000
 8018485:	4e005f65 	cdpmi	15, 0, cr5, cr0, cr5, {3}
 8018489:	6f777465 	svcvs	0x00777465
 801848d:	000a6b72 	andeq	r6, sl, r2, ror fp
 8018491:	736f4820 	cmnvc	pc, #32, 16	; 0x200000
 8018495:	6d616e74 	stclvs	14, cr6, [r1, #-464]!	; 0xfffffe30
 8018499:	3a202065 	bcc	8820635 <__exidx_end+0x807869>
 801849d:	0a732520 	beq	9ce1925 <__exidx_end+0x1cc8b59>
 80184a1:	66492000 	strbvs	r2, [r9], -r0
 80184a5:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
 80184a9:	20202020 	eorcs	r2, r0, r0, lsr #32
 80184ad:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 80184b1:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 80184b5:	4920000a 	stmdbmi	r0!, {r1, r3}
 80184b9:	2074656e 	rsbscs	r6, r4, lr, ror #10
 80184bd:	20202020 	eorcs	r2, r0, r0, lsr #32
 80184c1:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 80184c5:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80184c9:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 80184cd:	252f6425 	strcs	r6, [pc, #-1061]!	; 80180b0 <index_js+0x428>
 80184d1:	20000a64 	andcs	r0, r0, r4, ror #20
 80184d5:	6d74654e 	cfldr64vs	mvdx6, [r4, #-312]!	; 0xfffffec8
 80184d9:	206b7361 	rsbcs	r7, fp, r1, ror #6
 80184dd:	203a2020 	eorscs	r2, sl, r0, lsr #32
 80184e1:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80184e5:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80184e9:	0a64252e 	beq	99219a9 <__exidx_end+0x1908bdd>
 80184ed:	61472000 	mrsvs	r2, (UNDEF: 71)
 80184f1:	61776574 	cmnvs	r7, r4, ror r5
 80184f5:	20202079 	eorcs	r2, r0, r9, ror r0
 80184f9:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 80184fd:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8018501:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8018505:	20000a64 	andcs	r0, r0, r4, ror #20
 8018509:	616f7242 	cmnvs	pc, r2, asr #4
 801850d:	73616364 	cmnvc	r1, #100, 6	; 0x90000001
 8018511:	203a2074 	eorscs	r2, sl, r4, ror r0
 8018515:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8018519:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801851d:	0a64252e 	beq	99219dd <__exidx_end+0x1908c11>
 8018521:	614d2000 	mrsvs	r2, (UNDEF: 77)
 8018525:	20202063 	eorcs	r2, r0, r3, rrx
 8018529:	20202020 	eorcs	r2, r0, r0, lsr #32
 801852d:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 8018531:	253a7832 	ldrcs	r7, [sl, #-2098]!	; 0xfffff7ce
 8018535:	3a78322e 	bcc	9e24df5 <__exidx_end+0x1e0c029>
 8018539:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 801853d:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 8018541:	2e253a78 			; <UNDEFINED> instruction: 0x2e253a78
 8018545:	253a7832 	ldrcs	r7, [sl, #-2098]!	; 0xfffff7ce
 8018549:	0a78322e 	beq	9e24e09 <__exidx_end+0x1e0c03d>
 801854d:	6f4d2000 	svcvs	0x004d2000
 8018551:	20206564 	eorcs	r6, r0, r4, ror #10
 8018555:	20202020 	eorcs	r2, r0, r0, lsr #32
 8018559:	6325203a 			; <UNDEFINED> instruction: 0x6325203a
 801855d:	7453000a 	ldrbvc	r0, [r3], #-10
 8018561:	63697461 	cmnvs	r9, #1627389952	; 0x61000000
 8018565:	00504920 	subseq	r4, r0, r0, lsr #18

08018569 <NetworkParamsConst::IP_ADDRESS>:
 8018569:	615f7069 	cmpvs	pc, r9, rrx
 801856d:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 8018571:	 	strvs	r7, [r0], #-883	; 0xfffffc8d

08018574 <NetworkParamsConst::DEFAULT_GATEWAY>:
 8018574:	61666564 	cmnvs	r6, r4, ror #10
 8018578:	5f746c75 	svcpl	0x00746c75
 801857c:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 8018580:	00796177 	rsbseq	r6, r9, r7, ror r1

08018584 <NetworkParamsConst::DHCP_RETRY_TIME>:
 8018584:	70636864 	rsbvc	r6, r3, r4, ror #16
 8018588:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
 801858c:	745f7972 	ldrbvc	r7, [pc], #-2418	; 8018594 <NetworkParamsConst::HOSTNAME>
 8018590:	00656d69 	rsbeq	r6, r5, r9, ror #26

08018594 <NetworkParamsConst::HOSTNAME>:
 8018594:	74736f68 	ldrbtvc	r6, [r3], #-3944	; 0xfffff098
 8018598:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

0801859d <NetworkParamsConst::NET_MASK>:
 801859d:	5f74656e 	svcpl	0x0074656e
 80185a1:	6b73616d 	blvs	9cf0b5d <__exidx_end+0x1cd7d91>
	...

080185a6 <NetworkParamsConst::USE_DHCP>:
 80185a6:	5f657375 	svcpl	0x00657375
 80185aa:	70636864 	rsbvc	r6, r3, r4, ror #16
	...

080185af <NetworkParamsConst::FILE_NAME>:
 80185af:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 80185b3:	2e6b726f 	cdpcs	2, 6, cr7, cr11, cr15, {3}
 80185b7:	00747874 	rsbseq	r7, r4, r4, ror r8
 80185bb:	65687445 	strbvs	r7, [r8, #-1093]!	; 0xfffffbbb
 80185bf:	74656e72 	strbtvc	r6, [r5], #-3698	; 0xfffff18e
 80185c3:	61747320 	cmnvs	r4, r0, lsr #6
 80185c7:	25007472 	strcs	r7, [r0, #-1138]	; 0xfffffb8e
 80185cb:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80185cf:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 80185d3:	252f6425 	strcs	r6, [pc, #-1061]!	; 80181b6 <s_aStorSize+0x2>
 80185d7:	63252064 			; <UNDEFINED> instruction: 0x63252064
 80185db:	203a4e00 	eorscs	r4, sl, r0, lsl #28
 80185df:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80185e3:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80185e7:	0064252e 	rsbeq	r2, r4, lr, lsr #10
 80185eb:	25203a47 	strcs	r3, [r0, #-2631]!	; 0xfffff5b9
 80185ef:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80185f3:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 80185f7:	46006425 	strmi	r6, [r0], -r5, lsr #8
 80185fb:	776d7269 	strbvc	r7, [sp, -r9, ror #4]!
 80185ff:	20657261 	rsbcs	r7, r5, r1, ror #4
 8018603:	2a2e2556 	bcs	8ba1b63 <__exidx_end+0xb88d97>
 8018607:	48440073 	stmdami	r4, {r0, r1, r4, r5, r6}^
 801860b:	72205043 	eorvc	r5, r0, #67	; 0x43
 801860f:	77656e65 	strbvc	r6, [r5, -r5, ror #28]!
 8018613:	00676e69 	rsbeq	r6, r7, r9, ror #28
 8018617:	50434844 	subpl	r4, r3, r4, asr #16
 801861b:	74657220 	strbtvc	r7, [r5], #-544	; 0xfffffde0
 801861f:	6e697972 			; <UNDEFINED> instruction: 0x6e697972
 8018623:	654e0067 	strbvs	r0, [lr, #-103]	; 0xffffff99
 8018627:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 801862b:	6873206b 	ldmdavs	r3!, {r0, r1, r3, r5, r6, sp}^
 801862f:	6f647475 	svcvs	0x00647475
 8018633:	00006e77 	andeq	r6, r0, r7, ror lr
	...

08018638 <pArray>:
 8018638:	080186cc 	stmdaeq	r1, {r2, r3, r6, r7, r9, sl, pc}
 801863c:	08018688 	stmdaeq	r1, {r3, r7, r9, sl, pc}
 8018640:	08018569 	stmdaeq	r1, {r0, r3, r5, r6, r8, sl, pc}
 8018644:	080186d2 	stmdaeq	r1, {r1, r4, r6, r7, r9, sl, pc}
 8018648:	0801893d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r8, fp, pc}
 801864c:	08018693 	stmdaeq	r1, {r0, r1, r4, r7, r9, sl, pc}
 8018650:	08016d3b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r8, sl, fp, sp, lr}
 8018654:	08018594 	stmdaeq	r1, {r2, r4, r7, r8, sl, pc}
 8018658:	08018813 	stmdaeq	r1, {r0, r1, r4, fp, pc}
 801865c:	08018823 	stmdaeq	r1, {r0, r1, r5, fp, pc}
 8018660:	08018833 	stmdaeq	r1, {r0, r1, r4, r5, fp, pc}
 8018664:	08018843 	stmdaeq	r1, {r0, r1, r6, fp, pc}
 8018668:	0801859d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, sl, pc}
 801866c:	0801892b 	stmdaeq	r1, {r0, r1, r3, r5, r8, fp, pc}
 8018670:	08016d46 	stmdaeq	r1, {r1, r2, r6, r8, sl, fp, sp, lr}
 8018674:	08016d5e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}
 8018678:	08016d76 	stmdaeq	r1, {r1, r2, r4, r5, r6, r8, sl, fp, sp, lr}
 801867c:	08016d8e 	stmdaeq	r1, {r1, r2, r3, r7, r8, sl, fp, sp, lr}
 8018680:	08018574 	stmdaeq	r1, {r2, r4, r5, r6, r8, sl, pc}
 8018684:	080186a0 	stmdaeq	r1, {r5, r7, r9, sl, pc}

08018688 <DisplayUdfParamsConst::BOARD_NAME>:
 8018688:	72616f62 	rsbvc	r6, r1, #392	; 0x188
 801868c:	616e5f64 	cmnvs	lr, r4, ror #30
 8018690:	 	tstvs	r0, sp, ror #10

08018693 <DisplayUdfParamsConst::ACTIVE_PORTS>:
 8018693:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 8018697:	705f6576 	subsvc	r6, pc, r6, ror r5	; <UNPREDICTABLE>
 801869b:	7374726f 	cmnvc	r4, #-268435450	; 0xf0000006
	...

080186a0 <DisplayUdfParamsConst::DMX_DIRECTION>:
 80186a0:	5f786d64 	svcpl	0x00786d64
 80186a4:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 80186a8:	6f697463 	svcvs	0x00697463
 80186ac:	 	ldclvs	0, cr0, [r3], #-440	; 0xfffffe48

080186ae <DisplayUdfParamsConst::SLEEP_TIMEOUT>:
 80186ae:	65656c73 	strbvs	r6, [r5, #-3187]!	; 0xfffff38d
 80186b2:	69745f70 	ldmdbvs	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 80186b6:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8018151 <index_js+0x4c9>
 80186ba:	 	stclvs	0, cr0, [r6], #-464	; 0xfffffe30

080186bc <DisplayUdfParamsConst::FLIP_VERTICALLY>:
 80186bc:	70696c66 	rsbvc	r6, r9, r6, ror #24
 80186c0:	7265765f 	rsbvc	r7, r5, #99614720	; 0x5f00000
 80186c4:	61636974 	smcvs	13972	; 0x3694
 80186c8:	00796c6c 	rsbseq	r6, r9, ip, ror #24

080186cc <DisplayUdfParamsConst::TITLE>:
 80186cc:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 80186d0:	 	ldrbvs	r0, [r6, #-101]!	; 0xffffff9b

080186d2 <DisplayUdfParamsConst::VERSION>:
 80186d2:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 80186d6:	006e6f69 	rsbeq	r6, lr, r9, ror #30

080186da <DisplayUdfParamsConst::FILE_NAME>:
 80186da:	70736964 	rsbsvc	r6, r3, r4, ror #18
 80186de:	2e79616c 	rpwcsez	f6, f1, #4.0
 80186e2:	00747874 	rsbseq	r7, r4, r4, ror r8

080186e6 <DisplayUdfParamsConst::INTENSITY>:
 80186e6:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 80186ea:	7469736e 	strbtvc	r7, [r9], #-878	; 0xfffffc92
 80186ee:	20200079 	eorcs	r0, r0, r9, ror r0
 80186f2:	4f002020 	svcmi	0x00002020
 80186f6:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 80186fa:	253a6432 	ldrcs	r6, [sl, #-1074]!	; 0xfffffbce
 80186fe:	64253a64 	strtvs	r3, [r5], #-2660	; 0xfffff59c
 8018702:	20632520 	rsbcs	r2, r3, r0, lsr #10
 8018706:	4f007325 	svcmi	0x00007325
 801870a:	203a6425 	eorscs	r6, sl, r5, lsr #8
 801870e:	64322e25 	ldrtvs	r2, [r2], #-3621	; 0xfffff1db
 8018712:	3a64253a 	bcc	9921c02 <__exidx_end+0x1908e36>
 8018716:	25206425 	strcs	r6, [r0, #-1061]!	; 0xfffffbdb
 801871a:	73252063 			; <UNDEFINED> instruction: 0x73252063
 801871e:	3a632500 	bcc	98e1b26 <__exidx_end+0x18c8d5a>
 8018722:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 8018726:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801872a:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801872e:	3a504100 	bcc	9428b36 <__exidx_end+0x140fd6a>
 8018732:	00642520 	rsbeq	r2, r4, r0, lsr #10
 8018736:	44206f4e 	strtmi	r6, [r0], #-3918	; 0xfffff0b2
 801873a:	4400584d 	strmi	r5, [r0], #-2125	; 0xfffff7b3
 801873e:	2520584d 	strcs	r5, [r0, #-2125]!	; 0xfffff7b3
 8018742:	64252073 	strtvs	r2, [r5], #-115	; 0xffffff8d
	...

08018747 <DevicesParamsConst::SPI_SPEED_HZ>:
 8018747:	636f6c63 	cmnvs	pc, #25344	; 0x6300
 801874b:	70735f6b 	rsbsvc	r5, r3, fp, ror #30
 801874f:	5f646565 	svcpl	0x00646565
 8018753:	 			; <UNDEFINED> instruction: 0x6c007a68

08018756 <DevicesParamsConst::GROUPING_COUNT>:
 8018756:	5f64656c 	svcpl	0x0064656c
 801875a:	756f7267 	strbvc	r7, [pc, #-615]!	; 80184fb <NetworkConst::MSG_NETWORK_INIT+0xfa>
 801875e:	6f635f70 	svcvs	0x00635f70
 8018762:	00746e75 	rsbseq	r6, r4, r5, ror lr

08018766 <DevicesParamsConst::GLOBAL_BRIGHTNESS>:
 8018766:	626f6c67 	rsbvs	r6, pc, #26368	; 0x6700
 801876a:	625f6c61 	subsvs	r6, pc, #24832	; 0x6100
 801876e:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 8018772:	73656e74 	cmnvc	r5, #116, 28	; 0x740
 8018776:	 	strbvs	r0, [ip, #-115]!	; 0xffffff8d

08018778 <DevicesParamsConst::MAP>:
 8018778:	5f64656c 	svcpl	0x0064656c
 801877c:	5f626772 	svcpl	0x00626772
 8018780:	7070616d 	rsbsvc	r6, r0, sp, ror #2
 8018784:	00676e69 	rsbeq	r6, r7, r9, ror #28

08018788 <DevicesParamsConst::TYPE>:
 8018788:	5f64656c 	svcpl	0x0064656c
 801878c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
	...

08018791 <DevicesParamsConst::COUNT>:
 8018791:	5f64656c 	svcpl	0x0064656c
 8018795:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 8018799:	 	strbvs	r0, [ip, #-116]!	; 0xffffff8c

0801879b <DevicesParamsConst::LED_T0H>:
 801879b:	5f64656c 	svcpl	0x0064656c
 801879f:	00683074 	rsbeq	r3, r8, r4, ror r0

080187a3 <DevicesParamsConst::LED_T1H>:
 80187a3:	5f64656c 	svcpl	0x0064656c
 80187a7:	00683174 	rsbeq	r3, r8, r4, ror r1

080187ab <DevicesParamsConst::FILE_NAME>:
 80187ab:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 80187af:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 80187b3:	00747874 	rsbseq	r7, r4, r4, ror r8
 80187b7:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 80187bb:	6425223a 	strtvs	r2, [r5], #-570	; 0xfffffdc6
 80187bf:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 80187c3:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80187c7:	002c2264 	eoreq	r2, ip, r4, ror #4
 80187cb:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
 80187cf:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80187d3:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80187d7:	0a64252e 	beq	9921c97 <__exidx_end+0x1908ecb>
 80187db:	25202300 	strcs	r2, [r0, #-768]!	; 0xfffffd00
 80187df:	0a232073 	beq	88e09b3 <__exidx_end+0x8c7be7>
 80187e3:	73252200 			; <UNDEFINED> instruction: 0x73252200
 80187e7:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 80187eb:	22782a2e 	rsbscs	r2, r8, #188416	; 0x2e000
 80187ef:	2523002c 	strcs	r0, [r3, #-44]!	; 0xffffffd4
 80187f3:	2e253d73 	mcrcs	13, 1, r3, cr5, cr3, {3}
 80187f7:	000a782a 	andeq	r7, sl, sl, lsr #16

080187fb <LightSetParamsConst::MERGE_MODE>:
 80187fb:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 80187ff:	6f6d5f65 	svcvs	0x006d5f65
 8018803:	 	strvc	r6, [r0], #-1380	; 0xfffffa9c

08018806 <LightSetParamsConst::TEST_PATTERN>:
 8018806:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
 801880a:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
 801880e:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
	...

08018813 <LightSetParamsConst::UNIVERSE_PORT>:
 8018813:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8018817:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801881b:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801881f:	00615f74 	rsbeq	r5, r1, r4, ror pc
 8018823:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8018827:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801882b:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801882f:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8018833:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8018837:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801883b:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801883f:	00635f74 	rsbeq	r5, r3, r4, ror pc
 8018843:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8018847:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801884b:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801884f:	00645f74 	rsbeq	r5, r4, r4, ror pc

08018853 <LightSetParamsConst::START_UNI_PORT>:
 8018853:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8018857:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801885b:	6f705f69 	svcvs	0x00705f69
 801885f:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 8018863:	74730000 	ldrbtvc	r0, [r3], #-0
 8018867:	5f747261 	svcpl	0x00747261
 801886b:	5f696e75 	svcpl	0x00696e75
 801886f:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8018873:	0000325f 	andeq	r3, r0, pc, asr r2
 8018877:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801887b:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801887f:	6f705f69 	svcvs	0x00705f69
 8018883:	335f7472 	cmpcc	pc, #1912602624	; 0x72000000
 8018887:	74730000 	ldrbtvc	r0, [r3], #-0
 801888b:	5f747261 	svcpl	0x00747261
 801888f:	5f696e75 	svcpl	0x00696e75
 8018893:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8018897:	0000345f 	andeq	r3, r0, pc, asr r4
 801889b:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801889f:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 80188a3:	6f705f69 	svcvs	0x00705f69
 80188a7:	355f7472 	ldrbcc	r7, [pc, #-1138]	; 801843d <NetworkConst::MSG_NETWORK_INIT+0x3c>
 80188ab:	74730000 	ldrbtvc	r0, [r3], #-0
 80188af:	5f747261 	svcpl	0x00747261
 80188b3:	5f696e75 	svcpl	0x00696e75
 80188b7:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 80188bb:	0000365f 	andeq	r3, r0, pc, asr r6
 80188bf:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 80188c3:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 80188c7:	6f705f69 	svcvs	0x00705f69
 80188cb:	375f7472 			; <UNDEFINED> instruction: 0x375f7472
 80188cf:	74730000 	ldrbtvc	r0, [r3], #-0
 80188d3:	5f747261 	svcpl	0x00747261
 80188d7:	5f696e75 	svcpl	0x00696e75
 80188db:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 80188df:	0000385f 	andeq	r3, r0, pc, asr r8

080188e3 <LightSetParamsConst::MERGE_MODE_PORT>:
 80188e3:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 80188e7:	6f6d5f65 	svcvs	0x006d5f65
 80188eb:	705f6564 	subsvc	r6, pc, r4, ror #10
 80188ef:	5f74726f 	svcpl	0x0074726f
 80188f3:	656d0061 	strbvs	r0, [sp, #-97]!	; 0xffffff9f
 80188f7:	5f656772 	svcpl	0x00656772
 80188fb:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 80188ff:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8018903:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8018907:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 801890b:	6f6d5f65 	svcvs	0x006d5f65
 801890f:	705f6564 	subsvc	r6, pc, r4, ror #10
 8018913:	5f74726f 	svcpl	0x0074726f
 8018917:	656d0063 	strbvs	r0, [sp, #-99]!	; 0xffffff9d
 801891b:	5f656772 	svcpl	0x00656772
 801891f:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 8018923:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8018927:	00645f74 	rsbeq	r5, r4, r4, ror pc

0801892b <LightSetParamsConst::DMX_START_ADDRESS>:
 801892b:	5f786d64 	svcpl	0x00786d64
 801892f:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8018933:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xfffff08c
 8018937:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 801893b:	 	mrcvs	0, 3, r0, cr5, cr3, {3}

0801893d <LightSetParamsConst::UNIVERSE>:
 801893d:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8018941:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
	...

08018946 <LightSetParamsConst::DIRECTION>:
 8018946:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801894a:	6f697463 	svcvs	0x00697463
 801894e:	6f705f6e 	svcvs	0x00705f6e
 8018952:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
 8018956:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 801895a:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 801895e:	5f6e6f69 	svcpl	0x006e6f69
 8018962:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8018966:	0000625f 	andeq	r6, r0, pc, asr r2
 801896a:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801896e:	6f697463 	svcvs	0x00697463
 8018972:	6f705f6e 	svcvs	0x00705f6e
 8018976:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
 801897a:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 801897e:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8018982:	5f6e6f69 	svcpl	0x006e6f69
 8018986:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 801898a:	0000645f 	andeq	r6, r0, pc, asr r4
 801898e:	64206f4e 	strtvs	r6, [r0], #-3918	; 0xfffff0b2
 8018992:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 8018996:	66207961 	strtvs	r7, [r0], -r1, ror #18
 801899a:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 801899e:	31485300 	mrscc	r5, (UNDEF: 120)
 80189a2:	00363031 	eorseq	r3, r6, r1, lsr r0
 80189a6:	31445353 	cmpcc	r4, r3, asr r3
 80189aa:	00363033 	eorseq	r3, r6, r3, lsr r0
 80189ae:	28207325 	stmdacs	r0!, {r0, r2, r5, r8, r9, ip, sp, lr}
 80189b2:	252c6425 	strcs	r6, [ip, #-1061]!	; 0xfffffbdb
 80189b6:	000a2964 	andeq	r2, sl, r4, ror #18
 80189ba:	aaeeaa40 	bge	7bc32c2 <__stack_size+0x7bc1ac2>
 80189be:	 	subeq	r0, r0, lr, ror #1

080189c0 <_OledFont8x6>:
 80189c0:	00000040 	andeq	r0, r0, r0, asr #32
 80189c4:	40000000 	andmi	r0, r0, r0
 80189c8:	005f0000 	subseq	r0, pc, r0
 80189cc:	00400000 	subeq	r0, r0, r0
 80189d0:	00070007 	andeq	r0, r7, r7
 80189d4:	7f144000 	svcvc	0x00144000
 80189d8:	00147f14 	andseq	r7, r4, r4, lsl pc
 80189dc:	7f2a2440 	svcvc	0x002a2440
 80189e0:	4000122a 	andmi	r1, r0, sl, lsr #4
 80189e4:	64081323 	strvs	r1, [r8], #-803	; 0xfffffcdd
 80189e8:	36400062 	strbcc	r0, [r0], -r2, rrx
 80189ec:	50205649 	eorpl	r5, r0, r9, asr #12
 80189f0:	08004000 	stmdaeq	r0, {lr}
 80189f4:	00000307 	andeq	r0, r0, r7, lsl #6
 80189f8:	221c0040 	andscs	r0, ip, #64	; 0x40
 80189fc:	40000041 	andmi	r0, r0, r1, asr #32
 8018a00:	1c224100 	stfnes	f4, [r2], #-0
 8018a04:	2a400000 	bcs	9018a0c <__exidx_end+0xfffc40>
 8018a08:	2a1c7f1c 	bcs	8738680 <__exidx_end+0x71f8b4>
 8018a0c:	08084000 	stmdaeq	r8, {lr}
 8018a10:	0008083e 	andeq	r0, r8, lr, lsr r8
 8018a14:	70800040 	addvc	r0, r0, r0, asr #32
 8018a18:	40000030 	andmi	r0, r0, r0, lsr r0
 8018a1c:	08080808 	stmdaeq	r8, {r3, fp}
 8018a20:	00400008 	subeq	r0, r0, r8
 8018a24:	00606000 	rsbeq	r6, r0, r0
 8018a28:	10204000 	eorne	r4, r0, r0
 8018a2c:	00020408 	andeq	r0, r2, r8, lsl #8
 8018a30:	49513e40 	ldmdbmi	r1, {r6, r9, sl, fp, ip, sp}^
 8018a34:	40003e45 	andmi	r3, r0, r5, asr #28
 8018a38:	407f4200 	rsbsmi	r4, pc, r0, lsl #4
 8018a3c:	72400000 	subvc	r0, r0, #0
 8018a40:	46494949 	strbmi	r4, [r9], -r9, asr #18
 8018a44:	41214000 			; <UNDEFINED> instruction: 0x41214000
 8018a48:	00334d49 	eorseq	r4, r3, r9, asr #26
 8018a4c:	12141840 	andsne	r1, r4, #64, 16	; 0x400000
 8018a50:	4000107f 	andmi	r1, r0, pc, ror r0
 8018a54:	45454527 	strbmi	r4, [r5, #-1319]	; 0xfffffad9
 8018a58:	3c400039 	mcrrcc	0, 3, r0, r0, cr9
 8018a5c:	3149494a 	cmpcc	r9, sl, asr #18
 8018a60:	21414000 	mrscs	r4, (UNDEF: 65)
 8018a64:	00070911 	andeq	r0, r7, r1, lsl r9
 8018a68:	49493640 	stmdbmi	r9, {r6, r9, sl, ip, sp}^
 8018a6c:	40003649 	andmi	r3, r0, r9, asr #12
 8018a70:	29494946 	stmdbcs	r9, {r1, r2, r6, r8, fp, lr}^
 8018a74:	0040001e 	subeq	r0, r0, lr, lsl r0
 8018a78:	00001400 	andeq	r1, r0, r0, lsl #8
 8018a7c:	40004000 	andmi	r4, r0, r0
 8018a80:	00000034 	andeq	r0, r0, r4, lsr r0
 8018a84:	14080040 	strne	r0, [r8], #-64	; 0xffffffc0
 8018a88:	40004122 	andmi	r4, r0, r2, lsr #2
 8018a8c:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec
 8018a90:	00400014 	subeq	r0, r0, r4, lsl r0
 8018a94:	08142241 	ldmdaeq	r4, {r0, r6, r9, sp}
 8018a98:	01024000 	mrseq	r4, (UNDEF: 2)
 8018a9c:	00060959 	andeq	r0, r6, r9, asr r9
 8018aa0:	5d413e40 	stclpl	14, cr3, [r1, #-256]	; 0xffffff00
 8018aa4:	40004e59 	andmi	r4, r0, r9, asr lr
 8018aa8:	1211127c 	andsne	r1, r1, #124, 4	; 0xc0000007
 8018aac:	7f40007c 	svcvc	0x0040007c
 8018ab0:	36494949 	strbcc	r4, [r9], -r9, asr #18
 8018ab4:	413e4000 	teqmi	lr, r0
 8018ab8:	00224141 	eoreq	r4, r2, r1, asr #2
 8018abc:	41417f40 	cmpmi	r1, r0, asr #30
 8018ac0:	40003e41 	andmi	r3, r0, r1, asr #28
 8018ac4:	4949497f 	stmdbmi	r9, {r0, r1, r2, r3, r4, r5, r6, r8, fp, lr}^
 8018ac8:	7f400041 	svcvc	0x00400041
 8018acc:	01090909 	tsteq	r9, r9, lsl #18
 8018ad0:	413e4000 	teqmi	lr, r0
 8018ad4:	00735141 	rsbseq	r5, r3, r1, asr #2
 8018ad8:	08087f40 	stmdaeq	r8, {r6, r8, r9, sl, fp, ip, sp, lr}
 8018adc:	40007f08 	andmi	r7, r0, r8, lsl #30
 8018ae0:	417f4100 	cmnmi	pc, r0, lsl #2
 8018ae4:	20400000 	subcs	r0, r0, r0
 8018ae8:	013f4140 	teqeq	pc, r0, asr #2
 8018aec:	087f4000 	ldmdaeq	pc!, {lr}^	; <UNPREDICTABLE>
 8018af0:	00412214 	subeq	r2, r1, r4, lsl r2
 8018af4:	40407f40 	submi	r7, r0, r0, asr #30
 8018af8:	40004040 	andmi	r4, r0, r0, asr #32
 8018afc:	021c027f 	andseq	r0, ip, #-268435449	; 0xf0000007
 8018b00:	7f40007f 	svcvc	0x0040007f
 8018b04:	7f100804 	svcvc	0x00100804
 8018b08:	413e4000 	teqmi	lr, r0
 8018b0c:	003e4141 	eorseq	r4, lr, r1, asr #2
 8018b10:	09097f40 	stmdbeq	r9, {r6, r8, r9, sl, fp, ip, sp, lr}
 8018b14:	40000609 	andmi	r0, r0, r9, lsl #12
 8018b18:	2151413e 	cmpcs	r1, lr, lsr r1
 8018b1c:	7f40005e 	svcvc	0x0040005e
 8018b20:	46291909 	strtmi	r1, [r9], -r9, lsl #18
 8018b24:	49264000 	stmdbmi	r6!, {lr}
 8018b28:	00324949 	eorseq	r4, r2, r9, asr #18
 8018b2c:	7f010340 	svcvc	0x00010340
 8018b30:	40000301 	andmi	r0, r0, r1, lsl #6
 8018b34:	4040403f 	submi	r4, r0, pc, lsr r0
 8018b38:	1f40003f 	svcne	0x0040003f
 8018b3c:	1f204020 	svcne	0x00204020
 8018b40:	403f4000 	eorsmi	r4, pc, r0
 8018b44:	003f4038 	eorseq	r4, pc, r8, lsr r0	; <UNPREDICTABLE>
 8018b48:	08146340 	ldmdaeq	r4, {r6, r8, r9, sp, lr}
 8018b4c:	40006314 	andmi	r6, r0, r4, lsl r3
 8018b50:	04780403 	ldrbteq	r0, [r8], #-1027	; 0xfffffbfd
 8018b54:	61400003 	cmpvs	r0, r3
 8018b58:	434d4959 	movtmi	r4, #55641	; 0xd959
 8018b5c:	7f004000 	svcvc	0x00004000
 8018b60:	00414141 	subeq	r4, r1, r1, asr #2
 8018b64:	08040240 	stmdaeq	r4, {r6, r9}
 8018b68:	40002010 	andmi	r2, r0, r0, lsl r0
 8018b6c:	41414100 	mrsmi	r4, (UNDEF: 81)
 8018b70:	0440007f 	strbeq	r0, [r0], #-127	; 0xffffff81
 8018b74:	04020102 	streq	r0, [r2], #-258	; 0xfffffefe
 8018b78:	40404000 	submi	r4, r0, r0
 8018b7c:	00404040 	subeq	r4, r0, r0, asr #32
 8018b80:	07030040 	streq	r0, [r3, -r0, asr #32]
 8018b84:	40000008 	andmi	r0, r0, r8
 8018b88:	78545420 	ldmdavc	r4, {r5, sl, ip, lr}^
 8018b8c:	7f400040 	svcvc	0x00400040
 8018b90:	38444428 	stmdacc	r4, {r3, r5, sl, lr}^
 8018b94:	44384000 	ldrtmi	r4, [r8], #-0
 8018b98:	00284444 	eoreq	r4, r8, r4, asr #8
 8018b9c:	44443840 	strbmi	r3, [r4], #-2112	; 0xfffff7c0
 8018ba0:	40007f28 	andmi	r7, r0, r8, lsr #30
 8018ba4:	54545438 	ldrbpl	r5, [r4], #-1080	; 0xfffffbc8
 8018ba8:	00400018 	subeq	r0, r0, r8, lsl r0
 8018bac:	02097e08 	andeq	r7, r9, #8, 28	; 0x80
 8018bb0:	a4184000 	ldrge	r4, [r8], #-0
 8018bb4:	00789ca4 	rsbseq	r9, r8, r4, lsr #25
 8018bb8:	04087f40 	streq	r7, [r8], #-3904	; 0xfffff0c0
 8018bbc:	40007804 	andmi	r7, r0, r4, lsl #16
 8018bc0:	407d4400 	rsbsmi	r4, sp, r0, lsl #8
 8018bc4:	20400000 	subcs	r0, r0, r0
 8018bc8:	003d4040 	eorseq	r4, sp, r0, asr #32
 8018bcc:	107f4000 	rsbsne	r4, pc, r0
 8018bd0:	00004428 	andeq	r4, r0, r8, lsr #8
 8018bd4:	7f410040 	svcvc	0x00410040
 8018bd8:	40000040 	andmi	r0, r0, r0, asr #32
 8018bdc:	0478047c 	ldrbteq	r0, [r8], #-1148	; 0xfffffb84
 8018be0:	7c400078 	mcrrvc	0, 7, r0, r0, cr8
 8018be4:	78040408 	stmdavc	r4, {r3, sl}
 8018be8:	44384000 	ldrtmi	r4, [r8], #-0
 8018bec:	00384444 	eorseq	r4, r8, r4, asr #8
 8018bf0:	2418fc40 	ldrcs	pc, [r8], #-3136	; 0xfffff3c0
 8018bf4:	40001824 	andmi	r1, r0, r4, lsr #16
 8018bf8:	18242418 	stmdane	r4!, {r3, r4, sl, sp}
 8018bfc:	7c4000fc 	mcrrvc	0, 15, r0, r0, cr12
 8018c00:	08040408 	stmdaeq	r4, {r3, sl}
 8018c04:	54484000 	strbpl	r4, [r8], #-0
 8018c08:	00245454 	eoreq	r5, r4, r4, asr r4
 8018c0c:	3f040440 	svccc	0x00040440
 8018c10:	40002444 	andmi	r2, r0, r4, asr #8
 8018c14:	2040403c 	subcs	r4, r0, ip, lsr r0
 8018c18:	1c40007c 	mcrrne	0, 7, r0, r0, cr12
 8018c1c:	1c204020 	stcne	0, cr4, [r0], #-128	; 0xffffff80
 8018c20:	403c4000 	eorsmi	r4, ip, r0
 8018c24:	003c4030 	eorseq	r4, ip, r0, lsr r0
 8018c28:	10284440 	eorne	r4, r8, r0, asr #8
 8018c2c:	40004428 	andmi	r4, r0, r8, lsr #8
 8018c30:	9090904c 	addsls	r9, r0, ip, asr #32
 8018c34:	4440007c 	strbmi	r0, [r0], #-124	; 0xffffff84
 8018c38:	444c5464 	strbmi	r5, [ip], #-1124	; 0xfffffb9c
 8018c3c:	08004000 	stmdaeq	r0, {lr}
 8018c40:	00004136 	andeq	r4, r0, r6, lsr r1
 8018c44:	77000040 	strvc	r0, [r0, -r0, asr #32]
 8018c48:	40000000 	andmi	r0, r0, r0
 8018c4c:	08364100 	ldmdaeq	r6!, {r8, lr}
 8018c50:	02400000 	subeq	r0, r0, #0
 8018c54:	02040201 	andeq	r0, r4, #268435456	; 0x10000000
 8018c58:	263c4000 	ldrtcs	r4, [ip], -r0
 8018c5c:	003c2623 	eorseq	r2, ip, r3, lsr #12

08018c60 <oled_128x32_init>:
 8018c60:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 8018c64:	4000d31f 	andmi	sp, r0, pc, lsl r3
 8018c68:	0020148d 	eoreq	r1, r0, sp, lsl #9
 8018c6c:	02dac8a1 	sbcseq	ip, sl, #10551296	; 0xa10000
 8018c70:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 8018c74:	a6a440db 	ssatge	r4, #5, fp, asr #1

08018c78 <oled_128x64_init>:
 8018c78:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 8018c7c:	4000d33f 	andmi	sp, r0, pc, lsr r3
 8018c80:	0020148d 	eoreq	r1, r0, sp, lsl #9
 8018c84:	12dac8a1 	sbcsne	ip, sl, #10551296	; 0xa10000
 8018c88:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 8018c8c:	a6a440db 	ssatge	r4, #5, fp, asr #1

08018c90 <vtable for Ssd1306>:
	...
 8018c98:	08013f01 	stmdaeq	r1, {r0, r8, r9, sl, fp, ip, sp}
 8018c9c:	08013f2d 	stmdaeq	r1, {r0, r2, r3, r5, r8, r9, sl, fp, ip, sp}
 8018ca0:	0801423d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r9, lr}
 8018ca4:	080141c5 	stmdaeq	r1, {r0, r2, r6, r7, r8, lr}
 8018ca8:	08014091 	stmdaeq	r1, {r0, r4, r7, lr}
 8018cac:	08013f4d 	stmdaeq	r1, {r0, r2, r3, r6, r8, r9, sl, fp, ip, sp}
 8018cb0:	08013f75 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, r9, sl, fp, ip, sp}
 8018cb4:	08014067 	stmdaeq	r1, {r0, r1, r2, r5, r6, lr}
 8018cb8:	08014021 	stmdaeq	r1, {r0, r5, lr}
 8018cbc:	08013f03 	stmdaeq	r1, {r0, r1, r8, r9, sl, fp, ip, sp}
 8018cc0:	080140cd 	stmdaeq	r1, {r0, r2, r3, r6, r7, lr}
 8018cc4:	080140d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, lr}
 8018cc8:	080140f3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, lr}
 8018ccc:	08013f05 	stmdaeq	r1, {r0, r2, r8, r9, sl, fp, ip, sp}
 8018cd0:	30345b1b 	eorscc	r5, r4, fp, lsl fp
 8018cd4:	5b1b006d 	blpl	86d8e90 <__exidx_end+0x6c00c4>
 8018cd8:	006d3033 	rsbeq	r3, sp, r3, lsr r0
 8018cdc:	31335b1b 	teqcc	r3, fp, lsl fp
 8018ce0:	5b1b006d 	blpl	86d8e9c <__exidx_end+0x6c00d0>
 8018ce4:	006d3233 	rsbeq	r3, sp, r3, lsr r2
 8018ce8:	33335b1b 	teqcc	r3, #27648	; 0x6c00
 8018cec:	5b1b006d 	blpl	86d8ea8 <__exidx_end+0x6c00dc>
 8018cf0:	006d3933 	rsbeq	r3, sp, r3, lsr r9
 8018cf4:	2e25565b 	mcrcs	6, 1, r5, cr5, cr11, {2}
 8018cf8:	205d732a 	subscs	r7, sp, sl, lsr #6
 8018cfc:	43207325 			; <UNDEFINED> instruction: 0x43207325
 8018d00:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 8018d04:	2064656c 	rsbcs	r6, r4, ip, ror #10
 8018d08:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 8018d0c:	20732a2e 	rsbscs	r2, r3, lr, lsr #20
 8018d10:	25207461 	strcs	r7, [r0, #-1121]!	; 0xfffffb9f
 8018d14:	00732a2e 	rsbseq	r2, r3, lr, lsr #20
 8018d18:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 8018d1c:	203a636f 	eorscs	r6, sl, pc, ror #6
 8018d20:	000a7525 	andeq	r7, sl, r5, lsr #10
 8018d24:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 8018d28:	203a636f 	eorscs	r6, sl, pc, ror #6
 8018d2c:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 8018d30:	62203e20 	eorvs	r3, r0, #32, 28	; 0x200
 8018d34:	6b636f6c 	blvs	98f4aec <__exidx_end+0x18dbd20>
 8018d38:	6d696c5f 	stclvs	12, cr6, [r9, #-380]!	; 0xfffffe84
 8018d3c:	000a7469 	andeq	r7, sl, r9, ror #8
 8018d40:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 8018d44:	203a636f 	eorscs	r6, sl, pc, ror #6
 8018d48:	6f6c4270 	svcvs	0x006c4270
 8018d4c:	65486b63 	strbvs	r6, [r8, #-2915]	; 0xfffff49d
 8018d50:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 8018d54:	2c70253d 	cfldr64cs	mvdx2, [r0], #-244	; 0xffffff0c
 8018d58:	7a697320 	bvc	9a759e0 <__exidx_end+0x1a5cc14>
 8018d5c:	64253d65 	strtvs	r3, [r5], #-3429	; 0xfffff29b
 8018d60:	6164202c 	cmnvs	r4, ip, lsr #32
 8018d64:	253d6174 	ldrcs	r6, [sp, #-372]!	; 0xfffffe8c
 8018d68:	66000a70 			; <UNDEFINED> instruction: 0x66000a70
 8018d6c:	3a656572 	bcc	997233c <__exidx_end+0x1959570>
 8018d70:	6c427020 	mcrrvs	0, 2, r7, r2, cr0
 8018d74:	486b636f 	stmdami	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8018d78:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 8018d7c:	203d2072 	eorscs	r2, sp, r2, ror r0
 8018d80:	202c7025 	eorcs	r7, ip, r5, lsr #32
 8018d84:	6f6c4270 	svcvs	0x006c4270
 8018d88:	3d206b63 	fstmdbxcc	r0!, {d6-d54}	;@ Deprecated
 8018d8c:	0a702520 	beq	9c22214 <__exidx_end+0x1c09448>
 8018d90:	00000000 	andeq	r0, r0, r0

08018d94 <days_of_month>:
 8018d94:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018d98:	0000001c 	andeq	r0, r0, ip, lsl r0
 8018d9c:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018da0:	0000001e 	andeq	r0, r0, lr, lsl r0
 8018da4:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018da8:	0000001e 	andeq	r0, r0, lr, lsl r0
 8018dac:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018db0:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018db4:	0000001e 	andeq	r0, r0, lr, lsl r0
 8018db8:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018dbc:	0000001e 	andeq	r0, r0, lr, lsl r0
 8018dc0:	0000001f 	andeq	r0, r0, pc, lsl r0

Disassembly of section .ARM:

08018dc4 <__exidx_start>:
 8018dc4:	7fff0670 	svcvc	0x00ff0670
 8018dc8:	00000001 	andeq	r0, r0, r1

Disassembly of section .ARM.attributes:

08018dcc <.ARM.attributes>:
 8018dcc:	00002e41 	andeq	r2, r0, r1, asr #28
 8018dd0:	61656100 	cmnvs	r5, r0, lsl #2
 8018dd4:	01006962 	tsteq	r0, r2, ror #18
 8018dd8:	00000024 	andeq	r0, r0, r4, lsr #32
 8018ddc:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
 8018de0:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
 8018de4:	0600334d 	streq	r3, [r0], -sp, asr #6
 8018de8:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
 8018dec:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
 8018df0:	17011501 	strne	r1, [r1, -r1, lsl #10]
 8018df4:	1a011803 	bne	805ee08 <__exidx_end+0x4603c>
 8018df8:	Address 0x0000000008018df8 is out of bounds.


Disassembly of section .data:

20000000 <s_multicast_mac>:
20000000:	005e0001 	subseq	r0, lr, r1
20000004:	00000000 	andeq	r0, r0, r0

20000008 <MDNS::s_nHandle>:
20000008:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

2000000c <next_block>:
2000000c:	20016000 	andcs	r6, r1, r0

20000010 <s_block_bucket>:
20000010:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20000020:	00000020 	andeq	r0, r0, r0, lsr #32
	...
20000030:	00000040 	andeq	r0, r0, r0, asr #32
	...
20000040:	00000060 	andeq	r0, r0, r0, rrx
	...
20000050:	00000080 	andeq	r0, r0, r0, lsl #1
	...
20000060:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20000070:	00000140 	andeq	r0, r0, r0, asr #2
	...
20000080:	00000180 	andeq	r0, r0, r0, lsl #3
	...
20000090:	00000200 	andeq	r0, r0, r0, lsl #4
	...
200000a0:	00000300 	andeq	r0, r0, r0, lsl #6
	...
200000b0:	00000400 	andeq	r0, r0, r0, lsl #8
	...
200000c0:	00000500 	andeq	r0, r0, r0, lsl #10
	...

200000e0 <SystemCoreClock>:
200000e0:	066ff300 	strbteq	pc, [pc], -r0, lsl #6	; <UNPREDICTABLE>

Disassembly of section .bss:

200000e8 <outptr>:
200000e8:	00000000 	andeq	r0, r0, r0

200000ec <guard variable for lightset::Data::Get()::instance>:
200000ec:	00000000 	andeq	r0, r0, r0

200000f0 <lightset::Data::Get()::instance>:
	...

20001900 <ArtNetNode::s_pThis>:
20001900:	00000000 	andeq	r0, r0, r0

20001904 <s_ReceivingMask>:
20001904:	00000000 	andeq	r0, r0, r0

20001908 <ip>:
20001908:	00000000 	andeq	r0, r0, r0

2000190c <ip>:
2000190c:	00000000 	andeq	r0, r0, r0

20001910 <E131Bridge::s_pThis>:
20001910:	00000000 	andeq	r0, r0, r0

20001914 <s_ReceivingMask>:
20001914:	00000000 	andeq	r0, r0, r0

20001918 <WS28xxDmx::s_pThis>:
20001918:	00000000 	andeq	r0, r0, r0

2000191c <PixelPatterns::m_PortConfig>:
	...

2000193c <PixelPatterns::m_nActivePorts>:
2000193c:	00000000 	andeq	r0, r0, r0

20001940 <PixelPatterns::m_pScannerColours>:
20001940:	00000000 	andeq	r0, r0, r0

20001944 <PixelPatterns::m_nCount>:
20001944:	00000000 	andeq	r0, r0, r0

20001948 <PixelPatterns::m_pOutput>:
20001948:	00000000 	andeq	r0, r0, r0

2000194c <PixelTestPattern::s_pThis>:
2000194c:	00000000 	andeq	r0, r0, r0

20001950 <PixelTestPattern::s_Pattern>:
20001950:	00000000 	andeq	r0, r0, r0

20001954 <s_tmp>:
20001954:	00000000 	andeq	r0, r0, r0

20001958 <WS28xx::s_pThis>:
20001958:	00000000 	andeq	r0, r0, r0

2000195c <RemoteConfig::s_pUdpBuffer>:
2000195c:	00000000 	andeq	r0, r0, r0

20001960 <RemoteConfig::s_RemoteConfigListBin>:
	...

20001984 <RemoteConfig::s_pThis>:
20001984:	00000000 	andeq	r0, r0, r0

20001988 <SpiFlashStore::s_nWaitMillis>:
20001988:	00000000 	andeq	r0, r0, r0

2000198c <SpiFlashStore::s_SpiFlashData>:
	...

2000298c <SpiFlashStore::s_nStartAddress>:
2000298c:	00000000 	andeq	r0, r0, r0

20002990 <SpiFlashStore::s_bHaveFlashChip>:
20002990:	00000000 	andeq	r0, r0, r0

20002994 <SpiFlashStore::s_nSpiFlashStoreSize>:
20002994:	00000000 	andeq	r0, r0, r0

20002998 <SpiFlashStore::s_State>:
20002998:	00000000 	andeq	r0, r0, r0

2000299c <SpiFlashStore::s_pThis>:
2000299c:	00000000 	andeq	r0, r0, r0

200029a0 <SpiFlashStore::s_bIsNew>:
200029a0:	00000000 	andeq	r0, r0, r0

200029a4 <StoreArtNet::s_pThis>:
200029a4:	00000000 	andeq	r0, r0, r0

200029a8 <StoreDisplayUdf::s_pThis>:
200029a8:	00000000 	andeq	r0, r0, r0

200029ac <StoreNetwork::s_pThis>:
200029ac:	00000000 	andeq	r0, r0, r0

200029b0 <StoreRemoteConfig::s_pThis>:
200029b0:	00000000 	andeq	r0, r0, r0

200029b4 <StoreWS28xxDmx::s_pThis>:
200029b4:	00000000 	andeq	r0, r0, r0

200029b8 <FlashRom::s_pThis>:
200029b8:	00000000 	andeq	r0, r0, r0

200029bc <flashrom::s_nAddress>:
200029bc:	00000000 	andeq	r0, r0, r0

200029c0 <flashrom::s_State>:
200029c0:	00000000 	andeq	r0, r0, r0

200029c4 <flashrom::s_nPage>:
200029c4:	00000000 	andeq	r0, r0, r0

200029c8 <flashrom::s_pData>:
200029c8:	00000000 	andeq	r0, r0, r0

200029cc <flashrom::s_isBank0>:
200029cc:	00000000 	andeq	r0, r0, r0

200029d0 <flashrom::s_nLength>:
200029d0:	00000000 	andeq	r0, r0, r0

200029d4 <g_ip_info>:
	...

200029e0 <g_mac_address>:
200029e0:	00000000 	andeq	r0, r0, r0
	...

200029e6 <s_is_dhcp>:
	...

200029e8 <s_p>:
200029e8:	00000000 	andeq	r0, r0, r0

200029ec <s_ticker>:
200029ec:	00000000 	andeq	r0, r0, r0

200029f0 <s_mac_address>:
	...

200029f8 <s_mac_address_arp_reply>:
	...

20002a00 <s_id>:
20002a00:	00000000 	andeq	r0, r0, r0

20002a04 <s_recv_queue>:
	...

20003574 <s_tcb>:
	...

200035b8 <s_tcp>:
	...

20003ba4 <broadcast_mask>:
20003ba4:	00000000 	andeq	r0, r0, r0

20003ba8 <gw_ip>:
20003ba8:	00000000 	andeq	r0, r0, r0

20003bac <on_network_mask>:
20003bac:	00000000 	andeq	r0, r0, r0

20003bb0 <s_id>:
20003bb0:	00000000 	andeq	r0, r0, r0

20003bb4 <s_ports_allowed>:
	...

20003bd4 <s_recv_queue>:
	...

20009874 <s_send_packet>:
	...

20009e60 <MDNS::s_nRemoteIp>:
20009e60:	00000000 	andeq	r0, r0, r0

20009e64 <MDNS::s_nRemotePort>:
20009e64:	00000000 	andeq	r0, r0, r0

20009e68 <MDNS::s_nMulticastIp>:
20009e68:	00000000 	andeq	r0, r0, r0

20009e6c <MDNS::s_AnswerLocalIp>:
	...

2000a070 <MDNS::s_ServiceRecords>:
	...

2000a090 <MDNS::s_nBytesReceived>:
2000a090:	00000000 	andeq	r0, r0, r0

2000a094 <MDNS::s_ServiceRecordsData>:
	...

2000a298 <MDNS::s_pName>:
2000a298:	00000000 	andeq	r0, r0, r0

2000a29c <MDNS::s_pBuffer>:
2000a29c:	00000000 	andeq	r0, r0, r0

2000a2a0 <Network::s_pThis>:
2000a2a0:	00000000 	andeq	r0, r0, r0

2000a2a4 <NetworkParams::m_tNetworkParams>:
	...

2000a304 <s_arp_announce>:
	...

2000a330 <s_arp_reply>:
	...

2000a35c <s_arp_request>:
	...

2000a388 <s_arp_records>:
	...

2000a508 <s_entry_current>:
2000a508:	00000000 	andeq	r0, r0, r0

2000a50c <s_dhcp_allocated_gw>:
2000a50c:	00000000 	andeq	r0, r0, r0

2000a510 <s_dhcp_allocated_ip>:
2000a510:	00000000 	andeq	r0, r0, r0

2000a514 <s_dhcp_allocated_netmask>:
2000a514:	00000000 	andeq	r0, r0, r0

2000a518 <s_dhcp_message>:
	...

2000a73c <s_dhcp_server_ip>:
2000a73c:	00000000 	andeq	r0, r0, r0

2000a740 <s_groups>:
	...

2000a860 <s_id>:
2000a860:	00000000 	andeq	r0, r0, r0

2000a864 <s_joins_allowed_index>:
2000a864:	00000000 	andeq	r0, r0, r0

2000a868 <s_leave>:
	...

2000a898 <s_multicast_mac>:
	...

2000a8a0 <s_report>:
	...

2000a8d0 <DisplayUdf::s_pThis>:
2000a8d0:	00000000 	andeq	r0, r0, r0

2000a8d4 <PropertiesConfig::s_Config>:
2000a8d4:	00000000 	andeq	r0, r0, r0

2000a8d8 <Display::s_pThis>:
2000a8d8:	00000000 	andeq	r0, r0, r0

2000a8dc <_ClearBuffer>:
	...

2000a964 <Ssd1306::s_pThis>:
2000a964:	00000000 	andeq	r0, r0, r0

2000a968 <FirmwareVersion::s_FirmwareVersion>:
	...

2000a97e <FirmwareVersion::s_Print>:
	...

2000a9c0 <FirmwareVersion::s_pThis>:
2000a9c0:	00000000 	andeq	r0, r0, r0

2000a9c4 <LedBlink::s_pThis>:
2000a9c4:	00000000 	andeq	r0, r0, r0

2000a9c8 <Hardware::s_pThis>:
2000a9c8:	00000000 	andeq	r0, r0, r0

2000a9cc <last.0>:
2000a9cc:	00000000 	andeq	r0, r0, r0

2000a9d0 <s_micros>:
	...

2000a9d8 <set_timer>:
2000a9d8:	00000000 	andeq	r0, r0, r0

2000a9dc <s_nSysTickMillis>:
2000a9dc:	00000000 	andeq	r0, r0, r0

2000a9e0 <enet_init_status>:
2000a9e0:	00000000 	andeq	r0, r0, r0

2000a9e4 <s_nAddress>:
2000a9e4:	00000000 	andeq	r0, r0, r0

2000a9e8 <s_TxBuffer>:
	...

200109e8 <dma_current_ptp_rxdesc>:
200109e8:	00000000 	andeq	r0, r0, r0

200109ec <dma_current_ptp_txdesc>:
200109ec:	00000000 	andeq	r0, r0, r0

200109f0 <dma_current_rxdesc>:
200109f0:	00000000 	andeq	r0, r0, r0

200109f4 <dma_current_txdesc>:
200109f4:	00000000 	andeq	r0, r0, r0

200109f8 <enet_initpara>:
	...

20010a34 <rx_buff>:
	...

200139d4 <rxdesc_tab>:
	...

20013a54 <tx_buff>:
	...

2001463c <txdesc_tab>:
	...

Disassembly of section .heap:

20016000 <heap_low>:
	...

Disassembly of section .stack:

20016800 <_sp-0x1800>:
	...
