
build_gd32/main.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08007000 <__gVectors>:
 8007000:	20018000 	andcs	r8, r1, r0
 8007004:	080081f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, pc}
 8007008:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 800700c:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007010:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007014:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007018:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
	...
 800702c:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007030:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007034:	00000000 	andeq	r0, r0, r0
 8007038:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 800703c:	080141f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, lr}
 8007040:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007044:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007048:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 800704c:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007050:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007054:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007058:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 800705c:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007060:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007064:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007068:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 800706c:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007070:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007074:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007078:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 800707c:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007080:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007084:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007088:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 800708c:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007090:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007094:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007098:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 800709c:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070a0:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070a4:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070a8:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070ac:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070b0:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070b4:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070b8:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070bc:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070c0:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070c4:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070c8:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070cc:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070d0:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070d4:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070d8:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070dc:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070e0:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070e4:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070e8:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070ec:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070f0:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070f4:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
	...
 8007100:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007104:	00000000 	andeq	r0, r0, r0
 8007108:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 800710c:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007110:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007114:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007118:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 800711c:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007120:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007124:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007128:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 800712c:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007130:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007134:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007138:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 800713c:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007140:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007144:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007148:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 800714c:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}

Disassembly of section .text:

08007150 <net_init>:
 8007150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007154:	460c      	mov	r4, r1
 8007156:	4616      	mov	r6, r2
 8007158:	9f06      	ldr	r7, [sp, #24]
 800715a:	4a22      	ldr	r2, [pc, #136]	; (80071e4 <net_init+0x94>)
 800715c:	461d      	mov	r5, r3
 800715e:	1e43      	subs	r3, r0, #1
 8007160:	3005      	adds	r0, #5
 8007162:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8007166:	4283      	cmp	r3, r0
 8007168:	f802 1b01 	strb.w	r1, [r2], #1
 800716c:	d1f9      	bne.n	8007162 <net_init+0x12>
 800716e:	4623      	mov	r3, r4
 8007170:	4a1d      	ldr	r2, [pc, #116]	; (80071e8 <net_init+0x98>)
 8007172:	f104 010c 	add.w	r1, r4, #12
 8007176:	f813 0b01 	ldrb.w	r0, [r3], #1
 800717a:	428b      	cmp	r3, r1
 800717c:	f802 0b01 	strb.w	r0, [r2], #1
 8007180:	d1f9      	bne.n	8007176 <net_init+0x26>
 8007182:	f04f 0800 	mov.w	r8, #0
 8007186:	4918      	ldr	r1, [pc, #96]	; (80071e8 <net_init+0x98>)
 8007188:	4816      	ldr	r0, [pc, #88]	; (80071e4 <net_init+0x94>)
 800718a:	f000 f9a7 	bl	80074dc <ip_init>
 800718e:	4815      	ldr	r0, [pc, #84]	; (80071e4 <net_init+0x94>)
 8007190:	f000 f83c 	bl	800720c <rfc3927_init>
 8007194:	f887 8000 	strb.w	r8, [r7]
 8007198:	782b      	ldrb	r3, [r5, #0]
 800719a:	b163      	cbz	r3, 80071b6 <net_init+0x66>
 800719c:	4632      	mov	r2, r6
 800719e:	4912      	ldr	r1, [pc, #72]	; (80071e8 <net_init+0x98>)
 80071a0:	4810      	ldr	r0, [pc, #64]	; (80071e4 <net_init+0x94>)
 80071a2:	f00b f867 	bl	8012274 <dhcp_client>
 80071a6:	4540      	cmp	r0, r8
 80071a8:	da05      	bge.n	80071b6 <net_init+0x66>
 80071aa:	480f      	ldr	r0, [pc, #60]	; (80071e8 <net_init+0x98>)
 80071ac:	f885 8000 	strb.w	r8, [r5]
 80071b0:	f009 fc7a 	bl	8010aa8 <rfc3927>
 80071b4:	7038      	strb	r0, [r7, #0]
 80071b6:	490c      	ldr	r1, [pc, #48]	; (80071e8 <net_init+0x98>)
 80071b8:	480a      	ldr	r0, [pc, #40]	; (80071e4 <net_init+0x94>)
 80071ba:	f000 f883 	bl	80072c4 <arp_init>
 80071be:	480a      	ldr	r0, [pc, #40]	; (80071e8 <net_init+0x98>)
 80071c0:	f00b fa78 	bl	80126b4 <ip_set_ip>
 80071c4:	f000 f82e 	bl	8007224 <tcp_init>
 80071c8:	4a07      	ldr	r2, [pc, #28]	; (80071e8 <net_init+0x98>)
 80071ca:	1e63      	subs	r3, r4, #1
 80071cc:	340b      	adds	r4, #11
 80071ce:	f812 1b01 	ldrb.w	r1, [r2], #1
 80071d2:	f803 1f01 	strb.w	r1, [r3, #1]!
 80071d6:	429c      	cmp	r4, r3
 80071d8:	d1f9      	bne.n	80071ce <net_init+0x7e>
 80071da:	782a      	ldrb	r2, [r5, #0]
 80071dc:	4b03      	ldr	r3, [pc, #12]	; (80071ec <net_init+0x9c>)
 80071de:	701a      	strb	r2, [r3, #0]
 80071e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071e4:	200029f0 	strdcs	r2, [r0], -r0
 80071e8:	200029e4 	andcs	r2, r0, r4, ror #19
 80071ec:	200029f6 	strdcs	r2, [r0], -r6

080071f0 <net_shutdown>:
 80071f0:	b508      	push	{r3, lr}
 80071f2:	f000 f97e 	bl	80074f2 <ip_shutdown>
 80071f6:	4b04      	ldr	r3, [pc, #16]	; (8007208 <net_shutdown+0x18>)
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	b11b      	cbz	r3, 8007204 <net_shutdown+0x14>
 80071fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007200:	f00b b940 	b.w	8012484 <dhcp_client_release>
 8007204:	bd08      	pop	{r3, pc}
 8007206:	bf00      	nop
 8007208:	200029f6 	strdcs	r2, [r0], -r6

0800720c <rfc3927_init>:
 800720c:	4b04      	ldr	r3, [pc, #16]	; (8007220 <rfc3927_init+0x14>)
 800720e:	1d82      	adds	r2, r0, #6
 8007210:	4290      	cmp	r0, r2
 8007212:	d100      	bne.n	8007216 <rfc3927_init+0xa>
 8007214:	4770      	bx	lr
 8007216:	f810 1b01 	ldrb.w	r1, [r0], #1
 800721a:	f803 1b01 	strb.w	r1, [r3], #1
 800721e:	e7f7      	b.n	8007210 <rfc3927_init+0x4>
 8007220:	20002a00 	andcs	r2, r0, r0, lsl #20

08007224 <tcp_init>:
 8007224:	2206      	movs	r2, #6
 8007226:	b513      	push	{r0, r1, r4, lr}
 8007228:	4c0b      	ldr	r4, [pc, #44]	; (8007258 <tcp_init+0x34>)
 800722a:	490c      	ldr	r1, [pc, #48]	; (800725c <tcp_init+0x38>)
 800722c:	18a0      	adds	r0, r4, r2
 800722e:	f009 fc7b 	bl	8010b28 <memcpy.isra.0>
 8007232:	2308      	movs	r3, #8
 8007234:	2204      	movs	r2, #4
 8007236:	81a3      	strh	r3, [r4, #12]
 8007238:	4b09      	ldr	r3, [pc, #36]	; (8007260 <tcp_init+0x3c>)
 800723a:	eb0d 0102 	add.w	r1, sp, r2
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f104 001a 	add.w	r0, r4, #26
 8007244:	9301      	str	r3, [sp, #4]
 8007246:	f009 fc6f 	bl	8010b28 <memcpy.isra.0>
 800724a:	2345      	movs	r3, #69	; 0x45
 800724c:	81e3      	strh	r3, [r4, #14]
 800724e:	4b05      	ldr	r3, [pc, #20]	; (8007264 <tcp_init+0x40>)
 8007250:	6163      	str	r3, [r4, #20]
 8007252:	b002      	add	sp, #8
 8007254:	bd10      	pop	{r4, pc}
 8007256:	bf00      	nop
 8007258:	20002a10 	andcs	r2, r0, r0, lsl sl
 800725c:	200029f0 	strdcs	r2, [r0], -r0
 8007260:	200029e4 	andcs	r2, r0, r4, ror #19
 8007264:	06400040 	strbeq	r0, [r0], -r0, asr #32

08007268 <udp_init>:
 8007268:	b570      	push	{r4, r5, r6, lr}
 800726a:	2200      	movs	r2, #0
 800726c:	2408      	movs	r4, #8
 800726e:	460e      	mov	r6, r1
 8007270:	4b0d      	ldr	r3, [pc, #52]	; (80072a8 <udp_init+0x40>)
 8007272:	490e      	ldr	r1, [pc, #56]	; (80072ac <udp_init+0x44>)
 8007274:	3c01      	subs	r4, #1
 8007276:	801a      	strh	r2, [r3, #0]
 8007278:	805a      	strh	r2, [r3, #2]
 800727a:	f841 2b04 	str.w	r2, [r1], #4
 800727e:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 8007282:	d1f7      	bne.n	8007274 <udp_init+0xc>
 8007284:	2206      	movs	r2, #6
 8007286:	4d0a      	ldr	r5, [pc, #40]	; (80072b0 <udp_init+0x48>)
 8007288:	4b0a      	ldr	r3, [pc, #40]	; (80072b4 <udp_init+0x4c>)
 800728a:	4601      	mov	r1, r0
 800728c:	18a8      	adds	r0, r5, r2
 800728e:	801c      	strh	r4, [r3, #0]
 8007290:	f009 fc54 	bl	8010b3c <memcpy.isra.0>
 8007294:	4b08      	ldr	r3, [pc, #32]	; (80072b8 <udp_init+0x50>)
 8007296:	4630      	mov	r0, r6
 8007298:	60eb      	str	r3, [r5, #12]
 800729a:	4b08      	ldr	r3, [pc, #32]	; (80072bc <udp_init+0x54>)
 800729c:	616b      	str	r3, [r5, #20]
 800729e:	f009 fc75 	bl	8010b8c <udp_set_ip>
 80072a2:	852c      	strh	r4, [r5, #40]	; 0x28
 80072a4:	bd70      	pop	{r4, r5, r6, pc}
 80072a6:	bf00      	nop
 80072a8:	2000302c 	andcs	r3, r0, ip, lsr #32
 80072ac:	2000300c 	andcs	r3, r0, ip
 80072b0:	20008ccc 	andcs	r8, r0, ip, asr #25
 80072b4:	20003008 	andcs	r3, r0, r8
 80072b8:	00450008 	subeq	r0, r5, r8
 80072bc:	11400040 	cmpne	r0, r0, asr #32

080072c0 <udp_shutdown>:
 80072c0:	4770      	bx	lr
	...

080072c4 <arp_init>:
 80072c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072c8:	4604      	mov	r4, r0
 80072ca:	460d      	mov	r5, r1
 80072cc:	f000 f876 	bl	80073bc <arp_cache_init>
 80072d0:	2206      	movs	r2, #6
 80072d2:	4621      	mov	r1, r4
 80072d4:	482e      	ldr	r0, [pc, #184]	; (8007390 <arp_init+0xcc>)
 80072d6:	682f      	ldr	r7, [r5, #0]
 80072d8:	f00a fe4e 	bl	8011f78 <memcpy.isra.0>
 80072dc:	4b2d      	ldr	r3, [pc, #180]	; (8007394 <arp_init+0xd0>)
 80072de:	2507      	movs	r5, #7
 80072e0:	461e      	mov	r6, r3
 80072e2:	22ff      	movs	r2, #255	; 0xff
 80072e4:	3d01      	subs	r5, #1
 80072e6:	d146      	bne.n	8007376 <arp_init+0xb2>
 80072e8:	4b2b      	ldr	r3, [pc, #172]	; (8007398 <arp_init+0xd4>)
 80072ea:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800739c <arp_init+0xd8>
 80072ee:	2206      	movs	r2, #6
 80072f0:	e9c6 3803 	strd	r3, r8, [r6, #12]
 80072f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072f8:	4621      	mov	r1, r4
 80072fa:	4829      	ldr	r0, [pc, #164]	; (80073a0 <arp_init+0xdc>)
 80072fc:	82b3      	strh	r3, [r6, #20]
 80072fe:	f00a fe3b 	bl	8011f78 <memcpy.isra.0>
 8007302:	2307      	movs	r3, #7
 8007304:	4a27      	ldr	r2, [pc, #156]	; (80073a4 <arp_init+0xe0>)
 8007306:	61f7      	str	r7, [r6, #28]
 8007308:	3b01      	subs	r3, #1
 800730a:	d137      	bne.n	800737c <arp_init+0xb8>
 800730c:	2206      	movs	r2, #6
 800730e:	4621      	mov	r1, r4
 8007310:	4825      	ldr	r0, [pc, #148]	; (80073a8 <arp_init+0xe4>)
 8007312:	f8c6 7026 	str.w	r7, [r6, #38]	; 0x26
 8007316:	f00a fe2f 	bl	8011f78 <memcpy.isra.0>
 800731a:	4a24      	ldr	r2, [pc, #144]	; (80073ac <arp_init+0xe8>)
 800731c:	2306      	movs	r3, #6
 800731e:	4615      	mov	r5, r2
 8007320:	21ff      	movs	r1, #255	; 0xff
 8007322:	3b01      	subs	r3, #1
 8007324:	d22d      	bcs.n	8007382 <arp_init+0xbe>
 8007326:	4b1c      	ldr	r3, [pc, #112]	; (8007398 <arp_init+0xd4>)
 8007328:	2206      	movs	r2, #6
 800732a:	e9c5 3803 	strd	r3, r8, [r5, #12]
 800732e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007332:	4621      	mov	r1, r4
 8007334:	481e      	ldr	r0, [pc, #120]	; (80073b0 <arp_init+0xec>)
 8007336:	82ab      	strh	r3, [r5, #20]
 8007338:	f00a fe1e 	bl	8011f78 <memcpy.isra.0>
 800733c:	2307      	movs	r3, #7
 800733e:	2100      	movs	r1, #0
 8007340:	4a1c      	ldr	r2, [pc, #112]	; (80073b4 <arp_init+0xf0>)
 8007342:	61ef      	str	r7, [r5, #28]
 8007344:	3b01      	subs	r3, #1
 8007346:	d11f      	bne.n	8007388 <arp_init+0xc4>
 8007348:	2206      	movs	r2, #6
 800734a:	4d1b      	ldr	r5, [pc, #108]	; (80073b8 <arp_init+0xf4>)
 800734c:	4621      	mov	r1, r4
 800734e:	18a8      	adds	r0, r5, r2
 8007350:	f00a fe12 	bl	8011f78 <memcpy.isra.0>
 8007354:	4b10      	ldr	r3, [pc, #64]	; (8007398 <arp_init+0xd4>)
 8007356:	4621      	mov	r1, r4
 8007358:	e9c5 3803 	strd	r3, r8, [r5, #12]
 800735c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007360:	f105 0016 	add.w	r0, r5, #22
 8007364:	2206      	movs	r2, #6
 8007366:	82ab      	strh	r3, [r5, #20]
 8007368:	f00a fe06 	bl	8011f78 <memcpy.isra.0>
 800736c:	61ef      	str	r7, [r5, #28]
 800736e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007372:	f00a be0b 	b.w	8011f8c <arp_announce>
 8007376:	f803 2b01 	strb.w	r2, [r3], #1
 800737a:	e7b3      	b.n	80072e4 <arp_init+0x20>
 800737c:	f802 5b01 	strb.w	r5, [r2], #1
 8007380:	e7c2      	b.n	8007308 <arp_init+0x44>
 8007382:	f802 1b01 	strb.w	r1, [r2], #1
 8007386:	e7cc      	b.n	8007322 <arp_init+0x5e>
 8007388:	f802 1b01 	strb.w	r1, [r2], #1
 800738c:	e7da      	b.n	8007344 <arp_init+0x80>
 800738e:	bf00      	nop
 8007390:	20009702 	andcs	r9, r0, r2, lsl #14
 8007394:	200096fc 	strdcs	r9, [r0], -ip
 8007398:	01000608 	tsteq	r0, r8, lsl #12
 800739c:	04060008 	streq	r0, [r6], #-8
 80073a0:	20009712 	andcs	r9, r0, r2, lsl r7
 80073a4:	2000971c 	andcs	r9, r0, ip, lsl r7
 80073a8:	2000975a 	andcs	r9, r0, sl, asr r7
 80073ac:	20009754 	andcs	r9, r0, r4, asr r7
 80073b0:	2000976a 	andcs	r9, r0, sl, ror #14
 80073b4:	20009774 	andcs	r9, r0, r4, ror r7
 80073b8:	20009728 	andcs	r9, r0, r8, lsr #14

080073bc <arp_cache_init>:
 80073bc:	2300      	movs	r3, #0
 80073be:	4618      	mov	r0, r3
 80073c0:	4a09      	ldr	r2, [pc, #36]	; (80073e8 <arp_cache_init+0x2c>)
 80073c2:	b510      	push	{r4, lr}
 80073c4:	8013      	strh	r3, [r2, #0]
 80073c6:	4a09      	ldr	r2, [pc, #36]	; (80073ec <arp_cache_init+0x30>)
 80073c8:	4611      	mov	r1, r2
 80073ca:	f842 0c04 	str.w	r0, [r2, #-4]
 80073ce:	1d94      	adds	r4, r2, #6
 80073d0:	42a1      	cmp	r1, r4
 80073d2:	d105      	bne.n	80073e0 <arp_cache_init+0x24>
 80073d4:	3303      	adds	r3, #3
 80073d6:	2b60      	cmp	r3, #96	; 0x60
 80073d8:	f102 020c 	add.w	r2, r2, #12
 80073dc:	d1f4      	bne.n	80073c8 <arp_cache_init+0xc>
 80073de:	bd10      	pop	{r4, pc}
 80073e0:	f801 0b01 	strb.w	r0, [r1], #1
 80073e4:	e7f4      	b.n	80073d0 <arp_cache_init+0x14>
 80073e6:	bf00      	nop
 80073e8:	20009900 	andcs	r9, r0, r0, lsl #18
 80073ec:	20009784 	andcs	r9, r0, r4, lsl #15

080073f0 <igmp_init>:
 80073f0:	2200      	movs	r2, #0
 80073f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073f6:	4605      	mov	r5, r0
 80073f8:	4608      	mov	r0, r1
 80073fa:	4611      	mov	r1, r2
 80073fc:	4b23      	ldr	r3, [pc, #140]	; (800748c <igmp_init+0x9c>)
 80073fe:	f103 0408 	add.w	r4, r3, #8
 8007402:	42a3      	cmp	r3, r4
 8007404:	d13e      	bne.n	8007484 <igmp_init+0x94>
 8007406:	3201      	adds	r2, #1
 8007408:	2a24      	cmp	r2, #36	; 0x24
 800740a:	d1f8      	bne.n	80073fe <igmp_init+0xe>
 800740c:	2600      	movs	r6, #0
 800740e:	4b20      	ldr	r3, [pc, #128]	; (8007490 <igmp_init+0xa0>)
 8007410:	4c20      	ldr	r4, [pc, #128]	; (8007494 <igmp_init+0xa4>)
 8007412:	601e      	str	r6, [r3, #0]
 8007414:	4b20      	ldr	r3, [pc, #128]	; (8007498 <igmp_init+0xa8>)
 8007416:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 800741a:	801e      	strh	r6, [r3, #0]
 800741c:	f00b f8aa 	bl	8012574 <igmp_set_ip>
 8007420:	2201      	movs	r2, #1
 8007422:	4b1e      	ldr	r3, [pc, #120]	; (800749c <igmp_init+0xac>)
 8007424:	4629      	mov	r1, r5
 8007426:	801a      	strh	r2, [r3, #0]
 8007428:	225e      	movs	r2, #94	; 0x5e
 800742a:	709a      	strb	r2, [r3, #2]
 800742c:	2206      	movs	r2, #6
 800742e:	18a0      	adds	r0, r4, r2
 8007430:	f00b f856 	bl	80124e0 <memcpy.isra.0>
 8007434:	f240 4394 	movw	r3, #1172	; 0x494
 8007438:	8463      	strh	r3, [r4, #34]	; 0x22
 800743a:	2316      	movs	r3, #22
 800743c:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80074a0 <igmp_init+0xb0>
 8007440:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80074a4 <igmp_init+0xb4>
 8007444:	84e3      	strh	r3, [r4, #38]	; 0x26
 8007446:	f8c4 9014 	str.w	r9, [r4, #20]
 800744a:	4b17      	ldr	r3, [pc, #92]	; (80074a8 <igmp_init+0xb8>)
 800744c:	f8c4 800c 	str.w	r8, [r4, #12]
 8007450:	8227      	strh	r7, [r4, #16]
 8007452:	84a6      	strh	r6, [r4, #36]	; 0x24
 8007454:	4c15      	ldr	r4, [pc, #84]	; (80074ac <igmp_init+0xbc>)
 8007456:	2206      	movs	r2, #6
 8007458:	6023      	str	r3, [r4, #0]
 800745a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800745e:	18a0      	adds	r0, r4, r2
 8007460:	80a3      	strh	r3, [r4, #4]
 8007462:	4629      	mov	r1, r5
 8007464:	f00b f83c 	bl	80124e0 <memcpy.isra.0>
 8007468:	23e0      	movs	r3, #224	; 0xe0
 800746a:	83e3      	strh	r3, [r4, #30]
 800746c:	f44f 13b8 	mov.w	r3, #1507328	; 0x170000
 8007470:	4a0f      	ldr	r2, [pc, #60]	; (80074b0 <igmp_init+0xc0>)
 8007472:	f8c4 9014 	str.w	r9, [r4, #20]
 8007476:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800747a:	f8c4 800c 	str.w	r8, [r4, #12]
 800747e:	8227      	strh	r7, [r4, #16]
 8007480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007484:	f803 1b01 	strb.w	r1, [r3], #1
 8007488:	e7bb      	b.n	8007402 <igmp_init+0x12>
 800748a:	bf00      	nop
 800748c:	20009b38 	andcs	r9, r0, r8, lsr fp
 8007490:	20009c5c 	andcs	r9, r0, ip, asr ip
 8007494:	20009c98 	mulcs	r0, r8, ip
 8007498:	20009c58 	andcs	r9, r0, r8, asr ip
 800749c:	20009c90 	mulcs	r0, r0, ip
 80074a0:	02010040 	andeq	r0, r1, #64	; 0x40
 80074a4:	00460008 	subeq	r0, r6, r8
 80074a8:	005e0001 	subseq	r0, lr, r1
 80074ac:	20009c60 	andcs	r9, r0, r0, ror #24
 80074b0:	04940200 	ldreq	r0, [r4], #512	; 0x200

080074b4 <igmp_shutdown>:
 80074b4:	b570      	push	{r4, r5, r6, lr}
 80074b6:	2500      	movs	r5, #0
 80074b8:	462e      	mov	r6, r5
 80074ba:	4c07      	ldr	r4, [pc, #28]	; (80074d8 <igmp_shutdown+0x24>)
 80074bc:	6820      	ldr	r0, [r4, #0]
 80074be:	b120      	cbz	r0, 80074ca <igmp_shutdown+0x16>
 80074c0:	f00b f8b4 	bl	801262c <igmp_leave>
 80074c4:	6026      	str	r6, [r4, #0]
 80074c6:	7166      	strb	r6, [r4, #5]
 80074c8:	7126      	strb	r6, [r4, #4]
 80074ca:	3501      	adds	r5, #1
 80074cc:	2d24      	cmp	r5, #36	; 0x24
 80074ce:	f104 0408 	add.w	r4, r4, #8
 80074d2:	d1f3      	bne.n	80074bc <igmp_shutdown+0x8>
 80074d4:	bd70      	pop	{r4, r5, r6, pc}
 80074d6:	bf00      	nop
 80074d8:	20009b38 	andcs	r9, r0, r8, lsr fp

080074dc <ip_init>:
 80074dc:	b538      	push	{r3, r4, r5, lr}
 80074de:	4604      	mov	r4, r0
 80074e0:	460d      	mov	r5, r1
 80074e2:	f7ff fec1 	bl	8007268 <udp_init>
 80074e6:	4629      	mov	r1, r5
 80074e8:	4620      	mov	r0, r4
 80074ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074ee:	f7ff bf7f 	b.w	80073f0 <igmp_init>

080074f2 <ip_shutdown>:
 80074f2:	b508      	push	{r3, lr}
 80074f4:	f7ff ffde 	bl	80074b4 <igmp_shutdown>
 80074f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80074fc:	f7ff bee0 	b.w	80072c0 <udp_shutdown>

08007500 <console_init>:
 8007500:	b508      	push	{r3, lr}
 8007502:	f00c fe19 	bl	8014138 <uart0_init>
 8007506:	4804      	ldr	r0, [pc, #16]	; (8007518 <console_init+0x18>)
 8007508:	f00c fe46 	bl	8014198 <uart0_puts>
 800750c:	4803      	ldr	r0, [pc, #12]	; (800751c <console_init+0x1c>)
 800750e:	f00c fe43 	bl	8014198 <uart0_puts>
 8007512:	2000      	movs	r0, #0
 8007514:	bd08      	pop	{r3, pc}
 8007516:	bf00      	nop
 8007518:	080160ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, sp, lr}
 800751c:	0801821c 	stmdaeq	r1, {r2, r3, r4, r9, pc}

08007520 <net_handle>:
 8007520:	b510      	push	{r4, lr}
 8007522:	4c0c      	ldr	r4, [pc, #48]	; (8007554 <net_handle+0x34>)
 8007524:	4620      	mov	r0, r4
 8007526:	f00d faf1 	bl	8014b0c <emac_eth_recv>
 800752a:	2800      	cmp	r0, #0
 800752c:	dd07      	ble.n	800753e <net_handle+0x1e>
 800752e:	6820      	ldr	r0, [r4, #0]
 8007530:	8983      	ldrh	r3, [r0, #12]
 8007532:	2b08      	cmp	r3, #8
 8007534:	d107      	bne.n	8007546 <net_handle+0x26>
 8007536:	f000 f8bf 	bl	80076b8 <ip_handle>
 800753a:	f00d fafb 	bl	8014b34 <emac_free_pkt>
 800753e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007542:	f009 baa1 	b.w	8010a88 <net_timers_run>
 8007546:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800754a:	d1f6      	bne.n	800753a <net_handle+0x1a>
 800754c:	f000 f858 	bl	8007600 <arp_handle>
 8007550:	e7f3      	b.n	800753a <net_handle+0x1a>
 8007552:	bf00      	nop
 8007554:	200029f8 	strdcs	r2, [r0], -r8

08007558 <udp_handle>:
 8007558:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800755c:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 800755e:	4607      	mov	r7, r0
 8007560:	ba5b      	rev16	r3, r3
 8007562:	b29b      	uxth	r3, r3
 8007564:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
 8007568:	2a01      	cmp	r2, #1
 800756a:	d904      	bls.n	8007576 <udp_handle+0x1e>
 800756c:	2b7b      	cmp	r3, #123	; 0x7b
 800756e:	d002      	beq.n	8007576 <udp_handle+0x1e>
 8007570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007574:	d308      	bcc.n	8007588 <udp_handle+0x30>
 8007576:	2400      	movs	r4, #0
 8007578:	4a1f      	ldr	r2, [pc, #124]	; (80075f8 <udp_handle+0xa0>)
 800757a:	f852 1b04 	ldr.w	r1, [r2], #4
 800757e:	4299      	cmp	r1, r3
 8007580:	d005      	beq.n	800758e <udp_handle+0x36>
 8007582:	3401      	adds	r4, #1
 8007584:	2c08      	cmp	r4, #8
 8007586:	d1f8      	bne.n	800757a <udp_handle+0x22>
 8007588:	b002      	add	sp, #8
 800758a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800758e:	f640 3394 	movw	r3, #2964	; 0xb94
 8007592:	8cfe      	ldrh	r6, [r7, #38]	; 0x26
 8007594:	435c      	muls	r4, r3
 8007596:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 800759a:	ba76      	rev16	r6, r6
 800759c:	3e08      	subs	r6, #8
 800759e:	b2b6      	uxth	r6, r6
 80075a0:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 80075a4:	bf28      	it	cs
 80075a6:	f44f 66b8 	movcs.w	r6, #1472	; 0x5c0
 80075aa:	f8df 8050 	ldr.w	r8, [pc, #80]	; 80075fc <udp_handle+0xa4>
 80075ae:	1d20      	adds	r0, r4, #4
 80075b0:	f838 5004 	ldrh.w	r5, [r8, r4]
 80075b4:	4632      	mov	r2, r6
 80075b6:	435d      	muls	r5, r3
 80075b8:	4428      	add	r0, r5
 80075ba:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 80075be:	4440      	add	r0, r8
 80075c0:	f009 fabc 	bl	8010b3c <memcpy.isra.0>
 80075c4:	2204      	movs	r2, #4
 80075c6:	f107 011a 	add.w	r1, r7, #26
 80075ca:	eb0d 0002 	add.w	r0, sp, r2
 80075ce:	f009 fab5 	bl	8010b3c <memcpy.isra.0>
 80075d2:	9a01      	ldr	r2, [sp, #4]
 80075d4:	192b      	adds	r3, r5, r4
 80075d6:	4443      	add	r3, r8
 80075d8:	f8c3 25c4 	str.w	r2, [r3, #1476]	; 0x5c4
 80075dc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80075de:	f8a3 65ca 	strh.w	r6, [r3, #1482]	; 0x5ca
 80075e2:	ba52      	rev16	r2, r2
 80075e4:	f8a3 25c8 	strh.w	r2, [r3, #1480]	; 0x5c8
 80075e8:	f838 3004 	ldrh.w	r3, [r8, r4]
 80075ec:	3301      	adds	r3, #1
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	f828 3004 	strh.w	r3, [r8, r4]
 80075f6:	e7c7      	b.n	8007588 <udp_handle+0x30>
 80075f8:	2000300c 	andcs	r3, r0, ip
 80075fc:	2000302c 	andcs	r3, r0, ip, lsr #32

08007600 <arp_handle>:
 8007600:	8a83      	ldrh	r3, [r0, #20]
 8007602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007606:	d003      	beq.n	8007610 <arp_handle+0x10>
 8007608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800760c:	d002      	beq.n	8007614 <arp_handle+0x14>
 800760e:	4770      	bx	lr
 8007610:	f00a bcc6 	b.w	8011fa0 <arp_handle_request>
 8007614:	f00a bcec 	b.w	8011ff0 <arp_handle_reply>

08007618 <igmp_handle>:
 8007618:	7b83      	ldrb	r3, [r0, #14]
 800761a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800761e:	2b45      	cmp	r3, #69	; 0x45
 8007620:	d116      	bne.n	8007650 <igmp_handle+0x38>
 8007622:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8007626:	2b11      	cmp	r3, #17
 8007628:	d112      	bne.n	8007650 <igmp_handle+0x38>
 800762a:	4b20      	ldr	r3, [pc, #128]	; (80076ac <igmp_handle+0x94>)
 800762c:	f100 051d 	add.w	r5, r0, #29
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	466a      	mov	r2, sp
 8007634:	462b      	mov	r3, r5
 8007636:	f100 0621 	add.w	r6, r0, #33	; 0x21
 800763a:	42b3      	cmp	r3, r6
 800763c:	d10b      	bne.n	8007656 <igmp_handle+0x3e>
 800763e:	2401      	movs	r4, #1
 8007640:	2100      	movs	r1, #0
 8007642:	f04f 0c01 	mov.w	ip, #1
 8007646:	4b1a      	ldr	r3, [pc, #104]	; (80076b0 <igmp_handle+0x98>)
 8007648:	4a1a      	ldr	r2, [pc, #104]	; (80076b4 <igmp_handle+0x9c>)
 800764a:	681f      	ldr	r7, [r3, #0]
 800764c:	428f      	cmp	r7, r1
 800764e:	d10a      	bne.n	8007666 <igmp_handle+0x4e>
 8007650:	b003      	add	sp, #12
 8007652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007656:	f812 1b01 	ldrb.w	r1, [r2], #1
 800765a:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800765e:	428c      	cmp	r4, r1
 8007660:	d0eb      	beq.n	800763a <igmp_handle+0x22>
 8007662:	2400      	movs	r4, #0
 8007664:	e7ec      	b.n	8007640 <igmp_handle+0x28>
 8007666:	6813      	ldr	r3, [r2, #0]
 8007668:	9301      	str	r3, [sp, #4]
 800766a:	b924      	cbnz	r4, 8007676 <igmp_handle+0x5e>
 800766c:	462b      	mov	r3, r5
 800766e:	f10d 0e04 	add.w	lr, sp, #4
 8007672:	42b3      	cmp	r3, r6
 8007674:	d10e      	bne.n	8007694 <igmp_handle+0x7c>
 8007676:	f892 e005 	ldrb.w	lr, [r2, #5]
 800767a:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 800767e:	f1be 0f01 	cmp.w	lr, #1
 8007682:	d110      	bne.n	80076a6 <igmp_handle+0x8e>
 8007684:	f892 e004 	ldrb.w	lr, [r2, #4]
 8007688:	459e      	cmp	lr, r3
 800768a:	d909      	bls.n	80076a0 <igmp_handle+0x88>
 800768c:	085b      	lsrs	r3, r3, #1
 800768e:	3301      	adds	r3, #1
 8007690:	7113      	strb	r3, [r2, #4]
 8007692:	e005      	b.n	80076a0 <igmp_handle+0x88>
 8007694:	f81e 8b01 	ldrb.w	r8, [lr], #1
 8007698:	f813 9f01 	ldrb.w	r9, [r3, #1]!
 800769c:	45c1      	cmp	r9, r8
 800769e:	d0e8      	beq.n	8007672 <igmp_handle+0x5a>
 80076a0:	3101      	adds	r1, #1
 80076a2:	3208      	adds	r2, #8
 80076a4:	e7d2      	b.n	800764c <igmp_handle+0x34>
 80076a6:	f882 c005 	strb.w	ip, [r2, #5]
 80076aa:	e7ef      	b.n	800768c <igmp_handle+0x74>
 80076ac:	010000e0 	smlatteq	r0, r0, r0, r0
 80076b0:	20009c5c 	andcs	r9, r0, ip, asr ip
 80076b4:	20009b38 	andcs	r9, r0, r8, lsr fp

080076b8 <ip_handle>:
 80076b8:	7b82      	ldrb	r2, [r0, #14]
 80076ba:	7dc3      	ldrb	r3, [r0, #23]
 80076bc:	2a45      	cmp	r2, #69	; 0x45
 80076be:	d003      	beq.n	80076c8 <ip_handle+0x10>
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d10b      	bne.n	80076dc <ip_handle+0x24>
 80076c4:	f7ff bfa8 	b.w	8007618 <igmp_handle>
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d0fb      	beq.n	80076c4 <ip_handle+0xc>
 80076cc:	2b11      	cmp	r3, #17
 80076ce:	d003      	beq.n	80076d8 <ip_handle+0x20>
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d103      	bne.n	80076dc <ip_handle+0x24>
 80076d4:	f000 b804 	b.w	80076e0 <icmp_handle>
 80076d8:	f7ff bf3e 	b.w	8007558 <udp_handle>
 80076dc:	4770      	bx	lr
	...

080076e0 <icmp_handle>:
 80076e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076e2:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80076e6:	4604      	mov	r4, r0
 80076e8:	2b08      	cmp	r3, #8
 80076ea:	d13e      	bne.n	800776a <icmp_handle+0x8a>
 80076ec:	f890 5023 	ldrb.w	r5, [r0, #35]	; 0x23
 80076f0:	2d00      	cmp	r5, #0
 80076f2:	d13a      	bne.n	800776a <icmp_handle+0x8a>
 80076f4:	1d86      	adds	r6, r0, #6
 80076f6:	4631      	mov	r1, r6
 80076f8:	2206      	movs	r2, #6
 80076fa:	f00a fffd 	bl	80126f8 <memcpy.isra.0>
 80076fe:	4630      	mov	r0, r6
 8007700:	2206      	movs	r2, #6
 8007702:	491b      	ldr	r1, [pc, #108]	; (8007770 <icmp_handle+0x90>)
 8007704:	f00a fff8 	bl	80126f8 <memcpy.isra.0>
 8007708:	8a63      	ldrh	r3, [r4, #18]
 800770a:	f104 061a 	add.w	r6, r4, #26
 800770e:	43db      	mvns	r3, r3
 8007710:	4631      	mov	r1, r6
 8007712:	2204      	movs	r2, #4
 8007714:	8263      	strh	r3, [r4, #18]
 8007716:	f104 001e 	add.w	r0, r4, #30
 800771a:	f00a ffed 	bl	80126f8 <memcpy.isra.0>
 800771e:	2204      	movs	r2, #4
 8007720:	4b14      	ldr	r3, [pc, #80]	; (8007774 <icmp_handle+0x94>)
 8007722:	eb0d 0102 	add.w	r1, sp, r2
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4630      	mov	r0, r6
 800772a:	f104 060e 	add.w	r6, r4, #14
 800772e:	9301      	str	r3, [sp, #4]
 8007730:	f00a ffe2 	bl	80126f8 <memcpy.isra.0>
 8007734:	2114      	movs	r1, #20
 8007736:	4630      	mov	r0, r6
 8007738:	7625      	strb	r5, [r4, #24]
 800773a:	7665      	strb	r5, [r4, #25]
 800773c:	f00a ffc3 	bl	80126c6 <net_chksum>
 8007740:	8a21      	ldrh	r1, [r4, #16]
 8007742:	8320      	strh	r0, [r4, #24]
 8007744:	ba49      	rev16	r1, r1
 8007746:	b289      	uxth	r1, r1
 8007748:	4630      	mov	r0, r6
 800774a:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 800774e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 8007752:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 8007756:	f00a ffb6 	bl	80126c6 <net_chksum>
 800775a:	8a21      	ldrh	r1, [r4, #16]
 800775c:	84a0      	strh	r0, [r4, #36]	; 0x24
 800775e:	ba49      	rev16	r1, r1
 8007760:	b289      	uxth	r1, r1
 8007762:	4620      	mov	r0, r4
 8007764:	310e      	adds	r1, #14
 8007766:	f00d f9e9 	bl	8014b3c <emac_eth_send>
 800776a:	b002      	add	sp, #8
 800776c:	bd70      	pop	{r4, r5, r6, pc}
 800776e:	bf00      	nop
 8007770:	200029f0 	strdcs	r2, [r0], -r0
 8007774:	200029e4 	andcs	r2, r0, r4, ror #19

08007778 <__aeabi_d2f>:
 8007778:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800777c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8007780:	bf24      	itt	cs
 8007782:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8007786:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800778a:	d90d      	bls.n	80077a8 <__aeabi_d2f+0x30>
 800778c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8007790:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8007794:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8007798:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800779c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80077a0:	bf08      	it	eq
 80077a2:	f020 0001 	biceq.w	r0, r0, #1
 80077a6:	4770      	bx	lr
 80077a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80077ac:	d121      	bne.n	80077f2 <__aeabi_d2f+0x7a>
 80077ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80077b2:	bfbc      	itt	lt
 80077b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80077b8:	4770      	bxlt	lr
 80077ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80077be:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80077c2:	f1c2 0218 	rsb	r2, r2, #24
 80077c6:	f1c2 0c20 	rsb	ip, r2, #32
 80077ca:	fa10 f30c 	lsls.w	r3, r0, ip
 80077ce:	fa20 f002 	lsr.w	r0, r0, r2
 80077d2:	bf18      	it	ne
 80077d4:	f040 0001 	orrne.w	r0, r0, #1
 80077d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80077dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80077e0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80077e4:	ea40 000c 	orr.w	r0, r0, ip
 80077e8:	fa23 f302 	lsr.w	r3, r3, r2
 80077ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80077f0:	e7cc      	b.n	800778c <__aeabi_d2f+0x14>
 80077f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80077f6:	d107      	bne.n	8007808 <__aeabi_d2f+0x90>
 80077f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80077fc:	bf1e      	ittt	ne
 80077fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8007802:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8007806:	4770      	bxne	lr
 8007808:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800780c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8007810:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop

08007818 <__aeabi_frsub>:
 8007818:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800781c:	e002      	b.n	8007824 <__addsf3>
 800781e:	bf00      	nop

08007820 <__aeabi_fsub>:
 8007820:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08007824 <__addsf3>:
 8007824:	0042      	lsls	r2, r0, #1
 8007826:	bf1f      	itttt	ne
 8007828:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800782c:	ea92 0f03 	teqne	r2, r3
 8007830:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8007834:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007838:	d06a      	beq.n	8007910 <__addsf3+0xec>
 800783a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800783e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8007842:	bfc1      	itttt	gt
 8007844:	18d2      	addgt	r2, r2, r3
 8007846:	4041      	eorgt	r1, r0
 8007848:	4048      	eorgt	r0, r1
 800784a:	4041      	eorgt	r1, r0
 800784c:	bfb8      	it	lt
 800784e:	425b      	neglt	r3, r3
 8007850:	2b19      	cmp	r3, #25
 8007852:	bf88      	it	hi
 8007854:	4770      	bxhi	lr
 8007856:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800785a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800785e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8007862:	bf18      	it	ne
 8007864:	4240      	negne	r0, r0
 8007866:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800786a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800786e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8007872:	bf18      	it	ne
 8007874:	4249      	negne	r1, r1
 8007876:	ea92 0f03 	teq	r2, r3
 800787a:	d03f      	beq.n	80078fc <__addsf3+0xd8>
 800787c:	f1a2 0201 	sub.w	r2, r2, #1
 8007880:	fa41 fc03 	asr.w	ip, r1, r3
 8007884:	eb10 000c 	adds.w	r0, r0, ip
 8007888:	f1c3 0320 	rsb	r3, r3, #32
 800788c:	fa01 f103 	lsl.w	r1, r1, r3
 8007890:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8007894:	d502      	bpl.n	800789c <__addsf3+0x78>
 8007896:	4249      	negs	r1, r1
 8007898:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800789c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80078a0:	d313      	bcc.n	80078ca <__addsf3+0xa6>
 80078a2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80078a6:	d306      	bcc.n	80078b6 <__addsf3+0x92>
 80078a8:	0840      	lsrs	r0, r0, #1
 80078aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80078ae:	f102 0201 	add.w	r2, r2, #1
 80078b2:	2afe      	cmp	r2, #254	; 0xfe
 80078b4:	d251      	bcs.n	800795a <__addsf3+0x136>
 80078b6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80078ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80078be:	bf08      	it	eq
 80078c0:	f020 0001 	biceq.w	r0, r0, #1
 80078c4:	ea40 0003 	orr.w	r0, r0, r3
 80078c8:	4770      	bx	lr
 80078ca:	0049      	lsls	r1, r1, #1
 80078cc:	eb40 0000 	adc.w	r0, r0, r0
 80078d0:	3a01      	subs	r2, #1
 80078d2:	bf28      	it	cs
 80078d4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80078d8:	d2ed      	bcs.n	80078b6 <__addsf3+0x92>
 80078da:	fab0 fc80 	clz	ip, r0
 80078de:	f1ac 0c08 	sub.w	ip, ip, #8
 80078e2:	ebb2 020c 	subs.w	r2, r2, ip
 80078e6:	fa00 f00c 	lsl.w	r0, r0, ip
 80078ea:	bfaa      	itet	ge
 80078ec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80078f0:	4252      	neglt	r2, r2
 80078f2:	4318      	orrge	r0, r3
 80078f4:	bfbc      	itt	lt
 80078f6:	40d0      	lsrlt	r0, r2
 80078f8:	4318      	orrlt	r0, r3
 80078fa:	4770      	bx	lr
 80078fc:	f092 0f00 	teq	r2, #0
 8007900:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8007904:	bf06      	itte	eq
 8007906:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800790a:	3201      	addeq	r2, #1
 800790c:	3b01      	subne	r3, #1
 800790e:	e7b5      	b.n	800787c <__addsf3+0x58>
 8007910:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8007914:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007918:	bf18      	it	ne
 800791a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800791e:	d021      	beq.n	8007964 <__addsf3+0x140>
 8007920:	ea92 0f03 	teq	r2, r3
 8007924:	d004      	beq.n	8007930 <__addsf3+0x10c>
 8007926:	f092 0f00 	teq	r2, #0
 800792a:	bf08      	it	eq
 800792c:	4608      	moveq	r0, r1
 800792e:	4770      	bx	lr
 8007930:	ea90 0f01 	teq	r0, r1
 8007934:	bf1c      	itt	ne
 8007936:	2000      	movne	r0, #0
 8007938:	4770      	bxne	lr
 800793a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800793e:	d104      	bne.n	800794a <__addsf3+0x126>
 8007940:	0040      	lsls	r0, r0, #1
 8007942:	bf28      	it	cs
 8007944:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8007948:	4770      	bx	lr
 800794a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800794e:	bf3c      	itt	cc
 8007950:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8007954:	4770      	bxcc	lr
 8007956:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800795a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800795e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007962:	4770      	bx	lr
 8007964:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8007968:	bf16      	itet	ne
 800796a:	4608      	movne	r0, r1
 800796c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8007970:	4601      	movne	r1, r0
 8007972:	0242      	lsls	r2, r0, #9
 8007974:	bf06      	itte	eq
 8007976:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800797a:	ea90 0f01 	teqeq	r0, r1
 800797e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8007982:	4770      	bx	lr

08007984 <__aeabi_ui2f>:
 8007984:	f04f 0300 	mov.w	r3, #0
 8007988:	e004      	b.n	8007994 <__aeabi_i2f+0x8>
 800798a:	bf00      	nop

0800798c <__aeabi_i2f>:
 800798c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8007990:	bf48      	it	mi
 8007992:	4240      	negmi	r0, r0
 8007994:	ea5f 0c00 	movs.w	ip, r0
 8007998:	bf08      	it	eq
 800799a:	4770      	bxeq	lr
 800799c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80079a0:	4601      	mov	r1, r0
 80079a2:	f04f 0000 	mov.w	r0, #0
 80079a6:	e01c      	b.n	80079e2 <__aeabi_l2f+0x2a>

080079a8 <__aeabi_ul2f>:
 80079a8:	ea50 0201 	orrs.w	r2, r0, r1
 80079ac:	bf08      	it	eq
 80079ae:	4770      	bxeq	lr
 80079b0:	f04f 0300 	mov.w	r3, #0
 80079b4:	e00a      	b.n	80079cc <__aeabi_l2f+0x14>
 80079b6:	bf00      	nop

080079b8 <__aeabi_l2f>:
 80079b8:	ea50 0201 	orrs.w	r2, r0, r1
 80079bc:	bf08      	it	eq
 80079be:	4770      	bxeq	lr
 80079c0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80079c4:	d502      	bpl.n	80079cc <__aeabi_l2f+0x14>
 80079c6:	4240      	negs	r0, r0
 80079c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80079cc:	ea5f 0c01 	movs.w	ip, r1
 80079d0:	bf02      	ittt	eq
 80079d2:	4684      	moveq	ip, r0
 80079d4:	4601      	moveq	r1, r0
 80079d6:	2000      	moveq	r0, #0
 80079d8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80079dc:	bf08      	it	eq
 80079de:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80079e2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80079e6:	fabc f28c 	clz	r2, ip
 80079ea:	3a08      	subs	r2, #8
 80079ec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80079f0:	db10      	blt.n	8007a14 <__aeabi_l2f+0x5c>
 80079f2:	fa01 fc02 	lsl.w	ip, r1, r2
 80079f6:	4463      	add	r3, ip
 80079f8:	fa00 fc02 	lsl.w	ip, r0, r2
 80079fc:	f1c2 0220 	rsb	r2, r2, #32
 8007a00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007a04:	fa20 f202 	lsr.w	r2, r0, r2
 8007a08:	eb43 0002 	adc.w	r0, r3, r2
 8007a0c:	bf08      	it	eq
 8007a0e:	f020 0001 	biceq.w	r0, r0, #1
 8007a12:	4770      	bx	lr
 8007a14:	f102 0220 	add.w	r2, r2, #32
 8007a18:	fa01 fc02 	lsl.w	ip, r1, r2
 8007a1c:	f1c2 0220 	rsb	r2, r2, #32
 8007a20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8007a24:	fa21 f202 	lsr.w	r2, r1, r2
 8007a28:	eb43 0002 	adc.w	r0, r3, r2
 8007a2c:	bf08      	it	eq
 8007a2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8007a32:	4770      	bx	lr

08007a34 <__gesf2>:
 8007a34:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007a38:	e006      	b.n	8007a48 <__cmpsf2+0x4>
 8007a3a:	bf00      	nop

08007a3c <__lesf2>:
 8007a3c:	f04f 0c01 	mov.w	ip, #1
 8007a40:	e002      	b.n	8007a48 <__cmpsf2+0x4>
 8007a42:	bf00      	nop

08007a44 <__cmpsf2>:
 8007a44:	f04f 0c01 	mov.w	ip, #1
 8007a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8007a4c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8007a50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8007a54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007a58:	bf18      	it	ne
 8007a5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007a5e:	d011      	beq.n	8007a84 <__cmpsf2+0x40>
 8007a60:	b001      	add	sp, #4
 8007a62:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8007a66:	bf18      	it	ne
 8007a68:	ea90 0f01 	teqne	r0, r1
 8007a6c:	bf58      	it	pl
 8007a6e:	ebb2 0003 	subspl.w	r0, r2, r3
 8007a72:	bf88      	it	hi
 8007a74:	17c8      	asrhi	r0, r1, #31
 8007a76:	bf38      	it	cc
 8007a78:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8007a7c:	bf18      	it	ne
 8007a7e:	f040 0001 	orrne.w	r0, r0, #1
 8007a82:	4770      	bx	lr
 8007a84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007a88:	d102      	bne.n	8007a90 <__cmpsf2+0x4c>
 8007a8a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8007a8e:	d105      	bne.n	8007a9c <__cmpsf2+0x58>
 8007a90:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8007a94:	d1e4      	bne.n	8007a60 <__cmpsf2+0x1c>
 8007a96:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8007a9a:	d0e1      	beq.n	8007a60 <__cmpsf2+0x1c>
 8007a9c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop

08007aa4 <__aeabi_cfrcmple>:
 8007aa4:	4684      	mov	ip, r0
 8007aa6:	4608      	mov	r0, r1
 8007aa8:	4661      	mov	r1, ip
 8007aaa:	e7ff      	b.n	8007aac <__aeabi_cfcmpeq>

08007aac <__aeabi_cfcmpeq>:
 8007aac:	b50f      	push	{r0, r1, r2, r3, lr}
 8007aae:	f7ff ffc9 	bl	8007a44 <__cmpsf2>
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	bf48      	it	mi
 8007ab6:	f110 0f00 	cmnmi.w	r0, #0
 8007aba:	bd0f      	pop	{r0, r1, r2, r3, pc}

08007abc <__aeabi_fcmpeq>:
 8007abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007ac0:	f7ff fff4 	bl	8007aac <__aeabi_cfcmpeq>
 8007ac4:	bf0c      	ite	eq
 8007ac6:	2001      	moveq	r0, #1
 8007ac8:	2000      	movne	r0, #0
 8007aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8007ace:	bf00      	nop

08007ad0 <__aeabi_fcmplt>:
 8007ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007ad4:	f7ff ffea 	bl	8007aac <__aeabi_cfcmpeq>
 8007ad8:	bf34      	ite	cc
 8007ada:	2001      	movcc	r0, #1
 8007adc:	2000      	movcs	r0, #0
 8007ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8007ae2:	bf00      	nop

08007ae4 <__aeabi_fcmple>:
 8007ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007ae8:	f7ff ffe0 	bl	8007aac <__aeabi_cfcmpeq>
 8007aec:	bf94      	ite	ls
 8007aee:	2001      	movls	r0, #1
 8007af0:	2000      	movhi	r0, #0
 8007af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8007af6:	bf00      	nop

08007af8 <__aeabi_fcmpge>:
 8007af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007afc:	f7ff ffd2 	bl	8007aa4 <__aeabi_cfrcmple>
 8007b00:	bf94      	ite	ls
 8007b02:	2001      	movls	r0, #1
 8007b04:	2000      	movhi	r0, #0
 8007b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8007b0a:	bf00      	nop

08007b0c <__aeabi_fcmpgt>:
 8007b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007b10:	f7ff ffc8 	bl	8007aa4 <__aeabi_cfrcmple>
 8007b14:	bf34      	ite	cc
 8007b16:	2001      	movcc	r0, #1
 8007b18:	2000      	movcs	r0, #0
 8007b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8007b1e:	bf00      	nop

08007b20 <__aeabi_f2iz>:
 8007b20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8007b24:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8007b28:	d30f      	bcc.n	8007b4a <__aeabi_f2iz+0x2a>
 8007b2a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8007b2e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8007b32:	d90d      	bls.n	8007b50 <__aeabi_f2iz+0x30>
 8007b34:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8007b38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b3c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8007b40:	fa23 f002 	lsr.w	r0, r3, r2
 8007b44:	bf18      	it	ne
 8007b46:	4240      	negne	r0, r0
 8007b48:	4770      	bx	lr
 8007b4a:	f04f 0000 	mov.w	r0, #0
 8007b4e:	4770      	bx	lr
 8007b50:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8007b54:	d101      	bne.n	8007b5a <__aeabi_f2iz+0x3a>
 8007b56:	0242      	lsls	r2, r0, #9
 8007b58:	d105      	bne.n	8007b66 <__aeabi_f2iz+0x46>
 8007b5a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8007b5e:	bf08      	it	eq
 8007b60:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8007b64:	4770      	bx	lr
 8007b66:	f04f 0000 	mov.w	r0, #0
 8007b6a:	4770      	bx	lr

08007b6c <__aeabi_uldivmod>:
 8007b6c:	b953      	cbnz	r3, 8007b84 <__aeabi_uldivmod+0x18>
 8007b6e:	b94a      	cbnz	r2, 8007b84 <__aeabi_uldivmod+0x18>
 8007b70:	2900      	cmp	r1, #0
 8007b72:	bf08      	it	eq
 8007b74:	2800      	cmpeq	r0, #0
 8007b76:	bf1c      	itt	ne
 8007b78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8007b7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8007b80:	f000 b80c 	b.w	8007b9c <__aeabi_idiv0>
 8007b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8007b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8007b8c:	f001 fa9e 	bl	80090cc <__udivmoddi4>
 8007b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b98:	b004      	add	sp, #16
 8007b9a:	4770      	bx	lr

08007b9c <__aeabi_idiv0>:
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop

08007ba0 <__aeabi_drsub>:
 8007ba0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8007ba4:	e002      	b.n	8007bac <__adddf3>
 8007ba6:	bf00      	nop

08007ba8 <__aeabi_dsub>:
 8007ba8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08007bac <__adddf3>:
 8007bac:	b530      	push	{r4, r5, lr}
 8007bae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8007bb2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8007bb6:	ea94 0f05 	teq	r4, r5
 8007bba:	bf08      	it	eq
 8007bbc:	ea90 0f02 	teqeq	r0, r2
 8007bc0:	bf1f      	itttt	ne
 8007bc2:	ea54 0c00 	orrsne.w	ip, r4, r0
 8007bc6:	ea55 0c02 	orrsne.w	ip, r5, r2
 8007bca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8007bce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007bd2:	f000 80e2 	beq.w	8007d9a <__adddf3+0x1ee>
 8007bd6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8007bda:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8007bde:	bfb8      	it	lt
 8007be0:	426d      	neglt	r5, r5
 8007be2:	dd0c      	ble.n	8007bfe <__adddf3+0x52>
 8007be4:	442c      	add	r4, r5
 8007be6:	ea80 0202 	eor.w	r2, r0, r2
 8007bea:	ea81 0303 	eor.w	r3, r1, r3
 8007bee:	ea82 0000 	eor.w	r0, r2, r0
 8007bf2:	ea83 0101 	eor.w	r1, r3, r1
 8007bf6:	ea80 0202 	eor.w	r2, r0, r2
 8007bfa:	ea81 0303 	eor.w	r3, r1, r3
 8007bfe:	2d36      	cmp	r5, #54	; 0x36
 8007c00:	bf88      	it	hi
 8007c02:	bd30      	pophi	{r4, r5, pc}
 8007c04:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007c08:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007c0c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8007c10:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8007c14:	d002      	beq.n	8007c1c <__adddf3+0x70>
 8007c16:	4240      	negs	r0, r0
 8007c18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007c1c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8007c20:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007c24:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8007c28:	d002      	beq.n	8007c30 <__adddf3+0x84>
 8007c2a:	4252      	negs	r2, r2
 8007c2c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8007c30:	ea94 0f05 	teq	r4, r5
 8007c34:	f000 80a7 	beq.w	8007d86 <__adddf3+0x1da>
 8007c38:	f1a4 0401 	sub.w	r4, r4, #1
 8007c3c:	f1d5 0e20 	rsbs	lr, r5, #32
 8007c40:	db0d      	blt.n	8007c5e <__adddf3+0xb2>
 8007c42:	fa02 fc0e 	lsl.w	ip, r2, lr
 8007c46:	fa22 f205 	lsr.w	r2, r2, r5
 8007c4a:	1880      	adds	r0, r0, r2
 8007c4c:	f141 0100 	adc.w	r1, r1, #0
 8007c50:	fa03 f20e 	lsl.w	r2, r3, lr
 8007c54:	1880      	adds	r0, r0, r2
 8007c56:	fa43 f305 	asr.w	r3, r3, r5
 8007c5a:	4159      	adcs	r1, r3
 8007c5c:	e00e      	b.n	8007c7c <__adddf3+0xd0>
 8007c5e:	f1a5 0520 	sub.w	r5, r5, #32
 8007c62:	f10e 0e20 	add.w	lr, lr, #32
 8007c66:	2a01      	cmp	r2, #1
 8007c68:	fa03 fc0e 	lsl.w	ip, r3, lr
 8007c6c:	bf28      	it	cs
 8007c6e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8007c72:	fa43 f305 	asr.w	r3, r3, r5
 8007c76:	18c0      	adds	r0, r0, r3
 8007c78:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8007c7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007c80:	d507      	bpl.n	8007c92 <__adddf3+0xe6>
 8007c82:	f04f 0e00 	mov.w	lr, #0
 8007c86:	f1dc 0c00 	rsbs	ip, ip, #0
 8007c8a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8007c8e:	eb6e 0101 	sbc.w	r1, lr, r1
 8007c92:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007c96:	d31b      	bcc.n	8007cd0 <__adddf3+0x124>
 8007c98:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007c9c:	d30c      	bcc.n	8007cb8 <__adddf3+0x10c>
 8007c9e:	0849      	lsrs	r1, r1, #1
 8007ca0:	ea5f 0030 	movs.w	r0, r0, rrx
 8007ca4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8007ca8:	f104 0401 	add.w	r4, r4, #1
 8007cac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8007cb0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8007cb4:	f080 809a 	bcs.w	8007dec <__adddf3+0x240>
 8007cb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007cbc:	bf08      	it	eq
 8007cbe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007cc2:	f150 0000 	adcs.w	r0, r0, #0
 8007cc6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007cca:	ea41 0105 	orr.w	r1, r1, r5
 8007cce:	bd30      	pop	{r4, r5, pc}
 8007cd0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8007cd4:	4140      	adcs	r0, r0
 8007cd6:	eb41 0101 	adc.w	r1, r1, r1
 8007cda:	3c01      	subs	r4, #1
 8007cdc:	bf28      	it	cs
 8007cde:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8007ce2:	d2e9      	bcs.n	8007cb8 <__adddf3+0x10c>
 8007ce4:	f091 0f00 	teq	r1, #0
 8007ce8:	bf04      	itt	eq
 8007cea:	4601      	moveq	r1, r0
 8007cec:	2000      	moveq	r0, #0
 8007cee:	fab1 f381 	clz	r3, r1
 8007cf2:	bf08      	it	eq
 8007cf4:	3320      	addeq	r3, #32
 8007cf6:	f1a3 030b 	sub.w	r3, r3, #11
 8007cfa:	f1b3 0220 	subs.w	r2, r3, #32
 8007cfe:	da0c      	bge.n	8007d1a <__adddf3+0x16e>
 8007d00:	320c      	adds	r2, #12
 8007d02:	dd08      	ble.n	8007d16 <__adddf3+0x16a>
 8007d04:	f102 0c14 	add.w	ip, r2, #20
 8007d08:	f1c2 020c 	rsb	r2, r2, #12
 8007d0c:	fa01 f00c 	lsl.w	r0, r1, ip
 8007d10:	fa21 f102 	lsr.w	r1, r1, r2
 8007d14:	e00c      	b.n	8007d30 <__adddf3+0x184>
 8007d16:	f102 0214 	add.w	r2, r2, #20
 8007d1a:	bfd8      	it	le
 8007d1c:	f1c2 0c20 	rsble	ip, r2, #32
 8007d20:	fa01 f102 	lsl.w	r1, r1, r2
 8007d24:	fa20 fc0c 	lsr.w	ip, r0, ip
 8007d28:	bfdc      	itt	le
 8007d2a:	ea41 010c 	orrle.w	r1, r1, ip
 8007d2e:	4090      	lslle	r0, r2
 8007d30:	1ae4      	subs	r4, r4, r3
 8007d32:	bfa2      	ittt	ge
 8007d34:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8007d38:	4329      	orrge	r1, r5
 8007d3a:	bd30      	popge	{r4, r5, pc}
 8007d3c:	ea6f 0404 	mvn.w	r4, r4
 8007d40:	3c1f      	subs	r4, #31
 8007d42:	da1c      	bge.n	8007d7e <__adddf3+0x1d2>
 8007d44:	340c      	adds	r4, #12
 8007d46:	dc0e      	bgt.n	8007d66 <__adddf3+0x1ba>
 8007d48:	f104 0414 	add.w	r4, r4, #20
 8007d4c:	f1c4 0220 	rsb	r2, r4, #32
 8007d50:	fa20 f004 	lsr.w	r0, r0, r4
 8007d54:	fa01 f302 	lsl.w	r3, r1, r2
 8007d58:	ea40 0003 	orr.w	r0, r0, r3
 8007d5c:	fa21 f304 	lsr.w	r3, r1, r4
 8007d60:	ea45 0103 	orr.w	r1, r5, r3
 8007d64:	bd30      	pop	{r4, r5, pc}
 8007d66:	f1c4 040c 	rsb	r4, r4, #12
 8007d6a:	f1c4 0220 	rsb	r2, r4, #32
 8007d6e:	fa20 f002 	lsr.w	r0, r0, r2
 8007d72:	fa01 f304 	lsl.w	r3, r1, r4
 8007d76:	ea40 0003 	orr.w	r0, r0, r3
 8007d7a:	4629      	mov	r1, r5
 8007d7c:	bd30      	pop	{r4, r5, pc}
 8007d7e:	fa21 f004 	lsr.w	r0, r1, r4
 8007d82:	4629      	mov	r1, r5
 8007d84:	bd30      	pop	{r4, r5, pc}
 8007d86:	f094 0f00 	teq	r4, #0
 8007d8a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8007d8e:	bf06      	itte	eq
 8007d90:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8007d94:	3401      	addeq	r4, #1
 8007d96:	3d01      	subne	r5, #1
 8007d98:	e74e      	b.n	8007c38 <__adddf3+0x8c>
 8007d9a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007d9e:	bf18      	it	ne
 8007da0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007da4:	d029      	beq.n	8007dfa <__adddf3+0x24e>
 8007da6:	ea94 0f05 	teq	r4, r5
 8007daa:	bf08      	it	eq
 8007dac:	ea90 0f02 	teqeq	r0, r2
 8007db0:	d005      	beq.n	8007dbe <__adddf3+0x212>
 8007db2:	ea54 0c00 	orrs.w	ip, r4, r0
 8007db6:	bf04      	itt	eq
 8007db8:	4619      	moveq	r1, r3
 8007dba:	4610      	moveq	r0, r2
 8007dbc:	bd30      	pop	{r4, r5, pc}
 8007dbe:	ea91 0f03 	teq	r1, r3
 8007dc2:	bf1e      	ittt	ne
 8007dc4:	2100      	movne	r1, #0
 8007dc6:	2000      	movne	r0, #0
 8007dc8:	bd30      	popne	{r4, r5, pc}
 8007dca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8007dce:	d105      	bne.n	8007ddc <__adddf3+0x230>
 8007dd0:	0040      	lsls	r0, r0, #1
 8007dd2:	4149      	adcs	r1, r1
 8007dd4:	bf28      	it	cs
 8007dd6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8007dda:	bd30      	pop	{r4, r5, pc}
 8007ddc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8007de0:	bf3c      	itt	cc
 8007de2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8007de6:	bd30      	popcc	{r4, r5, pc}
 8007de8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007dec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8007df0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007df4:	f04f 0000 	mov.w	r0, #0
 8007df8:	bd30      	pop	{r4, r5, pc}
 8007dfa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007dfe:	bf1a      	itte	ne
 8007e00:	4619      	movne	r1, r3
 8007e02:	4610      	movne	r0, r2
 8007e04:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8007e08:	bf1c      	itt	ne
 8007e0a:	460b      	movne	r3, r1
 8007e0c:	4602      	movne	r2, r0
 8007e0e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007e12:	bf06      	itte	eq
 8007e14:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8007e18:	ea91 0f03 	teqeq	r1, r3
 8007e1c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8007e20:	bd30      	pop	{r4, r5, pc}
 8007e22:	bf00      	nop

08007e24 <__aeabi_ui2d>:
 8007e24:	f090 0f00 	teq	r0, #0
 8007e28:	bf04      	itt	eq
 8007e2a:	2100      	moveq	r1, #0
 8007e2c:	4770      	bxeq	lr
 8007e2e:	b530      	push	{r4, r5, lr}
 8007e30:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007e34:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007e38:	f04f 0500 	mov.w	r5, #0
 8007e3c:	f04f 0100 	mov.w	r1, #0
 8007e40:	e750      	b.n	8007ce4 <__adddf3+0x138>
 8007e42:	bf00      	nop

08007e44 <__aeabi_i2d>:
 8007e44:	f090 0f00 	teq	r0, #0
 8007e48:	bf04      	itt	eq
 8007e4a:	2100      	moveq	r1, #0
 8007e4c:	4770      	bxeq	lr
 8007e4e:	b530      	push	{r4, r5, lr}
 8007e50:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007e54:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007e58:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8007e5c:	bf48      	it	mi
 8007e5e:	4240      	negmi	r0, r0
 8007e60:	f04f 0100 	mov.w	r1, #0
 8007e64:	e73e      	b.n	8007ce4 <__adddf3+0x138>
 8007e66:	bf00      	nop

08007e68 <__aeabi_f2d>:
 8007e68:	0042      	lsls	r2, r0, #1
 8007e6a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8007e6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8007e72:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8007e76:	bf1f      	itttt	ne
 8007e78:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8007e7c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007e80:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8007e84:	4770      	bxne	lr
 8007e86:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8007e8a:	bf08      	it	eq
 8007e8c:	4770      	bxeq	lr
 8007e8e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8007e92:	bf04      	itt	eq
 8007e94:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8007e98:	4770      	bxeq	lr
 8007e9a:	b530      	push	{r4, r5, lr}
 8007e9c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8007ea0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007ea4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007ea8:	e71c      	b.n	8007ce4 <__adddf3+0x138>
 8007eaa:	bf00      	nop

08007eac <__aeabi_ul2d>:
 8007eac:	ea50 0201 	orrs.w	r2, r0, r1
 8007eb0:	bf08      	it	eq
 8007eb2:	4770      	bxeq	lr
 8007eb4:	b530      	push	{r4, r5, lr}
 8007eb6:	f04f 0500 	mov.w	r5, #0
 8007eba:	e00a      	b.n	8007ed2 <__aeabi_l2d+0x16>

08007ebc <__aeabi_l2d>:
 8007ebc:	ea50 0201 	orrs.w	r2, r0, r1
 8007ec0:	bf08      	it	eq
 8007ec2:	4770      	bxeq	lr
 8007ec4:	b530      	push	{r4, r5, lr}
 8007ec6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8007eca:	d502      	bpl.n	8007ed2 <__aeabi_l2d+0x16>
 8007ecc:	4240      	negs	r0, r0
 8007ece:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007ed2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007ed6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007eda:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8007ede:	f43f aed8 	beq.w	8007c92 <__adddf3+0xe6>
 8007ee2:	f04f 0203 	mov.w	r2, #3
 8007ee6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007eea:	bf18      	it	ne
 8007eec:	3203      	addne	r2, #3
 8007eee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007ef2:	bf18      	it	ne
 8007ef4:	3203      	addne	r2, #3
 8007ef6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8007efa:	f1c2 0320 	rsb	r3, r2, #32
 8007efe:	fa00 fc03 	lsl.w	ip, r0, r3
 8007f02:	fa20 f002 	lsr.w	r0, r0, r2
 8007f06:	fa01 fe03 	lsl.w	lr, r1, r3
 8007f0a:	ea40 000e 	orr.w	r0, r0, lr
 8007f0e:	fa21 f102 	lsr.w	r1, r1, r2
 8007f12:	4414      	add	r4, r2
 8007f14:	e6bd      	b.n	8007c92 <__adddf3+0xe6>
 8007f16:	bf00      	nop

08007f18 <__aeabi_fmul>:
 8007f18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007f1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8007f20:	bf1e      	ittt	ne
 8007f22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8007f26:	ea92 0f0c 	teqne	r2, ip
 8007f2a:	ea93 0f0c 	teqne	r3, ip
 8007f2e:	d06f      	beq.n	8008010 <__aeabi_fmul+0xf8>
 8007f30:	441a      	add	r2, r3
 8007f32:	ea80 0c01 	eor.w	ip, r0, r1
 8007f36:	0240      	lsls	r0, r0, #9
 8007f38:	bf18      	it	ne
 8007f3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8007f3e:	d01e      	beq.n	8007f7e <__aeabi_fmul+0x66>
 8007f40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8007f48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8007f4c:	fba0 3101 	umull	r3, r1, r0, r1
 8007f50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8007f54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8007f58:	bf3e      	ittt	cc
 8007f5a:	0049      	lslcc	r1, r1, #1
 8007f5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8007f60:	005b      	lslcc	r3, r3, #1
 8007f62:	ea40 0001 	orr.w	r0, r0, r1
 8007f66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8007f6a:	2afd      	cmp	r2, #253	; 0xfd
 8007f6c:	d81d      	bhi.n	8007faa <__aeabi_fmul+0x92>
 8007f6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8007f76:	bf08      	it	eq
 8007f78:	f020 0001 	biceq.w	r0, r0, #1
 8007f7c:	4770      	bx	lr
 8007f7e:	f090 0f00 	teq	r0, #0
 8007f82:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8007f86:	bf08      	it	eq
 8007f88:	0249      	lsleq	r1, r1, #9
 8007f8a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8007f8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8007f92:	3a7f      	subs	r2, #127	; 0x7f
 8007f94:	bfc2      	ittt	gt
 8007f96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8007f9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8007f9e:	4770      	bxgt	lr
 8007fa0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007fa4:	f04f 0300 	mov.w	r3, #0
 8007fa8:	3a01      	subs	r2, #1
 8007faa:	dc5d      	bgt.n	8008068 <__aeabi_fmul+0x150>
 8007fac:	f112 0f19 	cmn.w	r2, #25
 8007fb0:	bfdc      	itt	le
 8007fb2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8007fb6:	4770      	bxle	lr
 8007fb8:	f1c2 0200 	rsb	r2, r2, #0
 8007fbc:	0041      	lsls	r1, r0, #1
 8007fbe:	fa21 f102 	lsr.w	r1, r1, r2
 8007fc2:	f1c2 0220 	rsb	r2, r2, #32
 8007fc6:	fa00 fc02 	lsl.w	ip, r0, r2
 8007fca:	ea5f 0031 	movs.w	r0, r1, rrx
 8007fce:	f140 0000 	adc.w	r0, r0, #0
 8007fd2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8007fd6:	bf08      	it	eq
 8007fd8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8007fdc:	4770      	bx	lr
 8007fde:	f092 0f00 	teq	r2, #0
 8007fe2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8007fe6:	bf02      	ittt	eq
 8007fe8:	0040      	lsleq	r0, r0, #1
 8007fea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8007fee:	3a01      	subeq	r2, #1
 8007ff0:	d0f9      	beq.n	8007fe6 <__aeabi_fmul+0xce>
 8007ff2:	ea40 000c 	orr.w	r0, r0, ip
 8007ff6:	f093 0f00 	teq	r3, #0
 8007ffa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8007ffe:	bf02      	ittt	eq
 8008000:	0049      	lsleq	r1, r1, #1
 8008002:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8008006:	3b01      	subeq	r3, #1
 8008008:	d0f9      	beq.n	8007ffe <__aeabi_fmul+0xe6>
 800800a:	ea41 010c 	orr.w	r1, r1, ip
 800800e:	e78f      	b.n	8007f30 <__aeabi_fmul+0x18>
 8008010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8008014:	ea92 0f0c 	teq	r2, ip
 8008018:	bf18      	it	ne
 800801a:	ea93 0f0c 	teqne	r3, ip
 800801e:	d00a      	beq.n	8008036 <__aeabi_fmul+0x11e>
 8008020:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8008024:	bf18      	it	ne
 8008026:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800802a:	d1d8      	bne.n	8007fde <__aeabi_fmul+0xc6>
 800802c:	ea80 0001 	eor.w	r0, r0, r1
 8008030:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008034:	4770      	bx	lr
 8008036:	f090 0f00 	teq	r0, #0
 800803a:	bf17      	itett	ne
 800803c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8008040:	4608      	moveq	r0, r1
 8008042:	f091 0f00 	teqne	r1, #0
 8008046:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800804a:	d014      	beq.n	8008076 <__aeabi_fmul+0x15e>
 800804c:	ea92 0f0c 	teq	r2, ip
 8008050:	d101      	bne.n	8008056 <__aeabi_fmul+0x13e>
 8008052:	0242      	lsls	r2, r0, #9
 8008054:	d10f      	bne.n	8008076 <__aeabi_fmul+0x15e>
 8008056:	ea93 0f0c 	teq	r3, ip
 800805a:	d103      	bne.n	8008064 <__aeabi_fmul+0x14c>
 800805c:	024b      	lsls	r3, r1, #9
 800805e:	bf18      	it	ne
 8008060:	4608      	movne	r0, r1
 8008062:	d108      	bne.n	8008076 <__aeabi_fmul+0x15e>
 8008064:	ea80 0001 	eor.w	r0, r0, r1
 8008068:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800806c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008070:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008074:	4770      	bx	lr
 8008076:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800807a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800807e:	4770      	bx	lr

08008080 <__aeabi_fdiv>:
 8008080:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008084:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8008088:	bf1e      	ittt	ne
 800808a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800808e:	ea92 0f0c 	teqne	r2, ip
 8008092:	ea93 0f0c 	teqne	r3, ip
 8008096:	d069      	beq.n	800816c <__aeabi_fdiv+0xec>
 8008098:	eba2 0203 	sub.w	r2, r2, r3
 800809c:	ea80 0c01 	eor.w	ip, r0, r1
 80080a0:	0249      	lsls	r1, r1, #9
 80080a2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80080a6:	d037      	beq.n	8008118 <__aeabi_fdiv+0x98>
 80080a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80080ac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80080b0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80080b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80080b8:	428b      	cmp	r3, r1
 80080ba:	bf38      	it	cc
 80080bc:	005b      	lslcc	r3, r3, #1
 80080be:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80080c2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80080c6:	428b      	cmp	r3, r1
 80080c8:	bf24      	itt	cs
 80080ca:	1a5b      	subcs	r3, r3, r1
 80080cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80080d0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80080d4:	bf24      	itt	cs
 80080d6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80080da:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80080de:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80080e2:	bf24      	itt	cs
 80080e4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80080e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80080ec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80080f0:	bf24      	itt	cs
 80080f2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80080f6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80080fa:	011b      	lsls	r3, r3, #4
 80080fc:	bf18      	it	ne
 80080fe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8008102:	d1e0      	bne.n	80080c6 <__aeabi_fdiv+0x46>
 8008104:	2afd      	cmp	r2, #253	; 0xfd
 8008106:	f63f af50 	bhi.w	8007faa <__aeabi_fmul+0x92>
 800810a:	428b      	cmp	r3, r1
 800810c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8008110:	bf08      	it	eq
 8008112:	f020 0001 	biceq.w	r0, r0, #1
 8008116:	4770      	bx	lr
 8008118:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800811c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8008120:	327f      	adds	r2, #127	; 0x7f
 8008122:	bfc2      	ittt	gt
 8008124:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8008128:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800812c:	4770      	bxgt	lr
 800812e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008132:	f04f 0300 	mov.w	r3, #0
 8008136:	3a01      	subs	r2, #1
 8008138:	e737      	b.n	8007faa <__aeabi_fmul+0x92>
 800813a:	f092 0f00 	teq	r2, #0
 800813e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8008142:	bf02      	ittt	eq
 8008144:	0040      	lsleq	r0, r0, #1
 8008146:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800814a:	3a01      	subeq	r2, #1
 800814c:	d0f9      	beq.n	8008142 <__aeabi_fdiv+0xc2>
 800814e:	ea40 000c 	orr.w	r0, r0, ip
 8008152:	f093 0f00 	teq	r3, #0
 8008156:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800815a:	bf02      	ittt	eq
 800815c:	0049      	lsleq	r1, r1, #1
 800815e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8008162:	3b01      	subeq	r3, #1
 8008164:	d0f9      	beq.n	800815a <__aeabi_fdiv+0xda>
 8008166:	ea41 010c 	orr.w	r1, r1, ip
 800816a:	e795      	b.n	8008098 <__aeabi_fdiv+0x18>
 800816c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8008170:	ea92 0f0c 	teq	r2, ip
 8008174:	d108      	bne.n	8008188 <__aeabi_fdiv+0x108>
 8008176:	0242      	lsls	r2, r0, #9
 8008178:	f47f af7d 	bne.w	8008076 <__aeabi_fmul+0x15e>
 800817c:	ea93 0f0c 	teq	r3, ip
 8008180:	f47f af70 	bne.w	8008064 <__aeabi_fmul+0x14c>
 8008184:	4608      	mov	r0, r1
 8008186:	e776      	b.n	8008076 <__aeabi_fmul+0x15e>
 8008188:	ea93 0f0c 	teq	r3, ip
 800818c:	d104      	bne.n	8008198 <__aeabi_fdiv+0x118>
 800818e:	024b      	lsls	r3, r1, #9
 8008190:	f43f af4c 	beq.w	800802c <__aeabi_fmul+0x114>
 8008194:	4608      	mov	r0, r1
 8008196:	e76e      	b.n	8008076 <__aeabi_fmul+0x15e>
 8008198:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800819c:	bf18      	it	ne
 800819e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80081a2:	d1ca      	bne.n	800813a <__aeabi_fdiv+0xba>
 80081a4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80081a8:	f47f af5c 	bne.w	8008064 <__aeabi_fmul+0x14c>
 80081ac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80081b0:	f47f af3c 	bne.w	800802c <__aeabi_fmul+0x114>
 80081b4:	e75f      	b.n	8008076 <__aeabi_fmul+0x15e>
 80081b6:	bf00      	nop

080081b8 <__aeabi_f2uiz>:
 80081b8:	0042      	lsls	r2, r0, #1
 80081ba:	d20e      	bcs.n	80081da <__aeabi_f2uiz+0x22>
 80081bc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80081c0:	d30b      	bcc.n	80081da <__aeabi_f2uiz+0x22>
 80081c2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80081c6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80081ca:	d409      	bmi.n	80081e0 <__aeabi_f2uiz+0x28>
 80081cc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80081d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081d4:	fa23 f002 	lsr.w	r0, r3, r2
 80081d8:	4770      	bx	lr
 80081da:	f04f 0000 	mov.w	r0, #0
 80081de:	4770      	bx	lr
 80081e0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80081e4:	d101      	bne.n	80081ea <__aeabi_f2uiz+0x32>
 80081e6:	0242      	lsls	r2, r0, #9
 80081e8:	d102      	bne.n	80081f0 <__aeabi_f2uiz+0x38>
 80081ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081ee:	4770      	bx	lr
 80081f0:	f04f 0000 	mov.w	r0, #0
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop

080081f8 <Reset_Handler>:
 80081f8:	480c      	ldr	r0, [pc, #48]	; (800822c <Zerobss+0x10>)
 80081fa:	4685      	mov	sp, r0
 80081fc:	2100      	movs	r1, #0
 80081fe:	e003      	b.n	8008208 <DataInit>

08008200 <CopyData>:
 8008200:	4b0b      	ldr	r3, [pc, #44]	; (8008230 <Zerobss+0x14>)
 8008202:	585b      	ldr	r3, [r3, r1]
 8008204:	5043      	str	r3, [r0, r1]
 8008206:	3104      	adds	r1, #4

08008208 <DataInit>:
 8008208:	480a      	ldr	r0, [pc, #40]	; (8008234 <Zerobss+0x18>)
 800820a:	4b0b      	ldr	r3, [pc, #44]	; (8008238 <Zerobss+0x1c>)
 800820c:	1842      	adds	r2, r0, r1
 800820e:	429a      	cmp	r2, r3
 8008210:	d3f6      	bcc.n	8008200 <CopyData>
 8008212:	4a0a      	ldr	r2, [pc, #40]	; (800823c <Zerobss+0x20>)
 8008214:	e002      	b.n	800821c <Zerobss>

08008216 <FillZerobss>:
 8008216:	2300      	movs	r3, #0
 8008218:	f842 3b04 	str.w	r3, [r2], #4

0800821c <Zerobss>:
 800821c:	4b08      	ldr	r3, [pc, #32]	; (8008240 <Zerobss+0x24>)
 800821e:	429a      	cmp	r2, r3
 8008220:	d3f9      	bcc.n	8008216 <FillZerobss>
 8008222:	f00b ffef 	bl	8014204 <SystemInit>
 8008226:	f000 fa07 	bl	8008638 <main>
 800822a:	4770      	bx	lr
 800822c:	20018000 	andcs	r8, r1, r0
 8008230:	08018318 	stmdaeq	r1, {r3, r4, r8, r9, pc}
 8008234:	20000000 	andcs	r0, r0, r0
 8008238:	200000e4 	andcs	r0, r0, r4, ror #1
 800823c:	200000e8 	andcs	r0, r0, r8, ror #1
 8008240:	20013a50 	andcs	r3, r1, r0, asr sl

08008244 <ADC0_1_IRQHandler>:
 8008244:	e7fe      	b.n	8008244 <ADC0_1_IRQHandler>

08008246 <DisplayHandler::~DisplayHandler()>:
 8008246:	4770      	bx	lr

08008248 <DisplayUdfHandler::~DisplayUdfHandler()>:
 8008248:	4770      	bx	lr

0800824a <DisplayUdfHandler::ShowLongName(char const*)>:
 800824a:	4770      	bx	lr

0800824c <DisplayUdfHandler::ShowRdmEnabled(unsigned int, bool)>:
 800824c:	4770      	bx	lr

0800824e <DisplayUdfHandler::ShowFailSafe(unsigned char)>:
 800824e:	4770      	bx	lr

08008250 <ArtNetTriggerHandler::~ArtNetTriggerHandler()>:
 8008250:	4770      	bx	lr

08008252 <PixelDmxStartStop::~PixelDmxStartStop()>:
 8008252:	4770      	bx	lr

08008254 <PixelDmxStartStop::Start()>:
 8008254:	2204      	movs	r2, #4
 8008256:	4b01      	ldr	r3, [pc, #4]	; (800825c <PixelDmxStartStop::Start()+0x8>)
 8008258:	611a      	str	r2, [r3, #16]
 800825a:	4770      	bx	lr
 800825c:	40011000 	andmi	r1, r1, r0

08008260 <PixelDmxStartStop::Stop()>:
 8008260:	2204      	movs	r2, #4
 8008262:	4b01      	ldr	r3, [pc, #4]	; (8008268 <PixelDmxStartStop::Stop()+0x8>)
 8008264:	615a      	str	r2, [r3, #20]
 8008266:	4770      	bx	lr
 8008268:	40011000 	andmi	r1, r1, r0

0800826c <DisplayHandler::~DisplayHandler()>:
 800826c:	b510      	push	{r4, lr}
 800826e:	4604      	mov	r4, r0
 8008270:	f00b fd9e 	bl	8013db0 <operator delete(void*)>
 8008274:	4620      	mov	r0, r4
 8008276:	bd10      	pop	{r4, pc}

08008278 <DisplayUdfHandler::~DisplayUdfHandler()>:
 8008278:	b510      	push	{r4, lr}
 800827a:	4604      	mov	r4, r0
 800827c:	f00b fd98 	bl	8013db0 <operator delete(void*)>
 8008280:	4620      	mov	r0, r4
 8008282:	bd10      	pop	{r4, pc}

08008284 <ArtNetTriggerHandler::~ArtNetTriggerHandler()>:
 8008284:	b510      	push	{r4, lr}
 8008286:	4604      	mov	r4, r0
 8008288:	f00b fd92 	bl	8013db0 <operator delete(void*)>
 800828c:	4620      	mov	r0, r4
 800828e:	bd10      	pop	{r4, pc}

08008290 <PixelDmxStartStop::~PixelDmxStartStop()>:
 8008290:	b510      	push	{r4, lr}
 8008292:	4604      	mov	r4, r0
 8008294:	f00b fd8c 	bl	8013db0 <operator delete(void*)>
 8008298:	4620      	mov	r0, r4
 800829a:	bd10      	pop	{r4, pc}

0800829c <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)>:
 800829c:	4b02      	ldr	r3, [pc, #8]	; (80082a8 <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)+0xc>)
 800829e:	6819      	ldr	r1, [r3, #0]
 80082a0:	4b02      	ldr	r3, [pc, #8]	; (80082ac <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)+0x10>)
 80082a2:	6818      	ldr	r0, [r3, #0]
 80082a4:	f00a bd90 	b.w	8012dc8 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 80082a8:	2000192c 	andcs	r1, r0, ip, lsr #18
 80082ac:	20009cc8 	andcs	r9, r0, r8, asr #25

080082b0 <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)>:
 80082b0:	4b02      	ldr	r3, [pc, #8]	; (80082bc <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)+0xc>)
 80082b2:	6819      	ldr	r1, [r3, #0]
 80082b4:	4b02      	ldr	r3, [pc, #8]	; (80082c0 <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)+0x10>)
 80082b6:	6818      	ldr	r0, [r3, #0]
 80082b8:	f00a bd86 	b.w	8012dc8 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 80082bc:	2000192c 	andcs	r1, r0, ip, lsr #18
 80082c0:	20009cc8 	andcs	r9, r0, r8, asr #25

080082c4 <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)>:
 80082c4:	4b02      	ldr	r3, [pc, #8]	; (80082d0 <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)+0xc>)
 80082c6:	6819      	ldr	r1, [r3, #0]
 80082c8:	4b02      	ldr	r3, [pc, #8]	; (80082d4 <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)+0x10>)
 80082ca:	6818      	ldr	r0, [r3, #0]
 80082cc:	f00a bd7c 	b.w	8012dc8 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 80082d0:	2000192c 	andcs	r1, r0, ip, lsr #18
 80082d4:	20009cc8 	andcs	r9, r0, r8, asr #25

080082d8 <DisplayUdfHandler::ShowNetSwitch(unsigned char)>:
 80082d8:	4b02      	ldr	r3, [pc, #8]	; (80082e4 <DisplayUdfHandler::ShowNetSwitch(unsigned char)+0xc>)
 80082da:	6819      	ldr	r1, [r3, #0]
 80082dc:	4b02      	ldr	r3, [pc, #8]	; (80082e8 <DisplayUdfHandler::ShowNetSwitch(unsigned char)+0x10>)
 80082de:	6818      	ldr	r0, [r3, #0]
 80082e0:	f00a bd72 	b.w	8012dc8 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 80082e4:	2000192c 	andcs	r1, r0, ip, lsr #18
 80082e8:	20009cc8 	andcs	r9, r0, r8, asr #25

080082ec <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)>:
 80082ec:	4b02      	ldr	r3, [pc, #8]	; (80082f8 <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)+0xc>)
 80082ee:	6819      	ldr	r1, [r3, #0]
 80082f0:	4b02      	ldr	r3, [pc, #8]	; (80082fc <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)+0x10>)
 80082f2:	6818      	ldr	r0, [r3, #0]
 80082f4:	f00a bd68 	b.w	8012dc8 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 80082f8:	2000192c 	andcs	r1, r0, ip, lsr #18
 80082fc:	20009cc8 	andcs	r9, r0, r8, asr #25

08008300 <DisplayUdfHandler::ShowShortName(char const*)>:
 8008300:	4b02      	ldr	r3, [pc, #8]	; (800830c <DisplayUdfHandler::ShowShortName(char const*)+0xc>)
 8008302:	6819      	ldr	r1, [r3, #0]
 8008304:	4b02      	ldr	r3, [pc, #8]	; (8008310 <DisplayUdfHandler::ShowShortName(char const*)+0x10>)
 8008306:	6818      	ldr	r0, [r3, #0]
 8008308:	f00a bd3b 	b.w	8012d82 <DisplayUdf::ShowNodeName(ArtNetNode*)>
 800830c:	2000192c 	andcs	r1, r0, ip, lsr #18
 8008310:	20009cc8 	andcs	r9, r0, r8, asr #25

08008314 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>:
 8008314:	b110      	cbz	r0, 800831c <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]+0x8>
 8008316:	6803      	ldr	r3, [r0, #0]
 8008318:	6a1b      	ldr	r3, [r3, #32]
 800831a:	4718      	bx	r3
 800831c:	4770      	bx	lr

0800831e <Display::PutChar(int) [clone .isra.0]>:
 800831e:	b110      	cbz	r0, 8008326 <Display::PutChar(int) [clone .isra.0]+0x8>
 8008320:	6803      	ldr	r3, [r0, #0]
 8008322:	695b      	ldr	r3, [r3, #20]
 8008324:	4718      	bx	r3
 8008326:	4770      	bx	lr

08008328 <DisplayHandler::Print(unsigned int)>:
 8008328:	b538      	push	{r3, r4, r5, lr}
 800832a:	7903      	ldrb	r3, [r0, #4]
 800832c:	b1f3      	cbz	r3, 800836c <DisplayHandler::Print(unsigned int)+0x44>
 800832e:	2904      	cmp	r1, #4
 8008330:	bf98      	it	ls
 8008332:	4b0f      	ldrls	r3, [pc, #60]	; (8008370 <DisplayHandler::Print(unsigned int)+0x48>)
 8008334:	4d0f      	ldr	r5, [pc, #60]	; (8008374 <DisplayHandler::Print(unsigned int)+0x4c>)
 8008336:	bf98      	it	ls
 8008338:	5c5c      	ldrbls	r4, [r3, r1]
 800833a:	682b      	ldr	r3, [r5, #0]
 800833c:	bf88      	it	hi
 800833e:	2455      	movhi	r4, #85	; 0x55
 8008340:	6998      	ldr	r0, [r3, #24]
 8008342:	b178      	cbz	r0, 8008364 <DisplayHandler::Print(unsigned int)+0x3c>
 8008344:	7901      	ldrb	r1, [r0, #4]
 8008346:	3901      	subs	r1, #1
 8008348:	b2c9      	uxtb	r1, r1
 800834a:	b168      	cbz	r0, 8008368 <DisplayHandler::Print(unsigned int)+0x40>
 800834c:	7942      	ldrb	r2, [r0, #5]
 800834e:	3a01      	subs	r2, #1
 8008350:	b2d2      	uxtb	r2, r2
 8008352:	f7ff ffdf 	bl	8008314 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 8008356:	682b      	ldr	r3, [r5, #0]
 8008358:	4621      	mov	r1, r4
 800835a:	6998      	ldr	r0, [r3, #24]
 800835c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008360:	f7ff bfdd 	b.w	800831e <Display::PutChar(int) [clone .isra.0]>
 8008364:	4601      	mov	r1, r0
 8008366:	e7ee      	b.n	8008346 <DisplayHandler::Print(unsigned int)+0x1e>
 8008368:	4602      	mov	r2, r0
 800836a:	e7f0      	b.n	800834e <DisplayHandler::Print(unsigned int)+0x26>
 800836c:	bd38      	pop	{r3, r4, r5, pc}
 800836e:	bf00      	nop
 8008370:	08016190 	stmdaeq	r1, {r4, r7, r8, sp, lr}
 8008374:	20009cd0 	ldrdcs	r9, [r0], -r0

08008378 <Display::ClearLine(unsigned char)>:
 8008378:	6980      	ldr	r0, [r0, #24]
 800837a:	b110      	cbz	r0, 8008382 <Display::ClearLine(unsigned char)+0xa>
 800837c:	6803      	ldr	r3, [r0, #0]
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	4718      	bx	r3
 8008382:	4770      	bx	lr

08008384 <Display::Printf(unsigned char, char const*, ...)>:
 8008384:	b40c      	push	{r2, r3}
 8008386:	b570      	push	{r4, r5, r6, lr}
 8008388:	6984      	ldr	r4, [r0, #24]
 800838a:	4605      	mov	r5, r0
 800838c:	460e      	mov	r6, r1
 800838e:	b08a      	sub	sp, #40	; 0x28
 8008390:	b174      	cbz	r4, 80083b0 <Display::Printf(unsigned char, char const*, ...)+0x2c>
 8008392:	ab0f      	add	r3, sp, #60	; 0x3c
 8008394:	2120      	movs	r1, #32
 8008396:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008398:	a802      	add	r0, sp, #8
 800839a:	9301      	str	r3, [sp, #4]
 800839c:	f000 fe86 	bl	80090ac <vsnprintf>
 80083a0:	4604      	mov	r4, r0
 80083a2:	69a8      	ldr	r0, [r5, #24]
 80083a4:	4631      	mov	r1, r6
 80083a6:	6803      	ldr	r3, [r0, #0]
 80083a8:	aa02      	add	r2, sp, #8
 80083aa:	69dd      	ldr	r5, [r3, #28]
 80083ac:	b2a3      	uxth	r3, r4
 80083ae:	47a8      	blx	r5
 80083b0:	4620      	mov	r0, r4
 80083b2:	b00a      	add	sp, #40	; 0x28
 80083b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80083b8:	b002      	add	sp, #8
 80083ba:	4770      	bx	lr

080083bc <Display::TextStatus(char const*)>:
 80083bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083c0:	4604      	mov	r4, r0
 80083c2:	6980      	ldr	r0, [r0, #24]
 80083c4:	460d      	mov	r5, r1
 80083c6:	b360      	cbz	r0, 8008422 <Display::TextStatus(char const*)+0x66>
 80083c8:	7947      	ldrb	r7, [r0, #5]
 80083ca:	2100      	movs	r1, #0
 80083cc:	1e7e      	subs	r6, r7, #1
 80083ce:	b2f6      	uxtb	r6, r6
 80083d0:	4632      	mov	r2, r6
 80083d2:	f890 9004 	ldrb.w	r9, [r0, #4]
 80083d6:	f04f 0800 	mov.w	r8, #0
 80083da:	f7ff ff9b 	bl	8008314 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 80083de:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80083e2:	45c1      	cmp	r9, r8
 80083e4:	69a0      	ldr	r0, [r4, #24]
 80083e6:	d816      	bhi.n	8008416 <Display::TextStatus(char const*)+0x5a>
 80083e8:	4632      	mov	r2, r6
 80083ea:	2100      	movs	r1, #0
 80083ec:	f7ff ff92 	bl	8008314 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 80083f0:	69a0      	ldr	r0, [r4, #24]
 80083f2:	b1b0      	cbz	r0, 8008422 <Display::TextStatus(char const*)+0x66>
 80083f4:	2300      	movs	r3, #0
 80083f6:	7901      	ldrb	r1, [r0, #4]
 80083f8:	5cea      	ldrb	r2, [r5, r3]
 80083fa:	b11a      	cbz	r2, 8008404 <Display::TextStatus(char const*)+0x48>
 80083fc:	1c5a      	adds	r2, r3, #1
 80083fe:	4299      	cmp	r1, r3
 8008400:	4613      	mov	r3, r2
 8008402:	dcf9      	bgt.n	80083f8 <Display::TextStatus(char const*)+0x3c>
 8008404:	6802      	ldr	r2, [r0, #0]
 8008406:	4639      	mov	r1, r7
 8008408:	69d4      	ldr	r4, [r2, #28]
 800840a:	b2db      	uxtb	r3, r3
 800840c:	462a      	mov	r2, r5
 800840e:	46a4      	mov	ip, r4
 8008410:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008414:	4760      	bx	ip
 8008416:	2120      	movs	r1, #32
 8008418:	f7ff ff81 	bl	800831e <Display::PutChar(int) [clone .isra.0]>
 800841c:	f108 0801 	add.w	r8, r8, #1
 8008420:	e7df      	b.n	80083e2 <Display::TextStatus(char const*)+0x26>
 8008422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008426 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>:
 8008426:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008428:	4605      	mov	r5, r0
 800842a:	461e      	mov	r6, r3
 800842c:	460f      	mov	r7, r1
 800842e:	4614      	mov	r4, r2
 8008430:	f7ff ffc4 	bl	80083bc <Display::TextStatus(char const*)>
 8008434:	7c6b      	ldrb	r3, [r5, #17]
 8008436:	b19b      	cbz	r3, 8008460 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x3a>
 8008438:	43e2      	mvns	r2, r4
 800843a:	2312      	movs	r3, #18
 800843c:	7a28      	ldrb	r0, [r5, #8]
 800843e:	f88d 3004 	strb.w	r3, [sp, #4]
 8008442:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8008446:	f88d 3005 	strb.w	r3, [sp, #5]
 800844a:	f88d 2006 	strb.w	r2, [sp, #6]
 800844e:	f00c fc0d 	bl	8014c6c <gd32_i2c_set_address>
 8008452:	68e8      	ldr	r0, [r5, #12]
 8008454:	f00c fc02 	bl	8014c5c <gd32_i2c_set_baudrate>
 8008458:	2103      	movs	r1, #3
 800845a:	a801      	add	r0, sp, #4
 800845c:	f00c fc0c 	bl	8014c78 <gd32_i2c_write>
 8008460:	1c73      	adds	r3, r6, #1
 8008462:	d006      	beq.n	8008472 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x4c>
 8008464:	4639      	mov	r1, r7
 8008466:	4630      	mov	r0, r6
 8008468:	b003      	add	sp, #12
 800846a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800846e:	f00b bb41 	b.w	8013af4 <console_status>
 8008472:	b003      	add	sp, #12
 8008474:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008478 <Display::SetSleep(bool)>:
 8008478:	b538      	push	{r3, r4, r5, lr}
 800847a:	4604      	mov	r4, r0
 800847c:	6980      	ldr	r0, [r0, #24]
 800847e:	460d      	mov	r5, r1
 8008480:	b138      	cbz	r0, 8008492 <Display::SetSleep(bool)+0x1a>
 8008482:	6803      	ldr	r3, [r0, #0]
 8008484:	7421      	strb	r1, [r4, #16]
 8008486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008488:	4798      	blx	r3
 800848a:	b915      	cbnz	r5, 8008492 <Display::SetSleep(bool)+0x1a>
 800848c:	4b01      	ldr	r3, [pc, #4]	; (8008494 <Display::SetSleep(bool)+0x1c>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	6063      	str	r3, [r4, #4]
 8008492:	bd38      	pop	{r3, r4, r5, pc}
 8008494:	20009dd4 	ldrdcs	r9, [r0], -r4

08008498 <display::timeout::gpio_init()>:
 8008498:	b510      	push	{r4, lr}
 800849a:	f240 6003 	movw	r0, #1539	; 0x603
 800849e:	f00c f879 	bl	8014594 <rcu_periph_clock_enable>
 80084a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80084aa:	2203      	movs	r2, #3
 80084ac:	2148      	movs	r1, #72	; 0x48
 80084ae:	4801      	ldr	r0, [pc, #4]	; (80084b4 <display::timeout::gpio_init()+0x1c>)
 80084b0:	f00b bfd8 	b.w	8014464 <gpio_init>
 80084b4:	40010c00 	andmi	r0, r1, r0, lsl #24

080084b8 <display::timeout::gpio_renew()>:
 80084b8:	4b03      	ldr	r3, [pc, #12]	; (80084c8 <display::timeout::gpio_renew()+0x10>)
 80084ba:	f8d3 0c08 	ldr.w	r0, [r3, #3080]	; 0xc08
 80084be:	f480 4080 	eor.w	r0, r0, #16384	; 0x4000
 80084c2:	f3c0 3080 	ubfx	r0, r0, #14, #1
 80084c6:	4770      	bx	lr
 80084c8:	40010000 	andmi	r0, r1, r0

080084cc <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>:
 80084cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084ce:	2905      	cmp	r1, #5
 80084d0:	b085      	sub	sp, #20
 80084d2:	dc51      	bgt.n	8008578 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xac>
 80084d4:	4b2a      	ldr	r3, [pc, #168]	; (8008580 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xb4>)
 80084d6:	6019      	str	r1, [r3, #0]
 80084d8:	2905      	cmp	r1, #5
 80084da:	d809      	bhi.n	80084f0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 80084dc:	e8df f001 	tbb	[pc, r1]
 80084e0:	130a032c 	movwne	r0, #41772	; 0xa32c
 80084e4:	2300211a 	movwcs	r2, #282	; 0x11a
 80084e8:	2264      	movs	r2, #100	; 0x64
 80084ea:	4619      	mov	r1, r3
 80084ec:	f006 fb74 	bl	800ebd8 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 80084f0:	2001      	movs	r0, #1
 80084f2:	e042      	b.n	800857a <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xae>
 80084f4:	2200      	movs	r2, #0
 80084f6:	2364      	movs	r3, #100	; 0x64
 80084f8:	4611      	mov	r1, r2
 80084fa:	e9cd 3200 	strd	r3, r2, [sp]
 80084fe:	4b21      	ldr	r3, [pc, #132]	; (8008584 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xb8>)
 8008500:	f006 fb7e 	bl	800ec00 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8008504:	e7f4      	b.n	80084f0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8008506:	2100      	movs	r1, #0
 8008508:	2364      	movs	r3, #100	; 0x64
 800850a:	4a1e      	ldr	r2, [pc, #120]	; (8008584 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xb8>)
 800850c:	9100      	str	r1, [sp, #0]
 800850e:	f006 fb93 	bl	800ec38 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8008512:	e7ed      	b.n	80084f0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8008514:	2364      	movs	r3, #100	; 0x64
 8008516:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800851a:	2100      	movs	r1, #0
 800851c:	f006 fba6 	bl	800ec6c <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 8008520:	e7e6      	b.n	80084f0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8008522:	2200      	movs	r2, #0
 8008524:	2364      	movs	r3, #100	; 0x64
 8008526:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800852a:	230a      	movs	r3, #10
 800852c:	4611      	mov	r1, r2
 800852e:	9300      	str	r3, [sp, #0]
 8008530:	4b14      	ldr	r3, [pc, #80]	; (8008584 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xb8>)
 8008532:	f006 fbcd 	bl	800ecd0 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8008536:	e7db      	b.n	80084f0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8008538:	2400      	movs	r4, #0
 800853a:	4625      	mov	r5, r4
 800853c:	4b12      	ldr	r3, [pc, #72]	; (8008588 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xbc>)
 800853e:	4f13      	ldr	r7, [pc, #76]	; (800858c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc0>)
 8008540:	4e13      	ldr	r6, [pc, #76]	; (8008590 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc4>)
 8008542:	61dc      	str	r4, [r3, #28]
 8008544:	6833      	ldr	r3, [r6, #0]
 8008546:	6838      	ldr	r0, [r7, #0]
 8008548:	429c      	cmp	r4, r3
 800854a:	d302      	bcc.n	8008552 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x86>
 800854c:	f007 fb1c 	bl	800fb88 <WS28xx::Update()>
 8008550:	e7ce      	b.n	80084f0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8008552:	6803      	ldr	r3, [r0, #0]
 8008554:	2b07      	cmp	r3, #7
 8008556:	d007      	beq.n	8008568 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x9c>
 8008558:	2300      	movs	r3, #0
 800855a:	4621      	mov	r1, r4
 800855c:	461a      	mov	r2, r3
 800855e:	9500      	str	r5, [sp, #0]
 8008560:	f006 fd70 	bl	800f044 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8008564:	3401      	adds	r4, #1
 8008566:	e7ed      	b.n	8008544 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x78>
 8008568:	2300      	movs	r3, #0
 800856a:	4621      	mov	r1, r4
 800856c:	461a      	mov	r2, r3
 800856e:	e9cd 5500 	strd	r5, r5, [sp]
 8008572:	f007 f999 	bl	800f8a8 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 8008576:	e7f5      	b.n	8008564 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x98>
 8008578:	2000      	movs	r0, #0
 800857a:	b005      	add	sp, #20
 800857c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800857e:	bf00      	nop
 8008580:	20001984 	andcs	r1, r0, r4, lsl #19
 8008584:	00646464 	rsbeq	r6, r4, r4, ror #8
 8008588:	20001950 	andcs	r1, r0, r0, asr r9
 800858c:	2000197c 	andcs	r1, r0, ip, ror r9
 8008590:	20001978 	andcs	r1, r0, r8, ror r9

08008594 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)>:
 8008594:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008596:	780b      	ldrb	r3, [r1, #0]
 8008598:	4605      	mov	r5, r0
 800859a:	2b03      	cmp	r3, #3
 800859c:	d11f      	bne.n	80085de <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4a>
 800859e:	4b18      	ldr	r3, [pc, #96]	; (8008600 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x6c>)
 80085a0:	784c      	ldrb	r4, [r1, #1]
 80085a2:	6818      	ldr	r0, [r3, #0]
 80085a4:	4b17      	ldr	r3, [pc, #92]	; (8008604 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x70>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	429c      	cmp	r4, r3
 80085aa:	d018      	beq.n	80085de <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4a>
 80085ac:	4621      	mov	r1, r4
 80085ae:	f7ff ff8d 	bl	80084cc <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 80085b2:	b1a0      	cbz	r0, 80085de <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4a>
 80085b4:	4e14      	ldr	r6, [pc, #80]	; (8008608 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x74>)
 80085b6:	b1a4      	cbz	r4, 80085e2 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4e>
 80085b8:	2200      	movs	r2, #0
 80085ba:	6833      	ldr	r3, [r6, #0]
 80085bc:	4d13      	ldr	r5, [pc, #76]	; (800860c <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x78>)
 80085be:	605a      	str	r2, [r3, #4]
 80085c0:	2106      	movs	r1, #6
 80085c2:	6828      	ldr	r0, [r5, #0]
 80085c4:	f7ff fed8 	bl	8008378 <Display::ClearLine(unsigned char)>
 80085c8:	4620      	mov	r0, r4
 80085ca:	682d      	ldr	r5, [r5, #0]
 80085cc:	f006 faf8 	bl	800ebc0 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 80085d0:	2106      	movs	r1, #6
 80085d2:	4603      	mov	r3, r0
 80085d4:	4a0e      	ldr	r2, [pc, #56]	; (8008610 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x7c>)
 80085d6:	4628      	mov	r0, r5
 80085d8:	9400      	str	r4, [sp, #0]
 80085da:	f7ff fed3 	bl	8008384 <Display::Printf(unsigned char, char const*, ...)>
 80085de:	b002      	add	sp, #8
 80085e0:	bd70      	pop	{r4, r5, r6, pc}
 80085e2:	6868      	ldr	r0, [r5, #4]
 80085e4:	2101      	movs	r1, #1
 80085e6:	6803      	ldr	r3, [r0, #0]
 80085e8:	695b      	ldr	r3, [r3, #20]
 80085ea:	4798      	blx	r3
 80085ec:	6833      	ldr	r3, [r6, #0]
 80085ee:	686a      	ldr	r2, [r5, #4]
 80085f0:	605a      	str	r2, [r3, #4]
 80085f2:	4b08      	ldr	r3, [pc, #32]	; (8008614 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x80>)
 80085f4:	6818      	ldr	r0, [r3, #0]
 80085f6:	b002      	add	sp, #8
 80085f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80085fc:	f00a b976 	b.w	80128ec <DisplayUdf::Show()>
 8008600:	20001980 	andcs	r1, r0, r0, lsl #19
 8008604:	20001984 	andcs	r1, r0, r4, lsl #19
 8008608:	2000192c 	andcs	r1, r0, ip, lsr #18
 800860c:	20009cd0 	ldrdcs	r9, [r0], -r0
 8008610:	080160a1 	stmdaeq	r1, {r0, r5, r7, sp, lr}
 8008614:	20009cc8 	andcs	r9, r0, r8, asr #25

08008618 <Hardware::RebootHandler()>:
 8008618:	b508      	push	{r3, lr}
 800861a:	4b05      	ldr	r3, [pc, #20]	; (8008630 <Hardware::RebootHandler()+0x18>)
 800861c:	6818      	ldr	r0, [r3, #0]
 800861e:	f007 facf 	bl	800fbc0 <WS28xx::Blackout()>
 8008622:	4b04      	ldr	r3, [pc, #16]	; (8008634 <Hardware::RebootHandler()+0x1c>)
 8008624:	6818      	ldr	r0, [r3, #0]
 8008626:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800862a:	f001 be9f 	b.w	800a36c <ArtNetNode::Stop()>
 800862e:	bf00      	nop
 8008630:	2000198c 	andcs	r1, r0, ip, lsl #19
 8008634:	2000192c 	andcs	r1, r0, ip, lsr #18

08008638 <main>:
 8008638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800863c:	f5ad 5d9b 	sub.w	sp, sp, #4960	; 0x1360
 8008640:	b082      	sub	sp, #8
 8008642:	a807      	add	r0, sp, #28
 8008644:	f00b fb0a 	bl	8013c5c <Hardware::Hardware()>
 8008648:	a89d      	add	r0, sp, #628	; 0x274
 800864a:	f008 ffeb 	bl	8011624 <Network::Network()>
 800864e:	a818      	add	r0, sp, #96	; 0x60
 8008650:	f00b faae 	bl	8013bb0 <LedBlink::LedBlink()>
 8008654:	a84d      	add	r0, sp, #308	; 0x134
 8008656:	f00a f871 	bl	801273c <DisplayUdf::DisplayUdf()>
 800865a:	4ab4      	ldr	r2, [pc, #720]	; (800892c <main+0x2f4>)
 800865c:	4bb4      	ldr	r3, [pc, #720]	; (8008930 <main+0x2f8>)
 800865e:	49b5      	ldr	r1, [pc, #724]	; (8008934 <main+0x2fc>)
 8008660:	a808      	add	r0, sp, #32
 8008662:	f00b fa5f 	bl	8013b24 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
 8008666:	a809      	add	r0, sp, #36	; 0x24
 8008668:	f008 f848 	bl	80106fc <FlashRom::FlashRom()>
 800866c:	a80a      	add	r0, sp, #40	; 0x28
 800866e:	f007 fbe1 	bl	800fe34 <SpiFlashStore::SpiFlashStore()>
 8008672:	49b1      	ldr	r1, [pc, #708]	; (8008938 <main+0x300>)
 8008674:	a808      	add	r0, sp, #32
 8008676:	f00b fa8d 	bl	8013b94 <FirmwareVersion::Print(char const*)>
 800867a:	2301      	movs	r3, #1
 800867c:	4daf      	ldr	r5, [pc, #700]	; (800893c <main+0x304>)
 800867e:	2008      	movs	r0, #8
 8008680:	612b      	str	r3, [r5, #16]
 8008682:	f00b fb99 	bl	8013db8 <operator new(unsigned int)>
 8008686:	4bae      	ldr	r3, [pc, #696]	; (8008940 <main+0x308>)
 8008688:	2400      	movs	r4, #0
 800868a:	6003      	str	r3, [r0, #0]
 800868c:	4bad      	ldr	r3, [pc, #692]	; (8008944 <main+0x30c>)
 800868e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	49ac      	ldr	r1, [pc, #688]	; (8008948 <main+0x310>)
 8008696:	3b00      	subs	r3, #0
 8008698:	bf18      	it	ne
 800869a:	2301      	movne	r3, #1
 800869c:	7103      	strb	r3, [r0, #4]
 800869e:	901a      	str	r0, [sp, #104]	; 0x68
 80086a0:	ab18      	add	r3, sp, #96	; 0x60
 80086a2:	a84d      	add	r0, sp, #308	; 0x134
 80086a4:	2303      	movs	r3, #3
 80086a6:	f7ff febe 	bl	8008426 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 80086aa:	a810      	add	r0, sp, #64	; 0x40
 80086ac:	f007 fda0 	bl	80101f0 <StoreNetwork::StoreNetwork()>
 80086b0:	ab11      	add	r3, sp, #68	; 0x44
 80086b2:	a910      	add	r1, sp, #64	; 0x40
 80086b4:	a89d      	add	r0, sp, #628	; 0x274
 80086b6:	93cb      	str	r3, [sp, #812]	; 0x32c
 80086b8:	f009 f80e 	bl	80116d8 <Network::Init(NetworkParamsStore*)>
 80086bc:	a89d      	add	r0, sp, #628	; 0x274
 80086be:	f009 f9fb 	bl	8011ab8 <Network::Print()>
 80086c2:	2303      	movs	r3, #3
 80086c4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80086c8:	49a0      	ldr	r1, [pc, #640]	; (800894c <main+0x314>)
 80086ca:	a84d      	add	r0, sp, #308	; 0x134
 80086cc:	f7ff feab 	bl	8008426 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 80086d0:	a80b      	add	r0, sp, #44	; 0x2c
 80086d2:	f008 fbe9 	bl	8010ea8 <MDNS::MDNS()>
 80086d6:	a80b      	add	r0, sp, #44	; 0x2c
 80086d8:	f008 fca6 	bl	8011028 <MDNS::Start()>
 80086dc:	f642 1305 	movw	r3, #10501	; 0x2905
 80086e0:	4621      	mov	r1, r4
 80086e2:	4a9b      	ldr	r2, [pc, #620]	; (8008950 <main+0x318>)
 80086e4:	e9cd 4400 	strd	r4, r4, [sp]
 80086e8:	a80b      	add	r0, sp, #44	; 0x2c
 80086ea:	f008 fe07 	bl	80112fc <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 80086ee:	a80b      	add	r0, sp, #44	; 0x2c
 80086f0:	f008 ff4a 	bl	8011588 <MDNS::Print()>
 80086f4:	2303      	movs	r3, #3
 80086f6:	f44f 42cc 	mov.w	r2, #26112	; 0x6600
 80086fa:	4996      	ldr	r1, [pc, #600]	; (8008954 <main+0x31c>)
 80086fc:	a84d      	add	r0, sp, #308	; 0x134
 80086fe:	f7ff fe92 	bl	8008426 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008702:	4621      	mov	r1, r4
 8008704:	a812      	add	r0, sp, #72	; 0x48
 8008706:	f007 ff09 	bl	801051c <StoreArtNet::StoreArtNet(unsigned int)>
 800870a:	a912      	add	r1, sp, #72	; 0x48
 800870c:	a87a      	add	r0, sp, #488	; 0x1e8
 800870e:	f003 fb43 	bl	800bd98 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 8008712:	a8d0      	add	r0, sp, #832	; 0x340
 8008714:	f001 fd74 	bl	800a200 <ArtNet4Node::ArtNet4Node()>
 8008718:	a87a      	add	r0, sp, #488	; 0x1e8
 800871a:	f003 fb5d 	bl	800bdd8 <ArtNetParams::Load()>
 800871e:	b130      	cbz	r0, 800872e <main+0xf6>
 8008720:	a87a      	add	r0, sp, #488	; 0x1e8
 8008722:	4621      	mov	r1, r4
 8008724:	f003 fef8 	bl	800c518 <ArtNetParams::Set(unsigned int)>
 8008728:	a87a      	add	r0, sp, #488	; 0x1e8
 800872a:	f003 ff87 	bl	800c63c <ArtNetParams::Dump()>
 800872e:	ab13      	add	r3, sp, #76	; 0x4c
 8008730:	4a89      	ldr	r2, [pc, #548]	; (8008958 <main+0x320>)
 8008732:	93d8      	str	r3, [sp, #864]	; 0x360
 8008734:	21aa      	movs	r1, #170	; 0xaa
 8008736:	920d      	str	r2, [sp, #52]	; 0x34
 8008738:	2203      	movs	r2, #3
 800873a:	ab0d      	add	r3, sp, #52	; 0x34
 800873c:	ab0d      	add	r3, sp, #52	; 0x34
 800873e:	93d9      	str	r3, [sp, #868]	; 0x364
 8008740:	ab41      	add	r3, sp, #260	; 0x104
 8008742:	e9c3 2100 	strd	r2, r1, [r3]
 8008746:	2006      	movs	r0, #6
 8008748:	2200      	movs	r2, #0
 800874a:	e9c3 0202 	strd	r0, r2, [r3, #8]
 800874e:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8008752:	611a      	str	r2, [r3, #16]
 8008754:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008758:	829a      	strh	r2, [r3, #20]
 800875a:	4a80      	ldr	r2, [pc, #512]	; (800895c <main+0x324>)
 800875c:	6259      	str	r1, [r3, #36]	; 0x24
 800875e:	619a      	str	r2, [r3, #24]
 8008760:	2201      	movs	r2, #1
 8008762:	a814      	add	r0, sp, #80	; 0x50
 8008764:	e9c3 2207 	strd	r2, r2, [r3, #28]
 8008768:	859a      	strh	r2, [r3, #44]	; 0x2c
 800876a:	f007 ffbb 	bl	80106e4 <StorePixelDmx::StorePixelDmx()>
 800876e:	a914      	add	r1, sp, #80	; 0x50
 8008770:	a81e      	add	r0, sp, #120	; 0x78
 8008772:	f005 fc99 	bl	800e0a8 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>
 8008776:	a81e      	add	r0, sp, #120	; 0x78
 8008778:	f005 fcac 	bl	800e0d4 <PixelDmxParams::Load()>
 800877c:	b130      	cbz	r0, 800878c <main+0x154>
 800877e:	a81e      	add	r0, sp, #120	; 0x78
 8008780:	a941      	add	r1, sp, #260	; 0x104
 8008782:	f005 ff9a 	bl	800e6ba <PixelDmxParams::Set(PixelDmxConfiguration*)>
 8008786:	a81e      	add	r0, sp, #120	; 0x78
 8008788:	f005 ffd4 	bl	800e734 <PixelDmxParams::Dump()>
 800878c:	ae63      	add	r6, sp, #396	; 0x18c
 800878e:	a941      	add	r1, sp, #260	; 0x104
 8008790:	4630      	mov	r0, r6
 8008792:	f005 fb95 	bl	800dec0 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>
 8008796:	2004      	movs	r0, #4
 8008798:	f00b fb0e 	bl	8013db8 <operator new(unsigned int)>
 800879c:	4b70      	ldr	r3, [pc, #448]	; (8008960 <main+0x328>)
 800879e:	4604      	mov	r4, r0
 80087a0:	6003      	str	r3, [r0, #0]
 80087a2:	2203      	movs	r2, #3
 80087a4:	2304      	movs	r3, #4
 80087a6:	2110      	movs	r1, #16
 80087a8:	4864      	ldr	r0, [pc, #400]	; (800893c <main+0x304>)
 80087aa:	f00b fe5b 	bl	8014464 <gpio_init>
 80087ae:	2304      	movs	r3, #4
 80087b0:	616b      	str	r3, [r5, #20]
 80087b2:	6574      	str	r4, [r6, #84]	; 0x54
 80087b4:	2400      	movs	r4, #0
 80087b6:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 80087b8:	f8d6 802c 	ldr.w	r8, [r6, #44]	; 0x2c
 80087bc:	f8bd 9092 	ldrh.w	r9, [sp, #146]	; 0x92
 80087c0:	ab1e      	add	r3, sp, #120	; 0x78
 80087c2:	f407 5780 	and.w	r7, r7, #4096	; 0x1000
 80087c6:	f50d 7a51 	add.w	sl, sp, #836	; 0x344
 80087ca:	4544      	cmp	r4, r8
 80087cc:	f040 811e 	bne.w	8008a0c <main+0x3d4>
 80087d0:	f89d 408c 	ldrb.w	r4, [sp, #140]	; 0x8c
 80087d4:	2101      	movs	r1, #1
 80087d6:	4f63      	ldr	r7, [pc, #396]	; (8008964 <main+0x32c>)
 80087d8:	a80c      	add	r0, sp, #48	; 0x30
 80087da:	ab1e      	add	r3, sp, #120	; 0x78
 80087dc:	f006 f9d0 	bl	800eb80 <PixelPatterns::PixelPatterns(unsigned int)>
 80087e0:	4621      	mov	r1, r4
 80087e2:	a80c      	add	r0, sp, #48	; 0x30
 80087e4:	603c      	str	r4, [r7, #0]
 80087e6:	f7ff fe71 	bl	80084cc <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	4a5e      	ldr	r2, [pc, #376]	; (8008968 <main+0x330>)
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	bf0c      	ite	eq
 80087f2:	4633      	moveq	r3, r6
 80087f4:	2300      	movne	r3, #0
 80087f6:	93d2      	str	r3, [sp, #840]	; 0x348
 80087f8:	ab16      	add	r3, sp, #88	; 0x58
 80087fa:	e9c3 2600 	strd	r2, r6, [r3]
 80087fe:	4b5b      	ldr	r3, [pc, #364]	; (800896c <main+0x334>)
 8008800:	a8d0      	add	r0, sp, #832	; 0x340
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	ab16      	add	r3, sp, #88	; 0x58
 8008806:	6153      	str	r3, [r2, #20]
 8008808:	f001 fd48 	bl	800a29c <ArtNet4Node::Print()>
 800880c:	a864      	add	r0, sp, #400	; 0x190
 800880e:	f005 fa29 	bl	800dc64 <PixelDmxConfiguration::Print()>
 8008812:	4957      	ldr	r1, [pc, #348]	; (8008970 <main+0x338>)
 8008814:	a84d      	add	r0, sp, #308	; 0x134
 8008816:	f009 ffa7 	bl	8012768 <DisplayUdf::SetTitle(char const*, ...)>
 800881a:	2202      	movs	r2, #2
 800881c:	a84d      	add	r0, sp, #308	; 0x134
 800881e:	4611      	mov	r1, r2
 8008820:	f009 ffb5 	bl	801278e <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008824:	2206      	movs	r2, #6
 8008826:	2103      	movs	r1, #3
 8008828:	a84d      	add	r0, sp, #308	; 0x134
 800882a:	f009 ffb0 	bl	801278e <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 800882e:	2203      	movs	r2, #3
 8008830:	2104      	movs	r1, #4
 8008832:	a84d      	add	r0, sp, #308	; 0x134
 8008834:	f009 ffab 	bl	801278e <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008838:	2208      	movs	r2, #8
 800883a:	2105      	movs	r1, #5
 800883c:	a84d      	add	r0, sp, #308	; 0x134
 800883e:	f009 ffa6 	bl	801278e <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008842:	ae41      	add	r6, sp, #260	; 0x104
 8008844:	2201      	movs	r2, #1
 8008846:	2106      	movs	r1, #6
 8008848:	a84d      	add	r0, sp, #308	; 0x134
 800884a:	f009 ffa0 	bl	801278e <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 800884e:	6830      	ldr	r0, [r6, #0]
 8008850:	f006 f878 	bl	800e944 <PixelType::GetType(pixel::Type)>
 8008854:	4680      	mov	r8, r0
 8008856:	68b0      	ldr	r0, [r6, #8]
 8008858:	f8d6 9004 	ldr.w	r9, [r6, #4]
 800885c:	f8d6 a020 	ldr.w	sl, [r6, #32]
 8008860:	f006 f8c8 	bl	800e9f4 <PixelType::GetMap(pixel::Map)>
 8008864:	4643      	mov	r3, r8
 8008866:	2107      	movs	r1, #7
 8008868:	4a42      	ldr	r2, [pc, #264]	; (8008974 <main+0x33c>)
 800886a:	e9cd a001 	strd	sl, r0, [sp, #4]
 800886e:	f8cd 9000 	str.w	r9, [sp]
 8008872:	a84d      	add	r0, sp, #308	; 0x134
 8008874:	f7ff fd86 	bl	8008384 <Display::Printf(unsigned char, char const*, ...)>
 8008878:	a80e      	add	r0, sp, #56	; 0x38
 800887a:	f007 fc0b 	bl	8010094 <StoreDisplayUdf::StoreDisplayUdf()>
 800887e:	a90e      	add	r1, sp, #56	; 0x38
 8008880:	a837      	add	r0, sp, #220	; 0xdc
 8008882:	f00a f905 	bl	8012a90 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 8008886:	a837      	add	r0, sp, #220	; 0xdc
 8008888:	f00a f90f 	bl	8012aaa <DisplayUdfParams::Load()>
 800888c:	b130      	cbz	r0, 800889c <main+0x264>
 800888e:	a837      	add	r0, sp, #220	; 0xdc
 8008890:	f00a fa76 	bl	8012d80 <DisplayUdfParams::Dump()>
 8008894:	a94d      	add	r1, sp, #308	; 0x134
 8008896:	a837      	add	r0, sp, #220	; 0xdc
 8008898:	f00a fa3f 	bl	8012d1a <DisplayUdfParams::Set(DisplayUdf*)>
 800889c:	a9d1      	add	r1, sp, #836	; 0x344
 800889e:	a84d      	add	r0, sp, #308	; 0x134
 80088a0:	f00a fb2a 	bl	8012ef8 <DisplayUdf::Show(ArtNetNode*)>
 80088a4:	b16c      	cbz	r4, 80088c2 <main+0x28a>
 80088a6:	2106      	movs	r1, #6
 80088a8:	a84d      	add	r0, sp, #308	; 0x134
 80088aa:	f7ff fd65 	bl	8008378 <Display::ClearLine(unsigned char)>
 80088ae:	4620      	mov	r0, r4
 80088b0:	f006 f986 	bl	800ebc0 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 80088b4:	2106      	movs	r1, #6
 80088b6:	4603      	mov	r3, r0
 80088b8:	4a2f      	ldr	r2, [pc, #188]	; (8008978 <main+0x340>)
 80088ba:	9400      	str	r4, [sp, #0]
 80088bc:	a84d      	add	r0, sp, #308	; 0x134
 80088be:	f7ff fd61 	bl	8008384 <Display::Printf(unsigned char, char const*, ...)>
 80088c2:	2203      	movs	r2, #3
 80088c4:	2100      	movs	r1, #0
 80088c6:	f89d 3c2e 	ldrb.w	r3, [sp, #3118]	; 0xc2e
 80088ca:	a825      	add	r0, sp, #148	; 0x94
 80088cc:	f000 fec8 	bl	8009660 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>
 80088d0:	ab0f      	add	r3, sp, #60	; 0x3c
 80088d2:	4618      	mov	r0, r3
 80088d4:	9305      	str	r3, [sp, #20]
 80088d6:	f007 fcc3 	bl	8010260 <StoreRemoteConfig::StoreRemoteConfig()>
 80088da:	9905      	ldr	r1, [sp, #20]
 80088dc:	a82e      	add	r0, sp, #184	; 0xb8
 80088de:	f001 f9a1 	bl	8009c24 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 80088e2:	a82e      	add	r0, sp, #184	; 0xb8
 80088e4:	f001 f9a8 	bl	8009c38 <RemoteConfigParams::Load()>
 80088e8:	b130      	cbz	r0, 80088f8 <main+0x2c0>
 80088ea:	a82e      	add	r0, sp, #184	; 0xb8
 80088ec:	f001 faeb 	bl	8009ec6 <RemoteConfigParams::Dump()>
 80088f0:	a925      	add	r1, sp, #148	; 0x94
 80088f2:	a82e      	add	r0, sp, #184	; 0xb8
 80088f4:	f001 fac7 	bl	8009e86 <RemoteConfigParams::Set(RemoteConfig*)>
 80088f8:	a80a      	add	r0, sp, #40	; 0x28
 80088fa:	f007 fb45 	bl	800ff88 <SpiFlashStore::Flash()>
 80088fe:	2800      	cmp	r0, #0
 8008900:	d1fa      	bne.n	80088f8 <main+0x2c0>
 8008902:	2303      	movs	r3, #3
 8008904:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8008908:	491c      	ldr	r1, [pc, #112]	; (800897c <main+0x344>)
 800890a:	a84d      	add	r0, sp, #308	; 0x134
 800890c:	f7ff fd8b 	bl	8008426 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008910:	a8d0      	add	r0, sp, #832	; 0x340
 8008912:	f001 fc85 	bl	800a220 <ArtNet4Node::Start()>
 8008916:	f248 0280 	movw	r2, #32896	; 0x8080
 800891a:	2302      	movs	r3, #2
 800891c:	4918      	ldr	r1, [pc, #96]	; (8008980 <main+0x348>)
 800891e:	a84d      	add	r0, sp, #308	; 0x134
 8008920:	f7ff fd81 	bl	8008426 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008924:	2102      	movs	r1, #2
 8008926:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800892a:	e02b      	b.n	8008984 <main+0x34c>
 800892c:	080160b0 	stmdaeq	r1, {r4, r5, r7, sp, lr}
 8008930:	080160a7 	stmdaeq	r1, {r0, r1, r2, r5, r7, sp, lr}
 8008934:	08016195 	stmdaeq	r1, {r0, r2, r4, r7, r8, sp, lr}
 8008938:	080160bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, sp, lr}
 800893c:	40011000 	andmi	r1, r1, r0
 8008940:	08016124 	stmdaeq	r1, {r2, r5, r8, sp, lr}
 8008944:	20009cd0 	ldrdcs	r9, [r0], -r0
 8008948:	080179b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r8, fp, ip, sp, lr}
 800894c:	080179a8 	stmdaeq	r1, {r3, r5, r7, r8, fp, ip, sp, lr}
 8008950:	080160f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, sp, lr}
 8008954:	08016769 	stmdaeq	r1, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
 8008958:	08016138 	stmdaeq	r1, {r3, r4, r5, r8, sp, lr}
 800895c:	08016199 	stmdaeq	r1, {r0, r3, r4, r7, r8, sp, lr}
 8008960:	08016180 	stmdaeq	r1, {r7, r8, sp, lr}
 8008964:	20001984 	andcs	r1, r0, r4, lsl #19
 8008968:	0801616c 	stmdaeq	r1, {r2, r3, r5, r6, r8, sp, lr}
 800896c:	2000192c 	andcs	r1, r0, ip, lsr #18
 8008970:	080160fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, sp, lr}
 8008974:	0801610d 	stmdaeq	r1, {r0, r2, r3, r8, sp, lr}
 8008978:	080160a1 	stmdaeq	r1, {r0, r5, r7, sp, lr}
 800897c:	08016758 	stmdaeq	r1, {r3, r4, r6, r8, r9, sl, sp, lr}
 8008980:	0801677d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r8, r9, sl, sp, lr}
 8008984:	f00b fd44 	bl	8014410 <fwdgt_config>
 8008988:	2801      	cmp	r0, #1
 800898a:	bf0c      	ite	eq
 800898c:	2201      	moveq	r2, #1
 800898e:	2200      	movne	r2, #0
 8008990:	ab07      	add	r3, sp, #28
 8008992:	701a      	strb	r2, [r3, #0]
 8008994:	d101      	bne.n	800899a <main+0x362>
 8008996:	f00b fd2b 	bl	80143f0 <fwdgt_enable>
 800899a:	4e25      	ldr	r6, [pc, #148]	; (8008a30 <main+0x3f8>)
 800899c:	ac4d      	add	r4, sp, #308	; 0x134
 800899e:	f00b fd2f 	bl	8014400 <fwdgt_counter_reload>
 80089a2:	f7fe fdbd 	bl	8007520 <net_handle>
 80089a6:	a8d0      	add	r0, sp, #832	; 0x340
 80089a8:	f001 fc68 	bl	800a27c <ArtNet4Node::Run()>
 80089ac:	a825      	add	r0, sp, #148	; 0x94
 80089ae:	f000 ffe9 	bl	8009984 <RemoteConfig::Run()>
 80089b2:	a80a      	add	r0, sp, #40	; 0x28
 80089b4:	f007 fae8 	bl	800ff88 <SpiFlashStore::Flash()>
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	b113      	cbz	r3, 80089c2 <main+0x38a>
 80089bc:	a80c      	add	r0, sp, #48	; 0x30
 80089be:	f006 fb19 	bl	800eff4 <PixelPatterns::Run()>
 80089c2:	a80b      	add	r0, sp, #44	; 0x2c
 80089c4:	f008 fdbc 	bl	8011540 <MDNS::Run()>
 80089c8:	6962      	ldr	r2, [r4, #20]
 80089ca:	b152      	cbz	r2, 80089e2 <main+0x3aa>
 80089cc:	7c23      	ldrb	r3, [r4, #16]
 80089ce:	bb43      	cbnz	r3, 8008a22 <main+0x3ea>
 80089d0:	6833      	ldr	r3, [r6, #0]
 80089d2:	6861      	ldr	r1, [r4, #4]
 80089d4:	1a5b      	subs	r3, r3, r1
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d203      	bcs.n	80089e2 <main+0x3aa>
 80089da:	2101      	movs	r1, #1
 80089dc:	a84d      	add	r0, sp, #308	; 0x134
 80089de:	f7ff fd4b 	bl	8008478 <Display::SetSleep(bool)>
 80089e2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80089e4:	ab18      	add	r3, sp, #96	; 0x60
 80089e6:	2900      	cmp	r1, #0
 80089e8:	d0d9      	beq.n	800899e <main+0x366>
 80089ea:	6832      	ldr	r2, [r6, #0]
 80089ec:	6958      	ldr	r0, [r3, #20]
 80089ee:	1a12      	subs	r2, r2, r0
 80089f0:	4291      	cmp	r1, r2
 80089f2:	d8d4      	bhi.n	800899e <main+0x366>
 80089f4:	6832      	ldr	r2, [r6, #0]
 80089f6:	615a      	str	r2, [r3, #20]
 80089f8:	691a      	ldr	r2, [r3, #16]
 80089fa:	2a01      	cmp	r2, #1
 80089fc:	f082 0101 	eor.w	r1, r2, #1
 8008a00:	6119      	str	r1, [r3, #16]
 8008a02:	bf16      	itet	ne
 8008a04:	2301      	movne	r3, #1
 8008a06:	616a      	streq	r2, [r5, #20]
 8008a08:	612b      	strne	r3, [r5, #16]
 8008a0a:	e7c8      	b.n	800899e <main+0x366>
 8008a0c:	b13f      	cbz	r7, 8008a1e <main+0x3e6>
 8008a0e:	eb09 0304 	add.w	r3, r9, r4
 8008a12:	2201      	movs	r2, #1
 8008a14:	4621      	mov	r1, r4
 8008a16:	4650      	mov	r0, sl
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	f002 f806 	bl	800aa2a <ArtNetNode::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 8008a1e:	3401      	adds	r4, #1
 8008a20:	e6d3      	b.n	80087ca <main+0x192>
 8008a22:	f7ff fd49 	bl	80084b8 <display::timeout::gpio_renew()>
 8008a26:	2800      	cmp	r0, #0
 8008a28:	d0db      	beq.n	80089e2 <main+0x3aa>
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	e7d6      	b.n	80089dc <main+0x3a4>
 8008a2e:	bf00      	nop
 8008a30:	20009dd4 	ldrdcs	r9, [r0], -r4

08008a34 <_itostr>:
 8008a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a36:	0fc7      	lsrs	r7, r0, #31
 8008a38:	b091      	sub	sp, #68	; 0x44
 8008a3a:	bf18      	it	ne
 8008a3c:	4240      	negne	r0, r0
 8008a3e:	f10d 043f 	add.w	r4, sp, #63	; 0x3f
 8008a42:	b9c8      	cbnz	r0, 8008a78 <_itostr+0x44>
 8008a44:	2330      	movs	r3, #48	; 0x30
 8008a46:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8008a4a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8008a4e:	b132      	cbz	r2, 8008a5e <_itostr+0x2a>
 8008a50:	4668      	mov	r0, sp
 8008a52:	2530      	movs	r5, #48	; 0x30
 8008a54:	1ae6      	subs	r6, r4, r3
 8008a56:	4296      	cmp	r6, r2
 8008a58:	da01      	bge.n	8008a5e <_itostr+0x2a>
 8008a5a:	4283      	cmp	r3, r0
 8008a5c:	d81c      	bhi.n	8008a98 <_itostr+0x64>
 8008a5e:	b117      	cbz	r7, 8008a66 <_itostr+0x32>
 8008a60:	222d      	movs	r2, #45	; 0x2d
 8008a62:	f803 2901 	strb.w	r2, [r3], #-1
 8008a66:	3301      	adds	r3, #1
 8008a68:	1ae0      	subs	r0, r4, r3
 8008a6a:	3901      	subs	r1, #1
 8008a6c:	aa10      	add	r2, sp, #64	; 0x40
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d315      	bcc.n	8008a9e <_itostr+0x6a>
 8008a72:	3001      	adds	r0, #1
 8008a74:	b011      	add	sp, #68	; 0x44
 8008a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a78:	4623      	mov	r3, r4
 8008a7a:	250a      	movs	r5, #10
 8008a7c:	46ec      	mov	ip, sp
 8008a7e:	fb90 f6f5 	sdiv	r6, r0, r5
 8008a82:	fb05 0016 	mls	r0, r5, r6, r0
 8008a86:	3030      	adds	r0, #48	; 0x30
 8008a88:	f803 0901 	strb.w	r0, [r3], #-1
 8008a8c:	4630      	mov	r0, r6
 8008a8e:	2e00      	cmp	r6, #0
 8008a90:	d0dd      	beq.n	8008a4e <_itostr+0x1a>
 8008a92:	4563      	cmp	r3, ip
 8008a94:	d1f3      	bne.n	8008a7e <_itostr+0x4a>
 8008a96:	e7da      	b.n	8008a4e <_itostr+0x1a>
 8008a98:	f803 5901 	strb.w	r5, [r3], #-1
 8008a9c:	e7da      	b.n	8008a54 <_itostr+0x20>
 8008a9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008aa2:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008aa6:	e7e1      	b.n	8008a6c <_itostr+0x38>

08008aa8 <_xputch>:
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	b410      	push	{r4}
 8008aac:	4c08      	ldr	r4, [pc, #32]	; (8008ad0 <_xputch+0x28>)
 8008aae:	68da      	ldr	r2, [r3, #12]
 8008ab0:	4608      	mov	r0, r1
 8008ab2:	6821      	ldr	r1, [r4, #0]
 8008ab4:	3201      	adds	r2, #1
 8008ab6:	60da      	str	r2, [r3, #12]
 8008ab8:	b139      	cbz	r1, 8008aca <_xputch+0x22>
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	da02      	bge.n	8008ac6 <_xputch+0x1e>
 8008ac0:	1c4b      	adds	r3, r1, #1
 8008ac2:	6023      	str	r3, [r4, #0]
 8008ac4:	7008      	strb	r0, [r1, #0]
 8008ac6:	bc10      	pop	{r4}
 8008ac8:	4770      	bx	lr
 8008aca:	bc10      	pop	{r4}
 8008acc:	f00a bfda 	b.w	8013a84 <console_putc>
 8008ad0:	200000e8 	andcs	r0, r0, r8, ror #1

08008ad4 <_format_int>:
 8008ad4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ad8:	4698      	mov	r8, r3
 8008ada:	b091      	sub	sp, #68	; 0x44
 8008adc:	ea52 0308 	orrs.w	r3, r2, r8
 8008ae0:	4606      	mov	r6, r0
 8008ae2:	4617      	mov	r7, r2
 8008ae4:	f10d 053f 	add.w	r5, sp, #63	; 0x3f
 8008ae8:	d133      	bne.n	8008b52 <_format_int+0x7e>
 8008aea:	2330      	movs	r3, #48	; 0x30
 8008aec:	f10d 043e 	add.w	r4, sp, #62	; 0x3e
 8008af0:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8008af4:	6833      	ldr	r3, [r6, #0]
 8008af6:	07d8      	lsls	r0, r3, #31
 8008af8:	d507      	bpl.n	8008b0a <_format_int+0x36>
 8008afa:	466a      	mov	r2, sp
 8008afc:	2030      	movs	r0, #48	; 0x30
 8008afe:	6871      	ldr	r1, [r6, #4]
 8008b00:	1b2f      	subs	r7, r5, r4
 8008b02:	428f      	cmp	r7, r1
 8008b04:	da01      	bge.n	8008b0a <_format_int+0x36>
 8008b06:	4294      	cmp	r4, r2
 8008b08:	d839      	bhi.n	8008b7e <_format_int+0xaa>
 8008b0a:	0699      	lsls	r1, r3, #26
 8008b0c:	d507      	bpl.n	8008b1e <_format_int+0x4a>
 8008b0e:	466a      	mov	r2, sp
 8008b10:	2030      	movs	r0, #48	; 0x30
 8008b12:	68b1      	ldr	r1, [r6, #8]
 8008b14:	1b2f      	subs	r7, r5, r4
 8008b16:	428f      	cmp	r7, r1
 8008b18:	da01      	bge.n	8008b1e <_format_int+0x4a>
 8008b1a:	4294      	cmp	r4, r2
 8008b1c:	d832      	bhi.n	8008b84 <_format_int+0xb0>
 8008b1e:	071a      	lsls	r2, r3, #28
 8008b20:	bf44      	itt	mi
 8008b22:	222d      	movmi	r2, #45	; 0x2d
 8008b24:	f804 2901 	strbmi.w	r2, [r4], #-1
 8008b28:	065b      	lsls	r3, r3, #25
 8008b2a:	d407      	bmi.n	8008b3c <_format_int+0x68>
 8008b2c:	466b      	mov	r3, sp
 8008b2e:	2120      	movs	r1, #32
 8008b30:	68b2      	ldr	r2, [r6, #8]
 8008b32:	1b28      	subs	r0, r5, r4
 8008b34:	4290      	cmp	r0, r2
 8008b36:	da01      	bge.n	8008b3c <_format_int+0x68>
 8008b38:	429c      	cmp	r4, r3
 8008b3a:	d826      	bhi.n	8008b8a <_format_int+0xb6>
 8008b3c:	1b2d      	subs	r5, r5, r4
 8008b3e:	3401      	adds	r4, #1
 8008b40:	ab10      	add	r3, sp, #64	; 0x40
 8008b42:	429c      	cmp	r4, r3
 8008b44:	d324      	bcc.n	8008b90 <_format_int+0xbc>
 8008b46:	68b3      	ldr	r3, [r6, #8]
 8008b48:	42ab      	cmp	r3, r5
 8008b4a:	dc27      	bgt.n	8008b9c <_format_int+0xc8>
 8008b4c:	b011      	add	sp, #68	; 0x44
 8008b4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b52:	462c      	mov	r4, r5
 8008b54:	46e9      	mov	r9, sp
 8008b56:	4638      	mov	r0, r7
 8008b58:	4641      	mov	r1, r8
 8008b5a:	220a      	movs	r2, #10
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	f7ff f805 	bl	8007b6c <__aeabi_uldivmod>
 8008b62:	3230      	adds	r2, #48	; 0x30
 8008b64:	f804 2901 	strb.w	r2, [r4], #-1
 8008b68:	463a      	mov	r2, r7
 8008b6a:	4643      	mov	r3, r8
 8008b6c:	2a0a      	cmp	r2, #10
 8008b6e:	f173 0300 	sbcs.w	r3, r3, #0
 8008b72:	4607      	mov	r7, r0
 8008b74:	4688      	mov	r8, r1
 8008b76:	d3bd      	bcc.n	8008af4 <_format_int+0x20>
 8008b78:	454c      	cmp	r4, r9
 8008b7a:	d1ec      	bne.n	8008b56 <_format_int+0x82>
 8008b7c:	e7ba      	b.n	8008af4 <_format_int+0x20>
 8008b7e:	f804 0901 	strb.w	r0, [r4], #-1
 8008b82:	e7bd      	b.n	8008b00 <_format_int+0x2c>
 8008b84:	f804 0901 	strb.w	r0, [r4], #-1
 8008b88:	e7c4      	b.n	8008b14 <_format_int+0x40>
 8008b8a:	f804 1901 	strb.w	r1, [r4], #-1
 8008b8e:	e7d0      	b.n	8008b32 <_format_int+0x5e>
 8008b90:	4630      	mov	r0, r6
 8008b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b96:	f7ff ff87 	bl	8008aa8 <_xputch>
 8008b9a:	e7d1      	b.n	8008b40 <_format_int+0x6c>
 8008b9c:	2120      	movs	r1, #32
 8008b9e:	4630      	mov	r0, r6
 8008ba0:	f7ff ff82 	bl	8008aa8 <_xputch>
 8008ba4:	3501      	adds	r5, #1
 8008ba6:	e7ce      	b.n	8008b46 <_format_int+0x72>

08008ba8 <_format_hex>:
 8008ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008baa:	b091      	sub	sp, #68	; 0x44
 8008bac:	4606      	mov	r6, r0
 8008bae:	6804      	ldr	r4, [r0, #0]
 8008bb0:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 8008bb4:	bb61      	cbnz	r1, 8008c10 <_format_hex+0x68>
 8008bb6:	2330      	movs	r3, #48	; 0x30
 8008bb8:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8008bbc:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8008bc0:	07e5      	lsls	r5, r4, #31
 8008bc2:	d507      	bpl.n	8008bd4 <_format_hex+0x2c>
 8008bc4:	4669      	mov	r1, sp
 8008bc6:	2530      	movs	r5, #48	; 0x30
 8008bc8:	6870      	ldr	r0, [r6, #4]
 8008bca:	1ad7      	subs	r7, r2, r3
 8008bcc:	4287      	cmp	r7, r0
 8008bce:	da01      	bge.n	8008bd4 <_format_hex+0x2c>
 8008bd0:	428b      	cmp	r3, r1
 8008bd2:	d831      	bhi.n	8008c38 <_format_hex+0x90>
 8008bd4:	06a0      	lsls	r0, r4, #26
 8008bd6:	d507      	bpl.n	8008be8 <_format_hex+0x40>
 8008bd8:	4669      	mov	r1, sp
 8008bda:	2530      	movs	r5, #48	; 0x30
 8008bdc:	68b0      	ldr	r0, [r6, #8]
 8008bde:	1ad7      	subs	r7, r2, r3
 8008be0:	4287      	cmp	r7, r0
 8008be2:	da01      	bge.n	8008be8 <_format_hex+0x40>
 8008be4:	428b      	cmp	r3, r1
 8008be6:	d82a      	bhi.n	8008c3e <_format_hex+0x96>
 8008be8:	0661      	lsls	r1, r4, #25
 8008bea:	d407      	bmi.n	8008bfc <_format_hex+0x54>
 8008bec:	4669      	mov	r1, sp
 8008bee:	2420      	movs	r4, #32
 8008bf0:	68b0      	ldr	r0, [r6, #8]
 8008bf2:	1ad5      	subs	r5, r2, r3
 8008bf4:	4285      	cmp	r5, r0
 8008bf6:	da01      	bge.n	8008bfc <_format_hex+0x54>
 8008bf8:	428b      	cmp	r3, r1
 8008bfa:	d823      	bhi.n	8008c44 <_format_hex+0x9c>
 8008bfc:	1ad5      	subs	r5, r2, r3
 8008bfe:	1c5c      	adds	r4, r3, #1
 8008c00:	ab10      	add	r3, sp, #64	; 0x40
 8008c02:	429c      	cmp	r4, r3
 8008c04:	d321      	bcc.n	8008c4a <_format_hex+0xa2>
 8008c06:	68b3      	ldr	r3, [r6, #8]
 8008c08:	429d      	cmp	r5, r3
 8008c0a:	db24      	blt.n	8008c56 <_format_hex+0xae>
 8008c0c:	b011      	add	sp, #68	; 0x44
 8008c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c10:	f014 0f02 	tst.w	r4, #2
 8008c14:	bf0c      	ite	eq
 8008c16:	2757      	moveq	r7, #87	; 0x57
 8008c18:	2737      	movne	r7, #55	; 0x37
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	466d      	mov	r5, sp
 8008c1e:	f001 000f 	and.w	r0, r1, #15
 8008c22:	2809      	cmp	r0, #9
 8008c24:	bf94      	ite	ls
 8008c26:	3030      	addls	r0, #48	; 0x30
 8008c28:	19c0      	addhi	r0, r0, r7
 8008c2a:	0909      	lsrs	r1, r1, #4
 8008c2c:	f803 0901 	strb.w	r0, [r3], #-1
 8008c30:	d0c6      	beq.n	8008bc0 <_format_hex+0x18>
 8008c32:	42ab      	cmp	r3, r5
 8008c34:	d1f3      	bne.n	8008c1e <_format_hex+0x76>
 8008c36:	e7c3      	b.n	8008bc0 <_format_hex+0x18>
 8008c38:	f803 5901 	strb.w	r5, [r3], #-1
 8008c3c:	e7c5      	b.n	8008bca <_format_hex+0x22>
 8008c3e:	f803 5901 	strb.w	r5, [r3], #-1
 8008c42:	e7cc      	b.n	8008bde <_format_hex+0x36>
 8008c44:	f803 4901 	strb.w	r4, [r3], #-1
 8008c48:	e7d3      	b.n	8008bf2 <_format_hex+0x4a>
 8008c4a:	4630      	mov	r0, r6
 8008c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c50:	f7ff ff2a 	bl	8008aa8 <_xputch>
 8008c54:	e7d4      	b.n	8008c00 <_format_hex+0x58>
 8008c56:	2120      	movs	r1, #32
 8008c58:	4630      	mov	r0, r6
 8008c5a:	f7ff ff25 	bl	8008aa8 <_xputch>
 8008c5e:	3501      	adds	r5, #1
 8008c60:	e7d1      	b.n	8008c06 <_format_hex+0x5e>
	...

08008c64 <_vprintf>:
 8008c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c68:	4614      	mov	r4, r2
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	f04f 0800 	mov.w	r8, #0
 8008c72:	b099      	sub	sp, #100	; 0x64
 8008c74:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8008c78:	af08      	add	r7, sp, #32
 8008c7a:	7819      	ldrb	r1, [r3, #0]
 8008c7c:	b919      	cbnz	r1, 8008c86 <_vprintf+0x22>
 8008c7e:	9806      	ldr	r0, [sp, #24]
 8008c80:	b019      	add	sp, #100	; 0x64
 8008c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c86:	2925      	cmp	r1, #37	; 0x25
 8008c88:	f103 0601 	add.w	r6, r3, #1
 8008c8c:	d004      	beq.n	8008c98 <_vprintf+0x34>
 8008c8e:	a803      	add	r0, sp, #12
 8008c90:	f7ff ff0a 	bl	8008aa8 <_xputch>
 8008c94:	4633      	mov	r3, r6
 8008c96:	e7f0      	b.n	8008c7a <_vprintf+0x16>
 8008c98:	2200      	movs	r2, #0
 8008c9a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8008c9e:	9205      	str	r2, [sp, #20]
 8008ca0:	785a      	ldrb	r2, [r3, #1]
 8008ca2:	2a30      	cmp	r2, #48	; 0x30
 8008ca4:	d129      	bne.n	8008cfa <_vprintf+0x96>
 8008ca6:	2220      	movs	r2, #32
 8008ca8:	9203      	str	r2, [sp, #12]
 8008caa:	1c9e      	adds	r6, r3, #2
 8008cac:	2200      	movs	r2, #0
 8008cae:	4635      	mov	r5, r6
 8008cb0:	4613      	mov	r3, r2
 8008cb2:	f04f 0c0a 	mov.w	ip, #10
 8008cb6:	7829      	ldrb	r1, [r5, #0]
 8008cb8:	462e      	mov	r6, r5
 8008cba:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8008cbe:	2809      	cmp	r0, #9
 8008cc0:	f105 0501 	add.w	r5, r5, #1
 8008cc4:	d91d      	bls.n	8008d02 <_vprintf+0x9e>
 8008cc6:	b12a      	cbz	r2, 8008cd4 <_vprintf+0x70>
 8008cc8:	9305      	str	r3, [sp, #20]
 8008cca:	b11b      	cbz	r3, 8008cd4 <_vprintf+0x70>
 8008ccc:	9b03      	ldr	r3, [sp, #12]
 8008cce:	f043 0310 	orr.w	r3, r3, #16
 8008cd2:	9303      	str	r3, [sp, #12]
 8008cd4:	292e      	cmp	r1, #46	; 0x2e
 8008cd6:	d123      	bne.n	8008d20 <_vprintf+0xbc>
 8008cd8:	7873      	ldrb	r3, [r6, #1]
 8008cda:	2b2a      	cmp	r3, #42	; 0x2a
 8008cdc:	d015      	beq.n	8008d0a <_vprintf+0xa6>
 8008cde:	2100      	movs	r1, #0
 8008ce0:	250a      	movs	r5, #10
 8008ce2:	460a      	mov	r2, r1
 8008ce4:	1c70      	adds	r0, r6, #1
 8008ce6:	7803      	ldrb	r3, [r0, #0]
 8008ce8:	4606      	mov	r6, r0
 8008cea:	3b30      	subs	r3, #48	; 0x30
 8008cec:	2b09      	cmp	r3, #9
 8008cee:	f100 0001 	add.w	r0, r0, #1
 8008cf2:	d959      	bls.n	8008da8 <_vprintf+0x144>
 8008cf4:	b181      	cbz	r1, 8008d18 <_vprintf+0xb4>
 8008cf6:	9204      	str	r2, [sp, #16]
 8008cf8:	e00e      	b.n	8008d18 <_vprintf+0xb4>
 8008cfa:	2a2d      	cmp	r2, #45	; 0x2d
 8008cfc:	d1d6      	bne.n	8008cac <_vprintf+0x48>
 8008cfe:	2240      	movs	r2, #64	; 0x40
 8008d00:	e7d2      	b.n	8008ca8 <_vprintf+0x44>
 8008d02:	2201      	movs	r2, #1
 8008d04:	fb0c 0303 	mla	r3, ip, r3, r0
 8008d08:	e7d5      	b.n	8008cb6 <_vprintf+0x52>
 8008d0a:	f854 3b04 	ldr.w	r3, [r4], #4
 8008d0e:	3602      	adds	r6, #2
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	bfb8      	it	lt
 8008d14:	425b      	neglt	r3, r3
 8008d16:	9304      	str	r3, [sp, #16]
 8008d18:	9b03      	ldr	r3, [sp, #12]
 8008d1a:	f043 0301 	orr.w	r3, r3, #1
 8008d1e:	9303      	str	r3, [sp, #12]
 8008d20:	7833      	ldrb	r3, [r6, #0]
 8008d22:	2b6c      	cmp	r3, #108	; 0x6c
 8008d24:	bf04      	itt	eq
 8008d26:	9b03      	ldreq	r3, [sp, #12]
 8008d28:	3601      	addeq	r6, #1
 8008d2a:	7831      	ldrb	r1, [r6, #0]
 8008d2c:	bf04      	itt	eq
 8008d2e:	f043 0304 	orreq.w	r3, r3, #4
 8008d32:	9303      	streq	r3, [sp, #12]
 8008d34:	2958      	cmp	r1, #88	; 0x58
 8008d36:	f000 8171 	beq.w	800901c <_vprintf+0x3b8>
 8008d3a:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 8008d3e:	b2da      	uxtb	r2, r3
 8008d40:	2a15      	cmp	r2, #21
 8008d42:	d8a4      	bhi.n	8008c8e <_vprintf+0x2a>
 8008d44:	2b15      	cmp	r3, #21
 8008d46:	d8a2      	bhi.n	8008c8e <_vprintf+0x2a>
 8008d48:	a201      	add	r2, pc, #4	; (adr r2, 8008d50 <_vprintf+0xec>)
 8008d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d4e:	bf00      	nop
 8008d50:	08008db1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, fp, pc}
 8008d54:	08008dc3 	stmdaeq	r0, {r0, r1, r6, r7, r8, sl, fp, pc}
 8008d58:	08008c8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, sl, fp, pc}
 8008d5c:	08008df9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, sl, fp, pc}
 8008d60:	08008c8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, sl, fp, pc}
 8008d64:	08008c8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, sl, fp, pc}
 8008d68:	08008dc3 	stmdaeq	r0, {r0, r1, r6, r7, r8, sl, fp, pc}
 8008d6c:	08008c8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, sl, fp, pc}
 8008d70:	08008c8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, sl, fp, pc}
 8008d74:	08008c8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, sl, fp, pc}
 8008d78:	08008c8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, sl, fp, pc}
 8008d7c:	08008c8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, sl, fp, pc}
 8008d80:	08008c8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, sl, fp, pc}
 8008d84:	08008f5f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, pc}
 8008d88:	08008c8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, sl, fp, pc}
 8008d8c:	08008c8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, sl, fp, pc}
 8008d90:	08008f87 	stmdaeq	r0, {r0, r1, r2, r7, r8, r9, sl, fp, pc}
 8008d94:	08008c8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, sl, fp, pc}
 8008d98:	08008ffd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d9c:	08008c8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, sl, fp, pc}
 8008da0:	08008c8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, sl, fp, pc}
 8008da4:	08009025 	stmdaeq	r0, {r0, r2, r5, ip, pc}
 8008da8:	2101      	movs	r1, #1
 8008daa:	fb05 3202 	mla	r2, r5, r2, r3
 8008dae:	e79a      	b.n	8008ce6 <_vprintf+0x82>
 8008db0:	4625      	mov	r5, r4
 8008db2:	a803      	add	r0, sp, #12
 8008db4:	f855 1b04 	ldr.w	r1, [r5], #4
 8008db8:	f7ff fe76 	bl	8008aa8 <_xputch>
 8008dbc:	462c      	mov	r4, r5
 8008dbe:	3601      	adds	r6, #1
 8008dc0:	e768      	b.n	8008c94 <_vprintf+0x30>
 8008dc2:	9903      	ldr	r1, [sp, #12]
 8008dc4:	074d      	lsls	r5, r1, #29
 8008dc6:	bf51      	iteee	pl
 8008dc8:	4625      	movpl	r5, r4
 8008dca:	3407      	addmi	r4, #7
 8008dcc:	f024 0407 	bicmi.w	r4, r4, #7
 8008dd0:	4625      	movmi	r5, r4
 8008dd2:	bf55      	itete	pl
 8008dd4:	f855 2b04 	ldrpl.w	r2, [r5], #4
 8008dd8:	6863      	ldrmi	r3, [r4, #4]
 8008dda:	17d3      	asrpl	r3, r2, #31
 8008ddc:	f855 2b08 	ldrmi.w	r2, [r5], #8
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	da05      	bge.n	8008df0 <_vprintf+0x18c>
 8008de4:	f041 0108 	orr.w	r1, r1, #8
 8008de8:	4252      	negs	r2, r2
 8008dea:	9103      	str	r1, [sp, #12]
 8008dec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008df0:	a803      	add	r0, sp, #12
 8008df2:	f7ff fe6f 	bl	8008ad4 <_format_int>
 8008df6:	e7e1      	b.n	8008dbc <_vprintf+0x158>
 8008df8:	3407      	adds	r4, #7
 8008dfa:	f024 0507 	bic.w	r5, r4, #7
 8008dfe:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8008e02:	f7fe fcb9 	bl	8007778 <__aeabi_d2f>
 8008e06:	9b03      	ldr	r3, [sp, #12]
 8008e08:	4641      	mov	r1, r8
 8008e0a:	07dc      	lsls	r4, r3, #31
 8008e0c:	bf54      	ite	pl
 8008e0e:	f04f 0a06 	movpl.w	sl, #6
 8008e12:	f8dd a010 	ldrmi.w	sl, [sp, #16]
 8008e16:	4681      	mov	r9, r0
 8008e18:	f7fe fe5a 	bl	8007ad0 <__aeabi_fcmplt>
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	d063      	beq.n	8008ee8 <_vprintf+0x284>
 8008e20:	232d      	movs	r3, #45	; 0x2d
 8008e22:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000
 8008e26:	f88d 3020 	strb.w	r3, [sp, #32]
 8008e2a:	f10d 0b21 	add.w	fp, sp, #33	; 0x21
 8008e2e:	4648      	mov	r0, r9
 8008e30:	f7fe fe76 	bl	8007b20 <__aeabi_f2iz>
 8008e34:	4659      	mov	r1, fp
 8008e36:	2200      	movs	r2, #0
 8008e38:	4604      	mov	r4, r0
 8008e3a:	f7ff fdfb 	bl	8008a34 <_itostr>
 8008e3e:	eb0b 0200 	add.w	r2, fp, r0
 8008e42:	e9cd 2000 	strd	r2, r0, [sp]
 8008e46:	4620      	mov	r0, r4
 8008e48:	f7fe fda0 	bl	800798c <__aeabi_i2f>
 8008e4c:	4601      	mov	r1, r0
 8008e4e:	4648      	mov	r0, r9
 8008e50:	f7fe fce6 	bl	8007820 <__aeabi_fsub>
 8008e54:	222e      	movs	r2, #46	; 0x2e
 8008e56:	4601      	mov	r1, r0
 8008e58:	200a      	movs	r0, #10
 8008e5a:	9b00      	ldr	r3, [sp, #0]
 8008e5c:	f10a 0901 	add.w	r9, sl, #1
 8008e60:	1c5c      	adds	r4, r3, #1
 8008e62:	9b01      	ldr	r3, [sp, #4]
 8008e64:	f80b 2003 	strb.w	r2, [fp, r3]
 8008e68:	4603      	mov	r3, r0
 8008e6a:	f1ba 0f00 	cmp.w	sl, #0
 8008e6e:	dc3d      	bgt.n	8008eec <_vprintf+0x288>
 8008e70:	9100      	str	r1, [sp, #0]
 8008e72:	f7fe fd8b 	bl	800798c <__aeabi_i2f>
 8008e76:	9900      	ldr	r1, [sp, #0]
 8008e78:	f7ff f84e 	bl	8007f18 <__aeabi_fmul>
 8008e7c:	f7fe fe50 	bl	8007b20 <__aeabi_f2iz>
 8008e80:	464a      	mov	r2, r9
 8008e82:	4621      	mov	r1, r4
 8008e84:	f7ff fdd6 	bl	8008a34 <_itostr>
 8008e88:	4404      	add	r4, r0
 8008e8a:	1be0      	subs	r0, r4, r7
 8008e8c:	1e44      	subs	r4, r0, #1
 8008e8e:	5d3b      	ldrb	r3, [r7, r4]
 8008e90:	193a      	adds	r2, r7, r4
 8008e92:	2b34      	cmp	r3, #52	; 0x34
 8008e94:	d910      	bls.n	8008eb8 <_vprintf+0x254>
 8008e96:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8008e9a:	1e53      	subs	r3, r2, #1
 8008e9c:	292e      	cmp	r1, #46	; 0x2e
 8008e9e:	d02c      	beq.n	8008efa <_vprintf+0x296>
 8008ea0:	469c      	mov	ip, r3
 8008ea2:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8008ea6:	4663      	mov	r3, ip
 8008ea8:	f81c 1901 	ldrb.w	r1, [ip], #-1
 8008eac:	2939      	cmp	r1, #57	; 0x39
 8008eae:	d021      	beq.n	8008ef4 <_vprintf+0x290>
 8008eb0:	292e      	cmp	r1, #46	; 0x2e
 8008eb2:	d022      	beq.n	8008efa <_vprintf+0x296>
 8008eb4:	3101      	adds	r1, #1
 8008eb6:	7019      	strb	r1, [r3, #0]
 8008eb8:	f104 0360 	add.w	r3, r4, #96	; 0x60
 8008ebc:	446b      	add	r3, sp
 8008ebe:	f813 3c41 	ldrb.w	r3, [r3, #-65]
 8008ec2:	2b2e      	cmp	r3, #46	; 0x2e
 8008ec4:	bf08      	it	eq
 8008ec6:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 8008eca:	46a1      	mov	r9, r4
 8008ecc:	9b05      	ldr	r3, [sp, #20]
 8008ece:	4599      	cmp	r9, r3
 8008ed0:	db3e      	blt.n	8008f50 <_vprintf+0x2ec>
 8008ed2:	46b9      	mov	r9, r7
 8008ed4:	2c00      	cmp	r4, #0
 8008ed6:	f77f af71 	ble.w	8008dbc <_vprintf+0x158>
 8008eda:	f819 1b01 	ldrb.w	r1, [r9], #1
 8008ede:	a803      	add	r0, sp, #12
 8008ee0:	f7ff fde2 	bl	8008aa8 <_xputch>
 8008ee4:	3c01      	subs	r4, #1
 8008ee6:	e7f5      	b.n	8008ed4 <_vprintf+0x270>
 8008ee8:	46bb      	mov	fp, r7
 8008eea:	e7a0      	b.n	8008e2e <_vprintf+0x1ca>
 8008eec:	4358      	muls	r0, r3
 8008eee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008ef2:	e7ba      	b.n	8008e6a <_vprintf+0x206>
 8008ef4:	f88c e001 	strb.w	lr, [ip, #1]
 8008ef8:	e7d5      	b.n	8008ea6 <_vprintf+0x242>
 8008efa:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8008efe:	3b01      	subs	r3, #1
 8008f00:	7819      	ldrb	r1, [r3, #0]
 8008f02:	2939      	cmp	r1, #57	; 0x39
 8008f04:	d112      	bne.n	8008f2c <_vprintf+0x2c8>
 8008f06:	42bb      	cmp	r3, r7
 8008f08:	d20d      	bcs.n	8008f26 <_vprintf+0x2c2>
 8008f0a:	1c5c      	adds	r4, r3, #1
 8008f0c:	1c99      	adds	r1, r3, #2
 8008f0e:	428c      	cmp	r4, r1
 8008f10:	eba2 0203 	sub.w	r2, r2, r3
 8008f14:	d913      	bls.n	8008f3e <_vprintf+0x2da>
 8008f16:	4619      	mov	r1, r3
 8008f18:	441a      	add	r2, r3
 8008f1a:	428a      	cmp	r2, r1
 8008f1c:	d10b      	bne.n	8008f36 <_vprintf+0x2d2>
 8008f1e:	2231      	movs	r2, #49	; 0x31
 8008f20:	4604      	mov	r4, r0
 8008f22:	705a      	strb	r2, [r3, #1]
 8008f24:	e7c8      	b.n	8008eb8 <_vprintf+0x254>
 8008f26:	f803 c901 	strb.w	ip, [r3], #-1
 8008f2a:	e7e9      	b.n	8008f00 <_vprintf+0x29c>
 8008f2c:	42bb      	cmp	r3, r7
 8008f2e:	d3ec      	bcc.n	8008f0a <_vprintf+0x2a6>
 8008f30:	292d      	cmp	r1, #45	; 0x2d
 8008f32:	d0ea      	beq.n	8008f0a <_vprintf+0x2a6>
 8008f34:	e7be      	b.n	8008eb4 <_vprintf+0x250>
 8008f36:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008f3a:	704c      	strb	r4, [r1, #1]
 8008f3c:	e7ed      	b.n	8008f1a <_vprintf+0x2b6>
 8008f3e:	4414      	add	r4, r2
 8008f40:	440a      	add	r2, r1
 8008f42:	428a      	cmp	r2, r1
 8008f44:	d0eb      	beq.n	8008f1e <_vprintf+0x2ba>
 8008f46:	f814 cd01 	ldrb.w	ip, [r4, #-1]!
 8008f4a:	f802 cd01 	strb.w	ip, [r2, #-1]!
 8008f4e:	e7f8      	b.n	8008f42 <_vprintf+0x2de>
 8008f50:	2120      	movs	r1, #32
 8008f52:	a803      	add	r0, sp, #12
 8008f54:	f7ff fda8 	bl	8008aa8 <_xputch>
 8008f58:	f109 0901 	add.w	r9, r9, #1
 8008f5c:	e7b6      	b.n	8008ecc <_vprintf+0x268>
 8008f5e:	2308      	movs	r3, #8
 8008f60:	4625      	mov	r5, r4
 8008f62:	9305      	str	r3, [sp, #20]
 8008f64:	2320      	movs	r3, #32
 8008f66:	2130      	movs	r1, #48	; 0x30
 8008f68:	f855 4b04 	ldr.w	r4, [r5], #4
 8008f6c:	a803      	add	r0, sp, #12
 8008f6e:	9303      	str	r3, [sp, #12]
 8008f70:	f7ff fd9a 	bl	8008aa8 <_xputch>
 8008f74:	2178      	movs	r1, #120	; 0x78
 8008f76:	a803      	add	r0, sp, #12
 8008f78:	f7ff fd96 	bl	8008aa8 <_xputch>
 8008f7c:	4621      	mov	r1, r4
 8008f7e:	a803      	add	r0, sp, #12
 8008f80:	f7ff fe12 	bl	8008ba8 <_format_hex>
 8008f84:	e71a      	b.n	8008dbc <_vprintf+0x158>
 8008f86:	4625      	mov	r5, r4
 8008f88:	2400      	movs	r4, #0
 8008f8a:	f855 9b04 	ldr.w	r9, [r5], #4
 8008f8e:	f819 3004 	ldrb.w	r3, [r9, r4]
 8008f92:	b993      	cbnz	r3, 8008fba <_vprintf+0x356>
 8008f94:	9b03      	ldr	r3, [sp, #12]
 8008f96:	07d9      	lsls	r1, r3, #31
 8008f98:	d503      	bpl.n	8008fa2 <_vprintf+0x33e>
 8008f9a:	9b04      	ldr	r3, [sp, #16]
 8008f9c:	429c      	cmp	r4, r3
 8008f9e:	bfa8      	it	ge
 8008fa0:	461c      	movge	r4, r3
 8008fa2:	9b03      	ldr	r3, [sp, #12]
 8008fa4:	f104 0a01 	add.w	sl, r4, #1
 8008fa8:	065a      	lsls	r2, r3, #25
 8008faa:	d403      	bmi.n	8008fb4 <_vprintf+0x350>
 8008fac:	9b05      	ldr	r3, [sp, #20]
 8008fae:	429c      	cmp	r4, r3
 8008fb0:	db05      	blt.n	8008fbe <_vprintf+0x35a>
 8008fb2:	4654      	mov	r4, sl
 8008fb4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008fb8:	e00d      	b.n	8008fd6 <_vprintf+0x372>
 8008fba:	3401      	adds	r4, #1
 8008fbc:	e7e7      	b.n	8008f8e <_vprintf+0x32a>
 8008fbe:	2120      	movs	r1, #32
 8008fc0:	a803      	add	r0, sp, #12
 8008fc2:	f7ff fd71 	bl	8008aa8 <_xputch>
 8008fc6:	4654      	mov	r4, sl
 8008fc8:	e7eb      	b.n	8008fa2 <_vprintf+0x33e>
 8008fca:	a803      	add	r0, sp, #12
 8008fcc:	f7ff fd6c 	bl	8008aa8 <_xputch>
 8008fd0:	9b04      	ldr	r3, [sp, #16]
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	9304      	str	r3, [sp, #16]
 8008fd6:	9b03      	ldr	r3, [sp, #12]
 8008fd8:	07db      	lsls	r3, r3, #31
 8008fda:	d501      	bpl.n	8008fe0 <_vprintf+0x37c>
 8008fdc:	9b04      	ldr	r3, [sp, #16]
 8008fde:	b11b      	cbz	r3, 8008fe8 <_vprintf+0x384>
 8008fe0:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8008fe4:	2900      	cmp	r1, #0
 8008fe6:	d1f0      	bne.n	8008fca <_vprintf+0x366>
 8008fe8:	9b05      	ldr	r3, [sp, #20]
 8008fea:	429c      	cmp	r4, r3
 8008fec:	f6bf aee6 	bge.w	8008dbc <_vprintf+0x158>
 8008ff0:	2120      	movs	r1, #32
 8008ff2:	a803      	add	r0, sp, #12
 8008ff4:	f7ff fd58 	bl	8008aa8 <_xputch>
 8008ff8:	3401      	adds	r4, #1
 8008ffa:	e7f5      	b.n	8008fe8 <_vprintf+0x384>
 8008ffc:	9b03      	ldr	r3, [sp, #12]
 8008ffe:	f013 0304 	ands.w	r3, r3, #4
 8009002:	bf1d      	ittte	ne
 8009004:	3407      	addne	r4, #7
 8009006:	f024 0407 	bicne.w	r4, r4, #7
 800900a:	4625      	movne	r5, r4
 800900c:	4625      	moveq	r5, r4
 800900e:	bf1a      	itte	ne
 8009010:	f855 2b08 	ldrne.w	r2, [r5], #8
 8009014:	6863      	ldrne	r3, [r4, #4]
 8009016:	f855 2b04 	ldreq.w	r2, [r5], #4
 800901a:	e6e9      	b.n	8008df0 <_vprintf+0x18c>
 800901c:	9b03      	ldr	r3, [sp, #12]
 800901e:	f043 0302 	orr.w	r3, r3, #2
 8009022:	9303      	str	r3, [sp, #12]
 8009024:	4625      	mov	r5, r4
 8009026:	f855 1b04 	ldr.w	r1, [r5], #4
 800902a:	e7a8      	b.n	8008f7e <_vprintf+0x31a>

0800902c <printf>:
 800902c:	b40f      	push	{r0, r1, r2, r3}
 800902e:	b507      	push	{r0, r1, r2, lr}
 8009030:	aa04      	add	r2, sp, #16
 8009032:	f852 1b04 	ldr.w	r1, [r2], #4
 8009036:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800903a:	9201      	str	r2, [sp, #4]
 800903c:	f7ff fe12 	bl	8008c64 <_vprintf>
 8009040:	b003      	add	sp, #12
 8009042:	f85d eb04 	ldr.w	lr, [sp], #4
 8009046:	b004      	add	sp, #16
 8009048:	4770      	bx	lr
	...

0800904c <sprintf>:
 800904c:	b40e      	push	{r1, r2, r3}
 800904e:	b517      	push	{r0, r1, r2, r4, lr}
 8009050:	4c09      	ldr	r4, [pc, #36]	; (8009078 <sprintf+0x2c>)
 8009052:	aa05      	add	r2, sp, #20
 8009054:	f852 1b04 	ldr.w	r1, [r2], #4
 8009058:	6020      	str	r0, [r4, #0]
 800905a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800905e:	9201      	str	r2, [sp, #4]
 8009060:	f7ff fe00 	bl	8008c64 <_vprintf>
 8009064:	2300      	movs	r3, #0
 8009066:	6822      	ldr	r2, [r4, #0]
 8009068:	6023      	str	r3, [r4, #0]
 800906a:	7013      	strb	r3, [r2, #0]
 800906c:	b003      	add	sp, #12
 800906e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009072:	b003      	add	sp, #12
 8009074:	4770      	bx	lr
 8009076:	bf00      	nop
 8009078:	200000e8 	andcs	r0, r0, r8, ror #1

0800907c <snprintf>:
 800907c:	b40c      	push	{r2, r3}
 800907e:	460b      	mov	r3, r1
 8009080:	b513      	push	{r0, r1, r4, lr}
 8009082:	4c09      	ldr	r4, [pc, #36]	; (80090a8 <snprintf+0x2c>)
 8009084:	aa04      	add	r2, sp, #16
 8009086:	f852 1b04 	ldr.w	r1, [r2], #4
 800908a:	6020      	str	r0, [r4, #0]
 800908c:	4618      	mov	r0, r3
 800908e:	9201      	str	r2, [sp, #4]
 8009090:	f7ff fde8 	bl	8008c64 <_vprintf>
 8009094:	2300      	movs	r3, #0
 8009096:	6822      	ldr	r2, [r4, #0]
 8009098:	6023      	str	r3, [r4, #0]
 800909a:	7013      	strb	r3, [r2, #0]
 800909c:	b002      	add	sp, #8
 800909e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090a2:	b002      	add	sp, #8
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	200000e8 	andcs	r0, r0, r8, ror #1

080090ac <vsnprintf>:
 80090ac:	b538      	push	{r3, r4, r5, lr}
 80090ae:	4605      	mov	r5, r0
 80090b0:	4c05      	ldr	r4, [pc, #20]	; (80090c8 <vsnprintf+0x1c>)
 80090b2:	4608      	mov	r0, r1
 80090b4:	4611      	mov	r1, r2
 80090b6:	461a      	mov	r2, r3
 80090b8:	6025      	str	r5, [r4, #0]
 80090ba:	f7ff fdd3 	bl	8008c64 <_vprintf>
 80090be:	2300      	movs	r3, #0
 80090c0:	6822      	ldr	r2, [r4, #0]
 80090c2:	6023      	str	r3, [r4, #0]
 80090c4:	7013      	strb	r3, [r2, #0]
 80090c6:	bd38      	pop	{r3, r4, r5, pc}
 80090c8:	200000e8 	andcs	r0, r0, r8, ror #1

080090cc <__udivmoddi4>:
 80090cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090d0:	9e08      	ldr	r6, [sp, #32]
 80090d2:	460d      	mov	r5, r1
 80090d4:	4604      	mov	r4, r0
 80090d6:	468e      	mov	lr, r1
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d14c      	bne.n	8009176 <__udivmoddi4+0xaa>
 80090dc:	428a      	cmp	r2, r1
 80090de:	4694      	mov	ip, r2
 80090e0:	d967      	bls.n	80091b2 <__udivmoddi4+0xe6>
 80090e2:	fab2 f382 	clz	r3, r2
 80090e6:	b153      	cbz	r3, 80090fe <__udivmoddi4+0x32>
 80090e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80090ec:	f1c3 0220 	rsb	r2, r3, #32
 80090f0:	fa01 fe03 	lsl.w	lr, r1, r3
 80090f4:	fa20 f202 	lsr.w	r2, r0, r2
 80090f8:	ea42 0e0e 	orr.w	lr, r2, lr
 80090fc:	409c      	lsls	r4, r3
 80090fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8009102:	fbbe f1f7 	udiv	r1, lr, r7
 8009106:	fa1f f58c 	uxth.w	r5, ip
 800910a:	fb07 ee11 	mls	lr, r7, r1, lr
 800910e:	fb01 f005 	mul.w	r0, r1, r5
 8009112:	0c22      	lsrs	r2, r4, #16
 8009114:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8009118:	4290      	cmp	r0, r2
 800911a:	d90a      	bls.n	8009132 <__udivmoddi4+0x66>
 800911c:	eb1c 0202 	adds.w	r2, ip, r2
 8009120:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8009124:	f080 8119 	bcs.w	800935a <__udivmoddi4+0x28e>
 8009128:	4290      	cmp	r0, r2
 800912a:	f240 8116 	bls.w	800935a <__udivmoddi4+0x28e>
 800912e:	3902      	subs	r1, #2
 8009130:	4462      	add	r2, ip
 8009132:	1a12      	subs	r2, r2, r0
 8009134:	fbb2 f0f7 	udiv	r0, r2, r7
 8009138:	fb07 2210 	mls	r2, r7, r0, r2
 800913c:	fb00 f505 	mul.w	r5, r0, r5
 8009140:	b2a4      	uxth	r4, r4
 8009142:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009146:	42a5      	cmp	r5, r4
 8009148:	d90a      	bls.n	8009160 <__udivmoddi4+0x94>
 800914a:	eb1c 0404 	adds.w	r4, ip, r4
 800914e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8009152:	f080 8104 	bcs.w	800935e <__udivmoddi4+0x292>
 8009156:	42a5      	cmp	r5, r4
 8009158:	f240 8101 	bls.w	800935e <__udivmoddi4+0x292>
 800915c:	4464      	add	r4, ip
 800915e:	3802      	subs	r0, #2
 8009160:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8009164:	2100      	movs	r1, #0
 8009166:	1b64      	subs	r4, r4, r5
 8009168:	b11e      	cbz	r6, 8009172 <__udivmoddi4+0xa6>
 800916a:	40dc      	lsrs	r4, r3
 800916c:	2300      	movs	r3, #0
 800916e:	e9c6 4300 	strd	r4, r3, [r6]
 8009172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009176:	428b      	cmp	r3, r1
 8009178:	d908      	bls.n	800918c <__udivmoddi4+0xc0>
 800917a:	2e00      	cmp	r6, #0
 800917c:	f000 80ea 	beq.w	8009354 <__udivmoddi4+0x288>
 8009180:	2100      	movs	r1, #0
 8009182:	e9c6 0500 	strd	r0, r5, [r6]
 8009186:	4608      	mov	r0, r1
 8009188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800918c:	fab3 f183 	clz	r1, r3
 8009190:	2900      	cmp	r1, #0
 8009192:	d148      	bne.n	8009226 <__udivmoddi4+0x15a>
 8009194:	42ab      	cmp	r3, r5
 8009196:	d302      	bcc.n	800919e <__udivmoddi4+0xd2>
 8009198:	4282      	cmp	r2, r0
 800919a:	f200 80f8 	bhi.w	800938e <__udivmoddi4+0x2c2>
 800919e:	1a84      	subs	r4, r0, r2
 80091a0:	eb65 0203 	sbc.w	r2, r5, r3
 80091a4:	2001      	movs	r0, #1
 80091a6:	4696      	mov	lr, r2
 80091a8:	2e00      	cmp	r6, #0
 80091aa:	d0e2      	beq.n	8009172 <__udivmoddi4+0xa6>
 80091ac:	e9c6 4e00 	strd	r4, lr, [r6]
 80091b0:	e7df      	b.n	8009172 <__udivmoddi4+0xa6>
 80091b2:	b902      	cbnz	r2, 80091b6 <__udivmoddi4+0xea>
 80091b4:	deff      	udf	#255	; 0xff
 80091b6:	fab2 f382 	clz	r3, r2
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f040 808e 	bne.w	80092dc <__udivmoddi4+0x210>
 80091c0:	1a88      	subs	r0, r1, r2
 80091c2:	2101      	movs	r1, #1
 80091c4:	0c17      	lsrs	r7, r2, #16
 80091c6:	fa1f fe82 	uxth.w	lr, r2
 80091ca:	fbb0 f5f7 	udiv	r5, r0, r7
 80091ce:	fb07 0015 	mls	r0, r7, r5, r0
 80091d2:	0c22      	lsrs	r2, r4, #16
 80091d4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80091d8:	fb0e f005 	mul.w	r0, lr, r5
 80091dc:	4290      	cmp	r0, r2
 80091de:	d908      	bls.n	80091f2 <__udivmoddi4+0x126>
 80091e0:	eb1c 0202 	adds.w	r2, ip, r2
 80091e4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80091e8:	d202      	bcs.n	80091f0 <__udivmoddi4+0x124>
 80091ea:	4290      	cmp	r0, r2
 80091ec:	f200 80cc 	bhi.w	8009388 <__udivmoddi4+0x2bc>
 80091f0:	4645      	mov	r5, r8
 80091f2:	1a12      	subs	r2, r2, r0
 80091f4:	fbb2 f0f7 	udiv	r0, r2, r7
 80091f8:	fb07 2210 	mls	r2, r7, r0, r2
 80091fc:	fb0e fe00 	mul.w	lr, lr, r0
 8009200:	b2a4      	uxth	r4, r4
 8009202:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009206:	45a6      	cmp	lr, r4
 8009208:	d908      	bls.n	800921c <__udivmoddi4+0x150>
 800920a:	eb1c 0404 	adds.w	r4, ip, r4
 800920e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8009212:	d202      	bcs.n	800921a <__udivmoddi4+0x14e>
 8009214:	45a6      	cmp	lr, r4
 8009216:	f200 80b4 	bhi.w	8009382 <__udivmoddi4+0x2b6>
 800921a:	4610      	mov	r0, r2
 800921c:	eba4 040e 	sub.w	r4, r4, lr
 8009220:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8009224:	e7a0      	b.n	8009168 <__udivmoddi4+0x9c>
 8009226:	f1c1 0720 	rsb	r7, r1, #32
 800922a:	408b      	lsls	r3, r1
 800922c:	fa22 fc07 	lsr.w	ip, r2, r7
 8009230:	ea4c 0c03 	orr.w	ip, ip, r3
 8009234:	fa25 fa07 	lsr.w	sl, r5, r7
 8009238:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800923c:	fbba f8f9 	udiv	r8, sl, r9
 8009240:	408d      	lsls	r5, r1
 8009242:	fa20 f307 	lsr.w	r3, r0, r7
 8009246:	fb09 aa18 	mls	sl, r9, r8, sl
 800924a:	fa1f fe8c 	uxth.w	lr, ip
 800924e:	432b      	orrs	r3, r5
 8009250:	fa00 f501 	lsl.w	r5, r0, r1
 8009254:	fb08 f00e 	mul.w	r0, r8, lr
 8009258:	0c1c      	lsrs	r4, r3, #16
 800925a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800925e:	42a0      	cmp	r0, r4
 8009260:	fa02 f201 	lsl.w	r2, r2, r1
 8009264:	d90b      	bls.n	800927e <__udivmoddi4+0x1b2>
 8009266:	eb1c 0404 	adds.w	r4, ip, r4
 800926a:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800926e:	f080 8086 	bcs.w	800937e <__udivmoddi4+0x2b2>
 8009272:	42a0      	cmp	r0, r4
 8009274:	f240 8083 	bls.w	800937e <__udivmoddi4+0x2b2>
 8009278:	f1a8 0802 	sub.w	r8, r8, #2
 800927c:	4464      	add	r4, ip
 800927e:	1a24      	subs	r4, r4, r0
 8009280:	b298      	uxth	r0, r3
 8009282:	fbb4 f3f9 	udiv	r3, r4, r9
 8009286:	fb09 4413 	mls	r4, r9, r3, r4
 800928a:	fb03 fe0e 	mul.w	lr, r3, lr
 800928e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8009292:	45a6      	cmp	lr, r4
 8009294:	d908      	bls.n	80092a8 <__udivmoddi4+0x1dc>
 8009296:	eb1c 0404 	adds.w	r4, ip, r4
 800929a:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 800929e:	d26a      	bcs.n	8009376 <__udivmoddi4+0x2aa>
 80092a0:	45a6      	cmp	lr, r4
 80092a2:	d968      	bls.n	8009376 <__udivmoddi4+0x2aa>
 80092a4:	3b02      	subs	r3, #2
 80092a6:	4464      	add	r4, ip
 80092a8:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80092ac:	fba0 9302 	umull	r9, r3, r0, r2
 80092b0:	eba4 040e 	sub.w	r4, r4, lr
 80092b4:	429c      	cmp	r4, r3
 80092b6:	46c8      	mov	r8, r9
 80092b8:	469e      	mov	lr, r3
 80092ba:	d354      	bcc.n	8009366 <__udivmoddi4+0x29a>
 80092bc:	d051      	beq.n	8009362 <__udivmoddi4+0x296>
 80092be:	2e00      	cmp	r6, #0
 80092c0:	d067      	beq.n	8009392 <__udivmoddi4+0x2c6>
 80092c2:	ebb5 0308 	subs.w	r3, r5, r8
 80092c6:	eb64 040e 	sbc.w	r4, r4, lr
 80092ca:	40cb      	lsrs	r3, r1
 80092cc:	fa04 f707 	lsl.w	r7, r4, r7
 80092d0:	431f      	orrs	r7, r3
 80092d2:	40cc      	lsrs	r4, r1
 80092d4:	e9c6 7400 	strd	r7, r4, [r6]
 80092d8:	2100      	movs	r1, #0
 80092da:	e74a      	b.n	8009172 <__udivmoddi4+0xa6>
 80092dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80092e0:	f1c3 0020 	rsb	r0, r3, #32
 80092e4:	40c1      	lsrs	r1, r0
 80092e6:	409d      	lsls	r5, r3
 80092e8:	fa24 f000 	lsr.w	r0, r4, r0
 80092ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80092f0:	4328      	orrs	r0, r5
 80092f2:	fbb1 f5f7 	udiv	r5, r1, r7
 80092f6:	fb07 1115 	mls	r1, r7, r5, r1
 80092fa:	fa1f fe8c 	uxth.w	lr, ip
 80092fe:	0c02      	lsrs	r2, r0, #16
 8009300:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009304:	fb05 f10e 	mul.w	r1, r5, lr
 8009308:	4291      	cmp	r1, r2
 800930a:	fa04 f403 	lsl.w	r4, r4, r3
 800930e:	d908      	bls.n	8009322 <__udivmoddi4+0x256>
 8009310:	eb1c 0202 	adds.w	r2, ip, r2
 8009314:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8009318:	d22f      	bcs.n	800937a <__udivmoddi4+0x2ae>
 800931a:	4291      	cmp	r1, r2
 800931c:	d92d      	bls.n	800937a <__udivmoddi4+0x2ae>
 800931e:	3d02      	subs	r5, #2
 8009320:	4462      	add	r2, ip
 8009322:	1a52      	subs	r2, r2, r1
 8009324:	fbb2 f1f7 	udiv	r1, r2, r7
 8009328:	fb07 2211 	mls	r2, r7, r1, r2
 800932c:	b280      	uxth	r0, r0
 800932e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8009332:	fb01 f20e 	mul.w	r2, r1, lr
 8009336:	4282      	cmp	r2, r0
 8009338:	d908      	bls.n	800934c <__udivmoddi4+0x280>
 800933a:	eb1c 0000 	adds.w	r0, ip, r0
 800933e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8009342:	d216      	bcs.n	8009372 <__udivmoddi4+0x2a6>
 8009344:	4282      	cmp	r2, r0
 8009346:	d914      	bls.n	8009372 <__udivmoddi4+0x2a6>
 8009348:	3902      	subs	r1, #2
 800934a:	4460      	add	r0, ip
 800934c:	1a80      	subs	r0, r0, r2
 800934e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8009352:	e73a      	b.n	80091ca <__udivmoddi4+0xfe>
 8009354:	4631      	mov	r1, r6
 8009356:	4630      	mov	r0, r6
 8009358:	e70b      	b.n	8009172 <__udivmoddi4+0xa6>
 800935a:	4671      	mov	r1, lr
 800935c:	e6e9      	b.n	8009132 <__udivmoddi4+0x66>
 800935e:	4610      	mov	r0, r2
 8009360:	e6fe      	b.n	8009160 <__udivmoddi4+0x94>
 8009362:	454d      	cmp	r5, r9
 8009364:	d2ab      	bcs.n	80092be <__udivmoddi4+0x1f2>
 8009366:	ebb9 0802 	subs.w	r8, r9, r2
 800936a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800936e:	3801      	subs	r0, #1
 8009370:	e7a5      	b.n	80092be <__udivmoddi4+0x1f2>
 8009372:	4641      	mov	r1, r8
 8009374:	e7ea      	b.n	800934c <__udivmoddi4+0x280>
 8009376:	4603      	mov	r3, r0
 8009378:	e796      	b.n	80092a8 <__udivmoddi4+0x1dc>
 800937a:	4645      	mov	r5, r8
 800937c:	e7d1      	b.n	8009322 <__udivmoddi4+0x256>
 800937e:	46d0      	mov	r8, sl
 8009380:	e77d      	b.n	800927e <__udivmoddi4+0x1b2>
 8009382:	4464      	add	r4, ip
 8009384:	3802      	subs	r0, #2
 8009386:	e749      	b.n	800921c <__udivmoddi4+0x150>
 8009388:	3d02      	subs	r5, #2
 800938a:	4462      	add	r2, ip
 800938c:	e731      	b.n	80091f2 <__udivmoddi4+0x126>
 800938e:	4608      	mov	r0, r1
 8009390:	e70a      	b.n	80091a8 <__udivmoddi4+0xdc>
 8009392:	4631      	mov	r1, r6
 8009394:	e6ed      	b.n	8009172 <__udivmoddi4+0xa6>
 8009396:	bf00      	nop

08009398 <RemoteConfig::HandleList()>:
 8009398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800939c:	6801      	ldr	r1, [r0, #0]
 800939e:	4604      	mov	r4, r0
 80093a0:	2012      	movs	r0, #18
 80093a2:	f04f 080c 	mov.w	r8, #12
 80093a6:	4a29      	ldr	r2, [pc, #164]	; (800944c <RemoteConfig::HandleList()+0xb4>)
 80093a8:	4b29      	ldr	r3, [pc, #164]	; (8009450 <RemoteConfig::HandleList()+0xb8>)
 80093aa:	fb00 2201 	mla	r2, r0, r1, r2
 80093ae:	6860      	ldr	r0, [r4, #4]
 80093b0:	4928      	ldr	r1, [pc, #160]	; (8009454 <RemoteConfig::HandleList()+0xbc>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	fb08 1100 	mla	r1, r8, r0, r1
 80093b8:	4e27      	ldr	r6, [pc, #156]	; (8009458 <RemoteConfig::HandleList()+0xc0>)
 80093ba:	4828      	ldr	r0, [pc, #160]	; (800945c <RemoteConfig::HandleList()+0xc4>)
 80093bc:	695f      	ldr	r7, [r3, #20]
 80093be:	6835      	ldr	r5, [r6, #0]
 80093c0:	f890 9009 	ldrb.w	r9, [r0, #9]
 80093c4:	b2fb      	uxtb	r3, r7
 80093c6:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80093ca:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 80093ce:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80093d2:	b089      	sub	sp, #36	; 0x24
 80093d4:	3507      	adds	r5, #7
 80093d6:	0e3f      	lsrs	r7, r7, #24
 80093d8:	f1b9 0f00 	cmp.w	r9, #0
 80093dc:	d01d      	beq.n	800941a <RemoteConfig::HandleList()+0x82>
 80093de:	3009      	adds	r0, #9
 80093e0:	e9cd 2103 	strd	r2, r1, [sp, #12]
 80093e4:	e9cd 8005 	strd	r8, r0, [sp, #20]
 80093e8:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 80093ec:	4628      	mov	r0, r5
 80093ee:	e9cd e701 	strd	lr, r7, [sp, #4]
 80093f2:	4a1b      	ldr	r2, [pc, #108]	; (8009460 <RemoteConfig::HandleList()+0xc8>)
 80093f4:	f8cd c000 	str.w	ip, [sp]
 80093f8:	f7ff fe40 	bl	800907c <snprintf>
 80093fc:	69e3      	ldr	r3, [r4, #28]
 80093fe:	2b05      	cmp	r3, #5
 8009400:	d118      	bne.n	8009434 <RemoteConfig::HandleList()+0x9c>
 8009402:	f642 1305 	movw	r3, #10501	; 0x2905
 8009406:	9300      	str	r3, [sp, #0]
 8009408:	69a3      	ldr	r3, [r4, #24]
 800940a:	b282      	uxth	r2, r0
 800940c:	4629      	mov	r1, r5
 800940e:	7d20      	ldrb	r0, [r4, #20]
 8009410:	f007 fc72 	bl	8010cf8 <udp_send>
 8009414:	b009      	add	sp, #36	; 0x24
 8009416:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800941a:	e9cd 1804 	strd	r1, r8, [sp, #16]
 800941e:	e9cd 7202 	strd	r7, r2, [sp, #8]
 8009422:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8009426:	4628      	mov	r0, r5
 8009428:	e9cd ce00 	strd	ip, lr, [sp]
 800942c:	4a0d      	ldr	r2, [pc, #52]	; (8009464 <RemoteConfig::HandleList()+0xcc>)
 800942e:	f7ff fe25 	bl	800907c <snprintf>
 8009432:	e7e3      	b.n	80093fc <RemoteConfig::HandleList()+0x64>
 8009434:	2b06      	cmp	r3, #6
 8009436:	d1ed      	bne.n	8009414 <RemoteConfig::HandleList()+0x7c>
 8009438:	6833      	ldr	r3, [r6, #0]
 800943a:	799b      	ldrb	r3, [r3, #6]
 800943c:	2b2a      	cmp	r3, #42	; 0x2a
 800943e:	d1e9      	bne.n	8009414 <RemoteConfig::HandleList()+0x7c>
 8009440:	f642 1305 	movw	r3, #10501	; 0x2905
 8009444:	9300      	str	r3, [sp, #0]
 8009446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800944a:	e7de      	b.n	800940a <RemoteConfig::HandleList()+0x72>
 800944c:	08016384 	stmdaeq	r1, {r2, r7, r8, r9, sp, lr}
 8009450:	200096f8 	strdcs	r9, [r0], -r8
 8009454:	0801644a 	stmdaeq	r1, {r1, r3, r6, sl, sp, lr}
 8009458:	200000ec 	andcs	r0, r0, ip, ror #1
 800945c:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8009460:	08016299 	stmdaeq	r1, {r0, r3, r4, r7, r9, sp, lr}
 8009464:	080162b2 	stmdaeq	r1, {r1, r4, r5, r7, r9, sp, lr}

08009468 <RemoteConfig::HandleDisplayGet()>:
 8009468:	69c3      	ldr	r3, [r0, #28]
 800946a:	2b08      	cmp	r3, #8
 800946c:	d11b      	bne.n	80094a6 <RemoteConfig::HandleDisplayGet()+0x3e>
 800946e:	4b0e      	ldr	r3, [pc, #56]	; (80094a8 <RemoteConfig::HandleDisplayGet()+0x40>)
 8009470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4d0d      	ldr	r5, [pc, #52]	; (80094ac <RemoteConfig::HandleDisplayGet()+0x44>)
 8009476:	7c19      	ldrb	r1, [r3, #16]
 8009478:	4a0d      	ldr	r2, [pc, #52]	; (80094b0 <RemoteConfig::HandleDisplayGet()+0x48>)
 800947a:	4b0e      	ldr	r3, [pc, #56]	; (80094b4 <RemoteConfig::HandleDisplayGet()+0x4c>)
 800947c:	4604      	mov	r4, r0
 800947e:	2900      	cmp	r1, #0
 8009480:	bf18      	it	ne
 8009482:	4613      	movne	r3, r2
 8009484:	6828      	ldr	r0, [r5, #0]
 8009486:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800948a:	4a0b      	ldr	r2, [pc, #44]	; (80094b8 <RemoteConfig::HandleDisplayGet()+0x50>)
 800948c:	f7ff fdf6 	bl	800907c <snprintf>
 8009490:	f642 1305 	movw	r3, #10501	; 0x2905
 8009494:	9300      	str	r3, [sp, #0]
 8009496:	b282      	uxth	r2, r0
 8009498:	69a3      	ldr	r3, [r4, #24]
 800949a:	6829      	ldr	r1, [r5, #0]
 800949c:	7d20      	ldrb	r0, [r4, #20]
 800949e:	f007 fc2b 	bl	8010cf8 <udp_send>
 80094a2:	b003      	add	sp, #12
 80094a4:	bd30      	pop	{r4, r5, pc}
 80094a6:	4770      	bx	lr
 80094a8:	20009cd0 	ldrdcs	r9, [r0], -r0
 80094ac:	200000ec 	andcs	r0, r0, ip, ror #1
 80094b0:	080162cb 	stmdaeq	r1, {r0, r1, r3, r6, r7, r9, sp, lr}
 80094b4:	080162c8 	stmdaeq	r1, {r3, r6, r7, r9, sp, lr}
 80094b8:	080162cf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, r9, sp, lr}

080094bc <RemoteConfig::HandleTftpGet()>:
 80094bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094be:	4604      	mov	r4, r0
 80094c0:	f000 fd86 	bl	8009fd0 <RemoteConfig::PlatformHandleTftpGet()>
 80094c4:	69e3      	ldr	r3, [r4, #28]
 80094c6:	2b05      	cmp	r3, #5
 80094c8:	d116      	bne.n	80094f8 <RemoteConfig::HandleTftpGet()+0x3c>
 80094ca:	f894 1020 	ldrb.w	r1, [r4, #32]
 80094ce:	4d0b      	ldr	r5, [pc, #44]	; (80094fc <RemoteConfig::HandleTftpGet()+0x40>)
 80094d0:	4a0b      	ldr	r2, [pc, #44]	; (8009500 <RemoteConfig::HandleTftpGet()+0x44>)
 80094d2:	4b0c      	ldr	r3, [pc, #48]	; (8009504 <RemoteConfig::HandleTftpGet()+0x48>)
 80094d4:	6828      	ldr	r0, [r5, #0]
 80094d6:	2900      	cmp	r1, #0
 80094d8:	bf08      	it	eq
 80094da:	4613      	moveq	r3, r2
 80094dc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80094e0:	4a09      	ldr	r2, [pc, #36]	; (8009508 <RemoteConfig::HandleTftpGet()+0x4c>)
 80094e2:	f7ff fdcb 	bl	800907c <snprintf>
 80094e6:	f642 1305 	movw	r3, #10501	; 0x2905
 80094ea:	b282      	uxth	r2, r0
 80094ec:	9300      	str	r3, [sp, #0]
 80094ee:	6829      	ldr	r1, [r5, #0]
 80094f0:	69a3      	ldr	r3, [r4, #24]
 80094f2:	7d20      	ldrb	r0, [r4, #20]
 80094f4:	f007 fc00 	bl	8010cf8 <udp_send>
 80094f8:	b003      	add	sp, #12
 80094fa:	bd30      	pop	{r4, r5, pc}
 80094fc:	200000ec 	andcs	r0, r0, ip, ror #1
 8009500:	080162cb 	stmdaeq	r1, {r0, r1, r3, r6, r7, r9, sp, lr}
 8009504:	080162c8 	stmdaeq	r1, {r3, r6, r7, r9, sp, lr}
 8009508:	080162db 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, r9, sp, lr}

0800950c <RemoteConfig::HandleVersion()>:
 800950c:	69c3      	ldr	r3, [r0, #28]
 800950e:	2b08      	cmp	r3, #8
 8009510:	d114      	bne.n	800953c <RemoteConfig::HandleVersion()+0x30>
 8009512:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009514:	4d0a      	ldr	r5, [pc, #40]	; (8009540 <RemoteConfig::HandleVersion()+0x34>)
 8009516:	4604      	mov	r4, r0
 8009518:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800951c:	4b09      	ldr	r3, [pc, #36]	; (8009544 <RemoteConfig::HandleVersion()+0x38>)
 800951e:	4a0a      	ldr	r2, [pc, #40]	; (8009548 <RemoteConfig::HandleVersion()+0x3c>)
 8009520:	6828      	ldr	r0, [r5, #0]
 8009522:	f7ff fdab 	bl	800907c <snprintf>
 8009526:	f642 1305 	movw	r3, #10501	; 0x2905
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	b282      	uxth	r2, r0
 800952e:	69a3      	ldr	r3, [r4, #24]
 8009530:	6829      	ldr	r1, [r5, #0]
 8009532:	7d20      	ldrb	r0, [r4, #20]
 8009534:	f007 fbe0 	bl	8010cf8 <udp_send>
 8009538:	b003      	add	sp, #12
 800953a:	bd30      	pop	{r4, r5, pc}
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop
 8009540:	200000ec 	andcs	r0, r0, ip, ror #1
 8009544:	20009d76 	andcs	r9, r0, r6, ror sp
 8009548:	080162e4 	stmdaeq	r1, {r2, r5, r6, r7, r9, sp, lr}

0800954c <RemoteConfig::HandleUptime()>:
 800954c:	7bc3      	ldrb	r3, [r0, #15]
 800954e:	b1e3      	cbz	r3, 800958a <RemoteConfig::HandleUptime()+0x3e>
 8009550:	4b0e      	ldr	r3, [pc, #56]	; (800958c <RemoteConfig::HandleUptime()+0x40>)
 8009552:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	69c3      	ldr	r3, [r0, #28]
 8009558:	4604      	mov	r4, r0
 800955a:	2b07      	cmp	r3, #7
 800955c:	d113      	bne.n	8009586 <RemoteConfig::HandleUptime()+0x3a>
 800955e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009562:	4d0b      	ldr	r5, [pc, #44]	; (8009590 <RemoteConfig::HandleUptime()+0x44>)
 8009564:	fbb2 f3f3 	udiv	r3, r2, r3
 8009568:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800956c:	4a09      	ldr	r2, [pc, #36]	; (8009594 <RemoteConfig::HandleUptime()+0x48>)
 800956e:	6828      	ldr	r0, [r5, #0]
 8009570:	f7ff fd84 	bl	800907c <snprintf>
 8009574:	f642 1305 	movw	r3, #10501	; 0x2905
 8009578:	9300      	str	r3, [sp, #0]
 800957a:	b282      	uxth	r2, r0
 800957c:	69a3      	ldr	r3, [r4, #24]
 800957e:	6829      	ldr	r1, [r5, #0]
 8009580:	7d20      	ldrb	r0, [r4, #20]
 8009582:	f007 fbb9 	bl	8010cf8 <udp_send>
 8009586:	b003      	add	sp, #12
 8009588:	bd30      	pop	{r4, r5, pc}
 800958a:	4770      	bx	lr
 800958c:	20009dd4 	ldrdcs	r9, [r0], -r4
 8009590:	200000ec 	andcs	r0, r0, ip, ror #1
 8009594:	080162ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r9, sp, lr}

08009598 <Display::Status(Display7SegmentMessage)>:
 8009598:	7c43      	ldrb	r3, [r0, #17]
 800959a:	b1bb      	cbz	r3, 80095cc <Display::Status(Display7SegmentMessage)+0x34>
 800959c:	b513      	push	{r0, r1, r4, lr}
 800959e:	2312      	movs	r3, #18
 80095a0:	43c9      	mvns	r1, r1
 80095a2:	4604      	mov	r4, r0
 80095a4:	f88d 3004 	strb.w	r3, [sp, #4]
 80095a8:	7a00      	ldrb	r0, [r0, #8]
 80095aa:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80095ae:	f88d 3005 	strb.w	r3, [sp, #5]
 80095b2:	f88d 1006 	strb.w	r1, [sp, #6]
 80095b6:	f00b fb59 	bl	8014c6c <gd32_i2c_set_address>
 80095ba:	68e0      	ldr	r0, [r4, #12]
 80095bc:	f00b fb4e 	bl	8014c5c <gd32_i2c_set_baudrate>
 80095c0:	2103      	movs	r1, #3
 80095c2:	a801      	add	r0, sp, #4
 80095c4:	f00b fb58 	bl	8014c78 <gd32_i2c_write>
 80095c8:	b002      	add	sp, #8
 80095ca:	bd10      	pop	{r4, pc}
 80095cc:	4770      	bx	lr
	...

080095d0 <RemoteConfig::HandleDisplaySet()>:
 80095d0:	b508      	push	{r3, lr}
 80095d2:	69c3      	ldr	r3, [r0, #28]
 80095d4:	2b09      	cmp	r3, #9
 80095d6:	d10a      	bne.n	80095ee <RemoteConfig::HandleDisplaySet()+0x1e>
 80095d8:	4b05      	ldr	r3, [pc, #20]	; (80095f0 <RemoteConfig::HandleDisplaySet()+0x20>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	7a59      	ldrb	r1, [r3, #9]
 80095de:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80095e2:	4259      	negs	r1, r3
 80095e4:	4159      	adcs	r1, r3
 80095e6:	4b03      	ldr	r3, [pc, #12]	; (80095f4 <RemoteConfig::HandleDisplaySet()+0x24>)
 80095e8:	6818      	ldr	r0, [r3, #0]
 80095ea:	f7fe ff45 	bl	8008478 <Display::SetSleep(bool)>
 80095ee:	bd08      	pop	{r3, pc}
 80095f0:	200000ec 	andcs	r0, r0, ip, ror #1
 80095f4:	20009cd0 	ldrdcs	r9, [r0], -r0

080095f8 <RemoteConfig::HandleTftpSet()>:
 80095f8:	69c3      	ldr	r3, [r0, #28]
 80095fa:	2b06      	cmp	r3, #6
 80095fc:	d127      	bne.n	800964e <RemoteConfig::HandleTftpSet()+0x56>
 80095fe:	b570      	push	{r4, r5, r6, lr}
 8009600:	4b13      	ldr	r3, [pc, #76]	; (8009650 <RemoteConfig::HandleTftpSet()+0x58>)
 8009602:	4e14      	ldr	r6, [pc, #80]	; (8009654 <RemoteConfig::HandleTftpSet()+0x5c>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4604      	mov	r4, r0
 8009608:	799b      	ldrb	r3, [r3, #6]
 800960a:	6835      	ldr	r5, [r6, #0]
 800960c:	2b30      	cmp	r3, #48	; 0x30
 800960e:	bf14      	ite	ne
 8009610:	2301      	movne	r3, #1
 8009612:	2300      	moveq	r3, #0
 8009614:	f880 3020 	strb.w	r3, [r0, #32]
 8009618:	d012      	beq.n	8009640 <RemoteConfig::HandleTftpSet()+0x48>
 800961a:	4628      	mov	r0, r5
 800961c:	2100      	movs	r1, #0
 800961e:	f7fe ff2b 	bl	8008478 <Display::SetSleep(bool)>
 8009622:	6835      	ldr	r5, [r6, #0]
 8009624:	490c      	ldr	r1, [pc, #48]	; (8009658 <RemoteConfig::HandleTftpSet()+0x60>)
 8009626:	4628      	mov	r0, r5
 8009628:	f7fe fec8 	bl	80083bc <Display::TextStatus(char const*)>
 800962c:	f244 0171 	movw	r1, #16497	; 0x4071
 8009630:	4628      	mov	r0, r5
 8009632:	f7ff ffb1 	bl	8009598 <Display::Status(Display7SegmentMessage)>
 8009636:	4620      	mov	r0, r4
 8009638:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800963c:	f000 bcc0 	b.w	8009fc0 <RemoteConfig::PlatformHandleTftpSet()>
 8009640:	4906      	ldr	r1, [pc, #24]	; (800965c <RemoteConfig::HandleTftpSet()+0x64>)
 8009642:	4628      	mov	r0, r5
 8009644:	f7fe feba 	bl	80083bc <Display::TextStatus(char const*)>
 8009648:	f248 0171 	movw	r1, #32881	; 0x8071
 800964c:	e7f0      	b.n	8009630 <RemoteConfig::HandleTftpSet()+0x38>
 800964e:	4770      	bx	lr
 8009650:	200000ec 	andcs	r0, r0, ip, ror #1
 8009654:	20009cd0 	ldrdcs	r9, [r0], -r0
 8009658:	080162fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r9, sp, lr}
 800965c:	0801630e 	stmdaeq	r1, {r1, r2, r3, r8, r9, sp, lr}

08009660 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>:
 8009660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009664:	2500      	movs	r5, #0
 8009666:	461f      	mov	r7, r3
 8009668:	6083      	str	r3, [r0, #8]
 800966a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800966e:	4690      	mov	r8, r2
 8009670:	4689      	mov	r9, r1
 8009672:	4e12      	ldr	r6, [pc, #72]	; (80096bc <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x5c>)
 8009674:	e9c0 3505 	strd	r3, r5, [r0, #20]
 8009678:	f8df a044 	ldr.w	sl, [pc, #68]	; 80096c0 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x60>
 800967c:	4b11      	ldr	r3, [pc, #68]	; (80096c4 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x64>)
 800967e:	e9c0 1200 	strd	r1, r2, [r0]
 8009682:	4604      	mov	r4, r0
 8009684:	6018      	str	r0, [r3, #0]
 8009686:	4631      	mov	r1, r6
 8009688:	60c5      	str	r5, [r0, #12]
 800968a:	8205      	strh	r5, [r0, #16]
 800968c:	61c5      	str	r5, [r0, #28]
 800968e:	f880 5020 	strb.w	r5, [r0, #32]
 8009692:	f8da 0000 	ldr.w	r0, [sl]
 8009696:	f007 fffd 	bl	8011694 <Network::MacAddressCopyTo(unsigned char*)>
 800969a:	f642 1105 	movw	r1, #10501	; 0x2905
 800969e:	f8da 0000 	ldr.w	r0, [sl]
 80096a2:	f886 9006 	strb.w	r9, [r6, #6]
 80096a6:	f886 8007 	strb.w	r8, [r6, #7]
 80096aa:	7237      	strb	r7, [r6, #8]
 80096ac:	7275      	strb	r5, [r6, #9]
 80096ae:	f007 ffeb 	bl	8011688 <Network::Begin(unsigned short)>
 80096b2:	6160      	str	r0, [r4, #20]
 80096b4:	4620      	mov	r0, r4
 80096b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ba:	bf00      	nop
 80096bc:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 80096c0:	200096f8 	strdcs	r9, [r0], -r8
 80096c4:	20000114 	andcs	r0, r0, r4, lsl r1

080096c8 <RemoteConfig::SetDisable(bool)>:
 80096c8:	b538      	push	{r3, r4, r5, lr}
 80096ca:	4604      	mov	r4, r0
 80096cc:	7b03      	ldrb	r3, [r0, #12]
 80096ce:	b161      	cbz	r1, 80096ea <RemoteConfig::SetDisable(bool)+0x22>
 80096d0:	b953      	cbnz	r3, 80096e8 <RemoteConfig::SetDisable(bool)+0x20>
 80096d2:	4b0c      	ldr	r3, [pc, #48]	; (8009704 <RemoteConfig::SetDisable(bool)+0x3c>)
 80096d4:	f642 1105 	movw	r1, #10501	; 0x2905
 80096d8:	6818      	ldr	r0, [r3, #0]
 80096da:	f007 ffd8 	bl	801168e <Network::End(unsigned short)>
 80096de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80096e2:	6163      	str	r3, [r4, #20]
 80096e4:	2301      	movs	r3, #1
 80096e6:	7323      	strb	r3, [r4, #12]
 80096e8:	bd38      	pop	{r3, r4, r5, pc}
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d0fc      	beq.n	80096e8 <RemoteConfig::SetDisable(bool)+0x20>
 80096ee:	4b05      	ldr	r3, [pc, #20]	; (8009704 <RemoteConfig::SetDisable(bool)+0x3c>)
 80096f0:	460d      	mov	r5, r1
 80096f2:	6818      	ldr	r0, [r3, #0]
 80096f4:	f642 1105 	movw	r1, #10501	; 0x2905
 80096f8:	f007 ffc6 	bl	8011688 <Network::Begin(unsigned short)>
 80096fc:	7325      	strb	r5, [r4, #12]
 80096fe:	6160      	str	r0, [r4, #20]
 8009700:	e7f2      	b.n	80096e8 <RemoteConfig::SetDisable(bool)+0x20>
 8009702:	bf00      	nop
 8009704:	200096f8 	strdcs	r9, [r0], -r8

08009708 <RemoteConfig::SetDisplayName(char const*)>:
 8009708:	2217      	movs	r2, #23
 800970a:	4809      	ldr	r0, [pc, #36]	; (8009730 <RemoteConfig::SetDisplayName(char const*)+0x28>)
 800970c:	b508      	push	{r3, lr}
 800970e:	1e4b      	subs	r3, r1, #1
 8009710:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8009714:	b911      	cbnz	r1, 800971c <RemoteConfig::SetDisplayName(char const*)+0x14>
 8009716:	f00a fc25 	bl	8013f64 <memset>
 800971a:	e003      	b.n	8009724 <RemoteConfig::SetDisplayName(char const*)+0x1c>
 800971c:	3a01      	subs	r2, #1
 800971e:	f800 1b01 	strb.w	r1, [r0], #1
 8009722:	d1f5      	bne.n	8009710 <RemoteConfig::SetDisplayName(char const*)+0x8>
 8009724:	2200      	movs	r2, #0
 8009726:	4b03      	ldr	r3, [pc, #12]	; (8009734 <RemoteConfig::SetDisplayName(char const*)+0x2c>)
 8009728:	f883 2020 	strb.w	r2, [r3, #32]
 800972c:	bd08      	pop	{r3, pc}
 800972e:	bf00      	nop
 8009730:	200000f9 	strdcs	r0, [r0], -r9
 8009734:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

08009738 <RemoteConfig::HandleGet(void*, unsigned int)>:
 8009738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800973a:	4604      	mov	r4, r0
 800973c:	4616      	mov	r6, r2
 800973e:	460d      	mov	r5, r1
 8009740:	4f28      	ldr	r7, [pc, #160]	; (80097e4 <RemoteConfig::HandleGet(void*, unsigned int)+0xac>)
 8009742:	b085      	sub	sp, #20
 8009744:	b9a9      	cbnz	r1, 8009772 <RemoteConfig::HandleGet(void*, unsigned int)+0x3a>
 8009746:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 800974a:	6839      	ldr	r1, [r7, #0]
 800974c:	aa03      	add	r2, sp, #12
 800974e:	3105      	adds	r1, #5
 8009750:	9303      	str	r3, [sp, #12]
 8009752:	f000 fc0b 	bl	8009f6c <RemoteConfig::GetIndex(void const*, unsigned int&)>
 8009756:	1e03      	subs	r3, r0, #0
 8009758:	da1b      	bge.n	8009792 <RemoteConfig::HandleGet(void*, unsigned int)+0x5a>
 800975a:	f642 1305 	movw	r3, #10501	; 0x2905
 800975e:	220b      	movs	r2, #11
 8009760:	9300      	str	r3, [sp, #0]
 8009762:	4921      	ldr	r1, [pc, #132]	; (80097e8 <RemoteConfig::HandleGet(void*, unsigned int)+0xb0>)
 8009764:	69a3      	ldr	r3, [r4, #24]
 8009766:	7d20      	ldrb	r0, [r4, #20]
 8009768:	f007 fac6 	bl	8010cf8 <udp_send>
 800976c:	200c      	movs	r0, #12
 800976e:	b005      	add	sp, #20
 8009770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009772:	9203      	str	r2, [sp, #12]
 8009774:	aa03      	add	r2, sp, #12
 8009776:	6039      	str	r1, [r7, #0]
 8009778:	f000 fbf8 	bl	8009f6c <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800977c:	1e03      	subs	r3, r0, #0
 800977e:	da08      	bge.n	8009792 <RemoteConfig::HandleGet(void*, unsigned int)+0x5a>
 8009780:	2e0b      	cmp	r6, #11
 8009782:	4632      	mov	r2, r6
 8009784:	4628      	mov	r0, r5
 8009786:	bf28      	it	cs
 8009788:	220b      	movcs	r2, #11
 800978a:	4917      	ldr	r1, [pc, #92]	; (80097e8 <RemoteConfig::HandleGet(void*, unsigned int)+0xb0>)
 800978c:	f00a fbc8 	bl	8013f20 <memcpy>
 8009790:	e7ec      	b.n	800976c <RemoteConfig::HandleGet(void*, unsigned int)+0x34>
 8009792:	221c      	movs	r2, #28
 8009794:	4353      	muls	r3, r2
 8009796:	4915      	ldr	r1, [pc, #84]	; (80097ec <RemoteConfig::HandleGet(void*, unsigned int)+0xb4>)
 8009798:	18ca      	adds	r2, r1, r3
 800979a:	6852      	ldr	r2, [r2, #4]
 800979c:	58cb      	ldr	r3, [r1, r3]
 800979e:	ea4f 0c62 	mov.w	ip, r2, asr #1
 80097a2:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80097a6:	07d2      	lsls	r2, r2, #31
 80097a8:	bf48      	it	mi
 80097aa:	f854 200c 	ldrmi.w	r2, [r4, ip]
 80097ae:	a903      	add	r1, sp, #12
 80097b0:	bf48      	it	mi
 80097b2:	58d3      	ldrmi	r3, [r2, r3]
 80097b4:	4798      	blx	r3
 80097b6:	b95d      	cbnz	r5, 80097d0 <RemoteConfig::HandleGet(void*, unsigned int)+0x98>
 80097b8:	f642 1305 	movw	r3, #10501	; 0x2905
 80097bc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80097c0:	9300      	str	r3, [sp, #0]
 80097c2:	6839      	ldr	r1, [r7, #0]
 80097c4:	69a3      	ldr	r3, [r4, #24]
 80097c6:	7d20      	ldrb	r0, [r4, #20]
 80097c8:	f007 fa96 	bl	8010cf8 <udp_send>
 80097cc:	9803      	ldr	r0, [sp, #12]
 80097ce:	e7ce      	b.n	800976e <RemoteConfig::HandleGet(void*, unsigned int)+0x36>
 80097d0:	9a03      	ldr	r2, [sp, #12]
 80097d2:	4628      	mov	r0, r5
 80097d4:	42b2      	cmp	r2, r6
 80097d6:	bf28      	it	cs
 80097d8:	4632      	movcs	r2, r6
 80097da:	6839      	ldr	r1, [r7, #0]
 80097dc:	f00a fbab 	bl	8013f36 <memmove>
 80097e0:	e7f4      	b.n	80097cc <RemoteConfig::HandleGet(void*, unsigned int)+0x94>
 80097e2:	bf00      	nop
 80097e4:	200000ec 	andcs	r0, r0, ip, ror #1
 80097e8:	08016321 	stmdaeq	r1, {r0, r5, r8, r9, sp, lr}
 80097ec:	08016614 	stmdaeq	r1, {r2, r4, r9, sl, sp, lr}

080097f0 <RemoteConfig::HandleGetNoParams()>:
 80097f0:	2200      	movs	r2, #0
 80097f2:	4611      	mov	r1, r2
 80097f4:	f7ff bfa0 	b.w	8009738 <RemoteConfig::HandleGet(void*, unsigned int)>

080097f8 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)>:
 80097f8:	b510      	push	{r4, lr}
 80097fa:	460c      	mov	r4, r1
 80097fc:	4b07      	ldr	r3, [pc, #28]	; (800981c <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x24>)
 80097fe:	b08a      	sub	sp, #40	; 0x28
 8009800:	6819      	ldr	r1, [r3, #0]
 8009802:	a801      	add	r0, sp, #4
 8009804:	f000 fa0e 	bl	8009c24 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 8009808:	4905      	ldr	r1, [pc, #20]	; (8009820 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x28>)
 800980a:	4623      	mov	r3, r4
 800980c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009810:	6809      	ldr	r1, [r1, #0]
 8009812:	a801      	add	r0, sp, #4
 8009814:	f000 fb2a 	bl	8009e6c <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>
 8009818:	b00a      	add	sp, #40	; 0x28
 800981a:	bd10      	pop	{r4, pc}
 800981c:	200029b4 			; <UNDEFINED> instruction: 0x200029b4
 8009820:	200000ec 	andcs	r0, r0, ip, ror #1

08009824 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)>:
 8009824:	b510      	push	{r4, lr}
 8009826:	460c      	mov	r4, r1
 8009828:	4b07      	ldr	r3, [pc, #28]	; (8009848 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x24>)
 800982a:	b09a      	sub	sp, #104	; 0x68
 800982c:	6819      	ldr	r1, [r3, #0]
 800982e:	a801      	add	r0, sp, #4
 8009830:	f008 f9be 	bl	8011bb0 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 8009834:	4905      	ldr	r1, [pc, #20]	; (800984c <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x28>)
 8009836:	4623      	mov	r3, r4
 8009838:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800983c:	6809      	ldr	r1, [r1, #0]
 800983e:	a801      	add	r0, sp, #4
 8009840:	f008 fb8c 	bl	8011f5c <NetworkParams::Save(char*, unsigned int, unsigned int&)>
 8009844:	b01a      	add	sp, #104	; 0x68
 8009846:	bd10      	pop	{r4, pc}
 8009848:	200029b0 			; <UNDEFINED> instruction: 0x200029b0
 800984c:	200000ec 	andcs	r0, r0, ip, ror #1

08009850 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)>:
 8009850:	b510      	push	{r4, lr}
 8009852:	460c      	mov	r4, r1
 8009854:	4b07      	ldr	r3, [pc, #28]	; (8009874 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x24>)
 8009856:	b0a4      	sub	sp, #144	; 0x90
 8009858:	6819      	ldr	r1, [r3, #0]
 800985a:	a801      	add	r0, sp, #4
 800985c:	f002 fa9c 	bl	800bd98 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 8009860:	4905      	ldr	r1, [pc, #20]	; (8009878 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x28>)
 8009862:	4623      	mov	r3, r4
 8009864:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009868:	6809      	ldr	r1, [r1, #0]
 800986a:	a801      	add	r0, sp, #4
 800986c:	f002 fe46 	bl	800c4fc <ArtNetParams::Save(char*, unsigned int, unsigned int&)>
 8009870:	b024      	add	sp, #144	; 0x90
 8009872:	bd10      	pop	{r4, pc}
 8009874:	200029bc 			; <UNDEFINED> instruction: 0x200029bc
 8009878:	200000ec 	andcs	r0, r0, ip, ror #1

0800987c <RemoteConfig::HandleGetE131Txt(unsigned int&)>:
 800987c:	b510      	push	{r4, lr}
 800987e:	460c      	mov	r4, r1
 8009880:	4b07      	ldr	r3, [pc, #28]	; (80098a0 <RemoteConfig::HandleGetE131Txt(unsigned int&)+0x24>)
 8009882:	b08a      	sub	sp, #40	; 0x28
 8009884:	6819      	ldr	r1, [r3, #0]
 8009886:	a801      	add	r0, sp, #4
 8009888:	f003 fe6e 	bl	800d568 <E131Params::E131Params(E131ParamsStore*)>
 800988c:	4905      	ldr	r1, [pc, #20]	; (80098a4 <RemoteConfig::HandleGetE131Txt(unsigned int&)+0x28>)
 800988e:	4623      	mov	r3, r4
 8009890:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009894:	6809      	ldr	r1, [r1, #0]
 8009896:	a801      	add	r0, sp, #4
 8009898:	f004 f94e 	bl	800db38 <E131Params::Save(char*, unsigned int, unsigned int&)>
 800989c:	b00a      	add	sp, #40	; 0x28
 800989e:	bd10      	pop	{r4, pc}
 80098a0:	200029c0 	andcs	r2, r0, r0, asr #19
 80098a4:	200000ec 	andcs	r0, r0, ip, ror #1

080098a8 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)>:
 80098a8:	b510      	push	{r4, lr}
 80098aa:	460c      	mov	r4, r1
 80098ac:	4b07      	ldr	r3, [pc, #28]	; (80098cc <RemoteConfig::HandleGetDevicesTxt(unsigned int&)+0x24>)
 80098ae:	b088      	sub	sp, #32
 80098b0:	6819      	ldr	r1, [r3, #0]
 80098b2:	a801      	add	r0, sp, #4
 80098b4:	f004 fbf8 	bl	800e0a8 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>
 80098b8:	4905      	ldr	r1, [pc, #20]	; (80098d0 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)+0x28>)
 80098ba:	4623      	mov	r3, r4
 80098bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80098c0:	6809      	ldr	r1, [r1, #0]
 80098c2:	a801      	add	r0, sp, #4
 80098c4:	f004 feec 	bl	800e6a0 <PixelDmxParams::Save(char*, unsigned int, unsigned int&)>
 80098c8:	b008      	add	sp, #32
 80098ca:	bd10      	pop	{r4, pc}
 80098cc:	200029c4 	andcs	r2, r0, r4, asr #19
 80098d0:	200000ec 	andcs	r0, r0, ip, ror #1

080098d4 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)>:
 80098d4:	b510      	push	{r4, lr}
 80098d6:	460c      	mov	r4, r1
 80098d8:	4b07      	ldr	r3, [pc, #28]	; (80098f8 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x24>)
 80098da:	b08a      	sub	sp, #40	; 0x28
 80098dc:	6819      	ldr	r1, [r3, #0]
 80098de:	4668      	mov	r0, sp
 80098e0:	f009 f8d6 	bl	8012a90 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 80098e4:	4905      	ldr	r1, [pc, #20]	; (80098fc <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x28>)
 80098e6:	4623      	mov	r3, r4
 80098e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80098ec:	4668      	mov	r0, sp
 80098ee:	6809      	ldr	r1, [r1, #0]
 80098f0:	f009 fa06 	bl	8012d00 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>
 80098f4:	b00a      	add	sp, #40	; 0x28
 80098f6:	bd10      	pop	{r4, pc}
 80098f8:	200029ac 	andcs	r2, r0, ip, lsr #19
 80098fc:	200000ec 	andcs	r0, r0, ip, ror #1

08009900 <RemoteConfig::HandleSet(void*, unsigned int)>:
 8009900:	b530      	push	{r4, r5, lr}
 8009902:	b085      	sub	sp, #20
 8009904:	4604      	mov	r4, r0
 8009906:	9201      	str	r2, [sp, #4]
 8009908:	b9d1      	cbnz	r1, 8009940 <RemoteConfig::HandleSet(void*, unsigned int)+0x40>
 800990a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800990e:	9303      	str	r3, [sp, #12]
 8009910:	4b19      	ldr	r3, [pc, #100]	; (8009978 <RemoteConfig::HandleSet(void*, unsigned int)+0x78>)
 8009912:	aa03      	add	r2, sp, #12
 8009914:	6819      	ldr	r1, [r3, #0]
 8009916:	3101      	adds	r1, #1
 8009918:	f000 fb28 	bl	8009f6c <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800991c:	2800      	cmp	r0, #0
 800991e:	db0d      	blt.n	800993c <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 8009920:	221c      	movs	r2, #28
 8009922:	4b16      	ldr	r3, [pc, #88]	; (800997c <RemoteConfig::HandleSet(void*, unsigned int)+0x7c>)
 8009924:	fb02 3300 	mla	r3, r2, r0, r3
 8009928:	68da      	ldr	r2, [r3, #12]
 800992a:	689b      	ldr	r3, [r3, #8]
 800992c:	1051      	asrs	r1, r2, #1
 800992e:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8009932:	07d2      	lsls	r2, r2, #31
 8009934:	bf44      	itt	mi
 8009936:	5862      	ldrmi	r2, [r4, r1]
 8009938:	58d3      	ldrmi	r3, [r2, r3]
 800993a:	4798      	blx	r3
 800993c:	b005      	add	sp, #20
 800993e:	bd30      	pop	{r4, r5, pc}
 8009940:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009944:	d8fa      	bhi.n	800993c <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 8009946:	4b0e      	ldr	r3, [pc, #56]	; (8009980 <RemoteConfig::HandleSet(void*, unsigned int)+0x80>)
 8009948:	460d      	mov	r5, r1
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	07d9      	lsls	r1, r3, #31
 800994e:	d50b      	bpl.n	8009968 <RemoteConfig::HandleSet(void*, unsigned int)+0x68>
 8009950:	782b      	ldrb	r3, [r5, #0]
 8009952:	2b7b      	cmp	r3, #123	; 0x7b
 8009954:	d108      	bne.n	8009968 <RemoteConfig::HandleSet(void*, unsigned int)+0x68>
 8009956:	1e51      	subs	r1, r2, #1
 8009958:	4628      	mov	r0, r5
 800995a:	2200      	movs	r2, #0
 800995c:	b289      	uxth	r1, r1
 800995e:	f009 fb2d 	bl	8012fbc <properties::convert_json_file(char*, unsigned short, bool)>
 8009962:	1e02      	subs	r2, r0, #0
 8009964:	ddea      	ble.n	800993c <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 8009966:	b292      	uxth	r2, r2
 8009968:	4b03      	ldr	r3, [pc, #12]	; (8009978 <RemoteConfig::HandleSet(void*, unsigned int)+0x78>)
 800996a:	61e2      	str	r2, [r4, #28]
 800996c:	4620      	mov	r0, r4
 800996e:	601d      	str	r5, [r3, #0]
 8009970:	aa01      	add	r2, sp, #4
 8009972:	1c69      	adds	r1, r5, #1
 8009974:	e7d0      	b.n	8009918 <RemoteConfig::HandleSet(void*, unsigned int)+0x18>
 8009976:	bf00      	nop
 8009978:	200000ec 	andcs	r0, r0, ip, ror #1
 800997c:	08016614 	stmdaeq	r1, {r2, r4, r9, sl, sp, lr}
 8009980:	20009ccc 	andcs	r9, r0, ip, asr #25

08009984 <RemoteConfig::Run()>:
 8009984:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8009988:	7b05      	ldrb	r5, [r0, #12]
 800998a:	2d00      	cmp	r5, #0
 800998c:	d156      	bne.n	8009a3c <RemoteConfig::Run()+0xb8>
 800998e:	4e45      	ldr	r6, [pc, #276]	; (8009aa4 <RemoteConfig::Run()+0x120>)
 8009990:	4604      	mov	r4, r0
 8009992:	f100 0218 	add.w	r2, r0, #24
 8009996:	4631      	mov	r1, r6
 8009998:	7d00      	ldrb	r0, [r0, #20]
 800999a:	f10d 030e 	add.w	r3, sp, #14
 800999e:	f007 f985 	bl	8010cac <udp_recv2>
 80099a2:	2803      	cmp	r0, #3
 80099a4:	61e0      	str	r0, [r4, #28]
 80099a6:	d949      	bls.n	8009a3c <RemoteConfig::Run()+0xb8>
 80099a8:	6831      	ldr	r1, [r6, #0]
 80099aa:	1e43      	subs	r3, r0, #1
 80099ac:	5cca      	ldrb	r2, [r1, r3]
 80099ae:	2a0a      	cmp	r2, #10
 80099b0:	bf18      	it	ne
 80099b2:	4603      	movne	r3, r0
 80099b4:	61e3      	str	r3, [r4, #28]
 80099b6:	7808      	ldrb	r0, [r1, #0]
 80099b8:	283f      	cmp	r0, #63	; 0x3f
 80099ba:	d137      	bne.n	8009a2c <RemoteConfig::Run()+0xa8>
 80099bc:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8009aa8 <RemoteConfig::Run()+0x124>
 80099c0:	462a      	mov	r2, r5
 80099c2:	4667      	mov	r7, ip
 80099c4:	3b01      	subs	r3, #1
 80099c6:	61e3      	str	r3, [r4, #28]
 80099c8:	f89c 500e 	ldrb.w	r5, [ip, #14]
 80099cc:	f8bc 000c 	ldrh.w	r0, [ip, #12]
 80099d0:	b16d      	cbz	r5, 80099ee <RemoteConfig::Run()+0x6a>
 80099d2:	4283      	cmp	r3, r0
 80099d4:	d80d      	bhi.n	80099f2 <RemoteConfig::Run()+0x6e>
 80099d6:	3201      	adds	r2, #1
 80099d8:	2a09      	cmp	r2, #9
 80099da:	f10c 0c10 	add.w	ip, ip, #16
 80099de:	d1f3      	bne.n	80099c8 <RemoteConfig::Run()+0x44>
 80099e0:	f642 1305 	movw	r3, #10501	; 0x2905
 80099e4:	9300      	str	r3, [sp, #0]
 80099e6:	2208      	movs	r2, #8
 80099e8:	69a3      	ldr	r3, [r4, #24]
 80099ea:	4930      	ldr	r1, [pc, #192]	; (8009aac <RemoteConfig::Run()+0x128>)
 80099ec:	e04e      	b.n	8009a8c <RemoteConfig::Run()+0x108>
 80099ee:	4283      	cmp	r3, r0
 80099f0:	d1f1      	bne.n	80099d6 <RemoteConfig::Run()+0x52>
 80099f2:	460e      	mov	r6, r1
 80099f4:	f8dc 5008 	ldr.w	r5, [ip, #8]
 80099f8:	4408      	add	r0, r1
 80099fa:	3d01      	subs	r5, #1
 80099fc:	4286      	cmp	r6, r0
 80099fe:	d10b      	bne.n	8009a18 <RemoteConfig::Run()+0x94>
 8009a00:	0113      	lsls	r3, r2, #4
 8009a02:	eb07 1202 	add.w	r2, r7, r2, lsl #4
 8009a06:	6852      	ldr	r2, [r2, #4]
 8009a08:	58fb      	ldr	r3, [r7, r3]
 8009a0a:	1051      	asrs	r1, r2, #1
 8009a0c:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8009a10:	07d2      	lsls	r2, r2, #31
 8009a12:	d408      	bmi.n	8009a26 <RemoteConfig::Run()+0xa2>
 8009a14:	4798      	blx	r3
 8009a16:	e011      	b.n	8009a3c <RemoteConfig::Run()+0xb8>
 8009a18:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8009a1c:	f815 ef01 	ldrb.w	lr, [r5, #1]!
 8009a20:	45f0      	cmp	r8, lr
 8009a22:	d0eb      	beq.n	80099fc <RemoteConfig::Run()+0x78>
 8009a24:	e7d7      	b.n	80099d6 <RemoteConfig::Run()+0x52>
 8009a26:	5862      	ldr	r2, [r4, r1]
 8009a28:	58d3      	ldr	r3, [r2, r3]
 8009a2a:	e7f3      	b.n	8009a14 <RemoteConfig::Run()+0x90>
 8009a2c:	7b62      	ldrb	r2, [r4, #13]
 8009a2e:	b92a      	cbnz	r2, 8009a3c <RemoteConfig::Run()+0xb8>
 8009a30:	2823      	cmp	r0, #35	; 0x23
 8009a32:	d106      	bne.n	8009a42 <RemoteConfig::Run()+0xbe>
 8009a34:	4611      	mov	r1, r2
 8009a36:	4620      	mov	r0, r4
 8009a38:	f7ff ff62 	bl	8009900 <RemoteConfig::HandleSet(void*, unsigned int)>
 8009a3c:	b004      	add	sp, #16
 8009a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a42:	2821      	cmp	r0, #33	; 0x21
 8009a44:	d1fa      	bne.n	8009a3c <RemoteConfig::Run()+0xb8>
 8009a46:	3b01      	subs	r3, #1
 8009a48:	2b05      	cmp	r3, #5
 8009a4a:	61e3      	str	r3, [r4, #28]
 8009a4c:	d918      	bls.n	8009a80 <RemoteConfig::Run()+0xfc>
 8009a4e:	460a      	mov	r2, r1
 8009a50:	4608      	mov	r0, r1
 8009a52:	4d17      	ldr	r5, [pc, #92]	; (8009ab0 <RemoteConfig::Run()+0x12c>)
 8009a54:	f101 0c05 	add.w	ip, r1, #5
 8009a58:	4560      	cmp	r0, ip
 8009a5a:	d01b      	beq.n	8009a94 <RemoteConfig::Run()+0x110>
 8009a5c:	f815 6b01 	ldrb.w	r6, [r5], #1
 8009a60:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8009a64:	42b7      	cmp	r7, r6
 8009a66:	d0f7      	beq.n	8009a58 <RemoteConfig::Run()+0xd4>
 8009a68:	2b08      	cmp	r3, #8
 8009a6a:	d909      	bls.n	8009a80 <RemoteConfig::Run()+0xfc>
 8009a6c:	4b11      	ldr	r3, [pc, #68]	; (8009ab4 <RemoteConfig::Run()+0x130>)
 8009a6e:	3108      	adds	r1, #8
 8009a70:	428a      	cmp	r2, r1
 8009a72:	d015      	beq.n	8009aa0 <RemoteConfig::Run()+0x11c>
 8009a74:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009a78:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8009a7c:	4285      	cmp	r5, r0
 8009a7e:	d0f7      	beq.n	8009a70 <RemoteConfig::Run()+0xec>
 8009a80:	f642 1305 	movw	r3, #10501	; 0x2905
 8009a84:	2208      	movs	r2, #8
 8009a86:	9300      	str	r3, [sp, #0]
 8009a88:	69a3      	ldr	r3, [r4, #24]
 8009a8a:	490b      	ldr	r1, [pc, #44]	; (8009ab8 <RemoteConfig::Run()+0x134>)
 8009a8c:	7d20      	ldrb	r0, [r4, #20]
 8009a8e:	f007 f933 	bl	8010cf8 <udp_send>
 8009a92:	e7d3      	b.n	8009a3c <RemoteConfig::Run()+0xb8>
 8009a94:	2300      	movs	r3, #0
 8009a96:	4a09      	ldr	r2, [pc, #36]	; (8009abc <RemoteConfig::Run()+0x138>)
 8009a98:	011b      	lsls	r3, r3, #4
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	58d3      	ldr	r3, [r2, r3]
 8009a9e:	e7b9      	b.n	8009a14 <RemoteConfig::Run()+0x90>
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e7f8      	b.n	8009a96 <RemoteConfig::Run()+0x112>
 8009aa4:	200000ec 	andcs	r0, r0, ip, ror #1
 8009aa8:	080164dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, sl, sp, lr}
 8009aac:	08016345 	stmdaeq	r1, {r0, r2, r6, r8, r9, sp, lr}
 8009ab0:	0801632d 	stmdaeq	r1, {r0, r2, r3, r5, r8, r9, sp, lr}
 8009ab4:	08016333 	stmdaeq	r1, {r0, r1, r4, r5, r8, r9, sp, lr}
 8009ab8:	0801633c 	stmdaeq	r1, {r2, r3, r4, r5, r8, r9, sp, lr}
 8009abc:	0801656c 	stmdaeq	r1, {r2, r3, r5, r6, r8, sl, sp, lr}

08009ac0 <RemoteConfig::HandleSetRconfig()>:
 8009ac0:	b510      	push	{r4, lr}
 8009ac2:	4604      	mov	r4, r0
 8009ac4:	4b08      	ldr	r3, [pc, #32]	; (8009ae8 <RemoteConfig::HandleSetRconfig()+0x28>)
 8009ac6:	b08a      	sub	sp, #40	; 0x28
 8009ac8:	6819      	ldr	r1, [r3, #0]
 8009aca:	a801      	add	r0, sp, #4
 8009acc:	f000 f8aa 	bl	8009c24 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 8009ad0:	4b06      	ldr	r3, [pc, #24]	; (8009aec <RemoteConfig::HandleSetRconfig()+0x2c>)
 8009ad2:	69e2      	ldr	r2, [r4, #28]
 8009ad4:	6819      	ldr	r1, [r3, #0]
 8009ad6:	a801      	add	r0, sp, #4
 8009ad8:	f000 f8ba 	bl	8009c50 <RemoteConfigParams::Load(char const*, unsigned int)>
 8009adc:	4621      	mov	r1, r4
 8009ade:	a801      	add	r0, sp, #4
 8009ae0:	f000 f9d1 	bl	8009e86 <RemoteConfigParams::Set(RemoteConfig*)>
 8009ae4:	b00a      	add	sp, #40	; 0x28
 8009ae6:	bd10      	pop	{r4, pc}
 8009ae8:	200029b4 			; <UNDEFINED> instruction: 0x200029b4
 8009aec:	200000ec 	andcs	r0, r0, ip, ror #1

08009af0 <RemoteConfig::HandleSetNetworkTxt()>:
 8009af0:	b510      	push	{r4, lr}
 8009af2:	4604      	mov	r4, r0
 8009af4:	4b06      	ldr	r3, [pc, #24]	; (8009b10 <RemoteConfig::HandleSetNetworkTxt()+0x20>)
 8009af6:	b09a      	sub	sp, #104	; 0x68
 8009af8:	6819      	ldr	r1, [r3, #0]
 8009afa:	a801      	add	r0, sp, #4
 8009afc:	f008 f858 	bl	8011bb0 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 8009b00:	4b04      	ldr	r3, [pc, #16]	; (8009b14 <RemoteConfig::HandleSetNetworkTxt()+0x24>)
 8009b02:	69e2      	ldr	r2, [r4, #28]
 8009b04:	6819      	ldr	r1, [r3, #0]
 8009b06:	a801      	add	r0, sp, #4
 8009b08:	f008 f86a 	bl	8011be0 <NetworkParams::Load(char const*, unsigned int)>
 8009b0c:	b01a      	add	sp, #104	; 0x68
 8009b0e:	bd10      	pop	{r4, pc}
 8009b10:	200029b0 			; <UNDEFINED> instruction: 0x200029b0
 8009b14:	200000ec 	andcs	r0, r0, ip, ror #1

08009b18 <RemoteConfig::HandleSetArtnetTxt()>:
 8009b18:	b510      	push	{r4, lr}
 8009b1a:	4604      	mov	r4, r0
 8009b1c:	4b06      	ldr	r3, [pc, #24]	; (8009b38 <RemoteConfig::HandleSetArtnetTxt()+0x20>)
 8009b1e:	b0a4      	sub	sp, #144	; 0x90
 8009b20:	6819      	ldr	r1, [r3, #0]
 8009b22:	a801      	add	r0, sp, #4
 8009b24:	f002 f938 	bl	800bd98 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 8009b28:	4b04      	ldr	r3, [pc, #16]	; (8009b3c <RemoteConfig::HandleSetArtnetTxt()+0x24>)
 8009b2a:	69e2      	ldr	r2, [r4, #28]
 8009b2c:	6819      	ldr	r1, [r3, #0]
 8009b2e:	a801      	add	r0, sp, #4
 8009b30:	f002 f960 	bl	800bdf4 <ArtNetParams::Load(char const*, unsigned int)>
 8009b34:	b024      	add	sp, #144	; 0x90
 8009b36:	bd10      	pop	{r4, pc}
 8009b38:	200029bc 			; <UNDEFINED> instruction: 0x200029bc
 8009b3c:	200000ec 	andcs	r0, r0, ip, ror #1

08009b40 <RemoteConfig::HandleSetE131Txt()>:
 8009b40:	b510      	push	{r4, lr}
 8009b42:	4604      	mov	r4, r0
 8009b44:	4b06      	ldr	r3, [pc, #24]	; (8009b60 <RemoteConfig::HandleSetE131Txt()+0x20>)
 8009b46:	b08a      	sub	sp, #40	; 0x28
 8009b48:	6819      	ldr	r1, [r3, #0]
 8009b4a:	a801      	add	r0, sp, #4
 8009b4c:	f003 fd0c 	bl	800d568 <E131Params::E131Params(E131ParamsStore*)>
 8009b50:	4b04      	ldr	r3, [pc, #16]	; (8009b64 <RemoteConfig::HandleSetE131Txt()+0x24>)
 8009b52:	69e2      	ldr	r2, [r4, #28]
 8009b54:	6819      	ldr	r1, [r3, #0]
 8009b56:	a801      	add	r0, sp, #4
 8009b58:	f003 fd2a 	bl	800d5b0 <E131Params::Load(char const*, unsigned int)>
 8009b5c:	b00a      	add	sp, #40	; 0x28
 8009b5e:	bd10      	pop	{r4, pc}
 8009b60:	200029c0 	andcs	r2, r0, r0, asr #19
 8009b64:	200000ec 	andcs	r0, r0, ip, ror #1

08009b68 <RemoteConfig::HandleSetDevicesTxt()>:
 8009b68:	b510      	push	{r4, lr}
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	4b06      	ldr	r3, [pc, #24]	; (8009b88 <RemoteConfig::HandleSetDevicesTxt()+0x20>)
 8009b6e:	b088      	sub	sp, #32
 8009b70:	6819      	ldr	r1, [r3, #0]
 8009b72:	a801      	add	r0, sp, #4
 8009b74:	f004 fa98 	bl	800e0a8 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>
 8009b78:	4b04      	ldr	r3, [pc, #16]	; (8009b8c <RemoteConfig::HandleSetDevicesTxt()+0x24>)
 8009b7a:	69e2      	ldr	r2, [r4, #28]
 8009b7c:	6819      	ldr	r1, [r3, #0]
 8009b7e:	a801      	add	r0, sp, #4
 8009b80:	f004 fab4 	bl	800e0ec <PixelDmxParams::Load(char const*, unsigned int)>
 8009b84:	b008      	add	sp, #32
 8009b86:	bd10      	pop	{r4, pc}
 8009b88:	200029c4 	andcs	r2, r0, r4, asr #19
 8009b8c:	200000ec 	andcs	r0, r0, ip, ror #1

08009b90 <RemoteConfig::HandleSetDisplayTxt()>:
 8009b90:	b510      	push	{r4, lr}
 8009b92:	4604      	mov	r4, r0
 8009b94:	4b06      	ldr	r3, [pc, #24]	; (8009bb0 <RemoteConfig::HandleSetDisplayTxt()+0x20>)
 8009b96:	b08a      	sub	sp, #40	; 0x28
 8009b98:	6819      	ldr	r1, [r3, #0]
 8009b9a:	4668      	mov	r0, sp
 8009b9c:	f008 ff78 	bl	8012a90 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 8009ba0:	4b04      	ldr	r3, [pc, #16]	; (8009bb4 <RemoteConfig::HandleSetDisplayTxt()+0x24>)
 8009ba2:	4668      	mov	r0, sp
 8009ba4:	69e2      	ldr	r2, [r4, #28]
 8009ba6:	6819      	ldr	r1, [r3, #0]
 8009ba8:	f008 ff8c 	bl	8012ac4 <DisplayUdfParams::Load(char const*, unsigned int)>
 8009bac:	b00a      	add	sp, #40	; 0x28
 8009bae:	bd10      	pop	{r4, pc}
 8009bb0:	200029ac 	andcs	r2, r0, ip, lsr #19
 8009bb4:	200000ec 	andcs	r0, r0, ip, ror #1

08009bb8 <RemoteConfig::HandleFactory()>:
 8009bb8:	b538      	push	{r3, r4, r5, lr}
 8009bba:	2400      	movs	r4, #0
 8009bbc:	4d04      	ldr	r5, [pc, #16]	; (8009bd0 <RemoteConfig::HandleFactory()+0x18>)
 8009bbe:	4621      	mov	r1, r4
 8009bc0:	6828      	ldr	r0, [r5, #0]
 8009bc2:	3401      	adds	r4, #1
 8009bc4:	f006 f95c 	bl	800fe80 <SpiFlashStore::ResetSetList(spiflashstore::Store)>
 8009bc8:	2c1c      	cmp	r4, #28
 8009bca:	d1f8      	bne.n	8009bbe <RemoteConfig::HandleFactory()+0x6>
 8009bcc:	bd38      	pop	{r3, r4, r5, pc}
 8009bce:	bf00      	nop
 8009bd0:	200029a4 	andcs	r2, r0, r4, lsr #19

08009bd4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 8009bd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bd6:	460b      	mov	r3, r1
 8009bd8:	8885      	ldrh	r5, [r0, #4]
 8009bda:	88c1      	ldrh	r1, [r0, #6]
 8009bdc:	42a9      	cmp	r1, r5
 8009bde:	d214      	bcs.n	8009c0a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 8009be0:	4604      	mov	r4, r0
 8009be2:	6800      	ldr	r0, [r0, #0]
 8009be4:	1a6d      	subs	r5, r5, r1
 8009be6:	4408      	add	r0, r1
 8009be8:	7a21      	ldrb	r1, [r4, #8]
 8009bea:	b91a      	cbnz	r2, 8009bf4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 8009bec:	b919      	cbnz	r1, 8009bf6 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 8009bee:	4a0a      	ldr	r2, [pc, #40]	; (8009c18 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 8009bf0:	9100      	str	r1, [sp, #0]
 8009bf2:	e002      	b.n	8009bfa <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 8009bf4:	b159      	cbz	r1, 8009c0e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 8009bf6:	9200      	str	r2, [sp, #0]
 8009bf8:	4a08      	ldr	r2, [pc, #32]	; (8009c1c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 8009bfa:	4629      	mov	r1, r5
 8009bfc:	f7ff fa3e 	bl	800907c <snprintf>
 8009c00:	4285      	cmp	r5, r0
 8009c02:	bfa2      	ittt	ge
 8009c04:	88e3      	ldrhge	r3, [r4, #6]
 8009c06:	181b      	addge	r3, r3, r0
 8009c08:	80e3      	strhge	r3, [r4, #6]
 8009c0a:	b003      	add	sp, #12
 8009c0c:	bd30      	pop	{r4, r5, pc}
 8009c0e:	2201      	movs	r2, #1
 8009c10:	9200      	str	r2, [sp, #0]
 8009c12:	4a03      	ldr	r2, [pc, #12]	; (8009c20 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 8009c14:	e7f1      	b.n	8009bfa <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 8009c16:	bf00      	nop
 8009c18:	08016595 	stmdaeq	r1, {r0, r2, r4, r7, r8, sl, sp, lr}
 8009c1c:	0801658c 	stmdaeq	r1, {r2, r3, r7, r8, sl, sp, lr}
 8009c20:	08016596 	stmdaeq	r1, {r1, r2, r4, r7, r8, sl, sp, lr}

08009c24 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>:
 8009c24:	b510      	push	{r4, lr}
 8009c26:	4604      	mov	r4, r0
 8009c28:	2220      	movs	r2, #32
 8009c2a:	f840 1b04 	str.w	r1, [r0], #4
 8009c2e:	2100      	movs	r1, #0
 8009c30:	f00a f998 	bl	8013f64 <memset>
 8009c34:	4620      	mov	r0, r4
 8009c36:	bd10      	pop	{r4, pc}

08009c38 <RemoteConfigParams::Load()>:
 8009c38:	b508      	push	{r3, lr}
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	4601      	mov	r1, r0
 8009c3e:	6043      	str	r3, [r0, #4]
 8009c40:	6800      	ldr	r0, [r0, #0]
 8009c42:	b120      	cbz	r0, 8009c4e <RemoteConfigParams::Load()+0x16>
 8009c44:	6803      	ldr	r3, [r0, #0]
 8009c46:	3104      	adds	r1, #4
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	4798      	blx	r3
 8009c4c:	2001      	movs	r0, #1
 8009c4e:	bd08      	pop	{r3, pc}

08009c50 <RemoteConfigParams::Load(char const*, unsigned int)>:
 8009c50:	2300      	movs	r3, #0
 8009c52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c54:	460d      	mov	r5, r1
 8009c56:	4616      	mov	r6, r2
 8009c58:	4604      	mov	r4, r0
 8009c5a:	6043      	str	r3, [r0, #4]
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	490a      	ldr	r1, [pc, #40]	; (8009c88 <RemoteConfigParams::Load(char const*, unsigned int)+0x38>)
 8009c60:	4668      	mov	r0, sp
 8009c62:	f009 fafd 	bl	8013260 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8009c66:	4632      	mov	r2, r6
 8009c68:	4629      	mov	r1, r5
 8009c6a:	4668      	mov	r0, sp
 8009c6c:	f009 fafc 	bl	8013268 <ReadConfigFile::Read(char const*, unsigned int)>
 8009c70:	4621      	mov	r1, r4
 8009c72:	f851 0b04 	ldr.w	r0, [r1], #4
 8009c76:	6803      	ldr	r3, [r0, #0]
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	4798      	blx	r3
 8009c7c:	4668      	mov	r0, sp
 8009c7e:	f009 faf2 	bl	8013266 <ReadConfigFile::~ReadConfigFile()>
 8009c82:	b002      	add	sp, #8
 8009c84:	bd70      	pop	{r4, r5, r6, pc}
 8009c86:	bf00      	nop
 8009c88:	08009d49 	stmdaeq	r0, {r0, r3, r6, r8, sl, fp, ip, pc}

08009c8c <RemoteConfigParams::SetBool(unsigned char, unsigned int)>:
 8009c8c:	6843      	ldr	r3, [r0, #4]
 8009c8e:	b111      	cbz	r1, 8009c96 <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0xa>
 8009c90:	4313      	orrs	r3, r2
 8009c92:	6043      	str	r3, [r0, #4]
 8009c94:	4770      	bx	lr
 8009c96:	ea23 0302 	bic.w	r3, r3, r2
 8009c9a:	e7fa      	b.n	8009c92 <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0x6>

08009c9c <RemoteConfigParams::callbackFunction(char const*)>:
 8009c9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c9e:	460d      	mov	r5, r1
 8009ca0:	4604      	mov	r4, r0
 8009ca2:	4923      	ldr	r1, [pc, #140]	; (8009d30 <RemoteConfigParams::callbackFunction(char const*)+0x94>)
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	f10d 0203 	add.w	r2, sp, #3
 8009caa:	f009 fc15 	bl	80134d8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8009cae:	b940      	cbnz	r0, 8009cc2 <RemoteConfigParams::callbackFunction(char const*)+0x26>
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8009cb8:	b003      	add	sp, #12
 8009cba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009cbe:	f7ff bfe5 	b.w	8009c8c <RemoteConfigParams::SetBool(unsigned char, unsigned int)>
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	491b      	ldr	r1, [pc, #108]	; (8009d34 <RemoteConfigParams::callbackFunction(char const*)+0x98>)
 8009cc6:	f10d 0203 	add.w	r2, sp, #3
 8009cca:	f009 fc05 	bl	80134d8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8009cce:	b908      	cbnz	r0, 8009cd4 <RemoteConfigParams::callbackFunction(char const*)+0x38>
 8009cd0:	2202      	movs	r2, #2
 8009cd2:	e7ee      	b.n	8009cb2 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 8009cd4:	4628      	mov	r0, r5
 8009cd6:	4918      	ldr	r1, [pc, #96]	; (8009d38 <RemoteConfigParams::callbackFunction(char const*)+0x9c>)
 8009cd8:	f10d 0203 	add.w	r2, sp, #3
 8009cdc:	f009 fbfc 	bl	80134d8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8009ce0:	b908      	cbnz	r0, 8009ce6 <RemoteConfigParams::callbackFunction(char const*)+0x4a>
 8009ce2:	2204      	movs	r2, #4
 8009ce4:	e7e5      	b.n	8009cb2 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	4914      	ldr	r1, [pc, #80]	; (8009d3c <RemoteConfigParams::callbackFunction(char const*)+0xa0>)
 8009cea:	f10d 0203 	add.w	r2, sp, #3
 8009cee:	f009 fbf3 	bl	80134d8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8009cf2:	b908      	cbnz	r0, 8009cf8 <RemoteConfigParams::callbackFunction(char const*)+0x5c>
 8009cf4:	2208      	movs	r2, #8
 8009cf6:	e7dc      	b.n	8009cb2 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 8009cf8:	4628      	mov	r0, r5
 8009cfa:	4911      	ldr	r1, [pc, #68]	; (8009d40 <RemoteConfigParams::callbackFunction(char const*)+0xa4>)
 8009cfc:	f10d 0203 	add.w	r2, sp, #3
 8009d00:	f009 fbea 	bl	80134d8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8009d04:	b908      	cbnz	r0, 8009d0a <RemoteConfigParams::callbackFunction(char const*)+0x6e>
 8009d06:	2220      	movs	r2, #32
 8009d08:	e7d3      	b.n	8009cb2 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 8009d0a:	2317      	movs	r3, #23
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	9301      	str	r3, [sp, #4]
 8009d10:	490c      	ldr	r1, [pc, #48]	; (8009d44 <RemoteConfigParams::callbackFunction(char const*)+0xa8>)
 8009d12:	ab01      	add	r3, sp, #4
 8009d14:	f104 020c 	add.w	r2, r4, #12
 8009d18:	f009 fada 	bl	80132d0 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 8009d1c:	b930      	cbnz	r0, 8009d2c <RemoteConfigParams::callbackFunction(char const*)+0x90>
 8009d1e:	9b01      	ldr	r3, [sp, #4]
 8009d20:	4423      	add	r3, r4
 8009d22:	7318      	strb	r0, [r3, #12]
 8009d24:	6863      	ldr	r3, [r4, #4]
 8009d26:	f043 0310 	orr.w	r3, r3, #16
 8009d2a:	6063      	str	r3, [r4, #4]
 8009d2c:	b003      	add	sp, #12
 8009d2e:	bd30      	pop	{r4, r5, pc}
 8009d30:	080166bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r9, sl, sp, lr}
 8009d34:	080166dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r9, sl, sp, lr}
 8009d38:	080166eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r9, sl, sp, lr}
 8009d3c:	080166f9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, sl, sp, lr}
 8009d40:	08016707 	stmdaeq	r1, {r0, r1, r2, r8, r9, sl, sp, lr}
 8009d44:	080166d0 	stmdaeq	r1, {r4, r6, r7, r9, sl, sp, lr}

08009d48 <RemoteConfigParams::staticCallbackFunction(void*, char const*)>:
 8009d48:	f7ff bfa8 	b.w	8009c9c <RemoteConfigParams::callbackFunction(char const*)>

08009d4c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>:
 8009d4c:	b570      	push	{r4, r5, r6, lr}
 8009d4e:	4604      	mov	r4, r0
 8009d50:	4615      	mov	r5, r2
 8009d52:	461e      	mov	r6, r3
 8009d54:	b086      	sub	sp, #24
 8009d56:	3004      	adds	r0, #4
 8009d58:	2900      	cmp	r1, #0
 8009d5a:	d041      	beq.n	8009de0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x94>
 8009d5c:	2220      	movs	r2, #32
 8009d5e:	f00a f8ea 	bl	8013f36 <memmove>
 8009d62:	4633      	mov	r3, r6
 8009d64:	462a      	mov	r2, r5
 8009d66:	4937      	ldr	r1, [pc, #220]	; (8009e44 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf8>)
 8009d68:	a803      	add	r0, sp, #12
 8009d6a:	f009 f9d9 	bl	8013120 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 8009d6e:	6862      	ldr	r2, [r4, #4]
 8009d70:	4935      	ldr	r1, [pc, #212]	; (8009e48 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xfc>)
 8009d72:	f002 0201 	and.w	r2, r2, #1
 8009d76:	a803      	add	r0, sp, #12
 8009d78:	f7ff ff2c 	bl	8009bd4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 8009d7c:	6862      	ldr	r2, [r4, #4]
 8009d7e:	4933      	ldr	r1, [pc, #204]	; (8009e4c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x100>)
 8009d80:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8009d84:	a803      	add	r0, sp, #12
 8009d86:	f7ff ff25 	bl	8009bd4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 8009d8a:	6862      	ldr	r2, [r4, #4]
 8009d8c:	4930      	ldr	r1, [pc, #192]	; (8009e50 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x104>)
 8009d8e:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8009d92:	a803      	add	r0, sp, #12
 8009d94:	f7ff ff1e 	bl	8009bd4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 8009d98:	6862      	ldr	r2, [r4, #4]
 8009d9a:	492e      	ldr	r1, [pc, #184]	; (8009e54 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x108>)
 8009d9c:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8009da0:	a803      	add	r0, sp, #12
 8009da2:	f7ff ff17 	bl	8009bd4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 8009da6:	6862      	ldr	r2, [r4, #4]
 8009da8:	492b      	ldr	r1, [pc, #172]	; (8009e58 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x10c>)
 8009daa:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8009dae:	a803      	add	r0, sp, #12
 8009db0:	f7ff ff10 	bl	8009bd4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 8009db4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8009db8:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8009dbc:	6862      	ldr	r2, [r4, #4]
 8009dbe:	42ab      	cmp	r3, r5
 8009dc0:	d223      	bcs.n	8009e0a <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xbe>
 8009dc2:	9803      	ldr	r0, [sp, #12]
 8009dc4:	06d2      	lsls	r2, r2, #27
 8009dc6:	4418      	add	r0, r3
 8009dc8:	eba5 0503 	sub.w	r5, r5, r3
 8009dcc:	f104 040c 	add.w	r4, r4, #12
 8009dd0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8009dd4:	d40b      	bmi.n	8009dee <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa2>
 8009dd6:	b95b      	cbnz	r3, 8009df0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa4>
 8009dd8:	4b20      	ldr	r3, [pc, #128]	; (8009e5c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 8009dda:	4a21      	ldr	r2, [pc, #132]	; (8009e60 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>)
 8009ddc:	9400      	str	r4, [sp, #0]
 8009dde:	e00a      	b.n	8009df6 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xaa>
 8009de0:	6823      	ldr	r3, [r4, #0]
 8009de2:	4601      	mov	r1, r0
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	4618      	mov	r0, r3
 8009de8:	68d2      	ldr	r2, [r2, #12]
 8009dea:	4790      	blx	r2
 8009dec:	e7b9      	b.n	8009d62 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x16>
 8009dee:	b32b      	cbz	r3, 8009e3c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf0>
 8009df0:	4b1a      	ldr	r3, [pc, #104]	; (8009e5c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 8009df2:	4a1c      	ldr	r2, [pc, #112]	; (8009e64 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x118>)
 8009df4:	9400      	str	r4, [sp, #0]
 8009df6:	4629      	mov	r1, r5
 8009df8:	f7ff f940 	bl	800907c <snprintf>
 8009dfc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8009e00:	4285      	cmp	r5, r0
 8009e02:	bfa4      	itt	ge
 8009e04:	181b      	addge	r3, r3, r0
 8009e06:	f8ad 3012 	strhge.w	r3, [sp, #18]
 8009e0a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8009e0e:	b17b      	cbz	r3, 8009e30 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xe4>
 8009e10:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8009e14:	9b03      	ldr	r3, [sp, #12]
 8009e16:	4413      	add	r3, r2
 8009e18:	227d      	movs	r2, #125	; 0x7d
 8009e1a:	f803 2c01 	strb.w	r2, [r3, #-1]
 8009e1e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8009e22:	9903      	ldr	r1, [sp, #12]
 8009e24:	54ca      	strb	r2, [r1, r3]
 8009e26:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8009e30:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8009e34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e36:	601a      	str	r2, [r3, #0]
 8009e38:	b006      	add	sp, #24
 8009e3a:	bd70      	pop	{r4, r5, r6, pc}
 8009e3c:	4b07      	ldr	r3, [pc, #28]	; (8009e5c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 8009e3e:	4a0a      	ldr	r2, [pc, #40]	; (8009e68 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x11c>)
 8009e40:	9400      	str	r4, [sp, #0]
 8009e42:	e7d8      	b.n	8009df6 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xaa>
 8009e44:	080166c4 	stmdaeq	r1, {r2, r6, r7, r9, sl, sp, lr}
 8009e48:	080166bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r9, sl, sp, lr}
 8009e4c:	080166dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r9, sl, sp, lr}
 8009e50:	080166eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r9, sl, sp, lr}
 8009e54:	080166f9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, sl, sp, lr}
 8009e58:	08016707 	stmdaeq	r1, {r0, r1, r2, r8, r9, sl, sp, lr}
 8009e5c:	080166d0 	stmdaeq	r1, {r4, r6, r7, r9, sl, sp, lr}
 8009e60:	080165a8 	stmdaeq	r1, {r3, r5, r7, r8, sl, sp, lr}
 8009e64:	0801659d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, sl, sp, lr}
 8009e68:	080165a9 	stmdaeq	r1, {r0, r3, r5, r7, r8, sl, sp, lr}

08009e6c <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>:
 8009e6c:	b513      	push	{r0, r1, r4, lr}
 8009e6e:	6804      	ldr	r4, [r0, #0]
 8009e70:	b914      	cbnz	r4, 8009e78 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0xc>
 8009e72:	601c      	str	r4, [r3, #0]
 8009e74:	b002      	add	sp, #8
 8009e76:	bd10      	pop	{r4, pc}
 8009e78:	9300      	str	r3, [sp, #0]
 8009e7a:	4613      	mov	r3, r2
 8009e7c:	460a      	mov	r2, r1
 8009e7e:	2100      	movs	r1, #0
 8009e80:	f7ff ff64 	bl	8009d4c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>
 8009e84:	e7f6      	b.n	8009e74 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0x8>

08009e86 <RemoteConfigParams::Set(RemoteConfig*)>:
 8009e86:	b538      	push	{r3, r4, r5, lr}
 8009e88:	460c      	mov	r4, r1
 8009e8a:	4605      	mov	r5, r0
 8009e8c:	6841      	ldr	r1, [r0, #4]
 8009e8e:	4620      	mov	r0, r4
 8009e90:	f001 0101 	and.w	r1, r1, #1
 8009e94:	f7ff fc18 	bl	80096c8 <RemoteConfig::SetDisable(bool)>
 8009e98:	686b      	ldr	r3, [r5, #4]
 8009e9a:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8009e9e:	7362      	strb	r2, [r4, #13]
 8009ea0:	f3c3 0280 	ubfx	r2, r3, #2, #1
 8009ea4:	73a2      	strb	r2, [r4, #14]
 8009ea6:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8009eaa:	73e2      	strb	r2, [r4, #15]
 8009eac:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8009eb0:	06db      	lsls	r3, r3, #27
 8009eb2:	7422      	strb	r2, [r4, #16]
 8009eb4:	d506      	bpl.n	8009ec4 <RemoteConfigParams::Set(RemoteConfig*)+0x3e>
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	f105 010c 	add.w	r1, r5, #12
 8009ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ec0:	f7ff bc22 	b.w	8009708 <RemoteConfig::SetDisplayName(char const*)>
 8009ec4:	bd38      	pop	{r3, r4, r5, pc}

08009ec6 <RemoteConfigParams::Dump()>:
 8009ec6:	4770      	bx	lr

08009ec8 <RemoteConfig::HandleReboot()>:
 8009ec8:	7b83      	ldrb	r3, [r0, #14]
 8009eca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d03c      	beq.n	8009f4a <RemoteConfig::HandleReboot()+0x82>
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	4c1f      	ldr	r4, [pc, #124]	; (8009f50 <RemoteConfig::HandleReboot()+0x88>)
 8009ed4:	7443      	strb	r3, [r0, #17]
 8009ed6:	6825      	ldr	r5, [r4, #0]
 8009ed8:	69a8      	ldr	r0, [r5, #24]
 8009eda:	b138      	cbz	r0, 8009eec <RemoteConfig::HandleReboot()+0x24>
 8009edc:	2100      	movs	r1, #0
 8009ede:	6803      	ldr	r3, [r0, #0]
 8009ee0:	7429      	strb	r1, [r5, #16]
 8009ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ee4:	4798      	blx	r3
 8009ee6:	4b1b      	ldr	r3, [pc, #108]	; (8009f54 <RemoteConfig::HandleReboot()+0x8c>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	606b      	str	r3, [r5, #4]
 8009eec:	4d1a      	ldr	r5, [pc, #104]	; (8009f58 <RemoteConfig::HandleReboot()+0x90>)
 8009eee:	6828      	ldr	r0, [r5, #0]
 8009ef0:	f006 f84a 	bl	800ff88 <SpiFlashStore::Flash()>
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	d1fa      	bne.n	8009eee <RemoteConfig::HandleReboot()+0x26>
 8009ef8:	4b18      	ldr	r3, [pc, #96]	; (8009f5c <RemoteConfig::HandleReboot()+0x94>)
 8009efa:	6818      	ldr	r0, [r3, #0]
 8009efc:	f007 fbbc 	bl	8011678 <Network::Shutdown()>
 8009f00:	4817      	ldr	r0, [pc, #92]	; (8009f60 <RemoteConfig::HandleReboot()+0x98>)
 8009f02:	f7ff f893 	bl	800902c <printf>
 8009f06:	6823      	ldr	r3, [r4, #0]
 8009f08:	6998      	ldr	r0, [r3, #24]
 8009f0a:	b110      	cbz	r0, 8009f12 <RemoteConfig::HandleReboot()+0x4a>
 8009f0c:	6803      	ldr	r3, [r0, #0]
 8009f0e:	68db      	ldr	r3, [r3, #12]
 8009f10:	4798      	blx	r3
 8009f12:	6824      	ldr	r4, [r4, #0]
 8009f14:	4913      	ldr	r1, [pc, #76]	; (8009f64 <RemoteConfig::HandleReboot()+0x9c>)
 8009f16:	4620      	mov	r0, r4
 8009f18:	f7fe fa50 	bl	80083bc <Display::TextStatus(char const*)>
 8009f1c:	7c63      	ldrb	r3, [r4, #17]
 8009f1e:	b183      	cbz	r3, 8009f42 <RemoteConfig::HandleReboot()+0x7a>
 8009f20:	f64b 7312 	movw	r3, #48914	; 0xbf12
 8009f24:	f8ad 3004 	strh.w	r3, [sp, #4]
 8009f28:	23bf      	movs	r3, #191	; 0xbf
 8009f2a:	7a20      	ldrb	r0, [r4, #8]
 8009f2c:	f88d 3006 	strb.w	r3, [sp, #6]
 8009f30:	f00a fe9c 	bl	8014c6c <gd32_i2c_set_address>
 8009f34:	68e0      	ldr	r0, [r4, #12]
 8009f36:	f00a fe91 	bl	8014c5c <gd32_i2c_set_baudrate>
 8009f3a:	2103      	movs	r1, #3
 8009f3c:	a801      	add	r0, sp, #4
 8009f3e:	f00a fe9b 	bl	8014c78 <gd32_i2c_write>
 8009f42:	4b09      	ldr	r3, [pc, #36]	; (8009f68 <RemoteConfig::HandleReboot()+0xa0>)
 8009f44:	6818      	ldr	r0, [r3, #0]
 8009f46:	f009 fef7 	bl	8013d38 <Hardware::Reboot()>
 8009f4a:	b003      	add	sp, #12
 8009f4c:	bd30      	pop	{r4, r5, pc}
 8009f4e:	bf00      	nop
 8009f50:	20009cd0 	ldrdcs	r9, [r0], -r0
 8009f54:	20009dd4 	ldrdcs	r9, [r0], -r4
 8009f58:	200029a4 	andcs	r2, r0, r4, lsr #19
 8009f5c:	200096f8 	strdcs	r9, [r0], -r8
 8009f60:	080165b0 	stmdaeq	r1, {r4, r5, r7, r8, sl, sp, lr}
 8009f64:	080165bf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, r8, sl, sp, lr}
 8009f68:	20009dc0 	andcs	r9, r0, r0, asr #27

08009f6c <RemoteConfig::GetIndex(void const*, unsigned int&)>:
 8009f6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009f70:	2000      	movs	r0, #0
 8009f72:	4d12      	ldr	r5, [pc, #72]	; (8009fbc <RemoteConfig::GetIndex(void const*, unsigned int&)+0x50>)
 8009f74:	f10d 0c04 	add.w	ip, sp, #4
 8009f78:	6814      	ldr	r4, [r2, #0]
 8009f7a:	7d2b      	ldrb	r3, [r5, #20]
 8009f7c:	692e      	ldr	r6, [r5, #16]
 8009f7e:	42a3      	cmp	r3, r4
 8009f80:	bf34      	ite	cc
 8009f82:	4664      	movcc	r4, ip
 8009f84:	4614      	movcs	r4, r2
 8009f86:	9301      	str	r3, [sp, #4]
 8009f88:	6827      	ldr	r7, [r4, #0]
 8009f8a:	460c      	mov	r4, r1
 8009f8c:	3e01      	subs	r6, #1
 8009f8e:	440f      	add	r7, r1
 8009f90:	42bc      	cmp	r4, r7
 8009f92:	d101      	bne.n	8009f98 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x2c>
 8009f94:	6013      	str	r3, [r2, #0]
 8009f96:	e00c      	b.n	8009fb2 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x46>
 8009f98:	f894 8000 	ldrb.w	r8, [r4]
 8009f9c:	f816 ef01 	ldrb.w	lr, [r6, #1]!
 8009fa0:	45f0      	cmp	r8, lr
 8009fa2:	d009      	beq.n	8009fb8 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x4c>
 8009fa4:	3001      	adds	r0, #1
 8009fa6:	2806      	cmp	r0, #6
 8009fa8:	f105 051c 	add.w	r5, r5, #28
 8009fac:	d1e4      	bne.n	8009f78 <RemoteConfig::GetIndex(void const*, unsigned int&)+0xc>
 8009fae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fb2:	b002      	add	sp, #8
 8009fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fb8:	3401      	adds	r4, #1
 8009fba:	e7e9      	b.n	8009f90 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x24>
 8009fbc:	08016614 	stmdaeq	r1, {r2, r4, r9, sl, sp, lr}

08009fc0 <RemoteConfig::PlatformHandleTftpSet()>:
 8009fc0:	f890 1020 	ldrb.w	r1, [r0, #32]
 8009fc4:	b109      	cbz	r1, 8009fca <RemoteConfig::PlatformHandleTftpSet()+0xa>
 8009fc6:	f24a 51a5 	movw	r1, #42405	; 0xa5a5
 8009fca:	2002      	movs	r0, #2
 8009fcc:	f00a b992 	b.w	80142f4 <bkp_data_write>

08009fd0 <RemoteConfig::PlatformHandleTftpGet()>:
 8009fd0:	b510      	push	{r4, lr}
 8009fd2:	4604      	mov	r4, r0
 8009fd4:	2002      	movs	r0, #2
 8009fd6:	f00a f9a3 	bl	8014320 <bkp_data_read>
 8009fda:	f24a 53a5 	movw	r3, #42405	; 0xa5a5
 8009fde:	1ac3      	subs	r3, r0, r3
 8009fe0:	4258      	negs	r0, r3
 8009fe2:	4158      	adcs	r0, r3
 8009fe4:	f884 0020 	strb.w	r0, [r4, #32]
 8009fe8:	bd10      	pop	{r4, pc}

08009fea <ArtNet4Node::IsStatusChanged()>:
 8009fea:	4603      	mov	r3, r0
 8009fec:	f890 0ecc 	ldrb.w	r0, [r0, #3788]	; 0xecc
 8009ff0:	b110      	cbz	r0, 8009ff8 <ArtNet4Node::IsStatusChanged()+0xe>
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f883 2ecc 	strb.w	r2, [r3, #3788]	; 0xecc
 8009ff8:	4770      	bx	lr

08009ffa <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)>:
 8009ffa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ffc:	4616      	mov	r6, r2
 8009ffe:	1d07      	adds	r7, r0, #4
 800a000:	4604      	mov	r4, r0
 800a002:	4613      	mov	r3, r2
 800a004:	4638      	mov	r0, r7
 800a006:	f10d 0206 	add.w	r2, sp, #6
 800a00a:	460d      	mov	r5, r1
 800a00c:	f000 fc38 	bl	800a880 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800a010:	b1be      	cbz	r6, 800a042 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>
 800a012:	b1b0      	cbz	r0, 800a042 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>
 800a014:	2328      	movs	r3, #40	; 0x28
 800a016:	fb03 4305 	mla	r3, r3, r5, r4
 800a01a:	f8d3 3914 	ldr.w	r3, [r3, #2324]	; 0x914
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d10f      	bne.n	800a042 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>
 800a022:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
 800a026:	b123      	cbz	r3, 800a032 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x38>
 800a028:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a02c:	3301      	adds	r3, #1
 800a02e:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a032:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a036:	b933      	cbnz	r3, 800a046 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x4c>
 800a038:	2202      	movs	r2, #2
 800a03a:	4629      	mov	r1, r5
 800a03c:	4638      	mov	r0, r7
 800a03e:	f000 fc45 	bl	800a8cc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 800a042:	b003      	add	sp, #12
 800a044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a046:	1e71      	subs	r1, r6, #1
 800a048:	424a      	negs	r2, r1
 800a04a:	414a      	adcs	r2, r1
 800a04c:	f604 10d4 	addw	r0, r4, #2516	; 0x9d4
 800a050:	4629      	mov	r1, r5
 800a052:	f002 fc1f 	bl	800c894 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 800a056:	e7f4      	b.n	800a042 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>

0800a058 <ArtNet4Node::SetLedBlinkMode(ledblink::Mode)>:
 800a058:	1e8a      	subs	r2, r1, #2
 800a05a:	4253      	negs	r3, r2
 800a05c:	4153      	adcs	r3, r2
 800a05e:	f880 39dc 	strb.w	r3, [r0, #2524]	; 0x9dc
 800a062:	4b02      	ldr	r3, [pc, #8]	; (800a06c <ArtNet4Node::SetLedBlinkMode(ledblink::Mode)+0x14>)
 800a064:	6818      	ldr	r0, [r3, #0]
 800a066:	f009 bdc5 	b.w	8013bf4 <LedBlink::SetMode(ledblink::Mode)>
 800a06a:	bf00      	nop
 800a06c:	20009dbc 			; <UNDEFINED> instruction: 0x20009dbc

0800a070 <ArtNet4Node::~ArtNet4Node()>:
 800a070:	b510      	push	{r4, lr}
 800a072:	4604      	mov	r4, r0
 800a074:	4b05      	ldr	r3, [pc, #20]	; (800a08c <ArtNet4Node::~ArtNet4Node()+0x1c>)
 800a076:	6003      	str	r3, [r0, #0]
 800a078:	f600 10d4 	addw	r0, r0, #2516	; 0x9d4
 800a07c:	f002 fb86 	bl	800c78c <E131Bridge::~E131Bridge()>
 800a080:	1d20      	adds	r0, r4, #4
 800a082:	f000 f932 	bl	800a2ea <ArtNetNode::~ArtNetNode()>
 800a086:	4620      	mov	r0, r4
 800a088:	bd10      	pop	{r4, pc}
 800a08a:	bf00      	nop
 800a08c:	0801673c 	stmdaeq	r1, {r2, r3, r4, r5, r8, r9, sl, sp, lr}

0800a090 <ArtNet4Node::~ArtNet4Node()>:
 800a090:	b510      	push	{r4, lr}
 800a092:	4604      	mov	r4, r0
 800a094:	f7ff ffec 	bl	800a070 <ArtNet4Node::~ArtNet4Node()>
 800a098:	4620      	mov	r0, r4
 800a09a:	f009 fe89 	bl	8013db0 <operator delete(void*)>
 800a09e:	4620      	mov	r0, r4
 800a0a0:	bd10      	pop	{r4, pc}

0800a0a2 <ArtNet4Node::GetStatus(unsigned int)>:
 800a0a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	4604      	mov	r4, r0
 800a0a8:	f10d 0206 	add.w	r2, sp, #6
 800a0ac:	f600 10d4 	addw	r0, r0, #2516	; 0x9d4
 800a0b0:	460d      	mov	r5, r1
 800a0b2:	f002 fc67 	bl	800c984 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800a0b6:	b160      	cbz	r0, 800a0d2 <ArtNet4Node::GetStatus(unsigned int)+0x30>
 800a0b8:	2344      	movs	r3, #68	; 0x44
 800a0ba:	fb03 4405 	mla	r4, r3, r5, r4
 800a0be:	f894 0f2a 	ldrb.w	r0, [r4, #3882]	; 0xf2a
 800a0c2:	f894 3f29 	ldrb.w	r3, [r4, #3881]	; 0xf29
 800a0c6:	01c0      	lsls	r0, r0, #7
 800a0c8:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 800a0cc:	f040 0001 	orr.w	r0, r0, #1
 800a0d0:	b2c0      	uxtb	r0, r0
 800a0d2:	b003      	add	sp, #12
 800a0d4:	bd30      	pop	{r4, r5, pc}
	...

0800a0d8 <ArtNet4Node::HandleAddress(unsigned char)>:
 800a0d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0da:	4605      	mov	r5, r0
 800a0dc:	460c      	mov	r4, r1
 800a0de:	2600      	movs	r6, #0
 800a0e0:	1d07      	adds	r7, r0, #4
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	4631      	mov	r1, r6
 800a0e6:	4638      	mov	r0, r7
 800a0e8:	f10d 0206 	add.w	r2, sp, #6
 800a0ec:	f000 fbc8 	bl	800a880 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800a0f0:	b150      	cbz	r0, 800a108 <ArtNet4Node::HandleAddress(unsigned char)+0x30>
 800a0f2:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
 800a0f6:	b123      	cbz	r3, 800a102 <ArtNet4Node::HandleAddress(unsigned char)+0x2a>
 800a0f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a102:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a106:	b98b      	cbnz	r3, 800a12c <ArtNet4Node::HandleAddress(unsigned char)+0x54>
 800a108:	3601      	adds	r6, #1
 800a10a:	2e04      	cmp	r6, #4
 800a10c:	d1e9      	bne.n	800a0e2 <ArtNet4Node::HandleAddress(unsigned char)+0xa>
 800a10e:	2c13      	cmp	r4, #19
 800a110:	f004 0603 	and.w	r6, r4, #3
 800a114:	d818      	bhi.n	800a148 <ArtNet4Node::HandleAddress(unsigned char)+0x70>
 800a116:	2c0f      	cmp	r4, #15
 800a118:	d827      	bhi.n	800a16a <ArtNet4Node::HandleAddress(unsigned char)+0x92>
 800a11a:	2c02      	cmp	r4, #2
 800a11c:	d023      	beq.n	800a166 <ArtNet4Node::HandleAddress(unsigned char)+0x8e>
 800a11e:	3c03      	subs	r4, #3
 800a120:	2c01      	cmp	r4, #1
 800a122:	d81e      	bhi.n	800a162 <ArtNet4Node::HandleAddress(unsigned char)+0x8a>
 800a124:	2300      	movs	r3, #0
 800a126:	f885 39dc 	strb.w	r3, [r5, #2524]	; 0x9dc
 800a12a:	e01a      	b.n	800a162 <ArtNet4Node::HandleAddress(unsigned char)+0x8a>
 800a12c:	2228      	movs	r2, #40	; 0x28
 800a12e:	4372      	muls	r2, r6
 800a130:	f605 1114 	addw	r1, r5, #2324	; 0x914
 800a134:	588a      	ldr	r2, [r1, r2]
 800a136:	f605 10d4 	addw	r0, r5, #2516	; 0x9d4
 800a13a:	2a01      	cmp	r2, #1
 800a13c:	bf18      	it	ne
 800a13e:	2202      	movne	r2, #2
 800a140:	4631      	mov	r1, r6
 800a142:	f002 fba7 	bl	800c894 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 800a146:	e7df      	b.n	800a108 <ArtNet4Node::HandleAddress(unsigned char)+0x30>
 800a148:	2c53      	cmp	r4, #83	; 0x53
 800a14a:	d806      	bhi.n	800a15a <ArtNet4Node::HandleAddress(unsigned char)+0x82>
 800a14c:	2c4f      	cmp	r4, #79	; 0x4f
 800a14e:	d908      	bls.n	800a162 <ArtNet4Node::HandleAddress(unsigned char)+0x8a>
 800a150:	2344      	movs	r3, #68	; 0x44
 800a152:	2200      	movs	r2, #0
 800a154:	fb03 5306 	mla	r3, r3, r6, r5
 800a158:	e00b      	b.n	800a172 <ArtNet4Node::HandleAddress(unsigned char)+0x9a>
 800a15a:	3470      	adds	r4, #112	; 0x70
 800a15c:	b2e4      	uxtb	r4, r4
 800a15e:	2c03      	cmp	r4, #3
 800a160:	d90a      	bls.n	800a178 <ArtNet4Node::HandleAddress(unsigned char)+0xa0>
 800a162:	b003      	add	sp, #12
 800a164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a166:	2301      	movs	r3, #1
 800a168:	e7dd      	b.n	800a126 <ArtNet4Node::HandleAddress(unsigned char)+0x4e>
 800a16a:	2344      	movs	r3, #68	; 0x44
 800a16c:	2201      	movs	r2, #1
 800a16e:	fb03 5306 	mla	r3, r3, r6, r5
 800a172:	f8c3 2f24 	str.w	r2, [r3, #3876]	; 0xf24
 800a176:	e7f4      	b.n	800a162 <ArtNet4Node::HandleAddress(unsigned char)+0x8a>
 800a178:	2328      	movs	r3, #40	; 0x28
 800a17a:	fb03 5306 	mla	r3, r3, r6, r5
 800a17e:	f8d3 2914 	ldr.w	r2, [r3, #2324]	; 0x914
 800a182:	2a01      	cmp	r2, #1
 800a184:	d1ed      	bne.n	800a162 <ArtNet4Node::HandleAddress(unsigned char)+0x8a>
 800a186:	4b1c      	ldr	r3, [pc, #112]	; (800a1f8 <ArtNet4Node::HandleAddress(unsigned char)+0x120>)
 800a188:	2700      	movs	r7, #0
 800a18a:	6819      	ldr	r1, [r3, #0]
 800a18c:	f8d5 09d8 	ldr.w	r0, [r5, #2520]	; 0x9d8
 800a190:	07c9      	lsls	r1, r1, #31
 800a192:	bf58      	it	pl
 800a194:	601a      	strpl	r2, [r3, #0]
 800a196:	f240 6204 	movw	r2, #1540	; 0x604
 800a19a:	4372      	muls	r2, r6
 800a19c:	4b17      	ldr	r3, [pc, #92]	; (800a1fc <ArtNet4Node::HandleAddress(unsigned char)+0x124>)
 800a19e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a1a2:	441a      	add	r2, r3
 800a1a4:	4611      	mov	r1, r2
 800a1a6:	f502 7400 	add.w	r4, r2, #512	; 0x200
 800a1aa:	428c      	cmp	r4, r1
 800a1ac:	d121      	bne.n	800a1f2 <ArtNet4Node::HandleAddress(unsigned char)+0x11a>
 800a1ae:	f240 6104 	movw	r1, #1540	; 0x604
 800a1b2:	fb01 3106 	mla	r1, r1, r6, r3
 800a1b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1ba:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
 800a1be:	6801      	ldr	r1, [r0, #0]
 800a1c0:	690c      	ldr	r4, [r1, #16]
 800a1c2:	4631      	mov	r1, r6
 800a1c4:	47a0      	blx	r4
 800a1c6:	2444      	movs	r4, #68	; 0x44
 800a1c8:	fb04 5406 	mla	r4, r4, r6, r5
 800a1cc:	f894 3eea 	ldrb.w	r3, [r4, #3818]	; 0xeea
 800a1d0:	b15b      	cbz	r3, 800a1ea <ArtNet4Node::HandleAddress(unsigned char)+0x112>
 800a1d2:	f894 3f2a 	ldrb.w	r3, [r4, #3882]	; 0xf2a
 800a1d6:	b943      	cbnz	r3, 800a1ea <ArtNet4Node::HandleAddress(unsigned char)+0x112>
 800a1d8:	f8d5 09d8 	ldr.w	r0, [r5, #2520]	; 0x9d8
 800a1dc:	4631      	mov	r1, r6
 800a1de:	6803      	ldr	r3, [r0, #0]
 800a1e0:	689b      	ldr	r3, [r3, #8]
 800a1e2:	4798      	blx	r3
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	f884 3f2a 	strb.w	r3, [r4, #3882]	; 0xf2a
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	f885 3ec8 	strb.w	r3, [r5, #3784]	; 0xec8
 800a1f0:	e7b7      	b.n	800a162 <ArtNet4Node::HandleAddress(unsigned char)+0x8a>
 800a1f2:	f801 7b01 	strb.w	r7, [r1], #1
 800a1f6:	e7d8      	b.n	800a1aa <ArtNet4Node::HandleAddress(unsigned char)+0xd2>
 800a1f8:	20000118 	andcs	r0, r0, r8, lsl r1
 800a1fc:	2000011c 	andcs	r0, r0, ip, lsl r1

0800a200 <ArtNet4Node::ArtNet4Node()>:
 800a200:	b510      	push	{r4, lr}
 800a202:	4604      	mov	r4, r0
 800a204:	3004      	adds	r0, #4
 800a206:	f000 f94f 	bl	800a4a8 <ArtNetNode::ArtNetNode()>
 800a20a:	4b04      	ldr	r3, [pc, #16]	; (800a21c <ArtNet4Node::ArtNet4Node()+0x1c>)
 800a20c:	f604 10d4 	addw	r0, r4, #2516	; 0x9d4
 800a210:	6023      	str	r3, [r4, #0]
 800a212:	f002 fa53 	bl	800c6bc <E131Bridge::E131Bridge()>
 800a216:	4620      	mov	r0, r4
 800a218:	61e4      	str	r4, [r4, #28]
 800a21a:	bd10      	pop	{r4, pc}
 800a21c:	0801673c 	stmdaeq	r1, {r2, r3, r4, r5, r8, r9, sl, sp, lr}

0800a220 <ArtNet4Node::Start()>:
 800a220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a222:	4604      	mov	r4, r0
 800a224:	4606      	mov	r6, r0
 800a226:	2500      	movs	r5, #0
 800a228:	1d07      	adds	r7, r0, #4
 800a22a:	2301      	movs	r3, #1
 800a22c:	4629      	mov	r1, r5
 800a22e:	4638      	mov	r0, r7
 800a230:	f10d 0206 	add.w	r2, sp, #6
 800a234:	f000 fb24 	bl	800a880 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800a238:	b150      	cbz	r0, 800a250 <ArtNet4Node::Start()+0x30>
 800a23a:	f8d6 3914 	ldr.w	r3, [r6, #2324]	; 0x914
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d106      	bne.n	800a250 <ArtNet4Node::Start()+0x30>
 800a242:	2344      	movs	r3, #68	; 0x44
 800a244:	436b      	muls	r3, r5
 800a246:	f8d6 190c 	ldr.w	r1, [r6, #2316]	; 0x90c
 800a24a:	f604 7224 	addw	r2, r4, #3876	; 0xf24
 800a24e:	50d1      	str	r1, [r2, r3]
 800a250:	3501      	adds	r5, #1
 800a252:	2d04      	cmp	r5, #4
 800a254:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800a258:	d1e7      	bne.n	800a22a <ArtNet4Node::Start()+0xa>
 800a25a:	f894 38ec 	ldrb.w	r3, [r4, #2284]	; 0x8ec
 800a25e:	4638      	mov	r0, r7
 800a260:	f884 3ecd 	strb.w	r3, [r4, #3789]	; 0xecd
 800a264:	68a3      	ldr	r3, [r4, #8]
 800a266:	f8c4 39d8 	str.w	r3, [r4, #2520]	; 0x9d8
 800a26a:	f000 f83f 	bl	800a2ec <ArtNetNode::Start()>
 800a26e:	f604 10d4 	addw	r0, r4, #2516	; 0x9d4
 800a272:	b003      	add	sp, #12
 800a274:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a278:	f002 ba8a 	b.w	800c790 <E131Bridge::Start()>

0800a27c <ArtNet4Node::Run()>:
 800a27c:	b510      	push	{r4, lr}
 800a27e:	4604      	mov	r4, r0
 800a280:	3004      	adds	r0, #4
 800a282:	f000 fa21 	bl	800a6c8 <ArtNetNode::Run()>
 800a286:	f894 3edf 	ldrb.w	r3, [r4, #3807]	; 0xedf
 800a28a:	b12b      	cbz	r3, 800a298 <ArtNet4Node::Run()+0x1c>
 800a28c:	f604 10d4 	addw	r0, r4, #2516	; 0x9d4
 800a290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a294:	f002 be60 	b.w	800cf58 <E131Bridge::Run()>
 800a298:	bd10      	pop	{r4, pc}
	...

0800a29c <ArtNet4Node::Print()>:
 800a29c:	b510      	push	{r4, lr}
 800a29e:	4604      	mov	r4, r0
 800a2a0:	3004      	adds	r0, #4
 800a2a2:	f001 fc49 	bl	800bb38 <ArtNetNode::Print()>
 800a2a6:	f894 38ee 	ldrb.w	r3, [r4, #2286]	; 0x8ee
 800a2aa:	b15b      	cbz	r3, 800a2c4 <ArtNet4Node::Print()+0x28>
 800a2ac:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
 800a2b0:	b113      	cbz	r3, 800a2b8 <ArtNet4Node::Print()+0x1c>
 800a2b2:	4805      	ldr	r0, [pc, #20]	; (800a2c8 <ArtNet4Node::Print()+0x2c>)
 800a2b4:	f7fe feba 	bl	800902c <printf>
 800a2b8:	f604 10d4 	addw	r0, r4, #2516	; 0x9d4
 800a2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2c0:	f003 b89c 	b.w	800d3fc <E131Bridge::Print()>
 800a2c4:	bd10      	pop	{r4, pc}
 800a2c6:	bf00      	nop
 800a2c8:	08016716 	stmdaeq	r1, {r1, r2, r4, r8, r9, sl, sp, lr}

0800a2cc <strncpy.isra.0>:
 800a2cc:	3901      	subs	r1, #1
 800a2ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a2d2:	b92b      	cbnz	r3, 800a2e0 <strncpy.isra.0+0x14>
 800a2d4:	4402      	add	r2, r0
 800a2d6:	4290      	cmp	r0, r2
 800a2d8:	d006      	beq.n	800a2e8 <strncpy.isra.0+0x1c>
 800a2da:	f800 3b01 	strb.w	r3, [r0], #1
 800a2de:	e7fa      	b.n	800a2d6 <strncpy.isra.0+0xa>
 800a2e0:	3a01      	subs	r2, #1
 800a2e2:	f800 3b01 	strb.w	r3, [r0], #1
 800a2e6:	d1f2      	bne.n	800a2ce <strncpy.isra.0+0x2>
 800a2e8:	4770      	bx	lr

0800a2ea <ArtNetNode::~ArtNetNode()>:
 800a2ea:	4770      	bx	lr

0800a2ec <ArtNetNode::Start()>:
 800a2ec:	b570      	push	{r4, r5, r6, lr}
 800a2ee:	4d1d      	ldr	r5, [pc, #116]	; (800a364 <ArtNetNode::Start()+0x78>)
 800a2f0:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 800a2f4:	682a      	ldr	r2, [r5, #0]
 800a2f6:	f023 0302 	bic.w	r3, r3, #2
 800a2fa:	7951      	ldrb	r1, [r2, #5]
 800a2fc:	4604      	mov	r4, r0
 800a2fe:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800a302:	b25b      	sxtb	r3, r3
 800a304:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
 800a308:	7912      	ldrb	r2, [r2, #4]
 800a30a:	f023 0304 	bic.w	r3, r3, #4
 800a30e:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800a312:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
 800a316:	f001 f8fd 	bl	800b514 <ArtNetNode::FillPollReply()>
 800a31a:	f641 1136 	movw	r1, #6454	; 0x1936
 800a31e:	6828      	ldr	r0, [r5, #0]
 800a320:	f007 f9b2 	bl	8011688 <Network::Begin(unsigned short)>
 800a324:	2302      	movs	r3, #2
 800a326:	f884 38e1 	strb.w	r3, [r4, #2273]	; 0x8e1
 800a32a:	6923      	ldr	r3, [r4, #16]
 800a32c:	6020      	str	r0, [r4, #0]
 800a32e:	b16b      	cbz	r3, 800a34c <ArtNetNode::Start()+0x60>
 800a330:	2500      	movs	r5, #0
 800a332:	f604 1694 	addw	r6, r4, #2452	; 0x994
 800a336:	012b      	lsls	r3, r5, #4
 800a338:	5cf3      	ldrb	r3, [r6, r3]
 800a33a:	b123      	cbz	r3, 800a346 <ArtNetNode::Start()+0x5a>
 800a33c:	6920      	ldr	r0, [r4, #16]
 800a33e:	4629      	mov	r1, r5
 800a340:	6803      	ldr	r3, [r0, #0]
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	4798      	blx	r3
 800a346:	3501      	adds	r5, #1
 800a348:	2d04      	cmp	r5, #4
 800a34a:	d1f4      	bne.n	800a336 <ArtNetNode::Start()+0x4a>
 800a34c:	4b06      	ldr	r3, [pc, #24]	; (800a368 <ArtNetNode::Start()+0x7c>)
 800a34e:	2102      	movs	r1, #2
 800a350:	6818      	ldr	r0, [r3, #0]
 800a352:	f009 fc4f 	bl	8013bf4 <LedBlink::SetMode(ledblink::Mode)>
 800a356:	4620      	mov	r0, r4
 800a358:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a35c:	2100      	movs	r1, #0
 800a35e:	f001 b9b1 	b.w	800b6c4 <ArtNetNode::SendPollRelply(bool)>
 800a362:	bf00      	nop
 800a364:	200096f8 	strdcs	r9, [r0], -r8
 800a368:	20009dbc 			; <UNDEFINED> instruction: 0x20009dbc

0800a36c <ArtNetNode::Stop()>:
 800a36c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a370:	2500      	movs	r5, #0
 800a372:	4604      	mov	r4, r0
 800a374:	4606      	mov	r6, r0
 800a376:	46a9      	mov	r9, r5
 800a378:	f04f 0a01 	mov.w	sl, #1
 800a37c:	4f1f      	ldr	r7, [pc, #124]	; (800a3fc <ArtNetNode::Stop()+0x90>)
 800a37e:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800a400 <ArtNetNode::Stop()+0x94>
 800a382:	f8d6 3910 	ldr.w	r3, [r6, #2320]	; 0x910
 800a386:	b97b      	cbnz	r3, 800a3a8 <ArtNetNode::Stop()+0x3c>
 800a388:	6860      	ldr	r0, [r4, #4]
 800a38a:	b118      	cbz	r0, 800a394 <ArtNetNode::Stop()+0x28>
 800a38c:	6803      	ldr	r3, [r0, #0]
 800a38e:	4629      	mov	r1, r5
 800a390:	68db      	ldr	r3, [r3, #12]
 800a392:	4798      	blx	r3
 800a394:	f8d8 3000 	ldr.w	r3, [r8]
 800a398:	f8c7 9600 	str.w	r9, [r7, #1536]	; 0x600
 800a39c:	07db      	lsls	r3, r3, #31
 800a39e:	bf58      	it	pl
 800a3a0:	f8c8 a000 	strpl.w	sl, [r8]
 800a3a4:	f886 9915 	strb.w	r9, [r6, #2325]	; 0x915
 800a3a8:	3501      	adds	r5, #1
 800a3aa:	2d04      	cmp	r5, #4
 800a3ac:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800a3b0:	f207 6704 	addw	r7, r7, #1540	; 0x604
 800a3b4:	d1e5      	bne.n	800a382 <ArtNetNode::Stop()+0x16>
 800a3b6:	6923      	ldr	r3, [r4, #16]
 800a3b8:	b16b      	cbz	r3, 800a3d6 <ArtNetNode::Stop()+0x6a>
 800a3ba:	2500      	movs	r5, #0
 800a3bc:	f604 1694 	addw	r6, r4, #2452	; 0x994
 800a3c0:	012b      	lsls	r3, r5, #4
 800a3c2:	5cf3      	ldrb	r3, [r6, r3]
 800a3c4:	b123      	cbz	r3, 800a3d0 <ArtNetNode::Stop()+0x64>
 800a3c6:	6920      	ldr	r0, [r4, #16]
 800a3c8:	4629      	mov	r1, r5
 800a3ca:	6803      	ldr	r3, [r0, #0]
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	4798      	blx	r3
 800a3d0:	3501      	adds	r5, #1
 800a3d2:	2d04      	cmp	r5, #4
 800a3d4:	d1f4      	bne.n	800a3c0 <ArtNetNode::Stop()+0x54>
 800a3d6:	4b0b      	ldr	r3, [pc, #44]	; (800a404 <ArtNetNode::Stop()+0x98>)
 800a3d8:	2100      	movs	r1, #0
 800a3da:	6818      	ldr	r0, [r3, #0]
 800a3dc:	f009 fc0a 	bl	8013bf4 <LedBlink::SetMode(ledblink::Mode)>
 800a3e0:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
 800a3e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a3ec:	f884 308f 	strb.w	r3, [r4, #143]	; 0x8f
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	f884 38e1 	strb.w	r3, [r4, #2273]	; 0x8e1
 800a3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3fa:	bf00      	nop
 800a3fc:	2000011c 	andcs	r0, r0, ip, lsl r1
 800a400:	20000118 	andcs	r0, r0, r8, lsl r1
 800a404:	20009dbc 			; <UNDEFINED> instruction: 0x20009dbc

0800a408 <ArtNetNode::SetShortName(char const*)>:
 800a408:	b570      	push	{r4, r5, r6, lr}
 800a40a:	f100 053c 	add.w	r5, r0, #60	; 0x3c
 800a40e:	4604      	mov	r4, r0
 800a410:	2211      	movs	r2, #17
 800a412:	4628      	mov	r0, r5
 800a414:	f7ff ff5a 	bl	800a2cc <strncpy.isra.0>
 800a418:	2300      	movs	r3, #0
 800a41a:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 800a41e:	462b      	mov	r3, r5
 800a420:	f104 024e 	add.w	r2, r4, #78	; 0x4e
 800a424:	4293      	cmp	r3, r2
 800a426:	d111      	bne.n	800a44c <ArtNetNode::SetShortName(char const*)+0x44>
 800a428:	f894 38e1 	ldrb.w	r3, [r4, #2273]	; 0x8e1
 800a42c:	2b02      	cmp	r3, #2
 800a42e:	d112      	bne.n	800a456 <ArtNetNode::SetShortName(char const*)+0x4e>
 800a430:	69e0      	ldr	r0, [r4, #28]
 800a432:	b118      	cbz	r0, 800a43c <ArtNetNode::SetShortName(char const*)+0x34>
 800a434:	6803      	ldr	r3, [r0, #0]
 800a436:	4629      	mov	r1, r5
 800a438:	68db      	ldr	r3, [r3, #12]
 800a43a:	4798      	blx	r3
 800a43c:	6a20      	ldr	r0, [r4, #32]
 800a43e:	b150      	cbz	r0, 800a456 <ArtNetNode::SetShortName(char const*)+0x4e>
 800a440:	6803      	ldr	r3, [r0, #0]
 800a442:	4629      	mov	r1, r5
 800a444:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	4718      	bx	r3
 800a44c:	f813 1b01 	ldrb.w	r1, [r3], #1
 800a450:	f883 154d 	strb.w	r1, [r3, #1357]	; 0x54d
 800a454:	e7e6      	b.n	800a424 <ArtNetNode::SetShortName(char const*)+0x1c>
 800a456:	bd70      	pop	{r4, r5, r6, pc}

0800a458 <ArtNetNode::SetLongName(char const*)>:
 800a458:	b570      	push	{r4, r5, r6, lr}
 800a45a:	f100 054e 	add.w	r5, r0, #78	; 0x4e
 800a45e:	4604      	mov	r4, r0
 800a460:	223f      	movs	r2, #63	; 0x3f
 800a462:	4628      	mov	r0, r5
 800a464:	f7ff ff32 	bl	800a2cc <strncpy.isra.0>
 800a468:	2300      	movs	r3, #0
 800a46a:	f884 308d 	strb.w	r3, [r4, #141]	; 0x8d
 800a46e:	462b      	mov	r3, r5
 800a470:	f104 028e 	add.w	r2, r4, #142	; 0x8e
 800a474:	4293      	cmp	r3, r2
 800a476:	d111      	bne.n	800a49c <ArtNetNode::SetLongName(char const*)+0x44>
 800a478:	f894 38e1 	ldrb.w	r3, [r4, #2273]	; 0x8e1
 800a47c:	2b02      	cmp	r3, #2
 800a47e:	d112      	bne.n	800a4a6 <ArtNetNode::SetLongName(char const*)+0x4e>
 800a480:	69e0      	ldr	r0, [r4, #28]
 800a482:	b118      	cbz	r0, 800a48c <ArtNetNode::SetLongName(char const*)+0x34>
 800a484:	6803      	ldr	r3, [r0, #0]
 800a486:	4629      	mov	r1, r5
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	4798      	blx	r3
 800a48c:	6a20      	ldr	r0, [r4, #32]
 800a48e:	b150      	cbz	r0, 800a4a6 <ArtNetNode::SetLongName(char const*)+0x4e>
 800a490:	6803      	ldr	r3, [r0, #0]
 800a492:	4629      	mov	r1, r5
 800a494:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	4718      	bx	r3
 800a49c:	f813 1b01 	ldrb.w	r1, [r3], #1
 800a4a0:	f883 154d 	strb.w	r1, [r3, #1357]	; 0x54d
 800a4a4:	e7e6      	b.n	800a474 <ArtNetNode::SetLongName(char const*)+0x1c>
 800a4a6:	bd70      	pop	{r4, r5, r6, pc}

0800a4a8 <ArtNetNode::ArtNetNode()>:
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4b0:	4604      	mov	r4, r0
 800a4b2:	e9c0 2300 	strd	r2, r3, [r0]
 800a4b6:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800a4ba:	4a47      	ldr	r2, [pc, #284]	; (800a5d8 <ArtNetNode::ArtNetNode()+0x130>)
 800a4bc:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4c0:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800a4c4:	6010      	str	r0, [r2, #0]
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	6203      	str	r3, [r0, #32]
 800a4ca:	f8c0 3874 	str.w	r3, [r0, #2164]	; 0x874
 800a4ce:	f8c0 3878 	str.w	r3, [r0, #2168]	; 0x878
 800a4d2:	f880 387c 	strb.w	r3, [r0, #2172]	; 0x87c
 800a4d6:	f100 0224 	add.w	r2, r0, #36	; 0x24
 800a4da:	f100 019c 	add.w	r1, r0, #156	; 0x9c
 800a4de:	428a      	cmp	r2, r1
 800a4e0:	d165      	bne.n	800a5ae <ArtNetNode::ArtNetNode()+0x106>
 800a4e2:	4b3e      	ldr	r3, [pc, #248]	; (800a5dc <ArtNetNode::ArtNetNode()+0x134>)
 800a4e4:	f104 0134 	add.w	r1, r4, #52	; 0x34
 800a4e8:	6818      	ldr	r0, [r3, #0]
 800a4ea:	6943      	ldr	r3, [r0, #20]
 800a4ec:	6263      	str	r3, [r4, #36]	; 0x24
 800a4ee:	69c2      	ldr	r2, [r0, #28]
 800a4f0:	ea63 0302 	orn	r3, r3, r2
 800a4f4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a4f6:	6323      	str	r3, [r4, #48]	; 0x30
 800a4f8:	f007 f8cc 	bl	8011694 <Network::MacAddressCopyTo(unsigned char*)>
 800a4fc:	23d0      	movs	r3, #208	; 0xd0
 800a4fe:	f884 308f 	strb.w	r3, [r4, #143]	; 0x8f
 800a502:	f642 0398 	movw	r3, #10392	; 0x2898
 800a506:	2100      	movs	r1, #0
 800a508:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
 800a50c:	f504 620f 	add.w	r2, r4, #2288	; 0x8f0
 800a510:	f504 630d 	add.w	r3, r4, #2256	; 0x8d0
 800a514:	4293      	cmp	r3, r2
 800a516:	d14d      	bne.n	800a5b4 <ArtNetNode::ArtNetNode()+0x10c>
 800a518:	f240 1201 	movw	r2, #257	; 0x101
 800a51c:	2500      	movs	r5, #0
 800a51e:	2708      	movs	r7, #8
 800a520:	f8a4 28e0 	strh.w	r2, [r4, #2272]	; 0x8e0
 800a524:	f504 6119 	add.w	r1, r4, #2448	; 0x990
 800a528:	f504 661d 	add.w	r6, r4, #2512	; 0x9d0
 800a52c:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800a530:	4283      	cmp	r3, r0
 800a532:	d145      	bne.n	800a5c0 <ArtNetNode::ArtNetNode()+0x118>
 800a534:	460a      	mov	r2, r1
 800a536:	f101 0310 	add.w	r3, r1, #16
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d143      	bne.n	800a5c6 <ArtNetNode::ArtNetNode()+0x11e>
 800a53e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a540:	4296      	cmp	r6, r2
 800a542:	608b      	str	r3, [r1, #8]
 800a544:	70cf      	strb	r7, [r1, #3]
 800a546:	d138      	bne.n	800a5ba <ArtNetNode::ArtNetNode()+0x112>
 800a548:	4620      	mov	r0, r4
 800a54a:	4925      	ldr	r1, [pc, #148]	; (800a5e0 <ArtNetNode::ArtNetNode()+0x138>)
 800a54c:	f7ff ff5c 	bl	800a408 <ArtNetNode::SetShortName(char const*)>
 800a550:	4b24      	ldr	r3, [pc, #144]	; (800a5e4 <ArtNetNode::ArtNetNode()+0x13c>)
 800a552:	4d25      	ldr	r5, [pc, #148]	; (800a5e8 <ArtNetNode::ArtNetNode()+0x140>)
 800a554:	9302      	str	r3, [sp, #8]
 800a556:	2304      	movs	r3, #4
 800a558:	f604 068d 	addw	r6, r4, #2189	; 0x88d
 800a55c:	4a23      	ldr	r2, [pc, #140]	; (800a5ec <ArtNetNode::ArtNetNode()+0x144>)
 800a55e:	2140      	movs	r1, #64	; 0x40
 800a560:	9301      	str	r3, [sp, #4]
 800a562:	4630      	mov	r0, r6
 800a564:	4b22      	ldr	r3, [pc, #136]	; (800a5f0 <ArtNetNode::ArtNetNode()+0x148>)
 800a566:	9500      	str	r5, [sp, #0]
 800a568:	f7fe fd88 	bl	800907c <snprintf>
 800a56c:	4631      	mov	r1, r6
 800a56e:	4620      	mov	r0, r4
 800a570:	f7ff ff72 	bl	800a458 <ArtNetNode::SetLongName(char const*)>
 800a574:	220f      	movs	r2, #15
 800a576:	491f      	ldr	r1, [pc, #124]	; (800a5f4 <ArtNetNode::ArtNetNode()+0x14c>)
 800a578:	f604 007d 	addw	r0, r4, #2173	; 0x87d
 800a57c:	f7ff fea6 	bl	800a2cc <strncpy.isra.0>
 800a580:	2300      	movs	r3, #0
 800a582:	f204 6266 	addw	r2, r4, #1638	; 0x666
 800a586:	f884 388c 	strb.w	r3, [r4, #2188]	; 0x88c
 800a58a:	f204 635e 	addw	r3, r4, #1630	; 0x65e
 800a58e:	4293      	cmp	r3, r2
 800a590:	d11c      	bne.n	800a5cc <ArtNetNode::ArtNetNode()+0x124>
 800a592:	2300      	movs	r3, #0
 800a594:	2250      	movs	r2, #80	; 0x50
 800a596:	4620      	mov	r0, r4
 800a598:	f884 3667 	strb.w	r3, [r4, #1639]	; 0x667
 800a59c:	f884 3669 	strb.w	r3, [r4, #1641]	; 0x669
 800a5a0:	230e      	movs	r3, #14
 800a5a2:	f884 2668 	strb.w	r2, [r4, #1640]	; 0x668
 800a5a6:	f884 366a 	strb.w	r3, [r4, #1642]	; 0x66a
 800a5aa:	b005      	add	sp, #20
 800a5ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5ae:	f802 3b01 	strb.w	r3, [r2], #1
 800a5b2:	e794      	b.n	800a4de <ArtNetNode::ArtNetNode()+0x36>
 800a5b4:	f803 1b01 	strb.w	r1, [r3], #1
 800a5b8:	e7ac      	b.n	800a514 <ArtNetNode::ArtNetNode()+0x6c>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	4611      	mov	r1, r2
 800a5be:	e7b5      	b.n	800a52c <ArtNetNode::ArtNetNode()+0x84>
 800a5c0:	f803 5b01 	strb.w	r5, [r3], #1
 800a5c4:	e7b4      	b.n	800a530 <ArtNetNode::ArtNetNode()+0x88>
 800a5c6:	f802 5b01 	strb.w	r5, [r2], #1
 800a5ca:	e7b6      	b.n	800a53a <ArtNetNode::ArtNetNode()+0x92>
 800a5cc:	f815 1b01 	ldrb.w	r1, [r5], #1
 800a5d0:	f803 1f01 	strb.w	r1, [r3, #1]!
 800a5d4:	e7db      	b.n	800a58e <ArtNetNode::ArtNetNode()+0xe6>
 800a5d6:	bf00      	nop
 800a5d8:	2000192c 	andcs	r1, r0, ip, lsr #18
 800a5dc:	200096f8 	strdcs	r9, [r0], -r8
 800a5e0:	080167ca 	stmdaeq	r1, {r1, r3, r6, r7, r8, r9, sl, sp, lr}
 800a5e4:	080167a4 	stmdaeq	r1, {r2, r5, r7, r8, r9, sl, sp, lr}
 800a5e8:	080167c2 	stmdaeq	r1, {r1, r6, r7, r8, r9, sl, sp, lr}
 800a5ec:	08016798 	stmdaeq	r1, {r3, r4, r7, r8, r9, sl, sp, lr}
 800a5f0:	0801678d 	stmdaeq	r1, {r0, r2, r3, r7, r8, r9, sl, sp, lr}
 800a5f4:	080167b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r8, r9, sl, sp, lr}

0800a5f8 <ArtNetNode::SetNetworkDataLossCondition()>:
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	b4f0      	push	{r4, r5, r6, r7}
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	f880 38e6 	strb.w	r3, [r0, #2278]	; 0x8e6
 800a602:	f880 38e5 	strb.w	r3, [r0, #2277]	; 0x8e5
 800a606:	4603      	mov	r3, r0
 800a608:	f100 04a0 	add.w	r4, r0, #160	; 0xa0
 800a60c:	f8d2 18fc 	ldr.w	r1, [r2, #2300]	; 0x8fc
 800a610:	f8d2 5904 	ldr.w	r5, [r2, #2308]	; 0x904
 800a614:	42e9      	cmn	r1, r5
 800a616:	d104      	bne.n	800a622 <ArtNetNode::SetNetworkDataLossCondition()+0x2a>
 800a618:	3228      	adds	r2, #40	; 0x28
 800a61a:	42a2      	cmp	r2, r4
 800a61c:	d1f6      	bne.n	800a60c <ArtNetNode::SetNetworkDataLossCondition()+0x14>
 800a61e:	bcf0      	pop	{r4, r5, r6, r7}
 800a620:	4770      	bx	lr
 800a622:	2100      	movs	r1, #0
 800a624:	2601      	movs	r6, #1
 800a626:	4a12      	ldr	r2, [pc, #72]	; (800a670 <ArtNetNode::SetNetworkDataLossCondition()+0x78>)
 800a628:	4d12      	ldr	r5, [pc, #72]	; (800a674 <ArtNetNode::SetNetworkDataLossCondition()+0x7c>)
 800a62a:	f8c3 18fc 	str.w	r1, [r3, #2300]	; 0x8fc
 800a62e:	f8c3 1904 	str.w	r1, [r3, #2308]	; 0x904
 800a632:	682f      	ldr	r7, [r5, #0]
 800a634:	3328      	adds	r3, #40	; 0x28
 800a636:	07ff      	lsls	r7, r7, #31
 800a638:	bf58      	it	pl
 800a63a:	602e      	strpl	r6, [r5, #0]
 800a63c:	42a3      	cmp	r3, r4
 800a63e:	f8c2 1600 	str.w	r1, [r2, #1536]	; 0x600
 800a642:	f202 6204 	addw	r2, r2, #1540	; 0x604
 800a646:	d1f0      	bne.n	800a62a <ArtNetNode::SetNetworkDataLossCondition()+0x32>
 800a648:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
 800a64c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a650:	2b40      	cmp	r3, #64	; 0x40
 800a652:	d007      	beq.n	800a664 <ArtNetNode::SetNetworkDataLossCondition()+0x6c>
 800a654:	d9e3      	bls.n	800a61e <ArtNetNode::SetNetworkDataLossCondition()+0x26>
 800a656:	2b80      	cmp	r3, #128	; 0x80
 800a658:	d1e1      	bne.n	800a61e <ArtNetNode::SetNetworkDataLossCondition()+0x26>
 800a65a:	bcf0      	pop	{r4, r5, r6, r7}
 800a65c:	6840      	ldr	r0, [r0, #4]
 800a65e:	6803      	ldr	r3, [r0, #0]
 800a660:	699b      	ldr	r3, [r3, #24]
 800a662:	4718      	bx	r3
 800a664:	6840      	ldr	r0, [r0, #4]
 800a666:	2101      	movs	r1, #1
 800a668:	bcf0      	pop	{r4, r5, r6, r7}
 800a66a:	6803      	ldr	r3, [r0, #0]
 800a66c:	695b      	ldr	r3, [r3, #20]
 800a66e:	4718      	bx	r3
 800a670:	2000011c 	andcs	r0, r0, ip, lsl r1
 800a674:	20000118 	andcs	r0, r0, r8, lsl r1

0800a678 <ArtNetNode::GetType()>:
 800a678:	f8b0 356c 	ldrh.w	r3, [r0, #1388]	; 0x56c
 800a67c:	b530      	push	{r4, r5, lr}
 800a67e:	2b0b      	cmp	r3, #11
 800a680:	d91d      	bls.n	800a6be <ArtNetNode::GetType()+0x46>
 800a682:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 800a686:	b9d3      	cbnz	r3, 800a6be <ArtNetNode::GetType()+0x46>
 800a688:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
 800a68c:	2a0e      	cmp	r2, #14
 800a68e:	d10d      	bne.n	800a6ac <ArtNetNode::GetType()+0x34>
 800a690:	4a0c      	ldr	r2, [pc, #48]	; (800a6c4 <ArtNetNode::GetType()+0x4c>)
 800a692:	f100 039b 	add.w	r3, r0, #155	; 0x9b
 800a696:	f100 01a3 	add.w	r1, r0, #163	; 0xa3
 800a69a:	428b      	cmp	r3, r1
 800a69c:	d109      	bne.n	800a6b2 <ArtNetNode::GetType()+0x3a>
 800a69e:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
 800a6a2:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 800a6a6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	f8a0 356e 	strh.w	r3, [r0, #1390]	; 0x56e
 800a6b0:	bd30      	pop	{r4, r5, pc}
 800a6b2:	f812 4b01 	ldrb.w	r4, [r2], #1
 800a6b6:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 800a6ba:	42a5      	cmp	r5, r4
 800a6bc:	d0ed      	beq.n	800a69a <ArtNetNode::GetType()+0x22>
 800a6be:	2300      	movs	r3, #0
 800a6c0:	e7f4      	b.n	800a6ac <ArtNetNode::GetType()+0x34>
 800a6c2:	bf00      	nop
 800a6c4:	08016080 	stmdaeq	r1, {r7, sp, lr}

0800a6c8 <ArtNetNode::Run()>:
 800a6c8:	b530      	push	{r4, r5, lr}
 800a6ca:	4601      	mov	r1, r0
 800a6cc:	4604      	mov	r4, r0
 800a6ce:	b085      	sub	sp, #20
 800a6d0:	f10d 030e 	add.w	r3, sp, #14
 800a6d4:	f811 0b9c 	ldrb.w	r0, [r1], #156
 800a6d8:	f240 42cc 	movw	r2, #1228	; 0x4cc
 800a6dc:	9300      	str	r3, [sp, #0]
 800a6de:	f504 63ad 	add.w	r3, r4, #1384	; 0x568
 800a6e2:	f006 faad 	bl	8010c40 <udp_recv>
 800a6e6:	4b64      	ldr	r3, [pc, #400]	; (800a878 <ArtNetNode::Run()+0x1b0>)
 800a6e8:	681d      	ldr	r5, [r3, #0]
 800a6ea:	f8c4 5874 	str.w	r5, [r4, #2164]	; 0x874
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	d142      	bne.n	800a778 <ArtNetNode::Run()+0xb0>
 800a6f2:	f8d4 3878 	ldr.w	r3, [r4, #2168]	; 0x878
 800a6f6:	1aed      	subs	r5, r5, r3
 800a6f8:	f242 730f 	movw	r3, #9999	; 0x270f
 800a6fc:	429d      	cmp	r5, r3
 800a6fe:	d902      	bls.n	800a706 <ArtNetNode::Run()+0x3e>
 800a700:	4620      	mov	r0, r4
 800a702:	f7ff ff79 	bl	800a5f8 <ArtNetNode::SetNetworkDataLossCondition()>
 800a706:	f894 38e2 	ldrb.w	r3, [r4, #2274]	; 0x8e2
 800a70a:	b15b      	cbz	r3, 800a724 <ArtNetNode::Run()+0x5c>
 800a70c:	69a0      	ldr	r0, [r4, #24]
 800a70e:	f894 58e7 	ldrb.w	r5, [r4, #2279]	; 0x8e7
 800a712:	6803      	ldr	r3, [r0, #0]
 800a714:	695b      	ldr	r3, [r3, #20]
 800a716:	4798      	blx	r3
 800a718:	b905      	cbnz	r5, 800a71c <ArtNetNode::Run()+0x54>
 800a71a:	b118      	cbz	r0, 800a724 <ArtNetNode::Run()+0x5c>
 800a71c:	2100      	movs	r1, #0
 800a71e:	4620      	mov	r0, r4
 800a720:	f000 ffd0 	bl	800b6c4 <ArtNetNode::SendPollRelply(bool)>
 800a724:	f8d4 3874 	ldr.w	r3, [r4, #2164]	; 0x874
 800a728:	f8d4 2878 	ldr.w	r2, [r4, #2168]	; 0x878
 800a72c:	1a9b      	subs	r3, r3, r2
 800a72e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a732:	d305      	bcc.n	800a740 <ArtNetNode::Run()+0x78>
 800a734:	f894 38e9 	ldrb.w	r3, [r4, #2281]	; 0x8e9
 800a738:	f023 0302 	bic.w	r3, r3, #2
 800a73c:	f884 38e9 	strb.w	r3, [r4, #2281]	; 0x8e9
 800a740:	6923      	ldr	r3, [r4, #16]
 800a742:	b113      	cbz	r3, 800a74a <ArtNetNode::Run()+0x82>
 800a744:	4620      	mov	r0, r4
 800a746:	f000 fd87 	bl	800b258 <ArtNetNode::HandleDmxIn()>
 800a74a:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
 800a74e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a752:	2bc0      	cmp	r3, #192	; 0xc0
 800a754:	d10e      	bne.n	800a774 <ArtNetNode::Run()+0xac>
 800a756:	4b49      	ldr	r3, [pc, #292]	; (800a87c <ArtNetNode::Run()+0x1b4>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	2b04      	cmp	r3, #4
 800a75e:	d009      	beq.n	800a774 <ArtNetNode::Run()+0xac>
 800a760:	69a0      	ldr	r0, [r4, #24]
 800a762:	f894 28e9 	ldrb.w	r2, [r4, #2281]	; 0x8e9
 800a766:	6803      	ldr	r3, [r0, #0]
 800a768:	699b      	ldr	r3, [r3, #24]
 800a76a:	2a00      	cmp	r2, #0
 800a76c:	f000 8081 	beq.w	800a872 <ArtNetNode::Run()+0x1aa>
 800a770:	2103      	movs	r1, #3
 800a772:	4798      	blx	r3
 800a774:	b005      	add	sp, #20
 800a776:	bd30      	pop	{r4, r5, pc}
 800a778:	f8a4 056c 	strh.w	r0, [r4, #1388]	; 0x56c
 800a77c:	f8c4 5878 	str.w	r5, [r4, #2168]	; 0x878
 800a780:	4620      	mov	r0, r4
 800a782:	f7ff ff79 	bl	800a678 <ArtNetNode::GetType()>
 800a786:	f894 38e5 	ldrb.w	r3, [r4, #2277]	; 0x8e5
 800a78a:	b143      	cbz	r3, 800a79e <ArtNetNode::Run()+0xd6>
 800a78c:	f8d4 38dc 	ldr.w	r3, [r4, #2268]	; 0x8dc
 800a790:	1aed      	subs	r5, r5, r3
 800a792:	f5b5 6f7a 	cmp.w	r5, #4000	; 0xfa0
 800a796:	bf24      	itt	cs
 800a798:	2300      	movcs	r3, #0
 800a79a:	f884 38e5 	strbcs.w	r3, [r4, #2277]	; 0x8e5
 800a79e:	f8b4 356e 	ldrh.w	r3, [r4, #1390]	; 0x56e
 800a7a2:	f5b3 4f02 	cmp.w	r3, #33280	; 0x8200
 800a7a6:	d04c      	beq.n	800a842 <ArtNetNode::Run()+0x17a>
 800a7a8:	d81d      	bhi.n	800a7e6 <ArtNetNode::Run()+0x11e>
 800a7aa:	f5b3 4fa4 	cmp.w	r3, #20992	; 0x5200
 800a7ae:	d039      	beq.n	800a824 <ArtNetNode::Run()+0x15c>
 800a7b0:	d80c      	bhi.n	800a7cc <ArtNetNode::Run()+0x104>
 800a7b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7b6:	d031      	beq.n	800a81c <ArtNetNode::Run()+0x154>
 800a7b8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a7bc:	d1c0      	bne.n	800a740 <ArtNetNode::Run()+0x78>
 800a7be:	6863      	ldr	r3, [r4, #4]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d0bd      	beq.n	800a740 <ArtNetNode::Run()+0x78>
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	f000 fc60 	bl	800b08a <ArtNetNode::HandleDmx()>
 800a7ca:	e7b9      	b.n	800a740 <ArtNetNode::Run()+0x78>
 800a7cc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a7d0:	d02f      	beq.n	800a832 <ArtNetNode::Run()+0x16a>
 800a7d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7d6:	d1b3      	bne.n	800a740 <ArtNetNode::Run()+0x78>
 800a7d8:	68e3      	ldr	r3, [r4, #12]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d0b0      	beq.n	800a740 <ArtNetNode::Run()+0x78>
 800a7de:	4620      	mov	r0, r4
 800a7e0:	f001 f8ac 	bl	800b93c <ArtNetNode::HandleTodRequest()>
 800a7e4:	e7ac      	b.n	800a740 <ArtNetNode::Run()+0x78>
 800a7e6:	f5b3 4f18 	cmp.w	r3, #38912	; 0x9800
 800a7ea:	d026      	beq.n	800a83a <ArtNetNode::Run()+0x172>
 800a7ec:	d80c      	bhi.n	800a808 <ArtNetNode::Run()+0x140>
 800a7ee:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 800a7f2:	d02e      	beq.n	800a852 <ArtNetNode::Run()+0x18a>
 800a7f4:	f5b3 4f17 	cmp.w	r3, #38656	; 0x9700
 800a7f8:	d1a2      	bne.n	800a740 <ArtNetNode::Run()+0x78>
 800a7fa:	68a3      	ldr	r3, [r4, #8]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d09f      	beq.n	800a740 <ArtNetNode::Run()+0x78>
 800a800:	4620      	mov	r0, r4
 800a802:	f001 f971 	bl	800bae8 <ArtNetNode::HandleTimeCode()>
 800a806:	e79b      	b.n	800a740 <ArtNetNode::Run()+0x78>
 800a808:	f5b3 4f19 	cmp.w	r3, #39168	; 0x9900
 800a80c:	d029      	beq.n	800a862 <ArtNetNode::Run()+0x19a>
 800a80e:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 800a812:	d195      	bne.n	800a740 <ArtNetNode::Run()+0x78>
 800a814:	4620      	mov	r0, r4
 800a816:	f000 fdb7 	bl	800b388 <ArtNetNode::HandleIpProg()>
 800a81a:	e791      	b.n	800a740 <ArtNetNode::Run()+0x78>
 800a81c:	4620      	mov	r0, r4
 800a81e:	f000 ff9d 	bl	800b75c <ArtNetNode::HandlePoll()>
 800a822:	e78d      	b.n	800a740 <ArtNetNode::Run()+0x78>
 800a824:	6863      	ldr	r3, [r4, #4]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d08a      	beq.n	800a740 <ArtNetNode::Run()+0x78>
 800a82a:	4620      	mov	r0, r4
 800a82c:	f001 f912 	bl	800ba54 <ArtNetNode::HandleSync()>
 800a830:	e786      	b.n	800a740 <ArtNetNode::Run()+0x78>
 800a832:	4620      	mov	r0, r4
 800a834:	f000 fa08 	bl	800ac48 <ArtNetNode::HandleAddress()>
 800a838:	e782      	b.n	800a740 <ArtNetNode::Run()+0x78>
 800a83a:	4620      	mov	r0, r4
 800a83c:	f001 f95a 	bl	800baf4 <ArtNetNode::HandleTimeSync()>
 800a840:	e77e      	b.n	800a740 <ArtNetNode::Run()+0x78>
 800a842:	68e3      	ldr	r3, [r4, #12]
 800a844:	2b00      	cmp	r3, #0
 800a846:	f43f af7b 	beq.w	800a740 <ArtNetNode::Run()+0x78>
 800a84a:	4620      	mov	r0, r4
 800a84c:	f001 f839 	bl	800b8c2 <ArtNetNode::HandleTodControl()>
 800a850:	e776      	b.n	800a740 <ArtNetNode::Run()+0x78>
 800a852:	68e3      	ldr	r3, [r4, #12]
 800a854:	2b00      	cmp	r3, #0
 800a856:	f43f af73 	beq.w	800a740 <ArtNetNode::Run()+0x78>
 800a85a:	4620      	mov	r0, r4
 800a85c:	f001 f88c 	bl	800b978 <ArtNetNode::HandleRdm()>
 800a860:	e76e      	b.n	800a740 <ArtNetNode::Run()+0x78>
 800a862:	6963      	ldr	r3, [r4, #20]
 800a864:	2b00      	cmp	r3, #0
 800a866:	f43f af6b 	beq.w	800a740 <ArtNetNode::Run()+0x78>
 800a86a:	4620      	mov	r0, r4
 800a86c:	f001 fee8 	bl	800c640 <ArtNetNode::HandleTrigger()>
 800a870:	e766      	b.n	800a740 <ArtNetNode::Run()+0x78>
 800a872:	2102      	movs	r1, #2
 800a874:	e77d      	b.n	800a772 <ArtNetNode::Run()+0xaa>
 800a876:	bf00      	nop
 800a878:	20009dd4 	ldrdcs	r9, [r0], -r4
 800a87c:	20009dbc 			; <UNDEFINED> instruction: 0x20009dbc

0800a880 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>:
 800a880:	b93b      	cbnz	r3, 800a892 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const+0x12>
 800a882:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800a886:	f8b0 3990 	ldrh.w	r3, [r0, #2448]	; 0x990
 800a88a:	8013      	strh	r3, [r2, #0]
 800a88c:	f890 0994 	ldrb.w	r0, [r0, #2452]	; 0x994
 800a890:	4770      	bx	lr
 800a892:	2b01      	cmp	r3, #1
 800a894:	bf01      	itttt	eq
 800a896:	2328      	moveq	r3, #40	; 0x28
 800a898:	fb03 0001 	mlaeq	r0, r3, r1, r0
 800a89c:	f8b0 38f0 	ldrheq.w	r3, [r0, #2288]	; 0x8f0
 800a8a0:	f890 08f4 	ldrbeq.w	r0, [r0, #2292]	; 0x8f4
 800a8a4:	bf0c      	ite	eq
 800a8a6:	8013      	strheq	r3, [r2, #0]
 800a8a8:	2000      	movne	r0, #0
 800a8aa:	4770      	bx	lr

0800a8ac <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>:
 800a8ac:	4402      	add	r2, r0
 800a8ae:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
 800a8b2:	f892 203b 	ldrb.w	r2, [r2, #59]	; 0x3b
 800a8b6:	021b      	lsls	r3, r3, #8
 800a8b8:	0112      	lsls	r2, r2, #4
 800a8ba:	b2d2      	uxtb	r2, r2
 800a8bc:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	f001 010f 	and.w	r1, r1, #15
 800a8c6:	ea43 0001 	orr.w	r0, r3, r1
 800a8ca:	4770      	bx	lr

0800a8cc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>:
 800a8cc:	2903      	cmp	r1, #3
 800a8ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8d2:	4604      	mov	r4, r0
 800a8d4:	460d      	mov	r5, r1
 800a8d6:	4617      	mov	r7, r2
 800a8d8:	461e      	mov	r6, r3
 800a8da:	f200 80a3 	bhi.w	800aa24 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x158>
 800a8de:	2a02      	cmp	r2, #2
 800a8e0:	d121      	bne.n	800a926 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x5a>
 800a8e2:	2328      	movs	r3, #40	; 0x28
 800a8e4:	fb03 0301 	mla	r3, r3, r1, r0
 800a8e8:	f893 28f4 	ldrb.w	r2, [r3, #2292]	; 0x8f4
 800a8ec:	b13a      	cbz	r2, 800a8fe <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x32>
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
 800a8f4:	f890 38ea 	ldrb.w	r3, [r0, #2282]	; 0x8ea
 800a8f8:	3b01      	subs	r3, #1
 800a8fa:	f880 38ea 	strb.w	r3, [r0, #2282]	; 0x8ea
 800a8fe:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 800a902:	f895 3994 	ldrb.w	r3, [r5, #2452]	; 0x994
 800a906:	b90b      	cbnz	r3, 800a90c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x40>
 800a908:	2000      	movs	r0, #0
 800a90a:	e00a      	b.n	800a922 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x56>
 800a90c:	2308      	movs	r3, #8
 800a90e:	2000      	movs	r0, #0
 800a910:	f885 3993 	strb.w	r3, [r5, #2451]	; 0x993
 800a914:	f885 0994 	strb.w	r0, [r5, #2452]	; 0x994
 800a918:	f894 38eb 	ldrb.w	r3, [r4, #2283]	; 0x8eb
 800a91c:	3b01      	subs	r3, #1
 800a91e:	f884 38eb 	strb.w	r3, [r4, #2283]	; 0x8eb
 800a922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a926:	2a00      	cmp	r2, #0
 800a928:	d13b      	bne.n	800a9a2 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xd6>
 800a92a:	eb00 1801 	add.w	r8, r0, r1, lsl #4
 800a92e:	f898 3994 	ldrb.w	r3, [r8, #2452]	; 0x994
 800a932:	b923      	cbnz	r3, 800a93e <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x72>
 800a934:	f890 38eb 	ldrb.w	r3, [r0, #2283]	; 0x8eb
 800a938:	3301      	adds	r3, #1
 800a93a:	f880 38eb 	strb.w	r3, [r0, #2283]	; 0x8eb
 800a93e:	2301      	movs	r3, #1
 800a940:	f04f 0900 	mov.w	r9, #0
 800a944:	f888 3994 	strb.w	r3, [r8, #2452]	; 0x994
 800a948:	f006 030f 	and.w	r3, r6, #15
 800a94c:	464a      	mov	r2, r9
 800a94e:	f888 3992 	strb.w	r3, [r8, #2450]	; 0x992
 800a952:	4631      	mov	r1, r6
 800a954:	4620      	mov	r0, r4
 800a956:	f888 9993 	strb.w	r9, [r8, #2451]	; 0x993
 800a95a:	f7ff ffa7 	bl	800a8ac <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800a95e:	2328      	movs	r3, #40	; 0x28
 800a960:	fb03 4305 	mla	r3, r3, r5, r4
 800a964:	f8a8 0990 	strh.w	r0, [r8, #2448]	; 0x990
 800a968:	f893 28f4 	ldrb.w	r2, [r3, #2292]	; 0x8f4
 800a96c:	b132      	cbz	r2, 800a97c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 800a96e:	f883 98f4 	strb.w	r9, [r3, #2292]	; 0x8f4
 800a972:	f894 38ea 	ldrb.w	r3, [r4, #2282]	; 0x8ea
 800a976:	3b01      	subs	r3, #1
 800a978:	f884 38ea 	strb.w	r3, [r4, #2282]	; 0x8ea
 800a97c:	69a0      	ldr	r0, [r4, #24]
 800a97e:	f894 38e1 	ldrb.w	r3, [r4, #2273]	; 0x8e1
 800a982:	2800      	cmp	r0, #0
 800a984:	d042      	beq.n	800aa0c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x140>
 800a986:	2b02      	cmp	r3, #2
 800a988:	d13b      	bne.n	800aa02 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x136>
 800a98a:	69e0      	ldr	r0, [r4, #28]
 800a98c:	2800      	cmp	r0, #0
 800a98e:	d143      	bne.n	800aa18 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x14c>
 800a990:	6a20      	ldr	r0, [r4, #32]
 800a992:	2800      	cmp	r0, #0
 800a994:	d0b8      	beq.n	800a908 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 800a996:	6803      	ldr	r3, [r0, #0]
 800a998:	4632      	mov	r2, r6
 800a99a:	4629      	mov	r1, r5
 800a99c:	691b      	ldr	r3, [r3, #16]
 800a99e:	4798      	blx	r3
 800a9a0:	e7b2      	b.n	800a908 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 800a9a2:	2a01      	cmp	r2, #1
 800a9a4:	d1ea      	bne.n	800a97c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 800a9a6:	f04f 0828 	mov.w	r8, #40	; 0x28
 800a9aa:	fb08 0301 	mla	r3, r8, r1, r0
 800a9ae:	f893 38f4 	ldrb.w	r3, [r3, #2292]	; 0x8f4
 800a9b2:	b923      	cbnz	r3, 800a9be <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xf2>
 800a9b4:	f890 38ea 	ldrb.w	r3, [r0, #2282]	; 0x8ea
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	f880 38ea 	strb.w	r3, [r0, #2282]	; 0x8ea
 800a9be:	2301      	movs	r3, #1
 800a9c0:	fb08 4805 	mla	r8, r8, r5, r4
 800a9c4:	f888 38f4 	strb.w	r3, [r8, #2292]	; 0x8f4
 800a9c8:	f006 030f 	and.w	r3, r6, #15
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	f888 38f2 	strb.w	r3, [r8, #2290]	; 0x8f2
 800a9d2:	4631      	mov	r1, r6
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	f7ff ff69 	bl	800a8ac <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800a9da:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 800a9de:	f8a8 08f0 	strh.w	r0, [r8, #2288]	; 0x8f0
 800a9e2:	f893 2994 	ldrb.w	r2, [r3, #2452]	; 0x994
 800a9e6:	2a00      	cmp	r2, #0
 800a9e8:	d0c8      	beq.n	800a97c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f883 2994 	strb.w	r2, [r3, #2452]	; 0x994
 800a9f0:	2208      	movs	r2, #8
 800a9f2:	f883 2993 	strb.w	r2, [r3, #2451]	; 0x993
 800a9f6:	f894 38eb 	ldrb.w	r3, [r4, #2283]	; 0x8eb
 800a9fa:	3b01      	subs	r3, #1
 800a9fc:	f884 38eb 	strb.w	r3, [r4, #2283]	; 0x8eb
 800aa00:	e7bc      	b.n	800a97c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 800aa02:	6803      	ldr	r3, [r0, #0]
 800aa04:	463a      	mov	r2, r7
 800aa06:	4629      	mov	r1, r5
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	4798      	blx	r3
 800aa0c:	f894 38e1 	ldrb.w	r3, [r4, #2273]	; 0x8e1
 800aa10:	2b02      	cmp	r3, #2
 800aa12:	f47f af79 	bne.w	800a908 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 800aa16:	e7b8      	b.n	800a98a <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xbe>
 800aa18:	6803      	ldr	r3, [r0, #0]
 800aa1a:	4632      	mov	r2, r6
 800aa1c:	4629      	mov	r1, r5
 800aa1e:	695b      	ldr	r3, [r3, #20]
 800aa20:	4798      	blx	r3
 800aa22:	e7b5      	b.n	800a990 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xc4>
 800aa24:	f06f 0004 	mvn.w	r0, #4
 800aa28:	e77b      	b.n	800a922 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x56>

0800aa2a <ArtNetNode::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
 800aa2a:	b430      	push	{r4, r5}
 800aa2c:	eb00 0491 	add.w	r4, r0, r1, lsr #2
 800aa30:	f3c3 2506 	ubfx	r5, r3, #8, #7
 800aa34:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
 800aa38:	f3c3 1503 	ubfx	r5, r3, #4, #4
 800aa3c:	f884 503b 	strb.w	r5, [r4, #59]	; 0x3b
 800aa40:	f003 030f 	and.w	r3, r3, #15
 800aa44:	bc30      	pop	{r4, r5}
 800aa46:	f7ff bf41 	b.w	800a8cc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>

0800aa4a <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>:
 800aa4a:	2903      	cmp	r1, #3
 800aa4c:	d813      	bhi.n	800aa76 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x2c>
 800aa4e:	b93b      	cbnz	r3, 800aa60 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x16>
 800aa50:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800aa54:	f890 3992 	ldrb.w	r3, [r0, #2450]	; 0x992
 800aa58:	7013      	strb	r3, [r2, #0]
 800aa5a:	f890 0994 	ldrb.w	r0, [r0, #2452]	; 0x994
 800aa5e:	4770      	bx	lr
 800aa60:	2b02      	cmp	r3, #2
 800aa62:	d008      	beq.n	800aa76 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x2c>
 800aa64:	2328      	movs	r3, #40	; 0x28
 800aa66:	fb03 0001 	mla	r0, r3, r1, r0
 800aa6a:	f890 38f2 	ldrb.w	r3, [r0, #2290]	; 0x8f2
 800aa6e:	7013      	strb	r3, [r2, #0]
 800aa70:	f890 08f4 	ldrb.w	r0, [r0, #2292]	; 0x8f4
 800aa74:	4770      	bx	lr
 800aa76:	2000      	movs	r0, #0
 800aa78:	4770      	bx	lr

0800aa7a <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>:
 800aa7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa7e:	26a0      	movs	r6, #160	; 0xa0
 800aa80:	ea4f 0882 	mov.w	r8, r2, lsl #2
 800aa84:	f108 0904 	add.w	r9, r8, #4
 800aa88:	f1b9 0f04 	cmp.w	r9, #4
 800aa8c:	4605      	mov	r5, r0
 800aa8e:	460f      	mov	r7, r1
 800aa90:	4614      	mov	r4, r2
 800aa92:	bf28      	it	cs
 800aa94:	f04f 0904 	movcs.w	r9, #4
 800aa98:	fb06 0602 	mla	r6, r6, r2, r0
 800aa9c:	1883      	adds	r3, r0, r2
 800aa9e:	f883 103b 	strb.w	r1, [r3, #59]	; 0x3b
 800aaa2:	45c8      	cmp	r8, r9
 800aaa4:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800aaa8:	d30c      	bcc.n	800aac4 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x4a>
 800aaaa:	69e8      	ldr	r0, [r5, #28]
 800aaac:	b1a8      	cbz	r0, 800aada <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x60>
 800aaae:	f895 38e1 	ldrb.w	r3, [r5, #2273]	; 0x8e1
 800aab2:	2b02      	cmp	r3, #2
 800aab4:	d111      	bne.n	800aada <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x60>
 800aab6:	6803      	ldr	r3, [r0, #0]
 800aab8:	463a      	mov	r2, r7
 800aaba:	4621      	mov	r1, r4
 800aabc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aac0:	69db      	ldr	r3, [r3, #28]
 800aac2:	4718      	bx	r3
 800aac4:	f8b6 18c8 	ldrh.w	r1, [r6, #2248]	; 0x8c8
 800aac8:	4622      	mov	r2, r4
 800aaca:	4628      	mov	r0, r5
 800aacc:	f7ff feee 	bl	800a8ac <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800aad0:	f108 0801 	add.w	r8, r8, #1
 800aad4:	f8a6 08c8 	strh.w	r0, [r6, #2248]	; 0x8c8
 800aad8:	e7e3      	b.n	800aaa2 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x28>
 800aada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800aade <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>:
 800aade:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aae2:	26a0      	movs	r6, #160	; 0xa0
 800aae4:	ea4f 0882 	mov.w	r8, r2, lsl #2
 800aae8:	f108 0904 	add.w	r9, r8, #4
 800aaec:	f1b9 0f04 	cmp.w	r9, #4
 800aaf0:	4605      	mov	r5, r0
 800aaf2:	460f      	mov	r7, r1
 800aaf4:	4614      	mov	r4, r2
 800aaf6:	bf28      	it	cs
 800aaf8:	f04f 0904 	movcs.w	r9, #4
 800aafc:	fb06 0602 	mla	r6, r6, r2, r0
 800ab00:	1883      	adds	r3, r0, r2
 800ab02:	f883 103a 	strb.w	r1, [r3, #58]	; 0x3a
 800ab06:	45c8      	cmp	r8, r9
 800ab08:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800ab0c:	d30c      	bcc.n	800ab28 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x4a>
 800ab0e:	69e8      	ldr	r0, [r5, #28]
 800ab10:	b1a8      	cbz	r0, 800ab3e <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x60>
 800ab12:	f895 38e1 	ldrb.w	r3, [r5, #2273]	; 0x8e1
 800ab16:	2b02      	cmp	r3, #2
 800ab18:	d111      	bne.n	800ab3e <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x60>
 800ab1a:	6803      	ldr	r3, [r0, #0]
 800ab1c:	463a      	mov	r2, r7
 800ab1e:	4621      	mov	r1, r4
 800ab20:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab24:	699b      	ldr	r3, [r3, #24]
 800ab26:	4718      	bx	r3
 800ab28:	f8b6 18c8 	ldrh.w	r1, [r6, #2248]	; 0x8c8
 800ab2c:	4622      	mov	r2, r4
 800ab2e:	4628      	mov	r0, r5
 800ab30:	f7ff febc 	bl	800a8ac <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800ab34:	f108 0801 	add.w	r8, r8, #1
 800ab38:	f8a6 08c8 	strh.w	r0, [r6, #2248]	; 0x8c8
 800ab3c:	e7e3      	b.n	800ab06 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x28>
 800ab3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ab42 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>:
 800ab42:	2903      	cmp	r1, #3
 800ab44:	b570      	push	{r4, r5, r6, lr}
 800ab46:	4605      	mov	r5, r0
 800ab48:	460c      	mov	r4, r1
 800ab4a:	4616      	mov	r6, r2
 800ab4c:	d823      	bhi.n	800ab96 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 800ab4e:	2228      	movs	r2, #40	; 0x28
 800ab50:	fb02 0301 	mla	r3, r2, r1, r0
 800ab54:	fb02 0201 	mla	r2, r2, r1, r0
 800ab58:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
 800ab5c:	f893 38f3 	ldrb.w	r3, [r3, #2291]	; 0x8f3
 800ab60:	2e01      	cmp	r6, #1
 800ab62:	bf0c      	ite	eq
 800ab64:	f043 0301 	orreq.w	r3, r3, #1
 800ab68:	f003 03fe 	andne.w	r3, r3, #254	; 0xfe
 800ab6c:	f882 38f3 	strb.w	r3, [r2, #2291]	; 0x8f3
 800ab70:	f890 38e1 	ldrb.w	r3, [r0, #2273]	; 0x8e1
 800ab74:	2b02      	cmp	r3, #2
 800ab76:	d10e      	bne.n	800ab96 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 800ab78:	69c0      	ldr	r0, [r0, #28]
 800ab7a:	b118      	cbz	r0, 800ab84 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x42>
 800ab7c:	6803      	ldr	r3, [r0, #0]
 800ab7e:	4632      	mov	r2, r6
 800ab80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab82:	4798      	blx	r3
 800ab84:	6a28      	ldr	r0, [r5, #32]
 800ab86:	b130      	cbz	r0, 800ab96 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 800ab88:	6803      	ldr	r3, [r0, #0]
 800ab8a:	4632      	mov	r2, r6
 800ab8c:	4621      	mov	r1, r4
 800ab8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ab92:	6a1b      	ldr	r3, [r3, #32]
 800ab94:	4718      	bx	r3
 800ab96:	bd70      	pop	{r4, r5, r6, pc}

0800ab98 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>:
 800ab98:	2903      	cmp	r1, #3
 800ab9a:	b570      	push	{r4, r5, r6, lr}
 800ab9c:	4605      	mov	r5, r0
 800ab9e:	460c      	mov	r4, r1
 800aba0:	4616      	mov	r6, r2
 800aba2:	d823      	bhi.n	800abec <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 800aba4:	2228      	movs	r2, #40	; 0x28
 800aba6:	fb02 0301 	mla	r3, r2, r1, r0
 800abaa:	fb02 0201 	mla	r2, r2, r1, r0
 800abae:	f8c3 6908 	str.w	r6, [r3, #2312]	; 0x908
 800abb2:	f893 38f3 	ldrb.w	r3, [r3, #2291]	; 0x8f3
 800abb6:	2e01      	cmp	r6, #1
 800abb8:	bf0c      	ite	eq
 800abba:	f043 0302 	orreq.w	r3, r3, #2
 800abbe:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
 800abc2:	f882 38f3 	strb.w	r3, [r2, #2291]	; 0x8f3
 800abc6:	f890 38e1 	ldrb.w	r3, [r0, #2273]	; 0x8e1
 800abca:	2b02      	cmp	r3, #2
 800abcc:	d10e      	bne.n	800abec <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 800abce:	69c0      	ldr	r0, [r0, #28]
 800abd0:	b118      	cbz	r0, 800abda <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x42>
 800abd2:	6803      	ldr	r3, [r0, #0]
 800abd4:	4632      	mov	r2, r6
 800abd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abd8:	4798      	blx	r3
 800abda:	6a28      	ldr	r0, [r5, #32]
 800abdc:	b130      	cbz	r0, 800abec <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 800abde:	6803      	ldr	r3, [r0, #0]
 800abe0:	4632      	mov	r2, r6
 800abe2:	4621      	mov	r1, r4
 800abe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800abe8:	69db      	ldr	r3, [r3, #28]
 800abea:	4718      	bx	r3
 800abec:	bd70      	pop	{r4, r5, r6, pc}

0800abee <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>:
 800abee:	b570      	push	{r4, r5, r6, lr}
 800abf0:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
 800abf4:	f1a1 0208 	sub.w	r2, r1, #8
 800abf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abfc:	4604      	mov	r4, r0
 800abfe:	f880 3091 	strb.w	r3, [r0, #145]	; 0x91
 800ac02:	2a04      	cmp	r2, #4
 800ac04:	d81f      	bhi.n	800ac46 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x58>
 800ac06:	e8df f002 	tbb	[pc, r2]
 800ac0a:	1e1b0307 	cdpne	3, 1, cr0, cr11, cr7, {0}
 800ac0e:	f043001e 			; <UNDEFINED> instruction: 0xf043001e
 800ac12:	0340      	lsls	r0, r0, #13
 800ac14:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
 800ac18:	f894 38e1 	ldrb.w	r3, [r4, #2273]	; 0x8e1
 800ac1c:	2b02      	cmp	r3, #2
 800ac1e:	d112      	bne.n	800ac46 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x58>
 800ac20:	69e0      	ldr	r0, [r4, #28]
 800ac22:	f001 0507 	and.w	r5, r1, #7
 800ac26:	b118      	cbz	r0, 800ac30 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x42>
 800ac28:	6803      	ldr	r3, [r0, #0]
 800ac2a:	4629      	mov	r1, r5
 800ac2c:	689b      	ldr	r3, [r3, #8]
 800ac2e:	4798      	blx	r3
 800ac30:	6a20      	ldr	r0, [r4, #32]
 800ac32:	b140      	cbz	r0, 800ac46 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x58>
 800ac34:	6803      	ldr	r3, [r0, #0]
 800ac36:	4629      	mov	r1, r5
 800ac38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ac3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac3e:	4718      	bx	r3
 800ac40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ac44:	e7e6      	b.n	800ac14 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x26>
 800ac46:	bd70      	pop	{r4, r5, r6, pc}

0800ac48 <ArtNetNode::HandleAddress()>:
 800ac48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	f880 38e0 	strb.w	r3, [r0, #2272]	; 0x8e0
 800ac52:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
 800ac56:	4604      	mov	r4, r0
 800ac58:	b133      	cbz	r3, 800ac68 <ArtNetNode::HandleAddress()+0x20>
 800ac5a:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 800ac5e:	f7ff fbd3 	bl	800a408 <ArtNetNode::SetShortName(char const*)>
 800ac62:	2306      	movs	r3, #6
 800ac64:	f884 38e0 	strb.w	r3, [r4, #2272]	; 0x8e0
 800ac68:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 800ac6c:	b13b      	cbz	r3, 800ac7e <ArtNetNode::HandleAddress()+0x36>
 800ac6e:	4620      	mov	r0, r4
 800ac70:	f104 01bc 	add.w	r1, r4, #188	; 0xbc
 800ac74:	f7ff fbf0 	bl	800a458 <ArtNetNode::SetLongName(char const*)>
 800ac78:	2307      	movs	r3, #7
 800ac7a:	f884 38e0 	strb.w	r3, [r4, #2272]	; 0x8e0
 800ac7e:	f894 50a9 	ldrb.w	r5, [r4, #169]	; 0xa9
 800ac82:	b105      	cbz	r5, 800ac86 <ArtNetNode::HandleAddress()+0x3e>
 800ac84:	3d01      	subs	r5, #1
 800ac86:	f894 1104 	ldrb.w	r1, [r4, #260]	; 0x104
 800ac8a:	2900      	cmp	r1, #0
 800ac8c:	d148      	bne.n	800ad20 <ArtNetNode::HandleAddress()+0xd8>
 800ac8e:	462a      	mov	r2, r5
 800ac90:	4620      	mov	r0, r4
 800ac92:	f7ff fef2 	bl	800aa7a <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800ac96:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
 800ac9a:	2900      	cmp	r1, #0
 800ac9c:	d146      	bne.n	800ad2c <ArtNetNode::HandleAddress()+0xe4>
 800ac9e:	462a      	mov	r2, r5
 800aca0:	4620      	mov	r0, r4
 800aca2:	f7ff ff1c 	bl	800aade <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800aca6:	00ad      	lsls	r5, r5, #2
 800aca8:	4627      	mov	r7, r4
 800acaa:	462e      	mov	r6, r5
 800acac:	f104 08fb 	add.w	r8, r4, #251	; 0xfb
 800acb0:	f104 09ff 	add.w	r9, r4, #255	; 0xff
 800acb4:	f898 3005 	ldrb.w	r3, [r8, #5]
 800acb8:	2b7f      	cmp	r3, #127	; 0x7f
 800acba:	d007      	beq.n	800accc <ArtNetNode::HandleAddress()+0x84>
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d13b      	bne.n	800ad38 <ArtNetNode::HandleAddress()+0xf0>
 800acc0:	2301      	movs	r3, #1
 800acc2:	2201      	movs	r2, #1
 800acc4:	4631      	mov	r1, r6
 800acc6:	4620      	mov	r0, r4
 800acc8:	f7ff fe00 	bl	800a8cc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 800accc:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 800acd0:	2a7f      	cmp	r2, #127	; 0x7f
 800acd2:	d005      	beq.n	800ace0 <ArtNetNode::HandleAddress()+0x98>
 800acd4:	bbaa      	cbnz	r2, 800ad42 <ArtNetNode::HandleAddress()+0xfa>
 800acd6:	2301      	movs	r3, #1
 800acd8:	4631      	mov	r1, r6
 800acda:	4620      	mov	r0, r4
 800acdc:	f7ff fdf6 	bl	800a8cc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 800ace0:	45c8      	cmp	r8, r9
 800ace2:	f106 0601 	add.w	r6, r6, #1
 800ace6:	d1e5      	bne.n	800acb4 <ArtNetNode::HandleAddress()+0x6c>
 800ace8:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
 800acec:	f003 0103 	and.w	r1, r3, #3
 800acf0:	2b53      	cmp	r3, #83	; 0x53
 800acf2:	4429      	add	r1, r5
 800acf4:	d82b      	bhi.n	800ad4e <ArtNetNode::HandleAddress()+0x106>
 800acf6:	2b4f      	cmp	r3, #79	; 0x4f
 800acf8:	f200 8092 	bhi.w	800ae20 <ArtNetNode::HandleAddress()+0x1d8>
 800acfc:	1e5a      	subs	r2, r3, #1
 800acfe:	b2d0      	uxtb	r0, r2
 800ad00:	2812      	cmp	r0, #18
 800ad02:	d834      	bhi.n	800ad6e <ArtNetNode::HandleAddress()+0x126>
 800ad04:	2a12      	cmp	r2, #18
 800ad06:	d832      	bhi.n	800ad6e <ArtNetNode::HandleAddress()+0x126>
 800ad08:	e8df f002 	tbb	[pc, r2]
 800ad0c:	74685c4d 	strbtvc	r5, [r8], #-3149	; 0xfffff3b3
 800ad10:	80313131 	eorshi	r3, r1, r1, lsr r1
 800ad14:	80808080 	addhi	r8, r0, r0, lsl #1
 800ad18:	85313131 	ldrhi	r3, [r1, #-305]!	; 0xfffffecf
 800ad1c:	00858585 	addeq	r8, r5, r5, lsl #11
 800ad20:	060f      	lsls	r7, r1, #24
 800ad22:	d5b8      	bpl.n	800ac96 <ArtNetNode::HandleAddress()+0x4e>
 800ad24:	462a      	mov	r2, r5
 800ad26:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800ad2a:	e7b1      	b.n	800ac90 <ArtNetNode::HandleAddress()+0x48>
 800ad2c:	060e      	lsls	r6, r1, #24
 800ad2e:	d5ba      	bpl.n	800aca6 <ArtNetNode::HandleAddress()+0x5e>
 800ad30:	462a      	mov	r2, r5
 800ad32:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800ad36:	e7b3      	b.n	800aca0 <ArtNetNode::HandleAddress()+0x58>
 800ad38:	0618      	lsls	r0, r3, #24
 800ad3a:	d5c7      	bpl.n	800accc <ArtNetNode::HandleAddress()+0x84>
 800ad3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad40:	e7bf      	b.n	800acc2 <ArtNetNode::HandleAddress()+0x7a>
 800ad42:	0611      	lsls	r1, r2, #24
 800ad44:	d5cc      	bpl.n	800ace0 <ArtNetNode::HandleAddress()+0x98>
 800ad46:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	e7c4      	b.n	800acd8 <ArtNetNode::HandleAddress()+0x90>
 800ad4e:	2b93      	cmp	r3, #147	; 0x93
 800ad50:	d81a      	bhi.n	800ad88 <ArtNetNode::HandleAddress()+0x140>
 800ad52:	2b8f      	cmp	r3, #143	; 0x8f
 800ad54:	d868      	bhi.n	800ae28 <ArtNetNode::HandleAddress()+0x1e0>
 800ad56:	2b63      	cmp	r3, #99	; 0x63
 800ad58:	d806      	bhi.n	800ad68 <ArtNetNode::HandleAddress()+0x120>
 800ad5a:	2b5f      	cmp	r3, #95	; 0x5f
 800ad5c:	d907      	bls.n	800ad6e <ArtNetNode::HandleAddress()+0x126>
 800ad5e:	2200      	movs	r2, #0
 800ad60:	4620      	mov	r0, r4
 800ad62:	f7ff feee 	bl	800ab42 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 800ad66:	e002      	b.n	800ad6e <ArtNetNode::HandleAddress()+0x126>
 800ad68:	3b70      	subs	r3, #112	; 0x70
 800ad6a:	2b03      	cmp	r3, #3
 800ad6c:	d95a      	bls.n	800ae24 <ArtNetNode::HandleAddress()+0x1dc>
 800ad6e:	69a0      	ldr	r0, [r4, #24]
 800ad70:	b120      	cbz	r0, 800ad7c <ArtNetNode::HandleAddress()+0x134>
 800ad72:	6803      	ldr	r3, [r0, #0]
 800ad74:	f894 1106 	ldrb.w	r1, [r4, #262]	; 0x106
 800ad78:	68db      	ldr	r3, [r3, #12]
 800ad7a:	4798      	blx	r3
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad82:	2101      	movs	r1, #1
 800ad84:	f000 bc9e 	b.w	800b6c4 <ArtNetNode::SendPollRelply(bool)>
 800ad88:	2bc3      	cmp	r3, #195	; 0xc3
 800ad8a:	d806      	bhi.n	800ad9a <ArtNetNode::HandleAddress()+0x152>
 800ad8c:	2bbf      	cmp	r3, #191	; 0xbf
 800ad8e:	d9ee      	bls.n	800ad6e <ArtNetNode::HandleAddress()+0x126>
 800ad90:	2201      	movs	r2, #1
 800ad92:	4620      	mov	r0, r4
 800ad94:	f000 fd1e 	bl	800b7d4 <ArtNetNode::SetRmd(unsigned int, bool)>
 800ad98:	e7e9      	b.n	800ad6e <ArtNetNode::HandleAddress()+0x126>
 800ad9a:	3330      	adds	r3, #48	; 0x30
 800ad9c:	b2db      	uxtb	r3, r3
 800ad9e:	2b03      	cmp	r3, #3
 800ada0:	d8e5      	bhi.n	800ad6e <ArtNetNode::HandleAddress()+0x126>
 800ada2:	2200      	movs	r2, #0
 800ada4:	e7f5      	b.n	800ad92 <ArtNetNode::HandleAddress()+0x14a>
 800ada6:	2300      	movs	r3, #0
 800ada8:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
 800adac:	f884 38e6 	strb.w	r3, [r4, #2278]	; 0x8e6
 800adb0:	f897 38f3 	ldrb.w	r3, [r7, #2291]	; 0x8f3
 800adb4:	3728      	adds	r7, #40	; 0x28
 800adb6:	f023 0308 	bic.w	r3, r3, #8
 800adba:	f887 38cb 	strb.w	r3, [r7, #2251]	; 0x8cb
 800adbe:	42ba      	cmp	r2, r7
 800adc0:	d1f6      	bne.n	800adb0 <ArtNetNode::HandleAddress()+0x168>
 800adc2:	e7d4      	b.n	800ad6e <ArtNetNode::HandleAddress()+0x126>
 800adc4:	4b3a      	ldr	r3, [pc, #232]	; (800aeb0 <ArtNetNode::HandleAddress()+0x268>)
 800adc6:	2102      	movs	r1, #2
 800adc8:	6818      	ldr	r0, [r3, #0]
 800adca:	f008 ff13 	bl	8013bf4 <LedBlink::SetMode(ledblink::Mode)>
 800adce:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
 800add2:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800add6:	f884 308f 	strb.w	r3, [r4, #143]	; 0x8f
 800adda:	e7c8      	b.n	800ad6e <ArtNetNode::HandleAddress()+0x126>
 800addc:	4b34      	ldr	r3, [pc, #208]	; (800aeb0 <ArtNetNode::HandleAddress()+0x268>)
 800adde:	2100      	movs	r1, #0
 800ade0:	6818      	ldr	r0, [r3, #0]
 800ade2:	f008 ff07 	bl	8013bf4 <LedBlink::SetMode(ledblink::Mode)>
 800ade6:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
 800adea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800adee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800adf2:	e7f0      	b.n	800add6 <ArtNetNode::HandleAddress()+0x18e>
 800adf4:	4b2e      	ldr	r3, [pc, #184]	; (800aeb0 <ArtNetNode::HandleAddress()+0x268>)
 800adf6:	2104      	movs	r1, #4
 800adf8:	6818      	ldr	r0, [r3, #0]
 800adfa:	f008 fefb 	bl	8013bf4 <LedBlink::SetMode(ledblink::Mode)>
 800adfe:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
 800ae02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae0a:	e7e4      	b.n	800add6 <ArtNetNode::HandleAddress()+0x18e>
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	4620      	mov	r0, r4
 800ae10:	f7ff feed 	bl	800abee <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>
 800ae14:	e7ab      	b.n	800ad6e <ArtNetNode::HandleAddress()+0x126>
 800ae16:	2201      	movs	r2, #1
 800ae18:	4620      	mov	r0, r4
 800ae1a:	f7ff febd 	bl	800ab98 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 800ae1e:	e7a6      	b.n	800ad6e <ArtNetNode::HandleAddress()+0x126>
 800ae20:	2200      	movs	r2, #0
 800ae22:	e7f9      	b.n	800ae18 <ArtNetNode::HandleAddress()+0x1d0>
 800ae24:	2201      	movs	r2, #1
 800ae26:	e79b      	b.n	800ad60 <ArtNetNode::HandleAddress()+0x118>
 800ae28:	4b22      	ldr	r3, [pc, #136]	; (800aeb4 <ArtNetNode::HandleAddress()+0x26c>)
 800ae2a:	b2cd      	uxtb	r5, r1
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	2700      	movs	r7, #0
 800ae30:	07d2      	lsls	r2, r2, #31
 800ae32:	bf5c      	itt	pl
 800ae34:	2201      	movpl	r2, #1
 800ae36:	601a      	strpl	r2, [r3, #0]
 800ae38:	f240 6204 	movw	r2, #1540	; 0x604
 800ae3c:	436a      	muls	r2, r5
 800ae3e:	4b1e      	ldr	r3, [pc, #120]	; (800aeb8 <ArtNetNode::HandleAddress()+0x270>)
 800ae40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ae44:	441a      	add	r2, r3
 800ae46:	4611      	mov	r1, r2
 800ae48:	6860      	ldr	r0, [r4, #4]
 800ae4a:	f502 7600 	add.w	r6, r2, #512	; 0x200
 800ae4e:	428e      	cmp	r6, r1
 800ae50:	d12a      	bne.n	800aea8 <ArtNetNode::HandleAddress()+0x260>
 800ae52:	f240 6104 	movw	r1, #1540	; 0x604
 800ae56:	fb01 3105 	mla	r1, r1, r5, r3
 800ae5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae5e:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
 800ae62:	6801      	ldr	r1, [r0, #0]
 800ae64:	690e      	ldr	r6, [r1, #16]
 800ae66:	4629      	mov	r1, r5
 800ae68:	47b0      	blx	r6
 800ae6a:	2d03      	cmp	r5, #3
 800ae6c:	f63f af7f 	bhi.w	800ad6e <ArtNetNode::HandleAddress()+0x126>
 800ae70:	2628      	movs	r6, #40	; 0x28
 800ae72:	fb06 4605 	mla	r6, r6, r5, r4
 800ae76:	f8d6 3910 	ldr.w	r3, [r6, #2320]	; 0x910
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	f47f af77 	bne.w	800ad6e <ArtNetNode::HandleAddress()+0x126>
 800ae80:	f896 3915 	ldrb.w	r3, [r6, #2325]	; 0x915
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	f47f af72 	bne.w	800ad6e <ArtNetNode::HandleAddress()+0x126>
 800ae8a:	6860      	ldr	r0, [r4, #4]
 800ae8c:	4629      	mov	r1, r5
 800ae8e:	6803      	ldr	r3, [r0, #0]
 800ae90:	689b      	ldr	r3, [r3, #8]
 800ae92:	4798      	blx	r3
 800ae94:	2301      	movs	r3, #1
 800ae96:	f886 3915 	strb.w	r3, [r6, #2325]	; 0x915
 800ae9a:	f896 38f3 	ldrb.w	r3, [r6, #2291]	; 0x8f3
 800ae9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aea2:	f886 38f3 	strb.w	r3, [r6, #2291]	; 0x8f3
 800aea6:	e762      	b.n	800ad6e <ArtNetNode::HandleAddress()+0x126>
 800aea8:	f801 7b01 	strb.w	r7, [r1], #1
 800aeac:	e7cf      	b.n	800ae4e <ArtNetNode::HandleAddress()+0x206>
 800aeae:	bf00      	nop
 800aeb0:	20009dbc 			; <UNDEFINED> instruction: 0x20009dbc
 800aeb4:	20000118 	andcs	r0, r0, r8, lsl r1
 800aeb8:	2000011c 	andcs	r0, r0, ip, lsl r1

0800aebc <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>:
 800aebc:	f240 6304 	movw	r3, #1540	; 0x604
 800aec0:	fb03 0001 	mla	r0, r3, r1, r0
 800aec4:	2300      	movs	r3, #0
 800aec6:	b510      	push	{r4, lr}
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d100      	bne.n	800aece <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0x12>
 800aecc:	bd10      	pop	{r4, pc}
 800aece:	f810 4b01 	ldrb.w	r4, [r0], #1
 800aed2:	3301      	adds	r3, #1
 800aed4:	f890 11ff 	ldrb.w	r1, [r0, #511]	; 0x1ff
 800aed8:	42a1      	cmp	r1, r4
 800aeda:	bf38      	it	cc
 800aedc:	4621      	movcc	r1, r4
 800aede:	f880 13ff 	strb.w	r1, [r0, #1023]	; 0x3ff
 800aee2:	e7f1      	b.n	800aec8 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0xc>

0800aee4 <memcpy.isra.0>:
 800aee4:	3801      	subs	r0, #1
 800aee6:	440a      	add	r2, r1
 800aee8:	4291      	cmp	r1, r2
 800aeea:	d100      	bne.n	800aeee <memcpy.isra.0+0xa>
 800aeec:	4770      	bx	lr
 800aeee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aef2:	f800 3f01 	strb.w	r3, [r0, #1]!
 800aef6:	e7f7      	b.n	800aee8 <memcpy.isra.0+0x4>

0800aef8 <lightset::Data::Get()>:
 800aef8:	4b03      	ldr	r3, [pc, #12]	; (800af08 <lightset::Data::Get()+0x10>)
 800aefa:	4804      	ldr	r0, [pc, #16]	; (800af0c <lightset::Data::Get()+0x14>)
 800aefc:	681a      	ldr	r2, [r3, #0]
 800aefe:	07d2      	lsls	r2, r2, #31
 800af00:	bf5c      	itt	pl
 800af02:	2201      	movpl	r2, #1
 800af04:	601a      	strpl	r2, [r3, #0]
 800af06:	4770      	bx	lr
 800af08:	20000118 	andcs	r0, r0, r8, lsl r1
 800af0c:	2000011c 	andcs	r0, r0, ip, lsl r1

0800af10 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>:
 800af10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af14:	4615      	mov	r5, r2
 800af16:	460f      	mov	r7, r1
 800af18:	4604      	mov	r4, r0
 800af1a:	f7ff ffed 	bl	800aef8 <lightset::Data::Get()>
 800af1e:	f240 6304 	movw	r3, #1540	; 0x604
 800af22:	4606      	mov	r6, r0
 800af24:	435c      	muls	r4, r3
 800af26:	eb00 0804 	add.w	r8, r0, r4
 800af2a:	462a      	mov	r2, r5
 800af2c:	4639      	mov	r1, r7
 800af2e:	4640      	mov	r0, r8
 800af30:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800af34:	f7ff ffd6 	bl	800aee4 <memcpy.isra.0>
 800af38:	462a      	mov	r2, r5
 800af3a:	4639      	mov	r1, r7
 800af3c:	f8c8 5600 	str.w	r5, [r8, #1536]	; 0x600
 800af40:	1930      	adds	r0, r6, r4
 800af42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af46:	f7ff bfcd 	b.w	800aee4 <memcpy.isra.0>

0800af4a <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 800af4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af4e:	4680      	mov	r8, r0
 800af50:	f240 6404 	movw	r4, #1540	; 0x604
 800af54:	4615      	mov	r5, r2
 800af56:	460f      	mov	r7, r1
 800af58:	4699      	mov	r9, r3
 800af5a:	f7ff ffcd 	bl	800aef8 <lightset::Data::Get()>
 800af5e:	fb04 f408 	mul.w	r4, r4, r8
 800af62:	eb00 0a04 	add.w	sl, r0, r4
 800af66:	4606      	mov	r6, r0
 800af68:	462a      	mov	r2, r5
 800af6a:	4639      	mov	r1, r7
 800af6c:	4650      	mov	r0, sl
 800af6e:	f7ff ffb9 	bl	800aee4 <memcpy.isra.0>
 800af72:	f8ca 5600 	str.w	r5, [sl, #1536]	; 0x600
 800af76:	f1b9 0f00 	cmp.w	r9, #0
 800af7a:	d106      	bne.n	800af8a <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x40>
 800af7c:	462a      	mov	r2, r5
 800af7e:	4641      	mov	r1, r8
 800af80:	4630      	mov	r0, r6
 800af82:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af86:	f7ff bf99 	b.w	800aebc <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 800af8a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800af8e:	462a      	mov	r2, r5
 800af90:	4639      	mov	r1, r7
 800af92:	1930      	adds	r0, r6, r4
 800af94:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af98:	f7ff bfa4 	b.w	800aee4 <memcpy.isra.0>

0800af9c <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 800af9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afa0:	4616      	mov	r6, r2
 800afa2:	4699      	mov	r9, r3
 800afa4:	4680      	mov	r8, r0
 800afa6:	460f      	mov	r7, r1
 800afa8:	f7ff ffa6 	bl	800aef8 <lightset::Data::Get()>
 800afac:	f240 6404 	movw	r4, #1540	; 0x604
 800afb0:	4605      	mov	r5, r0
 800afb2:	fb04 f408 	mul.w	r4, r4, r8
 800afb6:	f504 7000 	add.w	r0, r4, #512	; 0x200
 800afba:	4632      	mov	r2, r6
 800afbc:	4639      	mov	r1, r7
 800afbe:	4428      	add	r0, r5
 800afc0:	f7ff ff90 	bl	800aee4 <memcpy.isra.0>
 800afc4:	192b      	adds	r3, r5, r4
 800afc6:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
 800afca:	f1b9 0f00 	cmp.w	r9, #0
 800afce:	d106      	bne.n	800afde <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x42>
 800afd0:	4632      	mov	r2, r6
 800afd2:	4641      	mov	r1, r8
 800afd4:	4628      	mov	r0, r5
 800afd6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afda:	f7ff bf6f 	b.w	800aebc <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 800afde:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800afe2:	4632      	mov	r2, r6
 800afe4:	4639      	mov	r1, r7
 800afe6:	1928      	adds	r0, r5, r4
 800afe8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afec:	f7ff bf7a 	b.w	800aee4 <memcpy.isra.0>

0800aff0 <ArtNetNode::UpdateMergeStatus(unsigned int)>:
 800aff0:	f890 38e6 	ldrb.w	r3, [r0, #2278]	; 0x8e6
 800aff4:	b91b      	cbnz	r3, 800affe <ArtNetNode::UpdateMergeStatus(unsigned int)+0xe>
 800aff6:	f240 1301 	movw	r3, #257	; 0x101
 800affa:	f8a0 38e6 	strh.w	r3, [r0, #2278]	; 0x8e6
 800affe:	2328      	movs	r3, #40	; 0x28
 800b000:	fb03 0001 	mla	r0, r3, r1, r0
 800b004:	f890 38f3 	ldrb.w	r3, [r0, #2291]	; 0x8f3
 800b008:	f043 0308 	orr.w	r3, r3, #8
 800b00c:	f880 38f3 	strb.w	r3, [r0, #2291]	; 0x8f3
 800b010:	4770      	bx	lr

0800b012 <ArtNetNode::CheckMergeTimeouts(unsigned int)>:
 800b012:	2328      	movs	r3, #40	; 0x28
 800b014:	b530      	push	{r4, r5, lr}
 800b016:	f242 7510 	movw	r5, #10000	; 0x2710
 800b01a:	fb03 0301 	mla	r3, r3, r1, r0
 800b01e:	f8d0 2874 	ldr.w	r2, [r0, #2164]	; 0x874
 800b022:	f8d3 48f8 	ldr.w	r4, [r3, #2296]	; 0x8f8
 800b026:	1b14      	subs	r4, r2, r4
 800b028:	42ac      	cmp	r4, r5
 800b02a:	d908      	bls.n	800b03e <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x2c>
 800b02c:	2400      	movs	r4, #0
 800b02e:	f8c3 48fc 	str.w	r4, [r3, #2300]	; 0x8fc
 800b032:	f893 48f3 	ldrb.w	r4, [r3, #2291]	; 0x8f3
 800b036:	f024 0408 	bic.w	r4, r4, #8
 800b03a:	f883 48f3 	strb.w	r4, [r3, #2291]	; 0x8f3
 800b03e:	2328      	movs	r3, #40	; 0x28
 800b040:	fb03 0101 	mla	r1, r3, r1, r0
 800b044:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 800b048:	1ad2      	subs	r2, r2, r3
 800b04a:	f242 7310 	movw	r3, #10000	; 0x2710
 800b04e:	429a      	cmp	r2, r3
 800b050:	d908      	bls.n	800b064 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x52>
 800b052:	2300      	movs	r3, #0
 800b054:	f8c1 3904 	str.w	r3, [r1, #2308]	; 0x904
 800b058:	f891 38f3 	ldrb.w	r3, [r1, #2291]	; 0x8f3
 800b05c:	f023 0308 	bic.w	r3, r3, #8
 800b060:	f881 38f3 	strb.w	r3, [r1, #2291]	; 0x8f3
 800b064:	4603      	mov	r3, r0
 800b066:	2200      	movs	r2, #0
 800b068:	f100 04a0 	add.w	r4, r0, #160	; 0xa0
 800b06c:	f893 18f3 	ldrb.w	r1, [r3, #2291]	; 0x8f3
 800b070:	3328      	adds	r3, #40	; 0x28
 800b072:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 800b076:	429c      	cmp	r4, r3
 800b078:	ea42 0201 	orr.w	r2, r2, r1
 800b07c:	d1f6      	bne.n	800b06c <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x5a>
 800b07e:	b91a      	cbnz	r2, 800b088 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x76>
 800b080:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b084:	f8a0 38e6 	strh.w	r3, [r0, #2278]	; 0x8e6
 800b088:	bd30      	pop	{r4, r5, pc}

0800b08a <ArtNetNode::HandleDmx()>:
 800b08a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b08e:	f8b0 70ac 	ldrh.w	r7, [r0, #172]	; 0xac
 800b092:	4604      	mov	r4, r0
 800b094:	ba7f      	rev16	r7, r7
 800b096:	b2bf      	uxth	r7, r7
 800b098:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 800b09c:	bf28      	it	cs
 800b09e:	f44f 7700 	movcs.w	r7, #512	; 0x200
 800b0a2:	4605      	mov	r5, r0
 800b0a4:	2600      	movs	r6, #0
 800b0a6:	f04f 0901 	mov.w	r9, #1
 800b0aa:	f100 08ae 	add.w	r8, r0, #174	; 0xae
 800b0ae:	f895 38f4 	ldrb.w	r3, [r5, #2292]	; 0x8f4
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d056      	beq.n	800b164 <ArtNetNode::HandleDmx()+0xda>
 800b0b6:	f8d5 3910 	ldr.w	r3, [r5, #2320]	; 0x910
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d152      	bne.n	800b164 <ArtNetNode::HandleDmx()+0xda>
 800b0be:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
 800b0c2:	f8b5 38f0 	ldrh.w	r3, [r5, #2288]	; 0x8f0
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d14c      	bne.n	800b164 <ArtNetNode::HandleDmx()+0xda>
 800b0ca:	f895 38f3 	ldrb.w	r3, [r5, #2291]	; 0x8f3
 800b0ce:	f8d5 b8fc 	ldr.w	fp, [r5, #2300]	; 0x8fc
 800b0d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b0d6:	f885 38f3 	strb.w	r3, [r5, #2291]	; 0x8f3
 800b0da:	f894 38e6 	ldrb.w	r3, [r4, #2278]	; 0x8e6
 800b0de:	f8d5 a904 	ldr.w	sl, [r5, #2308]	; 0x904
 800b0e2:	b133      	cbz	r3, 800b0f2 <ArtNetNode::HandleDmx()+0x68>
 800b0e4:	f894 38e8 	ldrb.w	r3, [r4, #2280]	; 0x8e8
 800b0e8:	b91b      	cbnz	r3, 800b0f2 <ArtNetNode::HandleDmx()+0x68>
 800b0ea:	4631      	mov	r1, r6
 800b0ec:	4620      	mov	r0, r4
 800b0ee:	f7ff ff90 	bl	800b012 <ArtNetNode::CheckMergeTimeouts(unsigned int)>
 800b0f2:	ea5b 020a 	orrs.w	r2, fp, sl
 800b0f6:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
 800b0fa:	d139      	bne.n	800b170 <ArtNetNode::HandleDmx()+0xe6>
 800b0fc:	f8c5 38fc 	str.w	r3, [r5, #2300]	; 0x8fc
 800b100:	f8d4 3874 	ldr.w	r3, [r4, #2164]	; 0x874
 800b104:	463a      	mov	r2, r7
 800b106:	4641      	mov	r1, r8
 800b108:	4630      	mov	r0, r6
 800b10a:	f8c5 38f8 	str.w	r3, [r5, #2296]	; 0x8f8
 800b10e:	f7ff feff 	bl	800af10 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 800b112:	f894 38e5 	ldrb.w	r3, [r4, #2277]	; 0x8e5
 800b116:	b9fb      	cbnz	r3, 800b158 <ArtNetNode::HandleDmx()+0xce>
 800b118:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800b11c:	f7ff feec 	bl	800aef8 <lightset::Data::Get()>
 800b120:	f240 6304 	movw	r3, #1540	; 0x604
 800b124:	4373      	muls	r3, r6
 800b126:	18c2      	adds	r2, r0, r3
 800b128:	f503 6180 	add.w	r1, r3, #1024	; 0x400
 800b12c:	f8da 3000 	ldr.w	r3, [sl]
 800b130:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800b134:	f8d2 3600 	ldr.w	r3, [r2, #1536]	; 0x600
 800b138:	1842      	adds	r2, r0, r1
 800b13a:	4631      	mov	r1, r6
 800b13c:	4650      	mov	r0, sl
 800b13e:	47d8      	blx	fp
 800b140:	f895 3915 	ldrb.w	r3, [r5, #2325]	; 0x915
 800b144:	b943      	cbnz	r3, 800b158 <ArtNetNode::HandleDmx()+0xce>
 800b146:	6860      	ldr	r0, [r4, #4]
 800b148:	4631      	mov	r1, r6
 800b14a:	6803      	ldr	r3, [r0, #0]
 800b14c:	689b      	ldr	r3, [r3, #8]
 800b14e:	4798      	blx	r3
 800b150:	f884 98e7 	strb.w	r9, [r4, #2279]	; 0x8e7
 800b154:	f885 9915 	strb.w	r9, [r5, #2325]	; 0x915
 800b158:	f894 38e9 	ldrb.w	r3, [r4, #2281]	; 0x8e9
 800b15c:	f043 0302 	orr.w	r3, r3, #2
 800b160:	f884 38e9 	strb.w	r3, [r4, #2281]	; 0x8e9
 800b164:	3601      	adds	r6, #1
 800b166:	2e04      	cmp	r6, #4
 800b168:	f105 0528 	add.w	r5, r5, #40	; 0x28
 800b16c:	d19f      	bne.n	800b0ae <ArtNetNode::HandleDmx()+0x24>
 800b16e:	e040      	b.n	800b1f2 <ArtNetNode::HandleDmx()+0x168>
 800b170:	459b      	cmp	fp, r3
 800b172:	d104      	bne.n	800b17e <ArtNetNode::HandleDmx()+0xf4>
 800b174:	f1ba 0f00 	cmp.w	sl, #0
 800b178:	d0c2      	beq.n	800b100 <ArtNetNode::HandleDmx()+0x76>
 800b17a:	b11b      	cbz	r3, 800b184 <ArtNetNode::HandleDmx()+0xfa>
 800b17c:	e037      	b.n	800b1ee <ArtNetNode::HandleDmx()+0x164>
 800b17e:	f1bb 0f00 	cmp.w	fp, #0
 800b182:	d132      	bne.n	800b1ea <ArtNetNode::HandleDmx()+0x160>
 800b184:	459a      	cmp	sl, r3
 800b186:	d11d      	bne.n	800b1c4 <ArtNetNode::HandleDmx()+0x13a>
 800b188:	f8d4 3874 	ldr.w	r3, [r4, #2164]	; 0x874
 800b18c:	f8c5 3900 	str.w	r3, [r5, #2304]	; 0x900
 800b190:	f7ff feb2 	bl	800aef8 <lightset::Data::Get()>
 800b194:	f240 6304 	movw	r3, #1540	; 0x604
 800b198:	4683      	mov	fp, r0
 800b19a:	fb03 fa06 	mul.w	sl, r3, r6
 800b19e:	f50a 7000 	add.w	r0, sl, #512	; 0x200
 800b1a2:	463a      	mov	r2, r7
 800b1a4:	4641      	mov	r1, r8
 800b1a6:	4458      	add	r0, fp
 800b1a8:	f7ff fe9c 	bl	800aee4 <memcpy.isra.0>
 800b1ac:	eb0b 030a 	add.w	r3, fp, sl
 800b1b0:	f50a 6080 	add.w	r0, sl, #1024	; 0x400
 800b1b4:	463a      	mov	r2, r7
 800b1b6:	4641      	mov	r1, r8
 800b1b8:	f8c3 7600 	str.w	r7, [r3, #1536]	; 0x600
 800b1bc:	4458      	add	r0, fp
 800b1be:	f7ff fe91 	bl	800aee4 <memcpy.isra.0>
 800b1c2:	e7a6      	b.n	800b112 <ArtNetNode::HandleDmx()+0x88>
 800b1c4:	b9bb      	cbnz	r3, 800b1f6 <ArtNetNode::HandleDmx()+0x16c>
 800b1c6:	f8c5 38fc 	str.w	r3, [r5, #2300]	; 0x8fc
 800b1ca:	f8d4 3874 	ldr.w	r3, [r4, #2164]	; 0x874
 800b1ce:	4631      	mov	r1, r6
 800b1d0:	4620      	mov	r0, r4
 800b1d2:	f8c5 38f8 	str.w	r3, [r5, #2296]	; 0x8f8
 800b1d6:	f7ff ff0b 	bl	800aff0 <ArtNetNode::UpdateMergeStatus(unsigned int)>
 800b1da:	463a      	mov	r2, r7
 800b1dc:	4641      	mov	r1, r8
 800b1de:	4630      	mov	r0, r6
 800b1e0:	f8d5 3908 	ldr.w	r3, [r5, #2312]	; 0x908
 800b1e4:	f7ff feb1 	bl	800af4a <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800b1e8:	e793      	b.n	800b112 <ArtNetNode::HandleDmx()+0x88>
 800b1ea:	459b      	cmp	fp, r3
 800b1ec:	d118      	bne.n	800b220 <ArtNetNode::HandleDmx()+0x196>
 800b1ee:	459a      	cmp	sl, r3
 800b1f0:	d1eb      	bne.n	800b1ca <ArtNetNode::HandleDmx()+0x140>
 800b1f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1f6:	f1ba 0f00 	cmp.w	sl, #0
 800b1fa:	d1e4      	bne.n	800b1c6 <ArtNetNode::HandleDmx()+0x13c>
 800b1fc:	f8c5 3904 	str.w	r3, [r5, #2308]	; 0x904
 800b200:	f8d4 3874 	ldr.w	r3, [r4, #2164]	; 0x874
 800b204:	4631      	mov	r1, r6
 800b206:	4620      	mov	r0, r4
 800b208:	f8c5 3900 	str.w	r3, [r5, #2304]	; 0x900
 800b20c:	f7ff fef0 	bl	800aff0 <ArtNetNode::UpdateMergeStatus(unsigned int)>
 800b210:	463a      	mov	r2, r7
 800b212:	4641      	mov	r1, r8
 800b214:	4630      	mov	r0, r6
 800b216:	f8d5 3908 	ldr.w	r3, [r5, #2312]	; 0x908
 800b21a:	f7ff febf 	bl	800af9c <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800b21e:	e778      	b.n	800b112 <ArtNetNode::HandleDmx()+0x88>
 800b220:	f1ba 0f00 	cmp.w	sl, #0
 800b224:	d0ea      	beq.n	800b1fc <ArtNetNode::HandleDmx()+0x172>
 800b226:	459a      	cmp	sl, r3
 800b228:	d0ea      	beq.n	800b200 <ArtNetNode::HandleDmx()+0x176>
 800b22a:	e7e2      	b.n	800b1f2 <ArtNetNode::HandleDmx()+0x168>

0800b22c <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>:
 800b22c:	2903      	cmp	r1, #3
 800b22e:	b510      	push	{r4, lr}
 800b230:	d80f      	bhi.n	800b252 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x26>
 800b232:	4b08      	ldr	r3, [pc, #32]	; (800b254 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x28>)
 800b234:	0109      	lsls	r1, r1, #4
 800b236:	681c      	ldr	r4, [r3, #0]
 800b238:	6963      	ldr	r3, [r4, #20]
 800b23a:	69e4      	ldr	r4, [r4, #28]
 800b23c:	4053      	eors	r3, r2
 800b23e:	4223      	tst	r3, r4
 800b240:	bf15      	itete	ne
 800b242:	6a83      	ldrne	r3, [r0, #40]	; 0x28
 800b244:	1840      	addeq	r0, r0, r1
 800b246:	1809      	addne	r1, r1, r0
 800b248:	f8c0 2998 	streq.w	r2, [r0, #2456]	; 0x998
 800b24c:	bf18      	it	ne
 800b24e:	f8c1 3998 	strne.w	r3, [r1, #2456]	; 0x998
 800b252:	bd10      	pop	{r4, pc}
 800b254:	200096f8 	strdcs	r9, [r0], -r8

0800b258 <ArtNetNode::HandleDmxIn()>:
 800b258:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800b25c:	4604      	mov	r4, r0
 800b25e:	4605      	mov	r5, r0
 800b260:	2600      	movs	r6, #0
 800b262:	4f3a      	ldr	r7, [pc, #232]	; (800b34c <ArtNetNode::HandleDmxIn()+0xf4>)
 800b264:	f895 3994 	ldrb.w	r3, [r5, #2452]	; 0x994
 800b268:	b93b      	cbnz	r3, 800b27a <ArtNetNode::HandleDmxIn()+0x22>
 800b26a:	3601      	adds	r6, #1
 800b26c:	2e04      	cmp	r6, #4
 800b26e:	f105 0510 	add.w	r5, r5, #16
 800b272:	d1f7      	bne.n	800b264 <ArtNetNode::HandleDmxIn()+0xc>
 800b274:	b004      	add	sp, #16
 800b276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b27a:	6920      	ldr	r0, [r4, #16]
 800b27c:	4631      	mov	r1, r6
 800b27e:	6803      	ldr	r3, [r0, #0]
 800b280:	aa02      	add	r2, sp, #8
 800b282:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800b286:	ab03      	add	r3, sp, #12
 800b288:	47c0      	blx	r8
 800b28a:	2800      	cmp	r0, #0
 800b28c:	d044      	beq.n	800b318 <ArtNetNode::HandleDmxIn()+0xc0>
 800b28e:	f895 399c 	ldrb.w	r3, [r5, #2460]	; 0x99c
 800b292:	f504 62ce 	add.w	r2, r4, #1648	; 0x670
 800b296:	3301      	adds	r3, #1
 800b298:	b2db      	uxtb	r3, r3
 800b29a:	f885 399c 	strb.w	r3, [r5, #2460]	; 0x99c
 800b29e:	f884 366b 	strb.w	r3, [r4, #1643]	; 0x66b
 800b2a2:	f884 666c 	strb.w	r6, [r4, #1644]	; 0x66c
 800b2a6:	f8b5 3990 	ldrh.w	r3, [r5, #2448]	; 0x990
 800b2aa:	f8a4 366d 	strh.w	r3, [r4, #1645]	; 0x66d
 800b2ae:	9b02      	ldr	r3, [sp, #8]
 800b2b0:	18c1      	adds	r1, r0, r3
 800b2b2:	4281      	cmp	r1, r0
 800b2b4:	d12b      	bne.n	800b30e <ArtNetNode::HandleDmxIn()+0xb6>
 800b2b6:	07da      	lsls	r2, r3, #31
 800b2b8:	d505      	bpl.n	800b2c6 <ArtNetNode::HandleDmxIn()+0x6e>
 800b2ba:	2100      	movs	r1, #0
 800b2bc:	18e2      	adds	r2, r4, r3
 800b2be:	3301      	adds	r3, #1
 800b2c0:	f882 1671 	strb.w	r1, [r2, #1649]	; 0x671
 800b2c4:	9302      	str	r3, [sp, #8]
 800b2c6:	9b02      	ldr	r3, [sp, #8]
 800b2c8:	f204 615f 	addw	r1, r4, #1631	; 0x65f
 800b2cc:	f884 3670 	strb.w	r3, [r4, #1648]	; 0x670
 800b2d0:	0a1a      	lsrs	r2, r3, #8
 800b2d2:	2380      	movs	r3, #128	; 0x80
 800b2d4:	f884 266f 	strb.w	r2, [r4, #1647]	; 0x66f
 800b2d8:	f885 3993 	strb.w	r3, [r5, #2451]	; 0x993
 800b2dc:	f641 1336 	movw	r3, #6454	; 0x1936
 800b2e0:	9300      	str	r3, [sp, #0]
 800b2e2:	f240 2212 	movw	r2, #530	; 0x212
 800b2e6:	f8d5 3998 	ldr.w	r3, [r5, #2456]	; 0x998
 800b2ea:	7820      	ldrb	r0, [r4, #0]
 800b2ec:	f005 fd04 	bl	8010cf8 <udp_send>
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	683a      	ldr	r2, [r7, #0]
 800b2f4:	40b3      	lsls	r3, r6
 800b2f6:	ea33 0102 	bics.w	r1, r3, r2
 800b2fa:	d0b6      	beq.n	800b26a <ArtNetNode::HandleDmxIn()+0x12>
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	603b      	str	r3, [r7, #0]
 800b300:	f894 38e9 	ldrb.w	r3, [r4, #2281]	; 0x8e9
 800b304:	f043 0301 	orr.w	r3, r3, #1
 800b308:	f884 38e9 	strb.w	r3, [r4, #2281]	; 0x8e9
 800b30c:	e7ad      	b.n	800b26a <ArtNetNode::HandleDmxIn()+0x12>
 800b30e:	f810 cb01 	ldrb.w	ip, [r0], #1
 800b312:	f802 cf01 	strb.w	ip, [r2, #1]!
 800b316:	e7cc      	b.n	800b2b2 <ArtNetNode::HandleDmxIn()+0x5a>
 800b318:	f995 2993 	ldrsb.w	r2, [r5, #2451]	; 0x993
 800b31c:	f895 3993 	ldrb.w	r3, [r5, #2451]	; 0x993
 800b320:	2a00      	cmp	r2, #0
 800b322:	daa2      	bge.n	800b26a <ArtNetNode::HandleDmxIn()+0x12>
 800b324:	9a03      	ldr	r2, [sp, #12]
 800b326:	2a00      	cmp	r2, #0
 800b328:	d19f      	bne.n	800b26a <ArtNetNode::HandleDmxIn()+0x12>
 800b32a:	2201      	movs	r2, #1
 800b32c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b330:	f885 3993 	strb.w	r3, [r5, #2451]	; 0x993
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	40b2      	lsls	r2, r6
 800b338:	ea23 0302 	bic.w	r3, r3, r2
 800b33c:	603b      	str	r3, [r7, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d193      	bne.n	800b26a <ArtNetNode::HandleDmxIn()+0x12>
 800b342:	f894 38e9 	ldrb.w	r3, [r4, #2281]	; 0x8e9
 800b346:	f023 0301 	bic.w	r3, r3, #1
 800b34a:	e7dd      	b.n	800b308 <ArtNetNode::HandleDmxIn()+0xb0>
 800b34c:	20001930 	andcs	r1, r0, r0, lsr r9

0800b350 <memcmp.constprop.0>:
 800b350:	b510      	push	{r4, lr}
 800b352:	4907      	ldr	r1, [pc, #28]	; (800b370 <memcmp.constprop.0+0x20>)
 800b354:	1e42      	subs	r2, r0, #1
 800b356:	3003      	adds	r0, #3
 800b358:	4282      	cmp	r2, r0
 800b35a:	d101      	bne.n	800b360 <memcmp.constprop.0+0x10>
 800b35c:	2000      	movs	r0, #0
 800b35e:	e006      	b.n	800b36e <memcmp.constprop.0+0x1e>
 800b360:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800b364:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b368:	42a3      	cmp	r3, r4
 800b36a:	d0f5      	beq.n	800b358 <memcmp.constprop.0+0x8>
 800b36c:	1b18      	subs	r0, r3, r4
 800b36e:	bd10      	pop	{r4, pc}
 800b370:	20001934 	andcs	r1, r0, r4, lsr r9

0800b374 <memcpy.constprop.0.isra.0>:
 800b374:	3801      	subs	r0, #1
 800b376:	1d0b      	adds	r3, r1, #4
 800b378:	4299      	cmp	r1, r3
 800b37a:	d100      	bne.n	800b37e <memcpy.constprop.0.isra.0+0xa>
 800b37c:	4770      	bx	lr
 800b37e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b382:	f800 2f01 	strb.w	r2, [r0, #1]!
 800b386:	e7f7      	b.n	800b378 <memcpy.constprop.0.isra.0+0x4>

0800b388 <ArtNetNode::HandleIpProg()>:
 800b388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b38c:	f100 039c 	add.w	r3, r0, #156	; 0x9c
 800b390:	b085      	sub	sp, #20
 800b392:	4604      	mov	r4, r0
 800b394:	9303      	str	r3, [sp, #12]
 800b396:	2300      	movs	r3, #0
 800b398:	4d57      	ldr	r5, [pc, #348]	; (800b4f8 <ArtNetNode::HandleIpProg()+0x170>)
 800b39a:	f890 70aa 	ldrb.w	r7, [r0, #170]	; 0xaa
 800b39e:	6828      	ldr	r0, [r5, #0]
 800b3a0:	f890 b005 	ldrb.w	fp, [r0, #5]
 800b3a4:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 800b3a8:	f06f 0306 	mvn.w	r3, #6
 800b3ac:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 800b3b0:	f007 03c0 	and.w	r3, r7, #192	; 0xc0
 800b3b4:	2bc0      	cmp	r3, #192	; 0xc0
 800b3b6:	d101      	bne.n	800b3bc <ArtNetNode::HandleIpProg()+0x34>
 800b3b8:	f006 fb30 	bl	8011a1c <Network::EnableDhcp()>
 800b3bc:	f007 0388 	and.w	r3, r7, #136	; 0x88
 800b3c0:	2b88      	cmp	r3, #136	; 0x88
 800b3c2:	d103      	bne.n	800b3cc <ArtNetNode::HandleIpProg()+0x44>
 800b3c4:	2100      	movs	r1, #0
 800b3c6:	6828      	ldr	r0, [r5, #0]
 800b3c8:	f006 facc 	bl	8011964 <Network::SetIp(unsigned int)>
 800b3cc:	f007 0384 	and.w	r3, r7, #132	; 0x84
 800b3d0:	2b84      	cmp	r3, #132	; 0x84
 800b3d2:	4e4a      	ldr	r6, [pc, #296]	; (800b4fc <ArtNetNode::HandleIpProg()+0x174>)
 800b3d4:	f104 08ac 	add.w	r8, r4, #172	; 0xac
 800b3d8:	d107      	bne.n	800b3ea <ArtNetNode::HandleIpProg()+0x62>
 800b3da:	4641      	mov	r1, r8
 800b3dc:	4630      	mov	r0, r6
 800b3de:	f7ff ffc9 	bl	800b374 <memcpy.constprop.0.isra.0>
 800b3e2:	6831      	ldr	r1, [r6, #0]
 800b3e4:	6828      	ldr	r0, [r5, #0]
 800b3e6:	f006 fabd 	bl	8011964 <Network::SetIp(unsigned int)>
 800b3ea:	f007 0382 	and.w	r3, r7, #130	; 0x82
 800b3ee:	2b82      	cmp	r3, #130	; 0x82
 800b3f0:	f104 09b0 	add.w	r9, r4, #176	; 0xb0
 800b3f4:	d107      	bne.n	800b406 <ArtNetNode::HandleIpProg()+0x7e>
 800b3f6:	4649      	mov	r1, r9
 800b3f8:	4840      	ldr	r0, [pc, #256]	; (800b4fc <ArtNetNode::HandleIpProg()+0x174>)
 800b3fa:	f7ff ffbb 	bl	800b374 <memcpy.constprop.0.isra.0>
 800b3fe:	6831      	ldr	r1, [r6, #0]
 800b400:	6828      	ldr	r0, [r5, #0]
 800b402:	f006 fadd 	bl	80119c0 <Network::SetNetmask(unsigned int)>
 800b406:	f007 0790 	and.w	r7, r7, #144	; 0x90
 800b40a:	2f90      	cmp	r7, #144	; 0x90
 800b40c:	f104 0ab6 	add.w	sl, r4, #182	; 0xb6
 800b410:	d107      	bne.n	800b422 <ArtNetNode::HandleIpProg()+0x9a>
 800b412:	4651      	mov	r1, sl
 800b414:	4839      	ldr	r0, [pc, #228]	; (800b4fc <ArtNetNode::HandleIpProg()+0x174>)
 800b416:	f7ff ffad 	bl	800b374 <memcpy.constprop.0.isra.0>
 800b41a:	6831      	ldr	r1, [r6, #0]
 800b41c:	6828      	ldr	r0, [r5, #0]
 800b41e:	f006 fae5 	bl	80119ec <Network::SetGatewayIp(unsigned int)>
 800b422:	6829      	ldr	r1, [r5, #0]
 800b424:	794a      	ldrb	r2, [r1, #5]
 800b426:	0192      	lsls	r2, r2, #6
 800b428:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
 800b42c:	2200      	movs	r2, #0
 800b42e:	f884 20b7 	strb.w	r2, [r4, #183]	; 0xb7
 800b432:	7948      	ldrb	r0, [r1, #5]
 800b434:	6949      	ldr	r1, [r1, #20]
 800b436:	ea8b 0b00 	eor.w	fp, fp, r0
 800b43a:	4640      	mov	r0, r8
 800b43c:	6031      	str	r1, [r6, #0]
 800b43e:	f7ff ff87 	bl	800b350 <memcmp.constprop.0>
 800b442:	492e      	ldr	r1, [pc, #184]	; (800b4fc <ArtNetNode::HandleIpProg()+0x174>)
 800b444:	4607      	mov	r7, r0
 800b446:	4640      	mov	r0, r8
 800b448:	f7ff ff94 	bl	800b374 <memcpy.constprop.0.isra.0>
 800b44c:	6829      	ldr	r1, [r5, #0]
 800b44e:	4648      	mov	r0, r9
 800b450:	69c9      	ldr	r1, [r1, #28]
 800b452:	6031      	str	r1, [r6, #0]
 800b454:	f7ff ff7c 	bl	800b350 <memcmp.constprop.0>
 800b458:	4928      	ldr	r1, [pc, #160]	; (800b4fc <ArtNetNode::HandleIpProg()+0x174>)
 800b45a:	9003      	str	r0, [sp, #12]
 800b45c:	4648      	mov	r0, r9
 800b45e:	f7ff ff89 	bl	800b374 <memcpy.constprop.0.isra.0>
 800b462:	6829      	ldr	r1, [r5, #0]
 800b464:	4650      	mov	r0, sl
 800b466:	6989      	ldr	r1, [r1, #24]
 800b468:	6031      	str	r1, [r6, #0]
 800b46a:	f7ff ff71 	bl	800b350 <memcmp.constprop.0>
 800b46e:	9b03      	ldr	r3, [sp, #12]
 800b470:	4922      	ldr	r1, [pc, #136]	; (800b4fc <ArtNetNode::HandleIpProg()+0x174>)
 800b472:	431f      	orrs	r7, r3
 800b474:	4307      	orrs	r7, r0
 800b476:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 800b47a:	bf0c      	ite	eq
 800b47c:	465e      	moveq	r6, fp
 800b47e:	f04b 0601 	orrne.w	r6, fp, #1
 800b482:	f7ff ff77 	bl	800b374 <memcpy.constprop.0.isra.0>
 800b486:	2200      	movs	r2, #0
 800b488:	f641 1336 	movw	r3, #6454	; 0x1936
 800b48c:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
 800b490:	f884 20bd 	strb.w	r2, [r4, #189]	; 0xbd
 800b494:	9300      	str	r3, [sp, #0]
 800b496:	2222      	movs	r2, #34	; 0x22
 800b498:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
 800b49c:	7820      	ldrb	r0, [r4, #0]
 800b49e:	f104 019c 	add.w	r1, r4, #156	; 0x9c
 800b4a2:	f005 fc29 	bl	8010cf8 <udp_send>
 800b4a6:	b31e      	cbz	r6, 800b4f0 <ArtNetNode::HandleIpProg()+0x168>
 800b4a8:	682a      	ldr	r2, [r5, #0]
 800b4aa:	f204 507a 	addw	r0, r4, #1402	; 0x57a
 800b4ae:	6953      	ldr	r3, [r2, #20]
 800b4b0:	6263      	str	r3, [r4, #36]	; 0x24
 800b4b2:	69d1      	ldr	r1, [r2, #28]
 800b4b4:	7952      	ldrb	r2, [r2, #5]
 800b4b6:	ea63 0301 	orn	r3, r3, r1
 800b4ba:	62a3      	str	r3, [r4, #40]	; 0x28
 800b4bc:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 800b4c0:	4641      	mov	r1, r8
 800b4c2:	f023 0302 	bic.w	r3, r3, #2
 800b4c6:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800b4ca:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
 800b4ce:	f7ff ff51 	bl	800b374 <memcpy.constprop.0.isra.0>
 800b4d2:	4641      	mov	r1, r8
 800b4d4:	f204 603f 	addw	r0, r4, #1599	; 0x63f
 800b4d8:	f7ff ff4c 	bl	800b374 <memcpy.constprop.0.isra.0>
 800b4dc:	f894 38e2 	ldrb.w	r3, [r4, #2274]	; 0x8e2
 800b4e0:	b133      	cbz	r3, 800b4f0 <ArtNetNode::HandleIpProg()+0x168>
 800b4e2:	2101      	movs	r1, #1
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	b005      	add	sp, #20
 800b4e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ec:	f000 b8ea 	b.w	800b6c4 <ArtNetNode::SendPollRelply(bool)>
 800b4f0:	b005      	add	sp, #20
 800b4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4f6:	bf00      	nop
 800b4f8:	200096f8 	strdcs	r9, [r0], -r8
 800b4fc:	20001934 	andcs	r1, r0, r4, lsr r9

0800b500 <memcpy.isra.0>:
 800b500:	3801      	subs	r0, #1
 800b502:	440a      	add	r2, r1
 800b504:	4291      	cmp	r1, r2
 800b506:	d100      	bne.n	800b50a <memcpy.isra.0+0xa>
 800b508:	4770      	bx	lr
 800b50a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b50e:	f800 3f01 	strb.w	r3, [r0, #1]!
 800b512:	e7f7      	b.n	800b504 <memcpy.isra.0+0x4>

0800b514 <ArtNetNode::FillPollReply()>:
 800b514:	b538      	push	{r3, r4, r5, lr}
 800b516:	4604      	mov	r4, r0
 800b518:	f500 60ae 	add.w	r0, r0, #1392	; 0x570
 800b51c:	4603      	mov	r3, r0
 800b51e:	2100      	movs	r1, #0
 800b520:	f204 625f 	addw	r2, r4, #1631	; 0x65f
 800b524:	429a      	cmp	r2, r3
 800b526:	d153      	bne.n	800b5d0 <ArtNetNode::FillPollReply()+0xbc>
 800b528:	2208      	movs	r2, #8
 800b52a:	492b      	ldr	r1, [pc, #172]	; (800b5d8 <ArtNetNode::FillPollReply()+0xc4>)
 800b52c:	f7ff ffe8 	bl	800b500 <memcpy.isra.0>
 800b530:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 800b534:	4d29      	ldr	r5, [pc, #164]	; (800b5dc <ArtNetNode::FillPollReply()+0xc8>)
 800b536:	f8a4 3578 	strh.w	r3, [r4, #1400]	; 0x578
 800b53a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b53c:	4629      	mov	r1, r5
 800b53e:	f204 507a 	addw	r0, r4, #1402	; 0x57a
 800b542:	2204      	movs	r2, #4
 800b544:	602b      	str	r3, [r5, #0]
 800b546:	f7ff ffdb 	bl	800b500 <memcpy.isra.0>
 800b54a:	f641 1336 	movw	r3, #6454	; 0x1936
 800b54e:	f8a4 357e 	strh.w	r3, [r4, #1406]	; 0x57e
 800b552:	4b23      	ldr	r3, [pc, #140]	; (800b5e0 <ArtNetNode::FillPollReply()+0xcc>)
 800b554:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800b558:	781a      	ldrb	r2, [r3, #0]
 800b55a:	f204 508a 	addw	r0, r4, #1418	; 0x58a
 800b55e:	f884 2580 	strb.w	r2, [r4, #1408]	; 0x580
 800b562:	785b      	ldrb	r3, [r3, #1]
 800b564:	f884 3581 	strb.w	r3, [r4, #1409]	; 0x581
 800b568:	4b1e      	ldr	r3, [pc, #120]	; (800b5e4 <ArtNetNode::FillPollReply()+0xd0>)
 800b56a:	781a      	ldrb	r2, [r3, #0]
 800b56c:	f884 2584 	strb.w	r2, [r4, #1412]	; 0x584
 800b570:	785b      	ldrb	r3, [r3, #1]
 800b572:	f884 3585 	strb.w	r3, [r4, #1413]	; 0x585
 800b576:	4b1c      	ldr	r3, [pc, #112]	; (800b5e8 <ArtNetNode::FillPollReply()+0xd4>)
 800b578:	785a      	ldrb	r2, [r3, #1]
 800b57a:	781b      	ldrb	r3, [r3, #0]
 800b57c:	f884 2588 	strb.w	r2, [r4, #1416]	; 0x588
 800b580:	f884 3589 	strb.w	r3, [r4, #1417]	; 0x589
 800b584:	2212      	movs	r2, #18
 800b586:	f7ff ffbb 	bl	800b500 <memcpy.isra.0>
 800b58a:	f104 014e 	add.w	r1, r4, #78	; 0x4e
 800b58e:	f204 509c 	addw	r0, r4, #1436	; 0x59c
 800b592:	2240      	movs	r2, #64	; 0x40
 800b594:	f7ff ffb4 	bl	800b500 <memcpy.isra.0>
 800b598:	2300      	movs	r3, #0
 800b59a:	f104 0134 	add.w	r1, r4, #52	; 0x34
 800b59e:	f884 3638 	strb.w	r3, [r4, #1592]	; 0x638
 800b5a2:	f204 6039 	addw	r0, r4, #1593	; 0x639
 800b5a6:	2206      	movs	r2, #6
 800b5a8:	f7ff ffaa 	bl	800b500 <memcpy.isra.0>
 800b5ac:	4629      	mov	r1, r5
 800b5ae:	f204 603f 	addw	r0, r4, #1599	; 0x63f
 800b5b2:	2204      	movs	r2, #4
 800b5b4:	f7ff ffa4 	bl	800b500 <memcpy.isra.0>
 800b5b8:	2304      	movs	r3, #4
 800b5ba:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800b5be:	f884 361d 	strb.w	r3, [r4, #1565]	; 0x61d
 800b5c2:	f204 604a 	addw	r0, r4, #1610	; 0x64a
 800b5c6:	2206      	movs	r2, #6
 800b5c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5cc:	f7ff bf98 	b.w	800b500 <memcpy.isra.0>
 800b5d0:	f803 1b01 	strb.w	r1, [r3], #1
 800b5d4:	e7a6      	b.n	800b524 <ArtNetNode::FillPollReply()+0x10>
 800b5d6:	bf00      	nop
 800b5d8:	080167ee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, r8, r9, sl, sp, lr}
 800b5dc:	20001938 	andcs	r1, r0, r8, lsr r9
 800b5e0:	08016a28 	stmdaeq	r1, {r3, r5, r9, fp, sp, lr}
 800b5e4:	08016a24 	stmdaeq	r1, {r2, r5, r9, fp, sp, lr}
 800b5e8:	08016a26 	stmdaeq	r1, {r1, r2, r5, r9, fp, sp, lr}

0800b5ec <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)>:
 800b5ec:	1a8a      	subs	r2, r1, r2
 800b5ee:	2903      	cmp	r1, #3
 800b5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5f4:	4605      	mov	r5, r0
 800b5f6:	460e      	mov	r6, r1
 800b5f8:	461f      	mov	r7, r3
 800b5fa:	eb00 0402 	add.w	r4, r0, r2
 800b5fe:	d90e      	bls.n	800b61e <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x32>
 800b600:	2300      	movs	r3, #0
 800b602:	f884 361e 	strb.w	r3, [r4, #1566]	; 0x61e
 800b606:	f884 3626 	strb.w	r3, [r4, #1574]	; 0x626
 800b60a:	f884 3645 	strb.w	r3, [r4, #1605]	; 0x645
 800b60e:	f884 362e 	strb.w	r3, [r4, #1582]	; 0x62e
 800b612:	f884 3622 	strb.w	r3, [r4, #1570]	; 0x622
 800b616:	f884 362a 	strb.w	r3, [r4, #1578]	; 0x62a
 800b61a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b61e:	f04f 0928 	mov.w	r9, #40	; 0x28
 800b622:	fb09 0901 	mla	r9, r9, r1, r0
 800b626:	f8d9 3910 	ldr.w	r3, [r9, #2320]	; 0x910
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d115      	bne.n	800b65a <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x6e>
 800b62e:	6980      	ldr	r0, [r0, #24]
 800b630:	f899 88f3 	ldrb.w	r8, [r9, #2291]	; 0x8f3
 800b634:	6803      	ldr	r3, [r0, #0]
 800b636:	f008 0876 	and.w	r8, r8, #118	; 0x76
 800b63a:	691b      	ldr	r3, [r3, #16]
 800b63c:	4798      	blx	r3
 800b63e:	2328      	movs	r3, #40	; 0x28
 800b640:	fb03 5306 	mla	r3, r3, r6, r5
 800b644:	f000 0089 	and.w	r0, r0, #137	; 0x89
 800b648:	ea40 0808 	orr.w	r8, r0, r8
 800b64c:	f010 0001 	ands.w	r0, r0, #1
 800b650:	bf08      	it	eq
 800b652:	f8c9 0910 	streq.w	r0, [r9, #2320]	; 0x910
 800b656:	f883 88f3 	strb.w	r8, [r3, #2291]	; 0x8f3
 800b65a:	2300      	movs	r3, #0
 800b65c:	f884 361e 	strb.w	r3, [r4, #1566]	; 0x61e
 800b660:	2328      	movs	r3, #40	; 0x28
 800b662:	fb03 5306 	mla	r3, r3, r6, r5
 800b666:	f893 38f4 	ldrb.w	r3, [r3, #2292]	; 0x8f4
 800b66a:	b12b      	cbz	r3, 800b678 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x8c>
 800b66c:	2380      	movs	r3, #128	; 0x80
 800b66e:	f884 361e 	strb.w	r3, [r4, #1566]	; 0x61e
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	3301      	adds	r3, #1
 800b676:	603b      	str	r3, [r7, #0]
 800b678:	2328      	movs	r3, #40	; 0x28
 800b67a:	fb03 5306 	mla	r3, r3, r6, r5
 800b67e:	f893 28f3 	ldrb.w	r2, [r3, #2291]	; 0x8f3
 800b682:	eb05 1506 	add.w	r5, r5, r6, lsl #4
 800b686:	f884 2626 	strb.w	r2, [r4, #1574]	; 0x626
 800b68a:	f893 290c 	ldrb.w	r2, [r3, #2316]	; 0x90c
 800b68e:	2a00      	cmp	r2, #0
 800b690:	bf14      	ite	ne
 800b692:	2240      	movne	r2, #64	; 0x40
 800b694:	22c0      	moveq	r2, #192	; 0xc0
 800b696:	f884 2645 	strb.w	r2, [r4, #1605]	; 0x645
 800b69a:	f893 38f2 	ldrb.w	r3, [r3, #2290]	; 0x8f2
 800b69e:	f884 362e 	strb.w	r3, [r4, #1582]	; 0x62e
 800b6a2:	f895 3994 	ldrb.w	r3, [r5, #2452]	; 0x994
 800b6a6:	b12b      	cbz	r3, 800b6b4 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0xc8>
 800b6a8:	2340      	movs	r3, #64	; 0x40
 800b6aa:	f884 361e 	strb.w	r3, [r4, #1566]	; 0x61e
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	603b      	str	r3, [r7, #0]
 800b6b4:	f895 3993 	ldrb.w	r3, [r5, #2451]	; 0x993
 800b6b8:	f884 3622 	strb.w	r3, [r4, #1570]	; 0x622
 800b6bc:	f895 3992 	ldrb.w	r3, [r5, #2450]	; 0x992
 800b6c0:	e7a9      	b.n	800b616 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x2a>
	...

0800b6c4 <ArtNetNode::SendPollRelply(bool)>:
 800b6c4:	b530      	push	{r4, r5, lr}
 800b6c6:	4604      	mov	r4, r0
 800b6c8:	b085      	sub	sp, #20
 800b6ca:	b941      	cbnz	r1, 800b6de <ArtNetNode::SendPollRelply(bool)+0x1a>
 800b6cc:	f890 38e1 	ldrb.w	r3, [r0, #2273]	; 0x8e1
 800b6d0:	2b02      	cmp	r3, #2
 800b6d2:	bf02      	ittt	eq
 800b6d4:	f8d0 38d0 	ldreq.w	r3, [r0, #2256]	; 0x8d0
 800b6d8:	3301      	addeq	r3, #1
 800b6da:	f8c0 38d0 	streq.w	r3, [r0, #2256]	; 0x8d0
 800b6de:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
 800b6e2:	2500      	movs	r5, #0
 800b6e4:	f884 3587 	strb.w	r3, [r4, #1415]	; 0x587
 800b6e8:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 800b6ec:	9503      	str	r5, [sp, #12]
 800b6ee:	f884 3644 	strb.w	r3, [r4, #1604]	; 0x644
 800b6f2:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800b6f6:	f884 3649 	strb.w	r3, [r4, #1609]	; 0x649
 800b6fa:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800b6fc:	f8a4 3582 	strh.w	r3, [r4, #1410]	; 0x582
 800b700:	2301      	movs	r3, #1
 800b702:	f884 3643 	strb.w	r3, [r4, #1603]	; 0x643
 800b706:	4629      	mov	r1, r5
 800b708:	2200      	movs	r2, #0
 800b70a:	4620      	mov	r0, r4
 800b70c:	ab03      	add	r3, sp, #12
 800b70e:	3501      	adds	r5, #1
 800b710:	f7ff ff6c 	bl	800b5ec <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)>
 800b714:	2d04      	cmp	r5, #4
 800b716:	d1f6      	bne.n	800b706 <ArtNetNode::SendPollRelply(bool)+0x42>
 800b718:	9b03      	ldr	r3, [sp, #12]
 800b71a:	2140      	movs	r1, #64	; 0x40
 800b71c:	f884 361d 	strb.w	r3, [r4, #1565]	; 0x61d
 800b720:	f604 037d 	addw	r3, r4, #2173	; 0x87d
 800b724:	9301      	str	r3, [sp, #4]
 800b726:	f8d4 38d0 	ldr.w	r3, [r4, #2256]	; 0x8d0
 800b72a:	4a0b      	ldr	r2, [pc, #44]	; (800b758 <ArtNetNode::SendPollRelply(bool)+0x94>)
 800b72c:	9300      	str	r3, [sp, #0]
 800b72e:	f204 50dc 	addw	r0, r4, #1500	; 0x5dc
 800b732:	f894 38e0 	ldrb.w	r3, [r4, #2272]	; 0x8e0
 800b736:	f7fd fca1 	bl	800907c <snprintf>
 800b73a:	f641 1336 	movw	r3, #6454	; 0x1936
 800b73e:	22ef      	movs	r2, #239	; 0xef
 800b740:	9300      	str	r3, [sp, #0]
 800b742:	7820      	ldrb	r0, [r4, #0]
 800b744:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b746:	f504 61ae 	add.w	r1, r4, #1392	; 0x570
 800b74a:	f005 fad5 	bl	8010cf8 <udp_send>
 800b74e:	2300      	movs	r3, #0
 800b750:	f884 38e7 	strb.w	r3, [r4, #2279]	; 0x8e7
 800b754:	b005      	add	sp, #20
 800b756:	bd30      	pop	{r4, r5, pc}
 800b758:	080167db 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, r8, r9, sl, sp, lr}

0800b75c <ArtNetNode::HandlePoll()>:
 800b75c:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
 800b760:	b410      	push	{r4}
 800b762:	f3c2 0340 	ubfx	r3, r2, #1, #1
 800b766:	f880 38e2 	strb.w	r3, [r0, #2274]	; 0x8e2
 800b76a:	f012 0304 	ands.w	r3, r2, #4
 800b76e:	d02e      	beq.n	800b7ce <ArtNetNode::HandlePoll()+0x72>
 800b770:	2301      	movs	r3, #1
 800b772:	f8d0 18d8 	ldr.w	r1, [r0, #2264]	; 0x8d8
 800b776:	f890 48e4 	ldrb.w	r4, [r0, #2276]	; 0x8e4
 800b77a:	f880 38e3 	strb.w	r3, [r0, #2275]	; 0x8e3
 800b77e:	b979      	cbnz	r1, 800b7a0 <ArtNetNode::HandlePoll()+0x44>
 800b780:	f8d0 3568 	ldr.w	r3, [r0, #1384]	; 0x568
 800b784:	f8c0 38d8 	str.w	r3, [r0, #2264]	; 0x8d8
 800b788:	b19c      	cbz	r4, 800b7b2 <ArtNetNode::HandlePoll()+0x56>
 800b78a:	f890 38ec 	ldrb.w	r3, [r0, #2284]	; 0x8ec
 800b78e:	f890 20a9 	ldrb.w	r2, [r0, #169]	; 0xa9
 800b792:	4293      	cmp	r3, r2
 800b794:	bf28      	it	cs
 800b796:	4613      	movcs	r3, r2
 800b798:	f880 38ec 	strb.w	r3, [r0, #2284]	; 0x8ec
 800b79c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b79e:	e010      	b.n	800b7c2 <ArtNetNode::HandlePoll()+0x66>
 800b7a0:	2c00      	cmp	r4, #0
 800b7a2:	d1f2      	bne.n	800b78a <ArtNetNode::HandlePoll()+0x2e>
 800b7a4:	f8d0 4568 	ldr.w	r4, [r0, #1384]	; 0x568
 800b7a8:	42a1      	cmp	r1, r4
 800b7aa:	d002      	beq.n	800b7b2 <ArtNetNode::HandlePoll()+0x56>
 800b7ac:	f880 38e4 	strb.w	r3, [r0, #2276]	; 0x8e4
 800b7b0:	e7eb      	b.n	800b78a <ArtNetNode::HandlePoll()+0x2e>
 800b7b2:	f890 30a9 	ldrb.w	r3, [r0, #169]	; 0xa9
 800b7b6:	f880 38ec 	strb.w	r3, [r0, #2284]	; 0x8ec
 800b7ba:	0713      	lsls	r3, r2, #28
 800b7bc:	d5ee      	bpl.n	800b79c <ArtNetNode::HandlePoll()+0x40>
 800b7be:	f8d0 3568 	ldr.w	r3, [r0, #1384]	; 0x568
 800b7c2:	2101      	movs	r1, #1
 800b7c4:	bc10      	pop	{r4}
 800b7c6:	f8c0 38d4 	str.w	r3, [r0, #2260]	; 0x8d4
 800b7ca:	f7ff bf7b 	b.w	800b6c4 <ArtNetNode::SendPollRelply(bool)>
 800b7ce:	f880 38e3 	strb.w	r3, [r0, #2275]	; 0x8e3
 800b7d2:	e7f6      	b.n	800b7c2 <ArtNetNode::HandlePoll()+0x66>

0800b7d4 <ArtNetNode::SetRmd(unsigned int, bool)>:
 800b7d4:	2328      	movs	r3, #40	; 0x28
 800b7d6:	fb03 0301 	mla	r3, r3, r1, r0
 800b7da:	b570      	push	{r4, r5, r6, lr}
 800b7dc:	4604      	mov	r4, r0
 800b7de:	f893 090c 	ldrb.w	r0, [r3, #2316]	; 0x90c
 800b7e2:	460e      	mov	r6, r1
 800b7e4:	4290      	cmp	r0, r2
 800b7e6:	4615      	mov	r5, r2
 800b7e8:	f883 290c 	strb.w	r2, [r3, #2316]	; 0x90c
 800b7ec:	d011      	beq.n	800b812 <ArtNetNode::SetRmd(unsigned int, bool)+0x3e>
 800b7ee:	f894 38e1 	ldrb.w	r3, [r4, #2273]	; 0x8e1
 800b7f2:	2b02      	cmp	r3, #2
 800b7f4:	d10d      	bne.n	800b812 <ArtNetNode::SetRmd(unsigned int, bool)+0x3e>
 800b7f6:	69e0      	ldr	r0, [r4, #28]
 800b7f8:	b110      	cbz	r0, 800b800 <ArtNetNode::SetRmd(unsigned int, bool)+0x2c>
 800b7fa:	6803      	ldr	r3, [r0, #0]
 800b7fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7fe:	4798      	blx	r3
 800b800:	6a20      	ldr	r0, [r4, #32]
 800b802:	b130      	cbz	r0, 800b812 <ArtNetNode::SetRmd(unsigned int, bool)+0x3e>
 800b804:	6803      	ldr	r3, [r0, #0]
 800b806:	462a      	mov	r2, r5
 800b808:	4631      	mov	r1, r6
 800b80a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b810:	4718      	bx	r3
 800b812:	bd70      	pop	{r4, r5, r6, pc}

0800b814 <ArtNetNode::SendTod(unsigned int)>:
 800b814:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800b818:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b81c:	2500      	movs	r5, #0
 800b81e:	f880 30a5 	strb.w	r3, [r0, #165]	; 0xa5
 800b822:	2301      	movs	r3, #1
 800b824:	4688      	mov	r8, r1
 800b826:	4604      	mov	r4, r0
 800b828:	f880 30a8 	strb.w	r3, [r0, #168]	; 0xa8
 800b82c:	f880 50a4 	strb.w	r5, [r0, #164]	; 0xa4
 800b830:	68c0      	ldr	r0, [r0, #12]
 800b832:	088f      	lsrs	r7, r1, #2
 800b834:	6803      	ldr	r3, [r0, #0]
 800b836:	68db      	ldr	r3, [r3, #12]
 800b838:	4798      	blx	r3
 800b83a:	f008 0303 	and.w	r3, r8, #3
 800b83e:	3301      	adds	r3, #1
 800b840:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
 800b844:	1c7b      	adds	r3, r7, #1
 800b846:	b2ff      	uxtb	r7, r7
 800b848:	f884 50aa 	strb.w	r5, [r4, #170]	; 0xaa
 800b84c:	f884 50ab 	strb.w	r5, [r4, #171]	; 0xab
 800b850:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 800b854:	f884 50ad 	strb.w	r5, [r4, #173]	; 0xad
 800b858:	f884 50ae 	strb.w	r5, [r4, #174]	; 0xae
 800b85c:	f884 50af 	strb.w	r5, [r4, #175]	; 0xaf
 800b860:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
 800b864:	4427      	add	r7, r4
 800b866:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b86a:	f884 50b2 	strb.w	r5, [r4, #178]	; 0xb2
 800b86e:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 800b872:	2328      	movs	r3, #40	; 0x28
 800b874:	fb03 4308 	mla	r3, r3, r8, r4
 800b878:	f893 38f2 	ldrb.w	r3, [r3, #2290]	; 0x8f2
 800b87c:	b2c6      	uxtb	r6, r0
 800b87e:	68e0      	ldr	r0, [r4, #12]
 800b880:	f884 50b4 	strb.w	r5, [r4, #180]	; 0xb4
 800b884:	f884 50b6 	strb.w	r5, [r4, #182]	; 0xb6
 800b888:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
 800b88c:	f884 60b5 	strb.w	r6, [r4, #181]	; 0xb5
 800b890:	f884 60b7 	strb.w	r6, [r4, #183]	; 0xb7
 800b894:	6803      	ldr	r3, [r0, #0]
 800b896:	4641      	mov	r1, r8
 800b898:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
 800b89c:	691b      	ldr	r3, [r3, #16]
 800b89e:	4798      	blx	r3
 800b8a0:	2306      	movs	r3, #6
 800b8a2:	fb03 f206 	mul.w	r2, r3, r6
 800b8a6:	f641 1336 	movw	r3, #6454	; 0x1936
 800b8aa:	f104 059c 	add.w	r5, r4, #156	; 0x9c
 800b8ae:	9300      	str	r3, [sp, #0]
 800b8b0:	4629      	mov	r1, r5
 800b8b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b8b4:	7820      	ldrb	r0, [r4, #0]
 800b8b6:	321c      	adds	r2, #28
 800b8b8:	f005 fa1e 	bl	8010cf8 <udp_send>
 800b8bc:	b002      	add	sp, #8
 800b8be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b8c2 <ArtNetNode::HandleTodControl()>:
 800b8c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8c4:	4604      	mov	r4, r0
 800b8c6:	4606      	mov	r6, r0
 800b8c8:	2500      	movs	r5, #0
 800b8ca:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
 800b8ce:	f890 70b3 	ldrb.w	r7, [r0, #179]	; 0xb3
 800b8d2:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800b8d6:	f896 390c 	ldrb.w	r3, [r6, #2316]	; 0x90c
 800b8da:	b34b      	cbz	r3, 800b930 <ArtNetNode::HandleTodControl()+0x6e>
 800b8dc:	f8b6 38f0 	ldrh.w	r3, [r6, #2288]	; 0x8f0
 800b8e0:	42bb      	cmp	r3, r7
 800b8e2:	d125      	bne.n	800b930 <ArtNetNode::HandleTodControl()+0x6e>
 800b8e4:	f896 38f4 	ldrb.w	r3, [r6, #2292]	; 0x8f4
 800b8e8:	b313      	cbz	r3, 800b930 <ArtNetNode::HandleTodControl()+0x6e>
 800b8ea:	f896 3915 	ldrb.w	r3, [r6, #2325]	; 0x915
 800b8ee:	b13b      	cbz	r3, 800b900 <ArtNetNode::HandleTodControl()+0x3e>
 800b8f0:	f894 387c 	ldrb.w	r3, [r4, #2172]	; 0x87c
 800b8f4:	b923      	cbnz	r3, 800b900 <ArtNetNode::HandleTodControl()+0x3e>
 800b8f6:	6860      	ldr	r0, [r4, #4]
 800b8f8:	4629      	mov	r1, r5
 800b8fa:	6803      	ldr	r3, [r0, #0]
 800b8fc:	68db      	ldr	r3, [r3, #12]
 800b8fe:	4798      	blx	r3
 800b900:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
 800b904:	2b01      	cmp	r3, #1
 800b906:	d104      	bne.n	800b912 <ArtNetNode::HandleTodControl()+0x50>
 800b908:	68e0      	ldr	r0, [r4, #12]
 800b90a:	4629      	mov	r1, r5
 800b90c:	6803      	ldr	r3, [r0, #0]
 800b90e:	689b      	ldr	r3, [r3, #8]
 800b910:	4798      	blx	r3
 800b912:	4629      	mov	r1, r5
 800b914:	4620      	mov	r0, r4
 800b916:	f7ff ff7d 	bl	800b814 <ArtNetNode::SendTod(unsigned int)>
 800b91a:	f896 3915 	ldrb.w	r3, [r6, #2325]	; 0x915
 800b91e:	b13b      	cbz	r3, 800b930 <ArtNetNode::HandleTodControl()+0x6e>
 800b920:	f894 387c 	ldrb.w	r3, [r4, #2172]	; 0x87c
 800b924:	b923      	cbnz	r3, 800b930 <ArtNetNode::HandleTodControl()+0x6e>
 800b926:	6860      	ldr	r0, [r4, #4]
 800b928:	4629      	mov	r1, r5
 800b92a:	6803      	ldr	r3, [r0, #0]
 800b92c:	689b      	ldr	r3, [r3, #8]
 800b92e:	4798      	blx	r3
 800b930:	3501      	adds	r5, #1
 800b932:	2d04      	cmp	r5, #4
 800b934:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800b938:	d1cd      	bne.n	800b8d6 <ArtNetNode::HandleTodControl()+0x14>
 800b93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b93c <ArtNetNode::HandleTodRequest()>:
 800b93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b93e:	4604      	mov	r4, r0
 800b940:	4605      	mov	r5, r0
 800b942:	2600      	movs	r6, #0
 800b944:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
 800b948:	f890 70b4 	ldrb.w	r7, [r0, #180]	; 0xb4
 800b94c:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800b950:	f895 390c 	ldrb.w	r3, [r5, #2316]	; 0x90c
 800b954:	b153      	cbz	r3, 800b96c <ArtNetNode::HandleTodRequest()+0x30>
 800b956:	f8b5 38f0 	ldrh.w	r3, [r5, #2288]	; 0x8f0
 800b95a:	42bb      	cmp	r3, r7
 800b95c:	d106      	bne.n	800b96c <ArtNetNode::HandleTodRequest()+0x30>
 800b95e:	f895 38f4 	ldrb.w	r3, [r5, #2292]	; 0x8f4
 800b962:	b11b      	cbz	r3, 800b96c <ArtNetNode::HandleTodRequest()+0x30>
 800b964:	4631      	mov	r1, r6
 800b966:	4620      	mov	r0, r4
 800b968:	f7ff ff54 	bl	800b814 <ArtNetNode::SendTod(unsigned int)>
 800b96c:	3601      	adds	r6, #1
 800b96e:	2e04      	cmp	r6, #4
 800b970:	f105 0528 	add.w	r5, r5, #40	; 0x28
 800b974:	d1ec      	bne.n	800b950 <ArtNetNode::HandleTodRequest()+0x14>
 800b976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b978 <ArtNetNode::HandleRdm()>:
 800b978:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b97c:	4604      	mov	r4, r0
 800b97e:	4605      	mov	r5, r0
 800b980:	2600      	movs	r6, #0
 800b982:	f04f 0a01 	mov.w	sl, #1
 800b986:	f641 1b36 	movw	fp, #6454	; 0x1936
 800b98a:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
 800b98e:	f890 70b3 	ldrb.w	r7, [r0, #179]	; 0xb3
 800b992:	f100 089c 	add.w	r8, r0, #156	; 0x9c
 800b996:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800b99a:	f100 09b4 	add.w	r9, r0, #180	; 0xb4
 800b99e:	f895 390c 	ldrb.w	r3, [r5, #2316]	; 0x90c
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d049      	beq.n	800ba3a <ArtNetNode::HandleRdm()+0xc2>
 800b9a6:	f8b5 38f0 	ldrh.w	r3, [r5, #2288]	; 0x8f0
 800b9aa:	42bb      	cmp	r3, r7
 800b9ac:	d145      	bne.n	800ba3a <ArtNetNode::HandleRdm()+0xc2>
 800b9ae:	f895 38f4 	ldrb.w	r3, [r5, #2292]	; 0x8f4
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d041      	beq.n	800ba3a <ArtNetNode::HandleRdm()+0xc2>
 800b9b6:	f894 387c 	ldrb.w	r3, [r4, #2172]	; 0x87c
 800b9ba:	b9c3      	cbnz	r3, 800b9ee <ArtNetNode::HandleRdm()+0x76>
 800b9bc:	f8d5 3910 	ldr.w	r3, [r5, #2320]	; 0x910
 800b9c0:	2b01      	cmp	r3, #1
 800b9c2:	d10c      	bne.n	800b9de <ArtNetNode::HandleRdm()+0x66>
 800b9c4:	69a0      	ldr	r0, [r4, #24]
 800b9c6:	b150      	cbz	r0, 800b9de <ArtNetNode::HandleRdm()+0x66>
 800b9c8:	6803      	ldr	r3, [r0, #0]
 800b9ca:	4631      	mov	r1, r6
 800b9cc:	691b      	ldr	r3, [r3, #16]
 800b9ce:	4798      	blx	r3
 800b9d0:	f010 0f89 	tst.w	r0, #137	; 0x89
 800b9d4:	bf14      	ite	ne
 800b9d6:	2301      	movne	r3, #1
 800b9d8:	2300      	moveq	r3, #0
 800b9da:	f885 3915 	strb.w	r3, [r5, #2325]	; 0x915
 800b9de:	f895 3915 	ldrb.w	r3, [r5, #2325]	; 0x915
 800b9e2:	b123      	cbz	r3, 800b9ee <ArtNetNode::HandleRdm()+0x76>
 800b9e4:	6860      	ldr	r0, [r4, #4]
 800b9e6:	4631      	mov	r1, r6
 800b9e8:	6803      	ldr	r3, [r0, #0]
 800b9ea:	68db      	ldr	r3, [r3, #12]
 800b9ec:	4798      	blx	r3
 800b9ee:	68e0      	ldr	r0, [r4, #12]
 800b9f0:	464a      	mov	r2, r9
 800b9f2:	6803      	ldr	r3, [r0, #0]
 800b9f4:	4631      	mov	r1, r6
 800b9f6:	695b      	ldr	r3, [r3, #20]
 800b9f8:	4798      	blx	r3
 800b9fa:	b198      	cbz	r0, 800ba24 <ArtNetNode::HandleRdm()+0xac>
 800b9fc:	f884 a0a8 	strb.w	sl, [r4, #168]	; 0xa8
 800ba00:	7881      	ldrb	r1, [r0, #2]
 800ba02:	1c43      	adds	r3, r0, #1
 800ba04:	460a      	mov	r2, r1
 800ba06:	3102      	adds	r1, #2
 800ba08:	f104 0cb3 	add.w	ip, r4, #179	; 0xb3
 800ba0c:	4408      	add	r0, r1
 800ba0e:	4298      	cmp	r0, r3
 800ba10:	d11b      	bne.n	800ba4a <ArtNetNode::HandleRdm()+0xd2>
 800ba12:	4641      	mov	r1, r8
 800ba14:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
 800ba18:	7820      	ldrb	r0, [r4, #0]
 800ba1a:	f8cd b000 	str.w	fp, [sp]
 800ba1e:	3219      	adds	r2, #25
 800ba20:	f005 f96a 	bl	8010cf8 <udp_send>
 800ba24:	f895 3915 	ldrb.w	r3, [r5, #2325]	; 0x915
 800ba28:	b13b      	cbz	r3, 800ba3a <ArtNetNode::HandleRdm()+0xc2>
 800ba2a:	f894 387c 	ldrb.w	r3, [r4, #2172]	; 0x87c
 800ba2e:	b923      	cbnz	r3, 800ba3a <ArtNetNode::HandleRdm()+0xc2>
 800ba30:	6860      	ldr	r0, [r4, #4]
 800ba32:	4631      	mov	r1, r6
 800ba34:	6803      	ldr	r3, [r0, #0]
 800ba36:	689b      	ldr	r3, [r3, #8]
 800ba38:	4798      	blx	r3
 800ba3a:	3601      	adds	r6, #1
 800ba3c:	2e04      	cmp	r6, #4
 800ba3e:	f105 0528 	add.w	r5, r5, #40	; 0x28
 800ba42:	d1ac      	bne.n	800b99e <ArtNetNode::HandleRdm()+0x26>
 800ba44:	b003      	add	sp, #12
 800ba46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba4a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800ba4e:	f80c 1f01 	strb.w	r1, [ip, #1]!
 800ba52:	e7dc      	b.n	800ba0e <ArtNetNode::HandleRdm()+0x96>

0800ba54 <ArtNetNode::HandleSync()>:
 800ba54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba58:	2500      	movs	r5, #0
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	4604      	mov	r4, r0
 800ba5e:	4606      	mov	r6, r0
 800ba60:	46a9      	mov	r9, r5
 800ba62:	f880 38e5 	strb.w	r3, [r0, #2277]	; 0x8e5
 800ba66:	4b1d      	ldr	r3, [pc, #116]	; (800badc <ArtNetNode::HandleSync()+0x88>)
 800ba68:	4f1d      	ldr	r7, [pc, #116]	; (800bae0 <ArtNetNode::HandleSync()+0x8c>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f8df 8074 	ldr.w	r8, [pc, #116]	; 800bae4 <ArtNetNode::HandleSync()+0x90>
 800ba70:	f8c0 38dc 	str.w	r3, [r0, #2268]	; 0x8dc
 800ba74:	f8d6 3910 	ldr.w	r3, [r6, #2320]	; 0x910
 800ba78:	bb3b      	cbnz	r3, 800baca <ArtNetNode::HandleSync()+0x76>
 800ba7a:	f896 38f4 	ldrb.w	r3, [r6, #2292]	; 0x8f4
 800ba7e:	b323      	cbz	r3, 800baca <ArtNetNode::HandleSync()+0x76>
 800ba80:	f8d8 3000 	ldr.w	r3, [r8]
 800ba84:	6860      	ldr	r0, [r4, #4]
 800ba86:	07da      	lsls	r2, r3, #31
 800ba88:	bf5c      	itt	pl
 800ba8a:	2301      	movpl	r3, #1
 800ba8c:	f8c8 3000 	strpl.w	r3, [r8]
 800ba90:	6803      	ldr	r3, [r0, #0]
 800ba92:	4629      	mov	r1, r5
 800ba94:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800ba98:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 800ba9c:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800baa0:	47d0      	blx	sl
 800baa2:	f896 3915 	ldrb.w	r3, [r6, #2325]	; 0x915
 800baa6:	b93b      	cbnz	r3, 800bab8 <ArtNetNode::HandleSync()+0x64>
 800baa8:	6860      	ldr	r0, [r4, #4]
 800baaa:	4629      	mov	r1, r5
 800baac:	6803      	ldr	r3, [r0, #0]
 800baae:	689b      	ldr	r3, [r3, #8]
 800bab0:	4798      	blx	r3
 800bab2:	2301      	movs	r3, #1
 800bab4:	f886 3915 	strb.w	r3, [r6, #2325]	; 0x915
 800bab8:	f8d8 3000 	ldr.w	r3, [r8]
 800babc:	f8c7 9600 	str.w	r9, [r7, #1536]	; 0x600
 800bac0:	07db      	lsls	r3, r3, #31
 800bac2:	bf5c      	itt	pl
 800bac4:	2301      	movpl	r3, #1
 800bac6:	f8c8 3000 	strpl.w	r3, [r8]
 800baca:	3501      	adds	r5, #1
 800bacc:	2d04      	cmp	r5, #4
 800bace:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800bad2:	f207 6704 	addw	r7, r7, #1540	; 0x604
 800bad6:	d1cd      	bne.n	800ba74 <ArtNetNode::HandleSync()+0x20>
 800bad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800badc:	20009dd4 	ldrdcs	r9, [r0], -r4
 800bae0:	2000011c 	andcs	r0, r0, ip, lsl r1
 800bae4:	20000118 	andcs	r0, r0, r8, lsl r1

0800bae8 <ArtNetNode::HandleTimeCode()>:
 800bae8:	4601      	mov	r1, r0
 800baea:	6880      	ldr	r0, [r0, #8]
 800baec:	31aa      	adds	r1, #170	; 0xaa
 800baee:	6803      	ldr	r3, [r0, #0]
 800baf0:	691b      	ldr	r3, [r3, #16]
 800baf2:	4718      	bx	r3

0800baf4 <ArtNetNode::HandleTimeSync()>:
 800baf4:	b500      	push	{lr}
 800baf6:	f890 30ab 	ldrb.w	r3, [r0, #171]	; 0xab
 800bafa:	b08b      	sub	sp, #44	; 0x2c
 800bafc:	9301      	str	r3, [sp, #4]
 800bafe:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 800bb02:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
 800bb06:	9302      	str	r3, [sp, #8]
 800bb08:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
 800bb0c:	a901      	add	r1, sp, #4
 800bb0e:	9303      	str	r3, [sp, #12]
 800bb10:	f890 30ae 	ldrb.w	r3, [r0, #174]	; 0xae
 800bb14:	9304      	str	r3, [sp, #16]
 800bb16:	f890 30af 	ldrb.w	r3, [r0, #175]	; 0xaf
 800bb1a:	9305      	str	r3, [sp, #20]
 800bb1c:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
 800bb20:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800bb24:	9306      	str	r3, [sp, #24]
 800bb26:	4b03      	ldr	r3, [pc, #12]	; (800bb34 <ArtNetNode::HandleTimeSync()+0x40>)
 800bb28:	6818      	ldr	r0, [r3, #0]
 800bb2a:	f008 f903 	bl	8013d34 <Hardware::SetTime(tm const*)>
 800bb2e:	b00b      	add	sp, #44	; 0x2c
 800bb30:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb34:	20009dc0 	andcs	r9, r0, r0, asr #27

0800bb38 <ArtNetNode::Print()>:
 800bb38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb3c:	4604      	mov	r4, r0
 800bb3e:	b087      	sub	sp, #28
 800bb40:	2201      	movs	r2, #1
 800bb42:	2104      	movs	r1, #4
 800bb44:	4839      	ldr	r0, [pc, #228]	; (800bc2c <ArtNetNode::Print()+0xf4>)
 800bb46:	f7fd fa71 	bl	800902c <printf>
 800bb4a:	4b39      	ldr	r3, [pc, #228]	; (800bc30 <ArtNetNode::Print()+0xf8>)
 800bb4c:	4839      	ldr	r0, [pc, #228]	; (800bc34 <ArtNetNode::Print()+0xfc>)
 800bb4e:	7819      	ldrb	r1, [r3, #0]
 800bb50:	785a      	ldrb	r2, [r3, #1]
 800bb52:	f7fd fa6b 	bl	800902c <printf>
 800bb56:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800bb5a:	4837      	ldr	r0, [pc, #220]	; (800bc38 <ArtNetNode::Print()+0x100>)
 800bb5c:	f7fd fa66 	bl	800902c <printf>
 800bb60:	4836      	ldr	r0, [pc, #216]	; (800bc3c <ArtNetNode::Print()+0x104>)
 800bb62:	f104 014e 	add.w	r1, r4, #78	; 0x4e
 800bb66:	f7fd fa61 	bl	800902c <printf>
 800bb6a:	f894 38ea 	ldrb.w	r3, [r4, #2282]	; 0x8ea
 800bb6e:	b36b      	cbz	r3, 800bbcc <ArtNetNode::Print()+0x94>
 800bb70:	4833      	ldr	r0, [pc, #204]	; (800bc40 <ArtNetNode::Print()+0x108>)
 800bb72:	f7fd fa5b 	bl	800902c <printf>
 800bb76:	4626      	mov	r6, r4
 800bb78:	2500      	movs	r5, #0
 800bb7a:	4f32      	ldr	r7, [pc, #200]	; (800bc44 <ArtNetNode::Print()+0x10c>)
 800bb7c:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 800bc48 <ArtNetNode::Print()+0x110>
 800bb80:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800bc4c <ArtNetNode::Print()+0x114>
 800bb84:	2301      	movs	r3, #1
 800bb86:	4629      	mov	r1, r5
 800bb88:	4620      	mov	r0, r4
 800bb8a:	f10d 0216 	add.w	r2, sp, #22
 800bb8e:	f7fe fe77 	bl	800a880 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800bb92:	b1b0      	cbz	r0, 800bbc2 <ArtNetNode::Print()+0x8a>
 800bb94:	f8d6 3908 	ldr.w	r3, [r6, #2312]	; 0x908
 800bb98:	4629      	mov	r1, r5
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	bf0c      	ite	eq
 800bb9e:	463b      	moveq	r3, r7
 800bba0:	4643      	movne	r3, r8
 800bba2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800bba6:	4648      	mov	r0, r9
 800bba8:	f7fd fa40 	bl	800902c <printf>
 800bbac:	f8d6 1910 	ldr.w	r1, [r6, #2320]	; 0x910
 800bbb0:	4a27      	ldr	r2, [pc, #156]	; (800bc50 <ArtNetNode::Print()+0x118>)
 800bbb2:	4b28      	ldr	r3, [pc, #160]	; (800bc54 <ArtNetNode::Print()+0x11c>)
 800bbb4:	4828      	ldr	r0, [pc, #160]	; (800bc58 <ArtNetNode::Print()+0x120>)
 800bbb6:	2900      	cmp	r1, #0
 800bbb8:	bf0c      	ite	eq
 800bbba:	4611      	moveq	r1, r2
 800bbbc:	4619      	movne	r1, r3
 800bbbe:	f7fd fa35 	bl	800902c <printf>
 800bbc2:	3501      	adds	r5, #1
 800bbc4:	2d04      	cmp	r5, #4
 800bbc6:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800bbca:	d1db      	bne.n	800bb84 <ArtNetNode::Print()+0x4c>
 800bbcc:	f894 38eb 	ldrb.w	r3, [r4, #2283]	; 0x8eb
 800bbd0:	b34b      	cbz	r3, 800bc26 <ArtNetNode::Print()+0xee>
 800bbd2:	4822      	ldr	r0, [pc, #136]	; (800bc5c <ArtNetNode::Print()+0x124>)
 800bbd4:	f7fd fa2a 	bl	800902c <printf>
 800bbd8:	2500      	movs	r5, #0
 800bbda:	4e21      	ldr	r6, [pc, #132]	; (800bc60 <ArtNetNode::Print()+0x128>)
 800bbdc:	4f21      	ldr	r7, [pc, #132]	; (800bc64 <ArtNetNode::Print()+0x12c>)
 800bbde:	2300      	movs	r3, #0
 800bbe0:	4629      	mov	r1, r5
 800bbe2:	4620      	mov	r0, r4
 800bbe4:	f10d 0216 	add.w	r2, sp, #22
 800bbe8:	f7fe fe4a 	bl	800a880 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800bbec:	b1c0      	cbz	r0, 800bc20 <ArtNetNode::Print()+0xe8>
 800bbee:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 800bbf2:	f8d3 3998 	ldr.w	r3, [r3, #2456]	; 0x998
 800bbf6:	b923      	cbnz	r3, 800bc02 <ArtNetNode::Print()+0xca>
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	69da      	ldr	r2, [r3, #28]
 800bbfc:	695b      	ldr	r3, [r3, #20]
 800bbfe:	ea63 0302 	orn	r3, r3, r2
 800bc02:	0e1a      	lsrs	r2, r3, #24
 800bc04:	9202      	str	r2, [sp, #8]
 800bc06:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800bc0a:	9201      	str	r2, [sp, #4]
 800bc0c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800bc10:	9200      	str	r2, [sp, #0]
 800bc12:	4629      	mov	r1, r5
 800bc14:	4630      	mov	r0, r6
 800bc16:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800bc1a:	b2db      	uxtb	r3, r3
 800bc1c:	f7fd fa06 	bl	800902c <printf>
 800bc20:	3501      	adds	r5, #1
 800bc22:	2d04      	cmp	r5, #4
 800bc24:	d1db      	bne.n	800bbde <ArtNetNode::Print()+0xa6>
 800bc26:	b007      	add	sp, #28
 800bc28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc2c:	0801680b 	stmdaeq	r1, {r0, r1, r3, fp, sp, lr}
 800bc30:	08016a28 	stmdaeq	r1, {r3, r5, r9, fp, sp, lr}
 800bc34:	08016819 	stmdaeq	r1, {r0, r3, r4, fp, sp, lr}
 800bc38:	0801682e 	stmdaeq	r1, {r1, r2, r3, r5, fp, sp, lr}
 800bc3c:	08016840 	stmdaeq	r1, {r6, fp, sp, lr}
 800bc40:	08016852 	stmdaeq	r1, {r1, r4, r6, fp, sp, lr}
 800bc44:	080167f6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r8, r9, sl, sp, lr}
 800bc48:	080167fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr}
 800bc4c:	0801685b 	stmdaeq	r1, {r0, r1, r3, r4, r6, fp, sp, lr}
 800bc50:	080167fe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr}
 800bc54:	08016806 	stmdaeq	r1, {r1, r2, fp, sp, lr}
 800bc58:	0801686f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, fp, sp, lr}
 800bc5c:	08016876 	stmdaeq	r1, {r1, r2, r4, r5, r6, fp, sp, lr}
 800bc60:	0801687e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, fp, sp, lr}
 800bc64:	200096f8 	strdcs	r9, [r0], -r8

0800bc68 <memcmp>:
 800bc68:	4402      	add	r2, r0
 800bc6a:	4290      	cmp	r0, r2
 800bc6c:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 800bc70:	d106      	bne.n	800bc80 <memcmp+0x18>
 800bc72:	2000      	movs	r0, #0
 800bc74:	4770      	bx	lr
 800bc76:	3001      	adds	r0, #1
 800bc78:	4290      	cmp	r0, r2
 800bc7a:	d102      	bne.n	800bc82 <memcmp+0x1a>
 800bc7c:	2000      	movs	r0, #0
 800bc7e:	e006      	b.n	800bc8e <memcmp+0x26>
 800bc80:	b510      	push	{r4, lr}
 800bc82:	7803      	ldrb	r3, [r0, #0]
 800bc84:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bc88:	42a3      	cmp	r3, r4
 800bc8a:	d0f4      	beq.n	800bc76 <memcmp+0xe>
 800bc8c:	1b18      	subs	r0, r3, r4
 800bc8e:	bd10      	pop	{r4, pc}

0800bc90 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 800bc90:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bc92:	88c6      	ldrh	r6, [r0, #6]
 800bc94:	8885      	ldrh	r5, [r0, #4]
 800bc96:	42ae      	cmp	r6, r5
 800bc98:	d216      	bcs.n	800bcc8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 800bc9a:	4604      	mov	r4, r0
 800bc9c:	6800      	ldr	r0, [r0, #0]
 800bc9e:	1bad      	subs	r5, r5, r6
 800bca0:	4430      	add	r0, r6
 800bca2:	7a26      	ldrb	r6, [r4, #8]
 800bca4:	b923      	cbnz	r3, 800bcb0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 800bca6:	b926      	cbnz	r6, 800bcb2 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 800bca8:	9200      	str	r2, [sp, #0]
 800bcaa:	460b      	mov	r3, r1
 800bcac:	4a09      	ldr	r2, [pc, #36]	; (800bcd4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 800bcae:	e003      	b.n	800bcb8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800bcb0:	b166      	cbz	r6, 800bccc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	9200      	str	r2, [sp, #0]
 800bcb6:	4a08      	ldr	r2, [pc, #32]	; (800bcd8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 800bcb8:	4629      	mov	r1, r5
 800bcba:	f7fd f9df 	bl	800907c <snprintf>
 800bcbe:	4285      	cmp	r5, r0
 800bcc0:	bfa2      	ittt	ge
 800bcc2:	88e3      	ldrhge	r3, [r4, #6]
 800bcc4:	181b      	addge	r3, r3, r0
 800bcc6:	80e3      	strhge	r3, [r4, #6]
 800bcc8:	b002      	add	sp, #8
 800bcca:	bd70      	pop	{r4, r5, r6, pc}
 800bccc:	9200      	str	r2, [sp, #0]
 800bcce:	460b      	mov	r3, r1
 800bcd0:	4a02      	ldr	r2, [pc, #8]	; (800bcdc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 800bcd2:	e7f1      	b.n	800bcb8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800bcd4:	08016595 	stmdaeq	r1, {r0, r2, r4, r7, r8, sl, sp, lr}
 800bcd8:	0801658c 	stmdaeq	r1, {r2, r3, r7, r8, sl, sp, lr}
 800bcdc:	08016596 	stmdaeq	r1, {r1, r2, r4, r7, r8, sl, sp, lr}

0800bce0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800bce0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bce2:	88c6      	ldrh	r6, [r0, #6]
 800bce4:	8885      	ldrh	r5, [r0, #4]
 800bce6:	42ae      	cmp	r6, r5
 800bce8:	d216      	bcs.n	800bd18 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800bcea:	4604      	mov	r4, r0
 800bcec:	6800      	ldr	r0, [r0, #0]
 800bcee:	1bad      	subs	r5, r5, r6
 800bcf0:	4430      	add	r0, r6
 800bcf2:	7a26      	ldrb	r6, [r4, #8]
 800bcf4:	b923      	cbnz	r3, 800bd00 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800bcf6:	b926      	cbnz	r6, 800bd02 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800bcf8:	9200      	str	r2, [sp, #0]
 800bcfa:	460b      	mov	r3, r1
 800bcfc:	4a09      	ldr	r2, [pc, #36]	; (800bd24 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800bcfe:	e003      	b.n	800bd08 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800bd00:	b166      	cbz	r6, 800bd1c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800bd02:	460b      	mov	r3, r1
 800bd04:	9200      	str	r2, [sp, #0]
 800bd06:	4a08      	ldr	r2, [pc, #32]	; (800bd28 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800bd08:	4629      	mov	r1, r5
 800bd0a:	f7fd f9b7 	bl	800907c <snprintf>
 800bd0e:	4285      	cmp	r5, r0
 800bd10:	bfa2      	ittt	ge
 800bd12:	88e3      	ldrhge	r3, [r4, #6]
 800bd14:	181b      	addge	r3, r3, r0
 800bd16:	80e3      	strhge	r3, [r4, #6]
 800bd18:	b002      	add	sp, #8
 800bd1a:	bd70      	pop	{r4, r5, r6, pc}
 800bd1c:	9200      	str	r2, [sp, #0]
 800bd1e:	460b      	mov	r3, r1
 800bd20:	4a02      	ldr	r2, [pc, #8]	; (800bd2c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800bd22:	e7f1      	b.n	800bd08 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800bd24:	080165a8 	stmdaeq	r1, {r3, r5, r7, r8, sl, sp, lr}
 800bd28:	0801659d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, sl, sp, lr}
 800bd2c:	080165a9 	stmdaeq	r1, {r0, r3, r5, r7, r8, sl, sp, lr}

0800bd30 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800bd30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd32:	460b      	mov	r3, r1
 800bd34:	8885      	ldrh	r5, [r0, #4]
 800bd36:	88c1      	ldrh	r1, [r0, #6]
 800bd38:	42a9      	cmp	r1, r5
 800bd3a:	d214      	bcs.n	800bd66 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800bd3c:	4604      	mov	r4, r0
 800bd3e:	6800      	ldr	r0, [r0, #0]
 800bd40:	1a6d      	subs	r5, r5, r1
 800bd42:	4408      	add	r0, r1
 800bd44:	7a21      	ldrb	r1, [r4, #8]
 800bd46:	b91a      	cbnz	r2, 800bd50 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800bd48:	b919      	cbnz	r1, 800bd52 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800bd4a:	4a0a      	ldr	r2, [pc, #40]	; (800bd74 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800bd4c:	9100      	str	r1, [sp, #0]
 800bd4e:	e002      	b.n	800bd56 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800bd50:	b159      	cbz	r1, 800bd6a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800bd52:	9200      	str	r2, [sp, #0]
 800bd54:	4a08      	ldr	r2, [pc, #32]	; (800bd78 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800bd56:	4629      	mov	r1, r5
 800bd58:	f7fd f990 	bl	800907c <snprintf>
 800bd5c:	4285      	cmp	r5, r0
 800bd5e:	bfa2      	ittt	ge
 800bd60:	88e3      	ldrhge	r3, [r4, #6]
 800bd62:	181b      	addge	r3, r3, r0
 800bd64:	80e3      	strhge	r3, [r4, #6]
 800bd66:	b003      	add	sp, #12
 800bd68:	bd30      	pop	{r4, r5, pc}
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	9200      	str	r2, [sp, #0]
 800bd6e:	4a03      	ldr	r2, [pc, #12]	; (800bd7c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800bd70:	e7f1      	b.n	800bd56 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800bd72:	bf00      	nop
 800bd74:	08016595 	stmdaeq	r1, {r0, r2, r4, r7, r8, sl, sp, lr}
 800bd78:	0801658c 	stmdaeq	r1, {r2, r3, r7, r8, sl, sp, lr}
 800bd7c:	08016596 	stmdaeq	r1, {r1, r2, r4, r7, r8, sl, sp, lr}

0800bd80 <strncpy.isra.0>:
 800bd80:	1e4b      	subs	r3, r1, #1
 800bd82:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800bd86:	b909      	cbnz	r1, 800bd8c <strncpy.isra.0+0xc>
 800bd88:	f008 b8ec 	b.w	8013f64 <memset>
 800bd8c:	3a01      	subs	r2, #1
 800bd8e:	f800 1b01 	strb.w	r1, [r0], #1
 800bd92:	d1f6      	bne.n	800bd82 <strncpy.isra.0+0x2>
 800bd94:	4770      	bx	lr
	...

0800bd98 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>:
 800bd98:	b510      	push	{r4, lr}
 800bd9a:	2287      	movs	r2, #135	; 0x87
 800bd9c:	4604      	mov	r4, r0
 800bd9e:	f840 1b04 	str.w	r1, [r0], #4
 800bda2:	2100      	movs	r1, #0
 800bda4:	f008 f8de 	bl	8013f64 <memset>
 800bda8:	2301      	movs	r3, #1
 800bdaa:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800bdae:	f240 3302 	movw	r3, #770	; 0x302
 800bdb2:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800bdb6:	2355      	movs	r3, #85	; 0x55
 800bdb8:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	2204      	movs	r2, #4
 800bdc0:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800bdc4:	4b03      	ldr	r3, [pc, #12]	; (800bdd4 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)+0x3c>)
 800bdc6:	f884 206e 	strb.w	r2, [r4, #110]	; 0x6e
 800bdca:	6819      	ldr	r1, [r3, #0]
 800bdcc:	b901      	cbnz	r1, 800bdd0 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)+0x38>
 800bdce:	601a      	str	r2, [r3, #0]
 800bdd0:	4620      	mov	r0, r4
 800bdd2:	bd10      	pop	{r4, pc}
 800bdd4:	2000193c 	andcs	r1, r0, ip, lsr r9

0800bdd8 <ArtNetParams::Load()>:
 800bdd8:	b508      	push	{r3, lr}
 800bdda:	2300      	movs	r3, #0
 800bddc:	4601      	mov	r1, r0
 800bdde:	6043      	str	r3, [r0, #4]
 800bde0:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800bde4:	6800      	ldr	r0, [r0, #0]
 800bde6:	b120      	cbz	r0, 800bdf2 <ArtNetParams::Load()+0x1a>
 800bde8:	6803      	ldr	r3, [r0, #0]
 800bdea:	3104      	adds	r1, #4
 800bdec:	68db      	ldr	r3, [r3, #12]
 800bdee:	4798      	blx	r3
 800bdf0:	2001      	movs	r0, #1
 800bdf2:	bd08      	pop	{r3, pc}

0800bdf4 <ArtNetParams::Load(char const*, unsigned int)>:
 800bdf4:	6803      	ldr	r3, [r0, #0]
 800bdf6:	b1e3      	cbz	r3, 800be32 <ArtNetParams::Load(char const*, unsigned int)+0x3e>
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bdfc:	460d      	mov	r5, r1
 800bdfe:	4616      	mov	r6, r2
 800be00:	4604      	mov	r4, r0
 800be02:	6043      	str	r3, [r0, #4]
 800be04:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800be08:	4602      	mov	r2, r0
 800be0a:	490a      	ldr	r1, [pc, #40]	; (800be34 <ArtNetParams::Load(char const*, unsigned int)+0x40>)
 800be0c:	4668      	mov	r0, sp
 800be0e:	f007 fa27 	bl	8013260 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800be12:	4632      	mov	r2, r6
 800be14:	4629      	mov	r1, r5
 800be16:	4668      	mov	r0, sp
 800be18:	f007 fa26 	bl	8013268 <ReadConfigFile::Read(char const*, unsigned int)>
 800be1c:	4621      	mov	r1, r4
 800be1e:	f851 0b04 	ldr.w	r0, [r1], #4
 800be22:	6803      	ldr	r3, [r0, #0]
 800be24:	689b      	ldr	r3, [r3, #8]
 800be26:	4798      	blx	r3
 800be28:	4668      	mov	r0, sp
 800be2a:	f007 fa1c 	bl	8013266 <ReadConfigFile::~ReadConfigFile()>
 800be2e:	b002      	add	sp, #8
 800be30:	bd70      	pop	{r4, r5, r6, pc}
 800be32:	4770      	bx	lr
 800be34:	0800c219 	stmdaeq	r0, {r0, r3, r4, r9, lr, pc}

0800be38 <ArtNetParams::SetBool(unsigned char, unsigned int)>:
 800be38:	6843      	ldr	r3, [r0, #4]
 800be3a:	b111      	cbz	r1, 800be42 <ArtNetParams::SetBool(unsigned char, unsigned int)+0xa>
 800be3c:	4313      	orrs	r3, r2
 800be3e:	6043      	str	r3, [r0, #4]
 800be40:	4770      	bx	lr
 800be42:	ea23 0302 	bic.w	r3, r3, r2
 800be46:	e7fa      	b.n	800be3e <ArtNetParams::SetBool(unsigned char, unsigned int)+0x6>

0800be48 <ArtNetParams::callbackFunction(char const*)>:
 800be48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be4c:	460e      	mov	r6, r1
 800be4e:	b0a7      	sub	sp, #156	; 0x9c
 800be50:	4604      	mov	r4, r0
 800be52:	499d      	ldr	r1, [pc, #628]	; (800c0c8 <ArtNetParams::callbackFunction(char const*)+0x280>)
 800be54:	4630      	mov	r0, r6
 800be56:	f10d 020f 	add.w	r2, sp, #15
 800be5a:	f007 fb3d 	bl	80134d8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800be5e:	b940      	cbnz	r0, 800be72 <ArtNetParams::callbackFunction(char const*)+0x2a>
 800be60:	2220      	movs	r2, #32
 800be62:	4620      	mov	r0, r4
 800be64:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800be68:	b027      	add	sp, #156	; 0x9c
 800be6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be6e:	f7ff bfe3 	b.w	800be38 <ArtNetParams::SetBool(unsigned char, unsigned int)>
 800be72:	2708      	movs	r7, #8
 800be74:	4630      	mov	r0, r6
 800be76:	4995      	ldr	r1, [pc, #596]	; (800c0cc <ArtNetParams::callbackFunction(char const*)+0x284>)
 800be78:	ab05      	add	r3, sp, #20
 800be7a:	aa06      	add	r2, sp, #24
 800be7c:	9705      	str	r7, [sp, #20]
 800be7e:	f007 fa27 	bl	80132d0 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800be82:	bb40      	cbnz	r0, 800bed6 <ArtNetParams::callbackFunction(char const*)+0x8e>
 800be84:	2204      	movs	r2, #4
 800be86:	4992      	ldr	r1, [pc, #584]	; (800c0d0 <ArtNetParams::callbackFunction(char const*)+0x288>)
 800be88:	a806      	add	r0, sp, #24
 800be8a:	f7ff feed 	bl	800bc68 <memcmp>
 800be8e:	6865      	ldr	r5, [r4, #4]
 800be90:	b188      	cbz	r0, 800beb6 <ArtNetParams::callbackFunction(char const*)+0x6e>
 800be92:	2203      	movs	r2, #3
 800be94:	498f      	ldr	r1, [pc, #572]	; (800c0d4 <ArtNetParams::callbackFunction(char const*)+0x28c>)
 800be96:	a806      	add	r0, sp, #24
 800be98:	f7ff fee6 	bl	800bc68 <memcmp>
 800be9c:	b198      	cbz	r0, 800bec6 <ArtNetParams::callbackFunction(char const*)+0x7e>
 800be9e:	2202      	movs	r2, #2
 800bea0:	498d      	ldr	r1, [pc, #564]	; (800c0d8 <ArtNetParams::callbackFunction(char const*)+0x290>)
 800bea2:	a806      	add	r0, sp, #24
 800bea4:	f7ff fee0 	bl	800bc68 <memcmp>
 800bea8:	b188      	cbz	r0, 800bece <ArtNetParams::callbackFunction(char const*)+0x86>
 800beaa:	463a      	mov	r2, r7
 800beac:	498b      	ldr	r1, [pc, #556]	; (800c0dc <ArtNetParams::callbackFunction(char const*)+0x294>)
 800beae:	a806      	add	r0, sp, #24
 800beb0:	f7ff feda 	bl	800bc68 <memcmp>
 800beb4:	b168      	cbz	r0, 800bed2 <ArtNetParams::callbackFunction(char const*)+0x8a>
 800beb6:	2300      	movs	r3, #0
 800beb8:	f025 0510 	bic.w	r5, r5, #16
 800bebc:	6065      	str	r5, [r4, #4]
 800bebe:	72a3      	strb	r3, [r4, #10]
 800bec0:	b027      	add	sp, #156	; 0x9c
 800bec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bec6:	2301      	movs	r3, #1
 800bec8:	f045 0510 	orr.w	r5, r5, #16
 800becc:	e7f6      	b.n	800bebc <ArtNetParams::callbackFunction(char const*)+0x74>
 800bece:	2302      	movs	r3, #2
 800bed0:	e7fa      	b.n	800bec8 <ArtNetParams::callbackFunction(char const*)+0x80>
 800bed2:	2303      	movs	r3, #3
 800bed4:	e7f8      	b.n	800bec8 <ArtNetParams::callbackFunction(char const*)+0x80>
 800bed6:	2311      	movs	r3, #17
 800bed8:	4630      	mov	r0, r6
 800beda:	9305      	str	r3, [sp, #20]
 800bedc:	4980      	ldr	r1, [pc, #512]	; (800c0e0 <ArtNetParams::callbackFunction(char const*)+0x298>)
 800bede:	ab05      	add	r3, sp, #20
 800bee0:	f104 0210 	add.w	r2, r4, #16
 800bee4:	f007 f9f4 	bl	80132d0 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800bee8:	b938      	cbnz	r0, 800befa <ArtNetParams::callbackFunction(char const*)+0xb2>
 800beea:	9b05      	ldr	r3, [sp, #20]
 800beec:	4423      	add	r3, r4
 800beee:	7418      	strb	r0, [r3, #16]
 800bef0:	6863      	ldr	r3, [r4, #4]
 800bef2:	f043 0302 	orr.w	r3, r3, #2
 800bef6:	6063      	str	r3, [r4, #4]
 800bef8:	e7e2      	b.n	800bec0 <ArtNetParams::callbackFunction(char const*)+0x78>
 800befa:	233f      	movs	r3, #63	; 0x3f
 800befc:	4630      	mov	r0, r6
 800befe:	9305      	str	r3, [sp, #20]
 800bf00:	4978      	ldr	r1, [pc, #480]	; (800c0e4 <ArtNetParams::callbackFunction(char const*)+0x29c>)
 800bf02:	ab05      	add	r3, sp, #20
 800bf04:	f104 0222 	add.w	r2, r4, #34	; 0x22
 800bf08:	f007 f9e2 	bl	80132d0 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800bf0c:	b938      	cbnz	r0, 800bf1e <ArtNetParams::callbackFunction(char const*)+0xd6>
 800bf0e:	9b05      	ldr	r3, [sp, #20]
 800bf10:	4423      	add	r3, r4
 800bf12:	f883 0022 	strb.w	r0, [r3, #34]	; 0x22
 800bf16:	6863      	ldr	r3, [r4, #4]
 800bf18:	f043 0301 	orr.w	r3, r3, #1
 800bf1c:	e7eb      	b.n	800bef6 <ArtNetParams::callbackFunction(char const*)+0xae>
 800bf1e:	4630      	mov	r0, r6
 800bf20:	4971      	ldr	r1, [pc, #452]	; (800c0e8 <ArtNetParams::callbackFunction(char const*)+0x2a0>)
 800bf22:	f10d 020f 	add.w	r2, sp, #15
 800bf26:	f007 fad7 	bl	80134d8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800bf2a:	b950      	cbnz	r0, 800bf42 <ArtNetParams::callbackFunction(char const*)+0xfa>
 800bf2c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800bf30:	6863      	ldr	r3, [r4, #4]
 800bf32:	7222      	strb	r2, [r4, #8]
 800bf34:	b112      	cbz	r2, 800bf3c <ArtNetParams::callbackFunction(char const*)+0xf4>
 800bf36:	f043 0304 	orr.w	r3, r3, #4
 800bf3a:	e7dc      	b.n	800bef6 <ArtNetParams::callbackFunction(char const*)+0xae>
 800bf3c:	f023 0304 	bic.w	r3, r3, #4
 800bf40:	e7d9      	b.n	800bef6 <ArtNetParams::callbackFunction(char const*)+0xae>
 800bf42:	4630      	mov	r0, r6
 800bf44:	4969      	ldr	r1, [pc, #420]	; (800c0ec <ArtNetParams::callbackFunction(char const*)+0x2a4>)
 800bf46:	f10d 020f 	add.w	r2, sp, #15
 800bf4a:	f007 fac5 	bl	80134d8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800bf4e:	b950      	cbnz	r0, 800bf66 <ArtNetParams::callbackFunction(char const*)+0x11e>
 800bf50:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800bf54:	6863      	ldr	r3, [r4, #4]
 800bf56:	7262      	strb	r2, [r4, #9]
 800bf58:	b112      	cbz	r2, 800bf60 <ArtNetParams::callbackFunction(char const*)+0x118>
 800bf5a:	f043 0308 	orr.w	r3, r3, #8
 800bf5e:	e7ca      	b.n	800bef6 <ArtNetParams::callbackFunction(char const*)+0xae>
 800bf60:	f023 0308 	bic.w	r3, r3, #8
 800bf64:	e7c7      	b.n	800bef6 <ArtNetParams::callbackFunction(char const*)+0xae>
 800bf66:	2500      	movs	r5, #0
 800bf68:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800c0f0 <ArtNetParams::callbackFunction(char const*)+0x2a8>
 800bf6c:	f8df 8184 	ldr.w	r8, [pc, #388]	; 800c0f4 <ArtNetParams::callbackFunction(char const*)+0x2ac>
 800bf70:	f8df b184 	ldr.w	fp, [pc, #388]	; 800c0f8 <ArtNetParams::callbackFunction(char const*)+0x2b0>
 800bf74:	4649      	mov	r1, r9
 800bf76:	4630      	mov	r0, r6
 800bf78:	f10d 020f 	add.w	r2, sp, #15
 800bf7c:	f007 faac 	bl	80134d8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800bf80:	b9a8      	cbnz	r0, 800bfae <ArtNetParams::callbackFunction(char const*)+0x166>
 800bf82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bf86:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800bf8a:	6862      	ldr	r2, [r4, #4]
 800bf8c:	280f      	cmp	r0, #15
 800bf8e:	fa03 f305 	lsl.w	r3, r3, r5
 800bf92:	eb04 0105 	add.w	r1, r4, r5
 800bf96:	d803      	bhi.n	800bfa0 <ArtNetParams::callbackFunction(char const*)+0x158>
 800bf98:	f881 006b 	strb.w	r0, [r1, #107]	; 0x6b
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	e7aa      	b.n	800bef6 <ArtNetParams::callbackFunction(char const*)+0xae>
 800bfa0:	3501      	adds	r5, #1
 800bfa2:	ea22 0203 	bic.w	r2, r2, r3
 800bfa6:	f881 506b 	strb.w	r5, [r1, #107]	; 0x6b
 800bfaa:	6062      	str	r2, [r4, #4]
 800bfac:	e788      	b.n	800bec0 <ArtNetParams::callbackFunction(char const*)+0x78>
 800bfae:	2712      	movs	r7, #18
 800bfb0:	2303      	movs	r3, #3
 800bfb2:	436f      	muls	r7, r5
 800bfb4:	4951      	ldr	r1, [pc, #324]	; (800c0fc <ArtNetParams::callbackFunction(char const*)+0x2b4>)
 800bfb6:	9305      	str	r3, [sp, #20]
 800bfb8:	4630      	mov	r0, r6
 800bfba:	ab05      	add	r3, sp, #20
 800bfbc:	aa06      	add	r2, sp, #24
 800bfbe:	4439      	add	r1, r7
 800bfc0:	f007 f986 	bl	80132d0 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800bfc4:	bb00      	cbnz	r0, 800c008 <ArtNetParams::callbackFunction(char const*)+0x1c0>
 800bfc6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800bfca:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800bfce:	40aa      	lsls	r2, r5
 800bfd0:	f041 0120 	orr.w	r1, r1, #32
 800bfd4:	296c      	cmp	r1, #108	; 0x6c
 800bfd6:	6863      	ldr	r3, [r4, #4]
 800bfd8:	4425      	add	r5, r4
 800bfda:	d10f      	bne.n	800bffc <ArtNetParams::callbackFunction(char const*)+0x1b4>
 800bfdc:	f89d 1019 	ldrb.w	r1, [sp, #25]
 800bfe0:	f041 0120 	orr.w	r1, r1, #32
 800bfe4:	2974      	cmp	r1, #116	; 0x74
 800bfe6:	d109      	bne.n	800bffc <ArtNetParams::callbackFunction(char const*)+0x1b4>
 800bfe8:	f89d 101a 	ldrb.w	r1, [sp, #26]
 800bfec:	f041 0120 	orr.w	r1, r1, #32
 800bff0:	2970      	cmp	r1, #112	; 0x70
 800bff2:	d103      	bne.n	800bffc <ArtNetParams::callbackFunction(char const*)+0x1b4>
 800bff4:	2101      	movs	r1, #1
 800bff6:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800bffa:	e7cf      	b.n	800bf9c <ArtNetParams::callbackFunction(char const*)+0x154>
 800bffc:	2100      	movs	r1, #0
 800bffe:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800c002:	ea23 0302 	bic.w	r3, r3, r2
 800c006:	e776      	b.n	800bef6 <ArtNetParams::callbackFunction(char const*)+0xae>
 800c008:	f04f 0a04 	mov.w	sl, #4
 800c00c:	493c      	ldr	r1, [pc, #240]	; (800c100 <ArtNetParams::callbackFunction(char const*)+0x2b8>)
 800c00e:	4630      	mov	r0, r6
 800c010:	ab05      	add	r3, sp, #20
 800c012:	aa06      	add	r2, sp, #24
 800c014:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800c018:	f8cd a014 	str.w	sl, [sp, #20]
 800c01c:	f007 f958 	bl	80132d0 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800c020:	b9a0      	cbnz	r0, 800c04c <ArtNetParams::callbackFunction(char const*)+0x204>
 800c022:	4652      	mov	r2, sl
 800c024:	9001      	str	r0, [sp, #4]
 800c026:	4937      	ldr	r1, [pc, #220]	; (800c104 <ArtNetParams::callbackFunction(char const*)+0x2bc>)
 800c028:	a806      	add	r0, sp, #24
 800c02a:	f7ff fe1d 	bl	800bc68 <memcmp>
 800c02e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800c032:	9b01      	ldr	r3, [sp, #4]
 800c034:	40aa      	lsls	r2, r5
 800c036:	4425      	add	r5, r4
 800c038:	b920      	cbnz	r0, 800c044 <ArtNetParams::callbackFunction(char const*)+0x1fc>
 800c03a:	2301      	movs	r3, #1
 800c03c:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
 800c040:	6863      	ldr	r3, [r4, #4]
 800c042:	e7ab      	b.n	800bf9c <ArtNetParams::callbackFunction(char const*)+0x154>
 800c044:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
 800c048:	6863      	ldr	r3, [r4, #4]
 800c04a:	e7da      	b.n	800c002 <ArtNetParams::callbackFunction(char const*)+0x1ba>
 800c04c:	2307      	movs	r3, #7
 800c04e:	4630      	mov	r0, r6
 800c050:	9305      	str	r3, [sp, #20]
 800c052:	aa06      	add	r2, sp, #24
 800c054:	ab05      	add	r3, sp, #20
 800c056:	eb0b 0107 	add.w	r1, fp, r7
 800c05a:	f007 f939 	bl	80132d0 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800c05e:	2800      	cmp	r0, #0
 800c060:	d17d      	bne.n	800c15e <ArtNetParams::callbackFunction(char const*)+0x316>
 800c062:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800c066:	f043 0320 	orr.w	r3, r3, #32
 800c06a:	2b69      	cmp	r3, #105	; 0x69
 800c06c:	d14c      	bne.n	800c108 <ArtNetParams::callbackFunction(char const*)+0x2c0>
 800c06e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800c072:	f043 0320 	orr.w	r3, r3, #32
 800c076:	2b6e      	cmp	r3, #110	; 0x6e
 800c078:	d16f      	bne.n	800c15a <ArtNetParams::callbackFunction(char const*)+0x312>
 800c07a:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800c07e:	f043 0320 	orr.w	r3, r3, #32
 800c082:	2b70      	cmp	r3, #112	; 0x70
 800c084:	d169      	bne.n	800c15a <ArtNetParams::callbackFunction(char const*)+0x312>
 800c086:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800c08a:	f043 0320 	orr.w	r3, r3, #32
 800c08e:	2b75      	cmp	r3, #117	; 0x75
 800c090:	d163      	bne.n	800c15a <ArtNetParams::callbackFunction(char const*)+0x312>
 800c092:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800c096:	f043 0320 	orr.w	r3, r3, #32
 800c09a:	3b74      	subs	r3, #116	; 0x74
 800c09c:	bf18      	it	ne
 800c09e:	2301      	movne	r3, #1
 800c0a0:	2103      	movs	r1, #3
 800c0a2:	f8b4 2079 	ldrh.w	r2, [r4, #121]	; 0x79
 800c0a6:	006d      	lsls	r5, r5, #1
 800c0a8:	40a9      	lsls	r1, r5
 800c0aa:	ea22 0201 	bic.w	r2, r2, r1
 800c0ae:	b143      	cbz	r3, 800c0c2 <ArtNetParams::callbackFunction(char const*)+0x27a>
 800c0b0:	2b02      	cmp	r3, #2
 800c0b2:	bf15      	itete	ne
 800c0b4:	2301      	movne	r3, #1
 800c0b6:	40ab      	lsleq	r3, r5
 800c0b8:	fa03 f505 	lslne.w	r5, r3, r5
 800c0bc:	431a      	orreq	r2, r3
 800c0be:	bf18      	it	ne
 800c0c0:	432a      	orrne	r2, r5
 800c0c2:	f8a4 2079 	strh.w	r2, [r4, #121]	; 0x79
 800c0c6:	e6fb      	b.n	800bec0 <ArtNetParams::callbackFunction(char const*)+0x78>
 800c0c8:	080168f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, fp, sp, lr}
 800c0cc:	08017e7e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r9, sl, fp, ip, sp, lr}
 800c0d0:	0801689d 	stmdaeq	r1, {r0, r2, r3, r4, r7, fp, sp, lr}
 800c0d4:	080168a2 	stmdaeq	r1, {r1, r5, r7, fp, sp, lr}
 800c0d8:	080168a6 	stmdaeq	r1, {r1, r2, r5, r7, fp, sp, lr}
 800c0dc:	080168a9 	stmdaeq	r1, {r0, r3, r5, r7, fp, sp, lr}
 800c0e0:	0801695b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r8, fp, sp, lr}
 800c0e4:	08016951 	stmdaeq	r1, {r0, r4, r6, r8, fp, sp, lr}
 800c0e8:	08016a0e 	stmdaeq	r1, {r1, r2, r3, r9, fp, sp, lr}
 800c0ec:	08016a12 	stmdaeq	r1, {r1, r4, r9, fp, sp, lr}
 800c0f0:	08017dba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r8, sl, fp, ip, sp, lr}
 800c0f4:	08016966 	stmdaeq	r1, {r1, r2, r5, r6, r8, fp, sp, lr}
 800c0f8:	08017e90 	stmdaeq	r1, {r4, r7, r9, sl, fp, ip, sp, lr}
 800c0fc:	08017e0e 	stmdaeq	r1, {r1, r2, r3, r9, sl, fp, ip, sp, lr}
 800c100:	08016911 	stmdaeq	r1, {r0, r4, r8, fp, sp, lr}
 800c104:	080168b2 	stmdaeq	r1, {r1, r4, r5, r7, fp, sp, lr}
 800c108:	2b64      	cmp	r3, #100	; 0x64
 800c10a:	d126      	bne.n	800c15a <ArtNetParams::callbackFunction(char const*)+0x312>
 800c10c:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800c110:	f043 0320 	orr.w	r3, r3, #32
 800c114:	2b69      	cmp	r3, #105	; 0x69
 800c116:	d120      	bne.n	800c15a <ArtNetParams::callbackFunction(char const*)+0x312>
 800c118:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800c11c:	f043 0320 	orr.w	r3, r3, #32
 800c120:	2b73      	cmp	r3, #115	; 0x73
 800c122:	d11a      	bne.n	800c15a <ArtNetParams::callbackFunction(char const*)+0x312>
 800c124:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800c128:	f043 0320 	orr.w	r3, r3, #32
 800c12c:	2b61      	cmp	r3, #97	; 0x61
 800c12e:	d114      	bne.n	800c15a <ArtNetParams::callbackFunction(char const*)+0x312>
 800c130:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800c134:	f043 0320 	orr.w	r3, r3, #32
 800c138:	2b62      	cmp	r3, #98	; 0x62
 800c13a:	d10e      	bne.n	800c15a <ArtNetParams::callbackFunction(char const*)+0x312>
 800c13c:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800c140:	f043 0320 	orr.w	r3, r3, #32
 800c144:	2b6c      	cmp	r3, #108	; 0x6c
 800c146:	d108      	bne.n	800c15a <ArtNetParams::callbackFunction(char const*)+0x312>
 800c148:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800c14c:	f043 0320 	orr.w	r3, r3, #32
 800c150:	2b65      	cmp	r3, #101	; 0x65
 800c152:	bf14      	ite	ne
 800c154:	2301      	movne	r3, #1
 800c156:	2302      	moveq	r3, #2
 800c158:	e7a2      	b.n	800c0a0 <ArtNetParams::callbackFunction(char const*)+0x258>
 800c15a:	2301      	movs	r3, #1
 800c15c:	e7a0      	b.n	800c0a0 <ArtNetParams::callbackFunction(char const*)+0x258>
 800c15e:	2118      	movs	r1, #24
 800c160:	4b2a      	ldr	r3, [pc, #168]	; (800c20c <ArtNetParams::callbackFunction(char const*)+0x3c4>)
 800c162:	4630      	mov	r0, r6
 800c164:	fb01 3105 	mla	r1, r1, r5, r3
 800c168:	aa04      	add	r2, sp, #16
 800c16a:	f007 f92d 	bl	80133c8 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 800c16e:	b998      	cbnz	r0, 800c198 <ArtNetParams::callbackFunction(char const*)+0x350>
 800c170:	9904      	ldr	r1, [sp, #16]
 800c172:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c176:	f8c3 107b 	str.w	r1, [r3, #123]	; 0x7b
 800c17a:	2301      	movs	r3, #1
 800c17c:	40ab      	lsls	r3, r5
 800c17e:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800c182:	b29b      	uxth	r3, r3
 800c184:	b119      	cbz	r1, 800c18e <ArtNetParams::callbackFunction(char const*)+0x346>
 800c186:	4313      	orrs	r3, r2
 800c188:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 800c18c:	e698      	b.n	800bec0 <ArtNetParams::callbackFunction(char const*)+0x78>
 800c18e:	ea22 0203 	bic.w	r2, r2, r3
 800c192:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
 800c196:	e693      	b.n	800bec0 <ArtNetParams::callbackFunction(char const*)+0x78>
 800c198:	4641      	mov	r1, r8
 800c19a:	4630      	mov	r0, r6
 800c19c:	f10d 020f 	add.w	r2, sp, #15
 800c1a0:	f007 f99a 	bl	80134d8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800c1a4:	b998      	cbnz	r0, 800c1ce <ArtNetParams::callbackFunction(char const*)+0x386>
 800c1a6:	2201      	movs	r2, #1
 800c1a8:	f105 0308 	add.w	r3, r5, #8
 800c1ac:	fa02 f303 	lsl.w	r3, r2, r3
 800c1b0:	40aa      	lsls	r2, r5
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	89a2      	ldrh	r2, [r4, #12]
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	ea22 0103 	bic.w	r1, r2, r3
 800c1bc:	81a1      	strh	r1, [r4, #12]
 800c1be:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800c1c2:	2900      	cmp	r1, #0
 800c1c4:	f43f ae7c 	beq.w	800bec0 <ArtNetParams::callbackFunction(char const*)+0x78>
 800c1c8:	431a      	orrs	r2, r3
 800c1ca:	81a2      	strh	r2, [r4, #12]
 800c1cc:	e678      	b.n	800bec0 <ArtNetParams::callbackFunction(char const*)+0x78>
 800c1ce:	3501      	adds	r5, #1
 800c1d0:	2d04      	cmp	r5, #4
 800c1d2:	f109 0910 	add.w	r9, r9, #16
 800c1d6:	f108 0812 	add.w	r8, r8, #18
 800c1da:	f47f aecb 	bne.w	800bf74 <ArtNetParams::callbackFunction(char const*)+0x12c>
 800c1de:	4630      	mov	r0, r6
 800c1e0:	490b      	ldr	r1, [pc, #44]	; (800c210 <ArtNetParams::callbackFunction(char const*)+0x3c8>)
 800c1e2:	f10d 020f 	add.w	r2, sp, #15
 800c1e6:	f007 f977 	bl	80134d8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800c1ea:	b910      	cbnz	r0, 800c1f2 <ArtNetParams::callbackFunction(char const*)+0x3aa>
 800c1ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c1f0:	e637      	b.n	800be62 <ArtNetParams::callbackFunction(char const*)+0x1a>
 800c1f2:	4630      	mov	r0, r6
 800c1f4:	4907      	ldr	r1, [pc, #28]	; (800c214 <ArtNetParams::callbackFunction(char const*)+0x3cc>)
 800c1f6:	f10d 020f 	add.w	r2, sp, #15
 800c1fa:	f007 f96d 	bl	80134d8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800c1fe:	2800      	cmp	r0, #0
 800c200:	f47f ae5e 	bne.w	800bec0 <ArtNetParams::callbackFunction(char const*)+0x78>
 800c204:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c208:	e62b      	b.n	800be62 <ArtNetParams::callbackFunction(char const*)+0x1a>
 800c20a:	bf00      	nop
 800c20c:	080169ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, fp, sp, lr}
 800c210:	08016903 	stmdaeq	r1, {r0, r1, r8, fp, sp, lr}
 800c214:	08017e68 	stmdaeq	r1, {r3, r5, r6, r9, sl, fp, ip, sp, lr}

0800c218 <ArtNetParams::staticCallbackFunction(void*, char const*)>:
 800c218:	f7ff be16 	b.w	800be48 <ArtNetParams::callbackFunction(char const*)>

0800c21c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>:
 800c21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c220:	4604      	mov	r4, r0
 800c222:	4615      	mov	r5, r2
 800c224:	461e      	mov	r6, r3
 800c226:	b085      	sub	sp, #20
 800c228:	3004      	adds	r0, #4
 800c22a:	2900      	cmp	r1, #0
 800c22c:	f000 80a2 	beq.w	800c374 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x158>
 800c230:	2287      	movs	r2, #135	; 0x87
 800c232:	f007 fe80 	bl	8013f36 <memmove>
 800c236:	4633      	mov	r3, r6
 800c238:	462a      	mov	r2, r5
 800c23a:	4995      	ldr	r1, [pc, #596]	; (800c490 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x274>)
 800c23c:	a801      	add	r0, sp, #4
 800c23e:	f006 ff6f 	bl	8013120 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800c242:	6863      	ldr	r3, [r4, #4]
 800c244:	f104 0622 	add.w	r6, r4, #34	; 0x22
 800c248:	f013 0501 	ands.w	r5, r3, #1
 800c24c:	d108      	bne.n	800c260 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x44>
 800c24e:	4b91      	ldr	r3, [pc, #580]	; (800c494 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x278>)
 800c250:	223f      	movs	r2, #63	; 0x3f
 800c252:	6819      	ldr	r1, [r3, #0]
 800c254:	4630      	mov	r0, r6
 800c256:	314e      	adds	r1, #78	; 0x4e
 800c258:	f7ff fd92 	bl	800bd80 <strncpy.isra.0>
 800c25c:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 800c260:	6863      	ldr	r3, [r4, #4]
 800c262:	4632      	mov	r2, r6
 800c264:	f003 0301 	and.w	r3, r3, #1
 800c268:	498b      	ldr	r1, [pc, #556]	; (800c498 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x27c>)
 800c26a:	a801      	add	r0, sp, #4
 800c26c:	f7ff fd38 	bl	800bce0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800c270:	6863      	ldr	r3, [r4, #4]
 800c272:	f104 0610 	add.w	r6, r4, #16
 800c276:	f013 0502 	ands.w	r5, r3, #2
 800c27a:	d108      	bne.n	800c28e <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x72>
 800c27c:	4b85      	ldr	r3, [pc, #532]	; (800c494 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x278>)
 800c27e:	2211      	movs	r2, #17
 800c280:	6819      	ldr	r1, [r3, #0]
 800c282:	4630      	mov	r0, r6
 800c284:	313c      	adds	r1, #60	; 0x3c
 800c286:	f7ff fd7b 	bl	800bd80 <strncpy.isra.0>
 800c28a:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 800c28e:	6863      	ldr	r3, [r4, #4]
 800c290:	4632      	mov	r2, r6
 800c292:	4982      	ldr	r1, [pc, #520]	; (800c49c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x280>)
 800c294:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c298:	a801      	add	r0, sp, #4
 800c29a:	f7ff fd21 	bl	800bce0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800c29e:	6863      	ldr	r3, [r4, #4]
 800c2a0:	7a22      	ldrb	r2, [r4, #8]
 800c2a2:	497f      	ldr	r1, [pc, #508]	; (800c4a0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x284>)
 800c2a4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c2a8:	a801      	add	r0, sp, #4
 800c2aa:	f7ff fcf1 	bl	800bc90 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800c2ae:	6863      	ldr	r3, [r4, #4]
 800c2b0:	7a62      	ldrb	r2, [r4, #9]
 800c2b2:	497c      	ldr	r1, [pc, #496]	; (800c4a4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x288>)
 800c2b4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c2b8:	a801      	add	r0, sp, #4
 800c2ba:	f7ff fce9 	bl	800bc90 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800c2be:	6862      	ldr	r2, [r4, #4]
 800c2c0:	4979      	ldr	r1, [pc, #484]	; (800c4a8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x28c>)
 800c2c2:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800c2c6:	a801      	add	r0, sp, #4
 800c2c8:	f7ff fd32 	bl	800bd30 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800c2cc:	2500      	movs	r5, #0
 800c2ce:	4f77      	ldr	r7, [pc, #476]	; (800c4ac <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x290>)
 800c2d0:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 800c4b0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x294>
 800c2d4:	f104 086a 	add.w	r8, r4, #106	; 0x6a
 800c2d8:	f8d9 2000 	ldr.w	r2, [r9]
 800c2dc:	6863      	ldr	r3, [r4, #4]
 800c2de:	42aa      	cmp	r2, r5
 800c2e0:	d84f      	bhi.n	800c382 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x166>
 800c2e2:	7aa1      	ldrb	r1, [r4, #10]
 800c2e4:	4a73      	ldr	r2, [pc, #460]	; (800c4b4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 800c2e6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c2ea:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c2ee:	a801      	add	r0, sp, #4
 800c2f0:	4971      	ldr	r1, [pc, #452]	; (800c4b8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x29c>)
 800c2f2:	f7ff fcf5 	bl	800bce0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800c2f6:	4971      	ldr	r1, [pc, #452]	; (800c4bc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 800c2f8:	a801      	add	r0, sp, #4
 800c2fa:	f006 ff97 	bl	801322c <PropertiesBuilder::AddComment(char const*)>
 800c2fe:	2500      	movs	r5, #0
 800c300:	f44f 0b00 	mov.w	fp, #8388608	; 0x800000
 800c304:	4e6e      	ldr	r6, [pc, #440]	; (800c4c0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2a4>)
 800c306:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c4c4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2a8>
 800c30a:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 800c4c8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2ac>
 800c30e:	f104 0774 	add.w	r7, r4, #116	; 0x74
 800c312:	f8d9 3000 	ldr.w	r3, [r9]
 800c316:	42ab      	cmp	r3, r5
 800c318:	6863      	ldr	r3, [r4, #4]
 800c31a:	f200 80a5 	bhi.w	800c468 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x24c>
 800c31e:	f3c3 62c0 	ubfx	r2, r3, #27, #1
 800c322:	496a      	ldr	r1, [pc, #424]	; (800c4cc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b0>)
 800c324:	a801      	add	r0, sp, #4
 800c326:	f7ff fd03 	bl	800bd30 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800c32a:	4969      	ldr	r1, [pc, #420]	; (800c4d0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b4>)
 800c32c:	a801      	add	r0, sp, #4
 800c32e:	f006 ff7d 	bl	801322c <PropertiesBuilder::AddComment(char const*)>
 800c332:	6862      	ldr	r2, [r4, #4]
 800c334:	4967      	ldr	r1, [pc, #412]	; (800c4d4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b8>)
 800c336:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800c33a:	a801      	add	r0, sp, #4
 800c33c:	f7ff fcf8 	bl	800bd30 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800c340:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800c344:	b17b      	cbz	r3, 800c366 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x14a>
 800c346:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800c34a:	9b01      	ldr	r3, [sp, #4]
 800c34c:	4413      	add	r3, r2
 800c34e:	227d      	movs	r2, #125	; 0x7d
 800c350:	f803 2c01 	strb.w	r2, [r3, #-1]
 800c354:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800c358:	9901      	ldr	r1, [sp, #4]
 800c35a:	54ca      	strb	r2, [r1, r3]
 800c35c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800c360:	3301      	adds	r3, #1
 800c362:	f8ad 300a 	strh.w	r3, [sp, #10]
 800c366:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800c36a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c36c:	601a      	str	r2, [r3, #0]
 800c36e:	b005      	add	sp, #20
 800c370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c374:	6823      	ldr	r3, [r4, #0]
 800c376:	4601      	mov	r1, r0
 800c378:	681a      	ldr	r2, [r3, #0]
 800c37a:	4618      	mov	r0, r3
 800c37c:	68d2      	ldr	r2, [r2, #12]
 800c37e:	4790      	blx	r2
 800c380:	e759      	b.n	800c236 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x1a>
 800c382:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c386:	2612      	movs	r6, #18
 800c388:	40aa      	lsls	r2, r5
 800c38a:	4953      	ldr	r1, [pc, #332]	; (800c4d8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2bc>)
 800c38c:	439a      	bics	r2, r3
 800c38e:	bf0c      	ite	eq
 800c390:	2301      	moveq	r3, #1
 800c392:	2300      	movne	r3, #0
 800c394:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 800c398:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800c39c:	a801      	add	r0, sp, #4
 800c39e:	f7ff fc77 	bl	800bc90 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800c3a2:	436e      	muls	r6, r5
 800c3a4:	f8b4 3079 	ldrh.w	r3, [r4, #121]	; 0x79
 800c3a8:	006a      	lsls	r2, r5, #1
 800c3aa:	494c      	ldr	r1, [pc, #304]	; (800c4dc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c0>)
 800c3ac:	40d3      	lsrs	r3, r2
 800c3ae:	f013 0303 	ands.w	r3, r3, #3
 800c3b2:	ea4f 1b05 	mov.w	fp, r5, lsl #4
 800c3b6:	4431      	add	r1, r6
 800c3b8:	d054      	beq.n	800c464 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x248>
 800c3ba:	4a49      	ldr	r2, [pc, #292]	; (800c4e0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c4>)
 800c3bc:	4849      	ldr	r0, [pc, #292]	; (800c4e4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c8>)
 800c3be:	2b02      	cmp	r3, #2
 800c3c0:	bf08      	it	eq
 800c3c2:	4602      	moveq	r2, r0
 800c3c4:	3b01      	subs	r3, #1
 800c3c6:	bf18      	it	ne
 800c3c8:	2301      	movne	r3, #1
 800c3ca:	a801      	add	r0, sp, #4
 800c3cc:	f7ff fc88 	bl	800bce0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800c3d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c3d4:	f04f 0a01 	mov.w	sl, #1
 800c3d8:	6861      	ldr	r1, [r4, #4]
 800c3da:	40ab      	lsls	r3, r5
 800c3dc:	438b      	bics	r3, r1
 800c3de:	f898 2005 	ldrb.w	r2, [r8, #5]
 800c3e2:	4841      	ldr	r0, [pc, #260]	; (800c4e8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2cc>)
 800c3e4:	4941      	ldr	r1, [pc, #260]	; (800c4ec <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d0>)
 800c3e6:	bf0c      	ite	eq
 800c3e8:	2301      	moveq	r3, #1
 800c3ea:	2300      	movne	r3, #0
 800c3ec:	2a00      	cmp	r2, #0
 800c3ee:	bf0c      	ite	eq
 800c3f0:	4602      	moveq	r2, r0
 800c3f2:	460a      	movne	r2, r1
 800c3f4:	493e      	ldr	r1, [pc, #248]	; (800c4f0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d4>)
 800c3f6:	a801      	add	r0, sp, #4
 800c3f8:	4431      	add	r1, r6
 800c3fa:	f7ff fc71 	bl	800bce0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800c3fe:	f105 0208 	add.w	r2, r5, #8
 800c402:	89a1      	ldrh	r1, [r4, #12]
 800c404:	fa0a f202 	lsl.w	r2, sl, r2
 800c408:	b292      	uxth	r2, r2
 800c40a:	438a      	bics	r2, r1
 800c40c:	4939      	ldr	r1, [pc, #228]	; (800c4f4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d8>)
 800c40e:	bf0c      	ite	eq
 800c410:	4652      	moveq	r2, sl
 800c412:	2200      	movne	r2, #0
 800c414:	4431      	add	r1, r6
 800c416:	a801      	add	r0, sp, #4
 800c418:	f7ff fc8a 	bl	800bd30 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800c41c:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800c420:	fa0a f305 	lsl.w	r3, sl, r5
 800c424:	b29b      	uxth	r3, r3
 800c426:	401a      	ands	r2, r3
 800c428:	4293      	cmp	r3, r2
 800c42a:	bf0c      	ite	eq
 800c42c:	4653      	moveq	r3, sl
 800c42e:	2300      	movne	r3, #0
 800c430:	f105 021c 	add.w	r2, r5, #28
 800c434:	d00b      	beq.n	800c44e <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x232>
 800c436:	4917      	ldr	r1, [pc, #92]	; (800c494 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x278>)
 800c438:	2d04      	cmp	r5, #4
 800c43a:	6809      	ldr	r1, [r1, #0]
 800c43c:	bf0e      	itee	eq
 800c43e:	2100      	moveq	r1, #0
 800c440:	4459      	addne	r1, fp
 800c442:	f8d1 1998 	ldrne.w	r1, [r1, #2456]	; 0x998
 800c446:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 800c44a:	f8c0 100b 	str.w	r1, [r0, #11]
 800c44e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c452:	4639      	mov	r1, r7
 800c454:	f8d2 200b 	ldr.w	r2, [r2, #11]
 800c458:	a801      	add	r0, sp, #4
 800c45a:	f006 fea3 	bl	80131a4 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 800c45e:	3501      	adds	r5, #1
 800c460:	3718      	adds	r7, #24
 800c462:	e739      	b.n	800c2d8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0xbc>
 800c464:	4a24      	ldr	r2, [pc, #144]	; (800c4f8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 800c466:	e7ad      	b.n	800c3c4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x1a8>
 800c468:	fa0b f105 	lsl.w	r1, fp, r5
 800c46c:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800c470:	4399      	bics	r1, r3
 800c472:	bf0c      	ite	eq
 800c474:	2301      	moveq	r3, #1
 800c476:	2300      	movne	r3, #0
 800c478:	4631      	mov	r1, r6
 800c47a:	2a00      	cmp	r2, #0
 800c47c:	bf0c      	ite	eq
 800c47e:	4642      	moveq	r2, r8
 800c480:	4652      	movne	r2, sl
 800c482:	a801      	add	r0, sp, #4
 800c484:	f7ff fc2c 	bl	800bce0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800c488:	3501      	adds	r5, #1
 800c48a:	3610      	adds	r6, #16
 800c48c:	e741      	b.n	800c312 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0xf6>
 800c48e:	bf00      	nop
 800c490:	08016a19 	stmdaeq	r1, {r0, r3, r4, r9, fp, sp, lr}
 800c494:	2000192c 	andcs	r1, r0, ip, lsr #18
 800c498:	08016951 	stmdaeq	r1, {r0, r4, r6, r8, fp, sp, lr}
 800c49c:	0801695b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r8, fp, sp, lr}
 800c4a0:	08016a0e 	stmdaeq	r1, {r1, r2, r3, r9, fp, sp, lr}
 800c4a4:	08016a12 	stmdaeq	r1, {r1, r4, r9, fp, sp, lr}
 800c4a8:	080168f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, fp, sp, lr}
 800c4ac:	080169ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, fp, sp, lr}
 800c4b0:	2000193c 	andcs	r1, r0, ip, lsr r9
 800c4b4:	080168e8 	stmdaeq	r1, {r3, r5, r6, r7, fp, sp, lr}
 800c4b8:	08017e7e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r9, sl, fp, ip, sp, lr}
 800c4bc:	080168db 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, fp, sp, lr}
 800c4c0:	08016911 	stmdaeq	r1, {r0, r4, r8, fp, sp, lr}
 800c4c4:	080168d4 	stmdaeq	r1, {r2, r4, r6, r7, fp, sp, lr}
 800c4c8:	080168b2 	stmdaeq	r1, {r1, r4, r5, r7, fp, sp, lr}
 800c4cc:	08016903 	stmdaeq	r1, {r0, r1, r8, fp, sp, lr}
 800c4d0:	08016355 	stmdaeq	r1, {r0, r2, r4, r6, r8, r9, sp, lr}
 800c4d4:	08017e68 	stmdaeq	r1, {r3, r5, r6, r9, sl, fp, ip, sp, lr}
 800c4d8:	08017dba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r8, sl, fp, ip, sp, lr}
 800c4dc:	08017e90 	stmdaeq	r1, {r4, r7, r9, sl, fp, ip, sp, lr}
 800c4e0:	080168bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, fp, sp, lr}
 800c4e4:	080168c4 	stmdaeq	r1, {r2, r6, r7, fp, sp, lr}
 800c4e8:	080168d0 	stmdaeq	r1, {r4, r6, r7, fp, sp, lr}
 800c4ec:	080168cc 	stmdaeq	r1, {r2, r3, r6, r7, fp, sp, lr}
 800c4f0:	08017e0e 	stmdaeq	r1, {r1, r2, r3, r9, sl, fp, ip, sp, lr}
 800c4f4:	08016966 	stmdaeq	r1, {r1, r2, r5, r6, r8, fp, sp, lr}
 800c4f8:	080168b7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, fp, sp, lr}

0800c4fc <ArtNetParams::Save(char*, unsigned int, unsigned int&)>:
 800c4fc:	b513      	push	{r0, r1, r4, lr}
 800c4fe:	6804      	ldr	r4, [r0, #0]
 800c500:	b914      	cbnz	r4, 800c508 <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800c502:	601c      	str	r4, [r3, #0]
 800c504:	b002      	add	sp, #8
 800c506:	bd10      	pop	{r4, pc}
 800c508:	9300      	str	r3, [sp, #0]
 800c50a:	4613      	mov	r3, r2
 800c50c:	460a      	mov	r2, r1
 800c50e:	2100      	movs	r1, #0
 800c510:	f7ff fe84 	bl	800c21c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>
 800c514:	e7f6      	b.n	800c504 <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0x8>
	...

0800c518 <ArtNetParams::Set(unsigned int)>:
 800c518:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c51c:	1e4b      	subs	r3, r1, #1
 800c51e:	2b02      	cmp	r3, #2
 800c520:	4604      	mov	r4, r0
 800c522:	460f      	mov	r7, r1
 800c524:	d807      	bhi.n	800c536 <ArtNetParams::Set(unsigned int)+0x1e>
 800c526:	4a43      	ldr	r2, [pc, #268]	; (800c634 <ArtNetParams::Set(unsigned int)+0x11c>)
 800c528:	f1c1 0304 	rsb	r3, r1, #4
 800c52c:	6811      	ldr	r1, [r2, #0]
 800c52e:	428b      	cmp	r3, r1
 800c530:	bf94      	ite	ls
 800c532:	6013      	strls	r3, [r2, #0]
 800c534:	6011      	strhi	r1, [r2, #0]
 800c536:	6863      	ldr	r3, [r4, #4]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d079      	beq.n	800c630 <ArtNetParams::Set(unsigned int)+0x118>
 800c53c:	4a3e      	ldr	r2, [pc, #248]	; (800c638 <ArtNetParams::Set(unsigned int)+0x120>)
 800c53e:	079b      	lsls	r3, r3, #30
 800c540:	6815      	ldr	r5, [r2, #0]
 800c542:	d504      	bpl.n	800c54e <ArtNetParams::Set(unsigned int)+0x36>
 800c544:	4628      	mov	r0, r5
 800c546:	f104 0110 	add.w	r1, r4, #16
 800c54a:	f7fd ff5d 	bl	800a408 <ArtNetNode::SetShortName(char const*)>
 800c54e:	6863      	ldr	r3, [r4, #4]
 800c550:	07de      	lsls	r6, r3, #31
 800c552:	d504      	bpl.n	800c55e <ArtNetParams::Set(unsigned int)+0x46>
 800c554:	4628      	mov	r0, r5
 800c556:	f104 0122 	add.w	r1, r4, #34	; 0x22
 800c55a:	f7fd ff7d 	bl	800a458 <ArtNetNode::SetLongName(char const*)>
 800c55e:	6863      	ldr	r3, [r4, #4]
 800c560:	0758      	lsls	r0, r3, #29
 800c562:	d504      	bpl.n	800c56e <ArtNetParams::Set(unsigned int)+0x56>
 800c564:	2200      	movs	r2, #0
 800c566:	4628      	mov	r0, r5
 800c568:	7a21      	ldrb	r1, [r4, #8]
 800c56a:	f7fe fab8 	bl	800aade <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800c56e:	6863      	ldr	r3, [r4, #4]
 800c570:	0719      	lsls	r1, r3, #28
 800c572:	d504      	bpl.n	800c57e <ArtNetParams::Set(unsigned int)+0x66>
 800c574:	2200      	movs	r2, #0
 800c576:	4628      	mov	r0, r5
 800c578:	7a61      	ldrb	r1, [r4, #9]
 800c57a:	f7fe fa7e 	bl	800aa7a <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800c57e:	2600      	movs	r6, #0
 800c580:	f44f 2b80 	mov.w	fp, #262144	; 0x40000
 800c584:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800c634 <ArtNetParams::Set(unsigned int)+0x11c>
 800c588:	f104 0870 	add.w	r8, r4, #112	; 0x70
 800c58c:	e03d      	b.n	800c60a <ArtNetParams::Set(unsigned int)+0xf2>
 800c58e:	eb06 0a07 	add.w	sl, r6, r7
 800c592:	f1ba 0f03 	cmp.w	sl, #3
 800c596:	d83c      	bhi.n	800c612 <ArtNetParams::Set(unsigned int)+0xfa>
 800c598:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c59c:	fa03 f206 	lsl.w	r2, r3, r6
 800c5a0:	6863      	ldr	r3, [r4, #4]
 800c5a2:	439a      	bics	r2, r3
 800c5a4:	d105      	bne.n	800c5b2 <ArtNetParams::Set(unsigned int)+0x9a>
 800c5a6:	4651      	mov	r1, sl
 800c5a8:	4628      	mov	r0, r5
 800c5aa:	f898 2005 	ldrb.w	r2, [r8, #5]
 800c5ae:	f7fe fac8 	bl	800ab42 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 800c5b2:	6863      	ldr	r3, [r4, #4]
 800c5b4:	fa0b f206 	lsl.w	r2, fp, r6
 800c5b8:	439a      	bics	r2, r3
 800c5ba:	d105      	bne.n	800c5c8 <ArtNetParams::Set(unsigned int)+0xb0>
 800c5bc:	4651      	mov	r1, sl
 800c5be:	4628      	mov	r0, r5
 800c5c0:	f898 2000 	ldrb.w	r2, [r8]
 800c5c4:	f7fe fae8 	bl	800ab98 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800c5ce:	40b3      	lsls	r3, r6
 800c5d0:	b29b      	uxth	r3, r3
 800c5d2:	4393      	bics	r3, r2
 800c5d4:	d109      	bne.n	800c5ea <ArtNetParams::Set(unsigned int)+0xd2>
 800c5d6:	f106 031c 	add.w	r3, r6, #28
 800c5da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c5de:	4651      	mov	r1, sl
 800c5e0:	4628      	mov	r0, r5
 800c5e2:	f8d3 200b 	ldr.w	r2, [r3, #11]
 800c5e6:	f7fe fe21 	bl	800b22c <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	f106 0308 	add.w	r3, r6, #8
 800c5f0:	89a0      	ldrh	r0, [r4, #12]
 800c5f2:	fa02 f303 	lsl.w	r3, r2, r3
 800c5f6:	b29b      	uxth	r3, r3
 800c5f8:	4383      	bics	r3, r0
 800c5fa:	d103      	bne.n	800c604 <ArtNetParams::Set(unsigned int)+0xec>
 800c5fc:	4651      	mov	r1, sl
 800c5fe:	4628      	mov	r0, r5
 800c600:	f7ff f8e8 	bl	800b7d4 <ArtNetNode::SetRmd(unsigned int, bool)>
 800c604:	3601      	adds	r6, #1
 800c606:	f108 0801 	add.w	r8, r8, #1
 800c60a:	f8d9 3000 	ldr.w	r3, [r9]
 800c60e:	42b3      	cmp	r3, r6
 800c610:	d8bd      	bhi.n	800c58e <ArtNetParams::Set(unsigned int)+0x76>
 800c612:	4628      	mov	r0, r5
 800c614:	7aa1      	ldrb	r1, [r4, #10]
 800c616:	f7fe faea 	bl	800abee <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>
 800c61a:	6863      	ldr	r3, [r4, #4]
 800c61c:	011a      	lsls	r2, r3, #4
 800c61e:	bf44      	itt	mi
 800c620:	2201      	movmi	r2, #1
 800c622:	f885 2098 	strbmi.w	r2, [r5, #152]	; 0x98
 800c626:	04db      	lsls	r3, r3, #19
 800c628:	bf44      	itt	mi
 800c62a:	2301      	movmi	r3, #1
 800c62c:	f885 38e8 	strbmi.w	r3, [r5, #2280]	; 0x8e8
 800c630:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c634:	2000193c 	andcs	r1, r0, ip, lsr r9
 800c638:	2000192c 	andcs	r1, r0, ip, lsr #18

0800c63c <ArtNetParams::Dump()>:
 800c63c:	4770      	bx	lr
	...

0800c640 <ArtNetNode::HandleTrigger()>:
 800c640:	f890 20aa 	ldrb.w	r2, [r0, #170]	; 0xaa
 800c644:	4601      	mov	r1, r0
 800c646:	2aff      	cmp	r2, #255	; 0xff
 800c648:	d103      	bne.n	800c652 <ArtNetNode::HandleTrigger()+0x12>
 800c64a:	f890 30ab 	ldrb.w	r3, [r0, #171]	; 0xab
 800c64e:	2bff      	cmp	r3, #255	; 0xff
 800c650:	d008      	beq.n	800c664 <ArtNetNode::HandleTrigger()+0x24>
 800c652:	4b07      	ldr	r3, [pc, #28]	; (800c670 <ArtNetNode::HandleTrigger()+0x30>)
 800c654:	7818      	ldrb	r0, [r3, #0]
 800c656:	4290      	cmp	r0, r2
 800c658:	d109      	bne.n	800c66e <ArtNetNode::HandleTrigger()+0x2e>
 800c65a:	f891 20ab 	ldrb.w	r2, [r1, #171]	; 0xab
 800c65e:	785b      	ldrb	r3, [r3, #1]
 800c660:	429a      	cmp	r2, r3
 800c662:	d104      	bne.n	800c66e <ArtNetNode::HandleTrigger()+0x2e>
 800c664:	6948      	ldr	r0, [r1, #20]
 800c666:	31ac      	adds	r1, #172	; 0xac
 800c668:	6803      	ldr	r3, [r0, #0]
 800c66a:	689b      	ldr	r3, [r3, #8]
 800c66c:	4718      	bx	r3
 800c66e:	4770      	bx	lr
 800c670:	08016a24 	stmdaeq	r1, {r2, r5, r9, fp, sp, lr}

0800c674 <e131::universe_to_multicast_ip(unsigned short)>:
 800c674:	b513      	push	{r0, r1, r4, lr}
 800c676:	4604      	mov	r4, r0
 800c678:	a901      	add	r1, sp, #4
 800c67a:	4806      	ldr	r0, [pc, #24]	; (800c694 <e131::universe_to_multicast_ip(unsigned short)+0x20>)
 800c67c:	f007 fba0 	bl	8013dc0 <inet_aton>
 800c680:	9801      	ldr	r0, [sp, #4]
 800c682:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 800c686:	0224      	lsls	r4, r4, #8
 800c688:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800c68c:	4320      	orrs	r0, r4
 800c68e:	b002      	add	sp, #8
 800c690:	bd10      	pop	{r4, pc}
 800c692:	bf00      	nop
 800c694:	08016a2a 	stmdaeq	r1, {r1, r3, r5, r9, fp, sp, lr}

0800c698 <memset.constprop.0.isra.0>:
 800c698:	2300      	movs	r3, #0
 800c69a:	4401      	add	r1, r0
 800c69c:	4288      	cmp	r0, r1
 800c69e:	d100      	bne.n	800c6a2 <memset.constprop.0.isra.0+0xa>
 800c6a0:	4770      	bx	lr
 800c6a2:	f800 3b01 	strb.w	r3, [r0], #1
 800c6a6:	e7f9      	b.n	800c69c <memset.constprop.0.isra.0+0x4>

0800c6a8 <memcpy.isra.0>:
 800c6a8:	3801      	subs	r0, #1
 800c6aa:	440a      	add	r2, r1
 800c6ac:	4291      	cmp	r1, r2
 800c6ae:	d100      	bne.n	800c6b2 <memcpy.isra.0+0xa>
 800c6b0:	4770      	bx	lr
 800c6b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6b6:	f800 3f01 	strb.w	r3, [r0, #1]!
 800c6ba:	e7f7      	b.n	800c6ac <memcpy.isra.0+0x4>

0800c6bc <E131Bridge::E131Bridge()>:
 800c6bc:	2300      	movs	r3, #0
 800c6be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c6c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6c4:	e9c0 2300 	strd	r2, r3, [r0]
 800c6c8:	2201      	movs	r2, #1
 800c6ca:	4604      	mov	r4, r0
 800c6cc:	2764      	movs	r7, #100	; 0x64
 800c6ce:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c6d2:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800c6d6:	e9c0 3307 	strd	r3, r3, [r0, #28]
 800c6da:	6743      	str	r3, [r0, #116]	; 0x74
 800c6dc:	4b26      	ldr	r3, [pc, #152]	; (800c778 <E131Bridge::E131Bridge()+0xbc>)
 800c6de:	7202      	strb	r2, [r0, #8]
 800c6e0:	b093      	sub	sp, #76	; 0x4c
 800c6e2:	6018      	str	r0, [r3, #0]
 800c6e4:	f200 5514 	addw	r5, r0, #1300	; 0x514
 800c6e8:	f200 6224 	addw	r2, r0, #1572	; 0x624
 800c6ec:	f200 6654 	addw	r6, r0, #1620	; 0x654
 800c6f0:	4628      	mov	r0, r5
 800c6f2:	2144      	movs	r1, #68	; 0x44
 800c6f4:	f7ff ffd0 	bl	800c698 <memset.constprop.0.isra.0>
 800c6f8:	4610      	mov	r0, r2
 800c6fa:	210c      	movs	r1, #12
 800c6fc:	f7ff ffcc 	bl	800c698 <memset.constprop.0.isra.0>
 800c700:	320c      	adds	r2, #12
 800c702:	f802 7c03 	strb.w	r7, [r2, #-3]
 800c706:	4296      	cmp	r6, r2
 800c708:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800c70c:	d1f0      	bne.n	800c6f0 <E131Bridge::E131Bridge()+0x34>
 800c70e:	2120      	movs	r1, #32
 800c710:	f204 40f4 	addw	r0, r4, #1268	; 0x4f4
 800c714:	f7ff ffc0 	bl	800c698 <memset.constprop.0.isra.0>
 800c718:	2301      	movs	r3, #1
 800c71a:	4d18      	ldr	r5, [pc, #96]	; (800c77c <E131Bridge::E131Bridge()+0xc0>)
 800c71c:	4a18      	ldr	r2, [pc, #96]	; (800c780 <E131Bridge::E131Bridge()+0xc4>)
 800c71e:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
 800c722:	682b      	ldr	r3, [r5, #0]
 800c724:	2140      	movs	r1, #64	; 0x40
 800c726:	9200      	str	r2, [sp, #0]
 800c728:	3320      	adds	r3, #32
 800c72a:	4a16      	ldr	r2, [pc, #88]	; (800c784 <E131Bridge::E131Bridge()+0xc8>)
 800c72c:	a802      	add	r0, sp, #8
 800c72e:	f7fc fca5 	bl	800907c <snprintf>
 800c732:	233f      	movs	r3, #63	; 0x3f
 800c734:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800c738:	a902      	add	r1, sp, #8
 800c73a:	f811 0b01 	ldrb.w	r0, [r1], #1
 800c73e:	b928      	cbnz	r0, 800c74c <E131Bridge::E131Bridge()+0x90>
 800c740:	4413      	add	r3, r2
 800c742:	429a      	cmp	r2, r3
 800c744:	d006      	beq.n	800c754 <E131Bridge::E131Bridge()+0x98>
 800c746:	f802 0b01 	strb.w	r0, [r2], #1
 800c74a:	e7fa      	b.n	800c742 <E131Bridge::E131Bridge()+0x86>
 800c74c:	3b01      	subs	r3, #1
 800c74e:	f802 0b01 	strb.w	r0, [r2], #1
 800c752:	d1f2      	bne.n	800c73a <E131Bridge::E131Bridge()+0x7e>
 800c754:	2300      	movs	r3, #0
 800c756:	f44f 51ae 	mov.w	r1, #5568	; 0x15c0
 800c75a:	f884 3073 	strb.w	r3, [r4, #115]	; 0x73
 800c75e:	6828      	ldr	r0, [r5, #0]
 800c760:	f004 ff92 	bl	8011688 <Network::Begin(unsigned short)>
 800c764:	4621      	mov	r1, r4
 800c766:	4b08      	ldr	r3, [pc, #32]	; (800c788 <E131Bridge::E131Bridge()+0xcc>)
 800c768:	f841 0b24 	str.w	r0, [r1], #36
 800c76c:	6818      	ldr	r0, [r3, #0]
 800c76e:	f007 fac5 	bl	8013cfc <Hardware::GetUuid(unsigned char*)>
 800c772:	4620      	mov	r0, r4
 800c774:	b013      	add	sp, #76	; 0x4c
 800c776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c778:	20001940 	andcs	r1, r0, r0, asr #18
 800c77c:	200096f8 	strdcs	r9, [r0], -r8
 800c780:	0801678d 	stmdaeq	r1, {r0, r2, r3, r7, r8, r9, sl, sp, lr}
 800c784:	08016a36 	stmdaeq	r1, {r1, r2, r4, r5, r9, fp, sp, lr}
 800c788:	20009dc0 	andcs	r9, r0, r0, asr #27

0800c78c <E131Bridge::~E131Bridge()>:
 800c78c:	4770      	bx	lr
	...

0800c790 <E131Bridge::Start()>:
 800c790:	6943      	ldr	r3, [r0, #20]
 800c792:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c794:	4604      	mov	r4, r0
 800c796:	b35b      	cbz	r3, 800c7f0 <E131Bridge::Start()+0x60>
 800c798:	6983      	ldr	r3, [r0, #24]
 800c79a:	b9cb      	cbnz	r3, 800c7d0 <E131Bridge::Start()+0x40>
 800c79c:	a901      	add	r1, sp, #4
 800c79e:	4818      	ldr	r0, [pc, #96]	; (800c800 <E131Bridge::Start()+0x70>)
 800c7a0:	f007 fb0e 	bl	8013dc0 <inet_aton>
 800c7a4:	9b01      	ldr	r3, [sp, #4]
 800c7a6:	f240 207e 	movw	r0, #638	; 0x27e
 800c7aa:	f043 4356 	orr.w	r3, r3, #3590324224	; 0xd6000000
 800c7ae:	f443 037a 	orr.w	r3, r3, #16384000	; 0xfa0000
 800c7b2:	6223      	str	r3, [r4, #32]
 800c7b4:	f007 fb00 	bl	8013db8 <operator new(unsigned int)>
 800c7b8:	61a0      	str	r0, [r4, #24]
 800c7ba:	4620      	mov	r0, r4
 800c7bc:	f000 fcfc 	bl	800d1b8 <E131Bridge::FillDataPacket()>
 800c7c0:	f44f 608f 	mov.w	r0, #1144	; 0x478
 800c7c4:	f007 faf8 	bl	8013db8 <operator new(unsigned int)>
 800c7c8:	61e0      	str	r0, [r4, #28]
 800c7ca:	4620      	mov	r0, r4
 800c7cc:	f000 fc4c 	bl	800d068 <E131Bridge::FillDiscoveryPacket()>
 800c7d0:	2500      	movs	r5, #0
 800c7d2:	270c      	movs	r7, #12
 800c7d4:	f204 6626 	addw	r6, r4, #1574	; 0x626
 800c7d8:	fb07 f305 	mul.w	r3, r7, r5
 800c7dc:	5cf3      	ldrb	r3, [r6, r3]
 800c7de:	b123      	cbz	r3, 800c7ea <E131Bridge::Start()+0x5a>
 800c7e0:	6960      	ldr	r0, [r4, #20]
 800c7e2:	4629      	mov	r1, r5
 800c7e4:	6803      	ldr	r3, [r0, #0]
 800c7e6:	689b      	ldr	r3, [r3, #8]
 800c7e8:	4798      	blx	r3
 800c7ea:	3501      	adds	r5, #1
 800c7ec:	2d04      	cmp	r5, #4
 800c7ee:	d1f3      	bne.n	800c7d8 <E131Bridge::Start()+0x48>
 800c7f0:	2102      	movs	r1, #2
 800c7f2:	4b04      	ldr	r3, [pc, #16]	; (800c804 <E131Bridge::Start()+0x74>)
 800c7f4:	6818      	ldr	r0, [r3, #0]
 800c7f6:	b003      	add	sp, #12
 800c7f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c7fc:	f007 b9fa 	b.w	8013bf4 <LedBlink::SetMode(ledblink::Mode)>
 800c800:	08016a2a 	stmdaeq	r1, {r1, r3, r5, r9, fp, sp, lr}
 800c804:	20009dbc 			; <UNDEFINED> instruction: 0x20009dbc

0800c808 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>:
 800c808:	b570      	push	{r4, r5, r6, lr}
 800c80a:	4604      	mov	r4, r0
 800c80c:	2300      	movs	r3, #0
 800c80e:	2544      	movs	r5, #68	; 0x44
 800c810:	4610      	mov	r0, r2
 800c812:	f204 5214 	addw	r2, r4, #1300	; 0x514
 800c816:	4299      	cmp	r1, r3
 800c818:	d004      	beq.n	800c824 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x1c>
 800c81a:	fb05 f603 	mul.w	r6, r5, r3
 800c81e:	5b96      	ldrh	r6, [r2, r6]
 800c820:	4286      	cmp	r6, r0
 800c822:	d00e      	beq.n	800c842 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x3a>
 800c824:	3301      	adds	r3, #1
 800c826:	2b04      	cmp	r3, #4
 800c828:	d1f5      	bne.n	800c816 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0xe>
 800c82a:	4b06      	ldr	r3, [pc, #24]	; (800c844 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x3c>)
 800c82c:	6824      	ldr	r4, [r4, #0]
 800c82e:	681d      	ldr	r5, [r3, #0]
 800c830:	f7ff ff20 	bl	800c674 <e131::universe_to_multicast_ip(unsigned short)>
 800c834:	4621      	mov	r1, r4
 800c836:	4602      	mov	r2, r0
 800c838:	4628      	mov	r0, r5
 800c83a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c83e:	f004 bf37 	b.w	80116b0 <Network::LeaveGroup(int, unsigned int)>
 800c842:	bd70      	pop	{r4, r5, r6, pc}
 800c844:	200096f8 	strdcs	r9, [r0], -r8

0800c848 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>:
 800c848:	b570      	push	{r4, r5, r6, lr}
 800c84a:	4604      	mov	r4, r0
 800c84c:	461d      	mov	r5, r3
 800c84e:	b1c1      	cbz	r1, 800c882 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x3a>
 800c850:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800c854:	f200 5606 	addw	r6, r0, #1286	; 0x506
 800c858:	b12a      	cbz	r2, 800c866 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x1e>
 800c85a:	42aa      	cmp	r2, r5
 800c85c:	d017      	beq.n	800c88e <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x46>
 800c85e:	2104      	movs	r1, #4
 800c860:	4620      	mov	r0, r4
 800c862:	f7ff ffd1 	bl	800c808 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800c866:	4b0a      	ldr	r3, [pc, #40]	; (800c890 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x48>)
 800c868:	8035      	strh	r5, [r6, #0]
 800c86a:	4628      	mov	r0, r5
 800c86c:	6826      	ldr	r6, [r4, #0]
 800c86e:	681c      	ldr	r4, [r3, #0]
 800c870:	f7ff ff00 	bl	800c674 <e131::universe_to_multicast_ip(unsigned short)>
 800c874:	4631      	mov	r1, r6
 800c876:	4602      	mov	r2, r0
 800c878:	4620      	mov	r0, r4
 800c87a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c87e:	f004 bf14 	b.w	80116aa <Network::JoinGroup(int, unsigned int)>
 800c882:	b122      	cbz	r2, 800c88e <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x46>
 800c884:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800c888:	f500 66a1 	add.w	r6, r0, #1288	; 0x508
 800c88c:	e7e4      	b.n	800c858 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x10>
 800c88e:	bd70      	pop	{r4, r5, r6, pc}
 800c890:	200096f8 	strdcs	r9, [r0], -r8

0800c894 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
 800c894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c898:	4604      	mov	r4, r0
 800c89a:	460d      	mov	r5, r1
 800c89c:	461e      	mov	r6, r3
 800c89e:	bb02      	cbnz	r2, 800c8e2 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x4e>
 800c8a0:	2903      	cmp	r1, #3
 800c8a2:	d843      	bhi.n	800c92c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x98>
 800c8a4:	230c      	movs	r3, #12
 800c8a6:	fb03 0301 	mla	r3, r3, r1, r0
 800c8aa:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 800c8ae:	b12a      	cbz	r2, 800c8bc <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x28>
 800c8b0:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800c8b4:	42b3      	cmp	r3, r6
 800c8b6:	d109      	bne.n	800c8cc <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x38>
 800c8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8bc:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800c8c0:	3201      	adds	r2, #1
 800c8c2:	f880 250a 	strb.w	r2, [r0, #1290]	; 0x50a
 800c8c6:	2201      	movs	r2, #1
 800c8c8:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
 800c8cc:	230c      	movs	r3, #12
 800c8ce:	fb03 4405 	mla	r4, r3, r5, r4
 800c8d2:	4630      	mov	r0, r6
 800c8d4:	f8a4 6624 	strh.w	r6, [r4, #1572]	; 0x624
 800c8d8:	f7ff fecc 	bl	800c674 <e131::universe_to_multicast_ip(unsigned short)>
 800c8dc:	f8c4 0628 	str.w	r0, [r4, #1576]	; 0x628
 800c8e0:	e7ea      	b.n	800c8b8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800c8e2:	2a02      	cmp	r2, #2
 800c8e4:	d122      	bne.n	800c92c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x98>
 800c8e6:	2903      	cmp	r1, #3
 800c8e8:	d8e6      	bhi.n	800c8b8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800c8ea:	2344      	movs	r3, #68	; 0x44
 800c8ec:	fb03 0301 	mla	r3, r3, r1, r0
 800c8f0:	f893 2516 	ldrb.w	r2, [r3, #1302]	; 0x516
 800c8f4:	b152      	cbz	r2, 800c90c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x78>
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
 800c8fc:	f890 350b 	ldrb.w	r3, [r0, #1291]	; 0x50b
 800c900:	4632      	mov	r2, r6
 800c902:	3b01      	subs	r3, #1
 800c904:	f880 350b 	strb.w	r3, [r0, #1291]	; 0x50b
 800c908:	f7ff ff7e 	bl	800c808 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800c90c:	230c      	movs	r3, #12
 800c90e:	fb03 4505 	mla	r5, r3, r5, r4
 800c912:	f895 3626 	ldrb.w	r3, [r5, #1574]	; 0x626
 800c916:	2b00      	cmp	r3, #0
 800c918:	d0ce      	beq.n	800c8b8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800c91a:	2300      	movs	r3, #0
 800c91c:	f885 3626 	strb.w	r3, [r5, #1574]	; 0x626
 800c920:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800c924:	3b01      	subs	r3, #1
 800c926:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
 800c92a:	e7c5      	b.n	800c8b8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800c92c:	2344      	movs	r3, #68	; 0x44
 800c92e:	fb03 4305 	mla	r3, r3, r5, r4
 800c932:	f893 2516 	ldrb.w	r2, [r3, #1302]	; 0x516
 800c936:	b1d2      	cbz	r2, 800c96e <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xda>
 800c938:	f8b3 3514 	ldrh.w	r3, [r3, #1300]	; 0x514
 800c93c:	42b3      	cmp	r3, r6
 800c93e:	d0bb      	beq.n	800c8b8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800c940:	4632      	mov	r2, r6
 800c942:	4629      	mov	r1, r5
 800c944:	4620      	mov	r0, r4
 800c946:	f7ff ff5f 	bl	800c808 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800c94a:	4b0d      	ldr	r3, [pc, #52]	; (800c980 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xec>)
 800c94c:	4630      	mov	r0, r6
 800c94e:	681f      	ldr	r7, [r3, #0]
 800c950:	f8d4 8000 	ldr.w	r8, [r4]
 800c954:	f7ff fe8e 	bl	800c674 <e131::universe_to_multicast_ip(unsigned short)>
 800c958:	4641      	mov	r1, r8
 800c95a:	4602      	mov	r2, r0
 800c95c:	4638      	mov	r0, r7
 800c95e:	f004 fea4 	bl	80116aa <Network::JoinGroup(int, unsigned int)>
 800c962:	2344      	movs	r3, #68	; 0x44
 800c964:	fb03 4305 	mla	r3, r3, r5, r4
 800c968:	f8a3 6514 	strh.w	r6, [r3, #1300]	; 0x514
 800c96c:	e7a4      	b.n	800c8b8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800c96e:	f894 250b 	ldrb.w	r2, [r4, #1291]	; 0x50b
 800c972:	3201      	adds	r2, #1
 800c974:	f884 250b 	strb.w	r2, [r4, #1291]	; 0x50b
 800c978:	2201      	movs	r2, #1
 800c97a:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
 800c97e:	e7e4      	b.n	800c94a <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xb6>
 800c980:	200096f8 	strdcs	r9, [r0], -r8

0800c984 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>:
 800c984:	b953      	cbnz	r3, 800c99c <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x18>
 800c986:	2903      	cmp	r1, #3
 800c988:	d811      	bhi.n	800c9ae <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x2a>
 800c98a:	230c      	movs	r3, #12
 800c98c:	fb03 0001 	mla	r0, r3, r1, r0
 800c990:	f8b0 3624 	ldrh.w	r3, [r0, #1572]	; 0x624
 800c994:	f890 0626 	ldrb.w	r0, [r0, #1574]	; 0x626
 800c998:	8013      	strh	r3, [r2, #0]
 800c99a:	4770      	bx	lr
 800c99c:	2344      	movs	r3, #68	; 0x44
 800c99e:	fb03 0001 	mla	r0, r3, r1, r0
 800c9a2:	f8b0 3514 	ldrh.w	r3, [r0, #1300]	; 0x514
 800c9a6:	f890 0516 	ldrb.w	r0, [r0, #1302]	; 0x516
 800c9aa:	8013      	strh	r3, [r2, #0]
 800c9ac:	4770      	bx	lr
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	4770      	bx	lr

0800c9b2 <E131Bridge::UpdateMergeStatus(unsigned int)>:
 800c9b2:	f890 34f5 	ldrb.w	r3, [r0, #1269]	; 0x4f5
 800c9b6:	b923      	cbnz	r3, 800c9c2 <E131Bridge::UpdateMergeStatus(unsigned int)+0x10>
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	f880 34f5 	strb.w	r3, [r0, #1269]	; 0x4f5
 800c9be:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800c9c2:	2344      	movs	r3, #68	; 0x44
 800c9c4:	fb03 0001 	mla	r0, r3, r1, r0
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	f880 3555 	strb.w	r3, [r0, #1365]	; 0x555
 800c9ce:	4770      	bx	lr

0800c9d0 <E131Bridge::CheckMergeTimeouts(unsigned int)>:
 800c9d0:	4602      	mov	r2, r0
 800c9d2:	2044      	movs	r0, #68	; 0x44
 800c9d4:	4348      	muls	r0, r1
 800c9d6:	b570      	push	{r4, r5, r6, lr}
 800c9d8:	1815      	adds	r5, r2, r0
 800c9da:	460c      	mov	r4, r1
 800c9dc:	68d3      	ldr	r3, [r2, #12]
 800c9de:	f8d5 1518 	ldr.w	r1, [r5, #1304]	; 0x518
 800c9e2:	1a5b      	subs	r3, r3, r1
 800c9e4:	f242 7110 	movw	r1, #10000	; 0x2710
 800c9e8:	428b      	cmp	r3, r1
 800c9ea:	d90a      	bls.n	800ca02 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x32>
 800c9ec:	2600      	movs	r6, #0
 800c9ee:	f500 60a4 	add.w	r0, r0, #1312	; 0x520
 800c9f2:	2110      	movs	r1, #16
 800c9f4:	f8c5 651c 	str.w	r6, [r5, #1308]	; 0x51c
 800c9f8:	4410      	add	r0, r2
 800c9fa:	f7ff fe4d 	bl	800c698 <memset.constprop.0.isra.0>
 800c9fe:	f885 6555 	strb.w	r6, [r5, #1365]	; 0x555
 800ca02:	2344      	movs	r3, #68	; 0x44
 800ca04:	435c      	muls	r4, r3
 800ca06:	1915      	adds	r5, r2, r4
 800ca08:	f8d5 1534 	ldr.w	r1, [r5, #1332]	; 0x534
 800ca0c:	68d3      	ldr	r3, [r2, #12]
 800ca0e:	1a5b      	subs	r3, r3, r1
 800ca10:	f242 7110 	movw	r1, #10000	; 0x2710
 800ca14:	428b      	cmp	r3, r1
 800ca16:	d90a      	bls.n	800ca2e <E131Bridge::CheckMergeTimeouts(unsigned int)+0x5e>
 800ca18:	2600      	movs	r6, #0
 800ca1a:	f204 543c 	addw	r4, r4, #1340	; 0x53c
 800ca1e:	2110      	movs	r1, #16
 800ca20:	f8c5 6538 	str.w	r6, [r5, #1336]	; 0x538
 800ca24:	1910      	adds	r0, r2, r4
 800ca26:	f7ff fe37 	bl	800c698 <memset.constprop.0.isra.0>
 800ca2a:	f885 6555 	strb.w	r6, [r5, #1365]	; 0x555
 800ca2e:	f892 1599 	ldrb.w	r1, [r2, #1433]	; 0x599
 800ca32:	f892 3555 	ldrb.w	r3, [r2, #1365]	; 0x555
 800ca36:	430b      	orrs	r3, r1
 800ca38:	f892 15dd 	ldrb.w	r1, [r2, #1501]	; 0x5dd
 800ca3c:	430b      	orrs	r3, r1
 800ca3e:	d107      	bne.n	800ca50 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x80>
 800ca40:	f892 3621 	ldrb.w	r3, [r2, #1569]	; 0x621
 800ca44:	b923      	cbnz	r3, 800ca50 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x80>
 800ca46:	2101      	movs	r1, #1
 800ca48:	f882 34f5 	strb.w	r3, [r2, #1269]	; 0x4f5
 800ca4c:	f882 14f8 	strb.w	r1, [r2, #1272]	; 0x4f8
 800ca50:	bd70      	pop	{r4, r5, r6, pc}

0800ca52 <E131Bridge::IsPriorityTimeOut(unsigned int) const>:
 800ca52:	2244      	movs	r2, #68	; 0x44
 800ca54:	fb02 0101 	mla	r1, r2, r1, r0
 800ca58:	68c3      	ldr	r3, [r0, #12]
 800ca5a:	b510      	push	{r4, lr}
 800ca5c:	f8d1 2534 	ldr.w	r2, [r1, #1332]	; 0x534
 800ca60:	f8d1 451c 	ldr.w	r4, [r1, #1308]	; 0x51c
 800ca64:	f8d1 0538 	ldr.w	r0, [r1, #1336]	; 0x538
 800ca68:	1a9a      	subs	r2, r3, r2
 800ca6a:	b184      	cbz	r4, 800ca8e <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3c>
 800ca6c:	f8d1 1518 	ldr.w	r1, [r1, #1304]	; 0x518
 800ca70:	1a5b      	subs	r3, r3, r1
 800ca72:	b128      	cbz	r0, 800ca80 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2e>
 800ca74:	f242 700f 	movw	r0, #9999	; 0x270f
 800ca78:	4283      	cmp	r3, r0
 800ca7a:	d90d      	bls.n	800ca98 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x46>
 800ca7c:	4282      	cmp	r2, r0
 800ca7e:	e002      	b.n	800ca86 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x34>
 800ca80:	f242 7010 	movw	r0, #10000	; 0x2710
 800ca84:	4283      	cmp	r3, r0
 800ca86:	bf94      	ite	ls
 800ca88:	2000      	movls	r0, #0
 800ca8a:	2001      	movhi	r0, #1
 800ca8c:	bd10      	pop	{r4, pc}
 800ca8e:	2800      	cmp	r0, #0
 800ca90:	d0fc      	beq.n	800ca8c <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>
 800ca92:	f242 7010 	movw	r0, #10000	; 0x2710
 800ca96:	e7f1      	b.n	800ca7c <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2a>
 800ca98:	2000      	movs	r0, #0
 800ca9a:	e7f7      	b.n	800ca8c <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>

0800ca9c <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>:
 800ca9c:	684a      	ldr	r2, [r1, #4]
 800ca9e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800caa0:	b510      	push	{r4, lr}
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d10d      	bne.n	800cac2 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x26>
 800caa6:	f100 0391 	add.w	r3, r0, #145	; 0x91
 800caaa:	3107      	adds	r1, #7
 800caac:	30a1      	adds	r0, #161	; 0xa1
 800caae:	4283      	cmp	r3, r0
 800cab0:	d101      	bne.n	800cab6 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x1a>
 800cab2:	2001      	movs	r0, #1
 800cab4:	bd10      	pop	{r4, pc}
 800cab6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800caba:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800cabe:	4294      	cmp	r4, r2
 800cac0:	d0f5      	beq.n	800caae <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x12>
 800cac2:	2000      	movs	r0, #0
 800cac4:	e7f6      	b.n	800cab4 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x18>
	...

0800cac8 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>:
 800cac8:	2301      	movs	r3, #1
 800caca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cace:	4604      	mov	r4, r0
 800cad0:	4690      	mov	r8, r2
 800cad2:	460f      	mov	r7, r1
 800cad4:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800cad8:	2900      	cmp	r1, #0
 800cada:	d044      	beq.n	800cb66 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x9e>
 800cadc:	2a00      	cmp	r2, #0
 800cade:	d042      	beq.n	800cb66 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x9e>
 800cae0:	2600      	movs	r6, #0
 800cae2:	f240 6904 	movw	r9, #1540	; 0x604
 800cae6:	4632      	mov	r2, r6
 800cae8:	4637      	mov	r7, r6
 800caea:	f8c0 34f4 	str.w	r3, [r0, #1268]	; 0x4f4
 800caee:	f880 350c 	strb.w	r3, [r0, #1292]	; 0x50c
 800caf2:	f500 65a4 	add.w	r5, r0, #1312	; 0x520
 800caf6:	f895 8036 	ldrb.w	r8, [r5, #54]	; 0x36
 800cafa:	f1b8 0f00 	cmp.w	r8, #0
 800cafe:	d018      	beq.n	800cb32 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x6a>
 800cb00:	2110      	movs	r1, #16
 800cb02:	4628      	mov	r0, r5
 800cb04:	f845 7c04 	str.w	r7, [r5, #-4]
 800cb08:	f7ff fdc6 	bl	800c698 <memset.constprop.0.isra.0>
 800cb0c:	2110      	movs	r1, #16
 800cb0e:	f105 001c 	add.w	r0, r5, #28
 800cb12:	61af      	str	r7, [r5, #24]
 800cb14:	f7ff fdc0 	bl	800c698 <memset.constprop.0.isra.0>
 800cb18:	f7fe f9ee 	bl	800aef8 <lightset::Data::Get()>
 800cb1c:	4642      	mov	r2, r8
 800cb1e:	fb09 0006 	mla	r0, r9, r6, r0
 800cb22:	f8c0 7600 	str.w	r7, [r0, #1536]	; 0x600
 800cb26:	f885 7034 	strb.w	r7, [r5, #52]	; 0x34
 800cb2a:	f885 7036 	strb.w	r7, [r5, #54]	; 0x36
 800cb2e:	f885 7035 	strb.w	r7, [r5, #53]	; 0x35
 800cb32:	3601      	adds	r6, #1
 800cb34:	2e04      	cmp	r6, #4
 800cb36:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800cb3a:	d1dc      	bne.n	800caf6 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x2e>
 800cb3c:	b12a      	cbz	r2, 800cb4a <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x82>
 800cb3e:	f8d4 1510 	ldr.w	r1, [r4, #1296]	; 0x510
 800cb42:	2901      	cmp	r1, #1
 800cb44:	d04a      	beq.n	800cbdc <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x114>
 800cb46:	2902      	cmp	r1, #2
 800cb48:	d04d      	beq.n	800cbe6 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x11e>
 800cb4a:	4b29      	ldr	r3, [pc, #164]	; (800cbf0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x128>)
 800cb4c:	2102      	movs	r1, #2
 800cb4e:	6818      	ldr	r0, [r3, #0]
 800cb50:	f007 f850 	bl	8013bf4 <LedBlink::SetMode(ledblink::Mode)>
 800cb54:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800cb58:	f023 0302 	bic.w	r3, r3, #2
 800cb5c:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800cb60:	b003      	add	sp, #12
 800cb62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb66:	2600      	movs	r6, #0
 800cb68:	f240 6b04 	movw	fp, #1540	; 0x604
 800cb6c:	4632      	mov	r2, r6
 800cb6e:	46b1      	mov	r9, r6
 800cb70:	f204 553c 	addw	r5, r4, #1340	; 0x53c
 800cb74:	f895 a01a 	ldrb.w	sl, [r5, #26]
 800cb78:	f1ba 0f00 	cmp.w	sl, #0
 800cb7c:	d028      	beq.n	800cbd0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x108>
 800cb7e:	b15f      	cbz	r7, 800cb98 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd0>
 800cb80:	f855 3c20 	ldr.w	r3, [r5, #-32]
 800cb84:	b143      	cbz	r3, 800cb98 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd0>
 800cb86:	2110      	movs	r1, #16
 800cb88:	f845 9c20 	str.w	r9, [r5, #-32]
 800cb8c:	f1a5 001c 	sub.w	r0, r5, #28
 800cb90:	f7ff fd82 	bl	800c698 <memset.constprop.0.isra.0>
 800cb94:	f885 9019 	strb.w	r9, [r5, #25]
 800cb98:	f1b8 0f00 	cmp.w	r8, #0
 800cb9c:	d00a      	beq.n	800cbb4 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xec>
 800cb9e:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800cba2:	b13b      	cbz	r3, 800cbb4 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xec>
 800cba4:	2110      	movs	r1, #16
 800cba6:	4628      	mov	r0, r5
 800cba8:	f845 9c04 	str.w	r9, [r5, #-4]
 800cbac:	f7ff fd74 	bl	800c698 <memset.constprop.0.isra.0>
 800cbb0:	f885 9019 	strb.w	r9, [r5, #25]
 800cbb4:	f894 34f5 	ldrb.w	r3, [r4, #1269]	; 0x4f5
 800cbb8:	b953      	cbnz	r3, 800cbd0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x108>
 800cbba:	9301      	str	r3, [sp, #4]
 800cbbc:	f7fe f99c 	bl	800aef8 <lightset::Data::Get()>
 800cbc0:	4652      	mov	r2, sl
 800cbc2:	fb0b 0006 	mla	r0, fp, r6, r0
 800cbc6:	9b01      	ldr	r3, [sp, #4]
 800cbc8:	f8c0 3600 	str.w	r3, [r0, #1536]	; 0x600
 800cbcc:	762b      	strb	r3, [r5, #24]
 800cbce:	76ab      	strb	r3, [r5, #26]
 800cbd0:	3601      	adds	r6, #1
 800cbd2:	2e04      	cmp	r6, #4
 800cbd4:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800cbd8:	d1cc      	bne.n	800cb74 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xac>
 800cbda:	e7af      	b.n	800cb3c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x74>
 800cbdc:	6860      	ldr	r0, [r4, #4]
 800cbde:	6803      	ldr	r3, [r0, #0]
 800cbe0:	695b      	ldr	r3, [r3, #20]
 800cbe2:	4798      	blx	r3
 800cbe4:	e7b1      	b.n	800cb4a <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x82>
 800cbe6:	6860      	ldr	r0, [r4, #4]
 800cbe8:	6803      	ldr	r3, [r0, #0]
 800cbea:	699b      	ldr	r3, [r3, #24]
 800cbec:	4798      	blx	r3
 800cbee:	e7ac      	b.n	800cb4a <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x82>
 800cbf0:	20009dbc 			; <UNDEFINED> instruction: 0x20009dbc

0800cbf4 <E131Bridge::HandleDmx()>:
 800cbf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbfc:	4604      	mov	r4, r0
 800cbfe:	2600      	movs	r6, #0
 800cc00:	f8b0 70f7 	ldrh.w	r7, [r0, #247]	; 0xf7
 800cc04:	b085      	sub	sp, #20
 800cc06:	ba7f      	rev16	r7, r7
 800cc08:	b2bf      	uxth	r7, r7
 800cc0a:	f100 09fa 	add.w	r9, r0, #250	; 0xfa
 800cc0e:	3f01      	subs	r7, #1
 800cc10:	f500 65a4 	add.w	r5, r0, #1312	; 0x520
 800cc14:	9301      	str	r3, [sp, #4]
 800cc16:	f815 3c0a 	ldrb.w	r3, [r5, #-10]
 800cc1a:	b353      	cbz	r3, 800cc72 <E131Bridge::HandleDmx()+0x7e>
 800cc1c:	f835 3c0c 	ldrh.w	r3, [r5, #-12]
 800cc20:	f8b4 20ed 	ldrh.w	r2, [r4, #237]	; 0xed
 800cc24:	ba5b      	rev16	r3, r3
 800cc26:	b29b      	uxth	r3, r3
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d122      	bne.n	800cc72 <E131Bridge::HandleDmx()+0x7e>
 800cc2c:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800cc30:	f1a5 0108 	sub.w	r1, r5, #8
 800cc34:	4620      	mov	r0, r4
 800cc36:	9302      	str	r3, [sp, #8]
 800cc38:	f7ff ff30 	bl	800ca9c <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800cc3c:	f105 0114 	add.w	r1, r5, #20
 800cc40:	4682      	mov	sl, r0
 800cc42:	4620      	mov	r0, r4
 800cc44:	f7ff ff2a 	bl	800ca9c <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800cc48:	f8d5 b018 	ldr.w	fp, [r5, #24]
 800cc4c:	4680      	mov	r8, r0
 800cc4e:	f1ba 0f00 	cmp.w	sl, #0
 800cc52:	d01a      	beq.n	800cc8a <E131Bridge::HandleDmx()+0x96>
 800cc54:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800cc58:	7c2a      	ldrb	r2, [r5, #16]
 800cc5a:	742b      	strb	r3, [r5, #16]
 800cc5c:	3313      	adds	r3, #19
 800cc5e:	1a9b      	subs	r3, r3, r2
 800cc60:	b2db      	uxtb	r3, r3
 800cc62:	2b13      	cmp	r3, #19
 800cc64:	d905      	bls.n	800cc72 <E131Bridge::HandleDmx()+0x7e>
 800cc66:	f994 20ec 	ldrsb.w	r2, [r4, #236]	; 0xec
 800cc6a:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800cc6e:	2a00      	cmp	r2, #0
 800cc70:	da14      	bge.n	800cc9c <E131Bridge::HandleDmx()+0xa8>
 800cc72:	9b01      	ldr	r3, [sp, #4]
 800cc74:	3601      	adds	r6, #1
 800cc76:	f203 6304 	addw	r3, r3, #1540	; 0x604
 800cc7a:	2e04      	cmp	r6, #4
 800cc7c:	9301      	str	r3, [sp, #4]
 800cc7e:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800cc82:	d1c8      	bne.n	800cc16 <E131Bridge::HandleDmx()+0x22>
 800cc84:	b005      	add	sp, #20
 800cc86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc8a:	2800      	cmp	r0, #0
 800cc8c:	d0eb      	beq.n	800cc66 <E131Bridge::HandleDmx()+0x72>
 800cc8e:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800cc92:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 800cc96:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800cc9a:	e7df      	b.n	800cc5c <E131Bridge::HandleDmx()+0x68>
 800cc9c:	065a      	lsls	r2, r3, #25
 800cc9e:	d50b      	bpl.n	800ccb8 <E131Bridge::HandleDmx()+0xc4>
 800cca0:	f1ba 0f00 	cmp.w	sl, #0
 800cca4:	d102      	bne.n	800ccac <E131Bridge::HandleDmx()+0xb8>
 800cca6:	f1b8 0f00 	cmp.w	r8, #0
 800ccaa:	d0e2      	beq.n	800cc72 <E131Bridge::HandleDmx()+0x7e>
 800ccac:	4642      	mov	r2, r8
 800ccae:	4651      	mov	r1, sl
 800ccb0:	4620      	mov	r0, r4
 800ccb2:	f7ff ff09 	bl	800cac8 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800ccb6:	e7dc      	b.n	800cc72 <E131Bridge::HandleDmx()+0x7e>
 800ccb8:	f894 34f5 	ldrb.w	r3, [r4, #1269]	; 0x4f5
 800ccbc:	b133      	cbz	r3, 800cccc <E131Bridge::HandleDmx()+0xd8>
 800ccbe:	f894 34f9 	ldrb.w	r3, [r4, #1273]	; 0x4f9
 800ccc2:	b91b      	cbnz	r3, 800cccc <E131Bridge::HandleDmx()+0xd8>
 800ccc4:	4631      	mov	r1, r6
 800ccc6:	4620      	mov	r0, r4
 800ccc8:	f7ff fe82 	bl	800c9d0 <E131Bridge::CheckMergeTimeouts(unsigned int)>
 800cccc:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
 800ccd0:	f894 250c 	ldrb.w	r2, [r4, #1292]	; 0x50c
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	d259      	bcs.n	800cd8c <E131Bridge::HandleDmx()+0x198>
 800ccd8:	4631      	mov	r1, r6
 800ccda:	4620      	mov	r0, r4
 800ccdc:	9303      	str	r3, [sp, #12]
 800ccde:	f7ff feb8 	bl	800ca52 <E131Bridge::IsPriorityTimeOut(unsigned int) const>
 800cce2:	2800      	cmp	r0, #0
 800cce4:	d0c5      	beq.n	800cc72 <E131Bridge::HandleDmx()+0x7e>
 800cce6:	9b03      	ldr	r3, [sp, #12]
 800cce8:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
 800ccec:	9b02      	ldr	r3, [sp, #8]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d154      	bne.n	800cd9c <E131Bridge::HandleDmx()+0x1a8>
 800ccf2:	f1bb 0f00 	cmp.w	fp, #0
 800ccf6:	d15c      	bne.n	800cdb2 <E131Bridge::HandleDmx()+0x1be>
 800ccf8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ccfa:	2210      	movs	r2, #16
 800ccfc:	f845 3c04 	str.w	r3, [r5, #-4]
 800cd00:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800cd04:	4628      	mov	r0, r5
 800cd06:	742b      	strb	r3, [r5, #16]
 800cd08:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800cd0c:	f7ff fccc 	bl	800c6a8 <memcpy.isra.0>
 800cd10:	68e3      	ldr	r3, [r4, #12]
 800cd12:	463a      	mov	r2, r7
 800cd14:	4649      	mov	r1, r9
 800cd16:	4630      	mov	r0, r6
 800cd18:	f845 3c08 	str.w	r3, [r5, #-8]
 800cd1c:	f7fe f8f8 	bl	800af10 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 800cd20:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800cd24:	069b      	lsls	r3, r3, #26
 800cd26:	f100 80aa 	bmi.w	800ce7e <E131Bridge::HandleDmx()+0x28a>
 800cd2a:	f8b4 30e9 	ldrh.w	r3, [r4, #233]	; 0xe9
 800cd2e:	b29a      	uxth	r2, r3
 800cd30:	2a00      	cmp	r2, #0
 800cd32:	f000 80a8 	beq.w	800ce86 <E131Bridge::HandleDmx()+0x292>
 800cd36:	f894 24f7 	ldrb.w	r2, [r4, #1271]	; 0x4f7
 800cd3a:	2a00      	cmp	r2, #0
 800cd3c:	f040 80a3 	bne.w	800ce86 <E131Bridge::HandleDmx()+0x292>
 800cd40:	ba5b      	rev16	r3, r3
 800cd42:	b29b      	uxth	r3, r3
 800cd44:	f1ba 0f00 	cmp.w	sl, #0
 800cd48:	f040 8096 	bne.w	800ce78 <E131Bridge::HandleDmx()+0x284>
 800cd4c:	f1b8 0f00 	cmp.w	r8, #0
 800cd50:	f040 8092 	bne.w	800ce78 <E131Bridge::HandleDmx()+0x284>
 800cd54:	69aa      	ldr	r2, [r5, #24]
 800cd56:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800cd5a:	3a00      	subs	r2, #0
 800cd5c:	bf18      	it	ne
 800cd5e:	2201      	movne	r2, #1
 800cd60:	3900      	subs	r1, #0
 800cd62:	bf18      	it	ne
 800cd64:	2101      	movne	r1, #1
 800cd66:	4620      	mov	r0, r4
 800cd68:	f7ff fd6e 	bl	800c848 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>
 800cd6c:	f240 1301 	movw	r3, #257	; 0x101
 800cd70:	f8a4 34f6 	strh.w	r3, [r4, #1270]	; 0x4f6
 800cd74:	f894 34fa 	ldrb.w	r3, [r4, #1274]	; 0x4fa
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	f040 8089 	bne.w	800ce90 <E131Bridge::HandleDmx()+0x29c>
 800cd7e:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800cd82:	f043 0302 	orr.w	r3, r3, #2
 800cd86:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800cd8a:	e772      	b.n	800cc72 <E131Bridge::HandleDmx()+0x7e>
 800cd8c:	d9ae      	bls.n	800ccec <E131Bridge::HandleDmx()+0xf8>
 800cd8e:	2200      	movs	r2, #0
 800cd90:	f845 2c04 	str.w	r2, [r5, #-4]
 800cd94:	61aa      	str	r2, [r5, #24]
 800cd96:	f884 24f5 	strb.w	r2, [r4, #1269]	; 0x4f5
 800cd9a:	e7a5      	b.n	800cce8 <E131Bridge::HandleDmx()+0xf4>
 800cd9c:	f1ba 0f00 	cmp.w	sl, #0
 800cda0:	f000 809a 	beq.w	800ced8 <E131Bridge::HandleDmx()+0x2e4>
 800cda4:	f1bb 0f00 	cmp.w	fp, #0
 800cda8:	d159      	bne.n	800ce5e <E131Bridge::HandleDmx()+0x26a>
 800cdaa:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800cdae:	742b      	strb	r3, [r5, #16]
 800cdb0:	e7ae      	b.n	800cd10 <E131Bridge::HandleDmx()+0x11c>
 800cdb2:	f1b8 0f00 	cmp.w	r8, #0
 800cdb6:	d038      	beq.n	800ce2a <E131Bridge::HandleDmx()+0x236>
 800cdb8:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800cdbc:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800cdc0:	68e3      	ldr	r3, [r4, #12]
 800cdc2:	616b      	str	r3, [r5, #20]
 800cdc4:	f7fe f898 	bl	800aef8 <lightset::Data::Get()>
 800cdc8:	4683      	mov	fp, r0
 800cdca:	9b01      	ldr	r3, [sp, #4]
 800cdcc:	463a      	mov	r2, r7
 800cdce:	f5a3 7000 	sub.w	r0, r3, #512	; 0x200
 800cdd2:	4649      	mov	r1, r9
 800cdd4:	4458      	add	r0, fp
 800cdd6:	f7ff fc67 	bl	800c6a8 <memcpy.isra.0>
 800cdda:	f240 6304 	movw	r3, #1540	; 0x604
 800cdde:	fb03 b306 	mla	r3, r3, r6, fp
 800cde2:	f8c3 7600 	str.w	r7, [r3, #1536]	; 0x600
 800cde6:	9b01      	ldr	r3, [sp, #4]
 800cde8:	463a      	mov	r2, r7
 800cdea:	4649      	mov	r1, r9
 800cdec:	eb0b 0003 	add.w	r0, fp, r3
 800cdf0:	f7ff fc5a 	bl	800c6a8 <memcpy.isra.0>
 800cdf4:	e794      	b.n	800cd20 <E131Bridge::HandleDmx()+0x12c>
 800cdf6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800cdf8:	2210      	movs	r2, #16
 800cdfa:	61ab      	str	r3, [r5, #24]
 800cdfc:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800ce00:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800ce04:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800ce08:	f105 001c 	add.w	r0, r5, #28
 800ce0c:	f7ff fc4c 	bl	800c6a8 <memcpy.isra.0>
 800ce10:	68e3      	ldr	r3, [r4, #12]
 800ce12:	4631      	mov	r1, r6
 800ce14:	4620      	mov	r0, r4
 800ce16:	616b      	str	r3, [r5, #20]
 800ce18:	f7ff fdcb 	bl	800c9b2 <E131Bridge::UpdateMergeStatus(unsigned int)>
 800ce1c:	463a      	mov	r2, r7
 800ce1e:	4649      	mov	r1, r9
 800ce20:	4630      	mov	r0, r6
 800ce22:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800ce24:	f7fe f8ba 	bl	800af9c <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800ce28:	e77a      	b.n	800cd20 <E131Bridge::HandleDmx()+0x12c>
 800ce2a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ce2c:	2210      	movs	r2, #16
 800ce2e:	f845 3c04 	str.w	r3, [r5, #-4]
 800ce32:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800ce36:	4628      	mov	r0, r5
 800ce38:	742b      	strb	r3, [r5, #16]
 800ce3a:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800ce3e:	f7ff fc33 	bl	800c6a8 <memcpy.isra.0>
 800ce42:	68e3      	ldr	r3, [r4, #12]
 800ce44:	4631      	mov	r1, r6
 800ce46:	4620      	mov	r0, r4
 800ce48:	f845 3c08 	str.w	r3, [r5, #-8]
 800ce4c:	f7ff fdb1 	bl	800c9b2 <E131Bridge::UpdateMergeStatus(unsigned int)>
 800ce50:	463a      	mov	r2, r7
 800ce52:	4649      	mov	r1, r9
 800ce54:	4630      	mov	r0, r6
 800ce56:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800ce58:	f7fe f877 	bl	800af4a <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800ce5c:	e760      	b.n	800cd20 <E131Bridge::HandleDmx()+0x12c>
 800ce5e:	f1b8 0f00 	cmp.w	r8, #0
 800ce62:	d103      	bne.n	800ce6c <E131Bridge::HandleDmx()+0x278>
 800ce64:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800ce68:	742b      	strb	r3, [r5, #16]
 800ce6a:	e7ea      	b.n	800ce42 <E131Bridge::HandleDmx()+0x24e>
 800ce6c:	4820      	ldr	r0, [pc, #128]	; (800cef0 <E131Bridge::HandleDmx()+0x2fc>)
 800ce6e:	b005      	add	sp, #20
 800ce70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce74:	f7fc b8da 	b.w	800902c <printf>
 800ce78:	4642      	mov	r2, r8
 800ce7a:	4651      	mov	r1, sl
 800ce7c:	e773      	b.n	800cd66 <E131Bridge::HandleDmx()+0x172>
 800ce7e:	f04f 0300 	mov.w	r3, #0
 800ce82:	f884 34f7 	strb.w	r3, [r4, #1271]	; 0x4f7
 800ce86:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	f47f af72 	bne.w	800cd74 <E131Bridge::HandleDmx()+0x180>
 800ce90:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800ce94:	f7fe f830 	bl	800aef8 <lightset::Data::Get()>
 800ce98:	f240 6304 	movw	r3, #1540	; 0x604
 800ce9c:	f8d8 2000 	ldr.w	r2, [r8]
 800cea0:	fb03 0306 	mla	r3, r3, r6, r0
 800cea4:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800cea8:	9a01      	ldr	r2, [sp, #4]
 800ceaa:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
 800ceae:	1882      	adds	r2, r0, r2
 800ceb0:	4631      	mov	r1, r6
 800ceb2:	4640      	mov	r0, r8
 800ceb4:	47d0      	blx	sl
 800ceb6:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	f47f af5f 	bne.w	800cd7e <E131Bridge::HandleDmx()+0x18a>
 800cec0:	6860      	ldr	r0, [r4, #4]
 800cec2:	4631      	mov	r1, r6
 800cec4:	6803      	ldr	r3, [r0, #0]
 800cec6:	689b      	ldr	r3, [r3, #8]
 800cec8:	4798      	blx	r3
 800ceca:	f04f 0301 	mov.w	r3, #1
 800cece:	f884 34f8 	strb.w	r3, [r4, #1272]	; 0x4f8
 800ced2:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 800ced6:	e752      	b.n	800cd7e <E131Bridge::HandleDmx()+0x18a>
 800ced8:	f1bb 0f00 	cmp.w	fp, #0
 800cedc:	d08b      	beq.n	800cdf6 <E131Bridge::HandleDmx()+0x202>
 800cede:	f1b8 0f00 	cmp.w	r8, #0
 800cee2:	d0c3      	beq.n	800ce6c <E131Bridge::HandleDmx()+0x278>
 800cee4:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800cee8:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800ceec:	e790      	b.n	800ce10 <E131Bridge::HandleDmx()+0x21c>
 800ceee:	bf00      	nop
 800cef0:	08016a3f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r9, fp, sp, lr}

0800cef4 <E131Bridge::IsValidRoot()>:
 800cef4:	b530      	push	{r4, r5, lr}
 800cef6:	4a0d      	ldr	r2, [pc, #52]	; (800cf2c <E131Bridge::IsValidRoot()+0x38>)
 800cef8:	f100 037f 	add.w	r3, r0, #127	; 0x7f
 800cefc:	f100 018b 	add.w	r1, r0, #139	; 0x8b
 800cf00:	4299      	cmp	r1, r3
 800cf02:	d109      	bne.n	800cf18 <E131Bridge::IsValidRoot()+0x24>
 800cf04:	f8d0 008e 	ldr.w	r0, [r0, #142]	; 0x8e
 800cf08:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800cf0c:	d00c      	beq.n	800cf28 <E131Bridge::IsValidRoot()+0x34>
 800cf0e:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 800cf12:	4258      	negs	r0, r3
 800cf14:	4158      	adcs	r0, r3
 800cf16:	bd30      	pop	{r4, r5, pc}
 800cf18:	f812 4b01 	ldrb.w	r4, [r2], #1
 800cf1c:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 800cf20:	42a5      	cmp	r5, r4
 800cf22:	d0ed      	beq.n	800cf00 <E131Bridge::IsValidRoot()+0xc>
 800cf24:	2000      	movs	r0, #0
 800cf26:	e7f6      	b.n	800cf16 <E131Bridge::IsValidRoot()+0x22>
 800cf28:	2001      	movs	r0, #1
 800cf2a:	e7f4      	b.n	800cf16 <E131Bridge::IsValidRoot()+0x22>
 800cf2c:	08016b65 	stmdaeq	r1, {r0, r2, r5, r6, r8, r9, fp, sp, lr}

0800cf30 <E131Bridge::IsValidDataPacket()>:
 800cf30:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
 800cf34:	2b02      	cmp	r3, #2
 800cf36:	d10d      	bne.n	800cf54 <E131Bridge::IsValidDataPacket()+0x24>
 800cf38:	f890 30f2 	ldrb.w	r3, [r0, #242]	; 0xf2
 800cf3c:	2ba1      	cmp	r3, #161	; 0xa1
 800cf3e:	d109      	bne.n	800cf54 <E131Bridge::IsValidDataPacket()+0x24>
 800cf40:	f8b0 30f3 	ldrh.w	r3, [r0, #243]	; 0xf3
 800cf44:	b933      	cbnz	r3, 800cf54 <E131Bridge::IsValidDataPacket()+0x24>
 800cf46:	f8b0 00f5 	ldrh.w	r0, [r0, #245]	; 0xf5
 800cf4a:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800cf4e:	4258      	negs	r0, r3
 800cf50:	4158      	adcs	r0, r3
 800cf52:	4770      	bx	lr
 800cf54:	2000      	movs	r0, #0
 800cf56:	4770      	bx	lr

0800cf58 <E131Bridge::Run()>:
 800cf58:	b530      	push	{r4, r5, lr}
 800cf5a:	4601      	mov	r1, r0
 800cf5c:	4604      	mov	r4, r0
 800cf5e:	b085      	sub	sp, #20
 800cf60:	f10d 030e 	add.w	r3, sp, #14
 800cf64:	f811 0b7c 	ldrb.w	r0, [r1], #124
 800cf68:	f44f 628f 	mov.w	r2, #1144	; 0x478
 800cf6c:	9300      	str	r3, [sp, #0]
 800cf6e:	f104 0378 	add.w	r3, r4, #120	; 0x78
 800cf72:	f003 fe65 	bl	8010c40 <udp_recv>
 800cf76:	4b3a      	ldr	r3, [pc, #232]	; (800d060 <E131Bridge::Run()+0x108>)
 800cf78:	681d      	ldr	r5, [r3, #0]
 800cf7a:	60e5      	str	r5, [r4, #12]
 800cf7c:	2800      	cmp	r0, #0
 800cf7e:	d138      	bne.n	800cff2 <E131Bridge::Run()+0x9a>
 800cf80:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800cf84:	b16b      	cbz	r3, 800cfa2 <E131Bridge::Run()+0x4a>
 800cf86:	6923      	ldr	r3, [r4, #16]
 800cf88:	1aed      	subs	r5, r5, r3
 800cf8a:	f640 13c3 	movw	r3, #2499	; 0x9c3
 800cf8e:	429d      	cmp	r5, r3
 800cf90:	d928      	bls.n	800cfe4 <E131Bridge::Run()+0x8c>
 800cf92:	6863      	ldr	r3, [r4, #4]
 800cf94:	b9eb      	cbnz	r3, 800cfd2 <E131Bridge::Run()+0x7a>
 800cf96:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800cf9a:	f023 0302 	bic.w	r3, r3, #2
 800cf9e:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800cfa2:	6963      	ldr	r3, [r4, #20]
 800cfa4:	b12b      	cbz	r3, 800cfb2 <E131Bridge::Run()+0x5a>
 800cfa6:	4620      	mov	r0, r4
 800cfa8:	f000 f94c 	bl	800d244 <E131Bridge::HandleDmxIn()>
 800cfac:	4620      	mov	r0, r4
 800cfae:	f000 f8c7 	bl	800d140 <E131Bridge::SendDiscoveryPacket()>
 800cfb2:	7a23      	ldrb	r3, [r4, #8]
 800cfb4:	b15b      	cbz	r3, 800cfce <E131Bridge::Run()+0x76>
 800cfb6:	4b2b      	ldr	r3, [pc, #172]	; (800d064 <E131Bridge::Run()+0x10c>)
 800cfb8:	6818      	ldr	r0, [r3, #0]
 800cfba:	6843      	ldr	r3, [r0, #4]
 800cfbc:	2b04      	cmp	r3, #4
 800cfbe:	d006      	beq.n	800cfce <E131Bridge::Run()+0x76>
 800cfc0:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d049      	beq.n	800d05c <E131Bridge::Run()+0x104>
 800cfc8:	2103      	movs	r1, #3
 800cfca:	f006 fe13 	bl	8013bf4 <LedBlink::SetMode(ledblink::Mode)>
 800cfce:	b005      	add	sp, #20
 800cfd0:	bd30      	pop	{r4, r5, pc}
 800cfd2:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d1dd      	bne.n	800cf96 <E131Bridge::Run()+0x3e>
 800cfda:	2201      	movs	r2, #1
 800cfdc:	4620      	mov	r0, r4
 800cfde:	4611      	mov	r1, r2
 800cfe0:	f7ff fd72 	bl	800cac8 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800cfe4:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 800cfe8:	1a9b      	subs	r3, r3, r2
 800cfea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cfee:	d3d8      	bcc.n	800cfa2 <E131Bridge::Run()+0x4a>
 800cff0:	e7d1      	b.n	800cf96 <E131Bridge::Run()+0x3e>
 800cff2:	4620      	mov	r0, r4
 800cff4:	f7ff ff7e 	bl	800cef4 <E131Bridge::IsValidRoot()>
 800cff8:	2800      	cmp	r0, #0
 800cffa:	d0e8      	beq.n	800cfce <E131Bridge::Run()+0x76>
 800cffc:	2300      	movs	r3, #0
 800cffe:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
 800d002:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800d006:	6125      	str	r5, [r4, #16]
 800d008:	b15b      	cbz	r3, 800d022 <E131Bridge::Run()+0xca>
 800d00a:	f894 34f7 	ldrb.w	r3, [r4, #1271]	; 0x4f7
 800d00e:	b943      	cbnz	r3, 800d022 <E131Bridge::Run()+0xca>
 800d010:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	; 0x4fc
 800d014:	1aad      	subs	r5, r5, r2
 800d016:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800d01a:	4295      	cmp	r5, r2
 800d01c:	bf88      	it	hi
 800d01e:	f884 34f6 	strbhi.w	r3, [r4, #1270]	; 0x4f6
 800d022:	6863      	ldr	r3, [r4, #4]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d0bc      	beq.n	800cfa2 <E131Bridge::Run()+0x4a>
 800d028:	f8d4 308e 	ldr.w	r3, [r4, #142]	; 0x8e
 800d02c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d030:	ba1a      	rev	r2, r3
 800d032:	d108      	bne.n	800d046 <E131Bridge::Run()+0xee>
 800d034:	4620      	mov	r0, r4
 800d036:	f7ff ff7b 	bl	800cf30 <E131Bridge::IsValidDataPacket()>
 800d03a:	2800      	cmp	r0, #0
 800d03c:	d0b1      	beq.n	800cfa2 <E131Bridge::Run()+0x4a>
 800d03e:	4620      	mov	r0, r4
 800d040:	f7ff fdd8 	bl	800cbf4 <E131Bridge::HandleDmx()>
 800d044:	e7ad      	b.n	800cfa2 <E131Bridge::Run()+0x4a>
 800d046:	2a08      	cmp	r2, #8
 800d048:	d1ab      	bne.n	800cfa2 <E131Bridge::Run()+0x4a>
 800d04a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800d04e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d052:	d1a6      	bne.n	800cfa2 <E131Bridge::Run()+0x4a>
 800d054:	4620      	mov	r0, r4
 800d056:	f000 f973 	bl	800d340 <E131Bridge::HandleSynchronization()>
 800d05a:	e7a2      	b.n	800cfa2 <E131Bridge::Run()+0x4a>
 800d05c:	2102      	movs	r1, #2
 800d05e:	e7b4      	b.n	800cfca <E131Bridge::Run()+0x72>
 800d060:	20009dd4 	ldrdcs	r9, [r0], -r4
 800d064:	20009dbc 			; <UNDEFINED> instruction: 0x20009dbc

0800d068 <E131Bridge::FillDiscoveryPacket()>:
 800d068:	2200      	movs	r2, #0
 800d06a:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800d06e:	b510      	push	{r4, lr}
 800d070:	333c      	adds	r3, #60	; 0x3c
 800d072:	005b      	lsls	r3, r3, #1
 800d074:	f8a0 3504 	strh.w	r3, [r0, #1284]	; 0x504
 800d078:	69c3      	ldr	r3, [r0, #28]
 800d07a:	f503 618f 	add.w	r1, r3, #1144	; 0x478
 800d07e:	428b      	cmp	r3, r1
 800d080:	d14a      	bne.n	800d118 <E131Bridge::FillDiscoveryPacket()+0xb0>
 800d082:	69c3      	ldr	r3, [r0, #28]
 800d084:	492d      	ldr	r1, [pc, #180]	; (800d13c <E131Bridge::FillDiscoveryPacket()+0xd4>)
 800d086:	701a      	strb	r2, [r3, #0]
 800d088:	2210      	movs	r2, #16
 800d08a:	705a      	strb	r2, [r3, #1]
 800d08c:	1cda      	adds	r2, r3, #3
 800d08e:	330f      	adds	r3, #15
 800d090:	4293      	cmp	r3, r2
 800d092:	d144      	bne.n	800d11e <E131Bridge::FillDiscoveryPacket()+0xb6>
 800d094:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800d098:	69c3      	ldr	r3, [r0, #28]
 800d09a:	3234      	adds	r2, #52	; 0x34
 800d09c:	0052      	lsls	r2, r2, #1
 800d09e:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800d0a2:	ba52      	rev16	r2, r2
 800d0a4:	821a      	strh	r2, [r3, #16]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	749a      	strb	r2, [r3, #18]
 800d0aa:	74da      	strb	r2, [r3, #19]
 800d0ac:	751a      	strb	r2, [r3, #20]
 800d0ae:	2208      	movs	r2, #8
 800d0b0:	f100 0124 	add.w	r1, r0, #36	; 0x24
 800d0b4:	f803 2f15 	strb.w	r2, [r3, #21]!
 800d0b8:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800d0bc:	4291      	cmp	r1, r2
 800d0be:	d133      	bne.n	800d128 <E131Bridge::FillDiscoveryPacket()+0xc0>
 800d0c0:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800d0c4:	69c3      	ldr	r3, [r0, #28]
 800d0c6:	3229      	adds	r2, #41	; 0x29
 800d0c8:	0052      	lsls	r2, r2, #1
 800d0ca:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800d0ce:	ba52      	rev16	r2, r2
 800d0d0:	84da      	strh	r2, [r3, #38]	; 0x26
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800d0d8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800d0dc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800d0e0:	2202      	movs	r2, #2
 800d0e2:	f803 2f2b 	strb.w	r2, [r3, #43]!
 800d0e6:	f100 0274 	add.w	r2, r0, #116	; 0x74
 800d0ea:	4291      	cmp	r1, r2
 800d0ec:	d121      	bne.n	800d132 <E131Bridge::FillDiscoveryPacket()+0xca>
 800d0ee:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800d0f2:	69c2      	ldr	r2, [r0, #28]
 800d0f4:	3304      	adds	r3, #4
 800d0f6:	005b      	lsls	r3, r3, #1
 800d0f8:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800d0fc:	ba5b      	rev16	r3, r3
 800d0fe:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
 800d102:	2300      	movs	r3, #0
 800d104:	f882 3072 	strb.w	r3, [r2, #114]	; 0x72
 800d108:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
 800d10c:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
 800d110:	2301      	movs	r3, #1
 800d112:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
 800d116:	bd10      	pop	{r4, pc}
 800d118:	f803 2b01 	strb.w	r2, [r3], #1
 800d11c:	e7af      	b.n	800d07e <E131Bridge::FillDiscoveryPacket()+0x16>
 800d11e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d122:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d126:	e7b3      	b.n	800d090 <E131Bridge::FillDiscoveryPacket()+0x28>
 800d128:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d12c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d130:	e7c4      	b.n	800d0bc <E131Bridge::FillDiscoveryPacket()+0x54>
 800d132:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d136:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d13a:	e7d6      	b.n	800d0ea <E131Bridge::FillDiscoveryPacket()+0x82>
 800d13c:	08016b65 	stmdaeq	r1, {r0, r2, r5, r6, r8, r9, fp, sp, lr}

0800d140 <E131Bridge::SendDiscoveryPacket()>:
 800d140:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d142:	f242 710f 	movw	r1, #9999	; 0x270f
 800d146:	68c2      	ldr	r2, [r0, #12]
 800d148:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
 800d14c:	4604      	mov	r4, r0
 800d14e:	1ad3      	subs	r3, r2, r3
 800d150:	428b      	cmp	r3, r1
 800d152:	d924      	bls.n	800d19e <E131Bridge::SendDiscoveryPacket()+0x5e>
 800d154:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800d158:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
 800d15c:	b1ab      	cbz	r3, 800d18a <E131Bridge::SendDiscoveryPacket()+0x4a>
 800d15e:	2500      	movs	r5, #0
 800d160:	462e      	mov	r6, r5
 800d162:	2300      	movs	r3, #0
 800d164:	4629      	mov	r1, r5
 800d166:	4620      	mov	r0, r4
 800d168:	f10d 020e 	add.w	r2, sp, #14
 800d16c:	f7ff fc0a 	bl	800c984 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800d170:	b140      	cbz	r0, 800d184 <E131Bridge::SendDiscoveryPacket()+0x44>
 800d172:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800d176:	69e2      	ldr	r2, [r4, #28]
 800d178:	f106 013c 	add.w	r1, r6, #60	; 0x3c
 800d17c:	ba5b      	rev16	r3, r3
 800d17e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800d182:	3601      	adds	r6, #1
 800d184:	3501      	adds	r5, #1
 800d186:	2d04      	cmp	r5, #4
 800d188:	d1eb      	bne.n	800d162 <E131Bridge::SendDiscoveryPacket()+0x22>
 800d18a:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800d18e:	f8b4 2504 	ldrh.w	r2, [r4, #1284]	; 0x504
 800d192:	9300      	str	r3, [sp, #0]
 800d194:	69e1      	ldr	r1, [r4, #28]
 800d196:	6a23      	ldr	r3, [r4, #32]
 800d198:	7820      	ldrb	r0, [r4, #0]
 800d19a:	f003 fdad 	bl	8010cf8 <udp_send>
 800d19e:	b004      	add	sp, #16
 800d1a0:	bd70      	pop	{r4, r5, r6, pc}

0800d1a2 <memcpy.isra.0>:
 800d1a2:	3801      	subs	r0, #1
 800d1a4:	440a      	add	r2, r1
 800d1a6:	4291      	cmp	r1, r2
 800d1a8:	d100      	bne.n	800d1ac <memcpy.isra.0+0xa>
 800d1aa:	4770      	bx	lr
 800d1ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1b0:	f800 3f01 	strb.w	r3, [r0, #1]!
 800d1b4:	e7f7      	b.n	800d1a6 <memcpy.isra.0+0x4>
	...

0800d1b8 <E131Bridge::FillDataPacket()>:
 800d1b8:	b570      	push	{r4, r5, r6, lr}
 800d1ba:	2400      	movs	r4, #0
 800d1bc:	2610      	movs	r6, #16
 800d1be:	4605      	mov	r5, r0
 800d1c0:	6980      	ldr	r0, [r0, #24]
 800d1c2:	220c      	movs	r2, #12
 800d1c4:	7046      	strb	r6, [r0, #1]
 800d1c6:	7004      	strb	r4, [r0, #0]
 800d1c8:	7084      	strb	r4, [r0, #2]
 800d1ca:	70c4      	strb	r4, [r0, #3]
 800d1cc:	491c      	ldr	r1, [pc, #112]	; (800d240 <E131Bridge::FillDataPacket()+0x88>)
 800d1ce:	3004      	adds	r0, #4
 800d1d0:	f7ff ffe7 	bl	800d1a2 <memcpy.isra.0>
 800d1d4:	2304      	movs	r3, #4
 800d1d6:	4632      	mov	r2, r6
 800d1d8:	2602      	movs	r6, #2
 800d1da:	69a8      	ldr	r0, [r5, #24]
 800d1dc:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800d1e0:	7543      	strb	r3, [r0, #21]
 800d1e2:	7484      	strb	r4, [r0, #18]
 800d1e4:	74c4      	strb	r4, [r0, #19]
 800d1e6:	7504      	strb	r4, [r0, #20]
 800d1e8:	3016      	adds	r0, #22
 800d1ea:	f7ff ffda 	bl	800d1a2 <memcpy.isra.0>
 800d1ee:	69a8      	ldr	r0, [r5, #24]
 800d1f0:	2240      	movs	r2, #64	; 0x40
 800d1f2:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
 800d1f6:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
 800d1fa:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
 800d1fe:	f880 602b 	strb.w	r6, [r0, #43]	; 0x2b
 800d202:	f105 0134 	add.w	r1, r5, #52	; 0x34
 800d206:	302c      	adds	r0, #44	; 0x2c
 800d208:	f7ff ffcb 	bl	800d1a2 <memcpy.isra.0>
 800d20c:	22a1      	movs	r2, #161	; 0xa1
 800d20e:	69ab      	ldr	r3, [r5, #24]
 800d210:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
 800d214:	f883 406d 	strb.w	r4, [r3, #109]	; 0x6d
 800d218:	f883 406e 	strb.w	r4, [r3, #110]	; 0x6e
 800d21c:	69ab      	ldr	r3, [r5, #24]
 800d21e:	f883 6075 	strb.w	r6, [r3, #117]	; 0x75
 800d222:	69ab      	ldr	r3, [r5, #24]
 800d224:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800d228:	2201      	movs	r2, #1
 800d22a:	69ab      	ldr	r3, [r5, #24]
 800d22c:	f883 4077 	strb.w	r4, [r3, #119]	; 0x77
 800d230:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
 800d234:	f883 4079 	strb.w	r4, [r3, #121]	; 0x79
 800d238:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 800d23c:	bd70      	pop	{r4, r5, r6, pc}
 800d23e:	bf00      	nop
 800d240:	08016b65 	stmdaeq	r1, {r0, r2, r5, r6, r8, r9, fp, sp, lr}

0800d244 <E131Bridge::HandleDmxIn()>:
 800d244:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800d248:	4604      	mov	r4, r0
 800d24a:	4605      	mov	r5, r0
 800d24c:	2600      	movs	r6, #0
 800d24e:	4f3b      	ldr	r7, [pc, #236]	; (800d33c <E131Bridge::HandleDmxIn()+0xf8>)
 800d250:	f895 3626 	ldrb.w	r3, [r5, #1574]	; 0x626
 800d254:	2b00      	cmp	r3, #0
 800d256:	d058      	beq.n	800d30a <E131Bridge::HandleDmxIn()+0xc6>
 800d258:	6960      	ldr	r0, [r4, #20]
 800d25a:	4631      	mov	r1, r6
 800d25c:	6803      	ldr	r3, [r0, #0]
 800d25e:	aa02      	add	r2, sp, #8
 800d260:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800d264:	ab03      	add	r3, sp, #12
 800d266:	47c0      	blx	r8
 800d268:	4601      	mov	r1, r0
 800d26a:	2800      	cmp	r0, #0
 800d26c:	d055      	beq.n	800d31a <E131Bridge::HandleDmxIn()+0xd6>
 800d26e:	9a02      	ldr	r2, [sp, #8]
 800d270:	69a0      	ldr	r0, [r4, #24]
 800d272:	b293      	uxth	r3, r2
 800d274:	f103 0c6d 	add.w	ip, r3, #109	; 0x6d
 800d278:	f44c 4ce0 	orr.w	ip, ip, #28672	; 0x7000
 800d27c:	fa9c fc9c 	rev16.w	ip, ip
 800d280:	f8a0 c010 	strh.w	ip, [r0, #16]
 800d284:	f103 0c57 	add.w	ip, r3, #87	; 0x57
 800d288:	f44c 4ce0 	orr.w	ip, ip, #28672	; 0x7000
 800d28c:	fa9c fc9c 	rev16.w	ip, ip
 800d290:	f8a0 c026 	strh.w	ip, [r0, #38]	; 0x26
 800d294:	f895 c62d 	ldrb.w	ip, [r5, #1581]	; 0x62d
 800d298:	330a      	adds	r3, #10
 800d29a:	f880 c06c 	strb.w	ip, [r0, #108]	; 0x6c
 800d29e:	f895 c62c 	ldrb.w	ip, [r5, #1580]	; 0x62c
 800d2a2:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800d2a6:	f10c 0001 	add.w	r0, ip, #1
 800d2aa:	f885 062c 	strb.w	r0, [r5, #1580]	; 0x62c
 800d2ae:	69a0      	ldr	r0, [r4, #24]
 800d2b0:	ba5b      	rev16	r3, r3
 800d2b2:	f880 c06f 	strb.w	ip, [r0, #111]	; 0x6f
 800d2b6:	f8b5 c624 	ldrh.w	ip, [r5, #1572]	; 0x624
 800d2ba:	69a0      	ldr	r0, [r4, #24]
 800d2bc:	fa9c fc9c 	rev16.w	ip, ip
 800d2c0:	f8a0 c071 	strh.w	ip, [r0, #113]	; 0x71
 800d2c4:	f8a0 3073 	strh.w	r3, [r0, #115]	; 0x73
 800d2c8:	307d      	adds	r0, #125	; 0x7d
 800d2ca:	f7ff ff6a 	bl	800d1a2 <memcpy.isra.0>
 800d2ce:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800d2d2:	69a1      	ldr	r1, [r4, #24]
 800d2d4:	ba53      	rev16	r3, r2
 800d2d6:	f8a1 307b 	strh.w	r3, [r1, #123]	; 0x7b
 800d2da:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800d2de:	327d      	adds	r2, #125	; 0x7d
 800d2e0:	9300      	str	r3, [sp, #0]
 800d2e2:	f8d5 3628 	ldr.w	r3, [r5, #1576]	; 0x628
 800d2e6:	b292      	uxth	r2, r2
 800d2e8:	7820      	ldrb	r0, [r4, #0]
 800d2ea:	f003 fd05 	bl	8010cf8 <udp_send>
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	683a      	ldr	r2, [r7, #0]
 800d2f2:	40b3      	lsls	r3, r6
 800d2f4:	ea33 0102 	bics.w	r1, r3, r2
 800d2f8:	d007      	beq.n	800d30a <E131Bridge::HandleDmxIn()+0xc6>
 800d2fa:	4313      	orrs	r3, r2
 800d2fc:	603b      	str	r3, [r7, #0]
 800d2fe:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800d302:	f043 0301 	orr.w	r3, r3, #1
 800d306:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800d30a:	3601      	adds	r6, #1
 800d30c:	2e04      	cmp	r6, #4
 800d30e:	f105 050c 	add.w	r5, r5, #12
 800d312:	d19d      	bne.n	800d250 <E131Bridge::HandleDmxIn()+0xc>
 800d314:	b004      	add	sp, #16
 800d316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d31a:	9b03      	ldr	r3, [sp, #12]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d1f4      	bne.n	800d30a <E131Bridge::HandleDmxIn()+0xc6>
 800d320:	2201      	movs	r2, #1
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	40b2      	lsls	r2, r6
 800d326:	ea23 0302 	bic.w	r3, r3, r2
 800d32a:	603b      	str	r3, [r7, #0]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d1ec      	bne.n	800d30a <E131Bridge::HandleDmxIn()+0xc6>
 800d330:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800d334:	f023 0301 	bic.w	r3, r3, #1
 800d338:	e7e5      	b.n	800d306 <E131Bridge::HandleDmxIn()+0xc2>
 800d33a:	bf00      	nop
 800d33c:	20001944 	andcs	r1, r0, r4, asr #18

0800d340 <E131Bridge::HandleSynchronization()>:
 800d340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d344:	f8b0 30a9 	ldrh.w	r3, [r0, #169]	; 0xa9
 800d348:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800d34c:	ba5b      	rev16	r3, r3
 800d34e:	b29b      	uxth	r3, r3
 800d350:	429a      	cmp	r2, r3
 800d352:	4604      	mov	r4, r0
 800d354:	d00a      	beq.n	800d36c <E131Bridge::HandleSynchronization()+0x2c>
 800d356:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d006      	beq.n	800d36c <E131Bridge::HandleSynchronization()+0x2c>
 800d35e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d362:	4b23      	ldr	r3, [pc, #140]	; (800d3f0 <E131Bridge::HandleSynchronization()+0xb0>)
 800d364:	2102      	movs	r1, #2
 800d366:	6818      	ldr	r0, [r3, #0]
 800d368:	f006 bc44 	b.w	8013bf4 <LedBlink::SetMode(ledblink::Mode)>
 800d36c:	2500      	movs	r5, #0
 800d36e:	4627      	mov	r7, r4
 800d370:	46a9      	mov	r9, r5
 800d372:	68e3      	ldr	r3, [r4, #12]
 800d374:	4e1f      	ldr	r6, [pc, #124]	; (800d3f4 <E131Bridge::HandleSynchronization()+0xb4>)
 800d376:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800d3f8 <E131Bridge::HandleSynchronization()+0xb8>
 800d37a:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
 800d37e:	f897 3516 	ldrb.w	r3, [r7, #1302]	; 0x516
 800d382:	b323      	cbz	r3, 800d3ce <E131Bridge::HandleSynchronization()+0x8e>
 800d384:	f8d8 3000 	ldr.w	r3, [r8]
 800d388:	6860      	ldr	r0, [r4, #4]
 800d38a:	07da      	lsls	r2, r3, #31
 800d38c:	bf5c      	itt	pl
 800d38e:	2301      	movpl	r3, #1
 800d390:	f8c8 3000 	strpl.w	r3, [r8]
 800d394:	6803      	ldr	r3, [r0, #0]
 800d396:	4629      	mov	r1, r5
 800d398:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800d39c:	f506 6280 	add.w	r2, r6, #1024	; 0x400
 800d3a0:	f8d6 3600 	ldr.w	r3, [r6, #1536]	; 0x600
 800d3a4:	47d0      	blx	sl
 800d3a6:	f897 3556 	ldrb.w	r3, [r7, #1366]	; 0x556
 800d3aa:	b93b      	cbnz	r3, 800d3bc <E131Bridge::HandleSynchronization()+0x7c>
 800d3ac:	6860      	ldr	r0, [r4, #4]
 800d3ae:	4629      	mov	r1, r5
 800d3b0:	6803      	ldr	r3, [r0, #0]
 800d3b2:	689b      	ldr	r3, [r3, #8]
 800d3b4:	4798      	blx	r3
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
 800d3bc:	f8d8 3000 	ldr.w	r3, [r8]
 800d3c0:	f8c6 9600 	str.w	r9, [r6, #1536]	; 0x600
 800d3c4:	07db      	lsls	r3, r3, #31
 800d3c6:	bf5c      	itt	pl
 800d3c8:	2301      	movpl	r3, #1
 800d3ca:	f8c8 3000 	strpl.w	r3, [r8]
 800d3ce:	3501      	adds	r5, #1
 800d3d0:	2d04      	cmp	r5, #4
 800d3d2:	f107 0744 	add.w	r7, r7, #68	; 0x44
 800d3d6:	f206 6604 	addw	r6, r6, #1540	; 0x604
 800d3da:	d1d0      	bne.n	800d37e <E131Bridge::HandleSynchronization()+0x3e>
 800d3dc:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800d3de:	b120      	cbz	r0, 800d3ea <E131Bridge::HandleSynchronization()+0xaa>
 800d3e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3e4:	6803      	ldr	r3, [r0, #0]
 800d3e6:	689b      	ldr	r3, [r3, #8]
 800d3e8:	4718      	bx	r3
 800d3ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3ee:	bf00      	nop
 800d3f0:	20009dbc 			; <UNDEFINED> instruction: 0x20009dbc
 800d3f4:	2000011c 	andcs	r0, r0, ip, lsl r1
 800d3f8:	20000118 	andcs	r0, r0, r8, lsl r1

0800d3fc <E131Bridge::Print()>:
 800d3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d400:	2500      	movs	r5, #0
 800d402:	4604      	mov	r4, r0
 800d404:	b08c      	sub	sp, #48	; 0x30
 800d406:	a902      	add	r1, sp, #8
 800d408:	3024      	adds	r0, #36	; 0x24
 800d40a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800d40e:	f000 fbe3 	bl	800dbd8 <uuid_unparse>
 800d412:	482c      	ldr	r0, [pc, #176]	; (800d4c4 <E131Bridge::Print()+0xc8>)
 800d414:	f7fb fe0a 	bl	800902c <printf>
 800d418:	4b2b      	ldr	r3, [pc, #172]	; (800d4c8 <E131Bridge::Print()+0xcc>)
 800d41a:	482c      	ldr	r0, [pc, #176]	; (800d4cc <E131Bridge::Print()+0xd0>)
 800d41c:	7819      	ldrb	r1, [r3, #0]
 800d41e:	785a      	ldrb	r2, [r3, #1]
 800d420:	f7fb fe04 	bl	800902c <printf>
 800d424:	482a      	ldr	r0, [pc, #168]	; (800d4d0 <E131Bridge::Print()+0xd4>)
 800d426:	a902      	add	r1, sp, #8
 800d428:	f7fb fe00 	bl	800902c <printf>
 800d42c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800d430:	b303      	cbz	r3, 800d474 <E131Bridge::Print()+0x78>
 800d432:	4828      	ldr	r0, [pc, #160]	; (800d4d4 <E131Bridge::Print()+0xd8>)
 800d434:	f7fb fdfa 	bl	800902c <printf>
 800d438:	4e27      	ldr	r6, [pc, #156]	; (800d4d8 <E131Bridge::Print()+0xdc>)
 800d43a:	4f28      	ldr	r7, [pc, #160]	; (800d4dc <E131Bridge::Print()+0xe0>)
 800d43c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800d4e0 <E131Bridge::Print()+0xe4>
 800d440:	2301      	movs	r3, #1
 800d442:	4629      	mov	r1, r5
 800d444:	4620      	mov	r0, r4
 800d446:	f10d 0206 	add.w	r2, sp, #6
 800d44a:	f7ff fa9b 	bl	800c984 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800d44e:	b170      	cbz	r0, 800d46e <E131Bridge::Print()+0x72>
 800d450:	2344      	movs	r3, #68	; 0x44
 800d452:	436b      	muls	r3, r5
 800d454:	f504 62aa 	add.w	r2, r4, #1360	; 0x550
 800d458:	58d3      	ldr	r3, [r2, r3]
 800d45a:	4629      	mov	r1, r5
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	bf0c      	ite	eq
 800d460:	4633      	moveq	r3, r6
 800d462:	463b      	movne	r3, r7
 800d464:	4640      	mov	r0, r8
 800d466:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d46a:	f7fb fddf 	bl	800902c <printf>
 800d46e:	3501      	adds	r5, #1
 800d470:	2d04      	cmp	r5, #4
 800d472:	d1e5      	bne.n	800d440 <E131Bridge::Print()+0x44>
 800d474:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800d478:	b1d3      	cbz	r3, 800d4b0 <E131Bridge::Print()+0xb4>
 800d47a:	481a      	ldr	r0, [pc, #104]	; (800d4e4 <E131Bridge::Print()+0xe8>)
 800d47c:	f7fb fdd6 	bl	800902c <printf>
 800d480:	2500      	movs	r5, #0
 800d482:	4e19      	ldr	r6, [pc, #100]	; (800d4e8 <E131Bridge::Print()+0xec>)
 800d484:	2300      	movs	r3, #0
 800d486:	4629      	mov	r1, r5
 800d488:	4620      	mov	r0, r4
 800d48a:	f10d 0206 	add.w	r2, sp, #6
 800d48e:	f7ff fa79 	bl	800c984 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800d492:	b150      	cbz	r0, 800d4aa <E131Bridge::Print()+0xae>
 800d494:	230c      	movs	r3, #12
 800d496:	436b      	muls	r3, r5
 800d498:	f204 622d 	addw	r2, r4, #1581	; 0x62d
 800d49c:	5cd3      	ldrb	r3, [r2, r3]
 800d49e:	4629      	mov	r1, r5
 800d4a0:	4630      	mov	r0, r6
 800d4a2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d4a6:	f7fb fdc1 	bl	800902c <printf>
 800d4aa:	3501      	adds	r5, #1
 800d4ac:	2d04      	cmp	r5, #4
 800d4ae:	d1e9      	bne.n	800d484 <E131Bridge::Print()+0x88>
 800d4b0:	f894 34fa 	ldrb.w	r3, [r4, #1274]	; 0x4fa
 800d4b4:	b113      	cbz	r3, 800d4bc <E131Bridge::Print()+0xc0>
 800d4b6:	480d      	ldr	r0, [pc, #52]	; (800d4ec <E131Bridge::Print()+0xf0>)
 800d4b8:	f7fb fdb8 	bl	800902c <printf>
 800d4bc:	b00c      	add	sp, #48	; 0x30
 800d4be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4c2:	bf00      	nop
 800d4c4:	08016a6c 	stmdaeq	r1, {r2, r3, r5, r6, r9, fp, sp, lr}
 800d4c8:	08016b71 	stmdaeq	r1, {r0, r4, r5, r6, r8, r9, fp, sp, lr}
 800d4cc:	08016a74 	stmdaeq	r1, {r2, r4, r5, r6, r9, fp, sp, lr}
 800d4d0:	08016a87 	stmdaeq	r1, {r0, r1, r2, r7, r9, fp, sp, lr}
 800d4d4:	08016852 	stmdaeq	r1, {r1, r4, r6, fp, sp, lr}
 800d4d8:	080167f6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r8, r9, sl, sp, lr}
 800d4dc:	080167fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr}
 800d4e0:	08016a97 	stmdaeq	r1, {r0, r1, r2, r4, r7, r9, fp, sp, lr}
 800d4e4:	08016876 	stmdaeq	r1, {r1, r2, r4, r5, r6, fp, sp, lr}
 800d4e8:	08016ab6 	stmdaeq	r1, {r1, r2, r4, r5, r7, r9, fp, sp, lr}
 800d4ec:	08016ad5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r9, fp, sp, lr}

0800d4f0 <memcmp>:
 800d4f0:	4402      	add	r2, r0
 800d4f2:	4290      	cmp	r0, r2
 800d4f4:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 800d4f8:	d106      	bne.n	800d508 <memcmp+0x18>
 800d4fa:	2000      	movs	r0, #0
 800d4fc:	4770      	bx	lr
 800d4fe:	3001      	adds	r0, #1
 800d500:	4290      	cmp	r0, r2
 800d502:	d102      	bne.n	800d50a <memcmp+0x1a>
 800d504:	2000      	movs	r0, #0
 800d506:	e006      	b.n	800d516 <memcmp+0x26>
 800d508:	b510      	push	{r4, lr}
 800d50a:	7803      	ldrb	r3, [r0, #0]
 800d50c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d510:	42a3      	cmp	r3, r4
 800d512:	d0f4      	beq.n	800d4fe <memcmp+0xe>
 800d514:	1b18      	subs	r0, r3, r4
 800d516:	bd10      	pop	{r4, pc}

0800d518 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800d518:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d51a:	88c6      	ldrh	r6, [r0, #6]
 800d51c:	8885      	ldrh	r5, [r0, #4]
 800d51e:	42ae      	cmp	r6, r5
 800d520:	d216      	bcs.n	800d550 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800d522:	4604      	mov	r4, r0
 800d524:	6800      	ldr	r0, [r0, #0]
 800d526:	1bad      	subs	r5, r5, r6
 800d528:	4430      	add	r0, r6
 800d52a:	7a26      	ldrb	r6, [r4, #8]
 800d52c:	b923      	cbnz	r3, 800d538 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800d52e:	b926      	cbnz	r6, 800d53a <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800d530:	9200      	str	r2, [sp, #0]
 800d532:	460b      	mov	r3, r1
 800d534:	4a09      	ldr	r2, [pc, #36]	; (800d55c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800d536:	e003      	b.n	800d540 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800d538:	b166      	cbz	r6, 800d554 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800d53a:	460b      	mov	r3, r1
 800d53c:	9200      	str	r2, [sp, #0]
 800d53e:	4a08      	ldr	r2, [pc, #32]	; (800d560 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800d540:	4629      	mov	r1, r5
 800d542:	f7fb fd9b 	bl	800907c <snprintf>
 800d546:	4285      	cmp	r5, r0
 800d548:	bfa2      	ittt	ge
 800d54a:	88e3      	ldrhge	r3, [r4, #6]
 800d54c:	181b      	addge	r3, r3, r0
 800d54e:	80e3      	strhge	r3, [r4, #6]
 800d550:	b002      	add	sp, #8
 800d552:	bd70      	pop	{r4, r5, r6, pc}
 800d554:	9200      	str	r2, [sp, #0]
 800d556:	460b      	mov	r3, r1
 800d558:	4a02      	ldr	r2, [pc, #8]	; (800d564 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800d55a:	e7f1      	b.n	800d540 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800d55c:	080165a8 	stmdaeq	r1, {r3, r5, r7, r8, sl, sp, lr}
 800d560:	0801659d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, sl, sp, lr}
 800d564:	080165a9 	stmdaeq	r1, {r0, r3, r5, r7, r8, sl, sp, lr}

0800d568 <E131Params::E131Params(E131ParamsStore*)>:
 800d568:	b510      	push	{r4, lr}
 800d56a:	2219      	movs	r2, #25
 800d56c:	4604      	mov	r4, r0
 800d56e:	f840 1b04 	str.w	r1, [r0], #4
 800d572:	2100      	movs	r1, #0
 800d574:	f006 fcf6 	bl	8013f64 <memset>
 800d578:	2201      	movs	r2, #1
 800d57a:	72e2      	strb	r2, [r4, #11]
 800d57c:	2202      	movs	r2, #2
 800d57e:	f04f 3364 	mov.w	r3, #1684300900	; 0x64646464
 800d582:	f8a4 200d 	strh.w	r2, [r4, #13]
 800d586:	2203      	movs	r2, #3
 800d588:	f8c4 301f 	str.w	r3, [r4, #31]
 800d58c:	2300      	movs	r3, #0
 800d58e:	2155      	movs	r1, #85	; 0x55
 800d590:	f8a4 200f 	strh.w	r2, [r4, #15]
 800d594:	2204      	movs	r2, #4
 800d596:	7323      	strb	r3, [r4, #12]
 800d598:	77a3      	strb	r3, [r4, #30]
 800d59a:	4b04      	ldr	r3, [pc, #16]	; (800d5ac <E131Params::E131Params(E131ParamsStore*)+0x44>)
 800d59c:	7761      	strb	r1, [r4, #29]
 800d59e:	6819      	ldr	r1, [r3, #0]
 800d5a0:	f8a4 2011 	strh.w	r2, [r4, #17]
 800d5a4:	b901      	cbnz	r1, 800d5a8 <E131Params::E131Params(E131ParamsStore*)+0x40>
 800d5a6:	601a      	str	r2, [r3, #0]
 800d5a8:	4620      	mov	r0, r4
 800d5aa:	bd10      	pop	{r4, pc}
 800d5ac:	20001948 	andcs	r1, r0, r8, asr #18

0800d5b0 <E131Params::Load(char const*, unsigned int)>:
 800d5b0:	6803      	ldr	r3, [r0, #0]
 800d5b2:	b1d3      	cbz	r3, 800d5ea <E131Params::Load(char const*, unsigned int)+0x3a>
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d5b8:	460d      	mov	r5, r1
 800d5ba:	4616      	mov	r6, r2
 800d5bc:	4604      	mov	r4, r0
 800d5be:	6043      	str	r3, [r0, #4]
 800d5c0:	4602      	mov	r2, r0
 800d5c2:	490a      	ldr	r1, [pc, #40]	; (800d5ec <E131Params::Load(char const*, unsigned int)+0x3c>)
 800d5c4:	4668      	mov	r0, sp
 800d5c6:	f005 fe4b 	bl	8013260 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800d5ca:	4632      	mov	r2, r6
 800d5cc:	4629      	mov	r1, r5
 800d5ce:	4668      	mov	r0, sp
 800d5d0:	f005 fe4a 	bl	8013268 <ReadConfigFile::Read(char const*, unsigned int)>
 800d5d4:	4621      	mov	r1, r4
 800d5d6:	f851 0b04 	ldr.w	r0, [r1], #4
 800d5da:	6803      	ldr	r3, [r0, #0]
 800d5dc:	689b      	ldr	r3, [r3, #8]
 800d5de:	4798      	blx	r3
 800d5e0:	4668      	mov	r0, sp
 800d5e2:	f005 fe40 	bl	8013266 <ReadConfigFile::~ReadConfigFile()>
 800d5e6:	b002      	add	sp, #8
 800d5e8:	bd70      	pop	{r4, r5, r6, pc}
 800d5ea:	4770      	bx	lr
 800d5ec:	0800d885 	stmdaeq	r0, {r0, r2, r7, fp, ip, lr, pc}

0800d5f0 <E131Params::callbackFunction(char const*)>:
 800d5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5f4:	460e      	mov	r6, r1
 800d5f6:	2708      	movs	r7, #8
 800d5f8:	b087      	sub	sp, #28
 800d5fa:	4604      	mov	r4, r0
 800d5fc:	4997      	ldr	r1, [pc, #604]	; (800d85c <E131Params::callbackFunction(char const*)+0x26c>)
 800d5fe:	4630      	mov	r0, r6
 800d600:	ab01      	add	r3, sp, #4
 800d602:	eb0d 0207 	add.w	r2, sp, r7
 800d606:	9701      	str	r7, [sp, #4]
 800d608:	f005 fe62 	bl	80132d0 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800d60c:	bb68      	cbnz	r0, 800d66a <E131Params::callbackFunction(char const*)+0x7a>
 800d60e:	2204      	movs	r2, #4
 800d610:	4993      	ldr	r1, [pc, #588]	; (800d860 <E131Params::callbackFunction(char const*)+0x270>)
 800d612:	eb0d 0007 	add.w	r0, sp, r7
 800d616:	f7ff ff6b 	bl	800d4f0 <memcmp>
 800d61a:	6865      	ldr	r5, [r4, #4]
 800d61c:	b1a0      	cbz	r0, 800d648 <E131Params::callbackFunction(char const*)+0x58>
 800d61e:	2203      	movs	r2, #3
 800d620:	4990      	ldr	r1, [pc, #576]	; (800d864 <E131Params::callbackFunction(char const*)+0x274>)
 800d622:	eb0d 0007 	add.w	r0, sp, r7
 800d626:	f7ff ff63 	bl	800d4f0 <memcmp>
 800d62a:	b1b0      	cbz	r0, 800d65a <E131Params::callbackFunction(char const*)+0x6a>
 800d62c:	2202      	movs	r2, #2
 800d62e:	498e      	ldr	r1, [pc, #568]	; (800d868 <E131Params::callbackFunction(char const*)+0x278>)
 800d630:	eb0d 0007 	add.w	r0, sp, r7
 800d634:	f7ff ff5c 	bl	800d4f0 <memcmp>
 800d638:	b198      	cbz	r0, 800d662 <E131Params::callbackFunction(char const*)+0x72>
 800d63a:	463a      	mov	r2, r7
 800d63c:	498b      	ldr	r1, [pc, #556]	; (800d86c <E131Params::callbackFunction(char const*)+0x27c>)
 800d63e:	eb0d 0007 	add.w	r0, sp, r7
 800d642:	f7ff ff55 	bl	800d4f0 <memcmp>
 800d646:	b170      	cbz	r0, 800d666 <E131Params::callbackFunction(char const*)+0x76>
 800d648:	2300      	movs	r3, #0
 800d64a:	f025 0501 	bic.w	r5, r5, #1
 800d64e:	6065      	str	r5, [r4, #4]
 800d650:	f8a4 3009 	strh.w	r3, [r4, #9]
 800d654:	b007      	add	sp, #28
 800d656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d65a:	2301      	movs	r3, #1
 800d65c:	f045 0501 	orr.w	r5, r5, #1
 800d660:	e7f5      	b.n	800d64e <E131Params::callbackFunction(char const*)+0x5e>
 800d662:	2302      	movs	r3, #2
 800d664:	e7fa      	b.n	800d65c <E131Params::callbackFunction(char const*)+0x6c>
 800d666:	2303      	movs	r3, #3
 800d668:	e7f8      	b.n	800d65c <E131Params::callbackFunction(char const*)+0x6c>
 800d66a:	2500      	movs	r5, #0
 800d66c:	f8df 9200 	ldr.w	r9, [pc, #512]	; 800d870 <E131Params::callbackFunction(char const*)+0x280>
 800d670:	f8df 8200 	ldr.w	r8, [pc, #512]	; 800d874 <E131Params::callbackFunction(char const*)+0x284>
 800d674:	f8df a200 	ldr.w	sl, [pc, #512]	; 800d878 <E131Params::callbackFunction(char const*)+0x288>
 800d678:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d87c <E131Params::callbackFunction(char const*)+0x28c>
 800d67c:	4649      	mov	r1, r9
 800d67e:	4630      	mov	r0, r6
 800d680:	f10d 0202 	add.w	r2, sp, #2
 800d684:	f005 fee1 	bl	801344a <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800d688:	b9d8      	cbnz	r0, 800d6c2 <E131Params::callbackFunction(char const*)+0xd2>
 800d68a:	f64f 16fe 	movw	r6, #63998	; 0xf9fe
 800d68e:	2310      	movs	r3, #16
 800d690:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 800d694:	6861      	ldr	r1, [r4, #4]
 800d696:	1e42      	subs	r2, r0, #1
 800d698:	b292      	uxth	r2, r2
 800d69a:	42b2      	cmp	r2, r6
 800d69c:	fa03 f305 	lsl.w	r3, r3, r5
 800d6a0:	ea4f 0245 	mov.w	r2, r5, lsl #1
 800d6a4:	d907      	bls.n	800d6b6 <E131Params::callbackFunction(char const*)+0xc6>
 800d6a6:	3501      	adds	r5, #1
 800d6a8:	4422      	add	r2, r4
 800d6aa:	ea21 0103 	bic.w	r1, r1, r3
 800d6ae:	f8a2 500b 	strh.w	r5, [r2, #11]
 800d6b2:	6061      	str	r1, [r4, #4]
 800d6b4:	e7ce      	b.n	800d654 <E131Params::callbackFunction(char const*)+0x64>
 800d6b6:	4422      	add	r2, r4
 800d6b8:	f8a2 000b 	strh.w	r0, [r2, #11]
 800d6bc:	430b      	orrs	r3, r1
 800d6be:	6063      	str	r3, [r4, #4]
 800d6c0:	e7c8      	b.n	800d654 <E131Params::callbackFunction(char const*)+0x64>
 800d6c2:	2712      	movs	r7, #18
 800d6c4:	2303      	movs	r3, #3
 800d6c6:	436f      	muls	r7, r5
 800d6c8:	9301      	str	r3, [sp, #4]
 800d6ca:	4630      	mov	r0, r6
 800d6cc:	ab01      	add	r3, sp, #4
 800d6ce:	aa02      	add	r2, sp, #8
 800d6d0:	eb0a 0107 	add.w	r1, sl, r7
 800d6d4:	f005 fdfc 	bl	80132d0 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800d6d8:	bb00      	cbnz	r0, 800d71c <E131Params::callbackFunction(char const*)+0x12c>
 800d6da:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d6de:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800d6e2:	40ab      	lsls	r3, r5
 800d6e4:	f041 0120 	orr.w	r1, r1, #32
 800d6e8:	296c      	cmp	r1, #108	; 0x6c
 800d6ea:	6862      	ldr	r2, [r4, #4]
 800d6ec:	4425      	add	r5, r4
 800d6ee:	d10f      	bne.n	800d710 <E131Params::callbackFunction(char const*)+0x120>
 800d6f0:	f89d 1009 	ldrb.w	r1, [sp, #9]
 800d6f4:	f041 0120 	orr.w	r1, r1, #32
 800d6f8:	2974      	cmp	r1, #116	; 0x74
 800d6fa:	d109      	bne.n	800d710 <E131Params::callbackFunction(char const*)+0x120>
 800d6fc:	f89d 100a 	ldrb.w	r1, [sp, #10]
 800d700:	f041 0120 	orr.w	r1, r1, #32
 800d704:	2970      	cmp	r1, #112	; 0x70
 800d706:	d103      	bne.n	800d710 <E131Params::callbackFunction(char const*)+0x120>
 800d708:	2101      	movs	r1, #1
 800d70a:	7529      	strb	r1, [r5, #20]
 800d70c:	4313      	orrs	r3, r2
 800d70e:	e7d6      	b.n	800d6be <E131Params::callbackFunction(char const*)+0xce>
 800d710:	2100      	movs	r1, #0
 800d712:	ea22 0203 	bic.w	r2, r2, r3
 800d716:	7529      	strb	r1, [r5, #20]
 800d718:	6062      	str	r2, [r4, #4]
 800d71a:	e79b      	b.n	800d654 <E131Params::callbackFunction(char const*)+0x64>
 800d71c:	2307      	movs	r3, #7
 800d71e:	4630      	mov	r0, r6
 800d720:	9301      	str	r3, [sp, #4]
 800d722:	aa02      	add	r2, sp, #8
 800d724:	ab01      	add	r3, sp, #4
 800d726:	eb0b 0107 	add.w	r1, fp, r7
 800d72a:	f005 fdd1 	bl	80132d0 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800d72e:	2800      	cmp	r0, #0
 800d730:	d15e      	bne.n	800d7f0 <E131Params::callbackFunction(char const*)+0x200>
 800d732:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d736:	f043 0320 	orr.w	r3, r3, #32
 800d73a:	2b69      	cmp	r3, #105	; 0x69
 800d73c:	d123      	bne.n	800d786 <E131Params::callbackFunction(char const*)+0x196>
 800d73e:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800d742:	f043 0320 	orr.w	r3, r3, #32
 800d746:	2b6e      	cmp	r3, #110	; 0x6e
 800d748:	d146      	bne.n	800d7d8 <E131Params::callbackFunction(char const*)+0x1e8>
 800d74a:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800d74e:	f043 0320 	orr.w	r3, r3, #32
 800d752:	2b70      	cmp	r3, #112	; 0x70
 800d754:	d140      	bne.n	800d7d8 <E131Params::callbackFunction(char const*)+0x1e8>
 800d756:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800d75a:	f043 0320 	orr.w	r3, r3, #32
 800d75e:	2b75      	cmp	r3, #117	; 0x75
 800d760:	d13a      	bne.n	800d7d8 <E131Params::callbackFunction(char const*)+0x1e8>
 800d762:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800d766:	f043 0320 	orr.w	r3, r3, #32
 800d76a:	3b74      	subs	r3, #116	; 0x74
 800d76c:	bf18      	it	ne
 800d76e:	2301      	movne	r3, #1
 800d770:	2103      	movs	r1, #3
 800d772:	f8b4 201d 	ldrh.w	r2, [r4, #29]
 800d776:	006d      	lsls	r5, r5, #1
 800d778:	40a9      	lsls	r1, r5
 800d77a:	ea22 0201 	bic.w	r2, r2, r1
 800d77e:	bb6b      	cbnz	r3, 800d7dc <E131Params::callbackFunction(char const*)+0x1ec>
 800d780:	f8a4 201d 	strh.w	r2, [r4, #29]
 800d784:	e766      	b.n	800d654 <E131Params::callbackFunction(char const*)+0x64>
 800d786:	2b64      	cmp	r3, #100	; 0x64
 800d788:	d126      	bne.n	800d7d8 <E131Params::callbackFunction(char const*)+0x1e8>
 800d78a:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800d78e:	f043 0320 	orr.w	r3, r3, #32
 800d792:	2b69      	cmp	r3, #105	; 0x69
 800d794:	d120      	bne.n	800d7d8 <E131Params::callbackFunction(char const*)+0x1e8>
 800d796:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800d79a:	f043 0320 	orr.w	r3, r3, #32
 800d79e:	2b73      	cmp	r3, #115	; 0x73
 800d7a0:	d11a      	bne.n	800d7d8 <E131Params::callbackFunction(char const*)+0x1e8>
 800d7a2:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800d7a6:	f043 0320 	orr.w	r3, r3, #32
 800d7aa:	2b61      	cmp	r3, #97	; 0x61
 800d7ac:	d114      	bne.n	800d7d8 <E131Params::callbackFunction(char const*)+0x1e8>
 800d7ae:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800d7b2:	f043 0320 	orr.w	r3, r3, #32
 800d7b6:	2b62      	cmp	r3, #98	; 0x62
 800d7b8:	d10e      	bne.n	800d7d8 <E131Params::callbackFunction(char const*)+0x1e8>
 800d7ba:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800d7be:	f043 0320 	orr.w	r3, r3, #32
 800d7c2:	2b6c      	cmp	r3, #108	; 0x6c
 800d7c4:	d108      	bne.n	800d7d8 <E131Params::callbackFunction(char const*)+0x1e8>
 800d7c6:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800d7ca:	f043 0320 	orr.w	r3, r3, #32
 800d7ce:	2b65      	cmp	r3, #101	; 0x65
 800d7d0:	bf14      	ite	ne
 800d7d2:	2301      	movne	r3, #1
 800d7d4:	2302      	moveq	r3, #2
 800d7d6:	e7cb      	b.n	800d770 <E131Params::callbackFunction(char const*)+0x180>
 800d7d8:	2301      	movs	r3, #1
 800d7da:	e7c9      	b.n	800d770 <E131Params::callbackFunction(char const*)+0x180>
 800d7dc:	2b02      	cmp	r3, #2
 800d7de:	bf15      	itete	ne
 800d7e0:	2301      	movne	r3, #1
 800d7e2:	40ab      	lsleq	r3, r5
 800d7e4:	fa03 f505 	lslne.w	r5, r3, r5
 800d7e8:	431a      	orreq	r2, r3
 800d7ea:	bf18      	it	ne
 800d7ec:	432a      	orrne	r2, r5
 800d7ee:	e7c7      	b.n	800d780 <E131Params::callbackFunction(char const*)+0x190>
 800d7f0:	4641      	mov	r1, r8
 800d7f2:	4630      	mov	r0, r6
 800d7f4:	f10d 0201 	add.w	r2, sp, #1
 800d7f8:	f005 fe6e 	bl	80134d8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d7fc:	b998      	cbnz	r0, 800d826 <E131Params::callbackFunction(char const*)+0x236>
 800d7fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800d802:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800d806:	40aa      	lsls	r2, r5
 800d808:	1e48      	subs	r0, r1, #1
 800d80a:	b2c0      	uxtb	r0, r0
 800d80c:	28c7      	cmp	r0, #199	; 0xc7
 800d80e:	6863      	ldr	r3, [r4, #4]
 800d810:	4425      	add	r5, r4
 800d812:	d803      	bhi.n	800d81c <E131Params::callbackFunction(char const*)+0x22c>
 800d814:	2964      	cmp	r1, #100	; 0x64
 800d816:	d001      	beq.n	800d81c <E131Params::callbackFunction(char const*)+0x22c>
 800d818:	77e9      	strb	r1, [r5, #31]
 800d81a:	e777      	b.n	800d70c <E131Params::callbackFunction(char const*)+0x11c>
 800d81c:	2164      	movs	r1, #100	; 0x64
 800d81e:	ea23 0302 	bic.w	r3, r3, r2
 800d822:	77e9      	strb	r1, [r5, #31]
 800d824:	e74b      	b.n	800d6be <E131Params::callbackFunction(char const*)+0xce>
 800d826:	3501      	adds	r5, #1
 800d828:	2d04      	cmp	r5, #4
 800d82a:	f109 0910 	add.w	r9, r9, #16
 800d82e:	f108 0812 	add.w	r8, r8, #18
 800d832:	f47f af23 	bne.w	800d67c <E131Params::callbackFunction(char const*)+0x8c>
 800d836:	4630      	mov	r0, r6
 800d838:	4911      	ldr	r1, [pc, #68]	; (800d880 <E131Params::callbackFunction(char const*)+0x290>)
 800d83a:	f10d 0201 	add.w	r2, sp, #1
 800d83e:	f005 fe4b 	bl	80134d8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d842:	2800      	cmp	r0, #0
 800d844:	f47f af06 	bne.w	800d654 <E131Params::callbackFunction(char const*)+0x64>
 800d848:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d84c:	6863      	ldr	r3, [r4, #4]
 800d84e:	b112      	cbz	r2, 800d856 <E131Params::callbackFunction(char const*)+0x266>
 800d850:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d854:	e733      	b.n	800d6be <E131Params::callbackFunction(char const*)+0xce>
 800d856:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d85a:	e730      	b.n	800d6be <E131Params::callbackFunction(char const*)+0xce>
 800d85c:	08017e7e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r9, sl, fp, ip, sp, lr}
 800d860:	0801689d 	stmdaeq	r1, {r0, r2, r3, r4, r7, fp, sp, lr}
 800d864:	080168a2 	stmdaeq	r1, {r1, r5, r7, fp, sp, lr}
 800d868:	080168a6 	stmdaeq	r1, {r1, r2, r5, r7, fp, sp, lr}
 800d86c:	080168a9 	stmdaeq	r1, {r0, r3, r5, r7, fp, sp, lr}
 800d870:	08017dba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r8, sl, fp, ip, sp, lr}
 800d874:	08016b14 	stmdaeq	r1, {r2, r4, r8, r9, fp, sp, lr}
 800d878:	08017e0e 	stmdaeq	r1, {r1, r2, r3, r9, sl, fp, ip, sp, lr}
 800d87c:	08017e90 	stmdaeq	r1, {r4, r7, r9, sl, fp, ip, sp, lr}
 800d880:	08017e68 	stmdaeq	r1, {r3, r5, r6, r9, sl, fp, ip, sp, lr}

0800d884 <E131Params::staticCallbackFunction(void*, char const*)>:
 800d884:	f7ff beb4 	b.w	800d5f0 <E131Params::callbackFunction(char const*)>

0800d888 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)>:
 800d888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d88c:	4604      	mov	r4, r0
 800d88e:	4615      	mov	r5, r2
 800d890:	461e      	mov	r6, r3
 800d892:	b087      	sub	sp, #28
 800d894:	3004      	adds	r0, #4
 800d896:	2900      	cmp	r1, #0
 800d898:	d05f      	beq.n	800d95a <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xd2>
 800d89a:	221f      	movs	r2, #31
 800d89c:	f006 fb4b 	bl	8013f36 <memmove>
 800d8a0:	4633      	mov	r3, r6
 800d8a2:	462a      	mov	r2, r5
 800d8a4:	4990      	ldr	r1, [pc, #576]	; (800dae8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x260>)
 800d8a6:	a803      	add	r0, sp, #12
 800d8a8:	f005 fc3a 	bl	8013120 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800d8ac:	2500      	movs	r5, #0
 800d8ae:	4f8f      	ldr	r7, [pc, #572]	; (800daec <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x264>)
 800d8b0:	4e8f      	ldr	r6, [pc, #572]	; (800daf0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x268>)
 800d8b2:	f8df 8240 	ldr.w	r8, [pc, #576]	; 800daf4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x26c>
 800d8b6:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800daf8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x270>
 800d8ba:	f8d8 2000 	ldr.w	r2, [r8]
 800d8be:	6863      	ldr	r3, [r4, #4]
 800d8c0:	42aa      	cmp	r2, r5
 800d8c2:	d851      	bhi.n	800d968 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xe0>
 800d8c4:	f8b4 1009 	ldrh.w	r1, [r4, #9]
 800d8c8:	4a8c      	ldr	r2, [pc, #560]	; (800dafc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x274>)
 800d8ca:	f003 0301 	and.w	r3, r3, #1
 800d8ce:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800d8d2:	a803      	add	r0, sp, #12
 800d8d4:	498a      	ldr	r1, [pc, #552]	; (800db00 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x278>)
 800d8d6:	f7ff fe1f 	bl	800d518 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800d8da:	498a      	ldr	r1, [pc, #552]	; (800db04 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x27c>)
 800d8dc:	a803      	add	r0, sp, #12
 800d8de:	f005 fca5 	bl	801322c <PropertiesBuilder::AddComment(char const*)>
 800d8e2:	2500      	movs	r5, #0
 800d8e4:	f44f 7b80 	mov.w	fp, #256	; 0x100
 800d8e8:	4e87      	ldr	r6, [pc, #540]	; (800db08 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x280>)
 800d8ea:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800db0c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x284>
 800d8ee:	f8df a220 	ldr.w	sl, [pc, #544]	; 800db10 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x288>
 800d8f2:	f104 0713 	add.w	r7, r4, #19
 800d8f6:	f8d8 3000 	ldr.w	r3, [r8]
 800d8fa:	42ab      	cmp	r3, r5
 800d8fc:	d87f      	bhi.n	800d9fe <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x176>
 800d8fe:	4985      	ldr	r1, [pc, #532]	; (800db14 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x28c>)
 800d900:	a803      	add	r0, sp, #12
 800d902:	f005 fc93 	bl	801322c <PropertiesBuilder::AddComment(char const*)>
 800d906:	2700      	movs	r7, #0
 800d908:	4e83      	ldr	r6, [pc, #524]	; (800db18 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x290>)
 800d90a:	f8df a210 	ldr.w	sl, [pc, #528]	; 800db1c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x294>
 800d90e:	f8df b210 	ldr.w	fp, [pc, #528]	; 800db20 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x298>
 800d912:	f104 091e 	add.w	r9, r4, #30
 800d916:	f8d8 3000 	ldr.w	r3, [r8]
 800d91a:	42bb      	cmp	r3, r7
 800d91c:	f200 8083 	bhi.w	800da26 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x19e>
 800d920:	4980      	ldr	r1, [pc, #512]	; (800db24 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x29c>)
 800d922:	a803      	add	r0, sp, #12
 800d924:	f005 fc82 	bl	801322c <PropertiesBuilder::AddComment(char const*)>
 800d928:	6863      	ldr	r3, [r4, #4]
 800d92a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800d92e:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 800d932:	42a2      	cmp	r2, r4
 800d934:	f080 80b8 	bcs.w	800daa8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x220>
 800d938:	9803      	ldr	r0, [sp, #12]
 800d93a:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 800d93e:	4410      	add	r0, r2
 800d940:	eba4 0402 	sub.w	r4, r4, r2
 800d944:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800d948:	f040 809d 	bne.w	800da86 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1fe>
 800d94c:	2a00      	cmp	r2, #0
 800d94e:	f040 809b 	bne.w	800da88 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x200>
 800d952:	9200      	str	r2, [sp, #0]
 800d954:	4b74      	ldr	r3, [pc, #464]	; (800db28 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 800d956:	4a72      	ldr	r2, [pc, #456]	; (800db20 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 800d958:	e09c      	b.n	800da94 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x20c>
 800d95a:	6823      	ldr	r3, [r4, #0]
 800d95c:	4601      	mov	r1, r0
 800d95e:	681a      	ldr	r2, [r3, #0]
 800d960:	4618      	mov	r0, r3
 800d962:	68d2      	ldr	r2, [r2, #12]
 800d964:	4790      	blx	r2
 800d966:	e79b      	b.n	800d8a0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x18>
 800d968:	f8bd c012 	ldrh.w	ip, [sp, #18]
 800d96c:	f8bd b010 	ldrh.w	fp, [sp, #16]
 800d970:	eb04 0245 	add.w	r2, r4, r5, lsl #1
 800d974:	45dc      	cmp	ip, fp
 800d976:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 800d97a:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 800d97e:	d221      	bcs.n	800d9c4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x13c>
 800d980:	2110      	movs	r1, #16
 800d982:	9803      	ldr	r0, [sp, #12]
 800d984:	40a9      	lsls	r1, r5
 800d986:	ea31 0303 	bics.w	r3, r1, r3
 800d98a:	4460      	add	r0, ip
 800d98c:	ebab 0b0c 	sub.w	fp, fp, ip
 800d990:	f89d c014 	ldrb.w	ip, [sp, #20]
 800d994:	d006      	beq.n	800d9a4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x11c>
 800d996:	f1bc 0f00 	cmp.w	ip, #0
 800d99a:	d106      	bne.n	800d9aa <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x122>
 800d99c:	9200      	str	r2, [sp, #0]
 800d99e:	4633      	mov	r3, r6
 800d9a0:	4a5f      	ldr	r2, [pc, #380]	; (800db20 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 800d9a2:	e005      	b.n	800d9b0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x128>
 800d9a4:	f1bc 0f00 	cmp.w	ip, #0
 800d9a8:	d023      	beq.n	800d9f2 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x16a>
 800d9aa:	9200      	str	r2, [sp, #0]
 800d9ac:	4633      	mov	r3, r6
 800d9ae:	464a      	mov	r2, r9
 800d9b0:	4659      	mov	r1, fp
 800d9b2:	f7fb fb63 	bl	800907c <snprintf>
 800d9b6:	4583      	cmp	fp, r0
 800d9b8:	bfa2      	ittt	ge
 800d9ba:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800d9be:	18c0      	addge	r0, r0, r3
 800d9c0:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800d9c4:	f8b4 301d 	ldrh.w	r3, [r4, #29]
 800d9c8:	fa23 f30a 	lsr.w	r3, r3, sl
 800d9cc:	f013 0303 	ands.w	r3, r3, #3
 800d9d0:	d013      	beq.n	800d9fa <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x172>
 800d9d2:	4a56      	ldr	r2, [pc, #344]	; (800db2c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a4>)
 800d9d4:	4956      	ldr	r1, [pc, #344]	; (800db30 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a8>)
 800d9d6:	2b02      	cmp	r3, #2
 800d9d8:	bf08      	it	eq
 800d9da:	460a      	moveq	r2, r1
 800d9dc:	3b01      	subs	r3, #1
 800d9de:	4639      	mov	r1, r7
 800d9e0:	bf18      	it	ne
 800d9e2:	2301      	movne	r3, #1
 800d9e4:	a803      	add	r0, sp, #12
 800d9e6:	f7ff fd97 	bl	800d518 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800d9ea:	3501      	adds	r5, #1
 800d9ec:	3712      	adds	r7, #18
 800d9ee:	3610      	adds	r6, #16
 800d9f0:	e763      	b.n	800d8ba <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x32>
 800d9f2:	9200      	str	r2, [sp, #0]
 800d9f4:	4633      	mov	r3, r6
 800d9f6:	4a49      	ldr	r2, [pc, #292]	; (800db1c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x294>)
 800d9f8:	e7da      	b.n	800d9b0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x128>
 800d9fa:	4a4e      	ldr	r2, [pc, #312]	; (800db34 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2ac>)
 800d9fc:	e7ee      	b.n	800d9dc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x154>
 800d9fe:	6861      	ldr	r1, [r4, #4]
 800da00:	fa0b f305 	lsl.w	r3, fp, r5
 800da04:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800da08:	438b      	bics	r3, r1
 800da0a:	bf0c      	ite	eq
 800da0c:	2301      	moveq	r3, #1
 800da0e:	2300      	movne	r3, #0
 800da10:	4631      	mov	r1, r6
 800da12:	2a00      	cmp	r2, #0
 800da14:	bf0c      	ite	eq
 800da16:	464a      	moveq	r2, r9
 800da18:	4652      	movne	r2, sl
 800da1a:	a803      	add	r0, sp, #12
 800da1c:	f7ff fd7c 	bl	800d518 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800da20:	3501      	adds	r5, #1
 800da22:	3612      	adds	r6, #18
 800da24:	e767      	b.n	800d8f6 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x6e>
 800da26:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800da2a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800da2e:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 800da32:	42a9      	cmp	r1, r5
 800da34:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800da38:	d21e      	bcs.n	800da78 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1f0>
 800da3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800da3e:	9803      	ldr	r0, [sp, #12]
 800da40:	40ba      	lsls	r2, r7
 800da42:	ea32 0c0c 	bics.w	ip, r2, ip
 800da46:	4408      	add	r0, r1
 800da48:	eba5 0501 	sub.w	r5, r5, r1
 800da4c:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800da50:	d004      	beq.n	800da5c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1d4>
 800da52:	b921      	cbnz	r1, 800da5e <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1d6>
 800da54:	9300      	str	r3, [sp, #0]
 800da56:	465a      	mov	r2, fp
 800da58:	4633      	mov	r3, r6
 800da5a:	e003      	b.n	800da64 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1dc>
 800da5c:	b179      	cbz	r1, 800da7e <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1f6>
 800da5e:	9300      	str	r3, [sp, #0]
 800da60:	4633      	mov	r3, r6
 800da62:	4a25      	ldr	r2, [pc, #148]	; (800daf8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x270>)
 800da64:	4629      	mov	r1, r5
 800da66:	f7fb fb09 	bl	800907c <snprintf>
 800da6a:	4285      	cmp	r5, r0
 800da6c:	bfa2      	ittt	ge
 800da6e:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800da72:	18c0      	addge	r0, r0, r3
 800da74:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800da78:	3701      	adds	r7, #1
 800da7a:	3612      	adds	r6, #18
 800da7c:	e74b      	b.n	800d916 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 800da7e:	9300      	str	r3, [sp, #0]
 800da80:	4652      	mov	r2, sl
 800da82:	4633      	mov	r3, r6
 800da84:	e7ee      	b.n	800da64 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1dc>
 800da86:	b34a      	cbz	r2, 800dadc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x254>
 800da88:	3b00      	subs	r3, #0
 800da8a:	bf18      	it	ne
 800da8c:	2301      	movne	r3, #1
 800da8e:	4a1a      	ldr	r2, [pc, #104]	; (800daf8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x270>)
 800da90:	9300      	str	r3, [sp, #0]
 800da92:	4b25      	ldr	r3, [pc, #148]	; (800db28 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 800da94:	4621      	mov	r1, r4
 800da96:	f7fb faf1 	bl	800907c <snprintf>
 800da9a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800da9e:	4284      	cmp	r4, r0
 800daa0:	bfa4      	itt	ge
 800daa2:	181b      	addge	r3, r3, r0
 800daa4:	f8ad 3012 	strhge.w	r3, [sp, #18]
 800daa8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800daac:	b17b      	cbz	r3, 800dace <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x246>
 800daae:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800dab2:	9b03      	ldr	r3, [sp, #12]
 800dab4:	4413      	add	r3, r2
 800dab6:	227d      	movs	r2, #125	; 0x7d
 800dab8:	f803 2c01 	strb.w	r2, [r3, #-1]
 800dabc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800dac0:	9903      	ldr	r1, [sp, #12]
 800dac2:	54ca      	strb	r2, [r1, r3]
 800dac4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800dac8:	3301      	adds	r3, #1
 800daca:	f8ad 3012 	strh.w	r3, [sp, #18]
 800dace:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800dad2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dad4:	601a      	str	r2, [r3, #0]
 800dad6:	b007      	add	sp, #28
 800dad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dadc:	2301      	movs	r3, #1
 800dade:	4a0f      	ldr	r2, [pc, #60]	; (800db1c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x294>)
 800dae0:	9300      	str	r3, [sp, #0]
 800dae2:	4b11      	ldr	r3, [pc, #68]	; (800db28 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 800dae4:	e7d6      	b.n	800da94 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x20c>
 800dae6:	bf00      	nop
 800dae8:	08016b5c 	stmdaeq	r1, {r2, r3, r4, r6, r8, r9, fp, sp, lr}
 800daec:	08017e90 	stmdaeq	r1, {r4, r7, r9, sl, fp, ip, sp, lr}
 800daf0:	08017dba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r8, sl, fp, ip, sp, lr}
 800daf4:	20001948 	andcs	r1, r0, r8, asr #18
 800daf8:	0801658c 	stmdaeq	r1, {r2, r3, r7, r8, sl, sp, lr}
 800dafc:	08016b04 	stmdaeq	r1, {r2, r8, r9, fp, sp, lr}
 800db00:	08017e7e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r9, sl, fp, ip, sp, lr}
 800db04:	08016aef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r9, fp, sp, lr}
 800db08:	08017e0e 	stmdaeq	r1, {r1, r2, r3, r9, sl, fp, ip, sp, lr}
 800db0c:	080168d0 	stmdaeq	r1, {r4, r6, r7, fp, sp, lr}
 800db10:	080168cc 	stmdaeq	r1, {r2, r3, r6, r7, fp, sp, lr}
 800db14:	08016afa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r9, fp, sp, lr}
 800db18:	08016b14 	stmdaeq	r1, {r2, r4, r8, r9, fp, sp, lr}
 800db1c:	08016596 	stmdaeq	r1, {r1, r2, r4, r7, r8, sl, sp, lr}
 800db20:	08016595 	stmdaeq	r1, {r0, r2, r4, r7, r8, sl, sp, lr}
 800db24:	08016355 	stmdaeq	r1, {r0, r2, r4, r6, r8, r9, sp, lr}
 800db28:	08017e68 	stmdaeq	r1, {r3, r5, r6, r9, sl, fp, ip, sp, lr}
 800db2c:	080168bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, fp, sp, lr}
 800db30:	080168c4 	stmdaeq	r1, {r2, r6, r7, fp, sp, lr}
 800db34:	080168b7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, fp, sp, lr}

0800db38 <E131Params::Save(char*, unsigned int, unsigned int&)>:
 800db38:	b513      	push	{r0, r1, r4, lr}
 800db3a:	6804      	ldr	r4, [r0, #0]
 800db3c:	b914      	cbnz	r4, 800db44 <E131Params::Save(char*, unsigned int, unsigned int&)+0xc>
 800db3e:	601c      	str	r4, [r3, #0]
 800db40:	b002      	add	sp, #8
 800db42:	bd10      	pop	{r4, pc}
 800db44:	9300      	str	r3, [sp, #0]
 800db46:	4613      	mov	r3, r2
 800db48:	460a      	mov	r2, r1
 800db4a:	2100      	movs	r1, #0
 800db4c:	f7ff fe9c 	bl	800d888 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)>
 800db50:	e7f6      	b.n	800db40 <E131Params::Save(char*, unsigned int, unsigned int&)+0x8>

0800db52 <uuid_unparse_x>:
 800db52:	4603      	mov	r3, r0
 800db54:	b530      	push	{r4, r5, lr}
 800db56:	4608      	mov	r0, r1
 800db58:	4611      	mov	r1, r2
 800db5a:	681a      	ldr	r2, [r3, #0]
 800db5c:	b08f      	sub	sp, #60	; 0x3c
 800db5e:	ba12      	rev	r2, r2
 800db60:	920a      	str	r2, [sp, #40]	; 0x28
 800db62:	889a      	ldrh	r2, [r3, #4]
 800db64:	891c      	ldrh	r4, [r3, #8]
 800db66:	ba52      	rev16	r2, r2
 800db68:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800db6c:	88da      	ldrh	r2, [r3, #6]
 800db6e:	ba64      	rev16	r4, r4
 800db70:	ba52      	rev16	r2, r2
 800db72:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 800db76:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
 800db7a:	f103 020a 	add.w	r2, r3, #10
 800db7e:	f10d 0431 	add.w	r4, sp, #49	; 0x31
 800db82:	3310      	adds	r3, #16
 800db84:	4293      	cmp	r3, r2
 800db86:	d122      	bne.n	800dbce <uuid_unparse_x+0x7c>
 800db88:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800db8c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800db90:	9208      	str	r2, [sp, #32]
 800db92:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 800db96:	0a1b      	lsrs	r3, r3, #8
 800db98:	9207      	str	r2, [sp, #28]
 800db9a:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800db9e:	9301      	str	r3, [sp, #4]
 800dba0:	9206      	str	r2, [sp, #24]
 800dba2:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800dba6:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800dbaa:	9205      	str	r2, [sp, #20]
 800dbac:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800dbb0:	9300      	str	r3, [sp, #0]
 800dbb2:	9204      	str	r2, [sp, #16]
 800dbb4:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800dbb8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800dbbc:	9203      	str	r2, [sp, #12]
 800dbbe:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800dbc2:	9202      	str	r2, [sp, #8]
 800dbc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dbc6:	f7fb fa41 	bl	800904c <sprintf>
 800dbca:	b00f      	add	sp, #60	; 0x3c
 800dbcc:	bd30      	pop	{r4, r5, pc}
 800dbce:	f812 5b01 	ldrb.w	r5, [r2], #1
 800dbd2:	f804 5f01 	strb.w	r5, [r4, #1]!
 800dbd6:	e7d5      	b.n	800db84 <uuid_unparse_x+0x32>

0800dbd8 <uuid_unparse>:
 800dbd8:	4a01      	ldr	r2, [pc, #4]	; (800dbe0 <uuid_unparse+0x8>)
 800dbda:	f7ff bfba 	b.w	800db52 <uuid_unparse_x>
 800dbde:	bf00      	nop
 800dbe0:	08016b73 	stmdaeq	r1, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}

0800dbe4 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)>:
 800dbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbe6:	4604      	mov	r4, r0
 800dbe8:	460e      	mov	r6, r1
 800dbea:	4611      	mov	r1, r2
 800dbec:	4617      	mov	r7, r2
 800dbee:	461d      	mov	r5, r3
 800dbf0:	f000 fdae 	bl	800e750 <PixelConfiguration::Validate(unsigned int&)>
 800dbf4:	7d62      	ldrb	r2, [r4, #21]
 800dbf6:	b94a      	cbnz	r2, 800dc0c <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x28>
 800dbf8:	6823      	ldr	r3, [r4, #0]
 800dbfa:	b11b      	cbz	r3, 800dc04 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x20>
 800dbfc:	3b0b      	subs	r3, #11
 800dbfe:	2b01      	cmp	r3, #1
 800dc00:	bf88      	it	hi
 800dc02:	6022      	strhi	r2, [r4, #0]
 800dc04:	4639      	mov	r1, r7
 800dc06:	4620      	mov	r0, r4
 800dc08:	f000 fda2 	bl	800e750 <PixelConfiguration::Validate(unsigned int&)>
 800dc0c:	6823      	ldr	r3, [r4, #0]
 800dc0e:	2b07      	cmp	r3, #7
 800dc10:	bf15      	itete	ne
 800dc12:	f44f 71aa 	movne.w	r1, #340	; 0x154
 800dc16:	f44f 7180 	moveq.w	r1, #256	; 0x100
 800dc1a:	23aa      	movne	r3, #170	; 0xaa
 800dc1c:	2380      	moveq	r3, #128	; 0x80
 800dc1e:	bf14      	ite	ne
 800dc20:	f44f 72ff 	movne.w	r2, #510	; 0x1fe
 800dc24:	f44f 72c0 	moveq.w	r2, #384	; 0x180
 800dc28:	e9c5 3100 	strd	r3, r1, [r5]
 800dc2c:	6a21      	ldr	r1, [r4, #32]
 800dc2e:	60aa      	str	r2, [r5, #8]
 800dc30:	6862      	ldr	r2, [r4, #4]
 800dc32:	b109      	cbz	r1, 800dc38 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x54>
 800dc34:	4291      	cmp	r1, r2
 800dc36:	d900      	bls.n	800dc3a <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x56>
 800dc38:	6222      	str	r2, [r4, #32]
 800dc3a:	6a21      	ldr	r1, [r4, #32]
 800dc3c:	69e0      	ldr	r0, [r4, #28]
 800dc3e:	fbb2 f2f1 	udiv	r2, r2, r1
 800dc42:	3301      	adds	r3, #1
 800dc44:	6262      	str	r2, [r4, #36]	; 0x24
 800dc46:	42b0      	cmp	r0, r6
 800dc48:	fbb2 f2f3 	udiv	r2, r2, r3
 800dc4c:	bf28      	it	cs
 800dc4e:	4630      	movcs	r0, r6
 800dc50:	1c53      	adds	r3, r2, #1
 800dc52:	2e01      	cmp	r6, #1
 800dc54:	62a3      	str	r3, [r4, #40]	; 0x28
 800dc56:	bf1c      	itt	ne
 800dc58:	eb03 0380 	addne.w	r3, r3, r0, lsl #2
 800dc5c:	1f5a      	subne	r2, r3, #5
 800dc5e:	61e0      	str	r0, [r4, #28]
 800dc60:	60ea      	str	r2, [r5, #12]
 800dc62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dc64 <PixelDmxConfiguration::Print()>:
 800dc64:	b510      	push	{r4, lr}
 800dc66:	4604      	mov	r4, r0
 800dc68:	f000 fe08 	bl	800e87c <PixelConfiguration::Print()>
 800dc6c:	4806      	ldr	r0, [pc, #24]	; (800dc88 <PixelDmxConfiguration::Print()+0x24>)
 800dc6e:	f7fb f9dd 	bl	800902c <printf>
 800dc72:	69e1      	ldr	r1, [r4, #28]
 800dc74:	4805      	ldr	r0, [pc, #20]	; (800dc8c <PixelDmxConfiguration::Print()+0x28>)
 800dc76:	f7fb f9d9 	bl	800902c <printf>
 800dc7a:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
 800dc7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc82:	4803      	ldr	r0, [pc, #12]	; (800dc90 <PixelDmxConfiguration::Print()+0x2c>)
 800dc84:	f7fb b9d2 	b.w	800902c <printf>
 800dc88:	08016ba4 	stmdaeq	r1, {r2, r5, r7, r8, r9, fp, sp, lr}
 800dc8c:	08016bbd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, r9, fp, sp, lr}
 800dc90:	08016bcc 	stmdaeq	r1, {r2, r3, r6, r7, r8, r9, fp, sp, lr}

0800dc94 <WS28xxDmx::GetDmxStartAddress()>:
 800dc94:	f8b0 0048 	ldrh.w	r0, [r0, #72]	; 0x48
 800dc98:	4770      	bx	lr

0800dc9a <WS28xxDmx::GetDmxFootprint()>:
 800dc9a:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
 800dc9e:	4770      	bx	lr

0800dca0 <WS28xxDmx::~WS28xxDmx()>:
 800dca0:	b538      	push	{r3, r4, r5, lr}
 800dca2:	4b06      	ldr	r3, [pc, #24]	; (800dcbc <WS28xxDmx::~WS28xxDmx()+0x1c>)
 800dca4:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 800dca6:	4604      	mov	r4, r0
 800dca8:	6003      	str	r3, [r0, #0]
 800dcaa:	b12d      	cbz	r5, 800dcb8 <WS28xxDmx::~WS28xxDmx()+0x18>
 800dcac:	4628      	mov	r0, r5
 800dcae:	f001 ff09 	bl	800fac4 <WS28xx::~WS28xx()>
 800dcb2:	4628      	mov	r0, r5
 800dcb4:	f006 f87c 	bl	8013db0 <operator delete(void*)>
 800dcb8:	4620      	mov	r0, r4
 800dcba:	bd38      	pop	{r3, r4, r5, pc}
 800dcbc:	08016bf8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, r9, fp, sp, lr}

0800dcc0 <WS28xxDmx::~WS28xxDmx()>:
 800dcc0:	b510      	push	{r4, lr}
 800dcc2:	4604      	mov	r4, r0
 800dcc4:	f7ff ffec 	bl	800dca0 <WS28xxDmx::~WS28xxDmx()>
 800dcc8:	4620      	mov	r0, r4
 800dcca:	f006 f871 	bl	8013db0 <operator delete(void*)>
 800dcce:	4620      	mov	r0, r4
 800dcd0:	bd10      	pop	{r4, pc}

0800dcd2 <WS28xxDmx::Blackout(bool)>:
 800dcd2:	b538      	push	{r3, r4, r5, lr}
 800dcd4:	4605      	mov	r5, r0
 800dcd6:	460c      	mov	r4, r1
 800dcd8:	f880 1059 	strb.w	r1, [r0, #89]	; 0x59
 800dcdc:	f007 f996 	bl	801500c <gd32_spi_dma_tx_is_active()>
 800dce0:	2800      	cmp	r0, #0
 800dce2:	d1fb      	bne.n	800dcdc <WS28xxDmx::Blackout(bool)+0xa>
 800dce4:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 800dce6:	b11c      	cbz	r4, 800dcf0 <WS28xxDmx::Blackout(bool)+0x1e>
 800dce8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcec:	f001 bf68 	b.w	800fbc0 <WS28xx::Blackout()>
 800dcf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcf4:	f001 bf48 	b.w	800fb88 <WS28xx::Update()>

0800dcf8 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)>:
 800dcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcfc:	b087      	sub	sp, #28
 800dcfe:	4607      	mov	r7, r0
 800dd00:	4692      	mov	sl, r2
 800dd02:	9104      	str	r1, [sp, #16]
 800dd04:	9303      	str	r3, [sp, #12]
 800dd06:	f007 f981 	bl	801500c <gd32_spi_dma_tx_is_active()>
 800dd0a:	2800      	cmp	r0, #0
 800dd0c:	d171      	bne.n	800ddf2 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xfa>
 800dd0e:	9b04      	ldr	r3, [sp, #16]
 800dd10:	9c03      	ldr	r4, [sp, #12]
 800dd12:	f003 0103 	and.w	r1, r3, #3
 800dd16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd18:	2902      	cmp	r1, #2
 800dd1a:	fbb4 f6f3 	udiv	r6, r4, r3
 800dd1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd20:	d026      	beq.n	800dd70 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x78>
 800dd22:	2903      	cmp	r1, #3
 800dd24:	d02b      	beq.n	800dd7e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x86>
 800dd26:	2901      	cmp	r1, #1
 800dd28:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 800dd2a:	d022      	beq.n	800dd72 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x7a>
 800dd2c:	4296      	cmp	r6, r2
 800dd2e:	bf28      	it	cs
 800dd30:	4616      	movcs	r6, r2
 800dd32:	4295      	cmp	r5, r2
 800dd34:	d925      	bls.n	800dd82 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x8a>
 800dd36:	4605      	mov	r5, r0
 800dd38:	8e3c      	ldrh	r4, [r7, #48]	; 0x30
 800dd3a:	3c01      	subs	r4, #1
 800dd3c:	f8d7 9024 	ldr.w	r9, [r7, #36]	; 0x24
 800dd40:	2b03      	cmp	r3, #3
 800dd42:	fb09 f805 	mul.w	r8, r9, r5
 800dd46:	4454      	add	r4, sl
 800dd48:	eb08 0b09 	add.w	fp, r8, r9
 800dd4c:	d035      	beq.n	800ddba <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xc2>
 800dd4e:	42ae      	cmp	r6, r5
 800dd50:	d935      	bls.n	800ddbe <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xc6>
 800dd52:	9a03      	ldr	r2, [sp, #12]
 800dd54:	eba4 030a 	sub.w	r3, r4, sl
 800dd58:	429a      	cmp	r2, r3
 800dd5a:	d930      	bls.n	800ddbe <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xc6>
 800dd5c:	4641      	mov	r1, r8
 800dd5e:	f894 f000 	pld	[r4]
 800dd62:	458b      	cmp	fp, r1
 800dd64:	d138      	bne.n	800ddd8 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xe0>
 800dd66:	3501      	adds	r5, #1
 800dd68:	44c8      	add	r8, r9
 800dd6a:	44cb      	add	fp, r9
 800dd6c:	3404      	adds	r4, #4
 800dd6e:	e7ee      	b.n	800dd4e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x56>
 800dd70:	6bbd      	ldr	r5, [r7, #56]	; 0x38
 800dd72:	442e      	add	r6, r5
 800dd74:	4296      	cmp	r6, r2
 800dd76:	bf28      	it	cs
 800dd78:	4616      	movcs	r6, r2
 800dd7a:	4604      	mov	r4, r0
 800dd7c:	e7de      	b.n	800dd3c <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x44>
 800dd7e:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 800dd80:	e7f7      	b.n	800dd72 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x7a>
 800dd82:	4605      	mov	r5, r0
 800dd84:	4604      	mov	r4, r0
 800dd86:	e7d9      	b.n	800dd3c <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x44>
 800dd88:	78a2      	ldrb	r2, [r4, #2]
 800dd8a:	7863      	ldrb	r3, [r4, #1]
 800dd8c:	9200      	str	r2, [sp, #0]
 800dd8e:	7822      	ldrb	r2, [r4, #0]
 800dd90:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dd92:	9105      	str	r1, [sp, #20]
 800dd94:	f001 f956 	bl	800f044 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 800dd98:	9905      	ldr	r1, [sp, #20]
 800dd9a:	3101      	adds	r1, #1
 800dd9c:	e007      	b.n	800ddae <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xb6>
 800dd9e:	9a03      	ldr	r2, [sp, #12]
 800dda0:	eba4 030a 	sub.w	r3, r4, sl
 800dda4:	429a      	cmp	r2, r3
 800dda6:	d90a      	bls.n	800ddbe <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xc6>
 800dda8:	4641      	mov	r1, r8
 800ddaa:	f894 f000 	pld	[r4]
 800ddae:	458b      	cmp	fp, r1
 800ddb0:	d1ea      	bne.n	800dd88 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x90>
 800ddb2:	3501      	adds	r5, #1
 800ddb4:	44c8      	add	r8, r9
 800ddb6:	44cb      	add	fp, r9
 800ddb8:	3403      	adds	r4, #3
 800ddba:	42ae      	cmp	r6, r5
 800ddbc:	d8ef      	bhi.n	800dd9e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xa6>
 800ddbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddc0:	9a04      	ldr	r2, [sp, #16]
 800ddc2:	4293      	cmp	r3, r2
 800ddc4:	d115      	bne.n	800ddf2 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xfa>
 800ddc6:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800ddca:	b993      	cbnz	r3, 800ddf2 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xfa>
 800ddcc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ddce:	b007      	add	sp, #28
 800ddd0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddd4:	f001 bed8 	b.w	800fb88 <WS28xx::Update()>
 800ddd8:	78e2      	ldrb	r2, [r4, #3]
 800ddda:	7863      	ldrb	r3, [r4, #1]
 800dddc:	9201      	str	r2, [sp, #4]
 800ddde:	78a2      	ldrb	r2, [r4, #2]
 800dde0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dde2:	9200      	str	r2, [sp, #0]
 800dde4:	7822      	ldrb	r2, [r4, #0]
 800dde6:	9105      	str	r1, [sp, #20]
 800dde8:	f001 fd5e 	bl	800f8a8 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 800ddec:	9905      	ldr	r1, [sp, #20]
 800ddee:	3101      	adds	r1, #1
 800ddf0:	e7b7      	b.n	800dd62 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x6a>
 800ddf2:	b007      	add	sp, #28
 800ddf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ddf8 <WS28xxDmx::FullOn()>:
 800ddf8:	b510      	push	{r4, lr}
 800ddfa:	4604      	mov	r4, r0
 800ddfc:	f007 f906 	bl	801500c <gd32_spi_dma_tx_is_active()>
 800de00:	2800      	cmp	r0, #0
 800de02:	d1fb      	bne.n	800ddfc <WS28xxDmx::FullOn()+0x4>
 800de04:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800de06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de0a:	f001 bf20 	b.w	800fc4e <WS28xx::FullOn()>

0800de0e <WS28xxDmx::Print()>:
 800de0e:	3004      	adds	r0, #4
 800de10:	f7ff bf28 	b.w	800dc64 <PixelDmxConfiguration::Print()>

0800de14 <WS28xxDmx::Start(unsigned int)>:
 800de14:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 800de18:	b93b      	cbnz	r3, 800de2a <WS28xxDmx::Start(unsigned int)+0x16>
 800de1a:	2301      	movs	r3, #1
 800de1c:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
 800de20:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800de22:	b110      	cbz	r0, 800de2a <WS28xxDmx::Start(unsigned int)+0x16>
 800de24:	6803      	ldr	r3, [r0, #0]
 800de26:	689b      	ldr	r3, [r3, #8]
 800de28:	4718      	bx	r3
 800de2a:	4770      	bx	lr

0800de2c <WS28xxDmx::Stop(unsigned int)>:
 800de2c:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 800de30:	b13b      	cbz	r3, 800de42 <WS28xxDmx::Stop(unsigned int)+0x16>
 800de32:	2300      	movs	r3, #0
 800de34:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
 800de38:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800de3a:	b110      	cbz	r0, 800de42 <WS28xxDmx::Stop(unsigned int)+0x16>
 800de3c:	6803      	ldr	r3, [r0, #0]
 800de3e:	68db      	ldr	r3, [r3, #12]
 800de40:	4718      	bx	r3
 800de42:	4770      	bx	lr

0800de44 <WS28xxDmx::SetDmxStartAddress(unsigned short)>:
 800de44:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
 800de48:	b508      	push	{r3, lr}
 800de4a:	428a      	cmp	r2, r1
 800de4c:	d101      	bne.n	800de52 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xe>
 800de4e:	2001      	movs	r0, #1
 800de50:	bd08      	pop	{r3, pc}
 800de52:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
 800de56:	440a      	add	r2, r1
 800de58:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800de5c:	dc0c      	bgt.n	800de78 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x34>
 800de5e:	1e4a      	subs	r2, r1, #1
 800de60:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800de64:	d208      	bcs.n	800de78 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x34>
 800de66:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
 800de6a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800de6c:	2800      	cmp	r0, #0
 800de6e:	d0ee      	beq.n	800de4e <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xa>
 800de70:	6803      	ldr	r3, [r0, #0]
 800de72:	69db      	ldr	r3, [r3, #28]
 800de74:	4798      	blx	r3
 800de76:	e7ea      	b.n	800de4e <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xa>
 800de78:	2000      	movs	r0, #0
 800de7a:	e7e9      	b.n	800de50 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xc>

0800de7c <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 800de7c:	4603      	mov	r3, r0
 800de7e:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
 800de82:	4288      	cmp	r0, r1
 800de84:	f04f 0000 	mov.w	r0, #0
 800de88:	d30f      	bcc.n	800deaa <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x2e>
 800de8a:	7090      	strb	r0, [r2, #2]
 800de8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de8e:	fbb1 f0f3 	udiv	r0, r1, r3
 800de92:	fb03 1110 	mls	r1, r3, r0, r1
 800de96:	2903      	cmp	r1, #3
 800de98:	d80e      	bhi.n	800deb8 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x3c>
 800de9a:	e8df f001 	tbb	[pc, r1]
 800de9e:	0d0a0702 	stceq	7, cr0, [sl, #-8]
 800dea2:	f240 2305 	movw	r3, #517	; 0x205
 800dea6:	2001      	movs	r0, #1
 800dea8:	8013      	strh	r3, [r2, #0]
 800deaa:	4770      	bx	lr
 800deac:	f240 2306 	movw	r3, #518	; 0x206
 800deb0:	e7f9      	b.n	800dea6 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x2a>
 800deb2:	f240 2307 	movw	r3, #519	; 0x207
 800deb6:	e7f6      	b.n	800dea6 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x2a>
 800deb8:	f240 2312 	movw	r3, #530	; 0x212
 800debc:	e7f3      	b.n	800dea6 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x2a>
	...

0800dec0 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>:
 800dec0:	b570      	push	{r4, r5, r6, lr}
 800dec2:	4605      	mov	r5, r0
 800dec4:	460e      	mov	r6, r1
 800dec6:	4b19      	ldr	r3, [pc, #100]	; (800df2c <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x6c>)
 800dec8:	4604      	mov	r4, r0
 800deca:	f845 3b04 	str.w	r3, [r5], #4
 800dece:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ded0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ded2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ded4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ded6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800deda:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800dede:	2300      	movs	r3, #0
 800dee0:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 800dee4:	6563      	str	r3, [r4, #84]	; 0x54
 800dee6:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 800deea:	4b11      	ldr	r3, [pc, #68]	; (800df30 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x70>)
 800deec:	1d26      	adds	r6, r4, #4
 800deee:	f104 0244 	add.w	r2, r4, #68	; 0x44
 800def2:	2101      	movs	r1, #1
 800def4:	4630      	mov	r0, r6
 800def6:	601c      	str	r4, [r3, #0]
 800def8:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800defc:	f7ff fe72 	bl	800dbe4 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)>
 800df00:	2028      	movs	r0, #40	; 0x28
 800df02:	f005 ff59 	bl	8013db8 <operator new(unsigned int)>
 800df06:	4605      	mov	r5, r0
 800df08:	4631      	mov	r1, r6
 800df0a:	f001 fdf9 	bl	800fb00 <WS28xx::WS28xx(PixelConfiguration&)>
 800df0e:	4628      	mov	r0, r5
 800df10:	64e5      	str	r5, [r4, #76]	; 0x4c
 800df12:	f001 fe55 	bl	800fbc0 <WS28xx::Blackout()>
 800df16:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800df18:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800df1a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800df1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800df20:	4620      	mov	r0, r4
 800df22:	4353      	muls	r3, r2
 800df24:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 800df28:	bd70      	pop	{r4, r5, r6, pc}
 800df2a:	bf00      	nop
 800df2c:	08016bf8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, r9, fp, sp, lr}
 800df30:	2000194c 	andcs	r1, r0, ip, asr #18

0800df34 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 800df34:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800df36:	88c6      	ldrh	r6, [r0, #6]
 800df38:	8885      	ldrh	r5, [r0, #4]
 800df3a:	42ae      	cmp	r6, r5
 800df3c:	d216      	bcs.n	800df6c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 800df3e:	4604      	mov	r4, r0
 800df40:	6800      	ldr	r0, [r0, #0]
 800df42:	1bad      	subs	r5, r5, r6
 800df44:	4430      	add	r0, r6
 800df46:	7a26      	ldrb	r6, [r4, #8]
 800df48:	b923      	cbnz	r3, 800df54 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 800df4a:	b926      	cbnz	r6, 800df56 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 800df4c:	9200      	str	r2, [sp, #0]
 800df4e:	460b      	mov	r3, r1
 800df50:	4a09      	ldr	r2, [pc, #36]	; (800df78 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 800df52:	e003      	b.n	800df5c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800df54:	b166      	cbz	r6, 800df70 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 800df56:	460b      	mov	r3, r1
 800df58:	9200      	str	r2, [sp, #0]
 800df5a:	4a08      	ldr	r2, [pc, #32]	; (800df7c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 800df5c:	4629      	mov	r1, r5
 800df5e:	f7fb f88d 	bl	800907c <snprintf>
 800df62:	4285      	cmp	r5, r0
 800df64:	bfa2      	ittt	ge
 800df66:	88e3      	ldrhge	r3, [r4, #6]
 800df68:	181b      	addge	r3, r3, r0
 800df6a:	80e3      	strhge	r3, [r4, #6]
 800df6c:	b002      	add	sp, #8
 800df6e:	bd70      	pop	{r4, r5, r6, pc}
 800df70:	9200      	str	r2, [sp, #0]
 800df72:	460b      	mov	r3, r1
 800df74:	4a02      	ldr	r2, [pc, #8]	; (800df80 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 800df76:	e7f1      	b.n	800df5c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800df78:	08016595 	stmdaeq	r1, {r0, r2, r4, r7, r8, sl, sp, lr}
 800df7c:	0801658c 	stmdaeq	r1, {r2, r3, r7, r8, sl, sp, lr}
 800df80:	08016596 	stmdaeq	r1, {r1, r2, r4, r7, r8, sl, sp, lr}

0800df84 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>:
 800df84:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800df86:	88c6      	ldrh	r6, [r0, #6]
 800df88:	8885      	ldrh	r5, [r0, #4]
 800df8a:	42ae      	cmp	r6, r5
 800df8c:	d216      	bcs.n	800dfbc <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x38>
 800df8e:	4604      	mov	r4, r0
 800df90:	6800      	ldr	r0, [r0, #0]
 800df92:	1bad      	subs	r5, r5, r6
 800df94:	4430      	add	r0, r6
 800df96:	7a26      	ldrb	r6, [r4, #8]
 800df98:	b923      	cbnz	r3, 800dfa4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x20>
 800df9a:	b926      	cbnz	r6, 800dfa6 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x22>
 800df9c:	9200      	str	r2, [sp, #0]
 800df9e:	460b      	mov	r3, r1
 800dfa0:	4a09      	ldr	r2, [pc, #36]	; (800dfc8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x44>)
 800dfa2:	e003      	b.n	800dfac <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800dfa4:	b166      	cbz	r6, 800dfc0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x3c>
 800dfa6:	460b      	mov	r3, r1
 800dfa8:	9200      	str	r2, [sp, #0]
 800dfaa:	4a08      	ldr	r2, [pc, #32]	; (800dfcc <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x48>)
 800dfac:	4629      	mov	r1, r5
 800dfae:	f7fb f865 	bl	800907c <snprintf>
 800dfb2:	4285      	cmp	r5, r0
 800dfb4:	bfa2      	ittt	ge
 800dfb6:	88e3      	ldrhge	r3, [r4, #6]
 800dfb8:	181b      	addge	r3, r3, r0
 800dfba:	80e3      	strhge	r3, [r4, #6]
 800dfbc:	b002      	add	sp, #8
 800dfbe:	bd70      	pop	{r4, r5, r6, pc}
 800dfc0:	9200      	str	r2, [sp, #0]
 800dfc2:	460b      	mov	r3, r1
 800dfc4:	4a02      	ldr	r2, [pc, #8]	; (800dfd0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x4c>)
 800dfc6:	e7f1      	b.n	800dfac <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800dfc8:	08016595 	stmdaeq	r1, {r0, r2, r4, r7, r8, sl, sp, lr}
 800dfcc:	0801658c 	stmdaeq	r1, {r2, r3, r7, r8, sl, sp, lr}
 800dfd0:	08016596 	stmdaeq	r1, {r1, r2, r4, r7, r8, sl, sp, lr}

0800dfd4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800dfd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dfd6:	88c6      	ldrh	r6, [r0, #6]
 800dfd8:	8885      	ldrh	r5, [r0, #4]
 800dfda:	42ae      	cmp	r6, r5
 800dfdc:	d216      	bcs.n	800e00c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800dfde:	4604      	mov	r4, r0
 800dfe0:	6800      	ldr	r0, [r0, #0]
 800dfe2:	1bad      	subs	r5, r5, r6
 800dfe4:	4430      	add	r0, r6
 800dfe6:	7a26      	ldrb	r6, [r4, #8]
 800dfe8:	b923      	cbnz	r3, 800dff4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800dfea:	b926      	cbnz	r6, 800dff6 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800dfec:	9200      	str	r2, [sp, #0]
 800dfee:	460b      	mov	r3, r1
 800dff0:	4a09      	ldr	r2, [pc, #36]	; (800e018 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800dff2:	e003      	b.n	800dffc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800dff4:	b166      	cbz	r6, 800e010 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800dff6:	460b      	mov	r3, r1
 800dff8:	9200      	str	r2, [sp, #0]
 800dffa:	4a08      	ldr	r2, [pc, #32]	; (800e01c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800dffc:	4629      	mov	r1, r5
 800dffe:	f7fb f83d 	bl	800907c <snprintf>
 800e002:	4285      	cmp	r5, r0
 800e004:	bfa2      	ittt	ge
 800e006:	88e3      	ldrhge	r3, [r4, #6]
 800e008:	181b      	addge	r3, r3, r0
 800e00a:	80e3      	strhge	r3, [r4, #6]
 800e00c:	b002      	add	sp, #8
 800e00e:	bd70      	pop	{r4, r5, r6, pc}
 800e010:	9200      	str	r2, [sp, #0]
 800e012:	460b      	mov	r3, r1
 800e014:	4a02      	ldr	r2, [pc, #8]	; (800e020 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800e016:	e7f1      	b.n	800dffc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800e018:	080165a8 	stmdaeq	r1, {r3, r5, r7, r8, sl, sp, lr}
 800e01c:	0801659d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, sl, sp, lr}
 800e020:	080165a9 	stmdaeq	r1, {r0, r3, r5, r7, r8, sl, sp, lr}

0800e024 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>:
 800e024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e028:	4699      	mov	r9, r3
 800e02a:	8885      	ldrh	r5, [r0, #4]
 800e02c:	88c3      	ldrh	r3, [r0, #6]
 800e02e:	4604      	mov	r4, r0
 800e030:	42ab      	cmp	r3, r5
 800e032:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800e036:	d227      	bcs.n	800e088 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x64>
 800e038:	6826      	ldr	r6, [r4, #0]
 800e03a:	4610      	mov	r0, r2
 800e03c:	460f      	mov	r7, r1
 800e03e:	f894 a008 	ldrb.w	sl, [r4, #8]
 800e042:	441e      	add	r6, r3
 800e044:	1aed      	subs	r5, r5, r3
 800e046:	f7f9 ff0f 	bl	8007e68 <__aeabi_f2d>
 800e04a:	f1b9 0f00 	cmp.w	r9, #0
 800e04e:	d109      	bne.n	800e064 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x40>
 800e050:	f1ba 0f00 	cmp.w	sl, #0
 800e054:	d109      	bne.n	800e06a <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x46>
 800e056:	463b      	mov	r3, r7
 800e058:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e05c:	4a0f      	ldr	r2, [pc, #60]	; (800e09c <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x78>)
 800e05e:	f8cd 8000 	str.w	r8, [sp]
 800e062:	e008      	b.n	800e076 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x52>
 800e064:	f1ba 0f00 	cmp.w	sl, #0
 800e068:	d011      	beq.n	800e08e <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x6a>
 800e06a:	463b      	mov	r3, r7
 800e06c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e070:	4a0b      	ldr	r2, [pc, #44]	; (800e0a0 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x7c>)
 800e072:	f8cd 8000 	str.w	r8, [sp]
 800e076:	4629      	mov	r1, r5
 800e078:	4630      	mov	r0, r6
 800e07a:	f7fa ffff 	bl	800907c <snprintf>
 800e07e:	4285      	cmp	r5, r0
 800e080:	bfa2      	ittt	ge
 800e082:	88e3      	ldrhge	r3, [r4, #6]
 800e084:	181b      	addge	r3, r3, r0
 800e086:	80e3      	strhge	r3, [r4, #6]
 800e088:	b004      	add	sp, #16
 800e08a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e08e:	463b      	mov	r3, r7
 800e090:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e094:	4a03      	ldr	r2, [pc, #12]	; (800e0a4 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x80>)
 800e096:	f8cd 8000 	str.w	r8, [sp]
 800e09a:	e7ec      	b.n	800e076 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x52>
 800e09c:	08016c33 	stmdaeq	r1, {r0, r1, r4, r5, sl, fp, sp, lr}
 800e0a0:	08016c28 	stmdaeq	r1, {r3, r5, sl, fp, sp, lr}
 800e0a4:	08016c34 	stmdaeq	r1, {r2, r4, r5, sl, fp, sp, lr}

0800e0a8 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>:
 800e0a8:	6001      	str	r1, [r0, #0]
 800e0aa:	2100      	movs	r1, #0
 800e0ac:	f04f 6c10 	mov.w	ip, #150994944	; 0x9000000
 800e0b0:	4a05      	ldr	r2, [pc, #20]	; (800e0c8 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x20>)
 800e0b2:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800e0b6:	4a05      	ldr	r2, [pc, #20]	; (800e0cc <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x24>)
 800e0b8:	4905      	ldr	r1, [pc, #20]	; (800e0d0 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x28>)
 800e0ba:	e9c0 c203 	strd	ip, r2, [r0, #12]
 800e0be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800e0c2:	e9c0 1205 	strd	r1, r2, [r0, #20]
 800e0c6:	4770      	bx	lr
 800e0c8:	0100aa03 	tsteq	r0, r3, lsl #20
 800e0cc:	01ff003d 	mvnseq	r0, sp, lsr r0
 800e0d0:	06000100 	streq	r0, [r0], -r0, lsl #2

0800e0d4 <PixelDmxParams::Load()>:
 800e0d4:	b508      	push	{r3, lr}
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	4601      	mov	r1, r0
 800e0da:	6043      	str	r3, [r0, #4]
 800e0dc:	6800      	ldr	r0, [r0, #0]
 800e0de:	b120      	cbz	r0, 800e0ea <PixelDmxParams::Load()+0x16>
 800e0e0:	6803      	ldr	r3, [r0, #0]
 800e0e2:	3104      	adds	r1, #4
 800e0e4:	68db      	ldr	r3, [r3, #12]
 800e0e6:	4798      	blx	r3
 800e0e8:	2001      	movs	r0, #1
 800e0ea:	bd08      	pop	{r3, pc}

0800e0ec <PixelDmxParams::Load(char const*, unsigned int)>:
 800e0ec:	6803      	ldr	r3, [r0, #0]
 800e0ee:	b1d3      	cbz	r3, 800e126 <PixelDmxParams::Load(char const*, unsigned int)+0x3a>
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e0f4:	460d      	mov	r5, r1
 800e0f6:	4616      	mov	r6, r2
 800e0f8:	4604      	mov	r4, r0
 800e0fa:	6043      	str	r3, [r0, #4]
 800e0fc:	4602      	mov	r2, r0
 800e0fe:	490a      	ldr	r1, [pc, #40]	; (800e128 <PixelDmxParams::Load(char const*, unsigned int)+0x3c>)
 800e100:	4668      	mov	r0, sp
 800e102:	f005 f8ad 	bl	8013260 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800e106:	4632      	mov	r2, r6
 800e108:	4629      	mov	r1, r5
 800e10a:	4668      	mov	r0, sp
 800e10c:	f005 f8ac 	bl	8013268 <ReadConfigFile::Read(char const*, unsigned int)>
 800e110:	4621      	mov	r1, r4
 800e112:	f851 0b04 	ldr.w	r0, [r1], #4
 800e116:	6803      	ldr	r3, [r0, #0]
 800e118:	689b      	ldr	r3, [r3, #8]
 800e11a:	4798      	blx	r3
 800e11c:	4668      	mov	r0, sp
 800e11e:	f005 f8a2 	bl	8013266 <ReadConfigFile::~ReadConfigFile()>
 800e122:	b002      	add	sp, #8
 800e124:	bd70      	pop	{r4, r5, r6, pc}
 800e126:	4770      	bx	lr
 800e128:	0800e3c1 	stmdaeq	r0, {r0, r6, r7, r8, r9, sp, lr, pc}

0800e12c <PixelDmxParams::callbackFunction(char const*)>:
 800e12c:	b530      	push	{r4, r5, lr}
 800e12e:	2308      	movs	r3, #8
 800e130:	460d      	mov	r5, r1
 800e132:	b089      	sub	sp, #36	; 0x24
 800e134:	4604      	mov	r4, r0
 800e136:	9302      	str	r3, [sp, #8]
 800e138:	4628      	mov	r0, r5
 800e13a:	4992      	ldr	r1, [pc, #584]	; (800e384 <PixelDmxParams::callbackFunction(char const*)+0x258>)
 800e13c:	446b      	add	r3, sp
 800e13e:	aa04      	add	r2, sp, #16
 800e140:	f005 f8c6 	bl	80132d0 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800e144:	b9a0      	cbnz	r0, 800e170 <PixelDmxParams::callbackFunction(char const*)+0x44>
 800e146:	9b02      	ldr	r3, [sp, #8]
 800e148:	3320      	adds	r3, #32
 800e14a:	446b      	add	r3, sp
 800e14c:	f803 0c10 	strb.w	r0, [r3, #-16]
 800e150:	a804      	add	r0, sp, #16
 800e152:	f000 fc03 	bl	800e95c <PixelType::GetType(char const*)>
 800e156:	280e      	cmp	r0, #14
 800e158:	bf08      	it	eq
 800e15a:	2203      	moveq	r2, #3
 800e15c:	6863      	ldr	r3, [r4, #4]
 800e15e:	bf19      	ittee	ne
 800e160:	7220      	strbne	r0, [r4, #8]
 800e162:	f043 0301 	orrne.w	r3, r3, #1
 800e166:	7222      	strbeq	r2, [r4, #8]
 800e168:	f023 0301 	biceq.w	r3, r3, #1
 800e16c:	6063      	str	r3, [r4, #4]
 800e16e:	e033      	b.n	800e1d8 <PixelDmxParams::callbackFunction(char const*)+0xac>
 800e170:	4628      	mov	r0, r5
 800e172:	4985      	ldr	r1, [pc, #532]	; (800e388 <PixelDmxParams::callbackFunction(char const*)+0x25c>)
 800e174:	f10d 0202 	add.w	r2, sp, #2
 800e178:	f005 f967 	bl	801344a <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800e17c:	b990      	cbnz	r0, 800e1a4 <PixelDmxParams::callbackFunction(char const*)+0x78>
 800e17e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800e182:	6863      	ldr	r3, [r4, #4]
 800e184:	1e51      	subs	r1, r2, #1
 800e186:	f5b1 7f2a 	cmp.w	r1, #680	; 0x2a8
 800e18a:	bf2d      	iteet	cs
 800e18c:	f06f 0255 	mvncs.w	r2, #85	; 0x55
 800e190:	f8a4 2009 	strhcc.w	r2, [r4, #9]
 800e194:	f043 0302 	orrcc.w	r3, r3, #2
 800e198:	7262      	strbcs	r2, [r4, #9]
 800e19a:	bf24      	itt	cs
 800e19c:	72a0      	strbcs	r0, [r4, #10]
 800e19e:	f023 0302 	biccs.w	r3, r3, #2
 800e1a2:	e7e3      	b.n	800e16c <PixelDmxParams::callbackFunction(char const*)+0x40>
 800e1a4:	2303      	movs	r3, #3
 800e1a6:	4628      	mov	r0, r5
 800e1a8:	9302      	str	r3, [sp, #8]
 800e1aa:	4978      	ldr	r1, [pc, #480]	; (800e38c <PixelDmxParams::callbackFunction(char const*)+0x260>)
 800e1ac:	ab02      	add	r3, sp, #8
 800e1ae:	aa04      	add	r2, sp, #16
 800e1b0:	f005 f88e 	bl	80132d0 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800e1b4:	b990      	cbnz	r0, 800e1dc <PixelDmxParams::callbackFunction(char const*)+0xb0>
 800e1b6:	9b02      	ldr	r3, [sp, #8]
 800e1b8:	3320      	adds	r3, #32
 800e1ba:	446b      	add	r3, sp
 800e1bc:	f803 0c10 	strb.w	r0, [r3, #-16]
 800e1c0:	a804      	add	r0, sp, #16
 800e1c2:	f000 fbef 	bl	800e9a4 <PixelType::GetMap(char const*)>
 800e1c6:	6863      	ldr	r3, [r4, #4]
 800e1c8:	2806      	cmp	r0, #6
 800e1ca:	bf14      	ite	ne
 800e1cc:	f443 7300 	orrne.w	r3, r3, #512	; 0x200
 800e1d0:	f423 7300 	biceq.w	r3, r3, #512	; 0x200
 800e1d4:	6063      	str	r3, [r4, #4]
 800e1d6:	75e0      	strb	r0, [r4, #23]
 800e1d8:	b009      	add	sp, #36	; 0x24
 800e1da:	bd30      	pop	{r4, r5, pc}
 800e1dc:	4628      	mov	r0, r5
 800e1de:	496c      	ldr	r1, [pc, #432]	; (800e390 <PixelDmxParams::callbackFunction(char const*)+0x264>)
 800e1e0:	aa01      	add	r2, sp, #4
 800e1e2:	f005 f88e 	bl	8013302 <Sscan::Float(char const*, char const*, float&)>
 800e1e6:	b960      	cbnz	r0, 800e202 <PixelDmxParams::callbackFunction(char const*)+0xd6>
 800e1e8:	9801      	ldr	r0, [sp, #4]
 800e1ea:	f000 fc47 	bl	800ea7c <PixelType::ConvertTxH(float)>
 800e1ee:	6863      	ldr	r3, [r4, #4]
 800e1f0:	b120      	cbz	r0, 800e1fc <PixelDmxParams::callbackFunction(char const*)+0xd0>
 800e1f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e1f6:	6063      	str	r3, [r4, #4]
 800e1f8:	7620      	strb	r0, [r4, #24]
 800e1fa:	e7ed      	b.n	800e1d8 <PixelDmxParams::callbackFunction(char const*)+0xac>
 800e1fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e200:	e7f9      	b.n	800e1f6 <PixelDmxParams::callbackFunction(char const*)+0xca>
 800e202:	4628      	mov	r0, r5
 800e204:	4963      	ldr	r1, [pc, #396]	; (800e394 <PixelDmxParams::callbackFunction(char const*)+0x268>)
 800e206:	aa01      	add	r2, sp, #4
 800e208:	f005 f87b 	bl	8013302 <Sscan::Float(char const*, char const*, float&)>
 800e20c:	b960      	cbnz	r0, 800e228 <PixelDmxParams::callbackFunction(char const*)+0xfc>
 800e20e:	9801      	ldr	r0, [sp, #4]
 800e210:	f000 fc34 	bl	800ea7c <PixelType::ConvertTxH(float)>
 800e214:	6863      	ldr	r3, [r4, #4]
 800e216:	b120      	cbz	r0, 800e222 <PixelDmxParams::callbackFunction(char const*)+0xf6>
 800e218:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e21c:	6063      	str	r3, [r4, #4]
 800e21e:	7660      	strb	r0, [r4, #25]
 800e220:	e7da      	b.n	800e1d8 <PixelDmxParams::callbackFunction(char const*)+0xac>
 800e222:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e226:	e7f9      	b.n	800e21c <PixelDmxParams::callbackFunction(char const*)+0xf0>
 800e228:	4628      	mov	r0, r5
 800e22a:	495b      	ldr	r1, [pc, #364]	; (800e398 <PixelDmxParams::callbackFunction(char const*)+0x26c>)
 800e22c:	f10d 0202 	add.w	r2, sp, #2
 800e230:	f005 f90b 	bl	801344a <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800e234:	b998      	cbnz	r0, 800e25e <PixelDmxParams::callbackFunction(char const*)+0x132>
 800e236:	f240 25a6 	movw	r5, #678	; 0x2a6
 800e23a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800e23e:	6863      	ldr	r3, [r4, #4]
 800e240:	1e8a      	subs	r2, r1, #2
 800e242:	b292      	uxth	r2, r2
 800e244:	42aa      	cmp	r2, r5
 800e246:	bf81      	itttt	hi
 800e248:	2201      	movhi	r2, #1
 800e24a:	75a0      	strbhi	r0, [r4, #22]
 800e24c:	7562      	strbhi	r2, [r4, #21]
 800e24e:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 800e252:	bf9c      	itt	ls
 800e254:	f8a4 1015 	strhls.w	r1, [r4, #21]
 800e258:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 800e25c:	e786      	b.n	800e16c <PixelDmxParams::callbackFunction(char const*)+0x40>
 800e25e:	4628      	mov	r0, r5
 800e260:	494e      	ldr	r1, [pc, #312]	; (800e39c <PixelDmxParams::callbackFunction(char const*)+0x270>)
 800e262:	aa03      	add	r2, sp, #12
 800e264:	f005 f90f 	bl	8013486 <Sscan::Uint32(char const*, char const*, unsigned int&)>
 800e268:	b960      	cbnz	r0, 800e284 <PixelDmxParams::callbackFunction(char const*)+0x158>
 800e26a:	9a03      	ldr	r2, [sp, #12]
 800e26c:	494c      	ldr	r1, [pc, #304]	; (800e3a0 <PixelDmxParams::callbackFunction(char const*)+0x274>)
 800e26e:	6863      	ldr	r3, [r4, #4]
 800e270:	428a      	cmp	r2, r1
 800e272:	bf14      	ite	ne
 800e274:	f043 0310 	orrne.w	r3, r3, #16
 800e278:	f023 0310 	biceq.w	r3, r3, #16
 800e27c:	6063      	str	r3, [r4, #4]
 800e27e:	f8c4 200e 	str.w	r2, [r4, #14]
 800e282:	e7a9      	b.n	800e1d8 <PixelDmxParams::callbackFunction(char const*)+0xac>
 800e284:	4628      	mov	r0, r5
 800e286:	4947      	ldr	r1, [pc, #284]	; (800e3a4 <PixelDmxParams::callbackFunction(char const*)+0x278>)
 800e288:	f10d 0201 	add.w	r2, sp, #1
 800e28c:	f005 f924 	bl	80134d8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800e290:	b988      	cbnz	r0, 800e2b6 <PixelDmxParams::callbackFunction(char const*)+0x18a>
 800e292:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800e296:	6863      	ldr	r3, [r4, #4]
 800e298:	1e4a      	subs	r2, r1, #1
 800e29a:	b2d2      	uxtb	r2, r2
 800e29c:	2afd      	cmp	r2, #253	; 0xfd
 800e29e:	bf83      	ittte	hi
 800e2a0:	f023 0320 	bichi.w	r3, r3, #32
 800e2a4:	6063      	strhi	r3, [r4, #4]
 800e2a6:	23ff      	movhi	r3, #255	; 0xff
 800e2a8:	f043 0320 	orrls.w	r3, r3, #32
 800e2ac:	bf9a      	itte	ls
 800e2ae:	6063      	strls	r3, [r4, #4]
 800e2b0:	74a1      	strbls	r1, [r4, #18]
 800e2b2:	74a3      	strbhi	r3, [r4, #18]
 800e2b4:	e790      	b.n	800e1d8 <PixelDmxParams::callbackFunction(char const*)+0xac>
 800e2b6:	4628      	mov	r0, r5
 800e2b8:	493b      	ldr	r1, [pc, #236]	; (800e3a8 <PixelDmxParams::callbackFunction(char const*)+0x27c>)
 800e2ba:	f10d 0202 	add.w	r2, sp, #2
 800e2be:	f005 f8c4 	bl	801344a <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800e2c2:	2800      	cmp	r0, #0
 800e2c4:	d13a      	bne.n	800e33c <PixelDmxParams::callbackFunction(char const*)+0x210>
 800e2c6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800e2ca:	6863      	ldr	r3, [r4, #4]
 800e2cc:	1e91      	subs	r1, r2, #2
 800e2ce:	f5b1 7fff 	cmp.w	r1, #510	; 0x1fe
 800e2d2:	bf83      	ittte	hi
 800e2d4:	2201      	movhi	r2, #1
 800e2d6:	72e2      	strbhi	r2, [r4, #11]
 800e2d8:	2200      	movhi	r2, #0
 800e2da:	f8a4 200b 	strhls.w	r2, [r4, #11]
 800e2de:	bf92      	itee	ls
 800e2e0:	f043 0304 	orrls.w	r3, r3, #4
 800e2e4:	7322      	strbhi	r2, [r4, #12]
 800e2e6:	f023 0304 	bichi.w	r3, r3, #4
 800e2ea:	e73f      	b.n	800e16c <PixelDmxParams::callbackFunction(char const*)+0x40>
 800e2ec:	4628      	mov	r0, r5
 800e2ee:	492f      	ldr	r1, [pc, #188]	; (800e3ac <PixelDmxParams::callbackFunction(char const*)+0x280>)
 800e2f0:	f10d 0201 	add.w	r2, sp, #1
 800e2f4:	f005 f8f0 	bl	80134d8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800e2f8:	b948      	cbnz	r0, 800e30e <PixelDmxParams::callbackFunction(char const*)+0x1e2>
 800e2fa:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e2fe:	6863      	ldr	r3, [r4, #4]
 800e300:	b112      	cbz	r2, 800e308 <PixelDmxParams::callbackFunction(char const*)+0x1dc>
 800e302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e306:	e731      	b.n	800e16c <PixelDmxParams::callbackFunction(char const*)+0x40>
 800e308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e30c:	e72e      	b.n	800e16c <PixelDmxParams::callbackFunction(char const*)+0x40>
 800e30e:	4628      	mov	r0, r5
 800e310:	4927      	ldr	r1, [pc, #156]	; (800e3b0 <PixelDmxParams::callbackFunction(char const*)+0x284>)
 800e312:	aa01      	add	r2, sp, #4
 800e314:	f004 fff5 	bl	8013302 <Sscan::Float(char const*, char const*, float&)>
 800e318:	4605      	mov	r5, r0
 800e31a:	2800      	cmp	r0, #0
 800e31c:	f47f af5c 	bne.w	800e1d8 <PixelDmxParams::callbackFunction(char const*)+0xac>
 800e320:	4924      	ldr	r1, [pc, #144]	; (800e3b4 <PixelDmxParams::callbackFunction(char const*)+0x288>)
 800e322:	9801      	ldr	r0, [sp, #4]
 800e324:	f7f9 fdf8 	bl	8007f18 <__aeabi_fmul>
 800e328:	f7f9 ff46 	bl	80081b8 <__aeabi_f2uiz>
 800e32c:	b2c3      	uxtb	r3, r0
 800e32e:	f1a3 0214 	sub.w	r2, r3, #20
 800e332:	2a05      	cmp	r2, #5
 800e334:	bf8c      	ite	hi
 800e336:	7365      	strbhi	r5, [r4, #13]
 800e338:	7363      	strbls	r3, [r4, #13]
 800e33a:	e74d      	b.n	800e1d8 <PixelDmxParams::callbackFunction(char const*)+0xac>
 800e33c:	4628      	mov	r0, r5
 800e33e:	491e      	ldr	r1, [pc, #120]	; (800e3b8 <PixelDmxParams::callbackFunction(char const*)+0x28c>)
 800e340:	f10d 0202 	add.w	r2, sp, #2
 800e344:	f005 f881 	bl	801344a <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800e348:	b930      	cbnz	r0, 800e358 <PixelDmxParams::callbackFunction(char const*)+0x22c>
 800e34a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e34e:	8363      	strh	r3, [r4, #26]
 800e350:	6863      	ldr	r3, [r4, #4]
 800e352:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e356:	6063      	str	r3, [r4, #4]
 800e358:	4628      	mov	r0, r5
 800e35a:	4918      	ldr	r1, [pc, #96]	; (800e3bc <PixelDmxParams::callbackFunction(char const*)+0x290>)
 800e35c:	f10d 0201 	add.w	r2, sp, #1
 800e360:	f005 f8ba 	bl	80134d8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800e364:	2800      	cmp	r0, #0
 800e366:	d1c1      	bne.n	800e2ec <PixelDmxParams::callbackFunction(char const*)+0x1c0>
 800e368:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e36c:	6863      	ldr	r3, [r4, #4]
 800e36e:	1e51      	subs	r1, r2, #1
 800e370:	2904      	cmp	r1, #4
 800e372:	bf99      	ittee	ls
 800e374:	7522      	strbls	r2, [r4, #20]
 800e376:	f043 0308 	orrls.w	r3, r3, #8
 800e37a:	7520      	strbhi	r0, [r4, #20]
 800e37c:	f023 0308 	bichi.w	r3, r3, #8
 800e380:	e6f4      	b.n	800e16c <PixelDmxParams::callbackFunction(char const*)+0x40>
 800e382:	bf00      	nop
 800e384:	08017d5e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, sl, fp, ip, sp, lr}
 800e388:	08017d67 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp, lr}
 800e38c:	08017d4e 	stmdaeq	r1, {r1, r2, r3, r6, r8, sl, fp, ip, sp, lr}
 800e390:	08017d71 	stmdaeq	r1, {r0, r4, r5, r6, r8, sl, fp, ip, sp, lr}
 800e394:	08017d79 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, sl, fp, ip, sp, lr}
 800e398:	08017d1b 	stmdaeq	r1, {r0, r1, r3, r4, r8, sl, fp, ip, sp, lr}
 800e39c:	08017cff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, sl, fp, ip, sp, lr}
 800e3a0:	003d0900 	eorseq	r0, sp, r0, lsl #18
 800e3a4:	08017d3c 	stmdaeq	r1, {r2, r3, r4, r5, r8, sl, fp, ip, sp, lr}
 800e3a8:	08017e56 	stmdaeq	r1, {r1, r2, r4, r6, r9, sl, fp, ip, sp, lr}
 800e3ac:	08017d2b 	stmdaeq	r1, {r0, r1, r3, r5, r8, sl, fp, ip, sp, lr}
 800e3b0:	08017cf3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, sl, fp, ip, sp, lr}
 800e3b4:	41200000 			; <UNDEFINED> instruction: 0x41200000
 800e3b8:	08017dfa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r8, sl, fp, ip, sp, lr}
 800e3bc:	08017d0e 	stmdaeq	r1, {r1, r2, r3, r8, sl, fp, ip, sp, lr}

0800e3c0 <PixelDmxParams::staticCallbackFunction(void*, char const*)>:
 800e3c0:	f7ff beb4 	b.w	800e12c <PixelDmxParams::callbackFunction(char const*)>

0800e3c4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)>:
 800e3c4:	b570      	push	{r4, r5, r6, lr}
 800e3c6:	4604      	mov	r4, r0
 800e3c8:	4615      	mov	r5, r2
 800e3ca:	461e      	mov	r6, r3
 800e3cc:	b086      	sub	sp, #24
 800e3ce:	3004      	adds	r0, #4
 800e3d0:	b389      	cbz	r1, 800e436 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x72>
 800e3d2:	2218      	movs	r2, #24
 800e3d4:	f005 fdaf 	bl	8013f36 <memmove>
 800e3d8:	462a      	mov	r2, r5
 800e3da:	4633      	mov	r3, r6
 800e3dc:	4996      	ldr	r1, [pc, #600]	; (800e638 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x274>)
 800e3de:	a803      	add	r0, sp, #12
 800e3e0:	f004 fe9e 	bl	8013120 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800e3e4:	7a20      	ldrb	r0, [r4, #8]
 800e3e6:	f000 faad 	bl	800e944 <PixelType::GetType(pixel::Type)>
 800e3ea:	6863      	ldr	r3, [r4, #4]
 800e3ec:	4602      	mov	r2, r0
 800e3ee:	4993      	ldr	r1, [pc, #588]	; (800e63c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x278>)
 800e3f0:	f003 0301 	and.w	r3, r3, #1
 800e3f4:	a803      	add	r0, sp, #12
 800e3f6:	f7ff fded 	bl	800dfd4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800e3fa:	6863      	ldr	r3, [r4, #4]
 800e3fc:	f8b4 2009 	ldrh.w	r2, [r4, #9]
 800e400:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e404:	498e      	ldr	r1, [pc, #568]	; (800e640 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x27c>)
 800e406:	a803      	add	r0, sp, #12
 800e408:	f7ff fdbc 	bl	800df84 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800e40c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800e410:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800e414:	6863      	ldr	r3, [r4, #4]
 800e416:	42aa      	cmp	r2, r5
 800e418:	d227      	bcs.n	800e46a <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0xa6>
 800e41a:	9803      	ldr	r0, [sp, #12]
 800e41c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800e420:	4410      	add	r0, r2
 800e422:	eba5 0502 	sub.w	r5, r5, r2
 800e426:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800e42a:	d10b      	bne.n	800e444 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x80>
 800e42c:	b96a      	cbnz	r2, 800e44a <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x86>
 800e42e:	9200      	str	r2, [sp, #0]
 800e430:	4b84      	ldr	r3, [pc, #528]	; (800e644 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x280>)
 800e432:	4a85      	ldr	r2, [pc, #532]	; (800e648 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x284>)
 800e434:	e00f      	b.n	800e456 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x92>
 800e436:	6823      	ldr	r3, [r4, #0]
 800e438:	4601      	mov	r1, r0
 800e43a:	681a      	ldr	r2, [r3, #0]
 800e43c:	4618      	mov	r0, r3
 800e43e:	68d2      	ldr	r2, [r2, #12]
 800e440:	4790      	blx	r2
 800e442:	e7c9      	b.n	800e3d8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x14>
 800e444:	2a00      	cmp	r2, #0
 800e446:	f000 808a 	beq.w	800e55e <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x19a>
 800e44a:	3b00      	subs	r3, #0
 800e44c:	bf18      	it	ne
 800e44e:	2301      	movne	r3, #1
 800e450:	4a7e      	ldr	r2, [pc, #504]	; (800e64c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x288>)
 800e452:	9300      	str	r3, [sp, #0]
 800e454:	4b7b      	ldr	r3, [pc, #492]	; (800e644 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x280>)
 800e456:	4629      	mov	r1, r5
 800e458:	f7fa fe10 	bl	800907c <snprintf>
 800e45c:	4285      	cmp	r5, r0
 800e45e:	bfa2      	ittt	ge
 800e460:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800e464:	18c0      	addge	r0, r0, r3
 800e466:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800e46a:	7b63      	ldrb	r3, [r4, #13]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d17b      	bne.n	800e568 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1a4>
 800e470:	4a77      	ldr	r2, [pc, #476]	; (800e650 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x28c>)
 800e472:	4978      	ldr	r1, [pc, #480]	; (800e654 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x290>)
 800e474:	a803      	add	r0, sp, #12
 800e476:	f7ff fdad 	bl	800dfd4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800e47a:	4977      	ldr	r1, [pc, #476]	; (800e658 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x294>)
 800e47c:	a803      	add	r0, sp, #12
 800e47e:	f004 fed5 	bl	801322c <PropertiesBuilder::AddComment(char const*)>
 800e482:	6863      	ldr	r3, [r4, #4]
 800e484:	059e      	lsls	r6, r3, #22
 800e486:	d403      	bmi.n	800e490 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0xcc>
 800e488:	7a20      	ldrb	r0, [r4, #8]
 800e48a:	f000 fabf 	bl	800ea0c <PixelType::GetMap(pixel::Type)>
 800e48e:	75e0      	strb	r0, [r4, #23]
 800e490:	7de0      	ldrb	r0, [r4, #23]
 800e492:	f000 faaf 	bl	800e9f4 <PixelType::GetMap(pixel::Map)>
 800e496:	6863      	ldr	r3, [r4, #4]
 800e498:	4602      	mov	r2, r0
 800e49a:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800e49e:	496f      	ldr	r1, [pc, #444]	; (800e65c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 800e4a0:	a803      	add	r0, sp, #12
 800e4a2:	f7ff fd97 	bl	800dfd4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800e4a6:	6863      	ldr	r3, [r4, #4]
 800e4a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e4ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e4b0:	d011      	beq.n	800e4d6 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x112>
 800e4b2:	f10d 020b 	add.w	r2, sp, #11
 800e4b6:	7a20      	ldrb	r0, [r4, #8]
 800e4b8:	f10d 010a 	add.w	r1, sp, #10
 800e4bc:	f000 f93b 	bl	800e736 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 800e4c0:	6863      	ldr	r3, [r4, #4]
 800e4c2:	055d      	lsls	r5, r3, #21
 800e4c4:	bf5c      	itt	pl
 800e4c6:	f89d 200a 	ldrbpl.w	r2, [sp, #10]
 800e4ca:	7622      	strbpl	r2, [r4, #24]
 800e4cc:	0518      	lsls	r0, r3, #20
 800e4ce:	bf5c      	itt	pl
 800e4d0:	f89d 300b 	ldrbpl.w	r3, [sp, #11]
 800e4d4:	7663      	strbpl	r3, [r4, #25]
 800e4d6:	4962      	ldr	r1, [pc, #392]	; (800e660 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x29c>)
 800e4d8:	a803      	add	r0, sp, #12
 800e4da:	f004 fea7 	bl	801322c <PropertiesBuilder::AddComment(char const*)>
 800e4de:	7e20      	ldrb	r0, [r4, #24]
 800e4e0:	f000 fa9e 	bl	800ea20 <PixelType::ConvertTxH(unsigned char)>
 800e4e4:	2502      	movs	r5, #2
 800e4e6:	6863      	ldr	r3, [r4, #4]
 800e4e8:	4602      	mov	r2, r0
 800e4ea:	495e      	ldr	r1, [pc, #376]	; (800e664 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 800e4ec:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800e4f0:	9500      	str	r5, [sp, #0]
 800e4f2:	a803      	add	r0, sp, #12
 800e4f4:	f7ff fd96 	bl	800e024 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 800e4f8:	7e60      	ldrb	r0, [r4, #25]
 800e4fa:	f000 fa91 	bl	800ea20 <PixelType::ConvertTxH(unsigned char)>
 800e4fe:	6863      	ldr	r3, [r4, #4]
 800e500:	4602      	mov	r2, r0
 800e502:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 800e506:	4958      	ldr	r1, [pc, #352]	; (800e668 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2a4>)
 800e508:	9500      	str	r5, [sp, #0]
 800e50a:	a803      	add	r0, sp, #12
 800e50c:	f7ff fd8a 	bl	800e024 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 800e510:	4956      	ldr	r1, [pc, #344]	; (800e66c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2a8>)
 800e512:	a803      	add	r0, sp, #12
 800e514:	f004 fe8a 	bl	801322c <PropertiesBuilder::AddComment(char const*)>
 800e518:	6863      	ldr	r3, [r4, #4]
 800e51a:	f8b4 2015 	ldrh.w	r2, [r4, #21]
 800e51e:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800e522:	4953      	ldr	r1, [pc, #332]	; (800e670 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2ac>)
 800e524:	a803      	add	r0, sp, #12
 800e526:	f7ff fd2d 	bl	800df84 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800e52a:	4952      	ldr	r1, [pc, #328]	; (800e674 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2b0>)
 800e52c:	a803      	add	r0, sp, #12
 800e52e:	f004 fe7d 	bl	801322c <PropertiesBuilder::AddComment(char const*)>
 800e532:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800e536:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800e53a:	f8d4 300e 	ldr.w	r3, [r4, #14]
 800e53e:	42aa      	cmp	r2, r5
 800e540:	6861      	ldr	r1, [r4, #4]
 800e542:	d22e      	bcs.n	800e5a2 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1de>
 800e544:	9803      	ldr	r0, [sp, #12]
 800e546:	06c9      	lsls	r1, r1, #27
 800e548:	4410      	add	r0, r2
 800e54a:	eba5 0502 	sub.w	r5, r5, r2
 800e54e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800e552:	d417      	bmi.n	800e584 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1c0>
 800e554:	b9c2      	cbnz	r2, 800e588 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1c4>
 800e556:	9300      	str	r3, [sp, #0]
 800e558:	4a3b      	ldr	r2, [pc, #236]	; (800e648 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x284>)
 800e55a:	4b47      	ldr	r3, [pc, #284]	; (800e678 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2b4>)
 800e55c:	e017      	b.n	800e58e <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1ca>
 800e55e:	2301      	movs	r3, #1
 800e560:	4a46      	ldr	r2, [pc, #280]	; (800e67c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2b8>)
 800e562:	9300      	str	r3, [sp, #0]
 800e564:	4b37      	ldr	r3, [pc, #220]	; (800e644 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x280>)
 800e566:	e776      	b.n	800e456 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x92>
 800e568:	4618      	mov	r0, r3
 800e56a:	f7f9 fa0b 	bl	8007984 <__aeabi_ui2f>
 800e56e:	4944      	ldr	r1, [pc, #272]	; (800e680 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2bc>)
 800e570:	f7f9 fd86 	bl	8008080 <__aeabi_fdiv>
 800e574:	2301      	movs	r3, #1
 800e576:	4602      	mov	r2, r0
 800e578:	4936      	ldr	r1, [pc, #216]	; (800e654 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x290>)
 800e57a:	9300      	str	r3, [sp, #0]
 800e57c:	a803      	add	r0, sp, #12
 800e57e:	f7ff fd51 	bl	800e024 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 800e582:	e77a      	b.n	800e47a <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0xb6>
 800e584:	2a00      	cmp	r2, #0
 800e586:	d052      	beq.n	800e62e <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x26a>
 800e588:	9300      	str	r3, [sp, #0]
 800e58a:	4a30      	ldr	r2, [pc, #192]	; (800e64c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x288>)
 800e58c:	4b3a      	ldr	r3, [pc, #232]	; (800e678 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2b4>)
 800e58e:	4629      	mov	r1, r5
 800e590:	f7fa fd74 	bl	800907c <snprintf>
 800e594:	4285      	cmp	r5, r0
 800e596:	bfa2      	ittt	ge
 800e598:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800e59c:	18c0      	addge	r0, r0, r3
 800e59e:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800e5a2:	4938      	ldr	r1, [pc, #224]	; (800e684 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2c0>)
 800e5a4:	a803      	add	r0, sp, #12
 800e5a6:	f004 fe41 	bl	801322c <PropertiesBuilder::AddComment(char const*)>
 800e5aa:	6863      	ldr	r3, [r4, #4]
 800e5ac:	7ca2      	ldrb	r2, [r4, #18]
 800e5ae:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e5b2:	4935      	ldr	r1, [pc, #212]	; (800e688 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2c4>)
 800e5b4:	a803      	add	r0, sp, #12
 800e5b6:	f7ff fcbd 	bl	800df34 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800e5ba:	4934      	ldr	r1, [pc, #208]	; (800e68c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2c8>)
 800e5bc:	a803      	add	r0, sp, #12
 800e5be:	f004 fe35 	bl	801322c <PropertiesBuilder::AddComment(char const*)>
 800e5c2:	6863      	ldr	r3, [r4, #4]
 800e5c4:	f8b4 200b 	ldrh.w	r2, [r4, #11]
 800e5c8:	4931      	ldr	r1, [pc, #196]	; (800e690 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2cc>)
 800e5ca:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800e5ce:	a803      	add	r0, sp, #12
 800e5d0:	f7ff fcd8 	bl	800df84 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800e5d4:	6863      	ldr	r3, [r4, #4]
 800e5d6:	8b62      	ldrh	r2, [r4, #26]
 800e5d8:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800e5dc:	492d      	ldr	r1, [pc, #180]	; (800e694 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2d0>)
 800e5de:	a803      	add	r0, sp, #12
 800e5e0:	f7ff fcd0 	bl	800df84 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800e5e4:	492c      	ldr	r1, [pc, #176]	; (800e698 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2d4>)
 800e5e6:	a803      	add	r0, sp, #12
 800e5e8:	f004 fe20 	bl	801322c <PropertiesBuilder::AddComment(char const*)>
 800e5ec:	6863      	ldr	r3, [r4, #4]
 800e5ee:	7d22      	ldrb	r2, [r4, #20]
 800e5f0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800e5f4:	4929      	ldr	r1, [pc, #164]	; (800e69c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2d8>)
 800e5f6:	a803      	add	r0, sp, #12
 800e5f8:	f7ff fc9c 	bl	800df34 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800e5fc:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800e600:	b17b      	cbz	r3, 800e622 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x25e>
 800e602:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800e606:	9b03      	ldr	r3, [sp, #12]
 800e608:	4413      	add	r3, r2
 800e60a:	227d      	movs	r2, #125	; 0x7d
 800e60c:	f803 2c01 	strb.w	r2, [r3, #-1]
 800e610:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800e614:	9903      	ldr	r1, [sp, #12]
 800e616:	54ca      	strb	r2, [r1, r3]
 800e618:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800e61c:	3301      	adds	r3, #1
 800e61e:	f8ad 3012 	strh.w	r3, [sp, #18]
 800e622:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800e626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e628:	601a      	str	r2, [r3, #0]
 800e62a:	b006      	add	sp, #24
 800e62c:	bd70      	pop	{r4, r5, r6, pc}
 800e62e:	9300      	str	r3, [sp, #0]
 800e630:	4a12      	ldr	r2, [pc, #72]	; (800e67c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2b8>)
 800e632:	4b11      	ldr	r3, [pc, #68]	; (800e678 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2b4>)
 800e634:	e7ab      	b.n	800e58e <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1ca>
 800e636:	bf00      	nop
 800e638:	08017d81 	stmdaeq	r1, {r0, r7, r8, sl, fp, ip, sp, lr}
 800e63c:	08017d5e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, sl, fp, ip, sp, lr}
 800e640:	08017d67 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp, lr}
 800e644:	08017d2b 	stmdaeq	r1, {r0, r1, r3, r5, r8, sl, fp, ip, sp, lr}
 800e648:	08016595 	stmdaeq	r1, {r0, r2, r4, r7, r8, sl, sp, lr}
 800e64c:	0801658c 	stmdaeq	r1, {r2, r3, r7, r8, sl, sp, lr}
 800e650:	08016c3d 	stmdaeq	r1, {r0, r2, r3, r4, r5, sl, fp, sp, lr}
 800e654:	08017cf3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, sl, fp, ip, sp, lr}
 800e658:	08016c47 	stmdaeq	r1, {r0, r1, r2, r6, sl, fp, sp, lr}
 800e65c:	08017d4e 	stmdaeq	r1, {r1, r2, r3, r6, r8, sl, fp, ip, sp, lr}
 800e660:	08016c5b 	stmdaeq	r1, {r0, r1, r3, r4, r6, sl, fp, sp, lr}
 800e664:	08017d71 	stmdaeq	r1, {r0, r4, r5, r6, r8, sl, fp, ip, sp, lr}
 800e668:	08017d79 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, sl, fp, ip, sp, lr}
 800e66c:	08016c71 	stmdaeq	r1, {r0, r4, r5, r6, sl, fp, sp, lr}
 800e670:	08017d1b 	stmdaeq	r1, {r0, r1, r3, r4, r8, sl, fp, ip, sp, lr}
 800e674:	08016c7a 	stmdaeq	r1, {r1, r3, r4, r5, r6, sl, fp, sp, lr}
 800e678:	08017cff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, sl, fp, ip, sp, lr}
 800e67c:	08016596 	stmdaeq	r1, {r1, r2, r4, r7, r8, sl, sp, lr}
 800e680:	41200000 			; <UNDEFINED> instruction: 0x41200000
 800e684:	08016c8c 	stmdaeq	r1, {r2, r3, r7, sl, fp, sp, lr}
 800e688:	08017d3c 	stmdaeq	r1, {r2, r3, r4, r5, r8, sl, fp, ip, sp, lr}
 800e68c:	08017ce5 	stmdaeq	r1, {r0, r2, r5, r6, r7, sl, fp, ip, sp, lr}
 800e690:	08017e56 	stmdaeq	r1, {r1, r2, r4, r6, r9, sl, fp, ip, sp, lr}
 800e694:	08017dfa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r8, sl, fp, ip, sp, lr}
 800e698:	08016c9a 	stmdaeq	r1, {r1, r3, r4, r7, sl, fp, sp, lr}
 800e69c:	08017d0e 	stmdaeq	r1, {r1, r2, r3, r8, sl, fp, ip, sp, lr}

0800e6a0 <PixelDmxParams::Save(char*, unsigned int, unsigned int&)>:
 800e6a0:	b513      	push	{r0, r1, r4, lr}
 800e6a2:	6804      	ldr	r4, [r0, #0]
 800e6a4:	b914      	cbnz	r4, 800e6ac <PixelDmxParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800e6a6:	601c      	str	r4, [r3, #0]
 800e6a8:	b002      	add	sp, #8
 800e6aa:	bd10      	pop	{r4, pc}
 800e6ac:	9300      	str	r3, [sp, #0]
 800e6ae:	4613      	mov	r3, r2
 800e6b0:	460a      	mov	r2, r1
 800e6b2:	2100      	movs	r1, #0
 800e6b4:	f7ff fe86 	bl	800e3c4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)>
 800e6b8:	e7f6      	b.n	800e6a8 <PixelDmxParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800e6ba <PixelDmxParams::Set(PixelDmxConfiguration*)>:
 800e6ba:	6843      	ldr	r3, [r0, #4]
 800e6bc:	07da      	lsls	r2, r3, #31
 800e6be:	bf44      	itt	mi
 800e6c0:	7a02      	ldrbmi	r2, [r0, #8]
 800e6c2:	600a      	strmi	r2, [r1, #0]
 800e6c4:	079a      	lsls	r2, r3, #30
 800e6c6:	d505      	bpl.n	800e6d4 <PixelDmxParams::Set(PixelDmxConfiguration*)+0x1a>
 800e6c8:	f8b0 2009 	ldrh.w	r2, [r0, #9]
 800e6cc:	2a00      	cmp	r2, #0
 800e6ce:	bf08      	it	eq
 800e6d0:	22aa      	moveq	r2, #170	; 0xaa
 800e6d2:	604a      	str	r2, [r1, #4]
 800e6d4:	059a      	lsls	r2, r3, #22
 800e6d6:	bf44      	itt	mi
 800e6d8:	7dc2      	ldrbmi	r2, [r0, #23]
 800e6da:	608a      	strmi	r2, [r1, #8]
 800e6dc:	055a      	lsls	r2, r3, #21
 800e6de:	bf44      	itt	mi
 800e6e0:	7e02      	ldrbmi	r2, [r0, #24]
 800e6e2:	740a      	strbmi	r2, [r1, #16]
 800e6e4:	051a      	lsls	r2, r3, #20
 800e6e6:	bf44      	itt	mi
 800e6e8:	7e42      	ldrbmi	r2, [r0, #25]
 800e6ea:	744a      	strbmi	r2, [r1, #17]
 800e6ec:	06da      	lsls	r2, r3, #27
 800e6ee:	bf44      	itt	mi
 800e6f0:	f8d0 200e 	ldrmi.w	r2, [r0, #14]
 800e6f4:	60ca      	strmi	r2, [r1, #12]
 800e6f6:	069a      	lsls	r2, r3, #26
 800e6f8:	bf44      	itt	mi
 800e6fa:	7c82      	ldrbmi	r2, [r0, #18]
 800e6fc:	748a      	strbmi	r2, [r1, #18]
 800e6fe:	061a      	lsls	r2, r3, #24
 800e700:	d504      	bpl.n	800e70c <PixelDmxParams::Set(PixelDmxConfiguration*)+0x52>
 800e702:	2201      	movs	r2, #1
 800e704:	750a      	strb	r2, [r1, #20]
 800e706:	7b42      	ldrb	r2, [r0, #13]
 800e708:	b102      	cbz	r2, 800e70c <PixelDmxParams::Set(PixelDmxConfiguration*)+0x52>
 800e70a:	74ca      	strb	r2, [r1, #19]
 800e70c:	075a      	lsls	r2, r3, #29
 800e70e:	d50b      	bpl.n	800e728 <PixelDmxParams::Set(PixelDmxConfiguration*)+0x6e>
 800e710:	7ac2      	ldrb	r2, [r0, #11]
 800e712:	b510      	push	{r4, lr}
 800e714:	7b04      	ldrb	r4, [r0, #12]
 800e716:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800e71a:	858a      	strh	r2, [r1, #44]	; 0x2c
 800e71c:	05da      	lsls	r2, r3, #23
 800e71e:	bf44      	itt	mi
 800e720:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 800e724:	620b      	strmi	r3, [r1, #32]
 800e726:	bd10      	pop	{r4, pc}
 800e728:	05db      	lsls	r3, r3, #23
 800e72a:	bf44      	itt	mi
 800e72c:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 800e730:	620b      	strmi	r3, [r1, #32]
 800e732:	4770      	bx	lr

0800e734 <PixelDmxParams::Dump()>:
 800e734:	4770      	bx	lr

0800e736 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>:
 800e736:	23c0      	movs	r3, #192	; 0xc0
 800e738:	2803      	cmp	r0, #3
 800e73a:	700b      	strb	r3, [r1, #0]
 800e73c:	d006      	beq.n	800e74c <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x16>
 800e73e:	3808      	subs	r0, #8
 800e740:	2803      	cmp	r0, #3
 800e742:	bf34      	ite	cc
 800e744:	23fc      	movcc	r3, #252	; 0xfc
 800e746:	23f0      	movcs	r3, #240	; 0xf0
 800e748:	7013      	strb	r3, [r2, #0]
 800e74a:	4770      	bx	lr
 800e74c:	23f8      	movs	r3, #248	; 0xf8
 800e74e:	e7fb      	b.n	800e748 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x12>

0800e750 <PixelConfiguration::Validate(unsigned int&)>:
 800e750:	b513      	push	{r0, r1, r4, lr}
 800e752:	4604      	mov	r4, r0
 800e754:	6800      	ldr	r0, [r0, #0]
 800e756:	6863      	ldr	r3, [r4, #4]
 800e758:	2807      	cmp	r0, #7
 800e75a:	68a2      	ldr	r2, [r4, #8]
 800e75c:	d128      	bne.n	800e7b0 <PixelConfiguration::Validate(unsigned int&)+0x60>
 800e75e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e762:	bf28      	it	cs
 800e764:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e768:	6063      	str	r3, [r4, #4]
 800e76a:	2304      	movs	r3, #4
 800e76c:	600b      	str	r3, [r1, #0]
 800e76e:	2301      	movs	r3, #1
 800e770:	2a06      	cmp	r2, #6
 800e772:	7563      	strb	r3, [r4, #21]
 800e774:	d102      	bne.n	800e77c <PixelConfiguration::Validate(unsigned int&)+0x2c>
 800e776:	f000 f949 	bl	800ea0c <PixelType::GetMap(pixel::Type)>
 800e77a:	60a0      	str	r0, [r4, #8]
 800e77c:	7c63      	ldrb	r3, [r4, #17]
 800e77e:	7c22      	ldrb	r2, [r4, #16]
 800e780:	6820      	ldr	r0, [r4, #0]
 800e782:	429a      	cmp	r2, r3
 800e784:	bf28      	it	cs
 800e786:	2300      	movcs	r3, #0
 800e788:	f10d 0207 	add.w	r2, sp, #7
 800e78c:	bf28      	it	cs
 800e78e:	8223      	strhcs	r3, [r4, #16]
 800e790:	f10d 0106 	add.w	r1, sp, #6
 800e794:	f7ff ffcf 	bl	800e736 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 800e798:	7c23      	ldrb	r3, [r4, #16]
 800e79a:	b913      	cbnz	r3, 800e7a2 <PixelConfiguration::Validate(unsigned int&)+0x52>
 800e79c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e7a0:	7423      	strb	r3, [r4, #16]
 800e7a2:	7c63      	ldrb	r3, [r4, #17]
 800e7a4:	b913      	cbnz	r3, 800e7ac <PixelConfiguration::Validate(unsigned int&)+0x5c>
 800e7a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e7aa:	7463      	strb	r3, [r4, #17]
 800e7ac:	4b29      	ldr	r3, [pc, #164]	; (800e854 <PixelConfiguration::Validate(unsigned int&)+0x104>)
 800e7ae:	e01e      	b.n	800e7ee <PixelConfiguration::Validate(unsigned int&)+0x9e>
 800e7b0:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 800e7b4:	bf28      	it	cs
 800e7b6:	f44f 732a 	movcs.w	r3, #680	; 0x2a8
 800e7ba:	6063      	str	r3, [r4, #4]
 800e7bc:	2303      	movs	r3, #3
 800e7be:	600b      	str	r3, [r1, #0]
 800e7c0:	f1a0 030b 	sub.w	r3, r0, #11
 800e7c4:	2b01      	cmp	r3, #1
 800e7c6:	d806      	bhi.n	800e7d6 <PixelConfiguration::Validate(unsigned int&)+0x86>
 800e7c8:	7ca3      	ldrb	r3, [r4, #18]
 800e7ca:	2b1f      	cmp	r3, #31
 800e7cc:	d83d      	bhi.n	800e84a <PixelConfiguration::Validate(unsigned int&)+0xfa>
 800e7ce:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800e7d2:	74a3      	strb	r3, [r4, #18]
 800e7d4:	e001      	b.n	800e7da <PixelConfiguration::Validate(unsigned int&)+0x8a>
 800e7d6:	2800      	cmp	r0, #0
 800e7d8:	d139      	bne.n	800e84e <PixelConfiguration::Validate(unsigned int&)+0xfe>
 800e7da:	2300      	movs	r3, #0
 800e7dc:	2a06      	cmp	r2, #6
 800e7de:	bf08      	it	eq
 800e7e0:	60a3      	streq	r3, [r4, #8]
 800e7e2:	280d      	cmp	r0, #13
 800e7e4:	7563      	strb	r3, [r4, #21]
 800e7e6:	68e3      	ldr	r3, [r4, #12]
 800e7e8:	d119      	bne.n	800e81e <PixelConfiguration::Validate(unsigned int&)+0xce>
 800e7ea:	b913      	cbnz	r3, 800e7f2 <PixelConfiguration::Validate(unsigned int&)+0xa2>
 800e7ec:	4b1a      	ldr	r3, [pc, #104]	; (800e858 <PixelConfiguration::Validate(unsigned int&)+0x108>)
 800e7ee:	60e3      	str	r3, [r4, #12]
 800e7f0:	e003      	b.n	800e7fa <PixelConfiguration::Validate(unsigned int&)+0xaa>
 800e7f2:	4a1a      	ldr	r2, [pc, #104]	; (800e85c <PixelConfiguration::Validate(unsigned int&)+0x10c>)
 800e7f4:	4293      	cmp	r3, r2
 800e7f6:	d900      	bls.n	800e7fa <PixelConfiguration::Validate(unsigned int&)+0xaa>
 800e7f8:	60e2      	str	r2, [r4, #12]
 800e7fa:	7d23      	ldrb	r3, [r4, #20]
 800e7fc:	b31b      	cbz	r3, 800e846 <PixelConfiguration::Validate(unsigned int&)+0xf6>
 800e7fe:	7ce3      	ldrb	r3, [r4, #19]
 800e800:	b9ab      	cbnz	r3, 800e82e <PixelConfiguration::Validate(unsigned int&)+0xde>
 800e802:	6822      	ldr	r2, [r4, #0]
 800e804:	b17a      	cbz	r2, 800e826 <PixelConfiguration::Validate(unsigned int&)+0xd6>
 800e806:	f1a2 030b 	sub.w	r3, r2, #11
 800e80a:	2b01      	cmp	r3, #1
 800e80c:	d90d      	bls.n	800e82a <PixelConfiguration::Validate(unsigned int&)+0xda>
 800e80e:	4b14      	ldr	r3, [pc, #80]	; (800e860 <PixelConfiguration::Validate(unsigned int&)+0x110>)
 800e810:	4914      	ldr	r1, [pc, #80]	; (800e864 <PixelConfiguration::Validate(unsigned int&)+0x114>)
 800e812:	2a0d      	cmp	r2, #13
 800e814:	bf08      	it	eq
 800e816:	460b      	moveq	r3, r1
 800e818:	61a3      	str	r3, [r4, #24]
 800e81a:	b002      	add	sp, #8
 800e81c:	bd10      	pop	{r4, pc}
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d0e4      	beq.n	800e7ec <PixelConfiguration::Validate(unsigned int&)+0x9c>
 800e822:	4a11      	ldr	r2, [pc, #68]	; (800e868 <PixelConfiguration::Validate(unsigned int&)+0x118>)
 800e824:	e7e6      	b.n	800e7f4 <PixelConfiguration::Validate(unsigned int&)+0xa4>
 800e826:	4b11      	ldr	r3, [pc, #68]	; (800e86c <PixelConfiguration::Validate(unsigned int&)+0x11c>)
 800e828:	e7f6      	b.n	800e818 <PixelConfiguration::Validate(unsigned int&)+0xc8>
 800e82a:	4b11      	ldr	r3, [pc, #68]	; (800e870 <PixelConfiguration::Validate(unsigned int&)+0x120>)
 800e82c:	e7f4      	b.n	800e818 <PixelConfiguration::Validate(unsigned int&)+0xc8>
 800e82e:	f1a3 0214 	sub.w	r2, r3, #20
 800e832:	2a05      	cmp	r2, #5
 800e834:	d807      	bhi.n	800e846 <PixelConfiguration::Validate(unsigned int&)+0xf6>
 800e836:	3b15      	subs	r3, #21
 800e838:	2b04      	cmp	r3, #4
 800e83a:	bf96      	itet	ls
 800e83c:	4a0d      	ldrls	r2, [pc, #52]	; (800e874 <PixelConfiguration::Validate(unsigned int&)+0x124>)
 800e83e:	4b0e      	ldrhi	r3, [pc, #56]	; (800e878 <PixelConfiguration::Validate(unsigned int&)+0x128>)
 800e840:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
 800e844:	e7e8      	b.n	800e818 <PixelConfiguration::Validate(unsigned int&)+0xc8>
 800e846:	4b07      	ldr	r3, [pc, #28]	; (800e864 <PixelConfiguration::Validate(unsigned int&)+0x114>)
 800e848:	e7e6      	b.n	800e818 <PixelConfiguration::Validate(unsigned int&)+0xc8>
 800e84a:	23ff      	movs	r3, #255	; 0xff
 800e84c:	e7c1      	b.n	800e7d2 <PixelConfiguration::Validate(unsigned int&)+0x82>
 800e84e:	280d      	cmp	r0, #13
 800e850:	d18d      	bne.n	800e76e <PixelConfiguration::Validate(unsigned int&)+0x1e>
 800e852:	e7c2      	b.n	800e7da <PixelConfiguration::Validate(unsigned int&)+0x8a>
 800e854:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 800e858:	003d0900 	eorseq	r0, sp, r0, lsl #18
 800e85c:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 800e860:	0801707c 	stmdaeq	r1, {r2, r3, r4, r5, r6, ip, sp, lr}
 800e864:	08016d7c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, sl, fp, sp, lr}
 800e868:	017d7840 	cmneq	sp, r0, asr #16
 800e86c:	0801737c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, r9, ip, sp, lr}
 800e870:	0801747c 	stmdaeq	r1, {r2, r3, r4, r5, r6, sl, ip, sp, lr}
 800e874:	08016d68 	stmdaeq	r1, {r3, r5, r6, r8, sl, fp, sp, lr}
 800e878:	08016e7c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r9, sl, fp, sp, lr}

0800e87c <PixelConfiguration::Print()>:
 800e87c:	b513      	push	{r0, r1, r4, lr}
 800e87e:	4604      	mov	r4, r0
 800e880:	4825      	ldr	r0, [pc, #148]	; (800e918 <PixelConfiguration::Print()+0x9c>)
 800e882:	f7fa fbd3 	bl	800902c <printf>
 800e886:	6820      	ldr	r0, [r4, #0]
 800e888:	f000 f85c 	bl	800e944 <PixelType::GetType(pixel::Type)>
 800e88c:	6822      	ldr	r2, [r4, #0]
 800e88e:	4601      	mov	r1, r0
 800e890:	4822      	ldr	r0, [pc, #136]	; (800e91c <PixelConfiguration::Print()+0xa0>)
 800e892:	f7fa fbcb 	bl	800902c <printf>
 800e896:	6861      	ldr	r1, [r4, #4]
 800e898:	4821      	ldr	r0, [pc, #132]	; (800e920 <PixelConfiguration::Print()+0xa4>)
 800e89a:	f7fa fbc7 	bl	800902c <printf>
 800e89e:	7d63      	ldrb	r3, [r4, #21]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d030      	beq.n	800e906 <PixelConfiguration::Print()+0x8a>
 800e8a4:	68a0      	ldr	r0, [r4, #8]
 800e8a6:	f000 f8a5 	bl	800e9f4 <PixelType::GetMap(pixel::Map)>
 800e8aa:	68a2      	ldr	r2, [r4, #8]
 800e8ac:	4601      	mov	r1, r0
 800e8ae:	481d      	ldr	r0, [pc, #116]	; (800e924 <PixelConfiguration::Print()+0xa8>)
 800e8b0:	f7fa fbbc 	bl	800902c <printf>
 800e8b4:	7c20      	ldrb	r0, [r4, #16]
 800e8b6:	f000 f8b3 	bl	800ea20 <PixelType::ConvertTxH(unsigned char)>
 800e8ba:	f7f9 fad5 	bl	8007e68 <__aeabi_f2d>
 800e8be:	460b      	mov	r3, r1
 800e8c0:	7c21      	ldrb	r1, [r4, #16]
 800e8c2:	4602      	mov	r2, r0
 800e8c4:	9100      	str	r1, [sp, #0]
 800e8c6:	4818      	ldr	r0, [pc, #96]	; (800e928 <PixelConfiguration::Print()+0xac>)
 800e8c8:	f7fa fbb0 	bl	800902c <printf>
 800e8cc:	7c60      	ldrb	r0, [r4, #17]
 800e8ce:	f000 f8a7 	bl	800ea20 <PixelType::ConvertTxH(unsigned char)>
 800e8d2:	f7f9 fac9 	bl	8007e68 <__aeabi_f2d>
 800e8d6:	460b      	mov	r3, r1
 800e8d8:	7c61      	ldrb	r1, [r4, #17]
 800e8da:	4602      	mov	r2, r0
 800e8dc:	9100      	str	r1, [sp, #0]
 800e8de:	4813      	ldr	r0, [pc, #76]	; (800e92c <PixelConfiguration::Print()+0xb0>)
 800e8e0:	f7fa fba4 	bl	800902c <printf>
 800e8e4:	7d21      	ldrb	r1, [r4, #20]
 800e8e6:	4a12      	ldr	r2, [pc, #72]	; (800e930 <PixelConfiguration::Print()+0xb4>)
 800e8e8:	4b12      	ldr	r3, [pc, #72]	; (800e934 <PixelConfiguration::Print()+0xb8>)
 800e8ea:	4813      	ldr	r0, [pc, #76]	; (800e938 <PixelConfiguration::Print()+0xbc>)
 800e8ec:	2900      	cmp	r1, #0
 800e8ee:	bf14      	ite	ne
 800e8f0:	4611      	movne	r1, r2
 800e8f2:	4619      	moveq	r1, r3
 800e8f4:	f7fa fb9a 	bl	800902c <printf>
 800e8f8:	68e1      	ldr	r1, [r4, #12]
 800e8fa:	4810      	ldr	r0, [pc, #64]	; (800e93c <PixelConfiguration::Print()+0xc0>)
 800e8fc:	b002      	add	sp, #8
 800e8fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e902:	f7fa bb93 	b.w	800902c <printf>
 800e906:	6823      	ldr	r3, [r4, #0]
 800e908:	3b0b      	subs	r3, #11
 800e90a:	2b01      	cmp	r3, #1
 800e90c:	d8ea      	bhi.n	800e8e4 <PixelConfiguration::Print()+0x68>
 800e90e:	7ca1      	ldrb	r1, [r4, #18]
 800e910:	480b      	ldr	r0, [pc, #44]	; (800e940 <PixelConfiguration::Print()+0xc4>)
 800e912:	f7fa fb8b 	bl	800902c <printf>
 800e916:	e7e5      	b.n	800e8e4 <PixelConfiguration::Print()+0x68>
 800e918:	08016cae 	stmdaeq	r1, {r1, r2, r3, r5, r7, sl, fp, sp, lr}
 800e91c:	08016cc3 	stmdaeq	r1, {r0, r1, r6, r7, sl, fp, sp, lr}
 800e920:	08016cd7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, sl, fp, sp, lr}
 800e924:	08016ce6 	stmdaeq	r1, {r1, r2, r5, r6, r7, sl, fp, sp, lr}
 800e928:	08016cfa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, sl, fp, sp, lr}
 800e92c:	08016d12 	stmdaeq	r1, {r1, r4, r8, sl, fp, sp, lr}
 800e930:	08016ca7 	stmdaeq	r1, {r0, r1, r2, r5, r7, sl, fp, sp, lr}
 800e934:	08016cab 	stmdaeq	r1, {r0, r1, r3, r5, r7, sl, fp, sp, lr}
 800e938:	08016d41 	stmdaeq	r1, {r0, r6, r8, sl, fp, sp, lr}
 800e93c:	08016d57 	stmdaeq	r1, {r0, r1, r2, r4, r6, r8, sl, fp, sp, lr}
 800e940:	08016d2a 	stmdaeq	r1, {r1, r3, r5, r8, sl, fp, sp, lr}

0800e944 <PixelType::GetType(pixel::Type)>:
 800e944:	280d      	cmp	r0, #13
 800e946:	bfda      	itte	le
 800e948:	4b02      	ldrle	r3, [pc, #8]	; (800e954 <PixelType::GetType(pixel::Type)+0x10>)
 800e94a:	eb03 00c0 	addle.w	r0, r3, r0, lsl #3
 800e94e:	4802      	ldrgt	r0, [pc, #8]	; (800e958 <PixelType::GetType(pixel::Type)+0x14>)
 800e950:	4770      	bx	lr
 800e952:	bf00      	nop
 800e954:	080175b0 	stmdaeq	r1, {r4, r5, r7, r8, sl, ip, sp, lr}
 800e958:	0801757c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, sl, ip, sp, lr}

0800e95c <PixelType::GetType(char const*)>:
 800e95c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e95e:	4604      	mov	r4, r0
 800e960:	2000      	movs	r0, #0
 800e962:	490f      	ldr	r1, [pc, #60]	; (800e9a0 <PixelType::GetType(char const*)+0x44>)
 800e964:	1e67      	subs	r7, r4, #1
 800e966:	1e4e      	subs	r6, r1, #1
 800e968:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800e96c:	4615      	mov	r5, r2
 800e96e:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 800e972:	2b19      	cmp	r3, #25
 800e974:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800e978:	bf98      	it	ls
 800e97a:	f102 0520 	addls.w	r5, r2, #32
 800e97e:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 800e982:	f1bc 0f19 	cmp.w	ip, #25
 800e986:	bf98      	it	ls
 800e988:	3320      	addls	r3, #32
 800e98a:	42ab      	cmp	r3, r5
 800e98c:	d005      	beq.n	800e99a <PixelType::GetType(char const*)+0x3e>
 800e98e:	3001      	adds	r0, #1
 800e990:	280e      	cmp	r0, #14
 800e992:	f101 0108 	add.w	r1, r1, #8
 800e996:	d1e5      	bne.n	800e964 <PixelType::GetType(char const*)+0x8>
 800e998:	e001      	b.n	800e99e <PixelType::GetType(char const*)+0x42>
 800e99a:	2a00      	cmp	r2, #0
 800e99c:	d1e4      	bne.n	800e968 <PixelType::GetType(char const*)+0xc>
 800e99e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9a0:	080175b0 	stmdaeq	r1, {r4, r5, r7, r8, sl, ip, sp, lr}

0800e9a4 <PixelType::GetMap(char const*)>:
 800e9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9a6:	4605      	mov	r5, r0
 800e9a8:	2000      	movs	r0, #0
 800e9aa:	4b11      	ldr	r3, [pc, #68]	; (800e9f0 <PixelType::GetMap(char const*)+0x4c>)
 800e9ac:	1e5c      	subs	r4, r3, #1
 800e9ae:	1e6e      	subs	r6, r5, #1
 800e9b0:	f103 0c02 	add.w	ip, r3, #2
 800e9b4:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 800e9b8:	4617      	mov	r7, r2
 800e9ba:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 800e9be:	2919      	cmp	r1, #25
 800e9c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e9c4:	bf98      	it	ls
 800e9c6:	f102 0720 	addls.w	r7, r2, #32
 800e9ca:	f1a1 0e41 	sub.w	lr, r1, #65	; 0x41
 800e9ce:	f1be 0f19 	cmp.w	lr, #25
 800e9d2:	bf98      	it	ls
 800e9d4:	3120      	addls	r1, #32
 800e9d6:	42b9      	cmp	r1, r7
 800e9d8:	d005      	beq.n	800e9e6 <PixelType::GetMap(char const*)+0x42>
 800e9da:	3001      	adds	r0, #1
 800e9dc:	2806      	cmp	r0, #6
 800e9de:	f103 0304 	add.w	r3, r3, #4
 800e9e2:	d1e3      	bne.n	800e9ac <PixelType::GetMap(char const*)+0x8>
 800e9e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9e6:	2a00      	cmp	r2, #0
 800e9e8:	d0fc      	beq.n	800e9e4 <PixelType::GetMap(char const*)+0x40>
 800e9ea:	4564      	cmp	r4, ip
 800e9ec:	d1e2      	bne.n	800e9b4 <PixelType::GetMap(char const*)+0x10>
 800e9ee:	e7f9      	b.n	800e9e4 <PixelType::GetMap(char const*)+0x40>
 800e9f0:	08017598 	stmdaeq	r1, {r3, r4, r7, r8, sl, ip, sp, lr}

0800e9f4 <PixelType::GetMap(pixel::Map)>:
 800e9f4:	2805      	cmp	r0, #5
 800e9f6:	bfda      	itte	le
 800e9f8:	4b02      	ldrle	r3, [pc, #8]	; (800ea04 <PixelType::GetMap(pixel::Map)+0x10>)
 800e9fa:	eb03 0080 	addle.w	r0, r3, r0, lsl #2
 800e9fe:	4802      	ldrgt	r0, [pc, #8]	; (800ea08 <PixelType::GetMap(pixel::Map)+0x14>)
 800ea00:	4770      	bx	lr
 800ea02:	bf00      	nop
 800ea04:	08017598 	stmdaeq	r1, {r3, r4, r7, r8, sl, ip, sp, lr}
 800ea08:	08017584 	stmdaeq	r1, {r2, r7, r8, sl, ip, sp, lr}

0800ea0c <PixelType::GetMap(pixel::Type)>:
 800ea0c:	3801      	subs	r0, #1
 800ea0e:	2809      	cmp	r0, #9
 800ea10:	bf9a      	itte	ls
 800ea12:	4b02      	ldrls	r3, [pc, #8]	; (800ea1c <PixelType::GetMap(pixel::Type)+0x10>)
 800ea14:	5618      	ldrsbls	r0, [r3, r0]
 800ea16:	2002      	movhi	r0, #2
 800ea18:	4770      	bx	lr
 800ea1a:	bf00      	nop
 800ea1c:	0801758e 	stmdaeq	r1, {r1, r2, r3, r7, r8, sl, ip, sp, lr}

0800ea20 <PixelType::ConvertTxH(unsigned char)>:
 800ea20:	28f0      	cmp	r0, #240	; 0xf0
 800ea22:	d010      	beq.n	800ea46 <PixelType::ConvertTxH(unsigned char)+0x26>
 800ea24:	d807      	bhi.n	800ea36 <PixelType::ConvertTxH(unsigned char)+0x16>
 800ea26:	28c0      	cmp	r0, #192	; 0xc0
 800ea28:	d00f      	beq.n	800ea4a <PixelType::ConvertTxH(unsigned char)+0x2a>
 800ea2a:	28e0      	cmp	r0, #224	; 0xe0
 800ea2c:	d00f      	beq.n	800ea4e <PixelType::ConvertTxH(unsigned char)+0x2e>
 800ea2e:	2880      	cmp	r0, #128	; 0x80
 800ea30:	d113      	bne.n	800ea5a <PixelType::ConvertTxH(unsigned char)+0x3a>
 800ea32:	480b      	ldr	r0, [pc, #44]	; (800ea60 <PixelType::ConvertTxH(unsigned char)+0x40>)
 800ea34:	4770      	bx	lr
 800ea36:	28fc      	cmp	r0, #252	; 0xfc
 800ea38:	d00b      	beq.n	800ea52 <PixelType::ConvertTxH(unsigned char)+0x32>
 800ea3a:	28fe      	cmp	r0, #254	; 0xfe
 800ea3c:	d00b      	beq.n	800ea56 <PixelType::ConvertTxH(unsigned char)+0x36>
 800ea3e:	28f8      	cmp	r0, #248	; 0xf8
 800ea40:	d10b      	bne.n	800ea5a <PixelType::ConvertTxH(unsigned char)+0x3a>
 800ea42:	4808      	ldr	r0, [pc, #32]	; (800ea64 <PixelType::ConvertTxH(unsigned char)+0x44>)
 800ea44:	4770      	bx	lr
 800ea46:	4808      	ldr	r0, [pc, #32]	; (800ea68 <PixelType::ConvertTxH(unsigned char)+0x48>)
 800ea48:	4770      	bx	lr
 800ea4a:	4808      	ldr	r0, [pc, #32]	; (800ea6c <PixelType::ConvertTxH(unsigned char)+0x4c>)
 800ea4c:	4770      	bx	lr
 800ea4e:	4808      	ldr	r0, [pc, #32]	; (800ea70 <PixelType::ConvertTxH(unsigned char)+0x50>)
 800ea50:	4770      	bx	lr
 800ea52:	4808      	ldr	r0, [pc, #32]	; (800ea74 <PixelType::ConvertTxH(unsigned char)+0x54>)
 800ea54:	4770      	bx	lr
 800ea56:	4808      	ldr	r0, [pc, #32]	; (800ea78 <PixelType::ConvertTxH(unsigned char)+0x58>)
 800ea58:	4770      	bx	lr
 800ea5a:	2000      	movs	r0, #0
 800ea5c:	4770      	bx	lr
 800ea5e:	bf00      	nop
 800ea60:	3e200000 	cdpcc	0, 2, cr0, cr0, cr0, {0}
 800ea64:	3f480000 	svccc	0x00480000
 800ea68:	3f200000 	svccc	0x00200000
 800ea6c:	3ea00000 	cdpcc	0, 10, cr0, cr0, cr0, {0}
 800ea70:	3ef00000 	cdpcc	0, 15, cr0, cr0, cr0, {0}
 800ea74:	3f700000 	svccc	0x00700000
 800ea78:	3f8c0000 	svccc	0x008c0000

0800ea7c <PixelType::ConvertTxH(float)>:
 800ea7c:	b510      	push	{r4, lr}
 800ea7e:	491d      	ldr	r1, [pc, #116]	; (800eaf4 <PixelType::ConvertTxH(float)+0x78>)
 800ea80:	4604      	mov	r4, r0
 800ea82:	f7f9 f825 	bl	8007ad0 <__aeabi_fcmplt>
 800ea86:	bb30      	cbnz	r0, 800ead6 <PixelType::ConvertTxH(float)+0x5a>
 800ea88:	4620      	mov	r0, r4
 800ea8a:	491b      	ldr	r1, [pc, #108]	; (800eaf8 <PixelType::ConvertTxH(float)+0x7c>)
 800ea8c:	f7f9 f820 	bl	8007ad0 <__aeabi_fcmplt>
 800ea90:	bb18      	cbnz	r0, 800eada <PixelType::ConvertTxH(float)+0x5e>
 800ea92:	4620      	mov	r0, r4
 800ea94:	4919      	ldr	r1, [pc, #100]	; (800eafc <PixelType::ConvertTxH(float)+0x80>)
 800ea96:	f7f9 f81b 	bl	8007ad0 <__aeabi_fcmplt>
 800ea9a:	bb00      	cbnz	r0, 800eade <PixelType::ConvertTxH(float)+0x62>
 800ea9c:	4620      	mov	r0, r4
 800ea9e:	4918      	ldr	r1, [pc, #96]	; (800eb00 <PixelType::ConvertTxH(float)+0x84>)
 800eaa0:	f7f9 f816 	bl	8007ad0 <__aeabi_fcmplt>
 800eaa4:	b9e8      	cbnz	r0, 800eae2 <PixelType::ConvertTxH(float)+0x66>
 800eaa6:	4620      	mov	r0, r4
 800eaa8:	4916      	ldr	r1, [pc, #88]	; (800eb04 <PixelType::ConvertTxH(float)+0x88>)
 800eaaa:	f7f9 f811 	bl	8007ad0 <__aeabi_fcmplt>
 800eaae:	b9d0      	cbnz	r0, 800eae6 <PixelType::ConvertTxH(float)+0x6a>
 800eab0:	4620      	mov	r0, r4
 800eab2:	4915      	ldr	r1, [pc, #84]	; (800eb08 <PixelType::ConvertTxH(float)+0x8c>)
 800eab4:	f7f9 f80c 	bl	8007ad0 <__aeabi_fcmplt>
 800eab8:	b9b8      	cbnz	r0, 800eaea <PixelType::ConvertTxH(float)+0x6e>
 800eaba:	4620      	mov	r0, r4
 800eabc:	4913      	ldr	r1, [pc, #76]	; (800eb0c <PixelType::ConvertTxH(float)+0x90>)
 800eabe:	f7f9 f807 	bl	8007ad0 <__aeabi_fcmplt>
 800eac2:	b9a0      	cbnz	r0, 800eaee <PixelType::ConvertTxH(float)+0x72>
 800eac4:	4620      	mov	r0, r4
 800eac6:	4912      	ldr	r1, [pc, #72]	; (800eb10 <PixelType::ConvertTxH(float)+0x94>)
 800eac8:	f7f9 f802 	bl	8007ad0 <__aeabi_fcmplt>
 800eacc:	2800      	cmp	r0, #0
 800eace:	bf14      	ite	ne
 800ead0:	20fe      	movne	r0, #254	; 0xfe
 800ead2:	2000      	moveq	r0, #0
 800ead4:	bd10      	pop	{r4, pc}
 800ead6:	2000      	movs	r0, #0
 800ead8:	e7fc      	b.n	800ead4 <PixelType::ConvertTxH(float)+0x58>
 800eada:	2080      	movs	r0, #128	; 0x80
 800eadc:	e7fa      	b.n	800ead4 <PixelType::ConvertTxH(float)+0x58>
 800eade:	20c0      	movs	r0, #192	; 0xc0
 800eae0:	e7f8      	b.n	800ead4 <PixelType::ConvertTxH(float)+0x58>
 800eae2:	20e0      	movs	r0, #224	; 0xe0
 800eae4:	e7f6      	b.n	800ead4 <PixelType::ConvertTxH(float)+0x58>
 800eae6:	20f0      	movs	r0, #240	; 0xf0
 800eae8:	e7f4      	b.n	800ead4 <PixelType::ConvertTxH(float)+0x58>
 800eaea:	20f8      	movs	r0, #248	; 0xf8
 800eaec:	e7f2      	b.n	800ead4 <PixelType::ConvertTxH(float)+0x58>
 800eaee:	20fc      	movs	r0, #252	; 0xfc
 800eaf0:	e7f0      	b.n	800ead4 <PixelType::ConvertTxH(float)+0x58>
 800eaf2:	bf00      	nop
 800eaf4:	3da00000 	stccc	0, cr0, [r0]
 800eaf8:	3e700000 	cdpcc	0, 7, cr0, cr0, cr0, {0}
 800eafc:	3ec80000 	cdpcc	0, 12, cr0, cr8, cr0, {0}
 800eb00:	3f0c0000 	svccc	0x000c0000
 800eb04:	3f340000 	svccc	0x00340000
 800eb08:	3f5c0000 	svccc	0x005c0000
 800eb0c:	3f820000 	svccc	0x00820000
 800eb10:	3f960000 	svccc	0x00960000

0800eb14 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>:
 800eb14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb16:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800eb1a:	f3c1 4207 	ubfx	r2, r1, #16, #8
 800eb1e:	b2cc      	uxtb	r4, r1
 800eb20:	490e      	ldr	r1, [pc, #56]	; (800eb5c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x48>)
 800eb22:	4605      	mov	r5, r0
 800eb24:	6808      	ldr	r0, [r1, #0]
 800eb26:	6801      	ldr	r1, [r0, #0]
 800eb28:	2907      	cmp	r1, #7
 800eb2a:	d005      	beq.n	800eb38 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x24>
 800eb2c:	4629      	mov	r1, r5
 800eb2e:	9400      	str	r4, [sp, #0]
 800eb30:	f000 fa88 	bl	800f044 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 800eb34:	b003      	add	sp, #12
 800eb36:	bd30      	pop	{r4, r5, pc}
 800eb38:	429a      	cmp	r2, r3
 800eb3a:	f04f 0100 	mov.w	r1, #0
 800eb3e:	d109      	bne.n	800eb54 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x40>
 800eb40:	42a2      	cmp	r2, r4
 800eb42:	d107      	bne.n	800eb54 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x40>
 800eb44:	e9cd 1200 	strd	r1, r2, [sp]
 800eb48:	460b      	mov	r3, r1
 800eb4a:	460a      	mov	r2, r1
 800eb4c:	4629      	mov	r1, r5
 800eb4e:	f000 feab 	bl	800f8a8 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 800eb52:	e7ef      	b.n	800eb34 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x20>
 800eb54:	e9cd 4100 	strd	r4, r1, [sp]
 800eb58:	e7f8      	b.n	800eb4c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x38>
 800eb5a:	bf00      	nop
 800eb5c:	2000197c 	andcs	r1, r0, ip, ror r9

0800eb60 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>:
 800eb60:	b538      	push	{r3, r4, r5, lr}
 800eb62:	2400      	movs	r4, #0
 800eb64:	4d05      	ldr	r5, [pc, #20]	; (800eb7c <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x1c>)
 800eb66:	682b      	ldr	r3, [r5, #0]
 800eb68:	429c      	cmp	r4, r3
 800eb6a:	d300      	bcc.n	800eb6e <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0xe>
 800eb6c:	bd38      	pop	{r3, r4, r5, pc}
 800eb6e:	4620      	mov	r0, r4
 800eb70:	2100      	movs	r1, #0
 800eb72:	f7ff ffcf 	bl	800eb14 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 800eb76:	3401      	adds	r4, #1
 800eb78:	e7f5      	b.n	800eb66 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x6>
 800eb7a:	bf00      	nop
 800eb7c:	20001978 	andcs	r1, r0, r8, ror r9

0800eb80 <PixelPatterns::PixelPatterns(unsigned int)>:
 800eb80:	2901      	cmp	r1, #1
 800eb82:	bf28      	it	cs
 800eb84:	2101      	movcs	r1, #1
 800eb86:	4b08      	ldr	r3, [pc, #32]	; (800eba8 <PixelPatterns::PixelPatterns(unsigned int)+0x28>)
 800eb88:	4a08      	ldr	r2, [pc, #32]	; (800ebac <PixelPatterns::PixelPatterns(unsigned int)+0x2c>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	6013      	str	r3, [r2, #0]
 800eb8e:	4a08      	ldr	r2, [pc, #32]	; (800ebb0 <PixelPatterns::PixelPatterns(unsigned int)+0x30>)
 800eb90:	6011      	str	r1, [r2, #0]
 800eb92:	685a      	ldr	r2, [r3, #4]
 800eb94:	4b07      	ldr	r3, [pc, #28]	; (800ebb4 <PixelPatterns::PixelPatterns(unsigned int)+0x34>)
 800eb96:	601a      	str	r2, [r3, #0]
 800eb98:	2200      	movs	r2, #0
 800eb9a:	4b07      	ldr	r3, [pc, #28]	; (800ebb8 <PixelPatterns::PixelPatterns(unsigned int)+0x38>)
 800eb9c:	6819      	ldr	r1, [r3, #0]
 800eb9e:	4b07      	ldr	r3, [pc, #28]	; (800ebbc <PixelPatterns::PixelPatterns(unsigned int)+0x3c>)
 800eba0:	61da      	str	r2, [r3, #28]
 800eba2:	6019      	str	r1, [r3, #0]
 800eba4:	619a      	str	r2, [r3, #24]
 800eba6:	4770      	bx	lr
 800eba8:	2000198c 	andcs	r1, r0, ip, lsl #19
 800ebac:	2000197c 	andcs	r1, r0, ip, ror r9
 800ebb0:	20001970 	andcs	r1, r0, r0, ror r9
 800ebb4:	20001978 	andcs	r1, r0, r8, ror r9
 800ebb8:	20009dd4 	ldrdcs	r9, [r0], -r4
 800ebbc:	20001950 	andcs	r1, r0, r0, asr r9

0800ebc0 <PixelPatterns::GetName(pixelpatterns::Pattern)>:
 800ebc0:	2805      	cmp	r0, #5
 800ebc2:	bfdd      	ittte	le
 800ebc4:	220e      	movle	r2, #14
 800ebc6:	4b02      	ldrle	r3, [pc, #8]	; (800ebd0 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x10>)
 800ebc8:	fb02 3000 	mlale	r0, r2, r0, r3
 800ebcc:	4801      	ldrgt	r0, [pc, #4]	; (800ebd4 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x14>)
 800ebce:	4770      	bx	lr
 800ebd0:	08017620 	stmdaeq	r1, {r5, r9, sl, ip, sp, lr}
 800ebd4:	0801757c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, sl, ip, sp, lr}

0800ebd8 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>:
 800ebd8:	b570      	push	{r4, r5, r6, lr}
 800ebda:	460e      	mov	r6, r1
 800ebdc:	4615      	mov	r5, r2
 800ebde:	461c      	mov	r4, r3
 800ebe0:	f7ff ffbe 	bl	800eb60 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	4905      	ldr	r1, [pc, #20]	; (800ebfc <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)+0x24>)
 800ebe8:	22ff      	movs	r2, #255	; 0xff
 800ebea:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800ebee:	61cb      	str	r3, [r1, #28]
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	604d      	str	r5, [r1, #4]
 800ebf4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800ebf8:	618c      	str	r4, [r1, #24]
 800ebfa:	bd70      	pop	{r4, r5, r6, pc}
 800ebfc:	20001950 	andcs	r1, r0, r0, asr r9

0800ec00 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 800ec00:	b570      	push	{r4, r5, r6, lr}
 800ec02:	460e      	mov	r6, r1
 800ec04:	461c      	mov	r4, r3
 800ec06:	4615      	mov	r5, r2
 800ec08:	f7ff ffaa 	bl	800eb60 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800ec0c:	2302      	movs	r3, #2
 800ec0e:	4908      	ldr	r1, [pc, #32]	; (800ec30 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 800ec10:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800ec14:	61cb      	str	r3, [r1, #28]
 800ec16:	9b04      	ldr	r3, [sp, #16]
 800ec18:	e9c1 5402 	strd	r5, r4, [r1, #8]
 800ec1c:	604b      	str	r3, [r1, #4]
 800ec1e:	4b05      	ldr	r3, [pc, #20]	; (800ec34 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x34>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	610b      	str	r3, [r1, #16]
 800ec24:	2300      	movs	r3, #0
 800ec26:	614b      	str	r3, [r1, #20]
 800ec28:	9b05      	ldr	r3, [sp, #20]
 800ec2a:	618b      	str	r3, [r1, #24]
 800ec2c:	bd70      	pop	{r4, r5, r6, pc}
 800ec2e:	bf00      	nop
 800ec30:	20001950 	andcs	r1, r0, r0, asr r9
 800ec34:	20001978 	andcs	r1, r0, r8, ror r9

0800ec38 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 800ec38:	b570      	push	{r4, r5, r6, lr}
 800ec3a:	460e      	mov	r6, r1
 800ec3c:	461d      	mov	r5, r3
 800ec3e:	4614      	mov	r4, r2
 800ec40:	f7ff ff8e 	bl	800eb60 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800ec44:	2303      	movs	r3, #3
 800ec46:	4907      	ldr	r1, [pc, #28]	; (800ec64 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 800ec48:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800ec4c:	61cb      	str	r3, [r1, #28]
 800ec4e:	4b06      	ldr	r3, [pc, #24]	; (800ec68 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 800ec50:	604d      	str	r5, [r1, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	608c      	str	r4, [r1, #8]
 800ec56:	610b      	str	r3, [r1, #16]
 800ec58:	2300      	movs	r3, #0
 800ec5a:	614b      	str	r3, [r1, #20]
 800ec5c:	9b04      	ldr	r3, [sp, #16]
 800ec5e:	618b      	str	r3, [r1, #24]
 800ec60:	bd70      	pop	{r4, r5, r6, pc}
 800ec62:	bf00      	nop
 800ec64:	20001950 	andcs	r1, r0, r0, asr r9
 800ec68:	20001978 	andcs	r1, r0, r8, ror r9

0800ec6c <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>:
 800ec6c:	b570      	push	{r4, r5, r6, lr}
 800ec6e:	460e      	mov	r6, r1
 800ec70:	461d      	mov	r5, r3
 800ec72:	4614      	mov	r4, r2
 800ec74:	f7ff ff74 	bl	800eb60 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800ec78:	2304      	movs	r3, #4
 800ec7a:	4912      	ldr	r1, [pc, #72]	; (800ecc4 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x58>)
 800ec7c:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800ec80:	604d      	str	r5, [r1, #4]
 800ec82:	4d11      	ldr	r5, [pc, #68]	; (800ecc8 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x5c>)
 800ec84:	61cb      	str	r3, [r1, #28]
 800ec86:	6828      	ldr	r0, [r5, #0]
 800ec88:	608c      	str	r4, [r1, #8]
 800ec8a:	1e43      	subs	r3, r0, #1
 800ec8c:	005b      	lsls	r3, r3, #1
 800ec8e:	b29b      	uxth	r3, r3
 800ec90:	610b      	str	r3, [r1, #16]
 800ec92:	2300      	movs	r3, #0
 800ec94:	4c0d      	ldr	r4, [pc, #52]	; (800eccc <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x60>)
 800ec96:	614b      	str	r3, [r1, #20]
 800ec98:	6823      	ldr	r3, [r4, #0]
 800ec9a:	b97b      	cbnz	r3, 800ecbc <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x50>
 800ec9c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800eca0:	4298      	cmp	r0, r3
 800eca2:	bf2c      	ite	cs
 800eca4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 800eca8:	0080      	lslcc	r0, r0, #2
 800ecaa:	f005 f887 	bl	8013dbc <operator new[](unsigned int)>
 800ecae:	2200      	movs	r2, #0
 800ecb0:	682b      	ldr	r3, [r5, #0]
 800ecb2:	6020      	str	r0, [r4, #0]
 800ecb4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800ecb8:	4298      	cmp	r0, r3
 800ecba:	d100      	bne.n	800ecbe <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x52>
 800ecbc:	bd70      	pop	{r4, r5, r6, pc}
 800ecbe:	f840 2b04 	str.w	r2, [r0], #4
 800ecc2:	e7f9      	b.n	800ecb8 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x4c>
 800ecc4:	20001950 	andcs	r1, r0, r0, asr r9
 800ecc8:	20001978 	andcs	r1, r0, r8, ror r9
 800eccc:	20001974 	andcs	r1, r0, r4, ror r9

0800ecd0 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 800ecd0:	b570      	push	{r4, r5, r6, lr}
 800ecd2:	460e      	mov	r6, r1
 800ecd4:	461c      	mov	r4, r3
 800ecd6:	4615      	mov	r5, r2
 800ecd8:	f7ff ff42 	bl	800eb60 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800ecdc:	2305      	movs	r3, #5
 800ecde:	4907      	ldr	r1, [pc, #28]	; (800ecfc <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 800ece0:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800ece4:	61cb      	str	r3, [r1, #28]
 800ece6:	9b05      	ldr	r3, [sp, #20]
 800ece8:	e9c1 5402 	strd	r5, r4, [r1, #8]
 800ecec:	604b      	str	r3, [r1, #4]
 800ecee:	9b04      	ldr	r3, [sp, #16]
 800ecf0:	610b      	str	r3, [r1, #16]
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	614b      	str	r3, [r1, #20]
 800ecf6:	9b06      	ldr	r3, [sp, #24]
 800ecf8:	618b      	str	r3, [r1, #24]
 800ecfa:	bd70      	pop	{r4, r5, r6, pc}
 800ecfc:	20001950 	andcs	r1, r0, r0, asr r9

0800ed00 <PixelPatterns::Wheel(unsigned char)>:
 800ed00:	43cb      	mvns	r3, r1
 800ed02:	b2db      	uxtb	r3, r3
 800ed04:	2b54      	cmp	r3, #84	; 0x54
 800ed06:	d809      	bhi.n	800ed1c <PixelPatterns::Wheel(unsigned char)+0x1c>
 800ed08:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 800ed0c:	b2db      	uxtb	r3, r3
 800ed0e:	1e5a      	subs	r2, r3, #1
 800ed10:	4258      	negs	r0, r3
 800ed12:	b2d2      	uxtb	r2, r2
 800ed14:	b2c0      	uxtb	r0, r0
 800ed16:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800ed1a:	4770      	bx	lr
 800ed1c:	2ba9      	cmp	r3, #169	; 0xa9
 800ed1e:	d809      	bhi.n	800ed34 <PixelPatterns::Wheel(unsigned char)+0x34>
 800ed20:	f1c1 01aa 	rsb	r1, r1, #170	; 0xaa
 800ed24:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ed28:	b2c9      	uxtb	r1, r1
 800ed2a:	43c8      	mvns	r0, r1
 800ed2c:	b2c0      	uxtb	r0, r0
 800ed2e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 800ed32:	4770      	bx	lr
 800ed34:	f1c1 0155 	rsb	r1, r1, #85	; 0x55
 800ed38:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ed3c:	b2c9      	uxtb	r1, r1
 800ed3e:	0208      	lsls	r0, r1, #8
 800ed40:	f480 407f 	eor.w	r0, r0, #65280	; 0xff00
 800ed44:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800ed48:	4770      	bx	lr
	...

0800ed4c <PixelPatterns::Increment(unsigned int)>:
 800ed4c:	4a0d      	ldr	r2, [pc, #52]	; (800ed84 <PixelPatterns::Increment(unsigned int)+0x38>)
 800ed4e:	b510      	push	{r4, lr}
 800ed50:	014c      	lsls	r4, r1, #5
 800ed52:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 800ed56:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
 800ed5a:	b930      	cbnz	r0, 800ed6a <PixelPatterns::Increment(unsigned int)+0x1e>
 800ed5c:	690a      	ldr	r2, [r1, #16]
 800ed5e:	3301      	adds	r3, #1
 800ed60:	4293      	cmp	r3, r2
 800ed62:	bf18      	it	ne
 800ed64:	4618      	movne	r0, r3
 800ed66:	6148      	str	r0, [r1, #20]
 800ed68:	bd10      	pop	{r4, pc}
 800ed6a:	b92b      	cbnz	r3, 800ed78 <PixelPatterns::Increment(unsigned int)+0x2c>
 800ed6c:	4422      	add	r2, r4
 800ed6e:	6913      	ldr	r3, [r2, #16]
 800ed70:	3b01      	subs	r3, #1
 800ed72:	b29b      	uxth	r3, r3
 800ed74:	6153      	str	r3, [r2, #20]
 800ed76:	e7f7      	b.n	800ed68 <PixelPatterns::Increment(unsigned int)+0x1c>
 800ed78:	3b01      	subs	r3, #1
 800ed7a:	614b      	str	r3, [r1, #20]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d1f3      	bne.n	800ed68 <PixelPatterns::Increment(unsigned int)+0x1c>
 800ed80:	e7f4      	b.n	800ed6c <PixelPatterns::Increment(unsigned int)+0x20>
 800ed82:	bf00      	nop
 800ed84:	20001950 	andcs	r1, r0, r0, asr r9

0800ed88 <PixelPatterns::RainbowCycleUpdate(unsigned int)>:
 800ed88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed8c:	4604      	mov	r4, r0
 800ed8e:	460d      	mov	r5, r1
 800ed90:	2700      	movs	r7, #0
 800ed92:	4b10      	ldr	r3, [pc, #64]	; (800edd4 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x4c>)
 800ed94:	f8df 8040 	ldr.w	r8, [pc, #64]	; 800edd8 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x50>
 800ed98:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ed9c:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800eda0:	f8d8 2000 	ldr.w	r2, [r8]
 800eda4:	b2be      	uxth	r6, r7
 800eda6:	42b2      	cmp	r2, r6
 800eda8:	f107 0701 	add.w	r7, r7, #1
 800edac:	d805      	bhi.n	800edba <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x32>
 800edae:	4629      	mov	r1, r5
 800edb0:	4620      	mov	r0, r4
 800edb2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edb6:	f7ff bfc9 	b.w	800ed4c <PixelPatterns::Increment(unsigned int)>
 800edba:	0233      	lsls	r3, r6, #8
 800edbc:	fbb3 f3f2 	udiv	r3, r3, r2
 800edc0:	444b      	add	r3, r9
 800edc2:	b2d9      	uxtb	r1, r3
 800edc4:	4620      	mov	r0, r4
 800edc6:	f7ff ff9b 	bl	800ed00 <PixelPatterns::Wheel(unsigned char)>
 800edca:	4601      	mov	r1, r0
 800edcc:	4630      	mov	r0, r6
 800edce:	f7ff fea1 	bl	800eb14 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 800edd2:	e7e5      	b.n	800eda0 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x18>
 800edd4:	20001950 	andcs	r1, r0, r0, asr r9
 800edd8:	20001978 	andcs	r1, r0, r8, ror r9

0800eddc <PixelPatterns::TheaterChaseUpdate(unsigned int)>:
 800eddc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ede0:	4605      	mov	r5, r0
 800ede2:	460c      	mov	r4, r1
 800ede4:	f04f 0b00 	mov.w	fp, #0
 800ede8:	4b11      	ldr	r3, [pc, #68]	; (800ee30 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x54>)
 800edea:	4e12      	ldr	r6, [pc, #72]	; (800ee34 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x58>)
 800edec:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800edf0:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800edf4:	f8df a040 	ldr.w	sl, [pc, #64]	; 800ee38 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x5c>
 800edf8:	e9d3 7802 	ldrd	r7, r8, [r3, #8]
 800edfc:	6833      	ldr	r3, [r6, #0]
 800edfe:	fa1f f08b 	uxth.w	r0, fp
 800ee02:	4283      	cmp	r3, r0
 800ee04:	d805      	bhi.n	800ee12 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x36>
 800ee06:	4621      	mov	r1, r4
 800ee08:	4628      	mov	r0, r5
 800ee0a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee0e:	f7ff bf9d 	b.w	800ed4c <PixelPatterns::Increment(unsigned int)>
 800ee12:	eb09 0300 	add.w	r3, r9, r0
 800ee16:	fb0a f303 	mul.w	r3, sl, r3
 800ee1a:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 800ee1e:	bf94      	ite	ls
 800ee20:	4639      	movls	r1, r7
 800ee22:	4641      	movhi	r1, r8
 800ee24:	f7ff fe76 	bl	800eb14 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 800ee28:	f10b 0b01 	add.w	fp, fp, #1
 800ee2c:	e7e6      	b.n	800edfc <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x20>
 800ee2e:	bf00      	nop
 800ee30:	20001950 	andcs	r1, r0, r0, asr r9
 800ee34:	20001978 	andcs	r1, r0, r8, ror r9
 800ee38:	aaaaaaab 	bge	6ab98ec <__stack_size+0x6ab78ec>

0800ee3c <PixelPatterns::ColourWipeUpdate(unsigned int)>:
 800ee3c:	b538      	push	{r3, r4, r5, lr}
 800ee3e:	4605      	mov	r5, r0
 800ee40:	460c      	mov	r4, r1
 800ee42:	4b06      	ldr	r3, [pc, #24]	; (800ee5c <PixelPatterns::ColourWipeUpdate(unsigned int)+0x20>)
 800ee44:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ee48:	6899      	ldr	r1, [r3, #8]
 800ee4a:	6958      	ldr	r0, [r3, #20]
 800ee4c:	f7ff fe62 	bl	800eb14 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 800ee50:	4621      	mov	r1, r4
 800ee52:	4628      	mov	r0, r5
 800ee54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee58:	f7ff bf78 	b.w	800ed4c <PixelPatterns::Increment(unsigned int)>
 800ee5c:	20001950 	andcs	r1, r0, r0, asr r9

0800ee60 <PixelPatterns::ScannerUpdate(unsigned int)>:
 800ee60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee64:	460d      	mov	r5, r1
 800ee66:	f04f 0900 	mov.w	r9, #0
 800ee6a:	4a27      	ldr	r2, [pc, #156]	; (800ef08 <PixelPatterns::ScannerUpdate(unsigned int)+0xa8>)
 800ee6c:	b085      	sub	sp, #20
 800ee6e:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 800ee72:	e9d2 7604 	ldrd	r7, r6, [r2, #16]
 800ee76:	f8d2 b008 	ldr.w	fp, [r2, #8]
 800ee7a:	00b3      	lsls	r3, r6, #2
 800ee7c:	f8df a08c 	ldr.w	sl, [pc, #140]	; 800ef0c <PixelPatterns::ScannerUpdate(unsigned int)+0xac>
 800ee80:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800ef10 <PixelPatterns::ScannerUpdate(unsigned int)+0xb0>
 800ee84:	9002      	str	r0, [sp, #8]
 800ee86:	9301      	str	r3, [sp, #4]
 800ee88:	1bbf      	subs	r7, r7, r6
 800ee8a:	f8da 1000 	ldr.w	r1, [sl]
 800ee8e:	fa1f f489 	uxth.w	r4, r9
 800ee92:	42a1      	cmp	r1, r4
 800ee94:	d806      	bhi.n	800eea4 <PixelPatterns::ScannerUpdate(unsigned int)+0x44>
 800ee96:	4629      	mov	r1, r5
 800ee98:	9802      	ldr	r0, [sp, #8]
 800ee9a:	b005      	add	sp, #20
 800ee9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eea0:	f7ff bf54 	b.w	800ed4c <PixelPatterns::Increment(unsigned int)>
 800eea4:	42a6      	cmp	r6, r4
 800eea6:	d10b      	bne.n	800eec0 <PixelPatterns::ScannerUpdate(unsigned int)+0x60>
 800eea8:	4659      	mov	r1, fp
 800eeaa:	4630      	mov	r0, r6
 800eeac:	f7ff fe32 	bl	800eb14 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 800eeb0:	f8d8 1000 	ldr.w	r1, [r8]
 800eeb4:	9b01      	ldr	r3, [sp, #4]
 800eeb6:	f841 b003 	str.w	fp, [r1, r3]
 800eeba:	f109 0901 	add.w	r9, r9, #1
 800eebe:	e7e4      	b.n	800ee8a <PixelPatterns::ScannerUpdate(unsigned int)+0x2a>
 800eec0:	42a7      	cmp	r7, r4
 800eec2:	d108      	bne.n	800eed6 <PixelPatterns::ScannerUpdate(unsigned int)+0x76>
 800eec4:	4659      	mov	r1, fp
 800eec6:	4638      	mov	r0, r7
 800eec8:	f7ff fe24 	bl	800eb14 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 800eecc:	f8d8 1000 	ldr.w	r1, [r8]
 800eed0:	f841 b024 	str.w	fp, [r1, r4, lsl #2]
 800eed4:	e7f1      	b.n	800eeba <PixelPatterns::ScannerUpdate(unsigned int)+0x5a>
 800eed6:	f8d8 1000 	ldr.w	r1, [r8]
 800eeda:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 800eede:	f3c0 2146 	ubfx	r1, r0, #9, #7
 800eee2:	f3c0 4c46 	ubfx	ip, r0, #17, #7
 800eee6:	0209      	lsls	r1, r1, #8
 800eee8:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800eeec:	f3c0 0046 	ubfx	r0, r0, #1, #7
 800eef0:	4301      	orrs	r1, r0
 800eef2:	4620      	mov	r0, r4
 800eef4:	9103      	str	r1, [sp, #12]
 800eef6:	f7ff fe0d 	bl	800eb14 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 800eefa:	f8d8 0000 	ldr.w	r0, [r8]
 800eefe:	9903      	ldr	r1, [sp, #12]
 800ef00:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 800ef04:	e7d9      	b.n	800eeba <PixelPatterns::ScannerUpdate(unsigned int)+0x5a>
 800ef06:	bf00      	nop
 800ef08:	20001950 	andcs	r1, r0, r0, asr r9
 800ef0c:	20001978 	andcs	r1, r0, r8, ror r9
 800ef10:	20001974 	andcs	r1, r0, r4, ror r9

0800ef14 <PixelPatterns::FadeUpdate(unsigned int)>:
 800ef14:	4a21      	ldr	r2, [pc, #132]	; (800ef9c <PixelPatterns::FadeUpdate(unsigned int)+0x88>)
 800ef16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef1a:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 800ef1e:	4605      	mov	r5, r0
 800ef20:	e9d2 0704 	ldrd	r0, r7, [r2, #16]
 800ef24:	460c      	mov	r4, r1
 800ef26:	e9d2 1302 	ldrd	r1, r3, [r2, #8]
 800ef2a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ef2e:	437a      	muls	r2, r7
 800ef30:	1bc6      	subs	r6, r0, r7
 800ef32:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 800ef36:	fb06 220c 	mla	r2, r6, ip, r2
 800ef3a:	fbb2 f2f0 	udiv	r2, r2, r0
 800ef3e:	0212      	lsls	r2, r2, #8
 800ef40:	fa1f fc82 	uxth.w	ip, r2
 800ef44:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800ef48:	437a      	muls	r2, r7
 800ef4a:	b2db      	uxtb	r3, r3
 800ef4c:	437b      	muls	r3, r7
 800ef4e:	f3c1 4e07 	ubfx	lr, r1, #16, #8
 800ef52:	fb06 220e 	mla	r2, r6, lr, r2
 800ef56:	b2c9      	uxtb	r1, r1
 800ef58:	fb06 3301 	mla	r3, r6, r1, r3
 800ef5c:	fbb2 f2f0 	udiv	r2, r2, r0
 800ef60:	fbb3 f3f0 	udiv	r3, r3, r0
 800ef64:	2700      	movs	r7, #0
 800ef66:	0412      	lsls	r2, r2, #16
 800ef68:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800ef6c:	ea4c 0202 	orr.w	r2, ip, r2
 800ef70:	b2db      	uxtb	r3, r3
 800ef72:	f8df 802c 	ldr.w	r8, [pc, #44]	; 800efa0 <PixelPatterns::FadeUpdate(unsigned int)+0x8c>
 800ef76:	ea42 0603 	orr.w	r6, r2, r3
 800ef7a:	f8d8 3000 	ldr.w	r3, [r8]
 800ef7e:	429f      	cmp	r7, r3
 800ef80:	d305      	bcc.n	800ef8e <PixelPatterns::FadeUpdate(unsigned int)+0x7a>
 800ef82:	4621      	mov	r1, r4
 800ef84:	4628      	mov	r0, r5
 800ef86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef8a:	f7ff bedf 	b.w	800ed4c <PixelPatterns::Increment(unsigned int)>
 800ef8e:	4638      	mov	r0, r7
 800ef90:	4631      	mov	r1, r6
 800ef92:	f7ff fdbf 	bl	800eb14 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 800ef96:	3701      	adds	r7, #1
 800ef98:	e7ef      	b.n	800ef7a <PixelPatterns::FadeUpdate(unsigned int)+0x66>
 800ef9a:	bf00      	nop
 800ef9c:	20001950 	andcs	r1, r0, r0, asr r9
 800efa0:	20001978 	andcs	r1, r0, r8, ror r9

0800efa4 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>:
 800efa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efa6:	4b12      	ldr	r3, [pc, #72]	; (800eff0 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x4c>)
 800efa8:	014e      	lsls	r6, r1, #5
 800efaa:	599c      	ldr	r4, [r3, r6]
 800efac:	eb03 1541 	add.w	r5, r3, r1, lsl #5
 800efb0:	686f      	ldr	r7, [r5, #4]
 800efb2:	1b14      	subs	r4, r2, r4
 800efb4:	42bc      	cmp	r4, r7
 800efb6:	d319      	bcc.n	800efec <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 800efb8:	519a      	str	r2, [r3, r6]
 800efba:	69eb      	ldr	r3, [r5, #28]
 800efbc:	3b01      	subs	r3, #1
 800efbe:	2b04      	cmp	r3, #4
 800efc0:	d814      	bhi.n	800efec <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 800efc2:	e8df f003 	tbb	[pc, r3]
 800efc6:	0d0a0703 	stceq	7, cr0, [sl, #-12]
 800efca:	f7ff0010 			; <UNDEFINED> instruction: 0xf7ff0010
 800efce:	fedc 2001 	cdp2	0, 13, cr2, cr12, cr1, {0}
 800efd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efd4:	f7ff ff02 	bl	800eddc <PixelPatterns::TheaterChaseUpdate(unsigned int)>
 800efd8:	e7fa      	b.n	800efd0 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800efda:	f7ff ff2f 	bl	800ee3c <PixelPatterns::ColourWipeUpdate(unsigned int)>
 800efde:	e7f7      	b.n	800efd0 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800efe0:	f7ff ff3e 	bl	800ee60 <PixelPatterns::ScannerUpdate(unsigned int)>
 800efe4:	e7f4      	b.n	800efd0 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800efe6:	f7ff ff95 	bl	800ef14 <PixelPatterns::FadeUpdate(unsigned int)>
 800efea:	e7f1      	b.n	800efd0 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800efec:	2000      	movs	r0, #0
 800efee:	e7f0      	b.n	800efd2 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2e>
 800eff0:	20001950 	andcs	r1, r0, r0, asr r9

0800eff4 <PixelPatterns::Run()>:
 800eff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eff8:	4606      	mov	r6, r0
 800effa:	f006 f807 	bl	801500c <gd32_spi_dma_tx_is_active()>
 800effe:	4604      	mov	r4, r0
 800f000:	b9c0      	cbnz	r0, 800f034 <PixelPatterns::Run()+0x40>
 800f002:	4605      	mov	r5, r0
 800f004:	4b0c      	ldr	r3, [pc, #48]	; (800f038 <PixelPatterns::Run()+0x44>)
 800f006:	4f0d      	ldr	r7, [pc, #52]	; (800f03c <PixelPatterns::Run()+0x48>)
 800f008:	f8d3 8000 	ldr.w	r8, [r3]
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	b2e9      	uxtb	r1, r5
 800f010:	428b      	cmp	r3, r1
 800f012:	f105 0501 	add.w	r5, r5, #1
 800f016:	d806      	bhi.n	800f026 <PixelPatterns::Run()+0x32>
 800f018:	b164      	cbz	r4, 800f034 <PixelPatterns::Run()+0x40>
 800f01a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f01e:	4b08      	ldr	r3, [pc, #32]	; (800f040 <PixelPatterns::Run()+0x4c>)
 800f020:	6818      	ldr	r0, [r3, #0]
 800f022:	f000 bdb1 	b.w	800fb88 <WS28xx::Update()>
 800f026:	4642      	mov	r2, r8
 800f028:	4630      	mov	r0, r6
 800f02a:	f7ff ffbb 	bl	800efa4 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>
 800f02e:	4304      	orrs	r4, r0
 800f030:	b2e4      	uxtb	r4, r4
 800f032:	e7eb      	b.n	800f00c <PixelPatterns::Run()+0x18>
 800f034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f038:	20009dd4 	ldrdcs	r9, [r0], -r4
 800f03c:	20001970 	andcs	r1, r0, r0, ror r9
 800f040:	2000197c 	andcs	r1, r0, ip, ror r9

0800f044 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>:
 800f044:	b570      	push	{r4, r5, r6, lr}
 800f046:	6984      	ldr	r4, [r0, #24]
 800f048:	f89d e010 	ldrb.w	lr, [sp, #16]
 800f04c:	f814 c003 	ldrb.w	ip, [r4, r3]
 800f050:	7d43      	ldrb	r3, [r0, #21]
 800f052:	5ca2      	ldrb	r2, [r4, r2]
 800f054:	f814 e00e 	ldrb.w	lr, [r4, lr]
 800f058:	b993      	cbnz	r3, 800f080 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x3c>
 800f05a:	6803      	ldr	r3, [r0, #0]
 800f05c:	f1a3 040b 	sub.w	r4, r3, #11
 800f060:	2c01      	cmp	r4, #1
 800f062:	d93e      	bls.n	800f0e2 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x9e>
 800f064:	b9db      	cbnz	r3, 800f09e <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x5a>
 800f066:	6a03      	ldr	r3, [r0, #32]
 800f068:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f06c:	545a      	strb	r2, [r3, r1]
 800f06e:	6a03      	ldr	r3, [r0, #32]
 800f070:	440b      	add	r3, r1
 800f072:	f883 c001 	strb.w	ip, [r3, #1]
 800f076:	6a03      	ldr	r3, [r0, #32]
 800f078:	440b      	add	r3, r1
 800f07a:	f883 e002 	strb.w	lr, [r3, #2]
 800f07e:	bd70      	pop	{r4, r5, r6, pc}
 800f080:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f084:	00cb      	lsls	r3, r1, #3
 800f086:	6881      	ldr	r1, [r0, #8]
 800f088:	2905      	cmp	r1, #5
 800f08a:	f200 80ff 	bhi.w	800f28c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x248>
 800f08e:	e8df f011 	tbh	[pc, r1, lsl #1]
 800f092:	028400fd 	addeq	r0, r4, #253	; 0xfd
 800f096:	038b030b 	orreq	r0, fp, #738197504	; 0x2c000000
 800f09a:	01c1003c 	biceq	r0, r1, ip, lsr r0
 800f09e:	ea6f 039e 	mvn.w	r3, lr, lsr #2
 800f0a2:	ea6f 151c 	mvn.w	r5, ip, lsr #4
 800f0a6:	f082 06c0 	eor.w	r6, r2, #192	; 0xc0
 800f0aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f0ae:	ea43 1396 	orr.w	r3, r3, r6, lsr #6
 800f0b2:	f005 050c 	and.w	r5, r5, #12
 800f0b6:	6a04      	ldr	r4, [r0, #32]
 800f0b8:	432b      	orrs	r3, r5
 800f0ba:	3101      	adds	r1, #1
 800f0bc:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800f0c0:	f804 3021 	strb.w	r3, [r4, r1, lsl #2]
 800f0c4:	6a03      	ldr	r3, [r0, #32]
 800f0c6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800f0ca:	f883 e001 	strb.w	lr, [r3, #1]
 800f0ce:	6a03      	ldr	r3, [r0, #32]
 800f0d0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800f0d4:	f883 c002 	strb.w	ip, [r3, #2]
 800f0d8:	6a03      	ldr	r3, [r0, #32]
 800f0da:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800f0de:	70da      	strb	r2, [r3, #3]
 800f0e0:	bd70      	pop	{r4, r5, r6, pc}
 800f0e2:	6a03      	ldr	r3, [r0, #32]
 800f0e4:	7c84      	ldrb	r4, [r0, #18]
 800f0e6:	3101      	adds	r1, #1
 800f0e8:	f803 4021 	strb.w	r4, [r3, r1, lsl #2]
 800f0ec:	6a03      	ldr	r3, [r0, #32]
 800f0ee:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800f0f2:	705a      	strb	r2, [r3, #1]
 800f0f4:	6a03      	ldr	r3, [r0, #32]
 800f0f6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800f0fa:	f883 c002 	strb.w	ip, [r3, #2]
 800f0fe:	6a03      	ldr	r3, [r0, #32]
 800f100:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800f104:	f883 e003 	strb.w	lr, [r3, #3]
 800f108:	bd70      	pop	{r4, r5, r6, pc}
 800f10a:	7c01      	ldrb	r1, [r0, #16]
 800f10c:	7c44      	ldrb	r4, [r0, #17]
 800f10e:	6a05      	ldr	r5, [r0, #32]
 800f110:	1c5e      	adds	r6, r3, #1
 800f112:	f01e 0f80 	tst.w	lr, #128	; 0x80
 800f116:	bf0c      	ite	eq
 800f118:	55a9      	strbeq	r1, [r5, r6]
 800f11a:	55ac      	strbne	r4, [r5, r6]
 800f11c:	6a05      	ldr	r5, [r0, #32]
 800f11e:	1c9e      	adds	r6, r3, #2
 800f120:	f01e 0f40 	tst.w	lr, #64	; 0x40
 800f124:	bf0c      	ite	eq
 800f126:	55a9      	strbeq	r1, [r5, r6]
 800f128:	55ac      	strbne	r4, [r5, r6]
 800f12a:	6a05      	ldr	r5, [r0, #32]
 800f12c:	1cde      	adds	r6, r3, #3
 800f12e:	f01e 0f20 	tst.w	lr, #32
 800f132:	bf0c      	ite	eq
 800f134:	55a9      	strbeq	r1, [r5, r6]
 800f136:	55ac      	strbne	r4, [r5, r6]
 800f138:	6a05      	ldr	r5, [r0, #32]
 800f13a:	1d1e      	adds	r6, r3, #4
 800f13c:	f01e 0f10 	tst.w	lr, #16
 800f140:	bf0c      	ite	eq
 800f142:	55a9      	strbeq	r1, [r5, r6]
 800f144:	55ac      	strbne	r4, [r5, r6]
 800f146:	6a05      	ldr	r5, [r0, #32]
 800f148:	1d5e      	adds	r6, r3, #5
 800f14a:	f01e 0f08 	tst.w	lr, #8
 800f14e:	bf0c      	ite	eq
 800f150:	55a9      	strbeq	r1, [r5, r6]
 800f152:	55ac      	strbne	r4, [r5, r6]
 800f154:	6a05      	ldr	r5, [r0, #32]
 800f156:	1d9e      	adds	r6, r3, #6
 800f158:	f01e 0f04 	tst.w	lr, #4
 800f15c:	bf0c      	ite	eq
 800f15e:	55a9      	strbeq	r1, [r5, r6]
 800f160:	55ac      	strbne	r4, [r5, r6]
 800f162:	6a05      	ldr	r5, [r0, #32]
 800f164:	1dde      	adds	r6, r3, #7
 800f166:	f01e 0f02 	tst.w	lr, #2
 800f16a:	bf0c      	ite	eq
 800f16c:	55a9      	strbeq	r1, [r5, r6]
 800f16e:	55ac      	strbne	r4, [r5, r6]
 800f170:	f01e 0f01 	tst.w	lr, #1
 800f174:	bf14      	ite	ne
 800f176:	6a01      	ldrne	r1, [r0, #32]
 800f178:	6a04      	ldreq	r4, [r0, #32]
 800f17a:	f103 0508 	add.w	r5, r3, #8
 800f17e:	bf14      	ite	ne
 800f180:	554c      	strbne	r4, [r1, r5]
 800f182:	5561      	strbeq	r1, [r4, r5]
 800f184:	7c01      	ldrb	r1, [r0, #16]
 800f186:	7c44      	ldrb	r4, [r0, #17]
 800f188:	6a06      	ldr	r6, [r0, #32]
 800f18a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f18e:	f103 0509 	add.w	r5, r3, #9
 800f192:	bf0c      	ite	eq
 800f194:	5571      	strbeq	r1, [r6, r5]
 800f196:	5574      	strbne	r4, [r6, r5]
 800f198:	6a06      	ldr	r6, [r0, #32]
 800f19a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f19e:	f103 050a 	add.w	r5, r3, #10
 800f1a2:	bf0c      	ite	eq
 800f1a4:	5571      	strbeq	r1, [r6, r5]
 800f1a6:	5574      	strbne	r4, [r6, r5]
 800f1a8:	6a06      	ldr	r6, [r0, #32]
 800f1aa:	f012 0f20 	tst.w	r2, #32
 800f1ae:	f103 050b 	add.w	r5, r3, #11
 800f1b2:	bf0c      	ite	eq
 800f1b4:	5571      	strbeq	r1, [r6, r5]
 800f1b6:	5574      	strbne	r4, [r6, r5]
 800f1b8:	6a06      	ldr	r6, [r0, #32]
 800f1ba:	f012 0f10 	tst.w	r2, #16
 800f1be:	f103 050c 	add.w	r5, r3, #12
 800f1c2:	bf0c      	ite	eq
 800f1c4:	5571      	strbeq	r1, [r6, r5]
 800f1c6:	5574      	strbne	r4, [r6, r5]
 800f1c8:	6a06      	ldr	r6, [r0, #32]
 800f1ca:	f012 0f08 	tst.w	r2, #8
 800f1ce:	f103 050d 	add.w	r5, r3, #13
 800f1d2:	bf0c      	ite	eq
 800f1d4:	5571      	strbeq	r1, [r6, r5]
 800f1d6:	5574      	strbne	r4, [r6, r5]
 800f1d8:	6a06      	ldr	r6, [r0, #32]
 800f1da:	f012 0f04 	tst.w	r2, #4
 800f1de:	f103 050e 	add.w	r5, r3, #14
 800f1e2:	bf0c      	ite	eq
 800f1e4:	5571      	strbeq	r1, [r6, r5]
 800f1e6:	5574      	strbne	r4, [r6, r5]
 800f1e8:	6a06      	ldr	r6, [r0, #32]
 800f1ea:	f012 0f02 	tst.w	r2, #2
 800f1ee:	f103 050f 	add.w	r5, r3, #15
 800f1f2:	bf0c      	ite	eq
 800f1f4:	5571      	strbeq	r1, [r6, r5]
 800f1f6:	5574      	strbne	r4, [r6, r5]
 800f1f8:	f012 0f01 	tst.w	r2, #1
 800f1fc:	6a02      	ldr	r2, [r0, #32]
 800f1fe:	f103 0510 	add.w	r5, r3, #16
 800f202:	bf14      	ite	ne
 800f204:	5554      	strbne	r4, [r2, r5]
 800f206:	5551      	strbeq	r1, [r2, r5]
 800f208:	6a05      	ldr	r5, [r0, #32]
 800f20a:	7c02      	ldrb	r2, [r0, #16]
 800f20c:	7c41      	ldrb	r1, [r0, #17]
 800f20e:	f103 0411 	add.w	r4, r3, #17
 800f212:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800f216:	bf0c      	ite	eq
 800f218:	552a      	strbeq	r2, [r5, r4]
 800f21a:	5529      	strbne	r1, [r5, r4]
 800f21c:	6a05      	ldr	r5, [r0, #32]
 800f21e:	f103 0412 	add.w	r4, r3, #18
 800f222:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800f226:	bf0c      	ite	eq
 800f228:	552a      	strbeq	r2, [r5, r4]
 800f22a:	5529      	strbne	r1, [r5, r4]
 800f22c:	6a05      	ldr	r5, [r0, #32]
 800f22e:	f103 0413 	add.w	r4, r3, #19
 800f232:	f01c 0f20 	tst.w	ip, #32
 800f236:	bf0c      	ite	eq
 800f238:	552a      	strbeq	r2, [r5, r4]
 800f23a:	5529      	strbne	r1, [r5, r4]
 800f23c:	6a05      	ldr	r5, [r0, #32]
 800f23e:	f103 0414 	add.w	r4, r3, #20
 800f242:	f01c 0f10 	tst.w	ip, #16
 800f246:	bf0c      	ite	eq
 800f248:	552a      	strbeq	r2, [r5, r4]
 800f24a:	5529      	strbne	r1, [r5, r4]
 800f24c:	6a05      	ldr	r5, [r0, #32]
 800f24e:	f103 0415 	add.w	r4, r3, #21
 800f252:	f01c 0f08 	tst.w	ip, #8
 800f256:	bf0c      	ite	eq
 800f258:	552a      	strbeq	r2, [r5, r4]
 800f25a:	5529      	strbne	r1, [r5, r4]
 800f25c:	6a05      	ldr	r5, [r0, #32]
 800f25e:	f103 0416 	add.w	r4, r3, #22
 800f262:	f01c 0f04 	tst.w	ip, #4
 800f266:	bf0c      	ite	eq
 800f268:	552a      	strbeq	r2, [r5, r4]
 800f26a:	5529      	strbne	r1, [r5, r4]
 800f26c:	6a05      	ldr	r5, [r0, #32]
 800f26e:	f103 0417 	add.w	r4, r3, #23
 800f272:	f01c 0f02 	tst.w	ip, #2
 800f276:	bf0c      	ite	eq
 800f278:	552a      	strbeq	r2, [r5, r4]
 800f27a:	5529      	strbne	r1, [r5, r4]
 800f27c:	3318      	adds	r3, #24
 800f27e:	f01c 0f01 	tst.w	ip, #1
 800f282:	f000 830d 	beq.w	800f8a0 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x85c>
 800f286:	6a02      	ldr	r2, [r0, #32]
 800f288:	54d1      	strb	r1, [r2, r3]
 800f28a:	bd70      	pop	{r4, r5, r6, pc}
 800f28c:	7c01      	ldrb	r1, [r0, #16]
 800f28e:	7c44      	ldrb	r4, [r0, #17]
 800f290:	6a05      	ldr	r5, [r0, #32]
 800f292:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f296:	f103 0601 	add.w	r6, r3, #1
 800f29a:	bf14      	ite	ne
 800f29c:	55ac      	strbne	r4, [r5, r6]
 800f29e:	55a9      	strbeq	r1, [r5, r6]
 800f2a0:	6a05      	ldr	r5, [r0, #32]
 800f2a2:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f2a6:	f103 0602 	add.w	r6, r3, #2
 800f2aa:	bf14      	ite	ne
 800f2ac:	55ac      	strbne	r4, [r5, r6]
 800f2ae:	55a9      	strbeq	r1, [r5, r6]
 800f2b0:	6a05      	ldr	r5, [r0, #32]
 800f2b2:	f012 0f20 	tst.w	r2, #32
 800f2b6:	f103 0603 	add.w	r6, r3, #3
 800f2ba:	bf14      	ite	ne
 800f2bc:	55ac      	strbne	r4, [r5, r6]
 800f2be:	55a9      	strbeq	r1, [r5, r6]
 800f2c0:	6a05      	ldr	r5, [r0, #32]
 800f2c2:	f012 0f10 	tst.w	r2, #16
 800f2c6:	f103 0604 	add.w	r6, r3, #4
 800f2ca:	bf14      	ite	ne
 800f2cc:	55ac      	strbne	r4, [r5, r6]
 800f2ce:	55a9      	strbeq	r1, [r5, r6]
 800f2d0:	6a05      	ldr	r5, [r0, #32]
 800f2d2:	f012 0f08 	tst.w	r2, #8
 800f2d6:	f103 0605 	add.w	r6, r3, #5
 800f2da:	bf14      	ite	ne
 800f2dc:	55ac      	strbne	r4, [r5, r6]
 800f2de:	55a9      	strbeq	r1, [r5, r6]
 800f2e0:	6a05      	ldr	r5, [r0, #32]
 800f2e2:	f012 0f04 	tst.w	r2, #4
 800f2e6:	f103 0606 	add.w	r6, r3, #6
 800f2ea:	bf14      	ite	ne
 800f2ec:	55ac      	strbne	r4, [r5, r6]
 800f2ee:	55a9      	strbeq	r1, [r5, r6]
 800f2f0:	6a05      	ldr	r5, [r0, #32]
 800f2f2:	f012 0f02 	tst.w	r2, #2
 800f2f6:	f103 0607 	add.w	r6, r3, #7
 800f2fa:	bf14      	ite	ne
 800f2fc:	55ac      	strbne	r4, [r5, r6]
 800f2fe:	55a9      	strbeq	r1, [r5, r6]
 800f300:	f012 0f01 	tst.w	r2, #1
 800f304:	6a02      	ldr	r2, [r0, #32]
 800f306:	f103 0508 	add.w	r5, r3, #8
 800f30a:	bf14      	ite	ne
 800f30c:	5554      	strbne	r4, [r2, r5]
 800f30e:	5551      	strbeq	r1, [r2, r5]
 800f310:	7c41      	ldrb	r1, [r0, #17]
 800f312:	7c02      	ldrb	r2, [r0, #16]
 800f314:	6a05      	ldr	r5, [r0, #32]
 800f316:	f103 0409 	add.w	r4, r3, #9
 800f31a:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800f31e:	bf0c      	ite	eq
 800f320:	552a      	strbeq	r2, [r5, r4]
 800f322:	5529      	strbne	r1, [r5, r4]
 800f324:	6a05      	ldr	r5, [r0, #32]
 800f326:	f103 040a 	add.w	r4, r3, #10
 800f32a:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800f32e:	bf0c      	ite	eq
 800f330:	552a      	strbeq	r2, [r5, r4]
 800f332:	5529      	strbne	r1, [r5, r4]
 800f334:	6a05      	ldr	r5, [r0, #32]
 800f336:	f103 040b 	add.w	r4, r3, #11
 800f33a:	f01c 0f20 	tst.w	ip, #32
 800f33e:	bf0c      	ite	eq
 800f340:	552a      	strbeq	r2, [r5, r4]
 800f342:	5529      	strbne	r1, [r5, r4]
 800f344:	6a05      	ldr	r5, [r0, #32]
 800f346:	f103 040c 	add.w	r4, r3, #12
 800f34a:	f01c 0f10 	tst.w	ip, #16
 800f34e:	bf0c      	ite	eq
 800f350:	552a      	strbeq	r2, [r5, r4]
 800f352:	5529      	strbne	r1, [r5, r4]
 800f354:	6a05      	ldr	r5, [r0, #32]
 800f356:	f103 040d 	add.w	r4, r3, #13
 800f35a:	f01c 0f08 	tst.w	ip, #8
 800f35e:	bf0c      	ite	eq
 800f360:	552a      	strbeq	r2, [r5, r4]
 800f362:	5529      	strbne	r1, [r5, r4]
 800f364:	6a05      	ldr	r5, [r0, #32]
 800f366:	f103 040e 	add.w	r4, r3, #14
 800f36a:	f01c 0f04 	tst.w	ip, #4
 800f36e:	bf0c      	ite	eq
 800f370:	552a      	strbeq	r2, [r5, r4]
 800f372:	5529      	strbne	r1, [r5, r4]
 800f374:	6a05      	ldr	r5, [r0, #32]
 800f376:	f103 040f 	add.w	r4, r3, #15
 800f37a:	f01c 0f02 	tst.w	ip, #2
 800f37e:	bf0c      	ite	eq
 800f380:	552a      	strbeq	r2, [r5, r4]
 800f382:	5529      	strbne	r1, [r5, r4]
 800f384:	f01c 0f01 	tst.w	ip, #1
 800f388:	bf14      	ite	ne
 800f38a:	6a02      	ldrne	r2, [r0, #32]
 800f38c:	6a01      	ldreq	r1, [r0, #32]
 800f38e:	f103 0410 	add.w	r4, r3, #16
 800f392:	bf14      	ite	ne
 800f394:	5511      	strbne	r1, [r2, r4]
 800f396:	550a      	strbeq	r2, [r1, r4]
 800f398:	6a05      	ldr	r5, [r0, #32]
 800f39a:	7c02      	ldrb	r2, [r0, #16]
 800f39c:	7c41      	ldrb	r1, [r0, #17]
 800f39e:	f103 0411 	add.w	r4, r3, #17
 800f3a2:	f01e 0f80 	tst.w	lr, #128	; 0x80
 800f3a6:	bf0c      	ite	eq
 800f3a8:	552a      	strbeq	r2, [r5, r4]
 800f3aa:	5529      	strbne	r1, [r5, r4]
 800f3ac:	6a05      	ldr	r5, [r0, #32]
 800f3ae:	f103 0412 	add.w	r4, r3, #18
 800f3b2:	f01e 0f40 	tst.w	lr, #64	; 0x40
 800f3b6:	bf0c      	ite	eq
 800f3b8:	552a      	strbeq	r2, [r5, r4]
 800f3ba:	5529      	strbne	r1, [r5, r4]
 800f3bc:	6a05      	ldr	r5, [r0, #32]
 800f3be:	f103 0413 	add.w	r4, r3, #19
 800f3c2:	f01e 0f20 	tst.w	lr, #32
 800f3c6:	bf0c      	ite	eq
 800f3c8:	552a      	strbeq	r2, [r5, r4]
 800f3ca:	5529      	strbne	r1, [r5, r4]
 800f3cc:	6a05      	ldr	r5, [r0, #32]
 800f3ce:	f103 0414 	add.w	r4, r3, #20
 800f3d2:	f01e 0f10 	tst.w	lr, #16
 800f3d6:	bf0c      	ite	eq
 800f3d8:	552a      	strbeq	r2, [r5, r4]
 800f3da:	5529      	strbne	r1, [r5, r4]
 800f3dc:	6a05      	ldr	r5, [r0, #32]
 800f3de:	f103 0415 	add.w	r4, r3, #21
 800f3e2:	f01e 0f08 	tst.w	lr, #8
 800f3e6:	bf0c      	ite	eq
 800f3e8:	552a      	strbeq	r2, [r5, r4]
 800f3ea:	5529      	strbne	r1, [r5, r4]
 800f3ec:	6a05      	ldr	r5, [r0, #32]
 800f3ee:	f103 0416 	add.w	r4, r3, #22
 800f3f2:	f01e 0f04 	tst.w	lr, #4
 800f3f6:	bf0c      	ite	eq
 800f3f8:	552a      	strbeq	r2, [r5, r4]
 800f3fa:	5529      	strbne	r1, [r5, r4]
 800f3fc:	6a05      	ldr	r5, [r0, #32]
 800f3fe:	f103 0417 	add.w	r4, r3, #23
 800f402:	f01e 0f02 	tst.w	lr, #2
 800f406:	bf0c      	ite	eq
 800f408:	552a      	strbeq	r2, [r5, r4]
 800f40a:	5529      	strbne	r1, [r5, r4]
 800f40c:	3318      	adds	r3, #24
 800f40e:	f01e 0f01 	tst.w	lr, #1
 800f412:	e736      	b.n	800f282 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x23e>
 800f414:	7c01      	ldrb	r1, [r0, #16]
 800f416:	7c44      	ldrb	r4, [r0, #17]
 800f418:	6a05      	ldr	r5, [r0, #32]
 800f41a:	1c5e      	adds	r6, r3, #1
 800f41c:	f01e 0f80 	tst.w	lr, #128	; 0x80
 800f420:	bf0c      	ite	eq
 800f422:	55a9      	strbeq	r1, [r5, r6]
 800f424:	55ac      	strbne	r4, [r5, r6]
 800f426:	6a05      	ldr	r5, [r0, #32]
 800f428:	1c9e      	adds	r6, r3, #2
 800f42a:	f01e 0f40 	tst.w	lr, #64	; 0x40
 800f42e:	bf0c      	ite	eq
 800f430:	55a9      	strbeq	r1, [r5, r6]
 800f432:	55ac      	strbne	r4, [r5, r6]
 800f434:	6a05      	ldr	r5, [r0, #32]
 800f436:	1cde      	adds	r6, r3, #3
 800f438:	f01e 0f20 	tst.w	lr, #32
 800f43c:	bf0c      	ite	eq
 800f43e:	55a9      	strbeq	r1, [r5, r6]
 800f440:	55ac      	strbne	r4, [r5, r6]
 800f442:	6a05      	ldr	r5, [r0, #32]
 800f444:	1d1e      	adds	r6, r3, #4
 800f446:	f01e 0f10 	tst.w	lr, #16
 800f44a:	bf0c      	ite	eq
 800f44c:	55a9      	strbeq	r1, [r5, r6]
 800f44e:	55ac      	strbne	r4, [r5, r6]
 800f450:	6a05      	ldr	r5, [r0, #32]
 800f452:	1d5e      	adds	r6, r3, #5
 800f454:	f01e 0f08 	tst.w	lr, #8
 800f458:	bf0c      	ite	eq
 800f45a:	55a9      	strbeq	r1, [r5, r6]
 800f45c:	55ac      	strbne	r4, [r5, r6]
 800f45e:	6a05      	ldr	r5, [r0, #32]
 800f460:	1d9e      	adds	r6, r3, #6
 800f462:	f01e 0f04 	tst.w	lr, #4
 800f466:	bf0c      	ite	eq
 800f468:	55a9      	strbeq	r1, [r5, r6]
 800f46a:	55ac      	strbne	r4, [r5, r6]
 800f46c:	6a05      	ldr	r5, [r0, #32]
 800f46e:	1dde      	adds	r6, r3, #7
 800f470:	f01e 0f02 	tst.w	lr, #2
 800f474:	bf0c      	ite	eq
 800f476:	55a9      	strbeq	r1, [r5, r6]
 800f478:	55ac      	strbne	r4, [r5, r6]
 800f47a:	f01e 0f01 	tst.w	lr, #1
 800f47e:	bf14      	ite	ne
 800f480:	6a01      	ldrne	r1, [r0, #32]
 800f482:	6a04      	ldreq	r4, [r0, #32]
 800f484:	f103 0508 	add.w	r5, r3, #8
 800f488:	bf14      	ite	ne
 800f48a:	554c      	strbne	r4, [r1, r5]
 800f48c:	5561      	strbeq	r1, [r4, r5]
 800f48e:	7c01      	ldrb	r1, [r0, #16]
 800f490:	7c44      	ldrb	r4, [r0, #17]
 800f492:	6a06      	ldr	r6, [r0, #32]
 800f494:	f103 0509 	add.w	r5, r3, #9
 800f498:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800f49c:	bf0c      	ite	eq
 800f49e:	5571      	strbeq	r1, [r6, r5]
 800f4a0:	5574      	strbne	r4, [r6, r5]
 800f4a2:	6a06      	ldr	r6, [r0, #32]
 800f4a4:	f103 050a 	add.w	r5, r3, #10
 800f4a8:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800f4ac:	bf0c      	ite	eq
 800f4ae:	5571      	strbeq	r1, [r6, r5]
 800f4b0:	5574      	strbne	r4, [r6, r5]
 800f4b2:	6a06      	ldr	r6, [r0, #32]
 800f4b4:	f103 050b 	add.w	r5, r3, #11
 800f4b8:	f01c 0f20 	tst.w	ip, #32
 800f4bc:	bf0c      	ite	eq
 800f4be:	5571      	strbeq	r1, [r6, r5]
 800f4c0:	5574      	strbne	r4, [r6, r5]
 800f4c2:	6a06      	ldr	r6, [r0, #32]
 800f4c4:	f103 050c 	add.w	r5, r3, #12
 800f4c8:	f01c 0f10 	tst.w	ip, #16
 800f4cc:	bf0c      	ite	eq
 800f4ce:	5571      	strbeq	r1, [r6, r5]
 800f4d0:	5574      	strbne	r4, [r6, r5]
 800f4d2:	6a06      	ldr	r6, [r0, #32]
 800f4d4:	f103 050d 	add.w	r5, r3, #13
 800f4d8:	f01c 0f08 	tst.w	ip, #8
 800f4dc:	bf0c      	ite	eq
 800f4de:	5571      	strbeq	r1, [r6, r5]
 800f4e0:	5574      	strbne	r4, [r6, r5]
 800f4e2:	6a06      	ldr	r6, [r0, #32]
 800f4e4:	f103 050e 	add.w	r5, r3, #14
 800f4e8:	f01c 0f04 	tst.w	ip, #4
 800f4ec:	bf0c      	ite	eq
 800f4ee:	5571      	strbeq	r1, [r6, r5]
 800f4f0:	5574      	strbne	r4, [r6, r5]
 800f4f2:	6a06      	ldr	r6, [r0, #32]
 800f4f4:	f103 050f 	add.w	r5, r3, #15
 800f4f8:	f01c 0f02 	tst.w	ip, #2
 800f4fc:	bf0c      	ite	eq
 800f4fe:	5571      	strbeq	r1, [r6, r5]
 800f500:	5574      	strbne	r4, [r6, r5]
 800f502:	f103 0510 	add.w	r5, r3, #16
 800f506:	f01c 0f01 	tst.w	ip, #1
 800f50a:	bf15      	itete	ne
 800f50c:	6a01      	ldrne	r1, [r0, #32]
 800f50e:	6a04      	ldreq	r4, [r0, #32]
 800f510:	554c      	strbne	r4, [r1, r5]
 800f512:	5561      	strbeq	r1, [r4, r5]
 800f514:	6a06      	ldr	r6, [r0, #32]
 800f516:	7c01      	ldrb	r1, [r0, #16]
 800f518:	7c44      	ldrb	r4, [r0, #17]
 800f51a:	f103 0511 	add.w	r5, r3, #17
 800f51e:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f522:	bf0c      	ite	eq
 800f524:	5571      	strbeq	r1, [r6, r5]
 800f526:	5574      	strbne	r4, [r6, r5]
 800f528:	6a06      	ldr	r6, [r0, #32]
 800f52a:	f103 0512 	add.w	r5, r3, #18
 800f52e:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f532:	bf0c      	ite	eq
 800f534:	5571      	strbeq	r1, [r6, r5]
 800f536:	5574      	strbne	r4, [r6, r5]
 800f538:	6a06      	ldr	r6, [r0, #32]
 800f53a:	f103 0513 	add.w	r5, r3, #19
 800f53e:	f012 0f20 	tst.w	r2, #32
 800f542:	bf0c      	ite	eq
 800f544:	5571      	strbeq	r1, [r6, r5]
 800f546:	5574      	strbne	r4, [r6, r5]
 800f548:	6a06      	ldr	r6, [r0, #32]
 800f54a:	f103 0514 	add.w	r5, r3, #20
 800f54e:	f012 0f10 	tst.w	r2, #16
 800f552:	bf0c      	ite	eq
 800f554:	5571      	strbeq	r1, [r6, r5]
 800f556:	5574      	strbne	r4, [r6, r5]
 800f558:	6a06      	ldr	r6, [r0, #32]
 800f55a:	f103 0515 	add.w	r5, r3, #21
 800f55e:	f012 0f08 	tst.w	r2, #8
 800f562:	bf0c      	ite	eq
 800f564:	5571      	strbeq	r1, [r6, r5]
 800f566:	5574      	strbne	r4, [r6, r5]
 800f568:	6a06      	ldr	r6, [r0, #32]
 800f56a:	f103 0516 	add.w	r5, r3, #22
 800f56e:	f012 0f04 	tst.w	r2, #4
 800f572:	bf0c      	ite	eq
 800f574:	5571      	strbeq	r1, [r6, r5]
 800f576:	5574      	strbne	r4, [r6, r5]
 800f578:	6a06      	ldr	r6, [r0, #32]
 800f57a:	f012 0f02 	tst.w	r2, #2
 800f57e:	f103 0517 	add.w	r5, r3, #23
 800f582:	bf0c      	ite	eq
 800f584:	5571      	strbeq	r1, [r6, r5]
 800f586:	5574      	strbne	r4, [r6, r5]
 800f588:	f012 0f01 	tst.w	r2, #1
 800f58c:	f103 0318 	add.w	r3, r3, #24
 800f590:	6a02      	ldr	r2, [r0, #32]
 800f592:	f43f ae79 	beq.w	800f288 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x244>
 800f596:	54d4      	strb	r4, [r2, r3]
 800f598:	bd70      	pop	{r4, r5, r6, pc}
 800f59a:	7c01      	ldrb	r1, [r0, #16]
 800f59c:	7c44      	ldrb	r4, [r0, #17]
 800f59e:	6a05      	ldr	r5, [r0, #32]
 800f5a0:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f5a4:	f103 0601 	add.w	r6, r3, #1
 800f5a8:	bf14      	ite	ne
 800f5aa:	55ac      	strbne	r4, [r5, r6]
 800f5ac:	55a9      	strbeq	r1, [r5, r6]
 800f5ae:	6a05      	ldr	r5, [r0, #32]
 800f5b0:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f5b4:	f103 0602 	add.w	r6, r3, #2
 800f5b8:	bf14      	ite	ne
 800f5ba:	55ac      	strbne	r4, [r5, r6]
 800f5bc:	55a9      	strbeq	r1, [r5, r6]
 800f5be:	6a05      	ldr	r5, [r0, #32]
 800f5c0:	f012 0f20 	tst.w	r2, #32
 800f5c4:	f103 0603 	add.w	r6, r3, #3
 800f5c8:	bf14      	ite	ne
 800f5ca:	55ac      	strbne	r4, [r5, r6]
 800f5cc:	55a9      	strbeq	r1, [r5, r6]
 800f5ce:	6a05      	ldr	r5, [r0, #32]
 800f5d0:	f012 0f10 	tst.w	r2, #16
 800f5d4:	f103 0604 	add.w	r6, r3, #4
 800f5d8:	bf14      	ite	ne
 800f5da:	55ac      	strbne	r4, [r5, r6]
 800f5dc:	55a9      	strbeq	r1, [r5, r6]
 800f5de:	6a05      	ldr	r5, [r0, #32]
 800f5e0:	f012 0f08 	tst.w	r2, #8
 800f5e4:	f103 0605 	add.w	r6, r3, #5
 800f5e8:	bf14      	ite	ne
 800f5ea:	55ac      	strbne	r4, [r5, r6]
 800f5ec:	55a9      	strbeq	r1, [r5, r6]
 800f5ee:	6a05      	ldr	r5, [r0, #32]
 800f5f0:	f012 0f04 	tst.w	r2, #4
 800f5f4:	f103 0606 	add.w	r6, r3, #6
 800f5f8:	bf14      	ite	ne
 800f5fa:	55ac      	strbne	r4, [r5, r6]
 800f5fc:	55a9      	strbeq	r1, [r5, r6]
 800f5fe:	6a05      	ldr	r5, [r0, #32]
 800f600:	f012 0f02 	tst.w	r2, #2
 800f604:	f103 0607 	add.w	r6, r3, #7
 800f608:	bf14      	ite	ne
 800f60a:	55ac      	strbne	r4, [r5, r6]
 800f60c:	55a9      	strbeq	r1, [r5, r6]
 800f60e:	f012 0f01 	tst.w	r2, #1
 800f612:	6a02      	ldr	r2, [r0, #32]
 800f614:	f103 0508 	add.w	r5, r3, #8
 800f618:	bf14      	ite	ne
 800f61a:	5554      	strbne	r4, [r2, r5]
 800f61c:	5551      	strbeq	r1, [r2, r5]
 800f61e:	7c41      	ldrb	r1, [r0, #17]
 800f620:	7c02      	ldrb	r2, [r0, #16]
 800f622:	6a05      	ldr	r5, [r0, #32]
 800f624:	f103 0409 	add.w	r4, r3, #9
 800f628:	f01e 0f80 	tst.w	lr, #128	; 0x80
 800f62c:	bf0c      	ite	eq
 800f62e:	552a      	strbeq	r2, [r5, r4]
 800f630:	5529      	strbne	r1, [r5, r4]
 800f632:	6a05      	ldr	r5, [r0, #32]
 800f634:	f103 040a 	add.w	r4, r3, #10
 800f638:	f01e 0f40 	tst.w	lr, #64	; 0x40
 800f63c:	bf0c      	ite	eq
 800f63e:	552a      	strbeq	r2, [r5, r4]
 800f640:	5529      	strbne	r1, [r5, r4]
 800f642:	6a05      	ldr	r5, [r0, #32]
 800f644:	f103 040b 	add.w	r4, r3, #11
 800f648:	f01e 0f20 	tst.w	lr, #32
 800f64c:	bf0c      	ite	eq
 800f64e:	552a      	strbeq	r2, [r5, r4]
 800f650:	5529      	strbne	r1, [r5, r4]
 800f652:	6a05      	ldr	r5, [r0, #32]
 800f654:	f103 040c 	add.w	r4, r3, #12
 800f658:	f01e 0f10 	tst.w	lr, #16
 800f65c:	bf0c      	ite	eq
 800f65e:	552a      	strbeq	r2, [r5, r4]
 800f660:	5529      	strbne	r1, [r5, r4]
 800f662:	6a05      	ldr	r5, [r0, #32]
 800f664:	f103 040d 	add.w	r4, r3, #13
 800f668:	f01e 0f08 	tst.w	lr, #8
 800f66c:	bf0c      	ite	eq
 800f66e:	552a      	strbeq	r2, [r5, r4]
 800f670:	5529      	strbne	r1, [r5, r4]
 800f672:	6a05      	ldr	r5, [r0, #32]
 800f674:	f103 040e 	add.w	r4, r3, #14
 800f678:	f01e 0f04 	tst.w	lr, #4
 800f67c:	bf0c      	ite	eq
 800f67e:	552a      	strbeq	r2, [r5, r4]
 800f680:	5529      	strbne	r1, [r5, r4]
 800f682:	6a05      	ldr	r5, [r0, #32]
 800f684:	f103 040f 	add.w	r4, r3, #15
 800f688:	f01e 0f02 	tst.w	lr, #2
 800f68c:	bf0c      	ite	eq
 800f68e:	552a      	strbeq	r2, [r5, r4]
 800f690:	5529      	strbne	r1, [r5, r4]
 800f692:	f01e 0f01 	tst.w	lr, #1
 800f696:	bf14      	ite	ne
 800f698:	6a02      	ldrne	r2, [r0, #32]
 800f69a:	6a01      	ldreq	r1, [r0, #32]
 800f69c:	f103 0410 	add.w	r4, r3, #16
 800f6a0:	bf14      	ite	ne
 800f6a2:	5511      	strbne	r1, [r2, r4]
 800f6a4:	550a      	strbeq	r2, [r1, r4]
 800f6a6:	e5af      	b.n	800f208 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x1c4>
 800f6a8:	7c01      	ldrb	r1, [r0, #16]
 800f6aa:	7c44      	ldrb	r4, [r0, #17]
 800f6ac:	6a05      	ldr	r5, [r0, #32]
 800f6ae:	1c5e      	adds	r6, r3, #1
 800f6b0:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800f6b4:	bf0c      	ite	eq
 800f6b6:	55a9      	strbeq	r1, [r5, r6]
 800f6b8:	55ac      	strbne	r4, [r5, r6]
 800f6ba:	6a05      	ldr	r5, [r0, #32]
 800f6bc:	1c9e      	adds	r6, r3, #2
 800f6be:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800f6c2:	bf0c      	ite	eq
 800f6c4:	55a9      	strbeq	r1, [r5, r6]
 800f6c6:	55ac      	strbne	r4, [r5, r6]
 800f6c8:	6a05      	ldr	r5, [r0, #32]
 800f6ca:	1cde      	adds	r6, r3, #3
 800f6cc:	f01c 0f20 	tst.w	ip, #32
 800f6d0:	bf0c      	ite	eq
 800f6d2:	55a9      	strbeq	r1, [r5, r6]
 800f6d4:	55ac      	strbne	r4, [r5, r6]
 800f6d6:	6a05      	ldr	r5, [r0, #32]
 800f6d8:	1d1e      	adds	r6, r3, #4
 800f6da:	f01c 0f10 	tst.w	ip, #16
 800f6de:	bf0c      	ite	eq
 800f6e0:	55a9      	strbeq	r1, [r5, r6]
 800f6e2:	55ac      	strbne	r4, [r5, r6]
 800f6e4:	6a05      	ldr	r5, [r0, #32]
 800f6e6:	1d5e      	adds	r6, r3, #5
 800f6e8:	f01c 0f08 	tst.w	ip, #8
 800f6ec:	bf0c      	ite	eq
 800f6ee:	55a9      	strbeq	r1, [r5, r6]
 800f6f0:	55ac      	strbne	r4, [r5, r6]
 800f6f2:	6a05      	ldr	r5, [r0, #32]
 800f6f4:	1d9e      	adds	r6, r3, #6
 800f6f6:	f01c 0f04 	tst.w	ip, #4
 800f6fa:	bf0c      	ite	eq
 800f6fc:	55a9      	strbeq	r1, [r5, r6]
 800f6fe:	55ac      	strbne	r4, [r5, r6]
 800f700:	6a05      	ldr	r5, [r0, #32]
 800f702:	1dde      	adds	r6, r3, #7
 800f704:	f01c 0f02 	tst.w	ip, #2
 800f708:	bf0c      	ite	eq
 800f70a:	55a9      	strbeq	r1, [r5, r6]
 800f70c:	55ac      	strbne	r4, [r5, r6]
 800f70e:	f01c 0f01 	tst.w	ip, #1
 800f712:	bf14      	ite	ne
 800f714:	6a01      	ldrne	r1, [r0, #32]
 800f716:	6a04      	ldreq	r4, [r0, #32]
 800f718:	f103 0508 	add.w	r5, r3, #8
 800f71c:	bf14      	ite	ne
 800f71e:	554c      	strbne	r4, [r1, r5]
 800f720:	5561      	strbeq	r1, [r4, r5]
 800f722:	7c01      	ldrb	r1, [r0, #16]
 800f724:	7c44      	ldrb	r4, [r0, #17]
 800f726:	6a06      	ldr	r6, [r0, #32]
 800f728:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f72c:	f103 0509 	add.w	r5, r3, #9
 800f730:	bf0c      	ite	eq
 800f732:	5571      	strbeq	r1, [r6, r5]
 800f734:	5574      	strbne	r4, [r6, r5]
 800f736:	6a06      	ldr	r6, [r0, #32]
 800f738:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f73c:	f103 050a 	add.w	r5, r3, #10
 800f740:	bf0c      	ite	eq
 800f742:	5571      	strbeq	r1, [r6, r5]
 800f744:	5574      	strbne	r4, [r6, r5]
 800f746:	6a06      	ldr	r6, [r0, #32]
 800f748:	f012 0f20 	tst.w	r2, #32
 800f74c:	f103 050b 	add.w	r5, r3, #11
 800f750:	bf0c      	ite	eq
 800f752:	5571      	strbeq	r1, [r6, r5]
 800f754:	5574      	strbne	r4, [r6, r5]
 800f756:	6a06      	ldr	r6, [r0, #32]
 800f758:	f012 0f10 	tst.w	r2, #16
 800f75c:	f103 050c 	add.w	r5, r3, #12
 800f760:	bf0c      	ite	eq
 800f762:	5571      	strbeq	r1, [r6, r5]
 800f764:	5574      	strbne	r4, [r6, r5]
 800f766:	6a06      	ldr	r6, [r0, #32]
 800f768:	f012 0f08 	tst.w	r2, #8
 800f76c:	f103 050d 	add.w	r5, r3, #13
 800f770:	bf0c      	ite	eq
 800f772:	5571      	strbeq	r1, [r6, r5]
 800f774:	5574      	strbne	r4, [r6, r5]
 800f776:	6a06      	ldr	r6, [r0, #32]
 800f778:	f012 0f04 	tst.w	r2, #4
 800f77c:	f103 050e 	add.w	r5, r3, #14
 800f780:	bf0c      	ite	eq
 800f782:	5571      	strbeq	r1, [r6, r5]
 800f784:	5574      	strbne	r4, [r6, r5]
 800f786:	6a06      	ldr	r6, [r0, #32]
 800f788:	f012 0f02 	tst.w	r2, #2
 800f78c:	f103 050f 	add.w	r5, r3, #15
 800f790:	bf0c      	ite	eq
 800f792:	5571      	strbeq	r1, [r6, r5]
 800f794:	5574      	strbne	r4, [r6, r5]
 800f796:	f012 0f01 	tst.w	r2, #1
 800f79a:	6a02      	ldr	r2, [r0, #32]
 800f79c:	f103 0510 	add.w	r5, r3, #16
 800f7a0:	bf14      	ite	ne
 800f7a2:	5554      	strbne	r4, [r2, r5]
 800f7a4:	5551      	strbeq	r1, [r2, r5]
 800f7a6:	e5f7      	b.n	800f398 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x354>
 800f7a8:	7c01      	ldrb	r1, [r0, #16]
 800f7aa:	7c44      	ldrb	r4, [r0, #17]
 800f7ac:	6a05      	ldr	r5, [r0, #32]
 800f7ae:	1c5e      	adds	r6, r3, #1
 800f7b0:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800f7b4:	bf0c      	ite	eq
 800f7b6:	55a9      	strbeq	r1, [r5, r6]
 800f7b8:	55ac      	strbne	r4, [r5, r6]
 800f7ba:	6a05      	ldr	r5, [r0, #32]
 800f7bc:	1c9e      	adds	r6, r3, #2
 800f7be:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800f7c2:	bf0c      	ite	eq
 800f7c4:	55a9      	strbeq	r1, [r5, r6]
 800f7c6:	55ac      	strbne	r4, [r5, r6]
 800f7c8:	6a05      	ldr	r5, [r0, #32]
 800f7ca:	1cde      	adds	r6, r3, #3
 800f7cc:	f01c 0f20 	tst.w	ip, #32
 800f7d0:	bf0c      	ite	eq
 800f7d2:	55a9      	strbeq	r1, [r5, r6]
 800f7d4:	55ac      	strbne	r4, [r5, r6]
 800f7d6:	6a05      	ldr	r5, [r0, #32]
 800f7d8:	1d1e      	adds	r6, r3, #4
 800f7da:	f01c 0f10 	tst.w	ip, #16
 800f7de:	bf0c      	ite	eq
 800f7e0:	55a9      	strbeq	r1, [r5, r6]
 800f7e2:	55ac      	strbne	r4, [r5, r6]
 800f7e4:	6a05      	ldr	r5, [r0, #32]
 800f7e6:	1d5e      	adds	r6, r3, #5
 800f7e8:	f01c 0f08 	tst.w	ip, #8
 800f7ec:	bf0c      	ite	eq
 800f7ee:	55a9      	strbeq	r1, [r5, r6]
 800f7f0:	55ac      	strbne	r4, [r5, r6]
 800f7f2:	6a05      	ldr	r5, [r0, #32]
 800f7f4:	1d9e      	adds	r6, r3, #6
 800f7f6:	f01c 0f04 	tst.w	ip, #4
 800f7fa:	bf0c      	ite	eq
 800f7fc:	55a9      	strbeq	r1, [r5, r6]
 800f7fe:	55ac      	strbne	r4, [r5, r6]
 800f800:	6a05      	ldr	r5, [r0, #32]
 800f802:	1dde      	adds	r6, r3, #7
 800f804:	f01c 0f02 	tst.w	ip, #2
 800f808:	bf0c      	ite	eq
 800f80a:	55a9      	strbeq	r1, [r5, r6]
 800f80c:	55ac      	strbne	r4, [r5, r6]
 800f80e:	f01c 0f01 	tst.w	ip, #1
 800f812:	bf14      	ite	ne
 800f814:	6a01      	ldrne	r1, [r0, #32]
 800f816:	6a04      	ldreq	r4, [r0, #32]
 800f818:	f103 0508 	add.w	r5, r3, #8
 800f81c:	bf14      	ite	ne
 800f81e:	554c      	strbne	r4, [r1, r5]
 800f820:	5561      	strbeq	r1, [r4, r5]
 800f822:	7c01      	ldrb	r1, [r0, #16]
 800f824:	7c44      	ldrb	r4, [r0, #17]
 800f826:	6a06      	ldr	r6, [r0, #32]
 800f828:	f103 0509 	add.w	r5, r3, #9
 800f82c:	f01e 0f80 	tst.w	lr, #128	; 0x80
 800f830:	bf0c      	ite	eq
 800f832:	5571      	strbeq	r1, [r6, r5]
 800f834:	5574      	strbne	r4, [r6, r5]
 800f836:	6a06      	ldr	r6, [r0, #32]
 800f838:	f103 050a 	add.w	r5, r3, #10
 800f83c:	f01e 0f40 	tst.w	lr, #64	; 0x40
 800f840:	bf0c      	ite	eq
 800f842:	5571      	strbeq	r1, [r6, r5]
 800f844:	5574      	strbne	r4, [r6, r5]
 800f846:	6a06      	ldr	r6, [r0, #32]
 800f848:	f103 050b 	add.w	r5, r3, #11
 800f84c:	f01e 0f20 	tst.w	lr, #32
 800f850:	bf0c      	ite	eq
 800f852:	5571      	strbeq	r1, [r6, r5]
 800f854:	5574      	strbne	r4, [r6, r5]
 800f856:	6a06      	ldr	r6, [r0, #32]
 800f858:	f103 050c 	add.w	r5, r3, #12
 800f85c:	f01e 0f10 	tst.w	lr, #16
 800f860:	bf0c      	ite	eq
 800f862:	5571      	strbeq	r1, [r6, r5]
 800f864:	5574      	strbne	r4, [r6, r5]
 800f866:	6a06      	ldr	r6, [r0, #32]
 800f868:	f103 050d 	add.w	r5, r3, #13
 800f86c:	f01e 0f08 	tst.w	lr, #8
 800f870:	bf0c      	ite	eq
 800f872:	5571      	strbeq	r1, [r6, r5]
 800f874:	5574      	strbne	r4, [r6, r5]
 800f876:	6a06      	ldr	r6, [r0, #32]
 800f878:	f103 050e 	add.w	r5, r3, #14
 800f87c:	f01e 0f04 	tst.w	lr, #4
 800f880:	bf0c      	ite	eq
 800f882:	5571      	strbeq	r1, [r6, r5]
 800f884:	5574      	strbne	r4, [r6, r5]
 800f886:	6a06      	ldr	r6, [r0, #32]
 800f888:	f103 050f 	add.w	r5, r3, #15
 800f88c:	f01e 0f02 	tst.w	lr, #2
 800f890:	bf0c      	ite	eq
 800f892:	5571      	strbeq	r1, [r6, r5]
 800f894:	5574      	strbne	r4, [r6, r5]
 800f896:	f103 0510 	add.w	r5, r3, #16
 800f89a:	f01e 0f01 	tst.w	lr, #1
 800f89e:	e634      	b.n	800f50a <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x4c6>
 800f8a0:	6a01      	ldr	r1, [r0, #32]
 800f8a2:	54ca      	strb	r2, [r1, r3]
 800f8a4:	bd70      	pop	{r4, r5, r6, pc}
 800f8a6:	bf00      	nop

0800f8a8 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>:
 800f8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8aa:	6984      	ldr	r4, [r0, #24]
 800f8ac:	f89d 6014 	ldrb.w	r6, [sp, #20]
 800f8b0:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800f8b4:	f814 c006 	ldrb.w	ip, [r4, r6]
 800f8b8:	56e6      	ldrsb	r6, [r4, r3]
 800f8ba:	0149      	lsls	r1, r1, #5
 800f8bc:	f814 e002 	ldrb.w	lr, [r4, r2]
 800f8c0:	5ce3      	ldrb	r3, [r4, r3]
 800f8c2:	5d62      	ldrb	r2, [r4, r5]
 800f8c4:	2e00      	cmp	r6, #0
 800f8c6:	7c05      	ldrb	r5, [r0, #16]
 800f8c8:	7c44      	ldrb	r4, [r0, #17]
 800f8ca:	6a06      	ldr	r6, [r0, #32]
 800f8cc:	f101 0701 	add.w	r7, r1, #1
 800f8d0:	bfac      	ite	ge
 800f8d2:	55f5      	strbge	r5, [r6, r7]
 800f8d4:	55f4      	strblt	r4, [r6, r7]
 800f8d6:	6a07      	ldr	r7, [r0, #32]
 800f8d8:	1c8e      	adds	r6, r1, #2
 800f8da:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f8de:	bf0c      	ite	eq
 800f8e0:	55bd      	strbeq	r5, [r7, r6]
 800f8e2:	55bc      	strbne	r4, [r7, r6]
 800f8e4:	6a07      	ldr	r7, [r0, #32]
 800f8e6:	1cce      	adds	r6, r1, #3
 800f8e8:	f013 0f20 	tst.w	r3, #32
 800f8ec:	bf0c      	ite	eq
 800f8ee:	55bd      	strbeq	r5, [r7, r6]
 800f8f0:	55bc      	strbne	r4, [r7, r6]
 800f8f2:	6a07      	ldr	r7, [r0, #32]
 800f8f4:	1d0e      	adds	r6, r1, #4
 800f8f6:	f013 0f10 	tst.w	r3, #16
 800f8fa:	bf0c      	ite	eq
 800f8fc:	55bd      	strbeq	r5, [r7, r6]
 800f8fe:	55bc      	strbne	r4, [r7, r6]
 800f900:	6a07      	ldr	r7, [r0, #32]
 800f902:	1d4e      	adds	r6, r1, #5
 800f904:	f013 0f08 	tst.w	r3, #8
 800f908:	bf0c      	ite	eq
 800f90a:	55bd      	strbeq	r5, [r7, r6]
 800f90c:	55bc      	strbne	r4, [r7, r6]
 800f90e:	6a07      	ldr	r7, [r0, #32]
 800f910:	1d8e      	adds	r6, r1, #6
 800f912:	f013 0f04 	tst.w	r3, #4
 800f916:	bf0c      	ite	eq
 800f918:	55bd      	strbeq	r5, [r7, r6]
 800f91a:	55bc      	strbne	r4, [r7, r6]
 800f91c:	6a07      	ldr	r7, [r0, #32]
 800f91e:	1dce      	adds	r6, r1, #7
 800f920:	f013 0f02 	tst.w	r3, #2
 800f924:	bf0c      	ite	eq
 800f926:	55bd      	strbeq	r5, [r7, r6]
 800f928:	55bc      	strbne	r4, [r7, r6]
 800f92a:	f013 0f01 	tst.w	r3, #1
 800f92e:	6a03      	ldr	r3, [r0, #32]
 800f930:	f101 0608 	add.w	r6, r1, #8
 800f934:	bf14      	ite	ne
 800f936:	559c      	strbne	r4, [r3, r6]
 800f938:	559d      	strbeq	r5, [r3, r6]
 800f93a:	7c03      	ldrb	r3, [r0, #16]
 800f93c:	7c44      	ldrb	r4, [r0, #17]
 800f93e:	6a05      	ldr	r5, [r0, #32]
 800f940:	f101 0609 	add.w	r6, r1, #9
 800f944:	f01e 0f80 	tst.w	lr, #128	; 0x80
 800f948:	bf0c      	ite	eq
 800f94a:	55ab      	strbeq	r3, [r5, r6]
 800f94c:	55ac      	strbne	r4, [r5, r6]
 800f94e:	6a05      	ldr	r5, [r0, #32]
 800f950:	f101 060a 	add.w	r6, r1, #10
 800f954:	f01e 0f40 	tst.w	lr, #64	; 0x40
 800f958:	bf0c      	ite	eq
 800f95a:	55ab      	strbeq	r3, [r5, r6]
 800f95c:	55ac      	strbne	r4, [r5, r6]
 800f95e:	6a05      	ldr	r5, [r0, #32]
 800f960:	f101 060b 	add.w	r6, r1, #11
 800f964:	f01e 0f20 	tst.w	lr, #32
 800f968:	bf0c      	ite	eq
 800f96a:	55ab      	strbeq	r3, [r5, r6]
 800f96c:	55ac      	strbne	r4, [r5, r6]
 800f96e:	6a05      	ldr	r5, [r0, #32]
 800f970:	f101 060c 	add.w	r6, r1, #12
 800f974:	f01e 0f10 	tst.w	lr, #16
 800f978:	bf0c      	ite	eq
 800f97a:	55ab      	strbeq	r3, [r5, r6]
 800f97c:	55ac      	strbne	r4, [r5, r6]
 800f97e:	6a05      	ldr	r5, [r0, #32]
 800f980:	f101 060d 	add.w	r6, r1, #13
 800f984:	f01e 0f08 	tst.w	lr, #8
 800f988:	bf0c      	ite	eq
 800f98a:	55ab      	strbeq	r3, [r5, r6]
 800f98c:	55ac      	strbne	r4, [r5, r6]
 800f98e:	6a05      	ldr	r5, [r0, #32]
 800f990:	f101 060e 	add.w	r6, r1, #14
 800f994:	f01e 0f04 	tst.w	lr, #4
 800f998:	bf0c      	ite	eq
 800f99a:	55ab      	strbeq	r3, [r5, r6]
 800f99c:	55ac      	strbne	r4, [r5, r6]
 800f99e:	6a05      	ldr	r5, [r0, #32]
 800f9a0:	f101 060f 	add.w	r6, r1, #15
 800f9a4:	f01e 0f02 	tst.w	lr, #2
 800f9a8:	bf0c      	ite	eq
 800f9aa:	55ab      	strbeq	r3, [r5, r6]
 800f9ac:	55ac      	strbne	r4, [r5, r6]
 800f9ae:	f01e 0f01 	tst.w	lr, #1
 800f9b2:	bf14      	ite	ne
 800f9b4:	6a03      	ldrne	r3, [r0, #32]
 800f9b6:	6a04      	ldreq	r4, [r0, #32]
 800f9b8:	f101 0510 	add.w	r5, r1, #16
 800f9bc:	bf14      	ite	ne
 800f9be:	555c      	strbne	r4, [r3, r5]
 800f9c0:	5563      	strbeq	r3, [r4, r5]
 800f9c2:	7c03      	ldrb	r3, [r0, #16]
 800f9c4:	7c44      	ldrb	r4, [r0, #17]
 800f9c6:	6a06      	ldr	r6, [r0, #32]
 800f9c8:	f101 0511 	add.w	r5, r1, #17
 800f9cc:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800f9d0:	bf0c      	ite	eq
 800f9d2:	5573      	strbeq	r3, [r6, r5]
 800f9d4:	5574      	strbne	r4, [r6, r5]
 800f9d6:	6a06      	ldr	r6, [r0, #32]
 800f9d8:	f101 0512 	add.w	r5, r1, #18
 800f9dc:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800f9e0:	bf0c      	ite	eq
 800f9e2:	5573      	strbeq	r3, [r6, r5]
 800f9e4:	5574      	strbne	r4, [r6, r5]
 800f9e6:	6a06      	ldr	r6, [r0, #32]
 800f9e8:	f101 0513 	add.w	r5, r1, #19
 800f9ec:	f01c 0f20 	tst.w	ip, #32
 800f9f0:	bf0c      	ite	eq
 800f9f2:	5573      	strbeq	r3, [r6, r5]
 800f9f4:	5574      	strbne	r4, [r6, r5]
 800f9f6:	6a06      	ldr	r6, [r0, #32]
 800f9f8:	f101 0514 	add.w	r5, r1, #20
 800f9fc:	f01c 0f10 	tst.w	ip, #16
 800fa00:	bf0c      	ite	eq
 800fa02:	5573      	strbeq	r3, [r6, r5]
 800fa04:	5574      	strbne	r4, [r6, r5]
 800fa06:	6a06      	ldr	r6, [r0, #32]
 800fa08:	f101 0515 	add.w	r5, r1, #21
 800fa0c:	f01c 0f08 	tst.w	ip, #8
 800fa10:	bf0c      	ite	eq
 800fa12:	5573      	strbeq	r3, [r6, r5]
 800fa14:	5574      	strbne	r4, [r6, r5]
 800fa16:	6a06      	ldr	r6, [r0, #32]
 800fa18:	f101 0516 	add.w	r5, r1, #22
 800fa1c:	f01c 0f04 	tst.w	ip, #4
 800fa20:	bf0c      	ite	eq
 800fa22:	5573      	strbeq	r3, [r6, r5]
 800fa24:	5574      	strbne	r4, [r6, r5]
 800fa26:	6a06      	ldr	r6, [r0, #32]
 800fa28:	f101 0517 	add.w	r5, r1, #23
 800fa2c:	f01c 0f02 	tst.w	ip, #2
 800fa30:	bf0c      	ite	eq
 800fa32:	5573      	strbeq	r3, [r6, r5]
 800fa34:	5574      	strbne	r4, [r6, r5]
 800fa36:	f01c 0f01 	tst.w	ip, #1
 800fa3a:	bf14      	ite	ne
 800fa3c:	6a03      	ldrne	r3, [r0, #32]
 800fa3e:	6a04      	ldreq	r4, [r0, #32]
 800fa40:	f101 0518 	add.w	r5, r1, #24
 800fa44:	bf14      	ite	ne
 800fa46:	555c      	strbne	r4, [r3, r5]
 800fa48:	5563      	strbeq	r3, [r4, r5]
 800fa4a:	7c03      	ldrb	r3, [r0, #16]
 800fa4c:	7c44      	ldrb	r4, [r0, #17]
 800fa4e:	6a06      	ldr	r6, [r0, #32]
 800fa50:	0617      	lsls	r7, r2, #24
 800fa52:	f101 0519 	add.w	r5, r1, #25
 800fa56:	bf54      	ite	pl
 800fa58:	5573      	strbpl	r3, [r6, r5]
 800fa5a:	5574      	strbmi	r4, [r6, r5]
 800fa5c:	6a06      	ldr	r6, [r0, #32]
 800fa5e:	0657      	lsls	r7, r2, #25
 800fa60:	f101 051a 	add.w	r5, r1, #26
 800fa64:	bf54      	ite	pl
 800fa66:	5573      	strbpl	r3, [r6, r5]
 800fa68:	5574      	strbmi	r4, [r6, r5]
 800fa6a:	6a06      	ldr	r6, [r0, #32]
 800fa6c:	0697      	lsls	r7, r2, #26
 800fa6e:	f101 051b 	add.w	r5, r1, #27
 800fa72:	bf54      	ite	pl
 800fa74:	5573      	strbpl	r3, [r6, r5]
 800fa76:	5574      	strbmi	r4, [r6, r5]
 800fa78:	6a06      	ldr	r6, [r0, #32]
 800fa7a:	06d7      	lsls	r7, r2, #27
 800fa7c:	f101 051c 	add.w	r5, r1, #28
 800fa80:	bf54      	ite	pl
 800fa82:	5573      	strbpl	r3, [r6, r5]
 800fa84:	5574      	strbmi	r4, [r6, r5]
 800fa86:	6a06      	ldr	r6, [r0, #32]
 800fa88:	0717      	lsls	r7, r2, #28
 800fa8a:	f101 051d 	add.w	r5, r1, #29
 800fa8e:	bf54      	ite	pl
 800fa90:	5573      	strbpl	r3, [r6, r5]
 800fa92:	5574      	strbmi	r4, [r6, r5]
 800fa94:	6a06      	ldr	r6, [r0, #32]
 800fa96:	0757      	lsls	r7, r2, #29
 800fa98:	f101 051e 	add.w	r5, r1, #30
 800fa9c:	bf54      	ite	pl
 800fa9e:	5573      	strbpl	r3, [r6, r5]
 800faa0:	5574      	strbmi	r4, [r6, r5]
 800faa2:	6a06      	ldr	r6, [r0, #32]
 800faa4:	0797      	lsls	r7, r2, #30
 800faa6:	f101 051f 	add.w	r5, r1, #31
 800faaa:	bf54      	ite	pl
 800faac:	5573      	strbpl	r3, [r6, r5]
 800faae:	5574      	strbmi	r4, [r6, r5]
 800fab0:	07d2      	lsls	r2, r2, #31
 800fab2:	bf4c      	ite	mi
 800fab4:	6a03      	ldrmi	r3, [r0, #32]
 800fab6:	6a02      	ldrpl	r2, [r0, #32]
 800fab8:	f101 0120 	add.w	r1, r1, #32
 800fabc:	bf4c      	ite	mi
 800fabe:	545c      	strbmi	r4, [r3, r1]
 800fac0:	5453      	strbpl	r3, [r2, r1]
 800fac2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fac4 <WS28xx::~WS28xx()>:
 800fac4:	2200      	movs	r2, #0
 800fac6:	4b01      	ldr	r3, [pc, #4]	; (800facc <WS28xx::~WS28xx()+0x8>)
 800fac8:	601a      	str	r2, [r3, #0]
 800faca:	4770      	bx	lr
 800facc:	2000198c 	andcs	r1, r0, ip, lsl #19

0800fad0 <WS28xx::SetupBuffers()>:
 800fad0:	b513      	push	{r0, r1, r4, lr}
 800fad2:	4604      	mov	r4, r0
 800fad4:	a801      	add	r0, sp, #4
 800fad6:	f005 fa77 	bl	8014fc8 <gd32_spi_dma_tx_prepare(unsigned int*)>
 800fada:	9b01      	ldr	r3, [sp, #4]
 800fadc:	4a07      	ldr	r2, [pc, #28]	; (800fafc <WS28xx::SetupBuffers()+0x2c>)
 800fade:	085b      	lsrs	r3, r3, #1
 800fae0:	f023 0303 	bic.w	r3, r3, #3
 800fae4:	6220      	str	r0, [r4, #32]
 800fae6:	4418      	add	r0, r3
 800fae8:	69e3      	ldr	r3, [r4, #28]
 800faea:	6260      	str	r0, [r4, #36]	; 0x24
 800faec:	6013      	str	r3, [r2, #0]
 800faee:	3303      	adds	r3, #3
 800faf0:	f023 0303 	bic.w	r3, r3, #3
 800faf4:	61e3      	str	r3, [r4, #28]
 800faf6:	b002      	add	sp, #8
 800faf8:	bd10      	pop	{r4, pc}
 800fafa:	bf00      	nop
 800fafc:	20001988 	andcs	r1, r0, r8, lsl #19

0800fb00 <WS28xx::WS28xx(PixelConfiguration&)>:
 800fb00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb02:	23aa      	movs	r3, #170	; 0xaa
 800fb04:	2203      	movs	r2, #3
 800fb06:	e9c0 2300 	strd	r2, r3, [r0]
 800fb0a:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800fb0e:	460f      	mov	r7, r1
 800fb10:	6102      	str	r2, [r0, #16]
 800fb12:	2300      	movs	r3, #0
 800fb14:	2106      	movs	r1, #6
 800fb16:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fb1a:	4605      	mov	r5, r0
 800fb1c:	463e      	mov	r6, r7
 800fb1e:	4604      	mov	r4, r0
 800fb20:	8282      	strh	r2, [r0, #20]
 800fb22:	e9c0 1302 	strd	r1, r3, [r0, #8]
 800fb26:	4a16      	ldr	r2, [pc, #88]	; (800fb80 <WS28xx::WS28xx(PixelConfiguration&)+0x80>)
 800fb28:	e9c0 3308 	strd	r3, r3, [r0, #32]
 800fb2c:	4b15      	ldr	r3, [pc, #84]	; (800fb84 <WS28xx::WS28xx(PixelConfiguration&)+0x84>)
 800fb2e:	6182      	str	r2, [r0, #24]
 800fb30:	6018      	str	r0, [r3, #0]
 800fb32:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800fb34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fb36:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800fb3a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800fb3e:	a901      	add	r1, sp, #4
 800fb40:	4638      	mov	r0, r7
 800fb42:	f7fe fe05 	bl	800e750 <PixelConfiguration::Validate(unsigned int&)>
 800fb46:	6862      	ldr	r2, [r4, #4]
 800fb48:	9b01      	ldr	r3, [sp, #4]
 800fb4a:	7d61      	ldrb	r1, [r4, #21]
 800fb4c:	4353      	muls	r3, r2
 800fb4e:	61e3      	str	r3, [r4, #28]
 800fb50:	b111      	cbz	r1, 800fb58 <WS28xx::WS28xx(PixelConfiguration&)+0x58>
 800fb52:	00db      	lsls	r3, r3, #3
 800fb54:	3301      	adds	r3, #1
 800fb56:	61e3      	str	r3, [r4, #28]
 800fb58:	6823      	ldr	r3, [r4, #0]
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	3b0b      	subs	r3, #11
 800fb5e:	2b02      	cmp	r3, #2
 800fb60:	bf9f      	itttt	ls
 800fb62:	69e3      	ldrls	r3, [r4, #28]
 800fb64:	18d2      	addls	r2, r2, r3
 800fb66:	3208      	addls	r2, #8
 800fb68:	61e2      	strls	r2, [r4, #28]
 800fb6a:	f7ff ffb1 	bl	800fad0 <WS28xx::SetupBuffers()>
 800fb6e:	f005 f98d 	bl	8014e8c <gd32_spi_dma_begin()>
 800fb72:	68f8      	ldr	r0, [r7, #12]
 800fb74:	f005 fa14 	bl	8014fa0 <gd32_spi_dma_set_speed_hz(unsigned int)>
 800fb78:	4620      	mov	r0, r4
 800fb7a:	b003      	add	sp, #12
 800fb7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb7e:	bf00      	nop
 800fb80:	08017674 	stmdaeq	r1, {r2, r4, r5, r6, r9, sl, ip, sp, lr}
 800fb84:	2000198c 	andcs	r1, r0, ip, lsl #19

0800fb88 <WS28xx::Update()>:
 800fb88:	2200      	movs	r2, #0
 800fb8a:	b430      	push	{r4, r5}
 800fb8c:	4b0b      	ldr	r3, [pc, #44]	; (800fbbc <WS28xx::Update()+0x34>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	e9d0 1407 	ldrd	r1, r4, [r0, #28]
 800fb94:	4299      	cmp	r1, r3
 800fb96:	d807      	bhi.n	800fba8 <WS28xx::Update()+0x20>
 800fb98:	2300      	movs	r3, #0
 800fb9a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800fb9c:	084d      	lsrs	r5, r1, #1
 800fb9e:	42ab      	cmp	r3, r5
 800fba0:	d105      	bne.n	800fbae <WS28xx::Update()+0x26>
 800fba2:	bc30      	pop	{r4, r5}
 800fba4:	f005 ba18 	b.w	8014fd8 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>
 800fba8:	54e2      	strb	r2, [r4, r3]
 800fbaa:	3301      	adds	r3, #1
 800fbac:	e7f0      	b.n	800fb90 <WS28xx::Update()+0x8>
 800fbae:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
 800fbb2:	ba52      	rev16	r2, r2
 800fbb4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 800fbb8:	3301      	adds	r3, #1
 800fbba:	e7f0      	b.n	800fb9e <WS28xx::Update()+0x16>
 800fbbc:	20001988 	andcs	r1, r0, r8, lsl #19

0800fbc0 <WS28xx::Blackout()>:
 800fbc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fbc4:	4604      	mov	r4, r0
 800fbc6:	f3bf 8f6f 	isb	sy
 800fbca:	f005 fa1f 	bl	801500c <gd32_spi_dma_tx_is_active()>
 800fbce:	2800      	cmp	r0, #0
 800fbd0:	d1f9      	bne.n	800fbc6 <WS28xx::Blackout()+0x6>
 800fbd2:	e9d4 2800 	ldrd	r2, r8, [r4]
 800fbd6:	e9d4 6308 	ldrd	r6, r3, [r4, #32]
 800fbda:	f1a2 070b 	sub.w	r7, r2, #11
 800fbde:	2f02      	cmp	r7, #2
 800fbe0:	6223      	str	r3, [r4, #32]
 800fbe2:	7018      	strb	r0, [r3, #0]
 800fbe4:	d829      	bhi.n	800fc3a <WS28xx::Blackout()+0x7a>
 800fbe6:	4605      	mov	r5, r0
 800fbe8:	4681      	mov	r9, r0
 800fbea:	7058      	strb	r0, [r3, #1]
 800fbec:	7098      	strb	r0, [r3, #2]
 800fbee:	70d8      	strb	r0, [r3, #3]
 800fbf0:	4545      	cmp	r5, r8
 800fbf2:	d118      	bne.n	800fc26 <WS28xx::Blackout()+0x66>
 800fbf4:	2f02      	cmp	r7, #2
 800fbf6:	bf14      	ite	ne
 800fbf8:	21ff      	movne	r1, #255	; 0xff
 800fbfa:	2100      	moveq	r1, #0
 800fbfc:	69e2      	ldr	r2, [r4, #28]
 800fbfe:	6a20      	ldr	r0, [r4, #32]
 800fc00:	3a04      	subs	r2, #4
 800fc02:	1883      	adds	r3, r0, r2
 800fc04:	5481      	strb	r1, [r0, r2]
 800fc06:	7059      	strb	r1, [r3, #1]
 800fc08:	7099      	strb	r1, [r3, #2]
 800fc0a:	70d9      	strb	r1, [r3, #3]
 800fc0c:	4620      	mov	r0, r4
 800fc0e:	f7ff ffbb 	bl	800fb88 <WS28xx::Update()>
 800fc12:	f3bf 8f6f 	isb	sy
 800fc16:	f005 f9f9 	bl	801500c <gd32_spi_dma_tx_is_active()>
 800fc1a:	2800      	cmp	r0, #0
 800fc1c:	d1f9      	bne.n	800fc12 <WS28xx::Blackout()+0x52>
 800fc1e:	6226      	str	r6, [r4, #32]
 800fc20:	b003      	add	sp, #12
 800fc22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc26:	2300      	movs	r3, #0
 800fc28:	4629      	mov	r1, r5
 800fc2a:	461a      	mov	r2, r3
 800fc2c:	4620      	mov	r0, r4
 800fc2e:	f8cd 9000 	str.w	r9, [sp]
 800fc32:	f7ff fa07 	bl	800f044 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 800fc36:	3501      	adds	r5, #1
 800fc38:	e7da      	b.n	800fbf0 <WS28xx::Blackout()+0x30>
 800fc3a:	6a23      	ldr	r3, [r4, #32]
 800fc3c:	b102      	cbz	r2, 800fc40 <WS28xx::Blackout()+0x80>
 800fc3e:	7c22      	ldrb	r2, [r4, #16]
 800fc40:	69e1      	ldr	r1, [r4, #28]
 800fc42:	4419      	add	r1, r3
 800fc44:	4299      	cmp	r1, r3
 800fc46:	d0e1      	beq.n	800fc0c <WS28xx::Blackout()+0x4c>
 800fc48:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fc4c:	e7fa      	b.n	800fc44 <WS28xx::Blackout()+0x84>

0800fc4e <WS28xx::FullOn()>:
 800fc4e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fc52:	4604      	mov	r4, r0
 800fc54:	f3bf 8f6f 	isb	sy
 800fc58:	f005 f9d8 	bl	801500c <gd32_spi_dma_tx_is_active()>
 800fc5c:	2800      	cmp	r0, #0
 800fc5e:	d1f9      	bne.n	800fc54 <WS28xx::FullOn()+0x6>
 800fc60:	e9d4 2800 	ldrd	r2, r8, [r4]
 800fc64:	e9d4 6308 	ldrd	r6, r3, [r4, #32]
 800fc68:	f1a2 070b 	sub.w	r7, r2, #11
 800fc6c:	2f02      	cmp	r7, #2
 800fc6e:	6223      	str	r3, [r4, #32]
 800fc70:	7018      	strb	r0, [r3, #0]
 800fc72:	d82a      	bhi.n	800fcca <WS28xx::FullOn()+0x7c>
 800fc74:	4605      	mov	r5, r0
 800fc76:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800fc7a:	7058      	strb	r0, [r3, #1]
 800fc7c:	7098      	strb	r0, [r3, #2]
 800fc7e:	70d8      	strb	r0, [r3, #3]
 800fc80:	4545      	cmp	r5, r8
 800fc82:	d118      	bne.n	800fcb6 <WS28xx::FullOn()+0x68>
 800fc84:	2f02      	cmp	r7, #2
 800fc86:	bf14      	ite	ne
 800fc88:	21ff      	movne	r1, #255	; 0xff
 800fc8a:	2100      	moveq	r1, #0
 800fc8c:	69e2      	ldr	r2, [r4, #28]
 800fc8e:	6a20      	ldr	r0, [r4, #32]
 800fc90:	3a04      	subs	r2, #4
 800fc92:	1883      	adds	r3, r0, r2
 800fc94:	5481      	strb	r1, [r0, r2]
 800fc96:	7059      	strb	r1, [r3, #1]
 800fc98:	7099      	strb	r1, [r3, #2]
 800fc9a:	70d9      	strb	r1, [r3, #3]
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	f7ff ff73 	bl	800fb88 <WS28xx::Update()>
 800fca2:	f3bf 8f6f 	isb	sy
 800fca6:	f005 f9b1 	bl	801500c <gd32_spi_dma_tx_is_active()>
 800fcaa:	2800      	cmp	r0, #0
 800fcac:	d1f9      	bne.n	800fca2 <WS28xx::FullOn()+0x54>
 800fcae:	6226      	str	r6, [r4, #32]
 800fcb0:	b003      	add	sp, #12
 800fcb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fcb6:	23ff      	movs	r3, #255	; 0xff
 800fcb8:	4629      	mov	r1, r5
 800fcba:	461a      	mov	r2, r3
 800fcbc:	4620      	mov	r0, r4
 800fcbe:	f8cd 9000 	str.w	r9, [sp]
 800fcc2:	f7ff f9bf 	bl	800f044 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 800fcc6:	3501      	adds	r5, #1
 800fcc8:	e7da      	b.n	800fc80 <WS28xx::FullOn()+0x32>
 800fcca:	6a23      	ldr	r3, [r4, #32]
 800fccc:	b13a      	cbz	r2, 800fcde <WS28xx::FullOn()+0x90>
 800fcce:	7c61      	ldrb	r1, [r4, #17]
 800fcd0:	69e2      	ldr	r2, [r4, #28]
 800fcd2:	441a      	add	r2, r3
 800fcd4:	429a      	cmp	r2, r3
 800fcd6:	d0e1      	beq.n	800fc9c <WS28xx::FullOn()+0x4e>
 800fcd8:	f803 1f01 	strb.w	r1, [r3, #1]!
 800fcdc:	e7fa      	b.n	800fcd4 <WS28xx::FullOn()+0x86>
 800fcde:	21ff      	movs	r1, #255	; 0xff
 800fce0:	e7f6      	b.n	800fcd0 <WS28xx::FullOn()+0x82>
	...

0800fce4 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>:
 800fce4:	2300      	movs	r3, #0
 800fce6:	2020      	movs	r0, #32
 800fce8:	b510      	push	{r4, lr}
 800fcea:	4a04      	ldr	r2, [pc, #16]	; (800fcfc <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x18>)
 800fcec:	428b      	cmp	r3, r1
 800fcee:	d100      	bne.n	800fcf2 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0xe>
 800fcf0:	bd10      	pop	{r4, pc}
 800fcf2:	f852 4b04 	ldr.w	r4, [r2], #4
 800fcf6:	3301      	adds	r3, #1
 800fcf8:	4420      	add	r0, r4
 800fcfa:	e7f7      	b.n	800fcec <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x8>
 800fcfc:	08017774 	stmdaeq	r1, {r2, r4, r5, r6, r8, r9, sl, ip, sp, lr}

0800fd00 <SpiFlashStore::Init()>:
 800fd00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fd04:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800fe1c <SpiFlashStore::Init()+0x11c>
 800fd08:	4607      	mov	r7, r0
 800fd0a:	b085      	sub	sp, #20
 800fd0c:	f8d8 0000 	ldr.w	r0, [r8]
 800fd10:	f000 fd14 	bl	801073c <FlashRom::GetSectorSize() const>
 800fd14:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800fd18:	4605      	mov	r5, r0
 800fd1a:	d17d      	bne.n	800fe18 <SpiFlashStore::Init()+0x118>
 800fd1c:	f8d8 0000 	ldr.w	r0, [r8]
 800fd20:	f000 fd04 	bl	801072c <FlashRom::GetSize() const>
 800fd24:	4b3e      	ldr	r3, [pc, #248]	; (800fe20 <SpiFlashStore::Init()+0x120>)
 800fd26:	f5a0 5180 	sub.w	r1, r0, #4096	; 0x1000
 800fd2a:	f3c1 060b 	ubfx	r6, r1, #0, #12
 800fd2e:	6019      	str	r1, [r3, #0]
 800fd30:	2e00      	cmp	r6, #0
 800fd32:	d171      	bne.n	800fe18 <SpiFlashStore::Init()+0x118>
 800fd34:	4c3b      	ldr	r4, [pc, #236]	; (800fe24 <SpiFlashStore::Init()+0x124>)
 800fd36:	ab03      	add	r3, sp, #12
 800fd38:	9300      	str	r3, [sp, #0]
 800fd3a:	462a      	mov	r2, r5
 800fd3c:	4623      	mov	r3, r4
 800fd3e:	f8d8 0000 	ldr.w	r0, [r8]
 800fd42:	f000 fcfe 	bl	8010742 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>
 800fd46:	7823      	ldrb	r3, [r4, #0]
 800fd48:	2b41      	cmp	r3, #65	; 0x41
 800fd4a:	bf1c      	itt	ne
 800fd4c:	2341      	movne	r3, #65	; 0x41
 800fd4e:	7023      	strbne	r3, [r4, #0]
 800fd50:	7863      	ldrb	r3, [r4, #1]
 800fd52:	bf14      	ite	ne
 800fd54:	4635      	movne	r5, r6
 800fd56:	2501      	moveq	r5, #1
 800fd58:	2b76      	cmp	r3, #118	; 0x76
 800fd5a:	bf1c      	itt	ne
 800fd5c:	2376      	movne	r3, #118	; 0x76
 800fd5e:	7063      	strbne	r3, [r4, #1]
 800fd60:	78a3      	ldrb	r3, [r4, #2]
 800fd62:	bf18      	it	ne
 800fd64:	2500      	movne	r5, #0
 800fd66:	2b56      	cmp	r3, #86	; 0x56
 800fd68:	bf1c      	itt	ne
 800fd6a:	2356      	movne	r3, #86	; 0x56
 800fd6c:	70a3      	strbne	r3, [r4, #2]
 800fd6e:	78e3      	ldrb	r3, [r4, #3]
 800fd70:	bf18      	it	ne
 800fd72:	2500      	movne	r5, #0
 800fd74:	2b10      	cmp	r3, #16
 800fd76:	d022      	beq.n	800fdbe <SpiFlashStore::Init()+0xbe>
 800fd78:	2310      	movs	r3, #16
 800fd7a:	70e3      	strb	r3, [r4, #3]
 800fd7c:	2201      	movs	r2, #1
 800fd7e:	2500      	movs	r5, #0
 800fd80:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800fd84:	4b28      	ldr	r3, [pc, #160]	; (800fe28 <SpiFlashStore::Init()+0x128>)
 800fd86:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800fe2c <SpiFlashStore::Init()+0x12c>
 800fd8a:	701a      	strb	r2, [r3, #0]
 800fd8c:	4631      	mov	r1, r6
 800fd8e:	4638      	mov	r0, r7
 800fd90:	f7ff ffa8 	bl	800fce4 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800fd94:	1823      	adds	r3, r4, r0
 800fd96:	5425      	strb	r5, [r4, r0]
 800fd98:	705d      	strb	r5, [r3, #1]
 800fd9a:	709d      	strb	r5, [r3, #2]
 800fd9c:	70dd      	strb	r5, [r3, #3]
 800fd9e:	f858 3b04 	ldr.w	r3, [r8], #4
 800fda2:	1d02      	adds	r2, r0, #4
 800fda4:	4403      	add	r3, r0
 800fda6:	429a      	cmp	r2, r3
 800fda8:	d332      	bcc.n	800fe10 <SpiFlashStore::Init()+0x110>
 800fdaa:	3601      	adds	r6, #1
 800fdac:	2e1c      	cmp	r6, #28
 800fdae:	d1ed      	bne.n	800fd8c <SpiFlashStore::Init()+0x8c>
 800fdb0:	2501      	movs	r5, #1
 800fdb2:	4b1f      	ldr	r3, [pc, #124]	; (800fe30 <SpiFlashStore::Init()+0x130>)
 800fdb4:	601d      	str	r5, [r3, #0]
 800fdb6:	4628      	mov	r0, r5
 800fdb8:	b005      	add	sp, #20
 800fdba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdbe:	2d00      	cmp	r5, #0
 800fdc0:	d0dc      	beq.n	800fd7c <SpiFlashStore::Init()+0x7c>
 800fdc2:	f04f 0900 	mov.w	r9, #0
 800fdc6:	46c8      	mov	r8, r9
 800fdc8:	4631      	mov	r1, r6
 800fdca:	4638      	mov	r0, r7
 800fdcc:	f7ff ff8a 	bl	800fce4 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800fdd0:	5c23      	ldrb	r3, [r4, r0]
 800fdd2:	2bff      	cmp	r3, #255	; 0xff
 800fdd4:	d112      	bne.n	800fdfc <SpiFlashStore::Init()+0xfc>
 800fdd6:	1823      	adds	r3, r4, r0
 800fdd8:	785a      	ldrb	r2, [r3, #1]
 800fdda:	2aff      	cmp	r2, #255	; 0xff
 800fddc:	d10e      	bne.n	800fdfc <SpiFlashStore::Init()+0xfc>
 800fdde:	789a      	ldrb	r2, [r3, #2]
 800fde0:	2aff      	cmp	r2, #255	; 0xff
 800fde2:	d10b      	bne.n	800fdfc <SpiFlashStore::Init()+0xfc>
 800fde4:	78da      	ldrb	r2, [r3, #3]
 800fde6:	2aff      	cmp	r2, #255	; 0xff
 800fde8:	d108      	bne.n	800fdfc <SpiFlashStore::Init()+0xfc>
 800fdea:	46a9      	mov	r9, r5
 800fdec:	f804 8000 	strb.w	r8, [r4, r0]
 800fdf0:	f883 8001 	strb.w	r8, [r3, #1]
 800fdf4:	f883 8002 	strb.w	r8, [r3, #2]
 800fdf8:	f883 8003 	strb.w	r8, [r3, #3]
 800fdfc:	3601      	adds	r6, #1
 800fdfe:	2e1c      	cmp	r6, #28
 800fe00:	d1e2      	bne.n	800fdc8 <SpiFlashStore::Init()+0xc8>
 800fe02:	f1b9 0f00 	cmp.w	r9, #0
 800fe06:	d0d6      	beq.n	800fdb6 <SpiFlashStore::Init()+0xb6>
 800fe08:	2201      	movs	r2, #1
 800fe0a:	4b09      	ldr	r3, [pc, #36]	; (800fe30 <SpiFlashStore::Init()+0x130>)
 800fe0c:	601a      	str	r2, [r3, #0]
 800fe0e:	e7d2      	b.n	800fdb6 <SpiFlashStore::Init()+0xb6>
 800fe10:	f804 9002 	strb.w	r9, [r4, r2]
 800fe14:	3201      	adds	r2, #1
 800fe16:	e7c6      	b.n	800fda6 <SpiFlashStore::Init()+0xa6>
 800fe18:	2500      	movs	r5, #0
 800fe1a:	e7cc      	b.n	800fdb6 <SpiFlashStore::Init()+0xb6>
 800fe1c:	200029c8 	andcs	r2, r0, r8, asr #19
 800fe20:	20002994 	mulcs	r0, r4, r9
 800fe24:	20001994 	mulcs	r0, r4, r9
 800fe28:	200029a8 	andcs	r2, r0, r8, lsr #19
 800fe2c:	08017774 	stmdaeq	r1, {r2, r4, r5, r6, r8, r9, sl, ip, sp, lr}
 800fe30:	200029a0 	andcs	r2, r0, r0, lsr #19

0800fe34 <SpiFlashStore::SpiFlashStore()>:
 800fe34:	b538      	push	{r3, r4, r5, lr}
 800fe36:	4b0d      	ldr	r3, [pc, #52]	; (800fe6c <SpiFlashStore::SpiFlashStore()+0x38>)
 800fe38:	4604      	mov	r4, r0
 800fe3a:	6018      	str	r0, [r3, #0]
 800fe3c:	4b0c      	ldr	r3, [pc, #48]	; (800fe70 <SpiFlashStore::SpiFlashStore()+0x3c>)
 800fe3e:	4d0d      	ldr	r5, [pc, #52]	; (800fe74 <SpiFlashStore::SpiFlashStore()+0x40>)
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	781b      	ldrb	r3, [r3, #0]
 800fe44:	b113      	cbz	r3, 800fe4c <SpiFlashStore::SpiFlashStore()+0x18>
 800fe46:	f7ff ff5b 	bl	800fd00 <SpiFlashStore::Init()>
 800fe4a:	7028      	strb	r0, [r5, #0]
 800fe4c:	782b      	ldrb	r3, [r5, #0]
 800fe4e:	b153      	cbz	r3, 800fe66 <SpiFlashStore::SpiFlashStore()+0x32>
 800fe50:	2320      	movs	r3, #32
 800fe52:	2200      	movs	r2, #0
 800fe54:	4908      	ldr	r1, [pc, #32]	; (800fe78 <SpiFlashStore::SpiFlashStore()+0x44>)
 800fe56:	f851 0b04 	ldr.w	r0, [r1], #4
 800fe5a:	3201      	adds	r2, #1
 800fe5c:	2a1c      	cmp	r2, #28
 800fe5e:	4403      	add	r3, r0
 800fe60:	d1f9      	bne.n	800fe56 <SpiFlashStore::SpiFlashStore()+0x22>
 800fe62:	4a06      	ldr	r2, [pc, #24]	; (800fe7c <SpiFlashStore::SpiFlashStore()+0x48>)
 800fe64:	6013      	str	r3, [r2, #0]
 800fe66:	4620      	mov	r0, r4
 800fe68:	bd38      	pop	{r3, r4, r5, pc}
 800fe6a:	bf00      	nop
 800fe6c:	200029a4 	andcs	r2, r0, r4, lsr #19
 800fe70:	200029c8 	andcs	r2, r0, r8, asr #19
 800fe74:	20002998 	mulcs	r0, r8, r9
 800fe78:	08017774 	stmdaeq	r1, {r2, r4, r5, r6, r8, r9, sl, ip, sp, lr}
 800fe7c:	2000299c 	mulcs	r0, ip, r9

0800fe80 <SpiFlashStore::ResetSetList(spiflashstore::Store)>:
 800fe80:	b508      	push	{r3, lr}
 800fe82:	f7ff ff2f 	bl	800fce4 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800fe86:	2300      	movs	r3, #0
 800fe88:	4904      	ldr	r1, [pc, #16]	; (800fe9c <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x1c>)
 800fe8a:	1842      	adds	r2, r0, r1
 800fe8c:	540b      	strb	r3, [r1, r0]
 800fe8e:	7053      	strb	r3, [r2, #1]
 800fe90:	7093      	strb	r3, [r2, #2]
 800fe92:	70d3      	strb	r3, [r2, #3]
 800fe94:	2201      	movs	r2, #1
 800fe96:	4b02      	ldr	r3, [pc, #8]	; (800fea0 <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x20>)
 800fe98:	601a      	str	r2, [r3, #0]
 800fe9a:	bd08      	pop	{r3, pc}
 800fe9c:	20001994 	mulcs	r0, r4, r9
 800fea0:	200029a0 	andcs	r2, r0, r0, lsr #19

0800fea4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>:
 800fea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fea8:	461c      	mov	r4, r3
 800feaa:	4b19      	ldr	r3, [pc, #100]	; (800ff10 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x6c>)
 800feac:	4616      	mov	r6, r2
 800feae:	781f      	ldrb	r7, [r3, #0]
 800feb0:	9d07      	ldr	r5, [sp, #28]
 800feb2:	b307      	cbz	r7, 800fef6 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800feb4:	f7ff ff16 	bl	800fce4 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800feb8:	f04f 0c00 	mov.w	ip, #0
 800febc:	4a15      	ldr	r2, [pc, #84]	; (800ff14 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x70>)
 800febe:	1831      	adds	r1, r6, r0
 800fec0:	1e63      	subs	r3, r4, #1
 800fec2:	9c06      	ldr	r4, [sp, #24]
 800fec4:	4411      	add	r1, r2
 800fec6:	440c      	add	r4, r1
 800fec8:	42a1      	cmp	r1, r4
 800feca:	d116      	bne.n	800fefa <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x56>
 800fecc:	f1bc 0f00 	cmp.w	ip, #0
 800fed0:	d011      	beq.n	800fef6 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800fed2:	4b11      	ldr	r3, [pc, #68]	; (800ff18 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x74>)
 800fed4:	6819      	ldr	r1, [r3, #0]
 800fed6:	b109      	cbz	r1, 800fedc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x38>
 800fed8:	2906      	cmp	r1, #6
 800feda:	d101      	bne.n	800fee0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x3c>
 800fedc:	2101      	movs	r1, #1
 800fede:	6019      	str	r1, [r3, #0]
 800fee0:	4b0e      	ldr	r3, [pc, #56]	; (800ff1c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x78>)
 800fee2:	6819      	ldr	r1, [r3, #0]
 800fee4:	4b0e      	ldr	r3, [pc, #56]	; (800ff20 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x7c>)
 800fee6:	6019      	str	r1, [r3, #0]
 800fee8:	b12e      	cbz	r6, 800fef6 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800feea:	b125      	cbz	r5, 800fef6 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800feec:	9b08      	ldr	r3, [sp, #32]
 800feee:	4418      	add	r0, r3
 800fef0:	5813      	ldr	r3, [r2, r0]
 800fef2:	432b      	orrs	r3, r5
 800fef4:	5013      	str	r3, [r2, r0]
 800fef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fefa:	f891 8000 	ldrb.w	r8, [r1]
 800fefe:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800ff02:	3101      	adds	r1, #1
 800ff04:	45f0      	cmp	r8, lr
 800ff06:	bf1c      	itt	ne
 800ff08:	f801 ec01 	strbne.w	lr, [r1, #-1]
 800ff0c:	46bc      	movne	ip, r7
 800ff0e:	e7db      	b.n	800fec8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x24>
 800ff10:	20002998 	mulcs	r0, r8, r9
 800ff14:	20001994 	mulcs	r0, r4, r9
 800ff18:	200029a0 	andcs	r2, r0, r0, lsr #19
 800ff1c:	20009dd4 	ldrdcs	r9, [r0], -r4
 800ff20:	20001990 	mulcs	r0, r0, r9

0800ff24 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>:
 800ff24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff28:	461d      	mov	r5, r3
 800ff2a:	4b15      	ldr	r3, [pc, #84]	; (800ff80 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x5c>)
 800ff2c:	b085      	sub	sp, #20
 800ff2e:	781b      	ldrb	r3, [r3, #0]
 800ff30:	4607      	mov	r7, r0
 800ff32:	4614      	mov	r4, r2
 800ff34:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800ff38:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 800ff3c:	b193      	cbz	r3, 800ff64 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x40>
 800ff3e:	f7ff fed1 	bl	800fce4 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800ff42:	4a10      	ldr	r2, [pc, #64]	; (800ff84 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x60>)
 800ff44:	eb08 0600 	add.w	r6, r8, r0
 800ff48:	18b3      	adds	r3, r6, r2
 800ff4a:	f1b9 0f00 	cmp.w	r9, #0
 800ff4e:	d013      	beq.n	800ff78 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x54>
 800ff50:	5990      	ldr	r0, [r2, r6]
 800ff52:	b988      	cbnz	r0, 800ff78 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x54>
 800ff54:	e9cd 0001 	strd	r0, r0, [sp, #4]
 800ff58:	4623      	mov	r3, r4
 800ff5a:	4642      	mov	r2, r8
 800ff5c:	4638      	mov	r0, r7
 800ff5e:	9500      	str	r5, [sp, #0]
 800ff60:	f7ff ffa0 	bl	800fea4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ff64:	b005      	add	sp, #20
 800ff66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff6e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ff72:	429d      	cmp	r5, r3
 800ff74:	d1f9      	bne.n	800ff6a <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x46>
 800ff76:	e7f5      	b.n	800ff64 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x40>
 800ff78:	3c01      	subs	r4, #1
 800ff7a:	441d      	add	r5, r3
 800ff7c:	e7f9      	b.n	800ff72 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x4e>
 800ff7e:	bf00      	nop
 800ff80:	20002998 	mulcs	r0, r8, r9
 800ff84:	20001994 	mulcs	r0, r4, r9

0800ff88 <SpiFlashStore::Flash()>:
 800ff88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ff8a:	4c25      	ldr	r4, [pc, #148]	; (8010020 <SpiFlashStore::Flash()+0x98>)
 800ff8c:	6820      	ldr	r0, [r4, #0]
 800ff8e:	2800      	cmp	r0, #0
 800ff90:	d043      	beq.n	801001a <SpiFlashStore::Flash()+0x92>
 800ff92:	3801      	subs	r0, #1
 800ff94:	2805      	cmp	r0, #5
 800ff96:	d831      	bhi.n	800fffc <SpiFlashStore::Flash()+0x74>
 800ff98:	e8df f000 	tbb	[pc, r0]
 800ff9c:	2e140b03 	vnmlscs.f64	d0, d4, d3
 800ffa0:	4b203025 	blmi	881c03c <__exidx_end+0x803d24>
 800ffa4:	681a      	ldr	r2, [r3, #0]
 800ffa6:	4b20      	ldr	r3, [pc, #128]	; (8010028 <SpiFlashStore::Flash()+0xa0>)
 800ffa8:	601a      	str	r2, [r3, #0]
 800ffaa:	2302      	movs	r3, #2
 800ffac:	6023      	str	r3, [r4, #0]
 800ffae:	2001      	movs	r0, #1
 800ffb0:	e033      	b.n	801001a <SpiFlashStore::Flash()+0x92>
 800ffb2:	4b1c      	ldr	r3, [pc, #112]	; (8010024 <SpiFlashStore::Flash()+0x9c>)
 800ffb4:	4a1c      	ldr	r2, [pc, #112]	; (8010028 <SpiFlashStore::Flash()+0xa0>)
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	6812      	ldr	r2, [r2, #0]
 800ffba:	1a9b      	subs	r3, r3, r2
 800ffbc:	2b63      	cmp	r3, #99	; 0x63
 800ffbe:	d9f6      	bls.n	800ffae <SpiFlashStore::Flash()+0x26>
 800ffc0:	2303      	movs	r3, #3
 800ffc2:	e7f3      	b.n	800ffac <SpiFlashStore::Flash()+0x24>
 800ffc4:	4919      	ldr	r1, [pc, #100]	; (801002c <SpiFlashStore::Flash()+0xa4>)
 800ffc6:	481a      	ldr	r0, [pc, #104]	; (8010030 <SpiFlashStore::Flash()+0xa8>)
 800ffc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ffcc:	6809      	ldr	r1, [r1, #0]
 800ffce:	6800      	ldr	r0, [r0, #0]
 800ffd0:	ab03      	add	r3, sp, #12
 800ffd2:	f000 fbc5 	bl	8010760 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>
 800ffd6:	2800      	cmp	r0, #0
 800ffd8:	d0e9      	beq.n	800ffae <SpiFlashStore::Flash()+0x26>
 800ffda:	4b12      	ldr	r3, [pc, #72]	; (8010024 <SpiFlashStore::Flash()+0x9c>)
 800ffdc:	681a      	ldr	r2, [r3, #0]
 800ffde:	4b12      	ldr	r3, [pc, #72]	; (8010028 <SpiFlashStore::Flash()+0xa0>)
 800ffe0:	601a      	str	r2, [r3, #0]
 800ffe2:	2305      	movs	r3, #5
 800ffe4:	e7e2      	b.n	800ffac <SpiFlashStore::Flash()+0x24>
 800ffe6:	4b0f      	ldr	r3, [pc, #60]	; (8010024 <SpiFlashStore::Flash()+0x9c>)
 800ffe8:	4a0f      	ldr	r2, [pc, #60]	; (8010028 <SpiFlashStore::Flash()+0xa0>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	6812      	ldr	r2, [r2, #0]
 800ffee:	1a9b      	subs	r3, r3, r2
 800fff0:	2b63      	cmp	r3, #99	; 0x63
 800fff2:	d9dc      	bls.n	800ffae <SpiFlashStore::Flash()+0x26>
 800fff4:	2304      	movs	r3, #4
 800fff6:	e7d9      	b.n	800ffac <SpiFlashStore::Flash()+0x24>
 800fff8:	2306      	movs	r3, #6
 800fffa:	e7d7      	b.n	800ffac <SpiFlashStore::Flash()+0x24>
 800fffc:	ab03      	add	r3, sp, #12
 800fffe:	4a0d      	ldr	r2, [pc, #52]	; (8010034 <SpiFlashStore::Flash()+0xac>)
 8010000:	490a      	ldr	r1, [pc, #40]	; (801002c <SpiFlashStore::Flash()+0xa4>)
 8010002:	480b      	ldr	r0, [pc, #44]	; (8010030 <SpiFlashStore::Flash()+0xa8>)
 8010004:	9300      	str	r3, [sp, #0]
 8010006:	6812      	ldr	r2, [r2, #0]
 8010008:	4b0b      	ldr	r3, [pc, #44]	; (8010038 <SpiFlashStore::Flash()+0xb0>)
 801000a:	6809      	ldr	r1, [r1, #0]
 801000c:	6800      	ldr	r0, [r0, #0]
 801000e:	f000 fc47 	bl	80108a0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>
 8010012:	2800      	cmp	r0, #0
 8010014:	d0cb      	beq.n	800ffae <SpiFlashStore::Flash()+0x26>
 8010016:	2000      	movs	r0, #0
 8010018:	6020      	str	r0, [r4, #0]
 801001a:	b004      	add	sp, #16
 801001c:	bd10      	pop	{r4, pc}
 801001e:	bf00      	nop
 8010020:	200029a0 	andcs	r2, r0, r0, lsr #19
 8010024:	20009dd4 	ldrdcs	r9, [r0], -r4
 8010028:	20001990 	mulcs	r0, r0, r9
 801002c:	20002994 	mulcs	r0, r4, r9
 8010030:	200029c8 	andcs	r2, r0, r8, asr #19
 8010034:	2000299c 	mulcs	r0, ip, r9
 8010038:	20001994 	mulcs	r0, r4, r9

0801003c <StoreDisplayUdf::~StoreDisplayUdf()>:
 801003c:	4770      	bx	lr
	...

08010040 <StoreDisplayUdf::Copy(displayudfparams::Params*)>:
 8010040:	b507      	push	{r0, r1, r2, lr}
 8010042:	2300      	movs	r3, #0
 8010044:	460a      	mov	r2, r1
 8010046:	2101      	movs	r1, #1
 8010048:	e9cd 3100 	strd	r3, r1, [sp]
 801004c:	4804      	ldr	r0, [pc, #16]	; (8010060 <StoreDisplayUdf::Copy(displayudfparams::Params*)+0x20>)
 801004e:	2322      	movs	r3, #34	; 0x22
 8010050:	210f      	movs	r1, #15
 8010052:	6800      	ldr	r0, [r0, #0]
 8010054:	f7ff ff66 	bl	800ff24 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 8010058:	b003      	add	sp, #12
 801005a:	f85d fb04 	ldr.w	pc, [sp], #4
 801005e:	bf00      	nop
 8010060:	200029a4 	andcs	r2, r0, r4, lsr #19

08010064 <StoreDisplayUdf::Update(displayudfparams::Params const*)>:
 8010064:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010066:	2200      	movs	r2, #0
 8010068:	460b      	mov	r3, r1
 801006a:	2122      	movs	r1, #34	; 0x22
 801006c:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8010070:	4804      	ldr	r0, [pc, #16]	; (8010084 <StoreDisplayUdf::Update(displayudfparams::Params const*)+0x20>)
 8010072:	9100      	str	r1, [sp, #0]
 8010074:	6800      	ldr	r0, [r0, #0]
 8010076:	210f      	movs	r1, #15
 8010078:	f7ff ff14 	bl	800fea4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801007c:	b005      	add	sp, #20
 801007e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010082:	bf00      	nop
 8010084:	200029a4 	andcs	r2, r0, r4, lsr #19

08010088 <StoreDisplayUdf::~StoreDisplayUdf()>:
 8010088:	b510      	push	{r4, lr}
 801008a:	4604      	mov	r4, r0
 801008c:	f003 fe90 	bl	8013db0 <operator delete(void*)>
 8010090:	4620      	mov	r0, r4
 8010092:	bd10      	pop	{r4, pc}

08010094 <StoreDisplayUdf::StoreDisplayUdf()>:
 8010094:	4a02      	ldr	r2, [pc, #8]	; (80100a0 <StoreDisplayUdf::StoreDisplayUdf()+0xc>)
 8010096:	6002      	str	r2, [r0, #0]
 8010098:	4a02      	ldr	r2, [pc, #8]	; (80100a4 <StoreDisplayUdf::StoreDisplayUdf()+0x10>)
 801009a:	6010      	str	r0, [r2, #0]
 801009c:	4770      	bx	lr
 801009e:	bf00      	nop
 80100a0:	080177ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, r9, sl, ip, sp, lr}
 80100a4:	200029ac 	andcs	r2, r0, ip, lsr #19

080100a8 <StoreNetwork::~StoreNetwork()>:
 80100a8:	4770      	bx	lr

080100aa <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 80100aa:	3804      	subs	r0, #4
 80100ac:	4770      	bx	lr
	...

080100b0 <StoreNetwork::Update(networkparams::Params const*)>:
 80100b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80100b2:	2200      	movs	r2, #0
 80100b4:	460b      	mov	r3, r1
 80100b6:	215e      	movs	r1, #94	; 0x5e
 80100b8:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80100bc:	4804      	ldr	r0, [pc, #16]	; (80100d0 <StoreNetwork::Update(networkparams::Params const*)+0x20>)
 80100be:	9100      	str	r1, [sp, #0]
 80100c0:	6800      	ldr	r0, [r0, #0]
 80100c2:	4611      	mov	r1, r2
 80100c4:	f7ff feee 	bl	800fea4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80100c8:	b005      	add	sp, #20
 80100ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80100ce:	bf00      	nop
 80100d0:	200029a4 	andcs	r2, r0, r4, lsr #19

080100d4 <StoreNetwork::SaveDhcp(bool)>:
 80100d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80100d6:	2301      	movs	r3, #1
 80100d8:	f88d 1017 	strb.w	r1, [sp, #23]
 80100dc:	2100      	movs	r1, #0
 80100de:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80100e2:	4805      	ldr	r0, [pc, #20]	; (80100f8 <StoreNetwork::SaveDhcp(bool)+0x24>)
 80100e4:	9300      	str	r3, [sp, #0]
 80100e6:	2214      	movs	r2, #20
 80100e8:	6800      	ldr	r0, [r0, #0]
 80100ea:	f10d 0317 	add.w	r3, sp, #23
 80100ee:	f7ff fed9 	bl	800fea4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80100f2:	b007      	add	sp, #28
 80100f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80100f8:	200029a4 	andcs	r2, r0, r4, lsr #19

080100fc <non-virtual thunk to StoreNetwork::SaveDhcp(bool)>:
 80100fc:	f1a0 0004 	sub.w	r0, r0, #4
 8010100:	e7e8      	b.n	80100d4 <StoreNetwork::SaveDhcp(bool)>
 8010102:	bf00      	nop

08010104 <StoreNetwork::SaveGatewayIp(unsigned int)>:
 8010104:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010106:	2308      	movs	r3, #8
 8010108:	9105      	str	r1, [sp, #20]
 801010a:	2100      	movs	r1, #0
 801010c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8010110:	2304      	movs	r3, #4
 8010112:	4805      	ldr	r0, [pc, #20]	; (8010128 <StoreNetwork::SaveGatewayIp(unsigned int)+0x24>)
 8010114:	9300      	str	r3, [sp, #0]
 8010116:	220c      	movs	r2, #12
 8010118:	6800      	ldr	r0, [r0, #0]
 801011a:	ab05      	add	r3, sp, #20
 801011c:	f7ff fec2 	bl	800fea4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010120:	b007      	add	sp, #28
 8010122:	f85d fb04 	ldr.w	pc, [sp], #4
 8010126:	bf00      	nop
 8010128:	200029a4 	andcs	r2, r0, r4, lsr #19

0801012c <non-virtual thunk to StoreNetwork::SaveGatewayIp(unsigned int)>:
 801012c:	f1a0 0004 	sub.w	r0, r0, #4
 8010130:	e7e8      	b.n	8010104 <StoreNetwork::SaveGatewayIp(unsigned int)>
 8010132:	bf00      	nop

08010134 <StoreNetwork::SaveNetMask(unsigned int)>:
 8010134:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010136:	2304      	movs	r3, #4
 8010138:	9105      	str	r1, [sp, #20]
 801013a:	2100      	movs	r1, #0
 801013c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8010140:	4804      	ldr	r0, [pc, #16]	; (8010154 <StoreNetwork::SaveNetMask(unsigned int)+0x20>)
 8010142:	9300      	str	r3, [sp, #0]
 8010144:	2208      	movs	r2, #8
 8010146:	6800      	ldr	r0, [r0, #0]
 8010148:	ab05      	add	r3, sp, #20
 801014a:	f7ff feab 	bl	800fea4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801014e:	b007      	add	sp, #28
 8010150:	f85d fb04 	ldr.w	pc, [sp], #4
 8010154:	200029a4 	andcs	r2, r0, r4, lsr #19

08010158 <non-virtual thunk to StoreNetwork::SaveNetMask(unsigned int)>:
 8010158:	f1a0 0004 	sub.w	r0, r0, #4
 801015c:	e7ea      	b.n	8010134 <StoreNetwork::SaveNetMask(unsigned int)>
 801015e:	bf00      	nop

08010160 <StoreNetwork::SaveIp(unsigned int)>:
 8010160:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010162:	2302      	movs	r3, #2
 8010164:	9105      	str	r1, [sp, #20]
 8010166:	2100      	movs	r1, #0
 8010168:	2204      	movs	r2, #4
 801016a:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801016e:	4804      	ldr	r0, [pc, #16]	; (8010180 <StoreNetwork::SaveIp(unsigned int)+0x20>)
 8010170:	9200      	str	r2, [sp, #0]
 8010172:	6800      	ldr	r0, [r0, #0]
 8010174:	ab05      	add	r3, sp, #20
 8010176:	f7ff fe95 	bl	800fea4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801017a:	b007      	add	sp, #28
 801017c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010180:	200029a4 	andcs	r2, r0, r4, lsr #19

08010184 <non-virtual thunk to StoreNetwork::SaveIp(unsigned int)>:
 8010184:	f1a0 0004 	sub.w	r0, r0, #4
 8010188:	e7ea      	b.n	8010160 <StoreNetwork::SaveIp(unsigned int)>
 801018a:	bf00      	nop

0801018c <StoreNetwork::SaveHostName(char const*, unsigned int)>:
 801018c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801018e:	460b      	mov	r3, r1
 8010190:	2020      	movs	r0, #32
 8010192:	2100      	movs	r1, #0
 8010194:	2a40      	cmp	r2, #64	; 0x40
 8010196:	bf28      	it	cs
 8010198:	2240      	movcs	r2, #64	; 0x40
 801019a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 801019e:	4804      	ldr	r0, [pc, #16]	; (80101b0 <StoreNetwork::SaveHostName(char const*, unsigned int)+0x24>)
 80101a0:	9200      	str	r2, [sp, #0]
 80101a2:	6800      	ldr	r0, [r0, #0]
 80101a4:	2215      	movs	r2, #21
 80101a6:	f7ff fe7d 	bl	800fea4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80101aa:	b005      	add	sp, #20
 80101ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80101b0:	200029a4 	andcs	r2, r0, r4, lsr #19

080101b4 <non-virtual thunk to StoreNetwork::SaveHostName(char const*, unsigned int)>:
 80101b4:	f1a0 0004 	sub.w	r0, r0, #4
 80101b8:	e7e8      	b.n	801018c <StoreNetwork::SaveHostName(char const*, unsigned int)>
 80101ba:	bf00      	nop

080101bc <StoreNetwork::~StoreNetwork()>:
 80101bc:	b510      	push	{r4, lr}
 80101be:	4604      	mov	r4, r0
 80101c0:	f003 fdf6 	bl	8013db0 <operator delete(void*)>
 80101c4:	4620      	mov	r0, r4
 80101c6:	bd10      	pop	{r4, pc}

080101c8 <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 80101c8:	f1a0 0004 	sub.w	r0, r0, #4
 80101cc:	e7f6      	b.n	80101bc <StoreNetwork::~StoreNetwork()>
	...

080101d0 <StoreNetwork::Copy(networkparams::Params*)>:
 80101d0:	b507      	push	{r0, r1, r2, lr}
 80101d2:	2301      	movs	r3, #1
 80101d4:	460a      	mov	r2, r1
 80101d6:	2100      	movs	r1, #0
 80101d8:	e9cd 1300 	strd	r1, r3, [sp]
 80101dc:	4803      	ldr	r0, [pc, #12]	; (80101ec <StoreNetwork::Copy(networkparams::Params*)+0x1c>)
 80101de:	235e      	movs	r3, #94	; 0x5e
 80101e0:	6800      	ldr	r0, [r0, #0]
 80101e2:	f7ff fe9f 	bl	800ff24 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 80101e6:	b003      	add	sp, #12
 80101e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80101ec:	200029a4 	andcs	r2, r0, r4, lsr #19

080101f0 <StoreNetwork::StoreNetwork()>:
 80101f0:	4a03      	ldr	r2, [pc, #12]	; (8010200 <StoreNetwork::StoreNetwork()+0x10>)
 80101f2:	6002      	str	r2, [r0, #0]
 80101f4:	322c      	adds	r2, #44	; 0x2c
 80101f6:	6042      	str	r2, [r0, #4]
 80101f8:	4a02      	ldr	r2, [pc, #8]	; (8010204 <StoreNetwork::StoreNetwork()+0x14>)
 80101fa:	6010      	str	r0, [r2, #0]
 80101fc:	4770      	bx	lr
 80101fe:	bf00      	nop
 8010200:	08017804 	stmdaeq	r1, {r2, fp, ip, sp, lr}
 8010204:	200029b0 			; <UNDEFINED> instruction: 0x200029b0

08010208 <StoreRemoteConfig::~StoreRemoteConfig()>:
 8010208:	4770      	bx	lr
	...

0801020c <StoreRemoteConfig::Copy(TRemoteConfigParams*)>:
 801020c:	b507      	push	{r0, r1, r2, lr}
 801020e:	2300      	movs	r3, #0
 8010210:	460a      	mov	r2, r1
 8010212:	2101      	movs	r1, #1
 8010214:	e9cd 3100 	strd	r3, r1, [sp]
 8010218:	4804      	ldr	r0, [pc, #16]	; (801022c <StoreRemoteConfig::Copy(TRemoteConfigParams*)+0x20>)
 801021a:	2320      	movs	r3, #32
 801021c:	210c      	movs	r1, #12
 801021e:	6800      	ldr	r0, [r0, #0]
 8010220:	f7ff fe80 	bl	800ff24 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 8010224:	b003      	add	sp, #12
 8010226:	f85d fb04 	ldr.w	pc, [sp], #4
 801022a:	bf00      	nop
 801022c:	200029a4 	andcs	r2, r0, r4, lsr #19

08010230 <StoreRemoteConfig::Update(TRemoteConfigParams const*)>:
 8010230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010232:	2200      	movs	r2, #0
 8010234:	460b      	mov	r3, r1
 8010236:	2120      	movs	r1, #32
 8010238:	e9cd 2201 	strd	r2, r2, [sp, #4]
 801023c:	4804      	ldr	r0, [pc, #16]	; (8010250 <StoreRemoteConfig::Update(TRemoteConfigParams const*)+0x20>)
 801023e:	9100      	str	r1, [sp, #0]
 8010240:	6800      	ldr	r0, [r0, #0]
 8010242:	210c      	movs	r1, #12
 8010244:	f7ff fe2e 	bl	800fea4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010248:	b005      	add	sp, #20
 801024a:	f85d fb04 	ldr.w	pc, [sp], #4
 801024e:	bf00      	nop
 8010250:	200029a4 	andcs	r2, r0, r4, lsr #19

08010254 <StoreRemoteConfig::~StoreRemoteConfig()>:
 8010254:	b510      	push	{r4, lr}
 8010256:	4604      	mov	r4, r0
 8010258:	f003 fdaa 	bl	8013db0 <operator delete(void*)>
 801025c:	4620      	mov	r0, r4
 801025e:	bd10      	pop	{r4, pc}

08010260 <StoreRemoteConfig::StoreRemoteConfig()>:
 8010260:	4a02      	ldr	r2, [pc, #8]	; (801026c <StoreRemoteConfig::StoreRemoteConfig()+0xc>)
 8010262:	6002      	str	r2, [r0, #0]
 8010264:	4a02      	ldr	r2, [pc, #8]	; (8010270 <StoreRemoteConfig::StoreRemoteConfig()+0x10>)
 8010266:	6010      	str	r0, [r2, #0]
 8010268:	4770      	bx	lr
 801026a:	bf00      	nop
 801026c:	08017854 	stmdaeq	r1, {r2, r4, r6, fp, ip, sp, lr}
 8010270:	200029b4 			; <UNDEFINED> instruction: 0x200029b4

08010274 <StoreArtNet::SaveUniverse(unsigned int, unsigned short)>:
 8010274:	4770      	bx	lr

08010276 <non-virtual thunk to StoreArtNet::SaveUniverse(unsigned int, unsigned short)>:
 8010276:	4770      	bx	lr

08010278 <StoreArtNet::~StoreArtNet()>:
 8010278:	4770      	bx	lr

0801027a <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 801027a:	3804      	subs	r0, #4
 801027c:	4770      	bx	lr
	...

08010280 <StoreArtNet::Update(artnetparams::Params const*)>:
 8010280:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010282:	2200      	movs	r2, #0
 8010284:	460b      	mov	r3, r1
 8010286:	2187      	movs	r1, #135	; 0x87
 8010288:	e9cd 2201 	strd	r2, r2, [sp, #4]
 801028c:	4804      	ldr	r0, [pc, #16]	; (80102a0 <StoreArtNet::Update(artnetparams::Params const*)+0x20>)
 801028e:	9100      	str	r1, [sp, #0]
 8010290:	6800      	ldr	r0, [r0, #0]
 8010292:	2101      	movs	r1, #1
 8010294:	f7ff fe06 	bl	800fea4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010298:	b005      	add	sp, #20
 801029a:	f85d fb04 	ldr.w	pc, [sp], #4
 801029e:	bf00      	nop
 80102a0:	200029a4 	andcs	r2, r0, r4, lsr #19

080102a4 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 80102a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80102a6:	4b0d      	ldr	r3, [pc, #52]	; (80102dc <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x38>)
 80102a8:	f88d 2017 	strb.w	r2, [sp, #23]
 80102ac:	681a      	ldr	r2, [r3, #0]
 80102ae:	428a      	cmp	r2, r1
 80102b0:	d811      	bhi.n	80102d6 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x32>
 80102b2:	1a8a      	subs	r2, r1, r2
 80102b4:	2a03      	cmp	r2, #3
 80102b6:	d80e      	bhi.n	80102d6 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x32>
 80102b8:	2300      	movs	r3, #0
 80102ba:	9302      	str	r3, [sp, #8]
 80102bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80102c0:	2101      	movs	r1, #1
 80102c2:	4093      	lsls	r3, r2
 80102c4:	4806      	ldr	r0, [pc, #24]	; (80102e0 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x3c>)
 80102c6:	9301      	str	r3, [sp, #4]
 80102c8:	9100      	str	r1, [sp, #0]
 80102ca:	6800      	ldr	r0, [r0, #0]
 80102cc:	f10d 0317 	add.w	r3, sp, #23
 80102d0:	3267      	adds	r2, #103	; 0x67
 80102d2:	f7ff fde7 	bl	800fea4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80102d6:	b007      	add	sp, #28
 80102d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80102dc:	200029b8 			; <UNDEFINED> instruction: 0x200029b8
 80102e0:	200029a4 	andcs	r2, r0, r4, lsr #19

080102e4 <non-virtual thunk to StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 80102e4:	f1a0 0004 	sub.w	r0, r0, #4
 80102e8:	f7ff bfdc 	b.w	80102a4 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>

080102ec <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)>:
 80102ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80102ee:	f88d 2017 	strb.w	r2, [sp, #23]
 80102f2:	b951      	cbnz	r1, 801030a <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)+0x1e>
 80102f4:	9102      	str	r1, [sp, #8]
 80102f6:	2204      	movs	r2, #4
 80102f8:	2101      	movs	r1, #1
 80102fa:	e9cd 1200 	strd	r1, r2, [sp]
 80102fe:	4804      	ldr	r0, [pc, #16]	; (8010310 <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)+0x24>)
 8010300:	f10d 0317 	add.w	r3, sp, #23
 8010304:	6800      	ldr	r0, [r0, #0]
 8010306:	f7ff fdcd 	bl	800fea4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801030a:	b007      	add	sp, #28
 801030c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010310:	200029a4 	andcs	r2, r0, r4, lsr #19

08010314 <non-virtual thunk to StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)>:
 8010314:	f1a0 0004 	sub.w	r0, r0, #4
 8010318:	f7ff bfe8 	b.w	80102ec <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)>

0801031c <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)>:
 801031c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801031e:	f88d 2017 	strb.w	r2, [sp, #23]
 8010322:	b959      	cbnz	r1, 801033c <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)+0x20>
 8010324:	2308      	movs	r3, #8
 8010326:	9102      	str	r1, [sp, #8]
 8010328:	2101      	movs	r1, #1
 801032a:	e9cd 1300 	strd	r1, r3, [sp]
 801032e:	4805      	ldr	r0, [pc, #20]	; (8010344 <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)+0x28>)
 8010330:	2205      	movs	r2, #5
 8010332:	6800      	ldr	r0, [r0, #0]
 8010334:	f10d 0317 	add.w	r3, sp, #23
 8010338:	f7ff fdb4 	bl	800fea4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801033c:	b007      	add	sp, #28
 801033e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010342:	bf00      	nop
 8010344:	200029a4 	andcs	r2, r0, r4, lsr #19

08010348 <non-virtual thunk to StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)>:
 8010348:	f1a0 0004 	sub.w	r0, r0, #4
 801034c:	f7ff bfe6 	b.w	801031c <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)>

08010350 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 8010350:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010352:	4b0c      	ldr	r3, [pc, #48]	; (8010384 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x34>)
 8010354:	9205      	str	r2, [sp, #20]
 8010356:	681a      	ldr	r2, [r3, #0]
 8010358:	428a      	cmp	r2, r1
 801035a:	d810      	bhi.n	801037e <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x2e>
 801035c:	1a8a      	subs	r2, r1, r2
 801035e:	2a03      	cmp	r2, #3
 8010360:	d80d      	bhi.n	801037e <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x2e>
 8010362:	2300      	movs	r3, #0
 8010364:	9302      	str	r3, [sp, #8]
 8010366:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801036a:	2101      	movs	r1, #1
 801036c:	4093      	lsls	r3, r2
 801036e:	4806      	ldr	r0, [pc, #24]	; (8010388 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x38>)
 8010370:	9301      	str	r3, [sp, #4]
 8010372:	9100      	str	r1, [sp, #0]
 8010374:	6800      	ldr	r0, [r0, #0]
 8010376:	ab05      	add	r3, sp, #20
 8010378:	326c      	adds	r2, #108	; 0x6c
 801037a:	f7ff fd93 	bl	800fea4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801037e:	b007      	add	sp, #28
 8010380:	f85d fb04 	ldr.w	pc, [sp], #4
 8010384:	200029b8 			; <UNDEFINED> instruction: 0x200029b8
 8010388:	200029a4 	andcs	r2, r0, r4, lsr #19

0801038c <non-virtual thunk to StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 801038c:	f1a0 0004 	sub.w	r0, r0, #4
 8010390:	f7ff bfde 	b.w	8010350 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>

08010394 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 8010394:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010396:	4b0c      	ldr	r3, [pc, #48]	; (80103c8 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x34>)
 8010398:	9205      	str	r2, [sp, #20]
 801039a:	681a      	ldr	r2, [r3, #0]
 801039c:	428a      	cmp	r2, r1
 801039e:	d810      	bhi.n	80103c2 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x2e>
 80103a0:	1a8a      	subs	r2, r1, r2
 80103a2:	2a03      	cmp	r2, #3
 80103a4:	d80d      	bhi.n	80103c2 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x2e>
 80103a6:	2300      	movs	r3, #0
 80103a8:	9302      	str	r3, [sp, #8]
 80103aa:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80103ae:	2101      	movs	r1, #1
 80103b0:	4093      	lsls	r3, r2
 80103b2:	4806      	ldr	r0, [pc, #24]	; (80103cc <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x38>)
 80103b4:	9301      	str	r3, [sp, #4]
 80103b6:	9100      	str	r1, [sp, #0]
 80103b8:	6800      	ldr	r0, [r0, #0]
 80103ba:	ab05      	add	r3, sp, #20
 80103bc:	3271      	adds	r2, #113	; 0x71
 80103be:	f7ff fd71 	bl	800fea4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80103c2:	b007      	add	sp, #28
 80103c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80103c8:	200029b8 			; <UNDEFINED> instruction: 0x200029b8
 80103cc:	200029a4 	andcs	r2, r0, r4, lsr #19

080103d0 <non-virtual thunk to StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 80103d0:	f1a0 0004 	sub.w	r0, r0, #4
 80103d4:	f7ff bfde 	b.w	8010394 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>

080103d8 <StoreArtNet::SaveLongName(char const*)>:
 80103d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80103da:	460b      	mov	r3, r1
 80103dc:	2200      	movs	r2, #0
 80103de:	2101      	movs	r1, #1
 80103e0:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80103e4:	2240      	movs	r2, #64	; 0x40
 80103e6:	4804      	ldr	r0, [pc, #16]	; (80103f8 <StoreArtNet::SaveLongName(char const*)+0x20>)
 80103e8:	9200      	str	r2, [sp, #0]
 80103ea:	6800      	ldr	r0, [r0, #0]
 80103ec:	221e      	movs	r2, #30
 80103ee:	f7ff fd59 	bl	800fea4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80103f2:	b005      	add	sp, #20
 80103f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80103f8:	200029a4 	andcs	r2, r0, r4, lsr #19

080103fc <non-virtual thunk to StoreArtNet::SaveLongName(char const*)>:
 80103fc:	f1a0 0004 	sub.w	r0, r0, #4
 8010400:	e7ea      	b.n	80103d8 <StoreArtNet::SaveLongName(char const*)>
 8010402:	bf00      	nop

08010404 <StoreArtNet::SaveShortName(char const*)>:
 8010404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010406:	460b      	mov	r3, r1
 8010408:	2202      	movs	r2, #2
 801040a:	2100      	movs	r1, #0
 801040c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8010410:	2212      	movs	r2, #18
 8010412:	4805      	ldr	r0, [pc, #20]	; (8010428 <StoreArtNet::SaveShortName(char const*)+0x24>)
 8010414:	9200      	str	r2, [sp, #0]
 8010416:	2101      	movs	r1, #1
 8010418:	220c      	movs	r2, #12
 801041a:	6800      	ldr	r0, [r0, #0]
 801041c:	f7ff fd42 	bl	800fea4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010420:	b005      	add	sp, #20
 8010422:	f85d fb04 	ldr.w	pc, [sp], #4
 8010426:	bf00      	nop
 8010428:	200029a4 	andcs	r2, r0, r4, lsr #19

0801042c <non-virtual thunk to StoreArtNet::SaveShortName(char const*)>:
 801042c:	f1a0 0004 	sub.w	r0, r0, #4
 8010430:	e7e8      	b.n	8010404 <StoreArtNet::SaveShortName(char const*)>
 8010432:	bf00      	nop

08010434 <StoreArtNet::SaveFailSafe(unsigned char)>:
 8010434:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010436:	2310      	movs	r3, #16
 8010438:	2200      	movs	r2, #0
 801043a:	f88d 1017 	strb.w	r1, [sp, #23]
 801043e:	2101      	movs	r1, #1
 8010440:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010444:	4805      	ldr	r0, [pc, #20]	; (801045c <StoreArtNet::SaveFailSafe(unsigned char)+0x28>)
 8010446:	9100      	str	r1, [sp, #0]
 8010448:	2206      	movs	r2, #6
 801044a:	6800      	ldr	r0, [r0, #0]
 801044c:	f10d 0317 	add.w	r3, sp, #23
 8010450:	f7ff fd28 	bl	800fea4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010454:	b007      	add	sp, #28
 8010456:	f85d fb04 	ldr.w	pc, [sp], #4
 801045a:	bf00      	nop
 801045c:	200029a4 	andcs	r2, r0, r4, lsr #19

08010460 <non-virtual thunk to StoreArtNet::SaveFailSafe(unsigned char)>:
 8010460:	f1a0 0004 	sub.w	r0, r0, #4
 8010464:	e7e6      	b.n	8010434 <StoreArtNet::SaveFailSafe(unsigned char)>
 8010466:	bf00      	nop

08010468 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)>:
 8010468:	b570      	push	{r4, r5, r6, lr}
 801046a:	4b1b      	ldr	r3, [pc, #108]	; (80104d8 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x70>)
 801046c:	4615      	mov	r5, r2
 801046e:	681c      	ldr	r4, [r3, #0]
 8010470:	b086      	sub	sp, #24
 8010472:	428c      	cmp	r4, r1
 8010474:	d829      	bhi.n	80104ca <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x62>
 8010476:	1b0c      	subs	r4, r1, r4
 8010478:	2c03      	cmp	r4, #3
 801047a:	d826      	bhi.n	80104ca <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x62>
 801047c:	2308      	movs	r3, #8
 801047e:	2200      	movs	r2, #0
 8010480:	4e16      	ldr	r6, [pc, #88]	; (80104dc <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x74>)
 8010482:	e9cd 3200 	strd	r3, r2, [sp]
 8010486:	2101      	movs	r1, #1
 8010488:	2302      	movs	r3, #2
 801048a:	f10d 0216 	add.w	r2, sp, #22
 801048e:	6830      	ldr	r0, [r6, #0]
 8010490:	f7ff fd48 	bl	800ff24 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 8010494:	2201      	movs	r2, #1
 8010496:	f104 0308 	add.w	r3, r4, #8
 801049a:	fa02 f303 	lsl.w	r3, r2, r3
 801049e:	40a2      	lsls	r2, r4
 80104a0:	4313      	orrs	r3, r2
 80104a2:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80104a6:	b29b      	uxth	r3, r3
 80104a8:	ea21 0203 	bic.w	r2, r1, r3
 80104ac:	b97d      	cbnz	r5, 80104ce <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x66>
 80104ae:	f8ad 2016 	strh.w	r2, [sp, #22]
 80104b2:	2300      	movs	r3, #0
 80104b4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80104b8:	2302      	movs	r3, #2
 80104ba:	2208      	movs	r2, #8
 80104bc:	9300      	str	r3, [sp, #0]
 80104be:	2101      	movs	r1, #1
 80104c0:	6830      	ldr	r0, [r6, #0]
 80104c2:	f10d 0316 	add.w	r3, sp, #22
 80104c6:	f7ff fced 	bl	800fea4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80104ca:	b006      	add	sp, #24
 80104cc:	bd70      	pop	{r4, r5, r6, pc}
 80104ce:	4319      	orrs	r1, r3
 80104d0:	f8ad 1016 	strh.w	r1, [sp, #22]
 80104d4:	e7ed      	b.n	80104b2 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x4a>
 80104d6:	bf00      	nop
 80104d8:	200029b8 			; <UNDEFINED> instruction: 0x200029b8
 80104dc:	200029a4 	andcs	r2, r0, r4, lsr #19

080104e0 <non-virtual thunk to StoreArtNet::SaveRdmEnabled(unsigned int, bool)>:
 80104e0:	f1a0 0004 	sub.w	r0, r0, #4
 80104e4:	f7ff bfc0 	b.w	8010468 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)>

080104e8 <StoreArtNet::Copy(artnetparams::Params*)>:
 80104e8:	b507      	push	{r0, r1, r2, lr}
 80104ea:	2300      	movs	r3, #0
 80104ec:	460a      	mov	r2, r1
 80104ee:	2101      	movs	r1, #1
 80104f0:	e9cd 3100 	strd	r3, r1, [sp]
 80104f4:	4803      	ldr	r0, [pc, #12]	; (8010504 <StoreArtNet::Copy(artnetparams::Params*)+0x1c>)
 80104f6:	2387      	movs	r3, #135	; 0x87
 80104f8:	6800      	ldr	r0, [r0, #0]
 80104fa:	f7ff fd13 	bl	800ff24 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 80104fe:	b003      	add	sp, #12
 8010500:	f85d fb04 	ldr.w	pc, [sp], #4
 8010504:	200029a4 	andcs	r2, r0, r4, lsr #19

08010508 <StoreArtNet::~StoreArtNet()>:
 8010508:	b510      	push	{r4, lr}
 801050a:	4604      	mov	r4, r0
 801050c:	f003 fc50 	bl	8013db0 <operator delete(void*)>
 8010510:	4620      	mov	r0, r4
 8010512:	bd10      	pop	{r4, pc}

08010514 <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 8010514:	f1a0 0004 	sub.w	r0, r0, #4
 8010518:	e7f6      	b.n	8010508 <StoreArtNet::~StoreArtNet()>
	...

0801051c <StoreArtNet::StoreArtNet(unsigned int)>:
 801051c:	b510      	push	{r4, lr}
 801051e:	4a05      	ldr	r2, [pc, #20]	; (8010534 <StoreArtNet::StoreArtNet(unsigned int)+0x18>)
 8010520:	4b05      	ldr	r3, [pc, #20]	; (8010538 <StoreArtNet::StoreArtNet(unsigned int)+0x1c>)
 8010522:	f102 0408 	add.w	r4, r2, #8
 8010526:	3248      	adds	r2, #72	; 0x48
 8010528:	6042      	str	r2, [r0, #4]
 801052a:	4a04      	ldr	r2, [pc, #16]	; (801053c <StoreArtNet::StoreArtNet(unsigned int)+0x20>)
 801052c:	6004      	str	r4, [r0, #0]
 801052e:	6010      	str	r0, [r2, #0]
 8010530:	6019      	str	r1, [r3, #0]
 8010532:	bd10      	pop	{r4, pc}
 8010534:	08017864 	stmdaeq	r1, {r2, r5, r6, fp, ip, sp, lr}
 8010538:	200029b8 			; <UNDEFINED> instruction: 0x200029b8
 801053c:	200029bc 			; <UNDEFINED> instruction: 0x200029bc

08010540 <StorePixelDmx::~StorePixelDmx()>:
 8010540:	4770      	bx	lr

08010542 <non-virtual thunk to StorePixelDmx::~StorePixelDmx()>:
 8010542:	3804      	subs	r0, #4
 8010544:	4770      	bx	lr
	...

08010548 <StorePixelDmx::Update(pixeldmxparams::Params const*)>:
 8010548:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801054a:	2200      	movs	r2, #0
 801054c:	460b      	mov	r3, r1
 801054e:	2118      	movs	r1, #24
 8010550:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8010554:	4804      	ldr	r0, [pc, #16]	; (8010568 <StorePixelDmx::Update(pixeldmxparams::Params const*)+0x20>)
 8010556:	9100      	str	r1, [sp, #0]
 8010558:	6800      	ldr	r0, [r0, #0]
 801055a:	2103      	movs	r1, #3
 801055c:	f7ff fca2 	bl	800fea4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010560:	b005      	add	sp, #20
 8010562:	f85d fb04 	ldr.w	pc, [sp], #4
 8010566:	bf00      	nop
 8010568:	200029a4 	andcs	r2, r0, r4, lsr #19

0801056c <StorePixelDmx::SaveDmxStartAddress(unsigned short)>:
 801056c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801056e:	2304      	movs	r3, #4
 8010570:	2200      	movs	r2, #0
 8010572:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010576:	2302      	movs	r3, #2
 8010578:	4806      	ldr	r0, [pc, #24]	; (8010594 <StorePixelDmx::SaveDmxStartAddress(unsigned short)+0x28>)
 801057a:	9300      	str	r3, [sp, #0]
 801057c:	f8ad 1016 	strh.w	r1, [sp, #22]
 8010580:	2207      	movs	r2, #7
 8010582:	2103      	movs	r1, #3
 8010584:	6800      	ldr	r0, [r0, #0]
 8010586:	f10d 0316 	add.w	r3, sp, #22
 801058a:	f7ff fc8b 	bl	800fea4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801058e:	b007      	add	sp, #28
 8010590:	f85d fb04 	ldr.w	pc, [sp], #4
 8010594:	200029a4 	andcs	r2, r0, r4, lsr #19

08010598 <non-virtual thunk to StorePixelDmx::SaveDmxStartAddress(unsigned short)>:
 8010598:	f1a0 0004 	sub.w	r0, r0, #4
 801059c:	e7e6      	b.n	801056c <StorePixelDmx::SaveDmxStartAddress(unsigned short)>
 801059e:	bf00      	nop

080105a0 <StorePixelDmx::SaveTestPattern(unsigned char)>:
 80105a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80105a2:	2308      	movs	r3, #8
 80105a4:	2200      	movs	r2, #0
 80105a6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80105aa:	2301      	movs	r3, #1
 80105ac:	4806      	ldr	r0, [pc, #24]	; (80105c8 <StorePixelDmx::SaveTestPattern(unsigned char)+0x28>)
 80105ae:	9300      	str	r3, [sp, #0]
 80105b0:	f88d 1017 	strb.w	r1, [sp, #23]
 80105b4:	2210      	movs	r2, #16
 80105b6:	2103      	movs	r1, #3
 80105b8:	6800      	ldr	r0, [r0, #0]
 80105ba:	f10d 0317 	add.w	r3, sp, #23
 80105be:	f7ff fc71 	bl	800fea4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80105c2:	b007      	add	sp, #28
 80105c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80105c8:	200029a4 	andcs	r2, r0, r4, lsr #19

080105cc <non-virtual thunk to StorePixelDmx::SaveTestPattern(unsigned char)>:
 80105cc:	f1a0 0004 	sub.w	r0, r0, #4
 80105d0:	e7e6      	b.n	80105a0 <StorePixelDmx::SaveTestPattern(unsigned char)>
 80105d2:	bf00      	nop

080105d4 <StorePixelDmx::SaveMap(unsigned char)>:
 80105d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80105d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80105da:	2200      	movs	r2, #0
 80105dc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80105e0:	2301      	movs	r3, #1
 80105e2:	4807      	ldr	r0, [pc, #28]	; (8010600 <StorePixelDmx::SaveMap(unsigned char)+0x2c>)
 80105e4:	9300      	str	r3, [sp, #0]
 80105e6:	f88d 1017 	strb.w	r1, [sp, #23]
 80105ea:	2213      	movs	r2, #19
 80105ec:	2103      	movs	r1, #3
 80105ee:	6800      	ldr	r0, [r0, #0]
 80105f0:	f10d 0317 	add.w	r3, sp, #23
 80105f4:	f7ff fc56 	bl	800fea4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80105f8:	b007      	add	sp, #28
 80105fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80105fe:	bf00      	nop
 8010600:	200029a4 	andcs	r2, r0, r4, lsr #19

08010604 <non-virtual thunk to StorePixelDmx::SaveMap(unsigned char)>:
 8010604:	f1a0 0004 	sub.w	r0, r0, #4
 8010608:	e7e4      	b.n	80105d4 <StorePixelDmx::SaveMap(unsigned char)>
 801060a:	bf00      	nop

0801060c <StorePixelDmx::SaveGroupingCount(unsigned short)>:
 801060c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801060e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010612:	2200      	movs	r2, #0
 8010614:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010618:	2302      	movs	r3, #2
 801061a:	4807      	ldr	r0, [pc, #28]	; (8010638 <StorePixelDmx::SaveGroupingCount(unsigned short)+0x2c>)
 801061c:	9300      	str	r3, [sp, #0]
 801061e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8010622:	2211      	movs	r2, #17
 8010624:	2103      	movs	r1, #3
 8010626:	6800      	ldr	r0, [r0, #0]
 8010628:	f10d 0316 	add.w	r3, sp, #22
 801062c:	f7ff fc3a 	bl	800fea4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010630:	b007      	add	sp, #28
 8010632:	f85d fb04 	ldr.w	pc, [sp], #4
 8010636:	bf00      	nop
 8010638:	200029a4 	andcs	r2, r0, r4, lsr #19

0801063c <non-virtual thunk to StorePixelDmx::SaveGroupingCount(unsigned short)>:
 801063c:	f1a0 0004 	sub.w	r0, r0, #4
 8010640:	e7e4      	b.n	801060c <StorePixelDmx::SaveGroupingCount(unsigned short)>
 8010642:	bf00      	nop

08010644 <StorePixelDmx::SaveCount(unsigned short)>:
 8010644:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010646:	2302      	movs	r3, #2
 8010648:	2200      	movs	r2, #0
 801064a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801064e:	4807      	ldr	r0, [pc, #28]	; (801066c <StorePixelDmx::SaveCount(unsigned short)+0x28>)
 8010650:	9300      	str	r3, [sp, #0]
 8010652:	f8ad 1016 	strh.w	r1, [sp, #22]
 8010656:	2205      	movs	r2, #5
 8010658:	2103      	movs	r1, #3
 801065a:	6800      	ldr	r0, [r0, #0]
 801065c:	f10d 0316 	add.w	r3, sp, #22
 8010660:	f7ff fc20 	bl	800fea4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010664:	b007      	add	sp, #28
 8010666:	f85d fb04 	ldr.w	pc, [sp], #4
 801066a:	bf00      	nop
 801066c:	200029a4 	andcs	r2, r0, r4, lsr #19

08010670 <non-virtual thunk to StorePixelDmx::SaveCount(unsigned short)>:
 8010670:	f1a0 0004 	sub.w	r0, r0, #4
 8010674:	e7e6      	b.n	8010644 <StorePixelDmx::SaveCount(unsigned short)>
 8010676:	bf00      	nop

08010678 <StorePixelDmx::SaveType(unsigned char)>:
 8010678:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801067a:	2301      	movs	r3, #1
 801067c:	2200      	movs	r2, #0
 801067e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010682:	4807      	ldr	r0, [pc, #28]	; (80106a0 <StorePixelDmx::SaveType(unsigned char)+0x28>)
 8010684:	9300      	str	r3, [sp, #0]
 8010686:	f88d 1017 	strb.w	r1, [sp, #23]
 801068a:	2204      	movs	r2, #4
 801068c:	2103      	movs	r1, #3
 801068e:	6800      	ldr	r0, [r0, #0]
 8010690:	f10d 0317 	add.w	r3, sp, #23
 8010694:	f7ff fc06 	bl	800fea4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010698:	b007      	add	sp, #28
 801069a:	f85d fb04 	ldr.w	pc, [sp], #4
 801069e:	bf00      	nop
 80106a0:	200029a4 	andcs	r2, r0, r4, lsr #19

080106a4 <non-virtual thunk to StorePixelDmx::SaveType(unsigned char)>:
 80106a4:	f1a0 0004 	sub.w	r0, r0, #4
 80106a8:	e7e6      	b.n	8010678 <StorePixelDmx::SaveType(unsigned char)>
 80106aa:	bf00      	nop

080106ac <StorePixelDmx::~StorePixelDmx()>:
 80106ac:	b510      	push	{r4, lr}
 80106ae:	4604      	mov	r4, r0
 80106b0:	f003 fb7e 	bl	8013db0 <operator delete(void*)>
 80106b4:	4620      	mov	r0, r4
 80106b6:	bd10      	pop	{r4, pc}

080106b8 <non-virtual thunk to StorePixelDmx::~StorePixelDmx()>:
 80106b8:	f1a0 0004 	sub.w	r0, r0, #4
 80106bc:	e7f6      	b.n	80106ac <StorePixelDmx::~StorePixelDmx()>
	...

080106c0 <StorePixelDmx::Copy(pixeldmxparams::Params*)>:
 80106c0:	b507      	push	{r0, r1, r2, lr}
 80106c2:	2300      	movs	r3, #0
 80106c4:	460a      	mov	r2, r1
 80106c6:	2101      	movs	r1, #1
 80106c8:	e9cd 3100 	strd	r3, r1, [sp]
 80106cc:	4804      	ldr	r0, [pc, #16]	; (80106e0 <StorePixelDmx::Copy(pixeldmxparams::Params*)+0x20>)
 80106ce:	2318      	movs	r3, #24
 80106d0:	2103      	movs	r1, #3
 80106d2:	6800      	ldr	r0, [r0, #0]
 80106d4:	f7ff fc26 	bl	800ff24 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 80106d8:	b003      	add	sp, #12
 80106da:	f85d fb04 	ldr.w	pc, [sp], #4
 80106de:	bf00      	nop
 80106e0:	200029a4 	andcs	r2, r0, r4, lsr #19

080106e4 <StorePixelDmx::StorePixelDmx()>:
 80106e4:	4a03      	ldr	r2, [pc, #12]	; (80106f4 <StorePixelDmx::StorePixelDmx()+0x10>)
 80106e6:	6002      	str	r2, [r0, #0]
 80106e8:	3230      	adds	r2, #48	; 0x30
 80106ea:	6042      	str	r2, [r0, #4]
 80106ec:	4a02      	ldr	r2, [pc, #8]	; (80106f8 <StorePixelDmx::StorePixelDmx()+0x14>)
 80106ee:	6010      	str	r0, [r2, #0]
 80106f0:	4770      	bx	lr
 80106f2:	bf00      	nop
 80106f4:	080178e4 	stmdaeq	r1, {r2, r5, r6, r7, fp, ip, sp, lr}
 80106f8:	200029c4 	andcs	r2, r0, r4, asr #19

080106fc <FlashRom::FlashRom()>:
 80106fc:	4b07      	ldr	r3, [pc, #28]	; (801071c <FlashRom::FlashRom()+0x20>)
 80106fe:	b510      	push	{r4, lr}
 8010700:	6018      	str	r0, [r3, #0]
 8010702:	2301      	movs	r3, #1
 8010704:	4604      	mov	r4, r0
 8010706:	7003      	strb	r3, [r0, #0]
 8010708:	4b05      	ldr	r3, [pc, #20]	; (8010720 <FlashRom::FlashRom()+0x24>)
 801070a:	4906      	ldr	r1, [pc, #24]	; (8010724 <FlashRom::FlashRom()+0x28>)
 801070c:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8010710:	4805      	ldr	r0, [pc, #20]	; (8010728 <FlashRom::FlashRom()+0x2c>)
 8010712:	029a      	lsls	r2, r3, #10
 8010714:	f7f8 fc8a 	bl	800902c <printf>
 8010718:	4620      	mov	r0, r4
 801071a:	bd10      	pop	{r4, pc}
 801071c:	200029c8 	andcs	r2, r0, r8, asr #19
 8010720:	1ffff700 	svcne	0x00fff700
 8010724:	0801678d 	stmdaeq	r1, {r0, r2, r3, r7, r8, r9, sl, sp, lr}
 8010728:	08017934 	stmdaeq	r1, {r2, r4, r5, r8, fp, ip, sp, lr}

0801072c <FlashRom::GetSize() const>:
 801072c:	4b02      	ldr	r3, [pc, #8]	; (8010738 <FlashRom::GetSize() const+0xc>)
 801072e:	f8b3 00e0 	ldrh.w	r0, [r3, #224]	; 0xe0
 8010732:	0280      	lsls	r0, r0, #10
 8010734:	4770      	bx	lr
 8010736:	bf00      	nop
 8010738:	1ffff700 	svcne	0x00fff700

0801073c <FlashRom::GetSectorSize() const>:
 801073c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8010740:	4770      	bx	lr

08010742 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>:
 8010742:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8010746:	441a      	add	r2, r3
 8010748:	4293      	cmp	r3, r2
 801074a:	d104      	bne.n	8010756 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x14>
 801074c:	2200      	movs	r2, #0
 801074e:	9b00      	ldr	r3, [sp, #0]
 8010750:	2001      	movs	r0, #1
 8010752:	601a      	str	r2, [r3, #0]
 8010754:	4770      	bx	lr
 8010756:	f851 0b04 	ldr.w	r0, [r1], #4
 801075a:	f843 0b04 	str.w	r0, [r3], #4
 801075e:	e7f3      	b.n	8010748 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x6>

08010760 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>:
 8010760:	2000      	movs	r0, #0
 8010762:	b538      	push	{r3, r4, r5, lr}
 8010764:	4c47      	ldr	r4, [pc, #284]	; (8010884 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x124>)
 8010766:	6018      	str	r0, [r3, #0]
 8010768:	6823      	ldr	r3, [r4, #0]
 801076a:	2b04      	cmp	r3, #4
 801076c:	f200 8082 	bhi.w	8010874 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 8010770:	e8df f003 	tbb	[pc, r3]
 8010774:	78452003 	stmdavc	r5, {r0, r1, sp}^
 8010778:	4b430080 	blmi	90d0980 <__exidx_end+0x10b8668>
 801077c:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8010780:	6019      	str	r1, [r3, #0]
 8010782:	4b42      	ldr	r3, [pc, #264]	; (801088c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 8010784:	601a      	str	r2, [r3, #0]
 8010786:	4b42      	ldr	r3, [pc, #264]	; (8010890 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x130>)
 8010788:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 801078c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010790:	4b40      	ldr	r3, [pc, #256]	; (8010894 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8010792:	d807      	bhi.n	80107a4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x44>
 8010794:	2201      	movs	r2, #1
 8010796:	701a      	strb	r2, [r3, #0]
 8010798:	f003 fdda 	bl	8014350 <fmc_bank0_unlock>
 801079c:	2301      	movs	r3, #1
 801079e:	6023      	str	r3, [r4, #0]
 80107a0:	2000      	movs	r0, #0
 80107a2:	e026      	b.n	80107f2 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 80107a4:	4a3c      	ldr	r2, [pc, #240]	; (8010898 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x138>)
 80107a6:	4291      	cmp	r1, r2
 80107a8:	d3f4      	bcc.n	8010794 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x34>
 80107aa:	2200      	movs	r2, #0
 80107ac:	701a      	strb	r2, [r3, #0]
 80107ae:	f003 fddd 	bl	801436c <fmc_bank1_unlock>
 80107b2:	e7f3      	b.n	801079c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 80107b4:	4d37      	ldr	r5, [pc, #220]	; (8010894 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 80107b6:	782b      	ldrb	r3, [r5, #0]
 80107b8:	b15b      	cbz	r3, 80107d2 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x72>
 80107ba:	f003 fdf5 	bl	80143a8 <fmc_bank0_state_get>
 80107be:	2801      	cmp	r0, #1
 80107c0:	d0ee      	beq.n	80107a0 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x40>
 80107c2:	7829      	ldrb	r1, [r5, #0]
 80107c4:	4b35      	ldr	r3, [pc, #212]	; (801089c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 80107c6:	b939      	cbnz	r1, 80107d8 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x78>
 80107c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80107ca:	f022 0202 	bic.w	r2, r2, #2
 80107ce:	651a      	str	r2, [r3, #80]	; 0x50
 80107d0:	e006      	b.n	80107e0 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x80>
 80107d2:	f003 fdfb 	bl	80143cc <fmc_bank1_state_get>
 80107d6:	e7f2      	b.n	80107be <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x5e>
 80107d8:	691a      	ldr	r2, [r3, #16]
 80107da:	f022 0202 	bic.w	r2, r2, #2
 80107de:	611a      	str	r2, [r3, #16]
 80107e0:	4b2a      	ldr	r3, [pc, #168]	; (801088c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	b94b      	cbnz	r3, 80107fa <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x9a>
 80107e6:	b129      	cbz	r1, 80107f4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x94>
 80107e8:	f003 fdce 	bl	8014388 <fmc_bank0_lock>
 80107ec:	2300      	movs	r3, #0
 80107ee:	2001      	movs	r0, #1
 80107f0:	6023      	str	r3, [r4, #0]
 80107f2:	bd38      	pop	{r3, r4, r5, pc}
 80107f4:	f003 fdd0 	bl	8014398 <fmc_bank1_lock>
 80107f8:	e7f8      	b.n	80107ec <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x8c>
 80107fa:	2302      	movs	r3, #2
 80107fc:	e7cf      	b.n	801079e <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3e>
 80107fe:	4923      	ldr	r1, [pc, #140]	; (801088c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 8010800:	680b      	ldr	r3, [r1, #0]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d0ca      	beq.n	801079c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 8010806:	4b23      	ldr	r3, [pc, #140]	; (8010894 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8010808:	4a1f      	ldr	r2, [pc, #124]	; (8010888 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x128>)
 801080a:	7818      	ldrb	r0, [r3, #0]
 801080c:	4b23      	ldr	r3, [pc, #140]	; (801089c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 801080e:	b190      	cbz	r0, 8010836 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd6>
 8010810:	6918      	ldr	r0, [r3, #16]
 8010812:	f040 0002 	orr.w	r0, r0, #2
 8010816:	6118      	str	r0, [r3, #16]
 8010818:	6810      	ldr	r0, [r2, #0]
 801081a:	6158      	str	r0, [r3, #20]
 801081c:	6918      	ldr	r0, [r3, #16]
 801081e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8010822:	6118      	str	r0, [r3, #16]
 8010824:	680b      	ldr	r3, [r1, #0]
 8010826:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801082a:	600b      	str	r3, [r1, #0]
 801082c:	6813      	ldr	r3, [r2, #0]
 801082e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010832:	6013      	str	r3, [r2, #0]
 8010834:	e7b2      	b.n	801079c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 8010836:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8010838:	f040 0002 	orr.w	r0, r0, #2
 801083c:	6518      	str	r0, [r3, #80]	; 0x50
 801083e:	6810      	ldr	r0, [r2, #0]
 8010840:	6558      	str	r0, [r3, #84]	; 0x54
 8010842:	69dd      	ldr	r5, [r3, #28]
 8010844:	07ad      	lsls	r5, r5, #30
 8010846:	bf48      	it	mi
 8010848:	6158      	strmi	r0, [r3, #20]
 801084a:	4814      	ldr	r0, [pc, #80]	; (801089c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 801084c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801084e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010852:	6503      	str	r3, [r0, #80]	; 0x50
 8010854:	680b      	ldr	r3, [r1, #0]
 8010856:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 801085a:	600b      	str	r3, [r1, #0]
 801085c:	6813      	ldr	r3, [r2, #0]
 801085e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010862:	e7e6      	b.n	8010832 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd2>
 8010864:	4b0b      	ldr	r3, [pc, #44]	; (8010894 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8010866:	781a      	ldrb	r2, [r3, #0]
 8010868:	4b0c      	ldr	r3, [pc, #48]	; (801089c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 801086a:	b132      	cbz	r2, 801087a <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x11a>
 801086c:	691a      	ldr	r2, [r3, #16]
 801086e:	f022 0201 	bic.w	r2, r2, #1
 8010872:	611a      	str	r2, [r3, #16]
 8010874:	2000      	movs	r0, #0
 8010876:	6020      	str	r0, [r4, #0]
 8010878:	e7bb      	b.n	80107f2 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 801087a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801087c:	f022 0201 	bic.w	r2, r2, #1
 8010880:	651a      	str	r2, [r3, #80]	; 0x50
 8010882:	e7f7      	b.n	8010874 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 8010884:	200029d0 	ldrdcs	r2, [r0], -r0
 8010888:	200029d4 	ldrdcs	r2, [r0], -r4
 801088c:	200029e0 	andcs	r2, r0, r0, ror #19
 8010890:	1ffff700 	svcne	0x00fff700
 8010894:	200029dc 	ldrdcs	r2, [r0], -ip
 8010898:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 801089c:	40022000 	andmi	r2, r2, r0

080108a0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>:
 80108a0:	b570      	push	{r4, r5, r6, lr}
 80108a2:	2400      	movs	r4, #0
 80108a4:	9804      	ldr	r0, [sp, #16]
 80108a6:	6004      	str	r4, [r0, #0]
 80108a8:	4c48      	ldr	r4, [pc, #288]	; (80109cc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x12c>)
 80108aa:	6820      	ldr	r0, [r4, #0]
 80108ac:	2804      	cmp	r0, #4
 80108ae:	d848      	bhi.n	8010942 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xa2>
 80108b0:	e8df f000 	tbb	[pc, r0]
 80108b4:	22847c03 	addcs	r7, r4, #768	; 0x300
 80108b8:	48450047 	stmdami	r5, {r0, r1, r2, r6}^
 80108bc:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 80108c0:	6001      	str	r1, [r0, #0]
 80108c2:	4844      	ldr	r0, [pc, #272]	; (80109d4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 80108c4:	6003      	str	r3, [r0, #0]
 80108c6:	4b44      	ldr	r3, [pc, #272]	; (80109d8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 80108c8:	601a      	str	r2, [r3, #0]
 80108ca:	4b44      	ldr	r3, [pc, #272]	; (80109dc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x13c>)
 80108cc:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 80108d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80108d4:	4b42      	ldr	r3, [pc, #264]	; (80109e0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 80108d6:	d807      	bhi.n	80108e8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x48>
 80108d8:	2201      	movs	r2, #1
 80108da:	701a      	strb	r2, [r3, #0]
 80108dc:	f003 fd38 	bl	8014350 <fmc_bank0_unlock>
 80108e0:	2303      	movs	r3, #3
 80108e2:	6023      	str	r3, [r4, #0]
 80108e4:	2000      	movs	r0, #0
 80108e6:	e026      	b.n	8010936 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 80108e8:	4a3e      	ldr	r2, [pc, #248]	; (80109e4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x144>)
 80108ea:	4291      	cmp	r1, r2
 80108ec:	d3f4      	bcc.n	80108d8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x38>
 80108ee:	2200      	movs	r2, #0
 80108f0:	701a      	strb	r2, [r3, #0]
 80108f2:	f003 fd3b 	bl	801436c <fmc_bank1_unlock>
 80108f6:	e7f3      	b.n	80108e0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 80108f8:	4d39      	ldr	r5, [pc, #228]	; (80109e0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 80108fa:	782b      	ldrb	r3, [r5, #0]
 80108fc:	b15b      	cbz	r3, 8010916 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x76>
 80108fe:	f003 fd53 	bl	80143a8 <fmc_bank0_state_get>
 8010902:	2801      	cmp	r0, #1
 8010904:	d0ee      	beq.n	80108e4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x44>
 8010906:	7829      	ldrb	r1, [r5, #0]
 8010908:	4b37      	ldr	r3, [pc, #220]	; (80109e8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 801090a:	b939      	cbnz	r1, 801091c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x7c>
 801090c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801090e:	f022 0201 	bic.w	r2, r2, #1
 8010912:	651a      	str	r2, [r3, #80]	; 0x50
 8010914:	e006      	b.n	8010924 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x84>
 8010916:	f003 fd59 	bl	80143cc <fmc_bank1_state_get>
 801091a:	e7f2      	b.n	8010902 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x62>
 801091c:	691a      	ldr	r2, [r3, #16]
 801091e:	f022 0201 	bic.w	r2, r2, #1
 8010922:	611a      	str	r2, [r3, #16]
 8010924:	4b2c      	ldr	r3, [pc, #176]	; (80109d8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	b94b      	cbnz	r3, 801093e <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x9e>
 801092a:	b129      	cbz	r1, 8010938 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x98>
 801092c:	f003 fd2c 	bl	8014388 <fmc_bank0_lock>
 8010930:	2300      	movs	r3, #0
 8010932:	2001      	movs	r0, #1
 8010934:	6023      	str	r3, [r4, #0]
 8010936:	bd70      	pop	{r4, r5, r6, pc}
 8010938:	f003 fd2e 	bl	8014398 <fmc_bank1_lock>
 801093c:	e7f8      	b.n	8010930 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x90>
 801093e:	2304      	movs	r3, #4
 8010940:	e7cf      	b.n	80108e2 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x42>
 8010942:	4a25      	ldr	r2, [pc, #148]	; (80109d8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 8010944:	6813      	ldr	r3, [r2, #0]
 8010946:	2b03      	cmp	r3, #3
 8010948:	d91a      	bls.n	8010980 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xe0>
 801094a:	4b25      	ldr	r3, [pc, #148]	; (80109e0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 801094c:	7819      	ldrb	r1, [r3, #0]
 801094e:	4b26      	ldr	r3, [pc, #152]	; (80109e8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 8010950:	b189      	cbz	r1, 8010976 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xd6>
 8010952:	6919      	ldr	r1, [r3, #16]
 8010954:	f041 0101 	orr.w	r1, r1, #1
 8010958:	6119      	str	r1, [r3, #16]
 801095a:	4d1e      	ldr	r5, [pc, #120]	; (80109d4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 801095c:	481c      	ldr	r0, [pc, #112]	; (80109d0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 801095e:	6829      	ldr	r1, [r5, #0]
 8010960:	6803      	ldr	r3, [r0, #0]
 8010962:	f851 6b04 	ldr.w	r6, [r1], #4
 8010966:	f843 6b04 	str.w	r6, [r3], #4
 801096a:	6003      	str	r3, [r0, #0]
 801096c:	6813      	ldr	r3, [r2, #0]
 801096e:	6029      	str	r1, [r5, #0]
 8010970:	3b04      	subs	r3, #4
 8010972:	6013      	str	r3, [r2, #0]
 8010974:	e7b4      	b.n	80108e0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8010976:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8010978:	f041 0101 	orr.w	r1, r1, #1
 801097c:	6519      	str	r1, [r3, #80]	; 0x50
 801097e:	e7ec      	b.n	801095a <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xba>
 8010980:	2b00      	cmp	r3, #0
 8010982:	d0ad      	beq.n	80108e0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8010984:	4b16      	ldr	r3, [pc, #88]	; (80109e0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8010986:	781a      	ldrb	r2, [r3, #0]
 8010988:	4b17      	ldr	r3, [pc, #92]	; (80109e8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 801098a:	b152      	cbz	r2, 80109a2 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x102>
 801098c:	691a      	ldr	r2, [r3, #16]
 801098e:	f042 0201 	orr.w	r2, r2, #1
 8010992:	611a      	str	r2, [r3, #16]
 8010994:	4a0f      	ldr	r2, [pc, #60]	; (80109d4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 8010996:	4b0e      	ldr	r3, [pc, #56]	; (80109d0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 8010998:	6812      	ldr	r2, [r2, #0]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	6812      	ldr	r2, [r2, #0]
 801099e:	601a      	str	r2, [r3, #0]
 80109a0:	e79e      	b.n	80108e0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 80109a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80109a4:	f042 0201 	orr.w	r2, r2, #1
 80109a8:	651a      	str	r2, [r3, #80]	; 0x50
 80109aa:	e7f3      	b.n	8010994 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xf4>
 80109ac:	4b0c      	ldr	r3, [pc, #48]	; (80109e0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 80109ae:	781a      	ldrb	r2, [r3, #0]
 80109b0:	4b0d      	ldr	r3, [pc, #52]	; (80109e8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 80109b2:	b132      	cbz	r2, 80109c2 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x122>
 80109b4:	691a      	ldr	r2, [r3, #16]
 80109b6:	f022 0202 	bic.w	r2, r2, #2
 80109ba:	611a      	str	r2, [r3, #16]
 80109bc:	2000      	movs	r0, #0
 80109be:	6020      	str	r0, [r4, #0]
 80109c0:	e7b9      	b.n	8010936 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 80109c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80109c4:	f022 0202 	bic.w	r2, r2, #2
 80109c8:	651a      	str	r2, [r3, #80]	; 0x50
 80109ca:	e7f7      	b.n	80109bc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x11c>
 80109cc:	200029d0 	ldrdcs	r2, [r0], -r0
 80109d0:	200029cc 	andcs	r2, r0, ip, asr #19
 80109d4:	200029d8 	ldrdcs	r2, [r0], -r8
 80109d8:	200029e0 	andcs	r2, r0, r0, ror #19
 80109dc:	1ffff700 	svcne	0x00fff700
 80109e0:	200029dc 	ldrdcs	r2, [r0], -ip
 80109e4:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 80109e8:	40022000 	andmi	r2, r2, r0

080109ec <net_set_ip>:
 80109ec:	b510      	push	{r4, lr}
 80109ee:	4c05      	ldr	r4, [pc, #20]	; (8010a04 <net_set_ip+0x18>)
 80109f0:	6020      	str	r0, [r4, #0]
 80109f2:	4621      	mov	r1, r4
 80109f4:	4804      	ldr	r0, [pc, #16]	; (8010a08 <net_set_ip+0x1c>)
 80109f6:	f7f6 fc65 	bl	80072c4 <arp_init>
 80109fa:	4620      	mov	r0, r4
 80109fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a00:	f001 be58 	b.w	80126b4 <ip_set_ip>
 8010a04:	200029e4 	andcs	r2, r0, r4, ror #19
 8010a08:	200029f0 	strdcs	r2, [r0], -r0

08010a0c <net_set_gw>:
 8010a0c:	4b02      	ldr	r3, [pc, #8]	; (8010a18 <net_set_gw+0xc>)
 8010a0e:	6098      	str	r0, [r3, #8]
 8010a10:	4618      	mov	r0, r3
 8010a12:	f001 be4f 	b.w	80126b4 <ip_set_ip>
 8010a16:	bf00      	nop
 8010a18:	200029e4 	andcs	r2, r0, r4, ror #19

08010a1c <net_set_dhcp>:
 8010a1c:	b570      	push	{r4, r5, r6, lr}
 8010a1e:	2400      	movs	r4, #0
 8010a20:	4605      	mov	r5, r0
 8010a22:	7014      	strb	r4, [r2, #0]
 8010a24:	4616      	mov	r6, r2
 8010a26:	4810      	ldr	r0, [pc, #64]	; (8010a68 <net_set_dhcp+0x4c>)
 8010a28:	460a      	mov	r2, r1
 8010a2a:	4910      	ldr	r1, [pc, #64]	; (8010a6c <net_set_dhcp+0x50>)
 8010a2c:	f001 fc22 	bl	8012274 <dhcp_client>
 8010a30:	42a0      	cmp	r0, r4
 8010a32:	da17      	bge.n	8010a64 <net_set_dhcp+0x48>
 8010a34:	480d      	ldr	r0, [pc, #52]	; (8010a6c <net_set_dhcp+0x50>)
 8010a36:	f000 f837 	bl	8010aa8 <rfc3927>
 8010a3a:	7030      	strb	r0, [r6, #0]
 8010a3c:	490b      	ldr	r1, [pc, #44]	; (8010a6c <net_set_dhcp+0x50>)
 8010a3e:	480a      	ldr	r0, [pc, #40]	; (8010a68 <net_set_dhcp+0x4c>)
 8010a40:	f7f6 fc40 	bl	80072c4 <arp_init>
 8010a44:	4809      	ldr	r0, [pc, #36]	; (8010a6c <net_set_dhcp+0x50>)
 8010a46:	f001 fe35 	bl	80126b4 <ip_set_ip>
 8010a4a:	4a08      	ldr	r2, [pc, #32]	; (8010a6c <net_set_dhcp+0x50>)
 8010a4c:	1e6b      	subs	r3, r5, #1
 8010a4e:	350b      	adds	r5, #11
 8010a50:	f812 1b01 	ldrb.w	r1, [r2], #1
 8010a54:	f803 1f01 	strb.w	r1, [r3, #1]!
 8010a58:	42ab      	cmp	r3, r5
 8010a5a:	d1f9      	bne.n	8010a50 <net_set_dhcp+0x34>
 8010a5c:	4b04      	ldr	r3, [pc, #16]	; (8010a70 <net_set_dhcp+0x54>)
 8010a5e:	4620      	mov	r0, r4
 8010a60:	701c      	strb	r4, [r3, #0]
 8010a62:	bd70      	pop	{r4, r5, r6, pc}
 8010a64:	2401      	movs	r4, #1
 8010a66:	e7e9      	b.n	8010a3c <net_set_dhcp+0x20>
 8010a68:	200029f0 	strdcs	r2, [r0], -r0
 8010a6c:	200029e4 	andcs	r2, r0, r4, ror #19
 8010a70:	200029f6 	strdcs	r2, [r0], -r6

08010a74 <net_dhcp_release>:
 8010a74:	b508      	push	{r3, lr}
 8010a76:	f001 fd05 	bl	8012484 <dhcp_client_release>
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	4b01      	ldr	r3, [pc, #4]	; (8010a84 <net_dhcp_release+0x10>)
 8010a7e:	701a      	strb	r2, [r3, #0]
 8010a80:	bd08      	pop	{r3, pc}
 8010a82:	bf00      	nop
 8010a84:	200029f6 	strdcs	r2, [r0], -r6

08010a88 <net_timers_run>:
 8010a88:	4b05      	ldr	r3, [pc, #20]	; (8010aa0 <net_timers_run+0x18>)
 8010a8a:	4a06      	ldr	r2, [pc, #24]	; (8010aa4 <net_timers_run+0x1c>)
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	6811      	ldr	r1, [r2, #0]
 8010a90:	4299      	cmp	r1, r3
 8010a92:	d803      	bhi.n	8010a9c <net_timers_run+0x14>
 8010a94:	3364      	adds	r3, #100	; 0x64
 8010a96:	6013      	str	r3, [r2, #0]
 8010a98:	f001 bd82 	b.w	80125a0 <igmp_timer>
 8010a9c:	4770      	bx	lr
 8010a9e:	bf00      	nop
 8010aa0:	20009dd4 	ldrdcs	r9, [r0], -r4
 8010aa4:	200029fc 	strdcs	r2, [r0], -ip

08010aa8 <rfc3927>:
 8010aa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aac:	4606      	mov	r6, r0
 8010aae:	25ff      	movs	r5, #255	; 0xff
 8010ab0:	4b18      	ldr	r3, [pc, #96]	; (8010b14 <rfc3927+0x6c>)
 8010ab2:	4f19      	ldr	r7, [pc, #100]	; (8010b18 <rfc3927+0x70>)
 8010ab4:	791a      	ldrb	r2, [r3, #4]
 8010ab6:	78dc      	ldrb	r4, [r3, #3]
 8010ab8:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8010b1c <rfc3927+0x74>
 8010abc:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 8010ac0:	f8d7 9000 	ldr.w	r9, [r7]
 8010ac4:	f8df b058 	ldr.w	fp, [pc, #88]	; 8010b20 <rfc3927+0x78>
 8010ac8:	f8df a058 	ldr.w	sl, [pc, #88]	; 8010b24 <rfc3927+0x7c>
 8010acc:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8010ad0:	4659      	mov	r1, fp
 8010ad2:	4620      	mov	r0, r4
 8010ad4:	f001 fac2 	bl	801205c <arp_cache_lookup>
 8010ad8:	b190      	cbz	r0, 8010b00 <rfc3927+0x58>
 8010ada:	ba24      	rev	r4, r4
 8010adc:	3401      	adds	r4, #1
 8010ade:	3d01      	subs	r5, #1
 8010ae0:	ba24      	rev	r4, r4
 8010ae2:	b2ad      	uxth	r5, r5
 8010ae4:	4554      	cmp	r4, sl
 8010ae6:	bf08      	it	eq
 8010ae8:	4644      	moveq	r4, r8
 8010aea:	b18d      	cbz	r5, 8010b10 <rfc3927+0x68>
 8010aec:	683b      	ldr	r3, [r7, #0]
 8010aee:	eba3 0309 	sub.w	r3, r3, r9
 8010af2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8010af6:	d3eb      	bcc.n	8010ad0 <rfc3927+0x28>
 8010af8:	2400      	movs	r4, #0
 8010afa:	4623      	mov	r3, r4
 8010afc:	4620      	mov	r0, r4
 8010afe:	e002      	b.n	8010b06 <rfc3927+0x5e>
 8010b00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010b04:	2001      	movs	r0, #1
 8010b06:	e9c6 3401 	strd	r3, r4, [r6, #4]
 8010b0a:	6034      	str	r4, [r6, #0]
 8010b0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b10:	462c      	mov	r4, r5
 8010b12:	e7f2      	b.n	8010afa <rfc3927+0x52>
 8010b14:	20002a00 	andcs	r2, r0, r0, lsl #20
 8010b18:	20009dd4 	ldrdcs	r9, [r0], -r4
 8010b1c:	0100fea9 	smlatbeq	r0, r9, lr, pc	; <UNPREDICTABLE>
 8010b20:	20002a08 	andcs	r2, r0, r8, lsl #20
 8010b24:	fffefea9 			; <UNDEFINED> instruction: 0xfffefea9

08010b28 <memcpy.isra.0>:
 8010b28:	3801      	subs	r0, #1
 8010b2a:	440a      	add	r2, r1
 8010b2c:	4291      	cmp	r1, r2
 8010b2e:	d100      	bne.n	8010b32 <memcpy.isra.0+0xa>
 8010b30:	4770      	bx	lr
 8010b32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b36:	f800 3f01 	strb.w	r3, [r0, #1]!
 8010b3a:	e7f7      	b.n	8010b2c <memcpy.isra.0+0x4>

08010b3c <memcpy.isra.0>:
 8010b3c:	3801      	subs	r0, #1
 8010b3e:	440a      	add	r2, r1
 8010b40:	4291      	cmp	r1, r2
 8010b42:	d100      	bne.n	8010b46 <memcpy.isra.0+0xa>
 8010b44:	4770      	bx	lr
 8010b46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b4a:	f800 3f01 	strb.w	r3, [r0, #1]!
 8010b4e:	e7f7      	b.n	8010b40 <memcpy.isra.0+0x4>

08010b50 <net_memcpy>:
 8010b50:	ea40 0301 	orr.w	r3, r0, r1
 8010b54:	079b      	lsls	r3, r3, #30
 8010b56:	b570      	push	{r4, r5, r6, lr}
 8010b58:	d108      	bne.n	8010b6c <net_memcpy+0x1c>
 8010b5a:	f022 0303 	bic.w	r3, r2, #3
 8010b5e:	1f04      	subs	r4, r0, #4
 8010b60:	18cd      	adds	r5, r1, r3
 8010b62:	42a9      	cmp	r1, r5
 8010b64:	d108      	bne.n	8010b78 <net_memcpy+0x28>
 8010b66:	1ad2      	subs	r2, r2, r3
 8010b68:	4403      	add	r3, r0
 8010b6a:	e000      	b.n	8010b6e <net_memcpy+0x1e>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	3b01      	subs	r3, #1
 8010b70:	440a      	add	r2, r1
 8010b72:	4291      	cmp	r1, r2
 8010b74:	d105      	bne.n	8010b82 <net_memcpy+0x32>
 8010b76:	bd70      	pop	{r4, r5, r6, pc}
 8010b78:	f851 6b04 	ldr.w	r6, [r1], #4
 8010b7c:	f844 6f04 	str.w	r6, [r4, #4]!
 8010b80:	e7ef      	b.n	8010b62 <net_memcpy+0x12>
 8010b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010b8a:	e7f2      	b.n	8010b72 <net_memcpy+0x22>

08010b8c <udp_set_ip>:
 8010b8c:	2204      	movs	r2, #4
 8010b8e:	b513      	push	{r0, r1, r4, lr}
 8010b90:	4604      	mov	r4, r0
 8010b92:	6803      	ldr	r3, [r0, #0]
 8010b94:	eb0d 0102 	add.w	r1, sp, r2
 8010b98:	4808      	ldr	r0, [pc, #32]	; (8010bbc <udp_set_ip+0x30>)
 8010b9a:	9301      	str	r3, [sp, #4]
 8010b9c:	f7ff ffce 	bl	8010b3c <memcpy.isra.0>
 8010ba0:	6862      	ldr	r2, [r4, #4]
 8010ba2:	4b07      	ldr	r3, [pc, #28]	; (8010bc0 <udp_set_ip+0x34>)
 8010ba4:	43d1      	mvns	r1, r2
 8010ba6:	6019      	str	r1, [r3, #0]
 8010ba8:	6823      	ldr	r3, [r4, #0]
 8010baa:	4013      	ands	r3, r2
 8010bac:	4a05      	ldr	r2, [pc, #20]	; (8010bc4 <udp_set_ip+0x38>)
 8010bae:	6013      	str	r3, [r2, #0]
 8010bb0:	68a2      	ldr	r2, [r4, #8]
 8010bb2:	4b05      	ldr	r3, [pc, #20]	; (8010bc8 <udp_set_ip+0x3c>)
 8010bb4:	601a      	str	r2, [r3, #0]
 8010bb6:	b002      	add	sp, #8
 8010bb8:	bd10      	pop	{r4, pc}
 8010bba:	bf00      	nop
 8010bbc:	20008ce6 	andcs	r8, r0, r6, ror #25
 8010bc0:	20002ffc 	strdcs	r2, [r0], -ip
 8010bc4:	20003004 	andcs	r3, r0, r4
 8010bc8:	20003000 	andcs	r3, r0, r0

08010bcc <udp_bind>:
 8010bcc:	4a0a      	ldr	r2, [pc, #40]	; (8010bf8 <udp_bind+0x2c>)
 8010bce:	4603      	mov	r3, r0
 8010bd0:	b510      	push	{r4, lr}
 8010bd2:	2000      	movs	r0, #0
 8010bd4:	4614      	mov	r4, r2
 8010bd6:	f852 1b04 	ldr.w	r1, [r2], #4
 8010bda:	4299      	cmp	r1, r3
 8010bdc:	d008      	beq.n	8010bf0 <udp_bind+0x24>
 8010bde:	b141      	cbz	r1, 8010bf2 <udp_bind+0x26>
 8010be0:	3001      	adds	r0, #1
 8010be2:	2808      	cmp	r0, #8
 8010be4:	d1f7      	bne.n	8010bd6 <udp_bind+0xa>
 8010be6:	4805      	ldr	r0, [pc, #20]	; (8010bfc <udp_bind+0x30>)
 8010be8:	f002 ff72 	bl	8013ad0 <console_error>
 8010bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010bf0:	bd10      	pop	{r4, pc}
 8010bf2:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 8010bf6:	e7fb      	b.n	8010bf0 <udp_bind+0x24>
 8010bf8:	2000300c 	andcs	r3, r0, ip
 8010bfc:	08017962 	stmdaeq	r1, {r1, r5, r6, r8, fp, ip, sp, lr}

08010c00 <udp_unbind>:
 8010c00:	4a0c      	ldr	r2, [pc, #48]	; (8010c34 <udp_unbind+0x34>)
 8010c02:	2300      	movs	r3, #0
 8010c04:	4611      	mov	r1, r2
 8010c06:	b510      	push	{r4, lr}
 8010c08:	f852 4b04 	ldr.w	r4, [r2], #4
 8010c0c:	4284      	cmp	r4, r0
 8010c0e:	d108      	bne.n	8010c22 <udp_unbind+0x22>
 8010c10:	2000      	movs	r0, #0
 8010c12:	f640 3294 	movw	r2, #2964	; 0xb94
 8010c16:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8010c1a:	4353      	muls	r3, r2
 8010c1c:	4a06      	ldr	r2, [pc, #24]	; (8010c38 <udp_unbind+0x38>)
 8010c1e:	50d0      	str	r0, [r2, r3]
 8010c20:	bd10      	pop	{r4, pc}
 8010c22:	3301      	adds	r3, #1
 8010c24:	2b08      	cmp	r3, #8
 8010c26:	d1ef      	bne.n	8010c08 <udp_unbind+0x8>
 8010c28:	4804      	ldr	r0, [pc, #16]	; (8010c3c <udp_unbind+0x3c>)
 8010c2a:	f002 ff51 	bl	8013ad0 <console_error>
 8010c2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010c32:	e7f5      	b.n	8010c20 <udp_unbind+0x20>
 8010c34:	2000300c 	andcs	r3, r0, ip
 8010c38:	2000302c 	andcs	r3, r0, ip, lsr #32
 8010c3c:	08017967 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, fp, ip, sp, lr}

08010c40 <udp_recv>:
 8010c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c44:	4604      	mov	r4, r0
 8010c46:	4698      	mov	r8, r3
 8010c48:	f640 3394 	movw	r3, #2964	; 0xb94
 8010c4c:	435c      	muls	r4, r3
 8010c4e:	4608      	mov	r0, r1
 8010c50:	4915      	ldr	r1, [pc, #84]	; (8010ca8 <udp_recv+0x68>)
 8010c52:	190f      	adds	r7, r1, r4
 8010c54:	f8b7 c002 	ldrh.w	ip, [r7, #2]
 8010c58:	5b0b      	ldrh	r3, [r1, r4]
 8010c5a:	4563      	cmp	r3, ip
 8010c5c:	d021      	beq.n	8010ca2 <udp_recv+0x62>
 8010c5e:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 8010c62:	fb03 fc0c 	mul.w	ip, r3, ip
 8010c66:	eb0c 0604 	add.w	r6, ip, r4
 8010c6a:	440e      	add	r6, r1
 8010c6c:	f8b6 55ca 	ldrh.w	r5, [r6, #1482]	; 0x5ca
 8010c70:	3404      	adds	r4, #4
 8010c72:	4295      	cmp	r5, r2
 8010c74:	bf28      	it	cs
 8010c76:	4615      	movcs	r5, r2
 8010c78:	4464      	add	r4, ip
 8010c7a:	462a      	mov	r2, r5
 8010c7c:	4421      	add	r1, r4
 8010c7e:	f7ff ff67 	bl	8010b50 <net_memcpy>
 8010c82:	f8d6 35c4 	ldr.w	r3, [r6, #1476]	; 0x5c4
 8010c86:	f8c8 3000 	str.w	r3, [r8]
 8010c8a:	f8b6 25c8 	ldrh.w	r2, [r6, #1480]	; 0x5c8
 8010c8e:	9b06      	ldr	r3, [sp, #24]
 8010c90:	801a      	strh	r2, [r3, #0]
 8010c92:	887b      	ldrh	r3, [r7, #2]
 8010c94:	3301      	adds	r3, #1
 8010c96:	f003 0301 	and.w	r3, r3, #1
 8010c9a:	807b      	strh	r3, [r7, #2]
 8010c9c:	4628      	mov	r0, r5
 8010c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ca2:	2500      	movs	r5, #0
 8010ca4:	e7fa      	b.n	8010c9c <udp_recv+0x5c>
 8010ca6:	bf00      	nop
 8010ca8:	2000302c 	andcs	r3, r0, ip, lsr #32

08010cac <udp_recv2>:
 8010cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010cae:	f640 3594 	movw	r5, #2964	; 0xb94
 8010cb2:	4368      	muls	r0, r5
 8010cb4:	4c0f      	ldr	r4, [pc, #60]	; (8010cf4 <udp_recv2+0x48>)
 8010cb6:	1827      	adds	r7, r4, r0
 8010cb8:	887d      	ldrh	r5, [r7, #2]
 8010cba:	5a26      	ldrh	r6, [r4, r0]
 8010cbc:	42ae      	cmp	r6, r5
 8010cbe:	d017      	beq.n	8010cf0 <udp_recv2+0x44>
 8010cc0:	f44f 6cb9 	mov.w	ip, #1480	; 0x5c8
 8010cc4:	fb0c f505 	mul.w	r5, ip, r5
 8010cc8:	1d06      	adds	r6, r0, #4
 8010cca:	442e      	add	r6, r5
 8010ccc:	4405      	add	r5, r0
 8010cce:	4426      	add	r6, r4
 8010cd0:	442c      	add	r4, r5
 8010cd2:	600e      	str	r6, [r1, #0]
 8010cd4:	f8d4 15c4 	ldr.w	r1, [r4, #1476]	; 0x5c4
 8010cd8:	6011      	str	r1, [r2, #0]
 8010cda:	f8b4 25c8 	ldrh.w	r2, [r4, #1480]	; 0x5c8
 8010cde:	801a      	strh	r2, [r3, #0]
 8010ce0:	887b      	ldrh	r3, [r7, #2]
 8010ce2:	f8b4 05ca 	ldrh.w	r0, [r4, #1482]	; 0x5ca
 8010ce6:	3301      	adds	r3, #1
 8010ce8:	f003 0301 	and.w	r3, r3, #1
 8010cec:	807b      	strh	r3, [r7, #2]
 8010cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cf0:	2000      	movs	r0, #0
 8010cf2:	e7fc      	b.n	8010cee <udp_recv2+0x42>
 8010cf4:	2000302c 	andcs	r3, r0, ip, lsr #32

08010cf8 <udp_send>:
 8010cf8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8010cfc:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8010e30 <udp_send+0x138>
 8010d00:	461c      	mov	r4, r3
 8010d02:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
 8010d06:	4607      	mov	r7, r0
 8010d08:	4688      	mov	r8, r1
 8010d0a:	4616      	mov	r6, r2
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	f000 808b 	beq.w	8010e28 <udp_send+0x130>
 8010d12:	1c63      	adds	r3, r4, #1
 8010d14:	d141      	bne.n	8010d9a <udp_send+0xa2>
 8010d16:	4a47      	ldr	r2, [pc, #284]	; (8010e34 <udp_send+0x13c>)
 8010d18:	2307      	movs	r3, #7
 8010d1a:	4611      	mov	r1, r2
 8010d1c:	20ff      	movs	r0, #255	; 0xff
 8010d1e:	e001      	b.n	8010d24 <udp_send+0x2c>
 8010d20:	f802 0b01 	strb.w	r0, [r2], #1
 8010d24:	3b01      	subs	r3, #1
 8010d26:	d1fb      	bne.n	8010d20 <udp_send+0x28>
 8010d28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010d2c:	83cb      	strh	r3, [r1, #30]
 8010d2e:	840b      	strh	r3, [r1, #32]
 8010d30:	2500      	movs	r5, #0
 8010d32:	f8df a104 	ldr.w	sl, [pc, #260]	; 8010e38 <udp_send+0x140>
 8010d36:	4c3f      	ldr	r4, [pc, #252]	; (8010e34 <udp_send+0x13c>)
 8010d38:	f8ba 3000 	ldrh.w	r3, [sl]
 8010d3c:	2114      	movs	r1, #20
 8010d3e:	8263      	strh	r3, [r4, #18]
 8010d40:	f106 031c 	add.w	r3, r6, #28
 8010d44:	ba5b      	rev16	r3, r3
 8010d46:	f104 000e 	add.w	r0, r4, #14
 8010d4a:	8223      	strh	r3, [r4, #16]
 8010d4c:	8325      	strh	r5, [r4, #24]
 8010d4e:	f001 fcba 	bl	80126c6 <net_chksum>
 8010d52:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
 8010d56:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 8010d5a:	ba5b      	rev16	r3, r3
 8010d5c:	8463      	strh	r3, [r4, #34]	; 0x22
 8010d5e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8010d62:	4632      	mov	r2, r6
 8010d64:	ba5b      	rev16	r3, r3
 8010d66:	84a3      	strh	r3, [r4, #36]	; 0x24
 8010d68:	f106 0308 	add.w	r3, r6, #8
 8010d6c:	ba5b      	rev16	r3, r3
 8010d6e:	bf28      	it	cs
 8010d70:	f44f 62b8 	movcs.w	r2, #1472	; 0x5c0
 8010d74:	4641      	mov	r1, r8
 8010d76:	8320      	strh	r0, [r4, #24]
 8010d78:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 8010d7c:	84e3      	strh	r3, [r4, #38]	; 0x26
 8010d7e:	f7ff fee7 	bl	8010b50 <net_memcpy>
 8010d82:	4620      	mov	r0, r4
 8010d84:	f106 012a 	add.w	r1, r6, #42	; 0x2a
 8010d88:	f003 fed8 	bl	8014b3c <emac_eth_send>
 8010d8c:	f8ba 3000 	ldrh.w	r3, [sl]
 8010d90:	4628      	mov	r0, r5
 8010d92:	3301      	adds	r3, #1
 8010d94:	f8aa 3000 	strh.w	r3, [sl]
 8010d98:	e037      	b.n	8010e0a <udp_send+0x112>
 8010d9a:	4b28      	ldr	r3, [pc, #160]	; (8010e3c <udp_send+0x144>)
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	43a3      	bics	r3, r4
 8010da0:	d10f      	bne.n	8010dc2 <udp_send+0xca>
 8010da2:	2307      	movs	r3, #7
 8010da4:	21ff      	movs	r1, #255	; 0xff
 8010da6:	4a23      	ldr	r2, [pc, #140]	; (8010e34 <udp_send+0x13c>)
 8010da8:	e001      	b.n	8010dae <udp_send+0xb6>
 8010daa:	f802 1b01 	strb.w	r1, [r2], #1
 8010dae:	3b01      	subs	r3, #1
 8010db0:	d1fb      	bne.n	8010daa <udp_send+0xb2>
 8010db2:	2204      	movs	r2, #4
 8010db4:	4822      	ldr	r0, [pc, #136]	; (8010e40 <udp_send+0x148>)
 8010db6:	eb0d 0102 	add.w	r1, sp, r2
 8010dba:	9401      	str	r4, [sp, #4]
 8010dbc:	f7ff febe 	bl	8010b3c <memcpy.isra.0>
 8010dc0:	e7b6      	b.n	8010d30 <udp_send+0x38>
 8010dc2:	f004 03e0 	and.w	r3, r4, #224	; 0xe0
 8010dc6:	2be0      	cmp	r3, #224	; 0xe0
 8010dc8:	d10e      	bne.n	8010de8 <udp_send+0xf0>
 8010dca:	491e      	ldr	r1, [pc, #120]	; (8010e44 <udp_send+0x14c>)
 8010dcc:	f3c4 2306 	ubfx	r3, r4, #8, #7
 8010dd0:	70cb      	strb	r3, [r1, #3]
 8010dd2:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8010dd6:	710b      	strb	r3, [r1, #4]
 8010dd8:	f3c4 6307 	ubfx	r3, r4, #24, #8
 8010ddc:	2206      	movs	r2, #6
 8010dde:	4815      	ldr	r0, [pc, #84]	; (8010e34 <udp_send+0x13c>)
 8010de0:	714b      	strb	r3, [r1, #5]
 8010de2:	f7ff feab 	bl	8010b3c <memcpy.isra.0>
 8010de6:	e7e4      	b.n	8010db2 <udp_send+0xba>
 8010de8:	4b17      	ldr	r3, [pc, #92]	; (8010e48 <udp_send+0x150>)
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	43a3      	bics	r3, r4
 8010dee:	d00f      	beq.n	8010e10 <udp_send+0x118>
 8010df0:	4d16      	ldr	r5, [pc, #88]	; (8010e4c <udp_send+0x154>)
 8010df2:	4910      	ldr	r1, [pc, #64]	; (8010e34 <udp_send+0x13c>)
 8010df4:	6828      	ldr	r0, [r5, #0]
 8010df6:	f001 f931 	bl	801205c <arp_cache_lookup>
 8010dfa:	682b      	ldr	r3, [r5, #0]
 8010dfc:	4298      	cmp	r0, r3
 8010dfe:	d0d8      	beq.n	8010db2 <udp_send+0xba>
 8010e00:	4813      	ldr	r0, [pc, #76]	; (8010e50 <udp_send+0x158>)
 8010e02:	f002 fe65 	bl	8013ad0 <console_error>
 8010e06:	f06f 0002 	mvn.w	r0, #2
 8010e0a:	b002      	add	sp, #8
 8010e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e10:	4620      	mov	r0, r4
 8010e12:	4908      	ldr	r1, [pc, #32]	; (8010e34 <udp_send+0x13c>)
 8010e14:	f001 f922 	bl	801205c <arp_cache_lookup>
 8010e18:	42a0      	cmp	r0, r4
 8010e1a:	d0ca      	beq.n	8010db2 <udp_send+0xba>
 8010e1c:	480d      	ldr	r0, [pc, #52]	; (8010e54 <udp_send+0x15c>)
 8010e1e:	f002 fe57 	bl	8013ad0 <console_error>
 8010e22:	f06f 0001 	mvn.w	r0, #1
 8010e26:	e7f0      	b.n	8010e0a <udp_send+0x112>
 8010e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010e2c:	e7ed      	b.n	8010e0a <udp_send+0x112>
 8010e2e:	bf00      	nop
 8010e30:	2000300c 	andcs	r3, r0, ip
 8010e34:	20008ccc 	andcs	r8, r0, ip, asr #25
 8010e38:	20003008 	andcs	r3, r0, r8
 8010e3c:	20002ffc 	strdcs	r2, [r0], -ip
 8010e40:	20008cea 	andcs	r8, r0, sl, ror #25
 8010e44:	20000000 	andcs	r0, r0, r0
 8010e48:	20003004 	andcs	r3, r0, r4
 8010e4c:	20003000 	andcs	r3, r0, r0
 8010e50:	0801796f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r8, fp, ip, sp, lr}
 8010e54:	08017995 	stmdaeq	r1, {r0, r2, r4, r7, r8, fp, ip, sp, lr}

08010e58 <strlen>:
 8010e58:	4603      	mov	r3, r0
 8010e5a:	461a      	mov	r2, r3
 8010e5c:	7811      	ldrb	r1, [r2, #0]
 8010e5e:	3301      	adds	r3, #1
 8010e60:	2900      	cmp	r1, #0
 8010e62:	d1fa      	bne.n	8010e5a <strlen+0x2>
 8010e64:	1a10      	subs	r0, r2, r0
 8010e66:	4770      	bx	lr

08010e68 <strcmp>:
 8010e68:	1e43      	subs	r3, r0, #1
 8010e6a:	3901      	subs	r1, #1
 8010e6c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8010e70:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010e74:	4290      	cmp	r0, r2
 8010e76:	d001      	beq.n	8010e7c <strcmp+0x14>
 8010e78:	1a80      	subs	r0, r0, r2
 8010e7a:	e001      	b.n	8010e80 <strcmp+0x18>
 8010e7c:	2800      	cmp	r0, #0
 8010e7e:	d1f5      	bne.n	8010e6c <strcmp+0x4>
 8010e80:	4770      	bx	lr

08010e82 <strcpy.isra.0>:
 8010e82:	3801      	subs	r0, #1
 8010e84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e88:	f800 3f01 	strb.w	r3, [r0, #1]!
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d1f9      	bne.n	8010e84 <strcpy.isra.0+0x2>
 8010e90:	4770      	bx	lr

08010e92 <strcat.isra.0>:
 8010e92:	b538      	push	{r3, r4, r5, lr}
 8010e94:	4604      	mov	r4, r0
 8010e96:	460d      	mov	r5, r1
 8010e98:	f7ff ffde 	bl	8010e58 <strlen>
 8010e9c:	4629      	mov	r1, r5
 8010e9e:	4420      	add	r0, r4
 8010ea0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ea4:	f7ff bfed 	b.w	8010e82 <strcpy.isra.0>

08010ea8 <MDNS::MDNS()>:
 8010ea8:	b513      	push	{r0, r1, r4, lr}
 8010eaa:	4604      	mov	r4, r0
 8010eac:	a901      	add	r1, sp, #4
 8010eae:	4804      	ldr	r0, [pc, #16]	; (8010ec0 <MDNS::MDNS()+0x18>)
 8010eb0:	f002 ff86 	bl	8013dc0 <inet_aton>
 8010eb4:	4620      	mov	r0, r4
 8010eb6:	4b03      	ldr	r3, [pc, #12]	; (8010ec4 <MDNS::MDNS()+0x1c>)
 8010eb8:	9a01      	ldr	r2, [sp, #4]
 8010eba:	601a      	str	r2, [r3, #0]
 8010ebc:	b002      	add	sp, #8
 8010ebe:	bd10      	pop	{r4, pc}
 8010ec0:	080179c6 	stmdaeq	r1, {r1, r2, r6, r7, r8, fp, ip, sp, lr}
 8010ec4:	200092c0 	andcs	r9, r0, r0, asr #5

08010ec8 <MDNS::SetName(char const*)>:
 8010ec8:	b538      	push	{r3, r4, r5, lr}
 8010eca:	4d0b      	ldr	r5, [pc, #44]	; (8010ef8 <MDNS::SetName(char const*)+0x30>)
 8010ecc:	460c      	mov	r4, r1
 8010ece:	6828      	ldr	r0, [r5, #0]
 8010ed0:	b108      	cbz	r0, 8010ed6 <MDNS::SetName(char const*)+0xe>
 8010ed2:	f002 ff6f 	bl	8013db4 <operator delete[](void*)>
 8010ed6:	4620      	mov	r0, r4
 8010ed8:	f7ff ffbe 	bl	8010e58 <strlen>
 8010edc:	3007      	adds	r0, #7
 8010ede:	f002 ff6d 	bl	8013dbc <operator new[](unsigned int)>
 8010ee2:	4621      	mov	r1, r4
 8010ee4:	6028      	str	r0, [r5, #0]
 8010ee6:	f7ff ffcc 	bl	8010e82 <strcpy.isra.0>
 8010eea:	6828      	ldr	r0, [r5, #0]
 8010eec:	4903      	ldr	r1, [pc, #12]	; (8010efc <MDNS::SetName(char const*)+0x34>)
 8010eee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ef2:	f7ff bfce 	b.w	8010e92 <strcat.isra.0>
 8010ef6:	bf00      	nop
 8010ef8:	200096f0 	strdcs	r9, [r0], -r0
 8010efc:	080179d6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r8, fp, ip, sp, lr}

08010f00 <MDNS::DecodeDNSNameNotation(char const*, char*)>:
 8010f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010f04:	f04f 0e00 	mov.w	lr, #0
 8010f08:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
 8010f0c:	4675      	mov	r5, lr
 8010f0e:	4e1b      	ldr	r6, [pc, #108]	; (8010f7c <MDNS::DecodeDNSNameNotation(char const*, char*)+0x7c>)
 8010f10:	4f1b      	ldr	r7, [pc, #108]	; (8010f80 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x80>)
 8010f12:	780b      	ldrb	r3, [r1, #0]
 8010f14:	1c68      	adds	r0, r5, #1
 8010f16:	b913      	cbnz	r3, 8010f1e <MDNS::DecodeDNSNameNotation(char const*, char*)+0x1e>
 8010f18:	7013      	strb	r3, [r2, #0]
 8010f1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f1e:	2b3f      	cmp	r3, #63	; 0x3f
 8010f20:	d91c      	bls.n	8010f5c <MDNS::DecodeDNSNameNotation(char const*, char*)+0x5c>
 8010f22:	7849      	ldrb	r1, [r1, #1]
 8010f24:	ea06 2303 	and.w	r3, r6, r3, lsl #8
 8010f28:	430b      	orrs	r3, r1
 8010f2a:	6839      	ldr	r1, [r7, #0]
 8010f2c:	f1be 0f00 	cmp.w	lr, #0
 8010f30:	bf08      	it	eq
 8010f32:	4605      	moveq	r5, r0
 8010f34:	5ccc      	ldrb	r4, [r1, r3]
 8010f36:	3301      	adds	r3, #1
 8010f38:	4419      	add	r1, r3
 8010f3a:	2300      	movs	r3, #0
 8010f3c:	42a3      	cmp	r3, r4
 8010f3e:	5cc8      	ldrb	r0, [r1, r3]
 8010f40:	d309      	bcc.n	8010f56 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x56>
 8010f42:	f04f 0e01 	mov.w	lr, #1
 8010f46:	4421      	add	r1, r4
 8010f48:	4414      	add	r4, r2
 8010f4a:	780b      	ldrb	r3, [r1, #0]
 8010f4c:	b10b      	cbz	r3, 8010f52 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x52>
 8010f4e:	f804 cb01 	strb.w	ip, [r4], #1
 8010f52:	4622      	mov	r2, r4
 8010f54:	e7dd      	b.n	8010f12 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x12>
 8010f56:	54d0      	strb	r0, [r2, r3]
 8010f58:	3301      	adds	r3, #1
 8010f5a:	e7ef      	b.n	8010f3c <MDNS::DecodeDNSNameNotation(char const*, char*)+0x3c>
 8010f5c:	4688      	mov	r8, r1
 8010f5e:	18d4      	adds	r4, r2, r3
 8010f60:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 8010f64:	f802 9b01 	strb.w	r9, [r2], #1
 8010f68:	4294      	cmp	r4, r2
 8010f6a:	d1f9      	bne.n	8010f60 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x60>
 8010f6c:	1c5a      	adds	r2, r3, #1
 8010f6e:	4411      	add	r1, r2
 8010f70:	f1be 0f00 	cmp.w	lr, #0
 8010f74:	d1e9      	bne.n	8010f4a <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4a>
 8010f76:	181d      	adds	r5, r3, r0
 8010f78:	e7e7      	b.n	8010f4a <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4a>
 8010f7a:	bf00      	nop
 8010f7c:	ffff3f00 			; <UNDEFINED> instruction: 0xffff3f00
 8010f80:	200096f4 	strdcs	r9, [r0], -r4

08010f84 <MDNS::FindFirstDotFromRight(char const*) const>:
 8010f84:	b510      	push	{r4, lr}
 8010f86:	4608      	mov	r0, r1
 8010f88:	460c      	mov	r4, r1
 8010f8a:	f7ff ff65 	bl	8010e58 <strlen>
 8010f8e:	4420      	add	r0, r4
 8010f90:	42a0      	cmp	r0, r4
 8010f92:	d903      	bls.n	8010f9c <MDNS::FindFirstDotFromRight(char const*) const+0x18>
 8010f94:	f810 3901 	ldrb.w	r3, [r0], #-1
 8010f98:	2b2e      	cmp	r3, #46	; 0x2e
 8010f9a:	d1f9      	bne.n	8010f90 <MDNS::FindFirstDotFromRight(char const*) const+0xc>
 8010f9c:	3001      	adds	r0, #1
 8010f9e:	bd10      	pop	{r4, pc}

08010fa0 <MDNS::WriteDnsName(char const*, char*, bool)>:
 8010fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010fa2:	4614      	mov	r4, r2
 8010fa4:	460f      	mov	r7, r1
 8010fa6:	1c60      	adds	r0, r4, #1
 8010fa8:	463d      	mov	r5, r7
 8010faa:	f817 6b01 	ldrb.w	r6, [r7], #1
 8010fae:	b946      	cbnz	r6, 8010fc2 <MDNS::WriteDnsName(char const*, char*, bool)+0x22>
 8010fb0:	1a69      	subs	r1, r5, r1
 8010fb2:	7021      	strb	r1, [r4, #0]
 8010fb4:	7829      	ldrb	r1, [r5, #0]
 8010fb6:	b949      	cbnz	r1, 8010fcc <MDNS::WriteDnsName(char const*, char*, bool)+0x2c>
 8010fb8:	b10b      	cbz	r3, 8010fbe <MDNS::WriteDnsName(char const*, char*, bool)+0x1e>
 8010fba:	f800 1b01 	strb.w	r1, [r0], #1
 8010fbe:	1a80      	subs	r0, r0, r2
 8010fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fc2:	2e2e      	cmp	r6, #46	; 0x2e
 8010fc4:	d0f4      	beq.n	8010fb0 <MDNS::WriteDnsName(char const*, char*, bool)+0x10>
 8010fc6:	f800 6b01 	strb.w	r6, [r0], #1
 8010fca:	e7ed      	b.n	8010fa8 <MDNS::WriteDnsName(char const*, char*, bool)+0x8>
 8010fcc:	4604      	mov	r4, r0
 8010fce:	1c69      	adds	r1, r5, #1
 8010fd0:	e7e8      	b.n	8010fa4 <MDNS::WriteDnsName(char const*, char*, bool)+0x4>
	...

08010fd4 <MDNS::CreateAnswerLocalIpAddress()>:
 8010fd4:	2384      	movs	r3, #132	; 0x84
 8010fd6:	b510      	push	{r4, lr}
 8010fd8:	4c0f      	ldr	r4, [pc, #60]	; (8011018 <MDNS::CreateAnswerLocalIpAddress()+0x44>)
 8010fda:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010fde:	80e3      	strh	r3, [r4, #6]
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	490e      	ldr	r1, [pc, #56]	; (801101c <MDNS::CreateAnswerLocalIpAddress()+0x48>)
 8010fe4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8010fe8:	6809      	ldr	r1, [r1, #0]
 8010fea:	f104 0210 	add.w	r2, r4, #16
 8010fee:	2301      	movs	r3, #1
 8010ff0:	f7ff ffd6 	bl	8010fa0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8010ff4:	490a      	ldr	r1, [pc, #40]	; (8011020 <MDNS::CreateAnswerLocalIpAddress()+0x4c>)
 8010ff6:	1813      	adds	r3, r2, r0
 8010ff8:	5011      	str	r1, [r2, r0]
 8010ffa:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8010ffe:	605a      	str	r2, [r3, #4]
 8011000:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011004:	811a      	strh	r2, [r3, #8]
 8011006:	4a07      	ldr	r2, [pc, #28]	; (8011024 <MDNS::CreateAnswerLocalIpAddress()+0x50>)
 8011008:	6812      	ldr	r2, [r2, #0]
 801100a:	6952      	ldr	r2, [r2, #20]
 801100c:	f8c3 200a 	str.w	r2, [r3, #10]
 8011010:	1b1b      	subs	r3, r3, r4
 8011012:	330a      	adds	r3, #10
 8011014:	6023      	str	r3, [r4, #0]
 8011016:	bd10      	pop	{r4, pc}
 8011018:	200092c4 	andcs	r9, r0, r4, asr #5
 801101c:	200096f0 	strdcs	r9, [r0], -r0
 8011020:	01800100 	orreq	r0, r0, r0, lsl #2
 8011024:	200096f8 	strdcs	r9, [r0], -r8

08011028 <MDNS::Start()>:
 8011028:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801102a:	4c1d      	ldr	r4, [pc, #116]	; (80110a0 <MDNS::Start()+0x78>)
 801102c:	f241 41e9 	movw	r1, #5353	; 0x14e9
 8011030:	4605      	mov	r5, r0
 8011032:	6820      	ldr	r0, [r4, #0]
 8011034:	f000 fb28 	bl	8011688 <Network::Begin(unsigned short)>
 8011038:	4e1a      	ldr	r6, [pc, #104]	; (80110a4 <MDNS::Start()+0x7c>)
 801103a:	4f1b      	ldr	r7, [pc, #108]	; (80110a8 <MDNS::Start()+0x80>)
 801103c:	4601      	mov	r1, r0
 801103e:	6030      	str	r0, [r6, #0]
 8011040:	683a      	ldr	r2, [r7, #0]
 8011042:	6820      	ldr	r0, [r4, #0]
 8011044:	f000 fb31 	bl	80116aa <Network::JoinGroup(int, unsigned int)>
 8011048:	4b18      	ldr	r3, [pc, #96]	; (80110ac <MDNS::Start()+0x84>)
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	b923      	cbnz	r3, 8011058 <MDNS::Start()+0x30>
 801104e:	6821      	ldr	r1, [r4, #0]
 8011050:	4628      	mov	r0, r5
 8011052:	3120      	adds	r1, #32
 8011054:	f7ff ff38 	bl	8010ec8 <MDNS::SetName(char const*)>
 8011058:	4628      	mov	r0, r5
 801105a:	f7ff ffbb 	bl	8010fd4 <MDNS::CreateAnswerLocalIpAddress()>
 801105e:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8011062:	4913      	ldr	r1, [pc, #76]	; (80110b0 <MDNS::Start()+0x88>)
 8011064:	7830      	ldrb	r0, [r6, #0]
 8011066:	f831 2b04 	ldrh.w	r2, [r1], #4
 801106a:	9300      	str	r3, [sp, #0]
 801106c:	683b      	ldr	r3, [r7, #0]
 801106e:	f7ff fe43 	bl	8010cf8 <udp_send>
 8011072:	233f      	movs	r3, #63	; 0x3f
 8011074:	6820      	ldr	r0, [r4, #0]
 8011076:	4c0f      	ldr	r4, [pc, #60]	; (80110b4 <MDNS::Start()+0x8c>)
 8011078:	f100 0260 	add.w	r2, r0, #96	; 0x60
 801107c:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8011080:	b929      	cbnz	r1, 801108e <MDNS::Start()+0x66>
 8011082:	4413      	add	r3, r2
 8011084:	429a      	cmp	r2, r3
 8011086:	d006      	beq.n	8011096 <MDNS::Start()+0x6e>
 8011088:	f802 1b01 	strb.w	r1, [r2], #1
 801108c:	e7fa      	b.n	8011084 <MDNS::Start()+0x5c>
 801108e:	3b01      	subs	r3, #1
 8011090:	f802 1b01 	strb.w	r1, [r2], #1
 8011094:	d1f2      	bne.n	801107c <MDNS::Start()+0x54>
 8011096:	2300      	movs	r3, #0
 8011098:	f880 309f 	strb.w	r3, [r0, #159]	; 0x9f
 801109c:	b003      	add	sp, #12
 801109e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110a0:	200096f8 	strdcs	r9, [r0], -r8
 80110a4:	20000008 	andcs	r0, r0, r8
 80110a8:	200092c0 	andcs	r9, r0, r0, asr #5
 80110ac:	200096f0 	strdcs	r9, [r0], -r0
 80110b0:	200092c4 	andcs	r9, r0, r4, asr #5
 80110b4:	080179d6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r8, fp, ip, sp, lr}

080110b8 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>:
 80110b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110bc:	4c1b      	ldr	r4, [pc, #108]	; (801112c <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x74>)
 80110be:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 80110c2:	eb04 1501 	add.w	r5, r4, r1, lsl #4
 80110c6:	2300      	movs	r3, #0
 80110c8:	f854 100c 	ldr.w	r1, [r4, ip]
 80110cc:	4607      	mov	r7, r0
 80110ce:	f7ff ff67 	bl	8010fa0 <MDNS::WriteDnsName(char const*, char*, bool)>
 80110d2:	2301      	movs	r3, #1
 80110d4:	7bac      	ldrb	r4, [r5, #14]
 80110d6:	4616      	mov	r6, r2
 80110d8:	4915      	ldr	r1, [pc, #84]	; (8011130 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x78>)
 80110da:	4402      	add	r2, r0
 80110dc:	4815      	ldr	r0, [pc, #84]	; (8011134 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x7c>)
 80110de:	429c      	cmp	r4, r3
 80110e0:	bf18      	it	ne
 80110e2:	4601      	movne	r1, r0
 80110e4:	4638      	mov	r0, r7
 80110e6:	f7ff ff5b 	bl	8010fa0 <MDNS::WriteDnsName(char const*, char*, bool)>
 80110ea:	4b13      	ldr	r3, [pc, #76]	; (8011138 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x80>)
 80110ec:	1814      	adds	r4, r2, r0
 80110ee:	5013      	str	r3, [r2, r0]
 80110f0:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 80110f4:	6063      	str	r3, [r4, #4]
 80110f6:	4b11      	ldr	r3, [pc, #68]	; (801113c <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x84>)
 80110f8:	f8d3 8000 	ldr.w	r8, [r3]
 80110fc:	4640      	mov	r0, r8
 80110fe:	f7ff feab 	bl	8010e58 <strlen>
 8011102:	f100 0308 	add.w	r3, r0, #8
 8011106:	ba5b      	rev16	r3, r3
 8011108:	8123      	strh	r3, [r4, #8]
 801110a:	2300      	movs	r3, #0
 801110c:	f8c4 300a 	str.w	r3, [r4, #10]
 8011110:	89ab      	ldrh	r3, [r5, #12]
 8011112:	f104 0210 	add.w	r2, r4, #16
 8011116:	ba5b      	rev16	r3, r3
 8011118:	81e3      	strh	r3, [r4, #14]
 801111a:	4641      	mov	r1, r8
 801111c:	2301      	movs	r3, #1
 801111e:	4638      	mov	r0, r7
 8011120:	f7ff ff3e 	bl	8010fa0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8011124:	4410      	add	r0, r2
 8011126:	1b80      	subs	r0, r0, r6
 8011128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801112c:	200094c8 	andcs	r9, r0, r8, asr #9
 8011130:	080179d2 	stmdaeq	r1, {r1, r4, r6, r7, r8, fp, ip, sp, lr}
 8011134:	080179ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r8, fp, ip, sp, lr}
 8011138:	01802100 	orreq	r2, r0, r0, lsl #2
 801113c:	200096f0 	strdcs	r9, [r0], -r0

08011140 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>:
 8011140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011144:	4e19      	ldr	r6, [pc, #100]	; (80111ac <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x6c>)
 8011146:	010f      	lsls	r7, r1, #4
 8011148:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 801114c:	2300      	movs	r3, #0
 801114e:	59f1      	ldr	r1, [r6, r7]
 8011150:	4604      	mov	r4, r0
 8011152:	f7ff ff25 	bl	8010fa0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8011156:	2301      	movs	r3, #1
 8011158:	7bae      	ldrb	r6, [r5, #14]
 801115a:	4690      	mov	r8, r2
 801115c:	4914      	ldr	r1, [pc, #80]	; (80111b0 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x70>)
 801115e:	4402      	add	r2, r0
 8011160:	4814      	ldr	r0, [pc, #80]	; (80111b4 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x74>)
 8011162:	429e      	cmp	r6, r3
 8011164:	bf18      	it	ne
 8011166:	4601      	movne	r1, r0
 8011168:	4620      	mov	r0, r4
 801116a:	f7ff ff19 	bl	8010fa0 <MDNS::WriteDnsName(char const*, char*, bool)>
 801116e:	4b12      	ldr	r3, [pc, #72]	; (80111b8 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x78>)
 8011170:	1816      	adds	r6, r2, r0
 8011172:	5013      	str	r3, [r2, r0]
 8011174:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8011178:	68a8      	ldr	r0, [r5, #8]
 801117a:	6073      	str	r3, [r6, #4]
 801117c:	f106 040b 	add.w	r4, r6, #11
 8011180:	b938      	cbnz	r0, 8011192 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x52>
 8011182:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011186:	72b0      	strb	r0, [r6, #10]
 8011188:	8133      	strh	r3, [r6, #8]
 801118a:	eba4 0008 	sub.w	r0, r4, r8
 801118e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011192:	f7ff fe61 	bl	8010e58 <strlen>
 8011196:	4607      	mov	r7, r0
 8011198:	1c43      	adds	r3, r0, #1
 801119a:	72b0      	strb	r0, [r6, #10]
 801119c:	ba5b      	rev16	r3, r3
 801119e:	4620      	mov	r0, r4
 80111a0:	68a9      	ldr	r1, [r5, #8]
 80111a2:	8133      	strh	r3, [r6, #8]
 80111a4:	f7ff fe6d 	bl	8010e82 <strcpy.isra.0>
 80111a8:	443c      	add	r4, r7
 80111aa:	e7ee      	b.n	801118a <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x4a>
 80111ac:	200094c8 	andcs	r9, r0, r8, asr #9
 80111b0:	080179d2 	stmdaeq	r1, {r1, r4, r6, r7, r8, fp, ip, sp, lr}
 80111b4:	080179ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r8, fp, ip, sp, lr}
 80111b8:	01801000 	orreq	r1, r0, r0

080111bc <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>:
 80111bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111c0:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8011224 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x68>
 80111c4:	ea4f 1901 	mov.w	r9, r1, lsl #4
 80111c8:	eb08 1501 	add.w	r5, r8, r1, lsl #4
 80111cc:	6869      	ldr	r1, [r5, #4]
 80111ce:	2301      	movs	r3, #1
 80111d0:	4607      	mov	r7, r0
 80111d2:	f7ff fee5 	bl	8010fa0 <MDNS::WriteDnsName(char const*, char*, bool)>
 80111d6:	4b14      	ldr	r3, [pc, #80]	; (8011228 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x6c>)
 80111d8:	f858 8009 	ldr.w	r8, [r8, r9]
 80111dc:	5013      	str	r3, [r2, r0]
 80111de:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 80111e2:	1816      	adds	r6, r2, r0
 80111e4:	6073      	str	r3, [r6, #4]
 80111e6:	4640      	mov	r0, r8
 80111e8:	4614      	mov	r4, r2
 80111ea:	f7ff fe35 	bl	8010e58 <strlen>
 80111ee:	f100 030d 	add.w	r3, r0, #13
 80111f2:	ba5b      	rev16	r3, r3
 80111f4:	4641      	mov	r1, r8
 80111f6:	8133      	strh	r3, [r6, #8]
 80111f8:	f106 020a 	add.w	r2, r6, #10
 80111fc:	2300      	movs	r3, #0
 80111fe:	4638      	mov	r0, r7
 8011200:	f7ff fece 	bl	8010fa0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8011204:	2301      	movs	r3, #1
 8011206:	4402      	add	r2, r0
 8011208:	7bad      	ldrb	r5, [r5, #14]
 801120a:	4808      	ldr	r0, [pc, #32]	; (801122c <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x70>)
 801120c:	4908      	ldr	r1, [pc, #32]	; (8011230 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x74>)
 801120e:	429d      	cmp	r5, r3
 8011210:	bf18      	it	ne
 8011212:	4601      	movne	r1, r0
 8011214:	4638      	mov	r0, r7
 8011216:	f7ff fec3 	bl	8010fa0 <MDNS::WriteDnsName(char const*, char*, bool)>
 801121a:	4410      	add	r0, r2
 801121c:	1b00      	subs	r0, r0, r4
 801121e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011222:	bf00      	nop
 8011224:	200094c8 	andcs	r9, r0, r8, asr #9
 8011228:	01000c00 	tsteq	r0, r0, lsl #24
 801122c:	080179ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r8, fp, ip, sp, lr}
 8011230:	080179d2 	stmdaeq	r1, {r1, r4, r6, r7, r8, fp, ip, sp, lr}

08011234 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>:
 8011234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011236:	460f      	mov	r7, r1
 8011238:	2301      	movs	r3, #1
 801123a:	490f      	ldr	r1, [pc, #60]	; (8011278 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x44>)
 801123c:	4606      	mov	r6, r0
 801123e:	f7ff feaf 	bl	8010fa0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8011242:	4b0e      	ldr	r3, [pc, #56]	; (801127c <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x48>)
 8011244:	490e      	ldr	r1, [pc, #56]	; (8011280 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x4c>)
 8011246:	5013      	str	r3, [r2, r0]
 8011248:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 801124c:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8011250:	684f      	ldr	r7, [r1, #4]
 8011252:	1815      	adds	r5, r2, r0
 8011254:	606b      	str	r3, [r5, #4]
 8011256:	4638      	mov	r0, r7
 8011258:	4614      	mov	r4, r2
 801125a:	f7ff fdfd 	bl	8010e58 <strlen>
 801125e:	1c83      	adds	r3, r0, #2
 8011260:	ba5b      	rev16	r3, r3
 8011262:	812b      	strh	r3, [r5, #8]
 8011264:	f105 020a 	add.w	r2, r5, #10
 8011268:	2301      	movs	r3, #1
 801126a:	4639      	mov	r1, r7
 801126c:	4630      	mov	r0, r6
 801126e:	f7ff fe97 	bl	8010fa0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8011272:	4410      	add	r0, r2
 8011274:	1b00      	subs	r0, r0, r4
 8011276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011278:	080179dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r8, fp, ip, sp, lr}
 801127c:	01000c00 	tsteq	r0, r0, lsl #24
 8011280:	200094c8 	andcs	r9, r0, r8, asr #9

08011284 <MDNS::CreateMDNSMessage(unsigned int)>:
 8011284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011286:	2384      	movs	r3, #132	; 0x84
 8011288:	4d19      	ldr	r5, [pc, #100]	; (80112f0 <MDNS::CreateMDNSMessage(unsigned int)+0x6c>)
 801128a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 801128e:	80eb      	strh	r3, [r5, #6]
 8011290:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011294:	f105 0410 	add.w	r4, r5, #16
 8011298:	e9c5 2302 	strd	r2, r3, [r5, #8]
 801129c:	4622      	mov	r2, r4
 801129e:	4606      	mov	r6, r0
 80112a0:	460f      	mov	r7, r1
 80112a2:	f7ff ff09 	bl	80110b8 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>
 80112a6:	4404      	add	r4, r0
 80112a8:	4622      	mov	r2, r4
 80112aa:	4639      	mov	r1, r7
 80112ac:	4630      	mov	r0, r6
 80112ae:	f7ff ff47 	bl	8011140 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>
 80112b2:	4404      	add	r4, r0
 80112b4:	4622      	mov	r2, r4
 80112b6:	4639      	mov	r1, r7
 80112b8:	4630      	mov	r0, r6
 80112ba:	f7ff ffbb 	bl	8011234 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>
 80112be:	4404      	add	r4, r0
 80112c0:	4622      	mov	r2, r4
 80112c2:	4639      	mov	r1, r7
 80112c4:	4630      	mov	r0, r6
 80112c6:	f7ff ff79 	bl	80111bc <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>
 80112ca:	4a0a      	ldr	r2, [pc, #40]	; (80112f4 <MDNS::CreateMDNSMessage(unsigned int)+0x70>)
 80112cc:	4404      	add	r4, r0
 80112ce:	f852 3b10 	ldr.w	r3, [r2], #16
 80112d2:	1e60      	subs	r0, r4, #1
 80112d4:	3b0c      	subs	r3, #12
 80112d6:	4619      	mov	r1, r3
 80112d8:	3901      	subs	r1, #1
 80112da:	d204      	bcs.n	80112e6 <MDNS::CreateMDNSMessage(unsigned int)+0x62>
 80112dc:	441c      	add	r4, r3
 80112de:	4b06      	ldr	r3, [pc, #24]	; (80112f8 <MDNS::CreateMDNSMessage(unsigned int)+0x74>)
 80112e0:	1ae4      	subs	r4, r4, r3
 80112e2:	602c      	str	r4, [r5, #0]
 80112e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112e6:	f812 6b01 	ldrb.w	r6, [r2], #1
 80112ea:	f800 6f01 	strb.w	r6, [r0, #1]!
 80112ee:	e7f3      	b.n	80112d8 <MDNS::CreateMDNSMessage(unsigned int)+0x54>
 80112f0:	200094ec 	andcs	r9, r0, ip, ror #9
 80112f4:	200092c4 	andcs	r9, r0, r4, asr #5
 80112f8:	200094f0 	strdcs	r9, [r0], -r0

080112fc <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>:
 80112fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011300:	4d40      	ldr	r5, [pc, #256]	; (8011404 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x108>)
 8011302:	b085      	sub	sp, #20
 8011304:	682c      	ldr	r4, [r5, #0]
 8011306:	4680      	mov	r8, r0
 8011308:	460f      	mov	r7, r1
 801130a:	4616      	mov	r6, r2
 801130c:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 8011310:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8011314:	b11c      	cbz	r4, 801131e <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x22>
 8011316:	692a      	ldr	r2, [r5, #16]
 8011318:	2a00      	cmp	r2, #0
 801131a:	d16e      	bne.n	80113fa <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xfe>
 801131c:	2401      	movs	r4, #1
 801131e:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 8011322:	ea4f 1904 	mov.w	r9, r4, lsl #4
 8011326:	8193      	strh	r3, [r2, #12]
 8011328:	f882 b00e 	strb.w	fp, [r2, #14]
 801132c:	2f00      	cmp	r7, #0
 801132e:	d154      	bne.n	80113da <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xde>
 8011330:	4b35      	ldr	r3, [pc, #212]	; (8011408 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10c>)
 8011332:	6818      	ldr	r0, [r3, #0]
 8011334:	3020      	adds	r0, #32
 8011336:	f7ff fd8f 	bl	8010e58 <strlen>
 801133a:	4607      	mov	r7, r0
 801133c:	4630      	mov	r0, r6
 801133e:	f7ff fd8b 	bl	8010e58 <strlen>
 8011342:	4438      	add	r0, r7
 8011344:	3001      	adds	r0, #1
 8011346:	f002 fd39 	bl	8013dbc <operator new[](unsigned int)>
 801134a:	4b2f      	ldr	r3, [pc, #188]	; (8011408 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10c>)
 801134c:	f845 0009 	str.w	r0, [r5, r9]
 8011350:	6819      	ldr	r1, [r3, #0]
 8011352:	3120      	adds	r1, #32
 8011354:	f7ff fd95 	bl	8010e82 <strcpy.isra.0>
 8011358:	f855 0009 	ldr.w	r0, [r5, r9]
 801135c:	4631      	mov	r1, r6
 801135e:	f7ff fd98 	bl	8010e92 <strcat.isra.0>
 8011362:	4631      	mov	r1, r6
 8011364:	4640      	mov	r0, r8
 8011366:	f7ff fe0d 	bl	8010f84 <MDNS::FindFirstDotFromRight(char const*) const>
 801136a:	eb05 0709 	add.w	r7, r5, r9
 801136e:	4605      	mov	r5, r0
 8011370:	f7ff fd72 	bl	8010e58 <strlen>
 8011374:	300d      	adds	r0, #13
 8011376:	f002 fd21 	bl	8013dbc <operator new[](unsigned int)>
 801137a:	4629      	mov	r1, r5
 801137c:	6078      	str	r0, [r7, #4]
 801137e:	f7ff fd80 	bl	8010e82 <strcpy.isra.0>
 8011382:	4922      	ldr	r1, [pc, #136]	; (801140c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x110>)
 8011384:	6878      	ldr	r0, [r7, #4]
 8011386:	f7ff fd84 	bl	8010e92 <strcat.isra.0>
 801138a:	4921      	ldr	r1, [pc, #132]	; (8011410 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x114>)
 801138c:	4b21      	ldr	r3, [pc, #132]	; (8011414 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x118>)
 801138e:	6878      	ldr	r0, [r7, #4]
 8011390:	f1bb 0f01 	cmp.w	fp, #1
 8011394:	bf18      	it	ne
 8011396:	4619      	movne	r1, r3
 8011398:	f7ff fd7b 	bl	8010e92 <strcat.isra.0>
 801139c:	f1ba 0f00 	cmp.w	sl, #0
 80113a0:	d009      	beq.n	80113b6 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xba>
 80113a2:	4650      	mov	r0, sl
 80113a4:	f7ff fd58 	bl	8010e58 <strlen>
 80113a8:	3001      	adds	r0, #1
 80113aa:	f002 fd07 	bl	8013dbc <operator new[](unsigned int)>
 80113ae:	4651      	mov	r1, sl
 80113b0:	60b8      	str	r0, [r7, #8]
 80113b2:	f7ff fd66 	bl	8010e82 <strcpy.isra.0>
 80113b6:	4621      	mov	r1, r4
 80113b8:	4640      	mov	r0, r8
 80113ba:	f7ff ff63 	bl	8011284 <MDNS::CreateMDNSMessage(unsigned int)>
 80113be:	f241 43e9 	movw	r3, #5353	; 0x14e9
 80113c2:	4915      	ldr	r1, [pc, #84]	; (8011418 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x11c>)
 80113c4:	4815      	ldr	r0, [pc, #84]	; (801141c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x120>)
 80113c6:	f831 2b04 	ldrh.w	r2, [r1], #4
 80113ca:	9300      	str	r3, [sp, #0]
 80113cc:	4b14      	ldr	r3, [pc, #80]	; (8011420 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x124>)
 80113ce:	7800      	ldrb	r0, [r0, #0]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	f7ff fc91 	bl	8010cf8 <udp_send>
 80113d6:	2001      	movs	r0, #1
 80113d8:	e010      	b.n	80113fc <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x100>
 80113da:	4638      	mov	r0, r7
 80113dc:	f7ff fd3c 	bl	8010e58 <strlen>
 80113e0:	9003      	str	r0, [sp, #12]
 80113e2:	4630      	mov	r0, r6
 80113e4:	f7ff fd38 	bl	8010e58 <strlen>
 80113e8:	9b03      	ldr	r3, [sp, #12]
 80113ea:	4418      	add	r0, r3
 80113ec:	3001      	adds	r0, #1
 80113ee:	f002 fce5 	bl	8013dbc <operator new[](unsigned int)>
 80113f2:	4639      	mov	r1, r7
 80113f4:	f845 0009 	str.w	r0, [r5, r9]
 80113f8:	e7ac      	b.n	8011354 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x58>
 80113fa:	2000      	movs	r0, #0
 80113fc:	b005      	add	sp, #20
 80113fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011402:	bf00      	nop
 8011404:	200094c8 	andcs	r9, r0, r8, asr #9
 8011408:	200096f8 	strdcs	r9, [r0], -r8
 801140c:	080165cb 	stmdaeq	r1, {r0, r1, r3, r6, r7, r8, sl, sp, lr}
 8011410:	080179d2 	stmdaeq	r1, {r1, r4, r6, r7, r8, fp, ip, sp, lr}
 8011414:	080179ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r8, fp, ip, sp, lr}
 8011418:	200094ec 	andcs	r9, r0, ip, ror #9
 801141c:	20000008 	andcs	r0, r0, r8
 8011420:	200092c0 	andcs	r9, r0, r0, asr #5

08011424 <MDNS::HandleRequest(unsigned short)>:
 8011424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011428:	4605      	mov	r5, r0
 801142a:	2700      	movs	r7, #0
 801142c:	f04f 080c 	mov.w	r8, #12
 8011430:	b0c5      	sub	sp, #276	; 0x114
 8011432:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 80114f4 <MDNS::HandleRequest(unsigned short)+0xd0>
 8011436:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 80114f8 <MDNS::HandleRequest(unsigned short)+0xd4>
 801143a:	9103      	str	r1, [sp, #12]
 801143c:	9b03      	ldr	r3, [sp, #12]
 801143e:	42bb      	cmp	r3, r7
 8011440:	d802      	bhi.n	8011448 <MDNS::HandleRequest(unsigned short)+0x24>
 8011442:	b045      	add	sp, #276	; 0x114
 8011444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011448:	f8da 1000 	ldr.w	r1, [sl]
 801144c:	aa04      	add	r2, sp, #16
 801144e:	4441      	add	r1, r8
 8011450:	4628      	mov	r0, r5
 8011452:	f7ff fd55 	bl	8010f00 <MDNS::DecodeDNSNameNotation(char const*, char*)>
 8011456:	f8da 2000 	ldr.w	r2, [sl]
 801145a:	4440      	add	r0, r8
 801145c:	1813      	adds	r3, r2, r0
 801145e:	885b      	ldrh	r3, [r3, #2]
 8011460:	f100 0804 	add.w	r8, r0, #4
 8011464:	ba5b      	rev16	r3, r3
 8011466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801146a:	2b01      	cmp	r3, #1
 801146c:	d13d      	bne.n	80114ea <MDNS::HandleRequest(unsigned short)+0xc6>
 801146e:	5a14      	ldrh	r4, [r2, r0]
 8011470:	4b22      	ldr	r3, [pc, #136]	; (80114fc <MDNS::HandleRequest(unsigned short)+0xd8>)
 8011472:	ba64      	rev16	r4, r4
 8011474:	6818      	ldr	r0, [r3, #0]
 8011476:	a904      	add	r1, sp, #16
 8011478:	b2a4      	uxth	r4, r4
 801147a:	f7ff fcf5 	bl	8010e68 <strcmp>
 801147e:	b968      	cbnz	r0, 801149c <MDNS::HandleRequest(unsigned short)+0x78>
 8011480:	2c01      	cmp	r4, #1
 8011482:	d10b      	bne.n	801149c <MDNS::HandleRequest(unsigned short)+0x78>
 8011484:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8011488:	491d      	ldr	r1, [pc, #116]	; (8011500 <MDNS::HandleRequest(unsigned short)+0xdc>)
 801148a:	481e      	ldr	r0, [pc, #120]	; (8011504 <MDNS::HandleRequest(unsigned short)+0xe0>)
 801148c:	f831 2b04 	ldrh.w	r2, [r1], #4
 8011490:	9300      	str	r3, [sp, #0]
 8011492:	4b1d      	ldr	r3, [pc, #116]	; (8011508 <MDNS::HandleRequest(unsigned short)+0xe4>)
 8011494:	7800      	ldrb	r0, [r0, #0]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	f7ff fc2e 	bl	8010cf8 <udp_send>
 801149c:	481b      	ldr	r0, [pc, #108]	; (801150c <MDNS::HandleRequest(unsigned short)+0xe8>)
 801149e:	a904      	add	r1, sp, #16
 80114a0:	f7ff fce2 	bl	8010e68 <strcmp>
 80114a4:	f04f 0900 	mov.w	r9, #0
 80114a8:	4e19      	ldr	r6, [pc, #100]	; (8011510 <MDNS::HandleRequest(unsigned short)+0xec>)
 80114aa:	9002      	str	r0, [sp, #8]
 80114ac:	6833      	ldr	r3, [r6, #0]
 80114ae:	b1c3      	cbz	r3, 80114e2 <MDNS::HandleRequest(unsigned short)+0xbe>
 80114b0:	9b02      	ldr	r3, [sp, #8]
 80114b2:	b123      	cbz	r3, 80114be <MDNS::HandleRequest(unsigned short)+0x9a>
 80114b4:	6870      	ldr	r0, [r6, #4]
 80114b6:	a904      	add	r1, sp, #16
 80114b8:	f7ff fcd6 	bl	8010e68 <strcmp>
 80114bc:	b988      	cbnz	r0, 80114e2 <MDNS::HandleRequest(unsigned short)+0xbe>
 80114be:	2c0c      	cmp	r4, #12
 80114c0:	d10f      	bne.n	80114e2 <MDNS::HandleRequest(unsigned short)+0xbe>
 80114c2:	4649      	mov	r1, r9
 80114c4:	4628      	mov	r0, r5
 80114c6:	f7ff fedd 	bl	8011284 <MDNS::CreateMDNSMessage(unsigned int)>
 80114ca:	f241 43e9 	movw	r3, #5353	; 0x14e9
 80114ce:	480d      	ldr	r0, [pc, #52]	; (8011504 <MDNS::HandleRequest(unsigned short)+0xe0>)
 80114d0:	9300      	str	r3, [sp, #0]
 80114d2:	4b0d      	ldr	r3, [pc, #52]	; (8011508 <MDNS::HandleRequest(unsigned short)+0xe4>)
 80114d4:	f8bb 2000 	ldrh.w	r2, [fp]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	490e      	ldr	r1, [pc, #56]	; (8011514 <MDNS::HandleRequest(unsigned short)+0xf0>)
 80114dc:	7800      	ldrb	r0, [r0, #0]
 80114de:	f7ff fc0b 	bl	8010cf8 <udp_send>
 80114e2:	3610      	adds	r6, #16
 80114e4:	f1b9 0f00 	cmp.w	r9, #0
 80114e8:	d001      	beq.n	80114ee <MDNS::HandleRequest(unsigned short)+0xca>
 80114ea:	3701      	adds	r7, #1
 80114ec:	e7a6      	b.n	801143c <MDNS::HandleRequest(unsigned short)+0x18>
 80114ee:	f04f 0901 	mov.w	r9, #1
 80114f2:	e7db      	b.n	80114ac <MDNS::HandleRequest(unsigned short)+0x88>
 80114f4:	200096f4 	strdcs	r9, [r0], -r4
 80114f8:	200094ec 	andcs	r9, r0, ip, ror #9
 80114fc:	200096f0 	strdcs	r9, [r0], -r0
 8011500:	200092c4 	andcs	r9, r0, r4, asr #5
 8011504:	20000008 	andcs	r0, r0, r8
 8011508:	200092c0 	andcs	r9, r0, r0, asr #5
 801150c:	080179dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r8, fp, ip, sp, lr}
 8011510:	200094c8 	andcs	r9, r0, r8, asr #9
 8011514:	200094f0 	strdcs	r9, [r0], -r0

08011518 <MDNS::Parse()>:
 8011518:	4b08      	ldr	r3, [pc, #32]	; (801153c <MDNS::Parse()+0x24>)
 801151a:	681a      	ldr	r2, [r3, #0]
 801151c:	8853      	ldrh	r3, [r2, #2]
 801151e:	ba5b      	rev16	r3, r3
 8011520:	b299      	uxth	r1, r3
 8011522:	041b      	lsls	r3, r3, #16
 8011524:	d408      	bmi.n	8011538 <MDNS::Parse()+0x20>
 8011526:	0b89      	lsrs	r1, r1, #14
 8011528:	d106      	bne.n	8011538 <MDNS::Parse()+0x20>
 801152a:	8891      	ldrh	r1, [r2, #4]
 801152c:	b28b      	uxth	r3, r1
 801152e:	b11b      	cbz	r3, 8011538 <MDNS::Parse()+0x20>
 8011530:	ba49      	rev16	r1, r1
 8011532:	b289      	uxth	r1, r1
 8011534:	f7ff bf76 	b.w	8011424 <MDNS::HandleRequest(unsigned short)>
 8011538:	4770      	bx	lr
 801153a:	bf00      	nop
 801153c:	200096f4 	strdcs	r9, [r0], -r4

08011540 <MDNS::Run()>:
 8011540:	b538      	push	{r3, r4, r5, lr}
 8011542:	4d0c      	ldr	r5, [pc, #48]	; (8011574 <MDNS::Run()+0x34>)
 8011544:	4604      	mov	r4, r0
 8011546:	480c      	ldr	r0, [pc, #48]	; (8011578 <MDNS::Run()+0x38>)
 8011548:	462b      	mov	r3, r5
 801154a:	4a0c      	ldr	r2, [pc, #48]	; (801157c <MDNS::Run()+0x3c>)
 801154c:	490c      	ldr	r1, [pc, #48]	; (8011580 <MDNS::Run()+0x40>)
 801154e:	7800      	ldrb	r0, [r0, #0]
 8011550:	f7ff fbac 	bl	8010cac <udp_recv2>
 8011554:	4b0b      	ldr	r3, [pc, #44]	; (8011584 <MDNS::Run()+0x44>)
 8011556:	882a      	ldrh	r2, [r5, #0]
 8011558:	8018      	strh	r0, [r3, #0]
 801155a:	f241 43e9 	movw	r3, #5353	; 0x14e9
 801155e:	429a      	cmp	r2, r3
 8011560:	d106      	bne.n	8011570 <MDNS::Run()+0x30>
 8011562:	280c      	cmp	r0, #12
 8011564:	d904      	bls.n	8011570 <MDNS::Run()+0x30>
 8011566:	4620      	mov	r0, r4
 8011568:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801156c:	f7ff bfd4 	b.w	8011518 <MDNS::Parse()>
 8011570:	bd38      	pop	{r3, r4, r5, pc}
 8011572:	bf00      	nop
 8011574:	200092bc 			; <UNDEFINED> instruction: 0x200092bc
 8011578:	20000008 	andcs	r0, r0, r8
 801157c:	200092b8 			; <UNDEFINED> instruction: 0x200092b8
 8011580:	200096f4 	strdcs	r9, [r0], -r4
 8011584:	200094e8 	andcs	r9, r0, r8, ror #9

08011588 <MDNS::Print()>:
 8011588:	b510      	push	{r4, lr}
 801158a:	4816      	ldr	r0, [pc, #88]	; (80115e4 <MDNS::Print()+0x5c>)
 801158c:	f7f7 fd4e 	bl	800902c <printf>
 8011590:	4b15      	ldr	r3, [pc, #84]	; (80115e8 <MDNS::Print()+0x60>)
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	3301      	adds	r3, #1
 8011596:	d104      	bne.n	80115a2 <MDNS::Print()+0x1a>
 8011598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801159c:	4813      	ldr	r0, [pc, #76]	; (80115ec <MDNS::Print()+0x64>)
 801159e:	f7f7 bd45 	b.w	800902c <printf>
 80115a2:	4b13      	ldr	r3, [pc, #76]	; (80115f0 <MDNS::Print()+0x68>)
 80115a4:	4c13      	ldr	r4, [pc, #76]	; (80115f4 <MDNS::Print()+0x6c>)
 80115a6:	6819      	ldr	r1, [r3, #0]
 80115a8:	4813      	ldr	r0, [pc, #76]	; (80115f8 <MDNS::Print()+0x70>)
 80115aa:	f7f7 fd3f 	bl	800902c <printf>
 80115ae:	6823      	ldr	r3, [r4, #0]
 80115b0:	b14b      	cbz	r3, 80115c6 <MDNS::Print()+0x3e>
 80115b2:	4a12      	ldr	r2, [pc, #72]	; (80115fc <MDNS::Print()+0x74>)
 80115b4:	68a3      	ldr	r3, [r4, #8]
 80115b6:	6861      	ldr	r1, [r4, #4]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	bf08      	it	eq
 80115bc:	4613      	moveq	r3, r2
 80115be:	4810      	ldr	r0, [pc, #64]	; (8011600 <MDNS::Print()+0x78>)
 80115c0:	89a2      	ldrh	r2, [r4, #12]
 80115c2:	f7f7 fd33 	bl	800902c <printf>
 80115c6:	6923      	ldr	r3, [r4, #16]
 80115c8:	b15b      	cbz	r3, 80115e2 <MDNS::Print()+0x5a>
 80115ca:	69a3      	ldr	r3, [r4, #24]
 80115cc:	4a0b      	ldr	r2, [pc, #44]	; (80115fc <MDNS::Print()+0x74>)
 80115ce:	6961      	ldr	r1, [r4, #20]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	bf08      	it	eq
 80115d4:	4613      	moveq	r3, r2
 80115d6:	480a      	ldr	r0, [pc, #40]	; (8011600 <MDNS::Print()+0x78>)
 80115d8:	8ba2      	ldrh	r2, [r4, #28]
 80115da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80115de:	f7f7 bd25 	b.w	800902c <printf>
 80115e2:	bd10      	pop	{r4, pc}
 80115e4:	080179fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r8, fp, ip, sp, lr}
 80115e8:	20000008 	andcs	r0, r0, r8
 80115ec:	08017a00 	stmdaeq	r1, {r9, fp, ip, sp, lr}
 80115f0:	200096f0 	strdcs	r9, [r0], -r0
 80115f4:	200094c8 	andcs	r9, r0, r8, asr #9
 80115f8:	08017a0e 	stmdaeq	r1, {r1, r2, r3, r9, fp, ip, sp, lr}
 80115fc:	08016344 	stmdaeq	r1, {r2, r6, r8, r9, sp, lr}
 8011600:	08017a1a 	stmdaeq	r1, {r1, r3, r4, r9, fp, ip, sp, lr}

08011604 <strncpy.constprop.0.isra.0>:
 8011604:	233f      	movs	r3, #63	; 0x3f
 8011606:	3901      	subs	r1, #1
 8011608:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801160c:	b92a      	cbnz	r2, 801161a <strncpy.constprop.0.isra.0+0x16>
 801160e:	4403      	add	r3, r0
 8011610:	4298      	cmp	r0, r3
 8011612:	d006      	beq.n	8011622 <strncpy.constprop.0.isra.0+0x1e>
 8011614:	f800 2b01 	strb.w	r2, [r0], #1
 8011618:	e7fa      	b.n	8011610 <strncpy.constprop.0.isra.0+0xc>
 801161a:	3b01      	subs	r3, #1
 801161c:	f800 2b01 	strb.w	r2, [r0], #1
 8011620:	d1f2      	bne.n	8011608 <strncpy.constprop.0.isra.0+0x4>
 8011622:	4770      	bx	lr

08011624 <Network::Network()>:
 8011624:	4a12      	ldr	r2, [pc, #72]	; (8011670 <Network::Network()+0x4c>)
 8011626:	2300      	movs	r3, #0
 8011628:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801162c:	6010      	str	r0, [r2, #0]
 801162e:	2201      	movs	r2, #1
 8011630:	e9c0 2100 	strd	r2, r1, [r0]
 8011634:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011638:	2200      	movs	r2, #0
 801163a:	e9c0 3330 	strd	r3, r3, [r0, #192]	; 0xc0
 801163e:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8011642:	490c      	ldr	r1, [pc, #48]	; (8011674 <Network::Network()+0x50>)
 8011644:	6102      	str	r2, [r0, #16]
 8011646:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
 801164a:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
 801164e:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8011652:	61c3      	str	r3, [r0, #28]
 8011654:	f880 3020 	strb.w	r3, [r0, #32]
 8011658:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 801165c:	f100 02a5 	add.w	r2, r0, #165	; 0xa5
 8011660:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011664:	f802 3f01 	strb.w	r3, [r2, #1]!
 8011668:	2b00      	cmp	r3, #0
 801166a:	d1f9      	bne.n	8011660 <Network::Network()+0x3c>
 801166c:	4770      	bx	lr
 801166e:	bf00      	nop
 8011670:	200096f8 	strdcs	r9, [r0], -r8
 8011674:	08017a25 	stmdaeq	r1, {r0, r2, r5, r9, fp, ip, sp, lr}

08011678 <Network::Shutdown()>:
 8011678:	b508      	push	{r3, lr}
 801167a:	30bc      	adds	r0, #188	; 0xbc
 801167c:	f001 fc92 	bl	8012fa4 <NetworkDisplay::ShowShutdown()>
 8011680:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011684:	f7f5 bdb4 	b.w	80071f0 <net_shutdown>

08011688 <Network::Begin(unsigned short)>:
 8011688:	4608      	mov	r0, r1
 801168a:	f7ff ba9f 	b.w	8010bcc <udp_bind>

0801168e <Network::End(unsigned short)>:
 801168e:	4608      	mov	r0, r1
 8011690:	f7ff bab6 	b.w	8010c00 <udp_unbind>

08011694 <Network::MacAddressCopyTo(unsigned char*)>:
 8011694:	f100 039f 	add.w	r3, r0, #159	; 0x9f
 8011698:	3901      	subs	r1, #1
 801169a:	30a5      	adds	r0, #165	; 0xa5
 801169c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80116a0:	4283      	cmp	r3, r0
 80116a2:	f801 2f01 	strb.w	r2, [r1, #1]!
 80116a6:	d1f9      	bne.n	801169c <Network::MacAddressCopyTo(unsigned char*)+0x8>
 80116a8:	4770      	bx	lr

080116aa <Network::JoinGroup(int, unsigned int)>:
 80116aa:	4610      	mov	r0, r2
 80116ac:	f000 bf92 	b.w	80125d4 <igmp_join>

080116b0 <Network::LeaveGroup(int, unsigned int)>:
 80116b0:	4610      	mov	r0, r2
 80116b2:	f000 bfbb 	b.w	801262c <igmp_leave>

080116b6 <Network::SetDefaultIp()>:
 80116b6:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 80116ba:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
 80116be:	041b      	lsls	r3, r3, #16
 80116c0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80116c4:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
 80116c8:	3302      	adds	r3, #2
 80116ca:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 80116ce:	22ff      	movs	r2, #255	; 0xff
 80116d0:	6143      	str	r3, [r0, #20]
 80116d2:	e9c0 3206 	strd	r3, r2, [r0, #24]
 80116d6:	4770      	bx	lr

080116d8 <Network::Init(NetworkParamsStore*)>:
 80116d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116dc:	b0a5      	sub	sp, #148	; 0x94
 80116de:	4604      	mov	r4, r0
 80116e0:	a80b      	add	r0, sp, #44	; 0x2c
 80116e2:	f000 fa65 	bl	8011bb0 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 80116e6:	a80b      	add	r0, sp, #44	; 0x2c
 80116e8:	f000 fa6e 	bl	8011bc8 <NetworkParams::Load()>
 80116ec:	b110      	cbz	r0, 80116f4 <Network::Init(NetworkParamsStore*)+0x1c>
 80116ee:	a80b      	add	r0, sp, #44	; 0x2c
 80116f0:	f000 fc41 	bl	8011f76 <NetworkParams::Dump()>
 80116f4:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
 80116f8:	4628      	mov	r0, r5
 80116fa:	f001 fc3b 	bl	8012f74 <NetworkDisplay::ShowEmacStart()>
 80116fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011700:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
 8011704:	9308      	str	r3, [sp, #32]
 8011706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011708:	4630      	mov	r0, r6
 801170a:	9309      	str	r3, [sp, #36]	; 0x24
 801170c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801170e:	f104 0720 	add.w	r7, r4, #32
 8011712:	930a      	str	r3, [sp, #40]	; 0x28
 8011714:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8011718:	7163      	strb	r3, [r4, #5]
 801171a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801171c:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 8011720:	bf18      	it	ne
 8011722:	f8dd 2085 	ldrne.w	r2, [sp, #133]	; 0x85
 8011726:	061b      	lsls	r3, r3, #24
 8011728:	bf54      	ite	pl
 801172a:	2300      	movpl	r3, #0
 801172c:	f8dd 3089 	ldrmi.w	r3, [sp, #137]	; 0x89
 8011730:	60e2      	str	r2, [r4, #12]
 8011732:	6123      	str	r3, [r4, #16]
 8011734:	f003 fd7a 	bl	801522c <emac_start(unsigned char*)>
 8011738:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 801173c:	2b00      	cmp	r3, #0
 801173e:	f040 80c7 	bne.w	80118d0 <Network::Init(NetworkParamsStore*)+0x1f8>
 8011742:	4984      	ldr	r1, [pc, #528]	; (8011954 <Network::Init(NetworkParamsStore*)+0x27c>)
 8011744:	f104 001f 	add.w	r0, r4, #31
 8011748:	f811 2b01 	ldrb.w	r2, [r1], #1
 801174c:	f103 0c01 	add.w	ip, r3, #1
 8011750:	2a00      	cmp	r2, #0
 8011752:	f040 80b9 	bne.w	80118c8 <Network::Init(NetworkParamsStore*)+0x1f0>
 8011756:	f894 20a3 	ldrb.w	r2, [r4, #163]	; 0xa3
 801175a:	18e1      	adds	r1, r4, r3
 801175c:	0910      	lsrs	r0, r2, #4
 801175e:	2a9f      	cmp	r2, #159	; 0x9f
 8011760:	f002 020f 	and.w	r2, r2, #15
 8011764:	bf94      	ite	ls
 8011766:	3030      	addls	r0, #48	; 0x30
 8011768:	3037      	addhi	r0, #55	; 0x37
 801176a:	2a09      	cmp	r2, #9
 801176c:	bf94      	ite	ls
 801176e:	3230      	addls	r2, #48	; 0x30
 8011770:	3237      	addhi	r2, #55	; 0x37
 8011772:	44a4      	add	ip, r4
 8011774:	f881 0020 	strb.w	r0, [r1, #32]
 8011778:	f88c 2020 	strb.w	r2, [ip, #32]
 801177c:	f894 20a4 	ldrb.w	r2, [r4, #164]	; 0xa4
 8011780:	f103 0802 	add.w	r8, r3, #2
 8011784:	0910      	lsrs	r0, r2, #4
 8011786:	2a9f      	cmp	r2, #159	; 0x9f
 8011788:	f002 020f 	and.w	r2, r2, #15
 801178c:	bf94      	ite	ls
 801178e:	3030      	addls	r0, #48	; 0x30
 8011790:	3037      	addhi	r0, #55	; 0x37
 8011792:	f103 0e03 	add.w	lr, r3, #3
 8011796:	2a09      	cmp	r2, #9
 8011798:	eb04 0c08 	add.w	ip, r4, r8
 801179c:	f88c 0020 	strb.w	r0, [ip, #32]
 80117a0:	bf94      	ite	ls
 80117a2:	3230      	addls	r2, #48	; 0x30
 80117a4:	3237      	addhi	r2, #55	; 0x37
 80117a6:	eb04 000e 	add.w	r0, r4, lr
 80117aa:	f880 2020 	strb.w	r2, [r0, #32]
 80117ae:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
 80117b2:	f103 0c04 	add.w	ip, r3, #4
 80117b6:	0910      	lsrs	r0, r2, #4
 80117b8:	2a9f      	cmp	r2, #159	; 0x9f
 80117ba:	f002 020f 	and.w	r2, r2, #15
 80117be:	bf94      	ite	ls
 80117c0:	3030      	addls	r0, #48	; 0x30
 80117c2:	3037      	addhi	r0, #55	; 0x37
 80117c4:	3305      	adds	r3, #5
 80117c6:	2a09      	cmp	r2, #9
 80117c8:	4423      	add	r3, r4
 80117ca:	44a4      	add	ip, r4
 80117cc:	bf94      	ite	ls
 80117ce:	3230      	addls	r2, #48	; 0x30
 80117d0:	3237      	addhi	r2, #55	; 0x37
 80117d2:	f88c 0020 	strb.w	r0, [ip, #32]
 80117d6:	f883 2020 	strb.w	r2, [r3, #32]
 80117da:	2300      	movs	r3, #0
 80117dc:	f881 3026 	strb.w	r3, [r1, #38]	; 0x26
 80117e0:	f003 fdcc 	bl	801537c <net::link_register_read()>
 80117e4:	7963      	ldrb	r3, [r4, #5]
 80117e6:	6020      	str	r0, [r4, #0]
 80117e8:	2800      	cmp	r0, #0
 80117ea:	f040 809c 	bne.w	8011926 <Network::Init(NetworkParamsStore*)+0x24e>
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	f040 80aa 	bne.w	8011948 <Network::Init(NetworkParamsStore*)+0x270>
 80117f4:	9b08      	ldr	r3, [sp, #32]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d173      	bne.n	80118e2 <Network::Init(NetworkParamsStore*)+0x20a>
 80117fa:	4620      	mov	r0, r4
 80117fc:	f7ff ff5b 	bl	80116b6 <Network::SetDefaultIp()>
 8011800:	6963      	ldr	r3, [r4, #20]
 8011802:	69e2      	ldr	r2, [r4, #28]
 8011804:	9308      	str	r3, [sp, #32]
 8011806:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
 801180a:	1de3      	adds	r3, r4, #7
 801180c:	f104 0905 	add.w	r9, r4, #5
 8011810:	9302      	str	r3, [sp, #8]
 8011812:	9300      	str	r3, [sp, #0]
 8011814:	463a      	mov	r2, r7
 8011816:	464b      	mov	r3, r9
 8011818:	4630      	mov	r0, r6
 801181a:	a908      	add	r1, sp, #32
 801181c:	f7f5 fc98 	bl	8007150 <net_init>
 8011820:	79e3      	ldrb	r3, [r4, #7]
 8011822:	b11b      	cbz	r3, 801182c <Network::Init(NetworkParamsStore*)+0x154>
 8011824:	2104      	movs	r1, #4
 8011826:	4628      	mov	r0, r5
 8011828:	f001 fbc2 	bl	8012fb0 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 801182c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8011830:	f89d a08d 	ldrb.w	sl, [sp, #141]	; 0x8d
 8011834:	9304      	str	r3, [sp, #16]
 8011836:	233c      	movs	r3, #60	; 0x3c
 8011838:	fb03 f30a 	mul.w	r3, r3, sl
 801183c:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8011958 <Network::Init(NetworkParamsStore*)+0x280>
 8011840:	f8df b118 	ldr.w	fp, [pc, #280]	; 801195c <Network::Init(NetworkParamsStore*)+0x284>
 8011844:	9303      	str	r3, [sp, #12]
 8011846:	79e3      	ldrb	r3, [r4, #7]
 8011848:	b393      	cbz	r3, 80118b0 <Network::Init(NetworkParamsStore*)+0x1d8>
 801184a:	f1ba 0f00 	cmp.w	sl, #0
 801184e:	d02f      	beq.n	80118b0 <Network::Init(NetworkParamsStore*)+0x1d8>
 8011850:	9b04      	ldr	r3, [sp, #16]
 8011852:	b36b      	cbz	r3, 80118b0 <Network::Init(NetworkParamsStore*)+0x1d8>
 8011854:	2104      	movs	r1, #4
 8011856:	f8d8 0000 	ldr.w	r0, [r8]
 801185a:	f002 f9cb 	bl	8013bf4 <LedBlink::SetMode(ledblink::Mode)>
 801185e:	2103      	movs	r1, #3
 8011860:	4628      	mov	r0, r5
 8011862:	f001 fba5 	bl	8012fb0 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8011866:	2000      	movs	r0, #0
 8011868:	f002 fc5a 	bl	8014120 <time>
 801186c:	9005      	str	r0, [sp, #20]
 801186e:	2000      	movs	r0, #0
 8011870:	f002 fc56 	bl	8014120 <time>
 8011874:	9b05      	ldr	r3, [sp, #20]
 8011876:	493a      	ldr	r1, [pc, #232]	; (8011960 <Network::Init(NetworkParamsStore*)+0x288>)
 8011878:	1ac0      	subs	r0, r0, r3
 801187a:	9b03      	ldr	r3, [sp, #12]
 801187c:	4298      	cmp	r0, r3
 801187e:	db38      	blt.n	80118f2 <Network::Init(NetworkParamsStore*)+0x21a>
 8011880:	2101      	movs	r1, #1
 8011882:	4628      	mov	r0, r5
 8011884:	f001 fb94 	bl	8012fb0 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8011888:	2101      	movs	r1, #1
 801188a:	f8d8 0000 	ldr.w	r0, [r8]
 801188e:	f002 f9b1 	bl	8013bf4 <LedBlink::SetMode(ledblink::Mode)>
 8011892:	2301      	movs	r3, #1
 8011894:	7163      	strb	r3, [r4, #5]
 8011896:	2300      	movs	r3, #0
 8011898:	71e3      	strb	r3, [r4, #7]
 801189a:	9b02      	ldr	r3, [sp, #8]
 801189c:	463a      	mov	r2, r7
 801189e:	9300      	str	r3, [sp, #0]
 80118a0:	4630      	mov	r0, r6
 80118a2:	464b      	mov	r3, r9
 80118a4:	a908      	add	r1, sp, #32
 80118a6:	f7f5 fc53 	bl	8007150 <net_init>
 80118aa:	7963      	ldrb	r3, [r4, #5]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d0ca      	beq.n	8011846 <Network::Init(NetworkParamsStore*)+0x16e>
 80118b0:	9b08      	ldr	r3, [sp, #32]
 80118b2:	4628      	mov	r0, r5
 80118b4:	6163      	str	r3, [r4, #20]
 80118b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118b8:	61e3      	str	r3, [r4, #28]
 80118ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118bc:	61a3      	str	r3, [r4, #24]
 80118be:	f001 fb5f 	bl	8012f80 <NetworkDisplay::ShowIp()>
 80118c2:	b025      	add	sp, #148	; 0x94
 80118c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118c8:	4663      	mov	r3, ip
 80118ca:	f800 2f01 	strb.w	r2, [r0, #1]!
 80118ce:	e73b      	b.n	8011748 <Network::Init(NetworkParamsStore*)+0x70>
 80118d0:	4638      	mov	r0, r7
 80118d2:	f10d 0145 	add.w	r1, sp, #69	; 0x45
 80118d6:	f7ff fe95 	bl	8011604 <strncpy.constprop.0.isra.0>
 80118da:	2300      	movs	r3, #0
 80118dc:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
 80118e0:	e77e      	b.n	80117e0 <Network::Init(NetworkParamsStore*)+0x108>
 80118e2:	69e1      	ldr	r1, [r4, #28]
 80118e4:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 80118e8:	4053      	eors	r3, r2
 80118ea:	420b      	tst	r3, r1
 80118ec:	bf18      	it	ne
 80118ee:	920a      	strne	r2, [sp, #40]	; 0x28
 80118f0:	e78b      	b.n	801180a <Network::Init(NetworkParamsStore*)+0x132>
 80118f2:	f8d8 3000 	ldr.w	r3, [r8]
 80118f6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80118fa:	f1bc 0f00 	cmp.w	ip, #0
 80118fe:	d0b6      	beq.n	801186e <Network::Init(NetworkParamsStore*)+0x196>
 8011900:	6808      	ldr	r0, [r1, #0]
 8011902:	695a      	ldr	r2, [r3, #20]
 8011904:	1a80      	subs	r0, r0, r2
 8011906:	4584      	cmp	ip, r0
 8011908:	d8b1      	bhi.n	801186e <Network::Init(NetworkParamsStore*)+0x196>
 801190a:	6808      	ldr	r0, [r1, #0]
 801190c:	6158      	str	r0, [r3, #20]
 801190e:	6918      	ldr	r0, [r3, #16]
 8011910:	2801      	cmp	r0, #1
 8011912:	f080 0201 	eor.w	r2, r0, #1
 8011916:	611a      	str	r2, [r3, #16]
 8011918:	bf16      	itet	ne
 801191a:	2301      	movne	r3, #1
 801191c:	f8cb 0014 	streq.w	r0, [fp, #20]
 8011920:	f8cb 3010 	strne.w	r3, [fp, #16]
 8011924:	e7a3      	b.n	801186e <Network::Init(NetworkParamsStore*)+0x196>
 8011926:	b11b      	cbz	r3, 8011930 <Network::Init(NetworkParamsStore*)+0x258>
 8011928:	2300      	movs	r3, #0
 801192a:	e9c4 3306 	strd	r3, r3, [r4, #24]
 801192e:	9308      	str	r3, [sp, #32]
 8011930:	2300      	movs	r3, #0
 8011932:	f88d 301f 	strb.w	r3, [sp, #31]
 8011936:	f10d 031f 	add.w	r3, sp, #31
 801193a:	463a      	mov	r2, r7
 801193c:	4630      	mov	r0, r6
 801193e:	9300      	str	r3, [sp, #0]
 8011940:	a908      	add	r1, sp, #32
 8011942:	f7f5 fc05 	bl	8007150 <net_init>
 8011946:	e7b3      	b.n	80118b0 <Network::Init(NetworkParamsStore*)+0x1d8>
 8011948:	2101      	movs	r1, #1
 801194a:	4628      	mov	r0, r5
 801194c:	f001 fb30 	bl	8012fb0 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8011950:	e75b      	b.n	801180a <Network::Init(NetworkParamsStore*)+0x132>
 8011952:	bf00      	nop
 8011954:	08017a2a 	stmdaeq	r1, {r1, r3, r5, r9, fp, ip, sp, lr}
 8011958:	20009dbc 			; <UNDEFINED> instruction: 0x20009dbc
 801195c:	40011000 	andmi	r1, r1, r0
 8011960:	20009dd4 	ldrdcs	r9, [r0], -r4

08011964 <Network::SetIp(unsigned int)>:
 8011964:	7943      	ldrb	r3, [r0, #5]
 8011966:	b570      	push	{r4, r5, r6, lr}
 8011968:	4604      	mov	r4, r0
 801196a:	460d      	mov	r5, r1
 801196c:	2600      	movs	r6, #0
 801196e:	b113      	cbz	r3, 8011976 <Network::SetIp(unsigned int)+0x12>
 8011970:	7146      	strb	r6, [r0, #5]
 8011972:	f7ff f87f 	bl	8010a74 <net_dhcp_release>
 8011976:	71e6      	strb	r6, [r4, #7]
 8011978:	b975      	cbnz	r5, 8011998 <Network::SetIp(unsigned int)+0x34>
 801197a:	4620      	mov	r0, r4
 801197c:	f7ff fe9b 	bl	80116b6 <Network::SetDefaultIp()>
 8011980:	6960      	ldr	r0, [r4, #20]
 8011982:	f7ff f833 	bl	80109ec <net_set_ip>
 8011986:	34bc      	adds	r4, #188	; 0xbc
 8011988:	4620      	mov	r0, r4
 801198a:	f001 faf9 	bl	8012f80 <NetworkDisplay::ShowIp()>
 801198e:	4620      	mov	r0, r4
 8011990:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011994:	f001 bafa 	b.w	8012f8c <NetworkDisplay::ShowNetMask()>
 8011998:	4628      	mov	r0, r5
 801199a:	f7ff f827 	bl	80109ec <net_set_ip>
 801199e:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 80119a2:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80119a6:	2800      	cmp	r0, #0
 80119a8:	d0ed      	beq.n	8011986 <Network::SetIp(unsigned int)+0x22>
 80119aa:	6803      	ldr	r3, [r0, #0]
 80119ac:	4629      	mov	r1, r5
 80119ae:	689b      	ldr	r3, [r3, #8]
 80119b0:	4798      	blx	r3
 80119b2:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 80119b6:	2100      	movs	r1, #0
 80119b8:	6803      	ldr	r3, [r0, #0]
 80119ba:	699b      	ldr	r3, [r3, #24]
 80119bc:	4798      	blx	r3
 80119be:	e7e2      	b.n	8011986 <Network::SetIp(unsigned int)+0x22>

080119c0 <Network::SetNetmask(unsigned int)>:
 80119c0:	69c2      	ldr	r2, [r0, #28]
 80119c2:	b510      	push	{r4, lr}
 80119c4:	428a      	cmp	r2, r1
 80119c6:	4604      	mov	r4, r0
 80119c8:	d00f      	beq.n	80119ea <Network::SetNetmask(unsigned int)+0x2a>
 80119ca:	61c1      	str	r1, [r0, #28]
 80119cc:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 80119d0:	b110      	cbz	r0, 80119d8 <Network::SetNetmask(unsigned int)+0x18>
 80119d2:	6803      	ldr	r3, [r0, #0]
 80119d4:	68db      	ldr	r3, [r3, #12]
 80119d6:	4798      	blx	r3
 80119d8:	34bc      	adds	r4, #188	; 0xbc
 80119da:	4620      	mov	r0, r4
 80119dc:	f001 fad0 	bl	8012f80 <NetworkDisplay::ShowIp()>
 80119e0:	4620      	mov	r0, r4
 80119e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119e6:	f001 bad1 	b.w	8012f8c <NetworkDisplay::ShowNetMask()>
 80119ea:	bd10      	pop	{r4, pc}

080119ec <Network::SetGatewayIp(unsigned int)>:
 80119ec:	b538      	push	{r3, r4, r5, lr}
 80119ee:	6983      	ldr	r3, [r0, #24]
 80119f0:	4604      	mov	r4, r0
 80119f2:	428b      	cmp	r3, r1
 80119f4:	460d      	mov	r5, r1
 80119f6:	d00f      	beq.n	8011a18 <Network::SetGatewayIp(unsigned int)+0x2c>
 80119f8:	4608      	mov	r0, r1
 80119fa:	f7ff f807 	bl	8010a0c <net_set_gw>
 80119fe:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8011a02:	b118      	cbz	r0, 8011a0c <Network::SetGatewayIp(unsigned int)+0x20>
 8011a04:	6803      	ldr	r3, [r0, #0]
 8011a06:	4629      	mov	r1, r5
 8011a08:	691b      	ldr	r3, [r3, #16]
 8011a0a:	4798      	blx	r3
 8011a0c:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8011a10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a14:	f001 bac0 	b.w	8012f98 <NetworkDisplay::ShowGatewayIp()>
 8011a18:	bd38      	pop	{r3, r4, r5, pc}
	...

08011a1c <Network::EnableDhcp()>:
 8011a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a1e:	4e25      	ldr	r6, [pc, #148]	; (8011ab4 <Network::EnableDhcp()+0x98>)
 8011a20:	4604      	mov	r4, r0
 8011a22:	6833      	ldr	r3, [r6, #0]
 8011a24:	b085      	sub	sp, #20
 8011a26:	781f      	ldrb	r7, [r3, #0]
 8011a28:	b137      	cbz	r7, 8011a38 <Network::EnableDhcp()+0x1c>
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	2104      	movs	r1, #4
 8011a2e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011a32:	701a      	strb	r2, [r3, #0]
 8011a34:	f002 fcec 	bl	8014410 <fwdgt_config>
 8011a38:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
 8011a3c:	2101      	movs	r1, #1
 8011a3e:	4628      	mov	r0, r5
 8011a40:	f001 fab6 	bl	8012fb0 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8011a44:	1de2      	adds	r2, r4, #7
 8011a46:	f104 0120 	add.w	r1, r4, #32
 8011a4a:	a801      	add	r0, sp, #4
 8011a4c:	f7fe ffe6 	bl	8010a1c <net_set_dhcp>
 8011a50:	79e3      	ldrb	r3, [r4, #7]
 8011a52:	7160      	strb	r0, [r4, #5]
 8011a54:	b35b      	cbz	r3, 8011aae <Network::EnableDhcp()+0x92>
 8011a56:	2104      	movs	r1, #4
 8011a58:	4628      	mov	r0, r5
 8011a5a:	f001 faa9 	bl	8012fb0 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8011a5e:	b16f      	cbz	r7, 8011a7c <Network::EnableDhcp()+0x60>
 8011a60:	2102      	movs	r1, #2
 8011a62:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011a66:	6836      	ldr	r6, [r6, #0]
 8011a68:	f002 fcd2 	bl	8014410 <fwdgt_config>
 8011a6c:	2801      	cmp	r0, #1
 8011a6e:	bf0c      	ite	eq
 8011a70:	2301      	moveq	r3, #1
 8011a72:	2300      	movne	r3, #0
 8011a74:	7033      	strb	r3, [r6, #0]
 8011a76:	d101      	bne.n	8011a7c <Network::EnableDhcp()+0x60>
 8011a78:	f002 fcba 	bl	80143f0 <fwdgt_enable>
 8011a7c:	9b01      	ldr	r3, [sp, #4]
 8011a7e:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8011a82:	6163      	str	r3, [r4, #20]
 8011a84:	9b02      	ldr	r3, [sp, #8]
 8011a86:	61e3      	str	r3, [r4, #28]
 8011a88:	9b03      	ldr	r3, [sp, #12]
 8011a8a:	61a3      	str	r3, [r4, #24]
 8011a8c:	b118      	cbz	r0, 8011a96 <Network::EnableDhcp()+0x7a>
 8011a8e:	6803      	ldr	r3, [r0, #0]
 8011a90:	7961      	ldrb	r1, [r4, #5]
 8011a92:	699b      	ldr	r3, [r3, #24]
 8011a94:	4798      	blx	r3
 8011a96:	4628      	mov	r0, r5
 8011a98:	f001 fa72 	bl	8012f80 <NetworkDisplay::ShowIp()>
 8011a9c:	4628      	mov	r0, r5
 8011a9e:	f001 fa75 	bl	8012f8c <NetworkDisplay::ShowNetMask()>
 8011aa2:	4628      	mov	r0, r5
 8011aa4:	f001 fa78 	bl	8012f98 <NetworkDisplay::ShowGatewayIp()>
 8011aa8:	7960      	ldrb	r0, [r4, #5]
 8011aaa:	b005      	add	sp, #20
 8011aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011aae:	2102      	movs	r1, #2
 8011ab0:	e7d2      	b.n	8011a58 <Network::EnableDhcp()+0x3c>
 8011ab2:	bf00      	nop
 8011ab4:	20009dc0 	andcs	r9, r0, r0, asr #27

08011ab8 <Network::Print()>:
 8011ab8:	b530      	push	{r4, r5, lr}
 8011aba:	4604      	mov	r4, r0
 8011abc:	b085      	sub	sp, #20
 8011abe:	4832      	ldr	r0, [pc, #200]	; (8011b88 <Network::Print()+0xd0>)
 8011ac0:	f7f7 fab4 	bl	800902c <printf>
 8011ac4:	f104 0120 	add.w	r1, r4, #32
 8011ac8:	4830      	ldr	r0, [pc, #192]	; (8011b8c <Network::Print()+0xd4>)
 8011aca:	f7f7 faaf 	bl	800902c <printf>
 8011ace:	68a1      	ldr	r1, [r4, #8]
 8011ad0:	f104 02a6 	add.w	r2, r4, #166	; 0xa6
 8011ad4:	482e      	ldr	r0, [pc, #184]	; (8011b90 <Network::Print()+0xd8>)
 8011ad6:	f7f7 faa9 	bl	800902c <printf>
 8011ada:	69e0      	ldr	r0, [r4, #28]
 8011adc:	f004 fabc 	bl	8016058 <__popcountsi2>
 8011ae0:	6965      	ldr	r5, [r4, #20]
 8011ae2:	9001      	str	r0, [sp, #4]
 8011ae4:	0e2b      	lsrs	r3, r5, #24
 8011ae6:	9300      	str	r3, [sp, #0]
 8011ae8:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8011aec:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8011af0:	b2e9      	uxtb	r1, r5
 8011af2:	4828      	ldr	r0, [pc, #160]	; (8011b94 <Network::Print()+0xdc>)
 8011af4:	f7f7 fa9a 	bl	800902c <printf>
 8011af8:	69e1      	ldr	r1, [r4, #28]
 8011afa:	4827      	ldr	r0, [pc, #156]	; (8011b98 <Network::Print()+0xe0>)
 8011afc:	0e0b      	lsrs	r3, r1, #24
 8011afe:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8011b02:	9300      	str	r3, [sp, #0]
 8011b04:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8011b08:	b2c9      	uxtb	r1, r1
 8011b0a:	f7f7 fa8f 	bl	800902c <printf>
 8011b0e:	69a1      	ldr	r1, [r4, #24]
 8011b10:	4822      	ldr	r0, [pc, #136]	; (8011b9c <Network::Print()+0xe4>)
 8011b12:	0e0b      	lsrs	r3, r1, #24
 8011b14:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8011b18:	9300      	str	r3, [sp, #0]
 8011b1a:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8011b1e:	b2c9      	uxtb	r1, r1
 8011b20:	f7f7 fa84 	bl	800902c <printf>
 8011b24:	69e3      	ldr	r3, [r4, #28]
 8011b26:	6961      	ldr	r1, [r4, #20]
 8011b28:	481d      	ldr	r0, [pc, #116]	; (8011ba0 <Network::Print()+0xe8>)
 8011b2a:	ea61 0103 	orn	r1, r1, r3
 8011b2e:	0e0b      	lsrs	r3, r1, #24
 8011b30:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8011b34:	9300      	str	r3, [sp, #0]
 8011b36:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8011b3a:	b2c9      	uxtb	r1, r1
 8011b3c:	f7f7 fa76 	bl	800902c <printf>
 8011b40:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 8011b44:	f894 20a1 	ldrb.w	r2, [r4, #161]	; 0xa1
 8011b48:	9302      	str	r3, [sp, #8]
 8011b4a:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 8011b4e:	f894 10a0 	ldrb.w	r1, [r4, #160]	; 0xa0
 8011b52:	9301      	str	r3, [sp, #4]
 8011b54:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
 8011b58:	4812      	ldr	r0, [pc, #72]	; (8011ba4 <Network::Print()+0xec>)
 8011b5a:	9300      	str	r3, [sp, #0]
 8011b5c:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 8011b60:	f7f7 fa64 	bl	800902c <printf>
 8011b64:	4b10      	ldr	r3, [pc, #64]	; (8011ba8 <Network::Print()+0xf0>)
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	79da      	ldrb	r2, [r3, #7]
 8011b6a:	b952      	cbnz	r2, 8011b82 <Network::Print()+0xca>
 8011b6c:	795b      	ldrb	r3, [r3, #5]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	bf14      	ite	ne
 8011b72:	2144      	movne	r1, #68	; 0x44
 8011b74:	2153      	moveq	r1, #83	; 0x53
 8011b76:	480d      	ldr	r0, [pc, #52]	; (8011bac <Network::Print()+0xf4>)
 8011b78:	b005      	add	sp, #20
 8011b7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011b7e:	f7f7 ba55 	b.w	800902c <printf>
 8011b82:	215a      	movs	r1, #90	; 0x5a
 8011b84:	e7f7      	b.n	8011b76 <Network::Print()+0xbe>
 8011b86:	bf00      	nop
 8011b88:	08017a36 	stmdaeq	r1, {r1, r2, r4, r5, r9, fp, ip, sp, lr}
 8011b8c:	08017a3f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r9, fp, ip, sp, lr}
 8011b90:	08017a50 	stmdaeq	r1, {r4, r6, r9, fp, ip, sp, lr}
 8011b94:	08017a65 	stmdaeq	r1, {r0, r2, r5, r6, r9, fp, ip, sp, lr}
 8011b98:	08017a82 	stmdaeq	r1, {r1, r7, r9, fp, ip, sp, lr}
 8011b9c:	08017a9c 	stmdaeq	r1, {r2, r3, r4, r7, r9, fp, ip, sp, lr}
 8011ba0:	08017ab6 	stmdaeq	r1, {r1, r2, r4, r5, r7, r9, fp, ip, sp, lr}
 8011ba4:	08017ad0 	stmdaeq	r1, {r4, r6, r7, r9, fp, ip, sp, lr}
 8011ba8:	200096f8 	strdcs	r9, [r0], -r8
 8011bac:	08017afc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r9, fp, ip, sp, lr}

08011bb0 <NetworkParams::NetworkParams(NetworkParamsStore*)>:
 8011bb0:	b510      	push	{r4, lr}
 8011bb2:	225e      	movs	r2, #94	; 0x5e
 8011bb4:	4604      	mov	r4, r0
 8011bb6:	f840 1b04 	str.w	r1, [r0], #4
 8011bba:	2100      	movs	r1, #0
 8011bbc:	f002 f9d2 	bl	8013f64 <memset>
 8011bc0:	2301      	movs	r3, #1
 8011bc2:	4620      	mov	r0, r4
 8011bc4:	7623      	strb	r3, [r4, #24]
 8011bc6:	bd10      	pop	{r4, pc}

08011bc8 <NetworkParams::Load()>:
 8011bc8:	b508      	push	{r3, lr}
 8011bca:	2300      	movs	r3, #0
 8011bcc:	4601      	mov	r1, r0
 8011bce:	6043      	str	r3, [r0, #4]
 8011bd0:	6800      	ldr	r0, [r0, #0]
 8011bd2:	b120      	cbz	r0, 8011bde <NetworkParams::Load()+0x16>
 8011bd4:	6803      	ldr	r3, [r0, #0]
 8011bd6:	3104      	adds	r1, #4
 8011bd8:	68db      	ldr	r3, [r3, #12]
 8011bda:	4798      	blx	r3
 8011bdc:	2001      	movs	r0, #1
 8011bde:	bd08      	pop	{r3, pc}

08011be0 <NetworkParams::Load(char const*, unsigned int)>:
 8011be0:	6803      	ldr	r3, [r0, #0]
 8011be2:	b1d3      	cbz	r3, 8011c1a <NetworkParams::Load(char const*, unsigned int)+0x3a>
 8011be4:	2300      	movs	r3, #0
 8011be6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011be8:	460d      	mov	r5, r1
 8011bea:	4616      	mov	r6, r2
 8011bec:	4604      	mov	r4, r0
 8011bee:	6043      	str	r3, [r0, #4]
 8011bf0:	4602      	mov	r2, r0
 8011bf2:	490a      	ldr	r1, [pc, #40]	; (8011c1c <NetworkParams::Load(char const*, unsigned int)+0x3c>)
 8011bf4:	4668      	mov	r0, sp
 8011bf6:	f001 fb33 	bl	8013260 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8011bfa:	4632      	mov	r2, r6
 8011bfc:	4629      	mov	r1, r5
 8011bfe:	4668      	mov	r0, sp
 8011c00:	f001 fb32 	bl	8013268 <ReadConfigFile::Read(char const*, unsigned int)>
 8011c04:	4621      	mov	r1, r4
 8011c06:	f851 0b04 	ldr.w	r0, [r1], #4
 8011c0a:	6803      	ldr	r3, [r0, #0]
 8011c0c:	689b      	ldr	r3, [r3, #8]
 8011c0e:	4798      	blx	r3
 8011c10:	4668      	mov	r0, sp
 8011c12:	f001 fb28 	bl	8013266 <ReadConfigFile::~ReadConfigFile()>
 8011c16:	b002      	add	sp, #8
 8011c18:	bd70      	pop	{r4, r5, r6, pc}
 8011c1a:	4770      	bx	lr
 8011c1c:	08011d41 	stmdaeq	r1, {r0, r6, r8, sl, fp, ip}

08011c20 <NetworkParams::callbackFunction(char const*)>:
 8011c20:	b530      	push	{r4, r5, lr}
 8011c22:	460d      	mov	r5, r1
 8011c24:	b085      	sub	sp, #20
 8011c26:	4604      	mov	r4, r0
 8011c28:	493f      	ldr	r1, [pc, #252]	; (8011d28 <NetworkParams::callbackFunction(char const*)+0x108>)
 8011c2a:	4628      	mov	r0, r5
 8011c2c:	f10d 0207 	add.w	r2, sp, #7
 8011c30:	f001 fc52 	bl	80134d8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8011c34:	b978      	cbnz	r0, 8011c56 <NetworkParams::callbackFunction(char const*)+0x36>
 8011c36:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011c3a:	6863      	ldr	r3, [r4, #4]
 8011c3c:	b142      	cbz	r2, 8011c50 <NetworkParams::callbackFunction(char const*)+0x30>
 8011c3e:	f023 0301 	bic.w	r3, r3, #1
 8011c42:	3a00      	subs	r2, #0
 8011c44:	bf18      	it	ne
 8011c46:	2201      	movne	r2, #1
 8011c48:	6063      	str	r3, [r4, #4]
 8011c4a:	7622      	strb	r2, [r4, #24]
 8011c4c:	b005      	add	sp, #20
 8011c4e:	bd30      	pop	{r4, r5, pc}
 8011c50:	f043 0301 	orr.w	r3, r3, #1
 8011c54:	e7f5      	b.n	8011c42 <NetworkParams::callbackFunction(char const*)+0x22>
 8011c56:	4628      	mov	r0, r5
 8011c58:	4934      	ldr	r1, [pc, #208]	; (8011d2c <NetworkParams::callbackFunction(char const*)+0x10c>)
 8011c5a:	f10d 0207 	add.w	r2, sp, #7
 8011c5e:	f001 fc3b 	bl	80134d8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8011c62:	b980      	cbnz	r0, 8011c86 <NetworkParams::callbackFunction(char const*)+0x66>
 8011c64:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011c68:	6863      	ldr	r3, [r4, #4]
 8011c6a:	1e51      	subs	r1, r2, #1
 8011c6c:	2904      	cmp	r1, #4
 8011c6e:	bf97      	itett	ls
 8011c70:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 8011c74:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 8011c78:	6063      	strls	r3, [r4, #4]
 8011c7a:	f884 2061 	strbls.w	r2, [r4, #97]	; 0x61
 8011c7e:	bf84      	itt	hi
 8011c80:	6063      	strhi	r3, [r4, #4]
 8011c82:	f884 0061 	strbhi.w	r0, [r4, #97]	; 0x61
 8011c86:	4628      	mov	r0, r5
 8011c88:	4929      	ldr	r1, [pc, #164]	; (8011d30 <NetworkParams::callbackFunction(char const*)+0x110>)
 8011c8a:	aa02      	add	r2, sp, #8
 8011c8c:	f001 fb9c 	bl	80133c8 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8011c90:	b9c8      	cbnz	r0, 8011cc6 <NetworkParams::callbackFunction(char const*)+0xa6>
 8011c92:	9b02      	ldr	r3, [sp, #8]
 8011c94:	b2d9      	uxtb	r1, r3
 8011c96:	29ac      	cmp	r1, #172	; 0xac
 8011c98:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011c9c:	d009      	beq.n	8011cb2 <NetworkParams::callbackFunction(char const*)+0x92>
 8011c9e:	29c0      	cmp	r1, #192	; 0xc0
 8011ca0:	d00b      	beq.n	8011cba <NetworkParams::callbackFunction(char const*)+0x9a>
 8011ca2:	290a      	cmp	r1, #10
 8011ca4:	d10c      	bne.n	8011cc0 <NetworkParams::callbackFunction(char const*)+0xa0>
 8011ca6:	60a3      	str	r3, [r4, #8]
 8011ca8:	6863      	ldr	r3, [r4, #4]
 8011caa:	f043 0302 	orr.w	r3, r3, #2
 8011cae:	6063      	str	r3, [r4, #4]
 8011cb0:	e7cc      	b.n	8011c4c <NetworkParams::callbackFunction(char const*)+0x2c>
 8011cb2:	3a10      	subs	r2, #16
 8011cb4:	2a0f      	cmp	r2, #15
 8011cb6:	d8c9      	bhi.n	8011c4c <NetworkParams::callbackFunction(char const*)+0x2c>
 8011cb8:	e7f5      	b.n	8011ca6 <NetworkParams::callbackFunction(char const*)+0x86>
 8011cba:	2aa8      	cmp	r2, #168	; 0xa8
 8011cbc:	d1c6      	bne.n	8011c4c <NetworkParams::callbackFunction(char const*)+0x2c>
 8011cbe:	e7f2      	b.n	8011ca6 <NetworkParams::callbackFunction(char const*)+0x86>
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d0f0      	beq.n	8011ca6 <NetworkParams::callbackFunction(char const*)+0x86>
 8011cc4:	e7c2      	b.n	8011c4c <NetworkParams::callbackFunction(char const*)+0x2c>
 8011cc6:	4628      	mov	r0, r5
 8011cc8:	491a      	ldr	r1, [pc, #104]	; (8011d34 <NetworkParams::callbackFunction(char const*)+0x114>)
 8011cca:	aa02      	add	r2, sp, #8
 8011ccc:	f001 fb7c 	bl	80133c8 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8011cd0:	b960      	cbnz	r0, 8011cec <NetworkParams::callbackFunction(char const*)+0xcc>
 8011cd2:	9b02      	ldr	r3, [sp, #8]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d0b9      	beq.n	8011c4c <NetworkParams::callbackFunction(char const*)+0x2c>
 8011cd8:	ba1a      	rev	r2, r3
 8011cda:	43d1      	mvns	r1, r2
 8011cdc:	ea12 0251 	ands.w	r2, r2, r1, lsr #1
 8011ce0:	d1b4      	bne.n	8011c4c <NetworkParams::callbackFunction(char const*)+0x2c>
 8011ce2:	60e3      	str	r3, [r4, #12]
 8011ce4:	6863      	ldr	r3, [r4, #4]
 8011ce6:	f043 0304 	orr.w	r3, r3, #4
 8011cea:	e7e0      	b.n	8011cae <NetworkParams::callbackFunction(char const*)+0x8e>
 8011cec:	4628      	mov	r0, r5
 8011cee:	4912      	ldr	r1, [pc, #72]	; (8011d38 <NetworkParams::callbackFunction(char const*)+0x118>)
 8011cf0:	aa02      	add	r2, sp, #8
 8011cf2:	f001 fb69 	bl	80133c8 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8011cf6:	b928      	cbnz	r0, 8011d04 <NetworkParams::callbackFunction(char const*)+0xe4>
 8011cf8:	9b02      	ldr	r3, [sp, #8]
 8011cfa:	6123      	str	r3, [r4, #16]
 8011cfc:	6863      	ldr	r3, [r4, #4]
 8011cfe:	f043 0308 	orr.w	r3, r3, #8
 8011d02:	e7d4      	b.n	8011cae <NetworkParams::callbackFunction(char const*)+0x8e>
 8011d04:	233f      	movs	r3, #63	; 0x3f
 8011d06:	4628      	mov	r0, r5
 8011d08:	9303      	str	r3, [sp, #12]
 8011d0a:	490c      	ldr	r1, [pc, #48]	; (8011d3c <NetworkParams::callbackFunction(char const*)+0x11c>)
 8011d0c:	ab03      	add	r3, sp, #12
 8011d0e:	f104 0219 	add.w	r2, r4, #25
 8011d12:	f001 fadd 	bl	80132d0 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 8011d16:	2800      	cmp	r0, #0
 8011d18:	d198      	bne.n	8011c4c <NetworkParams::callbackFunction(char const*)+0x2c>
 8011d1a:	9b03      	ldr	r3, [sp, #12]
 8011d1c:	4423      	add	r3, r4
 8011d1e:	7658      	strb	r0, [r3, #25]
 8011d20:	6863      	ldr	r3, [r4, #4]
 8011d22:	f043 0320 	orr.w	r3, r3, #32
 8011d26:	e7c2      	b.n	8011cae <NetworkParams::callbackFunction(char const*)+0x8e>
 8011d28:	08017b54 	stmdaeq	r1, {r2, r4, r6, r8, r9, fp, ip, sp, lr}
 8011d2c:	08017b32 	stmdaeq	r1, {r1, r4, r5, r8, r9, fp, ip, sp, lr}
 8011d30:	08017b17 	stmdaeq	r1, {r0, r1, r2, r4, r8, r9, fp, ip, sp, lr}
 8011d34:	08017b4b 	stmdaeq	r1, {r0, r1, r3, r6, r8, r9, fp, ip, sp, lr}
 8011d38:	08017b22 	stmdaeq	r1, {r1, r5, r8, r9, fp, ip, sp, lr}
 8011d3c:	08017b42 	stmdaeq	r1, {r1, r6, r8, r9, fp, ip, sp, lr}

08011d40 <NetworkParams::staticCallbackFunction(void*, char const*)>:
 8011d40:	f7ff bf6e 	b.w	8011c20 <NetworkParams::callbackFunction(char const*)>

08011d44 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)>:
 8011d44:	b570      	push	{r4, r5, r6, lr}
 8011d46:	4604      	mov	r4, r0
 8011d48:	4615      	mov	r5, r2
 8011d4a:	461e      	mov	r6, r3
 8011d4c:	b086      	sub	sp, #24
 8011d4e:	3004      	adds	r0, #4
 8011d50:	2900      	cmp	r1, #0
 8011d52:	d02b      	beq.n	8011dac <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x68>
 8011d54:	225e      	movs	r2, #94	; 0x5e
 8011d56:	f002 f8ee 	bl	8013f36 <memmove>
 8011d5a:	462a      	mov	r2, r5
 8011d5c:	4633      	mov	r3, r6
 8011d5e:	4970      	ldr	r1, [pc, #448]	; (8011f20 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1dc>)
 8011d60:	a803      	add	r0, sp, #12
 8011d62:	f001 f9dd 	bl	8013120 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 8011d66:	6863      	ldr	r3, [r4, #4]
 8011d68:	079a      	lsls	r2, r3, #30
 8011d6a:	bf5f      	itttt	pl
 8011d6c:	4a6d      	ldrpl	r2, [pc, #436]	; (8011f24 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e0>)
 8011d6e:	6812      	ldrpl	r2, [r2, #0]
 8011d70:	6952      	ldrpl	r2, [r2, #20]
 8011d72:	60a2      	strpl	r2, [r4, #8]
 8011d74:	075e      	lsls	r6, r3, #29
 8011d76:	bf5f      	itttt	pl
 8011d78:	4a6a      	ldrpl	r2, [pc, #424]	; (8011f24 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e0>)
 8011d7a:	6812      	ldrpl	r2, [r2, #0]
 8011d7c:	69d2      	ldrpl	r2, [r2, #28]
 8011d7e:	60e2      	strpl	r2, [r4, #12]
 8011d80:	071d      	lsls	r5, r3, #28
 8011d82:	bf58      	it	pl
 8011d84:	4a67      	ldrpl	r2, [pc, #412]	; (8011f24 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e0>)
 8011d86:	f104 0519 	add.w	r5, r4, #25
 8011d8a:	bf5e      	ittt	pl
 8011d8c:	6812      	ldrpl	r2, [r2, #0]
 8011d8e:	6992      	ldrpl	r2, [r2, #24]
 8011d90:	6122      	strpl	r2, [r4, #16]
 8011d92:	0698      	lsls	r0, r3, #26
 8011d94:	d418      	bmi.n	8011dc8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x84>
 8011d96:	4628      	mov	r0, r5
 8011d98:	223f      	movs	r2, #63	; 0x3f
 8011d9a:	4b62      	ldr	r3, [pc, #392]	; (8011f24 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e0>)
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	331f      	adds	r3, #31
 8011da0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8011da4:	b949      	cbnz	r1, 8011dba <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x76>
 8011da6:	f002 f8dd 	bl	8013f64 <memset>
 8011daa:	e00a      	b.n	8011dc2 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x7e>
 8011dac:	6823      	ldr	r3, [r4, #0]
 8011dae:	4601      	mov	r1, r0
 8011db0:	681a      	ldr	r2, [r3, #0]
 8011db2:	4618      	mov	r0, r3
 8011db4:	68d2      	ldr	r2, [r2, #12]
 8011db6:	4790      	blx	r2
 8011db8:	e7cf      	b.n	8011d5a <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x16>
 8011dba:	3a01      	subs	r2, #1
 8011dbc:	f800 1b01 	strb.w	r1, [r0], #1
 8011dc0:	d1ee      	bne.n	8011da0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x5c>
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8011dc8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8011dcc:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 8011dd0:	7e23      	ldrb	r3, [r4, #24]
 8011dd2:	42b2      	cmp	r2, r6
 8011dd4:	6861      	ldr	r1, [r4, #4]
 8011dd6:	d21a      	bcs.n	8011e0e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xca>
 8011dd8:	9803      	ldr	r0, [sp, #12]
 8011dda:	07c9      	lsls	r1, r1, #31
 8011ddc:	4410      	add	r0, r2
 8011dde:	eba6 0602 	sub.w	r6, r6, r2
 8011de2:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8011de6:	d404      	bmi.n	8011df2 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xae>
 8011de8:	b922      	cbnz	r2, 8011df4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xb0>
 8011dea:	9300      	str	r3, [sp, #0]
 8011dec:	4a4e      	ldr	r2, [pc, #312]	; (8011f28 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e4>)
 8011dee:	4b4f      	ldr	r3, [pc, #316]	; (8011f2c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e8>)
 8011df0:	e003      	b.n	8011dfa <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xb6>
 8011df2:	b312      	cbz	r2, 8011e3a <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xf6>
 8011df4:	9300      	str	r3, [sp, #0]
 8011df6:	4a4e      	ldr	r2, [pc, #312]	; (8011f30 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1ec>)
 8011df8:	4b4c      	ldr	r3, [pc, #304]	; (8011f2c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e8>)
 8011dfa:	4631      	mov	r1, r6
 8011dfc:	f7f7 f93e 	bl	800907c <snprintf>
 8011e00:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011e04:	4286      	cmp	r6, r0
 8011e06:	bfa4      	itt	ge
 8011e08:	181b      	addge	r3, r3, r0
 8011e0a:	f8ad 3012 	strhge.w	r3, [sp, #18]
 8011e0e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8011e12:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 8011e16:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8011e1a:	42b2      	cmp	r2, r6
 8011e1c:	6861      	ldr	r1, [r4, #4]
 8011e1e:	d21f      	bcs.n	8011e60 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>
 8011e20:	9803      	ldr	r0, [sp, #12]
 8011e22:	05c9      	lsls	r1, r1, #23
 8011e24:	4410      	add	r0, r2
 8011e26:	eba6 0602 	sub.w	r6, r6, r2
 8011e2a:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8011e2e:	d408      	bmi.n	8011e42 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xfe>
 8011e30:	b94a      	cbnz	r2, 8011e46 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x102>
 8011e32:	9300      	str	r3, [sp, #0]
 8011e34:	4a3c      	ldr	r2, [pc, #240]	; (8011f28 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e4>)
 8011e36:	4b3f      	ldr	r3, [pc, #252]	; (8011f34 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f0>)
 8011e38:	e008      	b.n	8011e4c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x108>
 8011e3a:	9300      	str	r3, [sp, #0]
 8011e3c:	4a3e      	ldr	r2, [pc, #248]	; (8011f38 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f4>)
 8011e3e:	4b3b      	ldr	r3, [pc, #236]	; (8011f2c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e8>)
 8011e40:	e7db      	b.n	8011dfa <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xb6>
 8011e42:	2a00      	cmp	r2, #0
 8011e44:	d03c      	beq.n	8011ec0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x17c>
 8011e46:	9300      	str	r3, [sp, #0]
 8011e48:	4a39      	ldr	r2, [pc, #228]	; (8011f30 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1ec>)
 8011e4a:	4b3a      	ldr	r3, [pc, #232]	; (8011f34 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f0>)
 8011e4c:	4631      	mov	r1, r6
 8011e4e:	f7f7 f915 	bl	800907c <snprintf>
 8011e52:	4286      	cmp	r6, r0
 8011e54:	bfa2      	ittt	ge
 8011e56:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8011e5a:	18c0      	addge	r0, r0, r3
 8011e5c:	f8ad 0012 	strhge.w	r0, [sp, #18]
 8011e60:	4936      	ldr	r1, [pc, #216]	; (8011f3c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f8>)
 8011e62:	a803      	add	r0, sp, #12
 8011e64:	f001 f9e2 	bl	801322c <PropertiesBuilder::AddComment(char const*)>
 8011e68:	6863      	ldr	r3, [r4, #4]
 8011e6a:	68a2      	ldr	r2, [r4, #8]
 8011e6c:	4934      	ldr	r1, [pc, #208]	; (8011f40 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1fc>)
 8011e6e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8011e72:	a803      	add	r0, sp, #12
 8011e74:	f001 f996 	bl	80131a4 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 8011e78:	6863      	ldr	r3, [r4, #4]
 8011e7a:	68e2      	ldr	r2, [r4, #12]
 8011e7c:	4931      	ldr	r1, [pc, #196]	; (8011f44 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x200>)
 8011e7e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8011e82:	a803      	add	r0, sp, #12
 8011e84:	f001 f98e 	bl	80131a4 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 8011e88:	6863      	ldr	r3, [r4, #4]
 8011e8a:	6922      	ldr	r2, [r4, #16]
 8011e8c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011e90:	492d      	ldr	r1, [pc, #180]	; (8011f48 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x204>)
 8011e92:	a803      	add	r0, sp, #12
 8011e94:	f001 f986 	bl	80131a4 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 8011e98:	6862      	ldr	r2, [r4, #4]
 8011e9a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011e9e:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 8011ea2:	42a3      	cmp	r3, r4
 8011ea4:	d21e      	bcs.n	8011ee4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1a0>
 8011ea6:	9803      	ldr	r0, [sp, #12]
 8011ea8:	0692      	lsls	r2, r2, #26
 8011eaa:	4418      	add	r0, r3
 8011eac:	eba4 0403 	sub.w	r4, r4, r3
 8011eb0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8011eb4:	d408      	bmi.n	8011ec8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x184>
 8011eb6:	b943      	cbnz	r3, 8011eca <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x186>
 8011eb8:	4b24      	ldr	r3, [pc, #144]	; (8011f4c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x208>)
 8011eba:	4a25      	ldr	r2, [pc, #148]	; (8011f50 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x20c>)
 8011ebc:	9500      	str	r5, [sp, #0]
 8011ebe:	e007      	b.n	8011ed0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x18c>
 8011ec0:	9300      	str	r3, [sp, #0]
 8011ec2:	4a1d      	ldr	r2, [pc, #116]	; (8011f38 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f4>)
 8011ec4:	4b1b      	ldr	r3, [pc, #108]	; (8011f34 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f0>)
 8011ec6:	e7c1      	b.n	8011e4c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x108>
 8011ec8:	b32b      	cbz	r3, 8011f16 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1d2>
 8011eca:	4b20      	ldr	r3, [pc, #128]	; (8011f4c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x208>)
 8011ecc:	4a21      	ldr	r2, [pc, #132]	; (8011f54 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x210>)
 8011ece:	9500      	str	r5, [sp, #0]
 8011ed0:	4621      	mov	r1, r4
 8011ed2:	f7f7 f8d3 	bl	800907c <snprintf>
 8011ed6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011eda:	4284      	cmp	r4, r0
 8011edc:	bfa4      	itt	ge
 8011ede:	181b      	addge	r3, r3, r0
 8011ee0:	f8ad 3012 	strhge.w	r3, [sp, #18]
 8011ee4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8011ee8:	b17b      	cbz	r3, 8011f0a <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1c6>
 8011eea:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8011eee:	9b03      	ldr	r3, [sp, #12]
 8011ef0:	4413      	add	r3, r2
 8011ef2:	227d      	movs	r2, #125	; 0x7d
 8011ef4:	f803 2c01 	strb.w	r2, [r3, #-1]
 8011ef8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011efc:	9903      	ldr	r1, [sp, #12]
 8011efe:	54ca      	strb	r2, [r1, r3]
 8011f00:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011f04:	3301      	adds	r3, #1
 8011f06:	f8ad 3012 	strh.w	r3, [sp, #18]
 8011f0a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8011f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f10:	601a      	str	r2, [r3, #0]
 8011f12:	b006      	add	sp, #24
 8011f14:	bd70      	pop	{r4, r5, r6, pc}
 8011f16:	4b0d      	ldr	r3, [pc, #52]	; (8011f4c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x208>)
 8011f18:	4a0f      	ldr	r2, [pc, #60]	; (8011f58 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x214>)
 8011f1a:	9500      	str	r5, [sp, #0]
 8011f1c:	e7d8      	b.n	8011ed0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x18c>
 8011f1e:	bf00      	nop
 8011f20:	08017b5d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, r9, fp, ip, sp, lr}
 8011f24:	200096f8 	strdcs	r9, [r0], -r8
 8011f28:	08016595 	stmdaeq	r1, {r0, r2, r4, r7, r8, sl, sp, lr}
 8011f2c:	08017b54 	stmdaeq	r1, {r2, r4, r6, r8, r9, fp, ip, sp, lr}
 8011f30:	0801658c 	stmdaeq	r1, {r2, r3, r7, r8, sl, sp, lr}
 8011f34:	08017b32 	stmdaeq	r1, {r1, r4, r5, r8, r9, fp, ip, sp, lr}
 8011f38:	08016596 	stmdaeq	r1, {r1, r2, r4, r7, r8, sl, sp, lr}
 8011f3c:	08017b0d 	stmdaeq	r1, {r0, r2, r3, r8, r9, fp, ip, sp, lr}
 8011f40:	08017b17 	stmdaeq	r1, {r0, r1, r2, r4, r8, r9, fp, ip, sp, lr}
 8011f44:	08017b4b 	stmdaeq	r1, {r0, r1, r3, r6, r8, r9, fp, ip, sp, lr}
 8011f48:	08017b22 	stmdaeq	r1, {r1, r5, r8, r9, fp, ip, sp, lr}
 8011f4c:	08017b42 	stmdaeq	r1, {r1, r6, r8, r9, fp, ip, sp, lr}
 8011f50:	080165a8 	stmdaeq	r1, {r3, r5, r7, r8, sl, sp, lr}
 8011f54:	0801659d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, sl, sp, lr}
 8011f58:	080165a9 	stmdaeq	r1, {r0, r3, r5, r7, r8, sl, sp, lr}

08011f5c <NetworkParams::Save(char*, unsigned int, unsigned int&)>:
 8011f5c:	b513      	push	{r0, r1, r4, lr}
 8011f5e:	6804      	ldr	r4, [r0, #0]
 8011f60:	b914      	cbnz	r4, 8011f68 <NetworkParams::Save(char*, unsigned int, unsigned int&)+0xc>
 8011f62:	601c      	str	r4, [r3, #0]
 8011f64:	b002      	add	sp, #8
 8011f66:	bd10      	pop	{r4, pc}
 8011f68:	9300      	str	r3, [sp, #0]
 8011f6a:	4613      	mov	r3, r2
 8011f6c:	460a      	mov	r2, r1
 8011f6e:	2100      	movs	r1, #0
 8011f70:	f7ff fee8 	bl	8011d44 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)>
 8011f74:	e7f6      	b.n	8011f64 <NetworkParams::Save(char*, unsigned int, unsigned int&)+0x8>

08011f76 <NetworkParams::Dump()>:
 8011f76:	4770      	bx	lr

08011f78 <memcpy.isra.0>:
 8011f78:	3801      	subs	r0, #1
 8011f7a:	440a      	add	r2, r1
 8011f7c:	4291      	cmp	r1, r2
 8011f7e:	d100      	bne.n	8011f82 <memcpy.isra.0+0xa>
 8011f80:	4770      	bx	lr
 8011f82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f86:	f800 3f01 	strb.w	r3, [r0, #1]!
 8011f8a:	e7f7      	b.n	8011f7c <memcpy.isra.0+0x4>

08011f8c <arp_announce>:
 8011f8c:	4803      	ldr	r0, [pc, #12]	; (8011f9c <arp_announce+0x10>)
 8011f8e:	69c3      	ldr	r3, [r0, #28]
 8011f90:	b113      	cbz	r3, 8011f98 <arp_announce+0xc>
 8011f92:	212a      	movs	r1, #42	; 0x2a
 8011f94:	f002 bdd2 	b.w	8014b3c <emac_eth_send>
 8011f98:	4770      	bx	lr
 8011f9a:	bf00      	nop
 8011f9c:	200096fc 	strdcs	r9, [r0], -ip

08011fa0 <arp_handle_request>:
 8011fa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011fa2:	2204      	movs	r2, #4
 8011fa4:	f100 0126 	add.w	r1, r0, #38	; 0x26
 8011fa8:	4604      	mov	r4, r0
 8011faa:	eb0d 0002 	add.w	r0, sp, r2
 8011fae:	f7ff ffe3 	bl	8011f78 <memcpy.isra.0>
 8011fb2:	4b0d      	ldr	r3, [pc, #52]	; (8011fe8 <arp_handle_request+0x48>)
 8011fb4:	9a01      	ldr	r2, [sp, #4]
 8011fb6:	69db      	ldr	r3, [r3, #28]
 8011fb8:	429a      	cmp	r2, r3
 8011fba:	d113      	bne.n	8011fe4 <arp_handle_request+0x44>
 8011fbc:	2206      	movs	r2, #6
 8011fbe:	4d0b      	ldr	r5, [pc, #44]	; (8011fec <arp_handle_request+0x4c>)
 8011fc0:	18a1      	adds	r1, r4, r2
 8011fc2:	4628      	mov	r0, r5
 8011fc4:	f7ff ffd8 	bl	8011f78 <memcpy.isra.0>
 8011fc8:	f104 0116 	add.w	r1, r4, #22
 8011fcc:	f105 0020 	add.w	r0, r5, #32
 8011fd0:	2206      	movs	r2, #6
 8011fd2:	f7ff ffd1 	bl	8011f78 <memcpy.isra.0>
 8011fd6:	69e3      	ldr	r3, [r4, #28]
 8011fd8:	212a      	movs	r1, #42	; 0x2a
 8011fda:	4628      	mov	r0, r5
 8011fdc:	f8c5 3026 	str.w	r3, [r5, #38]	; 0x26
 8011fe0:	f002 fdac 	bl	8014b3c <emac_eth_send>
 8011fe4:	b003      	add	sp, #12
 8011fe6:	bd30      	pop	{r4, r5, pc}
 8011fe8:	200096fc 	strdcs	r9, [r0], -ip
 8011fec:	20009728 	andcs	r9, r0, r8, lsr #14

08011ff0 <arp_handle_reply>:
 8011ff0:	69c1      	ldr	r1, [r0, #28]
 8011ff2:	3016      	adds	r0, #22
 8011ff4:	f000 b80a 	b.w	801200c <arp_cache_update>

08011ff8 <arp_send_request>:
 8011ff8:	4b03      	ldr	r3, [pc, #12]	; (8012008 <arp_send_request+0x10>)
 8011ffa:	212a      	movs	r1, #42	; 0x2a
 8011ffc:	f8c3 0026 	str.w	r0, [r3, #38]	; 0x26
 8012000:	4618      	mov	r0, r3
 8012002:	f002 bd9b 	b.w	8014b3c <emac_eth_send>
 8012006:	bf00      	nop
 8012008:	20009754 	andcs	r9, r0, r4, asr r7

0801200c <arp_cache_update>:
 801200c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801200e:	4e11      	ldr	r6, [pc, #68]	; (8012054 <arp_cache_update+0x48>)
 8012010:	8833      	ldrh	r3, [r6, #0]
 8012012:	2b20      	cmp	r3, #32
 8012014:	d018      	beq.n	8012048 <arp_cache_update+0x3c>
 8012016:	2400      	movs	r4, #0
 8012018:	220c      	movs	r2, #12
 801201a:	4d0f      	ldr	r5, [pc, #60]	; (8012058 <arp_cache_update+0x4c>)
 801201c:	b2a7      	uxth	r7, r4
 801201e:	42bb      	cmp	r3, r7
 8012020:	d80b      	bhi.n	801203a <arp_cache_update+0x2e>
 8012022:	fb02 5203 	mla	r2, r2, r3, r5
 8012026:	1d84      	adds	r4, r0, #6
 8012028:	3203      	adds	r2, #3
 801202a:	42a0      	cmp	r0, r4
 801202c:	d10d      	bne.n	801204a <arp_cache_update+0x3e>
 801202e:	220c      	movs	r2, #12
 8012030:	435a      	muls	r2, r3
 8012032:	3301      	adds	r3, #1
 8012034:	50a9      	str	r1, [r5, r2]
 8012036:	8033      	strh	r3, [r6, #0]
 8012038:	e006      	b.n	8012048 <arp_cache_update+0x3c>
 801203a:	3401      	adds	r4, #1
 801203c:	fb02 5704 	mla	r7, r2, r4, r5
 8012040:	f857 7c0c 	ldr.w	r7, [r7, #-12]
 8012044:	428f      	cmp	r7, r1
 8012046:	d1e9      	bne.n	801201c <arp_cache_update+0x10>
 8012048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801204a:	f810 7b01 	ldrb.w	r7, [r0], #1
 801204e:	f802 7f01 	strb.w	r7, [r2, #1]!
 8012052:	e7ea      	b.n	801202a <arp_cache_update+0x1e>
 8012054:	20009900 	andcs	r9, r0, r0, lsl #18
 8012058:	20009780 	andcs	r9, r0, r0, lsl #15

0801205c <arp_cache_lookup>:
 801205c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012060:	2200      	movs	r2, #0
 8012062:	4606      	mov	r6, r0
 8012064:	460c      	mov	r4, r1
 8012066:	200c      	movs	r0, #12
 8012068:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80120f0 <arp_cache_lookup+0x94>
 801206c:	fb00 f302 	mul.w	r3, r0, r2
 8012070:	f853 1008 	ldr.w	r1, [r3, r8]
 8012074:	42b1      	cmp	r1, r6
 8012076:	d10d      	bne.n	8012094 <arp_cache_lookup+0x38>
 8012078:	3304      	adds	r3, #4
 801207a:	4443      	add	r3, r8
 801207c:	3c01      	subs	r4, #1
 801207e:	1d9a      	adds	r2, r3, #6
 8012080:	4293      	cmp	r3, r2
 8012082:	d102      	bne.n	801208a <arp_cache_lookup+0x2e>
 8012084:	4630      	mov	r0, r6
 8012086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801208a:	f813 1b01 	ldrb.w	r1, [r3], #1
 801208e:	f804 1f01 	strb.w	r1, [r4, #1]!
 8012092:	e7f5      	b.n	8012080 <arp_cache_lookup+0x24>
 8012094:	b111      	cbz	r1, 801209c <arp_cache_lookup+0x40>
 8012096:	3201      	adds	r2, #1
 8012098:	2a20      	cmp	r2, #32
 801209a:	d1e7      	bne.n	801206c <arp_cache_lookup+0x10>
 801209c:	2704      	movs	r7, #4
 801209e:	f8df a054 	ldr.w	sl, [pc, #84]	; 80120f4 <arp_cache_lookup+0x98>
 80120a2:	f8ba 5000 	ldrh.w	r5, [sl]
 80120a6:	3f01      	subs	r7, #1
 80120a8:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 80120ac:	d101      	bne.n	80120b2 <arp_cache_lookup+0x56>
 80120ae:	463e      	mov	r6, r7
 80120b0:	e7e8      	b.n	8012084 <arp_cache_lookup+0x28>
 80120b2:	4630      	mov	r0, r6
 80120b4:	f7ff ffa0 	bl	8011ff8 <arp_send_request>
 80120b8:	f44f 3900 	mov.w	r9, #131072	; 0x20000
 80120bc:	f1b9 0901 	subs.w	r9, r9, #1
 80120c0:	f8ba 3000 	ldrh.w	r3, [sl]
 80120c4:	d011      	beq.n	80120ea <arp_cache_lookup+0x8e>
 80120c6:	429d      	cmp	r5, r3
 80120c8:	d00c      	beq.n	80120e4 <arp_cache_lookup+0x88>
 80120ca:	230c      	movs	r3, #12
 80120cc:	fb03 8505 	mla	r5, r3, r5, r8
 80120d0:	3c01      	subs	r4, #1
 80120d2:	1d2b      	adds	r3, r5, #4
 80120d4:	350a      	adds	r5, #10
 80120d6:	42ab      	cmp	r3, r5
 80120d8:	d0d4      	beq.n	8012084 <arp_cache_lookup+0x28>
 80120da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120de:	f804 2f01 	strb.w	r2, [r4, #1]!
 80120e2:	e7f8      	b.n	80120d6 <arp_cache_lookup+0x7a>
 80120e4:	f7f5 fa1c 	bl	8007520 <net_handle>
 80120e8:	e7e8      	b.n	80120bc <arp_cache_lookup+0x60>
 80120ea:	429d      	cmp	r5, r3
 80120ec:	d0db      	beq.n	80120a6 <arp_cache_lookup+0x4a>
 80120ee:	e7ec      	b.n	80120ca <arp_cache_lookup+0x6e>
 80120f0:	20009780 	andcs	r9, r0, r0, lsl #15
 80120f4:	20009900 	andcs	r9, r0, r0, lsl #18

080120f8 <_parse_response>:
 80120f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120fc:	2400      	movs	r4, #0
 80120fe:	460d      	mov	r5, r1
 8012100:	46a3      	mov	fp, r4
 8012102:	4627      	mov	r7, r4
 8012104:	46a2      	mov	sl, r4
 8012106:	46a1      	mov	r9, r4
 8012108:	46a0      	mov	r8, r4
 801210a:	4e50      	ldr	r6, [pc, #320]	; (801224c <_parse_response+0x154>)
 801210c:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8012110:	6833      	ldr	r3, [r6, #0]
 8012112:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8012116:	e9cd 4405 	strd	r4, r4, [sp, #20]
 801211a:	9009      	str	r0, [sp, #36]	; 0x24
 801211c:	9402      	str	r4, [sp, #8]
 801211e:	9407      	str	r4, [sp, #28]
 8012120:	9308      	str	r3, [sp, #32]
 8012122:	f7f5 f9fd 	bl	8007520 <net_handle>
 8012126:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801212a:	9300      	str	r3, [sp, #0]
 801212c:	f44f 7209 	mov.w	r2, #548	; 0x224
 8012130:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8012134:	ab0c      	add	r3, sp, #48	; 0x30
 8012136:	a90d      	add	r1, sp, #52	; 0x34
 8012138:	f7fe fd82 	bl	8010c40 <udp_recv>
 801213c:	2800      	cmp	r0, #0
 801213e:	d03f      	beq.n	80121c0 <_parse_response+0xc8>
 8012140:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8012144:	2b43      	cmp	r3, #67	; 0x43
 8012146:	d13b      	bne.n	80121c0 <_parse_response+0xc8>
 8012148:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 801214c:	1e6b      	subs	r3, r5, #1
 801214e:	1d69      	adds	r1, r5, #5
 8012150:	4299      	cmp	r1, r3
 8012152:	d12f      	bne.n	80121b4 <_parse_response+0xbc>
 8012154:	2100      	movs	r1, #0
 8012156:	ab0d      	add	r3, sp, #52	; 0x34
 8012158:	181d      	adds	r5, r3, r0
 801215a:	468c      	mov	ip, r1
 801215c:	460e      	mov	r6, r1
 801215e:	4608      	mov	r0, r1
 8012160:	ab49      	add	r3, sp, #292	; 0x124
 8012162:	42ab      	cmp	r3, r5
 8012164:	d337      	bcc.n	80121d6 <_parse_response+0xde>
 8012166:	b141      	cbz	r1, 801217a <_parse_response+0x82>
 8012168:	4b39      	ldr	r3, [pc, #228]	; (8012250 <_parse_response+0x158>)
 801216a:	9a07      	ldr	r2, [sp, #28]
 801216c:	f883 8003 	strb.w	r8, [r3, #3]
 8012170:	709a      	strb	r2, [r3, #2]
 8012172:	9a06      	ldr	r2, [sp, #24]
 8012174:	705a      	strb	r2, [r3, #1]
 8012176:	9a05      	ldr	r2, [sp, #20]
 8012178:	701a      	strb	r2, [r3, #0]
 801217a:	f1bc 0f00 	cmp.w	ip, #0
 801217e:	d007      	beq.n	8012190 <_parse_response+0x98>
 8012180:	4b34      	ldr	r3, [pc, #208]	; (8012254 <_parse_response+0x15c>)
 8012182:	9a04      	ldr	r2, [sp, #16]
 8012184:	705c      	strb	r4, [r3, #1]
 8012186:	70da      	strb	r2, [r3, #3]
 8012188:	9a03      	ldr	r2, [sp, #12]
 801218a:	709a      	strb	r2, [r3, #2]
 801218c:	9a02      	ldr	r2, [sp, #8]
 801218e:	701a      	strb	r2, [r3, #0]
 8012190:	b13e      	cbz	r6, 80121a2 <_parse_response+0xaa>
 8012192:	4b31      	ldr	r3, [pc, #196]	; (8012258 <_parse_response+0x160>)
 8012194:	70df      	strb	r7, [r3, #3]
 8012196:	f883 a002 	strb.w	sl, [r3, #2]
 801219a:	f883 9001 	strb.w	r9, [r3, #1]
 801219e:	f883 b000 	strb.w	fp, [r3]
 80121a2:	2802      	cmp	r0, #2
 80121a4:	d102      	bne.n	80121ac <_parse_response+0xb4>
 80121a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80121a8:	4b2c      	ldr	r3, [pc, #176]	; (801225c <_parse_response+0x164>)
 80121aa:	601a      	str	r2, [r3, #0]
 80121ac:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 80121b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121b4:	f812 ef01 	ldrb.w	lr, [r2, #1]!
 80121b8:	f813 cf01 	ldrb.w	ip, [r3, #1]!
 80121bc:	45e6      	cmp	lr, ip
 80121be:	d0c7      	beq.n	8012150 <_parse_response+0x58>
 80121c0:	6833      	ldr	r3, [r6, #0]
 80121c2:	9a08      	ldr	r2, [sp, #32]
 80121c4:	1a9b      	subs	r3, r3, r2
 80121c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80121ca:	d3aa      	bcc.n	8012122 <_parse_response+0x2a>
 80121cc:	2800      	cmp	r0, #0
 80121ce:	d1c1      	bne.n	8012154 <_parse_response+0x5c>
 80121d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80121d4:	e7ea      	b.n	80121ac <_parse_response+0xb4>
 80121d6:	781a      	ldrb	r2, [r3, #0]
 80121d8:	2a35      	cmp	r2, #53	; 0x35
 80121da:	d011      	beq.n	8012200 <_parse_response+0x108>
 80121dc:	d808      	bhi.n	80121f0 <_parse_response+0xf8>
 80121de:	2a01      	cmp	r2, #1
 80121e0:	d011      	beq.n	8012206 <_parse_response+0x10e>
 80121e2:	2a03      	cmp	r2, #3
 80121e4:	d019      	beq.n	801221a <_parse_response+0x122>
 80121e6:	b14a      	cbz	r2, 80121fc <_parse_response+0x104>
 80121e8:	1c9a      	adds	r2, r3, #2
 80121ea:	785b      	ldrb	r3, [r3, #1]
 80121ec:	4413      	add	r3, r2
 80121ee:	e7b8      	b.n	8012162 <_parse_response+0x6a>
 80121f0:	2a36      	cmp	r2, #54	; 0x36
 80121f2:	d01f      	beq.n	8012234 <_parse_response+0x13c>
 80121f4:	2aff      	cmp	r2, #255	; 0xff
 80121f6:	d1f7      	bne.n	80121e8 <_parse_response+0xf0>
 80121f8:	462b      	mov	r3, r5
 80121fa:	e7b2      	b.n	8012162 <_parse_response+0x6a>
 80121fc:	3301      	adds	r3, #1
 80121fe:	e7b0      	b.n	8012162 <_parse_response+0x6a>
 8012200:	7898      	ldrb	r0, [r3, #2]
 8012202:	3303      	adds	r3, #3
 8012204:	e7ad      	b.n	8012162 <_parse_response+0x6a>
 8012206:	f893 b002 	ldrb.w	fp, [r3, #2]
 801220a:	f893 9003 	ldrb.w	r9, [r3, #3]
 801220e:	f893 a004 	ldrb.w	sl, [r3, #4]
 8012212:	795f      	ldrb	r7, [r3, #5]
 8012214:	4616      	mov	r6, r2
 8012216:	3306      	adds	r3, #6
 8012218:	e7a3      	b.n	8012162 <_parse_response+0x6a>
 801221a:	789a      	ldrb	r2, [r3, #2]
 801221c:	78dc      	ldrb	r4, [r3, #3]
 801221e:	9202      	str	r2, [sp, #8]
 8012220:	791a      	ldrb	r2, [r3, #4]
 8012222:	f04f 0c01 	mov.w	ip, #1
 8012226:	9203      	str	r2, [sp, #12]
 8012228:	795a      	ldrb	r2, [r3, #5]
 801222a:	9204      	str	r2, [sp, #16]
 801222c:	785a      	ldrb	r2, [r3, #1]
 801222e:	4413      	add	r3, r2
 8012230:	3302      	adds	r3, #2
 8012232:	e796      	b.n	8012162 <_parse_response+0x6a>
 8012234:	789a      	ldrb	r2, [r3, #2]
 8012236:	f893 8005 	ldrb.w	r8, [r3, #5]
 801223a:	9205      	str	r2, [sp, #20]
 801223c:	78da      	ldrb	r2, [r3, #3]
 801223e:	2101      	movs	r1, #1
 8012240:	9206      	str	r2, [sp, #24]
 8012242:	791a      	ldrb	r2, [r3, #4]
 8012244:	3306      	adds	r3, #6
 8012246:	9207      	str	r2, [sp, #28]
 8012248:	e78b      	b.n	8012162 <_parse_response+0x6a>
 801224a:	bf00      	nop
 801224c:	20009dd4 	ldrdcs	r9, [r0], -r4
 8012250:	20009b34 	andcs	r9, r0, r4, lsr fp
 8012254:	20009904 	andcs	r9, r0, r4, lsl #18
 8012258:	2000990c 	andcs	r9, r0, ip, lsl #18
 801225c:	20009908 	andcs	r9, r0, r8, lsl #18

08012260 <memcpy.isra.0>:
 8012260:	3801      	subs	r0, #1
 8012262:	440a      	add	r2, r1
 8012264:	4291      	cmp	r1, r2
 8012266:	d100      	bne.n	801226a <memcpy.isra.0+0xa>
 8012268:	4770      	bx	lr
 801226a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801226e:	f800 3f01 	strb.w	r3, [r0, #1]!
 8012272:	e7f7      	b.n	8012264 <memcpy.isra.0+0x4>

08012274 <dhcp_client>:
 8012274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012278:	b087      	sub	sp, #28
 801227a:	9203      	str	r2, [sp, #12]
 801227c:	4a77      	ldr	r2, [pc, #476]	; (801245c <dhcp_client+0x1e8>)
 801227e:	460f      	mov	r7, r1
 8012280:	4605      	mov	r5, r0
 8012282:	f44f 7309 	mov.w	r3, #548	; 0x224
 8012286:	4614      	mov	r4, r2
 8012288:	2100      	movs	r1, #0
 801228a:	3b01      	subs	r3, #1
 801228c:	f802 1b01 	strb.w	r1, [r2], #1
 8012290:	d1fb      	bne.n	801228a <dhcp_client+0x16>
 8012292:	f240 1301 	movw	r3, #257	; 0x101
 8012296:	2206      	movs	r2, #6
 8012298:	4629      	mov	r1, r5
 801229a:	4871      	ldr	r0, [pc, #452]	; (8012460 <dhcp_client+0x1ec>)
 801229c:	8023      	strh	r3, [r4, #0]
 801229e:	70a2      	strb	r2, [r4, #2]
 80122a0:	f7ff ffde 	bl	8012260 <memcpy.isra.0>
 80122a4:	4b6f      	ldr	r3, [pc, #444]	; (8012464 <dhcp_client+0x1f0>)
 80122a6:	2044      	movs	r0, #68	; 0x44
 80122a8:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 80122ac:	f240 1335 	movw	r3, #309	; 0x135
 80122b0:	f8a4 30f0 	strh.w	r3, [r4, #240]	; 0xf0
 80122b4:	f7fe fc8a 	bl	8010bcc <udp_bind>
 80122b8:	1e06      	subs	r6, r0, #0
 80122ba:	f2c0 80c9 	blt.w	8012450 <dhcp_client+0x1dc>
 80122be:	f04f 0915 	mov.w	r9, #21
 80122c2:	f8df a198 	ldr.w	sl, [pc, #408]	; 801245c <dhcp_client+0x1e8>
 80122c6:	f1b9 0901 	subs.w	r9, r9, #1
 80122ca:	d11f      	bne.n	801230c <dhcp_client+0x98>
 80122cc:	464c      	mov	r4, r9
 80122ce:	2044      	movs	r0, #68	; 0x44
 80122d0:	f7fe fc96 	bl	8010c00 <udp_unbind>
 80122d4:	2c00      	cmp	r4, #0
 80122d6:	f000 80be 	beq.w	8012456 <dhcp_client+0x1e2>
 80122da:	2204      	movs	r2, #4
 80122dc:	4962      	ldr	r1, [pc, #392]	; (8012468 <dhcp_client+0x1f4>)
 80122de:	a805      	add	r0, sp, #20
 80122e0:	f7ff ffbe 	bl	8012260 <memcpy.isra.0>
 80122e4:	9b05      	ldr	r3, [sp, #20]
 80122e6:	2204      	movs	r2, #4
 80122e8:	4960      	ldr	r1, [pc, #384]	; (801246c <dhcp_client+0x1f8>)
 80122ea:	603b      	str	r3, [r7, #0]
 80122ec:	a805      	add	r0, sp, #20
 80122ee:	f7ff ffb7 	bl	8012260 <memcpy.isra.0>
 80122f2:	9b05      	ldr	r3, [sp, #20]
 80122f4:	a805      	add	r0, sp, #20
 80122f6:	60bb      	str	r3, [r7, #8]
 80122f8:	2204      	movs	r2, #4
 80122fa:	495d      	ldr	r1, [pc, #372]	; (8012470 <dhcp_client+0x1fc>)
 80122fc:	f7ff ffb0 	bl	8012260 <memcpy.isra.0>
 8012300:	2000      	movs	r0, #0
 8012302:	9b05      	ldr	r3, [sp, #20]
 8012304:	607b      	str	r3, [r7, #4]
 8012306:	b007      	add	sp, #28
 8012308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801230c:	f643 5301 	movw	r3, #15617	; 0x3d01
 8012310:	f240 1807 	movw	r8, #263	; 0x107
 8012314:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 8012318:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 801231c:	782b      	ldrb	r3, [r5, #0]
 801231e:	4a55      	ldr	r2, [pc, #340]	; (8012474 <dhcp_client+0x200>)
 8012320:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 8012324:	786b      	ldrb	r3, [r5, #1]
 8012326:	fa5f fb86 	uxtb.w	fp, r6
 801232a:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 801232e:	78ab      	ldrb	r3, [r5, #2]
 8012330:	4651      	mov	r1, sl
 8012332:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 8012336:	78eb      	ldrb	r3, [r5, #3]
 8012338:	4658      	mov	r0, fp
 801233a:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 801233e:	792b      	ldrb	r3, [r5, #4]
 8012340:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 8012344:	796b      	ldrb	r3, [r5, #5]
 8012346:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 801234a:	4b4b      	ldr	r3, [pc, #300]	; (8012478 <dhcp_client+0x204>)
 801234c:	e9c4 233f 	strd	r2, r3, [r4, #252]	; 0xfc
 8012350:	23ff      	movs	r3, #255	; 0xff
 8012352:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8012356:	2343      	movs	r3, #67	; 0x43
 8012358:	f240 1205 	movw	r2, #261	; 0x105
 801235c:	9300      	str	r3, [sp, #0]
 801235e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012362:	f7fe fcc9 	bl	8010cf8 <udp_send>
 8012366:	4629      	mov	r1, r5
 8012368:	4630      	mov	r0, r6
 801236a:	f7ff fec5 	bl	80120f8 <_parse_response>
 801236e:	2802      	cmp	r0, #2
 8012370:	d1a9      	bne.n	80122c6 <dhcp_client+0x52>
 8012372:	f643 5303 	movw	r3, #15619	; 0x3d03
 8012376:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 801237a:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 801237e:	782b      	ldrb	r3, [r5, #0]
 8012380:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 801247c <dhcp_client+0x208>
 8012384:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 8012388:	786b      	ldrb	r3, [r5, #1]
 801238a:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 801238e:	78ab      	ldrb	r3, [r5, #2]
 8012390:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 8012394:	78eb      	ldrb	r3, [r5, #3]
 8012396:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 801239a:	792b      	ldrb	r3, [r5, #4]
 801239c:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 80123a0:	796b      	ldrb	r3, [r5, #5]
 80123a2:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 80123a6:	f240 4332 	movw	r3, #1074	; 0x432
 80123aa:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
 80123ae:	4b2e      	ldr	r3, [pc, #184]	; (8012468 <dhcp_client+0x1f4>)
 80123b0:	881a      	ldrh	r2, [r3, #0]
 80123b2:	885b      	ldrh	r3, [r3, #2]
 80123b4:	f8a4 20fe 	strh.w	r2, [r4, #254]	; 0xfe
 80123b8:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 80123bc:	f240 4336 	movw	r3, #1078	; 0x436
 80123c0:	f8a4 3102 	strh.w	r3, [r4, #258]	; 0x102
 80123c4:	4b2e      	ldr	r3, [pc, #184]	; (8012480 <dhcp_client+0x20c>)
 80123c6:	221e      	movs	r2, #30
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 80123ce:	230c      	movs	r3, #12
 80123d0:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
 80123d4:	9b03      	ldr	r3, [sp, #12]
 80123d6:	1e58      	subs	r0, r3, #1
 80123d8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80123dc:	f1a2 0e1e 	sub.w	lr, r2, #30
 80123e0:	1c51      	adds	r1, r2, #1
 80123e2:	bb8b      	cbnz	r3, 8012448 <dhcp_client+0x1d4>
 80123e4:	2037      	movs	r0, #55	; 0x37
 80123e6:	18a3      	adds	r3, r4, r2
 80123e8:	f883 00ec 	strb.w	r0, [r3, #236]	; 0xec
 80123ec:	2006      	movs	r0, #6
 80123ee:	4421      	add	r1, r4
 80123f0:	f881 00ec 	strb.w	r0, [r1, #236]	; 0xec
 80123f4:	2103      	movs	r1, #3
 80123f6:	f883 10ef 	strb.w	r1, [r3, #239]	; 0xef
 80123fa:	210f      	movs	r1, #15
 80123fc:	f883 10f1 	strb.w	r1, [r3, #241]	; 0xf1
 8012400:	213a      	movs	r1, #58	; 0x3a
 8012402:	f883 10f2 	strb.w	r1, [r3, #242]	; 0xf2
 8012406:	213b      	movs	r1, #59	; 0x3b
 8012408:	f04f 0801 	mov.w	r8, #1
 801240c:	f883 10f3 	strb.w	r1, [r3, #243]	; 0xf3
 8012410:	21ff      	movs	r1, #255	; 0xff
 8012412:	f883 00f0 	strb.w	r0, [r3, #240]	; 0xf0
 8012416:	f883 10f4 	strb.w	r1, [r3, #244]	; 0xf4
 801241a:	f883 80ee 	strb.w	r8, [r3, #238]	; 0xee
 801241e:	2343      	movs	r3, #67	; 0x43
 8012420:	32f5      	adds	r2, #245	; 0xf5
 8012422:	f884 e109 	strb.w	lr, [r4, #265]	; 0x109
 8012426:	4651      	mov	r1, sl
 8012428:	9300      	str	r3, [sp, #0]
 801242a:	b292      	uxth	r2, r2
 801242c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012430:	4658      	mov	r0, fp
 8012432:	f7fe fc61 	bl	8010cf8 <udp_send>
 8012436:	4629      	mov	r1, r5
 8012438:	4630      	mov	r0, r6
 801243a:	f7ff fe5d 	bl	80120f8 <_parse_response>
 801243e:	2805      	cmp	r0, #5
 8012440:	f47f af41 	bne.w	80122c6 <dhcp_client+0x52>
 8012444:	4644      	mov	r4, r8
 8012446:	e742      	b.n	80122ce <dhcp_client+0x5a>
 8012448:	460a      	mov	r2, r1
 801244a:	f80c 3f01 	strb.w	r3, [ip, #1]!
 801244e:	e7c3      	b.n	80123d8 <dhcp_client+0x164>
 8012450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012454:	e757      	b.n	8012306 <dhcp_client+0x92>
 8012456:	f06f 0001 	mvn.w	r0, #1
 801245a:	e754      	b.n	8012306 <dhcp_client+0x92>
 801245c:	20009910 	andcs	r9, r0, r0, lsl r9
 8012460:	2000992c 	andcs	r9, r0, ip, lsr #18
 8012464:	63538263 	cmpvs	r3, #805306374	; 0x30000006
 8012468:	20009908 	andcs	r9, r0, r8, lsl #18
 801246c:	20009904 	andcs	r9, r0, r4, lsl #18
 8012470:	2000990c 	andcs	r9, r0, ip, lsl #18
 8012474:	03010637 	movweq	r0, #5687	; 0x1637
 8012478:	3b3a0f06 	blcc	8e96098 <__exidx_end+0xe7dd80>
 801247c:	20009a19 	andcs	r9, r0, r9, lsl sl
 8012480:	20009b34 	andcs	r9, r0, r4, lsr fp

08012484 <dhcp_client_release>:
 8012484:	b507      	push	{r0, r1, r2, lr}
 8012486:	2044      	movs	r0, #68	; 0x44
 8012488:	f7fe fba0 	bl	8010bcc <udp_bind>
 801248c:	f243 6307 	movw	r3, #13831	; 0x3607
 8012490:	4911      	ldr	r1, [pc, #68]	; (80124d8 <dhcp_client_release+0x54>)
 8012492:	b2c0      	uxtb	r0, r0
 8012494:	f8a1 30f2 	strh.w	r3, [r1, #242]	; 0xf2
 8012498:	2304      	movs	r3, #4
 801249a:	f881 30f4 	strb.w	r3, [r1, #244]	; 0xf4
 801249e:	4b0f      	ldr	r3, [pc, #60]	; (80124dc <dhcp_client_release+0x58>)
 80124a0:	781a      	ldrb	r2, [r3, #0]
 80124a2:	f881 20f5 	strb.w	r2, [r1, #245]	; 0xf5
 80124a6:	785a      	ldrb	r2, [r3, #1]
 80124a8:	f881 20f6 	strb.w	r2, [r1, #246]	; 0xf6
 80124ac:	789a      	ldrb	r2, [r3, #2]
 80124ae:	78db      	ldrb	r3, [r3, #3]
 80124b0:	f881 20f7 	strb.w	r2, [r1, #247]	; 0xf7
 80124b4:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
 80124b8:	23ff      	movs	r3, #255	; 0xff
 80124ba:	f881 30f9 	strb.w	r3, [r1, #249]	; 0xf9
 80124be:	2343      	movs	r3, #67	; 0x43
 80124c0:	22fa      	movs	r2, #250	; 0xfa
 80124c2:	9300      	str	r3, [sp, #0]
 80124c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80124c8:	f7fe fc16 	bl	8010cf8 <udp_send>
 80124cc:	2044      	movs	r0, #68	; 0x44
 80124ce:	b003      	add	sp, #12
 80124d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80124d4:	f7fe bb94 	b.w	8010c00 <udp_unbind>
 80124d8:	20009910 	andcs	r9, r0, r0, lsl r9
 80124dc:	20009b34 	andcs	r9, r0, r4, lsr fp

080124e0 <memcpy.isra.0>:
 80124e0:	3801      	subs	r0, #1
 80124e2:	440a      	add	r2, r1
 80124e4:	4291      	cmp	r1, r2
 80124e6:	d100      	bne.n	80124ea <memcpy.isra.0+0xa>
 80124e8:	4770      	bx	lr
 80124ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80124ee:	f800 3f01 	strb.w	r3, [r0, #1]!
 80124f2:	e7f7      	b.n	80124e4 <memcpy.isra.0+0x4>

080124f4 <_send_report>:
 80124f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80124f6:	491c      	ldr	r1, [pc, #112]	; (8012568 <_send_report+0x74>)
 80124f8:	4c1c      	ldr	r4, [pc, #112]	; (801256c <_send_report+0x78>)
 80124fa:	f3c0 2306 	ubfx	r3, r0, #8, #7
 80124fe:	9001      	str	r0, [sp, #4]
 8012500:	70cb      	strb	r3, [r1, #3]
 8012502:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8012506:	f3c0 6007 	ubfx	r0, r0, #24, #8
 801250a:	710b      	strb	r3, [r1, #4]
 801250c:	7148      	strb	r0, [r1, #5]
 801250e:	2206      	movs	r2, #6
 8012510:	4620      	mov	r0, r4
 8012512:	f7ff ffe5 	bl	80124e0 <memcpy.isra.0>
 8012516:	2204      	movs	r2, #4
 8012518:	2700      	movs	r7, #0
 801251a:	4d15      	ldr	r5, [pc, #84]	; (8012570 <_send_report+0x7c>)
 801251c:	eb0d 0102 	add.w	r1, sp, r2
 8012520:	882b      	ldrh	r3, [r5, #0]
 8012522:	f104 001e 	add.w	r0, r4, #30
 8012526:	f104 060e 	add.w	r6, r4, #14
 801252a:	8263      	strh	r3, [r4, #18]
 801252c:	f7ff ffd8 	bl	80124e0 <memcpy.isra.0>
 8012530:	2118      	movs	r1, #24
 8012532:	4630      	mov	r0, r6
 8012534:	8327      	strh	r7, [r4, #24]
 8012536:	f000 f8c6 	bl	80126c6 <net_chksum>
 801253a:	2204      	movs	r2, #4
 801253c:	8320      	strh	r0, [r4, #24]
 801253e:	eb0d 0102 	add.w	r1, sp, r2
 8012542:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 8012546:	f7ff ffcb 	bl	80124e0 <memcpy.isra.0>
 801254a:	2120      	movs	r1, #32
 801254c:	4630      	mov	r0, r6
 801254e:	8527      	strh	r7, [r4, #40]	; 0x28
 8012550:	f000 f8b9 	bl	80126c6 <net_chksum>
 8012554:	212e      	movs	r1, #46	; 0x2e
 8012556:	8520      	strh	r0, [r4, #40]	; 0x28
 8012558:	4620      	mov	r0, r4
 801255a:	f002 faef 	bl	8014b3c <emac_eth_send>
 801255e:	882b      	ldrh	r3, [r5, #0]
 8012560:	3301      	adds	r3, #1
 8012562:	802b      	strh	r3, [r5, #0]
 8012564:	b003      	add	sp, #12
 8012566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012568:	20009c90 	mulcs	r0, r0, ip
 801256c:	20009c98 	mulcs	r0, r8, ip
 8012570:	20009c58 	andcs	r9, r0, r8, asr ip

08012574 <igmp_set_ip>:
 8012574:	b507      	push	{r0, r1, r2, lr}
 8012576:	2204      	movs	r2, #4
 8012578:	6803      	ldr	r3, [r0, #0]
 801257a:	eb0d 0102 	add.w	r1, sp, r2
 801257e:	4806      	ldr	r0, [pc, #24]	; (8012598 <igmp_set_ip+0x24>)
 8012580:	9301      	str	r3, [sp, #4]
 8012582:	f7ff ffad 	bl	80124e0 <memcpy.isra.0>
 8012586:	2204      	movs	r2, #4
 8012588:	4804      	ldr	r0, [pc, #16]	; (801259c <igmp_set_ip+0x28>)
 801258a:	eb0d 0102 	add.w	r1, sp, r2
 801258e:	f7ff ffa7 	bl	80124e0 <memcpy.isra.0>
 8012592:	b003      	add	sp, #12
 8012594:	f85d fb04 	ldr.w	pc, [sp], #4
 8012598:	20009cb2 			; <UNDEFINED> instruction: 0x20009cb2
 801259c:	20009c7a 	andcs	r9, r0, sl, ror ip

080125a0 <igmp_timer>:
 80125a0:	b570      	push	{r4, r5, r6, lr}
 80125a2:	2500      	movs	r5, #0
 80125a4:	2602      	movs	r6, #2
 80125a6:	4c0a      	ldr	r4, [pc, #40]	; (80125d0 <igmp_timer+0x30>)
 80125a8:	7963      	ldrb	r3, [r4, #5]
 80125aa:	2b01      	cmp	r3, #1
 80125ac:	d109      	bne.n	80125c2 <igmp_timer+0x22>
 80125ae:	7923      	ldrb	r3, [r4, #4]
 80125b0:	b13b      	cbz	r3, 80125c2 <igmp_timer+0x22>
 80125b2:	3b01      	subs	r3, #1
 80125b4:	b2db      	uxtb	r3, r3
 80125b6:	7123      	strb	r3, [r4, #4]
 80125b8:	b91b      	cbnz	r3, 80125c2 <igmp_timer+0x22>
 80125ba:	6820      	ldr	r0, [r4, #0]
 80125bc:	f7ff ff9a 	bl	80124f4 <_send_report>
 80125c0:	7166      	strb	r6, [r4, #5]
 80125c2:	3501      	adds	r5, #1
 80125c4:	2d24      	cmp	r5, #36	; 0x24
 80125c6:	f104 0408 	add.w	r4, r4, #8
 80125ca:	d1ed      	bne.n	80125a8 <igmp_timer+0x8>
 80125cc:	bd70      	pop	{r4, r5, r6, pc}
 80125ce:	bf00      	nop
 80125d0:	20009b38 	andcs	r9, r0, r8, lsr fp

080125d4 <igmp_join>:
 80125d4:	b538      	push	{r3, r4, r5, lr}
 80125d6:	f000 03e0 	and.w	r3, r0, #224	; 0xe0
 80125da:	2be0      	cmp	r3, #224	; 0xe0
 80125dc:	d11b      	bne.n	8012616 <igmp_join+0x42>
 80125de:	4911      	ldr	r1, [pc, #68]	; (8012624 <igmp_join+0x50>)
 80125e0:	680c      	ldr	r4, [r1, #0]
 80125e2:	2c24      	cmp	r4, #36	; 0x24
 80125e4:	d01a      	beq.n	801261c <igmp_join+0x48>
 80125e6:	2300      	movs	r3, #0
 80125e8:	4a0f      	ldr	r2, [pc, #60]	; (8012628 <igmp_join+0x54>)
 80125ea:	429c      	cmp	r4, r3
 80125ec:	dc0d      	bgt.n	801260a <igmp_join+0x36>
 80125ee:	f44f 7381 	mov.w	r3, #258	; 0x102
 80125f2:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
 80125f6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80125fa:	8093      	strh	r3, [r2, #4]
 80125fc:	1c63      	adds	r3, r4, #1
 80125fe:	600b      	str	r3, [r1, #0]
 8012600:	f7ff ff78 	bl	80124f4 <_send_report>
 8012604:	4623      	mov	r3, r4
 8012606:	4618      	mov	r0, r3
 8012608:	bd38      	pop	{r3, r4, r5, pc}
 801260a:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 801260e:	4285      	cmp	r5, r0
 8012610:	d0f9      	beq.n	8012606 <igmp_join+0x32>
 8012612:	3301      	adds	r3, #1
 8012614:	e7e9      	b.n	80125ea <igmp_join+0x16>
 8012616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801261a:	e7f4      	b.n	8012606 <igmp_join+0x32>
 801261c:	f06f 0301 	mvn.w	r3, #1
 8012620:	e7f1      	b.n	8012606 <igmp_join+0x32>
 8012622:	bf00      	nop
 8012624:	20009c5c 	andcs	r9, r0, ip, asr ip
 8012628:	20009b38 	andcs	r9, r0, r8, lsr fp

0801262c <igmp_leave>:
 801262c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012630:	2600      	movs	r6, #0
 8012632:	4f1c      	ldr	r7, [pc, #112]	; (80126a4 <igmp_leave+0x78>)
 8012634:	f857 3036 	ldr.w	r3, [r7, r6, lsl #3]
 8012638:	4283      	cmp	r3, r0
 801263a:	d007      	beq.n	801264c <igmp_leave+0x20>
 801263c:	3601      	adds	r6, #1
 801263e:	2e24      	cmp	r6, #36	; 0x24
 8012640:	d1f8      	bne.n	8012634 <igmp_leave+0x8>
 8012642:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012646:	b002      	add	sp, #8
 8012648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801264c:	2400      	movs	r4, #0
 801264e:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80126a8 <igmp_leave+0x7c>
 8012652:	4d16      	ldr	r5, [pc, #88]	; (80126ac <igmp_leave+0x80>)
 8012654:	f8b8 3000 	ldrh.w	r3, [r8]
 8012658:	2118      	movs	r1, #24
 801265a:	9001      	str	r0, [sp, #4]
 801265c:	4814      	ldr	r0, [pc, #80]	; (80126b0 <igmp_leave+0x84>)
 801265e:	826b      	strh	r3, [r5, #18]
 8012660:	832c      	strh	r4, [r5, #24]
 8012662:	f000 f830 	bl	80126c6 <net_chksum>
 8012666:	2204      	movs	r2, #4
 8012668:	8328      	strh	r0, [r5, #24]
 801266a:	eb0d 0102 	add.w	r1, sp, r2
 801266e:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 8012672:	f7ff ff35 	bl	80124e0 <memcpy.isra.0>
 8012676:	2120      	movs	r1, #32
 8012678:	f105 000e 	add.w	r0, r5, #14
 801267c:	852c      	strh	r4, [r5, #40]	; 0x28
 801267e:	f000 f822 	bl	80126c6 <net_chksum>
 8012682:	212e      	movs	r1, #46	; 0x2e
 8012684:	8528      	strh	r0, [r5, #40]	; 0x28
 8012686:	4628      	mov	r0, r5
 8012688:	f002 fa58 	bl	8014b3c <emac_eth_send>
 801268c:	f8b8 3000 	ldrh.w	r3, [r8]
 8012690:	f847 4036 	str.w	r4, [r7, r6, lsl #3]
 8012694:	3301      	adds	r3, #1
 8012696:	eb07 07c6 	add.w	r7, r7, r6, lsl #3
 801269a:	4620      	mov	r0, r4
 801269c:	f8a8 3000 	strh.w	r3, [r8]
 80126a0:	80bc      	strh	r4, [r7, #4]
 80126a2:	e7d0      	b.n	8012646 <igmp_leave+0x1a>
 80126a4:	20009b38 	andcs	r9, r0, r8, lsr fp
 80126a8:	20009c58 	andcs	r9, r0, r8, asr ip
 80126ac:	20009c60 	andcs	r9, r0, r0, ror #24
 80126b0:	20009ca6 	andcs	r9, r0, r6, lsr #25

080126b4 <ip_set_ip>:
 80126b4:	b510      	push	{r4, lr}
 80126b6:	4604      	mov	r4, r0
 80126b8:	f7fe fa68 	bl	8010b8c <udp_set_ip>
 80126bc:	4620      	mov	r0, r4
 80126be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126c2:	f7ff bf57 	b.w	8012574 <igmp_set_ip>

080126c6 <net_chksum>:
 80126c6:	2300      	movs	r3, #0
 80126c8:	f021 0201 	bic.w	r2, r1, #1
 80126cc:	b530      	push	{r4, r5, lr}
 80126ce:	1884      	adds	r4, r0, r2
 80126d0:	42a0      	cmp	r0, r4
 80126d2:	d10b      	bne.n	80126ec <net_chksum+0x26>
 80126d4:	4291      	cmp	r1, r2
 80126d6:	d004      	beq.n	80126e2 <net_chksum+0x1c>
 80126d8:	7802      	ldrb	r2, [r0, #0]
 80126da:	0212      	lsls	r2, r2, #8
 80126dc:	ba52      	rev16	r2, r2
 80126de:	b292      	uxth	r2, r2
 80126e0:	4413      	add	r3, r2
 80126e2:	0c1a      	lsrs	r2, r3, #16
 80126e4:	d106      	bne.n	80126f4 <net_chksum+0x2e>
 80126e6:	43d8      	mvns	r0, r3
 80126e8:	b280      	uxth	r0, r0
 80126ea:	bd30      	pop	{r4, r5, pc}
 80126ec:	f830 5b02 	ldrh.w	r5, [r0], #2
 80126f0:	442b      	add	r3, r5
 80126f2:	e7ed      	b.n	80126d0 <net_chksum+0xa>
 80126f4:	b29b      	uxth	r3, r3
 80126f6:	e7f3      	b.n	80126e0 <net_chksum+0x1a>

080126f8 <memcpy.isra.0>:
 80126f8:	3801      	subs	r0, #1
 80126fa:	440a      	add	r2, r1
 80126fc:	4291      	cmp	r1, r2
 80126fe:	d100      	bne.n	8012702 <memcpy.isra.0+0xa>
 8012700:	4770      	bx	lr
 8012702:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012706:	f800 3f01 	strb.w	r3, [r0, #1]!
 801270a:	e7f7      	b.n	80126fc <memcpy.isra.0+0x4>

0801270c <Display::Write(unsigned char, char const*) [clone .isra.0]>:
 801270c:	b430      	push	{r4, r5}
 801270e:	b168      	cbz	r0, 801272c <Display::Write(unsigned char, char const*) [clone .isra.0]+0x20>
 8012710:	2300      	movs	r3, #0
 8012712:	7905      	ldrb	r5, [r0, #4]
 8012714:	5cd4      	ldrb	r4, [r2, r3]
 8012716:	b11c      	cbz	r4, 8012720 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x14>
 8012718:	1c5c      	adds	r4, r3, #1
 801271a:	429d      	cmp	r5, r3
 801271c:	4623      	mov	r3, r4
 801271e:	dcf9      	bgt.n	8012714 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x8>
 8012720:	6804      	ldr	r4, [r0, #0]
 8012722:	b2db      	uxtb	r3, r3
 8012724:	69e4      	ldr	r4, [r4, #28]
 8012726:	46a4      	mov	ip, r4
 8012728:	bc30      	pop	{r4, r5}
 801272a:	4760      	bx	ip
 801272c:	bc30      	pop	{r4, r5}
 801272e:	4770      	bx	lr

08012730 <Display::ClearLine(unsigned char) [clone .isra.0]>:
 8012730:	b110      	cbz	r0, 8012738 <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 8012732:	6803      	ldr	r3, [r0, #0]
 8012734:	691b      	ldr	r3, [r3, #16]
 8012736:	4718      	bx	r3
 8012738:	4770      	bx	lr
	...

0801273c <DisplayUdf::DisplayUdf()>:
 801273c:	b510      	push	{r4, lr}
 801273e:	4604      	mov	r4, r0
 8012740:	f000 ff7e 	bl	8013640 <Display::Display()>
 8012744:	2202      	movs	r2, #2
 8012746:	2300      	movs	r3, #0
 8012748:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
 801274c:	4b05      	ldr	r3, [pc, #20]	; (8012764 <DisplayUdf::DisplayUdf()+0x28>)
 801274e:	f104 023b 	add.w	r2, r4, #59	; 0x3b
 8012752:	601c      	str	r4, [r3, #0]
 8012754:	2301      	movs	r3, #1
 8012756:	f802 3f01 	strb.w	r3, [r2, #1]!
 801275a:	3301      	adds	r3, #1
 801275c:	2b15      	cmp	r3, #21
 801275e:	d1fa      	bne.n	8012756 <DisplayUdf::DisplayUdf()+0x1a>
 8012760:	4620      	mov	r0, r4
 8012762:	bd10      	pop	{r4, pc}
 8012764:	20009cc8 	andcs	r9, r0, r8, asr #25

08012768 <DisplayUdf::SetTitle(char const*, ...)>:
 8012768:	b40e      	push	{r1, r2, r3}
 801276a:	b517      	push	{r0, r1, r2, r4, lr}
 801276c:	ab05      	add	r3, sp, #20
 801276e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012772:	4604      	mov	r4, r0
 8012774:	211f      	movs	r1, #31
 8012776:	301c      	adds	r0, #28
 8012778:	9301      	str	r3, [sp, #4]
 801277a:	f7f6 fc97 	bl	80090ac <vsnprintf>
 801277e:	2300      	movs	r3, #0
 8012780:	4404      	add	r4, r0
 8012782:	7723      	strb	r3, [r4, #28]
 8012784:	b003      	add	sp, #12
 8012786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801278a:	b003      	add	sp, #12
 801278c:	4770      	bx	lr

0801278e <DisplayUdf::Set(unsigned char, displayudf::Labels)>:
 801278e:	1e4b      	subs	r3, r1, #1
 8012790:	2b05      	cmp	r3, #5
 8012792:	b530      	push	{r4, r5, lr}
 8012794:	d80f      	bhi.n	80127b6 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x28>
 8012796:	2300      	movs	r3, #0
 8012798:	f100 043b 	add.w	r4, r0, #59	; 0x3b
 801279c:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80127a0:	428d      	cmp	r5, r1
 80127a2:	d109      	bne.n	80127b8 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x2a>
 80127a4:	1884      	adds	r4, r0, r2
 80127a6:	f894 403c 	ldrb.w	r4, [r4, #60]	; 0x3c
 80127aa:	4403      	add	r3, r0
 80127ac:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
 80127b0:	4410      	add	r0, r2
 80127b2:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
 80127b6:	bd30      	pop	{r4, r5, pc}
 80127b8:	3301      	adds	r3, #1
 80127ba:	2b14      	cmp	r3, #20
 80127bc:	d1ee      	bne.n	801279c <DisplayUdf::Set(unsigned char, displayudf::Labels)+0xe>
 80127be:	e7f7      	b.n	80127b0 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x22>

080127c0 <DisplayUdf::ShowEmacStart()>:
 80127c0:	b510      	push	{r4, lr}
 80127c2:	4604      	mov	r4, r0
 80127c4:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 80127c8:	6980      	ldr	r0, [r0, #24]
 80127ca:	f7ff ffb1 	bl	8012730 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80127ce:	4620      	mov	r0, r4
 80127d0:	4a02      	ldr	r2, [pc, #8]	; (80127dc <DisplayUdf::ShowEmacStart()+0x1c>)
 80127d2:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 80127d6:	f7f5 fdd5 	bl	8008384 <Display::Printf(unsigned char, char const*, ...)>
 80127da:	bd10      	pop	{r4, pc}
 80127dc:	08017b69 	stmdaeq	r1, {r0, r3, r5, r6, r8, r9, fp, ip, sp, lr}

080127e0 <DisplayUdf::ShowIpAddress()>:
 80127e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127e4:	4604      	mov	r4, r0
 80127e6:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 80127ea:	b086      	sub	sp, #24
 80127ec:	6980      	ldr	r0, [r0, #24]
 80127ee:	f7ff ff9f 	bl	8012730 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80127f2:	4b13      	ldr	r3, [pc, #76]	; (8012840 <DisplayUdf::ShowIpAddress()+0x60>)
 80127f4:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
 80127f8:	681d      	ldr	r5, [r3, #0]
 80127fa:	69e8      	ldr	r0, [r5, #28]
 80127fc:	696e      	ldr	r6, [r5, #20]
 80127fe:	f003 fc2b 	bl	8016058 <__popcountsi2>
 8012802:	79eb      	ldrb	r3, [r5, #7]
 8012804:	fa5f f886 	uxtb.w	r8, r6
 8012808:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801280c:	f3c6 4a07 	ubfx	sl, r6, #16, #8
 8012810:	0e36      	lsrs	r6, r6, #24
 8012812:	b99b      	cbnz	r3, 801283c <DisplayUdf::ShowIpAddress()+0x5c>
 8012814:	796b      	ldrb	r3, [r5, #5]
 8012816:	2b00      	cmp	r3, #0
 8012818:	bf14      	ite	ne
 801281a:	2244      	movne	r2, #68	; 0x44
 801281c:	2253      	moveq	r2, #83	; 0x53
 801281e:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8012822:	4643      	mov	r3, r8
 8012824:	4639      	mov	r1, r7
 8012826:	4620      	mov	r0, r4
 8012828:	e9cd a601 	strd	sl, r6, [sp, #4]
 801282c:	4a05      	ldr	r2, [pc, #20]	; (8012844 <DisplayUdf::ShowIpAddress()+0x64>)
 801282e:	f8cd 9000 	str.w	r9, [sp]
 8012832:	f7f5 fda7 	bl	8008384 <Display::Printf(unsigned char, char const*, ...)>
 8012836:	b006      	add	sp, #24
 8012838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801283c:	225a      	movs	r2, #90	; 0x5a
 801283e:	e7ee      	b.n	801281e <DisplayUdf::ShowIpAddress()+0x3e>
 8012840:	200096f8 	strdcs	r9, [r0], -r8
 8012844:	08017b78 	stmdaeq	r1, {r3, r4, r5, r6, r8, r9, fp, ip, sp, lr}

08012848 <DisplayUdf::ShowNetmask()>:
 8012848:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801284a:	4604      	mov	r4, r0
 801284c:	4b0b      	ldr	r3, [pc, #44]	; (801287c <DisplayUdf::ShowNetmask()+0x34>)
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	69db      	ldr	r3, [r3, #28]
 8012852:	0e1a      	lsrs	r2, r3, #24
 8012854:	9202      	str	r2, [sp, #8]
 8012856:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801285a:	9201      	str	r2, [sp, #4]
 801285c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012860:	9200      	str	r2, [sp, #0]
 8012862:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 8012866:	4a06      	ldr	r2, [pc, #24]	; (8012880 <DisplayUdf::ShowNetmask()+0x38>)
 8012868:	b2db      	uxtb	r3, r3
 801286a:	f7f5 fd8b 	bl	8008384 <Display::Printf(unsigned char, char const*, ...)>
 801286e:	4620      	mov	r0, r4
 8012870:	b004      	add	sp, #16
 8012872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012876:	f7ff bfb3 	b.w	80127e0 <DisplayUdf::ShowIpAddress()>
 801287a:	bf00      	nop
 801287c:	200096f8 	strdcs	r9, [r0], -r8
 8012880:	08017b8a 	stmdaeq	r1, {r1, r3, r7, r8, r9, fp, ip, sp, lr}

08012884 <DisplayUdf::ShowGatewayIp()>:
 8012884:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012886:	4604      	mov	r4, r0
 8012888:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 801288c:	6980      	ldr	r0, [r0, #24]
 801288e:	f7ff ff4f 	bl	8012730 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8012892:	4b0a      	ldr	r3, [pc, #40]	; (80128bc <DisplayUdf::ShowGatewayIp()+0x38>)
 8012894:	4620      	mov	r0, r4
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	f894 104e 	ldrb.w	r1, [r4, #78]	; 0x4e
 801289c:	699b      	ldr	r3, [r3, #24]
 801289e:	0e1a      	lsrs	r2, r3, #24
 80128a0:	9202      	str	r2, [sp, #8]
 80128a2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80128a6:	9201      	str	r2, [sp, #4]
 80128a8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80128ac:	9200      	str	r2, [sp, #0]
 80128ae:	b2db      	uxtb	r3, r3
 80128b0:	4a03      	ldr	r2, [pc, #12]	; (80128c0 <DisplayUdf::ShowGatewayIp()+0x3c>)
 80128b2:	f7f5 fd67 	bl	8008384 <Display::Printf(unsigned char, char const*, ...)>
 80128b6:	b004      	add	sp, #16
 80128b8:	bd10      	pop	{r4, pc}
 80128ba:	bf00      	nop
 80128bc:	200096f8 	strdcs	r9, [r0], -r8
 80128c0:	08017b99 	stmdaeq	r1, {r0, r3, r4, r7, r8, r9, fp, ip, sp, lr}

080128c4 <DisplayUdf::ShowHostName()>:
 80128c4:	b510      	push	{r4, lr}
 80128c6:	4604      	mov	r4, r0
 80128c8:	f890 1043 	ldrb.w	r1, [r0, #67]	; 0x43
 80128cc:	6980      	ldr	r0, [r0, #24]
 80128ce:	f7ff ff2f 	bl	8012730 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80128d2:	4b05      	ldr	r3, [pc, #20]	; (80128e8 <DisplayUdf::ShowHostName()+0x24>)
 80128d4:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 80128d8:	681a      	ldr	r2, [r3, #0]
 80128da:	69a0      	ldr	r0, [r4, #24]
 80128dc:	3220      	adds	r2, #32
 80128de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128e2:	f7ff bf13 	b.w	801270c <Display::Write(unsigned char, char const*) [clone .isra.0]>
 80128e6:	bf00      	nop
 80128e8:	200096f8 	strdcs	r9, [r0], -r8

080128ec <DisplayUdf::Show()>:
 80128ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80128ee:	4604      	mov	r4, r0
 80128f0:	21ff      	movs	r1, #255	; 0xff
 80128f2:	f100 033b 	add.w	r3, r0, #59	; 0x3b
 80128f6:	f100 024f 	add.w	r2, r0, #79	; 0x4f
 80128fa:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80128fe:	2806      	cmp	r0, #6
 8012900:	bf88      	it	hi
 8012902:	7019      	strbhi	r1, [r3, #0]
 8012904:	429a      	cmp	r2, r3
 8012906:	d1f8      	bne.n	80128fa <DisplayUdf::Show()+0xe>
 8012908:	2501      	movs	r5, #1
 801290a:	4629      	mov	r1, r5
 801290c:	3501      	adds	r5, #1
 801290e:	69a0      	ldr	r0, [r4, #24]
 8012910:	b2ed      	uxtb	r5, r5
 8012912:	f7ff ff0d 	bl	8012730 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8012916:	2d06      	cmp	r5, #6
 8012918:	d1f7      	bne.n	801290a <DisplayUdf::Show()+0x1e>
 801291a:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 801291e:	69a0      	ldr	r0, [r4, #24]
 8012920:	f104 021c 	add.w	r2, r4, #28
 8012924:	f7ff fef2 	bl	801270c <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8012928:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 801292c:	69a0      	ldr	r0, [r4, #24]
 801292e:	4a0d      	ldr	r2, [pc, #52]	; (8012964 <DisplayUdf::Show()+0x78>)
 8012930:	f7ff feec 	bl	801270c <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8012934:	4b0c      	ldr	r3, [pc, #48]	; (8012968 <DisplayUdf::Show()+0x7c>)
 8012936:	4a0d      	ldr	r2, [pc, #52]	; (801296c <DisplayUdf::Show()+0x80>)
 8012938:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 801293c:	9300      	str	r3, [sp, #0]
 801293e:	4620      	mov	r0, r4
 8012940:	2303      	movs	r3, #3
 8012942:	f7f5 fd1f 	bl	8008384 <Display::Printf(unsigned char, char const*, ...)>
 8012946:	4620      	mov	r0, r4
 8012948:	f7ff ff4a 	bl	80127e0 <DisplayUdf::ShowIpAddress()>
 801294c:	4620      	mov	r0, r4
 801294e:	f7ff ff99 	bl	8012884 <DisplayUdf::ShowGatewayIp()>
 8012952:	4620      	mov	r0, r4
 8012954:	f7ff ff78 	bl	8012848 <DisplayUdf::ShowNetmask()>
 8012958:	4620      	mov	r0, r4
 801295a:	b003      	add	sp, #12
 801295c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012960:	f7ff bfb0 	b.w	80128c4 <DisplayUdf::ShowHostName()>
 8012964:	0801678d 	stmdaeq	r1, {r0, r2, r3, r7, r8, r9, sl, sp, lr}
 8012968:	20009d60 	andcs	r9, r0, r0, ror #26
 801296c:	08017ba8 	stmdaeq	r1, {r3, r5, r7, r8, r9, fp, ip, sp, lr}

08012970 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 8012970:	3901      	subs	r1, #1
 8012972:	b510      	push	{r4, lr}
 8012974:	4604      	mov	r4, r0
 8012976:	2903      	cmp	r1, #3
 8012978:	d814      	bhi.n	80129a4 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 801297a:	e8df f001 	tbb	[pc, r1]
 801297e:	281b1402 	ldmdacs	fp, {r1, sl, ip}
 8012982:	4b14      	ldr	r3, [pc, #80]	; (80129d4 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8012984:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 8012988:	6818      	ldr	r0, [r3, #0]
 801298a:	f7f6 fe05 	bl	8009598 <Display::Status(Display7SegmentMessage)>
 801298e:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8012992:	69a0      	ldr	r0, [r4, #24]
 8012994:	f7ff fecc 	bl	8012730 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8012998:	4a0f      	ldr	r2, [pc, #60]	; (80129d8 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x68>)
 801299a:	4620      	mov	r0, r4
 801299c:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 80129a0:	f7f5 fcf0 	bl	8008384 <Display::Printf(unsigned char, char const*, ...)>
 80129a4:	bd10      	pop	{r4, pc}
 80129a6:	f248 0180 	movw	r1, #32896	; 0x8080
 80129aa:	4b0a      	ldr	r3, [pc, #40]	; (80129d4 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 80129ac:	6818      	ldr	r0, [r3, #0]
 80129ae:	f7f6 fdf3 	bl	8009598 <Display::Status(Display7SegmentMessage)>
 80129b2:	e7f7      	b.n	80129a4 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 80129b4:	4b07      	ldr	r3, [pc, #28]	; (80129d4 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 80129b6:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 80129ba:	6818      	ldr	r0, [r3, #0]
 80129bc:	f7f6 fdec 	bl	8009598 <Display::Status(Display7SegmentMessage)>
 80129c0:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 80129c4:	69a0      	ldr	r0, [r4, #24]
 80129c6:	f7ff feb3 	bl	8012730 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80129ca:	4a04      	ldr	r2, [pc, #16]	; (80129dc <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x6c>)
 80129cc:	e7e5      	b.n	801299a <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x2a>
 80129ce:	f645 3179 	movw	r1, #23417	; 0x5b79
 80129d2:	e7ea      	b.n	80129aa <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x3a>
 80129d4:	20009cd0 	ldrdcs	r9, [r0], -r0
 80129d8:	08017bb7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, r8, r9, fp, ip, sp, lr}
 80129dc:	08017bc5 	stmdaeq	r1, {r0, r2, r6, r7, r8, r9, fp, ip, sp, lr}

080129e0 <DisplayUdf::ShowShutdown()>:
 80129e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129e4:	4604      	mov	r4, r0
 80129e6:	6980      	ldr	r0, [r0, #24]
 80129e8:	b1d0      	cbz	r0, 8012a20 <DisplayUdf::ShowShutdown()+0x40>
 80129ea:	f890 8005 	ldrb.w	r8, [r0, #5]
 80129ee:	6803      	ldr	r3, [r0, #0]
 80129f0:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
 80129f4:	b2ed      	uxtb	r5, r5
 80129f6:	462a      	mov	r2, r5
 80129f8:	2100      	movs	r1, #0
 80129fa:	6a1b      	ldr	r3, [r3, #32]
 80129fc:	7906      	ldrb	r6, [r0, #4]
 80129fe:	2700      	movs	r7, #0
 8012a00:	4798      	blx	r3
 8012a02:	3e01      	subs	r6, #1
 8012a04:	42b7      	cmp	r7, r6
 8012a06:	69a0      	ldr	r0, [r4, #24]
 8012a08:	d311      	bcc.n	8012a2e <DisplayUdf::ShowShutdown()+0x4e>
 8012a0a:	b120      	cbz	r0, 8012a16 <DisplayUdf::ShowShutdown()+0x36>
 8012a0c:	6803      	ldr	r3, [r0, #0]
 8012a0e:	462a      	mov	r2, r5
 8012a10:	2100      	movs	r1, #0
 8012a12:	6a1b      	ldr	r3, [r3, #32]
 8012a14:	4798      	blx	r3
 8012a16:	4641      	mov	r1, r8
 8012a18:	4a08      	ldr	r2, [pc, #32]	; (8012a3c <DisplayUdf::ShowShutdown()+0x5c>)
 8012a1a:	69a0      	ldr	r0, [r4, #24]
 8012a1c:	f7ff fe76 	bl	801270c <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8012a20:	f44f 41de 	mov.w	r1, #28416	; 0x6f00
 8012a24:	4620      	mov	r0, r4
 8012a26:	f7f6 fdb7 	bl	8009598 <Display::Status(Display7SegmentMessage)>
 8012a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a2e:	b118      	cbz	r0, 8012a38 <DisplayUdf::ShowShutdown()+0x58>
 8012a30:	6803      	ldr	r3, [r0, #0]
 8012a32:	2120      	movs	r1, #32
 8012a34:	695b      	ldr	r3, [r3, #20]
 8012a36:	4798      	blx	r3
 8012a38:	3701      	adds	r7, #1
 8012a3a:	e7e3      	b.n	8012a04 <DisplayUdf::ShowShutdown()+0x24>
 8012a3c:	08017bd3 	stmdaeq	r1, {r0, r1, r4, r6, r7, r8, r9, fp, ip, sp, lr}

08012a40 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 8012a40:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012a42:	88c6      	ldrh	r6, [r0, #6]
 8012a44:	8885      	ldrh	r5, [r0, #4]
 8012a46:	42ae      	cmp	r6, r5
 8012a48:	d216      	bcs.n	8012a78 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 8012a4a:	4604      	mov	r4, r0
 8012a4c:	6800      	ldr	r0, [r0, #0]
 8012a4e:	1bad      	subs	r5, r5, r6
 8012a50:	4430      	add	r0, r6
 8012a52:	7a26      	ldrb	r6, [r4, #8]
 8012a54:	b923      	cbnz	r3, 8012a60 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 8012a56:	b926      	cbnz	r6, 8012a62 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 8012a58:	9200      	str	r2, [sp, #0]
 8012a5a:	460b      	mov	r3, r1
 8012a5c:	4a09      	ldr	r2, [pc, #36]	; (8012a84 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 8012a5e:	e003      	b.n	8012a68 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8012a60:	b166      	cbz	r6, 8012a7c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 8012a62:	460b      	mov	r3, r1
 8012a64:	9200      	str	r2, [sp, #0]
 8012a66:	4a08      	ldr	r2, [pc, #32]	; (8012a88 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 8012a68:	4629      	mov	r1, r5
 8012a6a:	f7f6 fb07 	bl	800907c <snprintf>
 8012a6e:	4285      	cmp	r5, r0
 8012a70:	bfa2      	ittt	ge
 8012a72:	88e3      	ldrhge	r3, [r4, #6]
 8012a74:	181b      	addge	r3, r3, r0
 8012a76:	80e3      	strhge	r3, [r4, #6]
 8012a78:	b002      	add	sp, #8
 8012a7a:	bd70      	pop	{r4, r5, r6, pc}
 8012a7c:	9200      	str	r2, [sp, #0]
 8012a7e:	460b      	mov	r3, r1
 8012a80:	4a02      	ldr	r2, [pc, #8]	; (8012a8c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 8012a82:	e7f1      	b.n	8012a68 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8012a84:	08016595 	stmdaeq	r1, {r0, r2, r4, r7, r8, sl, sp, lr}
 8012a88:	0801658c 	stmdaeq	r1, {r2, r3, r7, r8, sl, sp, lr}
 8012a8c:	08016596 	stmdaeq	r1, {r1, r2, r4, r7, r8, sl, sp, lr}

08012a90 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>:
 8012a90:	b510      	push	{r4, lr}
 8012a92:	2220      	movs	r2, #32
 8012a94:	4604      	mov	r4, r0
 8012a96:	f840 1b04 	str.w	r1, [r0], #4
 8012a9a:	2100      	movs	r1, #0
 8012a9c:	f001 fa62 	bl	8013f64 <memset>
 8012aa0:	f647 7305 	movw	r3, #32517	; 0x7f05
 8012aa4:	4620      	mov	r0, r4
 8012aa6:	84a3      	strh	r3, [r4, #36]	; 0x24
 8012aa8:	bd10      	pop	{r4, pc}

08012aaa <DisplayUdfParams::Load()>:
 8012aaa:	b508      	push	{r3, lr}
 8012aac:	2300      	movs	r3, #0
 8012aae:	4601      	mov	r1, r0
 8012ab0:	6043      	str	r3, [r0, #4]
 8012ab2:	6800      	ldr	r0, [r0, #0]
 8012ab4:	b120      	cbz	r0, 8012ac0 <DisplayUdfParams::Load()+0x16>
 8012ab6:	6803      	ldr	r3, [r0, #0]
 8012ab8:	3104      	adds	r1, #4
 8012aba:	68db      	ldr	r3, [r3, #12]
 8012abc:	4798      	blx	r3
 8012abe:	2001      	movs	r0, #1
 8012ac0:	bd08      	pop	{r3, pc}
	...

08012ac4 <DisplayUdfParams::Load(char const*, unsigned int)>:
 8012ac4:	6803      	ldr	r3, [r0, #0]
 8012ac6:	b1d3      	cbz	r3, 8012afe <DisplayUdfParams::Load(char const*, unsigned int)+0x3a>
 8012ac8:	2300      	movs	r3, #0
 8012aca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012acc:	460d      	mov	r5, r1
 8012ace:	4616      	mov	r6, r2
 8012ad0:	4604      	mov	r4, r0
 8012ad2:	6043      	str	r3, [r0, #4]
 8012ad4:	4602      	mov	r2, r0
 8012ad6:	490a      	ldr	r1, [pc, #40]	; (8012b00 <DisplayUdfParams::Load(char const*, unsigned int)+0x3c>)
 8012ad8:	4668      	mov	r0, sp
 8012ada:	f000 fbc1 	bl	8013260 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8012ade:	4632      	mov	r2, r6
 8012ae0:	4629      	mov	r1, r5
 8012ae2:	4668      	mov	r0, sp
 8012ae4:	f000 fbc0 	bl	8013268 <ReadConfigFile::Read(char const*, unsigned int)>
 8012ae8:	4621      	mov	r1, r4
 8012aea:	f851 0b04 	ldr.w	r0, [r1], #4
 8012aee:	6803      	ldr	r3, [r0, #0]
 8012af0:	689b      	ldr	r3, [r3, #8]
 8012af2:	4798      	blx	r3
 8012af4:	4668      	mov	r0, sp
 8012af6:	f000 fbb6 	bl	8013266 <ReadConfigFile::~ReadConfigFile()>
 8012afa:	b002      	add	sp, #8
 8012afc:	bd70      	pop	{r4, r5, r6, pc}
 8012afe:	4770      	bx	lr
 8012b00:	08012bcd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r8, r9, fp, sp}

08012b04 <DisplayUdfParams::callbackFunction(char const*)>:
 8012b04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012b06:	460e      	mov	r6, r1
 8012b08:	4604      	mov	r4, r0
 8012b0a:	492c      	ldr	r1, [pc, #176]	; (8012bbc <DisplayUdfParams::callbackFunction(char const*)+0xb8>)
 8012b0c:	4630      	mov	r0, r6
 8012b0e:	f10d 0207 	add.w	r2, sp, #7
 8012b12:	f000 fce1 	bl	80134d8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8012b16:	b968      	cbnz	r0, 8012b34 <DisplayUdfParams::callbackFunction(char const*)+0x30>
 8012b18:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012b1c:	6863      	ldr	r3, [r4, #4]
 8012b1e:	2a7f      	cmp	r2, #127	; 0x7f
 8012b20:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8012b24:	bf14      	ite	ne
 8012b26:	f043 5300 	orrne.w	r3, r3, #536870912	; 0x20000000
 8012b2a:	f023 5300 	biceq.w	r3, r3, #536870912	; 0x20000000
 8012b2e:	6063      	str	r3, [r4, #4]
 8012b30:	b003      	add	sp, #12
 8012b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b34:	4630      	mov	r0, r6
 8012b36:	4922      	ldr	r1, [pc, #136]	; (8012bc0 <DisplayUdfParams::callbackFunction(char const*)+0xbc>)
 8012b38:	f10d 0207 	add.w	r2, sp, #7
 8012b3c:	f000 fccc 	bl	80134d8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8012b40:	b958      	cbnz	r0, 8012b5a <DisplayUdfParams::callbackFunction(char const*)+0x56>
 8012b42:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012b46:	6863      	ldr	r3, [r4, #4]
 8012b48:	2a05      	cmp	r2, #5
 8012b4a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8012b4e:	bf14      	ite	ne
 8012b50:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8012b54:	f023 5380 	biceq.w	r3, r3, #268435456	; 0x10000000
 8012b58:	e7e9      	b.n	8012b2e <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8012b5a:	4630      	mov	r0, r6
 8012b5c:	4919      	ldr	r1, [pc, #100]	; (8012bc4 <DisplayUdfParams::callbackFunction(char const*)+0xc0>)
 8012b5e:	f10d 0207 	add.w	r2, sp, #7
 8012b62:	f000 fcb9 	bl	80134d8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8012b66:	b948      	cbnz	r0, 8012b7c <DisplayUdfParams::callbackFunction(char const*)+0x78>
 8012b68:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012b6c:	6863      	ldr	r3, [r4, #4]
 8012b6e:	b112      	cbz	r2, 8012b76 <DisplayUdfParams::callbackFunction(char const*)+0x72>
 8012b70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012b74:	e7db      	b.n	8012b2e <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8012b76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012b7a:	e7d8      	b.n	8012b2e <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8012b7c:	2500      	movs	r5, #0
 8012b7e:	4f12      	ldr	r7, [pc, #72]	; (8012bc8 <DisplayUdfParams::callbackFunction(char const*)+0xc4>)
 8012b80:	4630      	mov	r0, r6
 8012b82:	f857 1b04 	ldr.w	r1, [r7], #4
 8012b86:	f10d 0207 	add.w	r2, sp, #7
 8012b8a:	f000 fca5 	bl	80134d8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8012b8e:	b980      	cbnz	r0, 8012bb2 <DisplayUdfParams::callbackFunction(char const*)+0xae>
 8012b90:	2301      	movs	r3, #1
 8012b92:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012b96:	40ab      	lsls	r3, r5
 8012b98:	1e4e      	subs	r6, r1, #1
 8012b9a:	2e05      	cmp	r6, #5
 8012b9c:	6862      	ldr	r2, [r4, #4]
 8012b9e:	4425      	add	r5, r4
 8012ba0:	d802      	bhi.n	8012ba8 <DisplayUdfParams::callbackFunction(char const*)+0xa4>
 8012ba2:	7229      	strb	r1, [r5, #8]
 8012ba4:	4313      	orrs	r3, r2
 8012ba6:	e7c2      	b.n	8012b2e <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8012ba8:	ea22 0203 	bic.w	r2, r2, r3
 8012bac:	7228      	strb	r0, [r5, #8]
 8012bae:	6062      	str	r2, [r4, #4]
 8012bb0:	e7be      	b.n	8012b30 <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 8012bb2:	3501      	adds	r5, #1
 8012bb4:	2d14      	cmp	r5, #20
 8012bb6:	d1e3      	bne.n	8012b80 <DisplayUdfParams::callbackFunction(char const*)+0x7c>
 8012bb8:	e7ba      	b.n	8012b30 <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 8012bba:	bf00      	nop
 8012bbc:	08017c92 	stmdaeq	r1, {r1, r4, r7, sl, fp, ip, sp, lr}
 8012bc0:	08017c5a 	stmdaeq	r1, {r1, r3, r4, r6, sl, fp, ip, sp, lr}
 8012bc4:	08017c68 	stmdaeq	r1, {r3, r5, r6, sl, fp, ip, sp, lr}
 8012bc8:	08017be4 	stmdaeq	r1, {r2, r5, r6, r7, r8, r9, fp, ip, sp, lr}

08012bcc <DisplayUdfParams::staticCallbackFunction(void*, char const*)>:
 8012bcc:	f7ff bf9a 	b.w	8012b04 <DisplayUdfParams::callbackFunction(char const*)>

08012bd0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>:
 8012bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bd4:	4604      	mov	r4, r0
 8012bd6:	4615      	mov	r5, r2
 8012bd8:	461e      	mov	r6, r3
 8012bda:	b086      	sub	sp, #24
 8012bdc:	3004      	adds	r0, #4
 8012bde:	b379      	cbz	r1, 8012c40 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x70>
 8012be0:	2222      	movs	r2, #34	; 0x22
 8012be2:	f001 f9a8 	bl	8013f36 <memmove>
 8012be6:	462a      	mov	r2, r5
 8012be8:	4633      	mov	r3, r6
 8012bea:	493d      	ldr	r1, [pc, #244]	; (8012ce0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x110>)
 8012bec:	a803      	add	r0, sp, #12
 8012bee:	f000 fa97 	bl	8013120 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 8012bf2:	6863      	ldr	r3, [r4, #4]
 8012bf4:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8012bf8:	493a      	ldr	r1, [pc, #232]	; (8012ce4 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x114>)
 8012bfa:	f3c3 7340 	ubfx	r3, r3, #29, #1
 8012bfe:	a803      	add	r0, sp, #12
 8012c00:	f7ff ff1e 	bl	8012a40 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8012c04:	6863      	ldr	r3, [r4, #4]
 8012c06:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8012c0a:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8012c0e:	4936      	ldr	r1, [pc, #216]	; (8012ce8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x118>)
 8012c10:	a803      	add	r0, sp, #12
 8012c12:	f7ff ff15 	bl	8012a40 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8012c16:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8012c1a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8012c1e:	6863      	ldr	r3, [r4, #4]
 8012c20:	42aa      	cmp	r2, r5
 8012c22:	d226      	bcs.n	8012c72 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xa2>
 8012c24:	9803      	ldr	r0, [sp, #12]
 8012c26:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
 8012c2a:	4410      	add	r0, r2
 8012c2c:	eba5 0502 	sub.w	r5, r5, r2
 8012c30:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8012c34:	d10b      	bne.n	8012c4e <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x7e>
 8012c36:	b962      	cbnz	r2, 8012c52 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x82>
 8012c38:	9200      	str	r2, [sp, #0]
 8012c3a:	4b2c      	ldr	r3, [pc, #176]	; (8012cec <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 8012c3c:	4a2c      	ldr	r2, [pc, #176]	; (8012cf0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x120>)
 8012c3e:	e00e      	b.n	8012c5e <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 8012c40:	6823      	ldr	r3, [r4, #0]
 8012c42:	4601      	mov	r1, r0
 8012c44:	681a      	ldr	r2, [r3, #0]
 8012c46:	4618      	mov	r0, r3
 8012c48:	68d2      	ldr	r2, [r2, #12]
 8012c4a:	4790      	blx	r2
 8012c4c:	e7cb      	b.n	8012be6 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x16>
 8012c4e:	2a00      	cmp	r2, #0
 8012c50:	d041      	beq.n	8012cd6 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x106>
 8012c52:	3b00      	subs	r3, #0
 8012c54:	bf18      	it	ne
 8012c56:	2301      	movne	r3, #1
 8012c58:	4a26      	ldr	r2, [pc, #152]	; (8012cf4 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x124>)
 8012c5a:	9300      	str	r3, [sp, #0]
 8012c5c:	4b23      	ldr	r3, [pc, #140]	; (8012cec <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 8012c5e:	4629      	mov	r1, r5
 8012c60:	f7f6 fa0c 	bl	800907c <snprintf>
 8012c64:	4285      	cmp	r5, r0
 8012c66:	bfa2      	ittt	ge
 8012c68:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8012c6c:	181b      	addge	r3, r3, r0
 8012c6e:	f8ad 3012 	strhge.w	r3, [sp, #18]
 8012c72:	2500      	movs	r5, #0
 8012c74:	2701      	movs	r7, #1
 8012c76:	4e20      	ldr	r6, [pc, #128]	; (8012cf8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x128>)
 8012c78:	f104 0808 	add.w	r8, r4, #8
 8012c7c:	f856 1b04 	ldr.w	r1, [r6], #4
 8012c80:	780b      	ldrb	r3, [r1, #0]
 8012c82:	b15b      	cbz	r3, 8012c9c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xcc>
 8012c84:	6862      	ldr	r2, [r4, #4]
 8012c86:	fa07 f305 	lsl.w	r3, r7, r5
 8012c8a:	4393      	bics	r3, r2
 8012c8c:	bf0c      	ite	eq
 8012c8e:	2301      	moveq	r3, #1
 8012c90:	2300      	movne	r3, #0
 8012c92:	f818 2005 	ldrb.w	r2, [r8, r5]
 8012c96:	a803      	add	r0, sp, #12
 8012c98:	f7ff fed2 	bl	8012a40 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8012c9c:	3501      	adds	r5, #1
 8012c9e:	2d14      	cmp	r5, #20
 8012ca0:	d1ec      	bne.n	8012c7c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xac>
 8012ca2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8012ca6:	b17b      	cbz	r3, 8012cc8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xf8>
 8012ca8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8012cac:	9b03      	ldr	r3, [sp, #12]
 8012cae:	4413      	add	r3, r2
 8012cb0:	227d      	movs	r2, #125	; 0x7d
 8012cb2:	f803 2c01 	strb.w	r2, [r3, #-1]
 8012cb6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8012cba:	9903      	ldr	r1, [sp, #12]
 8012cbc:	54ca      	strb	r2, [r1, r3]
 8012cbe:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8012cc2:	3301      	adds	r3, #1
 8012cc4:	f8ad 3012 	strh.w	r3, [sp, #18]
 8012cc8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8012ccc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012cce:	601a      	str	r2, [r3, #0]
 8012cd0:	b006      	add	sp, #24
 8012cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cd6:	2301      	movs	r3, #1
 8012cd8:	4a08      	ldr	r2, [pc, #32]	; (8012cfc <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x12c>)
 8012cda:	9300      	str	r3, [sp, #0]
 8012cdc:	4b03      	ldr	r3, [pc, #12]	; (8012cec <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 8012cde:	e7be      	b.n	8012c5e <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 8012ce0:	08017c86 	stmdaeq	r1, {r1, r2, r7, sl, fp, ip, sp, lr}
 8012ce4:	08017c92 	stmdaeq	r1, {r1, r4, r7, sl, fp, ip, sp, lr}
 8012ce8:	08017c5a 	stmdaeq	r1, {r1, r3, r4, r6, sl, fp, ip, sp, lr}
 8012cec:	08017c68 	stmdaeq	r1, {r3, r5, r6, sl, fp, ip, sp, lr}
 8012cf0:	08016595 	stmdaeq	r1, {r0, r2, r4, r7, r8, sl, sp, lr}
 8012cf4:	0801658c 	stmdaeq	r1, {r2, r3, r7, r8, sl, sp, lr}
 8012cf8:	08017be4 	stmdaeq	r1, {r2, r5, r6, r7, r8, r9, fp, ip, sp, lr}
 8012cfc:	08016596 	stmdaeq	r1, {r1, r2, r4, r7, r8, sl, sp, lr}

08012d00 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>:
 8012d00:	b513      	push	{r0, r1, r4, lr}
 8012d02:	6804      	ldr	r4, [r0, #0]
 8012d04:	b914      	cbnz	r4, 8012d0c <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0xc>
 8012d06:	601c      	str	r4, [r3, #0]
 8012d08:	b002      	add	sp, #8
 8012d0a:	bd10      	pop	{r4, pc}
 8012d0c:	9300      	str	r3, [sp, #0]
 8012d0e:	4613      	mov	r3, r2
 8012d10:	460a      	mov	r2, r1
 8012d12:	2100      	movs	r1, #0
 8012d14:	f7ff ff5c 	bl	8012bd0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>
 8012d18:	e7f6      	b.n	8012d08 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0x8>

08012d1a <DisplayUdfParams::Set(DisplayUdf*)>:
 8012d1a:	6843      	ldr	r3, [r0, #4]
 8012d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d20:	009a      	lsls	r2, r3, #2
 8012d22:	4604      	mov	r4, r0
 8012d24:	460e      	mov	r6, r1
 8012d26:	d506      	bpl.n	8012d36 <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8012d28:	6988      	ldr	r0, [r1, #24]
 8012d2a:	b120      	cbz	r0, 8012d36 <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8012d2c:	6803      	ldr	r3, [r0, #0]
 8012d2e:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 8012d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d34:	4798      	blx	r3
 8012d36:	6863      	ldr	r3, [r4, #4]
 8012d38:	69b0      	ldr	r0, [r6, #24]
 8012d3a:	00db      	lsls	r3, r3, #3
 8012d3c:	bf41      	itttt	mi
 8012d3e:	f64e 2260 	movwmi	r2, #60000	; 0xea60
 8012d42:	f894 3024 	ldrbmi.w	r3, [r4, #36]	; 0x24
 8012d46:	4353      	mulmi	r3, r2
 8012d48:	6173      	strmi	r3, [r6, #20]
 8012d4a:	6861      	ldr	r1, [r4, #4]
 8012d4c:	f3c1 7180 	ubfx	r1, r1, #30, #1
 8012d50:	b110      	cbz	r0, 8012d58 <DisplayUdfParams::Set(DisplayUdf*)+0x3e>
 8012d52:	6803      	ldr	r3, [r0, #0]
 8012d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d56:	4798      	blx	r3
 8012d58:	2500      	movs	r5, #0
 8012d5a:	2701      	movs	r7, #1
 8012d5c:	f104 0808 	add.w	r8, r4, #8
 8012d60:	6862      	ldr	r2, [r4, #4]
 8012d62:	fa07 f305 	lsl.w	r3, r7, r5
 8012d66:	4393      	bics	r3, r2
 8012d68:	d105      	bne.n	8012d76 <DisplayUdfParams::Set(DisplayUdf*)+0x5c>
 8012d6a:	462a      	mov	r2, r5
 8012d6c:	4630      	mov	r0, r6
 8012d6e:	f818 1005 	ldrb.w	r1, [r8, r5]
 8012d72:	f7ff fd0c 	bl	801278e <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8012d76:	3501      	adds	r5, #1
 8012d78:	2d14      	cmp	r5, #20
 8012d7a:	d1f1      	bne.n	8012d60 <DisplayUdfParams::Set(DisplayUdf*)+0x46>
 8012d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012d80 <DisplayUdfParams::Dump()>:
 8012d80:	4770      	bx	lr

08012d82 <DisplayUdf::ShowNodeName(ArtNetNode*)>:
 8012d82:	b570      	push	{r4, r5, r6, lr}
 8012d84:	4605      	mov	r5, r0
 8012d86:	6980      	ldr	r0, [r0, #24]
 8012d88:	460c      	mov	r4, r1
 8012d8a:	b120      	cbz	r0, 8012d96 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x14>
 8012d8c:	6803      	ldr	r3, [r0, #0]
 8012d8e:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
 8012d92:	691b      	ldr	r3, [r3, #16]
 8012d94:	4798      	blx	r3
 8012d96:	69a8      	ldr	r0, [r5, #24]
 8012d98:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8012d9c:	b190      	cbz	r0, 8012dc4 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x42>
 8012d9e:	2300      	movs	r3, #0
 8012da0:	7906      	ldrb	r6, [r0, #4]
 8012da2:	343b      	adds	r4, #59	; 0x3b
 8012da4:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8012da8:	b119      	cbz	r1, 8012db2 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x30>
 8012daa:	1c59      	adds	r1, r3, #1
 8012dac:	429e      	cmp	r6, r3
 8012dae:	460b      	mov	r3, r1
 8012db0:	dcf8      	bgt.n	8012da4 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x22>
 8012db2:	6801      	ldr	r1, [r0, #0]
 8012db4:	b2db      	uxtb	r3, r3
 8012db6:	69cc      	ldr	r4, [r1, #28]
 8012db8:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
 8012dbc:	46a4      	mov	ip, r4
 8012dbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012dc2:	4760      	bx	ip
 8012dc4:	bd70      	pop	{r4, r5, r6, pc}
	...

08012dc8 <DisplayUdf::ShowUniverse(ArtNetNode*)>:
 8012dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dcc:	460c      	mov	r4, r1
 8012dce:	b089      	sub	sp, #36	; 0x24
 8012dd0:	4606      	mov	r6, r0
 8012dd2:	2301      	movs	r3, #1
 8012dd4:	2100      	movs	r1, #0
 8012dd6:	4620      	mov	r0, r4
 8012dd8:	f10d 021f 	add.w	r2, sp, #31
 8012ddc:	f7f7 fe35 	bl	800aa4a <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 8012de0:	b1e8      	cbz	r0, 8012e1e <DisplayUdf::ShowUniverse(ArtNetNode*)+0x56>
 8012de2:	f8d4 5908 	ldr.w	r5, [r4, #2312]	; 0x908
 8012de6:	4a2b      	ldr	r2, [pc, #172]	; (8012e94 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xcc>)
 8012de8:	4b2b      	ldr	r3, [pc, #172]	; (8012e98 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd0>)
 8012dea:	4f2c      	ldr	r7, [pc, #176]	; (8012e9c <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd4>)
 8012dec:	2d00      	cmp	r5, #0
 8012dee:	bf18      	it	ne
 8012df0:	4613      	movne	r3, r2
 8012df2:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8012df6:	4a2a      	ldr	r2, [pc, #168]	; (8012ea0 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd8>)
 8012df8:	f894 103b 	ldrb.w	r1, [r4, #59]	; 0x3b
 8012dfc:	2d00      	cmp	r5, #0
 8012dfe:	bf18      	it	ne
 8012e00:	463a      	movne	r2, r7
 8012e02:	f89d 001f 	ldrb.w	r0, [sp, #31]
 8012e06:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8012e0a:	e9cd 1000 	strd	r1, r0, [sp]
 8012e0e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8012e12:	4630      	mov	r0, r6
 8012e14:	4a23      	ldr	r2, [pc, #140]	; (8012ea4 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xdc>)
 8012e16:	f896 1040 	ldrb.w	r1, [r6, #64]	; 0x40
 8012e1a:	f7f5 fab3 	bl	8008384 <Display::Printf(unsigned char, char const*, ...)>
 8012e1e:	4627      	mov	r7, r4
 8012e20:	2500      	movs	r5, #0
 8012e22:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8012e98 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd0>
 8012e26:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8012e94 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xcc>
 8012e2a:	f8df a074 	ldr.w	sl, [pc, #116]	; 8012ea0 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd8>
 8012e2e:	4629      	mov	r1, r5
 8012e30:	2301      	movs	r3, #1
 8012e32:	4620      	mov	r0, r4
 8012e34:	f10d 021f 	add.w	r2, sp, #31
 8012e38:	f7f7 fe07 	bl	800aa4a <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 8012e3c:	3501      	adds	r5, #1
 8012e3e:	b308      	cbz	r0, 8012e84 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xbc>
 8012e40:	f8d7 c908 	ldr.w	ip, [r7, #2312]	; 0x908
 8012e44:	f8df b054 	ldr.w	fp, [pc, #84]	; 8012e9c <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd4>
 8012e48:	f1bc 0f00 	cmp.w	ip, #0
 8012e4c:	bf0c      	ite	eq
 8012e4e:	46c6      	moveq	lr, r8
 8012e50:	46ce      	movne	lr, r9
 8012e52:	f8d7 c910 	ldr.w	ip, [r7, #2320]	; 0x910
 8012e56:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
 8012e5a:	f1bc 0f00 	cmp.w	ip, #0
 8012e5e:	bf08      	it	eq
 8012e60:	46d3      	moveq	fp, sl
 8012e62:	f89d 001f 	ldrb.w	r0, [sp, #31]
 8012e66:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8012e6a:	e9cd 2001 	strd	r2, r0, [sp, #4]
 8012e6e:	e9cd eb03 	strd	lr, fp, [sp, #12]
 8012e72:	9300      	str	r3, [sp, #0]
 8012e74:	f106 0143 	add.w	r1, r6, #67	; 0x43
 8012e78:	462b      	mov	r3, r5
 8012e7a:	4630      	mov	r0, r6
 8012e7c:	4a0a      	ldr	r2, [pc, #40]	; (8012ea8 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xe0>)
 8012e7e:	5d49      	ldrb	r1, [r1, r5]
 8012e80:	f7f5 fa80 	bl	8008384 <Display::Printf(unsigned char, char const*, ...)>
 8012e84:	2d04      	cmp	r5, #4
 8012e86:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8012e8a:	d1d0      	bne.n	8012e2e <DisplayUdf::ShowUniverse(ArtNetNode*)+0x66>
 8012e8c:	b009      	add	sp, #36	; 0x24
 8012e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e92:	bf00      	nop
 8012e94:	080167fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr}
 8012e98:	080167f6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r8, r9, sl, sp, lr}
 8012e9c:	08016806 	stmdaeq	r1, {r1, r2, fp, sp, lr}
 8012ea0:	08017c9c 	stmdaeq	r1, {r2, r3, r4, r7, sl, fp, ip, sp, lr}
 8012ea4:	08017ca1 	stmdaeq	r1, {r0, r5, r7, sl, fp, ip, sp, lr}
 8012ea8:	08017cb5 	stmdaeq	r1, {r0, r2, r4, r5, r7, sl, fp, ip, sp, lr}

08012eac <DisplayUdf::ShowDestinationIp(ArtNetNode*)>:
 8012eac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012eb0:	4606      	mov	r6, r0
 8012eb2:	2541      	movs	r5, #65	; 0x41
 8012eb4:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8012ef4 <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x48>
 8012eb8:	b085      	sub	sp, #20
 8012eba:	f100 0849 	add.w	r8, r0, #73	; 0x49
 8012ebe:	f501 67b1 	add.w	r7, r1, #1416	; 0x588
 8012ec2:	012b      	lsls	r3, r5, #4
 8012ec4:	58fc      	ldr	r4, [r7, r3]
 8012ec6:	464a      	mov	r2, r9
 8012ec8:	0e23      	lsrs	r3, r4, #24
 8012eca:	9303      	str	r3, [sp, #12]
 8012ecc:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8012ed0:	9302      	str	r3, [sp, #8]
 8012ed2:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8012ed6:	b2e4      	uxtb	r4, r4
 8012ed8:	9301      	str	r3, [sp, #4]
 8012eda:	9400      	str	r4, [sp, #0]
 8012edc:	462b      	mov	r3, r5
 8012ede:	4630      	mov	r0, r6
 8012ee0:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8012ee4:	3501      	adds	r5, #1
 8012ee6:	f7f5 fa4d 	bl	8008384 <Display::Printf(unsigned char, char const*, ...)>
 8012eea:	2d45      	cmp	r5, #69	; 0x45
 8012eec:	d1e9      	bne.n	8012ec2 <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x16>
 8012eee:	b005      	add	sp, #20
 8012ef0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ef4:	08017ccb 	stmdaeq	r1, {r0, r1, r3, r6, r7, sl, fp, ip, sp, lr}

08012ef8 <DisplayUdf::Show(ArtNetNode*)>:
 8012ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012efa:	4604      	mov	r4, r0
 8012efc:	460d      	mov	r5, r1
 8012efe:	f7ff fcf5 	bl	80128ec <DisplayUdf::Show()>
 8012f02:	4629      	mov	r1, r5
 8012f04:	4620      	mov	r0, r4
 8012f06:	f7ff ff3c 	bl	8012d82 <DisplayUdf::ShowNodeName(ArtNetNode*)>
 8012f0a:	4629      	mov	r1, r5
 8012f0c:	4620      	mov	r0, r4
 8012f0e:	f7ff ff5b 	bl	8012dc8 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8012f12:	4629      	mov	r1, r5
 8012f14:	4620      	mov	r0, r4
 8012f16:	f7ff ffc9 	bl	8012eac <DisplayUdf::ShowDestinationIp(ArtNetNode*)>
 8012f1a:	f895 28eb 	ldrb.w	r2, [r5, #2283]	; 0x8eb
 8012f1e:	f895 38ea 	ldrb.w	r3, [r5, #2282]	; 0x8ea
 8012f22:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8012f26:	4413      	add	r3, r2
 8012f28:	4620      	mov	r0, r4
 8012f2a:	4a0d      	ldr	r2, [pc, #52]	; (8012f60 <DisplayUdf::Show(ArtNetNode*)+0x68>)
 8012f2c:	f7f5 fa2a 	bl	8008384 <Display::Printf(unsigned char, char const*, ...)>
 8012f30:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8012f32:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
 8012f36:	2a02      	cmp	r2, #2
 8012f38:	d001      	beq.n	8012f3e <DisplayUdf::Show(ArtNetNode*)+0x46>
 8012f3a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8012f3c:	b92b      	cbnz	r3, 8012f4a <DisplayUdf::Show(ArtNetNode*)+0x52>
 8012f3e:	4620      	mov	r0, r4
 8012f40:	4a08      	ldr	r2, [pc, #32]	; (8012f64 <DisplayUdf::Show(ArtNetNode*)+0x6c>)
 8012f42:	f7f5 fa1f 	bl	8008384 <Display::Printf(unsigned char, char const*, ...)>
 8012f46:	b003      	add	sp, #12
 8012f48:	bd30      	pop	{r4, r5, pc}
 8012f4a:	4807      	ldr	r0, [pc, #28]	; (8012f68 <DisplayUdf::Show(ArtNetNode*)+0x70>)
 8012f4c:	9300      	str	r3, [sp, #0]
 8012f4e:	4b07      	ldr	r3, [pc, #28]	; (8012f6c <DisplayUdf::Show(ArtNetNode*)+0x74>)
 8012f50:	2a00      	cmp	r2, #0
 8012f52:	bf08      	it	eq
 8012f54:	4603      	moveq	r3, r0
 8012f56:	4620      	mov	r0, r4
 8012f58:	4a05      	ldr	r2, [pc, #20]	; (8012f70 <DisplayUdf::Show(ArtNetNode*)+0x78>)
 8012f5a:	f7f5 fa13 	bl	8008384 <Display::Printf(unsigned char, char const*, ...)>
 8012f5e:	e7f2      	b.n	8012f46 <DisplayUdf::Show(ArtNetNode*)+0x4e>
 8012f60:	08017cdb 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, sl, fp, ip, sp, lr}
 8012f64:	08017ce2 	stmdaeq	r1, {r1, r5, r6, r7, sl, fp, ip, sp, lr}
 8012f68:	08016afe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r7, r9, fp, sp, lr}
 8012f6c:	08016af3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r9, fp, sp, lr}
 8012f70:	08017ce9 	stmdaeq	r1, {r0, r3, r5, r6, r7, sl, fp, ip, sp, lr}

08012f74 <NetworkDisplay::ShowEmacStart()>:
 8012f74:	4b01      	ldr	r3, [pc, #4]	; (8012f7c <NetworkDisplay::ShowEmacStart()+0x8>)
 8012f76:	6818      	ldr	r0, [r3, #0]
 8012f78:	f7ff bc22 	b.w	80127c0 <DisplayUdf::ShowEmacStart()>
 8012f7c:	20009cc8 	andcs	r9, r0, r8, asr #25

08012f80 <NetworkDisplay::ShowIp()>:
 8012f80:	4b01      	ldr	r3, [pc, #4]	; (8012f88 <NetworkDisplay::ShowIp()+0x8>)
 8012f82:	6818      	ldr	r0, [r3, #0]
 8012f84:	f7ff bc2c 	b.w	80127e0 <DisplayUdf::ShowIpAddress()>
 8012f88:	20009cc8 	andcs	r9, r0, r8, asr #25

08012f8c <NetworkDisplay::ShowNetMask()>:
 8012f8c:	4b01      	ldr	r3, [pc, #4]	; (8012f94 <NetworkDisplay::ShowNetMask()+0x8>)
 8012f8e:	6818      	ldr	r0, [r3, #0]
 8012f90:	f7ff bc5a 	b.w	8012848 <DisplayUdf::ShowNetmask()>
 8012f94:	20009cc8 	andcs	r9, r0, r8, asr #25

08012f98 <NetworkDisplay::ShowGatewayIp()>:
 8012f98:	4b01      	ldr	r3, [pc, #4]	; (8012fa0 <NetworkDisplay::ShowGatewayIp()+0x8>)
 8012f9a:	6818      	ldr	r0, [r3, #0]
 8012f9c:	f7ff bc72 	b.w	8012884 <DisplayUdf::ShowGatewayIp()>
 8012fa0:	20009cc8 	andcs	r9, r0, r8, asr #25

08012fa4 <NetworkDisplay::ShowShutdown()>:
 8012fa4:	4b01      	ldr	r3, [pc, #4]	; (8012fac <NetworkDisplay::ShowShutdown()+0x8>)
 8012fa6:	6818      	ldr	r0, [r3, #0]
 8012fa8:	f7ff bd1a 	b.w	80129e0 <DisplayUdf::ShowShutdown()>
 8012fac:	20009cc8 	andcs	r9, r0, r8, asr #25

08012fb0 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 8012fb0:	4b01      	ldr	r3, [pc, #4]	; (8012fb8 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)+0x8>)
 8012fb2:	6818      	ldr	r0, [r3, #0]
 8012fb4:	f7ff bcdc 	b.w	8012970 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8012fb8:	20009cc8 	andcs	r9, r0, r8, asr #25

08012fbc <properties::convert_json_file(char*, unsigned short, bool)>:
 8012fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fc0:	4603      	mov	r3, r0
 8012fc2:	7800      	ldrb	r0, [r0, #0]
 8012fc4:	287b      	cmp	r0, #123	; 0x7b
 8012fc6:	f040 80a2 	bne.w	801310e <properties::convert_json_file(char*, unsigned short, bool)+0x152>
 8012fca:	b17a      	cbz	r2, 8012fec <properties::convert_json_file(char*, unsigned short, bool)+0x30>
 8012fcc:	2401      	movs	r4, #1
 8012fce:	461e      	mov	r6, r3
 8012fd0:	4620      	mov	r0, r4
 8012fd2:	2a00      	cmp	r2, #0
 8012fd4:	bf0c      	ite	eq
 8012fd6:	f04f 0c0a 	moveq.w	ip, #10
 8012fda:	f04f 0c00 	movne.w	ip, #0
 8012fde:	273d      	movs	r7, #61	; 0x3d
 8012fe0:	42a1      	cmp	r1, r4
 8012fe2:	d850      	bhi.n	8013086 <properties::convert_json_file(char*, unsigned short, bool)+0xca>
 8012fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fe8:	463c      	mov	r4, r7
 8012fea:	e7f2      	b.n	8012fd2 <properties::convert_json_file(char*, unsigned short, bool)+0x16>
 8012fec:	2023      	movs	r0, #35	; 0x23
 8012fee:	f803 0b01 	strb.w	r0, [r3], #1
 8012ff2:	461c      	mov	r4, r3
 8012ff4:	2701      	movs	r7, #1
 8012ff6:	42b9      	cmp	r1, r7
 8012ff8:	d811      	bhi.n	801301e <properties::convert_json_file(char*, unsigned short, bool)+0x62>
 8012ffa:	2001      	movs	r0, #1
 8012ffc:	461e      	mov	r6, r3
 8012ffe:	230a      	movs	r3, #10
 8013000:	4625      	mov	r5, r4
 8013002:	f806 3b01 	strb.w	r3, [r6], #1
 8013006:	3001      	adds	r0, #1
 8013008:	462b      	mov	r3, r5
 801300a:	781c      	ldrb	r4, [r3, #0]
 801300c:	3501      	adds	r5, #1
 801300e:	2c7b      	cmp	r4, #123	; 0x7b
 8013010:	d0ea      	beq.n	8012fe8 <properties::convert_json_file(char*, unsigned short, bool)+0x2c>
 8013012:	42b9      	cmp	r1, r7
 8013014:	f107 0401 	add.w	r4, r7, #1
 8013018:	d9db      	bls.n	8012fd2 <properties::convert_json_file(char*, unsigned short, bool)+0x16>
 801301a:	4627      	mov	r7, r4
 801301c:	e7f4      	b.n	8013008 <properties::convert_json_file(char*, unsigned short, bool)+0x4c>
 801301e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8013022:	2822      	cmp	r0, #34	; 0x22
 8013024:	d119      	bne.n	801305a <properties::convert_json_file(char*, unsigned short, bool)+0x9e>
 8013026:	46a4      	mov	ip, r4
 8013028:	461d      	mov	r5, r3
 801302a:	2601      	movs	r6, #1
 801302c:	f89c e000 	ldrb.w	lr, [ip]
 8013030:	4664      	mov	r4, ip
 8013032:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8013036:	462b      	mov	r3, r5
 8013038:	4630      	mov	r0, r6
 801303a:	f10c 0c01 	add.w	ip, ip, #1
 801303e:	f105 0501 	add.w	r5, r5, #1
 8013042:	f106 0601 	add.w	r6, r6, #1
 8013046:	d0d9      	beq.n	8012ffc <properties::convert_json_file(char*, unsigned short, bool)+0x40>
 8013048:	3701      	adds	r7, #1
 801304a:	42b9      	cmp	r1, r7
 801304c:	4664      	mov	r4, ip
 801304e:	f805 ec01 	strb.w	lr, [r5, #-1]
 8013052:	d8eb      	bhi.n	801302c <properties::convert_json_file(char*, unsigned short, bool)+0x70>
 8013054:	4630      	mov	r0, r6
 8013056:	462b      	mov	r3, r5
 8013058:	e7d0      	b.n	8012ffc <properties::convert_json_file(char*, unsigned short, bool)+0x40>
 801305a:	3701      	adds	r7, #1
 801305c:	e7cb      	b.n	8012ff6 <properties::convert_json_file(char*, unsigned short, bool)+0x3a>
 801305e:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8013062:	d110      	bne.n	8013086 <properties::convert_json_file(char*, unsigned short, bool)+0xca>
 8013064:	eba0 0803 	sub.w	r8, r0, r3
 8013068:	461a      	mov	r2, r3
 801306a:	eb08 0003 	add.w	r0, r8, r3
 801306e:	f813 eb01 	ldrb.w	lr, [r3], #1
 8013072:	1c65      	adds	r5, r4, #1
 8013074:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8013078:	d04c      	beq.n	8013114 <properties::convert_json_file(char*, unsigned short, bool)+0x158>
 801307a:	42a1      	cmp	r1, r4
 801307c:	d911      	bls.n	80130a2 <properties::convert_json_file(char*, unsigned short, bool)+0xe6>
 801307e:	462c      	mov	r4, r5
 8013080:	f806 eb01 	strb.w	lr, [r6], #1
 8013084:	e7f0      	b.n	8013068 <properties::convert_json_file(char*, unsigned short, bool)+0xac>
 8013086:	42a1      	cmp	r1, r4
 8013088:	461d      	mov	r5, r3
 801308a:	f893 e000 	ldrb.w	lr, [r3]
 801308e:	f104 0401 	add.w	r4, r4, #1
 8013092:	f103 0301 	add.w	r3, r3, #1
 8013096:	d8e2      	bhi.n	801305e <properties::convert_json_file(char*, unsigned short, bool)+0xa2>
 8013098:	462b      	mov	r3, r5
 801309a:	e7e3      	b.n	8013064 <properties::convert_json_file(char*, unsigned short, bool)+0xa8>
 801309c:	f1be 0f3a 	cmp.w	lr, #58	; 0x3a
 80130a0:	d009      	beq.n	80130b6 <properties::convert_json_file(char*, unsigned short, bool)+0xfa>
 80130a2:	42a9      	cmp	r1, r5
 80130a4:	4614      	mov	r4, r2
 80130a6:	f892 e000 	ldrb.w	lr, [r2]
 80130aa:	f105 0501 	add.w	r5, r5, #1
 80130ae:	f102 0201 	add.w	r2, r2, #1
 80130b2:	d8f3      	bhi.n	801309c <properties::convert_json_file(char*, unsigned short, bool)+0xe0>
 80130b4:	4622      	mov	r2, r4
 80130b6:	7814      	ldrb	r4, [r2, #0]
 80130b8:	4696      	mov	lr, r2
 80130ba:	2c2f      	cmp	r4, #47	; 0x2f
 80130bc:	462b      	mov	r3, r5
 80130be:	f102 0201 	add.w	r2, r2, #1
 80130c2:	f105 0501 	add.w	r5, r5, #1
 80130c6:	d81a      	bhi.n	80130fe <properties::convert_json_file(char*, unsigned short, bool)+0x142>
 80130c8:	4299      	cmp	r1, r3
 80130ca:	d8f4      	bhi.n	80130b6 <properties::convert_json_file(char*, unsigned short, bool)+0xfa>
 80130cc:	2c22      	cmp	r4, #34	; 0x22
 80130ce:	bf08      	it	eq
 80130d0:	4696      	moveq	lr, r2
 80130d2:	4673      	mov	r3, lr
 80130d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80130d8:	1c6c      	adds	r4, r5, #1
 80130da:	2a22      	cmp	r2, #34	; 0x22
 80130dc:	d011      	beq.n	8013102 <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 80130de:	2a2c      	cmp	r2, #44	; 0x2c
 80130e0:	d00f      	beq.n	8013102 <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 80130e2:	2a7d      	cmp	r2, #125	; 0x7d
 80130e4:	d00d      	beq.n	8013102 <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 80130e6:	42a9      	cmp	r1, r5
 80130e8:	d90f      	bls.n	801310a <properties::convert_json_file(char*, unsigned short, bool)+0x14e>
 80130ea:	f1a2 0520 	sub.w	r5, r2, #32
 80130ee:	2d5a      	cmp	r5, #90	; 0x5a
 80130f0:	d803      	bhi.n	80130fa <properties::convert_json_file(char*, unsigned short, bool)+0x13e>
 80130f2:	469e      	mov	lr, r3
 80130f4:	f806 2b01 	strb.w	r2, [r6], #1
 80130f8:	3001      	adds	r0, #1
 80130fa:	4625      	mov	r5, r4
 80130fc:	e7e9      	b.n	80130d2 <properties::convert_json_file(char*, unsigned short, bool)+0x116>
 80130fe:	461d      	mov	r5, r3
 8013100:	e7e7      	b.n	80130d2 <properties::convert_json_file(char*, unsigned short, bool)+0x116>
 8013102:	462c      	mov	r4, r5
 8013104:	f806 cb01 	strb.w	ip, [r6], #1
 8013108:	3001      	adds	r0, #1
 801310a:	3401      	adds	r4, #1
 801310c:	e768      	b.n	8012fe0 <properties::convert_json_file(char*, unsigned short, bool)+0x24>
 801310e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013112:	e767      	b.n	8012fe4 <properties::convert_json_file(char*, unsigned short, bool)+0x28>
 8013114:	4625      	mov	r5, r4
 8013116:	f806 7b01 	strb.w	r7, [r6], #1
 801311a:	3001      	adds	r0, #1
 801311c:	e7c1      	b.n	80130a2 <properties::convert_json_file(char*, unsigned short, bool)+0xe6>
	...

08013120 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>:
 8013120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013124:	6002      	str	r2, [r0, #0]
 8013126:	4614      	mov	r4, r2
 8013128:	2200      	movs	r2, #0
 801312a:	80c2      	strh	r2, [r0, #6]
 801312c:	4a1c      	ldr	r2, [pc, #112]	; (80131a0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x80>)
 801312e:	4606      	mov	r6, r0
 8013130:	7812      	ldrb	r2, [r2, #0]
 8013132:	8083      	strh	r3, [r0, #4]
 8013134:	f002 0201 	and.w	r2, r2, #1
 8013138:	7202      	strb	r2, [r0, #8]
 801313a:	4608      	mov	r0, r1
 801313c:	4605      	mov	r5, r0
 801313e:	782f      	ldrb	r7, [r5, #0]
 8013140:	3001      	adds	r0, #1
 8013142:	2f00      	cmp	r7, #0
 8013144:	d1fa      	bne.n	801313c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x1c>
 8013146:	1a6d      	subs	r5, r5, r1
 8013148:	b29b      	uxth	r3, r3
 801314a:	b1d2      	cbz	r2, 8013182 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x62>
 801314c:	1d2f      	adds	r7, r5, #4
 801314e:	429f      	cmp	r7, r3
 8013150:	d814      	bhi.n	801317c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8013152:	f04f 087b 	mov.w	r8, #123	; 0x7b
 8013156:	f04f 0922 	mov.w	r9, #34	; 0x22
 801315a:	462a      	mov	r2, r5
 801315c:	f884 8000 	strb.w	r8, [r4]
 8013160:	f884 9001 	strb.w	r9, [r4, #1]
 8013164:	1ca0      	adds	r0, r4, #2
 8013166:	f000 fee6 	bl	8013f36 <memmove>
 801316a:	223a      	movs	r2, #58	; 0x3a
 801316c:	1963      	adds	r3, r4, r5
 801316e:	3505      	adds	r5, #5
 8013170:	f883 9002 	strb.w	r9, [r3, #2]
 8013174:	70da      	strb	r2, [r3, #3]
 8013176:	80f5      	strh	r5, [r6, #6]
 8013178:	f804 8007 	strb.w	r8, [r4, r7]
 801317c:	4630      	mov	r0, r6
 801317e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013182:	1caf      	adds	r7, r5, #2
 8013184:	429f      	cmp	r7, r3
 8013186:	d8f9      	bhi.n	801317c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8013188:	4620      	mov	r0, r4
 801318a:	2323      	movs	r3, #35	; 0x23
 801318c:	462a      	mov	r2, r5
 801318e:	f800 3b01 	strb.w	r3, [r0], #1
 8013192:	f000 fed0 	bl	8013f36 <memmove>
 8013196:	230a      	movs	r3, #10
 8013198:	442c      	add	r4, r5
 801319a:	7063      	strb	r3, [r4, #1]
 801319c:	80f7      	strh	r7, [r6, #6]
 801319e:	e7ed      	b.n	801317c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 80131a0:	20009ccc 	andcs	r9, r0, ip, asr #25

080131a4 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>:
 80131a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131a6:	469c      	mov	ip, r3
 80131a8:	8885      	ldrh	r5, [r0, #4]
 80131aa:	88c3      	ldrh	r3, [r0, #6]
 80131ac:	b085      	sub	sp, #20
 80131ae:	42ab      	cmp	r3, r5
 80131b0:	d302      	bcc.n	80131b8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x14>
 80131b2:	2000      	movs	r0, #0
 80131b4:	b005      	add	sp, #20
 80131b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80131b8:	4604      	mov	r4, r0
 80131ba:	6800      	ldr	r0, [r0, #0]
 80131bc:	1aed      	subs	r5, r5, r3
 80131be:	4418      	add	r0, r3
 80131c0:	b2d6      	uxtb	r6, r2
 80131c2:	f3c2 2707 	ubfx	r7, r2, #8, #8
 80131c6:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80131ca:	f894 e008 	ldrb.w	lr, [r4, #8]
 80131ce:	0e12      	lsrs	r2, r2, #24
 80131d0:	f1bc 0f00 	cmp.w	ip, #0
 80131d4:	d109      	bne.n	80131ea <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x46>
 80131d6:	f1be 0f00 	cmp.w	lr, #0
 80131da:	d109      	bne.n	80131f0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x4c>
 80131dc:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80131e0:	e9cd 6700 	strd	r6, r7, [sp]
 80131e4:	460b      	mov	r3, r1
 80131e6:	4a0e      	ldr	r2, [pc, #56]	; (8013220 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x7c>)
 80131e8:	e008      	b.n	80131fc <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 80131ea:	f1be 0f00 	cmp.w	lr, #0
 80131ee:	d00f      	beq.n	8013210 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x6c>
 80131f0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80131f4:	460b      	mov	r3, r1
 80131f6:	e9cd 6700 	strd	r6, r7, [sp]
 80131fa:	4a0a      	ldr	r2, [pc, #40]	; (8013224 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x80>)
 80131fc:	4629      	mov	r1, r5
 80131fe:	f7f5 ff3d 	bl	800907c <snprintf>
 8013202:	4285      	cmp	r5, r0
 8013204:	dbd5      	blt.n	80131b2 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0xe>
 8013206:	88e3      	ldrh	r3, [r4, #6]
 8013208:	4403      	add	r3, r0
 801320a:	80e3      	strh	r3, [r4, #6]
 801320c:	2001      	movs	r0, #1
 801320e:	e7d1      	b.n	80131b4 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x10>
 8013210:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8013214:	e9cd 6700 	strd	r6, r7, [sp]
 8013218:	460b      	mov	r3, r1
 801321a:	4a03      	ldr	r2, [pc, #12]	; (8013228 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x84>)
 801321c:	e7ee      	b.n	80131fc <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 801321e:	bf00      	nop
 8013220:	08017da1 	stmdaeq	r1, {r0, r5, r7, r8, sl, fp, ip, sp, lr}
 8013224:	08017d8d 	stmdaeq	r1, {r0, r2, r3, r7, r8, sl, fp, ip, sp, lr}
 8013228:	08017da2 	stmdaeq	r1, {r1, r5, r7, r8, sl, fp, ip, sp, lr}

0801322c <PropertiesBuilder::AddComment(char const*)>:
 801322c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801322e:	7a06      	ldrb	r6, [r0, #8]
 8013230:	b996      	cbnz	r6, 8013258 <PropertiesBuilder::AddComment(char const*)+0x2c>
 8013232:	4604      	mov	r4, r0
 8013234:	88c0      	ldrh	r0, [r0, #6]
 8013236:	88a5      	ldrh	r5, [r4, #4]
 8013238:	42a8      	cmp	r0, r5
 801323a:	d20d      	bcs.n	8013258 <PropertiesBuilder::AddComment(char const*)+0x2c>
 801323c:	6827      	ldr	r7, [r4, #0]
 801323e:	1a2d      	subs	r5, r5, r0
 8013240:	460b      	mov	r3, r1
 8013242:	4a06      	ldr	r2, [pc, #24]	; (801325c <PropertiesBuilder::AddComment(char const*)+0x30>)
 8013244:	4629      	mov	r1, r5
 8013246:	4438      	add	r0, r7
 8013248:	f7f5 ff18 	bl	800907c <snprintf>
 801324c:	4285      	cmp	r5, r0
 801324e:	bfa1      	itttt	ge
 8013250:	2601      	movge	r6, #1
 8013252:	88e3      	ldrhge	r3, [r4, #6]
 8013254:	18c0      	addge	r0, r0, r3
 8013256:	80e0      	strhge	r0, [r4, #6]
 8013258:	4630      	mov	r0, r6
 801325a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801325c:	08017db2 	stmdaeq	r1, {r1, r4, r5, r7, r8, sl, fp, ip, sp, lr}

08013260 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>:
 8013260:	e9c0 1200 	strd	r1, r2, [r0]
 8013264:	4770      	bx	lr

08013266 <ReadConfigFile::~ReadConfigFile()>:
 8013266:	4770      	bx	lr

08013268 <ReadConfigFile::Read(char const*, unsigned int)>:
 8013268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801326c:	4606      	mov	r6, r0
 801326e:	460d      	mov	r5, r1
 8013270:	4614      	mov	r4, r2
 8013272:	f04f 0800 	mov.w	r8, #0
 8013276:	b0a0      	sub	sp, #128	; 0x80
 8013278:	b33c      	cbz	r4, 80132ca <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 801327a:	466b      	mov	r3, sp
 801327c:	462a      	mov	r2, r5
 801327e:	4619      	mov	r1, r3
 8013280:	e007      	b.n	8013292 <ReadConfigFile::Read(char const*, unsigned int)+0x2a>
 8013282:	f803 7b01 	strb.w	r7, [r3], #1
 8013286:	1a58      	subs	r0, r3, r1
 8013288:	287f      	cmp	r0, #127	; 0x7f
 801328a:	4615      	mov	r5, r2
 801328c:	dc1d      	bgt.n	80132ca <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 801328e:	3c01      	subs	r4, #1
 8013290:	d00f      	beq.n	80132b2 <ReadConfigFile::Read(char const*, unsigned int)+0x4a>
 8013292:	7817      	ldrb	r7, [r2, #0]
 8013294:	4610      	mov	r0, r2
 8013296:	2f0d      	cmp	r7, #13
 8013298:	f102 0201 	add.w	r2, r2, #1
 801329c:	d001      	beq.n	80132a2 <ReadConfigFile::Read(char const*, unsigned int)+0x3a>
 801329e:	2f0a      	cmp	r7, #10
 80132a0:	d1ef      	bne.n	8013282 <ReadConfigFile::Read(char const*, unsigned int)+0x1a>
 80132a2:	4605      	mov	r5, r0
 80132a4:	b12c      	cbz	r4, 80132b2 <ReadConfigFile::Read(char const*, unsigned int)+0x4a>
 80132a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80132aa:	2a0d      	cmp	r2, #13
 80132ac:	d00b      	beq.n	80132c6 <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 80132ae:	2a0a      	cmp	r2, #10
 80132b0:	d009      	beq.n	80132c6 <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 80132b2:	f89d 2000 	ldrb.w	r2, [sp]
 80132b6:	2a60      	cmp	r2, #96	; 0x60
 80132b8:	d9de      	bls.n	8013278 <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 80132ba:	f883 8000 	strb.w	r8, [r3]
 80132be:	e9d6 3000 	ldrd	r3, r0, [r6]
 80132c2:	4798      	blx	r3
 80132c4:	e7d8      	b.n	8013278 <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 80132c6:	3c01      	subs	r4, #1
 80132c8:	e7eb      	b.n	80132a2 <ReadConfigFile::Read(char const*, unsigned int)+0x3a>
 80132ca:	b020      	add	sp, #128	; 0x80
 80132cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080132d0 <Sscan::Char(char const*, char const*, char*, unsigned int&)>:
 80132d0:	b570      	push	{r4, r5, r6, lr}
 80132d2:	4615      	mov	r5, r2
 80132d4:	461c      	mov	r4, r3
 80132d6:	f000 f91c 	bl	8013512 <Sscan::checkName(char const*, char const*)>
 80132da:	b180      	cbz	r0, 80132fe <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2e>
 80132dc:	2100      	movs	r1, #0
 80132de:	5c43      	ldrb	r3, [r0, r1]
 80132e0:	6826      	ldr	r6, [r4, #0]
 80132e2:	b28a      	uxth	r2, r1
 80132e4:	b143      	cbz	r3, 80132f8 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x28>
 80132e6:	42b2      	cmp	r2, r6
 80132e8:	d303      	bcc.n	80132f2 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x22>
 80132ea:	2b0a      	cmp	r3, #10
 80132ec:	d004      	beq.n	80132f8 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x28>
 80132ee:	2002      	movs	r0, #2
 80132f0:	e004      	b.n	80132fc <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2c>
 80132f2:	546b      	strb	r3, [r5, r1]
 80132f4:	3101      	adds	r1, #1
 80132f6:	e7f2      	b.n	80132de <Sscan::Char(char const*, char const*, char*, unsigned int&)+0xe>
 80132f8:	2000      	movs	r0, #0
 80132fa:	6022      	str	r2, [r4, #0]
 80132fc:	bd70      	pop	{r4, r5, r6, pc}
 80132fe:	2001      	movs	r0, #1
 8013300:	e7fc      	b.n	80132fc <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2c>

08013302 <Sscan::Float(char const*, char const*, float&)>:
 8013302:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013306:	4616      	mov	r6, r2
 8013308:	f000 f903 	bl	8013512 <Sscan::checkName(char const*, char const*)>
 801330c:	2800      	cmp	r0, #0
 801330e:	d059      	beq.n	80133c4 <Sscan::Float(char const*, char const*, float&)+0xc2>
 8013310:	4604      	mov	r4, r0
 8013312:	7803      	ldrb	r3, [r0, #0]
 8013314:	2b2d      	cmp	r3, #45	; 0x2d
 8013316:	bf08      	it	eq
 8013318:	3401      	addeq	r4, #1
 801331a:	7823      	ldrb	r3, [r4, #0]
 801331c:	bf0c      	ite	eq
 801331e:	f04f 0801 	moveq.w	r8, #1
 8013322:	f04f 0800 	movne.w	r8, #0
 8013326:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 801332a:	d103      	bne.n	8013334 <Sscan::Float(char const*, char const*, float&)+0x32>
 801332c:	2702      	movs	r7, #2
 801332e:	4638      	mov	r0, r7
 8013330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013334:	2000      	movs	r0, #0
 8013336:	220a      	movs	r2, #10
 8013338:	7823      	ldrb	r3, [r4, #0]
 801333a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801333e:	2909      	cmp	r1, #9
 8013340:	d8f4      	bhi.n	801332c <Sscan::Float(char const*, char const*, float&)+0x2a>
 8013342:	fb02 3000 	mla	r0, r2, r0, r3
 8013346:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801334a:	3830      	subs	r0, #48	; 0x30
 801334c:	2b2e      	cmp	r3, #46	; 0x2e
 801334e:	d002      	beq.n	8013356 <Sscan::Float(char const*, char const*, float&)+0x54>
 8013350:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8013354:	d1f0      	bne.n	8013338 <Sscan::Float(char const*, char const*, float&)+0x36>
 8013356:	f7f4 fb15 	bl	8007984 <__aeabi_ui2f>
 801335a:	6030      	str	r0, [r6, #0]
 801335c:	7823      	ldrb	r3, [r4, #0]
 801335e:	4605      	mov	r5, r0
 8013360:	2b2e      	cmp	r3, #46	; 0x2e
 8013362:	d008      	beq.n	8013376 <Sscan::Float(char const*, char const*, float&)+0x74>
 8013364:	f1b8 0f00 	cmp.w	r8, #0
 8013368:	d101      	bne.n	801336e <Sscan::Float(char const*, char const*, float&)+0x6c>
 801336a:	2700      	movs	r7, #0
 801336c:	e7df      	b.n	801332e <Sscan::Float(char const*, char const*, float&)+0x2c>
 801336e:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 8013372:	6035      	str	r5, [r6, #0]
 8013374:	e7f9      	b.n	801336a <Sscan::Float(char const*, char const*, float&)+0x68>
 8013376:	f04f 0901 	mov.w	r9, #1
 801337a:	2000      	movs	r0, #0
 801337c:	220a      	movs	r2, #10
 801337e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013382:	f013 07df 	ands.w	r7, r3, #223	; 0xdf
 8013386:	d111      	bne.n	80133ac <Sscan::Float(char const*, char const*, float&)+0xaa>
 8013388:	f7f4 fafc 	bl	8007984 <__aeabi_ui2f>
 801338c:	4604      	mov	r4, r0
 801338e:	4648      	mov	r0, r9
 8013390:	f7f4 faf8 	bl	8007984 <__aeabi_ui2f>
 8013394:	4601      	mov	r1, r0
 8013396:	4620      	mov	r0, r4
 8013398:	f7f4 fe72 	bl	8008080 <__aeabi_fdiv>
 801339c:	4629      	mov	r1, r5
 801339e:	f7f4 fa41 	bl	8007824 <__addsf3>
 80133a2:	f1b8 0f00 	cmp.w	r8, #0
 80133a6:	d109      	bne.n	80133bc <Sscan::Float(char const*, char const*, float&)+0xba>
 80133a8:	6030      	str	r0, [r6, #0]
 80133aa:	e7de      	b.n	801336a <Sscan::Float(char const*, char const*, float&)+0x68>
 80133ac:	3b30      	subs	r3, #48	; 0x30
 80133ae:	2b09      	cmp	r3, #9
 80133b0:	d8bc      	bhi.n	801332c <Sscan::Float(char const*, char const*, float&)+0x2a>
 80133b2:	fb02 3000 	mla	r0, r2, r0, r3
 80133b6:	fb02 f909 	mul.w	r9, r2, r9
 80133ba:	e7e0      	b.n	801337e <Sscan::Float(char const*, char const*, float&)+0x7c>
 80133bc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80133c0:	6030      	str	r0, [r6, #0]
 80133c2:	e7b4      	b.n	801332e <Sscan::Float(char const*, char const*, float&)+0x2c>
 80133c4:	2701      	movs	r7, #1
 80133c6:	e7b2      	b.n	801332e <Sscan::Float(char const*, char const*, float&)+0x2c>

080133c8 <Sscan::IpAddress(char const*, char const*, unsigned int&)>:
 80133c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80133ca:	4615      	mov	r5, r2
 80133cc:	f000 f8a1 	bl	8013512 <Sscan::checkName(char const*, char const*)>
 80133d0:	bb58      	cbnz	r0, 801342a <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x62>
 80133d2:	2001      	movs	r0, #1
 80133d4:	e027      	b.n	8013426 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5e>
 80133d6:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80133da:	2b09      	cmp	r3, #9
 80133dc:	d822      	bhi.n	8013424 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 80133de:	4603      	mov	r3, r0
 80133e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80133e4:	3930      	subs	r1, #48	; 0x30
 80133e6:	4618      	mov	r0, r3
 80133e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80133ec:	2a2e      	cmp	r2, #46	; 0x2e
 80133ee:	d115      	bne.n	801341c <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x54>
 80133f0:	29ff      	cmp	r1, #255	; 0xff
 80133f2:	d817      	bhi.n	8013424 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 80133f4:	3401      	adds	r4, #1
 80133f6:	2c03      	cmp	r4, #3
 80133f8:	f806 1b01 	strb.w	r1, [r6], #1
 80133fc:	d119      	bne.n	8013432 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x6a>
 80133fe:	2400      	movs	r4, #0
 8013400:	260a      	movs	r6, #10
 8013402:	1d1a      	adds	r2, r3, #4
 8013404:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8013408:	f011 00df 	ands.w	r0, r1, #223	; 0xdf
 801340c:	d115      	bne.n	801343a <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x72>
 801340e:	2cff      	cmp	r4, #255	; 0xff
 8013410:	d808      	bhi.n	8013424 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8013412:	f88d 4007 	strb.w	r4, [sp, #7]
 8013416:	9b01      	ldr	r3, [sp, #4]
 8013418:	602b      	str	r3, [r5, #0]
 801341a:	e004      	b.n	8013426 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5e>
 801341c:	2a00      	cmp	r2, #0
 801341e:	d0e7      	beq.n	80133f0 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 8013420:	42b8      	cmp	r0, r7
 8013422:	d1d8      	bne.n	80133d6 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0xe>
 8013424:	2002      	movs	r0, #2
 8013426:	b003      	add	sp, #12
 8013428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801342a:	2400      	movs	r4, #0
 801342c:	f04f 0c0a 	mov.w	ip, #10
 8013430:	ae01      	add	r6, sp, #4
 8013432:	4603      	mov	r3, r0
 8013434:	2100      	movs	r1, #0
 8013436:	1d07      	adds	r7, r0, #4
 8013438:	e7d5      	b.n	80133e6 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x1e>
 801343a:	4293      	cmp	r3, r2
 801343c:	d0f2      	beq.n	8013424 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 801343e:	3930      	subs	r1, #48	; 0x30
 8013440:	2909      	cmp	r1, #9
 8013442:	d8ef      	bhi.n	8013424 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8013444:	fb06 1404 	mla	r4, r6, r4, r1
 8013448:	e7dc      	b.n	8013404 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x3c>

0801344a <Sscan::Uint16(char const*, char const*, unsigned short&)>:
 801344a:	b538      	push	{r3, r4, r5, lr}
 801344c:	4615      	mov	r5, r2
 801344e:	f000 f860 	bl	8013512 <Sscan::checkName(char const*, char const*)>
 8013452:	b1a0      	cbz	r0, 801347e <Sscan::Uint16(char const*, char const*, unsigned short&)+0x34>
 8013454:	4604      	mov	r4, r0
 8013456:	2100      	movs	r1, #0
 8013458:	220a      	movs	r2, #10
 801345a:	7823      	ldrb	r3, [r4, #0]
 801345c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8013460:	2809      	cmp	r0, #9
 8013462:	d80e      	bhi.n	8013482 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 8013464:	fb02 3101 	mla	r1, r2, r1, r3
 8013468:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801346c:	3930      	subs	r1, #48	; 0x30
 801346e:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 8013472:	d1f2      	bne.n	801345a <Sscan::Uint16(char const*, char const*, unsigned short&)+0x10>
 8013474:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8013478:	d203      	bcs.n	8013482 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 801347a:	8029      	strh	r1, [r5, #0]
 801347c:	bd38      	pop	{r3, r4, r5, pc}
 801347e:	2001      	movs	r0, #1
 8013480:	e7fc      	b.n	801347c <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>
 8013482:	2002      	movs	r0, #2
 8013484:	e7fa      	b.n	801347c <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>

08013486 <Sscan::Uint32(char const*, char const*, unsigned int&)>:
 8013486:	b570      	push	{r4, r5, r6, lr}
 8013488:	4615      	mov	r5, r2
 801348a:	f000 f842 	bl	8013512 <Sscan::checkName(char const*, char const*)>
 801348e:	b1f8      	cbz	r0, 80134d0 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4a>
 8013490:	2300      	movs	r3, #0
 8013492:	4604      	mov	r4, r0
 8013494:	461a      	mov	r2, r3
 8013496:	260a      	movs	r6, #10
 8013498:	7820      	ldrb	r0, [r4, #0]
 801349a:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
 801349e:	2909      	cmp	r1, #9
 80134a0:	d818      	bhi.n	80134d4 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4e>
 80134a2:	fba3 3106 	umull	r3, r1, r3, r6
 80134a6:	fb06 1102 	mla	r1, r6, r2, r1
 80134aa:	3b30      	subs	r3, #48	; 0x30
 80134ac:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 80134b0:	18c3      	adds	r3, r0, r3
 80134b2:	f141 0200 	adc.w	r2, r1, #0
 80134b6:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80134ba:	f011 00df 	ands.w	r0, r1, #223	; 0xdf
 80134be:	d1eb      	bne.n	8013498 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x12>
 80134c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80134c4:	4299      	cmp	r1, r3
 80134c6:	eb70 0202 	sbcs.w	r2, r0, r2
 80134ca:	d303      	bcc.n	80134d4 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4e>
 80134cc:	602b      	str	r3, [r5, #0]
 80134ce:	bd70      	pop	{r4, r5, r6, pc}
 80134d0:	2001      	movs	r0, #1
 80134d2:	e7fc      	b.n	80134ce <Sscan::Uint32(char const*, char const*, unsigned int&)+0x48>
 80134d4:	2002      	movs	r0, #2
 80134d6:	e7fa      	b.n	80134ce <Sscan::Uint32(char const*, char const*, unsigned int&)+0x48>

080134d8 <Sscan::Uint8(char const*, char const*, unsigned char&)>:
 80134d8:	b538      	push	{r3, r4, r5, lr}
 80134da:	4615      	mov	r5, r2
 80134dc:	f000 f819 	bl	8013512 <Sscan::checkName(char const*, char const*)>
 80134e0:	b198      	cbz	r0, 801350a <Sscan::Uint8(char const*, char const*, unsigned char&)+0x32>
 80134e2:	4604      	mov	r4, r0
 80134e4:	2100      	movs	r1, #0
 80134e6:	220a      	movs	r2, #10
 80134e8:	7823      	ldrb	r3, [r4, #0]
 80134ea:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80134ee:	2809      	cmp	r0, #9
 80134f0:	d80d      	bhi.n	801350e <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 80134f2:	fb02 3101 	mla	r1, r2, r1, r3
 80134f6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80134fa:	3930      	subs	r1, #48	; 0x30
 80134fc:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 8013500:	d1f2      	bne.n	80134e8 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x10>
 8013502:	29ff      	cmp	r1, #255	; 0xff
 8013504:	d803      	bhi.n	801350e <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 8013506:	7029      	strb	r1, [r5, #0]
 8013508:	bd38      	pop	{r3, r4, r5, pc}
 801350a:	2001      	movs	r0, #1
 801350c:	e7fc      	b.n	8013508 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>
 801350e:	2002      	movs	r0, #2
 8013510:	e7fa      	b.n	8013508 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>

08013512 <Sscan::checkName(char const*, char const*)>:
 8013512:	4603      	mov	r3, r0
 8013514:	b510      	push	{r4, lr}
 8013516:	3901      	subs	r1, #1
 8013518:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801351c:	461c      	mov	r4, r3
 801351e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013522:	b120      	cbz	r0, 801352e <Sscan::checkName(char const*, char const*)+0x1c>
 8013524:	b10a      	cbz	r2, 801352a <Sscan::checkName(char const*, char const*)+0x18>
 8013526:	4290      	cmp	r0, r2
 8013528:	d0f6      	beq.n	8013518 <Sscan::checkName(char const*, char const*)+0x6>
 801352a:	2000      	movs	r0, #0
 801352c:	e006      	b.n	801353c <Sscan::checkName(char const*, char const*)+0x2a>
 801352e:	2a3d      	cmp	r2, #61	; 0x3d
 8013530:	d104      	bne.n	801353c <Sscan::checkName(char const*, char const*)+0x2a>
 8013532:	7860      	ldrb	r0, [r4, #1]
 8013534:	f010 00df 	ands.w	r0, r0, #223	; 0xdf
 8013538:	d000      	beq.n	801353c <Sscan::checkName(char const*, char const*)+0x2a>
 801353a:	1c60      	adds	r0, r4, #1
 801353c:	bd10      	pop	{r4, pc}
	...

08013540 <Display::PrintInfo() [clone .isra.0]>:
 8013540:	b910      	cbnz	r0, 8013548 <Display::PrintInfo() [clone .isra.0]+0x8>
 8013542:	4803      	ldr	r0, [pc, #12]	; (8013550 <Display::PrintInfo() [clone .isra.0]+0x10>)
 8013544:	f000 bd2f 	b.w	8013fa6 <puts>
 8013548:	6803      	ldr	r3, [r0, #0]
 801354a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801354c:	4718      	bx	r3
 801354e:	bf00      	nop
 8013550:	08017ed8 	stmdaeq	r1, {r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}

08013554 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
 8013554:	b513      	push	{r0, r1, r4, lr}
 8013556:	4604      	mov	r4, r0
 8013558:	0a13      	lsrs	r3, r2, #8
 801355a:	7800      	ldrb	r0, [r0, #0]
 801355c:	f88d 1004 	strb.w	r1, [sp, #4]
 8013560:	f88d 3005 	strb.w	r3, [sp, #5]
 8013564:	f88d 2006 	strb.w	r2, [sp, #6]
 8013568:	f001 fb80 	bl	8014c6c <gd32_i2c_set_address>
 801356c:	6860      	ldr	r0, [r4, #4]
 801356e:	f001 fb75 	bl	8014c5c <gd32_i2c_set_baudrate>
 8013572:	2103      	movs	r1, #3
 8013574:	a801      	add	r0, sp, #4
 8013576:	f001 fb7f 	bl	8014c78 <gd32_i2c_write>
 801357a:	b002      	add	sp, #8
 801357c:	bd10      	pop	{r4, pc}

0801357e <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
 801357e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013580:	460d      	mov	r5, r1
 8013582:	4604      	mov	r4, r0
 8013584:	f001 fb72 	bl	8014c6c <gd32_i2c_set_address>
 8013588:	4628      	mov	r0, r5
 801358a:	f001 fb67 	bl	8014c5c <gd32_i2c_set_baudrate>
 801358e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8013592:	2b07      	cmp	r3, #7
 8013594:	d902      	bls.n	801359c <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x1e>
 8013596:	3c50      	subs	r4, #80	; 0x50
 8013598:	2c0f      	cmp	r4, #15
 801359a:	d809      	bhi.n	80135b0 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x32>
 801359c:	2101      	movs	r1, #1
 801359e:	f10d 0007 	add.w	r0, sp, #7
 80135a2:	f001 fbcf 	bl	8014d44 <gd32_i2c_read>
 80135a6:	fab0 f080 	clz	r0, r0
 80135aa:	0940      	lsrs	r0, r0, #5
 80135ac:	b003      	add	sp, #12
 80135ae:	bd30      	pop	{r4, r5, pc}
 80135b0:	2100      	movs	r1, #0
 80135b2:	4608      	mov	r0, r1
 80135b4:	f001 fb60 	bl	8014c78 <gd32_i2c_write>
 80135b8:	e7f5      	b.n	80135a6 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x28>

080135ba <Display::Detect7Segment()>:
 80135ba:	b538      	push	{r3, r4, r5, lr}
 80135bc:	68c1      	ldr	r1, [r0, #12]
 80135be:	4604      	mov	r4, r0
 80135c0:	7a00      	ldrb	r0, [r0, #8]
 80135c2:	f7ff ffdc 	bl	801357e <HAL_I2C::IsConnected_(unsigned char, unsigned int)>
 80135c6:	7460      	strb	r0, [r4, #17]
 80135c8:	b170      	cbz	r0, 80135e8 <Display::Detect7Segment()+0x2e>
 80135ca:	2200      	movs	r2, #0
 80135cc:	f104 0508 	add.w	r5, r4, #8
 80135d0:	4611      	mov	r1, r2
 80135d2:	4628      	mov	r0, r5
 80135d4:	f7ff ffbe 	bl	8013554 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 80135d8:	7c63      	ldrb	r3, [r4, #17]
 80135da:	b12b      	cbz	r3, 80135e8 <Display::Detect7Segment()+0x2e>
 80135dc:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 80135e0:	2112      	movs	r1, #18
 80135e2:	4628      	mov	r0, r5
 80135e4:	f7ff ffb6 	bl	8013554 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 80135e8:	bd38      	pop	{r3, r4, r5, pc}

080135ea <Display::Detect(display::Type)>:
 80135ea:	2902      	cmp	r1, #2
 80135ec:	b538      	push	{r3, r4, r5, lr}
 80135ee:	4604      	mov	r4, r0
 80135f0:	d014      	beq.n	801361c <Display::Detect(display::Type)+0x32>
 80135f2:	2904      	cmp	r1, #4
 80135f4:	d01b      	beq.n	801362e <Display::Detect(display::Type)+0x44>
 80135f6:	69a0      	ldr	r0, [r4, #24]
 80135f8:	b168      	cbz	r0, 8013616 <Display::Detect(display::Type)+0x2c>
 80135fa:	6803      	ldr	r3, [r0, #0]
 80135fc:	689b      	ldr	r3, [r3, #8]
 80135fe:	4798      	blx	r3
 8013600:	4603      	mov	r3, r0
 8013602:	69a0      	ldr	r0, [r4, #24]
 8013604:	b9ab      	cbnz	r3, 8013632 <Display::Detect(display::Type)+0x48>
 8013606:	b110      	cbz	r0, 801360e <Display::Detect(display::Type)+0x24>
 8013608:	6803      	ldr	r3, [r0, #0]
 801360a:	685b      	ldr	r3, [r3, #4]
 801360c:	4798      	blx	r3
 801360e:	2300      	movs	r3, #0
 8013610:	61a3      	str	r3, [r4, #24]
 8013612:	2304      	movs	r3, #4
 8013614:	6023      	str	r3, [r4, #0]
 8013616:	2300      	movs	r3, #0
 8013618:	6163      	str	r3, [r4, #20]
 801361a:	e010      	b.n	801363e <Display::Detect(display::Type)+0x54>
 801361c:	2018      	movs	r0, #24
 801361e:	f000 fbcb 	bl	8013db8 <operator new(unsigned int)>
 8013622:	4605      	mov	r5, r0
 8013624:	2100      	movs	r1, #0
 8013626:	f000 f89d 	bl	8013764 <Ssd1306::Ssd1306(TOledPanel)>
 801362a:	61a5      	str	r5, [r4, #24]
 801362c:	e7e3      	b.n	80135f6 <Display::Detect(display::Type)+0xc>
 801362e:	6001      	str	r1, [r0, #0]
 8013630:	e7e1      	b.n	80135f6 <Display::Detect(display::Type)+0xc>
 8013632:	6803      	ldr	r3, [r0, #0]
 8013634:	68db      	ldr	r3, [r3, #12]
 8013636:	4798      	blx	r3
 8013638:	69a3      	ldr	r3, [r4, #24]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d0eb      	beq.n	8013616 <Display::Detect(display::Type)+0x2c>
 801363e:	bd38      	pop	{r3, r4, r5, pc}

08013640 <Display::Display()>:
 8013640:	2304      	movs	r3, #4
 8013642:	b510      	push	{r4, lr}
 8013644:	6003      	str	r3, [r0, #0]
 8013646:	4b0f      	ldr	r3, [pc, #60]	; (8013684 <Display::Display()+0x44>)
 8013648:	4604      	mov	r4, r0
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	4a0e      	ldr	r2, [pc, #56]	; (8013688 <Display::Display()+0x48>)
 801364e:	6043      	str	r3, [r0, #4]
 8013650:	2321      	movs	r3, #33	; 0x21
 8013652:	7203      	strb	r3, [r0, #8]
 8013654:	4b0d      	ldr	r3, [pc, #52]	; (801368c <Display::Display()+0x4c>)
 8013656:	2102      	movs	r1, #2
 8013658:	60c3      	str	r3, [r0, #12]
 801365a:	2300      	movs	r3, #0
 801365c:	e9c0 2305 	strd	r2, r3, [r0, #20]
 8013660:	8203      	strh	r3, [r0, #16]
 8013662:	4b0b      	ldr	r3, [pc, #44]	; (8013690 <Display::Display()+0x50>)
 8013664:	6018      	str	r0, [r3, #0]
 8013666:	f7ff ffc0 	bl	80135ea <Display::Detect(display::Type)>
 801366a:	4620      	mov	r0, r4
 801366c:	f7ff ffa5 	bl	80135ba <Display::Detect7Segment()>
 8013670:	69a3      	ldr	r3, [r4, #24]
 8013672:	b10b      	cbz	r3, 8013678 <Display::Display()+0x38>
 8013674:	f7f4 ff10 	bl	8008498 <display::timeout::gpio_init()>
 8013678:	69a0      	ldr	r0, [r4, #24]
 801367a:	f7ff ff61 	bl	8013540 <Display::PrintInfo() [clone .isra.0]>
 801367e:	4620      	mov	r0, r4
 8013680:	bd10      	pop	{r4, pc}
 8013682:	bf00      	nop
 8013684:	20009dd4 	ldrdcs	r9, [r0], -r4
 8013688:	000493e0 	andeq	r9, r4, r0, ror #7
 801368c:	00061a80 	andeq	r1, r6, r0, lsl #21
 8013690:	20009cd0 	ldrdcs	r9, [r0], -r0

08013694 <Ssd1306::~Ssd1306()>:
 8013694:	4770      	bx	lr

08013696 <Ssd1306::SetCursor(unsigned int)>:
 8013696:	4770      	bx	lr

08013698 <Ssd1306::PrintInfo()>:
 8013698:	b410      	push	{r4}
 801369a:	4906      	ldr	r1, [pc, #24]	; (80136b4 <Ssd1306::PrintInfo()+0x1c>)
 801369c:	7c44      	ldrb	r4, [r0, #17]
 801369e:	7903      	ldrb	r3, [r0, #4]
 80136a0:	7942      	ldrb	r2, [r0, #5]
 80136a2:	4805      	ldr	r0, [pc, #20]	; (80136b8 <Ssd1306::PrintInfo()+0x20>)
 80136a4:	2c00      	cmp	r4, #0
 80136a6:	bf08      	it	eq
 80136a8:	4601      	moveq	r1, r0
 80136aa:	4804      	ldr	r0, [pc, #16]	; (80136bc <Ssd1306::PrintInfo()+0x24>)
 80136ac:	bc10      	pop	{r4}
 80136ae:	f7f5 bcbd 	b.w	800902c <printf>
 80136b2:	bf00      	nop
 80136b4:	08017ee9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r9, sl, fp, ip, sp, lr}
 80136b8:	08017ef0 	stmdaeq	r1, {r4, r5, r6, r7, r9, sl, fp, ip, sp, lr}
 80136bc:	08017ef8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r9, sl, fp, ip, sp, lr}

080136c0 <Ssd1306::~Ssd1306()>:
 80136c0:	b510      	push	{r4, lr}
 80136c2:	4604      	mov	r4, r0
 80136c4:	f000 fb74 	bl	8013db0 <operator delete(void*)>
 80136c8:	4620      	mov	r0, r4
 80136ca:	bd10      	pop	{r4, pc}

080136cc <HAL_I2C::Setup()>:
 80136cc:	b510      	push	{r4, lr}
 80136ce:	4604      	mov	r4, r0
 80136d0:	7800      	ldrb	r0, [r0, #0]
 80136d2:	f001 facb 	bl	8014c6c <gd32_i2c_set_address>
 80136d6:	6860      	ldr	r0, [r4, #4]
 80136d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80136dc:	f001 babe 	b.w	8014c5c <gd32_i2c_set_baudrate>

080136e0 <Ssd1306::PutChar(int)>:
 80136e0:	b510      	push	{r4, lr}
 80136e2:	f1a1 0420 	sub.w	r4, r1, #32
 80136e6:	2c5f      	cmp	r4, #95	; 0x5f
 80136e8:	bf88      	it	hi
 80136ea:	2400      	movhi	r4, #0
 80136ec:	3008      	adds	r0, #8
 80136ee:	f7ff ffed 	bl	80136cc <HAL_I2C::Setup()>
 80136f2:	4804      	ldr	r0, [pc, #16]	; (8013704 <Ssd1306::PutChar(int)+0x24>)
 80136f4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80136f8:	4420      	add	r0, r4
 80136fa:	2107      	movs	r1, #7
 80136fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013700:	f001 baba 	b.w	8014c78 <gd32_i2c_write>
 8013704:	08017f0c 	stmdaeq	r1, {r2, r3, r8, r9, sl, fp, ip, sp, lr}

08013708 <Ssd1306::PutString(char const*)>:
 8013708:	b538      	push	{r3, r4, r5, lr}
 801370a:	4605      	mov	r5, r0
 801370c:	1e4c      	subs	r4, r1, #1
 801370e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8013712:	b901      	cbnz	r1, 8013716 <Ssd1306::PutString(char const*)+0xe>
 8013714:	bd38      	pop	{r3, r4, r5, pc}
 8013716:	4628      	mov	r0, r5
 8013718:	f7ff ffe2 	bl	80136e0 <Ssd1306::PutChar(int)>
 801371c:	e7f7      	b.n	801370e <Ssd1306::PutString(char const*)+0x6>

0801371e <Ssd1306::Text(char const*, unsigned int)>:
 801371e:	b570      	push	{r4, r5, r6, lr}
 8013720:	7903      	ldrb	r3, [r0, #4]
 8013722:	4605      	mov	r5, r0
 8013724:	460c      	mov	r4, r1
 8013726:	4293      	cmp	r3, r2
 8013728:	bf94      	ite	ls
 801372a:	18ce      	addls	r6, r1, r3
 801372c:	188e      	addhi	r6, r1, r2
 801372e:	42b4      	cmp	r4, r6
 8013730:	d100      	bne.n	8013734 <Ssd1306::Text(char const*, unsigned int)+0x16>
 8013732:	bd70      	pop	{r4, r5, r6, pc}
 8013734:	4628      	mov	r0, r5
 8013736:	f814 1b01 	ldrb.w	r1, [r4], #1
 801373a:	f7ff ffd1 	bl	80136e0 <Ssd1306::PutChar(int)>
 801373e:	e7f6      	b.n	801372e <Ssd1306::Text(char const*, unsigned int)+0x10>

08013740 <Ssd1306::InitMembers()>:
 8013740:	7c03      	ldrb	r3, [r0, #16]
 8013742:	b14b      	cbz	r3, 8013758 <Ssd1306::InitMembers()+0x18>
 8013744:	3b01      	subs	r3, #1
 8013746:	2b01      	cmp	r3, #1
 8013748:	d909      	bls.n	801375e <Ssd1306::InitMembers()+0x1e>
 801374a:	2308      	movs	r3, #8
 801374c:	2204      	movs	r2, #4
 801374e:	2115      	movs	r1, #21
 8013750:	7143      	strb	r3, [r0, #5]
 8013752:	7101      	strb	r1, [r0, #4]
 8013754:	6142      	str	r2, [r0, #20]
 8013756:	4770      	bx	lr
 8013758:	2308      	movs	r3, #8
 801375a:	461a      	mov	r2, r3
 801375c:	e7f7      	b.n	801374e <Ssd1306::InitMembers()+0xe>
 801375e:	2304      	movs	r3, #4
 8013760:	e7fb      	b.n	801375a <Ssd1306::InitMembers()+0x1a>
	...

08013764 <Ssd1306::Ssd1306(TOledPanel)>:
 8013764:	4a08      	ldr	r2, [pc, #32]	; (8013788 <Ssd1306::Ssd1306(TOledPanel)+0x24>)
 8013766:	b508      	push	{r3, lr}
 8013768:	6002      	str	r2, [r0, #0]
 801376a:	227f      	movs	r2, #127	; 0x7f
 801376c:	80c2      	strh	r2, [r0, #6]
 801376e:	223c      	movs	r2, #60	; 0x3c
 8013770:	7202      	strb	r2, [r0, #8]
 8013772:	4a06      	ldr	r2, [pc, #24]	; (801378c <Ssd1306::Ssd1306(TOledPanel)+0x28>)
 8013774:	7401      	strb	r1, [r0, #16]
 8013776:	60c2      	str	r2, [r0, #12]
 8013778:	2200      	movs	r2, #0
 801377a:	7442      	strb	r2, [r0, #17]
 801377c:	4a04      	ldr	r2, [pc, #16]	; (8013790 <Ssd1306::Ssd1306(TOledPanel)+0x2c>)
 801377e:	6010      	str	r0, [r2, #0]
 8013780:	f7ff ffde 	bl	8013740 <Ssd1306::InitMembers()>
 8013784:	bd08      	pop	{r3, pc}
 8013786:	bf00      	nop
 8013788:	080181e4 	stmdaeq	r1, {r2, r5, r6, r7, r8, pc}
 801378c:	00061a80 	andeq	r1, r6, r0, lsl #21
 8013790:	20009d5c 	andcs	r9, r0, ip, asr sp

08013794 <Ssd1306::SendCommand(unsigned char)>:
 8013794:	2300      	movs	r3, #0
 8013796:	b507      	push	{r0, r1, r2, lr}
 8013798:	3008      	adds	r0, #8
 801379a:	f88d 3004 	strb.w	r3, [sp, #4]
 801379e:	f88d 1005 	strb.w	r1, [sp, #5]
 80137a2:	f7ff ff93 	bl	80136cc <HAL_I2C::Setup()>
 80137a6:	2102      	movs	r1, #2
 80137a8:	a801      	add	r0, sp, #4
 80137aa:	f001 fa65 	bl	8014c78 <gd32_i2c_write>
 80137ae:	b003      	add	sp, #12
 80137b0:	f85d fb04 	ldr.w	pc, [sp], #4

080137b4 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>:
 80137b4:	2914      	cmp	r1, #20
 80137b6:	b570      	push	{r4, r5, r6, lr}
 80137b8:	4605      	mov	r5, r0
 80137ba:	4616      	mov	r6, r2
 80137bc:	d81c      	bhi.n	80137f8 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 80137be:	7943      	ldrb	r3, [r0, #5]
 80137c0:	4293      	cmp	r3, r2
 80137c2:	d919      	bls.n	80137f8 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 80137c4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80137c8:	7c43      	ldrb	r3, [r0, #17]
 80137ca:	004c      	lsls	r4, r1, #1
 80137cc:	b2e4      	uxtb	r4, r4
 80137ce:	b10b      	cbz	r3, 80137d4 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x20>
 80137d0:	3404      	adds	r4, #4
 80137d2:	b2e4      	uxtb	r4, r4
 80137d4:	4628      	mov	r0, r5
 80137d6:	f004 010e 	and.w	r1, r4, #14
 80137da:	f7ff ffdb 	bl	8013794 <Ssd1306::SendCommand(unsigned char)>
 80137de:	0921      	lsrs	r1, r4, #4
 80137e0:	4628      	mov	r0, r5
 80137e2:	f041 0110 	orr.w	r1, r1, #16
 80137e6:	f7ff ffd5 	bl	8013794 <Ssd1306::SendCommand(unsigned char)>
 80137ea:	4628      	mov	r0, r5
 80137ec:	f046 01b0 	orr.w	r1, r6, #176	; 0xb0
 80137f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80137f4:	f7ff bfce 	b.w	8013794 <Ssd1306::SendCommand(unsigned char)>
 80137f8:	bd70      	pop	{r4, r5, r6, pc}

080137fa <Ssd1306::TextLine(unsigned char, char const*, unsigned int)>:
 80137fa:	b570      	push	{r4, r5, r6, lr}
 80137fc:	461e      	mov	r6, r3
 80137fe:	7943      	ldrb	r3, [r0, #5]
 8013800:	4604      	mov	r4, r0
 8013802:	428b      	cmp	r3, r1
 8013804:	4615      	mov	r5, r2
 8013806:	d30b      	bcc.n	8013820 <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x26>
 8013808:	3901      	subs	r1, #1
 801380a:	b2ca      	uxtb	r2, r1
 801380c:	2100      	movs	r1, #0
 801380e:	f7ff ffd1 	bl	80137b4 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8013812:	4632      	mov	r2, r6
 8013814:	4629      	mov	r1, r5
 8013816:	4620      	mov	r0, r4
 8013818:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801381c:	f7ff bf7f 	b.w	801371e <Ssd1306::Text(char const*, unsigned int)>
 8013820:	bd70      	pop	{r4, r5, r6, pc}
	...

08013824 <Ssd1306::ClearLine(unsigned char)>:
 8013824:	b538      	push	{r3, r4, r5, lr}
 8013826:	7943      	ldrb	r3, [r0, #5]
 8013828:	4605      	mov	r5, r0
 801382a:	428b      	cmp	r3, r1
 801382c:	d314      	bcc.n	8013858 <Ssd1306::ClearLine(unsigned char)+0x34>
 801382e:	3901      	subs	r1, #1
 8013830:	b2cc      	uxtb	r4, r1
 8013832:	4622      	mov	r2, r4
 8013834:	2100      	movs	r1, #0
 8013836:	f7ff ffbd 	bl	80137b4 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 801383a:	f105 0008 	add.w	r0, r5, #8
 801383e:	f7ff ff45 	bl	80136cc <HAL_I2C::Setup()>
 8013842:	2181      	movs	r1, #129	; 0x81
 8013844:	4805      	ldr	r0, [pc, #20]	; (801385c <Ssd1306::ClearLine(unsigned char)+0x38>)
 8013846:	f001 fa17 	bl	8014c78 <gd32_i2c_write>
 801384a:	4622      	mov	r2, r4
 801384c:	4628      	mov	r0, r5
 801384e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013852:	2100      	movs	r1, #0
 8013854:	f7ff bfae 	b.w	80137b4 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8013858:	bd38      	pop	{r3, r4, r5, pc}
 801385a:	bf00      	nop
 801385c:	20009cd4 	ldrdcs	r9, [r0], -r4

08013860 <Ssd1306::SetSleep(bool)>:
 8013860:	b111      	cbz	r1, 8013868 <Ssd1306::SetSleep(bool)+0x8>
 8013862:	21ae      	movs	r1, #174	; 0xae
 8013864:	f7ff bf96 	b.w	8013794 <Ssd1306::SendCommand(unsigned char)>
 8013868:	21af      	movs	r1, #175	; 0xaf
 801386a:	e7fb      	b.n	8013864 <Ssd1306::SetSleep(bool)+0x4>

0801386c <Ssd1306::SetContrast(unsigned char)>:
 801386c:	b538      	push	{r3, r4, r5, lr}
 801386e:	4604      	mov	r4, r0
 8013870:	460d      	mov	r5, r1
 8013872:	7181      	strb	r1, [r0, #6]
 8013874:	2181      	movs	r1, #129	; 0x81
 8013876:	f7ff ff8d 	bl	8013794 <Ssd1306::SendCommand(unsigned char)>
 801387a:	4629      	mov	r1, r5
 801387c:	4620      	mov	r0, r4
 801387e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013882:	f7ff bf87 	b.w	8013794 <Ssd1306::SendCommand(unsigned char)>

08013886 <Ssd1306::SetFlipVertically(bool)>:
 8013886:	b510      	push	{r4, lr}
 8013888:	4604      	mov	r4, r0
 801388a:	71c1      	strb	r1, [r0, #7]
 801388c:	b141      	cbz	r1, 80138a0 <Ssd1306::SetFlipVertically(bool)+0x1a>
 801388e:	21c0      	movs	r1, #192	; 0xc0
 8013890:	f7ff ff80 	bl	8013794 <Ssd1306::SendCommand(unsigned char)>
 8013894:	21a0      	movs	r1, #160	; 0xa0
 8013896:	4620      	mov	r0, r4
 8013898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801389c:	f7ff bf7a 	b.w	8013794 <Ssd1306::SendCommand(unsigned char)>
 80138a0:	21c8      	movs	r1, #200	; 0xc8
 80138a2:	f7ff ff77 	bl	8013794 <Ssd1306::SendCommand(unsigned char)>
 80138a6:	21a1      	movs	r1, #161	; 0xa1
 80138a8:	e7f5      	b.n	8013896 <Ssd1306::SetFlipVertically(bool)+0x10>
	...

080138ac <Ssd1306::CheckSH1106()>:
 80138ac:	b530      	push	{r4, r5, lr}
 80138ae:	4604      	mov	r4, r0
 80138b0:	b087      	sub	sp, #28
 80138b2:	2100      	movs	r1, #0
 80138b4:	f7ff ff6e 	bl	8013794 <Ssd1306::SendCommand(unsigned char)>
 80138b8:	2190      	movs	r1, #144	; 0x90
 80138ba:	4620      	mov	r0, r4
 80138bc:	f7ff ff6a 	bl	8013794 <Ssd1306::SendCommand(unsigned char)>
 80138c0:	21b0      	movs	r1, #176	; 0xb0
 80138c2:	4620      	mov	r0, r4
 80138c4:	f7ff ff66 	bl	8013794 <Ssd1306::SendCommand(unsigned char)>
 80138c8:	4b22      	ldr	r3, [pc, #136]	; (8013954 <Ssd1306::CheckSH1106()+0xa8>)
 80138ca:	f104 0508 	add.w	r5, r4, #8
 80138ce:	6818      	ldr	r0, [r3, #0]
 80138d0:	791b      	ldrb	r3, [r3, #4]
 80138d2:	9002      	str	r0, [sp, #8]
 80138d4:	4628      	mov	r0, r5
 80138d6:	f88d 300c 	strb.w	r3, [sp, #12]
 80138da:	f7ff fef7 	bl	80136cc <HAL_I2C::Setup()>
 80138de:	2105      	movs	r1, #5
 80138e0:	a802      	add	r0, sp, #8
 80138e2:	f001 f9c9 	bl	8014c78 <gd32_i2c_write>
 80138e6:	2100      	movs	r1, #0
 80138e8:	4620      	mov	r0, r4
 80138ea:	f7ff ff53 	bl	8013794 <Ssd1306::SendCommand(unsigned char)>
 80138ee:	2190      	movs	r1, #144	; 0x90
 80138f0:	4620      	mov	r0, r4
 80138f2:	f7ff ff4f 	bl	8013794 <Ssd1306::SendCommand(unsigned char)>
 80138f6:	21b0      	movs	r1, #176	; 0xb0
 80138f8:	4620      	mov	r0, r4
 80138fa:	f7ff ff4b 	bl	8013794 <Ssd1306::SendCommand(unsigned char)>
 80138fe:	2300      	movs	r3, #0
 8013900:	9304      	str	r3, [sp, #16]
 8013902:	f88d 3014 	strb.w	r3, [sp, #20]
 8013906:	2340      	movs	r3, #64	; 0x40
 8013908:	4628      	mov	r0, r5
 801390a:	f88d 3007 	strb.w	r3, [sp, #7]
 801390e:	f7ff fedd 	bl	80136cc <HAL_I2C::Setup()>
 8013912:	2101      	movs	r1, #1
 8013914:	f10d 0007 	add.w	r0, sp, #7
 8013918:	f001 f9ae 	bl	8014c78 <gd32_i2c_write>
 801391c:	4628      	mov	r0, r5
 801391e:	f7ff fed5 	bl	80136cc <HAL_I2C::Setup()>
 8013922:	2105      	movs	r1, #5
 8013924:	a804      	add	r0, sp, #16
 8013926:	f001 fa0d 	bl	8014d44 <gd32_i2c_read>
 801392a:	2004      	movs	r0, #4
 801392c:	aa02      	add	r2, sp, #8
 801392e:	a904      	add	r1, sp, #16
 8013930:	3801      	subs	r0, #1
 8013932:	d201      	bcs.n	8013938 <Ssd1306::CheckSH1106()+0x8c>
 8013934:	2300      	movs	r3, #0
 8013936:	e006      	b.n	8013946 <Ssd1306::CheckSH1106()+0x9a>
 8013938:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801393c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8013940:	42ab      	cmp	r3, r5
 8013942:	d0f5      	beq.n	8013930 <Ssd1306::CheckSH1106()+0x84>
 8013944:	1b5b      	subs	r3, r3, r5
 8013946:	fab3 f383 	clz	r3, r3
 801394a:	095b      	lsrs	r3, r3, #5
 801394c:	7463      	strb	r3, [r4, #17]
 801394e:	b007      	add	sp, #28
 8013950:	bd30      	pop	{r4, r5, pc}
 8013952:	bf00      	nop
 8013954:	08017f04 	stmdaeq	r1, {r2, r8, r9, sl, fp, ip, sp, lr}

08013958 <Ssd1306::Cls()>:
 8013958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801395c:	4604      	mov	r4, r0
 801395e:	2600      	movs	r6, #0
 8013960:	7c45      	ldrb	r5, [r0, #17]
 8013962:	00ad      	lsls	r5, r5, #2
 8013964:	b2ed      	uxtb	r5, r5
 8013966:	f1a5 077f 	sub.w	r7, r5, #127	; 0x7f
 801396a:	f045 0810 	orr.w	r8, r5, #16
 801396e:	b2ff      	uxtb	r7, r7
 8013970:	6963      	ldr	r3, [r4, #20]
 8013972:	4629      	mov	r1, r5
 8013974:	42b3      	cmp	r3, r6
 8013976:	4620      	mov	r0, r4
 8013978:	d80b      	bhi.n	8013992 <Ssd1306::Cls()+0x3a>
 801397a:	f7ff ff0b 	bl	8013794 <Ssd1306::SendCommand(unsigned char)>
 801397e:	4641      	mov	r1, r8
 8013980:	4620      	mov	r0, r4
 8013982:	f7ff ff07 	bl	8013794 <Ssd1306::SendCommand(unsigned char)>
 8013986:	4620      	mov	r0, r4
 8013988:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801398c:	21b0      	movs	r1, #176	; 0xb0
 801398e:	f7ff bf01 	b.w	8013794 <Ssd1306::SendCommand(unsigned char)>
 8013992:	f7ff feff 	bl	8013794 <Ssd1306::SendCommand(unsigned char)>
 8013996:	4641      	mov	r1, r8
 8013998:	4620      	mov	r0, r4
 801399a:	f7ff fefb 	bl	8013794 <Ssd1306::SendCommand(unsigned char)>
 801399e:	f066 014f 	orn	r1, r6, #79	; 0x4f
 80139a2:	4620      	mov	r0, r4
 80139a4:	b2c9      	uxtb	r1, r1
 80139a6:	f7ff fef5 	bl	8013794 <Ssd1306::SendCommand(unsigned char)>
 80139aa:	7c23      	ldrb	r3, [r4, #16]
 80139ac:	b123      	cbz	r3, 80139b8 <Ssd1306::Cls()+0x60>
 80139ae:	3b01      	subs	r3, #1
 80139b0:	2b01      	cmp	r3, #1
 80139b2:	d901      	bls.n	80139b8 <Ssd1306::Cls()+0x60>
 80139b4:	3601      	adds	r6, #1
 80139b6:	e7db      	b.n	8013970 <Ssd1306::Cls()+0x18>
 80139b8:	f104 0008 	add.w	r0, r4, #8
 80139bc:	f7ff fe86 	bl	80136cc <HAL_I2C::Setup()>
 80139c0:	4639      	mov	r1, r7
 80139c2:	4802      	ldr	r0, [pc, #8]	; (80139cc <Ssd1306::Cls()+0x74>)
 80139c4:	f001 f958 	bl	8014c78 <gd32_i2c_write>
 80139c8:	e7f4      	b.n	80139b4 <Ssd1306::Cls()+0x5c>
 80139ca:	bf00      	nop
 80139cc:	20009cd4 	ldrdcs	r9, [r0], -r4

080139d0 <Ssd1306::Start()>:
 80139d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80139d2:	7a04      	ldrb	r4, [r0, #8]
 80139d4:	68c6      	ldr	r6, [r0, #12]
 80139d6:	4605      	mov	r5, r0
 80139d8:	4620      	mov	r0, r4
 80139da:	f001 f947 	bl	8014c6c <gd32_i2c_set_address>
 80139de:	4630      	mov	r0, r6
 80139e0:	f001 f93c 	bl	8014c5c <gd32_i2c_set_baudrate>
 80139e4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80139e8:	2b07      	cmp	r3, #7
 80139ea:	d902      	bls.n	80139f2 <Ssd1306::Start()+0x22>
 80139ec:	3c50      	subs	r4, #80	; 0x50
 80139ee:	2c0f      	cmp	r4, #15
 80139f0:	d80f      	bhi.n	8013a12 <Ssd1306::Start()+0x42>
 80139f2:	2101      	movs	r1, #1
 80139f4:	f10d 0007 	add.w	r0, sp, #7
 80139f8:	f001 f9a4 	bl	8014d44 <gd32_i2c_read>
 80139fc:	fab0 f480 	clz	r4, r0
 8013a00:	0964      	lsrs	r4, r4, #5
 8013a02:	b35c      	cbz	r4, 8013a5c <Ssd1306::Start()+0x8c>
 8013a04:	7c2e      	ldrb	r6, [r5, #16]
 8013a06:	b14e      	cbz	r6, 8013a1c <Ssd1306::Start()+0x4c>
 8013a08:	3e01      	subs	r6, #1
 8013a0a:	2e01      	cmp	r6, #1
 8013a0c:	d929      	bls.n	8013a62 <Ssd1306::Start()+0x92>
 8013a0e:	2400      	movs	r4, #0
 8013a10:	e024      	b.n	8013a5c <Ssd1306::Start()+0x8c>
 8013a12:	2100      	movs	r1, #0
 8013a14:	4608      	mov	r0, r1
 8013a16:	f001 f92f 	bl	8014c78 <gd32_i2c_write>
 8013a1a:	e7ef      	b.n	80139fc <Ssd1306::Start()+0x2c>
 8013a1c:	4f16      	ldr	r7, [pc, #88]	; (8013a78 <Ssd1306::Start()+0xa8>)
 8013a1e:	4628      	mov	r0, r5
 8013a20:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013a24:	3601      	adds	r6, #1
 8013a26:	f7ff feb5 	bl	8013794 <Ssd1306::SendCommand(unsigned char)>
 8013a2a:	2e18      	cmp	r6, #24
 8013a2c:	d1f7      	bne.n	8013a1e <Ssd1306::Start()+0x4e>
 8013a2e:	2300      	movs	r3, #0
 8013a30:	4a12      	ldr	r2, [pc, #72]	; (8013a7c <Ssd1306::Start()+0xac>)
 8013a32:	4618      	mov	r0, r3
 8013a34:	4611      	mov	r1, r2
 8013a36:	3301      	adds	r3, #1
 8013a38:	2b86      	cmp	r3, #134	; 0x86
 8013a3a:	f802 0b01 	strb.w	r0, [r2], #1
 8013a3e:	d1fa      	bne.n	8013a36 <Ssd1306::Start()+0x66>
 8013a40:	2340      	movs	r3, #64	; 0x40
 8013a42:	4628      	mov	r0, r5
 8013a44:	700b      	strb	r3, [r1, #0]
 8013a46:	f7ff ff31 	bl	80138ac <Ssd1306::CheckSH1106()>
 8013a4a:	4628      	mov	r0, r5
 8013a4c:	f7ff ff84 	bl	8013958 <Ssd1306::Cls()>
 8013a50:	21af      	movs	r1, #175	; 0xaf
 8013a52:	4628      	mov	r0, r5
 8013a54:	f7ff fe9e 	bl	8013794 <Ssd1306::SendCommand(unsigned char)>
 8013a58:	2301      	movs	r3, #1
 8013a5a:	71eb      	strb	r3, [r5, #7]
 8013a5c:	4620      	mov	r0, r4
 8013a5e:	b003      	add	sp, #12
 8013a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a62:	2600      	movs	r6, #0
 8013a64:	4f06      	ldr	r7, [pc, #24]	; (8013a80 <Ssd1306::Start()+0xb0>)
 8013a66:	4628      	mov	r0, r5
 8013a68:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013a6c:	3601      	adds	r6, #1
 8013a6e:	f7ff fe91 	bl	8013794 <Ssd1306::SendCommand(unsigned char)>
 8013a72:	2e18      	cmp	r6, #24
 8013a74:	d1f7      	bne.n	8013a66 <Ssd1306::Start()+0x96>
 8013a76:	e7da      	b.n	8013a2e <Ssd1306::Start()+0x5e>
 8013a78:	080181c4 	stmdaeq	r1, {r2, r6, r7, r8, pc}
 8013a7c:	20009cd4 	ldrdcs	r9, [r0], -r4
 8013a80:	080181ac 	stmdaeq	r1, {r2, r3, r5, r7, r8, pc}

08013a84 <console_putc>:
 8013a84:	f000 bb68 	b.w	8014158 <uart0_putc>

08013a88 <console_puts>:
 8013a88:	f000 bb86 	b.w	8014198 <uart0_puts>

08013a8c <console_set_fg_color>:
 8013a8c:	2807      	cmp	r0, #7
 8013a8e:	d810      	bhi.n	8013ab2 <console_set_fg_color+0x26>
 8013a90:	e8df f000 	tbb	[pc, r0]
 8013a94:	0b090704 	bleq	82556ac <__exidx_end+0x23d394>
 8013a98:	0d0f0f0f 	stceq	15, cr0, [pc, #-60]	; 8013a64 <Ssd1306::Start()+0x94>
 8013a9c:	4806      	ldr	r0, [pc, #24]	; (8013ab8 <console_set_fg_color+0x2c>)
 8013a9e:	f000 bb7b 	b.w	8014198 <uart0_puts>
 8013aa2:	4806      	ldr	r0, [pc, #24]	; (8013abc <console_set_fg_color+0x30>)
 8013aa4:	e7fb      	b.n	8013a9e <console_set_fg_color+0x12>
 8013aa6:	4806      	ldr	r0, [pc, #24]	; (8013ac0 <console_set_fg_color+0x34>)
 8013aa8:	e7f9      	b.n	8013a9e <console_set_fg_color+0x12>
 8013aaa:	4806      	ldr	r0, [pc, #24]	; (8013ac4 <console_set_fg_color+0x38>)
 8013aac:	e7f7      	b.n	8013a9e <console_set_fg_color+0x12>
 8013aae:	4806      	ldr	r0, [pc, #24]	; (8013ac8 <console_set_fg_color+0x3c>)
 8013ab0:	e7f5      	b.n	8013a9e <console_set_fg_color+0x12>
 8013ab2:	4806      	ldr	r0, [pc, #24]	; (8013acc <console_set_fg_color+0x40>)
 8013ab4:	e7f3      	b.n	8013a9e <console_set_fg_color+0x12>
 8013ab6:	bf00      	nop
 8013ab8:	08018222 	stmdaeq	r1, {r1, r5, r9, pc}
 8013abc:	08018228 	stmdaeq	r1, {r3, r5, r9, pc}
 8013ac0:	0801822e 	stmdaeq	r1, {r1, r2, r3, r5, r9, pc}
 8013ac4:	08018234 	stmdaeq	r1, {r2, r4, r5, r9, pc}
 8013ac8:	080160ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, sp, lr}
 8013acc:	0801823a 	stmdaeq	r1, {r1, r3, r4, r5, r9, pc}

08013ad0 <console_error>:
 8013ad0:	b510      	push	{r4, lr}
 8013ad2:	4604      	mov	r4, r0
 8013ad4:	4805      	ldr	r0, [pc, #20]	; (8013aec <console_error+0x1c>)
 8013ad6:	f000 fb5f 	bl	8014198 <uart0_puts>
 8013ada:	4620      	mov	r0, r4
 8013adc:	f000 fb5c 	bl	8014198 <uart0_puts>
 8013ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ae4:	4802      	ldr	r0, [pc, #8]	; (8013af0 <console_error+0x20>)
 8013ae6:	f000 bb57 	b.w	8014198 <uart0_puts>
 8013aea:	bf00      	nop
 8013aec:	08018228 	stmdaeq	r1, {r3, r5, r9, pc}
 8013af0:	080160ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, sp, lr}

08013af4 <console_status>:
 8013af4:	b510      	push	{r4, lr}
 8013af6:	460c      	mov	r4, r1
 8013af8:	b280      	uxth	r0, r0
 8013afa:	f7ff ffc7 	bl	8013a8c <console_set_fg_color>
 8013afe:	4807      	ldr	r0, [pc, #28]	; (8013b1c <console_status+0x28>)
 8013b00:	f000 fb4a 	bl	8014198 <uart0_puts>
 8013b04:	4620      	mov	r0, r4
 8013b06:	f000 fb47 	bl	8014198 <uart0_puts>
 8013b0a:	200a      	movs	r0, #10
 8013b0c:	f000 fb24 	bl	8014158 <uart0_putc>
 8013b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b14:	4802      	ldr	r0, [pc, #8]	; (8013b20 <console_status+0x2c>)
 8013b16:	f000 bb3f 	b.w	8014198 <uart0_puts>
 8013b1a:	bf00      	nop
 8013b1c:	0801821c 	stmdaeq	r1, {r2, r3, r4, r9, pc}
 8013b20:	080160ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, sp, lr}

08013b24 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
 8013b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b28:	4617      	mov	r7, r2
 8013b2a:	461e      	mov	r6, r3
 8013b2c:	4d14      	ldr	r5, [pc, #80]	; (8013b80 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>)
 8013b2e:	4b15      	ldr	r3, [pc, #84]	; (8013b84 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x60>)
 8013b30:	b086      	sub	sp, #24
 8013b32:	6018      	str	r0, [r3, #0]
 8013b34:	4604      	mov	r4, r0
 8013b36:	f105 0803 	add.w	r8, r5, #3
 8013b3a:	2203      	movs	r2, #3
 8013b3c:	4628      	mov	r0, r5
 8013b3e:	f000 f9fa 	bl	8013f36 <memmove>
 8013b42:	4639      	mov	r1, r7
 8013b44:	220b      	movs	r2, #11
 8013b46:	4640      	mov	r0, r8
 8013b48:	f000 f9f5 	bl	8013f36 <memmove>
 8013b4c:	f105 030e 	add.w	r3, r5, #14
 8013b50:	4631      	mov	r1, r6
 8013b52:	2208      	movs	r2, #8
 8013b54:	4618      	mov	r0, r3
 8013b56:	f000 f9ee 	bl	8013f36 <memmove>
 8013b5a:	2308      	movs	r3, #8
 8013b5c:	e9cd 8303 	strd	r8, r3, [sp, #12]
 8013b60:	230b      	movs	r3, #11
 8013b62:	9302      	str	r3, [sp, #8]
 8013b64:	4b08      	ldr	r3, [pc, #32]	; (8013b88 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x64>)
 8013b66:	9005      	str	r0, [sp, #20]
 8013b68:	e9cd 5300 	strd	r5, r3, [sp]
 8013b6c:	213f      	movs	r1, #63	; 0x3f
 8013b6e:	2303      	movs	r3, #3
 8013b70:	4a06      	ldr	r2, [pc, #24]	; (8013b8c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x68>)
 8013b72:	4807      	ldr	r0, [pc, #28]	; (8013b90 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x6c>)
 8013b74:	f7f5 fa82 	bl	800907c <snprintf>
 8013b78:	4620      	mov	r0, r4
 8013b7a:	b006      	add	sp, #24
 8013b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b80:	20009d60 	andcs	r9, r0, r0, ror #26
 8013b84:	20009db8 			; <UNDEFINED> instruction: 0x20009db8
 8013b88:	0801678d 	stmdaeq	r1, {r0, r2, r3, r7, r8, r9, sl, sp, lr}
 8013b8c:	08018240 	stmdaeq	r1, {r6, r9, pc}
 8013b90:	20009d76 	andcs	r9, r0, r6, ror sp

08013b94 <FirmwareVersion::Print(char const*)>:
 8013b94:	b510      	push	{r4, lr}
 8013b96:	460c      	mov	r4, r1
 8013b98:	4804      	ldr	r0, [pc, #16]	; (8013bac <FirmwareVersion::Print(char const*)+0x18>)
 8013b9a:	f000 fa04 	bl	8013fa6 <puts>
 8013b9e:	b124      	cbz	r4, 8013baa <FirmwareVersion::Print(char const*)+0x16>
 8013ba0:	4620      	mov	r0, r4
 8013ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ba6:	f000 b9fe 	b.w	8013fa6 <puts>
 8013baa:	bd10      	pop	{r4, pc}
 8013bac:	20009d76 	andcs	r9, r0, r6, ror sp

08013bb0 <LedBlink::LedBlink()>:
 8013bb0:	b538      	push	{r3, r4, r5, lr}
 8013bb2:	2205      	movs	r2, #5
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	e9c0 3200 	strd	r3, r2, [r0]
 8013bba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8013bbe:	6083      	str	r3, [r0, #8]
 8013bc0:	e9c0 2303 	strd	r2, r3, [r0, #12]
 8013bc4:	6143      	str	r3, [r0, #20]
 8013bc6:	4b09      	ldr	r3, [pc, #36]	; (8013bec <LedBlink::LedBlink()+0x3c>)
 8013bc8:	4d09      	ldr	r5, [pc, #36]	; (8013bf0 <LedBlink::LedBlink()+0x40>)
 8013bca:	4604      	mov	r4, r0
 8013bcc:	6018      	str	r0, [r3, #0]
 8013bce:	f240 6004 	movw	r0, #1540	; 0x604
 8013bd2:	f000 fcdf 	bl	8014594 <rcu_periph_clock_enable>
 8013bd6:	4628      	mov	r0, r5
 8013bd8:	2301      	movs	r3, #1
 8013bda:	2203      	movs	r2, #3
 8013bdc:	2110      	movs	r1, #16
 8013bde:	f000 fc41 	bl	8014464 <gpio_init>
 8013be2:	2301      	movs	r3, #1
 8013be4:	4620      	mov	r0, r4
 8013be6:	616b      	str	r3, [r5, #20]
 8013be8:	bd38      	pop	{r3, r4, r5, pc}
 8013bea:	bf00      	nop
 8013bec:	20009dbc 			; <UNDEFINED> instruction: 0x20009dbc
 8013bf0:	40011000 	andmi	r1, r1, r0

08013bf4 <LedBlink::SetMode(ledblink::Mode)>:
 8013bf4:	6843      	ldr	r3, [r0, #4]
 8013bf6:	428b      	cmp	r3, r1
 8013bf8:	d02f      	beq.n	8013c5a <LedBlink::SetMode(ledblink::Mode)+0x66>
 8013bfa:	6041      	str	r1, [r0, #4]
 8013bfc:	2904      	cmp	r1, #4
 8013bfe:	d822      	bhi.n	8013c46 <LedBlink::SetMode(ledblink::Mode)+0x52>
 8013c00:	e8df f001 	tbb	[pc, r1]
 8013c04:	18120321 	ldmdane	r2, {r0, r5, r8, r9}
 8013c08:	23ff001d 	mvnscs	r0, #29
 8013c0c:	6003      	str	r3, [r0, #0]
 8013c0e:	2300      	movs	r3, #0
 8013c10:	2201      	movs	r2, #1
 8013c12:	60c3      	str	r3, [r0, #12]
 8013c14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013c18:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8013c1c:	611a      	str	r2, [r3, #16]
 8013c1e:	6880      	ldr	r0, [r0, #8]
 8013c20:	b1d8      	cbz	r0, 8013c5a <LedBlink::SetMode(ledblink::Mode)+0x66>
 8013c22:	6803      	ldr	r3, [r0, #0]
 8013c24:	689b      	ldr	r3, [r3, #8]
 8013c26:	4718      	bx	r3
 8013c28:	2301      	movs	r3, #1
 8013c2a:	6003      	str	r3, [r0, #0]
 8013c2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013c30:	60c3      	str	r3, [r0, #12]
 8013c32:	e7f4      	b.n	8013c1e <LedBlink::SetMode(ledblink::Mode)+0x2a>
 8013c34:	2303      	movs	r3, #3
 8013c36:	6003      	str	r3, [r0, #0]
 8013c38:	f240 134d 	movw	r3, #333	; 0x14d
 8013c3c:	e7f8      	b.n	8013c30 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 8013c3e:	2305      	movs	r3, #5
 8013c40:	6003      	str	r3, [r0, #0]
 8013c42:	23c8      	movs	r3, #200	; 0xc8
 8013c44:	e7f4      	b.n	8013c30 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 8013c46:	2300      	movs	r3, #0
 8013c48:	2201      	movs	r2, #1
 8013c4a:	6003      	str	r3, [r0, #0]
 8013c4c:	60c3      	str	r3, [r0, #12]
 8013c4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013c52:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8013c56:	615a      	str	r2, [r3, #20]
 8013c58:	e7e1      	b.n	8013c1e <LedBlink::SetMode(ledblink::Mode)+0x2a>
 8013c5a:	4770      	bx	lr

08013c5c <Hardware::Hardware()>:
 8013c5c:	b570      	push	{r4, r5, r6, lr}
 8013c5e:	2400      	movs	r4, #0
 8013c60:	4b24      	ldr	r3, [pc, #144]	; (8013cf4 <Hardware::Hardware()+0x98>)
 8013c62:	b090      	sub	sp, #64	; 0x40
 8013c64:	7004      	strb	r4, [r0, #0]
 8013c66:	6018      	str	r0, [r3, #0]
 8013c68:	4605      	mov	r5, r0
 8013c6a:	f7f3 fc49 	bl	8007500 <console_init>
 8013c6e:	f000 faa3 	bl	80141b8 <systick_config>
 8013c72:	f001 faaf 	bl	80151d4 <udelay_init()>
 8013c76:	f001 faab 	bl	80151d0 <micros_init()>
 8013c7a:	f240 701b 	movw	r0, #1819	; 0x71b
 8013c7e:	f000 fc89 	bl	8014594 <rcu_periph_clock_enable>
 8013c82:	f240 701c 	movw	r0, #1820	; 0x71c
 8013c86:	f000 fc85 	bl	8014594 <rcu_periph_clock_enable>
 8013c8a:	4e1b      	ldr	r6, [pc, #108]	; (8013cf8 <Hardware::Hardware()+0x9c>)
 8013c8c:	f000 fc7a 	bl	8014584 <pmu_backup_write_enable>
 8013c90:	4621      	mov	r1, r4
 8013c92:	2002      	movs	r0, #2
 8013c94:	f000 fb2e 	bl	80142f4 <bkp_data_write>
 8013c98:	f240 7004 	movw	r0, #1796	; 0x704
 8013c9c:	f000 fc7a 	bl	8014594 <rcu_periph_clock_enable>
 8013ca0:	4630      	mov	r0, r6
 8013ca2:	f000 fdcf 	bl	8014844 <timer_deinit>
 8013ca6:	236b      	movs	r3, #107	; 0x6b
 8013ca8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013cac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013cb0:	a903      	add	r1, sp, #12
 8013cb2:	4630      	mov	r0, r6
 8013cb4:	9305      	str	r3, [sp, #20]
 8013cb6:	f000 fe27 	bl	8014908 <timer_init>
 8013cba:	4630      	mov	r0, r6
 8013cbc:	f000 fe7c 	bl	80149b8 <timer_enable>
 8013cc0:	f000 ff3e 	bl	8014b40 <gd32_adc_init()>
 8013cc4:	220b      	movs	r2, #11
 8013cc6:	2309      	movs	r3, #9
 8013cc8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013ccc:	237a      	movs	r3, #122	; 0x7a
 8013cce:	a807      	add	r0, sp, #28
 8013cd0:	930c      	str	r3, [sp, #48]	; 0x30
 8013cd2:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8013cd6:	9407      	str	r4, [sp, #28]
 8013cd8:	940f      	str	r4, [sp, #60]	; 0x3c
 8013cda:	f000 f993 	bl	8014004 <mktime>
 8013cde:	4621      	mov	r1, r4
 8013ce0:	e9cd 0401 	strd	r0, r4, [sp, #4]
 8013ce4:	a801      	add	r0, sp, #4
 8013ce6:	f000 fa03 	bl	80140f0 <settimeofday>
 8013cea:	f000 ff83 	bl	8014bf4 <gd32_i2c_begin>
 8013cee:	4628      	mov	r0, r5
 8013cf0:	b010      	add	sp, #64	; 0x40
 8013cf2:	bd70      	pop	{r4, r5, r6, pc}
 8013cf4:	20009dc0 	andcs	r9, r0, r0, asr #27
 8013cf8:	40001000 	andmi	r1, r0, r0

08013cfc <Hardware::GetUuid(unsigned char*)>:
 8013cfc:	4a0c      	ldr	r2, [pc, #48]	; (8013d30 <Hardware::GetUuid(unsigned char*)+0x34>)
 8013cfe:	b084      	sub	sp, #16
 8013d00:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 8013d04:	9300      	str	r3, [sp, #0]
 8013d06:	f8d2 07ec 	ldr.w	r0, [r2, #2028]	; 0x7ec
 8013d0a:	9001      	str	r0, [sp, #4]
 8013d0c:	f8d2 27f0 	ldr.w	r2, [r2, #2032]	; 0x7f0
 8013d10:	4403      	add	r3, r0
 8013d12:	4413      	add	r3, r2
 8013d14:	9202      	str	r2, [sp, #8]
 8013d16:	466a      	mov	r2, sp
 8013d18:	9303      	str	r3, [sp, #12]
 8013d1a:	1e4b      	subs	r3, r1, #1
 8013d1c:	310f      	adds	r1, #15
 8013d1e:	428b      	cmp	r3, r1
 8013d20:	d101      	bne.n	8013d26 <Hardware::GetUuid(unsigned char*)+0x2a>
 8013d22:	b004      	add	sp, #16
 8013d24:	4770      	bx	lr
 8013d26:	f812 0b01 	ldrb.w	r0, [r2], #1
 8013d2a:	f803 0f01 	strb.w	r0, [r3, #1]!
 8013d2e:	e7f6      	b.n	8013d1e <Hardware::GetUuid(unsigned char*)+0x22>
 8013d30:	1ffff000 	svcne	0x00fff000

08013d34 <Hardware::SetTime(tm const*)>:
 8013d34:	2000      	movs	r0, #0
 8013d36:	4770      	bx	lr

08013d38 <Hardware::Reboot()>:
 8013d38:	b508      	push	{r3, lr}
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	4604      	mov	r4, r0
 8013d3e:	7003      	strb	r3, [r0, #0]
 8013d40:	2104      	movs	r1, #4
 8013d42:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013d46:	f000 fb63 	bl	8014410 <fwdgt_config>
 8013d4a:	4620      	mov	r0, r4
 8013d4c:	f7f4 fc64 	bl	8008618 <Hardware::RebootHandler()>
 8013d50:	2102      	movs	r1, #2
 8013d52:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013d56:	f000 fb5b 	bl	8014410 <fwdgt_config>
 8013d5a:	2801      	cmp	r0, #1
 8013d5c:	bf0c      	ite	eq
 8013d5e:	2301      	moveq	r3, #1
 8013d60:	2300      	movne	r3, #0
 8013d62:	7023      	strb	r3, [r4, #0]
 8013d64:	d101      	bne.n	8013d6a <Hardware::Reboot()+0x32>
 8013d66:	f000 fb43 	bl	80143f0 <fwdgt_enable>
 8013d6a:	2208      	movs	r2, #8
 8013d6c:	4b0d      	ldr	r3, [pc, #52]	; (8013da4 <Hardware::Reboot()+0x6c>)
 8013d6e:	2501      	movs	r5, #1
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	480d      	ldr	r0, [pc, #52]	; (8013da8 <Hardware::Reboot()+0x70>)
 8013d74:	601a      	str	r2, [r3, #0]
 8013d76:	227d      	movs	r2, #125	; 0x7d
 8013d78:	490c      	ldr	r1, [pc, #48]	; (8013dac <Hardware::Reboot()+0x74>)
 8013d7a:	60da      	str	r2, [r3, #12]
 8013d7c:	68dc      	ldr	r4, [r3, #12]
 8013d7e:	b904      	cbnz	r4, 8013d82 <Hardware::Reboot()+0x4a>
 8013d80:	e7fe      	b.n	8013d80 <Hardware::Reboot()+0x48>
 8013d82:	6802      	ldr	r2, [r0, #0]
 8013d84:	695e      	ldr	r6, [r3, #20]
 8013d86:	1b92      	subs	r2, r2, r6
 8013d88:	4294      	cmp	r4, r2
 8013d8a:	d8f8      	bhi.n	8013d7e <Hardware::Reboot()+0x46>
 8013d8c:	6802      	ldr	r2, [r0, #0]
 8013d8e:	615a      	str	r2, [r3, #20]
 8013d90:	691a      	ldr	r2, [r3, #16]
 8013d92:	2a01      	cmp	r2, #1
 8013d94:	f082 0401 	eor.w	r4, r2, #1
 8013d98:	611c      	str	r4, [r3, #16]
 8013d9a:	bf14      	ite	ne
 8013d9c:	610d      	strne	r5, [r1, #16]
 8013d9e:	614a      	streq	r2, [r1, #20]
 8013da0:	e7ec      	b.n	8013d7c <Hardware::Reboot()+0x44>
 8013da2:	bf00      	nop
 8013da4:	20009dbc 			; <UNDEFINED> instruction: 0x20009dbc
 8013da8:	20009dd4 	ldrdcs	r9, [r0], -r4
 8013dac:	40011000 	andmi	r1, r1, r0

08013db0 <operator delete(void*)>:
 8013db0:	f000 b890 	b.w	8013ed4 <free>

08013db4 <operator delete[](void*)>:
 8013db4:	f000 b88e 	b.w	8013ed4 <free>

08013db8 <operator new(unsigned int)>:
 8013db8:	f000 b842 	b.w	8013e40 <malloc>

08013dbc <operator new[](unsigned int)>:
 8013dbc:	f000 b840 	b.w	8013e40 <malloc>

08013dc0 <inet_aton>:
 8013dc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013dc2:	f04f 0c0a 	mov.w	ip, #10
 8013dc6:	2500      	movs	r5, #0
 8013dc8:	ae01      	add	r6, sp, #4
 8013dca:	4603      	mov	r3, r0
 8013dcc:	2200      	movs	r2, #0
 8013dce:	1d07      	adds	r7, r0, #4
 8013dd0:	e007      	b.n	8013de2 <inet_aton+0x22>
 8013dd2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8013dd6:	2b09      	cmp	r3, #9
 8013dd8:	d820      	bhi.n	8013e1c <inet_aton+0x5c>
 8013dda:	4603      	mov	r3, r0
 8013ddc:	fb0c 4202 	mla	r2, ip, r2, r4
 8013de0:	3a30      	subs	r2, #48	; 0x30
 8013de2:	4618      	mov	r0, r3
 8013de4:	f810 4b01 	ldrb.w	r4, [r0], #1
 8013de8:	2c2e      	cmp	r4, #46	; 0x2e
 8013dea:	d111      	bne.n	8013e10 <inet_aton+0x50>
 8013dec:	3501      	adds	r5, #1
 8013dee:	2d03      	cmp	r5, #3
 8013df0:	f806 2b01 	strb.w	r2, [r6], #1
 8013df4:	d1e9      	bne.n	8013dca <inet_aton+0xa>
 8013df6:	2200      	movs	r2, #0
 8013df8:	250a      	movs	r5, #10
 8013dfa:	1d1c      	adds	r4, r3, #4
 8013dfc:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8013e00:	f010 0fdf 	tst.w	r0, #223	; 0xdf
 8013e04:	d10d      	bne.n	8013e22 <inet_aton+0x62>
 8013e06:	f88d 2007 	strb.w	r2, [sp, #7]
 8013e0a:	b9b1      	cbnz	r1, 8013e3a <inet_aton+0x7a>
 8013e0c:	2001      	movs	r0, #1
 8013e0e:	e006      	b.n	8013e1e <inet_aton+0x5e>
 8013e10:	2c00      	cmp	r4, #0
 8013e12:	d0eb      	beq.n	8013dec <inet_aton+0x2c>
 8013e14:	2c0a      	cmp	r4, #10
 8013e16:	d0e9      	beq.n	8013dec <inet_aton+0x2c>
 8013e18:	42b8      	cmp	r0, r7
 8013e1a:	d1da      	bne.n	8013dd2 <inet_aton+0x12>
 8013e1c:	2000      	movs	r0, #0
 8013e1e:	b003      	add	sp, #12
 8013e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e22:	280a      	cmp	r0, #10
 8013e24:	d0ef      	beq.n	8013e06 <inet_aton+0x46>
 8013e26:	42a3      	cmp	r3, r4
 8013e28:	d0f8      	beq.n	8013e1c <inet_aton+0x5c>
 8013e2a:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
 8013e2e:	2e09      	cmp	r6, #9
 8013e30:	d8f4      	bhi.n	8013e1c <inet_aton+0x5c>
 8013e32:	fb05 0202 	mla	r2, r5, r2, r0
 8013e36:	3a30      	subs	r2, #48	; 0x30
 8013e38:	e7e0      	b.n	8013dfc <inet_aton+0x3c>
 8013e3a:	9b01      	ldr	r3, [sp, #4]
 8013e3c:	600b      	str	r3, [r1, #0]
 8013e3e:	e7e5      	b.n	8013e0c <inet_aton+0x4c>

08013e40 <malloc>:
 8013e40:	b538      	push	{r3, r4, r5, lr}
 8013e42:	4604      	mov	r4, r0
 8013e44:	4601      	mov	r1, r0
 8013e46:	481c      	ldr	r0, [pc, #112]	; (8013eb8 <malloc+0x78>)
 8013e48:	f7f5 f8f0 	bl	800902c <printf>
 8013e4c:	b17c      	cbz	r4, 8013e6e <malloc+0x2e>
 8013e4e:	4b1b      	ldr	r3, [pc, #108]	; (8013ebc <malloc+0x7c>)
 8013e50:	6818      	ldr	r0, [r3, #0]
 8013e52:	b978      	cbnz	r0, 8013e74 <malloc+0x34>
 8013e54:	4a1a      	ldr	r2, [pc, #104]	; (8013ec0 <malloc+0x80>)
 8013e56:	f104 031b 	add.w	r3, r4, #27
 8013e5a:	6811      	ldr	r1, [r2, #0]
 8013e5c:	4819      	ldr	r0, [pc, #100]	; (8013ec4 <malloc+0x84>)
 8013e5e:	f023 030f 	bic.w	r3, r3, #15
 8013e62:	440b      	add	r3, r1
 8013e64:	4283      	cmp	r3, r0
 8013e66:	d921      	bls.n	8013eac <malloc+0x6c>
 8013e68:	4817      	ldr	r0, [pc, #92]	; (8013ec8 <malloc+0x88>)
 8013e6a:	f7f5 f8df 	bl	800902c <printf>
 8013e6e:	2500      	movs	r5, #0
 8013e70:	4628      	mov	r0, r5
 8013e72:	bd38      	pop	{r3, r4, r5, pc}
 8013e74:	4284      	cmp	r4, r0
 8013e76:	d80a      	bhi.n	8013e8e <malloc+0x4e>
 8013e78:	685a      	ldr	r2, [r3, #4]
 8013e7a:	6899      	ldr	r1, [r3, #8]
 8013e7c:	3201      	adds	r2, #1
 8013e7e:	428a      	cmp	r2, r1
 8013e80:	605a      	str	r2, [r3, #4]
 8013e82:	d900      	bls.n	8013e86 <malloc+0x46>
 8013e84:	609a      	str	r2, [r3, #8]
 8013e86:	68d9      	ldr	r1, [r3, #12]
 8013e88:	b919      	cbnz	r1, 8013e92 <malloc+0x52>
 8013e8a:	4604      	mov	r4, r0
 8013e8c:	e7e2      	b.n	8013e54 <malloc+0x14>
 8013e8e:	3310      	adds	r3, #16
 8013e90:	e7de      	b.n	8013e50 <malloc+0x10>
 8013e92:	4604      	mov	r4, r0
 8013e94:	688a      	ldr	r2, [r1, #8]
 8013e96:	60da      	str	r2, [r3, #12]
 8013e98:	2300      	movs	r3, #0
 8013e9a:	f101 050c 	add.w	r5, r1, #12
 8013e9e:	608b      	str	r3, [r1, #8]
 8013ea0:	4622      	mov	r2, r4
 8013ea2:	462b      	mov	r3, r5
 8013ea4:	4809      	ldr	r0, [pc, #36]	; (8013ecc <malloc+0x8c>)
 8013ea6:	f7f5 f8c1 	bl	800902c <printf>
 8013eaa:	e7e1      	b.n	8013e70 <malloc+0x30>
 8013eac:	6013      	str	r3, [r2, #0]
 8013eae:	4b08      	ldr	r3, [pc, #32]	; (8013ed0 <malloc+0x90>)
 8013eb0:	e9c1 3400 	strd	r3, r4, [r1]
 8013eb4:	e7f0      	b.n	8013e98 <malloc+0x58>
 8013eb6:	bf00      	nop
 8013eb8:	08018264 	stmdaeq	r1, {r2, r5, r6, r9, pc}
 8013ebc:	20000010 	andcs	r0, r0, r0, lsl r0
 8013ec0:	2000000c 	andcs	r0, r0, ip
 8013ec4:	20016000 	andcs	r6, r1, r0
 8013ec8:	08018270 	stmdaeq	r1, {r4, r5, r6, r9, pc}
 8013ecc:	0801828c 	stmdaeq	r1, {r2, r3, r7, r9, pc}
 8013ed0:	424c4d43 	submi	r4, ip, #4288	; 0x10c0

08013ed4 <free>:
 8013ed4:	b538      	push	{r3, r4, r5, lr}
 8013ed6:	4604      	mov	r4, r0
 8013ed8:	b1c8      	cbz	r0, 8013f0e <free+0x3a>
 8013eda:	f1a0 050c 	sub.w	r5, r0, #12
 8013ede:	4602      	mov	r2, r0
 8013ee0:	4629      	mov	r1, r5
 8013ee2:	480c      	ldr	r0, [pc, #48]	; (8013f14 <free+0x40>)
 8013ee4:	f7f5 f8a2 	bl	800902c <printf>
 8013ee8:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8013eec:	4b0a      	ldr	r3, [pc, #40]	; (8013f18 <free+0x44>)
 8013eee:	429a      	cmp	r2, r3
 8013ef0:	d10d      	bne.n	8013f0e <free+0x3a>
 8013ef2:	4b0a      	ldr	r3, [pc, #40]	; (8013f1c <free+0x48>)
 8013ef4:	681a      	ldr	r2, [r3, #0]
 8013ef6:	b152      	cbz	r2, 8013f0e <free+0x3a>
 8013ef8:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8013efc:	4291      	cmp	r1, r2
 8013efe:	d107      	bne.n	8013f10 <free+0x3c>
 8013f00:	68da      	ldr	r2, [r3, #12]
 8013f02:	f844 2c04 	str.w	r2, [r4, #-4]
 8013f06:	685a      	ldr	r2, [r3, #4]
 8013f08:	60dd      	str	r5, [r3, #12]
 8013f0a:	3a01      	subs	r2, #1
 8013f0c:	605a      	str	r2, [r3, #4]
 8013f0e:	bd38      	pop	{r3, r4, r5, pc}
 8013f10:	3310      	adds	r3, #16
 8013f12:	e7ef      	b.n	8013ef4 <free+0x20>
 8013f14:	080182b7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, r9, pc}
 8013f18:	424c4d43 	submi	r4, ip, #4288	; 0x10c0
 8013f1c:	20000010 	andcs	r0, r0, r0, lsl r0

08013f20 <memcpy>:
 8013f20:	b510      	push	{r4, lr}
 8013f22:	1e43      	subs	r3, r0, #1
 8013f24:	440a      	add	r2, r1
 8013f26:	4291      	cmp	r1, r2
 8013f28:	d100      	bne.n	8013f2c <memcpy+0xc>
 8013f2a:	bd10      	pop	{r4, pc}
 8013f2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013f30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013f34:	e7f7      	b.n	8013f26 <memcpy+0x6>

08013f36 <memmove>:
 8013f36:	4288      	cmp	r0, r1
 8013f38:	b510      	push	{r4, lr}
 8013f3a:	eb01 0302 	add.w	r3, r1, r2
 8013f3e:	d208      	bcs.n	8013f52 <memmove+0x1c>
 8013f40:	1e42      	subs	r2, r0, #1
 8013f42:	4299      	cmp	r1, r3
 8013f44:	d100      	bne.n	8013f48 <memmove+0x12>
 8013f46:	bd10      	pop	{r4, pc}
 8013f48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013f4c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8013f50:	e7f7      	b.n	8013f42 <memmove+0xc>
 8013f52:	4601      	mov	r1, r0
 8013f54:	4402      	add	r2, r0
 8013f56:	428a      	cmp	r2, r1
 8013f58:	d0f5      	beq.n	8013f46 <memmove+0x10>
 8013f5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013f5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013f62:	e7f8      	b.n	8013f56 <memmove+0x20>

08013f64 <memset>:
 8013f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f66:	b1c2      	cbz	r2, 8013f9a <memset+0x36>
 8013f68:	4603      	mov	r3, r0
 8013f6a:	b2c9      	uxtb	r1, r1
 8013f6c:	075c      	lsls	r4, r3, #29
 8013f6e:	d110      	bne.n	8013f92 <memset+0x2e>
 8013f70:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
 8013f74:	ea44 4704 	orr.w	r7, r4, r4, lsl #16
 8013f78:	463d      	mov	r5, r7
 8013f7a:	461e      	mov	r6, r3
 8013f7c:	f022 0407 	bic.w	r4, r2, #7
 8013f80:	441c      	add	r4, r3
 8013f82:	42a6      	cmp	r6, r4
 8013f84:	d10a      	bne.n	8013f9c <memset+0x38>
 8013f86:	4413      	add	r3, r2
 8013f88:	429c      	cmp	r4, r3
 8013f8a:	d006      	beq.n	8013f9a <memset+0x36>
 8013f8c:	f804 1b01 	strb.w	r1, [r4], #1
 8013f90:	e7fa      	b.n	8013f88 <memset+0x24>
 8013f92:	3a01      	subs	r2, #1
 8013f94:	f803 1b01 	strb.w	r1, [r3], #1
 8013f98:	d1e8      	bne.n	8013f6c <memset+0x8>
 8013f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f9c:	f846 7b08 	str.w	r7, [r6], #8
 8013fa0:	f846 5c04 	str.w	r5, [r6, #-4]
 8013fa4:	e7ed      	b.n	8013f82 <memset+0x1e>

08013fa6 <puts>:
 8013fa6:	b508      	push	{r3, lr}
 8013fa8:	f7ff fd6e 	bl	8013a88 <console_puts>
 8013fac:	200a      	movs	r0, #10
 8013fae:	f7ff fd69 	bl	8013a84 <console_putc>
 8013fb2:	2001      	movs	r0, #1
 8013fb4:	bd08      	pop	{r3, pc}

08013fb6 <isleapyear>:
 8013fb6:	2264      	movs	r2, #100	; 0x64
 8013fb8:	fb90 f3f2 	sdiv	r3, r0, r2
 8013fbc:	fb02 0313 	mls	r3, r2, r3, r0
 8013fc0:	b94b      	cbnz	r3, 8013fd6 <isleapyear+0x20>
 8013fc2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8013fc6:	fb90 f2f3 	sdiv	r2, r0, r3
 8013fca:	fb03 0012 	mls	r0, r3, r2, r0
 8013fce:	fab0 f080 	clz	r0, r0
 8013fd2:	0940      	lsrs	r0, r0, #5
 8013fd4:	4770      	bx	lr
 8013fd6:	f010 0f03 	tst.w	r0, #3
 8013fda:	bf0c      	ite	eq
 8013fdc:	2001      	moveq	r0, #1
 8013fde:	2000      	movne	r0, #0
 8013fe0:	4770      	bx	lr
	...

08013fe4 <getdaysofmonth>:
 8013fe4:	b510      	push	{r4, lr}
 8013fe6:	4604      	mov	r4, r0
 8013fe8:	2c01      	cmp	r4, #1
 8013fea:	4608      	mov	r0, r1
 8013fec:	d102      	bne.n	8013ff4 <getdaysofmonth+0x10>
 8013fee:	f7ff ffe2 	bl	8013fb6 <isleapyear>
 8013ff2:	b918      	cbnz	r0, 8013ffc <getdaysofmonth+0x18>
 8013ff4:	4b02      	ldr	r3, [pc, #8]	; (8014000 <getdaysofmonth+0x1c>)
 8013ff6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013ffa:	bd10      	pop	{r4, pc}
 8013ffc:	201d      	movs	r0, #29
 8013ffe:	e7fc      	b.n	8013ffa <getdaysofmonth+0x16>
 8014000:	080182e0 	stmdaeq	r1, {r5, r6, r7, r9, pc}

08014004 <mktime>:
 8014004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014008:	4604      	mov	r4, r0
 801400a:	2800      	cmp	r0, #0
 801400c:	d043      	beq.n	8014096 <mktime+0x92>
 801400e:	6941      	ldr	r1, [r0, #20]
 8014010:	f1a1 0346 	sub.w	r3, r1, #70	; 0x46
 8014014:	2b45      	cmp	r3, #69	; 0x45
 8014016:	d83e      	bhi.n	8014096 <mktime+0x92>
 8014018:	2600      	movs	r6, #0
 801401a:	f240 75b2 	movw	r5, #1970	; 0x7b2
 801401e:	f240 186d 	movw	r8, #365	; 0x16d
 8014022:	f201 776b 	addw	r7, r1, #1899	; 0x76b
 8014026:	42af      	cmp	r7, r5
 8014028:	da24      	bge.n	8014074 <mktime+0x70>
 801402a:	6927      	ldr	r7, [r4, #16]
 801402c:	2f0b      	cmp	r7, #11
 801402e:	d832      	bhi.n	8014096 <mktime+0x92>
 8014030:	2500      	movs	r5, #0
 8014032:	42af      	cmp	r7, r5
 8014034:	d129      	bne.n	801408a <mktime+0x86>
 8014036:	68e5      	ldr	r5, [r4, #12]
 8014038:	2d00      	cmp	r5, #0
 801403a:	dd2c      	ble.n	8014096 <mktime+0x92>
 801403c:	4638      	mov	r0, r7
 801403e:	f7ff ffd1 	bl	8013fe4 <getdaysofmonth>
 8014042:	4285      	cmp	r5, r0
 8014044:	dc27      	bgt.n	8014096 <mktime+0x92>
 8014046:	2318      	movs	r3, #24
 8014048:	3d01      	subs	r5, #1
 801404a:	4435      	add	r5, r6
 801404c:	435d      	muls	r5, r3
 801404e:	68a3      	ldr	r3, [r4, #8]
 8014050:	2b17      	cmp	r3, #23
 8014052:	d820      	bhi.n	8014096 <mktime+0x92>
 8014054:	213c      	movs	r1, #60	; 0x3c
 8014056:	442b      	add	r3, r5
 8014058:	fb01 f203 	mul.w	r2, r1, r3
 801405c:	6863      	ldr	r3, [r4, #4]
 801405e:	2b3b      	cmp	r3, #59	; 0x3b
 8014060:	d819      	bhi.n	8014096 <mktime+0x92>
 8014062:	6820      	ldr	r0, [r4, #0]
 8014064:	4413      	add	r3, r2
 8014066:	283b      	cmp	r0, #59	; 0x3b
 8014068:	fb01 f303 	mul.w	r3, r1, r3
 801406c:	d813      	bhi.n	8014096 <mktime+0x92>
 801406e:	4418      	add	r0, r3
 8014070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014074:	4628      	mov	r0, r5
 8014076:	f7ff ff9e 	bl	8013fb6 <isleapyear>
 801407a:	2800      	cmp	r0, #0
 801407c:	bf14      	ite	ne
 801407e:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 8014082:	4643      	moveq	r3, r8
 8014084:	3501      	adds	r5, #1
 8014086:	441e      	add	r6, r3
 8014088:	e7cd      	b.n	8014026 <mktime+0x22>
 801408a:	4628      	mov	r0, r5
 801408c:	f7ff ffaa 	bl	8013fe4 <getdaysofmonth>
 8014090:	3501      	adds	r5, #1
 8014092:	4406      	add	r6, r0
 8014094:	e7cd      	b.n	8014032 <mktime+0x2e>
 8014096:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801409a:	e7e9      	b.n	8014070 <mktime+0x6c>

0801409c <gettimeofday>:
 801409c:	b538      	push	{r3, r4, r5, lr}
 801409e:	4b10      	ldr	r3, [pc, #64]	; (80140e0 <gettimeofday+0x44>)
 80140a0:	4a10      	ldr	r2, [pc, #64]	; (80140e4 <gettimeofday+0x48>)
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	6814      	ldr	r4, [r2, #0]
 80140a6:	6013      	str	r3, [r2, #0]
 80140a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80140ac:	429c      	cmp	r4, r3
 80140ae:	bf2c      	ite	cs
 80140b0:	1ae4      	subcs	r4, r4, r3
 80140b2:	1b1c      	subcc	r4, r3, r4
 80140b4:	4354      	muls	r4, r2
 80140b6:	4b0c      	ldr	r3, [pc, #48]	; (80140e8 <gettimeofday+0x4c>)
 80140b8:	4605      	mov	r5, r0
 80140ba:	e9d3 2100 	ldrd	r2, r1, [r3]
 80140be:	18a4      	adds	r4, r4, r2
 80140c0:	f141 0100 	adc.w	r1, r1, #0
 80140c4:	e9c3 4100 	strd	r4, r1, [r3]
 80140c8:	4620      	mov	r0, r4
 80140ca:	2300      	movs	r3, #0
 80140cc:	4a07      	ldr	r2, [pc, #28]	; (80140ec <gettimeofday+0x50>)
 80140ce:	f7f3 fd4d 	bl	8007b6c <__aeabi_uldivmod>
 80140d2:	4b06      	ldr	r3, [pc, #24]	; (80140ec <gettimeofday+0x50>)
 80140d4:	6028      	str	r0, [r5, #0]
 80140d6:	fb03 4410 	mls	r4, r3, r0, r4
 80140da:	2000      	movs	r0, #0
 80140dc:	606c      	str	r4, [r5, #4]
 80140de:	bd38      	pop	{r3, r4, r5, pc}
 80140e0:	20009dd4 	ldrdcs	r9, [r0], -r4
 80140e4:	20009dd0 	ldrdcs	r9, [r0], -r0
 80140e8:	20009dc8 	andcs	r9, r0, r8, asr #27
 80140ec:	000f4240 	andeq	r4, pc, r0, asr #4

080140f0 <settimeofday>:
 80140f0:	4b07      	ldr	r3, [pc, #28]	; (8014110 <settimeofday+0x20>)
 80140f2:	b510      	push	{r4, lr}
 80140f4:	681a      	ldr	r2, [r3, #0]
 80140f6:	4b07      	ldr	r3, [pc, #28]	; (8014114 <settimeofday+0x24>)
 80140f8:	6804      	ldr	r4, [r0, #0]
 80140fa:	601a      	str	r2, [r3, #0]
 80140fc:	6843      	ldr	r3, [r0, #4]
 80140fe:	4806      	ldr	r0, [pc, #24]	; (8014118 <settimeofday+0x28>)
 8014100:	17da      	asrs	r2, r3, #31
 8014102:	fbc4 3200 	smlal	r3, r2, r4, r0
 8014106:	4905      	ldr	r1, [pc, #20]	; (801411c <settimeofday+0x2c>)
 8014108:	2000      	movs	r0, #0
 801410a:	e9c1 3200 	strd	r3, r2, [r1]
 801410e:	bd10      	pop	{r4, pc}
 8014110:	20009dd4 	ldrdcs	r9, [r0], -r4
 8014114:	20009dd0 	ldrdcs	r9, [r0], -r0
 8014118:	000f4240 	andeq	r4, pc, r0, asr #4
 801411c:	20009dc8 	andcs	r9, r0, r8, asr #27

08014120 <time>:
 8014120:	b513      	push	{r0, r1, r4, lr}
 8014122:	4604      	mov	r4, r0
 8014124:	2100      	movs	r1, #0
 8014126:	4668      	mov	r0, sp
 8014128:	f7ff ffb8 	bl	801409c <gettimeofday>
 801412c:	9800      	ldr	r0, [sp, #0]
 801412e:	b104      	cbz	r4, 8014132 <time+0x12>
 8014130:	6020      	str	r0, [r4, #0]
 8014132:	b002      	add	sp, #8
 8014134:	bd10      	pop	{r4, pc}
	...

08014138 <uart0_init>:
 8014138:	2301      	movs	r3, #1
 801413a:	b507      	push	{r0, r1, r2, lr}
 801413c:	2208      	movs	r2, #8
 801413e:	9300      	str	r3, [sp, #0]
 8014140:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8014144:	2300      	movs	r3, #0
 8014146:	4803      	ldr	r0, [pc, #12]	; (8014154 <uart0_init+0x1c>)
 8014148:	f000 ff6a 	bl	8015020 <gd32_uart_begin>
 801414c:	b003      	add	sp, #12
 801414e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014152:	bf00      	nop
 8014154:	40013800 	andmi	r3, r1, r0, lsl #16

08014158 <uart0_putc>:
 8014158:	280a      	cmp	r0, #10
 801415a:	b538      	push	{r3, r4, r5, lr}
 801415c:	4604      	mov	r4, r0
 801415e:	d10a      	bne.n	8014176 <uart0_putc+0x1e>
 8014160:	4d0b      	ldr	r5, [pc, #44]	; (8014190 <uart0_putc+0x38>)
 8014162:	2107      	movs	r1, #7
 8014164:	4628      	mov	r0, r5
 8014166:	f000 fcc5 	bl	8014af4 <usart_flag_get>
 801416a:	2800      	cmp	r0, #0
 801416c:	d0f9      	beq.n	8014162 <uart0_putc+0xa>
 801416e:	220d      	movs	r2, #13
 8014170:	4b08      	ldr	r3, [pc, #32]	; (8014194 <uart0_putc+0x3c>)
 8014172:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8014176:	4d06      	ldr	r5, [pc, #24]	; (8014190 <uart0_putc+0x38>)
 8014178:	2107      	movs	r1, #7
 801417a:	4628      	mov	r0, r5
 801417c:	f000 fcba 	bl	8014af4 <usart_flag_get>
 8014180:	2800      	cmp	r0, #0
 8014182:	d0f9      	beq.n	8014178 <uart0_putc+0x20>
 8014184:	4b03      	ldr	r3, [pc, #12]	; (8014194 <uart0_putc+0x3c>)
 8014186:	b2e4      	uxtb	r4, r4
 8014188:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
 801418c:	bd38      	pop	{r3, r4, r5, pc}
 801418e:	bf00      	nop
 8014190:	40013800 	andmi	r3, r1, r0, lsl #16
 8014194:	40013000 	andmi	r3, r1, r0

08014198 <uart0_puts>:
 8014198:	b510      	push	{r4, lr}
 801419a:	1e44      	subs	r4, r0, #1
 801419c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80141a0:	b903      	cbnz	r3, 80141a4 <uart0_puts+0xc>
 80141a2:	bd10      	pop	{r4, pc}
 80141a4:	2b0a      	cmp	r3, #10
 80141a6:	d102      	bne.n	80141ae <uart0_puts+0x16>
 80141a8:	200d      	movs	r0, #13
 80141aa:	f7ff ffd5 	bl	8014158 <uart0_putc>
 80141ae:	7820      	ldrb	r0, [r4, #0]
 80141b0:	f7ff ffd2 	bl	8014158 <uart0_putc>
 80141b4:	e7f2      	b.n	801419c <uart0_puts+0x4>
	...

080141b8 <systick_config>:
 80141b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80141bc:	4b0b      	ldr	r3, [pc, #44]	; (80141ec <systick_config+0x34>)
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80141c4:	3b01      	subs	r3, #1
 80141c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80141ca:	d20d      	bcs.n	80141e8 <systick_config+0x30>
 80141cc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80141d0:	21f0      	movs	r1, #240	; 0xf0
 80141d2:	6153      	str	r3, [r2, #20]
 80141d4:	4b06      	ldr	r3, [pc, #24]	; (80141f0 <systick_config+0x38>)
 80141d6:	2007      	movs	r0, #7
 80141d8:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 80141dc:	2100      	movs	r1, #0
 80141de:	6191      	str	r1, [r2, #24]
 80141e0:	6110      	str	r0, [r2, #16]
 80141e2:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 80141e6:	4770      	bx	lr
 80141e8:	e7fe      	b.n	80141e8 <systick_config+0x30>
 80141ea:	bf00      	nop
 80141ec:	200000e0 	andcs	r0, r0, r0, ror #1
 80141f0:	e000ed00 	and	lr, r0, r0, lsl #26

080141f4 <SysTick_Handler>:
 80141f4:	4a02      	ldr	r2, [pc, #8]	; (8014200 <SysTick_Handler+0xc>)
 80141f6:	6813      	ldr	r3, [r2, #0]
 80141f8:	3301      	adds	r3, #1
 80141fa:	6013      	str	r3, [r2, #0]
 80141fc:	4770      	bx	lr
 80141fe:	bf00      	nop
 8014200:	20009dd4 	ldrdcs	r9, [r0], -r4

08014204 <SystemInit>:
 8014204:	4b37      	ldr	r3, [pc, #220]	; (80142e4 <SystemInit+0xe0>)
 8014206:	4938      	ldr	r1, [pc, #224]	; (80142e8 <SystemInit+0xe4>)
 8014208:	681a      	ldr	r2, [r3, #0]
 801420a:	f042 0201 	orr.w	r2, r2, #1
 801420e:	601a      	str	r2, [r3, #0]
 8014210:	685a      	ldr	r2, [r3, #4]
 8014212:	f022 0203 	bic.w	r2, r2, #3
 8014216:	605a      	str	r2, [r3, #4]
 8014218:	681a      	ldr	r2, [r3, #0]
 801421a:	400a      	ands	r2, r1
 801421c:	601a      	str	r2, [r3, #0]
 801421e:	6858      	ldr	r0, [r3, #4]
 8014220:	4a32      	ldr	r2, [pc, #200]	; (80142ec <SystemInit+0xe8>)
 8014222:	4002      	ands	r2, r0
 8014224:	605a      	str	r2, [r3, #4]
 8014226:	681a      	ldr	r2, [r3, #0]
 8014228:	400a      	ands	r2, r1
 801422a:	601a      	str	r2, [r3, #0]
 801422c:	681a      	ldr	r2, [r3, #0]
 801422e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8014232:	601a      	str	r2, [r3, #0]
 8014234:	685a      	ldr	r2, [r3, #4]
 8014236:	f022 5203 	bic.w	r2, r2, #549453824	; 0x20c00000
 801423a:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 801423e:	605a      	str	r2, [r3, #4]
 8014240:	2200      	movs	r2, #0
 8014242:	62da      	str	r2, [r3, #44]	; 0x2c
 8014244:	681a      	ldr	r2, [r3, #0]
 8014246:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 801424a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 801424e:	601a      	str	r2, [r3, #0]
 8014250:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8014254:	609a      	str	r2, [r3, #8]
 8014256:	681a      	ldr	r2, [r3, #0]
 8014258:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801425c:	601a      	str	r2, [r3, #0]
 801425e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014262:	6819      	ldr	r1, [r3, #0]
 8014264:	0389      	lsls	r1, r1, #14
 8014266:	d401      	bmi.n	801426c <SystemInit+0x68>
 8014268:	3a01      	subs	r2, #1
 801426a:	d1fa      	bne.n	8014262 <SystemInit+0x5e>
 801426c:	681a      	ldr	r2, [r3, #0]
 801426e:	0392      	lsls	r2, r2, #14
 8014270:	d400      	bmi.n	8014274 <SystemInit+0x70>
 8014272:	e7fe      	b.n	8014272 <SystemInit+0x6e>
 8014274:	685a      	ldr	r2, [r3, #4]
 8014276:	605a      	str	r2, [r3, #4]
 8014278:	685a      	ldr	r2, [r3, #4]
 801427a:	605a      	str	r2, [r3, #4]
 801427c:	685a      	ldr	r2, [r3, #4]
 801427e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8014282:	605a      	str	r2, [r3, #4]
 8014284:	685a      	ldr	r2, [r3, #4]
 8014286:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 801428a:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 801428e:	605a      	str	r2, [r3, #4]
 8014290:	685a      	ldr	r2, [r3, #4]
 8014292:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8014296:	f442 1224 	orr.w	r2, r2, #2686976	; 0x290000
 801429a:	605a      	str	r2, [r3, #4]
 801429c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801429e:	4a14      	ldr	r2, [pc, #80]	; (80142f0 <SystemInit+0xec>)
 80142a0:	400a      	ands	r2, r1
 80142a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80142a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142a6:	f442 3283 	orr.w	r2, r2, #67072	; 0x10600
 80142aa:	f042 0249 	orr.w	r2, r2, #73	; 0x49
 80142ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80142b0:	681a      	ldr	r2, [r3, #0]
 80142b2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80142b6:	601a      	str	r2, [r3, #0]
 80142b8:	681a      	ldr	r2, [r3, #0]
 80142ba:	0110      	lsls	r0, r2, #4
 80142bc:	d5fc      	bpl.n	80142b8 <SystemInit+0xb4>
 80142be:	681a      	ldr	r2, [r3, #0]
 80142c0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80142c4:	601a      	str	r2, [r3, #0]
 80142c6:	681a      	ldr	r2, [r3, #0]
 80142c8:	0191      	lsls	r1, r2, #6
 80142ca:	d5fc      	bpl.n	80142c6 <SystemInit+0xc2>
 80142cc:	685a      	ldr	r2, [r3, #4]
 80142ce:	f022 0203 	bic.w	r2, r2, #3
 80142d2:	605a      	str	r2, [r3, #4]
 80142d4:	685a      	ldr	r2, [r3, #4]
 80142d6:	f042 0202 	orr.w	r2, r2, #2
 80142da:	605a      	str	r2, [r3, #4]
 80142dc:	685a      	ldr	r2, [r3, #4]
 80142de:	0712      	lsls	r2, r2, #28
 80142e0:	d5fc      	bpl.n	80142dc <SystemInit+0xd8>
 80142e2:	4770      	bx	lr
 80142e4:	40021000 	andmi	r1, r2, r0
 80142e8:	fef6ffff 	mrc2	15, 7, pc, cr6, cr15, {7}
 80142ec:	e0ff000c 	rscs	r0, pc, ip
 80142f0:	fffef000 			; <UNDEFINED> instruction: 0xfffef000

080142f4 <bkp_data_write>:
 80142f4:	f1a0 030b 	sub.w	r3, r0, #11
 80142f8:	2b1f      	cmp	r3, #31
 80142fa:	d804      	bhi.n	8014306 <bkp_data_write+0x12>
 80142fc:	4b07      	ldr	r3, [pc, #28]	; (801431c <bkp_data_write+0x28>)
 80142fe:	4403      	add	r3, r0
 8014300:	009b      	lsls	r3, r3, #2
 8014302:	8019      	strh	r1, [r3, #0]
 8014304:	4770      	bx	lr
 8014306:	1e43      	subs	r3, r0, #1
 8014308:	2b09      	cmp	r3, #9
 801430a:	bf9f      	itttt	ls
 801430c:	f100 5080 	addls.w	r0, r0, #268435456	; 0x10000000
 8014310:	f500 50d8 	addls.w	r0, r0, #6912	; 0x1b00
 8014314:	0080      	lslls	r0, r0, #2
 8014316:	8001      	strhls	r1, [r0, #0]
 8014318:	4770      	bx	lr
 801431a:	bf00      	nop
 801431c:	10001b05 	andne	r1, r0, r5, lsl #22

08014320 <bkp_data_read>:
 8014320:	f1a0 030b 	sub.w	r3, r0, #11
 8014324:	2b1f      	cmp	r3, #31
 8014326:	d805      	bhi.n	8014334 <bkp_data_read+0x14>
 8014328:	4b08      	ldr	r3, [pc, #32]	; (801434c <bkp_data_read+0x2c>)
 801432a:	4403      	add	r3, r0
 801432c:	009b      	lsls	r3, r3, #2
 801432e:	8818      	ldrh	r0, [r3, #0]
 8014330:	b280      	uxth	r0, r0
 8014332:	4770      	bx	lr
 8014334:	1e43      	subs	r3, r0, #1
 8014336:	2b09      	cmp	r3, #9
 8014338:	d806      	bhi.n	8014348 <bkp_data_read+0x28>
 801433a:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
 801433e:	f500 50d8 	add.w	r0, r0, #6912	; 0x1b00
 8014342:	0080      	lsls	r0, r0, #2
 8014344:	8800      	ldrh	r0, [r0, #0]
 8014346:	e7f3      	b.n	8014330 <bkp_data_read+0x10>
 8014348:	2000      	movs	r0, #0
 801434a:	4770      	bx	lr
 801434c:	10001b05 	andne	r1, r0, r5, lsl #22

08014350 <fmc_bank0_unlock>:
 8014350:	4b04      	ldr	r3, [pc, #16]	; (8014364 <fmc_bank0_unlock+0x14>)
 8014352:	691a      	ldr	r2, [r3, #16]
 8014354:	0612      	lsls	r2, r2, #24
 8014356:	bf41      	itttt	mi
 8014358:	4a03      	ldrmi	r2, [pc, #12]	; (8014368 <fmc_bank0_unlock+0x18>)
 801435a:	605a      	strmi	r2, [r3, #4]
 801435c:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8014360:	605a      	strmi	r2, [r3, #4]
 8014362:	4770      	bx	lr
 8014364:	40022000 	andmi	r2, r2, r0
 8014368:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

0801436c <fmc_bank1_unlock>:
 801436c:	4b04      	ldr	r3, [pc, #16]	; (8014380 <fmc_bank1_unlock+0x14>)
 801436e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014370:	0612      	lsls	r2, r2, #24
 8014372:	bf41      	itttt	mi
 8014374:	4a03      	ldrmi	r2, [pc, #12]	; (8014384 <fmc_bank1_unlock+0x18>)
 8014376:	645a      	strmi	r2, [r3, #68]	; 0x44
 8014378:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 801437c:	645a      	strmi	r2, [r3, #68]	; 0x44
 801437e:	4770      	bx	lr
 8014380:	40022000 	andmi	r2, r2, r0
 8014384:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08014388 <fmc_bank0_lock>:
 8014388:	4a02      	ldr	r2, [pc, #8]	; (8014394 <fmc_bank0_lock+0xc>)
 801438a:	6913      	ldr	r3, [r2, #16]
 801438c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014390:	6113      	str	r3, [r2, #16]
 8014392:	4770      	bx	lr
 8014394:	40022000 	andmi	r2, r2, r0

08014398 <fmc_bank1_lock>:
 8014398:	4a02      	ldr	r2, [pc, #8]	; (80143a4 <fmc_bank1_lock+0xc>)
 801439a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 801439c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80143a0:	6513      	str	r3, [r2, #80]	; 0x50
 80143a2:	4770      	bx	lr
 80143a4:	40022000 	andmi	r2, r2, r0

080143a8 <fmc_bank0_state_get>:
 80143a8:	4b07      	ldr	r3, [pc, #28]	; (80143c8 <fmc_bank0_state_get+0x20>)
 80143aa:	68da      	ldr	r2, [r3, #12]
 80143ac:	07d1      	lsls	r1, r2, #31
 80143ae:	d407      	bmi.n	80143c0 <fmc_bank0_state_get+0x18>
 80143b0:	68da      	ldr	r2, [r3, #12]
 80143b2:	06d2      	lsls	r2, r2, #27
 80143b4:	d406      	bmi.n	80143c4 <fmc_bank0_state_get+0x1c>
 80143b6:	68d8      	ldr	r0, [r3, #12]
 80143b8:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80143bc:	0040      	lsls	r0, r0, #1
 80143be:	4770      	bx	lr
 80143c0:	2001      	movs	r0, #1
 80143c2:	4770      	bx	lr
 80143c4:	2003      	movs	r0, #3
 80143c6:	4770      	bx	lr
 80143c8:	40022000 	andmi	r2, r2, r0

080143cc <fmc_bank1_state_get>:
 80143cc:	4b07      	ldr	r3, [pc, #28]	; (80143ec <fmc_bank1_state_get+0x20>)
 80143ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80143d0:	07d1      	lsls	r1, r2, #31
 80143d2:	d407      	bmi.n	80143e4 <fmc_bank1_state_get+0x18>
 80143d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80143d6:	06d2      	lsls	r2, r2, #27
 80143d8:	d406      	bmi.n	80143e8 <fmc_bank1_state_get+0x1c>
 80143da:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80143dc:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80143e0:	0040      	lsls	r0, r0, #1
 80143e2:	4770      	bx	lr
 80143e4:	2001      	movs	r0, #1
 80143e6:	4770      	bx	lr
 80143e8:	2003      	movs	r0, #3
 80143ea:	4770      	bx	lr
 80143ec:	40022000 	andmi	r2, r2, r0

080143f0 <fwdgt_enable>:
 80143f0:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80143f4:	4b01      	ldr	r3, [pc, #4]	; (80143fc <fwdgt_enable+0xc>)
 80143f6:	601a      	str	r2, [r3, #0]
 80143f8:	4770      	bx	lr
 80143fa:	bf00      	nop
 80143fc:	40003000 	andmi	r3, r0, r0

08014400 <fwdgt_counter_reload>:
 8014400:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8014404:	4b01      	ldr	r3, [pc, #4]	; (801440c <fwdgt_counter_reload+0xc>)
 8014406:	601a      	str	r2, [r3, #0]
 8014408:	4770      	bx	lr
 801440a:	bf00      	nop
 801440c:	40003000 	andmi	r3, r0, r0

08014410 <fwdgt_config>:
 8014410:	f245 5355 	movw	r3, #21845	; 0x5555
 8014414:	4a11      	ldr	r2, [pc, #68]	; (801445c <fwdgt_config+0x4c>)
 8014416:	b510      	push	{r4, lr}
 8014418:	4c11      	ldr	r4, [pc, #68]	; (8014460 <fwdgt_config+0x50>)
 801441a:	6013      	str	r3, [r2, #0]
 801441c:	68d3      	ldr	r3, [r2, #12]
 801441e:	3c01      	subs	r4, #1
 8014420:	f003 0301 	and.w	r3, r3, #1
 8014424:	d013      	beq.n	801444e <fwdgt_config+0x3e>
 8014426:	2b00      	cmp	r3, #0
 8014428:	d1f8      	bne.n	801441c <fwdgt_config+0xc>
 801442a:	6051      	str	r1, [r2, #4]
 801442c:	490c      	ldr	r1, [pc, #48]	; (8014460 <fwdgt_config+0x50>)
 801442e:	4a0b      	ldr	r2, [pc, #44]	; (801445c <fwdgt_config+0x4c>)
 8014430:	68d3      	ldr	r3, [r2, #12]
 8014432:	3901      	subs	r1, #1
 8014434:	f003 0302 	and.w	r3, r3, #2
 8014438:	d00d      	beq.n	8014456 <fwdgt_config+0x46>
 801443a:	2b00      	cmp	r3, #0
 801443c:	d1f8      	bne.n	8014430 <fwdgt_config+0x20>
 801443e:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8014442:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8014446:	6090      	str	r0, [r2, #8]
 8014448:	2001      	movs	r0, #1
 801444a:	6013      	str	r3, [r2, #0]
 801444c:	e002      	b.n	8014454 <fwdgt_config+0x44>
 801444e:	2b00      	cmp	r3, #0
 8014450:	d0eb      	beq.n	801442a <fwdgt_config+0x1a>
 8014452:	2000      	movs	r0, #0
 8014454:	bd10      	pop	{r4, pc}
 8014456:	2b00      	cmp	r3, #0
 8014458:	d1fb      	bne.n	8014452 <fwdgt_config+0x42>
 801445a:	e7f0      	b.n	801443e <fwdgt_config+0x2e>
 801445c:	40003000 	andmi	r3, r0, r0
 8014460:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08014464 <gpio_init>:
 8014464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014468:	f04f 0c0f 	mov.w	ip, #15
 801446c:	06cf      	lsls	r7, r1, #27
 801446e:	f04f 0400 	mov.w	r4, #0
 8014472:	f04f 0701 	mov.w	r7, #1
 8014476:	f001 050f 	and.w	r5, r1, #15
 801447a:	bf48      	it	mi
 801447c:	4315      	orrmi	r5, r2
 801447e:	fa23 f204 	lsr.w	r2, r3, r4
 8014482:	07d6      	lsls	r6, r2, #31
 8014484:	d510      	bpl.n	80144a8 <gpio_init+0x44>
 8014486:	00a2      	lsls	r2, r4, #2
 8014488:	6806      	ldr	r6, [r0, #0]
 801448a:	fa0c fe02 	lsl.w	lr, ip, r2
 801448e:	ea26 060e 	bic.w	r6, r6, lr
 8014492:	fa05 f202 	lsl.w	r2, r5, r2
 8014496:	2928      	cmp	r1, #40	; 0x28
 8014498:	ea42 0206 	orr.w	r2, r2, r6
 801449c:	d128      	bne.n	80144f0 <gpio_init+0x8c>
 801449e:	fa07 f604 	lsl.w	r6, r7, r4
 80144a2:	401e      	ands	r6, r3
 80144a4:	6146      	str	r6, [r0, #20]
 80144a6:	6002      	str	r2, [r0, #0]
 80144a8:	3401      	adds	r4, #1
 80144aa:	2c08      	cmp	r4, #8
 80144ac:	d1e7      	bne.n	801447e <gpio_init+0x1a>
 80144ae:	2600      	movs	r6, #0
 80144b0:	f04f 0c0f 	mov.w	ip, #15
 80144b4:	2701      	movs	r7, #1
 80144b6:	f106 0208 	add.w	r2, r6, #8
 80144ba:	fa23 f402 	lsr.w	r4, r3, r2
 80144be:	07e4      	lsls	r4, r4, #31
 80144c0:	d511      	bpl.n	80144e6 <gpio_init+0x82>
 80144c2:	00b4      	lsls	r4, r6, #2
 80144c4:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80144c8:	fa0c f804 	lsl.w	r8, ip, r4
 80144cc:	ea2e 0e08 	bic.w	lr, lr, r8
 80144d0:	fa05 f404 	lsl.w	r4, r5, r4
 80144d4:	2928      	cmp	r1, #40	; 0x28
 80144d6:	ea44 040e 	orr.w	r4, r4, lr
 80144da:	d110      	bne.n	80144fe <gpio_init+0x9a>
 80144dc:	fa07 f202 	lsl.w	r2, r7, r2
 80144e0:	401a      	ands	r2, r3
 80144e2:	6142      	str	r2, [r0, #20]
 80144e4:	6044      	str	r4, [r0, #4]
 80144e6:	3601      	adds	r6, #1
 80144e8:	2e08      	cmp	r6, #8
 80144ea:	d1e4      	bne.n	80144b6 <gpio_init+0x52>
 80144ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144f0:	2948      	cmp	r1, #72	; 0x48
 80144f2:	bf02      	ittt	eq
 80144f4:	fa07 f604 	lsleq.w	r6, r7, r4
 80144f8:	401e      	andeq	r6, r3
 80144fa:	6106      	streq	r6, [r0, #16]
 80144fc:	e7d3      	b.n	80144a6 <gpio_init+0x42>
 80144fe:	2948      	cmp	r1, #72	; 0x48
 8014500:	bf02      	ittt	eq
 8014502:	fa07 f202 	lsleq.w	r2, r7, r2
 8014506:	401a      	andeq	r2, r3
 8014508:	6102      	streq	r2, [r0, #16]
 801450a:	e7eb      	b.n	80144e4 <gpio_init+0x80>

0801450c <gpio_pin_remap_config>:
 801450c:	2800      	cmp	r0, #0
 801450e:	4a16      	ldr	r2, [pc, #88]	; (8014568 <gpio_pin_remap_config+0x5c>)
 8014510:	b530      	push	{r4, r5, lr}
 8014512:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 8014516:	bfb4      	ite	lt
 8014518:	69d3      	ldrlt	r3, [r2, #28]
 801451a:	6853      	ldrge	r3, [r2, #4]
 801451c:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
 8014520:	b284      	uxth	r4, r0
 8014522:	d110      	bne.n	8014546 <gpio_pin_remap_config+0x3a>
 8014524:	6855      	ldr	r5, [r2, #4]
 8014526:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 801452a:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 801452e:	6055      	str	r5, [r2, #4]
 8014530:	b119      	cbz	r1, 801453a <gpio_pin_remap_config+0x2e>
 8014532:	0d42      	lsrs	r2, r0, #21
 8014534:	0112      	lsls	r2, r2, #4
 8014536:	4094      	lsls	r4, r2
 8014538:	4323      	orrs	r3, r4
 801453a:	4a0b      	ldr	r2, [pc, #44]	; (8014568 <gpio_pin_remap_config+0x5c>)
 801453c:	2800      	cmp	r0, #0
 801453e:	bfb4      	ite	lt
 8014540:	61d3      	strlt	r3, [r2, #28]
 8014542:	6053      	strge	r3, [r2, #4]
 8014544:	bd30      	pop	{r4, r5, pc}
 8014546:	02c2      	lsls	r2, r0, #11
 8014548:	bf4d      	iteet	mi
 801454a:	2203      	movmi	r2, #3
 801454c:	0d42      	lsrpl	r2, r0, #21
 801454e:	0112      	lslpl	r2, r2, #4
 8014550:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
 8014554:	bf4c      	ite	mi
 8014556:	40aa      	lslmi	r2, r5
 8014558:	fa04 f202 	lslpl.w	r2, r4, r2
 801455c:	ea23 0302 	bic.w	r3, r3, r2
 8014560:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8014564:	e7e4      	b.n	8014530 <gpio_pin_remap_config+0x24>
 8014566:	bf00      	nop
 8014568:	40010000 	andmi	r0, r1, r0

0801456c <gpio_ethernet_phy_select>:
 801456c:	4b04      	ldr	r3, [pc, #16]	; (8014580 <gpio_ethernet_phy_select+0x14>)
 801456e:	685a      	ldr	r2, [r3, #4]
 8014570:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8014574:	605a      	str	r2, [r3, #4]
 8014576:	685a      	ldr	r2, [r3, #4]
 8014578:	4302      	orrs	r2, r0
 801457a:	605a      	str	r2, [r3, #4]
 801457c:	4770      	bx	lr
 801457e:	bf00      	nop
 8014580:	40010000 	andmi	r0, r1, r0

08014584 <pmu_backup_write_enable>:
 8014584:	4a02      	ldr	r2, [pc, #8]	; (8014590 <pmu_backup_write_enable+0xc>)
 8014586:	6813      	ldr	r3, [r2, #0]
 8014588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801458c:	6013      	str	r3, [r2, #0]
 801458e:	4770      	bx	lr
 8014590:	40007000 	andmi	r7, r0, r0

08014594 <rcu_periph_clock_enable>:
 8014594:	2201      	movs	r2, #1
 8014596:	0983      	lsrs	r3, r0, #6
 8014598:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801459c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80145a0:	6819      	ldr	r1, [r3, #0]
 80145a2:	f000 001f 	and.w	r0, r0, #31
 80145a6:	4082      	lsls	r2, r0
 80145a8:	430a      	orrs	r2, r1
 80145aa:	601a      	str	r2, [r3, #0]
 80145ac:	4770      	bx	lr

080145ae <rcu_periph_clock_disable>:
 80145ae:	2101      	movs	r1, #1
 80145b0:	0983      	lsrs	r3, r0, #6
 80145b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80145b6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80145ba:	681a      	ldr	r2, [r3, #0]
 80145bc:	f000 001f 	and.w	r0, r0, #31
 80145c0:	4081      	lsls	r1, r0
 80145c2:	ea22 0201 	bic.w	r2, r2, r1
 80145c6:	601a      	str	r2, [r3, #0]
 80145c8:	4770      	bx	lr

080145ca <rcu_periph_reset_enable>:
 80145ca:	f7ff bfe3 	b.w	8014594 <rcu_periph_clock_enable>

080145ce <rcu_periph_reset_disable>:
 80145ce:	f7ff bfee 	b.w	80145ae <rcu_periph_clock_disable>
	...

080145d4 <rcu_ckout0_config>:
 80145d4:	4a03      	ldr	r2, [pc, #12]	; (80145e4 <rcu_ckout0_config+0x10>)
 80145d6:	6853      	ldr	r3, [r2, #4]
 80145d8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80145dc:	4303      	orrs	r3, r0
 80145de:	6053      	str	r3, [r2, #4]
 80145e0:	4770      	bx	lr
 80145e2:	bf00      	nop
 80145e4:	40021000 	andmi	r1, r2, r0

080145e8 <rcu_pll2_config>:
 80145e8:	4b04      	ldr	r3, [pc, #16]	; (80145fc <rcu_pll2_config+0x14>)
 80145ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145ec:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 80145f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80145f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145f4:	4302      	orrs	r2, r0
 80145f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80145f8:	4770      	bx	lr
 80145fa:	bf00      	nop
 80145fc:	40021000 	andmi	r1, r2, r0

08014600 <rcu_adc_clock_config>:
 8014600:	490c      	ldr	r1, [pc, #48]	; (8014634 <rcu_adc_clock_config+0x34>)
 8014602:	2805      	cmp	r0, #5
 8014604:	684b      	ldr	r3, [r1, #4]
 8014606:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801460a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 801460e:	d006      	beq.n	801461e <rcu_adc_clock_config+0x1e>
 8014610:	d803      	bhi.n	801461a <rcu_adc_clock_config+0x1a>
 8014612:	2804      	cmp	r0, #4
 8014614:	d10a      	bne.n	801462c <rcu_adc_clock_config+0x2c>
 8014616:	604b      	str	r3, [r1, #4]
 8014618:	4770      	bx	lr
 801461a:	2807      	cmp	r0, #7
 801461c:	d1fb      	bne.n	8014616 <rcu_adc_clock_config+0x16>
 801461e:	4a06      	ldr	r2, [pc, #24]	; (8014638 <rcu_adc_clock_config+0x38>)
 8014620:	ea02 3280 	and.w	r2, r2, r0, lsl #14
 8014624:	4313      	orrs	r3, r2
 8014626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801462a:	e7f4      	b.n	8014616 <rcu_adc_clock_config+0x16>
 801462c:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 8014630:	e7f1      	b.n	8014616 <rcu_adc_clock_config+0x16>
 8014632:	bf00      	nop
 8014634:	40021000 	andmi	r1, r2, r0
 8014638:	fffec000 			; <UNDEFINED> instruction: 0xfffec000

0801463c <rcu_i2s2_clock_config>:
 801463c:	4a03      	ldr	r2, [pc, #12]	; (801464c <rcu_i2s2_clock_config+0x10>)
 801463e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8014640:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8014644:	4303      	orrs	r3, r0
 8014646:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014648:	4770      	bx	lr
 801464a:	bf00      	nop
 801464c:	40021000 	andmi	r1, r2, r0

08014650 <rcu_flag_get>:
 8014650:	0983      	lsrs	r3, r0, #6
 8014652:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014656:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 801465a:	681a      	ldr	r2, [r3, #0]
 801465c:	2301      	movs	r3, #1
 801465e:	f000 001f 	and.w	r0, r0, #31
 8014662:	4083      	lsls	r3, r0
 8014664:	4213      	tst	r3, r2
 8014666:	bf14      	ite	ne
 8014668:	2001      	movne	r0, #1
 801466a:	2000      	moveq	r0, #0
 801466c:	4770      	bx	lr
	...

08014670 <rcu_osci_stab_wait>:
 8014670:	281a      	cmp	r0, #26
 8014672:	b508      	push	{r3, lr}
 8014674:	d051      	beq.n	801471a <rcu_osci_stab_wait+0xaa>
 8014676:	d806      	bhi.n	8014686 <rcu_osci_stab_wait+0x16>
 8014678:	2810      	cmp	r0, #16
 801467a:	d015      	beq.n	80146a8 <rcu_osci_stab_wait+0x38>
 801467c:	2818      	cmp	r0, #24
 801467e:	d043      	beq.n	8014708 <rcu_osci_stab_wait+0x98>
 8014680:	b368      	cbz	r0, 80146de <rcu_osci_stab_wait+0x6e>
 8014682:	2000      	movs	r0, #0
 8014684:	bd08      	pop	{r3, pc}
 8014686:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 801468a:	d01c      	beq.n	80146c6 <rcu_osci_stab_wait+0x56>
 801468c:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
 8014690:	d02f      	beq.n	80146f2 <rcu_osci_stab_wait+0x82>
 8014692:	281c      	cmp	r0, #28
 8014694:	d1f5      	bne.n	8014682 <rcu_osci_stab_wait+0x12>
 8014696:	4925      	ldr	r1, [pc, #148]	; (801472c <rcu_osci_stab_wait+0xbc>)
 8014698:	201d      	movs	r0, #29
 801469a:	f7ff ffd9 	bl	8014650 <rcu_flag_get>
 801469e:	b908      	cbnz	r0, 80146a4 <rcu_osci_stab_wait+0x34>
 80146a0:	3901      	subs	r1, #1
 80146a2:	d1f9      	bne.n	8014698 <rcu_osci_stab_wait+0x28>
 80146a4:	201d      	movs	r0, #29
 80146a6:	e008      	b.n	80146ba <rcu_osci_stab_wait+0x4a>
 80146a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80146ac:	2011      	movs	r0, #17
 80146ae:	f7ff ffcf 	bl	8014650 <rcu_flag_get>
 80146b2:	b908      	cbnz	r0, 80146b8 <rcu_osci_stab_wait+0x48>
 80146b4:	3901      	subs	r1, #1
 80146b6:	d1f9      	bne.n	80146ac <rcu_osci_stab_wait+0x3c>
 80146b8:	2011      	movs	r0, #17
 80146ba:	f7ff ffc9 	bl	8014650 <rcu_flag_get>
 80146be:	3800      	subs	r0, #0
 80146c0:	bf18      	it	ne
 80146c2:	2001      	movne	r0, #1
 80146c4:	e7de      	b.n	8014684 <rcu_osci_stab_wait+0x14>
 80146c6:	f06f 417c 	mvn.w	r1, #4227858432	; 0xfc000000
 80146ca:	f640 0001 	movw	r0, #2049	; 0x801
 80146ce:	f7ff ffbf 	bl	8014650 <rcu_flag_get>
 80146d2:	b908      	cbnz	r0, 80146d8 <rcu_osci_stab_wait+0x68>
 80146d4:	3901      	subs	r1, #1
 80146d6:	d1f8      	bne.n	80146ca <rcu_osci_stab_wait+0x5a>
 80146d8:	f640 0001 	movw	r0, #2049	; 0x801
 80146dc:	e7ed      	b.n	80146ba <rcu_osci_stab_wait+0x4a>
 80146de:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80146e2:	2001      	movs	r0, #1
 80146e4:	f7ff ffb4 	bl	8014650 <rcu_flag_get>
 80146e8:	b908      	cbnz	r0, 80146ee <rcu_osci_stab_wait+0x7e>
 80146ea:	3901      	subs	r1, #1
 80146ec:	d1f9      	bne.n	80146e2 <rcu_osci_stab_wait+0x72>
 80146ee:	2001      	movs	r0, #1
 80146f0:	e7e3      	b.n	80146ba <rcu_osci_stab_wait+0x4a>
 80146f2:	490e      	ldr	r1, [pc, #56]	; (801472c <rcu_osci_stab_wait+0xbc>)
 80146f4:	f640 1001 	movw	r0, #2305	; 0x901
 80146f8:	f7ff ffaa 	bl	8014650 <rcu_flag_get>
 80146fc:	b908      	cbnz	r0, 8014702 <rcu_osci_stab_wait+0x92>
 80146fe:	3901      	subs	r1, #1
 8014700:	d1f8      	bne.n	80146f4 <rcu_osci_stab_wait+0x84>
 8014702:	f640 1001 	movw	r0, #2305	; 0x901
 8014706:	e7d8      	b.n	80146ba <rcu_osci_stab_wait+0x4a>
 8014708:	4908      	ldr	r1, [pc, #32]	; (801472c <rcu_osci_stab_wait+0xbc>)
 801470a:	2019      	movs	r0, #25
 801470c:	f7ff ffa0 	bl	8014650 <rcu_flag_get>
 8014710:	b908      	cbnz	r0, 8014716 <rcu_osci_stab_wait+0xa6>
 8014712:	3901      	subs	r1, #1
 8014714:	d1f9      	bne.n	801470a <rcu_osci_stab_wait+0x9a>
 8014716:	2019      	movs	r0, #25
 8014718:	e7cf      	b.n	80146ba <rcu_osci_stab_wait+0x4a>
 801471a:	4904      	ldr	r1, [pc, #16]	; (801472c <rcu_osci_stab_wait+0xbc>)
 801471c:	201b      	movs	r0, #27
 801471e:	f7ff ff97 	bl	8014650 <rcu_flag_get>
 8014722:	b908      	cbnz	r0, 8014728 <rcu_osci_stab_wait+0xb8>
 8014724:	3901      	subs	r1, #1
 8014726:	d1f9      	bne.n	801471c <rcu_osci_stab_wait+0xac>
 8014728:	201b      	movs	r0, #27
 801472a:	e7c6      	b.n	80146ba <rcu_osci_stab_wait+0x4a>
 801472c:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08014730 <rcu_osci_on>:
 8014730:	f7ff bf30 	b.w	8014594 <rcu_periph_clock_enable>

08014734 <rcu_clock_freq_get>:
 8014734:	4b3e      	ldr	r3, [pc, #248]	; (8014830 <rcu_clock_freq_get+0xfc>)
 8014736:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014738:	4604      	mov	r4, r0
 801473a:	461f      	mov	r7, r3
 801473c:	b089      	sub	sp, #36	; 0x24
 801473e:	ad04      	add	r5, sp, #16
 8014740:	f103 0610 	add.w	r6, r3, #16
 8014744:	462a      	mov	r2, r5
 8014746:	6818      	ldr	r0, [r3, #0]
 8014748:	6859      	ldr	r1, [r3, #4]
 801474a:	3308      	adds	r3, #8
 801474c:	c203      	stmia	r2!, {r0, r1}
 801474e:	42b3      	cmp	r3, r6
 8014750:	4615      	mov	r5, r2
 8014752:	d1f7      	bne.n	8014744 <rcu_clock_freq_get+0x10>
 8014754:	466b      	mov	r3, sp
 8014756:	6938      	ldr	r0, [r7, #16]
 8014758:	6871      	ldr	r1, [r6, #4]
 801475a:	4a36      	ldr	r2, [pc, #216]	; (8014834 <rcu_clock_freq_get+0x100>)
 801475c:	c303      	stmia	r3!, {r0, r1}
 801475e:	c303      	stmia	r3!, {r0, r1}
 8014760:	6853      	ldr	r3, [r2, #4]
 8014762:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8014766:	2b01      	cmp	r3, #1
 8014768:	d053      	beq.n	8014812 <rcu_clock_freq_get+0xde>
 801476a:	2b02      	cmp	r3, #2
 801476c:	d153      	bne.n	8014816 <rcu_clock_freq_get+0xe2>
 801476e:	6853      	ldr	r3, [r2, #4]
 8014770:	03dd      	lsls	r5, r3, #15
 8014772:	d523      	bpl.n	80147bc <rcu_clock_freq_get+0x88>
 8014774:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8014776:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 801477a:	4b2f      	ldr	r3, [pc, #188]	; (8014838 <rcu_clock_freq_get+0x104>)
 801477c:	d00e      	beq.n	801479c <rcu_clock_freq_get+0x68>
 801477e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8014780:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8014782:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8014786:	f3c0 2003 	ubfx	r0, r0, #8, #4
 801478a:	3101      	adds	r1, #1
 801478c:	280f      	cmp	r0, #15
 801478e:	f100 0502 	add.w	r5, r0, #2
 8014792:	fbb3 f3f1 	udiv	r3, r3, r1
 8014796:	bf08      	it	eq
 8014798:	2514      	moveq	r5, #20
 801479a:	436b      	muls	r3, r5
 801479c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 801479e:	f001 010f 	and.w	r1, r1, #15
 80147a2:	3101      	adds	r1, #1
 80147a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80147a8:	6851      	ldr	r1, [r2, #4]
 80147aa:	6850      	ldr	r0, [r2, #4]
 80147ac:	f3c1 4183 	ubfx	r1, r1, #18, #4
 80147b0:	0080      	lsls	r0, r0, #2
 80147b2:	d505      	bpl.n	80147c0 <rcu_clock_freq_get+0x8c>
 80147b4:	f041 0110 	orr.w	r1, r1, #16
 80147b8:	1c48      	adds	r0, r1, #1
 80147ba:	e007      	b.n	80147cc <rcu_clock_freq_get+0x98>
 80147bc:	4b1f      	ldr	r3, [pc, #124]	; (801483c <rcu_clock_freq_get+0x108>)
 80147be:	e7f3      	b.n	80147a8 <rcu_clock_freq_get+0x74>
 80147c0:	290f      	cmp	r1, #15
 80147c2:	d0f9      	beq.n	80147b8 <rcu_clock_freq_get+0x84>
 80147c4:	290d      	cmp	r1, #13
 80147c6:	f101 0002 	add.w	r0, r1, #2
 80147ca:	d01d      	beq.n	8014808 <rcu_clock_freq_get+0xd4>
 80147cc:	4358      	muls	r0, r3
 80147ce:	6853      	ldr	r3, [r2, #4]
 80147d0:	6851      	ldr	r1, [r2, #4]
 80147d2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80147d6:	6852      	ldr	r2, [r2, #4]
 80147d8:	3320      	adds	r3, #32
 80147da:	446b      	add	r3, sp
 80147dc:	f3c1 2102 	ubfx	r1, r1, #8, #3
 80147e0:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 80147e4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80147e8:	3120      	adds	r1, #32
 80147ea:	3220      	adds	r2, #32
 80147ec:	4469      	add	r1, sp
 80147ee:	446a      	add	r2, sp
 80147f0:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 80147f4:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80147f8:	fa20 f303 	lsr.w	r3, r0, r3
 80147fc:	2c03      	cmp	r4, #3
 80147fe:	d815      	bhi.n	801482c <rcu_clock_freq_get+0xf8>
 8014800:	e8df f004 	tbb	[pc, r4]
 8014804:	110e0b0c 	tstne	lr, ip, lsl #22
 8014808:	2006      	movs	r0, #6
 801480a:	0859      	lsrs	r1, r3, #1
 801480c:	fb00 1003 	mla	r0, r0, r3, r1
 8014810:	e7dd      	b.n	80147ce <rcu_clock_freq_get+0x9a>
 8014812:	4809      	ldr	r0, [pc, #36]	; (8014838 <rcu_clock_freq_get+0x104>)
 8014814:	e7db      	b.n	80147ce <rcu_clock_freq_get+0x9a>
 8014816:	480a      	ldr	r0, [pc, #40]	; (8014840 <rcu_clock_freq_get+0x10c>)
 8014818:	e7d9      	b.n	80147ce <rcu_clock_freq_get+0x9a>
 801481a:	4618      	mov	r0, r3
 801481c:	b009      	add	sp, #36	; 0x24
 801481e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014820:	fa23 f001 	lsr.w	r0, r3, r1
 8014824:	e7fa      	b.n	801481c <rcu_clock_freq_get+0xe8>
 8014826:	fa23 f002 	lsr.w	r0, r3, r2
 801482a:	e7f7      	b.n	801481c <rcu_clock_freq_get+0xe8>
 801482c:	2000      	movs	r0, #0
 801482e:	e7f5      	b.n	801481c <rcu_clock_freq_get+0xe8>
 8014830:	08016089 	stmdaeq	r1, {r0, r3, r7, sp, lr}
 8014834:	40021000 	andmi	r1, r2, r0
 8014838:	017d7840 	cmneq	sp, r0, asr #16
 801483c:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8014840:	007a1200 	rsbseq	r1, sl, r0, lsl #4

08014844 <timer_deinit>:
 8014844:	b508      	push	{r3, lr}
 8014846:	4b2d      	ldr	r3, [pc, #180]	; (80148fc <timer_deinit+0xb8>)
 8014848:	4298      	cmp	r0, r3
 801484a:	d048      	beq.n	80148de <timer_deinit+0x9a>
 801484c:	d816      	bhi.n	801487c <timer_deinit+0x38>
 801484e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014852:	4298      	cmp	r0, r3
 8014854:	d03c      	beq.n	80148d0 <timer_deinit+0x8c>
 8014856:	d807      	bhi.n	8014868 <timer_deinit+0x24>
 8014858:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801485c:	d02a      	beq.n	80148b4 <timer_deinit+0x70>
 801485e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8014862:	4298      	cmp	r0, r3
 8014864:	d02d      	beq.n	80148c2 <timer_deinit+0x7e>
 8014866:	bd08      	pop	{r3, pc}
 8014868:	4b25      	ldr	r3, [pc, #148]	; (8014900 <timer_deinit+0xbc>)
 801486a:	4298      	cmp	r0, r3
 801486c:	d1fb      	bne.n	8014866 <timer_deinit+0x22>
 801486e:	f240 4003 	movw	r0, #1027	; 0x403
 8014872:	f7ff feaa 	bl	80145ca <rcu_periph_reset_enable>
 8014876:	f240 4003 	movw	r0, #1027	; 0x403
 801487a:	e017      	b.n	80148ac <timer_deinit+0x68>
 801487c:	4b21      	ldr	r3, [pc, #132]	; (8014904 <timer_deinit+0xc0>)
 801487e:	4298      	cmp	r0, r3
 8014880:	d00e      	beq.n	80148a0 <timer_deinit+0x5c>
 8014882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014886:	4298      	cmp	r0, r3
 8014888:	d030      	beq.n	80148ec <timer_deinit+0xa8>
 801488a:	f5a3 3390 	sub.w	r3, r3, #73728	; 0x12000
 801488e:	4298      	cmp	r0, r3
 8014890:	d1e9      	bne.n	8014866 <timer_deinit+0x22>
 8014892:	f240 4005 	movw	r0, #1029	; 0x405
 8014896:	f7ff fe98 	bl	80145ca <rcu_periph_reset_enable>
 801489a:	f240 4005 	movw	r0, #1029	; 0x405
 801489e:	e005      	b.n	80148ac <timer_deinit+0x68>
 80148a0:	f240 300b 	movw	r0, #779	; 0x30b
 80148a4:	f7ff fe91 	bl	80145ca <rcu_periph_reset_enable>
 80148a8:	f240 300b 	movw	r0, #779	; 0x30b
 80148ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80148b0:	f7ff be8d 	b.w	80145ce <rcu_periph_reset_disable>
 80148b4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80148b8:	f7ff fe87 	bl	80145ca <rcu_periph_reset_enable>
 80148bc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80148c0:	e7f4      	b.n	80148ac <timer_deinit+0x68>
 80148c2:	f240 4001 	movw	r0, #1025	; 0x401
 80148c6:	f7ff fe80 	bl	80145ca <rcu_periph_reset_enable>
 80148ca:	f240 4001 	movw	r0, #1025	; 0x401
 80148ce:	e7ed      	b.n	80148ac <timer_deinit+0x68>
 80148d0:	f240 4002 	movw	r0, #1026	; 0x402
 80148d4:	f7ff fe79 	bl	80145ca <rcu_periph_reset_enable>
 80148d8:	f240 4002 	movw	r0, #1026	; 0x402
 80148dc:	e7e6      	b.n	80148ac <timer_deinit+0x68>
 80148de:	f240 4004 	movw	r0, #1028	; 0x404
 80148e2:	f7ff fe72 	bl	80145ca <rcu_periph_reset_enable>
 80148e6:	f240 4004 	movw	r0, #1028	; 0x404
 80148ea:	e7df      	b.n	80148ac <timer_deinit+0x68>
 80148ec:	f240 300d 	movw	r0, #781	; 0x30d
 80148f0:	f7ff fe6b 	bl	80145ca <rcu_periph_reset_enable>
 80148f4:	f240 300d 	movw	r0, #781	; 0x30d
 80148f8:	e7d8      	b.n	80148ac <timer_deinit+0x68>
 80148fa:	bf00      	nop
 80148fc:	40001000 	andmi	r1, r0, r0
 8014900:	40000c00 	andmi	r0, r0, r0, lsl #24
 8014904:	40012c00 	andmi	r2, r1, r0, lsl #24

08014908 <timer_init>:
 8014908:	880b      	ldrh	r3, [r1, #0]
 801490a:	6283      	str	r3, [r0, #40]	; 0x28
 801490c:	4b26      	ldr	r3, [pc, #152]	; (80149a8 <timer_init+0xa0>)
 801490e:	4298      	cmp	r0, r3
 8014910:	d018      	beq.n	8014944 <timer_init+0x3c>
 8014912:	f420 6240 	bic.w	r2, r0, #3072	; 0xc00
 8014916:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 801491a:	f420 6380 	bic.w	r3, r0, #1024	; 0x400
 801491e:	d011      	beq.n	8014944 <timer_init+0x3c>
 8014920:	4a22      	ldr	r2, [pc, #136]	; (80149ac <timer_init+0xa4>)
 8014922:	4290      	cmp	r0, r2
 8014924:	d00e      	beq.n	8014944 <timer_init+0x3c>
 8014926:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 801492a:	4290      	cmp	r0, r2
 801492c:	d00a      	beq.n	8014944 <timer_init+0x3c>
 801492e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014932:	4293      	cmp	r3, r2
 8014934:	d006      	beq.n	8014944 <timer_init+0x3c>
 8014936:	f5a2 329c 	sub.w	r2, r2, #79872	; 0x13800
 801493a:	4293      	cmp	r3, r2
 801493c:	d002      	beq.n	8014944 <timer_init+0x3c>
 801493e:	4b1c      	ldr	r3, [pc, #112]	; (80149b0 <timer_init+0xa8>)
 8014940:	4298      	cmp	r0, r3
 8014942:	d10f      	bne.n	8014964 <timer_init+0x5c>
 8014944:	6803      	ldr	r3, [r0, #0]
 8014946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801494a:	6003      	str	r3, [r0, #0]
 801494c:	884b      	ldrh	r3, [r1, #2]
 801494e:	6802      	ldr	r2, [r0, #0]
 8014950:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014954:	4313      	orrs	r3, r2
 8014956:	6003      	str	r3, [r0, #0]
 8014958:	888b      	ldrh	r3, [r1, #4]
 801495a:	6802      	ldr	r2, [r0, #0]
 801495c:	f003 0310 	and.w	r3, r3, #16
 8014960:	4313      	orrs	r3, r2
 8014962:	6003      	str	r3, [r0, #0]
 8014964:	688b      	ldr	r3, [r1, #8]
 8014966:	62c3      	str	r3, [r0, #44]	; 0x2c
 8014968:	4b12      	ldr	r3, [pc, #72]	; (80149b4 <timer_init+0xac>)
 801496a:	4298      	cmp	r0, r3
 801496c:	d003      	beq.n	8014976 <timer_init+0x6e>
 801496e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014972:	4298      	cmp	r0, r3
 8014974:	d104      	bne.n	8014980 <timer_init+0x78>
 8014976:	6943      	ldr	r3, [r0, #20]
 8014978:	f043 0301 	orr.w	r3, r3, #1
 801497c:	6143      	str	r3, [r0, #20]
 801497e:	4770      	bx	lr
 8014980:	6803      	ldr	r3, [r0, #0]
 8014982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014986:	6003      	str	r3, [r0, #0]
 8014988:	898b      	ldrh	r3, [r1, #12]
 801498a:	6802      	ldr	r2, [r0, #0]
 801498c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014990:	4313      	orrs	r3, r2
 8014992:	6003      	str	r3, [r0, #0]
 8014994:	4b04      	ldr	r3, [pc, #16]	; (80149a8 <timer_init+0xa0>)
 8014996:	4298      	cmp	r0, r3
 8014998:	d002      	beq.n	80149a0 <timer_init+0x98>
 801499a:	4b04      	ldr	r3, [pc, #16]	; (80149ac <timer_init+0xa4>)
 801499c:	4298      	cmp	r0, r3
 801499e:	d1ea      	bne.n	8014976 <timer_init+0x6e>
 80149a0:	7b8b      	ldrb	r3, [r1, #14]
 80149a2:	6303      	str	r3, [r0, #48]	; 0x30
 80149a4:	e7e7      	b.n	8014976 <timer_init+0x6e>
 80149a6:	bf00      	nop
 80149a8:	40012c00 	andmi	r2, r1, r0, lsl #24
 80149ac:	40013400 	andmi	r3, r1, r0, lsl #8
 80149b0:	40002000 	andmi	r2, r0, r0
 80149b4:	40001000 	andmi	r1, r0, r0

080149b8 <timer_enable>:
 80149b8:	6803      	ldr	r3, [r0, #0]
 80149ba:	f043 0301 	orr.w	r3, r3, #1
 80149be:	6003      	str	r3, [r0, #0]
 80149c0:	4770      	bx	lr
	...

080149c4 <usart_deinit>:
 80149c4:	b508      	push	{r3, lr}
 80149c6:	4b1d      	ldr	r3, [pc, #116]	; (8014a3c <usart_deinit+0x78>)
 80149c8:	4298      	cmp	r0, r3
 80149ca:	d028      	beq.n	8014a1e <usart_deinit+0x5a>
 80149cc:	d808      	bhi.n	80149e0 <usart_deinit+0x1c>
 80149ce:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80149d2:	4298      	cmp	r0, r3
 80149d4:	d015      	beq.n	8014a02 <usart_deinit+0x3e>
 80149d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80149da:	4298      	cmp	r0, r3
 80149dc:	d018      	beq.n	8014a10 <usart_deinit+0x4c>
 80149de:	bd08      	pop	{r3, pc}
 80149e0:	4b17      	ldr	r3, [pc, #92]	; (8014a40 <usart_deinit+0x7c>)
 80149e2:	4298      	cmp	r0, r3
 80149e4:	d022      	beq.n	8014a2c <usart_deinit+0x68>
 80149e6:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 80149ea:	4298      	cmp	r0, r3
 80149ec:	d1f7      	bne.n	80149de <usart_deinit+0x1a>
 80149ee:	f240 300e 	movw	r0, #782	; 0x30e
 80149f2:	f7ff fdea 	bl	80145ca <rcu_periph_reset_enable>
 80149f6:	f240 300e 	movw	r0, #782	; 0x30e
 80149fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80149fe:	f7ff bde6 	b.w	80145ce <rcu_periph_reset_disable>
 8014a02:	f240 4011 	movw	r0, #1041	; 0x411
 8014a06:	f7ff fde0 	bl	80145ca <rcu_periph_reset_enable>
 8014a0a:	f240 4011 	movw	r0, #1041	; 0x411
 8014a0e:	e7f4      	b.n	80149fa <usart_deinit+0x36>
 8014a10:	f240 4012 	movw	r0, #1042	; 0x412
 8014a14:	f7ff fdd9 	bl	80145ca <rcu_periph_reset_enable>
 8014a18:	f240 4012 	movw	r0, #1042	; 0x412
 8014a1c:	e7ed      	b.n	80149fa <usart_deinit+0x36>
 8014a1e:	f240 4013 	movw	r0, #1043	; 0x413
 8014a22:	f7ff fdd2 	bl	80145ca <rcu_periph_reset_enable>
 8014a26:	f240 4013 	movw	r0, #1043	; 0x413
 8014a2a:	e7e6      	b.n	80149fa <usart_deinit+0x36>
 8014a2c:	f240 4014 	movw	r0, #1044	; 0x414
 8014a30:	f7ff fdcb 	bl	80145ca <rcu_periph_reset_enable>
 8014a34:	f240 4014 	movw	r0, #1044	; 0x414
 8014a38:	e7df      	b.n	80149fa <usart_deinit+0x36>
 8014a3a:	bf00      	nop
 8014a3c:	40004c00 	andmi	r4, r0, r0, lsl #24
 8014a40:	40005000 	andmi	r5, r0, r0

08014a44 <usart_baudrate_set>:
 8014a44:	b538      	push	{r3, r4, r5, lr}
 8014a46:	4b11      	ldr	r3, [pc, #68]	; (8014a8c <usart_baudrate_set+0x48>)
 8014a48:	4604      	mov	r4, r0
 8014a4a:	4298      	cmp	r0, r3
 8014a4c:	460d      	mov	r5, r1
 8014a4e:	d01b      	beq.n	8014a88 <usart_baudrate_set+0x44>
 8014a50:	d809      	bhi.n	8014a66 <usart_baudrate_set+0x22>
 8014a52:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014a56:	4298      	cmp	r0, r3
 8014a58:	d016      	beq.n	8014a88 <usart_baudrate_set+0x44>
 8014a5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014a5e:	4298      	cmp	r0, r3
 8014a60:	d012      	beq.n	8014a88 <usart_baudrate_set+0x44>
 8014a62:	2000      	movs	r0, #0
 8014a64:	e009      	b.n	8014a7a <usart_baudrate_set+0x36>
 8014a66:	4b0a      	ldr	r3, [pc, #40]	; (8014a90 <usart_baudrate_set+0x4c>)
 8014a68:	4298      	cmp	r0, r3
 8014a6a:	d00d      	beq.n	8014a88 <usart_baudrate_set+0x44>
 8014a6c:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8014a70:	4298      	cmp	r0, r3
 8014a72:	d1f6      	bne.n	8014a62 <usart_baudrate_set+0x1e>
 8014a74:	2003      	movs	r0, #3
 8014a76:	f7ff fe5d 	bl	8014734 <rcu_clock_freq_get>
 8014a7a:	eb00 0155 	add.w	r1, r0, r5, lsr #1
 8014a7e:	fbb1 f1f5 	udiv	r1, r1, r5
 8014a82:	b289      	uxth	r1, r1
 8014a84:	60a1      	str	r1, [r4, #8]
 8014a86:	bd38      	pop	{r3, r4, r5, pc}
 8014a88:	2002      	movs	r0, #2
 8014a8a:	e7f4      	b.n	8014a76 <usart_baudrate_set+0x32>
 8014a8c:	40004c00 	andmi	r4, r0, r0, lsl #24
 8014a90:	40005000 	andmi	r5, r0, r0

08014a94 <usart_parity_config>:
 8014a94:	68c3      	ldr	r3, [r0, #12]
 8014a96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8014a9a:	60c3      	str	r3, [r0, #12]
 8014a9c:	68c3      	ldr	r3, [r0, #12]
 8014a9e:	430b      	orrs	r3, r1
 8014aa0:	60c3      	str	r3, [r0, #12]
 8014aa2:	4770      	bx	lr

08014aa4 <usart_word_length_set>:
 8014aa4:	68c3      	ldr	r3, [r0, #12]
 8014aa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014aaa:	60c3      	str	r3, [r0, #12]
 8014aac:	68c3      	ldr	r3, [r0, #12]
 8014aae:	430b      	orrs	r3, r1
 8014ab0:	60c3      	str	r3, [r0, #12]
 8014ab2:	4770      	bx	lr

08014ab4 <usart_stop_bit_set>:
 8014ab4:	6903      	ldr	r3, [r0, #16]
 8014ab6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8014aba:	6103      	str	r3, [r0, #16]
 8014abc:	6903      	ldr	r3, [r0, #16]
 8014abe:	430b      	orrs	r3, r1
 8014ac0:	6103      	str	r3, [r0, #16]
 8014ac2:	4770      	bx	lr

08014ac4 <usart_transmit_config>:
 8014ac4:	68c3      	ldr	r3, [r0, #12]
 8014ac6:	f023 0308 	bic.w	r3, r3, #8
 8014aca:	430b      	orrs	r3, r1
 8014acc:	60c3      	str	r3, [r0, #12]
 8014ace:	4770      	bx	lr

08014ad0 <usart_receive_config>:
 8014ad0:	68c3      	ldr	r3, [r0, #12]
 8014ad2:	f023 0304 	bic.w	r3, r3, #4
 8014ad6:	430b      	orrs	r3, r1
 8014ad8:	60c3      	str	r3, [r0, #12]
 8014ada:	4770      	bx	lr

08014adc <usart_hardware_flow_rts_config>:
 8014adc:	6943      	ldr	r3, [r0, #20]
 8014ade:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014ae2:	430b      	orrs	r3, r1
 8014ae4:	6143      	str	r3, [r0, #20]
 8014ae6:	4770      	bx	lr

08014ae8 <usart_hardware_flow_cts_config>:
 8014ae8:	6943      	ldr	r3, [r0, #20]
 8014aea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014aee:	430b      	orrs	r3, r1
 8014af0:	6143      	str	r3, [r0, #20]
 8014af2:	4770      	bx	lr

08014af4 <usart_flag_get>:
 8014af4:	098b      	lsrs	r3, r1, #6
 8014af6:	581a      	ldr	r2, [r3, r0]
 8014af8:	2301      	movs	r3, #1
 8014afa:	f001 011f 	and.w	r1, r1, #31
 8014afe:	408b      	lsls	r3, r1
 8014b00:	4213      	tst	r3, r2
 8014b02:	bf14      	ite	ne
 8014b04:	2001      	movne	r0, #1
 8014b06:	2000      	moveq	r0, #0
 8014b08:	4770      	bx	lr
	...

08014b0c <emac_eth_recv>:
 8014b0c:	b538      	push	{r3, r4, r5, lr}
 8014b0e:	4605      	mov	r5, r0
 8014b10:	f001 f92a 	bl	8015d68 <enet_rxframe_size_get>
 8014b14:	4604      	mov	r4, r0
 8014b16:	b138      	cbz	r0, 8014b28 <emac_eth_recv+0x1c>
 8014b18:	4b05      	ldr	r3, [pc, #20]	; (8014b30 <emac_eth_recv+0x24>)
 8014b1a:	2105      	movs	r1, #5
 8014b1c:	6818      	ldr	r0, [r3, #0]
 8014b1e:	f001 f8d2 	bl	8015cc6 <enet_desc_information_get>
 8014b22:	6028      	str	r0, [r5, #0]
 8014b24:	4620      	mov	r0, r4
 8014b26:	bd38      	pop	{r3, r4, r5, pc}
 8014b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014b2c:	e7fb      	b.n	8014b26 <emac_eth_recv+0x1a>
 8014b2e:	bf00      	nop
 8014b30:	2000fde4 	andcs	pc, r0, r4, ror #27

08014b34 <emac_free_pkt>:
 8014b34:	2100      	movs	r1, #0
 8014b36:	4608      	mov	r0, r1
 8014b38:	f000 be02 	b.w	8015740 <enet_frame_receive>

08014b3c <emac_eth_send>:
 8014b3c:	f000 be40 	b.w	80157c0 <enet_frame_transmit>

08014b40 <gd32_adc_init()>:
 8014b40:	b510      	push	{r4, lr}
 8014b42:	f240 6009 	movw	r0, #1545	; 0x609
 8014b46:	4c21      	ldr	r4, [pc, #132]	; (8014bcc <gd32_adc_init()+0x8c>)
 8014b48:	f7ff fd24 	bl	8014594 <rcu_periph_clock_enable>
 8014b4c:	2005      	movs	r0, #5
 8014b4e:	f7ff fd57 	bl	8014600 <rcu_adc_clock_config>
 8014b52:	4620      	mov	r0, r4
 8014b54:	2201      	movs	r2, #1
 8014b56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014b5a:	f000 fc31 	bl	80153c0 <adc_special_function_config>
 8014b5e:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8014b62:	4620      	mov	r0, r4
 8014b64:	2102      	movs	r1, #2
 8014b66:	f000 fcca 	bl	80154fe <adc_external_trigger_source_config>
 8014b6a:	2100      	movs	r1, #0
 8014b6c:	4620      	mov	r0, r4
 8014b6e:	f000 fc4f 	bl	8015410 <adc_data_alignment_config>
 8014b72:	2000      	movs	r0, #0
 8014b74:	f000 fc14 	bl	80153a0 <adc_mode_config>
 8014b78:	2202      	movs	r2, #2
 8014b7a:	4620      	mov	r0, r4
 8014b7c:	4611      	mov	r1, r2
 8014b7e:	f000 fc73 	bl	8015468 <adc_channel_length_config>
 8014b82:	4620      	mov	r0, r4
 8014b84:	2307      	movs	r3, #7
 8014b86:	2210      	movs	r2, #16
 8014b88:	2100      	movs	r1, #0
 8014b8a:	f000 fc8a 	bl	80154a2 <adc_inserted_channel_config>
 8014b8e:	2307      	movs	r3, #7
 8014b90:	4620      	mov	r0, r4
 8014b92:	2211      	movs	r2, #17
 8014b94:	2101      	movs	r1, #1
 8014b96:	f000 fc84 	bl	80154a2 <adc_inserted_channel_config>
 8014b9a:	2201      	movs	r2, #1
 8014b9c:	2102      	movs	r1, #2
 8014b9e:	4620      	mov	r0, r4
 8014ba0:	f000 fcbe 	bl	8015520 <adc_external_trigger_config>
 8014ba4:	f000 fc56 	bl	8015454 <adc_tempsensor_vrefint_enable>
 8014ba8:	4620      	mov	r0, r4
 8014baa:	f000 fc3a 	bl	8015422 <adc_enable>
 8014bae:	2100      	movs	r1, #0
 8014bb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014bb4:	f000 fb22 	bl	80151fc <udelay(unsigned int, unsigned int)>
 8014bb8:	4620      	mov	r0, r4
 8014bba:	f000 fc3a 	bl	8015432 <adc_calibration_enable>
 8014bbe:	4620      	mov	r0, r4
 8014bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014bc4:	2102      	movs	r1, #2
 8014bc6:	f000 bcc6 	b.w	8015556 <adc_software_trigger_enable>
 8014bca:	bf00      	nop
 8014bcc:	40012400 	andmi	r2, r1, r0, lsl #8

08014bd0 <_stop() [clone .isra.0]>:
 8014bd0:	b508      	push	{r3, lr}
 8014bd2:	4806      	ldr	r0, [pc, #24]	; (8014bec <_stop() [clone .isra.0]+0x1c>)
 8014bd4:	f001 f98c 	bl	8015ef0 <i2c_stop_on_bus>
 8014bd8:	f640 73ff 	movw	r3, #4095	; 0xfff
 8014bdc:	4904      	ldr	r1, [pc, #16]	; (8014bf0 <_stop() [clone .isra.0]+0x20>)
 8014bde:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 8014be2:	0592      	lsls	r2, r2, #22
 8014be4:	d501      	bpl.n	8014bea <_stop() [clone .isra.0]+0x1a>
 8014be6:	3b01      	subs	r3, #1
 8014be8:	d1f9      	bne.n	8014bde <_stop() [clone .isra.0]+0xe>
 8014bea:	bd08      	pop	{r3, pc}
 8014bec:	40005400 	andmi	r5, r0, r0, lsl #8
 8014bf0:	40005000 	andmi	r5, r0, r0

08014bf4 <gd32_i2c_begin>:
 8014bf4:	b510      	push	{r4, lr}
 8014bf6:	f240 7015 	movw	r0, #1813	; 0x715
 8014bfa:	f7ff fccb 	bl	8014594 <rcu_periph_clock_enable>
 8014bfe:	4c15      	ldr	r4, [pc, #84]	; (8014c54 <gd32_i2c_begin+0x60>)
 8014c00:	f240 6003 	movw	r0, #1539	; 0x603
 8014c04:	f7ff fcc6 	bl	8014594 <rcu_periph_clock_enable>
 8014c08:	f240 6003 	movw	r0, #1539	; 0x603
 8014c0c:	f7ff fcc2 	bl	8014594 <rcu_periph_clock_enable>
 8014c10:	4620      	mov	r0, r4
 8014c12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014c16:	2203      	movs	r2, #3
 8014c18:	211c      	movs	r1, #28
 8014c1a:	f7ff fc23 	bl	8014464 <gpio_init>
 8014c1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014c22:	2203      	movs	r2, #3
 8014c24:	4620      	mov	r0, r4
 8014c26:	211c      	movs	r1, #28
 8014c28:	f7ff fc1c 	bl	8014464 <gpio_init>
 8014c2c:	f5a4 4438 	sub.w	r4, r4, #47104	; 0xb800
 8014c30:	2101      	movs	r1, #1
 8014c32:	2002      	movs	r0, #2
 8014c34:	f7ff fc6a 	bl	801450c <gpio_pin_remap_config>
 8014c38:	4620      	mov	r0, r4
 8014c3a:	4907      	ldr	r1, [pc, #28]	; (8014c58 <gd32_i2c_begin+0x64>)
 8014c3c:	2200      	movs	r2, #0
 8014c3e:	f001 f8d1 	bl	8015de4 <i2c_clock_config>
 8014c42:	4620      	mov	r0, r4
 8014c44:	f001 f94a 	bl	8015edc <i2c_enable>
 8014c48:	4620      	mov	r0, r4
 8014c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c4e:	2101      	movs	r1, #1
 8014c50:	f001 b92a 	b.w	8015ea8 <i2c_ack_config>
 8014c54:	40010c00 	andmi	r0, r1, r0, lsl #24
 8014c58:	00061a80 	andeq	r1, r6, r0, lsl #21

08014c5c <gd32_i2c_set_baudrate>:
 8014c5c:	4601      	mov	r1, r0
 8014c5e:	2200      	movs	r2, #0
 8014c60:	4801      	ldr	r0, [pc, #4]	; (8014c68 <gd32_i2c_set_baudrate+0xc>)
 8014c62:	f001 b8bf 	b.w	8015de4 <i2c_clock_config>
 8014c66:	bf00      	nop
 8014c68:	40005400 	andmi	r5, r0, r0, lsl #8

08014c6c <gd32_i2c_set_address>:
 8014c6c:	4b01      	ldr	r3, [pc, #4]	; (8014c74 <gd32_i2c_set_address+0x8>)
 8014c6e:	0040      	lsls	r0, r0, #1
 8014c70:	7018      	strb	r0, [r3, #0]
 8014c72:	4770      	bx	lr
 8014c74:	20009dd8 	ldrdcs	r9, [r0], -r8

08014c78 <gd32_i2c_write>:
 8014c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c7a:	4604      	mov	r4, r0
 8014c7c:	460f      	mov	r7, r1
 8014c7e:	f640 75ff 	movw	r5, #4095	; 0xfff
 8014c82:	4e2e      	ldr	r6, [pc, #184]	; (8014d3c <gd32_i2c_write+0xc4>)
 8014c84:	f240 6101 	movw	r1, #1537	; 0x601
 8014c88:	4630      	mov	r0, r6
 8014c8a:	f001 f93b 	bl	8015f04 <i2c_flag_get>
 8014c8e:	b9b0      	cbnz	r0, 8014cbe <gd32_i2c_write+0x46>
 8014c90:	482a      	ldr	r0, [pc, #168]	; (8014d3c <gd32_i2c_write+0xc4>)
 8014c92:	f001 f928 	bl	8015ee6 <i2c_start_on_bus>
 8014c96:	f640 75ff 	movw	r5, #4095	; 0xfff
 8014c9a:	4e28      	ldr	r6, [pc, #160]	; (8014d3c <gd32_i2c_write+0xc4>)
 8014c9c:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8014ca0:	4630      	mov	r0, r6
 8014ca2:	f001 f92f 	bl	8015f04 <i2c_flag_get>
 8014ca6:	b190      	cbz	r0, 8014cce <gd32_i2c_write+0x56>
 8014ca8:	4b25      	ldr	r3, [pc, #148]	; (8014d40 <gd32_i2c_write+0xc8>)
 8014caa:	f06f 0201 	mvn.w	r2, #1
 8014cae:	7819      	ldrb	r1, [r3, #0]
 8014cb0:	4822      	ldr	r0, [pc, #136]	; (8014d3c <gd32_i2c_write+0xc4>)
 8014cb2:	f001 f90b 	bl	8015ecc <i2c_master_addressing>
 8014cb6:	f640 75ff 	movw	r5, #4095	; 0xfff
 8014cba:	4e20      	ldr	r6, [pc, #128]	; (8014d3c <gd32_i2c_write+0xc4>)
 8014cbc:	e00c      	b.n	8014cd8 <gd32_i2c_write+0x60>
 8014cbe:	3d01      	subs	r5, #1
 8014cc0:	d1e0      	bne.n	8014c84 <gd32_i2c_write+0xc>
 8014cc2:	f7ff ff85 	bl	8014bd0 <_stop() [clone .isra.0]>
 8014cc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014cca:	4240      	negs	r0, r0
 8014ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014cce:	3d01      	subs	r5, #1
 8014cd0:	d1e4      	bne.n	8014c9c <gd32_i2c_write+0x24>
 8014cd2:	e7f6      	b.n	8014cc2 <gd32_i2c_write+0x4a>
 8014cd4:	3d01      	subs	r5, #1
 8014cd6:	d0f4      	beq.n	8014cc2 <gd32_i2c_write+0x4a>
 8014cd8:	f240 5101 	movw	r1, #1281	; 0x501
 8014cdc:	4630      	mov	r0, r6
 8014cde:	f001 f911 	bl	8015f04 <i2c_flag_get>
 8014ce2:	2800      	cmp	r0, #0
 8014ce4:	d0f6      	beq.n	8014cd4 <gd32_i2c_write+0x5c>
 8014ce6:	f240 5101 	movw	r1, #1281	; 0x501
 8014cea:	4814      	ldr	r0, [pc, #80]	; (8014d3c <gd32_i2c_write+0xc4>)
 8014cec:	f001 f915 	bl	8015f1a <i2c_flag_clear>
 8014cf0:	f640 75ff 	movw	r5, #4095	; 0xfff
 8014cf4:	4e11      	ldr	r6, [pc, #68]	; (8014d3c <gd32_i2c_write+0xc4>)
 8014cf6:	f240 5107 	movw	r1, #1287	; 0x507
 8014cfa:	4630      	mov	r0, r6
 8014cfc:	f001 f902 	bl	8015f04 <i2c_flag_get>
 8014d00:	2801      	cmp	r0, #1
 8014d02:	d107      	bne.n	8014d14 <gd32_i2c_write+0x9c>
 8014d04:	4e0d      	ldr	r6, [pc, #52]	; (8014d3c <gd32_i2c_write+0xc4>)
 8014d06:	4427      	add	r7, r4
 8014d08:	42a7      	cmp	r7, r4
 8014d0a:	d106      	bne.n	8014d1a <gd32_i2c_write+0xa2>
 8014d0c:	f7ff ff60 	bl	8014bd0 <_stop() [clone .isra.0]>
 8014d10:	2000      	movs	r0, #0
 8014d12:	e7da      	b.n	8014cca <gd32_i2c_write+0x52>
 8014d14:	3d01      	subs	r5, #1
 8014d16:	d1ee      	bne.n	8014cf6 <gd32_i2c_write+0x7e>
 8014d18:	e7d3      	b.n	8014cc2 <gd32_i2c_write+0x4a>
 8014d1a:	4630      	mov	r0, r6
 8014d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d20:	f001 f8eb 	bl	8015efa <i2c_data_transmit>
 8014d24:	f640 75ff 	movw	r5, #4095	; 0xfff
 8014d28:	f240 5102 	movw	r1, #1282	; 0x502
 8014d2c:	4630      	mov	r0, r6
 8014d2e:	f001 f8e9 	bl	8015f04 <i2c_flag_get>
 8014d32:	2800      	cmp	r0, #0
 8014d34:	d1e8      	bne.n	8014d08 <gd32_i2c_write+0x90>
 8014d36:	3d01      	subs	r5, #1
 8014d38:	d1f6      	bne.n	8014d28 <gd32_i2c_write+0xb0>
 8014d3a:	e7c2      	b.n	8014cc2 <gd32_i2c_write+0x4a>
 8014d3c:	40005400 	andmi	r5, r0, r0, lsl #8
 8014d40:	20009dd8 	ldrdcs	r9, [r0], -r8

08014d44 <gd32_i2c_read>:
 8014d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d48:	4680      	mov	r8, r0
 8014d4a:	460c      	mov	r4, r1
 8014d4c:	f640 76ff 	movw	r6, #4095	; 0xfff
 8014d50:	4f4b      	ldr	r7, [pc, #300]	; (8014e80 <gd32_i2c_read+0x13c>)
 8014d52:	f240 6101 	movw	r1, #1537	; 0x601
 8014d56:	4638      	mov	r0, r7
 8014d58:	f001 f8d4 	bl	8015f04 <i2c_flag_get>
 8014d5c:	4605      	mov	r5, r0
 8014d5e:	bb08      	cbnz	r0, 8014da4 <gd32_i2c_read+0x60>
 8014d60:	2c02      	cmp	r4, #2
 8014d62:	d103      	bne.n	8014d6c <gd32_i2c_read+0x28>
 8014d64:	4601      	mov	r1, r0
 8014d66:	4846      	ldr	r0, [pc, #280]	; (8014e80 <gd32_i2c_read+0x13c>)
 8014d68:	f001 f8a7 	bl	8015eba <i2c_ackpos_config>
 8014d6c:	4844      	ldr	r0, [pc, #272]	; (8014e80 <gd32_i2c_read+0x13c>)
 8014d6e:	f001 f8ba 	bl	8015ee6 <i2c_start_on_bus>
 8014d72:	f640 76ff 	movw	r6, #4095	; 0xfff
 8014d76:	4f42      	ldr	r7, [pc, #264]	; (8014e80 <gd32_i2c_read+0x13c>)
 8014d78:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8014d7c:	4638      	mov	r0, r7
 8014d7e:	f001 f8c1 	bl	8015f04 <i2c_flag_get>
 8014d82:	b1a8      	cbz	r0, 8014db0 <gd32_i2c_read+0x6c>
 8014d84:	4b3f      	ldr	r3, [pc, #252]	; (8014e84 <gd32_i2c_read+0x140>)
 8014d86:	2201      	movs	r2, #1
 8014d88:	7819      	ldrb	r1, [r3, #0]
 8014d8a:	483d      	ldr	r0, [pc, #244]	; (8014e80 <gd32_i2c_read+0x13c>)
 8014d8c:	f001 f89e 	bl	8015ecc <i2c_master_addressing>
 8014d90:	2c02      	cmp	r4, #2
 8014d92:	d803      	bhi.n	8014d9c <gd32_i2c_read+0x58>
 8014d94:	2100      	movs	r1, #0
 8014d96:	483a      	ldr	r0, [pc, #232]	; (8014e80 <gd32_i2c_read+0x13c>)
 8014d98:	f001 f886 	bl	8015ea8 <i2c_ack_config>
 8014d9c:	f640 76ff 	movw	r6, #4095	; 0xfff
 8014da0:	4f37      	ldr	r7, [pc, #220]	; (8014e80 <gd32_i2c_read+0x13c>)
 8014da2:	e00a      	b.n	8014dba <gd32_i2c_read+0x76>
 8014da4:	3e01      	subs	r6, #1
 8014da6:	d1d4      	bne.n	8014d52 <gd32_i2c_read+0xe>
 8014da8:	f7ff ff12 	bl	8014bd0 <_stop() [clone .isra.0]>
 8014dac:	2504      	movs	r5, #4
 8014dae:	e04d      	b.n	8014e4c <gd32_i2c_read+0x108>
 8014db0:	3e01      	subs	r6, #1
 8014db2:	d1e1      	bne.n	8014d78 <gd32_i2c_read+0x34>
 8014db4:	e7f8      	b.n	8014da8 <gd32_i2c_read+0x64>
 8014db6:	3e01      	subs	r6, #1
 8014db8:	d0f6      	beq.n	8014da8 <gd32_i2c_read+0x64>
 8014dba:	f240 5101 	movw	r1, #1281	; 0x501
 8014dbe:	4638      	mov	r0, r7
 8014dc0:	f001 f8a0 	bl	8015f04 <i2c_flag_get>
 8014dc4:	2800      	cmp	r0, #0
 8014dc6:	d0f6      	beq.n	8014db6 <gd32_i2c_read+0x72>
 8014dc8:	f240 5101 	movw	r1, #1281	; 0x501
 8014dcc:	482c      	ldr	r0, [pc, #176]	; (8014e80 <gd32_i2c_read+0x13c>)
 8014dce:	f001 f8a4 	bl	8015f1a <i2c_flag_clear>
 8014dd2:	2c01      	cmp	r4, #1
 8014dd4:	d102      	bne.n	8014ddc <gd32_i2c_read+0x98>
 8014dd6:	482a      	ldr	r0, [pc, #168]	; (8014e80 <gd32_i2c_read+0x13c>)
 8014dd8:	f001 f88a 	bl	8015ef0 <i2c_stop_on_bus>
 8014ddc:	f640 77ff 	movw	r7, #4095	; 0xfff
 8014de0:	4e27      	ldr	r6, [pc, #156]	; (8014e80 <gd32_i2c_read+0x13c>)
 8014de2:	e022      	b.n	8014e2a <gd32_i2c_read+0xe6>
 8014de4:	2c03      	cmp	r4, #3
 8014de6:	d134      	bne.n	8014e52 <gd32_i2c_read+0x10e>
 8014de8:	f640 79ff 	movw	r9, #4095	; 0xfff
 8014dec:	e002      	b.n	8014df4 <gd32_i2c_read+0xb0>
 8014dee:	f1b9 0901 	subs.w	r9, r9, #1
 8014df2:	d0d9      	beq.n	8014da8 <gd32_i2c_read+0x64>
 8014df4:	f240 5102 	movw	r1, #1282	; 0x502
 8014df8:	4630      	mov	r0, r6
 8014dfa:	f001 f883 	bl	8015f04 <i2c_flag_get>
 8014dfe:	2800      	cmp	r0, #0
 8014e00:	d0f5      	beq.n	8014dee <gd32_i2c_read+0xaa>
 8014e02:	2100      	movs	r1, #0
 8014e04:	4630      	mov	r0, r6
 8014e06:	f001 f84f 	bl	8015ea8 <i2c_ack_config>
 8014e0a:	f240 5106 	movw	r1, #1286	; 0x506
 8014e0e:	4630      	mov	r0, r6
 8014e10:	f001 f878 	bl	8015f04 <i2c_flag_get>
 8014e14:	b138      	cbz	r0, 8014e26 <gd32_i2c_read+0xe2>
 8014e16:	4630      	mov	r0, r6
 8014e18:	f001 f871 	bl	8015efe <i2c_data_receive>
 8014e1c:	f640 77ff 	movw	r7, #4095	; 0xfff
 8014e20:	f808 0b01 	strb.w	r0, [r8], #1
 8014e24:	3c01      	subs	r4, #1
 8014e26:	3f01      	subs	r7, #1
 8014e28:	d0be      	beq.n	8014da8 <gd32_i2c_read+0x64>
 8014e2a:	2c00      	cmp	r4, #0
 8014e2c:	d1da      	bne.n	8014de4 <gd32_i2c_read+0xa0>
 8014e2e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8014e32:	4915      	ldr	r1, [pc, #84]	; (8014e88 <gd32_i2c_read+0x144>)
 8014e34:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 8014e38:	0592      	lsls	r2, r2, #22
 8014e3a:	d41d      	bmi.n	8014e78 <gd32_i2c_read+0x134>
 8014e3c:	2101      	movs	r1, #1
 8014e3e:	4810      	ldr	r0, [pc, #64]	; (8014e80 <gd32_i2c_read+0x13c>)
 8014e40:	f001 f832 	bl	8015ea8 <i2c_ack_config>
 8014e44:	2101      	movs	r1, #1
 8014e46:	480e      	ldr	r0, [pc, #56]	; (8014e80 <gd32_i2c_read+0x13c>)
 8014e48:	f001 f837 	bl	8015eba <i2c_ackpos_config>
 8014e4c:	4628      	mov	r0, r5
 8014e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e52:	2c02      	cmp	r4, #2
 8014e54:	d1d9      	bne.n	8014e0a <gd32_i2c_read+0xc6>
 8014e56:	f640 79ff 	movw	r9, #4095	; 0xfff
 8014e5a:	e002      	b.n	8014e62 <gd32_i2c_read+0x11e>
 8014e5c:	f1b9 0901 	subs.w	r9, r9, #1
 8014e60:	d0a2      	beq.n	8014da8 <gd32_i2c_read+0x64>
 8014e62:	f240 5102 	movw	r1, #1282	; 0x502
 8014e66:	4630      	mov	r0, r6
 8014e68:	f001 f84c 	bl	8015f04 <i2c_flag_get>
 8014e6c:	2800      	cmp	r0, #0
 8014e6e:	d0f5      	beq.n	8014e5c <gd32_i2c_read+0x118>
 8014e70:	4630      	mov	r0, r6
 8014e72:	f001 f83d 	bl	8015ef0 <i2c_stop_on_bus>
 8014e76:	e7c8      	b.n	8014e0a <gd32_i2c_read+0xc6>
 8014e78:	3b01      	subs	r3, #1
 8014e7a:	d1db      	bne.n	8014e34 <gd32_i2c_read+0xf0>
 8014e7c:	e796      	b.n	8014dac <gd32_i2c_read+0x68>
 8014e7e:	bf00      	nop
 8014e80:	40005400 	andmi	r5, r0, r0, lsl #8
 8014e84:	20009dd8 	ldrdcs	r9, [r0], -r8
 8014e88:	40005000 	andmi	r5, r0, r0

08014e8c <gd32_spi_dma_begin()>:
 8014e8c:	b510      	push	{r4, lr}
 8014e8e:	f240 6002 	movw	r0, #1538	; 0x602
 8014e92:	b088      	sub	sp, #32
 8014e94:	f7ff fb7e 	bl	8014594 <rcu_periph_clock_enable>
 8014e98:	f240 6003 	movw	r0, #1539	; 0x603
 8014e9c:	f7ff fb7a 	bl	8014594 <rcu_periph_clock_enable>
 8014ea0:	f240 700f 	movw	r0, #1807	; 0x70f
 8014ea4:	f7ff fb76 	bl	8014594 <rcu_periph_clock_enable>
 8014ea8:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8014eac:	f7ff fb72 	bl	8014594 <rcu_periph_clock_enable>
 8014eb0:	2338      	movs	r3, #56	; 0x38
 8014eb2:	2203      	movs	r2, #3
 8014eb4:	2118      	movs	r1, #24
 8014eb6:	4831      	ldr	r0, [pc, #196]	; (8014f7c <gd32_spi_dma_begin()+0xf0>)
 8014eb8:	f7ff fad4 	bl	8014464 <gpio_init>
 8014ebc:	4c30      	ldr	r4, [pc, #192]	; (8014f80 <gd32_spi_dma_begin()+0xf4>)
 8014ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014ec2:	2203      	movs	r2, #3
 8014ec4:	2118      	movs	r1, #24
 8014ec6:	482f      	ldr	r0, [pc, #188]	; (8014f84 <gd32_spi_dma_begin()+0xf8>)
 8014ec8:	f7ff facc 	bl	8014464 <gpio_init>
 8014ecc:	2101      	movs	r1, #1
 8014ece:	482e      	ldr	r0, [pc, #184]	; (8014f88 <gd32_spi_dma_begin()+0xfc>)
 8014ed0:	f7ff fb1c 	bl	801450c <gpio_pin_remap_config>
 8014ed4:	6823      	ldr	r3, [r4, #0]
 8014ed6:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 8014eda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014ede:	6023      	str	r3, [r4, #0]
 8014ee0:	f7ff fb82 	bl	80145e8 <rcu_pll2_config>
 8014ee4:	6823      	ldr	r3, [r4, #0]
 8014ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014eea:	6023      	str	r3, [r4, #0]
 8014eec:	6823      	ldr	r3, [r4, #0]
 8014eee:	0098      	lsls	r0, r3, #2
 8014ef0:	d5fc      	bpl.n	8014eec <gd32_spi_dma_begin()+0x60>
 8014ef2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8014ef6:	f7ff fba1 	bl	801463c <rcu_i2s2_clock_config>
 8014efa:	4824      	ldr	r0, [pc, #144]	; (8014f8c <gd32_spi_dma_begin()+0x100>)
 8014efc:	f001 f88b 	bl	8016016 <i2s_disable>
 8014f00:	2300      	movs	r3, #0
 8014f02:	4923      	ldr	r1, [pc, #140]	; (8014f90 <gd32_spi_dma_begin()+0x104>)
 8014f04:	461a      	mov	r2, r3
 8014f06:	4821      	ldr	r0, [pc, #132]	; (8014f8c <gd32_spi_dma_begin()+0x100>)
 8014f08:	f001 f828 	bl	8015f5c <i2s_psc_config>
 8014f0c:	2300      	movs	r3, #0
 8014f0e:	2210      	movs	r2, #16
 8014f10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014f14:	481d      	ldr	r0, [pc, #116]	; (8014f8c <gd32_spi_dma_begin()+0x100>)
 8014f16:	f001 f812 	bl	8015f3e <i2s_init>
 8014f1a:	481c      	ldr	r0, [pc, #112]	; (8014f8c <gd32_spi_dma_begin()+0x100>)
 8014f1c:	f001 f876 	bl	801600c <i2s_enable>
 8014f20:	f240 5001 	movw	r0, #1281	; 0x501
 8014f24:	f7ff fb36 	bl	8014594 <rcu_periph_clock_enable>
 8014f28:	2101      	movs	r1, #1
 8014f2a:	481a      	ldr	r0, [pc, #104]	; (8014f94 <gd32_spi_dma_begin()+0x108>)
 8014f2c:	f000 fb20 	bl	8015570 <dma_deinit>
 8014f30:	a801      	add	r0, sp, #4
 8014f32:	f000 fb39 	bl	80155a8 <dma_struct_para_init>
 8014f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014f3a:	2401      	movs	r4, #1
 8014f3c:	9304      	str	r3, [sp, #16]
 8014f3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014f42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014f46:	4914      	ldr	r1, [pc, #80]	; (8014f98 <gd32_spi_dma_begin()+0x10c>)
 8014f48:	9206      	str	r2, [sp, #24]
 8014f4a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8014f4e:	aa01      	add	r2, sp, #4
 8014f50:	4621      	mov	r1, r4
 8014f52:	4810      	ldr	r0, [pc, #64]	; (8014f94 <gd32_spi_dma_begin()+0x108>)
 8014f54:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014f58:	f88d 401e 	strb.w	r4, [sp, #30]
 8014f5c:	f000 fb2e 	bl	80155bc <dma_init>
 8014f60:	4621      	mov	r1, r4
 8014f62:	480c      	ldr	r0, [pc, #48]	; (8014f94 <gd32_spi_dma_begin()+0x108>)
 8014f64:	f000 fb64 	bl	8015630 <dma_circulation_disable>
 8014f68:	4621      	mov	r1, r4
 8014f6a:	480a      	ldr	r0, [pc, #40]	; (8014f94 <gd32_spi_dma_begin()+0x108>)
 8014f6c:	f000 fb70 	bl	8015650 <dma_memory_to_memory_disable>
 8014f70:	2200      	movs	r2, #0
 8014f72:	4b0a      	ldr	r3, [pc, #40]	; (8014f9c <gd32_spi_dma_begin()+0x110>)
 8014f74:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8014f78:	b008      	add	sp, #32
 8014f7a:	bd10      	pop	{r4, pc}
 8014f7c:	40010c00 	andmi	r0, r1, r0, lsl #24
 8014f80:	40021000 	andmi	r1, r2, r0
 8014f84:	40010800 	andmi	r0, r1, r0, lsl #16
 8014f88:	00300400 	eorseq	r0, r0, r0, lsl #8
 8014f8c:	40003c00 	andmi	r3, r0, r0, lsl #24
 8014f90:	00030d40 	andeq	r0, r3, r0, asr #26
 8014f94:	40020400 	andmi	r0, r2, r0, lsl #8
 8014f98:	40003c0c 	andmi	r3, r0, ip, lsl #24
 8014f9c:	40020000 	andmi	r0, r2, r0

08014fa0 <gd32_spi_dma_set_speed_hz(unsigned int)>:
 8014fa0:	b538      	push	{r3, r4, r5, lr}
 8014fa2:	4c08      	ldr	r4, [pc, #32]	; (8014fc4 <gd32_spi_dma_set_speed_hz(unsigned int)+0x24>)
 8014fa4:	4605      	mov	r5, r0
 8014fa6:	4620      	mov	r0, r4
 8014fa8:	f001 f835 	bl	8016016 <i2s_disable>
 8014fac:	2300      	movs	r3, #0
 8014fae:	4620      	mov	r0, r4
 8014fb0:	461a      	mov	r2, r3
 8014fb2:	0969      	lsrs	r1, r5, #5
 8014fb4:	f000 ffd2 	bl	8015f5c <i2s_psc_config>
 8014fb8:	4620      	mov	r0, r4
 8014fba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014fbe:	f001 b825 	b.w	801600c <i2s_enable>
 8014fc2:	bf00      	nop
 8014fc4:	40003c00 	andmi	r3, r0, r0, lsl #24

08014fc8 <gd32_spi_dma_tx_prepare(unsigned int*)>:
 8014fc8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8014fcc:	6003      	str	r3, [r0, #0]
 8014fce:	4801      	ldr	r0, [pc, #4]	; (8014fd4 <gd32_spi_dma_tx_prepare(unsigned int*)+0xc>)
 8014fd0:	4770      	bx	lr
 8014fd2:	bf00      	nop
 8014fd4:	20009ddc 	ldrdcs	r9, [r0], -ip

08014fd8 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>:
 8014fd8:	4a0a      	ldr	r2, [pc, #40]	; (8015004 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x2c>)
 8014fda:	3101      	adds	r1, #1
 8014fdc:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
 8014fe0:	f3c1 014f 	ubfx	r1, r1, #1, #16
 8014fe4:	f023 0301 	bic.w	r3, r3, #1
 8014fe8:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 8014fec:	f043 0301 	orr.w	r3, r3, #1
 8014ff0:	f8c2 0428 	str.w	r0, [r2, #1064]	; 0x428
 8014ff4:	f8c2 1420 	str.w	r1, [r2, #1056]	; 0x420
 8014ff8:	4803      	ldr	r0, [pc, #12]	; (8015008 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x30>)
 8014ffa:	2100      	movs	r1, #0
 8014ffc:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 8015000:	f001 b80e 	b.w	8016020 <spi_dma_enable>
 8015004:	40020000 	andmi	r0, r2, r0
 8015008:	40003c00 	andmi	r3, r0, r0, lsl #24

0801500c <gd32_spi_dma_tx_is_active()>:
 801500c:	4b03      	ldr	r3, [pc, #12]	; (801501c <gd32_spi_dma_tx_is_active()+0x10>)
 801500e:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
 8015012:	3800      	subs	r0, #0
 8015014:	bf18      	it	ne
 8015016:	2001      	movne	r0, #1
 8015018:	4770      	bx	lr
 801501a:	bf00      	nop
 801501c:	40020000 	andmi	r0, r2, r0

08015020 <gd32_uart_begin>:
 8015020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015022:	461e      	mov	r6, r3
 8015024:	4b63      	ldr	r3, [pc, #396]	; (80151b4 <gd32_uart_begin+0x194>)
 8015026:	4604      	mov	r4, r0
 8015028:	4298      	cmp	r0, r3
 801502a:	460f      	mov	r7, r1
 801502c:	4615      	mov	r5, r2
 801502e:	d03b      	beq.n	80150a8 <gd32_uart_begin+0x88>
 8015030:	d80a      	bhi.n	8015048 <gd32_uart_begin+0x28>
 8015032:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015036:	4298      	cmp	r0, r3
 8015038:	d02f      	beq.n	801509a <gd32_uart_begin+0x7a>
 801503a:	f240 7012 	movw	r0, #1810	; 0x712
 801503e:	f7ff faa9 	bl	8014594 <rcu_periph_clock_enable>
 8015042:	f240 6004 	movw	r0, #1540	; 0x604
 8015046:	e008      	b.n	801505a <gd32_uart_begin+0x3a>
 8015048:	4b5b      	ldr	r3, [pc, #364]	; (80151b8 <gd32_uart_begin+0x198>)
 801504a:	4298      	cmp	r0, r3
 801504c:	d02f      	beq.n	80150ae <gd32_uart_begin+0x8e>
 801504e:	f240 600e 	movw	r0, #1550	; 0x60e
 8015052:	f7ff fa9f 	bl	8014594 <rcu_periph_clock_enable>
 8015056:	f240 6003 	movw	r0, #1539	; 0x603
 801505a:	f7ff fa9b 	bl	8014594 <rcu_periph_clock_enable>
 801505e:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8015062:	f7ff fa97 	bl	8014594 <rcu_periph_clock_enable>
 8015066:	4b53      	ldr	r3, [pc, #332]	; (80151b4 <gd32_uart_begin+0x194>)
 8015068:	429c      	cmp	r4, r3
 801506a:	f000 8084 	beq.w	8015176 <gd32_uart_begin+0x156>
 801506e:	d829      	bhi.n	80150c4 <gd32_uart_begin+0xa4>
 8015070:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015074:	429c      	cmp	r4, r3
 8015076:	d071      	beq.n	801515c <gd32_uart_begin+0x13c>
 8015078:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801507c:	2203      	movs	r2, #3
 801507e:	2118      	movs	r1, #24
 8015080:	484e      	ldr	r0, [pc, #312]	; (80151bc <gd32_uart_begin+0x19c>)
 8015082:	f7ff f9ef 	bl	8014464 <gpio_init>
 8015086:	2104      	movs	r1, #4
 8015088:	484c      	ldr	r0, [pc, #304]	; (80151bc <gd32_uart_begin+0x19c>)
 801508a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801508e:	2203      	movs	r2, #3
 8015090:	f7ff f9e8 	bl	8014464 <gpio_init>
 8015094:	2101      	movs	r1, #1
 8015096:	484a      	ldr	r0, [pc, #296]	; (80151c0 <gd32_uart_begin+0x1a0>)
 8015098:	e025      	b.n	80150e6 <gd32_uart_begin+0xc6>
 801509a:	f240 7011 	movw	r0, #1809	; 0x711
 801509e:	f7ff fa79 	bl	8014594 <rcu_periph_clock_enable>
 80150a2:	f240 6002 	movw	r0, #1538	; 0x602
 80150a6:	e7d8      	b.n	801505a <gd32_uart_begin+0x3a>
 80150a8:	f240 7013 	movw	r0, #1811	; 0x713
 80150ac:	e7c7      	b.n	801503e <gd32_uart_begin+0x1e>
 80150ae:	f240 7014 	movw	r0, #1812	; 0x714
 80150b2:	f7ff fa6f 	bl	8014594 <rcu_periph_clock_enable>
 80150b6:	f240 6004 	movw	r0, #1540	; 0x604
 80150ba:	f7ff fa6b 	bl	8014594 <rcu_periph_clock_enable>
 80150be:	f240 6005 	movw	r0, #1541	; 0x605
 80150c2:	e7ca      	b.n	801505a <gd32_uart_begin+0x3a>
 80150c4:	4b3c      	ldr	r3, [pc, #240]	; (80151b8 <gd32_uart_begin+0x198>)
 80150c6:	429c      	cmp	r4, r3
 80150c8:	d062      	beq.n	8015190 <gd32_uart_begin+0x170>
 80150ca:	2340      	movs	r3, #64	; 0x40
 80150cc:	2203      	movs	r2, #3
 80150ce:	2118      	movs	r1, #24
 80150d0:	483c      	ldr	r0, [pc, #240]	; (80151c4 <gd32_uart_begin+0x1a4>)
 80150d2:	f7ff f9c7 	bl	8014464 <gpio_init>
 80150d6:	2104      	movs	r1, #4
 80150d8:	483a      	ldr	r0, [pc, #232]	; (80151c4 <gd32_uart_begin+0x1a4>)
 80150da:	2380      	movs	r3, #128	; 0x80
 80150dc:	2203      	movs	r2, #3
 80150de:	f7ff f9c1 	bl	8014464 <gpio_init>
 80150e2:	2101      	movs	r1, #1
 80150e4:	2004      	movs	r0, #4
 80150e6:	f7ff fa11 	bl	801450c <gpio_pin_remap_config>
 80150ea:	4620      	mov	r0, r4
 80150ec:	f7ff fc6a 	bl	80149c4 <usart_deinit>
 80150f0:	68e3      	ldr	r3, [r4, #12]
 80150f2:	4639      	mov	r1, r7
 80150f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80150f8:	4620      	mov	r0, r4
 80150fa:	60e3      	str	r3, [r4, #12]
 80150fc:	f7ff fca2 	bl	8014a44 <usart_baudrate_set>
 8015100:	f1a5 0309 	sub.w	r3, r5, #9
 8015104:	4259      	negs	r1, r3
 8015106:	4159      	adcs	r1, r3
 8015108:	4620      	mov	r0, r4
 801510a:	0309      	lsls	r1, r1, #12
 801510c:	f7ff fcca 	bl	8014aa4 <usart_word_length_set>
 8015110:	9906      	ldr	r1, [sp, #24]
 8015112:	4620      	mov	r0, r4
 8015114:	1e8a      	subs	r2, r1, #2
 8015116:	4251      	negs	r1, r2
 8015118:	4151      	adcs	r1, r2
 801511a:	0349      	lsls	r1, r1, #13
 801511c:	f7ff fcca 	bl	8014ab4 <usart_stop_bit_set>
 8015120:	2e01      	cmp	r6, #1
 8015122:	d041      	beq.n	80151a8 <gd32_uart_begin+0x188>
 8015124:	2e02      	cmp	r6, #2
 8015126:	d142      	bne.n	80151ae <gd32_uart_begin+0x18e>
 8015128:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801512c:	4620      	mov	r0, r4
 801512e:	f7ff fcb1 	bl	8014a94 <usart_parity_config>
 8015132:	2100      	movs	r1, #0
 8015134:	4620      	mov	r0, r4
 8015136:	f7ff fcd1 	bl	8014adc <usart_hardware_flow_rts_config>
 801513a:	2100      	movs	r1, #0
 801513c:	4620      	mov	r0, r4
 801513e:	f7ff fcd3 	bl	8014ae8 <usart_hardware_flow_cts_config>
 8015142:	2104      	movs	r1, #4
 8015144:	4620      	mov	r0, r4
 8015146:	f7ff fcc3 	bl	8014ad0 <usart_receive_config>
 801514a:	2108      	movs	r1, #8
 801514c:	4620      	mov	r0, r4
 801514e:	f7ff fcb9 	bl	8014ac4 <usart_transmit_config>
 8015152:	68e3      	ldr	r3, [r4, #12]
 8015154:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015158:	60e3      	str	r3, [r4, #12]
 801515a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801515c:	2304      	movs	r3, #4
 801515e:	2203      	movs	r2, #3
 8015160:	2118      	movs	r1, #24
 8015162:	4819      	ldr	r0, [pc, #100]	; (80151c8 <gd32_uart_begin+0x1a8>)
 8015164:	f7ff f97e 	bl	8014464 <gpio_init>
 8015168:	2308      	movs	r3, #8
 801516a:	2203      	movs	r2, #3
 801516c:	2104      	movs	r1, #4
 801516e:	4816      	ldr	r0, [pc, #88]	; (80151c8 <gd32_uart_begin+0x1a8>)
 8015170:	f7ff f978 	bl	8014464 <gpio_init>
 8015174:	e7b9      	b.n	80150ea <gd32_uart_begin+0xca>
 8015176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801517a:	2203      	movs	r2, #3
 801517c:	2118      	movs	r1, #24
 801517e:	480f      	ldr	r0, [pc, #60]	; (80151bc <gd32_uart_begin+0x19c>)
 8015180:	f7ff f970 	bl	8014464 <gpio_init>
 8015184:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015188:	2203      	movs	r2, #3
 801518a:	2104      	movs	r1, #4
 801518c:	480b      	ldr	r0, [pc, #44]	; (80151bc <gd32_uart_begin+0x19c>)
 801518e:	e7ef      	b.n	8015170 <gd32_uart_begin+0x150>
 8015190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015194:	2203      	movs	r2, #3
 8015196:	2118      	movs	r1, #24
 8015198:	4808      	ldr	r0, [pc, #32]	; (80151bc <gd32_uart_begin+0x19c>)
 801519a:	f7ff f963 	bl	8014464 <gpio_init>
 801519e:	2304      	movs	r3, #4
 80151a0:	2203      	movs	r2, #3
 80151a2:	4619      	mov	r1, r3
 80151a4:	4809      	ldr	r0, [pc, #36]	; (80151cc <gd32_uart_begin+0x1ac>)
 80151a6:	e7e3      	b.n	8015170 <gd32_uart_begin+0x150>
 80151a8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80151ac:	e7be      	b.n	801512c <gd32_uart_begin+0x10c>
 80151ae:	2100      	movs	r1, #0
 80151b0:	e7bc      	b.n	801512c <gd32_uart_begin+0x10c>
 80151b2:	bf00      	nop
 80151b4:	40004c00 	andmi	r4, r0, r0, lsl #24
 80151b8:	40005000 	andmi	r5, r0, r0
 80151bc:	40011000 	andmi	r1, r1, r0
 80151c0:	00140010 	andseq	r0, r4, r0, lsl r0
 80151c4:	40010c00 	andmi	r0, r1, r0, lsl #24
 80151c8:	40010800 	andmi	r0, r1, r0, lsl #16
 80151cc:	40011400 	andmi	r1, r1, r0, lsl #8

080151d0 <micros_init()>:
 80151d0:	4770      	bx	lr
	...

080151d4 <udelay_init()>:
 80151d4:	4a07      	ldr	r2, [pc, #28]	; (80151f4 <udelay_init()+0x20>)
 80151d6:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 80151da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80151de:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 80151e2:	2200      	movs	r2, #0
 80151e4:	4b04      	ldr	r3, [pc, #16]	; (80151f8 <udelay_init()+0x24>)
 80151e6:	605a      	str	r2, [r3, #4]
 80151e8:	681a      	ldr	r2, [r3, #0]
 80151ea:	f042 0201 	orr.w	r2, r2, #1
 80151ee:	601a      	str	r2, [r3, #0]
 80151f0:	4770      	bx	lr
 80151f2:	bf00      	nop
 80151f4:	e000ed00 	and	lr, r0, r0, lsl #26
 80151f8:	e0001000 	and	r1, r0, r0

080151fc <udelay(unsigned int, unsigned int)>:
 80151fc:	236c      	movs	r3, #108	; 0x6c
 80151fe:	b530      	push	{r4, r5, lr}
 8015200:	4358      	muls	r0, r3
 8015202:	b909      	cbnz	r1, 8015208 <udelay(unsigned int, unsigned int)+0xc>
 8015204:	4b08      	ldr	r3, [pc, #32]	; (8015228 <udelay(unsigned int, unsigned int)+0x2c>)
 8015206:	6859      	ldr	r1, [r3, #4]
 8015208:	2300      	movs	r3, #0
 801520a:	4c07      	ldr	r4, [pc, #28]	; (8015228 <udelay(unsigned int, unsigned int)+0x2c>)
 801520c:	6862      	ldr	r2, [r4, #4]
 801520e:	4291      	cmp	r1, r2
 8015210:	d0fc      	beq.n	801520c <udelay(unsigned int, unsigned int)+0x10>
 8015212:	bf2a      	itet	cs
 8015214:	f102 35ff 	addcs.w	r5, r2, #4294967295	; 0xffffffff
 8015218:	189b      	addcc	r3, r3, r2
 801521a:	195b      	addcs	r3, r3, r5
 801521c:	1a5b      	subs	r3, r3, r1
 801521e:	4283      	cmp	r3, r0
 8015220:	d300      	bcc.n	8015224 <udelay(unsigned int, unsigned int)+0x28>
 8015222:	bd30      	pop	{r4, r5, pc}
 8015224:	4611      	mov	r1, r2
 8015226:	e7f1      	b.n	801520c <udelay(unsigned int, unsigned int)+0x10>
 8015228:	e0001000 	and	r1, r0, r0

0801522c <emac_start(unsigned char*)>:
 801522c:	b538      	push	{r3, r4, r5, lr}
 801522e:	4605      	mov	r5, r0
 8015230:	f240 6002 	movw	r0, #1538	; 0x602
 8015234:	f7ff f9ae 	bl	8014594 <rcu_periph_clock_enable>
 8015238:	f240 6003 	movw	r0, #1539	; 0x603
 801523c:	f7ff f9aa 	bl	8014594 <rcu_periph_clock_enable>
 8015240:	f240 6004 	movw	r0, #1540	; 0x604
 8015244:	f7ff f9a6 	bl	8014594 <rcu_periph_clock_enable>
 8015248:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 801524c:	f7ff f9a2 	bl	8014594 <rcu_periph_clock_enable>
 8015250:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015254:	2203      	movs	r2, #3
 8015256:	2118      	movs	r1, #24
 8015258:	4843      	ldr	r0, [pc, #268]	; (8015368 <emac_start(unsigned char*)+0x13c>)
 801525a:	f7ff f903 	bl	8014464 <gpio_init>
 801525e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8015262:	f7ff f9c1 	bl	80145e8 <rcu_pll2_config>
 8015266:	201c      	movs	r0, #28
 8015268:	f7ff fa62 	bl	8014730 <rcu_osci_on>
 801526c:	201c      	movs	r0, #28
 801526e:	f7ff f9ff 	bl	8014670 <rcu_osci_stab_wait>
 8015272:	f04f 6030 	mov.w	r0, #184549376	; 0xb000000
 8015276:	f7ff f9ad 	bl	80145d4 <rcu_ckout0_config>
 801527a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 801527e:	f7ff f975 	bl	801456c <gpio_ethernet_phy_select>
 8015282:	2302      	movs	r3, #2
 8015284:	2203      	movs	r2, #3
 8015286:	2104      	movs	r1, #4
 8015288:	4837      	ldr	r0, [pc, #220]	; (8015368 <emac_start(unsigned char*)+0x13c>)
 801528a:	f7ff f8eb 	bl	8014464 <gpio_init>
 801528e:	2304      	movs	r3, #4
 8015290:	2203      	movs	r2, #3
 8015292:	2118      	movs	r1, #24
 8015294:	4834      	ldr	r0, [pc, #208]	; (8015368 <emac_start(unsigned char*)+0x13c>)
 8015296:	f7ff f8e5 	bl	8014464 <gpio_init>
 801529a:	2380      	movs	r3, #128	; 0x80
 801529c:	2203      	movs	r2, #3
 801529e:	2104      	movs	r1, #4
 80152a0:	4831      	ldr	r0, [pc, #196]	; (8015368 <emac_start(unsigned char*)+0x13c>)
 80152a2:	f7ff f8df 	bl	8014464 <gpio_init>
 80152a6:	2302      	movs	r3, #2
 80152a8:	2203      	movs	r2, #3
 80152aa:	2118      	movs	r1, #24
 80152ac:	482f      	ldr	r0, [pc, #188]	; (801536c <emac_start(unsigned char*)+0x140>)
 80152ae:	f7ff f8d9 	bl	8014464 <gpio_init>
 80152b2:	2310      	movs	r3, #16
 80152b4:	2203      	movs	r2, #3
 80152b6:	2104      	movs	r1, #4
 80152b8:	482c      	ldr	r0, [pc, #176]	; (801536c <emac_start(unsigned char*)+0x140>)
 80152ba:	f7ff f8d3 	bl	8014464 <gpio_init>
 80152be:	2320      	movs	r3, #32
 80152c0:	2203      	movs	r2, #3
 80152c2:	2104      	movs	r1, #4
 80152c4:	4829      	ldr	r0, [pc, #164]	; (801536c <emac_start(unsigned char*)+0x140>)
 80152c6:	f7ff f8cd 	bl	8014464 <gpio_init>
 80152ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80152ce:	2203      	movs	r2, #3
 80152d0:	2118      	movs	r1, #24
 80152d2:	4827      	ldr	r0, [pc, #156]	; (8015370 <emac_start(unsigned char*)+0x144>)
 80152d4:	f7ff f8c6 	bl	8014464 <gpio_init>
 80152d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80152dc:	2203      	movs	r2, #3
 80152de:	2118      	movs	r1, #24
 80152e0:	4823      	ldr	r0, [pc, #140]	; (8015370 <emac_start(unsigned char*)+0x144>)
 80152e2:	f7ff f8bf 	bl	8014464 <gpio_init>
 80152e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80152ea:	2203      	movs	r2, #3
 80152ec:	2118      	movs	r1, #24
 80152ee:	4820      	ldr	r0, [pc, #128]	; (8015370 <emac_start(unsigned char*)+0x144>)
 80152f0:	f7ff f8b8 	bl	8014464 <gpio_init>
 80152f4:	f240 500e 	movw	r0, #1294	; 0x50e
 80152f8:	f7ff f94c 	bl	8014594 <rcu_periph_clock_enable>
 80152fc:	f240 500f 	movw	r0, #1295	; 0x50f
 8015300:	f7ff f948 	bl	8014594 <rcu_periph_clock_enable>
 8015304:	f44f 60a2 	mov.w	r0, #1296	; 0x510
 8015308:	f7ff f944 	bl	8014594 <rcu_periph_clock_enable>
 801530c:	f000 fd5c 	bl	8015dc8 <enet_deinit>
 8015310:	f000 f9ba 	bl	8015688 <enet_software_reset>
 8015314:	4604      	mov	r4, r0
 8015316:	b138      	cbz	r0, 8015328 <emac_start(unsigned char*)+0xfc>
 8015318:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801531c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8015320:	2001      	movs	r0, #1
 8015322:	f000 fb35 	bl	8015990 <enet_init>
 8015326:	4604      	mov	r4, r0
 8015328:	4628      	mov	r0, r5
 801532a:	f000 fe83 	bl	8016034 <mac_address_get(unsigned char*)>
 801532e:	4629      	mov	r1, r5
 8015330:	2000      	movs	r0, #0
 8015332:	f000 fa8d 	bl	8015850 <enet_mac_address_set>
 8015336:	f44f 00e0 	mov.w	r0, #7340032	; 0x700000
 801533a:	f000 f9b9 	bl	80156b0 <enet_descriptors_chain_init>
 801533e:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
 8015342:	f000 f9b5 	bl	80156b0 <enet_descriptors_chain_init>
 8015346:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 801534a:	480a      	ldr	r0, [pc, #40]	; (8015374 <emac_start(unsigned char*)+0x148>)
 801534c:	f000 fa7a 	bl	8015844 <enet_transmit_checksum_config>
 8015350:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8015354:	4808      	ldr	r0, [pc, #32]	; (8015378 <emac_start(unsigned char*)+0x14c>)
 8015356:	f000 fa75 	bl	8015844 <enet_transmit_checksum_config>
 801535a:	f000 fcad 	bl	8015cb8 <enet_enable>
 801535e:	fab4 f084 	clz	r0, r4
 8015362:	0940      	lsrs	r0, r0, #5
 8015364:	4240      	negs	r0, r0
 8015366:	bd38      	pop	{r3, r4, r5, pc}
 8015368:	40010800 	andmi	r0, r1, r0, lsl #16
 801536c:	40011000 	andmi	r1, r1, r0
 8015370:	40010c00 	andmi	r0, r1, r0, lsl #24
 8015374:	20013a30 	andcs	r3, r1, r0, lsr sl
 8015378:	20013a40 	andcs	r3, r1, r0, asr #20

0801537c <net::link_register_read()>:
 801537c:	b507      	push	{r0, r1, r2, lr}
 801537e:	2201      	movs	r2, #1
 8015380:	f10d 0306 	add.w	r3, sp, #6
 8015384:	4611      	mov	r1, r2
 8015386:	2000      	movs	r0, #0
 8015388:	f000 fa7a 	bl	8015880 <enet_phy_write_read>
 801538c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8015390:	f080 0004 	eor.w	r0, r0, #4
 8015394:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8015398:	b003      	add	sp, #12
 801539a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080153a0 <adc_mode_config>:
 80153a0:	4b06      	ldr	r3, [pc, #24]	; (80153bc <adc_mode_config+0x1c>)
 80153a2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80153a6:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80153aa:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80153ae:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80153b2:	4302      	orrs	r2, r0
 80153b4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80153b8:	4770      	bx	lr
 80153ba:	bf00      	nop
 80153bc:	40012000 	andmi	r2, r1, r0

080153c0 <adc_special_function_config>:
 80153c0:	b510      	push	{r4, lr}
 80153c2:	f401 7380 	and.w	r3, r1, #256	; 0x100
 80153c6:	f401 6480 	and.w	r4, r1, #1024	; 0x400
 80153ca:	f001 0102 	and.w	r1, r1, #2
 80153ce:	b17a      	cbz	r2, 80153f0 <adc_special_function_config+0x30>
 80153d0:	b11b      	cbz	r3, 80153da <adc_special_function_config+0x1a>
 80153d2:	6843      	ldr	r3, [r0, #4]
 80153d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80153d8:	6043      	str	r3, [r0, #4]
 80153da:	b11c      	cbz	r4, 80153e4 <adc_special_function_config+0x24>
 80153dc:	6843      	ldr	r3, [r0, #4]
 80153de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80153e2:	6043      	str	r3, [r0, #4]
 80153e4:	b119      	cbz	r1, 80153ee <adc_special_function_config+0x2e>
 80153e6:	6883      	ldr	r3, [r0, #8]
 80153e8:	f043 0302 	orr.w	r3, r3, #2
 80153ec:	6083      	str	r3, [r0, #8]
 80153ee:	bd10      	pop	{r4, pc}
 80153f0:	b11b      	cbz	r3, 80153fa <adc_special_function_config+0x3a>
 80153f2:	6843      	ldr	r3, [r0, #4]
 80153f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80153f8:	6043      	str	r3, [r0, #4]
 80153fa:	b11c      	cbz	r4, 8015404 <adc_special_function_config+0x44>
 80153fc:	6843      	ldr	r3, [r0, #4]
 80153fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8015402:	6043      	str	r3, [r0, #4]
 8015404:	2900      	cmp	r1, #0
 8015406:	d0f2      	beq.n	80153ee <adc_special_function_config+0x2e>
 8015408:	6883      	ldr	r3, [r0, #8]
 801540a:	f023 0302 	bic.w	r3, r3, #2
 801540e:	e7ed      	b.n	80153ec <adc_special_function_config+0x2c>

08015410 <adc_data_alignment_config>:
 8015410:	6883      	ldr	r3, [r0, #8]
 8015412:	b119      	cbz	r1, 801541c <adc_data_alignment_config+0xc>
 8015414:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015418:	6083      	str	r3, [r0, #8]
 801541a:	4770      	bx	lr
 801541c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015420:	e7fa      	b.n	8015418 <adc_data_alignment_config+0x8>

08015422 <adc_enable>:
 8015422:	6883      	ldr	r3, [r0, #8]
 8015424:	07db      	lsls	r3, r3, #31
 8015426:	bf5e      	ittt	pl
 8015428:	6883      	ldrpl	r3, [r0, #8]
 801542a:	f043 0301 	orrpl.w	r3, r3, #1
 801542e:	6083      	strpl	r3, [r0, #8]
 8015430:	4770      	bx	lr

08015432 <adc_calibration_enable>:
 8015432:	6883      	ldr	r3, [r0, #8]
 8015434:	f100 0208 	add.w	r2, r0, #8
 8015438:	f043 0308 	orr.w	r3, r3, #8
 801543c:	6083      	str	r3, [r0, #8]
 801543e:	6813      	ldr	r3, [r2, #0]
 8015440:	0719      	lsls	r1, r3, #28
 8015442:	d4fc      	bmi.n	801543e <adc_calibration_enable+0xc>
 8015444:	6883      	ldr	r3, [r0, #8]
 8015446:	f043 0304 	orr.w	r3, r3, #4
 801544a:	6083      	str	r3, [r0, #8]
 801544c:	6813      	ldr	r3, [r2, #0]
 801544e:	075b      	lsls	r3, r3, #29
 8015450:	d4fc      	bmi.n	801544c <adc_calibration_enable+0x1a>
 8015452:	4770      	bx	lr

08015454 <adc_tempsensor_vrefint_enable>:
 8015454:	4a03      	ldr	r2, [pc, #12]	; (8015464 <adc_tempsensor_vrefint_enable+0x10>)
 8015456:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 801545a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801545e:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
 8015462:	4770      	bx	lr
 8015464:	40012000 	andmi	r2, r1, r0

08015468 <adc_channel_length_config>:
 8015468:	2901      	cmp	r1, #1
 801546a:	d002      	beq.n	8015472 <adc_channel_length_config+0xa>
 801546c:	2902      	cmp	r1, #2
 801546e:	d00c      	beq.n	801548a <adc_channel_length_config+0x22>
 8015470:	4770      	bx	lr
 8015472:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015474:	3a01      	subs	r2, #1
 8015476:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801547a:	62c3      	str	r3, [r0, #44]	; 0x2c
 801547c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801547e:	0512      	lsls	r2, r2, #20
 8015480:	f402 0270 	and.w	r2, r2, #15728640	; 0xf00000
 8015484:	431a      	orrs	r2, r3
 8015486:	62c2      	str	r2, [r0, #44]	; 0x2c
 8015488:	4770      	bx	lr
 801548a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801548c:	3a01      	subs	r2, #1
 801548e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8015492:	6383      	str	r3, [r0, #56]	; 0x38
 8015494:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8015496:	0512      	lsls	r2, r2, #20
 8015498:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 801549c:	431a      	orrs	r2, r3
 801549e:	6382      	str	r2, [r0, #56]	; 0x38
 80154a0:	4770      	bx	lr

080154a2 <adc_inserted_channel_config>:
 80154a2:	b530      	push	{r4, r5, lr}
 80154a4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80154a6:	6b85      	ldr	r5, [r0, #56]	; 0x38
 80154a8:	f3c4 5401 	ubfx	r4, r4, #20, #2
 80154ac:	1a61      	subs	r1, r4, r1
 80154ae:	f06f 0404 	mvn.w	r4, #4
 80154b2:	4361      	muls	r1, r4
 80154b4:	241f      	movs	r4, #31
 80154b6:	310f      	adds	r1, #15
 80154b8:	408c      	lsls	r4, r1
 80154ba:	ea25 0504 	bic.w	r5, r5, r4
 80154be:	fa02 f101 	lsl.w	r1, r2, r1
 80154c2:	4329      	orrs	r1, r5
 80154c4:	2a09      	cmp	r2, #9
 80154c6:	6381      	str	r1, [r0, #56]	; 0x38
 80154c8:	d80b      	bhi.n	80154e2 <adc_inserted_channel_config+0x40>
 80154ca:	2407      	movs	r4, #7
 80154cc:	6901      	ldr	r1, [r0, #16]
 80154ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80154d2:	4094      	lsls	r4, r2
 80154d4:	ea21 0104 	bic.w	r1, r1, r4
 80154d8:	fa03 f202 	lsl.w	r2, r3, r2
 80154dc:	430a      	orrs	r2, r1
 80154de:	6102      	str	r2, [r0, #16]
 80154e0:	bd30      	pop	{r4, r5, pc}
 80154e2:	2a11      	cmp	r2, #17
 80154e4:	d8fc      	bhi.n	80154e0 <adc_inserted_channel_config+0x3e>
 80154e6:	2407      	movs	r4, #7
 80154e8:	3a0a      	subs	r2, #10
 80154ea:	68c1      	ldr	r1, [r0, #12]
 80154ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80154f0:	4094      	lsls	r4, r2
 80154f2:	ea21 0104 	bic.w	r1, r1, r4
 80154f6:	4093      	lsls	r3, r2
 80154f8:	430b      	orrs	r3, r1
 80154fa:	60c3      	str	r3, [r0, #12]
 80154fc:	e7f0      	b.n	80154e0 <adc_inserted_channel_config+0x3e>

080154fe <adc_external_trigger_source_config>:
 80154fe:	2901      	cmp	r1, #1
 8015500:	d002      	beq.n	8015508 <adc_external_trigger_source_config+0xa>
 8015502:	2902      	cmp	r1, #2
 8015504:	d008      	beq.n	8015518 <adc_external_trigger_source_config+0x1a>
 8015506:	4770      	bx	lr
 8015508:	6883      	ldr	r3, [r0, #8]
 801550a:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 801550e:	6083      	str	r3, [r0, #8]
 8015510:	6883      	ldr	r3, [r0, #8]
 8015512:	4313      	orrs	r3, r2
 8015514:	6083      	str	r3, [r0, #8]
 8015516:	4770      	bx	lr
 8015518:	6883      	ldr	r3, [r0, #8]
 801551a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801551e:	e7f6      	b.n	801550e <adc_external_trigger_source_config+0x10>

08015520 <adc_external_trigger_config>:
 8015520:	f001 0301 	and.w	r3, r1, #1
 8015524:	f001 0102 	and.w	r1, r1, #2
 8015528:	b152      	cbz	r2, 8015540 <adc_external_trigger_config+0x20>
 801552a:	b11b      	cbz	r3, 8015534 <adc_external_trigger_config+0x14>
 801552c:	6883      	ldr	r3, [r0, #8]
 801552e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015532:	6083      	str	r3, [r0, #8]
 8015534:	b119      	cbz	r1, 801553e <adc_external_trigger_config+0x1e>
 8015536:	6883      	ldr	r3, [r0, #8]
 8015538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801553c:	6083      	str	r3, [r0, #8]
 801553e:	4770      	bx	lr
 8015540:	b11b      	cbz	r3, 801554a <adc_external_trigger_config+0x2a>
 8015542:	6883      	ldr	r3, [r0, #8]
 8015544:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015548:	6083      	str	r3, [r0, #8]
 801554a:	2900      	cmp	r1, #0
 801554c:	d0f7      	beq.n	801553e <adc_external_trigger_config+0x1e>
 801554e:	6883      	ldr	r3, [r0, #8]
 8015550:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8015554:	e7f2      	b.n	801553c <adc_external_trigger_config+0x1c>

08015556 <adc_software_trigger_enable>:
 8015556:	07ca      	lsls	r2, r1, #31
 8015558:	bf42      	ittt	mi
 801555a:	6883      	ldrmi	r3, [r0, #8]
 801555c:	f443 0380 	orrmi.w	r3, r3, #4194304	; 0x400000
 8015560:	6083      	strmi	r3, [r0, #8]
 8015562:	078b      	lsls	r3, r1, #30
 8015564:	bf42      	ittt	mi
 8015566:	6883      	ldrmi	r3, [r0, #8]
 8015568:	f443 1300 	orrmi.w	r3, r3, #2097152	; 0x200000
 801556c:	6083      	strmi	r3, [r0, #8]
 801556e:	4770      	bx	lr

08015570 <dma_deinit>:
 8015570:	4b0c      	ldr	r3, [pc, #48]	; (80155a4 <dma_deinit+0x34>)
 8015572:	4298      	cmp	r0, r3
 8015574:	d102      	bne.n	801557c <dma_deinit+0xc>
 8015576:	2904      	cmp	r1, #4
 8015578:	d900      	bls.n	801557c <dma_deinit+0xc>
 801557a:	e7fe      	b.n	801557a <dma_deinit+0xa>
 801557c:	2314      	movs	r3, #20
 801557e:	fb03 0301 	mla	r3, r3, r1, r0
 8015582:	689a      	ldr	r2, [r3, #8]
 8015584:	0089      	lsls	r1, r1, #2
 8015586:	f022 0201 	bic.w	r2, r2, #1
 801558a:	609a      	str	r2, [r3, #8]
 801558c:	2200      	movs	r2, #0
 801558e:	609a      	str	r2, [r3, #8]
 8015590:	60da      	str	r2, [r3, #12]
 8015592:	611a      	str	r2, [r3, #16]
 8015594:	615a      	str	r2, [r3, #20]
 8015596:	230f      	movs	r3, #15
 8015598:	6842      	ldr	r2, [r0, #4]
 801559a:	408b      	lsls	r3, r1
 801559c:	4313      	orrs	r3, r2
 801559e:	6043      	str	r3, [r0, #4]
 80155a0:	4770      	bx	lr
 80155a2:	bf00      	nop
 80155a4:	40020400 	andmi	r0, r2, r0, lsl #8

080155a8 <dma_struct_para_init>:
 80155a8:	2300      	movs	r3, #0
 80155aa:	e9c0 3300 	strd	r3, r3, [r0]
 80155ae:	e9c0 3302 	strd	r3, r3, [r0, #8]
 80155b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80155b6:	8303      	strh	r3, [r0, #24]
 80155b8:	7683      	strb	r3, [r0, #26]
 80155ba:	4770      	bx	lr

080155bc <dma_init>:
 80155bc:	4b1b      	ldr	r3, [pc, #108]	; (801562c <dma_init+0x70>)
 80155be:	b510      	push	{r4, lr}
 80155c0:	4298      	cmp	r0, r3
 80155c2:	d102      	bne.n	80155ca <dma_init+0xe>
 80155c4:	2904      	cmp	r1, #4
 80155c6:	d900      	bls.n	80155ca <dma_init+0xe>
 80155c8:	e7fe      	b.n	80155c8 <dma_init+0xc>
 80155ca:	2314      	movs	r3, #20
 80155cc:	fb03 0101 	mla	r1, r3, r1, r0
 80155d0:	6813      	ldr	r3, [r2, #0]
 80155d2:	610b      	str	r3, [r1, #16]
 80155d4:	6893      	ldr	r3, [r2, #8]
 80155d6:	614b      	str	r3, [r1, #20]
 80155d8:	8a13      	ldrh	r3, [r2, #16]
 80155da:	60cb      	str	r3, [r1, #12]
 80155dc:	68d4      	ldr	r4, [r2, #12]
 80155de:	6853      	ldr	r3, [r2, #4]
 80155e0:	6888      	ldr	r0, [r1, #8]
 80155e2:	4323      	orrs	r3, r4
 80155e4:	6954      	ldr	r4, [r2, #20]
 80155e6:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 80155ea:	4323      	orrs	r3, r4
 80155ec:	4303      	orrs	r3, r0
 80155ee:	608b      	str	r3, [r1, #8]
 80155f0:	7e13      	ldrb	r3, [r2, #24]
 80155f2:	2b01      	cmp	r3, #1
 80155f4:	688b      	ldr	r3, [r1, #8]
 80155f6:	bf0c      	ite	eq
 80155f8:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 80155fc:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8015600:	608b      	str	r3, [r1, #8]
 8015602:	7e53      	ldrb	r3, [r2, #25]
 8015604:	2b01      	cmp	r3, #1
 8015606:	688b      	ldr	r3, [r1, #8]
 8015608:	bf0c      	ite	eq
 801560a:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
 801560e:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 8015612:	608b      	str	r3, [r1, #8]
 8015614:	7e93      	ldrb	r3, [r2, #26]
 8015616:	b923      	cbnz	r3, 8015622 <dma_init+0x66>
 8015618:	688b      	ldr	r3, [r1, #8]
 801561a:	f023 0310 	bic.w	r3, r3, #16
 801561e:	608b      	str	r3, [r1, #8]
 8015620:	bd10      	pop	{r4, pc}
 8015622:	688b      	ldr	r3, [r1, #8]
 8015624:	f043 0310 	orr.w	r3, r3, #16
 8015628:	e7f9      	b.n	801561e <dma_init+0x62>
 801562a:	bf00      	nop
 801562c:	40020400 	andmi	r0, r2, r0, lsl #8

08015630 <dma_circulation_disable>:
 8015630:	4b06      	ldr	r3, [pc, #24]	; (801564c <dma_circulation_disable+0x1c>)
 8015632:	4298      	cmp	r0, r3
 8015634:	d102      	bne.n	801563c <dma_circulation_disable+0xc>
 8015636:	2904      	cmp	r1, #4
 8015638:	d900      	bls.n	801563c <dma_circulation_disable+0xc>
 801563a:	e7fe      	b.n	801563a <dma_circulation_disable+0xa>
 801563c:	2314      	movs	r3, #20
 801563e:	4359      	muls	r1, r3
 8015640:	3008      	adds	r0, #8
 8015642:	580b      	ldr	r3, [r1, r0]
 8015644:	f023 0320 	bic.w	r3, r3, #32
 8015648:	500b      	str	r3, [r1, r0]
 801564a:	4770      	bx	lr
 801564c:	40020400 	andmi	r0, r2, r0, lsl #8

08015650 <dma_memory_to_memory_disable>:
 8015650:	4b06      	ldr	r3, [pc, #24]	; (801566c <dma_memory_to_memory_disable+0x1c>)
 8015652:	4298      	cmp	r0, r3
 8015654:	d102      	bne.n	801565c <dma_memory_to_memory_disable+0xc>
 8015656:	2904      	cmp	r1, #4
 8015658:	d900      	bls.n	801565c <dma_memory_to_memory_disable+0xc>
 801565a:	e7fe      	b.n	801565a <dma_memory_to_memory_disable+0xa>
 801565c:	2314      	movs	r3, #20
 801565e:	4359      	muls	r1, r3
 8015660:	3008      	adds	r0, #8
 8015662:	580b      	ldr	r3, [r1, r0]
 8015664:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8015668:	500b      	str	r3, [r1, r0]
 801566a:	4770      	bx	lr
 801566c:	40020400 	andmi	r0, r2, r0, lsl #8

08015670 <enet_delay>:
 8015670:	2300      	movs	r3, #0
 8015672:	b082      	sub	sp, #8
 8015674:	9301      	str	r3, [sp, #4]
 8015676:	9001      	str	r0, [sp, #4]
 8015678:	9b01      	ldr	r3, [sp, #4]
 801567a:	b90b      	cbnz	r3, 8015680 <enet_delay+0x10>
 801567c:	b002      	add	sp, #8
 801567e:	4770      	bx	lr
 8015680:	9b01      	ldr	r3, [sp, #4]
 8015682:	3b01      	subs	r3, #1
 8015684:	9301      	str	r3, [sp, #4]
 8015686:	e7f7      	b.n	8015678 <enet_delay+0x8>

08015688 <enet_software_reset>:
 8015688:	4b07      	ldr	r3, [pc, #28]	; (80156a8 <enet_software_reset+0x20>)
 801568a:	681a      	ldr	r2, [r3, #0]
 801568c:	f042 0201 	orr.w	r2, r2, #1
 8015690:	601a      	str	r2, [r3, #0]
 8015692:	4a06      	ldr	r2, [pc, #24]	; (80156ac <enet_software_reset+0x24>)
 8015694:	6819      	ldr	r1, [r3, #0]
 8015696:	07c9      	lsls	r1, r1, #31
 8015698:	d501      	bpl.n	801569e <enet_software_reset+0x16>
 801569a:	3a01      	subs	r2, #1
 801569c:	d1fa      	bne.n	8015694 <enet_software_reset+0xc>
 801569e:	6818      	ldr	r0, [r3, #0]
 80156a0:	43c0      	mvns	r0, r0
 80156a2:	f000 0001 	and.w	r0, r0, #1
 80156a6:	4770      	bx	lr
 80156a8:	40029000 	andmi	r9, r2, r0
 80156ac:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

080156b0 <enet_descriptors_chain_init>:
 80156b0:	f5b0 0fe0 	cmp.w	r0, #7340032	; 0x700000
 80156b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80156b6:	4a19      	ldr	r2, [pc, #100]	; (801571c <enet_descriptors_chain_init+0x6c>)
 80156b8:	d125      	bne.n	8015706 <enet_descriptors_chain_init+0x56>
 80156ba:	2500      	movs	r5, #0
 80156bc:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 80156c0:	2002      	movs	r0, #2
 80156c2:	4b17      	ldr	r3, [pc, #92]	; (8015720 <enet_descriptors_chain_init+0x70>)
 80156c4:	4c17      	ldr	r4, [pc, #92]	; (8015724 <enet_descriptors_chain_init+0x74>)
 80156c6:	6113      	str	r3, [r2, #16]
 80156c8:	4a17      	ldr	r2, [pc, #92]	; (8015728 <enet_descriptors_chain_init+0x78>)
 80156ca:	6013      	str	r3, [r2, #0]
 80156cc:	2200      	movs	r2, #0
 80156ce:	f240 5ef4 	movw	lr, #1524	; 0x5f4
 80156d2:	4916      	ldr	r1, [pc, #88]	; (801572c <enet_descriptors_chain_init+0x7c>)
 80156d4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80156d8:	600a      	str	r2, [r1, #0]
 80156da:	4915      	ldr	r1, [pc, #84]	; (8015730 <enet_descriptors_chain_init+0x80>)
 80156dc:	600a      	str	r2, [r1, #0]
 80156de:	f103 0110 	add.w	r1, r3, #16
 80156e2:	fb0e 4702 	mla	r7, lr, r2, r4
 80156e6:	f841 7c08 	str.w	r7, [r1, #-8]
 80156ea:	4594      	cmp	ip, r2
 80156ec:	bf94      	ite	ls
 80156ee:	461f      	movls	r7, r3
 80156f0:	460f      	movhi	r7, r1
 80156f2:	3201      	adds	r2, #1
 80156f4:	4290      	cmp	r0, r2
 80156f6:	e941 6504 	strd	r6, r5, [r1, #-16]
 80156fa:	f841 7c04 	str.w	r7, [r1, #-4]
 80156fe:	f101 0110 	add.w	r1, r1, #16
 8015702:	d1ee      	bne.n	80156e2 <enet_descriptors_chain_init+0x32>
 8015704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015706:	4b0b      	ldr	r3, [pc, #44]	; (8015734 <enet_descriptors_chain_init+0x84>)
 8015708:	f244 55f4 	movw	r5, #17908	; 0x45f4
 801570c:	60d3      	str	r3, [r2, #12]
 801570e:	4a0a      	ldr	r2, [pc, #40]	; (8015738 <enet_descriptors_chain_init+0x88>)
 8015710:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8015714:	2008      	movs	r0, #8
 8015716:	4c09      	ldr	r4, [pc, #36]	; (801573c <enet_descriptors_chain_init+0x8c>)
 8015718:	6013      	str	r3, [r2, #0]
 801571a:	e7d7      	b.n	80156cc <enet_descriptors_chain_init+0x1c>
 801571c:	40029000 	andmi	r9, r2, r0
 8015720:	20013a30 	andcs	r3, r1, r0, lsr sl
 8015724:	20012e48 	andcs	r2, r1, r8, asr #28
 8015728:	2000fde8 	andcs	pc, r0, r8, ror #27
 801572c:	2000fddc 	ldrdcs	pc, [r0], -ip
 8015730:	2000fde0 	andcs	pc, r0, r0, ror #27
 8015734:	20012dc8 	andcs	r2, r1, r8, asr #27
 8015738:	2000fde4 	andcs	pc, r0, r4, ror #27
 801573c:	2000fe28 	andcs	pc, r0, r8, lsr #28

08015740 <enet_frame_receive>:
 8015740:	4a1d      	ldr	r2, [pc, #116]	; (80157b8 <enet_frame_receive+0x78>)
 8015742:	b510      	push	{r4, lr}
 8015744:	6813      	ldr	r3, [r2, #0]
 8015746:	681b      	ldr	r3, [r3, #0]
 8015748:	2b00      	cmp	r3, #0
 801574a:	db33      	blt.n	80157b4 <enet_frame_receive+0x74>
 801574c:	b970      	cbnz	r0, 801576c <enet_frame_receive+0x2c>
 801574e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8015752:	6813      	ldr	r3, [r2, #0]
 8015754:	6019      	str	r1, [r3, #0]
 8015756:	4919      	ldr	r1, [pc, #100]	; (80157bc <enet_frame_receive+0x7c>)
 8015758:	6948      	ldr	r0, [r1, #20]
 801575a:	0604      	lsls	r4, r0, #24
 801575c:	d419      	bmi.n	8015792 <enet_frame_receive+0x52>
 801575e:	6859      	ldr	r1, [r3, #4]
 8015760:	0448      	lsls	r0, r1, #17
 8015762:	d51b      	bpl.n	801579c <enet_frame_receive+0x5c>
 8015764:	68db      	ldr	r3, [r3, #12]
 8015766:	2001      	movs	r0, #1
 8015768:	6013      	str	r3, [r2, #0]
 801576a:	bd10      	pop	{r4, pc}
 801576c:	f403 4403 	and.w	r4, r3, #33536	; 0x8300
 8015770:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 8015774:	d11e      	bne.n	80157b4 <enet_frame_receive+0x74>
 8015776:	f3c3 430d 	ubfx	r3, r3, #16, #14
 801577a:	3b04      	subs	r3, #4
 801577c:	428b      	cmp	r3, r1
 801577e:	d819      	bhi.n	80157b4 <enet_frame_receive+0x74>
 8015780:	2100      	movs	r1, #0
 8015782:	4299      	cmp	r1, r3
 8015784:	6814      	ldr	r4, [r2, #0]
 8015786:	d2e2      	bcs.n	801574e <enet_frame_receive+0xe>
 8015788:	68a4      	ldr	r4, [r4, #8]
 801578a:	5d0c      	ldrb	r4, [r1, r4]
 801578c:	5444      	strb	r4, [r0, r1]
 801578e:	3101      	adds	r1, #1
 8015790:	e7f7      	b.n	8015782 <enet_frame_receive+0x42>
 8015792:	2080      	movs	r0, #128	; 0x80
 8015794:	6148      	str	r0, [r1, #20]
 8015796:	2000      	movs	r0, #0
 8015798:	6088      	str	r0, [r1, #8]
 801579a:	e7e0      	b.n	801575e <enet_frame_receive+0x1e>
 801579c:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 80157a0:	4906      	ldr	r1, [pc, #24]	; (80157bc <enet_frame_receive+0x7c>)
 80157a2:	bf05      	ittet	eq
 80157a4:	3310      	addeq	r3, #16
 80157a6:	6809      	ldreq	r1, [r1, #0]
 80157a8:	68cb      	ldrne	r3, [r1, #12]
 80157aa:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 80157ae:	bf08      	it	eq
 80157b0:	185b      	addeq	r3, r3, r1
 80157b2:	e7d8      	b.n	8015766 <enet_frame_receive+0x26>
 80157b4:	2000      	movs	r0, #0
 80157b6:	e7d8      	b.n	801576a <enet_frame_receive+0x2a>
 80157b8:	2000fde4 	andcs	pc, r0, r4, ror #27
 80157bc:	40029000 	andmi	r9, r2, r0

080157c0 <enet_frame_transmit>:
 80157c0:	4a1e      	ldr	r2, [pc, #120]	; (801583c <enet_frame_transmit+0x7c>)
 80157c2:	b530      	push	{r4, r5, lr}
 80157c4:	6813      	ldr	r3, [r2, #0]
 80157c6:	681b      	ldr	r3, [r3, #0]
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	db34      	blt.n	8015836 <enet_frame_transmit+0x76>
 80157cc:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80157d0:	4299      	cmp	r1, r3
 80157d2:	d830      	bhi.n	8015836 <enet_frame_transmit+0x76>
 80157d4:	b9e8      	cbnz	r0, 8015812 <enet_frame_transmit+0x52>
 80157d6:	6813      	ldr	r3, [r2, #0]
 80157d8:	4819      	ldr	r0, [pc, #100]	; (8015840 <enet_frame_transmit+0x80>)
 80157da:	6059      	str	r1, [r3, #4]
 80157dc:	6819      	ldr	r1, [r3, #0]
 80157de:	f041 4130 	orr.w	r1, r1, #2952790016	; 0xb0000000
 80157e2:	6019      	str	r1, [r3, #0]
 80157e4:	6941      	ldr	r1, [r0, #20]
 80157e6:	6944      	ldr	r4, [r0, #20]
 80157e8:	f001 0104 	and.w	r1, r1, #4
 80157ec:	f004 0420 	and.w	r4, r4, #32
 80157f0:	4321      	orrs	r1, r4
 80157f2:	d110      	bne.n	8015816 <enet_frame_transmit+0x56>
 80157f4:	6819      	ldr	r1, [r3, #0]
 80157f6:	02c8      	lsls	r0, r1, #11
 80157f8:	d511      	bpl.n	801581e <enet_frame_transmit+0x5e>
 80157fa:	68db      	ldr	r3, [r3, #12]
 80157fc:	2001      	movs	r0, #1
 80157fe:	6013      	str	r3, [r2, #0]
 8015800:	bd30      	pop	{r4, r5, pc}
 8015802:	5cc5      	ldrb	r5, [r0, r3]
 8015804:	68a4      	ldr	r4, [r4, #8]
 8015806:	551d      	strb	r5, [r3, r4]
 8015808:	3301      	adds	r3, #1
 801580a:	428b      	cmp	r3, r1
 801580c:	6814      	ldr	r4, [r2, #0]
 801580e:	d1f8      	bne.n	8015802 <enet_frame_transmit+0x42>
 8015810:	e7e1      	b.n	80157d6 <enet_frame_transmit+0x16>
 8015812:	2300      	movs	r3, #0
 8015814:	e7f9      	b.n	801580a <enet_frame_transmit+0x4a>
 8015816:	6141      	str	r1, [r0, #20]
 8015818:	2100      	movs	r1, #0
 801581a:	6041      	str	r1, [r0, #4]
 801581c:	e7ea      	b.n	80157f4 <enet_frame_transmit+0x34>
 801581e:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 8015822:	4907      	ldr	r1, [pc, #28]	; (8015840 <enet_frame_transmit+0x80>)
 8015824:	bf05      	ittet	eq
 8015826:	3310      	addeq	r3, #16
 8015828:	6809      	ldreq	r1, [r1, #0]
 801582a:	690b      	ldrne	r3, [r1, #16]
 801582c:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 8015830:	bf08      	it	eq
 8015832:	185b      	addeq	r3, r3, r1
 8015834:	e7e2      	b.n	80157fc <enet_frame_transmit+0x3c>
 8015836:	2000      	movs	r0, #0
 8015838:	e7e2      	b.n	8015800 <enet_frame_transmit+0x40>
 801583a:	bf00      	nop
 801583c:	2000fde8 	andcs	pc, r0, r8, ror #27
 8015840:	40029000 	andmi	r9, r2, r0

08015844 <enet_transmit_checksum_config>:
 8015844:	6803      	ldr	r3, [r0, #0]
 8015846:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 801584a:	430b      	orrs	r3, r1
 801584c:	6003      	str	r3, [r0, #0]
 801584e:	4770      	bx	lr

08015850 <enet_mac_address_set>:
 8015850:	888a      	ldrh	r2, [r1, #4]
 8015852:	4b03      	ldr	r3, [pc, #12]	; (8015860 <enet_mac_address_set+0x10>)
 8015854:	50c2      	str	r2, [r0, r3]
 8015856:	680a      	ldr	r2, [r1, #0]
 8015858:	3304      	adds	r3, #4
 801585a:	50c2      	str	r2, [r0, r3]
 801585c:	4770      	bx	lr
 801585e:	bf00      	nop
 8015860:	40028040 	andmi	r8, r2, r0, asr #32

08015864 <enet_rx_enable>:
 8015864:	4a05      	ldr	r2, [pc, #20]	; (801587c <enet_rx_enable+0x18>)
 8015866:	6813      	ldr	r3, [r2, #0]
 8015868:	f043 0304 	orr.w	r3, r3, #4
 801586c:	6013      	str	r3, [r2, #0]
 801586e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8015872:	6993      	ldr	r3, [r2, #24]
 8015874:	f043 0302 	orr.w	r3, r3, #2
 8015878:	6193      	str	r3, [r2, #24]
 801587a:	4770      	bx	lr
 801587c:	40028000 	andmi	r8, r2, r0

08015880 <enet_phy_write_read>:
 8015880:	b530      	push	{r4, r5, lr}
 8015882:	4604      	mov	r4, r0
 8015884:	4d13      	ldr	r5, [pc, #76]	; (80158d4 <enet_phy_write_read+0x54>)
 8015886:	0192      	lsls	r2, r2, #6
 8015888:	6928      	ldr	r0, [r5, #16]
 801588a:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 801588e:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
 8015892:	f020 00c3 	bic.w	r0, r0, #195	; 0xc3
 8015896:	4302      	orrs	r2, r0
 8015898:	02c9      	lsls	r1, r1, #11
 801589a:	b289      	uxth	r1, r1
 801589c:	2c02      	cmp	r4, #2
 801589e:	ea42 0204 	orr.w	r2, r2, r4
 80158a2:	ea42 0201 	orr.w	r2, r2, r1
 80158a6:	bf08      	it	eq
 80158a8:	8819      	ldrheq	r1, [r3, #0]
 80158aa:	f042 0201 	orr.w	r2, r2, #1
 80158ae:	bf08      	it	eq
 80158b0:	6169      	streq	r1, [r5, #20]
 80158b2:	612a      	str	r2, [r5, #16]
 80158b4:	4907      	ldr	r1, [pc, #28]	; (80158d4 <enet_phy_write_read+0x54>)
 80158b6:	4a08      	ldr	r2, [pc, #32]	; (80158d8 <enet_phy_write_read+0x58>)
 80158b8:	6908      	ldr	r0, [r1, #16]
 80158ba:	07c0      	lsls	r0, r0, #31
 80158bc:	d501      	bpl.n	80158c2 <enet_phy_write_read+0x42>
 80158be:	3a01      	subs	r2, #1
 80158c0:	d1fa      	bne.n	80158b8 <enet_phy_write_read+0x38>
 80158c2:	690a      	ldr	r2, [r1, #16]
 80158c4:	43d2      	mvns	r2, r2
 80158c6:	f002 0001 	and.w	r0, r2, #1
 80158ca:	b90c      	cbnz	r4, 80158d0 <enet_phy_write_read+0x50>
 80158cc:	694a      	ldr	r2, [r1, #20]
 80158ce:	801a      	strh	r2, [r3, #0]
 80158d0:	bd30      	pop	{r4, r5, pc}
 80158d2:	bf00      	nop
 80158d4:	40028000 	andmi	r8, r2, r0
 80158d8:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

080158dc <enet_phy_config>:
 80158dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80158de:	4d22      	ldr	r5, [pc, #136]	; (8015968 <enet_phy_config+0x8c>)
 80158e0:	2001      	movs	r0, #1
 80158e2:	692c      	ldr	r4, [r5, #16]
 80158e4:	f7fe ff26 	bl	8014734 <rcu_clock_freq_get>
 80158e8:	4b20      	ldr	r3, [pc, #128]	; (801596c <enet_phy_config+0x90>)
 80158ea:	4a21      	ldr	r2, [pc, #132]	; (8015970 <enet_phy_config+0x94>)
 80158ec:	4403      	add	r3, r0
 80158ee:	4293      	cmp	r3, r2
 80158f0:	f024 041c 	bic.w	r4, r4, #28
 80158f4:	d21f      	bcs.n	8015936 <enet_phy_config+0x5a>
 80158f6:	f044 0408 	orr.w	r4, r4, #8
 80158fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80158fe:	612c      	str	r4, [r5, #16]
 8015900:	2200      	movs	r2, #0
 8015902:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015906:	2101      	movs	r1, #1
 8015908:	2002      	movs	r0, #2
 801590a:	f10d 0306 	add.w	r3, sp, #6
 801590e:	f7ff ffb7 	bl	8015880 <enet_phy_write_read>
 8015912:	b310      	cbz	r0, 801595a <enet_phy_config+0x7e>
 8015914:	2200      	movs	r2, #0
 8015916:	4817      	ldr	r0, [pc, #92]	; (8015974 <enet_phy_config+0x98>)
 8015918:	f7ff feaa 	bl	8015670 <enet_delay>
 801591c:	2101      	movs	r1, #1
 801591e:	4610      	mov	r0, r2
 8015920:	f10d 0306 	add.w	r3, sp, #6
 8015924:	f7ff ffac 	bl	8015880 <enet_phy_write_read>
 8015928:	b1b8      	cbz	r0, 801595a <enet_phy_config+0x7e>
 801592a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801592e:	43c0      	mvns	r0, r0
 8015930:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8015934:	e012      	b.n	801595c <enet_phy_config+0x80>
 8015936:	4b10      	ldr	r3, [pc, #64]	; (8015978 <enet_phy_config+0x9c>)
 8015938:	4a10      	ldr	r2, [pc, #64]	; (801597c <enet_phy_config+0xa0>)
 801593a:	4403      	add	r3, r0
 801593c:	4293      	cmp	r3, r2
 801593e:	d802      	bhi.n	8015946 <enet_phy_config+0x6a>
 8015940:	f044 040c 	orr.w	r4, r4, #12
 8015944:	e7d9      	b.n	80158fa <enet_phy_config+0x1e>
 8015946:	4b0e      	ldr	r3, [pc, #56]	; (8015980 <enet_phy_config+0xa4>)
 8015948:	4a0e      	ldr	r2, [pc, #56]	; (8015984 <enet_phy_config+0xa8>)
 801594a:	4403      	add	r3, r0
 801594c:	4293      	cmp	r3, r2
 801594e:	d9d4      	bls.n	80158fa <enet_phy_config+0x1e>
 8015950:	4b0d      	ldr	r3, [pc, #52]	; (8015988 <enet_phy_config+0xac>)
 8015952:	4a0e      	ldr	r2, [pc, #56]	; (801598c <enet_phy_config+0xb0>)
 8015954:	4403      	add	r3, r0
 8015956:	4293      	cmp	r3, r2
 8015958:	d902      	bls.n	8015960 <enet_phy_config+0x84>
 801595a:	2000      	movs	r0, #0
 801595c:	b003      	add	sp, #12
 801595e:	bd30      	pop	{r4, r5, pc}
 8015960:	f044 0404 	orr.w	r4, r4, #4
 8015964:	e7c9      	b.n	80158fa <enet_phy_config+0x1e>
 8015966:	bf00      	nop
 8015968:	40028000 	andmi	r8, r2, r0
 801596c:	feced300 	cdp2	3, 12, cr13, cr14, cr0, {0}
 8015970:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 8015974:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 8015978:	fde9f140 	stc2l	1, cr15, [r9, #256]!	; 0x100
 801597c:	017d783f 	cmneq	sp, pc, lsr r8
 8015980:	fc6c7900 	stc2l	9, cr7, [ip], #-0	; <UNPREDICTABLE>
 8015984:	01c9c37f 	biceq	ip, r9, pc, ror r3
 8015988:	faa2b580 	blx	68c2f90 <__stack_size+0x68c0f90>
 801598c:	0112a880 	tsteq	r2, r0, lsl #17

08015990 <enet_init>:
 8015990:	2300      	movs	r3, #0
 8015992:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015994:	4604      	mov	r4, r0
 8015996:	460d      	mov	r5, r1
 8015998:	4616      	mov	r6, r2
 801599a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801599e:	f7ff ff9d 	bl	80158dc <enet_phy_config>
 80159a2:	2800      	cmp	r0, #0
 80159a4:	d037      	beq.n	8015a16 <enet_init+0x86>
 80159a6:	4b3b      	ldr	r3, [pc, #236]	; (8015a94 <enet_init+0x104>)
 80159a8:	4a3b      	ldr	r2, [pc, #236]	; (8015a98 <enet_init+0x108>)
 80159aa:	6819      	ldr	r1, [r3, #0]
 80159ac:	2c01      	cmp	r4, #1
 80159ae:	ea02 0201 	and.w	r2, r2, r1
 80159b2:	601a      	str	r2, [r3, #0]
 80159b4:	f04f 0200 	mov.w	r2, #0
 80159b8:	605a      	str	r2, [r3, #4]
 80159ba:	609a      	str	r2, [r3, #8]
 80159bc:	60da      	str	r2, [r3, #12]
 80159be:	6999      	ldr	r1, [r3, #24]
 80159c0:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
 80159c4:	ea4f 4101 	mov.w	r1, r1, lsl #16
 80159c8:	ea4f 4111 	mov.w	r1, r1, lsr #16
 80159cc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80159d0:	6199      	str	r1, [r3, #24]
 80159d2:	4932      	ldr	r1, [pc, #200]	; (8015a9c <enet_init+0x10c>)
 80159d4:	61da      	str	r2, [r3, #28]
 80159d6:	6988      	ldr	r0, [r1, #24]
 80159d8:	4b31      	ldr	r3, [pc, #196]	; (8015aa0 <enet_init+0x110>)
 80159da:	ea03 0300 	and.w	r3, r3, r0
 80159de:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80159e2:	618b      	str	r3, [r1, #24]
 80159e4:	680b      	ldr	r3, [r1, #0]
 80159e6:	4b2f      	ldr	r3, [pc, #188]	; (8015aa4 <enet_init+0x114>)
 80159e8:	600b      	str	r3, [r1, #0]
 80159ea:	d01e      	beq.n	8015a2a <enet_init+0x9a>
 80159ec:	08e3      	lsrs	r3, r4, #3
 80159ee:	0861      	lsrs	r1, r4, #1
 80159f0:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 80159f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80159f8:	430b      	orrs	r3, r1
 80159fa:	f8ad 3006 	strh.w	r3, [sp, #6]
 80159fe:	2101      	movs	r1, #1
 8015a00:	2002      	movs	r0, #2
 8015a02:	f10d 0306 	add.w	r3, sp, #6
 8015a06:	f7ff ff3b 	bl	8015880 <enet_phy_write_read>
 8015a0a:	b158      	cbz	r0, 8015a24 <enet_init+0x94>
 8015a0c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8015a10:	f7ff fe2e 	bl	8015670 <enet_delay>
 8015a14:	e05d      	b.n	8015ad2 <enet_init+0x142>
 8015a16:	4824      	ldr	r0, [pc, #144]	; (8015aa8 <enet_init+0x118>)
 8015a18:	f7ff fe2a 	bl	8015670 <enet_delay>
 8015a1c:	f7ff ff5e 	bl	80158dc <enet_phy_config>
 8015a20:	2800      	cmp	r0, #0
 8015a22:	d1c0      	bne.n	80159a6 <enet_init+0x16>
 8015a24:	2000      	movs	r0, #0
 8015a26:	b003      	add	sp, #12
 8015a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a2a:	4614      	mov	r4, r2
 8015a2c:	4f1f      	ldr	r7, [pc, #124]	; (8015aac <enet_init+0x11c>)
 8015a2e:	2201      	movs	r2, #1
 8015a30:	2000      	movs	r0, #0
 8015a32:	4611      	mov	r1, r2
 8015a34:	f10d 0306 	add.w	r3, sp, #6
 8015a38:	f7ff ff22 	bl	8015880 <enet_phy_write_read>
 8015a3c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8015a40:	3401      	adds	r4, #1
 8015a42:	f002 0204 	and.w	r2, r2, #4
 8015a46:	f8ad 2006 	strh.w	r2, [sp, #6]
 8015a4a:	b912      	cbnz	r2, 8015a52 <enet_init+0xc2>
 8015a4c:	42bc      	cmp	r4, r7
 8015a4e:	d1ee      	bne.n	8015a2e <enet_init+0x9e>
 8015a50:	e7e8      	b.n	8015a24 <enet_init+0x94>
 8015a52:	42bc      	cmp	r4, r7
 8015a54:	d0e6      	beq.n	8015a24 <enet_init+0x94>
 8015a56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015a5a:	2101      	movs	r1, #1
 8015a5c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8015a60:	2002      	movs	r0, #2
 8015a62:	2200      	movs	r2, #0
 8015a64:	f7ff ff0c 	bl	8015880 <enet_phy_write_read>
 8015a68:	2800      	cmp	r0, #0
 8015a6a:	d0db      	beq.n	8015a24 <enet_init+0x94>
 8015a6c:	2400      	movs	r4, #0
 8015a6e:	4f0f      	ldr	r7, [pc, #60]	; (8015aac <enet_init+0x11c>)
 8015a70:	2201      	movs	r2, #1
 8015a72:	2000      	movs	r0, #0
 8015a74:	4611      	mov	r1, r2
 8015a76:	f10d 0306 	add.w	r3, sp, #6
 8015a7a:	f7ff ff01 	bl	8015880 <enet_phy_write_read>
 8015a7e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8015a82:	3401      	adds	r4, #1
 8015a84:	f002 0220 	and.w	r2, r2, #32
 8015a88:	f8ad 2006 	strh.w	r2, [sp, #6]
 8015a8c:	b982      	cbnz	r2, 8015ab0 <enet_init+0x120>
 8015a8e:	42bc      	cmp	r4, r7
 8015a90:	d1ee      	bne.n	8015a70 <enet_init+0xe0>
 8015a92:	e7c7      	b.n	8015a24 <enet_init+0x94>
 8015a94:	40028000 	andmi	r8, r2, r0
 8015a98:	fd30810f 	ldc2	1, cr8, [r0, #-60]!	; 0xffffffc4
 8015a9c:	40029000 	andmi	r9, r2, r0
 8015aa0:	f8de3f23 			; <UNDEFINED> instruction: 0xf8de3f23
 8015aa4:	02c16000 	sbceq	r6, r1, #0
 8015aa8:	008fffff 	strdeq	pc, [pc], pc	; <UNPREDICTABLE>
 8015aac:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 8015ab0:	42bc      	cmp	r4, r7
 8015ab2:	d0b7      	beq.n	8015a24 <enet_init+0x94>
 8015ab4:	2101      	movs	r1, #1
 8015ab6:	2210      	movs	r2, #16
 8015ab8:	2000      	movs	r0, #0
 8015aba:	f7ff fee1 	bl	8015880 <enet_phy_write_read>
 8015abe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015ac2:	f3c3 0480 	ubfx	r4, r3, #2, #1
 8015ac6:	0799      	lsls	r1, r3, #30
 8015ac8:	ea4f 24c4 	mov.w	r4, r4, lsl #11
 8015acc:	d401      	bmi.n	8015ad2 <enet_init+0x142>
 8015ace:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8015ad2:	4b63      	ldr	r3, [pc, #396]	; (8015c60 <enet_init+0x2d0>)
 8015ad4:	681a      	ldr	r2, [r3, #0]
 8015ad6:	f422 42b0 	bic.w	r2, r2, #22528	; 0x5800
 8015ada:	4314      	orrs	r4, r2
 8015adc:	056a      	lsls	r2, r5, #21
 8015ade:	601c      	str	r4, [r3, #0]
 8015ae0:	d50b      	bpl.n	8015afa <enet_init+0x16a>
 8015ae2:	681a      	ldr	r2, [r3, #0]
 8015ae4:	f005 6580 	and.w	r5, r5, #67108864	; 0x4000000
 8015ae8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8015aec:	601a      	str	r2, [r3, #0]
 8015aee:	4a5d      	ldr	r2, [pc, #372]	; (8015c64 <enet_init+0x2d4>)
 8015af0:	6993      	ldr	r3, [r2, #24]
 8015af2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8015af6:	431d      	orrs	r5, r3
 8015af8:	6195      	str	r5, [r2, #24]
 8015afa:	4959      	ldr	r1, [pc, #356]	; (8015c60 <enet_init+0x2d0>)
 8015afc:	684b      	ldr	r3, [r1, #4]
 8015afe:	431e      	orrs	r6, r3
 8015b00:	4b59      	ldr	r3, [pc, #356]	; (8015c68 <enet_init+0x2d8>)
 8015b02:	604e      	str	r6, [r1, #4]
 8015b04:	681a      	ldr	r2, [r3, #0]
 8015b06:	07d7      	lsls	r7, r2, #31
 8015b08:	d510      	bpl.n	8015b2c <enet_init+0x19c>
 8015b0a:	685a      	ldr	r2, [r3, #4]
 8015b0c:	680c      	ldr	r4, [r1, #0]
 8015b0e:	f002 0080 	and.w	r0, r2, #128	; 0x80
 8015b12:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 8015b16:	4320      	orrs	r0, r4
 8015b18:	6008      	str	r0, [r1, #0]
 8015b1a:	4852      	ldr	r0, [pc, #328]	; (8015c64 <enet_init+0x2d4>)
 8015b1c:	0892      	lsrs	r2, r2, #2
 8015b1e:	6981      	ldr	r1, [r0, #24]
 8015b20:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8015b24:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8015b28:	430a      	orrs	r2, r1
 8015b2a:	6182      	str	r2, [r0, #24]
 8015b2c:	681a      	ldr	r2, [r3, #0]
 8015b2e:	0796      	lsls	r6, r2, #30
 8015b30:	d508      	bpl.n	8015b44 <enet_init+0x1b4>
 8015b32:	494c      	ldr	r1, [pc, #304]	; (8015c64 <enet_init+0x2d4>)
 8015b34:	6898      	ldr	r0, [r3, #8]
 8015b36:	680a      	ldr	r2, [r1, #0]
 8015b38:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8015b3c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8015b40:	4302      	orrs	r2, r0
 8015b42:	600a      	str	r2, [r1, #0]
 8015b44:	681a      	ldr	r2, [r3, #0]
 8015b46:	0755      	lsls	r5, r2, #29
 8015b48:	d508      	bpl.n	8015b5c <enet_init+0x1cc>
 8015b4a:	4946      	ldr	r1, [pc, #280]	; (8015c64 <enet_init+0x2d4>)
 8015b4c:	68d8      	ldr	r0, [r3, #12]
 8015b4e:	680a      	ldr	r2, [r1, #0]
 8015b50:	f422 027e 	bic.w	r2, r2, #16646144	; 0xfe0000
 8015b54:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8015b58:	4302      	orrs	r2, r0
 8015b5a:	600a      	str	r2, [r1, #0]
 8015b5c:	681a      	ldr	r2, [r3, #0]
 8015b5e:	0714      	lsls	r4, r2, #28
 8015b60:	d508      	bpl.n	8015b74 <enet_init+0x1e4>
 8015b62:	4940      	ldr	r1, [pc, #256]	; (8015c64 <enet_init+0x2d4>)
 8015b64:	6918      	ldr	r0, [r3, #16]
 8015b66:	680a      	ldr	r2, [r1, #0]
 8015b68:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8015b6c:	f022 0202 	bic.w	r2, r2, #2
 8015b70:	4302      	orrs	r2, r0
 8015b72:	600a      	str	r2, [r1, #0]
 8015b74:	681a      	ldr	r2, [r3, #0]
 8015b76:	06d0      	lsls	r0, r2, #27
 8015b78:	d506      	bpl.n	8015b88 <enet_init+0x1f8>
 8015b7a:	493a      	ldr	r1, [pc, #232]	; (8015c64 <enet_init+0x2d4>)
 8015b7c:	4a3b      	ldr	r2, [pc, #236]	; (8015c6c <enet_init+0x2dc>)
 8015b7e:	6988      	ldr	r0, [r1, #24]
 8015b80:	4002      	ands	r2, r0
 8015b82:	6958      	ldr	r0, [r3, #20]
 8015b84:	4302      	orrs	r2, r0
 8015b86:	618a      	str	r2, [r1, #24]
 8015b88:	681a      	ldr	r2, [r3, #0]
 8015b8a:	0691      	lsls	r1, r2, #26
 8015b8c:	d508      	bpl.n	8015ba0 <enet_init+0x210>
 8015b8e:	4935      	ldr	r1, [pc, #212]	; (8015c64 <enet_init+0x2d4>)
 8015b90:	6998      	ldr	r0, [r3, #24]
 8015b92:	698a      	ldr	r2, [r1, #24]
 8015b94:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8015b98:	f022 0204 	bic.w	r2, r2, #4
 8015b9c:	4302      	orrs	r2, r0
 8015b9e:	618a      	str	r2, [r1, #24]
 8015ba0:	681a      	ldr	r2, [r3, #0]
 8015ba2:	0652      	lsls	r2, r2, #25
 8015ba4:	d506      	bpl.n	8015bb4 <enet_init+0x224>
 8015ba6:	492e      	ldr	r1, [pc, #184]	; (8015c60 <enet_init+0x2d0>)
 8015ba8:	69d8      	ldr	r0, [r3, #28]
 8015baa:	69ca      	ldr	r2, [r1, #28]
 8015bac:	0c52      	lsrs	r2, r2, #17
 8015bae:	0452      	lsls	r2, r2, #17
 8015bb0:	4302      	orrs	r2, r0
 8015bb2:	61ca      	str	r2, [r1, #28]
 8015bb4:	681a      	ldr	r2, [r3, #0]
 8015bb6:	0617      	lsls	r7, r2, #24
 8015bb8:	d517      	bpl.n	8015bea <enet_init+0x25a>
 8015bba:	4c29      	ldr	r4, [pc, #164]	; (8015c60 <enet_init+0x2d0>)
 8015bbc:	6a1a      	ldr	r2, [r3, #32]
 8015bbe:	69a0      	ldr	r0, [r4, #24]
 8015bc0:	f422 417f 	bic.w	r1, r2, #65280	; 0xff00
 8015bc4:	f020 00be 	bic.w	r0, r0, #190	; 0xbe
 8015bc8:	0400      	lsls	r0, r0, #16
 8015bca:	0c00      	lsrs	r0, r0, #16
 8015bcc:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8015bd0:	4301      	orrs	r1, r0
 8015bd2:	4824      	ldr	r0, [pc, #144]	; (8015c64 <enet_init+0x2d4>)
 8015bd4:	61a1      	str	r1, [r4, #24]
 8015bd6:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8015bda:	0a12      	lsrs	r2, r2, #8
 8015bdc:	f021 0177 	bic.w	r1, r1, #119	; 0x77
 8015be0:	f002 0277 	and.w	r2, r2, #119	; 0x77
 8015be4:	430a      	orrs	r2, r1
 8015be6:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8015bea:	681a      	ldr	r2, [r3, #0]
 8015bec:	05d6      	lsls	r6, r2, #23
 8015bee:	bf42      	ittt	mi
 8015bf0:	6a59      	ldrmi	r1, [r3, #36]	; 0x24
 8015bf2:	4a1b      	ldrmi	r2, [pc, #108]	; (8015c60 <enet_init+0x2d0>)
 8015bf4:	6091      	strmi	r1, [r2, #8]
 8015bf6:	681a      	ldr	r2, [r3, #0]
 8015bf8:	0595      	lsls	r5, r2, #22
 8015bfa:	bf42      	ittt	mi
 8015bfc:	4a18      	ldrmi	r2, [pc, #96]	; (8015c60 <enet_init+0x2d0>)
 8015bfe:	6a99      	ldrmi	r1, [r3, #40]	; 0x28
 8015c00:	60d1      	strmi	r1, [r2, #12]
 8015c02:	681a      	ldr	r2, [r3, #0]
 8015c04:	0554      	lsls	r4, r2, #21
 8015c06:	d508      	bpl.n	8015c1a <enet_init+0x28a>
 8015c08:	4915      	ldr	r1, [pc, #84]	; (8015c60 <enet_init+0x2d0>)
 8015c0a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8015c0c:	684a      	ldr	r2, [r1, #4]
 8015c0e:	f422 62fb 	bic.w	r2, r2, #2008	; 0x7d8
 8015c12:	f022 0206 	bic.w	r2, r2, #6
 8015c16:	4302      	orrs	r2, r0
 8015c18:	604a      	str	r2, [r1, #4]
 8015c1a:	681a      	ldr	r2, [r3, #0]
 8015c1c:	0510      	lsls	r0, r2, #20
 8015c1e:	d508      	bpl.n	8015c32 <enet_init+0x2a2>
 8015c20:	490f      	ldr	r1, [pc, #60]	; (8015c60 <enet_init+0x2d0>)
 8015c22:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8015c24:	680a      	ldr	r2, [r1, #0]
 8015c26:	f422 3291 	bic.w	r2, r2, #74240	; 0x12200
 8015c2a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8015c2e:	4302      	orrs	r2, r0
 8015c30:	600a      	str	r2, [r1, #0]
 8015c32:	681a      	ldr	r2, [r3, #0]
 8015c34:	04d1      	lsls	r1, r2, #19
 8015c36:	d506      	bpl.n	8015c46 <enet_init+0x2b6>
 8015c38:	4909      	ldr	r1, [pc, #36]	; (8015c60 <enet_init+0x2d0>)
 8015c3a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8015c3c:	680a      	ldr	r2, [r1, #0]
 8015c3e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8015c42:	4302      	orrs	r2, r0
 8015c44:	600a      	str	r2, [r1, #0]
 8015c46:	681a      	ldr	r2, [r3, #0]
 8015c48:	0492      	lsls	r2, r2, #18
 8015c4a:	d506      	bpl.n	8015c5a <enet_init+0x2ca>
 8015c4c:	4904      	ldr	r1, [pc, #16]	; (8015c60 <enet_init+0x2d0>)
 8015c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015c50:	680a      	ldr	r2, [r1, #0]
 8015c52:	f422 2260 	bic.w	r2, r2, #917504	; 0xe0000
 8015c56:	4313      	orrs	r3, r2
 8015c58:	600b      	str	r3, [r1, #0]
 8015c5a:	2001      	movs	r0, #1
 8015c5c:	e6e3      	b.n	8015a26 <enet_init+0x96>
 8015c5e:	bf00      	nop
 8015c60:	40028000 	andmi	r8, r2, r0
 8015c64:	40029000 	andmi	r9, r2, r0
 8015c68:	2000fdec 	andcs	pc, r0, ip, ror #27
 8015c6c:	fdde3fe7 	ldc2l	15, cr3, [lr, #924]	; 0x39c

08015c70 <enet_txfifo_flush>:
 8015c70:	4b06      	ldr	r3, [pc, #24]	; (8015c8c <enet_txfifo_flush+0x1c>)
 8015c72:	4807      	ldr	r0, [pc, #28]	; (8015c90 <enet_txfifo_flush+0x20>)
 8015c74:	699a      	ldr	r2, [r3, #24]
 8015c76:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8015c7a:	619a      	str	r2, [r3, #24]
 8015c7c:	699a      	ldr	r2, [r3, #24]
 8015c7e:	02d2      	lsls	r2, r2, #11
 8015c80:	d502      	bpl.n	8015c88 <enet_txfifo_flush+0x18>
 8015c82:	3801      	subs	r0, #1
 8015c84:	d1fa      	bne.n	8015c7c <enet_txfifo_flush+0xc>
 8015c86:	4770      	bx	lr
 8015c88:	2001      	movs	r0, #1
 8015c8a:	4770      	bx	lr
 8015c8c:	40029000 	andmi	r9, r2, r0
 8015c90:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08015c94 <enet_tx_enable>:
 8015c94:	4a06      	ldr	r2, [pc, #24]	; (8015cb0 <enet_tx_enable+0x1c>)
 8015c96:	b508      	push	{r3, lr}
 8015c98:	6813      	ldr	r3, [r2, #0]
 8015c9a:	f043 0308 	orr.w	r3, r3, #8
 8015c9e:	6013      	str	r3, [r2, #0]
 8015ca0:	f7ff ffe6 	bl	8015c70 <enet_txfifo_flush>
 8015ca4:	4a03      	ldr	r2, [pc, #12]	; (8015cb4 <enet_tx_enable+0x20>)
 8015ca6:	6993      	ldr	r3, [r2, #24]
 8015ca8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015cac:	6193      	str	r3, [r2, #24]
 8015cae:	bd08      	pop	{r3, pc}
 8015cb0:	40028000 	andmi	r8, r2, r0
 8015cb4:	40029000 	andmi	r9, r2, r0

08015cb8 <enet_enable>:
 8015cb8:	b508      	push	{r3, lr}
 8015cba:	f7ff ffeb 	bl	8015c94 <enet_tx_enable>
 8015cbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015cc2:	f7ff bdcf 	b.w	8015864 <enet_rx_enable>

08015cc6 <enet_desc_information_get>:
 8015cc6:	2905      	cmp	r1, #5
 8015cc8:	d817      	bhi.n	8015cfa <enet_desc_information_get+0x34>
 8015cca:	e8df f001 	tbb	[pc, r1]
 8015cce:	03091012 	movweq	r1, #36882	; 0x9012
 8015cd2:	68401007 	stmdavs	r0, {r0, r1, r2, ip}^
 8015cd6:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8015cda:	4770      	bx	lr
 8015cdc:	88c0      	ldrh	r0, [r0, #6]
 8015cde:	e7fa      	b.n	8015cd6 <enet_desc_information_get+0x10>
 8015ce0:	8840      	ldrh	r0, [r0, #2]
 8015ce2:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8015ce6:	2804      	cmp	r0, #4
 8015ce8:	d90a      	bls.n	8015d00 <enet_desc_information_get+0x3a>
 8015cea:	3804      	subs	r0, #4
 8015cec:	4770      	bx	lr
 8015cee:	6880      	ldr	r0, [r0, #8]
 8015cf0:	4770      	bx	lr
 8015cf2:	6800      	ldr	r0, [r0, #0]
 8015cf4:	f3c0 00c3 	ubfx	r0, r0, #3, #4
 8015cf8:	4770      	bx	lr
 8015cfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015cfe:	4770      	bx	lr
 8015d00:	2000      	movs	r0, #0
 8015d02:	4770      	bx	lr

08015d04 <enet_rxframe_drop>:
 8015d04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015d08:	4814      	ldr	r0, [pc, #80]	; (8015d5c <enet_rxframe_drop+0x58>)
 8015d0a:	b510      	push	{r4, lr}
 8015d0c:	6802      	ldr	r2, [r0, #0]
 8015d0e:	4914      	ldr	r1, [pc, #80]	; (8015d60 <enet_rxframe_drop+0x5c>)
 8015d10:	6854      	ldr	r4, [r2, #4]
 8015d12:	6013      	str	r3, [r2, #0]
 8015d14:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8015d18:	680b      	ldr	r3, [r1, #0]
 8015d1a:	d009      	beq.n	8015d30 <enet_rxframe_drop+0x2c>
 8015d1c:	b12b      	cbz	r3, 8015d2a <enet_rxframe_drop+0x26>
 8015d1e:	68da      	ldr	r2, [r3, #12]
 8015d20:	6002      	str	r2, [r0, #0]
 8015d22:	681a      	ldr	r2, [r3, #0]
 8015d24:	b1ba      	cbz	r2, 8015d56 <enet_rxframe_drop+0x52>
 8015d26:	600a      	str	r2, [r1, #0]
 8015d28:	bd10      	pop	{r4, pc}
 8015d2a:	68d3      	ldr	r3, [r2, #12]
 8015d2c:	6003      	str	r3, [r0, #0]
 8015d2e:	e7fb      	b.n	8015d28 <enet_rxframe_drop+0x24>
 8015d30:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8015d34:	4c0b      	ldr	r4, [pc, #44]	; (8015d64 <enet_rxframe_drop+0x60>)
 8015d36:	d006      	beq.n	8015d46 <enet_rxframe_drop+0x42>
 8015d38:	68e2      	ldr	r2, [r4, #12]
 8015d3a:	6002      	str	r2, [r0, #0]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d0f3      	beq.n	8015d28 <enet_rxframe_drop+0x24>
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	600b      	str	r3, [r1, #0]
 8015d44:	e7f0      	b.n	8015d28 <enet_rxframe_drop+0x24>
 8015d46:	6824      	ldr	r4, [r4, #0]
 8015d48:	3210      	adds	r2, #16
 8015d4a:	f3c4 0484 	ubfx	r4, r4, #2, #5
 8015d4e:	4422      	add	r2, r4
 8015d50:	6002      	str	r2, [r0, #0]
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d0e8      	beq.n	8015d28 <enet_rxframe_drop+0x24>
 8015d56:	3310      	adds	r3, #16
 8015d58:	e7f3      	b.n	8015d42 <enet_rxframe_drop+0x3e>
 8015d5a:	bf00      	nop
 8015d5c:	2000fde4 	andcs	pc, r0, r4, ror #27
 8015d60:	2000fddc 	ldrdcs	pc, [r0], -ip
 8015d64:	40029000 	andmi	r9, r2, r0

08015d68 <enet_rxframe_size_get>:
 8015d68:	b508      	push	{r3, lr}
 8015d6a:	4b0c      	ldr	r3, [pc, #48]	; (8015d9c <enet_rxframe_size_get+0x34>)
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	6818      	ldr	r0, [r3, #0]
 8015d70:	2800      	cmp	r0, #0
 8015d72:	db10      	blt.n	8015d96 <enet_rxframe_size_get+0x2e>
 8015d74:	f400 4303 	and.w	r3, r0, #33536	; 0x8300
 8015d78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015d7c:	d003      	beq.n	8015d86 <enet_rxframe_size_get+0x1e>
 8015d7e:	f7ff ffc1 	bl	8015d04 <enet_rxframe_drop>
 8015d82:	2001      	movs	r0, #1
 8015d84:	bd08      	pop	{r3, pc}
 8015d86:	f000 0321 	and.w	r3, r0, #33	; 0x21
 8015d8a:	2b21      	cmp	r3, #33	; 0x21
 8015d8c:	d0f7      	beq.n	8015d7e <enet_rxframe_size_get+0x16>
 8015d8e:	f3c0 400d 	ubfx	r0, r0, #16, #14
 8015d92:	3804      	subs	r0, #4
 8015d94:	e7f6      	b.n	8015d84 <enet_rxframe_size_get+0x1c>
 8015d96:	2000      	movs	r0, #0
 8015d98:	e7f4      	b.n	8015d84 <enet_rxframe_size_get+0x1c>
 8015d9a:	bf00      	nop
 8015d9c:	2000fde4 	andcs	pc, r0, r4, ror #27

08015da0 <enet_initpara_reset>:
 8015da0:	2200      	movs	r2, #0
 8015da2:	4b08      	ldr	r3, [pc, #32]	; (8015dc4 <enet_initpara_reset+0x24>)
 8015da4:	e9c3 2200 	strd	r2, r2, [r3]
 8015da8:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8015dac:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8015db0:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8015db4:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8015db8:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 8015dbc:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
 8015dc0:	639a      	str	r2, [r3, #56]	; 0x38
 8015dc2:	4770      	bx	lr
 8015dc4:	2000fdec 	andcs	pc, r0, ip, ror #27

08015dc8 <enet_deinit>:
 8015dc8:	b508      	push	{r3, lr}
 8015dca:	f640 200e 	movw	r0, #2574	; 0xa0e
 8015dce:	f7fe fbfc 	bl	80145ca <rcu_periph_reset_enable>
 8015dd2:	f640 200e 	movw	r0, #2574	; 0xa0e
 8015dd6:	f7fe fbfa 	bl	80145ce <rcu_periph_reset_disable>
 8015dda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015dde:	f7ff bfdf 	b.w	8015da0 <enet_initpara_reset>
	...

08015de4 <i2c_clock_config>:
 8015de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015de6:	4605      	mov	r5, r0
 8015de8:	2002      	movs	r0, #2
 8015dea:	460c      	mov	r4, r1
 8015dec:	4617      	mov	r7, r2
 8015dee:	f7fe fca1 	bl	8014734 <rcu_clock_freq_get>
 8015df2:	4603      	mov	r3, r0
 8015df4:	4828      	ldr	r0, [pc, #160]	; (8015e98 <i2c_clock_config+0xb4>)
 8015df6:	4a29      	ldr	r2, [pc, #164]	; (8015e9c <i2c_clock_config+0xb8>)
 8015df8:	fbb3 f0f0 	udiv	r0, r3, r0
 8015dfc:	4293      	cmp	r3, r2
 8015dfe:	bf34      	ite	cc
 8015e00:	4601      	movcc	r1, r0
 8015e02:	2136      	movcs	r1, #54	; 0x36
 8015e04:	686e      	ldr	r6, [r5, #4]
 8015e06:	4a26      	ldr	r2, [pc, #152]	; (8015ea0 <i2c_clock_config+0xbc>)
 8015e08:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8015e0c:	430e      	orrs	r6, r1
 8015e0e:	4294      	cmp	r4, r2
 8015e10:	606e      	str	r6, [r5, #4]
 8015e12:	d816      	bhi.n	8015e42 <i2c_clock_config+0x5e>
 8015e14:	3001      	adds	r0, #1
 8015e16:	2835      	cmp	r0, #53	; 0x35
 8015e18:	d90d      	bls.n	8015e36 <i2c_clock_config+0x52>
 8015e1a:	2236      	movs	r2, #54	; 0x36
 8015e1c:	622a      	str	r2, [r5, #32]
 8015e1e:	0064      	lsls	r4, r4, #1
 8015e20:	fbb3 f4f4 	udiv	r4, r3, r4
 8015e24:	2c04      	cmp	r4, #4
 8015e26:	bf38      	it	cc
 8015e28:	2404      	movcc	r4, #4
 8015e2a:	69ea      	ldr	r2, [r5, #28]
 8015e2c:	f3c4 040b 	ubfx	r4, r4, #0, #12
 8015e30:	4314      	orrs	r4, r2
 8015e32:	61ec      	str	r4, [r5, #28]
 8015e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e36:	2802      	cmp	r0, #2
 8015e38:	d801      	bhi.n	8015e3e <i2c_clock_config+0x5a>
 8015e3a:	2202      	movs	r2, #2
 8015e3c:	e7ee      	b.n	8015e1c <i2c_clock_config+0x38>
 8015e3e:	6228      	str	r0, [r5, #32]
 8015e40:	e7ed      	b.n	8015e1e <i2c_clock_config+0x3a>
 8015e42:	4a18      	ldr	r2, [pc, #96]	; (8015ea4 <i2c_clock_config+0xc0>)
 8015e44:	4294      	cmp	r4, r2
 8015e46:	d8f5      	bhi.n	8015e34 <i2c_clock_config+0x50>
 8015e48:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8015e4c:	4351      	muls	r1, r2
 8015e4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015e52:	fbb1 f1f2 	udiv	r1, r1, r2
 8015e56:	3101      	adds	r1, #1
 8015e58:	6229      	str	r1, [r5, #32]
 8015e5a:	b9a7      	cbnz	r7, 8015e86 <i2c_clock_config+0xa2>
 8015e5c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015e60:	fbb3 f4f4 	udiv	r4, r3, r4
 8015e64:	69eb      	ldr	r3, [r5, #28]
 8015e66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8015e6a:	61eb      	str	r3, [r5, #28]
 8015e6c:	f3c4 030b 	ubfx	r3, r4, #0, #12
 8015e70:	b90b      	cbnz	r3, 8015e76 <i2c_clock_config+0x92>
 8015e72:	f044 0401 	orr.w	r4, r4, #1
 8015e76:	69eb      	ldr	r3, [r5, #28]
 8015e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015e7c:	61eb      	str	r3, [r5, #28]
 8015e7e:	69eb      	ldr	r3, [r5, #28]
 8015e80:	4323      	orrs	r3, r4
 8015e82:	61eb      	str	r3, [r5, #28]
 8015e84:	e7d6      	b.n	8015e34 <i2c_clock_config+0x50>
 8015e86:	2219      	movs	r2, #25
 8015e88:	4354      	muls	r4, r2
 8015e8a:	fbb3 f4f4 	udiv	r4, r3, r4
 8015e8e:	69eb      	ldr	r3, [r5, #28]
 8015e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015e94:	e7e9      	b.n	8015e6a <i2c_clock_config+0x86>
 8015e96:	bf00      	nop
 8015e98:	000f4240 	andeq	r4, pc, r0, asr #4
 8015e9c:	0337f980 	teqeq	r7, #128, 18	; 0x200000	; <UNPREDICTABLE>
 8015ea0:	000186a0 	andeq	r8, r1, r0, lsr #13
 8015ea4:	00061a80 	andeq	r1, r6, r0, lsl #21

08015ea8 <i2c_ack_config>:
 8015ea8:	6803      	ldr	r3, [r0, #0]
 8015eaa:	2901      	cmp	r1, #1
 8015eac:	bf0c      	ite	eq
 8015eae:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
 8015eb2:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 8015eb6:	6003      	str	r3, [r0, #0]
 8015eb8:	4770      	bx	lr

08015eba <i2c_ackpos_config>:
 8015eba:	6803      	ldr	r3, [r0, #0]
 8015ebc:	b919      	cbnz	r1, 8015ec6 <i2c_ackpos_config+0xc>
 8015ebe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015ec2:	6003      	str	r3, [r0, #0]
 8015ec4:	4770      	bx	lr
 8015ec6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015eca:	e7fa      	b.n	8015ec2 <i2c_ackpos_config+0x8>

08015ecc <i2c_master_addressing>:
 8015ecc:	3202      	adds	r2, #2
 8015ece:	bf0c      	ite	eq
 8015ed0:	f021 0101 	biceq.w	r1, r1, #1
 8015ed4:	f041 0101 	orrne.w	r1, r1, #1
 8015ed8:	6101      	str	r1, [r0, #16]
 8015eda:	4770      	bx	lr

08015edc <i2c_enable>:
 8015edc:	6803      	ldr	r3, [r0, #0]
 8015ede:	f043 0301 	orr.w	r3, r3, #1
 8015ee2:	6003      	str	r3, [r0, #0]
 8015ee4:	4770      	bx	lr

08015ee6 <i2c_start_on_bus>:
 8015ee6:	6803      	ldr	r3, [r0, #0]
 8015ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015eec:	6003      	str	r3, [r0, #0]
 8015eee:	4770      	bx	lr

08015ef0 <i2c_stop_on_bus>:
 8015ef0:	6803      	ldr	r3, [r0, #0]
 8015ef2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8015ef6:	6003      	str	r3, [r0, #0]
 8015ef8:	4770      	bx	lr

08015efa <i2c_data_transmit>:
 8015efa:	6101      	str	r1, [r0, #16]
 8015efc:	4770      	bx	lr

08015efe <i2c_data_receive>:
 8015efe:	6900      	ldr	r0, [r0, #16]
 8015f00:	b2c0      	uxtb	r0, r0
 8015f02:	4770      	bx	lr

08015f04 <i2c_flag_get>:
 8015f04:	098b      	lsrs	r3, r1, #6
 8015f06:	581a      	ldr	r2, [r3, r0]
 8015f08:	2301      	movs	r3, #1
 8015f0a:	f001 011f 	and.w	r1, r1, #31
 8015f0e:	408b      	lsls	r3, r1
 8015f10:	4213      	tst	r3, r2
 8015f12:	bf14      	ite	ne
 8015f14:	2001      	movne	r0, #1
 8015f16:	2000      	moveq	r0, #0
 8015f18:	4770      	bx	lr

08015f1a <i2c_flag_clear>:
 8015f1a:	f240 5301 	movw	r3, #1281	; 0x501
 8015f1e:	4299      	cmp	r1, r3
 8015f20:	b510      	push	{r4, lr}
 8015f22:	d102      	bne.n	8015f2a <i2c_flag_clear+0x10>
 8015f24:	6943      	ldr	r3, [r0, #20]
 8015f26:	6983      	ldr	r3, [r0, #24]
 8015f28:	bd10      	pop	{r4, pc}
 8015f2a:	2201      	movs	r2, #1
 8015f2c:	098c      	lsrs	r4, r1, #6
 8015f2e:	5823      	ldr	r3, [r4, r0]
 8015f30:	f001 011f 	and.w	r1, r1, #31
 8015f34:	408a      	lsls	r2, r1
 8015f36:	ea23 0302 	bic.w	r3, r3, r2
 8015f3a:	5023      	str	r3, [r4, r0]
 8015f3c:	e7f4      	b.n	8015f28 <i2c_flag_clear+0xe>

08015f3e <i2s_init>:
 8015f3e:	b510      	push	{r4, lr}
 8015f40:	69c4      	ldr	r4, [r0, #28]
 8015f42:	f424 647b 	bic.w	r4, r4, #4016	; 0xfb0
 8015f46:	f024 0408 	bic.w	r4, r4, #8
 8015f4a:	0424      	lsls	r4, r4, #16
 8015f4c:	0c24      	lsrs	r4, r4, #16
 8015f4e:	431c      	orrs	r4, r3
 8015f50:	4314      	orrs	r4, r2
 8015f52:	430c      	orrs	r4, r1
 8015f54:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8015f58:	61c4      	str	r4, [r0, #28]
 8015f5a:	bd10      	pop	{r4, pc}

08015f5c <i2s_psc_config>:
 8015f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f60:	4698      	mov	r8, r3
 8015f62:	2302      	movs	r3, #2
 8015f64:	6203      	str	r3, [r0, #32]
 8015f66:	4b26      	ldr	r3, [pc, #152]	; (8016000 <i2s_psc_config+0xa4>)
 8015f68:	4617      	mov	r7, r2
 8015f6a:	4298      	cmp	r0, r3
 8015f6c:	bf0c      	ite	eq
 8015f6e:	f44f 3300 	moveq.w	r3, #131072	; 0x20000
 8015f72:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8015f76:	4a23      	ldr	r2, [pc, #140]	; (8016004 <i2s_psc_config+0xa8>)
 8015f78:	4605      	mov	r5, r0
 8015f7a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8015f7c:	460e      	mov	r6, r1
 8015f7e:	4018      	ands	r0, r3
 8015f80:	d036      	beq.n	8015ff0 <i2s_psc_config+0x94>
 8015f82:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8015f84:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8015f88:	1f99      	subs	r1, r3, #6
 8015f8a:	2908      	cmp	r1, #8
 8015f8c:	d82c      	bhi.n	8015fe8 <i2s_psc_config+0x8c>
 8015f8e:	3302      	adds	r3, #2
 8015f90:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8015f92:	481d      	ldr	r0, [pc, #116]	; (8016008 <i2s_psc_config+0xac>)
 8015f94:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8015f98:	3201      	adds	r2, #1
 8015f9a:	fbb0 f0f2 	udiv	r0, r0, r2
 8015f9e:	4358      	muls	r0, r3
 8015fa0:	0040      	lsls	r0, r0, #1
 8015fa2:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
 8015fa6:	f04f 030a 	mov.w	r3, #10
 8015faa:	d124      	bne.n	8015ff6 <i2s_psc_config+0x9a>
 8015fac:	0a04      	lsrs	r4, r0, #8
 8015fae:	435c      	muls	r4, r3
 8015fb0:	fbb4 f6f6 	udiv	r6, r4, r6
 8015fb4:	230a      	movs	r3, #10
 8015fb6:	3605      	adds	r6, #5
 8015fb8:	fbb6 f6f3 	udiv	r6, r6, r3
 8015fbc:	f006 0301 	and.w	r3, r6, #1
 8015fc0:	0876      	lsrs	r6, r6, #1
 8015fc2:	1eb2      	subs	r2, r6, #2
 8015fc4:	2afd      	cmp	r2, #253	; 0xfd
 8015fc6:	bf86      	itte	hi
 8015fc8:	2300      	movhi	r3, #0
 8015fca:	2602      	movhi	r6, #2
 8015fcc:	021b      	lslls	r3, r3, #8
 8015fce:	431e      	orrs	r6, r3
 8015fd0:	ea46 0608 	orr.w	r6, r6, r8
 8015fd4:	622e      	str	r6, [r5, #32]
 8015fd6:	69eb      	ldr	r3, [r5, #28]
 8015fd8:	f023 0307 	bic.w	r3, r3, #7
 8015fdc:	61eb      	str	r3, [r5, #28]
 8015fde:	69eb      	ldr	r3, [r5, #28]
 8015fe0:	433b      	orrs	r3, r7
 8015fe2:	61eb      	str	r3, [r5, #28]
 8015fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015fe8:	2b0f      	cmp	r3, #15
 8015fea:	bf08      	it	eq
 8015fec:	2314      	moveq	r3, #20
 8015fee:	e7cf      	b.n	8015f90 <i2s_psc_config+0x34>
 8015ff0:	f7fe fba0 	bl	8014734 <rcu_clock_freq_get>
 8015ff4:	e7d5      	b.n	8015fa2 <i2s_psc_config+0x46>
 8015ff6:	b90f      	cbnz	r7, 8015ffc <i2s_psc_config+0xa0>
 8015ff8:	0944      	lsrs	r4, r0, #5
 8015ffa:	e7d8      	b.n	8015fae <i2s_psc_config+0x52>
 8015ffc:	0984      	lsrs	r4, r0, #6
 8015ffe:	e7d6      	b.n	8015fae <i2s_psc_config+0x52>
 8016000:	40003800 	andmi	r3, r0, r0, lsl #16
 8016004:	40021000 	andmi	r1, r2, r0
 8016008:	017d7840 	cmneq	sp, r0, asr #16

0801600c <i2s_enable>:
 801600c:	69c3      	ldr	r3, [r0, #28]
 801600e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8016012:	61c3      	str	r3, [r0, #28]
 8016014:	4770      	bx	lr

08016016 <i2s_disable>:
 8016016:	69c3      	ldr	r3, [r0, #28]
 8016018:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801601c:	61c3      	str	r3, [r0, #28]
 801601e:	4770      	bx	lr

08016020 <spi_dma_enable>:
 8016020:	6843      	ldr	r3, [r0, #4]
 8016022:	b919      	cbnz	r1, 801602c <spi_dma_enable+0xc>
 8016024:	f043 0302 	orr.w	r3, r3, #2
 8016028:	6043      	str	r3, [r0, #4]
 801602a:	4770      	bx	lr
 801602c:	f043 0301 	orr.w	r3, r3, #1
 8016030:	e7fa      	b.n	8016028 <spi_dma_enable+0x8>
	...

08016034 <mac_address_get(unsigned char*)>:
 8016034:	2102      	movs	r1, #2
 8016036:	4a07      	ldr	r2, [pc, #28]	; (8016054 <mac_address_get(unsigned char*)+0x20>)
 8016038:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 801603c:	f8d2 27ec 	ldr.w	r2, [r2, #2028]	; 0x7ec
 8016040:	7001      	strb	r1, [r0, #0]
 8016042:	7042      	strb	r2, [r0, #1]
 8016044:	0e1a      	lsrs	r2, r3, #24
 8016046:	7082      	strb	r2, [r0, #2]
 8016048:	0c1a      	lsrs	r2, r3, #16
 801604a:	70c2      	strb	r2, [r0, #3]
 801604c:	0a1a      	lsrs	r2, r3, #8
 801604e:	7102      	strb	r2, [r0, #4]
 8016050:	7143      	strb	r3, [r0, #5]
 8016052:	4770      	bx	lr
 8016054:	1ffff000 	svcne	0x00fff000

08016058 <__popcountsi2>:
 8016058:	0843      	lsrs	r3, r0, #1
 801605a:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 801605e:	1ac0      	subs	r0, r0, r3
 8016060:	0883      	lsrs	r3, r0, #2
 8016062:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8016066:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 801606a:	4418      	add	r0, r3
 801606c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8016070:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8016074:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8016078:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 801607c:	0e00      	lsrs	r0, r0, #24
 801607e:	4770      	bx	lr

Disassembly of section .rodata:

08016080 <vtable for DisplayHandler-0x9c>:
 8016080:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016084:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 8016090:	03020100 	movweq	r0, #8448	; 0x2100
 8016094:	08070604 	stmdaeq	r7, {r2, r9, sl}
 8016098:	00000009 	andeq	r0, r0, r9
 801609c:	03020100 	movweq	r0, #8448	; 0x2100
 80160a0:	3a732504 	bcc	9cdf4b8 <__exidx_end+0x1cc71a0>
 80160a4:	31007525 	tstcc	r0, r5, lsr #10
 80160a8:	36323a31 			; <UNDEFINED> instruction: 0x36323a31
 80160ac:	0035353a 	eorseq	r3, r5, sl, lsr r5
 80160b0:	2074634f 	rsbscs	r6, r4, pc, asr #6
 80160b4:	32203131 	eorcc	r3, r0, #1073741836	; 0x4000000c
 80160b8:	00323230 	eorseq	r3, r2, r0, lsr r2
 80160bc:	32335b1b 	eorscc	r5, r3, #27648	; 0x6c00
 80160c0:	7472416d 	ldrbtvc	r4, [r2], #-365	; 0xfffffe93
 80160c4:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
 80160c8:	50203420 	eorpl	r3, r0, r0, lsr #8
 80160cc:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 80160d0:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 80160d4:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 8015f0c <i2c_flag_get+0x8>
 80160d8:	2072656c 	rsbscs	r6, r2, ip, ror #10
 80160dc:	2078317b 	rsbscs	r3, r8, fp, ror r1
 80160e0:	6e552034 	mrcvs	0, 2, r2, cr5, cr4, {1}
 80160e4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 80160e8:	7d736573 	cfldr64vc	mvdx6, [r3, #-460]!	; 0xfffffe34
 80160ec:	37335b1b 			; <UNDEFINED> instruction: 0x37335b1b
 80160f0:	5f2e006d 	svcpl	0x002e006d
 80160f4:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 80160f8:	41006769 	tstmi	r0, r9, ror #14
 80160fc:	4e2d7472 	mcrmi	4, 1, r7, cr13, cr2, {3}
 8016100:	34207465 	strtcc	r7, [r0], #-1125	; 0xfffffb9b
 8016104:	78695020 	stmdavc	r9!, {r5, ip, lr}^
 8016108:	31206c65 			; <UNDEFINED> instruction: 0x31206c65
 801610c:	3a732500 	bcc	9cdf514 <__exidx_end+0x1cc71fc>
 8016110:	47206425 	strmi	r6, [r0, -r5, lsr #8]!
 8016114:	25206425 	strcs	r6, [r0, #-1061]!	; 0xfffffbdb
 8016118:	00000073 	andeq	r0, r0, r3, ror r0

0801611c <vtable for DisplayHandler>:
	...
 8016124:	08008247 	stmdaeq	r0, {r0, r1, r2, r6, r9, pc}
 8016128:	0800826d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, pc}
 801612c:	08008329 	stmdaeq	r0, {r0, r3, r5, r8, r9, pc}

08016130 <vtable for DisplayUdfHandler>:
	...
 8016138:	08008249 	stmdaeq	r0, {r0, r3, r6, r9, pc}
 801613c:	08008279 	stmdaeq	r0, {r0, r3, r4, r5, r6, r9, pc}
 8016140:	08008301 	stmdaeq	r0, {r0, r8, r9, pc}
 8016144:	0800824b 	stmdaeq	r0, {r0, r1, r3, r6, r9, pc}
 8016148:	080082ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r9, pc}
 801614c:	080082d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, pc}
 8016150:	080082c5 	stmdaeq	r0, {r0, r2, r6, r7, r9, pc}
 8016154:	080082b1 	stmdaeq	r0, {r0, r4, r5, r7, r9, pc}
 8016158:	0800829d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r9, pc}
 801615c:	0800824d 	stmdaeq	r0, {r0, r2, r3, r6, r9, pc}
 8016160:	0800824f 	stmdaeq	r0, {r0, r1, r2, r3, r6, r9, pc}

08016164 <vtable for ArtNetTriggerHandler>:
	...
 801616c:	08008251 	stmdaeq	r0, {r0, r4, r6, r9, pc}
 8016170:	08008285 	stmdaeq	r0, {r0, r2, r7, r9, pc}
 8016174:	08008595 	stmdaeq	r0, {r0, r2, r4, r7, r8, sl, pc}

08016178 <vtable for PixelDmxStartStop>:
	...
 8016180:	08008253 	stmdaeq	r0, {r0, r1, r4, r6, r9, pc}
 8016184:	08008291 	stmdaeq	r0, {r0, r4, r7, r9, pc}
 8016188:	08008255 	stmdaeq	r0, {r0, r2, r4, r6, r9, pc}
 801618c:	08008261 	stmdaeq	r0, {r0, r5, r6, r9, pc}

08016190 <CSWTCH.69>:
 8016190:	444e4f4f 	strbmi	r4, [lr], #-3919	; 0xfffff0b1
 8016194:	 			; <UNDEFINED> instruction: 0x332e3146

08016195 <SOFTWARE_VERSION>:
 8016195:	00332e31 	eorseq	r2, r3, r1, lsr lr

08016199 <gamma10_0>:
 8016199:	03020100 	movweq	r0, #8448	; 0x2100
 801619d:	07060504 	streq	r0, [r6, -r4, lsl #10]
 80161a1:	0b0a0908 	bleq	82985c9 <__exidx_end+0x2802b1>
 80161a5:	0f0e0d0c 	svceq	0x000e0d0c
 80161a9:	13121110 	tstne	r2, #16, 2
 80161ad:	17161514 			; <UNDEFINED> instruction: 0x17161514
 80161b1:	1b1a1918 	blne	869c619 <__exidx_end+0x684301>
 80161b5:	1f1e1d1c 	svcne	0x001e1d1c
 80161b9:	23222120 			; <UNDEFINED> instruction: 0x23222120
 80161bd:	27262524 	strcs	r2, [r6, -r4, lsr #10]!
 80161c1:	2b2a2928 	blcs	8aa0669 <__exidx_end+0xa88351>
 80161c5:	2f2e2d2c 	svccs	0x002e2d2c
 80161c9:	33323130 	teqcc	r2, #48, 2
 80161cd:	37363534 			; <UNDEFINED> instruction: 0x37363534
 80161d1:	3b3a3938 	blcc	8ea46b9 <__exidx_end+0xe8c3a1>
 80161d5:	3f3e3d3c 	svccc	0x003e3d3c
 80161d9:	43424140 	movtmi	r4, #8512	; 0x2140
 80161dd:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 80161e1:	4b4a4948 	blmi	92a8709 <__exidx_end+0x12903f1>
 80161e5:	4f4e4d4c 	svcmi	0x004e4d4c
 80161e9:	53525150 	cmppl	r2, #80, 2
 80161ed:	57565554 			; <UNDEFINED> instruction: 0x57565554
 80161f1:	5b5a5958 	blpl	96ac759 <__exidx_end+0x1694441>
 80161f5:	5f5e5d5c 	svcpl	0x005e5d5c
 80161f9:	63626160 	cmnvs	r2, #96, 2
 80161fd:	67666564 	strbvs	r6, [r6, -r4, ror #10]!
 8016201:	6b6a6968 	blvs	9ab07a9 <__exidx_end+0x1a98491>
 8016205:	6f6e6d6c 	svcvs	0x006e6d6c
 8016209:	73727170 	cmnvc	r2, #112, 2
 801620d:	77767574 			; <UNDEFINED> instruction: 0x77767574
 8016211:	7b7a7978 	blvc	9eb47f9 <__exidx_end+0x1e9c4e1>
 8016215:	7f7e7d7c 	svcvc	0x007e7d7c
 8016219:	83828180 	orrhi	r8, r2, #128, 2
 801621d:	87868584 	strhi	r8, [r6, r4, lsl #11]
 8016221:	8b8a8988 	blhi	62b8849 <__stack_size+0x62b6849>
 8016225:	8f8e8d8c 	svchi	0x008e8d8c
 8016229:	93929190 	orrsls	r9, r2, #144, 2	; 0x24
 801622d:	97969594 			; <UNDEFINED> instruction: 0x97969594
 8016231:	9b9a9998 	blls	66bc899 <__stack_size+0x66ba899>
 8016235:	9f9e9d9c 	svcls	0x009e9d9c
 8016239:	a3a2a1a0 			; <UNDEFINED> instruction: 0xa3a2a1a0
 801623d:	a7a6a5a4 	strge	sl, [r6, r4, lsr #11]!
 8016241:	abaaa9a8 	blge	6ac08e9 <__stack_size+0x6abe8e9>
 8016245:	afaeadac 	svcge	0x00aeadac
 8016249:	b3b2b1b0 			; <UNDEFINED> instruction: 0xb3b2b1b0
 801624d:	b7b6b5b4 			; <UNDEFINED> instruction: 0xb7b6b5b4
 8016251:	bbbab9b8 	bllt	6ec4939 <__stack_size+0x6ec2939>
 8016255:	bfbebdbc 	svclt	0x00bebdbc
 8016259:	c3c2c1c0 	bicgt	ip, r2, #192, 2	; 0x30
 801625d:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
 8016261:	cbcac9c8 	blgt	72c8989 <__stack_size+0x72c6989>
 8016265:	cfcecdcc 	svcgt	0x00cecdcc
 8016269:	d3d2d1d0 	bicsle	sp, r2, #208, 2	; 0x34
 801626d:	d7d6d5d4 			; <UNDEFINED> instruction: 0xd7d6d5d4
 8016271:	dbdad9d8 	blle	76cc9d9 <__stack_size+0x76ca9d9>
 8016275:	dfdedddc 	svcle	0x00dedddc
 8016279:	e3e2e1e0 	mvn	lr, #224, 2	; 0x38
 801627d:	e7e6e5e4 	strb	lr, [r6, r4, ror #11]!
 8016281:	ebeae9e8 	bl	7ad0a29 <__stack_size+0x7acea29>
 8016285:	efeeedec 	svc	0x00eeedec
 8016289:	f3f2f1f0 	vsra.u64	<illegal reg q15.5>, q8, #14
 801628d:	f7f6f5f4 			; <UNDEFINED> instruction: 0xf7f6f5f4
 8016291:	fbfaf9f8 	blx	7ed4a7b <__stack_size+0x7ed2a7b>
 8016295:	fffefdfc 			; <UNDEFINED> instruction: 0xfffefdfc
 8016299:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801629d:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80162a1:	2c64252e 	cfstr64cs	mvdx2, [r4], #-184	; 0xffffff48
 80162a5:	252c7325 	strcs	r7, [ip, #-805]!	; 0xfffffcdb
 80162a9:	64252c73 	strtvs	r2, [r5], #-3187	; 0xfffff38d
 80162ad:	0a73252c 	beq	9cdf765 <__exidx_end+0x1cc744d>
 80162b1:	2e642500 	cdpcs	5, 6, cr2, cr4, cr0, {0}
 80162b5:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80162b9:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80162bd:	2c73252c 	cfldr64cs	mvdx2, [r3], #-176	; 0xffffff50
 80162c1:	252c7325 	strcs	r7, [ip, #-805]!	; 0xfffffcdb
 80162c5:	4f000a64 	svcmi	0x00000a64
 80162c9:	664f006e 	strbvs	r0, [pc], -lr, rrx
 80162cd:	69640066 	stmdbvs	r4!, {r1, r2, r5, r6}^
 80162d1:	616c7073 	smcvs	50947	; 0xc703
 80162d5:	73253a79 			; <UNDEFINED> instruction: 0x73253a79
 80162d9:	6674000a 	ldrbtvs	r0, [r4], -sl
 80162dd:	253a7074 	ldrcs	r7, [sl, #-116]!	; 0xffffff8c
 80162e1:	76000a73 			; <UNDEFINED> instruction: 0x76000a73
 80162e5:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 80162e9:	253a6e6f 	ldrcs	r6, [sl, #-3695]!	; 0xfffff191
 80162ed:	70750073 	rsbsvc	r0, r5, r3, ror r0
 80162f1:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 80162f5:	7525203a 	strvc	r2, [r5, #-58]!	; 0xffffffc6
 80162f9:	54000a73 	strpl	r0, [r0], #-2675	; 0xfffff58d
 80162fd:	20505446 	subscs	r5, r0, r6, asr #8
 8016301:	20206e4f 	eorcs	r6, r0, pc, asr #28
 8016305:	6265525b 	rsbvs	r5, r5, #-1342177275	; 0xb0000005
 8016309:	5d746f6f 	ldclpl	15, cr6, [r4, #-444]!	; 0xfffffe44
 801630d:	54465400 	strbpl	r5, [r6], #-1024	; 0xfffffc00
 8016311:	664f2050 			; <UNDEFINED> instruction: 0x664f2050
 8016315:	525b2066 	subspl	r2, fp, #102	; 0x66
 8016319:	6f6f6265 	svcvs	0x006f6265
 801631d:	00205d74 	eoreq	r5, r0, r4, ror sp
 8016321:	4f525245 	svcmi	0x00525245
 8016325:	673f2352 			; <UNDEFINED> instruction: 0x673f2352
 8016329:	000a7465 	andeq	r7, sl, r5, ror #8
 801632d:	70746674 	rsbsvc	r6, r4, r4, ror r6
 8016331:	69640023 	stmdbvs	r4!, {r0, r1, r5}^
 8016335:	616c7073 	smcvs	50947	; 0xc703
 8016339:	45002379 	strmi	r2, [r0, #-889]	; 0xfffffc87
 801633d:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
 8016341:	000a2123 	andeq	r2, sl, r3, lsr #2
 8016345:	4f525245 	svcmi	0x00525245
 8016349:	0a3f2352 	beq	8fdf099 <__exidx_end+0xfc6d81>
 801634d:	62657200 	rsbvs	r7, r5, #0, 4
 8016351:	23746f6f 	cmncs	r4, #444	; 0x1bc
 8016355:	696c0023 	stmdbvs	ip!, {r0, r1, r5}^
 8016359:	00237473 	eoreq	r7, r3, r3, ror r4
 801635d:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8016361:	75002a23 	strvc	r2, [r0, #-2595]	; 0xfffff5dd
 8016365:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 8016369:	76002365 	strvc	r2, [r0], -r5, ror #6
 801636d:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8016371:	00236e6f 	eoreq	r6, r3, pc, ror #28
 8016375:	23746567 	cmncs	r4, #432013312	; 0x19c00000
 8016379:	63616600 	cmnvs	r1, #0, 12
 801637d:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8016381:	 	tstmi	r0, r3, lsr #6

08016384 <s_Node>:
 8016384:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016388:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 8016394:	41730000 	cmnmi	r3, r0
 8016398:	45204e43 	strmi	r4, [r0, #-3651]!	; 0xfffff1bd
 801639c:	31332e31 	teqcc	r3, r1, lsr lr
	...
 80163a8:	2043534f 	subcs	r5, r3, pc, asr #6
 80163ac:	76726553 			; <UNDEFINED> instruction: 0x76726553
 80163b0:	00007265 	andeq	r7, r0, r5, ror #4
 80163b4:	00000000 	andeq	r0, r0, r0
 80163b8:	544c0000 	strbpl	r0, [ip], #-0
 80163bc:	00000043 	andeq	r0, r0, r3, asr #32
	...
 80163cc:	2043534f 	subcs	r5, r3, pc, asr #6
 80163d0:	65696c43 	strbvs	r6, [r9, #-3139]!	; 0xfffff3bd
 80163d4:	0000746e 	andeq	r7, r0, lr, ror #8
 80163d8:	00000000 	andeq	r0, r0, r0
 80163dc:	44520000 	ldrbmi	r0, [r2], #-0
 80163e0:	74654e4d 	strbtvc	r4, [r5], #-3661	; 0xfffff1b3
 80163e4:	524c4c20 	subpl	r4, ip, #32, 24	; 0x2000
 80163e8:	6e4f2050 	mcrvs	0, 2, r2, cr15, cr0, {2}
 80163ec:	0000796c 	andeq	r7, r0, ip, ror #18
 80163f0:	776f6853 			; <UNDEFINED> instruction: 0x776f6853
 80163f4:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
	...
 8016400:	494d0000 	stmdbmi	sp, {}^	; <UNPREDICTABLE>
 8016404:	00004944 	andeq	r4, r0, r4, asr #18
	...
 8016414:	00504444 	subseq	r4, r0, r4, asr #8
	...
 8016424:	69500000 	ldmdbvs	r0, {}^	; <UNPREDICTABLE>
 8016428:	506c6578 	rsbpl	r6, ip, r8, ror r5
 801642c:	65687375 	strbvs	r7, [r8, #-885]!	; 0xfffffc8b
 8016430:	00000072 	andeq	r0, r0, r2, ror r0
 8016434:	00000000 	andeq	r0, r0, r0
 8016438:	65646f4e 	strbvs	r6, [r4, #-3918]!	; 0xfffff0b2
	...

0801644a <s_Output>:
 801644a:	00584d44 	subseq	r4, r8, r4, asr #26
	...
 8016456:	004d4452 	subeq	r4, sp, r2, asr r4
	...
 8016462:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
 8016466:	00726f74 	rsbseq	r6, r2, r4, ror pc
 801646a:	00000000 	andeq	r0, r0, r0
 801646e:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 8016472:	0000006c 	andeq	r0, r0, ip, rrx
 8016476:	00000000 	andeq	r0, r0, r0
 801647a:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
 801647e:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 8016482:	00000000 	andeq	r0, r0, r0
 8016486:	0043534f 	subeq	r5, r3, pc, asr #6
	...
 8016492:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 8016496:	00006769 	andeq	r6, r0, r9, ror #14
 801649a:	00000000 	andeq	r0, r0, r0
 801649e:	70657453 	rsbvc	r7, r5, r3, asr r4
 80164a2:	00726570 	rsbseq	r6, r2, r0, ror r5
 80164a6:	00000000 	andeq	r0, r0, r0
 80164aa:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
 80164ae:	00007265 	andeq	r7, r0, r5, ror #4
 80164b2:	00000000 	andeq	r0, r0, r0
 80164b6:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80164ba:	0074654e 	rsbseq	r6, r4, lr, asr #10
 80164be:	00000000 	andeq	r0, r0, r0
 80164c2:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
 80164c6:	00006c61 	andeq	r6, r0, r1, ror #24
 80164ca:	00000000 	andeq	r0, r0, r0
 80164ce:	20424752 	subcs	r4, r2, r2, asr r7
 80164d2:	656e6150 	strbvs	r6, [lr, #-336]!	; 0xfffffeb0
 80164d6:	0000006c 	andeq	r0, r0, ip, rrx
	...

080164dc <RemoteConfig::s_GET>:
 80164dc:	08009ec9 	stmdaeq	r0, {r0, r3, r6, r7, r9, sl, fp, ip, pc}
 80164e0:	00000000 	andeq	r0, r0, r0
 80164e4:	0801634e 	stmdaeq	r1, {r1, r2, r3, r6, r8, r9, sp, lr}
 80164e8:	00000008 	andeq	r0, r0, r8
 80164ec:	08009399 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, ip, pc}
 80164f0:	00000000 	andeq	r0, r0, r0
 80164f4:	08016357 	stmdaeq	r1, {r0, r1, r2, r4, r6, r8, r9, sp, lr}
 80164f8:	00000005 	andeq	r0, r0, r5
 80164fc:	08009399 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, ip, pc}
 8016500:	00000000 	andeq	r0, r0, r0
 8016504:	0801635d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, r9, sp, lr}
 8016508:	00000006 	andeq	r0, r0, r6
 801650c:	0800954d 	stmdaeq	r0, {r0, r2, r3, r6, r8, sl, ip, pc}
 8016510:	00000000 	andeq	r0, r0, r0
 8016514:	08016364 	stmdaeq	r1, {r2, r5, r6, r8, r9, sp, lr}
 8016518:	00000007 	andeq	r0, r0, r7
 801651c:	0800950d 	stmdaeq	r0, {r0, r2, r3, r8, sl, ip, pc}
 8016520:	00000000 	andeq	r0, r0, r0
 8016524:	0801636c 	stmdaeq	r1, {r2, r3, r5, r6, r8, r9, sp, lr}
 8016528:	00000008 	andeq	r0, r0, r8
 801652c:	08009469 	stmdaeq	r0, {r0, r3, r5, r6, sl, ip, pc}
 8016530:	00000000 	andeq	r0, r0, r0
 8016534:	08016333 	stmdaeq	r1, {r0, r1, r4, r5, r8, r9, sp, lr}
 8016538:	00000008 	andeq	r0, r0, r8
 801653c:	080097f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, r9, sl, ip, pc}
 8016540:	00000000 	andeq	r0, r0, r0
 8016544:	08016375 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, r9, sp, lr}
 8016548:	00010004 	andeq	r0, r1, r4
 801654c:	080094bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, sl, ip, pc}
 8016550:	00000000 	andeq	r0, r0, r0
 8016554:	0801632d 	stmdaeq	r1, {r0, r2, r3, r5, r8, r9, sp, lr}
 8016558:	00000005 	andeq	r0, r0, r5
 801655c:	08009bb9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, r9, fp, ip, pc}
 8016560:	00000000 	andeq	r0, r0, r0
 8016564:	0801637a 	stmdaeq	r1, {r1, r3, r4, r5, r6, r8, r9, sp, lr}
 8016568:	00000009 	andeq	r0, r0, r9

0801656c <RemoteConfig::s_SET>:
 801656c:	080095f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, sl, ip, pc}
 8016570:	00000000 	andeq	r0, r0, r0
 8016574:	0801632d 	stmdaeq	r1, {r0, r2, r3, r5, r8, r9, sp, lr}
 8016578:	00010005 	andeq	r0, r1, r5
 801657c:	080095d1 	stmdaeq	r0, {r0, r4, r6, r7, r8, sl, ip, pc}
 8016580:	00000000 	andeq	r0, r0, r0
 8016584:	08016333 	stmdaeq	r1, {r0, r1, r4, r5, r8, r9, sp, lr}
 8016588:	00010008 	andeq	r0, r1, r8
 801658c:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8016590:	2c64253a 	cfstr64cs	mvdx2, [r4], #-232	; 0xffffff18
 8016594:	73252300 			; <UNDEFINED> instruction: 0x73252300
 8016598:	0a64253d 	beq	991fa94 <__exidx_end+0x190777c>
 801659c:	73252200 			; <UNDEFINED> instruction: 0x73252200
 80165a0:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 80165a4:	002c2273 	eoreq	r2, ip, r3, ror r2
 80165a8:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
 80165ac:	000a7325 	andeq	r7, sl, r5, lsr #6
 80165b0:	6f626552 	svcvs	0x00626552
 80165b4:	6e69746f 	cdpvs	4, 6, cr7, cr9, cr15, {3}
 80165b8:	2e2e2067 	cdpcs	0, 2, cr2, cr14, cr7, {3}
 80165bc:	52000a2e 	andpl	r0, r0, #188416	; 0x2e000
 80165c0:	6f6f6265 	svcvs	0x006f6265
 80165c4:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 80165c8:	2e2e2e20 	cdpcs	14, 2, cr2, cr14, cr0, {1}
 80165cc:	6f637200 	svcvs	0x00637200
 80165d0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 80165d4:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 80165d8:	74656e00 	strbtvc	r6, [r5], #-3584	; 0xfffff200
 80165dc:	6b726f77 	blvs	9cb23c0 <__exidx_end+0x1c9a0a8>
 80165e0:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 80165e4:	73696400 	cmnvc	r9, #0, 8
 80165e8:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 80165ec:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 80165f0:	74726100 	ldrbtvc	r6, [r2], #-256	; 0xffffff00
 80165f4:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 80165f8:	00747874 	rsbseq	r7, r4, r4, ror r8
 80165fc:	31333165 	teqcc	r3, r5, ror #2
 8016600:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8016604:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
 8016608:	73656369 	cmnvc	r5, #-1543503871	; 0xa4000001
 801660c:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8016610:	00000000 	andeq	r0, r0, r0

08016614 <RemoteConfig::s_TXT>:
 8016614:	080097f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, r9, sl, ip, pc}
 8016618:	00000000 	andeq	r0, r0, r0
 801661c:	08009ac1 	stmdaeq	r0, {r0, r6, r7, r9, fp, ip, pc}
 8016620:	00000000 	andeq	r0, r0, r0
 8016624:	080165cd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r8, sl, sp, lr}
 8016628:	0000000b 	andeq	r0, r0, fp
 801662c:	0000000c 	andeq	r0, r0, ip
 8016630:	08009825 	stmdaeq	r0, {r0, r2, r5, fp, ip, pc}
 8016634:	00000000 	andeq	r0, r0, r0
 8016638:	08009af1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r9, fp, ip, pc}
 801663c:	00000000 	andeq	r0, r0, r0
 8016640:	080165d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r8, sl, sp, lr}
 8016644:	0000000b 	andeq	r0, r0, fp
 8016648:	00000000 	andeq	r0, r0, r0
 801664c:	080098d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, fp, ip, pc}
 8016650:	00000000 	andeq	r0, r0, r0
 8016654:	08009b91 	stmdaeq	r0, {r0, r4, r7, r8, r9, fp, ip, pc}
 8016658:	00000000 	andeq	r0, r0, r0
 801665c:	080165e5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r8, sl, sp, lr}
 8016660:	0000000b 	andeq	r0, r0, fp
 8016664:	0000000f 	andeq	r0, r0, pc
 8016668:	08009851 	stmdaeq	r0, {r0, r4, r6, fp, ip, pc}
 801666c:	00000000 	andeq	r0, r0, r0
 8016670:	08009b19 	stmdaeq	r0, {r0, r3, r4, r8, r9, fp, ip, pc}
 8016674:	00000000 	andeq	r0, r0, r0
 8016678:	080165f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r8, sl, sp, lr}
 801667c:	0000000a 	andeq	r0, r0, sl
 8016680:	00000001 	andeq	r0, r0, r1
 8016684:	0800987d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, fp, ip, pc}
 8016688:	00000000 	andeq	r0, r0, r0
 801668c:	08009b41 	stmdaeq	r0, {r0, r6, r8, r9, fp, ip, pc}
 8016690:	00000000 	andeq	r0, r0, r0
 8016694:	080165fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r8, sl, sp, lr}
 8016698:	00000008 	andeq	r0, r0, r8
 801669c:	00000004 	andeq	r0, r0, r4
 80166a0:	080098a9 	stmdaeq	r0, {r0, r3, r5, r7, fp, ip, pc}
 80166a4:	00000000 	andeq	r0, r0, r0
 80166a8:	08009b69 	stmdaeq	r0, {r0, r3, r5, r6, r8, r9, fp, ip, pc}
 80166ac:	00000000 	andeq	r0, r0, r0
 80166b0:	08016605 	stmdaeq	r1, {r0, r2, r9, sl, sp, lr}
 80166b4:	0000000b 	andeq	r0, r0, fp
 80166b8:	00000003 	andeq	r0, r0, r3

080166bc <RemoteConfigConst::PARAMS_DISABLE>:
 80166bc:	61736964 	cmnvs	r3, r4, ror #18
 80166c0:	00656c62 	rsbeq	r6, r5, r2, ror #24

080166c4 <RemoteConfigConst::PARAMS_FILE_NAME>:
 80166c4:	6e6f6372 	mcrvs	3, 3, r6, cr15, cr2, {3}
 80166c8:	2e676966 	vnmulcs.f16	s13, s14, s13	; <UNPREDICTABLE>
 80166cc:	00747874 	rsbseq	r7, r4, r4, ror r8

080166d0 <RemoteConfigConst::PARAMS_DISPLAY_NAME>:
 80166d0:	70736964 	rsbsvc	r6, r3, r4, ror #18
 80166d4:	5f79616c 	svcpl	0x0079616c
 80166d8:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

080166dd <RemoteConfigConst::PARAMS_DISABLE_WRITE>:
 80166dd:	61736964 	cmnvs	r3, r4, ror #18
 80166e1:	5f656c62 	svcpl	0x00656c62
 80166e5:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 80166e9:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

080166eb <RemoteConfigConst::PARAMS_ENABLE_REBOOT>:
 80166eb:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 80166ef:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 80166f3:	6f6f6265 	svcvs	0x006f6265
 80166f7:	 	mcrvs	0, 3, r0, cr5, cr4, {3}

080166f9 <RemoteConfigConst::PARAMS_ENABLE_UPTIME>:
 80166f9:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 80166fd:	755f656c 	ldrbvc	r6, [pc, #-1388]	; 8016199 <gamma10_0>
 8016701:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 8016705:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

08016707 <RemoteConfigConst::PARAMS_ENABLE_FACTORY>:
 8016707:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 801670b:	665f656c 	ldrbvs	r6, [pc], -ip, ror #10
 801670f:	6f746361 	svcvs	0x00746361
 8016713:	20007972 	andcs	r7, r0, r2, ror r9
 8016717:	696e5520 	stmdbvs	lr!, {r5, r8, sl, ip, lr}^
 801671b:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801671f:	61207365 			; <UNDEFINED> instruction: 0x61207365
 8016723:	6d206572 	cfstr32vs	mvfx6, [r0, #-456]!	; 0xfffffe38
 8016727:	70707061 	rsbsvc	r7, r0, r1, rrx
 801672b:	2b206465 	blcs	882f8c7 <__exidx_end+0x8175af>
 801672f:	00000a31 	andeq	r0, r0, r1, lsr sl
	...

08016734 <vtable for ArtNet4Node>:
	...
 801673c:	0800a071 	stmdaeq	r0, {r0, r4, r5, r6, sp, pc}
 8016740:	0800a091 	stmdaeq	r0, {r0, r4, r7, sp, pc}
 8016744:	08009ffb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 8016748:	0800a0d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, sp, pc}
 801674c:	0800a0a3 	stmdaeq	r0, {r0, r1, r5, r7, sp, pc}
 8016750:	08009feb 	stmdaeq	r0, {r0, r1, r3, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 8016754:	0800a059 	stmdaeq	r0, {r0, r3, r4, r6, sp, pc}

08016758 <ArtNetMsgConst::START>:
 8016758:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
 801675c:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 8016760:	74724120 	ldrbtvc	r4, [r2], #-288	; 0xfffffee0
 8016764:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
	...

08016769 <ArtNetMsgConst::PARAMS>:
 8016769:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 801676d:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 8016771:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8016775:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016779:	0074654e 	rsbseq	r6, r4, lr, asr #10

0801677d <ArtNetMsgConst::STARTED>:
 801677d:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016781:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8016785:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8016789:	00646574 	rsbeq	r6, r4, r4, ror r5
 801678d:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 8016791:	37303146 	ldrcc	r3, [r0, -r6, asr #2]!
 8016795:	25004352 	strcs	r4, [r0, #-850]	; 0xfffffcae
 8016799:	73252073 			; <UNDEFINED> instruction: 0x73252073
 801679d:	20642520 	rsbcs	r2, r4, r0, lsr #10
 80167a1:	68007325 	stmdavs	r0, {r0, r2, r5, r8, r9, ip, sp, lr}
 80167a5:	73707474 	cmnvc	r0, #116, 8	; 0x74000000
 80167a9:	672f2f3a 			; <UNDEFINED> instruction: 0x672f2f3a
 80167ad:	2d323364 	ldccs	3, cr3, [r2, #-400]!	; 0xfffffe70
 80167b1:	2e786d64 	cdpcs	13, 7, cr6, cr8, cr4, {3}
 80167b5:	0067726f 	rsbeq	r7, r7, pc, ror #4
 80167b9:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
 80167bd:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
	...

080167c2 <artnet::NODE_ID>:
 80167c2:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80167c6:	0074654e 	rsbseq	r6, r4, lr, asr #10

080167ca <defaults::SHORT_NAME>:
 80167ca:	20567641 	subscs	r7, r6, r1, asr #12
 80167ce:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80167d2:	2074654e 	rsbscs	r6, r4, lr, asr #10
 80167d6:	65646f4e 	strbvs	r6, [r4, #-3918]!	; 0xfffff0b2
 80167da:	34302500 	ldrtcc	r2, [r0], #-1280	; 0xfffffb00
 80167de:	255b2078 	ldrbcs	r2, [fp, #-120]	; 0xffffff88
 80167e2:	5d643430 	cfstrdpl	mvd3, [r4, #-192]!	; 0xffffff40
 80167e6:	20732520 	rsbscs	r2, r3, r0, lsr #10
 80167ea:	00567641 	subseq	r7, r6, r1, asr #12

080167ee <artnet::NODE_ID>:
 80167ee:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80167f2:	0074654e 	rsbseq	r6, r4, lr, asr #10
 80167f6:	00505448 	subseq	r5, r0, r8, asr #8
 80167fa:	0050544c 	subseq	r5, r0, ip, asr #8
 80167fe:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016802:	0074654e 	rsbseq	r6, r4, lr, asr #10
 8016806:	4e434173 	mcrmi	1, 2, r4, cr3, cr3, {3}
 801680a:	646f4e00 	strbtvs	r4, [pc], #-3584	; 8016812 <artnet::NODE_ID+0x24>
 801680e:	64252065 	strtvs	r2, [r5], #-101	; 0xffffff9b
 8016812:	75255b20 	strvc	r5, [r5, #-2848]!	; 0xfffff4e0
 8016816:	20000a5d 	andcs	r0, r0, sp, asr sl
 801681a:	6d726946 			; <UNDEFINED> instruction: 0x6d726946
 801681e:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0xfffffe89
 8016822:	3a202020 	bcc	881e8aa <__exidx_end+0x806592>
 8016826:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 801682a:	000a6425 	andeq	r6, sl, r5, lsr #8
 801682e:	6f685320 	svcvs	0x00685320
 8016832:	6e207472 	mcrvs	4, 1, r7, cr0, cr2, {3}
 8016836:	20656d61 	rsbcs	r6, r5, r1, ror #26
 801683a:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 801683e:	4c20000a 	stcmi	0, cr0, [r0], #-40	; 0xffffffd8
 8016842:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 8016846:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 801684a:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801684e:	000a7325 	andeq	r7, sl, r5, lsr #6
 8016852:	74754f20 	ldrbtvc	r4, [r5], #-3872	; 0xfffff0e0
 8016856:	0a747570 	beq	9d33e1e <__exidx_end+0x1d1bb06>
 801685a:	50202000 	eorpl	r2, r0, r0
 801685e:	2074726f 	rsbscs	r7, r4, pc, ror #4
 8016862:	20643225 	rsbcs	r3, r4, r5, lsr #4
 8016866:	20753425 	rsbscs	r3, r5, r5, lsr #8
 801686a:	5d73255b 	cfldr64pl	mvdx2, [r3, #-364]!	; 0xfffffe94
 801686e:	257b2000 	ldrbcs	r2, [fp, #-0]!
 8016872:	000a7d73 	andeq	r7, sl, r3, ror sp
 8016876:	706e4920 	rsbvc	r4, lr, r0, lsr #18
 801687a:	000a7475 	andeq	r7, sl, r5, ror r4
 801687e:	6f502020 	svcvs	0x00502020
 8016882:	25207472 	strcs	r7, [r0, #-1138]!	; 0xfffffb8e
 8016886:	25206432 	strcs	r6, [r0, #-1074]!	; 0xfffffbce
 801688a:	2d207534 	cfstr32cs	mvfx7, [r0, #-208]!	; 0xffffff30
 801688e:	6425203e 	strtvs	r2, [r5], #-62	; 0xffffffc2
 8016892:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8016896:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801689a:	68000a64 	stmdavs	r0, {r2, r5, r6, r9, fp}
 801689e:	00646c6f 	rsbeq	r6, r4, pc, ror #24
 80168a2:	0066666f 	rsbeq	r6, r6, pc, ror #12
 80168a6:	70006e6f 	andvc	r6, r0, pc, ror #28
 80168aa:	6279616c 	rsbsvs	r6, r9, #108, 2
 80168ae:	006b6361 	rsbeq	r6, fp, r1, ror #6
 80168b2:	6e636173 	mcrvs	1, 3, r6, cr3, cr3, {3}
 80168b6:	706e6900 	rsbvc	r6, lr, r0, lsl #18
 80168ba:	6f007475 	svcvs	0x00007475
 80168be:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 80168c2:	69640074 	stmdbvs	r4!, {r2, r4, r5, r6}^
 80168c6:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
 80168ca:	746c0065 	strbtvc	r0, [ip], #-101	; 0xffffff9b
 80168ce:	74680070 	strbtvc	r0, [r8], #-112	; 0xffffff90
 80168d2:	72610070 	rsbvc	r0, r1, #112	; 0x70
 80168d6:	74656e74 	strbtvc	r6, [r5], #-3700	; 0xfffff18c
 80168da:	74724100 	ldrbtvc	r4, [r2], #-256	; 0xffffff00
 80168de:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
 80168e2:	00003420 	andeq	r3, r0, r0, lsr #8
	...

080168e8 <CSWTCH.93>:
 80168e8:	0801689d 	stmdaeq	r1, {r0, r2, r3, r4, r7, fp, sp, lr}
 80168ec:	080168a2 	stmdaeq	r1, {r1, r5, r7, fp, sp, lr}
 80168f0:	080168a6 	stmdaeq	r1, {r1, r2, r5, r7, fp, sp, lr}
 80168f4:	080168a9 	stmdaeq	r1, {r0, r3, r5, r7, fp, sp, lr}

080168f8 <ArtNetParamsConst::ENABLE_RDM>:
 80168f8:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 80168fc:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 8016900:	 	stcvs	13, cr6, [r0, #-400]	; 0xfffffe70

08016903 <ArtNetParamsConst::MAP_UNIVERSE0>:
 8016903:	5f70616d 	svcpl	0x0070616d
 8016907:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801690b:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801690f:	 	rsbsvc	r0, r0, #48	; 0x30

08016911 <ArtNetParamsConst::PROTOCOL_PORT>:
 8016911:	746f7270 	strbtvc	r7, [pc], #-624	; 8016919 <ArtNetParamsConst::PROTOCOL_PORT+0x8>
 8016915:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8016760 <ArtNetMsgConst::START+0x8>
 8016919:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801691d:	00615f74 	rsbeq	r5, r1, r4, ror pc
 8016921:	746f7270 	strbtvc	r7, [pc], #-624	; 8016929 <ArtNetParamsConst::PROTOCOL_PORT+0x18>
 8016925:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8016770 <ArtNetMsgConst::PARAMS+0x7>
 8016929:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801692d:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8016931:	746f7270 	strbtvc	r7, [pc], #-624	; 8016939 <ArtNetParamsConst::PROTOCOL_PORT+0x28>
 8016935:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8016780 <ArtNetMsgConst::STARTED+0x3>
 8016939:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801693d:	00635f74 	rsbeq	r5, r3, r4, ror pc
 8016941:	746f7270 	strbtvc	r7, [pc], #-624	; 8016949 <ArtNetParamsConst::PROTOCOL_PORT+0x38>
 8016945:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8016790 <ArtNetMsgConst::STARTED+0x13>
 8016949:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801694d:	00645f74 	rsbeq	r5, r4, r4, ror pc

08016951 <ArtNetParamsConst::NODE_LONG_NAME>:
 8016951:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 8016955:	6d616e5f 	stclvs	14, cr6, [r1, #-380]!	; 0xfffffe84
 8016959:	 	ldmdavs	r3!, {r0, r2, r5, r6}^

0801695b <ArtNetParamsConst::NODE_SHORT_NAME>:
 801695b:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 801695f:	616e5f74 	smcvs	58868	; 0xe5f4
 8016963:	 	andvc	r6, r0, #457179136	; 0x1b400000

08016966 <ArtNetParamsConst::RDM_ENABLE_PORT>:
 8016966:	5f6d6472 	svcpl	0x006d6472
 801696a:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 801696e:	705f656c 	subsvc	r6, pc, ip, ror #10
 8016972:	5f74726f 	svcpl	0x0074726f
 8016976:	64720061 	ldrbtvs	r0, [r2], #-97	; 0xffffff9f
 801697a:	6e655f6d 	cdpvs	15, 6, cr5, cr5, cr13, {3}
 801697e:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8016982:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016986:	00625f74 	rsbeq	r5, r2, r4, ror pc
 801698a:	5f6d6472 	svcpl	0x006d6472
 801698e:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8016992:	705f656c 	subsvc	r6, pc, ip, ror #10
 8016996:	5f74726f 	svcpl	0x0074726f
 801699a:	64720063 	ldrbtvs	r0, [r2], #-99	; 0xffffff9d
 801699e:	6e655f6d 	cdpvs	15, 6, cr5, cr5, cr13, {3}
 80169a2:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 80169a6:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 80169aa:	00645f74 	rsbeq	r5, r4, r4, ror pc

080169ae <ArtNetParamsConst::DESTINATION_IP_PORT>:
 80169ae:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 80169b2:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 80169b6:	5f6e6f69 	svcpl	0x006e6f69
 80169ba:	705f7069 	subsvc	r7, pc, r9, rrx
 80169be:	5f74726f 	svcpl	0x0074726f
 80169c2:	00000061 	andeq	r0, r0, r1, rrx
 80169c6:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 80169ca:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 80169ce:	5f6e6f69 	svcpl	0x006e6f69
 80169d2:	705f7069 	subsvc	r7, pc, r9, rrx
 80169d6:	5f74726f 	svcpl	0x0074726f
 80169da:	00000062 	andeq	r0, r0, r2, rrx
 80169de:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 80169e2:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 80169e6:	5f6e6f69 	svcpl	0x006e6f69
 80169ea:	705f7069 	subsvc	r7, pc, r9, rrx
 80169ee:	5f74726f 	svcpl	0x0074726f
 80169f2:	00000063 	andeq	r0, r0, r3, rrx
 80169f6:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 80169fa:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 80169fe:	5f6e6f69 	svcpl	0x006e6f69
 8016a02:	705f7069 	subsvc	r7, pc, r9, rrx
 8016a06:	5f74726f 	svcpl	0x0074726f
 8016a0a:	00000064 	andeq	r0, r0, r4, rrx

08016a0e <ArtNetParamsConst::NET>:
 8016a0e:	0074656e 	rsbseq	r6, r4, lr, ror #10

08016a12 <ArtNetParamsConst::SUBNET>:
 8016a12:	6e627573 	mcrvs	5, 3, r7, cr2, cr3, {3}
 8016a16:	 	tstvs	r0, r5, ror #8

08016a19 <ArtNetParamsConst::FILE_NAME>:
 8016a19:	6e747261 	cdpvs	2, 7, cr7, cr4, cr1, {3}
 8016a1d:	742e7465 	strtvc	r7, [lr], #-1125	; 0xfffffb9b
 8016a21:	 			; <UNDEFINED> instruction: 0xff007478

08016a24 <ArtNetConst::OEM_ID>:
 8016a24:	 	ldrsheq	pc, [r0], #-255	; 0xffffff01	; <UNPREDICTABLE>

08016a26 <ArtNetConst::ESTA_ID>:
 8016a26:	 	smlsdcc	r1, r0, r0, r0

08016a28 <ArtNetConst::VERSION>:
 8016a28:	33323701 	teqcc	r2, #262144	; 0x40000
 8016a2c:	35322e39 	ldrcc	r2, [r2, #-3641]!	; 0xfffff1c7
 8016a30:	2e302e35 	mrccs	14, 1, r2, cr0, cr5, {1}
 8016a34:	2e250030 	mcrcs	0, 1, r0, cr5, cr0, {1}
 8016a38:	20733834 	rsbscs	r3, r3, r4, lsr r8
 8016a3c:	30007325 	andcc	r7, r0, r5, lsr #6
 8016a40:	6f4e202e 	svcvs	0x004e202e
 8016a44:	73616320 	cmnvc	r1, #32, 6	; 0x80000000
 8016a48:	6d207365 	stcvs	3, cr7, [r0, #-404]!	; 0xfffffe6c
 8016a4c:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
 8016a50:	202c6465 	eorcs	r6, ip, r5, ror #8
 8016a54:	73696874 	cmnvc	r9, #116, 16	; 0x740000
 8016a58:	6f687320 	svcvs	0x00687320
 8016a5c:	6e646c75 	mcrvs	12, 3, r6, cr4, cr5, {3}
 8016a60:	68207427 	stmdavs	r0!, {r0, r1, r2, r5, sl, ip, sp, lr}
 8016a64:	65707061 	ldrbvs	r7, [r0, #-97]!	; 0xffffff9f
 8016a68:	000a216e 	andeq	r2, sl, lr, ror #2
 8016a6c:	64697242 	strbtvs	r7, [r9], #-578	; 0xfffffdbe
 8016a70:	000a6567 	andeq	r6, sl, r7, ror #10
 8016a74:	72694620 	rsbvc	r4, r9, #32, 12	; 0x2000000
 8016a78:	7261776d 	rsbvc	r7, r1, #28573696	; 0x1b40000
 8016a7c:	203a2065 	eorscs	r2, sl, r5, rrx
 8016a80:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016a84:	20000a64 	andcs	r0, r0, r4, ror #20
 8016a88:	20444943 	subcs	r4, r4, r3, asr #18
 8016a8c:	20202020 	eorcs	r2, r0, r0, lsr #32
 8016a90:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8016a94:	20000a73 	andcs	r0, r0, r3, ror sl
 8016a98:	726f5020 	rsbvc	r5, pc, #32
 8016a9c:	32252074 	eorcc	r2, r5, #116	; 0x74
 8016aa0:	6e552064 	cdpvs	0, 5, cr2, cr5, cr4, {3}
 8016aa4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 8016aa8:	25206573 	strcs	r6, [r0, #-1395]!	; 0xfffffa8d
 8016aac:	2064332d 	rsbcs	r3, r4, sp, lsr #6
 8016ab0:	5d73255b 	cfldr64pl	mvdx2, [r3, #-364]!	; 0xfffffe94
 8016ab4:	2020000a 	eorcs	r0, r0, sl
 8016ab8:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
 8016abc:	64322520 	ldrtvs	r2, [r2], #-1312	; 0xfffffae0
 8016ac0:	696e5520 	stmdbvs	lr!, {r5, r8, sl, ip, lr}^
 8016ac4:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8016ac8:	2d252065 	stccs	0, cr2, [r5, #-404]!	; 0xfffffe6c
 8016acc:	5b206433 	blpl	882fba0 <__exidx_end+0x817888>
 8016ad0:	0a5d6425 	beq	976fb6c <__exidx_end+0x1757854>
 8016ad4:	79532000 	ldmdbvc	r3, {sp}^
 8016ad8:	7268636e 	rsbvc	r6, r8, #-1207959551	; 0xb8000001
 8016adc:	7a696e6f 	bvc	9a724a0 <__exidx_end+0x1a5a188>
 8016ae0:	73692065 	cmnvc	r9, #101	; 0x65
 8016ae4:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 8016ae8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8016aec:	44000a64 	strmi	r0, [r0], #-2660	; 0xfffff59c
 8016af0:	4f20584d 	svcmi	0x0020584d
 8016af4:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 8016af8:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
 8016afc:	6e492058 	mcrvs	0, 2, r2, cr9, cr8, {2}
 8016b00:	00747570 	rsbseq	r7, r4, r0, ror r5

08016b04 <CSWTCH.56>:
 8016b04:	0801689d 	stmdaeq	r1, {r0, r2, r3, r4, r7, fp, sp, lr}
 8016b08:	080168a2 	stmdaeq	r1, {r1, r5, r7, fp, sp, lr}
 8016b0c:	080168a6 	stmdaeq	r1, {r1, r2, r5, r7, fp, sp, lr}
 8016b10:	080168a9 	stmdaeq	r1, {r0, r3, r5, r7, fp, sp, lr}

08016b14 <E131ParamsConst::PRIORITY>:
 8016b14:	6f697270 	svcvs	0x00697270
 8016b18:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 8016b1c:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016b20:	00615f74 	rsbeq	r5, r1, r4, ror pc
 8016b24:	72700000 	rsbsvc	r0, r0, #0
 8016b28:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 8016b2c:	705f7974 	subsvc	r7, pc, r4, ror r9	; <UNPREDICTABLE>
 8016b30:	5f74726f 	svcpl	0x0074726f
 8016b34:	00000062 	andeq	r0, r0, r2, rrx
 8016b38:	6f697270 	svcvs	0x00697270
 8016b3c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 8016b40:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016b44:	00635f74 	rsbeq	r5, r3, r4, ror pc
 8016b48:	72700000 	rsbsvc	r0, r0, #0
 8016b4c:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 8016b50:	705f7974 	subsvc	r7, pc, r4, ror r9	; <UNPREDICTABLE>
 8016b54:	5f74726f 	svcpl	0x0074726f
 8016b58:	00000064 	andeq	r0, r0, r4, rrx

08016b5c <E131ParamsConst::FILE_NAME>:
 8016b5c:	31333165 	teqcc	r3, r5, ror #2
 8016b60:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
	...

08016b65 <E117Const::ACN_PACKET_IDENTIFIER>:
 8016b65:	2d435341 	stclcs	3, cr5, [r3, #-260]	; 0xfffffefc
 8016b69:	312e3145 			; <UNDEFINED> instruction: 0x312e3145
 8016b6d:	00000037 	andeq	r0, r0, r7, lsr r0

08016b71 <E131BridgeConst::VERSION>:
 8016b71:	30251901 	eorcc	r1, r5, r1, lsl #18
 8016b75:	252d7838 	strcs	r7, [sp, #-2104]!	; 0xfffff7c8
 8016b79:	2d783430 	cfldrdcs	mvd3, [r8, #-192]!	; 0xffffff40
 8016b7d:	78343025 	ldmdavc	r4!, {r0, r2, r5, ip, sp}
 8016b81:	3230252d 	eorscc	r2, r0, #188743680	; 0xb400000
 8016b85:	32302578 	eorscc	r2, r0, #120, 10	; 0x1e000000
 8016b89:	30252d78 	eorcc	r2, r5, r8, ror sp
 8016b8d:	30257832 	eorcc	r7, r5, r2, lsr r8
 8016b91:	30257832 	eorcc	r7, r5, r2, lsr r8
 8016b95:	30257832 	eorcc	r7, r5, r2, lsr r8
 8016b99:	30257832 	eorcc	r7, r5, r2, lsr r8
 8016b9d:	30257832 	eorcc	r7, r5, r2, lsr r8
 8016ba1:	50007832 	andpl	r7, r0, r2, lsr r8
 8016ba5:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 8016ba9:	584d4420 	stmdapl	sp, {r5, sl, lr}^
 8016bad:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 8016bb1:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
 8016bb5:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 8016bb9:	000a6e6f 	andeq	r6, sl, pc, ror #28
 8016bbd:	74754f20 	ldrbtvc	r4, [r5], #-3872	; 0xfffff0e0
 8016bc1:	73747570 	cmnvc	r4, #112, 10	; 0x1c000000
 8016bc5:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8016bc9:	20000a64 	andcs	r0, r0, r4, ror #20
 8016bcd:	756f7247 	strbvc	r7, [pc, #-583]!	; 801698e <ArtNetParamsConst::RDM_ENABLE_PORT+0x28>
 8016bd1:	676e6970 			; <UNDEFINED> instruction: 0x676e6970
 8016bd5:	756f6320 	strbvc	r6, [pc, #-800]!	; 80168bd <artnet::NODE_ID+0xcf>
 8016bd9:	3a20746e 	bcc	8833d99 <__exidx_end+0x81ba81>
 8016bdd:	20642520 	rsbcs	r2, r4, r0, lsr #10
 8016be1:	6f72475b 	svcvs	0x0072475b
 8016be5:	20737075 	rsbscs	r7, r3, r5, ror r0
 8016be9:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8016bed:	 	andeq	r0, r0, sp, asr sl

08016bf0 <vtable for WS28xxDmx>:
	...
 8016bf8:	0800dca1 	stmdaeq	r0, {r0, r5, r7, sl, fp, ip, lr, pc}
 8016bfc:	0800dcc1 	stmdaeq	r0, {r0, r6, r7, sl, fp, ip, lr, pc}
 8016c00:	0800de15 	stmdaeq	r0, {r0, r2, r4, r9, sl, fp, ip, lr, pc}
 8016c04:	0800de2d 	stmdaeq	r0, {r0, r2, r3, r5, r9, sl, fp, ip, lr, pc}
 8016c08:	0800dcf9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, sl, fp, ip, lr, pc}
 8016c0c:	0800dcd3 	stmdaeq	r0, {r0, r1, r4, r6, r7, sl, fp, ip, lr, pc}
 8016c10:	0800ddf9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, sl, fp, ip, lr, pc}
 8016c14:	0800de0f 	stmdaeq	r0, {r0, r1, r2, r3, r9, sl, fp, ip, lr, pc}
 8016c18:	0800de45 	stmdaeq	r0, {r0, r2, r6, r9, sl, fp, ip, lr, pc}
 8016c1c:	0800dc95 	stmdaeq	r0, {r0, r2, r4, r7, sl, fp, ip, lr, pc}
 8016c20:	0800dc9b 	stmdaeq	r0, {r0, r1, r3, r4, r7, sl, fp, ip, lr, pc}
 8016c24:	0800de7d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r9, sl, fp, ip, lr, pc}
 8016c28:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8016c2c:	2a2e253a 	bcs	8ba011c <__exidx_end+0xb87e04>
 8016c30:	23002c66 	movwcs	r2, #3174	; 0xc66
 8016c34:	253d7325 	ldrcs	r7, [sp, #-805]!	; 0xfffffcdb
 8016c38:	0a662a2e 	beq	99a14f8 <__exidx_end+0x19891e0>
 8016c3c:	65643c00 	strbvs	r3, [r4, #-3072]!	; 0xfffff400
 8016c40:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
 8016c44:	4f003e74 	svcmi	0x00003e74
 8016c48:	77726576 			; <UNDEFINED> instruction: 0x77726576
 8016c4c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 8016c50:	74616420 	strbtvc	r6, [r1], #-1056	; 0xfffffbe0
 8016c54:	65687361 	strbvs	r7, [r8, #-865]!	; 0xfffffc9f
 8016c58:	4f007465 	svcmi	0x00007465
 8016c5c:	77726576 			; <UNDEFINED> instruction: 0x77726576
 8016c60:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 8016c64:	6d697420 	cfstrdvs	mvd7, [r9, #-128]!	; 0xffffff80
 8016c68:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8016c6c:	29737528 	ldmdbcs	r3!, {r3, r5, r8, sl, ip, sp, lr}^
 8016c70:	6f724700 	svcvs	0x00724700
 8016c74:	6e697075 	mcrvs	0, 3, r7, cr9, cr5, {3}
 8016c78:	6c430067 	mcrrvs	0, 6, r0, r3, cr7
 8016c7c:	206b636f 	rsbcs	r6, fp, pc, ror #6
 8016c80:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
 8016c84:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
 8016c88:	00737069 	rsbseq	r7, r3, r9, rrx
 8016c8c:	31415041 	cmpcc	r1, r1, asr #32
 8016c90:	532f3230 			; <UNDEFINED> instruction: 0x532f3230
 8016c94:	3238394b 	eorscc	r3, r8, #1228800	; 0x12c000
 8016c98:	65540032 	ldrbvs	r0, [r4, #-50]	; 0xffffffce
 8016c9c:	70207473 	eorvc	r7, r0, r3, ror r4
 8016ca0:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
 8016ca4:	59006e72 	stmdbpl	r0, {r1, r4, r5, r6, r9, sl, fp, sp, lr}
 8016ca8:	4e007365 	cdpmi	3, 0, cr7, cr0, cr5, {3}
 8016cac:	6950006f 	ldmdbvs	r0, {r0, r1, r2, r3, r5, r6}^
 8016cb0:	206c6578 	rsbcs	r6, ip, r8, ror r5
 8016cb4:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 8016cb8:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 8016cbc:	6f697461 	svcvs	0x00697461
 8016cc0:	20000a6e 	andcs	r0, r0, lr, ror #20
 8016cc4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
 8016cc8:	20202020 	eorcs	r2, r0, r0, lsr #32
 8016ccc:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 8016cd0:	64255b20 	strtvs	r5, [r5], #-2848	; 0xfffff4e0
 8016cd4:	20000a5d 	andcs	r0, r0, sp, asr sl
 8016cd8:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
 8016cdc:	20202074 	eorcs	r2, r0, r4, ror r0
 8016ce0:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8016ce4:	4d20000a 	stcmi	0, cr0, [r0, #-40]!	; 0xffffffd8
 8016ce8:	69707061 	ldmdbvs	r0!, {r0, r5, r6, ip, sp, lr}^
 8016cec:	3a20676e 	bcc	8830aac <__exidx_end+0x818794>
 8016cf0:	20732520 	rsbscs	r2, r3, r0, lsr #10
 8016cf4:	5d64255b 	cfstr64pl	mvdx2, [r4, #-364]!	; 0xfffffe94
 8016cf8:	5420000a 	strtpl	r0, [r0], #-10
 8016cfc:	20204830 	eorcs	r4, r0, r0, lsr r8
 8016d00:	3a202020 	bcc	881ed88 <__exidx_end+0x806a70>
 8016d04:	322e2520 	eorcc	r2, lr, #32, 10	; 0x8000000
 8016d08:	305b2066 	subscc	r2, fp, r6, rrx
 8016d0c:	5d582578 	cfldr64pl	mvdx2, [r8, #-480]	; 0xfffffe20
 8016d10:	5420000a 	strtpl	r0, [r0], #-10
 8016d14:	20204831 	eorcs	r4, r0, r1, lsr r8
 8016d18:	3a202020 	bcc	881eda0 <__exidx_end+0x806a88>
 8016d1c:	322e2520 	eorcc	r2, lr, #32, 10	; 0x8000000
 8016d20:	305b2066 	subscc	r2, fp, r6, rrx
 8016d24:	5d582578 	cfldr64pl	mvdx2, [r8, #-480]	; 0xfffffe20
 8016d28:	4720000a 	strmi	r0, [r0, -sl]!
 8016d2c:	61626f6c 	cmnvs	r2, ip, ror #30
 8016d30:	6972426c 	ldmdbvs	r2!, {r2, r3, r5, r6, r9, lr}^
 8016d34:	6e746867 	cdpvs	8, 7, cr6, cr4, cr7, {3}
 8016d38:	3a737365 	bcc	9cf3ad4 <__exidx_end+0x1cdb7bc>
 8016d3c:	0a752520 	beq	9d601c4 <__exidx_end+0x1d47eac>
 8016d40:	61472000 	mrsvs	r2, (UNDEF: 71)
 8016d44:	20616d6d 	rsbcs	r6, r1, sp, ror #26
 8016d48:	72726f63 	rsbsvc	r6, r2, #396	; 0x18c
 8016d4c:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 8016d50:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 8016d54:	20000a73 	andcs	r0, r0, r3, ror sl
 8016d58:	636f6c43 	cmnvs	pc, #17152	; 0x4300
 8016d5c:	25203a6b 	strcs	r3, [r0, #-2667]!	; 0xfffff595
 8016d60:	7a482075 	bvc	921ef3c <__exidx_end+0x1206c24>
 8016d64:	0000000a 	andeq	r0, r0, sl

08016d68 <CSWTCH.9>:
 8016d68:	08016f7c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, r9, sl, fp, sp, lr}
 8016d6c:	0801707c 	stmdaeq	r1, {r2, r3, r4, r5, r6, ip, sp, lr}
 8016d70:	0801717c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, ip, sp, lr}
 8016d74:	0801727c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r9, ip, sp, lr}
 8016d78:	0801737c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, r9, ip, sp, lr}

08016d7c <gamma10_0>:
 8016d7c:	03020100 	movweq	r0, #8448	; 0x2100
 8016d80:	07060504 	streq	r0, [r6, -r4, lsl #10]
 8016d84:	0b0a0908 	bleq	82991ac <__exidx_end+0x280e94>
 8016d88:	0f0e0d0c 	svceq	0x000e0d0c
 8016d8c:	13121110 	tstne	r2, #16, 2
 8016d90:	17161514 			; <UNDEFINED> instruction: 0x17161514
 8016d94:	1b1a1918 	blne	869d1fc <__exidx_end+0x684ee4>
 8016d98:	1f1e1d1c 	svcne	0x001e1d1c
 8016d9c:	23222120 			; <UNDEFINED> instruction: 0x23222120
 8016da0:	27262524 	strcs	r2, [r6, -r4, lsr #10]!
 8016da4:	2b2a2928 	blcs	8aa124c <__exidx_end+0xa88f34>
 8016da8:	2f2e2d2c 	svccs	0x002e2d2c
 8016dac:	33323130 	teqcc	r2, #48, 2
 8016db0:	37363534 			; <UNDEFINED> instruction: 0x37363534
 8016db4:	3b3a3938 	blcc	8ea529c <__exidx_end+0xe8cf84>
 8016db8:	3f3e3d3c 	svccc	0x003e3d3c
 8016dbc:	43424140 	movtmi	r4, #8512	; 0x2140
 8016dc0:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 8016dc4:	4b4a4948 	blmi	92a92ec <__exidx_end+0x1290fd4>
 8016dc8:	4f4e4d4c 	svcmi	0x004e4d4c
 8016dcc:	53525150 	cmppl	r2, #80, 2
 8016dd0:	57565554 			; <UNDEFINED> instruction: 0x57565554
 8016dd4:	5b5a5958 	blpl	96ad33c <__exidx_end+0x1695024>
 8016dd8:	5f5e5d5c 	svcpl	0x005e5d5c
 8016ddc:	63626160 	cmnvs	r2, #96, 2
 8016de0:	67666564 	strbvs	r6, [r6, -r4, ror #10]!
 8016de4:	6b6a6968 	blvs	9ab138c <__exidx_end+0x1a99074>
 8016de8:	6f6e6d6c 	svcvs	0x006e6d6c
 8016dec:	73727170 	cmnvc	r2, #112, 2
 8016df0:	77767574 			; <UNDEFINED> instruction: 0x77767574
 8016df4:	7b7a7978 	blvc	9eb53dc <__exidx_end+0x1e9d0c4>
 8016df8:	7f7e7d7c 	svcvc	0x007e7d7c
 8016dfc:	83828180 	orrhi	r8, r2, #128, 2
 8016e00:	87868584 	strhi	r8, [r6, r4, lsl #11]
 8016e04:	8b8a8988 	blhi	62b942c <__stack_size+0x62b742c>
 8016e08:	8f8e8d8c 	svchi	0x008e8d8c
 8016e0c:	93929190 	orrsls	r9, r2, #144, 2	; 0x24
 8016e10:	97969594 			; <UNDEFINED> instruction: 0x97969594
 8016e14:	9b9a9998 	blls	66bd47c <__stack_size+0x66bb47c>
 8016e18:	9f9e9d9c 	svcls	0x009e9d9c
 8016e1c:	a3a2a1a0 			; <UNDEFINED> instruction: 0xa3a2a1a0
 8016e20:	a7a6a5a4 	strge	sl, [r6, r4, lsr #11]!
 8016e24:	abaaa9a8 	blge	6ac14cc <__stack_size+0x6abf4cc>
 8016e28:	afaeadac 	svcge	0x00aeadac
 8016e2c:	b3b2b1b0 			; <UNDEFINED> instruction: 0xb3b2b1b0
 8016e30:	b7b6b5b4 			; <UNDEFINED> instruction: 0xb7b6b5b4
 8016e34:	bbbab9b8 	bllt	6ec551c <__stack_size+0x6ec351c>
 8016e38:	bfbebdbc 	svclt	0x00bebdbc
 8016e3c:	c3c2c1c0 	bicgt	ip, r2, #192, 2	; 0x30
 8016e40:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
 8016e44:	cbcac9c8 	blgt	72c956c <__stack_size+0x72c756c>
 8016e48:	cfcecdcc 	svcgt	0x00cecdcc
 8016e4c:	d3d2d1d0 	bicsle	sp, r2, #208, 2	; 0x34
 8016e50:	d7d6d5d4 			; <UNDEFINED> instruction: 0xd7d6d5d4
 8016e54:	dbdad9d8 	blle	76cd5bc <__stack_size+0x76cb5bc>
 8016e58:	dfdedddc 	svcle	0x00dedddc
 8016e5c:	e3e2e1e0 	mvn	lr, #224, 2	; 0x38
 8016e60:	e7e6e5e4 	strb	lr, [r6, r4, ror #11]!
 8016e64:	ebeae9e8 	bl	7ad160c <__stack_size+0x7acf60c>
 8016e68:	efeeedec 	svc	0x00eeedec
 8016e6c:	f3f2f1f0 	vsra.u64	<illegal reg q15.5>, q8, #14
 8016e70:	f7f6f5f4 			; <UNDEFINED> instruction: 0xf7f6f5f4
 8016e74:	fbfaf9f8 	blx	7ed565e <__stack_size+0x7ed365e>
 8016e78:	fffefdfc 			; <UNDEFINED> instruction: 0xfffefdfc

08016e7c <gamma20_0>:
	...
 8016e88:	01010101 	tsteq	r1, r1, lsl #2
 8016e8c:	01010101 	tsteq	r1, r1, lsl #2
 8016e90:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 8016e94:	03030202 	movweq	r0, #12802	; 0x3202
 8016e98:	04040303 	streq	r0, [r4], #-771	; 0xfffffcfd
 8016e9c:	05050404 	streq	r0, [r5, #-1028]	; 0xfffffbfc
 8016ea0:	06060505 	streq	r0, [r6], -r5, lsl #10
 8016ea4:	07070706 	streq	r0, [r7, -r6, lsl #14]
 8016ea8:	09080808 	stmdbeq	r8, {r3, fp}
 8016eac:	0a0a0909 	beq	82992d8 <__exidx_end+0x280fc0>
 8016eb0:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 8016eb4:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 8016eb8:	100f0f0e 	andne	r0, pc, lr, lsl #30
 8016ebc:	12111110 	andsne	r1, r1, #16, 2
 8016ec0:	14131312 	ldrne	r1, [r3], #-786	; 0xfffffcee
 8016ec4:	16151514 			; <UNDEFINED> instruction: 0x16151514
 8016ec8:	18181717 	ldmdane	r8, {r0, r1, r2, r4, r8, r9, sl, ip}
 8016ecc:	1b1a1a19 	blne	869d738 <__exidx_end+0x685420>
 8016ed0:	1e1d1c1c 	mrcne	12, 0, r1, cr13, cr12, {0}
 8016ed4:	20201f1e 	eorcs	r1, r0, lr, lsl pc
 8016ed8:	23232221 			; <UNDEFINED> instruction: 0x23232221
 8016edc:	26262524 	strtcs	r2, [r6], -r4, lsr #10
 8016ee0:	2a292827 	bcs	8a60f84 <__exidx_end+0xa48c6c>
 8016ee4:	2d2c2b2a 	vstmdbcs	ip!, {d2-d22}
 8016ee8:	302f2f2e 	eorcc	r2, pc, lr, lsr #30
 8016eec:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 8016ef0:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 8016ef4:	3b3a3938 	blcc	8ea53dc <__exidx_end+0xe8d0c4>
 8016ef8:	3f3e3d3c 	svccc	0x003e3d3c
 8016efc:	43424140 	movtmi	r4, #8512	; 0x2140
 8016f00:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 8016f04:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 8016f08:	504f4e4d 	subpl	r4, pc, sp, asr #28
 8016f0c:	55545251 	ldrbpl	r5, [r4, #-593]	; 0xfffffdaf
 8016f10:	59585756 	ldmdbpl	r8, {r1, r2, r4, r6, r8, r9, sl, ip, lr}^
 8016f14:	5e5d5c5b 	mrcpl	12, 2, r5, cr13, cr11, {2}
 8016f18:	6362615f 	cmnvs	r2, #-1073741801	; 0xc0000017
 8016f1c:	68676664 	stmdavs	r7!, {r2, r5, r6, r9, sl, sp, lr}^
 8016f20:	6d6c6b69 	fstmdbxvs	ip!, {d22-d73}	;@ Deprecated
 8016f24:	7371706f 	cmnvc	r1, #111	; 0x6f
 8016f28:	78777574 	ldmdavc	r7!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}^
 8016f2c:	7e7c7b79 	vmovvc.s8	r7, d12[7]
 8016f30:	8382807f 	orrhi	r8, r2, #127	; 0x7f
 8016f34:	89888685 	stmibhi	r8, {r0, r2, r7, r9, sl, pc}
 8016f38:	8f8e8c8b 	svchi	0x008e8c8b
 8016f3c:	95949291 	ldrls	r9, [r4, #657]	; 0x291
 8016f40:	9b9a9897 	blls	66bd1a4 <__stack_size+0x66bb1a4>
 8016f44:	a2a09e9d 	adcge	r9, r0, #2512	; 0x9d0
 8016f48:	a8a6a5a3 	stmiage	r6!, {r0, r1, r5, r7, r8, sl, sp, pc}
 8016f4c:	afadabaa 	svcge	0x00adabaa
 8016f50:	b5b4b2b0 	ldrlt	fp, [r4, #688]!	; 0x2b0
 8016f54:	bcbab9b7 			; <UNDEFINED> instruction: 0xbcbab9b7
 8016f58:	c3c1c0be 	bicgt	ip, r1, #190	; 0xbe
 8016f5c:	cac8c7c5 	bgt	7248e78 <__stack_size+0x7246e78>
 8016f60:	d1cfcecc 	bicle	ip, pc, ip, asr #29
 8016f64:	d9d7d5d3 	ldmible	r7, {r0, r1, r4, r6, r7, r8, sl, ip, lr, pc}^
 8016f68:	e0dedcda 	ldrsb	sp, [lr], #202	; 0xca
 8016f6c:	e8e6e4e2 	stmia	r6!, {r1, r5, r6, r7, sl, sp, lr, pc}^
 8016f70:	efedebe9 	svc	0x00edebe9
 8016f74:	f7f5f3f1 			; <UNDEFINED> instruction: 0xf7f5f3f1
 8016f78:	fffdfbf9 			; <UNDEFINED> instruction: 0xfffdfbf9

08016f7c <gamma21_0>:
	...
 8016f88:	01010000 	mrseq	r0, (UNDEF: 1)
 8016f8c:	01010101 	tsteq	r1, r1, lsl #2
 8016f90:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
 8016f94:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 8016f98:	03030302 	movweq	r0, #13058	; 0x3302
 8016f9c:	04040303 	streq	r0, [r4], #-771	; 0xfffffcfd
 8016fa0:	05050404 	streq	r0, [r5, #-1028]	; 0xfffffbfc
 8016fa4:	06060505 	streq	r0, [r6], -r5, lsl #10
 8016fa8:	07070706 	streq	r0, [r7, -r6, lsl #14]
 8016fac:	09080808 	stmdbeq	r8, {r3, fp}
 8016fb0:	0a0a0909 	beq	82993dc <__exidx_end+0x2810c4>
 8016fb4:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 8016fb8:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 8016fbc:	0f0f0e0e 	svceq	0x000f0e0e
 8016fc0:	11111010 	tstne	r1, r0, lsl r0
 8016fc4:	14131212 	ldrne	r1, [r3], #-530	; 0xfffffdee
 8016fc8:	16151514 			; <UNDEFINED> instruction: 0x16151514
 8016fcc:	18181716 	ldmdane	r8, {r1, r2, r4, r8, r9, sl, ip}
 8016fd0:	1b1a1919 	blne	869d43c <__exidx_end+0x685124>
 8016fd4:	1d1d1c1b 	ldcne	12, cr1, [sp, #-108]	; 0xffffff94
 8016fd8:	201f1f1e 	andscs	r1, pc, lr, lsl pc	; <UNPREDICTABLE>
 8016fdc:	23222121 			; <UNDEFINED> instruction: 0x23222121
 8016fe0:	26252424 	strtcs	r2, [r5], -r4, lsr #8
 8016fe4:	29282827 	stmdbcs	r8!, {r0, r1, r2, r5, fp, sp}
 8016fe8:	2c2c2b2a 			; <UNDEFINED> instruction: 0x2c2c2b2a
 8016fec:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 8016ff0:	33333231 	teqcc	r3, #268435459	; 0x10000003
 8016ff4:	37363534 			; <UNDEFINED> instruction: 0x37363534
 8016ff8:	3b3a3938 	blcc	8ea54e0 <__exidx_end+0xe8d1c8>
 8016ffc:	3f3e3d3c 	svccc	0x003e3d3c
 8017000:	43424140 	movtmi	r4, #8512	; 0x2140
 8017004:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 8017008:	4c4b4948 	mcrrmi	9, 4, r4, fp, cr8	; <UNPREDICTABLE>
 801700c:	504f4e4d 	subpl	r4, pc, sp, asr #28
 8017010:	55545351 	ldrbpl	r5, [r4, #-849]	; 0xfffffcaf
 8017014:	5a585756 	bpl	962cd74 <__exidx_end+0x1614a5c>
 8017018:	5f5d5c5b 	svcpl	0x005d5c5b
 801701c:	64626160 	strbtvs	r6, [r2], #-352	; 0xfffffea0
 8017020:	69686665 	stmdbvs	r8!, {r0, r2, r5, r6, r9, sl, sp, lr}^
 8017024:	6e6d6b6a 	vnmulvs.f64	d22, d13, d26
 8017028:	74727170 	ldrbtvc	r7, [r2], #-368	; 0xfffffe90
 801702c:	79787675 	ldmdbvc	r8!, {r0, r2, r4, r5, r6, r9, sl, ip, sp, lr}^
 8017030:	7f7e7c7b 	svcvc	0x007e7c7b
 8017034:	85838281 	strhi	r8, [r3, #641]	; 0x281
 8017038:	8b898886 	blhi	6279258 <__stack_size+0x6277258>
 801703c:	91908e8d 	orrsls	r8, r0, sp, lsl #29
 8017040:	97969493 			; <UNDEFINED> instruction: 0x97969493
 8017044:	9e9c9b99 	vmovls.32	r9, d28[0]
 8017048:	a5a3a1a0 	strge	sl, [r3, #416]!	; 0x1a0
 801704c:	abaaa8a6 	blge	6ac12ec <__stack_size+0x6abf2ec>
 8017050:	b2b0afad 	adcslt	sl, r0, #692	; 0x2b4
 8017054:	b9b7b6b4 	ldmiblt	r7!, {r2, r4, r5, r7, r9, sl, ip, sp, pc}
 8017058:	c0bfbdbb 	ldrhtgt	fp, [pc], fp
 801705c:	c8c6c4c2 	stmiagt	r6, {r1, r6, r7, sl, lr, pc}^
 8017060:	cfcdcbca 	svcgt	0x00cdcbca
 8017064:	d7d5d3d1 			; <UNDEFINED> instruction: 0xd7d5d3d1
 8017068:	dfdddbd9 	svcle	0x00dddbd9
 801706c:	e6e4e2e1 	strbt	lr, [r4], r1, ror #5
 8017070:	eeeceae8 	vfms.f32	s29, s25, s17
 8017074:	f7f5f3f1 			; <UNDEFINED> instruction: 0xf7f5f3f1
 8017078:	fffdfbf9 			; <UNDEFINED> instruction: 0xfffdfbf9

0801707c <gamma22_0>:
	...
 8017088:	01000000 	mrseq	r0, (UNDEF: 0)
 801708c:	01010101 	tsteq	r1, r1, lsl #2
 8017090:	01010101 	tsteq	r1, r1, lsl #2
 8017094:	02020201 	andeq	r0, r2, #268435456	; 0x10000000
 8017098:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801709c:	03030303 	movweq	r0, #13059	; 0x3303
 80170a0:	04040403 	streq	r0, [r4], #-1027	; 0xfffffbfd
 80170a4:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
 80170a8:	06060605 	streq	r0, [r6], -r5, lsl #12
 80170ac:	07070706 	streq	r0, [r7, -r6, lsl #14]
 80170b0:	09080808 	stmdbeq	r8, {r3, fp}
 80170b4:	0a0a0909 	beq	82994e0 <__exidx_end+0x2811c8>
 80170b8:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 80170bc:	0d0d0d0c 	stceq	13, cr0, [sp, #-48]	; 0xffffffd0
 80170c0:	0f0f0e0e 	svceq	0x000f0e0e
 80170c4:	11111010 	tstne	r1, r0, lsl r0
 80170c8:	13131212 	tstne	r3, #536870913	; 0x20000001
 80170cc:	16151414 			; <UNDEFINED> instruction: 0x16151414
 80170d0:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 80170d4:	1a1a1919 	bne	869d540 <__exidx_end+0x685228>
 80170d8:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 80170dc:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 80170e0:	23222121 			; <UNDEFINED> instruction: 0x23222121
 80170e4:	26252423 	strtcs	r2, [r5], -r3, lsr #8
 80170e8:	29282727 	stmdbcs	r8!, {r0, r1, r2, r5, r8, r9, sl, sp}
 80170ec:	2c2b2b2a 			; <UNDEFINED> instruction: 0x2c2b2b2a
 80170f0:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 80170f4:	33323131 	teqcc	r2, #1073741836	; 0x4000000c
 80170f8:	37363534 			; <UNDEFINED> instruction: 0x37363534
 80170fc:	3b3a3938 	blcc	8ea55e4 <__exidx_end+0xe8d2cc>
 8017100:	3f3e3d3c 	svccc	0x003e3d3c
 8017104:	43424140 	movtmi	r4, #8512	; 0x2140
 8017108:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 801710c:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 8017110:	514f4e4d 	cmppl	pc, sp, asr #28
 8017114:	55545352 	ldrbpl	r5, [r4, #-850]	; 0xfffffcae
 8017118:	5a595857 	bpl	966d27c <__exidx_end+0x1654f64>
 801711c:	5f5e5d5b 	svcpl	0x005e5d5b
 8017120:	64636261 	strbtvs	r6, [r3], #-609	; 0xfffffd9f
 8017124:	6a696766 	bvs	9a70ec4 <__exidx_end+0x1a58bac>
 8017128:	6f6e6d6b 	svcvs	0x006e6d6b
 801712c:	75747271 	ldrbvc	r7, [r4, #-625]!	; 0xfffffd8f
 8017130:	7b797877 	blvc	9e75314 <__exidx_end+0x1e5cffc>
 8017134:	817f7e7c 	cmnhi	pc, ip, ror lr	; <UNPREDICTABLE>
 8017138:	87858482 	strhi	r8, [r5, r2, lsl #9]
 801713c:	8d8c8a89 	vstrhi	s16, [ip, #548]	; 0x224
 8017140:	9492918f 	ldrls	r9, [r2], #399	; 0x18f
 8017144:	9a999795 	bls	667cfa0 <__stack_size+0x667afa0>
 8017148:	a19f9e9c 			; <UNDEFINED> instruction: 0xa19f9e9c
 801714c:	a8a6a5a3 	stmiage	r6!, {r0, r1, r5, r7, r8, sl, sp, pc}
 8017150:	afadacaa 	svcge	0x00adacaa
 8017154:	b6b5b3b1 			; <UNDEFINED> instruction: 0xb6b5b3b1
 8017158:	bebcbab8 			; <UNDEFINED> instruction: 0xbebcbab8
 801715c:	c5c4c2c0 	strbgt	ip, [r4, #704]	; 0x2c0
 8017160:	cdcbc9c7 	vstrgt.16	s25, [fp, #398]	; 0x18e	; <UNPREDICTABLE>
 8017164:	d5d3d1cf 	ldrble	sp, [r3, #463]	; 0x1cf
 8017168:	dddbd9d7 	vldrle.16	s27, [fp, #430]	; 0x1ae	; <UNPREDICTABLE>
 801716c:	e5e3e1df 	strb	lr, [r3, #479]!	; 0x1df
 8017170:	eeeceae7 	vfms.f32	s29, s25, s15
 8017174:	f6f4f2f0 			; <UNDEFINED> instruction: 0xf6f4f2f0
 8017178:	fffdfbf8 			; <UNDEFINED> instruction: 0xfffdfbf8

0801717c <gamma23_0>:
	...
 801718c:	01010100 	mrseq	r0, (UNDEF: 17)
 8017190:	01010101 	tsteq	r1, r1, lsl #2
 8017194:	01010101 	tsteq	r1, r1, lsl #2
 8017198:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801719c:	03020202 	movweq	r0, #8706	; 0x2202
 80171a0:	03030303 	movweq	r0, #13059	; 0x3303
 80171a4:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 80171a8:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
 80171ac:	06060605 	streq	r0, [r6], -r5, lsl #12
 80171b0:	07070707 	streq	r0, [r7, -r7, lsl #14]
 80171b4:	09080808 	stmdbeq	r8, {r3, fp}
 80171b8:	0a0a0a09 	beq	82999e4 <__exidx_end+0x2816cc>
 80171bc:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 80171c0:	0d0d0d0c 	stceq	13, cr0, [sp, #-48]	; 0xffffffd0
 80171c4:	0f0f0e0e 	svceq	0x000f0e0e
 80171c8:	11111010 	tstne	r1, r0, lsl r0
 80171cc:	13131212 	tstne	r3, #536870913	; 0x20000001
 80171d0:	15151414 	ldrne	r1, [r5, #-1044]	; 0xfffffbec
 80171d4:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 80171d8:	1a1a1918 	bne	869d640 <__exidx_end+0x685328>
 80171dc:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 80171e0:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 80171e4:	23222120 			; <UNDEFINED> instruction: 0x23222120
 80171e8:	26252423 	strtcs	r2, [r5], -r3, lsr #8
 80171ec:	29282726 	stmdbcs	r8!, {r1, r2, r5, r8, r9, sl, sp}
 80171f0:	2c2b2a2a 			; <UNDEFINED> instruction: 0x2c2b2a2a
 80171f4:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 80171f8:	33323131 	teqcc	r2, #1073741836	; 0x4000000c
 80171fc:	37363534 			; <UNDEFINED> instruction: 0x37363534
 8017200:	3b3a3938 	blcc	8ea56e8 <__exidx_end+0xe8d3d0>
 8017204:	3f3e3d3c 	svccc	0x003e3d3c
 8017208:	43424140 	movtmi	r4, #8512	; 0x2140
 801720c:	48474645 	stmdami	r7, {r0, r2, r6, r9, sl, lr}^
 8017210:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 8017214:	51504f4e 	cmppl	r0, lr, asr #30
 8017218:	56555452 			; <UNDEFINED> instruction: 0x56555452
 801721c:	5b5a5957 	blpl	96ad780 <__exidx_end+0x1695468>
 8017220:	605f5e5c 	subsvs	r5, pc, ip, asr lr	; <UNPREDICTABLE>
 8017224:	66646362 	strbtvs	r6, [r4], -r2, ror #6
 8017228:	6b6a6867 	blvs	9ab13cc <__exidx_end+0x1a990b4>
 801722c:	71706e6d 	cmnvc	r0, sp, ror #28
 8017230:	77757472 			; <UNDEFINED> instruction: 0x77757472
 8017234:	7d7b7a78 	vldmdbvc	fp!, {s15-s134}
 8017238:	8382807e 	orrhi	r8, r2, #126	; 0x7e
 801723c:	8a888685 	bhi	6238c58 <__stack_size+0x6236c58>
 8017240:	908f8d8b 	addls	r8, pc, fp, lsl #27
 8017244:	97959492 			; <UNDEFINED> instruction: 0x97959492
 8017248:	9e9c9a99 			; <UNDEFINED> instruction: 0x9e9c9a99
 801724c:	a5a3a1a0 	strge	sl, [r3, #416]!	; 0x1a0
 8017250:	acaaa9a7 			; <UNDEFINED> instruction: 0xacaaa9a7
 8017254:	b4b2b0ae 	ldrtlt	fp, [r2], #174	; 0xae
 8017258:	bbb9b7b6 	bllt	6e85138 <__stack_size+0x6e83138>
 801725c:	c3c1bfbd 	bicgt	fp, r1, #756	; 0x2f4
 8017260:	cbc9c7c5 	blgt	728917c <__stack_size+0x728717c>
 8017264:	d3d1cfcd 	bicsle	ip, r1, #820	; 0x334
 8017268:	dcdad7d5 	ldclle	7, cr13, [sl], {213}	; 0xd5
 801726c:	e4e2e0de 	strbt	lr, [r2], #222	; 0xde
 8017270:	edebe9e6 			; <UNDEFINED> instruction: 0xedebe9e6
 8017274:	f6f4f1ef 			; <UNDEFINED> instruction: 0xf6f4f1ef
 8017278:	fffdfaf8 			; <UNDEFINED> instruction: 0xfffdfaf8

0801727c <gamma24_0>:
	...
 801728c:	01000000 	mrseq	r0, (UNDEF: 0)
 8017290:	01010101 	tsteq	r1, r1, lsl #2
 8017294:	01010101 	tsteq	r1, r1, lsl #2
 8017298:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
 801729c:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 80172a0:	03030202 	movweq	r0, #12802	; 0x3202
 80172a4:	04030303 	streq	r0, [r3], #-771	; 0xfffffcfd
 80172a8:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 80172ac:	05050505 	streq	r0, [r5, #-1285]	; 0xfffffafb
 80172b0:	06060606 	streq	r0, [r6], -r6, lsl #12
 80172b4:	08070707 	stmdaeq	r7, {r0, r1, r2, r8, r9, sl}
 80172b8:	09090808 	stmdbeq	r9, {r3, fp}
 80172bc:	0a0a0a09 	beq	8299ae8 <__exidx_end+0x2817d0>
 80172c0:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 80172c4:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 80172c8:	0f0f0e0e 	svceq	0x000f0e0e
 80172cc:	11111010 	tstne	r1, r0, lsl r0
 80172d0:	13131212 	tstne	r3, #536870913	; 0x20000001
 80172d4:	16151414 			; <UNDEFINED> instruction: 0x16151414
 80172d8:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 80172dc:	1a1a1918 	bne	869d744 <__exidx_end+0x68542c>
 80172e0:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 80172e4:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 80172e8:	23222120 			; <UNDEFINED> instruction: 0x23222120
 80172ec:	26252423 	strtcs	r2, [r5], -r3, lsr #8
 80172f0:	29282727 	stmdbcs	r8!, {r0, r1, r2, r5, r8, r9, sl, sp}
 80172f4:	2c2b2b2a 			; <UNDEFINED> instruction: 0x2c2b2b2a
 80172f8:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 80172fc:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 8017300:	37363535 			; <UNDEFINED> instruction: 0x37363535
 8017304:	3b3a3938 	blcc	8ea57ec <__exidx_end+0xe8d4d4>
 8017308:	403f3e3c 	eorsmi	r3, pc, ip, lsr lr	; <UNPREDICTABLE>
 801730c:	44434241 	strbmi	r4, [r3], #-577	; 0xfffffdbf
 8017310:	49474645 	stmdbmi	r7, {r0, r2, r6, r9, sl, lr}^
 8017314:	4d4c4b4a 	vstrmi	d20, [ip, #-296]	; 0xfffffed8
 8017318:	5251504e 	subspl	r5, r1, #78	; 0x4e
 801731c:	57565553 			; <UNDEFINED> instruction: 0x57565553
 8017320:	5c5b5a58 	mrrcpl	10, 5, r5, fp, cr8
 8017324:	62605f5e 	rsbvs	r5, r0, #376	; 0x178
 8017328:	67666463 	strbvs	r6, [r6, -r3, ror #8]!
 801732c:	6d6c6a69 	vstmdbvs	ip!, {s13-s117}
 8017330:	7372706f 	cmnvc	r2, #111	; 0x6f
 8017334:	79787675 	ldmdbvc	r8!, {r0, r2, r4, r5, r6, r9, sl, ip, sp, lr}^
 8017338:	7f7e7c7b 	svcvc	0x007e7c7b
 801733c:	86848381 	strhi	r8, [r4], r1, lsl #7
 8017340:	8d8b8988 	vstrhi.16	s16, [fp, #272]	; 0x110	; <UNPREDICTABLE>
 8017344:	9492908e 	ldrls	r9, [r2], #142	; 0x8e
 8017348:	9b999795 	blls	667d1a4 <__stack_size+0x667b1a4>
 801734c:	a2a09e9c 	adcge	r9, r0, #156, 28	; 0x9c0
 8017350:	a9a7a6a4 	stmibge	r7!, {r2, r5, r7, r9, sl, sp, pc}
 8017354:	b1afadab 			; <UNDEFINED> instruction: 0xb1afadab
 8017358:	b9b7b5b3 	ldmiblt	r7!, {r0, r1, r4, r5, r7, r8, sl, ip, sp, pc}
 801735c:	c1bfbdbb 			; <UNDEFINED> instruction: 0xc1bfbdbb
 8017360:	c9c7c5c3 	stmibgt	r7, {r0, r1, r6, r7, r8, sl, lr, pc}^
 8017364:	d2cfcdcb 	sbcle	ip, pc, #12992	; 0x32c0
 8017368:	dad8d6d4 	ble	764cec0 <__stack_size+0x764aec0>
 801736c:	e3e1dfdc 	mvn	sp, #220, 30	; 0x370
 8017370:	eceae8e5 	stcl	8, cr14, [sl], #916	; 0x394
 8017374:	f6f3f1ef 			; <UNDEFINED> instruction: 0xf6f3f1ef
 8017378:	fffdfaf8 			; <UNDEFINED> instruction: 0xfffdfaf8

0801737c <gamma25_0>:
	...
 8017390:	01010000 	mrseq	r0, (UNDEF: 1)
 8017394:	01010101 	tsteq	r1, r1, lsl #2
 8017398:	01010101 	tsteq	r1, r1, lsl #2
 801739c:	02020201 	andeq	r0, r2, #268435456	; 0x10000000
 80173a0:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 80173a4:	03030302 	movweq	r0, #13058	; 0x3302
 80173a8:	04040303 	streq	r0, [r4], #-771	; 0xfffffcfd
 80173ac:	05040404 	streq	r0, [r4, #-1028]	; 0xfffffbfc
 80173b0:	06050505 	streq	r0, [r5], -r5, lsl #10
 80173b4:	07060606 	streq	r0, [r6, -r6, lsl #12]
 80173b8:	08070707 	stmdaeq	r7, {r0, r1, r2, r8, r9, sl}
 80173bc:	09090808 	stmdbeq	r9, {r3, fp}
 80173c0:	0a0a0a09 	beq	8299bec <__exidx_end+0x2818d4>
 80173c4:	0c0c0b0b 			; <UNDEFINED> instruction: 0x0c0c0b0b
 80173c8:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 80173cc:	0f0f0f0e 	svceq	0x000f0f0e
 80173d0:	11111010 	tstne	r1, r0, lsl r0
 80173d4:	13131212 	tstne	r3, #536870913	; 0x20000001
 80173d8:	16151414 			; <UNDEFINED> instruction: 0x16151414
 80173dc:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 80173e0:	1a1a1919 	bne	869d84c <__exidx_end+0x685534>
 80173e4:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 80173e8:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 80173ec:	23222121 			; <UNDEFINED> instruction: 0x23222121
 80173f0:	26252424 	strtcs	r2, [r5], -r4, lsr #8
 80173f4:	29282827 	stmdbcs	r8!, {r0, r1, r2, r5, fp, sp}
 80173f8:	2d2c2b2a 	vstmdbcs	ip!, {d2-d22}
 80173fc:	302f2e2e 	eorcc	r2, pc, lr, lsr #28
 8017400:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 8017404:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 8017408:	3c3b3a39 			; <UNDEFINED> instruction: 0x3c3b3a39
 801740c:	403f3e3d 	eorsmi	r3, pc, sp, lsr lr	; <UNPREDICTABLE>
 8017410:	45444341 	strbmi	r4, [r4, #-833]	; 0xfffffcbf
 8017414:	49484746 	stmdbmi	r8, {r1, r2, r6, r8, r9, sl, lr}^
 8017418:	4e4d4c4b 	cdpmi	12, 4, cr4, cr13, cr11, {2}
 801741c:	53525150 	cmppl	r2, #80, 2
 8017420:	59575655 	ldmdbpl	r7, {r0, r2, r4, r6, r9, sl, ip, lr}^
 8017424:	5e5d5b5a 	vmovpl.s8	r5, d13[2]
 8017428:	6362615f 	cmnvs	r2, #-1073741801	; 0xc0000017
 801742c:	69686665 	stmdbvs	r8!, {r0, r2, r5, r6, r9, sl, sp, lr}^
 8017430:	6f6e6c6b 	svcvs	0x006e6c6b
 8017434:	75747271 	ldrbvc	r7, [r4, #-625]!	; 0xfffffd8f
 8017438:	7c7a7977 			; <UNDEFINED> instruction: 0x7c7a7977
 801743c:	82817f7d 	addhi	r7, r1, #500	; 0x1f4
 8017440:	89878684 	stmibhi	r7, {r2, r7, r9, sl, pc}
 8017444:	908e8d8b 	addls	r8, lr, fp, lsl #27
 8017448:	97969492 			; <UNDEFINED> instruction: 0x97969492
 801744c:	9f9d9b99 	svcls	0x009d9b99
 8017450:	a6a5a3a1 	strtge	sl, [r5], r1, lsr #7
 8017454:	aeacaaa8 	vfmage.f32	s20, s25, s17
 8017458:	b6b4b2b0 			; <UNDEFINED> instruction: 0xb6b4b2b0
 801745c:	bfbdbab8 	svclt	0x00bdbab8
 8017460:	c7c5c3c1 	strbgt	ip, [r5, r1, asr #7]
 8017464:	d0ceccc9 	sbcle	ip, lr, r9, asr #25
 8017468:	d9d7d4d2 	ldmible	r7, {r1, r4, r6, r7, sl, ip, lr, pc}^
 801746c:	e2e0dddb 	rsc	sp, r0, #14016	; 0x36c0
 8017470:	ebe9e7e4 	bl	7a91408 <__stack_size+0x7a8f408>
 8017474:	f5f3f0ee 			; <UNDEFINED> instruction: 0xf5f3f0ee
 8017478:	fffdfaf8 			; <UNDEFINED> instruction: 0xfffdfaf8

0801747c <gamma25_5>:
 801747c:	01010100 	mrseq	r0, (UNDEF: 17)
 8017480:	01010101 	tsteq	r1, r1, lsl #2
 8017484:	01010101 	tsteq	r1, r1, lsl #2
 8017488:	01010101 	tsteq	r1, r1, lsl #2
 801748c:	01010101 	tsteq	r1, r1, lsl #2
 8017490:	01010101 	tsteq	r1, r1, lsl #2
 8017494:	01010101 	tsteq	r1, r1, lsl #2
 8017498:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801749c:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 80174a0:	03030302 	movweq	r0, #13058	; 0x3302
 80174a4:	03030303 	movweq	r0, #13059	; 0x3303
 80174a8:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 80174ac:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
 80174b0:	06060605 	streq	r0, [r6], -r5, lsl #12
 80174b4:	07070706 	streq	r0, [r7, -r6, lsl #14]
 80174b8:	08080807 	stmdaeq	r8, {r0, r1, r2, fp}
 80174bc:	0a090909 	beq	82598e8 <__exidx_end+0x2415d0>
 80174c0:	0b0b0a0a 	bleq	82d9cf0 <__exidx_end+0x2c19d8>
 80174c4:	0c0c0c0b 	stceq	12, cr0, [ip], {11}
 80174c8:	0e0e0d0d 	cdpeq	13, 0, cr0, cr14, cr13, {0}
 80174cc:	100f0f0f 	andne	r0, pc, pc, lsl #30
 80174d0:	12111110 	andsne	r1, r1, #16, 2
 80174d4:	14131312 	ldrne	r1, [r3], #-786	; 0xfffffcee
 80174d8:	16161514 			; <UNDEFINED> instruction: 0x16161514
 80174dc:	18181717 	ldmdane	r8, {r0, r1, r2, r4, r8, r9, sl, ip}
 80174e0:	1b1a1a19 	blne	869dd4c <__exidx_end+0x685a34>
 80174e4:	1e1d1c1c 	mrcne	12, 0, r1, cr13, cr12, {0}
 80174e8:	20201f1e 	eorcs	r1, r0, lr, lsl pc
 80174ec:	23232221 			; <UNDEFINED> instruction: 0x23232221
 80174f0:	26262524 	strtcs	r2, [r6], -r4, lsr #10
 80174f4:	2a292827 	bcs	8a61598 <__exidx_end+0xa49280>
 80174f8:	2d2c2b2b 	fstmdbxcs	ip!, {d2-d22}	;@ Deprecated
 80174fc:	31302f2e 	teqcc	r0, lr, lsr #30
 8017500:	35343332 	ldrcc	r3, [r4, #-818]!	; 0xfffffcce
 8017504:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 8017508:	3d3c3a39 	vldmdbcc	ip!, {s6-s62}
 801750c:	41403f3e 	cmpmi	r0, lr, lsr pc
 8017510:	45444342 	strbmi	r4, [r4, #-834]	; 0xfffffcbe
 8017514:	4a494846 	bmi	9269634 <__exidx_end+0x125131c>
 8017518:	4f4e4c4b 	svcmi	0x004e4c4b
 801751c:	54535150 	ldrbpl	r5, [r3], #-336	; 0xfffffeb0
 8017520:	59585655 	ldmdbpl	r8, {r0, r2, r4, r6, r9, sl, ip, lr}^
 8017524:	5e5d5c5a 	mrcpl	12, 2, r5, cr13, cr10, {2}
 8017528:	64636160 	strbtvs	r6, [r3], #-352	; 0xfffffea0
 801752c:	6a686765 	bvs	9a312c8 <__exidx_end+0x1a18fb0>
 8017530:	706e6d6b 	rsbvc	r6, lr, fp, ror #26
 8017534:	76747371 			; <UNDEFINED> instruction: 0x76747371
 8017538:	7c7b7978 			; <UNDEFINED> instruction: 0x7c7b7978
 801753c:	8381807e 	orrhi	r8, r1, #126	; 0x7e
 8017540:	8a888685 	bhi	6238f5c <__stack_size+0x6236f5c>
 8017544:	918f8d8b 	orrls	r8, pc, fp, lsl #27
 8017548:	98969492 	ldmls	r6, {r1, r4, r7, sl, ip, pc}
 801754c:	9f9d9c9a 	svcls	0x009d9c9a
 8017550:	a7a5a3a1 	strge	sl, [r5, r1, lsr #7]!
 8017554:	afadaba9 	svcge	0x00adaba9
 8017558:	b7b5b3b1 			; <UNDEFINED> instruction: 0xb7b5b3b1
 801755c:	bfbdbbb9 	svclt	0x00bdbbb9
 8017560:	c8c6c3c1 	stmiagt	r6, {r0, r6, r7, r8, r9, lr, pc}^
 8017564:	d0ceccca 	sbcle	ip, lr, sl, asr #25
 8017568:	d9d7d5d3 	ldmible	r7, {r0, r1, r4, r6, r7, r8, sl, ip, lr, pc}^
 801756c:	e3e0dedc 	mvn	sp, #220, 28	; 0xdc0
 8017570:	eceae7e5 	stcl	7, cr14, [sl], #916	; 0x394
 8017574:	f6f3f1ee 			; <UNDEFINED> instruction: 0xf6f3f1ee
 8017578:	fffdfbf8 			; <UNDEFINED> instruction: 0xfffdfbf8
 801757c:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
 8017580:	006e776f 	rsbeq	r7, lr, pc, ror #14
 8017584:	65646e55 	strbvs	r6, [r4, #-3669]!	; 0xfffff1ab
 8017588:	656e6966 	strbvs	r6, [lr, #-2406]!	; 0xfffff69a
 801758c:	 	andeq	r0, r0, #100	; 0x64

0801758e <CSWTCH.18>:
 801758e:	02020200 	andeq	r0, r2, #0, 4
 8017592:	04020202 	streq	r0, [r2], #-514	; 0xfffffdfe
 8017596:	 	ldrbmi	r0, [r2, -r0, lsl #10]

08017598 <PixelType::MAPS>:
 8017598:	00424752 	subeq	r4, r2, r2, asr r7
 801759c:	00474252 	subeq	r4, r7, r2, asr r2
 80175a0:	00425247 	subeq	r5, r2, r7, asr #4
 80175a4:	00524247 	subseq	r4, r2, r7, asr #4
 80175a8:	00475242 	subeq	r5, r7, r2, asr #4
 80175ac:	00524742 	subseq	r4, r2, r2, asr #14

080175b0 <PixelType::TYPES>:
 80175b0:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 80175b4:	00003130 	andeq	r3, r0, r0, lsr r1
 80175b8:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 80175bc:	00003131 	andeq	r3, r0, r1, lsr r1
 80175c0:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 80175c4:	00003231 	andeq	r3, r0, r1, lsr r2
 80175c8:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 80175cc:	00423231 	subeq	r3, r2, r1, lsr r2
 80175d0:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 80175d4:	00003331 	andeq	r3, r0, r1, lsr r3
 80175d8:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 80175dc:	00003531 	andeq	r3, r0, r1, lsr r5
 80175e0:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 80175e4:	00003231 	andeq	r3, r0, r1, lsr r2
 80175e8:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 80175ec:	00573231 	subseq	r3, r7, r1, lsr r2
 80175f0:	31534355 	cmpcc	r3, r5, asr r3
 80175f4:	00333039 	eorseq	r3, r3, r9, lsr r0
 80175f8:	32534355 	subscc	r4, r3, #1409286145	; 0x54000001
 80175fc:	00333039 	eorseq	r3, r3, r9, lsr r0
 8017600:	38385343 	ldmdacc	r8!, {r0, r1, r6, r8, r9, ip, lr}
 8017604:	00003231 	andeq	r3, r0, r1, lsr r2
 8017608:	31415041 	cmpcc	r1, r1, asr #32
 801760c:	00003230 	andeq	r3, r0, r0, lsr r2
 8017610:	38394b53 	ldmdacc	r9!, {r0, r1, r4, r6, r8, r9, fp, lr}
 8017614:	00003232 	andeq	r3, r0, r2, lsr r2
 8017618:	31383950 	teqcc	r8, r0, asr r9
 801761c:	00000033 	andeq	r0, r0, r3, lsr r0

08017620 <s_patternName>:
 8017620:	656e6f4e 	strbvs	r6, [lr, #-3918]!	; 0xfffff0b2
	...
 801762c:	61520000 	cmpvs	r2, r0
 8017630:	6f626e69 	svcvs	0x00626e69
 8017634:	79632077 	stmdbvc	r3!, {r0, r1, r2, r4, r5, r6, sp}^
 8017638:	00656c63 	rsbeq	r6, r5, r3, ror #24
 801763c:	61656854 	cmnvs	r5, r4, asr r8
 8017640:	20726574 	rsbscs	r6, r2, r4, ror r5
 8017644:	73616863 	cmnvc	r1, #6488064	; 0x630000
 8017648:	6f430065 	svcvs	0x00430065
 801764c:	72756f6c 	rsbsvc	r6, r5, #108, 30	; 0x1b0
 8017650:	70697720 	rsbvc	r7, r9, r0, lsr #14
 8017654:	00000065 	andeq	r0, r0, r5, rrx
 8017658:	6e616353 	mcrvs	3, 3, r6, cr1, cr3, {2}
 801765c:	0072656e 	rsbseq	r6, r2, lr, ror #10
 8017660:	00000000 	andeq	r0, r0, r0
 8017664:	61460000 	mrsvs	r0, (UNDEF: 70)
 8017668:	00006564 	andeq	r6, r0, r4, ror #10
	...

08017674 <gamma10_0>:
 8017674:	03020100 	movweq	r0, #8448	; 0x2100
 8017678:	07060504 	streq	r0, [r6, -r4, lsl #10]
 801767c:	0b0a0908 	bleq	8299aa4 <__exidx_end+0x28178c>
 8017680:	0f0e0d0c 	svceq	0x000e0d0c
 8017684:	13121110 	tstne	r2, #16, 2
 8017688:	17161514 			; <UNDEFINED> instruction: 0x17161514
 801768c:	1b1a1918 	blne	869daf4 <__exidx_end+0x6857dc>
 8017690:	1f1e1d1c 	svcne	0x001e1d1c
 8017694:	23222120 			; <UNDEFINED> instruction: 0x23222120
 8017698:	27262524 	strcs	r2, [r6, -r4, lsr #10]!
 801769c:	2b2a2928 	blcs	8aa1b44 <__exidx_end+0xa8982c>
 80176a0:	2f2e2d2c 	svccs	0x002e2d2c
 80176a4:	33323130 	teqcc	r2, #48, 2
 80176a8:	37363534 			; <UNDEFINED> instruction: 0x37363534
 80176ac:	3b3a3938 	blcc	8ea5b94 <__exidx_end+0xe8d87c>
 80176b0:	3f3e3d3c 	svccc	0x003e3d3c
 80176b4:	43424140 	movtmi	r4, #8512	; 0x2140
 80176b8:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 80176bc:	4b4a4948 	blmi	92a9be4 <__exidx_end+0x12918cc>
 80176c0:	4f4e4d4c 	svcmi	0x004e4d4c
 80176c4:	53525150 	cmppl	r2, #80, 2
 80176c8:	57565554 			; <UNDEFINED> instruction: 0x57565554
 80176cc:	5b5a5958 	blpl	96adc34 <__exidx_end+0x169591c>
 80176d0:	5f5e5d5c 	svcpl	0x005e5d5c
 80176d4:	63626160 	cmnvs	r2, #96, 2
 80176d8:	67666564 	strbvs	r6, [r6, -r4, ror #10]!
 80176dc:	6b6a6968 	blvs	9ab1c84 <__exidx_end+0x1a9996c>
 80176e0:	6f6e6d6c 	svcvs	0x006e6d6c
 80176e4:	73727170 	cmnvc	r2, #112, 2
 80176e8:	77767574 			; <UNDEFINED> instruction: 0x77767574
 80176ec:	7b7a7978 	blvc	9eb5cd4 <__exidx_end+0x1e9d9bc>
 80176f0:	7f7e7d7c 	svcvc	0x007e7d7c
 80176f4:	83828180 	orrhi	r8, r2, #128, 2
 80176f8:	87868584 	strhi	r8, [r6, r4, lsl #11]
 80176fc:	8b8a8988 	blhi	62b9d24 <__stack_size+0x62b7d24>
 8017700:	8f8e8d8c 	svchi	0x008e8d8c
 8017704:	93929190 	orrsls	r9, r2, #144, 2	; 0x24
 8017708:	97969594 			; <UNDEFINED> instruction: 0x97969594
 801770c:	9b9a9998 	blls	66bdd74 <__stack_size+0x66bbd74>
 8017710:	9f9e9d9c 	svcls	0x009e9d9c
 8017714:	a3a2a1a0 			; <UNDEFINED> instruction: 0xa3a2a1a0
 8017718:	a7a6a5a4 	strge	sl, [r6, r4, lsr #11]!
 801771c:	abaaa9a8 	blge	6ac1dc4 <__stack_size+0x6abfdc4>
 8017720:	afaeadac 	svcge	0x00aeadac
 8017724:	b3b2b1b0 			; <UNDEFINED> instruction: 0xb3b2b1b0
 8017728:	b7b6b5b4 			; <UNDEFINED> instruction: 0xb7b6b5b4
 801772c:	bbbab9b8 	bllt	6ec5e14 <__stack_size+0x6ec3e14>
 8017730:	bfbebdbc 	svclt	0x00bebdbc
 8017734:	c3c2c1c0 	bicgt	ip, r2, #192, 2	; 0x30
 8017738:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
 801773c:	cbcac9c8 	blgt	72c9e64 <__stack_size+0x72c7e64>
 8017740:	cfcecdcc 	svcgt	0x00cecdcc
 8017744:	d3d2d1d0 	bicsle	sp, r2, #208, 2	; 0x34
 8017748:	d7d6d5d4 			; <UNDEFINED> instruction: 0xd7d6d5d4
 801774c:	dbdad9d8 	blle	76cdeb4 <__stack_size+0x76cbeb4>
 8017750:	dfdedddc 	svcle	0x00dedddc
 8017754:	e3e2e1e0 	mvn	lr, #224, 2	; 0x38
 8017758:	e7e6e5e4 	strb	lr, [r6, r4, ror #11]!
 801775c:	ebeae9e8 	bl	7ad1f04 <__stack_size+0x7acff04>
 8017760:	efeeedec 	svc	0x00eeedec
 8017764:	f3f2f1f0 	vsra.u64	<illegal reg q15.5>, q8, #14
 8017768:	f7f6f5f4 			; <UNDEFINED> instruction: 0xf7f6f5f4
 801776c:	fbfaf9f8 	blx	7ed5f56 <__stack_size+0x7ed3f56>
 8017770:	fffefdfc 			; <UNDEFINED> instruction: 0xfffefdfc

08017774 <s_aStorSize>:
 8017774:	00000060 	andeq	r0, r0, r0, rrx
 8017778:	00000090 	muleq	r0, r0, r0
 801777c:	00000020 	andeq	r0, r0, r0, lsr #32
 8017780:	00000040 	andeq	r0, r0, r0, asr #32
 8017784:	00000060 	andeq	r0, r0, r0, rrx
 8017788:	00000040 	andeq	r0, r0, r0, asr #32
 801778c:	00000020 	andeq	r0, r0, r0, lsr #32
 8017790:	00000020 	andeq	r0, r0, r0, lsr #32
 8017794:	000001e0 	andeq	r0, r0, r0, ror #3
 8017798:	00000040 	andeq	r0, r0, r0, asr #32
 801779c:	00000020 	andeq	r0, r0, r0, lsr #32
 80177a0:	00000060 	andeq	r0, r0, r0, rrx
 80177a4:	00000030 	andeq	r0, r0, r0, lsr r0
 80177a8:	00000020 	andeq	r0, r0, r0, lsr #32
 80177ac:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
 80177b0:	00000030 	andeq	r0, r0, r0, lsr r0
 80177b4:	00000040 	andeq	r0, r0, r0, asr #32
 80177b8:	00000020 	andeq	r0, r0, r0, lsr #32
 80177bc:	00000060 	andeq	r0, r0, r0, rrx
 80177c0:	00000020 	andeq	r0, r0, r0, lsr #32
 80177c4:	00000400 	andeq	r0, r0, r0, lsl #8
 80177c8:	00000020 	andeq	r0, r0, r0, lsr #32
 80177cc:	00000020 	andeq	r0, r0, r0, lsr #32
 80177d0:	00000040 	andeq	r0, r0, r0, asr #32
 80177d4:	00000060 	andeq	r0, r0, r0, rrx
 80177d8:	00000020 	andeq	r0, r0, r0, lsr #32
 80177dc:	00000020 	andeq	r0, r0, r0, lsr #32
 80177e0:	000000c0 	andeq	r0, r0, r0, asr #1

080177e4 <vtable for StoreDisplayUdf>:
	...
 80177ec:	0801003d 	stmdaeq	r1, {r0, r2, r3, r4, r5}
 80177f0:	08010089 	stmdaeq	r1, {r0, r3, r7}
 80177f4:	08010065 	stmdaeq	r1, {r0, r2, r5, r6}
 80177f8:	08010041 	stmdaeq	r1, {r0, r6}

080177fc <vtable for StoreNetwork>:
	...
 8017804:	080100a9 	stmdaeq	r1, {r0, r3, r5, r7}
 8017808:	080101bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8}
 801780c:	080100b1 	stmdaeq	r1, {r0, r4, r5, r7}
 8017810:	080101d1 	stmdaeq	r1, {r0, r4, r6, r7, r8}
 8017814:	08010161 	stmdaeq	r1, {r0, r5, r6, r8}
 8017818:	08010135 	stmdaeq	r1, {r0, r2, r4, r5, r8}
 801781c:	08010105 	stmdaeq	r1, {r0, r2, r8}
 8017820:	0801018d 	stmdaeq	r1, {r0, r2, r3, r7, r8}
 8017824:	080100d5 	stmdaeq	r1, {r0, r2, r4, r6, r7}
 8017828:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 801782c:	00000000 	andeq	r0, r0, r0
 8017830:	080100ab 	stmdaeq	r1, {r0, r1, r3, r5, r7}
 8017834:	080101c9 	stmdaeq	r1, {r0, r3, r6, r7, r8}
 8017838:	08010185 	stmdaeq	r1, {r0, r2, r7, r8}
 801783c:	08010159 	stmdaeq	r1, {r0, r3, r4, r6, r8}
 8017840:	0801012d 	stmdaeq	r1, {r0, r2, r3, r5, r8}
 8017844:	080101b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8}
 8017848:	080100fd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7}

0801784c <vtable for StoreRemoteConfig>:
	...
 8017854:	08010209 	stmdaeq	r1, {r0, r3, r9}
 8017858:	08010255 	stmdaeq	r1, {r0, r2, r4, r6, r9}
 801785c:	08010231 	stmdaeq	r1, {r0, r4, r5, r9}
 8017860:	0801020d 	stmdaeq	r1, {r0, r2, r3, r9}

08017864 <vtable for StoreArtNet>:
	...
 801786c:	08010279 	stmdaeq	r1, {r0, r3, r4, r5, r6, r9}
 8017870:	08010509 	stmdaeq	r1, {r0, r3, r8, sl}
 8017874:	08010281 	stmdaeq	r1, {r0, r7, r9}
 8017878:	080104e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, sl}
 801787c:	08010435 	stmdaeq	r1, {r0, r2, r4, r5, sl}
 8017880:	08010405 	stmdaeq	r1, {r0, r2, sl}
 8017884:	080103d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r8, r9}
 8017888:	080102a5 	stmdaeq	r1, {r0, r2, r5, r7, r9}
 801788c:	080102ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r9}
 8017890:	0801031d 	stmdaeq	r1, {r0, r2, r3, r4, r8, r9}
 8017894:	08010351 	stmdaeq	r1, {r0, r4, r6, r8, r9}
 8017898:	08010395 	stmdaeq	r1, {r0, r2, r4, r7, r8, r9}
 801789c:	08010469 	stmdaeq	r1, {r0, r3, r5, r6, sl}
 80178a0:	08010275 	stmdaeq	r1, {r0, r2, r4, r5, r6, r9}
 80178a4:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 80178a8:	00000000 	andeq	r0, r0, r0
 80178ac:	0801027b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r9}
 80178b0:	08010515 	stmdaeq	r1, {r0, r2, r4, r8, sl}
 80178b4:	08010461 	stmdaeq	r1, {r0, r5, r6, sl}
 80178b8:	0801042d 	stmdaeq	r1, {r0, r2, r3, r5, sl}
 80178bc:	080103fd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, r9}
 80178c0:	080102e5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r9}
 80178c4:	08010315 	stmdaeq	r1, {r0, r2, r4, r8, r9}
 80178c8:	08010349 	stmdaeq	r1, {r0, r3, r6, r8, r9}
 80178cc:	08010277 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r9}
 80178d0:	0801038d 	stmdaeq	r1, {r0, r2, r3, r7, r8, r9}
 80178d4:	080103d1 	stmdaeq	r1, {r0, r4, r6, r7, r8, r9}
 80178d8:	080104e1 	stmdaeq	r1, {r0, r5, r6, r7, sl}

080178dc <vtable for StorePixelDmx>:
	...
 80178e4:	08010541 	stmdaeq	r1, {r0, r6, r8, sl}
 80178e8:	080106ad 	stmdaeq	r1, {r0, r2, r3, r5, r7, r9, sl}
 80178ec:	08010549 	stmdaeq	r1, {r0, r3, r6, r8, sl}
 80178f0:	080106c1 	stmdaeq	r1, {r0, r6, r7, r9, sl}
 80178f4:	08010679 	stmdaeq	r1, {r0, r3, r4, r5, r6, r9, sl}
 80178f8:	08010645 	stmdaeq	r1, {r0, r2, r6, r9, sl}
 80178fc:	0801060d 	stmdaeq	r1, {r0, r2, r3, r9, sl}
 8017900:	080105d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, sl}
 8017904:	080105a1 	stmdaeq	r1, {r0, r5, r7, r8, sl}
 8017908:	0801056d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r8, sl}
 801790c:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 8017910:	00000000 	andeq	r0, r0, r0
 8017914:	08010543 	stmdaeq	r1, {r0, r1, r6, r8, sl}
 8017918:	080106b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r9, sl}
 801791c:	080106a5 	stmdaeq	r1, {r0, r2, r5, r7, r9, sl}
 8017920:	08010671 	stmdaeq	r1, {r0, r4, r5, r6, r9, sl}
 8017924:	0801063d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r9, sl}
 8017928:	08010605 	stmdaeq	r1, {r0, r2, r9, sl}
 801792c:	080105cd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r8, sl}
 8017930:	08010599 	stmdaeq	r1, {r0, r3, r4, r7, r8, sl}
 8017934:	3a434d46 	bcc	90eae54 <__exidx_end+0x10d2b3c>
 8017938:	74654420 	strbtvc	r4, [r5], #-1056	; 0xfffffbe0
 801793c:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0xfffffc9b
 8017940:	73252064 			; <UNDEFINED> instruction: 0x73252064
 8017944:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
 8017948:	6f742068 	svcvs	0x00742068
 801794c:	206c6174 	rsbcs	r6, ip, r4, ror r1
 8017950:	62206425 	eorvs	r6, r0, #620756992	; 0x25000000
 8017954:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
 8017958:	64255b20 	strtvs	r5, [r5], #-2848	; 0xfffff4e0
 801795c:	5d426b20 	vstrpl	d22, [r2, #-128]	; 0xffffff80
 8017960:	6962000a 	stmdbvs	r2!, {r1, r3}^
 8017964:	7500646e 	strvc	r6, [r0, #-1134]	; 0xfffffb92
 8017968:	6e69626e 	cdpvs	2, 6, cr6, cr9, cr14, {3}
 801796c:	41000a64 	tstmi	r0, r4, ror #20
 8017970:	6c205052 	stcvs	0, cr5, [r0], #-328	; 0xfffffeb8
 8017974:	756b6f6f 	strbvc	r6, [fp, #-3951]!	; 0xfffff091
 8017978:	61662070 	smcvs	25088	; 0x6200
 801797c:	64656c69 	strbtvs	r6, [r5], #-3177	; 0xfffff397
 8017980:	203e2d20 	eorscs	r2, lr, r0, lsr #26
 8017984:	61666564 	cmnvs	r6, r4, ror #10
 8017988:	20746c75 	rsbscs	r6, r4, r5, ror ip
 801798c:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 8017990:	0a796177 	beq	9e6ff74 <__exidx_end+0x1e57c5c>
 8017994:	50524100 	subspl	r4, r2, r0, lsl #2
 8017998:	6f6f6c20 	svcvs	0x006f6c20
 801799c:	2070756b 	rsbscs	r7, r0, fp, ror #10
 80179a0:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
 80179a4:	000a6465 	andeq	r6, sl, r5, ror #8

080179a8 <NetworkConst::MSG_MDNS_CONFIG>:
 80179a8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 80179ac:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 80179b0:	20676e69 	rsbcs	r6, r7, r9, ror #28
 80179b4:	534e444d 	movtpl	r4, #58445	; 0xe44d
	...

080179b9 <NetworkConst::MSG_NETWORK_INIT>:
 80179b9:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 80179bd:	206b726f 	rsbcs	r7, fp, pc, ror #4
 80179c1:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 80179c5:	34323200 	ldrtcc	r3, [r2], #-512	; 0xfffffe00
 80179c9:	302e302e 	eorcc	r3, lr, lr, lsr #32
 80179cd:	3135322e 	teqcc	r5, lr, lsr #4
 80179d1:	63745f00 	cmnvs	r4, #0, 30
 80179d5:	6f6c2e70 	svcvs	0x006c2e70
 80179d9:	006c6163 	rsbeq	r6, ip, r3, ror #2
 80179dd:	7265735f 	rsbvc	r7, r5, #2080374785	; 0x7c000001
 80179e1:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
 80179e5:	645f2e73 	ldrbvs	r2, [pc], #-3699	; 80179ed <NetworkConst::MSG_NETWORK_INIT+0x34>
 80179e9:	732d736e 			; <UNDEFINED> instruction: 0x732d736e
 80179ed:	755f2e64 	ldrbvc	r2, [pc, #-3684]	; 8016b91 <E131BridgeConst::VERSION+0x20>
 80179f1:	6c2e7064 	stcvs	0, cr7, [lr], #-400	; 0xfffffe70
 80179f5:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 80179f9:	4e446d00 	cdpmi	13, 4, cr6, cr4, cr0, {0}
 80179fd:	20000a53 	andcs	r0, r0, r3, asr sl
 8017a01:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 8017a05:	6e6e7572 	mcrvs	5, 3, r7, cr14, cr2, {3}
 8017a09:	0a676e69 	beq	99f33b5 <__exidx_end+0x19db09d>
 8017a0d:	614e2000 	mrsvs	r2, (UNDEF: 78)
 8017a11:	3a20656d 	bcc	8830fcd <__exidx_end+0x818cb5>
 8017a15:	0a732520 	beq	9ce0e9d <__exidx_end+0x1cc8b85>
 8017a19:	73252000 			; <UNDEFINED> instruction: 0x73252000
 8017a1d:	20642520 	rsbcs	r2, r4, r0, lsr #10
 8017a21:	000a7325 	andeq	r7, sl, r5, lsr #6
 8017a25:	30687465 	rsbcc	r7, r8, r5, ror #8
 8017a29:	67696700 	strbvs	r6, [r9, -r0, lsl #14]!
 8017a2d:	76656461 	strbtvc	r6, [r5], -r1, ror #8
 8017a31:	5f656369 	svcpl	0x00656369
 8017a35:	74654e00 	strbtvc	r4, [r5], #-3584	; 0xfffff200
 8017a39:	6b726f77 	blvs	9cb381d <__exidx_end+0x1c9b505>
 8017a3d:	4820000a 	stmdami	r0!, {r1, r3}
 8017a41:	6e74736f 	cdpvs	3, 7, cr7, cr4, cr15, {3}
 8017a45:	20656d61 	rsbcs	r6, r5, r1, ror #26
 8017a49:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8017a4d:	20000a73 	andcs	r0, r0, r3, ror sl
 8017a51:	614e6649 	cmpvs	lr, r9, asr #12
 8017a55:	2020656d 	eorcs	r6, r0, sp, ror #10
 8017a59:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8017a5d:	203a6425 	eorscs	r6, sl, r5, lsr #8
 8017a61:	000a7325 	andeq	r7, sl, r5, lsr #6
 8017a65:	656e4920 	strbvs	r4, [lr, #-2336]!	; 0xfffff6e0
 8017a69:	20202074 	eorcs	r2, r0, r4, ror r0
 8017a6d:	3a202020 	bcc	881faf5 <__exidx_end+0x8077dd>
 8017a71:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 8017a75:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017a79:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8017a7d:	0a64252f 	beq	9920f41 <__exidx_end+0x1908c29>
 8017a81:	654e2000 	strbvs	r2, [lr, #-0]
 8017a85:	73616d74 	cmnvc	r1, #116, 26	; 0x1d00
 8017a89:	2020206b 	eorcs	r2, r0, fp, rrx
 8017a8d:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8017a91:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8017a95:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017a99:	20000a64 	andcs	r0, r0, r4, ror #20
 8017a9d:	65746147 	ldrbvs	r6, [r4, #-327]!	; 0xfffffeb9
 8017aa1:	20796177 	rsbscs	r6, r9, r7, ror r1
 8017aa5:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8017aa9:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017aad:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8017ab1:	0a64252e 	beq	9920f71 <__exidx_end+0x1908c59>
 8017ab5:	72422000 	subvc	r2, r2, #0
 8017ab9:	6364616f 	cmnvs	r4, #-1073741797	; 0xc000001b
 8017abd:	20747361 	rsbscs	r7, r4, r1, ror #6
 8017ac1:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8017ac5:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8017ac9:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017acd:	20000a64 	andcs	r0, r0, r4, ror #20
 8017ad1:	2063614d 	rsbcs	r6, r3, sp, asr #2
 8017ad5:	20202020 	eorcs	r2, r0, r0, lsr #32
 8017ad9:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8017add:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8017ae1:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 8017ae5:	2e253a78 			; <UNDEFINED> instruction: 0x2e253a78
 8017ae9:	253a7832 	ldrcs	r7, [sl, #-2098]!	; 0xfffff7ce
 8017aed:	3a78322e 	bcc	9e243ad <__exidx_end+0x1e0c095>
 8017af1:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8017af5:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 8017af9:	20000a78 	andcs	r0, r0, r8, ror sl
 8017afd:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
 8017b01:	20202020 	eorcs	r2, r0, r0, lsr #32
 8017b05:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8017b09:	000a6325 	andeq	r6, sl, r5, lsr #6
 8017b0d:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
 8017b11:	49206369 	stmdbmi	r0!, {r0, r3, r5, r6, r8, r9, sp, lr}
 8017b15:	 	rsbvc	r0, r9, r0, asr r0

08017b17 <NetworkParamsConst::IP_ADDRESS>:
 8017b17:	615f7069 	cmpvs	pc, r9, rrx
 8017b1b:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 8017b1f:	 	strvs	r7, [r0], #-883	; 0xfffffc8d

08017b22 <NetworkParamsConst::DEFAULT_GATEWAY>:
 8017b22:	61666564 	cmnvs	r6, r4, ror #10
 8017b26:	5f746c75 	svcpl	0x00746c75
 8017b2a:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 8017b2e:	00796177 	rsbseq	r6, r9, r7, ror r1

08017b32 <NetworkParamsConst::DHCP_RETRY_TIME>:
 8017b32:	70636864 	rsbvc	r6, r3, r4, ror #16
 8017b36:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
 8017b3a:	745f7972 	ldrbvc	r7, [pc], #-2418	; 8017b42 <NetworkParamsConst::HOSTNAME>
 8017b3e:	00656d69 	rsbeq	r6, r5, r9, ror #26

08017b42 <NetworkParamsConst::HOSTNAME>:
 8017b42:	74736f68 	ldrbtvc	r6, [r3], #-3944	; 0xfffff098
 8017b46:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

08017b4b <NetworkParamsConst::NET_MASK>:
 8017b4b:	5f74656e 	svcpl	0x0074656e
 8017b4f:	6b73616d 	blvs	9cf010b <__exidx_end+0x1cd7df3>
	...

08017b54 <NetworkParamsConst::USE_DHCP>:
 8017b54:	5f657375 	svcpl	0x00657375
 8017b58:	70636864 	rsbvc	r6, r3, r4, ror #16
	...

08017b5d <NetworkParamsConst::FILE_NAME>:
 8017b5d:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 8017b61:	2e6b726f 	cdpcs	2, 6, cr7, cr11, cr15, {3}
 8017b65:	00747874 	rsbseq	r7, r4, r4, ror r8
 8017b69:	65687445 	strbvs	r7, [r8, #-1093]!	; 0xfffffbbb
 8017b6d:	74656e72 	strbtvc	r6, [r5], #-3698	; 0xfffff18e
 8017b71:	61747320 	cmnvs	r4, r0, lsr #6
 8017b75:	25007472 	strcs	r7, [r0, #-1138]	; 0xfffffb8e
 8017b79:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8017b7d:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8017b81:	252f6425 	strcs	r6, [pc, #-1061]!	; 8017764 <gamma10_0+0xf0>
 8017b85:	63252064 			; <UNDEFINED> instruction: 0x63252064
 8017b89:	203a4e00 	eorscs	r4, sl, r0, lsl #28
 8017b8d:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017b91:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8017b95:	0064252e 	rsbeq	r2, r4, lr, lsr #10
 8017b99:	25203a47 	strcs	r3, [r0, #-2631]!	; 0xfffff5b9
 8017b9d:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8017ba1:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8017ba5:	46006425 	strmi	r6, [r0], -r5, lsr #8
 8017ba9:	776d7269 	strbvc	r7, [sp, -r9, ror #4]!
 8017bad:	20657261 	rsbcs	r7, r5, r1, ror #4
 8017bb1:	2a2e2556 	bcs	8ba1111 <__exidx_end+0xb88df9>
 8017bb5:	48440073 	stmdami	r4, {r0, r1, r4, r5, r6}^
 8017bb9:	72205043 	eorvc	r5, r0, #67	; 0x43
 8017bbd:	77656e65 	strbvc	r6, [r5, -r5, ror #28]!
 8017bc1:	00676e69 	rsbeq	r6, r7, r9, ror #28
 8017bc5:	50434844 	subpl	r4, r3, r4, asr #16
 8017bc9:	74657220 	strbtvc	r7, [r5], #-544	; 0xfffffde0
 8017bcd:	6e697972 			; <UNDEFINED> instruction: 0x6e697972
 8017bd1:	654e0067 	strbvs	r0, [lr, #-103]	; 0xffffff99
 8017bd5:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 8017bd9:	6873206b 	ldmdavs	r3!, {r0, r1, r3, r5, r6, sp}^
 8017bdd:	6f647475 	svcvs	0x00647475
 8017be1:	 	stmdavc	r0, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp, lr}

08017be4 <pArray>:
 8017be4:	08017c78 	stmdaeq	r1, {r3, r4, r5, r6, sl, fp, ip, sp, lr}
 8017be8:	08017c34 	stmdaeq	r1, {r2, r4, r5, sl, fp, ip, sp, lr}
 8017bec:	08017b17 	stmdaeq	r1, {r0, r1, r2, r4, r8, r9, fp, ip, sp, lr}
 8017bf0:	08017c7e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, sl, fp, ip, sp, lr}
 8017bf4:	08017e87 	stmdaeq	r1, {r0, r1, r2, r7, r9, sl, fp, ip, sp, lr}
 8017bf8:	08017c3f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, sl, fp, ip, sp, lr}
 8017bfc:	0801695b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r8, fp, sp, lr}
 8017c00:	08017b42 	stmdaeq	r1, {r1, r6, r8, r9, fp, ip, sp, lr}
 8017c04:	08017dba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r8, sl, fp, ip, sp, lr}
 8017c08:	08017dca 	stmdaeq	r1, {r1, r3, r6, r7, r8, sl, fp, ip, sp, lr}
 8017c0c:	08017dda 	stmdaeq	r1, {r1, r3, r4, r6, r7, r8, sl, fp, ip, sp, lr}
 8017c10:	08017dea 	stmdaeq	r1, {r1, r3, r5, r6, r7, r8, sl, fp, ip, sp, lr}
 8017c14:	08017b4b 	stmdaeq	r1, {r0, r1, r3, r6, r8, r9, fp, ip, sp, lr}
 8017c18:	08017e56 	stmdaeq	r1, {r1, r2, r4, r6, r9, sl, fp, ip, sp, lr}
 8017c1c:	080169ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, fp, sp, lr}
 8017c20:	080169c6 	stmdaeq	r1, {r1, r2, r6, r7, r8, fp, sp, lr}
 8017c24:	080169de 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r8, fp, sp, lr}
 8017c28:	080169f6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r8, fp, sp, lr}
 8017c2c:	08017b22 	stmdaeq	r1, {r1, r5, r8, r9, fp, ip, sp, lr}
 8017c30:	08017c4c 	stmdaeq	r1, {r2, r3, r6, sl, fp, ip, sp, lr}

08017c34 <DisplayUdfParamsConst::BOARD_NAME>:
 8017c34:	72616f62 	rsbvc	r6, r1, #392	; 0x188
 8017c38:	616e5f64 	cmnvs	lr, r4, ror #30
 8017c3c:	 	tstvs	r0, sp, ror #10

08017c3f <DisplayUdfParamsConst::ACTIVE_PORTS>:
 8017c3f:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 8017c43:	705f6576 	subsvc	r6, pc, r6, ror r5	; <UNPREDICTABLE>
 8017c47:	7374726f 	cmnvc	r4, #-268435450	; 0xf0000006
	...

08017c4c <DisplayUdfParamsConst::DMX_DIRECTION>:
 8017c4c:	5f786d64 	svcpl	0x00786d64
 8017c50:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8017c54:	6f697463 	svcvs	0x00697463
 8017c58:	 	ldclvs	0, cr0, [r3], #-440	; 0xfffffe48

08017c5a <DisplayUdfParamsConst::SLEEP_TIMEOUT>:
 8017c5a:	65656c73 	strbvs	r6, [r5, #-3187]!	; 0xfffff38d
 8017c5e:	69745f70 	ldmdbvs	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 8017c62:	756f656d 	strbvc	r6, [pc, #-1389]!	; 80176fd <gamma10_0+0x89>
 8017c66:	 	stclvs	0, cr0, [r6], #-464	; 0xfffffe30

08017c68 <DisplayUdfParamsConst::FLIP_VERTICALLY>:
 8017c68:	70696c66 	rsbvc	r6, r9, r6, ror #24
 8017c6c:	7265765f 	rsbvc	r7, r5, #99614720	; 0x5f00000
 8017c70:	61636974 	smcvs	13972	; 0x3694
 8017c74:	00796c6c 	rsbseq	r6, r9, ip, ror #24

08017c78 <DisplayUdfParamsConst::TITLE>:
 8017c78:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 8017c7c:	 	ldrbvs	r0, [r6, #-101]!	; 0xffffff9b

08017c7e <DisplayUdfParamsConst::VERSION>:
 8017c7e:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8017c82:	006e6f69 	rsbeq	r6, lr, r9, ror #30

08017c86 <DisplayUdfParamsConst::FILE_NAME>:
 8017c86:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8017c8a:	2e79616c 	rpwcsez	f6, f1, #4.0
 8017c8e:	00747874 	rsbseq	r7, r4, r4, ror r8

08017c92 <DisplayUdfParamsConst::INTENSITY>:
 8017c92:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 8017c96:	7469736e 	strbtvc	r7, [r9], #-878	; 0xfffffc92
 8017c9a:	20200079 	eorcs	r0, r0, r9, ror r0
 8017c9e:	4f002020 	svcmi	0x00002020
 8017ca2:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 8017ca6:	253a6432 	ldrcs	r6, [sl, #-1074]!	; 0xfffffbce
 8017caa:	64253a64 	strtvs	r3, [r5], #-2660	; 0xfffff59c
 8017cae:	20632520 	rsbcs	r2, r3, r0, lsr #10
 8017cb2:	4f007325 	svcmi	0x00007325
 8017cb6:	203a6425 	eorscs	r6, sl, r5, lsr #8
 8017cba:	64322e25 	ldrtvs	r2, [r2], #-3621	; 0xfffff1db
 8017cbe:	3a64253a 	bcc	99211ae <__exidx_end+0x1908e96>
 8017cc2:	25206425 	strcs	r6, [r0, #-1061]!	; 0xfffffbdb
 8017cc6:	73252063 			; <UNDEFINED> instruction: 0x73252063
 8017cca:	3a632500 	bcc	98e10d2 <__exidx_end+0x18c8dba>
 8017cce:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 8017cd2:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017cd6:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8017cda:	3a504100 	bcc	94280e2 <__exidx_end+0x140fdca>
 8017cde:	00642520 	rsbeq	r2, r4, r0, lsr #10
 8017ce2:	44206f4e 	strtmi	r6, [r0], #-3918	; 0xfffff0b2
 8017ce6:	4400584d 	strmi	r5, [r0], #-2125	; 0xfffff7b3
 8017cea:	2520584d 	strcs	r5, [r0, #-2125]!	; 0xfffff7b3
 8017cee:	64252073 	strtvs	r2, [r5], #-115	; 0xffffff8d
	...

08017cf3 <DevicesParamsConst::GAMMA_VALUE>:
 8017cf3:	6d6d6167 	stfvse	f6, [sp, #-412]!	; 0xfffffe64
 8017cf7:	61765f61 	cmnvs	r6, r1, ror #30
 8017cfb:	0065756c 	rsbeq	r7, r5, ip, ror #10

08017cff <DevicesParamsConst::SPI_SPEED_HZ>:
 8017cff:	636f6c63 	cmnvs	pc, #25344	; 0x6300
 8017d03:	70735f6b 	rsbsvc	r5, r3, fp, ror #30
 8017d07:	5f646565 	svcpl	0x00646565
 8017d0b:	 	strvc	r7, [r0], #-2664	; 0xfffff598

08017d0e <DevicesParamsConst::TEST_PATTERN>:
 8017d0e:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
 8017d12:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
 8017d16:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
	...

08017d1b <DevicesParamsConst::GROUPING_COUNT>:
 8017d1b:	5f64656c 	svcpl	0x0064656c
 8017d1f:	756f7267 	strbvc	r7, [pc, #-615]!	; 8017ac0 <NetworkConst::MSG_NETWORK_INIT+0x107>
 8017d23:	6f635f70 	svcvs	0x00635f70
 8017d27:	00746e75 	rsbseq	r6, r4, r5, ror lr

08017d2b <DevicesParamsConst::GAMMA_CORRECTION>:
 8017d2b:	6d6d6167 	stfvse	f6, [sp, #-412]!	; 0xfffffe64
 8017d2f:	6f635f61 	svcvs	0x00635f61
 8017d33:	63657272 	cmnvs	r5, #536870919	; 0x20000007
 8017d37:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
	...

08017d3c <DevicesParamsConst::GLOBAL_BRIGHTNESS>:
 8017d3c:	626f6c67 	rsbvs	r6, pc, #26368	; 0x6700
 8017d40:	625f6c61 	subsvs	r6, pc, #24832	; 0x6100
 8017d44:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 8017d48:	73656e74 	cmnvc	r5, #116, 28	; 0x740
 8017d4c:	 	strbvs	r0, [ip, #-115]!	; 0xffffff8d

08017d4e <DevicesParamsConst::MAP>:
 8017d4e:	5f64656c 	svcpl	0x0064656c
 8017d52:	5f626772 	svcpl	0x00626772
 8017d56:	7070616d 	rsbsvc	r6, r0, sp, ror #2
 8017d5a:	00676e69 	rsbeq	r6, r7, r9, ror #28

08017d5e <DevicesParamsConst::TYPE>:
 8017d5e:	5f64656c 	svcpl	0x0064656c
 8017d62:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
	...

08017d67 <DevicesParamsConst::COUNT>:
 8017d67:	5f64656c 	svcpl	0x0064656c
 8017d6b:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 8017d6f:	 	strbvs	r0, [ip, #-116]!	; 0xffffff8c

08017d71 <DevicesParamsConst::LED_T0H>:
 8017d71:	5f64656c 	svcpl	0x0064656c
 8017d75:	00683074 	rsbeq	r3, r8, r4, ror r0

08017d79 <DevicesParamsConst::LED_T1H>:
 8017d79:	5f64656c 	svcpl	0x0064656c
 8017d7d:	00683174 	rsbeq	r3, r8, r4, ror r1

08017d81 <DevicesParamsConst::FILE_NAME>:
 8017d81:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 8017d85:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 8017d89:	00747874 	rsbseq	r7, r4, r4, ror r8
 8017d8d:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8017d91:	6425223a 	strtvs	r2, [r5], #-570	; 0xfffffdc6
 8017d95:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8017d99:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017d9d:	002c2264 	eoreq	r2, ip, r4, ror #4
 8017da1:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
 8017da5:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017da9:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8017dad:	0a64252e 	beq	992126d <__exidx_end+0x1908f55>
 8017db1:	25202300 	strcs	r2, [r0, #-768]!	; 0xfffffd00
 8017db5:	0a232073 	beq	88dff89 <__exidx_end+0x8c7c71>
	...

08017dba <LightSetParamsConst::UNIVERSE_PORT>:
 8017dba:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8017dbe:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8017dc2:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8017dc6:	00615f74 	rsbeq	r5, r1, r4, ror pc
 8017dca:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8017dce:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8017dd2:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8017dd6:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8017dda:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8017dde:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8017de2:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8017de6:	00635f74 	rsbeq	r5, r3, r4, ror pc
 8017dea:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8017dee:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8017df2:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8017df6:	00645f74 	rsbeq	r5, r4, r4, ror pc

08017dfa <LightSetParamsConst::START_UNI_PORT>:
 8017dfa:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8017dfe:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 8017e02:	6f705f69 	svcvs	0x00705f69
 8017e06:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 8017e0a:	00000000 	andeq	r0, r0, r0

08017e0e <LightSetParamsConst::MERGE_MODE_PORT>:
 8017e0e:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 8017e12:	6f6d5f65 	svcvs	0x006d5f65
 8017e16:	705f6564 	subsvc	r6, pc, r4, ror #10
 8017e1a:	5f74726f 	svcpl	0x0074726f
 8017e1e:	656d0061 	strbvs	r0, [sp, #-97]!	; 0xffffff9f
 8017e22:	5f656772 	svcpl	0x00656772
 8017e26:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 8017e2a:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8017e2e:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8017e32:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 8017e36:	6f6d5f65 	svcvs	0x006d5f65
 8017e3a:	705f6564 	subsvc	r6, pc, r4, ror #10
 8017e3e:	5f74726f 	svcpl	0x0074726f
 8017e42:	656d0063 	strbvs	r0, [sp, #-99]!	; 0xffffff9d
 8017e46:	5f656772 	svcpl	0x00656772
 8017e4a:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 8017e4e:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8017e52:	00645f74 	rsbeq	r5, r4, r4, ror pc

08017e56 <LightSetParamsConst::DMX_START_ADDRESS>:
 8017e56:	5f786d64 	svcpl	0x00786d64
 8017e5a:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8017e5e:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xfffff08c
 8017e62:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 8017e66:	 	stmdbvs	r4!, {r0, r1, r4, r5, r6}^

08017e68 <LightSetParamsConst::DISABLE_MERGE_TIMEOUT>:
 8017e68:	61736964 	cmnvs	r3, r4, ror #18
 8017e6c:	5f656c62 	svcpl	0x00656c62
 8017e70:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 8017e74:	69745f65 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 8017e78:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8017913 <vtable for StorePixelDmx+0x37>
 8017e7c:	 	smcvs	24580	; 0x6004

08017e7e <LightSetParamsConst::FAILSAFE>:
 8017e7e:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
 8017e82:	65666173 	strbvs	r6, [r6, #-371]!	; 0xfffffe8d
	...

08017e87 <LightSetParamsConst::UNIVERSE>:
 8017e87:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8017e8b:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
	...

08017e90 <LightSetParamsConst::DIRECTION>:
 8017e90:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8017e94:	6f697463 	svcvs	0x00697463
 8017e98:	6f705f6e 	svcvs	0x00705f6e
 8017e9c:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
 8017ea0:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 8017ea4:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8017ea8:	5f6e6f69 	svcpl	0x006e6f69
 8017eac:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8017eb0:	0000625f 	andeq	r6, r0, pc, asr r2
 8017eb4:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8017eb8:	6f697463 	svcvs	0x00697463
 8017ebc:	6f705f6e 	svcvs	0x00705f6e
 8017ec0:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
 8017ec4:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 8017ec8:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8017ecc:	5f6e6f69 	svcpl	0x006e6f69
 8017ed0:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8017ed4:	0000645f 	andeq	r6, r0, pc, asr r4
 8017ed8:	64206f4e 	strtvs	r6, [r0], #-3918	; 0xfffff0b2
 8017edc:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 8017ee0:	66207961 	strtvs	r7, [r0], -r1, ror #18
 8017ee4:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 8017ee8:	31485300 	mrscc	r5, (UNDEF: 120)
 8017eec:	00363031 	eorseq	r3, r6, r1, lsr r0
 8017ef0:	31445353 	cmpcc	r4, r3, asr r3
 8017ef4:	00363033 	eorseq	r3, r6, r3, lsr r0
 8017ef8:	28207325 	stmdacs	r0!, {r0, r2, r5, r8, r9, ip, sp, lr}
 8017efc:	252c6425 	strcs	r6, [ip, #-1061]!	; 0xfffffbdb
 8017f00:	000a2964 	andeq	r2, sl, r4, ror #18
 8017f04:	aaeeaa40 	bge	7bc280c <__stack_size+0x7bc080c>
 8017f08:	000000ee 	andeq	r0, r0, lr, ror #1

08017f0c <_OledFont8x6>:
 8017f0c:	00000040 	andeq	r0, r0, r0, asr #32
 8017f10:	40000000 	andmi	r0, r0, r0
 8017f14:	005f0000 	subseq	r0, pc, r0
 8017f18:	00400000 	subeq	r0, r0, r0
 8017f1c:	00070007 	andeq	r0, r7, r7
 8017f20:	7f144000 	svcvc	0x00144000
 8017f24:	00147f14 	andseq	r7, r4, r4, lsl pc
 8017f28:	7f2a2440 	svcvc	0x002a2440
 8017f2c:	4000122a 	andmi	r1, r0, sl, lsr #4
 8017f30:	64081323 	strvs	r1, [r8], #-803	; 0xfffffcdd
 8017f34:	36400062 	strbcc	r0, [r0], -r2, rrx
 8017f38:	50205649 	eorpl	r5, r0, r9, asr #12
 8017f3c:	08004000 	stmdaeq	r0, {lr}
 8017f40:	00000307 	andeq	r0, r0, r7, lsl #6
 8017f44:	221c0040 	andscs	r0, ip, #64	; 0x40
 8017f48:	40000041 	andmi	r0, r0, r1, asr #32
 8017f4c:	1c224100 	stfnes	f4, [r2], #-0
 8017f50:	2a400000 	bcs	9017f58 <__exidx_end+0xfffc40>
 8017f54:	2a1c7f1c 	bcs	8737bcc <__exidx_end+0x71f8b4>
 8017f58:	08084000 	stmdaeq	r8, {lr}
 8017f5c:	0008083e 	andeq	r0, r8, lr, lsr r8
 8017f60:	70800040 	addvc	r0, r0, r0, asr #32
 8017f64:	40000030 	andmi	r0, r0, r0, lsr r0
 8017f68:	08080808 	stmdaeq	r8, {r3, fp}
 8017f6c:	00400008 	subeq	r0, r0, r8
 8017f70:	00606000 	rsbeq	r6, r0, r0
 8017f74:	10204000 	eorne	r4, r0, r0
 8017f78:	00020408 	andeq	r0, r2, r8, lsl #8
 8017f7c:	49513e40 	ldmdbmi	r1, {r6, r9, sl, fp, ip, sp}^
 8017f80:	40003e45 	andmi	r3, r0, r5, asr #28
 8017f84:	407f4200 	rsbsmi	r4, pc, r0, lsl #4
 8017f88:	72400000 	subvc	r0, r0, #0
 8017f8c:	46494949 	strbmi	r4, [r9], -r9, asr #18
 8017f90:	41214000 			; <UNDEFINED> instruction: 0x41214000
 8017f94:	00334d49 	eorseq	r4, r3, r9, asr #26
 8017f98:	12141840 	andsne	r1, r4, #64, 16	; 0x400000
 8017f9c:	4000107f 	andmi	r1, r0, pc, ror r0
 8017fa0:	45454527 	strbmi	r4, [r5, #-1319]	; 0xfffffad9
 8017fa4:	3c400039 	mcrrcc	0, 3, r0, r0, cr9
 8017fa8:	3149494a 	cmpcc	r9, sl, asr #18
 8017fac:	21414000 	mrscs	r4, (UNDEF: 65)
 8017fb0:	00070911 	andeq	r0, r7, r1, lsl r9
 8017fb4:	49493640 	stmdbmi	r9, {r6, r9, sl, ip, sp}^
 8017fb8:	40003649 	andmi	r3, r0, r9, asr #12
 8017fbc:	29494946 	stmdbcs	r9, {r1, r2, r6, r8, fp, lr}^
 8017fc0:	0040001e 	subeq	r0, r0, lr, lsl r0
 8017fc4:	00001400 	andeq	r1, r0, r0, lsl #8
 8017fc8:	40004000 	andmi	r4, r0, r0
 8017fcc:	00000034 	andeq	r0, r0, r4, lsr r0
 8017fd0:	14080040 	strne	r0, [r8], #-64	; 0xffffffc0
 8017fd4:	40004122 	andmi	r4, r0, r2, lsr #2
 8017fd8:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec
 8017fdc:	00400014 	subeq	r0, r0, r4, lsl r0
 8017fe0:	08142241 	ldmdaeq	r4, {r0, r6, r9, sp}
 8017fe4:	01024000 	mrseq	r4, (UNDEF: 2)
 8017fe8:	00060959 	andeq	r0, r6, r9, asr r9
 8017fec:	5d413e40 	stclpl	14, cr3, [r1, #-256]	; 0xffffff00
 8017ff0:	40004e59 	andmi	r4, r0, r9, asr lr
 8017ff4:	1211127c 	andsne	r1, r1, #124, 4	; 0xc0000007
 8017ff8:	7f40007c 	svcvc	0x0040007c
 8017ffc:	36494949 	strbcc	r4, [r9], -r9, asr #18
 8018000:	413e4000 	teqmi	lr, r0
 8018004:	00224141 	eoreq	r4, r2, r1, asr #2
 8018008:	41417f40 	cmpmi	r1, r0, asr #30
 801800c:	40003e41 	andmi	r3, r0, r1, asr #28
 8018010:	4949497f 	stmdbmi	r9, {r0, r1, r2, r3, r4, r5, r6, r8, fp, lr}^
 8018014:	7f400041 	svcvc	0x00400041
 8018018:	01090909 	tsteq	r9, r9, lsl #18
 801801c:	413e4000 	teqmi	lr, r0
 8018020:	00735141 	rsbseq	r5, r3, r1, asr #2
 8018024:	08087f40 	stmdaeq	r8, {r6, r8, r9, sl, fp, ip, sp, lr}
 8018028:	40007f08 	andmi	r7, r0, r8, lsl #30
 801802c:	417f4100 	cmnmi	pc, r0, lsl #2
 8018030:	20400000 	subcs	r0, r0, r0
 8018034:	013f4140 	teqeq	pc, r0, asr #2
 8018038:	087f4000 	ldmdaeq	pc!, {lr}^	; <UNPREDICTABLE>
 801803c:	00412214 	subeq	r2, r1, r4, lsl r2
 8018040:	40407f40 	submi	r7, r0, r0, asr #30
 8018044:	40004040 	andmi	r4, r0, r0, asr #32
 8018048:	021c027f 	andseq	r0, ip, #-268435449	; 0xf0000007
 801804c:	7f40007f 	svcvc	0x0040007f
 8018050:	7f100804 	svcvc	0x00100804
 8018054:	413e4000 	teqmi	lr, r0
 8018058:	003e4141 	eorseq	r4, lr, r1, asr #2
 801805c:	09097f40 	stmdbeq	r9, {r6, r8, r9, sl, fp, ip, sp, lr}
 8018060:	40000609 	andmi	r0, r0, r9, lsl #12
 8018064:	2151413e 	cmpcs	r1, lr, lsr r1
 8018068:	7f40005e 	svcvc	0x0040005e
 801806c:	46291909 	strtmi	r1, [r9], -r9, lsl #18
 8018070:	49264000 	stmdbmi	r6!, {lr}
 8018074:	00324949 	eorseq	r4, r2, r9, asr #18
 8018078:	7f010340 	svcvc	0x00010340
 801807c:	40000301 	andmi	r0, r0, r1, lsl #6
 8018080:	4040403f 	submi	r4, r0, pc, lsr r0
 8018084:	1f40003f 	svcne	0x0040003f
 8018088:	1f204020 	svcne	0x00204020
 801808c:	403f4000 	eorsmi	r4, pc, r0
 8018090:	003f4038 	eorseq	r4, pc, r8, lsr r0	; <UNPREDICTABLE>
 8018094:	08146340 	ldmdaeq	r4, {r6, r8, r9, sp, lr}
 8018098:	40006314 	andmi	r6, r0, r4, lsl r3
 801809c:	04780403 	ldrbteq	r0, [r8], #-1027	; 0xfffffbfd
 80180a0:	61400003 	cmpvs	r0, r3
 80180a4:	434d4959 	movtmi	r4, #55641	; 0xd959
 80180a8:	7f004000 	svcvc	0x00004000
 80180ac:	00414141 	subeq	r4, r1, r1, asr #2
 80180b0:	08040240 	stmdaeq	r4, {r6, r9}
 80180b4:	40002010 	andmi	r2, r0, r0, lsl r0
 80180b8:	41414100 	mrsmi	r4, (UNDEF: 81)
 80180bc:	0440007f 	strbeq	r0, [r0], #-127	; 0xffffff81
 80180c0:	04020102 	streq	r0, [r2], #-258	; 0xfffffefe
 80180c4:	40404000 	submi	r4, r0, r0
 80180c8:	00404040 	subeq	r4, r0, r0, asr #32
 80180cc:	07030040 	streq	r0, [r3, -r0, asr #32]
 80180d0:	40000008 	andmi	r0, r0, r8
 80180d4:	78545420 	ldmdavc	r4, {r5, sl, ip, lr}^
 80180d8:	7f400040 	svcvc	0x00400040
 80180dc:	38444428 	stmdacc	r4, {r3, r5, sl, lr}^
 80180e0:	44384000 	ldrtmi	r4, [r8], #-0
 80180e4:	00284444 	eoreq	r4, r8, r4, asr #8
 80180e8:	44443840 	strbmi	r3, [r4], #-2112	; 0xfffff7c0
 80180ec:	40007f28 	andmi	r7, r0, r8, lsr #30
 80180f0:	54545438 	ldrbpl	r5, [r4], #-1080	; 0xfffffbc8
 80180f4:	00400018 	subeq	r0, r0, r8, lsl r0
 80180f8:	02097e08 	andeq	r7, r9, #8, 28	; 0x80
 80180fc:	a4184000 	ldrge	r4, [r8], #-0
 8018100:	00789ca4 	rsbseq	r9, r8, r4, lsr #25
 8018104:	04087f40 	streq	r7, [r8], #-3904	; 0xfffff0c0
 8018108:	40007804 	andmi	r7, r0, r4, lsl #16
 801810c:	407d4400 	rsbsmi	r4, sp, r0, lsl #8
 8018110:	20400000 	subcs	r0, r0, r0
 8018114:	003d4040 	eorseq	r4, sp, r0, asr #32
 8018118:	107f4000 	rsbsne	r4, pc, r0
 801811c:	00004428 	andeq	r4, r0, r8, lsr #8
 8018120:	7f410040 	svcvc	0x00410040
 8018124:	40000040 	andmi	r0, r0, r0, asr #32
 8018128:	0478047c 	ldrbteq	r0, [r8], #-1148	; 0xfffffb84
 801812c:	7c400078 	mcrrvc	0, 7, r0, r0, cr8
 8018130:	78040408 	stmdavc	r4, {r3, sl}
 8018134:	44384000 	ldrtmi	r4, [r8], #-0
 8018138:	00384444 	eorseq	r4, r8, r4, asr #8
 801813c:	2418fc40 	ldrcs	pc, [r8], #-3136	; 0xfffff3c0
 8018140:	40001824 	andmi	r1, r0, r4, lsr #16
 8018144:	18242418 	stmdane	r4!, {r3, r4, sl, sp}
 8018148:	7c4000fc 	mcrrvc	0, 15, r0, r0, cr12
 801814c:	08040408 	stmdaeq	r4, {r3, sl}
 8018150:	54484000 	strbpl	r4, [r8], #-0
 8018154:	00245454 	eoreq	r5, r4, r4, asr r4
 8018158:	3f040440 	svccc	0x00040440
 801815c:	40002444 	andmi	r2, r0, r4, asr #8
 8018160:	2040403c 	subcs	r4, r0, ip, lsr r0
 8018164:	1c40007c 	mcrrne	0, 7, r0, r0, cr12
 8018168:	1c204020 	stcne	0, cr4, [r0], #-128	; 0xffffff80
 801816c:	403c4000 	eorsmi	r4, ip, r0
 8018170:	003c4030 	eorseq	r4, ip, r0, lsr r0
 8018174:	10284440 	eorne	r4, r8, r0, asr #8
 8018178:	40004428 	andmi	r4, r0, r8, lsr #8
 801817c:	9090904c 	addsls	r9, r0, ip, asr #32
 8018180:	4440007c 	strbmi	r0, [r0], #-124	; 0xffffff84
 8018184:	444c5464 	strbmi	r5, [ip], #-1124	; 0xfffffb9c
 8018188:	08004000 	stmdaeq	r0, {lr}
 801818c:	00004136 	andeq	r4, r0, r6, lsr r1
 8018190:	77000040 	strvc	r0, [r0, -r0, asr #32]
 8018194:	40000000 	andmi	r0, r0, r0
 8018198:	08364100 	ldmdaeq	r6!, {r8, lr}
 801819c:	02400000 	subeq	r0, r0, #0
 80181a0:	02040201 	andeq	r0, r4, #268435456	; 0x10000000
 80181a4:	263c4000 	ldrtcs	r4, [ip], -r0
 80181a8:	003c2623 	eorseq	r2, ip, r3, lsr #12

080181ac <oled_128x32_init>:
 80181ac:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 80181b0:	4000d31f 	andmi	sp, r0, pc, lsl r3
 80181b4:	0020148d 	eoreq	r1, r0, sp, lsl #9
 80181b8:	02dac8a1 	sbcseq	ip, sl, #10551296	; 0xa10000
 80181bc:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 80181c0:	a6a440db 	ssatge	r4, #5, fp, asr #1

080181c4 <oled_128x64_init>:
 80181c4:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 80181c8:	4000d33f 	andmi	sp, r0, pc, lsr r3
 80181cc:	0020148d 	eoreq	r1, r0, sp, lsl #9
 80181d0:	12dac8a1 	sbcsne	ip, sl, #10551296	; 0xa10000
 80181d4:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 80181d8:	a6a440db 	ssatge	r4, #5, fp, asr #1

080181dc <vtable for Ssd1306>:
	...
 80181e4:	08013695 	stmdaeq	r1, {r0, r2, r4, r7, r9, sl, ip, sp}
 80181e8:	080136c1 	stmdaeq	r1, {r0, r6, r7, r9, sl, ip, sp}
 80181ec:	080139d1 	stmdaeq	r1, {r0, r4, r6, r7, r8, fp, ip, sp}
 80181f0:	08013959 	stmdaeq	r1, {r0, r3, r4, r6, r8, fp, ip, sp}
 80181f4:	08013825 	stmdaeq	r1, {r0, r2, r5, fp, ip, sp}
 80181f8:	080136e1 	stmdaeq	r1, {r0, r5, r6, r7, r9, sl, ip, sp}
 80181fc:	08013709 	stmdaeq	r1, {r0, r3, r8, r9, sl, ip, sp}
 8018200:	080137fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, r9, sl, ip, sp}
 8018204:	080137b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, r9, sl, ip, sp}
 8018208:	08013697 	stmdaeq	r1, {r0, r1, r2, r4, r7, r9, sl, ip, sp}
 801820c:	08013861 	stmdaeq	r1, {r0, r5, r6, fp, ip, sp}
 8018210:	0801386d 	stmdaeq	r1, {r0, r2, r3, r5, r6, fp, ip, sp}
 8018214:	08013887 	stmdaeq	r1, {r0, r1, r2, r7, fp, ip, sp}
 8018218:	08013699 	stmdaeq	r1, {r0, r3, r4, r7, r9, sl, ip, sp}
 801821c:	30345b1b 	eorscc	r5, r4, fp, lsl fp
 8018220:	5b1b006d 	blpl	86d83dc <__exidx_end+0x6c00c4>
 8018224:	006d3033 	rsbeq	r3, sp, r3, lsr r0
 8018228:	31335b1b 	teqcc	r3, fp, lsl fp
 801822c:	5b1b006d 	blpl	86d83e8 <__exidx_end+0x6c00d0>
 8018230:	006d3233 	rsbeq	r3, sp, r3, lsr r2
 8018234:	33335b1b 	teqcc	r3, #27648	; 0x6c00
 8018238:	5b1b006d 	blpl	86d83f4 <__exidx_end+0x6c00dc>
 801823c:	006d3933 	rsbeq	r3, sp, r3, lsr r9
 8018240:	2e25565b 	mcrcs	6, 1, r5, cr5, cr11, {2}
 8018244:	205d732a 	subscs	r7, sp, sl, lsr #6
 8018248:	43207325 			; <UNDEFINED> instruction: 0x43207325
 801824c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 8018250:	2064656c 	rsbcs	r6, r4, ip, ror #10
 8018254:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 8018258:	20732a2e 	rsbscs	r2, r3, lr, lsr #20
 801825c:	25207461 	strcs	r7, [r0, #-1121]!	; 0xfffffb9f
 8018260:	00732a2e 	rsbseq	r2, r3, lr, lsr #20
 8018264:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 8018268:	203a636f 	eorscs	r6, sl, pc, ror #6
 801826c:	000a7525 	andeq	r7, sl, r5, lsr #10
 8018270:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 8018274:	203a636f 	eorscs	r6, sl, pc, ror #6
 8018278:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 801827c:	62203e20 	eorvs	r3, r0, #32, 28	; 0x200
 8018280:	6b636f6c 	blvs	98f4038 <__exidx_end+0x18dbd20>
 8018284:	6d696c5f 	stclvs	12, cr6, [r9, #-380]!	; 0xfffffe84
 8018288:	000a7469 	andeq	r7, sl, r9, ror #8
 801828c:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 8018290:	203a636f 	eorscs	r6, sl, pc, ror #6
 8018294:	6f6c4270 	svcvs	0x006c4270
 8018298:	65486b63 	strbvs	r6, [r8, #-2915]	; 0xfffff49d
 801829c:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 80182a0:	2c70253d 	cfldr64cs	mvdx2, [r0], #-244	; 0xffffff0c
 80182a4:	7a697320 	bvc	9a74f2c <__exidx_end+0x1a5cc14>
 80182a8:	64253d65 	strtvs	r3, [r5], #-3429	; 0xfffff29b
 80182ac:	6164202c 	cmnvs	r4, ip, lsr #32
 80182b0:	253d6174 	ldrcs	r6, [sp, #-372]!	; 0xfffffe8c
 80182b4:	66000a70 			; <UNDEFINED> instruction: 0x66000a70
 80182b8:	3a656572 	bcc	9971888 <__exidx_end+0x1959570>
 80182bc:	6c427020 	mcrrvs	0, 2, r7, r2, cr0
 80182c0:	486b636f 	stmdami	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 80182c4:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 80182c8:	203d2072 	eorscs	r2, sp, r2, ror r0
 80182cc:	202c7025 	eorcs	r7, ip, r5, lsr #32
 80182d0:	6f6c4270 	svcvs	0x006c4270
 80182d4:	3d206b63 	fstmdbxcc	r0!, {d6-d54}	;@ Deprecated
 80182d8:	0a702520 	beq	9c21760 <__exidx_end+0x1c09448>
 80182dc:	00000000 	andeq	r0, r0, r0

080182e0 <days_of_month>:
 80182e0:	0000001f 	andeq	r0, r0, pc, lsl r0
 80182e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 80182e8:	0000001f 	andeq	r0, r0, pc, lsl r0
 80182ec:	0000001e 	andeq	r0, r0, lr, lsl r0
 80182f0:	0000001f 	andeq	r0, r0, pc, lsl r0
 80182f4:	0000001e 	andeq	r0, r0, lr, lsl r0
 80182f8:	0000001f 	andeq	r0, r0, pc, lsl r0
 80182fc:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018300:	0000001e 	andeq	r0, r0, lr, lsl r0
 8018304:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018308:	0000001e 	andeq	r0, r0, lr, lsl r0
 801830c:	0000001f 	andeq	r0, r0, pc, lsl r0

Disassembly of section .ARM:

08018310 <__exidx_start>:
 8018310:	7fff0dbc 	svcvc	0x00ff0dbc
 8018314:	00000001 	andeq	r0, r0, r1

Disassembly of section .ARM.attributes:

08018318 <.ARM.attributes>:
 8018318:	00002e41 	andeq	r2, r0, r1, asr #28
 801831c:	61656100 	cmnvs	r5, r0, lsl #2
 8018320:	01006962 	tsteq	r0, r2, ror #18
 8018324:	00000024 	andeq	r0, r0, r4, lsr #32
 8018328:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
 801832c:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
 8018330:	0600334d 	streq	r3, [r0], -sp, asr #6
 8018334:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
 8018338:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
 801833c:	17011501 	strne	r1, [r1, -r1, lsl #10]
 8018340:	1a011803 	bne	805e354 <__exidx_end+0x4603c>
 8018344:	Address 0x0000000008018344 is out of bounds.


Disassembly of section .data:

20000000 <s_multicast_mac>:
20000000:	005e0001 	subseq	r0, lr, r1
20000004:	00000000 	andeq	r0, r0, r0

20000008 <MDNS::s_nHandle>:
20000008:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

2000000c <next_block>:
2000000c:	20015800 	andcs	r5, r1, r0, lsl #16

20000010 <s_block_bucket>:
20000010:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20000020:	00000020 	andeq	r0, r0, r0, lsr #32
	...
20000030:	00000040 	andeq	r0, r0, r0, asr #32
	...
20000040:	00000060 	andeq	r0, r0, r0, rrx
	...
20000050:	00000080 	andeq	r0, r0, r0, lsl #1
	...
20000060:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20000070:	00000140 	andeq	r0, r0, r0, asr #2
	...
20000080:	00000180 	andeq	r0, r0, r0, lsl #3
	...
20000090:	00000200 	andeq	r0, r0, r0, lsl #4
	...
200000a0:	00000300 	andeq	r0, r0, r0, lsl #6
	...
200000b0:	00000400 	andeq	r0, r0, r0, lsl #8
	...
200000c0:	00000500 	andeq	r0, r0, r0, lsl #10
	...

200000e0 <SystemCoreClock>:
200000e0:	066ff300 	strbteq	pc, [pc], -r0, lsl #6	; <UNPREDICTABLE>

Disassembly of section .bss:

200000e8 <outptr>:
200000e8:	00000000 	andeq	r0, r0, r0

200000ec <RemoteConfig::s_pUdpBuffer>:
200000ec:	00000000 	andeq	r0, r0, r0

200000f0 <RemoteConfig::s_RemoteConfigListBin>:
	...

20000114 <RemoteConfig::s_pThis>:
20000114:	00000000 	andeq	r0, r0, r0

20000118 <guard variable for lightset::Data::Get()::instance>:
20000118:	00000000 	andeq	r0, r0, r0

2000011c <lightset::Data::Get()::instance>:
	...

2000192c <ArtNetNode::s_pThis>:
2000192c:	00000000 	andeq	r0, r0, r0

20001930 <s_ReceivingMask>:
20001930:	00000000 	andeq	r0, r0, r0

20001934 <ip>:
20001934:	00000000 	andeq	r0, r0, r0

20001938 <ip>:
20001938:	00000000 	andeq	r0, r0, r0

2000193c <s_nPortsMax>:
2000193c:	00000000 	andeq	r0, r0, r0

20001940 <E131Bridge::s_pThis>:
20001940:	00000000 	andeq	r0, r0, r0

20001944 <s_ReceivingMask>:
20001944:	00000000 	andeq	r0, r0, r0

20001948 <s_nPortsMax>:
20001948:	00000000 	andeq	r0, r0, r0

2000194c <WS28xxDmx::s_pThis>:
2000194c:	00000000 	andeq	r0, r0, r0

20001950 <PixelPatterns::m_PortConfig>:
	...

20001970 <PixelPatterns::m_nActivePorts>:
20001970:	00000000 	andeq	r0, r0, r0

20001974 <PixelPatterns::m_pScannerColours>:
20001974:	00000000 	andeq	r0, r0, r0

20001978 <PixelPatterns::m_nCount>:
20001978:	00000000 	andeq	r0, r0, r0

2000197c <PixelPatterns::m_pOutput>:
2000197c:	00000000 	andeq	r0, r0, r0

20001980 <PixelTestPattern::s_pThis>:
20001980:	00000000 	andeq	r0, r0, r0

20001984 <PixelTestPattern::s_Pattern>:
20001984:	00000000 	andeq	r0, r0, r0

20001988 <s_tmp>:
20001988:	00000000 	andeq	r0, r0, r0

2000198c <WS28xx::s_pThis>:
2000198c:	00000000 	andeq	r0, r0, r0

20001990 <SpiFlashStore::s_nWaitMillis>:
20001990:	00000000 	andeq	r0, r0, r0

20001994 <SpiFlashStore::s_SpiFlashData>:
	...

20002994 <SpiFlashStore::s_nStartAddress>:
20002994:	00000000 	andeq	r0, r0, r0

20002998 <SpiFlashStore::s_bHaveFlashChip>:
20002998:	00000000 	andeq	r0, r0, r0

2000299c <SpiFlashStore::s_nSpiFlashStoreSize>:
2000299c:	00000000 	andeq	r0, r0, r0

200029a0 <SpiFlashStore::s_State>:
200029a0:	00000000 	andeq	r0, r0, r0

200029a4 <SpiFlashStore::s_pThis>:
200029a4:	00000000 	andeq	r0, r0, r0

200029a8 <SpiFlashStore::s_bIsNew>:
200029a8:	00000000 	andeq	r0, r0, r0

200029ac <StoreDisplayUdf::s_pThis>:
200029ac:	00000000 	andeq	r0, r0, r0

200029b0 <StoreNetwork::s_pThis>:
200029b0:	00000000 	andeq	r0, r0, r0

200029b4 <StoreRemoteConfig::s_pThis>:
200029b4:	00000000 	andeq	r0, r0, r0

200029b8 <StoreArtNet::s_nPortIndexOffset>:
200029b8:	00000000 	andeq	r0, r0, r0

200029bc <StoreArtNet::s_pThis>:
200029bc:	00000000 	andeq	r0, r0, r0

200029c0 <StoreE131::s_pThis>:
200029c0:	00000000 	andeq	r0, r0, r0

200029c4 <StorePixelDmx::s_pThis>:
200029c4:	00000000 	andeq	r0, r0, r0

200029c8 <FlashRom::s_pThis>:
200029c8:	00000000 	andeq	r0, r0, r0

200029cc <flashrom::s_nAddress>:
200029cc:	00000000 	andeq	r0, r0, r0

200029d0 <flashrom::s_State>:
200029d0:	00000000 	andeq	r0, r0, r0

200029d4 <flashrom::s_nPage>:
200029d4:	00000000 	andeq	r0, r0, r0

200029d8 <flashrom::s_pData>:
200029d8:	00000000 	andeq	r0, r0, r0

200029dc <flashrom::s_isBank0>:
200029dc:	00000000 	andeq	r0, r0, r0

200029e0 <flashrom::s_nLength>:
200029e0:	00000000 	andeq	r0, r0, r0

200029e4 <g_ip_info>:
	...

200029f0 <g_mac_address>:
200029f0:	00000000 	andeq	r0, r0, r0
	...

200029f6 <s_is_dhcp>:
	...

200029f8 <s_p>:
200029f8:	00000000 	andeq	r0, r0, r0

200029fc <s_ticker>:
200029fc:	00000000 	andeq	r0, r0, r0

20002a00 <s_mac_address>:
	...

20002a08 <s_mac_address_arp_reply>:
	...

20002a10 <s_tcp>:
	...

20002ffc <broadcast_mask>:
20002ffc:	00000000 	andeq	r0, r0, r0

20003000 <gw_ip>:
20003000:	00000000 	andeq	r0, r0, r0

20003004 <on_network_mask>:
20003004:	00000000 	andeq	r0, r0, r0

20003008 <s_id>:
20003008:	00000000 	andeq	r0, r0, r0

2000300c <s_ports_allowed>:
	...

2000302c <s_recv_queue>:
	...

20008ccc <s_send_packet>:
	...

200092b8 <MDNS::s_nRemoteIp>:
200092b8:	00000000 	andeq	r0, r0, r0

200092bc <MDNS::s_nRemotePort>:
200092bc:	00000000 	andeq	r0, r0, r0

200092c0 <MDNS::s_nMulticastIp>:
200092c0:	00000000 	andeq	r0, r0, r0

200092c4 <MDNS::s_AnswerLocalIp>:
	...

200094c8 <MDNS::s_ServiceRecords>:
	...

200094e8 <MDNS::s_nBytesReceived>:
200094e8:	00000000 	andeq	r0, r0, r0

200094ec <MDNS::s_ServiceRecordsData>:
	...

200096f0 <MDNS::s_pName>:
200096f0:	00000000 	andeq	r0, r0, r0

200096f4 <MDNS::s_pBuffer>:
200096f4:	00000000 	andeq	r0, r0, r0

200096f8 <Network::s_pThis>:
200096f8:	00000000 	andeq	r0, r0, r0

200096fc <s_arp_announce>:
	...

20009728 <s_arp_reply>:
	...

20009754 <s_arp_request>:
	...

20009780 <s_arp_records>:
	...

20009900 <s_entry_current>:
20009900:	00000000 	andeq	r0, r0, r0

20009904 <s_dhcp_allocated_gw>:
20009904:	00000000 	andeq	r0, r0, r0

20009908 <s_dhcp_allocated_ip>:
20009908:	00000000 	andeq	r0, r0, r0

2000990c <s_dhcp_allocated_netmask>:
2000990c:	00000000 	andeq	r0, r0, r0

20009910 <s_dhcp_message>:
	...

20009b34 <s_dhcp_server_ip>:
20009b34:	00000000 	andeq	r0, r0, r0

20009b38 <s_groups>:
	...

20009c58 <s_id>:
20009c58:	00000000 	andeq	r0, r0, r0

20009c5c <s_joins_allowed_index>:
20009c5c:	00000000 	andeq	r0, r0, r0

20009c60 <s_leave>:
	...

20009c90 <s_multicast_mac>:
	...

20009c98 <s_report>:
	...

20009cc8 <DisplayUdf::s_pThis>:
20009cc8:	00000000 	andeq	r0, r0, r0

20009ccc <PropertiesConfig::s_Config>:
20009ccc:	00000000 	andeq	r0, r0, r0

20009cd0 <Display::s_pThis>:
20009cd0:	00000000 	andeq	r0, r0, r0

20009cd4 <_ClearBuffer>:
	...

20009d5c <Ssd1306::s_pThis>:
20009d5c:	00000000 	andeq	r0, r0, r0

20009d60 <FirmwareVersion::s_FirmwareVersion>:
	...

20009d76 <FirmwareVersion::s_Print>:
	...

20009db8 <FirmwareVersion::s_pThis>:
20009db8:	00000000 	andeq	r0, r0, r0

20009dbc <LedBlink::s_pThis>:
20009dbc:	00000000 	andeq	r0, r0, r0

20009dc0 <Hardware::s_pThis>:
	...

20009dc8 <s_micros>:
	...

20009dd0 <set_timer>:
20009dd0:	00000000 	andeq	r0, r0, r0

20009dd4 <s_nSysTickMillis>:
20009dd4:	00000000 	andeq	r0, r0, r0

20009dd8 <s_nAddress>:
20009dd8:	00000000 	andeq	r0, r0, r0

20009ddc <s_TxBuffer>:
	...

2000fddc <dma_current_ptp_rxdesc>:
2000fddc:	00000000 	andeq	r0, r0, r0

2000fde0 <dma_current_ptp_txdesc>:
2000fde0:	00000000 	andeq	r0, r0, r0

2000fde4 <dma_current_rxdesc>:
2000fde4:	00000000 	andeq	r0, r0, r0

2000fde8 <dma_current_txdesc>:
2000fde8:	00000000 	andeq	r0, r0, r0

2000fdec <enet_initpara>:
	...

2000fe28 <rx_buff>:
	...

20012dc8 <rxdesc_tab>:
	...

20012e48 <tx_buff>:
	...

20013a30 <txdesc_tab>:
	...

Disassembly of section .heap:

20015800 <heap_low>:
	...

Disassembly of section .stack:

20016000 <_sp-0x2000>:
	...
