
build_gd32/main.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08007000 <__gVectors>:
 8007000:	20018000 	andcs	r8, r1, r0
 8007004:	0800882d 	stmdaeq	r0, {r0, r2, r3, r5, fp, pc}
 8007008:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 800700c:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007010:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007014:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007018:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
	...
 800702c:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007030:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007034:	00000000 	andeq	r0, r0, r0
 8007038:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 800703c:	08014bfd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, r9, fp, lr}
 8007040:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007044:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007048:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 800704c:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007050:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007054:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007058:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 800705c:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007060:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007064:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007068:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 800706c:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007070:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007074:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007078:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 800707c:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007080:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007084:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007088:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 800708c:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007090:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007094:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007098:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 800709c:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 80070a0:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 80070a4:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 80070a8:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 80070ac:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 80070b0:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 80070b4:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 80070b8:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 80070bc:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 80070c0:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 80070c4:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 80070c8:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 80070cc:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 80070d0:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 80070d4:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 80070d8:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 80070dc:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 80070e0:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 80070e4:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 80070e8:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 80070ec:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 80070f0:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 80070f4:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
	...
 8007100:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007104:	00000000 	andeq	r0, r0, r0
 8007108:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 800710c:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007110:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007114:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007118:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 800711c:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007120:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007124:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007128:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 800712c:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007130:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007134:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007138:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 800713c:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007140:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007144:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 8007148:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}
 800714c:	08008879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, pc}

Disassembly of section .text:

08007150 <net_init>:
 8007150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007154:	460c      	mov	r4, r1
 8007156:	4616      	mov	r6, r2
 8007158:	9f06      	ldr	r7, [sp, #24]
 800715a:	4a22      	ldr	r2, [pc, #136]	; (80071e4 <net_init+0x94>)
 800715c:	461d      	mov	r5, r3
 800715e:	1e43      	subs	r3, r0, #1
 8007160:	3005      	adds	r0, #5
 8007162:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8007166:	4283      	cmp	r3, r0
 8007168:	f802 1b01 	strb.w	r1, [r2], #1
 800716c:	d1f9      	bne.n	8007162 <net_init+0x12>
 800716e:	4623      	mov	r3, r4
 8007170:	4a1d      	ldr	r2, [pc, #116]	; (80071e8 <net_init+0x98>)
 8007172:	f104 010c 	add.w	r1, r4, #12
 8007176:	f813 0b01 	ldrb.w	r0, [r3], #1
 800717a:	428b      	cmp	r3, r1
 800717c:	f802 0b01 	strb.w	r0, [r2], #1
 8007180:	d1f9      	bne.n	8007176 <net_init+0x26>
 8007182:	f04f 0800 	mov.w	r8, #0
 8007186:	4918      	ldr	r1, [pc, #96]	; (80071e8 <net_init+0x98>)
 8007188:	4816      	ldr	r0, [pc, #88]	; (80071e4 <net_init+0x94>)
 800718a:	f000 f9ab 	bl	80074e4 <ip_init>
 800718e:	4815      	ldr	r0, [pc, #84]	; (80071e4 <net_init+0x94>)
 8007190:	f000 f83c 	bl	800720c <rfc3927_init>
 8007194:	f887 8000 	strb.w	r8, [r7]
 8007198:	782b      	ldrb	r3, [r5, #0]
 800719a:	b163      	cbz	r3, 80071b6 <net_init+0x66>
 800719c:	4632      	mov	r2, r6
 800719e:	4912      	ldr	r1, [pc, #72]	; (80071e8 <net_init+0x98>)
 80071a0:	4810      	ldr	r0, [pc, #64]	; (80071e4 <net_init+0x94>)
 80071a2:	f00b fca5 	bl	8012af0 <dhcp_client>
 80071a6:	4540      	cmp	r0, r8
 80071a8:	da05      	bge.n	80071b6 <net_init+0x66>
 80071aa:	480f      	ldr	r0, [pc, #60]	; (80071e8 <net_init+0x98>)
 80071ac:	f885 8000 	strb.w	r8, [r5]
 80071b0:	f009 fefa 	bl	8010fa8 <rfc3927>
 80071b4:	7038      	strb	r0, [r7, #0]
 80071b6:	490c      	ldr	r1, [pc, #48]	; (80071e8 <net_init+0x98>)
 80071b8:	480a      	ldr	r0, [pc, #40]	; (80071e4 <net_init+0x94>)
 80071ba:	f000 f887 	bl	80072cc <arp_init>
 80071be:	480a      	ldr	r0, [pc, #40]	; (80071e8 <net_init+0x98>)
 80071c0:	f00b feb6 	bl	8012f30 <ip_set_ip>
 80071c4:	f000 f82e 	bl	8007224 <tcp_init>
 80071c8:	4a07      	ldr	r2, [pc, #28]	; (80071e8 <net_init+0x98>)
 80071ca:	1e63      	subs	r3, r4, #1
 80071cc:	340b      	adds	r4, #11
 80071ce:	f812 1b01 	ldrb.w	r1, [r2], #1
 80071d2:	f803 1f01 	strb.w	r1, [r3, #1]!
 80071d6:	429c      	cmp	r4, r3
 80071d8:	d1f9      	bne.n	80071ce <net_init+0x7e>
 80071da:	782a      	ldrb	r2, [r5, #0]
 80071dc:	4b03      	ldr	r3, [pc, #12]	; (80071ec <net_init+0x9c>)
 80071de:	701a      	strb	r2, [r3, #0]
 80071e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071e4:	200029e0 	andcs	r2, r0, r0, ror #19
 80071e8:	200029d4 	ldrdcs	r2, [r0], -r4
 80071ec:	200029e6 	andcs	r2, r0, r6, ror #19

080071f0 <net_shutdown>:
 80071f0:	b508      	push	{r3, lr}
 80071f2:	f000 f982 	bl	80074fa <ip_shutdown>
 80071f6:	4b04      	ldr	r3, [pc, #16]	; (8007208 <net_shutdown+0x18>)
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	b11b      	cbz	r3, 8007204 <net_shutdown+0x14>
 80071fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007200:	f00b bd7e 	b.w	8012d00 <dhcp_client_release>
 8007204:	bd08      	pop	{r3, pc}
 8007206:	bf00      	nop
 8007208:	200029e6 	andcs	r2, r0, r6, ror #19

0800720c <rfc3927_init>:
 800720c:	4b04      	ldr	r3, [pc, #16]	; (8007220 <rfc3927_init+0x14>)
 800720e:	1d82      	adds	r2, r0, #6
 8007210:	4290      	cmp	r0, r2
 8007212:	d100      	bne.n	8007216 <rfc3927_init+0xa>
 8007214:	4770      	bx	lr
 8007216:	f810 1b01 	ldrb.w	r1, [r0], #1
 800721a:	f803 1b01 	strb.w	r1, [r3], #1
 800721e:	e7f7      	b.n	8007210 <rfc3927_init+0x4>
 8007220:	200029f0 	strdcs	r2, [r0], -r0

08007224 <tcp_init>:
 8007224:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007226:	2206      	movs	r2, #6
 8007228:	4c0e      	ldr	r4, [pc, #56]	; (8007264 <tcp_init+0x40>)
 800722a:	490f      	ldr	r1, [pc, #60]	; (8007268 <tcp_init+0x44>)
 800722c:	18a0      	adds	r0, r4, r2
 800722e:	f009 ff15 	bl	801105c <memcpy.isra.0>
 8007232:	2308      	movs	r3, #8
 8007234:	2204      	movs	r2, #4
 8007236:	2500      	movs	r5, #0
 8007238:	7323      	strb	r3, [r4, #12]
 800723a:	4b0c      	ldr	r3, [pc, #48]	; (800726c <tcp_init+0x48>)
 800723c:	eb0d 0102 	add.w	r1, sp, r2
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f104 001a 	add.w	r0, r4, #26
 8007246:	9301      	str	r3, [sp, #4]
 8007248:	7365      	strb	r5, [r4, #13]
 800724a:	f009 ff07 	bl	801105c <memcpy.isra.0>
 800724e:	2345      	movs	r3, #69	; 0x45
 8007250:	73a3      	strb	r3, [r4, #14]
 8007252:	2340      	movs	r3, #64	; 0x40
 8007254:	7523      	strb	r3, [r4, #20]
 8007256:	75a3      	strb	r3, [r4, #22]
 8007258:	2306      	movs	r3, #6
 800725a:	73e5      	strb	r5, [r4, #15]
 800725c:	7565      	strb	r5, [r4, #21]
 800725e:	75e3      	strb	r3, [r4, #23]
 8007260:	b003      	add	sp, #12
 8007262:	bd30      	pop	{r4, r5, pc}
 8007264:	200035b4 			; <UNDEFINED> instruction: 0x200035b4
 8007268:	200029e0 	andcs	r2, r0, r0, ror #19
 800726c:	200029d4 	ldrdcs	r2, [r0], -r4

08007270 <udp_init>:
 8007270:	b570      	push	{r4, r5, r6, lr}
 8007272:	2200      	movs	r2, #0
 8007274:	2408      	movs	r4, #8
 8007276:	460e      	mov	r6, r1
 8007278:	4b0d      	ldr	r3, [pc, #52]	; (80072b0 <udp_init+0x40>)
 800727a:	490e      	ldr	r1, [pc, #56]	; (80072b4 <udp_init+0x44>)
 800727c:	3c01      	subs	r4, #1
 800727e:	801a      	strh	r2, [r3, #0]
 8007280:	805a      	strh	r2, [r3, #2]
 8007282:	f841 2b04 	str.w	r2, [r1], #4
 8007286:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 800728a:	d1f7      	bne.n	800727c <udp_init+0xc>
 800728c:	2206      	movs	r2, #6
 800728e:	4d0a      	ldr	r5, [pc, #40]	; (80072b8 <udp_init+0x48>)
 8007290:	4b0a      	ldr	r3, [pc, #40]	; (80072bc <udp_init+0x4c>)
 8007292:	4601      	mov	r1, r0
 8007294:	18a8      	adds	r0, r5, r2
 8007296:	801c      	strh	r4, [r3, #0]
 8007298:	f00a f86c 	bl	8011374 <memcpy.isra.0>
 800729c:	4b08      	ldr	r3, [pc, #32]	; (80072c0 <udp_init+0x50>)
 800729e:	4630      	mov	r0, r6
 80072a0:	60eb      	str	r3, [r5, #12]
 80072a2:	4b08      	ldr	r3, [pc, #32]	; (80072c4 <udp_init+0x54>)
 80072a4:	616b      	str	r3, [r5, #20]
 80072a6:	f00a f891 	bl	80113cc <udp_set_ip>
 80072aa:	852c      	strh	r4, [r5, #40]	; 0x28
 80072ac:	bd70      	pop	{r4, r5, r6, pc}
 80072ae:	bf00      	nop
 80072b0:	20003bd0 	ldrdcs	r3, [r0], -r0
 80072b4:	20003bb0 			; <UNDEFINED> instruction: 0x20003bb0
 80072b8:	20009870 	andcs	r9, r0, r0, ror r8
 80072bc:	20003bac 	andcs	r3, r0, ip, lsr #23
 80072c0:	00450008 	subeq	r0, r5, r8
 80072c4:	11400040 	cmpne	r0, r0, asr #32

080072c8 <udp_shutdown>:
 80072c8:	4770      	bx	lr
	...

080072cc <arp_init>:
 80072cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072d0:	4604      	mov	r4, r0
 80072d2:	460d      	mov	r5, r1
 80072d4:	f000 f876 	bl	80073c4 <arp_cache_init>
 80072d8:	2206      	movs	r2, #6
 80072da:	4621      	mov	r1, r4
 80072dc:	482e      	ldr	r0, [pc, #184]	; (8007398 <arp_init+0xcc>)
 80072de:	682f      	ldr	r7, [r5, #0]
 80072e0:	f00b fa78 	bl	80127d4 <memcpy.isra.0>
 80072e4:	4b2d      	ldr	r3, [pc, #180]	; (800739c <arp_init+0xd0>)
 80072e6:	2507      	movs	r5, #7
 80072e8:	461e      	mov	r6, r3
 80072ea:	22ff      	movs	r2, #255	; 0xff
 80072ec:	3d01      	subs	r5, #1
 80072ee:	d146      	bne.n	800737e <arp_init+0xb2>
 80072f0:	4b2b      	ldr	r3, [pc, #172]	; (80073a0 <arp_init+0xd4>)
 80072f2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80073a4 <arp_init+0xd8>
 80072f6:	2206      	movs	r2, #6
 80072f8:	e9c6 3803 	strd	r3, r8, [r6, #12]
 80072fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007300:	4621      	mov	r1, r4
 8007302:	4829      	ldr	r0, [pc, #164]	; (80073a8 <arp_init+0xdc>)
 8007304:	82b3      	strh	r3, [r6, #20]
 8007306:	f00b fa65 	bl	80127d4 <memcpy.isra.0>
 800730a:	2307      	movs	r3, #7
 800730c:	4a27      	ldr	r2, [pc, #156]	; (80073ac <arp_init+0xe0>)
 800730e:	61f7      	str	r7, [r6, #28]
 8007310:	3b01      	subs	r3, #1
 8007312:	d137      	bne.n	8007384 <arp_init+0xb8>
 8007314:	2206      	movs	r2, #6
 8007316:	4621      	mov	r1, r4
 8007318:	4825      	ldr	r0, [pc, #148]	; (80073b0 <arp_init+0xe4>)
 800731a:	f8c6 7026 	str.w	r7, [r6, #38]	; 0x26
 800731e:	f00b fa59 	bl	80127d4 <memcpy.isra.0>
 8007322:	4a24      	ldr	r2, [pc, #144]	; (80073b4 <arp_init+0xe8>)
 8007324:	2306      	movs	r3, #6
 8007326:	4615      	mov	r5, r2
 8007328:	21ff      	movs	r1, #255	; 0xff
 800732a:	3b01      	subs	r3, #1
 800732c:	d22d      	bcs.n	800738a <arp_init+0xbe>
 800732e:	4b1c      	ldr	r3, [pc, #112]	; (80073a0 <arp_init+0xd4>)
 8007330:	2206      	movs	r2, #6
 8007332:	e9c5 3803 	strd	r3, r8, [r5, #12]
 8007336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800733a:	4621      	mov	r1, r4
 800733c:	481e      	ldr	r0, [pc, #120]	; (80073b8 <arp_init+0xec>)
 800733e:	82ab      	strh	r3, [r5, #20]
 8007340:	f00b fa48 	bl	80127d4 <memcpy.isra.0>
 8007344:	2307      	movs	r3, #7
 8007346:	2100      	movs	r1, #0
 8007348:	4a1c      	ldr	r2, [pc, #112]	; (80073bc <arp_init+0xf0>)
 800734a:	61ef      	str	r7, [r5, #28]
 800734c:	3b01      	subs	r3, #1
 800734e:	d11f      	bne.n	8007390 <arp_init+0xc4>
 8007350:	2206      	movs	r2, #6
 8007352:	4d1b      	ldr	r5, [pc, #108]	; (80073c0 <arp_init+0xf4>)
 8007354:	4621      	mov	r1, r4
 8007356:	18a8      	adds	r0, r5, r2
 8007358:	f00b fa3c 	bl	80127d4 <memcpy.isra.0>
 800735c:	4b10      	ldr	r3, [pc, #64]	; (80073a0 <arp_init+0xd4>)
 800735e:	4621      	mov	r1, r4
 8007360:	e9c5 3803 	strd	r3, r8, [r5, #12]
 8007364:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007368:	f105 0016 	add.w	r0, r5, #22
 800736c:	2206      	movs	r2, #6
 800736e:	82ab      	strh	r3, [r5, #20]
 8007370:	f00b fa30 	bl	80127d4 <memcpy.isra.0>
 8007374:	61ef      	str	r7, [r5, #28]
 8007376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800737a:	f00b ba35 	b.w	80127e8 <arp_announce>
 800737e:	f803 2b01 	strb.w	r2, [r3], #1
 8007382:	e7b3      	b.n	80072ec <arp_init+0x20>
 8007384:	f802 5b01 	strb.w	r5, [r2], #1
 8007388:	e7c2      	b.n	8007310 <arp_init+0x44>
 800738a:	f802 1b01 	strb.w	r1, [r2], #1
 800738e:	e7cc      	b.n	800732a <arp_init+0x5e>
 8007390:	f802 1b01 	strb.w	r1, [r2], #1
 8007394:	e7da      	b.n	800734c <arp_init+0x80>
 8007396:	bf00      	nop
 8007398:	2000a306 	andcs	sl, r0, r6, lsl #6
 800739c:	2000a300 	andcs	sl, r0, r0, lsl #6
 80073a0:	01000608 	tsteq	r0, r8, lsl #12
 80073a4:	04060008 	streq	r0, [r6], #-8
 80073a8:	2000a316 	andcs	sl, r0, r6, lsl r3
 80073ac:	2000a320 	andcs	sl, r0, r0, lsr #6
 80073b0:	2000a35e 	andcs	sl, r0, lr, asr r3
 80073b4:	2000a358 	andcs	sl, r0, r8, asr r3
 80073b8:	2000a36e 	andcs	sl, r0, lr, ror #6
 80073bc:	2000a378 	andcs	sl, r0, r8, ror r3
 80073c0:	2000a32c 	andcs	sl, r0, ip, lsr #6

080073c4 <arp_cache_init>:
 80073c4:	2300      	movs	r3, #0
 80073c6:	4618      	mov	r0, r3
 80073c8:	4a09      	ldr	r2, [pc, #36]	; (80073f0 <arp_cache_init+0x2c>)
 80073ca:	b510      	push	{r4, lr}
 80073cc:	8013      	strh	r3, [r2, #0]
 80073ce:	4a09      	ldr	r2, [pc, #36]	; (80073f4 <arp_cache_init+0x30>)
 80073d0:	4611      	mov	r1, r2
 80073d2:	f842 0c04 	str.w	r0, [r2, #-4]
 80073d6:	1d94      	adds	r4, r2, #6
 80073d8:	42a1      	cmp	r1, r4
 80073da:	d105      	bne.n	80073e8 <arp_cache_init+0x24>
 80073dc:	3303      	adds	r3, #3
 80073de:	2b60      	cmp	r3, #96	; 0x60
 80073e0:	f102 020c 	add.w	r2, r2, #12
 80073e4:	d1f4      	bne.n	80073d0 <arp_cache_init+0xc>
 80073e6:	bd10      	pop	{r4, pc}
 80073e8:	f801 0b01 	strb.w	r0, [r1], #1
 80073ec:	e7f4      	b.n	80073d8 <arp_cache_init+0x14>
 80073ee:	bf00      	nop
 80073f0:	2000a504 	andcs	sl, r0, r4, lsl #10
 80073f4:	2000a388 	andcs	sl, r0, r8, lsl #7

080073f8 <igmp_init>:
 80073f8:	2200      	movs	r2, #0
 80073fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073fe:	4605      	mov	r5, r0
 8007400:	4608      	mov	r0, r1
 8007402:	4611      	mov	r1, r2
 8007404:	4b23      	ldr	r3, [pc, #140]	; (8007494 <igmp_init+0x9c>)
 8007406:	f103 0408 	add.w	r4, r3, #8
 800740a:	42a3      	cmp	r3, r4
 800740c:	d13e      	bne.n	800748c <igmp_init+0x94>
 800740e:	3201      	adds	r2, #1
 8007410:	2a24      	cmp	r2, #36	; 0x24
 8007412:	d1f8      	bne.n	8007406 <igmp_init+0xe>
 8007414:	2600      	movs	r6, #0
 8007416:	4b20      	ldr	r3, [pc, #128]	; (8007498 <igmp_init+0xa0>)
 8007418:	4c20      	ldr	r4, [pc, #128]	; (800749c <igmp_init+0xa4>)
 800741a:	601e      	str	r6, [r3, #0]
 800741c:	4b20      	ldr	r3, [pc, #128]	; (80074a0 <igmp_init+0xa8>)
 800741e:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 8007422:	801e      	strh	r6, [r3, #0]
 8007424:	f00b fce4 	bl	8012df0 <igmp_set_ip>
 8007428:	2201      	movs	r2, #1
 800742a:	4b1e      	ldr	r3, [pc, #120]	; (80074a4 <igmp_init+0xac>)
 800742c:	4629      	mov	r1, r5
 800742e:	801a      	strh	r2, [r3, #0]
 8007430:	225e      	movs	r2, #94	; 0x5e
 8007432:	709a      	strb	r2, [r3, #2]
 8007434:	2206      	movs	r2, #6
 8007436:	18a0      	adds	r0, r4, r2
 8007438:	f00b fc90 	bl	8012d5c <memcpy.isra.0>
 800743c:	f240 4394 	movw	r3, #1172	; 0x494
 8007440:	8463      	strh	r3, [r4, #34]	; 0x22
 8007442:	2316      	movs	r3, #22
 8007444:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80074a8 <igmp_init+0xb0>
 8007448:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80074ac <igmp_init+0xb4>
 800744c:	84e3      	strh	r3, [r4, #38]	; 0x26
 800744e:	f8c4 9014 	str.w	r9, [r4, #20]
 8007452:	4b17      	ldr	r3, [pc, #92]	; (80074b0 <igmp_init+0xb8>)
 8007454:	f8c4 800c 	str.w	r8, [r4, #12]
 8007458:	8227      	strh	r7, [r4, #16]
 800745a:	84a6      	strh	r6, [r4, #36]	; 0x24
 800745c:	4c15      	ldr	r4, [pc, #84]	; (80074b4 <igmp_init+0xbc>)
 800745e:	2206      	movs	r2, #6
 8007460:	6023      	str	r3, [r4, #0]
 8007462:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007466:	18a0      	adds	r0, r4, r2
 8007468:	80a3      	strh	r3, [r4, #4]
 800746a:	4629      	mov	r1, r5
 800746c:	f00b fc76 	bl	8012d5c <memcpy.isra.0>
 8007470:	23e0      	movs	r3, #224	; 0xe0
 8007472:	83e3      	strh	r3, [r4, #30]
 8007474:	f44f 13b8 	mov.w	r3, #1507328	; 0x170000
 8007478:	4a0f      	ldr	r2, [pc, #60]	; (80074b8 <igmp_init+0xc0>)
 800747a:	f8c4 9014 	str.w	r9, [r4, #20]
 800747e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8007482:	f8c4 800c 	str.w	r8, [r4, #12]
 8007486:	8227      	strh	r7, [r4, #16]
 8007488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800748c:	f803 1b01 	strb.w	r1, [r3], #1
 8007490:	e7bb      	b.n	800740a <igmp_init+0x12>
 8007492:	bf00      	nop
 8007494:	2000a73c 	andcs	sl, r0, ip, lsr r7
 8007498:	2000a860 	andcs	sl, r0, r0, ror #16
 800749c:	2000a89c 	mulcs	r0, ip, r8
 80074a0:	2000a85c 	andcs	sl, r0, ip, asr r8
 80074a4:	2000a894 	mulcs	r0, r4, r8
 80074a8:	02010040 	andeq	r0, r1, #64	; 0x40
 80074ac:	00460008 	subeq	r0, r6, r8
 80074b0:	005e0001 	subseq	r0, lr, r1
 80074b4:	2000a864 	andcs	sl, r0, r4, ror #16
 80074b8:	04940200 	ldreq	r0, [r4], #512	; 0x200

080074bc <igmp_shutdown>:
 80074bc:	b570      	push	{r4, r5, r6, lr}
 80074be:	2500      	movs	r5, #0
 80074c0:	462e      	mov	r6, r5
 80074c2:	4c07      	ldr	r4, [pc, #28]	; (80074e0 <igmp_shutdown+0x24>)
 80074c4:	6820      	ldr	r0, [r4, #0]
 80074c6:	b120      	cbz	r0, 80074d2 <igmp_shutdown+0x16>
 80074c8:	f00b fcee 	bl	8012ea8 <igmp_leave>
 80074cc:	6026      	str	r6, [r4, #0]
 80074ce:	7166      	strb	r6, [r4, #5]
 80074d0:	7126      	strb	r6, [r4, #4]
 80074d2:	3501      	adds	r5, #1
 80074d4:	2d24      	cmp	r5, #36	; 0x24
 80074d6:	f104 0408 	add.w	r4, r4, #8
 80074da:	d1f3      	bne.n	80074c4 <igmp_shutdown+0x8>
 80074dc:	bd70      	pop	{r4, r5, r6, pc}
 80074de:	bf00      	nop
 80074e0:	2000a73c 	andcs	sl, r0, ip, lsr r7

080074e4 <ip_init>:
 80074e4:	b538      	push	{r3, r4, r5, lr}
 80074e6:	4604      	mov	r4, r0
 80074e8:	460d      	mov	r5, r1
 80074ea:	f7ff fec1 	bl	8007270 <udp_init>
 80074ee:	4629      	mov	r1, r5
 80074f0:	4620      	mov	r0, r4
 80074f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074f6:	f7ff bf7f 	b.w	80073f8 <igmp_init>

080074fa <ip_shutdown>:
 80074fa:	b508      	push	{r3, lr}
 80074fc:	f7ff ffde 	bl	80074bc <igmp_shutdown>
 8007500:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007504:	f7ff bee0 	b.w	80072c8 <udp_shutdown>

08007508 <console_init>:
 8007508:	b508      	push	{r3, lr}
 800750a:	f00d fb19 	bl	8014b40 <uart0_init>
 800750e:	4804      	ldr	r0, [pc, #16]	; (8007520 <console_init+0x18>)
 8007510:	f00d fb46 	bl	8014ba0 <uart0_puts>
 8007514:	4803      	ldr	r0, [pc, #12]	; (8007524 <console_init+0x1c>)
 8007516:	f00d fb43 	bl	8014ba0 <uart0_puts>
 800751a:	2000      	movs	r0, #0
 800751c:	bd08      	pop	{r3, pc}
 800751e:	bf00      	nop
 8007520:	08016abd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r9, fp, sp, lr}
 8007524:	08018db4 	stmdaeq	r1, {r2, r4, r5, r7, r8, sl, fp, pc}

08007528 <net_handle>:
 8007528:	b510      	push	{r4, lr}
 800752a:	4c0c      	ldr	r4, [pc, #48]	; (800755c <net_handle+0x34>)
 800752c:	4620      	mov	r0, r4
 800752e:	f00e f8a9 	bl	8015684 <emac_eth_recv>
 8007532:	2800      	cmp	r0, #0
 8007534:	dd07      	ble.n	8007546 <net_handle+0x1e>
 8007536:	6820      	ldr	r0, [r4, #0]
 8007538:	8983      	ldrh	r3, [r0, #12]
 800753a:	2b08      	cmp	r3, #8
 800753c:	d107      	bne.n	800754e <net_handle+0x26>
 800753e:	f000 fa71 	bl	8007a24 <ip_handle>
 8007542:	f00e f8b3 	bl	80156ac <emac_free_pkt>
 8007546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800754a:	f009 bd1d 	b.w	8010f88 <net_timers_run>
 800754e:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8007552:	d1f6      	bne.n	8007542 <net_handle+0x1a>
 8007554:	f000 fa0a 	bl	800796c <arp_handle>
 8007558:	e7f3      	b.n	8007542 <net_handle+0x1a>
 800755a:	bf00      	nop
 800755c:	200029e8 	andcs	r2, r0, r8, ror #19

08007560 <tcp_handle>:
 8007560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007564:	4605      	mov	r5, r0
 8007566:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8007568:	b085      	sub	sp, #20
 800756a:	ba5b      	rev16	r3, r3
 800756c:	8443      	strh	r3, [r0, #34]	; 0x22
 800756e:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 8007570:	f8b0 b010 	ldrh.w	fp, [r0, #16]
 8007574:	ba5b      	rev16	r3, r3
 8007576:	8483      	strh	r3, [r0, #36]	; 0x24
 8007578:	f890 802e 	ldrb.w	r8, [r0, #46]	; 0x2e
 800757c:	f009 fd78 	bl	8011070 <_bswap32>
 8007580:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 8007582:	4ca6      	ldr	r4, [pc, #664]	; (800781c <tcp_handle+0x2bc>)
 8007584:	ba5b      	rev16	r3, r3
 8007586:	862b      	strh	r3, [r5, #48]	; 0x30
 8007588:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 800758a:	8822      	ldrh	r2, [r4, #0]
 800758c:	ba5b      	rev16	r3, r3
 800758e:	86ab      	strh	r3, [r5, #52]	; 0x34
 8007590:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 8007592:	429a      	cmp	r2, r3
 8007594:	d14d      	bne.n	8007632 <tcp_handle+0xd2>
 8007596:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800759a:	2b01      	cmp	r3, #1
 800759c:	d00d      	beq.n	80075ba <tcp_handle+0x5a>
 800759e:	2204      	movs	r2, #4
 80075a0:	4668      	mov	r0, sp
 80075a2:	f105 011a 	add.w	r1, r5, #26
 80075a6:	f009 fd59 	bl	801105c <memcpy.isra.0>
 80075aa:	8862      	ldrh	r2, [r4, #2]
 80075ac:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d13f      	bne.n	8007632 <tcp_handle+0xd2>
 80075b2:	6862      	ldr	r2, [r4, #4]
 80075b4:	9b00      	ldr	r3, [sp, #0]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d13b      	bne.n	8007632 <tcp_handle+0xd2>
 80075ba:	2204      	movs	r2, #4
 80075bc:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 80075c0:	eb0d 0002 	add.w	r0, sp, r2
 80075c4:	f009 fd4a 	bl	801105c <memcpy.isra.0>
 80075c8:	2204      	movs	r2, #4
 80075ca:	f105 0126 	add.w	r1, r5, #38	; 0x26
 80075ce:	eb0d 0002 	add.w	r0, sp, r2
 80075d2:	9e01      	ldr	r6, [sp, #4]
 80075d4:	f009 fd42 	bl	801105c <memcpy.isra.0>
 80075d8:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 80075dc:	9f01      	ldr	r7, [sp, #4]
 80075de:	2a01      	cmp	r2, #1
 80075e0:	f8b5 a030 	ldrh.w	sl, [r5, #48]	; 0x30
 80075e4:	d01b      	beq.n	800761e <tcp_handle+0xbe>
 80075e6:	1ed3      	subs	r3, r2, #3
 80075e8:	2b07      	cmp	r3, #7
 80075ea:	d822      	bhi.n	8007632 <tcp_handle+0xd2>
 80075ec:	ea4f 1318 	mov.w	r3, r8, lsr #4
 80075f0:	f64f 78ec 	movw	r8, #65516	; 0xffec
 80075f4:	fa9b fb9b 	rev16.w	fp, fp
 80075f8:	eba8 0883 	sub.w	r8, r8, r3, lsl #2
 80075fc:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 80075fe:	44d8      	add	r8, fp
 8007600:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
 8007604:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8007608:	fa1f f888 	uxth.w	r8, r8
 800760c:	2900      	cmp	r1, #0
 800760e:	d142      	bne.n	8007696 <tcp_handle+0x136>
 8007610:	f1b8 0f00 	cmp.w	r8, #0
 8007614:	d16b      	bne.n	80076ee <tcp_handle+0x18e>
 8007616:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007618:	42bb      	cmp	r3, r7
 800761a:	d168      	bne.n	80076ee <tcp_handle+0x18e>
 800761c:	e048      	b.n	80076b0 <tcp_handle+0x150>
 800761e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8007622:	075a      	lsls	r2, r3, #29
 8007624:	d405      	bmi.n	8007632 <tcp_handle+0xd2>
 8007626:	06d8      	lsls	r0, r3, #27
 8007628:	d506      	bpl.n	8007638 <tcp_handle+0xd8>
 800762a:	4628      	mov	r0, r5
 800762c:	497b      	ldr	r1, [pc, #492]	; (800781c <tcp_handle+0x2bc>)
 800762e:	f009 fdf3 	bl	8011218 <_send_reset>
 8007632:	b005      	add	sp, #20
 8007634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007638:	0799      	lsls	r1, r3, #30
 800763a:	d5fa      	bpl.n	8007632 <tcp_handle+0xd2>
 800763c:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
 8007640:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8007644:	4668      	mov	r0, sp
 8007646:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800764a:	f105 011a 	add.w	r1, r5, #26
 800764e:	2204      	movs	r2, #4
 8007650:	8063      	strh	r3, [r4, #2]
 8007652:	f009 fd03 	bl	801105c <memcpy.isra.0>
 8007656:	2206      	movs	r2, #6
 8007658:	9b00      	ldr	r3, [sp, #0]
 800765a:	18a9      	adds	r1, r5, r2
 800765c:	4870      	ldr	r0, [pc, #448]	; (8007820 <tcp_handle+0x2c0>)
 800765e:	6063      	str	r3, [r4, #4]
 8007660:	f009 fcfc 	bl	801105c <memcpy.isra.0>
 8007664:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007666:	1c7b      	adds	r3, r7, #1
 8007668:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800766c:	6363      	str	r3, [r4, #52]	; 0x34
 800766e:	2312      	movs	r3, #18
 8007670:	486a      	ldr	r0, [pc, #424]	; (800781c <tcp_handle+0x2bc>)
 8007672:	a901      	add	r1, sp, #4
 8007674:	f88d 300c 	strb.w	r3, [sp, #12]
 8007678:	e9c4 7608 	strd	r7, r6, [r4, #32]
 800767c:	63e7      	str	r7, [r4, #60]	; 0x3c
 800767e:	f8c4 a018 	str.w	sl, [r4, #24]
 8007682:	f009 fd1b 	bl	80110bc <_tcp_send_package>
 8007686:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007688:	1c5a      	adds	r2, r3, #1
 800768a:	e9c4 3204 	strd	r3, r2, [r4, #16]
 800768e:	2303      	movs	r3, #3
 8007690:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007694:	e7cd      	b.n	8007632 <tcp_handle+0xd2>
 8007696:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007698:	eba3 0c07 	sub.w	ip, r3, r7
 800769c:	f1b8 0f00 	cmp.w	r8, #0
 80076a0:	d10d      	bne.n	80076be <tcp_handle+0x15e>
 80076a2:	f1bc 0f00 	cmp.w	ip, #0
 80076a6:	dc22      	bgt.n	80076ee <tcp_handle+0x18e>
 80076a8:	1afb      	subs	r3, r7, r3
 80076aa:	1a5b      	subs	r3, r3, r1
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	da1e      	bge.n	80076ee <tcp_handle+0x18e>
 80076b0:	0743      	lsls	r3, r0, #29
 80076b2:	d530      	bpl.n	8007716 <tcp_handle+0x1b6>
 80076b4:	8821      	ldrh	r1, [r4, #0]
 80076b6:	4859      	ldr	r0, [pc, #356]	; (800781c <tcp_handle+0x2bc>)
 80076b8:	f009 fcb6 	bl	8011028 <_init_tcb>
 80076bc:	e7b9      	b.n	8007632 <tcp_handle+0xd2>
 80076be:	f1bc 0f00 	cmp.w	ip, #0
 80076c2:	dc06      	bgt.n	80076d2 <tcp_handle+0x172>
 80076c4:	eba7 0c03 	sub.w	ip, r7, r3
 80076c8:	ebac 0c01 	sub.w	ip, ip, r1
 80076cc:	f1bc 0f00 	cmp.w	ip, #0
 80076d0:	dbee      	blt.n	80076b0 <tcp_handle+0x150>
 80076d2:	eb08 0c07 	add.w	ip, r8, r7
 80076d6:	f103 0e01 	add.w	lr, r3, #1
 80076da:	ebae 0e0c 	sub.w	lr, lr, ip
 80076de:	f1be 0f00 	cmp.w	lr, #0
 80076e2:	dc04      	bgt.n	80076ee <tcp_handle+0x18e>
 80076e4:	43db      	mvns	r3, r3
 80076e6:	1a5b      	subs	r3, r3, r1
 80076e8:	eb13 0f0c 	cmn.w	r3, ip
 80076ec:	d4e0      	bmi.n	80076b0 <tcp_handle+0x150>
 80076ee:	0742      	lsls	r2, r0, #29
 80076f0:	d505      	bpl.n	80076fe <tcp_handle+0x19e>
 80076f2:	8821      	ldrh	r1, [r4, #0]
 80076f4:	4849      	ldr	r0, [pc, #292]	; (800781c <tcp_handle+0x2bc>)
 80076f6:	f009 fc97 	bl	8011028 <_init_tcb>
 80076fa:	2301      	movs	r3, #1
 80076fc:	e7c8      	b.n	8007690 <tcp_handle+0x130>
 80076fe:	6963      	ldr	r3, [r4, #20]
 8007700:	9301      	str	r3, [sp, #4]
 8007702:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007704:	9302      	str	r3, [sp, #8]
 8007706:	2310      	movs	r3, #16
 8007708:	4844      	ldr	r0, [pc, #272]	; (800781c <tcp_handle+0x2bc>)
 800770a:	a901      	add	r1, sp, #4
 800770c:	f88d 300c 	strb.w	r3, [sp, #12]
 8007710:	f009 fcd4 	bl	80110bc <_tcp_send_package>
 8007714:	e78d      	b.n	8007632 <tcp_handle+0xd2>
 8007716:	0781      	lsls	r1, r0, #30
 8007718:	d505      	bpl.n	8007726 <tcp_handle+0x1c6>
 800771a:	2a03      	cmp	r2, #3
 800771c:	d0ed      	beq.n	80076fa <tcp_handle+0x19a>
 800771e:	4628      	mov	r0, r5
 8007720:	493e      	ldr	r1, [pc, #248]	; (800781c <tcp_handle+0x2bc>)
 8007722:	f009 fd79 	bl	8011218 <_send_reset>
 8007726:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800772a:	06da      	lsls	r2, r3, #27
 800772c:	d581      	bpl.n	8007632 <tcp_handle+0xd2>
 800772e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007732:	3b03      	subs	r3, #3
 8007734:	2b07      	cmp	r3, #7
 8007736:	d818      	bhi.n	800776a <tcp_handle+0x20a>
 8007738:	e8df f003 	tbb	[pc, r3]
 800773c:	76767604 	ldrbtvc	r7, [r6], -r4, lsl #12
 8007740:	a69d7676 			; <UNDEFINED> instruction: 0xa69d7676
 8007744:	6923      	ldr	r3, [r4, #16]
 8007746:	1b9b      	subs	r3, r3, r6
 8007748:	2b00      	cmp	r3, #0
 800774a:	dc0a      	bgt.n	8007762 <tcp_handle+0x202>
 800774c:	6963      	ldr	r3, [r4, #20]
 800774e:	1af3      	subs	r3, r6, r3
 8007750:	2b00      	cmp	r3, #0
 8007752:	dc06      	bgt.n	8007762 <tcp_handle+0x202>
 8007754:	2304      	movs	r3, #4
 8007756:	e9c4 7608 	strd	r7, r6, [r4, #32]
 800775a:	f8c4 a018 	str.w	sl, [r4, #24]
 800775e:	6126      	str	r6, [r4, #16]
 8007760:	e796      	b.n	8007690 <tcp_handle+0x130>
 8007762:	4628      	mov	r0, r5
 8007764:	492d      	ldr	r1, [pc, #180]	; (800781c <tcp_handle+0x2bc>)
 8007766:	f009 fd57 	bl	8011218 <_send_reset>
 800776a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800776e:	3b04      	subs	r3, #4
 8007770:	2b02      	cmp	r3, #2
 8007772:	d830      	bhi.n	80077d6 <tcp_handle+0x276>
 8007774:	f1b8 0f00 	cmp.w	r8, #0
 8007778:	d02d      	beq.n	80077d6 <tcp_handle+0x276>
 800777a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800777c:	42bb      	cmp	r3, r7
 800777e:	f040 8092 	bne.w	80078a6 <tcp_handle+0x346>
 8007782:	f240 53b6 	movw	r3, #1462	; 0x5b6
 8007786:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8007824 <tcp_handle+0x2c4>
 800778a:	f105 0122 	add.w	r1, r5, #34	; 0x22
 800778e:	f8ba 7000 	ldrh.w	r7, [sl]
 8007792:	4642      	mov	r2, r8
 8007794:	435f      	muls	r7, r3
 8007796:	1d38      	adds	r0, r7, #4
 8007798:	4449      	add	r1, r9
 800779a:	4450      	add	r0, sl
 800779c:	f009 fc5e 	bl	801105c <memcpy.isra.0>
 80077a0:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80077a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077a4:	f2a2 52b4 	subw	r2, r2, #1460	; 0x5b4
 80077a8:	8722      	strh	r2, [r4, #56]	; 0x38
 80077aa:	6962      	ldr	r2, [r4, #20]
 80077ac:	4443      	add	r3, r8
 80077ae:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80077b2:	6363      	str	r3, [r4, #52]	; 0x34
 80077b4:	2310      	movs	r3, #16
 80077b6:	4457      	add	r7, sl
 80077b8:	4818      	ldr	r0, [pc, #96]	; (800781c <tcp_handle+0x2bc>)
 80077ba:	f8a7 85b8 	strh.w	r8, [r7, #1464]	; 0x5b8
 80077be:	a901      	add	r1, sp, #4
 80077c0:	f88d 300c 	strb.w	r3, [sp, #12]
 80077c4:	f009 fc7a 	bl	80110bc <_tcp_send_package>
 80077c8:	f8ba 3000 	ldrh.w	r3, [sl]
 80077cc:	3301      	adds	r3, #1
 80077ce:	f003 0301 	and.w	r3, r3, #1
 80077d2:	f8aa 3000 	strh.w	r3, [sl]
 80077d6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80077da:	2b02      	cmp	r3, #2
 80077dc:	f67f af29 	bls.w	8007632 <tcp_handle+0xd2>
 80077e0:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 80077e4:	07db      	lsls	r3, r3, #31
 80077e6:	f57f af24 	bpl.w	8007632 <tcp_handle+0xd2>
 80077ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077ec:	6962      	ldr	r2, [r4, #20]
 80077ee:	3301      	adds	r3, #1
 80077f0:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80077f4:	6363      	str	r3, [r4, #52]	; 0x34
 80077f6:	2310      	movs	r3, #16
 80077f8:	4808      	ldr	r0, [pc, #32]	; (800781c <tcp_handle+0x2bc>)
 80077fa:	a901      	add	r1, sp, #4
 80077fc:	f88d 300c 	strb.w	r3, [sp, #12]
 8007800:	f009 fc5c 	bl	80110bc <_tcp_send_package>
 8007804:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007808:	2b05      	cmp	r3, #5
 800780a:	d054      	beq.n	80078b6 <tcp_handle+0x356>
 800780c:	d84e      	bhi.n	80078ac <tcp_handle+0x34c>
 800780e:	3b03      	subs	r3, #3
 8007810:	2b01      	cmp	r3, #1
 8007812:	f63f af0e 	bhi.w	8007632 <tcp_handle+0xd2>
 8007816:	2307      	movs	r3, #7
 8007818:	e73a      	b.n	8007690 <tcp_handle+0x130>
 800781a:	bf00      	nop
 800781c:	20003570 	andcs	r3, r0, r0, ror r5
 8007820:	20003578 	andcs	r3, r0, r8, ror r5
 8007824:	20002a00 	andcs	r2, r0, r0, lsl #20
 8007828:	6923      	ldr	r3, [r4, #16]
 800782a:	1b99      	subs	r1, r3, r6
 800782c:	d513      	bpl.n	8007856 <tcp_handle+0x2f6>
 800782e:	6962      	ldr	r2, [r4, #20]
 8007830:	1ab2      	subs	r2, r6, r2
 8007832:	2a00      	cmp	r2, #0
 8007834:	dc0f      	bgt.n	8007856 <tcp_handle+0x2f6>
 8007836:	6126      	str	r6, [r4, #16]
 8007838:	6a23      	ldr	r3, [r4, #32]
 800783a:	1bda      	subs	r2, r3, r7
 800783c:	2a00      	cmp	r2, #0
 800783e:	db05      	blt.n	800784c <tcp_handle+0x2ec>
 8007840:	42bb      	cmp	r3, r7
 8007842:	d192      	bne.n	800776a <tcp_handle+0x20a>
 8007844:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007846:	1b9b      	subs	r3, r3, r6
 8007848:	2b00      	cmp	r3, #0
 800784a:	dc8e      	bgt.n	800776a <tcp_handle+0x20a>
 800784c:	e9c4 7608 	strd	r7, r6, [r4, #32]
 8007850:	f8c4 a018 	str.w	sl, [r4, #24]
 8007854:	e789      	b.n	800776a <tcp_handle+0x20a>
 8007856:	1af3      	subs	r3, r6, r3
 8007858:	2b00      	cmp	r3, #0
 800785a:	dc06      	bgt.n	800786a <tcp_handle+0x30a>
 800785c:	2900      	cmp	r1, #0
 800785e:	dc84      	bgt.n	800776a <tcp_handle+0x20a>
 8007860:	6963      	ldr	r3, [r4, #20]
 8007862:	1af3      	subs	r3, r6, r3
 8007864:	2b00      	cmp	r3, #0
 8007866:	dc80      	bgt.n	800776a <tcp_handle+0x20a>
 8007868:	e7e6      	b.n	8007838 <tcp_handle+0x2d8>
 800786a:	6963      	ldr	r3, [r4, #20]
 800786c:	1b9a      	subs	r2, r3, r6
 800786e:	2a00      	cmp	r2, #0
 8007870:	f6bf af7b 	bge.w	800776a <tcp_handle+0x20a>
 8007874:	e744      	b.n	8007700 <tcp_handle+0x1a0>
 8007876:	6963      	ldr	r3, [r4, #20]
 8007878:	42b3      	cmp	r3, r6
 800787a:	f47f af76 	bne.w	800776a <tcp_handle+0x20a>
 800787e:	8821      	ldrh	r1, [r4, #0]
 8007880:	480f      	ldr	r0, [pc, #60]	; (80078c0 <tcp_handle+0x360>)
 8007882:	f009 fbd1 	bl	8011028 <_init_tcb>
 8007886:	e770      	b.n	800776a <tcp_handle+0x20a>
 8007888:	6963      	ldr	r3, [r4, #20]
 800788a:	42b3      	cmp	r3, r6
 800788c:	f47f af6d 	bne.w	800776a <tcp_handle+0x20a>
 8007890:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007892:	480b      	ldr	r0, [pc, #44]	; (80078c0 <tcp_handle+0x360>)
 8007894:	9302      	str	r3, [sp, #8]
 8007896:	2310      	movs	r3, #16
 8007898:	a901      	add	r1, sp, #4
 800789a:	9601      	str	r6, [sp, #4]
 800789c:	f88d 300c 	strb.w	r3, [sp, #12]
 80078a0:	f009 fc0c 	bl	80110bc <_tcp_send_package>
 80078a4:	e761      	b.n	800776a <tcp_handle+0x20a>
 80078a6:	6962      	ldr	r2, [r4, #20]
 80078a8:	9201      	str	r2, [sp, #4]
 80078aa:	e72b      	b.n	8007704 <tcp_handle+0x1a4>
 80078ac:	2b06      	cmp	r3, #6
 80078ae:	f47f aec0 	bne.w	8007632 <tcp_handle+0xd2>
 80078b2:	230a      	movs	r3, #10
 80078b4:	e6ec      	b.n	8007690 <tcp_handle+0x130>
 80078b6:	6963      	ldr	r3, [r4, #20]
 80078b8:	42b3      	cmp	r3, r6
 80078ba:	d0fa      	beq.n	80078b2 <tcp_handle+0x352>
 80078bc:	2308      	movs	r3, #8
 80078be:	e6e7      	b.n	8007690 <tcp_handle+0x130>
 80078c0:	20003570 	andcs	r3, r0, r0, ror r5

080078c4 <udp_handle>:
 80078c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80078c8:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 80078ca:	4607      	mov	r7, r0
 80078cc:	ba5b      	rev16	r3, r3
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
 80078d4:	2a01      	cmp	r2, #1
 80078d6:	d904      	bls.n	80078e2 <udp_handle+0x1e>
 80078d8:	2b7b      	cmp	r3, #123	; 0x7b
 80078da:	d002      	beq.n	80078e2 <udp_handle+0x1e>
 80078dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078e0:	d308      	bcc.n	80078f4 <udp_handle+0x30>
 80078e2:	2400      	movs	r4, #0
 80078e4:	4a1f      	ldr	r2, [pc, #124]	; (8007964 <udp_handle+0xa0>)
 80078e6:	f852 1b04 	ldr.w	r1, [r2], #4
 80078ea:	4299      	cmp	r1, r3
 80078ec:	d005      	beq.n	80078fa <udp_handle+0x36>
 80078ee:	3401      	adds	r4, #1
 80078f0:	2c08      	cmp	r4, #8
 80078f2:	d1f8      	bne.n	80078e6 <udp_handle+0x22>
 80078f4:	b002      	add	sp, #8
 80078f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078fa:	f640 3394 	movw	r3, #2964	; 0xb94
 80078fe:	8cfe      	ldrh	r6, [r7, #38]	; 0x26
 8007900:	435c      	muls	r4, r3
 8007902:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 8007906:	ba76      	rev16	r6, r6
 8007908:	3e08      	subs	r6, #8
 800790a:	b2b6      	uxth	r6, r6
 800790c:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 8007910:	bf28      	it	cs
 8007912:	f44f 66b8 	movcs.w	r6, #1472	; 0x5c0
 8007916:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8007968 <udp_handle+0xa4>
 800791a:	1d20      	adds	r0, r4, #4
 800791c:	f838 5004 	ldrh.w	r5, [r8, r4]
 8007920:	4632      	mov	r2, r6
 8007922:	435d      	muls	r5, r3
 8007924:	4428      	add	r0, r5
 8007926:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 800792a:	4440      	add	r0, r8
 800792c:	f009 fd22 	bl	8011374 <memcpy.isra.0>
 8007930:	2204      	movs	r2, #4
 8007932:	f107 011a 	add.w	r1, r7, #26
 8007936:	eb0d 0002 	add.w	r0, sp, r2
 800793a:	f009 fd1b 	bl	8011374 <memcpy.isra.0>
 800793e:	9a01      	ldr	r2, [sp, #4]
 8007940:	192b      	adds	r3, r5, r4
 8007942:	4443      	add	r3, r8
 8007944:	f8c3 25c4 	str.w	r2, [r3, #1476]	; 0x5c4
 8007948:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800794a:	f8a3 65ca 	strh.w	r6, [r3, #1482]	; 0x5ca
 800794e:	ba52      	rev16	r2, r2
 8007950:	f8a3 25c8 	strh.w	r2, [r3, #1480]	; 0x5c8
 8007954:	f838 3004 	ldrh.w	r3, [r8, r4]
 8007958:	3301      	adds	r3, #1
 800795a:	f003 0301 	and.w	r3, r3, #1
 800795e:	f828 3004 	strh.w	r3, [r8, r4]
 8007962:	e7c7      	b.n	80078f4 <udp_handle+0x30>
 8007964:	20003bb0 			; <UNDEFINED> instruction: 0x20003bb0
 8007968:	20003bd0 	ldrdcs	r3, [r0], -r0

0800796c <arp_handle>:
 800796c:	8a83      	ldrh	r3, [r0, #20]
 800796e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007972:	d003      	beq.n	800797c <arp_handle+0x10>
 8007974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007978:	d002      	beq.n	8007980 <arp_handle+0x14>
 800797a:	4770      	bx	lr
 800797c:	f00a bf3e 	b.w	80127fc <arp_handle_request>
 8007980:	f00a bf64 	b.w	801284c <arp_handle_reply>

08007984 <igmp_handle>:
 8007984:	7b83      	ldrb	r3, [r0, #14]
 8007986:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800798a:	2b45      	cmp	r3, #69	; 0x45
 800798c:	d116      	bne.n	80079bc <igmp_handle+0x38>
 800798e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8007992:	2b11      	cmp	r3, #17
 8007994:	d112      	bne.n	80079bc <igmp_handle+0x38>
 8007996:	4b20      	ldr	r3, [pc, #128]	; (8007a18 <igmp_handle+0x94>)
 8007998:	f100 051e 	add.w	r5, r0, #30
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	466a      	mov	r2, sp
 80079a0:	462b      	mov	r3, r5
 80079a2:	f100 0622 	add.w	r6, r0, #34	; 0x22
 80079a6:	42b3      	cmp	r3, r6
 80079a8:	d10b      	bne.n	80079c2 <igmp_handle+0x3e>
 80079aa:	2401      	movs	r4, #1
 80079ac:	2100      	movs	r1, #0
 80079ae:	f04f 0c01 	mov.w	ip, #1
 80079b2:	4b1a      	ldr	r3, [pc, #104]	; (8007a1c <igmp_handle+0x98>)
 80079b4:	4a1a      	ldr	r2, [pc, #104]	; (8007a20 <igmp_handle+0x9c>)
 80079b6:	681f      	ldr	r7, [r3, #0]
 80079b8:	428f      	cmp	r7, r1
 80079ba:	d10a      	bne.n	80079d2 <igmp_handle+0x4e>
 80079bc:	b003      	add	sp, #12
 80079be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079c2:	f813 4b01 	ldrb.w	r4, [r3], #1
 80079c6:	f812 1b01 	ldrb.w	r1, [r2], #1
 80079ca:	428c      	cmp	r4, r1
 80079cc:	d0eb      	beq.n	80079a6 <igmp_handle+0x22>
 80079ce:	2400      	movs	r4, #0
 80079d0:	e7ec      	b.n	80079ac <igmp_handle+0x28>
 80079d2:	6813      	ldr	r3, [r2, #0]
 80079d4:	9301      	str	r3, [sp, #4]
 80079d6:	b924      	cbnz	r4, 80079e2 <igmp_handle+0x5e>
 80079d8:	462b      	mov	r3, r5
 80079da:	f10d 0e04 	add.w	lr, sp, #4
 80079de:	42b3      	cmp	r3, r6
 80079e0:	d10e      	bne.n	8007a00 <igmp_handle+0x7c>
 80079e2:	f892 e005 	ldrb.w	lr, [r2, #5]
 80079e6:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 80079ea:	f1be 0f01 	cmp.w	lr, #1
 80079ee:	d110      	bne.n	8007a12 <igmp_handle+0x8e>
 80079f0:	f892 e004 	ldrb.w	lr, [r2, #4]
 80079f4:	459e      	cmp	lr, r3
 80079f6:	d909      	bls.n	8007a0c <igmp_handle+0x88>
 80079f8:	085b      	lsrs	r3, r3, #1
 80079fa:	3301      	adds	r3, #1
 80079fc:	7113      	strb	r3, [r2, #4]
 80079fe:	e005      	b.n	8007a0c <igmp_handle+0x88>
 8007a00:	f813 9b01 	ldrb.w	r9, [r3], #1
 8007a04:	f81e 8b01 	ldrb.w	r8, [lr], #1
 8007a08:	45c1      	cmp	r9, r8
 8007a0a:	d0e8      	beq.n	80079de <igmp_handle+0x5a>
 8007a0c:	3101      	adds	r1, #1
 8007a0e:	3208      	adds	r2, #8
 8007a10:	e7d2      	b.n	80079b8 <igmp_handle+0x34>
 8007a12:	f882 c005 	strb.w	ip, [r2, #5]
 8007a16:	e7ef      	b.n	80079f8 <igmp_handle+0x74>
 8007a18:	010000e0 	smlatteq	r0, r0, r0, r0
 8007a1c:	2000a860 	andcs	sl, r0, r0, ror #16
 8007a20:	2000a73c 	andcs	sl, r0, ip, lsr r7

08007a24 <ip_handle>:
 8007a24:	7b82      	ldrb	r2, [r0, #14]
 8007a26:	7dc3      	ldrb	r3, [r0, #23]
 8007a28:	2a45      	cmp	r2, #69	; 0x45
 8007a2a:	d003      	beq.n	8007a34 <ip_handle+0x10>
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d111      	bne.n	8007a54 <ip_handle+0x30>
 8007a30:	f7ff bfa8 	b.w	8007984 <igmp_handle>
 8007a34:	2b06      	cmp	r3, #6
 8007a36:	d00b      	beq.n	8007a50 <ip_handle+0x2c>
 8007a38:	d804      	bhi.n	8007a44 <ip_handle+0x20>
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d006      	beq.n	8007a4c <ip_handle+0x28>
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d0f6      	beq.n	8007a30 <ip_handle+0xc>
 8007a42:	4770      	bx	lr
 8007a44:	2b11      	cmp	r3, #17
 8007a46:	d105      	bne.n	8007a54 <ip_handle+0x30>
 8007a48:	f7ff bf3c 	b.w	80078c4 <udp_handle>
 8007a4c:	f000 b804 	b.w	8007a58 <icmp_handle>
 8007a50:	f7ff bd86 	b.w	8007560 <tcp_handle>
 8007a54:	4770      	bx	lr
	...

08007a58 <icmp_handle>:
 8007a58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a5a:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8007a5e:	4604      	mov	r4, r0
 8007a60:	2b08      	cmp	r3, #8
 8007a62:	d13e      	bne.n	8007ae2 <icmp_handle+0x8a>
 8007a64:	f890 5023 	ldrb.w	r5, [r0, #35]	; 0x23
 8007a68:	2d00      	cmp	r5, #0
 8007a6a:	d13a      	bne.n	8007ae2 <icmp_handle+0x8a>
 8007a6c:	1d86      	adds	r6, r0, #6
 8007a6e:	4631      	mov	r1, r6
 8007a70:	2206      	movs	r2, #6
 8007a72:	f00b fa83 	bl	8012f7c <memcpy.isra.0>
 8007a76:	4630      	mov	r0, r6
 8007a78:	2206      	movs	r2, #6
 8007a7a:	491b      	ldr	r1, [pc, #108]	; (8007ae8 <icmp_handle+0x90>)
 8007a7c:	f00b fa7e 	bl	8012f7c <memcpy.isra.0>
 8007a80:	8a63      	ldrh	r3, [r4, #18]
 8007a82:	f104 061a 	add.w	r6, r4, #26
 8007a86:	43db      	mvns	r3, r3
 8007a88:	4631      	mov	r1, r6
 8007a8a:	2204      	movs	r2, #4
 8007a8c:	8263      	strh	r3, [r4, #18]
 8007a8e:	f104 001e 	add.w	r0, r4, #30
 8007a92:	f00b fa73 	bl	8012f7c <memcpy.isra.0>
 8007a96:	2204      	movs	r2, #4
 8007a98:	4b14      	ldr	r3, [pc, #80]	; (8007aec <icmp_handle+0x94>)
 8007a9a:	eb0d 0102 	add.w	r1, sp, r2
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	f104 060e 	add.w	r6, r4, #14
 8007aa6:	9301      	str	r3, [sp, #4]
 8007aa8:	f00b fa68 	bl	8012f7c <memcpy.isra.0>
 8007aac:	2114      	movs	r1, #20
 8007aae:	4630      	mov	r0, r6
 8007ab0:	7625      	strb	r5, [r4, #24]
 8007ab2:	7665      	strb	r5, [r4, #25]
 8007ab4:	f00b fa45 	bl	8012f42 <net_chksum>
 8007ab8:	8a21      	ldrh	r1, [r4, #16]
 8007aba:	8320      	strh	r0, [r4, #24]
 8007abc:	ba49      	rev16	r1, r1
 8007abe:	b289      	uxth	r1, r1
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8007ac6:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 8007aca:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 8007ace:	f00b fa38 	bl	8012f42 <net_chksum>
 8007ad2:	8a21      	ldrh	r1, [r4, #16]
 8007ad4:	84a0      	strh	r0, [r4, #36]	; 0x24
 8007ad6:	ba49      	rev16	r1, r1
 8007ad8:	b289      	uxth	r1, r1
 8007ada:	4620      	mov	r0, r4
 8007adc:	310e      	adds	r1, #14
 8007ade:	f00d fde9 	bl	80156b4 <emac_eth_send>
 8007ae2:	b002      	add	sp, #8
 8007ae4:	bd70      	pop	{r4, r5, r6, pc}
 8007ae6:	bf00      	nop
 8007ae8:	200029e0 	andcs	r2, r0, r0, ror #19
 8007aec:	200029d4 	ldrdcs	r2, [r0], -r4

08007af0 <__aeabi_d2f>:
 8007af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8007af8:	bf24      	itt	cs
 8007afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8007afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8007b02:	d90d      	bls.n	8007b20 <__aeabi_d2f+0x30>
 8007b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8007b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8007b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8007b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8007b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8007b18:	bf08      	it	eq
 8007b1a:	f020 0001 	biceq.w	r0, r0, #1
 8007b1e:	4770      	bx	lr
 8007b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8007b24:	d121      	bne.n	8007b6a <__aeabi_d2f+0x7a>
 8007b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8007b2a:	bfbc      	itt	lt
 8007b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8007b30:	4770      	bxlt	lr
 8007b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8007b3a:	f1c2 0218 	rsb	r2, r2, #24
 8007b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8007b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8007b46:	fa20 f002 	lsr.w	r0, r0, r2
 8007b4a:	bf18      	it	ne
 8007b4c:	f040 0001 	orrne.w	r0, r0, #1
 8007b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8007b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8007b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8007b5c:	ea40 000c 	orr.w	r0, r0, ip
 8007b60:	fa23 f302 	lsr.w	r3, r3, r2
 8007b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007b68:	e7cc      	b.n	8007b04 <__aeabi_d2f+0x14>
 8007b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8007b6e:	d107      	bne.n	8007b80 <__aeabi_d2f+0x90>
 8007b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8007b74:	bf1e      	ittt	ne
 8007b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8007b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8007b7e:	4770      	bxne	lr
 8007b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8007b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8007b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop

08007b90 <__aeabi_frsub>:
 8007b90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8007b94:	e002      	b.n	8007b9c <__addsf3>
 8007b96:	bf00      	nop

08007b98 <__aeabi_fsub>:
 8007b98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08007b9c <__addsf3>:
 8007b9c:	0042      	lsls	r2, r0, #1
 8007b9e:	bf1f      	itttt	ne
 8007ba0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8007ba4:	ea92 0f03 	teqne	r2, r3
 8007ba8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8007bac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007bb0:	d06a      	beq.n	8007c88 <__addsf3+0xec>
 8007bb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8007bb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8007bba:	bfc1      	itttt	gt
 8007bbc:	18d2      	addgt	r2, r2, r3
 8007bbe:	4041      	eorgt	r1, r0
 8007bc0:	4048      	eorgt	r0, r1
 8007bc2:	4041      	eorgt	r1, r0
 8007bc4:	bfb8      	it	lt
 8007bc6:	425b      	neglt	r3, r3
 8007bc8:	2b19      	cmp	r3, #25
 8007bca:	bf88      	it	hi
 8007bcc:	4770      	bxhi	lr
 8007bce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8007bd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007bd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8007bda:	bf18      	it	ne
 8007bdc:	4240      	negne	r0, r0
 8007bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007be2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8007be6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8007bea:	bf18      	it	ne
 8007bec:	4249      	negne	r1, r1
 8007bee:	ea92 0f03 	teq	r2, r3
 8007bf2:	d03f      	beq.n	8007c74 <__addsf3+0xd8>
 8007bf4:	f1a2 0201 	sub.w	r2, r2, #1
 8007bf8:	fa41 fc03 	asr.w	ip, r1, r3
 8007bfc:	eb10 000c 	adds.w	r0, r0, ip
 8007c00:	f1c3 0320 	rsb	r3, r3, #32
 8007c04:	fa01 f103 	lsl.w	r1, r1, r3
 8007c08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8007c0c:	d502      	bpl.n	8007c14 <__addsf3+0x78>
 8007c0e:	4249      	negs	r1, r1
 8007c10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8007c14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8007c18:	d313      	bcc.n	8007c42 <__addsf3+0xa6>
 8007c1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007c1e:	d306      	bcc.n	8007c2e <__addsf3+0x92>
 8007c20:	0840      	lsrs	r0, r0, #1
 8007c22:	ea4f 0131 	mov.w	r1, r1, rrx
 8007c26:	f102 0201 	add.w	r2, r2, #1
 8007c2a:	2afe      	cmp	r2, #254	; 0xfe
 8007c2c:	d251      	bcs.n	8007cd2 <__addsf3+0x136>
 8007c2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8007c32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8007c36:	bf08      	it	eq
 8007c38:	f020 0001 	biceq.w	r0, r0, #1
 8007c3c:	ea40 0003 	orr.w	r0, r0, r3
 8007c40:	4770      	bx	lr
 8007c42:	0049      	lsls	r1, r1, #1
 8007c44:	eb40 0000 	adc.w	r0, r0, r0
 8007c48:	3a01      	subs	r2, #1
 8007c4a:	bf28      	it	cs
 8007c4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8007c50:	d2ed      	bcs.n	8007c2e <__addsf3+0x92>
 8007c52:	fab0 fc80 	clz	ip, r0
 8007c56:	f1ac 0c08 	sub.w	ip, ip, #8
 8007c5a:	ebb2 020c 	subs.w	r2, r2, ip
 8007c5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8007c62:	bfaa      	itet	ge
 8007c64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8007c68:	4252      	neglt	r2, r2
 8007c6a:	4318      	orrge	r0, r3
 8007c6c:	bfbc      	itt	lt
 8007c6e:	40d0      	lsrlt	r0, r2
 8007c70:	4318      	orrlt	r0, r3
 8007c72:	4770      	bx	lr
 8007c74:	f092 0f00 	teq	r2, #0
 8007c78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8007c7c:	bf06      	itte	eq
 8007c7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8007c82:	3201      	addeq	r2, #1
 8007c84:	3b01      	subne	r3, #1
 8007c86:	e7b5      	b.n	8007bf4 <__addsf3+0x58>
 8007c88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8007c8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007c90:	bf18      	it	ne
 8007c92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007c96:	d021      	beq.n	8007cdc <__addsf3+0x140>
 8007c98:	ea92 0f03 	teq	r2, r3
 8007c9c:	d004      	beq.n	8007ca8 <__addsf3+0x10c>
 8007c9e:	f092 0f00 	teq	r2, #0
 8007ca2:	bf08      	it	eq
 8007ca4:	4608      	moveq	r0, r1
 8007ca6:	4770      	bx	lr
 8007ca8:	ea90 0f01 	teq	r0, r1
 8007cac:	bf1c      	itt	ne
 8007cae:	2000      	movne	r0, #0
 8007cb0:	4770      	bxne	lr
 8007cb2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8007cb6:	d104      	bne.n	8007cc2 <__addsf3+0x126>
 8007cb8:	0040      	lsls	r0, r0, #1
 8007cba:	bf28      	it	cs
 8007cbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8007cc0:	4770      	bx	lr
 8007cc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8007cc6:	bf3c      	itt	cc
 8007cc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8007ccc:	4770      	bxcc	lr
 8007cce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8007cd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8007cd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007cda:	4770      	bx	lr
 8007cdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8007ce0:	bf16      	itet	ne
 8007ce2:	4608      	movne	r0, r1
 8007ce4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8007ce8:	4601      	movne	r1, r0
 8007cea:	0242      	lsls	r2, r0, #9
 8007cec:	bf06      	itte	eq
 8007cee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8007cf2:	ea90 0f01 	teqeq	r0, r1
 8007cf6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8007cfa:	4770      	bx	lr

08007cfc <__aeabi_ui2f>:
 8007cfc:	f04f 0300 	mov.w	r3, #0
 8007d00:	e004      	b.n	8007d0c <__aeabi_i2f+0x8>
 8007d02:	bf00      	nop

08007d04 <__aeabi_i2f>:
 8007d04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8007d08:	bf48      	it	mi
 8007d0a:	4240      	negmi	r0, r0
 8007d0c:	ea5f 0c00 	movs.w	ip, r0
 8007d10:	bf08      	it	eq
 8007d12:	4770      	bxeq	lr
 8007d14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8007d18:	4601      	mov	r1, r0
 8007d1a:	f04f 0000 	mov.w	r0, #0
 8007d1e:	e01c      	b.n	8007d5a <__aeabi_l2f+0x2a>

08007d20 <__aeabi_ul2f>:
 8007d20:	ea50 0201 	orrs.w	r2, r0, r1
 8007d24:	bf08      	it	eq
 8007d26:	4770      	bxeq	lr
 8007d28:	f04f 0300 	mov.w	r3, #0
 8007d2c:	e00a      	b.n	8007d44 <__aeabi_l2f+0x14>
 8007d2e:	bf00      	nop

08007d30 <__aeabi_l2f>:
 8007d30:	ea50 0201 	orrs.w	r2, r0, r1
 8007d34:	bf08      	it	eq
 8007d36:	4770      	bxeq	lr
 8007d38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8007d3c:	d502      	bpl.n	8007d44 <__aeabi_l2f+0x14>
 8007d3e:	4240      	negs	r0, r0
 8007d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007d44:	ea5f 0c01 	movs.w	ip, r1
 8007d48:	bf02      	ittt	eq
 8007d4a:	4684      	moveq	ip, r0
 8007d4c:	4601      	moveq	r1, r0
 8007d4e:	2000      	moveq	r0, #0
 8007d50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8007d54:	bf08      	it	eq
 8007d56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8007d5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8007d5e:	fabc f28c 	clz	r2, ip
 8007d62:	3a08      	subs	r2, #8
 8007d64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8007d68:	db10      	blt.n	8007d8c <__aeabi_l2f+0x5c>
 8007d6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8007d6e:	4463      	add	r3, ip
 8007d70:	fa00 fc02 	lsl.w	ip, r0, r2
 8007d74:	f1c2 0220 	rsb	r2, r2, #32
 8007d78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007d7c:	fa20 f202 	lsr.w	r2, r0, r2
 8007d80:	eb43 0002 	adc.w	r0, r3, r2
 8007d84:	bf08      	it	eq
 8007d86:	f020 0001 	biceq.w	r0, r0, #1
 8007d8a:	4770      	bx	lr
 8007d8c:	f102 0220 	add.w	r2, r2, #32
 8007d90:	fa01 fc02 	lsl.w	ip, r1, r2
 8007d94:	f1c2 0220 	rsb	r2, r2, #32
 8007d98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8007d9c:	fa21 f202 	lsr.w	r2, r1, r2
 8007da0:	eb43 0002 	adc.w	r0, r3, r2
 8007da4:	bf08      	it	eq
 8007da6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8007daa:	4770      	bx	lr

08007dac <__gesf2>:
 8007dac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007db0:	e006      	b.n	8007dc0 <__cmpsf2+0x4>
 8007db2:	bf00      	nop

08007db4 <__lesf2>:
 8007db4:	f04f 0c01 	mov.w	ip, #1
 8007db8:	e002      	b.n	8007dc0 <__cmpsf2+0x4>
 8007dba:	bf00      	nop

08007dbc <__cmpsf2>:
 8007dbc:	f04f 0c01 	mov.w	ip, #1
 8007dc0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8007dc4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8007dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8007dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007dd0:	bf18      	it	ne
 8007dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007dd6:	d011      	beq.n	8007dfc <__cmpsf2+0x40>
 8007dd8:	b001      	add	sp, #4
 8007dda:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8007dde:	bf18      	it	ne
 8007de0:	ea90 0f01 	teqne	r0, r1
 8007de4:	bf58      	it	pl
 8007de6:	ebb2 0003 	subspl.w	r0, r2, r3
 8007dea:	bf88      	it	hi
 8007dec:	17c8      	asrhi	r0, r1, #31
 8007dee:	bf38      	it	cc
 8007df0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8007df4:	bf18      	it	ne
 8007df6:	f040 0001 	orrne.w	r0, r0, #1
 8007dfa:	4770      	bx	lr
 8007dfc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007e00:	d102      	bne.n	8007e08 <__cmpsf2+0x4c>
 8007e02:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8007e06:	d105      	bne.n	8007e14 <__cmpsf2+0x58>
 8007e08:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8007e0c:	d1e4      	bne.n	8007dd8 <__cmpsf2+0x1c>
 8007e0e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8007e12:	d0e1      	beq.n	8007dd8 <__cmpsf2+0x1c>
 8007e14:	f85d 0b04 	ldr.w	r0, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop

08007e1c <__aeabi_cfrcmple>:
 8007e1c:	4684      	mov	ip, r0
 8007e1e:	4608      	mov	r0, r1
 8007e20:	4661      	mov	r1, ip
 8007e22:	e7ff      	b.n	8007e24 <__aeabi_cfcmpeq>

08007e24 <__aeabi_cfcmpeq>:
 8007e24:	b50f      	push	{r0, r1, r2, r3, lr}
 8007e26:	f7ff ffc9 	bl	8007dbc <__cmpsf2>
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	bf48      	it	mi
 8007e2e:	f110 0f00 	cmnmi.w	r0, #0
 8007e32:	bd0f      	pop	{r0, r1, r2, r3, pc}

08007e34 <__aeabi_fcmpeq>:
 8007e34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007e38:	f7ff fff4 	bl	8007e24 <__aeabi_cfcmpeq>
 8007e3c:	bf0c      	ite	eq
 8007e3e:	2001      	moveq	r0, #1
 8007e40:	2000      	movne	r0, #0
 8007e42:	f85d fb08 	ldr.w	pc, [sp], #8
 8007e46:	bf00      	nop

08007e48 <__aeabi_fcmplt>:
 8007e48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007e4c:	f7ff ffea 	bl	8007e24 <__aeabi_cfcmpeq>
 8007e50:	bf34      	ite	cc
 8007e52:	2001      	movcc	r0, #1
 8007e54:	2000      	movcs	r0, #0
 8007e56:	f85d fb08 	ldr.w	pc, [sp], #8
 8007e5a:	bf00      	nop

08007e5c <__aeabi_fcmple>:
 8007e5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007e60:	f7ff ffe0 	bl	8007e24 <__aeabi_cfcmpeq>
 8007e64:	bf94      	ite	ls
 8007e66:	2001      	movls	r0, #1
 8007e68:	2000      	movhi	r0, #0
 8007e6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8007e6e:	bf00      	nop

08007e70 <__aeabi_fcmpge>:
 8007e70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007e74:	f7ff ffd2 	bl	8007e1c <__aeabi_cfrcmple>
 8007e78:	bf94      	ite	ls
 8007e7a:	2001      	movls	r0, #1
 8007e7c:	2000      	movhi	r0, #0
 8007e7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8007e82:	bf00      	nop

08007e84 <__aeabi_fcmpgt>:
 8007e84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007e88:	f7ff ffc8 	bl	8007e1c <__aeabi_cfrcmple>
 8007e8c:	bf34      	ite	cc
 8007e8e:	2001      	movcc	r0, #1
 8007e90:	2000      	movcs	r0, #0
 8007e92:	f85d fb08 	ldr.w	pc, [sp], #8
 8007e96:	bf00      	nop

08007e98 <__aeabi_f2iz>:
 8007e98:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8007e9c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8007ea0:	d30f      	bcc.n	8007ec2 <__aeabi_f2iz+0x2a>
 8007ea2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8007ea6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8007eaa:	d90d      	bls.n	8007ec8 <__aeabi_f2iz+0x30>
 8007eac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8007eb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007eb4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8007eb8:	fa23 f002 	lsr.w	r0, r3, r2
 8007ebc:	bf18      	it	ne
 8007ebe:	4240      	negne	r0, r0
 8007ec0:	4770      	bx	lr
 8007ec2:	f04f 0000 	mov.w	r0, #0
 8007ec6:	4770      	bx	lr
 8007ec8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8007ecc:	d101      	bne.n	8007ed2 <__aeabi_f2iz+0x3a>
 8007ece:	0242      	lsls	r2, r0, #9
 8007ed0:	d105      	bne.n	8007ede <__aeabi_f2iz+0x46>
 8007ed2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8007ed6:	bf08      	it	eq
 8007ed8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8007edc:	4770      	bx	lr
 8007ede:	f04f 0000 	mov.w	r0, #0
 8007ee2:	4770      	bx	lr

08007ee4 <__aeabi_uldivmod>:
 8007ee4:	b953      	cbnz	r3, 8007efc <__aeabi_uldivmod+0x18>
 8007ee6:	b94a      	cbnz	r2, 8007efc <__aeabi_uldivmod+0x18>
 8007ee8:	2900      	cmp	r1, #0
 8007eea:	bf08      	it	eq
 8007eec:	2800      	cmpeq	r0, #0
 8007eee:	bf1c      	itt	ne
 8007ef0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8007ef4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8007ef8:	f000 b976 	b.w	80081e8 <__aeabi_idiv0>
 8007efc:	f1ad 0c08 	sub.w	ip, sp, #8
 8007f00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8007f04:	f000 f806 	bl	8007f14 <__udivmoddi4>
 8007f08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007f0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f10:	b004      	add	sp, #16
 8007f12:	4770      	bx	lr

08007f14 <__udivmoddi4>:
 8007f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f18:	9e08      	ldr	r6, [sp, #32]
 8007f1a:	460d      	mov	r5, r1
 8007f1c:	4604      	mov	r4, r0
 8007f1e:	4688      	mov	r8, r1
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d14d      	bne.n	8007fc0 <__udivmoddi4+0xac>
 8007f24:	428a      	cmp	r2, r1
 8007f26:	4694      	mov	ip, r2
 8007f28:	d968      	bls.n	8007ffc <__udivmoddi4+0xe8>
 8007f2a:	fab2 f282 	clz	r2, r2
 8007f2e:	b152      	cbz	r2, 8007f46 <__udivmoddi4+0x32>
 8007f30:	fa01 f302 	lsl.w	r3, r1, r2
 8007f34:	f1c2 0120 	rsb	r1, r2, #32
 8007f38:	fa20 f101 	lsr.w	r1, r0, r1
 8007f3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8007f40:	ea41 0803 	orr.w	r8, r1, r3
 8007f44:	4094      	lsls	r4, r2
 8007f46:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8007f4a:	fbb8 f7f1 	udiv	r7, r8, r1
 8007f4e:	fa1f fe8c 	uxth.w	lr, ip
 8007f52:	fb01 8817 	mls	r8, r1, r7, r8
 8007f56:	fb07 f00e 	mul.w	r0, r7, lr
 8007f5a:	0c23      	lsrs	r3, r4, #16
 8007f5c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8007f60:	4298      	cmp	r0, r3
 8007f62:	d90a      	bls.n	8007f7a <__udivmoddi4+0x66>
 8007f64:	eb1c 0303 	adds.w	r3, ip, r3
 8007f68:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8007f6c:	f080 811e 	bcs.w	80081ac <__udivmoddi4+0x298>
 8007f70:	4298      	cmp	r0, r3
 8007f72:	f240 811b 	bls.w	80081ac <__udivmoddi4+0x298>
 8007f76:	3f02      	subs	r7, #2
 8007f78:	4463      	add	r3, ip
 8007f7a:	1a1b      	subs	r3, r3, r0
 8007f7c:	fbb3 f0f1 	udiv	r0, r3, r1
 8007f80:	fb01 3310 	mls	r3, r1, r0, r3
 8007f84:	fb00 fe0e 	mul.w	lr, r0, lr
 8007f88:	b2a4      	uxth	r4, r4
 8007f8a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8007f8e:	45a6      	cmp	lr, r4
 8007f90:	d90a      	bls.n	8007fa8 <__udivmoddi4+0x94>
 8007f92:	eb1c 0404 	adds.w	r4, ip, r4
 8007f96:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007f9a:	f080 8109 	bcs.w	80081b0 <__udivmoddi4+0x29c>
 8007f9e:	45a6      	cmp	lr, r4
 8007fa0:	f240 8106 	bls.w	80081b0 <__udivmoddi4+0x29c>
 8007fa4:	4464      	add	r4, ip
 8007fa6:	3802      	subs	r0, #2
 8007fa8:	2100      	movs	r1, #0
 8007faa:	eba4 040e 	sub.w	r4, r4, lr
 8007fae:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8007fb2:	b11e      	cbz	r6, 8007fbc <__udivmoddi4+0xa8>
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	40d4      	lsrs	r4, r2
 8007fb8:	e9c6 4300 	strd	r4, r3, [r6]
 8007fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fc0:	428b      	cmp	r3, r1
 8007fc2:	d908      	bls.n	8007fd6 <__udivmoddi4+0xc2>
 8007fc4:	2e00      	cmp	r6, #0
 8007fc6:	f000 80ee 	beq.w	80081a6 <__udivmoddi4+0x292>
 8007fca:	2100      	movs	r1, #0
 8007fcc:	e9c6 0500 	strd	r0, r5, [r6]
 8007fd0:	4608      	mov	r0, r1
 8007fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fd6:	fab3 f183 	clz	r1, r3
 8007fda:	2900      	cmp	r1, #0
 8007fdc:	d14a      	bne.n	8008074 <__udivmoddi4+0x160>
 8007fde:	42ab      	cmp	r3, r5
 8007fe0:	d302      	bcc.n	8007fe8 <__udivmoddi4+0xd4>
 8007fe2:	4282      	cmp	r2, r0
 8007fe4:	f200 80fc 	bhi.w	80081e0 <__udivmoddi4+0x2cc>
 8007fe8:	1a84      	subs	r4, r0, r2
 8007fea:	eb65 0303 	sbc.w	r3, r5, r3
 8007fee:	2001      	movs	r0, #1
 8007ff0:	4698      	mov	r8, r3
 8007ff2:	2e00      	cmp	r6, #0
 8007ff4:	d0e2      	beq.n	8007fbc <__udivmoddi4+0xa8>
 8007ff6:	e9c6 4800 	strd	r4, r8, [r6]
 8007ffa:	e7df      	b.n	8007fbc <__udivmoddi4+0xa8>
 8007ffc:	b902      	cbnz	r2, 8008000 <__udivmoddi4+0xec>
 8007ffe:	deff      	udf	#255	; 0xff
 8008000:	fab2 f282 	clz	r2, r2
 8008004:	2a00      	cmp	r2, #0
 8008006:	f040 8091 	bne.w	800812c <__udivmoddi4+0x218>
 800800a:	eba1 000c 	sub.w	r0, r1, ip
 800800e:	2101      	movs	r1, #1
 8008010:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008014:	fa1f fe8c 	uxth.w	lr, ip
 8008018:	fbb0 f3f7 	udiv	r3, r0, r7
 800801c:	fb07 0013 	mls	r0, r7, r3, r0
 8008020:	0c25      	lsrs	r5, r4, #16
 8008022:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8008026:	fb0e f003 	mul.w	r0, lr, r3
 800802a:	42a8      	cmp	r0, r5
 800802c:	d908      	bls.n	8008040 <__udivmoddi4+0x12c>
 800802e:	eb1c 0505 	adds.w	r5, ip, r5
 8008032:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8008036:	d202      	bcs.n	800803e <__udivmoddi4+0x12a>
 8008038:	42a8      	cmp	r0, r5
 800803a:	f200 80ce 	bhi.w	80081da <__udivmoddi4+0x2c6>
 800803e:	4643      	mov	r3, r8
 8008040:	1a2d      	subs	r5, r5, r0
 8008042:	fbb5 f0f7 	udiv	r0, r5, r7
 8008046:	fb07 5510 	mls	r5, r7, r0, r5
 800804a:	fb0e fe00 	mul.w	lr, lr, r0
 800804e:	b2a4      	uxth	r4, r4
 8008050:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8008054:	45a6      	cmp	lr, r4
 8008056:	d908      	bls.n	800806a <__udivmoddi4+0x156>
 8008058:	eb1c 0404 	adds.w	r4, ip, r4
 800805c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8008060:	d202      	bcs.n	8008068 <__udivmoddi4+0x154>
 8008062:	45a6      	cmp	lr, r4
 8008064:	f200 80b6 	bhi.w	80081d4 <__udivmoddi4+0x2c0>
 8008068:	4628      	mov	r0, r5
 800806a:	eba4 040e 	sub.w	r4, r4, lr
 800806e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8008072:	e79e      	b.n	8007fb2 <__udivmoddi4+0x9e>
 8008074:	f1c1 0720 	rsb	r7, r1, #32
 8008078:	408b      	lsls	r3, r1
 800807a:	fa22 fc07 	lsr.w	ip, r2, r7
 800807e:	ea4c 0c03 	orr.w	ip, ip, r3
 8008082:	fa25 fa07 	lsr.w	sl, r5, r7
 8008086:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800808a:	fbba f8f9 	udiv	r8, sl, r9
 800808e:	fa20 f307 	lsr.w	r3, r0, r7
 8008092:	fb09 aa18 	mls	sl, r9, r8, sl
 8008096:	408d      	lsls	r5, r1
 8008098:	fa1f fe8c 	uxth.w	lr, ip
 800809c:	431d      	orrs	r5, r3
 800809e:	fa00 f301 	lsl.w	r3, r0, r1
 80080a2:	fb08 f00e 	mul.w	r0, r8, lr
 80080a6:	0c2c      	lsrs	r4, r5, #16
 80080a8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80080ac:	42a0      	cmp	r0, r4
 80080ae:	fa02 f201 	lsl.w	r2, r2, r1
 80080b2:	d90b      	bls.n	80080cc <__udivmoddi4+0x1b8>
 80080b4:	eb1c 0404 	adds.w	r4, ip, r4
 80080b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80080bc:	f080 8088 	bcs.w	80081d0 <__udivmoddi4+0x2bc>
 80080c0:	42a0      	cmp	r0, r4
 80080c2:	f240 8085 	bls.w	80081d0 <__udivmoddi4+0x2bc>
 80080c6:	f1a8 0802 	sub.w	r8, r8, #2
 80080ca:	4464      	add	r4, ip
 80080cc:	1a24      	subs	r4, r4, r0
 80080ce:	fbb4 f0f9 	udiv	r0, r4, r9
 80080d2:	fb09 4410 	mls	r4, r9, r0, r4
 80080d6:	fb00 fe0e 	mul.w	lr, r0, lr
 80080da:	b2ad      	uxth	r5, r5
 80080dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80080e0:	45a6      	cmp	lr, r4
 80080e2:	d908      	bls.n	80080f6 <__udivmoddi4+0x1e2>
 80080e4:	eb1c 0404 	adds.w	r4, ip, r4
 80080e8:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80080ec:	d26c      	bcs.n	80081c8 <__udivmoddi4+0x2b4>
 80080ee:	45a6      	cmp	lr, r4
 80080f0:	d96a      	bls.n	80081c8 <__udivmoddi4+0x2b4>
 80080f2:	3802      	subs	r0, #2
 80080f4:	4464      	add	r4, ip
 80080f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80080fa:	fba0 9502 	umull	r9, r5, r0, r2
 80080fe:	eba4 040e 	sub.w	r4, r4, lr
 8008102:	42ac      	cmp	r4, r5
 8008104:	46c8      	mov	r8, r9
 8008106:	46ae      	mov	lr, r5
 8008108:	d356      	bcc.n	80081b8 <__udivmoddi4+0x2a4>
 800810a:	d053      	beq.n	80081b4 <__udivmoddi4+0x2a0>
 800810c:	2e00      	cmp	r6, #0
 800810e:	d069      	beq.n	80081e4 <__udivmoddi4+0x2d0>
 8008110:	ebb3 0208 	subs.w	r2, r3, r8
 8008114:	eb64 040e 	sbc.w	r4, r4, lr
 8008118:	fa22 f301 	lsr.w	r3, r2, r1
 800811c:	fa04 f707 	lsl.w	r7, r4, r7
 8008120:	431f      	orrs	r7, r3
 8008122:	40cc      	lsrs	r4, r1
 8008124:	e9c6 7400 	strd	r7, r4, [r6]
 8008128:	2100      	movs	r1, #0
 800812a:	e747      	b.n	8007fbc <__udivmoddi4+0xa8>
 800812c:	fa0c fc02 	lsl.w	ip, ip, r2
 8008130:	f1c2 0120 	rsb	r1, r2, #32
 8008134:	fa25 f301 	lsr.w	r3, r5, r1
 8008138:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800813c:	fa20 f101 	lsr.w	r1, r0, r1
 8008140:	4095      	lsls	r5, r2
 8008142:	430d      	orrs	r5, r1
 8008144:	fbb3 f1f7 	udiv	r1, r3, r7
 8008148:	fb07 3311 	mls	r3, r7, r1, r3
 800814c:	fa1f fe8c 	uxth.w	lr, ip
 8008150:	0c28      	lsrs	r0, r5, #16
 8008152:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8008156:	fb01 f30e 	mul.w	r3, r1, lr
 800815a:	4283      	cmp	r3, r0
 800815c:	fa04 f402 	lsl.w	r4, r4, r2
 8008160:	d908      	bls.n	8008174 <__udivmoddi4+0x260>
 8008162:	eb1c 0000 	adds.w	r0, ip, r0
 8008166:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 800816a:	d22f      	bcs.n	80081cc <__udivmoddi4+0x2b8>
 800816c:	4283      	cmp	r3, r0
 800816e:	d92d      	bls.n	80081cc <__udivmoddi4+0x2b8>
 8008170:	3902      	subs	r1, #2
 8008172:	4460      	add	r0, ip
 8008174:	1ac0      	subs	r0, r0, r3
 8008176:	fbb0 f3f7 	udiv	r3, r0, r7
 800817a:	fb07 0013 	mls	r0, r7, r3, r0
 800817e:	b2ad      	uxth	r5, r5
 8008180:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8008184:	fb03 f00e 	mul.w	r0, r3, lr
 8008188:	42a8      	cmp	r0, r5
 800818a:	d908      	bls.n	800819e <__udivmoddi4+0x28a>
 800818c:	eb1c 0505 	adds.w	r5, ip, r5
 8008190:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8008194:	d216      	bcs.n	80081c4 <__udivmoddi4+0x2b0>
 8008196:	42a8      	cmp	r0, r5
 8008198:	d914      	bls.n	80081c4 <__udivmoddi4+0x2b0>
 800819a:	3b02      	subs	r3, #2
 800819c:	4465      	add	r5, ip
 800819e:	1a28      	subs	r0, r5, r0
 80081a0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80081a4:	e738      	b.n	8008018 <__udivmoddi4+0x104>
 80081a6:	4631      	mov	r1, r6
 80081a8:	4630      	mov	r0, r6
 80081aa:	e707      	b.n	8007fbc <__udivmoddi4+0xa8>
 80081ac:	462f      	mov	r7, r5
 80081ae:	e6e4      	b.n	8007f7a <__udivmoddi4+0x66>
 80081b0:	4618      	mov	r0, r3
 80081b2:	e6f9      	b.n	8007fa8 <__udivmoddi4+0x94>
 80081b4:	454b      	cmp	r3, r9
 80081b6:	d2a9      	bcs.n	800810c <__udivmoddi4+0x1f8>
 80081b8:	ebb9 0802 	subs.w	r8, r9, r2
 80081bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80081c0:	3801      	subs	r0, #1
 80081c2:	e7a3      	b.n	800810c <__udivmoddi4+0x1f8>
 80081c4:	4643      	mov	r3, r8
 80081c6:	e7ea      	b.n	800819e <__udivmoddi4+0x28a>
 80081c8:	4628      	mov	r0, r5
 80081ca:	e794      	b.n	80080f6 <__udivmoddi4+0x1e2>
 80081cc:	4641      	mov	r1, r8
 80081ce:	e7d1      	b.n	8008174 <__udivmoddi4+0x260>
 80081d0:	46d0      	mov	r8, sl
 80081d2:	e77b      	b.n	80080cc <__udivmoddi4+0x1b8>
 80081d4:	4464      	add	r4, ip
 80081d6:	3802      	subs	r0, #2
 80081d8:	e747      	b.n	800806a <__udivmoddi4+0x156>
 80081da:	3b02      	subs	r3, #2
 80081dc:	4465      	add	r5, ip
 80081de:	e72f      	b.n	8008040 <__udivmoddi4+0x12c>
 80081e0:	4608      	mov	r0, r1
 80081e2:	e706      	b.n	8007ff2 <__udivmoddi4+0xde>
 80081e4:	4631      	mov	r1, r6
 80081e6:	e6e9      	b.n	8007fbc <__udivmoddi4+0xa8>

080081e8 <__aeabi_idiv0>:
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop

080081ec <__aeabi_drsub>:
 80081ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80081f0:	e002      	b.n	80081f8 <__adddf3>
 80081f2:	bf00      	nop

080081f4 <__aeabi_dsub>:
 80081f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080081f8 <__adddf3>:
 80081f8:	b530      	push	{r4, r5, lr}
 80081fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80081fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008202:	ea94 0f05 	teq	r4, r5
 8008206:	bf08      	it	eq
 8008208:	ea90 0f02 	teqeq	r0, r2
 800820c:	bf1f      	itttt	ne
 800820e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8008216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800821a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800821e:	f000 80e2 	beq.w	80083e6 <__adddf3+0x1ee>
 8008222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8008226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800822a:	bfb8      	it	lt
 800822c:	426d      	neglt	r5, r5
 800822e:	dd0c      	ble.n	800824a <__adddf3+0x52>
 8008230:	442c      	add	r4, r5
 8008232:	ea80 0202 	eor.w	r2, r0, r2
 8008236:	ea81 0303 	eor.w	r3, r1, r3
 800823a:	ea82 0000 	eor.w	r0, r2, r0
 800823e:	ea83 0101 	eor.w	r1, r3, r1
 8008242:	ea80 0202 	eor.w	r2, r0, r2
 8008246:	ea81 0303 	eor.w	r3, r1, r3
 800824a:	2d36      	cmp	r5, #54	; 0x36
 800824c:	bf88      	it	hi
 800824e:	bd30      	pophi	{r4, r5, pc}
 8008250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800825c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008260:	d002      	beq.n	8008268 <__adddf3+0x70>
 8008262:	4240      	negs	r0, r0
 8008264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800826c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008274:	d002      	beq.n	800827c <__adddf3+0x84>
 8008276:	4252      	negs	r2, r2
 8008278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800827c:	ea94 0f05 	teq	r4, r5
 8008280:	f000 80a7 	beq.w	80083d2 <__adddf3+0x1da>
 8008284:	f1a4 0401 	sub.w	r4, r4, #1
 8008288:	f1d5 0e20 	rsbs	lr, r5, #32
 800828c:	db0d      	blt.n	80082aa <__adddf3+0xb2>
 800828e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008292:	fa22 f205 	lsr.w	r2, r2, r5
 8008296:	1880      	adds	r0, r0, r2
 8008298:	f141 0100 	adc.w	r1, r1, #0
 800829c:	fa03 f20e 	lsl.w	r2, r3, lr
 80082a0:	1880      	adds	r0, r0, r2
 80082a2:	fa43 f305 	asr.w	r3, r3, r5
 80082a6:	4159      	adcs	r1, r3
 80082a8:	e00e      	b.n	80082c8 <__adddf3+0xd0>
 80082aa:	f1a5 0520 	sub.w	r5, r5, #32
 80082ae:	f10e 0e20 	add.w	lr, lr, #32
 80082b2:	2a01      	cmp	r2, #1
 80082b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80082b8:	bf28      	it	cs
 80082ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80082be:	fa43 f305 	asr.w	r3, r3, r5
 80082c2:	18c0      	adds	r0, r0, r3
 80082c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80082c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80082cc:	d507      	bpl.n	80082de <__adddf3+0xe6>
 80082ce:	f04f 0e00 	mov.w	lr, #0
 80082d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80082d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80082da:	eb6e 0101 	sbc.w	r1, lr, r1
 80082de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80082e2:	d31b      	bcc.n	800831c <__adddf3+0x124>
 80082e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80082e8:	d30c      	bcc.n	8008304 <__adddf3+0x10c>
 80082ea:	0849      	lsrs	r1, r1, #1
 80082ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80082f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80082f4:	f104 0401 	add.w	r4, r4, #1
 80082f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80082fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008300:	f080 809a 	bcs.w	8008438 <__adddf3+0x240>
 8008304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8008308:	bf08      	it	eq
 800830a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800830e:	f150 0000 	adcs.w	r0, r0, #0
 8008312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008316:	ea41 0105 	orr.w	r1, r1, r5
 800831a:	bd30      	pop	{r4, r5, pc}
 800831c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008320:	4140      	adcs	r0, r0
 8008322:	eb41 0101 	adc.w	r1, r1, r1
 8008326:	3c01      	subs	r4, #1
 8008328:	bf28      	it	cs
 800832a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800832e:	d2e9      	bcs.n	8008304 <__adddf3+0x10c>
 8008330:	f091 0f00 	teq	r1, #0
 8008334:	bf04      	itt	eq
 8008336:	4601      	moveq	r1, r0
 8008338:	2000      	moveq	r0, #0
 800833a:	fab1 f381 	clz	r3, r1
 800833e:	bf08      	it	eq
 8008340:	3320      	addeq	r3, #32
 8008342:	f1a3 030b 	sub.w	r3, r3, #11
 8008346:	f1b3 0220 	subs.w	r2, r3, #32
 800834a:	da0c      	bge.n	8008366 <__adddf3+0x16e>
 800834c:	320c      	adds	r2, #12
 800834e:	dd08      	ble.n	8008362 <__adddf3+0x16a>
 8008350:	f102 0c14 	add.w	ip, r2, #20
 8008354:	f1c2 020c 	rsb	r2, r2, #12
 8008358:	fa01 f00c 	lsl.w	r0, r1, ip
 800835c:	fa21 f102 	lsr.w	r1, r1, r2
 8008360:	e00c      	b.n	800837c <__adddf3+0x184>
 8008362:	f102 0214 	add.w	r2, r2, #20
 8008366:	bfd8      	it	le
 8008368:	f1c2 0c20 	rsble	ip, r2, #32
 800836c:	fa01 f102 	lsl.w	r1, r1, r2
 8008370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008374:	bfdc      	itt	le
 8008376:	ea41 010c 	orrle.w	r1, r1, ip
 800837a:	4090      	lslle	r0, r2
 800837c:	1ae4      	subs	r4, r4, r3
 800837e:	bfa2      	ittt	ge
 8008380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008384:	4329      	orrge	r1, r5
 8008386:	bd30      	popge	{r4, r5, pc}
 8008388:	ea6f 0404 	mvn.w	r4, r4
 800838c:	3c1f      	subs	r4, #31
 800838e:	da1c      	bge.n	80083ca <__adddf3+0x1d2>
 8008390:	340c      	adds	r4, #12
 8008392:	dc0e      	bgt.n	80083b2 <__adddf3+0x1ba>
 8008394:	f104 0414 	add.w	r4, r4, #20
 8008398:	f1c4 0220 	rsb	r2, r4, #32
 800839c:	fa20 f004 	lsr.w	r0, r0, r4
 80083a0:	fa01 f302 	lsl.w	r3, r1, r2
 80083a4:	ea40 0003 	orr.w	r0, r0, r3
 80083a8:	fa21 f304 	lsr.w	r3, r1, r4
 80083ac:	ea45 0103 	orr.w	r1, r5, r3
 80083b0:	bd30      	pop	{r4, r5, pc}
 80083b2:	f1c4 040c 	rsb	r4, r4, #12
 80083b6:	f1c4 0220 	rsb	r2, r4, #32
 80083ba:	fa20 f002 	lsr.w	r0, r0, r2
 80083be:	fa01 f304 	lsl.w	r3, r1, r4
 80083c2:	ea40 0003 	orr.w	r0, r0, r3
 80083c6:	4629      	mov	r1, r5
 80083c8:	bd30      	pop	{r4, r5, pc}
 80083ca:	fa21 f004 	lsr.w	r0, r1, r4
 80083ce:	4629      	mov	r1, r5
 80083d0:	bd30      	pop	{r4, r5, pc}
 80083d2:	f094 0f00 	teq	r4, #0
 80083d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80083da:	bf06      	itte	eq
 80083dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80083e0:	3401      	addeq	r4, #1
 80083e2:	3d01      	subne	r5, #1
 80083e4:	e74e      	b.n	8008284 <__adddf3+0x8c>
 80083e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80083ea:	bf18      	it	ne
 80083ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80083f0:	d029      	beq.n	8008446 <__adddf3+0x24e>
 80083f2:	ea94 0f05 	teq	r4, r5
 80083f6:	bf08      	it	eq
 80083f8:	ea90 0f02 	teqeq	r0, r2
 80083fc:	d005      	beq.n	800840a <__adddf3+0x212>
 80083fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8008402:	bf04      	itt	eq
 8008404:	4619      	moveq	r1, r3
 8008406:	4610      	moveq	r0, r2
 8008408:	bd30      	pop	{r4, r5, pc}
 800840a:	ea91 0f03 	teq	r1, r3
 800840e:	bf1e      	ittt	ne
 8008410:	2100      	movne	r1, #0
 8008412:	2000      	movne	r0, #0
 8008414:	bd30      	popne	{r4, r5, pc}
 8008416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800841a:	d105      	bne.n	8008428 <__adddf3+0x230>
 800841c:	0040      	lsls	r0, r0, #1
 800841e:	4149      	adcs	r1, r1
 8008420:	bf28      	it	cs
 8008422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8008426:	bd30      	pop	{r4, r5, pc}
 8008428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800842c:	bf3c      	itt	cc
 800842e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008432:	bd30      	popcc	{r4, r5, pc}
 8008434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800843c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008440:	f04f 0000 	mov.w	r0, #0
 8008444:	bd30      	pop	{r4, r5, pc}
 8008446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800844a:	bf1a      	itte	ne
 800844c:	4619      	movne	r1, r3
 800844e:	4610      	movne	r0, r2
 8008450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008454:	bf1c      	itt	ne
 8008456:	460b      	movne	r3, r1
 8008458:	4602      	movne	r2, r0
 800845a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800845e:	bf06      	itte	eq
 8008460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008464:	ea91 0f03 	teqeq	r1, r3
 8008468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800846c:	bd30      	pop	{r4, r5, pc}
 800846e:	bf00      	nop

08008470 <__aeabi_ui2d>:
 8008470:	f090 0f00 	teq	r0, #0
 8008474:	bf04      	itt	eq
 8008476:	2100      	moveq	r1, #0
 8008478:	4770      	bxeq	lr
 800847a:	b530      	push	{r4, r5, lr}
 800847c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008484:	f04f 0500 	mov.w	r5, #0
 8008488:	f04f 0100 	mov.w	r1, #0
 800848c:	e750      	b.n	8008330 <__adddf3+0x138>
 800848e:	bf00      	nop

08008490 <__aeabi_i2d>:
 8008490:	f090 0f00 	teq	r0, #0
 8008494:	bf04      	itt	eq
 8008496:	2100      	moveq	r1, #0
 8008498:	4770      	bxeq	lr
 800849a:	b530      	push	{r4, r5, lr}
 800849c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80084a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80084a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80084a8:	bf48      	it	mi
 80084aa:	4240      	negmi	r0, r0
 80084ac:	f04f 0100 	mov.w	r1, #0
 80084b0:	e73e      	b.n	8008330 <__adddf3+0x138>
 80084b2:	bf00      	nop

080084b4 <__aeabi_f2d>:
 80084b4:	0042      	lsls	r2, r0, #1
 80084b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80084ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80084be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80084c2:	bf1f      	itttt	ne
 80084c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80084c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80084cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80084d0:	4770      	bxne	lr
 80084d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80084d6:	bf08      	it	eq
 80084d8:	4770      	bxeq	lr
 80084da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80084de:	bf04      	itt	eq
 80084e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80084e4:	4770      	bxeq	lr
 80084e6:	b530      	push	{r4, r5, lr}
 80084e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80084ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80084f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80084f4:	e71c      	b.n	8008330 <__adddf3+0x138>
 80084f6:	bf00      	nop

080084f8 <__aeabi_ul2d>:
 80084f8:	ea50 0201 	orrs.w	r2, r0, r1
 80084fc:	bf08      	it	eq
 80084fe:	4770      	bxeq	lr
 8008500:	b530      	push	{r4, r5, lr}
 8008502:	f04f 0500 	mov.w	r5, #0
 8008506:	e00a      	b.n	800851e <__aeabi_l2d+0x16>

08008508 <__aeabi_l2d>:
 8008508:	ea50 0201 	orrs.w	r2, r0, r1
 800850c:	bf08      	it	eq
 800850e:	4770      	bxeq	lr
 8008510:	b530      	push	{r4, r5, lr}
 8008512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8008516:	d502      	bpl.n	800851e <__aeabi_l2d+0x16>
 8008518:	4240      	negs	r0, r0
 800851a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800851e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008522:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800852a:	f43f aed8 	beq.w	80082de <__adddf3+0xe6>
 800852e:	f04f 0203 	mov.w	r2, #3
 8008532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008536:	bf18      	it	ne
 8008538:	3203      	addne	r2, #3
 800853a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800853e:	bf18      	it	ne
 8008540:	3203      	addne	r2, #3
 8008542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8008546:	f1c2 0320 	rsb	r3, r2, #32
 800854a:	fa00 fc03 	lsl.w	ip, r0, r3
 800854e:	fa20 f002 	lsr.w	r0, r0, r2
 8008552:	fa01 fe03 	lsl.w	lr, r1, r3
 8008556:	ea40 000e 	orr.w	r0, r0, lr
 800855a:	fa21 f102 	lsr.w	r1, r1, r2
 800855e:	4414      	add	r4, r2
 8008560:	e6bd      	b.n	80082de <__adddf3+0xe6>
 8008562:	bf00      	nop

08008564 <__aeabi_fmul>:
 8008564:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008568:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800856c:	bf1e      	ittt	ne
 800856e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8008572:	ea92 0f0c 	teqne	r2, ip
 8008576:	ea93 0f0c 	teqne	r3, ip
 800857a:	d06f      	beq.n	800865c <__aeabi_fmul+0xf8>
 800857c:	441a      	add	r2, r3
 800857e:	ea80 0c01 	eor.w	ip, r0, r1
 8008582:	0240      	lsls	r0, r0, #9
 8008584:	bf18      	it	ne
 8008586:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800858a:	d01e      	beq.n	80085ca <__aeabi_fmul+0x66>
 800858c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008590:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8008594:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8008598:	fba0 3101 	umull	r3, r1, r0, r1
 800859c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80085a0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80085a4:	bf3e      	ittt	cc
 80085a6:	0049      	lslcc	r1, r1, #1
 80085a8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80085ac:	005b      	lslcc	r3, r3, #1
 80085ae:	ea40 0001 	orr.w	r0, r0, r1
 80085b2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80085b6:	2afd      	cmp	r2, #253	; 0xfd
 80085b8:	d81d      	bhi.n	80085f6 <__aeabi_fmul+0x92>
 80085ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085be:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80085c2:	bf08      	it	eq
 80085c4:	f020 0001 	biceq.w	r0, r0, #1
 80085c8:	4770      	bx	lr
 80085ca:	f090 0f00 	teq	r0, #0
 80085ce:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80085d2:	bf08      	it	eq
 80085d4:	0249      	lsleq	r1, r1, #9
 80085d6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80085da:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80085de:	3a7f      	subs	r2, #127	; 0x7f
 80085e0:	bfc2      	ittt	gt
 80085e2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80085e6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80085ea:	4770      	bxgt	lr
 80085ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80085f0:	f04f 0300 	mov.w	r3, #0
 80085f4:	3a01      	subs	r2, #1
 80085f6:	dc5d      	bgt.n	80086b4 <__aeabi_fmul+0x150>
 80085f8:	f112 0f19 	cmn.w	r2, #25
 80085fc:	bfdc      	itt	le
 80085fe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8008602:	4770      	bxle	lr
 8008604:	f1c2 0200 	rsb	r2, r2, #0
 8008608:	0041      	lsls	r1, r0, #1
 800860a:	fa21 f102 	lsr.w	r1, r1, r2
 800860e:	f1c2 0220 	rsb	r2, r2, #32
 8008612:	fa00 fc02 	lsl.w	ip, r0, r2
 8008616:	ea5f 0031 	movs.w	r0, r1, rrx
 800861a:	f140 0000 	adc.w	r0, r0, #0
 800861e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8008622:	bf08      	it	eq
 8008624:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8008628:	4770      	bx	lr
 800862a:	f092 0f00 	teq	r2, #0
 800862e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8008632:	bf02      	ittt	eq
 8008634:	0040      	lsleq	r0, r0, #1
 8008636:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800863a:	3a01      	subeq	r2, #1
 800863c:	d0f9      	beq.n	8008632 <__aeabi_fmul+0xce>
 800863e:	ea40 000c 	orr.w	r0, r0, ip
 8008642:	f093 0f00 	teq	r3, #0
 8008646:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800864a:	bf02      	ittt	eq
 800864c:	0049      	lsleq	r1, r1, #1
 800864e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8008652:	3b01      	subeq	r3, #1
 8008654:	d0f9      	beq.n	800864a <__aeabi_fmul+0xe6>
 8008656:	ea41 010c 	orr.w	r1, r1, ip
 800865a:	e78f      	b.n	800857c <__aeabi_fmul+0x18>
 800865c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8008660:	ea92 0f0c 	teq	r2, ip
 8008664:	bf18      	it	ne
 8008666:	ea93 0f0c 	teqne	r3, ip
 800866a:	d00a      	beq.n	8008682 <__aeabi_fmul+0x11e>
 800866c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8008670:	bf18      	it	ne
 8008672:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8008676:	d1d8      	bne.n	800862a <__aeabi_fmul+0xc6>
 8008678:	ea80 0001 	eor.w	r0, r0, r1
 800867c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008680:	4770      	bx	lr
 8008682:	f090 0f00 	teq	r0, #0
 8008686:	bf17      	itett	ne
 8008688:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800868c:	4608      	moveq	r0, r1
 800868e:	f091 0f00 	teqne	r1, #0
 8008692:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8008696:	d014      	beq.n	80086c2 <__aeabi_fmul+0x15e>
 8008698:	ea92 0f0c 	teq	r2, ip
 800869c:	d101      	bne.n	80086a2 <__aeabi_fmul+0x13e>
 800869e:	0242      	lsls	r2, r0, #9
 80086a0:	d10f      	bne.n	80086c2 <__aeabi_fmul+0x15e>
 80086a2:	ea93 0f0c 	teq	r3, ip
 80086a6:	d103      	bne.n	80086b0 <__aeabi_fmul+0x14c>
 80086a8:	024b      	lsls	r3, r1, #9
 80086aa:	bf18      	it	ne
 80086ac:	4608      	movne	r0, r1
 80086ae:	d108      	bne.n	80086c2 <__aeabi_fmul+0x15e>
 80086b0:	ea80 0001 	eor.w	r0, r0, r1
 80086b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80086b8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80086bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80086c0:	4770      	bx	lr
 80086c2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80086c6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80086ca:	4770      	bx	lr

080086cc <__aeabi_fdiv>:
 80086cc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086d0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80086d4:	bf1e      	ittt	ne
 80086d6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80086da:	ea92 0f0c 	teqne	r2, ip
 80086de:	ea93 0f0c 	teqne	r3, ip
 80086e2:	d069      	beq.n	80087b8 <__aeabi_fdiv+0xec>
 80086e4:	eba2 0203 	sub.w	r2, r2, r3
 80086e8:	ea80 0c01 	eor.w	ip, r0, r1
 80086ec:	0249      	lsls	r1, r1, #9
 80086ee:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80086f2:	d037      	beq.n	8008764 <__aeabi_fdiv+0x98>
 80086f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80086f8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80086fc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8008700:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8008704:	428b      	cmp	r3, r1
 8008706:	bf38      	it	cc
 8008708:	005b      	lslcc	r3, r3, #1
 800870a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800870e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8008712:	428b      	cmp	r3, r1
 8008714:	bf24      	itt	cs
 8008716:	1a5b      	subcs	r3, r3, r1
 8008718:	ea40 000c 	orrcs.w	r0, r0, ip
 800871c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8008720:	bf24      	itt	cs
 8008722:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8008726:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800872a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800872e:	bf24      	itt	cs
 8008730:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8008734:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008738:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800873c:	bf24      	itt	cs
 800873e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8008742:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008746:	011b      	lsls	r3, r3, #4
 8008748:	bf18      	it	ne
 800874a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800874e:	d1e0      	bne.n	8008712 <__aeabi_fdiv+0x46>
 8008750:	2afd      	cmp	r2, #253	; 0xfd
 8008752:	f63f af50 	bhi.w	80085f6 <__aeabi_fmul+0x92>
 8008756:	428b      	cmp	r3, r1
 8008758:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800875c:	bf08      	it	eq
 800875e:	f020 0001 	biceq.w	r0, r0, #1
 8008762:	4770      	bx	lr
 8008764:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8008768:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800876c:	327f      	adds	r2, #127	; 0x7f
 800876e:	bfc2      	ittt	gt
 8008770:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8008774:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8008778:	4770      	bxgt	lr
 800877a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800877e:	f04f 0300 	mov.w	r3, #0
 8008782:	3a01      	subs	r2, #1
 8008784:	e737      	b.n	80085f6 <__aeabi_fmul+0x92>
 8008786:	f092 0f00 	teq	r2, #0
 800878a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800878e:	bf02      	ittt	eq
 8008790:	0040      	lsleq	r0, r0, #1
 8008792:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8008796:	3a01      	subeq	r2, #1
 8008798:	d0f9      	beq.n	800878e <__aeabi_fdiv+0xc2>
 800879a:	ea40 000c 	orr.w	r0, r0, ip
 800879e:	f093 0f00 	teq	r3, #0
 80087a2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80087a6:	bf02      	ittt	eq
 80087a8:	0049      	lsleq	r1, r1, #1
 80087aa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80087ae:	3b01      	subeq	r3, #1
 80087b0:	d0f9      	beq.n	80087a6 <__aeabi_fdiv+0xda>
 80087b2:	ea41 010c 	orr.w	r1, r1, ip
 80087b6:	e795      	b.n	80086e4 <__aeabi_fdiv+0x18>
 80087b8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80087bc:	ea92 0f0c 	teq	r2, ip
 80087c0:	d108      	bne.n	80087d4 <__aeabi_fdiv+0x108>
 80087c2:	0242      	lsls	r2, r0, #9
 80087c4:	f47f af7d 	bne.w	80086c2 <__aeabi_fmul+0x15e>
 80087c8:	ea93 0f0c 	teq	r3, ip
 80087cc:	f47f af70 	bne.w	80086b0 <__aeabi_fmul+0x14c>
 80087d0:	4608      	mov	r0, r1
 80087d2:	e776      	b.n	80086c2 <__aeabi_fmul+0x15e>
 80087d4:	ea93 0f0c 	teq	r3, ip
 80087d8:	d104      	bne.n	80087e4 <__aeabi_fdiv+0x118>
 80087da:	024b      	lsls	r3, r1, #9
 80087dc:	f43f af4c 	beq.w	8008678 <__aeabi_fmul+0x114>
 80087e0:	4608      	mov	r0, r1
 80087e2:	e76e      	b.n	80086c2 <__aeabi_fmul+0x15e>
 80087e4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80087e8:	bf18      	it	ne
 80087ea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80087ee:	d1ca      	bne.n	8008786 <__aeabi_fdiv+0xba>
 80087f0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80087f4:	f47f af5c 	bne.w	80086b0 <__aeabi_fmul+0x14c>
 80087f8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80087fc:	f47f af3c 	bne.w	8008678 <__aeabi_fmul+0x114>
 8008800:	e75f      	b.n	80086c2 <__aeabi_fmul+0x15e>
 8008802:	bf00      	nop

08008804 <__popcountsi2>:
 8008804:	0843      	lsrs	r3, r0, #1
 8008806:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 800880a:	1ac0      	subs	r0, r0, r3
 800880c:	0883      	lsrs	r3, r0, #2
 800880e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8008812:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8008816:	4418      	add	r0, r3
 8008818:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 800881c:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8008820:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8008824:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8008828:	0e00      	lsrs	r0, r0, #24
 800882a:	4770      	bx	lr

0800882c <Reset_Handler>:
 800882c:	480c      	ldr	r0, [pc, #48]	; (8008860 <Zerobss+0x10>)
 800882e:	4685      	mov	sp, r0
 8008830:	2100      	movs	r1, #0
 8008832:	e003      	b.n	800883c <DataInit>

08008834 <CopyData>:
 8008834:	4b0b      	ldr	r3, [pc, #44]	; (8008864 <Zerobss+0x14>)
 8008836:	585b      	ldr	r3, [r3, r1]
 8008838:	5043      	str	r3, [r0, r1]
 800883a:	3104      	adds	r1, #4

0800883c <DataInit>:
 800883c:	480a      	ldr	r0, [pc, #40]	; (8008868 <Zerobss+0x18>)
 800883e:	4b0b      	ldr	r3, [pc, #44]	; (800886c <Zerobss+0x1c>)
 8008840:	1842      	adds	r2, r0, r1
 8008842:	429a      	cmp	r2, r3
 8008844:	d3f6      	bcc.n	8008834 <CopyData>
 8008846:	4a0a      	ldr	r2, [pc, #40]	; (8008870 <Zerobss+0x20>)
 8008848:	e002      	b.n	8008850 <Zerobss>

0800884a <FillZerobss>:
 800884a:	2300      	movs	r3, #0
 800884c:	f842 3b04 	str.w	r3, [r2], #4

08008850 <Zerobss>:
 8008850:	4b08      	ldr	r3, [pc, #32]	; (8008874 <Zerobss+0x24>)
 8008852:	429a      	cmp	r2, r3
 8008854:	d3f9      	bcc.n	800884a <FillZerobss>
 8008856:	f00c f9d9 	bl	8014c0c <SystemInit>
 800885a:	f000 f9e5 	bl	8008c28 <main>
 800885e:	4770      	bx	lr
 8008860:	20018000 	andcs	r8, r1, r0
 8008864:	08018eb0 	stmdaeq	r1, {r4, r5, r7, r9, sl, fp, pc}
 8008868:	20000000 	andcs	r0, r0, r0
 800886c:	200000e4 	andcs	r0, r0, r4, ror #1
 8008870:	200000e8 	andcs	r0, r0, r8, ror #1
 8008874:	20015a54 	andcs	r5, r1, r4, asr sl

08008878 <ADC0_1_IRQHandler>:
 8008878:	e7fe      	b.n	8008878 <ADC0_1_IRQHandler>

0800887a <DisplayHandler::~DisplayHandler()>:
 800887a:	4770      	bx	lr

0800887c <DisplayUdfHandler::~DisplayUdfHandler()>:
 800887c:	4770      	bx	lr

0800887e <DisplayUdfHandler::ShowLongName(char const*)>:
 800887e:	4770      	bx	lr

08008880 <ArtNetTriggerHandler::~ArtNetTriggerHandler()>:
 8008880:	4770      	bx	lr

08008882 <PixelDmxStartStop::~PixelDmxStartStop()>:
 8008882:	4770      	bx	lr

08008884 <PixelDmxStartStop::Start()>:
 8008884:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008888:	4b01      	ldr	r3, [pc, #4]	; (8008890 <PixelDmxStartStop::Start()+0xc>)
 800888a:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 800888e:	4770      	bx	lr
 8008890:	40010000 	andmi	r0, r1, r0

08008894 <PixelDmxStartStop::Stop()>:
 8008894:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008898:	4b01      	ldr	r3, [pc, #4]	; (80088a0 <PixelDmxStartStop::Stop()+0xc>)
 800889a:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800889e:	4770      	bx	lr
 80088a0:	40010000 	andmi	r0, r1, r0

080088a4 <Reboot::~Reboot()>:
 80088a4:	4770      	bx	lr
	...

080088a8 <Reboot::Run()>:
 80088a8:	b508      	push	{r3, lr}
 80088aa:	4b05      	ldr	r3, [pc, #20]	; (80088c0 <Reboot::Run()+0x18>)
 80088ac:	6818      	ldr	r0, [r3, #0]
 80088ae:	f001 f8c7 	bl	8009a40 <ArtNetNode::Stop()>
 80088b2:	4b04      	ldr	r3, [pc, #16]	; (80088c4 <Reboot::Run()+0x1c>)
 80088b4:	6818      	ldr	r0, [r3, #0]
 80088b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80088ba:	f006 ba3b 	b.w	800ed34 <WS28xx::Blackout()>
 80088be:	bf00      	nop
 80088c0:	20001900 	andcs	r1, r0, r0, lsl #18
 80088c4:	20001958 	andcs	r1, r0, r8, asr r9

080088c8 <Reboot::~Reboot()>:
 80088c8:	b510      	push	{r4, lr}
 80088ca:	4604      	mov	r4, r0
 80088cc:	f00b ff46 	bl	801475c <operator delete(void*)>
 80088d0:	4620      	mov	r0, r4
 80088d2:	bd10      	pop	{r4, pc}

080088d4 <DisplayHandler::~DisplayHandler()>:
 80088d4:	b510      	push	{r4, lr}
 80088d6:	4604      	mov	r4, r0
 80088d8:	f00b ff40 	bl	801475c <operator delete(void*)>
 80088dc:	4620      	mov	r0, r4
 80088de:	bd10      	pop	{r4, pc}

080088e0 <DisplayUdfHandler::~DisplayUdfHandler()>:
 80088e0:	b510      	push	{r4, lr}
 80088e2:	4604      	mov	r4, r0
 80088e4:	f00b ff3a 	bl	801475c <operator delete(void*)>
 80088e8:	4620      	mov	r0, r4
 80088ea:	bd10      	pop	{r4, pc}

080088ec <ArtNetTriggerHandler::~ArtNetTriggerHandler()>:
 80088ec:	b510      	push	{r4, lr}
 80088ee:	4604      	mov	r4, r0
 80088f0:	f00b ff34 	bl	801475c <operator delete(void*)>
 80088f4:	4620      	mov	r0, r4
 80088f6:	bd10      	pop	{r4, pc}

080088f8 <PixelDmxStartStop::~PixelDmxStartStop()>:
 80088f8:	b510      	push	{r4, lr}
 80088fa:	4604      	mov	r4, r0
 80088fc:	f00b ff2e 	bl	801475c <operator delete(void*)>
 8008900:	4620      	mov	r0, r4
 8008902:	bd10      	pop	{r4, pc}

08008904 <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)>:
 8008904:	4b02      	ldr	r3, [pc, #8]	; (8008910 <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)+0xc>)
 8008906:	6819      	ldr	r1, [r3, #0]
 8008908:	4b02      	ldr	r3, [pc, #8]	; (8008914 <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)+0x10>)
 800890a:	6818      	ldr	r0, [r3, #0]
 800890c:	f00a beba 	b.w	8013684 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8008910:	20001900 	andcs	r1, r0, r0, lsl #18
 8008914:	2000a8cc 	andcs	sl, r0, ip, asr #17

08008918 <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)>:
 8008918:	4b02      	ldr	r3, [pc, #8]	; (8008924 <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)+0xc>)
 800891a:	6819      	ldr	r1, [r3, #0]
 800891c:	4b02      	ldr	r3, [pc, #8]	; (8008928 <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)+0x10>)
 800891e:	6818      	ldr	r0, [r3, #0]
 8008920:	f00a beb0 	b.w	8013684 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8008924:	20001900 	andcs	r1, r0, r0, lsl #18
 8008928:	2000a8cc 	andcs	sl, r0, ip, asr #17

0800892c <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)>:
 800892c:	4b02      	ldr	r3, [pc, #8]	; (8008938 <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)+0xc>)
 800892e:	6819      	ldr	r1, [r3, #0]
 8008930:	4b02      	ldr	r3, [pc, #8]	; (800893c <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)+0x10>)
 8008932:	6818      	ldr	r0, [r3, #0]
 8008934:	f00a bea6 	b.w	8013684 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8008938:	20001900 	andcs	r1, r0, r0, lsl #18
 800893c:	2000a8cc 	andcs	sl, r0, ip, asr #17

08008940 <DisplayUdfHandler::ShowNetSwitch(unsigned char)>:
 8008940:	4b02      	ldr	r3, [pc, #8]	; (800894c <DisplayUdfHandler::ShowNetSwitch(unsigned char)+0xc>)
 8008942:	6819      	ldr	r1, [r3, #0]
 8008944:	4b02      	ldr	r3, [pc, #8]	; (8008950 <DisplayUdfHandler::ShowNetSwitch(unsigned char)+0x10>)
 8008946:	6818      	ldr	r0, [r3, #0]
 8008948:	f00a be9c 	b.w	8013684 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 800894c:	20001900 	andcs	r1, r0, r0, lsl #18
 8008950:	2000a8cc 	andcs	sl, r0, ip, asr #17

08008954 <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)>:
 8008954:	4b02      	ldr	r3, [pc, #8]	; (8008960 <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)+0xc>)
 8008956:	6819      	ldr	r1, [r3, #0]
 8008958:	4b02      	ldr	r3, [pc, #8]	; (8008964 <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)+0x10>)
 800895a:	6818      	ldr	r0, [r3, #0]
 800895c:	f00a be92 	b.w	8013684 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8008960:	20001900 	andcs	r1, r0, r0, lsl #18
 8008964:	2000a8cc 	andcs	sl, r0, ip, asr #17

08008968 <DisplayUdfHandler::ShowShortName(char const*)>:
 8008968:	4b02      	ldr	r3, [pc, #8]	; (8008974 <DisplayUdfHandler::ShowShortName(char const*)+0xc>)
 800896a:	6819      	ldr	r1, [r3, #0]
 800896c:	4b02      	ldr	r3, [pc, #8]	; (8008978 <DisplayUdfHandler::ShowShortName(char const*)+0x10>)
 800896e:	6818      	ldr	r0, [r3, #0]
 8008970:	f00a be65 	b.w	801363e <DisplayUdf::ShowNodeName(ArtNetNode*)>
 8008974:	20001900 	andcs	r1, r0, r0, lsl #18
 8008978:	2000a8cc 	andcs	sl, r0, ip, asr #17

0800897c <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>:
 800897c:	b110      	cbz	r0, 8008984 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]+0x8>
 800897e:	6803      	ldr	r3, [r0, #0]
 8008980:	6a1b      	ldr	r3, [r3, #32]
 8008982:	4718      	bx	r3
 8008984:	4770      	bx	lr

08008986 <Display::PutChar(int) [clone .isra.0]>:
 8008986:	b110      	cbz	r0, 800898e <Display::PutChar(int) [clone .isra.0]+0x8>
 8008988:	6803      	ldr	r3, [r0, #0]
 800898a:	695b      	ldr	r3, [r3, #20]
 800898c:	4718      	bx	r3
 800898e:	4770      	bx	lr

08008990 <DisplayHandler::Print(unsigned int)>:
 8008990:	b538      	push	{r3, r4, r5, lr}
 8008992:	7903      	ldrb	r3, [r0, #4]
 8008994:	b1f3      	cbz	r3, 80089d4 <DisplayHandler::Print(unsigned int)+0x44>
 8008996:	2904      	cmp	r1, #4
 8008998:	bf98      	it	ls
 800899a:	4b0f      	ldrls	r3, [pc, #60]	; (80089d8 <DisplayHandler::Print(unsigned int)+0x48>)
 800899c:	4d0f      	ldr	r5, [pc, #60]	; (80089dc <DisplayHandler::Print(unsigned int)+0x4c>)
 800899e:	bf98      	it	ls
 80089a0:	5c5c      	ldrbls	r4, [r3, r1]
 80089a2:	682b      	ldr	r3, [r5, #0]
 80089a4:	bf88      	it	hi
 80089a6:	2455      	movhi	r4, #85	; 0x55
 80089a8:	6998      	ldr	r0, [r3, #24]
 80089aa:	b178      	cbz	r0, 80089cc <DisplayHandler::Print(unsigned int)+0x3c>
 80089ac:	7901      	ldrb	r1, [r0, #4]
 80089ae:	3901      	subs	r1, #1
 80089b0:	b2c9      	uxtb	r1, r1
 80089b2:	b168      	cbz	r0, 80089d0 <DisplayHandler::Print(unsigned int)+0x40>
 80089b4:	7942      	ldrb	r2, [r0, #5]
 80089b6:	3a01      	subs	r2, #1
 80089b8:	b2d2      	uxtb	r2, r2
 80089ba:	f7ff ffdf 	bl	800897c <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 80089be:	682b      	ldr	r3, [r5, #0]
 80089c0:	4621      	mov	r1, r4
 80089c2:	6998      	ldr	r0, [r3, #24]
 80089c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089c8:	f7ff bfdd 	b.w	8008986 <Display::PutChar(int) [clone .isra.0]>
 80089cc:	4601      	mov	r1, r0
 80089ce:	e7ee      	b.n	80089ae <DisplayHandler::Print(unsigned int)+0x1e>
 80089d0:	4602      	mov	r2, r0
 80089d2:	e7f0      	b.n	80089b6 <DisplayHandler::Print(unsigned int)+0x26>
 80089d4:	bd38      	pop	{r3, r4, r5, pc}
 80089d6:	bf00      	nop
 80089d8:	08016b88 	stmdaeq	r1, {r3, r7, r8, r9, fp, sp, lr}
 80089dc:	2000a8d4 	ldrdcs	sl, [r0], -r4

080089e0 <Display::SetSleep(bool)>:
 80089e0:	b538      	push	{r3, r4, r5, lr}
 80089e2:	4604      	mov	r4, r0
 80089e4:	6980      	ldr	r0, [r0, #24]
 80089e6:	460d      	mov	r5, r1
 80089e8:	b138      	cbz	r0, 80089fa <Display::SetSleep(bool)+0x1a>
 80089ea:	6803      	ldr	r3, [r0, #0]
 80089ec:	7421      	strb	r1, [r4, #16]
 80089ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f0:	4798      	blx	r3
 80089f2:	b915      	cbnz	r5, 80089fa <Display::SetSleep(bool)+0x1a>
 80089f4:	4b01      	ldr	r3, [pc, #4]	; (80089fc <Display::SetSleep(bool)+0x1c>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	6063      	str	r3, [r4, #4]
 80089fa:	bd38      	pop	{r3, r4, r5, pc}
 80089fc:	2000a9dc 	ldrdcs	sl, [r0], -ip

08008a00 <Display::ClearLine(unsigned char)>:
 8008a00:	6980      	ldr	r0, [r0, #24]
 8008a02:	b110      	cbz	r0, 8008a0a <Display::ClearLine(unsigned char)+0xa>
 8008a04:	6803      	ldr	r3, [r0, #0]
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	4718      	bx	r3
 8008a0a:	4770      	bx	lr

08008a0c <Display::Printf(unsigned char, char const*, ...)>:
 8008a0c:	b40c      	push	{r2, r3}
 8008a0e:	b570      	push	{r4, r5, r6, lr}
 8008a10:	6984      	ldr	r4, [r0, #24]
 8008a12:	4605      	mov	r5, r0
 8008a14:	460e      	mov	r6, r1
 8008a16:	b08a      	sub	sp, #40	; 0x28
 8008a18:	b174      	cbz	r4, 8008a38 <Display::Printf(unsigned char, char const*, ...)+0x2c>
 8008a1a:	ab0f      	add	r3, sp, #60	; 0x3c
 8008a1c:	2120      	movs	r1, #32
 8008a1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a20:	a802      	add	r0, sp, #8
 8008a22:	9301      	str	r3, [sp, #4]
 8008a24:	f000 fe62 	bl	80096ec <vsnprintf>
 8008a28:	4604      	mov	r4, r0
 8008a2a:	69a8      	ldr	r0, [r5, #24]
 8008a2c:	4631      	mov	r1, r6
 8008a2e:	6803      	ldr	r3, [r0, #0]
 8008a30:	aa02      	add	r2, sp, #8
 8008a32:	69dd      	ldr	r5, [r3, #28]
 8008a34:	b2a3      	uxth	r3, r4
 8008a36:	47a8      	blx	r5
 8008a38:	4620      	mov	r0, r4
 8008a3a:	b00a      	add	sp, #40	; 0x28
 8008a3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008a40:	b002      	add	sp, #8
 8008a42:	4770      	bx	lr

08008a44 <Display::TextStatus(char const*)>:
 8008a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a48:	4604      	mov	r4, r0
 8008a4a:	6980      	ldr	r0, [r0, #24]
 8008a4c:	460d      	mov	r5, r1
 8008a4e:	b360      	cbz	r0, 8008aaa <Display::TextStatus(char const*)+0x66>
 8008a50:	7947      	ldrb	r7, [r0, #5]
 8008a52:	2100      	movs	r1, #0
 8008a54:	1e7e      	subs	r6, r7, #1
 8008a56:	b2f6      	uxtb	r6, r6
 8008a58:	4632      	mov	r2, r6
 8008a5a:	f890 9004 	ldrb.w	r9, [r0, #4]
 8008a5e:	f04f 0800 	mov.w	r8, #0
 8008a62:	f7ff ff8b 	bl	800897c <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 8008a66:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008a6a:	45c1      	cmp	r9, r8
 8008a6c:	69a0      	ldr	r0, [r4, #24]
 8008a6e:	d905      	bls.n	8008a7c <Display::TextStatus(char const*)+0x38>
 8008a70:	2120      	movs	r1, #32
 8008a72:	f7ff ff88 	bl	8008986 <Display::PutChar(int) [clone .isra.0]>
 8008a76:	f108 0801 	add.w	r8, r8, #1
 8008a7a:	e7f6      	b.n	8008a6a <Display::TextStatus(char const*)+0x26>
 8008a7c:	4632      	mov	r2, r6
 8008a7e:	2100      	movs	r1, #0
 8008a80:	f7ff ff7c 	bl	800897c <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 8008a84:	69a0      	ldr	r0, [r4, #24]
 8008a86:	b180      	cbz	r0, 8008aaa <Display::TextStatus(char const*)+0x66>
 8008a88:	2300      	movs	r3, #0
 8008a8a:	7901      	ldrb	r1, [r0, #4]
 8008a8c:	5cea      	ldrb	r2, [r5, r3]
 8008a8e:	b11a      	cbz	r2, 8008a98 <Display::TextStatus(char const*)+0x54>
 8008a90:	1c5a      	adds	r2, r3, #1
 8008a92:	4299      	cmp	r1, r3
 8008a94:	4613      	mov	r3, r2
 8008a96:	dcf9      	bgt.n	8008a8c <Display::TextStatus(char const*)+0x48>
 8008a98:	6802      	ldr	r2, [r0, #0]
 8008a9a:	4639      	mov	r1, r7
 8008a9c:	69d4      	ldr	r4, [r2, #28]
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	462a      	mov	r2, r5
 8008aa2:	46a4      	mov	ip, r4
 8008aa4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aa8:	4760      	bx	ip
 8008aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008aae <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>:
 8008aae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ab0:	4605      	mov	r5, r0
 8008ab2:	461e      	mov	r6, r3
 8008ab4:	460f      	mov	r7, r1
 8008ab6:	4614      	mov	r4, r2
 8008ab8:	f7ff ffc4 	bl	8008a44 <Display::TextStatus(char const*)>
 8008abc:	7c6b      	ldrb	r3, [r5, #17]
 8008abe:	b19b      	cbz	r3, 8008ae8 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x3a>
 8008ac0:	43e2      	mvns	r2, r4
 8008ac2:	2312      	movs	r3, #18
 8008ac4:	7a28      	ldrb	r0, [r5, #8]
 8008ac6:	f88d 3004 	strb.w	r3, [sp, #4]
 8008aca:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8008ace:	f88d 3005 	strb.w	r3, [sp, #5]
 8008ad2:	f88d 2006 	strb.w	r2, [sp, #6]
 8008ad6:	f00c fe85 	bl	80157e4 <gd32_i2c_set_address(unsigned char)>
 8008ada:	68e8      	ldr	r0, [r5, #12]
 8008adc:	f00c fe7a 	bl	80157d4 <gd32_i2c_set_baudrate(unsigned int)>
 8008ae0:	2103      	movs	r1, #3
 8008ae2:	a801      	add	r0, sp, #4
 8008ae4:	f00c fe84 	bl	80157f0 <gd32_i2c_write(char const*, unsigned int)>
 8008ae8:	1c73      	adds	r3, r6, #1
 8008aea:	d006      	beq.n	8008afa <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x4c>
 8008aec:	4639      	mov	r1, r7
 8008aee:	4630      	mov	r0, r6
 8008af0:	b003      	add	sp, #12
 8008af2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8008af6:	f00b bccd 	b.w	8014494 <console_status>
 8008afa:	b003      	add	sp, #12
 8008afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008b00 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>:
 8008b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b02:	2905      	cmp	r1, #5
 8008b04:	b085      	sub	sp, #20
 8008b06:	dc46      	bgt.n	8008b96 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x96>
 8008b08:	4b24      	ldr	r3, [pc, #144]	; (8008b9c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x9c>)
 8008b0a:	6019      	str	r1, [r3, #0]
 8008b0c:	2905      	cmp	r1, #5
 8008b0e:	d809      	bhi.n	8008b24 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8008b10:	e8df f001 	tbb	[pc, r1]
 8008b14:	130a032c 	movwne	r0, #41772	; 0xa32c
 8008b18:	2300211a 	movwcs	r2, #282	; 0x11a
 8008b1c:	2264      	movs	r2, #100	; 0x64
 8008b1e:	4619      	mov	r1, r3
 8008b20:	f004 ff50 	bl	800d9c4 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 8008b24:	2001      	movs	r0, #1
 8008b26:	e037      	b.n	8008b98 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x98>
 8008b28:	2200      	movs	r2, #0
 8008b2a:	2364      	movs	r3, #100	; 0x64
 8008b2c:	4611      	mov	r1, r2
 8008b2e:	e9cd 3200 	strd	r3, r2, [sp]
 8008b32:	4b1b      	ldr	r3, [pc, #108]	; (8008ba0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa0>)
 8008b34:	f004 ff5a 	bl	800d9ec <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8008b38:	e7f4      	b.n	8008b24 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	2364      	movs	r3, #100	; 0x64
 8008b3e:	4a18      	ldr	r2, [pc, #96]	; (8008ba0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa0>)
 8008b40:	9100      	str	r1, [sp, #0]
 8008b42:	f004 ff6f 	bl	800da24 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8008b46:	e7ed      	b.n	8008b24 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8008b48:	2364      	movs	r3, #100	; 0x64
 8008b4a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8008b4e:	2100      	movs	r1, #0
 8008b50:	f004 ff82 	bl	800da58 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 8008b54:	e7e6      	b.n	8008b24 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8008b56:	2200      	movs	r2, #0
 8008b58:	2364      	movs	r3, #100	; 0x64
 8008b5a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008b5e:	230a      	movs	r3, #10
 8008b60:	4611      	mov	r1, r2
 8008b62:	9300      	str	r3, [sp, #0]
 8008b64:	4b0e      	ldr	r3, [pc, #56]	; (8008ba0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa0>)
 8008b66:	f004 ffa9 	bl	800dabc <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8008b6a:	e7db      	b.n	8008b24 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8008b6c:	2400      	movs	r4, #0
 8008b6e:	4625      	mov	r5, r4
 8008b70:	4b0c      	ldr	r3, [pc, #48]	; (8008ba4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa4>)
 8008b72:	4e0d      	ldr	r6, [pc, #52]	; (8008ba8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa8>)
 8008b74:	4f0d      	ldr	r7, [pc, #52]	; (8008bac <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xac>)
 8008b76:	61dc      	str	r4, [r3, #28]
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	6830      	ldr	r0, [r6, #0]
 8008b7c:	42a3      	cmp	r3, r4
 8008b7e:	d907      	bls.n	8008b90 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x90>
 8008b80:	2300      	movs	r3, #0
 8008b82:	4621      	mov	r1, r4
 8008b84:	461a      	mov	r2, r3
 8008b86:	9500      	str	r5, [sp, #0]
 8008b88:	f005 fa78 	bl	800e07c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8008b8c:	3401      	adds	r4, #1
 8008b8e:	e7f3      	b.n	8008b78 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x78>
 8008b90:	f006 f8b4 	bl	800ecfc <WS28xx::Update()>
 8008b94:	e7c6      	b.n	8008b24 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8008b96:	2000      	movs	r0, #0
 8008b98:	b005      	add	sp, #20
 8008b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b9c:	20001950 	andcs	r1, r0, r0, asr r9
 8008ba0:	00646464 	rsbeq	r6, r4, r4, ror #8
 8008ba4:	2000191c 	andcs	r1, r0, ip, lsl r9
 8008ba8:	20001948 	andcs	r1, r0, r8, asr #18
 8008bac:	20001944 	andcs	r1, r0, r4, asr #18

08008bb0 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)>:
 8008bb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bb2:	780b      	ldrb	r3, [r1, #0]
 8008bb4:	4605      	mov	r5, r0
 8008bb6:	2b03      	cmp	r3, #3
 8008bb8:	d11f      	bne.n	8008bfa <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4a>
 8008bba:	4b15      	ldr	r3, [pc, #84]	; (8008c10 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x60>)
 8008bbc:	784c      	ldrb	r4, [r1, #1]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	429c      	cmp	r4, r3
 8008bc2:	d01a      	beq.n	8008bfa <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4a>
 8008bc4:	4b13      	ldr	r3, [pc, #76]	; (8008c14 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x64>)
 8008bc6:	4621      	mov	r1, r4
 8008bc8:	6818      	ldr	r0, [r3, #0]
 8008bca:	f7ff ff99 	bl	8008b00 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 8008bce:	b1a0      	cbz	r0, 8008bfa <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4a>
 8008bd0:	4b11      	ldr	r3, [pc, #68]	; (8008c18 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x68>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	b19c      	cbz	r4, 8008bfe <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4e>
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	4d10      	ldr	r5, [pc, #64]	; (8008c1c <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x6c>)
 8008bda:	609a      	str	r2, [r3, #8]
 8008bdc:	2106      	movs	r1, #6
 8008bde:	6828      	ldr	r0, [r5, #0]
 8008be0:	f7ff ff0e 	bl	8008a00 <Display::ClearLine(unsigned char)>
 8008be4:	4620      	mov	r0, r4
 8008be6:	682d      	ldr	r5, [r5, #0]
 8008be8:	f004 fee0 	bl	800d9ac <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8008bec:	2106      	movs	r1, #6
 8008bee:	4603      	mov	r3, r0
 8008bf0:	4a0b      	ldr	r2, [pc, #44]	; (8008c20 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x70>)
 8008bf2:	4628      	mov	r0, r5
 8008bf4:	9400      	str	r4, [sp, #0]
 8008bf6:	f7ff ff09 	bl	8008a0c <Display::Printf(unsigned char, char const*, ...)>
 8008bfa:	b003      	add	sp, #12
 8008bfc:	bd30      	pop	{r4, r5, pc}
 8008bfe:	686a      	ldr	r2, [r5, #4]
 8008c00:	609a      	str	r2, [r3, #8]
 8008c02:	4b08      	ldr	r3, [pc, #32]	; (8008c24 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x74>)
 8008c04:	6818      	ldr	r0, [r3, #0]
 8008c06:	b003      	add	sp, #12
 8008c08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c0c:	f00a bab2 	b.w	8013174 <DisplayUdf::Show()>
 8008c10:	20001950 	andcs	r1, r0, r0, asr r9
 8008c14:	2000194c 	andcs	r1, r0, ip, asr #18
 8008c18:	20001900 	andcs	r1, r0, r0, lsl #18
 8008c1c:	2000a8d4 	ldrdcs	sl, [r0], -r4
 8008c20:	08016a6d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r9, fp, sp, lr}
 8008c24:	2000a8cc 	andcs	sl, r0, ip, asr #17

08008c28 <main>:
 8008c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c2c:	2601      	movs	r6, #1
 8008c2e:	f5ad 5db7 	sub.w	sp, sp, #5856	; 0x16e0
 8008c32:	b085      	sub	sp, #20
 8008c34:	ac14      	add	r4, sp, #80	; 0x50
 8008c36:	f1a4 0018 	sub.w	r0, r4, #24
 8008c3a:	f00b fcdf 	bl	80145fc <Hardware::Hardware()>
 8008c3e:	a88c      	add	r0, sp, #560	; 0x230
 8008c40:	f009 f918 	bl	8011e74 <Network::Network()>
 8008c44:	a816      	add	r0, sp, #88	; 0x58
 8008c46:	f00b fc83 	bl	8014550 <LedBlink::LedBlink()>
 8008c4a:	a853      	add	r0, sp, #332	; 0x14c
 8008c4c:	f00a f9d2 	bl	8012ff4 <DisplayUdf::DisplayUdf()>
 8008c50:	4a6f      	ldr	r2, [pc, #444]	; (8008e10 <main+0x1e8>)
 8008c52:	4b70      	ldr	r3, [pc, #448]	; (8008e14 <main+0x1ec>)
 8008c54:	4970      	ldr	r1, [pc, #448]	; (8008e18 <main+0x1f0>)
 8008c56:	a806      	add	r0, sp, #24
 8008c58:	f00b fc34 	bl	80144c4 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
 8008c5c:	a807      	add	r0, sp, #28
 8008c5e:	f007 ffcd 	bl	8010bfc <FlashRom::FlashRom()>
 8008c62:	4f6e      	ldr	r7, [pc, #440]	; (8008e1c <main+0x1f4>)
 8008c64:	a808      	add	r0, sp, #32
 8008c66:	f007 fbc3 	bl	80103f0 <SpiFlashStore::SpiFlashStore()>
 8008c6a:	496d      	ldr	r1, [pc, #436]	; (8008e20 <main+0x1f8>)
 8008c6c:	a806      	add	r0, sp, #24
 8008c6e:	f00b fc61 	bl	8014534 <FirmwareVersion::Print(char const*)>
 8008c72:	2004      	movs	r0, #4
 8008c74:	613e      	str	r6, [r7, #16]
 8008c76:	f00b fd75 	bl	8014764 <operator new(unsigned int)>
 8008c7a:	4b6a      	ldr	r3, [pc, #424]	; (8008e24 <main+0x1fc>)
 8008c7c:	2500      	movs	r5, #0
 8008c7e:	6003      	str	r3, [r0, #0]
 8008c80:	900e      	str	r0, [sp, #56]	; 0x38
 8008c82:	2008      	movs	r0, #8
 8008c84:	ab0e      	add	r3, sp, #56	; 0x38
 8008c86:	f00b fd6d 	bl	8014764 <operator new(unsigned int)>
 8008c8a:	4b67      	ldr	r3, [pc, #412]	; (8008e28 <main+0x200>)
 8008c8c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008c90:	6003      	str	r3, [r0, #0]
 8008c92:	4b66      	ldr	r3, [pc, #408]	; (8008e2c <main+0x204>)
 8008c94:	4966      	ldr	r1, [pc, #408]	; (8008e30 <main+0x208>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	3b00      	subs	r3, #0
 8008c9a:	bf18      	it	ne
 8008c9c:	2301      	movne	r3, #1
 8008c9e:	7103      	strb	r3, [r0, #4]
 8008ca0:	9018      	str	r0, [sp, #96]	; 0x60
 8008ca2:	ab16      	add	r3, sp, #88	; 0x58
 8008ca4:	a853      	add	r0, sp, #332	; 0x14c
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	f7ff ff01 	bl	8008aae <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008cac:	a810      	add	r0, sp, #64	; 0x40
 8008cae:	f007 fe87 	bl	80109c0 <StoreNetwork::StoreNetwork()>
 8008cb2:	f1a4 030c 	sub.w	r3, r4, #12
 8008cb6:	a910      	add	r1, sp, #64	; 0x40
 8008cb8:	a88c      	add	r0, sp, #560	; 0x230
 8008cba:	93b9      	str	r3, [sp, #740]	; 0x2e4
 8008cbc:	f009 f932 	bl	8011f24 <Network::Init(NetworkParamsStore*)>
 8008cc0:	a88c      	add	r0, sp, #560	; 0x230
 8008cc2:	f009 fb05 	bl	80122d0 <Network::Print()>
 8008cc6:	a809      	add	r0, sp, #36	; 0x24
 8008cc8:	f008 fd0e 	bl	80116e8 <MDNS::MDNS()>
 8008ccc:	a809      	add	r0, sp, #36	; 0x24
 8008cce:	f008 fdcf 	bl	8011870 <MDNS::Start()>
 8008cd2:	f642 1305 	movw	r3, #10501	; 0x2905
 8008cd6:	4629      	mov	r1, r5
 8008cd8:	4a56      	ldr	r2, [pc, #344]	; (8008e34 <main+0x20c>)
 8008cda:	e9cd 5500 	strd	r5, r5, [sp]
 8008cde:	a809      	add	r0, sp, #36	; 0x24
 8008ce0:	f008 ff32 	bl	8011b48 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 8008ce4:	4b54      	ldr	r3, [pc, #336]	; (8008e38 <main+0x210>)
 8008ce6:	4629      	mov	r1, r5
 8008ce8:	4a54      	ldr	r2, [pc, #336]	; (8008e3c <main+0x214>)
 8008cea:	e9cd 6300 	strd	r6, r3, [sp]
 8008cee:	a809      	add	r0, sp, #36	; 0x24
 8008cf0:	2350      	movs	r3, #80	; 0x50
 8008cf2:	f008 ff29 	bl	8011b48 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 8008cf6:	a809      	add	r0, sp, #36	; 0x24
 8008cf8:	f009 f86c 	bl	8011dd4 <MDNS::Print()>
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	f44f 42cc 	mov.w	r2, #26112	; 0x6600
 8008d02:	494f      	ldr	r1, [pc, #316]	; (8008e40 <main+0x218>)
 8008d04:	a853      	add	r0, sp, #332	; 0x14c
 8008d06:	f7ff fed2 	bl	8008aae <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008d0a:	a812      	add	r0, sp, #72	; 0x48
 8008d0c:	f007 fd74 	bl	80107f8 <StoreArtNet::StoreArtNet()>
 8008d10:	a912      	add	r1, sp, #72	; 0x48
 8008d12:	a869      	add	r0, sp, #420	; 0x1a4
 8008d14:	f002 fbae 	bl	800b474 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 8008d18:	4631      	mov	r1, r6
 8008d1a:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
 8008d1e:	f000 fdc3 	bl	80098a8 <ArtNet4Node::ArtNet4Node(unsigned char)>
 8008d22:	a869      	add	r0, sp, #420	; 0x1a4
 8008d24:	f002 fbca 	bl	800b4bc <ArtNetParams::Load()>
 8008d28:	b138      	cbz	r0, 8008d3a <main+0x112>
 8008d2a:	a869      	add	r0, sp, #420	; 0x1a4
 8008d2c:	f60d 01ec 	addw	r1, sp, #2284	; 0x8ec
 8008d30:	f002 ff7b 	bl	800bc2a <ArtNetParams::Set(ArtNetNode*)>
 8008d34:	a869      	add	r0, sp, #420	; 0x1a4
 8008d36:	f002 fffa 	bl	800bd2e <ArtNetParams::Dump()>
 8008d3a:	4a42      	ldr	r2, [pc, #264]	; (8008e44 <main+0x21c>)
 8008d3c:	ab0b      	add	r3, sp, #44	; 0x2c
 8008d3e:	601a      	str	r2, [r3, #0]
 8008d40:	4e41      	ldr	r6, [pc, #260]	; (8008e48 <main+0x220>)
 8008d42:	ab0b      	add	r3, sp, #44	; 0x2c
 8008d44:	f8cd 3910 	str.w	r3, [sp, #2320]	; 0x910
 8008d48:	ad1c      	add	r5, sp, #112	; 0x70
 8008d4a:	1f23      	subs	r3, r4, #4
 8008d4c:	f8cd 390c 	str.w	r3, [sp, #2316]	; 0x90c
 8008d50:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008d52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008d54:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8008d58:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8008d5c:	2008      	movs	r0, #8
 8008d5e:	f00b fd01 	bl	8014764 <operator new(unsigned int)>
 8008d62:	4605      	mov	r5, r0
 8008d64:	f007 ff3e 	bl	8010be4 <StoreWS28xxDmx::StoreWS28xxDmx()>
 8008d68:	4629      	mov	r1, r5
 8008d6a:	a837      	add	r0, sp, #220	; 0xdc
 8008d6c:	f004 f9f2 	bl	800d154 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>
 8008d70:	a837      	add	r0, sp, #220	; 0xdc
 8008d72:	f004 fa2b 	bl	800d1cc <WS28xxDmxParams::Load()>
 8008d76:	b130      	cbz	r0, 8008d86 <main+0x15e>
 8008d78:	a837      	add	r0, sp, #220	; 0xdc
 8008d7a:	a91c      	add	r1, sp, #112	; 0x70
 8008d7c:	f004 fca3 	bl	800d6c6 <WS28xxDmxParams::Set(PixelDmxConfiguration*)>
 8008d80:	a837      	add	r0, sp, #220	; 0xdc
 8008d82:	f004 fcd6 	bl	800d732 <WS28xxDmxParams::Dump()>
 8008d86:	f50d 7884 	add.w	r8, sp, #264	; 0x108
 8008d8a:	a91c      	add	r1, sp, #112	; 0x70
 8008d8c:	4640      	mov	r0, r8
 8008d8e:	f004 f8e7 	bl	800cf60 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>
 8008d92:	2004      	movs	r0, #4
 8008d94:	f00b fce6 	bl	8014764 <operator new(unsigned int)>
 8008d98:	4b2c      	ldr	r3, [pc, #176]	; (8008e4c <main+0x224>)
 8008d9a:	4605      	mov	r5, r0
 8008d9c:	6003      	str	r3, [r0, #0]
 8008d9e:	2203      	movs	r2, #3
 8008da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008da4:	2110      	movs	r1, #16
 8008da6:	482a      	ldr	r0, [pc, #168]	; (8008e50 <main+0x228>)
 8008da8:	f00c f86c 	bl	8014e84 <gpio_init>
 8008dac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008db0:	2601      	movs	r6, #1
 8008db2:	4b28      	ldr	r3, [pc, #160]	; (8008e54 <main+0x22c>)
 8008db4:	2101      	movs	r1, #1
 8008db6:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8008dba:	f50d 63de 	add.w	r3, sp, #1776	; 0x6f0
 8008dbe:	f2a3 6a14 	subw	sl, r3, #1556	; 0x614
 8008dc2:	f8c8 503c 	str.w	r5, [r8, #60]	; 0x3c
 8008dc6:	f89a 502a 	ldrb.w	r5, [sl, #42]	; 0x2a
 8008dca:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008e58 <main+0x230>
 8008dce:	a80a      	add	r0, sp, #40	; 0x28
 8008dd0:	f004 fdcc 	bl	800d96c <PixelPatterns::PixelPatterns(unsigned int)>
 8008dd4:	4629      	mov	r1, r5
 8008dd6:	a80a      	add	r0, sp, #40	; 0x28
 8008dd8:	f8c9 5000 	str.w	r5, [r9]
 8008ddc:	f7ff fe90 	bl	8008b00 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 8008de0:	f8ba a01a 	ldrh.w	sl, [sl, #26]
 8008de4:	2201      	movs	r2, #1
 8008de6:	4653      	mov	r3, sl
 8008de8:	2100      	movs	r1, #0
 8008dea:	f60d 00ec 	addw	r0, sp, #2284	; 0x8ec
 8008dee:	f001 f9a7 	bl	800a140 <ArtNetNode::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 8008df2:	f8d8 b01c 	ldr.w	fp, [r8, #28]
 8008df6:	455e      	cmp	r6, fp
 8008df8:	d230      	bcs.n	8008e5c <main+0x234>
 8008dfa:	eb0a 0306 	add.w	r3, sl, r6
 8008dfe:	4631      	mov	r1, r6
 8008e00:	2201      	movs	r2, #1
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	f60d 00ec 	addw	r0, sp, #2284	; 0x8ec
 8008e08:	f001 f99a 	bl	800a140 <ArtNetNode::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 8008e0c:	3601      	adds	r6, #1
 8008e0e:	e7f2      	b.n	8008df6 <main+0x1ce>
 8008e10:	08016a7c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r9, fp, sp, lr}
 8008e14:	08016a73 	stmdaeq	r1, {r0, r1, r4, r5, r6, r9, fp, sp, lr}
 8008e18:	08016b8d 	stmdaeq	r1, {r0, r2, r3, r7, r8, r9, fp, sp, lr}
 8008e1c:	40011000 	andmi	r1, r1, r0
 8008e20:	08016a88 	stmdaeq	r1, {r3, r7, r9, fp, sp, lr}
 8008e24:	08016b7c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, r9, fp, sp, lr}
 8008e28:	08016b10 	stmdaeq	r1, {r4, r8, r9, fp, sp, lr}
 8008e2c:	2000a8d4 	ldrdcs	sl, [r0], -r4
 8008e30:	080184ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, sl, pc}
 8008e34:	08016ac3 	stmdaeq	r1, {r0, r1, r6, r7, r9, fp, sp, lr}
 8008e38:	08016ad3 	stmdaeq	r1, {r0, r1, r4, r6, r7, r9, fp, sp, lr}
 8008e3c:	08016acc 	stmdaeq	r1, {r2, r3, r6, r7, r9, fp, sp, lr}
 8008e40:	08016be1 	stmdaeq	r1, {r0, r5, r6, r7, r8, r9, fp, sp, lr}
 8008e44:	08016b24 	stmdaeq	r1, {r2, r5, r8, r9, fp, sp, lr}
 8008e48:	08016a2c 	stmdaeq	r1, {r2, r3, r5, r9, fp, sp, lr}
 8008e4c:	08016b64 	stmdaeq	r1, {r2, r5, r6, r8, r9, fp, sp, lr}
 8008e50:	40010c00 	andmi	r0, r1, r0, lsl #24
 8008e54:	40010000 	andmi	r0, r1, r0
 8008e58:	20001950 	andcs	r1, r0, r0, asr r9
 8008e5c:	f8d9 3000 	ldr.w	r3, [r9]
 8008e60:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	bf0c      	ite	eq
 8008e68:	4643      	moveq	r3, r8
 8008e6a:	2300      	movne	r3, #0
 8008e6c:	f8cd 38f4 	str.w	r3, [sp, #2292]	; 0x8f4
 8008e70:	4b71      	ldr	r3, [pc, #452]	; (8009038 <main+0x410>)
 8008e72:	e9c4 3800 	strd	r3, r8, [r4]
 8008e76:	4b71      	ldr	r3, [pc, #452]	; (800903c <main+0x414>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	619c      	str	r4, [r3, #24]
 8008e7c:	f000 fd72 	bl	8009964 <ArtNet4Node::Print()>
 8008e80:	4640      	mov	r0, r8
 8008e82:	f004 fc57 	bl	800d734 <WS28xxDmx::Print()>
 8008e86:	496e      	ldr	r1, [pc, #440]	; (8009040 <main+0x418>)
 8008e88:	a853      	add	r0, sp, #332	; 0x14c
 8008e8a:	f00a f8c9 	bl	8013020 <DisplayUdf::SetTitle(char const*, ...)>
 8008e8e:	2202      	movs	r2, #2
 8008e90:	a853      	add	r0, sp, #332	; 0x14c
 8008e92:	4611      	mov	r1, r2
 8008e94:	f00a fa1a 	bl	80132cc <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008e98:	2206      	movs	r2, #6
 8008e9a:	2103      	movs	r1, #3
 8008e9c:	a853      	add	r0, sp, #332	; 0x14c
 8008e9e:	f00a fa15 	bl	80132cc <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008ea2:	2203      	movs	r2, #3
 8008ea4:	2104      	movs	r1, #4
 8008ea6:	a853      	add	r0, sp, #332	; 0x14c
 8008ea8:	f00a fa10 	bl	80132cc <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008eac:	2208      	movs	r2, #8
 8008eae:	2105      	movs	r1, #5
 8008eb0:	a853      	add	r0, sp, #332	; 0x14c
 8008eb2:	f00a fa0b 	bl	80132cc <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008eb6:	2205      	movs	r2, #5
 8008eb8:	2106      	movs	r1, #6
 8008eba:	a853      	add	r0, sp, #332	; 0x14c
 8008ebc:	f00a fa06 	bl	80132cc <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008ec0:	981c      	ldr	r0, [sp, #112]	; 0x70
 8008ec2:	f004 ffbb 	bl	800de3c <PixelType::GetType(pixel::Type)>
 8008ec6:	4606      	mov	r6, r0
 8008ec8:	981e      	ldr	r0, [sp, #120]	; 0x78
 8008eca:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008ece:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 8008ed2:	f005 f80b 	bl	800deec <PixelType::GetMap(pixel::Map)>
 8008ed6:	4633      	mov	r3, r6
 8008ed8:	2107      	movs	r1, #7
 8008eda:	4a5a      	ldr	r2, [pc, #360]	; (8009044 <main+0x41c>)
 8008edc:	e9cd a001 	strd	sl, r0, [sp, #4]
 8008ee0:	f8cd 8000 	str.w	r8, [sp]
 8008ee4:	a853      	add	r0, sp, #332	; 0x14c
 8008ee6:	f7ff fd91 	bl	8008a0c <Display::Printf(unsigned char, char const*, ...)>
 8008eea:	a80c      	add	r0, sp, #48	; 0x30
 8008eec:	f007 fcbc 	bl	8010868 <StoreDisplayUdf::StoreDisplayUdf()>
 8008ef0:	a90c      	add	r1, sp, #48	; 0x30
 8008ef2:	a82d      	add	r0, sp, #180	; 0xb4
 8008ef4:	f00a fa2c 	bl	8013350 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 8008ef8:	a82d      	add	r0, sp, #180	; 0xb4
 8008efa:	f00a fa36 	bl	801336a <DisplayUdfParams::Load()>
 8008efe:	b130      	cbz	r0, 8008f0e <main+0x2e6>
 8008f00:	a82d      	add	r0, sp, #180	; 0xb4
 8008f02:	a953      	add	r1, sp, #332	; 0x14c
 8008f04:	f00a fb67 	bl	80135d6 <DisplayUdfParams::Set(DisplayUdf*)>
 8008f08:	a82d      	add	r0, sp, #180	; 0xb4
 8008f0a:	f00a fb97 	bl	801363c <DisplayUdfParams::Dump()>
 8008f0e:	f60d 01ec 	addw	r1, sp, #2284	; 0x8ec
 8008f12:	a853      	add	r0, sp, #332	; 0x14c
 8008f14:	f00a fc62 	bl	80137dc <DisplayUdf::Show(ArtNetNode*)>
 8008f18:	b16d      	cbz	r5, 8008f36 <main+0x30e>
 8008f1a:	2106      	movs	r1, #6
 8008f1c:	a853      	add	r0, sp, #332	; 0x14c
 8008f1e:	f7ff fd6f 	bl	8008a00 <Display::ClearLine(unsigned char)>
 8008f22:	4628      	mov	r0, r5
 8008f24:	f004 fd42 	bl	800d9ac <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8008f28:	2106      	movs	r1, #6
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	4a46      	ldr	r2, [pc, #280]	; (8009048 <main+0x420>)
 8008f2e:	9500      	str	r5, [sp, #0]
 8008f30:	a853      	add	r0, sp, #332	; 0x14c
 8008f32:	f7ff fd6b 	bl	8008a0c <Display::Printf(unsigned char, char const*, ...)>
 8008f36:	2203      	movs	r2, #3
 8008f38:	2100      	movs	r1, #0
 8008f3a:	f89d 3fca 	ldrb.w	r3, [sp, #4042]	; 0xfca
 8008f3e:	a8be      	add	r0, sp, #760	; 0x2f8
 8008f40:	f006 f88e 	bl	800f060 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>
 8008f44:	f1a4 031c 	sub.w	r3, r4, #28
 8008f48:	4618      	mov	r0, r3
 8008f4a:	9305      	str	r3, [sp, #20]
 8008f4c:	f007 fd6e 	bl	8010a2c <StoreRemoteConfig::StoreRemoteConfig()>
 8008f50:	9905      	ldr	r1, [sp, #20]
 8008f52:	a824      	add	r0, sp, #144	; 0x90
 8008f54:	f006 fb88 	bl	800f668 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 8008f58:	a824      	add	r0, sp, #144	; 0x90
 8008f5a:	f006 fb8f 	bl	800f67c <RemoteConfigParams::Load()>
 8008f5e:	b130      	cbz	r0, 8008f6e <main+0x346>
 8008f60:	a824      	add	r0, sp, #144	; 0x90
 8008f62:	a9be      	add	r1, sp, #760	; 0x2f8
 8008f64:	f006 fcb1 	bl	800f8ca <RemoteConfigParams::Set(RemoteConfig*)>
 8008f68:	a824      	add	r0, sp, #144	; 0x90
 8008f6a:	f006 fcd2 	bl	800f912 <RemoteConfigParams::Dump()>
 8008f6e:	a808      	add	r0, sp, #32
 8008f70:	f007 faea 	bl	8010548 <SpiFlashStore::Flash()>
 8008f74:	2800      	cmp	r0, #0
 8008f76:	d1fa      	bne.n	8008f6e <main+0x346>
 8008f78:	2303      	movs	r3, #3
 8008f7a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8008f7e:	4933      	ldr	r1, [pc, #204]	; (800904c <main+0x424>)
 8008f80:	a853      	add	r0, sp, #332	; 0x14c
 8008f82:	f7ff fd94 	bl	8008aae <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008f86:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
 8008f8a:	f000 fca1 	bl	80098d0 <ArtNet4Node::Start()>
 8008f8e:	f248 0280 	movw	r2, #32896	; 0x8080
 8008f92:	2302      	movs	r3, #2
 8008f94:	492e      	ldr	r1, [pc, #184]	; (8009050 <main+0x428>)
 8008f96:	a853      	add	r0, sp, #332	; 0x14c
 8008f98:	f7ff fd89 	bl	8008aae <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008f9c:	2102      	movs	r1, #2
 8008f9e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008fa2:	f00b ff45 	bl	8014e30 <fwdgt_config>
 8008fa6:	2801      	cmp	r0, #1
 8008fa8:	bf0c      	ite	eq
 8008faa:	2201      	moveq	r2, #1
 8008fac:	2200      	movne	r2, #0
 8008fae:	ab0e      	add	r3, sp, #56	; 0x38
 8008fb0:	711a      	strb	r2, [r3, #4]
 8008fb2:	d101      	bne.n	8008fb8 <main+0x390>
 8008fb4:	f00b ff2c 	bl	8014e10 <fwdgt_enable>
 8008fb8:	2601      	movs	r6, #1
 8008fba:	4d26      	ldr	r5, [pc, #152]	; (8009054 <main+0x42c>)
 8008fbc:	ac16      	add	r4, sp, #88	; 0x58
 8008fbe:	f00b ff2f 	bl	8014e20 <fwdgt_counter_reload>
 8008fc2:	f7fe fab1 	bl	8007528 <net_handle>
 8008fc6:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
 8008fca:	f000 fcbc 	bl	8009946 <ArtNet4Node::Run()>
 8008fce:	a8be      	add	r0, sp, #760	; 0x2f8
 8008fd0:	f006 f9f8 	bl	800f3c4 <RemoteConfig::Run()>
 8008fd4:	a808      	add	r0, sp, #32
 8008fd6:	f007 fab7 	bl	8010548 <SpiFlashStore::Flash()>
 8008fda:	68e2      	ldr	r2, [r4, #12]
 8008fdc:	b172      	cbz	r2, 8008ffc <main+0x3d4>
 8008fde:	682b      	ldr	r3, [r5, #0]
 8008fe0:	6961      	ldr	r1, [r4, #20]
 8008fe2:	1a5b      	subs	r3, r3, r1
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d809      	bhi.n	8008ffc <main+0x3d4>
 8008fe8:	682b      	ldr	r3, [r5, #0]
 8008fea:	6163      	str	r3, [r4, #20]
 8008fec:	6923      	ldr	r3, [r4, #16]
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	f083 0201 	eor.w	r2, r3, #1
 8008ff4:	6122      	str	r2, [r4, #16]
 8008ff6:	bf14      	ite	ne
 8008ff8:	613e      	strne	r6, [r7, #16]
 8008ffa:	617b      	streq	r3, [r7, #20]
 8008ffc:	9958      	ldr	r1, [sp, #352]	; 0x160
 8008ffe:	aa53      	add	r2, sp, #332	; 0x14c
 8009000:	b151      	cbz	r1, 8009018 <main+0x3f0>
 8009002:	7c13      	ldrb	r3, [r2, #16]
 8009004:	b993      	cbnz	r3, 800902c <main+0x404>
 8009006:	682b      	ldr	r3, [r5, #0]
 8009008:	6852      	ldr	r2, [r2, #4]
 800900a:	1a9b      	subs	r3, r3, r2
 800900c:	4299      	cmp	r1, r3
 800900e:	d203      	bcs.n	8009018 <main+0x3f0>
 8009010:	2101      	movs	r1, #1
 8009012:	a853      	add	r0, sp, #332	; 0x14c
 8009014:	f7ff fce4 	bl	80089e0 <Display::SetSleep(bool)>
 8009018:	f8d9 3000 	ldr.w	r3, [r9]
 800901c:	b113      	cbz	r3, 8009024 <main+0x3fc>
 800901e:	a80a      	add	r0, sp, #40	; 0x28
 8009020:	f004 fee2 	bl	800dde8 <PixelPatterns::Run()>
 8009024:	a809      	add	r0, sp, #36	; 0x24
 8009026:	f008 feb1 	bl	8011d8c <MDNS::Run()>
 800902a:	e7c8      	b.n	8008fbe <main+0x396>
 800902c:	f00a fffb 	bl	8014026 <display::timeout::gpio_renew()>
 8009030:	2800      	cmp	r0, #0
 8009032:	d0f1      	beq.n	8009018 <main+0x3f0>
 8009034:	2100      	movs	r1, #0
 8009036:	e7ec      	b.n	8009012 <main+0x3ea>
 8009038:	08016b50 	stmdaeq	r1, {r4, r6, r8, r9, fp, sp, lr}
 800903c:	20001900 	andcs	r1, r0, r0, lsl #18
 8009040:	08016ae8 	stmdaeq	r1, {r3, r5, r6, r7, r9, fp, sp, lr}
 8009044:	08016afa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r9, fp, sp, lr}
 8009048:	08016a6d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r9, fp, sp, lr}
 800904c:	08016bd0 	stmdaeq	r1, {r4, r6, r7, r8, r9, fp, sp, lr}
 8009050:	08016bf5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, r9, fp, sp, lr}
 8009054:	2000a9dc 	ldrdcs	sl, [r0], -ip

08009058 <_itostr>:
 8009058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800905a:	0fc7      	lsrs	r7, r0, #31
 800905c:	b091      	sub	sp, #68	; 0x44
 800905e:	bf18      	it	ne
 8009060:	4240      	negne	r0, r0
 8009062:	f10d 043f 	add.w	r4, sp, #63	; 0x3f
 8009066:	b9c8      	cbnz	r0, 800909c <_itostr+0x44>
 8009068:	2330      	movs	r3, #48	; 0x30
 800906a:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 800906e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8009072:	b132      	cbz	r2, 8009082 <_itostr+0x2a>
 8009074:	4668      	mov	r0, sp
 8009076:	2530      	movs	r5, #48	; 0x30
 8009078:	1ae6      	subs	r6, r4, r3
 800907a:	4296      	cmp	r6, r2
 800907c:	da01      	bge.n	8009082 <_itostr+0x2a>
 800907e:	4283      	cmp	r3, r0
 8009080:	d81c      	bhi.n	80090bc <_itostr+0x64>
 8009082:	b117      	cbz	r7, 800908a <_itostr+0x32>
 8009084:	222d      	movs	r2, #45	; 0x2d
 8009086:	f803 2901 	strb.w	r2, [r3], #-1
 800908a:	3301      	adds	r3, #1
 800908c:	1ae0      	subs	r0, r4, r3
 800908e:	3901      	subs	r1, #1
 8009090:	aa10      	add	r2, sp, #64	; 0x40
 8009092:	4293      	cmp	r3, r2
 8009094:	d315      	bcc.n	80090c2 <_itostr+0x6a>
 8009096:	3001      	adds	r0, #1
 8009098:	b011      	add	sp, #68	; 0x44
 800909a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800909c:	4623      	mov	r3, r4
 800909e:	250a      	movs	r5, #10
 80090a0:	46ec      	mov	ip, sp
 80090a2:	fb90 f6f5 	sdiv	r6, r0, r5
 80090a6:	fb05 0016 	mls	r0, r5, r6, r0
 80090aa:	3030      	adds	r0, #48	; 0x30
 80090ac:	f803 0901 	strb.w	r0, [r3], #-1
 80090b0:	4630      	mov	r0, r6
 80090b2:	2e00      	cmp	r6, #0
 80090b4:	d0dd      	beq.n	8009072 <_itostr+0x1a>
 80090b6:	4563      	cmp	r3, ip
 80090b8:	d1f3      	bne.n	80090a2 <_itostr+0x4a>
 80090ba:	e7da      	b.n	8009072 <_itostr+0x1a>
 80090bc:	f803 5901 	strb.w	r5, [r3], #-1
 80090c0:	e7da      	b.n	8009078 <_itostr+0x20>
 80090c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090c6:	f801 2f01 	strb.w	r2, [r1, #1]!
 80090ca:	e7e1      	b.n	8009090 <_itostr+0x38>

080090cc <_xputch>:
 80090cc:	4603      	mov	r3, r0
 80090ce:	b410      	push	{r4}
 80090d0:	4c08      	ldr	r4, [pc, #32]	; (80090f4 <_xputch+0x28>)
 80090d2:	68da      	ldr	r2, [r3, #12]
 80090d4:	4608      	mov	r0, r1
 80090d6:	6821      	ldr	r1, [r4, #0]
 80090d8:	3201      	adds	r2, #1
 80090da:	60da      	str	r2, [r3, #12]
 80090dc:	b139      	cbz	r1, 80090ee <_xputch+0x22>
 80090de:	691b      	ldr	r3, [r3, #16]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	da02      	bge.n	80090ea <_xputch+0x1e>
 80090e4:	1c4b      	adds	r3, r1, #1
 80090e6:	6023      	str	r3, [r4, #0]
 80090e8:	7008      	strb	r0, [r1, #0]
 80090ea:	bc10      	pop	{r4}
 80090ec:	4770      	bx	lr
 80090ee:	bc10      	pop	{r4}
 80090f0:	f00b b998 	b.w	8014424 <console_putc>
 80090f4:	200000e8 	andcs	r0, r0, r8, ror #1

080090f8 <_format_int>:
 80090f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090fc:	461f      	mov	r7, r3
 80090fe:	b091      	sub	sp, #68	; 0x44
 8009100:	ea52 0307 	orrs.w	r3, r2, r7
 8009104:	4680      	mov	r8, r0
 8009106:	4616      	mov	r6, r2
 8009108:	f10d 053f 	add.w	r5, sp, #63	; 0x3f
 800910c:	d138      	bne.n	8009180 <_format_int+0x88>
 800910e:	2330      	movs	r3, #48	; 0x30
 8009110:	f10d 043e 	add.w	r4, sp, #62	; 0x3e
 8009114:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8009118:	f8d8 3000 	ldr.w	r3, [r8]
 800911c:	07d8      	lsls	r0, r3, #31
 800911e:	d508      	bpl.n	8009132 <_format_int+0x3a>
 8009120:	466a      	mov	r2, sp
 8009122:	2030      	movs	r0, #48	; 0x30
 8009124:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009128:	1b2e      	subs	r6, r5, r4
 800912a:	428e      	cmp	r6, r1
 800912c:	da01      	bge.n	8009132 <_format_int+0x3a>
 800912e:	4294      	cmp	r4, r2
 8009130:	d843      	bhi.n	80091ba <_format_int+0xc2>
 8009132:	0699      	lsls	r1, r3, #26
 8009134:	d508      	bpl.n	8009148 <_format_int+0x50>
 8009136:	466a      	mov	r2, sp
 8009138:	2030      	movs	r0, #48	; 0x30
 800913a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800913e:	1b2e      	subs	r6, r5, r4
 8009140:	428e      	cmp	r6, r1
 8009142:	da01      	bge.n	8009148 <_format_int+0x50>
 8009144:	4294      	cmp	r4, r2
 8009146:	d83b      	bhi.n	80091c0 <_format_int+0xc8>
 8009148:	071a      	lsls	r2, r3, #28
 800914a:	bf44      	itt	mi
 800914c:	222d      	movmi	r2, #45	; 0x2d
 800914e:	f804 2901 	strbmi.w	r2, [r4], #-1
 8009152:	065b      	lsls	r3, r3, #25
 8009154:	d408      	bmi.n	8009168 <_format_int+0x70>
 8009156:	466b      	mov	r3, sp
 8009158:	2120      	movs	r1, #32
 800915a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800915e:	1b28      	subs	r0, r5, r4
 8009160:	4290      	cmp	r0, r2
 8009162:	da01      	bge.n	8009168 <_format_int+0x70>
 8009164:	429c      	cmp	r4, r3
 8009166:	d82e      	bhi.n	80091c6 <_format_int+0xce>
 8009168:	1b2d      	subs	r5, r5, r4
 800916a:	3401      	adds	r4, #1
 800916c:	ab10      	add	r3, sp, #64	; 0x40
 800916e:	429c      	cmp	r4, r3
 8009170:	d32c      	bcc.n	80091cc <_format_int+0xd4>
 8009172:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009176:	42ab      	cmp	r3, r5
 8009178:	dc2e      	bgt.n	80091d8 <_format_int+0xe0>
 800917a:	b011      	add	sp, #68	; 0x44
 800917c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009180:	462c      	mov	r4, r5
 8009182:	46eb      	mov	fp, sp
 8009184:	4630      	mov	r0, r6
 8009186:	4639      	mov	r1, r7
 8009188:	220a      	movs	r2, #10
 800918a:	2300      	movs	r3, #0
 800918c:	f7fe feaa 	bl	8007ee4 <__aeabi_uldivmod>
 8009190:	46b2      	mov	sl, r6
 8009192:	3230      	adds	r2, #48	; 0x30
 8009194:	46b9      	mov	r9, r7
 8009196:	2300      	movs	r3, #0
 8009198:	4630      	mov	r0, r6
 800919a:	4639      	mov	r1, r7
 800919c:	f804 2901 	strb.w	r2, [r4], #-1
 80091a0:	220a      	movs	r2, #10
 80091a2:	f7fe fe9f 	bl	8007ee4 <__aeabi_uldivmod>
 80091a6:	f1ba 0f0a 	cmp.w	sl, #10
 80091aa:	f179 0300 	sbcs.w	r3, r9, #0
 80091ae:	4606      	mov	r6, r0
 80091b0:	460f      	mov	r7, r1
 80091b2:	d3b1      	bcc.n	8009118 <_format_int+0x20>
 80091b4:	455c      	cmp	r4, fp
 80091b6:	d1e5      	bne.n	8009184 <_format_int+0x8c>
 80091b8:	e7ae      	b.n	8009118 <_format_int+0x20>
 80091ba:	f804 0901 	strb.w	r0, [r4], #-1
 80091be:	e7b3      	b.n	8009128 <_format_int+0x30>
 80091c0:	f804 0901 	strb.w	r0, [r4], #-1
 80091c4:	e7bb      	b.n	800913e <_format_int+0x46>
 80091c6:	f804 1901 	strb.w	r1, [r4], #-1
 80091ca:	e7c8      	b.n	800915e <_format_int+0x66>
 80091cc:	4640      	mov	r0, r8
 80091ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091d2:	f7ff ff7b 	bl	80090cc <_xputch>
 80091d6:	e7c9      	b.n	800916c <_format_int+0x74>
 80091d8:	2120      	movs	r1, #32
 80091da:	4640      	mov	r0, r8
 80091dc:	f7ff ff76 	bl	80090cc <_xputch>
 80091e0:	3501      	adds	r5, #1
 80091e2:	e7c6      	b.n	8009172 <_format_int+0x7a>

080091e4 <_format_hex>:
 80091e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091e6:	b091      	sub	sp, #68	; 0x44
 80091e8:	4606      	mov	r6, r0
 80091ea:	6804      	ldr	r4, [r0, #0]
 80091ec:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 80091f0:	bb61      	cbnz	r1, 800924c <_format_hex+0x68>
 80091f2:	2330      	movs	r3, #48	; 0x30
 80091f4:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 80091f8:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 80091fc:	07e5      	lsls	r5, r4, #31
 80091fe:	d507      	bpl.n	8009210 <_format_hex+0x2c>
 8009200:	4669      	mov	r1, sp
 8009202:	2530      	movs	r5, #48	; 0x30
 8009204:	6870      	ldr	r0, [r6, #4]
 8009206:	1ad7      	subs	r7, r2, r3
 8009208:	4287      	cmp	r7, r0
 800920a:	da01      	bge.n	8009210 <_format_hex+0x2c>
 800920c:	428b      	cmp	r3, r1
 800920e:	d831      	bhi.n	8009274 <_format_hex+0x90>
 8009210:	06a0      	lsls	r0, r4, #26
 8009212:	d507      	bpl.n	8009224 <_format_hex+0x40>
 8009214:	4669      	mov	r1, sp
 8009216:	2530      	movs	r5, #48	; 0x30
 8009218:	68b0      	ldr	r0, [r6, #8]
 800921a:	1ad7      	subs	r7, r2, r3
 800921c:	4287      	cmp	r7, r0
 800921e:	da01      	bge.n	8009224 <_format_hex+0x40>
 8009220:	428b      	cmp	r3, r1
 8009222:	d82a      	bhi.n	800927a <_format_hex+0x96>
 8009224:	0661      	lsls	r1, r4, #25
 8009226:	d407      	bmi.n	8009238 <_format_hex+0x54>
 8009228:	4669      	mov	r1, sp
 800922a:	2420      	movs	r4, #32
 800922c:	68b0      	ldr	r0, [r6, #8]
 800922e:	1ad5      	subs	r5, r2, r3
 8009230:	4285      	cmp	r5, r0
 8009232:	da01      	bge.n	8009238 <_format_hex+0x54>
 8009234:	428b      	cmp	r3, r1
 8009236:	d823      	bhi.n	8009280 <_format_hex+0x9c>
 8009238:	1ad5      	subs	r5, r2, r3
 800923a:	1c5c      	adds	r4, r3, #1
 800923c:	ab10      	add	r3, sp, #64	; 0x40
 800923e:	429c      	cmp	r4, r3
 8009240:	d321      	bcc.n	8009286 <_format_hex+0xa2>
 8009242:	68b3      	ldr	r3, [r6, #8]
 8009244:	429d      	cmp	r5, r3
 8009246:	db24      	blt.n	8009292 <_format_hex+0xae>
 8009248:	b011      	add	sp, #68	; 0x44
 800924a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800924c:	f014 0f02 	tst.w	r4, #2
 8009250:	bf0c      	ite	eq
 8009252:	2757      	moveq	r7, #87	; 0x57
 8009254:	2737      	movne	r7, #55	; 0x37
 8009256:	4613      	mov	r3, r2
 8009258:	466d      	mov	r5, sp
 800925a:	f001 000f 	and.w	r0, r1, #15
 800925e:	2809      	cmp	r0, #9
 8009260:	bf94      	ite	ls
 8009262:	3030      	addls	r0, #48	; 0x30
 8009264:	19c0      	addhi	r0, r0, r7
 8009266:	0909      	lsrs	r1, r1, #4
 8009268:	f803 0901 	strb.w	r0, [r3], #-1
 800926c:	d0c6      	beq.n	80091fc <_format_hex+0x18>
 800926e:	42ab      	cmp	r3, r5
 8009270:	d1f3      	bne.n	800925a <_format_hex+0x76>
 8009272:	e7c3      	b.n	80091fc <_format_hex+0x18>
 8009274:	f803 5901 	strb.w	r5, [r3], #-1
 8009278:	e7c5      	b.n	8009206 <_format_hex+0x22>
 800927a:	f803 5901 	strb.w	r5, [r3], #-1
 800927e:	e7cc      	b.n	800921a <_format_hex+0x36>
 8009280:	f803 4901 	strb.w	r4, [r3], #-1
 8009284:	e7d3      	b.n	800922e <_format_hex+0x4a>
 8009286:	4630      	mov	r0, r6
 8009288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800928c:	f7ff ff1e 	bl	80090cc <_xputch>
 8009290:	e7d4      	b.n	800923c <_format_hex+0x58>
 8009292:	2120      	movs	r1, #32
 8009294:	4630      	mov	r0, r6
 8009296:	f7ff ff19 	bl	80090cc <_xputch>
 800929a:	3501      	adds	r5, #1
 800929c:	e7d1      	b.n	8009242 <_format_hex+0x5e>
	...

080092a0 <_vprintf>:
 80092a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a4:	4614      	mov	r4, r2
 80092a6:	2200      	movs	r2, #0
 80092a8:	460b      	mov	r3, r1
 80092aa:	2700      	movs	r7, #0
 80092ac:	b099      	sub	sp, #100	; 0x64
 80092ae:	e9cd 2006 	strd	r2, r0, [sp, #24]
 80092b2:	ae08      	add	r6, sp, #32
 80092b4:	7819      	ldrb	r1, [r3, #0]
 80092b6:	b919      	cbnz	r1, 80092c0 <_vprintf+0x20>
 80092b8:	9806      	ldr	r0, [sp, #24]
 80092ba:	b019      	add	sp, #100	; 0x64
 80092bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c0:	2925      	cmp	r1, #37	; 0x25
 80092c2:	f103 0501 	add.w	r5, r3, #1
 80092c6:	d004      	beq.n	80092d2 <_vprintf+0x32>
 80092c8:	a803      	add	r0, sp, #12
 80092ca:	f7ff feff 	bl	80090cc <_xputch>
 80092ce:	462b      	mov	r3, r5
 80092d0:	e7f0      	b.n	80092b4 <_vprintf+0x14>
 80092d2:	2200      	movs	r2, #0
 80092d4:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80092d8:	9205      	str	r2, [sp, #20]
 80092da:	785a      	ldrb	r2, [r3, #1]
 80092dc:	2a30      	cmp	r2, #48	; 0x30
 80092de:	d12b      	bne.n	8009338 <_vprintf+0x98>
 80092e0:	2220      	movs	r2, #32
 80092e2:	9203      	str	r2, [sp, #12]
 80092e4:	1c9d      	adds	r5, r3, #2
 80092e6:	2200      	movs	r2, #0
 80092e8:	46ac      	mov	ip, r5
 80092ea:	4613      	mov	r3, r2
 80092ec:	f04f 0e0a 	mov.w	lr, #10
 80092f0:	f89c 1000 	ldrb.w	r1, [ip]
 80092f4:	4665      	mov	r5, ip
 80092f6:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 80092fa:	2809      	cmp	r0, #9
 80092fc:	f10c 0c01 	add.w	ip, ip, #1
 8009300:	d91e      	bls.n	8009340 <_vprintf+0xa0>
 8009302:	b12a      	cbz	r2, 8009310 <_vprintf+0x70>
 8009304:	9305      	str	r3, [sp, #20]
 8009306:	b11b      	cbz	r3, 8009310 <_vprintf+0x70>
 8009308:	9b03      	ldr	r3, [sp, #12]
 800930a:	f043 0310 	orr.w	r3, r3, #16
 800930e:	9303      	str	r3, [sp, #12]
 8009310:	292e      	cmp	r1, #46	; 0x2e
 8009312:	d124      	bne.n	800935e <_vprintf+0xbe>
 8009314:	786b      	ldrb	r3, [r5, #1]
 8009316:	2b2a      	cmp	r3, #42	; 0x2a
 8009318:	d016      	beq.n	8009348 <_vprintf+0xa8>
 800931a:	2100      	movs	r1, #0
 800931c:	f04f 0c0a 	mov.w	ip, #10
 8009320:	460a      	mov	r2, r1
 8009322:	1c68      	adds	r0, r5, #1
 8009324:	7803      	ldrb	r3, [r0, #0]
 8009326:	4605      	mov	r5, r0
 8009328:	3b30      	subs	r3, #48	; 0x30
 800932a:	2b09      	cmp	r3, #9
 800932c:	f100 0001 	add.w	r0, r0, #1
 8009330:	d958      	bls.n	80093e4 <_vprintf+0x144>
 8009332:	b181      	cbz	r1, 8009356 <_vprintf+0xb6>
 8009334:	9204      	str	r2, [sp, #16]
 8009336:	e00e      	b.n	8009356 <_vprintf+0xb6>
 8009338:	2a2d      	cmp	r2, #45	; 0x2d
 800933a:	d1d4      	bne.n	80092e6 <_vprintf+0x46>
 800933c:	2240      	movs	r2, #64	; 0x40
 800933e:	e7d0      	b.n	80092e2 <_vprintf+0x42>
 8009340:	2201      	movs	r2, #1
 8009342:	fb0e 0303 	mla	r3, lr, r3, r0
 8009346:	e7d3      	b.n	80092f0 <_vprintf+0x50>
 8009348:	f854 3b04 	ldr.w	r3, [r4], #4
 800934c:	3502      	adds	r5, #2
 800934e:	2b00      	cmp	r3, #0
 8009350:	bfb8      	it	lt
 8009352:	425b      	neglt	r3, r3
 8009354:	9304      	str	r3, [sp, #16]
 8009356:	9b03      	ldr	r3, [sp, #12]
 8009358:	f043 0301 	orr.w	r3, r3, #1
 800935c:	9303      	str	r3, [sp, #12]
 800935e:	782b      	ldrb	r3, [r5, #0]
 8009360:	2b6c      	cmp	r3, #108	; 0x6c
 8009362:	bf04      	itt	eq
 8009364:	9b03      	ldreq	r3, [sp, #12]
 8009366:	3501      	addeq	r5, #1
 8009368:	7829      	ldrb	r1, [r5, #0]
 800936a:	bf04      	itt	eq
 800936c:	f043 0304 	orreq.w	r3, r3, #4
 8009370:	9303      	streq	r3, [sp, #12]
 8009372:	2958      	cmp	r1, #88	; 0x58
 8009374:	f000 8173 	beq.w	800965e <_vprintf+0x3be>
 8009378:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 800937c:	b2da      	uxtb	r2, r3
 800937e:	2a15      	cmp	r2, #21
 8009380:	d8a2      	bhi.n	80092c8 <_vprintf+0x28>
 8009382:	2b15      	cmp	r3, #21
 8009384:	d8a0      	bhi.n	80092c8 <_vprintf+0x28>
 8009386:	a201      	add	r2, pc, #4	; (adr r2, 800938c <_vprintf+0xec>)
 8009388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800938c:	080093ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, r9, ip, pc}
 8009390:	080093fb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r8, r9, ip, pc}
 8009394:	080092c9 	stmdaeq	r0, {r0, r3, r6, r7, r9, ip, pc}
 8009398:	0800942f 	stmdaeq	r0, {r0, r1, r2, r3, r5, sl, ip, pc}
 800939c:	080092c9 	stmdaeq	r0, {r0, r3, r6, r7, r9, ip, pc}
 80093a0:	080092c9 	stmdaeq	r0, {r0, r3, r6, r7, r9, ip, pc}
 80093a4:	080093fb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r8, r9, ip, pc}
 80093a8:	080092c9 	stmdaeq	r0, {r0, r3, r6, r7, r9, ip, pc}
 80093ac:	080092c9 	stmdaeq	r0, {r0, r3, r6, r7, r9, ip, pc}
 80093b0:	080092c9 	stmdaeq	r0, {r0, r3, r6, r7, r9, ip, pc}
 80093b4:	080092c9 	stmdaeq	r0, {r0, r3, r6, r7, r9, ip, pc}
 80093b8:	080092c9 	stmdaeq	r0, {r0, r3, r6, r7, r9, ip, pc}
 80093bc:	080092c9 	stmdaeq	r0, {r0, r3, r6, r7, r9, ip, pc}
 80093c0:	080095a1 	stmdaeq	r0, {r0, r5, r7, r8, sl, ip, pc}
 80093c4:	080092c9 	stmdaeq	r0, {r0, r3, r6, r7, r9, ip, pc}
 80093c8:	080092c9 	stmdaeq	r0, {r0, r3, r6, r7, r9, ip, pc}
 80093cc:	080095c7 	stmdaeq	r0, {r0, r1, r2, r6, r7, r8, sl, ip, pc}
 80093d0:	080092c9 	stmdaeq	r0, {r0, r3, r6, r7, r9, ip, pc}
 80093d4:	08009641 	stmdaeq	r0, {r0, r6, r9, sl, ip, pc}
 80093d8:	080092c9 	stmdaeq	r0, {r0, r3, r6, r7, r9, ip, pc}
 80093dc:	080092c9 	stmdaeq	r0, {r0, r3, r6, r7, r9, ip, pc}
 80093e0:	08009667 	stmdaeq	r0, {r0, r1, r2, r5, r6, r9, sl, ip, pc}
 80093e4:	2101      	movs	r1, #1
 80093e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80093ea:	e79b      	b.n	8009324 <_vprintf+0x84>
 80093ec:	f854 1b04 	ldr.w	r1, [r4], #4
 80093f0:	a803      	add	r0, sp, #12
 80093f2:	f7ff fe6b 	bl	80090cc <_xputch>
 80093f6:	3501      	adds	r5, #1
 80093f8:	e769      	b.n	80092ce <_vprintf+0x2e>
 80093fa:	9903      	ldr	r1, [sp, #12]
 80093fc:	074a      	lsls	r2, r1, #29
 80093fe:	bf43      	ittte	mi
 8009400:	3407      	addmi	r4, #7
 8009402:	f024 0307 	bicmi.w	r3, r4, #7
 8009406:	461c      	movmi	r4, r3
 8009408:	f854 2b04 	ldrpl.w	r2, [r4], #4
 800940c:	bf4a      	itet	mi
 800940e:	685b      	ldrmi	r3, [r3, #4]
 8009410:	17d3      	asrpl	r3, r2, #31
 8009412:	f854 2b08 	ldrmi.w	r2, [r4], #8
 8009416:	2b00      	cmp	r3, #0
 8009418:	da05      	bge.n	8009426 <_vprintf+0x186>
 800941a:	f041 0108 	orr.w	r1, r1, #8
 800941e:	4252      	negs	r2, r2
 8009420:	9103      	str	r1, [sp, #12]
 8009422:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8009426:	a803      	add	r0, sp, #12
 8009428:	f7ff fe66 	bl	80090f8 <_format_int>
 800942c:	e7e3      	b.n	80093f6 <_vprintf+0x156>
 800942e:	3407      	adds	r4, #7
 8009430:	f024 0407 	bic.w	r4, r4, #7
 8009434:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009438:	f7fe fb5a 	bl	8007af0 <__aeabi_d2f>
 800943c:	9b03      	ldr	r3, [sp, #12]
 800943e:	4639      	mov	r1, r7
 8009440:	07db      	lsls	r3, r3, #31
 8009442:	bf54      	ite	pl
 8009444:	f04f 0a06 	movpl.w	sl, #6
 8009448:	f8dd a010 	ldrmi.w	sl, [sp, #16]
 800944c:	4681      	mov	r9, r0
 800944e:	f7fe fcfb 	bl	8007e48 <__aeabi_fcmplt>
 8009452:	2800      	cmp	r0, #0
 8009454:	d069      	beq.n	800952a <_vprintf+0x28a>
 8009456:	232d      	movs	r3, #45	; 0x2d
 8009458:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000
 800945c:	f88d 3020 	strb.w	r3, [sp, #32]
 8009460:	f10d 0b21 	add.w	fp, sp, #33	; 0x21
 8009464:	4648      	mov	r0, r9
 8009466:	f7fe fd17 	bl	8007e98 <__aeabi_f2iz>
 800946a:	4659      	mov	r1, fp
 800946c:	2200      	movs	r2, #0
 800946e:	4680      	mov	r8, r0
 8009470:	f7ff fdf2 	bl	8009058 <_itostr>
 8009474:	eb0b 0200 	add.w	r2, fp, r0
 8009478:	e9cd 2000 	strd	r2, r0, [sp]
 800947c:	4640      	mov	r0, r8
 800947e:	f7fe fc41 	bl	8007d04 <__aeabi_i2f>
 8009482:	4601      	mov	r1, r0
 8009484:	4648      	mov	r0, r9
 8009486:	f7fe fb87 	bl	8007b98 <__aeabi_fsub>
 800948a:	222e      	movs	r2, #46	; 0x2e
 800948c:	4601      	mov	r1, r0
 800948e:	200a      	movs	r0, #10
 8009490:	9b00      	ldr	r3, [sp, #0]
 8009492:	f10a 0901 	add.w	r9, sl, #1
 8009496:	f103 0801 	add.w	r8, r3, #1
 800949a:	9b01      	ldr	r3, [sp, #4]
 800949c:	f80b 2003 	strb.w	r2, [fp, r3]
 80094a0:	4603      	mov	r3, r0
 80094a2:	f1ba 0f00 	cmp.w	sl, #0
 80094a6:	dc42      	bgt.n	800952e <_vprintf+0x28e>
 80094a8:	9100      	str	r1, [sp, #0]
 80094aa:	f7fe fc2b 	bl	8007d04 <__aeabi_i2f>
 80094ae:	9900      	ldr	r1, [sp, #0]
 80094b0:	f7ff f858 	bl	8008564 <__aeabi_fmul>
 80094b4:	f7fe fcf0 	bl	8007e98 <__aeabi_f2iz>
 80094b8:	4641      	mov	r1, r8
 80094ba:	464a      	mov	r2, r9
 80094bc:	f7ff fdcc 	bl	8009058 <_itostr>
 80094c0:	4480      	add	r8, r0
 80094c2:	eba8 0806 	sub.w	r8, r8, r6
 80094c6:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 80094ca:	5c73      	ldrb	r3, [r6, r1]
 80094cc:	1872      	adds	r2, r6, r1
 80094ce:	2b34      	cmp	r3, #52	; 0x34
 80094d0:	d910      	bls.n	80094f4 <_vprintf+0x254>
 80094d2:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 80094d6:	1e53      	subs	r3, r2, #1
 80094d8:	282e      	cmp	r0, #46	; 0x2e
 80094da:	d02f      	beq.n	800953c <_vprintf+0x29c>
 80094dc:	469c      	mov	ip, r3
 80094de:	f04f 0e30 	mov.w	lr, #48	; 0x30
 80094e2:	4663      	mov	r3, ip
 80094e4:	f81c 0901 	ldrb.w	r0, [ip], #-1
 80094e8:	2839      	cmp	r0, #57	; 0x39
 80094ea:	d024      	beq.n	8009536 <_vprintf+0x296>
 80094ec:	282e      	cmp	r0, #46	; 0x2e
 80094ee:	d025      	beq.n	800953c <_vprintf+0x29c>
 80094f0:	3001      	adds	r0, #1
 80094f2:	7018      	strb	r0, [r3, #0]
 80094f4:	f101 0360 	add.w	r3, r1, #96	; 0x60
 80094f8:	446b      	add	r3, sp
 80094fa:	f813 3c41 	ldrb.w	r3, [r3, #-65]
 80094fe:	2b2e      	cmp	r3, #46	; 0x2e
 8009500:	bf08      	it	eq
 8009502:	f101 31ff 	addeq.w	r1, r1, #4294967295	; 0xffffffff
 8009506:	4688      	mov	r8, r1
 8009508:	4689      	mov	r9, r1
 800950a:	9b05      	ldr	r3, [sp, #20]
 800950c:	454b      	cmp	r3, r9
 800950e:	dc40      	bgt.n	8009592 <_vprintf+0x2f2>
 8009510:	46b1      	mov	r9, r6
 8009512:	f1b8 0f00 	cmp.w	r8, #0
 8009516:	f77f af6e 	ble.w	80093f6 <_vprintf+0x156>
 800951a:	f819 1b01 	ldrb.w	r1, [r9], #1
 800951e:	a803      	add	r0, sp, #12
 8009520:	f7ff fdd4 	bl	80090cc <_xputch>
 8009524:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009528:	e7f3      	b.n	8009512 <_vprintf+0x272>
 800952a:	46b3      	mov	fp, r6
 800952c:	e79a      	b.n	8009464 <_vprintf+0x1c4>
 800952e:	4358      	muls	r0, r3
 8009530:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009534:	e7b5      	b.n	80094a2 <_vprintf+0x202>
 8009536:	f88c e001 	strb.w	lr, [ip, #1]
 800953a:	e7d2      	b.n	80094e2 <_vprintf+0x242>
 800953c:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8009540:	3b01      	subs	r3, #1
 8009542:	7818      	ldrb	r0, [r3, #0]
 8009544:	2839      	cmp	r0, #57	; 0x39
 8009546:	d112      	bne.n	800956e <_vprintf+0x2ce>
 8009548:	42b3      	cmp	r3, r6
 800954a:	d20d      	bcs.n	8009568 <_vprintf+0x2c8>
 800954c:	1c98      	adds	r0, r3, #2
 800954e:	1c59      	adds	r1, r3, #1
 8009550:	4281      	cmp	r1, r0
 8009552:	eba2 0203 	sub.w	r2, r2, r3
 8009556:	d913      	bls.n	8009580 <_vprintf+0x2e0>
 8009558:	3201      	adds	r2, #1
 800955a:	441a      	add	r2, r3
 800955c:	428a      	cmp	r2, r1
 800955e:	d10b      	bne.n	8009578 <_vprintf+0x2d8>
 8009560:	2231      	movs	r2, #49	; 0x31
 8009562:	4641      	mov	r1, r8
 8009564:	705a      	strb	r2, [r3, #1]
 8009566:	e7c5      	b.n	80094f4 <_vprintf+0x254>
 8009568:	f803 c901 	strb.w	ip, [r3], #-1
 800956c:	e7e9      	b.n	8009542 <_vprintf+0x2a2>
 800956e:	42b3      	cmp	r3, r6
 8009570:	d3ec      	bcc.n	800954c <_vprintf+0x2ac>
 8009572:	282d      	cmp	r0, #45	; 0x2d
 8009574:	d0ea      	beq.n	800954c <_vprintf+0x2ac>
 8009576:	e7bb      	b.n	80094f0 <_vprintf+0x250>
 8009578:	f811 0b01 	ldrb.w	r0, [r1], #1
 800957c:	7008      	strb	r0, [r1, #0]
 800957e:	e7ed      	b.n	800955c <_vprintf+0x2bc>
 8009580:	4411      	add	r1, r2
 8009582:	4402      	add	r2, r0
 8009584:	4290      	cmp	r0, r2
 8009586:	d0eb      	beq.n	8009560 <_vprintf+0x2c0>
 8009588:	f811 cd01 	ldrb.w	ip, [r1, #-1]!
 800958c:	f802 cd01 	strb.w	ip, [r2, #-1]!
 8009590:	e7f8      	b.n	8009584 <_vprintf+0x2e4>
 8009592:	2120      	movs	r1, #32
 8009594:	a803      	add	r0, sp, #12
 8009596:	f7ff fd99 	bl	80090cc <_xputch>
 800959a:	f109 0901 	add.w	r9, r9, #1
 800959e:	e7b4      	b.n	800950a <_vprintf+0x26a>
 80095a0:	2308      	movs	r3, #8
 80095a2:	9305      	str	r3, [sp, #20]
 80095a4:	2320      	movs	r3, #32
 80095a6:	2130      	movs	r1, #48	; 0x30
 80095a8:	f854 8b04 	ldr.w	r8, [r4], #4
 80095ac:	a803      	add	r0, sp, #12
 80095ae:	9303      	str	r3, [sp, #12]
 80095b0:	f7ff fd8c 	bl	80090cc <_xputch>
 80095b4:	2178      	movs	r1, #120	; 0x78
 80095b6:	a803      	add	r0, sp, #12
 80095b8:	f7ff fd88 	bl	80090cc <_xputch>
 80095bc:	4641      	mov	r1, r8
 80095be:	a803      	add	r0, sp, #12
 80095c0:	f7ff fe10 	bl	80091e4 <_format_hex>
 80095c4:	e717      	b.n	80093f6 <_vprintf+0x156>
 80095c6:	f04f 0800 	mov.w	r8, #0
 80095ca:	f854 9b04 	ldr.w	r9, [r4], #4
 80095ce:	f819 3008 	ldrb.w	r3, [r9, r8]
 80095d2:	b993      	cbnz	r3, 80095fa <_vprintf+0x35a>
 80095d4:	9b03      	ldr	r3, [sp, #12]
 80095d6:	07d9      	lsls	r1, r3, #31
 80095d8:	d503      	bpl.n	80095e2 <_vprintf+0x342>
 80095da:	9b04      	ldr	r3, [sp, #16]
 80095dc:	4598      	cmp	r8, r3
 80095de:	bfa8      	it	ge
 80095e0:	4698      	movge	r8, r3
 80095e2:	9b03      	ldr	r3, [sp, #12]
 80095e4:	f108 0a01 	add.w	sl, r8, #1
 80095e8:	065a      	lsls	r2, r3, #25
 80095ea:	d403      	bmi.n	80095f4 <_vprintf+0x354>
 80095ec:	9b05      	ldr	r3, [sp, #20]
 80095ee:	4598      	cmp	r8, r3
 80095f0:	db06      	blt.n	8009600 <_vprintf+0x360>
 80095f2:	46d0      	mov	r8, sl
 80095f4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80095f8:	e00e      	b.n	8009618 <_vprintf+0x378>
 80095fa:	f108 0801 	add.w	r8, r8, #1
 80095fe:	e7e6      	b.n	80095ce <_vprintf+0x32e>
 8009600:	2120      	movs	r1, #32
 8009602:	a803      	add	r0, sp, #12
 8009604:	f7ff fd62 	bl	80090cc <_xputch>
 8009608:	46d0      	mov	r8, sl
 800960a:	e7ea      	b.n	80095e2 <_vprintf+0x342>
 800960c:	a803      	add	r0, sp, #12
 800960e:	f7ff fd5d 	bl	80090cc <_xputch>
 8009612:	9b04      	ldr	r3, [sp, #16]
 8009614:	3b01      	subs	r3, #1
 8009616:	9304      	str	r3, [sp, #16]
 8009618:	9b03      	ldr	r3, [sp, #12]
 800961a:	07db      	lsls	r3, r3, #31
 800961c:	d501      	bpl.n	8009622 <_vprintf+0x382>
 800961e:	9b04      	ldr	r3, [sp, #16]
 8009620:	b11b      	cbz	r3, 800962a <_vprintf+0x38a>
 8009622:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8009626:	2900      	cmp	r1, #0
 8009628:	d1f0      	bne.n	800960c <_vprintf+0x36c>
 800962a:	9b05      	ldr	r3, [sp, #20]
 800962c:	4543      	cmp	r3, r8
 800962e:	f77f aee2 	ble.w	80093f6 <_vprintf+0x156>
 8009632:	2120      	movs	r1, #32
 8009634:	a803      	add	r0, sp, #12
 8009636:	f7ff fd49 	bl	80090cc <_xputch>
 800963a:	f108 0801 	add.w	r8, r8, #1
 800963e:	e7f4      	b.n	800962a <_vprintf+0x38a>
 8009640:	9b03      	ldr	r3, [sp, #12]
 8009642:	f013 0304 	ands.w	r3, r3, #4
 8009646:	bf1d      	ittte	ne
 8009648:	3407      	addne	r4, #7
 800964a:	f024 0307 	bicne.w	r3, r4, #7
 800964e:	461c      	movne	r4, r3
 8009650:	f854 2b04 	ldreq.w	r2, [r4], #4
 8009654:	bf1c      	itt	ne
 8009656:	f854 2b08 	ldrne.w	r2, [r4], #8
 800965a:	685b      	ldrne	r3, [r3, #4]
 800965c:	e6e3      	b.n	8009426 <_vprintf+0x186>
 800965e:	9b03      	ldr	r3, [sp, #12]
 8009660:	f043 0302 	orr.w	r3, r3, #2
 8009664:	9303      	str	r3, [sp, #12]
 8009666:	f854 1b04 	ldr.w	r1, [r4], #4
 800966a:	e7a8      	b.n	80095be <_vprintf+0x31e>

0800966c <printf>:
 800966c:	b40f      	push	{r0, r1, r2, r3}
 800966e:	b507      	push	{r0, r1, r2, lr}
 8009670:	aa04      	add	r2, sp, #16
 8009672:	f852 1b04 	ldr.w	r1, [r2], #4
 8009676:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800967a:	9201      	str	r2, [sp, #4]
 800967c:	f7ff fe10 	bl	80092a0 <_vprintf>
 8009680:	b003      	add	sp, #12
 8009682:	f85d eb04 	ldr.w	lr, [sp], #4
 8009686:	b004      	add	sp, #16
 8009688:	4770      	bx	lr
	...

0800968c <sprintf>:
 800968c:	b40e      	push	{r1, r2, r3}
 800968e:	b517      	push	{r0, r1, r2, r4, lr}
 8009690:	4c09      	ldr	r4, [pc, #36]	; (80096b8 <sprintf+0x2c>)
 8009692:	aa05      	add	r2, sp, #20
 8009694:	f852 1b04 	ldr.w	r1, [r2], #4
 8009698:	6020      	str	r0, [r4, #0]
 800969a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800969e:	9201      	str	r2, [sp, #4]
 80096a0:	f7ff fdfe 	bl	80092a0 <_vprintf>
 80096a4:	2300      	movs	r3, #0
 80096a6:	6822      	ldr	r2, [r4, #0]
 80096a8:	6023      	str	r3, [r4, #0]
 80096aa:	7013      	strb	r3, [r2, #0]
 80096ac:	b003      	add	sp, #12
 80096ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096b2:	b003      	add	sp, #12
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop
 80096b8:	200000e8 	andcs	r0, r0, r8, ror #1

080096bc <snprintf>:
 80096bc:	b40c      	push	{r2, r3}
 80096be:	460b      	mov	r3, r1
 80096c0:	b513      	push	{r0, r1, r4, lr}
 80096c2:	4c09      	ldr	r4, [pc, #36]	; (80096e8 <snprintf+0x2c>)
 80096c4:	aa04      	add	r2, sp, #16
 80096c6:	f852 1b04 	ldr.w	r1, [r2], #4
 80096ca:	6020      	str	r0, [r4, #0]
 80096cc:	4618      	mov	r0, r3
 80096ce:	9201      	str	r2, [sp, #4]
 80096d0:	f7ff fde6 	bl	80092a0 <_vprintf>
 80096d4:	2300      	movs	r3, #0
 80096d6:	6822      	ldr	r2, [r4, #0]
 80096d8:	6023      	str	r3, [r4, #0]
 80096da:	7013      	strb	r3, [r2, #0]
 80096dc:	b002      	add	sp, #8
 80096de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096e2:	b002      	add	sp, #8
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	200000e8 	andcs	r0, r0, r8, ror #1

080096ec <vsnprintf>:
 80096ec:	b538      	push	{r3, r4, r5, lr}
 80096ee:	4605      	mov	r5, r0
 80096f0:	4c05      	ldr	r4, [pc, #20]	; (8009708 <vsnprintf+0x1c>)
 80096f2:	4608      	mov	r0, r1
 80096f4:	4611      	mov	r1, r2
 80096f6:	461a      	mov	r2, r3
 80096f8:	6025      	str	r5, [r4, #0]
 80096fa:	f7ff fdd1 	bl	80092a0 <_vprintf>
 80096fe:	2300      	movs	r3, #0
 8009700:	6822      	ldr	r2, [r4, #0]
 8009702:	6023      	str	r3, [r4, #0]
 8009704:	7013      	strb	r3, [r2, #0]
 8009706:	bd38      	pop	{r3, r4, r5, pc}
 8009708:	200000e8 	andcs	r0, r0, r8, ror #1

0800970c <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)>:
 800970c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800970e:	4616      	mov	r6, r2
 8009710:	1d07      	adds	r7, r0, #4
 8009712:	4604      	mov	r4, r0
 8009714:	4613      	mov	r3, r2
 8009716:	4638      	mov	r0, r7
 8009718:	f10d 0206 	add.w	r2, sp, #6
 800971c:	460d      	mov	r5, r1
 800971e:	f000 fc1d 	bl	8009f5c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 8009722:	b1b6      	cbz	r6, 8009752 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>
 8009724:	b1a8      	cbz	r0, 8009752 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>
 8009726:	4629      	mov	r1, r5
 8009728:	4638      	mov	r0, r7
 800972a:	f000 fda0 	bl	800a26e <ArtNetNode::GetPortProtocol(unsigned int) const>
 800972e:	2801      	cmp	r0, #1
 8009730:	d10f      	bne.n	8009752 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>
 8009732:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 8009736:	b123      	cbz	r3, 8009742 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x36>
 8009738:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800973c:	3301      	adds	r3, #1
 800973e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009742:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009746:	b933      	cbnz	r3, 8009756 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x4a>
 8009748:	2202      	movs	r2, #2
 800974a:	4629      	mov	r1, r5
 800974c:	4638      	mov	r0, r7
 800974e:	f000 fc48 	bl	8009fe2 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 8009752:	b003      	add	sp, #12
 8009754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009756:	1e71      	subs	r1, r6, #1
 8009758:	424a      	negs	r2, r1
 800975a:	414a      	adcs	r2, r1
 800975c:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 8009760:	4629      	mov	r1, r5
 8009762:	f002 fc61 	bl	800c028 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 8009766:	e7f4      	b.n	8009752 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>

08009768 <ArtNet4Node::~ArtNet4Node()>:
 8009768:	b510      	push	{r4, lr}
 800976a:	4604      	mov	r4, r0
 800976c:	4b05      	ldr	r3, [pc, #20]	; (8009784 <ArtNet4Node::~ArtNet4Node()+0x1c>)
 800976e:	6003      	str	r3, [r0, #0]
 8009770:	f500 60f7 	add.w	r0, r0, #1976	; 0x7b8
 8009774:	f002 fb68 	bl	800be48 <E131Bridge::Stop()>
 8009778:	1d20      	adds	r0, r4, #4
 800977a:	f000 f961 	bl	8009a40 <ArtNetNode::Stop()>
 800977e:	4620      	mov	r0, r4
 8009780:	bd10      	pop	{r4, pc}
 8009782:	bf00      	nop
 8009784:	08016bb8 	stmdaeq	r1, {r3, r4, r5, r7, r8, r9, fp, sp, lr}

08009788 <ArtNet4Node::HandleAddress(unsigned char)>:
 8009788:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800978a:	4605      	mov	r5, r0
 800978c:	460c      	mov	r4, r1
 800978e:	2600      	movs	r6, #0
 8009790:	1d07      	adds	r7, r0, #4
 8009792:	792b      	ldrb	r3, [r5, #4]
 8009794:	ebb6 0f83 	cmp.w	r6, r3, lsl #2
 8009798:	d224      	bcs.n	80097e4 <ArtNet4Node::HandleAddress(unsigned char)+0x5c>
 800979a:	2301      	movs	r3, #1
 800979c:	4631      	mov	r1, r6
 800979e:	4638      	mov	r0, r7
 80097a0:	f10d 0206 	add.w	r2, sp, #6
 80097a4:	f000 fbda 	bl	8009f5c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 80097a8:	b150      	cbz	r0, 80097c0 <ArtNet4Node::HandleAddress(unsigned char)+0x38>
 80097aa:	f895 30a2 	ldrb.w	r3, [r5, #162]	; 0xa2
 80097ae:	b123      	cbz	r3, 80097ba <ArtNet4Node::HandleAddress(unsigned char)+0x32>
 80097b0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80097b4:	3301      	adds	r3, #1
 80097b6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80097ba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80097be:	b90b      	cbnz	r3, 80097c4 <ArtNet4Node::HandleAddress(unsigned char)+0x3c>
 80097c0:	3601      	adds	r6, #1
 80097c2:	e7e6      	b.n	8009792 <ArtNet4Node::HandleAddress(unsigned char)+0xa>
 80097c4:	4631      	mov	r1, r6
 80097c6:	4638      	mov	r0, r7
 80097c8:	f000 fd51 	bl	800a26e <ArtNetNode::GetPortProtocol(unsigned int) const>
 80097cc:	4602      	mov	r2, r0
 80097ce:	2a01      	cmp	r2, #1
 80097d0:	bf18      	it	ne
 80097d2:	2202      	movne	r2, #2
 80097d4:	4631      	mov	r1, r6
 80097d6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80097da:	f505 60f7 	add.w	r0, r5, #1976	; 0x7b8
 80097de:	f002 fc23 	bl	800c028 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 80097e2:	e7ed      	b.n	80097c0 <ArtNet4Node::HandleAddress(unsigned char)+0x38>
 80097e4:	2c13      	cmp	r4, #19
 80097e6:	f004 0603 	and.w	r6, r4, #3
 80097ea:	d80a      	bhi.n	8009802 <ArtNet4Node::HandleAddress(unsigned char)+0x7a>
 80097ec:	2c0f      	cmp	r4, #15
 80097ee:	d819      	bhi.n	8009824 <ArtNet4Node::HandleAddress(unsigned char)+0x9c>
 80097f0:	2c02      	cmp	r4, #2
 80097f2:	d015      	beq.n	8009820 <ArtNet4Node::HandleAddress(unsigned char)+0x98>
 80097f4:	3c03      	subs	r4, #3
 80097f6:	2c01      	cmp	r4, #1
 80097f8:	d810      	bhi.n	800981c <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 80097fa:	2300      	movs	r3, #0
 80097fc:	f885 37c0 	strb.w	r3, [r5, #1984]	; 0x7c0
 8009800:	e00c      	b.n	800981c <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 8009802:	2c53      	cmp	r4, #83	; 0x53
 8009804:	d806      	bhi.n	8009814 <ArtNet4Node::HandleAddress(unsigned char)+0x8c>
 8009806:	2c4f      	cmp	r4, #79	; 0x4f
 8009808:	d908      	bls.n	800981c <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 800980a:	2144      	movs	r1, #68	; 0x44
 800980c:	2300      	movs	r3, #0
 800980e:	fb01 5506 	mla	r5, r1, r6, r5
 8009812:	e00b      	b.n	800982c <ArtNet4Node::HandleAddress(unsigned char)+0xa4>
 8009814:	3470      	adds	r4, #112	; 0x70
 8009816:	b2e4      	uxtb	r4, r4
 8009818:	2c03      	cmp	r4, #3
 800981a:	d90a      	bls.n	8009832 <ArtNet4Node::HandleAddress(unsigned char)+0xaa>
 800981c:	b003      	add	sp, #12
 800981e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009820:	2301      	movs	r3, #1
 8009822:	e7eb      	b.n	80097fc <ArtNet4Node::HandleAddress(unsigned char)+0x74>
 8009824:	2144      	movs	r1, #68	; 0x44
 8009826:	2301      	movs	r3, #1
 8009828:	fb01 5506 	mla	r5, r1, r6, r5
 800982c:	f8c5 3d04 	str.w	r3, [r5, #3332]	; 0xd04
 8009830:	e7f4      	b.n	800981c <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 8009832:	4631      	mov	r1, r6
 8009834:	1d28      	adds	r0, r5, #4
 8009836:	f000 fd1a 	bl	800a26e <ArtNetNode::GetPortProtocol(unsigned int) const>
 800983a:	2801      	cmp	r0, #1
 800983c:	d1ee      	bne.n	800981c <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 800983e:	4631      	mov	r1, r6
 8009840:	f505 60f7 	add.w	r0, r5, #1976	; 0x7b8
 8009844:	b003      	add	sp, #12
 8009846:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800984a:	f002 bf07 	b.w	800c65c <E131Bridge::Clear(unsigned int)>

0800984e <ArtNet4Node::IsStatusChanged()>:
 800984e:	f500 60f7 	add.w	r0, r0, #1976	; 0x7b8
 8009852:	f002 befb 	b.w	800c64c <E131Bridge::IsStatusChanged()>

08009856 <ArtNet4Node::~ArtNet4Node()>:
 8009856:	b510      	push	{r4, lr}
 8009858:	4604      	mov	r4, r0
 800985a:	f7ff ff85 	bl	8009768 <ArtNet4Node::~ArtNet4Node()>
 800985e:	4620      	mov	r0, r4
 8009860:	f00a ff7c 	bl	801475c <operator delete(void*)>
 8009864:	4620      	mov	r0, r4
 8009866:	bd10      	pop	{r4, pc}

08009868 <ArtNet4Node::GetStatus(unsigned int)>:
 8009868:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800986a:	2301      	movs	r3, #1
 800986c:	4604      	mov	r4, r0
 800986e:	f10d 0206 	add.w	r2, sp, #6
 8009872:	f500 60f7 	add.w	r0, r0, #1976	; 0x7b8
 8009876:	460d      	mov	r5, r1
 8009878:	f002 fc4e 	bl	800c118 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800987c:	b188      	cbz	r0, 80098a2 <ArtNet4Node::GetStatus(unsigned int)+0x3a>
 800987e:	2144      	movs	r1, #68	; 0x44
 8009880:	fb01 4405 	mla	r4, r1, r5, r4
 8009884:	f894 3d0a 	ldrb.w	r3, [r4, #3338]	; 0xd0a
 8009888:	2b00      	cmp	r3, #0
 800988a:	f894 3d09 	ldrb.w	r3, [r4, #3337]	; 0xd09
 800988e:	bf14      	ite	ne
 8009890:	2080      	movne	r0, #128	; 0x80
 8009892:	2000      	moveq	r0, #0
 8009894:	2b00      	cmp	r3, #0
 8009896:	bf14      	ite	ne
 8009898:	2308      	movne	r3, #8
 800989a:	2300      	moveq	r3, #0
 800989c:	4318      	orrs	r0, r3
 800989e:	f040 0001 	orr.w	r0, r0, #1
 80098a2:	b003      	add	sp, #12
 80098a4:	bd30      	pop	{r4, r5, pc}
	...

080098a8 <ArtNet4Node::ArtNet4Node(unsigned char)>:
 80098a8:	b538      	push	{r3, r4, r5, lr}
 80098aa:	4604      	mov	r4, r0
 80098ac:	1d05      	adds	r5, r0, #4
 80098ae:	4628      	mov	r0, r5
 80098b0:	f000 f964 	bl	8009b7c <ArtNetNode::ArtNetNode(unsigned char)>
 80098b4:	4b05      	ldr	r3, [pc, #20]	; (80098cc <ArtNet4Node::ArtNet4Node(unsigned char)+0x24>)
 80098b6:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 80098ba:	6023      	str	r3, [r4, #0]
 80098bc:	f002 fb14 	bl	800bee8 <E131Bridge::E131Bridge()>
 80098c0:	4628      	mov	r0, r5
 80098c2:	4621      	mov	r1, r4
 80098c4:	f000 f866 	bl	8009994 <ArtNetNode::SetArtNet4Handler(ArtNet4Handler*)>
 80098c8:	4620      	mov	r0, r4
 80098ca:	bd38      	pop	{r3, r4, r5, pc}
 80098cc:	08016bb8 	stmdaeq	r1, {r3, r4, r5, r7, r8, r9, fp, sp, lr}

080098d0 <ArtNet4Node::Start()>:
 80098d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098d2:	4604      	mov	r4, r0
 80098d4:	2500      	movs	r5, #0
 80098d6:	1d06      	adds	r6, r0, #4
 80098d8:	7923      	ldrb	r3, [r4, #4]
 80098da:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
 80098de:	d218      	bcs.n	8009912 <ArtNet4Node::Start()+0x42>
 80098e0:	2301      	movs	r3, #1
 80098e2:	4629      	mov	r1, r5
 80098e4:	4630      	mov	r0, r6
 80098e6:	f10d 0206 	add.w	r2, sp, #6
 80098ea:	f000 fb37 	bl	8009f5c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 80098ee:	b170      	cbz	r0, 800990e <ArtNet4Node::Start()+0x3e>
 80098f0:	4629      	mov	r1, r5
 80098f2:	4630      	mov	r0, r6
 80098f4:	f000 fcbb 	bl	800a26e <ArtNetNode::GetPortProtocol(unsigned int) const>
 80098f8:	2801      	cmp	r0, #1
 80098fa:	d108      	bne.n	800990e <ArtNet4Node::Start()+0x3e>
 80098fc:	4629      	mov	r1, r5
 80098fe:	4630      	mov	r0, r6
 8009900:	f000 fce6 	bl	800a2d0 <ArtNetNode::GetMergeMode(unsigned int) const>
 8009904:	2344      	movs	r3, #68	; 0x44
 8009906:	436b      	muls	r3, r5
 8009908:	f604 5204 	addw	r2, r4, #3332	; 0xd04
 800990c:	50d0      	str	r0, [r2, r3]
 800990e:	3501      	adds	r5, #1
 8009910:	e7e2      	b.n	80098d8 <ArtNet4Node::Start()+0x8>
 8009912:	f8d4 36d0 	ldr.w	r3, [r4, #1744]	; 0x6d0
 8009916:	4630      	mov	r0, r6
 8009918:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800991c:	bf2c      	ite	cs
 800991e:	2300      	movcs	r3, #0
 8009920:	2301      	movcc	r3, #1
 8009922:	f884 3cb1 	strb.w	r3, [r4, #3249]	; 0xcb1
 8009926:	f894 36e0 	ldrb.w	r3, [r4, #1760]	; 0x6e0
 800992a:	f884 3cb2 	strb.w	r3, [r4, #3250]	; 0xcb2
 800992e:	68e3      	ldr	r3, [r4, #12]
 8009930:	f8c4 37bc 	str.w	r3, [r4, #1980]	; 0x7bc
 8009934:	f000 f840 	bl	80099b8 <ArtNetNode::Start()>
 8009938:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 800993c:	b002      	add	sp, #8
 800993e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009942:	f002 ba45 	b.w	800bdd0 <E131Bridge::Start()>

08009946 <ArtNet4Node::Run()>:
 8009946:	b510      	push	{r4, lr}
 8009948:	4604      	mov	r4, r0
 800994a:	3004      	adds	r0, #4
 800994c:	f000 fa28 	bl	8009da0 <ArtNetNode::Run()>
 8009950:	f894 3cc3 	ldrb.w	r3, [r4, #3267]	; 0xcc3
 8009954:	b12b      	cbz	r3, 8009962 <ArtNet4Node::Run()+0x1c>
 8009956:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 800995a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800995e:	f002 bedf 	b.w	800c720 <E131Bridge::Run()>
 8009962:	bd10      	pop	{r4, pc}

08009964 <ArtNet4Node::Print()>:
 8009964:	b510      	push	{r4, lr}
 8009966:	4604      	mov	r4, r0
 8009968:	3004      	adds	r0, #4
 800996a:	f001 fc31 	bl	800b1d0 <ArtNetNode::Print()>
 800996e:	f894 36e2 	ldrb.w	r3, [r4, #1762]	; 0x6e2
 8009972:	b15b      	cbz	r3, 800998c <ArtNet4Node::Print()+0x28>
 8009974:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 8009978:	b113      	cbz	r3, 8009980 <ArtNet4Node::Print()+0x1c>
 800997a:	4805      	ldr	r0, [pc, #20]	; (8009990 <ArtNet4Node::Print()+0x2c>)
 800997c:	f7ff fe76 	bl	800966c <printf>
 8009980:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 8009984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009988:	f003 b91e 	b.w	800cbc8 <E131Bridge::Print()>
 800998c:	bd10      	pop	{r4, pc}
 800998e:	bf00      	nop
 8009990:	08016b91 	stmdaeq	r1, {r0, r4, r7, r8, r9, fp, sp, lr}

08009994 <ArtNetNode::SetArtNet4Handler(ArtNet4Handler*)>:
 8009994:	61c1      	str	r1, [r0, #28]
 8009996:	4770      	bx	lr

08009998 <strncpy.isra.0>:
 8009998:	3901      	subs	r1, #1
 800999a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800999e:	b92b      	cbnz	r3, 80099ac <strncpy.isra.0+0x14>
 80099a0:	4402      	add	r2, r0
 80099a2:	4290      	cmp	r0, r2
 80099a4:	d007      	beq.n	80099b6 <strncpy.isra.0+0x1e>
 80099a6:	f800 3b01 	strb.w	r3, [r0], #1
 80099aa:	e7fa      	b.n	80099a2 <strncpy.isra.0+0xa>
 80099ac:	3a01      	subs	r2, #1
 80099ae:	f800 3b01 	strb.w	r3, [r0], #1
 80099b2:	d1f2      	bne.n	800999a <strncpy.isra.0+0x2>
 80099b4:	4770      	bx	lr
 80099b6:	4770      	bx	lr

080099b8 <ArtNetNode::Start()>:
 80099b8:	b570      	push	{r4, r5, r6, lr}
 80099ba:	4d1f      	ldr	r5, [pc, #124]	; (8009a38 <ArtNetNode::Start()+0x80>)
 80099bc:	f990 3096 	ldrsb.w	r3, [r0, #150]	; 0x96
 80099c0:	682a      	ldr	r2, [r5, #0]
 80099c2:	f023 0302 	bic.w	r3, r3, #2
 80099c6:	7851      	ldrb	r1, [r2, #1]
 80099c8:	4604      	mov	r4, r0
 80099ca:	2900      	cmp	r1, #0
 80099cc:	bf14      	ite	ne
 80099ce:	2102      	movne	r1, #2
 80099d0:	2100      	moveq	r1, #0
 80099d2:	430b      	orrs	r3, r1
 80099d4:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
 80099d8:	7812      	ldrb	r2, [r2, #0]
 80099da:	f023 0304 	bic.w	r3, r3, #4
 80099de:	2a00      	cmp	r2, #0
 80099e0:	bf14      	ite	ne
 80099e2:	2204      	movne	r2, #4
 80099e4:	2200      	moveq	r2, #0
 80099e6:	4313      	orrs	r3, r2
 80099e8:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
 80099ec:	f001 f8ec 	bl	800abc8 <ArtNetNode::FillPollReply()>
 80099f0:	f641 1136 	movw	r1, #6454	; 0x1936
 80099f4:	6828      	ldr	r0, [r5, #0]
 80099f6:	f008 fa6d 	bl	8011ed4 <Network::Begin(unsigned short)>
 80099fa:	2302      	movs	r3, #2
 80099fc:	f884 36d5 	strb.w	r3, [r4, #1749]	; 0x6d5
 8009a00:	6963      	ldr	r3, [r4, #20]
 8009a02:	6060      	str	r0, [r4, #4]
 8009a04:	b16b      	cbz	r3, 8009a22 <ArtNetNode::Start()+0x6a>
 8009a06:	2500      	movs	r5, #0
 8009a08:	f504 66ef 	add.w	r6, r4, #1912	; 0x778
 8009a0c:	012b      	lsls	r3, r5, #4
 8009a0e:	5cf3      	ldrb	r3, [r6, r3]
 8009a10:	b123      	cbz	r3, 8009a1c <ArtNetNode::Start()+0x64>
 8009a12:	6960      	ldr	r0, [r4, #20]
 8009a14:	4629      	mov	r1, r5
 8009a16:	6803      	ldr	r3, [r0, #0]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	4798      	blx	r3
 8009a1c:	3501      	adds	r5, #1
 8009a1e:	2d04      	cmp	r5, #4
 8009a20:	d1f4      	bne.n	8009a0c <ArtNetNode::Start()+0x54>
 8009a22:	4b06      	ldr	r3, [pc, #24]	; (8009a3c <ArtNetNode::Start()+0x84>)
 8009a24:	2102      	movs	r1, #2
 8009a26:	6818      	ldr	r0, [r3, #0]
 8009a28:	f00a fdb4 	bl	8014594 <LedBlink::SetMode(ledblink::Mode)>
 8009a2c:	4620      	mov	r0, r4
 8009a2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009a32:	2100      	movs	r1, #0
 8009a34:	f001 b93a 	b.w	800acac <ArtNetNode::SendPollRelply(bool)>
 8009a38:	2000a29c 	mulcs	r0, ip, r2
 8009a3c:	2000a9c0 	andcs	sl, r0, r0, asr #19

08009a40 <ArtNetNode::Stop()>:
 8009a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a44:	2500      	movs	r5, #0
 8009a46:	4604      	mov	r4, r0
 8009a48:	4606      	mov	r6, r0
 8009a4a:	46a9      	mov	r9, r5
 8009a4c:	f04f 0a01 	mov.w	sl, #1
 8009a50:	4f1f      	ldr	r7, [pc, #124]	; (8009ad0 <ArtNetNode::Stop()+0x90>)
 8009a52:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8009ad4 <ArtNetNode::Stop()+0x94>
 8009a56:	f8d6 3700 	ldr.w	r3, [r6, #1792]	; 0x700
 8009a5a:	b97b      	cbnz	r3, 8009a7c <ArtNetNode::Stop()+0x3c>
 8009a5c:	68a0      	ldr	r0, [r4, #8]
 8009a5e:	b118      	cbz	r0, 8009a68 <ArtNetNode::Stop()+0x28>
 8009a60:	6803      	ldr	r3, [r0, #0]
 8009a62:	4629      	mov	r1, r5
 8009a64:	68db      	ldr	r3, [r3, #12]
 8009a66:	4798      	blx	r3
 8009a68:	f8d8 3000 	ldr.w	r3, [r8]
 8009a6c:	f8c7 9600 	str.w	r9, [r7, #1536]	; 0x600
 8009a70:	07db      	lsls	r3, r3, #31
 8009a72:	bf58      	it	pl
 8009a74:	f8c8 a000 	strpl.w	sl, [r8]
 8009a78:	f886 9705 	strb.w	r9, [r6, #1797]	; 0x705
 8009a7c:	3501      	adds	r5, #1
 8009a7e:	2d04      	cmp	r5, #4
 8009a80:	f106 0624 	add.w	r6, r6, #36	; 0x24
 8009a84:	f207 6704 	addw	r7, r7, #1540	; 0x604
 8009a88:	d1e5      	bne.n	8009a56 <ArtNetNode::Stop()+0x16>
 8009a8a:	6963      	ldr	r3, [r4, #20]
 8009a8c:	b16b      	cbz	r3, 8009aaa <ArtNetNode::Stop()+0x6a>
 8009a8e:	2500      	movs	r5, #0
 8009a90:	f504 66ef 	add.w	r6, r4, #1912	; 0x778
 8009a94:	012b      	lsls	r3, r5, #4
 8009a96:	5cf3      	ldrb	r3, [r6, r3]
 8009a98:	b123      	cbz	r3, 8009aa4 <ArtNetNode::Stop()+0x64>
 8009a9a:	6960      	ldr	r0, [r4, #20]
 8009a9c:	4629      	mov	r1, r5
 8009a9e:	6803      	ldr	r3, [r0, #0]
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	4798      	blx	r3
 8009aa4:	3501      	adds	r5, #1
 8009aa6:	2d04      	cmp	r5, #4
 8009aa8:	d1f4      	bne.n	8009a94 <ArtNetNode::Stop()+0x54>
 8009aaa:	4b0b      	ldr	r3, [pc, #44]	; (8009ad8 <ArtNetNode::Stop()+0x98>)
 8009aac:	2100      	movs	r1, #0
 8009aae:	6818      	ldr	r0, [r3, #0]
 8009ab0:	f00a fd70 	bl	8014594 <LedBlink::SetMode(ledblink::Mode)>
 8009ab4:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8009ab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009abc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009ac0:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	f884 36d5 	strb.w	r3, [r4, #1749]	; 0x6d5
 8009aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ace:	bf00      	nop
 8009ad0:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8009ad4:	200000ec 	andcs	r0, r0, ip, ror #1
 8009ad8:	2000a9c0 	andcs	sl, r0, r0, asr #19

08009adc <ArtNetNode::SetShortName(char const*)>:
 8009adc:	b570      	push	{r4, r5, r6, lr}
 8009ade:	f100 0542 	add.w	r5, r0, #66	; 0x42
 8009ae2:	4604      	mov	r4, r0
 8009ae4:	2211      	movs	r2, #17
 8009ae6:	4628      	mov	r0, r5
 8009ae8:	f7ff ff56 	bl	8009998 <strncpy.isra.0>
 8009aec:	2300      	movs	r3, #0
 8009aee:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
 8009af2:	462b      	mov	r3, r5
 8009af4:	f104 0154 	add.w	r1, r4, #84	; 0x54
 8009af8:	428b      	cmp	r3, r1
 8009afa:	d004      	beq.n	8009b06 <ArtNetNode::SetShortName(char const*)+0x2a>
 8009afc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b00:	f883 254b 	strb.w	r2, [r3, #1355]	; 0x54b
 8009b04:	e7f8      	b.n	8009af8 <ArtNetNode::SetShortName(char const*)+0x1c>
 8009b06:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 8009b0a:	2b02      	cmp	r3, #2
 8009b0c:	d10d      	bne.n	8009b2a <ArtNetNode::SetShortName(char const*)+0x4e>
 8009b0e:	6a20      	ldr	r0, [r4, #32]
 8009b10:	b118      	cbz	r0, 8009b1a <ArtNetNode::SetShortName(char const*)+0x3e>
 8009b12:	6803      	ldr	r3, [r0, #0]
 8009b14:	4629      	mov	r1, r5
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	4798      	blx	r3
 8009b1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009b1c:	b128      	cbz	r0, 8009b2a <ArtNetNode::SetShortName(char const*)+0x4e>
 8009b1e:	6803      	ldr	r3, [r0, #0]
 8009b20:	4629      	mov	r1, r5
 8009b22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	4718      	bx	r3
 8009b2a:	bd70      	pop	{r4, r5, r6, pc}

08009b2c <ArtNetNode::SetLongName(char const*)>:
 8009b2c:	b570      	push	{r4, r5, r6, lr}
 8009b2e:	f100 0554 	add.w	r5, r0, #84	; 0x54
 8009b32:	4604      	mov	r4, r0
 8009b34:	223f      	movs	r2, #63	; 0x3f
 8009b36:	4628      	mov	r0, r5
 8009b38:	f7ff ff2e 	bl	8009998 <strncpy.isra.0>
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
 8009b42:	462b      	mov	r3, r5
 8009b44:	f104 0194 	add.w	r1, r4, #148	; 0x94
 8009b48:	428b      	cmp	r3, r1
 8009b4a:	d004      	beq.n	8009b56 <ArtNetNode::SetLongName(char const*)+0x2a>
 8009b4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b50:	f883 254b 	strb.w	r2, [r3, #1355]	; 0x54b
 8009b54:	e7f8      	b.n	8009b48 <ArtNetNode::SetLongName(char const*)+0x1c>
 8009b56:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 8009b5a:	2b02      	cmp	r3, #2
 8009b5c:	d10d      	bne.n	8009b7a <ArtNetNode::SetLongName(char const*)+0x4e>
 8009b5e:	6a20      	ldr	r0, [r4, #32]
 8009b60:	b118      	cbz	r0, 8009b6a <ArtNetNode::SetLongName(char const*)+0x3e>
 8009b62:	6803      	ldr	r3, [r0, #0]
 8009b64:	4629      	mov	r1, r5
 8009b66:	68db      	ldr	r3, [r3, #12]
 8009b68:	4798      	blx	r3
 8009b6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009b6c:	b128      	cbz	r0, 8009b7a <ArtNetNode::SetLongName(char const*)+0x4e>
 8009b6e:	6803      	ldr	r3, [r0, #0]
 8009b70:	4629      	mov	r1, r5
 8009b72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	4718      	bx	r3
 8009b7a:	bd70      	pop	{r4, r5, r6, pc}

08009b7c <ArtNetNode::ArtNetNode(unsigned char)>:
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b82:	2901      	cmp	r1, #1
 8009b84:	bf28      	it	cs
 8009b86:	2101      	movcs	r1, #1
 8009b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b8a:	4604      	mov	r4, r0
 8009b8c:	e9c0 2301 	strd	r2, r3, [r0, #4]
 8009b90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b94:	4a41      	ldr	r2, [pc, #260]	; (8009c9c <ArtNetNode::ArtNetNode(unsigned char)+0x120>)
 8009b96:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8009b9a:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8009b9e:	7001      	strb	r1, [r0, #0]
 8009ba0:	6010      	str	r0, [r2, #0]
 8009ba2:	b085      	sub	sp, #20
 8009ba4:	6243      	str	r3, [r0, #36]	; 0x24
 8009ba6:	f8c0 3664 	str.w	r3, [r0, #1636]	; 0x664
 8009baa:	f8c0 3668 	str.w	r3, [r0, #1640]	; 0x668
 8009bae:	f880 366e 	strb.w	r3, [r0, #1646]	; 0x66e
 8009bb2:	f100 0228 	add.w	r2, r0, #40	; 0x28
 8009bb6:	f100 01a0 	add.w	r1, r0, #160	; 0xa0
 8009bba:	428a      	cmp	r2, r1
 8009bbc:	d002      	beq.n	8009bc4 <ArtNetNode::ArtNetNode(unsigned char)+0x48>
 8009bbe:	f802 3b01 	strb.w	r3, [r2], #1
 8009bc2:	e7fa      	b.n	8009bba <ArtNetNode::ArtNetNode(unsigned char)+0x3e>
 8009bc4:	4b36      	ldr	r3, [pc, #216]	; (8009ca0 <ArtNetNode::ArtNetNode(unsigned char)+0x124>)
 8009bc6:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8009bca:	6818      	ldr	r0, [r3, #0]
 8009bcc:	6903      	ldr	r3, [r0, #16]
 8009bce:	62a3      	str	r3, [r4, #40]	; 0x28
 8009bd0:	6982      	ldr	r2, [r0, #24]
 8009bd2:	ea63 0302 	orn	r3, r3, r2
 8009bd6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009bd8:	6363      	str	r3, [r4, #52]	; 0x34
 8009bda:	f008 f981 	bl	8011ee0 <Network::MacAddressCopyTo(unsigned char*)>
 8009bde:	23d0      	movs	r3, #208	; 0xd0
 8009be0:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8009be4:	f244 0318 	movw	r3, #16408	; 0x4018
 8009be8:	2200      	movs	r2, #0
 8009bea:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 8009bee:	f204 61e4 	addw	r1, r4, #1764	; 0x6e4
 8009bf2:	f504 63d8 	add.w	r3, r4, #1728	; 0x6c0
 8009bf6:	428b      	cmp	r3, r1
 8009bf8:	d002      	beq.n	8009c00 <ArtNetNode::ArtNetNode(unsigned char)+0x84>
 8009bfa:	f803 2b01 	strb.w	r2, [r3], #1
 8009bfe:	e7fa      	b.n	8009bf6 <ArtNetNode::ArtNetNode(unsigned char)+0x7a>
 8009c00:	f240 1201 	movw	r2, #257	; 0x101
 8009c04:	f8a4 26d4 	strh.w	r2, [r4, #1748]	; 0x6d4
 8009c08:	f242 7210 	movw	r2, #10000	; 0x2710
 8009c0c:	2500      	movs	r5, #0
 8009c0e:	2708      	movs	r7, #8
 8009c10:	f8c4 26cc 	str.w	r2, [r4, #1740]	; 0x6cc
 8009c14:	f204 7174 	addw	r1, r4, #1908	; 0x774
 8009c18:	f204 76b4 	addw	r6, r4, #1972	; 0x7b4
 8009c1c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009c20:	4283      	cmp	r3, r0
 8009c22:	d005      	beq.n	8009c30 <ArtNetNode::ArtNetNode(unsigned char)+0xb4>
 8009c24:	f803 5b01 	strb.w	r5, [r3], #1
 8009c28:	e7fa      	b.n	8009c20 <ArtNetNode::ArtNetNode(unsigned char)+0xa4>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	4611      	mov	r1, r2
 8009c2e:	e7f5      	b.n	8009c1c <ArtNetNode::ArtNetNode(unsigned char)+0xa0>
 8009c30:	460a      	mov	r2, r1
 8009c32:	f101 0310 	add.w	r3, r1, #16
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d002      	beq.n	8009c40 <ArtNetNode::ArtNetNode(unsigned char)+0xc4>
 8009c3a:	f802 5b01 	strb.w	r5, [r2], #1
 8009c3e:	e7fa      	b.n	8009c36 <ArtNetNode::ArtNetNode(unsigned char)+0xba>
 8009c40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009c42:	4296      	cmp	r6, r2
 8009c44:	608b      	str	r3, [r1, #8]
 8009c46:	70cf      	strb	r7, [r1, #3]
 8009c48:	d1ef      	bne.n	8009c2a <ArtNetNode::ArtNetNode(unsigned char)+0xae>
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	4915      	ldr	r1, [pc, #84]	; (8009ca4 <ArtNetNode::ArtNetNode(unsigned char)+0x128>)
 8009c4e:	f7ff ff45 	bl	8009adc <ArtNetNode::SetShortName(char const*)>
 8009c52:	4b15      	ldr	r3, [pc, #84]	; (8009ca8 <ArtNetNode::ArtNetNode(unsigned char)+0x12c>)
 8009c54:	f204 657f 	addw	r5, r4, #1663	; 0x67f
 8009c58:	9302      	str	r3, [sp, #8]
 8009c5a:	2304      	movs	r3, #4
 8009c5c:	9301      	str	r3, [sp, #4]
 8009c5e:	4b13      	ldr	r3, [pc, #76]	; (8009cac <ArtNetNode::ArtNetNode(unsigned char)+0x130>)
 8009c60:	4a13      	ldr	r2, [pc, #76]	; (8009cb0 <ArtNetNode::ArtNetNode(unsigned char)+0x134>)
 8009c62:	9300      	str	r3, [sp, #0]
 8009c64:	2140      	movs	r1, #64	; 0x40
 8009c66:	4b13      	ldr	r3, [pc, #76]	; (8009cb4 <ArtNetNode::ArtNetNode(unsigned char)+0x138>)
 8009c68:	4628      	mov	r0, r5
 8009c6a:	f7ff fd27 	bl	80096bc <snprintf>
 8009c6e:	4629      	mov	r1, r5
 8009c70:	4620      	mov	r0, r4
 8009c72:	f7ff ff5b 	bl	8009b2c <ArtNetNode::SetLongName(char const*)>
 8009c76:	4b10      	ldr	r3, [pc, #64]	; (8009cb8 <ArtNetNode::ArtNetNode(unsigned char)+0x13c>)
 8009c78:	f204 606f 	addw	r0, r4, #1647	; 0x66f
 8009c7c:	781a      	ldrb	r2, [r3, #0]
 8009c7e:	490f      	ldr	r1, [pc, #60]	; (8009cbc <ArtNetNode::ArtNetNode(unsigned char)+0x140>)
 8009c80:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 8009c84:	785b      	ldrb	r3, [r3, #1]
 8009c86:	220f      	movs	r2, #15
 8009c88:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009c8c:	f7ff fe84 	bl	8009998 <strncpy.isra.0>
 8009c90:	2300      	movs	r3, #0
 8009c92:	4620      	mov	r0, r4
 8009c94:	f884 367e 	strb.w	r3, [r4, #1662]	; 0x67e
 8009c98:	b005      	add	sp, #20
 8009c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c9c:	20001900 	andcs	r1, r0, r0, lsl #18
 8009ca0:	2000a29c 	mulcs	r0, ip, r2
 8009ca4:	08016c40 	stmdaeq	r1, {r6, sl, fp, sp, lr}
 8009ca8:	08016c1b 	stmdaeq	r1, {r0, r1, r3, r4, sl, fp, sp, lr}
 8009cac:	08016c38 	stmdaeq	r1, {r3, r4, r5, sl, fp, sp, lr}
 8009cb0:	08016c0f 	stmdaeq	r1, {r0, r1, r2, r3, sl, fp, sp, lr}
 8009cb4:	08016c05 	stmdaeq	r1, {r0, r2, sl, fp, sp, lr}
 8009cb8:	08016f01 	stmdaeq	r1, {r0, r8, r9, sl, fp, sp, lr}
 8009cbc:	08016c2f 	stmdaeq	r1, {r0, r1, r2, r3, r5, sl, fp, sp, lr}

08009cc0 <ArtNetNode::SetOemValue(unsigned char const*)>:
 8009cc0:	780b      	ldrb	r3, [r1, #0]
 8009cc2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8009cc6:	784b      	ldrb	r3, [r1, #1]
 8009cc8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8009ccc:	4770      	bx	lr
	...

08009cd0 <ArtNetNode::SetNetworkDataLossCondition()>:
 8009cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cd4:	2400      	movs	r4, #0
 8009cd6:	4606      	mov	r6, r0
 8009cd8:	4605      	mov	r5, r0
 8009cda:	46a0      	mov	r8, r4
 8009cdc:	46a2      	mov	sl, r4
 8009cde:	4f1a      	ldr	r7, [pc, #104]	; (8009d48 <ArtNetNode::SetNetworkDataLossCondition()+0x78>)
 8009ce0:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8009d4c <ArtNetNode::SetNetworkDataLossCondition()+0x7c>
 8009ce4:	f880 46da 	strb.w	r4, [r0, #1754]	; 0x6da
 8009ce8:	f880 46d9 	strb.w	r4, [r0, #1753]	; 0x6d9
 8009cec:	7833      	ldrb	r3, [r6, #0]
 8009cee:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
 8009cf2:	d227      	bcs.n	8009d44 <ArtNetNode::SetNetworkDataLossCondition()+0x74>
 8009cf4:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 8009cf8:	b953      	cbnz	r3, 8009d10 <ArtNetNode::SetNetworkDataLossCondition()+0x40>
 8009cfa:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 8009cfe:	b13b      	cbz	r3, 8009d10 <ArtNetNode::SetNetworkDataLossCondition()+0x40>
 8009d00:	68b0      	ldr	r0, [r6, #8]
 8009d02:	b118      	cbz	r0, 8009d0c <ArtNetNode::SetNetworkDataLossCondition()+0x3c>
 8009d04:	6803      	ldr	r3, [r0, #0]
 8009d06:	4621      	mov	r1, r4
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	4798      	blx	r3
 8009d0c:	f885 8705 	strb.w	r8, [r5, #1797]	; 0x705
 8009d10:	f895 36e7 	ldrb.w	r3, [r5, #1767]	; 0x6e7
 8009d14:	f8c5 86f0 	str.w	r8, [r5, #1776]	; 0x6f0
 8009d18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d1c:	f885 36e7 	strb.w	r3, [r5, #1767]	; 0x6e7
 8009d20:	f8c5 86f8 	str.w	r8, [r5, #1784]	; 0x6f8
 8009d24:	f8d9 3000 	ldr.w	r3, [r9]
 8009d28:	f8c7 a600 	str.w	sl, [r7, #1536]	; 0x600
 8009d2c:	07db      	lsls	r3, r3, #31
 8009d2e:	bf58      	it	pl
 8009d30:	2301      	movpl	r3, #1
 8009d32:	f104 0401 	add.w	r4, r4, #1
 8009d36:	bf58      	it	pl
 8009d38:	f8c9 3000 	strpl.w	r3, [r9]
 8009d3c:	f207 6704 	addw	r7, r7, #1540	; 0x604
 8009d40:	3524      	adds	r5, #36	; 0x24
 8009d42:	e7d3      	b.n	8009cec <ArtNetNode::SetNetworkDataLossCondition()+0x1c>
 8009d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d48:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8009d4c:	200000ec 	andcs	r0, r0, ip, ror #1

08009d50 <ArtNetNode::GetType()>:
 8009d50:	f8b0 3570 	ldrh.w	r3, [r0, #1392]	; 0x570
 8009d54:	b530      	push	{r4, r5, lr}
 8009d56:	2b0b      	cmp	r3, #11
 8009d58:	d803      	bhi.n	8009d62 <ArtNetNode::GetType()+0x12>
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	f8a0 3572 	strh.w	r3, [r0, #1394]	; 0x572
 8009d60:	bd30      	pop	{r4, r5, pc}
 8009d62:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d1f7      	bne.n	8009d5a <ArtNetNode::GetType()+0xa>
 8009d6a:	f890 30ab 	ldrb.w	r3, [r0, #171]	; 0xab
 8009d6e:	2b0e      	cmp	r3, #14
 8009d70:	d1f3      	bne.n	8009d5a <ArtNetNode::GetType()+0xa>
 8009d72:	4a0a      	ldr	r2, [pc, #40]	; (8009d9c <ArtNetNode::GetType()+0x4c>)
 8009d74:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
 8009d78:	f100 05a8 	add.w	r5, r0, #168	; 0xa8
 8009d7c:	42ab      	cmp	r3, r5
 8009d7e:	d006      	beq.n	8009d8e <ArtNetNode::GetType()+0x3e>
 8009d80:	f813 4b01 	ldrb.w	r4, [r3], #1
 8009d84:	f812 1b01 	ldrb.w	r1, [r2], #1
 8009d88:	428c      	cmp	r4, r1
 8009d8a:	d0f7      	beq.n	8009d7c <ArtNetNode::GetType()+0x2c>
 8009d8c:	e7e5      	b.n	8009d5a <ArtNetNode::GetType()+0xa>
 8009d8e:	f890 20a9 	ldrb.w	r2, [r0, #169]	; 0xa9
 8009d92:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
 8009d96:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009d9a:	e7df      	b.n	8009d5c <ArtNetNode::GetType()+0xc>
 8009d9c:	08016a4c 	stmdaeq	r1, {r2, r3, r6, r9, fp, sp, lr}

08009da0 <ArtNetNode::Run()>:
 8009da0:	b530      	push	{r4, r5, lr}
 8009da2:	b085      	sub	sp, #20
 8009da4:	f10d 030e 	add.w	r3, sp, #14
 8009da8:	9300      	str	r3, [sp, #0]
 8009daa:	4604      	mov	r4, r0
 8009dac:	f200 536c 	addw	r3, r0, #1388	; 0x56c
 8009db0:	f100 01a0 	add.w	r1, r0, #160	; 0xa0
 8009db4:	f240 42cc 	movw	r2, #1228	; 0x4cc
 8009db8:	7900      	ldrb	r0, [r0, #4]
 8009dba:	f007 fb61 	bl	8011480 <udp_recv>
 8009dbe:	4b65      	ldr	r3, [pc, #404]	; (8009f54 <ArtNetNode::Run()+0x1b4>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f8c4 3664 	str.w	r3, [r4, #1636]	; 0x664
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	d143      	bne.n	8009e52 <ArtNetNode::Run()+0xb2>
 8009dca:	f8d4 26cc 	ldr.w	r2, [r4, #1740]	; 0x6cc
 8009dce:	b13a      	cbz	r2, 8009de0 <ArtNetNode::Run()+0x40>
 8009dd0:	f8d4 1668 	ldr.w	r1, [r4, #1640]	; 0x668
 8009dd4:	1a5b      	subs	r3, r3, r1
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d802      	bhi.n	8009de0 <ArtNetNode::Run()+0x40>
 8009dda:	4620      	mov	r0, r4
 8009ddc:	f7ff ff78 	bl	8009cd0 <ArtNetNode::SetNetworkDataLossCondition()>
 8009de0:	f894 36d6 	ldrb.w	r3, [r4, #1750]	; 0x6d6
 8009de4:	b16b      	cbz	r3, 8009e02 <ArtNetNode::Run()+0x62>
 8009de6:	69e0      	ldr	r0, [r4, #28]
 8009de8:	f894 56db 	ldrb.w	r5, [r4, #1755]	; 0x6db
 8009dec:	b120      	cbz	r0, 8009df8 <ArtNetNode::Run()+0x58>
 8009dee:	6803      	ldr	r3, [r0, #0]
 8009df0:	695b      	ldr	r3, [r3, #20]
 8009df2:	4798      	blx	r3
 8009df4:	4305      	orrs	r5, r0
 8009df6:	b2ed      	uxtb	r5, r5
 8009df8:	b11d      	cbz	r5, 8009e02 <ArtNetNode::Run()+0x62>
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	4620      	mov	r0, r4
 8009dfe:	f000 ff55 	bl	800acac <ArtNetNode::SendPollRelply(bool)>
 8009e02:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 8009e06:	f8d4 2668 	ldr.w	r2, [r4, #1640]	; 0x668
 8009e0a:	1a9b      	subs	r3, r3, r2
 8009e0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e10:	d305      	bcc.n	8009e1e <ArtNetNode::Run()+0x7e>
 8009e12:	f894 36dd 	ldrb.w	r3, [r4, #1757]	; 0x6dd
 8009e16:	f023 0302 	bic.w	r3, r3, #2
 8009e1a:	f884 36dd 	strb.w	r3, [r4, #1757]	; 0x6dd
 8009e1e:	6963      	ldr	r3, [r4, #20]
 8009e20:	b113      	cbz	r3, 8009e28 <ArtNetNode::Run()+0x88>
 8009e22:	4620      	mov	r0, r4
 8009e24:	f000 fd56 	bl	800a8d4 <ArtNetNode::HandleDmxIn()>
 8009e28:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8009e2c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009e30:	2bc0      	cmp	r3, #192	; 0xc0
 8009e32:	d10c      	bne.n	8009e4e <ArtNetNode::Run()+0xae>
 8009e34:	4b48      	ldr	r3, [pc, #288]	; (8009f58 <ArtNetNode::Run()+0x1b8>)
 8009e36:	6818      	ldr	r0, [r3, #0]
 8009e38:	6843      	ldr	r3, [r0, #4]
 8009e3a:	2b04      	cmp	r3, #4
 8009e3c:	d007      	beq.n	8009e4e <ArtNetNode::Run()+0xae>
 8009e3e:	f894 36dd 	ldrb.w	r3, [r4, #1757]	; 0x6dd
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	f000 8084 	beq.w	8009f50 <ArtNetNode::Run()+0x1b0>
 8009e48:	2103      	movs	r1, #3
 8009e4a:	f00a fba3 	bl	8014594 <LedBlink::SetMode(ledblink::Mode)>
 8009e4e:	b005      	add	sp, #20
 8009e50:	bd30      	pop	{r4, r5, pc}
 8009e52:	f8a4 0570 	strh.w	r0, [r4, #1392]	; 0x570
 8009e56:	f8c4 3668 	str.w	r3, [r4, #1640]	; 0x668
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	f7ff ff78 	bl	8009d50 <ArtNetNode::GetType()>
 8009e60:	f894 36d9 	ldrb.w	r3, [r4, #1753]	; 0x6d9
 8009e64:	b153      	cbz	r3, 8009e7c <ArtNetNode::Run()+0xdc>
 8009e66:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 8009e6a:	f8d4 26d0 	ldr.w	r2, [r4, #1744]	; 0x6d0
 8009e6e:	1a9b      	subs	r3, r3, r2
 8009e70:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8009e74:	bf24      	itt	cs
 8009e76:	2300      	movcs	r3, #0
 8009e78:	f884 36d9 	strbcs.w	r3, [r4, #1753]	; 0x6d9
 8009e7c:	f8b4 3572 	ldrh.w	r3, [r4, #1394]	; 0x572
 8009e80:	f5b3 4f02 	cmp.w	r3, #33280	; 0x8200
 8009e84:	d04c      	beq.n	8009f20 <ArtNetNode::Run()+0x180>
 8009e86:	d81d      	bhi.n	8009ec4 <ArtNetNode::Run()+0x124>
 8009e88:	f5b3 4fa4 	cmp.w	r3, #20992	; 0x5200
 8009e8c:	d039      	beq.n	8009f02 <ArtNetNode::Run()+0x162>
 8009e8e:	d80c      	bhi.n	8009eaa <ArtNetNode::Run()+0x10a>
 8009e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e94:	d031      	beq.n	8009efa <ArtNetNode::Run()+0x15a>
 8009e96:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009e9a:	d1c0      	bne.n	8009e1e <ArtNetNode::Run()+0x7e>
 8009e9c:	68a3      	ldr	r3, [r4, #8]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d0bd      	beq.n	8009e1e <ArtNetNode::Run()+0x7e>
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	f000 fc2e 	bl	800a704 <ArtNetNode::HandleDmx()>
 8009ea8:	e7b9      	b.n	8009e1e <ArtNetNode::Run()+0x7e>
 8009eaa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009eae:	d02f      	beq.n	8009f10 <ArtNetNode::Run()+0x170>
 8009eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009eb4:	d1b3      	bne.n	8009e1e <ArtNetNode::Run()+0x7e>
 8009eb6:	6923      	ldr	r3, [r4, #16]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d0b0      	beq.n	8009e1e <ArtNetNode::Run()+0x7e>
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	f001 f889 	bl	800afd4 <ArtNetNode::HandleTodRequest()>
 8009ec2:	e7ac      	b.n	8009e1e <ArtNetNode::Run()+0x7e>
 8009ec4:	f5b3 4f18 	cmp.w	r3, #38912	; 0x9800
 8009ec8:	d026      	beq.n	8009f18 <ArtNetNode::Run()+0x178>
 8009eca:	d80c      	bhi.n	8009ee6 <ArtNetNode::Run()+0x146>
 8009ecc:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 8009ed0:	d02e      	beq.n	8009f30 <ArtNetNode::Run()+0x190>
 8009ed2:	f5b3 4f17 	cmp.w	r3, #38656	; 0x9700
 8009ed6:	d1a2      	bne.n	8009e1e <ArtNetNode::Run()+0x7e>
 8009ed8:	68e3      	ldr	r3, [r4, #12]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d09f      	beq.n	8009e1e <ArtNetNode::Run()+0x7e>
 8009ede:	4620      	mov	r0, r4
 8009ee0:	f001 f94e 	bl	800b180 <ArtNetNode::HandleTimeCode()>
 8009ee4:	e79b      	b.n	8009e1e <ArtNetNode::Run()+0x7e>
 8009ee6:	f5b3 4f19 	cmp.w	r3, #39168	; 0x9900
 8009eea:	d029      	beq.n	8009f40 <ArtNetNode::Run()+0x1a0>
 8009eec:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 8009ef0:	d195      	bne.n	8009e1e <ArtNetNode::Run()+0x7e>
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	f000 fd9c 	bl	800aa30 <ArtNetNode::HandleIpProg()>
 8009ef8:	e791      	b.n	8009e1e <ArtNetNode::Run()+0x7e>
 8009efa:	4620      	mov	r0, r4
 8009efc:	f000 ff9c 	bl	800ae38 <ArtNetNode::HandlePoll()>
 8009f00:	e78d      	b.n	8009e1e <ArtNetNode::Run()+0x7e>
 8009f02:	68a3      	ldr	r3, [r4, #8]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d08a      	beq.n	8009e1e <ArtNetNode::Run()+0x7e>
 8009f08:	4620      	mov	r0, r4
 8009f0a:	f001 f8ed 	bl	800b0e8 <ArtNetNode::HandleSync()>
 8009f0e:	e786      	b.n	8009e1e <ArtNetNode::Run()+0x7e>
 8009f10:	4620      	mov	r0, r4
 8009f12:	f000 f9e3 	bl	800a2dc <ArtNetNode::HandleAddress()>
 8009f16:	e782      	b.n	8009e1e <ArtNetNode::Run()+0x7e>
 8009f18:	4620      	mov	r0, r4
 8009f1a:	f001 f937 	bl	800b18c <ArtNetNode::HandleTimeSync()>
 8009f1e:	e77e      	b.n	8009e1e <ArtNetNode::Run()+0x7e>
 8009f20:	6923      	ldr	r3, [r4, #16]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	f43f af7b 	beq.w	8009e1e <ArtNetNode::Run()+0x7e>
 8009f28:	4620      	mov	r0, r4
 8009f2a:	f001 f819 	bl	800af60 <ArtNetNode::HandleTodControl()>
 8009f2e:	e776      	b.n	8009e1e <ArtNetNode::Run()+0x7e>
 8009f30:	6923      	ldr	r3, [r4, #16]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f43f af73 	beq.w	8009e1e <ArtNetNode::Run()+0x7e>
 8009f38:	4620      	mov	r0, r4
 8009f3a:	f001 f867 	bl	800b00c <ArtNetNode::HandleRdm()>
 8009f3e:	e76e      	b.n	8009e1e <ArtNetNode::Run()+0x7e>
 8009f40:	69a3      	ldr	r3, [r4, #24]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	f43f af6b 	beq.w	8009e1e <ArtNetNode::Run()+0x7e>
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f001 fef1 	bl	800bd30 <ArtNetNode::HandleTrigger()>
 8009f4e:	e766      	b.n	8009e1e <ArtNetNode::Run()+0x7e>
 8009f50:	2102      	movs	r1, #2
 8009f52:	e77a      	b.n	8009e4a <ArtNetNode::Run()+0xaa>
 8009f54:	2000a9dc 	ldrdcs	sl, [r0], -ip
 8009f58:	2000a9c0 	andcs	sl, r0, r0, asr #19

08009f5c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>:
 8009f5c:	b93b      	cbnz	r3, 8009f6e <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const+0x12>
 8009f5e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8009f62:	f8b0 3774 	ldrh.w	r3, [r0, #1908]	; 0x774
 8009f66:	8013      	strh	r3, [r2, #0]
 8009f68:	f890 0778 	ldrb.w	r0, [r0, #1912]	; 0x778
 8009f6c:	4770      	bx	lr
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	bf01      	itttt	eq
 8009f72:	2324      	moveq	r3, #36	; 0x24
 8009f74:	fb03 0001 	mlaeq	r0, r3, r1, r0
 8009f78:	f8b0 36e4 	ldrheq.w	r3, [r0, #1764]	; 0x6e4
 8009f7c:	f890 06e8 	ldrbeq.w	r0, [r0, #1768]	; 0x6e8
 8009f80:	bf0c      	ite	eq
 8009f82:	8013      	strheq	r3, [r2, #0]
 8009f84:	2000      	movne	r0, #0
 8009f86:	4770      	bx	lr

08009f88 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>:
 8009f88:	b94b      	cbnz	r3, 8009f9e <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x16>
 8009f8a:	2903      	cmp	r1, #3
 8009f8c:	d810      	bhi.n	8009fb0 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x28>
 8009f8e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8009f92:	f890 3776 	ldrb.w	r3, [r0, #1910]	; 0x776
 8009f96:	7013      	strb	r3, [r2, #0]
 8009f98:	f890 0778 	ldrb.w	r0, [r0, #1912]	; 0x778
 8009f9c:	4770      	bx	lr
 8009f9e:	2324      	movs	r3, #36	; 0x24
 8009fa0:	fb03 0001 	mla	r0, r3, r1, r0
 8009fa4:	f890 36e6 	ldrb.w	r3, [r0, #1766]	; 0x6e6
 8009fa8:	7013      	strb	r3, [r2, #0]
 8009faa:	f890 06e8 	ldrb.w	r0, [r0, #1768]	; 0x6e8
 8009fae:	4770      	bx	lr
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	4770      	bx	lr

08009fb4 <ArtNetNode::GetSubnetSwitch(unsigned int) const>:
 8009fb4:	4408      	add	r0, r1
 8009fb6:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 8009fba:	4770      	bx	lr

08009fbc <ArtNetNode::GetNetSwitch(unsigned int) const>:
 8009fbc:	4408      	add	r0, r1
 8009fbe:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8009fc2:	4770      	bx	lr

08009fc4 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>:
 8009fc4:	4402      	add	r2, r0
 8009fc6:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 8009fca:	f892 003f 	ldrb.w	r0, [r2, #63]	; 0x3f
 8009fce:	021b      	lsls	r3, r3, #8
 8009fd0:	0100      	lsls	r0, r0, #4
 8009fd2:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8009fd6:	b2c0      	uxtb	r0, r0
 8009fd8:	4318      	orrs	r0, r3
 8009fda:	f001 010f 	and.w	r1, r1, #15
 8009fde:	4308      	orrs	r0, r1
 8009fe0:	4770      	bx	lr

08009fe2 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>:
 8009fe2:	2903      	cmp	r1, #3
 8009fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fe8:	4604      	mov	r4, r0
 8009fea:	460d      	mov	r5, r1
 8009fec:	4617      	mov	r7, r2
 8009fee:	461e      	mov	r6, r3
 8009ff0:	f200 80a3 	bhi.w	800a13a <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x158>
 8009ff4:	2a02      	cmp	r2, #2
 8009ff6:	d121      	bne.n	800a03c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x5a>
 8009ff8:	2324      	movs	r3, #36	; 0x24
 8009ffa:	fb03 0301 	mla	r3, r3, r1, r0
 8009ffe:	f893 26e8 	ldrb.w	r2, [r3, #1768]	; 0x6e8
 800a002:	b13a      	cbz	r2, 800a014 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x32>
 800a004:	2200      	movs	r2, #0
 800a006:	f883 26e8 	strb.w	r2, [r3, #1768]	; 0x6e8
 800a00a:	f890 36de 	ldrb.w	r3, [r0, #1758]	; 0x6de
 800a00e:	3b01      	subs	r3, #1
 800a010:	f880 36de 	strb.w	r3, [r0, #1758]	; 0x6de
 800a014:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 800a018:	f895 3778 	ldrb.w	r3, [r5, #1912]	; 0x778
 800a01c:	b90b      	cbnz	r3, 800a022 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x40>
 800a01e:	2000      	movs	r0, #0
 800a020:	e00a      	b.n	800a038 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x56>
 800a022:	2308      	movs	r3, #8
 800a024:	2000      	movs	r0, #0
 800a026:	f885 3777 	strb.w	r3, [r5, #1911]	; 0x777
 800a02a:	f885 0778 	strb.w	r0, [r5, #1912]	; 0x778
 800a02e:	f894 36df 	ldrb.w	r3, [r4, #1759]	; 0x6df
 800a032:	3b01      	subs	r3, #1
 800a034:	f884 36df 	strb.w	r3, [r4, #1759]	; 0x6df
 800a038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a03c:	2a00      	cmp	r2, #0
 800a03e:	d13b      	bne.n	800a0b8 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xd6>
 800a040:	eb00 1801 	add.w	r8, r0, r1, lsl #4
 800a044:	f898 3778 	ldrb.w	r3, [r8, #1912]	; 0x778
 800a048:	b923      	cbnz	r3, 800a054 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x72>
 800a04a:	f890 36df 	ldrb.w	r3, [r0, #1759]	; 0x6df
 800a04e:	3301      	adds	r3, #1
 800a050:	f880 36df 	strb.w	r3, [r0, #1759]	; 0x6df
 800a054:	2301      	movs	r3, #1
 800a056:	f04f 0900 	mov.w	r9, #0
 800a05a:	f888 3778 	strb.w	r3, [r8, #1912]	; 0x778
 800a05e:	f006 030f 	and.w	r3, r6, #15
 800a062:	464a      	mov	r2, r9
 800a064:	f888 3776 	strb.w	r3, [r8, #1910]	; 0x776
 800a068:	4631      	mov	r1, r6
 800a06a:	4620      	mov	r0, r4
 800a06c:	f888 9777 	strb.w	r9, [r8, #1911]	; 0x777
 800a070:	f7ff ffa8 	bl	8009fc4 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800a074:	2324      	movs	r3, #36	; 0x24
 800a076:	fb03 4305 	mla	r3, r3, r5, r4
 800a07a:	f8a8 0774 	strh.w	r0, [r8, #1908]	; 0x774
 800a07e:	f893 26e8 	ldrb.w	r2, [r3, #1768]	; 0x6e8
 800a082:	b132      	cbz	r2, 800a092 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 800a084:	f883 96e8 	strb.w	r9, [r3, #1768]	; 0x6e8
 800a088:	f894 36de 	ldrb.w	r3, [r4, #1758]	; 0x6de
 800a08c:	3b01      	subs	r3, #1
 800a08e:	f884 36de 	strb.w	r3, [r4, #1758]	; 0x6de
 800a092:	69e0      	ldr	r0, [r4, #28]
 800a094:	2800      	cmp	r0, #0
 800a096:	d044      	beq.n	800a122 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x140>
 800a098:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 800a09c:	2b02      	cmp	r3, #2
 800a09e:	d13b      	bne.n	800a118 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x136>
 800a0a0:	6a20      	ldr	r0, [r4, #32]
 800a0a2:	2800      	cmp	r0, #0
 800a0a4:	d143      	bne.n	800a12e <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x14c>
 800a0a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	d0b8      	beq.n	800a01e <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 800a0ac:	6803      	ldr	r3, [r0, #0]
 800a0ae:	4632      	mov	r2, r6
 800a0b0:	4629      	mov	r1, r5
 800a0b2:	691b      	ldr	r3, [r3, #16]
 800a0b4:	4798      	blx	r3
 800a0b6:	e7b2      	b.n	800a01e <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 800a0b8:	2a01      	cmp	r2, #1
 800a0ba:	d1ea      	bne.n	800a092 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 800a0bc:	f04f 0824 	mov.w	r8, #36	; 0x24
 800a0c0:	fb08 0301 	mla	r3, r8, r1, r0
 800a0c4:	f893 36e8 	ldrb.w	r3, [r3, #1768]	; 0x6e8
 800a0c8:	b923      	cbnz	r3, 800a0d4 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xf2>
 800a0ca:	f890 36de 	ldrb.w	r3, [r0, #1758]	; 0x6de
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	f880 36de 	strb.w	r3, [r0, #1758]	; 0x6de
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	fb08 4805 	mla	r8, r8, r5, r4
 800a0da:	f888 36e8 	strb.w	r3, [r8, #1768]	; 0x6e8
 800a0de:	f006 030f 	and.w	r3, r6, #15
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f888 36e6 	strb.w	r3, [r8, #1766]	; 0x6e6
 800a0e8:	4631      	mov	r1, r6
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	f7ff ff6a 	bl	8009fc4 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800a0f0:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 800a0f4:	f8a8 06e4 	strh.w	r0, [r8, #1764]	; 0x6e4
 800a0f8:	f893 2778 	ldrb.w	r2, [r3, #1912]	; 0x778
 800a0fc:	2a00      	cmp	r2, #0
 800a0fe:	d0c8      	beq.n	800a092 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 800a100:	2200      	movs	r2, #0
 800a102:	f883 2778 	strb.w	r2, [r3, #1912]	; 0x778
 800a106:	2208      	movs	r2, #8
 800a108:	f883 2777 	strb.w	r2, [r3, #1911]	; 0x777
 800a10c:	f894 36df 	ldrb.w	r3, [r4, #1759]	; 0x6df
 800a110:	3b01      	subs	r3, #1
 800a112:	f884 36df 	strb.w	r3, [r4, #1759]	; 0x6df
 800a116:	e7bc      	b.n	800a092 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 800a118:	6803      	ldr	r3, [r0, #0]
 800a11a:	463a      	mov	r2, r7
 800a11c:	4629      	mov	r1, r5
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	4798      	blx	r3
 800a122:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 800a126:	2b02      	cmp	r3, #2
 800a128:	f47f af79 	bne.w	800a01e <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 800a12c:	e7b8      	b.n	800a0a0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xbe>
 800a12e:	6803      	ldr	r3, [r0, #0]
 800a130:	4632      	mov	r2, r6
 800a132:	4629      	mov	r1, r5
 800a134:	691b      	ldr	r3, [r3, #16]
 800a136:	4798      	blx	r3
 800a138:	e7b5      	b.n	800a0a6 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xc4>
 800a13a:	f06f 0004 	mvn.w	r0, #4
 800a13e:	e77b      	b.n	800a038 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x56>

0800a140 <ArtNetNode::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
 800a140:	b430      	push	{r4, r5}
 800a142:	eb00 0491 	add.w	r4, r0, r1, lsr #2
 800a146:	f3c3 2506 	ubfx	r5, r3, #8, #7
 800a14a:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
 800a14e:	f3c3 1503 	ubfx	r5, r3, #4, #4
 800a152:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
 800a156:	f003 030f 	and.w	r3, r3, #15
 800a15a:	bc30      	pop	{r4, r5}
 800a15c:	f7ff bf41 	b.w	8009fe2 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>

0800a160 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>:
 800a160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a164:	2524      	movs	r5, #36	; 0x24
 800a166:	4604      	mov	r4, r0
 800a168:	460f      	mov	r7, r1
 800a16a:	4616      	mov	r6, r2
 800a16c:	1883      	adds	r3, r0, r2
 800a16e:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
 800a172:	0093      	lsls	r3, r2, #2
 800a174:	b2db      	uxtb	r3, r3
 800a176:	fb05 0503 	mla	r5, r5, r3, r0
 800a17a:	f103 0905 	add.w	r9, r3, #5
 800a17e:	f103 0801 	add.w	r8, r3, #1
 800a182:	45c8      	cmp	r8, r9
 800a184:	f105 0524 	add.w	r5, r5, #36	; 0x24
 800a188:	d009      	beq.n	800a19e <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x3e>
 800a18a:	f8b5 16c0 	ldrh.w	r1, [r5, #1728]	; 0x6c0
 800a18e:	089a      	lsrs	r2, r3, #2
 800a190:	4620      	mov	r0, r4
 800a192:	f7ff ff17 	bl	8009fc4 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800a196:	4643      	mov	r3, r8
 800a198:	f8a5 06c0 	strh.w	r0, [r5, #1728]	; 0x6c0
 800a19c:	e7ef      	b.n	800a17e <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x1e>
 800a19e:	6a20      	ldr	r0, [r4, #32]
 800a1a0:	b150      	cbz	r0, 800a1b8 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x58>
 800a1a2:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 800a1a6:	2b02      	cmp	r3, #2
 800a1a8:	d106      	bne.n	800a1b8 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x58>
 800a1aa:	b92e      	cbnz	r6, 800a1b8 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x58>
 800a1ac:	6803      	ldr	r3, [r0, #0]
 800a1ae:	4639      	mov	r1, r7
 800a1b0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1b4:	699b      	ldr	r3, [r3, #24]
 800a1b6:	4718      	bx	r3
 800a1b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a1bc <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>:
 800a1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1c0:	2524      	movs	r5, #36	; 0x24
 800a1c2:	4604      	mov	r4, r0
 800a1c4:	460f      	mov	r7, r1
 800a1c6:	4616      	mov	r6, r2
 800a1c8:	1883      	adds	r3, r0, r2
 800a1ca:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
 800a1ce:	0093      	lsls	r3, r2, #2
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	fb05 0503 	mla	r5, r5, r3, r0
 800a1d6:	f103 0905 	add.w	r9, r3, #5
 800a1da:	f103 0801 	add.w	r8, r3, #1
 800a1de:	45c8      	cmp	r8, r9
 800a1e0:	f105 0524 	add.w	r5, r5, #36	; 0x24
 800a1e4:	d009      	beq.n	800a1fa <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x3e>
 800a1e6:	f8b5 16c0 	ldrh.w	r1, [r5, #1728]	; 0x6c0
 800a1ea:	089a      	lsrs	r2, r3, #2
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f7ff fee9 	bl	8009fc4 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800a1f2:	4643      	mov	r3, r8
 800a1f4:	f8a5 06c0 	strh.w	r0, [r5, #1728]	; 0x6c0
 800a1f8:	e7ef      	b.n	800a1da <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x1e>
 800a1fa:	6a20      	ldr	r0, [r4, #32]
 800a1fc:	b150      	cbz	r0, 800a214 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x58>
 800a1fe:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 800a202:	2b02      	cmp	r3, #2
 800a204:	d106      	bne.n	800a214 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x58>
 800a206:	b92e      	cbnz	r6, 800a214 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x58>
 800a208:	6803      	ldr	r3, [r0, #0]
 800a20a:	4639      	mov	r1, r7
 800a20c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a210:	695b      	ldr	r3, [r3, #20]
 800a212:	4718      	bx	r3
 800a214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a218 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>:
 800a218:	b570      	push	{r4, r5, r6, lr}
 800a21a:	4616      	mov	r6, r2
 800a21c:	2224      	movs	r2, #36	; 0x24
 800a21e:	fb02 0301 	mla	r3, r2, r1, r0
 800a222:	fb02 0201 	mla	r2, r2, r1, r0
 800a226:	f8c3 6700 	str.w	r6, [r3, #1792]	; 0x700
 800a22a:	f893 36e7 	ldrb.w	r3, [r3, #1767]	; 0x6e7
 800a22e:	2e01      	cmp	r6, #1
 800a230:	bf0c      	ite	eq
 800a232:	f043 0301 	orreq.w	r3, r3, #1
 800a236:	f003 03fe 	andne.w	r3, r3, #254	; 0xfe
 800a23a:	f882 36e7 	strb.w	r3, [r2, #1767]	; 0x6e7
 800a23e:	f890 36d5 	ldrb.w	r3, [r0, #1749]	; 0x6d5
 800a242:	4605      	mov	r5, r0
 800a244:	2b02      	cmp	r3, #2
 800a246:	460c      	mov	r4, r1
 800a248:	d110      	bne.n	800a26c <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 800a24a:	2903      	cmp	r1, #3
 800a24c:	d80e      	bhi.n	800a26c <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 800a24e:	6a00      	ldr	r0, [r0, #32]
 800a250:	b118      	cbz	r0, 800a25a <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x42>
 800a252:	6803      	ldr	r3, [r0, #0]
 800a254:	4632      	mov	r2, r6
 800a256:	6a1b      	ldr	r3, [r3, #32]
 800a258:	4798      	blx	r3
 800a25a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a25c:	b130      	cbz	r0, 800a26c <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 800a25e:	6803      	ldr	r3, [r0, #0]
 800a260:	4632      	mov	r2, r6
 800a262:	4621      	mov	r1, r4
 800a264:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a268:	6a1b      	ldr	r3, [r3, #32]
 800a26a:	4718      	bx	r3
 800a26c:	bd70      	pop	{r4, r5, r6, pc}

0800a26e <ArtNetNode::GetPortProtocol(unsigned int) const>:
 800a26e:	2324      	movs	r3, #36	; 0x24
 800a270:	fb03 0001 	mla	r0, r3, r1, r0
 800a274:	f8d0 0700 	ldr.w	r0, [r0, #1792]	; 0x700
 800a278:	4770      	bx	lr

0800a27a <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>:
 800a27a:	b570      	push	{r4, r5, r6, lr}
 800a27c:	4616      	mov	r6, r2
 800a27e:	2224      	movs	r2, #36	; 0x24
 800a280:	fb02 0301 	mla	r3, r2, r1, r0
 800a284:	fb02 0201 	mla	r2, r2, r1, r0
 800a288:	f8c3 66fc 	str.w	r6, [r3, #1788]	; 0x6fc
 800a28c:	f893 36e7 	ldrb.w	r3, [r3, #1767]	; 0x6e7
 800a290:	2e01      	cmp	r6, #1
 800a292:	bf0c      	ite	eq
 800a294:	f043 0302 	orreq.w	r3, r3, #2
 800a298:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
 800a29c:	f882 36e7 	strb.w	r3, [r2, #1767]	; 0x6e7
 800a2a0:	f890 36d5 	ldrb.w	r3, [r0, #1749]	; 0x6d5
 800a2a4:	4605      	mov	r5, r0
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	460c      	mov	r4, r1
 800a2aa:	d110      	bne.n	800a2ce <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 800a2ac:	2903      	cmp	r1, #3
 800a2ae:	d80e      	bhi.n	800a2ce <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 800a2b0:	6a00      	ldr	r0, [r0, #32]
 800a2b2:	b118      	cbz	r0, 800a2bc <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x42>
 800a2b4:	6803      	ldr	r3, [r0, #0]
 800a2b6:	4632      	mov	r2, r6
 800a2b8:	69db      	ldr	r3, [r3, #28]
 800a2ba:	4798      	blx	r3
 800a2bc:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a2be:	b130      	cbz	r0, 800a2ce <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 800a2c0:	6803      	ldr	r3, [r0, #0]
 800a2c2:	4632      	mov	r2, r6
 800a2c4:	4621      	mov	r1, r4
 800a2c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a2ca:	69db      	ldr	r3, [r3, #28]
 800a2cc:	4718      	bx	r3
 800a2ce:	bd70      	pop	{r4, r5, r6, pc}

0800a2d0 <ArtNetNode::GetMergeMode(unsigned int) const>:
 800a2d0:	2324      	movs	r3, #36	; 0x24
 800a2d2:	fb03 0001 	mla	r0, r3, r1, r0
 800a2d6:	f8d0 06fc 	ldr.w	r0, [r0, #1788]	; 0x6fc
 800a2da:	4770      	bx	lr

0800a2dc <ArtNetNode::HandleAddress()>:
 800a2dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	f880 36d4 	strb.w	r3, [r0, #1748]	; 0x6d4
 800a2e6:	f890 30ae 	ldrb.w	r3, [r0, #174]	; 0xae
 800a2ea:	4604      	mov	r4, r0
 800a2ec:	b133      	cbz	r3, 800a2fc <ArtNetNode::HandleAddress()+0x20>
 800a2ee:	f100 01ae 	add.w	r1, r0, #174	; 0xae
 800a2f2:	f7ff fbf3 	bl	8009adc <ArtNetNode::SetShortName(char const*)>
 800a2f6:	2306      	movs	r3, #6
 800a2f8:	f884 36d4 	strb.w	r3, [r4, #1748]	; 0x6d4
 800a2fc:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 800a300:	b13b      	cbz	r3, 800a312 <ArtNetNode::HandleAddress()+0x36>
 800a302:	4620      	mov	r0, r4
 800a304:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
 800a308:	f7ff fc10 	bl	8009b2c <ArtNetNode::SetLongName(char const*)>
 800a30c:	2307      	movs	r3, #7
 800a30e:	f884 36d4 	strb.w	r3, [r4, #1748]	; 0x6d4
 800a312:	f894 50ad 	ldrb.w	r5, [r4, #173]	; 0xad
 800a316:	b105      	cbz	r5, 800a31a <ArtNetNode::HandleAddress()+0x3e>
 800a318:	3d01      	subs	r5, #1
 800a31a:	f894 1108 	ldrb.w	r1, [r4, #264]	; 0x108
 800a31e:	2900      	cmp	r1, #0
 800a320:	d13d      	bne.n	800a39e <ArtNetNode::HandleAddress()+0xc2>
 800a322:	462a      	mov	r2, r5
 800a324:	4620      	mov	r0, r4
 800a326:	f7ff ff1b 	bl	800a160 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800a32a:	f894 10ac 	ldrb.w	r1, [r4, #172]	; 0xac
 800a32e:	2900      	cmp	r1, #0
 800a330:	d13b      	bne.n	800a3aa <ArtNetNode::HandleAddress()+0xce>
 800a332:	462a      	mov	r2, r5
 800a334:	4620      	mov	r0, r4
 800a336:	f7ff ff41 	bl	800a1bc <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800a33a:	00ad      	lsls	r5, r5, #2
 800a33c:	b2ed      	uxtb	r5, r5
 800a33e:	4627      	mov	r7, r4
 800a340:	462e      	mov	r6, r5
 800a342:	f504 7882 	add.w	r8, r4, #260	; 0x104
 800a346:	f504 7984 	add.w	r9, r4, #264	; 0x108
 800a34a:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a34e:	2b7f      	cmp	r3, #127	; 0x7f
 800a350:	d006      	beq.n	800a360 <ArtNetNode::HandleAddress()+0x84>
 800a352:	bb83      	cbnz	r3, 800a3b6 <ArtNetNode::HandleAddress()+0xda>
 800a354:	2301      	movs	r3, #1
 800a356:	2201      	movs	r2, #1
 800a358:	4631      	mov	r1, r6
 800a35a:	4620      	mov	r0, r4
 800a35c:	f7ff fe41 	bl	8009fe2 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 800a360:	f818 2c05 	ldrb.w	r2, [r8, #-5]
 800a364:	2a7f      	cmp	r2, #127	; 0x7f
 800a366:	d005      	beq.n	800a374 <ArtNetNode::HandleAddress()+0x98>
 800a368:	bb52      	cbnz	r2, 800a3c0 <ArtNetNode::HandleAddress()+0xe4>
 800a36a:	2301      	movs	r3, #1
 800a36c:	4631      	mov	r1, r6
 800a36e:	4620      	mov	r0, r4
 800a370:	f7ff fe37 	bl	8009fe2 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 800a374:	3601      	adds	r6, #1
 800a376:	45c1      	cmp	r9, r8
 800a378:	b2f6      	uxtb	r6, r6
 800a37a:	d1e6      	bne.n	800a34a <ArtNetNode::HandleAddress()+0x6e>
 800a37c:	f894 110a 	ldrb.w	r1, [r4, #266]	; 0x10a
 800a380:	2913      	cmp	r1, #19
 800a382:	d823      	bhi.n	800a3cc <ArtNetNode::HandleAddress()+0xf0>
 800a384:	290f      	cmp	r1, #15
 800a386:	f200 8092 	bhi.w	800a4ae <ArtNetNode::HandleAddress()+0x1d2>
 800a38a:	3901      	subs	r1, #1
 800a38c:	b2cb      	uxtb	r3, r1
 800a38e:	2b03      	cmp	r3, #3
 800a390:	d82a      	bhi.n	800a3e8 <ArtNetNode::HandleAddress()+0x10c>
 800a392:	2903      	cmp	r1, #3
 800a394:	d828      	bhi.n	800a3e8 <ArtNetNode::HandleAddress()+0x10c>
 800a396:	e8df f001 	tbb	[pc, r1]
 800a39a:	7e726654 	mrcvc	6, 3, r6, cr2, cr4, {2}
 800a39e:	060f      	lsls	r7, r1, #24
 800a3a0:	d5c3      	bpl.n	800a32a <ArtNetNode::HandleAddress()+0x4e>
 800a3a2:	462a      	mov	r2, r5
 800a3a4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800a3a8:	e7bc      	b.n	800a324 <ArtNetNode::HandleAddress()+0x48>
 800a3aa:	060e      	lsls	r6, r1, #24
 800a3ac:	d5c5      	bpl.n	800a33a <ArtNetNode::HandleAddress()+0x5e>
 800a3ae:	462a      	mov	r2, r5
 800a3b0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800a3b4:	e7be      	b.n	800a334 <ArtNetNode::HandleAddress()+0x58>
 800a3b6:	0618      	lsls	r0, r3, #24
 800a3b8:	d5d2      	bpl.n	800a360 <ArtNetNode::HandleAddress()+0x84>
 800a3ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3be:	e7ca      	b.n	800a356 <ArtNetNode::HandleAddress()+0x7a>
 800a3c0:	0611      	lsls	r1, r2, #24
 800a3c2:	d5d7      	bpl.n	800a374 <ArtNetNode::HandleAddress()+0x98>
 800a3c4:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	e7cf      	b.n	800a36c <ArtNetNode::HandleAddress()+0x90>
 800a3cc:	2973      	cmp	r1, #115	; 0x73
 800a3ce:	d818      	bhi.n	800a402 <ArtNetNode::HandleAddress()+0x126>
 800a3d0:	296f      	cmp	r1, #111	; 0x6f
 800a3d2:	d87a      	bhi.n	800a4ca <ArtNetNode::HandleAddress()+0x1ee>
 800a3d4:	2953      	cmp	r1, #83	; 0x53
 800a3d6:	d803      	bhi.n	800a3e0 <ArtNetNode::HandleAddress()+0x104>
 800a3d8:	294f      	cmp	r1, #79	; 0x4f
 800a3da:	d905      	bls.n	800a3e8 <ArtNetNode::HandleAddress()+0x10c>
 800a3dc:	2200      	movs	r2, #0
 800a3de:	e067      	b.n	800a4b0 <ArtNetNode::HandleAddress()+0x1d4>
 800a3e0:	f1a1 0360 	sub.w	r3, r1, #96	; 0x60
 800a3e4:	2b03      	cmp	r3, #3
 800a3e6:	d969      	bls.n	800a4bc <ArtNetNode::HandleAddress()+0x1e0>
 800a3e8:	69e0      	ldr	r0, [r4, #28]
 800a3ea:	b120      	cbz	r0, 800a3f6 <ArtNetNode::HandleAddress()+0x11a>
 800a3ec:	6803      	ldr	r3, [r0, #0]
 800a3ee:	f894 110a 	ldrb.w	r1, [r4, #266]	; 0x10a
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	4798      	blx	r3
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3fc:	2101      	movs	r1, #1
 800a3fe:	f000 bc55 	b.w	800acac <ArtNetNode::SendPollRelply(bool)>
 800a402:	f101 0370 	add.w	r3, r1, #112	; 0x70
 800a406:	b2db      	uxtb	r3, r3
 800a408:	2b03      	cmp	r3, #3
 800a40a:	d8ed      	bhi.n	800a3e8 <ArtNetNode::HandleAddress()+0x10c>
 800a40c:	4b45      	ldr	r3, [pc, #276]	; (800a524 <ArtNetNode::HandleAddress()+0x248>)
 800a40e:	f001 0103 	and.w	r1, r1, #3
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	440d      	add	r5, r1
 800a416:	07d2      	lsls	r2, r2, #31
 800a418:	bf5c      	itt	pl
 800a41a:	2201      	movpl	r2, #1
 800a41c:	601a      	strpl	r2, [r3, #0]
 800a41e:	f240 6204 	movw	r2, #1540	; 0x604
 800a422:	b2ed      	uxtb	r5, r5
 800a424:	436a      	muls	r2, r5
 800a426:	4b40      	ldr	r3, [pc, #256]	; (800a528 <ArtNetNode::HandleAddress()+0x24c>)
 800a428:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a42c:	441a      	add	r2, r3
 800a42e:	4611      	mov	r1, r2
 800a430:	2600      	movs	r6, #0
 800a432:	68a0      	ldr	r0, [r4, #8]
 800a434:	f502 7700 	add.w	r7, r2, #512	; 0x200
 800a438:	42b9      	cmp	r1, r7
 800a43a:	d048      	beq.n	800a4ce <ArtNetNode::HandleAddress()+0x1f2>
 800a43c:	f801 6b01 	strb.w	r6, [r1], #1
 800a440:	e7fa      	b.n	800a438 <ArtNetNode::HandleAddress()+0x15c>
 800a442:	2300      	movs	r3, #0
 800a444:	2224      	movs	r2, #36	; 0x24
 800a446:	f884 36da 	strb.w	r3, [r4, #1754]	; 0x6da
 800a44a:	7823      	ldrb	r3, [r4, #0]
 800a44c:	009b      	lsls	r3, r3, #2
 800a44e:	fb02 4303 	mla	r3, r2, r3, r4
 800a452:	429f      	cmp	r7, r3
 800a454:	d0c8      	beq.n	800a3e8 <ArtNetNode::HandleAddress()+0x10c>
 800a456:	f897 26e7 	ldrb.w	r2, [r7, #1767]	; 0x6e7
 800a45a:	3724      	adds	r7, #36	; 0x24
 800a45c:	f022 0208 	bic.w	r2, r2, #8
 800a460:	f887 26c3 	strb.w	r2, [r7, #1731]	; 0x6c3
 800a464:	e7f5      	b.n	800a452 <ArtNetNode::HandleAddress()+0x176>
 800a466:	4b31      	ldr	r3, [pc, #196]	; (800a52c <ArtNetNode::HandleAddress()+0x250>)
 800a468:	2102      	movs	r1, #2
 800a46a:	6818      	ldr	r0, [r3, #0]
 800a46c:	f00a f892 	bl	8014594 <LedBlink::SetMode(ledblink::Mode)>
 800a470:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800a474:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800a478:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 800a47c:	e7b4      	b.n	800a3e8 <ArtNetNode::HandleAddress()+0x10c>
 800a47e:	4b2b      	ldr	r3, [pc, #172]	; (800a52c <ArtNetNode::HandleAddress()+0x250>)
 800a480:	2100      	movs	r1, #0
 800a482:	6818      	ldr	r0, [r3, #0]
 800a484:	f00a f886 	bl	8014594 <LedBlink::SetMode(ledblink::Mode)>
 800a488:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800a48c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a490:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a494:	e7f0      	b.n	800a478 <ArtNetNode::HandleAddress()+0x19c>
 800a496:	4b25      	ldr	r3, [pc, #148]	; (800a52c <ArtNetNode::HandleAddress()+0x250>)
 800a498:	2104      	movs	r1, #4
 800a49a:	6818      	ldr	r0, [r3, #0]
 800a49c:	f00a f87a 	bl	8014594 <LedBlink::SetMode(ledblink::Mode)>
 800a4a0:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800a4a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a4a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4ac:	e7e4      	b.n	800a478 <ArtNetNode::HandleAddress()+0x19c>
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	f001 0103 	and.w	r1, r1, #3
 800a4b6:	f7ff fee0 	bl	800a27a <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 800a4ba:	e795      	b.n	800a3e8 <ArtNetNode::HandleAddress()+0x10c>
 800a4bc:	2200      	movs	r2, #0
 800a4be:	4620      	mov	r0, r4
 800a4c0:	f001 0103 	and.w	r1, r1, #3
 800a4c4:	f7ff fea8 	bl	800a218 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 800a4c8:	e78e      	b.n	800a3e8 <ArtNetNode::HandleAddress()+0x10c>
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	e7f7      	b.n	800a4be <ArtNetNode::HandleAddress()+0x1e2>
 800a4ce:	f240 6104 	movw	r1, #1540	; 0x604
 800a4d2:	fb01 3105 	mla	r1, r1, r5, r3
 800a4d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4da:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
 800a4de:	6801      	ldr	r1, [r0, #0]
 800a4e0:	690e      	ldr	r6, [r1, #16]
 800a4e2:	4629      	mov	r1, r5
 800a4e4:	47b0      	blx	r6
 800a4e6:	2d03      	cmp	r5, #3
 800a4e8:	f63f af7e 	bhi.w	800a3e8 <ArtNetNode::HandleAddress()+0x10c>
 800a4ec:	2624      	movs	r6, #36	; 0x24
 800a4ee:	fb06 4605 	mla	r6, r6, r5, r4
 800a4f2:	f8d6 3700 	ldr.w	r3, [r6, #1792]	; 0x700
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	f47f af76 	bne.w	800a3e8 <ArtNetNode::HandleAddress()+0x10c>
 800a4fc:	f896 3705 	ldrb.w	r3, [r6, #1797]	; 0x705
 800a500:	2b00      	cmp	r3, #0
 800a502:	f47f af71 	bne.w	800a3e8 <ArtNetNode::HandleAddress()+0x10c>
 800a506:	68a0      	ldr	r0, [r4, #8]
 800a508:	4629      	mov	r1, r5
 800a50a:	6803      	ldr	r3, [r0, #0]
 800a50c:	689b      	ldr	r3, [r3, #8]
 800a50e:	4798      	blx	r3
 800a510:	2301      	movs	r3, #1
 800a512:	f886 3705 	strb.w	r3, [r6, #1797]	; 0x705
 800a516:	f896 36e7 	ldrb.w	r3, [r6, #1767]	; 0x6e7
 800a51a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a51e:	f886 36e7 	strb.w	r3, [r6, #1767]	; 0x6e7
 800a522:	e761      	b.n	800a3e8 <ArtNetNode::HandleAddress()+0x10c>
 800a524:	200000ec 	andcs	r0, r0, ip, ror #1
 800a528:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800a52c:	2000a9c0 	andcs	sl, r0, r0, asr #19

0800a530 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>:
 800a530:	f240 6304 	movw	r3, #1540	; 0x604
 800a534:	fb03 0101 	mla	r1, r3, r1, r0
 800a538:	2300      	movs	r3, #0
 800a53a:	b510      	push	{r4, lr}
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d00a      	beq.n	800a556 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0x26>
 800a540:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a544:	3301      	adds	r3, #1
 800a546:	f891 01ff 	ldrb.w	r0, [r1, #511]	; 0x1ff
 800a54a:	42a0      	cmp	r0, r4
 800a54c:	bf38      	it	cc
 800a54e:	4620      	movcc	r0, r4
 800a550:	f881 03ff 	strb.w	r0, [r1, #1023]	; 0x3ff
 800a554:	e7f2      	b.n	800a53c <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0xc>
 800a556:	bd10      	pop	{r4, pc}

0800a558 <memcpy.isra.0>:
 800a558:	3801      	subs	r0, #1
 800a55a:	440a      	add	r2, r1
 800a55c:	4291      	cmp	r1, r2
 800a55e:	d004      	beq.n	800a56a <memcpy.isra.0+0x12>
 800a560:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a564:	f800 3f01 	strb.w	r3, [r0, #1]!
 800a568:	e7f8      	b.n	800a55c <memcpy.isra.0+0x4>
 800a56a:	4770      	bx	lr

0800a56c <lightset::Data::Get()>:
 800a56c:	4b03      	ldr	r3, [pc, #12]	; (800a57c <lightset::Data::Get()+0x10>)
 800a56e:	4804      	ldr	r0, [pc, #16]	; (800a580 <lightset::Data::Get()+0x14>)
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	07d2      	lsls	r2, r2, #31
 800a574:	bf5c      	itt	pl
 800a576:	2201      	movpl	r2, #1
 800a578:	601a      	strpl	r2, [r3, #0]
 800a57a:	4770      	bx	lr
 800a57c:	200000ec 	andcs	r0, r0, ip, ror #1
 800a580:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

0800a584 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>:
 800a584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a588:	4615      	mov	r5, r2
 800a58a:	460f      	mov	r7, r1
 800a58c:	4604      	mov	r4, r0
 800a58e:	f7ff ffed 	bl	800a56c <lightset::Data::Get()>
 800a592:	4606      	mov	r6, r0
 800a594:	f240 6004 	movw	r0, #1540	; 0x604
 800a598:	4344      	muls	r4, r0
 800a59a:	eb06 0804 	add.w	r8, r6, r4
 800a59e:	462a      	mov	r2, r5
 800a5a0:	4639      	mov	r1, r7
 800a5a2:	4640      	mov	r0, r8
 800a5a4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800a5a8:	f7ff ffd6 	bl	800a558 <memcpy.isra.0>
 800a5ac:	462a      	mov	r2, r5
 800a5ae:	4639      	mov	r1, r7
 800a5b0:	f8c8 5600 	str.w	r5, [r8, #1536]	; 0x600
 800a5b4:	1930      	adds	r0, r6, r4
 800a5b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ba:	f7ff bfcd 	b.w	800a558 <memcpy.isra.0>

0800a5be <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 800a5be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c2:	4680      	mov	r8, r0
 800a5c4:	f240 6404 	movw	r4, #1540	; 0x604
 800a5c8:	4615      	mov	r5, r2
 800a5ca:	460f      	mov	r7, r1
 800a5cc:	4699      	mov	r9, r3
 800a5ce:	f7ff ffcd 	bl	800a56c <lightset::Data::Get()>
 800a5d2:	fb04 f408 	mul.w	r4, r4, r8
 800a5d6:	eb00 0a04 	add.w	sl, r0, r4
 800a5da:	4606      	mov	r6, r0
 800a5dc:	462a      	mov	r2, r5
 800a5de:	4639      	mov	r1, r7
 800a5e0:	4650      	mov	r0, sl
 800a5e2:	f7ff ffb9 	bl	800a558 <memcpy.isra.0>
 800a5e6:	f8ca 5600 	str.w	r5, [sl, #1536]	; 0x600
 800a5ea:	f1b9 0f00 	cmp.w	r9, #0
 800a5ee:	d106      	bne.n	800a5fe <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x40>
 800a5f0:	462a      	mov	r2, r5
 800a5f2:	4641      	mov	r1, r8
 800a5f4:	4630      	mov	r0, r6
 800a5f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5fa:	f7ff bf99 	b.w	800a530 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 800a5fe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800a602:	462a      	mov	r2, r5
 800a604:	4639      	mov	r1, r7
 800a606:	1930      	adds	r0, r6, r4
 800a608:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a60c:	f7ff bfa4 	b.w	800a558 <memcpy.isra.0>

0800a610 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 800a610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a614:	4616      	mov	r6, r2
 800a616:	4699      	mov	r9, r3
 800a618:	4680      	mov	r8, r0
 800a61a:	460f      	mov	r7, r1
 800a61c:	f7ff ffa6 	bl	800a56c <lightset::Data::Get()>
 800a620:	f240 6404 	movw	r4, #1540	; 0x604
 800a624:	4605      	mov	r5, r0
 800a626:	fb04 f408 	mul.w	r4, r4, r8
 800a62a:	f504 7000 	add.w	r0, r4, #512	; 0x200
 800a62e:	4632      	mov	r2, r6
 800a630:	4639      	mov	r1, r7
 800a632:	4428      	add	r0, r5
 800a634:	f7ff ff90 	bl	800a558 <memcpy.isra.0>
 800a638:	192b      	adds	r3, r5, r4
 800a63a:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
 800a63e:	f1b9 0f00 	cmp.w	r9, #0
 800a642:	d106      	bne.n	800a652 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x42>
 800a644:	4632      	mov	r2, r6
 800a646:	4641      	mov	r1, r8
 800a648:	4628      	mov	r0, r5
 800a64a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a64e:	f7ff bf6f 	b.w	800a530 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 800a652:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800a656:	4632      	mov	r2, r6
 800a658:	4639      	mov	r1, r7
 800a65a:	1928      	adds	r0, r5, r4
 800a65c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a660:	f7ff bf7a 	b.w	800a558 <memcpy.isra.0>

0800a664 <ArtNetNode::UpdateMergeStatus(unsigned int)>:
 800a664:	f890 36da 	ldrb.w	r3, [r0, #1754]	; 0x6da
 800a668:	b91b      	cbnz	r3, 800a672 <ArtNetNode::UpdateMergeStatus(unsigned int)+0xe>
 800a66a:	f240 1301 	movw	r3, #257	; 0x101
 800a66e:	f8a0 36da 	strh.w	r3, [r0, #1754]	; 0x6da
 800a672:	2324      	movs	r3, #36	; 0x24
 800a674:	fb03 0001 	mla	r0, r3, r1, r0
 800a678:	f890 36e7 	ldrb.w	r3, [r0, #1767]	; 0x6e7
 800a67c:	f043 0308 	orr.w	r3, r3, #8
 800a680:	f880 36e7 	strb.w	r3, [r0, #1767]	; 0x6e7
 800a684:	4770      	bx	lr

0800a686 <ArtNetNode::CheckMergeTimeouts(unsigned int)>:
 800a686:	2324      	movs	r3, #36	; 0x24
 800a688:	b530      	push	{r4, r5, lr}
 800a68a:	f242 7510 	movw	r5, #10000	; 0x2710
 800a68e:	fb03 0301 	mla	r3, r3, r1, r0
 800a692:	f8d0 2664 	ldr.w	r2, [r0, #1636]	; 0x664
 800a696:	f8d3 46ec 	ldr.w	r4, [r3, #1772]	; 0x6ec
 800a69a:	1b14      	subs	r4, r2, r4
 800a69c:	42ac      	cmp	r4, r5
 800a69e:	d908      	bls.n	800a6b2 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x2c>
 800a6a0:	2400      	movs	r4, #0
 800a6a2:	f8c3 46f0 	str.w	r4, [r3, #1776]	; 0x6f0
 800a6a6:	f893 46e7 	ldrb.w	r4, [r3, #1767]	; 0x6e7
 800a6aa:	f024 0408 	bic.w	r4, r4, #8
 800a6ae:	f883 46e7 	strb.w	r4, [r3, #1767]	; 0x6e7
 800a6b2:	2324      	movs	r3, #36	; 0x24
 800a6b4:	fb03 0101 	mla	r1, r3, r1, r0
 800a6b8:	f8d1 36f4 	ldr.w	r3, [r1, #1780]	; 0x6f4
 800a6bc:	1ad2      	subs	r2, r2, r3
 800a6be:	f242 7310 	movw	r3, #10000	; 0x2710
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d908      	bls.n	800a6d8 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x52>
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	f8c1 36f8 	str.w	r3, [r1, #1784]	; 0x6f8
 800a6cc:	f891 36e7 	ldrb.w	r3, [r1, #1767]	; 0x6e7
 800a6d0:	f023 0308 	bic.w	r3, r3, #8
 800a6d4:	f881 36e7 	strb.w	r3, [r1, #1767]	; 0x6e7
 800a6d8:	2124      	movs	r1, #36	; 0x24
 800a6da:	7803      	ldrb	r3, [r0, #0]
 800a6dc:	4602      	mov	r2, r0
 800a6de:	009b      	lsls	r3, r3, #2
 800a6e0:	fb01 0303 	mla	r3, r1, r3, r0
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d006      	beq.n	800a6f8 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x72>
 800a6ea:	f892 46e7 	ldrb.w	r4, [r2, #1767]	; 0x6e7
 800a6ee:	3224      	adds	r2, #36	; 0x24
 800a6f0:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 800a6f4:	4321      	orrs	r1, r4
 800a6f6:	e7f6      	b.n	800a6e6 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x60>
 800a6f8:	b919      	cbnz	r1, 800a702 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x7c>
 800a6fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6fe:	f8a0 36da 	strh.w	r3, [r0, #1754]	; 0x6da
 800a702:	bd30      	pop	{r4, r5, pc}

0800a704 <ArtNetNode::HandleDmx()>:
 800a704:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a708:	f8b0 70b0 	ldrh.w	r7, [r0, #176]	; 0xb0
 800a70c:	4604      	mov	r4, r0
 800a70e:	ba7f      	rev16	r7, r7
 800a710:	b2bf      	uxth	r7, r7
 800a712:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 800a716:	bf28      	it	cs
 800a718:	f44f 7700 	movcs.w	r7, #512	; 0x200
 800a71c:	4605      	mov	r5, r0
 800a71e:	2600      	movs	r6, #0
 800a720:	f04f 0901 	mov.w	r9, #1
 800a724:	f100 08b2 	add.w	r8, r0, #178	; 0xb2
 800a728:	7823      	ldrb	r3, [r4, #0]
 800a72a:	ebb6 0f83 	cmp.w	r6, r3, lsl #2
 800a72e:	f080 809f 	bcs.w	800a870 <ArtNetNode::HandleDmx()+0x16c>
 800a732:	f895 36e8 	ldrb.w	r3, [r5, #1768]	; 0x6e8
 800a736:	2b00      	cmp	r3, #0
 800a738:	d056      	beq.n	800a7e8 <ArtNetNode::HandleDmx()+0xe4>
 800a73a:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d152      	bne.n	800a7e8 <ArtNetNode::HandleDmx()+0xe4>
 800a742:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	; 0xae
 800a746:	f8b5 36e4 	ldrh.w	r3, [r5, #1764]	; 0x6e4
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d14c      	bne.n	800a7e8 <ArtNetNode::HandleDmx()+0xe4>
 800a74e:	f895 36e7 	ldrb.w	r3, [r5, #1767]	; 0x6e7
 800a752:	f8d5 b6f0 	ldr.w	fp, [r5, #1776]	; 0x6f0
 800a756:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a75a:	f885 36e7 	strb.w	r3, [r5, #1767]	; 0x6e7
 800a75e:	f894 36da 	ldrb.w	r3, [r4, #1754]	; 0x6da
 800a762:	f8d5 a6f8 	ldr.w	sl, [r5, #1784]	; 0x6f8
 800a766:	b133      	cbz	r3, 800a776 <ArtNetNode::HandleDmx()+0x72>
 800a768:	f894 36dc 	ldrb.w	r3, [r4, #1756]	; 0x6dc
 800a76c:	b91b      	cbnz	r3, 800a776 <ArtNetNode::HandleDmx()+0x72>
 800a76e:	4631      	mov	r1, r6
 800a770:	4620      	mov	r0, r4
 800a772:	f7ff ff88 	bl	800a686 <ArtNetNode::CheckMergeTimeouts(unsigned int)>
 800a776:	ea5b 020a 	orrs.w	r2, fp, sl
 800a77a:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
 800a77e:	d136      	bne.n	800a7ee <ArtNetNode::HandleDmx()+0xea>
 800a780:	f8c5 36f0 	str.w	r3, [r5, #1776]	; 0x6f0
 800a784:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 800a788:	463a      	mov	r2, r7
 800a78a:	4641      	mov	r1, r8
 800a78c:	4630      	mov	r0, r6
 800a78e:	f8c5 36ec 	str.w	r3, [r5, #1772]	; 0x6ec
 800a792:	f7ff fef7 	bl	800a584 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 800a796:	f894 36d9 	ldrb.w	r3, [r4, #1753]	; 0x6d9
 800a79a:	b9fb      	cbnz	r3, 800a7dc <ArtNetNode::HandleDmx()+0xd8>
 800a79c:	f8d4 a008 	ldr.w	sl, [r4, #8]
 800a7a0:	f7ff fee4 	bl	800a56c <lightset::Data::Get()>
 800a7a4:	f240 6304 	movw	r3, #1540	; 0x604
 800a7a8:	4373      	muls	r3, r6
 800a7aa:	18c1      	adds	r1, r0, r3
 800a7ac:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 800a7b0:	f8da 3000 	ldr.w	r3, [sl]
 800a7b4:	4402      	add	r2, r0
 800a7b6:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800a7ba:	4650      	mov	r0, sl
 800a7bc:	f8d1 3600 	ldr.w	r3, [r1, #1536]	; 0x600
 800a7c0:	4631      	mov	r1, r6
 800a7c2:	47d8      	blx	fp
 800a7c4:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 800a7c8:	b943      	cbnz	r3, 800a7dc <ArtNetNode::HandleDmx()+0xd8>
 800a7ca:	68a0      	ldr	r0, [r4, #8]
 800a7cc:	4631      	mov	r1, r6
 800a7ce:	6803      	ldr	r3, [r0, #0]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	4798      	blx	r3
 800a7d4:	f884 96db 	strb.w	r9, [r4, #1755]	; 0x6db
 800a7d8:	f885 9705 	strb.w	r9, [r5, #1797]	; 0x705
 800a7dc:	f894 36dd 	ldrb.w	r3, [r4, #1757]	; 0x6dd
 800a7e0:	f043 0302 	orr.w	r3, r3, #2
 800a7e4:	f884 36dd 	strb.w	r3, [r4, #1757]	; 0x6dd
 800a7e8:	3601      	adds	r6, #1
 800a7ea:	3524      	adds	r5, #36	; 0x24
 800a7ec:	e79c      	b.n	800a728 <ArtNetNode::HandleDmx()+0x24>
 800a7ee:	459b      	cmp	fp, r3
 800a7f0:	d104      	bne.n	800a7fc <ArtNetNode::HandleDmx()+0xf8>
 800a7f2:	f1ba 0f00 	cmp.w	sl, #0
 800a7f6:	d0c5      	beq.n	800a784 <ArtNetNode::HandleDmx()+0x80>
 800a7f8:	b11b      	cbz	r3, 800a802 <ArtNetNode::HandleDmx()+0xfe>
 800a7fa:	e037      	b.n	800a86c <ArtNetNode::HandleDmx()+0x168>
 800a7fc:	f1bb 0f00 	cmp.w	fp, #0
 800a800:	d132      	bne.n	800a868 <ArtNetNode::HandleDmx()+0x164>
 800a802:	459a      	cmp	sl, r3
 800a804:	d11d      	bne.n	800a842 <ArtNetNode::HandleDmx()+0x13e>
 800a806:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 800a80a:	f8c5 36f4 	str.w	r3, [r5, #1780]	; 0x6f4
 800a80e:	f7ff fead 	bl	800a56c <lightset::Data::Get()>
 800a812:	f240 6304 	movw	r3, #1540	; 0x604
 800a816:	4683      	mov	fp, r0
 800a818:	fb03 fa06 	mul.w	sl, r3, r6
 800a81c:	f50a 7000 	add.w	r0, sl, #512	; 0x200
 800a820:	463a      	mov	r2, r7
 800a822:	4641      	mov	r1, r8
 800a824:	4458      	add	r0, fp
 800a826:	f7ff fe97 	bl	800a558 <memcpy.isra.0>
 800a82a:	eb0b 030a 	add.w	r3, fp, sl
 800a82e:	f50a 6080 	add.w	r0, sl, #1024	; 0x400
 800a832:	463a      	mov	r2, r7
 800a834:	4641      	mov	r1, r8
 800a836:	f8c3 7600 	str.w	r7, [r3, #1536]	; 0x600
 800a83a:	4458      	add	r0, fp
 800a83c:	f7ff fe8c 	bl	800a558 <memcpy.isra.0>
 800a840:	e7a9      	b.n	800a796 <ArtNetNode::HandleDmx()+0x92>
 800a842:	b9bb      	cbnz	r3, 800a874 <ArtNetNode::HandleDmx()+0x170>
 800a844:	f8c5 36f0 	str.w	r3, [r5, #1776]	; 0x6f0
 800a848:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 800a84c:	4631      	mov	r1, r6
 800a84e:	4620      	mov	r0, r4
 800a850:	f8c5 36ec 	str.w	r3, [r5, #1772]	; 0x6ec
 800a854:	f7ff ff06 	bl	800a664 <ArtNetNode::UpdateMergeStatus(unsigned int)>
 800a858:	463a      	mov	r2, r7
 800a85a:	4641      	mov	r1, r8
 800a85c:	4630      	mov	r0, r6
 800a85e:	f8d5 36fc 	ldr.w	r3, [r5, #1788]	; 0x6fc
 800a862:	f7ff feac 	bl	800a5be <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800a866:	e796      	b.n	800a796 <ArtNetNode::HandleDmx()+0x92>
 800a868:	459b      	cmp	fp, r3
 800a86a:	d118      	bne.n	800a89e <ArtNetNode::HandleDmx()+0x19a>
 800a86c:	459a      	cmp	sl, r3
 800a86e:	d1eb      	bne.n	800a848 <ArtNetNode::HandleDmx()+0x144>
 800a870:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a874:	f1ba 0f00 	cmp.w	sl, #0
 800a878:	d1e4      	bne.n	800a844 <ArtNetNode::HandleDmx()+0x140>
 800a87a:	f8c5 36f8 	str.w	r3, [r5, #1784]	; 0x6f8
 800a87e:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 800a882:	4631      	mov	r1, r6
 800a884:	4620      	mov	r0, r4
 800a886:	f8c5 36f4 	str.w	r3, [r5, #1780]	; 0x6f4
 800a88a:	f7ff feeb 	bl	800a664 <ArtNetNode::UpdateMergeStatus(unsigned int)>
 800a88e:	463a      	mov	r2, r7
 800a890:	4641      	mov	r1, r8
 800a892:	4630      	mov	r0, r6
 800a894:	f8d5 36fc 	ldr.w	r3, [r5, #1788]	; 0x6fc
 800a898:	f7ff feba 	bl	800a610 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800a89c:	e77b      	b.n	800a796 <ArtNetNode::HandleDmx()+0x92>
 800a89e:	f1ba 0f00 	cmp.w	sl, #0
 800a8a2:	d0ea      	beq.n	800a87a <ArtNetNode::HandleDmx()+0x176>
 800a8a4:	459a      	cmp	sl, r3
 800a8a6:	d0ea      	beq.n	800a87e <ArtNetNode::HandleDmx()+0x17a>
 800a8a8:	e7e2      	b.n	800a870 <ArtNetNode::HandleDmx()+0x16c>
	...

0800a8ac <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>:
 800a8ac:	2903      	cmp	r1, #3
 800a8ae:	b510      	push	{r4, lr}
 800a8b0:	d80d      	bhi.n	800a8ce <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x22>
 800a8b2:	4b07      	ldr	r3, [pc, #28]	; (800a8d0 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x24>)
 800a8b4:	0109      	lsls	r1, r1, #4
 800a8b6:	681c      	ldr	r4, [r3, #0]
 800a8b8:	4401      	add	r1, r0
 800a8ba:	6923      	ldr	r3, [r4, #16]
 800a8bc:	69a4      	ldr	r4, [r4, #24]
 800a8be:	4053      	eors	r3, r2
 800a8c0:	4223      	tst	r3, r4
 800a8c2:	bf16      	itet	ne
 800a8c4:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
 800a8c6:	f8c1 277c 	streq.w	r2, [r1, #1916]	; 0x77c
 800a8ca:	f8c1 377c 	strne.w	r3, [r1, #1916]	; 0x77c
 800a8ce:	bd10      	pop	{r4, pc}
 800a8d0:	2000a29c 	mulcs	r0, ip, r2

0800a8d4 <ArtNetNode::HandleDmxIn()>:
 800a8d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a8d8:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800a8dc:	ab05      	add	r3, sp, #20
 800a8de:	4607      	mov	r7, r0
 800a8e0:	2208      	movs	r2, #8
 800a8e2:	461e      	mov	r6, r3
 800a8e4:	4942      	ldr	r1, [pc, #264]	; (800a9f0 <ArtNetNode::HandleDmxIn()+0x11c>)
 800a8e6:	3a01      	subs	r2, #1
 800a8e8:	d304      	bcc.n	800a8f4 <ArtNetNode::HandleDmxIn()+0x20>
 800a8ea:	f811 0b01 	ldrb.w	r0, [r1], #1
 800a8ee:	f803 0b01 	strb.w	r0, [r3], #1
 800a8f2:	e7f8      	b.n	800a8e6 <ArtNetNode::HandleDmxIn()+0x12>
 800a8f4:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800a8f8:	2500      	movs	r5, #0
 800a8fa:	8133      	strh	r3, [r6, #8]
 800a8fc:	230e      	movs	r3, #14
 800a8fe:	463c      	mov	r4, r7
 800a900:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 800a9f4 <ArtNetNode::HandleDmxIn()+0x120>
 800a904:	72b5      	strb	r5, [r6, #10]
 800a906:	72f3      	strb	r3, [r6, #11]
 800a908:	f894 3778 	ldrb.w	r3, [r4, #1912]	; 0x778
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d049      	beq.n	800a9a4 <ArtNetNode::HandleDmxIn()+0xd0>
 800a910:	6978      	ldr	r0, [r7, #20]
 800a912:	4629      	mov	r1, r5
 800a914:	6803      	ldr	r3, [r0, #0]
 800a916:	aa03      	add	r2, sp, #12
 800a918:	f8d3 9010 	ldr.w	r9, [r3, #16]
 800a91c:	ab04      	add	r3, sp, #16
 800a91e:	47c8      	blx	r9
 800a920:	2800      	cmp	r0, #0
 800a922:	d048      	beq.n	800a9b6 <ArtNetNode::HandleDmxIn()+0xe2>
 800a924:	f894 3780 	ldrb.w	r3, [r4, #1920]	; 0x780
 800a928:	7375      	strb	r5, [r6, #13]
 800a92a:	3301      	adds	r3, #1
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	f884 3780 	strb.w	r3, [r4, #1920]	; 0x780
 800a932:	7333      	strb	r3, [r6, #12]
 800a934:	f8b4 3774 	ldrh.w	r3, [r4, #1908]	; 0x774
 800a938:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800a93c:	81f3      	strh	r3, [r6, #14]
 800a93e:	9b03      	ldr	r3, [sp, #12]
 800a940:	eb00 0c03 	add.w	ip, r0, r3
 800a944:	4560      	cmp	r0, ip
 800a946:	d004      	beq.n	800a952 <ArtNetNode::HandleDmxIn()+0x7e>
 800a948:	f810 1b01 	ldrb.w	r1, [r0], #1
 800a94c:	f802 1b01 	strb.w	r1, [r2], #1
 800a950:	e7f8      	b.n	800a944 <ArtNetNode::HandleDmxIn()+0x70>
 800a952:	07da      	lsls	r2, r3, #31
 800a954:	d504      	bpl.n	800a960 <ArtNetNode::HandleDmxIn()+0x8c>
 800a956:	2100      	movs	r1, #0
 800a958:	18f2      	adds	r2, r6, r3
 800a95a:	3301      	adds	r3, #1
 800a95c:	7491      	strb	r1, [r2, #18]
 800a95e:	9303      	str	r3, [sp, #12]
 800a960:	9b03      	ldr	r3, [sp, #12]
 800a962:	4631      	mov	r1, r6
 800a964:	0a1a      	lsrs	r2, r3, #8
 800a966:	7473      	strb	r3, [r6, #17]
 800a968:	2380      	movs	r3, #128	; 0x80
 800a96a:	f884 3777 	strb.w	r3, [r4, #1911]	; 0x777
 800a96e:	f641 1336 	movw	r3, #6454	; 0x1936
 800a972:	7432      	strb	r2, [r6, #16]
 800a974:	9300      	str	r3, [sp, #0]
 800a976:	f240 2212 	movw	r2, #530	; 0x212
 800a97a:	f8d4 377c 	ldr.w	r3, [r4, #1916]	; 0x77c
 800a97e:	7938      	ldrb	r0, [r7, #4]
 800a980:	f006 fdda 	bl	8011538 <udp_send>
 800a984:	2301      	movs	r3, #1
 800a986:	f8d8 2000 	ldr.w	r2, [r8]
 800a98a:	40ab      	lsls	r3, r5
 800a98c:	ea33 0102 	bics.w	r1, r3, r2
 800a990:	d008      	beq.n	800a9a4 <ArtNetNode::HandleDmxIn()+0xd0>
 800a992:	4313      	orrs	r3, r2
 800a994:	f8c8 3000 	str.w	r3, [r8]
 800a998:	f897 36dd 	ldrb.w	r3, [r7, #1757]	; 0x6dd
 800a99c:	f043 0301 	orr.w	r3, r3, #1
 800a9a0:	f887 36dd 	strb.w	r3, [r7, #1757]	; 0x6dd
 800a9a4:	3501      	adds	r5, #1
 800a9a6:	2d04      	cmp	r5, #4
 800a9a8:	f104 0410 	add.w	r4, r4, #16
 800a9ac:	d1ac      	bne.n	800a908 <ArtNetNode::HandleDmxIn()+0x34>
 800a9ae:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c
 800a9b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9b6:	f994 2777 	ldrsb.w	r2, [r4, #1911]	; 0x777
 800a9ba:	f894 3777 	ldrb.w	r3, [r4, #1911]	; 0x777
 800a9be:	2a00      	cmp	r2, #0
 800a9c0:	daf0      	bge.n	800a9a4 <ArtNetNode::HandleDmxIn()+0xd0>
 800a9c2:	9a04      	ldr	r2, [sp, #16]
 800a9c4:	2a00      	cmp	r2, #0
 800a9c6:	d1ed      	bne.n	800a9a4 <ArtNetNode::HandleDmxIn()+0xd0>
 800a9c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9cc:	f884 3777 	strb.w	r3, [r4, #1911]	; 0x777
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	fa03 f205 	lsl.w	r2, r3, r5
 800a9d6:	f8d8 3000 	ldr.w	r3, [r8]
 800a9da:	ea23 0302 	bic.w	r3, r3, r2
 800a9de:	f8c8 3000 	str.w	r3, [r8]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d1de      	bne.n	800a9a4 <ArtNetNode::HandleDmxIn()+0xd0>
 800a9e6:	f897 36dd 	ldrb.w	r3, [r7, #1757]	; 0x6dd
 800a9ea:	f023 0301 	bic.w	r3, r3, #1
 800a9ee:	e7d7      	b.n	800a9a0 <ArtNetNode::HandleDmxIn()+0xcc>
 800a9f0:	08016c51 	stmdaeq	r1, {r0, r4, r6, sl, fp, sp, lr}
 800a9f4:	20001904 	andcs	r1, r0, r4, lsl #18

0800a9f8 <memcmp.constprop.0>:
 800a9f8:	b510      	push	{r4, lr}
 800a9fa:	4c07      	ldr	r4, [pc, #28]	; (800aa18 <memcmp.constprop.0+0x20>)
 800a9fc:	1e42      	subs	r2, r0, #1
 800a9fe:	3003      	adds	r0, #3
 800aa00:	4282      	cmp	r2, r0
 800aa02:	d007      	beq.n	800aa14 <memcmp.constprop.0+0x1c>
 800aa04:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800aa08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa0c:	428b      	cmp	r3, r1
 800aa0e:	d0f7      	beq.n	800aa00 <memcmp.constprop.0+0x8>
 800aa10:	1a58      	subs	r0, r3, r1
 800aa12:	bd10      	pop	{r4, pc}
 800aa14:	2000      	movs	r0, #0
 800aa16:	e7fc      	b.n	800aa12 <memcmp.constprop.0+0x1a>
 800aa18:	20001908 	andcs	r1, r0, r8, lsl #18

0800aa1c <memcpy.constprop.0.isra.0>:
 800aa1c:	3801      	subs	r0, #1
 800aa1e:	1d0a      	adds	r2, r1, #4
 800aa20:	4291      	cmp	r1, r2
 800aa22:	d004      	beq.n	800aa2e <memcpy.constprop.0.isra.0+0x12>
 800aa24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa28:	f800 3f01 	strb.w	r3, [r0, #1]!
 800aa2c:	e7f8      	b.n	800aa20 <memcpy.constprop.0.isra.0+0x4>
 800aa2e:	4770      	bx	lr

0800aa30 <ArtNetNode::HandleIpProg()>:
 800aa30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa34:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
 800aa38:	b085      	sub	sp, #20
 800aa3a:	4604      	mov	r4, r0
 800aa3c:	9303      	str	r3, [sp, #12]
 800aa3e:	2300      	movs	r3, #0
 800aa40:	4d5a      	ldr	r5, [pc, #360]	; (800abac <ArtNetNode::HandleIpProg()+0x17c>)
 800aa42:	f890 70ae 	ldrb.w	r7, [r0, #174]	; 0xae
 800aa46:	6828      	ldr	r0, [r5, #0]
 800aa48:	f890 b001 	ldrb.w	fp, [r0, #1]
 800aa4c:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
 800aa50:	f06f 0306 	mvn.w	r3, #6
 800aa54:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
 800aa58:	f007 03c0 	and.w	r3, r7, #192	; 0xc0
 800aa5c:	2bc0      	cmp	r3, #192	; 0xc0
 800aa5e:	d101      	bne.n	800aa64 <ArtNetNode::HandleIpProg()+0x34>
 800aa60:	f007 fbec 	bl	801223c <Network::EnableDhcp()>
 800aa64:	f007 0388 	and.w	r3, r7, #136	; 0x88
 800aa68:	2b88      	cmp	r3, #136	; 0x88
 800aa6a:	d103      	bne.n	800aa74 <ArtNetNode::HandleIpProg()+0x44>
 800aa6c:	2100      	movs	r1, #0
 800aa6e:	6828      	ldr	r0, [r5, #0]
 800aa70:	f007 fb88 	bl	8012184 <Network::SetIp(unsigned int)>
 800aa74:	f007 0384 	and.w	r3, r7, #132	; 0x84
 800aa78:	2b84      	cmp	r3, #132	; 0x84
 800aa7a:	4e4d      	ldr	r6, [pc, #308]	; (800abb0 <ArtNetNode::HandleIpProg()+0x180>)
 800aa7c:	f104 08b0 	add.w	r8, r4, #176	; 0xb0
 800aa80:	d107      	bne.n	800aa92 <ArtNetNode::HandleIpProg()+0x62>
 800aa82:	4641      	mov	r1, r8
 800aa84:	4630      	mov	r0, r6
 800aa86:	f7ff ffc9 	bl	800aa1c <memcpy.constprop.0.isra.0>
 800aa8a:	6831      	ldr	r1, [r6, #0]
 800aa8c:	6828      	ldr	r0, [r5, #0]
 800aa8e:	f007 fb79 	bl	8012184 <Network::SetIp(unsigned int)>
 800aa92:	f007 0382 	and.w	r3, r7, #130	; 0x82
 800aa96:	2b82      	cmp	r3, #130	; 0x82
 800aa98:	f104 09b4 	add.w	r9, r4, #180	; 0xb4
 800aa9c:	d107      	bne.n	800aaae <ArtNetNode::HandleIpProg()+0x7e>
 800aa9e:	4649      	mov	r1, r9
 800aaa0:	4843      	ldr	r0, [pc, #268]	; (800abb0 <ArtNetNode::HandleIpProg()+0x180>)
 800aaa2:	f7ff ffbb 	bl	800aa1c <memcpy.constprop.0.isra.0>
 800aaa6:	6831      	ldr	r1, [r6, #0]
 800aaa8:	6828      	ldr	r0, [r5, #0]
 800aaaa:	f007 fb99 	bl	80121e0 <Network::SetNetmask(unsigned int)>
 800aaae:	f007 0790 	and.w	r7, r7, #144	; 0x90
 800aab2:	2f90      	cmp	r7, #144	; 0x90
 800aab4:	f104 0aba 	add.w	sl, r4, #186	; 0xba
 800aab8:	d107      	bne.n	800aaca <ArtNetNode::HandleIpProg()+0x9a>
 800aaba:	4651      	mov	r1, sl
 800aabc:	483c      	ldr	r0, [pc, #240]	; (800abb0 <ArtNetNode::HandleIpProg()+0x180>)
 800aabe:	f7ff ffad 	bl	800aa1c <memcpy.constprop.0.isra.0>
 800aac2:	6831      	ldr	r1, [r6, #0]
 800aac4:	6828      	ldr	r0, [r5, #0]
 800aac6:	f007 fba1 	bl	801220c <Network::SetGatewayIp(unsigned int)>
 800aaca:	2200      	movs	r2, #0
 800aacc:	6829      	ldr	r1, [r5, #0]
 800aace:	7848      	ldrb	r0, [r1, #1]
 800aad0:	f884 20bb 	strb.w	r2, [r4, #187]	; 0xbb
 800aad4:	4290      	cmp	r0, r2
 800aad6:	bf0c      	ite	eq
 800aad8:	4610      	moveq	r0, r2
 800aada:	2040      	movne	r0, #64	; 0x40
 800aadc:	f884 00ba 	strb.w	r0, [r4, #186]	; 0xba
 800aae0:	7848      	ldrb	r0, [r1, #1]
 800aae2:	6909      	ldr	r1, [r1, #16]
 800aae4:	ea8b 0b00 	eor.w	fp, fp, r0
 800aae8:	4640      	mov	r0, r8
 800aaea:	6031      	str	r1, [r6, #0]
 800aaec:	f7ff ff84 	bl	800a9f8 <memcmp.constprop.0>
 800aaf0:	492f      	ldr	r1, [pc, #188]	; (800abb0 <ArtNetNode::HandleIpProg()+0x180>)
 800aaf2:	4607      	mov	r7, r0
 800aaf4:	4640      	mov	r0, r8
 800aaf6:	f7ff ff91 	bl	800aa1c <memcpy.constprop.0.isra.0>
 800aafa:	6829      	ldr	r1, [r5, #0]
 800aafc:	4648      	mov	r0, r9
 800aafe:	6989      	ldr	r1, [r1, #24]
 800ab00:	6031      	str	r1, [r6, #0]
 800ab02:	f7ff ff79 	bl	800a9f8 <memcmp.constprop.0>
 800ab06:	492a      	ldr	r1, [pc, #168]	; (800abb0 <ArtNetNode::HandleIpProg()+0x180>)
 800ab08:	9003      	str	r0, [sp, #12]
 800ab0a:	4648      	mov	r0, r9
 800ab0c:	f7ff ff86 	bl	800aa1c <memcpy.constprop.0.isra.0>
 800ab10:	6829      	ldr	r1, [r5, #0]
 800ab12:	4650      	mov	r0, sl
 800ab14:	6949      	ldr	r1, [r1, #20]
 800ab16:	6031      	str	r1, [r6, #0]
 800ab18:	f7ff ff6e 	bl	800a9f8 <memcmp.constprop.0>
 800ab1c:	9b03      	ldr	r3, [sp, #12]
 800ab1e:	4924      	ldr	r1, [pc, #144]	; (800abb0 <ArtNetNode::HandleIpProg()+0x180>)
 800ab20:	431f      	orrs	r7, r3
 800ab22:	ea57 0300 	orrs.w	r3, r7, r0
 800ab26:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 800ab2a:	bf0c      	ite	eq
 800ab2c:	465e      	moveq	r6, fp
 800ab2e:	f04b 0601 	orrne.w	r6, fp, #1
 800ab32:	f7ff ff73 	bl	800aa1c <memcpy.constprop.0.isra.0>
 800ab36:	2200      	movs	r2, #0
 800ab38:	f641 1336 	movw	r3, #6454	; 0x1936
 800ab3c:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
 800ab40:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
 800ab44:	9300      	str	r3, [sp, #0]
 800ab46:	2222      	movs	r2, #34	; 0x22
 800ab48:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
 800ab4c:	7920      	ldrb	r0, [r4, #4]
 800ab4e:	f104 01a0 	add.w	r1, r4, #160	; 0xa0
 800ab52:	f006 fcf1 	bl	8011538 <udp_send>
 800ab56:	b336      	cbz	r6, 800aba6 <ArtNetNode::HandleIpProg()+0x176>
 800ab58:	682a      	ldr	r2, [r5, #0]
 800ab5a:	f204 507e 	addw	r0, r4, #1406	; 0x57e
 800ab5e:	6913      	ldr	r3, [r2, #16]
 800ab60:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab62:	6991      	ldr	r1, [r2, #24]
 800ab64:	7852      	ldrb	r2, [r2, #1]
 800ab66:	ea63 0301 	orn	r3, r3, r1
 800ab6a:	2a00      	cmp	r2, #0
 800ab6c:	bf14      	ite	ne
 800ab6e:	2202      	movne	r2, #2
 800ab70:	2200      	moveq	r2, #0
 800ab72:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab74:	f994 3096 	ldrsb.w	r3, [r4, #150]	; 0x96
 800ab78:	4641      	mov	r1, r8
 800ab7a:	f023 0302 	bic.w	r3, r3, #2
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
 800ab84:	f7ff ff4a 	bl	800aa1c <memcpy.constprop.0.isra.0>
 800ab88:	4641      	mov	r1, r8
 800ab8a:	f204 6043 	addw	r0, r4, #1603	; 0x643
 800ab8e:	f7ff ff45 	bl	800aa1c <memcpy.constprop.0.isra.0>
 800ab92:	f894 36d6 	ldrb.w	r3, [r4, #1750]	; 0x6d6
 800ab96:	b133      	cbz	r3, 800aba6 <ArtNetNode::HandleIpProg()+0x176>
 800ab98:	2101      	movs	r1, #1
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	b005      	add	sp, #20
 800ab9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba2:	f000 b883 	b.w	800acac <ArtNetNode::SendPollRelply(bool)>
 800aba6:	b005      	add	sp, #20
 800aba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abac:	2000a29c 	mulcs	r0, ip, r2
 800abb0:	20001908 	andcs	r1, r0, r8, lsl #18

0800abb4 <memcpy.isra.0>:
 800abb4:	3801      	subs	r0, #1
 800abb6:	440a      	add	r2, r1
 800abb8:	4291      	cmp	r1, r2
 800abba:	d004      	beq.n	800abc6 <memcpy.isra.0+0x12>
 800abbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abc0:	f800 3f01 	strb.w	r3, [r0, #1]!
 800abc4:	e7f8      	b.n	800abb8 <memcpy.isra.0+0x4>
 800abc6:	4770      	bx	lr

0800abc8 <ArtNetNode::FillPollReply()>:
 800abc8:	b538      	push	{r3, r4, r5, lr}
 800abca:	4604      	mov	r4, r0
 800abcc:	f200 5074 	addw	r0, r0, #1396	; 0x574
 800abd0:	4603      	mov	r3, r0
 800abd2:	2200      	movs	r2, #0
 800abd4:	f204 6163 	addw	r1, r4, #1635	; 0x663
 800abd8:	4299      	cmp	r1, r3
 800abda:	d002      	beq.n	800abe2 <ArtNetNode::FillPollReply()+0x1a>
 800abdc:	f803 2b01 	strb.w	r2, [r3], #1
 800abe0:	e7fa      	b.n	800abd8 <ArtNetNode::FillPollReply()+0x10>
 800abe2:	2208      	movs	r2, #8
 800abe4:	492d      	ldr	r1, [pc, #180]	; (800ac9c <ArtNetNode::FillPollReply()+0xd4>)
 800abe6:	f7ff ffe5 	bl	800abb4 <memcpy.isra.0>
 800abea:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 800abee:	4d2c      	ldr	r5, [pc, #176]	; (800aca0 <ArtNetNode::FillPollReply()+0xd8>)
 800abf0:	f8a4 357c 	strh.w	r3, [r4, #1404]	; 0x57c
 800abf4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800abf6:	4629      	mov	r1, r5
 800abf8:	f204 507e 	addw	r0, r4, #1406	; 0x57e
 800abfc:	2204      	movs	r2, #4
 800abfe:	602b      	str	r3, [r5, #0]
 800ac00:	f7ff ffd8 	bl	800abb4 <memcpy.isra.0>
 800ac04:	f641 1336 	movw	r3, #6454	; 0x1936
 800ac08:	f8a4 3582 	strh.w	r3, [r4, #1410]	; 0x582
 800ac0c:	4b25      	ldr	r3, [pc, #148]	; (800aca4 <ArtNetNode::FillPollReply()+0xdc>)
 800ac0e:	f104 0142 	add.w	r1, r4, #66	; 0x42
 800ac12:	781a      	ldrb	r2, [r3, #0]
 800ac14:	f204 508e 	addw	r0, r4, #1422	; 0x58e
 800ac18:	f884 2584 	strb.w	r2, [r4, #1412]	; 0x584
 800ac1c:	785b      	ldrb	r3, [r3, #1]
 800ac1e:	f884 3585 	strb.w	r3, [r4, #1413]	; 0x585
 800ac22:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 800ac26:	f8a4 3588 	strh.w	r3, [r4, #1416]	; 0x588
 800ac2a:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800ac2e:	f884 358b 	strb.w	r3, [r4, #1419]	; 0x58b
 800ac32:	4b1d      	ldr	r3, [pc, #116]	; (800aca8 <ArtNetNode::FillPollReply()+0xe0>)
 800ac34:	785a      	ldrb	r2, [r3, #1]
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	f884 258c 	strb.w	r2, [r4, #1420]	; 0x58c
 800ac3c:	f884 358d 	strb.w	r3, [r4, #1421]	; 0x58d
 800ac40:	2212      	movs	r2, #18
 800ac42:	f7ff ffb7 	bl	800abb4 <memcpy.isra.0>
 800ac46:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800ac4a:	f504 60b4 	add.w	r0, r4, #1440	; 0x5a0
 800ac4e:	2240      	movs	r2, #64	; 0x40
 800ac50:	f7ff ffb0 	bl	800abb4 <memcpy.isra.0>
 800ac54:	2300      	movs	r3, #0
 800ac56:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800ac5a:	f884 363c 	strb.w	r3, [r4, #1596]	; 0x63c
 800ac5e:	f204 603d 	addw	r0, r4, #1597	; 0x63d
 800ac62:	2206      	movs	r2, #6
 800ac64:	f7ff ffa6 	bl	800abb4 <memcpy.isra.0>
 800ac68:	4629      	mov	r1, r5
 800ac6a:	f204 6043 	addw	r0, r4, #1603	; 0x643
 800ac6e:	2204      	movs	r2, #4
 800ac70:	f7ff ffa0 	bl	800abb4 <memcpy.isra.0>
 800ac74:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800ac78:	f104 0198 	add.w	r1, r4, #152	; 0x98
 800ac7c:	f884 3648 	strb.w	r3, [r4, #1608]	; 0x648
 800ac80:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 800ac84:	f204 604e 	addw	r0, r4, #1614	; 0x64e
 800ac88:	f884 364d 	strb.w	r3, [r4, #1613]	; 0x64d
 800ac8c:	2304      	movs	r3, #4
 800ac8e:	2206      	movs	r2, #6
 800ac90:	f884 3621 	strb.w	r3, [r4, #1569]	; 0x621
 800ac94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac98:	f7ff bf8c 	b.w	800abb4 <memcpy.isra.0>
 800ac9c:	08016c6c 	stmdaeq	r1, {r2, r3, r5, r6, sl, fp, sp, lr}
 800aca0:	2000190c 	andcs	r1, r0, ip, lsl #18
 800aca4:	08016f05 	stmdaeq	r1, {r0, r2, r8, r9, sl, fp, sp, lr}
 800aca8:	08016f03 	stmdaeq	r1, {r0, r1, r8, r9, sl, fp, sp, lr}

0800acac <ArtNetNode::SendPollRelply(bool)>:
 800acac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb0:	4604      	mov	r4, r0
 800acb2:	b087      	sub	sp, #28
 800acb4:	b941      	cbnz	r1, 800acc8 <ArtNetNode::SendPollRelply(bool)+0x1c>
 800acb6:	f890 36d5 	ldrb.w	r3, [r0, #1749]	; 0x6d5
 800acba:	2b02      	cmp	r3, #2
 800acbc:	bf02      	ittt	eq
 800acbe:	f8d0 36c0 	ldreq.w	r3, [r0, #1728]	; 0x6c0
 800acc2:	3301      	addeq	r3, #1
 800acc4:	f8c0 36c0 	streq.w	r3, [r0, #1728]	; 0x6c0
 800acc8:	f04f 0900 	mov.w	r9, #0
 800accc:	46c8      	mov	r8, r9
 800acce:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800acd2:	f884 358b 	strb.w	r3, [r4, #1419]	; 0x58b
 800acd6:	f104 033e 	add.w	r3, r4, #62	; 0x3e
 800acda:	9303      	str	r3, [sp, #12]
 800acdc:	7823      	ldrb	r3, [r4, #0]
 800acde:	4543      	cmp	r3, r8
 800ace0:	f340 80a1 	ble.w	800ae26 <ArtNetNode::SendPollRelply(bool)+0x17a>
 800ace4:	9b03      	ldr	r3, [sp, #12]
 800ace6:	9a03      	ldr	r2, [sp, #12]
 800ace8:	781b      	ldrb	r3, [r3, #0]
 800acea:	2590      	movs	r5, #144	; 0x90
 800acec:	f884 3586 	strb.w	r3, [r4, #1414]	; 0x586
 800acf0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800acf4:	4649      	mov	r1, r9
 800acf6:	f884 3587 	strb.w	r3, [r4, #1415]	; 0x587
 800acfa:	f108 0301 	add.w	r3, r8, #1
 800acfe:	f884 3647 	strb.w	r3, [r4, #1607]	; 0x647
 800ad02:	fa5f f389 	uxtb.w	r3, r9
 800ad06:	2bfb      	cmp	r3, #251	; 0xfb
 800ad08:	9203      	str	r2, [sp, #12]
 800ad0a:	f04f 0a00 	mov.w	sl, #0
 800ad0e:	bf8c      	ite	hi
 800ad10:	2201      	movhi	r2, #1
 800ad12:	2205      	movls	r2, #5
 800ad14:	fb05 4508 	mla	r5, r5, r8, r4
 800ad18:	eb04 1b88 	add.w	fp, r4, r8, lsl #6
 800ad1c:	f204 6722 	addw	r7, r4, #1570	; 0x622
 800ad20:	2a01      	cmp	r2, #1
 800ad22:	d061      	beq.n	800ade8 <ArtNetNode::SendPollRelply(bool)+0x13c>
 800ad24:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 800ad28:	f895 66e7 	ldrb.w	r6, [r5, #1767]	; 0x6e7
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d144      	bne.n	800adba <ArtNetNode::SendPollRelply(bool)+0x10e>
 800ad30:	f8d5 36f0 	ldr.w	r3, [r5, #1776]	; 0x6f0
 800ad34:	f006 067f 	and.w	r6, r6, #127	; 0x7f
 800ad38:	b14b      	cbz	r3, 800ad4e <ArtNetNode::SendPollRelply(bool)+0xa2>
 800ad3a:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 800ad3e:	f8d5 06ec 	ldr.w	r0, [r5, #1772]	; 0x6ec
 800ad42:	1a1b      	subs	r3, r3, r0
 800ad44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad48:	bf38      	it	cc
 800ad4a:	f046 0680 	orrcc.w	r6, r6, #128	; 0x80
 800ad4e:	f8d5 36f8 	ldr.w	r3, [r5, #1784]	; 0x6f8
 800ad52:	b14b      	cbz	r3, 800ad68 <ArtNetNode::SendPollRelply(bool)+0xbc>
 800ad54:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 800ad58:	f8d5 06f4 	ldr.w	r0, [r5, #1780]	; 0x6f4
 800ad5c:	1a1b      	subs	r3, r3, r0
 800ad5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad62:	d201      	bcs.n	800ad68 <ArtNetNode::SendPollRelply(bool)+0xbc>
 800ad64:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 800ad68:	f895 36e8 	ldrb.w	r3, [r5, #1768]	; 0x6e8
 800ad6c:	f885 66e7 	strb.w	r6, [r5, #1767]	; 0x6e7
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d037      	beq.n	800ade4 <ArtNetNode::SendPollRelply(bool)+0x138>
 800ad74:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800ad78:	f10a 0a01 	add.w	sl, sl, #1
 800ad7c:	703b      	strb	r3, [r7, #0]
 800ad7e:	723e      	strb	r6, [r7, #8]
 800ad80:	f895 36e6 	ldrb.w	r3, [r5, #1766]	; 0x6e6
 800ad84:	743b      	strb	r3, [r7, #16]
 800ad86:	b2cb      	uxtb	r3, r1
 800ad88:	2b03      	cmp	r3, #3
 800ad8a:	d80e      	bhi.n	800adaa <ArtNetNode::SendPollRelply(bool)+0xfe>
 800ad8c:	f89b 3778 	ldrb.w	r3, [fp, #1912]	; 0x778
 800ad90:	b12b      	cbz	r3, 800ad9e <ArtNetNode::SendPollRelply(bool)+0xf2>
 800ad92:	783b      	ldrb	r3, [r7, #0]
 800ad94:	f10a 0a01 	add.w	sl, sl, #1
 800ad98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad9c:	703b      	strb	r3, [r7, #0]
 800ad9e:	f89b 3777 	ldrb.w	r3, [fp, #1911]	; 0x777
 800ada2:	713b      	strb	r3, [r7, #4]
 800ada4:	f89b 3776 	ldrb.w	r3, [fp, #1910]	; 0x776
 800ada8:	733b      	strb	r3, [r7, #12]
 800adaa:	1e53      	subs	r3, r2, #1
 800adac:	3101      	adds	r1, #1
 800adae:	b2da      	uxtb	r2, r3
 800adb0:	f10b 0b10 	add.w	fp, fp, #16
 800adb4:	3701      	adds	r7, #1
 800adb6:	3524      	adds	r5, #36	; 0x24
 800adb8:	e7b2      	b.n	800ad20 <ArtNetNode::SendPollRelply(bool)+0x74>
 800adba:	69e0      	ldr	r0, [r4, #28]
 800adbc:	2800      	cmp	r0, #0
 800adbe:	d0d3      	beq.n	800ad68 <ArtNetNode::SendPollRelply(bool)+0xbc>
 800adc0:	6803      	ldr	r3, [r0, #0]
 800adc2:	9205      	str	r2, [sp, #20]
 800adc4:	9104      	str	r1, [sp, #16]
 800adc6:	691b      	ldr	r3, [r3, #16]
 800adc8:	4798      	blx	r3
 800adca:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800adce:	f000 0089 	and.w	r0, r0, #137	; 0x89
 800add2:	f006 0676 	and.w	r6, r6, #118	; 0x76
 800add6:	4306      	orrs	r6, r0
 800add8:	f010 0001 	ands.w	r0, r0, #1
 800addc:	bf08      	it	eq
 800adde:	f8c5 0700 	streq.w	r0, [r5, #1792]	; 0x700
 800ade2:	e7c1      	b.n	800ad68 <ArtNetNode::SendPollRelply(bool)+0xbc>
 800ade4:	703b      	strb	r3, [r7, #0]
 800ade6:	e7ca      	b.n	800ad7e <ArtNetNode::SendPollRelply(bool)+0xd2>
 800ade8:	f204 636f 	addw	r3, r4, #1647	; 0x66f
 800adec:	9301      	str	r3, [sp, #4]
 800adee:	f8d4 36c0 	ldr.w	r3, [r4, #1728]	; 0x6c0
 800adf2:	2140      	movs	r1, #64	; 0x40
 800adf4:	4a0f      	ldr	r2, [pc, #60]	; (800ae34 <ArtNetNode::SendPollRelply(bool)+0x188>)
 800adf6:	9300      	str	r3, [sp, #0]
 800adf8:	f884 a621 	strb.w	sl, [r4, #1569]	; 0x621
 800adfc:	f894 36d4 	ldrb.w	r3, [r4, #1748]	; 0x6d4
 800ae00:	f504 60bc 	add.w	r0, r4, #1504	; 0x5e0
 800ae04:	f7fe fc5a 	bl	80096bc <snprintf>
 800ae08:	f641 1336 	movw	r3, #6454	; 0x1936
 800ae0c:	22ef      	movs	r2, #239	; 0xef
 800ae0e:	9300      	str	r3, [sp, #0]
 800ae10:	7920      	ldrb	r0, [r4, #4]
 800ae12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ae14:	f204 5174 	addw	r1, r4, #1396	; 0x574
 800ae18:	f006 fb8e 	bl	8011538 <udp_send>
 800ae1c:	f108 0801 	add.w	r8, r8, #1
 800ae20:	f109 0904 	add.w	r9, r9, #4
 800ae24:	e75a      	b.n	800acdc <ArtNetNode::SendPollRelply(bool)+0x30>
 800ae26:	2300      	movs	r3, #0
 800ae28:	f884 36db 	strb.w	r3, [r4, #1755]	; 0x6db
 800ae2c:	b007      	add	sp, #28
 800ae2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae32:	bf00      	nop
 800ae34:	08016c59 	stmdaeq	r1, {r0, r3, r4, r6, sl, fp, sp, lr}

0800ae38 <ArtNetNode::HandlePoll()>:
 800ae38:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 800ae3c:	b410      	push	{r4}
 800ae3e:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800ae42:	f880 26d6 	strb.w	r2, [r0, #1750]	; 0x6d6
 800ae46:	f013 0204 	ands.w	r2, r3, #4
 800ae4a:	d02e      	beq.n	800aeaa <ArtNetNode::HandlePoll()+0x72>
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	f8d0 16c8 	ldr.w	r1, [r0, #1736]	; 0x6c8
 800ae52:	f890 46d8 	ldrb.w	r4, [r0, #1752]	; 0x6d8
 800ae56:	f880 26d7 	strb.w	r2, [r0, #1751]	; 0x6d7
 800ae5a:	b979      	cbnz	r1, 800ae7c <ArtNetNode::HandlePoll()+0x44>
 800ae5c:	f8d0 256c 	ldr.w	r2, [r0, #1388]	; 0x56c
 800ae60:	f8c0 26c8 	str.w	r2, [r0, #1736]	; 0x6c8
 800ae64:	b19c      	cbz	r4, 800ae8e <ArtNetNode::HandlePoll()+0x56>
 800ae66:	f890 36e0 	ldrb.w	r3, [r0, #1760]	; 0x6e0
 800ae6a:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	bf28      	it	cs
 800ae72:	4613      	movcs	r3, r2
 800ae74:	f880 36e0 	strb.w	r3, [r0, #1760]	; 0x6e0
 800ae78:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800ae7a:	e010      	b.n	800ae9e <ArtNetNode::HandlePoll()+0x66>
 800ae7c:	2c00      	cmp	r4, #0
 800ae7e:	d1f2      	bne.n	800ae66 <ArtNetNode::HandlePoll()+0x2e>
 800ae80:	f8d0 456c 	ldr.w	r4, [r0, #1388]	; 0x56c
 800ae84:	42a1      	cmp	r1, r4
 800ae86:	d002      	beq.n	800ae8e <ArtNetNode::HandlePoll()+0x56>
 800ae88:	f880 26d8 	strb.w	r2, [r0, #1752]	; 0x6d8
 800ae8c:	e7eb      	b.n	800ae66 <ArtNetNode::HandlePoll()+0x2e>
 800ae8e:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 800ae92:	071b      	lsls	r3, r3, #28
 800ae94:	f880 26e0 	strb.w	r2, [r0, #1760]	; 0x6e0
 800ae98:	d5ee      	bpl.n	800ae78 <ArtNetNode::HandlePoll()+0x40>
 800ae9a:	f8d0 356c 	ldr.w	r3, [r0, #1388]	; 0x56c
 800ae9e:	f8c0 36c4 	str.w	r3, [r0, #1732]	; 0x6c4
 800aea2:	2101      	movs	r1, #1
 800aea4:	bc10      	pop	{r4}
 800aea6:	f7ff bf01 	b.w	800acac <ArtNetNode::SendPollRelply(bool)>
 800aeaa:	f880 26d7 	strb.w	r2, [r0, #1751]	; 0x6d7
 800aeae:	f8c0 26c4 	str.w	r2, [r0, #1732]	; 0x6c4
 800aeb2:	e7f6      	b.n	800aea2 <ArtNetNode::HandlePoll()+0x6a>

0800aeb4 <ArtNetNode::SendTod(unsigned int)>:
 800aeb4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800aeb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800aebc:	2500      	movs	r5, #0
 800aebe:	f880 30a9 	strb.w	r3, [r0, #169]	; 0xa9
 800aec2:	2301      	movs	r3, #1
 800aec4:	4688      	mov	r8, r1
 800aec6:	4604      	mov	r4, r0
 800aec8:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
 800aecc:	f880 50a8 	strb.w	r5, [r0, #168]	; 0xa8
 800aed0:	6900      	ldr	r0, [r0, #16]
 800aed2:	088f      	lsrs	r7, r1, #2
 800aed4:	6803      	ldr	r3, [r0, #0]
 800aed6:	68db      	ldr	r3, [r3, #12]
 800aed8:	4798      	blx	r3
 800aeda:	f008 0303 	and.w	r3, r8, #3
 800aede:	3301      	adds	r3, #1
 800aee0:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 800aee4:	1c7b      	adds	r3, r7, #1
 800aee6:	b2ff      	uxtb	r7, r7
 800aee8:	f884 50ae 	strb.w	r5, [r4, #174]	; 0xae
 800aeec:	f884 50af 	strb.w	r5, [r4, #175]	; 0xaf
 800aef0:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 800aef4:	f884 50b1 	strb.w	r5, [r4, #177]	; 0xb1
 800aef8:	f884 50b2 	strb.w	r5, [r4, #178]	; 0xb2
 800aefc:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
 800af00:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 800af04:	4427      	add	r7, r4
 800af06:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800af0a:	f884 50b6 	strb.w	r5, [r4, #182]	; 0xb6
 800af0e:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
 800af12:	2324      	movs	r3, #36	; 0x24
 800af14:	fb03 4308 	mla	r3, r3, r8, r4
 800af18:	f893 36e6 	ldrb.w	r3, [r3, #1766]	; 0x6e6
 800af1c:	b2c6      	uxtb	r6, r0
 800af1e:	6920      	ldr	r0, [r4, #16]
 800af20:	f884 50b8 	strb.w	r5, [r4, #184]	; 0xb8
 800af24:	f884 50ba 	strb.w	r5, [r4, #186]	; 0xba
 800af28:	f884 30b7 	strb.w	r3, [r4, #183]	; 0xb7
 800af2c:	f884 60b9 	strb.w	r6, [r4, #185]	; 0xb9
 800af30:	f884 60bb 	strb.w	r6, [r4, #187]	; 0xbb
 800af34:	6803      	ldr	r3, [r0, #0]
 800af36:	4641      	mov	r1, r8
 800af38:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 800af3c:	691b      	ldr	r3, [r3, #16]
 800af3e:	4798      	blx	r3
 800af40:	2206      	movs	r2, #6
 800af42:	f641 1336 	movw	r3, #6454	; 0x1936
 800af46:	4372      	muls	r2, r6
 800af48:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
 800af4c:	9300      	str	r3, [sp, #0]
 800af4e:	4629      	mov	r1, r5
 800af50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800af52:	7920      	ldrb	r0, [r4, #4]
 800af54:	321c      	adds	r2, #28
 800af56:	f006 faef 	bl	8011538 <udp_send>
 800af5a:	b002      	add	sp, #8
 800af5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800af60 <ArtNetNode::HandleTodControl()>:
 800af60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af62:	4604      	mov	r4, r0
 800af64:	4606      	mov	r6, r0
 800af66:	2500      	movs	r5, #0
 800af68:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
 800af6c:	f890 70b7 	ldrb.w	r7, [r0, #183]	; 0xb7
 800af70:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800af74:	f8b6 36e4 	ldrh.w	r3, [r6, #1764]	; 0x6e4
 800af78:	42bb      	cmp	r3, r7
 800af7a:	d125      	bne.n	800afc8 <ArtNetNode::HandleTodControl()+0x68>
 800af7c:	f896 36e8 	ldrb.w	r3, [r6, #1768]	; 0x6e8
 800af80:	b313      	cbz	r3, 800afc8 <ArtNetNode::HandleTodControl()+0x68>
 800af82:	f896 3705 	ldrb.w	r3, [r6, #1797]	; 0x705
 800af86:	b13b      	cbz	r3, 800af98 <ArtNetNode::HandleTodControl()+0x38>
 800af88:	f894 366e 	ldrb.w	r3, [r4, #1646]	; 0x66e
 800af8c:	b923      	cbnz	r3, 800af98 <ArtNetNode::HandleTodControl()+0x38>
 800af8e:	68a0      	ldr	r0, [r4, #8]
 800af90:	4629      	mov	r1, r5
 800af92:	6803      	ldr	r3, [r0, #0]
 800af94:	68db      	ldr	r3, [r3, #12]
 800af96:	4798      	blx	r3
 800af98:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d104      	bne.n	800afaa <ArtNetNode::HandleTodControl()+0x4a>
 800afa0:	6920      	ldr	r0, [r4, #16]
 800afa2:	4629      	mov	r1, r5
 800afa4:	6803      	ldr	r3, [r0, #0]
 800afa6:	689b      	ldr	r3, [r3, #8]
 800afa8:	4798      	blx	r3
 800afaa:	4629      	mov	r1, r5
 800afac:	4620      	mov	r0, r4
 800afae:	f7ff ff81 	bl	800aeb4 <ArtNetNode::SendTod(unsigned int)>
 800afb2:	f896 3705 	ldrb.w	r3, [r6, #1797]	; 0x705
 800afb6:	b13b      	cbz	r3, 800afc8 <ArtNetNode::HandleTodControl()+0x68>
 800afb8:	f894 366e 	ldrb.w	r3, [r4, #1646]	; 0x66e
 800afbc:	b923      	cbnz	r3, 800afc8 <ArtNetNode::HandleTodControl()+0x68>
 800afbe:	68a0      	ldr	r0, [r4, #8]
 800afc0:	4629      	mov	r1, r5
 800afc2:	6803      	ldr	r3, [r0, #0]
 800afc4:	689b      	ldr	r3, [r3, #8]
 800afc6:	4798      	blx	r3
 800afc8:	3501      	adds	r5, #1
 800afca:	2d04      	cmp	r5, #4
 800afcc:	f106 0624 	add.w	r6, r6, #36	; 0x24
 800afd0:	d1d0      	bne.n	800af74 <ArtNetNode::HandleTodControl()+0x14>
 800afd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800afd4 <ArtNetNode::HandleTodRequest()>:
 800afd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afd6:	4604      	mov	r4, r0
 800afd8:	4606      	mov	r6, r0
 800afda:	2500      	movs	r5, #0
 800afdc:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
 800afe0:	f890 70b8 	ldrb.w	r7, [r0, #184]	; 0xb8
 800afe4:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800afe8:	f8b6 36e4 	ldrh.w	r3, [r6, #1764]	; 0x6e4
 800afec:	42bb      	cmp	r3, r7
 800afee:	d106      	bne.n	800affe <ArtNetNode::HandleTodRequest()+0x2a>
 800aff0:	f896 36e8 	ldrb.w	r3, [r6, #1768]	; 0x6e8
 800aff4:	b11b      	cbz	r3, 800affe <ArtNetNode::HandleTodRequest()+0x2a>
 800aff6:	4629      	mov	r1, r5
 800aff8:	4620      	mov	r0, r4
 800affa:	f7ff ff5b 	bl	800aeb4 <ArtNetNode::SendTod(unsigned int)>
 800affe:	3501      	adds	r5, #1
 800b000:	2d04      	cmp	r5, #4
 800b002:	f106 0624 	add.w	r6, r6, #36	; 0x24
 800b006:	d1ef      	bne.n	800afe8 <ArtNetNode::HandleTodRequest()+0x14>
 800b008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b00c <ArtNetNode::HandleRdm()>:
 800b00c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b010:	4604      	mov	r4, r0
 800b012:	4605      	mov	r5, r0
 800b014:	2600      	movs	r6, #0
 800b016:	f04f 0b01 	mov.w	fp, #1
 800b01a:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
 800b01e:	f890 70b7 	ldrb.w	r7, [r0, #183]	; 0xb7
 800b022:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 800b0e4 <ArtNetNode::HandleRdm()+0xd8>
 800b026:	f100 09a0 	add.w	r9, r0, #160	; 0xa0
 800b02a:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800b02e:	f100 08b8 	add.w	r8, r0, #184	; 0xb8
 800b032:	f8b5 36e4 	ldrh.w	r3, [r5, #1764]	; 0x6e4
 800b036:	42bb      	cmp	r3, r7
 800b038:	d148      	bne.n	800b0cc <ArtNetNode::HandleRdm()+0xc0>
 800b03a:	f895 36e8 	ldrb.w	r3, [r5, #1768]	; 0x6e8
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d044      	beq.n	800b0cc <ArtNetNode::HandleRdm()+0xc0>
 800b042:	f894 366e 	ldrb.w	r3, [r4, #1646]	; 0x66e
 800b046:	b9c3      	cbnz	r3, 800b07a <ArtNetNode::HandleRdm()+0x6e>
 800b048:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d10c      	bne.n	800b06a <ArtNetNode::HandleRdm()+0x5e>
 800b050:	69e0      	ldr	r0, [r4, #28]
 800b052:	b150      	cbz	r0, 800b06a <ArtNetNode::HandleRdm()+0x5e>
 800b054:	6803      	ldr	r3, [r0, #0]
 800b056:	4631      	mov	r1, r6
 800b058:	691b      	ldr	r3, [r3, #16]
 800b05a:	4798      	blx	r3
 800b05c:	f010 0f89 	tst.w	r0, #137	; 0x89
 800b060:	bf14      	ite	ne
 800b062:	2301      	movne	r3, #1
 800b064:	2300      	moveq	r3, #0
 800b066:	f885 3705 	strb.w	r3, [r5, #1797]	; 0x705
 800b06a:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 800b06e:	b123      	cbz	r3, 800b07a <ArtNetNode::HandleRdm()+0x6e>
 800b070:	68a0      	ldr	r0, [r4, #8]
 800b072:	4631      	mov	r1, r6
 800b074:	6803      	ldr	r3, [r0, #0]
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	4798      	blx	r3
 800b07a:	6920      	ldr	r0, [r4, #16]
 800b07c:	4642      	mov	r2, r8
 800b07e:	6803      	ldr	r3, [r0, #0]
 800b080:	4631      	mov	r1, r6
 800b082:	695b      	ldr	r3, [r3, #20]
 800b084:	4798      	blx	r3
 800b086:	b348      	cbz	r0, 800b0dc <ArtNetNode::HandleRdm()+0xd0>
 800b088:	4641      	mov	r1, r8
 800b08a:	f884 b0ac 	strb.w	fp, [r4, #172]	; 0xac
 800b08e:	7882      	ldrb	r2, [r0, #2]
 800b090:	3001      	adds	r0, #1
 800b092:	1c53      	adds	r3, r2, #1
 800b094:	3b01      	subs	r3, #1
 800b096:	d304      	bcc.n	800b0a2 <ArtNetNode::HandleRdm()+0x96>
 800b098:	f810 cb01 	ldrb.w	ip, [r0], #1
 800b09c:	f801 cb01 	strb.w	ip, [r1], #1
 800b0a0:	e7f8      	b.n	800b094 <ArtNetNode::HandleRdm()+0x88>
 800b0a2:	f641 1336 	movw	r3, #6454	; 0x1936
 800b0a6:	4649      	mov	r1, r9
 800b0a8:	9300      	str	r3, [sp, #0]
 800b0aa:	7920      	ldrb	r0, [r4, #4]
 800b0ac:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
 800b0b0:	3219      	adds	r2, #25
 800b0b2:	f006 fa41 	bl	8011538 <udp_send>
 800b0b6:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 800b0ba:	b13b      	cbz	r3, 800b0cc <ArtNetNode::HandleRdm()+0xc0>
 800b0bc:	f894 366e 	ldrb.w	r3, [r4, #1646]	; 0x66e
 800b0c0:	b923      	cbnz	r3, 800b0cc <ArtNetNode::HandleRdm()+0xc0>
 800b0c2:	68a0      	ldr	r0, [r4, #8]
 800b0c4:	4631      	mov	r1, r6
 800b0c6:	6803      	ldr	r3, [r0, #0]
 800b0c8:	689b      	ldr	r3, [r3, #8]
 800b0ca:	4798      	blx	r3
 800b0cc:	3601      	adds	r6, #1
 800b0ce:	2e04      	cmp	r6, #4
 800b0d0:	f105 0524 	add.w	r5, r5, #36	; 0x24
 800b0d4:	d1ad      	bne.n	800b032 <ArtNetNode::HandleRdm()+0x26>
 800b0d6:	b003      	add	sp, #12
 800b0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0dc:	4650      	mov	r0, sl
 800b0de:	f7fe fac5 	bl	800966c <printf>
 800b0e2:	e7e8      	b.n	800b0b6 <ArtNetNode::HandleRdm()+0xaa>
 800b0e4:	08016c74 	stmdaeq	r1, {r2, r4, r5, r6, sl, fp, sp, lr}

0800b0e8 <ArtNetNode::HandleSync()>:
 800b0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0ec:	2600      	movs	r6, #0
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	4604      	mov	r4, r0
 800b0f2:	4605      	mov	r5, r0
 800b0f4:	46b1      	mov	r9, r6
 800b0f6:	f880 36d9 	strb.w	r3, [r0, #1753]	; 0x6d9
 800b0fa:	4b1e      	ldr	r3, [pc, #120]	; (800b174 <ArtNetNode::HandleSync()+0x8c>)
 800b0fc:	4f1e      	ldr	r7, [pc, #120]	; (800b178 <ArtNetNode::HandleSync()+0x90>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800b17c <ArtNetNode::HandleSync()+0x94>
 800b104:	f8c0 36d0 	str.w	r3, [r0, #1744]	; 0x6d0
 800b108:	7823      	ldrb	r3, [r4, #0]
 800b10a:	ebb6 0f83 	cmp.w	r6, r3, lsl #2
 800b10e:	d22f      	bcs.n	800b170 <ArtNetNode::HandleSync()+0x88>
 800b110:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 800b114:	bb3b      	cbnz	r3, 800b166 <ArtNetNode::HandleSync()+0x7e>
 800b116:	f895 36e8 	ldrb.w	r3, [r5, #1768]	; 0x6e8
 800b11a:	b323      	cbz	r3, 800b166 <ArtNetNode::HandleSync()+0x7e>
 800b11c:	f8d8 3000 	ldr.w	r3, [r8]
 800b120:	68a0      	ldr	r0, [r4, #8]
 800b122:	07da      	lsls	r2, r3, #31
 800b124:	bf5c      	itt	pl
 800b126:	2301      	movpl	r3, #1
 800b128:	f8c8 3000 	strpl.w	r3, [r8]
 800b12c:	6803      	ldr	r3, [r0, #0]
 800b12e:	4631      	mov	r1, r6
 800b130:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800b134:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 800b138:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800b13c:	47d0      	blx	sl
 800b13e:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 800b142:	b93b      	cbnz	r3, 800b154 <ArtNetNode::HandleSync()+0x6c>
 800b144:	68a0      	ldr	r0, [r4, #8]
 800b146:	4631      	mov	r1, r6
 800b148:	6803      	ldr	r3, [r0, #0]
 800b14a:	689b      	ldr	r3, [r3, #8]
 800b14c:	4798      	blx	r3
 800b14e:	2301      	movs	r3, #1
 800b150:	f885 3705 	strb.w	r3, [r5, #1797]	; 0x705
 800b154:	f8d8 3000 	ldr.w	r3, [r8]
 800b158:	f8c7 9600 	str.w	r9, [r7, #1536]	; 0x600
 800b15c:	07db      	lsls	r3, r3, #31
 800b15e:	bf5c      	itt	pl
 800b160:	2301      	movpl	r3, #1
 800b162:	f8c8 3000 	strpl.w	r3, [r8]
 800b166:	3601      	adds	r6, #1
 800b168:	f207 6704 	addw	r7, r7, #1540	; 0x604
 800b16c:	3524      	adds	r5, #36	; 0x24
 800b16e:	e7cb      	b.n	800b108 <ArtNetNode::HandleSync()+0x20>
 800b170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b174:	2000a9dc 	ldrdcs	sl, [r0], -ip
 800b178:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800b17c:	200000ec 	andcs	r0, r0, ip, ror #1

0800b180 <ArtNetNode::HandleTimeCode()>:
 800b180:	4601      	mov	r1, r0
 800b182:	68c0      	ldr	r0, [r0, #12]
 800b184:	31ae      	adds	r1, #174	; 0xae
 800b186:	6803      	ldr	r3, [r0, #0]
 800b188:	691b      	ldr	r3, [r3, #16]
 800b18a:	4718      	bx	r3

0800b18c <ArtNetNode::HandleTimeSync()>:
 800b18c:	b500      	push	{lr}
 800b18e:	f890 30af 	ldrb.w	r3, [r0, #175]	; 0xaf
 800b192:	b08b      	sub	sp, #44	; 0x2c
 800b194:	9301      	str	r3, [sp, #4]
 800b196:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 800b19a:	f890 20b4 	ldrb.w	r2, [r0, #180]	; 0xb4
 800b19e:	9302      	str	r3, [sp, #8]
 800b1a0:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
 800b1a4:	a901      	add	r1, sp, #4
 800b1a6:	9303      	str	r3, [sp, #12]
 800b1a8:	f890 30b2 	ldrb.w	r3, [r0, #178]	; 0xb2
 800b1ac:	9304      	str	r3, [sp, #16]
 800b1ae:	f890 30b3 	ldrb.w	r3, [r0, #179]	; 0xb3
 800b1b2:	9305      	str	r3, [sp, #20]
 800b1b4:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
 800b1b8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b1bc:	9306      	str	r3, [sp, #24]
 800b1be:	4b03      	ldr	r3, [pc, #12]	; (800b1cc <ArtNetNode::HandleTimeSync()+0x40>)
 800b1c0:	6818      	ldr	r0, [r3, #0]
 800b1c2:	f009 fa8b 	bl	80146dc <Hardware::SetTime(tm const*)>
 800b1c6:	b00b      	add	sp, #44	; 0x2c
 800b1c8:	f85d fb04 	ldr.w	pc, [sp], #4
 800b1cc:	2000a9c4 	andcs	sl, r0, r4, asr #19

0800b1d0 <ArtNetNode::Print()>:
 800b1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d4:	4605      	mov	r5, r0
 800b1d6:	4604      	mov	r4, r0
 800b1d8:	b08b      	sub	sp, #44	; 0x2c
 800b1da:	f815 2b42 	ldrb.w	r2, [r5], #66
 800b1de:	2104      	movs	r1, #4
 800b1e0:	4853      	ldr	r0, [pc, #332]	; (800b330 <ArtNetNode::Print()+0x160>)
 800b1e2:	f7fe fa43 	bl	800966c <printf>
 800b1e6:	4b53      	ldr	r3, [pc, #332]	; (800b334 <ArtNetNode::Print()+0x164>)
 800b1e8:	4853      	ldr	r0, [pc, #332]	; (800b338 <ArtNetNode::Print()+0x168>)
 800b1ea:	7819      	ldrb	r1, [r3, #0]
 800b1ec:	785a      	ldrb	r2, [r3, #1]
 800b1ee:	f7fe fa3d 	bl	800966c <printf>
 800b1f2:	4629      	mov	r1, r5
 800b1f4:	4851      	ldr	r0, [pc, #324]	; (800b33c <ArtNetNode::Print()+0x16c>)
 800b1f6:	f7fe fa39 	bl	800966c <printf>
 800b1fa:	4851      	ldr	r0, [pc, #324]	; (800b340 <ArtNetNode::Print()+0x170>)
 800b1fc:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800b200:	f7fe fa34 	bl	800966c <printf>
 800b204:	f894 36de 	ldrb.w	r3, [r4, #1758]	; 0x6de
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d044      	beq.n	800b296 <ArtNetNode::Print()+0xc6>
 800b20c:	484d      	ldr	r0, [pc, #308]	; (800b344 <ArtNetNode::Print()+0x174>)
 800b20e:	f7fe fa2d 	bl	800966c <printf>
 800b212:	4626      	mov	r6, r4
 800b214:	2500      	movs	r5, #0
 800b216:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800b348 <ArtNetNode::Print()+0x178>
 800b21a:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800b34c <ArtNetNode::Print()+0x17c>
 800b21e:	7823      	ldrb	r3, [r4, #0]
 800b220:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
 800b224:	d237      	bcs.n	800b296 <ArtNetNode::Print()+0xc6>
 800b226:	2301      	movs	r3, #1
 800b228:	4629      	mov	r1, r5
 800b22a:	4620      	mov	r0, r4
 800b22c:	f10d 0225 	add.w	r2, sp, #37	; 0x25
 800b230:	f7fe feaa 	bl	8009f88 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 800b234:	b360      	cbz	r0, 800b290 <ArtNetNode::Print()+0xc0>
 800b236:	eb04 0395 	add.w	r3, r4, r5, lsr #2
 800b23a:	f893 a03e 	ldrb.w	sl, [r3, #62]	; 0x3e
 800b23e:	f893 b03f 	ldrb.w	fp, [r3, #63]	; 0x3f
 800b242:	4629      	mov	r1, r5
 800b244:	2301      	movs	r3, #1
 800b246:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800b24a:	4620      	mov	r0, r4
 800b24c:	f7fe fe86 	bl	8009f5c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800b250:	f8d6 06fc 	ldr.w	r0, [r6, #1788]	; 0x6fc
 800b254:	493e      	ldr	r1, [pc, #248]	; (800b350 <ArtNetNode::Print()+0x180>)
 800b256:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800b25a:	2800      	cmp	r0, #0
 800b25c:	bf18      	it	ne
 800b25e:	4641      	movne	r1, r8
 800b260:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800b264:	08af      	lsrs	r7, r5, #2
 800b266:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800b26a:	e9cd b300 	strd	fp, r3, [sp]
 800b26e:	463a      	mov	r2, r7
 800b270:	4653      	mov	r3, sl
 800b272:	4629      	mov	r1, r5
 800b274:	4648      	mov	r0, r9
 800b276:	f7fe f9f9 	bl	800966c <printf>
 800b27a:	f8d6 1700 	ldr.w	r1, [r6, #1792]	; 0x700
 800b27e:	4a35      	ldr	r2, [pc, #212]	; (800b354 <ArtNetNode::Print()+0x184>)
 800b280:	4b35      	ldr	r3, [pc, #212]	; (800b358 <ArtNetNode::Print()+0x188>)
 800b282:	4836      	ldr	r0, [pc, #216]	; (800b35c <ArtNetNode::Print()+0x18c>)
 800b284:	2900      	cmp	r1, #0
 800b286:	bf0c      	ite	eq
 800b288:	4611      	moveq	r1, r2
 800b28a:	4619      	movne	r1, r3
 800b28c:	f7fe f9ee 	bl	800966c <printf>
 800b290:	3501      	adds	r5, #1
 800b292:	3624      	adds	r6, #36	; 0x24
 800b294:	e7c3      	b.n	800b21e <ArtNetNode::Print()+0x4e>
 800b296:	f894 36df 	ldrb.w	r3, [r4, #1759]	; 0x6df
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d045      	beq.n	800b32a <ArtNetNode::Print()+0x15a>
 800b29e:	4830      	ldr	r0, [pc, #192]	; (800b360 <ArtNetNode::Print()+0x190>)
 800b2a0:	f7fe f9e4 	bl	800966c <printf>
 800b2a4:	f04f 0b00 	mov.w	fp, #0
 800b2a8:	4e2e      	ldr	r6, [pc, #184]	; (800b364 <ArtNetNode::Print()+0x194>)
 800b2aa:	4f2f      	ldr	r7, [pc, #188]	; (800b368 <ArtNetNode::Print()+0x198>)
 800b2ac:	7823      	ldrb	r3, [r4, #0]
 800b2ae:	ebbb 0f83 	cmp.w	fp, r3, lsl #2
 800b2b2:	d23a      	bcs.n	800b32a <ArtNetNode::Print()+0x15a>
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	4659      	mov	r1, fp
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	f10d 0225 	add.w	r2, sp, #37	; 0x25
 800b2be:	f7fe fe63 	bl	8009f88 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 800b2c2:	b378      	cbz	r0, 800b324 <ArtNetNode::Print()+0x154>
 800b2c4:	eb04 039b 	add.w	r3, r4, fp, lsr #2
 800b2c8:	f893 903e 	ldrb.w	r9, [r3, #62]	; 0x3e
 800b2cc:	f893 a03f 	ldrb.w	sl, [r3, #63]	; 0x3f
 800b2d0:	eb04 130b 	add.w	r3, r4, fp, lsl #4
 800b2d4:	f8d3 577c 	ldr.w	r5, [r3, #1916]	; 0x77c
 800b2d8:	ea4f 089b 	mov.w	r8, fp, lsr #2
 800b2dc:	b925      	cbnz	r5, 800b2e8 <ArtNetNode::Print()+0x118>
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	699a      	ldr	r2, [r3, #24]
 800b2e2:	691d      	ldr	r5, [r3, #16]
 800b2e4:	ea65 0502 	orn	r5, r5, r2
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	4659      	mov	r1, fp
 800b2ec:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800b2f0:	4620      	mov	r0, r4
 800b2f2:	f7fe fe33 	bl	8009f5c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800b2f6:	0e2b      	lsrs	r3, r5, #24
 800b2f8:	9306      	str	r3, [sp, #24]
 800b2fa:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800b2fe:	9305      	str	r3, [sp, #20]
 800b300:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800b304:	9304      	str	r3, [sp, #16]
 800b306:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800b30a:	b2ed      	uxtb	r5, r5
 800b30c:	9302      	str	r3, [sp, #8]
 800b30e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800b312:	4642      	mov	r2, r8
 800b314:	e9cd a300 	strd	sl, r3, [sp]
 800b318:	4659      	mov	r1, fp
 800b31a:	464b      	mov	r3, r9
 800b31c:	4630      	mov	r0, r6
 800b31e:	9503      	str	r5, [sp, #12]
 800b320:	f7fe f9a4 	bl	800966c <printf>
 800b324:	f10b 0b01 	add.w	fp, fp, #1
 800b328:	e7c0      	b.n	800b2ac <ArtNetNode::Print()+0xdc>
 800b32a:	b00b      	add	sp, #44	; 0x2c
 800b32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b330:	08016c9a 	stmdaeq	r1, {r1, r3, r4, r7, sl, fp, sp, lr}
 800b334:	08016f05 	stmdaeq	r1, {r0, r2, r8, r9, sl, fp, sp, lr}
 800b338:	08016ca8 	stmdaeq	r1, {r3, r5, r7, sl, fp, sp, lr}
 800b33c:	08016cbd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, sl, fp, sp, lr}
 800b340:	08016ccf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, sl, fp, sp, lr}
 800b344:	08016ce1 	stmdaeq	r1, {r0, r5, r6, r7, sl, fp, sp, lr}
 800b348:	08016c89 	stmdaeq	r1, {r0, r3, r7, sl, fp, sp, lr}
 800b34c:	08016cea 	stmdaeq	r1, {r1, r3, r5, r6, r7, sl, fp, sp, lr}
 800b350:	08016c85 	stmdaeq	r1, {r0, r2, r7, sl, fp, sp, lr}
 800b354:	08016c8d 	stmdaeq	r1, {r0, r2, r3, r7, sl, fp, sp, lr}
 800b358:	08016c95 	stmdaeq	r1, {r0, r2, r4, r7, sl, fp, sp, lr}
 800b35c:	08016d12 	stmdaeq	r1, {r1, r4, r8, sl, fp, sp, lr}
 800b360:	08016d19 	stmdaeq	r1, {r0, r3, r4, r8, sl, fp, sp, lr}
 800b364:	08016d21 	stmdaeq	r1, {r0, r5, r8, sl, fp, sp, lr}
 800b368:	2000a29c 	mulcs	r0, ip, r2

0800b36c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 800b36c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b36e:	88c5      	ldrh	r5, [r0, #6]
 800b370:	8886      	ldrh	r6, [r0, #4]
 800b372:	42b5      	cmp	r5, r6
 800b374:	d216      	bcs.n	800b3a4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 800b376:	4604      	mov	r4, r0
 800b378:	6800      	ldr	r0, [r0, #0]
 800b37a:	4428      	add	r0, r5
 800b37c:	1b75      	subs	r5, r6, r5
 800b37e:	7a26      	ldrb	r6, [r4, #8]
 800b380:	b923      	cbnz	r3, 800b38c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 800b382:	b926      	cbnz	r6, 800b38e <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 800b384:	9200      	str	r2, [sp, #0]
 800b386:	460b      	mov	r3, r1
 800b388:	4a09      	ldr	r2, [pc, #36]	; (800b3b0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 800b38a:	e003      	b.n	800b394 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800b38c:	b166      	cbz	r6, 800b3a8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 800b38e:	460b      	mov	r3, r1
 800b390:	9200      	str	r2, [sp, #0]
 800b392:	4a08      	ldr	r2, [pc, #32]	; (800b3b4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 800b394:	4629      	mov	r1, r5
 800b396:	f7fe f991 	bl	80096bc <snprintf>
 800b39a:	4285      	cmp	r5, r0
 800b39c:	bfa2      	ittt	ge
 800b39e:	88e3      	ldrhge	r3, [r4, #6]
 800b3a0:	181b      	addge	r3, r3, r0
 800b3a2:	80e3      	strhge	r3, [r4, #6]
 800b3a4:	b002      	add	sp, #8
 800b3a6:	bd70      	pop	{r4, r5, r6, pc}
 800b3a8:	9200      	str	r2, [sp, #0]
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	4a02      	ldr	r2, [pc, #8]	; (800b3b8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 800b3ae:	e7f1      	b.n	800b394 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800b3b0:	08016d5d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, sl, fp, sp, lr}
 800b3b4:	08016d54 	stmdaeq	r1, {r2, r4, r6, r8, sl, fp, sp, lr}
 800b3b8:	08016d5e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}

0800b3bc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800b3bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3be:	88c5      	ldrh	r5, [r0, #6]
 800b3c0:	8886      	ldrh	r6, [r0, #4]
 800b3c2:	42b5      	cmp	r5, r6
 800b3c4:	d216      	bcs.n	800b3f4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800b3c6:	4604      	mov	r4, r0
 800b3c8:	6800      	ldr	r0, [r0, #0]
 800b3ca:	4428      	add	r0, r5
 800b3cc:	1b75      	subs	r5, r6, r5
 800b3ce:	7a26      	ldrb	r6, [r4, #8]
 800b3d0:	b923      	cbnz	r3, 800b3dc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800b3d2:	b926      	cbnz	r6, 800b3de <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800b3d4:	9200      	str	r2, [sp, #0]
 800b3d6:	460b      	mov	r3, r1
 800b3d8:	4a09      	ldr	r2, [pc, #36]	; (800b400 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800b3da:	e003      	b.n	800b3e4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800b3dc:	b166      	cbz	r6, 800b3f8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800b3de:	460b      	mov	r3, r1
 800b3e0:	9200      	str	r2, [sp, #0]
 800b3e2:	4a08      	ldr	r2, [pc, #32]	; (800b404 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800b3e4:	4629      	mov	r1, r5
 800b3e6:	f7fe f969 	bl	80096bc <snprintf>
 800b3ea:	4285      	cmp	r5, r0
 800b3ec:	bfa2      	ittt	ge
 800b3ee:	88e3      	ldrhge	r3, [r4, #6]
 800b3f0:	181b      	addge	r3, r3, r0
 800b3f2:	80e3      	strhge	r3, [r4, #6]
 800b3f4:	b002      	add	sp, #8
 800b3f6:	bd70      	pop	{r4, r5, r6, pc}
 800b3f8:	9200      	str	r2, [sp, #0]
 800b3fa:	460b      	mov	r3, r1
 800b3fc:	4a02      	ldr	r2, [pc, #8]	; (800b408 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800b3fe:	e7f1      	b.n	800b3e4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800b400:	08016d70 	stmdaeq	r1, {r4, r5, r6, r8, sl, fp, sp, lr}
 800b404:	08016d65 	stmdaeq	r1, {r0, r2, r5, r6, r8, sl, fp, sp, lr}
 800b408:	08016d71 	stmdaeq	r1, {r0, r4, r5, r6, r8, sl, fp, sp, lr}

0800b40c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800b40c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b40e:	460b      	mov	r3, r1
 800b410:	8885      	ldrh	r5, [r0, #4]
 800b412:	88c1      	ldrh	r1, [r0, #6]
 800b414:	42a9      	cmp	r1, r5
 800b416:	d214      	bcs.n	800b442 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800b418:	4604      	mov	r4, r0
 800b41a:	6800      	ldr	r0, [r0, #0]
 800b41c:	1a6d      	subs	r5, r5, r1
 800b41e:	4408      	add	r0, r1
 800b420:	7a21      	ldrb	r1, [r4, #8]
 800b422:	b91a      	cbnz	r2, 800b42c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800b424:	b919      	cbnz	r1, 800b42e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800b426:	4a0a      	ldr	r2, [pc, #40]	; (800b450 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800b428:	9100      	str	r1, [sp, #0]
 800b42a:	e002      	b.n	800b432 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800b42c:	b159      	cbz	r1, 800b446 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800b42e:	9200      	str	r2, [sp, #0]
 800b430:	4a08      	ldr	r2, [pc, #32]	; (800b454 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800b432:	4629      	mov	r1, r5
 800b434:	f7fe f942 	bl	80096bc <snprintf>
 800b438:	4285      	cmp	r5, r0
 800b43a:	bfa2      	ittt	ge
 800b43c:	88e3      	ldrhge	r3, [r4, #6]
 800b43e:	181b      	addge	r3, r3, r0
 800b440:	80e3      	strhge	r3, [r4, #6]
 800b442:	b003      	add	sp, #12
 800b444:	bd30      	pop	{r4, r5, pc}
 800b446:	2201      	movs	r2, #1
 800b448:	9200      	str	r2, [sp, #0]
 800b44a:	4a03      	ldr	r2, [pc, #12]	; (800b458 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800b44c:	e7f1      	b.n	800b432 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800b44e:	bf00      	nop
 800b450:	08016d5d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, sl, fp, sp, lr}
 800b454:	08016d54 	stmdaeq	r1, {r2, r4, r6, r8, sl, fp, sp, lr}
 800b458:	08016d5e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}

0800b45c <strncpy.isra.0>:
 800b45c:	1e4b      	subs	r3, r1, #1
 800b45e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800b462:	b909      	cbnz	r1, 800b468 <strncpy.isra.0+0xc>
 800b464:	f009 ba54 	b.w	8014910 <memset>
 800b468:	3a01      	subs	r2, #1
 800b46a:	f800 1b01 	strb.w	r1, [r0], #1
 800b46e:	d1f6      	bne.n	800b45e <strncpy.isra.0+0x2>
 800b470:	4770      	bx	lr
	...

0800b474 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>:
 800b474:	b510      	push	{r4, lr}
 800b476:	2287      	movs	r2, #135	; 0x87
 800b478:	4604      	mov	r4, r0
 800b47a:	f840 1b04 	str.w	r1, [r0], #4
 800b47e:	2100      	movs	r1, #0
 800b480:	f009 fa46 	bl	8014910 <memset>
 800b484:	2301      	movs	r3, #1
 800b486:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800b48a:	f240 3302 	movw	r3, #770	; 0x302
 800b48e:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800b492:	2304      	movs	r3, #4
 800b494:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 800b498:	4b07      	ldr	r3, [pc, #28]	; (800b4b8 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)+0x44>)
 800b49a:	4620      	mov	r0, r4
 800b49c:	785a      	ldrb	r2, [r3, #1]
 800b49e:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 800b4a2:	781b      	ldrb	r3, [r3, #0]
 800b4a4:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
 800b4a8:	230a      	movs	r3, #10
 800b4aa:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
 800b4ae:	23ff      	movs	r3, #255	; 0xff
 800b4b0:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800b4b4:	bd10      	pop	{r4, pc}
 800b4b6:	bf00      	nop
 800b4b8:	08016f01 	stmdaeq	r1, {r0, r8, r9, sl, fp, sp, lr}

0800b4bc <ArtNetParams::Load()>:
 800b4bc:	b508      	push	{r3, lr}
 800b4be:	2300      	movs	r3, #0
 800b4c0:	4601      	mov	r1, r0
 800b4c2:	6043      	str	r3, [r0, #4]
 800b4c4:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800b4c8:	6800      	ldr	r0, [r0, #0]
 800b4ca:	b120      	cbz	r0, 800b4d6 <ArtNetParams::Load()+0x1a>
 800b4cc:	6803      	ldr	r3, [r0, #0]
 800b4ce:	3104      	adds	r1, #4
 800b4d0:	68db      	ldr	r3, [r3, #12]
 800b4d2:	4798      	blx	r3
 800b4d4:	2001      	movs	r0, #1
 800b4d6:	bd08      	pop	{r3, pc}

0800b4d8 <ArtNetParams::Load(char const*, unsigned int)>:
 800b4d8:	6803      	ldr	r3, [r0, #0]
 800b4da:	b1e3      	cbz	r3, 800b516 <ArtNetParams::Load(char const*, unsigned int)+0x3e>
 800b4dc:	2300      	movs	r3, #0
 800b4de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b4e0:	460d      	mov	r5, r1
 800b4e2:	4616      	mov	r6, r2
 800b4e4:	4604      	mov	r4, r0
 800b4e6:	6043      	str	r3, [r0, #4]
 800b4e8:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	490a      	ldr	r1, [pc, #40]	; (800b518 <ArtNetParams::Load(char const*, unsigned int)+0x40>)
 800b4f0:	4668      	mov	r0, sp
 800b4f2:	f008 fb53 	bl	8013b9c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800b4f6:	4632      	mov	r2, r6
 800b4f8:	4629      	mov	r1, r5
 800b4fa:	4668      	mov	r0, sp
 800b4fc:	f008 fb52 	bl	8013ba4 <ReadConfigFile::Read(char const*, unsigned int)>
 800b500:	4621      	mov	r1, r4
 800b502:	f851 0b04 	ldr.w	r0, [r1], #4
 800b506:	6803      	ldr	r3, [r0, #0]
 800b508:	689b      	ldr	r3, [r3, #8]
 800b50a:	4798      	blx	r3
 800b50c:	4668      	mov	r0, sp
 800b50e:	f008 fb48 	bl	8013ba2 <ReadConfigFile::~ReadConfigFile()>
 800b512:	b002      	add	sp, #8
 800b514:	bd70      	pop	{r4, r5, r6, pc}
 800b516:	4770      	bx	lr
 800b518:	0800b8e1 	stmdaeq	r0, {r0, r5, r6, r7, fp, ip, sp, pc}

0800b51c <ArtNetParams::SetBool(unsigned char, unsigned int)>:
 800b51c:	6843      	ldr	r3, [r0, #4]
 800b51e:	b111      	cbz	r1, 800b526 <ArtNetParams::SetBool(unsigned char, unsigned int)+0xa>
 800b520:	4313      	orrs	r3, r2
 800b522:	6043      	str	r3, [r0, #4]
 800b524:	4770      	bx	lr
 800b526:	ea23 0302 	bic.w	r3, r3, r2
 800b52a:	e7fa      	b.n	800b522 <ArtNetParams::SetBool(unsigned char, unsigned int)+0x6>

0800b52c <ArtNetParams::callbackFunction(char const*)>:
 800b52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b530:	460e      	mov	r6, r1
 800b532:	b0a5      	sub	sp, #148	; 0x94
 800b534:	4604      	mov	r4, r0
 800b536:	49a7      	ldr	r1, [pc, #668]	; (800b7d4 <ArtNetParams::callbackFunction(char const*)+0x2a8>)
 800b538:	4630      	mov	r0, r6
 800b53a:	f10d 0205 	add.w	r2, sp, #5
 800b53e:	f008 fc93 	bl	8013e68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b542:	b930      	cbnz	r0, 800b552 <ArtNetParams::callbackFunction(char const*)+0x26>
 800b544:	2220      	movs	r2, #32
 800b546:	4620      	mov	r0, r4
 800b548:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800b54c:	f7ff ffe6 	bl	800b51c <ArtNetParams::SetBool(unsigned char, unsigned int)>
 800b550:	e010      	b.n	800b574 <ArtNetParams::callbackFunction(char const*)+0x48>
 800b552:	2311      	movs	r3, #17
 800b554:	4630      	mov	r0, r6
 800b556:	9303      	str	r3, [sp, #12]
 800b558:	499f      	ldr	r1, [pc, #636]	; (800b7d8 <ArtNetParams::callbackFunction(char const*)+0x2ac>)
 800b55a:	ab03      	add	r3, sp, #12
 800b55c:	f104 0210 	add.w	r2, r4, #16
 800b560:	f008 fb54 	bl	8013c0c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b564:	b948      	cbnz	r0, 800b57a <ArtNetParams::callbackFunction(char const*)+0x4e>
 800b566:	9b03      	ldr	r3, [sp, #12]
 800b568:	4423      	add	r3, r4
 800b56a:	7418      	strb	r0, [r3, #16]
 800b56c:	6863      	ldr	r3, [r4, #4]
 800b56e:	f043 0302 	orr.w	r3, r3, #2
 800b572:	6063      	str	r3, [r4, #4]
 800b574:	b025      	add	sp, #148	; 0x94
 800b576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b57a:	233f      	movs	r3, #63	; 0x3f
 800b57c:	4630      	mov	r0, r6
 800b57e:	9303      	str	r3, [sp, #12]
 800b580:	4996      	ldr	r1, [pc, #600]	; (800b7dc <ArtNetParams::callbackFunction(char const*)+0x2b0>)
 800b582:	ab03      	add	r3, sp, #12
 800b584:	f104 0222 	add.w	r2, r4, #34	; 0x22
 800b588:	f008 fb40 	bl	8013c0c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b58c:	b938      	cbnz	r0, 800b59e <ArtNetParams::callbackFunction(char const*)+0x72>
 800b58e:	9b03      	ldr	r3, [sp, #12]
 800b590:	4423      	add	r3, r4
 800b592:	f883 0022 	strb.w	r0, [r3, #34]	; 0x22
 800b596:	6863      	ldr	r3, [r4, #4]
 800b598:	f043 0301 	orr.w	r3, r3, #1
 800b59c:	e7e9      	b.n	800b572 <ArtNetParams::callbackFunction(char const*)+0x46>
 800b59e:	4630      	mov	r0, r6
 800b5a0:	498f      	ldr	r1, [pc, #572]	; (800b7e0 <ArtNetParams::callbackFunction(char const*)+0x2b4>)
 800b5a2:	f10d 0206 	add.w	r2, sp, #6
 800b5a6:	f008 fbad 	bl	8013d04 <Sscan::HexUint16(char const*, char const*, unsigned short&)>
 800b5aa:	b940      	cbnz	r0, 800b5be <ArtNetParams::callbackFunction(char const*)+0x92>
 800b5ac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b5b0:	ba5b      	rev16	r3, r3
 800b5b2:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 800b5b6:	6863      	ldr	r3, [r4, #4]
 800b5b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b5bc:	e7d9      	b.n	800b572 <ArtNetParams::callbackFunction(char const*)+0x46>
 800b5be:	4630      	mov	r0, r6
 800b5c0:	4988      	ldr	r1, [pc, #544]	; (800b7e4 <ArtNetParams::callbackFunction(char const*)+0x2b8>)
 800b5c2:	f10d 0205 	add.w	r2, sp, #5
 800b5c6:	f008 fc4f 	bl	8013e68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b5ca:	b958      	cbnz	r0, 800b5e4 <ArtNetParams::callbackFunction(char const*)+0xb8>
 800b5cc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b5d0:	6863      	ldr	r3, [r4, #4]
 800b5d2:	2a0a      	cmp	r2, #10
 800b5d4:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
 800b5d8:	bf14      	ite	ne
 800b5da:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 800b5de:	f423 6300 	biceq.w	r3, r3, #2048	; 0x800
 800b5e2:	e7c6      	b.n	800b572 <ArtNetParams::callbackFunction(char const*)+0x46>
 800b5e4:	4630      	mov	r0, r6
 800b5e6:	4980      	ldr	r1, [pc, #512]	; (800b7e8 <ArtNetParams::callbackFunction(char const*)+0x2bc>)
 800b5e8:	f10d 0205 	add.w	r2, sp, #5
 800b5ec:	f008 fc3c 	bl	8013e68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b5f0:	b910      	cbnz	r0, 800b5f8 <ArtNetParams::callbackFunction(char const*)+0xcc>
 800b5f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b5f6:	e7a6      	b.n	800b546 <ArtNetParams::callbackFunction(char const*)+0x1a>
 800b5f8:	4630      	mov	r0, r6
 800b5fa:	497c      	ldr	r1, [pc, #496]	; (800b7ec <ArtNetParams::callbackFunction(char const*)+0x2c0>)
 800b5fc:	f10d 0205 	add.w	r2, sp, #5
 800b600:	f008 fc32 	bl	8013e68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b604:	b950      	cbnz	r0, 800b61c <ArtNetParams::callbackFunction(char const*)+0xf0>
 800b606:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b60a:	6863      	ldr	r3, [r4, #4]
 800b60c:	7222      	strb	r2, [r4, #8]
 800b60e:	b112      	cbz	r2, 800b616 <ArtNetParams::callbackFunction(char const*)+0xea>
 800b610:	f043 0304 	orr.w	r3, r3, #4
 800b614:	e7ad      	b.n	800b572 <ArtNetParams::callbackFunction(char const*)+0x46>
 800b616:	f023 0304 	bic.w	r3, r3, #4
 800b61a:	e7aa      	b.n	800b572 <ArtNetParams::callbackFunction(char const*)+0x46>
 800b61c:	4630      	mov	r0, r6
 800b61e:	4974      	ldr	r1, [pc, #464]	; (800b7f0 <ArtNetParams::callbackFunction(char const*)+0x2c4>)
 800b620:	f10d 0205 	add.w	r2, sp, #5
 800b624:	f008 fc20 	bl	8013e68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b628:	b950      	cbnz	r0, 800b640 <ArtNetParams::callbackFunction(char const*)+0x114>
 800b62a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b62e:	6863      	ldr	r3, [r4, #4]
 800b630:	7262      	strb	r2, [r4, #9]
 800b632:	b112      	cbz	r2, 800b63a <ArtNetParams::callbackFunction(char const*)+0x10e>
 800b634:	f043 0308 	orr.w	r3, r3, #8
 800b638:	e79b      	b.n	800b572 <ArtNetParams::callbackFunction(char const*)+0x46>
 800b63a:	f023 0308 	bic.w	r3, r3, #8
 800b63e:	e798      	b.n	800b572 <ArtNetParams::callbackFunction(char const*)+0x46>
 800b640:	2303      	movs	r3, #3
 800b642:	4630      	mov	r0, r6
 800b644:	9303      	str	r3, [sp, #12]
 800b646:	496b      	ldr	r1, [pc, #428]	; (800b7f4 <ArtNetParams::callbackFunction(char const*)+0x2c8>)
 800b648:	ab03      	add	r3, sp, #12
 800b64a:	aa04      	add	r2, sp, #16
 800b64c:	f008 fade 	bl	8013c0c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b650:	b9f0      	cbnz	r0, 800b690 <ArtNetParams::callbackFunction(char const*)+0x164>
 800b652:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800b656:	6863      	ldr	r3, [r4, #4]
 800b658:	f042 0220 	orr.w	r2, r2, #32
 800b65c:	2a6c      	cmp	r2, #108	; 0x6c
 800b65e:	d111      	bne.n	800b684 <ArtNetParams::callbackFunction(char const*)+0x158>
 800b660:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800b664:	f042 0220 	orr.w	r2, r2, #32
 800b668:	2a74      	cmp	r2, #116	; 0x74
 800b66a:	d10b      	bne.n	800b684 <ArtNetParams::callbackFunction(char const*)+0x158>
 800b66c:	f89d 2012 	ldrb.w	r2, [sp, #18]
 800b670:	f042 0220 	orr.w	r2, r2, #32
 800b674:	2a70      	cmp	r2, #112	; 0x70
 800b676:	d105      	bne.n	800b684 <ArtNetParams::callbackFunction(char const*)+0x158>
 800b678:	2201      	movs	r2, #1
 800b67a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b67e:	f884 206f 	strb.w	r2, [r4, #111]	; 0x6f
 800b682:	e776      	b.n	800b572 <ArtNetParams::callbackFunction(char const*)+0x46>
 800b684:	2200      	movs	r2, #0
 800b686:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b68a:	f884 206f 	strb.w	r2, [r4, #111]	; 0x6f
 800b68e:	e770      	b.n	800b572 <ArtNetParams::callbackFunction(char const*)+0x46>
 800b690:	2304      	movs	r3, #4
 800b692:	4630      	mov	r0, r6
 800b694:	9303      	str	r3, [sp, #12]
 800b696:	4958      	ldr	r1, [pc, #352]	; (800b7f8 <ArtNetParams::callbackFunction(char const*)+0x2cc>)
 800b698:	ab03      	add	r3, sp, #12
 800b69a:	aa04      	add	r2, sp, #16
 800b69c:	f008 fab6 	bl	8013c0c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b6a0:	b9c0      	cbnz	r0, 800b6d4 <ArtNetParams::callbackFunction(char const*)+0x1a8>
 800b6a2:	2304      	movs	r3, #4
 800b6a4:	4a55      	ldr	r2, [pc, #340]	; (800b7fc <ArtNetParams::callbackFunction(char const*)+0x2d0>)
 800b6a6:	a904      	add	r1, sp, #16
 800b6a8:	3b01      	subs	r3, #1
 800b6aa:	d30c      	bcc.n	800b6c6 <ArtNetParams::callbackFunction(char const*)+0x19a>
 800b6ac:	f811 5b01 	ldrb.w	r5, [r1], #1
 800b6b0:	f812 0b01 	ldrb.w	r0, [r2], #1
 800b6b4:	4285      	cmp	r5, r0
 800b6b6:	d0f7      	beq.n	800b6a8 <ArtNetParams::callbackFunction(char const*)+0x17c>
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	6863      	ldr	r3, [r4, #4]
 800b6bc:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
 800b6c0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800b6c4:	e755      	b.n	800b572 <ArtNetParams::callbackFunction(char const*)+0x46>
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
 800b6cc:	6863      	ldr	r3, [r4, #4]
 800b6ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b6d2:	e74e      	b.n	800b572 <ArtNetParams::callbackFunction(char const*)+0x46>
 800b6d4:	2500      	movs	r5, #0
 800b6d6:	4f4a      	ldr	r7, [pc, #296]	; (800b800 <ArtNetParams::callbackFunction(char const*)+0x2d4>)
 800b6d8:	f8df 8128 	ldr.w	r8, [pc, #296]	; 800b804 <ArtNetParams::callbackFunction(char const*)+0x2d8>
 800b6dc:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800b808 <ArtNetParams::callbackFunction(char const*)+0x2dc>
 800b6e0:	f8df a128 	ldr.w	sl, [pc, #296]	; 800b80c <ArtNetParams::callbackFunction(char const*)+0x2e0>
 800b6e4:	4639      	mov	r1, r7
 800b6e6:	4630      	mov	r0, r6
 800b6e8:	f10d 0205 	add.w	r2, sp, #5
 800b6ec:	f008 fbbc 	bl	8013e68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b6f0:	b9a0      	cbnz	r0, 800b71c <ArtNetParams::callbackFunction(char const*)+0x1f0>
 800b6f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b6f6:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800b6fa:	6862      	ldr	r2, [r4, #4]
 800b6fc:	280f      	cmp	r0, #15
 800b6fe:	fa03 f305 	lsl.w	r3, r3, r5
 800b702:	eb04 0105 	add.w	r1, r4, r5
 800b706:	d803      	bhi.n	800b710 <ArtNetParams::callbackFunction(char const*)+0x1e4>
 800b708:	f881 006b 	strb.w	r0, [r1, #107]	; 0x6b
 800b70c:	4313      	orrs	r3, r2
 800b70e:	e730      	b.n	800b572 <ArtNetParams::callbackFunction(char const*)+0x46>
 800b710:	3501      	adds	r5, #1
 800b712:	f881 506b 	strb.w	r5, [r1, #107]	; 0x6b
 800b716:	ea22 0303 	bic.w	r3, r2, r3
 800b71a:	e72a      	b.n	800b572 <ArtNetParams::callbackFunction(char const*)+0x46>
 800b71c:	f04f 0b12 	mov.w	fp, #18
 800b720:	2303      	movs	r3, #3
 800b722:	fb0b fb05 	mul.w	fp, fp, r5
 800b726:	9303      	str	r3, [sp, #12]
 800b728:	4630      	mov	r0, r6
 800b72a:	ab03      	add	r3, sp, #12
 800b72c:	aa04      	add	r2, sp, #16
 800b72e:	eb08 010b 	add.w	r1, r8, fp
 800b732:	f008 fa6b 	bl	8013c0c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b736:	b9f0      	cbnz	r0, 800b776 <ArtNetParams::callbackFunction(char const*)+0x24a>
 800b738:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b73c:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800b740:	40ab      	lsls	r3, r5
 800b742:	f041 0120 	orr.w	r1, r1, #32
 800b746:	296c      	cmp	r1, #108	; 0x6c
 800b748:	6862      	ldr	r2, [r4, #4]
 800b74a:	4425      	add	r5, r4
 800b74c:	d10f      	bne.n	800b76e <ArtNetParams::callbackFunction(char const*)+0x242>
 800b74e:	f89d 1011 	ldrb.w	r1, [sp, #17]
 800b752:	f041 0120 	orr.w	r1, r1, #32
 800b756:	2974      	cmp	r1, #116	; 0x74
 800b758:	d109      	bne.n	800b76e <ArtNetParams::callbackFunction(char const*)+0x242>
 800b75a:	f89d 1012 	ldrb.w	r1, [sp, #18]
 800b75e:	f041 0120 	orr.w	r1, r1, #32
 800b762:	2970      	cmp	r1, #112	; 0x70
 800b764:	d103      	bne.n	800b76e <ArtNetParams::callbackFunction(char const*)+0x242>
 800b766:	2101      	movs	r1, #1
 800b768:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800b76c:	e7ce      	b.n	800b70c <ArtNetParams::callbackFunction(char const*)+0x1e0>
 800b76e:	2100      	movs	r1, #0
 800b770:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800b774:	e7cf      	b.n	800b716 <ArtNetParams::callbackFunction(char const*)+0x1ea>
 800b776:	2304      	movs	r3, #4
 800b778:	4630      	mov	r0, r6
 800b77a:	9303      	str	r3, [sp, #12]
 800b77c:	aa04      	add	r2, sp, #16
 800b77e:	ab03      	add	r3, sp, #12
 800b780:	eb09 1105 	add.w	r1, r9, r5, lsl #4
 800b784:	f008 fa42 	bl	8013c0c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b788:	2305      	movs	r3, #5
 800b78a:	2800      	cmp	r0, #0
 800b78c:	d140      	bne.n	800b810 <ArtNetParams::callbackFunction(char const*)+0x2e4>
 800b78e:	4a1b      	ldr	r2, [pc, #108]	; (800b7fc <ArtNetParams::callbackFunction(char const*)+0x2d0>)
 800b790:	a904      	add	r1, sp, #16
 800b792:	3b01      	subs	r3, #1
 800b794:	d012      	beq.n	800b7bc <ArtNetParams::callbackFunction(char const*)+0x290>
 800b796:	f811 6b01 	ldrb.w	r6, [r1], #1
 800b79a:	f812 0b01 	ldrb.w	r0, [r2], #1
 800b79e:	4286      	cmp	r6, r0
 800b7a0:	d0f7      	beq.n	800b792 <ArtNetParams::callbackFunction(char const*)+0x266>
 800b7a2:	2100      	movs	r1, #0
 800b7a4:	1962      	adds	r2, r4, r5
 800b7a6:	6863      	ldr	r3, [r4, #4]
 800b7a8:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
 800b7ac:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b7b0:	fa02 f505 	lsl.w	r5, r2, r5
 800b7b4:	ea23 0505 	bic.w	r5, r3, r5
 800b7b8:	6065      	str	r5, [r4, #4]
 800b7ba:	e6db      	b.n	800b574 <ArtNetParams::callbackFunction(char const*)+0x48>
 800b7bc:	2201      	movs	r2, #1
 800b7be:	1963      	adds	r3, r4, r5
 800b7c0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800b7c4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b7c8:	fa03 f505 	lsl.w	r5, r3, r5
 800b7cc:	6863      	ldr	r3, [r4, #4]
 800b7ce:	432b      	orrs	r3, r5
 800b7d0:	e6cf      	b.n	800b572 <ArtNetParams::callbackFunction(char const*)+0x46>
 800b7d2:	bf00      	nop
 800b7d4:	08016dda 	stmdaeq	r1, {r1, r3, r4, r6, r7, r8, sl, fp, sp, lr}
 800b7d8:	08016e47 	stmdaeq	r1, {r0, r1, r2, r6, r9, sl, fp, sp, lr}
 800b7dc:	08016e33 	stmdaeq	r1, {r0, r1, r4, r5, r9, sl, fp, sp, lr}
 800b7e0:	08016e3d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r9, sl, fp, sp, lr}
 800b7e4:	08016ec8 	stmdaeq	r1, {r3, r6, r7, r9, sl, fp, sp, lr}
 800b7e8:	08016eb2 	stmdaeq	r1, {r1, r4, r5, r7, r9, sl, fp, sp, lr}
 800b7ec:	08016ee2 	stmdaeq	r1, {r1, r5, r6, r7, r9, sl, fp, sp, lr}
 800b7f0:	08016ee6 	stmdaeq	r1, {r1, r2, r5, r6, r7, r9, sl, fp, sp, lr}
 800b7f4:	080188df 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, fp, pc}
 800b7f8:	08016eed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r9, sl, fp, sp, lr}
 800b7fc:	08016d78 	stmdaeq	r1, {r3, r4, r5, r6, r8, sl, fp, sp, lr}
 800b800:	080188f7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, fp, pc}
 800b804:	080189c7 	stmdaeq	r1, {r0, r1, r2, r6, r7, r8, fp, pc}
 800b808:	08016df3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r8, sl, fp, sp, lr}
 800b80c:	08018a2a 	stmdaeq	r1, {r1, r3, r5, r9, fp, pc}
 800b810:	9303      	str	r3, [sp, #12]
 800b812:	4630      	mov	r0, r6
 800b814:	ab03      	add	r3, sp, #12
 800b816:	aa04      	add	r2, sp, #16
 800b818:	eb0a 010b 	add.w	r1, sl, fp
 800b81c:	f008 f9f6 	bl	8013c0c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b820:	bb68      	cbnz	r0, 800b87e <ArtNetParams::callbackFunction(char const*)+0x352>
 800b822:	2301      	movs	r3, #1
 800b824:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
 800b828:	40ab      	lsls	r3, r5
 800b82a:	ea22 0303 	bic.w	r3, r2, r3
 800b82e:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800b832:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800b836:	f042 0220 	orr.w	r2, r2, #32
 800b83a:	2a69      	cmp	r2, #105	; 0x69
 800b83c:	d118      	bne.n	800b870 <ArtNetParams::callbackFunction(char const*)+0x344>
 800b83e:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800b842:	f042 0220 	orr.w	r2, r2, #32
 800b846:	2a6e      	cmp	r2, #110	; 0x6e
 800b848:	d112      	bne.n	800b870 <ArtNetParams::callbackFunction(char const*)+0x344>
 800b84a:	f89d 2012 	ldrb.w	r2, [sp, #18]
 800b84e:	f042 0220 	orr.w	r2, r2, #32
 800b852:	2a70      	cmp	r2, #112	; 0x70
 800b854:	d10c      	bne.n	800b870 <ArtNetParams::callbackFunction(char const*)+0x344>
 800b856:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800b85a:	f042 0220 	orr.w	r2, r2, #32
 800b85e:	2a75      	cmp	r2, #117	; 0x75
 800b860:	d106      	bne.n	800b870 <ArtNetParams::callbackFunction(char const*)+0x344>
 800b862:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800b866:	f042 0220 	orr.w	r2, r2, #32
 800b86a:	2a74      	cmp	r2, #116	; 0x74
 800b86c:	f43f ae82 	beq.w	800b574 <ArtNetParams::callbackFunction(char const*)+0x48>
 800b870:	2201      	movs	r2, #1
 800b872:	fa02 f505 	lsl.w	r5, r2, r5
 800b876:	432b      	orrs	r3, r5
 800b878:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800b87c:	e67a      	b.n	800b574 <ArtNetParams::callbackFunction(char const*)+0x48>
 800b87e:	2118      	movs	r1, #24
 800b880:	4b15      	ldr	r3, [pc, #84]	; (800b8d8 <ArtNetParams::callbackFunction(char const*)+0x3ac>)
 800b882:	4630      	mov	r0, r6
 800b884:	fb01 3105 	mla	r1, r1, r5, r3
 800b888:	aa02      	add	r2, sp, #8
 800b88a:	f008 fa66 	bl	8013d5a <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 800b88e:	b968      	cbnz	r0, 800b8ac <ArtNetParams::callbackFunction(char const*)+0x380>
 800b890:	9902      	ldr	r1, [sp, #8]
 800b892:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b896:	f8c3 107b 	str.w	r1, [r3, #123]	; 0x7b
 800b89a:	2301      	movs	r3, #1
 800b89c:	40ab      	lsls	r3, r5
 800b89e:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800b8a2:	b29b      	uxth	r3, r3
 800b8a4:	b1a1      	cbz	r1, 800b8d0 <ArtNetParams::callbackFunction(char const*)+0x3a4>
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 800b8ac:	3501      	adds	r5, #1
 800b8ae:	2d04      	cmp	r5, #4
 800b8b0:	f107 0710 	add.w	r7, r7, #16
 800b8b4:	f47f af16 	bne.w	800b6e4 <ArtNetParams::callbackFunction(char const*)+0x1b8>
 800b8b8:	4630      	mov	r0, r6
 800b8ba:	4908      	ldr	r1, [pc, #32]	; (800b8dc <ArtNetParams::callbackFunction(char const*)+0x3b0>)
 800b8bc:	f10d 0205 	add.w	r2, sp, #5
 800b8c0:	f008 fad2 	bl	8013e68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b8c4:	2800      	cmp	r0, #0
 800b8c6:	f47f ae55 	bne.w	800b574 <ArtNetParams::callbackFunction(char const*)+0x48>
 800b8ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b8ce:	e63a      	b.n	800b546 <ArtNetParams::callbackFunction(char const*)+0x1a>
 800b8d0:	ea22 0303 	bic.w	r3, r2, r3
 800b8d4:	e7e8      	b.n	800b8a8 <ArtNetParams::callbackFunction(char const*)+0x37c>
 800b8d6:	bf00      	nop
 800b8d8:	08016e52 	stmdaeq	r1, {r1, r4, r6, r9, sl, fp, sp, lr}
 800b8dc:	08016de5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r8, sl, fp, sp, lr}

0800b8e0 <ArtNetParams::staticCallbackFunction(void*, char const*)>:
 800b8e0:	f7ff be24 	b.w	800b52c <ArtNetParams::callbackFunction(char const*)>

0800b8e4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>:
 800b8e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8e8:	4604      	mov	r4, r0
 800b8ea:	4615      	mov	r5, r2
 800b8ec:	461e      	mov	r6, r3
 800b8ee:	b086      	sub	sp, #24
 800b8f0:	3004      	adds	r0, #4
 800b8f2:	2900      	cmp	r1, #0
 800b8f4:	f000 814b 	beq.w	800bb8e <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2aa>
 800b8f8:	2287      	movs	r2, #135	; 0x87
 800b8fa:	f008 fff2 	bl	80148e2 <memmove>
 800b8fe:	4633      	mov	r3, r6
 800b900:	462a      	mov	r2, r5
 800b902:	49a6      	ldr	r1, [pc, #664]	; (800bb9c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b8>)
 800b904:	a803      	add	r0, sp, #12
 800b906:	f008 f879 	bl	80139fc <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800b90a:	2500      	movs	r5, #0
 800b90c:	4ea4      	ldr	r6, [pc, #656]	; (800bba0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2bc>)
 800b90e:	f8df 8294 	ldr.w	r8, [pc, #660]	; 800bba4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c0>
 800b912:	4fa5      	ldr	r7, [pc, #660]	; (800bba8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c4>)
 800b914:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
 800b918:	4631      	mov	r1, r6
 800b91a:	412b      	asrs	r3, r5
 800b91c:	f013 0f01 	tst.w	r3, #1
 800b920:	ea6f 0303 	mvn.w	r3, r3
 800b924:	bf0c      	ite	eq
 800b926:	4642      	moveq	r2, r8
 800b928:	463a      	movne	r2, r7
 800b92a:	f003 0301 	and.w	r3, r3, #1
 800b92e:	a803      	add	r0, sp, #12
 800b930:	3501      	adds	r5, #1
 800b932:	f7ff fd43 	bl	800b3bc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800b936:	2d04      	cmp	r5, #4
 800b938:	f106 0612 	add.w	r6, r6, #18
 800b93c:	d1ea      	bne.n	800b914 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x30>
 800b93e:	6863      	ldr	r3, [r4, #4]
 800b940:	7a22      	ldrb	r2, [r4, #8]
 800b942:	499a      	ldr	r1, [pc, #616]	; (800bbac <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c8>)
 800b944:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b948:	a803      	add	r0, sp, #12
 800b94a:	f7ff fd0f 	bl	800b36c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800b94e:	6863      	ldr	r3, [r4, #4]
 800b950:	7a62      	ldrb	r2, [r4, #9]
 800b952:	4997      	ldr	r1, [pc, #604]	; (800bbb0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2cc>)
 800b954:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b958:	a803      	add	r0, sp, #12
 800b95a:	f7ff fd07 	bl	800b36c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800b95e:	4995      	ldr	r1, [pc, #596]	; (800bbb4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d0>)
 800b960:	a803      	add	r0, sp, #12
 800b962:	f008 f8d1 	bl	8013b08 <PropertiesBuilder::AddComment(char const*)>
 800b966:	2500      	movs	r5, #0
 800b968:	f44f 5800 	mov.w	r8, #8192	; 0x2000
 800b96c:	4e92      	ldr	r6, [pc, #584]	; (800bbb8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d4>)
 800b96e:	f104 076b 	add.w	r7, r4, #107	; 0x6b
 800b972:	6862      	ldr	r2, [r4, #4]
 800b974:	fa08 f305 	lsl.w	r3, r8, r5
 800b978:	4393      	bics	r3, r2
 800b97a:	bf0c      	ite	eq
 800b97c:	2301      	moveq	r3, #1
 800b97e:	2300      	movne	r3, #0
 800b980:	4631      	mov	r1, r6
 800b982:	f817 2b01 	ldrb.w	r2, [r7], #1
 800b986:	a803      	add	r0, sp, #12
 800b988:	3501      	adds	r5, #1
 800b98a:	f7ff fcef 	bl	800b36c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800b98e:	2d04      	cmp	r5, #4
 800b990:	f106 0610 	add.w	r6, r6, #16
 800b994:	d1ed      	bne.n	800b972 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 800b996:	4989      	ldr	r1, [pc, #548]	; (800bbbc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d8>)
 800b998:	a803      	add	r0, sp, #12
 800b99a:	f008 f8b5 	bl	8013b08 <PropertiesBuilder::AddComment(char const*)>
 800b99e:	6863      	ldr	r3, [r4, #4]
 800b9a0:	f104 0622 	add.w	r6, r4, #34	; 0x22
 800b9a4:	f013 0501 	ands.w	r5, r3, #1
 800b9a8:	d108      	bne.n	800b9bc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0xd8>
 800b9aa:	4b85      	ldr	r3, [pc, #532]	; (800bbc0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 800b9ac:	223f      	movs	r2, #63	; 0x3f
 800b9ae:	6819      	ldr	r1, [r3, #0]
 800b9b0:	4630      	mov	r0, r6
 800b9b2:	3154      	adds	r1, #84	; 0x54
 800b9b4:	f7ff fd52 	bl	800b45c <strncpy.isra.0>
 800b9b8:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 800b9bc:	6863      	ldr	r3, [r4, #4]
 800b9be:	4632      	mov	r2, r6
 800b9c0:	f003 0301 	and.w	r3, r3, #1
 800b9c4:	497f      	ldr	r1, [pc, #508]	; (800bbc4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2e0>)
 800b9c6:	a803      	add	r0, sp, #12
 800b9c8:	f7ff fcf8 	bl	800b3bc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800b9cc:	6863      	ldr	r3, [r4, #4]
 800b9ce:	f104 0610 	add.w	r6, r4, #16
 800b9d2:	f013 0502 	ands.w	r5, r3, #2
 800b9d6:	d108      	bne.n	800b9ea <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x106>
 800b9d8:	4b79      	ldr	r3, [pc, #484]	; (800bbc0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 800b9da:	2211      	movs	r2, #17
 800b9dc:	6819      	ldr	r1, [r3, #0]
 800b9de:	4630      	mov	r0, r6
 800b9e0:	3142      	adds	r1, #66	; 0x42
 800b9e2:	f7ff fd3b 	bl	800b45c <strncpy.isra.0>
 800b9e6:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 800b9ea:	6863      	ldr	r3, [r4, #4]
 800b9ec:	4632      	mov	r2, r6
 800b9ee:	4976      	ldr	r1, [pc, #472]	; (800bbc8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2e4>)
 800b9f0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b9f4:	a803      	add	r0, sp, #12
 800b9f6:	f7ff fce1 	bl	800b3bc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800b9fa:	2104      	movs	r1, #4
 800b9fc:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 800ba00:	6863      	ldr	r3, [r4, #4]
 800ba02:	ba52      	rev16	r2, r2
 800ba04:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800ba08:	b292      	uxth	r2, r2
 800ba0a:	9100      	str	r1, [sp, #0]
 800ba0c:	a803      	add	r0, sp, #12
 800ba0e:	496f      	ldr	r1, [pc, #444]	; (800bbcc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2e8>)
 800ba10:	f008 f894 	bl	8013b3c <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)>
 800ba14:	496e      	ldr	r1, [pc, #440]	; (800bbd0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2ec>)
 800ba16:	a803      	add	r0, sp, #12
 800ba18:	f008 f876 	bl	8013b08 <PropertiesBuilder::AddComment(char const*)>
 800ba1c:	6862      	ldr	r2, [r4, #4]
 800ba1e:	496d      	ldr	r1, [pc, #436]	; (800bbd4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2f0>)
 800ba20:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800ba24:	a803      	add	r0, sp, #12
 800ba26:	f7ff fcf1 	bl	800b40c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800ba2a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 800bbd8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2f4>
 800ba2e:	f894 206f 	ldrb.w	r2, [r4, #111]	; 0x6f
 800ba32:	6863      	ldr	r3, [r4, #4]
 800ba34:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bbdc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2f8>
 800ba38:	4969      	ldr	r1, [pc, #420]	; (800bbe0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2fc>)
 800ba3a:	2a00      	cmp	r2, #0
 800ba3c:	bf0c      	ite	eq
 800ba3e:	464a      	moveq	r2, r9
 800ba40:	4642      	movne	r2, r8
 800ba42:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800ba46:	a803      	add	r0, sp, #12
 800ba48:	f7ff fcb8 	bl	800b3bc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800ba4c:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
 800ba50:	6863      	ldr	r3, [r4, #4]
 800ba52:	4964      	ldr	r1, [pc, #400]	; (800bbe4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x300>)
 800ba54:	4a64      	ldr	r2, [pc, #400]	; (800bbe8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x304>)
 800ba56:	f3c3 5380 	ubfx	r3, r3, #22, #1
 800ba5a:	2800      	cmp	r0, #0
 800ba5c:	bf18      	it	ne
 800ba5e:	460a      	movne	r2, r1
 800ba60:	4962      	ldr	r1, [pc, #392]	; (800bbec <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x308>)
 800ba62:	a803      	add	r0, sp, #12
 800ba64:	f7ff fcaa 	bl	800b3bc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800ba68:	2500      	movs	r5, #0
 800ba6a:	4e61      	ldr	r6, [pc, #388]	; (800bbf0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x30c>)
 800ba6c:	f8df a184 	ldr.w	sl, [pc, #388]	; 800bbf4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x310>
 800ba70:	f104 0770 	add.w	r7, r4, #112	; 0x70
 800ba74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ba78:	6861      	ldr	r1, [r4, #4]
 800ba7a:	40ab      	lsls	r3, r5
 800ba7c:	438b      	bics	r3, r1
 800ba7e:	f04f 0112 	mov.w	r1, #18
 800ba82:	f817 2b01 	ldrb.w	r2, [r7], #1
 800ba86:	bf0c      	ite	eq
 800ba88:	2301      	moveq	r3, #1
 800ba8a:	2300      	movne	r3, #0
 800ba8c:	fb01 a105 	mla	r1, r1, r5, sl
 800ba90:	2a00      	cmp	r2, #0
 800ba92:	bf0c      	ite	eq
 800ba94:	464a      	moveq	r2, r9
 800ba96:	4642      	movne	r2, r8
 800ba98:	a803      	add	r0, sp, #12
 800ba9a:	f7ff fc8f 	bl	800b3bc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800ba9e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800baa2:	6862      	ldr	r2, [r4, #4]
 800baa4:	40ab      	lsls	r3, r5
 800baa6:	4393      	bics	r3, r2
 800baa8:	7938      	ldrb	r0, [r7, #4]
 800baaa:	494e      	ldr	r1, [pc, #312]	; (800bbe4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x300>)
 800baac:	4a4e      	ldr	r2, [pc, #312]	; (800bbe8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x304>)
 800baae:	bf0c      	ite	eq
 800bab0:	2301      	moveq	r3, #1
 800bab2:	2300      	movne	r3, #0
 800bab4:	3501      	adds	r5, #1
 800bab6:	2800      	cmp	r0, #0
 800bab8:	bf18      	it	ne
 800baba:	460a      	movne	r2, r1
 800babc:	4631      	mov	r1, r6
 800babe:	a803      	add	r0, sp, #12
 800bac0:	f7ff fc7c 	bl	800b3bc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800bac4:	2d04      	cmp	r5, #4
 800bac6:	f106 0610 	add.w	r6, r6, #16
 800baca:	d1d3      	bne.n	800ba74 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x190>
 800bacc:	6863      	ldr	r3, [r4, #4]
 800bace:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
 800bad2:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 800bad6:	4948      	ldr	r1, [pc, #288]	; (800bbf8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x314>)
 800bad8:	a803      	add	r0, sp, #12
 800bada:	f7ff fc47 	bl	800b36c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800bade:	6862      	ldr	r2, [r4, #4]
 800bae0:	4946      	ldr	r1, [pc, #280]	; (800bbfc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x318>)
 800bae2:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800bae6:	a803      	add	r0, sp, #12
 800bae8:	f7ff fc90 	bl	800b40c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800baec:	4944      	ldr	r1, [pc, #272]	; (800bc00 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x31c>)
 800baee:	a803      	add	r0, sp, #12
 800baf0:	f008 f80a 	bl	8013b08 <PropertiesBuilder::AddComment(char const*)>
 800baf4:	2500      	movs	r5, #0
 800baf6:	2601      	movs	r6, #1
 800baf8:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800bc04 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x320>
 800bafc:	4f30      	ldr	r7, [pc, #192]	; (800bbc0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 800bafe:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800bb02:	fa06 f305 	lsl.w	r3, r6, r5
 800bb06:	b29b      	uxth	r3, r3
 800bb08:	401a      	ands	r2, r3
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	bf0c      	ite	eq
 800bb0e:	2301      	moveq	r3, #1
 800bb10:	2300      	movne	r3, #0
 800bb12:	f105 021c 	add.w	r2, r5, #28
 800bb16:	d008      	beq.n	800bb2a <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x246>
 800bb18:	6839      	ldr	r1, [r7, #0]
 800bb1a:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800bb1e:	f8d1 077c 	ldr.w	r0, [r1, #1916]	; 0x77c
 800bb22:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800bb26:	f8c1 000b 	str.w	r0, [r1, #11]
 800bb2a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bb2e:	4641      	mov	r1, r8
 800bb30:	f8d2 200b 	ldr.w	r2, [r2, #11]
 800bb34:	a803      	add	r0, sp, #12
 800bb36:	3501      	adds	r5, #1
 800bb38:	f007 ffa2 	bl	8013a80 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 800bb3c:	2d04      	cmp	r5, #4
 800bb3e:	f108 0818 	add.w	r8, r8, #24
 800bb42:	d1dc      	bne.n	800bafe <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x21a>
 800bb44:	4930      	ldr	r1, [pc, #192]	; (800bc08 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x324>)
 800bb46:	a803      	add	r0, sp, #12
 800bb48:	f007 ffde 	bl	8013b08 <PropertiesBuilder::AddComment(char const*)>
 800bb4c:	6862      	ldr	r2, [r4, #4]
 800bb4e:	492f      	ldr	r1, [pc, #188]	; (800bc0c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x328>)
 800bb50:	f3c2 62c0 	ubfx	r2, r2, #27, #1
 800bb54:	a803      	add	r0, sp, #12
 800bb56:	f7ff fc59 	bl	800b40c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800bb5a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800bb5e:	b17b      	cbz	r3, 800bb80 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x29c>
 800bb60:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800bb64:	9b03      	ldr	r3, [sp, #12]
 800bb66:	4413      	add	r3, r2
 800bb68:	227d      	movs	r2, #125	; 0x7d
 800bb6a:	f803 2c01 	strb.w	r2, [r3, #-1]
 800bb6e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800bb72:	9903      	ldr	r1, [sp, #12]
 800bb74:	54ca      	strb	r2, [r1, r3]
 800bb76:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	f8ad 3012 	strh.w	r3, [sp, #18]
 800bb80:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800bb84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb86:	601a      	str	r2, [r3, #0]
 800bb88:	b006      	add	sp, #24
 800bb8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb8e:	6823      	ldr	r3, [r4, #0]
 800bb90:	4601      	mov	r1, r0
 800bb92:	681a      	ldr	r2, [r3, #0]
 800bb94:	4618      	mov	r0, r3
 800bb96:	68d2      	ldr	r2, [r2, #12]
 800bb98:	4790      	blx	r2
 800bb9a:	e6b0      	b.n	800b8fe <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x1a>
 800bb9c:	08016ef6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r9, sl, fp, sp, lr}
 800bba0:	08018a2a 	stmdaeq	r1, {r1, r3, r5, r9, fp, pc}
 800bba4:	08016d7d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r8, sl, fp, sp, lr}
 800bba8:	08016d83 	stmdaeq	r1, {r0, r1, r7, r8, sl, fp, sp, lr}
 800bbac:	08016ee2 	stmdaeq	r1, {r1, r5, r6, r7, r9, sl, fp, sp, lr}
 800bbb0:	08016ee6 	stmdaeq	r1, {r1, r2, r5, r6, r7, r9, sl, fp, sp, lr}
 800bbb4:	08016d99 	stmdaeq	r1, {r0, r3, r4, r7, r8, sl, fp, sp, lr}
 800bbb8:	080188f7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, fp, pc}
 800bbbc:	08016db2 	stmdaeq	r1, {r1, r4, r5, r7, r8, sl, fp, sp, lr}
 800bbc0:	20001900 	andcs	r1, r0, r0, lsl #18
 800bbc4:	08016e33 	stmdaeq	r1, {r0, r1, r4, r5, r9, sl, fp, sp, lr}
 800bbc8:	08016e47 	stmdaeq	r1, {r0, r1, r2, r6, r9, sl, fp, sp, lr}
 800bbcc:	08016e3d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r9, sl, fp, sp, lr}
 800bbd0:	08016db7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, r8, sl, fp, sp, lr}
 800bbd4:	08016dda 	stmdaeq	r1, {r1, r3, r4, r6, r7, r8, sl, fp, sp, lr}
 800bbd8:	08016d8a 	stmdaeq	r1, {r1, r3, r7, r8, sl, fp, sp, lr}
 800bbdc:	08016d8e 	stmdaeq	r1, {r1, r2, r3, r7, r8, sl, fp, sp, lr}
 800bbe0:	080188df 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, fp, pc}
 800bbe4:	08016d78 	stmdaeq	r1, {r3, r4, r5, r6, r8, sl, fp, sp, lr}
 800bbe8:	08016d92 	stmdaeq	r1, {r1, r4, r7, r8, sl, fp, sp, lr}
 800bbec:	08016eed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r9, sl, fp, sp, lr}
 800bbf0:	08016df3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r8, sl, fp, sp, lr}
 800bbf4:	080189c7 	stmdaeq	r1, {r0, r1, r2, r6, r7, r8, fp, pc}
 800bbf8:	08016ec8 	stmdaeq	r1, {r3, r6, r7, r9, sl, fp, sp, lr}
 800bbfc:	08016eb2 	stmdaeq	r1, {r1, r4, r5, r7, r9, sl, fp, sp, lr}
 800bc00:	08016dc6 	stmdaeq	r1, {r1, r2, r6, r7, r8, sl, fp, sp, lr}
 800bc04:	08016e52 	stmdaeq	r1, {r1, r4, r6, r9, sl, fp, sp, lr}
 800bc08:	08016dd0 	stmdaeq	r1, {r4, r6, r7, r8, sl, fp, sp, lr}
 800bc0c:	08016de5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r8, sl, fp, sp, lr}

0800bc10 <ArtNetParams::Save(char*, unsigned int, unsigned int&)>:
 800bc10:	b513      	push	{r0, r1, r4, lr}
 800bc12:	6804      	ldr	r4, [r0, #0]
 800bc14:	b914      	cbnz	r4, 800bc1c <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800bc16:	601c      	str	r4, [r3, #0]
 800bc18:	b002      	add	sp, #8
 800bc1a:	bd10      	pop	{r4, pc}
 800bc1c:	9300      	str	r3, [sp, #0]
 800bc1e:	4613      	mov	r3, r2
 800bc20:	460a      	mov	r2, r1
 800bc22:	2100      	movs	r1, #0
 800bc24:	f7ff fe5e 	bl	800b8e4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>
 800bc28:	e7f6      	b.n	800bc18 <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800bc2a <ArtNetParams::Set(ArtNetNode*)>:
 800bc2a:	6843      	ldr	r3, [r0, #4]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d07d      	beq.n	800bd2c <ArtNetParams::Set(ArtNetNode*)+0x102>
 800bc30:	079a      	lsls	r2, r3, #30
 800bc32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc36:	4604      	mov	r4, r0
 800bc38:	460d      	mov	r5, r1
 800bc3a:	d504      	bpl.n	800bc46 <ArtNetParams::Set(ArtNetNode*)+0x1c>
 800bc3c:	f100 0110 	add.w	r1, r0, #16
 800bc40:	4628      	mov	r0, r5
 800bc42:	f7fd ff4b 	bl	8009adc <ArtNetNode::SetShortName(char const*)>
 800bc46:	6863      	ldr	r3, [r4, #4]
 800bc48:	07db      	lsls	r3, r3, #31
 800bc4a:	d504      	bpl.n	800bc56 <ArtNetParams::Set(ArtNetNode*)+0x2c>
 800bc4c:	4628      	mov	r0, r5
 800bc4e:	f104 0122 	add.w	r1, r4, #34	; 0x22
 800bc52:	f7fd ff6b 	bl	8009b2c <ArtNetNode::SetLongName(char const*)>
 800bc56:	6863      	ldr	r3, [r4, #4]
 800bc58:	075f      	lsls	r7, r3, #29
 800bc5a:	d504      	bpl.n	800bc66 <ArtNetParams::Set(ArtNetNode*)+0x3c>
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	4628      	mov	r0, r5
 800bc60:	7a21      	ldrb	r1, [r4, #8]
 800bc62:	f7fe faab 	bl	800a1bc <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800bc66:	6863      	ldr	r3, [r4, #4]
 800bc68:	071e      	lsls	r6, r3, #28
 800bc6a:	d504      	bpl.n	800bc76 <ArtNetParams::Set(ArtNetNode*)+0x4c>
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	4628      	mov	r0, r5
 800bc70:	7a61      	ldrb	r1, [r4, #9]
 800bc72:	f7fe fa75 	bl	800a160 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800bc76:	6863      	ldr	r3, [r4, #4]
 800bc78:	0558      	lsls	r0, r3, #21
 800bc7a:	d504      	bpl.n	800bc86 <ArtNetParams::Set(ArtNetNode*)+0x5c>
 800bc7c:	4628      	mov	r0, r5
 800bc7e:	f104 0164 	add.w	r1, r4, #100	; 0x64
 800bc82:	f7fe f81d 	bl	8009cc0 <ArtNetNode::SetOemValue(unsigned char const*)>
 800bc86:	6863      	ldr	r3, [r4, #4]
 800bc88:	2600      	movs	r6, #0
 800bc8a:	0519      	lsls	r1, r3, #20
 800bc8c:	bf44      	itt	mi
 800bc8e:	f44f 727a 	movmi.w	r2, #1000	; 0x3e8
 800bc92:	f894 3066 	ldrbmi.w	r3, [r4, #102]	; 0x66
 800bc96:	f44f 2880 	mov.w	r8, #262144	; 0x40000
 800bc9a:	bf44      	itt	mi
 800bc9c:	4353      	mulmi	r3, r2
 800bc9e:	f8c5 36cc 	strmi.w	r3, [r5, #1740]	; 0x6cc
 800bca2:	6863      	ldr	r3, [r4, #4]
 800bca4:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
 800bca8:	04da      	lsls	r2, r3, #19
 800bcaa:	bf48      	it	mi
 800bcac:	2301      	movmi	r3, #1
 800bcae:	f04f 0a01 	mov.w	sl, #1
 800bcb2:	bf48      	it	mi
 800bcb4:	f885 36dc 	strbmi.w	r3, [r5, #1756]	; 0x6dc
 800bcb8:	f104 0770 	add.w	r7, r4, #112	; 0x70
 800bcbc:	6863      	ldr	r3, [r4, #4]
 800bcbe:	fa08 f206 	lsl.w	r2, r8, r6
 800bcc2:	ea32 0303 	bics.w	r3, r2, r3
 800bcc6:	bf0c      	ite	eq
 800bcc8:	783a      	ldrbeq	r2, [r7, #0]
 800bcca:	f894 206f 	ldrbne.w	r2, [r4, #111]	; 0x6f
 800bcce:	4631      	mov	r1, r6
 800bcd0:	4628      	mov	r0, r5
 800bcd2:	f7fe fad2 	bl	800a27a <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 800bcd6:	6863      	ldr	r3, [r4, #4]
 800bcd8:	fa09 f206 	lsl.w	r2, r9, r6
 800bcdc:	ea32 0303 	bics.w	r3, r2, r3
 800bce0:	bf0c      	ite	eq
 800bce2:	797a      	ldrbeq	r2, [r7, #5]
 800bce4:	f894 2074 	ldrbne.w	r2, [r4, #116]	; 0x74
 800bce8:	4631      	mov	r1, r6
 800bcea:	4628      	mov	r0, r5
 800bcec:	f7fe fa94 	bl	800a218 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 800bcf0:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800bcf4:	fa0a f306 	lsl.w	r3, sl, r6
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	4393      	bics	r3, r2
 800bcfc:	d109      	bne.n	800bd12 <ArtNetParams::Set(ArtNetNode*)+0xe8>
 800bcfe:	f106 031c 	add.w	r3, r6, #28
 800bd02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bd06:	4631      	mov	r1, r6
 800bd08:	4628      	mov	r0, r5
 800bd0a:	f8d3 200b 	ldr.w	r2, [r3, #11]
 800bd0e:	f7fe fdcd 	bl	800a8ac <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>
 800bd12:	3601      	adds	r6, #1
 800bd14:	2e04      	cmp	r6, #4
 800bd16:	f107 0701 	add.w	r7, r7, #1
 800bd1a:	d1cf      	bne.n	800bcbc <ArtNetParams::Set(ArtNetNode*)+0x92>
 800bd1c:	6863      	ldr	r3, [r4, #4]
 800bd1e:	011b      	lsls	r3, r3, #4
 800bd20:	bf44      	itt	mi
 800bd22:	2301      	movmi	r3, #1
 800bd24:	f885 309e 	strbmi.w	r3, [r5, #158]	; 0x9e
 800bd28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd2c:	4770      	bx	lr

0800bd2e <ArtNetParams::Dump()>:
 800bd2e:	4770      	bx	lr

0800bd30 <ArtNetNode::HandleTrigger()>:
 800bd30:	f890 30ae 	ldrb.w	r3, [r0, #174]	; 0xae
 800bd34:	4601      	mov	r1, r0
 800bd36:	2bff      	cmp	r3, #255	; 0xff
 800bd38:	d103      	bne.n	800bd42 <ArtNetNode::HandleTrigger()+0x12>
 800bd3a:	f890 20af 	ldrb.w	r2, [r0, #175]	; 0xaf
 800bd3e:	2aff      	cmp	r2, #255	; 0xff
 800bd40:	d009      	beq.n	800bd56 <ArtNetNode::HandleTrigger()+0x26>
 800bd42:	f891 2040 	ldrb.w	r2, [r1, #64]	; 0x40
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d10a      	bne.n	800bd60 <ArtNetNode::HandleTrigger()+0x30>
 800bd4a:	f891 20af 	ldrb.w	r2, [r1, #175]	; 0xaf
 800bd4e:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d104      	bne.n	800bd60 <ArtNetNode::HandleTrigger()+0x30>
 800bd56:	6988      	ldr	r0, [r1, #24]
 800bd58:	31b0      	adds	r1, #176	; 0xb0
 800bd5a:	6803      	ldr	r3, [r0, #0]
 800bd5c:	689b      	ldr	r3, [r3, #8]
 800bd5e:	4718      	bx	r3
 800bd60:	4770      	bx	lr
	...

0800bd64 <e131::universe_to_multicast_ip(unsigned short)>:
 800bd64:	b513      	push	{r0, r1, r4, lr}
 800bd66:	4604      	mov	r4, r0
 800bd68:	a901      	add	r1, sp, #4
 800bd6a:	4806      	ldr	r0, [pc, #24]	; (800bd84 <e131::universe_to_multicast_ip(unsigned short)+0x20>)
 800bd6c:	f008 fcfe 	bl	801476c <inet_aton>
 800bd70:	9801      	ldr	r0, [sp, #4]
 800bd72:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 800bd76:	0224      	lsls	r4, r4, #8
 800bd78:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800bd7c:	4320      	orrs	r0, r4
 800bd7e:	b002      	add	sp, #8
 800bd80:	bd10      	pop	{r4, pc}
 800bd82:	bf00      	nop
 800bd84:	08016f07 	stmdaeq	r1, {r0, r1, r2, r8, r9, sl, fp, sp, lr}

0800bd88 <memset.constprop.0.isra.0>:
 800bd88:	2300      	movs	r3, #0
 800bd8a:	4401      	add	r1, r0
 800bd8c:	4288      	cmp	r0, r1
 800bd8e:	d002      	beq.n	800bd96 <memset.constprop.0.isra.0+0xe>
 800bd90:	f800 3b01 	strb.w	r3, [r0], #1
 800bd94:	e7fa      	b.n	800bd8c <memset.constprop.0.isra.0+0x4>
 800bd96:	4770      	bx	lr

0800bd98 <memcpy.isra.0>:
 800bd98:	3801      	subs	r0, #1
 800bd9a:	440a      	add	r2, r1
 800bd9c:	4291      	cmp	r1, r2
 800bd9e:	d004      	beq.n	800bdaa <memcpy.isra.0+0x12>
 800bda0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bda4:	f800 3f01 	strb.w	r3, [r0, #1]!
 800bda8:	e7f8      	b.n	800bd9c <memcpy.isra.0+0x4>
 800bdaa:	4770      	bx	lr

0800bdac <lightset::Data::IOutput(LightSet*, unsigned int) const>:
 800bdac:	f240 6304 	movw	r3, #1540	; 0x604
 800bdb0:	b470      	push	{r4, r5, r6}
 800bdb2:	4605      	mov	r5, r0
 800bdb4:	4608      	mov	r0, r1
 800bdb6:	4353      	muls	r3, r2
 800bdb8:	4611      	mov	r1, r2
 800bdba:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 800bdbe:	18ea      	adds	r2, r5, r3
 800bdc0:	6803      	ldr	r3, [r0, #0]
 800bdc2:	691e      	ldr	r6, [r3, #16]
 800bdc4:	f8d2 3600 	ldr.w	r3, [r2, #1536]	; 0x600
 800bdc8:	46b4      	mov	ip, r6
 800bdca:	192a      	adds	r2, r5, r4
 800bdcc:	bc70      	pop	{r4, r5, r6}
 800bdce:	4760      	bx	ip

0800bdd0 <E131Bridge::Start()>:
 800bdd0:	6943      	ldr	r3, [r0, #20]
 800bdd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdd4:	4604      	mov	r4, r0
 800bdd6:	b35b      	cbz	r3, 800be30 <E131Bridge::Start()+0x60>
 800bdd8:	6983      	ldr	r3, [r0, #24]
 800bdda:	b9cb      	cbnz	r3, 800be10 <E131Bridge::Start()+0x40>
 800bddc:	a901      	add	r1, sp, #4
 800bdde:	4818      	ldr	r0, [pc, #96]	; (800be40 <E131Bridge::Start()+0x70>)
 800bde0:	f008 fcc4 	bl	801476c <inet_aton>
 800bde4:	9b01      	ldr	r3, [sp, #4]
 800bde6:	f240 207e 	movw	r0, #638	; 0x27e
 800bdea:	f043 4356 	orr.w	r3, r3, #3590324224	; 0xd6000000
 800bdee:	f443 037a 	orr.w	r3, r3, #16384000	; 0xfa0000
 800bdf2:	6223      	str	r3, [r4, #32]
 800bdf4:	f008 fcb6 	bl	8014764 <operator new(unsigned int)>
 800bdf8:	61a0      	str	r0, [r4, #24]
 800bdfa:	4620      	mov	r0, r4
 800bdfc:	f000 fdc6 	bl	800c98c <E131Bridge::FillDataPacket()>
 800be00:	f44f 608f 	mov.w	r0, #1144	; 0x478
 800be04:	f008 fcae 	bl	8014764 <operator new(unsigned int)>
 800be08:	61e0      	str	r0, [r4, #28]
 800be0a:	4620      	mov	r0, r4
 800be0c:	f000 fd14 	bl	800c838 <E131Bridge::FillDiscoveryPacket()>
 800be10:	2500      	movs	r5, #0
 800be12:	270c      	movs	r7, #12
 800be14:	f204 6622 	addw	r6, r4, #1570	; 0x622
 800be18:	fb07 f305 	mul.w	r3, r7, r5
 800be1c:	5cf3      	ldrb	r3, [r6, r3]
 800be1e:	b123      	cbz	r3, 800be2a <E131Bridge::Start()+0x5a>
 800be20:	6960      	ldr	r0, [r4, #20]
 800be22:	4629      	mov	r1, r5
 800be24:	6803      	ldr	r3, [r0, #0]
 800be26:	689b      	ldr	r3, [r3, #8]
 800be28:	4798      	blx	r3
 800be2a:	3501      	adds	r5, #1
 800be2c:	2d04      	cmp	r5, #4
 800be2e:	d1f3      	bne.n	800be18 <E131Bridge::Start()+0x48>
 800be30:	2102      	movs	r1, #2
 800be32:	4b04      	ldr	r3, [pc, #16]	; (800be44 <E131Bridge::Start()+0x74>)
 800be34:	6818      	ldr	r0, [r3, #0]
 800be36:	b003      	add	sp, #12
 800be38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800be3c:	f008 bbaa 	b.w	8014594 <LedBlink::SetMode(ledblink::Mode)>
 800be40:	08016f07 	stmdaeq	r1, {r0, r1, r2, r8, r9, sl, fp, sp, lr}
 800be44:	2000a9c0 	andcs	sl, r0, r0, asr #19

0800be48 <E131Bridge::Stop()>:
 800be48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be4c:	2500      	movs	r5, #0
 800be4e:	2301      	movs	r3, #1
 800be50:	4604      	mov	r4, r0
 800be52:	f240 6804 	movw	r8, #1540	; 0x604
 800be56:	462e      	mov	r6, r5
 800be58:	f880 34f4 	strb.w	r3, [r0, #1268]	; 0x4f4
 800be5c:	f500 67aa 	add.w	r7, r0, #1360	; 0x550
 800be60:	6860      	ldr	r0, [r4, #4]
 800be62:	b118      	cbz	r0, 800be6c <E131Bridge::Stop()+0x24>
 800be64:	6803      	ldr	r3, [r0, #0]
 800be66:	4629      	mov	r1, r5
 800be68:	68db      	ldr	r3, [r3, #12]
 800be6a:	4798      	blx	r3
 800be6c:	f7fe fb7e 	bl	800a56c <lightset::Data::Get()>
 800be70:	2344      	movs	r3, #68	; 0x44
 800be72:	fb08 0005 	mla	r0, r8, r5, r0
 800be76:	436b      	muls	r3, r5
 800be78:	3501      	adds	r5, #1
 800be7a:	2d04      	cmp	r5, #4
 800be7c:	f8c0 6600 	str.w	r6, [r0, #1536]	; 0x600
 800be80:	54fe      	strb	r6, [r7, r3]
 800be82:	d1ed      	bne.n	800be60 <E131Bridge::Stop()+0x18>
 800be84:	6963      	ldr	r3, [r4, #20]
 800be86:	b17b      	cbz	r3, 800bea8 <E131Bridge::Stop()+0x60>
 800be88:	2500      	movs	r5, #0
 800be8a:	270c      	movs	r7, #12
 800be8c:	f204 6622 	addw	r6, r4, #1570	; 0x622
 800be90:	fb07 f305 	mul.w	r3, r7, r5
 800be94:	5cf3      	ldrb	r3, [r6, r3]
 800be96:	b123      	cbz	r3, 800bea2 <E131Bridge::Stop()+0x5a>
 800be98:	6960      	ldr	r0, [r4, #20]
 800be9a:	4629      	mov	r1, r5
 800be9c:	6803      	ldr	r3, [r0, #0]
 800be9e:	68db      	ldr	r3, [r3, #12]
 800bea0:	4798      	blx	r3
 800bea2:	3501      	adds	r5, #1
 800bea4:	2d04      	cmp	r5, #4
 800bea6:	d1f3      	bne.n	800be90 <E131Bridge::Stop()+0x48>
 800bea8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800beac:	4b02      	ldr	r3, [pc, #8]	; (800beb8 <E131Bridge::Stop()+0x70>)
 800beae:	2100      	movs	r1, #0
 800beb0:	6818      	ldr	r0, [r3, #0]
 800beb2:	f008 bb6f 	b.w	8014594 <LedBlink::SetMode(ledblink::Mode)>
 800beb6:	bf00      	nop
 800beb8:	2000a9c0 	andcs	sl, r0, r0, asr #19

0800bebc <E131Bridge::SetSourceName(char const*)>:
 800bebc:	223f      	movs	r2, #63	; 0x3f
 800bebe:	b510      	push	{r4, lr}
 800bec0:	f100 0334 	add.w	r3, r0, #52	; 0x34
 800bec4:	3901      	subs	r1, #1
 800bec6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800beca:	b92c      	cbnz	r4, 800bed8 <E131Bridge::SetSourceName(char const*)+0x1c>
 800becc:	441a      	add	r2, r3
 800bece:	4293      	cmp	r3, r2
 800bed0:	d006      	beq.n	800bee0 <E131Bridge::SetSourceName(char const*)+0x24>
 800bed2:	f803 4b01 	strb.w	r4, [r3], #1
 800bed6:	e7fa      	b.n	800bece <E131Bridge::SetSourceName(char const*)+0x12>
 800bed8:	3a01      	subs	r2, #1
 800beda:	f803 4b01 	strb.w	r4, [r3], #1
 800bede:	d1f2      	bne.n	800bec6 <E131Bridge::SetSourceName(char const*)+0xa>
 800bee0:	2300      	movs	r3, #0
 800bee2:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
 800bee6:	bd10      	pop	{r4, pc}

0800bee8 <E131Bridge::E131Bridge()>:
 800bee8:	2300      	movs	r3, #0
 800beea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800beee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bef0:	e9c0 2300 	strd	r2, r3, [r0]
 800bef4:	2201      	movs	r2, #1
 800bef6:	4604      	mov	r4, r0
 800bef8:	2764      	movs	r7, #100	; 0x64
 800befa:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800befe:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800bf02:	e9c0 3307 	strd	r3, r3, [r0, #28]
 800bf06:	6743      	str	r3, [r0, #116]	; 0x74
 800bf08:	4b1e      	ldr	r3, [pc, #120]	; (800bf84 <E131Bridge::E131Bridge()+0x9c>)
 800bf0a:	7202      	strb	r2, [r0, #8]
 800bf0c:	b093      	sub	sp, #76	; 0x4c
 800bf0e:	6018      	str	r0, [r3, #0]
 800bf10:	f500 65a2 	add.w	r5, r0, #1296	; 0x510
 800bf14:	f500 62c4 	add.w	r2, r0, #1568	; 0x620
 800bf18:	f500 66ca 	add.w	r6, r0, #1616	; 0x650
 800bf1c:	4628      	mov	r0, r5
 800bf1e:	2144      	movs	r1, #68	; 0x44
 800bf20:	f7ff ff32 	bl	800bd88 <memset.constprop.0.isra.0>
 800bf24:	4610      	mov	r0, r2
 800bf26:	210c      	movs	r1, #12
 800bf28:	f7ff ff2e 	bl	800bd88 <memset.constprop.0.isra.0>
 800bf2c:	320c      	adds	r2, #12
 800bf2e:	f802 7c03 	strb.w	r7, [r2, #-3]
 800bf32:	42b2      	cmp	r2, r6
 800bf34:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800bf38:	d1f0      	bne.n	800bf1c <E131Bridge::E131Bridge()+0x34>
 800bf3a:	f204 40f4 	addw	r0, r4, #1268	; 0x4f4
 800bf3e:	211c      	movs	r1, #28
 800bf40:	f7ff ff22 	bl	800bd88 <memset.constprop.0.isra.0>
 800bf44:	2301      	movs	r3, #1
 800bf46:	4d10      	ldr	r5, [pc, #64]	; (800bf88 <E131Bridge::E131Bridge()+0xa0>)
 800bf48:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
 800bf4c:	4a0f      	ldr	r2, [pc, #60]	; (800bf8c <E131Bridge::E131Bridge()+0xa4>)
 800bf4e:	682b      	ldr	r3, [r5, #0]
 800bf50:	2140      	movs	r1, #64	; 0x40
 800bf52:	331c      	adds	r3, #28
 800bf54:	9200      	str	r2, [sp, #0]
 800bf56:	a802      	add	r0, sp, #8
 800bf58:	4a0d      	ldr	r2, [pc, #52]	; (800bf90 <E131Bridge::E131Bridge()+0xa8>)
 800bf5a:	f7fd fbaf 	bl	80096bc <snprintf>
 800bf5e:	4620      	mov	r0, r4
 800bf60:	a902      	add	r1, sp, #8
 800bf62:	f7ff ffab 	bl	800bebc <E131Bridge::SetSourceName(char const*)>
 800bf66:	f44f 51ae 	mov.w	r1, #5568	; 0x15c0
 800bf6a:	6828      	ldr	r0, [r5, #0]
 800bf6c:	f005 ffb2 	bl	8011ed4 <Network::Begin(unsigned short)>
 800bf70:	4621      	mov	r1, r4
 800bf72:	4b08      	ldr	r3, [pc, #32]	; (800bf94 <E131Bridge::E131Bridge()+0xac>)
 800bf74:	f841 0b24 	str.w	r0, [r1], #36
 800bf78:	6818      	ldr	r0, [r3, #0]
 800bf7a:	f008 fb93 	bl	80146a4 <Hardware::GetUuid(unsigned char*)>
 800bf7e:	4620      	mov	r0, r4
 800bf80:	b013      	add	sp, #76	; 0x4c
 800bf82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf84:	20001910 	andcs	r1, r0, r0, lsl r9
 800bf88:	2000a29c 	mulcs	r0, ip, r2
 800bf8c:	08016c05 	stmdaeq	r1, {r0, r2, sl, fp, sp, lr}
 800bf90:	08016f13 	stmdaeq	r1, {r0, r1, r4, r8, r9, sl, fp, sp, lr}
 800bf94:	2000a9c4 	andcs	sl, r0, r4, asr #19

0800bf98 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>:
 800bf98:	b570      	push	{r4, r5, r6, lr}
 800bf9a:	4604      	mov	r4, r0
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	2544      	movs	r5, #68	; 0x44
 800bfa0:	4610      	mov	r0, r2
 800bfa2:	f504 62a2 	add.w	r2, r4, #1296	; 0x510
 800bfa6:	4299      	cmp	r1, r3
 800bfa8:	d004      	beq.n	800bfb4 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x1c>
 800bfaa:	fb05 f603 	mul.w	r6, r5, r3
 800bfae:	5b96      	ldrh	r6, [r2, r6]
 800bfb0:	4286      	cmp	r6, r0
 800bfb2:	d00e      	beq.n	800bfd2 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x3a>
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	2b04      	cmp	r3, #4
 800bfb8:	d1f5      	bne.n	800bfa6 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0xe>
 800bfba:	4b06      	ldr	r3, [pc, #24]	; (800bfd4 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x3c>)
 800bfbc:	6824      	ldr	r4, [r4, #0]
 800bfbe:	681d      	ldr	r5, [r3, #0]
 800bfc0:	f7ff fed0 	bl	800bd64 <e131::universe_to_multicast_ip(unsigned short)>
 800bfc4:	4621      	mov	r1, r4
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	4628      	mov	r0, r5
 800bfca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bfce:	f005 bf95 	b.w	8011efc <Network::LeaveGroup(int, unsigned int)>
 800bfd2:	bd70      	pop	{r4, r5, r6, pc}
 800bfd4:	2000a29c 	mulcs	r0, ip, r2

0800bfd8 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>:
 800bfd8:	b570      	push	{r4, r5, r6, lr}
 800bfda:	4604      	mov	r4, r0
 800bfdc:	461d      	mov	r5, r3
 800bfde:	b191      	cbz	r1, 800c006 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x2e>
 800bfe0:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800bfe4:	f200 5606 	addw	r6, r0, #1286	; 0x506
 800bfe8:	b99a      	cbnz	r2, 800c012 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x3a>
 800bfea:	4b0e      	ldr	r3, [pc, #56]	; (800c024 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x4c>)
 800bfec:	8035      	strh	r5, [r6, #0]
 800bfee:	4628      	mov	r0, r5
 800bff0:	6826      	ldr	r6, [r4, #0]
 800bff2:	681c      	ldr	r4, [r3, #0]
 800bff4:	f7ff feb6 	bl	800bd64 <e131::universe_to_multicast_ip(unsigned short)>
 800bff8:	4631      	mov	r1, r6
 800bffa:	4602      	mov	r2, r0
 800bffc:	4620      	mov	r0, r4
 800bffe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c002:	f005 bf78 	b.w	8011ef6 <Network::JoinGroup(int, unsigned int)>
 800c006:	b15a      	cbz	r2, 800c020 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x48>
 800c008:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800c00c:	f500 66a1 	add.w	r6, r0, #1288	; 0x508
 800c010:	e7ea      	b.n	800bfe8 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x10>
 800c012:	42aa      	cmp	r2, r5
 800c014:	d004      	beq.n	800c020 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x48>
 800c016:	2104      	movs	r1, #4
 800c018:	4620      	mov	r0, r4
 800c01a:	f7ff ffbd 	bl	800bf98 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800c01e:	e7e4      	b.n	800bfea <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x12>
 800c020:	bd70      	pop	{r4, r5, r6, pc}
 800c022:	bf00      	nop
 800c024:	2000a29c 	mulcs	r0, ip, r2

0800c028 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
 800c028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c02c:	4604      	mov	r4, r0
 800c02e:	460d      	mov	r5, r1
 800c030:	461e      	mov	r6, r3
 800c032:	bb02      	cbnz	r2, 800c076 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x4e>
 800c034:	2903      	cmp	r1, #3
 800c036:	d843      	bhi.n	800c0c0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x98>
 800c038:	230c      	movs	r3, #12
 800c03a:	fb03 0301 	mla	r3, r3, r1, r0
 800c03e:	f893 2622 	ldrb.w	r2, [r3, #1570]	; 0x622
 800c042:	b12a      	cbz	r2, 800c050 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x28>
 800c044:	f8b3 3620 	ldrh.w	r3, [r3, #1568]	; 0x620
 800c048:	42b3      	cmp	r3, r6
 800c04a:	d109      	bne.n	800c060 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x38>
 800c04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c050:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800c054:	3201      	adds	r2, #1
 800c056:	f880 250a 	strb.w	r2, [r0, #1290]	; 0x50a
 800c05a:	2201      	movs	r2, #1
 800c05c:	f883 2622 	strb.w	r2, [r3, #1570]	; 0x622
 800c060:	210c      	movs	r1, #12
 800c062:	fb01 4405 	mla	r4, r1, r5, r4
 800c066:	4630      	mov	r0, r6
 800c068:	f8a4 6620 	strh.w	r6, [r4, #1568]	; 0x620
 800c06c:	f7ff fe7a 	bl	800bd64 <e131::universe_to_multicast_ip(unsigned short)>
 800c070:	f8c4 0624 	str.w	r0, [r4, #1572]	; 0x624
 800c074:	e7ea      	b.n	800c04c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800c076:	2a02      	cmp	r2, #2
 800c078:	d122      	bne.n	800c0c0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x98>
 800c07a:	2903      	cmp	r1, #3
 800c07c:	d8e6      	bhi.n	800c04c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800c07e:	2344      	movs	r3, #68	; 0x44
 800c080:	fb03 0301 	mla	r3, r3, r1, r0
 800c084:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 800c088:	b152      	cbz	r2, 800c0a0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x78>
 800c08a:	2200      	movs	r2, #0
 800c08c:	f883 2512 	strb.w	r2, [r3, #1298]	; 0x512
 800c090:	f890 350b 	ldrb.w	r3, [r0, #1291]	; 0x50b
 800c094:	4632      	mov	r2, r6
 800c096:	3b01      	subs	r3, #1
 800c098:	f880 350b 	strb.w	r3, [r0, #1291]	; 0x50b
 800c09c:	f7ff ff7c 	bl	800bf98 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800c0a0:	210c      	movs	r1, #12
 800c0a2:	fb01 4505 	mla	r5, r1, r5, r4
 800c0a6:	f895 3622 	ldrb.w	r3, [r5, #1570]	; 0x622
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d0ce      	beq.n	800c04c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	f885 3622 	strb.w	r3, [r5, #1570]	; 0x622
 800c0b4:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800c0b8:	3b01      	subs	r3, #1
 800c0ba:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
 800c0be:	e7c5      	b.n	800c04c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800c0c0:	2344      	movs	r3, #68	; 0x44
 800c0c2:	fb03 4305 	mla	r3, r3, r5, r4
 800c0c6:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 800c0ca:	b1d2      	cbz	r2, 800c102 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xda>
 800c0cc:	f8b3 3510 	ldrh.w	r3, [r3, #1296]	; 0x510
 800c0d0:	42b3      	cmp	r3, r6
 800c0d2:	d0bb      	beq.n	800c04c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800c0d4:	4632      	mov	r2, r6
 800c0d6:	4629      	mov	r1, r5
 800c0d8:	4620      	mov	r0, r4
 800c0da:	f7ff ff5d 	bl	800bf98 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800c0de:	4b0d      	ldr	r3, [pc, #52]	; (800c114 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xec>)
 800c0e0:	4630      	mov	r0, r6
 800c0e2:	681f      	ldr	r7, [r3, #0]
 800c0e4:	f8d4 8000 	ldr.w	r8, [r4]
 800c0e8:	f7ff fe3c 	bl	800bd64 <e131::universe_to_multicast_ip(unsigned short)>
 800c0ec:	4641      	mov	r1, r8
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	4638      	mov	r0, r7
 800c0f2:	f005 ff00 	bl	8011ef6 <Network::JoinGroup(int, unsigned int)>
 800c0f6:	2144      	movs	r1, #68	; 0x44
 800c0f8:	fb01 4405 	mla	r4, r1, r5, r4
 800c0fc:	f8a4 6510 	strh.w	r6, [r4, #1296]	; 0x510
 800c100:	e7a4      	b.n	800c04c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800c102:	f894 250b 	ldrb.w	r2, [r4, #1291]	; 0x50b
 800c106:	3201      	adds	r2, #1
 800c108:	f884 250b 	strb.w	r2, [r4, #1291]	; 0x50b
 800c10c:	2201      	movs	r2, #1
 800c10e:	f883 2512 	strb.w	r2, [r3, #1298]	; 0x512
 800c112:	e7e4      	b.n	800c0de <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xb6>
 800c114:	2000a29c 	mulcs	r0, ip, r2

0800c118 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>:
 800c118:	b953      	cbnz	r3, 800c130 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x18>
 800c11a:	2903      	cmp	r1, #3
 800c11c:	d811      	bhi.n	800c142 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x2a>
 800c11e:	230c      	movs	r3, #12
 800c120:	fb03 0001 	mla	r0, r3, r1, r0
 800c124:	f8b0 3620 	ldrh.w	r3, [r0, #1568]	; 0x620
 800c128:	f890 0622 	ldrb.w	r0, [r0, #1570]	; 0x622
 800c12c:	8013      	strh	r3, [r2, #0]
 800c12e:	4770      	bx	lr
 800c130:	2344      	movs	r3, #68	; 0x44
 800c132:	fb03 0001 	mla	r0, r3, r1, r0
 800c136:	f8b0 3510 	ldrh.w	r3, [r0, #1296]	; 0x510
 800c13a:	f890 0512 	ldrb.w	r0, [r0, #1298]	; 0x512
 800c13e:	8013      	strh	r3, [r2, #0]
 800c140:	4770      	bx	lr
 800c142:	4618      	mov	r0, r3
 800c144:	4770      	bx	lr

0800c146 <E131Bridge::UpdateMergeStatus(unsigned int)>:
 800c146:	f890 34f5 	ldrb.w	r3, [r0, #1269]	; 0x4f5
 800c14a:	b923      	cbnz	r3, 800c156 <E131Bridge::UpdateMergeStatus(unsigned int)+0x10>
 800c14c:	2301      	movs	r3, #1
 800c14e:	f880 34f5 	strb.w	r3, [r0, #1269]	; 0x4f5
 800c152:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800c156:	2344      	movs	r3, #68	; 0x44
 800c158:	fb03 0001 	mla	r0, r3, r1, r0
 800c15c:	2301      	movs	r3, #1
 800c15e:	f880 3551 	strb.w	r3, [r0, #1361]	; 0x551
 800c162:	4770      	bx	lr

0800c164 <E131Bridge::CheckMergeTimeouts(unsigned int)>:
 800c164:	4602      	mov	r2, r0
 800c166:	2044      	movs	r0, #68	; 0x44
 800c168:	4348      	muls	r0, r1
 800c16a:	b570      	push	{r4, r5, r6, lr}
 800c16c:	1815      	adds	r5, r2, r0
 800c16e:	460c      	mov	r4, r1
 800c170:	68d3      	ldr	r3, [r2, #12]
 800c172:	f8d5 1514 	ldr.w	r1, [r5, #1300]	; 0x514
 800c176:	1a5b      	subs	r3, r3, r1
 800c178:	f242 7110 	movw	r1, #10000	; 0x2710
 800c17c:	428b      	cmp	r3, r1
 800c17e:	d90a      	bls.n	800c196 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x32>
 800c180:	2600      	movs	r6, #0
 800c182:	f200 501c 	addw	r0, r0, #1308	; 0x51c
 800c186:	2110      	movs	r1, #16
 800c188:	f8c5 6518 	str.w	r6, [r5, #1304]	; 0x518
 800c18c:	4410      	add	r0, r2
 800c18e:	f7ff fdfb 	bl	800bd88 <memset.constprop.0.isra.0>
 800c192:	f885 6551 	strb.w	r6, [r5, #1361]	; 0x551
 800c196:	2044      	movs	r0, #68	; 0x44
 800c198:	4344      	muls	r4, r0
 800c19a:	1915      	adds	r5, r2, r4
 800c19c:	f8d5 1530 	ldr.w	r1, [r5, #1328]	; 0x530
 800c1a0:	68d3      	ldr	r3, [r2, #12]
 800c1a2:	1a5b      	subs	r3, r3, r1
 800c1a4:	f242 7110 	movw	r1, #10000	; 0x2710
 800c1a8:	428b      	cmp	r3, r1
 800c1aa:	d90a      	bls.n	800c1c2 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x5e>
 800c1ac:	2600      	movs	r6, #0
 800c1ae:	f504 64a7 	add.w	r4, r4, #1336	; 0x538
 800c1b2:	2110      	movs	r1, #16
 800c1b4:	f8c5 6534 	str.w	r6, [r5, #1332]	; 0x534
 800c1b8:	1910      	adds	r0, r2, r4
 800c1ba:	f7ff fde5 	bl	800bd88 <memset.constprop.0.isra.0>
 800c1be:	f885 6551 	strb.w	r6, [r5, #1361]	; 0x551
 800c1c2:	f892 1595 	ldrb.w	r1, [r2, #1429]	; 0x595
 800c1c6:	f892 3551 	ldrb.w	r3, [r2, #1361]	; 0x551
 800c1ca:	430b      	orrs	r3, r1
 800c1cc:	f892 15d9 	ldrb.w	r1, [r2, #1497]	; 0x5d9
 800c1d0:	430b      	orrs	r3, r1
 800c1d2:	d107      	bne.n	800c1e4 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x80>
 800c1d4:	f892 361d 	ldrb.w	r3, [r2, #1565]	; 0x61d
 800c1d8:	b923      	cbnz	r3, 800c1e4 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x80>
 800c1da:	2101      	movs	r1, #1
 800c1dc:	f882 34f5 	strb.w	r3, [r2, #1269]	; 0x4f5
 800c1e0:	f882 14f8 	strb.w	r1, [r2, #1272]	; 0x4f8
 800c1e4:	bd70      	pop	{r4, r5, r6, pc}

0800c1e6 <E131Bridge::IsPriorityTimeOut(unsigned int) const>:
 800c1e6:	2244      	movs	r2, #68	; 0x44
 800c1e8:	fb02 0101 	mla	r1, r2, r1, r0
 800c1ec:	68c3      	ldr	r3, [r0, #12]
 800c1ee:	f8d1 0530 	ldr.w	r0, [r1, #1328]	; 0x530
 800c1f2:	b510      	push	{r4, lr}
 800c1f4:	1a1a      	subs	r2, r3, r0
 800c1f6:	f8d1 4514 	ldr.w	r4, [r1, #1300]	; 0x514
 800c1fa:	f8d1 0534 	ldr.w	r0, [r1, #1332]	; 0x534
 800c1fe:	f8d1 1518 	ldr.w	r1, [r1, #1304]	; 0x518
 800c202:	b171      	cbz	r1, 800c222 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3c>
 800c204:	1b1b      	subs	r3, r3, r4
 800c206:	b128      	cbz	r0, 800c214 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2e>
 800c208:	f242 700f 	movw	r0, #9999	; 0x270f
 800c20c:	4283      	cmp	r3, r0
 800c20e:	d90d      	bls.n	800c22c <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x46>
 800c210:	4282      	cmp	r2, r0
 800c212:	e002      	b.n	800c21a <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x34>
 800c214:	f242 7010 	movw	r0, #10000	; 0x2710
 800c218:	4283      	cmp	r3, r0
 800c21a:	bf94      	ite	ls
 800c21c:	2000      	movls	r0, #0
 800c21e:	2001      	movhi	r0, #1
 800c220:	bd10      	pop	{r4, pc}
 800c222:	2800      	cmp	r0, #0
 800c224:	d0fc      	beq.n	800c220 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>
 800c226:	f242 7010 	movw	r0, #10000	; 0x2710
 800c22a:	e7f1      	b.n	800c210 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2a>
 800c22c:	2000      	movs	r0, #0
 800c22e:	e7f7      	b.n	800c220 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>

0800c230 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>:
 800c230:	684a      	ldr	r2, [r1, #4]
 800c232:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800c234:	b510      	push	{r4, lr}
 800c236:	429a      	cmp	r2, r3
 800c238:	d10b      	bne.n	800c252 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x22>
 800c23a:	f100 0392 	add.w	r3, r0, #146	; 0x92
 800c23e:	3108      	adds	r1, #8
 800c240:	30a2      	adds	r0, #162	; 0xa2
 800c242:	4298      	cmp	r0, r3
 800c244:	d007      	beq.n	800c256 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x26>
 800c246:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c24a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c24e:	4294      	cmp	r4, r2
 800c250:	d0f7      	beq.n	800c242 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x12>
 800c252:	2000      	movs	r0, #0
 800c254:	bd10      	pop	{r4, pc}
 800c256:	2001      	movs	r0, #1
 800c258:	e7fc      	b.n	800c254 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x24>
	...

0800c25c <E131Bridge::SetNetworkDataLossCondition(bool, bool)>:
 800c25c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c260:	2301      	movs	r3, #1
 800c262:	4605      	mov	r5, r0
 800c264:	4690      	mov	r8, r2
 800c266:	460f      	mov	r7, r1
 800c268:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800c26c:	2900      	cmp	r1, #0
 800c26e:	d03d      	beq.n	800c2ec <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x90>
 800c270:	2a00      	cmp	r2, #0
 800c272:	d03b      	beq.n	800c2ec <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x90>
 800c274:	2600      	movs	r6, #0
 800c276:	f240 6804 	movw	r8, #1540	; 0x604
 800c27a:	4637      	mov	r7, r6
 800c27c:	f8c0 34f4 	str.w	r3, [r0, #1268]	; 0x4f4
 800c280:	f880 350c 	strb.w	r3, [r0, #1292]	; 0x50c
 800c284:	f200 541c 	addw	r4, r0, #1308	; 0x51c
 800c288:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800c28c:	b1e3      	cbz	r3, 800c2c8 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x6c>
 800c28e:	6868      	ldr	r0, [r5, #4]
 800c290:	4631      	mov	r1, r6
 800c292:	6803      	ldr	r3, [r0, #0]
 800c294:	68db      	ldr	r3, [r3, #12]
 800c296:	4798      	blx	r3
 800c298:	2110      	movs	r1, #16
 800c29a:	4620      	mov	r0, r4
 800c29c:	f844 7c04 	str.w	r7, [r4, #-4]
 800c2a0:	f7ff fd72 	bl	800bd88 <memset.constprop.0.isra.0>
 800c2a4:	2110      	movs	r1, #16
 800c2a6:	f104 001c 	add.w	r0, r4, #28
 800c2aa:	61a7      	str	r7, [r4, #24]
 800c2ac:	f7ff fd6c 	bl	800bd88 <memset.constprop.0.isra.0>
 800c2b0:	f7fe f95c 	bl	800a56c <lightset::Data::Get()>
 800c2b4:	fb08 0006 	mla	r0, r8, r6, r0
 800c2b8:	f8c0 7600 	str.w	r7, [r0, #1536]	; 0x600
 800c2bc:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
 800c2c0:	f884 7036 	strb.w	r7, [r4, #54]	; 0x36
 800c2c4:	f884 7035 	strb.w	r7, [r4, #53]	; 0x35
 800c2c8:	3601      	adds	r6, #1
 800c2ca:	2e04      	cmp	r6, #4
 800c2cc:	f104 0444 	add.w	r4, r4, #68	; 0x44
 800c2d0:	d1da      	bne.n	800c288 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x2c>
 800c2d2:	4b25      	ldr	r3, [pc, #148]	; (800c368 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x10c>)
 800c2d4:	2102      	movs	r1, #2
 800c2d6:	6818      	ldr	r0, [r3, #0]
 800c2d8:	f008 f95c 	bl	8014594 <LedBlink::SetMode(ledblink::Mode)>
 800c2dc:	f895 350d 	ldrb.w	r3, [r5, #1293]	; 0x50d
 800c2e0:	f023 0302 	bic.w	r3, r3, #2
 800c2e4:	f885 350d 	strb.w	r3, [r5, #1293]	; 0x50d
 800c2e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ec:	2600      	movs	r6, #0
 800c2ee:	f240 6b04 	movw	fp, #1540	; 0x604
 800c2f2:	46b1      	mov	r9, r6
 800c2f4:	f505 64a7 	add.w	r4, r5, #1336	; 0x538
 800c2f8:	7ea3      	ldrb	r3, [r4, #26]
 800c2fa:	b373      	cbz	r3, 800c35a <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xfe>
 800c2fc:	b15f      	cbz	r7, 800c316 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xba>
 800c2fe:	f854 3c20 	ldr.w	r3, [r4, #-32]
 800c302:	b143      	cbz	r3, 800c316 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xba>
 800c304:	2110      	movs	r1, #16
 800c306:	f844 9c20 	str.w	r9, [r4, #-32]
 800c30a:	f1a4 001c 	sub.w	r0, r4, #28
 800c30e:	f7ff fd3b 	bl	800bd88 <memset.constprop.0.isra.0>
 800c312:	f884 9019 	strb.w	r9, [r4, #25]
 800c316:	f1b8 0f00 	cmp.w	r8, #0
 800c31a:	d00a      	beq.n	800c332 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd6>
 800c31c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c320:	b13b      	cbz	r3, 800c332 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd6>
 800c322:	2110      	movs	r1, #16
 800c324:	4620      	mov	r0, r4
 800c326:	f844 9c04 	str.w	r9, [r4, #-4]
 800c32a:	f7ff fd2d 	bl	800bd88 <memset.constprop.0.isra.0>
 800c32e:	f884 9019 	strb.w	r9, [r4, #25]
 800c332:	f895 a4f5 	ldrb.w	sl, [r5, #1269]	; 0x4f5
 800c336:	f1ba 0f00 	cmp.w	sl, #0
 800c33a:	d10e      	bne.n	800c35a <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xfe>
 800c33c:	6868      	ldr	r0, [r5, #4]
 800c33e:	4631      	mov	r1, r6
 800c340:	6803      	ldr	r3, [r0, #0]
 800c342:	68db      	ldr	r3, [r3, #12]
 800c344:	4798      	blx	r3
 800c346:	f7fe f911 	bl	800a56c <lightset::Data::Get()>
 800c34a:	fb0b 0006 	mla	r0, fp, r6, r0
 800c34e:	f8c0 a600 	str.w	sl, [r0, #1536]	; 0x600
 800c352:	f884 a018 	strb.w	sl, [r4, #24]
 800c356:	f884 a01a 	strb.w	sl, [r4, #26]
 800c35a:	3601      	adds	r6, #1
 800c35c:	2e04      	cmp	r6, #4
 800c35e:	f104 0444 	add.w	r4, r4, #68	; 0x44
 800c362:	d1c9      	bne.n	800c2f8 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x9c>
 800c364:	e7b5      	b.n	800c2d2 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x76>
 800c366:	bf00      	nop
 800c368:	2000a9c0 	andcs	sl, r0, r0, asr #19

0800c36c <E131Bridge::HandleDmx()>:
 800c36c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c370:	4604      	mov	r4, r0
 800c372:	2600      	movs	r6, #0
 800c374:	f8b0 70f7 	ldrh.w	r7, [r0, #247]	; 0xf7
 800c378:	f100 09fa 	add.w	r9, r0, #250	; 0xfa
 800c37c:	ba7f      	rev16	r7, r7
 800c37e:	b2bf      	uxth	r7, r7
 800c380:	3f01      	subs	r7, #1
 800c382:	f200 551c 	addw	r5, r0, #1308	; 0x51c
 800c386:	f815 3c0a 	ldrb.w	r3, [r5, #-10]
 800c38a:	b353      	cbz	r3, 800c3e2 <E131Bridge::HandleDmx()+0x76>
 800c38c:	f835 3c0c 	ldrh.w	r3, [r5, #-12]
 800c390:	f8b4 20ed 	ldrh.w	r2, [r4, #237]	; 0xed
 800c394:	ba5b      	rev16	r3, r3
 800c396:	b29b      	uxth	r3, r3
 800c398:	429a      	cmp	r2, r3
 800c39a:	d122      	bne.n	800c3e2 <E131Bridge::HandleDmx()+0x76>
 800c39c:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800c3a0:	f1a5 0108 	sub.w	r1, r5, #8
 800c3a4:	4620      	mov	r0, r4
 800c3a6:	9300      	str	r3, [sp, #0]
 800c3a8:	f7ff ff42 	bl	800c230 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800c3ac:	f105 0114 	add.w	r1, r5, #20
 800c3b0:	4682      	mov	sl, r0
 800c3b2:	4620      	mov	r0, r4
 800c3b4:	f7ff ff3c 	bl	800c230 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800c3b8:	f8d5 b018 	ldr.w	fp, [r5, #24]
 800c3bc:	4680      	mov	r8, r0
 800c3be:	f1ba 0f00 	cmp.w	sl, #0
 800c3c2:	d016      	beq.n	800c3f2 <E131Bridge::HandleDmx()+0x86>
 800c3c4:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c3c8:	7c2a      	ldrb	r2, [r5, #16]
 800c3ca:	742b      	strb	r3, [r5, #16]
 800c3cc:	3313      	adds	r3, #19
 800c3ce:	1a9b      	subs	r3, r3, r2
 800c3d0:	b2db      	uxtb	r3, r3
 800c3d2:	2b13      	cmp	r3, #19
 800c3d4:	d905      	bls.n	800c3e2 <E131Bridge::HandleDmx()+0x76>
 800c3d6:	f994 20ec 	ldrsb.w	r2, [r4, #236]	; 0xec
 800c3da:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800c3de:	2a00      	cmp	r2, #0
 800c3e0:	da10      	bge.n	800c404 <E131Bridge::HandleDmx()+0x98>
 800c3e2:	3601      	adds	r6, #1
 800c3e4:	2e04      	cmp	r6, #4
 800c3e6:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800c3ea:	d1cc      	bne.n	800c386 <E131Bridge::HandleDmx()+0x1a>
 800c3ec:	b003      	add	sp, #12
 800c3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3f2:	2800      	cmp	r0, #0
 800c3f4:	d0ef      	beq.n	800c3d6 <E131Bridge::HandleDmx()+0x6a>
 800c3f6:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c3fa:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 800c3fe:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800c402:	e7e3      	b.n	800c3cc <E131Bridge::HandleDmx()+0x60>
 800c404:	065a      	lsls	r2, r3, #25
 800c406:	d50b      	bpl.n	800c420 <E131Bridge::HandleDmx()+0xb4>
 800c408:	f1ba 0f00 	cmp.w	sl, #0
 800c40c:	d102      	bne.n	800c414 <E131Bridge::HandleDmx()+0xa8>
 800c40e:	f1b8 0f00 	cmp.w	r8, #0
 800c412:	d0e6      	beq.n	800c3e2 <E131Bridge::HandleDmx()+0x76>
 800c414:	4642      	mov	r2, r8
 800c416:	4651      	mov	r1, sl
 800c418:	4620      	mov	r0, r4
 800c41a:	f7ff ff1f 	bl	800c25c <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800c41e:	e7e0      	b.n	800c3e2 <E131Bridge::HandleDmx()+0x76>
 800c420:	f894 34f5 	ldrb.w	r3, [r4, #1269]	; 0x4f5
 800c424:	b133      	cbz	r3, 800c434 <E131Bridge::HandleDmx()+0xc8>
 800c426:	f894 34fa 	ldrb.w	r3, [r4, #1274]	; 0x4fa
 800c42a:	b91b      	cbnz	r3, 800c434 <E131Bridge::HandleDmx()+0xc8>
 800c42c:	4631      	mov	r1, r6
 800c42e:	4620      	mov	r0, r4
 800c430:	f7ff fe98 	bl	800c164 <E131Bridge::CheckMergeTimeouts(unsigned int)>
 800c434:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
 800c438:	f894 250c 	ldrb.w	r2, [r4, #1292]	; 0x50c
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d259      	bcs.n	800c4f4 <E131Bridge::HandleDmx()+0x188>
 800c440:	4631      	mov	r1, r6
 800c442:	4620      	mov	r0, r4
 800c444:	9301      	str	r3, [sp, #4]
 800c446:	f7ff fece 	bl	800c1e6 <E131Bridge::IsPriorityTimeOut(unsigned int) const>
 800c44a:	2800      	cmp	r0, #0
 800c44c:	d0c9      	beq.n	800c3e2 <E131Bridge::HandleDmx()+0x76>
 800c44e:	9b01      	ldr	r3, [sp, #4]
 800c450:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
 800c454:	9b00      	ldr	r3, [sp, #0]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d154      	bne.n	800c504 <E131Bridge::HandleDmx()+0x198>
 800c45a:	f1bb 0f00 	cmp.w	fp, #0
 800c45e:	d15c      	bne.n	800c51a <E131Bridge::HandleDmx()+0x1ae>
 800c460:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c462:	2210      	movs	r2, #16
 800c464:	f845 3c04 	str.w	r3, [r5, #-4]
 800c468:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c46c:	4628      	mov	r0, r5
 800c46e:	742b      	strb	r3, [r5, #16]
 800c470:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800c474:	f7ff fc90 	bl	800bd98 <memcpy.isra.0>
 800c478:	68e3      	ldr	r3, [r4, #12]
 800c47a:	463a      	mov	r2, r7
 800c47c:	4649      	mov	r1, r9
 800c47e:	4630      	mov	r0, r6
 800c480:	f845 3c08 	str.w	r3, [r5, #-8]
 800c484:	f7fe f87e 	bl	800a584 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 800c488:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800c48c:	069b      	lsls	r3, r3, #26
 800c48e:	f100 80ad 	bmi.w	800c5ec <E131Bridge::HandleDmx()+0x280>
 800c492:	f8b4 30e9 	ldrh.w	r3, [r4, #233]	; 0xe9
 800c496:	b29a      	uxth	r2, r3
 800c498:	2a00      	cmp	r2, #0
 800c49a:	f000 80ab 	beq.w	800c5f4 <E131Bridge::HandleDmx()+0x288>
 800c49e:	f894 24f7 	ldrb.w	r2, [r4, #1271]	; 0x4f7
 800c4a2:	2a00      	cmp	r2, #0
 800c4a4:	f040 80a6 	bne.w	800c5f4 <E131Bridge::HandleDmx()+0x288>
 800c4a8:	ba5b      	rev16	r3, r3
 800c4aa:	b29b      	uxth	r3, r3
 800c4ac:	f1ba 0f00 	cmp.w	sl, #0
 800c4b0:	f040 8099 	bne.w	800c5e6 <E131Bridge::HandleDmx()+0x27a>
 800c4b4:	f1b8 0f00 	cmp.w	r8, #0
 800c4b8:	f040 8095 	bne.w	800c5e6 <E131Bridge::HandleDmx()+0x27a>
 800c4bc:	69aa      	ldr	r2, [r5, #24]
 800c4be:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800c4c2:	3a00      	subs	r2, #0
 800c4c4:	bf18      	it	ne
 800c4c6:	2201      	movne	r2, #1
 800c4c8:	3900      	subs	r1, #0
 800c4ca:	bf18      	it	ne
 800c4cc:	2101      	movne	r1, #1
 800c4ce:	4620      	mov	r0, r4
 800c4d0:	f7ff fd82 	bl	800bfd8 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>
 800c4d4:	f240 1301 	movw	r3, #257	; 0x101
 800c4d8:	f8a4 34f6 	strh.w	r3, [r4, #1270]	; 0x4f6
 800c4dc:	f894 34fb 	ldrb.w	r3, [r4, #1275]	; 0x4fb
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	f040 808c 	bne.w	800c5fe <E131Bridge::HandleDmx()+0x292>
 800c4e6:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800c4ea:	f043 0302 	orr.w	r3, r3, #2
 800c4ee:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800c4f2:	e776      	b.n	800c3e2 <E131Bridge::HandleDmx()+0x76>
 800c4f4:	d9ae      	bls.n	800c454 <E131Bridge::HandleDmx()+0xe8>
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	f845 2c04 	str.w	r2, [r5, #-4]
 800c4fc:	61aa      	str	r2, [r5, #24]
 800c4fe:	f884 24f5 	strb.w	r2, [r4, #1269]	; 0x4f5
 800c502:	e7a5      	b.n	800c450 <E131Bridge::HandleDmx()+0xe4>
 800c504:	f1ba 0f00 	cmp.w	sl, #0
 800c508:	f000 8092 	beq.w	800c630 <E131Bridge::HandleDmx()+0x2c4>
 800c50c:	f1bb 0f00 	cmp.w	fp, #0
 800c510:	d15c      	bne.n	800c5cc <E131Bridge::HandleDmx()+0x260>
 800c512:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c516:	742b      	strb	r3, [r5, #16]
 800c518:	e7ae      	b.n	800c478 <E131Bridge::HandleDmx()+0x10c>
 800c51a:	f1b8 0f00 	cmp.w	r8, #0
 800c51e:	d03b      	beq.n	800c598 <E131Bridge::HandleDmx()+0x22c>
 800c520:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c524:	f240 6b04 	movw	fp, #1540	; 0x604
 800c528:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800c52c:	68e3      	ldr	r3, [r4, #12]
 800c52e:	fb0b fb06 	mul.w	fp, fp, r6
 800c532:	616b      	str	r3, [r5, #20]
 800c534:	f7fe f81a 	bl	800a56c <lightset::Data::Get()>
 800c538:	4603      	mov	r3, r0
 800c53a:	f50b 7000 	add.w	r0, fp, #512	; 0x200
 800c53e:	463a      	mov	r2, r7
 800c540:	4649      	mov	r1, r9
 800c542:	4418      	add	r0, r3
 800c544:	9300      	str	r3, [sp, #0]
 800c546:	f7ff fc27 	bl	800bd98 <memcpy.isra.0>
 800c54a:	9b00      	ldr	r3, [sp, #0]
 800c54c:	f50b 6080 	add.w	r0, fp, #1024	; 0x400
 800c550:	eb03 020b 	add.w	r2, r3, fp
 800c554:	f8c2 7600 	str.w	r7, [r2, #1536]	; 0x600
 800c558:	4649      	mov	r1, r9
 800c55a:	463a      	mov	r2, r7
 800c55c:	4418      	add	r0, r3
 800c55e:	f7ff fc1b 	bl	800bd98 <memcpy.isra.0>
 800c562:	e791      	b.n	800c488 <E131Bridge::HandleDmx()+0x11c>
 800c564:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c566:	2210      	movs	r2, #16
 800c568:	61ab      	str	r3, [r5, #24]
 800c56a:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c56e:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800c572:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800c576:	f105 001c 	add.w	r0, r5, #28
 800c57a:	f7ff fc0d 	bl	800bd98 <memcpy.isra.0>
 800c57e:	68e3      	ldr	r3, [r4, #12]
 800c580:	4631      	mov	r1, r6
 800c582:	4620      	mov	r0, r4
 800c584:	616b      	str	r3, [r5, #20]
 800c586:	f7ff fdde 	bl	800c146 <E131Bridge::UpdateMergeStatus(unsigned int)>
 800c58a:	463a      	mov	r2, r7
 800c58c:	4649      	mov	r1, r9
 800c58e:	4630      	mov	r0, r6
 800c590:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800c592:	f7fe f83d 	bl	800a610 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800c596:	e777      	b.n	800c488 <E131Bridge::HandleDmx()+0x11c>
 800c598:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c59a:	2210      	movs	r2, #16
 800c59c:	f845 3c04 	str.w	r3, [r5, #-4]
 800c5a0:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c5a4:	4628      	mov	r0, r5
 800c5a6:	742b      	strb	r3, [r5, #16]
 800c5a8:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800c5ac:	f7ff fbf4 	bl	800bd98 <memcpy.isra.0>
 800c5b0:	68e3      	ldr	r3, [r4, #12]
 800c5b2:	4631      	mov	r1, r6
 800c5b4:	4620      	mov	r0, r4
 800c5b6:	f845 3c08 	str.w	r3, [r5, #-8]
 800c5ba:	f7ff fdc4 	bl	800c146 <E131Bridge::UpdateMergeStatus(unsigned int)>
 800c5be:	463a      	mov	r2, r7
 800c5c0:	4649      	mov	r1, r9
 800c5c2:	4630      	mov	r0, r6
 800c5c4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800c5c6:	f7fd fffa 	bl	800a5be <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800c5ca:	e75d      	b.n	800c488 <E131Bridge::HandleDmx()+0x11c>
 800c5cc:	f1b8 0f00 	cmp.w	r8, #0
 800c5d0:	d103      	bne.n	800c5da <E131Bridge::HandleDmx()+0x26e>
 800c5d2:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c5d6:	742b      	strb	r3, [r5, #16]
 800c5d8:	e7ea      	b.n	800c5b0 <E131Bridge::HandleDmx()+0x244>
 800c5da:	481b      	ldr	r0, [pc, #108]	; (800c648 <E131Bridge::HandleDmx()+0x2dc>)
 800c5dc:	b003      	add	sp, #12
 800c5de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5e2:	f7fd b843 	b.w	800966c <printf>
 800c5e6:	4642      	mov	r2, r8
 800c5e8:	4651      	mov	r1, sl
 800c5ea:	e770      	b.n	800c4ce <E131Bridge::HandleDmx()+0x162>
 800c5ec:	f04f 0300 	mov.w	r3, #0
 800c5f0:	f884 34f7 	strb.w	r3, [r4, #1271]	; 0x4f7
 800c5f4:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	f47f af6f 	bne.w	800c4dc <E131Bridge::HandleDmx()+0x170>
 800c5fe:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800c602:	f7fd ffb3 	bl	800a56c <lightset::Data::Get()>
 800c606:	4632      	mov	r2, r6
 800c608:	4641      	mov	r1, r8
 800c60a:	f7ff fbcf 	bl	800bdac <lightset::Data::IOutput(LightSet*, unsigned int) const>
 800c60e:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
 800c612:	2b00      	cmp	r3, #0
 800c614:	f47f af67 	bne.w	800c4e6 <E131Bridge::HandleDmx()+0x17a>
 800c618:	6860      	ldr	r0, [r4, #4]
 800c61a:	4631      	mov	r1, r6
 800c61c:	6803      	ldr	r3, [r0, #0]
 800c61e:	689b      	ldr	r3, [r3, #8]
 800c620:	4798      	blx	r3
 800c622:	f04f 0301 	mov.w	r3, #1
 800c626:	f884 34f8 	strb.w	r3, [r4, #1272]	; 0x4f8
 800c62a:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 800c62e:	e75a      	b.n	800c4e6 <E131Bridge::HandleDmx()+0x17a>
 800c630:	f1bb 0f00 	cmp.w	fp, #0
 800c634:	d096      	beq.n	800c564 <E131Bridge::HandleDmx()+0x1f8>
 800c636:	f1b8 0f00 	cmp.w	r8, #0
 800c63a:	d0ce      	beq.n	800c5da <E131Bridge::HandleDmx()+0x26e>
 800c63c:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c640:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800c644:	e79b      	b.n	800c57e <E131Bridge::HandleDmx()+0x212>
 800c646:	bf00      	nop
 800c648:	08016f1c 	stmdaeq	r1, {r2, r3, r4, r8, r9, sl, fp, sp, lr}

0800c64c <E131Bridge::IsStatusChanged()>:
 800c64c:	4603      	mov	r3, r0
 800c64e:	f890 04f8 	ldrb.w	r0, [r0, #1272]	; 0x4f8
 800c652:	b110      	cbz	r0, 800c65a <E131Bridge::IsStatusChanged()+0xe>
 800c654:	2200      	movs	r2, #0
 800c656:	f883 24f8 	strb.w	r2, [r3, #1272]	; 0x4f8
 800c65a:	4770      	bx	lr

0800c65c <E131Bridge::Clear(unsigned int)>:
 800c65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c65e:	460d      	mov	r5, r1
 800c660:	4604      	mov	r4, r0
 800c662:	6847      	ldr	r7, [r0, #4]
 800c664:	f7fd ff82 	bl	800a56c <lightset::Data::Get()>
 800c668:	f240 6204 	movw	r2, #1540	; 0x604
 800c66c:	4606      	mov	r6, r0
 800c66e:	436a      	muls	r2, r5
 800c670:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 800c674:	4430      	add	r0, r6
 800c676:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c67a:	f7ff fb85 	bl	800bd88 <memset.constprop.0.isra.0>
 800c67e:	4432      	add	r2, r6
 800c680:	4630      	mov	r0, r6
 800c682:	2644      	movs	r6, #68	; 0x44
 800c684:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c688:	fb06 4605 	mla	r6, r6, r5, r4
 800c68c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
 800c690:	4639      	mov	r1, r7
 800c692:	462a      	mov	r2, r5
 800c694:	f7ff fb8a 	bl	800bdac <lightset::Data::IOutput(LightSet*, unsigned int) const>
 800c698:	f896 3512 	ldrb.w	r3, [r6, #1298]	; 0x512
 800c69c:	b153      	cbz	r3, 800c6b4 <E131Bridge::Clear(unsigned int)+0x58>
 800c69e:	f896 3552 	ldrb.w	r3, [r6, #1362]	; 0x552
 800c6a2:	b93b      	cbnz	r3, 800c6b4 <E131Bridge::Clear(unsigned int)+0x58>
 800c6a4:	6860      	ldr	r0, [r4, #4]
 800c6a6:	4629      	mov	r1, r5
 800c6a8:	6803      	ldr	r3, [r0, #0]
 800c6aa:	689b      	ldr	r3, [r3, #8]
 800c6ac:	4798      	blx	r3
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	f886 3552 	strb.w	r3, [r6, #1362]	; 0x552
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
 800c6ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c6bc <E131Bridge::IsValidRoot()>:
 800c6bc:	4a0d      	ldr	r2, [pc, #52]	; (800c6f4 <E131Bridge::IsValidRoot()+0x38>)
 800c6be:	b530      	push	{r4, r5, lr}
 800c6c0:	f100 0380 	add.w	r3, r0, #128	; 0x80
 800c6c4:	f100 058c 	add.w	r5, r0, #140	; 0x8c
 800c6c8:	42ab      	cmp	r3, r5
 800c6ca:	d007      	beq.n	800c6dc <E131Bridge::IsValidRoot()+0x20>
 800c6cc:	f813 4b01 	ldrb.w	r4, [r3], #1
 800c6d0:	f812 1b01 	ldrb.w	r1, [r2], #1
 800c6d4:	428c      	cmp	r4, r1
 800c6d6:	d0f7      	beq.n	800c6c8 <E131Bridge::IsValidRoot()+0xc>
 800c6d8:	2000      	movs	r0, #0
 800c6da:	e008      	b.n	800c6ee <E131Bridge::IsValidRoot()+0x32>
 800c6dc:	f8d0 008e 	ldr.w	r0, [r0, #142]	; 0x8e
 800c6e0:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800c6e4:	d004      	beq.n	800c6f0 <E131Bridge::IsValidRoot()+0x34>
 800c6e6:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 800c6ea:	4258      	negs	r0, r3
 800c6ec:	4158      	adcs	r0, r3
 800c6ee:	bd30      	pop	{r4, r5, pc}
 800c6f0:	2001      	movs	r0, #1
 800c6f2:	e7fc      	b.n	800c6ee <E131Bridge::IsValidRoot()+0x32>
 800c6f4:	08016fcc 	stmdaeq	r1, {r2, r3, r6, r7, r8, r9, sl, fp, sp, lr}

0800c6f8 <E131Bridge::IsValidDataPacket()>:
 800c6f8:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
 800c6fc:	2b02      	cmp	r3, #2
 800c6fe:	d10d      	bne.n	800c71c <E131Bridge::IsValidDataPacket()+0x24>
 800c700:	f890 30f2 	ldrb.w	r3, [r0, #242]	; 0xf2
 800c704:	2ba1      	cmp	r3, #161	; 0xa1
 800c706:	d109      	bne.n	800c71c <E131Bridge::IsValidDataPacket()+0x24>
 800c708:	f8b0 30f3 	ldrh.w	r3, [r0, #243]	; 0xf3
 800c70c:	b933      	cbnz	r3, 800c71c <E131Bridge::IsValidDataPacket()+0x24>
 800c70e:	f8b0 00f5 	ldrh.w	r0, [r0, #245]	; 0xf5
 800c712:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800c716:	4258      	negs	r0, r3
 800c718:	4158      	adcs	r0, r3
 800c71a:	4770      	bx	lr
 800c71c:	2000      	movs	r0, #0
 800c71e:	4770      	bx	lr

0800c720 <E131Bridge::Run()>:
 800c720:	b530      	push	{r4, r5, lr}
 800c722:	4601      	mov	r1, r0
 800c724:	4604      	mov	r4, r0
 800c726:	b085      	sub	sp, #20
 800c728:	f10d 030e 	add.w	r3, sp, #14
 800c72c:	f811 0b7c 	ldrb.w	r0, [r1], #124
 800c730:	f44f 628f 	mov.w	r2, #1144	; 0x478
 800c734:	9300      	str	r3, [sp, #0]
 800c736:	f104 0378 	add.w	r3, r4, #120	; 0x78
 800c73a:	f004 fea1 	bl	8011480 <udp_recv>
 800c73e:	4b3c      	ldr	r3, [pc, #240]	; (800c830 <E131Bridge::Run()+0x110>)
 800c740:	681d      	ldr	r5, [r3, #0]
 800c742:	60e5      	str	r5, [r4, #12]
 800c744:	2800      	cmp	r0, #0
 800c746:	d13b      	bne.n	800c7c0 <E131Bridge::Run()+0xa0>
 800c748:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800c74c:	b183      	cbz	r3, 800c770 <E131Bridge::Run()+0x50>
 800c74e:	f894 34f9 	ldrb.w	r3, [r4, #1273]	; 0x4f9
 800c752:	bb73      	cbnz	r3, 800c7b2 <E131Bridge::Run()+0x92>
 800c754:	6923      	ldr	r3, [r4, #16]
 800c756:	1aed      	subs	r5, r5, r3
 800c758:	f640 13c3 	movw	r3, #2499	; 0x9c3
 800c75c:	429d      	cmp	r5, r3
 800c75e:	d928      	bls.n	800c7b2 <E131Bridge::Run()+0x92>
 800c760:	6863      	ldr	r3, [r4, #4]
 800c762:	b9eb      	cbnz	r3, 800c7a0 <E131Bridge::Run()+0x80>
 800c764:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800c768:	f023 0302 	bic.w	r3, r3, #2
 800c76c:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800c770:	6963      	ldr	r3, [r4, #20]
 800c772:	b12b      	cbz	r3, 800c780 <E131Bridge::Run()+0x60>
 800c774:	4620      	mov	r0, r4
 800c776:	f000 f94f 	bl	800ca18 <E131Bridge::HandleDmxIn()>
 800c77a:	4620      	mov	r0, r4
 800c77c:	f000 f8ca 	bl	800c914 <E131Bridge::SendDiscoveryPacket()>
 800c780:	7a23      	ldrb	r3, [r4, #8]
 800c782:	b15b      	cbz	r3, 800c79c <E131Bridge::Run()+0x7c>
 800c784:	4b2b      	ldr	r3, [pc, #172]	; (800c834 <E131Bridge::Run()+0x114>)
 800c786:	6818      	ldr	r0, [r3, #0]
 800c788:	6843      	ldr	r3, [r0, #4]
 800c78a:	2b04      	cmp	r3, #4
 800c78c:	d006      	beq.n	800c79c <E131Bridge::Run()+0x7c>
 800c78e:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800c792:	2b00      	cmp	r3, #0
 800c794:	d049      	beq.n	800c82a <E131Bridge::Run()+0x10a>
 800c796:	2103      	movs	r1, #3
 800c798:	f007 fefc 	bl	8014594 <LedBlink::SetMode(ledblink::Mode)>
 800c79c:	b005      	add	sp, #20
 800c79e:	bd30      	pop	{r4, r5, pc}
 800c7a0:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d1dd      	bne.n	800c764 <E131Bridge::Run()+0x44>
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	4620      	mov	r0, r4
 800c7ac:	4611      	mov	r1, r2
 800c7ae:	f7ff fd55 	bl	800c25c <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800c7b2:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 800c7b6:	1a9b      	subs	r3, r3, r2
 800c7b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c7bc:	d3d8      	bcc.n	800c770 <E131Bridge::Run()+0x50>
 800c7be:	e7d1      	b.n	800c764 <E131Bridge::Run()+0x44>
 800c7c0:	4620      	mov	r0, r4
 800c7c2:	f7ff ff7b 	bl	800c6bc <E131Bridge::IsValidRoot()>
 800c7c6:	2800      	cmp	r0, #0
 800c7c8:	d0e8      	beq.n	800c79c <E131Bridge::Run()+0x7c>
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
 800c7d0:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800c7d4:	6125      	str	r5, [r4, #16]
 800c7d6:	b15b      	cbz	r3, 800c7f0 <E131Bridge::Run()+0xd0>
 800c7d8:	f894 34f7 	ldrb.w	r3, [r4, #1271]	; 0x4f7
 800c7dc:	b943      	cbnz	r3, 800c7f0 <E131Bridge::Run()+0xd0>
 800c7de:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	; 0x4fc
 800c7e2:	1aad      	subs	r5, r5, r2
 800c7e4:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800c7e8:	4295      	cmp	r5, r2
 800c7ea:	bf88      	it	hi
 800c7ec:	f884 34f6 	strbhi.w	r3, [r4, #1270]	; 0x4f6
 800c7f0:	6863      	ldr	r3, [r4, #4]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d0bc      	beq.n	800c770 <E131Bridge::Run()+0x50>
 800c7f6:	f8d4 308e 	ldr.w	r3, [r4, #142]	; 0x8e
 800c7fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c7fe:	ba1a      	rev	r2, r3
 800c800:	d108      	bne.n	800c814 <E131Bridge::Run()+0xf4>
 800c802:	4620      	mov	r0, r4
 800c804:	f7ff ff78 	bl	800c6f8 <E131Bridge::IsValidDataPacket()>
 800c808:	2800      	cmp	r0, #0
 800c80a:	d0b1      	beq.n	800c770 <E131Bridge::Run()+0x50>
 800c80c:	4620      	mov	r0, r4
 800c80e:	f7ff fdad 	bl	800c36c <E131Bridge::HandleDmx()>
 800c812:	e7ad      	b.n	800c770 <E131Bridge::Run()+0x50>
 800c814:	2a08      	cmp	r2, #8
 800c816:	d1ab      	bne.n	800c770 <E131Bridge::Run()+0x50>
 800c818:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800c81c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c820:	d1a6      	bne.n	800c770 <E131Bridge::Run()+0x50>
 800c822:	4620      	mov	r0, r4
 800c824:	f000 f972 	bl	800cb0c <E131Bridge::HandleSynchronization()>
 800c828:	e7a2      	b.n	800c770 <E131Bridge::Run()+0x50>
 800c82a:	2102      	movs	r1, #2
 800c82c:	e7b4      	b.n	800c798 <E131Bridge::Run()+0x78>
 800c82e:	bf00      	nop
 800c830:	2000a9dc 	ldrdcs	sl, [r0], -ip
 800c834:	2000a9c0 	andcs	sl, r0, r0, asr #19

0800c838 <E131Bridge::FillDiscoveryPacket()>:
 800c838:	2200      	movs	r2, #0
 800c83a:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800c83e:	b510      	push	{r4, lr}
 800c840:	333c      	adds	r3, #60	; 0x3c
 800c842:	005b      	lsls	r3, r3, #1
 800c844:	f8a0 3504 	strh.w	r3, [r0, #1284]	; 0x504
 800c848:	69c3      	ldr	r3, [r0, #28]
 800c84a:	f503 618f 	add.w	r1, r3, #1144	; 0x478
 800c84e:	428b      	cmp	r3, r1
 800c850:	d002      	beq.n	800c858 <E131Bridge::FillDiscoveryPacket()+0x20>
 800c852:	f803 2b01 	strb.w	r2, [r3], #1
 800c856:	e7fa      	b.n	800c84e <E131Bridge::FillDiscoveryPacket()+0x16>
 800c858:	69c3      	ldr	r3, [r0, #28]
 800c85a:	492d      	ldr	r1, [pc, #180]	; (800c910 <E131Bridge::FillDiscoveryPacket()+0xd8>)
 800c85c:	701a      	strb	r2, [r3, #0]
 800c85e:	2210      	movs	r2, #16
 800c860:	705a      	strb	r2, [r3, #1]
 800c862:	1d1a      	adds	r2, r3, #4
 800c864:	3310      	adds	r3, #16
 800c866:	4293      	cmp	r3, r2
 800c868:	d004      	beq.n	800c874 <E131Bridge::FillDiscoveryPacket()+0x3c>
 800c86a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c86e:	f802 4b01 	strb.w	r4, [r2], #1
 800c872:	e7f8      	b.n	800c866 <E131Bridge::FillDiscoveryPacket()+0x2e>
 800c874:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800c878:	69c3      	ldr	r3, [r0, #28]
 800c87a:	3234      	adds	r2, #52	; 0x34
 800c87c:	0052      	lsls	r2, r2, #1
 800c87e:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800c882:	ba52      	rev16	r2, r2
 800c884:	821a      	strh	r2, [r3, #16]
 800c886:	2200      	movs	r2, #0
 800c888:	749a      	strb	r2, [r3, #18]
 800c88a:	74da      	strb	r2, [r3, #19]
 800c88c:	751a      	strb	r2, [r3, #20]
 800c88e:	2208      	movs	r2, #8
 800c890:	f100 0124 	add.w	r1, r0, #36	; 0x24
 800c894:	755a      	strb	r2, [r3, #21]
 800c896:	f100 0434 	add.w	r4, r0, #52	; 0x34
 800c89a:	3316      	adds	r3, #22
 800c89c:	42a1      	cmp	r1, r4
 800c89e:	d004      	beq.n	800c8aa <E131Bridge::FillDiscoveryPacket()+0x72>
 800c8a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8a4:	f803 2b01 	strb.w	r2, [r3], #1
 800c8a8:	e7f8      	b.n	800c89c <E131Bridge::FillDiscoveryPacket()+0x64>
 800c8aa:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800c8ae:	69c3      	ldr	r3, [r0, #28]
 800c8b0:	3229      	adds	r2, #41	; 0x29
 800c8b2:	0052      	lsls	r2, r2, #1
 800c8b4:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800c8b8:	ba52      	rev16	r2, r2
 800c8ba:	84da      	strh	r2, [r3, #38]	; 0x26
 800c8bc:	2200      	movs	r2, #0
 800c8be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800c8c2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800c8c6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800c8ca:	2202      	movs	r2, #2
 800c8cc:	332c      	adds	r3, #44	; 0x2c
 800c8ce:	f803 2c01 	strb.w	r2, [r3, #-1]
 800c8d2:	f100 0474 	add.w	r4, r0, #116	; 0x74
 800c8d6:	42a1      	cmp	r1, r4
 800c8d8:	d004      	beq.n	800c8e4 <E131Bridge::FillDiscoveryPacket()+0xac>
 800c8da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8de:	f803 2b01 	strb.w	r2, [r3], #1
 800c8e2:	e7f8      	b.n	800c8d6 <E131Bridge::FillDiscoveryPacket()+0x9e>
 800c8e4:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800c8e8:	69c2      	ldr	r2, [r0, #28]
 800c8ea:	3304      	adds	r3, #4
 800c8ec:	005b      	lsls	r3, r3, #1
 800c8ee:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800c8f2:	ba5b      	rev16	r3, r3
 800c8f4:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	f882 3072 	strb.w	r3, [r2, #114]	; 0x72
 800c8fe:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
 800c902:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
 800c906:	2301      	movs	r3, #1
 800c908:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
 800c90c:	bd10      	pop	{r4, pc}
 800c90e:	bf00      	nop
 800c910:	08016fcc 	stmdaeq	r1, {r2, r3, r6, r7, r8, r9, sl, fp, sp, lr}

0800c914 <E131Bridge::SendDiscoveryPacket()>:
 800c914:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c916:	f242 710f 	movw	r1, #9999	; 0x270f
 800c91a:	68c2      	ldr	r2, [r0, #12]
 800c91c:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
 800c920:	4604      	mov	r4, r0
 800c922:	1ad3      	subs	r3, r2, r3
 800c924:	428b      	cmp	r3, r1
 800c926:	d924      	bls.n	800c972 <E131Bridge::SendDiscoveryPacket()+0x5e>
 800c928:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800c92c:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
 800c930:	b1ab      	cbz	r3, 800c95e <E131Bridge::SendDiscoveryPacket()+0x4a>
 800c932:	2500      	movs	r5, #0
 800c934:	462e      	mov	r6, r5
 800c936:	2300      	movs	r3, #0
 800c938:	4629      	mov	r1, r5
 800c93a:	4620      	mov	r0, r4
 800c93c:	f10d 020e 	add.w	r2, sp, #14
 800c940:	f7ff fbea 	bl	800c118 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800c944:	b140      	cbz	r0, 800c958 <E131Bridge::SendDiscoveryPacket()+0x44>
 800c946:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800c94a:	69e2      	ldr	r2, [r4, #28]
 800c94c:	f106 013c 	add.w	r1, r6, #60	; 0x3c
 800c950:	ba5b      	rev16	r3, r3
 800c952:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800c956:	3601      	adds	r6, #1
 800c958:	3501      	adds	r5, #1
 800c95a:	2d04      	cmp	r5, #4
 800c95c:	d1eb      	bne.n	800c936 <E131Bridge::SendDiscoveryPacket()+0x22>
 800c95e:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800c962:	f8b4 2504 	ldrh.w	r2, [r4, #1284]	; 0x504
 800c966:	9300      	str	r3, [sp, #0]
 800c968:	69e1      	ldr	r1, [r4, #28]
 800c96a:	6a23      	ldr	r3, [r4, #32]
 800c96c:	7820      	ldrb	r0, [r4, #0]
 800c96e:	f004 fde3 	bl	8011538 <udp_send>
 800c972:	b004      	add	sp, #16
 800c974:	bd70      	pop	{r4, r5, r6, pc}

0800c976 <memcpy.isra.0>:
 800c976:	3801      	subs	r0, #1
 800c978:	440a      	add	r2, r1
 800c97a:	4291      	cmp	r1, r2
 800c97c:	d004      	beq.n	800c988 <memcpy.isra.0+0x12>
 800c97e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c982:	f800 3f01 	strb.w	r3, [r0, #1]!
 800c986:	e7f8      	b.n	800c97a <memcpy.isra.0+0x4>
 800c988:	4770      	bx	lr
	...

0800c98c <E131Bridge::FillDataPacket()>:
 800c98c:	b570      	push	{r4, r5, r6, lr}
 800c98e:	2400      	movs	r4, #0
 800c990:	2610      	movs	r6, #16
 800c992:	4605      	mov	r5, r0
 800c994:	6980      	ldr	r0, [r0, #24]
 800c996:	220c      	movs	r2, #12
 800c998:	7046      	strb	r6, [r0, #1]
 800c99a:	7004      	strb	r4, [r0, #0]
 800c99c:	7084      	strb	r4, [r0, #2]
 800c99e:	70c4      	strb	r4, [r0, #3]
 800c9a0:	491c      	ldr	r1, [pc, #112]	; (800ca14 <E131Bridge::FillDataPacket()+0x88>)
 800c9a2:	3004      	adds	r0, #4
 800c9a4:	f7ff ffe7 	bl	800c976 <memcpy.isra.0>
 800c9a8:	2304      	movs	r3, #4
 800c9aa:	4632      	mov	r2, r6
 800c9ac:	2602      	movs	r6, #2
 800c9ae:	69a8      	ldr	r0, [r5, #24]
 800c9b0:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800c9b4:	7543      	strb	r3, [r0, #21]
 800c9b6:	7484      	strb	r4, [r0, #18]
 800c9b8:	74c4      	strb	r4, [r0, #19]
 800c9ba:	7504      	strb	r4, [r0, #20]
 800c9bc:	3016      	adds	r0, #22
 800c9be:	f7ff ffda 	bl	800c976 <memcpy.isra.0>
 800c9c2:	69a8      	ldr	r0, [r5, #24]
 800c9c4:	2240      	movs	r2, #64	; 0x40
 800c9c6:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
 800c9ca:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
 800c9ce:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
 800c9d2:	f880 602b 	strb.w	r6, [r0, #43]	; 0x2b
 800c9d6:	f105 0134 	add.w	r1, r5, #52	; 0x34
 800c9da:	302c      	adds	r0, #44	; 0x2c
 800c9dc:	f7ff ffcb 	bl	800c976 <memcpy.isra.0>
 800c9e0:	22a1      	movs	r2, #161	; 0xa1
 800c9e2:	69ab      	ldr	r3, [r5, #24]
 800c9e4:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
 800c9e8:	f883 406d 	strb.w	r4, [r3, #109]	; 0x6d
 800c9ec:	f883 406e 	strb.w	r4, [r3, #110]	; 0x6e
 800c9f0:	69ab      	ldr	r3, [r5, #24]
 800c9f2:	f883 6075 	strb.w	r6, [r3, #117]	; 0x75
 800c9f6:	69ab      	ldr	r3, [r5, #24]
 800c9f8:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800c9fc:	2201      	movs	r2, #1
 800c9fe:	69ab      	ldr	r3, [r5, #24]
 800ca00:	f883 4077 	strb.w	r4, [r3, #119]	; 0x77
 800ca04:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
 800ca08:	f883 4079 	strb.w	r4, [r3, #121]	; 0x79
 800ca0c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 800ca10:	bd70      	pop	{r4, r5, r6, pc}
 800ca12:	bf00      	nop
 800ca14:	08016fcc 	stmdaeq	r1, {r2, r3, r6, r7, r8, r9, sl, fp, sp, lr}

0800ca18 <E131Bridge::HandleDmxIn()>:
 800ca18:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800ca1c:	4604      	mov	r4, r0
 800ca1e:	4605      	mov	r5, r0
 800ca20:	2600      	movs	r6, #0
 800ca22:	4f39      	ldr	r7, [pc, #228]	; (800cb08 <E131Bridge::HandleDmxIn()+0xf0>)
 800ca24:	f895 3622 	ldrb.w	r3, [r5, #1570]	; 0x622
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d053      	beq.n	800cad4 <E131Bridge::HandleDmxIn()+0xbc>
 800ca2c:	6960      	ldr	r0, [r4, #20]
 800ca2e:	4631      	mov	r1, r6
 800ca30:	6803      	ldr	r3, [r0, #0]
 800ca32:	aa02      	add	r2, sp, #8
 800ca34:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800ca38:	ab03      	add	r3, sp, #12
 800ca3a:	47c0      	blx	r8
 800ca3c:	4601      	mov	r1, r0
 800ca3e:	2800      	cmp	r0, #0
 800ca40:	d050      	beq.n	800cae4 <E131Bridge::HandleDmxIn()+0xcc>
 800ca42:	9b02      	ldr	r3, [sp, #8]
 800ca44:	69a0      	ldr	r0, [r4, #24]
 800ca46:	b29b      	uxth	r3, r3
 800ca48:	f103 026d 	add.w	r2, r3, #109	; 0x6d
 800ca4c:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800ca50:	ba52      	rev16	r2, r2
 800ca52:	8202      	strh	r2, [r0, #16]
 800ca54:	f103 0257 	add.w	r2, r3, #87	; 0x57
 800ca58:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800ca5c:	ba52      	rev16	r2, r2
 800ca5e:	84c2      	strh	r2, [r0, #38]	; 0x26
 800ca60:	f895 2629 	ldrb.w	r2, [r5, #1577]	; 0x629
 800ca64:	330a      	adds	r3, #10
 800ca66:	f880 206c 	strb.w	r2, [r0, #108]	; 0x6c
 800ca6a:	f895 2628 	ldrb.w	r2, [r5, #1576]	; 0x628
 800ca6e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800ca72:	1c50      	adds	r0, r2, #1
 800ca74:	f885 0628 	strb.w	r0, [r5, #1576]	; 0x628
 800ca78:	69a0      	ldr	r0, [r4, #24]
 800ca7a:	ba5b      	rev16	r3, r3
 800ca7c:	f880 206f 	strb.w	r2, [r0, #111]	; 0x6f
 800ca80:	f8b5 2620 	ldrh.w	r2, [r5, #1568]	; 0x620
 800ca84:	69a0      	ldr	r0, [r4, #24]
 800ca86:	ba52      	rev16	r2, r2
 800ca88:	f8a0 2071 	strh.w	r2, [r0, #113]	; 0x71
 800ca8c:	f8a0 3073 	strh.w	r3, [r0, #115]	; 0x73
 800ca90:	9a02      	ldr	r2, [sp, #8]
 800ca92:	307d      	adds	r0, #125	; 0x7d
 800ca94:	f7ff ff6f 	bl	800c976 <memcpy.isra.0>
 800ca98:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800ca9c:	69a1      	ldr	r1, [r4, #24]
 800ca9e:	ba53      	rev16	r3, r2
 800caa0:	f8a1 307b 	strh.w	r3, [r1, #123]	; 0x7b
 800caa4:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800caa8:	327d      	adds	r2, #125	; 0x7d
 800caaa:	9300      	str	r3, [sp, #0]
 800caac:	f8d5 3624 	ldr.w	r3, [r5, #1572]	; 0x624
 800cab0:	b292      	uxth	r2, r2
 800cab2:	7820      	ldrb	r0, [r4, #0]
 800cab4:	f004 fd40 	bl	8011538 <udp_send>
 800cab8:	2301      	movs	r3, #1
 800caba:	683a      	ldr	r2, [r7, #0]
 800cabc:	40b3      	lsls	r3, r6
 800cabe:	ea33 0102 	bics.w	r1, r3, r2
 800cac2:	d007      	beq.n	800cad4 <E131Bridge::HandleDmxIn()+0xbc>
 800cac4:	4313      	orrs	r3, r2
 800cac6:	603b      	str	r3, [r7, #0]
 800cac8:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800cacc:	f043 0301 	orr.w	r3, r3, #1
 800cad0:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800cad4:	3601      	adds	r6, #1
 800cad6:	2e04      	cmp	r6, #4
 800cad8:	f105 050c 	add.w	r5, r5, #12
 800cadc:	d1a2      	bne.n	800ca24 <E131Bridge::HandleDmxIn()+0xc>
 800cade:	b004      	add	sp, #16
 800cae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cae4:	9b03      	ldr	r3, [sp, #12]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d1f4      	bne.n	800cad4 <E131Bridge::HandleDmxIn()+0xbc>
 800caea:	2301      	movs	r3, #1
 800caec:	fa03 f206 	lsl.w	r2, r3, r6
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	ea23 0302 	bic.w	r3, r3, r2
 800caf6:	603b      	str	r3, [r7, #0]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d1eb      	bne.n	800cad4 <E131Bridge::HandleDmxIn()+0xbc>
 800cafc:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800cb00:	f023 0301 	bic.w	r3, r3, #1
 800cb04:	e7e4      	b.n	800cad0 <E131Bridge::HandleDmxIn()+0xb8>
 800cb06:	bf00      	nop
 800cb08:	20001914 	andcs	r1, r0, r4, lsl r9

0800cb0c <E131Bridge::HandleSynchronization()>:
 800cb0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb10:	f8b0 30a9 	ldrh.w	r3, [r0, #169]	; 0xa9
 800cb14:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800cb18:	ba5b      	rev16	r3, r3
 800cb1a:	b29b      	uxth	r3, r3
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	4604      	mov	r4, r0
 800cb20:	d00a      	beq.n	800cb38 <E131Bridge::HandleSynchronization()+0x2c>
 800cb22:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d006      	beq.n	800cb38 <E131Bridge::HandleSynchronization()+0x2c>
 800cb2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb2e:	4b23      	ldr	r3, [pc, #140]	; (800cbbc <E131Bridge::HandleSynchronization()+0xb0>)
 800cb30:	2102      	movs	r1, #2
 800cb32:	6818      	ldr	r0, [r3, #0]
 800cb34:	f007 bd2e 	b.w	8014594 <LedBlink::SetMode(ledblink::Mode)>
 800cb38:	2500      	movs	r5, #0
 800cb3a:	4627      	mov	r7, r4
 800cb3c:	46a9      	mov	r9, r5
 800cb3e:	68e3      	ldr	r3, [r4, #12]
 800cb40:	4e1f      	ldr	r6, [pc, #124]	; (800cbc0 <E131Bridge::HandleSynchronization()+0xb4>)
 800cb42:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800cbc4 <E131Bridge::HandleSynchronization()+0xb8>
 800cb46:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
 800cb4a:	f897 3512 	ldrb.w	r3, [r7, #1298]	; 0x512
 800cb4e:	b323      	cbz	r3, 800cb9a <E131Bridge::HandleSynchronization()+0x8e>
 800cb50:	f8d8 3000 	ldr.w	r3, [r8]
 800cb54:	6860      	ldr	r0, [r4, #4]
 800cb56:	07da      	lsls	r2, r3, #31
 800cb58:	bf5c      	itt	pl
 800cb5a:	2301      	movpl	r3, #1
 800cb5c:	f8c8 3000 	strpl.w	r3, [r8]
 800cb60:	6803      	ldr	r3, [r0, #0]
 800cb62:	4629      	mov	r1, r5
 800cb64:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800cb68:	f506 6280 	add.w	r2, r6, #1024	; 0x400
 800cb6c:	f8d6 3600 	ldr.w	r3, [r6, #1536]	; 0x600
 800cb70:	47d0      	blx	sl
 800cb72:	f897 3552 	ldrb.w	r3, [r7, #1362]	; 0x552
 800cb76:	b93b      	cbnz	r3, 800cb88 <E131Bridge::HandleSynchronization()+0x7c>
 800cb78:	6860      	ldr	r0, [r4, #4]
 800cb7a:	4629      	mov	r1, r5
 800cb7c:	6803      	ldr	r3, [r0, #0]
 800cb7e:	689b      	ldr	r3, [r3, #8]
 800cb80:	4798      	blx	r3
 800cb82:	2301      	movs	r3, #1
 800cb84:	f887 3552 	strb.w	r3, [r7, #1362]	; 0x552
 800cb88:	f8d8 3000 	ldr.w	r3, [r8]
 800cb8c:	f8c6 9600 	str.w	r9, [r6, #1536]	; 0x600
 800cb90:	07db      	lsls	r3, r3, #31
 800cb92:	bf5c      	itt	pl
 800cb94:	2301      	movpl	r3, #1
 800cb96:	f8c8 3000 	strpl.w	r3, [r8]
 800cb9a:	3501      	adds	r5, #1
 800cb9c:	2d04      	cmp	r5, #4
 800cb9e:	f107 0744 	add.w	r7, r7, #68	; 0x44
 800cba2:	f206 6604 	addw	r6, r6, #1540	; 0x604
 800cba6:	d1d0      	bne.n	800cb4a <E131Bridge::HandleSynchronization()+0x3e>
 800cba8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800cbaa:	b120      	cbz	r0, 800cbb6 <E131Bridge::HandleSynchronization()+0xaa>
 800cbac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbb0:	6803      	ldr	r3, [r0, #0]
 800cbb2:	689b      	ldr	r3, [r3, #8]
 800cbb4:	4718      	bx	r3
 800cbb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbba:	bf00      	nop
 800cbbc:	2000a9c0 	andcs	sl, r0, r0, asr #19
 800cbc0:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800cbc4:	200000ec 	andcs	r0, r0, ip, ror #1

0800cbc8 <E131Bridge::Print()>:
 800cbc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbcc:	2500      	movs	r5, #0
 800cbce:	4604      	mov	r4, r0
 800cbd0:	b08c      	sub	sp, #48	; 0x30
 800cbd2:	a902      	add	r1, sp, #8
 800cbd4:	3024      	adds	r0, #36	; 0x24
 800cbd6:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800cbda:	f000 f8b3 	bl	800cd44 <uuid_unparse>
 800cbde:	482c      	ldr	r0, [pc, #176]	; (800cc90 <E131Bridge::Print()+0xc8>)
 800cbe0:	f7fc fd44 	bl	800966c <printf>
 800cbe4:	4b2b      	ldr	r3, [pc, #172]	; (800cc94 <E131Bridge::Print()+0xcc>)
 800cbe6:	482c      	ldr	r0, [pc, #176]	; (800cc98 <E131Bridge::Print()+0xd0>)
 800cbe8:	7819      	ldrb	r1, [r3, #0]
 800cbea:	785a      	ldrb	r2, [r3, #1]
 800cbec:	f7fc fd3e 	bl	800966c <printf>
 800cbf0:	482a      	ldr	r0, [pc, #168]	; (800cc9c <E131Bridge::Print()+0xd4>)
 800cbf2:	a902      	add	r1, sp, #8
 800cbf4:	f7fc fd3a 	bl	800966c <printf>
 800cbf8:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800cbfc:	b303      	cbz	r3, 800cc40 <E131Bridge::Print()+0x78>
 800cbfe:	4828      	ldr	r0, [pc, #160]	; (800cca0 <E131Bridge::Print()+0xd8>)
 800cc00:	f7fc fd34 	bl	800966c <printf>
 800cc04:	4e27      	ldr	r6, [pc, #156]	; (800cca4 <E131Bridge::Print()+0xdc>)
 800cc06:	4f28      	ldr	r7, [pc, #160]	; (800cca8 <E131Bridge::Print()+0xe0>)
 800cc08:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800ccac <E131Bridge::Print()+0xe4>
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	4629      	mov	r1, r5
 800cc10:	4620      	mov	r0, r4
 800cc12:	f10d 0206 	add.w	r2, sp, #6
 800cc16:	f7ff fa7f 	bl	800c118 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800cc1a:	b170      	cbz	r0, 800cc3a <E131Bridge::Print()+0x72>
 800cc1c:	2344      	movs	r3, #68	; 0x44
 800cc1e:	436b      	muls	r3, r5
 800cc20:	f204 524c 	addw	r2, r4, #1356	; 0x54c
 800cc24:	58d3      	ldr	r3, [r2, r3]
 800cc26:	4629      	mov	r1, r5
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	bf0c      	ite	eq
 800cc2c:	4633      	moveq	r3, r6
 800cc2e:	463b      	movne	r3, r7
 800cc30:	4640      	mov	r0, r8
 800cc32:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cc36:	f7fc fd19 	bl	800966c <printf>
 800cc3a:	3501      	adds	r5, #1
 800cc3c:	2d04      	cmp	r5, #4
 800cc3e:	d1e5      	bne.n	800cc0c <E131Bridge::Print()+0x44>
 800cc40:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800cc44:	b1d3      	cbz	r3, 800cc7c <E131Bridge::Print()+0xb4>
 800cc46:	481a      	ldr	r0, [pc, #104]	; (800ccb0 <E131Bridge::Print()+0xe8>)
 800cc48:	f7fc fd10 	bl	800966c <printf>
 800cc4c:	2500      	movs	r5, #0
 800cc4e:	4e19      	ldr	r6, [pc, #100]	; (800ccb4 <E131Bridge::Print()+0xec>)
 800cc50:	2300      	movs	r3, #0
 800cc52:	4629      	mov	r1, r5
 800cc54:	4620      	mov	r0, r4
 800cc56:	f10d 0206 	add.w	r2, sp, #6
 800cc5a:	f7ff fa5d 	bl	800c118 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800cc5e:	b150      	cbz	r0, 800cc76 <E131Bridge::Print()+0xae>
 800cc60:	230c      	movs	r3, #12
 800cc62:	436b      	muls	r3, r5
 800cc64:	f204 6229 	addw	r2, r4, #1577	; 0x629
 800cc68:	5cd3      	ldrb	r3, [r2, r3]
 800cc6a:	4629      	mov	r1, r5
 800cc6c:	4630      	mov	r0, r6
 800cc6e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cc72:	f7fc fcfb 	bl	800966c <printf>
 800cc76:	3501      	adds	r5, #1
 800cc78:	2d04      	cmp	r5, #4
 800cc7a:	d1e9      	bne.n	800cc50 <E131Bridge::Print()+0x88>
 800cc7c:	f894 34fb 	ldrb.w	r3, [r4, #1275]	; 0x4fb
 800cc80:	b113      	cbz	r3, 800cc88 <E131Bridge::Print()+0xc0>
 800cc82:	480d      	ldr	r0, [pc, #52]	; (800ccb8 <E131Bridge::Print()+0xf0>)
 800cc84:	f7fc fcf2 	bl	800966c <printf>
 800cc88:	b00c      	add	sp, #48	; 0x30
 800cc8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc8e:	bf00      	nop
 800cc90:	08016f49 	stmdaeq	r1, {r0, r3, r6, r8, r9, sl, fp, sp, lr}
 800cc94:	08016fd8 	stmdaeq	r1, {r3, r4, r6, r7, r8, r9, sl, fp, sp, lr}
 800cc98:	08016f51 	stmdaeq	r1, {r0, r4, r6, r8, r9, sl, fp, sp, lr}
 800cc9c:	08016f64 	stmdaeq	r1, {r2, r5, r6, r8, r9, sl, fp, sp, lr}
 800cca0:	08016ce1 	stmdaeq	r1, {r0, r5, r6, r7, sl, fp, sp, lr}
 800cca4:	08016c85 	stmdaeq	r1, {r0, r2, r7, sl, fp, sp, lr}
 800cca8:	08016c89 	stmdaeq	r1, {r0, r3, r7, sl, fp, sp, lr}
 800ccac:	08016f74 	stmdaeq	r1, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}
 800ccb0:	08016d19 	stmdaeq	r1, {r0, r3, r4, r8, sl, fp, sp, lr}
 800ccb4:	08016f93 	stmdaeq	r1, {r0, r1, r4, r7, r8, r9, sl, fp, sp, lr}
 800ccb8:	08016fb2 	stmdaeq	r1, {r1, r4, r5, r7, r8, r9, sl, fp, sp, lr}

0800ccbc <uuid_unparse_x>:
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	b530      	push	{r4, r5, lr}
 800ccc0:	4608      	mov	r0, r1
 800ccc2:	4611      	mov	r1, r2
 800ccc4:	681a      	ldr	r2, [r3, #0]
 800ccc6:	b08f      	sub	sp, #60	; 0x3c
 800ccc8:	ba12      	rev	r2, r2
 800ccca:	920a      	str	r2, [sp, #40]	; 0x28
 800cccc:	889a      	ldrh	r2, [r3, #4]
 800ccce:	891c      	ldrh	r4, [r3, #8]
 800ccd0:	ba52      	rev16	r2, r2
 800ccd2:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800ccd6:	88da      	ldrh	r2, [r3, #6]
 800ccd8:	ba64      	rev16	r4, r4
 800ccda:	ba52      	rev16	r2, r2
 800ccdc:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 800cce0:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
 800cce4:	f103 020a 	add.w	r2, r3, #10
 800cce8:	f10d 0432 	add.w	r4, sp, #50	; 0x32
 800ccec:	3310      	adds	r3, #16
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d122      	bne.n	800cd38 <uuid_unparse_x+0x7c>
 800ccf2:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800ccf6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800ccfa:	9208      	str	r2, [sp, #32]
 800ccfc:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 800cd00:	0a1b      	lsrs	r3, r3, #8
 800cd02:	9207      	str	r2, [sp, #28]
 800cd04:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800cd08:	9301      	str	r3, [sp, #4]
 800cd0a:	9206      	str	r2, [sp, #24]
 800cd0c:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800cd10:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800cd14:	9205      	str	r2, [sp, #20]
 800cd16:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800cd1a:	9300      	str	r3, [sp, #0]
 800cd1c:	9204      	str	r2, [sp, #16]
 800cd1e:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800cd22:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800cd26:	9203      	str	r2, [sp, #12]
 800cd28:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800cd2c:	9202      	str	r2, [sp, #8]
 800cd2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd30:	f7fc fcac 	bl	800968c <sprintf>
 800cd34:	b00f      	add	sp, #60	; 0x3c
 800cd36:	bd30      	pop	{r4, r5, pc}
 800cd38:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cd3c:	f804 5b01 	strb.w	r5, [r4], #1
 800cd40:	e7d5      	b.n	800ccee <uuid_unparse_x+0x32>
	...

0800cd44 <uuid_unparse>:
 800cd44:	4a01      	ldr	r2, [pc, #4]	; (800cd4c <uuid_unparse+0x8>)
 800cd46:	f7ff bfb9 	b.w	800ccbc <uuid_unparse_x>
 800cd4a:	bf00      	nop
 800cd4c:	08016fda 	stmdaeq	r1, {r1, r3, r4, r6, r7, r8, r9, sl, fp, sp, lr}

0800cd50 <WS28xxDmx::GetDmxStartAddress()>:
 800cd50:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
 800cd52:	4770      	bx	lr

0800cd54 <WS28xxDmx::GetDmxFootprint()>:
 800cd54:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 800cd56:	4770      	bx	lr

0800cd58 <WS28xxDmx::~WS28xxDmx()>:
 800cd58:	b538      	push	{r3, r4, r5, lr}
 800cd5a:	4b06      	ldr	r3, [pc, #24]	; (800cd74 <WS28xxDmx::~WS28xxDmx()+0x1c>)
 800cd5c:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800cd5e:	4604      	mov	r4, r0
 800cd60:	6003      	str	r3, [r0, #0]
 800cd62:	b12d      	cbz	r5, 800cd70 <WS28xxDmx::~WS28xxDmx()+0x18>
 800cd64:	4628      	mov	r0, r5
 800cd66:	f001 ff6b 	bl	800ec40 <WS28xx::~WS28xx()>
 800cd6a:	4628      	mov	r0, r5
 800cd6c:	f007 fcf6 	bl	801475c <operator delete(void*)>
 800cd70:	4620      	mov	r0, r4
 800cd72:	bd38      	pop	{r3, r4, r5, pc}
 800cd74:	08017014 	stmdaeq	r1, {r2, r4, ip, sp, lr}

0800cd78 <WS28xxDmx::~WS28xxDmx()>:
 800cd78:	b510      	push	{r4, lr}
 800cd7a:	4604      	mov	r4, r0
 800cd7c:	f7ff ffec 	bl	800cd58 <WS28xxDmx::~WS28xxDmx()>
 800cd80:	4620      	mov	r0, r4
 800cd82:	f007 fceb 	bl	801475c <operator delete(void*)>
 800cd86:	4620      	mov	r0, r4
 800cd88:	bd10      	pop	{r4, pc}

0800cd8a <WS28xxDmx::Blackout(bool)>:
 800cd8a:	b538      	push	{r3, r4, r5, lr}
 800cd8c:	4605      	mov	r5, r0
 800cd8e:	460c      	mov	r4, r1
 800cd90:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
 800cd94:	f008 fede 	bl	8015b54 <gd32_spi_dma_tx_is_active()>
 800cd98:	2800      	cmp	r0, #0
 800cd9a:	d1fb      	bne.n	800cd94 <WS28xxDmx::Blackout(bool)+0xa>
 800cd9c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800cd9e:	b11c      	cbz	r4, 800cda8 <WS28xxDmx::Blackout(bool)+0x1e>
 800cda0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cda4:	f001 bfc6 	b.w	800ed34 <WS28xx::Blackout()>
 800cda8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdac:	f001 bfa6 	b.w	800ecfc <WS28xx::Update()>

0800cdb0 <WS28xxDmx::Start(unsigned int)>:
 800cdb0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800cdb4:	b93b      	cbnz	r3, 800cdc6 <WS28xxDmx::Start(unsigned int)+0x16>
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800cdbc:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800cdbe:	b110      	cbz	r0, 800cdc6 <WS28xxDmx::Start(unsigned int)+0x16>
 800cdc0:	6803      	ldr	r3, [r0, #0]
 800cdc2:	689b      	ldr	r3, [r3, #8]
 800cdc4:	4718      	bx	r3
 800cdc6:	4770      	bx	lr

0800cdc8 <WS28xxDmx::SetDmxStartAddress(unsigned short)>:
 800cdc8:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
 800cdca:	b508      	push	{r3, lr}
 800cdcc:	428a      	cmp	r2, r1
 800cdce:	d101      	bne.n	800cdd4 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xc>
 800cdd0:	2001      	movs	r0, #1
 800cdd2:	bd08      	pop	{r3, pc}
 800cdd4:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 800cdd6:	440a      	add	r2, r1
 800cdd8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800cddc:	dc0b      	bgt.n	800cdf6 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x2e>
 800cdde:	1e4a      	subs	r2, r1, #1
 800cde0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800cde4:	d207      	bcs.n	800cdf6 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x2e>
 800cde6:	85c1      	strh	r1, [r0, #46]	; 0x2e
 800cde8:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800cdea:	2800      	cmp	r0, #0
 800cdec:	d0f0      	beq.n	800cdd0 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x8>
 800cdee:	6803      	ldr	r3, [r0, #0]
 800cdf0:	69db      	ldr	r3, [r3, #28]
 800cdf2:	4798      	blx	r3
 800cdf4:	e7ec      	b.n	800cdd0 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x8>
 800cdf6:	2000      	movs	r0, #0
 800cdf8:	e7eb      	b.n	800cdd2 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xa>

0800cdfa <WS28xxDmx::Stop(unsigned int)>:
 800cdfa:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800cdfe:	b510      	push	{r4, lr}
 800ce00:	4604      	mov	r4, r0
 800ce02:	b16b      	cbz	r3, 800ce20 <WS28xxDmx::Stop(unsigned int)+0x26>
 800ce04:	2300      	movs	r3, #0
 800ce06:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800ce0a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800ce0c:	b108      	cbz	r0, 800ce12 <WS28xxDmx::Stop(unsigned int)+0x18>
 800ce0e:	f001 ff91 	bl	800ed34 <WS28xx::Blackout()>
 800ce12:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800ce14:	b120      	cbz	r0, 800ce20 <WS28xxDmx::Stop(unsigned int)+0x26>
 800ce16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce1a:	6803      	ldr	r3, [r0, #0]
 800ce1c:	68db      	ldr	r3, [r3, #12]
 800ce1e:	4718      	bx	r3
 800ce20:	bd10      	pop	{r4, pc}

0800ce22 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 800ce22:	4603      	mov	r3, r0
 800ce24:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 800ce26:	4288      	cmp	r0, r1
 800ce28:	f04f 0000 	mov.w	r0, #0
 800ce2c:	d30f      	bcc.n	800ce4e <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x2c>
 800ce2e:	7090      	strb	r0, [r2, #2]
 800ce30:	6a1b      	ldr	r3, [r3, #32]
 800ce32:	fbb1 f0f3 	udiv	r0, r1, r3
 800ce36:	fb03 1110 	mls	r1, r3, r0, r1
 800ce3a:	2903      	cmp	r1, #3
 800ce3c:	d80e      	bhi.n	800ce5c <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x3a>
 800ce3e:	e8df f001 	tbb	[pc, r1]
 800ce42:	0d0a0702 	stceq	7, cr0, [sl, #-8]
 800ce46:	f240 2305 	movw	r3, #517	; 0x205
 800ce4a:	2001      	movs	r0, #1
 800ce4c:	8013      	strh	r3, [r2, #0]
 800ce4e:	4770      	bx	lr
 800ce50:	f240 2306 	movw	r3, #518	; 0x206
 800ce54:	e7f9      	b.n	800ce4a <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>
 800ce56:	f240 2307 	movw	r3, #519	; 0x207
 800ce5a:	e7f6      	b.n	800ce4a <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>
 800ce5c:	f240 2312 	movw	r3, #530	; 0x212
 800ce60:	e7f3      	b.n	800ce4a <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>

0800ce62 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)>:
 800ce62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce66:	b085      	sub	sp, #20
 800ce68:	4606      	mov	r6, r0
 800ce6a:	4690      	mov	r8, r2
 800ce6c:	4699      	mov	r9, r3
 800ce6e:	9103      	str	r1, [sp, #12]
 800ce70:	f008 fe70 	bl	8015b54 <gd32_spi_dma_tx_is_active()>
 800ce74:	2800      	cmp	r0, #0
 800ce76:	d170      	bne.n	800cf5a <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xf8>
 800ce78:	9b03      	ldr	r3, [sp, #12]
 800ce7a:	6972      	ldr	r2, [r6, #20]
 800ce7c:	f003 0103 	and.w	r1, r3, #3
 800ce80:	6a33      	ldr	r3, [r6, #32]
 800ce82:	2902      	cmp	r1, #2
 800ce84:	fbb9 f7f3 	udiv	r7, r9, r3
 800ce88:	d02b      	beq.n	800cee2 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x80>
 800ce8a:	2903      	cmp	r1, #3
 800ce8c:	d030      	beq.n	800cef0 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x8e>
 800ce8e:	2901      	cmp	r1, #1
 800ce90:	6875      	ldr	r5, [r6, #4]
 800ce92:	d027      	beq.n	800cee4 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x82>
 800ce94:	4297      	cmp	r7, r2
 800ce96:	bf28      	it	cs
 800ce98:	4617      	movcs	r7, r2
 800ce9a:	4295      	cmp	r5, r2
 800ce9c:	d92a      	bls.n	800cef4 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x92>
 800ce9e:	4605      	mov	r5, r0
 800cea0:	8df4      	ldrh	r4, [r6, #46]	; 0x2e
 800cea2:	3c01      	subs	r4, #1
 800cea4:	2b03      	cmp	r3, #3
 800cea6:	4444      	add	r4, r8
 800cea8:	d12c      	bne.n	800cf04 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xa2>
 800ceaa:	42af      	cmp	r7, r5
 800ceac:	d948      	bls.n	800cf40 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xde>
 800ceae:	eba4 0308 	sub.w	r3, r4, r8
 800ceb2:	4599      	cmp	r9, r3
 800ceb4:	d944      	bls.n	800cf40 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xde>
 800ceb6:	f04f 0a00 	mov.w	sl, #0
 800ceba:	69b3      	ldr	r3, [r6, #24]
 800cebc:	f894 f000 	pld	[r4]
 800cec0:	fb03 fb05 	mul.w	fp, r3, r5
 800cec4:	69b3      	ldr	r3, [r6, #24]
 800cec6:	4553      	cmp	r3, sl
 800cec8:	d917      	bls.n	800cefa <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x98>
 800ceca:	78a2      	ldrb	r2, [r4, #2]
 800cecc:	7863      	ldrb	r3, [r4, #1]
 800cece:	9200      	str	r2, [sp, #0]
 800ced0:	eb0b 010a 	add.w	r1, fp, sl
 800ced4:	7822      	ldrb	r2, [r4, #0]
 800ced6:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800ced8:	f001 f8d0 	bl	800e07c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 800cedc:	f10a 0a01 	add.w	sl, sl, #1
 800cee0:	e7f0      	b.n	800cec4 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x62>
 800cee2:	68b5      	ldr	r5, [r6, #8]
 800cee4:	442f      	add	r7, r5
 800cee6:	4297      	cmp	r7, r2
 800cee8:	bf28      	it	cs
 800ceea:	4617      	movcs	r7, r2
 800ceec:	4604      	mov	r4, r0
 800ceee:	e7d9      	b.n	800cea4 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x42>
 800cef0:	68f5      	ldr	r5, [r6, #12]
 800cef2:	e7f7      	b.n	800cee4 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x82>
 800cef4:	4605      	mov	r5, r0
 800cef6:	4604      	mov	r4, r0
 800cef8:	e7d4      	b.n	800cea4 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x42>
 800cefa:	3501      	adds	r5, #1
 800cefc:	3403      	adds	r4, #3
 800cefe:	e7d4      	b.n	800ceaa <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x48>
 800cf00:	3501      	adds	r5, #1
 800cf02:	3404      	adds	r4, #4
 800cf04:	42af      	cmp	r7, r5
 800cf06:	d91b      	bls.n	800cf40 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xde>
 800cf08:	eba4 0308 	sub.w	r3, r4, r8
 800cf0c:	4599      	cmp	r9, r3
 800cf0e:	d917      	bls.n	800cf40 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xde>
 800cf10:	f04f 0a00 	mov.w	sl, #0
 800cf14:	69b3      	ldr	r3, [r6, #24]
 800cf16:	f894 f000 	pld	[r4]
 800cf1a:	fb03 fb05 	mul.w	fp, r3, r5
 800cf1e:	69b3      	ldr	r3, [r6, #24]
 800cf20:	4553      	cmp	r3, sl
 800cf22:	d9ed      	bls.n	800cf00 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x9e>
 800cf24:	78e2      	ldrb	r2, [r4, #3]
 800cf26:	7863      	ldrb	r3, [r4, #1]
 800cf28:	9201      	str	r2, [sp, #4]
 800cf2a:	78a2      	ldrb	r2, [r4, #2]
 800cf2c:	eb0b 010a 	add.w	r1, fp, sl
 800cf30:	9200      	str	r2, [sp, #0]
 800cf32:	7822      	ldrb	r2, [r4, #0]
 800cf34:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800cf36:	f001 fd6d 	bl	800ea14 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 800cf3a:	f10a 0a01 	add.w	sl, sl, #1
 800cf3e:	e7ee      	b.n	800cf1e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xbc>
 800cf40:	6933      	ldr	r3, [r6, #16]
 800cf42:	9a03      	ldr	r2, [sp, #12]
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d108      	bne.n	800cf5a <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xf8>
 800cf48:	f896 3041 	ldrb.w	r3, [r6, #65]	; 0x41
 800cf4c:	b92b      	cbnz	r3, 800cf5a <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xf8>
 800cf4e:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800cf50:	b005      	add	sp, #20
 800cf52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf56:	f001 bed1 	b.w	800ecfc <WS28xx::Update()>
 800cf5a:	b005      	add	sp, #20
 800cf5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cf60 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>:
 800cf60:	22ff      	movs	r2, #255	; 0xff
 800cf62:	4b1d      	ldr	r3, [pc, #116]	; (800cfd8 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x78>)
 800cf64:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf66:	6003      	str	r3, [r0, #0]
 800cf68:	2300      	movs	r3, #0
 800cf6a:	460d      	mov	r5, r1
 800cf6c:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 800cf70:	2101      	movs	r1, #1
 800cf72:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 800cf76:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
 800cf7a:	8483      	strh	r3, [r0, #36]	; 0x24
 800cf7c:	6283      	str	r3, [r0, #40]	; 0x28
 800cf7e:	63c3      	str	r3, [r0, #60]	; 0x3c
 800cf80:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 800cf84:	4b15      	ldr	r3, [pc, #84]	; (800cfdc <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x7c>)
 800cf86:	85c1      	strh	r1, [r0, #46]	; 0x2e
 800cf88:	6018      	str	r0, [r3, #0]
 800cf8a:	f100 031c 	add.w	r3, r0, #28
 800cf8e:	8602      	strh	r2, [r0, #48]	; 0x30
 800cf90:	9301      	str	r3, [sp, #4]
 800cf92:	f100 0314 	add.w	r3, r0, #20
 800cf96:	4604      	mov	r4, r0
 800cf98:	f100 0220 	add.w	r2, r0, #32
 800cf9c:	9300      	str	r3, [sp, #0]
 800cf9e:	1d03      	adds	r3, r0, #4
 800cfa0:	4628      	mov	r0, r5
 800cfa2:	f000 fbdb 	bl	800d75c <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)>
 800cfa6:	201c      	movs	r0, #28
 800cfa8:	f007 fbdc 	bl	8014764 <operator new(unsigned int)>
 800cfac:	4606      	mov	r6, r0
 800cfae:	4629      	mov	r1, r5
 800cfb0:	f001 fe64 	bl	800ec7c <WS28xx::WS28xx(PixelConfiguration&)>
 800cfb4:	4630      	mov	r0, r6
 800cfb6:	6366      	str	r6, [r4, #52]	; 0x34
 800cfb8:	f001 febc 	bl	800ed34 <WS28xx::Blackout()>
 800cfbc:	69ab      	ldr	r3, [r5, #24]
 800cfbe:	6a22      	ldr	r2, [r4, #32]
 800cfc0:	61a3      	str	r3, [r4, #24]
 800cfc2:	8bab      	ldrh	r3, [r5, #28]
 800cfc4:	4628      	mov	r0, r5
 800cfc6:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800cfc8:	6963      	ldr	r3, [r4, #20]
 800cfca:	4353      	muls	r3, r2
 800cfcc:	8623      	strh	r3, [r4, #48]	; 0x30
 800cfce:	f000 fc1f 	bl	800d810 <PixelDmxConfiguration::Dump()>
 800cfd2:	4620      	mov	r0, r4
 800cfd4:	b002      	add	sp, #8
 800cfd6:	bd70      	pop	{r4, r5, r6, pc}
 800cfd8:	08017014 	stmdaeq	r1, {r2, r4, ip, sp, lr}
 800cfdc:	20001918 	andcs	r1, r0, r8, lsl r9

0800cfe0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 800cfe0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cfe2:	88c5      	ldrh	r5, [r0, #6]
 800cfe4:	8886      	ldrh	r6, [r0, #4]
 800cfe6:	42b5      	cmp	r5, r6
 800cfe8:	d216      	bcs.n	800d018 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 800cfea:	4604      	mov	r4, r0
 800cfec:	6800      	ldr	r0, [r0, #0]
 800cfee:	4428      	add	r0, r5
 800cff0:	1b75      	subs	r5, r6, r5
 800cff2:	7a26      	ldrb	r6, [r4, #8]
 800cff4:	b923      	cbnz	r3, 800d000 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 800cff6:	b926      	cbnz	r6, 800d002 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 800cff8:	9200      	str	r2, [sp, #0]
 800cffa:	460b      	mov	r3, r1
 800cffc:	4a09      	ldr	r2, [pc, #36]	; (800d024 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 800cffe:	e003      	b.n	800d008 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800d000:	b166      	cbz	r6, 800d01c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 800d002:	460b      	mov	r3, r1
 800d004:	9200      	str	r2, [sp, #0]
 800d006:	4a08      	ldr	r2, [pc, #32]	; (800d028 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 800d008:	4629      	mov	r1, r5
 800d00a:	f7fc fb57 	bl	80096bc <snprintf>
 800d00e:	4285      	cmp	r5, r0
 800d010:	bfa2      	ittt	ge
 800d012:	88e3      	ldrhge	r3, [r4, #6]
 800d014:	181b      	addge	r3, r3, r0
 800d016:	80e3      	strhge	r3, [r4, #6]
 800d018:	b002      	add	sp, #8
 800d01a:	bd70      	pop	{r4, r5, r6, pc}
 800d01c:	9200      	str	r2, [sp, #0]
 800d01e:	460b      	mov	r3, r1
 800d020:	4a02      	ldr	r2, [pc, #8]	; (800d02c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 800d022:	e7f1      	b.n	800d008 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800d024:	08016d5d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, sl, fp, sp, lr}
 800d028:	08016d54 	stmdaeq	r1, {r2, r4, r6, r8, sl, fp, sp, lr}
 800d02c:	08016d5e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}

0800d030 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>:
 800d030:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d032:	88c5      	ldrh	r5, [r0, #6]
 800d034:	8886      	ldrh	r6, [r0, #4]
 800d036:	42b5      	cmp	r5, r6
 800d038:	d216      	bcs.n	800d068 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x38>
 800d03a:	4604      	mov	r4, r0
 800d03c:	6800      	ldr	r0, [r0, #0]
 800d03e:	4428      	add	r0, r5
 800d040:	1b75      	subs	r5, r6, r5
 800d042:	7a26      	ldrb	r6, [r4, #8]
 800d044:	b923      	cbnz	r3, 800d050 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x20>
 800d046:	b926      	cbnz	r6, 800d052 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x22>
 800d048:	9200      	str	r2, [sp, #0]
 800d04a:	460b      	mov	r3, r1
 800d04c:	4a09      	ldr	r2, [pc, #36]	; (800d074 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x44>)
 800d04e:	e003      	b.n	800d058 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800d050:	b166      	cbz	r6, 800d06c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x3c>
 800d052:	460b      	mov	r3, r1
 800d054:	9200      	str	r2, [sp, #0]
 800d056:	4a08      	ldr	r2, [pc, #32]	; (800d078 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x48>)
 800d058:	4629      	mov	r1, r5
 800d05a:	f7fc fb2f 	bl	80096bc <snprintf>
 800d05e:	4285      	cmp	r5, r0
 800d060:	bfa2      	ittt	ge
 800d062:	88e3      	ldrhge	r3, [r4, #6]
 800d064:	181b      	addge	r3, r3, r0
 800d066:	80e3      	strhge	r3, [r4, #6]
 800d068:	b002      	add	sp, #8
 800d06a:	bd70      	pop	{r4, r5, r6, pc}
 800d06c:	9200      	str	r2, [sp, #0]
 800d06e:	460b      	mov	r3, r1
 800d070:	4a02      	ldr	r2, [pc, #8]	; (800d07c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x4c>)
 800d072:	e7f1      	b.n	800d058 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800d074:	08016d5d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, sl, fp, sp, lr}
 800d078:	08016d54 	stmdaeq	r1, {r2, r4, r6, r8, sl, fp, sp, lr}
 800d07c:	08016d5e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}

0800d080 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800d080:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d082:	88c5      	ldrh	r5, [r0, #6]
 800d084:	8886      	ldrh	r6, [r0, #4]
 800d086:	42b5      	cmp	r5, r6
 800d088:	d216      	bcs.n	800d0b8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800d08a:	4604      	mov	r4, r0
 800d08c:	6800      	ldr	r0, [r0, #0]
 800d08e:	4428      	add	r0, r5
 800d090:	1b75      	subs	r5, r6, r5
 800d092:	7a26      	ldrb	r6, [r4, #8]
 800d094:	b923      	cbnz	r3, 800d0a0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800d096:	b926      	cbnz	r6, 800d0a2 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800d098:	9200      	str	r2, [sp, #0]
 800d09a:	460b      	mov	r3, r1
 800d09c:	4a09      	ldr	r2, [pc, #36]	; (800d0c4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800d09e:	e003      	b.n	800d0a8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800d0a0:	b166      	cbz	r6, 800d0bc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800d0a2:	460b      	mov	r3, r1
 800d0a4:	9200      	str	r2, [sp, #0]
 800d0a6:	4a08      	ldr	r2, [pc, #32]	; (800d0c8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800d0a8:	4629      	mov	r1, r5
 800d0aa:	f7fc fb07 	bl	80096bc <snprintf>
 800d0ae:	4285      	cmp	r5, r0
 800d0b0:	bfa2      	ittt	ge
 800d0b2:	88e3      	ldrhge	r3, [r4, #6]
 800d0b4:	181b      	addge	r3, r3, r0
 800d0b6:	80e3      	strhge	r3, [r4, #6]
 800d0b8:	b002      	add	sp, #8
 800d0ba:	bd70      	pop	{r4, r5, r6, pc}
 800d0bc:	9200      	str	r2, [sp, #0]
 800d0be:	460b      	mov	r3, r1
 800d0c0:	4a02      	ldr	r2, [pc, #8]	; (800d0cc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800d0c2:	e7f1      	b.n	800d0a8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800d0c4:	08016d70 	stmdaeq	r1, {r4, r5, r6, r8, sl, fp, sp, lr}
 800d0c8:	08016d65 	stmdaeq	r1, {r0, r2, r5, r6, r8, sl, fp, sp, lr}
 800d0cc:	08016d71 	stmdaeq	r1, {r0, r4, r5, r6, r8, sl, fp, sp, lr}

0800d0d0 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>:
 800d0d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0d4:	4699      	mov	r9, r3
 800d0d6:	8885      	ldrh	r5, [r0, #4]
 800d0d8:	88c3      	ldrh	r3, [r0, #6]
 800d0da:	4604      	mov	r4, r0
 800d0dc:	42ab      	cmp	r3, r5
 800d0de:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800d0e2:	d227      	bcs.n	800d134 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x64>
 800d0e4:	6826      	ldr	r6, [r4, #0]
 800d0e6:	4610      	mov	r0, r2
 800d0e8:	460f      	mov	r7, r1
 800d0ea:	f894 a008 	ldrb.w	sl, [r4, #8]
 800d0ee:	441e      	add	r6, r3
 800d0f0:	1aed      	subs	r5, r5, r3
 800d0f2:	f7fb f9df 	bl	80084b4 <__aeabi_f2d>
 800d0f6:	f1b9 0f00 	cmp.w	r9, #0
 800d0fa:	d109      	bne.n	800d110 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x40>
 800d0fc:	f1ba 0f00 	cmp.w	sl, #0
 800d100:	d109      	bne.n	800d116 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x46>
 800d102:	463b      	mov	r3, r7
 800d104:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d108:	4a0f      	ldr	r2, [pc, #60]	; (800d148 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x78>)
 800d10a:	f8cd 8000 	str.w	r8, [sp]
 800d10e:	e008      	b.n	800d122 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x52>
 800d110:	f1ba 0f00 	cmp.w	sl, #0
 800d114:	d011      	beq.n	800d13a <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x6a>
 800d116:	463b      	mov	r3, r7
 800d118:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d11c:	4a0b      	ldr	r2, [pc, #44]	; (800d14c <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x7c>)
 800d11e:	f8cd 8000 	str.w	r8, [sp]
 800d122:	4629      	mov	r1, r5
 800d124:	4630      	mov	r0, r6
 800d126:	f7fc fac9 	bl	80096bc <snprintf>
 800d12a:	4285      	cmp	r5, r0
 800d12c:	bfa2      	ittt	ge
 800d12e:	88e3      	ldrhge	r3, [r4, #6]
 800d130:	181b      	addge	r3, r3, r0
 800d132:	80e3      	strhge	r3, [r4, #6]
 800d134:	b004      	add	sp, #16
 800d136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d13a:	463b      	mov	r3, r7
 800d13c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d140:	4a03      	ldr	r2, [pc, #12]	; (800d150 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x80>)
 800d142:	f8cd 8000 	str.w	r8, [sp]
 800d146:	e7ec      	b.n	800d122 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x52>
 800d148:	0801704b 	stmdaeq	r1, {r0, r1, r3, r6, ip, sp, lr}
 800d14c:	08017040 	stmdaeq	r1, {r6, ip, sp, lr}
 800d150:	0801704c 	stmdaeq	r1, {r2, r3, r6, ip, sp, lr}

0800d154 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>:
 800d154:	2300      	movs	r3, #0
 800d156:	4a1c      	ldr	r2, [pc, #112]	; (800d1c8 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x74>)
 800d158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d15a:	e9c0 3201 	strd	r3, r2, [r0, #4]
 800d15e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d162:	81c2      	strh	r2, [r0, #14]
 800d164:	223d      	movs	r2, #61	; 0x3d
 800d166:	8202      	strh	r2, [r0, #16]
 800d168:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d16c:	8242      	strh	r2, [r0, #18]
 800d16e:	2206      	movs	r2, #6
 800d170:	2601      	movs	r6, #1
 800d172:	75c2      	strb	r2, [r0, #23]
 800d174:	f647 7cf0 	movw	ip, #32752	; 0x7ff0
 800d178:	461a      	mov	r2, r3
 800d17a:	6001      	str	r1, [r0, #0]
 800d17c:	7303      	strb	r3, [r0, #12]
 800d17e:	7546      	strb	r6, [r0, #21]
 800d180:	7583      	strb	r3, [r0, #22]
 800d182:	8303      	strh	r3, [r0, #24]
 800d184:	f100 011a 	add.w	r1, r0, #26
 800d188:	f821 6b02 	strh.w	r6, [r1], #2
 800d18c:	b1aa      	cbz	r2, 800d1ba <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x66>
 800d18e:	f831 3c04 	ldrh.w	r3, [r1, #-4]
 800d192:	1d1c      	adds	r4, r3, #4
 800d194:	3307      	adds	r3, #7
 800d196:	b2a5      	uxth	r5, r4
 800d198:	b29f      	uxth	r7, r3
 800d19a:	f404 44fe 	and.w	r4, r4, #32512	; 0x7f00
 800d19e:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800d1a2:	429c      	cmp	r4, r3
 800d1a4:	d105      	bne.n	800d1b2 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x5e>
 800d1a6:	f005 03f0 	and.w	r3, r5, #240	; 0xf0
 800d1aa:	f007 04f0 	and.w	r4, r7, #240	; 0xf0
 800d1ae:	42a3      	cmp	r3, r4
 800d1b0:	d001      	beq.n	800d1b6 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x62>
 800d1b2:	ea07 050c 	and.w	r5, r7, ip
 800d1b6:	f821 5c02 	strh.w	r5, [r1, #-2]
 800d1ba:	3201      	adds	r2, #1
 800d1bc:	2a08      	cmp	r2, #8
 800d1be:	d1e3      	bne.n	800d188 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x34>
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
 800d1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1c8:	0100aa03 	tsteq	r0, r3, lsl #20

0800d1cc <WS28xxDmxParams::Load()>:
 800d1cc:	b508      	push	{r3, lr}
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	4601      	mov	r1, r0
 800d1d2:	6043      	str	r3, [r0, #4]
 800d1d4:	6800      	ldr	r0, [r0, #0]
 800d1d6:	b120      	cbz	r0, 800d1e2 <WS28xxDmxParams::Load()+0x16>
 800d1d8:	6803      	ldr	r3, [r0, #0]
 800d1da:	3104      	adds	r1, #4
 800d1dc:	68db      	ldr	r3, [r3, #12]
 800d1de:	4798      	blx	r3
 800d1e0:	2001      	movs	r0, #1
 800d1e2:	bd08      	pop	{r3, pc}

0800d1e4 <WS28xxDmxParams::Load(char const*, unsigned int)>:
 800d1e4:	6803      	ldr	r3, [r0, #0]
 800d1e6:	b1d3      	cbz	r3, 800d21e <WS28xxDmxParams::Load(char const*, unsigned int)+0x3a>
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d1ec:	460d      	mov	r5, r1
 800d1ee:	4616      	mov	r6, r2
 800d1f0:	4604      	mov	r4, r0
 800d1f2:	6043      	str	r3, [r0, #4]
 800d1f4:	4602      	mov	r2, r0
 800d1f6:	490a      	ldr	r1, [pc, #40]	; (800d220 <WS28xxDmxParams::Load(char const*, unsigned int)+0x3c>)
 800d1f8:	4668      	mov	r0, sp
 800d1fa:	f006 fccf 	bl	8013b9c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800d1fe:	4632      	mov	r2, r6
 800d200:	4629      	mov	r1, r5
 800d202:	4668      	mov	r0, sp
 800d204:	f006 fcce 	bl	8013ba4 <ReadConfigFile::Read(char const*, unsigned int)>
 800d208:	4621      	mov	r1, r4
 800d20a:	f851 0b04 	ldr.w	r0, [r1], #4
 800d20e:	6803      	ldr	r3, [r0, #0]
 800d210:	689b      	ldr	r3, [r3, #8]
 800d212:	4798      	blx	r3
 800d214:	4668      	mov	r0, sp
 800d216:	f006 fcc4 	bl	8013ba2 <ReadConfigFile::~ReadConfigFile()>
 800d21a:	b002      	add	sp, #8
 800d21c:	bd70      	pop	{r4, r5, r6, pc}
 800d21e:	4770      	bx	lr
 800d220:	0800d461 	stmdaeq	r0, {r0, r5, r6, sl, ip, lr, pc}

0800d224 <WS28xxDmxParams::callbackFunction(char const*)>:
 800d224:	b530      	push	{r4, r5, lr}
 800d226:	2308      	movs	r3, #8
 800d228:	460d      	mov	r5, r1
 800d22a:	b089      	sub	sp, #36	; 0x24
 800d22c:	4604      	mov	r4, r0
 800d22e:	9302      	str	r3, [sp, #8]
 800d230:	4628      	mov	r0, r5
 800d232:	497f      	ldr	r1, [pc, #508]	; (800d430 <WS28xxDmxParams::callbackFunction(char const*)+0x20c>)
 800d234:	446b      	add	r3, sp
 800d236:	aa04      	add	r2, sp, #16
 800d238:	f006 fce8 	bl	8013c0c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800d23c:	b9a0      	cbnz	r0, 800d268 <WS28xxDmxParams::callbackFunction(char const*)+0x44>
 800d23e:	9b02      	ldr	r3, [sp, #8]
 800d240:	3320      	adds	r3, #32
 800d242:	446b      	add	r3, sp
 800d244:	f803 0c10 	strb.w	r0, [r3, #-16]
 800d248:	a804      	add	r0, sp, #16
 800d24a:	f000 fe03 	bl	800de54 <PixelType::GetType(char const*)>
 800d24e:	280e      	cmp	r0, #14
 800d250:	bf08      	it	eq
 800d252:	2203      	moveq	r2, #3
 800d254:	6863      	ldr	r3, [r4, #4]
 800d256:	bf19      	ittee	ne
 800d258:	7220      	strbne	r0, [r4, #8]
 800d25a:	f043 0301 	orrne.w	r3, r3, #1
 800d25e:	7222      	strbeq	r2, [r4, #8]
 800d260:	f023 0301 	biceq.w	r3, r3, #1
 800d264:	6063      	str	r3, [r4, #4]
 800d266:	e033      	b.n	800d2d0 <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800d268:	4628      	mov	r0, r5
 800d26a:	4972      	ldr	r1, [pc, #456]	; (800d434 <WS28xxDmxParams::callbackFunction(char const*)+0x210>)
 800d26c:	f10d 0202 	add.w	r2, sp, #2
 800d270:	f006 fdb3 	bl	8013dda <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800d274:	b990      	cbnz	r0, 800d29c <WS28xxDmxParams::callbackFunction(char const*)+0x78>
 800d276:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d27a:	6863      	ldr	r3, [r4, #4]
 800d27c:	1e51      	subs	r1, r2, #1
 800d27e:	f5b1 7f2a 	cmp.w	r1, #680	; 0x2a8
 800d282:	bf2d      	iteet	cs
 800d284:	f06f 0255 	mvncs.w	r2, #85	; 0x55
 800d288:	f8a4 2009 	strhcc.w	r2, [r4, #9]
 800d28c:	f043 0302 	orrcc.w	r3, r3, #2
 800d290:	7262      	strbcs	r2, [r4, #9]
 800d292:	bf24      	itt	cs
 800d294:	72a0      	strbcs	r0, [r4, #10]
 800d296:	f023 0302 	biccs.w	r3, r3, #2
 800d29a:	e7e3      	b.n	800d264 <WS28xxDmxParams::callbackFunction(char const*)+0x40>
 800d29c:	2303      	movs	r3, #3
 800d29e:	4628      	mov	r0, r5
 800d2a0:	9302      	str	r3, [sp, #8]
 800d2a2:	4965      	ldr	r1, [pc, #404]	; (800d438 <WS28xxDmxParams::callbackFunction(char const*)+0x214>)
 800d2a4:	ab02      	add	r3, sp, #8
 800d2a6:	aa04      	add	r2, sp, #16
 800d2a8:	f006 fcb0 	bl	8013c0c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800d2ac:	b990      	cbnz	r0, 800d2d4 <WS28xxDmxParams::callbackFunction(char const*)+0xb0>
 800d2ae:	9b02      	ldr	r3, [sp, #8]
 800d2b0:	3320      	adds	r3, #32
 800d2b2:	446b      	add	r3, sp
 800d2b4:	f803 0c10 	strb.w	r0, [r3, #-16]
 800d2b8:	a804      	add	r0, sp, #16
 800d2ba:	f000 fdef 	bl	800de9c <PixelType::GetMap(char const*)>
 800d2be:	6863      	ldr	r3, [r4, #4]
 800d2c0:	2806      	cmp	r0, #6
 800d2c2:	bf14      	ite	ne
 800d2c4:	f443 7300 	orrne.w	r3, r3, #512	; 0x200
 800d2c8:	f423 7300 	biceq.w	r3, r3, #512	; 0x200
 800d2cc:	6063      	str	r3, [r4, #4]
 800d2ce:	75e0      	strb	r0, [r4, #23]
 800d2d0:	b009      	add	sp, #36	; 0x24
 800d2d2:	bd30      	pop	{r4, r5, pc}
 800d2d4:	4628      	mov	r0, r5
 800d2d6:	4959      	ldr	r1, [pc, #356]	; (800d43c <WS28xxDmxParams::callbackFunction(char const*)+0x218>)
 800d2d8:	aa01      	add	r2, sp, #4
 800d2da:	f006 fcb0 	bl	8013c3e <Sscan::Float(char const*, char const*, float&)>
 800d2de:	b960      	cbnz	r0, 800d2fa <WS28xxDmxParams::callbackFunction(char const*)+0xd6>
 800d2e0:	9801      	ldr	r0, [sp, #4]
 800d2e2:	f000 fe3d 	bl	800df60 <PixelType::ConvertTxH(float)>
 800d2e6:	6863      	ldr	r3, [r4, #4]
 800d2e8:	b120      	cbz	r0, 800d2f4 <WS28xxDmxParams::callbackFunction(char const*)+0xd0>
 800d2ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d2ee:	6063      	str	r3, [r4, #4]
 800d2f0:	7620      	strb	r0, [r4, #24]
 800d2f2:	e7ed      	b.n	800d2d0 <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800d2f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d2f8:	e7f9      	b.n	800d2ee <WS28xxDmxParams::callbackFunction(char const*)+0xca>
 800d2fa:	4628      	mov	r0, r5
 800d2fc:	4950      	ldr	r1, [pc, #320]	; (800d440 <WS28xxDmxParams::callbackFunction(char const*)+0x21c>)
 800d2fe:	aa01      	add	r2, sp, #4
 800d300:	f006 fc9d 	bl	8013c3e <Sscan::Float(char const*, char const*, float&)>
 800d304:	b960      	cbnz	r0, 800d320 <WS28xxDmxParams::callbackFunction(char const*)+0xfc>
 800d306:	9801      	ldr	r0, [sp, #4]
 800d308:	f000 fe2a 	bl	800df60 <PixelType::ConvertTxH(float)>
 800d30c:	6863      	ldr	r3, [r4, #4]
 800d30e:	b120      	cbz	r0, 800d31a <WS28xxDmxParams::callbackFunction(char const*)+0xf6>
 800d310:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d314:	6063      	str	r3, [r4, #4]
 800d316:	7660      	strb	r0, [r4, #25]
 800d318:	e7da      	b.n	800d2d0 <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800d31a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d31e:	e7f9      	b.n	800d314 <WS28xxDmxParams::callbackFunction(char const*)+0xf0>
 800d320:	4628      	mov	r0, r5
 800d322:	4948      	ldr	r1, [pc, #288]	; (800d444 <WS28xxDmxParams::callbackFunction(char const*)+0x220>)
 800d324:	f10d 0202 	add.w	r2, sp, #2
 800d328:	f006 fd57 	bl	8013dda <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800d32c:	b998      	cbnz	r0, 800d356 <WS28xxDmxParams::callbackFunction(char const*)+0x132>
 800d32e:	f240 25a6 	movw	r5, #678	; 0x2a6
 800d332:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800d336:	6863      	ldr	r3, [r4, #4]
 800d338:	1e8a      	subs	r2, r1, #2
 800d33a:	b292      	uxth	r2, r2
 800d33c:	42aa      	cmp	r2, r5
 800d33e:	bf81      	itttt	hi
 800d340:	2201      	movhi	r2, #1
 800d342:	75a0      	strbhi	r0, [r4, #22]
 800d344:	7562      	strbhi	r2, [r4, #21]
 800d346:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 800d34a:	bf9c      	itt	ls
 800d34c:	f8a4 1015 	strhls.w	r1, [r4, #21]
 800d350:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 800d354:	e786      	b.n	800d264 <WS28xxDmxParams::callbackFunction(char const*)+0x40>
 800d356:	4628      	mov	r0, r5
 800d358:	493b      	ldr	r1, [pc, #236]	; (800d448 <WS28xxDmxParams::callbackFunction(char const*)+0x224>)
 800d35a:	aa03      	add	r2, sp, #12
 800d35c:	f006 fd5b 	bl	8013e16 <Sscan::Uint32(char const*, char const*, unsigned int&)>
 800d360:	b960      	cbnz	r0, 800d37c <WS28xxDmxParams::callbackFunction(char const*)+0x158>
 800d362:	9a03      	ldr	r2, [sp, #12]
 800d364:	4939      	ldr	r1, [pc, #228]	; (800d44c <WS28xxDmxParams::callbackFunction(char const*)+0x228>)
 800d366:	6863      	ldr	r3, [r4, #4]
 800d368:	428a      	cmp	r2, r1
 800d36a:	bf14      	ite	ne
 800d36c:	f043 0310 	orrne.w	r3, r3, #16
 800d370:	f023 0310 	biceq.w	r3, r3, #16
 800d374:	6063      	str	r3, [r4, #4]
 800d376:	f8c4 200e 	str.w	r2, [r4, #14]
 800d37a:	e7a9      	b.n	800d2d0 <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800d37c:	4628      	mov	r0, r5
 800d37e:	4934      	ldr	r1, [pc, #208]	; (800d450 <WS28xxDmxParams::callbackFunction(char const*)+0x22c>)
 800d380:	f10d 0201 	add.w	r2, sp, #1
 800d384:	f006 fd70 	bl	8013e68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d388:	b988      	cbnz	r0, 800d3ae <WS28xxDmxParams::callbackFunction(char const*)+0x18a>
 800d38a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800d38e:	6863      	ldr	r3, [r4, #4]
 800d390:	1e4a      	subs	r2, r1, #1
 800d392:	b2d2      	uxtb	r2, r2
 800d394:	2afd      	cmp	r2, #253	; 0xfd
 800d396:	bf83      	ittte	hi
 800d398:	f023 0320 	bichi.w	r3, r3, #32
 800d39c:	6063      	strhi	r3, [r4, #4]
 800d39e:	23ff      	movhi	r3, #255	; 0xff
 800d3a0:	f043 0320 	orrls.w	r3, r3, #32
 800d3a4:	bf9a      	itte	ls
 800d3a6:	6063      	strls	r3, [r4, #4]
 800d3a8:	74a1      	strbls	r1, [r4, #18]
 800d3aa:	74a3      	strbhi	r3, [r4, #18]
 800d3ac:	e790      	b.n	800d2d0 <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800d3ae:	4628      	mov	r0, r5
 800d3b0:	4928      	ldr	r1, [pc, #160]	; (800d454 <WS28xxDmxParams::callbackFunction(char const*)+0x230>)
 800d3b2:	f10d 0202 	add.w	r2, sp, #2
 800d3b6:	f006 fd10 	bl	8013dda <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800d3ba:	b990      	cbnz	r0, 800d3e2 <WS28xxDmxParams::callbackFunction(char const*)+0x1be>
 800d3bc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d3c0:	6863      	ldr	r3, [r4, #4]
 800d3c2:	1e91      	subs	r1, r2, #2
 800d3c4:	f5b1 7fff 	cmp.w	r1, #510	; 0x1fe
 800d3c8:	bf83      	ittte	hi
 800d3ca:	2201      	movhi	r2, #1
 800d3cc:	72e2      	strbhi	r2, [r4, #11]
 800d3ce:	2200      	movhi	r2, #0
 800d3d0:	f8a4 200b 	strhls.w	r2, [r4, #11]
 800d3d4:	bf92      	itee	ls
 800d3d6:	f043 0304 	orrls.w	r3, r3, #4
 800d3da:	7322      	strbhi	r2, [r4, #12]
 800d3dc:	f023 0304 	bichi.w	r3, r3, #4
 800d3e0:	e740      	b.n	800d264 <WS28xxDmxParams::callbackFunction(char const*)+0x40>
 800d3e2:	4628      	mov	r0, r5
 800d3e4:	491c      	ldr	r1, [pc, #112]	; (800d458 <WS28xxDmxParams::callbackFunction(char const*)+0x234>)
 800d3e6:	f10d 0202 	add.w	r2, sp, #2
 800d3ea:	f006 fcf6 	bl	8013dda <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800d3ee:	b930      	cbnz	r0, 800d3fe <WS28xxDmxParams::callbackFunction(char const*)+0x1da>
 800d3f0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800d3f4:	8363      	strh	r3, [r4, #26]
 800d3f6:	6863      	ldr	r3, [r4, #4]
 800d3f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d3fc:	6063      	str	r3, [r4, #4]
 800d3fe:	4628      	mov	r0, r5
 800d400:	4916      	ldr	r1, [pc, #88]	; (800d45c <WS28xxDmxParams::callbackFunction(char const*)+0x238>)
 800d402:	f10d 0201 	add.w	r2, sp, #1
 800d406:	f006 fd2f 	bl	8013e68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d40a:	2800      	cmp	r0, #0
 800d40c:	f47f af60 	bne.w	800d2d0 <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800d410:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d414:	6863      	ldr	r3, [r4, #4]
 800d416:	1e51      	subs	r1, r2, #1
 800d418:	2904      	cmp	r1, #4
 800d41a:	bf99      	ittee	ls
 800d41c:	f884 202a 	strbls.w	r2, [r4, #42]	; 0x2a
 800d420:	f443 1380 	orrls.w	r3, r3, #1048576	; 0x100000
 800d424:	f884 002a 	strbhi.w	r0, [r4, #42]	; 0x2a
 800d428:	f423 1380 	bichi.w	r3, r3, #1048576	; 0x100000
 800d42c:	e71a      	b.n	800d264 <WS28xxDmxParams::callbackFunction(char const*)+0x40>
 800d42e:	bf00      	nop
 800d430:	0801886c 	stmdaeq	r1, {r2, r3, r5, r6, fp, pc}
 800d434:	08018875 	stmdaeq	r1, {r0, r2, r4, r5, r6, fp, pc}
 800d438:	0801885c 	stmdaeq	r1, {r2, r3, r4, r6, fp, pc}
 800d43c:	0801887f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, fp, pc}
 800d440:	08018887 	stmdaeq	r1, {r0, r1, r2, r7, fp, pc}
 800d444:	0801883a 	stmdaeq	r1, {r1, r3, r4, r5, fp, pc}
 800d448:	0801882b 	stmdaeq	r1, {r0, r1, r3, r5, fp, pc}
 800d44c:	003d0900 	eorseq	r0, sp, r0, lsl #18
 800d450:	0801884a 	stmdaeq	r1, {r1, r3, r6, fp, pc}
 800d454:	08018a0f 	stmdaeq	r1, {r0, r1, r2, r3, r9, fp, pc}
 800d458:	08018937 	stmdaeq	r1, {r0, r1, r2, r4, r5, r8, fp, pc}
 800d45c:	080188ea 	stmdaeq	r1, {r1, r3, r5, r6, r7, fp, pc}

0800d460 <WS28xxDmxParams::staticCallbackFunction(void*, char const*)>:
 800d460:	f7ff bee0 	b.w	800d224 <WS28xxDmxParams::callbackFunction(char const*)>

0800d464 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)>:
 800d464:	b570      	push	{r4, r5, r6, lr}
 800d466:	4604      	mov	r4, r0
 800d468:	4615      	mov	r5, r2
 800d46a:	461e      	mov	r6, r3
 800d46c:	b086      	sub	sp, #24
 800d46e:	3004      	adds	r0, #4
 800d470:	2900      	cmp	r1, #0
 800d472:	f000 808e 	beq.w	800d592 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x12e>
 800d476:	2227      	movs	r2, #39	; 0x27
 800d478:	f007 fa33 	bl	80148e2 <memmove>
 800d47c:	4633      	mov	r3, r6
 800d47e:	462a      	mov	r2, r5
 800d480:	4974      	ldr	r1, [pc, #464]	; (800d654 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1f0>)
 800d482:	a803      	add	r0, sp, #12
 800d484:	f006 faba 	bl	80139fc <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800d488:	7a20      	ldrb	r0, [r4, #8]
 800d48a:	f000 fcd7 	bl	800de3c <PixelType::GetType(pixel::Type)>
 800d48e:	6863      	ldr	r3, [r4, #4]
 800d490:	4602      	mov	r2, r0
 800d492:	4971      	ldr	r1, [pc, #452]	; (800d658 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1f4>)
 800d494:	f003 0301 	and.w	r3, r3, #1
 800d498:	a803      	add	r0, sp, #12
 800d49a:	f7ff fdf1 	bl	800d080 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800d49e:	6863      	ldr	r3, [r4, #4]
 800d4a0:	f8b4 2009 	ldrh.w	r2, [r4, #9]
 800d4a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d4a8:	496c      	ldr	r1, [pc, #432]	; (800d65c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1f8>)
 800d4aa:	a803      	add	r0, sp, #12
 800d4ac:	f7ff fdc0 	bl	800d030 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800d4b0:	496b      	ldr	r1, [pc, #428]	; (800d660 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1fc>)
 800d4b2:	a803      	add	r0, sp, #12
 800d4b4:	f006 fb28 	bl	8013b08 <PropertiesBuilder::AddComment(char const*)>
 800d4b8:	6863      	ldr	r3, [r4, #4]
 800d4ba:	059e      	lsls	r6, r3, #22
 800d4bc:	d403      	bmi.n	800d4c6 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x62>
 800d4be:	7a20      	ldrb	r0, [r4, #8]
 800d4c0:	f000 f9a7 	bl	800d812 <PixelConfiguration::GetRgbMapping(pixel::Type)>
 800d4c4:	75e0      	strb	r0, [r4, #23]
 800d4c6:	7de0      	ldrb	r0, [r4, #23]
 800d4c8:	f000 fd10 	bl	800deec <PixelType::GetMap(pixel::Map)>
 800d4cc:	6863      	ldr	r3, [r4, #4]
 800d4ce:	4602      	mov	r2, r0
 800d4d0:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800d4d4:	4963      	ldr	r1, [pc, #396]	; (800d664 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x200>)
 800d4d6:	a803      	add	r0, sp, #12
 800d4d8:	f7ff fdd2 	bl	800d080 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800d4dc:	6863      	ldr	r3, [r4, #4]
 800d4de:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d4e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d4e6:	d011      	beq.n	800d50c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0xa8>
 800d4e8:	f10d 020b 	add.w	r2, sp, #11
 800d4ec:	7a20      	ldrb	r0, [r4, #8]
 800d4ee:	f10d 010a 	add.w	r1, sp, #10
 800d4f2:	f000 f99d 	bl	800d830 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 800d4f6:	6863      	ldr	r3, [r4, #4]
 800d4f8:	055d      	lsls	r5, r3, #21
 800d4fa:	bf5c      	itt	pl
 800d4fc:	f89d 200a 	ldrbpl.w	r2, [sp, #10]
 800d500:	7622      	strbpl	r2, [r4, #24]
 800d502:	0518      	lsls	r0, r3, #20
 800d504:	bf5c      	itt	pl
 800d506:	f89d 300b 	ldrbpl.w	r3, [sp, #11]
 800d50a:	7663      	strbpl	r3, [r4, #25]
 800d50c:	4956      	ldr	r1, [pc, #344]	; (800d668 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x204>)
 800d50e:	a803      	add	r0, sp, #12
 800d510:	f006 fafa 	bl	8013b08 <PropertiesBuilder::AddComment(char const*)>
 800d514:	7e20      	ldrb	r0, [r4, #24]
 800d516:	f000 fcf5 	bl	800df04 <PixelType::ConvertTxH(unsigned char)>
 800d51a:	2502      	movs	r5, #2
 800d51c:	6863      	ldr	r3, [r4, #4]
 800d51e:	4602      	mov	r2, r0
 800d520:	4952      	ldr	r1, [pc, #328]	; (800d66c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x208>)
 800d522:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800d526:	9500      	str	r5, [sp, #0]
 800d528:	a803      	add	r0, sp, #12
 800d52a:	f7ff fdd1 	bl	800d0d0 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 800d52e:	7e60      	ldrb	r0, [r4, #25]
 800d530:	f000 fce8 	bl	800df04 <PixelType::ConvertTxH(unsigned char)>
 800d534:	6863      	ldr	r3, [r4, #4]
 800d536:	4602      	mov	r2, r0
 800d538:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 800d53c:	494c      	ldr	r1, [pc, #304]	; (800d670 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x20c>)
 800d53e:	9500      	str	r5, [sp, #0]
 800d540:	a803      	add	r0, sp, #12
 800d542:	f7ff fdc5 	bl	800d0d0 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 800d546:	494b      	ldr	r1, [pc, #300]	; (800d674 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x210>)
 800d548:	a803      	add	r0, sp, #12
 800d54a:	f006 fadd 	bl	8013b08 <PropertiesBuilder::AddComment(char const*)>
 800d54e:	6863      	ldr	r3, [r4, #4]
 800d550:	f8b4 2015 	ldrh.w	r2, [r4, #21]
 800d554:	4948      	ldr	r1, [pc, #288]	; (800d678 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x214>)
 800d556:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800d55a:	a803      	add	r0, sp, #12
 800d55c:	f7ff fd68 	bl	800d030 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800d560:	4946      	ldr	r1, [pc, #280]	; (800d67c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x218>)
 800d562:	a803      	add	r0, sp, #12
 800d564:	f006 fad0 	bl	8013b08 <PropertiesBuilder::AddComment(char const*)>
 800d568:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800d56c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800d570:	42a9      	cmp	r1, r5
 800d572:	d224      	bcs.n	800d5be <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x15a>
 800d574:	9803      	ldr	r0, [sp, #12]
 800d576:	1a6d      	subs	r5, r5, r1
 800d578:	4408      	add	r0, r1
 800d57a:	6861      	ldr	r1, [r4, #4]
 800d57c:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800d580:	06c9      	lsls	r1, r1, #27
 800d582:	f8d4 300e 	ldr.w	r3, [r4, #14]
 800d586:	d40b      	bmi.n	800d5a0 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x13c>
 800d588:	b962      	cbnz	r2, 800d5a4 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x140>
 800d58a:	9300      	str	r3, [sp, #0]
 800d58c:	4a3c      	ldr	r2, [pc, #240]	; (800d680 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x21c>)
 800d58e:	4b3d      	ldr	r3, [pc, #244]	; (800d684 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x220>)
 800d590:	e00b      	b.n	800d5aa <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x146>
 800d592:	6823      	ldr	r3, [r4, #0]
 800d594:	4601      	mov	r1, r0
 800d596:	681a      	ldr	r2, [r3, #0]
 800d598:	4618      	mov	r0, r3
 800d59a:	68d2      	ldr	r2, [r2, #12]
 800d59c:	4790      	blx	r2
 800d59e:	e76d      	b.n	800d47c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x18>
 800d5a0:	2a00      	cmp	r2, #0
 800d5a2:	d053      	beq.n	800d64c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1e8>
 800d5a4:	9300      	str	r3, [sp, #0]
 800d5a6:	4a38      	ldr	r2, [pc, #224]	; (800d688 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x224>)
 800d5a8:	4b36      	ldr	r3, [pc, #216]	; (800d684 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x220>)
 800d5aa:	4629      	mov	r1, r5
 800d5ac:	f7fc f886 	bl	80096bc <snprintf>
 800d5b0:	4285      	cmp	r5, r0
 800d5b2:	bfa2      	ittt	ge
 800d5b4:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800d5b8:	18c0      	addge	r0, r0, r3
 800d5ba:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800d5be:	4933      	ldr	r1, [pc, #204]	; (800d68c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x228>)
 800d5c0:	a803      	add	r0, sp, #12
 800d5c2:	f006 faa1 	bl	8013b08 <PropertiesBuilder::AddComment(char const*)>
 800d5c6:	6863      	ldr	r3, [r4, #4]
 800d5c8:	7ca2      	ldrb	r2, [r4, #18]
 800d5ca:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d5ce:	4930      	ldr	r1, [pc, #192]	; (800d690 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x22c>)
 800d5d0:	a803      	add	r0, sp, #12
 800d5d2:	f7ff fd05 	bl	800cfe0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800d5d6:	492f      	ldr	r1, [pc, #188]	; (800d694 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x230>)
 800d5d8:	a803      	add	r0, sp, #12
 800d5da:	f006 fa95 	bl	8013b08 <PropertiesBuilder::AddComment(char const*)>
 800d5de:	6863      	ldr	r3, [r4, #4]
 800d5e0:	f8b4 200b 	ldrh.w	r2, [r4, #11]
 800d5e4:	492c      	ldr	r1, [pc, #176]	; (800d698 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x234>)
 800d5e6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d5ea:	a803      	add	r0, sp, #12
 800d5ec:	f7ff fd20 	bl	800d030 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800d5f0:	6863      	ldr	r3, [r4, #4]
 800d5f2:	8b62      	ldrh	r2, [r4, #26]
 800d5f4:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800d5f8:	4928      	ldr	r1, [pc, #160]	; (800d69c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x238>)
 800d5fa:	a803      	add	r0, sp, #12
 800d5fc:	f7ff fd18 	bl	800d030 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800d600:	4927      	ldr	r1, [pc, #156]	; (800d6a0 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x23c>)
 800d602:	a803      	add	r0, sp, #12
 800d604:	f006 fa80 	bl	8013b08 <PropertiesBuilder::AddComment(char const*)>
 800d608:	6863      	ldr	r3, [r4, #4]
 800d60a:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800d60e:	f3c3 5300 	ubfx	r3, r3, #20, #1
 800d612:	4924      	ldr	r1, [pc, #144]	; (800d6a4 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x240>)
 800d614:	a803      	add	r0, sp, #12
 800d616:	f7ff fce3 	bl	800cfe0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800d61a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800d61e:	b17b      	cbz	r3, 800d640 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1dc>
 800d620:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800d624:	9b03      	ldr	r3, [sp, #12]
 800d626:	4413      	add	r3, r2
 800d628:	227d      	movs	r2, #125	; 0x7d
 800d62a:	f803 2c01 	strb.w	r2, [r3, #-1]
 800d62e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800d632:	9903      	ldr	r1, [sp, #12]
 800d634:	54ca      	strb	r2, [r1, r3]
 800d636:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800d63a:	3301      	adds	r3, #1
 800d63c:	f8ad 3012 	strh.w	r3, [sp, #18]
 800d640:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800d644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d646:	601a      	str	r2, [r3, #0]
 800d648:	b006      	add	sp, #24
 800d64a:	bd70      	pop	{r4, r5, r6, pc}
 800d64c:	9300      	str	r3, [sp, #0]
 800d64e:	4a16      	ldr	r2, [pc, #88]	; (800d6a8 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x244>)
 800d650:	4b0c      	ldr	r3, [pc, #48]	; (800d684 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x220>)
 800d652:	e7aa      	b.n	800d5aa <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x146>
 800d654:	0801888f 	stmdaeq	r1, {r0, r1, r2, r3, r7, fp, pc}
 800d658:	0801886c 	stmdaeq	r1, {r2, r3, r5, r6, fp, pc}
 800d65c:	08018875 	stmdaeq	r1, {r0, r2, r4, r5, r6, fp, pc}
 800d660:	08017055 	stmdaeq	r1, {r0, r2, r4, r6, ip, sp, lr}
 800d664:	0801885c 	stmdaeq	r1, {r2, r3, r4, r6, fp, pc}
 800d668:	08017069 	stmdaeq	r1, {r0, r3, r5, r6, ip, sp, lr}
 800d66c:	0801887f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, fp, pc}
 800d670:	08018887 	stmdaeq	r1, {r0, r1, r2, r7, fp, pc}
 800d674:	0801707f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, ip, sp, lr}
 800d678:	0801883a 	stmdaeq	r1, {r1, r3, r4, r5, fp, pc}
 800d67c:	08017088 	stmdaeq	r1, {r3, r7, ip, sp, lr}
 800d680:	08016d5d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, sl, fp, sp, lr}
 800d684:	0801882b 	stmdaeq	r1, {r0, r1, r3, r5, fp, pc}
 800d688:	08016d54 	stmdaeq	r1, {r2, r4, r6, r8, sl, fp, sp, lr}
 800d68c:	0801709a 	stmdaeq	r1, {r1, r3, r4, r7, ip, sp, lr}
 800d690:	0801884a 	stmdaeq	r1, {r1, r3, r6, fp, pc}
 800d694:	0801881d 	stmdaeq	r1, {r0, r2, r3, r4, fp, pc}
 800d698:	08018a0f 	stmdaeq	r1, {r0, r1, r2, r3, r9, fp, pc}
 800d69c:	08018937 	stmdaeq	r1, {r0, r1, r2, r4, r5, r8, fp, pc}
 800d6a0:	080170a8 	stmdaeq	r1, {r3, r5, r7, ip, sp, lr}
 800d6a4:	080188ea 	stmdaeq	r1, {r1, r3, r5, r6, r7, fp, pc}
 800d6a8:	08016d5e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}

0800d6ac <WS28xxDmxParams::Save(char*, unsigned int, unsigned int&)>:
 800d6ac:	b513      	push	{r0, r1, r4, lr}
 800d6ae:	6804      	ldr	r4, [r0, #0]
 800d6b0:	b914      	cbnz	r4, 800d6b8 <WS28xxDmxParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800d6b2:	601c      	str	r4, [r3, #0]
 800d6b4:	b002      	add	sp, #8
 800d6b6:	bd10      	pop	{r4, pc}
 800d6b8:	9300      	str	r3, [sp, #0]
 800d6ba:	4613      	mov	r3, r2
 800d6bc:	460a      	mov	r2, r1
 800d6be:	2100      	movs	r1, #0
 800d6c0:	f7ff fed0 	bl	800d464 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)>
 800d6c4:	e7f6      	b.n	800d6b4 <WS28xxDmxParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800d6c6 <WS28xxDmxParams::Set(PixelDmxConfiguration*)>:
 800d6c6:	6843      	ldr	r3, [r0, #4]
 800d6c8:	07da      	lsls	r2, r3, #31
 800d6ca:	bf44      	itt	mi
 800d6cc:	7a02      	ldrbmi	r2, [r0, #8]
 800d6ce:	600a      	strmi	r2, [r1, #0]
 800d6d0:	079a      	lsls	r2, r3, #30
 800d6d2:	d505      	bpl.n	800d6e0 <WS28xxDmxParams::Set(PixelDmxConfiguration*)+0x1a>
 800d6d4:	f8b0 2009 	ldrh.w	r2, [r0, #9]
 800d6d8:	2a00      	cmp	r2, #0
 800d6da:	bf08      	it	eq
 800d6dc:	22aa      	moveq	r2, #170	; 0xaa
 800d6de:	604a      	str	r2, [r1, #4]
 800d6e0:	059a      	lsls	r2, r3, #22
 800d6e2:	bf44      	itt	mi
 800d6e4:	7dc2      	ldrbmi	r2, [r0, #23]
 800d6e6:	608a      	strmi	r2, [r1, #8]
 800d6e8:	055a      	lsls	r2, r3, #21
 800d6ea:	bf44      	itt	mi
 800d6ec:	7e02      	ldrbmi	r2, [r0, #24]
 800d6ee:	740a      	strbmi	r2, [r1, #16]
 800d6f0:	051a      	lsls	r2, r3, #20
 800d6f2:	bf44      	itt	mi
 800d6f4:	7e42      	ldrbmi	r2, [r0, #25]
 800d6f6:	744a      	strbmi	r2, [r1, #17]
 800d6f8:	06da      	lsls	r2, r3, #27
 800d6fa:	bf44      	itt	mi
 800d6fc:	f8d0 200e 	ldrmi.w	r2, [r0, #14]
 800d700:	60ca      	strmi	r2, [r1, #12]
 800d702:	069a      	lsls	r2, r3, #26
 800d704:	bf44      	itt	mi
 800d706:	7c82      	ldrbmi	r2, [r0, #18]
 800d708:	748a      	strbmi	r2, [r1, #18]
 800d70a:	075a      	lsls	r2, r3, #29
 800d70c:	d50b      	bpl.n	800d726 <WS28xxDmxParams::Set(PixelDmxConfiguration*)+0x60>
 800d70e:	7ac2      	ldrb	r2, [r0, #11]
 800d710:	b510      	push	{r4, lr}
 800d712:	7b04      	ldrb	r4, [r0, #12]
 800d714:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800d718:	838a      	strh	r2, [r1, #28]
 800d71a:	05da      	lsls	r2, r3, #23
 800d71c:	bf44      	itt	mi
 800d71e:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 800d722:	618b      	strmi	r3, [r1, #24]
 800d724:	bd10      	pop	{r4, pc}
 800d726:	05db      	lsls	r3, r3, #23
 800d728:	bf44      	itt	mi
 800d72a:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 800d72e:	618b      	strmi	r3, [r1, #24]
 800d730:	4770      	bx	lr

0800d732 <WS28xxDmxParams::Dump()>:
 800d732:	4770      	bx	lr

0800d734 <WS28xxDmx::Print()>:
 800d734:	b510      	push	{r4, lr}
 800d736:	4604      	mov	r4, r0
 800d738:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800d73a:	f000 fc5d 	bl	800dff8 <WS28xx::Print()>
 800d73e:	4805      	ldr	r0, [pc, #20]	; (800d754 <WS28xxDmx::Print()+0x20>)
 800d740:	f7fb ff94 	bl	800966c <printf>
 800d744:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 800d748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d74c:	4802      	ldr	r0, [pc, #8]	; (800d758 <WS28xxDmx::Print()+0x24>)
 800d74e:	f7fb bf8d 	b.w	800966c <printf>
 800d752:	bf00      	nop
 800d754:	080170b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, ip, sp, lr}
 800d758:	080170cb 	stmdaeq	r1, {r0, r1, r3, r6, r7, ip, sp, lr}

0800d75c <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)>:
 800d75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d760:	460e      	mov	r6, r1
 800d762:	4611      	mov	r1, r2
 800d764:	4604      	mov	r4, r0
 800d766:	4690      	mov	r8, r2
 800d768:	461d      	mov	r5, r3
 800d76a:	9f06      	ldr	r7, [sp, #24]
 800d76c:	f000 f86e 	bl	800d84c <PixelConfiguration::Validate(unsigned int&)>
 800d770:	2e01      	cmp	r6, #1
 800d772:	d009      	beq.n	800d788 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x2c>
 800d774:	7ce2      	ldrb	r2, [r4, #19]
 800d776:	b93a      	cbnz	r2, 800d788 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x2c>
 800d778:	2e04      	cmp	r6, #4
 800d77a:	d141      	bne.n	800d800 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0xa4>
 800d77c:	2303      	movs	r3, #3
 800d77e:	6023      	str	r3, [r4, #0]
 800d780:	4641      	mov	r1, r8
 800d782:	4620      	mov	r0, r4
 800d784:	f000 f862 	bl	800d84c <PixelConfiguration::Validate(unsigned int&)>
 800d788:	6823      	ldr	r3, [r4, #0]
 800d78a:	2b07      	cmp	r3, #7
 800d78c:	bf0d      	iteet	eq
 800d78e:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800d792:	f44f 73aa 	movne.w	r3, #340	; 0x154
 800d796:	22aa      	movne	r2, #170	; 0xaa
 800d798:	2180      	moveq	r1, #128	; 0x80
 800d79a:	bf15      	itete	ne
 800d79c:	e9c5 2300 	strdne	r2, r3, [r5]
 800d7a0:	e9c5 1300 	strdeq	r1, r3, [r5]
 800d7a4:	f44f 73ff 	movne.w	r3, #510	; 0x1fe
 800d7a8:	f44f 73c0 	moveq.w	r3, #384	; 0x180
 800d7ac:	69a2      	ldr	r2, [r4, #24]
 800d7ae:	60ab      	str	r3, [r5, #8]
 800d7b0:	6863      	ldr	r3, [r4, #4]
 800d7b2:	b10a      	cbz	r2, 800d7b8 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x5c>
 800d7b4:	4293      	cmp	r3, r2
 800d7b6:	d200      	bcs.n	800d7ba <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x5e>
 800d7b8:	61a3      	str	r3, [r4, #24]
 800d7ba:	69a2      	ldr	r2, [r4, #24]
 800d7bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7c0:	603b      	str	r3, [r7, #0]
 800d7c2:	6963      	ldr	r3, [r4, #20]
 800d7c4:	42b3      	cmp	r3, r6
 800d7c6:	bf94      	ite	ls
 800d7c8:	6163      	strls	r3, [r4, #20]
 800d7ca:	6166      	strhi	r6, [r4, #20]
 800d7cc:	682b      	ldr	r3, [r5, #0]
 800d7ce:	2e01      	cmp	r6, #1
 800d7d0:	f103 0201 	add.w	r2, r3, #1
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7da:	9a07      	ldr	r2, [sp, #28]
 800d7dc:	f103 0101 	add.w	r1, r3, #1
 800d7e0:	6011      	str	r1, [r2, #0]
 800d7e2:	bf09      	itett	eq
 800d7e4:	682b      	ldreq	r3, [r5, #0]
 800d7e6:	6962      	ldrne	r2, [r4, #20]
 800d7e8:	1c5a      	addeq	r2, r3, #1
 800d7ea:	683b      	ldreq	r3, [r7, #0]
 800d7ec:	bf16      	itet	ne
 800d7ee:	f102 32ff 	addne.w	r2, r2, #4294967295	; 0xffffffff
 800d7f2:	fbb3 f3f2 	udiveq	r3, r3, r2
 800d7f6:	eb03 0382 	addne.w	r3, r3, r2, lsl #2
 800d7fa:	60eb      	str	r3, [r5, #12]
 800d7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d800:	6823      	ldr	r3, [r4, #0]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d0bc      	beq.n	800d780 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x24>
 800d806:	3b0b      	subs	r3, #11
 800d808:	2b01      	cmp	r3, #1
 800d80a:	bf88      	it	hi
 800d80c:	6022      	strhi	r2, [r4, #0]
 800d80e:	e7b7      	b.n	800d780 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x24>

0800d810 <PixelDmxConfiguration::Dump()>:
 800d810:	4770      	bx	lr

0800d812 <PixelConfiguration::GetRgbMapping(pixel::Type)>:
 800d812:	f020 0308 	bic.w	r3, r0, #8
 800d816:	2b01      	cmp	r3, #1
 800d818:	d006      	beq.n	800d828 <PixelConfiguration::GetRgbMapping(pixel::Type)+0x16>
 800d81a:	2808      	cmp	r0, #8
 800d81c:	d006      	beq.n	800d82c <PixelConfiguration::GetRgbMapping(pixel::Type)+0x1a>
 800d81e:	280a      	cmp	r0, #10
 800d820:	bf14      	ite	ne
 800d822:	2002      	movne	r0, #2
 800d824:	2005      	moveq	r0, #5
 800d826:	4770      	bx	lr
 800d828:	2000      	movs	r0, #0
 800d82a:	4770      	bx	lr
 800d82c:	2004      	movs	r0, #4
 800d82e:	4770      	bx	lr

0800d830 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>:
 800d830:	23c0      	movs	r3, #192	; 0xc0
 800d832:	2803      	cmp	r0, #3
 800d834:	700b      	strb	r3, [r1, #0]
 800d836:	d006      	beq.n	800d846 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x16>
 800d838:	3808      	subs	r0, #8
 800d83a:	2803      	cmp	r0, #3
 800d83c:	bf34      	ite	cc
 800d83e:	23fc      	movcc	r3, #252	; 0xfc
 800d840:	23f0      	movcs	r3, #240	; 0xf0
 800d842:	7013      	strb	r3, [r2, #0]
 800d844:	4770      	bx	lr
 800d846:	23f8      	movs	r3, #248	; 0xf8
 800d848:	e7fb      	b.n	800d842 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x12>
	...

0800d84c <PixelConfiguration::Validate(unsigned int&)>:
 800d84c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d84e:	e9d0 5300 	ldrd	r5, r3, [r0]
 800d852:	2d07      	cmp	r5, #7
 800d854:	4604      	mov	r4, r0
 800d856:	6882      	ldr	r2, [r0, #8]
 800d858:	d129      	bne.n	800d8ae <PixelConfiguration::Validate(unsigned int&)+0x62>
 800d85a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d85e:	bf28      	it	cs
 800d860:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800d864:	6043      	str	r3, [r0, #4]
 800d866:	2304      	movs	r3, #4
 800d868:	600b      	str	r3, [r1, #0]
 800d86a:	2301      	movs	r3, #1
 800d86c:	2a06      	cmp	r2, #6
 800d86e:	74e3      	strb	r3, [r4, #19]
 800d870:	d103      	bne.n	800d87a <PixelConfiguration::Validate(unsigned int&)+0x2e>
 800d872:	4628      	mov	r0, r5
 800d874:	f7ff ffcd 	bl	800d812 <PixelConfiguration::GetRgbMapping(pixel::Type)>
 800d878:	60a0      	str	r0, [r4, #8]
 800d87a:	7c63      	ldrb	r3, [r4, #17]
 800d87c:	7c22      	ldrb	r2, [r4, #16]
 800d87e:	4628      	mov	r0, r5
 800d880:	429a      	cmp	r2, r3
 800d882:	bf28      	it	cs
 800d884:	2300      	movcs	r3, #0
 800d886:	f10d 0207 	add.w	r2, sp, #7
 800d88a:	bf28      	it	cs
 800d88c:	8223      	strhcs	r3, [r4, #16]
 800d88e:	f10d 0106 	add.w	r1, sp, #6
 800d892:	f7ff ffcd 	bl	800d830 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 800d896:	7c23      	ldrb	r3, [r4, #16]
 800d898:	b913      	cbnz	r3, 800d8a0 <PixelConfiguration::Validate(unsigned int&)+0x54>
 800d89a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d89e:	7423      	strb	r3, [r4, #16]
 800d8a0:	7c63      	ldrb	r3, [r4, #17]
 800d8a2:	b913      	cbnz	r3, 800d8aa <PixelConfiguration::Validate(unsigned int&)+0x5e>
 800d8a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d8a8:	7463      	strb	r3, [r4, #17]
 800d8aa:	4b1a      	ldr	r3, [pc, #104]	; (800d914 <PixelConfiguration::Validate(unsigned int&)+0xc8>)
 800d8ac:	e020      	b.n	800d8f0 <PixelConfiguration::Validate(unsigned int&)+0xa4>
 800d8ae:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 800d8b2:	bf28      	it	cs
 800d8b4:	f44f 732a 	movcs.w	r3, #680	; 0x2a8
 800d8b8:	6043      	str	r3, [r0, #4]
 800d8ba:	2303      	movs	r3, #3
 800d8bc:	600b      	str	r3, [r1, #0]
 800d8be:	f1a5 030b 	sub.w	r3, r5, #11
 800d8c2:	2b01      	cmp	r3, #1
 800d8c4:	d806      	bhi.n	800d8d4 <PixelConfiguration::Validate(unsigned int&)+0x88>
 800d8c6:	7c83      	ldrb	r3, [r0, #18]
 800d8c8:	2b1f      	cmp	r3, #31
 800d8ca:	d81d      	bhi.n	800d908 <PixelConfiguration::Validate(unsigned int&)+0xbc>
 800d8cc:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800d8d0:	74a3      	strb	r3, [r4, #18]
 800d8d2:	e000      	b.n	800d8d6 <PixelConfiguration::Validate(unsigned int&)+0x8a>
 800d8d4:	b9d5      	cbnz	r5, 800d90c <PixelConfiguration::Validate(unsigned int&)+0xc0>
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800d8dc:	2a06      	cmp	r2, #6
 800d8de:	bf08      	it	eq
 800d8e0:	60a3      	streq	r3, [r4, #8]
 800d8e2:	2d0d      	cmp	r5, #13
 800d8e4:	74e3      	strb	r3, [r4, #19]
 800d8e6:	8221      	strh	r1, [r4, #16]
 800d8e8:	68e3      	ldr	r3, [r4, #12]
 800d8ea:	d109      	bne.n	800d900 <PixelConfiguration::Validate(unsigned int&)+0xb4>
 800d8ec:	b913      	cbnz	r3, 800d8f4 <PixelConfiguration::Validate(unsigned int&)+0xa8>
 800d8ee:	4b0a      	ldr	r3, [pc, #40]	; (800d918 <PixelConfiguration::Validate(unsigned int&)+0xcc>)
 800d8f0:	60e3      	str	r3, [r4, #12]
 800d8f2:	e003      	b.n	800d8fc <PixelConfiguration::Validate(unsigned int&)+0xb0>
 800d8f4:	4a09      	ldr	r2, [pc, #36]	; (800d91c <PixelConfiguration::Validate(unsigned int&)+0xd0>)
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	d900      	bls.n	800d8fc <PixelConfiguration::Validate(unsigned int&)+0xb0>
 800d8fa:	60e2      	str	r2, [r4, #12]
 800d8fc:	b003      	add	sp, #12
 800d8fe:	bd30      	pop	{r4, r5, pc}
 800d900:	2b00      	cmp	r3, #0
 800d902:	d0f4      	beq.n	800d8ee <PixelConfiguration::Validate(unsigned int&)+0xa2>
 800d904:	4a06      	ldr	r2, [pc, #24]	; (800d920 <PixelConfiguration::Validate(unsigned int&)+0xd4>)
 800d906:	e7f6      	b.n	800d8f6 <PixelConfiguration::Validate(unsigned int&)+0xaa>
 800d908:	23ff      	movs	r3, #255	; 0xff
 800d90a:	e7e1      	b.n	800d8d0 <PixelConfiguration::Validate(unsigned int&)+0x84>
 800d90c:	2d0d      	cmp	r5, #13
 800d90e:	d0e2      	beq.n	800d8d6 <PixelConfiguration::Validate(unsigned int&)+0x8a>
 800d910:	e7ab      	b.n	800d86a <PixelConfiguration::Validate(unsigned int&)+0x1e>
 800d912:	bf00      	nop
 800d914:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 800d918:	003d0900 	eorseq	r0, sp, r0, lsl #18
 800d91c:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 800d920:	017d7840 	cmneq	sp, r0, asr #16

0800d924 <PixelConfiguration::Dump()>:
 800d924:	4770      	bx	lr
	...

0800d928 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>:
 800d928:	b507      	push	{r0, r1, r2, lr}
 800d92a:	b2cb      	uxtb	r3, r1
 800d92c:	9300      	str	r3, [sp, #0]
 800d92e:	f3c1 4207 	ubfx	r2, r1, #16, #8
 800d932:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800d936:	4601      	mov	r1, r0
 800d938:	4803      	ldr	r0, [pc, #12]	; (800d948 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]+0x20>)
 800d93a:	6800      	ldr	r0, [r0, #0]
 800d93c:	f000 fb9e 	bl	800e07c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 800d940:	b003      	add	sp, #12
 800d942:	f85d fb04 	ldr.w	pc, [sp], #4
 800d946:	bf00      	nop
 800d948:	20001948 	andcs	r1, r0, r8, asr #18

0800d94c <PixelPatterns::Clear(unsigned int) [clone .isra.0]>:
 800d94c:	b538      	push	{r3, r4, r5, lr}
 800d94e:	2400      	movs	r4, #0
 800d950:	4d05      	ldr	r5, [pc, #20]	; (800d968 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x1c>)
 800d952:	682b      	ldr	r3, [r5, #0]
 800d954:	42a3      	cmp	r3, r4
 800d956:	d905      	bls.n	800d964 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x18>
 800d958:	4620      	mov	r0, r4
 800d95a:	2100      	movs	r1, #0
 800d95c:	f7ff ffe4 	bl	800d928 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800d960:	3401      	adds	r4, #1
 800d962:	e7f6      	b.n	800d952 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x6>
 800d964:	bd38      	pop	{r3, r4, r5, pc}
 800d966:	bf00      	nop
 800d968:	20001944 	andcs	r1, r0, r4, asr #18

0800d96c <PixelPatterns::PixelPatterns(unsigned int)>:
 800d96c:	2901      	cmp	r1, #1
 800d96e:	bf28      	it	cs
 800d970:	2101      	movcs	r1, #1
 800d972:	4b08      	ldr	r3, [pc, #32]	; (800d994 <PixelPatterns::PixelPatterns(unsigned int)+0x28>)
 800d974:	4a08      	ldr	r2, [pc, #32]	; (800d998 <PixelPatterns::PixelPatterns(unsigned int)+0x2c>)
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	6013      	str	r3, [r2, #0]
 800d97a:	4a08      	ldr	r2, [pc, #32]	; (800d99c <PixelPatterns::PixelPatterns(unsigned int)+0x30>)
 800d97c:	6011      	str	r1, [r2, #0]
 800d97e:	685a      	ldr	r2, [r3, #4]
 800d980:	4b07      	ldr	r3, [pc, #28]	; (800d9a0 <PixelPatterns::PixelPatterns(unsigned int)+0x34>)
 800d982:	601a      	str	r2, [r3, #0]
 800d984:	2200      	movs	r2, #0
 800d986:	4b07      	ldr	r3, [pc, #28]	; (800d9a4 <PixelPatterns::PixelPatterns(unsigned int)+0x38>)
 800d988:	6819      	ldr	r1, [r3, #0]
 800d98a:	4b07      	ldr	r3, [pc, #28]	; (800d9a8 <PixelPatterns::PixelPatterns(unsigned int)+0x3c>)
 800d98c:	61da      	str	r2, [r3, #28]
 800d98e:	6019      	str	r1, [r3, #0]
 800d990:	619a      	str	r2, [r3, #24]
 800d992:	4770      	bx	lr
 800d994:	20001958 	andcs	r1, r0, r8, asr r9
 800d998:	20001948 	andcs	r1, r0, r8, asr #18
 800d99c:	2000193c 	andcs	r1, r0, ip, lsr r9
 800d9a0:	20001944 	andcs	r1, r0, r4, asr #18
 800d9a4:	2000a9dc 	ldrdcs	sl, [r0], -ip
 800d9a8:	2000191c 	andcs	r1, r0, ip, lsl r9

0800d9ac <PixelPatterns::GetName(pixelpatterns::Pattern)>:
 800d9ac:	2805      	cmp	r0, #5
 800d9ae:	bfdd      	ittte	le
 800d9b0:	220e      	movle	r2, #14
 800d9b2:	4b02      	ldrle	r3, [pc, #8]	; (800d9bc <PixelPatterns::GetName(pixelpatterns::Pattern)+0x10>)
 800d9b4:	fb02 3000 	mlale	r0, r2, r0, r3
 800d9b8:	4801      	ldrgt	r0, [pc, #4]	; (800d9c0 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x14>)
 800d9ba:	4770      	bx	lr
 800d9bc:	080170f7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, ip, sp, lr}
 800d9c0:	080170ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, ip, sp, lr}

0800d9c4 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>:
 800d9c4:	b570      	push	{r4, r5, r6, lr}
 800d9c6:	460e      	mov	r6, r1
 800d9c8:	4615      	mov	r5, r2
 800d9ca:	461c      	mov	r4, r3
 800d9cc:	f7ff ffbe 	bl	800d94c <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	4905      	ldr	r1, [pc, #20]	; (800d9e8 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)+0x24>)
 800d9d4:	22ff      	movs	r2, #255	; 0xff
 800d9d6:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800d9da:	61cb      	str	r3, [r1, #28]
 800d9dc:	2300      	movs	r3, #0
 800d9de:	604d      	str	r5, [r1, #4]
 800d9e0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800d9e4:	618c      	str	r4, [r1, #24]
 800d9e6:	bd70      	pop	{r4, r5, r6, pc}
 800d9e8:	2000191c 	andcs	r1, r0, ip, lsl r9

0800d9ec <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 800d9ec:	b570      	push	{r4, r5, r6, lr}
 800d9ee:	460e      	mov	r6, r1
 800d9f0:	461c      	mov	r4, r3
 800d9f2:	4615      	mov	r5, r2
 800d9f4:	f7ff ffaa 	bl	800d94c <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800d9f8:	2302      	movs	r3, #2
 800d9fa:	4908      	ldr	r1, [pc, #32]	; (800da1c <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 800d9fc:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800da00:	61cb      	str	r3, [r1, #28]
 800da02:	9b04      	ldr	r3, [sp, #16]
 800da04:	e9c1 5402 	strd	r5, r4, [r1, #8]
 800da08:	604b      	str	r3, [r1, #4]
 800da0a:	4b05      	ldr	r3, [pc, #20]	; (800da20 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x34>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	610b      	str	r3, [r1, #16]
 800da10:	2300      	movs	r3, #0
 800da12:	614b      	str	r3, [r1, #20]
 800da14:	9b05      	ldr	r3, [sp, #20]
 800da16:	618b      	str	r3, [r1, #24]
 800da18:	bd70      	pop	{r4, r5, r6, pc}
 800da1a:	bf00      	nop
 800da1c:	2000191c 	andcs	r1, r0, ip, lsl r9
 800da20:	20001944 	andcs	r1, r0, r4, asr #18

0800da24 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 800da24:	b570      	push	{r4, r5, r6, lr}
 800da26:	460e      	mov	r6, r1
 800da28:	461d      	mov	r5, r3
 800da2a:	4614      	mov	r4, r2
 800da2c:	f7ff ff8e 	bl	800d94c <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800da30:	2303      	movs	r3, #3
 800da32:	4907      	ldr	r1, [pc, #28]	; (800da50 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 800da34:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800da38:	61cb      	str	r3, [r1, #28]
 800da3a:	4b06      	ldr	r3, [pc, #24]	; (800da54 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 800da3c:	604d      	str	r5, [r1, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	608c      	str	r4, [r1, #8]
 800da42:	610b      	str	r3, [r1, #16]
 800da44:	2300      	movs	r3, #0
 800da46:	614b      	str	r3, [r1, #20]
 800da48:	9b04      	ldr	r3, [sp, #16]
 800da4a:	618b      	str	r3, [r1, #24]
 800da4c:	bd70      	pop	{r4, r5, r6, pc}
 800da4e:	bf00      	nop
 800da50:	2000191c 	andcs	r1, r0, ip, lsl r9
 800da54:	20001944 	andcs	r1, r0, r4, asr #18

0800da58 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>:
 800da58:	b570      	push	{r4, r5, r6, lr}
 800da5a:	460e      	mov	r6, r1
 800da5c:	461d      	mov	r5, r3
 800da5e:	4614      	mov	r4, r2
 800da60:	f7ff ff74 	bl	800d94c <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800da64:	2304      	movs	r3, #4
 800da66:	4912      	ldr	r1, [pc, #72]	; (800dab0 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x58>)
 800da68:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800da6c:	604d      	str	r5, [r1, #4]
 800da6e:	4d11      	ldr	r5, [pc, #68]	; (800dab4 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x5c>)
 800da70:	61cb      	str	r3, [r1, #28]
 800da72:	6828      	ldr	r0, [r5, #0]
 800da74:	608c      	str	r4, [r1, #8]
 800da76:	1e43      	subs	r3, r0, #1
 800da78:	005b      	lsls	r3, r3, #1
 800da7a:	b29b      	uxth	r3, r3
 800da7c:	610b      	str	r3, [r1, #16]
 800da7e:	2300      	movs	r3, #0
 800da80:	4c0d      	ldr	r4, [pc, #52]	; (800dab8 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x60>)
 800da82:	614b      	str	r3, [r1, #20]
 800da84:	6823      	ldr	r3, [r4, #0]
 800da86:	b993      	cbnz	r3, 800daae <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x56>
 800da88:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800da8c:	4298      	cmp	r0, r3
 800da8e:	bf2c      	ite	cs
 800da90:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 800da94:	0080      	lslcc	r0, r0, #2
 800da96:	f006 fe67 	bl	8014768 <operator new[](unsigned int)>
 800da9a:	2200      	movs	r2, #0
 800da9c:	682b      	ldr	r3, [r5, #0]
 800da9e:	6020      	str	r0, [r4, #0]
 800daa0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800daa4:	4298      	cmp	r0, r3
 800daa6:	d002      	beq.n	800daae <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x56>
 800daa8:	f840 2b04 	str.w	r2, [r0], #4
 800daac:	e7fa      	b.n	800daa4 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x4c>
 800daae:	bd70      	pop	{r4, r5, r6, pc}
 800dab0:	2000191c 	andcs	r1, r0, ip, lsl r9
 800dab4:	20001944 	andcs	r1, r0, r4, asr #18
 800dab8:	20001940 	andcs	r1, r0, r0, asr #18

0800dabc <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 800dabc:	b570      	push	{r4, r5, r6, lr}
 800dabe:	460e      	mov	r6, r1
 800dac0:	461c      	mov	r4, r3
 800dac2:	4615      	mov	r5, r2
 800dac4:	f7ff ff42 	bl	800d94c <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800dac8:	2305      	movs	r3, #5
 800daca:	4907      	ldr	r1, [pc, #28]	; (800dae8 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 800dacc:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800dad0:	61cb      	str	r3, [r1, #28]
 800dad2:	9b05      	ldr	r3, [sp, #20]
 800dad4:	e9c1 5402 	strd	r5, r4, [r1, #8]
 800dad8:	604b      	str	r3, [r1, #4]
 800dada:	9b04      	ldr	r3, [sp, #16]
 800dadc:	610b      	str	r3, [r1, #16]
 800dade:	2300      	movs	r3, #0
 800dae0:	614b      	str	r3, [r1, #20]
 800dae2:	9b06      	ldr	r3, [sp, #24]
 800dae4:	618b      	str	r3, [r1, #24]
 800dae6:	bd70      	pop	{r4, r5, r6, pc}
 800dae8:	2000191c 	andcs	r1, r0, ip, lsl r9

0800daec <PixelPatterns::Wheel(unsigned char)>:
 800daec:	43c9      	mvns	r1, r1
 800daee:	b2c9      	uxtb	r1, r1
 800daf0:	2954      	cmp	r1, #84	; 0x54
 800daf2:	d809      	bhi.n	800db08 <PixelPatterns::Wheel(unsigned char)+0x1c>
 800daf4:	eba1 0081 	sub.w	r0, r1, r1, lsl #2
 800daf8:	3801      	subs	r0, #1
 800dafa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800dafe:	b2c3      	uxtb	r3, r0
 800db00:	b2c8      	uxtb	r0, r1
 800db02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800db06:	4770      	bx	lr
 800db08:	29a9      	cmp	r1, #169	; 0xa9
 800db0a:	d80b      	bhi.n	800db24 <PixelPatterns::Wheel(unsigned char)+0x38>
 800db0c:	3955      	subs	r1, #85	; 0x55
 800db0e:	b2c9      	uxtb	r1, r1
 800db10:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800db14:	eba1 0181 	sub.w	r1, r1, r1, lsl #2
 800db18:	b2c3      	uxtb	r3, r0
 800db1a:	1e48      	subs	r0, r1, #1
 800db1c:	b2c0      	uxtb	r0, r0
 800db1e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800db22:	4770      	bx	lr
 800db24:	3156      	adds	r1, #86	; 0x56
 800db26:	b2c9      	uxtb	r1, r1
 800db28:	eba1 0081 	sub.w	r0, r1, r1, lsl #2
 800db2c:	3801      	subs	r0, #1
 800db2e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800db32:	b2c3      	uxtb	r3, r0
 800db34:	b2c8      	uxtb	r0, r1
 800db36:	0400      	lsls	r0, r0, #16
 800db38:	e7f1      	b.n	800db1e <PixelPatterns::Wheel(unsigned char)+0x32>
	...

0800db3c <PixelPatterns::Increment(unsigned int)>:
 800db3c:	4a0d      	ldr	r2, [pc, #52]	; (800db74 <PixelPatterns::Increment(unsigned int)+0x38>)
 800db3e:	b510      	push	{r4, lr}
 800db40:	014c      	lsls	r4, r1, #5
 800db42:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 800db46:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
 800db4a:	b930      	cbnz	r0, 800db5a <PixelPatterns::Increment(unsigned int)+0x1e>
 800db4c:	690a      	ldr	r2, [r1, #16]
 800db4e:	3301      	adds	r3, #1
 800db50:	4293      	cmp	r3, r2
 800db52:	bf18      	it	ne
 800db54:	4618      	movne	r0, r3
 800db56:	6148      	str	r0, [r1, #20]
 800db58:	bd10      	pop	{r4, pc}
 800db5a:	b92b      	cbnz	r3, 800db68 <PixelPatterns::Increment(unsigned int)+0x2c>
 800db5c:	4422      	add	r2, r4
 800db5e:	6913      	ldr	r3, [r2, #16]
 800db60:	3b01      	subs	r3, #1
 800db62:	b29b      	uxth	r3, r3
 800db64:	6153      	str	r3, [r2, #20]
 800db66:	e7f7      	b.n	800db58 <PixelPatterns::Increment(unsigned int)+0x1c>
 800db68:	3b01      	subs	r3, #1
 800db6a:	614b      	str	r3, [r1, #20]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d1f3      	bne.n	800db58 <PixelPatterns::Increment(unsigned int)+0x1c>
 800db70:	e7f4      	b.n	800db5c <PixelPatterns::Increment(unsigned int)+0x20>
 800db72:	bf00      	nop
 800db74:	2000191c 	andcs	r1, r0, ip, lsl r9

0800db78 <PixelPatterns::RainbowCycleUpdate(unsigned int)>:
 800db78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db7c:	4604      	mov	r4, r0
 800db7e:	460d      	mov	r5, r1
 800db80:	2600      	movs	r6, #0
 800db82:	4b10      	ldr	r3, [pc, #64]	; (800dbc4 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x4c>)
 800db84:	f8df 8040 	ldr.w	r8, [pc, #64]	; 800dbc8 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x50>
 800db88:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800db8c:	695f      	ldr	r7, [r3, #20]
 800db8e:	f8d8 1000 	ldr.w	r1, [r8]
 800db92:	b2b2      	uxth	r2, r6
 800db94:	4291      	cmp	r1, r2
 800db96:	f106 0601 	add.w	r6, r6, #1
 800db9a:	d90c      	bls.n	800dbb6 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x3e>
 800db9c:	0213      	lsls	r3, r2, #8
 800db9e:	fbb3 f3f1 	udiv	r3, r3, r1
 800dba2:	443b      	add	r3, r7
 800dba4:	b2d9      	uxtb	r1, r3
 800dba6:	4620      	mov	r0, r4
 800dba8:	f7ff ffa0 	bl	800daec <PixelPatterns::Wheel(unsigned char)>
 800dbac:	4601      	mov	r1, r0
 800dbae:	4610      	mov	r0, r2
 800dbb0:	f7ff feba 	bl	800d928 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800dbb4:	e7eb      	b.n	800db8e <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x16>
 800dbb6:	4629      	mov	r1, r5
 800dbb8:	4620      	mov	r0, r4
 800dbba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbbe:	f7ff bfbd 	b.w	800db3c <PixelPatterns::Increment(unsigned int)>
 800dbc2:	bf00      	nop
 800dbc4:	2000191c 	andcs	r1, r0, ip, lsl r9
 800dbc8:	20001944 	andcs	r1, r0, r4, asr #18

0800dbcc <PixelPatterns::TheaterChaseUpdate(unsigned int)>:
 800dbcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbd0:	4605      	mov	r5, r0
 800dbd2:	460c      	mov	r4, r1
 800dbd4:	f04f 0b00 	mov.w	fp, #0
 800dbd8:	4b12      	ldr	r3, [pc, #72]	; (800dc24 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x58>)
 800dbda:	f8df 904c 	ldr.w	r9, [pc, #76]	; 800dc28 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x5c>
 800dbde:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800dbe2:	f8d3 8014 	ldr.w	r8, [r3, #20]
 800dbe6:	f8df a044 	ldr.w	sl, [pc, #68]	; 800dc2c <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x60>
 800dbea:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
 800dbee:	f8d9 3000 	ldr.w	r3, [r9]
 800dbf2:	fa1f f08b 	uxth.w	r0, fp
 800dbf6:	4283      	cmp	r3, r0
 800dbf8:	d90d      	bls.n	800dc16 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x4a>
 800dbfa:	eb08 0300 	add.w	r3, r8, r0
 800dbfe:	fb0a f303 	mul.w	r3, sl, r3
 800dc02:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 800dc06:	bf94      	ite	ls
 800dc08:	4631      	movls	r1, r6
 800dc0a:	4639      	movhi	r1, r7
 800dc0c:	f7ff fe8c 	bl	800d928 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800dc10:	f10b 0b01 	add.w	fp, fp, #1
 800dc14:	e7eb      	b.n	800dbee <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x22>
 800dc16:	4621      	mov	r1, r4
 800dc18:	4628      	mov	r0, r5
 800dc1a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc1e:	f7ff bf8d 	b.w	800db3c <PixelPatterns::Increment(unsigned int)>
 800dc22:	bf00      	nop
 800dc24:	2000191c 	andcs	r1, r0, ip, lsl r9
 800dc28:	20001944 	andcs	r1, r0, r4, asr #18
 800dc2c:	aaaaaaab 	bge	6ab86e0 <__stack_size+0x6ab6ee0>

0800dc30 <PixelPatterns::ColourWipeUpdate(unsigned int)>:
 800dc30:	b538      	push	{r3, r4, r5, lr}
 800dc32:	4605      	mov	r5, r0
 800dc34:	460c      	mov	r4, r1
 800dc36:	4b06      	ldr	r3, [pc, #24]	; (800dc50 <PixelPatterns::ColourWipeUpdate(unsigned int)+0x20>)
 800dc38:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800dc3c:	6899      	ldr	r1, [r3, #8]
 800dc3e:	6958      	ldr	r0, [r3, #20]
 800dc40:	f7ff fe72 	bl	800d928 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800dc44:	4621      	mov	r1, r4
 800dc46:	4628      	mov	r0, r5
 800dc48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc4c:	f7ff bf76 	b.w	800db3c <PixelPatterns::Increment(unsigned int)>
 800dc50:	2000191c 	andcs	r1, r0, ip, lsl r9

0800dc54 <PixelPatterns::ScannerUpdate(unsigned int)>:
 800dc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc58:	460d      	mov	r5, r1
 800dc5a:	f04f 0900 	mov.w	r9, #0
 800dc5e:	4a27      	ldr	r2, [pc, #156]	; (800dcfc <PixelPatterns::ScannerUpdate(unsigned int)+0xa8>)
 800dc60:	b085      	sub	sp, #20
 800dc62:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 800dc66:	e9d2 7604 	ldrd	r7, r6, [r2, #16]
 800dc6a:	f8d2 a008 	ldr.w	sl, [r2, #8]
 800dc6e:	00b3      	lsls	r3, r6, #2
 800dc70:	f8df b08c 	ldr.w	fp, [pc, #140]	; 800dd00 <PixelPatterns::ScannerUpdate(unsigned int)+0xac>
 800dc74:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800dd04 <PixelPatterns::ScannerUpdate(unsigned int)+0xb0>
 800dc78:	9002      	str	r0, [sp, #8]
 800dc7a:	9301      	str	r3, [sp, #4]
 800dc7c:	1bbf      	subs	r7, r7, r6
 800dc7e:	f8db 1000 	ldr.w	r1, [fp]
 800dc82:	fa1f f489 	uxth.w	r4, r9
 800dc86:	42a1      	cmp	r1, r4
 800dc88:	d930      	bls.n	800dcec <PixelPatterns::ScannerUpdate(unsigned int)+0x98>
 800dc8a:	42a6      	cmp	r6, r4
 800dc8c:	d10b      	bne.n	800dca6 <PixelPatterns::ScannerUpdate(unsigned int)+0x52>
 800dc8e:	4651      	mov	r1, sl
 800dc90:	4630      	mov	r0, r6
 800dc92:	f7ff fe49 	bl	800d928 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800dc96:	f8d8 1000 	ldr.w	r1, [r8]
 800dc9a:	9b01      	ldr	r3, [sp, #4]
 800dc9c:	f841 a003 	str.w	sl, [r1, r3]
 800dca0:	f109 0901 	add.w	r9, r9, #1
 800dca4:	e7eb      	b.n	800dc7e <PixelPatterns::ScannerUpdate(unsigned int)+0x2a>
 800dca6:	42a7      	cmp	r7, r4
 800dca8:	d108      	bne.n	800dcbc <PixelPatterns::ScannerUpdate(unsigned int)+0x68>
 800dcaa:	4651      	mov	r1, sl
 800dcac:	4638      	mov	r0, r7
 800dcae:	f7ff fe3b 	bl	800d928 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800dcb2:	f8d8 1000 	ldr.w	r1, [r8]
 800dcb6:	f841 a024 	str.w	sl, [r1, r4, lsl #2]
 800dcba:	e7f1      	b.n	800dca0 <PixelPatterns::ScannerUpdate(unsigned int)+0x4c>
 800dcbc:	f8d8 1000 	ldr.w	r1, [r8]
 800dcc0:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 800dcc4:	f3c0 2146 	ubfx	r1, r0, #9, #7
 800dcc8:	f3c0 4c46 	ubfx	ip, r0, #17, #7
 800dccc:	0209      	lsls	r1, r1, #8
 800dcce:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800dcd2:	f3c0 0046 	ubfx	r0, r0, #1, #7
 800dcd6:	4301      	orrs	r1, r0
 800dcd8:	4620      	mov	r0, r4
 800dcda:	9103      	str	r1, [sp, #12]
 800dcdc:	f7ff fe24 	bl	800d928 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800dce0:	f8d8 0000 	ldr.w	r0, [r8]
 800dce4:	9903      	ldr	r1, [sp, #12]
 800dce6:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 800dcea:	e7d9      	b.n	800dca0 <PixelPatterns::ScannerUpdate(unsigned int)+0x4c>
 800dcec:	4629      	mov	r1, r5
 800dcee:	9802      	ldr	r0, [sp, #8]
 800dcf0:	b005      	add	sp, #20
 800dcf2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcf6:	f7ff bf21 	b.w	800db3c <PixelPatterns::Increment(unsigned int)>
 800dcfa:	bf00      	nop
 800dcfc:	2000191c 	andcs	r1, r0, ip, lsl r9
 800dd00:	20001944 	andcs	r1, r0, r4, asr #18
 800dd04:	20001940 	andcs	r1, r0, r0, asr #18

0800dd08 <PixelPatterns::FadeUpdate(unsigned int)>:
 800dd08:	4a21      	ldr	r2, [pc, #132]	; (800dd90 <PixelPatterns::FadeUpdate(unsigned int)+0x88>)
 800dd0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd0e:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 800dd12:	4605      	mov	r5, r0
 800dd14:	e9d2 3002 	ldrd	r3, r0, [r2, #8]
 800dd18:	460c      	mov	r4, r1
 800dd1a:	e9d2 6104 	ldrd	r6, r1, [r2, #16]
 800dd1e:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800dd22:	434a      	muls	r2, r1
 800dd24:	1a77      	subs	r7, r6, r1
 800dd26:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 800dd2a:	fb07 220c 	mla	r2, r7, ip, r2
 800dd2e:	fbb2 f2f6 	udiv	r2, r2, r6
 800dd32:	0212      	lsls	r2, r2, #8
 800dd34:	fa1f fc82 	uxth.w	ip, r2
 800dd38:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800dd3c:	434a      	muls	r2, r1
 800dd3e:	f3c3 4e07 	ubfx	lr, r3, #16, #8
 800dd42:	fb07 220e 	mla	r2, r7, lr, r2
 800dd46:	fbb2 f2f6 	udiv	r2, r2, r6
 800dd4a:	0412      	lsls	r2, r2, #16
 800dd4c:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800dd50:	ea4c 0202 	orr.w	r2, ip, r2
 800dd54:	fa5f fc83 	uxtb.w	ip, r3
 800dd58:	b2c3      	uxtb	r3, r0
 800dd5a:	434b      	muls	r3, r1
 800dd5c:	fb07 330c 	mla	r3, r7, ip, r3
 800dd60:	fbb3 f3f6 	udiv	r3, r3, r6
 800dd64:	2700      	movs	r7, #0
 800dd66:	b2db      	uxtb	r3, r3
 800dd68:	f8df 8028 	ldr.w	r8, [pc, #40]	; 800dd94 <PixelPatterns::FadeUpdate(unsigned int)+0x8c>
 800dd6c:	ea42 0603 	orr.w	r6, r2, r3
 800dd70:	f8d8 3000 	ldr.w	r3, [r8]
 800dd74:	42bb      	cmp	r3, r7
 800dd76:	d905      	bls.n	800dd84 <PixelPatterns::FadeUpdate(unsigned int)+0x7c>
 800dd78:	4638      	mov	r0, r7
 800dd7a:	4631      	mov	r1, r6
 800dd7c:	f7ff fdd4 	bl	800d928 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800dd80:	3701      	adds	r7, #1
 800dd82:	e7f5      	b.n	800dd70 <PixelPatterns::FadeUpdate(unsigned int)+0x68>
 800dd84:	4621      	mov	r1, r4
 800dd86:	4628      	mov	r0, r5
 800dd88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd8c:	f7ff bed6 	b.w	800db3c <PixelPatterns::Increment(unsigned int)>
 800dd90:	2000191c 	andcs	r1, r0, ip, lsl r9
 800dd94:	20001944 	andcs	r1, r0, r4, asr #18

0800dd98 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>:
 800dd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd9a:	4b12      	ldr	r3, [pc, #72]	; (800dde4 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x4c>)
 800dd9c:	014e      	lsls	r6, r1, #5
 800dd9e:	599c      	ldr	r4, [r3, r6]
 800dda0:	eb03 1541 	add.w	r5, r3, r1, lsl #5
 800dda4:	686f      	ldr	r7, [r5, #4]
 800dda6:	1b14      	subs	r4, r2, r4
 800dda8:	42bc      	cmp	r4, r7
 800ddaa:	d319      	bcc.n	800dde0 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 800ddac:	519a      	str	r2, [r3, r6]
 800ddae:	69eb      	ldr	r3, [r5, #28]
 800ddb0:	3b01      	subs	r3, #1
 800ddb2:	2b04      	cmp	r3, #4
 800ddb4:	d814      	bhi.n	800dde0 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 800ddb6:	e8df f003 	tbb	[pc, r3]
 800ddba:	0d0a0703 	stceq	7, cr0, [sl, #-12]
 800ddbe:	f7ff0010 			; <UNDEFINED> instruction: 0xf7ff0010
 800ddc2:	feda 2001 	cdp2	0, 13, cr2, cr10, cr1, {0}
 800ddc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddc8:	f7ff ff00 	bl	800dbcc <PixelPatterns::TheaterChaseUpdate(unsigned int)>
 800ddcc:	e7fa      	b.n	800ddc4 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800ddce:	f7ff ff2f 	bl	800dc30 <PixelPatterns::ColourWipeUpdate(unsigned int)>
 800ddd2:	e7f7      	b.n	800ddc4 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800ddd4:	f7ff ff3e 	bl	800dc54 <PixelPatterns::ScannerUpdate(unsigned int)>
 800ddd8:	e7f4      	b.n	800ddc4 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800ddda:	f7ff ff95 	bl	800dd08 <PixelPatterns::FadeUpdate(unsigned int)>
 800ddde:	e7f1      	b.n	800ddc4 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800dde0:	2000      	movs	r0, #0
 800dde2:	e7f0      	b.n	800ddc6 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2e>
 800dde4:	2000191c 	andcs	r1, r0, ip, lsl r9

0800dde8 <PixelPatterns::Run()>:
 800dde8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddec:	4605      	mov	r5, r0
 800ddee:	f007 feb1 	bl	8015b54 <gd32_spi_dma_tx_is_active()>
 800ddf2:	4604      	mov	r4, r0
 800ddf4:	b9c8      	cbnz	r0, 800de2a <PixelPatterns::Run()+0x42>
 800ddf6:	4606      	mov	r6, r0
 800ddf8:	4b0d      	ldr	r3, [pc, #52]	; (800de30 <PixelPatterns::Run()+0x48>)
 800ddfa:	f8df 8038 	ldr.w	r8, [pc, #56]	; 800de34 <PixelPatterns::Run()+0x4c>
 800ddfe:	681f      	ldr	r7, [r3, #0]
 800de00:	f8d8 3000 	ldr.w	r3, [r8]
 800de04:	b2f1      	uxtb	r1, r6
 800de06:	428b      	cmp	r3, r1
 800de08:	f106 0601 	add.w	r6, r6, #1
 800de0c:	d906      	bls.n	800de1c <PixelPatterns::Run()+0x34>
 800de0e:	463a      	mov	r2, r7
 800de10:	4628      	mov	r0, r5
 800de12:	f7ff ffc1 	bl	800dd98 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>
 800de16:	4304      	orrs	r4, r0
 800de18:	b2e4      	uxtb	r4, r4
 800de1a:	e7f1      	b.n	800de00 <PixelPatterns::Run()+0x18>
 800de1c:	b12c      	cbz	r4, 800de2a <PixelPatterns::Run()+0x42>
 800de1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de22:	4b05      	ldr	r3, [pc, #20]	; (800de38 <PixelPatterns::Run()+0x50>)
 800de24:	6818      	ldr	r0, [r3, #0]
 800de26:	f000 bf69 	b.w	800ecfc <WS28xx::Update()>
 800de2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de2e:	bf00      	nop
 800de30:	2000a9dc 	ldrdcs	sl, [r0], -ip
 800de34:	2000193c 	andcs	r1, r0, ip, lsr r9
 800de38:	20001948 	andcs	r1, r0, r8, asr #18

0800de3c <PixelType::GetType(pixel::Type)>:
 800de3c:	280d      	cmp	r0, #13
 800de3e:	bfda      	itte	le
 800de40:	4b02      	ldrle	r3, [pc, #8]	; (800de4c <PixelType::GetType(pixel::Type)+0x10>)
 800de42:	eb03 00c0 	addle.w	r0, r3, r0, lsl #3
 800de46:	4802      	ldrgt	r0, [pc, #8]	; (800de50 <PixelType::GetType(pixel::Type)+0x14>)
 800de48:	4770      	bx	lr
 800de4a:	bf00      	nop
 800de4c:	0801716d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r8, ip, sp, lr}
 800de50:	080170ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, ip, sp, lr}

0800de54 <PixelType::GetType(char const*)>:
 800de54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de56:	4604      	mov	r4, r0
 800de58:	2000      	movs	r0, #0
 800de5a:	490f      	ldr	r1, [pc, #60]	; (800de98 <PixelType::GetType(char const*)+0x44>)
 800de5c:	1e66      	subs	r6, r4, #1
 800de5e:	1e4d      	subs	r5, r1, #1
 800de60:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800de64:	461f      	mov	r7, r3
 800de66:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800de6a:	2a19      	cmp	r2, #25
 800de6c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800de70:	bf98      	it	ls
 800de72:	f103 0720 	addls.w	r7, r3, #32
 800de76:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
 800de7a:	f1bc 0f19 	cmp.w	ip, #25
 800de7e:	bf98      	it	ls
 800de80:	3220      	addls	r2, #32
 800de82:	42ba      	cmp	r2, r7
 800de84:	d102      	bne.n	800de8c <PixelType::GetType(char const*)+0x38>
 800de86:	2b00      	cmp	r3, #0
 800de88:	d1ea      	bne.n	800de60 <PixelType::GetType(char const*)+0xc>
 800de8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de8c:	3001      	adds	r0, #1
 800de8e:	280e      	cmp	r0, #14
 800de90:	f101 0108 	add.w	r1, r1, #8
 800de94:	d1e2      	bne.n	800de5c <PixelType::GetType(char const*)+0x8>
 800de96:	e7f8      	b.n	800de8a <PixelType::GetType(char const*)+0x36>
 800de98:	0801716d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r8, ip, sp, lr}

0800de9c <PixelType::GetMap(char const*)>:
 800de9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de9e:	4605      	mov	r5, r0
 800dea0:	2000      	movs	r0, #0
 800dea2:	4b11      	ldr	r3, [pc, #68]	; (800dee8 <PixelType::GetMap(char const*)+0x4c>)
 800dea4:	1e5c      	subs	r4, r3, #1
 800dea6:	1e6e      	subs	r6, r5, #1
 800dea8:	f103 0c02 	add.w	ip, r3, #2
 800deac:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 800deb0:	4617      	mov	r7, r2
 800deb2:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 800deb6:	2919      	cmp	r1, #25
 800deb8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800debc:	bf98      	it	ls
 800debe:	f102 0720 	addls.w	r7, r2, #32
 800dec2:	f1a1 0e41 	sub.w	lr, r1, #65	; 0x41
 800dec6:	f1be 0f19 	cmp.w	lr, #25
 800deca:	bf98      	it	ls
 800decc:	3120      	addls	r1, #32
 800dece:	42b9      	cmp	r1, r7
 800ded0:	d005      	beq.n	800dede <PixelType::GetMap(char const*)+0x42>
 800ded2:	3001      	adds	r0, #1
 800ded4:	2806      	cmp	r0, #6
 800ded6:	f103 0304 	add.w	r3, r3, #4
 800deda:	d1e3      	bne.n	800dea4 <PixelType::GetMap(char const*)+0x8>
 800dedc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dede:	2a00      	cmp	r2, #0
 800dee0:	d0fc      	beq.n	800dedc <PixelType::GetMap(char const*)+0x40>
 800dee2:	4564      	cmp	r4, ip
 800dee4:	d1e2      	bne.n	800deac <PixelType::GetMap(char const*)+0x10>
 800dee6:	e7f9      	b.n	800dedc <PixelType::GetMap(char const*)+0x40>
 800dee8:	08017155 	stmdaeq	r1, {r0, r2, r4, r6, r8, ip, sp, lr}

0800deec <PixelType::GetMap(pixel::Map)>:
 800deec:	2805      	cmp	r0, #5
 800deee:	bfda      	itte	le
 800def0:	4b02      	ldrle	r3, [pc, #8]	; (800defc <PixelType::GetMap(pixel::Map)+0x10>)
 800def2:	eb03 0080 	addle.w	r0, r3, r0, lsl #2
 800def6:	4802      	ldrgt	r0, [pc, #8]	; (800df00 <PixelType::GetMap(pixel::Map)+0x14>)
 800def8:	4770      	bx	lr
 800defa:	bf00      	nop
 800defc:	08017155 	stmdaeq	r1, {r0, r2, r4, r6, r8, ip, sp, lr}
 800df00:	0801714b 	stmdaeq	r1, {r0, r1, r3, r6, r8, ip, sp, lr}

0800df04 <PixelType::ConvertTxH(unsigned char)>:
 800df04:	28f0      	cmp	r0, #240	; 0xf0
 800df06:	d010      	beq.n	800df2a <PixelType::ConvertTxH(unsigned char)+0x26>
 800df08:	d807      	bhi.n	800df1a <PixelType::ConvertTxH(unsigned char)+0x16>
 800df0a:	28c0      	cmp	r0, #192	; 0xc0
 800df0c:	d00f      	beq.n	800df2e <PixelType::ConvertTxH(unsigned char)+0x2a>
 800df0e:	28e0      	cmp	r0, #224	; 0xe0
 800df10:	d00f      	beq.n	800df32 <PixelType::ConvertTxH(unsigned char)+0x2e>
 800df12:	2880      	cmp	r0, #128	; 0x80
 800df14:	d113      	bne.n	800df3e <PixelType::ConvertTxH(unsigned char)+0x3a>
 800df16:	480b      	ldr	r0, [pc, #44]	; (800df44 <PixelType::ConvertTxH(unsigned char)+0x40>)
 800df18:	4770      	bx	lr
 800df1a:	28fc      	cmp	r0, #252	; 0xfc
 800df1c:	d00b      	beq.n	800df36 <PixelType::ConvertTxH(unsigned char)+0x32>
 800df1e:	28fe      	cmp	r0, #254	; 0xfe
 800df20:	d00b      	beq.n	800df3a <PixelType::ConvertTxH(unsigned char)+0x36>
 800df22:	28f8      	cmp	r0, #248	; 0xf8
 800df24:	d10b      	bne.n	800df3e <PixelType::ConvertTxH(unsigned char)+0x3a>
 800df26:	4808      	ldr	r0, [pc, #32]	; (800df48 <PixelType::ConvertTxH(unsigned char)+0x44>)
 800df28:	4770      	bx	lr
 800df2a:	4808      	ldr	r0, [pc, #32]	; (800df4c <PixelType::ConvertTxH(unsigned char)+0x48>)
 800df2c:	4770      	bx	lr
 800df2e:	4808      	ldr	r0, [pc, #32]	; (800df50 <PixelType::ConvertTxH(unsigned char)+0x4c>)
 800df30:	4770      	bx	lr
 800df32:	4808      	ldr	r0, [pc, #32]	; (800df54 <PixelType::ConvertTxH(unsigned char)+0x50>)
 800df34:	4770      	bx	lr
 800df36:	4808      	ldr	r0, [pc, #32]	; (800df58 <PixelType::ConvertTxH(unsigned char)+0x54>)
 800df38:	4770      	bx	lr
 800df3a:	4808      	ldr	r0, [pc, #32]	; (800df5c <PixelType::ConvertTxH(unsigned char)+0x58>)
 800df3c:	4770      	bx	lr
 800df3e:	2000      	movs	r0, #0
 800df40:	4770      	bx	lr
 800df42:	bf00      	nop
 800df44:	3e200000 	cdpcc	0, 2, cr0, cr0, cr0, {0}
 800df48:	3f480000 	svccc	0x00480000
 800df4c:	3f200000 	svccc	0x00200000
 800df50:	3ea00000 	cdpcc	0, 10, cr0, cr0, cr0, {0}
 800df54:	3ef00000 	cdpcc	0, 15, cr0, cr0, cr0, {0}
 800df58:	3f700000 	svccc	0x00700000
 800df5c:	3f8c0000 	svccc	0x008c0000

0800df60 <PixelType::ConvertTxH(float)>:
 800df60:	b510      	push	{r4, lr}
 800df62:	491d      	ldr	r1, [pc, #116]	; (800dfd8 <PixelType::ConvertTxH(float)+0x78>)
 800df64:	4604      	mov	r4, r0
 800df66:	f7f9 ff6f 	bl	8007e48 <__aeabi_fcmplt>
 800df6a:	bb30      	cbnz	r0, 800dfba <PixelType::ConvertTxH(float)+0x5a>
 800df6c:	4620      	mov	r0, r4
 800df6e:	491b      	ldr	r1, [pc, #108]	; (800dfdc <PixelType::ConvertTxH(float)+0x7c>)
 800df70:	f7f9 ff6a 	bl	8007e48 <__aeabi_fcmplt>
 800df74:	bb18      	cbnz	r0, 800dfbe <PixelType::ConvertTxH(float)+0x5e>
 800df76:	4620      	mov	r0, r4
 800df78:	4919      	ldr	r1, [pc, #100]	; (800dfe0 <PixelType::ConvertTxH(float)+0x80>)
 800df7a:	f7f9 ff65 	bl	8007e48 <__aeabi_fcmplt>
 800df7e:	bb00      	cbnz	r0, 800dfc2 <PixelType::ConvertTxH(float)+0x62>
 800df80:	4620      	mov	r0, r4
 800df82:	4918      	ldr	r1, [pc, #96]	; (800dfe4 <PixelType::ConvertTxH(float)+0x84>)
 800df84:	f7f9 ff60 	bl	8007e48 <__aeabi_fcmplt>
 800df88:	b9e8      	cbnz	r0, 800dfc6 <PixelType::ConvertTxH(float)+0x66>
 800df8a:	4620      	mov	r0, r4
 800df8c:	4916      	ldr	r1, [pc, #88]	; (800dfe8 <PixelType::ConvertTxH(float)+0x88>)
 800df8e:	f7f9 ff5b 	bl	8007e48 <__aeabi_fcmplt>
 800df92:	b9d0      	cbnz	r0, 800dfca <PixelType::ConvertTxH(float)+0x6a>
 800df94:	4620      	mov	r0, r4
 800df96:	4915      	ldr	r1, [pc, #84]	; (800dfec <PixelType::ConvertTxH(float)+0x8c>)
 800df98:	f7f9 ff56 	bl	8007e48 <__aeabi_fcmplt>
 800df9c:	b9b8      	cbnz	r0, 800dfce <PixelType::ConvertTxH(float)+0x6e>
 800df9e:	4620      	mov	r0, r4
 800dfa0:	4913      	ldr	r1, [pc, #76]	; (800dff0 <PixelType::ConvertTxH(float)+0x90>)
 800dfa2:	f7f9 ff51 	bl	8007e48 <__aeabi_fcmplt>
 800dfa6:	b9a0      	cbnz	r0, 800dfd2 <PixelType::ConvertTxH(float)+0x72>
 800dfa8:	4620      	mov	r0, r4
 800dfaa:	4912      	ldr	r1, [pc, #72]	; (800dff4 <PixelType::ConvertTxH(float)+0x94>)
 800dfac:	f7f9 ff4c 	bl	8007e48 <__aeabi_fcmplt>
 800dfb0:	2800      	cmp	r0, #0
 800dfb2:	bf14      	ite	ne
 800dfb4:	20fe      	movne	r0, #254	; 0xfe
 800dfb6:	2000      	moveq	r0, #0
 800dfb8:	bd10      	pop	{r4, pc}
 800dfba:	2000      	movs	r0, #0
 800dfbc:	e7fc      	b.n	800dfb8 <PixelType::ConvertTxH(float)+0x58>
 800dfbe:	2080      	movs	r0, #128	; 0x80
 800dfc0:	e7fa      	b.n	800dfb8 <PixelType::ConvertTxH(float)+0x58>
 800dfc2:	20c0      	movs	r0, #192	; 0xc0
 800dfc4:	e7f8      	b.n	800dfb8 <PixelType::ConvertTxH(float)+0x58>
 800dfc6:	20e0      	movs	r0, #224	; 0xe0
 800dfc8:	e7f6      	b.n	800dfb8 <PixelType::ConvertTxH(float)+0x58>
 800dfca:	20f0      	movs	r0, #240	; 0xf0
 800dfcc:	e7f4      	b.n	800dfb8 <PixelType::ConvertTxH(float)+0x58>
 800dfce:	20f8      	movs	r0, #248	; 0xf8
 800dfd0:	e7f2      	b.n	800dfb8 <PixelType::ConvertTxH(float)+0x58>
 800dfd2:	20fc      	movs	r0, #252	; 0xfc
 800dfd4:	e7f0      	b.n	800dfb8 <PixelType::ConvertTxH(float)+0x58>
 800dfd6:	bf00      	nop
 800dfd8:	3da00000 	stccc	0, cr0, [r0]
 800dfdc:	3e700000 	cdpcc	0, 7, cr0, cr0, cr0, {0}
 800dfe0:	3ec80000 	cdpcc	0, 12, cr0, cr8, cr0, {0}
 800dfe4:	3f0c0000 	svccc	0x000c0000
 800dfe8:	3f340000 	svccc	0x00340000
 800dfec:	3f5c0000 	svccc	0x005c0000
 800dff0:	3f820000 	svccc	0x00820000
 800dff4:	3f960000 	svccc	0x00960000

0800dff8 <WS28xx::Print()>:
 800dff8:	b513      	push	{r0, r1, r4, lr}
 800dffa:	4604      	mov	r4, r0
 800dffc:	4819      	ldr	r0, [pc, #100]	; (800e064 <WS28xx::Print()+0x6c>)
 800dffe:	f7fb fb35 	bl	800966c <printf>
 800e002:	6820      	ldr	r0, [r4, #0]
 800e004:	f7ff ff1a 	bl	800de3c <PixelType::GetType(pixel::Type)>
 800e008:	6822      	ldr	r2, [r4, #0]
 800e00a:	4601      	mov	r1, r0
 800e00c:	4816      	ldr	r0, [pc, #88]	; (800e068 <WS28xx::Print()+0x70>)
 800e00e:	f7fb fb2d 	bl	800966c <printf>
 800e012:	6861      	ldr	r1, [r4, #4]
 800e014:	4815      	ldr	r0, [pc, #84]	; (800e06c <WS28xx::Print()+0x74>)
 800e016:	f7fb fb29 	bl	800966c <printf>
 800e01a:	7ca3      	ldrb	r3, [r4, #18]
 800e01c:	b1fb      	cbz	r3, 800e05e <WS28xx::Print()+0x66>
 800e01e:	68a0      	ldr	r0, [r4, #8]
 800e020:	f7ff ff64 	bl	800deec <PixelType::GetMap(pixel::Map)>
 800e024:	68a2      	ldr	r2, [r4, #8]
 800e026:	4601      	mov	r1, r0
 800e028:	4811      	ldr	r0, [pc, #68]	; (800e070 <WS28xx::Print()+0x78>)
 800e02a:	f7fb fb1f 	bl	800966c <printf>
 800e02e:	7c20      	ldrb	r0, [r4, #16]
 800e030:	f7ff ff68 	bl	800df04 <PixelType::ConvertTxH(unsigned char)>
 800e034:	f7fa fa3e 	bl	80084b4 <__aeabi_f2d>
 800e038:	460b      	mov	r3, r1
 800e03a:	7c21      	ldrb	r1, [r4, #16]
 800e03c:	4602      	mov	r2, r0
 800e03e:	9100      	str	r1, [sp, #0]
 800e040:	480c      	ldr	r0, [pc, #48]	; (800e074 <WS28xx::Print()+0x7c>)
 800e042:	f7fb fb13 	bl	800966c <printf>
 800e046:	7c60      	ldrb	r0, [r4, #17]
 800e048:	f7ff ff5c 	bl	800df04 <PixelType::ConvertTxH(unsigned char)>
 800e04c:	f7fa fa32 	bl	80084b4 <__aeabi_f2d>
 800e050:	460b      	mov	r3, r1
 800e052:	7c61      	ldrb	r1, [r4, #17]
 800e054:	4602      	mov	r2, r0
 800e056:	9100      	str	r1, [sp, #0]
 800e058:	4807      	ldr	r0, [pc, #28]	; (800e078 <WS28xx::Print()+0x80>)
 800e05a:	f7fb fb07 	bl	800966c <printf>
 800e05e:	b002      	add	sp, #8
 800e060:	bd10      	pop	{r4, pc}
 800e062:	bf00      	nop
 800e064:	080171dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r8, ip, sp, lr}
 800e068:	080171ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r8, ip, sp, lr}
 800e06c:	08017203 	stmdaeq	r1, {r0, r1, r9, ip, sp, lr}
 800e070:	08017212 	stmdaeq	r1, {r1, r4, r9, ip, sp, lr}
 800e074:	08017226 	stmdaeq	r1, {r1, r2, r5, r9, ip, sp, lr}
 800e078:	0801723e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r9, ip, sp, lr}

0800e07c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>:
 800e07c:	b530      	push	{r4, r5, lr}
 800e07e:	7c84      	ldrb	r4, [r0, #18]
 800e080:	f89d c00c 	ldrb.w	ip, [sp, #12]
 800e084:	b994      	cbnz	r4, 800e0ac <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x30>
 800e086:	6804      	ldr	r4, [r0, #0]
 800e088:	f1a4 0e0b 	sub.w	lr, r4, #11
 800e08c:	f1be 0f01 	cmp.w	lr, #1
 800e090:	d93d      	bls.n	800e10e <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x92>
 800e092:	b9d4      	cbnz	r4, 800e0ca <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x4e>
 800e094:	6944      	ldr	r4, [r0, #20]
 800e096:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800e09a:	5462      	strb	r2, [r4, r1]
 800e09c:	6942      	ldr	r2, [r0, #20]
 800e09e:	440a      	add	r2, r1
 800e0a0:	7053      	strb	r3, [r2, #1]
 800e0a2:	6943      	ldr	r3, [r0, #20]
 800e0a4:	4419      	add	r1, r3
 800e0a6:	f881 c002 	strb.w	ip, [r1, #2]
 800e0aa:	bd30      	pop	{r4, r5, pc}
 800e0ac:	6884      	ldr	r4, [r0, #8]
 800e0ae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800e0b2:	00c9      	lsls	r1, r1, #3
 800e0b4:	2c05      	cmp	r4, #5
 800e0b6:	f200 812d 	bhi.w	800e314 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x298>
 800e0ba:	e8df f014 	tbh	[pc, r4, lsl #1]
 800e0be:	02ed012b 	rsceq	r0, sp, #-1073741814	; 0xc000000a
 800e0c2:	04140384 	ldreq	r0, [r4], #-900	; 0xfffffc7c
 800e0c6:	0202003b 	andeq	r0, r2, #59	; 0x3b
 800e0ca:	ea6f 0e9c 	mvn.w	lr, ip, lsr #2
 800e0ce:	ea6f 1413 	mvn.w	r4, r3, lsr #4
 800e0d2:	f082 05c0 	eor.w	r5, r2, #192	; 0xc0
 800e0d6:	f00e 0e30 	and.w	lr, lr, #48	; 0x30
 800e0da:	f004 040c 	and.w	r4, r4, #12
 800e0de:	ea4e 1e95 	orr.w	lr, lr, r5, lsr #6
 800e0e2:	ea4e 0e04 	orr.w	lr, lr, r4
 800e0e6:	6944      	ldr	r4, [r0, #20]
 800e0e8:	3101      	adds	r1, #1
 800e0ea:	f06e 0e3f 	orn	lr, lr, #63	; 0x3f
 800e0ee:	f804 e021 	strb.w	lr, [r4, r1, lsl #2]
 800e0f2:	6944      	ldr	r4, [r0, #20]
 800e0f4:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800e0f8:	f884 c001 	strb.w	ip, [r4, #1]
 800e0fc:	6944      	ldr	r4, [r0, #20]
 800e0fe:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800e102:	70a3      	strb	r3, [r4, #2]
 800e104:	6943      	ldr	r3, [r0, #20]
 800e106:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800e10a:	70ca      	strb	r2, [r1, #3]
 800e10c:	bd30      	pop	{r4, r5, pc}
 800e10e:	6944      	ldr	r4, [r0, #20]
 800e110:	7cc5      	ldrb	r5, [r0, #19]
 800e112:	3101      	adds	r1, #1
 800e114:	f804 5021 	strb.w	r5, [r4, r1, lsl #2]
 800e118:	6944      	ldr	r4, [r0, #20]
 800e11a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800e11e:	7062      	strb	r2, [r4, #1]
 800e120:	6942      	ldr	r2, [r0, #20]
 800e122:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800e126:	7093      	strb	r3, [r2, #2]
 800e128:	6943      	ldr	r3, [r0, #20]
 800e12a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800e12e:	f881 c003 	strb.w	ip, [r1, #3]
 800e132:	bd30      	pop	{r4, r5, pc}
 800e134:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800e138:	bf0c      	ite	eq
 800e13a:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800e13e:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800e142:	6945      	ldr	r5, [r0, #20]
 800e144:	1c4c      	adds	r4, r1, #1
 800e146:	f805 e004 	strb.w	lr, [r5, r4]
 800e14a:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800e14e:	bf0c      	ite	eq
 800e150:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800e154:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800e158:	6945      	ldr	r5, [r0, #20]
 800e15a:	1c8c      	adds	r4, r1, #2
 800e15c:	f805 e004 	strb.w	lr, [r5, r4]
 800e160:	f01c 0f20 	tst.w	ip, #32
 800e164:	bf0c      	ite	eq
 800e166:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800e16a:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800e16e:	6945      	ldr	r5, [r0, #20]
 800e170:	1ccc      	adds	r4, r1, #3
 800e172:	f805 e004 	strb.w	lr, [r5, r4]
 800e176:	f01c 0f10 	tst.w	ip, #16
 800e17a:	bf0c      	ite	eq
 800e17c:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800e180:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800e184:	6945      	ldr	r5, [r0, #20]
 800e186:	1d0c      	adds	r4, r1, #4
 800e188:	f01c 0f08 	tst.w	ip, #8
 800e18c:	f805 e004 	strb.w	lr, [r5, r4]
 800e190:	bf0c      	ite	eq
 800e192:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800e196:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800e19a:	6945      	ldr	r5, [r0, #20]
 800e19c:	1d4c      	adds	r4, r1, #5
 800e19e:	f01c 0f04 	tst.w	ip, #4
 800e1a2:	f805 e004 	strb.w	lr, [r5, r4]
 800e1a6:	bf0c      	ite	eq
 800e1a8:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800e1ac:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800e1b0:	6945      	ldr	r5, [r0, #20]
 800e1b2:	1d8c      	adds	r4, r1, #6
 800e1b4:	f01c 0f02 	tst.w	ip, #2
 800e1b8:	f805 e004 	strb.w	lr, [r5, r4]
 800e1bc:	bf0c      	ite	eq
 800e1be:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800e1c2:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800e1c6:	6945      	ldr	r5, [r0, #20]
 800e1c8:	1dcc      	adds	r4, r1, #7
 800e1ca:	f01c 0f01 	tst.w	ip, #1
 800e1ce:	f805 e004 	strb.w	lr, [r5, r4]
 800e1d2:	bf14      	ite	ne
 800e1d4:	f890 c011 	ldrbne.w	ip, [r0, #17]
 800e1d8:	f890 c010 	ldrbeq.w	ip, [r0, #16]
 800e1dc:	6945      	ldr	r5, [r0, #20]
 800e1de:	f101 0408 	add.w	r4, r1, #8
 800e1e2:	f805 c004 	strb.w	ip, [r5, r4]
 800e1e6:	0615      	lsls	r5, r2, #24
 800e1e8:	bf54      	ite	pl
 800e1ea:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800e1ee:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800e1f2:	6945      	ldr	r5, [r0, #20]
 800e1f4:	f101 0409 	add.w	r4, r1, #9
 800e1f8:	f805 c004 	strb.w	ip, [r5, r4]
 800e1fc:	0655      	lsls	r5, r2, #25
 800e1fe:	bf54      	ite	pl
 800e200:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800e204:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800e208:	6945      	ldr	r5, [r0, #20]
 800e20a:	f101 040a 	add.w	r4, r1, #10
 800e20e:	f805 c004 	strb.w	ip, [r5, r4]
 800e212:	0695      	lsls	r5, r2, #26
 800e214:	bf54      	ite	pl
 800e216:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800e21a:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800e21e:	6945      	ldr	r5, [r0, #20]
 800e220:	f101 040b 	add.w	r4, r1, #11
 800e224:	f805 c004 	strb.w	ip, [r5, r4]
 800e228:	06d5      	lsls	r5, r2, #27
 800e22a:	bf54      	ite	pl
 800e22c:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800e230:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800e234:	6945      	ldr	r5, [r0, #20]
 800e236:	f101 040c 	add.w	r4, r1, #12
 800e23a:	f805 c004 	strb.w	ip, [r5, r4]
 800e23e:	0715      	lsls	r5, r2, #28
 800e240:	bf54      	ite	pl
 800e242:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800e246:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800e24a:	6945      	ldr	r5, [r0, #20]
 800e24c:	f101 040d 	add.w	r4, r1, #13
 800e250:	f805 c004 	strb.w	ip, [r5, r4]
 800e254:	0755      	lsls	r5, r2, #29
 800e256:	bf54      	ite	pl
 800e258:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800e25c:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800e260:	6945      	ldr	r5, [r0, #20]
 800e262:	f101 040e 	add.w	r4, r1, #14
 800e266:	f805 c004 	strb.w	ip, [r5, r4]
 800e26a:	0795      	lsls	r5, r2, #30
 800e26c:	bf58      	it	pl
 800e26e:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800e272:	6945      	ldr	r5, [r0, #20]
 800e274:	bf48      	it	mi
 800e276:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800e27a:	f101 040f 	add.w	r4, r1, #15
 800e27e:	f805 c004 	strb.w	ip, [r5, r4]
 800e282:	07d5      	lsls	r5, r2, #31
 800e284:	bf4c      	ite	mi
 800e286:	7c45      	ldrbmi	r5, [r0, #17]
 800e288:	7c05      	ldrbpl	r5, [r0, #16]
 800e28a:	6942      	ldr	r2, [r0, #20]
 800e28c:	f101 0410 	add.w	r4, r1, #16
 800e290:	5515      	strb	r5, [r2, r4]
 800e292:	061c      	lsls	r4, r3, #24
 800e294:	bf54      	ite	pl
 800e296:	7c05      	ldrbpl	r5, [r0, #16]
 800e298:	7c45      	ldrbmi	r5, [r0, #17]
 800e29a:	6944      	ldr	r4, [r0, #20]
 800e29c:	f101 0211 	add.w	r2, r1, #17
 800e2a0:	54a5      	strb	r5, [r4, r2]
 800e2a2:	065d      	lsls	r5, r3, #25
 800e2a4:	bf54      	ite	pl
 800e2a6:	7c05      	ldrbpl	r5, [r0, #16]
 800e2a8:	7c45      	ldrbmi	r5, [r0, #17]
 800e2aa:	6944      	ldr	r4, [r0, #20]
 800e2ac:	f101 0212 	add.w	r2, r1, #18
 800e2b0:	54a5      	strb	r5, [r4, r2]
 800e2b2:	069c      	lsls	r4, r3, #26
 800e2b4:	bf54      	ite	pl
 800e2b6:	7c05      	ldrbpl	r5, [r0, #16]
 800e2b8:	7c45      	ldrbmi	r5, [r0, #17]
 800e2ba:	6944      	ldr	r4, [r0, #20]
 800e2bc:	f101 0213 	add.w	r2, r1, #19
 800e2c0:	54a5      	strb	r5, [r4, r2]
 800e2c2:	06dd      	lsls	r5, r3, #27
 800e2c4:	bf54      	ite	pl
 800e2c6:	7c05      	ldrbpl	r5, [r0, #16]
 800e2c8:	7c45      	ldrbmi	r5, [r0, #17]
 800e2ca:	6944      	ldr	r4, [r0, #20]
 800e2cc:	f101 0214 	add.w	r2, r1, #20
 800e2d0:	54a5      	strb	r5, [r4, r2]
 800e2d2:	071c      	lsls	r4, r3, #28
 800e2d4:	bf54      	ite	pl
 800e2d6:	7c05      	ldrbpl	r5, [r0, #16]
 800e2d8:	7c45      	ldrbmi	r5, [r0, #17]
 800e2da:	6944      	ldr	r4, [r0, #20]
 800e2dc:	f101 0215 	add.w	r2, r1, #21
 800e2e0:	54a5      	strb	r5, [r4, r2]
 800e2e2:	075d      	lsls	r5, r3, #29
 800e2e4:	bf54      	ite	pl
 800e2e6:	7c05      	ldrbpl	r5, [r0, #16]
 800e2e8:	7c45      	ldrbmi	r5, [r0, #17]
 800e2ea:	6944      	ldr	r4, [r0, #20]
 800e2ec:	f101 0216 	add.w	r2, r1, #22
 800e2f0:	54a5      	strb	r5, [r4, r2]
 800e2f2:	079c      	lsls	r4, r3, #30
 800e2f4:	bf54      	ite	pl
 800e2f6:	7c05      	ldrbpl	r5, [r0, #16]
 800e2f8:	7c45      	ldrbmi	r5, [r0, #17]
 800e2fa:	6944      	ldr	r4, [r0, #20]
 800e2fc:	f101 0217 	add.w	r2, r1, #23
 800e300:	54a5      	strb	r5, [r4, r2]
 800e302:	3118      	adds	r1, #24
 800e304:	f013 0f01 	tst.w	r3, #1
 800e308:	f000 80d9 	beq.w	800e4be <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x442>
 800e30c:	7c42      	ldrb	r2, [r0, #17]
 800e30e:	6943      	ldr	r3, [r0, #20]
 800e310:	545a      	strb	r2, [r3, r1]
 800e312:	bd30      	pop	{r4, r5, pc}
 800e314:	0615      	lsls	r5, r2, #24
 800e316:	bf54      	ite	pl
 800e318:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e31c:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e320:	6945      	ldr	r5, [r0, #20]
 800e322:	1c4c      	adds	r4, r1, #1
 800e324:	f805 e004 	strb.w	lr, [r5, r4]
 800e328:	0655      	lsls	r5, r2, #25
 800e32a:	bf54      	ite	pl
 800e32c:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e330:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e334:	6945      	ldr	r5, [r0, #20]
 800e336:	1c8c      	adds	r4, r1, #2
 800e338:	f805 e004 	strb.w	lr, [r5, r4]
 800e33c:	0695      	lsls	r5, r2, #26
 800e33e:	bf54      	ite	pl
 800e340:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e344:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e348:	6945      	ldr	r5, [r0, #20]
 800e34a:	1ccc      	adds	r4, r1, #3
 800e34c:	f805 e004 	strb.w	lr, [r5, r4]
 800e350:	06d5      	lsls	r5, r2, #27
 800e352:	bf54      	ite	pl
 800e354:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e358:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e35c:	6945      	ldr	r5, [r0, #20]
 800e35e:	1d0c      	adds	r4, r1, #4
 800e360:	f805 e004 	strb.w	lr, [r5, r4]
 800e364:	0715      	lsls	r5, r2, #28
 800e366:	bf54      	ite	pl
 800e368:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e36c:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e370:	6945      	ldr	r5, [r0, #20]
 800e372:	1d4c      	adds	r4, r1, #5
 800e374:	f805 e004 	strb.w	lr, [r5, r4]
 800e378:	0755      	lsls	r5, r2, #29
 800e37a:	bf54      	ite	pl
 800e37c:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e380:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e384:	6945      	ldr	r5, [r0, #20]
 800e386:	1d8c      	adds	r4, r1, #6
 800e388:	f805 e004 	strb.w	lr, [r5, r4]
 800e38c:	0795      	lsls	r5, r2, #30
 800e38e:	bf58      	it	pl
 800e390:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e394:	6945      	ldr	r5, [r0, #20]
 800e396:	bf48      	it	mi
 800e398:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e39c:	1dcc      	adds	r4, r1, #7
 800e39e:	f805 e004 	strb.w	lr, [r5, r4]
 800e3a2:	07d5      	lsls	r5, r2, #31
 800e3a4:	bf4c      	ite	mi
 800e3a6:	7c45      	ldrbmi	r5, [r0, #17]
 800e3a8:	7c05      	ldrbpl	r5, [r0, #16]
 800e3aa:	6942      	ldr	r2, [r0, #20]
 800e3ac:	f101 0408 	add.w	r4, r1, #8
 800e3b0:	5515      	strb	r5, [r2, r4]
 800e3b2:	061c      	lsls	r4, r3, #24
 800e3b4:	bf54      	ite	pl
 800e3b6:	7c05      	ldrbpl	r5, [r0, #16]
 800e3b8:	7c45      	ldrbmi	r5, [r0, #17]
 800e3ba:	6944      	ldr	r4, [r0, #20]
 800e3bc:	f101 0209 	add.w	r2, r1, #9
 800e3c0:	54a5      	strb	r5, [r4, r2]
 800e3c2:	065d      	lsls	r5, r3, #25
 800e3c4:	bf54      	ite	pl
 800e3c6:	7c05      	ldrbpl	r5, [r0, #16]
 800e3c8:	7c45      	ldrbmi	r5, [r0, #17]
 800e3ca:	6944      	ldr	r4, [r0, #20]
 800e3cc:	f101 020a 	add.w	r2, r1, #10
 800e3d0:	54a5      	strb	r5, [r4, r2]
 800e3d2:	069c      	lsls	r4, r3, #26
 800e3d4:	bf54      	ite	pl
 800e3d6:	7c05      	ldrbpl	r5, [r0, #16]
 800e3d8:	7c45      	ldrbmi	r5, [r0, #17]
 800e3da:	6944      	ldr	r4, [r0, #20]
 800e3dc:	f101 020b 	add.w	r2, r1, #11
 800e3e0:	54a5      	strb	r5, [r4, r2]
 800e3e2:	06dd      	lsls	r5, r3, #27
 800e3e4:	bf54      	ite	pl
 800e3e6:	7c05      	ldrbpl	r5, [r0, #16]
 800e3e8:	7c45      	ldrbmi	r5, [r0, #17]
 800e3ea:	6944      	ldr	r4, [r0, #20]
 800e3ec:	f101 020c 	add.w	r2, r1, #12
 800e3f0:	54a5      	strb	r5, [r4, r2]
 800e3f2:	071c      	lsls	r4, r3, #28
 800e3f4:	bf54      	ite	pl
 800e3f6:	7c05      	ldrbpl	r5, [r0, #16]
 800e3f8:	7c45      	ldrbmi	r5, [r0, #17]
 800e3fa:	6944      	ldr	r4, [r0, #20]
 800e3fc:	f101 020d 	add.w	r2, r1, #13
 800e400:	54a5      	strb	r5, [r4, r2]
 800e402:	075d      	lsls	r5, r3, #29
 800e404:	bf54      	ite	pl
 800e406:	7c05      	ldrbpl	r5, [r0, #16]
 800e408:	7c45      	ldrbmi	r5, [r0, #17]
 800e40a:	6944      	ldr	r4, [r0, #20]
 800e40c:	f101 020e 	add.w	r2, r1, #14
 800e410:	54a5      	strb	r5, [r4, r2]
 800e412:	079c      	lsls	r4, r3, #30
 800e414:	bf58      	it	pl
 800e416:	7c05      	ldrbpl	r5, [r0, #16]
 800e418:	6944      	ldr	r4, [r0, #20]
 800e41a:	bf48      	it	mi
 800e41c:	7c45      	ldrbmi	r5, [r0, #17]
 800e41e:	f101 020f 	add.w	r2, r1, #15
 800e422:	54a5      	strb	r5, [r4, r2]
 800e424:	07db      	lsls	r3, r3, #31
 800e426:	bf4c      	ite	mi
 800e428:	7c44      	ldrbmi	r4, [r0, #17]
 800e42a:	7c04      	ldrbpl	r4, [r0, #16]
 800e42c:	6943      	ldr	r3, [r0, #20]
 800e42e:	f101 0210 	add.w	r2, r1, #16
 800e432:	549c      	strb	r4, [r3, r2]
 800e434:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800e438:	bf0c      	ite	eq
 800e43a:	7c04      	ldrbeq	r4, [r0, #16]
 800e43c:	7c44      	ldrbne	r4, [r0, #17]
 800e43e:	6942      	ldr	r2, [r0, #20]
 800e440:	f101 0311 	add.w	r3, r1, #17
 800e444:	54d4      	strb	r4, [r2, r3]
 800e446:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800e44a:	bf0c      	ite	eq
 800e44c:	7c04      	ldrbeq	r4, [r0, #16]
 800e44e:	7c44      	ldrbne	r4, [r0, #17]
 800e450:	6942      	ldr	r2, [r0, #20]
 800e452:	f101 0312 	add.w	r3, r1, #18
 800e456:	54d4      	strb	r4, [r2, r3]
 800e458:	f01c 0f20 	tst.w	ip, #32
 800e45c:	bf0c      	ite	eq
 800e45e:	7c04      	ldrbeq	r4, [r0, #16]
 800e460:	7c44      	ldrbne	r4, [r0, #17]
 800e462:	6942      	ldr	r2, [r0, #20]
 800e464:	f101 0313 	add.w	r3, r1, #19
 800e468:	54d4      	strb	r4, [r2, r3]
 800e46a:	f01c 0f10 	tst.w	ip, #16
 800e46e:	bf0c      	ite	eq
 800e470:	7c04      	ldrbeq	r4, [r0, #16]
 800e472:	7c44      	ldrbne	r4, [r0, #17]
 800e474:	6942      	ldr	r2, [r0, #20]
 800e476:	f101 0314 	add.w	r3, r1, #20
 800e47a:	54d4      	strb	r4, [r2, r3]
 800e47c:	f01c 0f08 	tst.w	ip, #8
 800e480:	bf0c      	ite	eq
 800e482:	7c04      	ldrbeq	r4, [r0, #16]
 800e484:	7c44      	ldrbne	r4, [r0, #17]
 800e486:	6942      	ldr	r2, [r0, #20]
 800e488:	f101 0315 	add.w	r3, r1, #21
 800e48c:	54d4      	strb	r4, [r2, r3]
 800e48e:	f01c 0f04 	tst.w	ip, #4
 800e492:	bf0c      	ite	eq
 800e494:	7c04      	ldrbeq	r4, [r0, #16]
 800e496:	7c44      	ldrbne	r4, [r0, #17]
 800e498:	6942      	ldr	r2, [r0, #20]
 800e49a:	f101 0316 	add.w	r3, r1, #22
 800e49e:	54d4      	strb	r4, [r2, r3]
 800e4a0:	f01c 0f02 	tst.w	ip, #2
 800e4a4:	bf0c      	ite	eq
 800e4a6:	7c04      	ldrbeq	r4, [r0, #16]
 800e4a8:	7c44      	ldrbne	r4, [r0, #17]
 800e4aa:	6942      	ldr	r2, [r0, #20]
 800e4ac:	f101 0317 	add.w	r3, r1, #23
 800e4b0:	f01c 0f01 	tst.w	ip, #1
 800e4b4:	54d4      	strb	r4, [r2, r3]
 800e4b6:	f101 0118 	add.w	r1, r1, #24
 800e4ba:	f47f af27 	bne.w	800e30c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x290>
 800e4be:	7c02      	ldrb	r2, [r0, #16]
 800e4c0:	e725      	b.n	800e30e <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x292>
 800e4c2:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800e4c6:	bf0c      	ite	eq
 800e4c8:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800e4cc:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800e4d0:	6945      	ldr	r5, [r0, #20]
 800e4d2:	1c4c      	adds	r4, r1, #1
 800e4d4:	f805 e004 	strb.w	lr, [r5, r4]
 800e4d8:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800e4dc:	bf0c      	ite	eq
 800e4de:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800e4e2:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800e4e6:	6945      	ldr	r5, [r0, #20]
 800e4e8:	1c8c      	adds	r4, r1, #2
 800e4ea:	f805 e004 	strb.w	lr, [r5, r4]
 800e4ee:	f01c 0f20 	tst.w	ip, #32
 800e4f2:	bf0c      	ite	eq
 800e4f4:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800e4f8:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800e4fc:	6945      	ldr	r5, [r0, #20]
 800e4fe:	1ccc      	adds	r4, r1, #3
 800e500:	f805 e004 	strb.w	lr, [r5, r4]
 800e504:	f01c 0f10 	tst.w	ip, #16
 800e508:	bf0c      	ite	eq
 800e50a:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800e50e:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800e512:	6945      	ldr	r5, [r0, #20]
 800e514:	1d0c      	adds	r4, r1, #4
 800e516:	f01c 0f08 	tst.w	ip, #8
 800e51a:	f805 e004 	strb.w	lr, [r5, r4]
 800e51e:	bf0c      	ite	eq
 800e520:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800e524:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800e528:	6945      	ldr	r5, [r0, #20]
 800e52a:	1d4c      	adds	r4, r1, #5
 800e52c:	f01c 0f04 	tst.w	ip, #4
 800e530:	f805 e004 	strb.w	lr, [r5, r4]
 800e534:	bf0c      	ite	eq
 800e536:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800e53a:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800e53e:	6945      	ldr	r5, [r0, #20]
 800e540:	1d8c      	adds	r4, r1, #6
 800e542:	f01c 0f02 	tst.w	ip, #2
 800e546:	f805 e004 	strb.w	lr, [r5, r4]
 800e54a:	bf0c      	ite	eq
 800e54c:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800e550:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800e554:	6945      	ldr	r5, [r0, #20]
 800e556:	1dcc      	adds	r4, r1, #7
 800e558:	f01c 0f01 	tst.w	ip, #1
 800e55c:	f805 e004 	strb.w	lr, [r5, r4]
 800e560:	bf14      	ite	ne
 800e562:	f890 c011 	ldrbne.w	ip, [r0, #17]
 800e566:	f890 c010 	ldrbeq.w	ip, [r0, #16]
 800e56a:	6945      	ldr	r5, [r0, #20]
 800e56c:	f101 0408 	add.w	r4, r1, #8
 800e570:	f805 c004 	strb.w	ip, [r5, r4]
 800e574:	061d      	lsls	r5, r3, #24
 800e576:	bf54      	ite	pl
 800e578:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800e57c:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800e580:	6945      	ldr	r5, [r0, #20]
 800e582:	f101 0409 	add.w	r4, r1, #9
 800e586:	f805 c004 	strb.w	ip, [r5, r4]
 800e58a:	065d      	lsls	r5, r3, #25
 800e58c:	bf54      	ite	pl
 800e58e:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800e592:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800e596:	6945      	ldr	r5, [r0, #20]
 800e598:	f101 040a 	add.w	r4, r1, #10
 800e59c:	f805 c004 	strb.w	ip, [r5, r4]
 800e5a0:	069d      	lsls	r5, r3, #26
 800e5a2:	bf54      	ite	pl
 800e5a4:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800e5a8:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800e5ac:	6945      	ldr	r5, [r0, #20]
 800e5ae:	f101 040b 	add.w	r4, r1, #11
 800e5b2:	f805 c004 	strb.w	ip, [r5, r4]
 800e5b6:	06dd      	lsls	r5, r3, #27
 800e5b8:	bf54      	ite	pl
 800e5ba:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800e5be:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800e5c2:	6945      	ldr	r5, [r0, #20]
 800e5c4:	f101 040c 	add.w	r4, r1, #12
 800e5c8:	f805 c004 	strb.w	ip, [r5, r4]
 800e5cc:	071d      	lsls	r5, r3, #28
 800e5ce:	bf54      	ite	pl
 800e5d0:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800e5d4:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800e5d8:	6945      	ldr	r5, [r0, #20]
 800e5da:	f101 040d 	add.w	r4, r1, #13
 800e5de:	f805 c004 	strb.w	ip, [r5, r4]
 800e5e2:	075d      	lsls	r5, r3, #29
 800e5e4:	bf54      	ite	pl
 800e5e6:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800e5ea:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800e5ee:	6945      	ldr	r5, [r0, #20]
 800e5f0:	f101 040e 	add.w	r4, r1, #14
 800e5f4:	f805 c004 	strb.w	ip, [r5, r4]
 800e5f8:	079d      	lsls	r5, r3, #30
 800e5fa:	bf58      	it	pl
 800e5fc:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800e600:	6945      	ldr	r5, [r0, #20]
 800e602:	bf48      	it	mi
 800e604:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800e608:	f101 040f 	add.w	r4, r1, #15
 800e60c:	f805 c004 	strb.w	ip, [r5, r4]
 800e610:	07dd      	lsls	r5, r3, #31
 800e612:	bf4c      	ite	mi
 800e614:	7c45      	ldrbmi	r5, [r0, #17]
 800e616:	7c05      	ldrbpl	r5, [r0, #16]
 800e618:	6943      	ldr	r3, [r0, #20]
 800e61a:	f101 0410 	add.w	r4, r1, #16
 800e61e:	551d      	strb	r5, [r3, r4]
 800e620:	0614      	lsls	r4, r2, #24
 800e622:	bf54      	ite	pl
 800e624:	7c05      	ldrbpl	r5, [r0, #16]
 800e626:	7c45      	ldrbmi	r5, [r0, #17]
 800e628:	6944      	ldr	r4, [r0, #20]
 800e62a:	f101 0311 	add.w	r3, r1, #17
 800e62e:	54e5      	strb	r5, [r4, r3]
 800e630:	0655      	lsls	r5, r2, #25
 800e632:	bf54      	ite	pl
 800e634:	7c05      	ldrbpl	r5, [r0, #16]
 800e636:	7c45      	ldrbmi	r5, [r0, #17]
 800e638:	6944      	ldr	r4, [r0, #20]
 800e63a:	f101 0312 	add.w	r3, r1, #18
 800e63e:	54e5      	strb	r5, [r4, r3]
 800e640:	0694      	lsls	r4, r2, #26
 800e642:	bf54      	ite	pl
 800e644:	7c05      	ldrbpl	r5, [r0, #16]
 800e646:	7c45      	ldrbmi	r5, [r0, #17]
 800e648:	6944      	ldr	r4, [r0, #20]
 800e64a:	f101 0313 	add.w	r3, r1, #19
 800e64e:	54e5      	strb	r5, [r4, r3]
 800e650:	06d5      	lsls	r5, r2, #27
 800e652:	bf54      	ite	pl
 800e654:	7c05      	ldrbpl	r5, [r0, #16]
 800e656:	7c45      	ldrbmi	r5, [r0, #17]
 800e658:	6944      	ldr	r4, [r0, #20]
 800e65a:	f101 0314 	add.w	r3, r1, #20
 800e65e:	54e5      	strb	r5, [r4, r3]
 800e660:	0714      	lsls	r4, r2, #28
 800e662:	bf54      	ite	pl
 800e664:	7c05      	ldrbpl	r5, [r0, #16]
 800e666:	7c45      	ldrbmi	r5, [r0, #17]
 800e668:	6944      	ldr	r4, [r0, #20]
 800e66a:	f101 0315 	add.w	r3, r1, #21
 800e66e:	54e5      	strb	r5, [r4, r3]
 800e670:	0755      	lsls	r5, r2, #29
 800e672:	bf54      	ite	pl
 800e674:	7c05      	ldrbpl	r5, [r0, #16]
 800e676:	7c45      	ldrbmi	r5, [r0, #17]
 800e678:	6944      	ldr	r4, [r0, #20]
 800e67a:	f101 0316 	add.w	r3, r1, #22
 800e67e:	54e5      	strb	r5, [r4, r3]
 800e680:	0794      	lsls	r4, r2, #30
 800e682:	bf54      	ite	pl
 800e684:	7c05      	ldrbpl	r5, [r0, #16]
 800e686:	7c45      	ldrbmi	r5, [r0, #17]
 800e688:	6944      	ldr	r4, [r0, #20]
 800e68a:	f101 0317 	add.w	r3, r1, #23
 800e68e:	54e5      	strb	r5, [r4, r3]
 800e690:	3118      	adds	r1, #24
 800e692:	f012 0f01 	tst.w	r2, #1
 800e696:	e637      	b.n	800e308 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x28c>
 800e698:	0615      	lsls	r5, r2, #24
 800e69a:	bf54      	ite	pl
 800e69c:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e6a0:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e6a4:	6945      	ldr	r5, [r0, #20]
 800e6a6:	1c4c      	adds	r4, r1, #1
 800e6a8:	f805 e004 	strb.w	lr, [r5, r4]
 800e6ac:	0655      	lsls	r5, r2, #25
 800e6ae:	bf54      	ite	pl
 800e6b0:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e6b4:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e6b8:	6945      	ldr	r5, [r0, #20]
 800e6ba:	1c8c      	adds	r4, r1, #2
 800e6bc:	f805 e004 	strb.w	lr, [r5, r4]
 800e6c0:	0695      	lsls	r5, r2, #26
 800e6c2:	bf54      	ite	pl
 800e6c4:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e6c8:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e6cc:	6945      	ldr	r5, [r0, #20]
 800e6ce:	1ccc      	adds	r4, r1, #3
 800e6d0:	f805 e004 	strb.w	lr, [r5, r4]
 800e6d4:	06d5      	lsls	r5, r2, #27
 800e6d6:	bf54      	ite	pl
 800e6d8:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e6dc:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e6e0:	6945      	ldr	r5, [r0, #20]
 800e6e2:	1d0c      	adds	r4, r1, #4
 800e6e4:	f805 e004 	strb.w	lr, [r5, r4]
 800e6e8:	0715      	lsls	r5, r2, #28
 800e6ea:	bf54      	ite	pl
 800e6ec:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e6f0:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e6f4:	6945      	ldr	r5, [r0, #20]
 800e6f6:	1d4c      	adds	r4, r1, #5
 800e6f8:	f805 e004 	strb.w	lr, [r5, r4]
 800e6fc:	0755      	lsls	r5, r2, #29
 800e6fe:	bf54      	ite	pl
 800e700:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e704:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e708:	6945      	ldr	r5, [r0, #20]
 800e70a:	1d8c      	adds	r4, r1, #6
 800e70c:	f805 e004 	strb.w	lr, [r5, r4]
 800e710:	0795      	lsls	r5, r2, #30
 800e712:	bf58      	it	pl
 800e714:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e718:	6945      	ldr	r5, [r0, #20]
 800e71a:	bf48      	it	mi
 800e71c:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e720:	1dcc      	adds	r4, r1, #7
 800e722:	f805 e004 	strb.w	lr, [r5, r4]
 800e726:	07d2      	lsls	r2, r2, #31
 800e728:	bf4c      	ite	mi
 800e72a:	7c45      	ldrbmi	r5, [r0, #17]
 800e72c:	7c05      	ldrbpl	r5, [r0, #16]
 800e72e:	6942      	ldr	r2, [r0, #20]
 800e730:	f101 0408 	add.w	r4, r1, #8
 800e734:	5515      	strb	r5, [r2, r4]
 800e736:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800e73a:	bf0c      	ite	eq
 800e73c:	7c05      	ldrbeq	r5, [r0, #16]
 800e73e:	7c45      	ldrbne	r5, [r0, #17]
 800e740:	6944      	ldr	r4, [r0, #20]
 800e742:	f101 0209 	add.w	r2, r1, #9
 800e746:	54a5      	strb	r5, [r4, r2]
 800e748:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800e74c:	bf0c      	ite	eq
 800e74e:	7c05      	ldrbeq	r5, [r0, #16]
 800e750:	7c45      	ldrbne	r5, [r0, #17]
 800e752:	6944      	ldr	r4, [r0, #20]
 800e754:	f101 020a 	add.w	r2, r1, #10
 800e758:	54a5      	strb	r5, [r4, r2]
 800e75a:	f01c 0f20 	tst.w	ip, #32
 800e75e:	bf0c      	ite	eq
 800e760:	7c05      	ldrbeq	r5, [r0, #16]
 800e762:	7c45      	ldrbne	r5, [r0, #17]
 800e764:	6944      	ldr	r4, [r0, #20]
 800e766:	f101 020b 	add.w	r2, r1, #11
 800e76a:	54a5      	strb	r5, [r4, r2]
 800e76c:	f01c 0f10 	tst.w	ip, #16
 800e770:	bf0c      	ite	eq
 800e772:	7c05      	ldrbeq	r5, [r0, #16]
 800e774:	7c45      	ldrbne	r5, [r0, #17]
 800e776:	6944      	ldr	r4, [r0, #20]
 800e778:	f101 020c 	add.w	r2, r1, #12
 800e77c:	54a5      	strb	r5, [r4, r2]
 800e77e:	f01c 0f08 	tst.w	ip, #8
 800e782:	bf0c      	ite	eq
 800e784:	7c05      	ldrbeq	r5, [r0, #16]
 800e786:	7c45      	ldrbne	r5, [r0, #17]
 800e788:	6944      	ldr	r4, [r0, #20]
 800e78a:	f101 020d 	add.w	r2, r1, #13
 800e78e:	54a5      	strb	r5, [r4, r2]
 800e790:	f01c 0f04 	tst.w	ip, #4
 800e794:	bf0c      	ite	eq
 800e796:	7c05      	ldrbeq	r5, [r0, #16]
 800e798:	7c45      	ldrbne	r5, [r0, #17]
 800e79a:	6944      	ldr	r4, [r0, #20]
 800e79c:	f101 020e 	add.w	r2, r1, #14
 800e7a0:	54a5      	strb	r5, [r4, r2]
 800e7a2:	f01c 0f02 	tst.w	ip, #2
 800e7a6:	bf0c      	ite	eq
 800e7a8:	7c05      	ldrbeq	r5, [r0, #16]
 800e7aa:	7c45      	ldrbne	r5, [r0, #17]
 800e7ac:	6944      	ldr	r4, [r0, #20]
 800e7ae:	f101 020f 	add.w	r2, r1, #15
 800e7b2:	54a5      	strb	r5, [r4, r2]
 800e7b4:	f01c 0f01 	tst.w	ip, #1
 800e7b8:	bf14      	ite	ne
 800e7ba:	7c45      	ldrbne	r5, [r0, #17]
 800e7bc:	7c05      	ldrbeq	r5, [r0, #16]
 800e7be:	6944      	ldr	r4, [r0, #20]
 800e7c0:	f101 0210 	add.w	r2, r1, #16
 800e7c4:	e564      	b.n	800e290 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x214>
 800e7c6:	061d      	lsls	r5, r3, #24
 800e7c8:	bf54      	ite	pl
 800e7ca:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e7ce:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e7d2:	6945      	ldr	r5, [r0, #20]
 800e7d4:	1c4c      	adds	r4, r1, #1
 800e7d6:	f805 e004 	strb.w	lr, [r5, r4]
 800e7da:	065d      	lsls	r5, r3, #25
 800e7dc:	bf54      	ite	pl
 800e7de:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e7e2:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e7e6:	6945      	ldr	r5, [r0, #20]
 800e7e8:	1c8c      	adds	r4, r1, #2
 800e7ea:	f805 e004 	strb.w	lr, [r5, r4]
 800e7ee:	069d      	lsls	r5, r3, #26
 800e7f0:	bf54      	ite	pl
 800e7f2:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e7f6:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e7fa:	6945      	ldr	r5, [r0, #20]
 800e7fc:	1ccc      	adds	r4, r1, #3
 800e7fe:	f805 e004 	strb.w	lr, [r5, r4]
 800e802:	06dd      	lsls	r5, r3, #27
 800e804:	bf54      	ite	pl
 800e806:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e80a:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e80e:	6945      	ldr	r5, [r0, #20]
 800e810:	1d0c      	adds	r4, r1, #4
 800e812:	f805 e004 	strb.w	lr, [r5, r4]
 800e816:	071d      	lsls	r5, r3, #28
 800e818:	bf54      	ite	pl
 800e81a:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e81e:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e822:	6945      	ldr	r5, [r0, #20]
 800e824:	1d4c      	adds	r4, r1, #5
 800e826:	f805 e004 	strb.w	lr, [r5, r4]
 800e82a:	075d      	lsls	r5, r3, #29
 800e82c:	bf54      	ite	pl
 800e82e:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e832:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e836:	6945      	ldr	r5, [r0, #20]
 800e838:	1d8c      	adds	r4, r1, #6
 800e83a:	f805 e004 	strb.w	lr, [r5, r4]
 800e83e:	079d      	lsls	r5, r3, #30
 800e840:	bf58      	it	pl
 800e842:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e846:	6945      	ldr	r5, [r0, #20]
 800e848:	bf48      	it	mi
 800e84a:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e84e:	1dcc      	adds	r4, r1, #7
 800e850:	f805 e004 	strb.w	lr, [r5, r4]
 800e854:	07dd      	lsls	r5, r3, #31
 800e856:	bf4c      	ite	mi
 800e858:	7c45      	ldrbmi	r5, [r0, #17]
 800e85a:	7c05      	ldrbpl	r5, [r0, #16]
 800e85c:	6943      	ldr	r3, [r0, #20]
 800e85e:	f101 0408 	add.w	r4, r1, #8
 800e862:	551d      	strb	r5, [r3, r4]
 800e864:	0614      	lsls	r4, r2, #24
 800e866:	bf54      	ite	pl
 800e868:	7c05      	ldrbpl	r5, [r0, #16]
 800e86a:	7c45      	ldrbmi	r5, [r0, #17]
 800e86c:	6944      	ldr	r4, [r0, #20]
 800e86e:	f101 0309 	add.w	r3, r1, #9
 800e872:	54e5      	strb	r5, [r4, r3]
 800e874:	0655      	lsls	r5, r2, #25
 800e876:	bf54      	ite	pl
 800e878:	7c05      	ldrbpl	r5, [r0, #16]
 800e87a:	7c45      	ldrbmi	r5, [r0, #17]
 800e87c:	6944      	ldr	r4, [r0, #20]
 800e87e:	f101 030a 	add.w	r3, r1, #10
 800e882:	54e5      	strb	r5, [r4, r3]
 800e884:	0694      	lsls	r4, r2, #26
 800e886:	bf54      	ite	pl
 800e888:	7c05      	ldrbpl	r5, [r0, #16]
 800e88a:	7c45      	ldrbmi	r5, [r0, #17]
 800e88c:	6944      	ldr	r4, [r0, #20]
 800e88e:	f101 030b 	add.w	r3, r1, #11
 800e892:	54e5      	strb	r5, [r4, r3]
 800e894:	06d5      	lsls	r5, r2, #27
 800e896:	bf54      	ite	pl
 800e898:	7c05      	ldrbpl	r5, [r0, #16]
 800e89a:	7c45      	ldrbmi	r5, [r0, #17]
 800e89c:	6944      	ldr	r4, [r0, #20]
 800e89e:	f101 030c 	add.w	r3, r1, #12
 800e8a2:	54e5      	strb	r5, [r4, r3]
 800e8a4:	0714      	lsls	r4, r2, #28
 800e8a6:	bf54      	ite	pl
 800e8a8:	7c05      	ldrbpl	r5, [r0, #16]
 800e8aa:	7c45      	ldrbmi	r5, [r0, #17]
 800e8ac:	6944      	ldr	r4, [r0, #20]
 800e8ae:	f101 030d 	add.w	r3, r1, #13
 800e8b2:	54e5      	strb	r5, [r4, r3]
 800e8b4:	0755      	lsls	r5, r2, #29
 800e8b6:	bf54      	ite	pl
 800e8b8:	7c05      	ldrbpl	r5, [r0, #16]
 800e8ba:	7c45      	ldrbmi	r5, [r0, #17]
 800e8bc:	6944      	ldr	r4, [r0, #20]
 800e8be:	f101 030e 	add.w	r3, r1, #14
 800e8c2:	54e5      	strb	r5, [r4, r3]
 800e8c4:	0794      	lsls	r4, r2, #30
 800e8c6:	bf58      	it	pl
 800e8c8:	7c05      	ldrbpl	r5, [r0, #16]
 800e8ca:	6944      	ldr	r4, [r0, #20]
 800e8cc:	bf48      	it	mi
 800e8ce:	7c45      	ldrbmi	r5, [r0, #17]
 800e8d0:	f101 030f 	add.w	r3, r1, #15
 800e8d4:	54e5      	strb	r5, [r4, r3]
 800e8d6:	07d2      	lsls	r2, r2, #31
 800e8d8:	bf4c      	ite	mi
 800e8da:	7c44      	ldrbmi	r4, [r0, #17]
 800e8dc:	7c04      	ldrbpl	r4, [r0, #16]
 800e8de:	6942      	ldr	r2, [r0, #20]
 800e8e0:	f101 0310 	add.w	r3, r1, #16
 800e8e4:	e5a5      	b.n	800e432 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x3b6>
 800e8e6:	061d      	lsls	r5, r3, #24
 800e8e8:	bf54      	ite	pl
 800e8ea:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e8ee:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e8f2:	6945      	ldr	r5, [r0, #20]
 800e8f4:	1c4c      	adds	r4, r1, #1
 800e8f6:	f805 e004 	strb.w	lr, [r5, r4]
 800e8fa:	065d      	lsls	r5, r3, #25
 800e8fc:	bf54      	ite	pl
 800e8fe:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e902:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e906:	6945      	ldr	r5, [r0, #20]
 800e908:	1c8c      	adds	r4, r1, #2
 800e90a:	f805 e004 	strb.w	lr, [r5, r4]
 800e90e:	069d      	lsls	r5, r3, #26
 800e910:	bf54      	ite	pl
 800e912:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e916:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e91a:	6945      	ldr	r5, [r0, #20]
 800e91c:	1ccc      	adds	r4, r1, #3
 800e91e:	f805 e004 	strb.w	lr, [r5, r4]
 800e922:	06dd      	lsls	r5, r3, #27
 800e924:	bf54      	ite	pl
 800e926:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e92a:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e92e:	6945      	ldr	r5, [r0, #20]
 800e930:	1d0c      	adds	r4, r1, #4
 800e932:	f805 e004 	strb.w	lr, [r5, r4]
 800e936:	071d      	lsls	r5, r3, #28
 800e938:	bf54      	ite	pl
 800e93a:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e93e:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e942:	6945      	ldr	r5, [r0, #20]
 800e944:	1d4c      	adds	r4, r1, #5
 800e946:	f805 e004 	strb.w	lr, [r5, r4]
 800e94a:	075d      	lsls	r5, r3, #29
 800e94c:	bf54      	ite	pl
 800e94e:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e952:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e956:	6945      	ldr	r5, [r0, #20]
 800e958:	1d8c      	adds	r4, r1, #6
 800e95a:	f805 e004 	strb.w	lr, [r5, r4]
 800e95e:	079d      	lsls	r5, r3, #30
 800e960:	bf58      	it	pl
 800e962:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800e966:	6945      	ldr	r5, [r0, #20]
 800e968:	bf48      	it	mi
 800e96a:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800e96e:	1dcc      	adds	r4, r1, #7
 800e970:	f805 e004 	strb.w	lr, [r5, r4]
 800e974:	07db      	lsls	r3, r3, #31
 800e976:	bf4c      	ite	mi
 800e978:	7c45      	ldrbmi	r5, [r0, #17]
 800e97a:	7c05      	ldrbpl	r5, [r0, #16]
 800e97c:	6943      	ldr	r3, [r0, #20]
 800e97e:	f101 0408 	add.w	r4, r1, #8
 800e982:	551d      	strb	r5, [r3, r4]
 800e984:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800e988:	bf0c      	ite	eq
 800e98a:	7c05      	ldrbeq	r5, [r0, #16]
 800e98c:	7c45      	ldrbne	r5, [r0, #17]
 800e98e:	6944      	ldr	r4, [r0, #20]
 800e990:	f101 0309 	add.w	r3, r1, #9
 800e994:	54e5      	strb	r5, [r4, r3]
 800e996:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800e99a:	bf0c      	ite	eq
 800e99c:	7c05      	ldrbeq	r5, [r0, #16]
 800e99e:	7c45      	ldrbne	r5, [r0, #17]
 800e9a0:	6944      	ldr	r4, [r0, #20]
 800e9a2:	f101 030a 	add.w	r3, r1, #10
 800e9a6:	54e5      	strb	r5, [r4, r3]
 800e9a8:	f01c 0f20 	tst.w	ip, #32
 800e9ac:	bf0c      	ite	eq
 800e9ae:	7c05      	ldrbeq	r5, [r0, #16]
 800e9b0:	7c45      	ldrbne	r5, [r0, #17]
 800e9b2:	6944      	ldr	r4, [r0, #20]
 800e9b4:	f101 030b 	add.w	r3, r1, #11
 800e9b8:	54e5      	strb	r5, [r4, r3]
 800e9ba:	f01c 0f10 	tst.w	ip, #16
 800e9be:	bf0c      	ite	eq
 800e9c0:	7c05      	ldrbeq	r5, [r0, #16]
 800e9c2:	7c45      	ldrbne	r5, [r0, #17]
 800e9c4:	6944      	ldr	r4, [r0, #20]
 800e9c6:	f101 030c 	add.w	r3, r1, #12
 800e9ca:	54e5      	strb	r5, [r4, r3]
 800e9cc:	f01c 0f08 	tst.w	ip, #8
 800e9d0:	bf0c      	ite	eq
 800e9d2:	7c05      	ldrbeq	r5, [r0, #16]
 800e9d4:	7c45      	ldrbne	r5, [r0, #17]
 800e9d6:	6944      	ldr	r4, [r0, #20]
 800e9d8:	f101 030d 	add.w	r3, r1, #13
 800e9dc:	54e5      	strb	r5, [r4, r3]
 800e9de:	f01c 0f04 	tst.w	ip, #4
 800e9e2:	bf0c      	ite	eq
 800e9e4:	7c05      	ldrbeq	r5, [r0, #16]
 800e9e6:	7c45      	ldrbne	r5, [r0, #17]
 800e9e8:	6944      	ldr	r4, [r0, #20]
 800e9ea:	f101 030e 	add.w	r3, r1, #14
 800e9ee:	54e5      	strb	r5, [r4, r3]
 800e9f0:	f01c 0f02 	tst.w	ip, #2
 800e9f4:	bf0c      	ite	eq
 800e9f6:	7c05      	ldrbeq	r5, [r0, #16]
 800e9f8:	7c45      	ldrbne	r5, [r0, #17]
 800e9fa:	6944      	ldr	r4, [r0, #20]
 800e9fc:	f101 030f 	add.w	r3, r1, #15
 800ea00:	54e5      	strb	r5, [r4, r3]
 800ea02:	f01c 0f01 	tst.w	ip, #1
 800ea06:	bf14      	ite	ne
 800ea08:	7c45      	ldrbne	r5, [r0, #17]
 800ea0a:	7c05      	ldrbeq	r5, [r0, #16]
 800ea0c:	6944      	ldr	r4, [r0, #20]
 800ea0e:	f101 0310 	add.w	r3, r1, #16
 800ea12:	e604      	b.n	800e61e <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x5a2>

0800ea14 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>:
 800ea14:	b570      	push	{r4, r5, r6, lr}
 800ea16:	6804      	ldr	r4, [r0, #0]
 800ea18:	f89d c010 	ldrb.w	ip, [sp, #16]
 800ea1c:	2c07      	cmp	r4, #7
 800ea1e:	f89d e014 	ldrb.w	lr, [sp, #20]
 800ea22:	d000      	beq.n	800ea26 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)+0x12>
 800ea24:	bd70      	pop	{r4, r5, r6, pc}
 800ea26:	061e      	lsls	r6, r3, #24
 800ea28:	ea4f 1141 	mov.w	r1, r1, lsl #5
 800ea2c:	bf54      	ite	pl
 800ea2e:	7c06      	ldrbpl	r6, [r0, #16]
 800ea30:	7c46      	ldrbmi	r6, [r0, #17]
 800ea32:	6945      	ldr	r5, [r0, #20]
 800ea34:	1c4c      	adds	r4, r1, #1
 800ea36:	552e      	strb	r6, [r5, r4]
 800ea38:	065d      	lsls	r5, r3, #25
 800ea3a:	bf54      	ite	pl
 800ea3c:	7c06      	ldrbpl	r6, [r0, #16]
 800ea3e:	7c46      	ldrbmi	r6, [r0, #17]
 800ea40:	6945      	ldr	r5, [r0, #20]
 800ea42:	1c8c      	adds	r4, r1, #2
 800ea44:	552e      	strb	r6, [r5, r4]
 800ea46:	069e      	lsls	r6, r3, #26
 800ea48:	bf54      	ite	pl
 800ea4a:	7c06      	ldrbpl	r6, [r0, #16]
 800ea4c:	7c46      	ldrbmi	r6, [r0, #17]
 800ea4e:	6945      	ldr	r5, [r0, #20]
 800ea50:	1ccc      	adds	r4, r1, #3
 800ea52:	552e      	strb	r6, [r5, r4]
 800ea54:	06dd      	lsls	r5, r3, #27
 800ea56:	bf54      	ite	pl
 800ea58:	7c06      	ldrbpl	r6, [r0, #16]
 800ea5a:	7c46      	ldrbmi	r6, [r0, #17]
 800ea5c:	6945      	ldr	r5, [r0, #20]
 800ea5e:	1d0c      	adds	r4, r1, #4
 800ea60:	552e      	strb	r6, [r5, r4]
 800ea62:	071e      	lsls	r6, r3, #28
 800ea64:	bf54      	ite	pl
 800ea66:	7c06      	ldrbpl	r6, [r0, #16]
 800ea68:	7c46      	ldrbmi	r6, [r0, #17]
 800ea6a:	6945      	ldr	r5, [r0, #20]
 800ea6c:	1d4c      	adds	r4, r1, #5
 800ea6e:	552e      	strb	r6, [r5, r4]
 800ea70:	075d      	lsls	r5, r3, #29
 800ea72:	bf54      	ite	pl
 800ea74:	7c06      	ldrbpl	r6, [r0, #16]
 800ea76:	7c46      	ldrbmi	r6, [r0, #17]
 800ea78:	6945      	ldr	r5, [r0, #20]
 800ea7a:	1d8c      	adds	r4, r1, #6
 800ea7c:	552e      	strb	r6, [r5, r4]
 800ea7e:	079e      	lsls	r6, r3, #30
 800ea80:	6945      	ldr	r5, [r0, #20]
 800ea82:	bf54      	ite	pl
 800ea84:	7c06      	ldrbpl	r6, [r0, #16]
 800ea86:	7c46      	ldrbmi	r6, [r0, #17]
 800ea88:	1dcc      	adds	r4, r1, #7
 800ea8a:	552e      	strb	r6, [r5, r4]
 800ea8c:	07dd      	lsls	r5, r3, #31
 800ea8e:	bf4c      	ite	mi
 800ea90:	7c45      	ldrbmi	r5, [r0, #17]
 800ea92:	7c05      	ldrbpl	r5, [r0, #16]
 800ea94:	6943      	ldr	r3, [r0, #20]
 800ea96:	f101 0408 	add.w	r4, r1, #8
 800ea9a:	551d      	strb	r5, [r3, r4]
 800ea9c:	0614      	lsls	r4, r2, #24
 800ea9e:	bf54      	ite	pl
 800eaa0:	7c05      	ldrbpl	r5, [r0, #16]
 800eaa2:	7c45      	ldrbmi	r5, [r0, #17]
 800eaa4:	6944      	ldr	r4, [r0, #20]
 800eaa6:	f101 0309 	add.w	r3, r1, #9
 800eaaa:	54e5      	strb	r5, [r4, r3]
 800eaac:	0656      	lsls	r6, r2, #25
 800eaae:	bf54      	ite	pl
 800eab0:	7c05      	ldrbpl	r5, [r0, #16]
 800eab2:	7c45      	ldrbmi	r5, [r0, #17]
 800eab4:	6944      	ldr	r4, [r0, #20]
 800eab6:	f101 030a 	add.w	r3, r1, #10
 800eaba:	54e5      	strb	r5, [r4, r3]
 800eabc:	0695      	lsls	r5, r2, #26
 800eabe:	bf54      	ite	pl
 800eac0:	7c05      	ldrbpl	r5, [r0, #16]
 800eac2:	7c45      	ldrbmi	r5, [r0, #17]
 800eac4:	6944      	ldr	r4, [r0, #20]
 800eac6:	f101 030b 	add.w	r3, r1, #11
 800eaca:	54e5      	strb	r5, [r4, r3]
 800eacc:	06d4      	lsls	r4, r2, #27
 800eace:	bf54      	ite	pl
 800ead0:	7c05      	ldrbpl	r5, [r0, #16]
 800ead2:	7c45      	ldrbmi	r5, [r0, #17]
 800ead4:	6944      	ldr	r4, [r0, #20]
 800ead6:	f101 030c 	add.w	r3, r1, #12
 800eada:	54e5      	strb	r5, [r4, r3]
 800eadc:	0716      	lsls	r6, r2, #28
 800eade:	bf54      	ite	pl
 800eae0:	7c05      	ldrbpl	r5, [r0, #16]
 800eae2:	7c45      	ldrbmi	r5, [r0, #17]
 800eae4:	6944      	ldr	r4, [r0, #20]
 800eae6:	f101 030d 	add.w	r3, r1, #13
 800eaea:	54e5      	strb	r5, [r4, r3]
 800eaec:	0755      	lsls	r5, r2, #29
 800eaee:	bf54      	ite	pl
 800eaf0:	7c05      	ldrbpl	r5, [r0, #16]
 800eaf2:	7c45      	ldrbmi	r5, [r0, #17]
 800eaf4:	6944      	ldr	r4, [r0, #20]
 800eaf6:	f101 030e 	add.w	r3, r1, #14
 800eafa:	54e5      	strb	r5, [r4, r3]
 800eafc:	0794      	lsls	r4, r2, #30
 800eafe:	bf58      	it	pl
 800eb00:	7c05      	ldrbpl	r5, [r0, #16]
 800eb02:	6944      	ldr	r4, [r0, #20]
 800eb04:	bf48      	it	mi
 800eb06:	7c45      	ldrbmi	r5, [r0, #17]
 800eb08:	f101 030f 	add.w	r3, r1, #15
 800eb0c:	54e5      	strb	r5, [r4, r3]
 800eb0e:	07d2      	lsls	r2, r2, #31
 800eb10:	bf4c      	ite	mi
 800eb12:	7c44      	ldrbmi	r4, [r0, #17]
 800eb14:	7c04      	ldrbpl	r4, [r0, #16]
 800eb16:	6942      	ldr	r2, [r0, #20]
 800eb18:	f101 0310 	add.w	r3, r1, #16
 800eb1c:	54d4      	strb	r4, [r2, r3]
 800eb1e:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800eb22:	bf0c      	ite	eq
 800eb24:	7c04      	ldrbeq	r4, [r0, #16]
 800eb26:	7c44      	ldrbne	r4, [r0, #17]
 800eb28:	6942      	ldr	r2, [r0, #20]
 800eb2a:	f101 0311 	add.w	r3, r1, #17
 800eb2e:	54d4      	strb	r4, [r2, r3]
 800eb30:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800eb34:	bf14      	ite	ne
 800eb36:	7c44      	ldrbne	r4, [r0, #17]
 800eb38:	7c04      	ldrbeq	r4, [r0, #16]
 800eb3a:	6942      	ldr	r2, [r0, #20]
 800eb3c:	f101 0312 	add.w	r3, r1, #18
 800eb40:	54d4      	strb	r4, [r2, r3]
 800eb42:	f01c 0f20 	tst.w	ip, #32
 800eb46:	bf14      	ite	ne
 800eb48:	7c44      	ldrbne	r4, [r0, #17]
 800eb4a:	7c04      	ldrbeq	r4, [r0, #16]
 800eb4c:	6942      	ldr	r2, [r0, #20]
 800eb4e:	f101 0313 	add.w	r3, r1, #19
 800eb52:	54d4      	strb	r4, [r2, r3]
 800eb54:	f01c 0f10 	tst.w	ip, #16
 800eb58:	bf14      	ite	ne
 800eb5a:	7c44      	ldrbne	r4, [r0, #17]
 800eb5c:	7c04      	ldrbeq	r4, [r0, #16]
 800eb5e:	6942      	ldr	r2, [r0, #20]
 800eb60:	f101 0314 	add.w	r3, r1, #20
 800eb64:	54d4      	strb	r4, [r2, r3]
 800eb66:	f01c 0f08 	tst.w	ip, #8
 800eb6a:	bf14      	ite	ne
 800eb6c:	7c44      	ldrbne	r4, [r0, #17]
 800eb6e:	7c04      	ldrbeq	r4, [r0, #16]
 800eb70:	6942      	ldr	r2, [r0, #20]
 800eb72:	f101 0315 	add.w	r3, r1, #21
 800eb76:	54d4      	strb	r4, [r2, r3]
 800eb78:	f01c 0f04 	tst.w	ip, #4
 800eb7c:	bf14      	ite	ne
 800eb7e:	7c44      	ldrbne	r4, [r0, #17]
 800eb80:	7c04      	ldrbeq	r4, [r0, #16]
 800eb82:	6942      	ldr	r2, [r0, #20]
 800eb84:	f101 0316 	add.w	r3, r1, #22
 800eb88:	54d4      	strb	r4, [r2, r3]
 800eb8a:	f01c 0f02 	tst.w	ip, #2
 800eb8e:	bf14      	ite	ne
 800eb90:	7c44      	ldrbne	r4, [r0, #17]
 800eb92:	7c04      	ldrbeq	r4, [r0, #16]
 800eb94:	6942      	ldr	r2, [r0, #20]
 800eb96:	f101 0317 	add.w	r3, r1, #23
 800eb9a:	54d4      	strb	r4, [r2, r3]
 800eb9c:	f01c 0f01 	tst.w	ip, #1
 800eba0:	bf14      	ite	ne
 800eba2:	7c44      	ldrbne	r4, [r0, #17]
 800eba4:	7c04      	ldrbeq	r4, [r0, #16]
 800eba6:	6942      	ldr	r2, [r0, #20]
 800eba8:	f101 0318 	add.w	r3, r1, #24
 800ebac:	54d4      	strb	r4, [r2, r3]
 800ebae:	f01e 0f80 	tst.w	lr, #128	; 0x80
 800ebb2:	bf0c      	ite	eq
 800ebb4:	7c04      	ldrbeq	r4, [r0, #16]
 800ebb6:	7c44      	ldrbne	r4, [r0, #17]
 800ebb8:	6942      	ldr	r2, [r0, #20]
 800ebba:	f101 0319 	add.w	r3, r1, #25
 800ebbe:	54d4      	strb	r4, [r2, r3]
 800ebc0:	f01e 0f40 	tst.w	lr, #64	; 0x40
 800ebc4:	bf0c      	ite	eq
 800ebc6:	7c04      	ldrbeq	r4, [r0, #16]
 800ebc8:	7c44      	ldrbne	r4, [r0, #17]
 800ebca:	6942      	ldr	r2, [r0, #20]
 800ebcc:	f101 031a 	add.w	r3, r1, #26
 800ebd0:	54d4      	strb	r4, [r2, r3]
 800ebd2:	f01e 0f20 	tst.w	lr, #32
 800ebd6:	bf0c      	ite	eq
 800ebd8:	7c04      	ldrbeq	r4, [r0, #16]
 800ebda:	7c44      	ldrbne	r4, [r0, #17]
 800ebdc:	6942      	ldr	r2, [r0, #20]
 800ebde:	f101 031b 	add.w	r3, r1, #27
 800ebe2:	54d4      	strb	r4, [r2, r3]
 800ebe4:	f01e 0f10 	tst.w	lr, #16
 800ebe8:	bf0c      	ite	eq
 800ebea:	7c04      	ldrbeq	r4, [r0, #16]
 800ebec:	7c44      	ldrbne	r4, [r0, #17]
 800ebee:	6942      	ldr	r2, [r0, #20]
 800ebf0:	f101 031c 	add.w	r3, r1, #28
 800ebf4:	54d4      	strb	r4, [r2, r3]
 800ebf6:	f01e 0f08 	tst.w	lr, #8
 800ebfa:	bf0c      	ite	eq
 800ebfc:	7c04      	ldrbeq	r4, [r0, #16]
 800ebfe:	7c44      	ldrbne	r4, [r0, #17]
 800ec00:	6942      	ldr	r2, [r0, #20]
 800ec02:	f101 031d 	add.w	r3, r1, #29
 800ec06:	54d4      	strb	r4, [r2, r3]
 800ec08:	f01e 0f04 	tst.w	lr, #4
 800ec0c:	bf0c      	ite	eq
 800ec0e:	7c04      	ldrbeq	r4, [r0, #16]
 800ec10:	7c44      	ldrbne	r4, [r0, #17]
 800ec12:	6942      	ldr	r2, [r0, #20]
 800ec14:	f101 031e 	add.w	r3, r1, #30
 800ec18:	54d4      	strb	r4, [r2, r3]
 800ec1a:	f01e 0f02 	tst.w	lr, #2
 800ec1e:	6942      	ldr	r2, [r0, #20]
 800ec20:	bf0c      	ite	eq
 800ec22:	7c04      	ldrbeq	r4, [r0, #16]
 800ec24:	7c44      	ldrbne	r4, [r0, #17]
 800ec26:	f101 031f 	add.w	r3, r1, #31
 800ec2a:	54d4      	strb	r4, [r2, r3]
 800ec2c:	f01e 0f01 	tst.w	lr, #1
 800ec30:	bf14      	ite	ne
 800ec32:	7c42      	ldrbne	r2, [r0, #17]
 800ec34:	7c02      	ldrbeq	r2, [r0, #16]
 800ec36:	6943      	ldr	r3, [r0, #20]
 800ec38:	3120      	adds	r1, #32
 800ec3a:	545a      	strb	r2, [r3, r1]
 800ec3c:	bd70      	pop	{r4, r5, r6, pc}
 800ec3e:	bf00      	nop

0800ec40 <WS28xx::~WS28xx()>:
 800ec40:	2200      	movs	r2, #0
 800ec42:	4b01      	ldr	r3, [pc, #4]	; (800ec48 <WS28xx::~WS28xx()+0x8>)
 800ec44:	601a      	str	r2, [r3, #0]
 800ec46:	4770      	bx	lr
 800ec48:	20001958 	andcs	r1, r0, r8, asr r9

0800ec4c <WS28xx::SetupBuffers()>:
 800ec4c:	b513      	push	{r0, r1, r4, lr}
 800ec4e:	4604      	mov	r4, r0
 800ec50:	a801      	add	r0, sp, #4
 800ec52:	f006 ff5d 	bl	8015b10 <gd32_spi_dma_tx_prepare(unsigned int*)>
 800ec56:	9b01      	ldr	r3, [sp, #4]
 800ec58:	4a07      	ldr	r2, [pc, #28]	; (800ec78 <WS28xx::SetupBuffers()+0x2c>)
 800ec5a:	085b      	lsrs	r3, r3, #1
 800ec5c:	f023 0303 	bic.w	r3, r3, #3
 800ec60:	6160      	str	r0, [r4, #20]
 800ec62:	4418      	add	r0, r3
 800ec64:	68e3      	ldr	r3, [r4, #12]
 800ec66:	61a0      	str	r0, [r4, #24]
 800ec68:	6013      	str	r3, [r2, #0]
 800ec6a:	3303      	adds	r3, #3
 800ec6c:	f023 0303 	bic.w	r3, r3, #3
 800ec70:	60e3      	str	r3, [r4, #12]
 800ec72:	b002      	add	sp, #8
 800ec74:	bd10      	pop	{r4, pc}
 800ec76:	bf00      	nop
 800ec78:	20001954 	andcs	r1, r0, r4, asr r9

0800ec7c <WS28xx::WS28xx(PixelConfiguration&)>:
 800ec7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec7e:	23aa      	movs	r3, #170	; 0xaa
 800ec80:	2203      	movs	r2, #3
 800ec82:	e9c0 2300 	strd	r2, r3, [r0]
 800ec86:	2306      	movs	r3, #6
 800ec88:	6083      	str	r3, [r0, #8]
 800ec8a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800ec8e:	8243      	strh	r3, [r0, #18]
 800ec90:	2300      	movs	r3, #0
 800ec92:	460d      	mov	r5, r1
 800ec94:	4604      	mov	r4, r0
 800ec96:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800ec9a:	4b17      	ldr	r3, [pc, #92]	; (800ecf8 <WS28xx::WS28xx(PixelConfiguration&)+0x7c>)
 800ec9c:	a901      	add	r1, sp, #4
 800ec9e:	6018      	str	r0, [r3, #0]
 800eca0:	4628      	mov	r0, r5
 800eca2:	f7fe fdd3 	bl	800d84c <PixelConfiguration::Validate(unsigned int&)>
 800eca6:	4628      	mov	r0, r5
 800eca8:	f7fe fe3c 	bl	800d924 <PixelConfiguration::Dump()>
 800ecac:	68ab      	ldr	r3, [r5, #8]
 800ecae:	686a      	ldr	r2, [r5, #4]
 800ecb0:	60a3      	str	r3, [r4, #8]
 800ecb2:	8a2b      	ldrh	r3, [r5, #16]
 800ecb4:	6829      	ldr	r1, [r5, #0]
 800ecb6:	8223      	strh	r3, [r4, #16]
 800ecb8:	7cab      	ldrb	r3, [r5, #18]
 800ecba:	7ce8      	ldrb	r0, [r5, #19]
 800ecbc:	74e3      	strb	r3, [r4, #19]
 800ecbe:	9b01      	ldr	r3, [sp, #4]
 800ecc0:	6021      	str	r1, [r4, #0]
 800ecc2:	4353      	muls	r3, r2
 800ecc4:	6062      	str	r2, [r4, #4]
 800ecc6:	74a0      	strb	r0, [r4, #18]
 800ecc8:	b998      	cbnz	r0, 800ecf2 <WS28xx::WS28xx(PixelConfiguration&)+0x76>
 800ecca:	390b      	subs	r1, #11
 800eccc:	2902      	cmp	r1, #2
 800ecce:	60e3      	str	r3, [r4, #12]
 800ecd0:	bf9e      	ittt	ls
 800ecd2:	68e3      	ldrls	r3, [r4, #12]
 800ecd4:	3208      	addls	r2, #8
 800ecd6:	18d2      	addls	r2, r2, r3
 800ecd8:	4620      	mov	r0, r4
 800ecda:	bf98      	it	ls
 800ecdc:	60e2      	strls	r2, [r4, #12]
 800ecde:	f7ff ffb5 	bl	800ec4c <WS28xx::SetupBuffers()>
 800ece2:	f006 fe8b 	bl	80159fc <gd32_spi_dma_begin()>
 800ece6:	68e8      	ldr	r0, [r5, #12]
 800ece8:	f006 fefe 	bl	8015ae8 <gd32_spi_dma_set_speed_hz(unsigned int)>
 800ecec:	4620      	mov	r0, r4
 800ecee:	b003      	add	sp, #12
 800ecf0:	bd30      	pop	{r4, r5, pc}
 800ecf2:	00db      	lsls	r3, r3, #3
 800ecf4:	3301      	adds	r3, #1
 800ecf6:	e7e8      	b.n	800ecca <WS28xx::WS28xx(PixelConfiguration&)+0x4e>
 800ecf8:	20001958 	andcs	r1, r0, r8, asr r9

0800ecfc <WS28xx::Update()>:
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	b430      	push	{r4, r5}
 800ed00:	4b0b      	ldr	r3, [pc, #44]	; (800ed30 <WS28xx::Update()+0x34>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	68c1      	ldr	r1, [r0, #12]
 800ed06:	6944      	ldr	r4, [r0, #20]
 800ed08:	4299      	cmp	r1, r3
 800ed0a:	d902      	bls.n	800ed12 <WS28xx::Update()+0x16>
 800ed0c:	54e2      	strb	r2, [r4, r3]
 800ed0e:	3301      	adds	r3, #1
 800ed10:	e7f8      	b.n	800ed04 <WS28xx::Update()+0x8>
 800ed12:	2300      	movs	r3, #0
 800ed14:	6980      	ldr	r0, [r0, #24]
 800ed16:	084d      	lsrs	r5, r1, #1
 800ed18:	429d      	cmp	r5, r3
 800ed1a:	d006      	beq.n	800ed2a <WS28xx::Update()+0x2e>
 800ed1c:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
 800ed20:	ba52      	rev16	r2, r2
 800ed22:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 800ed26:	3301      	adds	r3, #1
 800ed28:	e7f6      	b.n	800ed18 <WS28xx::Update()+0x1c>
 800ed2a:	bc30      	pop	{r4, r5}
 800ed2c:	f006 bef8 	b.w	8015b20 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>
 800ed30:	20001954 	andcs	r1, r0, r4, asr r9

0800ed34 <WS28xx::Blackout()>:
 800ed34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed36:	e9d0 6305 	ldrd	r6, r3, [r0, #20]
 800ed3a:	4604      	mov	r4, r0
 800ed3c:	6143      	str	r3, [r0, #20]
 800ed3e:	f3bf 8f6f 	isb	sy
 800ed42:	f006 ff07 	bl	8015b54 <gd32_spi_dma_tx_is_active()>
 800ed46:	2800      	cmp	r0, #0
 800ed48:	d1f9      	bne.n	800ed3e <WS28xx::Blackout()+0xa>
 800ed4a:	6822      	ldr	r2, [r4, #0]
 800ed4c:	6963      	ldr	r3, [r4, #20]
 800ed4e:	3a0b      	subs	r2, #11
 800ed50:	2a02      	cmp	r2, #2
 800ed52:	7018      	strb	r0, [r3, #0]
 800ed54:	d82a      	bhi.n	800edac <WS28xx::Blackout()+0x78>
 800ed56:	4605      	mov	r5, r0
 800ed58:	4607      	mov	r7, r0
 800ed5a:	7058      	strb	r0, [r3, #1]
 800ed5c:	7098      	strb	r0, [r3, #2]
 800ed5e:	70d8      	strb	r0, [r3, #3]
 800ed60:	6863      	ldr	r3, [r4, #4]
 800ed62:	42ab      	cmp	r3, r5
 800ed64:	d908      	bls.n	800ed78 <WS28xx::Blackout()+0x44>
 800ed66:	2300      	movs	r3, #0
 800ed68:	4629      	mov	r1, r5
 800ed6a:	461a      	mov	r2, r3
 800ed6c:	4620      	mov	r0, r4
 800ed6e:	9700      	str	r7, [sp, #0]
 800ed70:	f7ff f984 	bl	800e07c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 800ed74:	3501      	adds	r5, #1
 800ed76:	e7f3      	b.n	800ed60 <WS28xx::Blackout()+0x2c>
 800ed78:	6821      	ldr	r1, [r4, #0]
 800ed7a:	68e2      	ldr	r2, [r4, #12]
 800ed7c:	390b      	subs	r1, #11
 800ed7e:	2901      	cmp	r1, #1
 800ed80:	bf94      	ite	ls
 800ed82:	21ff      	movls	r1, #255	; 0xff
 800ed84:	2100      	movhi	r1, #0
 800ed86:	6960      	ldr	r0, [r4, #20]
 800ed88:	3a04      	subs	r2, #4
 800ed8a:	1883      	adds	r3, r0, r2
 800ed8c:	5481      	strb	r1, [r0, r2]
 800ed8e:	7059      	strb	r1, [r3, #1]
 800ed90:	7099      	strb	r1, [r3, #2]
 800ed92:	70d9      	strb	r1, [r3, #3]
 800ed94:	4620      	mov	r0, r4
 800ed96:	f7ff ffb1 	bl	800ecfc <WS28xx::Update()>
 800ed9a:	f3bf 8f6f 	isb	sy
 800ed9e:	f006 fed9 	bl	8015b54 <gd32_spi_dma_tx_is_active()>
 800eda2:	2800      	cmp	r0, #0
 800eda4:	d1f9      	bne.n	800ed9a <WS28xx::Blackout()+0x66>
 800eda6:	6166      	str	r6, [r4, #20]
 800eda8:	b003      	add	sp, #12
 800edaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edac:	6963      	ldr	r3, [r4, #20]
 800edae:	6821      	ldr	r1, [r4, #0]
 800edb0:	1c5a      	adds	r2, r3, #1
 800edb2:	b101      	cbz	r1, 800edb6 <WS28xx::Blackout()+0x82>
 800edb4:	7c21      	ldrb	r1, [r4, #16]
 800edb6:	68e0      	ldr	r0, [r4, #12]
 800edb8:	3001      	adds	r0, #1
 800edba:	4403      	add	r3, r0
 800edbc:	429a      	cmp	r2, r3
 800edbe:	d0e9      	beq.n	800ed94 <WS28xx::Blackout()+0x60>
 800edc0:	f802 1b01 	strb.w	r1, [r2], #1
 800edc4:	e7fa      	b.n	800edbc <WS28xx::Blackout()+0x88>
	...

0800edc8 <RemoteConfig::HandleList()>:
 800edc8:	2212      	movs	r2, #18
 800edca:	6803      	ldr	r3, [r0, #0]
 800edcc:	4931      	ldr	r1, [pc, #196]	; (800ee94 <RemoteConfig::HandleList()+0xcc>)
 800edce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800edd2:	fb02 1103 	mla	r1, r2, r3, r1
 800edd6:	220c      	movs	r2, #12
 800edd8:	4604      	mov	r4, r0
 800edda:	6843      	ldr	r3, [r0, #4]
 800eddc:	482e      	ldr	r0, [pc, #184]	; (800ee98 <RemoteConfig::HandleList()+0xd0>)
 800edde:	4e2f      	ldr	r6, [pc, #188]	; (800ee9c <RemoteConfig::HandleList()+0xd4>)
 800ede0:	fb02 0003 	mla	r0, r2, r3, r0
 800ede4:	4b2e      	ldr	r3, [pc, #184]	; (800eea0 <RemoteConfig::HandleList()+0xd8>)
 800ede6:	4f2f      	ldr	r7, [pc, #188]	; (800eea4 <RemoteConfig::HandleList()+0xdc>)
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	6835      	ldr	r5, [r6, #0]
 800edec:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800edf0:	f897 9009 	ldrb.w	r9, [r7, #9]
 800edf4:	fa5f f38c 	uxtb.w	r3, ip
 800edf8:	ea4f 6e1c 	mov.w	lr, ip, lsr #24
 800edfc:	ea4f 421c 	mov.w	r2, ip, lsr #16
 800ee00:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800ee04:	b089      	sub	sp, #36	; 0x24
 800ee06:	3507      	adds	r5, #7
 800ee08:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 800ee0c:	f1b9 0f00 	cmp.w	r9, #0
 800ee10:	d023      	beq.n	800ee5a <RemoteConfig::HandleList()+0x92>
 800ee12:	b2d2      	uxtb	r2, r2
 800ee14:	3709      	adds	r7, #9
 800ee16:	9201      	str	r2, [sp, #4]
 800ee18:	fa5f f28c 	uxtb.w	r2, ip
 800ee1c:	e9cd 1003 	strd	r1, r0, [sp, #12]
 800ee20:	9200      	str	r2, [sp, #0]
 800ee22:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800ee26:	4628      	mov	r0, r5
 800ee28:	e9cd 8705 	strd	r8, r7, [sp, #20]
 800ee2c:	4a1e      	ldr	r2, [pc, #120]	; (800eea8 <RemoteConfig::HandleList()+0xe0>)
 800ee2e:	f8cd e008 	str.w	lr, [sp, #8]
 800ee32:	f7fa fc43 	bl	80096bc <snprintf>
 800ee36:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 800ee3a:	2b05      	cmp	r3, #5
 800ee3c:	d11d      	bne.n	800ee7a <RemoteConfig::HandleList()+0xb2>
 800ee3e:	f642 1305 	movw	r3, #10501	; 0x2905
 800ee42:	9300      	str	r3, [sp, #0]
 800ee44:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800ee48:	b282      	uxth	r2, r0
 800ee4a:	4629      	mov	r1, r5
 800ee4c:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800ee50:	f002 fb72 	bl	8011538 <udp_send>
 800ee54:	b009      	add	sp, #36	; 0x24
 800ee56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee5a:	b2d2      	uxtb	r2, r2
 800ee5c:	9201      	str	r2, [sp, #4]
 800ee5e:	fa5f f28c 	uxtb.w	r2, ip
 800ee62:	e9cd 0804 	strd	r0, r8, [sp, #16]
 800ee66:	e9cd e102 	strd	lr, r1, [sp, #8]
 800ee6a:	9200      	str	r2, [sp, #0]
 800ee6c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800ee70:	4628      	mov	r0, r5
 800ee72:	4a0e      	ldr	r2, [pc, #56]	; (800eeac <RemoteConfig::HandleList()+0xe4>)
 800ee74:	f7fa fc22 	bl	80096bc <snprintf>
 800ee78:	e7dd      	b.n	800ee36 <RemoteConfig::HandleList()+0x6e>
 800ee7a:	2b06      	cmp	r3, #6
 800ee7c:	d1ea      	bne.n	800ee54 <RemoteConfig::HandleList()+0x8c>
 800ee7e:	6833      	ldr	r3, [r6, #0]
 800ee80:	799b      	ldrb	r3, [r3, #6]
 800ee82:	2b2a      	cmp	r3, #42	; 0x2a
 800ee84:	d1e6      	bne.n	800ee54 <RemoteConfig::HandleList()+0x8c>
 800ee86:	f642 1305 	movw	r3, #10501	; 0x2905
 800ee8a:	9300      	str	r3, [sp, #0]
 800ee8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee90:	e7da      	b.n	800ee48 <RemoteConfig::HandleList()+0x80>
 800ee92:	bf00      	nop
 800ee94:	0801731c 	stmdaeq	r1, {r2, r3, r4, r8, r9, ip, sp, lr}
 800ee98:	080173be 	stmdaeq	r1, {r1, r2, r3, r4, r5, r7, r8, r9, ip, sp, lr}
 800ee9c:	2000195c 	andcs	r1, r0, ip, asr r9
 800eea0:	2000a29c 	mulcs	r0, ip, r2
 800eea4:	20001960 	andcs	r1, r0, r0, ror #18
 800eea8:	08017256 	stmdaeq	r1, {r1, r2, r4, r6, r9, ip, sp, lr}
 800eeac:	0801726f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}

0800eeb0 <RemoteConfig::HandleDisplayGet()>:
 800eeb0:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800eeb4:	2b08      	cmp	r3, #8
 800eeb6:	d11d      	bne.n	800eef4 <RemoteConfig::HandleDisplayGet()+0x44>
 800eeb8:	4b0f      	ldr	r3, [pc, #60]	; (800eef8 <RemoteConfig::HandleDisplayGet()+0x48>)
 800eeba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	4d0f      	ldr	r5, [pc, #60]	; (800eefc <RemoteConfig::HandleDisplayGet()+0x4c>)
 800eec0:	7c19      	ldrb	r1, [r3, #16]
 800eec2:	4a0f      	ldr	r2, [pc, #60]	; (800ef00 <RemoteConfig::HandleDisplayGet()+0x50>)
 800eec4:	4b0f      	ldr	r3, [pc, #60]	; (800ef04 <RemoteConfig::HandleDisplayGet()+0x54>)
 800eec6:	4604      	mov	r4, r0
 800eec8:	2900      	cmp	r1, #0
 800eeca:	bf18      	it	ne
 800eecc:	4613      	movne	r3, r2
 800eece:	6828      	ldr	r0, [r5, #0]
 800eed0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800eed4:	4a0c      	ldr	r2, [pc, #48]	; (800ef08 <RemoteConfig::HandleDisplayGet()+0x58>)
 800eed6:	f7fa fbf1 	bl	80096bc <snprintf>
 800eeda:	f642 1305 	movw	r3, #10501	; 0x2905
 800eede:	9300      	str	r3, [sp, #0]
 800eee0:	b282      	uxth	r2, r0
 800eee2:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800eee6:	6829      	ldr	r1, [r5, #0]
 800eee8:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800eeec:	f002 fb24 	bl	8011538 <udp_send>
 800eef0:	b003      	add	sp, #12
 800eef2:	bd30      	pop	{r4, r5, pc}
 800eef4:	4770      	bx	lr
 800eef6:	bf00      	nop
 800eef8:	2000a8d4 	ldrdcs	sl, [r0], -r4
 800eefc:	2000195c 	andcs	r1, r0, ip, asr r9
 800ef00:	08017288 	stmdaeq	r1, {r3, r7, r9, ip, sp, lr}
 800ef04:	08017285 	stmdaeq	r1, {r0, r2, r7, r9, ip, sp, lr}
 800ef08:	0801728c 	stmdaeq	r1, {r2, r3, r7, r9, ip, sp, lr}

0800ef0c <RemoteConfig::HandleTftpSet()>:
 800ef0c:	f8d0 25e4 	ldr.w	r2, [r0, #1508]	; 0x5e4
 800ef10:	2a06      	cmp	r2, #6
 800ef12:	d109      	bne.n	800ef28 <RemoteConfig::HandleTftpSet()+0x1c>
 800ef14:	4a05      	ldr	r2, [pc, #20]	; (800ef2c <RemoteConfig::HandleTftpSet()+0x20>)
 800ef16:	6812      	ldr	r2, [r2, #0]
 800ef18:	7992      	ldrb	r2, [r2, #6]
 800ef1a:	3a30      	subs	r2, #48	; 0x30
 800ef1c:	bf18      	it	ne
 800ef1e:	2201      	movne	r2, #1
 800ef20:	f880 25ec 	strb.w	r2, [r0, #1516]	; 0x5ec
 800ef24:	f000 bd74 	b.w	800fa10 <RemoteConfig::PlatformHandleTftpSet()>
 800ef28:	4770      	bx	lr
 800ef2a:	bf00      	nop
 800ef2c:	2000195c 	andcs	r1, r0, ip, asr r9

0800ef30 <RemoteConfig::HandleTftpGet()>:
 800ef30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef32:	4604      	mov	r4, r0
 800ef34:	f000 fd74 	bl	800fa20 <RemoteConfig::PlatformHandleTftpGet()>
 800ef38:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 800ef3c:	2b05      	cmp	r3, #5
 800ef3e:	d118      	bne.n	800ef72 <RemoteConfig::HandleTftpGet()+0x42>
 800ef40:	f894 15ec 	ldrb.w	r1, [r4, #1516]	; 0x5ec
 800ef44:	4d0c      	ldr	r5, [pc, #48]	; (800ef78 <RemoteConfig::HandleTftpGet()+0x48>)
 800ef46:	4a0d      	ldr	r2, [pc, #52]	; (800ef7c <RemoteConfig::HandleTftpGet()+0x4c>)
 800ef48:	4b0d      	ldr	r3, [pc, #52]	; (800ef80 <RemoteConfig::HandleTftpGet()+0x50>)
 800ef4a:	6828      	ldr	r0, [r5, #0]
 800ef4c:	2900      	cmp	r1, #0
 800ef4e:	bf08      	it	eq
 800ef50:	4613      	moveq	r3, r2
 800ef52:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800ef56:	4a0b      	ldr	r2, [pc, #44]	; (800ef84 <RemoteConfig::HandleTftpGet()+0x54>)
 800ef58:	f7fa fbb0 	bl	80096bc <snprintf>
 800ef5c:	f642 1305 	movw	r3, #10501	; 0x2905
 800ef60:	b282      	uxth	r2, r0
 800ef62:	9300      	str	r3, [sp, #0]
 800ef64:	6829      	ldr	r1, [r5, #0]
 800ef66:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800ef6a:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800ef6e:	f002 fae3 	bl	8011538 <udp_send>
 800ef72:	b003      	add	sp, #12
 800ef74:	bd30      	pop	{r4, r5, pc}
 800ef76:	bf00      	nop
 800ef78:	2000195c 	andcs	r1, r0, ip, asr r9
 800ef7c:	08017288 	stmdaeq	r1, {r3, r7, r9, ip, sp, lr}
 800ef80:	08017285 	stmdaeq	r1, {r0, r2, r7, r9, ip, sp, lr}
 800ef84:	08017298 	stmdaeq	r1, {r3, r4, r7, r9, ip, sp, lr}

0800ef88 <RemoteConfig::HandleVersion()>:
 800ef88:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800ef8c:	2b08      	cmp	r3, #8
 800ef8e:	d116      	bne.n	800efbe <RemoteConfig::HandleVersion()+0x36>
 800ef90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef92:	4d0b      	ldr	r5, [pc, #44]	; (800efc0 <RemoteConfig::HandleVersion()+0x38>)
 800ef94:	4604      	mov	r4, r0
 800ef96:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800ef9a:	4b0a      	ldr	r3, [pc, #40]	; (800efc4 <RemoteConfig::HandleVersion()+0x3c>)
 800ef9c:	4a0a      	ldr	r2, [pc, #40]	; (800efc8 <RemoteConfig::HandleVersion()+0x40>)
 800ef9e:	6828      	ldr	r0, [r5, #0]
 800efa0:	f7fa fb8c 	bl	80096bc <snprintf>
 800efa4:	f642 1305 	movw	r3, #10501	; 0x2905
 800efa8:	9300      	str	r3, [sp, #0]
 800efaa:	b282      	uxth	r2, r0
 800efac:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800efb0:	6829      	ldr	r1, [r5, #0]
 800efb2:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800efb6:	f002 fabf 	bl	8011538 <udp_send>
 800efba:	b003      	add	sp, #12
 800efbc:	bd30      	pop	{r4, r5, pc}
 800efbe:	4770      	bx	lr
 800efc0:	2000195c 	andcs	r1, r0, ip, asr r9
 800efc4:	2000a97a 	andcs	sl, r0, sl, ror r9
 800efc8:	080172a1 	stmdaeq	r1, {r0, r5, r7, r9, ip, sp, lr}

0800efcc <RemoteConfig::HandleUptime()>:
 800efcc:	f890 35d7 	ldrb.w	r3, [r0, #1495]	; 0x5d7
 800efd0:	b1fb      	cbz	r3, 800f012 <RemoteConfig::HandleUptime()+0x46>
 800efd2:	4b10      	ldr	r3, [pc, #64]	; (800f014 <RemoteConfig::HandleUptime()+0x48>)
 800efd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800efd6:	681a      	ldr	r2, [r3, #0]
 800efd8:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800efdc:	4604      	mov	r4, r0
 800efde:	2b07      	cmp	r3, #7
 800efe0:	d115      	bne.n	800f00e <RemoteConfig::HandleUptime()+0x42>
 800efe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800efe6:	4d0c      	ldr	r5, [pc, #48]	; (800f018 <RemoteConfig::HandleUptime()+0x4c>)
 800efe8:	fbb2 f3f3 	udiv	r3, r2, r3
 800efec:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800eff0:	4a0a      	ldr	r2, [pc, #40]	; (800f01c <RemoteConfig::HandleUptime()+0x50>)
 800eff2:	6828      	ldr	r0, [r5, #0]
 800eff4:	f7fa fb62 	bl	80096bc <snprintf>
 800eff8:	f642 1305 	movw	r3, #10501	; 0x2905
 800effc:	9300      	str	r3, [sp, #0]
 800effe:	b282      	uxth	r2, r0
 800f000:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800f004:	6829      	ldr	r1, [r5, #0]
 800f006:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800f00a:	f002 fa95 	bl	8011538 <udp_send>
 800f00e:	b003      	add	sp, #12
 800f010:	bd30      	pop	{r4, r5, pc}
 800f012:	4770      	bx	lr
 800f014:	2000a9dc 	ldrdcs	sl, [r0], -ip
 800f018:	2000195c 	andcs	r1, r0, ip, asr r9
 800f01c:	080172ac 	stmdaeq	r1, {r2, r3, r5, r7, r9, ip, sp, lr}

0800f020 <RemoteConfig::HandleDisplaySet()>:
 800f020:	b538      	push	{r3, r4, r5, lr}
 800f022:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800f026:	2b09      	cmp	r3, #9
 800f028:	d113      	bne.n	800f052 <RemoteConfig::HandleDisplaySet()+0x32>
 800f02a:	4b0a      	ldr	r3, [pc, #40]	; (800f054 <RemoteConfig::HandleDisplaySet()+0x34>)
 800f02c:	681c      	ldr	r4, [r3, #0]
 800f02e:	4b0a      	ldr	r3, [pc, #40]	; (800f058 <RemoteConfig::HandleDisplaySet()+0x38>)
 800f030:	69a0      	ldr	r0, [r4, #24]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	7a5d      	ldrb	r5, [r3, #9]
 800f036:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800f03a:	4259      	negs	r1, r3
 800f03c:	4159      	adcs	r1, r3
 800f03e:	b140      	cbz	r0, 800f052 <RemoteConfig::HandleDisplaySet()+0x32>
 800f040:	6803      	ldr	r3, [r0, #0]
 800f042:	7421      	strb	r1, [r4, #16]
 800f044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f046:	4798      	blx	r3
 800f048:	2d30      	cmp	r5, #48	; 0x30
 800f04a:	bf1e      	ittt	ne
 800f04c:	4b03      	ldrne	r3, [pc, #12]	; (800f05c <RemoteConfig::HandleDisplaySet()+0x3c>)
 800f04e:	681b      	ldrne	r3, [r3, #0]
 800f050:	6063      	strne	r3, [r4, #4]
 800f052:	bd38      	pop	{r3, r4, r5, pc}
 800f054:	2000a8d4 	ldrdcs	sl, [r0], -r4
 800f058:	2000195c 	andcs	r1, r0, ip, asr r9
 800f05c:	2000a9dc 	ldrdcs	sl, [r0], -ip

0800f060 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>:
 800f060:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f064:	f100 0a0c 	add.w	sl, r0, #12
 800f068:	4604      	mov	r4, r0
 800f06a:	e9c0 1200 	strd	r1, r2, [r0]
 800f06e:	6083      	str	r3, [r0, #8]
 800f070:	4650      	mov	r0, sl
 800f072:	4690      	mov	r8, r2
 800f074:	4689      	mov	r9, r1
 800f076:	461f      	mov	r7, r3
 800f078:	f000 fd12 	bl	800faa0 <HttpDaemon::HttpDaemon()>
 800f07c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f080:	2500      	movs	r5, #0
 800f082:	4e16      	ldr	r6, [pc, #88]	; (800f0dc <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x7c>)
 800f084:	f8df b058 	ldr.w	fp, [pc, #88]	; 800f0e0 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x80>
 800f088:	f8c4 35dc 	str.w	r3, [r4, #1500]	; 0x5dc
 800f08c:	4b15      	ldr	r3, [pc, #84]	; (800f0e4 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x84>)
 800f08e:	4631      	mov	r1, r6
 800f090:	f8db 0000 	ldr.w	r0, [fp]
 800f094:	f8c4 55d4 	str.w	r5, [r4, #1492]	; 0x5d4
 800f098:	f8a4 55d8 	strh.w	r5, [r4, #1496]	; 0x5d8
 800f09c:	f8c4 55e0 	str.w	r5, [r4, #1504]	; 0x5e0
 800f0a0:	f8c4 55e4 	str.w	r5, [r4, #1508]	; 0x5e4
 800f0a4:	f8c4 55e8 	str.w	r5, [r4, #1512]	; 0x5e8
 800f0a8:	f884 55ec 	strb.w	r5, [r4, #1516]	; 0x5ec
 800f0ac:	601c      	str	r4, [r3, #0]
 800f0ae:	f002 ff17 	bl	8011ee0 <Network::MacAddressCopyTo(unsigned char*)>
 800f0b2:	f642 1105 	movw	r1, #10501	; 0x2905
 800f0b6:	f8db 0000 	ldr.w	r0, [fp]
 800f0ba:	f886 9006 	strb.w	r9, [r6, #6]
 800f0be:	f886 8007 	strb.w	r8, [r6, #7]
 800f0c2:	7237      	strb	r7, [r6, #8]
 800f0c4:	7275      	strb	r5, [r6, #9]
 800f0c6:	f002 ff05 	bl	8011ed4 <Network::Begin(unsigned short)>
 800f0ca:	f8c4 05dc 	str.w	r0, [r4, #1500]	; 0x5dc
 800f0ce:	4650      	mov	r0, sl
 800f0d0:	f000 fcfe 	bl	800fad0 <HttpDaemon::Start()>
 800f0d4:	4620      	mov	r0, r4
 800f0d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0da:	bf00      	nop
 800f0dc:	20001960 	andcs	r1, r0, r0, ror #18
 800f0e0:	2000a29c 	mulcs	r0, ip, r2
 800f0e4:	20001984 	andcs	r1, r0, r4, lsl #19

0800f0e8 <RemoteConfig::GetStringNode() const>:
 800f0e8:	2012      	movs	r0, #18
 800f0ea:	4b03      	ldr	r3, [pc, #12]	; (800f0f8 <RemoteConfig::GetStringNode() const+0x10>)
 800f0ec:	799a      	ldrb	r2, [r3, #6]
 800f0ee:	4b03      	ldr	r3, [pc, #12]	; (800f0fc <RemoteConfig::GetStringNode() const+0x14>)
 800f0f0:	fb00 3002 	mla	r0, r0, r2, r3
 800f0f4:	4770      	bx	lr
 800f0f6:	bf00      	nop
 800f0f8:	20001960 	andcs	r1, r0, r0, ror #18
 800f0fc:	0801731c 	stmdaeq	r1, {r2, r3, r4, r8, r9, ip, sp, lr}

0800f100 <RemoteConfig::GetStringOutput() const>:
 800f100:	200c      	movs	r0, #12
 800f102:	4b03      	ldr	r3, [pc, #12]	; (800f110 <RemoteConfig::GetStringOutput() const+0x10>)
 800f104:	79da      	ldrb	r2, [r3, #7]
 800f106:	4b03      	ldr	r3, [pc, #12]	; (800f114 <RemoteConfig::GetStringOutput() const+0x14>)
 800f108:	fb00 3002 	mla	r0, r0, r2, r3
 800f10c:	4770      	bx	lr
 800f10e:	bf00      	nop
 800f110:	20001960 	andcs	r1, r0, r0, ror #18
 800f114:	080173be 	stmdaeq	r1, {r1, r2, r3, r4, r5, r7, r8, r9, ip, sp, lr}

0800f118 <RemoteConfig::SetDisable(bool)>:
 800f118:	b538      	push	{r3, r4, r5, lr}
 800f11a:	4604      	mov	r4, r0
 800f11c:	f890 35d4 	ldrb.w	r3, [r0, #1492]	; 0x5d4
 800f120:	b171      	cbz	r1, 800f140 <RemoteConfig::SetDisable(bool)+0x28>
 800f122:	b963      	cbnz	r3, 800f13e <RemoteConfig::SetDisable(bool)+0x26>
 800f124:	4b0d      	ldr	r3, [pc, #52]	; (800f15c <RemoteConfig::SetDisable(bool)+0x44>)
 800f126:	f642 1105 	movw	r1, #10501	; 0x2905
 800f12a:	6818      	ldr	r0, [r3, #0]
 800f12c:	f002 fed5 	bl	8011eda <Network::End(unsigned short)>
 800f130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f134:	f8c4 35dc 	str.w	r3, [r4, #1500]	; 0x5dc
 800f138:	2301      	movs	r3, #1
 800f13a:	f884 35d4 	strb.w	r3, [r4, #1492]	; 0x5d4
 800f13e:	bd38      	pop	{r3, r4, r5, pc}
 800f140:	2b00      	cmp	r3, #0
 800f142:	d0fc      	beq.n	800f13e <RemoteConfig::SetDisable(bool)+0x26>
 800f144:	4b05      	ldr	r3, [pc, #20]	; (800f15c <RemoteConfig::SetDisable(bool)+0x44>)
 800f146:	460d      	mov	r5, r1
 800f148:	6818      	ldr	r0, [r3, #0]
 800f14a:	f642 1105 	movw	r1, #10501	; 0x2905
 800f14e:	f002 fec1 	bl	8011ed4 <Network::Begin(unsigned short)>
 800f152:	f884 55d4 	strb.w	r5, [r4, #1492]	; 0x5d4
 800f156:	f8c4 05dc 	str.w	r0, [r4, #1500]	; 0x5dc
 800f15a:	e7f0      	b.n	800f13e <RemoteConfig::SetDisable(bool)+0x26>
 800f15c:	2000a29c 	mulcs	r0, ip, r2

0800f160 <RemoteConfig::SetDisplayName(char const*)>:
 800f160:	2217      	movs	r2, #23
 800f162:	4809      	ldr	r0, [pc, #36]	; (800f188 <RemoteConfig::SetDisplayName(char const*)+0x28>)
 800f164:	b508      	push	{r3, lr}
 800f166:	1e4b      	subs	r3, r1, #1
 800f168:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800f16c:	b931      	cbnz	r1, 800f17c <RemoteConfig::SetDisplayName(char const*)+0x1c>
 800f16e:	f005 fbcf 	bl	8014910 <memset>
 800f172:	2200      	movs	r2, #0
 800f174:	4b05      	ldr	r3, [pc, #20]	; (800f18c <RemoteConfig::SetDisplayName(char const*)+0x2c>)
 800f176:	f883 2020 	strb.w	r2, [r3, #32]
 800f17a:	bd08      	pop	{r3, pc}
 800f17c:	3a01      	subs	r2, #1
 800f17e:	f800 1b01 	strb.w	r1, [r0], #1
 800f182:	d1f1      	bne.n	800f168 <RemoteConfig::SetDisplayName(char const*)+0x8>
 800f184:	e7f5      	b.n	800f172 <RemoteConfig::SetDisplayName(char const*)+0x12>
 800f186:	bf00      	nop
 800f188:	20001969 	andcs	r1, r0, r9, ror #18
 800f18c:	20001960 	andcs	r1, r0, r0, ror #18

0800f190 <RemoteConfig::HandleGet(void*, unsigned int)>:
 800f190:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f192:	4604      	mov	r4, r0
 800f194:	4616      	mov	r6, r2
 800f196:	460d      	mov	r5, r1
 800f198:	4f29      	ldr	r7, [pc, #164]	; (800f240 <RemoteConfig::HandleGet(void*, unsigned int)+0xb0>)
 800f19a:	b085      	sub	sp, #20
 800f19c:	b9b9      	cbnz	r1, 800f1ce <RemoteConfig::HandleGet(void*, unsigned int)+0x3e>
 800f19e:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 800f1a2:	6839      	ldr	r1, [r7, #0]
 800f1a4:	aa03      	add	r2, sp, #12
 800f1a6:	3105      	adds	r1, #5
 800f1a8:	9303      	str	r3, [sp, #12]
 800f1aa:	f000 fc07 	bl	800f9bc <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800f1ae:	1e03      	subs	r3, r0, #0
 800f1b0:	da1d      	bge.n	800f1ee <RemoteConfig::HandleGet(void*, unsigned int)+0x5e>
 800f1b2:	f642 1305 	movw	r3, #10501	; 0x2905
 800f1b6:	220b      	movs	r2, #11
 800f1b8:	9300      	str	r3, [sp, #0]
 800f1ba:	4922      	ldr	r1, [pc, #136]	; (800f244 <RemoteConfig::HandleGet(void*, unsigned int)+0xb4>)
 800f1bc:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800f1c0:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800f1c4:	f002 f9b8 	bl	8011538 <udp_send>
 800f1c8:	200c      	movs	r0, #12
 800f1ca:	b005      	add	sp, #20
 800f1cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1ce:	9203      	str	r2, [sp, #12]
 800f1d0:	aa03      	add	r2, sp, #12
 800f1d2:	6039      	str	r1, [r7, #0]
 800f1d4:	f000 fbf2 	bl	800f9bc <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800f1d8:	1e03      	subs	r3, r0, #0
 800f1da:	da08      	bge.n	800f1ee <RemoteConfig::HandleGet(void*, unsigned int)+0x5e>
 800f1dc:	2e0b      	cmp	r6, #11
 800f1de:	4632      	mov	r2, r6
 800f1e0:	4628      	mov	r0, r5
 800f1e2:	bf28      	it	cs
 800f1e4:	220b      	movcs	r2, #11
 800f1e6:	4917      	ldr	r1, [pc, #92]	; (800f244 <RemoteConfig::HandleGet(void*, unsigned int)+0xb4>)
 800f1e8:	f005 fb70 	bl	80148cc <memcpy>
 800f1ec:	e7ec      	b.n	800f1c8 <RemoteConfig::HandleGet(void*, unsigned int)+0x38>
 800f1ee:	201c      	movs	r0, #28
 800f1f0:	4343      	muls	r3, r0
 800f1f2:	4915      	ldr	r1, [pc, #84]	; (800f248 <RemoteConfig::HandleGet(void*, unsigned int)+0xb8>)
 800f1f4:	18ca      	adds	r2, r1, r3
 800f1f6:	6852      	ldr	r2, [r2, #4]
 800f1f8:	58cb      	ldr	r3, [r1, r3]
 800f1fa:	ea4f 0c62 	mov.w	ip, r2, asr #1
 800f1fe:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800f202:	07d2      	lsls	r2, r2, #31
 800f204:	bf48      	it	mi
 800f206:	f854 200c 	ldrmi.w	r2, [r4, ip]
 800f20a:	a903      	add	r1, sp, #12
 800f20c:	bf48      	it	mi
 800f20e:	58d3      	ldrmi	r3, [r2, r3]
 800f210:	4798      	blx	r3
 800f212:	9a03      	ldr	r2, [sp, #12]
 800f214:	b965      	cbnz	r5, 800f230 <RemoteConfig::HandleGet(void*, unsigned int)+0xa0>
 800f216:	f642 1305 	movw	r3, #10501	; 0x2905
 800f21a:	6839      	ldr	r1, [r7, #0]
 800f21c:	9300      	str	r3, [sp, #0]
 800f21e:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800f222:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800f226:	b292      	uxth	r2, r2
 800f228:	f002 f986 	bl	8011538 <udp_send>
 800f22c:	9803      	ldr	r0, [sp, #12]
 800f22e:	e7cc      	b.n	800f1ca <RemoteConfig::HandleGet(void*, unsigned int)+0x3a>
 800f230:	42b2      	cmp	r2, r6
 800f232:	bf28      	it	cs
 800f234:	4632      	movcs	r2, r6
 800f236:	4628      	mov	r0, r5
 800f238:	6839      	ldr	r1, [r7, #0]
 800f23a:	f005 fb52 	bl	80148e2 <memmove>
 800f23e:	e7f5      	b.n	800f22c <RemoteConfig::HandleGet(void*, unsigned int)+0x9c>
 800f240:	2000195c 	andcs	r1, r0, ip, asr r9
 800f244:	080172b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r9, ip, sp, lr}
 800f248:	08017558 	stmdaeq	r1, {r3, r4, r6, r8, sl, ip, sp, lr}

0800f24c <RemoteConfig::HandleGetNoParams()>:
 800f24c:	2200      	movs	r2, #0
 800f24e:	4611      	mov	r1, r2
 800f250:	f7ff bf9e 	b.w	800f190 <RemoteConfig::HandleGet(void*, unsigned int)>

0800f254 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)>:
 800f254:	b510      	push	{r4, lr}
 800f256:	460c      	mov	r4, r1
 800f258:	4b07      	ldr	r3, [pc, #28]	; (800f278 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x24>)
 800f25a:	b08a      	sub	sp, #40	; 0x28
 800f25c:	6819      	ldr	r1, [r3, #0]
 800f25e:	a801      	add	r0, sp, #4
 800f260:	f000 fa02 	bl	800f668 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 800f264:	4905      	ldr	r1, [pc, #20]	; (800f27c <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x28>)
 800f266:	4623      	mov	r3, r4
 800f268:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f26c:	6809      	ldr	r1, [r1, #0]
 800f26e:	a801      	add	r0, sp, #4
 800f270:	f000 fb1e 	bl	800f8b0 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>
 800f274:	b00a      	add	sp, #40	; 0x28
 800f276:	bd10      	pop	{r4, pc}
 800f278:	200029b0 			; <UNDEFINED> instruction: 0x200029b0
 800f27c:	2000195c 	andcs	r1, r0, ip, asr r9

0800f280 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)>:
 800f280:	b513      	push	{r0, r1, r4, lr}
 800f282:	460c      	mov	r4, r1
 800f284:	4b07      	ldr	r3, [pc, #28]	; (800f2a4 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x24>)
 800f286:	a801      	add	r0, sp, #4
 800f288:	6819      	ldr	r1, [r3, #0]
 800f28a:	f003 f8a9 	bl	80123e0 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800f28e:	4906      	ldr	r1, [pc, #24]	; (800f2a8 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x28>)
 800f290:	4623      	mov	r3, r4
 800f292:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f296:	6809      	ldr	r1, [r1, #0]
 800f298:	a801      	add	r0, sp, #4
 800f29a:	f003 fa8d 	bl	80127b8 <NetworkParams::Save(char*, unsigned int, unsigned int&)>
 800f29e:	b002      	add	sp, #8
 800f2a0:	bd10      	pop	{r4, pc}
 800f2a2:	bf00      	nop
 800f2a4:	200029ac 	andcs	r2, r0, ip, lsr #19
 800f2a8:	2000195c 	andcs	r1, r0, ip, asr r9

0800f2ac <RemoteConfig::HandleGetArtnetTxt(unsigned int&)>:
 800f2ac:	b510      	push	{r4, lr}
 800f2ae:	460c      	mov	r4, r1
 800f2b0:	4b07      	ldr	r3, [pc, #28]	; (800f2d0 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x24>)
 800f2b2:	b0a4      	sub	sp, #144	; 0x90
 800f2b4:	6819      	ldr	r1, [r3, #0]
 800f2b6:	a801      	add	r0, sp, #4
 800f2b8:	f7fc f8dc 	bl	800b474 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 800f2bc:	4905      	ldr	r1, [pc, #20]	; (800f2d4 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x28>)
 800f2be:	4623      	mov	r3, r4
 800f2c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f2c4:	6809      	ldr	r1, [r1, #0]
 800f2c6:	a801      	add	r0, sp, #4
 800f2c8:	f7fc fca2 	bl	800bc10 <ArtNetParams::Save(char*, unsigned int, unsigned int&)>
 800f2cc:	b024      	add	sp, #144	; 0x90
 800f2ce:	bd10      	pop	{r4, pc}
 800f2d0:	200029a4 	andcs	r2, r0, r4, lsr #19
 800f2d4:	2000195c 	andcs	r1, r0, ip, asr r9

0800f2d8 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)>:
 800f2d8:	b510      	push	{r4, lr}
 800f2da:	460c      	mov	r4, r1
 800f2dc:	4b07      	ldr	r3, [pc, #28]	; (800f2fc <RemoteConfig::HandleGetDevicesTxt(unsigned int&)+0x24>)
 800f2de:	b08c      	sub	sp, #48	; 0x30
 800f2e0:	6819      	ldr	r1, [r3, #0]
 800f2e2:	a801      	add	r0, sp, #4
 800f2e4:	f7fd ff36 	bl	800d154 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>
 800f2e8:	4905      	ldr	r1, [pc, #20]	; (800f300 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)+0x28>)
 800f2ea:	4623      	mov	r3, r4
 800f2ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f2f0:	6809      	ldr	r1, [r1, #0]
 800f2f2:	a801      	add	r0, sp, #4
 800f2f4:	f7fe f9da 	bl	800d6ac <WS28xxDmxParams::Save(char*, unsigned int, unsigned int&)>
 800f2f8:	b00c      	add	sp, #48	; 0x30
 800f2fa:	bd10      	pop	{r4, pc}
 800f2fc:	200029b4 			; <UNDEFINED> instruction: 0x200029b4
 800f300:	2000195c 	andcs	r1, r0, ip, asr r9

0800f304 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)>:
 800f304:	b510      	push	{r4, lr}
 800f306:	460c      	mov	r4, r1
 800f308:	4b07      	ldr	r3, [pc, #28]	; (800f328 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x24>)
 800f30a:	b08a      	sub	sp, #40	; 0x28
 800f30c:	6819      	ldr	r1, [r3, #0]
 800f30e:	4668      	mov	r0, sp
 800f310:	f004 f81e 	bl	8013350 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 800f314:	4905      	ldr	r1, [pc, #20]	; (800f32c <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x28>)
 800f316:	4623      	mov	r3, r4
 800f318:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f31c:	4668      	mov	r0, sp
 800f31e:	6809      	ldr	r1, [r1, #0]
 800f320:	f004 f94c 	bl	80135bc <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>
 800f324:	b00a      	add	sp, #40	; 0x28
 800f326:	bd10      	pop	{r4, pc}
 800f328:	200029a8 	andcs	r2, r0, r8, lsr #19
 800f32c:	2000195c 	andcs	r1, r0, ip, asr r9

0800f330 <RemoteConfig::HandleSet(void*, unsigned int)>:
 800f330:	b530      	push	{r4, r5, lr}
 800f332:	b085      	sub	sp, #20
 800f334:	4604      	mov	r4, r0
 800f336:	9201      	str	r2, [sp, #4]
 800f338:	b9c9      	cbnz	r1, 800f36e <RemoteConfig::HandleSet(void*, unsigned int)+0x3e>
 800f33a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800f33e:	9303      	str	r3, [sp, #12]
 800f340:	4b1d      	ldr	r3, [pc, #116]	; (800f3b8 <RemoteConfig::HandleSet(void*, unsigned int)+0x88>)
 800f342:	aa03      	add	r2, sp, #12
 800f344:	6819      	ldr	r1, [r3, #0]
 800f346:	3101      	adds	r1, #1
 800f348:	f000 fb38 	bl	800f9bc <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800f34c:	2800      	cmp	r0, #0
 800f34e:	db24      	blt.n	800f39a <RemoteConfig::HandleSet(void*, unsigned int)+0x6a>
 800f350:	221c      	movs	r2, #28
 800f352:	4b1a      	ldr	r3, [pc, #104]	; (800f3bc <RemoteConfig::HandleSet(void*, unsigned int)+0x8c>)
 800f354:	fb02 3300 	mla	r3, r2, r0, r3
 800f358:	68da      	ldr	r2, [r3, #12]
 800f35a:	689b      	ldr	r3, [r3, #8]
 800f35c:	1051      	asrs	r1, r2, #1
 800f35e:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800f362:	07d2      	lsls	r2, r2, #31
 800f364:	bf44      	itt	mi
 800f366:	5862      	ldrmi	r2, [r4, r1]
 800f368:	58d3      	ldrmi	r3, [r2, r3]
 800f36a:	4798      	blx	r3
 800f36c:	e015      	b.n	800f39a <RemoteConfig::HandleSet(void*, unsigned int)+0x6a>
 800f36e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800f372:	460d      	mov	r5, r1
 800f374:	4611      	mov	r1, r2
 800f376:	d810      	bhi.n	800f39a <RemoteConfig::HandleSet(void*, unsigned int)+0x6a>
 800f378:	2200      	movs	r2, #0
 800f37a:	4b11      	ldr	r3, [pc, #68]	; (800f3c0 <RemoteConfig::HandleSet(void*, unsigned int)+0x90>)
 800f37c:	f8c0 25e8 	str.w	r2, [r0, #1512]	; 0x5e8
 800f380:	781b      	ldrb	r3, [r3, #0]
 800f382:	07d8      	lsls	r0, r3, #31
 800f384:	d50b      	bpl.n	800f39e <RemoteConfig::HandleSet(void*, unsigned int)+0x6e>
 800f386:	782b      	ldrb	r3, [r5, #0]
 800f388:	2b7b      	cmp	r3, #123	; 0x7b
 800f38a:	d108      	bne.n	800f39e <RemoteConfig::HandleSet(void*, unsigned int)+0x6e>
 800f38c:	3901      	subs	r1, #1
 800f38e:	4628      	mov	r0, r5
 800f390:	b289      	uxth	r1, r1
 800f392:	f004 fa85 	bl	80138a0 <properties::convert_json_file(char*, unsigned short, bool)>
 800f396:	2800      	cmp	r0, #0
 800f398:	dc09      	bgt.n	800f3ae <RemoteConfig::HandleSet(void*, unsigned int)+0x7e>
 800f39a:	b005      	add	sp, #20
 800f39c:	bd30      	pop	{r4, r5, pc}
 800f39e:	f8c4 15e4 	str.w	r1, [r4, #1508]	; 0x5e4
 800f3a2:	4b05      	ldr	r3, [pc, #20]	; (800f3b8 <RemoteConfig::HandleSet(void*, unsigned int)+0x88>)
 800f3a4:	4620      	mov	r0, r4
 800f3a6:	601d      	str	r5, [r3, #0]
 800f3a8:	aa01      	add	r2, sp, #4
 800f3aa:	1c69      	adds	r1, r5, #1
 800f3ac:	e7cc      	b.n	800f348 <RemoteConfig::HandleSet(void*, unsigned int)+0x18>
 800f3ae:	b280      	uxth	r0, r0
 800f3b0:	f8c4 05e4 	str.w	r0, [r4, #1508]	; 0x5e4
 800f3b4:	e7f5      	b.n	800f3a2 <RemoteConfig::HandleSet(void*, unsigned int)+0x72>
 800f3b6:	bf00      	nop
 800f3b8:	2000195c 	andcs	r1, r0, ip, asr r9
 800f3bc:	08017558 	stmdaeq	r1, {r3, r4, r6, r8, sl, ip, sp, lr}
 800f3c0:	2000a8d0 	ldrdcs	sl, [r0], -r0

0800f3c4 <RemoteConfig::Run()>:
 800f3c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800f3c8:	f890 35d4 	ldrb.w	r3, [r0, #1492]	; 0x5d4
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d15e      	bne.n	800f48e <RemoteConfig::Run()+0xca>
 800f3d0:	4604      	mov	r4, r0
 800f3d2:	4d4b      	ldr	r5, [pc, #300]	; (800f500 <RemoteConfig::Run()+0x13c>)
 800f3d4:	300c      	adds	r0, #12
 800f3d6:	f000 fdf5 	bl	800ffc4 <HttpDaemon::Run()>
 800f3da:	4629      	mov	r1, r5
 800f3dc:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800f3e0:	f10d 030e 	add.w	r3, sp, #14
 800f3e4:	f504 62bc 	add.w	r2, r4, #1504	; 0x5e0
 800f3e8:	f002 f880 	bl	80114ec <udp_recv2>
 800f3ec:	2803      	cmp	r0, #3
 800f3ee:	f8c4 05e4 	str.w	r0, [r4, #1508]	; 0x5e4
 800f3f2:	d94c      	bls.n	800f48e <RemoteConfig::Run()+0xca>
 800f3f4:	682b      	ldr	r3, [r5, #0]
 800f3f6:	3801      	subs	r0, #1
 800f3f8:	5c1a      	ldrb	r2, [r3, r0]
 800f3fa:	2a0a      	cmp	r2, #10
 800f3fc:	bf08      	it	eq
 800f3fe:	f8c4 05e4 	streq.w	r0, [r4, #1508]	; 0x5e4
 800f402:	7819      	ldrb	r1, [r3, #0]
 800f404:	293f      	cmp	r1, #63	; 0x3f
 800f406:	d137      	bne.n	800f478 <RemoteConfig::Run()+0xb4>
 800f408:	493e      	ldr	r1, [pc, #248]	; (800f504 <RemoteConfig::Run()+0x140>)
 800f40a:	2200      	movs	r2, #0
 800f40c:	460f      	mov	r7, r1
 800f40e:	f8d4 05e4 	ldr.w	r0, [r4, #1508]	; 0x5e4
 800f412:	3801      	subs	r0, #1
 800f414:	f8c4 05e4 	str.w	r0, [r4, #1508]	; 0x5e4
 800f418:	7b8e      	ldrb	r6, [r1, #14]
 800f41a:	898d      	ldrh	r5, [r1, #12]
 800f41c:	b176      	cbz	r6, 800f43c <RemoteConfig::Run()+0x78>
 800f41e:	4285      	cmp	r5, r0
 800f420:	d30e      	bcc.n	800f440 <RemoteConfig::Run()+0x7c>
 800f422:	3201      	adds	r2, #1
 800f424:	2a09      	cmp	r2, #9
 800f426:	f101 0110 	add.w	r1, r1, #16
 800f42a:	d1f5      	bne.n	800f418 <RemoteConfig::Run()+0x54>
 800f42c:	f642 1305 	movw	r3, #10501	; 0x2905
 800f430:	9300      	str	r3, [sp, #0]
 800f432:	2208      	movs	r2, #8
 800f434:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800f438:	4933      	ldr	r1, [pc, #204]	; (800f508 <RemoteConfig::Run()+0x144>)
 800f43a:	e054      	b.n	800f4e6 <RemoteConfig::Run()+0x122>
 800f43c:	4285      	cmp	r5, r0
 800f43e:	d1f0      	bne.n	800f422 <RemoteConfig::Run()+0x5e>
 800f440:	688e      	ldr	r6, [r1, #8]
 800f442:	f103 0c01 	add.w	ip, r3, #1
 800f446:	4435      	add	r5, r6
 800f448:	42b5      	cmp	r5, r6
 800f44a:	d006      	beq.n	800f45a <RemoteConfig::Run()+0x96>
 800f44c:	f81c 8b01 	ldrb.w	r8, [ip], #1
 800f450:	f816 eb01 	ldrb.w	lr, [r6], #1
 800f454:	45f0      	cmp	r8, lr
 800f456:	d0f7      	beq.n	800f448 <RemoteConfig::Run()+0x84>
 800f458:	e7e3      	b.n	800f422 <RemoteConfig::Run()+0x5e>
 800f45a:	0113      	lsls	r3, r2, #4
 800f45c:	eb07 1202 	add.w	r2, r7, r2, lsl #4
 800f460:	6852      	ldr	r2, [r2, #4]
 800f462:	58fb      	ldr	r3, [r7, r3]
 800f464:	1051      	asrs	r1, r2, #1
 800f466:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800f46a:	07d2      	lsls	r2, r2, #31
 800f46c:	d401      	bmi.n	800f472 <RemoteConfig::Run()+0xae>
 800f46e:	4798      	blx	r3
 800f470:	e00d      	b.n	800f48e <RemoteConfig::Run()+0xca>
 800f472:	5862      	ldr	r2, [r4, r1]
 800f474:	58d3      	ldr	r3, [r2, r3]
 800f476:	e7fa      	b.n	800f46e <RemoteConfig::Run()+0xaa>
 800f478:	f894 25d5 	ldrb.w	r2, [r4, #1493]	; 0x5d5
 800f47c:	b93a      	cbnz	r2, 800f48e <RemoteConfig::Run()+0xca>
 800f47e:	2923      	cmp	r1, #35	; 0x23
 800f480:	d108      	bne.n	800f494 <RemoteConfig::Run()+0xd0>
 800f482:	4611      	mov	r1, r2
 800f484:	4620      	mov	r0, r4
 800f486:	f8c4 25e8 	str.w	r2, [r4, #1512]	; 0x5e8
 800f48a:	f7ff ff51 	bl	800f330 <RemoteConfig::HandleSet(void*, unsigned int)>
 800f48e:	b004      	add	sp, #16
 800f490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f494:	2921      	cmp	r1, #33	; 0x21
 800f496:	d1fa      	bne.n	800f48e <RemoteConfig::Run()+0xca>
 800f498:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800f49c:	3a01      	subs	r2, #1
 800f49e:	2a05      	cmp	r2, #5
 800f4a0:	f8c4 25e4 	str.w	r2, [r4, #1508]	; 0x5e4
 800f4a4:	d918      	bls.n	800f4d8 <RemoteConfig::Run()+0x114>
 800f4a6:	1c59      	adds	r1, r3, #1
 800f4a8:	4608      	mov	r0, r1
 800f4aa:	4d18      	ldr	r5, [pc, #96]	; (800f50c <RemoteConfig::Run()+0x148>)
 800f4ac:	f103 0c06 	add.w	ip, r3, #6
 800f4b0:	4560      	cmp	r0, ip
 800f4b2:	d01d      	beq.n	800f4f0 <RemoteConfig::Run()+0x12c>
 800f4b4:	f810 7b01 	ldrb.w	r7, [r0], #1
 800f4b8:	f815 6b01 	ldrb.w	r6, [r5], #1
 800f4bc:	42b7      	cmp	r7, r6
 800f4be:	d0f7      	beq.n	800f4b0 <RemoteConfig::Run()+0xec>
 800f4c0:	2a08      	cmp	r2, #8
 800f4c2:	d909      	bls.n	800f4d8 <RemoteConfig::Run()+0x114>
 800f4c4:	4a12      	ldr	r2, [pc, #72]	; (800f510 <RemoteConfig::Run()+0x14c>)
 800f4c6:	3309      	adds	r3, #9
 800f4c8:	428b      	cmp	r3, r1
 800f4ca:	d017      	beq.n	800f4fc <RemoteConfig::Run()+0x138>
 800f4cc:	f811 5b01 	ldrb.w	r5, [r1], #1
 800f4d0:	f812 0b01 	ldrb.w	r0, [r2], #1
 800f4d4:	4285      	cmp	r5, r0
 800f4d6:	d0f7      	beq.n	800f4c8 <RemoteConfig::Run()+0x104>
 800f4d8:	f642 1305 	movw	r3, #10501	; 0x2905
 800f4dc:	2208      	movs	r2, #8
 800f4de:	9300      	str	r3, [sp, #0]
 800f4e0:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800f4e4:	490b      	ldr	r1, [pc, #44]	; (800f514 <RemoteConfig::Run()+0x150>)
 800f4e6:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800f4ea:	f002 f825 	bl	8011538 <udp_send>
 800f4ee:	e7ce      	b.n	800f48e <RemoteConfig::Run()+0xca>
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	4a09      	ldr	r2, [pc, #36]	; (800f518 <RemoteConfig::Run()+0x154>)
 800f4f4:	011b      	lsls	r3, r3, #4
 800f4f6:	4620      	mov	r0, r4
 800f4f8:	58d3      	ldr	r3, [r2, r3]
 800f4fa:	e7b8      	b.n	800f46e <RemoteConfig::Run()+0xaa>
 800f4fc:	2301      	movs	r3, #1
 800f4fe:	e7f8      	b.n	800f4f2 <RemoteConfig::Run()+0x12e>
 800f500:	2000195c 	andcs	r1, r0, ip, asr r9
 800f504:	08017450 	stmdaeq	r1, {r4, r6, sl, ip, sp, lr}
 800f508:	080172dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r9, ip, sp, lr}
 800f50c:	080172c5 	stmdaeq	r1, {r0, r2, r6, r7, r9, ip, sp, lr}
 800f510:	080172cb 	stmdaeq	r1, {r0, r1, r3, r6, r7, r9, ip, sp, lr}
 800f514:	080172d4 	stmdaeq	r1, {r2, r4, r6, r7, r9, ip, sp, lr}
 800f518:	080174e0 	stmdaeq	r1, {r5, r6, r7, sl, ip, sp, lr}

0800f51c <RemoteConfig::HandleSetRconfig()>:
 800f51c:	b510      	push	{r4, lr}
 800f51e:	4604      	mov	r4, r0
 800f520:	4b09      	ldr	r3, [pc, #36]	; (800f548 <RemoteConfig::HandleSetRconfig()+0x2c>)
 800f522:	b08a      	sub	sp, #40	; 0x28
 800f524:	6819      	ldr	r1, [r3, #0]
 800f526:	a801      	add	r0, sp, #4
 800f528:	f000 f89e 	bl	800f668 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 800f52c:	4b07      	ldr	r3, [pc, #28]	; (800f54c <RemoteConfig::HandleSetRconfig()+0x30>)
 800f52e:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800f532:	6819      	ldr	r1, [r3, #0]
 800f534:	a801      	add	r0, sp, #4
 800f536:	f000 f8ad 	bl	800f694 <RemoteConfigParams::Load(char const*, unsigned int)>
 800f53a:	4621      	mov	r1, r4
 800f53c:	a801      	add	r0, sp, #4
 800f53e:	f000 f9c4 	bl	800f8ca <RemoteConfigParams::Set(RemoteConfig*)>
 800f542:	b00a      	add	sp, #40	; 0x28
 800f544:	bd10      	pop	{r4, pc}
 800f546:	bf00      	nop
 800f548:	200029b0 			; <UNDEFINED> instruction: 0x200029b0
 800f54c:	2000195c 	andcs	r1, r0, ip, asr r9

0800f550 <RemoteConfig::HandleSetNetworkTxt()>:
 800f550:	b513      	push	{r0, r1, r4, lr}
 800f552:	4604      	mov	r4, r0
 800f554:	4b06      	ldr	r3, [pc, #24]	; (800f570 <RemoteConfig::HandleSetNetworkTxt()+0x20>)
 800f556:	a801      	add	r0, sp, #4
 800f558:	6819      	ldr	r1, [r3, #0]
 800f55a:	f002 ff41 	bl	80123e0 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800f55e:	4b05      	ldr	r3, [pc, #20]	; (800f574 <RemoteConfig::HandleSetNetworkTxt()+0x24>)
 800f560:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800f564:	6819      	ldr	r1, [r3, #0]
 800f566:	a801      	add	r0, sp, #4
 800f568:	f002 ff5a 	bl	8012420 <NetworkParams::Load(char const*, unsigned int)>
 800f56c:	b002      	add	sp, #8
 800f56e:	bd10      	pop	{r4, pc}
 800f570:	200029ac 	andcs	r2, r0, ip, lsr #19
 800f574:	2000195c 	andcs	r1, r0, ip, asr r9

0800f578 <RemoteConfig::HandleSetArtnetTxt()>:
 800f578:	b510      	push	{r4, lr}
 800f57a:	4604      	mov	r4, r0
 800f57c:	4b07      	ldr	r3, [pc, #28]	; (800f59c <RemoteConfig::HandleSetArtnetTxt()+0x24>)
 800f57e:	b0a4      	sub	sp, #144	; 0x90
 800f580:	6819      	ldr	r1, [r3, #0]
 800f582:	a801      	add	r0, sp, #4
 800f584:	f7fb ff76 	bl	800b474 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 800f588:	4b05      	ldr	r3, [pc, #20]	; (800f5a0 <RemoteConfig::HandleSetArtnetTxt()+0x28>)
 800f58a:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800f58e:	6819      	ldr	r1, [r3, #0]
 800f590:	a801      	add	r0, sp, #4
 800f592:	f7fb ffa1 	bl	800b4d8 <ArtNetParams::Load(char const*, unsigned int)>
 800f596:	b024      	add	sp, #144	; 0x90
 800f598:	bd10      	pop	{r4, pc}
 800f59a:	bf00      	nop
 800f59c:	200029a4 	andcs	r2, r0, r4, lsr #19
 800f5a0:	2000195c 	andcs	r1, r0, ip, asr r9

0800f5a4 <RemoteConfig::HandleSetDevicesTxt()>:
 800f5a4:	b510      	push	{r4, lr}
 800f5a6:	4604      	mov	r4, r0
 800f5a8:	4b07      	ldr	r3, [pc, #28]	; (800f5c8 <RemoteConfig::HandleSetDevicesTxt()+0x24>)
 800f5aa:	b08c      	sub	sp, #48	; 0x30
 800f5ac:	6819      	ldr	r1, [r3, #0]
 800f5ae:	a801      	add	r0, sp, #4
 800f5b0:	f7fd fdd0 	bl	800d154 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>
 800f5b4:	4b05      	ldr	r3, [pc, #20]	; (800f5cc <RemoteConfig::HandleSetDevicesTxt()+0x28>)
 800f5b6:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800f5ba:	6819      	ldr	r1, [r3, #0]
 800f5bc:	a801      	add	r0, sp, #4
 800f5be:	f7fd fe11 	bl	800d1e4 <WS28xxDmxParams::Load(char const*, unsigned int)>
 800f5c2:	b00c      	add	sp, #48	; 0x30
 800f5c4:	bd10      	pop	{r4, pc}
 800f5c6:	bf00      	nop
 800f5c8:	200029b4 			; <UNDEFINED> instruction: 0x200029b4
 800f5cc:	2000195c 	andcs	r1, r0, ip, asr r9

0800f5d0 <RemoteConfig::HandleSetDisplayTxt()>:
 800f5d0:	b510      	push	{r4, lr}
 800f5d2:	4604      	mov	r4, r0
 800f5d4:	4b07      	ldr	r3, [pc, #28]	; (800f5f4 <RemoteConfig::HandleSetDisplayTxt()+0x24>)
 800f5d6:	b08a      	sub	sp, #40	; 0x28
 800f5d8:	6819      	ldr	r1, [r3, #0]
 800f5da:	4668      	mov	r0, sp
 800f5dc:	f003 feb8 	bl	8013350 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 800f5e0:	4b05      	ldr	r3, [pc, #20]	; (800f5f8 <RemoteConfig::HandleSetDisplayTxt()+0x28>)
 800f5e2:	4668      	mov	r0, sp
 800f5e4:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800f5e8:	6819      	ldr	r1, [r3, #0]
 800f5ea:	f003 fecb 	bl	8013384 <DisplayUdfParams::Load(char const*, unsigned int)>
 800f5ee:	b00a      	add	sp, #40	; 0x28
 800f5f0:	bd10      	pop	{r4, pc}
 800f5f2:	bf00      	nop
 800f5f4:	200029a8 	andcs	r2, r0, r8, lsr #19
 800f5f8:	2000195c 	andcs	r1, r0, ip, asr r9

0800f5fc <RemoteConfig::HandleFactory()>:
 800f5fc:	b538      	push	{r3, r4, r5, lr}
 800f5fe:	2400      	movs	r4, #0
 800f600:	4d04      	ldr	r5, [pc, #16]	; (800f614 <RemoteConfig::HandleFactory()+0x18>)
 800f602:	4621      	mov	r1, r4
 800f604:	6828      	ldr	r0, [r5, #0]
 800f606:	3401      	adds	r4, #1
 800f608:	f000 ff18 	bl	801043c <SpiFlashStore::ResetSetList(spiflashstore::Store)>
 800f60c:	2c1c      	cmp	r4, #28
 800f60e:	d1f8      	bne.n	800f602 <RemoteConfig::HandleFactory()+0x6>
 800f610:	bd38      	pop	{r3, r4, r5, pc}
 800f612:	bf00      	nop
 800f614:	2000299c 	mulcs	r0, ip, r9

0800f618 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800f618:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f61a:	460b      	mov	r3, r1
 800f61c:	8885      	ldrh	r5, [r0, #4]
 800f61e:	88c1      	ldrh	r1, [r0, #6]
 800f620:	42a9      	cmp	r1, r5
 800f622:	d214      	bcs.n	800f64e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800f624:	4604      	mov	r4, r0
 800f626:	6800      	ldr	r0, [r0, #0]
 800f628:	1a6d      	subs	r5, r5, r1
 800f62a:	4408      	add	r0, r1
 800f62c:	7a21      	ldrb	r1, [r4, #8]
 800f62e:	b91a      	cbnz	r2, 800f638 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800f630:	b919      	cbnz	r1, 800f63a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800f632:	4a0a      	ldr	r2, [pc, #40]	; (800f65c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800f634:	9100      	str	r1, [sp, #0]
 800f636:	e002      	b.n	800f63e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800f638:	b159      	cbz	r1, 800f652 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800f63a:	9200      	str	r2, [sp, #0]
 800f63c:	4a08      	ldr	r2, [pc, #32]	; (800f660 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800f63e:	4629      	mov	r1, r5
 800f640:	f7fa f83c 	bl	80096bc <snprintf>
 800f644:	4285      	cmp	r5, r0
 800f646:	bfa2      	ittt	ge
 800f648:	88e3      	ldrhge	r3, [r4, #6]
 800f64a:	181b      	addge	r3, r3, r0
 800f64c:	80e3      	strhge	r3, [r4, #6]
 800f64e:	b003      	add	sp, #12
 800f650:	bd30      	pop	{r4, r5, pc}
 800f652:	2201      	movs	r2, #1
 800f654:	9200      	str	r2, [sp, #0]
 800f656:	4a03      	ldr	r2, [pc, #12]	; (800f664 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800f658:	e7f1      	b.n	800f63e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800f65a:	bf00      	nop
 800f65c:	08016d5d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, sl, fp, sp, lr}
 800f660:	08016d54 	stmdaeq	r1, {r2, r4, r6, r8, sl, fp, sp, lr}
 800f664:	08016d5e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}

0800f668 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>:
 800f668:	b510      	push	{r4, lr}
 800f66a:	4604      	mov	r4, r0
 800f66c:	2220      	movs	r2, #32
 800f66e:	f840 1b04 	str.w	r1, [r0], #4
 800f672:	2100      	movs	r1, #0
 800f674:	f005 f94c 	bl	8014910 <memset>
 800f678:	4620      	mov	r0, r4
 800f67a:	bd10      	pop	{r4, pc}

0800f67c <RemoteConfigParams::Load()>:
 800f67c:	b508      	push	{r3, lr}
 800f67e:	2300      	movs	r3, #0
 800f680:	4601      	mov	r1, r0
 800f682:	6043      	str	r3, [r0, #4]
 800f684:	6800      	ldr	r0, [r0, #0]
 800f686:	b120      	cbz	r0, 800f692 <RemoteConfigParams::Load()+0x16>
 800f688:	6803      	ldr	r3, [r0, #0]
 800f68a:	3104      	adds	r1, #4
 800f68c:	68db      	ldr	r3, [r3, #12]
 800f68e:	4798      	blx	r3
 800f690:	2001      	movs	r0, #1
 800f692:	bd08      	pop	{r3, pc}

0800f694 <RemoteConfigParams::Load(char const*, unsigned int)>:
 800f694:	2300      	movs	r3, #0
 800f696:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f698:	460d      	mov	r5, r1
 800f69a:	4616      	mov	r6, r2
 800f69c:	4604      	mov	r4, r0
 800f69e:	6043      	str	r3, [r0, #4]
 800f6a0:	4602      	mov	r2, r0
 800f6a2:	490a      	ldr	r1, [pc, #40]	; (800f6cc <RemoteConfigParams::Load(char const*, unsigned int)+0x38>)
 800f6a4:	4668      	mov	r0, sp
 800f6a6:	f004 fa79 	bl	8013b9c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800f6aa:	4632      	mov	r2, r6
 800f6ac:	4629      	mov	r1, r5
 800f6ae:	4668      	mov	r0, sp
 800f6b0:	f004 fa78 	bl	8013ba4 <ReadConfigFile::Read(char const*, unsigned int)>
 800f6b4:	4621      	mov	r1, r4
 800f6b6:	f851 0b04 	ldr.w	r0, [r1], #4
 800f6ba:	6803      	ldr	r3, [r0, #0]
 800f6bc:	689b      	ldr	r3, [r3, #8]
 800f6be:	4798      	blx	r3
 800f6c0:	4668      	mov	r0, sp
 800f6c2:	f004 fa6e 	bl	8013ba2 <ReadConfigFile::~ReadConfigFile()>
 800f6c6:	b002      	add	sp, #8
 800f6c8:	bd70      	pop	{r4, r5, r6, pc}
 800f6ca:	bf00      	nop
 800f6cc:	0800f78d 	stmdaeq	r0, {r0, r2, r3, r7, r8, r9, sl, ip, sp, lr, pc}

0800f6d0 <RemoteConfigParams::SetBool(unsigned char, unsigned int)>:
 800f6d0:	6843      	ldr	r3, [r0, #4]
 800f6d2:	b111      	cbz	r1, 800f6da <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0xa>
 800f6d4:	4313      	orrs	r3, r2
 800f6d6:	6043      	str	r3, [r0, #4]
 800f6d8:	4770      	bx	lr
 800f6da:	ea23 0302 	bic.w	r3, r3, r2
 800f6de:	e7fa      	b.n	800f6d6 <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0x6>

0800f6e0 <RemoteConfigParams::callbackFunction(char const*)>:
 800f6e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f6e2:	460d      	mov	r5, r1
 800f6e4:	4604      	mov	r4, r0
 800f6e6:	4923      	ldr	r1, [pc, #140]	; (800f774 <RemoteConfigParams::callbackFunction(char const*)+0x94>)
 800f6e8:	4628      	mov	r0, r5
 800f6ea:	f10d 0203 	add.w	r2, sp, #3
 800f6ee:	f004 fbbb 	bl	8013e68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800f6f2:	b938      	cbnz	r0, 800f704 <RemoteConfigParams::callbackFunction(char const*)+0x24>
 800f6f4:	2201      	movs	r2, #1
 800f6f6:	4620      	mov	r0, r4
 800f6f8:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800f6fc:	f7ff ffe8 	bl	800f6d0 <RemoteConfigParams::SetBool(unsigned char, unsigned int)>
 800f700:	b003      	add	sp, #12
 800f702:	bd30      	pop	{r4, r5, pc}
 800f704:	4628      	mov	r0, r5
 800f706:	491c      	ldr	r1, [pc, #112]	; (800f778 <RemoteConfigParams::callbackFunction(char const*)+0x98>)
 800f708:	f10d 0203 	add.w	r2, sp, #3
 800f70c:	f004 fbac 	bl	8013e68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800f710:	b908      	cbnz	r0, 800f716 <RemoteConfigParams::callbackFunction(char const*)+0x36>
 800f712:	2202      	movs	r2, #2
 800f714:	e7ef      	b.n	800f6f6 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800f716:	4628      	mov	r0, r5
 800f718:	4918      	ldr	r1, [pc, #96]	; (800f77c <RemoteConfigParams::callbackFunction(char const*)+0x9c>)
 800f71a:	f10d 0203 	add.w	r2, sp, #3
 800f71e:	f004 fba3 	bl	8013e68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800f722:	b908      	cbnz	r0, 800f728 <RemoteConfigParams::callbackFunction(char const*)+0x48>
 800f724:	2204      	movs	r2, #4
 800f726:	e7e6      	b.n	800f6f6 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800f728:	4628      	mov	r0, r5
 800f72a:	4915      	ldr	r1, [pc, #84]	; (800f780 <RemoteConfigParams::callbackFunction(char const*)+0xa0>)
 800f72c:	f10d 0203 	add.w	r2, sp, #3
 800f730:	f004 fb9a 	bl	8013e68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800f734:	b908      	cbnz	r0, 800f73a <RemoteConfigParams::callbackFunction(char const*)+0x5a>
 800f736:	2208      	movs	r2, #8
 800f738:	e7dd      	b.n	800f6f6 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800f73a:	4628      	mov	r0, r5
 800f73c:	4911      	ldr	r1, [pc, #68]	; (800f784 <RemoteConfigParams::callbackFunction(char const*)+0xa4>)
 800f73e:	f10d 0203 	add.w	r2, sp, #3
 800f742:	f004 fb91 	bl	8013e68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800f746:	b908      	cbnz	r0, 800f74c <RemoteConfigParams::callbackFunction(char const*)+0x6c>
 800f748:	2220      	movs	r2, #32
 800f74a:	e7d4      	b.n	800f6f6 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800f74c:	2317      	movs	r3, #23
 800f74e:	4628      	mov	r0, r5
 800f750:	9301      	str	r3, [sp, #4]
 800f752:	490d      	ldr	r1, [pc, #52]	; (800f788 <RemoteConfigParams::callbackFunction(char const*)+0xa8>)
 800f754:	ab01      	add	r3, sp, #4
 800f756:	f104 020c 	add.w	r2, r4, #12
 800f75a:	f004 fa57 	bl	8013c0c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800f75e:	2800      	cmp	r0, #0
 800f760:	d1ce      	bne.n	800f700 <RemoteConfigParams::callbackFunction(char const*)+0x20>
 800f762:	9b01      	ldr	r3, [sp, #4]
 800f764:	4423      	add	r3, r4
 800f766:	7318      	strb	r0, [r3, #12]
 800f768:	6863      	ldr	r3, [r4, #4]
 800f76a:	f043 0310 	orr.w	r3, r3, #16
 800f76e:	6063      	str	r3, [r4, #4]
 800f770:	e7c6      	b.n	800f700 <RemoteConfigParams::callbackFunction(char const*)+0x20>
 800f772:	bf00      	nop
 800f774:	080178be 	stmdaeq	r1, {r1, r2, r3, r4, r5, r7, fp, ip, sp, lr}
 800f778:	080178df 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, fp, ip, sp, lr}
 800f77c:	080178ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, fp, ip, sp, lr}
 800f780:	080178fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, fp, ip, sp, lr}
 800f784:	08017909 	stmdaeq	r1, {r0, r3, r8, fp, ip, sp, lr}
 800f788:	080178d2 	stmdaeq	r1, {r1, r4, r6, r7, fp, ip, sp, lr}

0800f78c <RemoteConfigParams::staticCallbackFunction(void*, char const*)>:
 800f78c:	f7ff bfa8 	b.w	800f6e0 <RemoteConfigParams::callbackFunction(char const*)>

0800f790 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>:
 800f790:	b570      	push	{r4, r5, r6, lr}
 800f792:	4604      	mov	r4, r0
 800f794:	4615      	mov	r5, r2
 800f796:	461e      	mov	r6, r3
 800f798:	b086      	sub	sp, #24
 800f79a:	3004      	adds	r0, #4
 800f79c:	2900      	cmp	r1, #0
 800f79e:	d040      	beq.n	800f822 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x92>
 800f7a0:	2220      	movs	r2, #32
 800f7a2:	f005 f89e 	bl	80148e2 <memmove>
 800f7a6:	4633      	mov	r3, r6
 800f7a8:	462a      	mov	r2, r5
 800f7aa:	4937      	ldr	r1, [pc, #220]	; (800f888 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf8>)
 800f7ac:	a803      	add	r0, sp, #12
 800f7ae:	f004 f925 	bl	80139fc <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800f7b2:	6862      	ldr	r2, [r4, #4]
 800f7b4:	4935      	ldr	r1, [pc, #212]	; (800f88c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xfc>)
 800f7b6:	f002 0201 	and.w	r2, r2, #1
 800f7ba:	a803      	add	r0, sp, #12
 800f7bc:	f7ff ff2c 	bl	800f618 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800f7c0:	6862      	ldr	r2, [r4, #4]
 800f7c2:	4933      	ldr	r1, [pc, #204]	; (800f890 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x100>)
 800f7c4:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800f7c8:	a803      	add	r0, sp, #12
 800f7ca:	f7ff ff25 	bl	800f618 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800f7ce:	6862      	ldr	r2, [r4, #4]
 800f7d0:	4930      	ldr	r1, [pc, #192]	; (800f894 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x104>)
 800f7d2:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800f7d6:	a803      	add	r0, sp, #12
 800f7d8:	f7ff ff1e 	bl	800f618 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800f7dc:	6862      	ldr	r2, [r4, #4]
 800f7de:	492e      	ldr	r1, [pc, #184]	; (800f898 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x108>)
 800f7e0:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800f7e4:	a803      	add	r0, sp, #12
 800f7e6:	f7ff ff17 	bl	800f618 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800f7ea:	6862      	ldr	r2, [r4, #4]
 800f7ec:	492b      	ldr	r1, [pc, #172]	; (800f89c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x10c>)
 800f7ee:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800f7f2:	a803      	add	r0, sp, #12
 800f7f4:	f7ff ff10 	bl	800f618 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800f7f8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800f7fc:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800f800:	42a9      	cmp	r1, r5
 800f802:	d223      	bcs.n	800f84c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xbc>
 800f804:	9803      	ldr	r0, [sp, #12]
 800f806:	1a6d      	subs	r5, r5, r1
 800f808:	4408      	add	r0, r1
 800f80a:	6861      	ldr	r1, [r4, #4]
 800f80c:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800f810:	06c9      	lsls	r1, r1, #27
 800f812:	f104 030c 	add.w	r3, r4, #12
 800f816:	d40b      	bmi.n	800f830 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa0>
 800f818:	b95a      	cbnz	r2, 800f832 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa2>
 800f81a:	9300      	str	r3, [sp, #0]
 800f81c:	4a20      	ldr	r2, [pc, #128]	; (800f8a0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 800f81e:	4b21      	ldr	r3, [pc, #132]	; (800f8a4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>)
 800f820:	e00a      	b.n	800f838 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa8>
 800f822:	6823      	ldr	r3, [r4, #0]
 800f824:	4601      	mov	r1, r0
 800f826:	681a      	ldr	r2, [r3, #0]
 800f828:	4618      	mov	r0, r3
 800f82a:	68d2      	ldr	r2, [r2, #12]
 800f82c:	4790      	blx	r2
 800f82e:	e7ba      	b.n	800f7a6 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x16>
 800f830:	b32a      	cbz	r2, 800f87e <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xee>
 800f832:	9300      	str	r3, [sp, #0]
 800f834:	4a1c      	ldr	r2, [pc, #112]	; (800f8a8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x118>)
 800f836:	4b1b      	ldr	r3, [pc, #108]	; (800f8a4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>)
 800f838:	4629      	mov	r1, r5
 800f83a:	f7f9 ff3f 	bl	80096bc <snprintf>
 800f83e:	4285      	cmp	r5, r0
 800f840:	bfa2      	ittt	ge
 800f842:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800f846:	18c0      	addge	r0, r0, r3
 800f848:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800f84c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800f850:	b17b      	cbz	r3, 800f872 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xe2>
 800f852:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800f856:	9b03      	ldr	r3, [sp, #12]
 800f858:	4413      	add	r3, r2
 800f85a:	227d      	movs	r2, #125	; 0x7d
 800f85c:	f803 2c01 	strb.w	r2, [r3, #-1]
 800f860:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800f864:	9903      	ldr	r1, [sp, #12]
 800f866:	54ca      	strb	r2, [r1, r3]
 800f868:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800f86c:	3301      	adds	r3, #1
 800f86e:	f8ad 3012 	strh.w	r3, [sp, #18]
 800f872:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800f876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f878:	601a      	str	r2, [r3, #0]
 800f87a:	b006      	add	sp, #24
 800f87c:	bd70      	pop	{r4, r5, r6, pc}
 800f87e:	9300      	str	r3, [sp, #0]
 800f880:	4a0a      	ldr	r2, [pc, #40]	; (800f8ac <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x11c>)
 800f882:	4b08      	ldr	r3, [pc, #32]	; (800f8a4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>)
 800f884:	e7d8      	b.n	800f838 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa8>
 800f886:	bf00      	nop
 800f888:	080178c6 	stmdaeq	r1, {r1, r2, r6, r7, fp, ip, sp, lr}
 800f88c:	080178be 	stmdaeq	r1, {r1, r2, r3, r4, r5, r7, fp, ip, sp, lr}
 800f890:	080178df 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, fp, ip, sp, lr}
 800f894:	080178ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, fp, ip, sp, lr}
 800f898:	080178fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, fp, ip, sp, lr}
 800f89c:	08017909 	stmdaeq	r1, {r0, r3, r8, fp, ip, sp, lr}
 800f8a0:	08016d70 	stmdaeq	r1, {r4, r5, r6, r8, sl, fp, sp, lr}
 800f8a4:	080178d2 	stmdaeq	r1, {r1, r4, r6, r7, fp, ip, sp, lr}
 800f8a8:	08016d65 	stmdaeq	r1, {r0, r2, r5, r6, r8, sl, fp, sp, lr}
 800f8ac:	08016d71 	stmdaeq	r1, {r0, r4, r5, r6, r8, sl, fp, sp, lr}

0800f8b0 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>:
 800f8b0:	b513      	push	{r0, r1, r4, lr}
 800f8b2:	6804      	ldr	r4, [r0, #0]
 800f8b4:	b914      	cbnz	r4, 800f8bc <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800f8b6:	601c      	str	r4, [r3, #0]
 800f8b8:	b002      	add	sp, #8
 800f8ba:	bd10      	pop	{r4, pc}
 800f8bc:	9300      	str	r3, [sp, #0]
 800f8be:	4613      	mov	r3, r2
 800f8c0:	460a      	mov	r2, r1
 800f8c2:	2100      	movs	r1, #0
 800f8c4:	f7ff ff64 	bl	800f790 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>
 800f8c8:	e7f6      	b.n	800f8b8 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800f8ca <RemoteConfigParams::Set(RemoteConfig*)>:
 800f8ca:	b538      	push	{r3, r4, r5, lr}
 800f8cc:	460c      	mov	r4, r1
 800f8ce:	4605      	mov	r5, r0
 800f8d0:	6841      	ldr	r1, [r0, #4]
 800f8d2:	4620      	mov	r0, r4
 800f8d4:	f001 0101 	and.w	r1, r1, #1
 800f8d8:	f7ff fc1e 	bl	800f118 <RemoteConfig::SetDisable(bool)>
 800f8dc:	686b      	ldr	r3, [r5, #4]
 800f8de:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800f8e2:	f884 25d5 	strb.w	r2, [r4, #1493]	; 0x5d5
 800f8e6:	f3c3 0280 	ubfx	r2, r3, #2, #1
 800f8ea:	f884 25d6 	strb.w	r2, [r4, #1494]	; 0x5d6
 800f8ee:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 800f8f2:	f884 25d7 	strb.w	r2, [r4, #1495]	; 0x5d7
 800f8f6:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800f8fa:	06db      	lsls	r3, r3, #27
 800f8fc:	f884 25d8 	strb.w	r2, [r4, #1496]	; 0x5d8
 800f900:	d506      	bpl.n	800f910 <RemoteConfigParams::Set(RemoteConfig*)+0x46>
 800f902:	4620      	mov	r0, r4
 800f904:	f105 010c 	add.w	r1, r5, #12
 800f908:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f90c:	f7ff bc28 	b.w	800f160 <RemoteConfig::SetDisplayName(char const*)>
 800f910:	bd38      	pop	{r3, r4, r5, pc}

0800f912 <RemoteConfigParams::Dump()>:
 800f912:	4770      	bx	lr

0800f914 <RemoteConfig::HandleReboot()>:
 800f914:	f890 35d6 	ldrb.w	r3, [r0, #1494]	; 0x5d6
 800f918:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d03e      	beq.n	800f99c <RemoteConfig::HandleReboot()+0x88>
 800f91e:	2301      	movs	r3, #1
 800f920:	4c1f      	ldr	r4, [pc, #124]	; (800f9a0 <RemoteConfig::HandleReboot()+0x8c>)
 800f922:	f880 35d9 	strb.w	r3, [r0, #1497]	; 0x5d9
 800f926:	6825      	ldr	r5, [r4, #0]
 800f928:	69a8      	ldr	r0, [r5, #24]
 800f92a:	b138      	cbz	r0, 800f93c <RemoteConfig::HandleReboot()+0x28>
 800f92c:	2100      	movs	r1, #0
 800f92e:	6803      	ldr	r3, [r0, #0]
 800f930:	7429      	strb	r1, [r5, #16]
 800f932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f934:	4798      	blx	r3
 800f936:	4b1b      	ldr	r3, [pc, #108]	; (800f9a4 <RemoteConfig::HandleReboot()+0x90>)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	606b      	str	r3, [r5, #4]
 800f93c:	4d1a      	ldr	r5, [pc, #104]	; (800f9a8 <RemoteConfig::HandleReboot()+0x94>)
 800f93e:	6828      	ldr	r0, [r5, #0]
 800f940:	f000 fe02 	bl	8010548 <SpiFlashStore::Flash()>
 800f944:	2800      	cmp	r0, #0
 800f946:	d1fa      	bne.n	800f93e <RemoteConfig::HandleReboot()+0x2a>
 800f948:	4b18      	ldr	r3, [pc, #96]	; (800f9ac <RemoteConfig::HandleReboot()+0x98>)
 800f94a:	6818      	ldr	r0, [r3, #0]
 800f94c:	f002 faba 	bl	8011ec4 <Network::Shutdown()>
 800f950:	4817      	ldr	r0, [pc, #92]	; (800f9b0 <RemoteConfig::HandleReboot()+0x9c>)
 800f952:	f7f9 fe8b 	bl	800966c <printf>
 800f956:	6823      	ldr	r3, [r4, #0]
 800f958:	6998      	ldr	r0, [r3, #24]
 800f95a:	b110      	cbz	r0, 800f962 <RemoteConfig::HandleReboot()+0x4e>
 800f95c:	6803      	ldr	r3, [r0, #0]
 800f95e:	68db      	ldr	r3, [r3, #12]
 800f960:	4798      	blx	r3
 800f962:	6824      	ldr	r4, [r4, #0]
 800f964:	4913      	ldr	r1, [pc, #76]	; (800f9b4 <RemoteConfig::HandleReboot()+0xa0>)
 800f966:	4620      	mov	r0, r4
 800f968:	f7f9 f86c 	bl	8008a44 <Display::TextStatus(char const*)>
 800f96c:	7c63      	ldrb	r3, [r4, #17]
 800f96e:	b18b      	cbz	r3, 800f994 <RemoteConfig::HandleReboot()+0x80>
 800f970:	2312      	movs	r3, #18
 800f972:	f88d 3004 	strb.w	r3, [sp, #4]
 800f976:	23bf      	movs	r3, #191	; 0xbf
 800f978:	7a20      	ldrb	r0, [r4, #8]
 800f97a:	f88d 3005 	strb.w	r3, [sp, #5]
 800f97e:	f88d 3006 	strb.w	r3, [sp, #6]
 800f982:	f005 ff2f 	bl	80157e4 <gd32_i2c_set_address(unsigned char)>
 800f986:	68e0      	ldr	r0, [r4, #12]
 800f988:	f005 ff24 	bl	80157d4 <gd32_i2c_set_baudrate(unsigned int)>
 800f98c:	2103      	movs	r1, #3
 800f98e:	a801      	add	r0, sp, #4
 800f990:	f005 ff2e 	bl	80157f0 <gd32_i2c_write(char const*, unsigned int)>
 800f994:	4b08      	ldr	r3, [pc, #32]	; (800f9b8 <RemoteConfig::HandleReboot()+0xa4>)
 800f996:	6818      	ldr	r0, [r3, #0]
 800f998:	f004 fea2 	bl	80146e0 <Hardware::Reboot()>
 800f99c:	b003      	add	sp, #12
 800f99e:	bd30      	pop	{r4, r5, pc}
 800f9a0:	2000a8d4 	ldrdcs	sl, [r0], -r4
 800f9a4:	2000a9dc 	ldrdcs	sl, [r0], -ip
 800f9a8:	2000299c 	mulcs	r0, ip, r9
 800f9ac:	2000a29c 	mulcs	r0, ip, r2
 800f9b0:	08017500 	stmdaeq	r1, {r8, sl, ip, sp, lr}
 800f9b4:	0801750f 	stmdaeq	r1, {r0, r1, r2, r3, r8, sl, ip, sp, lr}
 800f9b8:	2000a9c4 	andcs	sl, r0, r4, asr #19

0800f9bc <RemoteConfig::GetIndex(void const*, unsigned int&)>:
 800f9bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f9c0:	2000      	movs	r0, #0
 800f9c2:	4d12      	ldr	r5, [pc, #72]	; (800fa0c <RemoteConfig::GetIndex(void const*, unsigned int&)+0x50>)
 800f9c4:	f10d 0c04 	add.w	ip, sp, #4
 800f9c8:	6814      	ldr	r4, [r2, #0]
 800f9ca:	7d2b      	ldrb	r3, [r5, #20]
 800f9cc:	692e      	ldr	r6, [r5, #16]
 800f9ce:	42a3      	cmp	r3, r4
 800f9d0:	bf34      	ite	cc
 800f9d2:	4664      	movcc	r4, ip
 800f9d4:	4614      	movcs	r4, r2
 800f9d6:	9301      	str	r3, [sp, #4]
 800f9d8:	6827      	ldr	r7, [r4, #0]
 800f9da:	460c      	mov	r4, r1
 800f9dc:	3e01      	subs	r6, #1
 800f9de:	440f      	add	r7, r1
 800f9e0:	42bc      	cmp	r4, r7
 800f9e2:	d011      	beq.n	800fa08 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x4c>
 800f9e4:	f894 8000 	ldrb.w	r8, [r4]
 800f9e8:	f816 ef01 	ldrb.w	lr, [r6, #1]!
 800f9ec:	45f0      	cmp	r8, lr
 800f9ee:	d009      	beq.n	800fa04 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x48>
 800f9f0:	3001      	adds	r0, #1
 800f9f2:	2805      	cmp	r0, #5
 800f9f4:	f105 051c 	add.w	r5, r5, #28
 800f9f8:	d1e6      	bne.n	800f9c8 <RemoteConfig::GetIndex(void const*, unsigned int&)+0xc>
 800f9fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f9fe:	b002      	add	sp, #8
 800fa00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa04:	3401      	adds	r4, #1
 800fa06:	e7eb      	b.n	800f9e0 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x24>
 800fa08:	6013      	str	r3, [r2, #0]
 800fa0a:	e7f8      	b.n	800f9fe <RemoteConfig::GetIndex(void const*, unsigned int&)+0x42>
 800fa0c:	08017558 	stmdaeq	r1, {r3, r4, r6, r8, sl, ip, sp, lr}

0800fa10 <RemoteConfig::PlatformHandleTftpSet()>:
 800fa10:	f890 15ec 	ldrb.w	r1, [r0, #1516]	; 0x5ec
 800fa14:	b109      	cbz	r1, 800fa1a <RemoteConfig::PlatformHandleTftpSet()+0xa>
 800fa16:	f24a 51a5 	movw	r1, #42405	; 0xa5a5
 800fa1a:	2002      	movs	r0, #2
 800fa1c:	f005 b976 	b.w	8014d0c <bkp_data_write>

0800fa20 <RemoteConfig::PlatformHandleTftpGet()>:
 800fa20:	b510      	push	{r4, lr}
 800fa22:	4604      	mov	r4, r0
 800fa24:	2002      	movs	r0, #2
 800fa26:	f005 f987 	bl	8014d38 <bkp_data_read>
 800fa2a:	f24a 53a5 	movw	r3, #42405	; 0xa5a5
 800fa2e:	1ac3      	subs	r3, r0, r3
 800fa30:	4258      	negs	r0, r3
 800fa32:	4158      	adcs	r0, r3
 800fa34:	f884 05ec 	strb.w	r0, [r4, #1516]	; 0x5ec
 800fa38:	bd10      	pop	{r4, pc}

0800fa3a <strcmp>:
 800fa3a:	1e43      	subs	r3, r0, #1
 800fa3c:	3901      	subs	r1, #1
 800fa3e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800fa42:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fa46:	4290      	cmp	r0, r2
 800fa48:	d102      	bne.n	800fa50 <strcmp+0x16>
 800fa4a:	2800      	cmp	r0, #0
 800fa4c:	d1f7      	bne.n	800fa3e <strcmp+0x4>
 800fa4e:	4770      	bx	lr
 800fa50:	1a80      	subs	r0, r0, r2
 800fa52:	4770      	bx	lr

0800fa54 <strcasecmp>:
 800fa54:	b530      	push	{r4, r5, lr}
 800fa56:	1e42      	subs	r2, r0, #1
 800fa58:	3901      	subs	r1, #1
 800fa5a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800fa5e:	4604      	mov	r4, r0
 800fa60:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fa64:	2b19      	cmp	r3, #25
 800fa66:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fa6a:	bf98      	it	ls
 800fa6c:	f100 0420 	addls.w	r4, r0, #32
 800fa70:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
 800fa74:	2d19      	cmp	r5, #25
 800fa76:	bf98      	it	ls
 800fa78:	3320      	addls	r3, #32
 800fa7a:	42a3      	cmp	r3, r4
 800fa7c:	d102      	bne.n	800fa84 <strcasecmp+0x30>
 800fa7e:	2800      	cmp	r0, #0
 800fa80:	d1eb      	bne.n	800fa5a <strcasecmp+0x6>
 800fa82:	bd30      	pop	{r4, r5, pc}
 800fa84:	1ae0      	subs	r0, r4, r3
 800fa86:	e7fc      	b.n	800fa82 <strcasecmp+0x2e>

0800fa88 <PropertiesConfig::EnableJSON(bool)>:
 800fa88:	4a04      	ldr	r2, [pc, #16]	; (800fa9c <PropertiesConfig::EnableJSON(bool)+0x14>)
 800fa8a:	7813      	ldrb	r3, [r2, #0]
 800fa8c:	b118      	cbz	r0, 800fa96 <PropertiesConfig::EnableJSON(bool)+0xe>
 800fa8e:	f043 0301 	orr.w	r3, r3, #1
 800fa92:	7013      	strb	r3, [r2, #0]
 800fa94:	4770      	bx	lr
 800fa96:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800fa9a:	e7fa      	b.n	800fa92 <PropertiesConfig::EnableJSON(bool)+0xa>
 800fa9c:	2000a8d0 	ldrdcs	sl, [r0], -r0

0800faa0 <HttpDaemon::HttpDaemon()>:
 800faa0:	4a0a      	ldr	r2, [pc, #40]	; (800facc <HttpDaemon::HttpDaemon()+0x2c>)
 800faa2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800faa6:	6002      	str	r2, [r0, #0]
 800faa8:	2200      	movs	r2, #0
 800faaa:	f44f 7c02 	mov.w	ip, #520	; 0x208
 800faae:	e9c0 1204 	strd	r1, r2, [r0, #16]
 800fab2:	2102      	movs	r1, #2
 800fab4:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800fab8:	e9c0 c106 	strd	ip, r1, [r0, #24]
 800fabc:	60c2      	str	r2, [r0, #12]
 800fabe:	8402      	strh	r2, [r0, #32]
 800fac0:	f8a0 25c2 	strh.w	r2, [r0, #1474]	; 0x5c2
 800fac4:	f8c0 25c4 	str.w	r2, [r0, #1476]	; 0x5c4
 800fac8:	4770      	bx	lr
 800faca:	bf00      	nop
 800facc:	0801783e 	stmdaeq	r1, {r1, r2, r3, r4, r5, fp, ip, sp, lr}

0800fad0 <HttpDaemon::Start()>:
 800fad0:	4b04      	ldr	r3, [pc, #16]	; (800fae4 <HttpDaemon::Start()+0x14>)
 800fad2:	b510      	push	{r4, lr}
 800fad4:	2150      	movs	r1, #80	; 0x50
 800fad6:	4604      	mov	r4, r0
 800fad8:	6818      	ldr	r0, [r3, #0]
 800fada:	f002 fc75 	bl	80123c8 <Network::TcpBegin(unsigned short)>
 800fade:	6120      	str	r0, [r4, #16]
 800fae0:	bd10      	pop	{r4, pc}
 800fae2:	bf00      	nop
 800fae4:	2000a29c 	mulcs	r0, ip, r2

0800fae8 <HttpDaemon::ParseMethod(char*)>:
 800fae8:	b538      	push	{r3, r4, r5, lr}
 800faea:	4604      	mov	r4, r0
 800faec:	4608      	mov	r0, r1
 800faee:	491b      	ldr	r1, [pc, #108]	; (800fb5c <HttpDaemon::ParseMethod(char*)+0x74>)
 800faf0:	f004 ff3c 	bl	801496c <strtok>
 800faf4:	4605      	mov	r5, r0
 800faf6:	b370      	cbz	r0, 800fb56 <HttpDaemon::ParseMethod(char*)+0x6e>
 800faf8:	4919      	ldr	r1, [pc, #100]	; (800fb60 <HttpDaemon::ParseMethod(char*)+0x78>)
 800fafa:	f7ff ff9e 	bl	800fa3a <strcmp>
 800fafe:	b940      	cbnz	r0, 800fb12 <HttpDaemon::ParseMethod(char*)+0x2a>
 800fb00:	61e0      	str	r0, [r4, #28]
 800fb02:	2000      	movs	r0, #0
 800fb04:	4915      	ldr	r1, [pc, #84]	; (800fb5c <HttpDaemon::ParseMethod(char*)+0x74>)
 800fb06:	f004 ff31 	bl	801496c <strtok>
 800fb0a:	b950      	cbnz	r0, 800fb22 <HttpDaemon::ParseMethod(char*)+0x3a>
 800fb0c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800fb10:	bd38      	pop	{r3, r4, r5, pc}
 800fb12:	4628      	mov	r0, r5
 800fb14:	4913      	ldr	r1, [pc, #76]	; (800fb64 <HttpDaemon::ParseMethod(char*)+0x7c>)
 800fb16:	f7ff ff90 	bl	800fa3a <strcmp>
 800fb1a:	b9e0      	cbnz	r0, 800fb56 <HttpDaemon::ParseMethod(char*)+0x6e>
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	61e3      	str	r3, [r4, #28]
 800fb20:	e7ef      	b.n	800fb02 <HttpDaemon::ParseMethod(char*)+0x1a>
 800fb22:	6060      	str	r0, [r4, #4]
 800fb24:	4910      	ldr	r1, [pc, #64]	; (800fb68 <HttpDaemon::ParseMethod(char*)+0x80>)
 800fb26:	2000      	movs	r0, #0
 800fb28:	f004 ff20 	bl	801496c <strtok>
 800fb2c:	2800      	cmp	r0, #0
 800fb2e:	d0ed      	beq.n	800fb0c <HttpDaemon::ParseMethod(char*)+0x24>
 800fb30:	490e      	ldr	r1, [pc, #56]	; (800fb6c <HttpDaemon::ParseMethod(char*)+0x84>)
 800fb32:	f7ff ff82 	bl	800fa3a <strcmp>
 800fb36:	2800      	cmp	r0, #0
 800fb38:	d1e8      	bne.n	800fb0c <HttpDaemon::ParseMethod(char*)+0x24>
 800fb3a:	490d      	ldr	r1, [pc, #52]	; (800fb70 <HttpDaemon::ParseMethod(char*)+0x88>)
 800fb3c:	f004 ff16 	bl	801496c <strtok>
 800fb40:	2800      	cmp	r0, #0
 800fb42:	d0e3      	beq.n	800fb0c <HttpDaemon::ParseMethod(char*)+0x24>
 800fb44:	490b      	ldr	r1, [pc, #44]	; (800fb74 <HttpDaemon::ParseMethod(char*)+0x8c>)
 800fb46:	f7ff ff78 	bl	800fa3a <strcmp>
 800fb4a:	2800      	cmp	r0, #0
 800fb4c:	f240 10f9 	movw	r0, #505	; 0x1f9
 800fb50:	bf08      	it	eq
 800fb52:	20c8      	moveq	r0, #200	; 0xc8
 800fb54:	e7dc      	b.n	800fb10 <HttpDaemon::ParseMethod(char*)+0x28>
 800fb56:	f240 10f5 	movw	r0, #501	; 0x1f5
 800fb5a:	e7d9      	b.n	800fb10 <HttpDaemon::ParseMethod(char*)+0x28>
 800fb5c:	080187d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r8, r9, sl, pc}
 800fb60:	080175e4 	stmdaeq	r1, {r2, r5, r6, r7, r8, sl, ip, sp, lr}
 800fb64:	080175e8 	stmdaeq	r1, {r3, r5, r6, r7, r8, sl, ip, sp, lr}
 800fb68:	08017652 	stmdaeq	r1, {r1, r4, r6, r9, sl, ip, sp, lr}
 800fb6c:	080175ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r8, sl, ip, sp, lr}
 800fb70:	080175f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, r8, sl, ip, sp, lr}
 800fb74:	080175f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, sl, ip, sp, lr}

0800fb78 <HttpDaemon::ParseHeaderField(char*)>:
 800fb78:	b538      	push	{r3, r4, r5, lr}
 800fb7a:	4605      	mov	r5, r0
 800fb7c:	4608      	mov	r0, r1
 800fb7e:	491d      	ldr	r1, [pc, #116]	; (800fbf4 <HttpDaemon::ParseHeaderField(char*)+0x7c>)
 800fb80:	f004 fef4 	bl	801496c <strtok>
 800fb84:	4604      	mov	r4, r0
 800fb86:	b910      	cbnz	r0, 800fb8e <HttpDaemon::ParseHeaderField(char*)+0x16>
 800fb88:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800fb8c:	bd38      	pop	{r3, r4, r5, pc}
 800fb8e:	491a      	ldr	r1, [pc, #104]	; (800fbf8 <HttpDaemon::ParseHeaderField(char*)+0x80>)
 800fb90:	f7ff ff60 	bl	800fa54 <strcasecmp>
 800fb94:	b970      	cbnz	r0, 800fbb4 <HttpDaemon::ParseHeaderField(char*)+0x3c>
 800fb96:	4919      	ldr	r1, [pc, #100]	; (800fbfc <HttpDaemon::ParseHeaderField(char*)+0x84>)
 800fb98:	f004 fee8 	bl	801496c <strtok>
 800fb9c:	2800      	cmp	r0, #0
 800fb9e:	d0f3      	beq.n	800fb88 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800fba0:	4917      	ldr	r1, [pc, #92]	; (800fc00 <HttpDaemon::ParseHeaderField(char*)+0x88>)
 800fba2:	f7ff ff4a 	bl	800fa3a <strcmp>
 800fba6:	b108      	cbz	r0, 800fbac <HttpDaemon::ParseHeaderField(char*)+0x34>
 800fba8:	20c8      	movs	r0, #200	; 0xc8
 800fbaa:	e7ef      	b.n	800fb8c <HttpDaemon::ParseHeaderField(char*)+0x14>
 800fbac:	2301      	movs	r3, #1
 800fbae:	f885 3020 	strb.w	r3, [r5, #32]
 800fbb2:	e7f9      	b.n	800fba8 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800fbb4:	4620      	mov	r0, r4
 800fbb6:	4913      	ldr	r1, [pc, #76]	; (800fc04 <HttpDaemon::ParseHeaderField(char*)+0x8c>)
 800fbb8:	f7ff ff4c 	bl	800fa54 <strcasecmp>
 800fbbc:	4604      	mov	r4, r0
 800fbbe:	2800      	cmp	r0, #0
 800fbc0:	d1f2      	bne.n	800fba8 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800fbc2:	4911      	ldr	r1, [pc, #68]	; (800fc08 <HttpDaemon::ParseHeaderField(char*)+0x90>)
 800fbc4:	f004 fed2 	bl	801496c <strtok>
 800fbc8:	2800      	cmp	r0, #0
 800fbca:	d0dd      	beq.n	800fb88 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800fbcc:	1e42      	subs	r2, r0, #1
 800fbce:	4623      	mov	r3, r4
 800fbd0:	200a      	movs	r0, #10
 800fbd2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800fbd6:	b151      	cbz	r1, 800fbee <HttpDaemon::ParseHeaderField(char*)+0x76>
 800fbd8:	3930      	subs	r1, #48	; 0x30
 800fbda:	2909      	cmp	r1, #9
 800fbdc:	d8d4      	bhi.n	800fb88 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800fbde:	fb00 1303 	mla	r3, r0, r3, r1
 800fbe2:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 800fbe6:	d9f4      	bls.n	800fbd2 <HttpDaemon::ParseHeaderField(char*)+0x5a>
 800fbe8:	f240 109d 	movw	r0, #413	; 0x19d
 800fbec:	e7ce      	b.n	800fb8c <HttpDaemon::ParseHeaderField(char*)+0x14>
 800fbee:	f8a5 35c6 	strh.w	r3, [r5, #1478]	; 0x5c6
 800fbf2:	e7d9      	b.n	800fba8 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800fbf4:	080175f9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r8, sl, ip, sp, lr}
 800fbf8:	080175fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, sl, ip, sp, lr}
 800fbfc:	08017608 	stmdaeq	r1, {r3, r9, sl, ip, sp, lr}
 800fc00:	0801760b 	stmdaeq	r1, {r0, r1, r3, r9, sl, ip, sp, lr}
 800fc04:	0801761c 	stmdaeq	r1, {r2, r3, r4, r9, sl, ip, sp, lr}
 800fc08:	080187d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r8, r9, sl, pc}

0800fc0c <HttpDaemon::ParseRequest()>:
 800fc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc0e:	2400      	movs	r4, #0
 800fc10:	4605      	mov	r5, r0
 800fc12:	4622      	mov	r2, r4
 800fc14:	4626      	mov	r6, r4
 800fc16:	68c1      	ldr	r1, [r0, #12]
 800fc18:	f880 4020 	strb.w	r4, [r0, #32]
 800fc1c:	f8c0 45c4 	str.w	r4, [r0, #1476]	; 0x5c4
 800fc20:	8aab      	ldrh	r3, [r5, #20]
 800fc22:	42a3      	cmp	r3, r4
 800fc24:	d923      	bls.n	800fc6e <HttpDaemon::ParseRequest()+0x62>
 800fc26:	68eb      	ldr	r3, [r5, #12]
 800fc28:	5d18      	ldrb	r0, [r3, r4]
 800fc2a:	280a      	cmp	r0, #10
 800fc2c:	d10e      	bne.n	800fc4c <HttpDaemon::ParseRequest()+0x40>
 800fc2e:	4423      	add	r3, r4
 800fc30:	f803 6c01 	strb.w	r6, [r3, #-1]
 800fc34:	1c57      	adds	r7, r2, #1
 800fc36:	b962      	cbnz	r2, 800fc52 <HttpDaemon::ParseRequest()+0x46>
 800fc38:	4628      	mov	r0, r5
 800fc3a:	f7ff ff55 	bl	800fae8 <HttpDaemon::ParseMethod(char*)>
 800fc3e:	28c8      	cmp	r0, #200	; 0xc8
 800fc40:	d116      	bne.n	800fc70 <HttpDaemon::ParseRequest()+0x64>
 800fc42:	463a      	mov	r2, r7
 800fc44:	68e9      	ldr	r1, [r5, #12]
 800fc46:	3401      	adds	r4, #1
 800fc48:	b2a4      	uxth	r4, r4
 800fc4a:	4421      	add	r1, r4
 800fc4c:	3401      	adds	r4, #1
 800fc4e:	b2a4      	uxth	r4, r4
 800fc50:	e7e6      	b.n	800fc20 <HttpDaemon::ParseRequest()+0x14>
 800fc52:	7808      	ldrb	r0, [r1, #0]
 800fc54:	b968      	cbnz	r0, 800fc72 <HttpDaemon::ParseRequest()+0x66>
 800fc56:	696b      	ldr	r3, [r5, #20]
 800fc58:	3b01      	subs	r3, #1
 800fc5a:	1b1b      	subs	r3, r3, r4
 800fc5c:	b29b      	uxth	r3, r3
 800fc5e:	f8a5 35c4 	strh.w	r3, [r5, #1476]	; 0x5c4
 800fc62:	b123      	cbz	r3, 800fc6e <HttpDaemon::ParseRequest()+0x62>
 800fc64:	68ea      	ldr	r2, [r5, #12]
 800fc66:	3401      	adds	r4, #1
 800fc68:	4414      	add	r4, r2
 800fc6a:	60ac      	str	r4, [r5, #8]
 800fc6c:	54e0      	strb	r0, [r4, r3]
 800fc6e:	20c8      	movs	r0, #200	; 0xc8
 800fc70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc72:	4628      	mov	r0, r5
 800fc74:	f7ff ff80 	bl	800fb78 <HttpDaemon::ParseHeaderField(char*)>
 800fc78:	e7e1      	b.n	800fc3e <HttpDaemon::ParseRequest()+0x32>
	...

0800fc7c <HttpDaemon::HandleGetTxt()>:
 800fc7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc80:	6847      	ldr	r7, [r0, #4]
 800fc82:	4604      	mov	r4, r0
 800fc84:	1dbd      	adds	r5, r7, #6
 800fc86:	462b      	mov	r3, r5
 800fc88:	4618      	mov	r0, r3
 800fc8a:	7802      	ldrb	r2, [r0, #0]
 800fc8c:	3301      	adds	r3, #1
 800fc8e:	2a00      	cmp	r2, #0
 800fc90:	d1fa      	bne.n	800fc88 <HttpDaemon::HandleGetTxt()+0xc>
 800fc92:	1b40      	subs	r0, r0, r5
 800fc94:	2804      	cmp	r0, #4
 800fc96:	d925      	bls.n	800fce4 <HttpDaemon::HandleGetTxt()+0x68>
 800fc98:	3804      	subs	r0, #4
 800fc9a:	4915      	ldr	r1, [pc, #84]	; (800fcf0 <HttpDaemon::HandleGetTxt()+0x74>)
 800fc9c:	4428      	add	r0, r5
 800fc9e:	f7ff fecc 	bl	800fa3a <strcmp>
 800fca2:	b9f8      	cbnz	r0, 800fce4 <HttpDaemon::HandleGetTxt()+0x68>
 800fca4:	4b13      	ldr	r3, [pc, #76]	; (800fcf4 <HttpDaemon::HandleGetTxt()+0x78>)
 800fca6:	2001      	movs	r0, #1
 800fca8:	f893 8000 	ldrb.w	r8, [r3]
 800fcac:	f7ff feec 	bl	800fa88 <PropertiesConfig::EnableJSON(bool)>
 800fcb0:	4b11      	ldr	r3, [pc, #68]	; (800fcf8 <HttpDaemon::HandleGetTxt()+0x7c>)
 800fcb2:	f240 529b 	movw	r2, #1435	; 0x59b
 800fcb6:	4629      	mov	r1, r5
 800fcb8:	6818      	ldr	r0, [r3, #0]
 800fcba:	f7ff fa69 	bl	800f190 <RemoteConfig::HandleGet(void*, unsigned int)>
 800fcbe:	4606      	mov	r6, r0
 800fcc0:	f008 0801 	and.w	r8, r8, #1
 800fcc4:	4640      	mov	r0, r8
 800fcc6:	f7ff fedf 	bl	800fa88 <PropertiesConfig::EnableJSON(bool)>
 800fcca:	b15e      	cbz	r6, 800fce4 <HttpDaemon::HandleGetTxt()+0x68>
 800fccc:	f8a4 65c2 	strh.w	r6, [r4, #1474]	; 0x5c2
 800fcd0:	3606      	adds	r6, #6
 800fcd2:	3422      	adds	r4, #34	; 0x22
 800fcd4:	443e      	add	r6, r7
 800fcd6:	42b5      	cmp	r5, r6
 800fcd8:	d008      	beq.n	800fcec <HttpDaemon::HandleGetTxt()+0x70>
 800fcda:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fcde:	f804 3b01 	strb.w	r3, [r4], #1
 800fce2:	e7f8      	b.n	800fcd6 <HttpDaemon::HandleGetTxt()+0x5a>
 800fce4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800fce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcec:	20c8      	movs	r0, #200	; 0xc8
 800fcee:	e7fb      	b.n	800fce8 <HttpDaemon::HandleGetTxt()+0x6c>
 800fcf0:	08017524 	stmdaeq	r1, {r2, r5, r8, sl, ip, sp, lr}
 800fcf4:	2000a8d0 	ldrdcs	sl, [r0], -r0
 800fcf8:	20001984 	andcs	r1, r0, r4, lsl #19

0800fcfc <HttpDaemon::HandleGet()>:
 800fcfc:	b570      	push	{r4, r5, r6, lr}
 800fcfe:	6845      	ldr	r5, [r0, #4]
 800fd00:	4604      	mov	r4, r0
 800fd02:	4943      	ldr	r1, [pc, #268]	; (800fe10 <HttpDaemon::HandleGet()+0x114>)
 800fd04:	4628      	mov	r0, r5
 800fd06:	f7ff fe98 	bl	800fa3a <strcmp>
 800fd0a:	b120      	cbz	r0, 800fd16 <HttpDaemon::HandleGet()+0x1a>
 800fd0c:	4628      	mov	r0, r5
 800fd0e:	4941      	ldr	r1, [pc, #260]	; (800fe14 <HttpDaemon::HandleGet()+0x118>)
 800fd10:	f7ff fe93 	bl	800fa3a <strcmp>
 800fd14:	b960      	cbnz	r0, 800fd30 <HttpDaemon::HandleGet()+0x34>
 800fd16:	4621      	mov	r1, r4
 800fd18:	4b3f      	ldr	r3, [pc, #252]	; (800fe18 <HttpDaemon::HandleGet()+0x11c>)
 800fd1a:	4840      	ldr	r0, [pc, #256]	; (800fe1c <HttpDaemon::HandleGet()+0x120>)
 800fd1c:	f841 3b22 	str.w	r3, [r1], #34
 800fd20:	f000 fa7a 	bl	8010218 <get_file_content(char const*, char*)>
 800fd24:	2800      	cmp	r0, #0
 800fd26:	dd1e      	ble.n	800fd66 <HttpDaemon::HandleGet()+0x6a>
 800fd28:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 800fd2c:	20c8      	movs	r0, #200	; 0xc8
 800fd2e:	bd70      	pop	{r4, r5, r6, pc}
 800fd30:	4628      	mov	r0, r5
 800fd32:	493b      	ldr	r1, [pc, #236]	; (800fe20 <HttpDaemon::HandleGet()+0x124>)
 800fd34:	f7ff fe81 	bl	800fa3a <strcmp>
 800fd38:	b928      	cbnz	r0, 800fd46 <HttpDaemon::HandleGet()+0x4a>
 800fd3a:	4621      	mov	r1, r4
 800fd3c:	4b39      	ldr	r3, [pc, #228]	; (800fe24 <HttpDaemon::HandleGet()+0x128>)
 800fd3e:	483a      	ldr	r0, [pc, #232]	; (800fe28 <HttpDaemon::HandleGet()+0x12c>)
 800fd40:	f841 3b22 	str.w	r3, [r1], #34
 800fd44:	e7ec      	b.n	800fd20 <HttpDaemon::HandleGet()+0x24>
 800fd46:	4628      	mov	r0, r5
 800fd48:	4938      	ldr	r1, [pc, #224]	; (800fe2c <HttpDaemon::HandleGet()+0x130>)
 800fd4a:	f7ff fe76 	bl	800fa3a <strcmp>
 800fd4e:	b168      	cbz	r0, 800fd6c <HttpDaemon::HandleGet()+0x70>
 800fd50:	4a37      	ldr	r2, [pc, #220]	; (800fe30 <HttpDaemon::HandleGet()+0x134>)
 800fd52:	1e6b      	subs	r3, r5, #1
 800fd54:	1d6e      	adds	r6, r5, #5
 800fd56:	42b3      	cmp	r3, r6
 800fd58:	d00e      	beq.n	800fd78 <HttpDaemon::HandleGet()+0x7c>
 800fd5a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800fd5e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800fd62:	4288      	cmp	r0, r1
 800fd64:	d0f7      	beq.n	800fd56 <HttpDaemon::HandleGet()+0x5a>
 800fd66:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800fd6a:	e7e0      	b.n	800fd2e <HttpDaemon::HandleGet()+0x32>
 800fd6c:	4621      	mov	r1, r4
 800fd6e:	4b31      	ldr	r3, [pc, #196]	; (800fe34 <HttpDaemon::HandleGet()+0x138>)
 800fd70:	4831      	ldr	r0, [pc, #196]	; (800fe38 <HttpDaemon::HandleGet()+0x13c>)
 800fd72:	f841 3b22 	str.w	r3, [r1], #34
 800fd76:	e7d3      	b.n	800fd20 <HttpDaemon::HandleGet()+0x24>
 800fd78:	4b30      	ldr	r3, [pc, #192]	; (800fe3c <HttpDaemon::HandleGet()+0x140>)
 800fd7a:	3506      	adds	r5, #6
 800fd7c:	4628      	mov	r0, r5
 800fd7e:	4930      	ldr	r1, [pc, #192]	; (800fe40 <HttpDaemon::HandleGet()+0x144>)
 800fd80:	6023      	str	r3, [r4, #0]
 800fd82:	f7ff fe5a 	bl	800fa3a <strcmp>
 800fd86:	b930      	cbnz	r0, 800fd96 <HttpDaemon::HandleGet()+0x9a>
 800fd88:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800fd8c:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800fd90:	f000 f9ca 	bl	8010128 <remoteconfig::json_get_list(char*, unsigned short)>
 800fd94:	e7c6      	b.n	800fd24 <HttpDaemon::HandleGet()+0x28>
 800fd96:	4628      	mov	r0, r5
 800fd98:	492a      	ldr	r1, [pc, #168]	; (800fe44 <HttpDaemon::HandleGet()+0x148>)
 800fd9a:	f7ff fe4e 	bl	800fa3a <strcmp>
 800fd9e:	b930      	cbnz	r0, 800fdae <HttpDaemon::HandleGet()+0xb2>
 800fda0:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800fda4:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800fda8:	f000 f9f2 	bl	8010190 <remoteconfig::json_get_version(char*, unsigned short)>
 800fdac:	e7ba      	b.n	800fd24 <HttpDaemon::HandleGet()+0x28>
 800fdae:	4628      	mov	r0, r5
 800fdb0:	4925      	ldr	r1, [pc, #148]	; (800fe48 <HttpDaemon::HandleGet()+0x14c>)
 800fdb2:	f7ff fe42 	bl	800fa3a <strcmp>
 800fdb6:	b958      	cbnz	r0, 800fdd0 <HttpDaemon::HandleGet()+0xd4>
 800fdb8:	4b24      	ldr	r3, [pc, #144]	; (800fe4c <HttpDaemon::HandleGet()+0x150>)
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	f893 35d7 	ldrb.w	r3, [r3, #1495]	; 0x5d7
 800fdc0:	b31b      	cbz	r3, 800fe0a <HttpDaemon::HandleGet()+0x10e>
 800fdc2:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800fdc6:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800fdca:	f000 f9fd 	bl	80101c8 <remoteconfig::json_get_uptime(char*, unsigned short)>
 800fdce:	e7a9      	b.n	800fd24 <HttpDaemon::HandleGet()+0x28>
 800fdd0:	4628      	mov	r0, r5
 800fdd2:	491f      	ldr	r1, [pc, #124]	; (800fe50 <HttpDaemon::HandleGet()+0x154>)
 800fdd4:	f7ff fe31 	bl	800fa3a <strcmp>
 800fdd8:	b930      	cbnz	r0, 800fde8 <HttpDaemon::HandleGet()+0xec>
 800fdda:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800fdde:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800fde2:	f000 fa01 	bl	80101e8 <remoteconfig::json_get_display(char*, unsigned short)>
 800fde6:	e79d      	b.n	800fd24 <HttpDaemon::HandleGet()+0x28>
 800fde8:	4628      	mov	r0, r5
 800fdea:	491a      	ldr	r1, [pc, #104]	; (800fe54 <HttpDaemon::HandleGet()+0x158>)
 800fdec:	f7ff fe25 	bl	800fa3a <strcmp>
 800fdf0:	b930      	cbnz	r0, 800fe00 <HttpDaemon::HandleGet()+0x104>
 800fdf2:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800fdf6:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800fdfa:	f000 fa05 	bl	8010208 <remoteconfig::json_get_directory(char*, unsigned short)>
 800fdfe:	e791      	b.n	800fd24 <HttpDaemon::HandleGet()+0x28>
 800fe00:	4620      	mov	r0, r4
 800fe02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fe06:	f7ff bf39 	b.w	800fc7c <HttpDaemon::HandleGetTxt()>
 800fe0a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800fe0e:	e78e      	b.n	800fd2e <HttpDaemon::HandleGet()+0x32>
 800fe10:	08017652 	stmdaeq	r1, {r1, r4, r6, r9, sl, ip, sp, lr}
 800fe14:	0801762b 	stmdaeq	r1, {r0, r1, r3, r5, r9, sl, ip, sp, lr}
 800fe18:	0801783e 	stmdaeq	r1, {r1, r2, r3, r4, r5, fp, ip, sp, lr}
 800fe1c:	0801762c 	stmdaeq	r1, {r2, r3, r5, r9, sl, ip, sp, lr}
 800fe20:	08017637 	stmdaeq	r1, {r0, r1, r2, r4, r5, r9, sl, ip, sp, lr}
 800fe24:	0801785e 	stmdaeq	r1, {r1, r2, r3, r4, r6, fp, ip, sp, lr}
 800fe28:	08017638 	stmdaeq	r1, {r3, r4, r5, r9, sl, ip, sp, lr}
 800fe2c:	08017643 	stmdaeq	r1, {r0, r1, r6, r9, sl, ip, sp, lr}
 800fe30:	0801764d 	stmdaeq	r1, {r0, r2, r3, r6, r9, sl, ip, sp, lr}
 800fe34:	0801787e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, fp, ip, sp, lr}
 800fe38:	08017644 	stmdaeq	r1, {r2, r6, r9, sl, ip, sp, lr}
 800fe3c:	0801789e 	stmdaeq	r1, {r1, r2, r3, r4, r7, fp, ip, sp, lr}
 800fe40:	08017654 	stmdaeq	r1, {r2, r4, r6, r9, sl, ip, sp, lr}
 800fe44:	08017659 	stmdaeq	r1, {r0, r3, r4, r6, r9, sl, ip, sp, lr}
 800fe48:	08017661 	stmdaeq	r1, {r0, r5, r6, r9, sl, ip, sp, lr}
 800fe4c:	20001984 	andcs	r1, r0, r4, lsl #19
 800fe50:	08017668 	stmdaeq	r1, {r3, r5, r6, r9, sl, ip, sp, lr}
 800fe54:	08017670 	stmdaeq	r1, {r4, r5, r6, r9, sl, ip, sp, lr}

0800fe58 <HttpDaemon::HandlePost(bool)>:
 800fe58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fe5a:	4604      	mov	r4, r0
 800fe5c:	2900      	cmp	r1, #0
 800fe5e:	f040 8091 	bne.w	800ff84 <HttpDaemon::HandlePost(bool)+0x12c>
 800fe62:	f890 3020 	ldrb.w	r3, [r0, #32]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d05d      	beq.n	800ff26 <HttpDaemon::HandlePost(bool)+0xce>
 800fe6a:	6845      	ldr	r5, [r0, #4]
 800fe6c:	4948      	ldr	r1, [pc, #288]	; (800ff90 <HttpDaemon::HandlePost(bool)+0x138>)
 800fe6e:	4628      	mov	r0, r5
 800fe70:	f7ff fde3 	bl	800fa3a <strcmp>
 800fe74:	2800      	cmp	r0, #0
 800fe76:	bf0c      	ite	eq
 800fe78:	2301      	moveq	r3, #1
 800fe7a:	2300      	movne	r3, #0
 800fe7c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 800fe80:	d055      	beq.n	800ff2e <HttpDaemon::HandlePost(bool)+0xd6>
 800fe82:	4628      	mov	r0, r5
 800fe84:	4943      	ldr	r1, [pc, #268]	; (800ff94 <HttpDaemon::HandlePost(bool)+0x13c>)
 800fe86:	f7ff fdd8 	bl	800fa3a <strcmp>
 800fe8a:	2800      	cmp	r0, #0
 800fe8c:	d04f      	beq.n	800ff2e <HttpDaemon::HandlePost(bool)+0xd6>
 800fe8e:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800fe92:	e04a      	b.n	800ff2a <HttpDaemon::HandlePost(bool)+0xd2>
 800fe94:	4940      	ldr	r1, [pc, #256]	; (800ff98 <HttpDaemon::HandlePost(bool)+0x140>)
 800fe96:	68a0      	ldr	r0, [r4, #8]
 800fe98:	f10d 0207 	add.w	r2, sp, #7
 800fe9c:	f003 ffe4 	bl	8013e68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800fea0:	b9e8      	cbnz	r0, 800fede <HttpDaemon::HandlePost(bool)+0x86>
 800fea2:	f89d 6007 	ldrb.w	r6, [sp, #7]
 800fea6:	4b3d      	ldr	r3, [pc, #244]	; (800ff9c <HttpDaemon::HandlePost(bool)+0x144>)
 800fea8:	fab6 f186 	clz	r1, r6
 800feac:	681d      	ldr	r5, [r3, #0]
 800feae:	0949      	lsrs	r1, r1, #5
 800feb0:	69a8      	ldr	r0, [r5, #24]
 800feb2:	b138      	cbz	r0, 800fec4 <HttpDaemon::HandlePost(bool)+0x6c>
 800feb4:	6803      	ldr	r3, [r0, #0]
 800feb6:	7429      	strb	r1, [r5, #16]
 800feb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800feba:	4798      	blx	r3
 800febc:	b116      	cbz	r6, 800fec4 <HttpDaemon::HandlePost(bool)+0x6c>
 800febe:	4b38      	ldr	r3, [pc, #224]	; (800ffa0 <HttpDaemon::HandlePost(bool)+0x148>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	606b      	str	r3, [r5, #4]
 800fec4:	4620      	mov	r0, r4
 800fec6:	4b37      	ldr	r3, [pc, #220]	; (800ffa4 <HttpDaemon::HandlePost(bool)+0x14c>)
 800fec8:	f240 519f 	movw	r1, #1439	; 0x59f
 800fecc:	4a36      	ldr	r2, [pc, #216]	; (800ffa8 <HttpDaemon::HandlePost(bool)+0x150>)
 800fece:	f840 3b22 	str.w	r3, [r0], #34
 800fed2:	f7f9 fbf3 	bl	80096bc <snprintf>
 800fed6:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 800feda:	20c8      	movs	r0, #200	; 0xc8
 800fedc:	e025      	b.n	800ff2a <HttpDaemon::HandlePost(bool)+0xd2>
 800fede:	4933      	ldr	r1, [pc, #204]	; (800ffac <HttpDaemon::HandlePost(bool)+0x154>)
 800fee0:	68a0      	ldr	r0, [r4, #8]
 800fee2:	f10d 0207 	add.w	r2, sp, #7
 800fee6:	f003 ffbf 	bl	8013e68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800feea:	b9e0      	cbnz	r0, 800ff26 <HttpDaemon::HandlePost(bool)+0xce>
 800feec:	4b30      	ldr	r3, [pc, #192]	; (800ffb0 <HttpDaemon::HandlePost(bool)+0x158>)
 800feee:	6818      	ldr	r0, [r3, #0]
 800fef0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fef4:	b11b      	cbz	r3, 800fefe <HttpDaemon::HandlePost(bool)+0xa6>
 800fef6:	2104      	movs	r1, #4
 800fef8:	f004 fb4c 	bl	8014594 <LedBlink::SetMode(ledblink::Mode)>
 800fefc:	e7e2      	b.n	800fec4 <HttpDaemon::HandlePost(bool)+0x6c>
 800fefe:	2102      	movs	r1, #2
 800ff00:	e7fa      	b.n	800fef8 <HttpDaemon::HandlePost(bool)+0xa0>
 800ff02:	4b2c      	ldr	r3, [pc, #176]	; (800ffb4 <HttpDaemon::HandlePost(bool)+0x15c>)
 800ff04:	2001      	movs	r0, #1
 800ff06:	781d      	ldrb	r5, [r3, #0]
 800ff08:	f7ff fdbe 	bl	800fa88 <PropertiesConfig::EnableJSON(bool)>
 800ff0c:	4b2a      	ldr	r3, [pc, #168]	; (800ffb8 <HttpDaemon::HandlePost(bool)+0x160>)
 800ff0e:	f8b4 25c4 	ldrh.w	r2, [r4, #1476]	; 0x5c4
 800ff12:	6818      	ldr	r0, [r3, #0]
 800ff14:	68a1      	ldr	r1, [r4, #8]
 800ff16:	f005 0501 	and.w	r5, r5, #1
 800ff1a:	f7ff fa09 	bl	800f330 <RemoteConfig::HandleSet(void*, unsigned int)>
 800ff1e:	4628      	mov	r0, r5
 800ff20:	f7ff fdb2 	bl	800fa88 <PropertiesConfig::EnableJSON(bool)>
 800ff24:	e7ce      	b.n	800fec4 <HttpDaemon::HandlePost(bool)+0x6c>
 800ff26:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800ff2a:	b002      	add	sp, #8
 800ff2c:	bd70      	pop	{r4, r5, r6, pc}
 800ff2e:	f8b4 35c6 	ldrh.w	r3, [r4, #1478]	; 0x5c6
 800ff32:	6962      	ldr	r2, [r4, #20]
 800ff34:	429a      	cmp	r2, r3
 800ff36:	dbd0      	blt.n	800feda <HttpDaemon::HandlePost(bool)+0x82>
 800ff38:	f8b4 35c4 	ldrh.w	r3, [r4, #1476]	; 0x5c4
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d0cc      	beq.n	800feda <HttpDaemon::HandlePost(bool)+0x82>
 800ff40:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d0dc      	beq.n	800ff02 <HttpDaemon::HandlePost(bool)+0xaa>
 800ff48:	2201      	movs	r2, #1
 800ff4a:	f8b4 15c4 	ldrh.w	r1, [r4, #1476]	; 0x5c4
 800ff4e:	68a0      	ldr	r0, [r4, #8]
 800ff50:	f003 fca6 	bl	80138a0 <properties::convert_json_file(char*, unsigned short, bool)>
 800ff54:	2800      	cmp	r0, #0
 800ff56:	dde6      	ble.n	800ff26 <HttpDaemon::HandlePost(bool)+0xce>
 800ff58:	4918      	ldr	r1, [pc, #96]	; (800ffbc <HttpDaemon::HandlePost(bool)+0x164>)
 800ff5a:	68a0      	ldr	r0, [r4, #8]
 800ff5c:	f10d 0207 	add.w	r2, sp, #7
 800ff60:	f003 ff82 	bl	8013e68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ff64:	2800      	cmp	r0, #0
 800ff66:	d195      	bne.n	800fe94 <HttpDaemon::HandlePost(bool)+0x3c>
 800ff68:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d0a9      	beq.n	800fec4 <HttpDaemon::HandlePost(bool)+0x6c>
 800ff70:	4b11      	ldr	r3, [pc, #68]	; (800ffb8 <HttpDaemon::HandlePost(bool)+0x160>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	f893 35d6 	ldrb.w	r3, [r3, #1494]	; 0x5d6
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d0d4      	beq.n	800ff26 <HttpDaemon::HandlePost(bool)+0xce>
 800ff7c:	4b10      	ldr	r3, [pc, #64]	; (800ffc0 <HttpDaemon::HandlePost(bool)+0x168>)
 800ff7e:	6818      	ldr	r0, [r3, #0]
 800ff80:	f004 fbae 	bl	80146e0 <Hardware::Reboot()>
 800ff84:	68c3      	ldr	r3, [r0, #12]
 800ff86:	6083      	str	r3, [r0, #8]
 800ff88:	6943      	ldr	r3, [r0, #20]
 800ff8a:	f8a0 35c4 	strh.w	r3, [r0, #1476]	; 0x5c4
 800ff8e:	e7d7      	b.n	800ff40 <HttpDaemon::HandlePost(bool)+0xe8>
 800ff90:	0801767a 	stmdaeq	r1, {r1, r3, r4, r5, r6, r9, sl, ip, sp, lr}
 800ff94:	08017616 	stmdaeq	r1, {r1, r2, r4, r9, sl, ip, sp, lr}
 800ff98:	08017668 	stmdaeq	r1, {r3, r5, r6, r9, sl, ip, sp, lr}
 800ff9c:	2000a8d4 	ldrdcs	sl, [r0], -r4
 800ffa0:	2000a9dc 	ldrdcs	sl, [r0], -ip
 800ffa4:	0801783e 	stmdaeq	r1, {r1, r2, r3, r4, r5, fp, ip, sp, lr}
 800ffa8:	08017697 	stmdaeq	r1, {r0, r1, r2, r4, r7, r9, sl, ip, sp, lr}
 800ffac:	0801768e 	stmdaeq	r1, {r1, r2, r3, r7, r9, sl, ip, sp, lr}
 800ffb0:	2000a9c0 	andcs	sl, r0, r0, asr #19
 800ffb4:	2000a8d0 	ldrdcs	sl, [r0], -r0
 800ffb8:	20001984 	andcs	r1, r0, r4, lsl #19
 800ffbc:	08017687 	stmdaeq	r1, {r0, r1, r2, r7, r9, sl, ip, sp, lr}
 800ffc0:	2000a9c4 	andcs	sl, r0, r4, asr #19

0800ffc4 <HttpDaemon::Run()>:
 800ffc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffc6:	4e4a      	ldr	r6, [pc, #296]	; (80100f0 <HttpDaemon::Run()+0x12c>)
 800ffc8:	4604      	mov	r4, r0
 800ffca:	6901      	ldr	r1, [r0, #16]
 800ffcc:	f100 020c 	add.w	r2, r0, #12
 800ffd0:	b085      	sub	sp, #20
 800ffd2:	6830      	ldr	r0, [r6, #0]
 800ffd4:	f002 f9fb 	bl	80123ce <Network::TcpRead(int, unsigned char const**)>
 800ffd8:	6160      	str	r0, [r4, #20]
 800ffda:	2800      	cmp	r0, #0
 800ffdc:	d061      	beq.n	80100a2 <HttpDaemon::Run()+0xde>
 800ffde:	69a3      	ldr	r3, [r4, #24]
 800ffe0:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800ffe4:	d15f      	bne.n	80100a6 <HttpDaemon::Run()+0xe2>
 800ffe6:	4620      	mov	r0, r4
 800ffe8:	f7ff fe10 	bl	800fc0c <HttpDaemon::ParseRequest()>
 800ffec:	28c8      	cmp	r0, #200	; 0xc8
 800ffee:	61a0      	str	r0, [r4, #24]
 800fff0:	d106      	bne.n	8010000 <HttpDaemon::Run()+0x3c>
 800fff2:	69e3      	ldr	r3, [r4, #28]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d147      	bne.n	8010088 <HttpDaemon::Run()+0xc4>
 800fff8:	4620      	mov	r0, r4
 800fffa:	f7ff fe7f 	bl	800fcfc <HttpDaemon::HandleGet()>
 800fffe:	61a0      	str	r0, [r4, #24]
 8010000:	69a3      	ldr	r3, [r4, #24]
 8010002:	f104 0722 	add.w	r7, r4, #34	; 0x22
 8010006:	2bc8      	cmp	r3, #200	; 0xc8
 8010008:	d06f      	beq.n	80100ea <HttpDaemon::Run()+0x126>
 801000a:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 801000e:	d062      	beq.n	80100d6 <HttpDaemon::Run()+0x112>
 8010010:	dc52      	bgt.n	80100b8 <HttpDaemon::Run()+0xf4>
 8010012:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 8010016:	d060      	beq.n	80100da <HttpDaemon::Run()+0x116>
 8010018:	f240 129d 	movw	r2, #413	; 0x19d
 801001c:	4293      	cmp	r3, r2
 801001e:	d05e      	beq.n	80100de <HttpDaemon::Run()+0x11a>
 8010020:	4d34      	ldr	r5, [pc, #208]	; (80100f4 <HttpDaemon::Run()+0x130>)
 8010022:	4a35      	ldr	r2, [pc, #212]	; (80100f8 <HttpDaemon::Run()+0x134>)
 8010024:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8010028:	bf18      	it	ne
 801002a:	4615      	movne	r5, r2
 801002c:	4a33      	ldr	r2, [pc, #204]	; (80100fc <HttpDaemon::Run()+0x138>)
 801002e:	f240 519f 	movw	r1, #1439	; 0x59f
 8010032:	6022      	str	r2, [r4, #0]
 8010034:	4638      	mov	r0, r7
 8010036:	e9cd 5500 	strd	r5, r5, [sp]
 801003a:	4a31      	ldr	r2, [pc, #196]	; (8010100 <HttpDaemon::Run()+0x13c>)
 801003c:	f7f9 fb3e 	bl	80096bc <snprintf>
 8010040:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 8010044:	f8b4 35c2 	ldrh.w	r3, [r4, #1474]	; 0x5c2
 8010048:	f240 519f 	movw	r1, #1439	; 0x59f
 801004c:	9303      	str	r3, [sp, #12]
 801004e:	6823      	ldr	r3, [r4, #0]
 8010050:	4a2c      	ldr	r2, [pc, #176]	; (8010104 <HttpDaemon::Run()+0x140>)
 8010052:	9302      	str	r3, [sp, #8]
 8010054:	4b2c      	ldr	r3, [pc, #176]	; (8010108 <HttpDaemon::Run()+0x144>)
 8010056:	68e0      	ldr	r0, [r4, #12]
 8010058:	e9cd 5300 	strd	r5, r3, [sp]
 801005c:	69a3      	ldr	r3, [r4, #24]
 801005e:	f7f9 fb2d 	bl	80096bc <snprintf>
 8010062:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 8010066:	b283      	uxth	r3, r0
 8010068:	6830      	ldr	r0, [r6, #0]
 801006a:	f002 f9b4 	bl	80123d6 <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 801006e:	463a      	mov	r2, r7
 8010070:	f8b4 35c2 	ldrh.w	r3, [r4, #1474]	; 0x5c2
 8010074:	6921      	ldr	r1, [r4, #16]
 8010076:	6830      	ldr	r0, [r6, #0]
 8010078:	f002 f9ad 	bl	80123d6 <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 801007c:	f44f 7202 	mov.w	r2, #520	; 0x208
 8010080:	2302      	movs	r3, #2
 8010082:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8010086:	e00c      	b.n	80100a2 <HttpDaemon::Run()+0xde>
 8010088:	2b01      	cmp	r3, #1
 801008a:	d1b9      	bne.n	8010000 <HttpDaemon::Run()+0x3c>
 801008c:	2100      	movs	r1, #0
 801008e:	4620      	mov	r0, r4
 8010090:	f7ff fee2 	bl	800fe58 <HttpDaemon::HandlePost(bool)>
 8010094:	28c8      	cmp	r0, #200	; 0xc8
 8010096:	61a0      	str	r0, [r4, #24]
 8010098:	d1b2      	bne.n	8010000 <HttpDaemon::Run()+0x3c>
 801009a:	f8b4 35c4 	ldrh.w	r3, [r4, #1476]	; 0x5c4
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d1ae      	bne.n	8010000 <HttpDaemon::Run()+0x3c>
 80100a2:	b005      	add	sp, #20
 80100a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100a6:	2bc8      	cmp	r3, #200	; 0xc8
 80100a8:	d1aa      	bne.n	8010000 <HttpDaemon::Run()+0x3c>
 80100aa:	69e1      	ldr	r1, [r4, #28]
 80100ac:	2901      	cmp	r1, #1
 80100ae:	d1a7      	bne.n	8010000 <HttpDaemon::Run()+0x3c>
 80100b0:	4620      	mov	r0, r4
 80100b2:	f7ff fed1 	bl	800fe58 <HttpDaemon::HandlePost(bool)>
 80100b6:	e7a2      	b.n	800fffe <HttpDaemon::Run()+0x3a>
 80100b8:	f240 12f5 	movw	r2, #501	; 0x1f5
 80100bc:	4293      	cmp	r3, r2
 80100be:	d010      	beq.n	80100e2 <HttpDaemon::Run()+0x11e>
 80100c0:	f240 12f9 	movw	r2, #505	; 0x1f9
 80100c4:	4293      	cmp	r3, r2
 80100c6:	d00e      	beq.n	80100e6 <HttpDaemon::Run()+0x122>
 80100c8:	4d10      	ldr	r5, [pc, #64]	; (801010c <HttpDaemon::Run()+0x148>)
 80100ca:	4a0b      	ldr	r2, [pc, #44]	; (80100f8 <HttpDaemon::Run()+0x134>)
 80100cc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80100d0:	bf18      	it	ne
 80100d2:	4615      	movne	r5, r2
 80100d4:	e7aa      	b.n	801002c <HttpDaemon::Run()+0x68>
 80100d6:	4d0e      	ldr	r5, [pc, #56]	; (8010110 <HttpDaemon::Run()+0x14c>)
 80100d8:	e7a8      	b.n	801002c <HttpDaemon::Run()+0x68>
 80100da:	4d0e      	ldr	r5, [pc, #56]	; (8010114 <HttpDaemon::Run()+0x150>)
 80100dc:	e7a6      	b.n	801002c <HttpDaemon::Run()+0x68>
 80100de:	4d0e      	ldr	r5, [pc, #56]	; (8010118 <HttpDaemon::Run()+0x154>)
 80100e0:	e7a4      	b.n	801002c <HttpDaemon::Run()+0x68>
 80100e2:	4d0e      	ldr	r5, [pc, #56]	; (801011c <HttpDaemon::Run()+0x158>)
 80100e4:	e7a2      	b.n	801002c <HttpDaemon::Run()+0x68>
 80100e6:	4d0e      	ldr	r5, [pc, #56]	; (8010120 <HttpDaemon::Run()+0x15c>)
 80100e8:	e7a0      	b.n	801002c <HttpDaemon::Run()+0x68>
 80100ea:	4d0e      	ldr	r5, [pc, #56]	; (8010124 <HttpDaemon::Run()+0x160>)
 80100ec:	e7aa      	b.n	8010044 <HttpDaemon::Run()+0x80>
 80100ee:	bf00      	nop
 80100f0:	2000a29c 	mulcs	r0, ip, r2
 80100f4:	08017758 	stmdaeq	r1, {r3, r4, r6, r8, r9, sl, ip, sp, lr}
 80100f8:	08017764 	stmdaeq	r1, {r2, r5, r6, r8, r9, sl, ip, sp, lr}
 80100fc:	0801783e 	stmdaeq	r1, {r1, r2, r3, r4, r5, fp, ip, sp, lr}
 8010100:	0801778b 	stmdaeq	r1, {r0, r1, r3, r7, r8, r9, sl, ip, sp, lr}
 8010104:	080177e6 	stmdaeq	r1, {r1, r2, r5, r6, r7, r8, r9, sl, ip, sp, lr}
 8010108:	08016c05 	stmdaeq	r1, {r0, r2, sl, fp, sp, lr}
 801010c:	08017772 	stmdaeq	r1, {r1, r4, r5, r6, r8, r9, sl, ip, sp, lr}
 8010110:	08017716 	stmdaeq	r1, {r1, r2, r4, r8, r9, sl, ip, sp, lr}
 8010114:	0801770c 	stmdaeq	r1, {r2, r3, r8, r9, sl, ip, sp, lr}
 8010118:	080176f3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r9, sl, ip, sp, lr}
 801011c:	08017741 	stmdaeq	r1, {r0, r6, r8, r9, sl, ip, sp, lr}
 8010120:	0801772b 	stmdaeq	r1, {r0, r1, r3, r5, r8, r9, sl, ip, sp, lr}
 8010124:	08017788 	stmdaeq	r1, {r3, r7, r8, r9, sl, ip, sp, lr}

08010128 <remoteconfig::json_get_list(char*, unsigned short)>:
 8010128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801012c:	4b14      	ldr	r3, [pc, #80]	; (8010180 <remoteconfig::json_get_list(char*, unsigned short)+0x58>)
 801012e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8010184 <remoteconfig::json_get_list(char*, unsigned short)+0x5c>
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	b088      	sub	sp, #32
 8010136:	4605      	mov	r5, r0
 8010138:	f8d8 0000 	ldr.w	r0, [r8]
 801013c:	691c      	ldr	r4, [r3, #16]
 801013e:	460e      	mov	r6, r1
 8010140:	f7fe ffd2 	bl	800f0e8 <RemoteConfig::GetStringNode() const>
 8010144:	4607      	mov	r7, r0
 8010146:	f8d8 0000 	ldr.w	r0, [r8]
 801014a:	f7fe ffd9 	bl	800f100 <RemoteConfig::GetStringOutput() const>
 801014e:	4b0e      	ldr	r3, [pc, #56]	; (8010188 <remoteconfig::json_get_list(char*, unsigned short)+0x60>)
 8010150:	4631      	mov	r1, r6
 8010152:	7a1a      	ldrb	r2, [r3, #8]
 8010154:	3309      	adds	r3, #9
 8010156:	9303      	str	r3, [sp, #12]
 8010158:	0e23      	lsrs	r3, r4, #24
 801015a:	9302      	str	r3, [sp, #8]
 801015c:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8010160:	9301      	str	r3, [sp, #4]
 8010162:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8010166:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801016a:	9300      	str	r3, [sp, #0]
 801016c:	4628      	mov	r0, r5
 801016e:	4a07      	ldr	r2, [pc, #28]	; (801018c <remoteconfig::json_get_list(char*, unsigned short)+0x64>)
 8010170:	9704      	str	r7, [sp, #16]
 8010172:	b2e3      	uxtb	r3, r4
 8010174:	f7f9 faa2 	bl	80096bc <snprintf>
 8010178:	b280      	uxth	r0, r0
 801017a:	b008      	add	sp, #32
 801017c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010180:	2000a29c 	mulcs	r0, ip, r2
 8010184:	20001984 	andcs	r1, r0, r4, lsl #19
 8010188:	20001960 	andcs	r1, r0, r0, ror #18
 801018c:	08017918 	stmdaeq	r1, {r3, r4, r8, fp, ip, sp, lr}

08010190 <remoteconfig::json_get_version(char*, unsigned short)>:
 8010190:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010192:	2208      	movs	r2, #8
 8010194:	4b09      	ldr	r3, [pc, #36]	; (80101bc <remoteconfig::json_get_version(char*, unsigned short)+0x2c>)
 8010196:	9204      	str	r2, [sp, #16]
 8010198:	f1a3 020b 	sub.w	r2, r3, #11
 801019c:	9203      	str	r2, [sp, #12]
 801019e:	220b      	movs	r2, #11
 80101a0:	9202      	str	r2, [sp, #8]
 80101a2:	4a07      	ldr	r2, [pc, #28]	; (80101c0 <remoteconfig::json_get_version(char*, unsigned short)+0x30>)
 80101a4:	9305      	str	r3, [sp, #20]
 80101a6:	3b0e      	subs	r3, #14
 80101a8:	9201      	str	r2, [sp, #4]
 80101aa:	9300      	str	r3, [sp, #0]
 80101ac:	4a05      	ldr	r2, [pc, #20]	; (80101c4 <remoteconfig::json_get_version(char*, unsigned short)+0x34>)
 80101ae:	2303      	movs	r3, #3
 80101b0:	f7f9 fa84 	bl	80096bc <snprintf>
 80101b4:	b280      	uxth	r0, r0
 80101b6:	b007      	add	sp, #28
 80101b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80101bc:	2000a972 	andcs	sl, r0, r2, ror r9
 80101c0:	08016c05 	stmdaeq	r1, {r0, r2, sl, fp, sp, lr}
 80101c4:	08017977 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r8, fp, ip, sp, lr}

080101c8 <remoteconfig::json_get_uptime(char*, unsigned short)>:
 80101c8:	b508      	push	{r3, lr}
 80101ca:	4b05      	ldr	r3, [pc, #20]	; (80101e0 <remoteconfig::json_get_uptime(char*, unsigned short)+0x18>)
 80101cc:	681a      	ldr	r2, [r3, #0]
 80101ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80101d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80101d6:	4a03      	ldr	r2, [pc, #12]	; (80101e4 <remoteconfig::json_get_uptime(char*, unsigned short)+0x1c>)
 80101d8:	f7f9 fa70 	bl	80096bc <snprintf>
 80101dc:	b280      	uxth	r0, r0
 80101de:	bd08      	pop	{r3, pc}
 80101e0:	2000a9dc 	ldrdcs	sl, [r0], -ip
 80101e4:	080179bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, fp, ip, sp, lr}

080101e8 <remoteconfig::json_get_display(char*, unsigned short)>:
 80101e8:	b508      	push	{r3, lr}
 80101ea:	4b05      	ldr	r3, [pc, #20]	; (8010200 <remoteconfig::json_get_display(char*, unsigned short)+0x18>)
 80101ec:	4a05      	ldr	r2, [pc, #20]	; (8010204 <remoteconfig::json_get_display(char*, unsigned short)+0x1c>)
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	7c1b      	ldrb	r3, [r3, #16]
 80101f2:	f083 0301 	eor.w	r3, r3, #1
 80101f6:	f7f9 fa61 	bl	80096bc <snprintf>
 80101fa:	b280      	uxth	r0, r0
 80101fc:	bd08      	pop	{r3, pc}
 80101fe:	bf00      	nop
 8010200:	2000a8d4 	ldrdcs	sl, [r0], -r4
 8010204:	080179cc 	stmdaeq	r1, {r2, r3, r6, r7, r8, fp, ip, sp, lr}

08010208 <remoteconfig::json_get_directory(char*, unsigned short)>:
 8010208:	b508      	push	{r3, lr}
 801020a:	4a02      	ldr	r2, [pc, #8]	; (8010214 <remoteconfig::json_get_directory(char*, unsigned short)+0xc>)
 801020c:	f7f9 fa56 	bl	80096bc <snprintf>
 8010210:	b280      	uxth	r0, r0
 8010212:	bd08      	pop	{r3, pc}
 8010214:	080179db 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, r8, fp, ip, sp, lr}

08010218 <get_file_content(char const*, char*)>:
 8010218:	2300      	movs	r3, #0
 801021a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801021c:	4a18      	ldr	r2, [pc, #96]	; (8010280 <get_file_content(char const*, char*)+0x68>)
 801021e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8010222:	1e46      	subs	r6, r0, #1
 8010224:	1e6f      	subs	r7, r5, #1
 8010226:	f816 cf01 	ldrb.w	ip, [r6, #1]!
 801022a:	f817 4f01 	ldrb.w	r4, [r7, #1]!
 801022e:	4564      	cmp	r4, ip
 8010230:	d119      	bne.n	8010266 <get_file_content(char const*, char*)+0x4e>
 8010232:	2c00      	cmp	r4, #0
 8010234:	d1f7      	bne.n	8010226 <get_file_content(char const*, char*)+0xe>
 8010236:	460c      	mov	r4, r1
 8010238:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801023c:	685b      	ldr	r3, [r3, #4]
 801023e:	3b01      	subs	r3, #1
 8010240:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8010244:	f804 2b01 	strb.w	r2, [r4], #1
 8010248:	2a00      	cmp	r2, #0
 801024a:	d1f9      	bne.n	8010240 <get_file_content(char const*, char*)+0x28>
 801024c:	1a64      	subs	r4, r4, r1
 801024e:	3c01      	subs	r4, #1
 8010250:	232e      	movs	r3, #46	; 0x2e
 8010252:	e9cd 5400 	strd	r5, r4, [sp]
 8010256:	4a0b      	ldr	r2, [pc, #44]	; (8010284 <get_file_content(char const*, char*)+0x6c>)
 8010258:	490b      	ldr	r1, [pc, #44]	; (8010288 <get_file_content(char const*, char*)+0x70>)
 801025a:	480c      	ldr	r0, [pc, #48]	; (801028c <get_file_content(char const*, char*)+0x74>)
 801025c:	f7f9 fa06 	bl	800966c <printf>
 8010260:	4620      	mov	r0, r4
 8010262:	b003      	add	sp, #12
 8010264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010266:	3301      	adds	r3, #1
 8010268:	2b03      	cmp	r3, #3
 801026a:	d1d8      	bne.n	801021e <get_file_content(char const*, char*)+0x6>
 801026c:	2333      	movs	r3, #51	; 0x33
 801026e:	4a06      	ldr	r2, [pc, #24]	; (8010288 <get_file_content(char const*, char*)+0x70>)
 8010270:	4904      	ldr	r1, [pc, #16]	; (8010284 <get_file_content(char const*, char*)+0x6c>)
 8010272:	4807      	ldr	r0, [pc, #28]	; (8010290 <get_file_content(char const*, char*)+0x78>)
 8010274:	f7f9 f9fa 	bl	800966c <printf>
 8010278:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801027c:	e7f0      	b.n	8010260 <get_file_content(char const*, char*)+0x48>
 801027e:	bf00      	nop
 8010280:	08017d74 	stmdaeq	r1, {r2, r4, r5, r6, r8, sl, fp, ip, sp, lr}
 8010284:	08017a71 	stmdaeq	r1, {r0, r4, r5, r6, r9, fp, ip, sp, lr}
 8010288:	08017a90 	stmdaeq	r1, {r4, r7, r9, fp, ip, sp, lr}
 801028c:	08017aa1 	stmdaeq	r1, {r0, r5, r7, r9, fp, ip, sp, lr}
 8010290:	08017abd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r9, fp, ip, sp, lr}

08010294 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>:
 8010294:	2300      	movs	r3, #0
 8010296:	2020      	movs	r0, #32
 8010298:	b510      	push	{r4, lr}
 801029a:	4a04      	ldr	r2, [pc, #16]	; (80102ac <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x18>)
 801029c:	428b      	cmp	r3, r1
 801029e:	d004      	beq.n	80102aa <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x16>
 80102a0:	f852 4b04 	ldr.w	r4, [r2], #4
 80102a4:	3301      	adds	r3, #1
 80102a6:	4420      	add	r0, r4
 80102a8:	e7f8      	b.n	801029c <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x8>
 80102aa:	bd10      	pop	{r4, pc}
 80102ac:	080182b8 	stmdaeq	r1, {r3, r4, r5, r7, r9, pc}

080102b0 <SpiFlashStore::Init()>:
 80102b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102b4:	f8df 8120 	ldr.w	r8, [pc, #288]	; 80103d8 <SpiFlashStore::Init()+0x128>
 80102b8:	4607      	mov	r7, r0
 80102ba:	b085      	sub	sp, #20
 80102bc:	f8d8 0000 	ldr.w	r0, [r8]
 80102c0:	f000 fcbc 	bl	8010c3c <FlashRom::GetSectorSize() const>
 80102c4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80102c8:	4605      	mov	r5, r0
 80102ca:	f040 8083 	bne.w	80103d4 <SpiFlashStore::Init()+0x124>
 80102ce:	f8d8 0000 	ldr.w	r0, [r8]
 80102d2:	f000 fcab 	bl	8010c2c <FlashRom::GetSize() const>
 80102d6:	4b41      	ldr	r3, [pc, #260]	; (80103dc <SpiFlashStore::Init()+0x12c>)
 80102d8:	f5a0 5180 	sub.w	r1, r0, #4096	; 0x1000
 80102dc:	f3c1 060b 	ubfx	r6, r1, #0, #12
 80102e0:	6019      	str	r1, [r3, #0]
 80102e2:	2e00      	cmp	r6, #0
 80102e4:	d176      	bne.n	80103d4 <SpiFlashStore::Init()+0x124>
 80102e6:	4c3e      	ldr	r4, [pc, #248]	; (80103e0 <SpiFlashStore::Init()+0x130>)
 80102e8:	ab03      	add	r3, sp, #12
 80102ea:	9300      	str	r3, [sp, #0]
 80102ec:	462a      	mov	r2, r5
 80102ee:	4623      	mov	r3, r4
 80102f0:	f8d8 0000 	ldr.w	r0, [r8]
 80102f4:	f000 fca5 	bl	8010c42 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>
 80102f8:	7823      	ldrb	r3, [r4, #0]
 80102fa:	2b41      	cmp	r3, #65	; 0x41
 80102fc:	bf1c      	itt	ne
 80102fe:	2341      	movne	r3, #65	; 0x41
 8010300:	7023      	strbne	r3, [r4, #0]
 8010302:	7863      	ldrb	r3, [r4, #1]
 8010304:	bf14      	ite	ne
 8010306:	4635      	movne	r5, r6
 8010308:	2501      	moveq	r5, #1
 801030a:	2b76      	cmp	r3, #118	; 0x76
 801030c:	bf1c      	itt	ne
 801030e:	2376      	movne	r3, #118	; 0x76
 8010310:	7063      	strbne	r3, [r4, #1]
 8010312:	78a3      	ldrb	r3, [r4, #2]
 8010314:	bf18      	it	ne
 8010316:	2500      	movne	r5, #0
 8010318:	2b56      	cmp	r3, #86	; 0x56
 801031a:	bf1c      	itt	ne
 801031c:	2356      	movne	r3, #86	; 0x56
 801031e:	70a3      	strbne	r3, [r4, #2]
 8010320:	78e3      	ldrb	r3, [r4, #3]
 8010322:	bf18      	it	ne
 8010324:	2500      	movne	r5, #0
 8010326:	2b10      	cmp	r3, #16
 8010328:	d01c      	beq.n	8010364 <SpiFlashStore::Init()+0xb4>
 801032a:	2310      	movs	r3, #16
 801032c:	70e3      	strb	r3, [r4, #3]
 801032e:	2201      	movs	r2, #1
 8010330:	2500      	movs	r5, #0
 8010332:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8010336:	4b2b      	ldr	r3, [pc, #172]	; (80103e4 <SpiFlashStore::Init()+0x134>)
 8010338:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80103e8 <SpiFlashStore::Init()+0x138>
 801033c:	701a      	strb	r2, [r3, #0]
 801033e:	4631      	mov	r1, r6
 8010340:	4638      	mov	r0, r7
 8010342:	f7ff ffa7 	bl	8010294 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 8010346:	1823      	adds	r3, r4, r0
 8010348:	5425      	strb	r5, [r4, r0]
 801034a:	705d      	strb	r5, [r3, #1]
 801034c:	709d      	strb	r5, [r3, #2]
 801034e:	70dd      	strb	r5, [r3, #3]
 8010350:	f858 3b04 	ldr.w	r3, [r8], #4
 8010354:	1d02      	adds	r2, r0, #4
 8010356:	4403      	add	r3, r0
 8010358:	4293      	cmp	r3, r2
 801035a:	d931      	bls.n	80103c0 <SpiFlashStore::Init()+0x110>
 801035c:	f804 9002 	strb.w	r9, [r4, r2]
 8010360:	3201      	adds	r2, #1
 8010362:	e7f9      	b.n	8010358 <SpiFlashStore::Init()+0xa8>
 8010364:	2d00      	cmp	r5, #0
 8010366:	d0e2      	beq.n	801032e <SpiFlashStore::Init()+0x7e>
 8010368:	f04f 0900 	mov.w	r9, #0
 801036c:	46c8      	mov	r8, r9
 801036e:	f8df a07c 	ldr.w	sl, [pc, #124]	; 80103ec <SpiFlashStore::Init()+0x13c>
 8010372:	f8da b000 	ldr.w	fp, [sl]
 8010376:	4631      	mov	r1, r6
 8010378:	4638      	mov	r0, r7
 801037a:	f7ff ff8b 	bl	8010294 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 801037e:	5c23      	ldrb	r3, [r4, r0]
 8010380:	2bff      	cmp	r3, #255	; 0xff
 8010382:	d114      	bne.n	80103ae <SpiFlashStore::Init()+0xfe>
 8010384:	1823      	adds	r3, r4, r0
 8010386:	785a      	ldrb	r2, [r3, #1]
 8010388:	2aff      	cmp	r2, #255	; 0xff
 801038a:	d110      	bne.n	80103ae <SpiFlashStore::Init()+0xfe>
 801038c:	789a      	ldrb	r2, [r3, #2]
 801038e:	2aff      	cmp	r2, #255	; 0xff
 8010390:	d10d      	bne.n	80103ae <SpiFlashStore::Init()+0xfe>
 8010392:	78da      	ldrb	r2, [r3, #3]
 8010394:	2aff      	cmp	r2, #255	; 0xff
 8010396:	d10a      	bne.n	80103ae <SpiFlashStore::Init()+0xfe>
 8010398:	46a9      	mov	r9, r5
 801039a:	f04f 0b01 	mov.w	fp, #1
 801039e:	f804 8000 	strb.w	r8, [r4, r0]
 80103a2:	f883 8001 	strb.w	r8, [r3, #1]
 80103a6:	f883 8002 	strb.w	r8, [r3, #2]
 80103aa:	f883 8003 	strb.w	r8, [r3, #3]
 80103ae:	3601      	adds	r6, #1
 80103b0:	2e1c      	cmp	r6, #28
 80103b2:	d1e0      	bne.n	8010376 <SpiFlashStore::Init()+0xc6>
 80103b4:	f1b9 0f00 	cmp.w	r9, #0
 80103b8:	d008      	beq.n	80103cc <SpiFlashStore::Init()+0x11c>
 80103ba:	f8ca b000 	str.w	fp, [sl]
 80103be:	e005      	b.n	80103cc <SpiFlashStore::Init()+0x11c>
 80103c0:	3601      	adds	r6, #1
 80103c2:	2e1c      	cmp	r6, #28
 80103c4:	d1bb      	bne.n	801033e <SpiFlashStore::Init()+0x8e>
 80103c6:	2501      	movs	r5, #1
 80103c8:	4b08      	ldr	r3, [pc, #32]	; (80103ec <SpiFlashStore::Init()+0x13c>)
 80103ca:	601d      	str	r5, [r3, #0]
 80103cc:	4628      	mov	r0, r5
 80103ce:	b005      	add	sp, #20
 80103d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103d4:	2500      	movs	r5, #0
 80103d6:	e7f9      	b.n	80103cc <SpiFlashStore::Init()+0x11c>
 80103d8:	200029b8 			; <UNDEFINED> instruction: 0x200029b8
 80103dc:	2000298c 	andcs	r2, r0, ip, lsl #19
 80103e0:	2000198c 	andcs	r1, r0, ip, lsl #19
 80103e4:	200029a0 	andcs	r2, r0, r0, lsr #19
 80103e8:	080182b8 	stmdaeq	r1, {r3, r4, r5, r7, r9, pc}
 80103ec:	20002998 	mulcs	r0, r8, r9

080103f0 <SpiFlashStore::SpiFlashStore()>:
 80103f0:	b538      	push	{r3, r4, r5, lr}
 80103f2:	4b0d      	ldr	r3, [pc, #52]	; (8010428 <SpiFlashStore::SpiFlashStore()+0x38>)
 80103f4:	4604      	mov	r4, r0
 80103f6:	6018      	str	r0, [r3, #0]
 80103f8:	4b0c      	ldr	r3, [pc, #48]	; (801042c <SpiFlashStore::SpiFlashStore()+0x3c>)
 80103fa:	4d0d      	ldr	r5, [pc, #52]	; (8010430 <SpiFlashStore::SpiFlashStore()+0x40>)
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	781b      	ldrb	r3, [r3, #0]
 8010400:	b113      	cbz	r3, 8010408 <SpiFlashStore::SpiFlashStore()+0x18>
 8010402:	f7ff ff55 	bl	80102b0 <SpiFlashStore::Init()>
 8010406:	7028      	strb	r0, [r5, #0]
 8010408:	782b      	ldrb	r3, [r5, #0]
 801040a:	b153      	cbz	r3, 8010422 <SpiFlashStore::SpiFlashStore()+0x32>
 801040c:	2320      	movs	r3, #32
 801040e:	2200      	movs	r2, #0
 8010410:	4908      	ldr	r1, [pc, #32]	; (8010434 <SpiFlashStore::SpiFlashStore()+0x44>)
 8010412:	f851 0b04 	ldr.w	r0, [r1], #4
 8010416:	3201      	adds	r2, #1
 8010418:	2a1c      	cmp	r2, #28
 801041a:	4403      	add	r3, r0
 801041c:	d1f9      	bne.n	8010412 <SpiFlashStore::SpiFlashStore()+0x22>
 801041e:	4a06      	ldr	r2, [pc, #24]	; (8010438 <SpiFlashStore::SpiFlashStore()+0x48>)
 8010420:	6013      	str	r3, [r2, #0]
 8010422:	4620      	mov	r0, r4
 8010424:	bd38      	pop	{r3, r4, r5, pc}
 8010426:	bf00      	nop
 8010428:	2000299c 	mulcs	r0, ip, r9
 801042c:	200029b8 			; <UNDEFINED> instruction: 0x200029b8
 8010430:	20002990 	mulcs	r0, r0, r9
 8010434:	080182b8 	stmdaeq	r1, {r3, r4, r5, r7, r9, pc}
 8010438:	20002994 	mulcs	r0, r4, r9

0801043c <SpiFlashStore::ResetSetList(spiflashstore::Store)>:
 801043c:	b508      	push	{r3, lr}
 801043e:	f7ff ff29 	bl	8010294 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 8010442:	2300      	movs	r3, #0
 8010444:	4904      	ldr	r1, [pc, #16]	; (8010458 <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x1c>)
 8010446:	1842      	adds	r2, r0, r1
 8010448:	540b      	strb	r3, [r1, r0]
 801044a:	7053      	strb	r3, [r2, #1]
 801044c:	7093      	strb	r3, [r2, #2]
 801044e:	70d3      	strb	r3, [r2, #3]
 8010450:	2201      	movs	r2, #1
 8010452:	4b02      	ldr	r3, [pc, #8]	; (801045c <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x20>)
 8010454:	601a      	str	r2, [r3, #0]
 8010456:	bd08      	pop	{r3, pc}
 8010458:	2000198c 	andcs	r1, r0, ip, lsl #19
 801045c:	20002998 	mulcs	r0, r8, r9

08010460 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>:
 8010460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010464:	461c      	mov	r4, r3
 8010466:	4b19      	ldr	r3, [pc, #100]	; (80104cc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x6c>)
 8010468:	4615      	mov	r5, r2
 801046a:	781f      	ldrb	r7, [r3, #0]
 801046c:	9e07      	ldr	r6, [sp, #28]
 801046e:	b35f      	cbz	r7, 80104c8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x68>
 8010470:	f7ff ff10 	bl	8010294 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 8010474:	f04f 0c00 	mov.w	ip, #0
 8010478:	4a15      	ldr	r2, [pc, #84]	; (80104d0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x70>)
 801047a:	1941      	adds	r1, r0, r5
 801047c:	1e63      	subs	r3, r4, #1
 801047e:	9c06      	ldr	r4, [sp, #24]
 8010480:	4411      	add	r1, r2
 8010482:	440c      	add	r4, r1
 8010484:	42a1      	cmp	r1, r4
 8010486:	d00a      	beq.n	801049e <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x3e>
 8010488:	f891 8000 	ldrb.w	r8, [r1]
 801048c:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8010490:	3101      	adds	r1, #1
 8010492:	45f0      	cmp	r8, lr
 8010494:	bf1c      	itt	ne
 8010496:	f801 ec01 	strbne.w	lr, [r1, #-1]
 801049a:	46bc      	movne	ip, r7
 801049c:	e7f2      	b.n	8010484 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x24>
 801049e:	f1bc 0f00 	cmp.w	ip, #0
 80104a2:	d011      	beq.n	80104c8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x68>
 80104a4:	4b0b      	ldr	r3, [pc, #44]	; (80104d4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x74>)
 80104a6:	6819      	ldr	r1, [r3, #0]
 80104a8:	b109      	cbz	r1, 80104ae <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x4e>
 80104aa:	2906      	cmp	r1, #6
 80104ac:	d101      	bne.n	80104b2 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 80104ae:	2101      	movs	r1, #1
 80104b0:	6019      	str	r1, [r3, #0]
 80104b2:	4b09      	ldr	r3, [pc, #36]	; (80104d8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x78>)
 80104b4:	6819      	ldr	r1, [r3, #0]
 80104b6:	4b09      	ldr	r3, [pc, #36]	; (80104dc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x7c>)
 80104b8:	6019      	str	r1, [r3, #0]
 80104ba:	b12d      	cbz	r5, 80104c8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x68>
 80104bc:	b126      	cbz	r6, 80104c8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x68>
 80104be:	9b08      	ldr	r3, [sp, #32]
 80104c0:	4418      	add	r0, r3
 80104c2:	5813      	ldr	r3, [r2, r0]
 80104c4:	4333      	orrs	r3, r6
 80104c6:	5013      	str	r3, [r2, r0]
 80104c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104cc:	20002990 	mulcs	r0, r0, r9
 80104d0:	2000198c 	andcs	r1, r0, ip, lsl #19
 80104d4:	20002998 	mulcs	r0, r8, r9
 80104d8:	2000a9dc 	ldrdcs	sl, [r0], -ip
 80104dc:	20001988 	andcs	r1, r0, r8, lsl #19

080104e0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>:
 80104e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80104e4:	461d      	mov	r5, r3
 80104e6:	4b15      	ldr	r3, [pc, #84]	; (801053c <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x5c>)
 80104e8:	b085      	sub	sp, #20
 80104ea:	781b      	ldrb	r3, [r3, #0]
 80104ec:	4607      	mov	r7, r0
 80104ee:	4688      	mov	r8, r1
 80104f0:	4614      	mov	r4, r2
 80104f2:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80104f6:	b1eb      	cbz	r3, 8010534 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x54>
 80104f8:	f7ff fecc 	bl	8010294 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 80104fc:	4910      	ldr	r1, [pc, #64]	; (8010540 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x60>)
 80104fe:	4a11      	ldr	r2, [pc, #68]	; (8010544 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x64>)
 8010500:	7809      	ldrb	r1, [r1, #0]
 8010502:	eb00 0309 	add.w	r3, r0, r9
 8010506:	189e      	adds	r6, r3, r2
 8010508:	b951      	cbnz	r1, 8010520 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x40>
 801050a:	589b      	ldr	r3, [r3, r2]
 801050c:	b143      	cbz	r3, 8010520 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x40>
 801050e:	3c01      	subs	r4, #1
 8010510:	4435      	add	r5, r6
 8010512:	42b5      	cmp	r5, r6
 8010514:	d00e      	beq.n	8010534 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x54>
 8010516:	f816 3b01 	ldrb.w	r3, [r6], #1
 801051a:	f804 3f01 	strb.w	r3, [r4, #1]!
 801051e:	e7f8      	b.n	8010512 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x32>
 8010520:	2300      	movs	r3, #0
 8010522:	464a      	mov	r2, r9
 8010524:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8010528:	4641      	mov	r1, r8
 801052a:	4623      	mov	r3, r4
 801052c:	4638      	mov	r0, r7
 801052e:	9500      	str	r5, [sp, #0]
 8010530:	f7ff ff96 	bl	8010460 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010534:	b005      	add	sp, #20
 8010536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801053a:	bf00      	nop
 801053c:	20002990 	mulcs	r0, r0, r9
 8010540:	200029a0 	andcs	r2, r0, r0, lsr #19
 8010544:	2000198c 	andcs	r1, r0, ip, lsl #19

08010548 <SpiFlashStore::Flash()>:
 8010548:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801054a:	4c25      	ldr	r4, [pc, #148]	; (80105e0 <SpiFlashStore::Flash()+0x98>)
 801054c:	6820      	ldr	r0, [r4, #0]
 801054e:	2800      	cmp	r0, #0
 8010550:	d043      	beq.n	80105da <SpiFlashStore::Flash()+0x92>
 8010552:	3801      	subs	r0, #1
 8010554:	2805      	cmp	r0, #5
 8010556:	d831      	bhi.n	80105bc <SpiFlashStore::Flash()+0x74>
 8010558:	e8df f000 	tbb	[pc, r0]
 801055c:	2e140b03 	vnmlscs.f64	d0, d4, d3
 8010560:	4b203025 	blmi	881c5fc <__exidx_end+0x80374c>
 8010564:	681a      	ldr	r2, [r3, #0]
 8010566:	4b20      	ldr	r3, [pc, #128]	; (80105e8 <SpiFlashStore::Flash()+0xa0>)
 8010568:	601a      	str	r2, [r3, #0]
 801056a:	2302      	movs	r3, #2
 801056c:	6023      	str	r3, [r4, #0]
 801056e:	2001      	movs	r0, #1
 8010570:	e033      	b.n	80105da <SpiFlashStore::Flash()+0x92>
 8010572:	4b1c      	ldr	r3, [pc, #112]	; (80105e4 <SpiFlashStore::Flash()+0x9c>)
 8010574:	4a1c      	ldr	r2, [pc, #112]	; (80105e8 <SpiFlashStore::Flash()+0xa0>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	6812      	ldr	r2, [r2, #0]
 801057a:	1a9b      	subs	r3, r3, r2
 801057c:	2b63      	cmp	r3, #99	; 0x63
 801057e:	d9f6      	bls.n	801056e <SpiFlashStore::Flash()+0x26>
 8010580:	2303      	movs	r3, #3
 8010582:	e7f3      	b.n	801056c <SpiFlashStore::Flash()+0x24>
 8010584:	4919      	ldr	r1, [pc, #100]	; (80105ec <SpiFlashStore::Flash()+0xa4>)
 8010586:	481a      	ldr	r0, [pc, #104]	; (80105f0 <SpiFlashStore::Flash()+0xa8>)
 8010588:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801058c:	6809      	ldr	r1, [r1, #0]
 801058e:	6800      	ldr	r0, [r0, #0]
 8010590:	ab03      	add	r3, sp, #12
 8010592:	f000 fb65 	bl	8010c60 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>
 8010596:	2800      	cmp	r0, #0
 8010598:	d0e9      	beq.n	801056e <SpiFlashStore::Flash()+0x26>
 801059a:	4b12      	ldr	r3, [pc, #72]	; (80105e4 <SpiFlashStore::Flash()+0x9c>)
 801059c:	681a      	ldr	r2, [r3, #0]
 801059e:	4b12      	ldr	r3, [pc, #72]	; (80105e8 <SpiFlashStore::Flash()+0xa0>)
 80105a0:	601a      	str	r2, [r3, #0]
 80105a2:	2305      	movs	r3, #5
 80105a4:	e7e2      	b.n	801056c <SpiFlashStore::Flash()+0x24>
 80105a6:	4b0f      	ldr	r3, [pc, #60]	; (80105e4 <SpiFlashStore::Flash()+0x9c>)
 80105a8:	4a0f      	ldr	r2, [pc, #60]	; (80105e8 <SpiFlashStore::Flash()+0xa0>)
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	6812      	ldr	r2, [r2, #0]
 80105ae:	1a9b      	subs	r3, r3, r2
 80105b0:	2b63      	cmp	r3, #99	; 0x63
 80105b2:	d9dc      	bls.n	801056e <SpiFlashStore::Flash()+0x26>
 80105b4:	2304      	movs	r3, #4
 80105b6:	e7d9      	b.n	801056c <SpiFlashStore::Flash()+0x24>
 80105b8:	2306      	movs	r3, #6
 80105ba:	e7d7      	b.n	801056c <SpiFlashStore::Flash()+0x24>
 80105bc:	ab03      	add	r3, sp, #12
 80105be:	4a0d      	ldr	r2, [pc, #52]	; (80105f4 <SpiFlashStore::Flash()+0xac>)
 80105c0:	490a      	ldr	r1, [pc, #40]	; (80105ec <SpiFlashStore::Flash()+0xa4>)
 80105c2:	480b      	ldr	r0, [pc, #44]	; (80105f0 <SpiFlashStore::Flash()+0xa8>)
 80105c4:	9300      	str	r3, [sp, #0]
 80105c6:	6812      	ldr	r2, [r2, #0]
 80105c8:	4b0b      	ldr	r3, [pc, #44]	; (80105f8 <SpiFlashStore::Flash()+0xb0>)
 80105ca:	6809      	ldr	r1, [r1, #0]
 80105cc:	6800      	ldr	r0, [r0, #0]
 80105ce:	f000 fbe7 	bl	8010da0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>
 80105d2:	2800      	cmp	r0, #0
 80105d4:	d0cb      	beq.n	801056e <SpiFlashStore::Flash()+0x26>
 80105d6:	2000      	movs	r0, #0
 80105d8:	6020      	str	r0, [r4, #0]
 80105da:	b004      	add	sp, #16
 80105dc:	bd10      	pop	{r4, pc}
 80105de:	bf00      	nop
 80105e0:	20002998 	mulcs	r0, r8, r9
 80105e4:	2000a9dc 	ldrdcs	sl, [r0], -ip
 80105e8:	20001988 	andcs	r1, r0, r8, lsl #19
 80105ec:	2000298c 	andcs	r2, r0, ip, lsl #19
 80105f0:	200029b8 			; <UNDEFINED> instruction: 0x200029b8
 80105f4:	20002994 	mulcs	r0, r4, r9
 80105f8:	2000198c 	andcs	r1, r0, ip, lsl #19

080105fc <StoreArtNet::~StoreArtNet()>:
 80105fc:	4770      	bx	lr

080105fe <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 80105fe:	3804      	subs	r0, #4
 8010600:	4770      	bx	lr
	...

08010604 <StoreArtNet::Update(artnetparams::Params const*)>:
 8010604:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010606:	2200      	movs	r2, #0
 8010608:	460b      	mov	r3, r1
 801060a:	2187      	movs	r1, #135	; 0x87
 801060c:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8010610:	4804      	ldr	r0, [pc, #16]	; (8010624 <StoreArtNet::Update(artnetparams::Params const*)+0x20>)
 8010612:	9100      	str	r1, [sp, #0]
 8010614:	6800      	ldr	r0, [r0, #0]
 8010616:	2101      	movs	r1, #1
 8010618:	f7ff ff22 	bl	8010460 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801061c:	b005      	add	sp, #20
 801061e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010622:	bf00      	nop
 8010624:	2000299c 	mulcs	r0, ip, r9

08010628 <StoreArtNet::SaveShortName(char const*)>:
 8010628:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801062a:	460b      	mov	r3, r1
 801062c:	2202      	movs	r2, #2
 801062e:	2100      	movs	r1, #0
 8010630:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8010634:	2212      	movs	r2, #18
 8010636:	4805      	ldr	r0, [pc, #20]	; (801064c <StoreArtNet::SaveShortName(char const*)+0x24>)
 8010638:	9200      	str	r2, [sp, #0]
 801063a:	2101      	movs	r1, #1
 801063c:	220c      	movs	r2, #12
 801063e:	6800      	ldr	r0, [r0, #0]
 8010640:	f7ff ff0e 	bl	8010460 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010644:	b005      	add	sp, #20
 8010646:	f85d fb04 	ldr.w	pc, [sp], #4
 801064a:	bf00      	nop
 801064c:	2000299c 	mulcs	r0, ip, r9

08010650 <non-virtual thunk to StoreArtNet::SaveShortName(char const*)>:
 8010650:	f1a0 0004 	sub.w	r0, r0, #4
 8010654:	f7ff bfe8 	b.w	8010628 <StoreArtNet::SaveShortName(char const*)>

08010658 <StoreArtNet::SaveLongName(char const*)>:
 8010658:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801065a:	460b      	mov	r3, r1
 801065c:	2200      	movs	r2, #0
 801065e:	2101      	movs	r1, #1
 8010660:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8010664:	2240      	movs	r2, #64	; 0x40
 8010666:	4804      	ldr	r0, [pc, #16]	; (8010678 <StoreArtNet::SaveLongName(char const*)+0x20>)
 8010668:	9200      	str	r2, [sp, #0]
 801066a:	6800      	ldr	r0, [r0, #0]
 801066c:	221e      	movs	r2, #30
 801066e:	f7ff fef7 	bl	8010460 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010672:	b005      	add	sp, #20
 8010674:	f85d fb04 	ldr.w	pc, [sp], #4
 8010678:	2000299c 	mulcs	r0, ip, r9

0801067c <non-virtual thunk to StoreArtNet::SaveLongName(char const*)>:
 801067c:	f1a0 0004 	sub.w	r0, r0, #4
 8010680:	f7ff bfea 	b.w	8010658 <StoreArtNet::SaveLongName(char const*)>

08010684 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 8010684:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010686:	2300      	movs	r3, #0
 8010688:	9302      	str	r3, [sp, #8]
 801068a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801068e:	4608      	mov	r0, r1
 8010690:	408b      	lsls	r3, r1
 8010692:	2101      	movs	r1, #1
 8010694:	f88d 2017 	strb.w	r2, [sp, #23]
 8010698:	f100 0267 	add.w	r2, r0, #103	; 0x67
 801069c:	4805      	ldr	r0, [pc, #20]	; (80106b4 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x30>)
 801069e:	9301      	str	r3, [sp, #4]
 80106a0:	9100      	str	r1, [sp, #0]
 80106a2:	6800      	ldr	r0, [r0, #0]
 80106a4:	f10d 0317 	add.w	r3, sp, #23
 80106a8:	f7ff feda 	bl	8010460 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80106ac:	b007      	add	sp, #28
 80106ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80106b2:	bf00      	nop
 80106b4:	2000299c 	mulcs	r0, ip, r9

080106b8 <non-virtual thunk to StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 80106b8:	f1a0 0004 	sub.w	r0, r0, #4
 80106bc:	f7ff bfe2 	b.w	8010684 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>

080106c0 <StoreArtNet::SaveNetSwitch(unsigned char)>:
 80106c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80106c2:	2204      	movs	r2, #4
 80106c4:	2300      	movs	r3, #0
 80106c6:	f88d 1017 	strb.w	r1, [sp, #23]
 80106ca:	2101      	movs	r1, #1
 80106cc:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80106d0:	4804      	ldr	r0, [pc, #16]	; (80106e4 <StoreArtNet::SaveNetSwitch(unsigned char)+0x24>)
 80106d2:	9100      	str	r1, [sp, #0]
 80106d4:	6800      	ldr	r0, [r0, #0]
 80106d6:	f10d 0317 	add.w	r3, sp, #23
 80106da:	f7ff fec1 	bl	8010460 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80106de:	b007      	add	sp, #28
 80106e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80106e4:	2000299c 	mulcs	r0, ip, r9

080106e8 <non-virtual thunk to StoreArtNet::SaveNetSwitch(unsigned char)>:
 80106e8:	f1a0 0004 	sub.w	r0, r0, #4
 80106ec:	f7ff bfe8 	b.w	80106c0 <StoreArtNet::SaveNetSwitch(unsigned char)>

080106f0 <StoreArtNet::SaveSubnetSwitch(unsigned char)>:
 80106f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80106f2:	2308      	movs	r3, #8
 80106f4:	2200      	movs	r2, #0
 80106f6:	f88d 1017 	strb.w	r1, [sp, #23]
 80106fa:	2101      	movs	r1, #1
 80106fc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010700:	4805      	ldr	r0, [pc, #20]	; (8010718 <StoreArtNet::SaveSubnetSwitch(unsigned char)+0x28>)
 8010702:	9100      	str	r1, [sp, #0]
 8010704:	2205      	movs	r2, #5
 8010706:	6800      	ldr	r0, [r0, #0]
 8010708:	f10d 0317 	add.w	r3, sp, #23
 801070c:	f7ff fea8 	bl	8010460 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010710:	b007      	add	sp, #28
 8010712:	f85d fb04 	ldr.w	pc, [sp], #4
 8010716:	bf00      	nop
 8010718:	2000299c 	mulcs	r0, ip, r9

0801071c <non-virtual thunk to StoreArtNet::SaveSubnetSwitch(unsigned char)>:
 801071c:	f1a0 0004 	sub.w	r0, r0, #4
 8010720:	f7ff bfe6 	b.w	80106f0 <StoreArtNet::SaveSubnetSwitch(unsigned char)>

08010724 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 8010724:	b530      	push	{r4, r5, lr}
 8010726:	b087      	sub	sp, #28
 8010728:	460c      	mov	r4, r1
 801072a:	4d0f      	ldr	r5, [pc, #60]	; (8010768 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x44>)
 801072c:	9205      	str	r2, [sp, #20]
 801072e:	b951      	cbnz	r1, 8010746 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x22>
 8010730:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010734:	9102      	str	r1, [sp, #8]
 8010736:	2101      	movs	r1, #1
 8010738:	226b      	movs	r2, #107	; 0x6b
 801073a:	e9cd 1300 	strd	r1, r3, [sp]
 801073e:	6828      	ldr	r0, [r5, #0]
 8010740:	ab05      	add	r3, sp, #20
 8010742:	f7ff fe8d 	bl	8010460 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010746:	2300      	movs	r3, #0
 8010748:	9302      	str	r3, [sp, #8]
 801074a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801074e:	2101      	movs	r1, #1
 8010750:	40a3      	lsls	r3, r4
 8010752:	9301      	str	r3, [sp, #4]
 8010754:	6828      	ldr	r0, [r5, #0]
 8010756:	9100      	str	r1, [sp, #0]
 8010758:	ab05      	add	r3, sp, #20
 801075a:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 801075e:	f7ff fe7f 	bl	8010460 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010762:	b007      	add	sp, #28
 8010764:	bd30      	pop	{r4, r5, pc}
 8010766:	bf00      	nop
 8010768:	2000299c 	mulcs	r0, ip, r9

0801076c <non-virtual thunk to StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 801076c:	f1a0 0004 	sub.w	r0, r0, #4
 8010770:	f7ff bfd8 	b.w	8010724 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>

08010774 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 8010774:	b530      	push	{r4, r5, lr}
 8010776:	b087      	sub	sp, #28
 8010778:	460c      	mov	r4, r1
 801077a:	4d0f      	ldr	r5, [pc, #60]	; (80107b8 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x44>)
 801077c:	9205      	str	r2, [sp, #20]
 801077e:	b951      	cbnz	r1, 8010796 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x22>
 8010780:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010784:	9102      	str	r1, [sp, #8]
 8010786:	2101      	movs	r1, #1
 8010788:	2270      	movs	r2, #112	; 0x70
 801078a:	e9cd 1300 	strd	r1, r3, [sp]
 801078e:	6828      	ldr	r0, [r5, #0]
 8010790:	ab05      	add	r3, sp, #20
 8010792:	f7ff fe65 	bl	8010460 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010796:	2300      	movs	r3, #0
 8010798:	9302      	str	r3, [sp, #8]
 801079a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801079e:	2101      	movs	r1, #1
 80107a0:	40a3      	lsls	r3, r4
 80107a2:	9301      	str	r3, [sp, #4]
 80107a4:	6828      	ldr	r0, [r5, #0]
 80107a6:	9100      	str	r1, [sp, #0]
 80107a8:	ab05      	add	r3, sp, #20
 80107aa:	f104 0271 	add.w	r2, r4, #113	; 0x71
 80107ae:	f7ff fe57 	bl	8010460 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80107b2:	b007      	add	sp, #28
 80107b4:	bd30      	pop	{r4, r5, pc}
 80107b6:	bf00      	nop
 80107b8:	2000299c 	mulcs	r0, ip, r9

080107bc <non-virtual thunk to StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 80107bc:	f1a0 0004 	sub.w	r0, r0, #4
 80107c0:	f7ff bfd8 	b.w	8010774 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>

080107c4 <StoreArtNet::~StoreArtNet()>:
 80107c4:	b510      	push	{r4, lr}
 80107c6:	4604      	mov	r4, r0
 80107c8:	f003 ffc8 	bl	801475c <operator delete(void*)>
 80107cc:	4620      	mov	r0, r4
 80107ce:	bd10      	pop	{r4, pc}

080107d0 <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 80107d0:	f1a0 0004 	sub.w	r0, r0, #4
 80107d4:	e7f6      	b.n	80107c4 <StoreArtNet::~StoreArtNet()>
	...

080107d8 <StoreArtNet::Copy(artnetparams::Params*)>:
 80107d8:	2300      	movs	r3, #0
 80107da:	b507      	push	{r0, r1, r2, lr}
 80107dc:	4805      	ldr	r0, [pc, #20]	; (80107f4 <StoreArtNet::Copy(artnetparams::Params*)+0x1c>)
 80107de:	9300      	str	r3, [sp, #0]
 80107e0:	460a      	mov	r2, r1
 80107e2:	2387      	movs	r3, #135	; 0x87
 80107e4:	2101      	movs	r1, #1
 80107e6:	6800      	ldr	r0, [r0, #0]
 80107e8:	f7ff fe7a 	bl	80104e0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 80107ec:	b003      	add	sp, #12
 80107ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80107f2:	bf00      	nop
 80107f4:	2000299c 	mulcs	r0, ip, r9

080107f8 <StoreArtNet::StoreArtNet()>:
 80107f8:	4a04      	ldr	r2, [pc, #16]	; (801080c <StoreArtNet::StoreArtNet()+0x14>)
 80107fa:	f102 0108 	add.w	r1, r2, #8
 80107fe:	323c      	adds	r2, #60	; 0x3c
 8010800:	6042      	str	r2, [r0, #4]
 8010802:	4a03      	ldr	r2, [pc, #12]	; (8010810 <StoreArtNet::StoreArtNet()+0x18>)
 8010804:	6001      	str	r1, [r0, #0]
 8010806:	6010      	str	r0, [r2, #0]
 8010808:	4770      	bx	lr
 801080a:	bf00      	nop
 801080c:	08018328 	stmdaeq	r1, {r3, r5, r8, r9, pc}
 8010810:	200029a4 	andcs	r2, r0, r4, lsr #19

08010814 <StoreDisplayUdf::~StoreDisplayUdf()>:
 8010814:	4770      	bx	lr
	...

08010818 <StoreDisplayUdf::Copy(displayudfparams::Params*)>:
 8010818:	2300      	movs	r3, #0
 801081a:	b507      	push	{r0, r1, r2, lr}
 801081c:	4805      	ldr	r0, [pc, #20]	; (8010834 <StoreDisplayUdf::Copy(displayudfparams::Params*)+0x1c>)
 801081e:	9300      	str	r3, [sp, #0]
 8010820:	460a      	mov	r2, r1
 8010822:	2322      	movs	r3, #34	; 0x22
 8010824:	210f      	movs	r1, #15
 8010826:	6800      	ldr	r0, [r0, #0]
 8010828:	f7ff fe5a 	bl	80104e0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 801082c:	b003      	add	sp, #12
 801082e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010832:	bf00      	nop
 8010834:	2000299c 	mulcs	r0, ip, r9

08010838 <StoreDisplayUdf::Update(displayudfparams::Params const*)>:
 8010838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801083a:	2200      	movs	r2, #0
 801083c:	460b      	mov	r3, r1
 801083e:	2122      	movs	r1, #34	; 0x22
 8010840:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8010844:	4804      	ldr	r0, [pc, #16]	; (8010858 <StoreDisplayUdf::Update(displayudfparams::Params const*)+0x20>)
 8010846:	9100      	str	r1, [sp, #0]
 8010848:	6800      	ldr	r0, [r0, #0]
 801084a:	210f      	movs	r1, #15
 801084c:	f7ff fe08 	bl	8010460 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010850:	b005      	add	sp, #20
 8010852:	f85d fb04 	ldr.w	pc, [sp], #4
 8010856:	bf00      	nop
 8010858:	2000299c 	mulcs	r0, ip, r9

0801085c <StoreDisplayUdf::~StoreDisplayUdf()>:
 801085c:	b510      	push	{r4, lr}
 801085e:	4604      	mov	r4, r0
 8010860:	f003 ff7c 	bl	801475c <operator delete(void*)>
 8010864:	4620      	mov	r0, r4
 8010866:	bd10      	pop	{r4, pc}

08010868 <StoreDisplayUdf::StoreDisplayUdf()>:
 8010868:	4a02      	ldr	r2, [pc, #8]	; (8010874 <StoreDisplayUdf::StoreDisplayUdf()+0xc>)
 801086a:	6002      	str	r2, [r0, #0]
 801086c:	4a02      	ldr	r2, [pc, #8]	; (8010878 <StoreDisplayUdf::StoreDisplayUdf()+0x10>)
 801086e:	6010      	str	r0, [r2, #0]
 8010870:	4770      	bx	lr
 8010872:	bf00      	nop
 8010874:	08018390 	stmdaeq	r1, {r4, r7, r8, r9, pc}
 8010878:	200029a8 	andcs	r2, r0, r8, lsr #19

0801087c <StoreNetwork::~StoreNetwork()>:
 801087c:	4770      	bx	lr

0801087e <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 801087e:	3804      	subs	r0, #4
 8010880:	4770      	bx	lr
	...

08010884 <StoreNetwork::Update(TNetworkParams const*)>:
 8010884:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010886:	2200      	movs	r2, #0
 8010888:	460b      	mov	r3, r1
 801088a:	215e      	movs	r1, #94	; 0x5e
 801088c:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8010890:	4804      	ldr	r0, [pc, #16]	; (80108a4 <StoreNetwork::Update(TNetworkParams const*)+0x20>)
 8010892:	9100      	str	r1, [sp, #0]
 8010894:	6800      	ldr	r0, [r0, #0]
 8010896:	4611      	mov	r1, r2
 8010898:	f7ff fde2 	bl	8010460 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801089c:	b005      	add	sp, #20
 801089e:	f85d fb04 	ldr.w	pc, [sp], #4
 80108a2:	bf00      	nop
 80108a4:	2000299c 	mulcs	r0, ip, r9

080108a8 <StoreNetwork::SaveDhcp(bool)>:
 80108a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80108aa:	2301      	movs	r3, #1
 80108ac:	f88d 1017 	strb.w	r1, [sp, #23]
 80108b0:	2100      	movs	r1, #0
 80108b2:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80108b6:	4805      	ldr	r0, [pc, #20]	; (80108cc <StoreNetwork::SaveDhcp(bool)+0x24>)
 80108b8:	9300      	str	r3, [sp, #0]
 80108ba:	2214      	movs	r2, #20
 80108bc:	6800      	ldr	r0, [r0, #0]
 80108be:	f10d 0317 	add.w	r3, sp, #23
 80108c2:	f7ff fdcd 	bl	8010460 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80108c6:	b007      	add	sp, #28
 80108c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80108cc:	2000299c 	mulcs	r0, ip, r9

080108d0 <non-virtual thunk to StoreNetwork::SaveDhcp(bool)>:
 80108d0:	f1a0 0004 	sub.w	r0, r0, #4
 80108d4:	e7e8      	b.n	80108a8 <StoreNetwork::SaveDhcp(bool)>
 80108d6:	bf00      	nop

080108d8 <StoreNetwork::SaveGatewayIp(unsigned int)>:
 80108d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80108da:	2308      	movs	r3, #8
 80108dc:	9105      	str	r1, [sp, #20]
 80108de:	2100      	movs	r1, #0
 80108e0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80108e4:	2304      	movs	r3, #4
 80108e6:	4805      	ldr	r0, [pc, #20]	; (80108fc <StoreNetwork::SaveGatewayIp(unsigned int)+0x24>)
 80108e8:	9300      	str	r3, [sp, #0]
 80108ea:	220c      	movs	r2, #12
 80108ec:	6800      	ldr	r0, [r0, #0]
 80108ee:	ab05      	add	r3, sp, #20
 80108f0:	f7ff fdb6 	bl	8010460 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80108f4:	b007      	add	sp, #28
 80108f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80108fa:	bf00      	nop
 80108fc:	2000299c 	mulcs	r0, ip, r9

08010900 <non-virtual thunk to StoreNetwork::SaveGatewayIp(unsigned int)>:
 8010900:	f1a0 0004 	sub.w	r0, r0, #4
 8010904:	e7e8      	b.n	80108d8 <StoreNetwork::SaveGatewayIp(unsigned int)>
 8010906:	bf00      	nop

08010908 <StoreNetwork::SaveNetMask(unsigned int)>:
 8010908:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801090a:	2304      	movs	r3, #4
 801090c:	9105      	str	r1, [sp, #20]
 801090e:	2100      	movs	r1, #0
 8010910:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8010914:	4804      	ldr	r0, [pc, #16]	; (8010928 <StoreNetwork::SaveNetMask(unsigned int)+0x20>)
 8010916:	9300      	str	r3, [sp, #0]
 8010918:	2208      	movs	r2, #8
 801091a:	6800      	ldr	r0, [r0, #0]
 801091c:	ab05      	add	r3, sp, #20
 801091e:	f7ff fd9f 	bl	8010460 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010922:	b007      	add	sp, #28
 8010924:	f85d fb04 	ldr.w	pc, [sp], #4
 8010928:	2000299c 	mulcs	r0, ip, r9

0801092c <non-virtual thunk to StoreNetwork::SaveNetMask(unsigned int)>:
 801092c:	f1a0 0004 	sub.w	r0, r0, #4
 8010930:	e7ea      	b.n	8010908 <StoreNetwork::SaveNetMask(unsigned int)>
 8010932:	bf00      	nop

08010934 <StoreNetwork::SaveIp(unsigned int)>:
 8010934:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010936:	2302      	movs	r3, #2
 8010938:	9105      	str	r1, [sp, #20]
 801093a:	2100      	movs	r1, #0
 801093c:	2204      	movs	r2, #4
 801093e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8010942:	4804      	ldr	r0, [pc, #16]	; (8010954 <StoreNetwork::SaveIp(unsigned int)+0x20>)
 8010944:	9200      	str	r2, [sp, #0]
 8010946:	6800      	ldr	r0, [r0, #0]
 8010948:	ab05      	add	r3, sp, #20
 801094a:	f7ff fd89 	bl	8010460 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801094e:	b007      	add	sp, #28
 8010950:	f85d fb04 	ldr.w	pc, [sp], #4
 8010954:	2000299c 	mulcs	r0, ip, r9

08010958 <non-virtual thunk to StoreNetwork::SaveIp(unsigned int)>:
 8010958:	f1a0 0004 	sub.w	r0, r0, #4
 801095c:	e7ea      	b.n	8010934 <StoreNetwork::SaveIp(unsigned int)>
 801095e:	bf00      	nop

08010960 <StoreNetwork::SaveHostName(char const*, unsigned int)>:
 8010960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010962:	460b      	mov	r3, r1
 8010964:	2020      	movs	r0, #32
 8010966:	2100      	movs	r1, #0
 8010968:	2a40      	cmp	r2, #64	; 0x40
 801096a:	bf28      	it	cs
 801096c:	2240      	movcs	r2, #64	; 0x40
 801096e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8010972:	4804      	ldr	r0, [pc, #16]	; (8010984 <StoreNetwork::SaveHostName(char const*, unsigned int)+0x24>)
 8010974:	9200      	str	r2, [sp, #0]
 8010976:	6800      	ldr	r0, [r0, #0]
 8010978:	2215      	movs	r2, #21
 801097a:	f7ff fd71 	bl	8010460 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801097e:	b005      	add	sp, #20
 8010980:	f85d fb04 	ldr.w	pc, [sp], #4
 8010984:	2000299c 	mulcs	r0, ip, r9

08010988 <non-virtual thunk to StoreNetwork::SaveHostName(char const*, unsigned int)>:
 8010988:	f1a0 0004 	sub.w	r0, r0, #4
 801098c:	e7e8      	b.n	8010960 <StoreNetwork::SaveHostName(char const*, unsigned int)>
 801098e:	bf00      	nop

08010990 <StoreNetwork::~StoreNetwork()>:
 8010990:	b510      	push	{r4, lr}
 8010992:	4604      	mov	r4, r0
 8010994:	f003 fee2 	bl	801475c <operator delete(void*)>
 8010998:	4620      	mov	r0, r4
 801099a:	bd10      	pop	{r4, pc}

0801099c <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 801099c:	f1a0 0004 	sub.w	r0, r0, #4
 80109a0:	e7f6      	b.n	8010990 <StoreNetwork::~StoreNetwork()>
	...

080109a4 <StoreNetwork::Copy(TNetworkParams*)>:
 80109a4:	b507      	push	{r0, r1, r2, lr}
 80109a6:	460a      	mov	r2, r1
 80109a8:	2100      	movs	r1, #0
 80109aa:	4804      	ldr	r0, [pc, #16]	; (80109bc <StoreNetwork::Copy(TNetworkParams*)+0x18>)
 80109ac:	9100      	str	r1, [sp, #0]
 80109ae:	235e      	movs	r3, #94	; 0x5e
 80109b0:	6800      	ldr	r0, [r0, #0]
 80109b2:	f7ff fd95 	bl	80104e0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 80109b6:	b003      	add	sp, #12
 80109b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80109bc:	2000299c 	mulcs	r0, ip, r9

080109c0 <StoreNetwork::StoreNetwork()>:
 80109c0:	4a03      	ldr	r2, [pc, #12]	; (80109d0 <StoreNetwork::StoreNetwork()+0x10>)
 80109c2:	6002      	str	r2, [r0, #0]
 80109c4:	322c      	adds	r2, #44	; 0x2c
 80109c6:	6042      	str	r2, [r0, #4]
 80109c8:	4a02      	ldr	r2, [pc, #8]	; (80109d4 <StoreNetwork::StoreNetwork()+0x14>)
 80109ca:	6010      	str	r0, [r2, #0]
 80109cc:	4770      	bx	lr
 80109ce:	bf00      	nop
 80109d0:	080183a8 	stmdaeq	r1, {r3, r5, r7, r8, r9, pc}
 80109d4:	200029ac 	andcs	r2, r0, ip, lsr #19

080109d8 <StoreRemoteConfig::~StoreRemoteConfig()>:
 80109d8:	4770      	bx	lr
	...

080109dc <StoreRemoteConfig::Copy(TRemoteConfigParams*)>:
 80109dc:	2300      	movs	r3, #0
 80109de:	b507      	push	{r0, r1, r2, lr}
 80109e0:	4805      	ldr	r0, [pc, #20]	; (80109f8 <StoreRemoteConfig::Copy(TRemoteConfigParams*)+0x1c>)
 80109e2:	9300      	str	r3, [sp, #0]
 80109e4:	460a      	mov	r2, r1
 80109e6:	2320      	movs	r3, #32
 80109e8:	210c      	movs	r1, #12
 80109ea:	6800      	ldr	r0, [r0, #0]
 80109ec:	f7ff fd78 	bl	80104e0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 80109f0:	b003      	add	sp, #12
 80109f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80109f6:	bf00      	nop
 80109f8:	2000299c 	mulcs	r0, ip, r9

080109fc <StoreRemoteConfig::Update(TRemoteConfigParams const*)>:
 80109fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80109fe:	2200      	movs	r2, #0
 8010a00:	460b      	mov	r3, r1
 8010a02:	2120      	movs	r1, #32
 8010a04:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8010a08:	4804      	ldr	r0, [pc, #16]	; (8010a1c <StoreRemoteConfig::Update(TRemoteConfigParams const*)+0x20>)
 8010a0a:	9100      	str	r1, [sp, #0]
 8010a0c:	6800      	ldr	r0, [r0, #0]
 8010a0e:	210c      	movs	r1, #12
 8010a10:	f7ff fd26 	bl	8010460 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010a14:	b005      	add	sp, #20
 8010a16:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a1a:	bf00      	nop
 8010a1c:	2000299c 	mulcs	r0, ip, r9

08010a20 <StoreRemoteConfig::~StoreRemoteConfig()>:
 8010a20:	b510      	push	{r4, lr}
 8010a22:	4604      	mov	r4, r0
 8010a24:	f003 fe9a 	bl	801475c <operator delete(void*)>
 8010a28:	4620      	mov	r0, r4
 8010a2a:	bd10      	pop	{r4, pc}

08010a2c <StoreRemoteConfig::StoreRemoteConfig()>:
 8010a2c:	4a02      	ldr	r2, [pc, #8]	; (8010a38 <StoreRemoteConfig::StoreRemoteConfig()+0xc>)
 8010a2e:	6002      	str	r2, [r0, #0]
 8010a30:	4a02      	ldr	r2, [pc, #8]	; (8010a3c <StoreRemoteConfig::StoreRemoteConfig()+0x10>)
 8010a32:	6010      	str	r0, [r2, #0]
 8010a34:	4770      	bx	lr
 8010a36:	bf00      	nop
 8010a38:	080183f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a3c:	200029b0 			; <UNDEFINED> instruction: 0x200029b0

08010a40 <StoreWS28xxDmx::~StoreWS28xxDmx()>:
 8010a40:	4770      	bx	lr

08010a42 <non-virtual thunk to StoreWS28xxDmx::~StoreWS28xxDmx()>:
 8010a42:	3804      	subs	r0, #4
 8010a44:	4770      	bx	lr
	...

08010a48 <StoreWS28xxDmx::Update(TWS28xxDmxParams const*)>:
 8010a48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	460b      	mov	r3, r1
 8010a4e:	2127      	movs	r1, #39	; 0x27
 8010a50:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8010a54:	4804      	ldr	r0, [pc, #16]	; (8010a68 <StoreWS28xxDmx::Update(TWS28xxDmxParams const*)+0x20>)
 8010a56:	9100      	str	r1, [sp, #0]
 8010a58:	6800      	ldr	r0, [r0, #0]
 8010a5a:	2103      	movs	r1, #3
 8010a5c:	f7ff fd00 	bl	8010460 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010a60:	b005      	add	sp, #20
 8010a62:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a66:	bf00      	nop
 8010a68:	2000299c 	mulcs	r0, ip, r9

08010a6c <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>:
 8010a6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010a6e:	2304      	movs	r3, #4
 8010a70:	2200      	movs	r2, #0
 8010a72:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010a76:	2302      	movs	r3, #2
 8010a78:	4806      	ldr	r0, [pc, #24]	; (8010a94 <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)+0x28>)
 8010a7a:	9300      	str	r3, [sp, #0]
 8010a7c:	f8ad 1016 	strh.w	r1, [sp, #22]
 8010a80:	2207      	movs	r2, #7
 8010a82:	2103      	movs	r1, #3
 8010a84:	6800      	ldr	r0, [r0, #0]
 8010a86:	f10d 0316 	add.w	r3, sp, #22
 8010a8a:	f7ff fce9 	bl	8010460 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010a8e:	b007      	add	sp, #28
 8010a90:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a94:	2000299c 	mulcs	r0, ip, r9

08010a98 <non-virtual thunk to StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>:
 8010a98:	f1a0 0004 	sub.w	r0, r0, #4
 8010a9c:	e7e6      	b.n	8010a6c <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>
 8010a9e:	bf00      	nop

08010aa0 <StoreWS28xxDmx::SaveTestPattern(unsigned char)>:
 8010aa0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010aa2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010aac:	2301      	movs	r3, #1
 8010aae:	4807      	ldr	r0, [pc, #28]	; (8010acc <StoreWS28xxDmx::SaveTestPattern(unsigned char)+0x2c>)
 8010ab0:	9300      	str	r3, [sp, #0]
 8010ab2:	f88d 1017 	strb.w	r1, [sp, #23]
 8010ab6:	2226      	movs	r2, #38	; 0x26
 8010ab8:	2103      	movs	r1, #3
 8010aba:	6800      	ldr	r0, [r0, #0]
 8010abc:	f10d 0317 	add.w	r3, sp, #23
 8010ac0:	f7ff fcce 	bl	8010460 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010ac4:	b007      	add	sp, #28
 8010ac6:	f85d fb04 	ldr.w	pc, [sp], #4
 8010aca:	bf00      	nop
 8010acc:	2000299c 	mulcs	r0, ip, r9

08010ad0 <non-virtual thunk to StoreWS28xxDmx::SaveTestPattern(unsigned char)>:
 8010ad0:	f1a0 0004 	sub.w	r0, r0, #4
 8010ad4:	e7e4      	b.n	8010aa0 <StoreWS28xxDmx::SaveTestPattern(unsigned char)>
 8010ad6:	bf00      	nop

08010ad8 <StoreWS28xxDmx::SaveMap(unsigned char)>:
 8010ad8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010ada:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010ade:	2200      	movs	r2, #0
 8010ae0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010ae4:	2301      	movs	r3, #1
 8010ae6:	4807      	ldr	r0, [pc, #28]	; (8010b04 <StoreWS28xxDmx::SaveMap(unsigned char)+0x2c>)
 8010ae8:	9300      	str	r3, [sp, #0]
 8010aea:	f88d 1017 	strb.w	r1, [sp, #23]
 8010aee:	2213      	movs	r2, #19
 8010af0:	2103      	movs	r1, #3
 8010af2:	6800      	ldr	r0, [r0, #0]
 8010af4:	f10d 0317 	add.w	r3, sp, #23
 8010af8:	f7ff fcb2 	bl	8010460 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010afc:	b007      	add	sp, #28
 8010afe:	f85d fb04 	ldr.w	pc, [sp], #4
 8010b02:	bf00      	nop
 8010b04:	2000299c 	mulcs	r0, ip, r9

08010b08 <non-virtual thunk to StoreWS28xxDmx::SaveMap(unsigned char)>:
 8010b08:	f1a0 0004 	sub.w	r0, r0, #4
 8010b0c:	e7e4      	b.n	8010ad8 <StoreWS28xxDmx::SaveMap(unsigned char)>
 8010b0e:	bf00      	nop

08010b10 <StoreWS28xxDmx::SaveGroupingCount(unsigned short)>:
 8010b10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010b12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010b16:	2200      	movs	r2, #0
 8010b18:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010b1c:	2302      	movs	r3, #2
 8010b1e:	4807      	ldr	r0, [pc, #28]	; (8010b3c <StoreWS28xxDmx::SaveGroupingCount(unsigned short)+0x2c>)
 8010b20:	9300      	str	r3, [sp, #0]
 8010b22:	f8ad 1016 	strh.w	r1, [sp, #22]
 8010b26:	2211      	movs	r2, #17
 8010b28:	2103      	movs	r1, #3
 8010b2a:	6800      	ldr	r0, [r0, #0]
 8010b2c:	f10d 0316 	add.w	r3, sp, #22
 8010b30:	f7ff fc96 	bl	8010460 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010b34:	b007      	add	sp, #28
 8010b36:	f85d fb04 	ldr.w	pc, [sp], #4
 8010b3a:	bf00      	nop
 8010b3c:	2000299c 	mulcs	r0, ip, r9

08010b40 <non-virtual thunk to StoreWS28xxDmx::SaveGroupingCount(unsigned short)>:
 8010b40:	f1a0 0004 	sub.w	r0, r0, #4
 8010b44:	e7e4      	b.n	8010b10 <StoreWS28xxDmx::SaveGroupingCount(unsigned short)>
 8010b46:	bf00      	nop

08010b48 <StoreWS28xxDmx::SaveCount(unsigned short)>:
 8010b48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010b4a:	2302      	movs	r3, #2
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010b52:	4807      	ldr	r0, [pc, #28]	; (8010b70 <StoreWS28xxDmx::SaveCount(unsigned short)+0x28>)
 8010b54:	9300      	str	r3, [sp, #0]
 8010b56:	f8ad 1016 	strh.w	r1, [sp, #22]
 8010b5a:	2205      	movs	r2, #5
 8010b5c:	2103      	movs	r1, #3
 8010b5e:	6800      	ldr	r0, [r0, #0]
 8010b60:	f10d 0316 	add.w	r3, sp, #22
 8010b64:	f7ff fc7c 	bl	8010460 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010b68:	b007      	add	sp, #28
 8010b6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8010b6e:	bf00      	nop
 8010b70:	2000299c 	mulcs	r0, ip, r9

08010b74 <non-virtual thunk to StoreWS28xxDmx::SaveCount(unsigned short)>:
 8010b74:	f1a0 0004 	sub.w	r0, r0, #4
 8010b78:	e7e6      	b.n	8010b48 <StoreWS28xxDmx::SaveCount(unsigned short)>
 8010b7a:	bf00      	nop

08010b7c <StoreWS28xxDmx::SaveType(unsigned char)>:
 8010b7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010b7e:	2301      	movs	r3, #1
 8010b80:	2200      	movs	r2, #0
 8010b82:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010b86:	4807      	ldr	r0, [pc, #28]	; (8010ba4 <StoreWS28xxDmx::SaveType(unsigned char)+0x28>)
 8010b88:	9300      	str	r3, [sp, #0]
 8010b8a:	f88d 1017 	strb.w	r1, [sp, #23]
 8010b8e:	2204      	movs	r2, #4
 8010b90:	2103      	movs	r1, #3
 8010b92:	6800      	ldr	r0, [r0, #0]
 8010b94:	f10d 0317 	add.w	r3, sp, #23
 8010b98:	f7ff fc62 	bl	8010460 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010b9c:	b007      	add	sp, #28
 8010b9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010ba2:	bf00      	nop
 8010ba4:	2000299c 	mulcs	r0, ip, r9

08010ba8 <non-virtual thunk to StoreWS28xxDmx::SaveType(unsigned char)>:
 8010ba8:	f1a0 0004 	sub.w	r0, r0, #4
 8010bac:	e7e6      	b.n	8010b7c <StoreWS28xxDmx::SaveType(unsigned char)>
 8010bae:	bf00      	nop

08010bb0 <StoreWS28xxDmx::~StoreWS28xxDmx()>:
 8010bb0:	b510      	push	{r4, lr}
 8010bb2:	4604      	mov	r4, r0
 8010bb4:	f003 fdd2 	bl	801475c <operator delete(void*)>
 8010bb8:	4620      	mov	r0, r4
 8010bba:	bd10      	pop	{r4, pc}

08010bbc <non-virtual thunk to StoreWS28xxDmx::~StoreWS28xxDmx()>:
 8010bbc:	f1a0 0004 	sub.w	r0, r0, #4
 8010bc0:	e7f6      	b.n	8010bb0 <StoreWS28xxDmx::~StoreWS28xxDmx()>
	...

08010bc4 <StoreWS28xxDmx::Copy(TWS28xxDmxParams*)>:
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	b507      	push	{r0, r1, r2, lr}
 8010bc8:	4805      	ldr	r0, [pc, #20]	; (8010be0 <StoreWS28xxDmx::Copy(TWS28xxDmxParams*)+0x1c>)
 8010bca:	9300      	str	r3, [sp, #0]
 8010bcc:	460a      	mov	r2, r1
 8010bce:	2327      	movs	r3, #39	; 0x27
 8010bd0:	2103      	movs	r1, #3
 8010bd2:	6800      	ldr	r0, [r0, #0]
 8010bd4:	f7ff fc84 	bl	80104e0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 8010bd8:	b003      	add	sp, #12
 8010bda:	f85d fb04 	ldr.w	pc, [sp], #4
 8010bde:	bf00      	nop
 8010be0:	2000299c 	mulcs	r0, ip, r9

08010be4 <StoreWS28xxDmx::StoreWS28xxDmx()>:
 8010be4:	4a03      	ldr	r2, [pc, #12]	; (8010bf4 <StoreWS28xxDmx::StoreWS28xxDmx()+0x10>)
 8010be6:	6002      	str	r2, [r0, #0]
 8010be8:	3230      	adds	r2, #48	; 0x30
 8010bea:	6042      	str	r2, [r0, #4]
 8010bec:	4a02      	ldr	r2, [pc, #8]	; (8010bf8 <StoreWS28xxDmx::StoreWS28xxDmx()+0x14>)
 8010bee:	6010      	str	r0, [r2, #0]
 8010bf0:	4770      	bx	lr
 8010bf2:	bf00      	nop
 8010bf4:	08018410 	stmdaeq	r1, {r4, sl, pc}
 8010bf8:	200029b4 			; <UNDEFINED> instruction: 0x200029b4

08010bfc <FlashRom::FlashRom()>:
 8010bfc:	4b07      	ldr	r3, [pc, #28]	; (8010c1c <FlashRom::FlashRom()+0x20>)
 8010bfe:	b510      	push	{r4, lr}
 8010c00:	6018      	str	r0, [r3, #0]
 8010c02:	2301      	movs	r3, #1
 8010c04:	4604      	mov	r4, r0
 8010c06:	7003      	strb	r3, [r0, #0]
 8010c08:	4b05      	ldr	r3, [pc, #20]	; (8010c20 <FlashRom::FlashRom()+0x24>)
 8010c0a:	4906      	ldr	r1, [pc, #24]	; (8010c24 <FlashRom::FlashRom()+0x28>)
 8010c0c:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8010c10:	4805      	ldr	r0, [pc, #20]	; (8010c28 <FlashRom::FlashRom()+0x2c>)
 8010c12:	029a      	lsls	r2, r3, #10
 8010c14:	f7f8 fd2a 	bl	800966c <printf>
 8010c18:	4620      	mov	r0, r4
 8010c1a:	bd10      	pop	{r4, pc}
 8010c1c:	200029b8 			; <UNDEFINED> instruction: 0x200029b8
 8010c20:	1ffff700 	svcne	0x00fff700
 8010c24:	08016c05 	stmdaeq	r1, {r0, r2, sl, fp, sp, lr}
 8010c28:	08018460 	stmdaeq	r1, {r5, r6, sl, pc}

08010c2c <FlashRom::GetSize() const>:
 8010c2c:	4b02      	ldr	r3, [pc, #8]	; (8010c38 <FlashRom::GetSize() const+0xc>)
 8010c2e:	f8b3 00e0 	ldrh.w	r0, [r3, #224]	; 0xe0
 8010c32:	0280      	lsls	r0, r0, #10
 8010c34:	4770      	bx	lr
 8010c36:	bf00      	nop
 8010c38:	1ffff700 	svcne	0x00fff700

08010c3c <FlashRom::GetSectorSize() const>:
 8010c3c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8010c40:	4770      	bx	lr

08010c42 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>:
 8010c42:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8010c46:	441a      	add	r2, r3
 8010c48:	4293      	cmp	r3, r2
 8010c4a:	d004      	beq.n	8010c56 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x14>
 8010c4c:	f851 0b04 	ldr.w	r0, [r1], #4
 8010c50:	f843 0b04 	str.w	r0, [r3], #4
 8010c54:	e7f8      	b.n	8010c48 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x6>
 8010c56:	2200      	movs	r2, #0
 8010c58:	9b00      	ldr	r3, [sp, #0]
 8010c5a:	2001      	movs	r0, #1
 8010c5c:	601a      	str	r2, [r3, #0]
 8010c5e:	4770      	bx	lr

08010c60 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>:
 8010c60:	2000      	movs	r0, #0
 8010c62:	b538      	push	{r3, r4, r5, lr}
 8010c64:	4c47      	ldr	r4, [pc, #284]	; (8010d84 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x124>)
 8010c66:	6018      	str	r0, [r3, #0]
 8010c68:	6823      	ldr	r3, [r4, #0]
 8010c6a:	2b04      	cmp	r3, #4
 8010c6c:	f200 8082 	bhi.w	8010d74 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 8010c70:	e8df f003 	tbb	[pc, r3]
 8010c74:	78452003 	stmdavc	r5, {r0, r1, sp}^
 8010c78:	4b430080 	blmi	90d0e80 <__exidx_end+0x10b7fd0>
 8010c7c:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8010c80:	6019      	str	r1, [r3, #0]
 8010c82:	4b42      	ldr	r3, [pc, #264]	; (8010d8c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 8010c84:	601a      	str	r2, [r3, #0]
 8010c86:	4b42      	ldr	r3, [pc, #264]	; (8010d90 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x130>)
 8010c88:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8010c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010c90:	4b40      	ldr	r3, [pc, #256]	; (8010d94 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8010c92:	d807      	bhi.n	8010ca4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x44>
 8010c94:	2201      	movs	r2, #1
 8010c96:	701a      	strb	r2, [r3, #0]
 8010c98:	f004 f866 	bl	8014d68 <fmc_bank0_unlock>
 8010c9c:	2301      	movs	r3, #1
 8010c9e:	6023      	str	r3, [r4, #0]
 8010ca0:	2000      	movs	r0, #0
 8010ca2:	e026      	b.n	8010cf2 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 8010ca4:	4a3c      	ldr	r2, [pc, #240]	; (8010d98 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x138>)
 8010ca6:	4291      	cmp	r1, r2
 8010ca8:	d3f4      	bcc.n	8010c94 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x34>
 8010caa:	2200      	movs	r2, #0
 8010cac:	701a      	strb	r2, [r3, #0]
 8010cae:	f004 f869 	bl	8014d84 <fmc_bank1_unlock>
 8010cb2:	e7f3      	b.n	8010c9c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 8010cb4:	4d37      	ldr	r5, [pc, #220]	; (8010d94 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8010cb6:	782b      	ldrb	r3, [r5, #0]
 8010cb8:	b15b      	cbz	r3, 8010cd2 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x72>
 8010cba:	f004 f881 	bl	8014dc0 <fmc_bank0_state_get>
 8010cbe:	2801      	cmp	r0, #1
 8010cc0:	d0ee      	beq.n	8010ca0 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x40>
 8010cc2:	7829      	ldrb	r1, [r5, #0]
 8010cc4:	4b35      	ldr	r3, [pc, #212]	; (8010d9c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 8010cc6:	b939      	cbnz	r1, 8010cd8 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x78>
 8010cc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010cca:	f022 0202 	bic.w	r2, r2, #2
 8010cce:	651a      	str	r2, [r3, #80]	; 0x50
 8010cd0:	e006      	b.n	8010ce0 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x80>
 8010cd2:	f004 f889 	bl	8014de8 <fmc_bank1_state_get>
 8010cd6:	e7f2      	b.n	8010cbe <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x5e>
 8010cd8:	691a      	ldr	r2, [r3, #16]
 8010cda:	f022 0202 	bic.w	r2, r2, #2
 8010cde:	611a      	str	r2, [r3, #16]
 8010ce0:	4b2a      	ldr	r3, [pc, #168]	; (8010d8c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	b94b      	cbnz	r3, 8010cfa <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x9a>
 8010ce6:	b129      	cbz	r1, 8010cf4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x94>
 8010ce8:	f004 f85a 	bl	8014da0 <fmc_bank0_lock>
 8010cec:	2300      	movs	r3, #0
 8010cee:	2001      	movs	r0, #1
 8010cf0:	6023      	str	r3, [r4, #0]
 8010cf2:	bd38      	pop	{r3, r4, r5, pc}
 8010cf4:	f004 f85c 	bl	8014db0 <fmc_bank1_lock>
 8010cf8:	e7f8      	b.n	8010cec <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x8c>
 8010cfa:	2302      	movs	r3, #2
 8010cfc:	e7cf      	b.n	8010c9e <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3e>
 8010cfe:	4923      	ldr	r1, [pc, #140]	; (8010d8c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 8010d00:	680b      	ldr	r3, [r1, #0]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d0ca      	beq.n	8010c9c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 8010d06:	4b23      	ldr	r3, [pc, #140]	; (8010d94 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8010d08:	4a1f      	ldr	r2, [pc, #124]	; (8010d88 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x128>)
 8010d0a:	7818      	ldrb	r0, [r3, #0]
 8010d0c:	4b23      	ldr	r3, [pc, #140]	; (8010d9c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 8010d0e:	b190      	cbz	r0, 8010d36 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd6>
 8010d10:	6918      	ldr	r0, [r3, #16]
 8010d12:	f040 0002 	orr.w	r0, r0, #2
 8010d16:	6118      	str	r0, [r3, #16]
 8010d18:	6810      	ldr	r0, [r2, #0]
 8010d1a:	6158      	str	r0, [r3, #20]
 8010d1c:	6918      	ldr	r0, [r3, #16]
 8010d1e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8010d22:	6118      	str	r0, [r3, #16]
 8010d24:	680b      	ldr	r3, [r1, #0]
 8010d26:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8010d2a:	600b      	str	r3, [r1, #0]
 8010d2c:	6813      	ldr	r3, [r2, #0]
 8010d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d32:	6013      	str	r3, [r2, #0]
 8010d34:	e7b2      	b.n	8010c9c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 8010d36:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8010d38:	f040 0002 	orr.w	r0, r0, #2
 8010d3c:	6518      	str	r0, [r3, #80]	; 0x50
 8010d3e:	6810      	ldr	r0, [r2, #0]
 8010d40:	6558      	str	r0, [r3, #84]	; 0x54
 8010d42:	69dd      	ldr	r5, [r3, #28]
 8010d44:	07ad      	lsls	r5, r5, #30
 8010d46:	bf48      	it	mi
 8010d48:	6158      	strmi	r0, [r3, #20]
 8010d4a:	4814      	ldr	r0, [pc, #80]	; (8010d9c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 8010d4c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010d4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d52:	6503      	str	r3, [r0, #80]	; 0x50
 8010d54:	680b      	ldr	r3, [r1, #0]
 8010d56:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8010d5a:	600b      	str	r3, [r1, #0]
 8010d5c:	6813      	ldr	r3, [r2, #0]
 8010d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010d62:	e7e6      	b.n	8010d32 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd2>
 8010d64:	4b0b      	ldr	r3, [pc, #44]	; (8010d94 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8010d66:	781a      	ldrb	r2, [r3, #0]
 8010d68:	4b0c      	ldr	r3, [pc, #48]	; (8010d9c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 8010d6a:	b132      	cbz	r2, 8010d7a <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x11a>
 8010d6c:	691a      	ldr	r2, [r3, #16]
 8010d6e:	f022 0201 	bic.w	r2, r2, #1
 8010d72:	611a      	str	r2, [r3, #16]
 8010d74:	2000      	movs	r0, #0
 8010d76:	6020      	str	r0, [r4, #0]
 8010d78:	e7bb      	b.n	8010cf2 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 8010d7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010d7c:	f022 0201 	bic.w	r2, r2, #1
 8010d80:	651a      	str	r2, [r3, #80]	; 0x50
 8010d82:	e7f7      	b.n	8010d74 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 8010d84:	200029c0 	andcs	r2, r0, r0, asr #19
 8010d88:	200029c4 	andcs	r2, r0, r4, asr #19
 8010d8c:	200029d0 	ldrdcs	r2, [r0], -r0
 8010d90:	1ffff700 	svcne	0x00fff700
 8010d94:	200029cc 	andcs	r2, r0, ip, asr #19
 8010d98:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 8010d9c:	40022000 	andmi	r2, r2, r0

08010da0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>:
 8010da0:	b570      	push	{r4, r5, r6, lr}
 8010da2:	2400      	movs	r4, #0
 8010da4:	9804      	ldr	r0, [sp, #16]
 8010da6:	6004      	str	r4, [r0, #0]
 8010da8:	4c48      	ldr	r4, [pc, #288]	; (8010ecc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x12c>)
 8010daa:	6820      	ldr	r0, [r4, #0]
 8010dac:	2804      	cmp	r0, #4
 8010dae:	d848      	bhi.n	8010e42 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xa2>
 8010db0:	e8df f000 	tbb	[pc, r0]
 8010db4:	22847c03 	addcs	r7, r4, #768	; 0x300
 8010db8:	48450047 	stmdami	r5, {r0, r1, r2, r6}^
 8010dbc:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8010dc0:	6001      	str	r1, [r0, #0]
 8010dc2:	4844      	ldr	r0, [pc, #272]	; (8010ed4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 8010dc4:	6003      	str	r3, [r0, #0]
 8010dc6:	4b44      	ldr	r3, [pc, #272]	; (8010ed8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 8010dc8:	601a      	str	r2, [r3, #0]
 8010dca:	4b44      	ldr	r3, [pc, #272]	; (8010edc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x13c>)
 8010dcc:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8010dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010dd4:	4b42      	ldr	r3, [pc, #264]	; (8010ee0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8010dd6:	d807      	bhi.n	8010de8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x48>
 8010dd8:	2201      	movs	r2, #1
 8010dda:	701a      	strb	r2, [r3, #0]
 8010ddc:	f003 ffc4 	bl	8014d68 <fmc_bank0_unlock>
 8010de0:	2303      	movs	r3, #3
 8010de2:	6023      	str	r3, [r4, #0]
 8010de4:	2000      	movs	r0, #0
 8010de6:	e026      	b.n	8010e36 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 8010de8:	4a3e      	ldr	r2, [pc, #248]	; (8010ee4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x144>)
 8010dea:	4291      	cmp	r1, r2
 8010dec:	d3f4      	bcc.n	8010dd8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x38>
 8010dee:	2200      	movs	r2, #0
 8010df0:	701a      	strb	r2, [r3, #0]
 8010df2:	f003 ffc7 	bl	8014d84 <fmc_bank1_unlock>
 8010df6:	e7f3      	b.n	8010de0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8010df8:	4d39      	ldr	r5, [pc, #228]	; (8010ee0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8010dfa:	782b      	ldrb	r3, [r5, #0]
 8010dfc:	b15b      	cbz	r3, 8010e16 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x76>
 8010dfe:	f003 ffdf 	bl	8014dc0 <fmc_bank0_state_get>
 8010e02:	2801      	cmp	r0, #1
 8010e04:	d0ee      	beq.n	8010de4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x44>
 8010e06:	7829      	ldrb	r1, [r5, #0]
 8010e08:	4b37      	ldr	r3, [pc, #220]	; (8010ee8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 8010e0a:	b939      	cbnz	r1, 8010e1c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x7c>
 8010e0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010e0e:	f022 0201 	bic.w	r2, r2, #1
 8010e12:	651a      	str	r2, [r3, #80]	; 0x50
 8010e14:	e006      	b.n	8010e24 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x84>
 8010e16:	f003 ffe7 	bl	8014de8 <fmc_bank1_state_get>
 8010e1a:	e7f2      	b.n	8010e02 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x62>
 8010e1c:	691a      	ldr	r2, [r3, #16]
 8010e1e:	f022 0201 	bic.w	r2, r2, #1
 8010e22:	611a      	str	r2, [r3, #16]
 8010e24:	4b2c      	ldr	r3, [pc, #176]	; (8010ed8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	b94b      	cbnz	r3, 8010e3e <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x9e>
 8010e2a:	b129      	cbz	r1, 8010e38 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x98>
 8010e2c:	f003 ffb8 	bl	8014da0 <fmc_bank0_lock>
 8010e30:	2300      	movs	r3, #0
 8010e32:	2001      	movs	r0, #1
 8010e34:	6023      	str	r3, [r4, #0]
 8010e36:	bd70      	pop	{r4, r5, r6, pc}
 8010e38:	f003 ffba 	bl	8014db0 <fmc_bank1_lock>
 8010e3c:	e7f8      	b.n	8010e30 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x90>
 8010e3e:	2304      	movs	r3, #4
 8010e40:	e7cf      	b.n	8010de2 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x42>
 8010e42:	4a25      	ldr	r2, [pc, #148]	; (8010ed8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 8010e44:	6813      	ldr	r3, [r2, #0]
 8010e46:	2b03      	cmp	r3, #3
 8010e48:	d91a      	bls.n	8010e80 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xe0>
 8010e4a:	4b25      	ldr	r3, [pc, #148]	; (8010ee0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8010e4c:	7819      	ldrb	r1, [r3, #0]
 8010e4e:	4b26      	ldr	r3, [pc, #152]	; (8010ee8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 8010e50:	b189      	cbz	r1, 8010e76 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xd6>
 8010e52:	6919      	ldr	r1, [r3, #16]
 8010e54:	f041 0101 	orr.w	r1, r1, #1
 8010e58:	6119      	str	r1, [r3, #16]
 8010e5a:	4d1e      	ldr	r5, [pc, #120]	; (8010ed4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 8010e5c:	481c      	ldr	r0, [pc, #112]	; (8010ed0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 8010e5e:	6829      	ldr	r1, [r5, #0]
 8010e60:	6803      	ldr	r3, [r0, #0]
 8010e62:	f851 6b04 	ldr.w	r6, [r1], #4
 8010e66:	f843 6b04 	str.w	r6, [r3], #4
 8010e6a:	6003      	str	r3, [r0, #0]
 8010e6c:	6813      	ldr	r3, [r2, #0]
 8010e6e:	6029      	str	r1, [r5, #0]
 8010e70:	3b04      	subs	r3, #4
 8010e72:	6013      	str	r3, [r2, #0]
 8010e74:	e7b4      	b.n	8010de0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8010e76:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8010e78:	f041 0101 	orr.w	r1, r1, #1
 8010e7c:	6519      	str	r1, [r3, #80]	; 0x50
 8010e7e:	e7ec      	b.n	8010e5a <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xba>
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d0ad      	beq.n	8010de0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8010e84:	4b16      	ldr	r3, [pc, #88]	; (8010ee0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8010e86:	781a      	ldrb	r2, [r3, #0]
 8010e88:	4b17      	ldr	r3, [pc, #92]	; (8010ee8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 8010e8a:	b152      	cbz	r2, 8010ea2 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x102>
 8010e8c:	691a      	ldr	r2, [r3, #16]
 8010e8e:	f042 0201 	orr.w	r2, r2, #1
 8010e92:	611a      	str	r2, [r3, #16]
 8010e94:	4a0f      	ldr	r2, [pc, #60]	; (8010ed4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 8010e96:	4b0e      	ldr	r3, [pc, #56]	; (8010ed0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 8010e98:	6812      	ldr	r2, [r2, #0]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	6812      	ldr	r2, [r2, #0]
 8010e9e:	601a      	str	r2, [r3, #0]
 8010ea0:	e79e      	b.n	8010de0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8010ea2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010ea4:	f042 0201 	orr.w	r2, r2, #1
 8010ea8:	651a      	str	r2, [r3, #80]	; 0x50
 8010eaa:	e7f3      	b.n	8010e94 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xf4>
 8010eac:	4b0c      	ldr	r3, [pc, #48]	; (8010ee0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8010eae:	781a      	ldrb	r2, [r3, #0]
 8010eb0:	4b0d      	ldr	r3, [pc, #52]	; (8010ee8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 8010eb2:	b132      	cbz	r2, 8010ec2 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x122>
 8010eb4:	691a      	ldr	r2, [r3, #16]
 8010eb6:	f022 0202 	bic.w	r2, r2, #2
 8010eba:	611a      	str	r2, [r3, #16]
 8010ebc:	2000      	movs	r0, #0
 8010ebe:	6020      	str	r0, [r4, #0]
 8010ec0:	e7b9      	b.n	8010e36 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 8010ec2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010ec4:	f022 0202 	bic.w	r2, r2, #2
 8010ec8:	651a      	str	r2, [r3, #80]	; 0x50
 8010eca:	e7f7      	b.n	8010ebc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x11c>
 8010ecc:	200029c0 	andcs	r2, r0, r0, asr #19
 8010ed0:	200029bc 			; <UNDEFINED> instruction: 0x200029bc
 8010ed4:	200029c8 	andcs	r2, r0, r8, asr #19
 8010ed8:	200029d0 	ldrdcs	r2, [r0], -r0
 8010edc:	1ffff700 	svcne	0x00fff700
 8010ee0:	200029cc 	andcs	r2, r0, ip, asr #19
 8010ee4:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 8010ee8:	40022000 	andmi	r2, r2, r0

08010eec <net_set_ip>:
 8010eec:	b510      	push	{r4, lr}
 8010eee:	4c05      	ldr	r4, [pc, #20]	; (8010f04 <net_set_ip+0x18>)
 8010ef0:	6020      	str	r0, [r4, #0]
 8010ef2:	4621      	mov	r1, r4
 8010ef4:	4804      	ldr	r0, [pc, #16]	; (8010f08 <net_set_ip+0x1c>)
 8010ef6:	f7f6 f9e9 	bl	80072cc <arp_init>
 8010efa:	4620      	mov	r0, r4
 8010efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f00:	f002 b816 	b.w	8012f30 <ip_set_ip>
 8010f04:	200029d4 	ldrdcs	r2, [r0], -r4
 8010f08:	200029e0 	andcs	r2, r0, r0, ror #19

08010f0c <net_set_gw>:
 8010f0c:	4b02      	ldr	r3, [pc, #8]	; (8010f18 <net_set_gw+0xc>)
 8010f0e:	6098      	str	r0, [r3, #8]
 8010f10:	4618      	mov	r0, r3
 8010f12:	f002 b80d 	b.w	8012f30 <ip_set_ip>
 8010f16:	bf00      	nop
 8010f18:	200029d4 	ldrdcs	r2, [r0], -r4

08010f1c <net_set_dhcp>:
 8010f1c:	b570      	push	{r4, r5, r6, lr}
 8010f1e:	2400      	movs	r4, #0
 8010f20:	4605      	mov	r5, r0
 8010f22:	7014      	strb	r4, [r2, #0]
 8010f24:	4616      	mov	r6, r2
 8010f26:	4810      	ldr	r0, [pc, #64]	; (8010f68 <net_set_dhcp+0x4c>)
 8010f28:	460a      	mov	r2, r1
 8010f2a:	4910      	ldr	r1, [pc, #64]	; (8010f6c <net_set_dhcp+0x50>)
 8010f2c:	f001 fde0 	bl	8012af0 <dhcp_client>
 8010f30:	42a0      	cmp	r0, r4
 8010f32:	da17      	bge.n	8010f64 <net_set_dhcp+0x48>
 8010f34:	480d      	ldr	r0, [pc, #52]	; (8010f6c <net_set_dhcp+0x50>)
 8010f36:	f000 f837 	bl	8010fa8 <rfc3927>
 8010f3a:	7030      	strb	r0, [r6, #0]
 8010f3c:	490b      	ldr	r1, [pc, #44]	; (8010f6c <net_set_dhcp+0x50>)
 8010f3e:	480a      	ldr	r0, [pc, #40]	; (8010f68 <net_set_dhcp+0x4c>)
 8010f40:	f7f6 f9c4 	bl	80072cc <arp_init>
 8010f44:	4809      	ldr	r0, [pc, #36]	; (8010f6c <net_set_dhcp+0x50>)
 8010f46:	f001 fff3 	bl	8012f30 <ip_set_ip>
 8010f4a:	4a08      	ldr	r2, [pc, #32]	; (8010f6c <net_set_dhcp+0x50>)
 8010f4c:	1e6b      	subs	r3, r5, #1
 8010f4e:	350b      	adds	r5, #11
 8010f50:	f812 1b01 	ldrb.w	r1, [r2], #1
 8010f54:	f803 1f01 	strb.w	r1, [r3, #1]!
 8010f58:	42ab      	cmp	r3, r5
 8010f5a:	d1f9      	bne.n	8010f50 <net_set_dhcp+0x34>
 8010f5c:	4b04      	ldr	r3, [pc, #16]	; (8010f70 <net_set_dhcp+0x54>)
 8010f5e:	4620      	mov	r0, r4
 8010f60:	701c      	strb	r4, [r3, #0]
 8010f62:	bd70      	pop	{r4, r5, r6, pc}
 8010f64:	2401      	movs	r4, #1
 8010f66:	e7e9      	b.n	8010f3c <net_set_dhcp+0x20>
 8010f68:	200029e0 	andcs	r2, r0, r0, ror #19
 8010f6c:	200029d4 	ldrdcs	r2, [r0], -r4
 8010f70:	200029e6 	andcs	r2, r0, r6, ror #19

08010f74 <net_dhcp_release>:
 8010f74:	b508      	push	{r3, lr}
 8010f76:	f001 fec3 	bl	8012d00 <dhcp_client_release>
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	4b01      	ldr	r3, [pc, #4]	; (8010f84 <net_dhcp_release+0x10>)
 8010f7e:	701a      	strb	r2, [r3, #0]
 8010f80:	bd08      	pop	{r3, pc}
 8010f82:	bf00      	nop
 8010f84:	200029e6 	andcs	r2, r0, r6, ror #19

08010f88 <net_timers_run>:
 8010f88:	4b05      	ldr	r3, [pc, #20]	; (8010fa0 <net_timers_run+0x18>)
 8010f8a:	4a06      	ldr	r2, [pc, #24]	; (8010fa4 <net_timers_run+0x1c>)
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	6811      	ldr	r1, [r2, #0]
 8010f90:	4299      	cmp	r1, r3
 8010f92:	d803      	bhi.n	8010f9c <net_timers_run+0x14>
 8010f94:	3364      	adds	r3, #100	; 0x64
 8010f96:	6013      	str	r3, [r2, #0]
 8010f98:	f001 bf40 	b.w	8012e1c <igmp_timer>
 8010f9c:	4770      	bx	lr
 8010f9e:	bf00      	nop
 8010fa0:	2000a9dc 	ldrdcs	sl, [r0], -ip
 8010fa4:	200029ec 	andcs	r2, r0, ip, ror #19

08010fa8 <rfc3927>:
 8010fa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fac:	4605      	mov	r5, r0
 8010fae:	26ff      	movs	r6, #255	; 0xff
 8010fb0:	4b18      	ldr	r3, [pc, #96]	; (8011014 <rfc3927+0x6c>)
 8010fb2:	4f19      	ldr	r7, [pc, #100]	; (8011018 <rfc3927+0x70>)
 8010fb4:	791a      	ldrb	r2, [r3, #4]
 8010fb6:	78dc      	ldrb	r4, [r3, #3]
 8010fb8:	f8df 8060 	ldr.w	r8, [pc, #96]	; 801101c <rfc3927+0x74>
 8010fbc:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 8010fc0:	f8d7 9000 	ldr.w	r9, [r7]
 8010fc4:	f8df b058 	ldr.w	fp, [pc, #88]	; 8011020 <rfc3927+0x78>
 8010fc8:	f8df a058 	ldr.w	sl, [pc, #88]	; 8011024 <rfc3927+0x7c>
 8010fcc:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8010fd0:	4659      	mov	r1, fp
 8010fd2:	4620      	mov	r0, r4
 8010fd4:	f001 fc70 	bl	80128b8 <arp_cache_lookup>
 8010fd8:	b938      	cbnz	r0, 8010fea <rfc3927+0x42>
 8010fda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010fde:	2001      	movs	r0, #1
 8010fe0:	602c      	str	r4, [r5, #0]
 8010fe2:	60ac      	str	r4, [r5, #8]
 8010fe4:	606b      	str	r3, [r5, #4]
 8010fe6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fea:	ba24      	rev	r4, r4
 8010fec:	3401      	adds	r4, #1
 8010fee:	3e01      	subs	r6, #1
 8010ff0:	ba24      	rev	r4, r4
 8010ff2:	b2b6      	uxth	r6, r6
 8010ff4:	4554      	cmp	r4, sl
 8010ff6:	bf08      	it	eq
 8010ff8:	4644      	moveq	r4, r8
 8010ffa:	b12e      	cbz	r6, 8011008 <rfc3927+0x60>
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	eba3 0309 	sub.w	r3, r3, r9
 8011002:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8011006:	d3e3      	bcc.n	8010fd0 <rfc3927+0x28>
 8011008:	2000      	movs	r0, #0
 801100a:	e9c5 0001 	strd	r0, r0, [r5, #4]
 801100e:	6028      	str	r0, [r5, #0]
 8011010:	e7e9      	b.n	8010fe6 <rfc3927+0x3e>
 8011012:	bf00      	nop
 8011014:	200029f0 	strdcs	r2, [r0], -r0
 8011018:	2000a9dc 	ldrdcs	sl, [r0], -ip
 801101c:	0100fea9 	smlatbeq	r0, r9, lr, pc	; <UNPREDICTABLE>
 8011020:	200029f8 	strdcs	r2, [r0], -r8
 8011024:	fffefea9 			; <UNDEFINED> instruction: 0xfffefea9

08011028 <_init_tcb>:
 8011028:	b510      	push	{r4, lr}
 801102a:	4603      	mov	r3, r0
 801102c:	2400      	movs	r4, #0
 801102e:	f100 0244 	add.w	r2, r0, #68	; 0x44
 8011032:	4293      	cmp	r3, r2
 8011034:	d10d      	bne.n	8011052 <_init_tcb+0x2a>
 8011036:	4b08      	ldr	r3, [pc, #32]	; (8011058 <_init_tcb+0x30>)
 8011038:	f640 3268 	movw	r2, #2920	; 0xb68
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	8702      	strh	r2, [r0, #56]	; 0x38
 8011040:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011044:	6283      	str	r3, [r0, #40]	; 0x28
 8011046:	6243      	str	r3, [r0, #36]	; 0x24
 8011048:	2301      	movs	r3, #1
 801104a:	8001      	strh	r1, [r0, #0]
 801104c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8011050:	bd10      	pop	{r4, pc}
 8011052:	f803 4b01 	strb.w	r4, [r3], #1
 8011056:	e7ec      	b.n	8011032 <_init_tcb+0xa>
 8011058:	2000a9dc 	ldrdcs	sl, [r0], -ip

0801105c <memcpy.isra.0>:
 801105c:	3801      	subs	r0, #1
 801105e:	440a      	add	r2, r1
 8011060:	4291      	cmp	r1, r2
 8011062:	d100      	bne.n	8011066 <memcpy.isra.0+0xa>
 8011064:	4770      	bx	lr
 8011066:	f811 3b01 	ldrb.w	r3, [r1], #1
 801106a:	f800 3f01 	strb.w	r3, [r0, #1]!
 801106e:	e7f7      	b.n	8011060 <memcpy.isra.0+0x4>

08011070 <_bswap32>:
 8011070:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011072:	2204      	movs	r2, #4
 8011074:	f100 052a 	add.w	r5, r0, #42	; 0x2a
 8011078:	4629      	mov	r1, r5
 801107a:	4604      	mov	r4, r0
 801107c:	eb0d 0002 	add.w	r0, sp, r2
 8011080:	f7ff ffec 	bl	801105c <memcpy.isra.0>
 8011084:	2204      	movs	r2, #4
 8011086:	9b01      	ldr	r3, [sp, #4]
 8011088:	eb0d 0102 	add.w	r1, sp, r2
 801108c:	ba1b      	rev	r3, r3
 801108e:	4628      	mov	r0, r5
 8011090:	9301      	str	r3, [sp, #4]
 8011092:	f7ff ffe3 	bl	801105c <memcpy.isra.0>
 8011096:	2204      	movs	r2, #4
 8011098:	3426      	adds	r4, #38	; 0x26
 801109a:	eb0d 0002 	add.w	r0, sp, r2
 801109e:	4621      	mov	r1, r4
 80110a0:	f7ff ffdc 	bl	801105c <memcpy.isra.0>
 80110a4:	2204      	movs	r2, #4
 80110a6:	9b01      	ldr	r3, [sp, #4]
 80110a8:	4620      	mov	r0, r4
 80110aa:	ba1b      	rev	r3, r3
 80110ac:	eb0d 0102 	add.w	r1, sp, r2
 80110b0:	9301      	str	r3, [sp, #4]
 80110b2:	f7ff ffd3 	bl	801105c <memcpy.isra.0>
 80110b6:	b003      	add	sp, #12
 80110b8:	bd30      	pop	{r4, r5, pc}
	...

080110bc <_tcp_send_package>:
 80110bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80110c0:	7a0b      	ldrb	r3, [r1, #8]
 80110c2:	4605      	mov	r5, r0
 80110c4:	f013 0f02 	tst.w	r3, #2
 80110c8:	bf0c      	ite	eq
 80110ca:	f04f 0905 	moveq.w	r9, #5
 80110ce:	f04f 0906 	movne.w	r9, #6
 80110d2:	f04f 0800 	mov.w	r8, #0
 80110d6:	4c4b      	ldr	r4, [pc, #300]	; (8011204 <_tcp_send_package+0x148>)
 80110d8:	460f      	mov	r7, r1
 80110da:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 80110dc:	f100 0108 	add.w	r1, r0, #8
 80110e0:	2206      	movs	r2, #6
 80110e2:	4620      	mov	r0, r4
 80110e4:	f7ff ffba 	bl	801105c <memcpy.isra.0>
 80110e8:	4a47      	ldr	r2, [pc, #284]	; (8011208 <_tcp_send_package+0x14c>)
 80110ea:	eb06 0689 	add.w	r6, r6, r9, lsl #2
 80110ee:	8813      	ldrh	r3, [r2, #0]
 80110f0:	b2b6      	uxth	r6, r6
 80110f2:	1c59      	adds	r1, r3, #1
 80110f4:	8263      	strh	r3, [r4, #18]
 80110f6:	f105 0a04 	add.w	sl, r5, #4
 80110fa:	f106 0314 	add.w	r3, r6, #20
 80110fe:	ba5b      	rev16	r3, r3
 8011100:	8011      	strh	r1, [r2, #0]
 8011102:	f104 001e 	add.w	r0, r4, #30
 8011106:	2204      	movs	r2, #4
 8011108:	4651      	mov	r1, sl
 801110a:	8223      	strh	r3, [r4, #16]
 801110c:	f7ff ffa6 	bl	801105c <memcpy.isra.0>
 8011110:	2114      	movs	r1, #20
 8011112:	f104 000e 	add.w	r0, r4, #14
 8011116:	f884 8018 	strb.w	r8, [r4, #24]
 801111a:	f884 8019 	strb.w	r8, [r4, #25]
 801111e:	f001 ff10 	bl	8012f42 <net_chksum>
 8011122:	882b      	ldrh	r3, [r5, #0]
 8011124:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8011128:	8463      	strh	r3, [r4, #34]	; 0x22
 801112a:	886b      	ldrh	r3, [r5, #2]
 801112c:	8320      	strh	r0, [r4, #24]
 801112e:	84a3      	strh	r3, [r4, #36]	; 0x24
 8011130:	683b      	ldr	r3, [r7, #0]
 8011132:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
 8011134:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	f884 902e 	strb.w	r9, [r4, #46]	; 0x2e
 801113e:	f8c4 302a 	str.w	r3, [r4, #42]	; 0x2a
 8011142:	7a3b      	ldrb	r3, [r7, #8]
 8011144:	8622      	strh	r2, [r4, #48]	; 0x30
 8011146:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 801114a:	079b      	lsls	r3, r3, #30
 801114c:	bf48      	it	mi
 801114e:	2302      	movmi	r3, #2
 8011150:	8baa      	ldrh	r2, [r5, #28]
 8011152:	bf44      	itt	mi
 8011154:	f884 3036 	strbmi.w	r3, [r4, #54]	; 0x36
 8011158:	2304      	movmi	r3, #4
 801115a:	86a2      	strh	r2, [r4, #52]	; 0x34
 801115c:	bf41      	itttt	mi
 801115e:	f884 3037 	strbmi.w	r3, [r4, #55]	; 0x37
 8011162:	4622      	movmi	r2, r4
 8011164:	f24b 4305 	movwmi	r3, #46085	; 0xb405
 8011168:	f822 3f38 	strhmi.w	r3, [r2, #56]!
 801116c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801116e:	f884 8032 	strb.w	r8, [r4, #50]	; 0x32
 8011172:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
 8011176:	bf58      	it	pl
 8011178:	f104 0236 	addpl.w	r2, r4, #54	; 0x36
 801117c:	2b00      	cmp	r3, #0
 801117e:	d13f      	bne.n	8011200 <_tcp_send_package+0x144>
 8011180:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8011182:	4820      	ldr	r0, [pc, #128]	; (8011204 <_tcp_send_package+0x148>)
 8011184:	ba5b      	rev16	r3, r3
 8011186:	8463      	strh	r3, [r4, #34]	; 0x22
 8011188:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 801118a:	ba5b      	rev16	r3, r3
 801118c:	84a3      	strh	r3, [r4, #36]	; 0x24
 801118e:	f7ff ff6f 	bl	8011070 <_bswap32>
 8011192:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8011194:	a801      	add	r0, sp, #4
 8011196:	ba5b      	rev16	r3, r3
 8011198:	8623      	strh	r3, [r4, #48]	; 0x30
 801119a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801119c:	220c      	movs	r2, #12
 801119e:	ba5b      	rev16	r3, r3
 80111a0:	491a      	ldr	r1, [pc, #104]	; (801120c <_tcp_send_package+0x150>)
 80111a2:	86a3      	strh	r3, [r4, #52]	; 0x34
 80111a4:	f7ff ff5a 	bl	801105c <memcpy.isra.0>
 80111a8:	2204      	movs	r2, #4
 80111aa:	4919      	ldr	r1, [pc, #100]	; (8011210 <_tcp_send_package+0x154>)
 80111ac:	4817      	ldr	r0, [pc, #92]	; (801120c <_tcp_send_package+0x150>)
 80111ae:	f7ff ff55 	bl	801105c <memcpy.isra.0>
 80111b2:	2204      	movs	r2, #4
 80111b4:	4651      	mov	r1, sl
 80111b6:	4817      	ldr	r0, [pc, #92]	; (8011214 <_tcp_send_package+0x158>)
 80111b8:	f7ff ff50 	bl	801105c <memcpy.isra.0>
 80111bc:	2300      	movs	r3, #0
 80111be:	77a3      	strb	r3, [r4, #30]
 80111c0:	2306      	movs	r3, #6
 80111c2:	f106 010c 	add.w	r1, r6, #12
 80111c6:	77e3      	strb	r3, [r4, #31]
 80111c8:	4810      	ldr	r0, [pc, #64]	; (801120c <_tcp_send_package+0x150>)
 80111ca:	ba73      	rev16	r3, r6
 80111cc:	8423      	strh	r3, [r4, #32]
 80111ce:	f001 feb8 	bl	8012f42 <net_chksum>
 80111d2:	a901      	add	r1, sp, #4
 80111d4:	4605      	mov	r5, r0
 80111d6:	220c      	movs	r2, #12
 80111d8:	480c      	ldr	r0, [pc, #48]	; (801120c <_tcp_send_package+0x150>)
 80111da:	f7ff ff3f 	bl	801105c <memcpy.isra.0>
 80111de:	4809      	ldr	r0, [pc, #36]	; (8011204 <_tcp_send_package+0x148>)
 80111e0:	f106 0122 	add.w	r1, r6, #34	; 0x22
 80111e4:	8665      	strh	r5, [r4, #50]	; 0x32
 80111e6:	b004      	add	sp, #16
 80111e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111ec:	f004 ba62 	b.w	80156b4 <emac_eth_send>
 80111f0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80111f2:	5cc9      	ldrb	r1, [r1, r3]
 80111f4:	54d1      	strb	r1, [r2, r3]
 80111f6:	3301      	adds	r3, #1
 80111f8:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 80111fa:	4299      	cmp	r1, r3
 80111fc:	d8f8      	bhi.n	80111f0 <_tcp_send_package+0x134>
 80111fe:	e7bf      	b.n	8011180 <_tcp_send_package+0xc4>
 8011200:	2300      	movs	r3, #0
 8011202:	e7f9      	b.n	80111f8 <_tcp_send_package+0x13c>
 8011204:	200035b4 			; <UNDEFINED> instruction: 0x200035b4
 8011208:	200029fe 	strdcs	r2, [r0], -lr
 801120c:	200035ca 	andcs	r3, r0, sl, asr #11
 8011210:	200029d4 	ldrdcs	r2, [r0], -r4
 8011214:	200035ce 	andcs	r3, r0, lr, asr #11

08011218 <_send_reset>:
 8011218:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801121a:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 801121e:	4604      	mov	r4, r0
 8011220:	075a      	lsls	r2, r3, #29
 8011222:	460e      	mov	r6, r1
 8011224:	d421      	bmi.n	801126a <_send_reset+0x52>
 8011226:	2204      	movs	r2, #4
 8011228:	f013 0310 	ands.w	r3, r3, #16
 801122c:	f88d 200c 	strb.w	r2, [sp, #12]
 8011230:	d01d      	beq.n	801126e <_send_reset+0x56>
 8011232:	f100 012a 	add.w	r1, r0, #42	; 0x2a
 8011236:	4668      	mov	r0, sp
 8011238:	f7ff ff10 	bl	801105c <memcpy.isra.0>
 801123c:	9b00      	ldr	r3, [sp, #0]
 801123e:	9301      	str	r3, [sp, #4]
 8011240:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8011244:	4668      	mov	r0, sp
 8011246:	f3c3 0540 	ubfx	r5, r3, #1, #1
 801124a:	f104 0126 	add.w	r1, r4, #38	; 0x26
 801124e:	07db      	lsls	r3, r3, #31
 8011250:	f04f 0204 	mov.w	r2, #4
 8011254:	bf48      	it	mi
 8011256:	3501      	addmi	r5, #1
 8011258:	f7ff ff00 	bl	801105c <memcpy.isra.0>
 801125c:	9b00      	ldr	r3, [sp, #0]
 801125e:	4630      	mov	r0, r6
 8011260:	441d      	add	r5, r3
 8011262:	a901      	add	r1, sp, #4
 8011264:	9502      	str	r5, [sp, #8]
 8011266:	f7ff ff29 	bl	80110bc <_tcp_send_package>
 801126a:	b004      	add	sp, #16
 801126c:	bd70      	pop	{r4, r5, r6, pc}
 801126e:	9301      	str	r3, [sp, #4]
 8011270:	2314      	movs	r3, #20
 8011272:	f88d 300c 	strb.w	r3, [sp, #12]
 8011276:	e7e3      	b.n	8011240 <_send_reset+0x28>

08011278 <tcp_begin>:
 8011278:	b508      	push	{r3, lr}
 801127a:	4b0a      	ldr	r3, [pc, #40]	; (80112a4 <tcp_begin+0x2c>)
 801127c:	4601      	mov	r1, r0
 801127e:	881a      	ldrh	r2, [r3, #0]
 8011280:	4282      	cmp	r2, r0
 8011282:	d102      	bne.n	801128a <tcp_begin+0x12>
 8011284:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011288:	b130      	cbz	r0, 8011298 <tcp_begin+0x20>
 801128a:	b12a      	cbz	r2, 8011298 <tcp_begin+0x20>
 801128c:	4806      	ldr	r0, [pc, #24]	; (80112a8 <tcp_begin+0x30>)
 801128e:	f003 f8ef 	bl	8014470 <console_error>
 8011292:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011296:	bd08      	pop	{r3, pc}
 8011298:	4802      	ldr	r0, [pc, #8]	; (80112a4 <tcp_begin+0x2c>)
 801129a:	8019      	strh	r1, [r3, #0]
 801129c:	f7ff fec4 	bl	8011028 <_init_tcb>
 80112a0:	2000      	movs	r0, #0
 80112a2:	e7f8      	b.n	8011296 <tcp_begin+0x1e>
 80112a4:	20003570 	andcs	r3, r0, r0, ror r5
 80112a8:	08018489 	stmdaeq	r1, {r0, r3, r7, sl, pc}

080112ac <tcp_write>:
 80112ac:	f240 53b4 	movw	r3, #1460	; 0x5b4
 80112b0:	429a      	cmp	r2, r3
 80112b2:	bf28      	it	cs
 80112b4:	461a      	movcs	r2, r3
 80112b6:	2344      	movs	r3, #68	; 0x44
 80112b8:	b530      	push	{r4, r5, lr}
 80112ba:	4c0d      	ldr	r4, [pc, #52]	; (80112f0 <tcp_write+0x44>)
 80112bc:	b085      	sub	sp, #20
 80112be:	fb03 4400 	mla	r4, r3, r0, r4
 80112c2:	6963      	ldr	r3, [r4, #20]
 80112c4:	4615      	mov	r5, r2
 80112c6:	9301      	str	r3, [sp, #4]
 80112c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80112ca:	62e1      	str	r1, [r4, #44]	; 0x2c
 80112cc:	9302      	str	r3, [sp, #8]
 80112ce:	2318      	movs	r3, #24
 80112d0:	8622      	strh	r2, [r4, #48]	; 0x30
 80112d2:	4620      	mov	r0, r4
 80112d4:	a901      	add	r1, sp, #4
 80112d6:	f88d 300c 	strb.w	r3, [sp, #12]
 80112da:	f7ff feef 	bl	80110bc <_tcp_send_package>
 80112de:	2300      	movs	r3, #0
 80112e0:	6962      	ldr	r2, [r4, #20]
 80112e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80112e4:	442a      	add	r2, r5
 80112e6:	8623      	strh	r3, [r4, #48]	; 0x30
 80112e8:	6162      	str	r2, [r4, #20]
 80112ea:	b005      	add	sp, #20
 80112ec:	bd30      	pop	{r4, r5, pc}
 80112ee:	bf00      	nop
 80112f0:	20003570 	andcs	r3, r0, r0, ror r5

080112f4 <tcp_read>:
 80112f4:	2344      	movs	r3, #68	; 0x44
 80112f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112f8:	4c1c      	ldr	r4, [pc, #112]	; (801136c <tcp_read+0x78>)
 80112fa:	b085      	sub	sp, #20
 80112fc:	fb03 4400 	mla	r4, r3, r0, r4
 8011300:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8011304:	2b07      	cmp	r3, #7
 8011306:	d112      	bne.n	801132e <tcp_read+0x3a>
 8011308:	6963      	ldr	r3, [r4, #20]
 801130a:	4620      	mov	r0, r4
 801130c:	9301      	str	r3, [sp, #4]
 801130e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011310:	a901      	add	r1, sp, #4
 8011312:	9302      	str	r3, [sp, #8]
 8011314:	2311      	movs	r3, #17
 8011316:	f88d 300c 	strb.w	r3, [sp, #12]
 801131a:	f7ff fecf 	bl	80110bc <_tcp_send_package>
 801131e:	2309      	movs	r3, #9
 8011320:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8011324:	6963      	ldr	r3, [r4, #20]
 8011326:	3301      	adds	r3, #1
 8011328:	6163      	str	r3, [r4, #20]
 801132a:	2000      	movs	r0, #0
 801132c:	e01b      	b.n	8011366 <tcp_read+0x72>
 801132e:	f44f 6337 	mov.w	r3, #2928	; 0xb70
 8011332:	4358      	muls	r0, r3
 8011334:	4a0e      	ldr	r2, [pc, #56]	; (8011370 <tcp_read+0x7c>)
 8011336:	1817      	adds	r7, r2, r0
 8011338:	887b      	ldrh	r3, [r7, #2]
 801133a:	5a15      	ldrh	r5, [r2, r0]
 801133c:	429d      	cmp	r5, r3
 801133e:	d0f4      	beq.n	801132a <tcp_read+0x36>
 8011340:	f240 55b6 	movw	r5, #1462	; 0x5b6
 8011344:	435d      	muls	r5, r3
 8011346:	1d06      	adds	r6, r0, #4
 8011348:	442e      	add	r6, r5
 801134a:	4416      	add	r6, r2
 801134c:	4428      	add	r0, r5
 801134e:	600e      	str	r6, [r1, #0]
 8011350:	4402      	add	r2, r0
 8011352:	f8b2 05b8 	ldrh.w	r0, [r2, #1464]	; 0x5b8
 8011356:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8011358:	3301      	adds	r3, #1
 801135a:	f202 52b4 	addw	r2, r2, #1460	; 0x5b4
 801135e:	f003 0301 	and.w	r3, r3, #1
 8011362:	8722      	strh	r2, [r4, #56]	; 0x38
 8011364:	807b      	strh	r3, [r7, #2]
 8011366:	b005      	add	sp, #20
 8011368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801136a:	bf00      	nop
 801136c:	20003570 	andcs	r3, r0, r0, ror r5
 8011370:	20002a00 	andcs	r2, r0, r0, lsl #20

08011374 <memcpy.isra.0>:
 8011374:	3801      	subs	r0, #1
 8011376:	440a      	add	r2, r1
 8011378:	4291      	cmp	r1, r2
 801137a:	d100      	bne.n	801137e <memcpy.isra.0+0xa>
 801137c:	4770      	bx	lr
 801137e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011382:	f800 3f01 	strb.w	r3, [r0, #1]!
 8011386:	e7f7      	b.n	8011378 <memcpy.isra.0+0x4>

08011388 <net_memcpy>:
 8011388:	ea41 0300 	orr.w	r3, r1, r0
 801138c:	079b      	lsls	r3, r3, #30
 801138e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011390:	d115      	bne.n	80113be <net_memcpy+0x36>
 8011392:	f022 0303 	bic.w	r3, r2, #3
 8011396:	1f04      	subs	r4, r0, #4
 8011398:	0895      	lsrs	r5, r2, #2
 801139a:	18ce      	adds	r6, r1, r3
 801139c:	42b1      	cmp	r1, r6
 801139e:	d109      	bne.n	80113b4 <net_memcpy+0x2c>
 80113a0:	f06f 0403 	mvn.w	r4, #3
 80113a4:	fb04 2205 	mla	r2, r4, r5, r2
 80113a8:	4403      	add	r3, r0
 80113aa:	3b01      	subs	r3, #1
 80113ac:	440a      	add	r2, r1
 80113ae:	4291      	cmp	r1, r2
 80113b0:	d107      	bne.n	80113c2 <net_memcpy+0x3a>
 80113b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113b4:	f851 7b04 	ldr.w	r7, [r1], #4
 80113b8:	f844 7f04 	str.w	r7, [r4, #4]!
 80113bc:	e7ee      	b.n	801139c <net_memcpy+0x14>
 80113be:	4603      	mov	r3, r0
 80113c0:	e7f3      	b.n	80113aa <net_memcpy+0x22>
 80113c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80113c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80113ca:	e7f0      	b.n	80113ae <net_memcpy+0x26>

080113cc <udp_set_ip>:
 80113cc:	2204      	movs	r2, #4
 80113ce:	b513      	push	{r0, r1, r4, lr}
 80113d0:	4604      	mov	r4, r0
 80113d2:	6803      	ldr	r3, [r0, #0]
 80113d4:	eb0d 0102 	add.w	r1, sp, r2
 80113d8:	4808      	ldr	r0, [pc, #32]	; (80113fc <udp_set_ip+0x30>)
 80113da:	9301      	str	r3, [sp, #4]
 80113dc:	f7ff ffca 	bl	8011374 <memcpy.isra.0>
 80113e0:	6862      	ldr	r2, [r4, #4]
 80113e2:	4b07      	ldr	r3, [pc, #28]	; (8011400 <udp_set_ip+0x34>)
 80113e4:	43d1      	mvns	r1, r2
 80113e6:	6019      	str	r1, [r3, #0]
 80113e8:	6823      	ldr	r3, [r4, #0]
 80113ea:	4013      	ands	r3, r2
 80113ec:	4a05      	ldr	r2, [pc, #20]	; (8011404 <udp_set_ip+0x38>)
 80113ee:	6013      	str	r3, [r2, #0]
 80113f0:	68a2      	ldr	r2, [r4, #8]
 80113f2:	4b05      	ldr	r3, [pc, #20]	; (8011408 <udp_set_ip+0x3c>)
 80113f4:	601a      	str	r2, [r3, #0]
 80113f6:	b002      	add	sp, #8
 80113f8:	bd10      	pop	{r4, pc}
 80113fa:	bf00      	nop
 80113fc:	2000988a 	andcs	r9, r0, sl, lsl #17
 8011400:	20003ba0 	andcs	r3, r0, r0, lsr #23
 8011404:	20003ba8 	andcs	r3, r0, r8, lsr #23
 8011408:	20003ba4 	andcs	r3, r0, r4, lsr #23

0801140c <udp_bind>:
 801140c:	4a0a      	ldr	r2, [pc, #40]	; (8011438 <udp_bind+0x2c>)
 801140e:	4603      	mov	r3, r0
 8011410:	b510      	push	{r4, lr}
 8011412:	2000      	movs	r0, #0
 8011414:	4614      	mov	r4, r2
 8011416:	f852 1b04 	ldr.w	r1, [r2], #4
 801141a:	4299      	cmp	r1, r3
 801141c:	d008      	beq.n	8011430 <udp_bind+0x24>
 801141e:	b141      	cbz	r1, 8011432 <udp_bind+0x26>
 8011420:	3001      	adds	r0, #1
 8011422:	2808      	cmp	r0, #8
 8011424:	d1f7      	bne.n	8011416 <udp_bind+0xa>
 8011426:	4805      	ldr	r0, [pc, #20]	; (801143c <udp_bind+0x30>)
 8011428:	f003 f822 	bl	8014470 <console_error>
 801142c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011430:	bd10      	pop	{r4, pc}
 8011432:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 8011436:	e7fb      	b.n	8011430 <udp_bind+0x24>
 8011438:	20003bb0 			; <UNDEFINED> instruction: 0x20003bb0
 801143c:	080184a9 	stmdaeq	r1, {r0, r3, r5, r7, sl, pc}

08011440 <udp_unbind>:
 8011440:	4a0c      	ldr	r2, [pc, #48]	; (8011474 <udp_unbind+0x34>)
 8011442:	2300      	movs	r3, #0
 8011444:	4611      	mov	r1, r2
 8011446:	b510      	push	{r4, lr}
 8011448:	f852 4b04 	ldr.w	r4, [r2], #4
 801144c:	4284      	cmp	r4, r0
 801144e:	d108      	bne.n	8011462 <udp_unbind+0x22>
 8011450:	2000      	movs	r0, #0
 8011452:	f640 3294 	movw	r2, #2964	; 0xb94
 8011456:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 801145a:	4353      	muls	r3, r2
 801145c:	4a06      	ldr	r2, [pc, #24]	; (8011478 <udp_unbind+0x38>)
 801145e:	5098      	str	r0, [r3, r2]
 8011460:	bd10      	pop	{r4, pc}
 8011462:	3301      	adds	r3, #1
 8011464:	2b08      	cmp	r3, #8
 8011466:	d1ef      	bne.n	8011448 <udp_unbind+0x8>
 8011468:	4804      	ldr	r0, [pc, #16]	; (801147c <udp_unbind+0x3c>)
 801146a:	f003 f801 	bl	8014470 <console_error>
 801146e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011472:	e7f5      	b.n	8011460 <udp_unbind+0x20>
 8011474:	20003bb0 			; <UNDEFINED> instruction: 0x20003bb0
 8011478:	20003bd0 	ldrdcs	r3, [r0], -r0
 801147c:	080184ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, sl, pc}

08011480 <udp_recv>:
 8011480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011484:	4604      	mov	r4, r0
 8011486:	4698      	mov	r8, r3
 8011488:	f640 3394 	movw	r3, #2964	; 0xb94
 801148c:	435c      	muls	r4, r3
 801148e:	4608      	mov	r0, r1
 8011490:	4915      	ldr	r1, [pc, #84]	; (80114e8 <udp_recv+0x68>)
 8011492:	190f      	adds	r7, r1, r4
 8011494:	f8b7 c002 	ldrh.w	ip, [r7, #2]
 8011498:	5b0b      	ldrh	r3, [r1, r4]
 801149a:	4563      	cmp	r3, ip
 801149c:	d021      	beq.n	80114e2 <udp_recv+0x62>
 801149e:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 80114a2:	fb03 fc0c 	mul.w	ip, r3, ip
 80114a6:	eb0c 0604 	add.w	r6, ip, r4
 80114aa:	440e      	add	r6, r1
 80114ac:	f8b6 55ca 	ldrh.w	r5, [r6, #1482]	; 0x5ca
 80114b0:	3404      	adds	r4, #4
 80114b2:	4295      	cmp	r5, r2
 80114b4:	bf28      	it	cs
 80114b6:	4615      	movcs	r5, r2
 80114b8:	4464      	add	r4, ip
 80114ba:	462a      	mov	r2, r5
 80114bc:	4421      	add	r1, r4
 80114be:	f7ff ff63 	bl	8011388 <net_memcpy>
 80114c2:	f8d6 35c4 	ldr.w	r3, [r6, #1476]	; 0x5c4
 80114c6:	f8c8 3000 	str.w	r3, [r8]
 80114ca:	f8b6 25c8 	ldrh.w	r2, [r6, #1480]	; 0x5c8
 80114ce:	9b06      	ldr	r3, [sp, #24]
 80114d0:	801a      	strh	r2, [r3, #0]
 80114d2:	887b      	ldrh	r3, [r7, #2]
 80114d4:	3301      	adds	r3, #1
 80114d6:	f003 0301 	and.w	r3, r3, #1
 80114da:	807b      	strh	r3, [r7, #2]
 80114dc:	4628      	mov	r0, r5
 80114de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114e2:	2500      	movs	r5, #0
 80114e4:	e7fa      	b.n	80114dc <udp_recv+0x5c>
 80114e6:	bf00      	nop
 80114e8:	20003bd0 	ldrdcs	r3, [r0], -r0

080114ec <udp_recv2>:
 80114ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114ee:	f640 3594 	movw	r5, #2964	; 0xb94
 80114f2:	4368      	muls	r0, r5
 80114f4:	4c0f      	ldr	r4, [pc, #60]	; (8011534 <udp_recv2+0x48>)
 80114f6:	1827      	adds	r7, r4, r0
 80114f8:	887d      	ldrh	r5, [r7, #2]
 80114fa:	5a26      	ldrh	r6, [r4, r0]
 80114fc:	42ae      	cmp	r6, r5
 80114fe:	d017      	beq.n	8011530 <udp_recv2+0x44>
 8011500:	f44f 6cb9 	mov.w	ip, #1480	; 0x5c8
 8011504:	fb0c f505 	mul.w	r5, ip, r5
 8011508:	1d06      	adds	r6, r0, #4
 801150a:	442e      	add	r6, r5
 801150c:	4405      	add	r5, r0
 801150e:	4426      	add	r6, r4
 8011510:	442c      	add	r4, r5
 8011512:	600e      	str	r6, [r1, #0]
 8011514:	f8d4 15c4 	ldr.w	r1, [r4, #1476]	; 0x5c4
 8011518:	6011      	str	r1, [r2, #0]
 801151a:	f8b4 25c8 	ldrh.w	r2, [r4, #1480]	; 0x5c8
 801151e:	801a      	strh	r2, [r3, #0]
 8011520:	887b      	ldrh	r3, [r7, #2]
 8011522:	f8b4 05ca 	ldrh.w	r0, [r4, #1482]	; 0x5ca
 8011526:	3301      	adds	r3, #1
 8011528:	f003 0301 	and.w	r3, r3, #1
 801152c:	807b      	strh	r3, [r7, #2]
 801152e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011530:	2000      	movs	r0, #0
 8011532:	e7fc      	b.n	801152e <udp_recv2+0x42>
 8011534:	20003bd0 	ldrdcs	r3, [r0], -r0

08011538 <udp_send>:
 8011538:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801153c:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8011670 <udp_send+0x138>
 8011540:	461c      	mov	r4, r3
 8011542:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
 8011546:	4607      	mov	r7, r0
 8011548:	4688      	mov	r8, r1
 801154a:	4616      	mov	r6, r2
 801154c:	2b00      	cmp	r3, #0
 801154e:	f000 808b 	beq.w	8011668 <udp_send+0x130>
 8011552:	1c63      	adds	r3, r4, #1
 8011554:	d141      	bne.n	80115da <udp_send+0xa2>
 8011556:	4a47      	ldr	r2, [pc, #284]	; (8011674 <udp_send+0x13c>)
 8011558:	2307      	movs	r3, #7
 801155a:	4611      	mov	r1, r2
 801155c:	20ff      	movs	r0, #255	; 0xff
 801155e:	e001      	b.n	8011564 <udp_send+0x2c>
 8011560:	f802 0b01 	strb.w	r0, [r2], #1
 8011564:	3b01      	subs	r3, #1
 8011566:	d1fb      	bne.n	8011560 <udp_send+0x28>
 8011568:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801156c:	83cb      	strh	r3, [r1, #30]
 801156e:	840b      	strh	r3, [r1, #32]
 8011570:	2500      	movs	r5, #0
 8011572:	f8df a104 	ldr.w	sl, [pc, #260]	; 8011678 <udp_send+0x140>
 8011576:	4c3f      	ldr	r4, [pc, #252]	; (8011674 <udp_send+0x13c>)
 8011578:	f8ba 3000 	ldrh.w	r3, [sl]
 801157c:	2114      	movs	r1, #20
 801157e:	8263      	strh	r3, [r4, #18]
 8011580:	f106 031c 	add.w	r3, r6, #28
 8011584:	ba5b      	rev16	r3, r3
 8011586:	f104 000e 	add.w	r0, r4, #14
 801158a:	8223      	strh	r3, [r4, #16]
 801158c:	8325      	strh	r5, [r4, #24]
 801158e:	f001 fcd8 	bl	8012f42 <net_chksum>
 8011592:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
 8011596:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 801159a:	ba5b      	rev16	r3, r3
 801159c:	8463      	strh	r3, [r4, #34]	; 0x22
 801159e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80115a2:	4632      	mov	r2, r6
 80115a4:	ba5b      	rev16	r3, r3
 80115a6:	84a3      	strh	r3, [r4, #36]	; 0x24
 80115a8:	f106 0308 	add.w	r3, r6, #8
 80115ac:	ba5b      	rev16	r3, r3
 80115ae:	bf28      	it	cs
 80115b0:	f44f 62b8 	movcs.w	r2, #1472	; 0x5c0
 80115b4:	4641      	mov	r1, r8
 80115b6:	8320      	strh	r0, [r4, #24]
 80115b8:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 80115bc:	84e3      	strh	r3, [r4, #38]	; 0x26
 80115be:	f7ff fee3 	bl	8011388 <net_memcpy>
 80115c2:	4620      	mov	r0, r4
 80115c4:	f106 012a 	add.w	r1, r6, #42	; 0x2a
 80115c8:	f004 f874 	bl	80156b4 <emac_eth_send>
 80115cc:	f8ba 3000 	ldrh.w	r3, [sl]
 80115d0:	4628      	mov	r0, r5
 80115d2:	3301      	adds	r3, #1
 80115d4:	f8aa 3000 	strh.w	r3, [sl]
 80115d8:	e037      	b.n	801164a <udp_send+0x112>
 80115da:	4b28      	ldr	r3, [pc, #160]	; (801167c <udp_send+0x144>)
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	43a3      	bics	r3, r4
 80115e0:	d10f      	bne.n	8011602 <udp_send+0xca>
 80115e2:	2307      	movs	r3, #7
 80115e4:	21ff      	movs	r1, #255	; 0xff
 80115e6:	4a23      	ldr	r2, [pc, #140]	; (8011674 <udp_send+0x13c>)
 80115e8:	e001      	b.n	80115ee <udp_send+0xb6>
 80115ea:	f802 1b01 	strb.w	r1, [r2], #1
 80115ee:	3b01      	subs	r3, #1
 80115f0:	d1fb      	bne.n	80115ea <udp_send+0xb2>
 80115f2:	2204      	movs	r2, #4
 80115f4:	4822      	ldr	r0, [pc, #136]	; (8011680 <udp_send+0x148>)
 80115f6:	eb0d 0102 	add.w	r1, sp, r2
 80115fa:	9401      	str	r4, [sp, #4]
 80115fc:	f7ff feba 	bl	8011374 <memcpy.isra.0>
 8011600:	e7b6      	b.n	8011570 <udp_send+0x38>
 8011602:	f004 03e0 	and.w	r3, r4, #224	; 0xe0
 8011606:	2be0      	cmp	r3, #224	; 0xe0
 8011608:	d10e      	bne.n	8011628 <udp_send+0xf0>
 801160a:	491e      	ldr	r1, [pc, #120]	; (8011684 <udp_send+0x14c>)
 801160c:	f3c4 2306 	ubfx	r3, r4, #8, #7
 8011610:	70cb      	strb	r3, [r1, #3]
 8011612:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8011616:	710b      	strb	r3, [r1, #4]
 8011618:	f3c4 6307 	ubfx	r3, r4, #24, #8
 801161c:	2206      	movs	r2, #6
 801161e:	4815      	ldr	r0, [pc, #84]	; (8011674 <udp_send+0x13c>)
 8011620:	714b      	strb	r3, [r1, #5]
 8011622:	f7ff fea7 	bl	8011374 <memcpy.isra.0>
 8011626:	e7e4      	b.n	80115f2 <udp_send+0xba>
 8011628:	4b17      	ldr	r3, [pc, #92]	; (8011688 <udp_send+0x150>)
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	43a3      	bics	r3, r4
 801162e:	d00f      	beq.n	8011650 <udp_send+0x118>
 8011630:	4d16      	ldr	r5, [pc, #88]	; (801168c <udp_send+0x154>)
 8011632:	4910      	ldr	r1, [pc, #64]	; (8011674 <udp_send+0x13c>)
 8011634:	6828      	ldr	r0, [r5, #0]
 8011636:	f001 f93f 	bl	80128b8 <arp_cache_lookup>
 801163a:	682b      	ldr	r3, [r5, #0]
 801163c:	4298      	cmp	r0, r3
 801163e:	d0d8      	beq.n	80115f2 <udp_send+0xba>
 8011640:	4813      	ldr	r0, [pc, #76]	; (8011690 <udp_send+0x158>)
 8011642:	f002 ff15 	bl	8014470 <console_error>
 8011646:	f06f 0002 	mvn.w	r0, #2
 801164a:	b002      	add	sp, #8
 801164c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011650:	4620      	mov	r0, r4
 8011652:	4908      	ldr	r1, [pc, #32]	; (8011674 <udp_send+0x13c>)
 8011654:	f001 f930 	bl	80128b8 <arp_cache_lookup>
 8011658:	42a0      	cmp	r0, r4
 801165a:	d0ca      	beq.n	80115f2 <udp_send+0xba>
 801165c:	480d      	ldr	r0, [pc, #52]	; (8011694 <udp_send+0x15c>)
 801165e:	f002 ff07 	bl	8014470 <console_error>
 8011662:	f06f 0001 	mvn.w	r0, #1
 8011666:	e7f0      	b.n	801164a <udp_send+0x112>
 8011668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801166c:	e7ed      	b.n	801164a <udp_send+0x112>
 801166e:	bf00      	nop
 8011670:	20003bb0 			; <UNDEFINED> instruction: 0x20003bb0
 8011674:	20009870 	andcs	r9, r0, r0, ror r8
 8011678:	20003bac 	andcs	r3, r0, ip, lsr #23
 801167c:	20003ba0 	andcs	r3, r0, r0, lsr #23
 8011680:	2000988e 	andcs	r9, r0, lr, lsl #17
 8011684:	20000000 	andcs	r0, r0, r0
 8011688:	20003ba8 	andcs	r3, r0, r8, lsr #23
 801168c:	20003ba4 	andcs	r3, r0, r4, lsr #23
 8011690:	080184b6 	stmdaeq	r1, {r1, r2, r4, r5, r7, sl, pc}
 8011694:	080184dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, sl, pc}

08011698 <strlen>:
 8011698:	4603      	mov	r3, r0
 801169a:	461a      	mov	r2, r3
 801169c:	7811      	ldrb	r1, [r2, #0]
 801169e:	3301      	adds	r3, #1
 80116a0:	2900      	cmp	r1, #0
 80116a2:	d1fa      	bne.n	801169a <strlen+0x2>
 80116a4:	1a10      	subs	r0, r2, r0
 80116a6:	4770      	bx	lr

080116a8 <strcmp>:
 80116a8:	1e43      	subs	r3, r0, #1
 80116aa:	3901      	subs	r1, #1
 80116ac:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80116b0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80116b4:	4290      	cmp	r0, r2
 80116b6:	d102      	bne.n	80116be <strcmp+0x16>
 80116b8:	2800      	cmp	r0, #0
 80116ba:	d1f7      	bne.n	80116ac <strcmp+0x4>
 80116bc:	4770      	bx	lr
 80116be:	1a80      	subs	r0, r0, r2
 80116c0:	4770      	bx	lr

080116c2 <strcpy.isra.0>:
 80116c2:	3801      	subs	r0, #1
 80116c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80116c8:	f800 3f01 	strb.w	r3, [r0, #1]!
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d1f9      	bne.n	80116c4 <strcpy.isra.0+0x2>
 80116d0:	4770      	bx	lr

080116d2 <strcat.isra.0>:
 80116d2:	b538      	push	{r3, r4, r5, lr}
 80116d4:	4604      	mov	r4, r0
 80116d6:	460d      	mov	r5, r1
 80116d8:	f7ff ffde 	bl	8011698 <strlen>
 80116dc:	4629      	mov	r1, r5
 80116de:	4420      	add	r0, r4
 80116e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80116e4:	f7ff bfed 	b.w	80116c2 <strcpy.isra.0>

080116e8 <MDNS::MDNS()>:
 80116e8:	b513      	push	{r0, r1, r4, lr}
 80116ea:	4604      	mov	r4, r0
 80116ec:	a901      	add	r1, sp, #4
 80116ee:	4804      	ldr	r0, [pc, #16]	; (8011700 <MDNS::MDNS()+0x18>)
 80116f0:	f003 f83c 	bl	801476c <inet_aton>
 80116f4:	4620      	mov	r0, r4
 80116f6:	4b03      	ldr	r3, [pc, #12]	; (8011704 <MDNS::MDNS()+0x1c>)
 80116f8:	9a01      	ldr	r2, [sp, #4]
 80116fa:	601a      	str	r2, [r3, #0]
 80116fc:	b002      	add	sp, #8
 80116fe:	bd10      	pop	{r4, pc}
 8011700:	080184fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, sl, pc}
 8011704:	20009e64 	andcs	r9, r0, r4, ror #28

08011708 <MDNS::SetName(char const*)>:
 8011708:	b538      	push	{r3, r4, r5, lr}
 801170a:	4d0b      	ldr	r5, [pc, #44]	; (8011738 <MDNS::SetName(char const*)+0x30>)
 801170c:	460c      	mov	r4, r1
 801170e:	6828      	ldr	r0, [r5, #0]
 8011710:	b108      	cbz	r0, 8011716 <MDNS::SetName(char const*)+0xe>
 8011712:	f003 f825 	bl	8014760 <operator delete[](void*)>
 8011716:	4620      	mov	r0, r4
 8011718:	f7ff ffbe 	bl	8011698 <strlen>
 801171c:	3007      	adds	r0, #7
 801171e:	f003 f823 	bl	8014768 <operator new[](unsigned int)>
 8011722:	4621      	mov	r1, r4
 8011724:	6028      	str	r0, [r5, #0]
 8011726:	f7ff ffcc 	bl	80116c2 <strcpy.isra.0>
 801172a:	6828      	ldr	r0, [r5, #0]
 801172c:	4903      	ldr	r1, [pc, #12]	; (801173c <MDNS::SetName(char const*)+0x34>)
 801172e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011732:	f7ff bfce 	b.w	80116d2 <strcat.isra.0>
 8011736:	bf00      	nop
 8011738:	2000a294 	mulcs	r0, r4, r2
 801173c:	0801850c 	stmdaeq	r1, {r2, r3, r8, sl, pc}

08011740 <MDNS::DecodeDNSNameNotation(char const*, char*)>:
 8011740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011744:	f04f 0e00 	mov.w	lr, #0
 8011748:	262e      	movs	r6, #46	; 0x2e
 801174a:	4675      	mov	r5, lr
 801174c:	4694      	mov	ip, r2
 801174e:	4f1d      	ldr	r7, [pc, #116]	; (80117c4 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x84>)
 8011750:	4a1d      	ldr	r2, [pc, #116]	; (80117c8 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x88>)
 8011752:	780b      	ldrb	r3, [r1, #0]
 8011754:	1c68      	adds	r0, r5, #1
 8011756:	b383      	cbz	r3, 80117ba <MDNS::DecodeDNSNameNotation(char const*, char*)+0x7a>
 8011758:	2b3f      	cmp	r3, #63	; 0x3f
 801175a:	d91d      	bls.n	8011798 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x58>
 801175c:	f1be 0f00 	cmp.w	lr, #0
 8011760:	bf08      	it	eq
 8011762:	4605      	moveq	r5, r0
 8011764:	2000      	movs	r0, #0
 8011766:	7849      	ldrb	r1, [r1, #1]
 8011768:	ea07 2303 	and.w	r3, r7, r3, lsl #8
 801176c:	430b      	orrs	r3, r1
 801176e:	6811      	ldr	r1, [r2, #0]
 8011770:	5ccc      	ldrb	r4, [r1, r3]
 8011772:	3301      	adds	r3, #1
 8011774:	440b      	add	r3, r1
 8011776:	42a0      	cmp	r0, r4
 8011778:	5c19      	ldrb	r1, [r3, r0]
 801177a:	d309      	bcc.n	8011790 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x50>
 801177c:	f04f 0e01 	mov.w	lr, #1
 8011780:	1919      	adds	r1, r3, r4
 8011782:	4464      	add	r4, ip
 8011784:	780b      	ldrb	r3, [r1, #0]
 8011786:	b10b      	cbz	r3, 801178c <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4c>
 8011788:	f804 6b01 	strb.w	r6, [r4], #1
 801178c:	46a4      	mov	ip, r4
 801178e:	e7e0      	b.n	8011752 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x12>
 8011790:	f80c 1000 	strb.w	r1, [ip, r0]
 8011794:	3001      	adds	r0, #1
 8011796:	e7ee      	b.n	8011776 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x36>
 8011798:	4688      	mov	r8, r1
 801179a:	eb0c 0403 	add.w	r4, ip, r3
 801179e:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 80117a2:	f80c 9b01 	strb.w	r9, [ip], #1
 80117a6:	4564      	cmp	r4, ip
 80117a8:	d1f9      	bne.n	801179e <MDNS::DecodeDNSNameNotation(char const*, char*)+0x5e>
 80117aa:	f103 0c01 	add.w	ip, r3, #1
 80117ae:	4461      	add	r1, ip
 80117b0:	f1be 0f00 	cmp.w	lr, #0
 80117b4:	d1e6      	bne.n	8011784 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x44>
 80117b6:	18c5      	adds	r5, r0, r3
 80117b8:	e7e4      	b.n	8011784 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x44>
 80117ba:	f88c 3000 	strb.w	r3, [ip]
 80117be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80117c2:	bf00      	nop
 80117c4:	ffff3f00 			; <UNDEFINED> instruction: 0xffff3f00
 80117c8:	2000a298 	mulcs	r0, r8, r2

080117cc <MDNS::FindFirstDotFromRight(char const*) const>:
 80117cc:	b510      	push	{r4, lr}
 80117ce:	4608      	mov	r0, r1
 80117d0:	460c      	mov	r4, r1
 80117d2:	f7ff ff61 	bl	8011698 <strlen>
 80117d6:	4420      	add	r0, r4
 80117d8:	42a0      	cmp	r0, r4
 80117da:	d903      	bls.n	80117e4 <MDNS::FindFirstDotFromRight(char const*) const+0x18>
 80117dc:	f810 3901 	ldrb.w	r3, [r0], #-1
 80117e0:	2b2e      	cmp	r3, #46	; 0x2e
 80117e2:	d1f9      	bne.n	80117d8 <MDNS::FindFirstDotFromRight(char const*) const+0xc>
 80117e4:	3001      	adds	r0, #1
 80117e6:	bd10      	pop	{r4, pc}

080117e8 <MDNS::WriteDnsName(char const*, char*, bool)>:
 80117e8:	4610      	mov	r0, r2
 80117ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117ec:	460f      	mov	r7, r1
 80117ee:	1c44      	adds	r4, r0, #1
 80117f0:	463d      	mov	r5, r7
 80117f2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80117f6:	b126      	cbz	r6, 8011802 <MDNS::WriteDnsName(char const*, char*, bool)+0x1a>
 80117f8:	2e2e      	cmp	r6, #46	; 0x2e
 80117fa:	d002      	beq.n	8011802 <MDNS::WriteDnsName(char const*, char*, bool)+0x1a>
 80117fc:	f804 6b01 	strb.w	r6, [r4], #1
 8011800:	e7f6      	b.n	80117f0 <MDNS::WriteDnsName(char const*, char*, bool)+0x8>
 8011802:	1a69      	subs	r1, r5, r1
 8011804:	7001      	strb	r1, [r0, #0]
 8011806:	7829      	ldrb	r1, [r5, #0]
 8011808:	b921      	cbnz	r1, 8011814 <MDNS::WriteDnsName(char const*, char*, bool)+0x2c>
 801180a:	b10b      	cbz	r3, 8011810 <MDNS::WriteDnsName(char const*, char*, bool)+0x28>
 801180c:	f804 1b01 	strb.w	r1, [r4], #1
 8011810:	1aa0      	subs	r0, r4, r2
 8011812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011814:	4620      	mov	r0, r4
 8011816:	1c69      	adds	r1, r5, #1
 8011818:	e7e8      	b.n	80117ec <MDNS::WriteDnsName(char const*, char*, bool)+0x4>
	...

0801181c <MDNS::CreateAnswerLocalIpAddress()>:
 801181c:	2384      	movs	r3, #132	; 0x84
 801181e:	b510      	push	{r4, lr}
 8011820:	4c0f      	ldr	r4, [pc, #60]	; (8011860 <MDNS::CreateAnswerLocalIpAddress()+0x44>)
 8011822:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011826:	80e3      	strh	r3, [r4, #6]
 8011828:	2300      	movs	r3, #0
 801182a:	490e      	ldr	r1, [pc, #56]	; (8011864 <MDNS::CreateAnswerLocalIpAddress()+0x48>)
 801182c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8011830:	6809      	ldr	r1, [r1, #0]
 8011832:	f104 0210 	add.w	r2, r4, #16
 8011836:	2301      	movs	r3, #1
 8011838:	f7ff ffd6 	bl	80117e8 <MDNS::WriteDnsName(char const*, char*, bool)>
 801183c:	490a      	ldr	r1, [pc, #40]	; (8011868 <MDNS::CreateAnswerLocalIpAddress()+0x4c>)
 801183e:	1813      	adds	r3, r2, r0
 8011840:	5011      	str	r1, [r2, r0]
 8011842:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8011846:	605a      	str	r2, [r3, #4]
 8011848:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801184c:	811a      	strh	r2, [r3, #8]
 801184e:	4a07      	ldr	r2, [pc, #28]	; (801186c <MDNS::CreateAnswerLocalIpAddress()+0x50>)
 8011850:	6812      	ldr	r2, [r2, #0]
 8011852:	6912      	ldr	r2, [r2, #16]
 8011854:	f8c3 200a 	str.w	r2, [r3, #10]
 8011858:	1b1b      	subs	r3, r3, r4
 801185a:	330a      	adds	r3, #10
 801185c:	6023      	str	r3, [r4, #0]
 801185e:	bd10      	pop	{r4, pc}
 8011860:	20009e68 	andcs	r9, r0, r8, ror #28
 8011864:	2000a294 	mulcs	r0, r4, r2
 8011868:	01800100 	orreq	r0, r0, r0, lsl #2
 801186c:	2000a29c 	mulcs	r0, ip, r2

08011870 <MDNS::Start()>:
 8011870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011872:	4c1e      	ldr	r4, [pc, #120]	; (80118ec <MDNS::Start()+0x7c>)
 8011874:	f241 41e9 	movw	r1, #5353	; 0x14e9
 8011878:	4605      	mov	r5, r0
 801187a:	6820      	ldr	r0, [r4, #0]
 801187c:	f000 fb2a 	bl	8011ed4 <Network::Begin(unsigned short)>
 8011880:	4e1b      	ldr	r6, [pc, #108]	; (80118f0 <MDNS::Start()+0x80>)
 8011882:	4f1c      	ldr	r7, [pc, #112]	; (80118f4 <MDNS::Start()+0x84>)
 8011884:	4601      	mov	r1, r0
 8011886:	6030      	str	r0, [r6, #0]
 8011888:	683a      	ldr	r2, [r7, #0]
 801188a:	6820      	ldr	r0, [r4, #0]
 801188c:	f000 fb33 	bl	8011ef6 <Network::JoinGroup(int, unsigned int)>
 8011890:	4b19      	ldr	r3, [pc, #100]	; (80118f8 <MDNS::Start()+0x88>)
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	b923      	cbnz	r3, 80118a0 <MDNS::Start()+0x30>
 8011896:	6821      	ldr	r1, [r4, #0]
 8011898:	4628      	mov	r0, r5
 801189a:	311c      	adds	r1, #28
 801189c:	f7ff ff34 	bl	8011708 <MDNS::SetName(char const*)>
 80118a0:	4628      	mov	r0, r5
 80118a2:	f7ff ffbb 	bl	801181c <MDNS::CreateAnswerLocalIpAddress()>
 80118a6:	f241 43e9 	movw	r3, #5353	; 0x14e9
 80118aa:	4914      	ldr	r1, [pc, #80]	; (80118fc <MDNS::Start()+0x8c>)
 80118ac:	7830      	ldrb	r0, [r6, #0]
 80118ae:	f851 2b04 	ldr.w	r2, [r1], #4
 80118b2:	9300      	str	r3, [sp, #0]
 80118b4:	b292      	uxth	r2, r2
 80118b6:	683b      	ldr	r3, [r7, #0]
 80118b8:	f7ff fe3e 	bl	8011538 <udp_send>
 80118bc:	223f      	movs	r2, #63	; 0x3f
 80118be:	6820      	ldr	r0, [r4, #0]
 80118c0:	4c0f      	ldr	r4, [pc, #60]	; (8011900 <MDNS::Start()+0x90>)
 80118c2:	f100 035c 	add.w	r3, r0, #92	; 0x5c
 80118c6:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80118ca:	b929      	cbnz	r1, 80118d8 <MDNS::Start()+0x68>
 80118cc:	441a      	add	r2, r3
 80118ce:	4293      	cmp	r3, r2
 80118d0:	d006      	beq.n	80118e0 <MDNS::Start()+0x70>
 80118d2:	f803 1b01 	strb.w	r1, [r3], #1
 80118d6:	e7fa      	b.n	80118ce <MDNS::Start()+0x5e>
 80118d8:	3a01      	subs	r2, #1
 80118da:	f803 1b01 	strb.w	r1, [r3], #1
 80118de:	d1f2      	bne.n	80118c6 <MDNS::Start()+0x56>
 80118e0:	2300      	movs	r3, #0
 80118e2:	f880 309b 	strb.w	r3, [r0, #155]	; 0x9b
 80118e6:	b003      	add	sp, #12
 80118e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118ea:	bf00      	nop
 80118ec:	2000a29c 	mulcs	r0, ip, r2
 80118f0:	20000008 	andcs	r0, r0, r8
 80118f4:	20009e64 	andcs	r9, r0, r4, ror #28
 80118f8:	2000a294 	mulcs	r0, r4, r2
 80118fc:	20009e68 	andcs	r9, r0, r8, ror #28
 8011900:	0801850c 	stmdaeq	r1, {r2, r3, r8, sl, pc}

08011904 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>:
 8011904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011908:	4c1b      	ldr	r4, [pc, #108]	; (8011978 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x74>)
 801190a:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 801190e:	eb04 1501 	add.w	r5, r4, r1, lsl #4
 8011912:	2300      	movs	r3, #0
 8011914:	f854 100c 	ldr.w	r1, [r4, ip]
 8011918:	4607      	mov	r7, r0
 801191a:	f7ff ff65 	bl	80117e8 <MDNS::WriteDnsName(char const*, char*, bool)>
 801191e:	2301      	movs	r3, #1
 8011920:	7bac      	ldrb	r4, [r5, #14]
 8011922:	4616      	mov	r6, r2
 8011924:	4915      	ldr	r1, [pc, #84]	; (801197c <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x78>)
 8011926:	4402      	add	r2, r0
 8011928:	4815      	ldr	r0, [pc, #84]	; (8011980 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x7c>)
 801192a:	429c      	cmp	r4, r3
 801192c:	bf18      	it	ne
 801192e:	4601      	movne	r1, r0
 8011930:	4638      	mov	r0, r7
 8011932:	f7ff ff59 	bl	80117e8 <MDNS::WriteDnsName(char const*, char*, bool)>
 8011936:	4b13      	ldr	r3, [pc, #76]	; (8011984 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x80>)
 8011938:	1814      	adds	r4, r2, r0
 801193a:	5013      	str	r3, [r2, r0]
 801193c:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8011940:	6063      	str	r3, [r4, #4]
 8011942:	4b11      	ldr	r3, [pc, #68]	; (8011988 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x84>)
 8011944:	f8d3 8000 	ldr.w	r8, [r3]
 8011948:	4640      	mov	r0, r8
 801194a:	f7ff fea5 	bl	8011698 <strlen>
 801194e:	f100 0308 	add.w	r3, r0, #8
 8011952:	ba5b      	rev16	r3, r3
 8011954:	8123      	strh	r3, [r4, #8]
 8011956:	2300      	movs	r3, #0
 8011958:	f8c4 300a 	str.w	r3, [r4, #10]
 801195c:	89ab      	ldrh	r3, [r5, #12]
 801195e:	f104 0210 	add.w	r2, r4, #16
 8011962:	ba5b      	rev16	r3, r3
 8011964:	81e3      	strh	r3, [r4, #14]
 8011966:	4641      	mov	r1, r8
 8011968:	2301      	movs	r3, #1
 801196a:	4638      	mov	r0, r7
 801196c:	f7ff ff3c 	bl	80117e8 <MDNS::WriteDnsName(char const*, char*, bool)>
 8011970:	4410      	add	r0, r2
 8011972:	1b80      	subs	r0, r0, r6
 8011974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011978:	2000a06c 	andcs	sl, r0, ip, rrx
 801197c:	08018508 	stmdaeq	r1, {r3, r8, sl, pc}
 8011980:	08018525 	stmdaeq	r1, {r0, r2, r5, r8, sl, pc}
 8011984:	01802100 	orreq	r2, r0, r0, lsl #2
 8011988:	2000a294 	mulcs	r0, r4, r2

0801198c <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>:
 801198c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011990:	4e19      	ldr	r6, [pc, #100]	; (80119f8 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x6c>)
 8011992:	010f      	lsls	r7, r1, #4
 8011994:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 8011998:	2300      	movs	r3, #0
 801199a:	59f1      	ldr	r1, [r6, r7]
 801199c:	4604      	mov	r4, r0
 801199e:	f7ff ff23 	bl	80117e8 <MDNS::WriteDnsName(char const*, char*, bool)>
 80119a2:	2301      	movs	r3, #1
 80119a4:	7bae      	ldrb	r6, [r5, #14]
 80119a6:	4690      	mov	r8, r2
 80119a8:	4914      	ldr	r1, [pc, #80]	; (80119fc <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x70>)
 80119aa:	4402      	add	r2, r0
 80119ac:	4814      	ldr	r0, [pc, #80]	; (8011a00 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x74>)
 80119ae:	429e      	cmp	r6, r3
 80119b0:	bf18      	it	ne
 80119b2:	4601      	movne	r1, r0
 80119b4:	4620      	mov	r0, r4
 80119b6:	f7ff ff17 	bl	80117e8 <MDNS::WriteDnsName(char const*, char*, bool)>
 80119ba:	4b12      	ldr	r3, [pc, #72]	; (8011a04 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x78>)
 80119bc:	1816      	adds	r6, r2, r0
 80119be:	5013      	str	r3, [r2, r0]
 80119c0:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 80119c4:	68a8      	ldr	r0, [r5, #8]
 80119c6:	6073      	str	r3, [r6, #4]
 80119c8:	f106 040b 	add.w	r4, r6, #11
 80119cc:	b938      	cbnz	r0, 80119de <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x52>
 80119ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80119d2:	72b0      	strb	r0, [r6, #10]
 80119d4:	8133      	strh	r3, [r6, #8]
 80119d6:	eba4 0008 	sub.w	r0, r4, r8
 80119da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119de:	f7ff fe5b 	bl	8011698 <strlen>
 80119e2:	4607      	mov	r7, r0
 80119e4:	1c43      	adds	r3, r0, #1
 80119e6:	72b0      	strb	r0, [r6, #10]
 80119e8:	ba5b      	rev16	r3, r3
 80119ea:	4620      	mov	r0, r4
 80119ec:	68a9      	ldr	r1, [r5, #8]
 80119ee:	8133      	strh	r3, [r6, #8]
 80119f0:	f7ff fe67 	bl	80116c2 <strcpy.isra.0>
 80119f4:	443c      	add	r4, r7
 80119f6:	e7ee      	b.n	80119d6 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x4a>
 80119f8:	2000a06c 	andcs	sl, r0, ip, rrx
 80119fc:	08018508 	stmdaeq	r1, {r3, r8, sl, pc}
 8011a00:	08018525 	stmdaeq	r1, {r0, r2, r5, r8, sl, pc}
 8011a04:	01801000 	orreq	r1, r0, r0

08011a08 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>:
 8011a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a0c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8011a70 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x68>
 8011a10:	ea4f 1901 	mov.w	r9, r1, lsl #4
 8011a14:	eb08 1501 	add.w	r5, r8, r1, lsl #4
 8011a18:	6869      	ldr	r1, [r5, #4]
 8011a1a:	2301      	movs	r3, #1
 8011a1c:	4607      	mov	r7, r0
 8011a1e:	f7ff fee3 	bl	80117e8 <MDNS::WriteDnsName(char const*, char*, bool)>
 8011a22:	4b14      	ldr	r3, [pc, #80]	; (8011a74 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x6c>)
 8011a24:	f858 8009 	ldr.w	r8, [r8, r9]
 8011a28:	5013      	str	r3, [r2, r0]
 8011a2a:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8011a2e:	1816      	adds	r6, r2, r0
 8011a30:	6073      	str	r3, [r6, #4]
 8011a32:	4640      	mov	r0, r8
 8011a34:	4614      	mov	r4, r2
 8011a36:	f7ff fe2f 	bl	8011698 <strlen>
 8011a3a:	f100 030d 	add.w	r3, r0, #13
 8011a3e:	ba5b      	rev16	r3, r3
 8011a40:	4641      	mov	r1, r8
 8011a42:	8133      	strh	r3, [r6, #8]
 8011a44:	f106 020a 	add.w	r2, r6, #10
 8011a48:	2300      	movs	r3, #0
 8011a4a:	4638      	mov	r0, r7
 8011a4c:	f7ff fecc 	bl	80117e8 <MDNS::WriteDnsName(char const*, char*, bool)>
 8011a50:	2301      	movs	r3, #1
 8011a52:	4402      	add	r2, r0
 8011a54:	7bad      	ldrb	r5, [r5, #14]
 8011a56:	4808      	ldr	r0, [pc, #32]	; (8011a78 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x70>)
 8011a58:	4908      	ldr	r1, [pc, #32]	; (8011a7c <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x74>)
 8011a5a:	429d      	cmp	r5, r3
 8011a5c:	bf18      	it	ne
 8011a5e:	4601      	movne	r1, r0
 8011a60:	4638      	mov	r0, r7
 8011a62:	f7ff fec1 	bl	80117e8 <MDNS::WriteDnsName(char const*, char*, bool)>
 8011a66:	4410      	add	r0, r2
 8011a68:	1b00      	subs	r0, r0, r4
 8011a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a6e:	bf00      	nop
 8011a70:	2000a06c 	andcs	sl, r0, ip, rrx
 8011a74:	01000c00 	tsteq	r0, r0, lsl #24
 8011a78:	08018525 	stmdaeq	r1, {r0, r2, r5, r8, sl, pc}
 8011a7c:	08018508 	stmdaeq	r1, {r3, r8, sl, pc}

08011a80 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>:
 8011a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a82:	460f      	mov	r7, r1
 8011a84:	2301      	movs	r3, #1
 8011a86:	490f      	ldr	r1, [pc, #60]	; (8011ac4 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x44>)
 8011a88:	4606      	mov	r6, r0
 8011a8a:	f7ff fead 	bl	80117e8 <MDNS::WriteDnsName(char const*, char*, bool)>
 8011a8e:	4b0e      	ldr	r3, [pc, #56]	; (8011ac8 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x48>)
 8011a90:	490e      	ldr	r1, [pc, #56]	; (8011acc <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x4c>)
 8011a92:	5013      	str	r3, [r2, r0]
 8011a94:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8011a98:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8011a9c:	684f      	ldr	r7, [r1, #4]
 8011a9e:	1815      	adds	r5, r2, r0
 8011aa0:	606b      	str	r3, [r5, #4]
 8011aa2:	4638      	mov	r0, r7
 8011aa4:	4614      	mov	r4, r2
 8011aa6:	f7ff fdf7 	bl	8011698 <strlen>
 8011aaa:	1c83      	adds	r3, r0, #2
 8011aac:	ba5b      	rev16	r3, r3
 8011aae:	812b      	strh	r3, [r5, #8]
 8011ab0:	f105 020a 	add.w	r2, r5, #10
 8011ab4:	2301      	movs	r3, #1
 8011ab6:	4639      	mov	r1, r7
 8011ab8:	4630      	mov	r0, r6
 8011aba:	f7ff fe95 	bl	80117e8 <MDNS::WriteDnsName(char const*, char*, bool)>
 8011abe:	4410      	add	r0, r2
 8011ac0:	1b00      	subs	r0, r0, r4
 8011ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ac4:	08018513 	stmdaeq	r1, {r0, r1, r4, r8, sl, pc}
 8011ac8:	01000c00 	tsteq	r0, r0, lsl #24
 8011acc:	2000a06c 	andcs	sl, r0, ip, rrx

08011ad0 <MDNS::CreateMDNSMessage(unsigned int)>:
 8011ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ad2:	2384      	movs	r3, #132	; 0x84
 8011ad4:	4d19      	ldr	r5, [pc, #100]	; (8011b3c <MDNS::CreateMDNSMessage(unsigned int)+0x6c>)
 8011ad6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8011ada:	80eb      	strh	r3, [r5, #6]
 8011adc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011ae0:	f105 0410 	add.w	r4, r5, #16
 8011ae4:	e9c5 2302 	strd	r2, r3, [r5, #8]
 8011ae8:	4622      	mov	r2, r4
 8011aea:	4606      	mov	r6, r0
 8011aec:	460f      	mov	r7, r1
 8011aee:	f7ff ff09 	bl	8011904 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>
 8011af2:	4404      	add	r4, r0
 8011af4:	4622      	mov	r2, r4
 8011af6:	4639      	mov	r1, r7
 8011af8:	4630      	mov	r0, r6
 8011afa:	f7ff ff47 	bl	801198c <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>
 8011afe:	4404      	add	r4, r0
 8011b00:	4622      	mov	r2, r4
 8011b02:	4639      	mov	r1, r7
 8011b04:	4630      	mov	r0, r6
 8011b06:	f7ff ffbb 	bl	8011a80 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>
 8011b0a:	4404      	add	r4, r0
 8011b0c:	4622      	mov	r2, r4
 8011b0e:	4639      	mov	r1, r7
 8011b10:	4630      	mov	r0, r6
 8011b12:	f7ff ff79 	bl	8011a08 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>
 8011b16:	4b0a      	ldr	r3, [pc, #40]	; (8011b40 <MDNS::CreateMDNSMessage(unsigned int)+0x70>)
 8011b18:	4404      	add	r4, r0
 8011b1a:	f853 2b10 	ldr.w	r2, [r3], #16
 8011b1e:	1e60      	subs	r0, r4, #1
 8011b20:	3a0c      	subs	r2, #12
 8011b22:	4611      	mov	r1, r2
 8011b24:	3901      	subs	r1, #1
 8011b26:	d304      	bcc.n	8011b32 <MDNS::CreateMDNSMessage(unsigned int)+0x62>
 8011b28:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011b2c:	f800 6f01 	strb.w	r6, [r0, #1]!
 8011b30:	e7f8      	b.n	8011b24 <MDNS::CreateMDNSMessage(unsigned int)+0x54>
 8011b32:	4414      	add	r4, r2
 8011b34:	4a03      	ldr	r2, [pc, #12]	; (8011b44 <MDNS::CreateMDNSMessage(unsigned int)+0x74>)
 8011b36:	1aa4      	subs	r4, r4, r2
 8011b38:	602c      	str	r4, [r5, #0]
 8011b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b3c:	2000a090 	mulcs	r0, r0, r0
 8011b40:	20009e68 	andcs	r9, r0, r8, ror #28
 8011b44:	2000a094 	mulcs	r0, r4, r0

08011b48 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>:
 8011b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b4c:	4d3f      	ldr	r5, [pc, #252]	; (8011c4c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x104>)
 8011b4e:	b085      	sub	sp, #20
 8011b50:	682c      	ldr	r4, [r5, #0]
 8011b52:	4680      	mov	r8, r0
 8011b54:	460f      	mov	r7, r1
 8011b56:	4616      	mov	r6, r2
 8011b58:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 8011b5c:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8011b60:	b11c      	cbz	r4, 8011b6a <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x22>
 8011b62:	692a      	ldr	r2, [r5, #16]
 8011b64:	2a00      	cmp	r2, #0
 8011b66:	d16d      	bne.n	8011c44 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xfc>
 8011b68:	2401      	movs	r4, #1
 8011b6a:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 8011b6e:	ea4f 1904 	mov.w	r9, r4, lsl #4
 8011b72:	8193      	strh	r3, [r2, #12]
 8011b74:	f882 b00e 	strb.w	fp, [r2, #14]
 8011b78:	2f00      	cmp	r7, #0
 8011b7a:	d153      	bne.n	8011c24 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xdc>
 8011b7c:	4630      	mov	r0, r6
 8011b7e:	f7ff fd8b 	bl	8011698 <strlen>
 8011b82:	4f33      	ldr	r7, [pc, #204]	; (8011c50 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x108>)
 8011b84:	683b      	ldr	r3, [r7, #0]
 8011b86:	331c      	adds	r3, #28
 8011b88:	4418      	add	r0, r3
 8011b8a:	f7ff fd85 	bl	8011698 <strlen>
 8011b8e:	3001      	adds	r0, #1
 8011b90:	f002 fdea 	bl	8014768 <operator new[](unsigned int)>
 8011b94:	6839      	ldr	r1, [r7, #0]
 8011b96:	f845 0009 	str.w	r0, [r5, r9]
 8011b9a:	311c      	adds	r1, #28
 8011b9c:	f7ff fd91 	bl	80116c2 <strcpy.isra.0>
 8011ba0:	f855 0009 	ldr.w	r0, [r5, r9]
 8011ba4:	4631      	mov	r1, r6
 8011ba6:	f7ff fd94 	bl	80116d2 <strcat.isra.0>
 8011baa:	4631      	mov	r1, r6
 8011bac:	4640      	mov	r0, r8
 8011bae:	f7ff fe0d 	bl	80117cc <MDNS::FindFirstDotFromRight(char const*) const>
 8011bb2:	eb05 0709 	add.w	r7, r5, r9
 8011bb6:	4605      	mov	r5, r0
 8011bb8:	f7ff fd6e 	bl	8011698 <strlen>
 8011bbc:	300d      	adds	r0, #13
 8011bbe:	f002 fdd3 	bl	8014768 <operator new[](unsigned int)>
 8011bc2:	4629      	mov	r1, r5
 8011bc4:	6078      	str	r0, [r7, #4]
 8011bc6:	f7ff fd7c 	bl	80116c2 <strcpy.isra.0>
 8011bca:	4922      	ldr	r1, [pc, #136]	; (8011c54 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10c>)
 8011bcc:	6878      	ldr	r0, [r7, #4]
 8011bce:	f7ff fd80 	bl	80116d2 <strcat.isra.0>
 8011bd2:	4921      	ldr	r1, [pc, #132]	; (8011c58 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x110>)
 8011bd4:	4b21      	ldr	r3, [pc, #132]	; (8011c5c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x114>)
 8011bd6:	6878      	ldr	r0, [r7, #4]
 8011bd8:	f1bb 0f01 	cmp.w	fp, #1
 8011bdc:	bf18      	it	ne
 8011bde:	4619      	movne	r1, r3
 8011be0:	f7ff fd77 	bl	80116d2 <strcat.isra.0>
 8011be4:	f1ba 0f00 	cmp.w	sl, #0
 8011be8:	d009      	beq.n	8011bfe <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xb6>
 8011bea:	4650      	mov	r0, sl
 8011bec:	f7ff fd54 	bl	8011698 <strlen>
 8011bf0:	3001      	adds	r0, #1
 8011bf2:	f002 fdb9 	bl	8014768 <operator new[](unsigned int)>
 8011bf6:	4651      	mov	r1, sl
 8011bf8:	60b8      	str	r0, [r7, #8]
 8011bfa:	f7ff fd62 	bl	80116c2 <strcpy.isra.0>
 8011bfe:	4621      	mov	r1, r4
 8011c00:	4640      	mov	r0, r8
 8011c02:	f7ff ff65 	bl	8011ad0 <MDNS::CreateMDNSMessage(unsigned int)>
 8011c06:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8011c0a:	4915      	ldr	r1, [pc, #84]	; (8011c60 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x118>)
 8011c0c:	4815      	ldr	r0, [pc, #84]	; (8011c64 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x11c>)
 8011c0e:	f851 2b04 	ldr.w	r2, [r1], #4
 8011c12:	9300      	str	r3, [sp, #0]
 8011c14:	4b14      	ldr	r3, [pc, #80]	; (8011c68 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x120>)
 8011c16:	7800      	ldrb	r0, [r0, #0]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	b292      	uxth	r2, r2
 8011c1c:	f7ff fc8c 	bl	8011538 <udp_send>
 8011c20:	2001      	movs	r0, #1
 8011c22:	e010      	b.n	8011c46 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xfe>
 8011c24:	4638      	mov	r0, r7
 8011c26:	f7ff fd37 	bl	8011698 <strlen>
 8011c2a:	9003      	str	r0, [sp, #12]
 8011c2c:	4630      	mov	r0, r6
 8011c2e:	f7ff fd33 	bl	8011698 <strlen>
 8011c32:	9b03      	ldr	r3, [sp, #12]
 8011c34:	4418      	add	r0, r3
 8011c36:	3001      	adds	r0, #1
 8011c38:	f002 fd96 	bl	8014768 <operator new[](unsigned int)>
 8011c3c:	4639      	mov	r1, r7
 8011c3e:	f845 0009 	str.w	r0, [r5, r9]
 8011c42:	e7ab      	b.n	8011b9c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x54>
 8011c44:	2000      	movs	r0, #0
 8011c46:	b005      	add	sp, #20
 8011c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c4c:	2000a06c 	andcs	sl, r0, ip, rrx
 8011c50:	2000a29c 	mulcs	r0, ip, r2
 8011c54:	0801751b 	stmdaeq	r1, {r0, r1, r3, r4, r8, sl, ip, sp, lr}
 8011c58:	08018508 	stmdaeq	r1, {r3, r8, sl, pc}
 8011c5c:	08018525 	stmdaeq	r1, {r0, r2, r5, r8, sl, pc}
 8011c60:	2000a090 	mulcs	r0, r0, r0
 8011c64:	20000008 	andcs	r0, r0, r8
 8011c68:	20009e64 	andcs	r9, r0, r4, ror #28

08011c6c <MDNS::HandleRequest(unsigned short)>:
 8011c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c70:	4605      	mov	r5, r0
 8011c72:	2700      	movs	r7, #0
 8011c74:	f04f 080c 	mov.w	r8, #12
 8011c78:	b0c5      	sub	sp, #276	; 0x114
 8011c7a:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011d40 <MDNS::HandleRequest(unsigned short)+0xd4>
 8011c7e:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8011d44 <MDNS::HandleRequest(unsigned short)+0xd8>
 8011c82:	9103      	str	r1, [sp, #12]
 8011c84:	9b03      	ldr	r3, [sp, #12]
 8011c86:	42bb      	cmp	r3, r7
 8011c88:	d956      	bls.n	8011d38 <MDNS::HandleRequest(unsigned short)+0xcc>
 8011c8a:	f8da 1000 	ldr.w	r1, [sl]
 8011c8e:	aa04      	add	r2, sp, #16
 8011c90:	4441      	add	r1, r8
 8011c92:	4628      	mov	r0, r5
 8011c94:	f7ff fd54 	bl	8011740 <MDNS::DecodeDNSNameNotation(char const*, char*)>
 8011c98:	f8da 2000 	ldr.w	r2, [sl]
 8011c9c:	4440      	add	r0, r8
 8011c9e:	1813      	adds	r3, r2, r0
 8011ca0:	885b      	ldrh	r3, [r3, #2]
 8011ca2:	f100 0804 	add.w	r8, r0, #4
 8011ca6:	ba5b      	rev16	r3, r3
 8011ca8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011cac:	2b01      	cmp	r3, #1
 8011cae:	d13e      	bne.n	8011d2e <MDNS::HandleRequest(unsigned short)+0xc2>
 8011cb0:	5a14      	ldrh	r4, [r2, r0]
 8011cb2:	4b25      	ldr	r3, [pc, #148]	; (8011d48 <MDNS::HandleRequest(unsigned short)+0xdc>)
 8011cb4:	ba64      	rev16	r4, r4
 8011cb6:	6818      	ldr	r0, [r3, #0]
 8011cb8:	a904      	add	r1, sp, #16
 8011cba:	b2a4      	uxth	r4, r4
 8011cbc:	f7ff fcf4 	bl	80116a8 <strcmp>
 8011cc0:	b970      	cbnz	r0, 8011ce0 <MDNS::HandleRequest(unsigned short)+0x74>
 8011cc2:	2c01      	cmp	r4, #1
 8011cc4:	d10c      	bne.n	8011ce0 <MDNS::HandleRequest(unsigned short)+0x74>
 8011cc6:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8011cca:	4920      	ldr	r1, [pc, #128]	; (8011d4c <MDNS::HandleRequest(unsigned short)+0xe0>)
 8011ccc:	4820      	ldr	r0, [pc, #128]	; (8011d50 <MDNS::HandleRequest(unsigned short)+0xe4>)
 8011cce:	f851 2b04 	ldr.w	r2, [r1], #4
 8011cd2:	9300      	str	r3, [sp, #0]
 8011cd4:	4b1f      	ldr	r3, [pc, #124]	; (8011d54 <MDNS::HandleRequest(unsigned short)+0xe8>)
 8011cd6:	7800      	ldrb	r0, [r0, #0]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	b292      	uxth	r2, r2
 8011cdc:	f7ff fc2c 	bl	8011538 <udp_send>
 8011ce0:	481d      	ldr	r0, [pc, #116]	; (8011d58 <MDNS::HandleRequest(unsigned short)+0xec>)
 8011ce2:	a904      	add	r1, sp, #16
 8011ce4:	f7ff fce0 	bl	80116a8 <strcmp>
 8011ce8:	f04f 0900 	mov.w	r9, #0
 8011cec:	4e1b      	ldr	r6, [pc, #108]	; (8011d5c <MDNS::HandleRequest(unsigned short)+0xf0>)
 8011cee:	9002      	str	r0, [sp, #8]
 8011cf0:	6833      	ldr	r3, [r6, #0]
 8011cf2:	b1c3      	cbz	r3, 8011d26 <MDNS::HandleRequest(unsigned short)+0xba>
 8011cf4:	9b02      	ldr	r3, [sp, #8]
 8011cf6:	b123      	cbz	r3, 8011d02 <MDNS::HandleRequest(unsigned short)+0x96>
 8011cf8:	6870      	ldr	r0, [r6, #4]
 8011cfa:	a904      	add	r1, sp, #16
 8011cfc:	f7ff fcd4 	bl	80116a8 <strcmp>
 8011d00:	b988      	cbnz	r0, 8011d26 <MDNS::HandleRequest(unsigned short)+0xba>
 8011d02:	2c0c      	cmp	r4, #12
 8011d04:	d10f      	bne.n	8011d26 <MDNS::HandleRequest(unsigned short)+0xba>
 8011d06:	4649      	mov	r1, r9
 8011d08:	4628      	mov	r0, r5
 8011d0a:	f7ff fee1 	bl	8011ad0 <MDNS::CreateMDNSMessage(unsigned int)>
 8011d0e:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8011d12:	480f      	ldr	r0, [pc, #60]	; (8011d50 <MDNS::HandleRequest(unsigned short)+0xe4>)
 8011d14:	9300      	str	r3, [sp, #0]
 8011d16:	4b0f      	ldr	r3, [pc, #60]	; (8011d54 <MDNS::HandleRequest(unsigned short)+0xe8>)
 8011d18:	f8bb 2000 	ldrh.w	r2, [fp]
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	4910      	ldr	r1, [pc, #64]	; (8011d60 <MDNS::HandleRequest(unsigned short)+0xf4>)
 8011d20:	7800      	ldrb	r0, [r0, #0]
 8011d22:	f7ff fc09 	bl	8011538 <udp_send>
 8011d26:	3610      	adds	r6, #16
 8011d28:	f1b9 0f00 	cmp.w	r9, #0
 8011d2c:	d001      	beq.n	8011d32 <MDNS::HandleRequest(unsigned short)+0xc6>
 8011d2e:	3701      	adds	r7, #1
 8011d30:	e7a8      	b.n	8011c84 <MDNS::HandleRequest(unsigned short)+0x18>
 8011d32:	f04f 0901 	mov.w	r9, #1
 8011d36:	e7db      	b.n	8011cf0 <MDNS::HandleRequest(unsigned short)+0x84>
 8011d38:	b045      	add	sp, #276	; 0x114
 8011d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d3e:	bf00      	nop
 8011d40:	2000a298 	mulcs	r0, r8, r2
 8011d44:	2000a090 	mulcs	r0, r0, r0
 8011d48:	2000a294 	mulcs	r0, r4, r2
 8011d4c:	20009e68 	andcs	r9, r0, r8, ror #28
 8011d50:	20000008 	andcs	r0, r0, r8
 8011d54:	20009e64 	andcs	r9, r0, r4, ror #28
 8011d58:	08018513 	stmdaeq	r1, {r0, r1, r4, r8, sl, pc}
 8011d5c:	2000a06c 	andcs	sl, r0, ip, rrx
 8011d60:	2000a094 	mulcs	r0, r4, r0

08011d64 <MDNS::Parse()>:
 8011d64:	4b08      	ldr	r3, [pc, #32]	; (8011d88 <MDNS::Parse()+0x24>)
 8011d66:	681a      	ldr	r2, [r3, #0]
 8011d68:	8853      	ldrh	r3, [r2, #2]
 8011d6a:	ba5b      	rev16	r3, r3
 8011d6c:	b299      	uxth	r1, r3
 8011d6e:	041b      	lsls	r3, r3, #16
 8011d70:	d408      	bmi.n	8011d84 <MDNS::Parse()+0x20>
 8011d72:	0b8b      	lsrs	r3, r1, #14
 8011d74:	d106      	bne.n	8011d84 <MDNS::Parse()+0x20>
 8011d76:	8891      	ldrh	r1, [r2, #4]
 8011d78:	b28b      	uxth	r3, r1
 8011d7a:	b11b      	cbz	r3, 8011d84 <MDNS::Parse()+0x20>
 8011d7c:	ba49      	rev16	r1, r1
 8011d7e:	b289      	uxth	r1, r1
 8011d80:	f7ff bf74 	b.w	8011c6c <MDNS::HandleRequest(unsigned short)>
 8011d84:	4770      	bx	lr
 8011d86:	bf00      	nop
 8011d88:	2000a298 	mulcs	r0, r8, r2

08011d8c <MDNS::Run()>:
 8011d8c:	b538      	push	{r3, r4, r5, lr}
 8011d8e:	4d0c      	ldr	r5, [pc, #48]	; (8011dc0 <MDNS::Run()+0x34>)
 8011d90:	4604      	mov	r4, r0
 8011d92:	480c      	ldr	r0, [pc, #48]	; (8011dc4 <MDNS::Run()+0x38>)
 8011d94:	462b      	mov	r3, r5
 8011d96:	4a0c      	ldr	r2, [pc, #48]	; (8011dc8 <MDNS::Run()+0x3c>)
 8011d98:	490c      	ldr	r1, [pc, #48]	; (8011dcc <MDNS::Run()+0x40>)
 8011d9a:	7800      	ldrb	r0, [r0, #0]
 8011d9c:	f7ff fba6 	bl	80114ec <udp_recv2>
 8011da0:	4b0b      	ldr	r3, [pc, #44]	; (8011dd0 <MDNS::Run()+0x44>)
 8011da2:	882a      	ldrh	r2, [r5, #0]
 8011da4:	8018      	strh	r0, [r3, #0]
 8011da6:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8011daa:	429a      	cmp	r2, r3
 8011dac:	d106      	bne.n	8011dbc <MDNS::Run()+0x30>
 8011dae:	280c      	cmp	r0, #12
 8011db0:	d904      	bls.n	8011dbc <MDNS::Run()+0x30>
 8011db2:	4620      	mov	r0, r4
 8011db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011db8:	f7ff bfd4 	b.w	8011d64 <MDNS::Parse()>
 8011dbc:	bd38      	pop	{r3, r4, r5, pc}
 8011dbe:	bf00      	nop
 8011dc0:	20009e60 	andcs	r9, r0, r0, ror #28
 8011dc4:	20000008 	andcs	r0, r0, r8
 8011dc8:	20009e5c 	andcs	r9, r0, ip, asr lr
 8011dcc:	2000a298 	mulcs	r0, r8, r2
 8011dd0:	2000a08c 	andcs	sl, r0, ip, lsl #1

08011dd4 <MDNS::Print()>:
 8011dd4:	b510      	push	{r4, lr}
 8011dd6:	4816      	ldr	r0, [pc, #88]	; (8011e30 <MDNS::Print()+0x5c>)
 8011dd8:	f7f7 fc48 	bl	800966c <printf>
 8011ddc:	4b15      	ldr	r3, [pc, #84]	; (8011e34 <MDNS::Print()+0x60>)
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	3301      	adds	r3, #1
 8011de2:	d104      	bne.n	8011dee <MDNS::Print()+0x1a>
 8011de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011de8:	4813      	ldr	r0, [pc, #76]	; (8011e38 <MDNS::Print()+0x64>)
 8011dea:	f7f7 bc3f 	b.w	800966c <printf>
 8011dee:	4b13      	ldr	r3, [pc, #76]	; (8011e3c <MDNS::Print()+0x68>)
 8011df0:	4c13      	ldr	r4, [pc, #76]	; (8011e40 <MDNS::Print()+0x6c>)
 8011df2:	6819      	ldr	r1, [r3, #0]
 8011df4:	4813      	ldr	r0, [pc, #76]	; (8011e44 <MDNS::Print()+0x70>)
 8011df6:	f7f7 fc39 	bl	800966c <printf>
 8011dfa:	6823      	ldr	r3, [r4, #0]
 8011dfc:	b14b      	cbz	r3, 8011e12 <MDNS::Print()+0x3e>
 8011dfe:	4a12      	ldr	r2, [pc, #72]	; (8011e48 <MDNS::Print()+0x74>)
 8011e00:	68a3      	ldr	r3, [r4, #8]
 8011e02:	6861      	ldr	r1, [r4, #4]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	bf08      	it	eq
 8011e08:	4613      	moveq	r3, r2
 8011e0a:	4810      	ldr	r0, [pc, #64]	; (8011e4c <MDNS::Print()+0x78>)
 8011e0c:	89a2      	ldrh	r2, [r4, #12]
 8011e0e:	f7f7 fc2d 	bl	800966c <printf>
 8011e12:	6923      	ldr	r3, [r4, #16]
 8011e14:	b15b      	cbz	r3, 8011e2e <MDNS::Print()+0x5a>
 8011e16:	69a3      	ldr	r3, [r4, #24]
 8011e18:	4a0b      	ldr	r2, [pc, #44]	; (8011e48 <MDNS::Print()+0x74>)
 8011e1a:	6961      	ldr	r1, [r4, #20]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	bf08      	it	eq
 8011e20:	4613      	moveq	r3, r2
 8011e22:	480a      	ldr	r0, [pc, #40]	; (8011e4c <MDNS::Print()+0x78>)
 8011e24:	8ba2      	ldrh	r2, [r4, #28]
 8011e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e2a:	f7f7 bc1f 	b.w	800966c <printf>
 8011e2e:	bd10      	pop	{r4, pc}
 8011e30:	08018530 	stmdaeq	r1, {r4, r5, r8, sl, pc}
 8011e34:	20000008 	andcs	r0, r0, r8
 8011e38:	08018536 	stmdaeq	r1, {r1, r2, r4, r5, r8, sl, pc}
 8011e3c:	2000a294 	mulcs	r0, r4, r2
 8011e40:	2000a06c 	andcs	sl, r0, ip, rrx
 8011e44:	08018544 	stmdaeq	r1, {r2, r6, r8, sl, pc}
 8011e48:	0801783d 	stmdaeq	r1, {r0, r2, r3, r4, r5, fp, ip, sp, lr}
 8011e4c:	08018550 	stmdaeq	r1, {r4, r6, r8, sl, pc}

08011e50 <strncpy.constprop.0.isra.0>:
 8011e50:	233f      	movs	r3, #63	; 0x3f
 8011e52:	3901      	subs	r1, #1
 8011e54:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011e58:	b92a      	cbnz	r2, 8011e66 <strncpy.constprop.0.isra.0+0x16>
 8011e5a:	4403      	add	r3, r0
 8011e5c:	4298      	cmp	r0, r3
 8011e5e:	d007      	beq.n	8011e70 <strncpy.constprop.0.isra.0+0x20>
 8011e60:	f800 2b01 	strb.w	r2, [r0], #1
 8011e64:	e7fa      	b.n	8011e5c <strncpy.constprop.0.isra.0+0xc>
 8011e66:	3b01      	subs	r3, #1
 8011e68:	f800 2b01 	strb.w	r2, [r0], #1
 8011e6c:	d1f2      	bne.n	8011e54 <strncpy.constprop.0.isra.0+0x4>
 8011e6e:	4770      	bx	lr
 8011e70:	4770      	bx	lr
	...

08011e74 <Network::Network()>:
 8011e74:	4a11      	ldr	r2, [pc, #68]	; (8011ebc <Network::Network()+0x48>)
 8011e76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8011e7a:	6010      	str	r0, [r2, #0]
 8011e7c:	2201      	movs	r2, #1
 8011e7e:	2300      	movs	r3, #0
 8011e80:	e9c0 1200 	strd	r1, r2, [r0]
 8011e84:	2200      	movs	r2, #0
 8011e86:	e9c0 332f 	strd	r3, r3, [r0, #188]	; 0xbc
 8011e8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011e8e:	490c      	ldr	r1, [pc, #48]	; (8011ec0 <Network::Network()+0x4c>)
 8011e90:	60c2      	str	r2, [r0, #12]
 8011e92:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
 8011e96:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
 8011e9a:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
 8011e9e:	6083      	str	r3, [r0, #8]
 8011ea0:	6183      	str	r3, [r0, #24]
 8011ea2:	7703      	strb	r3, [r0, #28]
 8011ea4:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 8011ea8:	f100 02a2 	add.w	r2, r0, #162	; 0xa2
 8011eac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011eb0:	f802 3b01 	strb.w	r3, [r2], #1
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d1f9      	bne.n	8011eac <Network::Network()+0x38>
 8011eb8:	4770      	bx	lr
 8011eba:	bf00      	nop
 8011ebc:	2000a29c 	mulcs	r0, ip, r2
 8011ec0:	0801855b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r8, sl, pc}

08011ec4 <Network::Shutdown()>:
 8011ec4:	b508      	push	{r3, lr}
 8011ec6:	30b8      	adds	r0, #184	; 0xb8
 8011ec8:	f001 fcde 	bl	8013888 <NetworkDisplay::ShowShutdown()>
 8011ecc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011ed0:	f7f5 b98e 	b.w	80071f0 <net_shutdown>

08011ed4 <Network::Begin(unsigned short)>:
 8011ed4:	4608      	mov	r0, r1
 8011ed6:	f7ff ba99 	b.w	801140c <udp_bind>

08011eda <Network::End(unsigned short)>:
 8011eda:	4608      	mov	r0, r1
 8011edc:	f7ff bab0 	b.w	8011440 <udp_unbind>

08011ee0 <Network::MacAddressCopyTo(unsigned char*)>:
 8011ee0:	f100 039c 	add.w	r3, r0, #156	; 0x9c
 8011ee4:	3901      	subs	r1, #1
 8011ee6:	30a2      	adds	r0, #162	; 0xa2
 8011ee8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011eec:	4283      	cmp	r3, r0
 8011eee:	f801 2f01 	strb.w	r2, [r1, #1]!
 8011ef2:	d1f9      	bne.n	8011ee8 <Network::MacAddressCopyTo(unsigned char*)+0x8>
 8011ef4:	4770      	bx	lr

08011ef6 <Network::JoinGroup(int, unsigned int)>:
 8011ef6:	4610      	mov	r0, r2
 8011ef8:	f000 bfaa 	b.w	8012e50 <igmp_join>

08011efc <Network::LeaveGroup(int, unsigned int)>:
 8011efc:	4610      	mov	r0, r2
 8011efe:	f000 bfd3 	b.w	8012ea8 <igmp_leave>

08011f02 <Network::SetDefaultIp()>:
 8011f02:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8011f06:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
 8011f0a:	041b      	lsls	r3, r3, #16
 8011f0c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011f10:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
 8011f14:	3302      	adds	r3, #2
 8011f16:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8011f1a:	22ff      	movs	r2, #255	; 0xff
 8011f1c:	6103      	str	r3, [r0, #16]
 8011f1e:	e9c0 3205 	strd	r3, r2, [r0, #20]
 8011f22:	4770      	bx	lr

08011f24 <Network::Init(NetworkParamsStore*)>:
 8011f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f28:	b08b      	sub	sp, #44	; 0x2c
 8011f2a:	4604      	mov	r4, r0
 8011f2c:	a806      	add	r0, sp, #24
 8011f2e:	f000 fa57 	bl	80123e0 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 8011f32:	a806      	add	r0, sp, #24
 8011f34:	f000 fa64 	bl	8012400 <NetworkParams::Load()>
 8011f38:	b110      	cbz	r0, 8011f40 <Network::Init(NetworkParamsStore*)+0x1c>
 8011f3a:	a806      	add	r0, sp, #24
 8011f3c:	f000 fc49 	bl	80127d2 <NetworkParams::Dump()>
 8011f40:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
 8011f44:	f8df 8224 	ldr.w	r8, [pc, #548]	; 801216c <Network::Init(NetworkParamsStore*)+0x248>
 8011f48:	4628      	mov	r0, r5
 8011f4a:	f104 079c 	add.w	r7, r4, #156	; 0x9c
 8011f4e:	f001 fc83 	bl	8013858 <NetworkDisplay::ShowEmacStart()>
 8011f52:	4638      	mov	r0, r7
 8011f54:	f003 faea 	bl	801552c <emac_start>
 8011f58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011f5c:	f104 061c 	add.w	r6, r4, #28
 8011f60:	9307      	str	r3, [sp, #28]
 8011f62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011f66:	9308      	str	r3, [sp, #32]
 8011f68:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8011f6e:	f898 3014 	ldrb.w	r3, [r8, #20]
 8011f72:	7063      	strb	r3, [r4, #1]
 8011f74:	f8d8 3000 	ldr.w	r3, [r8]
 8011f78:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 8011f7c:	bf18      	it	ne
 8011f7e:	f8d8 2055 	ldrne.w	r2, [r8, #85]	; 0x55
 8011f82:	061b      	lsls	r3, r3, #24
 8011f84:	bf58      	it	pl
 8011f86:	2300      	movpl	r3, #0
 8011f88:	60a2      	str	r2, [r4, #8]
 8011f8a:	bf48      	it	mi
 8011f8c:	f8d8 3059 	ldrmi.w	r3, [r8, #89]	; 0x59
 8011f90:	60e3      	str	r3, [r4, #12]
 8011f92:	f898 3015 	ldrb.w	r3, [r8, #21]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d15e      	bne.n	8012058 <Network::Init(NetworkParamsStore*)+0x134>
 8011f9a:	4632      	mov	r2, r6
 8011f9c:	4874      	ldr	r0, [pc, #464]	; (8012170 <Network::Init(NetworkParamsStore*)+0x24c>)
 8011f9e:	f810 1b01 	ldrb.w	r1, [r0], #1
 8011fa2:	f103 0c01 	add.w	ip, r3, #1
 8011fa6:	b119      	cbz	r1, 8011fb0 <Network::Init(NetworkParamsStore*)+0x8c>
 8011fa8:	4663      	mov	r3, ip
 8011faa:	f802 1b01 	strb.w	r1, [r2], #1
 8011fae:	e7f6      	b.n	8011f9e <Network::Init(NetworkParamsStore*)+0x7a>
 8011fb0:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
 8011fb4:	18e1      	adds	r1, r4, r3
 8011fb6:	0910      	lsrs	r0, r2, #4
 8011fb8:	2a9f      	cmp	r2, #159	; 0x9f
 8011fba:	f002 020f 	and.w	r2, r2, #15
 8011fbe:	bf94      	ite	ls
 8011fc0:	3030      	addls	r0, #48	; 0x30
 8011fc2:	3037      	addhi	r0, #55	; 0x37
 8011fc4:	2a09      	cmp	r2, #9
 8011fc6:	bf94      	ite	ls
 8011fc8:	3230      	addls	r2, #48	; 0x30
 8011fca:	3237      	addhi	r2, #55	; 0x37
 8011fcc:	44a4      	add	ip, r4
 8011fce:	7708      	strb	r0, [r1, #28]
 8011fd0:	f88c 201c 	strb.w	r2, [ip, #28]
 8011fd4:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
 8011fd8:	f103 0e02 	add.w	lr, r3, #2
 8011fdc:	0910      	lsrs	r0, r2, #4
 8011fde:	2a9f      	cmp	r2, #159	; 0x9f
 8011fe0:	f002 020f 	and.w	r2, r2, #15
 8011fe4:	bf94      	ite	ls
 8011fe6:	3030      	addls	r0, #48	; 0x30
 8011fe8:	3037      	addhi	r0, #55	; 0x37
 8011fea:	f103 0903 	add.w	r9, r3, #3
 8011fee:	2a09      	cmp	r2, #9
 8011ff0:	44a6      	add	lr, r4
 8011ff2:	f88e 001c 	strb.w	r0, [lr, #28]
 8011ff6:	bf94      	ite	ls
 8011ff8:	3230      	addls	r2, #48	; 0x30
 8011ffa:	3237      	addhi	r2, #55	; 0x37
 8011ffc:	eb04 0009 	add.w	r0, r4, r9
 8012000:	7702      	strb	r2, [r0, #28]
 8012002:	f894 20a1 	ldrb.w	r2, [r4, #161]	; 0xa1
 8012006:	f103 0c04 	add.w	ip, r3, #4
 801200a:	0910      	lsrs	r0, r2, #4
 801200c:	2a9f      	cmp	r2, #159	; 0x9f
 801200e:	f002 020f 	and.w	r2, r2, #15
 8012012:	bf94      	ite	ls
 8012014:	3030      	addls	r0, #48	; 0x30
 8012016:	3037      	addhi	r0, #55	; 0x37
 8012018:	3305      	adds	r3, #5
 801201a:	2a09      	cmp	r2, #9
 801201c:	4423      	add	r3, r4
 801201e:	44a4      	add	ip, r4
 8012020:	bf94      	ite	ls
 8012022:	3230      	addls	r2, #48	; 0x30
 8012024:	3237      	addhi	r2, #55	; 0x37
 8012026:	f88c 001c 	strb.w	r0, [ip, #28]
 801202a:	771a      	strb	r2, [r3, #28]
 801202c:	2300      	movs	r3, #0
 801202e:	f881 3022 	strb.w	r3, [r1, #34]	; 0x22
 8012032:	7863      	ldrb	r3, [r4, #1]
 8012034:	b95b      	cbnz	r3, 801204e <Network::Init(NetworkParamsStore*)+0x12a>
 8012036:	9b07      	ldr	r3, [sp, #28]
 8012038:	b9b3      	cbnz	r3, 8012068 <Network::Init(NetworkParamsStore*)+0x144>
 801203a:	4620      	mov	r0, r4
 801203c:	f7ff ff61 	bl	8011f02 <Network::SetDefaultIp()>
 8012040:	6923      	ldr	r3, [r4, #16]
 8012042:	69a2      	ldr	r2, [r4, #24]
 8012044:	9307      	str	r3, [sp, #28]
 8012046:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801204a:	7863      	ldrb	r3, [r4, #1]
 801204c:	b19b      	cbz	r3, 8012076 <Network::Init(NetworkParamsStore*)+0x152>
 801204e:	2101      	movs	r1, #1
 8012050:	4628      	mov	r0, r5
 8012052:	f001 fc1f 	bl	8013894 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8012056:	e00e      	b.n	8012076 <Network::Init(NetworkParamsStore*)+0x152>
 8012058:	4630      	mov	r0, r6
 801205a:	4946      	ldr	r1, [pc, #280]	; (8012174 <Network::Init(NetworkParamsStore*)+0x250>)
 801205c:	f7ff fef8 	bl	8011e50 <strncpy.constprop.0.isra.0>
 8012060:	2300      	movs	r3, #0
 8012062:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 8012066:	e7e4      	b.n	8012032 <Network::Init(NetworkParamsStore*)+0x10e>
 8012068:	69a1      	ldr	r1, [r4, #24]
 801206a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801206e:	4053      	eors	r3, r2
 8012070:	420b      	tst	r3, r1
 8012072:	d000      	beq.n	8012076 <Network::Init(NetworkParamsStore*)+0x152>
 8012074:	9209      	str	r2, [sp, #36]	; 0x24
 8012076:	1ce3      	adds	r3, r4, #3
 8012078:	f104 0901 	add.w	r9, r4, #1
 801207c:	9302      	str	r3, [sp, #8]
 801207e:	9300      	str	r3, [sp, #0]
 8012080:	4632      	mov	r2, r6
 8012082:	464b      	mov	r3, r9
 8012084:	4638      	mov	r0, r7
 8012086:	a907      	add	r1, sp, #28
 8012088:	f7f5 f862 	bl	8007150 <net_init>
 801208c:	78e3      	ldrb	r3, [r4, #3]
 801208e:	b11b      	cbz	r3, 8012098 <Network::Init(NetworkParamsStore*)+0x174>
 8012090:	2104      	movs	r1, #4
 8012092:	4628      	mov	r0, r5
 8012094:	f001 fbfe 	bl	8013894 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8012098:	f898 3014 	ldrb.w	r3, [r8, #20]
 801209c:	f898 a05d 	ldrb.w	sl, [r8, #93]	; 0x5d
 80120a0:	9304      	str	r3, [sp, #16]
 80120a2:	233c      	movs	r3, #60	; 0x3c
 80120a4:	fb03 f30a 	mul.w	r3, r3, sl
 80120a8:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8012178 <Network::Init(NetworkParamsStore*)+0x254>
 80120ac:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 801217c <Network::Init(NetworkParamsStore*)+0x258>
 80120b0:	9303      	str	r3, [sp, #12]
 80120b2:	78e3      	ldrb	r3, [r4, #3]
 80120b4:	b95b      	cbnz	r3, 80120ce <Network::Init(NetworkParamsStore*)+0x1aa>
 80120b6:	9b07      	ldr	r3, [sp, #28]
 80120b8:	4628      	mov	r0, r5
 80120ba:	6123      	str	r3, [r4, #16]
 80120bc:	9b08      	ldr	r3, [sp, #32]
 80120be:	61a3      	str	r3, [r4, #24]
 80120c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120c2:	6163      	str	r3, [r4, #20]
 80120c4:	f001 fbce 	bl	8013864 <NetworkDisplay::ShowIp()>
 80120c8:	b00b      	add	sp, #44	; 0x2c
 80120ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120ce:	f1ba 0f00 	cmp.w	sl, #0
 80120d2:	d0f0      	beq.n	80120b6 <Network::Init(NetworkParamsStore*)+0x192>
 80120d4:	9b04      	ldr	r3, [sp, #16]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d0ed      	beq.n	80120b6 <Network::Init(NetworkParamsStore*)+0x192>
 80120da:	2104      	movs	r1, #4
 80120dc:	f8d8 0000 	ldr.w	r0, [r8]
 80120e0:	f002 fa58 	bl	8014594 <LedBlink::SetMode(ledblink::Mode)>
 80120e4:	2103      	movs	r1, #3
 80120e6:	4628      	mov	r0, r5
 80120e8:	f001 fbd4 	bl	8013894 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 80120ec:	2000      	movs	r0, #0
 80120ee:	f002 fd1b 	bl	8014b28 <time>
 80120f2:	9005      	str	r0, [sp, #20]
 80120f4:	2000      	movs	r0, #0
 80120f6:	f002 fd17 	bl	8014b28 <time>
 80120fa:	9b05      	ldr	r3, [sp, #20]
 80120fc:	1ac0      	subs	r0, r0, r3
 80120fe:	9b03      	ldr	r3, [sp, #12]
 8012100:	4298      	cmp	r0, r3
 8012102:	da1a      	bge.n	801213a <Network::Init(NetworkParamsStore*)+0x216>
 8012104:	f8d8 3000 	ldr.w	r3, [r8]
 8012108:	491d      	ldr	r1, [pc, #116]	; (8012180 <Network::Init(NetworkParamsStore*)+0x25c>)
 801210a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 801210e:	f1bc 0f00 	cmp.w	ip, #0
 8012112:	d0ef      	beq.n	80120f4 <Network::Init(NetworkParamsStore*)+0x1d0>
 8012114:	6808      	ldr	r0, [r1, #0]
 8012116:	695a      	ldr	r2, [r3, #20]
 8012118:	1a80      	subs	r0, r0, r2
 801211a:	4584      	cmp	ip, r0
 801211c:	d8ea      	bhi.n	80120f4 <Network::Init(NetworkParamsStore*)+0x1d0>
 801211e:	6808      	ldr	r0, [r1, #0]
 8012120:	6158      	str	r0, [r3, #20]
 8012122:	6918      	ldr	r0, [r3, #16]
 8012124:	2801      	cmp	r0, #1
 8012126:	f080 0201 	eor.w	r2, r0, #1
 801212a:	611a      	str	r2, [r3, #16]
 801212c:	bf16      	itet	ne
 801212e:	2301      	movne	r3, #1
 8012130:	f8cb 0014 	streq.w	r0, [fp, #20]
 8012134:	f8cb 3010 	strne.w	r3, [fp, #16]
 8012138:	e7dc      	b.n	80120f4 <Network::Init(NetworkParamsStore*)+0x1d0>
 801213a:	2101      	movs	r1, #1
 801213c:	4628      	mov	r0, r5
 801213e:	f001 fba9 	bl	8013894 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8012142:	2101      	movs	r1, #1
 8012144:	f8d8 0000 	ldr.w	r0, [r8]
 8012148:	f002 fa24 	bl	8014594 <LedBlink::SetMode(ledblink::Mode)>
 801214c:	2301      	movs	r3, #1
 801214e:	7063      	strb	r3, [r4, #1]
 8012150:	2300      	movs	r3, #0
 8012152:	70e3      	strb	r3, [r4, #3]
 8012154:	9b02      	ldr	r3, [sp, #8]
 8012156:	4632      	mov	r2, r6
 8012158:	9300      	str	r3, [sp, #0]
 801215a:	4638      	mov	r0, r7
 801215c:	464b      	mov	r3, r9
 801215e:	a907      	add	r1, sp, #28
 8012160:	f7f4 fff6 	bl	8007150 <net_init>
 8012164:	7863      	ldrb	r3, [r4, #1]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d0a3      	beq.n	80120b2 <Network::Init(NetworkParamsStore*)+0x18e>
 801216a:	e7a4      	b.n	80120b6 <Network::Init(NetworkParamsStore*)+0x192>
 801216c:	2000a2a0 	andcs	sl, r0, r0, lsr #5
 8012170:	08018560 	stmdaeq	r1, {r5, r6, r8, sl, pc}
 8012174:	2000a2b5 			; <UNDEFINED> instruction: 0x2000a2b5
 8012178:	2000a9c0 	andcs	sl, r0, r0, asr #19
 801217c:	40011000 	andmi	r1, r1, r0
 8012180:	2000a9dc 	ldrdcs	sl, [r0], -ip

08012184 <Network::SetIp(unsigned int)>:
 8012184:	7843      	ldrb	r3, [r0, #1]
 8012186:	b570      	push	{r4, r5, r6, lr}
 8012188:	4604      	mov	r4, r0
 801218a:	460d      	mov	r5, r1
 801218c:	2600      	movs	r6, #0
 801218e:	b113      	cbz	r3, 8012196 <Network::SetIp(unsigned int)+0x12>
 8012190:	7046      	strb	r6, [r0, #1]
 8012192:	f7fe feef 	bl	8010f74 <net_dhcp_release>
 8012196:	70e6      	strb	r6, [r4, #3]
 8012198:	b975      	cbnz	r5, 80121b8 <Network::SetIp(unsigned int)+0x34>
 801219a:	4620      	mov	r0, r4
 801219c:	f7ff feb1 	bl	8011f02 <Network::SetDefaultIp()>
 80121a0:	6920      	ldr	r0, [r4, #16]
 80121a2:	f7fe fea3 	bl	8010eec <net_set_ip>
 80121a6:	34b8      	adds	r4, #184	; 0xb8
 80121a8:	4620      	mov	r0, r4
 80121aa:	f001 fb5b 	bl	8013864 <NetworkDisplay::ShowIp()>
 80121ae:	4620      	mov	r0, r4
 80121b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80121b4:	f001 bb5c 	b.w	8013870 <NetworkDisplay::ShowNetMask()>
 80121b8:	4628      	mov	r0, r5
 80121ba:	f7fe fe97 	bl	8010eec <net_set_ip>
 80121be:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 80121c2:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80121c6:	2800      	cmp	r0, #0
 80121c8:	d0ed      	beq.n	80121a6 <Network::SetIp(unsigned int)+0x22>
 80121ca:	6803      	ldr	r3, [r0, #0]
 80121cc:	4629      	mov	r1, r5
 80121ce:	689b      	ldr	r3, [r3, #8]
 80121d0:	4798      	blx	r3
 80121d2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 80121d6:	2100      	movs	r1, #0
 80121d8:	6803      	ldr	r3, [r0, #0]
 80121da:	699b      	ldr	r3, [r3, #24]
 80121dc:	4798      	blx	r3
 80121de:	e7e2      	b.n	80121a6 <Network::SetIp(unsigned int)+0x22>

080121e0 <Network::SetNetmask(unsigned int)>:
 80121e0:	6982      	ldr	r2, [r0, #24]
 80121e2:	b510      	push	{r4, lr}
 80121e4:	428a      	cmp	r2, r1
 80121e6:	4604      	mov	r4, r0
 80121e8:	d00f      	beq.n	801220a <Network::SetNetmask(unsigned int)+0x2a>
 80121ea:	6181      	str	r1, [r0, #24]
 80121ec:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
 80121f0:	b110      	cbz	r0, 80121f8 <Network::SetNetmask(unsigned int)+0x18>
 80121f2:	6803      	ldr	r3, [r0, #0]
 80121f4:	68db      	ldr	r3, [r3, #12]
 80121f6:	4798      	blx	r3
 80121f8:	34b8      	adds	r4, #184	; 0xb8
 80121fa:	4620      	mov	r0, r4
 80121fc:	f001 fb32 	bl	8013864 <NetworkDisplay::ShowIp()>
 8012200:	4620      	mov	r0, r4
 8012202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012206:	f001 bb33 	b.w	8013870 <NetworkDisplay::ShowNetMask()>
 801220a:	bd10      	pop	{r4, pc}

0801220c <Network::SetGatewayIp(unsigned int)>:
 801220c:	b538      	push	{r3, r4, r5, lr}
 801220e:	6943      	ldr	r3, [r0, #20]
 8012210:	4604      	mov	r4, r0
 8012212:	428b      	cmp	r3, r1
 8012214:	460d      	mov	r5, r1
 8012216:	d00f      	beq.n	8012238 <Network::SetGatewayIp(unsigned int)+0x2c>
 8012218:	4608      	mov	r0, r1
 801221a:	f7fe fe77 	bl	8010f0c <net_set_gw>
 801221e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8012222:	b118      	cbz	r0, 801222c <Network::SetGatewayIp(unsigned int)+0x20>
 8012224:	6803      	ldr	r3, [r0, #0]
 8012226:	4629      	mov	r1, r5
 8012228:	691b      	ldr	r3, [r3, #16]
 801222a:	4798      	blx	r3
 801222c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 8012230:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012234:	f001 bb22 	b.w	801387c <NetworkDisplay::ShowGatewayIp()>
 8012238:	bd38      	pop	{r3, r4, r5, pc}
	...

0801223c <Network::EnableDhcp()>:
 801223c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801223e:	4e23      	ldr	r6, [pc, #140]	; (80122cc <Network::EnableDhcp()+0x90>)
 8012240:	4604      	mov	r4, r0
 8012242:	6833      	ldr	r3, [r6, #0]
 8012244:	b085      	sub	sp, #20
 8012246:	791f      	ldrb	r7, [r3, #4]
 8012248:	b137      	cbz	r7, 8012258 <Network::EnableDhcp()+0x1c>
 801224a:	2200      	movs	r2, #0
 801224c:	2104      	movs	r1, #4
 801224e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8012252:	711a      	strb	r2, [r3, #4]
 8012254:	f002 fdec 	bl	8014e30 <fwdgt_config>
 8012258:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
 801225c:	2101      	movs	r1, #1
 801225e:	4628      	mov	r0, r5
 8012260:	f001 fb18 	bl	8013894 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8012264:	1ce2      	adds	r2, r4, #3
 8012266:	f104 011c 	add.w	r1, r4, #28
 801226a:	a801      	add	r0, sp, #4
 801226c:	f7fe fe56 	bl	8010f1c <net_set_dhcp>
 8012270:	78e3      	ldrb	r3, [r4, #3]
 8012272:	7060      	strb	r0, [r4, #1]
 8012274:	b343      	cbz	r3, 80122c8 <Network::EnableDhcp()+0x8c>
 8012276:	2104      	movs	r1, #4
 8012278:	4628      	mov	r0, r5
 801227a:	f001 fb0b 	bl	8013894 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 801227e:	b16f      	cbz	r7, 801229c <Network::EnableDhcp()+0x60>
 8012280:	2102      	movs	r1, #2
 8012282:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8012286:	6836      	ldr	r6, [r6, #0]
 8012288:	f002 fdd2 	bl	8014e30 <fwdgt_config>
 801228c:	2801      	cmp	r0, #1
 801228e:	bf0c      	ite	eq
 8012290:	2301      	moveq	r3, #1
 8012292:	2300      	movne	r3, #0
 8012294:	7133      	strb	r3, [r6, #4]
 8012296:	d101      	bne.n	801229c <Network::EnableDhcp()+0x60>
 8012298:	f002 fdba 	bl	8014e10 <fwdgt_enable>
 801229c:	9b01      	ldr	r3, [sp, #4]
 801229e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 80122a2:	6123      	str	r3, [r4, #16]
 80122a4:	9b02      	ldr	r3, [sp, #8]
 80122a6:	61a3      	str	r3, [r4, #24]
 80122a8:	9b03      	ldr	r3, [sp, #12]
 80122aa:	6163      	str	r3, [r4, #20]
 80122ac:	b118      	cbz	r0, 80122b6 <Network::EnableDhcp()+0x7a>
 80122ae:	6803      	ldr	r3, [r0, #0]
 80122b0:	7861      	ldrb	r1, [r4, #1]
 80122b2:	699b      	ldr	r3, [r3, #24]
 80122b4:	4798      	blx	r3
 80122b6:	4628      	mov	r0, r5
 80122b8:	f001 fad4 	bl	8013864 <NetworkDisplay::ShowIp()>
 80122bc:	4628      	mov	r0, r5
 80122be:	f001 fad7 	bl	8013870 <NetworkDisplay::ShowNetMask()>
 80122c2:	7860      	ldrb	r0, [r4, #1]
 80122c4:	b005      	add	sp, #20
 80122c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122c8:	2102      	movs	r1, #2
 80122ca:	e7d5      	b.n	8012278 <Network::EnableDhcp()+0x3c>
 80122cc:	2000a9c4 	andcs	sl, r0, r4, asr #19

080122d0 <Network::Print()>:
 80122d0:	b530      	push	{r4, r5, lr}
 80122d2:	4604      	mov	r4, r0
 80122d4:	b085      	sub	sp, #20
 80122d6:	4832      	ldr	r0, [pc, #200]	; (80123a0 <Network::Print()+0xd0>)
 80122d8:	f7f7 f9c8 	bl	800966c <printf>
 80122dc:	f104 011c 	add.w	r1, r4, #28
 80122e0:	4830      	ldr	r0, [pc, #192]	; (80123a4 <Network::Print()+0xd4>)
 80122e2:	f7f7 f9c3 	bl	800966c <printf>
 80122e6:	6861      	ldr	r1, [r4, #4]
 80122e8:	f104 02a2 	add.w	r2, r4, #162	; 0xa2
 80122ec:	482e      	ldr	r0, [pc, #184]	; (80123a8 <Network::Print()+0xd8>)
 80122ee:	f7f7 f9bd 	bl	800966c <printf>
 80122f2:	69a0      	ldr	r0, [r4, #24]
 80122f4:	f7f6 fa86 	bl	8008804 <__popcountsi2>
 80122f8:	6925      	ldr	r5, [r4, #16]
 80122fa:	9001      	str	r0, [sp, #4]
 80122fc:	0e2b      	lsrs	r3, r5, #24
 80122fe:	9300      	str	r3, [sp, #0]
 8012300:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8012304:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8012308:	b2e9      	uxtb	r1, r5
 801230a:	4828      	ldr	r0, [pc, #160]	; (80123ac <Network::Print()+0xdc>)
 801230c:	f7f7 f9ae 	bl	800966c <printf>
 8012310:	69a1      	ldr	r1, [r4, #24]
 8012312:	4827      	ldr	r0, [pc, #156]	; (80123b0 <Network::Print()+0xe0>)
 8012314:	0e0b      	lsrs	r3, r1, #24
 8012316:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801231a:	9300      	str	r3, [sp, #0]
 801231c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8012320:	b2c9      	uxtb	r1, r1
 8012322:	f7f7 f9a3 	bl	800966c <printf>
 8012326:	6961      	ldr	r1, [r4, #20]
 8012328:	4822      	ldr	r0, [pc, #136]	; (80123b4 <Network::Print()+0xe4>)
 801232a:	0e0b      	lsrs	r3, r1, #24
 801232c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8012330:	9300      	str	r3, [sp, #0]
 8012332:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8012336:	b2c9      	uxtb	r1, r1
 8012338:	f7f7 f998 	bl	800966c <printf>
 801233c:	69a3      	ldr	r3, [r4, #24]
 801233e:	6921      	ldr	r1, [r4, #16]
 8012340:	481d      	ldr	r0, [pc, #116]	; (80123b8 <Network::Print()+0xe8>)
 8012342:	ea61 0103 	orn	r1, r1, r3
 8012346:	0e0b      	lsrs	r3, r1, #24
 8012348:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801234c:	9300      	str	r3, [sp, #0]
 801234e:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8012352:	b2c9      	uxtb	r1, r1
 8012354:	f7f7 f98a 	bl	800966c <printf>
 8012358:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 801235c:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
 8012360:	9302      	str	r3, [sp, #8]
 8012362:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8012366:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
 801236a:	9301      	str	r3, [sp, #4]
 801236c:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
 8012370:	4812      	ldr	r0, [pc, #72]	; (80123bc <Network::Print()+0xec>)
 8012372:	9300      	str	r3, [sp, #0]
 8012374:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
 8012378:	f7f7 f978 	bl	800966c <printf>
 801237c:	4b10      	ldr	r3, [pc, #64]	; (80123c0 <Network::Print()+0xf0>)
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	78da      	ldrb	r2, [r3, #3]
 8012382:	b952      	cbnz	r2, 801239a <Network::Print()+0xca>
 8012384:	785b      	ldrb	r3, [r3, #1]
 8012386:	2b00      	cmp	r3, #0
 8012388:	bf14      	ite	ne
 801238a:	2144      	movne	r1, #68	; 0x44
 801238c:	2153      	moveq	r1, #83	; 0x53
 801238e:	480d      	ldr	r0, [pc, #52]	; (80123c4 <Network::Print()+0xf4>)
 8012390:	b005      	add	sp, #20
 8012392:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012396:	f7f7 b969 	b.w	800966c <printf>
 801239a:	215a      	movs	r1, #90	; 0x5a
 801239c:	e7f7      	b.n	801238e <Network::Print()+0xbe>
 801239e:	bf00      	nop
 80123a0:	0801856c 	stmdaeq	r1, {r2, r3, r5, r6, r8, sl, pc}
 80123a4:	08018575 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, sl, pc}
 80123a8:	08018586 	stmdaeq	r1, {r1, r2, r7, r8, sl, pc}
 80123ac:	0801859b 	stmdaeq	r1, {r0, r1, r3, r4, r7, r8, sl, pc}
 80123b0:	080185b8 	stmdaeq	r1, {r3, r4, r5, r7, r8, sl, pc}
 80123b4:	080185d2 	stmdaeq	r1, {r1, r4, r6, r7, r8, sl, pc}
 80123b8:	080185ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, sl, pc}
 80123bc:	08018606 	stmdaeq	r1, {r1, r2, r9, sl, pc}
 80123c0:	2000a29c 	mulcs	r0, ip, r2
 80123c4:	08018632 	stmdaeq	r1, {r1, r4, r5, r9, sl, pc}

080123c8 <Network::TcpBegin(unsigned short)>:
 80123c8:	4608      	mov	r0, r1
 80123ca:	f7fe bf55 	b.w	8011278 <tcp_begin>

080123ce <Network::TcpRead(int, unsigned char const**)>:
 80123ce:	4608      	mov	r0, r1
 80123d0:	4611      	mov	r1, r2
 80123d2:	f7fe bf8f 	b.w	80112f4 <tcp_read>

080123d6 <Network::TcpWrite(int, unsigned char const*, unsigned short)>:
 80123d6:	4608      	mov	r0, r1
 80123d8:	4611      	mov	r1, r2
 80123da:	461a      	mov	r2, r3
 80123dc:	f7fe bf66 	b.w	80112ac <tcp_write>

080123e0 <NetworkParams::NetworkParams(NetworkParamsStore*)>:
 80123e0:	4b06      	ldr	r3, [pc, #24]	; (80123fc <NetworkParams::NetworkParams(NetworkParamsStore*)+0x1c>)
 80123e2:	b510      	push	{r4, lr}
 80123e4:	225e      	movs	r2, #94	; 0x5e
 80123e6:	4604      	mov	r4, r0
 80123e8:	6001      	str	r1, [r0, #0]
 80123ea:	2100      	movs	r1, #0
 80123ec:	4618      	mov	r0, r3
 80123ee:	f002 fa8f 	bl	8014910 <memset>
 80123f2:	2201      	movs	r2, #1
 80123f4:	7502      	strb	r2, [r0, #20]
 80123f6:	4620      	mov	r0, r4
 80123f8:	bd10      	pop	{r4, pc}
 80123fa:	bf00      	nop
 80123fc:	2000a2a0 	andcs	sl, r0, r0, lsr #5

08012400 <NetworkParams::Load()>:
 8012400:	b508      	push	{r3, lr}
 8012402:	2300      	movs	r3, #0
 8012404:	4905      	ldr	r1, [pc, #20]	; (801241c <NetworkParams::Load()+0x1c>)
 8012406:	6800      	ldr	r0, [r0, #0]
 8012408:	700b      	strb	r3, [r1, #0]
 801240a:	704b      	strb	r3, [r1, #1]
 801240c:	708b      	strb	r3, [r1, #2]
 801240e:	70cb      	strb	r3, [r1, #3]
 8012410:	b118      	cbz	r0, 801241a <NetworkParams::Load()+0x1a>
 8012412:	6803      	ldr	r3, [r0, #0]
 8012414:	68db      	ldr	r3, [r3, #12]
 8012416:	4798      	blx	r3
 8012418:	2001      	movs	r0, #1
 801241a:	bd08      	pop	{r3, pc}
 801241c:	2000a2a0 	andcs	sl, r0, r0, lsr #5

08012420 <NetworkParams::Load(char const*, unsigned int)>:
 8012420:	6803      	ldr	r3, [r0, #0]
 8012422:	b1eb      	cbz	r3, 8012460 <NetworkParams::Load(char const*, unsigned int)+0x40>
 8012424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012426:	2300      	movs	r3, #0
 8012428:	460e      	mov	r6, r1
 801242a:	4617      	mov	r7, r2
 801242c:	4605      	mov	r5, r0
 801242e:	4c0d      	ldr	r4, [pc, #52]	; (8012464 <NetworkParams::Load(char const*, unsigned int)+0x44>)
 8012430:	4602      	mov	r2, r0
 8012432:	490d      	ldr	r1, [pc, #52]	; (8012468 <NetworkParams::Load(char const*, unsigned int)+0x48>)
 8012434:	4668      	mov	r0, sp
 8012436:	7023      	strb	r3, [r4, #0]
 8012438:	7063      	strb	r3, [r4, #1]
 801243a:	70a3      	strb	r3, [r4, #2]
 801243c:	70e3      	strb	r3, [r4, #3]
 801243e:	f001 fbad 	bl	8013b9c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8012442:	463a      	mov	r2, r7
 8012444:	4631      	mov	r1, r6
 8012446:	4668      	mov	r0, sp
 8012448:	f001 fbac 	bl	8013ba4 <ReadConfigFile::Read(char const*, unsigned int)>
 801244c:	6828      	ldr	r0, [r5, #0]
 801244e:	4621      	mov	r1, r4
 8012450:	6803      	ldr	r3, [r0, #0]
 8012452:	689b      	ldr	r3, [r3, #8]
 8012454:	4798      	blx	r3
 8012456:	4668      	mov	r0, sp
 8012458:	f001 fba3 	bl	8013ba2 <ReadConfigFile::~ReadConfigFile()>
 801245c:	b003      	add	sp, #12
 801245e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012460:	4770      	bx	lr
 8012462:	bf00      	nop
 8012464:	2000a2a0 	andcs	sl, r0, r0, lsr #5
 8012468:	0801259d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, sl, sp}

0801246c <NetworkParams::callbackFunction(char const*)>:
 801246c:	b530      	push	{r4, r5, lr}
 801246e:	460c      	mov	r4, r1
 8012470:	b085      	sub	sp, #20
 8012472:	4620      	mov	r0, r4
 8012474:	4942      	ldr	r1, [pc, #264]	; (8012580 <NetworkParams::callbackFunction(char const*)+0x114>)
 8012476:	f10d 0207 	add.w	r2, sp, #7
 801247a:	f001 fcf5 	bl	8013e68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 801247e:	b980      	cbnz	r0, 80124a2 <NetworkParams::callbackFunction(char const*)+0x36>
 8012480:	4940      	ldr	r1, [pc, #256]	; (8012584 <NetworkParams::callbackFunction(char const*)+0x118>)
 8012482:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012486:	680b      	ldr	r3, [r1, #0]
 8012488:	b142      	cbz	r2, 801249c <NetworkParams::callbackFunction(char const*)+0x30>
 801248a:	f023 0301 	bic.w	r3, r3, #1
 801248e:	3a00      	subs	r2, #0
 8012490:	bf18      	it	ne
 8012492:	2201      	movne	r2, #1
 8012494:	600b      	str	r3, [r1, #0]
 8012496:	750a      	strb	r2, [r1, #20]
 8012498:	b005      	add	sp, #20
 801249a:	bd30      	pop	{r4, r5, pc}
 801249c:	f043 0301 	orr.w	r3, r3, #1
 80124a0:	e7f5      	b.n	801248e <NetworkParams::callbackFunction(char const*)+0x22>
 80124a2:	4620      	mov	r0, r4
 80124a4:	4938      	ldr	r1, [pc, #224]	; (8012588 <NetworkParams::callbackFunction(char const*)+0x11c>)
 80124a6:	f10d 0207 	add.w	r2, sp, #7
 80124aa:	f001 fcdd 	bl	8013e68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80124ae:	b988      	cbnz	r0, 80124d4 <NetworkParams::callbackFunction(char const*)+0x68>
 80124b0:	4a34      	ldr	r2, [pc, #208]	; (8012584 <NetworkParams::callbackFunction(char const*)+0x118>)
 80124b2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80124b6:	6813      	ldr	r3, [r2, #0]
 80124b8:	1e4d      	subs	r5, r1, #1
 80124ba:	2d04      	cmp	r5, #4
 80124bc:	bf97      	itett	ls
 80124be:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 80124c2:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 80124c6:	6013      	strls	r3, [r2, #0]
 80124c8:	f882 105d 	strbls.w	r1, [r2, #93]	; 0x5d
 80124cc:	bf84      	itt	hi
 80124ce:	6013      	strhi	r3, [r2, #0]
 80124d0:	f882 005d 	strbhi.w	r0, [r2, #93]	; 0x5d
 80124d4:	4620      	mov	r0, r4
 80124d6:	492d      	ldr	r1, [pc, #180]	; (801258c <NetworkParams::callbackFunction(char const*)+0x120>)
 80124d8:	aa02      	add	r2, sp, #8
 80124da:	f001 fc3e 	bl	8013d5a <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 80124de:	b9d0      	cbnz	r0, 8012516 <NetworkParams::callbackFunction(char const*)+0xaa>
 80124e0:	9b02      	ldr	r3, [sp, #8]
 80124e2:	b2d9      	uxtb	r1, r3
 80124e4:	29ac      	cmp	r1, #172	; 0xac
 80124e6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80124ea:	d00a      	beq.n	8012502 <NetworkParams::callbackFunction(char const*)+0x96>
 80124ec:	29c0      	cmp	r1, #192	; 0xc0
 80124ee:	d00c      	beq.n	801250a <NetworkParams::callbackFunction(char const*)+0x9e>
 80124f0:	290a      	cmp	r1, #10
 80124f2:	d10d      	bne.n	8012510 <NetworkParams::callbackFunction(char const*)+0xa4>
 80124f4:	4a23      	ldr	r2, [pc, #140]	; (8012584 <NetworkParams::callbackFunction(char const*)+0x118>)
 80124f6:	6053      	str	r3, [r2, #4]
 80124f8:	6813      	ldr	r3, [r2, #0]
 80124fa:	f043 0302 	orr.w	r3, r3, #2
 80124fe:	6013      	str	r3, [r2, #0]
 8012500:	e7ca      	b.n	8012498 <NetworkParams::callbackFunction(char const*)+0x2c>
 8012502:	3a10      	subs	r2, #16
 8012504:	2a0f      	cmp	r2, #15
 8012506:	d8c7      	bhi.n	8012498 <NetworkParams::callbackFunction(char const*)+0x2c>
 8012508:	e7f4      	b.n	80124f4 <NetworkParams::callbackFunction(char const*)+0x88>
 801250a:	2aa8      	cmp	r2, #168	; 0xa8
 801250c:	d1c4      	bne.n	8012498 <NetworkParams::callbackFunction(char const*)+0x2c>
 801250e:	e7f1      	b.n	80124f4 <NetworkParams::callbackFunction(char const*)+0x88>
 8012510:	2b00      	cmp	r3, #0
 8012512:	d0ef      	beq.n	80124f4 <NetworkParams::callbackFunction(char const*)+0x88>
 8012514:	e7c0      	b.n	8012498 <NetworkParams::callbackFunction(char const*)+0x2c>
 8012516:	4620      	mov	r0, r4
 8012518:	491d      	ldr	r1, [pc, #116]	; (8012590 <NetworkParams::callbackFunction(char const*)+0x124>)
 801251a:	aa02      	add	r2, sp, #8
 801251c:	f001 fc1d 	bl	8013d5a <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8012520:	b970      	cbnz	r0, 8012540 <NetworkParams::callbackFunction(char const*)+0xd4>
 8012522:	9a02      	ldr	r2, [sp, #8]
 8012524:	2a00      	cmp	r2, #0
 8012526:	d0b7      	beq.n	8012498 <NetworkParams::callbackFunction(char const*)+0x2c>
 8012528:	ba13      	rev	r3, r2
 801252a:	43d9      	mvns	r1, r3
 801252c:	ea13 0351 	ands.w	r3, r3, r1, lsr #1
 8012530:	d1b2      	bne.n	8012498 <NetworkParams::callbackFunction(char const*)+0x2c>
 8012532:	4b14      	ldr	r3, [pc, #80]	; (8012584 <NetworkParams::callbackFunction(char const*)+0x118>)
 8012534:	609a      	str	r2, [r3, #8]
 8012536:	681a      	ldr	r2, [r3, #0]
 8012538:	f042 0204 	orr.w	r2, r2, #4
 801253c:	601a      	str	r2, [r3, #0]
 801253e:	e7ab      	b.n	8012498 <NetworkParams::callbackFunction(char const*)+0x2c>
 8012540:	4620      	mov	r0, r4
 8012542:	4914      	ldr	r1, [pc, #80]	; (8012594 <NetworkParams::callbackFunction(char const*)+0x128>)
 8012544:	aa02      	add	r2, sp, #8
 8012546:	f001 fc08 	bl	8013d5a <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 801254a:	4d0e      	ldr	r5, [pc, #56]	; (8012584 <NetworkParams::callbackFunction(char const*)+0x118>)
 801254c:	b930      	cbnz	r0, 801255c <NetworkParams::callbackFunction(char const*)+0xf0>
 801254e:	9b02      	ldr	r3, [sp, #8]
 8012550:	60eb      	str	r3, [r5, #12]
 8012552:	682b      	ldr	r3, [r5, #0]
 8012554:	f043 0308 	orr.w	r3, r3, #8
 8012558:	602b      	str	r3, [r5, #0]
 801255a:	e79d      	b.n	8012498 <NetworkParams::callbackFunction(char const*)+0x2c>
 801255c:	233f      	movs	r3, #63	; 0x3f
 801255e:	4620      	mov	r0, r4
 8012560:	9303      	str	r3, [sp, #12]
 8012562:	490d      	ldr	r1, [pc, #52]	; (8012598 <NetworkParams::callbackFunction(char const*)+0x12c>)
 8012564:	ab03      	add	r3, sp, #12
 8012566:	f105 0215 	add.w	r2, r5, #21
 801256a:	f001 fb4f 	bl	8013c0c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 801256e:	2800      	cmp	r0, #0
 8012570:	d192      	bne.n	8012498 <NetworkParams::callbackFunction(char const*)+0x2c>
 8012572:	9b03      	ldr	r3, [sp, #12]
 8012574:	442b      	add	r3, r5
 8012576:	7558      	strb	r0, [r3, #21]
 8012578:	682b      	ldr	r3, [r5, #0]
 801257a:	f043 0320 	orr.w	r3, r3, #32
 801257e:	e7eb      	b.n	8012558 <NetworkParams::callbackFunction(char const*)+0xec>
 8012580:	0801868a 	stmdaeq	r1, {r1, r3, r7, r9, sl, pc}
 8012584:	2000a2a0 	andcs	sl, r0, r0, lsr #5
 8012588:	08018668 	stmdaeq	r1, {r3, r5, r6, r9, sl, pc}
 801258c:	0801864d 	stmdaeq	r1, {r0, r2, r3, r6, r9, sl, pc}
 8012590:	08018681 	stmdaeq	r1, {r0, r7, r9, sl, pc}
 8012594:	08018658 	stmdaeq	r1, {r3, r4, r6, r9, sl, pc}
 8012598:	08018678 	stmdaeq	r1, {r3, r4, r5, r6, r9, sl, pc}

0801259c <NetworkParams::staticCallbackFunction(void*, char const*)>:
 801259c:	f7ff bf66 	b.w	801246c <NetworkParams::callbackFunction(char const*)>

080125a0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)>:
 80125a0:	b530      	push	{r4, r5, lr}
 80125a2:	4614      	mov	r4, r2
 80125a4:	461d      	mov	r5, r3
 80125a6:	b087      	sub	sp, #28
 80125a8:	2900      	cmp	r1, #0
 80125aa:	d040      	beq.n	801262e <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x8e>
 80125ac:	225e      	movs	r2, #94	; 0x5e
 80125ae:	4871      	ldr	r0, [pc, #452]	; (8012774 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1d4>)
 80125b0:	f002 f997 	bl	80148e2 <memmove>
 80125b4:	4622      	mov	r2, r4
 80125b6:	462b      	mov	r3, r5
 80125b8:	496f      	ldr	r1, [pc, #444]	; (8012778 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1d8>)
 80125ba:	a803      	add	r0, sp, #12
 80125bc:	f001 fa1e 	bl	80139fc <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 80125c0:	4c6c      	ldr	r4, [pc, #432]	; (8012774 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1d4>)
 80125c2:	6823      	ldr	r3, [r4, #0]
 80125c4:	0799      	lsls	r1, r3, #30
 80125c6:	bf5f      	itttt	pl
 80125c8:	4a6c      	ldrpl	r2, [pc, #432]	; (801277c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1dc>)
 80125ca:	6812      	ldrpl	r2, [r2, #0]
 80125cc:	6912      	ldrpl	r2, [r2, #16]
 80125ce:	6062      	strpl	r2, [r4, #4]
 80125d0:	075a      	lsls	r2, r3, #29
 80125d2:	bf5f      	itttt	pl
 80125d4:	4a69      	ldrpl	r2, [pc, #420]	; (801277c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1dc>)
 80125d6:	6812      	ldrpl	r2, [r2, #0]
 80125d8:	6992      	ldrpl	r2, [r2, #24]
 80125da:	60a2      	strpl	r2, [r4, #8]
 80125dc:	071d      	lsls	r5, r3, #28
 80125de:	bf5f      	itttt	pl
 80125e0:	4a66      	ldrpl	r2, [pc, #408]	; (801277c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1dc>)
 80125e2:	6812      	ldrpl	r2, [r2, #0]
 80125e4:	6952      	ldrpl	r2, [r2, #20]
 80125e6:	60e2      	strpl	r2, [r4, #12]
 80125e8:	0698      	lsls	r0, r3, #26
 80125ea:	d40c      	bmi.n	8012606 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x66>
 80125ec:	223f      	movs	r2, #63	; 0x3f
 80125ee:	4b63      	ldr	r3, [pc, #396]	; (801277c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1dc>)
 80125f0:	4863      	ldr	r0, [pc, #396]	; (8012780 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e0>)
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	331b      	adds	r3, #27
 80125f6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80125fa:	b9f1      	cbnz	r1, 801263a <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x9a>
 80125fc:	f002 f988 	bl	8014910 <memset>
 8012600:	2300      	movs	r3, #0
 8012602:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8012606:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 801260a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 801260e:	42a9      	cmp	r1, r5
 8012610:	d226      	bcs.n	8012660 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xc0>
 8012612:	9803      	ldr	r0, [sp, #12]
 8012614:	1a6d      	subs	r5, r5, r1
 8012616:	4408      	add	r0, r1
 8012618:	6821      	ldr	r1, [r4, #0]
 801261a:	f89d 2014 	ldrb.w	r2, [sp, #20]
 801261e:	07c9      	lsls	r1, r1, #31
 8012620:	7d23      	ldrb	r3, [r4, #20]
 8012622:	d40f      	bmi.n	8012644 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xa4>
 8012624:	b97a      	cbnz	r2, 8012646 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xa6>
 8012626:	9300      	str	r3, [sp, #0]
 8012628:	4a56      	ldr	r2, [pc, #344]	; (8012784 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e4>)
 801262a:	4b57      	ldr	r3, [pc, #348]	; (8012788 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e8>)
 801262c:	e00e      	b.n	801264c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xac>
 801262e:	6800      	ldr	r0, [r0, #0]
 8012630:	4950      	ldr	r1, [pc, #320]	; (8012774 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1d4>)
 8012632:	6803      	ldr	r3, [r0, #0]
 8012634:	68db      	ldr	r3, [r3, #12]
 8012636:	4798      	blx	r3
 8012638:	e7bc      	b.n	80125b4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x14>
 801263a:	3a01      	subs	r2, #1
 801263c:	f800 1b01 	strb.w	r1, [r0], #1
 8012640:	d1d9      	bne.n	80125f6 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x56>
 8012642:	e7dd      	b.n	8012600 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x60>
 8012644:	b30a      	cbz	r2, 801268a <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xea>
 8012646:	9300      	str	r3, [sp, #0]
 8012648:	4a50      	ldr	r2, [pc, #320]	; (801278c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1ec>)
 801264a:	4b4f      	ldr	r3, [pc, #316]	; (8012788 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e8>)
 801264c:	4629      	mov	r1, r5
 801264e:	f7f7 f835 	bl	80096bc <snprintf>
 8012652:	4285      	cmp	r5, r0
 8012654:	bfa2      	ittt	ge
 8012656:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 801265a:	18c0      	addge	r0, r0, r3
 801265c:	f8ad 0012 	strhge.w	r0, [sp, #18]
 8012660:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8012664:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8012668:	42a9      	cmp	r1, r5
 801266a:	d221      	bcs.n	80126b0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x110>
 801266c:	9803      	ldr	r0, [sp, #12]
 801266e:	1a6d      	subs	r5, r5, r1
 8012670:	4408      	add	r0, r1
 8012672:	6821      	ldr	r1, [r4, #0]
 8012674:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8012678:	05c9      	lsls	r1, r1, #23
 801267a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 801267e:	d408      	bmi.n	8012692 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xf2>
 8012680:	b94a      	cbnz	r2, 8012696 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xf6>
 8012682:	9300      	str	r3, [sp, #0]
 8012684:	4a3f      	ldr	r2, [pc, #252]	; (8012784 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e4>)
 8012686:	4b42      	ldr	r3, [pc, #264]	; (8012790 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f0>)
 8012688:	e008      	b.n	801269c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xfc>
 801268a:	9300      	str	r3, [sp, #0]
 801268c:	4a41      	ldr	r2, [pc, #260]	; (8012794 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f4>)
 801268e:	4b3e      	ldr	r3, [pc, #248]	; (8012788 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e8>)
 8012690:	e7dc      	b.n	801264c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xac>
 8012692:	2a00      	cmp	r2, #0
 8012694:	d03e      	beq.n	8012714 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x174>
 8012696:	9300      	str	r3, [sp, #0]
 8012698:	4a3c      	ldr	r2, [pc, #240]	; (801278c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1ec>)
 801269a:	4b3d      	ldr	r3, [pc, #244]	; (8012790 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f0>)
 801269c:	4629      	mov	r1, r5
 801269e:	f7f7 f80d 	bl	80096bc <snprintf>
 80126a2:	4285      	cmp	r5, r0
 80126a4:	bfa2      	ittt	ge
 80126a6:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 80126aa:	18c0      	addge	r0, r0, r3
 80126ac:	f8ad 0012 	strhge.w	r0, [sp, #18]
 80126b0:	4939      	ldr	r1, [pc, #228]	; (8012798 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f8>)
 80126b2:	a803      	add	r0, sp, #12
 80126b4:	f001 fa28 	bl	8013b08 <PropertiesBuilder::AddComment(char const*)>
 80126b8:	6823      	ldr	r3, [r4, #0]
 80126ba:	6862      	ldr	r2, [r4, #4]
 80126bc:	4937      	ldr	r1, [pc, #220]	; (801279c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1fc>)
 80126be:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80126c2:	a803      	add	r0, sp, #12
 80126c4:	f001 f9dc 	bl	8013a80 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 80126c8:	6823      	ldr	r3, [r4, #0]
 80126ca:	68a2      	ldr	r2, [r4, #8]
 80126cc:	4934      	ldr	r1, [pc, #208]	; (80127a0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x200>)
 80126ce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80126d2:	a803      	add	r0, sp, #12
 80126d4:	f001 f9d4 	bl	8013a80 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 80126d8:	6823      	ldr	r3, [r4, #0]
 80126da:	4932      	ldr	r1, [pc, #200]	; (80127a4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x204>)
 80126dc:	68e2      	ldr	r2, [r4, #12]
 80126de:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80126e2:	a803      	add	r0, sp, #12
 80126e4:	f001 f9cc 	bl	8013a80 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 80126e8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 80126ec:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80126f0:	42a9      	cmp	r1, r5
 80126f2:	d221      	bcs.n	8012738 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x198>
 80126f4:	6823      	ldr	r3, [r4, #0]
 80126f6:	9803      	ldr	r0, [sp, #12]
 80126f8:	f013 0f20 	tst.w	r3, #32
 80126fc:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8012700:	4b1f      	ldr	r3, [pc, #124]	; (8012780 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e0>)
 8012702:	4408      	add	r0, r1
 8012704:	eba5 0501 	sub.w	r5, r5, r1
 8012708:	d108      	bne.n	801271c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x17c>
 801270a:	b942      	cbnz	r2, 801271e <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x17e>
 801270c:	9300      	str	r3, [sp, #0]
 801270e:	4a26      	ldr	r2, [pc, #152]	; (80127a8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x208>)
 8012710:	4b26      	ldr	r3, [pc, #152]	; (80127ac <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x20c>)
 8012712:	e007      	b.n	8012724 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x184>
 8012714:	9300      	str	r3, [sp, #0]
 8012716:	4a1f      	ldr	r2, [pc, #124]	; (8012794 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f4>)
 8012718:	4b1d      	ldr	r3, [pc, #116]	; (8012790 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f0>)
 801271a:	e7bf      	b.n	801269c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xfc>
 801271c:	b32a      	cbz	r2, 801276a <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1ca>
 801271e:	9300      	str	r3, [sp, #0]
 8012720:	4a23      	ldr	r2, [pc, #140]	; (80127b0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x210>)
 8012722:	4b22      	ldr	r3, [pc, #136]	; (80127ac <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x20c>)
 8012724:	4629      	mov	r1, r5
 8012726:	f7f6 ffc9 	bl	80096bc <snprintf>
 801272a:	4285      	cmp	r5, r0
 801272c:	bfa2      	ittt	ge
 801272e:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8012732:	18c0      	addge	r0, r0, r3
 8012734:	f8ad 0012 	strhge.w	r0, [sp, #18]
 8012738:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801273c:	b17b      	cbz	r3, 801275e <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1be>
 801273e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8012742:	9b03      	ldr	r3, [sp, #12]
 8012744:	4413      	add	r3, r2
 8012746:	227d      	movs	r2, #125	; 0x7d
 8012748:	f803 2c01 	strb.w	r2, [r3, #-1]
 801274c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8012750:	9903      	ldr	r1, [sp, #12]
 8012752:	54ca      	strb	r2, [r1, r3]
 8012754:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8012758:	3301      	adds	r3, #1
 801275a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801275e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8012762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012764:	601a      	str	r2, [r3, #0]
 8012766:	b007      	add	sp, #28
 8012768:	bd30      	pop	{r4, r5, pc}
 801276a:	9300      	str	r3, [sp, #0]
 801276c:	4a11      	ldr	r2, [pc, #68]	; (80127b4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x214>)
 801276e:	4b0f      	ldr	r3, [pc, #60]	; (80127ac <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x20c>)
 8012770:	e7d8      	b.n	8012724 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x184>
 8012772:	bf00      	nop
 8012774:	2000a2a0 	andcs	sl, r0, r0, lsr #5
 8012778:	08018693 	stmdaeq	r1, {r0, r1, r4, r7, r9, sl, pc}
 801277c:	2000a29c 	mulcs	r0, ip, r2
 8012780:	2000a2b5 			; <UNDEFINED> instruction: 0x2000a2b5
 8012784:	08016d5d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, sl, fp, sp, lr}
 8012788:	0801868a 	stmdaeq	r1, {r1, r3, r7, r9, sl, pc}
 801278c:	08016d54 	stmdaeq	r1, {r2, r4, r6, r8, sl, fp, sp, lr}
 8012790:	08018668 	stmdaeq	r1, {r3, r5, r6, r9, sl, pc}
 8012794:	08016d5e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}
 8012798:	08018643 	stmdaeq	r1, {r0, r1, r6, r9, sl, pc}
 801279c:	0801864d 	stmdaeq	r1, {r0, r2, r3, r6, r9, sl, pc}
 80127a0:	08018681 	stmdaeq	r1, {r0, r7, r9, sl, pc}
 80127a4:	08018658 	stmdaeq	r1, {r3, r4, r6, r9, sl, pc}
 80127a8:	08016d70 	stmdaeq	r1, {r4, r5, r6, r8, sl, fp, sp, lr}
 80127ac:	08018678 	stmdaeq	r1, {r3, r4, r5, r6, r9, sl, pc}
 80127b0:	08016d65 	stmdaeq	r1, {r0, r2, r5, r6, r8, sl, fp, sp, lr}
 80127b4:	08016d71 	stmdaeq	r1, {r0, r4, r5, r6, r8, sl, fp, sp, lr}

080127b8 <NetworkParams::Save(char*, unsigned int, unsigned int&)>:
 80127b8:	b513      	push	{r0, r1, r4, lr}
 80127ba:	6804      	ldr	r4, [r0, #0]
 80127bc:	b914      	cbnz	r4, 80127c4 <NetworkParams::Save(char*, unsigned int, unsigned int&)+0xc>
 80127be:	601c      	str	r4, [r3, #0]
 80127c0:	b002      	add	sp, #8
 80127c2:	bd10      	pop	{r4, pc}
 80127c4:	9300      	str	r3, [sp, #0]
 80127c6:	4613      	mov	r3, r2
 80127c8:	460a      	mov	r2, r1
 80127ca:	2100      	movs	r1, #0
 80127cc:	f7ff fee8 	bl	80125a0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)>
 80127d0:	e7f6      	b.n	80127c0 <NetworkParams::Save(char*, unsigned int, unsigned int&)+0x8>

080127d2 <NetworkParams::Dump()>:
 80127d2:	4770      	bx	lr

080127d4 <memcpy.isra.0>:
 80127d4:	3801      	subs	r0, #1
 80127d6:	440a      	add	r2, r1
 80127d8:	4291      	cmp	r1, r2
 80127da:	d100      	bne.n	80127de <memcpy.isra.0+0xa>
 80127dc:	4770      	bx	lr
 80127de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80127e2:	f800 3f01 	strb.w	r3, [r0, #1]!
 80127e6:	e7f7      	b.n	80127d8 <memcpy.isra.0+0x4>

080127e8 <arp_announce>:
 80127e8:	4803      	ldr	r0, [pc, #12]	; (80127f8 <arp_announce+0x10>)
 80127ea:	69c3      	ldr	r3, [r0, #28]
 80127ec:	b113      	cbz	r3, 80127f4 <arp_announce+0xc>
 80127ee:	212a      	movs	r1, #42	; 0x2a
 80127f0:	f002 bf60 	b.w	80156b4 <emac_eth_send>
 80127f4:	4770      	bx	lr
 80127f6:	bf00      	nop
 80127f8:	2000a300 	andcs	sl, r0, r0, lsl #6

080127fc <arp_handle_request>:
 80127fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80127fe:	2204      	movs	r2, #4
 8012800:	f100 0126 	add.w	r1, r0, #38	; 0x26
 8012804:	4604      	mov	r4, r0
 8012806:	eb0d 0002 	add.w	r0, sp, r2
 801280a:	f7ff ffe3 	bl	80127d4 <memcpy.isra.0>
 801280e:	4b0d      	ldr	r3, [pc, #52]	; (8012844 <arp_handle_request+0x48>)
 8012810:	9a01      	ldr	r2, [sp, #4]
 8012812:	69db      	ldr	r3, [r3, #28]
 8012814:	429a      	cmp	r2, r3
 8012816:	d113      	bne.n	8012840 <arp_handle_request+0x44>
 8012818:	2206      	movs	r2, #6
 801281a:	4d0b      	ldr	r5, [pc, #44]	; (8012848 <arp_handle_request+0x4c>)
 801281c:	18a1      	adds	r1, r4, r2
 801281e:	4628      	mov	r0, r5
 8012820:	f7ff ffd8 	bl	80127d4 <memcpy.isra.0>
 8012824:	f104 0116 	add.w	r1, r4, #22
 8012828:	f105 0020 	add.w	r0, r5, #32
 801282c:	2206      	movs	r2, #6
 801282e:	f7ff ffd1 	bl	80127d4 <memcpy.isra.0>
 8012832:	69e3      	ldr	r3, [r4, #28]
 8012834:	212a      	movs	r1, #42	; 0x2a
 8012836:	4628      	mov	r0, r5
 8012838:	f8c5 3026 	str.w	r3, [r5, #38]	; 0x26
 801283c:	f002 ff3a 	bl	80156b4 <emac_eth_send>
 8012840:	b003      	add	sp, #12
 8012842:	bd30      	pop	{r4, r5, pc}
 8012844:	2000a300 	andcs	sl, r0, r0, lsl #6
 8012848:	2000a32c 	andcs	sl, r0, ip, lsr #6

0801284c <arp_handle_reply>:
 801284c:	69c1      	ldr	r1, [r0, #28]
 801284e:	3016      	adds	r0, #22
 8012850:	f000 b80a 	b.w	8012868 <arp_cache_update>

08012854 <arp_send_request>:
 8012854:	4b03      	ldr	r3, [pc, #12]	; (8012864 <arp_send_request+0x10>)
 8012856:	212a      	movs	r1, #42	; 0x2a
 8012858:	f8c3 0026 	str.w	r0, [r3, #38]	; 0x26
 801285c:	4618      	mov	r0, r3
 801285e:	f002 bf29 	b.w	80156b4 <emac_eth_send>
 8012862:	bf00      	nop
 8012864:	2000a358 	andcs	sl, r0, r8, asr r3

08012868 <arp_cache_update>:
 8012868:	b5f0      	push	{r4, r5, r6, r7, lr}
 801286a:	4e11      	ldr	r6, [pc, #68]	; (80128b0 <arp_cache_update+0x48>)
 801286c:	8833      	ldrh	r3, [r6, #0]
 801286e:	2b20      	cmp	r3, #32
 8012870:	d018      	beq.n	80128a4 <arp_cache_update+0x3c>
 8012872:	2400      	movs	r4, #0
 8012874:	220c      	movs	r2, #12
 8012876:	4d0f      	ldr	r5, [pc, #60]	; (80128b4 <arp_cache_update+0x4c>)
 8012878:	b2a7      	uxth	r7, r4
 801287a:	42bb      	cmp	r3, r7
 801287c:	d80b      	bhi.n	8012896 <arp_cache_update+0x2e>
 801287e:	fb02 5203 	mla	r2, r2, r3, r5
 8012882:	1d84      	adds	r4, r0, #6
 8012884:	3203      	adds	r2, #3
 8012886:	42a0      	cmp	r0, r4
 8012888:	d10d      	bne.n	80128a6 <arp_cache_update+0x3e>
 801288a:	220c      	movs	r2, #12
 801288c:	435a      	muls	r2, r3
 801288e:	3301      	adds	r3, #1
 8012890:	50a9      	str	r1, [r5, r2]
 8012892:	8033      	strh	r3, [r6, #0]
 8012894:	e006      	b.n	80128a4 <arp_cache_update+0x3c>
 8012896:	3401      	adds	r4, #1
 8012898:	fb02 5704 	mla	r7, r2, r4, r5
 801289c:	f857 7c0c 	ldr.w	r7, [r7, #-12]
 80128a0:	428f      	cmp	r7, r1
 80128a2:	d1e9      	bne.n	8012878 <arp_cache_update+0x10>
 80128a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128a6:	f810 7b01 	ldrb.w	r7, [r0], #1
 80128aa:	f802 7f01 	strb.w	r7, [r2, #1]!
 80128ae:	e7ea      	b.n	8012886 <arp_cache_update+0x1e>
 80128b0:	2000a504 	andcs	sl, r0, r4, lsl #10
 80128b4:	2000a384 	andcs	sl, r0, r4, lsl #7

080128b8 <arp_cache_lookup>:
 80128b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128bc:	2200      	movs	r2, #0
 80128be:	4606      	mov	r6, r0
 80128c0:	460c      	mov	r4, r1
 80128c2:	200c      	movs	r0, #12
 80128c4:	f8df 8084 	ldr.w	r8, [pc, #132]	; 801294c <arp_cache_lookup+0x94>
 80128c8:	fb00 f302 	mul.w	r3, r0, r2
 80128cc:	f853 1008 	ldr.w	r1, [r3, r8]
 80128d0:	42b1      	cmp	r1, r6
 80128d2:	d10d      	bne.n	80128f0 <arp_cache_lookup+0x38>
 80128d4:	3304      	adds	r3, #4
 80128d6:	4443      	add	r3, r8
 80128d8:	3c01      	subs	r4, #1
 80128da:	1d9a      	adds	r2, r3, #6
 80128dc:	4293      	cmp	r3, r2
 80128de:	d102      	bne.n	80128e6 <arp_cache_lookup+0x2e>
 80128e0:	4630      	mov	r0, r6
 80128e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128e6:	f813 1b01 	ldrb.w	r1, [r3], #1
 80128ea:	f804 1f01 	strb.w	r1, [r4, #1]!
 80128ee:	e7f5      	b.n	80128dc <arp_cache_lookup+0x24>
 80128f0:	b111      	cbz	r1, 80128f8 <arp_cache_lookup+0x40>
 80128f2:	3201      	adds	r2, #1
 80128f4:	2a20      	cmp	r2, #32
 80128f6:	d1e7      	bne.n	80128c8 <arp_cache_lookup+0x10>
 80128f8:	2704      	movs	r7, #4
 80128fa:	f8df a054 	ldr.w	sl, [pc, #84]	; 8012950 <arp_cache_lookup+0x98>
 80128fe:	f8ba 5000 	ldrh.w	r5, [sl]
 8012902:	3f01      	subs	r7, #1
 8012904:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8012908:	d101      	bne.n	801290e <arp_cache_lookup+0x56>
 801290a:	463e      	mov	r6, r7
 801290c:	e7e8      	b.n	80128e0 <arp_cache_lookup+0x28>
 801290e:	4630      	mov	r0, r6
 8012910:	f7ff ffa0 	bl	8012854 <arp_send_request>
 8012914:	f44f 3900 	mov.w	r9, #131072	; 0x20000
 8012918:	f1b9 0901 	subs.w	r9, r9, #1
 801291c:	f8ba 3000 	ldrh.w	r3, [sl]
 8012920:	d011      	beq.n	8012946 <arp_cache_lookup+0x8e>
 8012922:	429d      	cmp	r5, r3
 8012924:	d00c      	beq.n	8012940 <arp_cache_lookup+0x88>
 8012926:	230c      	movs	r3, #12
 8012928:	fb03 8505 	mla	r5, r3, r5, r8
 801292c:	3c01      	subs	r4, #1
 801292e:	1d2b      	adds	r3, r5, #4
 8012930:	350a      	adds	r5, #10
 8012932:	42ab      	cmp	r3, r5
 8012934:	d0d4      	beq.n	80128e0 <arp_cache_lookup+0x28>
 8012936:	f813 2b01 	ldrb.w	r2, [r3], #1
 801293a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801293e:	e7f8      	b.n	8012932 <arp_cache_lookup+0x7a>
 8012940:	f7f4 fdf2 	bl	8007528 <net_handle>
 8012944:	e7e8      	b.n	8012918 <arp_cache_lookup+0x60>
 8012946:	429d      	cmp	r5, r3
 8012948:	d0db      	beq.n	8012902 <arp_cache_lookup+0x4a>
 801294a:	e7ec      	b.n	8012926 <arp_cache_lookup+0x6e>
 801294c:	2000a384 	andcs	sl, r0, r4, lsl #7
 8012950:	2000a504 	andcs	sl, r0, r4, lsl #10

08012954 <_parse_response>:
 8012954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012958:	460c      	mov	r4, r1
 801295a:	4e5b      	ldr	r6, [pc, #364]	; (8012ac8 <_parse_response+0x174>)
 801295c:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
 8012960:	6837      	ldr	r7, [r6, #0]
 8012962:	b2c5      	uxtb	r5, r0
 8012964:	f10d 0826 	add.w	r8, sp, #38	; 0x26
 8012968:	f7f4 fdde 	bl	8007528 <net_handle>
 801296c:	f44f 7209 	mov.w	r2, #548	; 0x224
 8012970:	4628      	mov	r0, r5
 8012972:	f8cd 8000 	str.w	r8, [sp]
 8012976:	ab0a      	add	r3, sp, #40	; 0x28
 8012978:	a90b      	add	r1, sp, #44	; 0x2c
 801297a:	f7fe fd81 	bl	8011480 <udp_recv>
 801297e:	2800      	cmp	r0, #0
 8012980:	d05f      	beq.n	8012a42 <_parse_response+0xee>
 8012982:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8012986:	2b43      	cmp	r3, #67	; 0x43
 8012988:	d15b      	bne.n	8012a42 <_parse_response+0xee>
 801298a:	aa12      	add	r2, sp, #72	; 0x48
 801298c:	1e63      	subs	r3, r4, #1
 801298e:	1d61      	adds	r1, r4, #5
 8012990:	428b      	cmp	r3, r1
 8012992:	d150      	bne.n	8012a36 <_parse_response+0xe2>
 8012994:	2100      	movs	r1, #0
 8012996:	ab0b      	add	r3, sp, #44	; 0x2c
 8012998:	181c      	adds	r4, r3, r0
 801299a:	4608      	mov	r0, r1
 801299c:	4b4b      	ldr	r3, [pc, #300]	; (8012acc <_parse_response+0x178>)
 801299e:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80129a2:	781a      	ldrb	r2, [r3, #0]
 80129a4:	f893 b001 	ldrb.w	fp, [r3, #1]
 80129a8:	f893 c002 	ldrb.w	ip, [r3, #2]
 80129ac:	78dd      	ldrb	r5, [r3, #3]
 80129ae:	4b48      	ldr	r3, [pc, #288]	; (8012ad0 <_parse_response+0x17c>)
 80129b0:	9207      	str	r2, [sp, #28]
 80129b2:	781a      	ldrb	r2, [r3, #0]
 80129b4:	789f      	ldrb	r7, [r3, #2]
 80129b6:	78de      	ldrb	r6, [r3, #3]
 80129b8:	9206      	str	r2, [sp, #24]
 80129ba:	785a      	ldrb	r2, [r3, #1]
 80129bc:	4b45      	ldr	r3, [pc, #276]	; (8012ad4 <_parse_response+0x180>)
 80129be:	9203      	str	r2, [sp, #12]
 80129c0:	f893 a000 	ldrb.w	sl, [r3]
 80129c4:	f893 9001 	ldrb.w	r9, [r3, #1]
 80129c8:	f893 8002 	ldrb.w	r8, [r3, #2]
 80129cc:	f893 e003 	ldrb.w	lr, [r3, #3]
 80129d0:	ab47      	add	r3, sp, #284	; 0x11c
 80129d2:	42a3      	cmp	r3, r4
 80129d4:	d33f      	bcc.n	8012a56 <_parse_response+0x102>
 80129d6:	9b04      	ldr	r3, [sp, #16]
 80129d8:	b143      	cbz	r3, 80129ec <_parse_response+0x98>
 80129da:	4b3e      	ldr	r3, [pc, #248]	; (8012ad4 <_parse_response+0x180>)
 80129dc:	f883 a000 	strb.w	sl, [r3]
 80129e0:	f883 9001 	strb.w	r9, [r3, #1]
 80129e4:	f883 8002 	strb.w	r8, [r3, #2]
 80129e8:	f883 e003 	strb.w	lr, [r3, #3]
 80129ec:	9b05      	ldr	r3, [sp, #20]
 80129ee:	b133      	cbz	r3, 80129fe <_parse_response+0xaa>
 80129f0:	4b37      	ldr	r3, [pc, #220]	; (8012ad0 <_parse_response+0x17c>)
 80129f2:	9a06      	ldr	r2, [sp, #24]
 80129f4:	709f      	strb	r7, [r3, #2]
 80129f6:	701a      	strb	r2, [r3, #0]
 80129f8:	9a03      	ldr	r2, [sp, #12]
 80129fa:	70de      	strb	r6, [r3, #3]
 80129fc:	705a      	strb	r2, [r3, #1]
 80129fe:	b139      	cbz	r1, 8012a10 <_parse_response+0xbc>
 8012a00:	4b32      	ldr	r3, [pc, #200]	; (8012acc <_parse_response+0x178>)
 8012a02:	9a07      	ldr	r2, [sp, #28]
 8012a04:	f883 b001 	strb.w	fp, [r3, #1]
 8012a08:	701a      	strb	r2, [r3, #0]
 8012a0a:	f883 c002 	strb.w	ip, [r3, #2]
 8012a0e:	70dd      	strb	r5, [r3, #3]
 8012a10:	2802      	cmp	r0, #2
 8012a12:	d10c      	bne.n	8012a2e <_parse_response+0xda>
 8012a14:	4b30      	ldr	r3, [pc, #192]	; (8012ad8 <_parse_response+0x184>)
 8012a16:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8012a1a:	701a      	strb	r2, [r3, #0]
 8012a1c:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 8012a20:	705a      	strb	r2, [r3, #1]
 8012a22:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
 8012a26:	709a      	strb	r2, [r3, #2]
 8012a28:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8012a2c:	70da      	strb	r2, [r3, #3]
 8012a2e:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
 8012a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a36:	f812 cb01 	ldrb.w	ip, [r2], #1
 8012a3a:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8012a3e:	45e6      	cmp	lr, ip
 8012a40:	d0a6      	beq.n	8012990 <_parse_response+0x3c>
 8012a42:	6833      	ldr	r3, [r6, #0]
 8012a44:	1bdb      	subs	r3, r3, r7
 8012a46:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8012a4a:	d38b      	bcc.n	8012964 <_parse_response+0x10>
 8012a4c:	2800      	cmp	r0, #0
 8012a4e:	d1a1      	bne.n	8012994 <_parse_response+0x40>
 8012a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012a54:	e7eb      	b.n	8012a2e <_parse_response+0xda>
 8012a56:	781a      	ldrb	r2, [r3, #0]
 8012a58:	2a35      	cmp	r2, #53	; 0x35
 8012a5a:	d011      	beq.n	8012a80 <_parse_response+0x12c>
 8012a5c:	d808      	bhi.n	8012a70 <_parse_response+0x11c>
 8012a5e:	2a01      	cmp	r2, #1
 8012a60:	d011      	beq.n	8012a86 <_parse_response+0x132>
 8012a62:	2a03      	cmp	r2, #3
 8012a64:	d01a      	beq.n	8012a9c <_parse_response+0x148>
 8012a66:	b14a      	cbz	r2, 8012a7c <_parse_response+0x128>
 8012a68:	1c9a      	adds	r2, r3, #2
 8012a6a:	785b      	ldrb	r3, [r3, #1]
 8012a6c:	4413      	add	r3, r2
 8012a6e:	e7b0      	b.n	80129d2 <_parse_response+0x7e>
 8012a70:	2a36      	cmp	r2, #54	; 0x36
 8012a72:	d01f      	beq.n	8012ab4 <_parse_response+0x160>
 8012a74:	2aff      	cmp	r2, #255	; 0xff
 8012a76:	d1f7      	bne.n	8012a68 <_parse_response+0x114>
 8012a78:	4623      	mov	r3, r4
 8012a7a:	e7aa      	b.n	80129d2 <_parse_response+0x7e>
 8012a7c:	3301      	adds	r3, #1
 8012a7e:	e7a8      	b.n	80129d2 <_parse_response+0x7e>
 8012a80:	7898      	ldrb	r0, [r3, #2]
 8012a82:	3303      	adds	r3, #3
 8012a84:	e7a5      	b.n	80129d2 <_parse_response+0x7e>
 8012a86:	f893 a002 	ldrb.w	sl, [r3, #2]
 8012a8a:	f893 9003 	ldrb.w	r9, [r3, #3]
 8012a8e:	f893 8004 	ldrb.w	r8, [r3, #4]
 8012a92:	f893 e005 	ldrb.w	lr, [r3, #5]
 8012a96:	9204      	str	r2, [sp, #16]
 8012a98:	3306      	adds	r3, #6
 8012a9a:	e79a      	b.n	80129d2 <_parse_response+0x7e>
 8012a9c:	789a      	ldrb	r2, [r3, #2]
 8012a9e:	791f      	ldrb	r7, [r3, #4]
 8012aa0:	9206      	str	r2, [sp, #24]
 8012aa2:	78da      	ldrb	r2, [r3, #3]
 8012aa4:	795e      	ldrb	r6, [r3, #5]
 8012aa6:	9203      	str	r2, [sp, #12]
 8012aa8:	785a      	ldrb	r2, [r3, #1]
 8012aaa:	4413      	add	r3, r2
 8012aac:	2201      	movs	r2, #1
 8012aae:	3302      	adds	r3, #2
 8012ab0:	9205      	str	r2, [sp, #20]
 8012ab2:	e78e      	b.n	80129d2 <_parse_response+0x7e>
 8012ab4:	789a      	ldrb	r2, [r3, #2]
 8012ab6:	f893 b003 	ldrb.w	fp, [r3, #3]
 8012aba:	f893 c004 	ldrb.w	ip, [r3, #4]
 8012abe:	795d      	ldrb	r5, [r3, #5]
 8012ac0:	2101      	movs	r1, #1
 8012ac2:	9207      	str	r2, [sp, #28]
 8012ac4:	3306      	adds	r3, #6
 8012ac6:	e784      	b.n	80129d2 <_parse_response+0x7e>
 8012ac8:	2000a9dc 	ldrdcs	sl, [r0], -ip
 8012acc:	2000a738 	andcs	sl, r0, r8, lsr r7
 8012ad0:	2000a508 	andcs	sl, r0, r8, lsl #10
 8012ad4:	2000a510 	andcs	sl, r0, r0, lsl r5
 8012ad8:	2000a50c 	andcs	sl, r0, ip, lsl #10

08012adc <memcpy.isra.0>:
 8012adc:	3801      	subs	r0, #1
 8012ade:	440a      	add	r2, r1
 8012ae0:	4291      	cmp	r1, r2
 8012ae2:	d100      	bne.n	8012ae6 <memcpy.isra.0+0xa>
 8012ae4:	4770      	bx	lr
 8012ae6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012aea:	f800 3f01 	strb.w	r3, [r0, #1]!
 8012aee:	e7f7      	b.n	8012ae0 <memcpy.isra.0+0x4>

08012af0 <dhcp_client>:
 8012af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012af4:	b087      	sub	sp, #28
 8012af6:	9203      	str	r2, [sp, #12]
 8012af8:	4a77      	ldr	r2, [pc, #476]	; (8012cd8 <dhcp_client+0x1e8>)
 8012afa:	460f      	mov	r7, r1
 8012afc:	4605      	mov	r5, r0
 8012afe:	f44f 7309 	mov.w	r3, #548	; 0x224
 8012b02:	4614      	mov	r4, r2
 8012b04:	2100      	movs	r1, #0
 8012b06:	3b01      	subs	r3, #1
 8012b08:	f802 1b01 	strb.w	r1, [r2], #1
 8012b0c:	d1fb      	bne.n	8012b06 <dhcp_client+0x16>
 8012b0e:	f240 1301 	movw	r3, #257	; 0x101
 8012b12:	2206      	movs	r2, #6
 8012b14:	4629      	mov	r1, r5
 8012b16:	4871      	ldr	r0, [pc, #452]	; (8012cdc <dhcp_client+0x1ec>)
 8012b18:	8023      	strh	r3, [r4, #0]
 8012b1a:	70a2      	strb	r2, [r4, #2]
 8012b1c:	f7ff ffde 	bl	8012adc <memcpy.isra.0>
 8012b20:	4b6f      	ldr	r3, [pc, #444]	; (8012ce0 <dhcp_client+0x1f0>)
 8012b22:	2044      	movs	r0, #68	; 0x44
 8012b24:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 8012b28:	f240 1335 	movw	r3, #309	; 0x135
 8012b2c:	f8a4 30f0 	strh.w	r3, [r4, #240]	; 0xf0
 8012b30:	f7fe fc6c 	bl	801140c <udp_bind>
 8012b34:	1e06      	subs	r6, r0, #0
 8012b36:	f2c0 80c9 	blt.w	8012ccc <dhcp_client+0x1dc>
 8012b3a:	f04f 0915 	mov.w	r9, #21
 8012b3e:	f8df a198 	ldr.w	sl, [pc, #408]	; 8012cd8 <dhcp_client+0x1e8>
 8012b42:	f1b9 0901 	subs.w	r9, r9, #1
 8012b46:	d11f      	bne.n	8012b88 <dhcp_client+0x98>
 8012b48:	464c      	mov	r4, r9
 8012b4a:	2044      	movs	r0, #68	; 0x44
 8012b4c:	f7fe fc78 	bl	8011440 <udp_unbind>
 8012b50:	2c00      	cmp	r4, #0
 8012b52:	f000 80be 	beq.w	8012cd2 <dhcp_client+0x1e2>
 8012b56:	2204      	movs	r2, #4
 8012b58:	4962      	ldr	r1, [pc, #392]	; (8012ce4 <dhcp_client+0x1f4>)
 8012b5a:	a805      	add	r0, sp, #20
 8012b5c:	f7ff ffbe 	bl	8012adc <memcpy.isra.0>
 8012b60:	9b05      	ldr	r3, [sp, #20]
 8012b62:	2204      	movs	r2, #4
 8012b64:	4960      	ldr	r1, [pc, #384]	; (8012ce8 <dhcp_client+0x1f8>)
 8012b66:	603b      	str	r3, [r7, #0]
 8012b68:	a805      	add	r0, sp, #20
 8012b6a:	f7ff ffb7 	bl	8012adc <memcpy.isra.0>
 8012b6e:	9b05      	ldr	r3, [sp, #20]
 8012b70:	a805      	add	r0, sp, #20
 8012b72:	60bb      	str	r3, [r7, #8]
 8012b74:	2204      	movs	r2, #4
 8012b76:	495d      	ldr	r1, [pc, #372]	; (8012cec <dhcp_client+0x1fc>)
 8012b78:	f7ff ffb0 	bl	8012adc <memcpy.isra.0>
 8012b7c:	2000      	movs	r0, #0
 8012b7e:	9b05      	ldr	r3, [sp, #20]
 8012b80:	607b      	str	r3, [r7, #4]
 8012b82:	b007      	add	sp, #28
 8012b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b88:	f643 5301 	movw	r3, #15617	; 0x3d01
 8012b8c:	f240 1807 	movw	r8, #263	; 0x107
 8012b90:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 8012b94:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 8012b98:	782b      	ldrb	r3, [r5, #0]
 8012b9a:	4a55      	ldr	r2, [pc, #340]	; (8012cf0 <dhcp_client+0x200>)
 8012b9c:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 8012ba0:	786b      	ldrb	r3, [r5, #1]
 8012ba2:	fa5f fb86 	uxtb.w	fp, r6
 8012ba6:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 8012baa:	78ab      	ldrb	r3, [r5, #2]
 8012bac:	4651      	mov	r1, sl
 8012bae:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 8012bb2:	78eb      	ldrb	r3, [r5, #3]
 8012bb4:	4658      	mov	r0, fp
 8012bb6:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 8012bba:	792b      	ldrb	r3, [r5, #4]
 8012bbc:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 8012bc0:	796b      	ldrb	r3, [r5, #5]
 8012bc2:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 8012bc6:	4b4b      	ldr	r3, [pc, #300]	; (8012cf4 <dhcp_client+0x204>)
 8012bc8:	e9c4 233f 	strd	r2, r3, [r4, #252]	; 0xfc
 8012bcc:	23ff      	movs	r3, #255	; 0xff
 8012bce:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8012bd2:	2343      	movs	r3, #67	; 0x43
 8012bd4:	f240 1205 	movw	r2, #261	; 0x105
 8012bd8:	9300      	str	r3, [sp, #0]
 8012bda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012bde:	f7fe fcab 	bl	8011538 <udp_send>
 8012be2:	4629      	mov	r1, r5
 8012be4:	4630      	mov	r0, r6
 8012be6:	f7ff feb5 	bl	8012954 <_parse_response>
 8012bea:	2802      	cmp	r0, #2
 8012bec:	d1a9      	bne.n	8012b42 <dhcp_client+0x52>
 8012bee:	f643 5303 	movw	r3, #15619	; 0x3d03
 8012bf2:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 8012bf6:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 8012bfa:	782b      	ldrb	r3, [r5, #0]
 8012bfc:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8012cf8 <dhcp_client+0x208>
 8012c00:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 8012c04:	786b      	ldrb	r3, [r5, #1]
 8012c06:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 8012c0a:	78ab      	ldrb	r3, [r5, #2]
 8012c0c:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 8012c10:	78eb      	ldrb	r3, [r5, #3]
 8012c12:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 8012c16:	792b      	ldrb	r3, [r5, #4]
 8012c18:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 8012c1c:	796b      	ldrb	r3, [r5, #5]
 8012c1e:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 8012c22:	f240 4332 	movw	r3, #1074	; 0x432
 8012c26:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
 8012c2a:	4b2e      	ldr	r3, [pc, #184]	; (8012ce4 <dhcp_client+0x1f4>)
 8012c2c:	881a      	ldrh	r2, [r3, #0]
 8012c2e:	885b      	ldrh	r3, [r3, #2]
 8012c30:	f8a4 20fe 	strh.w	r2, [r4, #254]	; 0xfe
 8012c34:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 8012c38:	f240 4336 	movw	r3, #1078	; 0x436
 8012c3c:	f8a4 3102 	strh.w	r3, [r4, #258]	; 0x102
 8012c40:	4b2e      	ldr	r3, [pc, #184]	; (8012cfc <dhcp_client+0x20c>)
 8012c42:	221e      	movs	r2, #30
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 8012c4a:	230c      	movs	r3, #12
 8012c4c:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
 8012c50:	9b03      	ldr	r3, [sp, #12]
 8012c52:	1e58      	subs	r0, r3, #1
 8012c54:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8012c58:	f1a2 0e1e 	sub.w	lr, r2, #30
 8012c5c:	1c51      	adds	r1, r2, #1
 8012c5e:	bb8b      	cbnz	r3, 8012cc4 <dhcp_client+0x1d4>
 8012c60:	2037      	movs	r0, #55	; 0x37
 8012c62:	18a3      	adds	r3, r4, r2
 8012c64:	f883 00ec 	strb.w	r0, [r3, #236]	; 0xec
 8012c68:	2006      	movs	r0, #6
 8012c6a:	4421      	add	r1, r4
 8012c6c:	f881 00ec 	strb.w	r0, [r1, #236]	; 0xec
 8012c70:	2103      	movs	r1, #3
 8012c72:	f883 10ef 	strb.w	r1, [r3, #239]	; 0xef
 8012c76:	210f      	movs	r1, #15
 8012c78:	f883 10f1 	strb.w	r1, [r3, #241]	; 0xf1
 8012c7c:	213a      	movs	r1, #58	; 0x3a
 8012c7e:	f883 10f2 	strb.w	r1, [r3, #242]	; 0xf2
 8012c82:	213b      	movs	r1, #59	; 0x3b
 8012c84:	f04f 0801 	mov.w	r8, #1
 8012c88:	f883 10f3 	strb.w	r1, [r3, #243]	; 0xf3
 8012c8c:	21ff      	movs	r1, #255	; 0xff
 8012c8e:	f883 00f0 	strb.w	r0, [r3, #240]	; 0xf0
 8012c92:	f883 10f4 	strb.w	r1, [r3, #244]	; 0xf4
 8012c96:	f883 80ee 	strb.w	r8, [r3, #238]	; 0xee
 8012c9a:	2343      	movs	r3, #67	; 0x43
 8012c9c:	32f5      	adds	r2, #245	; 0xf5
 8012c9e:	f884 e109 	strb.w	lr, [r4, #265]	; 0x109
 8012ca2:	4651      	mov	r1, sl
 8012ca4:	9300      	str	r3, [sp, #0]
 8012ca6:	b292      	uxth	r2, r2
 8012ca8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012cac:	4658      	mov	r0, fp
 8012cae:	f7fe fc43 	bl	8011538 <udp_send>
 8012cb2:	4629      	mov	r1, r5
 8012cb4:	4630      	mov	r0, r6
 8012cb6:	f7ff fe4d 	bl	8012954 <_parse_response>
 8012cba:	2805      	cmp	r0, #5
 8012cbc:	f47f af41 	bne.w	8012b42 <dhcp_client+0x52>
 8012cc0:	4644      	mov	r4, r8
 8012cc2:	e742      	b.n	8012b4a <dhcp_client+0x5a>
 8012cc4:	460a      	mov	r2, r1
 8012cc6:	f80c 3b01 	strb.w	r3, [ip], #1
 8012cca:	e7c3      	b.n	8012c54 <dhcp_client+0x164>
 8012ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012cd0:	e757      	b.n	8012b82 <dhcp_client+0x92>
 8012cd2:	f06f 0001 	mvn.w	r0, #1
 8012cd6:	e754      	b.n	8012b82 <dhcp_client+0x92>
 8012cd8:	2000a514 	andcs	sl, r0, r4, lsl r5
 8012cdc:	2000a530 	andcs	sl, r0, r0, lsr r5
 8012ce0:	63538263 	cmpvs	r3, #805306374	; 0x30000006
 8012ce4:	2000a50c 	andcs	sl, r0, ip, lsl #10
 8012ce8:	2000a508 	andcs	sl, r0, r8, lsl #10
 8012cec:	2000a510 	andcs	sl, r0, r0, lsl r5
 8012cf0:	03010637 	movweq	r0, #5687	; 0x1637
 8012cf4:	3b3a0f06 	blcc	8e96914 <__exidx_end+0xe7da64>
 8012cf8:	2000a61e 	andcs	sl, r0, lr, lsl r6
 8012cfc:	2000a738 	andcs	sl, r0, r8, lsr r7

08012d00 <dhcp_client_release>:
 8012d00:	b507      	push	{r0, r1, r2, lr}
 8012d02:	2044      	movs	r0, #68	; 0x44
 8012d04:	f7fe fb82 	bl	801140c <udp_bind>
 8012d08:	f243 6307 	movw	r3, #13831	; 0x3607
 8012d0c:	4911      	ldr	r1, [pc, #68]	; (8012d54 <dhcp_client_release+0x54>)
 8012d0e:	b2c0      	uxtb	r0, r0
 8012d10:	f8a1 30f2 	strh.w	r3, [r1, #242]	; 0xf2
 8012d14:	2304      	movs	r3, #4
 8012d16:	f881 30f4 	strb.w	r3, [r1, #244]	; 0xf4
 8012d1a:	4b0f      	ldr	r3, [pc, #60]	; (8012d58 <dhcp_client_release+0x58>)
 8012d1c:	781a      	ldrb	r2, [r3, #0]
 8012d1e:	f881 20f5 	strb.w	r2, [r1, #245]	; 0xf5
 8012d22:	785a      	ldrb	r2, [r3, #1]
 8012d24:	f881 20f6 	strb.w	r2, [r1, #246]	; 0xf6
 8012d28:	789a      	ldrb	r2, [r3, #2]
 8012d2a:	78db      	ldrb	r3, [r3, #3]
 8012d2c:	f881 20f7 	strb.w	r2, [r1, #247]	; 0xf7
 8012d30:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
 8012d34:	23ff      	movs	r3, #255	; 0xff
 8012d36:	f881 30f9 	strb.w	r3, [r1, #249]	; 0xf9
 8012d3a:	2343      	movs	r3, #67	; 0x43
 8012d3c:	22fa      	movs	r2, #250	; 0xfa
 8012d3e:	9300      	str	r3, [sp, #0]
 8012d40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012d44:	f7fe fbf8 	bl	8011538 <udp_send>
 8012d48:	2044      	movs	r0, #68	; 0x44
 8012d4a:	b003      	add	sp, #12
 8012d4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d50:	f7fe bb76 	b.w	8011440 <udp_unbind>
 8012d54:	2000a514 	andcs	sl, r0, r4, lsl r5
 8012d58:	2000a738 	andcs	sl, r0, r8, lsr r7

08012d5c <memcpy.isra.0>:
 8012d5c:	3801      	subs	r0, #1
 8012d5e:	440a      	add	r2, r1
 8012d60:	4291      	cmp	r1, r2
 8012d62:	d100      	bne.n	8012d66 <memcpy.isra.0+0xa>
 8012d64:	4770      	bx	lr
 8012d66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012d6a:	f800 3f01 	strb.w	r3, [r0, #1]!
 8012d6e:	e7f7      	b.n	8012d60 <memcpy.isra.0+0x4>

08012d70 <_send_report>:
 8012d70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012d72:	491c      	ldr	r1, [pc, #112]	; (8012de4 <_send_report+0x74>)
 8012d74:	4c1c      	ldr	r4, [pc, #112]	; (8012de8 <_send_report+0x78>)
 8012d76:	f3c0 2306 	ubfx	r3, r0, #8, #7
 8012d7a:	9001      	str	r0, [sp, #4]
 8012d7c:	70cb      	strb	r3, [r1, #3]
 8012d7e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8012d82:	f3c0 6007 	ubfx	r0, r0, #24, #8
 8012d86:	710b      	strb	r3, [r1, #4]
 8012d88:	7148      	strb	r0, [r1, #5]
 8012d8a:	2206      	movs	r2, #6
 8012d8c:	4620      	mov	r0, r4
 8012d8e:	f7ff ffe5 	bl	8012d5c <memcpy.isra.0>
 8012d92:	2204      	movs	r2, #4
 8012d94:	2700      	movs	r7, #0
 8012d96:	4d15      	ldr	r5, [pc, #84]	; (8012dec <_send_report+0x7c>)
 8012d98:	eb0d 0102 	add.w	r1, sp, r2
 8012d9c:	882b      	ldrh	r3, [r5, #0]
 8012d9e:	f104 001e 	add.w	r0, r4, #30
 8012da2:	f104 060e 	add.w	r6, r4, #14
 8012da6:	8263      	strh	r3, [r4, #18]
 8012da8:	f7ff ffd8 	bl	8012d5c <memcpy.isra.0>
 8012dac:	2118      	movs	r1, #24
 8012dae:	4630      	mov	r0, r6
 8012db0:	8327      	strh	r7, [r4, #24]
 8012db2:	f000 f8c6 	bl	8012f42 <net_chksum>
 8012db6:	2204      	movs	r2, #4
 8012db8:	8320      	strh	r0, [r4, #24]
 8012dba:	eb0d 0102 	add.w	r1, sp, r2
 8012dbe:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 8012dc2:	f7ff ffcb 	bl	8012d5c <memcpy.isra.0>
 8012dc6:	2120      	movs	r1, #32
 8012dc8:	4630      	mov	r0, r6
 8012dca:	8527      	strh	r7, [r4, #40]	; 0x28
 8012dcc:	f000 f8b9 	bl	8012f42 <net_chksum>
 8012dd0:	212e      	movs	r1, #46	; 0x2e
 8012dd2:	8520      	strh	r0, [r4, #40]	; 0x28
 8012dd4:	4620      	mov	r0, r4
 8012dd6:	f002 fc6d 	bl	80156b4 <emac_eth_send>
 8012dda:	882b      	ldrh	r3, [r5, #0]
 8012ddc:	3301      	adds	r3, #1
 8012dde:	802b      	strh	r3, [r5, #0]
 8012de0:	b003      	add	sp, #12
 8012de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012de4:	2000a894 	mulcs	r0, r4, r8
 8012de8:	2000a89c 	mulcs	r0, ip, r8
 8012dec:	2000a85c 	andcs	sl, r0, ip, asr r8

08012df0 <igmp_set_ip>:
 8012df0:	b507      	push	{r0, r1, r2, lr}
 8012df2:	2204      	movs	r2, #4
 8012df4:	6803      	ldr	r3, [r0, #0]
 8012df6:	eb0d 0102 	add.w	r1, sp, r2
 8012dfa:	4806      	ldr	r0, [pc, #24]	; (8012e14 <igmp_set_ip+0x24>)
 8012dfc:	9301      	str	r3, [sp, #4]
 8012dfe:	f7ff ffad 	bl	8012d5c <memcpy.isra.0>
 8012e02:	2204      	movs	r2, #4
 8012e04:	4804      	ldr	r0, [pc, #16]	; (8012e18 <igmp_set_ip+0x28>)
 8012e06:	eb0d 0102 	add.w	r1, sp, r2
 8012e0a:	f7ff ffa7 	bl	8012d5c <memcpy.isra.0>
 8012e0e:	b003      	add	sp, #12
 8012e10:	f85d fb04 	ldr.w	pc, [sp], #4
 8012e14:	2000a8b6 			; <UNDEFINED> instruction: 0x2000a8b6
 8012e18:	2000a87e 	andcs	sl, r0, lr, ror r8

08012e1c <igmp_timer>:
 8012e1c:	b570      	push	{r4, r5, r6, lr}
 8012e1e:	2500      	movs	r5, #0
 8012e20:	2602      	movs	r6, #2
 8012e22:	4c0a      	ldr	r4, [pc, #40]	; (8012e4c <igmp_timer+0x30>)
 8012e24:	7963      	ldrb	r3, [r4, #5]
 8012e26:	2b01      	cmp	r3, #1
 8012e28:	d109      	bne.n	8012e3e <igmp_timer+0x22>
 8012e2a:	7923      	ldrb	r3, [r4, #4]
 8012e2c:	b13b      	cbz	r3, 8012e3e <igmp_timer+0x22>
 8012e2e:	3b01      	subs	r3, #1
 8012e30:	b2db      	uxtb	r3, r3
 8012e32:	7123      	strb	r3, [r4, #4]
 8012e34:	b91b      	cbnz	r3, 8012e3e <igmp_timer+0x22>
 8012e36:	6820      	ldr	r0, [r4, #0]
 8012e38:	f7ff ff9a 	bl	8012d70 <_send_report>
 8012e3c:	7166      	strb	r6, [r4, #5]
 8012e3e:	3501      	adds	r5, #1
 8012e40:	2d24      	cmp	r5, #36	; 0x24
 8012e42:	f104 0408 	add.w	r4, r4, #8
 8012e46:	d1ed      	bne.n	8012e24 <igmp_timer+0x8>
 8012e48:	bd70      	pop	{r4, r5, r6, pc}
 8012e4a:	bf00      	nop
 8012e4c:	2000a73c 	andcs	sl, r0, ip, lsr r7

08012e50 <igmp_join>:
 8012e50:	b538      	push	{r3, r4, r5, lr}
 8012e52:	f000 03e0 	and.w	r3, r0, #224	; 0xe0
 8012e56:	2be0      	cmp	r3, #224	; 0xe0
 8012e58:	d11b      	bne.n	8012e92 <igmp_join+0x42>
 8012e5a:	4911      	ldr	r1, [pc, #68]	; (8012ea0 <igmp_join+0x50>)
 8012e5c:	680c      	ldr	r4, [r1, #0]
 8012e5e:	2c24      	cmp	r4, #36	; 0x24
 8012e60:	d01a      	beq.n	8012e98 <igmp_join+0x48>
 8012e62:	2300      	movs	r3, #0
 8012e64:	4a0f      	ldr	r2, [pc, #60]	; (8012ea4 <igmp_join+0x54>)
 8012e66:	429c      	cmp	r4, r3
 8012e68:	dc0d      	bgt.n	8012e86 <igmp_join+0x36>
 8012e6a:	f44f 7381 	mov.w	r3, #258	; 0x102
 8012e6e:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
 8012e72:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8012e76:	8093      	strh	r3, [r2, #4]
 8012e78:	1c63      	adds	r3, r4, #1
 8012e7a:	600b      	str	r3, [r1, #0]
 8012e7c:	f7ff ff78 	bl	8012d70 <_send_report>
 8012e80:	4623      	mov	r3, r4
 8012e82:	4618      	mov	r0, r3
 8012e84:	bd38      	pop	{r3, r4, r5, pc}
 8012e86:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8012e8a:	4285      	cmp	r5, r0
 8012e8c:	d0f9      	beq.n	8012e82 <igmp_join+0x32>
 8012e8e:	3301      	adds	r3, #1
 8012e90:	e7e9      	b.n	8012e66 <igmp_join+0x16>
 8012e92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e96:	e7f4      	b.n	8012e82 <igmp_join+0x32>
 8012e98:	f06f 0301 	mvn.w	r3, #1
 8012e9c:	e7f1      	b.n	8012e82 <igmp_join+0x32>
 8012e9e:	bf00      	nop
 8012ea0:	2000a860 	andcs	sl, r0, r0, ror #16
 8012ea4:	2000a73c 	andcs	sl, r0, ip, lsr r7

08012ea8 <igmp_leave>:
 8012ea8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012eac:	2600      	movs	r6, #0
 8012eae:	4f1c      	ldr	r7, [pc, #112]	; (8012f20 <igmp_leave+0x78>)
 8012eb0:	f857 3036 	ldr.w	r3, [r7, r6, lsl #3]
 8012eb4:	4283      	cmp	r3, r0
 8012eb6:	d007      	beq.n	8012ec8 <igmp_leave+0x20>
 8012eb8:	3601      	adds	r6, #1
 8012eba:	2e24      	cmp	r6, #36	; 0x24
 8012ebc:	d1f8      	bne.n	8012eb0 <igmp_leave+0x8>
 8012ebe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012ec2:	b002      	add	sp, #8
 8012ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ec8:	2400      	movs	r4, #0
 8012eca:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8012f24 <igmp_leave+0x7c>
 8012ece:	4d16      	ldr	r5, [pc, #88]	; (8012f28 <igmp_leave+0x80>)
 8012ed0:	f8b8 3000 	ldrh.w	r3, [r8]
 8012ed4:	2118      	movs	r1, #24
 8012ed6:	9001      	str	r0, [sp, #4]
 8012ed8:	4814      	ldr	r0, [pc, #80]	; (8012f2c <igmp_leave+0x84>)
 8012eda:	826b      	strh	r3, [r5, #18]
 8012edc:	832c      	strh	r4, [r5, #24]
 8012ede:	f000 f830 	bl	8012f42 <net_chksum>
 8012ee2:	2204      	movs	r2, #4
 8012ee4:	8328      	strh	r0, [r5, #24]
 8012ee6:	eb0d 0102 	add.w	r1, sp, r2
 8012eea:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 8012eee:	f7ff ff35 	bl	8012d5c <memcpy.isra.0>
 8012ef2:	2120      	movs	r1, #32
 8012ef4:	f105 000e 	add.w	r0, r5, #14
 8012ef8:	852c      	strh	r4, [r5, #40]	; 0x28
 8012efa:	f000 f822 	bl	8012f42 <net_chksum>
 8012efe:	212e      	movs	r1, #46	; 0x2e
 8012f00:	8528      	strh	r0, [r5, #40]	; 0x28
 8012f02:	4628      	mov	r0, r5
 8012f04:	f002 fbd6 	bl	80156b4 <emac_eth_send>
 8012f08:	f8b8 3000 	ldrh.w	r3, [r8]
 8012f0c:	f847 4036 	str.w	r4, [r7, r6, lsl #3]
 8012f10:	3301      	adds	r3, #1
 8012f12:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
 8012f16:	4620      	mov	r0, r4
 8012f18:	f8a8 3000 	strh.w	r3, [r8]
 8012f1c:	80b4      	strh	r4, [r6, #4]
 8012f1e:	e7d0      	b.n	8012ec2 <igmp_leave+0x1a>
 8012f20:	2000a73c 	andcs	sl, r0, ip, lsr r7
 8012f24:	2000a85c 	andcs	sl, r0, ip, asr r8
 8012f28:	2000a864 	andcs	sl, r0, r4, ror #16
 8012f2c:	2000a8aa 	andcs	sl, r0, sl, lsr #17

08012f30 <ip_set_ip>:
 8012f30:	b510      	push	{r4, lr}
 8012f32:	4604      	mov	r4, r0
 8012f34:	f7fe fa4a 	bl	80113cc <udp_set_ip>
 8012f38:	4620      	mov	r0, r4
 8012f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f3e:	f7ff bf57 	b.w	8012df0 <igmp_set_ip>

08012f42 <net_chksum>:
 8012f42:	2300      	movs	r3, #0
 8012f44:	f021 0201 	bic.w	r2, r1, #1
 8012f48:	b530      	push	{r4, r5, lr}
 8012f4a:	4402      	add	r2, r0
 8012f4c:	084c      	lsrs	r4, r1, #1
 8012f4e:	4290      	cmp	r0, r2
 8012f50:	d10e      	bne.n	8012f70 <net_chksum+0x2e>
 8012f52:	f06f 0201 	mvn.w	r2, #1
 8012f56:	fb02 1104 	mla	r1, r2, r4, r1
 8012f5a:	b121      	cbz	r1, 8012f66 <net_chksum+0x24>
 8012f5c:	7802      	ldrb	r2, [r0, #0]
 8012f5e:	0212      	lsls	r2, r2, #8
 8012f60:	ba52      	rev16	r2, r2
 8012f62:	b292      	uxth	r2, r2
 8012f64:	4413      	add	r3, r2
 8012f66:	0c1a      	lsrs	r2, r3, #16
 8012f68:	d106      	bne.n	8012f78 <net_chksum+0x36>
 8012f6a:	43d8      	mvns	r0, r3
 8012f6c:	b280      	uxth	r0, r0
 8012f6e:	bd30      	pop	{r4, r5, pc}
 8012f70:	f830 5b02 	ldrh.w	r5, [r0], #2
 8012f74:	442b      	add	r3, r5
 8012f76:	e7ea      	b.n	8012f4e <net_chksum+0xc>
 8012f78:	b29b      	uxth	r3, r3
 8012f7a:	e7f3      	b.n	8012f64 <net_chksum+0x22>

08012f7c <memcpy.isra.0>:
 8012f7c:	3801      	subs	r0, #1
 8012f7e:	440a      	add	r2, r1
 8012f80:	4291      	cmp	r1, r2
 8012f82:	d100      	bne.n	8012f86 <memcpy.isra.0+0xa>
 8012f84:	4770      	bx	lr
 8012f86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012f8a:	f800 3f01 	strb.w	r3, [r0, #1]!
 8012f8e:	e7f7      	b.n	8012f80 <memcpy.isra.0+0x4>

08012f90 <Display::Write(unsigned char, char const*) [clone .isra.0]>:
 8012f90:	b430      	push	{r4, r5}
 8012f92:	b168      	cbz	r0, 8012fb0 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x20>
 8012f94:	2300      	movs	r3, #0
 8012f96:	7905      	ldrb	r5, [r0, #4]
 8012f98:	5cd4      	ldrb	r4, [r2, r3]
 8012f9a:	b11c      	cbz	r4, 8012fa4 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x14>
 8012f9c:	1c5c      	adds	r4, r3, #1
 8012f9e:	429d      	cmp	r5, r3
 8012fa0:	4623      	mov	r3, r4
 8012fa2:	dcf9      	bgt.n	8012f98 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x8>
 8012fa4:	6804      	ldr	r4, [r0, #0]
 8012fa6:	b2db      	uxtb	r3, r3
 8012fa8:	69e4      	ldr	r4, [r4, #28]
 8012faa:	46a4      	mov	ip, r4
 8012fac:	bc30      	pop	{r4, r5}
 8012fae:	4760      	bx	ip
 8012fb0:	bc30      	pop	{r4, r5}
 8012fb2:	4770      	bx	lr

08012fb4 <Display::ClearLine(unsigned char) [clone .isra.0]>:
 8012fb4:	b110      	cbz	r0, 8012fbc <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 8012fb6:	6803      	ldr	r3, [r0, #0]
 8012fb8:	691b      	ldr	r3, [r3, #16]
 8012fba:	4718      	bx	r3
 8012fbc:	4770      	bx	lr

08012fbe <Display::Status(Display7SegmentMessage)>:
 8012fbe:	7c43      	ldrb	r3, [r0, #17]
 8012fc0:	b513      	push	{r0, r1, r4, lr}
 8012fc2:	4604      	mov	r4, r0
 8012fc4:	b19b      	cbz	r3, 8012fee <Display::Status(Display7SegmentMessage)+0x30>
 8012fc6:	43c9      	mvns	r1, r1
 8012fc8:	2312      	movs	r3, #18
 8012fca:	7a00      	ldrb	r0, [r0, #8]
 8012fcc:	f88d 3004 	strb.w	r3, [sp, #4]
 8012fd0:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8012fd4:	f88d 1006 	strb.w	r1, [sp, #6]
 8012fd8:	f88d 3005 	strb.w	r3, [sp, #5]
 8012fdc:	f002 fc02 	bl	80157e4 <gd32_i2c_set_address(unsigned char)>
 8012fe0:	68e0      	ldr	r0, [r4, #12]
 8012fe2:	f002 fbf7 	bl	80157d4 <gd32_i2c_set_baudrate(unsigned int)>
 8012fe6:	2103      	movs	r1, #3
 8012fe8:	a801      	add	r0, sp, #4
 8012fea:	f002 fc01 	bl	80157f0 <gd32_i2c_write(char const*, unsigned int)>
 8012fee:	b002      	add	sp, #8
 8012ff0:	bd10      	pop	{r4, pc}
	...

08012ff4 <DisplayUdf::DisplayUdf()>:
 8012ff4:	b510      	push	{r4, lr}
 8012ff6:	4604      	mov	r4, r0
 8012ff8:	f000 ffea 	bl	8013fd0 <Display::Display()>
 8012ffc:	2202      	movs	r2, #2
 8012ffe:	2300      	movs	r3, #0
 8013000:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
 8013004:	4b05      	ldr	r3, [pc, #20]	; (801301c <DisplayUdf::DisplayUdf()+0x28>)
 8013006:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 801300a:	601c      	str	r4, [r3, #0]
 801300c:	2301      	movs	r3, #1
 801300e:	f802 3b01 	strb.w	r3, [r2], #1
 8013012:	3301      	adds	r3, #1
 8013014:	2b15      	cmp	r3, #21
 8013016:	d1fa      	bne.n	801300e <DisplayUdf::DisplayUdf()+0x1a>
 8013018:	4620      	mov	r0, r4
 801301a:	bd10      	pop	{r4, pc}
 801301c:	2000a8cc 	andcs	sl, r0, ip, asr #17

08013020 <DisplayUdf::SetTitle(char const*, ...)>:
 8013020:	b40e      	push	{r1, r2, r3}
 8013022:	b517      	push	{r0, r1, r2, r4, lr}
 8013024:	ab05      	add	r3, sp, #20
 8013026:	f853 2b04 	ldr.w	r2, [r3], #4
 801302a:	4604      	mov	r4, r0
 801302c:	211f      	movs	r1, #31
 801302e:	301c      	adds	r0, #28
 8013030:	9301      	str	r3, [sp, #4]
 8013032:	f7f6 fb5b 	bl	80096ec <vsnprintf>
 8013036:	2300      	movs	r3, #0
 8013038:	4404      	add	r4, r0
 801303a:	7723      	strb	r3, [r4, #28]
 801303c:	b003      	add	sp, #12
 801303e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013042:	b003      	add	sp, #12
 8013044:	4770      	bx	lr
	...

08013048 <DisplayUdf::ShowEmacStart()>:
 8013048:	b510      	push	{r4, lr}
 801304a:	4604      	mov	r4, r0
 801304c:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 8013050:	6980      	ldr	r0, [r0, #24]
 8013052:	f7ff ffaf 	bl	8012fb4 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8013056:	4620      	mov	r0, r4
 8013058:	4a02      	ldr	r2, [pc, #8]	; (8013064 <DisplayUdf::ShowEmacStart()+0x1c>)
 801305a:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 801305e:	f7f5 fcd5 	bl	8008a0c <Display::Printf(unsigned char, char const*, ...)>
 8013062:	bd10      	pop	{r4, pc}
 8013064:	0801869f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r9, sl, pc}

08013068 <DisplayUdf::ShowIpAddress()>:
 8013068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801306c:	4604      	mov	r4, r0
 801306e:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 8013072:	b086      	sub	sp, #24
 8013074:	6980      	ldr	r0, [r0, #24]
 8013076:	f7ff ff9d 	bl	8012fb4 <Display::ClearLine(unsigned char) [clone .isra.0]>
 801307a:	4b13      	ldr	r3, [pc, #76]	; (80130c8 <DisplayUdf::ShowIpAddress()+0x60>)
 801307c:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
 8013080:	681d      	ldr	r5, [r3, #0]
 8013082:	69a8      	ldr	r0, [r5, #24]
 8013084:	692e      	ldr	r6, [r5, #16]
 8013086:	f7f5 fbbd 	bl	8008804 <__popcountsi2>
 801308a:	78eb      	ldrb	r3, [r5, #3]
 801308c:	fa5f f886 	uxtb.w	r8, r6
 8013090:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8013094:	f3c6 4a07 	ubfx	sl, r6, #16, #8
 8013098:	0e36      	lsrs	r6, r6, #24
 801309a:	b99b      	cbnz	r3, 80130c4 <DisplayUdf::ShowIpAddress()+0x5c>
 801309c:	786b      	ldrb	r3, [r5, #1]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	bf14      	ite	ne
 80130a2:	2244      	movne	r2, #68	; 0x44
 80130a4:	2253      	moveq	r2, #83	; 0x53
 80130a6:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80130aa:	4643      	mov	r3, r8
 80130ac:	4639      	mov	r1, r7
 80130ae:	4620      	mov	r0, r4
 80130b0:	e9cd a601 	strd	sl, r6, [sp, #4]
 80130b4:	4a05      	ldr	r2, [pc, #20]	; (80130cc <DisplayUdf::ShowIpAddress()+0x64>)
 80130b6:	f8cd 9000 	str.w	r9, [sp]
 80130ba:	f7f5 fca7 	bl	8008a0c <Display::Printf(unsigned char, char const*, ...)>
 80130be:	b006      	add	sp, #24
 80130c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130c4:	225a      	movs	r2, #90	; 0x5a
 80130c6:	e7ee      	b.n	80130a6 <DisplayUdf::ShowIpAddress()+0x3e>
 80130c8:	2000a29c 	mulcs	r0, ip, r2
 80130cc:	080186ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r9, sl, pc}

080130d0 <DisplayUdf::ShowNetmask()>:
 80130d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80130d2:	4604      	mov	r4, r0
 80130d4:	4b0b      	ldr	r3, [pc, #44]	; (8013104 <DisplayUdf::ShowNetmask()+0x34>)
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	699b      	ldr	r3, [r3, #24]
 80130da:	0e1a      	lsrs	r2, r3, #24
 80130dc:	9202      	str	r2, [sp, #8]
 80130de:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80130e2:	9201      	str	r2, [sp, #4]
 80130e4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80130e8:	9200      	str	r2, [sp, #0]
 80130ea:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 80130ee:	4a06      	ldr	r2, [pc, #24]	; (8013108 <DisplayUdf::ShowNetmask()+0x38>)
 80130f0:	b2db      	uxtb	r3, r3
 80130f2:	f7f5 fc8b 	bl	8008a0c <Display::Printf(unsigned char, char const*, ...)>
 80130f6:	4620      	mov	r0, r4
 80130f8:	b004      	add	sp, #16
 80130fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80130fe:	f7ff bfb3 	b.w	8013068 <DisplayUdf::ShowIpAddress()>
 8013102:	bf00      	nop
 8013104:	2000a29c 	mulcs	r0, ip, r2
 8013108:	080186c0 	stmdaeq	r1, {r6, r7, r9, sl, pc}

0801310c <DisplayUdf::ShowGatewayIp()>:
 801310c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801310e:	4604      	mov	r4, r0
 8013110:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 8013114:	6980      	ldr	r0, [r0, #24]
 8013116:	f7ff ff4d 	bl	8012fb4 <Display::ClearLine(unsigned char) [clone .isra.0]>
 801311a:	4b0a      	ldr	r3, [pc, #40]	; (8013144 <DisplayUdf::ShowGatewayIp()+0x38>)
 801311c:	4620      	mov	r0, r4
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	f894 104e 	ldrb.w	r1, [r4, #78]	; 0x4e
 8013124:	695b      	ldr	r3, [r3, #20]
 8013126:	0e1a      	lsrs	r2, r3, #24
 8013128:	9202      	str	r2, [sp, #8]
 801312a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801312e:	9201      	str	r2, [sp, #4]
 8013130:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8013134:	9200      	str	r2, [sp, #0]
 8013136:	b2db      	uxtb	r3, r3
 8013138:	4a03      	ldr	r2, [pc, #12]	; (8013148 <DisplayUdf::ShowGatewayIp()+0x3c>)
 801313a:	f7f5 fc67 	bl	8008a0c <Display::Printf(unsigned char, char const*, ...)>
 801313e:	b004      	add	sp, #16
 8013140:	bd10      	pop	{r4, pc}
 8013142:	bf00      	nop
 8013144:	2000a29c 	mulcs	r0, ip, r2
 8013148:	080186cf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, r9, sl, pc}

0801314c <DisplayUdf::ShowHostName()>:
 801314c:	b510      	push	{r4, lr}
 801314e:	4604      	mov	r4, r0
 8013150:	f890 1043 	ldrb.w	r1, [r0, #67]	; 0x43
 8013154:	6980      	ldr	r0, [r0, #24]
 8013156:	f7ff ff2d 	bl	8012fb4 <Display::ClearLine(unsigned char) [clone .isra.0]>
 801315a:	4b05      	ldr	r3, [pc, #20]	; (8013170 <DisplayUdf::ShowHostName()+0x24>)
 801315c:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 8013160:	681a      	ldr	r2, [r3, #0]
 8013162:	69a0      	ldr	r0, [r4, #24]
 8013164:	321c      	adds	r2, #28
 8013166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801316a:	f7ff bf11 	b.w	8012f90 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 801316e:	bf00      	nop
 8013170:	2000a29c 	mulcs	r0, ip, r2

08013174 <DisplayUdf::Show()>:
 8013174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013176:	4604      	mov	r4, r0
 8013178:	21ff      	movs	r1, #255	; 0xff
 801317a:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 801317e:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8013182:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013186:	2806      	cmp	r0, #6
 8013188:	bf88      	it	hi
 801318a:	f803 1c01 	strbhi.w	r1, [r3, #-1]
 801318e:	429a      	cmp	r2, r3
 8013190:	d1f7      	bne.n	8013182 <DisplayUdf::Show()+0xe>
 8013192:	2501      	movs	r5, #1
 8013194:	4629      	mov	r1, r5
 8013196:	3501      	adds	r5, #1
 8013198:	69a0      	ldr	r0, [r4, #24]
 801319a:	b2ed      	uxtb	r5, r5
 801319c:	f7ff ff0a 	bl	8012fb4 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80131a0:	2d06      	cmp	r5, #6
 80131a2:	d1f7      	bne.n	8013194 <DisplayUdf::Show()+0x20>
 80131a4:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 80131a8:	69a0      	ldr	r0, [r4, #24]
 80131aa:	f104 021c 	add.w	r2, r4, #28
 80131ae:	f7ff feef 	bl	8012f90 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 80131b2:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80131b6:	69a0      	ldr	r0, [r4, #24]
 80131b8:	4a0d      	ldr	r2, [pc, #52]	; (80131f0 <DisplayUdf::Show()+0x7c>)
 80131ba:	f7ff fee9 	bl	8012f90 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 80131be:	4b0d      	ldr	r3, [pc, #52]	; (80131f4 <DisplayUdf::Show()+0x80>)
 80131c0:	4a0d      	ldr	r2, [pc, #52]	; (80131f8 <DisplayUdf::Show()+0x84>)
 80131c2:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 80131c6:	9300      	str	r3, [sp, #0]
 80131c8:	4620      	mov	r0, r4
 80131ca:	2303      	movs	r3, #3
 80131cc:	f7f5 fc1e 	bl	8008a0c <Display::Printf(unsigned char, char const*, ...)>
 80131d0:	4620      	mov	r0, r4
 80131d2:	f7ff ff49 	bl	8013068 <DisplayUdf::ShowIpAddress()>
 80131d6:	4620      	mov	r0, r4
 80131d8:	f7ff ff98 	bl	801310c <DisplayUdf::ShowGatewayIp()>
 80131dc:	4620      	mov	r0, r4
 80131de:	f7ff ff77 	bl	80130d0 <DisplayUdf::ShowNetmask()>
 80131e2:	4620      	mov	r0, r4
 80131e4:	b003      	add	sp, #12
 80131e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80131ea:	f7ff bfaf 	b.w	801314c <DisplayUdf::ShowHostName()>
 80131ee:	bf00      	nop
 80131f0:	08016c05 	stmdaeq	r1, {r0, r2, sl, fp, sp, lr}
 80131f4:	2000a964 	andcs	sl, r0, r4, ror #18
 80131f8:	080186de 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r9, sl, pc}

080131fc <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 80131fc:	3901      	subs	r1, #1
 80131fe:	b510      	push	{r4, lr}
 8013200:	4604      	mov	r4, r0
 8013202:	2903      	cmp	r1, #3
 8013204:	d814      	bhi.n	8013230 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 8013206:	e8df f001 	tbb	[pc, r1]
 801320a:	281b1402 	ldmdacs	fp, {r1, sl, ip}
 801320e:	4b14      	ldr	r3, [pc, #80]	; (8013260 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8013210:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 8013214:	6818      	ldr	r0, [r3, #0]
 8013216:	f7ff fed2 	bl	8012fbe <Display::Status(Display7SegmentMessage)>
 801321a:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 801321e:	69a0      	ldr	r0, [r4, #24]
 8013220:	f7ff fec8 	bl	8012fb4 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8013224:	4a0f      	ldr	r2, [pc, #60]	; (8013264 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x68>)
 8013226:	4620      	mov	r0, r4
 8013228:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 801322c:	f7f5 fbee 	bl	8008a0c <Display::Printf(unsigned char, char const*, ...)>
 8013230:	bd10      	pop	{r4, pc}
 8013232:	f248 0180 	movw	r1, #32896	; 0x8080
 8013236:	4b0a      	ldr	r3, [pc, #40]	; (8013260 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8013238:	6818      	ldr	r0, [r3, #0]
 801323a:	f7ff fec0 	bl	8012fbe <Display::Status(Display7SegmentMessage)>
 801323e:	e7f7      	b.n	8013230 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 8013240:	4b07      	ldr	r3, [pc, #28]	; (8013260 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8013242:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 8013246:	6818      	ldr	r0, [r3, #0]
 8013248:	f7ff feb9 	bl	8012fbe <Display::Status(Display7SegmentMessage)>
 801324c:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8013250:	69a0      	ldr	r0, [r4, #24]
 8013252:	f7ff feaf 	bl	8012fb4 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8013256:	4a04      	ldr	r2, [pc, #16]	; (8013268 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x6c>)
 8013258:	e7e5      	b.n	8013226 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x2a>
 801325a:	f645 3179 	movw	r1, #23417	; 0x5b79
 801325e:	e7ea      	b.n	8013236 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x3a>
 8013260:	2000a8d4 	ldrdcs	sl, [r0], -r4
 8013264:	080186ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r9, sl, pc}
 8013268:	080186fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r9, sl, pc}

0801326c <DisplayUdf::ShowShutdown()>:
 801326c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013270:	4604      	mov	r4, r0
 8013272:	6980      	ldr	r0, [r0, #24]
 8013274:	b308      	cbz	r0, 80132ba <DisplayUdf::ShowShutdown()+0x4e>
 8013276:	f890 8005 	ldrb.w	r8, [r0, #5]
 801327a:	6803      	ldr	r3, [r0, #0]
 801327c:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
 8013280:	b2ed      	uxtb	r5, r5
 8013282:	462a      	mov	r2, r5
 8013284:	2100      	movs	r1, #0
 8013286:	6a1b      	ldr	r3, [r3, #32]
 8013288:	7907      	ldrb	r7, [r0, #4]
 801328a:	2600      	movs	r6, #0
 801328c:	4798      	blx	r3
 801328e:	3f01      	subs	r7, #1
 8013290:	42b7      	cmp	r7, r6
 8013292:	69a0      	ldr	r0, [r4, #24]
 8013294:	d906      	bls.n	80132a4 <DisplayUdf::ShowShutdown()+0x38>
 8013296:	b118      	cbz	r0, 80132a0 <DisplayUdf::ShowShutdown()+0x34>
 8013298:	6803      	ldr	r3, [r0, #0]
 801329a:	2120      	movs	r1, #32
 801329c:	695b      	ldr	r3, [r3, #20]
 801329e:	4798      	blx	r3
 80132a0:	3601      	adds	r6, #1
 80132a2:	e7f5      	b.n	8013290 <DisplayUdf::ShowShutdown()+0x24>
 80132a4:	b120      	cbz	r0, 80132b0 <DisplayUdf::ShowShutdown()+0x44>
 80132a6:	6803      	ldr	r3, [r0, #0]
 80132a8:	462a      	mov	r2, r5
 80132aa:	2100      	movs	r1, #0
 80132ac:	6a1b      	ldr	r3, [r3, #32]
 80132ae:	4798      	blx	r3
 80132b0:	4641      	mov	r1, r8
 80132b2:	4a05      	ldr	r2, [pc, #20]	; (80132c8 <DisplayUdf::ShowShutdown()+0x5c>)
 80132b4:	69a0      	ldr	r0, [r4, #24]
 80132b6:	f7ff fe6b 	bl	8012f90 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 80132ba:	f44f 41de 	mov.w	r1, #28416	; 0x6f00
 80132be:	4620      	mov	r0, r4
 80132c0:	f7ff fe7d 	bl	8012fbe <Display::Status(Display7SegmentMessage)>
 80132c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132c8:	08018709 	stmdaeq	r1, {r0, r3, r8, r9, sl, pc}

080132cc <DisplayUdf::Set(unsigned char, displayudf::Labels)>:
 80132cc:	1e4b      	subs	r3, r1, #1
 80132ce:	2b05      	cmp	r3, #5
 80132d0:	b530      	push	{r4, r5, lr}
 80132d2:	d80f      	bhi.n	80132f4 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x28>
 80132d4:	2300      	movs	r3, #0
 80132d6:	f100 043c 	add.w	r4, r0, #60	; 0x3c
 80132da:	f814 5b01 	ldrb.w	r5, [r4], #1
 80132de:	428d      	cmp	r5, r1
 80132e0:	d109      	bne.n	80132f6 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x2a>
 80132e2:	1884      	adds	r4, r0, r2
 80132e4:	f894 403c 	ldrb.w	r4, [r4, #60]	; 0x3c
 80132e8:	4403      	add	r3, r0
 80132ea:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
 80132ee:	4410      	add	r0, r2
 80132f0:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
 80132f4:	bd30      	pop	{r4, r5, pc}
 80132f6:	3301      	adds	r3, #1
 80132f8:	2b14      	cmp	r3, #20
 80132fa:	d1ee      	bne.n	80132da <DisplayUdf::Set(unsigned char, displayudf::Labels)+0xe>
 80132fc:	e7f7      	b.n	80132ee <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x22>
	...

08013300 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 8013300:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013302:	88c5      	ldrh	r5, [r0, #6]
 8013304:	8886      	ldrh	r6, [r0, #4]
 8013306:	42b5      	cmp	r5, r6
 8013308:	d216      	bcs.n	8013338 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 801330a:	4604      	mov	r4, r0
 801330c:	6800      	ldr	r0, [r0, #0]
 801330e:	4428      	add	r0, r5
 8013310:	1b75      	subs	r5, r6, r5
 8013312:	7a26      	ldrb	r6, [r4, #8]
 8013314:	b923      	cbnz	r3, 8013320 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 8013316:	b926      	cbnz	r6, 8013322 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 8013318:	9200      	str	r2, [sp, #0]
 801331a:	460b      	mov	r3, r1
 801331c:	4a09      	ldr	r2, [pc, #36]	; (8013344 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 801331e:	e003      	b.n	8013328 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8013320:	b166      	cbz	r6, 801333c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 8013322:	460b      	mov	r3, r1
 8013324:	9200      	str	r2, [sp, #0]
 8013326:	4a08      	ldr	r2, [pc, #32]	; (8013348 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 8013328:	4629      	mov	r1, r5
 801332a:	f7f6 f9c7 	bl	80096bc <snprintf>
 801332e:	4285      	cmp	r5, r0
 8013330:	bfa2      	ittt	ge
 8013332:	88e3      	ldrhge	r3, [r4, #6]
 8013334:	181b      	addge	r3, r3, r0
 8013336:	80e3      	strhge	r3, [r4, #6]
 8013338:	b002      	add	sp, #8
 801333a:	bd70      	pop	{r4, r5, r6, pc}
 801333c:	9200      	str	r2, [sp, #0]
 801333e:	460b      	mov	r3, r1
 8013340:	4a02      	ldr	r2, [pc, #8]	; (801334c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 8013342:	e7f1      	b.n	8013328 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8013344:	08016d5d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, sl, fp, sp, lr}
 8013348:	08016d54 	stmdaeq	r1, {r2, r4, r6, r8, sl, fp, sp, lr}
 801334c:	08016d5e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}

08013350 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>:
 8013350:	b510      	push	{r4, lr}
 8013352:	2220      	movs	r2, #32
 8013354:	4604      	mov	r4, r0
 8013356:	f840 1b04 	str.w	r1, [r0], #4
 801335a:	2100      	movs	r1, #0
 801335c:	f001 fad8 	bl	8014910 <memset>
 8013360:	f647 7305 	movw	r3, #32517	; 0x7f05
 8013364:	4620      	mov	r0, r4
 8013366:	84a3      	strh	r3, [r4, #36]	; 0x24
 8013368:	bd10      	pop	{r4, pc}

0801336a <DisplayUdfParams::Load()>:
 801336a:	b508      	push	{r3, lr}
 801336c:	2300      	movs	r3, #0
 801336e:	4601      	mov	r1, r0
 8013370:	6043      	str	r3, [r0, #4]
 8013372:	6800      	ldr	r0, [r0, #0]
 8013374:	b120      	cbz	r0, 8013380 <DisplayUdfParams::Load()+0x16>
 8013376:	6803      	ldr	r3, [r0, #0]
 8013378:	3104      	adds	r1, #4
 801337a:	68db      	ldr	r3, [r3, #12]
 801337c:	4798      	blx	r3
 801337e:	2001      	movs	r0, #1
 8013380:	bd08      	pop	{r3, pc}
	...

08013384 <DisplayUdfParams::Load(char const*, unsigned int)>:
 8013384:	6803      	ldr	r3, [r0, #0]
 8013386:	b1d3      	cbz	r3, 80133be <DisplayUdfParams::Load(char const*, unsigned int)+0x3a>
 8013388:	2300      	movs	r3, #0
 801338a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801338c:	460d      	mov	r5, r1
 801338e:	4616      	mov	r6, r2
 8013390:	4604      	mov	r4, r0
 8013392:	6043      	str	r3, [r0, #4]
 8013394:	4602      	mov	r2, r0
 8013396:	490a      	ldr	r1, [pc, #40]	; (80133c0 <DisplayUdfParams::Load(char const*, unsigned int)+0x3c>)
 8013398:	4668      	mov	r0, sp
 801339a:	f000 fbff 	bl	8013b9c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 801339e:	4632      	mov	r2, r6
 80133a0:	4629      	mov	r1, r5
 80133a2:	4668      	mov	r0, sp
 80133a4:	f000 fbfe 	bl	8013ba4 <ReadConfigFile::Read(char const*, unsigned int)>
 80133a8:	4621      	mov	r1, r4
 80133aa:	f851 0b04 	ldr.w	r0, [r1], #4
 80133ae:	6803      	ldr	r3, [r0, #0]
 80133b0:	689b      	ldr	r3, [r3, #8]
 80133b2:	4798      	blx	r3
 80133b4:	4668      	mov	r0, sp
 80133b6:	f000 fbf4 	bl	8013ba2 <ReadConfigFile::~ReadConfigFile()>
 80133ba:	b002      	add	sp, #8
 80133bc:	bd70      	pop	{r4, r5, r6, pc}
 80133be:	4770      	bx	lr
 80133c0:	08013489 	stmdaeq	r1, {r0, r3, r7, sl, ip, sp}

080133c4 <DisplayUdfParams::callbackFunction(char const*)>:
 80133c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80133c6:	460e      	mov	r6, r1
 80133c8:	4604      	mov	r4, r0
 80133ca:	492b      	ldr	r1, [pc, #172]	; (8013478 <DisplayUdfParams::callbackFunction(char const*)+0xb4>)
 80133cc:	4630      	mov	r0, r6
 80133ce:	f10d 0207 	add.w	r2, sp, #7
 80133d2:	f000 fd49 	bl	8013e68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80133d6:	b968      	cbnz	r0, 80133f4 <DisplayUdfParams::callbackFunction(char const*)+0x30>
 80133d8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80133dc:	6863      	ldr	r3, [r4, #4]
 80133de:	2a7f      	cmp	r2, #127	; 0x7f
 80133e0:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 80133e4:	bf14      	ite	ne
 80133e6:	f043 5300 	orrne.w	r3, r3, #536870912	; 0x20000000
 80133ea:	f023 5300 	biceq.w	r3, r3, #536870912	; 0x20000000
 80133ee:	6063      	str	r3, [r4, #4]
 80133f0:	b003      	add	sp, #12
 80133f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133f4:	4630      	mov	r0, r6
 80133f6:	4921      	ldr	r1, [pc, #132]	; (801347c <DisplayUdfParams::callbackFunction(char const*)+0xb8>)
 80133f8:	f10d 0207 	add.w	r2, sp, #7
 80133fc:	f000 fd34 	bl	8013e68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8013400:	b958      	cbnz	r0, 801341a <DisplayUdfParams::callbackFunction(char const*)+0x56>
 8013402:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013406:	6863      	ldr	r3, [r4, #4]
 8013408:	2a05      	cmp	r2, #5
 801340a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 801340e:	bf14      	ite	ne
 8013410:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8013414:	f023 5380 	biceq.w	r3, r3, #268435456	; 0x10000000
 8013418:	e7e9      	b.n	80133ee <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 801341a:	4630      	mov	r0, r6
 801341c:	4918      	ldr	r1, [pc, #96]	; (8013480 <DisplayUdfParams::callbackFunction(char const*)+0xbc>)
 801341e:	f10d 0207 	add.w	r2, sp, #7
 8013422:	f000 fd21 	bl	8013e68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8013426:	b948      	cbnz	r0, 801343c <DisplayUdfParams::callbackFunction(char const*)+0x78>
 8013428:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801342c:	6863      	ldr	r3, [r4, #4]
 801342e:	b112      	cbz	r2, 8013436 <DisplayUdfParams::callbackFunction(char const*)+0x72>
 8013430:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013434:	e7db      	b.n	80133ee <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8013436:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801343a:	e7d8      	b.n	80133ee <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 801343c:	2500      	movs	r5, #0
 801343e:	4f11      	ldr	r7, [pc, #68]	; (8013484 <DisplayUdfParams::callbackFunction(char const*)+0xc0>)
 8013440:	4630      	mov	r0, r6
 8013442:	f857 1b04 	ldr.w	r1, [r7], #4
 8013446:	f10d 0207 	add.w	r2, sp, #7
 801344a:	f000 fd0d 	bl	8013e68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 801344e:	b978      	cbnz	r0, 8013470 <DisplayUdfParams::callbackFunction(char const*)+0xac>
 8013450:	2301      	movs	r3, #1
 8013452:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8013456:	6862      	ldr	r2, [r4, #4]
 8013458:	1e4e      	subs	r6, r1, #1
 801345a:	2e05      	cmp	r6, #5
 801345c:	fa03 f305 	lsl.w	r3, r3, r5
 8013460:	4425      	add	r5, r4
 8013462:	bf99      	ittee	ls
 8013464:	7229      	strbls	r1, [r5, #8]
 8013466:	4313      	orrls	r3, r2
 8013468:	7228      	strbhi	r0, [r5, #8]
 801346a:	ea22 0303 	bichi.w	r3, r2, r3
 801346e:	e7be      	b.n	80133ee <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8013470:	3501      	adds	r5, #1
 8013472:	2d14      	cmp	r5, #20
 8013474:	d1e4      	bne.n	8013440 <DisplayUdfParams::callbackFunction(char const*)+0x7c>
 8013476:	e7bb      	b.n	80133f0 <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 8013478:	080187ca 	stmdaeq	r1, {r1, r3, r6, r7, r8, r9, sl, pc}
 801347c:	08018792 	stmdaeq	r1, {r1, r4, r7, r8, r9, sl, pc}
 8013480:	080187a0 	stmdaeq	r1, {r5, r7, r8, r9, sl, pc}
 8013484:	0801871c 	stmdaeq	r1, {r2, r3, r4, r8, r9, sl, pc}

08013488 <DisplayUdfParams::staticCallbackFunction(void*, char const*)>:
 8013488:	f7ff bf9c 	b.w	80133c4 <DisplayUdfParams::callbackFunction(char const*)>

0801348c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>:
 801348c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013490:	4604      	mov	r4, r0
 8013492:	4615      	mov	r5, r2
 8013494:	461e      	mov	r6, r3
 8013496:	b086      	sub	sp, #24
 8013498:	3004      	adds	r0, #4
 801349a:	b379      	cbz	r1, 80134fc <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x70>
 801349c:	2222      	movs	r2, #34	; 0x22
 801349e:	f001 fa20 	bl	80148e2 <memmove>
 80134a2:	462a      	mov	r2, r5
 80134a4:	4633      	mov	r3, r6
 80134a6:	493d      	ldr	r1, [pc, #244]	; (801359c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x110>)
 80134a8:	a803      	add	r0, sp, #12
 80134aa:	f000 faa7 	bl	80139fc <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 80134ae:	6863      	ldr	r3, [r4, #4]
 80134b0:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 80134b4:	493a      	ldr	r1, [pc, #232]	; (80135a0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x114>)
 80134b6:	f3c3 7340 	ubfx	r3, r3, #29, #1
 80134ba:	a803      	add	r0, sp, #12
 80134bc:	f7ff ff20 	bl	8013300 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 80134c0:	6863      	ldr	r3, [r4, #4]
 80134c2:	4938      	ldr	r1, [pc, #224]	; (80135a4 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x118>)
 80134c4:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80134c8:	f3c3 7300 	ubfx	r3, r3, #28, #1
 80134cc:	a803      	add	r0, sp, #12
 80134ce:	f7ff ff17 	bl	8013300 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 80134d2:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 80134d6:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80134da:	42a9      	cmp	r1, r5
 80134dc:	d227      	bcs.n	801352e <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xa2>
 80134de:	6863      	ldr	r3, [r4, #4]
 80134e0:	9803      	ldr	r0, [sp, #12]
 80134e2:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
 80134e6:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80134ea:	4408      	add	r0, r1
 80134ec:	eba5 0501 	sub.w	r5, r5, r1
 80134f0:	d10b      	bne.n	801350a <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x7e>
 80134f2:	b962      	cbnz	r2, 801350e <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x82>
 80134f4:	9200      	str	r2, [sp, #0]
 80134f6:	4b2c      	ldr	r3, [pc, #176]	; (80135a8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 80134f8:	4a2c      	ldr	r2, [pc, #176]	; (80135ac <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x120>)
 80134fa:	e00e      	b.n	801351a <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 80134fc:	6823      	ldr	r3, [r4, #0]
 80134fe:	4601      	mov	r1, r0
 8013500:	681a      	ldr	r2, [r3, #0]
 8013502:	4618      	mov	r0, r3
 8013504:	68d2      	ldr	r2, [r2, #12]
 8013506:	4790      	blx	r2
 8013508:	e7cb      	b.n	80134a2 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x16>
 801350a:	2a00      	cmp	r2, #0
 801350c:	d041      	beq.n	8013592 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x106>
 801350e:	3b00      	subs	r3, #0
 8013510:	bf18      	it	ne
 8013512:	2301      	movne	r3, #1
 8013514:	4a26      	ldr	r2, [pc, #152]	; (80135b0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x124>)
 8013516:	9300      	str	r3, [sp, #0]
 8013518:	4b23      	ldr	r3, [pc, #140]	; (80135a8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 801351a:	4629      	mov	r1, r5
 801351c:	f7f6 f8ce 	bl	80096bc <snprintf>
 8013520:	4285      	cmp	r5, r0
 8013522:	bfa2      	ittt	ge
 8013524:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8013528:	181b      	addge	r3, r3, r0
 801352a:	f8ad 3012 	strhge.w	r3, [sp, #18]
 801352e:	2500      	movs	r5, #0
 8013530:	2701      	movs	r7, #1
 8013532:	4e20      	ldr	r6, [pc, #128]	; (80135b4 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x128>)
 8013534:	f104 0808 	add.w	r8, r4, #8
 8013538:	f856 1b04 	ldr.w	r1, [r6], #4
 801353c:	780b      	ldrb	r3, [r1, #0]
 801353e:	b15b      	cbz	r3, 8013558 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xcc>
 8013540:	6862      	ldr	r2, [r4, #4]
 8013542:	fa07 f305 	lsl.w	r3, r7, r5
 8013546:	4393      	bics	r3, r2
 8013548:	bf0c      	ite	eq
 801354a:	2301      	moveq	r3, #1
 801354c:	2300      	movne	r3, #0
 801354e:	f818 2005 	ldrb.w	r2, [r8, r5]
 8013552:	a803      	add	r0, sp, #12
 8013554:	f7ff fed4 	bl	8013300 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8013558:	3501      	adds	r5, #1
 801355a:	2d14      	cmp	r5, #20
 801355c:	d1ec      	bne.n	8013538 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xac>
 801355e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8013562:	b17b      	cbz	r3, 8013584 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xf8>
 8013564:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8013568:	9b03      	ldr	r3, [sp, #12]
 801356a:	4413      	add	r3, r2
 801356c:	227d      	movs	r2, #125	; 0x7d
 801356e:	f803 2c01 	strb.w	r2, [r3, #-1]
 8013572:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8013576:	9903      	ldr	r1, [sp, #12]
 8013578:	54ca      	strb	r2, [r1, r3]
 801357a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801357e:	3301      	adds	r3, #1
 8013580:	f8ad 3012 	strh.w	r3, [sp, #18]
 8013584:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8013588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801358a:	601a      	str	r2, [r3, #0]
 801358c:	b006      	add	sp, #24
 801358e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013592:	2301      	movs	r3, #1
 8013594:	4a08      	ldr	r2, [pc, #32]	; (80135b8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x12c>)
 8013596:	9300      	str	r3, [sp, #0]
 8013598:	4b03      	ldr	r3, [pc, #12]	; (80135a8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 801359a:	e7be      	b.n	801351a <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 801359c:	080187be 	stmdaeq	r1, {r1, r2, r3, r4, r5, r7, r8, r9, sl, pc}
 80135a0:	080187ca 	stmdaeq	r1, {r1, r3, r6, r7, r8, r9, sl, pc}
 80135a4:	08018792 	stmdaeq	r1, {r1, r4, r7, r8, r9, sl, pc}
 80135a8:	080187a0 	stmdaeq	r1, {r5, r7, r8, r9, sl, pc}
 80135ac:	08016d5d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, sl, fp, sp, lr}
 80135b0:	08016d54 	stmdaeq	r1, {r2, r4, r6, r8, sl, fp, sp, lr}
 80135b4:	0801871c 	stmdaeq	r1, {r2, r3, r4, r8, r9, sl, pc}
 80135b8:	08016d5e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}

080135bc <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>:
 80135bc:	b513      	push	{r0, r1, r4, lr}
 80135be:	6804      	ldr	r4, [r0, #0]
 80135c0:	b914      	cbnz	r4, 80135c8 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0xc>
 80135c2:	601c      	str	r4, [r3, #0]
 80135c4:	b002      	add	sp, #8
 80135c6:	bd10      	pop	{r4, pc}
 80135c8:	9300      	str	r3, [sp, #0]
 80135ca:	4613      	mov	r3, r2
 80135cc:	460a      	mov	r2, r1
 80135ce:	2100      	movs	r1, #0
 80135d0:	f7ff ff5c 	bl	801348c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>
 80135d4:	e7f6      	b.n	80135c4 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0x8>

080135d6 <DisplayUdfParams::Set(DisplayUdf*)>:
 80135d6:	6843      	ldr	r3, [r0, #4]
 80135d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135dc:	009a      	lsls	r2, r3, #2
 80135de:	4604      	mov	r4, r0
 80135e0:	460e      	mov	r6, r1
 80135e2:	d506      	bpl.n	80135f2 <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 80135e4:	6988      	ldr	r0, [r1, #24]
 80135e6:	b120      	cbz	r0, 80135f2 <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 80135e8:	6803      	ldr	r3, [r0, #0]
 80135ea:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 80135ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135f0:	4798      	blx	r3
 80135f2:	6863      	ldr	r3, [r4, #4]
 80135f4:	69b0      	ldr	r0, [r6, #24]
 80135f6:	00db      	lsls	r3, r3, #3
 80135f8:	bf41      	itttt	mi
 80135fa:	f64e 2260 	movwmi	r2, #60000	; 0xea60
 80135fe:	f894 3024 	ldrbmi.w	r3, [r4, #36]	; 0x24
 8013602:	4353      	mulmi	r3, r2
 8013604:	6173      	strmi	r3, [r6, #20]
 8013606:	6861      	ldr	r1, [r4, #4]
 8013608:	f3c1 7180 	ubfx	r1, r1, #30, #1
 801360c:	b110      	cbz	r0, 8013614 <DisplayUdfParams::Set(DisplayUdf*)+0x3e>
 801360e:	6803      	ldr	r3, [r0, #0]
 8013610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013612:	4798      	blx	r3
 8013614:	2500      	movs	r5, #0
 8013616:	2701      	movs	r7, #1
 8013618:	f104 0808 	add.w	r8, r4, #8
 801361c:	6862      	ldr	r2, [r4, #4]
 801361e:	fa07 f305 	lsl.w	r3, r7, r5
 8013622:	4393      	bics	r3, r2
 8013624:	d105      	bne.n	8013632 <DisplayUdfParams::Set(DisplayUdf*)+0x5c>
 8013626:	462a      	mov	r2, r5
 8013628:	4630      	mov	r0, r6
 801362a:	f818 1005 	ldrb.w	r1, [r8, r5]
 801362e:	f7ff fe4d 	bl	80132cc <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8013632:	3501      	adds	r5, #1
 8013634:	2d14      	cmp	r5, #20
 8013636:	d1f1      	bne.n	801361c <DisplayUdfParams::Set(DisplayUdf*)+0x46>
 8013638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801363c <DisplayUdfParams::Dump()>:
 801363c:	4770      	bx	lr

0801363e <DisplayUdf::ShowNodeName(ArtNetNode*)>:
 801363e:	b570      	push	{r4, r5, r6, lr}
 8013640:	4605      	mov	r5, r0
 8013642:	6980      	ldr	r0, [r0, #24]
 8013644:	460c      	mov	r4, r1
 8013646:	b120      	cbz	r0, 8013652 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x14>
 8013648:	6803      	ldr	r3, [r0, #0]
 801364a:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
 801364e:	691b      	ldr	r3, [r3, #16]
 8013650:	4798      	blx	r3
 8013652:	69a8      	ldr	r0, [r5, #24]
 8013654:	f104 0242 	add.w	r2, r4, #66	; 0x42
 8013658:	b190      	cbz	r0, 8013680 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x42>
 801365a:	2300      	movs	r3, #0
 801365c:	7906      	ldrb	r6, [r0, #4]
 801365e:	3441      	adds	r4, #65	; 0x41
 8013660:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8013664:	b119      	cbz	r1, 801366e <DisplayUdf::ShowNodeName(ArtNetNode*)+0x30>
 8013666:	1c59      	adds	r1, r3, #1
 8013668:	429e      	cmp	r6, r3
 801366a:	460b      	mov	r3, r1
 801366c:	dcf8      	bgt.n	8013660 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x22>
 801366e:	6801      	ldr	r1, [r0, #0]
 8013670:	b2db      	uxtb	r3, r3
 8013672:	69cc      	ldr	r4, [r1, #28]
 8013674:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
 8013678:	46a4      	mov	ip, r4
 801367a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801367e:	4760      	bx	ip
 8013680:	bd70      	pop	{r4, r5, r6, pc}
	...

08013684 <DisplayUdf::ShowUniverse(ArtNetNode*)>:
 8013684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013688:	460c      	mov	r4, r1
 801368a:	b08b      	sub	sp, #44	; 0x2c
 801368c:	4606      	mov	r6, r0
 801368e:	2301      	movs	r3, #1
 8013690:	2100      	movs	r1, #0
 8013692:	4620      	mov	r0, r4
 8013694:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 8013698:	f7f6 fc76 	bl	8009f88 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 801369c:	b350      	cbz	r0, 80136f4 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x70>
 801369e:	2100      	movs	r1, #0
 80136a0:	4620      	mov	r0, r4
 80136a2:	f896 9040 	ldrb.w	r9, [r6, #64]	; 0x40
 80136a6:	f7f6 fc89 	bl	8009fbc <ArtNetNode::GetNetSwitch(unsigned int) const>
 80136aa:	2100      	movs	r1, #0
 80136ac:	4605      	mov	r5, r0
 80136ae:	4620      	mov	r0, r4
 80136b0:	f7f6 fc80 	bl	8009fb4 <ArtNetNode::GetSubnetSwitch(unsigned int) const>
 80136b4:	2100      	movs	r1, #0
 80136b6:	4607      	mov	r7, r0
 80136b8:	4620      	mov	r0, r4
 80136ba:	f89d a027 	ldrb.w	sl, [sp, #39]	; 0x27
 80136be:	f7f6 fe07 	bl	800a2d0 <ArtNetNode::GetMergeMode(unsigned int) const>
 80136c2:	4a2d      	ldr	r2, [pc, #180]	; (8013778 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf4>)
 80136c4:	4b2d      	ldr	r3, [pc, #180]	; (801377c <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf8>)
 80136c6:	2100      	movs	r1, #0
 80136c8:	2800      	cmp	r0, #0
 80136ca:	bf0c      	ite	eq
 80136cc:	4690      	moveq	r8, r2
 80136ce:	4698      	movne	r8, r3
 80136d0:	4620      	mov	r0, r4
 80136d2:	f7f6 fdcc 	bl	800a26e <ArtNetNode::GetPortProtocol(unsigned int) const>
 80136d6:	4a2a      	ldr	r2, [pc, #168]	; (8013780 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xfc>)
 80136d8:	4b2a      	ldr	r3, [pc, #168]	; (8013784 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x100>)
 80136da:	4649      	mov	r1, r9
 80136dc:	2800      	cmp	r0, #0
 80136de:	bf18      	it	ne
 80136e0:	4613      	movne	r3, r2
 80136e2:	e9cd 7a00 	strd	r7, sl, [sp]
 80136e6:	e9cd 8302 	strd	r8, r3, [sp, #8]
 80136ea:	4630      	mov	r0, r6
 80136ec:	462b      	mov	r3, r5
 80136ee:	4a26      	ldr	r2, [pc, #152]	; (8013788 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x104>)
 80136f0:	f7f5 f98c 	bl	8008a0c <Display::Printf(unsigned char, char const*, ...)>
 80136f4:	2500      	movs	r5, #0
 80136f6:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8013784 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x100>
 80136fa:	4629      	mov	r1, r5
 80136fc:	2301      	movs	r3, #1
 80136fe:	4620      	mov	r0, r4
 8013700:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 8013704:	f7f6 fc40 	bl	8009f88 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 8013708:	46a9      	mov	r9, r5
 801370a:	3501      	adds	r5, #1
 801370c:	b378      	cbz	r0, 801376e <DisplayUdf::ShowUniverse(ArtNetNode*)+0xea>
 801370e:	f106 0343 	add.w	r3, r6, #67	; 0x43
 8013712:	2100      	movs	r1, #0
 8013714:	4620      	mov	r0, r4
 8013716:	f813 b005 	ldrb.w	fp, [r3, r5]
 801371a:	f7f6 fc4f 	bl	8009fbc <ArtNetNode::GetNetSwitch(unsigned int) const>
 801371e:	2100      	movs	r1, #0
 8013720:	4607      	mov	r7, r0
 8013722:	4620      	mov	r0, r4
 8013724:	f7f6 fc46 	bl	8009fb4 <ArtNetNode::GetSubnetSwitch(unsigned int) const>
 8013728:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 801372c:	4680      	mov	r8, r0
 801372e:	4649      	mov	r1, r9
 8013730:	4620      	mov	r0, r4
 8013732:	9307      	str	r3, [sp, #28]
 8013734:	f7f6 fdcc 	bl	800a2d0 <ArtNetNode::GetMergeMode(unsigned int) const>
 8013738:	4b10      	ldr	r3, [pc, #64]	; (801377c <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf8>)
 801373a:	4a0f      	ldr	r2, [pc, #60]	; (8013778 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf4>)
 801373c:	4649      	mov	r1, r9
 801373e:	2800      	cmp	r0, #0
 8013740:	bf18      	it	ne
 8013742:	461a      	movne	r2, r3
 8013744:	4620      	mov	r0, r4
 8013746:	9206      	str	r2, [sp, #24]
 8013748:	f7f6 fd91 	bl	800a26e <ArtNetNode::GetPortProtocol(unsigned int) const>
 801374c:	490c      	ldr	r1, [pc, #48]	; (8013780 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xfc>)
 801374e:	9a06      	ldr	r2, [sp, #24]
 8013750:	2800      	cmp	r0, #0
 8013752:	bf08      	it	eq
 8013754:	4651      	moveq	r1, sl
 8013756:	9b07      	ldr	r3, [sp, #28]
 8013758:	9104      	str	r1, [sp, #16]
 801375a:	e9cd 8301 	strd	r8, r3, [sp, #4]
 801375e:	9203      	str	r2, [sp, #12]
 8013760:	462b      	mov	r3, r5
 8013762:	4659      	mov	r1, fp
 8013764:	4630      	mov	r0, r6
 8013766:	4a09      	ldr	r2, [pc, #36]	; (801378c <DisplayUdf::ShowUniverse(ArtNetNode*)+0x108>)
 8013768:	9700      	str	r7, [sp, #0]
 801376a:	f7f5 f94f 	bl	8008a0c <Display::Printf(unsigned char, char const*, ...)>
 801376e:	2d04      	cmp	r5, #4
 8013770:	d1c3      	bne.n	80136fa <DisplayUdf::ShowUniverse(ArtNetNode*)+0x76>
 8013772:	b00b      	add	sp, #44	; 0x2c
 8013774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013778:	08016c85 	stmdaeq	r1, {r0, r2, r7, sl, fp, sp, lr}
 801377c:	08016c89 	stmdaeq	r1, {r0, r3, r7, sl, fp, sp, lr}
 8013780:	08016c95 	stmdaeq	r1, {r0, r2, r4, r7, sl, fp, sp, lr}
 8013784:	080187d4 	stmdaeq	r1, {r2, r4, r6, r7, r8, r9, sl, pc}
 8013788:	080187d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r8, r9, sl, pc}
 801378c:	080187ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r8, r9, sl, pc}

08013790 <DisplayUdf::ShowDestinationIp(ArtNetNode*)>:
 8013790:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013794:	4606      	mov	r6, r0
 8013796:	2541      	movs	r5, #65	; 0x41
 8013798:	f8df 903c 	ldr.w	r9, [pc, #60]	; 80137d8 <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x48>
 801379c:	b085      	sub	sp, #20
 801379e:	f100 084a 	add.w	r8, r0, #74	; 0x4a
 80137a2:	f501 775b 	add.w	r7, r1, #876	; 0x36c
 80137a6:	012b      	lsls	r3, r5, #4
 80137a8:	58fc      	ldr	r4, [r7, r3]
 80137aa:	464a      	mov	r2, r9
 80137ac:	0e23      	lsrs	r3, r4, #24
 80137ae:	9303      	str	r3, [sp, #12]
 80137b0:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80137b4:	9302      	str	r3, [sp, #8]
 80137b6:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80137ba:	b2e4      	uxtb	r4, r4
 80137bc:	9301      	str	r3, [sp, #4]
 80137be:	9400      	str	r4, [sp, #0]
 80137c0:	462b      	mov	r3, r5
 80137c2:	4630      	mov	r0, r6
 80137c4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80137c8:	3501      	adds	r5, #1
 80137ca:	f7f5 f91f 	bl	8008a0c <Display::Printf(unsigned char, char const*, ...)>
 80137ce:	2d45      	cmp	r5, #69	; 0x45
 80137d0:	d1e9      	bne.n	80137a6 <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x16>
 80137d2:	b005      	add	sp, #20
 80137d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80137d8:	08018803 	stmdaeq	r1, {r0, r1, fp, pc}

080137dc <DisplayUdf::Show(ArtNetNode*)>:
 80137dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80137de:	4604      	mov	r4, r0
 80137e0:	460d      	mov	r5, r1
 80137e2:	f7ff fcc7 	bl	8013174 <DisplayUdf::Show()>
 80137e6:	4629      	mov	r1, r5
 80137e8:	4620      	mov	r0, r4
 80137ea:	f7ff ff28 	bl	801363e <DisplayUdf::ShowNodeName(ArtNetNode*)>
 80137ee:	4629      	mov	r1, r5
 80137f0:	4620      	mov	r0, r4
 80137f2:	f7ff ff47 	bl	8013684 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 80137f6:	4629      	mov	r1, r5
 80137f8:	4620      	mov	r0, r4
 80137fa:	f7ff ffc9 	bl	8013790 <DisplayUdf::ShowDestinationIp(ArtNetNode*)>
 80137fe:	f895 26de 	ldrb.w	r2, [r5, #1758]	; 0x6de
 8013802:	f895 36df 	ldrb.w	r3, [r5, #1759]	; 0x6df
 8013806:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 801380a:	4413      	add	r3, r2
 801380c:	4620      	mov	r0, r4
 801380e:	4a0d      	ldr	r2, [pc, #52]	; (8013844 <DisplayUdf::Show(ArtNetNode*)+0x68>)
 8013810:	f7f5 f8fc 	bl	8008a0c <Display::Printf(unsigned char, char const*, ...)>
 8013814:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8013816:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
 801381a:	2a02      	cmp	r2, #2
 801381c:	d001      	beq.n	8013822 <DisplayUdf::Show(ArtNetNode*)+0x46>
 801381e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8013820:	b92b      	cbnz	r3, 801382e <DisplayUdf::Show(ArtNetNode*)+0x52>
 8013822:	4620      	mov	r0, r4
 8013824:	4a08      	ldr	r2, [pc, #32]	; (8013848 <DisplayUdf::Show(ArtNetNode*)+0x6c>)
 8013826:	f7f5 f8f1 	bl	8008a0c <Display::Printf(unsigned char, char const*, ...)>
 801382a:	b003      	add	sp, #12
 801382c:	bd30      	pop	{r4, r5, pc}
 801382e:	4807      	ldr	r0, [pc, #28]	; (801384c <DisplayUdf::Show(ArtNetNode*)+0x70>)
 8013830:	9300      	str	r3, [sp, #0]
 8013832:	4b07      	ldr	r3, [pc, #28]	; (8013850 <DisplayUdf::Show(ArtNetNode*)+0x74>)
 8013834:	2a00      	cmp	r2, #0
 8013836:	bf08      	it	eq
 8013838:	4603      	moveq	r3, r0
 801383a:	4620      	mov	r0, r4
 801383c:	4a05      	ldr	r2, [pc, #20]	; (8013854 <DisplayUdf::Show(ArtNetNode*)+0x78>)
 801383e:	f7f5 f8e5 	bl	8008a0c <Display::Printf(unsigned char, char const*, ...)>
 8013842:	e7f2      	b.n	801382a <DisplayUdf::Show(ArtNetNode*)+0x4e>
 8013844:	08018813 	stmdaeq	r1, {r0, r1, r4, fp, pc}
 8013848:	0801881a 	stmdaeq	r1, {r1, r3, r4, fp, pc}
 801384c:	08016dca 	stmdaeq	r1, {r1, r3, r6, r7, r8, sl, fp, sp, lr}
 8013850:	08016dbf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, r8, sl, fp, sp, lr}
 8013854:	08018821 	stmdaeq	r1, {r0, r5, fp, pc}

08013858 <NetworkDisplay::ShowEmacStart()>:
 8013858:	4b01      	ldr	r3, [pc, #4]	; (8013860 <NetworkDisplay::ShowEmacStart()+0x8>)
 801385a:	6818      	ldr	r0, [r3, #0]
 801385c:	f7ff bbf4 	b.w	8013048 <DisplayUdf::ShowEmacStart()>
 8013860:	2000a8cc 	andcs	sl, r0, ip, asr #17

08013864 <NetworkDisplay::ShowIp()>:
 8013864:	4b01      	ldr	r3, [pc, #4]	; (801386c <NetworkDisplay::ShowIp()+0x8>)
 8013866:	6818      	ldr	r0, [r3, #0]
 8013868:	f7ff bbfe 	b.w	8013068 <DisplayUdf::ShowIpAddress()>
 801386c:	2000a8cc 	andcs	sl, r0, ip, asr #17

08013870 <NetworkDisplay::ShowNetMask()>:
 8013870:	4b01      	ldr	r3, [pc, #4]	; (8013878 <NetworkDisplay::ShowNetMask()+0x8>)
 8013872:	6818      	ldr	r0, [r3, #0]
 8013874:	f7ff bc2c 	b.w	80130d0 <DisplayUdf::ShowNetmask()>
 8013878:	2000a8cc 	andcs	sl, r0, ip, asr #17

0801387c <NetworkDisplay::ShowGatewayIp()>:
 801387c:	4b01      	ldr	r3, [pc, #4]	; (8013884 <NetworkDisplay::ShowGatewayIp()+0x8>)
 801387e:	6818      	ldr	r0, [r3, #0]
 8013880:	f7ff bc44 	b.w	801310c <DisplayUdf::ShowGatewayIp()>
 8013884:	2000a8cc 	andcs	sl, r0, ip, asr #17

08013888 <NetworkDisplay::ShowShutdown()>:
 8013888:	4b01      	ldr	r3, [pc, #4]	; (8013890 <NetworkDisplay::ShowShutdown()+0x8>)
 801388a:	6818      	ldr	r0, [r3, #0]
 801388c:	f7ff bcee 	b.w	801326c <DisplayUdf::ShowShutdown()>
 8013890:	2000a8cc 	andcs	sl, r0, ip, asr #17

08013894 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 8013894:	4b01      	ldr	r3, [pc, #4]	; (801389c <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)+0x8>)
 8013896:	6818      	ldr	r0, [r3, #0]
 8013898:	f7ff bcb0 	b.w	80131fc <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>
 801389c:	2000a8cc 	andcs	sl, r0, ip, asr #17

080138a0 <properties::convert_json_file(char*, unsigned short, bool)>:
 80138a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138a4:	7803      	ldrb	r3, [r0, #0]
 80138a6:	2b7b      	cmp	r3, #123	; 0x7b
 80138a8:	d170      	bne.n	801398c <properties::convert_json_file(char*, unsigned short, bool)+0xec>
 80138aa:	b322      	cbz	r2, 80138f6 <properties::convert_json_file(char*, unsigned short, bool)+0x56>
 80138ac:	2301      	movs	r3, #1
 80138ae:	4606      	mov	r6, r0
 80138b0:	461c      	mov	r4, r3
 80138b2:	2a00      	cmp	r2, #0
 80138b4:	bf0c      	ite	eq
 80138b6:	f04f 0c0a 	moveq.w	ip, #10
 80138ba:	f04f 0c00 	movne.w	ip, #0
 80138be:	273d      	movs	r7, #61	; 0x3d
 80138c0:	4299      	cmp	r1, r3
 80138c2:	d960      	bls.n	8013986 <properties::convert_json_file(char*, unsigned short, bool)+0xe6>
 80138c4:	4299      	cmp	r1, r3
 80138c6:	4602      	mov	r2, r0
 80138c8:	f890 e000 	ldrb.w	lr, [r0]
 80138cc:	f103 0301 	add.w	r3, r3, #1
 80138d0:	f100 0001 	add.w	r0, r0, #1
 80138d4:	d846      	bhi.n	8013964 <properties::convert_json_file(char*, unsigned short, bool)+0xc4>
 80138d6:	1aa0      	subs	r0, r4, r2
 80138d8:	4615      	mov	r5, r2
 80138da:	1884      	adds	r4, r0, r2
 80138dc:	f812 8b01 	ldrb.w	r8, [r2], #1
 80138e0:	f103 0e01 	add.w	lr, r3, #1
 80138e4:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
 80138e8:	d053      	beq.n	8013992 <properties::convert_json_file(char*, unsigned short, bool)+0xf2>
 80138ea:	4299      	cmp	r1, r3
 80138ec:	d957      	bls.n	801399e <properties::convert_json_file(char*, unsigned short, bool)+0xfe>
 80138ee:	4673      	mov	r3, lr
 80138f0:	f806 8b01 	strb.w	r8, [r6], #1
 80138f4:	e7f0      	b.n	80138d8 <properties::convert_json_file(char*, unsigned short, bool)+0x38>
 80138f6:	2323      	movs	r3, #35	; 0x23
 80138f8:	f800 3b01 	strb.w	r3, [r0], #1
 80138fc:	4605      	mov	r5, r0
 80138fe:	2301      	movs	r3, #1
 8013900:	4299      	cmp	r1, r3
 8013902:	d92d      	bls.n	8013960 <properties::convert_json_file(char*, unsigned short, bool)+0xc0>
 8013904:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013908:	2c22      	cmp	r4, #34	; 0x22
 801390a:	d001      	beq.n	8013910 <properties::convert_json_file(char*, unsigned short, bool)+0x70>
 801390c:	3301      	adds	r3, #1
 801390e:	e7f7      	b.n	8013900 <properties::convert_json_file(char*, unsigned short, bool)+0x60>
 8013910:	46ac      	mov	ip, r5
 8013912:	4606      	mov	r6, r0
 8013914:	2701      	movs	r7, #1
 8013916:	f89c e000 	ldrb.w	lr, [ip]
 801391a:	4665      	mov	r5, ip
 801391c:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8013920:	4630      	mov	r0, r6
 8013922:	463c      	mov	r4, r7
 8013924:	f10c 0c01 	add.w	ip, ip, #1
 8013928:	f106 0601 	add.w	r6, r6, #1
 801392c:	f107 0701 	add.w	r7, r7, #1
 8013930:	d007      	beq.n	8013942 <properties::convert_json_file(char*, unsigned short, bool)+0xa2>
 8013932:	3301      	adds	r3, #1
 8013934:	4299      	cmp	r1, r3
 8013936:	4665      	mov	r5, ip
 8013938:	f806 ec01 	strb.w	lr, [r6, #-1]
 801393c:	d8eb      	bhi.n	8013916 <properties::convert_json_file(char*, unsigned short, bool)+0x76>
 801393e:	463c      	mov	r4, r7
 8013940:	4630      	mov	r0, r6
 8013942:	4606      	mov	r6, r0
 8013944:	200a      	movs	r0, #10
 8013946:	3401      	adds	r4, #1
 8013948:	f806 0b01 	strb.w	r0, [r6], #1
 801394c:	4628      	mov	r0, r5
 801394e:	f815 7b01 	ldrb.w	r7, [r5], #1
 8013952:	2f7b      	cmp	r7, #123	; 0x7b
 8013954:	d0ad      	beq.n	80138b2 <properties::convert_json_file(char*, unsigned short, bool)+0x12>
 8013956:	1c5f      	adds	r7, r3, #1
 8013958:	4299      	cmp	r1, r3
 801395a:	463b      	mov	r3, r7
 801395c:	d8f6      	bhi.n	801394c <properties::convert_json_file(char*, unsigned short, bool)+0xac>
 801395e:	e7a8      	b.n	80138b2 <properties::convert_json_file(char*, unsigned short, bool)+0x12>
 8013960:	2401      	movs	r4, #1
 8013962:	e7ee      	b.n	8013942 <properties::convert_json_file(char*, unsigned short, bool)+0xa2>
 8013964:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8013968:	d1ac      	bne.n	80138c4 <properties::convert_json_file(char*, unsigned short, bool)+0x24>
 801396a:	4602      	mov	r2, r0
 801396c:	e7b3      	b.n	80138d6 <properties::convert_json_file(char*, unsigned short, bool)+0x36>
 801396e:	283a      	cmp	r0, #58	; 0x3a
 8013970:	d115      	bne.n	801399e <properties::convert_json_file(char*, unsigned short, bool)+0xfe>
 8013972:	462b      	mov	r3, r5
 8013974:	e01b      	b.n	80139ae <properties::convert_json_file(char*, unsigned short, bool)+0x10e>
 8013976:	4686      	mov	lr, r0
 8013978:	e027      	b.n	80139ca <properties::convert_json_file(char*, unsigned short, bool)+0x12a>
 801397a:	4673      	mov	r3, lr
 801397c:	f806 cb01 	strb.w	ip, [r6], #1
 8013980:	3401      	adds	r4, #1
 8013982:	3301      	adds	r3, #1
 8013984:	e79c      	b.n	80138c0 <properties::convert_json_file(char*, unsigned short, bool)+0x20>
 8013986:	4620      	mov	r0, r4
 8013988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801398c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013990:	e7fa      	b.n	8013988 <properties::convert_json_file(char*, unsigned short, bool)+0xe8>
 8013992:	4630      	mov	r0, r6
 8013994:	f800 7b01 	strb.w	r7, [r0], #1
 8013998:	469e      	mov	lr, r3
 801399a:	4606      	mov	r6, r0
 801399c:	3401      	adds	r4, #1
 801399e:	4571      	cmp	r1, lr
 80139a0:	462b      	mov	r3, r5
 80139a2:	7828      	ldrb	r0, [r5, #0]
 80139a4:	f10e 0e01 	add.w	lr, lr, #1
 80139a8:	f105 0501 	add.w	r5, r5, #1
 80139ac:	d8df      	bhi.n	801396e <properties::convert_json_file(char*, unsigned short, bool)+0xce>
 80139ae:	781d      	ldrb	r5, [r3, #0]
 80139b0:	461a      	mov	r2, r3
 80139b2:	2d2f      	cmp	r5, #47	; 0x2f
 80139b4:	4670      	mov	r0, lr
 80139b6:	f103 0301 	add.w	r3, r3, #1
 80139ba:	f10e 0e01 	add.w	lr, lr, #1
 80139be:	d8da      	bhi.n	8013976 <properties::convert_json_file(char*, unsigned short, bool)+0xd6>
 80139c0:	4281      	cmp	r1, r0
 80139c2:	d8f4      	bhi.n	80139ae <properties::convert_json_file(char*, unsigned short, bool)+0x10e>
 80139c4:	2d22      	cmp	r5, #34	; 0x22
 80139c6:	bf08      	it	eq
 80139c8:	461a      	moveq	r2, r3
 80139ca:	4610      	mov	r0, r2
 80139cc:	f810 5b01 	ldrb.w	r5, [r0], #1
 80139d0:	f10e 0301 	add.w	r3, lr, #1
 80139d4:	2d22      	cmp	r5, #34	; 0x22
 80139d6:	d0d0      	beq.n	801397a <properties::convert_json_file(char*, unsigned short, bool)+0xda>
 80139d8:	2d2c      	cmp	r5, #44	; 0x2c
 80139da:	d0ce      	beq.n	801397a <properties::convert_json_file(char*, unsigned short, bool)+0xda>
 80139dc:	2d7d      	cmp	r5, #125	; 0x7d
 80139de:	d0cc      	beq.n	801397a <properties::convert_json_file(char*, unsigned short, bool)+0xda>
 80139e0:	4571      	cmp	r1, lr
 80139e2:	d9ce      	bls.n	8013982 <properties::convert_json_file(char*, unsigned short, bool)+0xe2>
 80139e4:	f1a5 0e20 	sub.w	lr, r5, #32
 80139e8:	f1be 0f5a 	cmp.w	lr, #90	; 0x5a
 80139ec:	d803      	bhi.n	80139f6 <properties::convert_json_file(char*, unsigned short, bool)+0x156>
 80139ee:	4602      	mov	r2, r0
 80139f0:	f806 5b01 	strb.w	r5, [r6], #1
 80139f4:	3401      	adds	r4, #1
 80139f6:	469e      	mov	lr, r3
 80139f8:	e7e7      	b.n	80139ca <properties::convert_json_file(char*, unsigned short, bool)+0x12a>
	...

080139fc <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>:
 80139fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a00:	6002      	str	r2, [r0, #0]
 8013a02:	4614      	mov	r4, r2
 8013a04:	2200      	movs	r2, #0
 8013a06:	4606      	mov	r6, r0
 8013a08:	460f      	mov	r7, r1
 8013a0a:	80c2      	strh	r2, [r0, #6]
 8013a0c:	4a1b      	ldr	r2, [pc, #108]	; (8013a7c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x80>)
 8013a0e:	8083      	strh	r3, [r0, #4]
 8013a10:	7810      	ldrb	r0, [r2, #0]
 8013a12:	f000 0001 	and.w	r0, r0, #1
 8013a16:	7230      	strb	r0, [r6, #8]
 8013a18:	463d      	mov	r5, r7
 8013a1a:	782a      	ldrb	r2, [r5, #0]
 8013a1c:	3701      	adds	r7, #1
 8013a1e:	2a00      	cmp	r2, #0
 8013a20:	d1fa      	bne.n	8013a18 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x1c>
 8013a22:	1a6d      	subs	r5, r5, r1
 8013a24:	b29b      	uxth	r3, r3
 8013a26:	b1d0      	cbz	r0, 8013a5e <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x62>
 8013a28:	1d2f      	adds	r7, r5, #4
 8013a2a:	429f      	cmp	r7, r3
 8013a2c:	d814      	bhi.n	8013a58 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8013a2e:	f04f 087b 	mov.w	r8, #123	; 0x7b
 8013a32:	f04f 0922 	mov.w	r9, #34	; 0x22
 8013a36:	462a      	mov	r2, r5
 8013a38:	f884 8000 	strb.w	r8, [r4]
 8013a3c:	f884 9001 	strb.w	r9, [r4, #1]
 8013a40:	1ca0      	adds	r0, r4, #2
 8013a42:	f000 ff4e 	bl	80148e2 <memmove>
 8013a46:	223a      	movs	r2, #58	; 0x3a
 8013a48:	1963      	adds	r3, r4, r5
 8013a4a:	3505      	adds	r5, #5
 8013a4c:	f883 9002 	strb.w	r9, [r3, #2]
 8013a50:	70da      	strb	r2, [r3, #3]
 8013a52:	80f5      	strh	r5, [r6, #6]
 8013a54:	f804 8007 	strb.w	r8, [r4, r7]
 8013a58:	4630      	mov	r0, r6
 8013a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a5e:	1caf      	adds	r7, r5, #2
 8013a60:	429f      	cmp	r7, r3
 8013a62:	d8f9      	bhi.n	8013a58 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8013a64:	4620      	mov	r0, r4
 8013a66:	2323      	movs	r3, #35	; 0x23
 8013a68:	462a      	mov	r2, r5
 8013a6a:	f800 3b01 	strb.w	r3, [r0], #1
 8013a6e:	f000 ff38 	bl	80148e2 <memmove>
 8013a72:	230a      	movs	r3, #10
 8013a74:	442c      	add	r4, r5
 8013a76:	7063      	strb	r3, [r4, #1]
 8013a78:	80f7      	strh	r7, [r6, #6]
 8013a7a:	e7ed      	b.n	8013a58 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8013a7c:	2000a8d0 	ldrdcs	sl, [r0], -r0

08013a80 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>:
 8013a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a82:	469c      	mov	ip, r3
 8013a84:	8885      	ldrh	r5, [r0, #4]
 8013a86:	88c3      	ldrh	r3, [r0, #6]
 8013a88:	b085      	sub	sp, #20
 8013a8a:	42ab      	cmp	r3, r5
 8013a8c:	d302      	bcc.n	8013a94 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x14>
 8013a8e:	2000      	movs	r0, #0
 8013a90:	b005      	add	sp, #20
 8013a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a94:	4604      	mov	r4, r0
 8013a96:	6800      	ldr	r0, [r0, #0]
 8013a98:	1aed      	subs	r5, r5, r3
 8013a9a:	4418      	add	r0, r3
 8013a9c:	b2d6      	uxtb	r6, r2
 8013a9e:	f3c2 2707 	ubfx	r7, r2, #8, #8
 8013aa2:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8013aa6:	f894 e008 	ldrb.w	lr, [r4, #8]
 8013aaa:	0e12      	lsrs	r2, r2, #24
 8013aac:	f1bc 0f00 	cmp.w	ip, #0
 8013ab0:	d109      	bne.n	8013ac6 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x46>
 8013ab2:	f1be 0f00 	cmp.w	lr, #0
 8013ab6:	d109      	bne.n	8013acc <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x4c>
 8013ab8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8013abc:	e9cd 6700 	strd	r6, r7, [sp]
 8013ac0:	460b      	mov	r3, r1
 8013ac2:	4a0e      	ldr	r2, [pc, #56]	; (8013afc <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x7c>)
 8013ac4:	e008      	b.n	8013ad8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 8013ac6:	f1be 0f00 	cmp.w	lr, #0
 8013aca:	d00f      	beq.n	8013aec <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x6c>
 8013acc:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8013ad0:	460b      	mov	r3, r1
 8013ad2:	e9cd 6700 	strd	r6, r7, [sp]
 8013ad6:	4a0a      	ldr	r2, [pc, #40]	; (8013b00 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x80>)
 8013ad8:	4629      	mov	r1, r5
 8013ada:	f7f5 fdef 	bl	80096bc <snprintf>
 8013ade:	4285      	cmp	r5, r0
 8013ae0:	dbd5      	blt.n	8013a8e <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0xe>
 8013ae2:	88e3      	ldrh	r3, [r4, #6]
 8013ae4:	4403      	add	r3, r0
 8013ae6:	80e3      	strh	r3, [r4, #6]
 8013ae8:	2001      	movs	r0, #1
 8013aea:	e7d1      	b.n	8013a90 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x10>
 8013aec:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8013af0:	e9cd 6700 	strd	r6, r7, [sp]
 8013af4:	460b      	mov	r3, r1
 8013af6:	4a03      	ldr	r2, [pc, #12]	; (8013b04 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x84>)
 8013af8:	e7ee      	b.n	8013ad8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 8013afa:	bf00      	nop
 8013afc:	080188af 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, fp, pc}
 8013b00:	0801889b 	stmdaeq	r1, {r0, r1, r3, r4, r7, fp, pc}
 8013b04:	080188b0 	stmdaeq	r1, {r4, r5, r7, fp, pc}

08013b08 <PropertiesBuilder::AddComment(char const*)>:
 8013b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b0a:	7a06      	ldrb	r6, [r0, #8]
 8013b0c:	b996      	cbnz	r6, 8013b34 <PropertiesBuilder::AddComment(char const*)+0x2c>
 8013b0e:	4604      	mov	r4, r0
 8013b10:	88c0      	ldrh	r0, [r0, #6]
 8013b12:	88a5      	ldrh	r5, [r4, #4]
 8013b14:	42a8      	cmp	r0, r5
 8013b16:	d20d      	bcs.n	8013b34 <PropertiesBuilder::AddComment(char const*)+0x2c>
 8013b18:	6827      	ldr	r7, [r4, #0]
 8013b1a:	1a2d      	subs	r5, r5, r0
 8013b1c:	460b      	mov	r3, r1
 8013b1e:	4a06      	ldr	r2, [pc, #24]	; (8013b38 <PropertiesBuilder::AddComment(char const*)+0x30>)
 8013b20:	4629      	mov	r1, r5
 8013b22:	4438      	add	r0, r7
 8013b24:	f7f5 fdca 	bl	80096bc <snprintf>
 8013b28:	4285      	cmp	r5, r0
 8013b2a:	bfa1      	itttt	ge
 8013b2c:	2601      	movge	r6, #1
 8013b2e:	88e3      	ldrhge	r3, [r4, #6]
 8013b30:	18c0      	addge	r0, r0, r3
 8013b32:	80e0      	strhge	r0, [r4, #6]
 8013b34:	4630      	mov	r0, r6
 8013b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b38:	080188c0 	stmdaeq	r1, {r6, r7, fp, pc}

08013b3c <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)>:
 8013b3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013b3e:	88c5      	ldrh	r5, [r0, #6]
 8013b40:	8887      	ldrh	r7, [r0, #4]
 8013b42:	9e08      	ldr	r6, [sp, #32]
 8013b44:	42bd      	cmp	r5, r7
 8013b46:	d302      	bcc.n	8013b4e <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x12>
 8013b48:	2000      	movs	r0, #0
 8013b4a:	b003      	add	sp, #12
 8013b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b4e:	4604      	mov	r4, r0
 8013b50:	6800      	ldr	r0, [r0, #0]
 8013b52:	4428      	add	r0, r5
 8013b54:	1b7d      	subs	r5, r7, r5
 8013b56:	7a27      	ldrb	r7, [r4, #8]
 8013b58:	b92b      	cbnz	r3, 8013b66 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x2a>
 8013b5a:	b92f      	cbnz	r7, 8013b68 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x2c>
 8013b5c:	e9cd 6200 	strd	r6, r2, [sp]
 8013b60:	460b      	mov	r3, r1
 8013b62:	4a0b      	ldr	r2, [pc, #44]	; (8013b90 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x54>)
 8013b64:	e004      	b.n	8013b70 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x34>
 8013b66:	b16f      	cbz	r7, 8013b84 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x48>
 8013b68:	460b      	mov	r3, r1
 8013b6a:	e9cd 6200 	strd	r6, r2, [sp]
 8013b6e:	4a09      	ldr	r2, [pc, #36]	; (8013b94 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x58>)
 8013b70:	4629      	mov	r1, r5
 8013b72:	f7f5 fda3 	bl	80096bc <snprintf>
 8013b76:	4285      	cmp	r5, r0
 8013b78:	dbe6      	blt.n	8013b48 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0xc>
 8013b7a:	88e3      	ldrh	r3, [r4, #6]
 8013b7c:	4403      	add	r3, r0
 8013b7e:	80e3      	strh	r3, [r4, #6]
 8013b80:	2001      	movs	r0, #1
 8013b82:	e7e2      	b.n	8013b4a <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0xe>
 8013b84:	e9cd 6200 	strd	r6, r2, [sp]
 8013b88:	460b      	mov	r3, r1
 8013b8a:	4a03      	ldr	r2, [pc, #12]	; (8013b98 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x5c>)
 8013b8c:	e7f0      	b.n	8013b70 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x34>
 8013b8e:	bf00      	nop
 8013b90:	080188d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, fp, pc}
 8013b94:	080188c8 	stmdaeq	r1, {r3, r6, r7, fp, pc}
 8013b98:	080188d6 	stmdaeq	r1, {r1, r2, r4, r6, r7, fp, pc}

08013b9c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>:
 8013b9c:	e9c0 1200 	strd	r1, r2, [r0]
 8013ba0:	4770      	bx	lr

08013ba2 <ReadConfigFile::~ReadConfigFile()>:
 8013ba2:	4770      	bx	lr

08013ba4 <ReadConfigFile::Read(char const*, unsigned int)>:
 8013ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ba8:	4606      	mov	r6, r0
 8013baa:	460d      	mov	r5, r1
 8013bac:	4614      	mov	r4, r2
 8013bae:	f04f 0800 	mov.w	r8, #0
 8013bb2:	b090      	sub	sp, #64	; 0x40
 8013bb4:	b33c      	cbz	r4, 8013c06 <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 8013bb6:	466b      	mov	r3, sp
 8013bb8:	462a      	mov	r2, r5
 8013bba:	4619      	mov	r1, r3
 8013bbc:	7817      	ldrb	r7, [r2, #0]
 8013bbe:	4610      	mov	r0, r2
 8013bc0:	2f0d      	cmp	r7, #13
 8013bc2:	f102 0201 	add.w	r2, r2, #1
 8013bc6:	d013      	beq.n	8013bf0 <ReadConfigFile::Read(char const*, unsigned int)+0x4c>
 8013bc8:	2f0a      	cmp	r7, #10
 8013bca:	d011      	beq.n	8013bf0 <ReadConfigFile::Read(char const*, unsigned int)+0x4c>
 8013bcc:	f803 7b01 	strb.w	r7, [r3], #1
 8013bd0:	1a58      	subs	r0, r3, r1
 8013bd2:	283f      	cmp	r0, #63	; 0x3f
 8013bd4:	4615      	mov	r5, r2
 8013bd6:	dc16      	bgt.n	8013c06 <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 8013bd8:	3c01      	subs	r4, #1
 8013bda:	d1ef      	bne.n	8013bbc <ReadConfigFile::Read(char const*, unsigned int)+0x18>
 8013bdc:	f89d 2000 	ldrb.w	r2, [sp]
 8013be0:	2a60      	cmp	r2, #96	; 0x60
 8013be2:	d9e7      	bls.n	8013bb4 <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 8013be4:	f883 8000 	strb.w	r8, [r3]
 8013be8:	e9d6 3000 	ldrd	r3, r0, [r6]
 8013bec:	4798      	blx	r3
 8013bee:	e7e1      	b.n	8013bb4 <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 8013bf0:	4605      	mov	r5, r0
 8013bf2:	2c00      	cmp	r4, #0
 8013bf4:	d0f2      	beq.n	8013bdc <ReadConfigFile::Read(char const*, unsigned int)+0x38>
 8013bf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013bfa:	2a0d      	cmp	r2, #13
 8013bfc:	d001      	beq.n	8013c02 <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 8013bfe:	2a0a      	cmp	r2, #10
 8013c00:	d1ec      	bne.n	8013bdc <ReadConfigFile::Read(char const*, unsigned int)+0x38>
 8013c02:	3c01      	subs	r4, #1
 8013c04:	e7f4      	b.n	8013bf0 <ReadConfigFile::Read(char const*, unsigned int)+0x4c>
 8013c06:	b010      	add	sp, #64	; 0x40
 8013c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013c0c <Sscan::Char(char const*, char const*, char*, unsigned int&)>:
 8013c0c:	b570      	push	{r4, r5, r6, lr}
 8013c0e:	4615      	mov	r5, r2
 8013c10:	461c      	mov	r4, r3
 8013c12:	f000 f946 	bl	8013ea2 <Sscan::checkName(char const*, char const*)>
 8013c16:	b160      	cbz	r0, 8013c32 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x26>
 8013c18:	2100      	movs	r1, #0
 8013c1a:	5c43      	ldrb	r3, [r0, r1]
 8013c1c:	6826      	ldr	r6, [r4, #0]
 8013c1e:	b28a      	uxth	r2, r1
 8013c20:	b123      	cbz	r3, 8013c2c <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x20>
 8013c22:	42b2      	cmp	r2, r6
 8013c24:	d207      	bcs.n	8013c36 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2a>
 8013c26:	546b      	strb	r3, [r5, r1]
 8013c28:	3101      	adds	r1, #1
 8013c2a:	e7f6      	b.n	8013c1a <Sscan::Char(char const*, char const*, char*, unsigned int&)+0xe>
 8013c2c:	2000      	movs	r0, #0
 8013c2e:	6022      	str	r2, [r4, #0]
 8013c30:	bd70      	pop	{r4, r5, r6, pc}
 8013c32:	2001      	movs	r0, #1
 8013c34:	e7fc      	b.n	8013c30 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x24>
 8013c36:	2b0a      	cmp	r3, #10
 8013c38:	d0f8      	beq.n	8013c2c <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x20>
 8013c3a:	2002      	movs	r0, #2
 8013c3c:	e7f8      	b.n	8013c30 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x24>

08013c3e <Sscan::Float(char const*, char const*, float&)>:
 8013c3e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c42:	4616      	mov	r6, r2
 8013c44:	f000 f92d 	bl	8013ea2 <Sscan::checkName(char const*, char const*)>
 8013c48:	2800      	cmp	r0, #0
 8013c4a:	d059      	beq.n	8013d00 <Sscan::Float(char const*, char const*, float&)+0xc2>
 8013c4c:	4604      	mov	r4, r0
 8013c4e:	7803      	ldrb	r3, [r0, #0]
 8013c50:	2b2d      	cmp	r3, #45	; 0x2d
 8013c52:	bf08      	it	eq
 8013c54:	3401      	addeq	r4, #1
 8013c56:	7823      	ldrb	r3, [r4, #0]
 8013c58:	bf0c      	ite	eq
 8013c5a:	f04f 0801 	moveq.w	r8, #1
 8013c5e:	f04f 0800 	movne.w	r8, #0
 8013c62:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8013c66:	d103      	bne.n	8013c70 <Sscan::Float(char const*, char const*, float&)+0x32>
 8013c68:	2702      	movs	r7, #2
 8013c6a:	4638      	mov	r0, r7
 8013c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c70:	2000      	movs	r0, #0
 8013c72:	220a      	movs	r2, #10
 8013c74:	7823      	ldrb	r3, [r4, #0]
 8013c76:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013c7a:	2909      	cmp	r1, #9
 8013c7c:	d8f4      	bhi.n	8013c68 <Sscan::Float(char const*, char const*, float&)+0x2a>
 8013c7e:	fb02 3000 	mla	r0, r2, r0, r3
 8013c82:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013c86:	3830      	subs	r0, #48	; 0x30
 8013c88:	2b2e      	cmp	r3, #46	; 0x2e
 8013c8a:	d002      	beq.n	8013c92 <Sscan::Float(char const*, char const*, float&)+0x54>
 8013c8c:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8013c90:	d1f0      	bne.n	8013c74 <Sscan::Float(char const*, char const*, float&)+0x36>
 8013c92:	f7f4 f833 	bl	8007cfc <__aeabi_ui2f>
 8013c96:	6030      	str	r0, [r6, #0]
 8013c98:	7823      	ldrb	r3, [r4, #0]
 8013c9a:	4605      	mov	r5, r0
 8013c9c:	2b2e      	cmp	r3, #46	; 0x2e
 8013c9e:	d008      	beq.n	8013cb2 <Sscan::Float(char const*, char const*, float&)+0x74>
 8013ca0:	f1b8 0f00 	cmp.w	r8, #0
 8013ca4:	d101      	bne.n	8013caa <Sscan::Float(char const*, char const*, float&)+0x6c>
 8013ca6:	2700      	movs	r7, #0
 8013ca8:	e7df      	b.n	8013c6a <Sscan::Float(char const*, char const*, float&)+0x2c>
 8013caa:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 8013cae:	6035      	str	r5, [r6, #0]
 8013cb0:	e7f9      	b.n	8013ca6 <Sscan::Float(char const*, char const*, float&)+0x68>
 8013cb2:	f04f 0901 	mov.w	r9, #1
 8013cb6:	2000      	movs	r0, #0
 8013cb8:	220a      	movs	r2, #10
 8013cba:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013cbe:	f013 07df 	ands.w	r7, r3, #223	; 0xdf
 8013cc2:	d007      	beq.n	8013cd4 <Sscan::Float(char const*, char const*, float&)+0x96>
 8013cc4:	3b30      	subs	r3, #48	; 0x30
 8013cc6:	2b09      	cmp	r3, #9
 8013cc8:	d8ce      	bhi.n	8013c68 <Sscan::Float(char const*, char const*, float&)+0x2a>
 8013cca:	fb02 3000 	mla	r0, r2, r0, r3
 8013cce:	fb02 f909 	mul.w	r9, r2, r9
 8013cd2:	e7f2      	b.n	8013cba <Sscan::Float(char const*, char const*, float&)+0x7c>
 8013cd4:	f7f4 f812 	bl	8007cfc <__aeabi_ui2f>
 8013cd8:	4604      	mov	r4, r0
 8013cda:	4648      	mov	r0, r9
 8013cdc:	f7f4 f80e 	bl	8007cfc <__aeabi_ui2f>
 8013ce0:	4601      	mov	r1, r0
 8013ce2:	4620      	mov	r0, r4
 8013ce4:	f7f4 fcf2 	bl	80086cc <__aeabi_fdiv>
 8013ce8:	4629      	mov	r1, r5
 8013cea:	f7f3 ff57 	bl	8007b9c <__addsf3>
 8013cee:	f1b8 0f00 	cmp.w	r8, #0
 8013cf2:	d101      	bne.n	8013cf8 <Sscan::Float(char const*, char const*, float&)+0xba>
 8013cf4:	6030      	str	r0, [r6, #0]
 8013cf6:	e7d6      	b.n	8013ca6 <Sscan::Float(char const*, char const*, float&)+0x68>
 8013cf8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8013cfc:	6030      	str	r0, [r6, #0]
 8013cfe:	e7b4      	b.n	8013c6a <Sscan::Float(char const*, char const*, float&)+0x2c>
 8013d00:	2701      	movs	r7, #1
 8013d02:	e7b2      	b.n	8013c6a <Sscan::Float(char const*, char const*, float&)+0x2c>

08013d04 <Sscan::HexUint16(char const*, char const*, unsigned short&)>:
 8013d04:	b538      	push	{r3, r4, r5, lr}
 8013d06:	4614      	mov	r4, r2
 8013d08:	f000 f8cb 	bl	8013ea2 <Sscan::checkName(char const*, char const*)>
 8013d0c:	b908      	cbnz	r0, 8013d12 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xe>
 8013d0e:	2001      	movs	r0, #1
 8013d10:	bd38      	pop	{r3, r4, r5, pc}
 8013d12:	2100      	movs	r1, #0
 8013d14:	4602      	mov	r2, r0
 8013d16:	8021      	strh	r1, [r4, #0]
 8013d18:	5c50      	ldrb	r0, [r2, r1]
 8013d1a:	b1b0      	cbz	r0, 8013d4a <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x46>
 8013d1c:	2904      	cmp	r1, #4
 8013d1e:	d018      	beq.n	8013d52 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x4e>
 8013d20:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013d24:	2b09      	cmp	r3, #9
 8013d26:	d904      	bls.n	8013d32 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x2e>
 8013d28:	f040 0520 	orr.w	r5, r0, #32
 8013d2c:	3d61      	subs	r5, #97	; 0x61
 8013d2e:	2d05      	cmp	r5, #5
 8013d30:	d8ed      	bhi.n	8013d0e <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xa>
 8013d32:	2839      	cmp	r0, #57	; 0x39
 8013d34:	bf84      	itt	hi
 8013d36:	f040 0320 	orrhi.w	r3, r0, #32
 8013d3a:	3b57      	subhi	r3, #87	; 0x57
 8013d3c:	8820      	ldrh	r0, [r4, #0]
 8013d3e:	b2db      	uxtb	r3, r3
 8013d40:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8013d44:	8023      	strh	r3, [r4, #0]
 8013d46:	3101      	adds	r1, #1
 8013d48:	e7e6      	b.n	8013d18 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x14>
 8013d4a:	2904      	cmp	r1, #4
 8013d4c:	bf18      	it	ne
 8013d4e:	2002      	movne	r0, #2
 8013d50:	e7de      	b.n	8013d10 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xc>
 8013d52:	3820      	subs	r0, #32
 8013d54:	bf18      	it	ne
 8013d56:	2001      	movne	r0, #1
 8013d58:	e7da      	b.n	8013d10 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xc>

08013d5a <Sscan::IpAddress(char const*, char const*, unsigned int&)>:
 8013d5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013d5c:	4615      	mov	r5, r2
 8013d5e:	f000 f8a0 	bl	8013ea2 <Sscan::checkName(char const*, char const*)>
 8013d62:	b3c0      	cbz	r0, 8013dd6 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x7c>
 8013d64:	2400      	movs	r4, #0
 8013d66:	270a      	movs	r7, #10
 8013d68:	ae01      	add	r6, sp, #4
 8013d6a:	4603      	mov	r3, r0
 8013d6c:	2100      	movs	r1, #0
 8013d6e:	f100 0c04 	add.w	ip, r0, #4
 8013d72:	4618      	mov	r0, r3
 8013d74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d78:	2a2e      	cmp	r2, #46	; 0x2e
 8013d7a:	d00e      	beq.n	8013d9a <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x40>
 8013d7c:	b16a      	cbz	r2, 8013d9a <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x40>
 8013d7e:	4560      	cmp	r0, ip
 8013d80:	d102      	bne.n	8013d88 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x2e>
 8013d82:	2002      	movs	r0, #2
 8013d84:	b003      	add	sp, #12
 8013d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d88:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8013d8c:	2b09      	cmp	r3, #9
 8013d8e:	d8f8      	bhi.n	8013d82 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 8013d90:	fb07 2101 	mla	r1, r7, r1, r2
 8013d94:	4603      	mov	r3, r0
 8013d96:	3930      	subs	r1, #48	; 0x30
 8013d98:	e7eb      	b.n	8013d72 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x18>
 8013d9a:	29ff      	cmp	r1, #255	; 0xff
 8013d9c:	d8f1      	bhi.n	8013d82 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 8013d9e:	3401      	adds	r4, #1
 8013da0:	2c03      	cmp	r4, #3
 8013da2:	f806 1b01 	strb.w	r1, [r6], #1
 8013da6:	d1e0      	bne.n	8013d6a <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x10>
 8013da8:	2400      	movs	r4, #0
 8013daa:	220a      	movs	r2, #10
 8013dac:	1d1e      	adds	r6, r3, #4
 8013dae:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8013db2:	f011 00df 	ands.w	r0, r1, #223	; 0xdf
 8013db6:	d007      	beq.n	8013dc8 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x6e>
 8013db8:	429e      	cmp	r6, r3
 8013dba:	d0e2      	beq.n	8013d82 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 8013dbc:	3930      	subs	r1, #48	; 0x30
 8013dbe:	2909      	cmp	r1, #9
 8013dc0:	d8df      	bhi.n	8013d82 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 8013dc2:	fb02 1404 	mla	r4, r2, r4, r1
 8013dc6:	e7f2      	b.n	8013dae <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x54>
 8013dc8:	2cff      	cmp	r4, #255	; 0xff
 8013dca:	d8da      	bhi.n	8013d82 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 8013dcc:	f88d 4007 	strb.w	r4, [sp, #7]
 8013dd0:	9b01      	ldr	r3, [sp, #4]
 8013dd2:	602b      	str	r3, [r5, #0]
 8013dd4:	e7d6      	b.n	8013d84 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x2a>
 8013dd6:	2001      	movs	r0, #1
 8013dd8:	e7d4      	b.n	8013d84 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x2a>

08013dda <Sscan::Uint16(char const*, char const*, unsigned short&)>:
 8013dda:	b538      	push	{r3, r4, r5, lr}
 8013ddc:	4615      	mov	r5, r2
 8013dde:	f000 f860 	bl	8013ea2 <Sscan::checkName(char const*, char const*)>
 8013de2:	b1a0      	cbz	r0, 8013e0e <Sscan::Uint16(char const*, char const*, unsigned short&)+0x34>
 8013de4:	4604      	mov	r4, r0
 8013de6:	2100      	movs	r1, #0
 8013de8:	220a      	movs	r2, #10
 8013dea:	7823      	ldrb	r3, [r4, #0]
 8013dec:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8013df0:	2809      	cmp	r0, #9
 8013df2:	d80e      	bhi.n	8013e12 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 8013df4:	fb02 3101 	mla	r1, r2, r1, r3
 8013df8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013dfc:	3930      	subs	r1, #48	; 0x30
 8013dfe:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 8013e02:	d1f2      	bne.n	8013dea <Sscan::Uint16(char const*, char const*, unsigned short&)+0x10>
 8013e04:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8013e08:	d203      	bcs.n	8013e12 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 8013e0a:	8029      	strh	r1, [r5, #0]
 8013e0c:	bd38      	pop	{r3, r4, r5, pc}
 8013e0e:	2001      	movs	r0, #1
 8013e10:	e7fc      	b.n	8013e0c <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>
 8013e12:	2002      	movs	r0, #2
 8013e14:	e7fa      	b.n	8013e0c <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>

08013e16 <Sscan::Uint32(char const*, char const*, unsigned int&)>:
 8013e16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e18:	4615      	mov	r5, r2
 8013e1a:	f000 f842 	bl	8013ea2 <Sscan::checkName(char const*, char const*)>
 8013e1e:	b1f8      	cbz	r0, 8013e60 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4a>
 8013e20:	2300      	movs	r3, #0
 8013e22:	4604      	mov	r4, r0
 8013e24:	461e      	mov	r6, r3
 8013e26:	270a      	movs	r7, #10
 8013e28:	7822      	ldrb	r2, [r4, #0]
 8013e2a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8013e2e:	2909      	cmp	r1, #9
 8013e30:	d818      	bhi.n	8013e64 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4e>
 8013e32:	fba3 3107 	umull	r3, r1, r3, r7
 8013e36:	fb07 1106 	mla	r1, r7, r6, r1
 8013e3a:	3b30      	subs	r3, #48	; 0x30
 8013e3c:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 8013e40:	18d3      	adds	r3, r2, r3
 8013e42:	f141 0600 	adc.w	r6, r1, #0
 8013e46:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8013e4a:	f011 00df 	ands.w	r0, r1, #223	; 0xdf
 8013e4e:	d1eb      	bne.n	8013e28 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x12>
 8013e50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013e54:	429a      	cmp	r2, r3
 8013e56:	eb70 0206 	sbcs.w	r2, r0, r6
 8013e5a:	d303      	bcc.n	8013e64 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4e>
 8013e5c:	602b      	str	r3, [r5, #0]
 8013e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e60:	2001      	movs	r0, #1
 8013e62:	e7fc      	b.n	8013e5e <Sscan::Uint32(char const*, char const*, unsigned int&)+0x48>
 8013e64:	2002      	movs	r0, #2
 8013e66:	e7fa      	b.n	8013e5e <Sscan::Uint32(char const*, char const*, unsigned int&)+0x48>

08013e68 <Sscan::Uint8(char const*, char const*, unsigned char&)>:
 8013e68:	b538      	push	{r3, r4, r5, lr}
 8013e6a:	4615      	mov	r5, r2
 8013e6c:	f000 f819 	bl	8013ea2 <Sscan::checkName(char const*, char const*)>
 8013e70:	b198      	cbz	r0, 8013e9a <Sscan::Uint8(char const*, char const*, unsigned char&)+0x32>
 8013e72:	4604      	mov	r4, r0
 8013e74:	2100      	movs	r1, #0
 8013e76:	220a      	movs	r2, #10
 8013e78:	7823      	ldrb	r3, [r4, #0]
 8013e7a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8013e7e:	2809      	cmp	r0, #9
 8013e80:	d80d      	bhi.n	8013e9e <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 8013e82:	fb02 3101 	mla	r1, r2, r1, r3
 8013e86:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013e8a:	3930      	subs	r1, #48	; 0x30
 8013e8c:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 8013e90:	d1f2      	bne.n	8013e78 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x10>
 8013e92:	29ff      	cmp	r1, #255	; 0xff
 8013e94:	d803      	bhi.n	8013e9e <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 8013e96:	7029      	strb	r1, [r5, #0]
 8013e98:	bd38      	pop	{r3, r4, r5, pc}
 8013e9a:	2001      	movs	r0, #1
 8013e9c:	e7fc      	b.n	8013e98 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>
 8013e9e:	2002      	movs	r0, #2
 8013ea0:	e7fa      	b.n	8013e98 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>

08013ea2 <Sscan::checkName(char const*, char const*)>:
 8013ea2:	4603      	mov	r3, r0
 8013ea4:	b510      	push	{r4, lr}
 8013ea6:	3901      	subs	r1, #1
 8013ea8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013eac:	461c      	mov	r4, r3
 8013eae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013eb2:	b120      	cbz	r0, 8013ebe <Sscan::checkName(char const*, char const*)+0x1c>
 8013eb4:	b10a      	cbz	r2, 8013eba <Sscan::checkName(char const*, char const*)+0x18>
 8013eb6:	4290      	cmp	r0, r2
 8013eb8:	d0f6      	beq.n	8013ea8 <Sscan::checkName(char const*, char const*)+0x6>
 8013eba:	2000      	movs	r0, #0
 8013ebc:	e006      	b.n	8013ecc <Sscan::checkName(char const*, char const*)+0x2a>
 8013ebe:	2a3d      	cmp	r2, #61	; 0x3d
 8013ec0:	d104      	bne.n	8013ecc <Sscan::checkName(char const*, char const*)+0x2a>
 8013ec2:	7860      	ldrb	r0, [r4, #1]
 8013ec4:	f010 00df 	ands.w	r0, r0, #223	; 0xdf
 8013ec8:	d000      	beq.n	8013ecc <Sscan::checkName(char const*, char const*)+0x2a>
 8013eca:	1c60      	adds	r0, r4, #1
 8013ecc:	bd10      	pop	{r4, pc}
	...

08013ed0 <Display::PrintInfo() [clone .isra.0]>:
 8013ed0:	b910      	cbnz	r0, 8013ed8 <Display::PrintInfo() [clone .isra.0]+0x8>
 8013ed2:	4803      	ldr	r0, [pc, #12]	; (8013ee0 <Display::PrintInfo() [clone .isra.0]+0x10>)
 8013ed4:	f000 bd41 	b.w	801495a <puts>
 8013ed8:	6803      	ldr	r3, [r0, #0]
 8013eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013edc:	4718      	bx	r3
 8013ede:	bf00      	nop
 8013ee0:	08018a72 	stmdaeq	r1, {r1, r4, r5, r6, r9, fp, pc}

08013ee4 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
 8013ee4:	b513      	push	{r0, r1, r4, lr}
 8013ee6:	4604      	mov	r4, r0
 8013ee8:	0a13      	lsrs	r3, r2, #8
 8013eea:	7800      	ldrb	r0, [r0, #0]
 8013eec:	f88d 1004 	strb.w	r1, [sp, #4]
 8013ef0:	f88d 3005 	strb.w	r3, [sp, #5]
 8013ef4:	f88d 2006 	strb.w	r2, [sp, #6]
 8013ef8:	f001 fc74 	bl	80157e4 <gd32_i2c_set_address(unsigned char)>
 8013efc:	6860      	ldr	r0, [r4, #4]
 8013efe:	f001 fc69 	bl	80157d4 <gd32_i2c_set_baudrate(unsigned int)>
 8013f02:	2103      	movs	r1, #3
 8013f04:	a801      	add	r0, sp, #4
 8013f06:	f001 fc73 	bl	80157f0 <gd32_i2c_write(char const*, unsigned int)>
 8013f0a:	b002      	add	sp, #8
 8013f0c:	bd10      	pop	{r4, pc}

08013f0e <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
 8013f0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013f10:	460d      	mov	r5, r1
 8013f12:	4604      	mov	r4, r0
 8013f14:	f001 fc66 	bl	80157e4 <gd32_i2c_set_address(unsigned char)>
 8013f18:	4628      	mov	r0, r5
 8013f1a:	f001 fc5b 	bl	80157d4 <gd32_i2c_set_baudrate(unsigned int)>
 8013f1e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8013f22:	2b07      	cmp	r3, #7
 8013f24:	d902      	bls.n	8013f2c <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x1e>
 8013f26:	3c50      	subs	r4, #80	; 0x50
 8013f28:	2c0f      	cmp	r4, #15
 8013f2a:	d809      	bhi.n	8013f40 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x32>
 8013f2c:	2101      	movs	r1, #1
 8013f2e:	f10d 0007 	add.w	r0, sp, #7
 8013f32:	f001 fcc3 	bl	80158bc <gd32_i2c_read(char*, unsigned int)>
 8013f36:	fab0 f080 	clz	r0, r0
 8013f3a:	0940      	lsrs	r0, r0, #5
 8013f3c:	b003      	add	sp, #12
 8013f3e:	bd30      	pop	{r4, r5, pc}
 8013f40:	2100      	movs	r1, #0
 8013f42:	4608      	mov	r0, r1
 8013f44:	f001 fc54 	bl	80157f0 <gd32_i2c_write(char const*, unsigned int)>
 8013f48:	e7f5      	b.n	8013f36 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x28>

08013f4a <Display::Detect7Segment()>:
 8013f4a:	b538      	push	{r3, r4, r5, lr}
 8013f4c:	68c1      	ldr	r1, [r0, #12]
 8013f4e:	4604      	mov	r4, r0
 8013f50:	7a00      	ldrb	r0, [r0, #8]
 8013f52:	f7ff ffdc 	bl	8013f0e <HAL_I2C::IsConnected_(unsigned char, unsigned int)>
 8013f56:	7460      	strb	r0, [r4, #17]
 8013f58:	b170      	cbz	r0, 8013f78 <Display::Detect7Segment()+0x2e>
 8013f5a:	2200      	movs	r2, #0
 8013f5c:	f104 0508 	add.w	r5, r4, #8
 8013f60:	4611      	mov	r1, r2
 8013f62:	4628      	mov	r0, r5
 8013f64:	f7ff ffbe 	bl	8013ee4 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8013f68:	7c63      	ldrb	r3, [r4, #17]
 8013f6a:	b12b      	cbz	r3, 8013f78 <Display::Detect7Segment()+0x2e>
 8013f6c:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 8013f70:	2112      	movs	r1, #18
 8013f72:	4628      	mov	r0, r5
 8013f74:	f7ff ffb6 	bl	8013ee4 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8013f78:	bd38      	pop	{r3, r4, r5, pc}

08013f7a <Display::Detect(display::Type)>:
 8013f7a:	2902      	cmp	r1, #2
 8013f7c:	b538      	push	{r3, r4, r5, lr}
 8013f7e:	4604      	mov	r4, r0
 8013f80:	d014      	beq.n	8013fac <Display::Detect(display::Type)+0x32>
 8013f82:	2904      	cmp	r1, #4
 8013f84:	d01b      	beq.n	8013fbe <Display::Detect(display::Type)+0x44>
 8013f86:	69a0      	ldr	r0, [r4, #24]
 8013f88:	b168      	cbz	r0, 8013fa6 <Display::Detect(display::Type)+0x2c>
 8013f8a:	6803      	ldr	r3, [r0, #0]
 8013f8c:	689b      	ldr	r3, [r3, #8]
 8013f8e:	4798      	blx	r3
 8013f90:	4603      	mov	r3, r0
 8013f92:	69a0      	ldr	r0, [r4, #24]
 8013f94:	b9ab      	cbnz	r3, 8013fc2 <Display::Detect(display::Type)+0x48>
 8013f96:	b110      	cbz	r0, 8013f9e <Display::Detect(display::Type)+0x24>
 8013f98:	6803      	ldr	r3, [r0, #0]
 8013f9a:	685b      	ldr	r3, [r3, #4]
 8013f9c:	4798      	blx	r3
 8013f9e:	2300      	movs	r3, #0
 8013fa0:	61a3      	str	r3, [r4, #24]
 8013fa2:	2304      	movs	r3, #4
 8013fa4:	6023      	str	r3, [r4, #0]
 8013fa6:	2300      	movs	r3, #0
 8013fa8:	6163      	str	r3, [r4, #20]
 8013faa:	e010      	b.n	8013fce <Display::Detect(display::Type)+0x54>
 8013fac:	2018      	movs	r0, #24
 8013fae:	f000 fbd9 	bl	8014764 <operator new(unsigned int)>
 8013fb2:	4605      	mov	r5, r0
 8013fb4:	2100      	movs	r1, #0
 8013fb6:	f000 f8a3 	bl	8014100 <Ssd1306::Ssd1306(TOledPanel)>
 8013fba:	61a5      	str	r5, [r4, #24]
 8013fbc:	e7e3      	b.n	8013f86 <Display::Detect(display::Type)+0xc>
 8013fbe:	6001      	str	r1, [r0, #0]
 8013fc0:	e7e1      	b.n	8013f86 <Display::Detect(display::Type)+0xc>
 8013fc2:	6803      	ldr	r3, [r0, #0]
 8013fc4:	68db      	ldr	r3, [r3, #12]
 8013fc6:	4798      	blx	r3
 8013fc8:	69a3      	ldr	r3, [r4, #24]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d0eb      	beq.n	8013fa6 <Display::Detect(display::Type)+0x2c>
 8013fce:	bd38      	pop	{r3, r4, r5, pc}

08013fd0 <Display::Display()>:
 8013fd0:	2304      	movs	r3, #4
 8013fd2:	b510      	push	{r4, lr}
 8013fd4:	6003      	str	r3, [r0, #0]
 8013fd6:	4b0f      	ldr	r3, [pc, #60]	; (8014014 <Display::Display()+0x44>)
 8013fd8:	4604      	mov	r4, r0
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	4a0e      	ldr	r2, [pc, #56]	; (8014018 <Display::Display()+0x48>)
 8013fde:	6043      	str	r3, [r0, #4]
 8013fe0:	2321      	movs	r3, #33	; 0x21
 8013fe2:	7203      	strb	r3, [r0, #8]
 8013fe4:	4b0d      	ldr	r3, [pc, #52]	; (801401c <Display::Display()+0x4c>)
 8013fe6:	2102      	movs	r1, #2
 8013fe8:	60c3      	str	r3, [r0, #12]
 8013fea:	2300      	movs	r3, #0
 8013fec:	e9c0 2305 	strd	r2, r3, [r0, #20]
 8013ff0:	8203      	strh	r3, [r0, #16]
 8013ff2:	4b0b      	ldr	r3, [pc, #44]	; (8014020 <Display::Display()+0x50>)
 8013ff4:	6018      	str	r0, [r3, #0]
 8013ff6:	f7ff ffc0 	bl	8013f7a <Display::Detect(display::Type)>
 8013ffa:	4620      	mov	r0, r4
 8013ffc:	f7ff ffa5 	bl	8013f4a <Display::Detect7Segment()>
 8014000:	69a3      	ldr	r3, [r4, #24]
 8014002:	b10b      	cbz	r3, 8014008 <Display::Display()+0x38>
 8014004:	f000 f80e 	bl	8014024 <display::timeout::gpio_init()>
 8014008:	69a0      	ldr	r0, [r4, #24]
 801400a:	f7ff ff61 	bl	8013ed0 <Display::PrintInfo() [clone .isra.0]>
 801400e:	4620      	mov	r0, r4
 8014010:	bd10      	pop	{r4, pc}
 8014012:	bf00      	nop
 8014014:	2000a9dc 	ldrdcs	sl, [r0], -ip
 8014018:	000493e0 	andeq	r9, r4, r0, ror #7
 801401c:	00061a80 	andeq	r1, r6, r0, lsl #21
 8014020:	2000a8d4 	ldrdcs	sl, [r0], -r4

08014024 <display::timeout::gpio_init()>:
 8014024:	4770      	bx	lr

08014026 <display::timeout::gpio_renew()>:
 8014026:	2000      	movs	r0, #0
 8014028:	4770      	bx	lr

0801402a <Ssd1306::~Ssd1306()>:
 801402a:	4770      	bx	lr

0801402c <Ssd1306::SetCursor(unsigned int)>:
 801402c:	4770      	bx	lr
	...

08014030 <Ssd1306::PrintInfo()>:
 8014030:	b410      	push	{r4}
 8014032:	4906      	ldr	r1, [pc, #24]	; (801404c <Ssd1306::PrintInfo()+0x1c>)
 8014034:	7c44      	ldrb	r4, [r0, #17]
 8014036:	7903      	ldrb	r3, [r0, #4]
 8014038:	7942      	ldrb	r2, [r0, #5]
 801403a:	4805      	ldr	r0, [pc, #20]	; (8014050 <Ssd1306::PrintInfo()+0x20>)
 801403c:	2c00      	cmp	r4, #0
 801403e:	bf08      	it	eq
 8014040:	4601      	moveq	r1, r0
 8014042:	4804      	ldr	r0, [pc, #16]	; (8014054 <Ssd1306::PrintInfo()+0x24>)
 8014044:	bc10      	pop	{r4}
 8014046:	f7f5 bb11 	b.w	800966c <printf>
 801404a:	bf00      	nop
 801404c:	08018a83 	stmdaeq	r1, {r0, r1, r7, r9, fp, pc}
 8014050:	08018a8a 	stmdaeq	r1, {r1, r3, r7, r9, fp, pc}
 8014054:	08018a92 	stmdaeq	r1, {r1, r4, r7, r9, fp, pc}

08014058 <Ssd1306::~Ssd1306()>:
 8014058:	b510      	push	{r4, lr}
 801405a:	4604      	mov	r4, r0
 801405c:	f000 fb7e 	bl	801475c <operator delete(void*)>
 8014060:	4620      	mov	r0, r4
 8014062:	bd10      	pop	{r4, pc}

08014064 <HAL_I2C::Setup()>:
 8014064:	b510      	push	{r4, lr}
 8014066:	4604      	mov	r4, r0
 8014068:	7800      	ldrb	r0, [r0, #0]
 801406a:	f001 fbbb 	bl	80157e4 <gd32_i2c_set_address(unsigned char)>
 801406e:	6860      	ldr	r0, [r4, #4]
 8014070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014074:	f001 bbae 	b.w	80157d4 <gd32_i2c_set_baudrate(unsigned int)>

08014078 <Ssd1306::PutChar(int)>:
 8014078:	b510      	push	{r4, lr}
 801407a:	f1a1 0420 	sub.w	r4, r1, #32
 801407e:	2c5f      	cmp	r4, #95	; 0x5f
 8014080:	bf88      	it	hi
 8014082:	2400      	movhi	r4, #0
 8014084:	3008      	adds	r0, #8
 8014086:	f7ff ffed 	bl	8014064 <HAL_I2C::Setup()>
 801408a:	4804      	ldr	r0, [pc, #16]	; (801409c <Ssd1306::PutChar(int)+0x24>)
 801408c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8014090:	4420      	add	r0, r4
 8014092:	2107      	movs	r1, #7
 8014094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014098:	f001 bbaa 	b.w	80157f0 <gd32_i2c_write(char const*, unsigned int)>
 801409c:	08018aa4 	stmdaeq	r1, {r2, r5, r7, r9, fp, pc}

080140a0 <Ssd1306::PutString(char const*)>:
 80140a0:	b538      	push	{r3, r4, r5, lr}
 80140a2:	4605      	mov	r5, r0
 80140a4:	1e4c      	subs	r4, r1, #1
 80140a6:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80140aa:	b119      	cbz	r1, 80140b4 <Ssd1306::PutString(char const*)+0x14>
 80140ac:	4628      	mov	r0, r5
 80140ae:	f7ff ffe3 	bl	8014078 <Ssd1306::PutChar(int)>
 80140b2:	e7f8      	b.n	80140a6 <Ssd1306::PutString(char const*)+0x6>
 80140b4:	bd38      	pop	{r3, r4, r5, pc}

080140b6 <Ssd1306::Text(char const*, unsigned int)>:
 80140b6:	b570      	push	{r4, r5, r6, lr}
 80140b8:	7903      	ldrb	r3, [r0, #4]
 80140ba:	4605      	mov	r5, r0
 80140bc:	460c      	mov	r4, r1
 80140be:	4293      	cmp	r3, r2
 80140c0:	bf94      	ite	ls
 80140c2:	18ce      	addls	r6, r1, r3
 80140c4:	188e      	addhi	r6, r1, r2
 80140c6:	42b4      	cmp	r4, r6
 80140c8:	d005      	beq.n	80140d6 <Ssd1306::Text(char const*, unsigned int)+0x20>
 80140ca:	4628      	mov	r0, r5
 80140cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80140d0:	f7ff ffd2 	bl	8014078 <Ssd1306::PutChar(int)>
 80140d4:	e7f7      	b.n	80140c6 <Ssd1306::Text(char const*, unsigned int)+0x10>
 80140d6:	bd70      	pop	{r4, r5, r6, pc}

080140d8 <Ssd1306::InitMembers()>:
 80140d8:	7c03      	ldrb	r3, [r0, #16]
 80140da:	b12b      	cbz	r3, 80140e8 <Ssd1306::InitMembers()+0x10>
 80140dc:	3b01      	subs	r3, #1
 80140de:	2b01      	cmp	r3, #1
 80140e0:	d908      	bls.n	80140f4 <Ssd1306::InitMembers()+0x1c>
 80140e2:	f640 0315 	movw	r3, #2069	; 0x815
 80140e6:	e007      	b.n	80140f8 <Ssd1306::InitMembers()+0x20>
 80140e8:	f640 0315 	movw	r3, #2069	; 0x815
 80140ec:	8083      	strh	r3, [r0, #4]
 80140ee:	2308      	movs	r3, #8
 80140f0:	6143      	str	r3, [r0, #20]
 80140f2:	4770      	bx	lr
 80140f4:	f240 4315 	movw	r3, #1045	; 0x415
 80140f8:	8083      	strh	r3, [r0, #4]
 80140fa:	2304      	movs	r3, #4
 80140fc:	e7f8      	b.n	80140f0 <Ssd1306::InitMembers()+0x18>
	...

08014100 <Ssd1306::Ssd1306(TOledPanel)>:
 8014100:	4a08      	ldr	r2, [pc, #32]	; (8014124 <Ssd1306::Ssd1306(TOledPanel)+0x24>)
 8014102:	b508      	push	{r3, lr}
 8014104:	6002      	str	r2, [r0, #0]
 8014106:	227f      	movs	r2, #127	; 0x7f
 8014108:	80c2      	strh	r2, [r0, #6]
 801410a:	223c      	movs	r2, #60	; 0x3c
 801410c:	7202      	strb	r2, [r0, #8]
 801410e:	4a06      	ldr	r2, [pc, #24]	; (8014128 <Ssd1306::Ssd1306(TOledPanel)+0x28>)
 8014110:	7401      	strb	r1, [r0, #16]
 8014112:	60c2      	str	r2, [r0, #12]
 8014114:	2200      	movs	r2, #0
 8014116:	7442      	strb	r2, [r0, #17]
 8014118:	4a04      	ldr	r2, [pc, #16]	; (801412c <Ssd1306::Ssd1306(TOledPanel)+0x2c>)
 801411a:	6010      	str	r0, [r2, #0]
 801411c:	f7ff ffdc 	bl	80140d8 <Ssd1306::InitMembers()>
 8014120:	bd08      	pop	{r3, pc}
 8014122:	bf00      	nop
 8014124:	08018d7c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, sl, fp, pc}
 8014128:	00061a80 	andeq	r1, r6, r0, lsl #21
 801412c:	2000a960 	andcs	sl, r0, r0, ror #18

08014130 <Ssd1306::SendCommand(unsigned char)>:
 8014130:	2300      	movs	r3, #0
 8014132:	b507      	push	{r0, r1, r2, lr}
 8014134:	3008      	adds	r0, #8
 8014136:	f88d 3004 	strb.w	r3, [sp, #4]
 801413a:	f88d 1005 	strb.w	r1, [sp, #5]
 801413e:	f7ff ff91 	bl	8014064 <HAL_I2C::Setup()>
 8014142:	2102      	movs	r1, #2
 8014144:	a801      	add	r0, sp, #4
 8014146:	f001 fb53 	bl	80157f0 <gd32_i2c_write(char const*, unsigned int)>
 801414a:	b003      	add	sp, #12
 801414c:	f85d fb04 	ldr.w	pc, [sp], #4

08014150 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>:
 8014150:	2914      	cmp	r1, #20
 8014152:	b570      	push	{r4, r5, r6, lr}
 8014154:	4605      	mov	r5, r0
 8014156:	4616      	mov	r6, r2
 8014158:	d81c      	bhi.n	8014194 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 801415a:	7943      	ldrb	r3, [r0, #5]
 801415c:	4293      	cmp	r3, r2
 801415e:	d919      	bls.n	8014194 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 8014160:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8014164:	7c43      	ldrb	r3, [r0, #17]
 8014166:	004c      	lsls	r4, r1, #1
 8014168:	b2e4      	uxtb	r4, r4
 801416a:	b10b      	cbz	r3, 8014170 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x20>
 801416c:	3404      	adds	r4, #4
 801416e:	b2e4      	uxtb	r4, r4
 8014170:	4628      	mov	r0, r5
 8014172:	f004 010e 	and.w	r1, r4, #14
 8014176:	f7ff ffdb 	bl	8014130 <Ssd1306::SendCommand(unsigned char)>
 801417a:	0921      	lsrs	r1, r4, #4
 801417c:	4628      	mov	r0, r5
 801417e:	f041 0110 	orr.w	r1, r1, #16
 8014182:	f7ff ffd5 	bl	8014130 <Ssd1306::SendCommand(unsigned char)>
 8014186:	4628      	mov	r0, r5
 8014188:	f046 01b0 	orr.w	r1, r6, #176	; 0xb0
 801418c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014190:	f7ff bfce 	b.w	8014130 <Ssd1306::SendCommand(unsigned char)>
 8014194:	bd70      	pop	{r4, r5, r6, pc}

08014196 <Ssd1306::TextLine(unsigned char, char const*, unsigned int)>:
 8014196:	b570      	push	{r4, r5, r6, lr}
 8014198:	4604      	mov	r4, r0
 801419a:	4615      	mov	r5, r2
 801419c:	461e      	mov	r6, r3
 801419e:	b171      	cbz	r1, 80141be <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x28>
 80141a0:	7943      	ldrb	r3, [r0, #5]
 80141a2:	428b      	cmp	r3, r1
 80141a4:	d30b      	bcc.n	80141be <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x28>
 80141a6:	3901      	subs	r1, #1
 80141a8:	b2ca      	uxtb	r2, r1
 80141aa:	2100      	movs	r1, #0
 80141ac:	f7ff ffd0 	bl	8014150 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 80141b0:	4632      	mov	r2, r6
 80141b2:	4629      	mov	r1, r5
 80141b4:	4620      	mov	r0, r4
 80141b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80141ba:	f7ff bf7c 	b.w	80140b6 <Ssd1306::Text(char const*, unsigned int)>
 80141be:	bd70      	pop	{r4, r5, r6, pc}

080141c0 <Ssd1306::ClearLine(unsigned char)>:
 80141c0:	b538      	push	{r3, r4, r5, lr}
 80141c2:	4605      	mov	r5, r0
 80141c4:	b1b9      	cbz	r1, 80141f6 <Ssd1306::ClearLine(unsigned char)+0x36>
 80141c6:	7943      	ldrb	r3, [r0, #5]
 80141c8:	428b      	cmp	r3, r1
 80141ca:	d314      	bcc.n	80141f6 <Ssd1306::ClearLine(unsigned char)+0x36>
 80141cc:	3901      	subs	r1, #1
 80141ce:	b2cc      	uxtb	r4, r1
 80141d0:	4622      	mov	r2, r4
 80141d2:	2100      	movs	r1, #0
 80141d4:	f7ff ffbc 	bl	8014150 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 80141d8:	f105 0008 	add.w	r0, r5, #8
 80141dc:	f7ff ff42 	bl	8014064 <HAL_I2C::Setup()>
 80141e0:	2181      	movs	r1, #129	; 0x81
 80141e2:	4805      	ldr	r0, [pc, #20]	; (80141f8 <Ssd1306::ClearLine(unsigned char)+0x38>)
 80141e4:	f001 fb04 	bl	80157f0 <gd32_i2c_write(char const*, unsigned int)>
 80141e8:	4622      	mov	r2, r4
 80141ea:	4628      	mov	r0, r5
 80141ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80141f0:	2100      	movs	r1, #0
 80141f2:	f7ff bfad 	b.w	8014150 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 80141f6:	bd38      	pop	{r3, r4, r5, pc}
 80141f8:	2000a8d8 	ldrdcs	sl, [r0], -r8

080141fc <Ssd1306::SetSleep(bool)>:
 80141fc:	b111      	cbz	r1, 8014204 <Ssd1306::SetSleep(bool)+0x8>
 80141fe:	21ae      	movs	r1, #174	; 0xae
 8014200:	f7ff bf96 	b.w	8014130 <Ssd1306::SendCommand(unsigned char)>
 8014204:	21af      	movs	r1, #175	; 0xaf
 8014206:	e7fb      	b.n	8014200 <Ssd1306::SetSleep(bool)+0x4>

08014208 <Ssd1306::SetContrast(unsigned char)>:
 8014208:	b538      	push	{r3, r4, r5, lr}
 801420a:	4604      	mov	r4, r0
 801420c:	460d      	mov	r5, r1
 801420e:	7181      	strb	r1, [r0, #6]
 8014210:	2181      	movs	r1, #129	; 0x81
 8014212:	f7ff ff8d 	bl	8014130 <Ssd1306::SendCommand(unsigned char)>
 8014216:	4629      	mov	r1, r5
 8014218:	4620      	mov	r0, r4
 801421a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801421e:	f7ff bf87 	b.w	8014130 <Ssd1306::SendCommand(unsigned char)>

08014222 <Ssd1306::SetFlipVertically(bool)>:
 8014222:	b510      	push	{r4, lr}
 8014224:	4604      	mov	r4, r0
 8014226:	71c1      	strb	r1, [r0, #7]
 8014228:	b141      	cbz	r1, 801423c <Ssd1306::SetFlipVertically(bool)+0x1a>
 801422a:	21c0      	movs	r1, #192	; 0xc0
 801422c:	f7ff ff80 	bl	8014130 <Ssd1306::SendCommand(unsigned char)>
 8014230:	21a0      	movs	r1, #160	; 0xa0
 8014232:	4620      	mov	r0, r4
 8014234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014238:	f7ff bf7a 	b.w	8014130 <Ssd1306::SendCommand(unsigned char)>
 801423c:	21c8      	movs	r1, #200	; 0xc8
 801423e:	f7ff ff77 	bl	8014130 <Ssd1306::SendCommand(unsigned char)>
 8014242:	21a1      	movs	r1, #161	; 0xa1
 8014244:	e7f5      	b.n	8014232 <Ssd1306::SetFlipVertically(bool)+0x10>
	...

08014248 <Ssd1306::CheckSH1106()>:
 8014248:	b570      	push	{r4, r5, r6, lr}
 801424a:	4604      	mov	r4, r0
 801424c:	b086      	sub	sp, #24
 801424e:	2100      	movs	r1, #0
 8014250:	f7ff ff6e 	bl	8014130 <Ssd1306::SendCommand(unsigned char)>
 8014254:	2190      	movs	r1, #144	; 0x90
 8014256:	4620      	mov	r0, r4
 8014258:	f7ff ff6a 	bl	8014130 <Ssd1306::SendCommand(unsigned char)>
 801425c:	21b0      	movs	r1, #176	; 0xb0
 801425e:	4620      	mov	r0, r4
 8014260:	f7ff ff66 	bl	8014130 <Ssd1306::SendCommand(unsigned char)>
 8014264:	4b22      	ldr	r3, [pc, #136]	; (80142f0 <Ssd1306::CheckSH1106()+0xa8>)
 8014266:	f104 0608 	add.w	r6, r4, #8
 801426a:	6818      	ldr	r0, [r3, #0]
 801426c:	791b      	ldrb	r3, [r3, #4]
 801426e:	ad02      	add	r5, sp, #8
 8014270:	9002      	str	r0, [sp, #8]
 8014272:	4630      	mov	r0, r6
 8014274:	712b      	strb	r3, [r5, #4]
 8014276:	f7ff fef5 	bl	8014064 <HAL_I2C::Setup()>
 801427a:	2105      	movs	r1, #5
 801427c:	4628      	mov	r0, r5
 801427e:	f001 fab7 	bl	80157f0 <gd32_i2c_write(char const*, unsigned int)>
 8014282:	2100      	movs	r1, #0
 8014284:	4620      	mov	r0, r4
 8014286:	f7ff ff53 	bl	8014130 <Ssd1306::SendCommand(unsigned char)>
 801428a:	2190      	movs	r1, #144	; 0x90
 801428c:	4620      	mov	r0, r4
 801428e:	f7ff ff4f 	bl	8014130 <Ssd1306::SendCommand(unsigned char)>
 8014292:	21b0      	movs	r1, #176	; 0xb0
 8014294:	4620      	mov	r0, r4
 8014296:	f7ff ff4b 	bl	8014130 <Ssd1306::SendCommand(unsigned char)>
 801429a:	2300      	movs	r3, #0
 801429c:	9304      	str	r3, [sp, #16]
 801429e:	f88d 3014 	strb.w	r3, [sp, #20]
 80142a2:	2340      	movs	r3, #64	; 0x40
 80142a4:	4630      	mov	r0, r6
 80142a6:	f88d 3007 	strb.w	r3, [sp, #7]
 80142aa:	f7ff fedb 	bl	8014064 <HAL_I2C::Setup()>
 80142ae:	2101      	movs	r1, #1
 80142b0:	f10d 0007 	add.w	r0, sp, #7
 80142b4:	f001 fa9c 	bl	80157f0 <gd32_i2c_write(char const*, unsigned int)>
 80142b8:	4630      	mov	r0, r6
 80142ba:	f7ff fed3 	bl	8014064 <HAL_I2C::Setup()>
 80142be:	2105      	movs	r1, #5
 80142c0:	a804      	add	r0, sp, #16
 80142c2:	f001 fafb 	bl	80158bc <gd32_i2c_read(char*, unsigned int)>
 80142c6:	2201      	movs	r2, #1
 80142c8:	5cab      	ldrb	r3, [r5, r2]
 80142ca:	a904      	add	r1, sp, #16
 80142cc:	3201      	adds	r2, #1
 80142ce:	4411      	add	r1, r2
 80142d0:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 80142d4:	428b      	cmp	r3, r1
 80142d6:	d006      	beq.n	80142e6 <Ssd1306::CheckSH1106()+0x9e>
 80142d8:	1a5b      	subs	r3, r3, r1
 80142da:	fab3 f383 	clz	r3, r3
 80142de:	095b      	lsrs	r3, r3, #5
 80142e0:	7463      	strb	r3, [r4, #17]
 80142e2:	b006      	add	sp, #24
 80142e4:	bd70      	pop	{r4, r5, r6, pc}
 80142e6:	2a05      	cmp	r2, #5
 80142e8:	d1ee      	bne.n	80142c8 <Ssd1306::CheckSH1106()+0x80>
 80142ea:	2300      	movs	r3, #0
 80142ec:	e7f5      	b.n	80142da <Ssd1306::CheckSH1106()+0x92>
 80142ee:	bf00      	nop
 80142f0:	08018a9e 	stmdaeq	r1, {r1, r2, r3, r4, r7, r9, fp, pc}

080142f4 <Ssd1306::Cls()>:
 80142f4:	7c43      	ldrb	r3, [r0, #17]
 80142f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	bf0c      	ite	eq
 80142fe:	2500      	moveq	r5, #0
 8014300:	2504      	movne	r5, #4
 8014302:	4604      	mov	r4, r0
 8014304:	2600      	movs	r6, #0
 8014306:	f1a5 077f 	sub.w	r7, r5, #127	; 0x7f
 801430a:	f045 0810 	orr.w	r8, r5, #16
 801430e:	b2ff      	uxtb	r7, r7
 8014310:	6963      	ldr	r3, [r4, #20]
 8014312:	4629      	mov	r1, r5
 8014314:	42b3      	cmp	r3, r6
 8014316:	4620      	mov	r0, r4
 8014318:	d91b      	bls.n	8014352 <Ssd1306::Cls()+0x5e>
 801431a:	f7ff ff09 	bl	8014130 <Ssd1306::SendCommand(unsigned char)>
 801431e:	4641      	mov	r1, r8
 8014320:	4620      	mov	r0, r4
 8014322:	f7ff ff05 	bl	8014130 <Ssd1306::SendCommand(unsigned char)>
 8014326:	f066 014f 	orn	r1, r6, #79	; 0x4f
 801432a:	4620      	mov	r0, r4
 801432c:	b2c9      	uxtb	r1, r1
 801432e:	f7ff feff 	bl	8014130 <Ssd1306::SendCommand(unsigned char)>
 8014332:	7c23      	ldrb	r3, [r4, #16]
 8014334:	b123      	cbz	r3, 8014340 <Ssd1306::Cls()+0x4c>
 8014336:	3b01      	subs	r3, #1
 8014338:	2b01      	cmp	r3, #1
 801433a:	d901      	bls.n	8014340 <Ssd1306::Cls()+0x4c>
 801433c:	3601      	adds	r6, #1
 801433e:	e7e7      	b.n	8014310 <Ssd1306::Cls()+0x1c>
 8014340:	f104 0008 	add.w	r0, r4, #8
 8014344:	f7ff fe8e 	bl	8014064 <HAL_I2C::Setup()>
 8014348:	4639      	mov	r1, r7
 801434a:	4808      	ldr	r0, [pc, #32]	; (801436c <Ssd1306::Cls()+0x78>)
 801434c:	f001 fa50 	bl	80157f0 <gd32_i2c_write(char const*, unsigned int)>
 8014350:	e7f4      	b.n	801433c <Ssd1306::Cls()+0x48>
 8014352:	f7ff feed 	bl	8014130 <Ssd1306::SendCommand(unsigned char)>
 8014356:	4641      	mov	r1, r8
 8014358:	4620      	mov	r0, r4
 801435a:	f7ff fee9 	bl	8014130 <Ssd1306::SendCommand(unsigned char)>
 801435e:	4620      	mov	r0, r4
 8014360:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014364:	21b0      	movs	r1, #176	; 0xb0
 8014366:	f7ff bee3 	b.w	8014130 <Ssd1306::SendCommand(unsigned char)>
 801436a:	bf00      	nop
 801436c:	2000a8d8 	ldrdcs	sl, [r0], -r8

08014370 <Ssd1306::Start()>:
 8014370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014372:	7a04      	ldrb	r4, [r0, #8]
 8014374:	68c6      	ldr	r6, [r0, #12]
 8014376:	4605      	mov	r5, r0
 8014378:	4620      	mov	r0, r4
 801437a:	f001 fa33 	bl	80157e4 <gd32_i2c_set_address(unsigned char)>
 801437e:	4630      	mov	r0, r6
 8014380:	f001 fa28 	bl	80157d4 <gd32_i2c_set_baudrate(unsigned int)>
 8014384:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8014388:	2b07      	cmp	r3, #7
 801438a:	d902      	bls.n	8014392 <Ssd1306::Start()+0x22>
 801438c:	3c50      	subs	r4, #80	; 0x50
 801438e:	2c0f      	cmp	r4, #15
 8014390:	d80f      	bhi.n	80143b2 <Ssd1306::Start()+0x42>
 8014392:	2101      	movs	r1, #1
 8014394:	f10d 0007 	add.w	r0, sp, #7
 8014398:	f001 fa90 	bl	80158bc <gd32_i2c_read(char*, unsigned int)>
 801439c:	fab0 f480 	clz	r4, r0
 80143a0:	0964      	lsrs	r4, r4, #5
 80143a2:	b35c      	cbz	r4, 80143fc <Ssd1306::Start()+0x8c>
 80143a4:	7c2e      	ldrb	r6, [r5, #16]
 80143a6:	b14e      	cbz	r6, 80143bc <Ssd1306::Start()+0x4c>
 80143a8:	3e01      	subs	r6, #1
 80143aa:	2e01      	cmp	r6, #1
 80143ac:	d929      	bls.n	8014402 <Ssd1306::Start()+0x92>
 80143ae:	2400      	movs	r4, #0
 80143b0:	e024      	b.n	80143fc <Ssd1306::Start()+0x8c>
 80143b2:	2100      	movs	r1, #0
 80143b4:	4608      	mov	r0, r1
 80143b6:	f001 fa1b 	bl	80157f0 <gd32_i2c_write(char const*, unsigned int)>
 80143ba:	e7ef      	b.n	801439c <Ssd1306::Start()+0x2c>
 80143bc:	4f16      	ldr	r7, [pc, #88]	; (8014418 <Ssd1306::Start()+0xa8>)
 80143be:	4628      	mov	r0, r5
 80143c0:	f817 1b01 	ldrb.w	r1, [r7], #1
 80143c4:	3601      	adds	r6, #1
 80143c6:	f7ff feb3 	bl	8014130 <Ssd1306::SendCommand(unsigned char)>
 80143ca:	2e18      	cmp	r6, #24
 80143cc:	d1f7      	bne.n	80143be <Ssd1306::Start()+0x4e>
 80143ce:	2300      	movs	r3, #0
 80143d0:	4a12      	ldr	r2, [pc, #72]	; (801441c <Ssd1306::Start()+0xac>)
 80143d2:	4618      	mov	r0, r3
 80143d4:	4611      	mov	r1, r2
 80143d6:	3301      	adds	r3, #1
 80143d8:	2b86      	cmp	r3, #134	; 0x86
 80143da:	f802 0b01 	strb.w	r0, [r2], #1
 80143de:	d1fa      	bne.n	80143d6 <Ssd1306::Start()+0x66>
 80143e0:	2340      	movs	r3, #64	; 0x40
 80143e2:	4628      	mov	r0, r5
 80143e4:	700b      	strb	r3, [r1, #0]
 80143e6:	f7ff ff2f 	bl	8014248 <Ssd1306::CheckSH1106()>
 80143ea:	4628      	mov	r0, r5
 80143ec:	f7ff ff82 	bl	80142f4 <Ssd1306::Cls()>
 80143f0:	21af      	movs	r1, #175	; 0xaf
 80143f2:	4628      	mov	r0, r5
 80143f4:	f7ff fe9c 	bl	8014130 <Ssd1306::SendCommand(unsigned char)>
 80143f8:	2301      	movs	r3, #1
 80143fa:	71eb      	strb	r3, [r5, #7]
 80143fc:	4620      	mov	r0, r4
 80143fe:	b003      	add	sp, #12
 8014400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014402:	2600      	movs	r6, #0
 8014404:	4f06      	ldr	r7, [pc, #24]	; (8014420 <Ssd1306::Start()+0xb0>)
 8014406:	4628      	mov	r0, r5
 8014408:	f817 1b01 	ldrb.w	r1, [r7], #1
 801440c:	3601      	adds	r6, #1
 801440e:	f7ff fe8f 	bl	8014130 <Ssd1306::SendCommand(unsigned char)>
 8014412:	2e18      	cmp	r6, #24
 8014414:	d1f7      	bne.n	8014406 <Ssd1306::Start()+0x96>
 8014416:	e7da      	b.n	80143ce <Ssd1306::Start()+0x5e>
 8014418:	08018d5c 	stmdaeq	r1, {r2, r3, r4, r6, r8, sl, fp, pc}
 801441c:	2000a8d8 	ldrdcs	sl, [r0], -r8
 8014420:	08018d44 	stmdaeq	r1, {r2, r6, r8, sl, fp, pc}

08014424 <console_putc>:
 8014424:	f000 bb9c 	b.w	8014b60 <uart0_putc>

08014428 <console_puts>:
 8014428:	f000 bbba 	b.w	8014ba0 <uart0_puts>

0801442c <console_set_fg_color>:
 801442c:	2807      	cmp	r0, #7
 801442e:	d810      	bhi.n	8014452 <console_set_fg_color+0x26>
 8014430:	e8df f000 	tbb	[pc, r0]
 8014434:	0b090704 	bleq	825604c <__exidx_end+0x23d19c>
 8014438:	0d0f0f0f 	stceq	15, cr0, [pc, #-60]	; 8014404 <Ssd1306::Start()+0x94>
 801443c:	4806      	ldr	r0, [pc, #24]	; (8014458 <console_set_fg_color+0x2c>)
 801443e:	f000 bbaf 	b.w	8014ba0 <uart0_puts>
 8014442:	4806      	ldr	r0, [pc, #24]	; (801445c <console_set_fg_color+0x30>)
 8014444:	e7fb      	b.n	801443e <console_set_fg_color+0x12>
 8014446:	4806      	ldr	r0, [pc, #24]	; (8014460 <console_set_fg_color+0x34>)
 8014448:	e7f9      	b.n	801443e <console_set_fg_color+0x12>
 801444a:	4806      	ldr	r0, [pc, #24]	; (8014464 <console_set_fg_color+0x38>)
 801444c:	e7f7      	b.n	801443e <console_set_fg_color+0x12>
 801444e:	4806      	ldr	r0, [pc, #24]	; (8014468 <console_set_fg_color+0x3c>)
 8014450:	e7f5      	b.n	801443e <console_set_fg_color+0x12>
 8014452:	4806      	ldr	r0, [pc, #24]	; (801446c <console_set_fg_color+0x40>)
 8014454:	e7f3      	b.n	801443e <console_set_fg_color+0x12>
 8014456:	bf00      	nop
 8014458:	08018dba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r8, sl, fp, pc}
 801445c:	08018dc0 	stmdaeq	r1, {r6, r7, r8, sl, fp, pc}
 8014460:	08018dc6 	stmdaeq	r1, {r1, r2, r6, r7, r8, sl, fp, pc}
 8014464:	08018dcc 	stmdaeq	r1, {r2, r3, r6, r7, r8, sl, fp, pc}
 8014468:	08016abd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r9, fp, sp, lr}
 801446c:	08018dd2 	stmdaeq	r1, {r1, r4, r6, r7, r8, sl, fp, pc}

08014470 <console_error>:
 8014470:	b510      	push	{r4, lr}
 8014472:	4604      	mov	r4, r0
 8014474:	4805      	ldr	r0, [pc, #20]	; (801448c <console_error+0x1c>)
 8014476:	f000 fb93 	bl	8014ba0 <uart0_puts>
 801447a:	4620      	mov	r0, r4
 801447c:	f000 fb90 	bl	8014ba0 <uart0_puts>
 8014480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014484:	4802      	ldr	r0, [pc, #8]	; (8014490 <console_error+0x20>)
 8014486:	f000 bb8b 	b.w	8014ba0 <uart0_puts>
 801448a:	bf00      	nop
 801448c:	08018dc0 	stmdaeq	r1, {r6, r7, r8, sl, fp, pc}
 8014490:	08016abd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r9, fp, sp, lr}

08014494 <console_status>:
 8014494:	b510      	push	{r4, lr}
 8014496:	460c      	mov	r4, r1
 8014498:	b280      	uxth	r0, r0
 801449a:	f7ff ffc7 	bl	801442c <console_set_fg_color>
 801449e:	4807      	ldr	r0, [pc, #28]	; (80144bc <console_status+0x28>)
 80144a0:	f000 fb7e 	bl	8014ba0 <uart0_puts>
 80144a4:	4620      	mov	r0, r4
 80144a6:	f000 fb7b 	bl	8014ba0 <uart0_puts>
 80144aa:	200a      	movs	r0, #10
 80144ac:	f000 fb58 	bl	8014b60 <uart0_putc>
 80144b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80144b4:	4802      	ldr	r0, [pc, #8]	; (80144c0 <console_status+0x2c>)
 80144b6:	f000 bb73 	b.w	8014ba0 <uart0_puts>
 80144ba:	bf00      	nop
 80144bc:	08018db4 	stmdaeq	r1, {r2, r4, r5, r7, r8, sl, fp, pc}
 80144c0:	08016abd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r9, fp, sp, lr}

080144c4 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
 80144c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144c8:	4617      	mov	r7, r2
 80144ca:	461e      	mov	r6, r3
 80144cc:	4d14      	ldr	r5, [pc, #80]	; (8014520 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>)
 80144ce:	4b15      	ldr	r3, [pc, #84]	; (8014524 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x60>)
 80144d0:	b086      	sub	sp, #24
 80144d2:	6018      	str	r0, [r3, #0]
 80144d4:	4604      	mov	r4, r0
 80144d6:	f105 0803 	add.w	r8, r5, #3
 80144da:	2203      	movs	r2, #3
 80144dc:	4628      	mov	r0, r5
 80144de:	f000 fa00 	bl	80148e2 <memmove>
 80144e2:	4639      	mov	r1, r7
 80144e4:	220b      	movs	r2, #11
 80144e6:	4640      	mov	r0, r8
 80144e8:	f000 f9fb 	bl	80148e2 <memmove>
 80144ec:	f105 030e 	add.w	r3, r5, #14
 80144f0:	4631      	mov	r1, r6
 80144f2:	2208      	movs	r2, #8
 80144f4:	4618      	mov	r0, r3
 80144f6:	f000 f9f4 	bl	80148e2 <memmove>
 80144fa:	2308      	movs	r3, #8
 80144fc:	e9cd 8303 	strd	r8, r3, [sp, #12]
 8014500:	230b      	movs	r3, #11
 8014502:	9302      	str	r3, [sp, #8]
 8014504:	4b08      	ldr	r3, [pc, #32]	; (8014528 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x64>)
 8014506:	9005      	str	r0, [sp, #20]
 8014508:	e9cd 5300 	strd	r5, r3, [sp]
 801450c:	213f      	movs	r1, #63	; 0x3f
 801450e:	2303      	movs	r3, #3
 8014510:	4a06      	ldr	r2, [pc, #24]	; (801452c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x68>)
 8014512:	4807      	ldr	r0, [pc, #28]	; (8014530 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x6c>)
 8014514:	f7f5 f8d2 	bl	80096bc <snprintf>
 8014518:	4620      	mov	r0, r4
 801451a:	b006      	add	sp, #24
 801451c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014520:	2000a964 	andcs	sl, r0, r4, ror #18
 8014524:	2000a9bc 			; <UNDEFINED> instruction: 0x2000a9bc
 8014528:	08016c05 	stmdaeq	r1, {r0, r2, sl, fp, sp, lr}
 801452c:	08018dd8 	stmdaeq	r1, {r3, r4, r6, r7, r8, sl, fp, pc}
 8014530:	2000a97a 	andcs	sl, r0, sl, ror r9

08014534 <FirmwareVersion::Print(char const*)>:
 8014534:	b510      	push	{r4, lr}
 8014536:	460c      	mov	r4, r1
 8014538:	4804      	ldr	r0, [pc, #16]	; (801454c <FirmwareVersion::Print(char const*)+0x18>)
 801453a:	f000 fa0e 	bl	801495a <puts>
 801453e:	b124      	cbz	r4, 801454a <FirmwareVersion::Print(char const*)+0x16>
 8014540:	4620      	mov	r0, r4
 8014542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014546:	f000 ba08 	b.w	801495a <puts>
 801454a:	bd10      	pop	{r4, pc}
 801454c:	2000a97a 	andcs	sl, r0, sl, ror r9

08014550 <LedBlink::LedBlink()>:
 8014550:	b538      	push	{r3, r4, r5, lr}
 8014552:	2205      	movs	r2, #5
 8014554:	2300      	movs	r3, #0
 8014556:	e9c0 3200 	strd	r3, r2, [r0]
 801455a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801455e:	6083      	str	r3, [r0, #8]
 8014560:	e9c0 2303 	strd	r2, r3, [r0, #12]
 8014564:	6143      	str	r3, [r0, #20]
 8014566:	4b09      	ldr	r3, [pc, #36]	; (801458c <LedBlink::LedBlink()+0x3c>)
 8014568:	4d09      	ldr	r5, [pc, #36]	; (8014590 <LedBlink::LedBlink()+0x40>)
 801456a:	4604      	mov	r4, r0
 801456c:	6018      	str	r0, [r3, #0]
 801456e:	f240 6004 	movw	r0, #1540	; 0x604
 8014572:	f000 fd1f 	bl	8014fb4 <rcu_periph_clock_enable>
 8014576:	4628      	mov	r0, r5
 8014578:	2301      	movs	r3, #1
 801457a:	2203      	movs	r2, #3
 801457c:	2110      	movs	r1, #16
 801457e:	f000 fc81 	bl	8014e84 <gpio_init>
 8014582:	2301      	movs	r3, #1
 8014584:	4620      	mov	r0, r4
 8014586:	616b      	str	r3, [r5, #20]
 8014588:	bd38      	pop	{r3, r4, r5, pc}
 801458a:	bf00      	nop
 801458c:	2000a9c0 	andcs	sl, r0, r0, asr #19
 8014590:	40011000 	andmi	r1, r1, r0

08014594 <LedBlink::SetMode(ledblink::Mode)>:
 8014594:	6843      	ldr	r3, [r0, #4]
 8014596:	428b      	cmp	r3, r1
 8014598:	d02f      	beq.n	80145fa <LedBlink::SetMode(ledblink::Mode)+0x66>
 801459a:	6041      	str	r1, [r0, #4]
 801459c:	2904      	cmp	r1, #4
 801459e:	d822      	bhi.n	80145e6 <LedBlink::SetMode(ledblink::Mode)+0x52>
 80145a0:	e8df f001 	tbb	[pc, r1]
 80145a4:	18120321 	ldmdane	r2, {r0, r5, r8, r9}
 80145a8:	23ff001d 	mvnscs	r0, #29
 80145ac:	6003      	str	r3, [r0, #0]
 80145ae:	2300      	movs	r3, #0
 80145b0:	2201      	movs	r2, #1
 80145b2:	60c3      	str	r3, [r0, #12]
 80145b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80145b8:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80145bc:	611a      	str	r2, [r3, #16]
 80145be:	6880      	ldr	r0, [r0, #8]
 80145c0:	b1d8      	cbz	r0, 80145fa <LedBlink::SetMode(ledblink::Mode)+0x66>
 80145c2:	6803      	ldr	r3, [r0, #0]
 80145c4:	689b      	ldr	r3, [r3, #8]
 80145c6:	4718      	bx	r3
 80145c8:	2301      	movs	r3, #1
 80145ca:	6003      	str	r3, [r0, #0]
 80145cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80145d0:	60c3      	str	r3, [r0, #12]
 80145d2:	e7f4      	b.n	80145be <LedBlink::SetMode(ledblink::Mode)+0x2a>
 80145d4:	2303      	movs	r3, #3
 80145d6:	6003      	str	r3, [r0, #0]
 80145d8:	f240 134d 	movw	r3, #333	; 0x14d
 80145dc:	e7f8      	b.n	80145d0 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 80145de:	2305      	movs	r3, #5
 80145e0:	6003      	str	r3, [r0, #0]
 80145e2:	23c8      	movs	r3, #200	; 0xc8
 80145e4:	e7f4      	b.n	80145d0 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 80145e6:	2300      	movs	r3, #0
 80145e8:	2201      	movs	r2, #1
 80145ea:	6003      	str	r3, [r0, #0]
 80145ec:	60c3      	str	r3, [r0, #12]
 80145ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80145f2:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80145f6:	615a      	str	r2, [r3, #20]
 80145f8:	e7e1      	b.n	80145be <LedBlink::SetMode(ledblink::Mode)+0x2a>
 80145fa:	4770      	bx	lr

080145fc <Hardware::Hardware()>:
 80145fc:	b570      	push	{r4, r5, r6, lr}
 80145fe:	2400      	movs	r4, #0
 8014600:	4b26      	ldr	r3, [pc, #152]	; (801469c <Hardware::Hardware()+0xa0>)
 8014602:	b090      	sub	sp, #64	; 0x40
 8014604:	6004      	str	r4, [r0, #0]
 8014606:	7104      	strb	r4, [r0, #4]
 8014608:	4e25      	ldr	r6, [pc, #148]	; (80146a0 <Hardware::Hardware()+0xa4>)
 801460a:	6018      	str	r0, [r3, #0]
 801460c:	4605      	mov	r5, r0
 801460e:	f7f2 ff7b 	bl	8007508 <console_init>
 8014612:	f000 fad5 	bl	8014bc0 <systick_config>
 8014616:	f001 fb81 	bl	8015d1c <udelay_init()>
 801461a:	f001 fb7d 	bl	8015d18 <micros_init()>
 801461e:	f240 7004 	movw	r0, #1796	; 0x704
 8014622:	f000 fcc7 	bl	8014fb4 <rcu_periph_clock_enable>
 8014626:	4630      	mov	r0, r6
 8014628:	f000 fe20 	bl	801526c <timer_deinit>
 801462c:	236b      	movs	r3, #107	; 0x6b
 801462e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014636:	a903      	add	r1, sp, #12
 8014638:	4630      	mov	r0, r6
 801463a:	9305      	str	r3, [sp, #20]
 801463c:	f000 fe78 	bl	8015330 <timer_init>
 8014640:	4630      	mov	r0, r6
 8014642:	f000 fecd 	bl	80153e0 <timer_enable>
 8014646:	f001 f837 	bl	80156b8 <gd32_adc_init()>
 801464a:	2217      	movs	r2, #23
 801464c:	2301      	movs	r3, #1
 801464e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014652:	237a      	movs	r3, #122	; 0x7a
 8014654:	a807      	add	r0, sp, #28
 8014656:	930c      	str	r3, [sp, #48]	; 0x30
 8014658:	e9cd 4408 	strd	r4, r4, [sp, #32]
 801465c:	9407      	str	r4, [sp, #28]
 801465e:	940f      	str	r4, [sp, #60]	; 0x3c
 8014660:	f000 f9d4 	bl	8014a0c <mktime>
 8014664:	4621      	mov	r1, r4
 8014666:	e9cd 0401 	strd	r0, r4, [sp, #4]
 801466a:	a801      	add	r0, sp, #4
 801466c:	f000 fa44 	bl	8014af8 <settimeofday>
 8014670:	f240 701b 	movw	r0, #1819	; 0x71b
 8014674:	f000 fc9e 	bl	8014fb4 <rcu_periph_clock_enable>
 8014678:	f240 701c 	movw	r0, #1820	; 0x71c
 801467c:	f000 fc9a 	bl	8014fb4 <rcu_periph_clock_enable>
 8014680:	f000 fc90 	bl	8014fa4 <pmu_backup_write_enable>
 8014684:	f000 fb3a 	bl	8014cfc <bkp_deinit>
 8014688:	4621      	mov	r1, r4
 801468a:	2002      	movs	r0, #2
 801468c:	f000 fb3e 	bl	8014d0c <bkp_data_write>
 8014690:	f001 f86c 	bl	801576c <gd32_i2c_begin()>
 8014694:	4628      	mov	r0, r5
 8014696:	b010      	add	sp, #64	; 0x40
 8014698:	bd70      	pop	{r4, r5, r6, pc}
 801469a:	bf00      	nop
 801469c:	2000a9c4 	andcs	sl, r0, r4, asr #19
 80146a0:	40001000 	andmi	r1, r0, r0

080146a4 <Hardware::GetUuid(unsigned char*)>:
 80146a4:	4a0c      	ldr	r2, [pc, #48]	; (80146d8 <Hardware::GetUuid(unsigned char*)+0x34>)
 80146a6:	b084      	sub	sp, #16
 80146a8:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 80146ac:	9300      	str	r3, [sp, #0]
 80146ae:	f8d2 07ec 	ldr.w	r0, [r2, #2028]	; 0x7ec
 80146b2:	9001      	str	r0, [sp, #4]
 80146b4:	f8d2 27f0 	ldr.w	r2, [r2, #2032]	; 0x7f0
 80146b8:	4403      	add	r3, r0
 80146ba:	4413      	add	r3, r2
 80146bc:	9202      	str	r2, [sp, #8]
 80146be:	466a      	mov	r2, sp
 80146c0:	9303      	str	r3, [sp, #12]
 80146c2:	1e4b      	subs	r3, r1, #1
 80146c4:	310f      	adds	r1, #15
 80146c6:	428b      	cmp	r3, r1
 80146c8:	d004      	beq.n	80146d4 <Hardware::GetUuid(unsigned char*)+0x30>
 80146ca:	f812 0b01 	ldrb.w	r0, [r2], #1
 80146ce:	f803 0f01 	strb.w	r0, [r3, #1]!
 80146d2:	e7f8      	b.n	80146c6 <Hardware::GetUuid(unsigned char*)+0x22>
 80146d4:	b004      	add	sp, #16
 80146d6:	4770      	bx	lr
 80146d8:	1ffff000 	svcne	0x00fff000

080146dc <Hardware::SetTime(tm const*)>:
 80146dc:	2000      	movs	r0, #0
 80146de:	4770      	bx	lr

080146e0 <Hardware::Reboot()>:
 80146e0:	b508      	push	{r3, lr}
 80146e2:	6803      	ldr	r3, [r0, #0]
 80146e4:	4604      	mov	r4, r0
 80146e6:	b153      	cbz	r3, 80146fe <Hardware::Reboot()+0x1e>
 80146e8:	2300      	movs	r3, #0
 80146ea:	2104      	movs	r1, #4
 80146ec:	7103      	strb	r3, [r0, #4]
 80146ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80146f2:	f000 fb9d 	bl	8014e30 <fwdgt_config>
 80146f6:	6820      	ldr	r0, [r4, #0]
 80146f8:	6803      	ldr	r3, [r0, #0]
 80146fa:	689b      	ldr	r3, [r3, #8]
 80146fc:	4798      	blx	r3
 80146fe:	2102      	movs	r1, #2
 8014700:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014704:	f000 fb94 	bl	8014e30 <fwdgt_config>
 8014708:	2801      	cmp	r0, #1
 801470a:	bf0c      	ite	eq
 801470c:	2301      	moveq	r3, #1
 801470e:	2300      	movne	r3, #0
 8014710:	7123      	strb	r3, [r4, #4]
 8014712:	d101      	bne.n	8014718 <Hardware::Reboot()+0x38>
 8014714:	f000 fb7c 	bl	8014e10 <fwdgt_enable>
 8014718:	2208      	movs	r2, #8
 801471a:	4b0d      	ldr	r3, [pc, #52]	; (8014750 <Hardware::Reboot()+0x70>)
 801471c:	2501      	movs	r5, #1
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	480c      	ldr	r0, [pc, #48]	; (8014754 <Hardware::Reboot()+0x74>)
 8014722:	601a      	str	r2, [r3, #0]
 8014724:	227d      	movs	r2, #125	; 0x7d
 8014726:	490c      	ldr	r1, [pc, #48]	; (8014758 <Hardware::Reboot()+0x78>)
 8014728:	60da      	str	r2, [r3, #12]
 801472a:	68dc      	ldr	r4, [r3, #12]
 801472c:	b904      	cbnz	r4, 8014730 <Hardware::Reboot()+0x50>
 801472e:	e7fe      	b.n	801472e <Hardware::Reboot()+0x4e>
 8014730:	6802      	ldr	r2, [r0, #0]
 8014732:	695e      	ldr	r6, [r3, #20]
 8014734:	1b92      	subs	r2, r2, r6
 8014736:	4294      	cmp	r4, r2
 8014738:	d8f8      	bhi.n	801472c <Hardware::Reboot()+0x4c>
 801473a:	6802      	ldr	r2, [r0, #0]
 801473c:	615a      	str	r2, [r3, #20]
 801473e:	691a      	ldr	r2, [r3, #16]
 8014740:	2a01      	cmp	r2, #1
 8014742:	f082 0401 	eor.w	r4, r2, #1
 8014746:	611c      	str	r4, [r3, #16]
 8014748:	bf14      	ite	ne
 801474a:	610d      	strne	r5, [r1, #16]
 801474c:	614a      	streq	r2, [r1, #20]
 801474e:	e7ec      	b.n	801472a <Hardware::Reboot()+0x4a>
 8014750:	2000a9c0 	andcs	sl, r0, r0, asr #19
 8014754:	2000a9dc 	ldrdcs	sl, [r0], -ip
 8014758:	40011000 	andmi	r1, r1, r0

0801475c <operator delete(void*)>:
 801475c:	f000 b890 	b.w	8014880 <free>

08014760 <operator delete[](void*)>:
 8014760:	f000 b88e 	b.w	8014880 <free>

08014764 <operator new(unsigned int)>:
 8014764:	f000 b842 	b.w	80147ec <malloc>

08014768 <operator new[](unsigned int)>:
 8014768:	f000 b840 	b.w	80147ec <malloc>

0801476c <inet_aton>:
 801476c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801476e:	f04f 0c0a 	mov.w	ip, #10
 8014772:	2500      	movs	r5, #0
 8014774:	ae01      	add	r6, sp, #4
 8014776:	4603      	mov	r3, r0
 8014778:	2200      	movs	r2, #0
 801477a:	1d07      	adds	r7, r0, #4
 801477c:	e007      	b.n	801478e <inet_aton+0x22>
 801477e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8014782:	2b09      	cmp	r3, #9
 8014784:	d820      	bhi.n	80147c8 <inet_aton+0x5c>
 8014786:	4603      	mov	r3, r0
 8014788:	fb0c 4202 	mla	r2, ip, r2, r4
 801478c:	3a30      	subs	r2, #48	; 0x30
 801478e:	4618      	mov	r0, r3
 8014790:	f810 4b01 	ldrb.w	r4, [r0], #1
 8014794:	2c2e      	cmp	r4, #46	; 0x2e
 8014796:	d111      	bne.n	80147bc <inet_aton+0x50>
 8014798:	3501      	adds	r5, #1
 801479a:	2d03      	cmp	r5, #3
 801479c:	f806 2b01 	strb.w	r2, [r6], #1
 80147a0:	d1e9      	bne.n	8014776 <inet_aton+0xa>
 80147a2:	2200      	movs	r2, #0
 80147a4:	250a      	movs	r5, #10
 80147a6:	1d1c      	adds	r4, r3, #4
 80147a8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80147ac:	f010 0fdf 	tst.w	r0, #223	; 0xdf
 80147b0:	d10d      	bne.n	80147ce <inet_aton+0x62>
 80147b2:	f88d 2007 	strb.w	r2, [sp, #7]
 80147b6:	b9b1      	cbnz	r1, 80147e6 <inet_aton+0x7a>
 80147b8:	2001      	movs	r0, #1
 80147ba:	e006      	b.n	80147ca <inet_aton+0x5e>
 80147bc:	2c00      	cmp	r4, #0
 80147be:	d0eb      	beq.n	8014798 <inet_aton+0x2c>
 80147c0:	2c0a      	cmp	r4, #10
 80147c2:	d0e9      	beq.n	8014798 <inet_aton+0x2c>
 80147c4:	42b8      	cmp	r0, r7
 80147c6:	d1da      	bne.n	801477e <inet_aton+0x12>
 80147c8:	2000      	movs	r0, #0
 80147ca:	b003      	add	sp, #12
 80147cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147ce:	280a      	cmp	r0, #10
 80147d0:	d0ef      	beq.n	80147b2 <inet_aton+0x46>
 80147d2:	42a3      	cmp	r3, r4
 80147d4:	d0f8      	beq.n	80147c8 <inet_aton+0x5c>
 80147d6:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
 80147da:	2e09      	cmp	r6, #9
 80147dc:	d8f4      	bhi.n	80147c8 <inet_aton+0x5c>
 80147de:	fb05 0202 	mla	r2, r5, r2, r0
 80147e2:	3a30      	subs	r2, #48	; 0x30
 80147e4:	e7e0      	b.n	80147a8 <inet_aton+0x3c>
 80147e6:	9b01      	ldr	r3, [sp, #4]
 80147e8:	600b      	str	r3, [r1, #0]
 80147ea:	e7e5      	b.n	80147b8 <inet_aton+0x4c>

080147ec <malloc>:
 80147ec:	b538      	push	{r3, r4, r5, lr}
 80147ee:	4604      	mov	r4, r0
 80147f0:	4601      	mov	r1, r0
 80147f2:	481c      	ldr	r0, [pc, #112]	; (8014864 <malloc+0x78>)
 80147f4:	f7f4 ff3a 	bl	800966c <printf>
 80147f8:	b17c      	cbz	r4, 801481a <malloc+0x2e>
 80147fa:	4b1b      	ldr	r3, [pc, #108]	; (8014868 <malloc+0x7c>)
 80147fc:	6818      	ldr	r0, [r3, #0]
 80147fe:	b978      	cbnz	r0, 8014820 <malloc+0x34>
 8014800:	4a1a      	ldr	r2, [pc, #104]	; (801486c <malloc+0x80>)
 8014802:	f104 031b 	add.w	r3, r4, #27
 8014806:	6811      	ldr	r1, [r2, #0]
 8014808:	4819      	ldr	r0, [pc, #100]	; (8014870 <malloc+0x84>)
 801480a:	f023 030f 	bic.w	r3, r3, #15
 801480e:	440b      	add	r3, r1
 8014810:	4283      	cmp	r3, r0
 8014812:	d921      	bls.n	8014858 <malloc+0x6c>
 8014814:	4817      	ldr	r0, [pc, #92]	; (8014874 <malloc+0x88>)
 8014816:	f7f4 ff29 	bl	800966c <printf>
 801481a:	2500      	movs	r5, #0
 801481c:	4628      	mov	r0, r5
 801481e:	bd38      	pop	{r3, r4, r5, pc}
 8014820:	4284      	cmp	r4, r0
 8014822:	d80a      	bhi.n	801483a <malloc+0x4e>
 8014824:	685a      	ldr	r2, [r3, #4]
 8014826:	6899      	ldr	r1, [r3, #8]
 8014828:	3201      	adds	r2, #1
 801482a:	428a      	cmp	r2, r1
 801482c:	605a      	str	r2, [r3, #4]
 801482e:	d900      	bls.n	8014832 <malloc+0x46>
 8014830:	609a      	str	r2, [r3, #8]
 8014832:	68d9      	ldr	r1, [r3, #12]
 8014834:	b919      	cbnz	r1, 801483e <malloc+0x52>
 8014836:	4604      	mov	r4, r0
 8014838:	e7e2      	b.n	8014800 <malloc+0x14>
 801483a:	3310      	adds	r3, #16
 801483c:	e7de      	b.n	80147fc <malloc+0x10>
 801483e:	4604      	mov	r4, r0
 8014840:	688a      	ldr	r2, [r1, #8]
 8014842:	60da      	str	r2, [r3, #12]
 8014844:	2300      	movs	r3, #0
 8014846:	f101 050c 	add.w	r5, r1, #12
 801484a:	608b      	str	r3, [r1, #8]
 801484c:	4622      	mov	r2, r4
 801484e:	462b      	mov	r3, r5
 8014850:	4809      	ldr	r0, [pc, #36]	; (8014878 <malloc+0x8c>)
 8014852:	f7f4 ff0b 	bl	800966c <printf>
 8014856:	e7e1      	b.n	801481c <malloc+0x30>
 8014858:	6013      	str	r3, [r2, #0]
 801485a:	4b08      	ldr	r3, [pc, #32]	; (801487c <malloc+0x90>)
 801485c:	e9c1 3400 	strd	r3, r4, [r1]
 8014860:	e7f0      	b.n	8014844 <malloc+0x58>
 8014862:	bf00      	nop
 8014864:	08018dfc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r8, sl, fp, pc}
 8014868:	20000010 	andcs	r0, r0, r0, lsl r0
 801486c:	2000000c 	andcs	r0, r0, ip
 8014870:	20016800 	andcs	r6, r1, r0, lsl #16
 8014874:	08018e08 	stmdaeq	r1, {r3, r9, sl, fp, pc}
 8014878:	08018e24 	stmdaeq	r1, {r2, r5, r9, sl, fp, pc}
 801487c:	424c4d43 	submi	r4, ip, #4288	; 0x10c0

08014880 <free>:
 8014880:	b538      	push	{r3, r4, r5, lr}
 8014882:	4604      	mov	r4, r0
 8014884:	b1c8      	cbz	r0, 80148ba <free+0x3a>
 8014886:	f1a0 050c 	sub.w	r5, r0, #12
 801488a:	4602      	mov	r2, r0
 801488c:	4629      	mov	r1, r5
 801488e:	480c      	ldr	r0, [pc, #48]	; (80148c0 <free+0x40>)
 8014890:	f7f4 feec 	bl	800966c <printf>
 8014894:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8014898:	4b0a      	ldr	r3, [pc, #40]	; (80148c4 <free+0x44>)
 801489a:	429a      	cmp	r2, r3
 801489c:	d10d      	bne.n	80148ba <free+0x3a>
 801489e:	4b0a      	ldr	r3, [pc, #40]	; (80148c8 <free+0x48>)
 80148a0:	681a      	ldr	r2, [r3, #0]
 80148a2:	b152      	cbz	r2, 80148ba <free+0x3a>
 80148a4:	f854 1c08 	ldr.w	r1, [r4, #-8]
 80148a8:	4291      	cmp	r1, r2
 80148aa:	d107      	bne.n	80148bc <free+0x3c>
 80148ac:	68da      	ldr	r2, [r3, #12]
 80148ae:	f844 2c04 	str.w	r2, [r4, #-4]
 80148b2:	685a      	ldr	r2, [r3, #4]
 80148b4:	60dd      	str	r5, [r3, #12]
 80148b6:	3a01      	subs	r2, #1
 80148b8:	605a      	str	r2, [r3, #4]
 80148ba:	bd38      	pop	{r3, r4, r5, pc}
 80148bc:	3310      	adds	r3, #16
 80148be:	e7ef      	b.n	80148a0 <free+0x20>
 80148c0:	08018e4f 	stmdaeq	r1, {r0, r1, r2, r3, r6, r9, sl, fp, pc}
 80148c4:	424c4d43 	submi	r4, ip, #4288	; 0x10c0
 80148c8:	20000010 	andcs	r0, r0, r0, lsl r0

080148cc <memcpy>:
 80148cc:	b510      	push	{r4, lr}
 80148ce:	1e43      	subs	r3, r0, #1
 80148d0:	440a      	add	r2, r1
 80148d2:	4291      	cmp	r1, r2
 80148d4:	d100      	bne.n	80148d8 <memcpy+0xc>
 80148d6:	bd10      	pop	{r4, pc}
 80148d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80148dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80148e0:	e7f7      	b.n	80148d2 <memcpy+0x6>

080148e2 <memmove>:
 80148e2:	4288      	cmp	r0, r1
 80148e4:	b510      	push	{r4, lr}
 80148e6:	eb01 0302 	add.w	r3, r1, r2
 80148ea:	d208      	bcs.n	80148fe <memmove+0x1c>
 80148ec:	1e42      	subs	r2, r0, #1
 80148ee:	4299      	cmp	r1, r3
 80148f0:	d100      	bne.n	80148f4 <memmove+0x12>
 80148f2:	bd10      	pop	{r4, pc}
 80148f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80148f8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80148fc:	e7f7      	b.n	80148ee <memmove+0xc>
 80148fe:	4601      	mov	r1, r0
 8014900:	4402      	add	r2, r0
 8014902:	428a      	cmp	r2, r1
 8014904:	d0f5      	beq.n	80148f2 <memmove+0x10>
 8014906:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801490a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801490e:	e7f8      	b.n	8014902 <memmove+0x20>

08014910 <memset>:
 8014910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014912:	b1e2      	cbz	r2, 801494e <memset+0x3e>
 8014914:	4603      	mov	r3, r0
 8014916:	b2c9      	uxtb	r1, r1
 8014918:	075c      	lsls	r4, r3, #29
 801491a:	d114      	bne.n	8014946 <memset+0x36>
 801491c:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
 8014920:	ea44 4704 	orr.w	r7, r4, r4, lsl #16
 8014924:	463d      	mov	r5, r7
 8014926:	f022 0407 	bic.w	r4, r2, #7
 801492a:	08d6      	lsrs	r6, r2, #3
 801492c:	441c      	add	r4, r3
 801492e:	42a3      	cmp	r3, r4
 8014930:	d10e      	bne.n	8014950 <memset+0x40>
 8014932:	f06f 0307 	mvn.w	r3, #7
 8014936:	fb03 2206 	mla	r2, r3, r6, r2
 801493a:	4422      	add	r2, r4
 801493c:	4294      	cmp	r4, r2
 801493e:	d006      	beq.n	801494e <memset+0x3e>
 8014940:	f804 1b01 	strb.w	r1, [r4], #1
 8014944:	e7fa      	b.n	801493c <memset+0x2c>
 8014946:	3a01      	subs	r2, #1
 8014948:	f803 1b01 	strb.w	r1, [r3], #1
 801494c:	d1e4      	bne.n	8014918 <memset+0x8>
 801494e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014950:	f843 7b08 	str.w	r7, [r3], #8
 8014954:	f843 5c04 	str.w	r5, [r3, #-4]
 8014958:	e7e9      	b.n	801492e <memset+0x1e>

0801495a <puts>:
 801495a:	b508      	push	{r3, lr}
 801495c:	f7ff fd64 	bl	8014428 <console_puts>
 8014960:	200a      	movs	r0, #10
 8014962:	f7ff fd5f 	bl	8014424 <console_putc>
 8014966:	2001      	movs	r0, #1
 8014968:	bd08      	pop	{r3, pc}
	...

0801496c <strtok>:
 801496c:	b530      	push	{r4, r5, lr}
 801496e:	b910      	cbnz	r0, 8014976 <strtok+0xa>
 8014970:	4b12      	ldr	r3, [pc, #72]	; (80149bc <strtok+0x50>)
 8014972:	6818      	ldr	r0, [r3, #0]
 8014974:	b158      	cbz	r0, 801498e <strtok+0x22>
 8014976:	4603      	mov	r3, r0
 8014978:	460d      	mov	r5, r1
 801497a:	4618      	mov	r0, r3
 801497c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014980:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014984:	b924      	cbnz	r4, 8014990 <strtok+0x24>
 8014986:	b94a      	cbnz	r2, 801499c <strtok+0x30>
 8014988:	4610      	mov	r0, r2
 801498a:	4b0c      	ldr	r3, [pc, #48]	; (80149bc <strtok+0x50>)
 801498c:	601a      	str	r2, [r3, #0]
 801498e:	bd30      	pop	{r4, r5, pc}
 8014990:	42a2      	cmp	r2, r4
 8014992:	d1f5      	bne.n	8014980 <strtok+0x14>
 8014994:	e7f0      	b.n	8014978 <strtok+0xc>
 8014996:	4613      	mov	r3, r2
 8014998:	e00c      	b.n	80149b4 <strtok+0x48>
 801499a:	b914      	cbnz	r4, 80149a2 <strtok+0x36>
 801499c:	460d      	mov	r5, r1
 801499e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80149a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80149a6:	42a2      	cmp	r2, r4
 80149a8:	d1f7      	bne.n	801499a <strtok+0x2e>
 80149aa:	2a00      	cmp	r2, #0
 80149ac:	d0f3      	beq.n	8014996 <strtok+0x2a>
 80149ae:	2200      	movs	r2, #0
 80149b0:	f803 2c01 	strb.w	r2, [r3, #-1]
 80149b4:	4a01      	ldr	r2, [pc, #4]	; (80149bc <strtok+0x50>)
 80149b6:	6013      	str	r3, [r2, #0]
 80149b8:	e7e9      	b.n	801498e <strtok+0x22>
 80149ba:	bf00      	nop
 80149bc:	2000a9c8 	andcs	sl, r0, r8, asr #19

080149c0 <isleapyear>:
 80149c0:	2264      	movs	r2, #100	; 0x64
 80149c2:	fb90 f3f2 	sdiv	r3, r0, r2
 80149c6:	fb02 0313 	mls	r3, r2, r3, r0
 80149ca:	b94b      	cbnz	r3, 80149e0 <isleapyear+0x20>
 80149cc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80149d0:	fb90 f2f3 	sdiv	r2, r0, r3
 80149d4:	fb03 0012 	mls	r0, r3, r2, r0
 80149d8:	fab0 f080 	clz	r0, r0
 80149dc:	0940      	lsrs	r0, r0, #5
 80149de:	4770      	bx	lr
 80149e0:	f010 0f03 	tst.w	r0, #3
 80149e4:	bf0c      	ite	eq
 80149e6:	2001      	moveq	r0, #1
 80149e8:	2000      	movne	r0, #0
 80149ea:	4770      	bx	lr

080149ec <getdaysofmonth>:
 80149ec:	b510      	push	{r4, lr}
 80149ee:	4604      	mov	r4, r0
 80149f0:	2c01      	cmp	r4, #1
 80149f2:	4608      	mov	r0, r1
 80149f4:	d102      	bne.n	80149fc <getdaysofmonth+0x10>
 80149f6:	f7ff ffe3 	bl	80149c0 <isleapyear>
 80149fa:	b918      	cbnz	r0, 8014a04 <getdaysofmonth+0x18>
 80149fc:	4b02      	ldr	r3, [pc, #8]	; (8014a08 <getdaysofmonth+0x1c>)
 80149fe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014a02:	bd10      	pop	{r4, pc}
 8014a04:	201d      	movs	r0, #29
 8014a06:	e7fc      	b.n	8014a02 <getdaysofmonth+0x16>
 8014a08:	08018e78 	stmdaeq	r1, {r3, r4, r5, r6, r9, sl, fp, pc}

08014a0c <mktime>:
 8014a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a10:	4604      	mov	r4, r0
 8014a12:	2800      	cmp	r0, #0
 8014a14:	d042      	beq.n	8014a9c <mktime+0x90>
 8014a16:	6941      	ldr	r1, [r0, #20]
 8014a18:	f1a1 0346 	sub.w	r3, r1, #70	; 0x46
 8014a1c:	2b45      	cmp	r3, #69	; 0x45
 8014a1e:	d83d      	bhi.n	8014a9c <mktime+0x90>
 8014a20:	2600      	movs	r6, #0
 8014a22:	f240 75b2 	movw	r5, #1970	; 0x7b2
 8014a26:	f240 186d 	movw	r8, #365	; 0x16d
 8014a2a:	f201 776b 	addw	r7, r1, #1899	; 0x76b
 8014a2e:	42af      	cmp	r7, r5
 8014a30:	da23      	bge.n	8014a7a <mktime+0x6e>
 8014a32:	6927      	ldr	r7, [r4, #16]
 8014a34:	2f0b      	cmp	r7, #11
 8014a36:	d831      	bhi.n	8014a9c <mktime+0x90>
 8014a38:	2500      	movs	r5, #0
 8014a3a:	42af      	cmp	r7, r5
 8014a3c:	d128      	bne.n	8014a90 <mktime+0x84>
 8014a3e:	68e5      	ldr	r5, [r4, #12]
 8014a40:	2d00      	cmp	r5, #0
 8014a42:	dd2b      	ble.n	8014a9c <mktime+0x90>
 8014a44:	4638      	mov	r0, r7
 8014a46:	f7ff ffd1 	bl	80149ec <getdaysofmonth>
 8014a4a:	4285      	cmp	r5, r0
 8014a4c:	dc26      	bgt.n	8014a9c <mktime+0x90>
 8014a4e:	2318      	movs	r3, #24
 8014a50:	3d01      	subs	r5, #1
 8014a52:	4435      	add	r5, r6
 8014a54:	435d      	muls	r5, r3
 8014a56:	68a3      	ldr	r3, [r4, #8]
 8014a58:	2b17      	cmp	r3, #23
 8014a5a:	d81f      	bhi.n	8014a9c <mktime+0x90>
 8014a5c:	203c      	movs	r0, #60	; 0x3c
 8014a5e:	442b      	add	r3, r5
 8014a60:	fb00 f503 	mul.w	r5, r0, r3
 8014a64:	6863      	ldr	r3, [r4, #4]
 8014a66:	2b3b      	cmp	r3, #59	; 0x3b
 8014a68:	d818      	bhi.n	8014a9c <mktime+0x90>
 8014a6a:	442b      	add	r3, r5
 8014a6c:	4343      	muls	r3, r0
 8014a6e:	6820      	ldr	r0, [r4, #0]
 8014a70:	283b      	cmp	r0, #59	; 0x3b
 8014a72:	d813      	bhi.n	8014a9c <mktime+0x90>
 8014a74:	4418      	add	r0, r3
 8014a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a7a:	4628      	mov	r0, r5
 8014a7c:	f7ff ffa0 	bl	80149c0 <isleapyear>
 8014a80:	2800      	cmp	r0, #0
 8014a82:	bf14      	ite	ne
 8014a84:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 8014a88:	4643      	moveq	r3, r8
 8014a8a:	3501      	adds	r5, #1
 8014a8c:	441e      	add	r6, r3
 8014a8e:	e7ce      	b.n	8014a2e <mktime+0x22>
 8014a90:	4628      	mov	r0, r5
 8014a92:	f7ff ffab 	bl	80149ec <getdaysofmonth>
 8014a96:	3501      	adds	r5, #1
 8014a98:	4406      	add	r6, r0
 8014a9a:	e7ce      	b.n	8014a3a <mktime+0x2e>
 8014a9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014aa0:	e7e9      	b.n	8014a76 <mktime+0x6a>
	...

08014aa4 <gettimeofday>:
 8014aa4:	b538      	push	{r3, r4, r5, lr}
 8014aa6:	4b10      	ldr	r3, [pc, #64]	; (8014ae8 <gettimeofday+0x44>)
 8014aa8:	4a10      	ldr	r2, [pc, #64]	; (8014aec <gettimeofday+0x48>)
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	6814      	ldr	r4, [r2, #0]
 8014aae:	6013      	str	r3, [r2, #0]
 8014ab0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014ab4:	429c      	cmp	r4, r3
 8014ab6:	bf2c      	ite	cs
 8014ab8:	1ae4      	subcs	r4, r4, r3
 8014aba:	1b1c      	subcc	r4, r3, r4
 8014abc:	4354      	muls	r4, r2
 8014abe:	4b0c      	ldr	r3, [pc, #48]	; (8014af0 <gettimeofday+0x4c>)
 8014ac0:	4605      	mov	r5, r0
 8014ac2:	e9d3 2100 	ldrd	r2, r1, [r3]
 8014ac6:	18a4      	adds	r4, r4, r2
 8014ac8:	f141 0100 	adc.w	r1, r1, #0
 8014acc:	e9c3 4100 	strd	r4, r1, [r3]
 8014ad0:	4620      	mov	r0, r4
 8014ad2:	2300      	movs	r3, #0
 8014ad4:	4a07      	ldr	r2, [pc, #28]	; (8014af4 <gettimeofday+0x50>)
 8014ad6:	f7f3 fa05 	bl	8007ee4 <__aeabi_uldivmod>
 8014ada:	4b06      	ldr	r3, [pc, #24]	; (8014af4 <gettimeofday+0x50>)
 8014adc:	6028      	str	r0, [r5, #0]
 8014ade:	fb03 4410 	mls	r4, r3, r0, r4
 8014ae2:	2000      	movs	r0, #0
 8014ae4:	606c      	str	r4, [r5, #4]
 8014ae6:	bd38      	pop	{r3, r4, r5, pc}
 8014ae8:	2000a9dc 	ldrdcs	sl, [r0], -ip
 8014aec:	2000a9d8 	ldrdcs	sl, [r0], -r8
 8014af0:	2000a9d0 	ldrdcs	sl, [r0], -r0
 8014af4:	000f4240 	andeq	r4, pc, r0, asr #4

08014af8 <settimeofday>:
 8014af8:	4b07      	ldr	r3, [pc, #28]	; (8014b18 <settimeofday+0x20>)
 8014afa:	b510      	push	{r4, lr}
 8014afc:	681a      	ldr	r2, [r3, #0]
 8014afe:	4b07      	ldr	r3, [pc, #28]	; (8014b1c <settimeofday+0x24>)
 8014b00:	6804      	ldr	r4, [r0, #0]
 8014b02:	601a      	str	r2, [r3, #0]
 8014b04:	6843      	ldr	r3, [r0, #4]
 8014b06:	4806      	ldr	r0, [pc, #24]	; (8014b20 <settimeofday+0x28>)
 8014b08:	17da      	asrs	r2, r3, #31
 8014b0a:	fbc4 3200 	smlal	r3, r2, r4, r0
 8014b0e:	4905      	ldr	r1, [pc, #20]	; (8014b24 <settimeofday+0x2c>)
 8014b10:	2000      	movs	r0, #0
 8014b12:	e9c1 3200 	strd	r3, r2, [r1]
 8014b16:	bd10      	pop	{r4, pc}
 8014b18:	2000a9dc 	ldrdcs	sl, [r0], -ip
 8014b1c:	2000a9d8 	ldrdcs	sl, [r0], -r8
 8014b20:	000f4240 	andeq	r4, pc, r0, asr #4
 8014b24:	2000a9d0 	ldrdcs	sl, [r0], -r0

08014b28 <time>:
 8014b28:	b513      	push	{r0, r1, r4, lr}
 8014b2a:	4604      	mov	r4, r0
 8014b2c:	2100      	movs	r1, #0
 8014b2e:	4668      	mov	r0, sp
 8014b30:	f7ff ffb8 	bl	8014aa4 <gettimeofday>
 8014b34:	9800      	ldr	r0, [sp, #0]
 8014b36:	b104      	cbz	r4, 8014b3a <time+0x12>
 8014b38:	6020      	str	r0, [r4, #0]
 8014b3a:	b002      	add	sp, #8
 8014b3c:	bd10      	pop	{r4, pc}
	...

08014b40 <uart0_init>:
 8014b40:	2301      	movs	r3, #1
 8014b42:	b507      	push	{r0, r1, r2, lr}
 8014b44:	2208      	movs	r2, #8
 8014b46:	9300      	str	r3, [sp, #0]
 8014b48:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8014b4c:	2300      	movs	r3, #0
 8014b4e:	4803      	ldr	r0, [pc, #12]	; (8014b5c <uart0_init+0x1c>)
 8014b50:	f001 f80a 	bl	8015b68 <gd32_uart_begin>
 8014b54:	b003      	add	sp, #12
 8014b56:	f85d fb04 	ldr.w	pc, [sp], #4
 8014b5a:	bf00      	nop
 8014b5c:	40013800 	andmi	r3, r1, r0, lsl #16

08014b60 <uart0_putc>:
 8014b60:	280a      	cmp	r0, #10
 8014b62:	b538      	push	{r3, r4, r5, lr}
 8014b64:	4604      	mov	r4, r0
 8014b66:	d10a      	bne.n	8014b7e <uart0_putc+0x1e>
 8014b68:	4d0b      	ldr	r5, [pc, #44]	; (8014b98 <uart0_putc+0x38>)
 8014b6a:	2107      	movs	r1, #7
 8014b6c:	4628      	mov	r0, r5
 8014b6e:	f000 fcd5 	bl	801551c <usart_flag_get>
 8014b72:	2800      	cmp	r0, #0
 8014b74:	d0f9      	beq.n	8014b6a <uart0_putc+0xa>
 8014b76:	220d      	movs	r2, #13
 8014b78:	4b08      	ldr	r3, [pc, #32]	; (8014b9c <uart0_putc+0x3c>)
 8014b7a:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8014b7e:	4d06      	ldr	r5, [pc, #24]	; (8014b98 <uart0_putc+0x38>)
 8014b80:	2107      	movs	r1, #7
 8014b82:	4628      	mov	r0, r5
 8014b84:	f000 fcca 	bl	801551c <usart_flag_get>
 8014b88:	2800      	cmp	r0, #0
 8014b8a:	d0f9      	beq.n	8014b80 <uart0_putc+0x20>
 8014b8c:	4b03      	ldr	r3, [pc, #12]	; (8014b9c <uart0_putc+0x3c>)
 8014b8e:	b2e4      	uxtb	r4, r4
 8014b90:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
 8014b94:	bd38      	pop	{r3, r4, r5, pc}
 8014b96:	bf00      	nop
 8014b98:	40013800 	andmi	r3, r1, r0, lsl #16
 8014b9c:	40013000 	andmi	r3, r1, r0

08014ba0 <uart0_puts>:
 8014ba0:	b510      	push	{r4, lr}
 8014ba2:	1e44      	subs	r4, r0, #1
 8014ba4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8014ba8:	b903      	cbnz	r3, 8014bac <uart0_puts+0xc>
 8014baa:	bd10      	pop	{r4, pc}
 8014bac:	2b0a      	cmp	r3, #10
 8014bae:	d102      	bne.n	8014bb6 <uart0_puts+0x16>
 8014bb0:	200d      	movs	r0, #13
 8014bb2:	f7ff ffd5 	bl	8014b60 <uart0_putc>
 8014bb6:	7820      	ldrb	r0, [r4, #0]
 8014bb8:	f7ff ffd2 	bl	8014b60 <uart0_putc>
 8014bbc:	e7f2      	b.n	8014ba4 <uart0_puts+0x4>
	...

08014bc0 <systick_config>:
 8014bc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014bc4:	4b0b      	ldr	r3, [pc, #44]	; (8014bf4 <systick_config+0x34>)
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8014bcc:	3b01      	subs	r3, #1
 8014bce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8014bd2:	d20d      	bcs.n	8014bf0 <systick_config+0x30>
 8014bd4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8014bd8:	21f0      	movs	r1, #240	; 0xf0
 8014bda:	6153      	str	r3, [r2, #20]
 8014bdc:	4b06      	ldr	r3, [pc, #24]	; (8014bf8 <systick_config+0x38>)
 8014bde:	2007      	movs	r0, #7
 8014be0:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 8014be4:	2100      	movs	r1, #0
 8014be6:	6191      	str	r1, [r2, #24]
 8014be8:	6110      	str	r0, [r2, #16]
 8014bea:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 8014bee:	4770      	bx	lr
 8014bf0:	e7fe      	b.n	8014bf0 <systick_config+0x30>
 8014bf2:	bf00      	nop
 8014bf4:	200000e0 	andcs	r0, r0, r0, ror #1
 8014bf8:	e000ed00 	and	lr, r0, r0, lsl #26

08014bfc <SysTick_Handler>:
 8014bfc:	4a02      	ldr	r2, [pc, #8]	; (8014c08 <SysTick_Handler+0xc>)
 8014bfe:	6813      	ldr	r3, [r2, #0]
 8014c00:	3301      	adds	r3, #1
 8014c02:	6013      	str	r3, [r2, #0]
 8014c04:	4770      	bx	lr
 8014c06:	bf00      	nop
 8014c08:	2000a9dc 	ldrdcs	sl, [r0], -ip

08014c0c <SystemInit>:
 8014c0c:	4b37      	ldr	r3, [pc, #220]	; (8014cec <SystemInit+0xe0>)
 8014c0e:	4838      	ldr	r0, [pc, #224]	; (8014cf0 <SystemInit+0xe4>)
 8014c10:	681a      	ldr	r2, [r3, #0]
 8014c12:	f042 0201 	orr.w	r2, r2, #1
 8014c16:	601a      	str	r2, [r3, #0]
 8014c18:	685a      	ldr	r2, [r3, #4]
 8014c1a:	f022 0203 	bic.w	r2, r2, #3
 8014c1e:	605a      	str	r2, [r3, #4]
 8014c20:	6819      	ldr	r1, [r3, #0]
 8014c22:	4001      	ands	r1, r0
 8014c24:	6019      	str	r1, [r3, #0]
 8014c26:	685a      	ldr	r2, [r3, #4]
 8014c28:	4932      	ldr	r1, [pc, #200]	; (8014cf4 <SystemInit+0xe8>)
 8014c2a:	4011      	ands	r1, r2
 8014c2c:	6059      	str	r1, [r3, #4]
 8014c2e:	681a      	ldr	r2, [r3, #0]
 8014c30:	4002      	ands	r2, r0
 8014c32:	601a      	str	r2, [r3, #0]
 8014c34:	681a      	ldr	r2, [r3, #0]
 8014c36:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8014c3a:	601a      	str	r2, [r3, #0]
 8014c3c:	685a      	ldr	r2, [r3, #4]
 8014c3e:	f022 5203 	bic.w	r2, r2, #549453824	; 0x20c00000
 8014c42:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8014c46:	605a      	str	r2, [r3, #4]
 8014c48:	2200      	movs	r2, #0
 8014c4a:	62da      	str	r2, [r3, #44]	; 0x2c
 8014c4c:	681a      	ldr	r2, [r3, #0]
 8014c4e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8014c52:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8014c56:	601a      	str	r2, [r3, #0]
 8014c58:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8014c5c:	609a      	str	r2, [r3, #8]
 8014c5e:	681a      	ldr	r2, [r3, #0]
 8014c60:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8014c64:	601a      	str	r2, [r3, #0]
 8014c66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014c6a:	6819      	ldr	r1, [r3, #0]
 8014c6c:	0389      	lsls	r1, r1, #14
 8014c6e:	d401      	bmi.n	8014c74 <SystemInit+0x68>
 8014c70:	3a01      	subs	r2, #1
 8014c72:	d1fa      	bne.n	8014c6a <SystemInit+0x5e>
 8014c74:	681a      	ldr	r2, [r3, #0]
 8014c76:	0392      	lsls	r2, r2, #14
 8014c78:	d400      	bmi.n	8014c7c <SystemInit+0x70>
 8014c7a:	e7fe      	b.n	8014c7a <SystemInit+0x6e>
 8014c7c:	685a      	ldr	r2, [r3, #4]
 8014c7e:	605a      	str	r2, [r3, #4]
 8014c80:	685a      	ldr	r2, [r3, #4]
 8014c82:	605a      	str	r2, [r3, #4]
 8014c84:	685a      	ldr	r2, [r3, #4]
 8014c86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8014c8a:	605a      	str	r2, [r3, #4]
 8014c8c:	685a      	ldr	r2, [r3, #4]
 8014c8e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8014c92:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 8014c96:	605a      	str	r2, [r3, #4]
 8014c98:	685a      	ldr	r2, [r3, #4]
 8014c9a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8014c9e:	f442 1224 	orr.w	r2, r2, #2686976	; 0x290000
 8014ca2:	605a      	str	r2, [r3, #4]
 8014ca4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8014ca6:	4a14      	ldr	r2, [pc, #80]	; (8014cf8 <SystemInit+0xec>)
 8014ca8:	400a      	ands	r2, r1
 8014caa:	62da      	str	r2, [r3, #44]	; 0x2c
 8014cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cae:	f442 3283 	orr.w	r2, r2, #67072	; 0x10600
 8014cb2:	f042 0249 	orr.w	r2, r2, #73	; 0x49
 8014cb6:	62da      	str	r2, [r3, #44]	; 0x2c
 8014cb8:	681a      	ldr	r2, [r3, #0]
 8014cba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8014cbe:	601a      	str	r2, [r3, #0]
 8014cc0:	681a      	ldr	r2, [r3, #0]
 8014cc2:	0110      	lsls	r0, r2, #4
 8014cc4:	d5fc      	bpl.n	8014cc0 <SystemInit+0xb4>
 8014cc6:	681a      	ldr	r2, [r3, #0]
 8014cc8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8014ccc:	601a      	str	r2, [r3, #0]
 8014cce:	681a      	ldr	r2, [r3, #0]
 8014cd0:	0191      	lsls	r1, r2, #6
 8014cd2:	d5fc      	bpl.n	8014cce <SystemInit+0xc2>
 8014cd4:	685a      	ldr	r2, [r3, #4]
 8014cd6:	f022 0203 	bic.w	r2, r2, #3
 8014cda:	605a      	str	r2, [r3, #4]
 8014cdc:	685a      	ldr	r2, [r3, #4]
 8014cde:	f042 0202 	orr.w	r2, r2, #2
 8014ce2:	605a      	str	r2, [r3, #4]
 8014ce4:	685a      	ldr	r2, [r3, #4]
 8014ce6:	0712      	lsls	r2, r2, #28
 8014ce8:	d5fc      	bpl.n	8014ce4 <SystemInit+0xd8>
 8014cea:	4770      	bx	lr
 8014cec:	40021000 	andmi	r1, r2, r0
 8014cf0:	fef6ffff 	mrc2	15, 7, pc, cr6, cr15, {7}
 8014cf4:	e0ff000c 	rscs	r0, pc, ip
 8014cf8:	fffef000 			; <UNDEFINED> instruction: 0xfffef000

08014cfc <bkp_deinit>:
 8014cfc:	b508      	push	{r3, lr}
 8014cfe:	f000 f97b 	bl	8014ff8 <rcu_bkp_reset_enable>
 8014d02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014d06:	f000 b97f 	b.w	8015008 <rcu_bkp_reset_disable>
	...

08014d0c <bkp_data_write>:
 8014d0c:	f1a0 030b 	sub.w	r3, r0, #11
 8014d10:	2b1f      	cmp	r3, #31
 8014d12:	d804      	bhi.n	8014d1e <bkp_data_write+0x12>
 8014d14:	4b07      	ldr	r3, [pc, #28]	; (8014d34 <bkp_data_write+0x28>)
 8014d16:	4403      	add	r3, r0
 8014d18:	009b      	lsls	r3, r3, #2
 8014d1a:	8019      	strh	r1, [r3, #0]
 8014d1c:	4770      	bx	lr
 8014d1e:	1e43      	subs	r3, r0, #1
 8014d20:	2b09      	cmp	r3, #9
 8014d22:	bf9f      	itttt	ls
 8014d24:	f100 5080 	addls.w	r0, r0, #268435456	; 0x10000000
 8014d28:	f500 50d8 	addls.w	r0, r0, #6912	; 0x1b00
 8014d2c:	0080      	lslls	r0, r0, #2
 8014d2e:	8001      	strhls	r1, [r0, #0]
 8014d30:	4770      	bx	lr
 8014d32:	bf00      	nop
 8014d34:	10001b05 	andne	r1, r0, r5, lsl #22

08014d38 <bkp_data_read>:
 8014d38:	f1a0 030b 	sub.w	r3, r0, #11
 8014d3c:	2b1f      	cmp	r3, #31
 8014d3e:	d805      	bhi.n	8014d4c <bkp_data_read+0x14>
 8014d40:	4b08      	ldr	r3, [pc, #32]	; (8014d64 <bkp_data_read+0x2c>)
 8014d42:	4403      	add	r3, r0
 8014d44:	009b      	lsls	r3, r3, #2
 8014d46:	8818      	ldrh	r0, [r3, #0]
 8014d48:	b280      	uxth	r0, r0
 8014d4a:	4770      	bx	lr
 8014d4c:	1e43      	subs	r3, r0, #1
 8014d4e:	2b09      	cmp	r3, #9
 8014d50:	d806      	bhi.n	8014d60 <bkp_data_read+0x28>
 8014d52:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
 8014d56:	f500 50d8 	add.w	r0, r0, #6912	; 0x1b00
 8014d5a:	0080      	lsls	r0, r0, #2
 8014d5c:	8800      	ldrh	r0, [r0, #0]
 8014d5e:	e7f3      	b.n	8014d48 <bkp_data_read+0x10>
 8014d60:	2000      	movs	r0, #0
 8014d62:	4770      	bx	lr
 8014d64:	10001b05 	andne	r1, r0, r5, lsl #22

08014d68 <fmc_bank0_unlock>:
 8014d68:	4b04      	ldr	r3, [pc, #16]	; (8014d7c <fmc_bank0_unlock+0x14>)
 8014d6a:	691a      	ldr	r2, [r3, #16]
 8014d6c:	0612      	lsls	r2, r2, #24
 8014d6e:	bf41      	itttt	mi
 8014d70:	4a03      	ldrmi	r2, [pc, #12]	; (8014d80 <fmc_bank0_unlock+0x18>)
 8014d72:	605a      	strmi	r2, [r3, #4]
 8014d74:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8014d78:	605a      	strmi	r2, [r3, #4]
 8014d7a:	4770      	bx	lr
 8014d7c:	40022000 	andmi	r2, r2, r0
 8014d80:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08014d84 <fmc_bank1_unlock>:
 8014d84:	4b04      	ldr	r3, [pc, #16]	; (8014d98 <fmc_bank1_unlock+0x14>)
 8014d86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014d88:	0612      	lsls	r2, r2, #24
 8014d8a:	bf41      	itttt	mi
 8014d8c:	4a03      	ldrmi	r2, [pc, #12]	; (8014d9c <fmc_bank1_unlock+0x18>)
 8014d8e:	645a      	strmi	r2, [r3, #68]	; 0x44
 8014d90:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8014d94:	645a      	strmi	r2, [r3, #68]	; 0x44
 8014d96:	4770      	bx	lr
 8014d98:	40022000 	andmi	r2, r2, r0
 8014d9c:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08014da0 <fmc_bank0_lock>:
 8014da0:	4a02      	ldr	r2, [pc, #8]	; (8014dac <fmc_bank0_lock+0xc>)
 8014da2:	6913      	ldr	r3, [r2, #16]
 8014da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014da8:	6113      	str	r3, [r2, #16]
 8014daa:	4770      	bx	lr
 8014dac:	40022000 	andmi	r2, r2, r0

08014db0 <fmc_bank1_lock>:
 8014db0:	4a02      	ldr	r2, [pc, #8]	; (8014dbc <fmc_bank1_lock+0xc>)
 8014db2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8014db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014db8:	6513      	str	r3, [r2, #80]	; 0x50
 8014dba:	4770      	bx	lr
 8014dbc:	40022000 	andmi	r2, r2, r0

08014dc0 <fmc_bank0_state_get>:
 8014dc0:	4b08      	ldr	r3, [pc, #32]	; (8014de4 <fmc_bank0_state_get+0x24>)
 8014dc2:	68da      	ldr	r2, [r3, #12]
 8014dc4:	07d1      	lsls	r1, r2, #31
 8014dc6:	d409      	bmi.n	8014ddc <fmc_bank0_state_get+0x1c>
 8014dc8:	68da      	ldr	r2, [r3, #12]
 8014dca:	06d2      	lsls	r2, r2, #27
 8014dcc:	d408      	bmi.n	8014de0 <fmc_bank0_state_get+0x20>
 8014dce:	68db      	ldr	r3, [r3, #12]
 8014dd0:	f013 0f04 	tst.w	r3, #4
 8014dd4:	bf0c      	ite	eq
 8014dd6:	2000      	moveq	r0, #0
 8014dd8:	2002      	movne	r0, #2
 8014dda:	4770      	bx	lr
 8014ddc:	2001      	movs	r0, #1
 8014dde:	4770      	bx	lr
 8014de0:	2003      	movs	r0, #3
 8014de2:	4770      	bx	lr
 8014de4:	40022000 	andmi	r2, r2, r0

08014de8 <fmc_bank1_state_get>:
 8014de8:	4b08      	ldr	r3, [pc, #32]	; (8014e0c <fmc_bank1_state_get+0x24>)
 8014dea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014dec:	07d1      	lsls	r1, r2, #31
 8014dee:	d409      	bmi.n	8014e04 <fmc_bank1_state_get+0x1c>
 8014df0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014df2:	06d2      	lsls	r2, r2, #27
 8014df4:	d408      	bmi.n	8014e08 <fmc_bank1_state_get+0x20>
 8014df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014df8:	f013 0f04 	tst.w	r3, #4
 8014dfc:	bf0c      	ite	eq
 8014dfe:	2000      	moveq	r0, #0
 8014e00:	2002      	movne	r0, #2
 8014e02:	4770      	bx	lr
 8014e04:	2001      	movs	r0, #1
 8014e06:	4770      	bx	lr
 8014e08:	2003      	movs	r0, #3
 8014e0a:	4770      	bx	lr
 8014e0c:	40022000 	andmi	r2, r2, r0

08014e10 <fwdgt_enable>:
 8014e10:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8014e14:	4b01      	ldr	r3, [pc, #4]	; (8014e1c <fwdgt_enable+0xc>)
 8014e16:	601a      	str	r2, [r3, #0]
 8014e18:	4770      	bx	lr
 8014e1a:	bf00      	nop
 8014e1c:	40003000 	andmi	r3, r0, r0

08014e20 <fwdgt_counter_reload>:
 8014e20:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8014e24:	4b01      	ldr	r3, [pc, #4]	; (8014e2c <fwdgt_counter_reload+0xc>)
 8014e26:	601a      	str	r2, [r3, #0]
 8014e28:	4770      	bx	lr
 8014e2a:	bf00      	nop
 8014e2c:	40003000 	andmi	r3, r0, r0

08014e30 <fwdgt_config>:
 8014e30:	f245 5355 	movw	r3, #21845	; 0x5555
 8014e34:	4a11      	ldr	r2, [pc, #68]	; (8014e7c <fwdgt_config+0x4c>)
 8014e36:	b510      	push	{r4, lr}
 8014e38:	4c11      	ldr	r4, [pc, #68]	; (8014e80 <fwdgt_config+0x50>)
 8014e3a:	6013      	str	r3, [r2, #0]
 8014e3c:	68d3      	ldr	r3, [r2, #12]
 8014e3e:	3c01      	subs	r4, #1
 8014e40:	f003 0301 	and.w	r3, r3, #1
 8014e44:	d013      	beq.n	8014e6e <fwdgt_config+0x3e>
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d1f8      	bne.n	8014e3c <fwdgt_config+0xc>
 8014e4a:	6051      	str	r1, [r2, #4]
 8014e4c:	490c      	ldr	r1, [pc, #48]	; (8014e80 <fwdgt_config+0x50>)
 8014e4e:	4a0b      	ldr	r2, [pc, #44]	; (8014e7c <fwdgt_config+0x4c>)
 8014e50:	68d3      	ldr	r3, [r2, #12]
 8014e52:	3901      	subs	r1, #1
 8014e54:	f003 0302 	and.w	r3, r3, #2
 8014e58:	d00d      	beq.n	8014e76 <fwdgt_config+0x46>
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d1f8      	bne.n	8014e50 <fwdgt_config+0x20>
 8014e5e:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8014e62:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8014e66:	6090      	str	r0, [r2, #8]
 8014e68:	2001      	movs	r0, #1
 8014e6a:	6013      	str	r3, [r2, #0]
 8014e6c:	e002      	b.n	8014e74 <fwdgt_config+0x44>
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d0eb      	beq.n	8014e4a <fwdgt_config+0x1a>
 8014e72:	2000      	movs	r0, #0
 8014e74:	bd10      	pop	{r4, pc}
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d1fb      	bne.n	8014e72 <fwdgt_config+0x42>
 8014e7a:	e7f0      	b.n	8014e5e <fwdgt_config+0x2e>
 8014e7c:	40003000 	andmi	r3, r0, r0
 8014e80:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08014e84 <gpio_init>:
 8014e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e88:	f04f 0c0f 	mov.w	ip, #15
 8014e8c:	06cf      	lsls	r7, r1, #27
 8014e8e:	f04f 0400 	mov.w	r4, #0
 8014e92:	f04f 0701 	mov.w	r7, #1
 8014e96:	f001 050f 	and.w	r5, r1, #15
 8014e9a:	bf48      	it	mi
 8014e9c:	4315      	orrmi	r5, r2
 8014e9e:	fa23 f204 	lsr.w	r2, r3, r4
 8014ea2:	07d6      	lsls	r6, r2, #31
 8014ea4:	d510      	bpl.n	8014ec8 <gpio_init+0x44>
 8014ea6:	00a2      	lsls	r2, r4, #2
 8014ea8:	6806      	ldr	r6, [r0, #0]
 8014eaa:	fa0c fe02 	lsl.w	lr, ip, r2
 8014eae:	ea26 060e 	bic.w	r6, r6, lr
 8014eb2:	fa05 f202 	lsl.w	r2, r5, r2
 8014eb6:	2928      	cmp	r1, #40	; 0x28
 8014eb8:	ea42 0206 	orr.w	r2, r2, r6
 8014ebc:	d128      	bne.n	8014f10 <gpio_init+0x8c>
 8014ebe:	fa07 f604 	lsl.w	r6, r7, r4
 8014ec2:	401e      	ands	r6, r3
 8014ec4:	6146      	str	r6, [r0, #20]
 8014ec6:	6002      	str	r2, [r0, #0]
 8014ec8:	3401      	adds	r4, #1
 8014eca:	2c08      	cmp	r4, #8
 8014ecc:	d1e7      	bne.n	8014e9e <gpio_init+0x1a>
 8014ece:	2600      	movs	r6, #0
 8014ed0:	f04f 0c0f 	mov.w	ip, #15
 8014ed4:	2701      	movs	r7, #1
 8014ed6:	f106 0208 	add.w	r2, r6, #8
 8014eda:	fa23 f402 	lsr.w	r4, r3, r2
 8014ede:	07e4      	lsls	r4, r4, #31
 8014ee0:	d511      	bpl.n	8014f06 <gpio_init+0x82>
 8014ee2:	00b4      	lsls	r4, r6, #2
 8014ee4:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8014ee8:	fa0c f804 	lsl.w	r8, ip, r4
 8014eec:	ea2e 0e08 	bic.w	lr, lr, r8
 8014ef0:	fa05 f404 	lsl.w	r4, r5, r4
 8014ef4:	2928      	cmp	r1, #40	; 0x28
 8014ef6:	ea44 040e 	orr.w	r4, r4, lr
 8014efa:	d110      	bne.n	8014f1e <gpio_init+0x9a>
 8014efc:	fa07 f202 	lsl.w	r2, r7, r2
 8014f00:	401a      	ands	r2, r3
 8014f02:	6142      	str	r2, [r0, #20]
 8014f04:	6044      	str	r4, [r0, #4]
 8014f06:	3601      	adds	r6, #1
 8014f08:	2e08      	cmp	r6, #8
 8014f0a:	d1e4      	bne.n	8014ed6 <gpio_init+0x52>
 8014f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f10:	2948      	cmp	r1, #72	; 0x48
 8014f12:	bf02      	ittt	eq
 8014f14:	fa07 f604 	lsleq.w	r6, r7, r4
 8014f18:	401e      	andeq	r6, r3
 8014f1a:	6106      	streq	r6, [r0, #16]
 8014f1c:	e7d3      	b.n	8014ec6 <gpio_init+0x42>
 8014f1e:	2948      	cmp	r1, #72	; 0x48
 8014f20:	bf02      	ittt	eq
 8014f22:	fa07 f202 	lsleq.w	r2, r7, r2
 8014f26:	401a      	andeq	r2, r3
 8014f28:	6102      	streq	r2, [r0, #16]
 8014f2a:	e7eb      	b.n	8014f04 <gpio_init+0x80>

08014f2c <gpio_pin_remap_config>:
 8014f2c:	2800      	cmp	r0, #0
 8014f2e:	4a16      	ldr	r2, [pc, #88]	; (8014f88 <gpio_pin_remap_config+0x5c>)
 8014f30:	b530      	push	{r4, r5, lr}
 8014f32:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 8014f36:	bfb4      	ite	lt
 8014f38:	69d3      	ldrlt	r3, [r2, #28]
 8014f3a:	6853      	ldrge	r3, [r2, #4]
 8014f3c:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
 8014f40:	b284      	uxth	r4, r0
 8014f42:	d110      	bne.n	8014f66 <gpio_pin_remap_config+0x3a>
 8014f44:	6855      	ldr	r5, [r2, #4]
 8014f46:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8014f4a:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 8014f4e:	6055      	str	r5, [r2, #4]
 8014f50:	b119      	cbz	r1, 8014f5a <gpio_pin_remap_config+0x2e>
 8014f52:	0d42      	lsrs	r2, r0, #21
 8014f54:	0112      	lsls	r2, r2, #4
 8014f56:	4094      	lsls	r4, r2
 8014f58:	4323      	orrs	r3, r4
 8014f5a:	4a0b      	ldr	r2, [pc, #44]	; (8014f88 <gpio_pin_remap_config+0x5c>)
 8014f5c:	2800      	cmp	r0, #0
 8014f5e:	bfb4      	ite	lt
 8014f60:	61d3      	strlt	r3, [r2, #28]
 8014f62:	6053      	strge	r3, [r2, #4]
 8014f64:	bd30      	pop	{r4, r5, pc}
 8014f66:	02c2      	lsls	r2, r0, #11
 8014f68:	bf4d      	iteet	mi
 8014f6a:	2203      	movmi	r2, #3
 8014f6c:	0d42      	lsrpl	r2, r0, #21
 8014f6e:	0112      	lslpl	r2, r2, #4
 8014f70:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
 8014f74:	bf4c      	ite	mi
 8014f76:	40aa      	lslmi	r2, r5
 8014f78:	fa04 f202 	lslpl.w	r2, r4, r2
 8014f7c:	ea23 0302 	bic.w	r3, r3, r2
 8014f80:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8014f84:	e7e4      	b.n	8014f50 <gpio_pin_remap_config+0x24>
 8014f86:	bf00      	nop
 8014f88:	40010000 	andmi	r0, r1, r0

08014f8c <gpio_ethernet_phy_select>:
 8014f8c:	4b04      	ldr	r3, [pc, #16]	; (8014fa0 <gpio_ethernet_phy_select+0x14>)
 8014f8e:	6859      	ldr	r1, [r3, #4]
 8014f90:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8014f94:	6059      	str	r1, [r3, #4]
 8014f96:	685a      	ldr	r2, [r3, #4]
 8014f98:	4302      	orrs	r2, r0
 8014f9a:	605a      	str	r2, [r3, #4]
 8014f9c:	4770      	bx	lr
 8014f9e:	bf00      	nop
 8014fa0:	40010000 	andmi	r0, r1, r0

08014fa4 <pmu_backup_write_enable>:
 8014fa4:	4a02      	ldr	r2, [pc, #8]	; (8014fb0 <pmu_backup_write_enable+0xc>)
 8014fa6:	6813      	ldr	r3, [r2, #0]
 8014fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014fac:	6013      	str	r3, [r2, #0]
 8014fae:	4770      	bx	lr
 8014fb0:	40007000 	andmi	r7, r0, r0

08014fb4 <rcu_periph_clock_enable>:
 8014fb4:	2201      	movs	r2, #1
 8014fb6:	0983      	lsrs	r3, r0, #6
 8014fb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014fbc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8014fc0:	6819      	ldr	r1, [r3, #0]
 8014fc2:	f000 001f 	and.w	r0, r0, #31
 8014fc6:	fa02 f000 	lsl.w	r0, r2, r0
 8014fca:	4308      	orrs	r0, r1
 8014fcc:	6018      	str	r0, [r3, #0]
 8014fce:	4770      	bx	lr

08014fd0 <rcu_periph_clock_disable>:
 8014fd0:	2101      	movs	r1, #1
 8014fd2:	0983      	lsrs	r3, r0, #6
 8014fd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014fd8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8014fdc:	681a      	ldr	r2, [r3, #0]
 8014fde:	f000 001f 	and.w	r0, r0, #31
 8014fe2:	fa01 f000 	lsl.w	r0, r1, r0
 8014fe6:	ea22 0000 	bic.w	r0, r2, r0
 8014fea:	6018      	str	r0, [r3, #0]
 8014fec:	4770      	bx	lr

08014fee <rcu_periph_reset_enable>:
 8014fee:	f7ff bfe1 	b.w	8014fb4 <rcu_periph_clock_enable>

08014ff2 <rcu_periph_reset_disable>:
 8014ff2:	f7ff bfed 	b.w	8014fd0 <rcu_periph_clock_disable>
	...

08014ff8 <rcu_bkp_reset_enable>:
 8014ff8:	4a02      	ldr	r2, [pc, #8]	; (8015004 <rcu_bkp_reset_enable+0xc>)
 8014ffa:	6a13      	ldr	r3, [r2, #32]
 8014ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015000:	6213      	str	r3, [r2, #32]
 8015002:	4770      	bx	lr
 8015004:	40021000 	andmi	r1, r2, r0

08015008 <rcu_bkp_reset_disable>:
 8015008:	4a02      	ldr	r2, [pc, #8]	; (8015014 <rcu_bkp_reset_disable+0xc>)
 801500a:	6a13      	ldr	r3, [r2, #32]
 801500c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015010:	6213      	str	r3, [r2, #32]
 8015012:	4770      	bx	lr
 8015014:	40021000 	andmi	r1, r2, r0

08015018 <rcu_ckout0_config>:
 8015018:	4a03      	ldr	r2, [pc, #12]	; (8015028 <rcu_ckout0_config+0x10>)
 801501a:	6853      	ldr	r3, [r2, #4]
 801501c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8015020:	4303      	orrs	r3, r0
 8015022:	6053      	str	r3, [r2, #4]
 8015024:	4770      	bx	lr
 8015026:	bf00      	nop
 8015028:	40021000 	andmi	r1, r2, r0

0801502c <rcu_pll2_config>:
 801502c:	4b04      	ldr	r3, [pc, #16]	; (8015040 <rcu_pll2_config+0x14>)
 801502e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8015030:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
 8015034:	62d9      	str	r1, [r3, #44]	; 0x2c
 8015036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015038:	4302      	orrs	r2, r0
 801503a:	62da      	str	r2, [r3, #44]	; 0x2c
 801503c:	4770      	bx	lr
 801503e:	bf00      	nop
 8015040:	40021000 	andmi	r1, r2, r0

08015044 <rcu_adc_clock_config>:
 8015044:	490c      	ldr	r1, [pc, #48]	; (8015078 <rcu_adc_clock_config+0x34>)
 8015046:	2805      	cmp	r0, #5
 8015048:	684b      	ldr	r3, [r1, #4]
 801504a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801504e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8015052:	d006      	beq.n	8015062 <rcu_adc_clock_config+0x1e>
 8015054:	d803      	bhi.n	801505e <rcu_adc_clock_config+0x1a>
 8015056:	2804      	cmp	r0, #4
 8015058:	d10a      	bne.n	8015070 <rcu_adc_clock_config+0x2c>
 801505a:	604b      	str	r3, [r1, #4]
 801505c:	4770      	bx	lr
 801505e:	2807      	cmp	r0, #7
 8015060:	d1fb      	bne.n	801505a <rcu_adc_clock_config+0x16>
 8015062:	4a06      	ldr	r2, [pc, #24]	; (801507c <rcu_adc_clock_config+0x38>)
 8015064:	ea02 3080 	and.w	r0, r2, r0, lsl #14
 8015068:	4303      	orrs	r3, r0
 801506a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801506e:	e7f4      	b.n	801505a <rcu_adc_clock_config+0x16>
 8015070:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 8015074:	e7f1      	b.n	801505a <rcu_adc_clock_config+0x16>
 8015076:	bf00      	nop
 8015078:	40021000 	andmi	r1, r2, r0
 801507c:	fffec000 			; <UNDEFINED> instruction: 0xfffec000

08015080 <rcu_flag_get>:
 8015080:	0983      	lsrs	r3, r0, #6
 8015082:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015086:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	f000 001f 	and.w	r0, r0, #31
 8015090:	fa23 f000 	lsr.w	r0, r3, r0
 8015094:	f000 0001 	and.w	r0, r0, #1
 8015098:	4770      	bx	lr
	...

0801509c <rcu_osci_stab_wait>:
 801509c:	281a      	cmp	r0, #26
 801509e:	b508      	push	{r3, lr}
 80150a0:	d051      	beq.n	8015146 <rcu_osci_stab_wait+0xaa>
 80150a2:	d806      	bhi.n	80150b2 <rcu_osci_stab_wait+0x16>
 80150a4:	2810      	cmp	r0, #16
 80150a6:	d015      	beq.n	80150d4 <rcu_osci_stab_wait+0x38>
 80150a8:	2818      	cmp	r0, #24
 80150aa:	d043      	beq.n	8015134 <rcu_osci_stab_wait+0x98>
 80150ac:	b368      	cbz	r0, 801510a <rcu_osci_stab_wait+0x6e>
 80150ae:	2000      	movs	r0, #0
 80150b0:	bd08      	pop	{r3, pc}
 80150b2:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80150b6:	d01c      	beq.n	80150f2 <rcu_osci_stab_wait+0x56>
 80150b8:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
 80150bc:	d02f      	beq.n	801511e <rcu_osci_stab_wait+0x82>
 80150be:	281c      	cmp	r0, #28
 80150c0:	d1f5      	bne.n	80150ae <rcu_osci_stab_wait+0x12>
 80150c2:	4a25      	ldr	r2, [pc, #148]	; (8015158 <rcu_osci_stab_wait+0xbc>)
 80150c4:	201d      	movs	r0, #29
 80150c6:	f7ff ffdb 	bl	8015080 <rcu_flag_get>
 80150ca:	b908      	cbnz	r0, 80150d0 <rcu_osci_stab_wait+0x34>
 80150cc:	3a01      	subs	r2, #1
 80150ce:	d1f9      	bne.n	80150c4 <rcu_osci_stab_wait+0x28>
 80150d0:	201d      	movs	r0, #29
 80150d2:	e008      	b.n	80150e6 <rcu_osci_stab_wait+0x4a>
 80150d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80150d8:	2011      	movs	r0, #17
 80150da:	f7ff ffd1 	bl	8015080 <rcu_flag_get>
 80150de:	b908      	cbnz	r0, 80150e4 <rcu_osci_stab_wait+0x48>
 80150e0:	3a01      	subs	r2, #1
 80150e2:	d1f9      	bne.n	80150d8 <rcu_osci_stab_wait+0x3c>
 80150e4:	2011      	movs	r0, #17
 80150e6:	f7ff ffcb 	bl	8015080 <rcu_flag_get>
 80150ea:	3800      	subs	r0, #0
 80150ec:	bf18      	it	ne
 80150ee:	2001      	movne	r0, #1
 80150f0:	e7de      	b.n	80150b0 <rcu_osci_stab_wait+0x14>
 80150f2:	f06f 427c 	mvn.w	r2, #4227858432	; 0xfc000000
 80150f6:	f640 0001 	movw	r0, #2049	; 0x801
 80150fa:	f7ff ffc1 	bl	8015080 <rcu_flag_get>
 80150fe:	b908      	cbnz	r0, 8015104 <rcu_osci_stab_wait+0x68>
 8015100:	3a01      	subs	r2, #1
 8015102:	d1f8      	bne.n	80150f6 <rcu_osci_stab_wait+0x5a>
 8015104:	f640 0001 	movw	r0, #2049	; 0x801
 8015108:	e7ed      	b.n	80150e6 <rcu_osci_stab_wait+0x4a>
 801510a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 801510e:	2001      	movs	r0, #1
 8015110:	f7ff ffb6 	bl	8015080 <rcu_flag_get>
 8015114:	b908      	cbnz	r0, 801511a <rcu_osci_stab_wait+0x7e>
 8015116:	3a01      	subs	r2, #1
 8015118:	d1f9      	bne.n	801510e <rcu_osci_stab_wait+0x72>
 801511a:	2001      	movs	r0, #1
 801511c:	e7e3      	b.n	80150e6 <rcu_osci_stab_wait+0x4a>
 801511e:	4a0e      	ldr	r2, [pc, #56]	; (8015158 <rcu_osci_stab_wait+0xbc>)
 8015120:	f640 1001 	movw	r0, #2305	; 0x901
 8015124:	f7ff ffac 	bl	8015080 <rcu_flag_get>
 8015128:	b908      	cbnz	r0, 801512e <rcu_osci_stab_wait+0x92>
 801512a:	3a01      	subs	r2, #1
 801512c:	d1f8      	bne.n	8015120 <rcu_osci_stab_wait+0x84>
 801512e:	f640 1001 	movw	r0, #2305	; 0x901
 8015132:	e7d8      	b.n	80150e6 <rcu_osci_stab_wait+0x4a>
 8015134:	4a08      	ldr	r2, [pc, #32]	; (8015158 <rcu_osci_stab_wait+0xbc>)
 8015136:	2019      	movs	r0, #25
 8015138:	f7ff ffa2 	bl	8015080 <rcu_flag_get>
 801513c:	b908      	cbnz	r0, 8015142 <rcu_osci_stab_wait+0xa6>
 801513e:	3a01      	subs	r2, #1
 8015140:	d1f9      	bne.n	8015136 <rcu_osci_stab_wait+0x9a>
 8015142:	2019      	movs	r0, #25
 8015144:	e7cf      	b.n	80150e6 <rcu_osci_stab_wait+0x4a>
 8015146:	4a04      	ldr	r2, [pc, #16]	; (8015158 <rcu_osci_stab_wait+0xbc>)
 8015148:	201b      	movs	r0, #27
 801514a:	f7ff ff99 	bl	8015080 <rcu_flag_get>
 801514e:	b908      	cbnz	r0, 8015154 <rcu_osci_stab_wait+0xb8>
 8015150:	3a01      	subs	r2, #1
 8015152:	d1f9      	bne.n	8015148 <rcu_osci_stab_wait+0xac>
 8015154:	201b      	movs	r0, #27
 8015156:	e7c6      	b.n	80150e6 <rcu_osci_stab_wait+0x4a>
 8015158:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

0801515c <rcu_osci_on>:
 801515c:	f7ff bf2a 	b.w	8014fb4 <rcu_periph_clock_enable>

08015160 <rcu_clock_freq_get>:
 8015160:	4b3d      	ldr	r3, [pc, #244]	; (8015258 <rcu_clock_freq_get+0xf8>)
 8015162:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015164:	4604      	mov	r4, r0
 8015166:	461f      	mov	r7, r3
 8015168:	b089      	sub	sp, #36	; 0x24
 801516a:	ad04      	add	r5, sp, #16
 801516c:	f103 0610 	add.w	r6, r3, #16
 8015170:	462a      	mov	r2, r5
 8015172:	6818      	ldr	r0, [r3, #0]
 8015174:	6859      	ldr	r1, [r3, #4]
 8015176:	3308      	adds	r3, #8
 8015178:	c203      	stmia	r2!, {r0, r1}
 801517a:	42b3      	cmp	r3, r6
 801517c:	4615      	mov	r5, r2
 801517e:	d1f7      	bne.n	8015170 <rcu_clock_freq_get+0x10>
 8015180:	466b      	mov	r3, sp
 8015182:	6938      	ldr	r0, [r7, #16]
 8015184:	6871      	ldr	r1, [r6, #4]
 8015186:	4a35      	ldr	r2, [pc, #212]	; (801525c <rcu_clock_freq_get+0xfc>)
 8015188:	c303      	stmia	r3!, {r0, r1}
 801518a:	c303      	stmia	r3!, {r0, r1}
 801518c:	6853      	ldr	r3, [r2, #4]
 801518e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8015192:	2b01      	cmp	r3, #1
 8015194:	d053      	beq.n	801523e <rcu_clock_freq_get+0xde>
 8015196:	2b02      	cmp	r3, #2
 8015198:	d153      	bne.n	8015242 <rcu_clock_freq_get+0xe2>
 801519a:	6853      	ldr	r3, [r2, #4]
 801519c:	03dd      	lsls	r5, r3, #15
 801519e:	d523      	bpl.n	80151e8 <rcu_clock_freq_get+0x88>
 80151a0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80151a2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80151a6:	4b2e      	ldr	r3, [pc, #184]	; (8015260 <rcu_clock_freq_get+0x100>)
 80151a8:	d00e      	beq.n	80151c8 <rcu_clock_freq_get+0x68>
 80151aa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80151ac:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80151ae:	f3c1 1103 	ubfx	r1, r1, #4, #4
 80151b2:	f3c0 2003 	ubfx	r0, r0, #8, #4
 80151b6:	3101      	adds	r1, #1
 80151b8:	280f      	cmp	r0, #15
 80151ba:	f100 0502 	add.w	r5, r0, #2
 80151be:	fbb3 f3f1 	udiv	r3, r3, r1
 80151c2:	bf08      	it	eq
 80151c4:	2514      	moveq	r5, #20
 80151c6:	436b      	muls	r3, r5
 80151c8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80151ca:	f001 010f 	and.w	r1, r1, #15
 80151ce:	3101      	adds	r1, #1
 80151d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80151d4:	6851      	ldr	r1, [r2, #4]
 80151d6:	6850      	ldr	r0, [r2, #4]
 80151d8:	f3c1 4183 	ubfx	r1, r1, #18, #4
 80151dc:	0080      	lsls	r0, r0, #2
 80151de:	d505      	bpl.n	80151ec <rcu_clock_freq_get+0x8c>
 80151e0:	f041 0110 	orr.w	r1, r1, #16
 80151e4:	1c48      	adds	r0, r1, #1
 80151e6:	e007      	b.n	80151f8 <rcu_clock_freq_get+0x98>
 80151e8:	4b1e      	ldr	r3, [pc, #120]	; (8015264 <rcu_clock_freq_get+0x104>)
 80151ea:	e7f3      	b.n	80151d4 <rcu_clock_freq_get+0x74>
 80151ec:	290f      	cmp	r1, #15
 80151ee:	d0f9      	beq.n	80151e4 <rcu_clock_freq_get+0x84>
 80151f0:	290d      	cmp	r1, #13
 80151f2:	f101 0002 	add.w	r0, r1, #2
 80151f6:	d01d      	beq.n	8015234 <rcu_clock_freq_get+0xd4>
 80151f8:	4343      	muls	r3, r0
 80151fa:	6851      	ldr	r1, [r2, #4]
 80151fc:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8015200:	3120      	adds	r1, #32
 8015202:	4469      	add	r1, sp
 8015204:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 8015208:	fa23 f001 	lsr.w	r0, r3, r1
 801520c:	6851      	ldr	r1, [r2, #4]
 801520e:	6852      	ldr	r2, [r2, #4]
 8015210:	f3c1 2102 	ubfx	r1, r1, #8, #3
 8015214:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 8015218:	3120      	adds	r1, #32
 801521a:	3220      	adds	r2, #32
 801521c:	4469      	add	r1, sp
 801521e:	446a      	add	r2, sp
 8015220:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 8015224:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8015228:	2c03      	cmp	r4, #3
 801522a:	d813      	bhi.n	8015254 <rcu_clock_freq_get+0xf4>
 801522c:	e8df f004 	tbb	[pc, r4]
 8015230:	100e0c0b 	andne	r0, lr, fp, lsl #24
 8015234:	2006      	movs	r0, #6
 8015236:	0859      	lsrs	r1, r3, #1
 8015238:	fb00 1303 	mla	r3, r0, r3, r1
 801523c:	e7dd      	b.n	80151fa <rcu_clock_freq_get+0x9a>
 801523e:	4b08      	ldr	r3, [pc, #32]	; (8015260 <rcu_clock_freq_get+0x100>)
 8015240:	e7db      	b.n	80151fa <rcu_clock_freq_get+0x9a>
 8015242:	4b09      	ldr	r3, [pc, #36]	; (8015268 <rcu_clock_freq_get+0x108>)
 8015244:	e7d9      	b.n	80151fa <rcu_clock_freq_get+0x9a>
 8015246:	4618      	mov	r0, r3
 8015248:	b009      	add	sp, #36	; 0x24
 801524a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801524c:	40c8      	lsrs	r0, r1
 801524e:	e7fb      	b.n	8015248 <rcu_clock_freq_get+0xe8>
 8015250:	40d0      	lsrs	r0, r2
 8015252:	e7f9      	b.n	8015248 <rcu_clock_freq_get+0xe8>
 8015254:	2000      	movs	r0, #0
 8015256:	e7f7      	b.n	8015248 <rcu_clock_freq_get+0xe8>
 8015258:	08016a55 	stmdaeq	r1, {r0, r2, r4, r6, r9, fp, sp, lr}
 801525c:	40021000 	andmi	r1, r2, r0
 8015260:	017d7840 	cmneq	sp, r0, asr #16
 8015264:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8015268:	007a1200 	rsbseq	r1, sl, r0, lsl #4

0801526c <timer_deinit>:
 801526c:	b508      	push	{r3, lr}
 801526e:	4b2d      	ldr	r3, [pc, #180]	; (8015324 <timer_deinit+0xb8>)
 8015270:	4298      	cmp	r0, r3
 8015272:	d048      	beq.n	8015306 <timer_deinit+0x9a>
 8015274:	d816      	bhi.n	80152a4 <timer_deinit+0x38>
 8015276:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801527a:	4298      	cmp	r0, r3
 801527c:	d03c      	beq.n	80152f8 <timer_deinit+0x8c>
 801527e:	d807      	bhi.n	8015290 <timer_deinit+0x24>
 8015280:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8015284:	d02a      	beq.n	80152dc <timer_deinit+0x70>
 8015286:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801528a:	4298      	cmp	r0, r3
 801528c:	d02d      	beq.n	80152ea <timer_deinit+0x7e>
 801528e:	bd08      	pop	{r3, pc}
 8015290:	4b25      	ldr	r3, [pc, #148]	; (8015328 <timer_deinit+0xbc>)
 8015292:	4298      	cmp	r0, r3
 8015294:	d1fb      	bne.n	801528e <timer_deinit+0x22>
 8015296:	f240 4003 	movw	r0, #1027	; 0x403
 801529a:	f7ff fea8 	bl	8014fee <rcu_periph_reset_enable>
 801529e:	f240 4003 	movw	r0, #1027	; 0x403
 80152a2:	e017      	b.n	80152d4 <timer_deinit+0x68>
 80152a4:	4b21      	ldr	r3, [pc, #132]	; (801532c <timer_deinit+0xc0>)
 80152a6:	4298      	cmp	r0, r3
 80152a8:	d00e      	beq.n	80152c8 <timer_deinit+0x5c>
 80152aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80152ae:	4298      	cmp	r0, r3
 80152b0:	d030      	beq.n	8015314 <timer_deinit+0xa8>
 80152b2:	f5a3 3390 	sub.w	r3, r3, #73728	; 0x12000
 80152b6:	4298      	cmp	r0, r3
 80152b8:	d1e9      	bne.n	801528e <timer_deinit+0x22>
 80152ba:	f240 4005 	movw	r0, #1029	; 0x405
 80152be:	f7ff fe96 	bl	8014fee <rcu_periph_reset_enable>
 80152c2:	f240 4005 	movw	r0, #1029	; 0x405
 80152c6:	e005      	b.n	80152d4 <timer_deinit+0x68>
 80152c8:	f240 300b 	movw	r0, #779	; 0x30b
 80152cc:	f7ff fe8f 	bl	8014fee <rcu_periph_reset_enable>
 80152d0:	f240 300b 	movw	r0, #779	; 0x30b
 80152d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80152d8:	f7ff be8b 	b.w	8014ff2 <rcu_periph_reset_disable>
 80152dc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80152e0:	f7ff fe85 	bl	8014fee <rcu_periph_reset_enable>
 80152e4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80152e8:	e7f4      	b.n	80152d4 <timer_deinit+0x68>
 80152ea:	f240 4001 	movw	r0, #1025	; 0x401
 80152ee:	f7ff fe7e 	bl	8014fee <rcu_periph_reset_enable>
 80152f2:	f240 4001 	movw	r0, #1025	; 0x401
 80152f6:	e7ed      	b.n	80152d4 <timer_deinit+0x68>
 80152f8:	f240 4002 	movw	r0, #1026	; 0x402
 80152fc:	f7ff fe77 	bl	8014fee <rcu_periph_reset_enable>
 8015300:	f240 4002 	movw	r0, #1026	; 0x402
 8015304:	e7e6      	b.n	80152d4 <timer_deinit+0x68>
 8015306:	f240 4004 	movw	r0, #1028	; 0x404
 801530a:	f7ff fe70 	bl	8014fee <rcu_periph_reset_enable>
 801530e:	f240 4004 	movw	r0, #1028	; 0x404
 8015312:	e7df      	b.n	80152d4 <timer_deinit+0x68>
 8015314:	f240 300d 	movw	r0, #781	; 0x30d
 8015318:	f7ff fe69 	bl	8014fee <rcu_periph_reset_enable>
 801531c:	f240 300d 	movw	r0, #781	; 0x30d
 8015320:	e7d8      	b.n	80152d4 <timer_deinit+0x68>
 8015322:	bf00      	nop
 8015324:	40001000 	andmi	r1, r0, r0
 8015328:	40000c00 	andmi	r0, r0, r0, lsl #24
 801532c:	40012c00 	andmi	r2, r1, r0, lsl #24

08015330 <timer_init>:
 8015330:	880b      	ldrh	r3, [r1, #0]
 8015332:	6283      	str	r3, [r0, #40]	; 0x28
 8015334:	4b26      	ldr	r3, [pc, #152]	; (80153d0 <timer_init+0xa0>)
 8015336:	4298      	cmp	r0, r3
 8015338:	d018      	beq.n	801536c <timer_init+0x3c>
 801533a:	f420 6240 	bic.w	r2, r0, #3072	; 0xc00
 801533e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8015342:	f420 6380 	bic.w	r3, r0, #1024	; 0x400
 8015346:	d011      	beq.n	801536c <timer_init+0x3c>
 8015348:	4a22      	ldr	r2, [pc, #136]	; (80153d4 <timer_init+0xa4>)
 801534a:	4290      	cmp	r0, r2
 801534c:	d00e      	beq.n	801536c <timer_init+0x3c>
 801534e:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 8015352:	4290      	cmp	r0, r2
 8015354:	d00a      	beq.n	801536c <timer_init+0x3c>
 8015356:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801535a:	4293      	cmp	r3, r2
 801535c:	d006      	beq.n	801536c <timer_init+0x3c>
 801535e:	f5a2 329c 	sub.w	r2, r2, #79872	; 0x13800
 8015362:	4293      	cmp	r3, r2
 8015364:	d002      	beq.n	801536c <timer_init+0x3c>
 8015366:	4b1c      	ldr	r3, [pc, #112]	; (80153d8 <timer_init+0xa8>)
 8015368:	4298      	cmp	r0, r3
 801536a:	d10f      	bne.n	801538c <timer_init+0x5c>
 801536c:	6803      	ldr	r3, [r0, #0]
 801536e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015372:	6003      	str	r3, [r0, #0]
 8015374:	884b      	ldrh	r3, [r1, #2]
 8015376:	6802      	ldr	r2, [r0, #0]
 8015378:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801537c:	4313      	orrs	r3, r2
 801537e:	6003      	str	r3, [r0, #0]
 8015380:	888b      	ldrh	r3, [r1, #4]
 8015382:	6802      	ldr	r2, [r0, #0]
 8015384:	f003 0310 	and.w	r3, r3, #16
 8015388:	4313      	orrs	r3, r2
 801538a:	6003      	str	r3, [r0, #0]
 801538c:	688b      	ldr	r3, [r1, #8]
 801538e:	62c3      	str	r3, [r0, #44]	; 0x2c
 8015390:	4b12      	ldr	r3, [pc, #72]	; (80153dc <timer_init+0xac>)
 8015392:	4298      	cmp	r0, r3
 8015394:	d003      	beq.n	801539e <timer_init+0x6e>
 8015396:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801539a:	4298      	cmp	r0, r3
 801539c:	d104      	bne.n	80153a8 <timer_init+0x78>
 801539e:	6943      	ldr	r3, [r0, #20]
 80153a0:	f043 0301 	orr.w	r3, r3, #1
 80153a4:	6143      	str	r3, [r0, #20]
 80153a6:	4770      	bx	lr
 80153a8:	6803      	ldr	r3, [r0, #0]
 80153aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80153ae:	6003      	str	r3, [r0, #0]
 80153b0:	898b      	ldrh	r3, [r1, #12]
 80153b2:	6802      	ldr	r2, [r0, #0]
 80153b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80153b8:	4313      	orrs	r3, r2
 80153ba:	6003      	str	r3, [r0, #0]
 80153bc:	4b04      	ldr	r3, [pc, #16]	; (80153d0 <timer_init+0xa0>)
 80153be:	4298      	cmp	r0, r3
 80153c0:	d002      	beq.n	80153c8 <timer_init+0x98>
 80153c2:	4b04      	ldr	r3, [pc, #16]	; (80153d4 <timer_init+0xa4>)
 80153c4:	4298      	cmp	r0, r3
 80153c6:	d1ea      	bne.n	801539e <timer_init+0x6e>
 80153c8:	7b8b      	ldrb	r3, [r1, #14]
 80153ca:	6303      	str	r3, [r0, #48]	; 0x30
 80153cc:	e7e7      	b.n	801539e <timer_init+0x6e>
 80153ce:	bf00      	nop
 80153d0:	40012c00 	andmi	r2, r1, r0, lsl #24
 80153d4:	40013400 	andmi	r3, r1, r0, lsl #8
 80153d8:	40002000 	andmi	r2, r0, r0
 80153dc:	40001000 	andmi	r1, r0, r0

080153e0 <timer_enable>:
 80153e0:	6803      	ldr	r3, [r0, #0]
 80153e2:	f043 0301 	orr.w	r3, r3, #1
 80153e6:	6003      	str	r3, [r0, #0]
 80153e8:	4770      	bx	lr
	...

080153ec <usart_deinit>:
 80153ec:	b508      	push	{r3, lr}
 80153ee:	4b1d      	ldr	r3, [pc, #116]	; (8015464 <usart_deinit+0x78>)
 80153f0:	4298      	cmp	r0, r3
 80153f2:	d028      	beq.n	8015446 <usart_deinit+0x5a>
 80153f4:	d808      	bhi.n	8015408 <usart_deinit+0x1c>
 80153f6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80153fa:	4298      	cmp	r0, r3
 80153fc:	d015      	beq.n	801542a <usart_deinit+0x3e>
 80153fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015402:	4298      	cmp	r0, r3
 8015404:	d018      	beq.n	8015438 <usart_deinit+0x4c>
 8015406:	bd08      	pop	{r3, pc}
 8015408:	4b17      	ldr	r3, [pc, #92]	; (8015468 <usart_deinit+0x7c>)
 801540a:	4298      	cmp	r0, r3
 801540c:	d022      	beq.n	8015454 <usart_deinit+0x68>
 801540e:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8015412:	4298      	cmp	r0, r3
 8015414:	d1f7      	bne.n	8015406 <usart_deinit+0x1a>
 8015416:	f240 300e 	movw	r0, #782	; 0x30e
 801541a:	f7ff fde8 	bl	8014fee <rcu_periph_reset_enable>
 801541e:	f240 300e 	movw	r0, #782	; 0x30e
 8015422:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015426:	f7ff bde4 	b.w	8014ff2 <rcu_periph_reset_disable>
 801542a:	f240 4011 	movw	r0, #1041	; 0x411
 801542e:	f7ff fdde 	bl	8014fee <rcu_periph_reset_enable>
 8015432:	f240 4011 	movw	r0, #1041	; 0x411
 8015436:	e7f4      	b.n	8015422 <usart_deinit+0x36>
 8015438:	f240 4012 	movw	r0, #1042	; 0x412
 801543c:	f7ff fdd7 	bl	8014fee <rcu_periph_reset_enable>
 8015440:	f240 4012 	movw	r0, #1042	; 0x412
 8015444:	e7ed      	b.n	8015422 <usart_deinit+0x36>
 8015446:	f240 4013 	movw	r0, #1043	; 0x413
 801544a:	f7ff fdd0 	bl	8014fee <rcu_periph_reset_enable>
 801544e:	f240 4013 	movw	r0, #1043	; 0x413
 8015452:	e7e6      	b.n	8015422 <usart_deinit+0x36>
 8015454:	f240 4014 	movw	r0, #1044	; 0x414
 8015458:	f7ff fdc9 	bl	8014fee <rcu_periph_reset_enable>
 801545c:	f240 4014 	movw	r0, #1044	; 0x414
 8015460:	e7df      	b.n	8015422 <usart_deinit+0x36>
 8015462:	bf00      	nop
 8015464:	40004c00 	andmi	r4, r0, r0, lsl #24
 8015468:	40005000 	andmi	r5, r0, r0

0801546c <usart_baudrate_set>:
 801546c:	b538      	push	{r3, r4, r5, lr}
 801546e:	4b11      	ldr	r3, [pc, #68]	; (80154b4 <usart_baudrate_set+0x48>)
 8015470:	4604      	mov	r4, r0
 8015472:	4298      	cmp	r0, r3
 8015474:	460d      	mov	r5, r1
 8015476:	d01b      	beq.n	80154b0 <usart_baudrate_set+0x44>
 8015478:	d809      	bhi.n	801548e <usart_baudrate_set+0x22>
 801547a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801547e:	4298      	cmp	r0, r3
 8015480:	d016      	beq.n	80154b0 <usart_baudrate_set+0x44>
 8015482:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015486:	4298      	cmp	r0, r3
 8015488:	d012      	beq.n	80154b0 <usart_baudrate_set+0x44>
 801548a:	2000      	movs	r0, #0
 801548c:	e009      	b.n	80154a2 <usart_baudrate_set+0x36>
 801548e:	4b0a      	ldr	r3, [pc, #40]	; (80154b8 <usart_baudrate_set+0x4c>)
 8015490:	4298      	cmp	r0, r3
 8015492:	d00d      	beq.n	80154b0 <usart_baudrate_set+0x44>
 8015494:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8015498:	4298      	cmp	r0, r3
 801549a:	d1f6      	bne.n	801548a <usart_baudrate_set+0x1e>
 801549c:	2003      	movs	r0, #3
 801549e:	f7ff fe5f 	bl	8015160 <rcu_clock_freq_get>
 80154a2:	eb00 0355 	add.w	r3, r0, r5, lsr #1
 80154a6:	fbb3 f1f5 	udiv	r1, r3, r5
 80154aa:	b289      	uxth	r1, r1
 80154ac:	60a1      	str	r1, [r4, #8]
 80154ae:	bd38      	pop	{r3, r4, r5, pc}
 80154b0:	2002      	movs	r0, #2
 80154b2:	e7f4      	b.n	801549e <usart_baudrate_set+0x32>
 80154b4:	40004c00 	andmi	r4, r0, r0, lsl #24
 80154b8:	40005000 	andmi	r5, r0, r0

080154bc <usart_parity_config>:
 80154bc:	68c2      	ldr	r2, [r0, #12]
 80154be:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80154c2:	60c2      	str	r2, [r0, #12]
 80154c4:	68c3      	ldr	r3, [r0, #12]
 80154c6:	430b      	orrs	r3, r1
 80154c8:	60c3      	str	r3, [r0, #12]
 80154ca:	4770      	bx	lr

080154cc <usart_word_length_set>:
 80154cc:	68c2      	ldr	r2, [r0, #12]
 80154ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80154d2:	60c2      	str	r2, [r0, #12]
 80154d4:	68c3      	ldr	r3, [r0, #12]
 80154d6:	430b      	orrs	r3, r1
 80154d8:	60c3      	str	r3, [r0, #12]
 80154da:	4770      	bx	lr

080154dc <usart_stop_bit_set>:
 80154dc:	6902      	ldr	r2, [r0, #16]
 80154de:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80154e2:	6102      	str	r2, [r0, #16]
 80154e4:	6903      	ldr	r3, [r0, #16]
 80154e6:	430b      	orrs	r3, r1
 80154e8:	6103      	str	r3, [r0, #16]
 80154ea:	4770      	bx	lr

080154ec <usart_transmit_config>:
 80154ec:	68c3      	ldr	r3, [r0, #12]
 80154ee:	f023 0308 	bic.w	r3, r3, #8
 80154f2:	430b      	orrs	r3, r1
 80154f4:	60c3      	str	r3, [r0, #12]
 80154f6:	4770      	bx	lr

080154f8 <usart_receive_config>:
 80154f8:	68c3      	ldr	r3, [r0, #12]
 80154fa:	f023 0304 	bic.w	r3, r3, #4
 80154fe:	430b      	orrs	r3, r1
 8015500:	60c3      	str	r3, [r0, #12]
 8015502:	4770      	bx	lr

08015504 <usart_hardware_flow_rts_config>:
 8015504:	6943      	ldr	r3, [r0, #20]
 8015506:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801550a:	430b      	orrs	r3, r1
 801550c:	6143      	str	r3, [r0, #20]
 801550e:	4770      	bx	lr

08015510 <usart_hardware_flow_cts_config>:
 8015510:	6943      	ldr	r3, [r0, #20]
 8015512:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8015516:	430b      	orrs	r3, r1
 8015518:	6143      	str	r3, [r0, #20]
 801551a:	4770      	bx	lr

0801551c <usart_flag_get>:
 801551c:	098b      	lsrs	r3, r1, #6
 801551e:	5818      	ldr	r0, [r3, r0]
 8015520:	f001 011f 	and.w	r1, r1, #31
 8015524:	40c8      	lsrs	r0, r1
 8015526:	f000 0001 	and.w	r0, r0, #1
 801552a:	4770      	bx	lr

0801552c <emac_start>:
 801552c:	b510      	push	{r4, lr}
 801552e:	4604      	mov	r4, r0
 8015530:	f240 6002 	movw	r0, #1538	; 0x602
 8015534:	f7ff fd3e 	bl	8014fb4 <rcu_periph_clock_enable>
 8015538:	f240 6003 	movw	r0, #1539	; 0x603
 801553c:	f7ff fd3a 	bl	8014fb4 <rcu_periph_clock_enable>
 8015540:	f240 6004 	movw	r0, #1540	; 0x604
 8015544:	f7ff fd36 	bl	8014fb4 <rcu_periph_clock_enable>
 8015548:	f44f 7380 	mov.w	r3, #256	; 0x100
 801554c:	2203      	movs	r2, #3
 801554e:	2118      	movs	r1, #24
 8015550:	4846      	ldr	r0, [pc, #280]	; (801566c <emac_start+0x140>)
 8015552:	f7ff fc97 	bl	8014e84 <gpio_init>
 8015556:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 801555a:	f7ff fd2b 	bl	8014fb4 <rcu_periph_clock_enable>
 801555e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8015562:	f7ff fd63 	bl	801502c <rcu_pll2_config>
 8015566:	201c      	movs	r0, #28
 8015568:	f7ff fdf8 	bl	801515c <rcu_osci_on>
 801556c:	201c      	movs	r0, #28
 801556e:	f7ff fd95 	bl	801509c <rcu_osci_stab_wait>
 8015572:	f04f 6030 	mov.w	r0, #184549376	; 0xb000000
 8015576:	f7ff fd4f 	bl	8015018 <rcu_ckout0_config>
 801557a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 801557e:	f7ff fd05 	bl	8014f8c <gpio_ethernet_phy_select>
 8015582:	2302      	movs	r3, #2
 8015584:	2203      	movs	r2, #3
 8015586:	2104      	movs	r1, #4
 8015588:	4838      	ldr	r0, [pc, #224]	; (801566c <emac_start+0x140>)
 801558a:	f7ff fc7b 	bl	8014e84 <gpio_init>
 801558e:	2304      	movs	r3, #4
 8015590:	2203      	movs	r2, #3
 8015592:	2118      	movs	r1, #24
 8015594:	4835      	ldr	r0, [pc, #212]	; (801566c <emac_start+0x140>)
 8015596:	f7ff fc75 	bl	8014e84 <gpio_init>
 801559a:	2380      	movs	r3, #128	; 0x80
 801559c:	2203      	movs	r2, #3
 801559e:	2104      	movs	r1, #4
 80155a0:	4832      	ldr	r0, [pc, #200]	; (801566c <emac_start+0x140>)
 80155a2:	f7ff fc6f 	bl	8014e84 <gpio_init>
 80155a6:	2302      	movs	r3, #2
 80155a8:	2203      	movs	r2, #3
 80155aa:	2118      	movs	r1, #24
 80155ac:	4830      	ldr	r0, [pc, #192]	; (8015670 <emac_start+0x144>)
 80155ae:	f7ff fc69 	bl	8014e84 <gpio_init>
 80155b2:	2310      	movs	r3, #16
 80155b4:	2203      	movs	r2, #3
 80155b6:	2104      	movs	r1, #4
 80155b8:	482d      	ldr	r0, [pc, #180]	; (8015670 <emac_start+0x144>)
 80155ba:	f7ff fc63 	bl	8014e84 <gpio_init>
 80155be:	2320      	movs	r3, #32
 80155c0:	2203      	movs	r2, #3
 80155c2:	2104      	movs	r1, #4
 80155c4:	482a      	ldr	r0, [pc, #168]	; (8015670 <emac_start+0x144>)
 80155c6:	f7ff fc5d 	bl	8014e84 <gpio_init>
 80155ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80155ce:	2203      	movs	r2, #3
 80155d0:	2118      	movs	r1, #24
 80155d2:	4828      	ldr	r0, [pc, #160]	; (8015674 <emac_start+0x148>)
 80155d4:	f7ff fc56 	bl	8014e84 <gpio_init>
 80155d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80155dc:	2203      	movs	r2, #3
 80155de:	2118      	movs	r1, #24
 80155e0:	4824      	ldr	r0, [pc, #144]	; (8015674 <emac_start+0x148>)
 80155e2:	f7ff fc4f 	bl	8014e84 <gpio_init>
 80155e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80155ea:	2203      	movs	r2, #3
 80155ec:	2118      	movs	r1, #24
 80155ee:	4821      	ldr	r0, [pc, #132]	; (8015674 <emac_start+0x148>)
 80155f0:	f7ff fc48 	bl	8014e84 <gpio_init>
 80155f4:	f240 500e 	movw	r0, #1294	; 0x50e
 80155f8:	f7ff fcdc 	bl	8014fb4 <rcu_periph_clock_enable>
 80155fc:	f240 500f 	movw	r0, #1295	; 0x50f
 8015600:	f7ff fcd8 	bl	8014fb4 <rcu_periph_clock_enable>
 8015604:	f44f 60a2 	mov.w	r0, #1296	; 0x510
 8015608:	f7ff fcd4 	bl	8014fb4 <rcu_periph_clock_enable>
 801560c:	f001 f8de 	bl	80167cc <enet_deinit>
 8015610:	f000 fd38 	bl	8016084 <enet_software_reset>
 8015614:	b900      	cbnz	r0, 8015618 <emac_start+0xec>
 8015616:	e7fe      	b.n	8015616 <emac_start+0xea>
 8015618:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801561c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8015620:	2001      	movs	r0, #1
 8015622:	f000 feb3 	bl	801638c <enet_init>
 8015626:	4b14      	ldr	r3, [pc, #80]	; (8015678 <emac_start+0x14c>)
 8015628:	6018      	str	r0, [r3, #0]
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	b903      	cbnz	r3, 8015630 <emac_start+0x104>
 801562e:	e7fe      	b.n	801562e <emac_start+0x102>
 8015630:	4620      	mov	r0, r4
 8015632:	f000 fb9f 	bl	8015d74 <mac_address_get>
 8015636:	4621      	mov	r1, r4
 8015638:	2000      	movs	r0, #0
 801563a:	f000 fe07 	bl	801624c <enet_mac_address_set>
 801563e:	f44f 00e0 	mov.w	r0, #7340032	; 0x700000
 8015642:	f000 fd33 	bl	80160ac <enet_descriptors_chain_init>
 8015646:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
 801564a:	f000 fd2f 	bl	80160ac <enet_descriptors_chain_init>
 801564e:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8015652:	480a      	ldr	r0, [pc, #40]	; (801567c <emac_start+0x150>)
 8015654:	f000 fdf4 	bl	8016240 <enet_transmit_checksum_config>
 8015658:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 801565c:	4808      	ldr	r0, [pc, #32]	; (8015680 <emac_start+0x154>)
 801565e:	f000 fdef 	bl	8016240 <enet_transmit_checksum_config>
 8015662:	f001 f82b 	bl	80166bc <enet_enable>
 8015666:	2001      	movs	r0, #1
 8015668:	bd10      	pop	{r4, pc}
 801566a:	bf00      	nop
 801566c:	40010800 	andmi	r0, r1, r0, lsl #16
 8015670:	40011000 	andmi	r1, r1, r0
 8015674:	40010c00 	andmi	r0, r1, r0, lsl #24
 8015678:	2000a9e0 	andcs	sl, r0, r0, ror #19
 801567c:	20015a34 	andcs	r5, r1, r4, lsr sl
 8015680:	20015a44 	andcs	r5, r1, r4, asr #20

08015684 <emac_eth_recv>:
 8015684:	b538      	push	{r3, r4, r5, lr}
 8015686:	4605      	mov	r5, r0
 8015688:	f001 f870 	bl	801676c <enet_rxframe_size_get>
 801568c:	4604      	mov	r4, r0
 801568e:	b138      	cbz	r0, 80156a0 <emac_eth_recv+0x1c>
 8015690:	4b05      	ldr	r3, [pc, #20]	; (80156a8 <emac_eth_recv+0x24>)
 8015692:	2105      	movs	r1, #5
 8015694:	6818      	ldr	r0, [r3, #0]
 8015696:	f001 f818 	bl	80166ca <enet_desc_information_get>
 801569a:	6028      	str	r0, [r5, #0]
 801569c:	4620      	mov	r0, r4
 801569e:	bd38      	pop	{r3, r4, r5, pc}
 80156a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80156a4:	e7fb      	b.n	801569e <emac_eth_recv+0x1a>
 80156a6:	bf00      	nop
 80156a8:	200129f0 	strdcs	r2, [r1], -r0

080156ac <emac_free_pkt>:
 80156ac:	2100      	movs	r1, #0
 80156ae:	4608      	mov	r0, r1
 80156b0:	f000 bd44 	b.w	801613c <enet_frame_receive>

080156b4 <emac_eth_send>:
 80156b4:	f000 bd82 	b.w	80161bc <enet_frame_transmit>

080156b8 <gd32_adc_init()>:
 80156b8:	b510      	push	{r4, lr}
 80156ba:	f240 6009 	movw	r0, #1545	; 0x609
 80156be:	4c21      	ldr	r4, [pc, #132]	; (8015744 <gd32_adc_init()+0x8c>)
 80156c0:	f7ff fc78 	bl	8014fb4 <rcu_periph_clock_enable>
 80156c4:	2005      	movs	r0, #5
 80156c6:	f7ff fcbd 	bl	8015044 <rcu_adc_clock_config>
 80156ca:	4620      	mov	r0, r4
 80156cc:	2201      	movs	r2, #1
 80156ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80156d2:	f000 fb71 	bl	8015db8 <adc_special_function_config>
 80156d6:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80156da:	4620      	mov	r0, r4
 80156dc:	2102      	movs	r1, #2
 80156de:	f000 fc0b 	bl	8015ef8 <adc_external_trigger_source_config>
 80156e2:	2100      	movs	r1, #0
 80156e4:	4620      	mov	r0, r4
 80156e6:	f000 fb8f 	bl	8015e08 <adc_data_alignment_config>
 80156ea:	2000      	movs	r0, #0
 80156ec:	f000 fb54 	bl	8015d98 <adc_mode_config>
 80156f0:	2202      	movs	r2, #2
 80156f2:	4620      	mov	r0, r4
 80156f4:	4611      	mov	r1, r2
 80156f6:	f000 fbb3 	bl	8015e60 <adc_channel_length_config>
 80156fa:	4620      	mov	r0, r4
 80156fc:	2307      	movs	r3, #7
 80156fe:	2210      	movs	r2, #16
 8015700:	2100      	movs	r1, #0
 8015702:	f000 fbca 	bl	8015e9a <adc_inserted_channel_config>
 8015706:	2307      	movs	r3, #7
 8015708:	4620      	mov	r0, r4
 801570a:	2211      	movs	r2, #17
 801570c:	2101      	movs	r1, #1
 801570e:	f000 fbc4 	bl	8015e9a <adc_inserted_channel_config>
 8015712:	2201      	movs	r2, #1
 8015714:	2102      	movs	r1, #2
 8015716:	4620      	mov	r0, r4
 8015718:	f000 fbff 	bl	8015f1a <adc_external_trigger_config>
 801571c:	f000 fb96 	bl	8015e4c <adc_tempsensor_vrefint_enable>
 8015720:	4620      	mov	r0, r4
 8015722:	f000 fb7a 	bl	8015e1a <adc_enable>
 8015726:	2100      	movs	r1, #0
 8015728:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801572c:	f000 fb0a 	bl	8015d44 <udelay(unsigned int, unsigned int)>
 8015730:	4620      	mov	r0, r4
 8015732:	f000 fb7a 	bl	8015e2a <adc_calibration_enable>
 8015736:	4620      	mov	r0, r4
 8015738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801573c:	2102      	movs	r1, #2
 801573e:	f000 bc07 	b.w	8015f50 <adc_software_trigger_enable>
 8015742:	bf00      	nop
 8015744:	40012400 	andmi	r2, r1, r0, lsl #8

08015748 <_stop() [clone .isra.0]>:
 8015748:	b508      	push	{r3, lr}
 801574a:	4806      	ldr	r0, [pc, #24]	; (8015764 <_stop() [clone .isra.0]+0x1c>)
 801574c:	f001 f8ce 	bl	80168ec <i2c_stop_on_bus>
 8015750:	f640 73ff 	movw	r3, #4095	; 0xfff
 8015754:	4a04      	ldr	r2, [pc, #16]	; (8015768 <_stop() [clone .isra.0]+0x20>)
 8015756:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
 801575a:	0589      	lsls	r1, r1, #22
 801575c:	d501      	bpl.n	8015762 <_stop() [clone .isra.0]+0x1a>
 801575e:	3b01      	subs	r3, #1
 8015760:	d1f9      	bne.n	8015756 <_stop() [clone .isra.0]+0xe>
 8015762:	bd08      	pop	{r3, pc}
 8015764:	40005400 	andmi	r5, r0, r0, lsl #8
 8015768:	40005000 	andmi	r5, r0, r0

0801576c <gd32_i2c_begin()>:
 801576c:	b510      	push	{r4, lr}
 801576e:	f240 7015 	movw	r0, #1813	; 0x715
 8015772:	f7ff fc1f 	bl	8014fb4 <rcu_periph_clock_enable>
 8015776:	4c15      	ldr	r4, [pc, #84]	; (80157cc <gd32_i2c_begin()+0x60>)
 8015778:	f240 6003 	movw	r0, #1539	; 0x603
 801577c:	f7ff fc1a 	bl	8014fb4 <rcu_periph_clock_enable>
 8015780:	f240 6003 	movw	r0, #1539	; 0x603
 8015784:	f7ff fc16 	bl	8014fb4 <rcu_periph_clock_enable>
 8015788:	4620      	mov	r0, r4
 801578a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801578e:	2203      	movs	r2, #3
 8015790:	211c      	movs	r1, #28
 8015792:	f7ff fb77 	bl	8014e84 <gpio_init>
 8015796:	f44f 7300 	mov.w	r3, #512	; 0x200
 801579a:	2203      	movs	r2, #3
 801579c:	4620      	mov	r0, r4
 801579e:	211c      	movs	r1, #28
 80157a0:	f7ff fb70 	bl	8014e84 <gpio_init>
 80157a4:	f5a4 4438 	sub.w	r4, r4, #47104	; 0xb800
 80157a8:	2101      	movs	r1, #1
 80157aa:	2002      	movs	r0, #2
 80157ac:	f7ff fbbe 	bl	8014f2c <gpio_pin_remap_config>
 80157b0:	4620      	mov	r0, r4
 80157b2:	4907      	ldr	r1, [pc, #28]	; (80157d0 <gd32_i2c_begin()+0x64>)
 80157b4:	2200      	movs	r2, #0
 80157b6:	f001 f817 	bl	80167e8 <i2c_clock_config>
 80157ba:	4620      	mov	r0, r4
 80157bc:	f001 f88c 	bl	80168d8 <i2c_enable>
 80157c0:	4620      	mov	r0, r4
 80157c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80157c6:	2101      	movs	r1, #1
 80157c8:	f001 b86c 	b.w	80168a4 <i2c_ack_config>
 80157cc:	40010c00 	andmi	r0, r1, r0, lsl #24
 80157d0:	00061a80 	andeq	r1, r6, r0, lsl #21

080157d4 <gd32_i2c_set_baudrate(unsigned int)>:
 80157d4:	4601      	mov	r1, r0
 80157d6:	2200      	movs	r2, #0
 80157d8:	4801      	ldr	r0, [pc, #4]	; (80157e0 <gd32_i2c_set_baudrate(unsigned int)+0xc>)
 80157da:	f001 b805 	b.w	80167e8 <i2c_clock_config>
 80157de:	bf00      	nop
 80157e0:	40005400 	andmi	r5, r0, r0, lsl #8

080157e4 <gd32_i2c_set_address(unsigned char)>:
 80157e4:	4b01      	ldr	r3, [pc, #4]	; (80157ec <gd32_i2c_set_address(unsigned char)+0x8>)
 80157e6:	0040      	lsls	r0, r0, #1
 80157e8:	7018      	strb	r0, [r3, #0]
 80157ea:	4770      	bx	lr
 80157ec:	2000a9e4 	andcs	sl, r0, r4, ror #19

080157f0 <gd32_i2c_write(char const*, unsigned int)>:
 80157f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157f2:	4604      	mov	r4, r0
 80157f4:	460f      	mov	r7, r1
 80157f6:	f640 75ff 	movw	r5, #4095	; 0xfff
 80157fa:	4e2e      	ldr	r6, [pc, #184]	; (80158b4 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 80157fc:	f240 6101 	movw	r1, #1537	; 0x601
 8015800:	4630      	mov	r0, r6
 8015802:	f001 f87d 	bl	8016900 <i2c_flag_get>
 8015806:	b138      	cbz	r0, 8015818 <gd32_i2c_write(char const*, unsigned int)+0x28>
 8015808:	3d01      	subs	r5, #1
 801580a:	d1f7      	bne.n	80157fc <gd32_i2c_write(char const*, unsigned int)+0xc>
 801580c:	f7ff ff9c 	bl	8015748 <_stop() [clone .isra.0]>
 8015810:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015814:	4240      	negs	r0, r0
 8015816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015818:	4826      	ldr	r0, [pc, #152]	; (80158b4 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 801581a:	f001 f862 	bl	80168e2 <i2c_start_on_bus>
 801581e:	f640 75ff 	movw	r5, #4095	; 0xfff
 8015822:	4e24      	ldr	r6, [pc, #144]	; (80158b4 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8015824:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8015828:	4630      	mov	r0, r6
 801582a:	f001 f869 	bl	8016900 <i2c_flag_get>
 801582e:	bb68      	cbnz	r0, 801588c <gd32_i2c_write(char const*, unsigned int)+0x9c>
 8015830:	3d01      	subs	r5, #1
 8015832:	d1f7      	bne.n	8015824 <gd32_i2c_write(char const*, unsigned int)+0x34>
 8015834:	e7ea      	b.n	801580c <gd32_i2c_write(char const*, unsigned int)+0x1c>
 8015836:	f240 5101 	movw	r1, #1281	; 0x501
 801583a:	481e      	ldr	r0, [pc, #120]	; (80158b4 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 801583c:	f001 f868 	bl	8016910 <i2c_flag_clear>
 8015840:	f640 75ff 	movw	r5, #4095	; 0xfff
 8015844:	4e1b      	ldr	r6, [pc, #108]	; (80158b4 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8015846:	f240 5107 	movw	r1, #1287	; 0x507
 801584a:	4630      	mov	r0, r6
 801584c:	f001 f858 	bl	8016900 <i2c_flag_get>
 8015850:	2801      	cmp	r0, #1
 8015852:	d114      	bne.n	801587e <gd32_i2c_write(char const*, unsigned int)+0x8e>
 8015854:	4e17      	ldr	r6, [pc, #92]	; (80158b4 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8015856:	4427      	add	r7, r4
 8015858:	42a7      	cmp	r7, r4
 801585a:	d013      	beq.n	8015884 <gd32_i2c_write(char const*, unsigned int)+0x94>
 801585c:	4630      	mov	r0, r6
 801585e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015862:	f001 f848 	bl	80168f6 <i2c_data_transmit>
 8015866:	f640 75ff 	movw	r5, #4095	; 0xfff
 801586a:	f240 5102 	movw	r1, #1282	; 0x502
 801586e:	4630      	mov	r0, r6
 8015870:	f001 f846 	bl	8016900 <i2c_flag_get>
 8015874:	2800      	cmp	r0, #0
 8015876:	d1ef      	bne.n	8015858 <gd32_i2c_write(char const*, unsigned int)+0x68>
 8015878:	3d01      	subs	r5, #1
 801587a:	d1f6      	bne.n	801586a <gd32_i2c_write(char const*, unsigned int)+0x7a>
 801587c:	e7c6      	b.n	801580c <gd32_i2c_write(char const*, unsigned int)+0x1c>
 801587e:	3d01      	subs	r5, #1
 8015880:	d1e1      	bne.n	8015846 <gd32_i2c_write(char const*, unsigned int)+0x56>
 8015882:	e7c3      	b.n	801580c <gd32_i2c_write(char const*, unsigned int)+0x1c>
 8015884:	f7ff ff60 	bl	8015748 <_stop() [clone .isra.0]>
 8015888:	2000      	movs	r0, #0
 801588a:	e7c3      	b.n	8015814 <gd32_i2c_write(char const*, unsigned int)+0x24>
 801588c:	4b0a      	ldr	r3, [pc, #40]	; (80158b8 <gd32_i2c_write(char const*, unsigned int)+0xc8>)
 801588e:	f06f 0201 	mvn.w	r2, #1
 8015892:	7819      	ldrb	r1, [r3, #0]
 8015894:	4807      	ldr	r0, [pc, #28]	; (80158b4 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8015896:	f001 f817 	bl	80168c8 <i2c_master_addressing>
 801589a:	f640 75ff 	movw	r5, #4095	; 0xfff
 801589e:	4e05      	ldr	r6, [pc, #20]	; (80158b4 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 80158a0:	f240 5101 	movw	r1, #1281	; 0x501
 80158a4:	4630      	mov	r0, r6
 80158a6:	f001 f82b 	bl	8016900 <i2c_flag_get>
 80158aa:	2800      	cmp	r0, #0
 80158ac:	d1c3      	bne.n	8015836 <gd32_i2c_write(char const*, unsigned int)+0x46>
 80158ae:	3d01      	subs	r5, #1
 80158b0:	d1f6      	bne.n	80158a0 <gd32_i2c_write(char const*, unsigned int)+0xb0>
 80158b2:	e7ab      	b.n	801580c <gd32_i2c_write(char const*, unsigned int)+0x1c>
 80158b4:	40005400 	andmi	r5, r0, r0, lsl #8
 80158b8:	2000a9e4 	andcs	sl, r0, r4, ror #19

080158bc <gd32_i2c_read(char*, unsigned int)>:
 80158bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80158c0:	4680      	mov	r8, r0
 80158c2:	460c      	mov	r4, r1
 80158c4:	f640 76ff 	movw	r6, #4095	; 0xfff
 80158c8:	4f49      	ldr	r7, [pc, #292]	; (80159f0 <gd32_i2c_read(char*, unsigned int)+0x134>)
 80158ca:	f240 6101 	movw	r1, #1537	; 0x601
 80158ce:	4638      	mov	r0, r7
 80158d0:	f001 f816 	bl	8016900 <i2c_flag_get>
 80158d4:	4605      	mov	r5, r0
 80158d6:	b128      	cbz	r0, 80158e4 <gd32_i2c_read(char*, unsigned int)+0x28>
 80158d8:	3e01      	subs	r6, #1
 80158da:	d1f6      	bne.n	80158ca <gd32_i2c_read(char*, unsigned int)+0xe>
 80158dc:	f7ff ff34 	bl	8015748 <_stop() [clone .isra.0]>
 80158e0:	2504      	movs	r5, #4
 80158e2:	e082      	b.n	80159ea <gd32_i2c_read(char*, unsigned int)+0x12e>
 80158e4:	2c02      	cmp	r4, #2
 80158e6:	d103      	bne.n	80158f0 <gd32_i2c_read(char*, unsigned int)+0x34>
 80158e8:	4601      	mov	r1, r0
 80158ea:	4841      	ldr	r0, [pc, #260]	; (80159f0 <gd32_i2c_read(char*, unsigned int)+0x134>)
 80158ec:	f000 ffe3 	bl	80168b6 <i2c_ackpos_config>
 80158f0:	483f      	ldr	r0, [pc, #252]	; (80159f0 <gd32_i2c_read(char*, unsigned int)+0x134>)
 80158f2:	f000 fff6 	bl	80168e2 <i2c_start_on_bus>
 80158f6:	f640 76ff 	movw	r6, #4095	; 0xfff
 80158fa:	4f3d      	ldr	r7, [pc, #244]	; (80159f0 <gd32_i2c_read(char*, unsigned int)+0x134>)
 80158fc:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8015900:	4638      	mov	r0, r7
 8015902:	f000 fffd 	bl	8016900 <i2c_flag_get>
 8015906:	b910      	cbnz	r0, 801590e <gd32_i2c_read(char*, unsigned int)+0x52>
 8015908:	3e01      	subs	r6, #1
 801590a:	d1f7      	bne.n	80158fc <gd32_i2c_read(char*, unsigned int)+0x40>
 801590c:	e7e6      	b.n	80158dc <gd32_i2c_read(char*, unsigned int)+0x20>
 801590e:	4b39      	ldr	r3, [pc, #228]	; (80159f4 <gd32_i2c_read(char*, unsigned int)+0x138>)
 8015910:	2201      	movs	r2, #1
 8015912:	7819      	ldrb	r1, [r3, #0]
 8015914:	4836      	ldr	r0, [pc, #216]	; (80159f0 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8015916:	f000 ffd7 	bl	80168c8 <i2c_master_addressing>
 801591a:	2c02      	cmp	r4, #2
 801591c:	d803      	bhi.n	8015926 <gd32_i2c_read(char*, unsigned int)+0x6a>
 801591e:	2100      	movs	r1, #0
 8015920:	4833      	ldr	r0, [pc, #204]	; (80159f0 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8015922:	f000 ffbf 	bl	80168a4 <i2c_ack_config>
 8015926:	f640 76ff 	movw	r6, #4095	; 0xfff
 801592a:	4f31      	ldr	r7, [pc, #196]	; (80159f0 <gd32_i2c_read(char*, unsigned int)+0x134>)
 801592c:	f240 5101 	movw	r1, #1281	; 0x501
 8015930:	4638      	mov	r0, r7
 8015932:	f000 ffe5 	bl	8016900 <i2c_flag_get>
 8015936:	b910      	cbnz	r0, 801593e <gd32_i2c_read(char*, unsigned int)+0x82>
 8015938:	3e01      	subs	r6, #1
 801593a:	d1f7      	bne.n	801592c <gd32_i2c_read(char*, unsigned int)+0x70>
 801593c:	e7ce      	b.n	80158dc <gd32_i2c_read(char*, unsigned int)+0x20>
 801593e:	f240 5101 	movw	r1, #1281	; 0x501
 8015942:	482b      	ldr	r0, [pc, #172]	; (80159f0 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8015944:	f000 ffe4 	bl	8016910 <i2c_flag_clear>
 8015948:	2c01      	cmp	r4, #1
 801594a:	d102      	bne.n	8015952 <gd32_i2c_read(char*, unsigned int)+0x96>
 801594c:	4828      	ldr	r0, [pc, #160]	; (80159f0 <gd32_i2c_read(char*, unsigned int)+0x134>)
 801594e:	f000 ffcd 	bl	80168ec <i2c_stop_on_bus>
 8015952:	f640 77ff 	movw	r7, #4095	; 0xfff
 8015956:	4e26      	ldr	r6, [pc, #152]	; (80159f0 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8015958:	b3ac      	cbz	r4, 80159c6 <gd32_i2c_read(char*, unsigned int)+0x10a>
 801595a:	2c03      	cmp	r4, #3
 801595c:	d121      	bne.n	80159a2 <gd32_i2c_read(char*, unsigned int)+0xe6>
 801595e:	f640 79ff 	movw	r9, #4095	; 0xfff
 8015962:	f240 5102 	movw	r1, #1282	; 0x502
 8015966:	4630      	mov	r0, r6
 8015968:	f000 ffca 	bl	8016900 <i2c_flag_get>
 801596c:	b918      	cbnz	r0, 8015976 <gd32_i2c_read(char*, unsigned int)+0xba>
 801596e:	f1b9 0901 	subs.w	r9, r9, #1
 8015972:	d1f6      	bne.n	8015962 <gd32_i2c_read(char*, unsigned int)+0xa6>
 8015974:	e7b2      	b.n	80158dc <gd32_i2c_read(char*, unsigned int)+0x20>
 8015976:	2100      	movs	r1, #0
 8015978:	4630      	mov	r0, r6
 801597a:	f000 ff93 	bl	80168a4 <i2c_ack_config>
 801597e:	f240 5106 	movw	r1, #1286	; 0x506
 8015982:	4630      	mov	r0, r6
 8015984:	f000 ffbc 	bl	8016900 <i2c_flag_get>
 8015988:	b138      	cbz	r0, 801599a <gd32_i2c_read(char*, unsigned int)+0xde>
 801598a:	4630      	mov	r0, r6
 801598c:	f000 ffb5 	bl	80168fa <i2c_data_receive>
 8015990:	f640 77ff 	movw	r7, #4095	; 0xfff
 8015994:	f808 0b01 	strb.w	r0, [r8], #1
 8015998:	3c01      	subs	r4, #1
 801599a:	3f01      	subs	r7, #1
 801599c:	2f00      	cmp	r7, #0
 801599e:	dcdb      	bgt.n	8015958 <gd32_i2c_read(char*, unsigned int)+0x9c>
 80159a0:	e79c      	b.n	80158dc <gd32_i2c_read(char*, unsigned int)+0x20>
 80159a2:	2c02      	cmp	r4, #2
 80159a4:	d1eb      	bne.n	801597e <gd32_i2c_read(char*, unsigned int)+0xc2>
 80159a6:	f640 79ff 	movw	r9, #4095	; 0xfff
 80159aa:	f240 5102 	movw	r1, #1282	; 0x502
 80159ae:	4630      	mov	r0, r6
 80159b0:	f000 ffa6 	bl	8016900 <i2c_flag_get>
 80159b4:	b918      	cbnz	r0, 80159be <gd32_i2c_read(char*, unsigned int)+0x102>
 80159b6:	f1b9 0901 	subs.w	r9, r9, #1
 80159ba:	d1f6      	bne.n	80159aa <gd32_i2c_read(char*, unsigned int)+0xee>
 80159bc:	e78e      	b.n	80158dc <gd32_i2c_read(char*, unsigned int)+0x20>
 80159be:	4630      	mov	r0, r6
 80159c0:	f000 ff94 	bl	80168ec <i2c_stop_on_bus>
 80159c4:	e7db      	b.n	801597e <gd32_i2c_read(char*, unsigned int)+0xc2>
 80159c6:	f640 73ff 	movw	r3, #4095	; 0xfff
 80159ca:	4a0b      	ldr	r2, [pc, #44]	; (80159f8 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 80159cc:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
 80159d0:	0589      	lsls	r1, r1, #22
 80159d2:	d502      	bpl.n	80159da <gd32_i2c_read(char*, unsigned int)+0x11e>
 80159d4:	3b01      	subs	r3, #1
 80159d6:	d1f9      	bne.n	80159cc <gd32_i2c_read(char*, unsigned int)+0x110>
 80159d8:	e782      	b.n	80158e0 <gd32_i2c_read(char*, unsigned int)+0x24>
 80159da:	2101      	movs	r1, #1
 80159dc:	4804      	ldr	r0, [pc, #16]	; (80159f0 <gd32_i2c_read(char*, unsigned int)+0x134>)
 80159de:	f000 ff61 	bl	80168a4 <i2c_ack_config>
 80159e2:	2101      	movs	r1, #1
 80159e4:	4802      	ldr	r0, [pc, #8]	; (80159f0 <gd32_i2c_read(char*, unsigned int)+0x134>)
 80159e6:	f000 ff66 	bl	80168b6 <i2c_ackpos_config>
 80159ea:	4628      	mov	r0, r5
 80159ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80159f0:	40005400 	andmi	r5, r0, r0, lsl #8
 80159f4:	2000a9e4 	andcs	sl, r0, r4, ror #19
 80159f8:	40005000 	andmi	r5, r0, r0

080159fc <gd32_spi_dma_begin()>:
 80159fc:	b530      	push	{r4, r5, lr}
 80159fe:	f240 6002 	movw	r0, #1538	; 0x602
 8015a02:	b089      	sub	sp, #36	; 0x24
 8015a04:	f7ff fad6 	bl	8014fb4 <rcu_periph_clock_enable>
 8015a08:	f240 6003 	movw	r0, #1539	; 0x603
 8015a0c:	f7ff fad2 	bl	8014fb4 <rcu_periph_clock_enable>
 8015a10:	f240 700f 	movw	r0, #1807	; 0x70f
 8015a14:	f7ff face 	bl	8014fb4 <rcu_periph_clock_enable>
 8015a18:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8015a1c:	f7ff faca 	bl	8014fb4 <rcu_periph_clock_enable>
 8015a20:	2338      	movs	r3, #56	; 0x38
 8015a22:	2203      	movs	r2, #3
 8015a24:	2118      	movs	r1, #24
 8015a26:	4829      	ldr	r0, [pc, #164]	; (8015acc <gd32_spi_dma_begin()+0xd0>)
 8015a28:	f7ff fa2c 	bl	8014e84 <gpio_init>
 8015a2c:	4c28      	ldr	r4, [pc, #160]	; (8015ad0 <gd32_spi_dma_begin()+0xd4>)
 8015a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015a32:	2203      	movs	r2, #3
 8015a34:	2118      	movs	r1, #24
 8015a36:	4827      	ldr	r0, [pc, #156]	; (8015ad4 <gd32_spi_dma_begin()+0xd8>)
 8015a38:	f7ff fa24 	bl	8014e84 <gpio_init>
 8015a3c:	2101      	movs	r1, #1
 8015a3e:	4826      	ldr	r0, [pc, #152]	; (8015ad8 <gd32_spi_dma_begin()+0xdc>)
 8015a40:	f7ff fa74 	bl	8014f2c <gpio_pin_remap_config>
 8015a44:	4620      	mov	r0, r4
 8015a46:	f000 ffe2 	bl	8016a0e <i2s_disable>
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	4620      	mov	r0, r4
 8015a4e:	461a      	mov	r2, r3
 8015a50:	4922      	ldr	r1, [pc, #136]	; (8015adc <gd32_spi_dma_begin()+0xe0>)
 8015a52:	f000 ff7f 	bl	8016954 <i2s_psc_config>
 8015a56:	2300      	movs	r3, #0
 8015a58:	2210      	movs	r2, #16
 8015a5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8015a5e:	4620      	mov	r0, r4
 8015a60:	f000 ff69 	bl	8016936 <i2s_init>
 8015a64:	4620      	mov	r0, r4
 8015a66:	f000 ffcd 	bl	8016a04 <i2s_enable>
 8015a6a:	f504 34e4 	add.w	r4, r4, #116736	; 0x1c800
 8015a6e:	f240 5001 	movw	r0, #1281	; 0x501
 8015a72:	f7ff fa9f 	bl	8014fb4 <rcu_periph_clock_enable>
 8015a76:	2101      	movs	r1, #1
 8015a78:	4620      	mov	r0, r4
 8015a7a:	f000 fa77 	bl	8015f6c <dma_deinit>
 8015a7e:	a801      	add	r0, sp, #4
 8015a80:	f000 fa90 	bl	8015fa4 <dma_struct_para_init>
 8015a84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015a88:	2501      	movs	r5, #1
 8015a8a:	9304      	str	r3, [sp, #16]
 8015a8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8015a90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015a94:	4912      	ldr	r1, [pc, #72]	; (8015ae0 <gd32_spi_dma_begin()+0xe4>)
 8015a96:	4620      	mov	r0, r4
 8015a98:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8015a9c:	9206      	str	r2, [sp, #24]
 8015a9e:	4629      	mov	r1, r5
 8015aa0:	aa01      	add	r2, sp, #4
 8015aa2:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015aa6:	f88d 501e 	strb.w	r5, [sp, #30]
 8015aaa:	f000 fa85 	bl	8015fb8 <dma_init>
 8015aae:	4629      	mov	r1, r5
 8015ab0:	4620      	mov	r0, r4
 8015ab2:	f000 fabb 	bl	801602c <dma_circulation_disable>
 8015ab6:	4629      	mov	r1, r5
 8015ab8:	4620      	mov	r0, r4
 8015aba:	f000 fac7 	bl	801604c <dma_memory_to_memory_disable>
 8015abe:	2200      	movs	r2, #0
 8015ac0:	4b08      	ldr	r3, [pc, #32]	; (8015ae4 <gd32_spi_dma_begin()+0xe8>)
 8015ac2:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8015ac6:	b009      	add	sp, #36	; 0x24
 8015ac8:	bd30      	pop	{r4, r5, pc}
 8015aca:	bf00      	nop
 8015acc:	40010c00 	andmi	r0, r1, r0, lsl #24
 8015ad0:	40003c00 	andmi	r3, r0, r0, lsl #24
 8015ad4:	40010800 	andmi	r0, r1, r0, lsl #16
 8015ad8:	00300400 	eorseq	r0, r0, r0, lsl #8
 8015adc:	00030d40 	andeq	r0, r3, r0, asr #26
 8015ae0:	40003c0c 	andmi	r3, r0, ip, lsl #24
 8015ae4:	40020000 	andmi	r0, r2, r0

08015ae8 <gd32_spi_dma_set_speed_hz(unsigned int)>:
 8015ae8:	b538      	push	{r3, r4, r5, lr}
 8015aea:	4c08      	ldr	r4, [pc, #32]	; (8015b0c <gd32_spi_dma_set_speed_hz(unsigned int)+0x24>)
 8015aec:	4605      	mov	r5, r0
 8015aee:	4620      	mov	r0, r4
 8015af0:	f000 ff8d 	bl	8016a0e <i2s_disable>
 8015af4:	2300      	movs	r3, #0
 8015af6:	4620      	mov	r0, r4
 8015af8:	461a      	mov	r2, r3
 8015afa:	0969      	lsrs	r1, r5, #5
 8015afc:	f000 ff2a 	bl	8016954 <i2s_psc_config>
 8015b00:	4620      	mov	r0, r4
 8015b02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015b06:	f000 bf7d 	b.w	8016a04 <i2s_enable>
 8015b0a:	bf00      	nop
 8015b0c:	40003c00 	andmi	r3, r0, r0, lsl #24

08015b10 <gd32_spi_dma_tx_prepare(unsigned int*)>:
 8015b10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015b14:	6003      	str	r3, [r0, #0]
 8015b16:	4801      	ldr	r0, [pc, #4]	; (8015b1c <gd32_spi_dma_tx_prepare(unsigned int*)+0xc>)
 8015b18:	4770      	bx	lr
 8015b1a:	bf00      	nop
 8015b1c:	2000a9e8 	andcs	sl, r0, r8, ror #19

08015b20 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>:
 8015b20:	4a0a      	ldr	r2, [pc, #40]	; (8015b4c <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x2c>)
 8015b22:	3101      	adds	r1, #1
 8015b24:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
 8015b28:	f3c1 014f 	ubfx	r1, r1, #1, #16
 8015b2c:	f023 0301 	bic.w	r3, r3, #1
 8015b30:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 8015b34:	f043 0301 	orr.w	r3, r3, #1
 8015b38:	f8c2 0428 	str.w	r0, [r2, #1064]	; 0x428
 8015b3c:	f8c2 1420 	str.w	r1, [r2, #1056]	; 0x420
 8015b40:	4803      	ldr	r0, [pc, #12]	; (8015b50 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x30>)
 8015b42:	2100      	movs	r1, #0
 8015b44:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 8015b48:	f000 bf66 	b.w	8016a18 <spi_dma_enable>
 8015b4c:	40020000 	andmi	r0, r2, r0
 8015b50:	40003c00 	andmi	r3, r0, r0, lsl #24

08015b54 <gd32_spi_dma_tx_is_active()>:
 8015b54:	4b03      	ldr	r3, [pc, #12]	; (8015b64 <gd32_spi_dma_tx_is_active()+0x10>)
 8015b56:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
 8015b5a:	3800      	subs	r0, #0
 8015b5c:	bf18      	it	ne
 8015b5e:	2001      	movne	r0, #1
 8015b60:	4770      	bx	lr
 8015b62:	bf00      	nop
 8015b64:	40020000 	andmi	r0, r2, r0

08015b68 <gd32_uart_begin>:
 8015b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b6a:	461d      	mov	r5, r3
 8015b6c:	4b63      	ldr	r3, [pc, #396]	; (8015cfc <gd32_uart_begin+0x194>)
 8015b6e:	4604      	mov	r4, r0
 8015b70:	4298      	cmp	r0, r3
 8015b72:	460f      	mov	r7, r1
 8015b74:	4616      	mov	r6, r2
 8015b76:	d03b      	beq.n	8015bf0 <gd32_uart_begin+0x88>
 8015b78:	d80a      	bhi.n	8015b90 <gd32_uart_begin+0x28>
 8015b7a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015b7e:	4298      	cmp	r0, r3
 8015b80:	d02f      	beq.n	8015be2 <gd32_uart_begin+0x7a>
 8015b82:	f240 7012 	movw	r0, #1810	; 0x712
 8015b86:	f7ff fa15 	bl	8014fb4 <rcu_periph_clock_enable>
 8015b8a:	f240 6004 	movw	r0, #1540	; 0x604
 8015b8e:	e008      	b.n	8015ba2 <gd32_uart_begin+0x3a>
 8015b90:	4b5b      	ldr	r3, [pc, #364]	; (8015d00 <gd32_uart_begin+0x198>)
 8015b92:	4298      	cmp	r0, r3
 8015b94:	d02f      	beq.n	8015bf6 <gd32_uart_begin+0x8e>
 8015b96:	f240 600e 	movw	r0, #1550	; 0x60e
 8015b9a:	f7ff fa0b 	bl	8014fb4 <rcu_periph_clock_enable>
 8015b9e:	f240 6003 	movw	r0, #1539	; 0x603
 8015ba2:	f7ff fa07 	bl	8014fb4 <rcu_periph_clock_enable>
 8015ba6:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8015baa:	f7ff fa03 	bl	8014fb4 <rcu_periph_clock_enable>
 8015bae:	4b53      	ldr	r3, [pc, #332]	; (8015cfc <gd32_uart_begin+0x194>)
 8015bb0:	429c      	cmp	r4, r3
 8015bb2:	f000 8085 	beq.w	8015cc0 <gd32_uart_begin+0x158>
 8015bb6:	d829      	bhi.n	8015c0c <gd32_uart_begin+0xa4>
 8015bb8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015bbc:	429c      	cmp	r4, r3
 8015bbe:	d072      	beq.n	8015ca6 <gd32_uart_begin+0x13e>
 8015bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015bc4:	2203      	movs	r2, #3
 8015bc6:	2118      	movs	r1, #24
 8015bc8:	484e      	ldr	r0, [pc, #312]	; (8015d04 <gd32_uart_begin+0x19c>)
 8015bca:	f7ff f95b 	bl	8014e84 <gpio_init>
 8015bce:	2104      	movs	r1, #4
 8015bd0:	484c      	ldr	r0, [pc, #304]	; (8015d04 <gd32_uart_begin+0x19c>)
 8015bd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015bd6:	2203      	movs	r2, #3
 8015bd8:	f7ff f954 	bl	8014e84 <gpio_init>
 8015bdc:	2101      	movs	r1, #1
 8015bde:	484a      	ldr	r0, [pc, #296]	; (8015d08 <gd32_uart_begin+0x1a0>)
 8015be0:	e025      	b.n	8015c2e <gd32_uart_begin+0xc6>
 8015be2:	f240 7011 	movw	r0, #1809	; 0x711
 8015be6:	f7ff f9e5 	bl	8014fb4 <rcu_periph_clock_enable>
 8015bea:	f240 6002 	movw	r0, #1538	; 0x602
 8015bee:	e7d8      	b.n	8015ba2 <gd32_uart_begin+0x3a>
 8015bf0:	f240 7013 	movw	r0, #1811	; 0x713
 8015bf4:	e7c7      	b.n	8015b86 <gd32_uart_begin+0x1e>
 8015bf6:	f240 7014 	movw	r0, #1812	; 0x714
 8015bfa:	f7ff f9db 	bl	8014fb4 <rcu_periph_clock_enable>
 8015bfe:	f240 6004 	movw	r0, #1540	; 0x604
 8015c02:	f7ff f9d7 	bl	8014fb4 <rcu_periph_clock_enable>
 8015c06:	f240 6005 	movw	r0, #1541	; 0x605
 8015c0a:	e7ca      	b.n	8015ba2 <gd32_uart_begin+0x3a>
 8015c0c:	4b3c      	ldr	r3, [pc, #240]	; (8015d00 <gd32_uart_begin+0x198>)
 8015c0e:	429c      	cmp	r4, r3
 8015c10:	d063      	beq.n	8015cda <gd32_uart_begin+0x172>
 8015c12:	2340      	movs	r3, #64	; 0x40
 8015c14:	2203      	movs	r2, #3
 8015c16:	2118      	movs	r1, #24
 8015c18:	483c      	ldr	r0, [pc, #240]	; (8015d0c <gd32_uart_begin+0x1a4>)
 8015c1a:	f7ff f933 	bl	8014e84 <gpio_init>
 8015c1e:	2104      	movs	r1, #4
 8015c20:	483a      	ldr	r0, [pc, #232]	; (8015d0c <gd32_uart_begin+0x1a4>)
 8015c22:	2380      	movs	r3, #128	; 0x80
 8015c24:	2203      	movs	r2, #3
 8015c26:	f7ff f92d 	bl	8014e84 <gpio_init>
 8015c2a:	2101      	movs	r1, #1
 8015c2c:	2004      	movs	r0, #4
 8015c2e:	f7ff f97d 	bl	8014f2c <gpio_pin_remap_config>
 8015c32:	4620      	mov	r0, r4
 8015c34:	f7ff fbda 	bl	80153ec <usart_deinit>
 8015c38:	68e3      	ldr	r3, [r4, #12]
 8015c3a:	4639      	mov	r1, r7
 8015c3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8015c40:	60e3      	str	r3, [r4, #12]
 8015c42:	4620      	mov	r0, r4
 8015c44:	f7ff fc12 	bl	801546c <usart_baudrate_set>
 8015c48:	2e09      	cmp	r6, #9
 8015c4a:	bf0c      	ite	eq
 8015c4c:	f44f 5180 	moveq.w	r1, #4096	; 0x1000
 8015c50:	2100      	movne	r1, #0
 8015c52:	4620      	mov	r0, r4
 8015c54:	f7ff fc3a 	bl	80154cc <usart_word_length_set>
 8015c58:	9b06      	ldr	r3, [sp, #24]
 8015c5a:	4620      	mov	r0, r4
 8015c5c:	2b02      	cmp	r3, #2
 8015c5e:	bf0c      	ite	eq
 8015c60:	f44f 5100 	moveq.w	r1, #8192	; 0x2000
 8015c64:	2100      	movne	r1, #0
 8015c66:	f7ff fc39 	bl	80154dc <usart_stop_bit_set>
 8015c6a:	2d01      	cmp	r5, #1
 8015c6c:	d041      	beq.n	8015cf2 <gd32_uart_begin+0x18a>
 8015c6e:	2d02      	cmp	r5, #2
 8015c70:	d142      	bne.n	8015cf8 <gd32_uart_begin+0x190>
 8015c72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8015c76:	4620      	mov	r0, r4
 8015c78:	f7ff fc20 	bl	80154bc <usart_parity_config>
 8015c7c:	2100      	movs	r1, #0
 8015c7e:	4620      	mov	r0, r4
 8015c80:	f7ff fc40 	bl	8015504 <usart_hardware_flow_rts_config>
 8015c84:	2100      	movs	r1, #0
 8015c86:	4620      	mov	r0, r4
 8015c88:	f7ff fc42 	bl	8015510 <usart_hardware_flow_cts_config>
 8015c8c:	2104      	movs	r1, #4
 8015c8e:	4620      	mov	r0, r4
 8015c90:	f7ff fc32 	bl	80154f8 <usart_receive_config>
 8015c94:	2108      	movs	r1, #8
 8015c96:	4620      	mov	r0, r4
 8015c98:	f7ff fc28 	bl	80154ec <usart_transmit_config>
 8015c9c:	68e3      	ldr	r3, [r4, #12]
 8015c9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015ca2:	60e3      	str	r3, [r4, #12]
 8015ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ca6:	2304      	movs	r3, #4
 8015ca8:	2203      	movs	r2, #3
 8015caa:	2118      	movs	r1, #24
 8015cac:	4818      	ldr	r0, [pc, #96]	; (8015d10 <gd32_uart_begin+0x1a8>)
 8015cae:	f7ff f8e9 	bl	8014e84 <gpio_init>
 8015cb2:	2308      	movs	r3, #8
 8015cb4:	2203      	movs	r2, #3
 8015cb6:	2104      	movs	r1, #4
 8015cb8:	4815      	ldr	r0, [pc, #84]	; (8015d10 <gd32_uart_begin+0x1a8>)
 8015cba:	f7ff f8e3 	bl	8014e84 <gpio_init>
 8015cbe:	e7b8      	b.n	8015c32 <gd32_uart_begin+0xca>
 8015cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015cc4:	2203      	movs	r2, #3
 8015cc6:	2118      	movs	r1, #24
 8015cc8:	480e      	ldr	r0, [pc, #56]	; (8015d04 <gd32_uart_begin+0x19c>)
 8015cca:	f7ff f8db 	bl	8014e84 <gpio_init>
 8015cce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015cd2:	2203      	movs	r2, #3
 8015cd4:	2104      	movs	r1, #4
 8015cd6:	480b      	ldr	r0, [pc, #44]	; (8015d04 <gd32_uart_begin+0x19c>)
 8015cd8:	e7ef      	b.n	8015cba <gd32_uart_begin+0x152>
 8015cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015cde:	2203      	movs	r2, #3
 8015ce0:	2118      	movs	r1, #24
 8015ce2:	4808      	ldr	r0, [pc, #32]	; (8015d04 <gd32_uart_begin+0x19c>)
 8015ce4:	f7ff f8ce 	bl	8014e84 <gpio_init>
 8015ce8:	2304      	movs	r3, #4
 8015cea:	2203      	movs	r2, #3
 8015cec:	4619      	mov	r1, r3
 8015cee:	4809      	ldr	r0, [pc, #36]	; (8015d14 <gd32_uart_begin+0x1ac>)
 8015cf0:	e7e3      	b.n	8015cba <gd32_uart_begin+0x152>
 8015cf2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8015cf6:	e7be      	b.n	8015c76 <gd32_uart_begin+0x10e>
 8015cf8:	2100      	movs	r1, #0
 8015cfa:	e7bc      	b.n	8015c76 <gd32_uart_begin+0x10e>
 8015cfc:	40004c00 	andmi	r4, r0, r0, lsl #24
 8015d00:	40005000 	andmi	r5, r0, r0
 8015d04:	40011000 	andmi	r1, r1, r0
 8015d08:	00140010 	andseq	r0, r4, r0, lsl r0
 8015d0c:	40010c00 	andmi	r0, r1, r0, lsl #24
 8015d10:	40010800 	andmi	r0, r1, r0, lsl #16
 8015d14:	40011400 	andmi	r1, r1, r0, lsl #8

08015d18 <micros_init()>:
 8015d18:	4770      	bx	lr
	...

08015d1c <udelay_init()>:
 8015d1c:	4a07      	ldr	r2, [pc, #28]	; (8015d3c <udelay_init()+0x20>)
 8015d1e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8015d22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8015d26:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8015d2a:	2200      	movs	r2, #0
 8015d2c:	4b04      	ldr	r3, [pc, #16]	; (8015d40 <udelay_init()+0x24>)
 8015d2e:	605a      	str	r2, [r3, #4]
 8015d30:	681a      	ldr	r2, [r3, #0]
 8015d32:	f042 0201 	orr.w	r2, r2, #1
 8015d36:	601a      	str	r2, [r3, #0]
 8015d38:	4770      	bx	lr
 8015d3a:	bf00      	nop
 8015d3c:	e000ed00 	and	lr, r0, r0, lsl #26
 8015d40:	e0001000 	and	r1, r0, r0

08015d44 <udelay(unsigned int, unsigned int)>:
 8015d44:	236c      	movs	r3, #108	; 0x6c
 8015d46:	b510      	push	{r4, lr}
 8015d48:	4358      	muls	r0, r3
 8015d4a:	b909      	cbnz	r1, 8015d50 <udelay(unsigned int, unsigned int)+0xc>
 8015d4c:	4b08      	ldr	r3, [pc, #32]	; (8015d70 <udelay(unsigned int, unsigned int)+0x2c>)
 8015d4e:	6859      	ldr	r1, [r3, #4]
 8015d50:	2300      	movs	r3, #0
 8015d52:	4c07      	ldr	r4, [pc, #28]	; (8015d70 <udelay(unsigned int, unsigned int)+0x2c>)
 8015d54:	6862      	ldr	r2, [r4, #4]
 8015d56:	4291      	cmp	r1, r2
 8015d58:	d0fc      	beq.n	8015d54 <udelay(unsigned int, unsigned int)+0x10>
 8015d5a:	bf28      	it	cs
 8015d5c:	f103 33ff 	addcs.w	r3, r3, #4294967295	; 0xffffffff
 8015d60:	1a5b      	subs	r3, r3, r1
 8015d62:	4413      	add	r3, r2
 8015d64:	4283      	cmp	r3, r0
 8015d66:	d300      	bcc.n	8015d6a <udelay(unsigned int, unsigned int)+0x26>
 8015d68:	bd10      	pop	{r4, pc}
 8015d6a:	4611      	mov	r1, r2
 8015d6c:	e7f2      	b.n	8015d54 <udelay(unsigned int, unsigned int)+0x10>
 8015d6e:	bf00      	nop
 8015d70:	e0001000 	and	r1, r0, r0

08015d74 <mac_address_get>:
 8015d74:	2102      	movs	r1, #2
 8015d76:	4a07      	ldr	r2, [pc, #28]	; (8015d94 <mac_address_get+0x20>)
 8015d78:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 8015d7c:	f8d2 27ec 	ldr.w	r2, [r2, #2028]	; 0x7ec
 8015d80:	7001      	strb	r1, [r0, #0]
 8015d82:	7042      	strb	r2, [r0, #1]
 8015d84:	0e1a      	lsrs	r2, r3, #24
 8015d86:	7082      	strb	r2, [r0, #2]
 8015d88:	0c1a      	lsrs	r2, r3, #16
 8015d8a:	70c2      	strb	r2, [r0, #3]
 8015d8c:	0a1a      	lsrs	r2, r3, #8
 8015d8e:	7102      	strb	r2, [r0, #4]
 8015d90:	7143      	strb	r3, [r0, #5]
 8015d92:	4770      	bx	lr
 8015d94:	1ffff000 	svcne	0x00fff000

08015d98 <adc_mode_config>:
 8015d98:	4b06      	ldr	r3, [pc, #24]	; (8015db4 <adc_mode_config+0x1c>)
 8015d9a:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
 8015d9e:	f421 2170 	bic.w	r1, r1, #983040	; 0xf0000
 8015da2:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
 8015da6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8015daa:	4302      	orrs	r2, r0
 8015dac:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8015db0:	4770      	bx	lr
 8015db2:	bf00      	nop
 8015db4:	40012000 	andmi	r2, r1, r0

08015db8 <adc_special_function_config>:
 8015db8:	b510      	push	{r4, lr}
 8015dba:	f401 7380 	and.w	r3, r1, #256	; 0x100
 8015dbe:	f401 6480 	and.w	r4, r1, #1024	; 0x400
 8015dc2:	f001 0102 	and.w	r1, r1, #2
 8015dc6:	b17a      	cbz	r2, 8015de8 <adc_special_function_config+0x30>
 8015dc8:	b11b      	cbz	r3, 8015dd2 <adc_special_function_config+0x1a>
 8015dca:	6843      	ldr	r3, [r0, #4]
 8015dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015dd0:	6043      	str	r3, [r0, #4]
 8015dd2:	b11c      	cbz	r4, 8015ddc <adc_special_function_config+0x24>
 8015dd4:	6843      	ldr	r3, [r0, #4]
 8015dd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8015dda:	6043      	str	r3, [r0, #4]
 8015ddc:	b119      	cbz	r1, 8015de6 <adc_special_function_config+0x2e>
 8015dde:	6883      	ldr	r3, [r0, #8]
 8015de0:	f043 0302 	orr.w	r3, r3, #2
 8015de4:	6083      	str	r3, [r0, #8]
 8015de6:	bd10      	pop	{r4, pc}
 8015de8:	b11b      	cbz	r3, 8015df2 <adc_special_function_config+0x3a>
 8015dea:	6843      	ldr	r3, [r0, #4]
 8015dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015df0:	6043      	str	r3, [r0, #4]
 8015df2:	b11c      	cbz	r4, 8015dfc <adc_special_function_config+0x44>
 8015df4:	6843      	ldr	r3, [r0, #4]
 8015df6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8015dfa:	6043      	str	r3, [r0, #4]
 8015dfc:	2900      	cmp	r1, #0
 8015dfe:	d0f2      	beq.n	8015de6 <adc_special_function_config+0x2e>
 8015e00:	6883      	ldr	r3, [r0, #8]
 8015e02:	f023 0302 	bic.w	r3, r3, #2
 8015e06:	e7ed      	b.n	8015de4 <adc_special_function_config+0x2c>

08015e08 <adc_data_alignment_config>:
 8015e08:	6883      	ldr	r3, [r0, #8]
 8015e0a:	b119      	cbz	r1, 8015e14 <adc_data_alignment_config+0xc>
 8015e0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015e10:	6083      	str	r3, [r0, #8]
 8015e12:	4770      	bx	lr
 8015e14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015e18:	e7fa      	b.n	8015e10 <adc_data_alignment_config+0x8>

08015e1a <adc_enable>:
 8015e1a:	6883      	ldr	r3, [r0, #8]
 8015e1c:	07db      	lsls	r3, r3, #31
 8015e1e:	bf5e      	ittt	pl
 8015e20:	6883      	ldrpl	r3, [r0, #8]
 8015e22:	f043 0301 	orrpl.w	r3, r3, #1
 8015e26:	6083      	strpl	r3, [r0, #8]
 8015e28:	4770      	bx	lr

08015e2a <adc_calibration_enable>:
 8015e2a:	6883      	ldr	r3, [r0, #8]
 8015e2c:	f100 0208 	add.w	r2, r0, #8
 8015e30:	f043 0308 	orr.w	r3, r3, #8
 8015e34:	6083      	str	r3, [r0, #8]
 8015e36:	6813      	ldr	r3, [r2, #0]
 8015e38:	0719      	lsls	r1, r3, #28
 8015e3a:	d4fc      	bmi.n	8015e36 <adc_calibration_enable+0xc>
 8015e3c:	6883      	ldr	r3, [r0, #8]
 8015e3e:	f043 0304 	orr.w	r3, r3, #4
 8015e42:	6083      	str	r3, [r0, #8]
 8015e44:	6813      	ldr	r3, [r2, #0]
 8015e46:	075b      	lsls	r3, r3, #29
 8015e48:	d4fc      	bmi.n	8015e44 <adc_calibration_enable+0x1a>
 8015e4a:	4770      	bx	lr

08015e4c <adc_tempsensor_vrefint_enable>:
 8015e4c:	4a03      	ldr	r2, [pc, #12]	; (8015e5c <adc_tempsensor_vrefint_enable+0x10>)
 8015e4e:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 8015e52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015e56:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
 8015e5a:	4770      	bx	lr
 8015e5c:	40012000 	andmi	r2, r1, r0

08015e60 <adc_channel_length_config>:
 8015e60:	2901      	cmp	r1, #1
 8015e62:	d002      	beq.n	8015e6a <adc_channel_length_config+0xa>
 8015e64:	2902      	cmp	r1, #2
 8015e66:	d00c      	beq.n	8015e82 <adc_channel_length_config+0x22>
 8015e68:	4770      	bx	lr
 8015e6a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015e6c:	3a01      	subs	r2, #1
 8015e6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8015e72:	62c3      	str	r3, [r0, #44]	; 0x2c
 8015e74:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015e76:	0512      	lsls	r2, r2, #20
 8015e78:	f402 0270 	and.w	r2, r2, #15728640	; 0xf00000
 8015e7c:	431a      	orrs	r2, r3
 8015e7e:	62c2      	str	r2, [r0, #44]	; 0x2c
 8015e80:	4770      	bx	lr
 8015e82:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8015e84:	3a01      	subs	r2, #1
 8015e86:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8015e8a:	6383      	str	r3, [r0, #56]	; 0x38
 8015e8c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8015e8e:	0512      	lsls	r2, r2, #20
 8015e90:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8015e94:	431a      	orrs	r2, r3
 8015e96:	6382      	str	r2, [r0, #56]	; 0x38
 8015e98:	4770      	bx	lr

08015e9a <adc_inserted_channel_config>:
 8015e9a:	b530      	push	{r4, r5, lr}
 8015e9c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8015e9e:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8015ea0:	f3c4 5401 	ubfx	r4, r4, #20, #2
 8015ea4:	1a61      	subs	r1, r4, r1
 8015ea6:	f06f 0404 	mvn.w	r4, #4
 8015eaa:	4361      	muls	r1, r4
 8015eac:	241f      	movs	r4, #31
 8015eae:	310f      	adds	r1, #15
 8015eb0:	408c      	lsls	r4, r1
 8015eb2:	ea25 0504 	bic.w	r5, r5, r4
 8015eb6:	fa02 f101 	lsl.w	r1, r2, r1
 8015eba:	4329      	orrs	r1, r5
 8015ebc:	2a09      	cmp	r2, #9
 8015ebe:	6381      	str	r1, [r0, #56]	; 0x38
 8015ec0:	d80b      	bhi.n	8015eda <adc_inserted_channel_config+0x40>
 8015ec2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8015ec6:	2207      	movs	r2, #7
 8015ec8:	6904      	ldr	r4, [r0, #16]
 8015eca:	408a      	lsls	r2, r1
 8015ecc:	ea24 0402 	bic.w	r4, r4, r2
 8015ed0:	fa03 f201 	lsl.w	r2, r3, r1
 8015ed4:	4322      	orrs	r2, r4
 8015ed6:	6102      	str	r2, [r0, #16]
 8015ed8:	bd30      	pop	{r4, r5, pc}
 8015eda:	2a11      	cmp	r2, #17
 8015edc:	d8fc      	bhi.n	8015ed8 <adc_inserted_channel_config+0x3e>
 8015ede:	2407      	movs	r4, #7
 8015ee0:	3a0a      	subs	r2, #10
 8015ee2:	68c1      	ldr	r1, [r0, #12]
 8015ee4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015ee8:	4094      	lsls	r4, r2
 8015eea:	ea21 0104 	bic.w	r1, r1, r4
 8015eee:	fa03 f202 	lsl.w	r2, r3, r2
 8015ef2:	430a      	orrs	r2, r1
 8015ef4:	60c2      	str	r2, [r0, #12]
 8015ef6:	e7ef      	b.n	8015ed8 <adc_inserted_channel_config+0x3e>

08015ef8 <adc_external_trigger_source_config>:
 8015ef8:	2901      	cmp	r1, #1
 8015efa:	d002      	beq.n	8015f02 <adc_external_trigger_source_config+0xa>
 8015efc:	2902      	cmp	r1, #2
 8015efe:	d008      	beq.n	8015f12 <adc_external_trigger_source_config+0x1a>
 8015f00:	4770      	bx	lr
 8015f02:	6883      	ldr	r3, [r0, #8]
 8015f04:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8015f08:	6083      	str	r3, [r0, #8]
 8015f0a:	6883      	ldr	r3, [r0, #8]
 8015f0c:	431a      	orrs	r2, r3
 8015f0e:	6082      	str	r2, [r0, #8]
 8015f10:	4770      	bx	lr
 8015f12:	6883      	ldr	r3, [r0, #8]
 8015f14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015f18:	e7f6      	b.n	8015f08 <adc_external_trigger_source_config+0x10>

08015f1a <adc_external_trigger_config>:
 8015f1a:	f001 0301 	and.w	r3, r1, #1
 8015f1e:	f001 0102 	and.w	r1, r1, #2
 8015f22:	b152      	cbz	r2, 8015f3a <adc_external_trigger_config+0x20>
 8015f24:	b11b      	cbz	r3, 8015f2e <adc_external_trigger_config+0x14>
 8015f26:	6883      	ldr	r3, [r0, #8]
 8015f28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015f2c:	6083      	str	r3, [r0, #8]
 8015f2e:	b119      	cbz	r1, 8015f38 <adc_external_trigger_config+0x1e>
 8015f30:	6883      	ldr	r3, [r0, #8]
 8015f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015f36:	6083      	str	r3, [r0, #8]
 8015f38:	4770      	bx	lr
 8015f3a:	b11b      	cbz	r3, 8015f44 <adc_external_trigger_config+0x2a>
 8015f3c:	6883      	ldr	r3, [r0, #8]
 8015f3e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015f42:	6083      	str	r3, [r0, #8]
 8015f44:	2900      	cmp	r1, #0
 8015f46:	d0f7      	beq.n	8015f38 <adc_external_trigger_config+0x1e>
 8015f48:	6883      	ldr	r3, [r0, #8]
 8015f4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8015f4e:	e7f2      	b.n	8015f36 <adc_external_trigger_config+0x1c>

08015f50 <adc_software_trigger_enable>:
 8015f50:	07ca      	lsls	r2, r1, #31
 8015f52:	bf42      	ittt	mi
 8015f54:	6883      	ldrmi	r3, [r0, #8]
 8015f56:	f443 0380 	orrmi.w	r3, r3, #4194304	; 0x400000
 8015f5a:	6083      	strmi	r3, [r0, #8]
 8015f5c:	078b      	lsls	r3, r1, #30
 8015f5e:	bf42      	ittt	mi
 8015f60:	6883      	ldrmi	r3, [r0, #8]
 8015f62:	f443 1300 	orrmi.w	r3, r3, #2097152	; 0x200000
 8015f66:	6083      	strmi	r3, [r0, #8]
 8015f68:	4770      	bx	lr
	...

08015f6c <dma_deinit>:
 8015f6c:	4b0c      	ldr	r3, [pc, #48]	; (8015fa0 <dma_deinit+0x34>)
 8015f6e:	4298      	cmp	r0, r3
 8015f70:	d102      	bne.n	8015f78 <dma_deinit+0xc>
 8015f72:	2904      	cmp	r1, #4
 8015f74:	d900      	bls.n	8015f78 <dma_deinit+0xc>
 8015f76:	e7fe      	b.n	8015f76 <dma_deinit+0xa>
 8015f78:	2314      	movs	r3, #20
 8015f7a:	fb03 0301 	mla	r3, r3, r1, r0
 8015f7e:	689a      	ldr	r2, [r3, #8]
 8015f80:	0089      	lsls	r1, r1, #2
 8015f82:	f022 0201 	bic.w	r2, r2, #1
 8015f86:	609a      	str	r2, [r3, #8]
 8015f88:	2200      	movs	r2, #0
 8015f8a:	609a      	str	r2, [r3, #8]
 8015f8c:	60da      	str	r2, [r3, #12]
 8015f8e:	611a      	str	r2, [r3, #16]
 8015f90:	615a      	str	r2, [r3, #20]
 8015f92:	230f      	movs	r3, #15
 8015f94:	6842      	ldr	r2, [r0, #4]
 8015f96:	fa03 f101 	lsl.w	r1, r3, r1
 8015f9a:	4311      	orrs	r1, r2
 8015f9c:	6041      	str	r1, [r0, #4]
 8015f9e:	4770      	bx	lr
 8015fa0:	40020400 	andmi	r0, r2, r0, lsl #8

08015fa4 <dma_struct_para_init>:
 8015fa4:	2300      	movs	r3, #0
 8015fa6:	e9c0 3300 	strd	r3, r3, [r0]
 8015faa:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8015fae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015fb2:	8303      	strh	r3, [r0, #24]
 8015fb4:	7683      	strb	r3, [r0, #26]
 8015fb6:	4770      	bx	lr

08015fb8 <dma_init>:
 8015fb8:	4b1b      	ldr	r3, [pc, #108]	; (8016028 <dma_init+0x70>)
 8015fba:	b510      	push	{r4, lr}
 8015fbc:	4298      	cmp	r0, r3
 8015fbe:	d102      	bne.n	8015fc6 <dma_init+0xe>
 8015fc0:	2904      	cmp	r1, #4
 8015fc2:	d900      	bls.n	8015fc6 <dma_init+0xe>
 8015fc4:	e7fe      	b.n	8015fc4 <dma_init+0xc>
 8015fc6:	2314      	movs	r3, #20
 8015fc8:	fb03 0101 	mla	r1, r3, r1, r0
 8015fcc:	6813      	ldr	r3, [r2, #0]
 8015fce:	610b      	str	r3, [r1, #16]
 8015fd0:	6893      	ldr	r3, [r2, #8]
 8015fd2:	614b      	str	r3, [r1, #20]
 8015fd4:	8a13      	ldrh	r3, [r2, #16]
 8015fd6:	60cb      	str	r3, [r1, #12]
 8015fd8:	68d4      	ldr	r4, [r2, #12]
 8015fda:	6853      	ldr	r3, [r2, #4]
 8015fdc:	6888      	ldr	r0, [r1, #8]
 8015fde:	4323      	orrs	r3, r4
 8015fe0:	6954      	ldr	r4, [r2, #20]
 8015fe2:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8015fe6:	4323      	orrs	r3, r4
 8015fe8:	4303      	orrs	r3, r0
 8015fea:	608b      	str	r3, [r1, #8]
 8015fec:	7e13      	ldrb	r3, [r2, #24]
 8015fee:	2b01      	cmp	r3, #1
 8015ff0:	688b      	ldr	r3, [r1, #8]
 8015ff2:	bf0c      	ite	eq
 8015ff4:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 8015ff8:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8015ffc:	608b      	str	r3, [r1, #8]
 8015ffe:	7e53      	ldrb	r3, [r2, #25]
 8016000:	2b01      	cmp	r3, #1
 8016002:	688b      	ldr	r3, [r1, #8]
 8016004:	bf0c      	ite	eq
 8016006:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
 801600a:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 801600e:	608b      	str	r3, [r1, #8]
 8016010:	7e93      	ldrb	r3, [r2, #26]
 8016012:	b923      	cbnz	r3, 801601e <dma_init+0x66>
 8016014:	688b      	ldr	r3, [r1, #8]
 8016016:	f023 0310 	bic.w	r3, r3, #16
 801601a:	608b      	str	r3, [r1, #8]
 801601c:	bd10      	pop	{r4, pc}
 801601e:	688b      	ldr	r3, [r1, #8]
 8016020:	f043 0310 	orr.w	r3, r3, #16
 8016024:	e7f9      	b.n	801601a <dma_init+0x62>
 8016026:	bf00      	nop
 8016028:	40020400 	andmi	r0, r2, r0, lsl #8

0801602c <dma_circulation_disable>:
 801602c:	4b06      	ldr	r3, [pc, #24]	; (8016048 <dma_circulation_disable+0x1c>)
 801602e:	4298      	cmp	r0, r3
 8016030:	d102      	bne.n	8016038 <dma_circulation_disable+0xc>
 8016032:	2904      	cmp	r1, #4
 8016034:	d900      	bls.n	8016038 <dma_circulation_disable+0xc>
 8016036:	e7fe      	b.n	8016036 <dma_circulation_disable+0xa>
 8016038:	2314      	movs	r3, #20
 801603a:	4359      	muls	r1, r3
 801603c:	3008      	adds	r0, #8
 801603e:	580b      	ldr	r3, [r1, r0]
 8016040:	f023 0320 	bic.w	r3, r3, #32
 8016044:	500b      	str	r3, [r1, r0]
 8016046:	4770      	bx	lr
 8016048:	40020400 	andmi	r0, r2, r0, lsl #8

0801604c <dma_memory_to_memory_disable>:
 801604c:	4b06      	ldr	r3, [pc, #24]	; (8016068 <dma_memory_to_memory_disable+0x1c>)
 801604e:	4298      	cmp	r0, r3
 8016050:	d102      	bne.n	8016058 <dma_memory_to_memory_disable+0xc>
 8016052:	2904      	cmp	r1, #4
 8016054:	d900      	bls.n	8016058 <dma_memory_to_memory_disable+0xc>
 8016056:	e7fe      	b.n	8016056 <dma_memory_to_memory_disable+0xa>
 8016058:	2314      	movs	r3, #20
 801605a:	4359      	muls	r1, r3
 801605c:	3008      	adds	r0, #8
 801605e:	580b      	ldr	r3, [r1, r0]
 8016060:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8016064:	500b      	str	r3, [r1, r0]
 8016066:	4770      	bx	lr
 8016068:	40020400 	andmi	r0, r2, r0, lsl #8

0801606c <enet_delay>:
 801606c:	2300      	movs	r3, #0
 801606e:	b082      	sub	sp, #8
 8016070:	9301      	str	r3, [sp, #4]
 8016072:	9001      	str	r0, [sp, #4]
 8016074:	9b01      	ldr	r3, [sp, #4]
 8016076:	b90b      	cbnz	r3, 801607c <enet_delay+0x10>
 8016078:	b002      	add	sp, #8
 801607a:	4770      	bx	lr
 801607c:	9b01      	ldr	r3, [sp, #4]
 801607e:	3b01      	subs	r3, #1
 8016080:	9301      	str	r3, [sp, #4]
 8016082:	e7f7      	b.n	8016074 <enet_delay+0x8>

08016084 <enet_software_reset>:
 8016084:	4b07      	ldr	r3, [pc, #28]	; (80160a4 <enet_software_reset+0x20>)
 8016086:	681a      	ldr	r2, [r3, #0]
 8016088:	f042 0201 	orr.w	r2, r2, #1
 801608c:	601a      	str	r2, [r3, #0]
 801608e:	4a06      	ldr	r2, [pc, #24]	; (80160a8 <enet_software_reset+0x24>)
 8016090:	6819      	ldr	r1, [r3, #0]
 8016092:	07c9      	lsls	r1, r1, #31
 8016094:	d501      	bpl.n	801609a <enet_software_reset+0x16>
 8016096:	3a01      	subs	r2, #1
 8016098:	d1fa      	bne.n	8016090 <enet_software_reset+0xc>
 801609a:	6818      	ldr	r0, [r3, #0]
 801609c:	43c0      	mvns	r0, r0
 801609e:	f000 0001 	and.w	r0, r0, #1
 80160a2:	4770      	bx	lr
 80160a4:	40029000 	andmi	r9, r2, r0
 80160a8:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

080160ac <enet_descriptors_chain_init>:
 80160ac:	f5b0 0fe0 	cmp.w	r0, #7340032	; 0x700000
 80160b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80160b2:	4a19      	ldr	r2, [pc, #100]	; (8016118 <enet_descriptors_chain_init+0x6c>)
 80160b4:	d125      	bne.n	8016102 <enet_descriptors_chain_init+0x56>
 80160b6:	2500      	movs	r5, #0
 80160b8:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 80160bc:	2002      	movs	r0, #2
 80160be:	4b17      	ldr	r3, [pc, #92]	; (801611c <enet_descriptors_chain_init+0x70>)
 80160c0:	4c17      	ldr	r4, [pc, #92]	; (8016120 <enet_descriptors_chain_init+0x74>)
 80160c2:	6113      	str	r3, [r2, #16]
 80160c4:	4a17      	ldr	r2, [pc, #92]	; (8016124 <enet_descriptors_chain_init+0x78>)
 80160c6:	6013      	str	r3, [r2, #0]
 80160c8:	2200      	movs	r2, #0
 80160ca:	f240 5ef4 	movw	lr, #1524	; 0x5f4
 80160ce:	4916      	ldr	r1, [pc, #88]	; (8016128 <enet_descriptors_chain_init+0x7c>)
 80160d0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80160d4:	600a      	str	r2, [r1, #0]
 80160d6:	4915      	ldr	r1, [pc, #84]	; (801612c <enet_descriptors_chain_init+0x80>)
 80160d8:	600a      	str	r2, [r1, #0]
 80160da:	f103 0110 	add.w	r1, r3, #16
 80160de:	fb0e 4702 	mla	r7, lr, r2, r4
 80160e2:	f841 7c08 	str.w	r7, [r1, #-8]
 80160e6:	4594      	cmp	ip, r2
 80160e8:	bf94      	ite	ls
 80160ea:	461f      	movls	r7, r3
 80160ec:	460f      	movhi	r7, r1
 80160ee:	3201      	adds	r2, #1
 80160f0:	4290      	cmp	r0, r2
 80160f2:	e941 6504 	strd	r6, r5, [r1, #-16]
 80160f6:	f841 7c04 	str.w	r7, [r1, #-4]
 80160fa:	f101 0110 	add.w	r1, r1, #16
 80160fe:	d1ee      	bne.n	80160de <enet_descriptors_chain_init+0x32>
 8016100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016102:	4b0b      	ldr	r3, [pc, #44]	; (8016130 <enet_descriptors_chain_init+0x84>)
 8016104:	f244 55f4 	movw	r5, #17908	; 0x45f4
 8016108:	60d3      	str	r3, [r2, #12]
 801610a:	4a0a      	ldr	r2, [pc, #40]	; (8016134 <enet_descriptors_chain_init+0x88>)
 801610c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8016110:	2006      	movs	r0, #6
 8016112:	4c09      	ldr	r4, [pc, #36]	; (8016138 <enet_descriptors_chain_init+0x8c>)
 8016114:	6013      	str	r3, [r2, #0]
 8016116:	e7d7      	b.n	80160c8 <enet_descriptors_chain_init+0x1c>
 8016118:	40029000 	andmi	r9, r2, r0
 801611c:	20015a34 	andcs	r5, r1, r4, lsr sl
 8016120:	20014e4c 	andcs	r4, r1, ip, asr #28
 8016124:	200129f4 	strdcs	r2, [r1], -r4
 8016128:	200129e8 	andcs	r2, r1, r8, ror #19
 801612c:	200129ec 	andcs	r2, r1, ip, ror #19
 8016130:	20014dec 	andcs	r4, r1, ip, ror #27
 8016134:	200129f0 	strdcs	r2, [r1], -r0
 8016138:	20012a34 	andcs	r2, r1, r4, lsr sl

0801613c <enet_frame_receive>:
 801613c:	4a1d      	ldr	r2, [pc, #116]	; (80161b4 <enet_frame_receive+0x78>)
 801613e:	b510      	push	{r4, lr}
 8016140:	6813      	ldr	r3, [r2, #0]
 8016142:	681b      	ldr	r3, [r3, #0]
 8016144:	2b00      	cmp	r3, #0
 8016146:	db33      	blt.n	80161b0 <enet_frame_receive+0x74>
 8016148:	b970      	cbnz	r0, 8016168 <enet_frame_receive+0x2c>
 801614a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801614e:	6813      	ldr	r3, [r2, #0]
 8016150:	6019      	str	r1, [r3, #0]
 8016152:	4919      	ldr	r1, [pc, #100]	; (80161b8 <enet_frame_receive+0x7c>)
 8016154:	6948      	ldr	r0, [r1, #20]
 8016156:	0604      	lsls	r4, r0, #24
 8016158:	d419      	bmi.n	801618e <enet_frame_receive+0x52>
 801615a:	6859      	ldr	r1, [r3, #4]
 801615c:	0448      	lsls	r0, r1, #17
 801615e:	d51b      	bpl.n	8016198 <enet_frame_receive+0x5c>
 8016160:	68db      	ldr	r3, [r3, #12]
 8016162:	2001      	movs	r0, #1
 8016164:	6013      	str	r3, [r2, #0]
 8016166:	bd10      	pop	{r4, pc}
 8016168:	f403 4403 	and.w	r4, r3, #33536	; 0x8300
 801616c:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 8016170:	d11e      	bne.n	80161b0 <enet_frame_receive+0x74>
 8016172:	f3c3 430d 	ubfx	r3, r3, #16, #14
 8016176:	3b04      	subs	r3, #4
 8016178:	428b      	cmp	r3, r1
 801617a:	d819      	bhi.n	80161b0 <enet_frame_receive+0x74>
 801617c:	2100      	movs	r1, #0
 801617e:	4299      	cmp	r1, r3
 8016180:	6814      	ldr	r4, [r2, #0]
 8016182:	d2e2      	bcs.n	801614a <enet_frame_receive+0xe>
 8016184:	68a4      	ldr	r4, [r4, #8]
 8016186:	5d0c      	ldrb	r4, [r1, r4]
 8016188:	5444      	strb	r4, [r0, r1]
 801618a:	3101      	adds	r1, #1
 801618c:	e7f7      	b.n	801617e <enet_frame_receive+0x42>
 801618e:	2080      	movs	r0, #128	; 0x80
 8016190:	6148      	str	r0, [r1, #20]
 8016192:	2000      	movs	r0, #0
 8016194:	6088      	str	r0, [r1, #8]
 8016196:	e7e0      	b.n	801615a <enet_frame_receive+0x1e>
 8016198:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 801619c:	4906      	ldr	r1, [pc, #24]	; (80161b8 <enet_frame_receive+0x7c>)
 801619e:	bf05      	ittet	eq
 80161a0:	3310      	addeq	r3, #16
 80161a2:	6809      	ldreq	r1, [r1, #0]
 80161a4:	68cb      	ldrne	r3, [r1, #12]
 80161a6:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 80161aa:	bf08      	it	eq
 80161ac:	185b      	addeq	r3, r3, r1
 80161ae:	e7d8      	b.n	8016162 <enet_frame_receive+0x26>
 80161b0:	2000      	movs	r0, #0
 80161b2:	e7d8      	b.n	8016166 <enet_frame_receive+0x2a>
 80161b4:	200129f0 	strdcs	r2, [r1], -r0
 80161b8:	40029000 	andmi	r9, r2, r0

080161bc <enet_frame_transmit>:
 80161bc:	4a1e      	ldr	r2, [pc, #120]	; (8016238 <enet_frame_transmit+0x7c>)
 80161be:	b530      	push	{r4, r5, lr}
 80161c0:	6813      	ldr	r3, [r2, #0]
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	db34      	blt.n	8016232 <enet_frame_transmit+0x76>
 80161c8:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80161cc:	4299      	cmp	r1, r3
 80161ce:	d830      	bhi.n	8016232 <enet_frame_transmit+0x76>
 80161d0:	b9e8      	cbnz	r0, 801620e <enet_frame_transmit+0x52>
 80161d2:	6813      	ldr	r3, [r2, #0]
 80161d4:	4819      	ldr	r0, [pc, #100]	; (801623c <enet_frame_transmit+0x80>)
 80161d6:	6059      	str	r1, [r3, #4]
 80161d8:	6819      	ldr	r1, [r3, #0]
 80161da:	f041 4130 	orr.w	r1, r1, #2952790016	; 0xb0000000
 80161de:	6019      	str	r1, [r3, #0]
 80161e0:	6941      	ldr	r1, [r0, #20]
 80161e2:	6944      	ldr	r4, [r0, #20]
 80161e4:	f001 0104 	and.w	r1, r1, #4
 80161e8:	f004 0420 	and.w	r4, r4, #32
 80161ec:	4321      	orrs	r1, r4
 80161ee:	d110      	bne.n	8016212 <enet_frame_transmit+0x56>
 80161f0:	6819      	ldr	r1, [r3, #0]
 80161f2:	02c8      	lsls	r0, r1, #11
 80161f4:	d511      	bpl.n	801621a <enet_frame_transmit+0x5e>
 80161f6:	68db      	ldr	r3, [r3, #12]
 80161f8:	2001      	movs	r0, #1
 80161fa:	6013      	str	r3, [r2, #0]
 80161fc:	bd30      	pop	{r4, r5, pc}
 80161fe:	5cc5      	ldrb	r5, [r0, r3]
 8016200:	68a4      	ldr	r4, [r4, #8]
 8016202:	551d      	strb	r5, [r3, r4]
 8016204:	3301      	adds	r3, #1
 8016206:	428b      	cmp	r3, r1
 8016208:	6814      	ldr	r4, [r2, #0]
 801620a:	d1f8      	bne.n	80161fe <enet_frame_transmit+0x42>
 801620c:	e7e1      	b.n	80161d2 <enet_frame_transmit+0x16>
 801620e:	2300      	movs	r3, #0
 8016210:	e7f9      	b.n	8016206 <enet_frame_transmit+0x4a>
 8016212:	6141      	str	r1, [r0, #20]
 8016214:	2100      	movs	r1, #0
 8016216:	6041      	str	r1, [r0, #4]
 8016218:	e7ea      	b.n	80161f0 <enet_frame_transmit+0x34>
 801621a:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 801621e:	4907      	ldr	r1, [pc, #28]	; (801623c <enet_frame_transmit+0x80>)
 8016220:	bf05      	ittet	eq
 8016222:	3310      	addeq	r3, #16
 8016224:	6809      	ldreq	r1, [r1, #0]
 8016226:	690b      	ldrne	r3, [r1, #16]
 8016228:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 801622c:	bf08      	it	eq
 801622e:	185b      	addeq	r3, r3, r1
 8016230:	e7e2      	b.n	80161f8 <enet_frame_transmit+0x3c>
 8016232:	2000      	movs	r0, #0
 8016234:	e7e2      	b.n	80161fc <enet_frame_transmit+0x40>
 8016236:	bf00      	nop
 8016238:	200129f4 	strdcs	r2, [r1], -r4
 801623c:	40029000 	andmi	r9, r2, r0

08016240 <enet_transmit_checksum_config>:
 8016240:	6803      	ldr	r3, [r0, #0]
 8016242:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8016246:	430b      	orrs	r3, r1
 8016248:	6003      	str	r3, [r0, #0]
 801624a:	4770      	bx	lr

0801624c <enet_mac_address_set>:
 801624c:	888a      	ldrh	r2, [r1, #4]
 801624e:	4b03      	ldr	r3, [pc, #12]	; (801625c <enet_mac_address_set+0x10>)
 8016250:	50c2      	str	r2, [r0, r3]
 8016252:	680a      	ldr	r2, [r1, #0]
 8016254:	3304      	adds	r3, #4
 8016256:	50c2      	str	r2, [r0, r3]
 8016258:	4770      	bx	lr
 801625a:	bf00      	nop
 801625c:	40028040 	andmi	r8, r2, r0, asr #32

08016260 <enet_rx_enable>:
 8016260:	4a05      	ldr	r2, [pc, #20]	; (8016278 <enet_rx_enable+0x18>)
 8016262:	6813      	ldr	r3, [r2, #0]
 8016264:	f043 0304 	orr.w	r3, r3, #4
 8016268:	6013      	str	r3, [r2, #0]
 801626a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801626e:	6993      	ldr	r3, [r2, #24]
 8016270:	f043 0302 	orr.w	r3, r3, #2
 8016274:	6193      	str	r3, [r2, #24]
 8016276:	4770      	bx	lr
 8016278:	40028000 	andmi	r8, r2, r0

0801627c <enet_phy_write_read>:
 801627c:	b530      	push	{r4, r5, lr}
 801627e:	4604      	mov	r4, r0
 8016280:	4d13      	ldr	r5, [pc, #76]	; (80162d0 <enet_phy_write_read+0x54>)
 8016282:	0192      	lsls	r2, r2, #6
 8016284:	6928      	ldr	r0, [r5, #16]
 8016286:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 801628a:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
 801628e:	f020 00c3 	bic.w	r0, r0, #195	; 0xc3
 8016292:	4302      	orrs	r2, r0
 8016294:	02c9      	lsls	r1, r1, #11
 8016296:	b289      	uxth	r1, r1
 8016298:	2c02      	cmp	r4, #2
 801629a:	ea42 0204 	orr.w	r2, r2, r4
 801629e:	ea42 0201 	orr.w	r2, r2, r1
 80162a2:	bf08      	it	eq
 80162a4:	8819      	ldrheq	r1, [r3, #0]
 80162a6:	f042 0201 	orr.w	r2, r2, #1
 80162aa:	bf08      	it	eq
 80162ac:	6169      	streq	r1, [r5, #20]
 80162ae:	612a      	str	r2, [r5, #16]
 80162b0:	4907      	ldr	r1, [pc, #28]	; (80162d0 <enet_phy_write_read+0x54>)
 80162b2:	4a08      	ldr	r2, [pc, #32]	; (80162d4 <enet_phy_write_read+0x58>)
 80162b4:	6908      	ldr	r0, [r1, #16]
 80162b6:	07c0      	lsls	r0, r0, #31
 80162b8:	d501      	bpl.n	80162be <enet_phy_write_read+0x42>
 80162ba:	3a01      	subs	r2, #1
 80162bc:	d1fa      	bne.n	80162b4 <enet_phy_write_read+0x38>
 80162be:	690a      	ldr	r2, [r1, #16]
 80162c0:	43d2      	mvns	r2, r2
 80162c2:	f002 0001 	and.w	r0, r2, #1
 80162c6:	b90c      	cbnz	r4, 80162cc <enet_phy_write_read+0x50>
 80162c8:	694a      	ldr	r2, [r1, #20]
 80162ca:	801a      	strh	r2, [r3, #0]
 80162cc:	bd30      	pop	{r4, r5, pc}
 80162ce:	bf00      	nop
 80162d0:	40028000 	andmi	r8, r2, r0
 80162d4:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

080162d8 <enet_phy_config>:
 80162d8:	4b22      	ldr	r3, [pc, #136]	; (8016364 <enet_phy_config+0x8c>)
 80162da:	b513      	push	{r0, r1, r4, lr}
 80162dc:	2001      	movs	r0, #1
 80162de:	691c      	ldr	r4, [r3, #16]
 80162e0:	f7fe ff3e 	bl	8015160 <rcu_clock_freq_get>
 80162e4:	4b20      	ldr	r3, [pc, #128]	; (8016368 <enet_phy_config+0x90>)
 80162e6:	4a21      	ldr	r2, [pc, #132]	; (801636c <enet_phy_config+0x94>)
 80162e8:	4403      	add	r3, r0
 80162ea:	4293      	cmp	r3, r2
 80162ec:	f024 041c 	bic.w	r4, r4, #28
 80162f0:	d220      	bcs.n	8016334 <enet_phy_config+0x5c>
 80162f2:	f044 0408 	orr.w	r4, r4, #8
 80162f6:	4b1b      	ldr	r3, [pc, #108]	; (8016364 <enet_phy_config+0x8c>)
 80162f8:	2200      	movs	r2, #0
 80162fa:	611c      	str	r4, [r3, #16]
 80162fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016300:	2101      	movs	r1, #1
 8016302:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016306:	2002      	movs	r0, #2
 8016308:	f10d 0306 	add.w	r3, sp, #6
 801630c:	f7ff ffb6 	bl	801627c <enet_phy_write_read>
 8016310:	b310      	cbz	r0, 8016358 <enet_phy_config+0x80>
 8016312:	2200      	movs	r2, #0
 8016314:	4816      	ldr	r0, [pc, #88]	; (8016370 <enet_phy_config+0x98>)
 8016316:	f7ff fea9 	bl	801606c <enet_delay>
 801631a:	2101      	movs	r1, #1
 801631c:	4610      	mov	r0, r2
 801631e:	f10d 0306 	add.w	r3, sp, #6
 8016322:	f7ff ffab 	bl	801627c <enet_phy_write_read>
 8016326:	b1b8      	cbz	r0, 8016358 <enet_phy_config+0x80>
 8016328:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801632c:	43c0      	mvns	r0, r0
 801632e:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8016332:	e012      	b.n	801635a <enet_phy_config+0x82>
 8016334:	4b0f      	ldr	r3, [pc, #60]	; (8016374 <enet_phy_config+0x9c>)
 8016336:	4a10      	ldr	r2, [pc, #64]	; (8016378 <enet_phy_config+0xa0>)
 8016338:	4403      	add	r3, r0
 801633a:	4293      	cmp	r3, r2
 801633c:	d802      	bhi.n	8016344 <enet_phy_config+0x6c>
 801633e:	f044 040c 	orr.w	r4, r4, #12
 8016342:	e7d8      	b.n	80162f6 <enet_phy_config+0x1e>
 8016344:	4b0d      	ldr	r3, [pc, #52]	; (801637c <enet_phy_config+0xa4>)
 8016346:	4a0e      	ldr	r2, [pc, #56]	; (8016380 <enet_phy_config+0xa8>)
 8016348:	4403      	add	r3, r0
 801634a:	4293      	cmp	r3, r2
 801634c:	d9d3      	bls.n	80162f6 <enet_phy_config+0x1e>
 801634e:	4b0d      	ldr	r3, [pc, #52]	; (8016384 <enet_phy_config+0xac>)
 8016350:	4a0d      	ldr	r2, [pc, #52]	; (8016388 <enet_phy_config+0xb0>)
 8016352:	4403      	add	r3, r0
 8016354:	4293      	cmp	r3, r2
 8016356:	d902      	bls.n	801635e <enet_phy_config+0x86>
 8016358:	2000      	movs	r0, #0
 801635a:	b002      	add	sp, #8
 801635c:	bd10      	pop	{r4, pc}
 801635e:	f044 0404 	orr.w	r4, r4, #4
 8016362:	e7c8      	b.n	80162f6 <enet_phy_config+0x1e>
 8016364:	40028000 	andmi	r8, r2, r0
 8016368:	feced300 	cdp2	3, 12, cr13, cr14, cr0, {0}
 801636c:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 8016370:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 8016374:	fde9f140 	stc2l	1, cr15, [r9, #256]!	; 0x100
 8016378:	017d783f 	cmneq	sp, pc, lsr r8
 801637c:	fc6c7900 	stc2l	9, cr7, [ip], #-0	; <UNPREDICTABLE>
 8016380:	01c9c37f 	biceq	ip, r9, pc, ror r3
 8016384:	faa2b580 	blx	68c398c <__stack_size+0x68c218c>
 8016388:	0112a880 	tsteq	r2, r0, lsl #17

0801638c <enet_init>:
 801638c:	2300      	movs	r3, #0
 801638e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016390:	4604      	mov	r4, r0
 8016392:	460d      	mov	r5, r1
 8016394:	4616      	mov	r6, r2
 8016396:	f8ad 3006 	strh.w	r3, [sp, #6]
 801639a:	f7ff ff9d 	bl	80162d8 <enet_phy_config>
 801639e:	2800      	cmp	r0, #0
 80163a0:	d037      	beq.n	8016412 <enet_init+0x86>
 80163a2:	4b3b      	ldr	r3, [pc, #236]	; (8016490 <enet_init+0x104>)
 80163a4:	4a3b      	ldr	r2, [pc, #236]	; (8016494 <enet_init+0x108>)
 80163a6:	6819      	ldr	r1, [r3, #0]
 80163a8:	2c01      	cmp	r4, #1
 80163aa:	ea02 0201 	and.w	r2, r2, r1
 80163ae:	601a      	str	r2, [r3, #0]
 80163b0:	f04f 0200 	mov.w	r2, #0
 80163b4:	605a      	str	r2, [r3, #4]
 80163b6:	609a      	str	r2, [r3, #8]
 80163b8:	60da      	str	r2, [r3, #12]
 80163ba:	6999      	ldr	r1, [r3, #24]
 80163bc:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
 80163c0:	ea4f 4101 	mov.w	r1, r1, lsl #16
 80163c4:	ea4f 4111 	mov.w	r1, r1, lsr #16
 80163c8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80163cc:	6199      	str	r1, [r3, #24]
 80163ce:	4932      	ldr	r1, [pc, #200]	; (8016498 <enet_init+0x10c>)
 80163d0:	61da      	str	r2, [r3, #28]
 80163d2:	6988      	ldr	r0, [r1, #24]
 80163d4:	4b31      	ldr	r3, [pc, #196]	; (801649c <enet_init+0x110>)
 80163d6:	ea03 0300 	and.w	r3, r3, r0
 80163da:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80163de:	618b      	str	r3, [r1, #24]
 80163e0:	680b      	ldr	r3, [r1, #0]
 80163e2:	4b2f      	ldr	r3, [pc, #188]	; (80164a0 <enet_init+0x114>)
 80163e4:	600b      	str	r3, [r1, #0]
 80163e6:	d01e      	beq.n	8016426 <enet_init+0x9a>
 80163e8:	08e3      	lsrs	r3, r4, #3
 80163ea:	0861      	lsrs	r1, r4, #1
 80163ec:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 80163f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80163f4:	430b      	orrs	r3, r1
 80163f6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80163fa:	2101      	movs	r1, #1
 80163fc:	2002      	movs	r0, #2
 80163fe:	f10d 0306 	add.w	r3, sp, #6
 8016402:	f7ff ff3b 	bl	801627c <enet_phy_write_read>
 8016406:	b158      	cbz	r0, 8016420 <enet_init+0x94>
 8016408:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801640c:	f7ff fe2e 	bl	801606c <enet_delay>
 8016410:	e05f      	b.n	80164d2 <enet_init+0x146>
 8016412:	4824      	ldr	r0, [pc, #144]	; (80164a4 <enet_init+0x118>)
 8016414:	f7ff fe2a 	bl	801606c <enet_delay>
 8016418:	f7ff ff5e 	bl	80162d8 <enet_phy_config>
 801641c:	2800      	cmp	r0, #0
 801641e:	d1c0      	bne.n	80163a2 <enet_init+0x16>
 8016420:	2000      	movs	r0, #0
 8016422:	b003      	add	sp, #12
 8016424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016426:	4614      	mov	r4, r2
 8016428:	4f1f      	ldr	r7, [pc, #124]	; (80164a8 <enet_init+0x11c>)
 801642a:	2201      	movs	r2, #1
 801642c:	2000      	movs	r0, #0
 801642e:	4611      	mov	r1, r2
 8016430:	f10d 0306 	add.w	r3, sp, #6
 8016434:	f7ff ff22 	bl	801627c <enet_phy_write_read>
 8016438:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801643c:	3401      	adds	r4, #1
 801643e:	f002 0204 	and.w	r2, r2, #4
 8016442:	f8ad 2006 	strh.w	r2, [sp, #6]
 8016446:	b912      	cbnz	r2, 801644e <enet_init+0xc2>
 8016448:	42bc      	cmp	r4, r7
 801644a:	d1ee      	bne.n	801642a <enet_init+0x9e>
 801644c:	e7e8      	b.n	8016420 <enet_init+0x94>
 801644e:	42bc      	cmp	r4, r7
 8016450:	d0e6      	beq.n	8016420 <enet_init+0x94>
 8016452:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016456:	2101      	movs	r1, #1
 8016458:	f8ad 2006 	strh.w	r2, [sp, #6]
 801645c:	2002      	movs	r0, #2
 801645e:	2200      	movs	r2, #0
 8016460:	f7ff ff0c 	bl	801627c <enet_phy_write_read>
 8016464:	2800      	cmp	r0, #0
 8016466:	d0db      	beq.n	8016420 <enet_init+0x94>
 8016468:	2400      	movs	r4, #0
 801646a:	4f0f      	ldr	r7, [pc, #60]	; (80164a8 <enet_init+0x11c>)
 801646c:	2201      	movs	r2, #1
 801646e:	2000      	movs	r0, #0
 8016470:	4611      	mov	r1, r2
 8016472:	f10d 0306 	add.w	r3, sp, #6
 8016476:	f7ff ff01 	bl	801627c <enet_phy_write_read>
 801647a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801647e:	3401      	adds	r4, #1
 8016480:	f002 0220 	and.w	r2, r2, #32
 8016484:	f8ad 2006 	strh.w	r2, [sp, #6]
 8016488:	b982      	cbnz	r2, 80164ac <enet_init+0x120>
 801648a:	42bc      	cmp	r4, r7
 801648c:	d1ee      	bne.n	801646c <enet_init+0xe0>
 801648e:	e7c7      	b.n	8016420 <enet_init+0x94>
 8016490:	40028000 	andmi	r8, r2, r0
 8016494:	fd30810f 	ldc2	1, cr8, [r0, #-60]!	; 0xffffffc4
 8016498:	40029000 	andmi	r9, r2, r0
 801649c:	f8de3f23 			; <UNDEFINED> instruction: 0xf8de3f23
 80164a0:	02c16000 	sbceq	r6, r1, #0
 80164a4:	008fffff 	strdeq	pc, [pc], pc	; <UNPREDICTABLE>
 80164a8:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 80164ac:	42bc      	cmp	r4, r7
 80164ae:	d0b7      	beq.n	8016420 <enet_init+0x94>
 80164b0:	2101      	movs	r1, #1
 80164b2:	2210      	movs	r2, #16
 80164b4:	2000      	movs	r0, #0
 80164b6:	f7ff fee1 	bl	801627c <enet_phy_write_read>
 80164ba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80164be:	f013 0f04 	tst.w	r3, #4
 80164c2:	bf14      	ite	ne
 80164c4:	f44f 6400 	movne.w	r4, #2048	; 0x800
 80164c8:	2400      	moveq	r4, #0
 80164ca:	0799      	lsls	r1, r3, #30
 80164cc:	d401      	bmi.n	80164d2 <enet_init+0x146>
 80164ce:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80164d2:	4b64      	ldr	r3, [pc, #400]	; (8016664 <enet_init+0x2d8>)
 80164d4:	056a      	lsls	r2, r5, #21
 80164d6:	6818      	ldr	r0, [r3, #0]
 80164d8:	f420 40b0 	bic.w	r0, r0, #22528	; 0x5800
 80164dc:	ea44 0400 	orr.w	r4, r4, r0
 80164e0:	601c      	str	r4, [r3, #0]
 80164e2:	d50c      	bpl.n	80164fe <enet_init+0x172>
 80164e4:	681a      	ldr	r2, [r3, #0]
 80164e6:	f005 6580 	and.w	r5, r5, #67108864	; 0x4000000
 80164ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80164ee:	601a      	str	r2, [r3, #0]
 80164f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80164f4:	6999      	ldr	r1, [r3, #24]
 80164f6:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
 80164fa:	430d      	orrs	r5, r1
 80164fc:	619d      	str	r5, [r3, #24]
 80164fe:	4959      	ldr	r1, [pc, #356]	; (8016664 <enet_init+0x2d8>)
 8016500:	4b59      	ldr	r3, [pc, #356]	; (8016668 <enet_init+0x2dc>)
 8016502:	684a      	ldr	r2, [r1, #4]
 8016504:	4316      	orrs	r6, r2
 8016506:	604e      	str	r6, [r1, #4]
 8016508:	681a      	ldr	r2, [r3, #0]
 801650a:	07d7      	lsls	r7, r2, #31
 801650c:	d510      	bpl.n	8016530 <enet_init+0x1a4>
 801650e:	685a      	ldr	r2, [r3, #4]
 8016510:	680c      	ldr	r4, [r1, #0]
 8016512:	f002 0080 	and.w	r0, r2, #128	; 0x80
 8016516:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 801651a:	4320      	orrs	r0, r4
 801651c:	6008      	str	r0, [r1, #0]
 801651e:	4853      	ldr	r0, [pc, #332]	; (801666c <enet_init+0x2e0>)
 8016520:	0892      	lsrs	r2, r2, #2
 8016522:	6981      	ldr	r1, [r0, #24]
 8016524:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8016528:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 801652c:	430a      	orrs	r2, r1
 801652e:	6182      	str	r2, [r0, #24]
 8016530:	681a      	ldr	r2, [r3, #0]
 8016532:	0796      	lsls	r6, r2, #30
 8016534:	d508      	bpl.n	8016548 <enet_init+0x1bc>
 8016536:	494d      	ldr	r1, [pc, #308]	; (801666c <enet_init+0x2e0>)
 8016538:	6898      	ldr	r0, [r3, #8]
 801653a:	680a      	ldr	r2, [r1, #0]
 801653c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8016540:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8016544:	4302      	orrs	r2, r0
 8016546:	600a      	str	r2, [r1, #0]
 8016548:	681a      	ldr	r2, [r3, #0]
 801654a:	0755      	lsls	r5, r2, #29
 801654c:	d508      	bpl.n	8016560 <enet_init+0x1d4>
 801654e:	4947      	ldr	r1, [pc, #284]	; (801666c <enet_init+0x2e0>)
 8016550:	68d8      	ldr	r0, [r3, #12]
 8016552:	680a      	ldr	r2, [r1, #0]
 8016554:	f422 027e 	bic.w	r2, r2, #16646144	; 0xfe0000
 8016558:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 801655c:	4302      	orrs	r2, r0
 801655e:	600a      	str	r2, [r1, #0]
 8016560:	681a      	ldr	r2, [r3, #0]
 8016562:	0714      	lsls	r4, r2, #28
 8016564:	d508      	bpl.n	8016578 <enet_init+0x1ec>
 8016566:	4941      	ldr	r1, [pc, #260]	; (801666c <enet_init+0x2e0>)
 8016568:	6918      	ldr	r0, [r3, #16]
 801656a:	680a      	ldr	r2, [r1, #0]
 801656c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8016570:	f022 0202 	bic.w	r2, r2, #2
 8016574:	4302      	orrs	r2, r0
 8016576:	600a      	str	r2, [r1, #0]
 8016578:	681a      	ldr	r2, [r3, #0]
 801657a:	06d0      	lsls	r0, r2, #27
 801657c:	d506      	bpl.n	801658c <enet_init+0x200>
 801657e:	493b      	ldr	r1, [pc, #236]	; (801666c <enet_init+0x2e0>)
 8016580:	4a3b      	ldr	r2, [pc, #236]	; (8016670 <enet_init+0x2e4>)
 8016582:	6988      	ldr	r0, [r1, #24]
 8016584:	4002      	ands	r2, r0
 8016586:	6958      	ldr	r0, [r3, #20]
 8016588:	4302      	orrs	r2, r0
 801658a:	618a      	str	r2, [r1, #24]
 801658c:	681a      	ldr	r2, [r3, #0]
 801658e:	0691      	lsls	r1, r2, #26
 8016590:	d508      	bpl.n	80165a4 <enet_init+0x218>
 8016592:	4936      	ldr	r1, [pc, #216]	; (801666c <enet_init+0x2e0>)
 8016594:	6998      	ldr	r0, [r3, #24]
 8016596:	698a      	ldr	r2, [r1, #24]
 8016598:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 801659c:	f022 0204 	bic.w	r2, r2, #4
 80165a0:	4302      	orrs	r2, r0
 80165a2:	618a      	str	r2, [r1, #24]
 80165a4:	681a      	ldr	r2, [r3, #0]
 80165a6:	0652      	lsls	r2, r2, #25
 80165a8:	d506      	bpl.n	80165b8 <enet_init+0x22c>
 80165aa:	492e      	ldr	r1, [pc, #184]	; (8016664 <enet_init+0x2d8>)
 80165ac:	69d8      	ldr	r0, [r3, #28]
 80165ae:	69ca      	ldr	r2, [r1, #28]
 80165b0:	0c52      	lsrs	r2, r2, #17
 80165b2:	0452      	lsls	r2, r2, #17
 80165b4:	4302      	orrs	r2, r0
 80165b6:	61ca      	str	r2, [r1, #28]
 80165b8:	681a      	ldr	r2, [r3, #0]
 80165ba:	0617      	lsls	r7, r2, #24
 80165bc:	d517      	bpl.n	80165ee <enet_init+0x262>
 80165be:	4c29      	ldr	r4, [pc, #164]	; (8016664 <enet_init+0x2d8>)
 80165c0:	6a1a      	ldr	r2, [r3, #32]
 80165c2:	69a0      	ldr	r0, [r4, #24]
 80165c4:	f422 417f 	bic.w	r1, r2, #65280	; 0xff00
 80165c8:	f020 00be 	bic.w	r0, r0, #190	; 0xbe
 80165cc:	0400      	lsls	r0, r0, #16
 80165ce:	0c00      	lsrs	r0, r0, #16
 80165d0:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 80165d4:	4301      	orrs	r1, r0
 80165d6:	4825      	ldr	r0, [pc, #148]	; (801666c <enet_init+0x2e0>)
 80165d8:	61a1      	str	r1, [r4, #24]
 80165da:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 80165de:	0a12      	lsrs	r2, r2, #8
 80165e0:	f021 0177 	bic.w	r1, r1, #119	; 0x77
 80165e4:	f002 0277 	and.w	r2, r2, #119	; 0x77
 80165e8:	430a      	orrs	r2, r1
 80165ea:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 80165ee:	681a      	ldr	r2, [r3, #0]
 80165f0:	05d6      	lsls	r6, r2, #23
 80165f2:	bf42      	ittt	mi
 80165f4:	6a59      	ldrmi	r1, [r3, #36]	; 0x24
 80165f6:	4a1b      	ldrmi	r2, [pc, #108]	; (8016664 <enet_init+0x2d8>)
 80165f8:	6091      	strmi	r1, [r2, #8]
 80165fa:	681a      	ldr	r2, [r3, #0]
 80165fc:	0595      	lsls	r5, r2, #22
 80165fe:	bf42      	ittt	mi
 8016600:	4a18      	ldrmi	r2, [pc, #96]	; (8016664 <enet_init+0x2d8>)
 8016602:	6a99      	ldrmi	r1, [r3, #40]	; 0x28
 8016604:	60d1      	strmi	r1, [r2, #12]
 8016606:	681a      	ldr	r2, [r3, #0]
 8016608:	0554      	lsls	r4, r2, #21
 801660a:	d508      	bpl.n	801661e <enet_init+0x292>
 801660c:	4915      	ldr	r1, [pc, #84]	; (8016664 <enet_init+0x2d8>)
 801660e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8016610:	684a      	ldr	r2, [r1, #4]
 8016612:	f422 62fb 	bic.w	r2, r2, #2008	; 0x7d8
 8016616:	f022 0206 	bic.w	r2, r2, #6
 801661a:	4302      	orrs	r2, r0
 801661c:	604a      	str	r2, [r1, #4]
 801661e:	681a      	ldr	r2, [r3, #0]
 8016620:	0510      	lsls	r0, r2, #20
 8016622:	d508      	bpl.n	8016636 <enet_init+0x2aa>
 8016624:	490f      	ldr	r1, [pc, #60]	; (8016664 <enet_init+0x2d8>)
 8016626:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8016628:	680a      	ldr	r2, [r1, #0]
 801662a:	f422 3291 	bic.w	r2, r2, #74240	; 0x12200
 801662e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8016632:	4302      	orrs	r2, r0
 8016634:	600a      	str	r2, [r1, #0]
 8016636:	681a      	ldr	r2, [r3, #0]
 8016638:	04d1      	lsls	r1, r2, #19
 801663a:	d506      	bpl.n	801664a <enet_init+0x2be>
 801663c:	4909      	ldr	r1, [pc, #36]	; (8016664 <enet_init+0x2d8>)
 801663e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8016640:	680a      	ldr	r2, [r1, #0]
 8016642:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8016646:	4302      	orrs	r2, r0
 8016648:	600a      	str	r2, [r1, #0]
 801664a:	681a      	ldr	r2, [r3, #0]
 801664c:	0492      	lsls	r2, r2, #18
 801664e:	d506      	bpl.n	801665e <enet_init+0x2d2>
 8016650:	4904      	ldr	r1, [pc, #16]	; (8016664 <enet_init+0x2d8>)
 8016652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016654:	680a      	ldr	r2, [r1, #0]
 8016656:	f422 2260 	bic.w	r2, r2, #917504	; 0xe0000
 801665a:	4313      	orrs	r3, r2
 801665c:	600b      	str	r3, [r1, #0]
 801665e:	2001      	movs	r0, #1
 8016660:	e6df      	b.n	8016422 <enet_init+0x96>
 8016662:	bf00      	nop
 8016664:	40028000 	andmi	r8, r2, r0
 8016668:	200129f8 	strdcs	r2, [r1], -r8
 801666c:	40029000 	andmi	r9, r2, r0
 8016670:	fdde3fe7 	ldc2l	15, cr3, [lr, #924]	; 0x39c

08016674 <enet_txfifo_flush>:
 8016674:	4b06      	ldr	r3, [pc, #24]	; (8016690 <enet_txfifo_flush+0x1c>)
 8016676:	4807      	ldr	r0, [pc, #28]	; (8016694 <enet_txfifo_flush+0x20>)
 8016678:	699a      	ldr	r2, [r3, #24]
 801667a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801667e:	619a      	str	r2, [r3, #24]
 8016680:	699a      	ldr	r2, [r3, #24]
 8016682:	02d2      	lsls	r2, r2, #11
 8016684:	d502      	bpl.n	801668c <enet_txfifo_flush+0x18>
 8016686:	3801      	subs	r0, #1
 8016688:	d1fa      	bne.n	8016680 <enet_txfifo_flush+0xc>
 801668a:	4770      	bx	lr
 801668c:	2001      	movs	r0, #1
 801668e:	4770      	bx	lr
 8016690:	40029000 	andmi	r9, r2, r0
 8016694:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08016698 <enet_tx_enable>:
 8016698:	4a06      	ldr	r2, [pc, #24]	; (80166b4 <enet_tx_enable+0x1c>)
 801669a:	b508      	push	{r3, lr}
 801669c:	6813      	ldr	r3, [r2, #0]
 801669e:	f043 0308 	orr.w	r3, r3, #8
 80166a2:	6013      	str	r3, [r2, #0]
 80166a4:	f7ff ffe6 	bl	8016674 <enet_txfifo_flush>
 80166a8:	4a03      	ldr	r2, [pc, #12]	; (80166b8 <enet_tx_enable+0x20>)
 80166aa:	6993      	ldr	r3, [r2, #24]
 80166ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80166b0:	6193      	str	r3, [r2, #24]
 80166b2:	bd08      	pop	{r3, pc}
 80166b4:	40028000 	andmi	r8, r2, r0
 80166b8:	40029000 	andmi	r9, r2, r0

080166bc <enet_enable>:
 80166bc:	b508      	push	{r3, lr}
 80166be:	f7ff ffeb 	bl	8016698 <enet_tx_enable>
 80166c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80166c6:	f7ff bdcb 	b.w	8016260 <enet_rx_enable>

080166ca <enet_desc_information_get>:
 80166ca:	2905      	cmp	r1, #5
 80166cc:	d817      	bhi.n	80166fe <enet_desc_information_get+0x34>
 80166ce:	e8df f001 	tbb	[pc, r1]
 80166d2:	03091012 	movweq	r1, #36882	; 0x9012
 80166d6:	68401007 	stmdavs	r0, {r0, r1, r2, ip}^
 80166da:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80166de:	4770      	bx	lr
 80166e0:	88c0      	ldrh	r0, [r0, #6]
 80166e2:	e7fa      	b.n	80166da <enet_desc_information_get+0x10>
 80166e4:	8840      	ldrh	r0, [r0, #2]
 80166e6:	f3c0 000d 	ubfx	r0, r0, #0, #14
 80166ea:	2804      	cmp	r0, #4
 80166ec:	d90a      	bls.n	8016704 <enet_desc_information_get+0x3a>
 80166ee:	3804      	subs	r0, #4
 80166f0:	4770      	bx	lr
 80166f2:	6880      	ldr	r0, [r0, #8]
 80166f4:	4770      	bx	lr
 80166f6:	6800      	ldr	r0, [r0, #0]
 80166f8:	f3c0 00c3 	ubfx	r0, r0, #3, #4
 80166fc:	4770      	bx	lr
 80166fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016702:	4770      	bx	lr
 8016704:	2000      	movs	r0, #0
 8016706:	4770      	bx	lr

08016708 <enet_rxframe_drop>:
 8016708:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801670c:	4814      	ldr	r0, [pc, #80]	; (8016760 <enet_rxframe_drop+0x58>)
 801670e:	b510      	push	{r4, lr}
 8016710:	6802      	ldr	r2, [r0, #0]
 8016712:	4914      	ldr	r1, [pc, #80]	; (8016764 <enet_rxframe_drop+0x5c>)
 8016714:	6854      	ldr	r4, [r2, #4]
 8016716:	6013      	str	r3, [r2, #0]
 8016718:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 801671c:	680b      	ldr	r3, [r1, #0]
 801671e:	d009      	beq.n	8016734 <enet_rxframe_drop+0x2c>
 8016720:	b12b      	cbz	r3, 801672e <enet_rxframe_drop+0x26>
 8016722:	68da      	ldr	r2, [r3, #12]
 8016724:	6002      	str	r2, [r0, #0]
 8016726:	681a      	ldr	r2, [r3, #0]
 8016728:	b1ba      	cbz	r2, 801675a <enet_rxframe_drop+0x52>
 801672a:	600a      	str	r2, [r1, #0]
 801672c:	bd10      	pop	{r4, pc}
 801672e:	68d3      	ldr	r3, [r2, #12]
 8016730:	6003      	str	r3, [r0, #0]
 8016732:	e7fb      	b.n	801672c <enet_rxframe_drop+0x24>
 8016734:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8016738:	4c0b      	ldr	r4, [pc, #44]	; (8016768 <enet_rxframe_drop+0x60>)
 801673a:	d006      	beq.n	801674a <enet_rxframe_drop+0x42>
 801673c:	68e2      	ldr	r2, [r4, #12]
 801673e:	6002      	str	r2, [r0, #0]
 8016740:	2b00      	cmp	r3, #0
 8016742:	d0f3      	beq.n	801672c <enet_rxframe_drop+0x24>
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	600b      	str	r3, [r1, #0]
 8016748:	e7f0      	b.n	801672c <enet_rxframe_drop+0x24>
 801674a:	6824      	ldr	r4, [r4, #0]
 801674c:	3210      	adds	r2, #16
 801674e:	f3c4 0484 	ubfx	r4, r4, #2, #5
 8016752:	4422      	add	r2, r4
 8016754:	6002      	str	r2, [r0, #0]
 8016756:	2b00      	cmp	r3, #0
 8016758:	d0e8      	beq.n	801672c <enet_rxframe_drop+0x24>
 801675a:	3310      	adds	r3, #16
 801675c:	e7f3      	b.n	8016746 <enet_rxframe_drop+0x3e>
 801675e:	bf00      	nop
 8016760:	200129f0 	strdcs	r2, [r1], -r0
 8016764:	200129e8 	andcs	r2, r1, r8, ror #19
 8016768:	40029000 	andmi	r9, r2, r0

0801676c <enet_rxframe_size_get>:
 801676c:	b508      	push	{r3, lr}
 801676e:	4b0c      	ldr	r3, [pc, #48]	; (80167a0 <enet_rxframe_size_get+0x34>)
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	6818      	ldr	r0, [r3, #0]
 8016774:	2800      	cmp	r0, #0
 8016776:	db10      	blt.n	801679a <enet_rxframe_size_get+0x2e>
 8016778:	f400 4303 	and.w	r3, r0, #33536	; 0x8300
 801677c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016780:	d003      	beq.n	801678a <enet_rxframe_size_get+0x1e>
 8016782:	f7ff ffc1 	bl	8016708 <enet_rxframe_drop>
 8016786:	2001      	movs	r0, #1
 8016788:	bd08      	pop	{r3, pc}
 801678a:	f000 0321 	and.w	r3, r0, #33	; 0x21
 801678e:	2b21      	cmp	r3, #33	; 0x21
 8016790:	d0f7      	beq.n	8016782 <enet_rxframe_size_get+0x16>
 8016792:	f3c0 400d 	ubfx	r0, r0, #16, #14
 8016796:	3804      	subs	r0, #4
 8016798:	e7f6      	b.n	8016788 <enet_rxframe_size_get+0x1c>
 801679a:	2000      	movs	r0, #0
 801679c:	e7f4      	b.n	8016788 <enet_rxframe_size_get+0x1c>
 801679e:	bf00      	nop
 80167a0:	200129f0 	strdcs	r2, [r1], -r0

080167a4 <enet_initpara_reset>:
 80167a4:	2200      	movs	r2, #0
 80167a6:	4b08      	ldr	r3, [pc, #32]	; (80167c8 <enet_initpara_reset+0x24>)
 80167a8:	e9c3 2200 	strd	r2, r2, [r3]
 80167ac:	e9c3 2202 	strd	r2, r2, [r3, #8]
 80167b0:	e9c3 2204 	strd	r2, r2, [r3, #16]
 80167b4:	e9c3 2206 	strd	r2, r2, [r3, #24]
 80167b8:	e9c3 2208 	strd	r2, r2, [r3, #32]
 80167bc:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 80167c0:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
 80167c4:	639a      	str	r2, [r3, #56]	; 0x38
 80167c6:	4770      	bx	lr
 80167c8:	200129f8 	strdcs	r2, [r1], -r8

080167cc <enet_deinit>:
 80167cc:	b508      	push	{r3, lr}
 80167ce:	f640 200e 	movw	r0, #2574	; 0xa0e
 80167d2:	f7fe fc0c 	bl	8014fee <rcu_periph_reset_enable>
 80167d6:	f640 200e 	movw	r0, #2574	; 0xa0e
 80167da:	f7fe fc0a 	bl	8014ff2 <rcu_periph_reset_disable>
 80167de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80167e2:	f7ff bfdf 	b.w	80167a4 <enet_initpara_reset>
	...

080167e8 <i2c_clock_config>:
 80167e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167ea:	4605      	mov	r5, r0
 80167ec:	2002      	movs	r0, #2
 80167ee:	460c      	mov	r4, r1
 80167f0:	4617      	mov	r7, r2
 80167f2:	f7fe fcb5 	bl	8015160 <rcu_clock_freq_get>
 80167f6:	4927      	ldr	r1, [pc, #156]	; (8016894 <i2c_clock_config+0xac>)
 80167f8:	4a27      	ldr	r2, [pc, #156]	; (8016898 <i2c_clock_config+0xb0>)
 80167fa:	fbb0 f1f1 	udiv	r1, r0, r1
 80167fe:	4290      	cmp	r0, r2
 8016800:	bf34      	ite	cc
 8016802:	460b      	movcc	r3, r1
 8016804:	2336      	movcs	r3, #54	; 0x36
 8016806:	686e      	ldr	r6, [r5, #4]
 8016808:	4a24      	ldr	r2, [pc, #144]	; (801689c <i2c_clock_config+0xb4>)
 801680a:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 801680e:	431e      	orrs	r6, r3
 8016810:	4294      	cmp	r4, r2
 8016812:	606e      	str	r6, [r5, #4]
 8016814:	d816      	bhi.n	8016844 <i2c_clock_config+0x5c>
 8016816:	3101      	adds	r1, #1
 8016818:	2935      	cmp	r1, #53	; 0x35
 801681a:	d90d      	bls.n	8016838 <i2c_clock_config+0x50>
 801681c:	2336      	movs	r3, #54	; 0x36
 801681e:	622b      	str	r3, [r5, #32]
 8016820:	0064      	lsls	r4, r4, #1
 8016822:	fbb0 f4f4 	udiv	r4, r0, r4
 8016826:	2c04      	cmp	r4, #4
 8016828:	bf38      	it	cc
 801682a:	2404      	movcc	r4, #4
 801682c:	69e8      	ldr	r0, [r5, #28]
 801682e:	f3c4 040b 	ubfx	r4, r4, #0, #12
 8016832:	4304      	orrs	r4, r0
 8016834:	61ec      	str	r4, [r5, #28]
 8016836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016838:	2902      	cmp	r1, #2
 801683a:	d801      	bhi.n	8016840 <i2c_clock_config+0x58>
 801683c:	2302      	movs	r3, #2
 801683e:	e7ee      	b.n	801681e <i2c_clock_config+0x36>
 8016840:	6229      	str	r1, [r5, #32]
 8016842:	e7ed      	b.n	8016820 <i2c_clock_config+0x38>
 8016844:	4a16      	ldr	r2, [pc, #88]	; (80168a0 <i2c_clock_config+0xb8>)
 8016846:	4294      	cmp	r4, r2
 8016848:	d8f5      	bhi.n	8016836 <i2c_clock_config+0x4e>
 801684a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801684e:	4353      	muls	r3, r2
 8016850:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016854:	fbb3 f3f2 	udiv	r3, r3, r2
 8016858:	3301      	adds	r3, #1
 801685a:	622b      	str	r3, [r5, #32]
 801685c:	b997      	cbnz	r7, 8016884 <i2c_clock_config+0x9c>
 801685e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016862:	fbb0 f4f4 	udiv	r4, r0, r4
 8016866:	69eb      	ldr	r3, [r5, #28]
 8016868:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801686c:	61eb      	str	r3, [r5, #28]
 801686e:	f3c4 030b 	ubfx	r3, r4, #0, #12
 8016872:	b90b      	cbnz	r3, 8016878 <i2c_clock_config+0x90>
 8016874:	f044 0401 	orr.w	r4, r4, #1
 8016878:	69eb      	ldr	r3, [r5, #28]
 801687a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801687e:	61eb      	str	r3, [r5, #28]
 8016880:	69e8      	ldr	r0, [r5, #28]
 8016882:	e7d6      	b.n	8016832 <i2c_clock_config+0x4a>
 8016884:	2119      	movs	r1, #25
 8016886:	434c      	muls	r4, r1
 8016888:	69eb      	ldr	r3, [r5, #28]
 801688a:	fbb0 f4f4 	udiv	r4, r0, r4
 801688e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016892:	e7eb      	b.n	801686c <i2c_clock_config+0x84>
 8016894:	000f4240 	andeq	r4, pc, r0, asr #4
 8016898:	0337f980 	teqeq	r7, #128, 18	; 0x200000	; <UNPREDICTABLE>
 801689c:	000186a0 	andeq	r8, r1, r0, lsr #13
 80168a0:	00061a80 	andeq	r1, r6, r0, lsl #21

080168a4 <i2c_ack_config>:
 80168a4:	6803      	ldr	r3, [r0, #0]
 80168a6:	2901      	cmp	r1, #1
 80168a8:	bf0c      	ite	eq
 80168aa:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
 80168ae:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 80168b2:	6003      	str	r3, [r0, #0]
 80168b4:	4770      	bx	lr

080168b6 <i2c_ackpos_config>:
 80168b6:	6803      	ldr	r3, [r0, #0]
 80168b8:	b919      	cbnz	r1, 80168c2 <i2c_ackpos_config+0xc>
 80168ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80168be:	6003      	str	r3, [r0, #0]
 80168c0:	4770      	bx	lr
 80168c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80168c6:	e7fa      	b.n	80168be <i2c_ackpos_config+0x8>

080168c8 <i2c_master_addressing>:
 80168c8:	3202      	adds	r2, #2
 80168ca:	bf0c      	ite	eq
 80168cc:	f021 0101 	biceq.w	r1, r1, #1
 80168d0:	f041 0101 	orrne.w	r1, r1, #1
 80168d4:	6101      	str	r1, [r0, #16]
 80168d6:	4770      	bx	lr

080168d8 <i2c_enable>:
 80168d8:	6803      	ldr	r3, [r0, #0]
 80168da:	f043 0301 	orr.w	r3, r3, #1
 80168de:	6003      	str	r3, [r0, #0]
 80168e0:	4770      	bx	lr

080168e2 <i2c_start_on_bus>:
 80168e2:	6803      	ldr	r3, [r0, #0]
 80168e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80168e8:	6003      	str	r3, [r0, #0]
 80168ea:	4770      	bx	lr

080168ec <i2c_stop_on_bus>:
 80168ec:	6803      	ldr	r3, [r0, #0]
 80168ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80168f2:	6003      	str	r3, [r0, #0]
 80168f4:	4770      	bx	lr

080168f6 <i2c_data_transmit>:
 80168f6:	6101      	str	r1, [r0, #16]
 80168f8:	4770      	bx	lr

080168fa <i2c_data_receive>:
 80168fa:	6900      	ldr	r0, [r0, #16]
 80168fc:	b2c0      	uxtb	r0, r0
 80168fe:	4770      	bx	lr

08016900 <i2c_flag_get>:
 8016900:	098b      	lsrs	r3, r1, #6
 8016902:	5818      	ldr	r0, [r3, r0]
 8016904:	f001 011f 	and.w	r1, r1, #31
 8016908:	40c8      	lsrs	r0, r1
 801690a:	f000 0001 	and.w	r0, r0, #1
 801690e:	4770      	bx	lr

08016910 <i2c_flag_clear>:
 8016910:	f240 5301 	movw	r3, #1281	; 0x501
 8016914:	4299      	cmp	r1, r3
 8016916:	b510      	push	{r4, lr}
 8016918:	d102      	bne.n	8016920 <i2c_flag_clear+0x10>
 801691a:	6943      	ldr	r3, [r0, #20]
 801691c:	6983      	ldr	r3, [r0, #24]
 801691e:	bd10      	pop	{r4, pc}
 8016920:	2201      	movs	r2, #1
 8016922:	098c      	lsrs	r4, r1, #6
 8016924:	5823      	ldr	r3, [r4, r0]
 8016926:	f001 011f 	and.w	r1, r1, #31
 801692a:	fa02 f101 	lsl.w	r1, r2, r1
 801692e:	ea23 0101 	bic.w	r1, r3, r1
 8016932:	5021      	str	r1, [r4, r0]
 8016934:	e7f3      	b.n	801691e <i2c_flag_clear+0xe>

08016936 <i2s_init>:
 8016936:	b510      	push	{r4, lr}
 8016938:	69c4      	ldr	r4, [r0, #28]
 801693a:	f424 647b 	bic.w	r4, r4, #4016	; 0xfb0
 801693e:	f024 0408 	bic.w	r4, r4, #8
 8016942:	0424      	lsls	r4, r4, #16
 8016944:	0c24      	lsrs	r4, r4, #16
 8016946:	431c      	orrs	r4, r3
 8016948:	4314      	orrs	r4, r2
 801694a:	430c      	orrs	r4, r1
 801694c:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8016950:	61c4      	str	r4, [r0, #28]
 8016952:	bd10      	pop	{r4, pc}

08016954 <i2s_psc_config>:
 8016954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016958:	4698      	mov	r8, r3
 801695a:	2302      	movs	r3, #2
 801695c:	6203      	str	r3, [r0, #32]
 801695e:	4b26      	ldr	r3, [pc, #152]	; (80169f8 <i2s_psc_config+0xa4>)
 8016960:	4617      	mov	r7, r2
 8016962:	4298      	cmp	r0, r3
 8016964:	bf0c      	ite	eq
 8016966:	f44f 3300 	moveq.w	r3, #131072	; 0x20000
 801696a:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 801696e:	4a23      	ldr	r2, [pc, #140]	; (80169fc <i2s_psc_config+0xa8>)
 8016970:	4605      	mov	r5, r0
 8016972:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8016974:	460e      	mov	r6, r1
 8016976:	4018      	ands	r0, r3
 8016978:	d036      	beq.n	80169e8 <i2s_psc_config+0x94>
 801697a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 801697c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8016980:	1f99      	subs	r1, r3, #6
 8016982:	2908      	cmp	r1, #8
 8016984:	d82c      	bhi.n	80169e0 <i2s_psc_config+0x8c>
 8016986:	3302      	adds	r3, #2
 8016988:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 801698a:	f3c0 1003 	ubfx	r0, r0, #4, #4
 801698e:	1c42      	adds	r2, r0, #1
 8016990:	481b      	ldr	r0, [pc, #108]	; (8016a00 <i2s_psc_config+0xac>)
 8016992:	fbb0 f0f2 	udiv	r0, r0, r2
 8016996:	4358      	muls	r0, r3
 8016998:	0040      	lsls	r0, r0, #1
 801699a:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
 801699e:	f04f 010a 	mov.w	r1, #10
 80169a2:	d124      	bne.n	80169ee <i2s_psc_config+0x9a>
 80169a4:	0a04      	lsrs	r4, r0, #8
 80169a6:	434c      	muls	r4, r1
 80169a8:	fbb4 f4f6 	udiv	r4, r4, r6
 80169ac:	260a      	movs	r6, #10
 80169ae:	3405      	adds	r4, #5
 80169b0:	fbb4 f4f6 	udiv	r4, r4, r6
 80169b4:	f004 0301 	and.w	r3, r4, #1
 80169b8:	0864      	lsrs	r4, r4, #1
 80169ba:	1ea2      	subs	r2, r4, #2
 80169bc:	2afd      	cmp	r2, #253	; 0xfd
 80169be:	bf86      	itte	hi
 80169c0:	2300      	movhi	r3, #0
 80169c2:	2402      	movhi	r4, #2
 80169c4:	021b      	lslls	r3, r3, #8
 80169c6:	431c      	orrs	r4, r3
 80169c8:	ea44 0408 	orr.w	r4, r4, r8
 80169cc:	622c      	str	r4, [r5, #32]
 80169ce:	69eb      	ldr	r3, [r5, #28]
 80169d0:	f023 0307 	bic.w	r3, r3, #7
 80169d4:	61eb      	str	r3, [r5, #28]
 80169d6:	69ea      	ldr	r2, [r5, #28]
 80169d8:	4317      	orrs	r7, r2
 80169da:	61ef      	str	r7, [r5, #28]
 80169dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169e0:	2b0f      	cmp	r3, #15
 80169e2:	bf08      	it	eq
 80169e4:	2314      	moveq	r3, #20
 80169e6:	e7cf      	b.n	8016988 <i2s_psc_config+0x34>
 80169e8:	f7fe fbba 	bl	8015160 <rcu_clock_freq_get>
 80169ec:	e7d5      	b.n	801699a <i2s_psc_config+0x46>
 80169ee:	b90f      	cbnz	r7, 80169f4 <i2s_psc_config+0xa0>
 80169f0:	0944      	lsrs	r4, r0, #5
 80169f2:	e7d8      	b.n	80169a6 <i2s_psc_config+0x52>
 80169f4:	0984      	lsrs	r4, r0, #6
 80169f6:	e7d6      	b.n	80169a6 <i2s_psc_config+0x52>
 80169f8:	40003800 	andmi	r3, r0, r0, lsl #16
 80169fc:	40021000 	andmi	r1, r2, r0
 8016a00:	017d7840 	cmneq	sp, r0, asr #16

08016a04 <i2s_enable>:
 8016a04:	69c3      	ldr	r3, [r0, #28]
 8016a06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8016a0a:	61c3      	str	r3, [r0, #28]
 8016a0c:	4770      	bx	lr

08016a0e <i2s_disable>:
 8016a0e:	69c3      	ldr	r3, [r0, #28]
 8016a10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8016a14:	61c3      	str	r3, [r0, #28]
 8016a16:	4770      	bx	lr

08016a18 <spi_dma_enable>:
 8016a18:	6843      	ldr	r3, [r0, #4]
 8016a1a:	b919      	cbnz	r1, 8016a24 <spi_dma_enable+0xc>
 8016a1c:	f043 0302 	orr.w	r3, r3, #2
 8016a20:	6043      	str	r3, [r0, #4]
 8016a22:	4770      	bx	lr
 8016a24:	f043 0301 	orr.w	r3, r3, #1
 8016a28:	e7fa      	b.n	8016a20 <spi_dma_enable+0x8>
	...

Disassembly of section .rodata:

08016a2c <vtable for DisplayHandler-0xdc>:
 8016a2c:	00000003 	andeq	r0, r0, r3
 8016a30:	000000aa 	andeq	r0, r0, sl, lsr #1
 8016a34:	00000006 	andeq	r0, r0, r6
 8016a38:	00000000 	andeq	r0, r0, r0
 8016a3c:	01ff0000 	mvnseq	r0, r0
 8016a40:	00000001 	andeq	r0, r0, r1
 8016a44:	00000001 	andeq	r0, r0, r1
 8016a48:	00000001 	andeq	r0, r0, r1
 8016a4c:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016a50:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 8016a5c:	03020100 	movweq	r0, #8448	; 0x2100
 8016a60:	08070604 	stmdaeq	r7, {r2, r9, sl}
 8016a64:	00000009 	andeq	r0, r0, r9
 8016a68:	03020100 	movweq	r0, #8448	; 0x2100
 8016a6c:	3a732504 	bcc	9cdfe84 <__exidx_end+0x1cc6fd4>
 8016a70:	31007525 	tstcc	r0, r5, lsr #10
 8016a74:	37353a39 			; <UNDEFINED> instruction: 0x37353a39
 8016a78:	0031303a 	eorseq	r3, r1, sl, lsr r0
 8016a7c:	20626546 	rsbcs	r6, r2, r6, asr #10
 8016a80:	32203332 	eorcc	r3, r0, #-939524096	; 0xc8000000
 8016a84:	00323230 	eorseq	r3, r2, r0, lsr r2
 8016a88:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016a8c:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8016a90:	6f4e2034 	svcvs	0x004e2034
 8016a94:	1b206564 	blne	883002c <__exidx_end+0x81717c>
 8016a98:	6d32335b 	ldcvs	3, cr3, [r2, #-364]!	; 0xfffffe94
 8016a9c:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 8016aa0:	6f63206c 	svcvs	0x0063206c
 8016aa4:	6f72746e 	svcvs	0x0072746e
 8016aa8:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 8016aac:	78317b20 	ldmdavc	r1!, {r5, r8, r9, fp, ip, sp, lr}
 8016ab0:	55203420 	strpl	r3, [r0, #-1056]!	; 0xfffffbe0
 8016ab4:	6576696e 	ldrbvs	r6, [r6, #-2414]!	; 0xfffff692
 8016ab8:	73657372 	cmnvc	r5, #-939524095	; 0xc8000001
 8016abc:	335b1b7d 	cmpcc	fp, #128000	; 0x1f400
 8016ac0:	2e006d37 	mcrcs	13, 0, r6, cr0, cr7, {1}
 8016ac4:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 8016ac8:	00676966 	rsbeq	r6, r7, r6, ror #18
 8016acc:	74685f2e 	strbtvc	r5, [r8], #-3886	; 0xfffff0d2
 8016ad0:	6e007074 	mcrvs	0, 0, r7, cr0, cr4, {3}
 8016ad4:	3d65646f 	cfstrdcc	mvd6, [r5, #-444]!	; 0xfffffe44
 8016ad8:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016adc:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8016ae0:	69502034 	ldmdbvs	r0, {r2, r4, r5, sp}^
 8016ae4:	006c6578 	rsbeq	r6, ip, r8, ror r5
 8016ae8:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016aec:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8016af0:	69502034 	ldmdbvs	r0, {r2, r4, r5, sp}^
 8016af4:	206c6578 	rsbcs	r6, ip, r8, ror r5
 8016af8:	73250031 			; <UNDEFINED> instruction: 0x73250031
 8016afc:	2064253a 	rsbcs	r2, r4, sl, lsr r5
 8016b00:	20642547 	rsbcs	r2, r4, r7, asr #10
 8016b04:	00007325 	andeq	r7, r0, r5, lsr #6

08016b08 <vtable for DisplayHandler>:
	...
 8016b10:	0800887b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, fp, pc}
 8016b14:	080088d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, fp, pc}
 8016b18:	08008991 	stmdaeq	r0, {r0, r4, r7, r8, fp, pc}

08016b1c <vtable for DisplayUdfHandler>:
	...
 8016b24:	0800887d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, fp, pc}
 8016b28:	080088e1 	stmdaeq	r0, {r0, r5, r6, r7, fp, pc}
 8016b2c:	08008969 	stmdaeq	r0, {r0, r3, r5, r6, r8, fp, pc}
 8016b30:	0800887f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, fp, pc}
 8016b34:	08008955 	stmdaeq	r0, {r0, r2, r4, r6, r8, fp, pc}
 8016b38:	08008941 	stmdaeq	r0, {r0, r6, r8, fp, pc}
 8016b3c:	0800892d 	stmdaeq	r0, {r0, r2, r3, r5, r8, fp, pc}
 8016b40:	08008919 	stmdaeq	r0, {r0, r3, r4, r8, fp, pc}
 8016b44:	08008905 	stmdaeq	r0, {r0, r2, r8, fp, pc}

08016b48 <vtable for ArtNetTriggerHandler>:
	...
 8016b50:	08008881 	stmdaeq	r0, {r0, r7, fp, pc}
 8016b54:	080088ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, fp, pc}
 8016b58:	08008bb1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, fp, pc}

08016b5c <vtable for PixelDmxStartStop>:
	...
 8016b64:	08008883 	stmdaeq	r0, {r0, r1, r7, fp, pc}
 8016b68:	080088f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, fp, pc}
 8016b6c:	08008885 	stmdaeq	r0, {r0, r2, r7, fp, pc}
 8016b70:	08008895 	stmdaeq	r0, {r0, r2, r4, r7, fp, pc}

08016b74 <vtable for Reboot>:
	...
 8016b7c:	080088a5 	stmdaeq	r0, {r0, r2, r5, r7, fp, pc}
 8016b80:	080088c9 	stmdaeq	r0, {r0, r3, r6, r7, fp, pc}
 8016b84:	080088a9 	stmdaeq	r0, {r0, r3, r5, r7, fp, pc}

08016b88 <CSWTCH.70>:
 8016b88:	444e4f4f 	strbmi	r4, [lr], #-3919	; 0xfffff0b1
 8016b8c:	 			; <UNDEFINED> instruction: 0x312e3146

08016b8d <SOFTWARE_VERSION>:
 8016b8d:	00312e31 	eorseq	r2, r1, r1, lsr lr
 8016b91:	6e552020 	cdpvs	0, 5, cr2, cr5, cr0, {1}
 8016b95:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 8016b99:	20736573 	rsbscs	r6, r3, r3, ror r5
 8016b9d:	20657261 	rsbcs	r7, r5, r1, ror #4
 8016ba1:	7070616d 	rsbsvc	r6, r0, sp, ror #2
 8016ba5:	20646570 	rsbcs	r6, r4, r0, ror r5
 8016ba9:	000a312b 	andeq	r3, sl, fp, lsr #2
 8016bad:	 	andeq	r0, r0, r0

08016bb0 <vtable for ArtNet4Node>:
	...
 8016bb8:	08009769 	stmdaeq	r0, {r0, r3, r5, r6, r8, r9, sl, ip, pc}
 8016bbc:	08009857 	stmdaeq	r0, {r0, r1, r2, r4, r6, fp, ip, pc}
 8016bc0:	0800970d 	stmdaeq	r0, {r0, r2, r3, r8, r9, sl, ip, pc}
 8016bc4:	08009789 	stmdaeq	r0, {r0, r3, r7, r8, r9, sl, ip, pc}
 8016bc8:	08009869 	stmdaeq	r0, {r0, r3, r5, r6, fp, ip, pc}
 8016bcc:	0800984f 	stmdaeq	r0, {r0, r1, r2, r3, r6, fp, ip, pc}

08016bd0 <ArtNetMsgConst::START>:
 8016bd0:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
 8016bd4:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 8016bd8:	74724120 	ldrbtvc	r4, [r2], #-288	; 0xfffffee0
 8016bdc:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
	...

08016be1 <ArtNetMsgConst::PARAMS>:
 8016be1:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 8016be5:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 8016be9:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8016bed:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016bf1:	0074654e 	rsbseq	r6, r4, lr, asr #10

08016bf5 <ArtNetMsgConst::STARTED>:
 8016bf5:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016bf9:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8016bfd:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8016c01:	00646574 	rsbeq	r6, r4, r4, ror r5
 8016c05:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 8016c09:	37303146 	ldrcc	r3, [r0, -r6, asr #2]!
 8016c0d:	73250052 			; <UNDEFINED> instruction: 0x73250052
 8016c11:	20732520 	rsbscs	r2, r3, r0, lsr #10
 8016c15:	25206425 	strcs	r6, [r0, #-1061]!	; 0xfffffbdb
 8016c19:	74680073 	strbtvc	r0, [r8], #-115	; 0xffffff8d
 8016c1d:	2f3a7074 	svccs	0x003a7074
 8016c21:	3364672f 	cmncc	r4, #12320768	; 0xbc0000
 8016c25:	6d642d32 	stclvs	13, cr2, [r4, #-200]!	; 0xffffff38
 8016c29:	726f2e78 	rsbvc	r2, pc, #120, 28	; 0x780
 8016c2d:	6d450067 	stclvs	0, cr0, [r5, #-412]	; 0xfffffe64
 8016c31:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
 8016c35:	 	tstmi	r0, r5, ror #8

08016c38 <artnet::NODE_ID>:
 8016c38:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016c3c:	0074654e 	rsbseq	r6, r4, lr, asr #10

08016c40 <defaults::SHORT_NAME>:
 8016c40:	20567641 	subscs	r7, r6, r1, asr #12
 8016c44:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016c48:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8016c4c:	65646f4e 	strbvs	r6, [r4, #-3918]!	; 0xfffff0b2
	...

08016c51 <artnet::NODE_ID>:
 8016c51:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016c55:	0074654e 	rsbseq	r6, r4, lr, asr #10
 8016c59:	78343025 	ldmdavc	r4!, {r0, r2, r5, ip, sp}
 8016c5d:	30255b20 	eorcc	r5, r5, r0, lsr #22
 8016c61:	205d6434 	subscs	r6, sp, r4, lsr r4
 8016c65:	41207325 			; <UNDEFINED> instruction: 0x41207325
 8016c69:	 	tstmi	r0, r6, ror r6

08016c6c <artnet::NODE_ID>:
 8016c6c:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016c70:	0074654e 	rsbseq	r6, r4, lr, asr #10
 8016c74:	52206f4e 	eorpl	r6, r0, #312	; 0x138
 8016c78:	72204d44 	eorvc	r4, r0, #68, 26	; 0x1100
 8016c7c:	6f707365 	svcvs	0x00707365
 8016c80:	0a65736e 	beq	9973a40 <__exidx_end+0x195ab90>
 8016c84:	50544800 	subspl	r4, r4, r0, lsl #16
 8016c88:	50544c00 	subspl	r4, r4, r0, lsl #24
 8016c8c:	74724100 	ldrbtvc	r4, [r2], #-256	; 0xffffff00
 8016c90:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
 8016c94:	43417300 	movtmi	r7, #4864	; 0x1300
 8016c98:	6f4e004e 	svcvs	0x004e004e
 8016c9c:	25206564 	strcs	r6, [r0, #-1380]!	; 0xfffffa9c
 8016ca0:	255b2064 	ldrbcs	r2, [fp, #-100]	; 0xffffff9c
 8016ca4:	000a5d75 	andeq	r5, sl, r5, ror sp
 8016ca8:	72694620 	rsbvc	r4, r9, #32, 12	; 0x2000000
 8016cac:	7261776d 	rsbvc	r7, r1, #28573696	; 0x1b40000
 8016cb0:	20202065 	eorcs	r2, r0, r5, rrx
 8016cb4:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8016cb8:	0a64252e 	beq	9920178 <__exidx_end+0x19072c8>
 8016cbc:	68532000 	ldmdavs	r3, {sp}^
 8016cc0:	2074726f 	rsbscs	r7, r4, pc, ror #4
 8016cc4:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 8016cc8:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8016ccc:	20000a73 	andcs	r0, r0, r3, ror sl
 8016cd0:	676e6f4c 	strbvs	r6, [lr, -ip, asr #30]!
 8016cd4:	6d616e20 	stclvs	14, cr6, [r1, #-128]!	; 0xffffff80
 8016cd8:	3a202065 	bcc	881ee74 <__exidx_end+0x805fc4>
 8016cdc:	0a732520 	beq	9ce0164 <__exidx_end+0x1cc72b4>
 8016ce0:	754f2000 	strbvc	r2, [pc, #-0]	; 8016ce8 <artnet::NODE_ID+0x7c>
 8016ce4:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
 8016ce8:	2020000a 	eorcs	r0, r0, sl
 8016cec:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
 8016cf0:	64322520 	ldrtvs	r2, [r2], #-1312	; 0xfffffae0
 8016cf4:	3a642520 	bcc	992017c <__exidx_end+0x19072cc>
 8016cf8:	322d255b 	eorcc	r2, sp, #381681664	; 0x16c00000
 8016cfc:	2d253a64 	vstmdbcs	r5!, {s6-s105}
 8016d00:	253a6432 	ldrcs	r6, [sl, #-1074]!	; 0xfffffbce
 8016d04:	5d64322d 	sfmpl	f3, 2, [r4, #-180]!	; 0xffffff4c
 8016d08:	7534253a 	ldrvc	r2, [r4, #-1338]!	; 0xfffffac6
 8016d0c:	73255b20 			; <UNDEFINED> instruction: 0x73255b20
 8016d10:	7b20005d 	blvc	8816e8c <__exidx_end+0x7fdfdc>
 8016d14:	0a7d7325 	beq	9f739b0 <__exidx_end+0x1f5ab00>
 8016d18:	6e492000 	cdpvs	0, 4, cr2, cr9, cr0, {0}
 8016d1c:	0a747570 	beq	9d342e4 <__exidx_end+0x1d1b434>
 8016d20:	50202000 	eorpl	r2, r0, r0
 8016d24:	2074726f 	rsbscs	r7, r4, pc, ror #4
 8016d28:	20643225 	rsbcs	r3, r4, r5, lsr #4
 8016d2c:	5b3a6425 	blpl	8eafdc8 <__exidx_end+0xe96f18>
 8016d30:	64322d25 	ldrtvs	r2, [r2], #-3365	; 0xfffff2db
 8016d34:	322d253a 	eorcc	r2, sp, #243269632	; 0xe800000
 8016d38:	2d253a64 	vstmdbcs	r5!, {s6-s105}
 8016d3c:	3a5d6432 	bcc	976fe0c <__exidx_end+0x1756f5c>
 8016d40:	20753425 	rsbscs	r3, r5, r5, lsr #8
 8016d44:	25203e2d 	strcs	r3, [r0, #-3629]!	; 0xfffff1d3
 8016d48:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016d4c:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8016d50:	000a6425 	andeq	r6, sl, r5, lsr #8
 8016d54:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8016d58:	2c64253a 	cfstr64cs	mvdx2, [r4], #-232	; 0xffffff18
 8016d5c:	73252300 			; <UNDEFINED> instruction: 0x73252300
 8016d60:	0a64253d 	beq	992025c <__exidx_end+0x19073ac>
 8016d64:	73252200 			; <UNDEFINED> instruction: 0x73252200
 8016d68:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8016d6c:	002c2273 	eoreq	r2, ip, r3, ror r2
 8016d70:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
 8016d74:	000a7325 	andeq	r7, sl, r5, lsr #6
 8016d78:	6e636173 	mcrvs	1, 3, r6, cr3, cr3, {3}
 8016d7c:	706e6900 	rsbvc	r6, lr, r0, lsl #18
 8016d80:	6f007475 	svcvs	0x00007475
 8016d84:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 8016d88:	74680074 	strbtvc	r0, [r8], #-116	; 0xffffff8c
 8016d8c:	746c0070 	strbtvc	r0, [ip], #-112	; 0xffffff90
 8016d90:	72610070 	rsbvc	r0, r1, #112	; 0x70
 8016d94:	74656e74 	strbtvc	r6, [r5], #-3700	; 0xfffff18c
 8016d98:	6c754d00 	ldclvs	13, cr4, [r5], #-0
 8016d9c:	70206974 	eorvc	r6, r0, r4, ror r9
 8016da0:	2074726f 	rsbscs	r7, r4, pc, ror #4
 8016da4:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 8016da8:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 8016dac:	6f697461 	svcvs	0x00697461
 8016db0:	6f4e006e 	svcvs	0x004e006e
 8016db4:	44006564 	strmi	r6, [r0], #-1380	; 0xfffffa9c
 8016db8:	522f584d 	eorpl	r5, pc, #5046272	; 0x4d0000
 8016dbc:	4f204d44 	svcmi	0x00204d44
 8016dc0:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 8016dc4:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
 8016dc8:	6e492058 	mcrvs	0, 2, r2, cr9, cr8, {2}
 8016dcc:	00747570 	rsbseq	r7, r4, r0, ror r5
 8016dd0:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016dd4:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8016dd8:	 	mcrvs	0, 3, r0, cr5, cr4, {1}

08016dda <ArtNetParamsConst::ENABLE_RDM>:
 8016dda:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8016dde:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 8016de2:	 	stcvs	13, cr6, [r0, #-400]	; 0xfffffe70

08016de5 <ArtNetParamsConst::MAP_UNIVERSE0>:
 8016de5:	5f70616d 	svcpl	0x0070616d
 8016de9:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8016ded:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8016df1:	 	rsbsvc	r0, r0, #48	; 0x30

08016df3 <ArtNetParamsConst::PROTOCOL_PORT>:
 8016df3:	746f7270 	strbtvc	r7, [pc], #-624	; 8016dfb <ArtNetParamsConst::PROTOCOL_PORT+0x8>
 8016df7:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8016c40 <defaults::SHORT_NAME>
 8016dfb:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016dff:	00615f74 	rsbeq	r5, r1, r4, ror pc
 8016e03:	746f7270 	strbtvc	r7, [pc], #-624	; 8016e0b <ArtNetParamsConst::PROTOCOL_PORT+0x18>
 8016e07:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8016c50 <defaults::SHORT_NAME+0x10>
 8016e0b:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016e0f:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8016e13:	746f7270 	strbtvc	r7, [pc], #-624	; 8016e1b <ArtNetParamsConst::PROTOCOL_PORT+0x28>
 8016e17:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8016c60 <artnet::NODE_ID+0xf>
 8016e1b:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016e1f:	00635f74 	rsbeq	r5, r3, r4, ror pc
 8016e23:	746f7270 	strbtvc	r7, [pc], #-624	; 8016e2b <ArtNetParamsConst::PROTOCOL_PORT+0x38>
 8016e27:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8016c70 <artnet::NODE_ID+0x4>
 8016e2b:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016e2f:	00645f74 	rsbeq	r5, r4, r4, ror pc

08016e33 <ArtNetParamsConst::NODE_LONG_NAME>:
 8016e33:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 8016e37:	6d616e5f 	stclvs	14, cr6, [r1, #-380]!	; 0xfffffe84
 8016e3b:	 	strbvs	r0, [pc, #-101]!	; 8016dde <ArtNetParamsConst::ENABLE_RDM+0x4>

08016e3d <ArtNetParamsConst::NODE_OEM_VALUE>:
 8016e3d:	5f6d656f 	svcpl	0x006d656f
 8016e41:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 8016e45:	 	ldmdavs	r3!, {r0, r2, r5, r6}^

08016e47 <ArtNetParamsConst::NODE_SHORT_NAME>:
 8016e47:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 8016e4b:	616e5f74 	smcvs	58868	; 0xe5f4
 8016e4f:	 	strvs	r6, [r0], #-1389	; 0xfffffa93

08016e52 <ArtNetParamsConst::DESTINATION_IP_PORT>:
 8016e52:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 8016e56:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 8016e5a:	5f6e6f69 	svcpl	0x006e6f69
 8016e5e:	705f7069 	subsvc	r7, pc, r9, rrx
 8016e62:	5f74726f 	svcpl	0x0074726f
 8016e66:	00000061 	andeq	r0, r0, r1, rrx
 8016e6a:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 8016e6e:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 8016e72:	5f6e6f69 	svcpl	0x006e6f69
 8016e76:	705f7069 	subsvc	r7, pc, r9, rrx
 8016e7a:	5f74726f 	svcpl	0x0074726f
 8016e7e:	00000062 	andeq	r0, r0, r2, rrx
 8016e82:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 8016e86:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 8016e8a:	5f6e6f69 	svcpl	0x006e6f69
 8016e8e:	705f7069 	subsvc	r7, pc, r9, rrx
 8016e92:	5f74726f 	svcpl	0x0074726f
 8016e96:	00000063 	andeq	r0, r0, r3, rrx
 8016e9a:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 8016e9e:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 8016ea2:	5f6e6f69 	svcpl	0x006e6f69
 8016ea6:	705f7069 	subsvc	r7, pc, r9, rrx
 8016eaa:	5f74726f 	svcpl	0x0074726f
 8016eae:	00000064 	andeq	r0, r0, r4, rrx

08016eb2 <ArtNetParamsConst::DISABLE_MERGE_TIMEOUT>:
 8016eb2:	61736964 	cmnvs	r3, r4, ror #18
 8016eb6:	5f656c62 	svcpl	0x00656c62
 8016eba:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 8016ebe:	69745f65 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 8016ec2:	756f656d 	strbvc	r6, [pc, #-1389]!	; 801695d <i2s_psc_config+0x9>
 8016ec6:	 	strbvs	r0, [lr, #-116]!	; 0xffffff8c

08016ec8 <ArtNetParamsConst::NODE_NETWORK_DATA_LOSS_TIMEOUT>:
 8016ec8:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 8016ecc:	5f6b726f 	svcpl	0x006b726f
 8016ed0:	61746164 	cmnvs	r4, r4, ror #2
 8016ed4:	736f6c5f 	cmnvc	pc, #24320	; 0x5f00
 8016ed8:	69745f73 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 8016edc:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8016977 <i2s_psc_config+0x23>
 8016ee0:	 	strbvs	r0, [lr, #-116]!	; 0xffffff8c

08016ee2 <ArtNetParamsConst::NET>:
 8016ee2:	0074656e 	rsbseq	r6, r4, lr, ror #10

08016ee6 <ArtNetParamsConst::SUBNET>:
 8016ee6:	6e627573 	mcrvs	5, 3, r7, cr2, cr3, {3}
 8016eea:	 	andvc	r7, r0, r5, ror #8

08016eed <ArtNetParamsConst::PROTOCOL>:
 8016eed:	746f7270 	strbtvc	r7, [pc], #-624	; 8016ef5 <ArtNetParamsConst::PROTOCOL+0x8>
 8016ef1:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8016d3c <artnet::NODE_ID+0xd0>
	...

08016ef6 <ArtNetParamsConst::FILE_NAME>:
 8016ef6:	6e747261 	cdpvs	2, 7, cr7, cr4, cr1, {3}
 8016efa:	742e7465 	strtvc	r7, [lr], #-1125	; 0xfffffb9b
 8016efe:	 			; <UNDEFINED> instruction: 0xff007478

08016f01 <ArtNetConst::OEM_ID>:
 8016f01:	 	ldrsheq	pc, [r0], #-255	; 0xffffff01	; <UNPREDICTABLE>

08016f03 <ArtNetConst::ESTA_ID>:
 8016f03:	 	strcc	r0, [r1, #-80]	; 0xffffffb0

08016f05 <ArtNetConst::VERSION>:
 8016f05:	33323501 	teqcc	r2, #4194304	; 0x400000
 8016f09:	35322e39 	ldrcc	r2, [r2, #-3641]!	; 0xfffff1c7
 8016f0d:	2e302e35 	mrccs	14, 1, r2, cr0, cr5, {1}
 8016f11:	2e250030 	mcrcs	0, 1, r0, cr5, cr0, {1}
 8016f15:	20733834 	rsbscs	r3, r3, r4, lsr r8
 8016f19:	30007325 	andcc	r7, r0, r5, lsr #6
 8016f1d:	6f4e202e 	svcvs	0x004e202e
 8016f21:	73616320 	cmnvc	r1, #32, 6	; 0x80000000
 8016f25:	6d207365 	stcvs	3, cr7, [r0, #-404]!	; 0xfffffe6c
 8016f29:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
 8016f2d:	202c6465 	eorcs	r6, ip, r5, ror #8
 8016f31:	73696874 	cmnvc	r9, #116, 16	; 0x740000
 8016f35:	6f687320 	svcvs	0x00687320
 8016f39:	6e646c75 	mcrvs	12, 3, r6, cr4, cr5, {3}
 8016f3d:	68207427 	stmdavs	r0!, {r0, r1, r2, r5, sl, ip, sp, lr}
 8016f41:	65707061 	ldrbvs	r7, [r0, #-97]!	; 0xffffff9f
 8016f45:	000a216e 	andeq	r2, sl, lr, ror #2
 8016f49:	64697242 	strbtvs	r7, [r9], #-578	; 0xfffffdbe
 8016f4d:	000a6567 	andeq	r6, sl, r7, ror #10
 8016f51:	72694620 	rsbvc	r4, r9, #32, 12	; 0x2000000
 8016f55:	7261776d 	rsbvc	r7, r1, #28573696	; 0x1b40000
 8016f59:	203a2065 	eorscs	r2, sl, r5, rrx
 8016f5d:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016f61:	20000a64 	andcs	r0, r0, r4, ror #20
 8016f65:	20444943 	subcs	r4, r4, r3, asr #18
 8016f69:	20202020 	eorcs	r2, r0, r0, lsr #32
 8016f6d:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8016f71:	20000a73 	andcs	r0, r0, r3, ror sl
 8016f75:	726f5020 	rsbvc	r5, pc, #32
 8016f79:	32252074 	eorcc	r2, r5, #116	; 0x74
 8016f7d:	6e552064 	cdpvs	0, 5, cr2, cr5, cr4, {3}
 8016f81:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 8016f85:	25206573 	strcs	r6, [r0, #-1395]!	; 0xfffffa8d
 8016f89:	2064332d 	rsbcs	r3, r4, sp, lsr #6
 8016f8d:	5d73255b 	cfldr64pl	mvdx2, [r3, #-364]!	; 0xfffffe94
 8016f91:	2020000a 	eorcs	r0, r0, sl
 8016f95:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
 8016f99:	64322520 	ldrtvs	r2, [r2], #-1312	; 0xfffffae0
 8016f9d:	696e5520 	stmdbvs	lr!, {r5, r8, sl, ip, lr}^
 8016fa1:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8016fa5:	2d252065 	stccs	0, cr2, [r5, #-404]!	; 0xfffffe6c
 8016fa9:	5b206433 	blpl	883007d <__exidx_end+0x8171cd>
 8016fad:	0a5d6425 	beq	9770049 <__exidx_end+0x1757199>
 8016fb1:	79532000 	ldmdbvc	r3, {sp}^
 8016fb5:	7268636e 	rsbvc	r6, r8, #-1207959551	; 0xb8000001
 8016fb9:	7a696e6f 	bvc	9a7297d <__exidx_end+0x1a59acd>
 8016fbd:	73692065 	cmnvc	r9, #101	; 0x65
 8016fc1:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 8016fc5:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8016fc9:	 	tstmi	r0, r4, ror #20

08016fcc <E117Const::ACN_PACKET_IDENTIFIER>:
 8016fcc:	2d435341 	stclcs	3, cr5, [r3, #-260]	; 0xfffffefc
 8016fd0:	312e3145 			; <UNDEFINED> instruction: 0x312e3145
 8016fd4:	00000037 	andeq	r0, r0, r7, lsr r0

08016fd8 <E131BridgeConst::VERSION>:
 8016fd8:	30251801 	eorcc	r1, r5, r1, lsl #16
 8016fdc:	252d7838 	strcs	r7, [sp, #-2104]!	; 0xfffff7c8
 8016fe0:	2d783430 	cfldrdcs	mvd3, [r8, #-192]!	; 0xffffff40
 8016fe4:	78343025 	ldmdavc	r4!, {r0, r2, r5, ip, sp}
 8016fe8:	3230252d 	eorscc	r2, r0, #188743680	; 0xb400000
 8016fec:	32302578 	eorscc	r2, r0, #120, 10	; 0x1e000000
 8016ff0:	30252d78 	eorcc	r2, r5, r8, ror sp
 8016ff4:	30257832 	eorcc	r7, r5, r2, lsr r8
 8016ff8:	30257832 	eorcc	r7, r5, r2, lsr r8
 8016ffc:	30257832 	eorcc	r7, r5, r2, lsr r8
 8017000:	30257832 	eorcc	r7, r5, r2, lsr r8
 8017004:	30257832 	eorcc	r7, r5, r2, lsr r8
 8017008:	00007832 	andeq	r7, r0, r2, lsr r8

0801700c <vtable for WS28xxDmx>:
	...
 8017014:	0800cd59 	stmdaeq	r0, {r0, r3, r4, r6, r8, sl, fp, lr, pc}
 8017018:	0800cd79 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, sl, fp, lr, pc}
 801701c:	0800cdb1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, fp, lr, pc}
 8017020:	0800cdfb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r8, sl, fp, lr, pc}
 8017024:	0800ce63 	stmdaeq	r0, {r0, r1, r5, r6, r9, sl, fp, lr, pc}
 8017028:	0800cd8b 	stmdaeq	r0, {r0, r1, r3, r7, r8, sl, fp, lr, pc}
 801702c:	0800d735 	stmdaeq	r0, {r0, r2, r4, r5, r8, r9, sl, ip, lr, pc}
 8017030:	0800cdc9 	stmdaeq	r0, {r0, r3, r6, r7, r8, sl, fp, lr, pc}
 8017034:	0800cd51 	stmdaeq	r0, {r0, r4, r6, r8, sl, fp, lr, pc}
 8017038:	0800cd55 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl, fp, lr, pc}
 801703c:	0800ce23 	stmdaeq	r0, {r0, r1, r5, r9, sl, fp, lr, pc}
 8017040:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8017044:	2a2e253a 	bcs	8ba0534 <__exidx_end+0xb87684>
 8017048:	23002c66 	movwcs	r2, #3174	; 0xc66
 801704c:	253d7325 	ldrcs	r7, [sp, #-805]!	; 0xfffffcdb
 8017050:	0a662a2e 	beq	99a1910 <__exidx_end+0x1988a60>
 8017054:	65764f00 	ldrbvs	r4, [r6, #-3840]!	; 0xfffff100
 8017058:	69727772 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
 801705c:	64206574 	strtvs	r6, [r0], #-1396	; 0xfffffa8c
 8017060:	73617461 	cmnvc	r1, #1627389952	; 0x61000000
 8017064:	74656568 	strbtvc	r6, [r5], #-1384	; 0xfffffa98
 8017068:	65764f00 	ldrbvs	r4, [r6, #-3840]!	; 0xfffff100
 801706c:	69727772 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
 8017070:	74206574 	strtvc	r6, [r0], #-1396	; 0xfffffa8c
 8017074:	6e696d69 	cdpvs	13, 6, cr6, cr9, cr9, {3}
 8017078:	75282067 	strvc	r2, [r8, #-103]!	; 0xffffff99
 801707c:	47002973 	smlsdxmi	r0, r3, r9, r2
 8017080:	70756f72 	rsbsvc	r6, r5, r2, ror pc
 8017084:	00676e69 	rsbeq	r6, r7, r9, ror #28
 8017088:	636f6c43 	cmnvs	pc, #17152	; 0x4300
 801708c:	6162206b 	cmnvs	r2, fp, rrx
 8017090:	20646573 	rsbcs	r6, r4, r3, ror r5
 8017094:	70696863 	rsbvc	r6, r9, r3, ror #16
 8017098:	50410073 	subpl	r0, r1, r3, ror r0
 801709c:	32303141 	eorscc	r3, r0, #1073741840	; 0x40000010
 80170a0:	394b532f 	stmdbcc	fp, {r0, r1, r2, r3, r5, r8, r9, ip, lr}^
 80170a4:	00323238 	eorseq	r3, r2, r8, lsr r2
 80170a8:	74736554 	ldrbtvc	r6, [r3], #-1364	; 0xfffffaac
 80170ac:	74617020 	strbtvc	r7, [r1], #-32	; 0xffffffe0
 80170b0:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
 80170b4:	78695000 	stmdavc	r9!, {ip, lr}^
 80170b8:	44206c65 	strtmi	r6, [r0], #-3173	; 0xfffff39b
 80170bc:	7020584d 	eorvc	r5, r0, sp, asr #16
 80170c0:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 80170c4:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 80170c8:	20000a73 	andcs	r0, r0, r3, ror sl
 80170cc:	756f7247 	strbvc	r7, [pc, #-583]!	; 8016e8d <ArtNetParamsConst::DESTINATION_IP_PORT+0x3b>
 80170d0:	676e6970 			; <UNDEFINED> instruction: 0x676e6970
 80170d4:	756f6320 	strbvc	r6, [pc, #-800]!	; 8016dbc <artnet::NODE_ID+0x150>
 80170d8:	3a20746e 	bcc	8834298 <__exidx_end+0x81b3e8>
 80170dc:	20642520 	rsbcs	r2, r4, r0, lsr #10
 80170e0:	6f72475b 	svcvs	0x0072475b
 80170e4:	20737075 	rsbscs	r7, r3, r5, ror r0
 80170e8:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 80170ec:	55000a5d 	strpl	r0, [r0, #-2653]	; 0xfffff5a3
 80170f0:	6f6e6b6e 	svcvs	0x006e6b6e
 80170f4:	 	mcrmi	14, 0, r6, cr0, cr7, {3}

080170f7 <s_patternName>:
 80170f7:	656e6f4e 	strbvs	r6, [lr, #-3918]!	; 0xfffff0b2
	...
 8017103:	61520000 	cmpvs	r2, r0
 8017107:	6f626e69 	svcvs	0x00626e69
 801710b:	79632077 	stmdbvc	r3!, {r0, r1, r2, r4, r5, r6, sp}^
 801710f:	00656c63 	rsbeq	r6, r5, r3, ror #24
 8017113:	61656854 	cmnvs	r5, r4, asr r8
 8017117:	20726574 	rsbscs	r6, r2, r4, ror r5
 801711b:	73616863 	cmnvc	r1, #6488064	; 0x630000
 801711f:	6f430065 	svcvs	0x00430065
 8017123:	72756f6c 	rsbsvc	r6, r5, #108, 30	; 0x1b0
 8017127:	70697720 	rsbvc	r7, r9, r0, lsr #14
 801712b:	00000065 	andeq	r0, r0, r5, rrx
 801712f:	6e616353 	mcrvs	3, 3, r6, cr1, cr3, {2}
 8017133:	0072656e 	rsbseq	r6, r2, lr, ror #10
 8017137:	00000000 	andeq	r0, r0, r0
 801713b:	61460000 	mrsvs	r0, (UNDEF: 70)
 801713f:	00006564 	andeq	r6, r0, r4, ror #10
	...
 801714b:	65646e55 	strbvs	r6, [r4, #-3669]!	; 0xfffff1ab
 801714f:	656e6966 	strbvs	r6, [lr, #-2406]!	; 0xfffff69a
 8017153:	 	ldrbmi	r0, [r2, -r4, rrx]

08017155 <PixelType::MAPS>:
 8017155:	00424752 	subeq	r4, r2, r2, asr r7
 8017159:	00474252 	subeq	r4, r7, r2, asr r2
 801715d:	00425247 	subeq	r5, r2, r7, asr #4
 8017161:	00524247 	subseq	r4, r2, r7, asr #4
 8017165:	00475242 	subeq	r5, r7, r2, asr #4
 8017169:	00524742 	subseq	r4, r2, r2, asr #14

0801716d <PixelType::TYPES>:
 801716d:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8017171:	00003130 	andeq	r3, r0, r0, lsr r1
 8017175:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8017179:	00003131 	andeq	r3, r0, r1, lsr r1
 801717d:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8017181:	00003231 	andeq	r3, r0, r1, lsr r2
 8017185:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8017189:	00423231 	subeq	r3, r2, r1, lsr r2
 801718d:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8017191:	00003331 	andeq	r3, r0, r1, lsr r3
 8017195:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8017199:	00003531 	andeq	r3, r0, r1, lsr r5
 801719d:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 80171a1:	00003231 	andeq	r3, r0, r1, lsr r2
 80171a5:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 80171a9:	00573231 	subseq	r3, r7, r1, lsr r2
 80171ad:	31534355 	cmpcc	r3, r5, asr r3
 80171b1:	00333039 	eorseq	r3, r3, r9, lsr r0
 80171b5:	32534355 	subscc	r4, r3, #1409286145	; 0x54000001
 80171b9:	00333039 	eorseq	r3, r3, r9, lsr r0
 80171bd:	38385343 	ldmdacc	r8!, {r0, r1, r6, r8, r9, ip, lr}
 80171c1:	00003231 	andeq	r3, r0, r1, lsr r2
 80171c5:	31415041 	cmpcc	r1, r1, asr #32
 80171c9:	00003230 	andeq	r3, r0, r0, lsr r2
 80171cd:	38394b53 	ldmdacc	r9!, {r0, r1, r4, r6, r8, r9, fp, lr}
 80171d1:	00003232 	andeq	r3, r0, r2, lsr r2
 80171d5:	31383950 	teqcc	r8, r0, asr r9
 80171d9:	00000033 	andeq	r0, r0, r3, lsr r0
 80171dd:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 80171e1:	6170206c 	cmnvs	r0, ip, rrx
 80171e5:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
 80171e9:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
 80171ed:	5420000a 	strtpl	r0, [r0], #-10
 80171f1:	20657079 	rsbcs	r7, r5, r9, ror r0
 80171f5:	3a202020 	bcc	881f27d <__exidx_end+0x8063cd>
 80171f9:	20732520 	rsbscs	r2, r3, r0, lsr #10
 80171fd:	5d64255b 	cfstr64pl	mvdx2, [r4, #-364]!	; 0xfffffe94
 8017201:	4320000a 			; <UNDEFINED> instruction: 0x4320000a
 8017205:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 8017209:	3a202020 	bcc	881f291 <__exidx_end+0x8063e1>
 801720d:	0a642520 	beq	9920695 <__exidx_end+0x19077e5>
 8017211:	614d2000 	mrsvs	r2, (UNDEF: 77)
 8017215:	6e697070 	mcrvs	0, 3, r7, cr9, cr0, {3}
 8017219:	203a2067 	eorscs	r2, sl, r7, rrx
 801721d:	5b207325 	blpl	8833eb9 <__exidx_end+0x81b009>
 8017221:	0a5d6425 	beq	97702bd <__exidx_end+0x175740d>
 8017225:	30542000 	subscc	r2, r4, r0
 8017229:	20202048 	eorcs	r2, r0, r8, asr #32
 801722d:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8017231:	66322e25 	ldrtvs	r2, [r2], -r5, lsr #28
 8017235:	78305b20 	ldmdavc	r0!, {r5, r8, r9, fp, ip, lr}
 8017239:	0a5d5825 	beq	976d2d5 <__exidx_end+0x1754425>
 801723d:	31542000 	cmpcc	r4, r0
 8017241:	20202048 	eorcs	r2, r0, r8, asr #32
 8017245:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8017249:	66322e25 	ldrtvs	r2, [r2], -r5, lsr #28
 801724d:	78305b20 	ldmdavc	r0!, {r5, r8, r9, fp, ip, lr}
 8017251:	0a5d5825 	beq	976d2ed <__exidx_end+0x175443d>
 8017255:	2e642500 	cdpcs	5, 6, cr2, cr4, cr0, {0}
 8017259:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801725d:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8017261:	2c73252c 	cfldr64cs	mvdx2, [r3], #-176	; 0xffffff50
 8017265:	252c7325 	strcs	r7, [ip, #-805]!	; 0xfffffcdb
 8017269:	73252c64 			; <UNDEFINED> instruction: 0x73252c64
 801726d:	6425000a 	strtvs	r0, [r5], #-10
 8017271:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8017275:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017279:	73252c64 			; <UNDEFINED> instruction: 0x73252c64
 801727d:	2c73252c 	cfldr64cs	mvdx2, [r3], #-176	; 0xffffff50
 8017281:	000a6425 	andeq	r6, sl, r5, lsr #8
 8017285:	4f006e4f 	svcmi	0x00006e4f
 8017289:	64006666 	strvs	r6, [r0], #-1638	; 0xfffff99a
 801728d:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 8017291:	253a7961 	ldrcs	r7, [sl, #-2401]!	; 0xfffff69f
 8017295:	74000a73 	strvc	r0, [r0], #-2675	; 0xfffff58d
 8017299:	3a707466 	bcc	9c34439 <__exidx_end+0x1c1b589>
 801729d:	000a7325 	andeq	r7, sl, r5, lsr #6
 80172a1:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 80172a5:	3a6e6f69 	bcc	9bb3051 <__exidx_end+0x1b9a1a1>
 80172a9:	75007325 	strvc	r7, [r0, #-805]	; 0xfffffcdb
 80172ad:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 80172b1:	25203a65 	strcs	r3, [r0, #-2661]!	; 0xfffff59b
 80172b5:	000a7375 	andeq	r7, sl, r5, ror r3
 80172b9:	4f525245 	svcmi	0x00525245
 80172bd:	673f2352 			; <UNDEFINED> instruction: 0x673f2352
 80172c1:	000a7465 	andeq	r7, sl, r5, ror #8
 80172c5:	70746674 	rsbsvc	r6, r4, r4, ror r6
 80172c9:	69640023 	stmdbvs	r4!, {r0, r1, r5}^
 80172cd:	616c7073 	smcvs	50947	; 0xc703
 80172d1:	45002379 	strmi	r2, [r0, #-889]	; 0xfffffc87
 80172d5:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
 80172d9:	000a2123 	andeq	r2, sl, r3, lsr #2
 80172dd:	4f525245 	svcmi	0x00525245
 80172e1:	0a3f2352 	beq	8fe0031 <__exidx_end+0xfc7181>
 80172e5:	62657200 	rsbvs	r7, r5, #0, 4
 80172e9:	23746f6f 	cmncs	r4, #444	; 0x1bc
 80172ed:	696c0023 	stmdbvs	ip!, {r0, r1, r5}^
 80172f1:	00237473 	eoreq	r7, r3, r3, ror r4
 80172f5:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 80172f9:	75002a23 	strvc	r2, [r0, #-2595]	; 0xfffff5dd
 80172fd:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 8017301:	76002365 	strvc	r2, [r0], -r5, ror #6
 8017305:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8017309:	00236e6f 	eoreq	r6, r3, pc, ror #28
 801730d:	23746567 	cmncs	r4, #432013312	; 0x19c00000
 8017311:	63616600 	cmnvs	r1, #0, 12
 8017315:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8017319:	 	tstmi	r0, r3, lsr #6

0801731c <s_Node>:
 801731c:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8017320:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 801732c:	41730000 	cmnmi	r3, r0
 8017330:	45204e43 	strmi	r4, [r0, #-3651]!	; 0xfffff1bd
 8017334:	31332e31 	teqcc	r3, r1, lsr lr
	...
 8017340:	2043534f 	subcs	r5, r3, pc, asr #6
 8017344:	76726553 			; <UNDEFINED> instruction: 0x76726553
 8017348:	00007265 	andeq	r7, r0, r5, ror #4
 801734c:	00000000 	andeq	r0, r0, r0
 8017350:	544c0000 	strbpl	r0, [ip], #-0
 8017354:	00000043 	andeq	r0, r0, r3, asr #32
	...
 8017364:	2043534f 	subcs	r5, r3, pc, asr #6
 8017368:	65696c43 	strbvs	r6, [r9, #-3139]!	; 0xfffff3bd
 801736c:	0000746e 	andeq	r7, r0, lr, ror #8
 8017370:	00000000 	andeq	r0, r0, r0
 8017374:	44520000 	ldrbmi	r0, [r2], #-0
 8017378:	74654e4d 	strbtvc	r4, [r5], #-3661	; 0xfffff1b3
 801737c:	524c4c20 	subpl	r4, ip, #32, 24	; 0x2000
 8017380:	6e4f2050 	mcrvs	0, 2, r2, cr15, cr0, {2}
 8017384:	0000796c 	andeq	r7, r0, ip, ror #18
 8017388:	776f6853 			; <UNDEFINED> instruction: 0x776f6853
 801738c:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
	...
 8017398:	494d0000 	stmdbmi	sp, {}^	; <UNPREDICTABLE>
 801739c:	00004944 	andeq	r4, r0, r4, asr #18
	...
 80173ac:	00504444 	subseq	r4, r0, r4, asr #8
	...

080173be <s_Output>:
 80173be:	00584d44 	subseq	r4, r8, r4, asr #26
	...
 80173ca:	004d4452 	subeq	r4, sp, r2, asr r4
	...
 80173d6:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
 80173da:	00726f74 	rsbseq	r6, r2, r4, ror pc
 80173de:	00000000 	andeq	r0, r0, r0
 80173e2:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 80173e6:	0000006c 	andeq	r0, r0, ip, rrx
 80173ea:	00000000 	andeq	r0, r0, r0
 80173ee:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
 80173f2:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 80173f6:	00000000 	andeq	r0, r0, r0
 80173fa:	0043534f 	subeq	r5, r3, pc, asr #6
	...
 8017406:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 801740a:	00006769 	andeq	r6, r0, r9, ror #14
 801740e:	00000000 	andeq	r0, r0, r0
 8017412:	70657453 	rsbvc	r7, r5, r3, asr r4
 8017416:	00726570 	rsbseq	r6, r2, r0, ror r5
 801741a:	00000000 	andeq	r0, r0, r0
 801741e:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
 8017422:	00007265 	andeq	r7, r0, r5, ror #4
 8017426:	00000000 	andeq	r0, r0, r0
 801742a:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801742e:	0074654e 	rsbseq	r6, r4, lr, asr #10
 8017432:	00000000 	andeq	r0, r0, r0
 8017436:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
 801743a:	00006c61 	andeq	r6, r0, r1, ror #24
 801743e:	00000000 	andeq	r0, r0, r0
 8017442:	20424752 	subcs	r4, r2, r2, asr r7
 8017446:	656e6150 	strbvs	r6, [lr, #-336]!	; 0xfffffeb0
 801744a:	0000006c 	andeq	r0, r0, ip, rrx
	...

08017450 <RemoteConfig::s_GET>:
 8017450:	0800f915 	stmdaeq	r0, {r0, r2, r4, r8, fp, ip, sp, lr, pc}
 8017454:	00000000 	andeq	r0, r0, r0
 8017458:	080172e6 	stmdaeq	r1, {r1, r2, r5, r6, r7, r9, ip, sp, lr}
 801745c:	00000008 	andeq	r0, r0, r8
 8017460:	0800edc9 	stmdaeq	r0, {r0, r3, r6, r7, r8, sl, fp, sp, lr, pc}
 8017464:	00000000 	andeq	r0, r0, r0
 8017468:	080172ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r9, ip, sp, lr}
 801746c:	00000005 	andeq	r0, r0, r5
 8017470:	0800edc9 	stmdaeq	r0, {r0, r3, r6, r7, r8, sl, fp, sp, lr, pc}
 8017474:	00000000 	andeq	r0, r0, r0
 8017478:	080172f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r9, ip, sp, lr}
 801747c:	00000006 	andeq	r0, r0, r6
 8017480:	0800efcd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, r9, sl, fp, sp, lr, pc}
 8017484:	00000000 	andeq	r0, r0, r0
 8017488:	080172fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r9, ip, sp, lr}
 801748c:	00000007 	andeq	r0, r0, r7
 8017490:	0800ef89 	stmdaeq	r0, {r0, r3, r7, r8, r9, sl, fp, sp, lr, pc}
 8017494:	00000000 	andeq	r0, r0, r0
 8017498:	08017304 	stmdaeq	r1, {r2, r8, r9, ip, sp, lr}
 801749c:	00000008 	andeq	r0, r0, r8
 80174a0:	0800eeb1 	stmdaeq	r0, {r0, r4, r5, r7, r9, sl, fp, sp, lr, pc}
 80174a4:	00000000 	andeq	r0, r0, r0
 80174a8:	080172cb 	stmdaeq	r1, {r0, r1, r3, r6, r7, r9, ip, sp, lr}
 80174ac:	00000008 	andeq	r0, r0, r8
 80174b0:	0800f24d 	stmdaeq	r0, {r0, r2, r3, r6, r9, ip, sp, lr, pc}
 80174b4:	00000000 	andeq	r0, r0, r0
 80174b8:	0801730d 	stmdaeq	r1, {r0, r2, r3, r8, r9, ip, sp, lr}
 80174bc:	00010004 	andeq	r0, r1, r4
 80174c0:	0800ef31 	stmdaeq	r0, {r0, r4, r5, r8, r9, sl, fp, sp, lr, pc}
 80174c4:	00000000 	andeq	r0, r0, r0
 80174c8:	080172c5 	stmdaeq	r1, {r0, r2, r6, r7, r9, ip, sp, lr}
 80174cc:	00000005 	andeq	r0, r0, r5
 80174d0:	0800f5fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8, sl, ip, sp, lr, pc}
 80174d4:	00000000 	andeq	r0, r0, r0
 80174d8:	08017312 	stmdaeq	r1, {r1, r4, r8, r9, ip, sp, lr}
 80174dc:	00000009 	andeq	r0, r0, r9

080174e0 <RemoteConfig::s_SET>:
 80174e0:	0800ef0d 	stmdaeq	r0, {r0, r2, r3, r8, r9, sl, fp, sp, lr, pc}
 80174e4:	00000000 	andeq	r0, r0, r0
 80174e8:	080172c5 	stmdaeq	r1, {r0, r2, r6, r7, r9, ip, sp, lr}
 80174ec:	00010005 	andeq	r0, r1, r5
 80174f0:	0800f021 	stmdaeq	r0, {r0, r5, ip, sp, lr, pc}
 80174f4:	00000000 	andeq	r0, r0, r0
 80174f8:	080172cb 	stmdaeq	r1, {r0, r1, r3, r6, r7, r9, ip, sp, lr}
 80174fc:	00010008 	andeq	r0, r1, r8
 8017500:	6f626552 	svcvs	0x00626552
 8017504:	6e69746f 	cdpvs	4, 6, cr7, cr9, cr15, {3}
 8017508:	2e2e2067 	cdpcs	0, 2, cr2, cr14, cr7, {3}
 801750c:	52000a2e 	andpl	r0, r0, #188416	; 0x2e000
 8017510:	6f6f6265 	svcvs	0x006f6265
 8017514:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 8017518:	2e2e2e20 	cdpcs	14, 2, cr2, cr14, cr0, {1}
 801751c:	6f637200 	svcvs	0x00637200
 8017520:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 8017524:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8017528:	74656e00 	strbtvc	r6, [r5], #-3584	; 0xfffff200
 801752c:	6b726f77 	blvs	9cb3310 <__exidx_end+0x1c9a460>
 8017530:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8017534:	73696400 	cmnvc	r9, #0, 8
 8017538:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 801753c:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8017540:	74726100 	ldrbtvc	r6, [r2], #-256	; 0xffffff00
 8017544:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 8017548:	00747874 	rsbseq	r7, r4, r4, ror r8
 801754c:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 8017550:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 8017554:	00747874 	rsbseq	r7, r4, r4, ror r8

08017558 <RemoteConfig::s_TXT>:
 8017558:	0800f255 	stmdaeq	r0, {r0, r2, r4, r6, r9, ip, sp, lr, pc}
 801755c:	00000000 	andeq	r0, r0, r0
 8017560:	0800f51d 	stmdaeq	r0, {r0, r2, r3, r4, r8, sl, ip, sp, lr, pc}
 8017564:	00000000 	andeq	r0, r0, r0
 8017568:	0801751d 	stmdaeq	r1, {r0, r2, r3, r4, r8, sl, ip, sp, lr}
 801756c:	0000000b 	andeq	r0, r0, fp
 8017570:	0000000c 	andeq	r0, r0, ip
 8017574:	0800f281 	stmdaeq	r0, {r0, r7, r9, ip, sp, lr, pc}
 8017578:	00000000 	andeq	r0, r0, r0
 801757c:	0800f551 	stmdaeq	r0, {r0, r4, r6, r8, sl, ip, sp, lr, pc}
 8017580:	00000000 	andeq	r0, r0, r0
 8017584:	08017529 	stmdaeq	r1, {r0, r3, r5, r8, sl, ip, sp, lr}
 8017588:	0000000b 	andeq	r0, r0, fp
 801758c:	00000000 	andeq	r0, r0, r0
 8017590:	0800f305 	stmdaeq	r0, {r0, r2, r8, r9, ip, sp, lr, pc}
 8017594:	00000000 	andeq	r0, r0, r0
 8017598:	0800f5d1 	stmdaeq	r0, {r0, r4, r6, r7, r8, sl, ip, sp, lr, pc}
 801759c:	00000000 	andeq	r0, r0, r0
 80175a0:	08017535 	stmdaeq	r1, {r0, r2, r4, r5, r8, sl, ip, sp, lr}
 80175a4:	0000000b 	andeq	r0, r0, fp
 80175a8:	0000000f 	andeq	r0, r0, pc
 80175ac:	0800f2ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r9, ip, sp, lr, pc}
 80175b0:	00000000 	andeq	r0, r0, r0
 80175b4:	0800f579 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, sl, ip, sp, lr, pc}
 80175b8:	00000000 	andeq	r0, r0, r0
 80175bc:	08017541 	stmdaeq	r1, {r0, r6, r8, sl, ip, sp, lr}
 80175c0:	0000000a 	andeq	r0, r0, sl
 80175c4:	00000001 	andeq	r0, r0, r1
 80175c8:	0800f2d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, ip, sp, lr, pc}
 80175cc:	00000000 	andeq	r0, r0, r0
 80175d0:	0800f5a5 	stmdaeq	r0, {r0, r2, r5, r7, r8, sl, ip, sp, lr, pc}
 80175d4:	00000000 	andeq	r0, r0, r0
 80175d8:	0801754c 	stmdaeq	r1, {r2, r3, r6, r8, sl, ip, sp, lr}
 80175dc:	0000000b 	andeq	r0, r0, fp
 80175e0:	00000003 	andeq	r0, r0, r3
 80175e4:	00544547 	subseq	r4, r4, r7, asr #10
 80175e8:	54534f50 	ldrbpl	r4, [r3], #-3920	; 0xfffff0b0
 80175ec:	54544800 	ldrbpl	r4, [r4], #-2048	; 0xfffff800
 80175f0:	0a200050 	beq	8817738 <__exidx_end+0x7fe888>
 80175f4:	312e3100 			; <UNDEFINED> instruction: 0x312e3100
 80175f8:	43003a00 	movwmi	r3, #2560	; 0xa00
 80175fc:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 8017600:	542d746e 	strtpl	r7, [sp], #-1134	; 0xfffffb92
 8017604:	00657079 	rsbeq	r7, r5, r9, ror r0
 8017608:	61003b20 	tstvs	r0, r0, lsr #22
 801760c:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
 8017610:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
 8017614:	6a2f6e6f 	bvs	8bf2fd8 <__exidx_end+0xbda128>
 8017618:	006e6f73 	rsbeq	r6, lr, r3, ror pc
 801761c:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 8017620:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 8017624:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 8017628:	2f006874 	svccs	0x00006874
 801762c:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 8017630:	74682e78 	strbtvc	r2, [r8], #-3704	; 0xfffff188
 8017634:	2f006c6d 	svccs	0x00006c6d
 8017638:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 801763c:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 8017640:	2f007373 	svccs	0x00007373
 8017644:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 8017648:	736a2e78 	cmnvc	sl, #120, 28	; 0x780
 801764c:	736a2f00 	cmnvc	sl, #0, 30
 8017650:	002f6e6f 	eoreq	r6, pc, pc, ror #28
 8017654:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8017658:	72657600 	rsbvc	r7, r5, #0, 12
 801765c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 8017660:	74707500 	ldrbtvc	r7, [r0], #-1280	; 0xfffffb00
 8017664:	00656d69 	rsbeq	r6, r5, r9, ror #26
 8017668:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801766c:	0079616c 	rsbseq	r6, r9, ip, ror #2
 8017670:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8017674:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8017678:	6a2f0079 	bvs	8bd7864 <__exidx_end+0xbbe9b4>
 801767c:	2f6e6f73 	svccs	0x006e6f73
 8017680:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 8017684:	72006e6f 	andvc	r6, r0, #1776	; 0x6f0
 8017688:	6f6f6265 	svcvs	0x006f6265
 801768c:	64690074 	strbtvs	r0, [r9], #-116	; 0xffffff8c
 8017690:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 8017694:	3c007966 			; <UNDEFINED> instruction: 0x3c007966
 8017698:	434f4421 	movtmi	r4, #62497	; 0xf421
 801769c:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 80176a0:	6d746820 	ldclvs	8, cr6, [r4, #-128]!	; 0xffffff80
 80176a4:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 80176a8:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 80176ac:	683c0a3e 	ldmdavs	ip!, {r1, r2, r3, r4, r5, r9, fp}
 80176b0:	3e646165 	powccsz	f6, f4, f5
 80176b4:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 80176b8:	533e656c 	teqpl	lr, #108, 10	; 0x1b000000
 80176bc:	696d6275 	stmdbvs	sp!, {r0, r2, r4, r5, r6, r9, sp, lr}^
 80176c0:	742f3c74 	strtvc	r3, [pc], #-3188	; 80176c8 <RemoteConfig::s_TXT+0x170>
 80176c4:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
 80176c8:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 80176cc:	3e646165 	powccsz	f6, f4, f5
 80176d0:	6f623c0a 	svcvs	0x00623c0a
 80176d4:	3c3e7964 			; <UNDEFINED> instruction: 0x3c3e7964
 80176d8:	4f3e3168 	svcmi	0x003e3168
 80176dc:	682f3c4b 	stmdavs	pc!, {r0, r1, r3, r6, sl, fp, ip, sp}	; <UNPREDICTABLE>
 80176e0:	2f3c3e31 	svccs	0x003c3e31
 80176e4:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 80176e8:	2f3c0a3e 	svccs	0x003c0a3e
 80176ec:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 80176f0:	52000a3e 	andpl	r0, r0, #253952	; 0x3e000
 80176f4:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
 80176f8:	45207473 	strmi	r7, [r0, #-1139]!	; 0xfffffb8d
 80176fc:	7469746e 	strbtvc	r7, [r9], #-1134	; 0xfffffb92
 8017700:	6f542079 	svcvs	0x00542079
 8017704:	614c206f 	cmpvs	ip, pc, rrx
 8017708:	00656772 	rsbeq	r6, r5, r2, ror r7
 801770c:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 8017710:	6e756f46 	cdpvs	15, 7, cr6, cr5, cr6, {2}
 8017714:	65520064 	ldrbvs	r0, [r2, #-100]	; 0xffffff9c
 8017718:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
 801771c:	52552d74 	subspl	r2, r5, #116, 26	; 0x1d00
 8017720:	6f542049 	svcvs	0x00542049
 8017724:	6f4c206f 	svcvs	0x004c206f
 8017728:	5600676e 	strpl	r6, [r0], -lr, ror #14
 801772c:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8017730:	4e206e6f 	cdpmi	14, 2, cr6, cr0, cr15, {3}
 8017734:	5320746f 			; <UNDEFINED> instruction: 0x5320746f
 8017738:	6f707075 	svcvs	0x00707075
 801773c:	64657472 	strbtvs	r7, [r5], #-1138	; 0xfffffb8e
 8017740:	74654d00 	strbtvc	r4, [r5], #-3328	; 0xfffff300
 8017744:	20646f68 	rsbcs	r6, r4, r8, ror #30
 8017748:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 801774c:	6c706d49 	ldclvs	13, cr6, [r0], #-292	; 0xfffffedc
 8017750:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 8017754:	00646574 	rsbeq	r6, r4, r4, ror r5
 8017758:	20646142 	rsbcs	r6, r4, r2, asr #2
 801775c:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
 8017760:	00747365 	rsbseq	r7, r4, r5, ror #6
 8017764:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
 8017768:	206e776f 	rsbcs	r7, lr, pc, ror #14
 801776c:	6f727245 	svcvs	0x00727245
 8017770:	6e490072 	mcrvs	0, 2, r0, cr9, cr2, {3}
 8017774:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
 8017778:	53206c61 			; <UNDEFINED> instruction: 0x53206c61
 801777c:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
 8017780:	72452072 	subvc	r2, r5, #114	; 0x72
 8017784:	00726f72 	rsbseq	r6, r2, r2, ror pc
 8017788:	3c004b4f 			; <UNDEFINED> instruction: 0x3c004b4f
 801778c:	434f4421 	movtmi	r4, #62497	; 0xf421
 8017790:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 8017794:	6d746820 	ldclvs	8, cr6, [r4, #-128]!	; 0xffffff80
 8017798:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 801779c:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 80177a0:	683c0a3e 	ldmdavs	ip!, {r1, r2, r3, r4, r5, r9, fp}
 80177a4:	3e646165 	powccsz	f6, f4, f5
 80177a8:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 80177ac:	253e656c 	ldrcs	r6, [lr, #-1388]!	; 0xfffffa94
 80177b0:	73252075 			; <UNDEFINED> instruction: 0x73252075
 80177b4:	69742f3c 	ldmdbvs	r4!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 80177b8:	3e656c74 	mcrcc	12, 3, r6, cr5, cr4, {3}
 80177bc:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 80177c0:	0a3e6461 	beq	8fb094c <__exidx_end+0xf97a9c>
 80177c4:	646f623c 	strbtvs	r6, [pc], #-572	; 80177cc <RemoteConfig::s_TXT+0x274>
 80177c8:	683c3e79 	ldmdavs	ip!, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 80177cc:	73253e31 			; <UNDEFINED> instruction: 0x73253e31
 80177d0:	31682f3c 	cmncc	r8, ip, lsr pc
 80177d4:	622f3c3e 	eorvs	r3, pc, #15872	; 0x3e00
 80177d8:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 80177dc:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 80177e0:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 80177e4:	5448000a 	strbpl	r0, [r8], #-10
 80177e8:	312f5054 	qsubcc	r5, r4, pc	; <UNPREDICTABLE>
 80177ec:	2520312e 	strcs	r3, [r0, #-302]!	; 0xfffffed2
 80177f0:	73252075 			; <UNDEFINED> instruction: 0x73252075
 80177f4:	65530a0d 	ldrbvs	r0, [r3, #-2573]	; 0xfffff5f3
 80177f8:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
 80177fc:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 8017800:	6f430a0d 	svcvs	0x00430a0d
 8017804:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 8017808:	79542d74 	ldmdbvc	r4, {r2, r4, r5, r6, r8, sl, fp, sp}^
 801780c:	203a6570 	eorscs	r6, sl, r0, ror r5
 8017810:	0a0d7325 	beq	83744ac <__exidx_end+0x35b5fc>
 8017814:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 8017818:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 801781c:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 8017820:	203a6874 	eorscs	r6, sl, r4, ror r8
 8017824:	0a0d7525 	beq	8374cc0 <__exidx_end+0x35be10>
 8017828:	6e6e6f43 	cdpvs	15, 6, cr6, cr14, cr3, {2}
 801782c:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 8017830:	203a6e6f 	eorscs	r6, sl, pc, ror #28
 8017834:	736f6c63 	cmnvc	pc, #25344	; 0x6300
 8017838:	0d0a0d65 	stceq	13, cr0, [sl, #-404]	; 0xfffffe6c
 801783c:	 	ldrbvs	r0, [r4, #-10]!

0801783e <contentType>:
 801783e:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8017842:	6d74682f 	ldclvs	8, cr6, [r4, #-188]!	; 0xffffff44
 8017846:	0000006c 	andeq	r0, r0, ip, rrx
	...
 801785e:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8017862:	7373632f 	cmnvc	r3, #-1140850688	; 0xbc000000
	...
 801787e:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8017882:	76616a2f 	strbtvc	r6, [r1], -pc, lsr #20
 8017886:	72637361 	rsbvc	r7, r3, #-2080374783	; 0x84000001
 801788a:	00747069 	rsbseq	r7, r4, r9, rrx
	...
 801789e:	6c707061 	ldclvs	0, cr7, [r0], #-388	; 0xfffffe7c
 80178a2:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
 80178a6:	2f6e6f69 	svccs	0x006e6f69
 80178aa:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
	...

080178be <RemoteConfigConst::PARAMS_DISABLE>:
 80178be:	61736964 	cmnvs	r3, r4, ror #18
 80178c2:	00656c62 	rsbeq	r6, r5, r2, ror #24

080178c6 <RemoteConfigConst::PARAMS_FILE_NAME>:
 80178c6:	6e6f6372 	mcrvs	3, 3, r6, cr15, cr2, {3}
 80178ca:	2e676966 	vnmulcs.f16	s13, s14, s13	; <UNPREDICTABLE>
 80178ce:	00747874 	rsbseq	r7, r4, r4, ror r8

080178d2 <RemoteConfigConst::PARAMS_DISPLAY_NAME>:
 80178d2:	70736964 	rsbsvc	r6, r3, r4, ror #18
 80178d6:	5f79616c 	svcpl	0x0079616c
 80178da:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

080178df <RemoteConfigConst::PARAMS_DISABLE_WRITE>:
 80178df:	61736964 	cmnvs	r3, r4, ror #18
 80178e3:	5f656c62 	svcpl	0x00656c62
 80178e7:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 80178eb:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

080178ed <RemoteConfigConst::PARAMS_ENABLE_REBOOT>:
 80178ed:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 80178f1:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 80178f5:	6f6f6265 	svcvs	0x006f6265
 80178f9:	 	mcrvs	0, 3, r0, cr5, cr4, {3}

080178fb <RemoteConfigConst::PARAMS_ENABLE_UPTIME>:
 80178fb:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 80178ff:	755f656c 	ldrbvc	r6, [pc, #-1388]	; 801739b <s_Node+0x7f>
 8017903:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 8017907:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

08017909 <RemoteConfigConst::PARAMS_ENABLE_FACTORY>:
 8017909:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 801790d:	665f656c 	ldrbvs	r6, [pc], -ip, ror #10
 8017911:	6f746361 	svcvs	0x00746361
 8017915:	7b007972 	blvc	8035ee5 <__exidx_end+0x1d035>
 8017919:	73696c22 	cmnvc	r9, #8704	; 0x2200
 801791d:	7b3a2274 	blvc	8ea02f5 <__exidx_end+0xe87445>
 8017921:	22706922 	rsbscs	r6, r0, #557056	; 0x88000
 8017925:	6425223a 	strtvs	r2, [r5], #-570	; 0xfffffdc6
 8017929:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801792d:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017931:	222c2264 	eorcs	r2, ip, #100, 4	; 0x40000006
 8017935:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 8017939:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 801793d:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8017941:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
 8017945:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 8017949:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 801794d:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8017951:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8017955:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8017959:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 801795d:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8017961:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8017965:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8017969:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 801796d:	253a2274 	ldrcs	r2, [sl, #-628]!	; 0xfffffd8c
 8017971:	7d7d7d64 	ldclvc	13, cr7, [sp, #-400]!	; 0xfffffe70
 8017975:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 8017979:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801797d:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 8017981:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 8017985:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 8017989:	616f6222 	cmnvs	pc, r2, lsr #4
 801798d:	3a226472 	bcc	88b0b5d <__exidx_end+0x897cad>
 8017991:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8017995:	7562222c 	strbvc	r2, [r2, #-556]!	; 0xfffffdd4
 8017999:	22646c69 	rsbcs	r6, r4, #26880	; 0x6900
 801799d:	64227b3a 	strtvs	r7, [r2], #-2874	; 0xfffff4c6
 80179a1:	22657461 	rsbcs	r7, r5, #1627389952	; 0x61000000
 80179a5:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 80179a9:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 80179ad:	6d697422 	cfstrdvs	mvd7, [r9, #-136]!	; 0xffffff78
 80179b1:	223a2265 	eorscs	r2, sl, #1342177286	; 0x50000006
 80179b5:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 80179b9:	007d7d22 	rsbseq	r7, sp, r2, lsr #26
 80179bd:	7075227b 	rsbsvc	r2, r5, fp, ror r2
 80179c1:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 80179c5:	75253a22 	strvc	r3, [r5, #-2594]!	; 0xfffff5de
 80179c9:	7b000a7d 	blvc	801a3c5 <__exidx_end+0x1515>
 80179cd:	73696422 	cmnvc	r9, #570425344	; 0x22000000
 80179d1:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 80179d5:	64253a22 	strtvs	r3, [r5], #-2594	; 0xfffff5de
 80179d9:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 80179dd:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 80179e1:	7b3a2273 	blvc	8ea03b5 <__exidx_end+0xe87505>
 80179e5:	74726122 	ldrbtvc	r6, [r2], #-290	; 0xfffffede
 80179e9:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 80179ed:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 80179f1:	7241223a 	subvc	r2, r1, #-1610612733	; 0xa0000003
 80179f5:	654e2d74 	strbvs	r2, [lr, #-3444]	; 0xfffff28c
 80179f9:	222c2274 	eorcs	r2, ip, #116, 4	; 0x40000007
 80179fd:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 8017a01:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 8017a05:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 8017a09:	4d44223a 	sfmmi	f2, 2, [r4, #-232]	; 0xffffff18
 8017a0d:	69502058 	ldmdbvs	r0, {r3, r4, r6, sp}^
 8017a11:	226c6578 	rsbcs	r6, ip, #120, 10	; 0x1e000000
 8017a15:	6964222c 	stmdbvs	r4!, {r2, r3, r5, r9, sp}^
 8017a19:	616c7073 	smcvs	50947	; 0xc703
 8017a1d:	78742e79 	ldmdavc	r4!, {r0, r3, r4, r5, r6, r9, sl, fp, sp}^
 8017a21:	223a2274 	eorscs	r2, sl, #116, 4	; 0x40000007
 8017a25:	70736944 	rsbsvc	r6, r3, r4, asr #18
 8017a29:	2079616c 	rsbscs	r6, r9, ip, ror #2
 8017a2d:	22464455 	subcs	r4, r6, #1426063360	; 0x55000000
 8017a31:	656e222c 	strbvs	r2, [lr, #-556]!	; 0xfffffdd4
 8017a35:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 8017a39:	78742e6b 	ldmdavc	r4!, {r0, r1, r3, r5, r6, r9, sl, fp, sp}^
 8017a3d:	223a2274 	eorscs	r2, sl, #116, 4	; 0x40000007
 8017a41:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 8017a45:	226b726f 	rsbcs	r7, fp, #-268435450	; 0xf0000006
 8017a49:	6372222c 	cmnvs	r2, #44, 4	; 0xc0000002
 8017a4d:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 8017a51:	78742e67 	ldmdavc	r4!, {r0, r1, r2, r5, r6, r9, sl, fp, sp}^
 8017a55:	223a2274 	eorscs	r2, sl, #116, 4	; 0x40000007
 8017a59:	6f6d6552 	svcvs	0x006d6552
 8017a5d:	63206574 			; <UNDEFINED> instruction: 0x63206574
 8017a61:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 8017a65:	61727567 	cmnvs	r2, r7, ror #10
 8017a69:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8017a6d:	007d7d22 	rsbseq	r7, sp, r2, lsr #26
 8017a71:	2f637273 	svccs	0x00637273
 8017a75:	70747468 	rsbsvc	r7, r4, r8, ror #8
 8017a79:	65672f64 	strbvs	r2, [r7, #-3940]!	; 0xfffff09c
 8017a7d:	69665f74 	stmdbvs	r6!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 8017a81:	635f656c 	cmpvs	pc, #108, 10	; 0x1b000000
 8017a85:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 8017a89:	632e746e 			; <UNDEFINED> instruction: 0x632e746e
 8017a8d:	67007070 	smlsdxvs	r0, r0, r0, r7
 8017a91:	665f7465 	ldrbvs	r7, [pc], -r5, ror #8
 8017a95:	5f656c69 	svcpl	0x00656c69
 8017a99:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 8017a9d:	00746e65 	rsbseq	r6, r4, r5, ror #28
 8017aa1:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 8017aa5:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	; 0xffffff80
 8017aa9:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 8017aad:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 8017ab1:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 8017ab5:	203e2d20 	eorscs	r2, lr, r0, lsr #26
 8017ab9:	000a6425 	andeq	r6, sl, r5, lsr #8
 8017abd:	202d2d3c 	eorcs	r2, sp, ip, lsr sp
 8017ac1:	253a7325 	ldrcs	r7, [sl, #-805]!	; 0xfffffcdb
 8017ac5:	64253a73 	strtvs	r3, [r5], #-2675	; 0xfffff58d
 8017ac9:	 	teqcs	ip, sl

08017acb <index_html>:
 8017acb:	4f44213c 	svcmi	0x0044213c
 8017acf:	50595443 	subspl	r5, r9, r3, asr #8
 8017ad3:	74682045 	strbtvc	r2, [r8], #-69	; 0xffffffbb
 8017ad7:	0a3e6c6d 	beq	8fb2c93 <__exidx_end+0xf99de3>
 8017adb:	6d74683c 	ldclvs	8, cr6, [r4, #-240]!	; 0xffffff10
 8017adf:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 8017ae3:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
 8017ae7:	3c090a3e 			; <UNDEFINED> instruction: 0x3c090a3e
 8017aeb:	6b6e696c 	blvs	9bb20a3 <__exidx_end+0x1b991f3>
 8017aef:	6c657220 	sfmvs	f7, 2, [r5], #-128	; 0xffffff80
 8017af3:	7473223d 	ldrbtvc	r2, [r3], #-573	; 0xfffffdc3
 8017af7:	73656c79 	cmnvc	r5, #30976	; 0x7900
 8017afb:	74656568 	strbtvc	r6, [r5], #-1384	; 0xfffffa98
 8017aff:	72682022 	rsbvc	r2, r8, #34	; 0x22
 8017b03:	223d6665 	eorscs	r6, sp, #105906176	; 0x6500000
 8017b07:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 8017b0b:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 8017b0f:	20227373 	eorcs	r7, r2, r3, ror r3
 8017b13:	090a3e2f 	stmdbeq	sl, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}
 8017b17:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 8017b1b:	3c3e656c 	cfldr32cc	mvfx6, [lr], #-432	; 0xfffffe50
 8017b1f:	7469742f 	strbtvc	r7, [r9], #-1071	; 0xfffffbd1
 8017b23:	0a3e656c 	beq	8fb10db <__exidx_end+0xf9822b>
 8017b27:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 8017b2b:	0a3e6461 	beq	8fb0cb7 <__exidx_end+0xf97e07>
 8017b2f:	646f623c 	strbtvs	r6, [pc], #-572	; 8017b37 <index_html+0x6c>
 8017b33:	090a3e79 	stmdbeq	sl, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 8017b37:	6165683c 	cmnvs	r5, ip, lsr r8
 8017b3b:	3e726564 	cdpcc	5, 7, cr6, cr2, cr4, {3}
 8017b3f:	206c753c 	rsbcs	r7, ip, ip, lsr r5
 8017b43:	223d6469 	eorscs	r6, sp, #1761607680	; 0x69000000
 8017b47:	694c6469 	stmdbvs	ip, {r0, r3, r5, r6, sl, sp, lr}^
 8017b4b:	3e227473 	mcrcc	4, 1, r7, cr2, cr3, {3}
 8017b4f:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 8017b53:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8017b57:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 8017b5b:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 8017b5f:	3c3e703c 	ldccc	0, cr7, [lr], #-240	; 0xffffff10
 8017b63:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 8017b67:	69207463 	stmdbvs	r0!, {r0, r1, r5, r6, sl, ip, sp, lr}
 8017b6b:	69223d64 	stmdbvs	r2!, {r2, r5, r6, r8, sl, fp, ip, sp}
 8017b6f:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 8017b73:	6f746365 	svcvs	0x00746365
 8017b77:	20227972 	eorcs	r7, r2, r2, ror r9
 8017b7b:	68636e6f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 8017b7f:	65676e61 	strbvs	r6, [r7, #-3681]!	; 0xfffff19f
 8017b83:	6567223d 	strbvs	r2, [r7, #-573]!	; 0xfffffdc3
 8017b87:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 8017b8b:	68742874 	ldmdavs	r4!, {r2, r4, r5, r6, fp, sp}^
 8017b8f:	762e7369 	strtvc	r7, [lr], -r9, ror #6
 8017b93:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 8017b97:	3c3e2229 	lfmcc	f2, 4, [lr], #-164	; 0xffffff5c
 8017b9b:	6c65732f 	stclvs	3, cr7, [r5], #-188	; 0xffffff44
 8017b9f:	3e746365 	cdpcc	3, 7, cr6, cr4, cr5, {3}
 8017ba3:	3e702f3c 	mrccc	15, 3, r2, cr0, cr12, {1}
 8017ba7:	743c090a 	ldrtvc	r0, [ip], #-2314	; 0xfffff6f6
 8017bab:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8017baf:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 8017bb3:	54646922 	strbtpl	r6, [r4], #-2338	; 0xfffff6de
 8017bb7:	20227478 	eorcs	r7, r2, r8, ror r4
 8017bbb:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 8017bbf:	273d7265 	ldrcs	r7, [sp, -r5, ror #4]!
 8017bc3:	3c3e2731 	ldccc	7, cr2, [lr], #-196	; 0xffffff3c
 8017bc7:	6261742f 	rsbvs	r7, r1, #788529152	; 0x2f000000
 8017bcb:	0a3e656c 	beq	8fb1183 <__exidx_end+0xf982d3>
 8017bcf:	6f663c09 	svcvs	0x00663c09
 8017bd3:	7265746f 	rsbvc	r7, r5, #1862270976	; 0x6f000000
 8017bd7:	6c753c3e 	ldclvs	12, cr3, [r5], #-248	; 0xffffff08
 8017bdb:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 8017bdf:	56646922 	strbtpl	r6, [r4], -r2, lsr #18
 8017be3:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8017be7:	3e226e6f 	cdpcc	14, 2, cr6, cr2, cr15, {3}
 8017beb:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 8017bef:	662f3c3e 			; <UNDEFINED> instruction: 0x662f3c3e
 8017bf3:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 8017bf7:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 8017bfb:	7263733c 	rsbvc	r7, r3, #60, 6	; 0xf0000000
 8017bff:	20747069 	rsbscs	r7, r4, r9, rrx
 8017c03:	3d637273 	sfmcc	f7, 2, [r3, #-460]!	; 0xfffffe34
 8017c07:	646e6922 	strbtvs	r6, [lr], #-2338	; 0xfffff6de
 8017c0b:	6a2e7865 	bvs	8bb5da7 <__exidx_end+0xb9cef7>
 8017c0f:	3c3e2273 	lfmcc	f2, 4, [lr], #-460	; 0xfffffe34
 8017c13:	7263732f 	rsbvc	r7, r3, #-1140850688	; 0xbc000000
 8017c17:	3e747069 	cdpcc	0, 7, cr7, cr4, cr9, {3}
 8017c1b:	622f3c0a 	eorvs	r3, pc, #2560	; 0xa00
 8017c1f:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 8017c23:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8017c27:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 8017c2b:	 	svcvs	0x0062000a

08017c2d <styles_css>:
 8017c2d:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 8017c31:	200a7b20 	andcs	r7, sl, r0, lsr #22
 8017c35:	63616220 	cmnvs	r1, #32, 4
 8017c39:	6f72676b 	svcvs	0x0072676b
 8017c3d:	2d646e75 	stclcs	14, cr6, [r4, #-468]!	; 0xfffffe2c
 8017c41:	6f6c6f63 	svcvs	0x006c6f63
 8017c45:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 8017c49:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 8017c4d:	30322c30 	eorscc	r2, r2, r0, lsr ip
 8017c51:	2930322c 	ldmdbcs	r0!, {r2, r3, r5, r9, ip, sp}
 8017c55:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 8017c59:	6f6c6f63 	svcvs	0x006c6f63
 8017c5d:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 8017c61:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 8017c65:	202c3535 	eorcs	r3, ip, r5, lsr r5
 8017c69:	2c353532 	cfldr32cs	mvfx3, [r5], #-200	; 0xffffff38
 8017c6d:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
 8017c71:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 8017c75:	6c750a0a 			; <UNDEFINED> instruction: 0x6c750a0a
 8017c79:	200a7b20 	andcs	r7, sl, r0, lsr #22
 8017c7d:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 8017c81:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8017c85:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 8017c89:	0a3b7865 	beq	8ef5e25 <__exidx_end+0xedcf75>
 8017c8d:	6c0a0a7d 			; <UNDEFINED> instruction: 0x6c0a0a7d
 8017c91:	0a7b2069 	beq	9edfe3d <__exidx_end+0x1ec6f8d>
 8017c95:	696c2020 	stmdbvs	ip!, {r5, sp}^
 8017c99:	732d7473 			; <UNDEFINED> instruction: 0x732d7473
 8017c9d:	656c7974 	strbvs	r7, [ip, #-2420]!	; 0xfffff68c
 8017ca1:	6f6e203a 	svcvs	0x006e203a
 8017ca5:	0a3b656e 	beq	8ef1265 <__exidx_end+0xed83b5>
 8017ca9:	616d2020 	cmnvs	sp, r0, lsr #32
 8017cad:	6e696772 	mcrvs	7, 3, r6, cr9, cr2, {3}
 8017cb1:	7031203a 	eorsvc	r2, r1, sl, lsr r0
 8017cb5:	70352078 	eorsvc	r2, r5, r8, ror r0
 8017cb9:	7d0a3b78 	vstrvc	d3, [sl, #-480]	; 0xfffffe20
 8017cbd:	65680a0a 	strbvs	r0, [r8, #-2570]!	; 0xfffff5f6
 8017cc1:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 8017cc5:	200a7b20 	andcs	r7, sl, r0, lsr #22
 8017cc9:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 8017ccd:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8017cd1:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 8017cd5:	0a3b7865 	beq	8ef5e71 <__exidx_end+0xedcfc1>
 8017cd9:	6f622020 	svcvs	0x00622020
 8017cdd:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 8017ce1:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 8017ce5:	3a737569 	bcc	9cf5291 <__exidx_end+0x1cdc3e1>
 8017ce9:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 8017ced:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 8017cf1:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 8017cf5:	203a7265 	eorscs	r7, sl, r5, ror #4
 8017cf9:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8017cfd:	72672064 	rsbvc	r2, r7, #100	; 0x64
 8017d01:	31207965 			; <UNDEFINED> instruction: 0x31207965
 8017d05:	0a3b7870 	beq	8ef5ecd <__exidx_end+0xedd01d>
 8017d09:	660a0a7d 			; <UNDEFINED> instruction: 0x660a0a7d
 8017d0d:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 8017d11:	0a7b2072 	beq	9edfee1 <__exidx_end+0x1ec7031>
 8017d15:	69642020 	stmdbvs	r4!, {r5, sp}^
 8017d19:	616c7073 	smcvs	50947	; 0xc703
 8017d1d:	66203a79 			; <UNDEFINED> instruction: 0x66203a79
 8017d21:	3b78656c 	blcc	9e312d9 <__exidx_end+0x1e18429>
 8017d25:	6a20200a 	bvs	881fd55 <__exidx_end+0x806ea5>
 8017d29:	69747375 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
 8017d2d:	632d7966 			; <UNDEFINED> instruction: 0x632d7966
 8017d31:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 8017d35:	203a746e 	eorscs	r7, sl, lr, ror #8
 8017d39:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
 8017d3d:	0a3b7265 	beq	8ef46d9 <__exidx_end+0xedb829>
 8017d41:	6f622020 	svcvs	0x00622020
 8017d45:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 8017d49:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 8017d4d:	3a737569 	bcc	9cf52f9 <__exidx_end+0x1cdc449>
 8017d51:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 8017d55:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 8017d59:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 8017d5d:	203a7265 	eorscs	r7, sl, r5, ror #4
 8017d61:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8017d65:	72672064 	rsbvc	r2, r7, #100	; 0x64
 8017d69:	31207965 			; <UNDEFINED> instruction: 0x31207965
 8017d6d:	0a3b7870 	beq	8ef5f35 <__exidx_end+0xedd085>
 8017d71:	 	stmdacc	r0, {r0, r2, r3, r4, r5, r6, r9, fp}

08017d74 <HttpContent>:
 8017d74:	08017638 	stmdaeq	r1, {r3, r4, r5, r9, sl, ip, sp, lr}
 8017d78:	08017c2d 	stmdaeq	r1, {r0, r2, r3, r5, sl, fp, ip, sp, lr}
 8017d7c:	08017644 	stmdaeq	r1, {r2, r6, r9, sl, ip, sp, lr}
 8017d80:	08017d8c 	stmdaeq	r1, {r2, r3, r7, r8, sl, fp, ip, sp, lr}
 8017d84:	0801762c 	stmdaeq	r1, {r2, r3, r5, r9, sl, ip, sp, lr}
 8017d88:	08017acb 	stmdaeq	r1, {r0, r1, r3, r6, r7, r9, fp, ip, sp, lr}

08017d8c <index_js>:
 8017d8c:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 8017d90:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 8017d94:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8017d98:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 8017d9c:	534a7465 	movtpl	r7, #42085	; 0xa465
 8017da0:	6a284e4f 	bvs	8a2b6e4 <__exidx_end+0xa12834>
 8017da4:	296e6f73 	stmdbcs	lr!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8017da8:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 8017dac:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 8017db0:	6c727520 	cfldr64vs	mvdx7, [r2], #-128	; 0xffffff80
 8017db4:	6a2f273d 	bvs	8be1ab0 <__exidx_end+0xbc8c00>
 8017db8:	2f6e6f73 	svccs	0x006e6f73
 8017dbc:	202b2027 	eorcs	r2, fp, r7, lsr #32
 8017dc0:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 8017dc4:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 8017dc8:	20797274 	rsbscs	r7, r9, r4, ror r2
 8017dcc:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 8017dd0:	656c0909 	strbvs	r0, [ip, #-2313]!	; 0xfffff6f7
 8017dd4:	65722074 	ldrbvs	r2, [r2, #-116]!	; 0xffffff8c
 8017dd8:	77613d73 			; <UNDEFINED> instruction: 0x77613d73
 8017ddc:	20746961 	rsbscs	r6, r4, r1, ror #18
 8017de0:	63746566 	cmnvs	r4, #427819008	; 0x19800000
 8017de4:	72752868 	rsbsvc	r2, r5, #104, 16	; 0x680000
 8017de8:	0a3b296c 	beq	8ee23a0 <__exidx_end+0xec94f0>
 8017dec:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 8017df0:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
 8017df4:	61206e72 			; <UNDEFINED> instruction: 0x61206e72
 8017df8:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 8017dfc:	73657220 	cmnvc	r5, #32, 4
 8017e00:	6f736a2e 	svcvs	0x00736a2e
 8017e04:	3b29286e 	blcc	8a61fc4 <__exidx_end+0xa49114>
 8017e08:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 8017e0c:	74616320 	strbtvc	r6, [r1], #-800	; 0xfffffce0
 8017e10:	28206863 	stmdacs	r0!, {r0, r1, r5, r6, fp, sp, lr}
 8017e14:	6f727265 	svcvs	0x00727265
 8017e18:	7b202972 	blvc	88223e8 <__exidx_end+0x809538>
 8017e1c:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8017e20:	6e6f6309 	cdpvs	3, 6, cr6, cr15, cr9, {0}
 8017e24:	656c6f73 	strbvs	r6, [ip, #-3955]!	; 0xfffff08d
 8017e28:	676f6c2e 	strbvs	r6, [pc, -lr, lsr #24]!
 8017e2c:	72726528 	rsbsvc	r6, r2, #40, 10	; 0xa000000
 8017e30:	3b29726f 	blcc	8a747f4 <__exidx_end+0xa5b944>
 8017e34:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 8017e38:	0a0a7d0a 	beq	82b7268 <__exidx_end+0x29e3b8>
 8017e3c:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 8017e40:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 8017e44:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8017e48:	72206e6f 	eorvc	r6, r0, #1776	; 0x6f0
 8017e4c:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 8017e50:	73694c72 	cmnvc	r9, #29184	; 0x7200
 8017e54:	20292874 	eorcs	r2, r9, r4, ror r8
 8017e58:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 8017e5c:	2074656c 	rsbscs	r6, r4, ip, ror #10
 8017e60:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8017e64:	6177613d 	cmnvs	r7, sp, lsr r1
 8017e68:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 8017e6c:	534a7465 	movtpl	r7, #42085	; 0xa465
 8017e70:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8017e74:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8017e78:	0a3b2927 	beq	8ee231c <__exidx_end+0xec946c>
 8017e7c:	6f640909 	svcvs	0x00640909
 8017e80:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 8017e84:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 8017e88:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 8017e8c:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 8017e90:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 8017e94:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 8017e98:	73694c64 	cmnvc	r9, #100, 24	; 0x6400
 8017e9c:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 8017ea0:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 8017ea4:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 8017ea8:	3c223d4c 	stccc	13, cr3, [r2], #-304	; 0xfffffed0
 8017eac:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 8017eb0:	73696c2b 	cmnvc	r9, #11008	; 0x2b00
 8017eb4:	696c2e74 	stmdbvs	ip!, {r2, r4, r5, r6, r9, sl, fp, sp}^
 8017eb8:	6e2e7473 	mcrvs	4, 1, r7, cr14, cr3, {3}
 8017ebc:	2b656d61 	blcs	9973448 <__exidx_end+0x195a598>
 8017ec0:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8017e40 <index_js+0xb4>
 8017ec4:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 8017ec8:	2b223e69 	blcs	88a7874 <__exidx_end+0x88e9c4>
 8017ecc:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8017ed0:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 8017ed4:	6f6e2e74 	svcvs	0x006e2e74
 8017ed8:	742e6564 	strtvc	r6, [lr], #-1380	; 0xfffffa9c
 8017edc:	2b657079 	blcs	99740c8 <__exidx_end+0x195b218>
 8017ee0:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8017e60 <index_js+0xd4>
 8017ee4:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 8017ee8:	2b223e69 	blcs	88a7894 <__exidx_end+0x88e9e4>
 8017eec:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8017ef0:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 8017ef4:	6f6e2e74 	svcvs	0x006e2e74
 8017ef8:	702e6564 	eorvc	r6, lr, r4, ror #10
 8017efc:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
 8017f00:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8017f04:	2f3c222b 	svccs	0x003c222b
 8017f08:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 8017f0c:	0a7d0a3b 	beq	9f5a800 <__exidx_end+0x1f41950>
 8017f10:	7973610a 	ldmdbvc	r3!, {r1, r3, r8, sp, lr}^
 8017f14:	6620636e 	strtvs	r6, [r0], -lr, ror #6
 8017f18:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 8017f1c:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 8017f20:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 8017f24:	69447265 	stmdbvs	r4, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8017f28:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8017f2c:	2879726f 	ldmdacs	r9!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 8017f30:	0a7b2029 	beq	9edffdc <__exidx_end+0x1ec712c>
 8017f34:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 8017f38:	64207465 	strtvs	r7, [r0], #-1125	; 0xfffffb9b
 8017f3c:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 8017f40:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8017f44:	6177613d 	cmnvs	r7, sp, lsr r1
 8017f48:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 8017f4c:	534a7465 	movtpl	r7, #42085	; 0xa465
 8017f50:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8017f54:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8017f58:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8017f5c:	3b292779 	blcc	8a61d48 <__exidx_end+0xa48e98>
 8017f60:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8017f64:	2074656c 	rsbscs	r6, r4, ip, ror #10
 8017f68:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8017f6c:	0a22223d 	beq	88a0868 <__exidx_end+0x8879b8>
 8017f70:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 8017f74:	66207465 	strtvs	r7, [r0], -r5, ror #8
 8017f78:	6e656c69 	cdpvs	12, 6, cr6, cr5, cr9, {3}
 8017f7c:	73656d61 	cmnvc	r5, #6208	; 0x1840
 8017f80:	6a624f3d 	bvs	98abc7c <__exidx_end+0x1892dcc>
 8017f84:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 8017f88:	7379656b 	cmnvc	r9, #448790528	; 0x1ac00000
 8017f8c:	72696428 	rsbvc	r6, r9, #40, 8	; 0x28000000
 8017f90:	6f746365 	svcvs	0x00746365
 8017f94:	225b7972 	subscs	r7, fp, #1867776	; 0x1c8000
 8017f98:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8017f9c:	295d2273 	ldmdbcs	sp, {r0, r1, r4, r5, r6, r9, sp}^
 8017fa0:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 8017fa4:	6c696609 	stclvs	6, cr6, [r9], #-36	; 0xffffffdc
 8017fa8:	6d616e65 	stclvs	14, cr6, [r1, #-404]!	; 0xfffffe6c
 8017fac:	662e7365 	strtvs	r7, [lr], -r5, ror #6
 8017fb0:	6145726f 	cmpvs	r5, pc, ror #4
 8017fb4:	66286863 	strtvs	r6, [r8], -r3, ror #16
 8017fb8:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 8017fbc:	286e6f69 	stmdacs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 8017fc0:	2979656b 	ldmdbcs	r9!, {r0, r1, r3, r5, r6, r8, sl, sp, lr}^
 8017fc4:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 8017fc8:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 8017fcc:	20726176 	rsbscs	r6, r2, r6, ror r1
 8017fd0:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 8017fd4:	203d2065 	eorscs	r2, sp, r5, rrx
 8017fd8:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8017fdc:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8017fe0:	66225b79 			; <UNDEFINED> instruction: 0x66225b79
 8017fe4:	73656c69 	cmnvc	r5, #26880	; 0x6900
 8017fe8:	6b5b5d22 	blvs	96ef478 <__exidx_end+0x16d65c8>
 8017fec:	3b5d7965 	blcc	9776588 <__exidx_end+0x175d6d8>
 8017ff0:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8017ff4:	74680909 	strbtvc	r0, [r8], #-2313	; 0xfffff6f7
 8017ff8:	3d2b6c6d 	stccc	12, cr6, [fp, #-436]!	; 0xfffffe4c
 8017ffc:	706f3c22 	rsbvc	r3, pc, r2, lsr #24
 8018000:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8018004:	6c617620 	stclvs	6, cr7, [r1], #-128	; 0xffffff80
 8018008:	223d6575 	eorscs	r6, sp, #490733568	; 0x1d400000
 801800c:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 8018010:	223e222b 	eorscs	r2, lr, #-1342177278	; 0xb0000002
 8018014:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 8018018:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 801801c:	706f2f3c 	rsbvc	r2, pc, ip, lsr pc	; <UNPREDICTABLE>
 8018020:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8018024:	0a3b223e 	beq	8ee0924 <__exidx_end+0xec7a74>
 8018028:	7d090909 	vstrvc.16	s0, [r9, #-18]	; 0xffffffee	; <UNPREDICTABLE>
 801802c:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 8018030:	6f640909 	svcvs	0x00640909
 8018034:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 8018038:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 801803c:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 8018040:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 8018044:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 8018048:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 801804c:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 8018050:	6f746365 	svcvs	0x00746365
 8018054:	29227972 	stmdbcs	r2!, {r1, r4, r5, r6, r8, fp, ip, sp, lr}
 8018058:	6e6e692e 	vmulvs.f16	s13, s28, s29	; <UNPREDICTABLE>
 801805c:	54487265 	strbpl	r7, [r8], #-613	; 0xfffffd9b
 8018060:	683d4c4d 	ldmdavs	sp!, {r0, r2, r3, r6, sl, fp, lr}
 8018064:	3b6c6d74 	blcc	9b3363c <__exidx_end+0x1b1a78c>
 8018068:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 801806c:	5f746567 	svcpl	0x00746567
 8018070:	28747874 	ldmdacs	r4!, {r2, r4, r5, r6, fp, ip, sp, lr}^
 8018074:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8018078:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 801807c:	5d305b73 	fldmdbxpl	r0!, {d5-d61}	;@ Deprecated
 8018080:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 8018084:	73610a0a 	cmnvc	r1, #40960	; 0xa000
 8018088:	20636e79 	rsbcs	r6, r3, r9, ror lr
 801808c:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 8018090:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8018094:	6e657220 	cdpvs	2, 6, cr7, cr5, cr0, {1}
 8018098:	56726564 	ldrbtpl	r6, [r2], -r4, ror #10
 801809c:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 80180a0:	29286e6f 	stmdbcs	r8!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
 80180a4:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 80180a8:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 80180ac:	72657620 	rsbvc	r7, r5, #32, 12	; 0x2000000
 80180b0:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 80180b4:	6177613d 	cmnvs	r7, sp, lsr r1
 80180b8:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 80180bc:	534a7465 	movtpl	r7, #42085	; 0xa465
 80180c0:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 80180c4:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 80180c8:	276e6f69 	strbcs	r6, [lr, -r9, ror #30]!
 80180cc:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 80180d0:	636f6409 	cmnvs	pc, #150994944	; 0x9000000
 80180d4:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 80180d8:	65672e74 	strbvs	r2, [r7, #-3700]!	; 0xfffff18c
 80180dc:	656c4574 	strbvs	r4, [ip, #-1396]!	; 0xfffffa8c
 80180e0:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 80180e4:	64497942 	strbvs	r7, [r9], #-2370	; 0xfffff6be
 80180e8:	64692228 	strbtvs	r2, [r9], #-552	; 0xfffffdd8
 80180ec:	73726556 	cmnvc	r2, #360710144	; 0x15800000
 80180f0:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 80180f4:	6e692e29 	cdpvs	14, 6, cr2, cr9, cr9, {1}
 80180f8:	4872656e 	ldmdami	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 80180fc:	3d4c4d54 	stclcc	13, cr4, [ip, #-336]	; 0xfffffeb0
 8018100:	696c3c22 	stmdbvs	ip!, {r1, r5, sl, fp, ip, sp}^
 8018104:	2b22563e 	blcs	88ada04 <__exidx_end+0x894b54>
 8018108:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801810c:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 8018110:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8018114:	2b6e6f69 	blcs	9bb3ec0 <__exidx_end+0x1b9b010>
 8018118:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8018098 <index_js+0x30c>
 801811c:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 8018120:	2b223e69 	blcs	88a7acc <__exidx_end+0x88ec1c>
 8018124:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8018128:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 801812c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 8018130:	61642e64 	cmnvs	r4, r4, ror #28
 8018134:	222b6574 	eorcs	r6, fp, #116, 10	; 0x1d000000
 8018138:	696c2f3c 	stmdbvs	ip!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 801813c:	696c3c3e 	stmdbvs	ip!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 8018140:	762b223e 			; <UNDEFINED> instruction: 0x762b223e
 8018144:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8018148:	622e6e6f 	eorvs	r6, lr, #1776	; 0x6f0
 801814c:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
 8018150:	6d69742e 	cfstrdvs	mvd7, [r9, #-184]!	; 0xffffff48
 8018154:	3c222b65 			; <UNDEFINED> instruction: 0x3c222b65
 8018158:	3e696c2f 	cdpcc	12, 6, cr6, cr9, cr15, {1}
 801815c:	3e696c3c 	mcrcc	12, 3, r6, cr9, cr12, {1}
 8018160:	65762b22 	ldrbvs	r2, [r6, #-2850]!	; 0xfffff4de
 8018164:	6f697372 	svcvs	0x00697372
 8018168:	6f622e6e 	svcvs	0x00622e6e
 801816c:	2b647261 	blcs	9934af8 <__exidx_end+0x191bc48>
 8018170:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 80180f0 <index_js+0x364>
 8018174:	3b223e69 	blcc	88a7b20 <__exidx_end+0x88ec70>
 8018178:	0a0a7d0a 	beq	82b75a8 <__exidx_end+0x29e6f8>
 801817c:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 8018180:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 8018184:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8018188:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 801818c:	745f7465 	ldrbvc	r7, [pc], #-1125	; 8018194 <index_js+0x408>
 8018190:	73287478 			; <UNDEFINED> instruction: 0x73287478
 8018194:	20296c65 	eorcs	r6, r9, r5, ror #24
 8018198:	6c090a7b 			; <UNDEFINED> instruction: 0x6c090a7b
 801819c:	74207465 	strtvc	r7, [r0], #-1125	; 0xfffffb9b
 80181a0:	613d7478 	teqvs	sp, r8, ror r4
 80181a4:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 80181a8:	74656720 	strbtvc	r6, [r5], #-1824	; 0xfffff8e0
 80181ac:	4e4f534a 	cdpmi	3, 4, cr5, cr15, cr10, {2}
 80181b0:	6c657328 	stclvs	3, cr7, [r5], #-160	; 0xffffff60
 80181b4:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 80181b8:	2074656c 	rsbscs	r6, r4, ip, ror #10
 80181bc:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 80181c0:	3b22223d 	blcc	88a0abc <__exidx_end+0x887c0c>
 80181c4:	624f090a 	subvs	r0, pc, #163840	; 0x28000
 80181c8:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 80181cc:	79656b2e 	stmdbvc	r5!, {r1, r2, r3, r5, r8, r9, fp, sp, lr}^
 80181d0:	78742873 	ldmdavc	r4!, {r0, r1, r4, r5, r6, fp, sp}^
 80181d4:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 80181d8:	2e295d6c 	cdpcs	13, 2, cr5, cr9, cr12, {3}
 80181dc:	45726f66 	ldrbmi	r6, [r2, #-3942]!	; 0xfffff09a
 80181e0:	28686361 	stmdacs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 80181e4:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 80181e8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 80181ec:	79656b28 	stmdbvc	r5!, {r3, r5, r8, r9, fp, sp, lr}^
 80181f0:	0a7b2029 	beq	9ee029c <__exidx_end+0x1ec73ec>
 80181f4:	61760909 	cmnvs	r6, r9, lsl #18
 80181f8:	61762072 	cmnvs	r6, r2, ror r0
 80181fc:	2065756c 	rsbcs	r7, r5, ip, ror #10
 8018200:	7874203d 	ldmdavc	r4!, {r0, r2, r3, r4, r5, sp}^
 8018204:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 8018208:	6b5b5d6c 	blvs	96ef7c0 <__exidx_end+0x16d6910>
 801820c:	3b5d7965 	blcc	97767a8 <__exidx_end+0x175d8f8>
 8018210:	2009090a 	andcs	r0, r9, sl, lsl #18
 8018214:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8018218:	3c223d2b 	stccc	13, cr3, [r2], #-172	; 0xffffff54
 801821c:	3c3e7274 	lfmcc	f7, 4, [lr], #-464	; 0xfffffe30
 8018220:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 8018224:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 8018228:	2f3c222b 	svccs	0x003c222b
 801822c:	3c3e6474 	cfldrscc	mvf6, [lr], #-464	; 0xfffffe30
 8018230:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 8018234:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 8018238:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 801823c:	64742f3c 	ldrbtvs	r2, [r4], #-3900	; 0xfffff0c4
 8018240:	742f3c3e 	strtvc	r3, [pc], #-3134	; 8018248 <index_js+0x4bc>
 8018244:	3b223e72 	blcc	88a7c14 <__exidx_end+0x88ed64>
 8018248:	297d090a 	ldmdbcs	sp!, {r1, r3, r8, fp}^
 801824c:	64090a3b 	strvs	r0, [r9], #-2619	; 0xfffff5c5
 8018250:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 8018254:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 8018258:	45746567 	ldrbmi	r6, [r4, #-1383]!	; 0xfffffa99
 801825c:	656d656c 	strbvs	r6, [sp, #-1388]!	; 0xfffffa94
 8018260:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 8018264:	22286449 	eorcs	r6, r8, #1224736768	; 0x49000000
 8018268:	78546469 	ldmdavc	r4, {r0, r3, r5, r6, sl, sp, lr}^
 801826c:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 8018270:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 8018274:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 8018278:	74683d4c 	strbtvc	r3, [r8], #-3404	; 0xfffff2b4
 801827c:	0a3b6c6d 	beq	8ef3438 <__exidx_end+0xeda588>
 8018280:	720a0a7d 	andvc	r0, sl, #512000	; 0x7d000
 8018284:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 8018288:	73694c72 	cmnvc	r9, #29184	; 0x7200
 801828c:	3b292874 	blcc	8a62464 <__exidx_end+0xa495b4>
 8018290:	6e65720a 	cdpvs	2, 6, cr7, cr5, cr10, {0}
 8018294:	44726564 	ldrbtmi	r6, [r2], #-1380	; 0xfffffa9c
 8018298:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 801829c:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 80182a0:	0a3b2928 	beq	8ee2748 <__exidx_end+0xec9898>
 80182a4:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 80182a8:	65567265 	ldrbvs	r7, [r6, #-613]	; 0xfffffd9b
 80182ac:	6f697372 	svcvs	0x00697372
 80182b0:	3b29286e 	blcc	8a62470 <__exidx_end+0xa495c0>
 80182b4:	0000000a 	andeq	r0, r0, sl

080182b8 <s_aStorSize>:
 80182b8:	00000060 	andeq	r0, r0, r0, rrx
 80182bc:	00000090 	muleq	r0, r0, r0
 80182c0:	00000020 	andeq	r0, r0, r0, lsr #32
 80182c4:	00000040 	andeq	r0, r0, r0, asr #32
 80182c8:	00000060 	andeq	r0, r0, r0, rrx
 80182cc:	00000040 	andeq	r0, r0, r0, asr #32
 80182d0:	00000020 	andeq	r0, r0, r0, lsr #32
 80182d4:	00000020 	andeq	r0, r0, r0, lsr #32
 80182d8:	000001e0 	andeq	r0, r0, r0, ror #3
 80182dc:	00000040 	andeq	r0, r0, r0, asr #32
 80182e0:	00000020 	andeq	r0, r0, r0, lsr #32
 80182e4:	00000060 	andeq	r0, r0, r0, rrx
 80182e8:	00000030 	andeq	r0, r0, r0, lsr r0
 80182ec:	00000020 	andeq	r0, r0, r0, lsr #32
 80182f0:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
 80182f4:	00000030 	andeq	r0, r0, r0, lsr r0
 80182f8:	00000040 	andeq	r0, r0, r0, asr #32
 80182fc:	00000020 	andeq	r0, r0, r0, lsr #32
 8018300:	00000060 	andeq	r0, r0, r0, rrx
 8018304:	00000020 	andeq	r0, r0, r0, lsr #32
 8018308:	00000400 	andeq	r0, r0, r0, lsl #8
 801830c:	00000020 	andeq	r0, r0, r0, lsr #32
 8018310:	00000020 	andeq	r0, r0, r0, lsr #32
 8018314:	00000040 	andeq	r0, r0, r0, asr #32
 8018318:	00000060 	andeq	r0, r0, r0, rrx
 801831c:	00000020 	andeq	r0, r0, r0, lsr #32
 8018320:	00000020 	andeq	r0, r0, r0, lsr #32
 8018324:	00000020 	andeq	r0, r0, r0, lsr #32

08018328 <vtable for StoreArtNet>:
	...
 8018330:	080105fd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, sl}
 8018334:	080107c5 	stmdaeq	r1, {r0, r2, r6, r7, r8, r9, sl}
 8018338:	08010605 	stmdaeq	r1, {r0, r2, r9, sl}
 801833c:	080107d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r8, r9, sl}
 8018340:	08010629 	stmdaeq	r1, {r0, r3, r5, r9, sl}
 8018344:	08010659 	stmdaeq	r1, {r0, r3, r4, r6, r9, sl}
 8018348:	08010685 	stmdaeq	r1, {r0, r2, r7, r9, sl}
 801834c:	080106c1 	stmdaeq	r1, {r0, r6, r7, r9, sl}
 8018350:	080106f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r9, sl}
 8018354:	08010725 	stmdaeq	r1, {r0, r2, r5, r8, r9, sl}
 8018358:	08010775 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, r9, sl}
 801835c:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 8018360:	00000000 	andeq	r0, r0, r0
 8018364:	080105ff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, sl}
 8018368:	080107d1 	stmdaeq	r1, {r0, r4, r6, r7, r8, r9, sl}
 801836c:	08010651 	stmdaeq	r1, {r0, r4, r6, r9, sl}
 8018370:	0801067d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r9, sl}
 8018374:	080106b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r9, sl}
 8018378:	080106e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r9, sl}
 801837c:	0801071d 	stmdaeq	r1, {r0, r2, r3, r4, r8, r9, sl}
 8018380:	0801076d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r8, r9, sl}
 8018384:	080107bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, r9, sl}

08018388 <vtable for StoreDisplayUdf>:
	...
 8018390:	08010815 	stmdaeq	r1, {r0, r2, r4, fp}
 8018394:	0801085d 	stmdaeq	r1, {r0, r2, r3, r4, r6, fp}
 8018398:	08010839 	stmdaeq	r1, {r0, r3, r4, r5, fp}
 801839c:	08010819 	stmdaeq	r1, {r0, r3, r4, fp}

080183a0 <vtable for StoreNetwork>:
	...
 80183a8:	0801087d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, fp}
 80183ac:	08010991 	stmdaeq	r1, {r0, r4, r7, r8, fp}
 80183b0:	08010885 	stmdaeq	r1, {r0, r2, r7, fp}
 80183b4:	080109a5 	stmdaeq	r1, {r0, r2, r5, r7, r8, fp}
 80183b8:	08010935 	stmdaeq	r1, {r0, r2, r4, r5, r8, fp}
 80183bc:	08010909 	stmdaeq	r1, {r0, r3, r8, fp}
 80183c0:	080108d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, fp}
 80183c4:	08010961 	stmdaeq	r1, {r0, r5, r6, r8, fp}
 80183c8:	080108a9 	stmdaeq	r1, {r0, r3, r5, r7, fp}
 80183cc:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 80183d0:	00000000 	andeq	r0, r0, r0
 80183d4:	0801087f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, fp}
 80183d8:	0801099d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, fp}
 80183dc:	08010959 	stmdaeq	r1, {r0, r3, r4, r6, r8, fp}
 80183e0:	0801092d 	stmdaeq	r1, {r0, r2, r3, r5, r8, fp}
 80183e4:	08010901 	stmdaeq	r1, {r0, r8, fp}
 80183e8:	08010989 	stmdaeq	r1, {r0, r3, r7, r8, fp}
 80183ec:	080108d1 	stmdaeq	r1, {r0, r4, r6, r7, fp}

080183f0 <vtable for StoreRemoteConfig>:
	...
 80183f8:	080109d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r8, fp}
 80183fc:	08010a21 	stmdaeq	r1, {r0, r5, r9, fp}
 8018400:	080109fd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, fp}
 8018404:	080109dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r8, fp}

08018408 <vtable for StoreWS28xxDmx>:
	...
 8018410:	08010a41 	stmdaeq	r1, {r0, r6, r9, fp}
 8018414:	08010bb1 	stmdaeq	r1, {r0, r4, r5, r7, r8, r9, fp}
 8018418:	08010a49 	stmdaeq	r1, {r0, r3, r6, r9, fp}
 801841c:	08010bc5 	stmdaeq	r1, {r0, r2, r6, r7, r8, r9, fp}
 8018420:	08010b7d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r8, r9, fp}
 8018424:	08010b49 	stmdaeq	r1, {r0, r3, r6, r8, r9, fp}
 8018428:	08010b11 	stmdaeq	r1, {r0, r4, r8, r9, fp}
 801842c:	08010ad9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r9, fp}
 8018430:	08010aa1 	stmdaeq	r1, {r0, r5, r7, r9, fp}
 8018434:	08010a6d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r9, fp}
 8018438:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 801843c:	00000000 	andeq	r0, r0, r0
 8018440:	08010a43 	stmdaeq	r1, {r0, r1, r6, r9, fp}
 8018444:	08010bbd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, r9, fp}
 8018448:	08010ba9 	stmdaeq	r1, {r0, r3, r5, r7, r8, r9, fp}
 801844c:	08010b75 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, r9, fp}
 8018450:	08010b41 	stmdaeq	r1, {r0, r6, r8, r9, fp}
 8018454:	08010b09 	stmdaeq	r1, {r0, r3, r8, r9, fp}
 8018458:	08010ad1 	stmdaeq	r1, {r0, r4, r6, r7, r9, fp}
 801845c:	08010a99 	stmdaeq	r1, {r0, r3, r4, r7, r9, fp}
 8018460:	65746544 	ldrbvs	r6, [r4, #-1348]!	; 0xfffffabc
 8018464:	64657463 	strbtvs	r7, [r5], #-1123	; 0xfffffb9d
 8018468:	20732520 	rsbscs	r2, r3, r0, lsr #10
 801846c:	68746977 	ldmdavs	r4!, {r0, r1, r2, r4, r5, r6, r8, fp, sp, lr}^
 8018470:	746f7420 	strbtvc	r7, [pc], #-1056	; 8018478 <vtable for StoreWS28xxDmx+0x70>
 8018474:	25206c61 	strcs	r6, [r0, #-3169]!	; 0xfffff39f
 8018478:	79622064 	stmdbvc	r2!, {r2, r5, r6, sp}^
 801847c:	20736574 	rsbscs	r6, r3, r4, ror r5
 8018480:	2064255b 	rsbcs	r2, r4, fp, asr r5
 8018484:	0a5d426b 	beq	9768e38 <__exidx_end+0x174ff88>
 8018488:	70637400 	rsbvc	r7, r3, r0, lsl #8
 801848c:	6765625f 			; <UNDEFINED> instruction: 0x6765625f
 8018490:	203a6e69 	eorscs	r6, sl, r9, ror #28
 8018494:	206f6f74 	rsbcs	r6, pc, r4, ror pc	; <UNPREDICTABLE>
 8018498:	796e616d 	stmdbvc	lr!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 801849c:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 80184a0:	7463656e 	strbtvc	r6, [r3], #-1390	; 0xfffffa92
 80184a4:	736e6f69 	cmnvc	lr, #420	; 0x1a4
 80184a8:	6e696200 	cdpvs	2, 6, cr6, cr9, cr0, {0}
 80184ac:	6e750064 	cdpvs	0, 7, cr0, cr5, cr4, {3}
 80184b0:	646e6962 	strbtvs	r6, [lr], #-2402	; 0xfffff69e
 80184b4:	5241000a 	subpl	r0, r1, #10
 80184b8:	6f6c2050 	svcvs	0x006c2050
 80184bc:	70756b6f 	rsbsvc	r6, r5, pc, ror #22
 80184c0:	69616620 	stmdbvs	r1!, {r5, r9, sl, sp, lr}^
 80184c4:	2064656c 	rsbcs	r6, r4, ip, ror #10
 80184c8:	64203e2d 	strtvs	r3, [r0], #-3629	; 0xfffff1d3
 80184cc:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
 80184d0:	6720746c 	strvs	r7, [r0, -ip, ror #8]!
 80184d4:	77657461 	strbvc	r7, [r5, -r1, ror #8]!
 80184d8:	000a7961 	andeq	r7, sl, r1, ror #18
 80184dc:	20505241 	subscs	r5, r0, r1, asr #4
 80184e0:	6b6f6f6c 	blvs	9bf4298 <__exidx_end+0x1bdb3e8>
 80184e4:	66207075 			; <UNDEFINED> instruction: 0x66207075
 80184e8:	656c6961 	strbvs	r6, [ip, #-2401]!	; 0xfffff69f
 80184ec:	 	vmlsmi.f32	s0, s0, s9

080184ef <NetworkConst::MSG_NETWORK_INIT>:
 80184ef:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 80184f3:	206b726f 	rsbcs	r7, fp, pc, ror #4
 80184f7:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 80184fb:	34323200 	ldrtcc	r3, [r2], #-512	; 0xfffffe00
 80184ff:	302e302e 	eorcc	r3, lr, lr, lsr #32
 8018503:	3135322e 	teqcc	r5, lr, lsr #4
 8018507:	63745f00 	cmnvs	r4, #0, 30
 801850b:	6f6c2e70 	svcvs	0x006c2e70
 801850f:	006c6163 	rsbeq	r6, ip, r3, ror #2
 8018513:	7265735f 	rsbvc	r7, r5, #2080374785	; 0x7c000001
 8018517:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
 801851b:	645f2e73 	ldrbvs	r2, [pc], #-3699	; 8018523 <NetworkConst::MSG_NETWORK_INIT+0x34>
 801851f:	732d736e 			; <UNDEFINED> instruction: 0x732d736e
 8018523:	755f2e64 	ldrbvc	r2, [pc, #-3684]	; 80176c7 <RemoteConfig::s_TXT+0x16f>
 8018527:	6c2e7064 	stcvs	0, cr7, [lr], #-400	; 0xfffffe70
 801852b:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 801852f:	4e446d00 	cdpmi	13, 4, cr6, cr4, cr0, {0}
 8018533:	20000a53 	andcs	r0, r0, r3, asr sl
 8018537:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 801853b:	6e6e7572 	mcrvs	5, 3, r7, cr14, cr2, {3}
 801853f:	0a676e69 	beq	99f3eeb <__exidx_end+0x19db03b>
 8018543:	614e2000 	mrsvs	r2, (UNDEF: 78)
 8018547:	3a20656d 	bcc	8831b03 <__exidx_end+0x818c53>
 801854b:	0a732520 	beq	9ce19d3 <__exidx_end+0x1cc8b23>
 801854f:	73252000 			; <UNDEFINED> instruction: 0x73252000
 8018553:	20642520 	rsbcs	r2, r4, r0, lsr #10
 8018557:	000a7325 	andeq	r7, sl, r5, lsr #6
 801855b:	30687465 	rsbcc	r7, r8, r5, ror #8
 801855f:	67696700 	strbvs	r6, [r9, -r0, lsl #14]!
 8018563:	76656461 	strbtvc	r6, [r5], -r1, ror #8
 8018567:	5f656369 	svcpl	0x00656369
 801856b:	74654e00 	strbtvc	r4, [r5], #-3584	; 0xfffff200
 801856f:	6b726f77 	blvs	9cb4353 <__exidx_end+0x1c9b4a3>
 8018573:	4820000a 	stmdami	r0!, {r1, r3}
 8018577:	6e74736f 	cdpvs	3, 7, cr7, cr4, cr15, {3}
 801857b:	20656d61 	rsbcs	r6, r5, r1, ror #26
 801857f:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8018583:	20000a73 	andcs	r0, r0, r3, ror sl
 8018587:	614e6649 	cmpvs	lr, r9, asr #12
 801858b:	2020656d 	eorcs	r6, r0, sp, ror #10
 801858f:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8018593:	203a6425 	eorscs	r6, sl, r5, lsr #8
 8018597:	000a7325 	andeq	r7, sl, r5, lsr #6
 801859b:	656e4920 	strbvs	r4, [lr, #-2336]!	; 0xfffff6e0
 801859f:	20202074 	eorcs	r2, r0, r4, ror r0
 80185a3:	3a202020 	bcc	882062b <__exidx_end+0x80777b>
 80185a7:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 80185ab:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80185af:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80185b3:	0a64252f 	beq	9921a77 <__exidx_end+0x1908bc7>
 80185b7:	654e2000 	strbvs	r2, [lr, #-0]
 80185bb:	73616d74 	cmnvc	r1, #116, 26	; 0x1d00
 80185bf:	2020206b 	eorcs	r2, r0, fp, rrx
 80185c3:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 80185c7:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 80185cb:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80185cf:	20000a64 	andcs	r0, r0, r4, ror #20
 80185d3:	65746147 	ldrbvs	r6, [r4, #-327]!	; 0xfffffeb9
 80185d7:	20796177 	rsbscs	r6, r9, r7, ror r1
 80185db:	203a2020 	eorscs	r2, sl, r0, lsr #32
 80185df:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80185e3:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80185e7:	0a64252e 	beq	9921aa7 <__exidx_end+0x1908bf7>
 80185eb:	72422000 	subvc	r2, r2, #0
 80185ef:	6364616f 	cmnvs	r4, #-1073741797	; 0xc000001b
 80185f3:	20747361 	rsbscs	r7, r4, r1, ror #6
 80185f7:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 80185fb:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 80185ff:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8018603:	20000a64 	andcs	r0, r0, r4, ror #20
 8018607:	2063614d 	rsbcs	r6, r3, sp, asr #2
 801860b:	20202020 	eorcs	r2, r0, r0, lsr #32
 801860f:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8018613:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8018617:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 801861b:	2e253a78 			; <UNDEFINED> instruction: 0x2e253a78
 801861f:	253a7832 	ldrcs	r7, [sl, #-2098]!	; 0xfffff7ce
 8018623:	3a78322e 	bcc	9e24ee3 <__exidx_end+0x1e0c033>
 8018627:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 801862b:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 801862f:	20000a78 	andcs	r0, r0, r8, ror sl
 8018633:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
 8018637:	20202020 	eorcs	r2, r0, r0, lsr #32
 801863b:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801863f:	000a6325 	andeq	r6, sl, r5, lsr #6
 8018643:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
 8018647:	49206369 	stmdbmi	r0!, {r0, r3, r5, r6, r8, r9, sp, lr}
 801864b:	 	rsbvc	r0, r9, r0, asr r0

0801864d <NetworkParamsConst::IP_ADDRESS>:
 801864d:	615f7069 	cmpvs	pc, r9, rrx
 8018651:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 8018655:	 	strvs	r7, [r0], #-883	; 0xfffffc8d

08018658 <NetworkParamsConst::DEFAULT_GATEWAY>:
 8018658:	61666564 	cmnvs	r6, r4, ror #10
 801865c:	5f746c75 	svcpl	0x00746c75
 8018660:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 8018664:	00796177 	rsbseq	r6, r9, r7, ror r1

08018668 <NetworkParamsConst::DHCP_RETRY_TIME>:
 8018668:	70636864 	rsbvc	r6, r3, r4, ror #16
 801866c:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
 8018670:	745f7972 	ldrbvc	r7, [pc], #-2418	; 8018678 <NetworkParamsConst::HOSTNAME>
 8018674:	00656d69 	rsbeq	r6, r5, r9, ror #26

08018678 <NetworkParamsConst::HOSTNAME>:
 8018678:	74736f68 	ldrbtvc	r6, [r3], #-3944	; 0xfffff098
 801867c:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

08018681 <NetworkParamsConst::NET_MASK>:
 8018681:	5f74656e 	svcpl	0x0074656e
 8018685:	6b73616d 	blvs	9cf0c41 <__exidx_end+0x1cd7d91>
	...

0801868a <NetworkParamsConst::USE_DHCP>:
 801868a:	5f657375 	svcpl	0x00657375
 801868e:	70636864 	rsbvc	r6, r3, r4, ror #16
	...

08018693 <NetworkParamsConst::FILE_NAME>:
 8018693:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 8018697:	2e6b726f 	cdpcs	2, 6, cr7, cr11, cr15, {3}
 801869b:	00747874 	rsbseq	r7, r4, r4, ror r8
 801869f:	65687445 	strbvs	r7, [r8, #-1093]!	; 0xfffffbbb
 80186a3:	74656e72 	strbtvc	r6, [r5], #-3698	; 0xfffff18e
 80186a7:	61747320 	cmnvs	r4, r0, lsr #6
 80186ab:	25007472 	strcs	r7, [r0, #-1138]	; 0xfffffb8e
 80186af:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80186b3:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 80186b7:	252f6425 	strcs	r6, [pc, #-1061]!	; 801829a <index_js+0x50e>
 80186bb:	63252064 			; <UNDEFINED> instruction: 0x63252064
 80186bf:	203a4e00 	eorscs	r4, sl, r0, lsl #28
 80186c3:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80186c7:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80186cb:	0064252e 	rsbeq	r2, r4, lr, lsr #10
 80186cf:	25203a47 	strcs	r3, [r0, #-2631]!	; 0xfffff5b9
 80186d3:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80186d7:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 80186db:	46006425 	strmi	r6, [r0], -r5, lsr #8
 80186df:	776d7269 	strbvc	r7, [sp, -r9, ror #4]!
 80186e3:	20657261 	rsbcs	r7, r5, r1, ror #4
 80186e7:	2a2e2556 	bcs	8ba1c47 <__exidx_end+0xb88d97>
 80186eb:	48440073 	stmdami	r4, {r0, r1, r4, r5, r6}^
 80186ef:	72205043 	eorvc	r5, r0, #67	; 0x43
 80186f3:	77656e65 	strbvc	r6, [r5, -r5, ror #28]!
 80186f7:	00676e69 	rsbeq	r6, r7, r9, ror #28
 80186fb:	50434844 	subpl	r4, r3, r4, asr #16
 80186ff:	74657220 	strbtvc	r7, [r5], #-544	; 0xfffffde0
 8018703:	6e697972 			; <UNDEFINED> instruction: 0x6e697972
 8018707:	654e0067 	strbvs	r0, [lr, #-103]	; 0xffffff99
 801870b:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 801870f:	6873206b 	ldmdavs	r3!, {r0, r1, r3, r5, r6, sp}^
 8018713:	6f647475 	svcvs	0x00647475
 8018717:	00006e77 	andeq	r6, r0, r7, ror lr
	...

0801871c <pArray>:
 801871c:	080187b0 	stmdaeq	r1, {r4, r5, r7, r8, r9, sl, pc}
 8018720:	0801876c 	stmdaeq	r1, {r2, r3, r5, r6, r8, r9, sl, pc}
 8018724:	0801864d 	stmdaeq	r1, {r0, r2, r3, r6, r9, sl, pc}
 8018728:	080187b6 	stmdaeq	r1, {r1, r2, r4, r5, r7, r8, r9, sl, pc}
 801872c:	08018a21 	stmdaeq	r1, {r0, r5, r9, fp, pc}
 8018730:	08018777 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r8, r9, sl, pc}
 8018734:	08016e47 	stmdaeq	r1, {r0, r1, r2, r6, r9, sl, fp, sp, lr}
 8018738:	08018678 	stmdaeq	r1, {r3, r4, r5, r6, r9, sl, pc}
 801873c:	080188f7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, fp, pc}
 8018740:	08018907 	stmdaeq	r1, {r0, r1, r2, r8, fp, pc}
 8018744:	08018917 	stmdaeq	r1, {r0, r1, r2, r4, r8, fp, pc}
 8018748:	08018927 	stmdaeq	r1, {r0, r1, r2, r5, r8, fp, pc}
 801874c:	08018681 	stmdaeq	r1, {r0, r7, r9, sl, pc}
 8018750:	08018a0f 	stmdaeq	r1, {r0, r1, r2, r3, r9, fp, pc}
 8018754:	08016e52 	stmdaeq	r1, {r1, r4, r6, r9, sl, fp, sp, lr}
 8018758:	08016e6a 	stmdaeq	r1, {r1, r3, r5, r6, r9, sl, fp, sp, lr}
 801875c:	08016e82 	stmdaeq	r1, {r1, r7, r9, sl, fp, sp, lr}
 8018760:	08016e9a 	stmdaeq	r1, {r1, r3, r4, r7, r9, sl, fp, sp, lr}
 8018764:	08018658 	stmdaeq	r1, {r3, r4, r6, r9, sl, pc}
 8018768:	08018784 	stmdaeq	r1, {r2, r7, r8, r9, sl, pc}

0801876c <DisplayUdfParamsConst::BOARD_NAME>:
 801876c:	72616f62 	rsbvc	r6, r1, #392	; 0x188
 8018770:	616e5f64 	cmnvs	lr, r4, ror #30
 8018774:	 	tstvs	r0, sp, ror #10

08018777 <DisplayUdfParamsConst::ACTIVE_PORTS>:
 8018777:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 801877b:	705f6576 	subsvc	r6, pc, r6, ror r5	; <UNPREDICTABLE>
 801877f:	7374726f 	cmnvc	r4, #-268435450	; 0xf0000006
	...

08018784 <DisplayUdfParamsConst::DMX_DIRECTION>:
 8018784:	5f786d64 	svcpl	0x00786d64
 8018788:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801878c:	6f697463 	svcvs	0x00697463
 8018790:	 	ldclvs	0, cr0, [r3], #-440	; 0xfffffe48

08018792 <DisplayUdfParamsConst::SLEEP_TIMEOUT>:
 8018792:	65656c73 	strbvs	r6, [r5, #-3187]!	; 0xfffff38d
 8018796:	69745f70 	ldmdbvs	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 801879a:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8018235 <index_js+0x4a9>
 801879e:	 	stclvs	0, cr0, [r6], #-464	; 0xfffffe30

080187a0 <DisplayUdfParamsConst::FLIP_VERTICALLY>:
 80187a0:	70696c66 	rsbvc	r6, r9, r6, ror #24
 80187a4:	7265765f 	rsbvc	r7, r5, #99614720	; 0x5f00000
 80187a8:	61636974 	smcvs	13972	; 0x3694
 80187ac:	00796c6c 	rsbseq	r6, r9, ip, ror #24

080187b0 <DisplayUdfParamsConst::TITLE>:
 80187b0:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 80187b4:	 	ldrbvs	r0, [r6, #-101]!	; 0xffffff9b

080187b6 <DisplayUdfParamsConst::VERSION>:
 80187b6:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 80187ba:	006e6f69 	rsbeq	r6, lr, r9, ror #30

080187be <DisplayUdfParamsConst::FILE_NAME>:
 80187be:	70736964 	rsbsvc	r6, r3, r4, ror #18
 80187c2:	2e79616c 	rpwcsez	f6, f1, #4.0
 80187c6:	00747874 	rsbseq	r7, r4, r4, ror r8

080187ca <DisplayUdfParamsConst::INTENSITY>:
 80187ca:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 80187ce:	7469736e 	strbtvc	r7, [r9], #-878	; 0xfffffc92
 80187d2:	20200079 	eorcs	r0, r0, r9, ror r0
 80187d6:	4f002020 	svcmi	0x00002020
 80187da:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 80187de:	253a6432 	ldrcs	r6, [sl, #-1074]!	; 0xfffffbce
 80187e2:	64253a64 	strtvs	r3, [r5], #-2660	; 0xfffff59c
 80187e6:	20632520 	rsbcs	r2, r3, r0, lsr #10
 80187ea:	4f007325 	svcmi	0x00007325
 80187ee:	203a6425 	eorscs	r6, sl, r5, lsr #8
 80187f2:	64322e25 	ldrtvs	r2, [r2], #-3621	; 0xfffff1db
 80187f6:	3a64253a 	bcc	9921ce6 <__exidx_end+0x1908e36>
 80187fa:	25206425 	strcs	r6, [r0, #-1061]!	; 0xfffffbdb
 80187fe:	73252063 			; <UNDEFINED> instruction: 0x73252063
 8018802:	3a632500 	bcc	98e1c0a <__exidx_end+0x18c8d5a>
 8018806:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 801880a:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801880e:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8018812:	3a504100 	bcc	9428c1a <__exidx_end+0x140fd6a>
 8018816:	00642520 	rsbeq	r2, r4, r0, lsr #10
 801881a:	44206f4e 	strtmi	r6, [r0], #-3918	; 0xfffff0b2
 801881e:	4400584d 	strmi	r5, [r0], #-2125	; 0xfffff7b3
 8018822:	2520584d 	strcs	r5, [r0, #-2125]!	; 0xfffff7b3
 8018826:	64252073 	strtvs	r2, [r5], #-115	; 0xffffff8d
	...

0801882b <DevicesParamsConst::SPI_SPEED_HZ>:
 801882b:	636f6c63 	cmnvs	pc, #25344	; 0x6300
 801882f:	70735f6b 	rsbsvc	r5, r3, fp, ror #30
 8018833:	5f646565 	svcpl	0x00646565
 8018837:	 			; <UNDEFINED> instruction: 0x6c007a68

0801883a <DevicesParamsConst::GROUPING_COUNT>:
 801883a:	5f64656c 	svcpl	0x0064656c
 801883e:	756f7267 	strbvc	r7, [pc, #-615]!	; 80185df <NetworkConst::MSG_NETWORK_INIT+0xf0>
 8018842:	6f635f70 	svcvs	0x00635f70
 8018846:	00746e75 	rsbseq	r6, r4, r5, ror lr

0801884a <DevicesParamsConst::GLOBAL_BRIGHTNESS>:
 801884a:	626f6c67 	rsbvs	r6, pc, #26368	; 0x6700
 801884e:	625f6c61 	subsvs	r6, pc, #24832	; 0x6100
 8018852:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 8018856:	73656e74 	cmnvc	r5, #116, 28	; 0x740
 801885a:	 	strbvs	r0, [ip, #-115]!	; 0xffffff8d

0801885c <DevicesParamsConst::MAP>:
 801885c:	5f64656c 	svcpl	0x0064656c
 8018860:	5f626772 	svcpl	0x00626772
 8018864:	7070616d 	rsbsvc	r6, r0, sp, ror #2
 8018868:	00676e69 	rsbeq	r6, r7, r9, ror #28

0801886c <DevicesParamsConst::TYPE>:
 801886c:	5f64656c 	svcpl	0x0064656c
 8018870:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
	...

08018875 <DevicesParamsConst::COUNT>:
 8018875:	5f64656c 	svcpl	0x0064656c
 8018879:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 801887d:	 	strbvs	r0, [ip, #-116]!	; 0xffffff8c

0801887f <DevicesParamsConst::LED_T0H>:
 801887f:	5f64656c 	svcpl	0x0064656c
 8018883:	00683074 	rsbeq	r3, r8, r4, ror r0

08018887 <DevicesParamsConst::LED_T1H>:
 8018887:	5f64656c 	svcpl	0x0064656c
 801888b:	00683174 	rsbeq	r3, r8, r4, ror r1

0801888f <DevicesParamsConst::FILE_NAME>:
 801888f:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 8018893:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 8018897:	00747874 	rsbseq	r7, r4, r4, ror r8
 801889b:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 801889f:	6425223a 	strtvs	r2, [r5], #-570	; 0xfffffdc6
 80188a3:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 80188a7:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80188ab:	002c2264 	eoreq	r2, ip, r4, ror #4
 80188af:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
 80188b3:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80188b7:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80188bb:	0a64252e 	beq	9921d7b <__exidx_end+0x1908ecb>
 80188bf:	25202300 	strcs	r2, [r0, #-768]!	; 0xfffffd00
 80188c3:	0a232073 	beq	88e0a97 <__exidx_end+0x8c7be7>
 80188c7:	73252200 			; <UNDEFINED> instruction: 0x73252200
 80188cb:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 80188cf:	22782a2e 	rsbscs	r2, r8, #188416	; 0x2e000
 80188d3:	2523002c 	strcs	r0, [r3, #-44]!	; 0xffffffd4
 80188d7:	2e253d73 	mcrcs	13, 1, r3, cr5, cr3, {3}
 80188db:	000a782a 	andeq	r7, sl, sl, lsr #16

080188df <LightSetParamsConst::MERGE_MODE>:
 80188df:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 80188e3:	6f6d5f65 	svcvs	0x006d5f65
 80188e7:	 	strvc	r6, [r0], #-1380	; 0xfffffa9c

080188ea <LightSetParamsConst::TEST_PATTERN>:
 80188ea:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
 80188ee:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
 80188f2:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
	...

080188f7 <LightSetParamsConst::UNIVERSE_PORT>:
 80188f7:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 80188fb:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 80188ff:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8018903:	00615f74 	rsbeq	r5, r1, r4, ror pc
 8018907:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801890b:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801890f:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8018913:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8018917:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801891b:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801891f:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8018923:	00635f74 	rsbeq	r5, r3, r4, ror pc
 8018927:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801892b:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801892f:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8018933:	00645f74 	rsbeq	r5, r4, r4, ror pc

08018937 <LightSetParamsConst::START_UNI_PORT>:
 8018937:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801893b:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801893f:	6f705f69 	svcvs	0x00705f69
 8018943:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 8018947:	74730000 	ldrbtvc	r0, [r3], #-0
 801894b:	5f747261 	svcpl	0x00747261
 801894f:	5f696e75 	svcpl	0x00696e75
 8018953:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8018957:	0000325f 	andeq	r3, r0, pc, asr r2
 801895b:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801895f:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 8018963:	6f705f69 	svcvs	0x00705f69
 8018967:	335f7472 	cmpcc	pc, #1912602624	; 0x72000000
 801896b:	74730000 	ldrbtvc	r0, [r3], #-0
 801896f:	5f747261 	svcpl	0x00747261
 8018973:	5f696e75 	svcpl	0x00696e75
 8018977:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 801897b:	0000345f 	andeq	r3, r0, pc, asr r4
 801897f:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8018983:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 8018987:	6f705f69 	svcvs	0x00705f69
 801898b:	355f7472 	ldrbcc	r7, [pc, #-1138]	; 8018521 <NetworkConst::MSG_NETWORK_INIT+0x32>
 801898f:	74730000 	ldrbtvc	r0, [r3], #-0
 8018993:	5f747261 	svcpl	0x00747261
 8018997:	5f696e75 	svcpl	0x00696e75
 801899b:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 801899f:	0000365f 	andeq	r3, r0, pc, asr r6
 80189a3:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 80189a7:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 80189ab:	6f705f69 	svcvs	0x00705f69
 80189af:	375f7472 			; <UNDEFINED> instruction: 0x375f7472
 80189b3:	74730000 	ldrbtvc	r0, [r3], #-0
 80189b7:	5f747261 	svcpl	0x00747261
 80189bb:	5f696e75 	svcpl	0x00696e75
 80189bf:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 80189c3:	0000385f 	andeq	r3, r0, pc, asr r8

080189c7 <LightSetParamsConst::MERGE_MODE_PORT>:
 80189c7:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 80189cb:	6f6d5f65 	svcvs	0x006d5f65
 80189cf:	705f6564 	subsvc	r6, pc, r4, ror #10
 80189d3:	5f74726f 	svcpl	0x0074726f
 80189d7:	656d0061 	strbvs	r0, [sp, #-97]!	; 0xffffff9f
 80189db:	5f656772 	svcpl	0x00656772
 80189df:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 80189e3:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 80189e7:	00625f74 	rsbeq	r5, r2, r4, ror pc
 80189eb:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 80189ef:	6f6d5f65 	svcvs	0x006d5f65
 80189f3:	705f6564 	subsvc	r6, pc, r4, ror #10
 80189f7:	5f74726f 	svcpl	0x0074726f
 80189fb:	656d0063 	strbvs	r0, [sp, #-99]!	; 0xffffff9d
 80189ff:	5f656772 	svcpl	0x00656772
 8018a03:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 8018a07:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8018a0b:	00645f74 	rsbeq	r5, r4, r4, ror pc

08018a0f <LightSetParamsConst::DMX_START_ADDRESS>:
 8018a0f:	5f786d64 	svcpl	0x00786d64
 8018a13:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8018a17:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xfffff08c
 8018a1b:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 8018a1f:	 	mrcvs	0, 3, r0, cr5, cr3, {3}

08018a21 <LightSetParamsConst::UNIVERSE>:
 8018a21:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8018a25:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
	...

08018a2a <LightSetParamsConst::DIRECTION>:
 8018a2a:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8018a2e:	6f697463 	svcvs	0x00697463
 8018a32:	6f705f6e 	svcvs	0x00705f6e
 8018a36:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
 8018a3a:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 8018a3e:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8018a42:	5f6e6f69 	svcpl	0x006e6f69
 8018a46:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8018a4a:	0000625f 	andeq	r6, r0, pc, asr r2
 8018a4e:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8018a52:	6f697463 	svcvs	0x00697463
 8018a56:	6f705f6e 	svcvs	0x00705f6e
 8018a5a:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
 8018a5e:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 8018a62:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8018a66:	5f6e6f69 	svcpl	0x006e6f69
 8018a6a:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8018a6e:	0000645f 	andeq	r6, r0, pc, asr r4
 8018a72:	64206f4e 	strtvs	r6, [r0], #-3918	; 0xfffff0b2
 8018a76:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 8018a7a:	66207961 	strtvs	r7, [r0], -r1, ror #18
 8018a7e:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 8018a82:	31485300 	mrscc	r5, (UNDEF: 120)
 8018a86:	00363031 	eorseq	r3, r6, r1, lsr r0
 8018a8a:	31445353 	cmpcc	r4, r3, asr r3
 8018a8e:	00363033 	eorseq	r3, r6, r3, lsr r0
 8018a92:	28207325 	stmdacs	r0!, {r0, r2, r5, r8, r9, ip, sp, lr}
 8018a96:	252c6425 	strcs	r6, [ip, #-1061]!	; 0xfffffbdb
 8018a9a:	000a2964 	andeq	r2, sl, r4, ror #18
 8018a9e:	aaeeaa40 	bge	7bc33a6 <__stack_size+0x7bc1ba6>
 8018aa2:	 	subeq	r0, r0, lr, ror #1

08018aa4 <_OledFont8x6>:
 8018aa4:	00000040 	andeq	r0, r0, r0, asr #32
 8018aa8:	40000000 	andmi	r0, r0, r0
 8018aac:	005f0000 	subseq	r0, pc, r0
 8018ab0:	00400000 	subeq	r0, r0, r0
 8018ab4:	00070007 	andeq	r0, r7, r7
 8018ab8:	7f144000 	svcvc	0x00144000
 8018abc:	00147f14 	andseq	r7, r4, r4, lsl pc
 8018ac0:	7f2a2440 	svcvc	0x002a2440
 8018ac4:	4000122a 	andmi	r1, r0, sl, lsr #4
 8018ac8:	64081323 	strvs	r1, [r8], #-803	; 0xfffffcdd
 8018acc:	36400062 	strbcc	r0, [r0], -r2, rrx
 8018ad0:	50205649 	eorpl	r5, r0, r9, asr #12
 8018ad4:	08004000 	stmdaeq	r0, {lr}
 8018ad8:	00000307 	andeq	r0, r0, r7, lsl #6
 8018adc:	221c0040 	andscs	r0, ip, #64	; 0x40
 8018ae0:	40000041 	andmi	r0, r0, r1, asr #32
 8018ae4:	1c224100 	stfnes	f4, [r2], #-0
 8018ae8:	2a400000 	bcs	9018af0 <__exidx_end+0xfffc40>
 8018aec:	2a1c7f1c 	bcs	8738764 <__exidx_end+0x71f8b4>
 8018af0:	08084000 	stmdaeq	r8, {lr}
 8018af4:	0008083e 	andeq	r0, r8, lr, lsr r8
 8018af8:	70800040 	addvc	r0, r0, r0, asr #32
 8018afc:	40000030 	andmi	r0, r0, r0, lsr r0
 8018b00:	08080808 	stmdaeq	r8, {r3, fp}
 8018b04:	00400008 	subeq	r0, r0, r8
 8018b08:	00606000 	rsbeq	r6, r0, r0
 8018b0c:	10204000 	eorne	r4, r0, r0
 8018b10:	00020408 	andeq	r0, r2, r8, lsl #8
 8018b14:	49513e40 	ldmdbmi	r1, {r6, r9, sl, fp, ip, sp}^
 8018b18:	40003e45 	andmi	r3, r0, r5, asr #28
 8018b1c:	407f4200 	rsbsmi	r4, pc, r0, lsl #4
 8018b20:	72400000 	subvc	r0, r0, #0
 8018b24:	46494949 	strbmi	r4, [r9], -r9, asr #18
 8018b28:	41214000 			; <UNDEFINED> instruction: 0x41214000
 8018b2c:	00334d49 	eorseq	r4, r3, r9, asr #26
 8018b30:	12141840 	andsne	r1, r4, #64, 16	; 0x400000
 8018b34:	4000107f 	andmi	r1, r0, pc, ror r0
 8018b38:	45454527 	strbmi	r4, [r5, #-1319]	; 0xfffffad9
 8018b3c:	3c400039 	mcrrcc	0, 3, r0, r0, cr9
 8018b40:	3149494a 	cmpcc	r9, sl, asr #18
 8018b44:	21414000 	mrscs	r4, (UNDEF: 65)
 8018b48:	00070911 	andeq	r0, r7, r1, lsl r9
 8018b4c:	49493640 	stmdbmi	r9, {r6, r9, sl, ip, sp}^
 8018b50:	40003649 	andmi	r3, r0, r9, asr #12
 8018b54:	29494946 	stmdbcs	r9, {r1, r2, r6, r8, fp, lr}^
 8018b58:	0040001e 	subeq	r0, r0, lr, lsl r0
 8018b5c:	00001400 	andeq	r1, r0, r0, lsl #8
 8018b60:	40004000 	andmi	r4, r0, r0
 8018b64:	00000034 	andeq	r0, r0, r4, lsr r0
 8018b68:	14080040 	strne	r0, [r8], #-64	; 0xffffffc0
 8018b6c:	40004122 	andmi	r4, r0, r2, lsr #2
 8018b70:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec
 8018b74:	00400014 	subeq	r0, r0, r4, lsl r0
 8018b78:	08142241 	ldmdaeq	r4, {r0, r6, r9, sp}
 8018b7c:	01024000 	mrseq	r4, (UNDEF: 2)
 8018b80:	00060959 	andeq	r0, r6, r9, asr r9
 8018b84:	5d413e40 	stclpl	14, cr3, [r1, #-256]	; 0xffffff00
 8018b88:	40004e59 	andmi	r4, r0, r9, asr lr
 8018b8c:	1211127c 	andsne	r1, r1, #124, 4	; 0xc0000007
 8018b90:	7f40007c 	svcvc	0x0040007c
 8018b94:	36494949 	strbcc	r4, [r9], -r9, asr #18
 8018b98:	413e4000 	teqmi	lr, r0
 8018b9c:	00224141 	eoreq	r4, r2, r1, asr #2
 8018ba0:	41417f40 	cmpmi	r1, r0, asr #30
 8018ba4:	40003e41 	andmi	r3, r0, r1, asr #28
 8018ba8:	4949497f 	stmdbmi	r9, {r0, r1, r2, r3, r4, r5, r6, r8, fp, lr}^
 8018bac:	7f400041 	svcvc	0x00400041
 8018bb0:	01090909 	tsteq	r9, r9, lsl #18
 8018bb4:	413e4000 	teqmi	lr, r0
 8018bb8:	00735141 	rsbseq	r5, r3, r1, asr #2
 8018bbc:	08087f40 	stmdaeq	r8, {r6, r8, r9, sl, fp, ip, sp, lr}
 8018bc0:	40007f08 	andmi	r7, r0, r8, lsl #30
 8018bc4:	417f4100 	cmnmi	pc, r0, lsl #2
 8018bc8:	20400000 	subcs	r0, r0, r0
 8018bcc:	013f4140 	teqeq	pc, r0, asr #2
 8018bd0:	087f4000 	ldmdaeq	pc!, {lr}^	; <UNPREDICTABLE>
 8018bd4:	00412214 	subeq	r2, r1, r4, lsl r2
 8018bd8:	40407f40 	submi	r7, r0, r0, asr #30
 8018bdc:	40004040 	andmi	r4, r0, r0, asr #32
 8018be0:	021c027f 	andseq	r0, ip, #-268435449	; 0xf0000007
 8018be4:	7f40007f 	svcvc	0x0040007f
 8018be8:	7f100804 	svcvc	0x00100804
 8018bec:	413e4000 	teqmi	lr, r0
 8018bf0:	003e4141 	eorseq	r4, lr, r1, asr #2
 8018bf4:	09097f40 	stmdbeq	r9, {r6, r8, r9, sl, fp, ip, sp, lr}
 8018bf8:	40000609 	andmi	r0, r0, r9, lsl #12
 8018bfc:	2151413e 	cmpcs	r1, lr, lsr r1
 8018c00:	7f40005e 	svcvc	0x0040005e
 8018c04:	46291909 	strtmi	r1, [r9], -r9, lsl #18
 8018c08:	49264000 	stmdbmi	r6!, {lr}
 8018c0c:	00324949 	eorseq	r4, r2, r9, asr #18
 8018c10:	7f010340 	svcvc	0x00010340
 8018c14:	40000301 	andmi	r0, r0, r1, lsl #6
 8018c18:	4040403f 	submi	r4, r0, pc, lsr r0
 8018c1c:	1f40003f 	svcne	0x0040003f
 8018c20:	1f204020 	svcne	0x00204020
 8018c24:	403f4000 	eorsmi	r4, pc, r0
 8018c28:	003f4038 	eorseq	r4, pc, r8, lsr r0	; <UNPREDICTABLE>
 8018c2c:	08146340 	ldmdaeq	r4, {r6, r8, r9, sp, lr}
 8018c30:	40006314 	andmi	r6, r0, r4, lsl r3
 8018c34:	04780403 	ldrbteq	r0, [r8], #-1027	; 0xfffffbfd
 8018c38:	61400003 	cmpvs	r0, r3
 8018c3c:	434d4959 	movtmi	r4, #55641	; 0xd959
 8018c40:	7f004000 	svcvc	0x00004000
 8018c44:	00414141 	subeq	r4, r1, r1, asr #2
 8018c48:	08040240 	stmdaeq	r4, {r6, r9}
 8018c4c:	40002010 	andmi	r2, r0, r0, lsl r0
 8018c50:	41414100 	mrsmi	r4, (UNDEF: 81)
 8018c54:	0440007f 	strbeq	r0, [r0], #-127	; 0xffffff81
 8018c58:	04020102 	streq	r0, [r2], #-258	; 0xfffffefe
 8018c5c:	40404000 	submi	r4, r0, r0
 8018c60:	00404040 	subeq	r4, r0, r0, asr #32
 8018c64:	07030040 	streq	r0, [r3, -r0, asr #32]
 8018c68:	40000008 	andmi	r0, r0, r8
 8018c6c:	78545420 	ldmdavc	r4, {r5, sl, ip, lr}^
 8018c70:	7f400040 	svcvc	0x00400040
 8018c74:	38444428 	stmdacc	r4, {r3, r5, sl, lr}^
 8018c78:	44384000 	ldrtmi	r4, [r8], #-0
 8018c7c:	00284444 	eoreq	r4, r8, r4, asr #8
 8018c80:	44443840 	strbmi	r3, [r4], #-2112	; 0xfffff7c0
 8018c84:	40007f28 	andmi	r7, r0, r8, lsr #30
 8018c88:	54545438 	ldrbpl	r5, [r4], #-1080	; 0xfffffbc8
 8018c8c:	00400018 	subeq	r0, r0, r8, lsl r0
 8018c90:	02097e08 	andeq	r7, r9, #8, 28	; 0x80
 8018c94:	a4184000 	ldrge	r4, [r8], #-0
 8018c98:	00789ca4 	rsbseq	r9, r8, r4, lsr #25
 8018c9c:	04087f40 	streq	r7, [r8], #-3904	; 0xfffff0c0
 8018ca0:	40007804 	andmi	r7, r0, r4, lsl #16
 8018ca4:	407d4400 	rsbsmi	r4, sp, r0, lsl #8
 8018ca8:	20400000 	subcs	r0, r0, r0
 8018cac:	003d4040 	eorseq	r4, sp, r0, asr #32
 8018cb0:	107f4000 	rsbsne	r4, pc, r0
 8018cb4:	00004428 	andeq	r4, r0, r8, lsr #8
 8018cb8:	7f410040 	svcvc	0x00410040
 8018cbc:	40000040 	andmi	r0, r0, r0, asr #32
 8018cc0:	0478047c 	ldrbteq	r0, [r8], #-1148	; 0xfffffb84
 8018cc4:	7c400078 	mcrrvc	0, 7, r0, r0, cr8
 8018cc8:	78040408 	stmdavc	r4, {r3, sl}
 8018ccc:	44384000 	ldrtmi	r4, [r8], #-0
 8018cd0:	00384444 	eorseq	r4, r8, r4, asr #8
 8018cd4:	2418fc40 	ldrcs	pc, [r8], #-3136	; 0xfffff3c0
 8018cd8:	40001824 	andmi	r1, r0, r4, lsr #16
 8018cdc:	18242418 	stmdane	r4!, {r3, r4, sl, sp}
 8018ce0:	7c4000fc 	mcrrvc	0, 15, r0, r0, cr12
 8018ce4:	08040408 	stmdaeq	r4, {r3, sl}
 8018ce8:	54484000 	strbpl	r4, [r8], #-0
 8018cec:	00245454 	eoreq	r5, r4, r4, asr r4
 8018cf0:	3f040440 	svccc	0x00040440
 8018cf4:	40002444 	andmi	r2, r0, r4, asr #8
 8018cf8:	2040403c 	subcs	r4, r0, ip, lsr r0
 8018cfc:	1c40007c 	mcrrne	0, 7, r0, r0, cr12
 8018d00:	1c204020 	stcne	0, cr4, [r0], #-128	; 0xffffff80
 8018d04:	403c4000 	eorsmi	r4, ip, r0
 8018d08:	003c4030 	eorseq	r4, ip, r0, lsr r0
 8018d0c:	10284440 	eorne	r4, r8, r0, asr #8
 8018d10:	40004428 	andmi	r4, r0, r8, lsr #8
 8018d14:	9090904c 	addsls	r9, r0, ip, asr #32
 8018d18:	4440007c 	strbmi	r0, [r0], #-124	; 0xffffff84
 8018d1c:	444c5464 	strbmi	r5, [ip], #-1124	; 0xfffffb9c
 8018d20:	08004000 	stmdaeq	r0, {lr}
 8018d24:	00004136 	andeq	r4, r0, r6, lsr r1
 8018d28:	77000040 	strvc	r0, [r0, -r0, asr #32]
 8018d2c:	40000000 	andmi	r0, r0, r0
 8018d30:	08364100 	ldmdaeq	r6!, {r8, lr}
 8018d34:	02400000 	subeq	r0, r0, #0
 8018d38:	02040201 	andeq	r0, r4, #268435456	; 0x10000000
 8018d3c:	263c4000 	ldrtcs	r4, [ip], -r0
 8018d40:	003c2623 	eorseq	r2, ip, r3, lsr #12

08018d44 <oled_128x32_init>:
 8018d44:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 8018d48:	4000d31f 	andmi	sp, r0, pc, lsl r3
 8018d4c:	0020148d 	eoreq	r1, r0, sp, lsl #9
 8018d50:	02dac8a1 	sbcseq	ip, sl, #10551296	; 0xa10000
 8018d54:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 8018d58:	a6a440db 	ssatge	r4, #5, fp, asr #1

08018d5c <oled_128x64_init>:
 8018d5c:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 8018d60:	4000d33f 	andmi	sp, r0, pc, lsr r3
 8018d64:	0020148d 	eoreq	r1, r0, sp, lsl #9
 8018d68:	12dac8a1 	sbcsne	ip, sl, #10551296	; 0xa10000
 8018d6c:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 8018d70:	a6a440db 	ssatge	r4, #5, fp, asr #1

08018d74 <vtable for Ssd1306>:
	...
 8018d7c:	0801402b 	stmdaeq	r1, {r0, r1, r3, r5, lr}
 8018d80:	08014059 	stmdaeq	r1, {r0, r3, r4, r6, lr}
 8018d84:	08014371 	stmdaeq	r1, {r0, r4, r5, r6, r8, r9, lr}
 8018d88:	080142f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r9, lr}
 8018d8c:	080141c1 	stmdaeq	r1, {r0, r6, r7, r8, lr}
 8018d90:	08014079 	stmdaeq	r1, {r0, r3, r4, r5, r6, lr}
 8018d94:	080140a1 	stmdaeq	r1, {r0, r5, r7, lr}
 8018d98:	08014197 	stmdaeq	r1, {r0, r1, r2, r4, r7, r8, lr}
 8018d9c:	08014151 	stmdaeq	r1, {r0, r4, r6, r8, lr}
 8018da0:	0801402d 	stmdaeq	r1, {r0, r2, r3, r5, lr}
 8018da4:	080141fd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, lr}
 8018da8:	08014209 	stmdaeq	r1, {r0, r3, r9, lr}
 8018dac:	08014223 	stmdaeq	r1, {r0, r1, r5, r9, lr}
 8018db0:	08014031 	stmdaeq	r1, {r0, r4, r5, lr}
 8018db4:	30345b1b 	eorscc	r5, r4, fp, lsl fp
 8018db8:	5b1b006d 	blpl	86d8f74 <__exidx_end+0x6c00c4>
 8018dbc:	006d3033 	rsbeq	r3, sp, r3, lsr r0
 8018dc0:	31335b1b 	teqcc	r3, fp, lsl fp
 8018dc4:	5b1b006d 	blpl	86d8f80 <__exidx_end+0x6c00d0>
 8018dc8:	006d3233 	rsbeq	r3, sp, r3, lsr r2
 8018dcc:	33335b1b 	teqcc	r3, #27648	; 0x6c00
 8018dd0:	5b1b006d 	blpl	86d8f8c <__exidx_end+0x6c00dc>
 8018dd4:	006d3933 	rsbeq	r3, sp, r3, lsr r9
 8018dd8:	2e25565b 	mcrcs	6, 1, r5, cr5, cr11, {2}
 8018ddc:	205d732a 	subscs	r7, sp, sl, lsr #6
 8018de0:	43207325 			; <UNDEFINED> instruction: 0x43207325
 8018de4:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 8018de8:	2064656c 	rsbcs	r6, r4, ip, ror #10
 8018dec:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 8018df0:	20732a2e 	rsbscs	r2, r3, lr, lsr #20
 8018df4:	25207461 	strcs	r7, [r0, #-1121]!	; 0xfffffb9f
 8018df8:	00732a2e 	rsbseq	r2, r3, lr, lsr #20
 8018dfc:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 8018e00:	203a636f 	eorscs	r6, sl, pc, ror #6
 8018e04:	000a7525 	andeq	r7, sl, r5, lsr #10
 8018e08:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 8018e0c:	203a636f 	eorscs	r6, sl, pc, ror #6
 8018e10:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 8018e14:	62203e20 	eorvs	r3, r0, #32, 28	; 0x200
 8018e18:	6b636f6c 	blvs	98f4bd0 <__exidx_end+0x18dbd20>
 8018e1c:	6d696c5f 	stclvs	12, cr6, [r9, #-380]!	; 0xfffffe84
 8018e20:	000a7469 	andeq	r7, sl, r9, ror #8
 8018e24:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 8018e28:	203a636f 	eorscs	r6, sl, pc, ror #6
 8018e2c:	6f6c4270 	svcvs	0x006c4270
 8018e30:	65486b63 	strbvs	r6, [r8, #-2915]	; 0xfffff49d
 8018e34:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 8018e38:	2c70253d 	cfldr64cs	mvdx2, [r0], #-244	; 0xffffff0c
 8018e3c:	7a697320 	bvc	9a75ac4 <__exidx_end+0x1a5cc14>
 8018e40:	64253d65 	strtvs	r3, [r5], #-3429	; 0xfffff29b
 8018e44:	6164202c 	cmnvs	r4, ip, lsr #32
 8018e48:	253d6174 	ldrcs	r6, [sp, #-372]!	; 0xfffffe8c
 8018e4c:	66000a70 			; <UNDEFINED> instruction: 0x66000a70
 8018e50:	3a656572 	bcc	9972420 <__exidx_end+0x1959570>
 8018e54:	6c427020 	mcrrvs	0, 2, r7, r2, cr0
 8018e58:	486b636f 	stmdami	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8018e5c:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 8018e60:	203d2072 	eorscs	r2, sp, r2, ror r0
 8018e64:	202c7025 	eorcs	r7, ip, r5, lsr #32
 8018e68:	6f6c4270 	svcvs	0x006c4270
 8018e6c:	3d206b63 	fstmdbxcc	r0!, {d6-d54}	;@ Deprecated
 8018e70:	0a702520 	beq	9c222f8 <__exidx_end+0x1c09448>
 8018e74:	00000000 	andeq	r0, r0, r0

08018e78 <days_of_month>:
 8018e78:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018e7c:	0000001c 	andeq	r0, r0, ip, lsl r0
 8018e80:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018e84:	0000001e 	andeq	r0, r0, lr, lsl r0
 8018e88:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018e8c:	0000001e 	andeq	r0, r0, lr, lsl r0
 8018e90:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018e94:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018e98:	0000001e 	andeq	r0, r0, lr, lsl r0
 8018e9c:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018ea0:	0000001e 	andeq	r0, r0, lr, lsl r0
 8018ea4:	0000001f 	andeq	r0, r0, pc, lsl r0

Disassembly of section .ARM:

08018ea8 <__exidx_start>:
 8018ea8:	7ffef06c 	svcvc	0x00fef06c
 8018eac:	00000001 	andeq	r0, r0, r1

Disassembly of section .ARM.attributes:

08018eb0 <.ARM.attributes>:
 8018eb0:	00002e41 	andeq	r2, r0, r1, asr #28
 8018eb4:	61656100 	cmnvs	r5, r0, lsl #2
 8018eb8:	01006962 	tsteq	r0, r2, ror #18
 8018ebc:	00000024 	andeq	r0, r0, r4, lsr #32
 8018ec0:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
 8018ec4:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
 8018ec8:	0600334d 	streq	r3, [r0], -sp, asr #6
 8018ecc:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
 8018ed0:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
 8018ed4:	17011501 	strne	r1, [r1, -r1, lsl #10]
 8018ed8:	1a011803 	bne	805eeec <__exidx_end+0x4603c>
 8018edc:	Address 0x0000000008018edc is out of bounds.


Disassembly of section .data:

20000000 <s_multicast_mac>:
20000000:	005e0001 	subseq	r0, lr, r1
20000004:	00000000 	andeq	r0, r0, r0

20000008 <MDNS::s_nHandle>:
20000008:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

2000000c <next_block>:
2000000c:	20016000 	andcs	r6, r1, r0

20000010 <s_block_bucket>:
20000010:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20000020:	00000020 	andeq	r0, r0, r0, lsr #32
	...
20000030:	00000040 	andeq	r0, r0, r0, asr #32
	...
20000040:	00000060 	andeq	r0, r0, r0, rrx
	...
20000050:	00000080 	andeq	r0, r0, r0, lsl #1
	...
20000060:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20000070:	00000140 	andeq	r0, r0, r0, asr #2
	...
20000080:	00000180 	andeq	r0, r0, r0, lsl #3
	...
20000090:	00000200 	andeq	r0, r0, r0, lsl #4
	...
200000a0:	00000300 	andeq	r0, r0, r0, lsl #6
	...
200000b0:	00000400 	andeq	r0, r0, r0, lsl #8
	...
200000c0:	00000500 	andeq	r0, r0, r0, lsl #10
	...

200000e0 <SystemCoreClock>:
200000e0:	066ff300 	strbteq	pc, [pc], -r0, lsl #6	; <UNPREDICTABLE>

Disassembly of section .bss:

200000e8 <outptr>:
200000e8:	00000000 	andeq	r0, r0, r0

200000ec <guard variable for lightset::Data::Get()::instance>:
200000ec:	00000000 	andeq	r0, r0, r0

200000f0 <lightset::Data::Get()::instance>:
	...

20001900 <ArtNetNode::s_pThis>:
20001900:	00000000 	andeq	r0, r0, r0

20001904 <s_ReceivingMask>:
20001904:	00000000 	andeq	r0, r0, r0

20001908 <ip>:
20001908:	00000000 	andeq	r0, r0, r0

2000190c <ip>:
2000190c:	00000000 	andeq	r0, r0, r0

20001910 <E131Bridge::s_pThis>:
20001910:	00000000 	andeq	r0, r0, r0

20001914 <s_ReceivingMask>:
20001914:	00000000 	andeq	r0, r0, r0

20001918 <WS28xxDmx::s_pThis>:
20001918:	00000000 	andeq	r0, r0, r0

2000191c <PixelPatterns::m_PortConfig>:
	...

2000193c <PixelPatterns::m_nActivePorts>:
2000193c:	00000000 	andeq	r0, r0, r0

20001940 <PixelPatterns::m_pScannerColours>:
20001940:	00000000 	andeq	r0, r0, r0

20001944 <PixelPatterns::m_nCount>:
20001944:	00000000 	andeq	r0, r0, r0

20001948 <PixelPatterns::m_pOutput>:
20001948:	00000000 	andeq	r0, r0, r0

2000194c <PixelTestPattern::s_pThis>:
2000194c:	00000000 	andeq	r0, r0, r0

20001950 <PixelTestPattern::s_Pattern>:
20001950:	00000000 	andeq	r0, r0, r0

20001954 <s_tmp>:
20001954:	00000000 	andeq	r0, r0, r0

20001958 <WS28xx::s_pThis>:
20001958:	00000000 	andeq	r0, r0, r0

2000195c <RemoteConfig::s_pUdpBuffer>:
2000195c:	00000000 	andeq	r0, r0, r0

20001960 <RemoteConfig::s_RemoteConfigListBin>:
	...

20001984 <RemoteConfig::s_pThis>:
20001984:	00000000 	andeq	r0, r0, r0

20001988 <SpiFlashStore::s_nWaitMillis>:
20001988:	00000000 	andeq	r0, r0, r0

2000198c <SpiFlashStore::s_SpiFlashData>:
	...

2000298c <SpiFlashStore::s_nStartAddress>:
2000298c:	00000000 	andeq	r0, r0, r0

20002990 <SpiFlashStore::s_bHaveFlashChip>:
20002990:	00000000 	andeq	r0, r0, r0

20002994 <SpiFlashStore::s_nSpiFlashStoreSize>:
20002994:	00000000 	andeq	r0, r0, r0

20002998 <SpiFlashStore::s_State>:
20002998:	00000000 	andeq	r0, r0, r0

2000299c <SpiFlashStore::s_pThis>:
2000299c:	00000000 	andeq	r0, r0, r0

200029a0 <SpiFlashStore::s_bIsNew>:
200029a0:	00000000 	andeq	r0, r0, r0

200029a4 <StoreArtNet::s_pThis>:
200029a4:	00000000 	andeq	r0, r0, r0

200029a8 <StoreDisplayUdf::s_pThis>:
200029a8:	00000000 	andeq	r0, r0, r0

200029ac <StoreNetwork::s_pThis>:
200029ac:	00000000 	andeq	r0, r0, r0

200029b0 <StoreRemoteConfig::s_pThis>:
200029b0:	00000000 	andeq	r0, r0, r0

200029b4 <StoreWS28xxDmx::s_pThis>:
200029b4:	00000000 	andeq	r0, r0, r0

200029b8 <FlashRom::s_pThis>:
200029b8:	00000000 	andeq	r0, r0, r0

200029bc <flashrom::s_nAddress>:
200029bc:	00000000 	andeq	r0, r0, r0

200029c0 <flashrom::s_State>:
200029c0:	00000000 	andeq	r0, r0, r0

200029c4 <flashrom::s_nPage>:
200029c4:	00000000 	andeq	r0, r0, r0

200029c8 <flashrom::s_pData>:
200029c8:	00000000 	andeq	r0, r0, r0

200029cc <flashrom::s_isBank0>:
200029cc:	00000000 	andeq	r0, r0, r0

200029d0 <flashrom::s_nLength>:
200029d0:	00000000 	andeq	r0, r0, r0

200029d4 <g_ip_info>:
	...

200029e0 <g_mac_address>:
200029e0:	00000000 	andeq	r0, r0, r0
	...

200029e6 <s_is_dhcp>:
	...

200029e8 <s_p>:
200029e8:	00000000 	andeq	r0, r0, r0

200029ec <s_ticker>:
200029ec:	00000000 	andeq	r0, r0, r0

200029f0 <s_mac_address>:
	...

200029f8 <s_mac_address_arp_reply>:
200029f8:	00000000 	andeq	r0, r0, r0
	...

200029fe <s_id>:
	...

20002a00 <s_recv_queue>:
	...

20003570 <s_tcb>:
	...

200035b4 <s_tcp>:
	...

20003ba0 <broadcast_mask>:
20003ba0:	00000000 	andeq	r0, r0, r0

20003ba4 <gw_ip>:
20003ba4:	00000000 	andeq	r0, r0, r0

20003ba8 <on_network_mask>:
20003ba8:	00000000 	andeq	r0, r0, r0

20003bac <s_id>:
20003bac:	00000000 	andeq	r0, r0, r0

20003bb0 <s_ports_allowed>:
	...

20003bd0 <s_recv_queue>:
	...

20009870 <s_send_packet>:
	...

20009e5c <MDNS::s_nRemoteIp>:
20009e5c:	00000000 	andeq	r0, r0, r0

20009e60 <MDNS::s_nRemotePort>:
20009e60:	00000000 	andeq	r0, r0, r0

20009e64 <MDNS::s_nMulticastIp>:
20009e64:	00000000 	andeq	r0, r0, r0

20009e68 <MDNS::s_AnswerLocalIp>:
	...

2000a06c <MDNS::s_ServiceRecords>:
	...

2000a08c <MDNS::s_nBytesReceived>:
2000a08c:	00000000 	andeq	r0, r0, r0

2000a090 <MDNS::s_ServiceRecordsData>:
	...

2000a294 <MDNS::s_pName>:
2000a294:	00000000 	andeq	r0, r0, r0

2000a298 <MDNS::s_pBuffer>:
2000a298:	00000000 	andeq	r0, r0, r0

2000a29c <Network::s_pThis>:
2000a29c:	00000000 	andeq	r0, r0, r0

2000a2a0 <NetworkParams::m_tNetworkParams>:
	...

2000a300 <s_arp_announce>:
	...

2000a32c <s_arp_reply>:
	...

2000a358 <s_arp_request>:
	...

2000a384 <s_arp_records>:
	...

2000a504 <s_entry_current>:
2000a504:	00000000 	andeq	r0, r0, r0

2000a508 <s_dhcp_allocated_gw>:
2000a508:	00000000 	andeq	r0, r0, r0

2000a50c <s_dhcp_allocated_ip>:
2000a50c:	00000000 	andeq	r0, r0, r0

2000a510 <s_dhcp_allocated_netmask>:
2000a510:	00000000 	andeq	r0, r0, r0

2000a514 <s_dhcp_message>:
	...

2000a738 <s_dhcp_server_ip>:
2000a738:	00000000 	andeq	r0, r0, r0

2000a73c <s_groups>:
	...

2000a85c <s_id>:
2000a85c:	00000000 	andeq	r0, r0, r0

2000a860 <s_joins_allowed_index>:
2000a860:	00000000 	andeq	r0, r0, r0

2000a864 <s_leave>:
	...

2000a894 <s_multicast_mac>:
	...

2000a89c <s_report>:
	...

2000a8cc <DisplayUdf::s_pThis>:
2000a8cc:	00000000 	andeq	r0, r0, r0

2000a8d0 <PropertiesConfig::s_Config>:
2000a8d0:	00000000 	andeq	r0, r0, r0

2000a8d4 <Display::s_pThis>:
2000a8d4:	00000000 	andeq	r0, r0, r0

2000a8d8 <_ClearBuffer>:
	...

2000a960 <Ssd1306::s_pThis>:
2000a960:	00000000 	andeq	r0, r0, r0

2000a964 <FirmwareVersion::s_FirmwareVersion>:
	...

2000a97a <FirmwareVersion::s_Print>:
	...

2000a9bc <FirmwareVersion::s_pThis>:
2000a9bc:	00000000 	andeq	r0, r0, r0

2000a9c0 <LedBlink::s_pThis>:
2000a9c0:	00000000 	andeq	r0, r0, r0

2000a9c4 <Hardware::s_pThis>:
2000a9c4:	00000000 	andeq	r0, r0, r0

2000a9c8 <last.0>:
	...

2000a9d0 <s_micros>:
	...

2000a9d8 <set_timer>:
2000a9d8:	00000000 	andeq	r0, r0, r0

2000a9dc <s_nSysTickMillis>:
2000a9dc:	00000000 	andeq	r0, r0, r0

2000a9e0 <enet_init_status>:
2000a9e0:	00000000 	andeq	r0, r0, r0

2000a9e4 <s_nAddress>:
2000a9e4:	00000000 	andeq	r0, r0, r0

2000a9e8 <s_TxBuffer>:
	...

200129e8 <dma_current_ptp_rxdesc>:
200129e8:	00000000 	andeq	r0, r0, r0

200129ec <dma_current_ptp_txdesc>:
200129ec:	00000000 	andeq	r0, r0, r0

200129f0 <dma_current_rxdesc>:
200129f0:	00000000 	andeq	r0, r0, r0

200129f4 <dma_current_txdesc>:
200129f4:	00000000 	andeq	r0, r0, r0

200129f8 <enet_initpara>:
	...

20012a34 <rx_buff>:
	...

20014dec <rxdesc_tab>:
	...

20014e4c <tx_buff>:
	...

20015a34 <txdesc_tab>:
	...

Disassembly of section .heap:

20016000 <heap_low>:
	...

Disassembly of section .stack:

20016800 <_sp-0x1800>:
	...
