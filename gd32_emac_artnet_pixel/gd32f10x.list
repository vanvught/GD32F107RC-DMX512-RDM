
build_gd32/main.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08007000 <__gVectors>:
 8007000:	20018000 	andcs	r8, r1, r0
 8007004:	08007e8d 	stmdaeq	r0, {r0, r2, r3, r7, r9, sl, fp, ip, sp, lr}
 8007008:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800700c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007010:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007014:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007018:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
	...
 800702c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007030:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007034:	00000000 	andeq	r0, r0, r0
 8007038:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800703c:	08014a65 	stmdaeq	r1, {r0, r2, r5, r6, r9, fp, lr}
 8007040:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007044:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007048:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800704c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007050:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007054:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007058:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800705c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007060:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007064:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007068:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800706c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007070:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007074:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007078:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800707c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007080:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007084:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007088:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800708c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007090:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007094:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007098:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800709c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070a0:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070a4:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070a8:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070ac:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070b0:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070b4:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070b8:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070bc:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070c0:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070c4:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070c8:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070cc:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070d0:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070d4:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070d8:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070dc:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070e0:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070e4:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070e8:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070ec:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070f0:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070f4:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
	...
 8007100:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007104:	00000000 	andeq	r0, r0, r0
 8007108:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800710c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007110:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007114:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007118:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800711c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007120:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007124:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007128:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800712c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007130:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007134:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007138:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800713c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007140:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007144:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007148:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800714c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}

Disassembly of section .text:

08007150 <__aeabi_d2f>:
 8007150:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007154:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8007158:	bf24      	itt	cs
 800715a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800715e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8007162:	d90d      	bls.n	8007180 <__aeabi_d2f+0x30>
 8007164:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8007168:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800716c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8007170:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8007174:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8007178:	bf08      	it	eq
 800717a:	f020 0001 	biceq.w	r0, r0, #1
 800717e:	4770      	bx	lr
 8007180:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8007184:	d121      	bne.n	80071ca <__aeabi_d2f+0x7a>
 8007186:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800718a:	bfbc      	itt	lt
 800718c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8007190:	4770      	bxlt	lr
 8007192:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007196:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800719a:	f1c2 0218 	rsb	r2, r2, #24
 800719e:	f1c2 0c20 	rsb	ip, r2, #32
 80071a2:	fa10 f30c 	lsls.w	r3, r0, ip
 80071a6:	fa20 f002 	lsr.w	r0, r0, r2
 80071aa:	bf18      	it	ne
 80071ac:	f040 0001 	orrne.w	r0, r0, #1
 80071b0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80071b4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80071b8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80071bc:	ea40 000c 	orr.w	r0, r0, ip
 80071c0:	fa23 f302 	lsr.w	r3, r3, r2
 80071c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80071c8:	e7cc      	b.n	8007164 <__aeabi_d2f+0x14>
 80071ca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80071ce:	d107      	bne.n	80071e0 <__aeabi_d2f+0x90>
 80071d0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80071d4:	bf1e      	ittt	ne
 80071d6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80071da:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80071de:	4770      	bxne	lr
 80071e0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80071e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80071e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop

080071f0 <__aeabi_frsub>:
 80071f0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80071f4:	e002      	b.n	80071fc <__addsf3>
 80071f6:	bf00      	nop

080071f8 <__aeabi_fsub>:
 80071f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080071fc <__addsf3>:
 80071fc:	0042      	lsls	r2, r0, #1
 80071fe:	bf1f      	itttt	ne
 8007200:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8007204:	ea92 0f03 	teqne	r2, r3
 8007208:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800720c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007210:	d06a      	beq.n	80072e8 <__addsf3+0xec>
 8007212:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8007216:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800721a:	bfc1      	itttt	gt
 800721c:	18d2      	addgt	r2, r2, r3
 800721e:	4041      	eorgt	r1, r0
 8007220:	4048      	eorgt	r0, r1
 8007222:	4041      	eorgt	r1, r0
 8007224:	bfb8      	it	lt
 8007226:	425b      	neglt	r3, r3
 8007228:	2b19      	cmp	r3, #25
 800722a:	bf88      	it	hi
 800722c:	4770      	bxhi	lr
 800722e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8007232:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007236:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800723a:	bf18      	it	ne
 800723c:	4240      	negne	r0, r0
 800723e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007242:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8007246:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800724a:	bf18      	it	ne
 800724c:	4249      	negne	r1, r1
 800724e:	ea92 0f03 	teq	r2, r3
 8007252:	d03f      	beq.n	80072d4 <__addsf3+0xd8>
 8007254:	f1a2 0201 	sub.w	r2, r2, #1
 8007258:	fa41 fc03 	asr.w	ip, r1, r3
 800725c:	eb10 000c 	adds.w	r0, r0, ip
 8007260:	f1c3 0320 	rsb	r3, r3, #32
 8007264:	fa01 f103 	lsl.w	r1, r1, r3
 8007268:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800726c:	d502      	bpl.n	8007274 <__addsf3+0x78>
 800726e:	4249      	negs	r1, r1
 8007270:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8007274:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8007278:	d313      	bcc.n	80072a2 <__addsf3+0xa6>
 800727a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800727e:	d306      	bcc.n	800728e <__addsf3+0x92>
 8007280:	0840      	lsrs	r0, r0, #1
 8007282:	ea4f 0131 	mov.w	r1, r1, rrx
 8007286:	f102 0201 	add.w	r2, r2, #1
 800728a:	2afe      	cmp	r2, #254	; 0xfe
 800728c:	d251      	bcs.n	8007332 <__addsf3+0x136>
 800728e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8007292:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8007296:	bf08      	it	eq
 8007298:	f020 0001 	biceq.w	r0, r0, #1
 800729c:	ea40 0003 	orr.w	r0, r0, r3
 80072a0:	4770      	bx	lr
 80072a2:	0049      	lsls	r1, r1, #1
 80072a4:	eb40 0000 	adc.w	r0, r0, r0
 80072a8:	3a01      	subs	r2, #1
 80072aa:	bf28      	it	cs
 80072ac:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80072b0:	d2ed      	bcs.n	800728e <__addsf3+0x92>
 80072b2:	fab0 fc80 	clz	ip, r0
 80072b6:	f1ac 0c08 	sub.w	ip, ip, #8
 80072ba:	ebb2 020c 	subs.w	r2, r2, ip
 80072be:	fa00 f00c 	lsl.w	r0, r0, ip
 80072c2:	bfaa      	itet	ge
 80072c4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80072c8:	4252      	neglt	r2, r2
 80072ca:	4318      	orrge	r0, r3
 80072cc:	bfbc      	itt	lt
 80072ce:	40d0      	lsrlt	r0, r2
 80072d0:	4318      	orrlt	r0, r3
 80072d2:	4770      	bx	lr
 80072d4:	f092 0f00 	teq	r2, #0
 80072d8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80072dc:	bf06      	itte	eq
 80072de:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80072e2:	3201      	addeq	r2, #1
 80072e4:	3b01      	subne	r3, #1
 80072e6:	e7b5      	b.n	8007254 <__addsf3+0x58>
 80072e8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80072ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80072f0:	bf18      	it	ne
 80072f2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80072f6:	d021      	beq.n	800733c <__addsf3+0x140>
 80072f8:	ea92 0f03 	teq	r2, r3
 80072fc:	d004      	beq.n	8007308 <__addsf3+0x10c>
 80072fe:	f092 0f00 	teq	r2, #0
 8007302:	bf08      	it	eq
 8007304:	4608      	moveq	r0, r1
 8007306:	4770      	bx	lr
 8007308:	ea90 0f01 	teq	r0, r1
 800730c:	bf1c      	itt	ne
 800730e:	2000      	movne	r0, #0
 8007310:	4770      	bxne	lr
 8007312:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8007316:	d104      	bne.n	8007322 <__addsf3+0x126>
 8007318:	0040      	lsls	r0, r0, #1
 800731a:	bf28      	it	cs
 800731c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8007320:	4770      	bx	lr
 8007322:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8007326:	bf3c      	itt	cc
 8007328:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800732c:	4770      	bxcc	lr
 800732e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8007332:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8007336:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800733a:	4770      	bx	lr
 800733c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8007340:	bf16      	itet	ne
 8007342:	4608      	movne	r0, r1
 8007344:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8007348:	4601      	movne	r1, r0
 800734a:	0242      	lsls	r2, r0, #9
 800734c:	bf06      	itte	eq
 800734e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8007352:	ea90 0f01 	teqeq	r0, r1
 8007356:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800735a:	4770      	bx	lr

0800735c <__aeabi_ui2f>:
 800735c:	f04f 0300 	mov.w	r3, #0
 8007360:	e004      	b.n	800736c <__aeabi_i2f+0x8>
 8007362:	bf00      	nop

08007364 <__aeabi_i2f>:
 8007364:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8007368:	bf48      	it	mi
 800736a:	4240      	negmi	r0, r0
 800736c:	ea5f 0c00 	movs.w	ip, r0
 8007370:	bf08      	it	eq
 8007372:	4770      	bxeq	lr
 8007374:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8007378:	4601      	mov	r1, r0
 800737a:	f04f 0000 	mov.w	r0, #0
 800737e:	e01c      	b.n	80073ba <__aeabi_l2f+0x2a>

08007380 <__aeabi_ul2f>:
 8007380:	ea50 0201 	orrs.w	r2, r0, r1
 8007384:	bf08      	it	eq
 8007386:	4770      	bxeq	lr
 8007388:	f04f 0300 	mov.w	r3, #0
 800738c:	e00a      	b.n	80073a4 <__aeabi_l2f+0x14>
 800738e:	bf00      	nop

08007390 <__aeabi_l2f>:
 8007390:	ea50 0201 	orrs.w	r2, r0, r1
 8007394:	bf08      	it	eq
 8007396:	4770      	bxeq	lr
 8007398:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800739c:	d502      	bpl.n	80073a4 <__aeabi_l2f+0x14>
 800739e:	4240      	negs	r0, r0
 80073a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80073a4:	ea5f 0c01 	movs.w	ip, r1
 80073a8:	bf02      	ittt	eq
 80073aa:	4684      	moveq	ip, r0
 80073ac:	4601      	moveq	r1, r0
 80073ae:	2000      	moveq	r0, #0
 80073b0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80073b4:	bf08      	it	eq
 80073b6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80073ba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80073be:	fabc f28c 	clz	r2, ip
 80073c2:	3a08      	subs	r2, #8
 80073c4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80073c8:	db10      	blt.n	80073ec <__aeabi_l2f+0x5c>
 80073ca:	fa01 fc02 	lsl.w	ip, r1, r2
 80073ce:	4463      	add	r3, ip
 80073d0:	fa00 fc02 	lsl.w	ip, r0, r2
 80073d4:	f1c2 0220 	rsb	r2, r2, #32
 80073d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80073dc:	fa20 f202 	lsr.w	r2, r0, r2
 80073e0:	eb43 0002 	adc.w	r0, r3, r2
 80073e4:	bf08      	it	eq
 80073e6:	f020 0001 	biceq.w	r0, r0, #1
 80073ea:	4770      	bx	lr
 80073ec:	f102 0220 	add.w	r2, r2, #32
 80073f0:	fa01 fc02 	lsl.w	ip, r1, r2
 80073f4:	f1c2 0220 	rsb	r2, r2, #32
 80073f8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80073fc:	fa21 f202 	lsr.w	r2, r1, r2
 8007400:	eb43 0002 	adc.w	r0, r3, r2
 8007404:	bf08      	it	eq
 8007406:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800740a:	4770      	bx	lr

0800740c <__gesf2>:
 800740c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007410:	e006      	b.n	8007420 <__cmpsf2+0x4>
 8007412:	bf00      	nop

08007414 <__lesf2>:
 8007414:	f04f 0c01 	mov.w	ip, #1
 8007418:	e002      	b.n	8007420 <__cmpsf2+0x4>
 800741a:	bf00      	nop

0800741c <__cmpsf2>:
 800741c:	f04f 0c01 	mov.w	ip, #1
 8007420:	f84d cd04 	str.w	ip, [sp, #-4]!
 8007424:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8007428:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800742c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007430:	bf18      	it	ne
 8007432:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007436:	d011      	beq.n	800745c <__cmpsf2+0x40>
 8007438:	b001      	add	sp, #4
 800743a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800743e:	bf18      	it	ne
 8007440:	ea90 0f01 	teqne	r0, r1
 8007444:	bf58      	it	pl
 8007446:	ebb2 0003 	subspl.w	r0, r2, r3
 800744a:	bf88      	it	hi
 800744c:	17c8      	asrhi	r0, r1, #31
 800744e:	bf38      	it	cc
 8007450:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8007454:	bf18      	it	ne
 8007456:	f040 0001 	orrne.w	r0, r0, #1
 800745a:	4770      	bx	lr
 800745c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007460:	d102      	bne.n	8007468 <__cmpsf2+0x4c>
 8007462:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8007466:	d105      	bne.n	8007474 <__cmpsf2+0x58>
 8007468:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800746c:	d1e4      	bne.n	8007438 <__cmpsf2+0x1c>
 800746e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8007472:	d0e1      	beq.n	8007438 <__cmpsf2+0x1c>
 8007474:	f85d 0b04 	ldr.w	r0, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop

0800747c <__aeabi_cfrcmple>:
 800747c:	4684      	mov	ip, r0
 800747e:	4608      	mov	r0, r1
 8007480:	4661      	mov	r1, ip
 8007482:	e7ff      	b.n	8007484 <__aeabi_cfcmpeq>

08007484 <__aeabi_cfcmpeq>:
 8007484:	b50f      	push	{r0, r1, r2, r3, lr}
 8007486:	f7ff ffc9 	bl	800741c <__cmpsf2>
 800748a:	2800      	cmp	r0, #0
 800748c:	bf48      	it	mi
 800748e:	f110 0f00 	cmnmi.w	r0, #0
 8007492:	bd0f      	pop	{r0, r1, r2, r3, pc}

08007494 <__aeabi_fcmpeq>:
 8007494:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007498:	f7ff fff4 	bl	8007484 <__aeabi_cfcmpeq>
 800749c:	bf0c      	ite	eq
 800749e:	2001      	moveq	r0, #1
 80074a0:	2000      	movne	r0, #0
 80074a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80074a6:	bf00      	nop

080074a8 <__aeabi_fcmplt>:
 80074a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80074ac:	f7ff ffea 	bl	8007484 <__aeabi_cfcmpeq>
 80074b0:	bf34      	ite	cc
 80074b2:	2001      	movcc	r0, #1
 80074b4:	2000      	movcs	r0, #0
 80074b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80074ba:	bf00      	nop

080074bc <__aeabi_fcmple>:
 80074bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80074c0:	f7ff ffe0 	bl	8007484 <__aeabi_cfcmpeq>
 80074c4:	bf94      	ite	ls
 80074c6:	2001      	movls	r0, #1
 80074c8:	2000      	movhi	r0, #0
 80074ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80074ce:	bf00      	nop

080074d0 <__aeabi_fcmpge>:
 80074d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80074d4:	f7ff ffd2 	bl	800747c <__aeabi_cfrcmple>
 80074d8:	bf94      	ite	ls
 80074da:	2001      	movls	r0, #1
 80074dc:	2000      	movhi	r0, #0
 80074de:	f85d fb08 	ldr.w	pc, [sp], #8
 80074e2:	bf00      	nop

080074e4 <__aeabi_fcmpgt>:
 80074e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80074e8:	f7ff ffc8 	bl	800747c <__aeabi_cfrcmple>
 80074ec:	bf34      	ite	cc
 80074ee:	2001      	movcc	r0, #1
 80074f0:	2000      	movcs	r0, #0
 80074f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80074f6:	bf00      	nop

080074f8 <__aeabi_f2iz>:
 80074f8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80074fc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8007500:	d30f      	bcc.n	8007522 <__aeabi_f2iz+0x2a>
 8007502:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8007506:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800750a:	d90d      	bls.n	8007528 <__aeabi_f2iz+0x30>
 800750c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8007510:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007514:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8007518:	fa23 f002 	lsr.w	r0, r3, r2
 800751c:	bf18      	it	ne
 800751e:	4240      	negne	r0, r0
 8007520:	4770      	bx	lr
 8007522:	f04f 0000 	mov.w	r0, #0
 8007526:	4770      	bx	lr
 8007528:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800752c:	d101      	bne.n	8007532 <__aeabi_f2iz+0x3a>
 800752e:	0242      	lsls	r2, r0, #9
 8007530:	d105      	bne.n	800753e <__aeabi_f2iz+0x46>
 8007532:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8007536:	bf08      	it	eq
 8007538:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800753c:	4770      	bx	lr
 800753e:	f04f 0000 	mov.w	r0, #0
 8007542:	4770      	bx	lr

08007544 <__aeabi_uldivmod>:
 8007544:	b953      	cbnz	r3, 800755c <__aeabi_uldivmod+0x18>
 8007546:	b94a      	cbnz	r2, 800755c <__aeabi_uldivmod+0x18>
 8007548:	2900      	cmp	r1, #0
 800754a:	bf08      	it	eq
 800754c:	2800      	cmpeq	r0, #0
 800754e:	bf1c      	itt	ne
 8007550:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8007554:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8007558:	f000 b976 	b.w	8007848 <__aeabi_idiv0>
 800755c:	f1ad 0c08 	sub.w	ip, sp, #8
 8007560:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8007564:	f000 f806 	bl	8007574 <__udivmoddi4>
 8007568:	f8dd e004 	ldr.w	lr, [sp, #4]
 800756c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007570:	b004      	add	sp, #16
 8007572:	4770      	bx	lr

08007574 <__udivmoddi4>:
 8007574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007578:	9e08      	ldr	r6, [sp, #32]
 800757a:	460d      	mov	r5, r1
 800757c:	4604      	mov	r4, r0
 800757e:	4688      	mov	r8, r1
 8007580:	2b00      	cmp	r3, #0
 8007582:	d14d      	bne.n	8007620 <__udivmoddi4+0xac>
 8007584:	428a      	cmp	r2, r1
 8007586:	4694      	mov	ip, r2
 8007588:	d968      	bls.n	800765c <__udivmoddi4+0xe8>
 800758a:	fab2 f282 	clz	r2, r2
 800758e:	b152      	cbz	r2, 80075a6 <__udivmoddi4+0x32>
 8007590:	fa01 f302 	lsl.w	r3, r1, r2
 8007594:	f1c2 0120 	rsb	r1, r2, #32
 8007598:	fa20 f101 	lsr.w	r1, r0, r1
 800759c:	fa0c fc02 	lsl.w	ip, ip, r2
 80075a0:	ea41 0803 	orr.w	r8, r1, r3
 80075a4:	4094      	lsls	r4, r2
 80075a6:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80075aa:	fbb8 f7f1 	udiv	r7, r8, r1
 80075ae:	fa1f fe8c 	uxth.w	lr, ip
 80075b2:	fb01 8817 	mls	r8, r1, r7, r8
 80075b6:	fb07 f00e 	mul.w	r0, r7, lr
 80075ba:	0c23      	lsrs	r3, r4, #16
 80075bc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80075c0:	4298      	cmp	r0, r3
 80075c2:	d90a      	bls.n	80075da <__udivmoddi4+0x66>
 80075c4:	eb1c 0303 	adds.w	r3, ip, r3
 80075c8:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 80075cc:	f080 811e 	bcs.w	800780c <__udivmoddi4+0x298>
 80075d0:	4298      	cmp	r0, r3
 80075d2:	f240 811b 	bls.w	800780c <__udivmoddi4+0x298>
 80075d6:	3f02      	subs	r7, #2
 80075d8:	4463      	add	r3, ip
 80075da:	1a1b      	subs	r3, r3, r0
 80075dc:	fbb3 f0f1 	udiv	r0, r3, r1
 80075e0:	fb01 3310 	mls	r3, r1, r0, r3
 80075e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80075e8:	b2a4      	uxth	r4, r4
 80075ea:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80075ee:	45a6      	cmp	lr, r4
 80075f0:	d90a      	bls.n	8007608 <__udivmoddi4+0x94>
 80075f2:	eb1c 0404 	adds.w	r4, ip, r4
 80075f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80075fa:	f080 8109 	bcs.w	8007810 <__udivmoddi4+0x29c>
 80075fe:	45a6      	cmp	lr, r4
 8007600:	f240 8106 	bls.w	8007810 <__udivmoddi4+0x29c>
 8007604:	4464      	add	r4, ip
 8007606:	3802      	subs	r0, #2
 8007608:	2100      	movs	r1, #0
 800760a:	eba4 040e 	sub.w	r4, r4, lr
 800760e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8007612:	b11e      	cbz	r6, 800761c <__udivmoddi4+0xa8>
 8007614:	2300      	movs	r3, #0
 8007616:	40d4      	lsrs	r4, r2
 8007618:	e9c6 4300 	strd	r4, r3, [r6]
 800761c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007620:	428b      	cmp	r3, r1
 8007622:	d908      	bls.n	8007636 <__udivmoddi4+0xc2>
 8007624:	2e00      	cmp	r6, #0
 8007626:	f000 80ee 	beq.w	8007806 <__udivmoddi4+0x292>
 800762a:	2100      	movs	r1, #0
 800762c:	e9c6 0500 	strd	r0, r5, [r6]
 8007630:	4608      	mov	r0, r1
 8007632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007636:	fab3 f183 	clz	r1, r3
 800763a:	2900      	cmp	r1, #0
 800763c:	d14a      	bne.n	80076d4 <__udivmoddi4+0x160>
 800763e:	42ab      	cmp	r3, r5
 8007640:	d302      	bcc.n	8007648 <__udivmoddi4+0xd4>
 8007642:	4282      	cmp	r2, r0
 8007644:	f200 80fc 	bhi.w	8007840 <__udivmoddi4+0x2cc>
 8007648:	1a84      	subs	r4, r0, r2
 800764a:	eb65 0303 	sbc.w	r3, r5, r3
 800764e:	2001      	movs	r0, #1
 8007650:	4698      	mov	r8, r3
 8007652:	2e00      	cmp	r6, #0
 8007654:	d0e2      	beq.n	800761c <__udivmoddi4+0xa8>
 8007656:	e9c6 4800 	strd	r4, r8, [r6]
 800765a:	e7df      	b.n	800761c <__udivmoddi4+0xa8>
 800765c:	b902      	cbnz	r2, 8007660 <__udivmoddi4+0xec>
 800765e:	deff      	udf	#255	; 0xff
 8007660:	fab2 f282 	clz	r2, r2
 8007664:	2a00      	cmp	r2, #0
 8007666:	f040 8091 	bne.w	800778c <__udivmoddi4+0x218>
 800766a:	eba1 000c 	sub.w	r0, r1, ip
 800766e:	2101      	movs	r1, #1
 8007670:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8007674:	fa1f fe8c 	uxth.w	lr, ip
 8007678:	fbb0 f3f7 	udiv	r3, r0, r7
 800767c:	fb07 0013 	mls	r0, r7, r3, r0
 8007680:	0c25      	lsrs	r5, r4, #16
 8007682:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8007686:	fb0e f003 	mul.w	r0, lr, r3
 800768a:	42a8      	cmp	r0, r5
 800768c:	d908      	bls.n	80076a0 <__udivmoddi4+0x12c>
 800768e:	eb1c 0505 	adds.w	r5, ip, r5
 8007692:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8007696:	d202      	bcs.n	800769e <__udivmoddi4+0x12a>
 8007698:	42a8      	cmp	r0, r5
 800769a:	f200 80ce 	bhi.w	800783a <__udivmoddi4+0x2c6>
 800769e:	4643      	mov	r3, r8
 80076a0:	1a2d      	subs	r5, r5, r0
 80076a2:	fbb5 f0f7 	udiv	r0, r5, r7
 80076a6:	fb07 5510 	mls	r5, r7, r0, r5
 80076aa:	fb0e fe00 	mul.w	lr, lr, r0
 80076ae:	b2a4      	uxth	r4, r4
 80076b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80076b4:	45a6      	cmp	lr, r4
 80076b6:	d908      	bls.n	80076ca <__udivmoddi4+0x156>
 80076b8:	eb1c 0404 	adds.w	r4, ip, r4
 80076bc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80076c0:	d202      	bcs.n	80076c8 <__udivmoddi4+0x154>
 80076c2:	45a6      	cmp	lr, r4
 80076c4:	f200 80b6 	bhi.w	8007834 <__udivmoddi4+0x2c0>
 80076c8:	4628      	mov	r0, r5
 80076ca:	eba4 040e 	sub.w	r4, r4, lr
 80076ce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80076d2:	e79e      	b.n	8007612 <__udivmoddi4+0x9e>
 80076d4:	f1c1 0720 	rsb	r7, r1, #32
 80076d8:	408b      	lsls	r3, r1
 80076da:	fa22 fc07 	lsr.w	ip, r2, r7
 80076de:	ea4c 0c03 	orr.w	ip, ip, r3
 80076e2:	fa25 fa07 	lsr.w	sl, r5, r7
 80076e6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80076ea:	fbba f8f9 	udiv	r8, sl, r9
 80076ee:	fa20 f307 	lsr.w	r3, r0, r7
 80076f2:	fb09 aa18 	mls	sl, r9, r8, sl
 80076f6:	408d      	lsls	r5, r1
 80076f8:	fa1f fe8c 	uxth.w	lr, ip
 80076fc:	431d      	orrs	r5, r3
 80076fe:	fa00 f301 	lsl.w	r3, r0, r1
 8007702:	fb08 f00e 	mul.w	r0, r8, lr
 8007706:	0c2c      	lsrs	r4, r5, #16
 8007708:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800770c:	42a0      	cmp	r0, r4
 800770e:	fa02 f201 	lsl.w	r2, r2, r1
 8007712:	d90b      	bls.n	800772c <__udivmoddi4+0x1b8>
 8007714:	eb1c 0404 	adds.w	r4, ip, r4
 8007718:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800771c:	f080 8088 	bcs.w	8007830 <__udivmoddi4+0x2bc>
 8007720:	42a0      	cmp	r0, r4
 8007722:	f240 8085 	bls.w	8007830 <__udivmoddi4+0x2bc>
 8007726:	f1a8 0802 	sub.w	r8, r8, #2
 800772a:	4464      	add	r4, ip
 800772c:	1a24      	subs	r4, r4, r0
 800772e:	fbb4 f0f9 	udiv	r0, r4, r9
 8007732:	fb09 4410 	mls	r4, r9, r0, r4
 8007736:	fb00 fe0e 	mul.w	lr, r0, lr
 800773a:	b2ad      	uxth	r5, r5
 800773c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8007740:	45a6      	cmp	lr, r4
 8007742:	d908      	bls.n	8007756 <__udivmoddi4+0x1e2>
 8007744:	eb1c 0404 	adds.w	r4, ip, r4
 8007748:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800774c:	d26c      	bcs.n	8007828 <__udivmoddi4+0x2b4>
 800774e:	45a6      	cmp	lr, r4
 8007750:	d96a      	bls.n	8007828 <__udivmoddi4+0x2b4>
 8007752:	3802      	subs	r0, #2
 8007754:	4464      	add	r4, ip
 8007756:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800775a:	fba0 9502 	umull	r9, r5, r0, r2
 800775e:	eba4 040e 	sub.w	r4, r4, lr
 8007762:	42ac      	cmp	r4, r5
 8007764:	46c8      	mov	r8, r9
 8007766:	46ae      	mov	lr, r5
 8007768:	d356      	bcc.n	8007818 <__udivmoddi4+0x2a4>
 800776a:	d053      	beq.n	8007814 <__udivmoddi4+0x2a0>
 800776c:	2e00      	cmp	r6, #0
 800776e:	d069      	beq.n	8007844 <__udivmoddi4+0x2d0>
 8007770:	ebb3 0208 	subs.w	r2, r3, r8
 8007774:	eb64 040e 	sbc.w	r4, r4, lr
 8007778:	fa22 f301 	lsr.w	r3, r2, r1
 800777c:	fa04 f707 	lsl.w	r7, r4, r7
 8007780:	431f      	orrs	r7, r3
 8007782:	40cc      	lsrs	r4, r1
 8007784:	e9c6 7400 	strd	r7, r4, [r6]
 8007788:	2100      	movs	r1, #0
 800778a:	e747      	b.n	800761c <__udivmoddi4+0xa8>
 800778c:	fa0c fc02 	lsl.w	ip, ip, r2
 8007790:	f1c2 0120 	rsb	r1, r2, #32
 8007794:	fa25 f301 	lsr.w	r3, r5, r1
 8007798:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800779c:	fa20 f101 	lsr.w	r1, r0, r1
 80077a0:	4095      	lsls	r5, r2
 80077a2:	430d      	orrs	r5, r1
 80077a4:	fbb3 f1f7 	udiv	r1, r3, r7
 80077a8:	fb07 3311 	mls	r3, r7, r1, r3
 80077ac:	fa1f fe8c 	uxth.w	lr, ip
 80077b0:	0c28      	lsrs	r0, r5, #16
 80077b2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80077b6:	fb01 f30e 	mul.w	r3, r1, lr
 80077ba:	4283      	cmp	r3, r0
 80077bc:	fa04 f402 	lsl.w	r4, r4, r2
 80077c0:	d908      	bls.n	80077d4 <__udivmoddi4+0x260>
 80077c2:	eb1c 0000 	adds.w	r0, ip, r0
 80077c6:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80077ca:	d22f      	bcs.n	800782c <__udivmoddi4+0x2b8>
 80077cc:	4283      	cmp	r3, r0
 80077ce:	d92d      	bls.n	800782c <__udivmoddi4+0x2b8>
 80077d0:	3902      	subs	r1, #2
 80077d2:	4460      	add	r0, ip
 80077d4:	1ac0      	subs	r0, r0, r3
 80077d6:	fbb0 f3f7 	udiv	r3, r0, r7
 80077da:	fb07 0013 	mls	r0, r7, r3, r0
 80077de:	b2ad      	uxth	r5, r5
 80077e0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80077e4:	fb03 f00e 	mul.w	r0, r3, lr
 80077e8:	42a8      	cmp	r0, r5
 80077ea:	d908      	bls.n	80077fe <__udivmoddi4+0x28a>
 80077ec:	eb1c 0505 	adds.w	r5, ip, r5
 80077f0:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80077f4:	d216      	bcs.n	8007824 <__udivmoddi4+0x2b0>
 80077f6:	42a8      	cmp	r0, r5
 80077f8:	d914      	bls.n	8007824 <__udivmoddi4+0x2b0>
 80077fa:	3b02      	subs	r3, #2
 80077fc:	4465      	add	r5, ip
 80077fe:	1a28      	subs	r0, r5, r0
 8007800:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8007804:	e738      	b.n	8007678 <__udivmoddi4+0x104>
 8007806:	4631      	mov	r1, r6
 8007808:	4630      	mov	r0, r6
 800780a:	e707      	b.n	800761c <__udivmoddi4+0xa8>
 800780c:	462f      	mov	r7, r5
 800780e:	e6e4      	b.n	80075da <__udivmoddi4+0x66>
 8007810:	4618      	mov	r0, r3
 8007812:	e6f9      	b.n	8007608 <__udivmoddi4+0x94>
 8007814:	454b      	cmp	r3, r9
 8007816:	d2a9      	bcs.n	800776c <__udivmoddi4+0x1f8>
 8007818:	ebb9 0802 	subs.w	r8, r9, r2
 800781c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8007820:	3801      	subs	r0, #1
 8007822:	e7a3      	b.n	800776c <__udivmoddi4+0x1f8>
 8007824:	4643      	mov	r3, r8
 8007826:	e7ea      	b.n	80077fe <__udivmoddi4+0x28a>
 8007828:	4628      	mov	r0, r5
 800782a:	e794      	b.n	8007756 <__udivmoddi4+0x1e2>
 800782c:	4641      	mov	r1, r8
 800782e:	e7d1      	b.n	80077d4 <__udivmoddi4+0x260>
 8007830:	46d0      	mov	r8, sl
 8007832:	e77b      	b.n	800772c <__udivmoddi4+0x1b8>
 8007834:	4464      	add	r4, ip
 8007836:	3802      	subs	r0, #2
 8007838:	e747      	b.n	80076ca <__udivmoddi4+0x156>
 800783a:	3b02      	subs	r3, #2
 800783c:	4465      	add	r5, ip
 800783e:	e72f      	b.n	80076a0 <__udivmoddi4+0x12c>
 8007840:	4608      	mov	r0, r1
 8007842:	e706      	b.n	8007652 <__udivmoddi4+0xde>
 8007844:	4631      	mov	r1, r6
 8007846:	e6e9      	b.n	800761c <__udivmoddi4+0xa8>

08007848 <__aeabi_idiv0>:
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop

0800784c <__aeabi_drsub>:
 800784c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8007850:	e002      	b.n	8007858 <__adddf3>
 8007852:	bf00      	nop

08007854 <__aeabi_dsub>:
 8007854:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08007858 <__adddf3>:
 8007858:	b530      	push	{r4, r5, lr}
 800785a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800785e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8007862:	ea94 0f05 	teq	r4, r5
 8007866:	bf08      	it	eq
 8007868:	ea90 0f02 	teqeq	r0, r2
 800786c:	bf1f      	itttt	ne
 800786e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8007872:	ea55 0c02 	orrsne.w	ip, r5, r2
 8007876:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800787a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800787e:	f000 80e2 	beq.w	8007a46 <__adddf3+0x1ee>
 8007882:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8007886:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800788a:	bfb8      	it	lt
 800788c:	426d      	neglt	r5, r5
 800788e:	dd0c      	ble.n	80078aa <__adddf3+0x52>
 8007890:	442c      	add	r4, r5
 8007892:	ea80 0202 	eor.w	r2, r0, r2
 8007896:	ea81 0303 	eor.w	r3, r1, r3
 800789a:	ea82 0000 	eor.w	r0, r2, r0
 800789e:	ea83 0101 	eor.w	r1, r3, r1
 80078a2:	ea80 0202 	eor.w	r2, r0, r2
 80078a6:	ea81 0303 	eor.w	r3, r1, r3
 80078aa:	2d36      	cmp	r5, #54	; 0x36
 80078ac:	bf88      	it	hi
 80078ae:	bd30      	pophi	{r4, r5, pc}
 80078b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80078b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80078b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80078bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80078c0:	d002      	beq.n	80078c8 <__adddf3+0x70>
 80078c2:	4240      	negs	r0, r0
 80078c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80078c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80078cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80078d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80078d4:	d002      	beq.n	80078dc <__adddf3+0x84>
 80078d6:	4252      	negs	r2, r2
 80078d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80078dc:	ea94 0f05 	teq	r4, r5
 80078e0:	f000 80a7 	beq.w	8007a32 <__adddf3+0x1da>
 80078e4:	f1a4 0401 	sub.w	r4, r4, #1
 80078e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80078ec:	db0d      	blt.n	800790a <__adddf3+0xb2>
 80078ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80078f2:	fa22 f205 	lsr.w	r2, r2, r5
 80078f6:	1880      	adds	r0, r0, r2
 80078f8:	f141 0100 	adc.w	r1, r1, #0
 80078fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8007900:	1880      	adds	r0, r0, r2
 8007902:	fa43 f305 	asr.w	r3, r3, r5
 8007906:	4159      	adcs	r1, r3
 8007908:	e00e      	b.n	8007928 <__adddf3+0xd0>
 800790a:	f1a5 0520 	sub.w	r5, r5, #32
 800790e:	f10e 0e20 	add.w	lr, lr, #32
 8007912:	2a01      	cmp	r2, #1
 8007914:	fa03 fc0e 	lsl.w	ip, r3, lr
 8007918:	bf28      	it	cs
 800791a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800791e:	fa43 f305 	asr.w	r3, r3, r5
 8007922:	18c0      	adds	r0, r0, r3
 8007924:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8007928:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800792c:	d507      	bpl.n	800793e <__adddf3+0xe6>
 800792e:	f04f 0e00 	mov.w	lr, #0
 8007932:	f1dc 0c00 	rsbs	ip, ip, #0
 8007936:	eb7e 0000 	sbcs.w	r0, lr, r0
 800793a:	eb6e 0101 	sbc.w	r1, lr, r1
 800793e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007942:	d31b      	bcc.n	800797c <__adddf3+0x124>
 8007944:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007948:	d30c      	bcc.n	8007964 <__adddf3+0x10c>
 800794a:	0849      	lsrs	r1, r1, #1
 800794c:	ea5f 0030 	movs.w	r0, r0, rrx
 8007950:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8007954:	f104 0401 	add.w	r4, r4, #1
 8007958:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800795c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8007960:	f080 809a 	bcs.w	8007a98 <__adddf3+0x240>
 8007964:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007968:	bf08      	it	eq
 800796a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800796e:	f150 0000 	adcs.w	r0, r0, #0
 8007972:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007976:	ea41 0105 	orr.w	r1, r1, r5
 800797a:	bd30      	pop	{r4, r5, pc}
 800797c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8007980:	4140      	adcs	r0, r0
 8007982:	eb41 0101 	adc.w	r1, r1, r1
 8007986:	3c01      	subs	r4, #1
 8007988:	bf28      	it	cs
 800798a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800798e:	d2e9      	bcs.n	8007964 <__adddf3+0x10c>
 8007990:	f091 0f00 	teq	r1, #0
 8007994:	bf04      	itt	eq
 8007996:	4601      	moveq	r1, r0
 8007998:	2000      	moveq	r0, #0
 800799a:	fab1 f381 	clz	r3, r1
 800799e:	bf08      	it	eq
 80079a0:	3320      	addeq	r3, #32
 80079a2:	f1a3 030b 	sub.w	r3, r3, #11
 80079a6:	f1b3 0220 	subs.w	r2, r3, #32
 80079aa:	da0c      	bge.n	80079c6 <__adddf3+0x16e>
 80079ac:	320c      	adds	r2, #12
 80079ae:	dd08      	ble.n	80079c2 <__adddf3+0x16a>
 80079b0:	f102 0c14 	add.w	ip, r2, #20
 80079b4:	f1c2 020c 	rsb	r2, r2, #12
 80079b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80079bc:	fa21 f102 	lsr.w	r1, r1, r2
 80079c0:	e00c      	b.n	80079dc <__adddf3+0x184>
 80079c2:	f102 0214 	add.w	r2, r2, #20
 80079c6:	bfd8      	it	le
 80079c8:	f1c2 0c20 	rsble	ip, r2, #32
 80079cc:	fa01 f102 	lsl.w	r1, r1, r2
 80079d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80079d4:	bfdc      	itt	le
 80079d6:	ea41 010c 	orrle.w	r1, r1, ip
 80079da:	4090      	lslle	r0, r2
 80079dc:	1ae4      	subs	r4, r4, r3
 80079de:	bfa2      	ittt	ge
 80079e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80079e4:	4329      	orrge	r1, r5
 80079e6:	bd30      	popge	{r4, r5, pc}
 80079e8:	ea6f 0404 	mvn.w	r4, r4
 80079ec:	3c1f      	subs	r4, #31
 80079ee:	da1c      	bge.n	8007a2a <__adddf3+0x1d2>
 80079f0:	340c      	adds	r4, #12
 80079f2:	dc0e      	bgt.n	8007a12 <__adddf3+0x1ba>
 80079f4:	f104 0414 	add.w	r4, r4, #20
 80079f8:	f1c4 0220 	rsb	r2, r4, #32
 80079fc:	fa20 f004 	lsr.w	r0, r0, r4
 8007a00:	fa01 f302 	lsl.w	r3, r1, r2
 8007a04:	ea40 0003 	orr.w	r0, r0, r3
 8007a08:	fa21 f304 	lsr.w	r3, r1, r4
 8007a0c:	ea45 0103 	orr.w	r1, r5, r3
 8007a10:	bd30      	pop	{r4, r5, pc}
 8007a12:	f1c4 040c 	rsb	r4, r4, #12
 8007a16:	f1c4 0220 	rsb	r2, r4, #32
 8007a1a:	fa20 f002 	lsr.w	r0, r0, r2
 8007a1e:	fa01 f304 	lsl.w	r3, r1, r4
 8007a22:	ea40 0003 	orr.w	r0, r0, r3
 8007a26:	4629      	mov	r1, r5
 8007a28:	bd30      	pop	{r4, r5, pc}
 8007a2a:	fa21 f004 	lsr.w	r0, r1, r4
 8007a2e:	4629      	mov	r1, r5
 8007a30:	bd30      	pop	{r4, r5, pc}
 8007a32:	f094 0f00 	teq	r4, #0
 8007a36:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8007a3a:	bf06      	itte	eq
 8007a3c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8007a40:	3401      	addeq	r4, #1
 8007a42:	3d01      	subne	r5, #1
 8007a44:	e74e      	b.n	80078e4 <__adddf3+0x8c>
 8007a46:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007a4a:	bf18      	it	ne
 8007a4c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007a50:	d029      	beq.n	8007aa6 <__adddf3+0x24e>
 8007a52:	ea94 0f05 	teq	r4, r5
 8007a56:	bf08      	it	eq
 8007a58:	ea90 0f02 	teqeq	r0, r2
 8007a5c:	d005      	beq.n	8007a6a <__adddf3+0x212>
 8007a5e:	ea54 0c00 	orrs.w	ip, r4, r0
 8007a62:	bf04      	itt	eq
 8007a64:	4619      	moveq	r1, r3
 8007a66:	4610      	moveq	r0, r2
 8007a68:	bd30      	pop	{r4, r5, pc}
 8007a6a:	ea91 0f03 	teq	r1, r3
 8007a6e:	bf1e      	ittt	ne
 8007a70:	2100      	movne	r1, #0
 8007a72:	2000      	movne	r0, #0
 8007a74:	bd30      	popne	{r4, r5, pc}
 8007a76:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8007a7a:	d105      	bne.n	8007a88 <__adddf3+0x230>
 8007a7c:	0040      	lsls	r0, r0, #1
 8007a7e:	4149      	adcs	r1, r1
 8007a80:	bf28      	it	cs
 8007a82:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8007a86:	bd30      	pop	{r4, r5, pc}
 8007a88:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8007a8c:	bf3c      	itt	cc
 8007a8e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8007a92:	bd30      	popcc	{r4, r5, pc}
 8007a94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007a98:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8007a9c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007aa0:	f04f 0000 	mov.w	r0, #0
 8007aa4:	bd30      	pop	{r4, r5, pc}
 8007aa6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007aaa:	bf1a      	itte	ne
 8007aac:	4619      	movne	r1, r3
 8007aae:	4610      	movne	r0, r2
 8007ab0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8007ab4:	bf1c      	itt	ne
 8007ab6:	460b      	movne	r3, r1
 8007ab8:	4602      	movne	r2, r0
 8007aba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007abe:	bf06      	itte	eq
 8007ac0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8007ac4:	ea91 0f03 	teqeq	r1, r3
 8007ac8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8007acc:	bd30      	pop	{r4, r5, pc}
 8007ace:	bf00      	nop

08007ad0 <__aeabi_ui2d>:
 8007ad0:	f090 0f00 	teq	r0, #0
 8007ad4:	bf04      	itt	eq
 8007ad6:	2100      	moveq	r1, #0
 8007ad8:	4770      	bxeq	lr
 8007ada:	b530      	push	{r4, r5, lr}
 8007adc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007ae0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007ae4:	f04f 0500 	mov.w	r5, #0
 8007ae8:	f04f 0100 	mov.w	r1, #0
 8007aec:	e750      	b.n	8007990 <__adddf3+0x138>
 8007aee:	bf00      	nop

08007af0 <__aeabi_i2d>:
 8007af0:	f090 0f00 	teq	r0, #0
 8007af4:	bf04      	itt	eq
 8007af6:	2100      	moveq	r1, #0
 8007af8:	4770      	bxeq	lr
 8007afa:	b530      	push	{r4, r5, lr}
 8007afc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007b00:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007b04:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8007b08:	bf48      	it	mi
 8007b0a:	4240      	negmi	r0, r0
 8007b0c:	f04f 0100 	mov.w	r1, #0
 8007b10:	e73e      	b.n	8007990 <__adddf3+0x138>
 8007b12:	bf00      	nop

08007b14 <__aeabi_f2d>:
 8007b14:	0042      	lsls	r2, r0, #1
 8007b16:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8007b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8007b1e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8007b22:	bf1f      	itttt	ne
 8007b24:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8007b28:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007b2c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8007b30:	4770      	bxne	lr
 8007b32:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8007b36:	bf08      	it	eq
 8007b38:	4770      	bxeq	lr
 8007b3a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8007b3e:	bf04      	itt	eq
 8007b40:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8007b44:	4770      	bxeq	lr
 8007b46:	b530      	push	{r4, r5, lr}
 8007b48:	f44f 7460 	mov.w	r4, #896	; 0x380
 8007b4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007b50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007b54:	e71c      	b.n	8007990 <__adddf3+0x138>
 8007b56:	bf00      	nop

08007b58 <__aeabi_ul2d>:
 8007b58:	ea50 0201 	orrs.w	r2, r0, r1
 8007b5c:	bf08      	it	eq
 8007b5e:	4770      	bxeq	lr
 8007b60:	b530      	push	{r4, r5, lr}
 8007b62:	f04f 0500 	mov.w	r5, #0
 8007b66:	e00a      	b.n	8007b7e <__aeabi_l2d+0x16>

08007b68 <__aeabi_l2d>:
 8007b68:	ea50 0201 	orrs.w	r2, r0, r1
 8007b6c:	bf08      	it	eq
 8007b6e:	4770      	bxeq	lr
 8007b70:	b530      	push	{r4, r5, lr}
 8007b72:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8007b76:	d502      	bpl.n	8007b7e <__aeabi_l2d+0x16>
 8007b78:	4240      	negs	r0, r0
 8007b7a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007b7e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007b82:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007b86:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8007b8a:	f43f aed8 	beq.w	800793e <__adddf3+0xe6>
 8007b8e:	f04f 0203 	mov.w	r2, #3
 8007b92:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007b96:	bf18      	it	ne
 8007b98:	3203      	addne	r2, #3
 8007b9a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007b9e:	bf18      	it	ne
 8007ba0:	3203      	addne	r2, #3
 8007ba2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8007ba6:	f1c2 0320 	rsb	r3, r2, #32
 8007baa:	fa00 fc03 	lsl.w	ip, r0, r3
 8007bae:	fa20 f002 	lsr.w	r0, r0, r2
 8007bb2:	fa01 fe03 	lsl.w	lr, r1, r3
 8007bb6:	ea40 000e 	orr.w	r0, r0, lr
 8007bba:	fa21 f102 	lsr.w	r1, r1, r2
 8007bbe:	4414      	add	r4, r2
 8007bc0:	e6bd      	b.n	800793e <__adddf3+0xe6>
 8007bc2:	bf00      	nop

08007bc4 <__aeabi_fmul>:
 8007bc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007bc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8007bcc:	bf1e      	ittt	ne
 8007bce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8007bd2:	ea92 0f0c 	teqne	r2, ip
 8007bd6:	ea93 0f0c 	teqne	r3, ip
 8007bda:	d06f      	beq.n	8007cbc <__aeabi_fmul+0xf8>
 8007bdc:	441a      	add	r2, r3
 8007bde:	ea80 0c01 	eor.w	ip, r0, r1
 8007be2:	0240      	lsls	r0, r0, #9
 8007be4:	bf18      	it	ne
 8007be6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8007bea:	d01e      	beq.n	8007c2a <__aeabi_fmul+0x66>
 8007bec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007bf0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8007bf4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8007bf8:	fba0 3101 	umull	r3, r1, r0, r1
 8007bfc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8007c00:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8007c04:	bf3e      	ittt	cc
 8007c06:	0049      	lslcc	r1, r1, #1
 8007c08:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8007c0c:	005b      	lslcc	r3, r3, #1
 8007c0e:	ea40 0001 	orr.w	r0, r0, r1
 8007c12:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8007c16:	2afd      	cmp	r2, #253	; 0xfd
 8007c18:	d81d      	bhi.n	8007c56 <__aeabi_fmul+0x92>
 8007c1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8007c22:	bf08      	it	eq
 8007c24:	f020 0001 	biceq.w	r0, r0, #1
 8007c28:	4770      	bx	lr
 8007c2a:	f090 0f00 	teq	r0, #0
 8007c2e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8007c32:	bf08      	it	eq
 8007c34:	0249      	lsleq	r1, r1, #9
 8007c36:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8007c3a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8007c3e:	3a7f      	subs	r2, #127	; 0x7f
 8007c40:	bfc2      	ittt	gt
 8007c42:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8007c46:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8007c4a:	4770      	bxgt	lr
 8007c4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007c50:	f04f 0300 	mov.w	r3, #0
 8007c54:	3a01      	subs	r2, #1
 8007c56:	dc5d      	bgt.n	8007d14 <__aeabi_fmul+0x150>
 8007c58:	f112 0f19 	cmn.w	r2, #25
 8007c5c:	bfdc      	itt	le
 8007c5e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8007c62:	4770      	bxle	lr
 8007c64:	f1c2 0200 	rsb	r2, r2, #0
 8007c68:	0041      	lsls	r1, r0, #1
 8007c6a:	fa21 f102 	lsr.w	r1, r1, r2
 8007c6e:	f1c2 0220 	rsb	r2, r2, #32
 8007c72:	fa00 fc02 	lsl.w	ip, r0, r2
 8007c76:	ea5f 0031 	movs.w	r0, r1, rrx
 8007c7a:	f140 0000 	adc.w	r0, r0, #0
 8007c7e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8007c82:	bf08      	it	eq
 8007c84:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8007c88:	4770      	bx	lr
 8007c8a:	f092 0f00 	teq	r2, #0
 8007c8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8007c92:	bf02      	ittt	eq
 8007c94:	0040      	lsleq	r0, r0, #1
 8007c96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8007c9a:	3a01      	subeq	r2, #1
 8007c9c:	d0f9      	beq.n	8007c92 <__aeabi_fmul+0xce>
 8007c9e:	ea40 000c 	orr.w	r0, r0, ip
 8007ca2:	f093 0f00 	teq	r3, #0
 8007ca6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8007caa:	bf02      	ittt	eq
 8007cac:	0049      	lsleq	r1, r1, #1
 8007cae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8007cb2:	3b01      	subeq	r3, #1
 8007cb4:	d0f9      	beq.n	8007caa <__aeabi_fmul+0xe6>
 8007cb6:	ea41 010c 	orr.w	r1, r1, ip
 8007cba:	e78f      	b.n	8007bdc <__aeabi_fmul+0x18>
 8007cbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8007cc0:	ea92 0f0c 	teq	r2, ip
 8007cc4:	bf18      	it	ne
 8007cc6:	ea93 0f0c 	teqne	r3, ip
 8007cca:	d00a      	beq.n	8007ce2 <__aeabi_fmul+0x11e>
 8007ccc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8007cd0:	bf18      	it	ne
 8007cd2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8007cd6:	d1d8      	bne.n	8007c8a <__aeabi_fmul+0xc6>
 8007cd8:	ea80 0001 	eor.w	r0, r0, r1
 8007cdc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007ce0:	4770      	bx	lr
 8007ce2:	f090 0f00 	teq	r0, #0
 8007ce6:	bf17      	itett	ne
 8007ce8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8007cec:	4608      	moveq	r0, r1
 8007cee:	f091 0f00 	teqne	r1, #0
 8007cf2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8007cf6:	d014      	beq.n	8007d22 <__aeabi_fmul+0x15e>
 8007cf8:	ea92 0f0c 	teq	r2, ip
 8007cfc:	d101      	bne.n	8007d02 <__aeabi_fmul+0x13e>
 8007cfe:	0242      	lsls	r2, r0, #9
 8007d00:	d10f      	bne.n	8007d22 <__aeabi_fmul+0x15e>
 8007d02:	ea93 0f0c 	teq	r3, ip
 8007d06:	d103      	bne.n	8007d10 <__aeabi_fmul+0x14c>
 8007d08:	024b      	lsls	r3, r1, #9
 8007d0a:	bf18      	it	ne
 8007d0c:	4608      	movne	r0, r1
 8007d0e:	d108      	bne.n	8007d22 <__aeabi_fmul+0x15e>
 8007d10:	ea80 0001 	eor.w	r0, r0, r1
 8007d14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007d18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8007d1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007d20:	4770      	bx	lr
 8007d22:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8007d26:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8007d2a:	4770      	bx	lr

08007d2c <__aeabi_fdiv>:
 8007d2c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007d30:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8007d34:	bf1e      	ittt	ne
 8007d36:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8007d3a:	ea92 0f0c 	teqne	r2, ip
 8007d3e:	ea93 0f0c 	teqne	r3, ip
 8007d42:	d069      	beq.n	8007e18 <__aeabi_fdiv+0xec>
 8007d44:	eba2 0203 	sub.w	r2, r2, r3
 8007d48:	ea80 0c01 	eor.w	ip, r0, r1
 8007d4c:	0249      	lsls	r1, r1, #9
 8007d4e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8007d52:	d037      	beq.n	8007dc4 <__aeabi_fdiv+0x98>
 8007d54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007d58:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8007d5c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8007d60:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8007d64:	428b      	cmp	r3, r1
 8007d66:	bf38      	it	cc
 8007d68:	005b      	lslcc	r3, r3, #1
 8007d6a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8007d6e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8007d72:	428b      	cmp	r3, r1
 8007d74:	bf24      	itt	cs
 8007d76:	1a5b      	subcs	r3, r3, r1
 8007d78:	ea40 000c 	orrcs.w	r0, r0, ip
 8007d7c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8007d80:	bf24      	itt	cs
 8007d82:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8007d86:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8007d8a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8007d8e:	bf24      	itt	cs
 8007d90:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8007d94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8007d98:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8007d9c:	bf24      	itt	cs
 8007d9e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8007da2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8007da6:	011b      	lsls	r3, r3, #4
 8007da8:	bf18      	it	ne
 8007daa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8007dae:	d1e0      	bne.n	8007d72 <__aeabi_fdiv+0x46>
 8007db0:	2afd      	cmp	r2, #253	; 0xfd
 8007db2:	f63f af50 	bhi.w	8007c56 <__aeabi_fmul+0x92>
 8007db6:	428b      	cmp	r3, r1
 8007db8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8007dbc:	bf08      	it	eq
 8007dbe:	f020 0001 	biceq.w	r0, r0, #1
 8007dc2:	4770      	bx	lr
 8007dc4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8007dc8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8007dcc:	327f      	adds	r2, #127	; 0x7f
 8007dce:	bfc2      	ittt	gt
 8007dd0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8007dd4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8007dd8:	4770      	bxgt	lr
 8007dda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007dde:	f04f 0300 	mov.w	r3, #0
 8007de2:	3a01      	subs	r2, #1
 8007de4:	e737      	b.n	8007c56 <__aeabi_fmul+0x92>
 8007de6:	f092 0f00 	teq	r2, #0
 8007dea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8007dee:	bf02      	ittt	eq
 8007df0:	0040      	lsleq	r0, r0, #1
 8007df2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8007df6:	3a01      	subeq	r2, #1
 8007df8:	d0f9      	beq.n	8007dee <__aeabi_fdiv+0xc2>
 8007dfa:	ea40 000c 	orr.w	r0, r0, ip
 8007dfe:	f093 0f00 	teq	r3, #0
 8007e02:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8007e06:	bf02      	ittt	eq
 8007e08:	0049      	lsleq	r1, r1, #1
 8007e0a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8007e0e:	3b01      	subeq	r3, #1
 8007e10:	d0f9      	beq.n	8007e06 <__aeabi_fdiv+0xda>
 8007e12:	ea41 010c 	orr.w	r1, r1, ip
 8007e16:	e795      	b.n	8007d44 <__aeabi_fdiv+0x18>
 8007e18:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8007e1c:	ea92 0f0c 	teq	r2, ip
 8007e20:	d108      	bne.n	8007e34 <__aeabi_fdiv+0x108>
 8007e22:	0242      	lsls	r2, r0, #9
 8007e24:	f47f af7d 	bne.w	8007d22 <__aeabi_fmul+0x15e>
 8007e28:	ea93 0f0c 	teq	r3, ip
 8007e2c:	f47f af70 	bne.w	8007d10 <__aeabi_fmul+0x14c>
 8007e30:	4608      	mov	r0, r1
 8007e32:	e776      	b.n	8007d22 <__aeabi_fmul+0x15e>
 8007e34:	ea93 0f0c 	teq	r3, ip
 8007e38:	d104      	bne.n	8007e44 <__aeabi_fdiv+0x118>
 8007e3a:	024b      	lsls	r3, r1, #9
 8007e3c:	f43f af4c 	beq.w	8007cd8 <__aeabi_fmul+0x114>
 8007e40:	4608      	mov	r0, r1
 8007e42:	e76e      	b.n	8007d22 <__aeabi_fmul+0x15e>
 8007e44:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8007e48:	bf18      	it	ne
 8007e4a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8007e4e:	d1ca      	bne.n	8007de6 <__aeabi_fdiv+0xba>
 8007e50:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8007e54:	f47f af5c 	bne.w	8007d10 <__aeabi_fmul+0x14c>
 8007e58:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8007e5c:	f47f af3c 	bne.w	8007cd8 <__aeabi_fmul+0x114>
 8007e60:	e75f      	b.n	8007d22 <__aeabi_fmul+0x15e>
 8007e62:	bf00      	nop

08007e64 <__popcountsi2>:
 8007e64:	0843      	lsrs	r3, r0, #1
 8007e66:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8007e6a:	1ac0      	subs	r0, r0, r3
 8007e6c:	0883      	lsrs	r3, r0, #2
 8007e6e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8007e72:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8007e76:	4418      	add	r0, r3
 8007e78:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8007e7c:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8007e80:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8007e84:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8007e88:	0e00      	lsrs	r0, r0, #24
 8007e8a:	4770      	bx	lr

08007e8c <Reset_Handler>:
 8007e8c:	480c      	ldr	r0, [pc, #48]	; (8007ec0 <Zerobss+0x10>)
 8007e8e:	4685      	mov	sp, r0
 8007e90:	2100      	movs	r1, #0
 8007e92:	e003      	b.n	8007e9c <DataInit>

08007e94 <CopyData>:
 8007e94:	4b0b      	ldr	r3, [pc, #44]	; (8007ec4 <Zerobss+0x14>)
 8007e96:	585b      	ldr	r3, [r3, r1]
 8007e98:	5043      	str	r3, [r0, r1]
 8007e9a:	3104      	adds	r1, #4

08007e9c <DataInit>:
 8007e9c:	480a      	ldr	r0, [pc, #40]	; (8007ec8 <Zerobss+0x18>)
 8007e9e:	4b0b      	ldr	r3, [pc, #44]	; (8007ecc <Zerobss+0x1c>)
 8007ea0:	1842      	adds	r2, r0, r1
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d3f6      	bcc.n	8007e94 <CopyData>
 8007ea6:	4a0a      	ldr	r2, [pc, #40]	; (8007ed0 <Zerobss+0x20>)
 8007ea8:	e002      	b.n	8007eb0 <Zerobss>

08007eaa <FillZerobss>:
 8007eaa:	2300      	movs	r3, #0
 8007eac:	f842 3b04 	str.w	r3, [r2], #4

08007eb0 <Zerobss>:
 8007eb0:	4b08      	ldr	r3, [pc, #32]	; (8007ed4 <Zerobss+0x24>)
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d3f9      	bcc.n	8007eaa <FillZerobss>
 8007eb6:	f00c fddd 	bl	8014a74 <SystemInit>
 8007eba:	f000 f9d5 	bl	8008268 <main>
 8007ebe:	4770      	bx	lr
 8007ec0:	20018000 	andcs	r8, r1, r0
 8007ec4:	08018bc0 	stmdaeq	r1, {r6, r7, r8, r9, fp, pc}
 8007ec8:	20000000 	andcs	r0, r0, r0
 8007ecc:	200000e4 	andcs	r0, r0, r4, ror #1
 8007ed0:	200000e8 	andcs	r0, r0, r8, ror #1
 8007ed4:	20015a54 	andcs	r5, r1, r4, asr sl

08007ed8 <ADC0_1_IRQHandler>:
 8007ed8:	e7fe      	b.n	8007ed8 <ADC0_1_IRQHandler>

08007eda <DisplayHandler::~DisplayHandler()>:
 8007eda:	4770      	bx	lr

08007edc <DisplayUdfHandler::~DisplayUdfHandler()>:
 8007edc:	4770      	bx	lr

08007ede <DisplayUdfHandler::ShowLongName(char const*)>:
 8007ede:	4770      	bx	lr

08007ee0 <ArtNetTriggerHandler::~ArtNetTriggerHandler()>:
 8007ee0:	4770      	bx	lr

08007ee2 <PixelDmxStartStop::~PixelDmxStartStop()>:
 8007ee2:	4770      	bx	lr

08007ee4 <PixelDmxStartStop::Start()>:
 8007ee4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ee8:	4b01      	ldr	r3, [pc, #4]	; (8007ef0 <PixelDmxStartStop::Start()+0xc>)
 8007eea:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 8007eee:	4770      	bx	lr
 8007ef0:	40010000 	andmi	r0, r1, r0

08007ef4 <PixelDmxStartStop::Stop()>:
 8007ef4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ef8:	4b01      	ldr	r3, [pc, #4]	; (8007f00 <PixelDmxStartStop::Stop()+0xc>)
 8007efa:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8007efe:	4770      	bx	lr
 8007f00:	40010000 	andmi	r0, r1, r0

08007f04 <Reboot::~Reboot()>:
 8007f04:	4770      	bx	lr
	...

08007f08 <Reboot::Run()>:
 8007f08:	b508      	push	{r3, lr}
 8007f0a:	4b05      	ldr	r3, [pc, #20]	; (8007f20 <Reboot::Run()+0x18>)
 8007f0c:	6818      	ldr	r0, [r3, #0]
 8007f0e:	f001 f8bf 	bl	8009090 <ArtNetNode::Stop()>
 8007f12:	4b04      	ldr	r3, [pc, #16]	; (8007f24 <Reboot::Run()+0x1c>)
 8007f14:	6818      	ldr	r0, [r3, #0]
 8007f16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007f1a:	f006 ba33 	b.w	800e384 <WS28xx::Blackout()>
 8007f1e:	bf00      	nop
 8007f20:	20001900 	andcs	r1, r0, r0, lsl #18
 8007f24:	20001958 	andcs	r1, r0, r8, asr r9

08007f28 <Reboot::~Reboot()>:
 8007f28:	b510      	push	{r4, lr}
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	f00c fb4a 	bl	80145c4 <operator delete(void*)>
 8007f30:	4620      	mov	r0, r4
 8007f32:	bd10      	pop	{r4, pc}

08007f34 <DisplayHandler::~DisplayHandler()>:
 8007f34:	b510      	push	{r4, lr}
 8007f36:	4604      	mov	r4, r0
 8007f38:	f00c fb44 	bl	80145c4 <operator delete(void*)>
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	bd10      	pop	{r4, pc}

08007f40 <DisplayUdfHandler::~DisplayUdfHandler()>:
 8007f40:	b510      	push	{r4, lr}
 8007f42:	4604      	mov	r4, r0
 8007f44:	f00c fb3e 	bl	80145c4 <operator delete(void*)>
 8007f48:	4620      	mov	r0, r4
 8007f4a:	bd10      	pop	{r4, pc}

08007f4c <ArtNetTriggerHandler::~ArtNetTriggerHandler()>:
 8007f4c:	b510      	push	{r4, lr}
 8007f4e:	4604      	mov	r4, r0
 8007f50:	f00c fb38 	bl	80145c4 <operator delete(void*)>
 8007f54:	4620      	mov	r0, r4
 8007f56:	bd10      	pop	{r4, pc}

08007f58 <PixelDmxStartStop::~PixelDmxStartStop()>:
 8007f58:	b510      	push	{r4, lr}
 8007f5a:	4604      	mov	r4, r0
 8007f5c:	f00c fb32 	bl	80145c4 <operator delete(void*)>
 8007f60:	4620      	mov	r0, r4
 8007f62:	bd10      	pop	{r4, pc}

08007f64 <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)>:
 8007f64:	4b02      	ldr	r3, [pc, #8]	; (8007f70 <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)+0xc>)
 8007f66:	6819      	ldr	r1, [r3, #0]
 8007f68:	4b02      	ldr	r3, [pc, #8]	; (8007f74 <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)+0x10>)
 8007f6a:	6818      	ldr	r0, [r3, #0]
 8007f6c:	f00b bac2 	b.w	80134f4 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8007f70:	20001900 	andcs	r1, r0, r0, lsl #18
 8007f74:	2000a8cc 	andcs	sl, r0, ip, asr #17

08007f78 <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)>:
 8007f78:	4b02      	ldr	r3, [pc, #8]	; (8007f84 <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)+0xc>)
 8007f7a:	6819      	ldr	r1, [r3, #0]
 8007f7c:	4b02      	ldr	r3, [pc, #8]	; (8007f88 <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)+0x10>)
 8007f7e:	6818      	ldr	r0, [r3, #0]
 8007f80:	f00b bab8 	b.w	80134f4 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8007f84:	20001900 	andcs	r1, r0, r0, lsl #18
 8007f88:	2000a8cc 	andcs	sl, r0, ip, asr #17

08007f8c <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)>:
 8007f8c:	4b02      	ldr	r3, [pc, #8]	; (8007f98 <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)+0xc>)
 8007f8e:	6819      	ldr	r1, [r3, #0]
 8007f90:	4b02      	ldr	r3, [pc, #8]	; (8007f9c <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)+0x10>)
 8007f92:	6818      	ldr	r0, [r3, #0]
 8007f94:	f00b baae 	b.w	80134f4 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8007f98:	20001900 	andcs	r1, r0, r0, lsl #18
 8007f9c:	2000a8cc 	andcs	sl, r0, ip, asr #17

08007fa0 <DisplayUdfHandler::ShowNetSwitch(unsigned char)>:
 8007fa0:	4b02      	ldr	r3, [pc, #8]	; (8007fac <DisplayUdfHandler::ShowNetSwitch(unsigned char)+0xc>)
 8007fa2:	6819      	ldr	r1, [r3, #0]
 8007fa4:	4b02      	ldr	r3, [pc, #8]	; (8007fb0 <DisplayUdfHandler::ShowNetSwitch(unsigned char)+0x10>)
 8007fa6:	6818      	ldr	r0, [r3, #0]
 8007fa8:	f00b baa4 	b.w	80134f4 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8007fac:	20001900 	andcs	r1, r0, r0, lsl #18
 8007fb0:	2000a8cc 	andcs	sl, r0, ip, asr #17

08007fb4 <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)>:
 8007fb4:	4b02      	ldr	r3, [pc, #8]	; (8007fc0 <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)+0xc>)
 8007fb6:	6819      	ldr	r1, [r3, #0]
 8007fb8:	4b02      	ldr	r3, [pc, #8]	; (8007fc4 <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)+0x10>)
 8007fba:	6818      	ldr	r0, [r3, #0]
 8007fbc:	f00b ba9a 	b.w	80134f4 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8007fc0:	20001900 	andcs	r1, r0, r0, lsl #18
 8007fc4:	2000a8cc 	andcs	sl, r0, ip, asr #17

08007fc8 <DisplayUdfHandler::ShowShortName(char const*)>:
 8007fc8:	4b02      	ldr	r3, [pc, #8]	; (8007fd4 <DisplayUdfHandler::ShowShortName(char const*)+0xc>)
 8007fca:	6819      	ldr	r1, [r3, #0]
 8007fcc:	4b02      	ldr	r3, [pc, #8]	; (8007fd8 <DisplayUdfHandler::ShowShortName(char const*)+0x10>)
 8007fce:	6818      	ldr	r0, [r3, #0]
 8007fd0:	f00b ba6d 	b.w	80134ae <DisplayUdf::ShowNodeName(ArtNetNode*)>
 8007fd4:	20001900 	andcs	r1, r0, r0, lsl #18
 8007fd8:	2000a8cc 	andcs	sl, r0, ip, asr #17

08007fdc <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>:
 8007fdc:	b110      	cbz	r0, 8007fe4 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]+0x8>
 8007fde:	6803      	ldr	r3, [r0, #0]
 8007fe0:	6a1b      	ldr	r3, [r3, #32]
 8007fe2:	4718      	bx	r3
 8007fe4:	4770      	bx	lr

08007fe6 <Display::PutChar(int) [clone .isra.0]>:
 8007fe6:	b110      	cbz	r0, 8007fee <Display::PutChar(int) [clone .isra.0]+0x8>
 8007fe8:	6803      	ldr	r3, [r0, #0]
 8007fea:	695b      	ldr	r3, [r3, #20]
 8007fec:	4718      	bx	r3
 8007fee:	4770      	bx	lr

08007ff0 <DisplayHandler::Print(unsigned int)>:
 8007ff0:	b538      	push	{r3, r4, r5, lr}
 8007ff2:	7903      	ldrb	r3, [r0, #4]
 8007ff4:	b1f3      	cbz	r3, 8008034 <DisplayHandler::Print(unsigned int)+0x44>
 8007ff6:	2904      	cmp	r1, #4
 8007ff8:	bf98      	it	ls
 8007ffa:	4b0f      	ldrls	r3, [pc, #60]	; (8008038 <DisplayHandler::Print(unsigned int)+0x48>)
 8007ffc:	4d0f      	ldr	r5, [pc, #60]	; (800803c <DisplayHandler::Print(unsigned int)+0x4c>)
 8007ffe:	bf98      	it	ls
 8008000:	5c5c      	ldrbls	r4, [r3, r1]
 8008002:	682b      	ldr	r3, [r5, #0]
 8008004:	bf88      	it	hi
 8008006:	2455      	movhi	r4, #85	; 0x55
 8008008:	6998      	ldr	r0, [r3, #24]
 800800a:	b178      	cbz	r0, 800802c <DisplayHandler::Print(unsigned int)+0x3c>
 800800c:	7901      	ldrb	r1, [r0, #4]
 800800e:	3901      	subs	r1, #1
 8008010:	b2c9      	uxtb	r1, r1
 8008012:	b168      	cbz	r0, 8008030 <DisplayHandler::Print(unsigned int)+0x40>
 8008014:	7942      	ldrb	r2, [r0, #5]
 8008016:	3a01      	subs	r2, #1
 8008018:	b2d2      	uxtb	r2, r2
 800801a:	f7ff ffdf 	bl	8007fdc <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 800801e:	682b      	ldr	r3, [r5, #0]
 8008020:	4621      	mov	r1, r4
 8008022:	6998      	ldr	r0, [r3, #24]
 8008024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008028:	f7ff bfdd 	b.w	8007fe6 <Display::PutChar(int) [clone .isra.0]>
 800802c:	4601      	mov	r1, r0
 800802e:	e7ee      	b.n	800800e <DisplayHandler::Print(unsigned int)+0x1e>
 8008030:	4602      	mov	r2, r0
 8008032:	e7f0      	b.n	8008016 <DisplayHandler::Print(unsigned int)+0x26>
 8008034:	bd38      	pop	{r3, r4, r5, pc}
 8008036:	bf00      	nop
 8008038:	08016924 	stmdaeq	r1, {r2, r5, r8, fp, sp, lr}
 800803c:	2000a8d4 	ldrdcs	sl, [r0], -r4

08008040 <Display::ClearLine(unsigned char)>:
 8008040:	6980      	ldr	r0, [r0, #24]
 8008042:	b110      	cbz	r0, 800804a <Display::ClearLine(unsigned char)+0xa>
 8008044:	6803      	ldr	r3, [r0, #0]
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	4718      	bx	r3
 800804a:	4770      	bx	lr

0800804c <Display::Printf(unsigned char, char const*, ...)>:
 800804c:	b40c      	push	{r2, r3}
 800804e:	b570      	push	{r4, r5, r6, lr}
 8008050:	6984      	ldr	r4, [r0, #24]
 8008052:	4605      	mov	r5, r0
 8008054:	460e      	mov	r6, r1
 8008056:	b08a      	sub	sp, #40	; 0x28
 8008058:	b174      	cbz	r4, 8008078 <Display::Printf(unsigned char, char const*, ...)+0x2c>
 800805a:	ab0f      	add	r3, sp, #60	; 0x3c
 800805c:	2120      	movs	r1, #32
 800805e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008060:	a802      	add	r0, sp, #8
 8008062:	9301      	str	r3, [sp, #4]
 8008064:	f000 fe6a 	bl	8008d3c <vsnprintf>
 8008068:	4604      	mov	r4, r0
 800806a:	69a8      	ldr	r0, [r5, #24]
 800806c:	4631      	mov	r1, r6
 800806e:	6803      	ldr	r3, [r0, #0]
 8008070:	aa02      	add	r2, sp, #8
 8008072:	69dd      	ldr	r5, [r3, #28]
 8008074:	b2a3      	uxth	r3, r4
 8008076:	47a8      	blx	r5
 8008078:	4620      	mov	r0, r4
 800807a:	b00a      	add	sp, #40	; 0x28
 800807c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008080:	b002      	add	sp, #8
 8008082:	4770      	bx	lr

08008084 <Display::TextStatus(char const*)>:
 8008084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008088:	4604      	mov	r4, r0
 800808a:	6980      	ldr	r0, [r0, #24]
 800808c:	460d      	mov	r5, r1
 800808e:	b360      	cbz	r0, 80080ea <Display::TextStatus(char const*)+0x66>
 8008090:	7947      	ldrb	r7, [r0, #5]
 8008092:	2100      	movs	r1, #0
 8008094:	1e7e      	subs	r6, r7, #1
 8008096:	b2f6      	uxtb	r6, r6
 8008098:	4632      	mov	r2, r6
 800809a:	f890 9004 	ldrb.w	r9, [r0, #4]
 800809e:	f04f 0800 	mov.w	r8, #0
 80080a2:	f7ff ff9b 	bl	8007fdc <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 80080a6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80080aa:	45c1      	cmp	r9, r8
 80080ac:	69a0      	ldr	r0, [r4, #24]
 80080ae:	d905      	bls.n	80080bc <Display::TextStatus(char const*)+0x38>
 80080b0:	2120      	movs	r1, #32
 80080b2:	f7ff ff98 	bl	8007fe6 <Display::PutChar(int) [clone .isra.0]>
 80080b6:	f108 0801 	add.w	r8, r8, #1
 80080ba:	e7f6      	b.n	80080aa <Display::TextStatus(char const*)+0x26>
 80080bc:	4632      	mov	r2, r6
 80080be:	2100      	movs	r1, #0
 80080c0:	f7ff ff8c 	bl	8007fdc <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 80080c4:	69a0      	ldr	r0, [r4, #24]
 80080c6:	b180      	cbz	r0, 80080ea <Display::TextStatus(char const*)+0x66>
 80080c8:	2300      	movs	r3, #0
 80080ca:	7901      	ldrb	r1, [r0, #4]
 80080cc:	5cea      	ldrb	r2, [r5, r3]
 80080ce:	b11a      	cbz	r2, 80080d8 <Display::TextStatus(char const*)+0x54>
 80080d0:	1c5a      	adds	r2, r3, #1
 80080d2:	4299      	cmp	r1, r3
 80080d4:	4613      	mov	r3, r2
 80080d6:	dcf9      	bgt.n	80080cc <Display::TextStatus(char const*)+0x48>
 80080d8:	6802      	ldr	r2, [r0, #0]
 80080da:	4639      	mov	r1, r7
 80080dc:	69d4      	ldr	r4, [r2, #28]
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	462a      	mov	r2, r5
 80080e2:	46a4      	mov	ip, r4
 80080e4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080e8:	4760      	bx	ip
 80080ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080080ee <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>:
 80080ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080f0:	4605      	mov	r5, r0
 80080f2:	461e      	mov	r6, r3
 80080f4:	460f      	mov	r7, r1
 80080f6:	4614      	mov	r4, r2
 80080f8:	f7ff ffc4 	bl	8008084 <Display::TextStatus(char const*)>
 80080fc:	7c6b      	ldrb	r3, [r5, #17]
 80080fe:	b19b      	cbz	r3, 8008128 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x3a>
 8008100:	43e2      	mvns	r2, r4
 8008102:	2312      	movs	r3, #18
 8008104:	7a28      	ldrb	r0, [r5, #8]
 8008106:	f88d 3004 	strb.w	r3, [sp, #4]
 800810a:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800810e:	f88d 3005 	strb.w	r3, [sp, #5]
 8008112:	f88d 2006 	strb.w	r2, [sp, #6]
 8008116:	f00d fa4b 	bl	80155b0 <gd32_i2c_set_address(unsigned char)>
 800811a:	68e8      	ldr	r0, [r5, #12]
 800811c:	f00d fa40 	bl	80155a0 <gd32_i2c_set_baudrate(unsigned int)>
 8008120:	2103      	movs	r1, #3
 8008122:	a801      	add	r0, sp, #4
 8008124:	f00d fa4a 	bl	80155bc <gd32_i2c_write(char const*, unsigned int)>
 8008128:	1c73      	adds	r3, r6, #1
 800812a:	d006      	beq.n	800813a <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x4c>
 800812c:	4639      	mov	r1, r7
 800812e:	4630      	mov	r0, r6
 8008130:	b003      	add	sp, #12
 8008132:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8008136:	f00c b8f7 	b.w	8014328 <console_status>
 800813a:	b003      	add	sp, #12
 800813c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008140 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>:
 8008140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008142:	2905      	cmp	r1, #5
 8008144:	b085      	sub	sp, #20
 8008146:	dc46      	bgt.n	80081d6 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x96>
 8008148:	4b24      	ldr	r3, [pc, #144]	; (80081dc <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x9c>)
 800814a:	6019      	str	r1, [r3, #0]
 800814c:	2905      	cmp	r1, #5
 800814e:	d809      	bhi.n	8008164 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8008150:	e8df f001 	tbb	[pc, r1]
 8008154:	130a032c 	movwne	r0, #41772	; 0xa32c
 8008158:	2300211a 	movwcs	r2, #282	; 0x11a
 800815c:	2264      	movs	r2, #100	; 0x64
 800815e:	4619      	mov	r1, r3
 8008160:	f004 ff58 	bl	800d014 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 8008164:	2001      	movs	r0, #1
 8008166:	e037      	b.n	80081d8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x98>
 8008168:	2200      	movs	r2, #0
 800816a:	2364      	movs	r3, #100	; 0x64
 800816c:	4611      	mov	r1, r2
 800816e:	e9cd 3200 	strd	r3, r2, [sp]
 8008172:	4b1b      	ldr	r3, [pc, #108]	; (80081e0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa0>)
 8008174:	f004 ff62 	bl	800d03c <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8008178:	e7f4      	b.n	8008164 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 800817a:	2100      	movs	r1, #0
 800817c:	2364      	movs	r3, #100	; 0x64
 800817e:	4a18      	ldr	r2, [pc, #96]	; (80081e0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa0>)
 8008180:	9100      	str	r1, [sp, #0]
 8008182:	f004 ff77 	bl	800d074 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8008186:	e7ed      	b.n	8008164 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8008188:	2364      	movs	r3, #100	; 0x64
 800818a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800818e:	2100      	movs	r1, #0
 8008190:	f004 ff8a 	bl	800d0a8 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 8008194:	e7e6      	b.n	8008164 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8008196:	2200      	movs	r2, #0
 8008198:	2364      	movs	r3, #100	; 0x64
 800819a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800819e:	230a      	movs	r3, #10
 80081a0:	4611      	mov	r1, r2
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	4b0e      	ldr	r3, [pc, #56]	; (80081e0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa0>)
 80081a6:	f004 ffb1 	bl	800d10c <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 80081aa:	e7db      	b.n	8008164 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 80081ac:	2400      	movs	r4, #0
 80081ae:	4625      	mov	r5, r4
 80081b0:	4b0c      	ldr	r3, [pc, #48]	; (80081e4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa4>)
 80081b2:	4e0d      	ldr	r6, [pc, #52]	; (80081e8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa8>)
 80081b4:	4f0d      	ldr	r7, [pc, #52]	; (80081ec <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xac>)
 80081b6:	61dc      	str	r4, [r3, #28]
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	6830      	ldr	r0, [r6, #0]
 80081bc:	42a3      	cmp	r3, r4
 80081be:	d907      	bls.n	80081d0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x90>
 80081c0:	2300      	movs	r3, #0
 80081c2:	4621      	mov	r1, r4
 80081c4:	461a      	mov	r2, r3
 80081c6:	9500      	str	r5, [sp, #0]
 80081c8:	f005 fa80 	bl	800d6cc <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 80081cc:	3401      	adds	r4, #1
 80081ce:	e7f3      	b.n	80081b8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x78>
 80081d0:	f006 f8bc 	bl	800e34c <WS28xx::Update()>
 80081d4:	e7c6      	b.n	8008164 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 80081d6:	2000      	movs	r0, #0
 80081d8:	b005      	add	sp, #20
 80081da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081dc:	20001950 	andcs	r1, r0, r0, asr r9
 80081e0:	00646464 	rsbeq	r6, r4, r4, ror #8
 80081e4:	2000191c 	andcs	r1, r0, ip, lsl r9
 80081e8:	20001948 	andcs	r1, r0, r8, asr #18
 80081ec:	20001944 	andcs	r1, r0, r4, asr #18

080081f0 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)>:
 80081f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081f2:	780b      	ldrb	r3, [r1, #0]
 80081f4:	4605      	mov	r5, r0
 80081f6:	2b03      	cmp	r3, #3
 80081f8:	d11f      	bne.n	800823a <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4a>
 80081fa:	4b15      	ldr	r3, [pc, #84]	; (8008250 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x60>)
 80081fc:	784c      	ldrb	r4, [r1, #1]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	429c      	cmp	r4, r3
 8008202:	d01a      	beq.n	800823a <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4a>
 8008204:	4b13      	ldr	r3, [pc, #76]	; (8008254 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x64>)
 8008206:	4621      	mov	r1, r4
 8008208:	6818      	ldr	r0, [r3, #0]
 800820a:	f7ff ff99 	bl	8008140 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 800820e:	b1a0      	cbz	r0, 800823a <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4a>
 8008210:	4b11      	ldr	r3, [pc, #68]	; (8008258 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x68>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	b19c      	cbz	r4, 800823e <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4e>
 8008216:	2200      	movs	r2, #0
 8008218:	4d10      	ldr	r5, [pc, #64]	; (800825c <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x6c>)
 800821a:	609a      	str	r2, [r3, #8]
 800821c:	2106      	movs	r1, #6
 800821e:	6828      	ldr	r0, [r5, #0]
 8008220:	f7ff ff0e 	bl	8008040 <Display::ClearLine(unsigned char)>
 8008224:	4620      	mov	r0, r4
 8008226:	682d      	ldr	r5, [r5, #0]
 8008228:	f004 fee8 	bl	800cffc <PixelPatterns::GetName(pixelpatterns::Pattern)>
 800822c:	2106      	movs	r1, #6
 800822e:	4603      	mov	r3, r0
 8008230:	4a0b      	ldr	r2, [pc, #44]	; (8008260 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x70>)
 8008232:	4628      	mov	r0, r5
 8008234:	9400      	str	r4, [sp, #0]
 8008236:	f7ff ff09 	bl	800804c <Display::Printf(unsigned char, char const*, ...)>
 800823a:	b003      	add	sp, #12
 800823c:	bd30      	pop	{r4, r5, pc}
 800823e:	686a      	ldr	r2, [r5, #4]
 8008240:	609a      	str	r2, [r3, #8]
 8008242:	4b08      	ldr	r3, [pc, #32]	; (8008264 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x74>)
 8008244:	6818      	ldr	r0, [r3, #0]
 8008246:	b003      	add	sp, #12
 8008248:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800824c:	f00a beca 	b.w	8012fe4 <DisplayUdf::Show()>
 8008250:	20001950 	andcs	r1, r0, r0, asr r9
 8008254:	2000194c 	andcs	r1, r0, ip, asr #18
 8008258:	20001900 	andcs	r1, r0, r0, lsl #18
 800825c:	2000a8d4 	ldrdcs	sl, [r0], -r4
 8008260:	08016809 	stmdaeq	r1, {r0, r3, fp, sp, lr}
 8008264:	2000a8cc 	andcs	sl, r0, ip, asr #17

08008268 <main>:
 8008268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800826c:	2701      	movs	r7, #1
 800826e:	f5ad 5db7 	sub.w	sp, sp, #5856	; 0x16e0
 8008272:	b085      	sub	sp, #20
 8008274:	ad14      	add	r5, sp, #80	; 0x50
 8008276:	f1a5 0014 	sub.w	r0, r5, #20
 800827a:	f00c f8f7 	bl	801446c <Hardware::Hardware()>
 800827e:	a88d      	add	r0, sp, #564	; 0x234
 8008280:	f009 fb50 	bl	8011924 <Network::Network()>
 8008284:	a817      	add	r0, sp, #92	; 0x5c
 8008286:	f00c f8ad 	bl	80143e4 <LedBlink::LedBlink()>
 800828a:	a854      	add	r0, sp, #336	; 0x150
 800828c:	f00a fdea 	bl	8012e64 <DisplayUdf::DisplayUdf()>
 8008290:	ac0c      	add	r4, sp, #48	; 0x30
 8008292:	4a71      	ldr	r2, [pc, #452]	; (8008458 <main+0x1f0>)
 8008294:	4b71      	ldr	r3, [pc, #452]	; (800845c <main+0x1f4>)
 8008296:	4972      	ldr	r1, [pc, #456]	; (8008460 <main+0x1f8>)
 8008298:	a807      	add	r0, sp, #28
 800829a:	f00c f85d 	bl	8014358 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
 800829e:	f1a4 0010 	sub.w	r0, r4, #16
 80082a2:	f007 ff19 	bl	80100d8 <FlashRom::FlashRom()>
 80082a6:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008464 <main+0x1fc>
 80082aa:	a809      	add	r0, sp, #36	; 0x24
 80082ac:	f007 fb0e 	bl	800f8cc <SpiFlashStore::SpiFlashStore()>
 80082b0:	496d      	ldr	r1, [pc, #436]	; (8008468 <main+0x200>)
 80082b2:	a807      	add	r0, sp, #28
 80082b4:	f00c f888 	bl	80143c8 <FirmwareVersion::Print(char const*)>
 80082b8:	2004      	movs	r0, #4
 80082ba:	f8c8 7010 	str.w	r7, [r8, #16]
 80082be:	f00c f985 	bl	80145cc <operator new(unsigned int)>
 80082c2:	4b6a      	ldr	r3, [pc, #424]	; (800846c <main+0x204>)
 80082c4:	2600      	movs	r6, #0
 80082c6:	6003      	str	r3, [r0, #0]
 80082c8:	900f      	str	r0, [sp, #60]	; 0x3c
 80082ca:	2008      	movs	r0, #8
 80082cc:	ab0f      	add	r3, sp, #60	; 0x3c
 80082ce:	f00c f97d 	bl	80145cc <operator new(unsigned int)>
 80082d2:	4b67      	ldr	r3, [pc, #412]	; (8008470 <main+0x208>)
 80082d4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80082d8:	6003      	str	r3, [r0, #0]
 80082da:	4b66      	ldr	r3, [pc, #408]	; (8008474 <main+0x20c>)
 80082dc:	4966      	ldr	r1, [pc, #408]	; (8008478 <main+0x210>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	3b00      	subs	r3, #0
 80082e2:	bf18      	it	ne
 80082e4:	2301      	movne	r3, #1
 80082e6:	7103      	strb	r3, [r0, #4]
 80082e8:	9019      	str	r0, [sp, #100]	; 0x64
 80082ea:	ab17      	add	r3, sp, #92	; 0x5c
 80082ec:	a854      	add	r0, sp, #336	; 0x150
 80082ee:	2303      	movs	r3, #3
 80082f0:	f7ff fefd 	bl	80080ee <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 80082f4:	a811      	add	r0, sp, #68	; 0x44
 80082f6:	f007 fdd1 	bl	800fe9c <StoreNetwork::StoreNetwork()>
 80082fa:	ab8d      	add	r3, sp, #564	; 0x234
 80082fc:	4618      	mov	r0, r3
 80082fe:	f1a5 0208 	sub.w	r2, r5, #8
 8008302:	a911      	add	r1, sp, #68	; 0x44
 8008304:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8008308:	f009 fb64 	bl	80119d4 <Network::Init(NetworkParamsStore*)>
 800830c:	a88d      	add	r0, sp, #564	; 0x234
 800830e:	f009 fd37 	bl	8011d80 <Network::Print()>
 8008312:	a80a      	add	r0, sp, #40	; 0x28
 8008314:	f008 ff40 	bl	8011198 <MDNS::MDNS()>
 8008318:	a80a      	add	r0, sp, #40	; 0x28
 800831a:	f009 f801 	bl	8011320 <MDNS::Start()>
 800831e:	f642 1305 	movw	r3, #10501	; 0x2905
 8008322:	4631      	mov	r1, r6
 8008324:	4a55      	ldr	r2, [pc, #340]	; (800847c <main+0x214>)
 8008326:	e9cd 6600 	strd	r6, r6, [sp]
 800832a:	a80a      	add	r0, sp, #40	; 0x28
 800832c:	f009 f964 	bl	80115f8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 8008330:	4b53      	ldr	r3, [pc, #332]	; (8008480 <main+0x218>)
 8008332:	4631      	mov	r1, r6
 8008334:	4a53      	ldr	r2, [pc, #332]	; (8008484 <main+0x21c>)
 8008336:	e9cd 7300 	strd	r7, r3, [sp]
 800833a:	a80a      	add	r0, sp, #40	; 0x28
 800833c:	2350      	movs	r3, #80	; 0x50
 800833e:	f009 f95b 	bl	80115f8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 8008342:	a80a      	add	r0, sp, #40	; 0x28
 8008344:	f009 fa9e 	bl	8011884 <MDNS::Print()>
 8008348:	2303      	movs	r3, #3
 800834a:	f44f 42cc 	mov.w	r2, #26112	; 0x6600
 800834e:	494e      	ldr	r1, [pc, #312]	; (8008488 <main+0x220>)
 8008350:	a854      	add	r0, sp, #336	; 0x150
 8008352:	f7ff fecc 	bl	80080ee <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008356:	a813      	add	r0, sp, #76	; 0x4c
 8008358:	f007 fcbc 	bl	800fcd4 <StoreArtNet::StoreArtNet()>
 800835c:	a913      	add	r1, sp, #76	; 0x4c
 800835e:	a86a      	add	r0, sp, #424	; 0x1a8
 8008360:	f002 fbb0 	bl	800aac4 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 8008364:	4639      	mov	r1, r7
 8008366:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
 800836a:	f000 fdc5 	bl	8008ef8 <ArtNet4Node::ArtNet4Node(unsigned char)>
 800836e:	a86a      	add	r0, sp, #424	; 0x1a8
 8008370:	f002 fbcc 	bl	800ab0c <ArtNetParams::Load()>
 8008374:	b138      	cbz	r0, 8008386 <main+0x11e>
 8008376:	a86a      	add	r0, sp, #424	; 0x1a8
 8008378:	f60d 01ec 	addw	r1, sp, #2284	; 0x8ec
 800837c:	f002 ff7d 	bl	800b27a <ArtNetParams::Set(ArtNetNode*)>
 8008380:	a86a      	add	r0, sp, #424	; 0x1a8
 8008382:	f002 fffc 	bl	800b37e <ArtNetParams::Dump()>
 8008386:	4b41      	ldr	r3, [pc, #260]	; (800848c <main+0x224>)
 8008388:	4f41      	ldr	r7, [pc, #260]	; (8008490 <main+0x228>)
 800838a:	ae1d      	add	r6, sp, #116	; 0x74
 800838c:	6023      	str	r3, [r4, #0]
 800838e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8008390:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8008392:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8008396:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800839a:	2008      	movs	r0, #8
 800839c:	f8cd 4910 	str.w	r4, [sp, #2320]	; 0x910
 80083a0:	f8cd 590c 	str.w	r5, [sp, #2316]	; 0x90c
 80083a4:	f00c f912 	bl	80145cc <operator new(unsigned int)>
 80083a8:	4606      	mov	r6, r0
 80083aa:	f007 fe89 	bl	80100c0 <StoreWS28xxDmx::StoreWS28xxDmx()>
 80083ae:	4631      	mov	r1, r6
 80083b0:	a838      	add	r0, sp, #224	; 0xe0
 80083b2:	f004 f9f7 	bl	800c7a4 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>
 80083b6:	a838      	add	r0, sp, #224	; 0xe0
 80083b8:	f004 fa30 	bl	800c81c <WS28xxDmxParams::Load()>
 80083bc:	b130      	cbz	r0, 80083cc <main+0x164>
 80083be:	a838      	add	r0, sp, #224	; 0xe0
 80083c0:	a91d      	add	r1, sp, #116	; 0x74
 80083c2:	f004 fca8 	bl	800cd16 <WS28xxDmxParams::Set(PixelDmxConfiguration*)>
 80083c6:	a838      	add	r0, sp, #224	; 0xe0
 80083c8:	f004 fcdb 	bl	800cd82 <WS28xxDmxParams::Dump()>
 80083cc:	af43      	add	r7, sp, #268	; 0x10c
 80083ce:	a91d      	add	r1, sp, #116	; 0x74
 80083d0:	4638      	mov	r0, r7
 80083d2:	f004 f8ed 	bl	800c5b0 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>
 80083d6:	2004      	movs	r0, #4
 80083d8:	f00c f8f8 	bl	80145cc <operator new(unsigned int)>
 80083dc:	4b2d      	ldr	r3, [pc, #180]	; (8008494 <main+0x22c>)
 80083de:	4606      	mov	r6, r0
 80083e0:	6003      	str	r3, [r0, #0]
 80083e2:	2203      	movs	r2, #3
 80083e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083e8:	2110      	movs	r1, #16
 80083ea:	482b      	ldr	r0, [pc, #172]	; (8008498 <main+0x230>)
 80083ec:	f00c fc48 	bl	8014c80 <gpio_init>
 80083f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80083f4:	4b29      	ldr	r3, [pc, #164]	; (800849c <main+0x234>)
 80083f6:	2101      	movs	r1, #1
 80083f8:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 80083fc:	f50d 63de 	add.w	r3, sp, #1776	; 0x6f0
 8008400:	f5a3 6bc2 	sub.w	fp, r3, #1552	; 0x610
 8008404:	1f23      	subs	r3, r4, #4
 8008406:	2401      	movs	r4, #1
 8008408:	63fe      	str	r6, [r7, #60]	; 0x3c
 800840a:	f89b 602a 	ldrb.w	r6, [fp, #42]	; 0x2a
 800840e:	4618      	mov	r0, r3
 8008410:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80084a0 <main+0x238>
 8008414:	9304      	str	r3, [sp, #16]
 8008416:	f004 fdd1 	bl	800cfbc <PixelPatterns::PixelPatterns(unsigned int)>
 800841a:	4631      	mov	r1, r6
 800841c:	9804      	ldr	r0, [sp, #16]
 800841e:	f8c9 6000 	str.w	r6, [r9]
 8008422:	f7ff fe8d 	bl	8008140 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 8008426:	f8bb b01a 	ldrh.w	fp, [fp, #26]
 800842a:	2201      	movs	r2, #1
 800842c:	465b      	mov	r3, fp
 800842e:	2100      	movs	r1, #0
 8008430:	f60d 00ec 	addw	r0, sp, #2284	; 0x8ec
 8008434:	f001 f9ac 	bl	8009790 <ArtNetNode::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 8008438:	f8d7 a01c 	ldr.w	sl, [r7, #28]
 800843c:	4554      	cmp	r4, sl
 800843e:	d231      	bcs.n	80084a4 <main+0x23c>
 8008440:	eb0b 0304 	add.w	r3, fp, r4
 8008444:	4621      	mov	r1, r4
 8008446:	2201      	movs	r2, #1
 8008448:	b29b      	uxth	r3, r3
 800844a:	f60d 00ec 	addw	r0, sp, #2284	; 0x8ec
 800844e:	f001 f99f 	bl	8009790 <ArtNetNode::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 8008452:	3401      	adds	r4, #1
 8008454:	e7f2      	b.n	800843c <main+0x1d4>
 8008456:	bf00      	nop
 8008458:	08016818 	stmdaeq	r1, {r3, r4, fp, sp, lr}
 800845c:	0801680f 	stmdaeq	r1, {r0, r1, r2, r3, fp, sp, lr}
 8008460:	08016929 	stmdaeq	r1, {r0, r3, r5, r8, fp, sp, lr}
 8008464:	40011000 	andmi	r1, r1, r0
 8008468:	08016824 	stmdaeq	r1, {r2, r5, fp, sp, lr}
 800846c:	08016918 	stmdaeq	r1, {r3, r4, r8, fp, sp, lr}
 8008470:	080168ac 	stmdaeq	r1, {r2, r3, r5, r7, fp, sp, lr}
 8008474:	2000a8d4 	ldrdcs	sl, [r0], -r4
 8008478:	080181ff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, pc}
 800847c:	0801685f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, fp, sp, lr}
 8008480:	0801686f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, fp, sp, lr}
 8008484:	08016868 	stmdaeq	r1, {r3, r5, r6, fp, sp, lr}
 8008488:	0801697d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r8, fp, sp, lr}
 800848c:	080168c0 	stmdaeq	r1, {r6, r7, fp, sp, lr}
 8008490:	080167c8 	stmdaeq	r1, {r3, r6, r7, r8, r9, sl, sp, lr}
 8008494:	08016900 	stmdaeq	r1, {r8, fp, sp, lr}
 8008498:	40010c00 	andmi	r0, r1, r0, lsl #24
 800849c:	40010000 	andmi	r0, r1, r0
 80084a0:	20001950 	andcs	r1, r0, r0, asr r9
 80084a4:	f8d9 3000 	ldr.w	r3, [r9]
 80084a8:	4a77      	ldr	r2, [pc, #476]	; (8008688 <main+0x420>)
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	bf0c      	ite	eq
 80084ae:	463b      	moveq	r3, r7
 80084b0:	2300      	movne	r3, #0
 80084b2:	f8cd 38f4 	str.w	r3, [sp, #2292]	; 0x8f4
 80084b6:	ab15      	add	r3, sp, #84	; 0x54
 80084b8:	e9c3 2700 	strd	r2, r7, [r3]
 80084bc:	4b73      	ldr	r3, [pc, #460]	; (800868c <main+0x424>)
 80084be:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	ab15      	add	r3, sp, #84	; 0x54
 80084c6:	6193      	str	r3, [r2, #24]
 80084c8:	f000 fd74 	bl	8008fb4 <ArtNet4Node::Print()>
 80084cc:	4638      	mov	r0, r7
 80084ce:	f004 fc59 	bl	800cd84 <WS28xxDmx::Print()>
 80084d2:	496f      	ldr	r1, [pc, #444]	; (8008690 <main+0x428>)
 80084d4:	a854      	add	r0, sp, #336	; 0x150
 80084d6:	f00a fcdb 	bl	8012e90 <DisplayUdf::SetTitle(char const*, ...)>
 80084da:	2202      	movs	r2, #2
 80084dc:	a854      	add	r0, sp, #336	; 0x150
 80084de:	4611      	mov	r1, r2
 80084e0:	f00a fe2c 	bl	801313c <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80084e4:	2206      	movs	r2, #6
 80084e6:	2103      	movs	r1, #3
 80084e8:	a854      	add	r0, sp, #336	; 0x150
 80084ea:	f00a fe27 	bl	801313c <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80084ee:	2203      	movs	r2, #3
 80084f0:	2104      	movs	r1, #4
 80084f2:	a854      	add	r0, sp, #336	; 0x150
 80084f4:	f00a fe22 	bl	801313c <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80084f8:	2208      	movs	r2, #8
 80084fa:	2105      	movs	r1, #5
 80084fc:	a854      	add	r0, sp, #336	; 0x150
 80084fe:	f00a fe1d 	bl	801313c <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008502:	ac1d      	add	r4, sp, #116	; 0x74
 8008504:	2205      	movs	r2, #5
 8008506:	2106      	movs	r1, #6
 8008508:	a854      	add	r0, sp, #336	; 0x150
 800850a:	f00a fe17 	bl	801313c <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 800850e:	6820      	ldr	r0, [r4, #0]
 8008510:	f004 ffbc 	bl	800d48c <PixelType::GetType(pixel::Type)>
 8008514:	4607      	mov	r7, r0
 8008516:	68a0      	ldr	r0, [r4, #8]
 8008518:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800851c:	f8d4 b018 	ldr.w	fp, [r4, #24]
 8008520:	f005 f80c 	bl	800d53c <PixelType::GetMap(pixel::Map)>
 8008524:	463b      	mov	r3, r7
 8008526:	2107      	movs	r1, #7
 8008528:	4a5a      	ldr	r2, [pc, #360]	; (8008694 <main+0x42c>)
 800852a:	e9cd b001 	strd	fp, r0, [sp, #4]
 800852e:	f8cd a000 	str.w	sl, [sp]
 8008532:	a854      	add	r0, sp, #336	; 0x150
 8008534:	f7ff fd8a 	bl	800804c <Display::Printf(unsigned char, char const*, ...)>
 8008538:	a80d      	add	r0, sp, #52	; 0x34
 800853a:	f007 fc03 	bl	800fd44 <StoreDisplayUdf::StoreDisplayUdf()>
 800853e:	a90d      	add	r1, sp, #52	; 0x34
 8008540:	a82e      	add	r0, sp, #184	; 0xb8
 8008542:	f00a fe3d 	bl	80131c0 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 8008546:	a82e      	add	r0, sp, #184	; 0xb8
 8008548:	f00a fe47 	bl	80131da <DisplayUdfParams::Load()>
 800854c:	b130      	cbz	r0, 800855c <main+0x2f4>
 800854e:	a82e      	add	r0, sp, #184	; 0xb8
 8008550:	a954      	add	r1, sp, #336	; 0x150
 8008552:	f00a ff78 	bl	8013446 <DisplayUdfParams::Set(DisplayUdf*)>
 8008556:	a82e      	add	r0, sp, #184	; 0xb8
 8008558:	f00a ffa8 	bl	80134ac <DisplayUdfParams::Dump()>
 800855c:	f60d 01ec 	addw	r1, sp, #2284	; 0x8ec
 8008560:	a854      	add	r0, sp, #336	; 0x150
 8008562:	f00b f873 	bl	801364c <DisplayUdf::Show(ArtNetNode*)>
 8008566:	b16e      	cbz	r6, 8008584 <main+0x31c>
 8008568:	2106      	movs	r1, #6
 800856a:	a854      	add	r0, sp, #336	; 0x150
 800856c:	f7ff fd68 	bl	8008040 <Display::ClearLine(unsigned char)>
 8008570:	4630      	mov	r0, r6
 8008572:	f004 fd43 	bl	800cffc <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8008576:	2106      	movs	r1, #6
 8008578:	4603      	mov	r3, r0
 800857a:	4a47      	ldr	r2, [pc, #284]	; (8008698 <main+0x430>)
 800857c:	9600      	str	r6, [sp, #0]
 800857e:	a854      	add	r0, sp, #336	; 0x150
 8008580:	f7ff fd64 	bl	800804c <Display::Printf(unsigned char, char const*, ...)>
 8008584:	2203      	movs	r2, #3
 8008586:	2100      	movs	r1, #0
 8008588:	f89d 3fca 	ldrb.w	r3, [sp, #4042]	; 0xfca
 800858c:	a8bf      	add	r0, sp, #764	; 0x2fc
 800858e:	f006 f843 	bl	800e618 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>
 8008592:	f1a5 0318 	sub.w	r3, r5, #24
 8008596:	4618      	mov	r0, r3
 8008598:	9305      	str	r3, [sp, #20]
 800859a:	f007 fcb5 	bl	800ff08 <StoreRemoteConfig::StoreRemoteConfig()>
 800859e:	9905      	ldr	r1, [sp, #20]
 80085a0:	a825      	add	r0, sp, #148	; 0x94
 80085a2:	f006 fb01 	bl	800eba8 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 80085a6:	a825      	add	r0, sp, #148	; 0x94
 80085a8:	f006 fb08 	bl	800ebbc <RemoteConfigParams::Load()>
 80085ac:	b130      	cbz	r0, 80085bc <main+0x354>
 80085ae:	a825      	add	r0, sp, #148	; 0x94
 80085b0:	a9bf      	add	r1, sp, #764	; 0x2fc
 80085b2:	f006 fc2a 	bl	800ee0a <RemoteConfigParams::Set(RemoteConfig*)>
 80085b6:	a825      	add	r0, sp, #148	; 0x94
 80085b8:	f006 fc47 	bl	800ee4a <RemoteConfigParams::Dump()>
 80085bc:	a809      	add	r0, sp, #36	; 0x24
 80085be:	f007 fa31 	bl	800fa24 <SpiFlashStore::Flash()>
 80085c2:	2800      	cmp	r0, #0
 80085c4:	d1fa      	bne.n	80085bc <main+0x354>
 80085c6:	2303      	movs	r3, #3
 80085c8:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80085cc:	4933      	ldr	r1, [pc, #204]	; (800869c <main+0x434>)
 80085ce:	a854      	add	r0, sp, #336	; 0x150
 80085d0:	f7ff fd8d 	bl	80080ee <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 80085d4:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
 80085d8:	f000 fca2 	bl	8008f20 <ArtNet4Node::Start()>
 80085dc:	f248 0280 	movw	r2, #32896	; 0x8080
 80085e0:	2302      	movs	r3, #2
 80085e2:	492f      	ldr	r1, [pc, #188]	; (80086a0 <main+0x438>)
 80085e4:	a854      	add	r0, sp, #336	; 0x150
 80085e6:	f7ff fd82 	bl	80080ee <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 80085ea:	2102      	movs	r1, #2
 80085ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80085f0:	f00c fb1c 	bl	8014c2c <fwdgt_config>
 80085f4:	2801      	cmp	r0, #1
 80085f6:	bf0c      	ite	eq
 80085f8:	2201      	moveq	r2, #1
 80085fa:	2200      	movne	r2, #0
 80085fc:	ab0f      	add	r3, sp, #60	; 0x3c
 80085fe:	711a      	strb	r2, [r3, #4]
 8008600:	d101      	bne.n	8008606 <main+0x39e>
 8008602:	f00c fb03 	bl	8014c0c <fwdgt_enable>
 8008606:	2601      	movs	r6, #1
 8008608:	4d26      	ldr	r5, [pc, #152]	; (80086a4 <main+0x43c>)
 800860a:	ac17      	add	r4, sp, #92	; 0x5c
 800860c:	f00c fb06 	bl	8014c1c <fwdgt_counter_reload>
 8008610:	f007 ff88 	bl	8010524 <net_handle>
 8008614:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
 8008618:	f000 fcbd 	bl	8008f96 <ArtNet4Node::Run()>
 800861c:	a8bf      	add	r0, sp, #764	; 0x2fc
 800861e:	f006 f997 	bl	800e950 <RemoteConfig::Run()>
 8008622:	a809      	add	r0, sp, #36	; 0x24
 8008624:	f007 f9fe 	bl	800fa24 <SpiFlashStore::Flash()>
 8008628:	68e2      	ldr	r2, [r4, #12]
 800862a:	b182      	cbz	r2, 800864e <main+0x3e6>
 800862c:	682b      	ldr	r3, [r5, #0]
 800862e:	6961      	ldr	r1, [r4, #20]
 8008630:	1a5b      	subs	r3, r3, r1
 8008632:	429a      	cmp	r2, r3
 8008634:	d80b      	bhi.n	800864e <main+0x3e6>
 8008636:	682b      	ldr	r3, [r5, #0]
 8008638:	6163      	str	r3, [r4, #20]
 800863a:	6923      	ldr	r3, [r4, #16]
 800863c:	2b01      	cmp	r3, #1
 800863e:	f083 0201 	eor.w	r2, r3, #1
 8008642:	6122      	str	r2, [r4, #16]
 8008644:	bf14      	ite	ne
 8008646:	f8c8 6010 	strne.w	r6, [r8, #16]
 800864a:	f8c8 3014 	streq.w	r3, [r8, #20]
 800864e:	9a59      	ldr	r2, [sp, #356]	; 0x164
 8008650:	b17a      	cbz	r2, 8008672 <main+0x40a>
 8008652:	f89d 3160 	ldrb.w	r3, [sp, #352]	; 0x160
 8008656:	b963      	cbnz	r3, 8008672 <main+0x40a>
 8008658:	682b      	ldr	r3, [r5, #0]
 800865a:	9955      	ldr	r1, [sp, #340]	; 0x154
 800865c:	1a5b      	subs	r3, r3, r1
 800865e:	429a      	cmp	r2, r3
 8008660:	d207      	bcs.n	8008672 <main+0x40a>
 8008662:	985a      	ldr	r0, [sp, #360]	; 0x168
 8008664:	b128      	cbz	r0, 8008672 <main+0x40a>
 8008666:	6803      	ldr	r3, [r0, #0]
 8008668:	2101      	movs	r1, #1
 800866a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800866c:	f88d 6160 	strb.w	r6, [sp, #352]	; 0x160
 8008670:	4798      	blx	r3
 8008672:	f8d9 3000 	ldr.w	r3, [r9]
 8008676:	b113      	cbz	r3, 800867e <main+0x416>
 8008678:	9804      	ldr	r0, [sp, #16]
 800867a:	f004 fedd 	bl	800d438 <PixelPatterns::Run()>
 800867e:	a80a      	add	r0, sp, #40	; 0x28
 8008680:	f009 f8dc 	bl	801183c <MDNS::Run()>
 8008684:	e7c2      	b.n	800860c <main+0x3a4>
 8008686:	bf00      	nop
 8008688:	080168ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, fp, sp, lr}
 800868c:	20001900 	andcs	r1, r0, r0, lsl #18
 8008690:	08016884 	stmdaeq	r1, {r2, r7, fp, sp, lr}
 8008694:	08016896 	stmdaeq	r1, {r1, r2, r4, r7, fp, sp, lr}
 8008698:	08016809 	stmdaeq	r1, {r0, r3, fp, sp, lr}
 800869c:	0801696c 	stmdaeq	r1, {r2, r3, r5, r6, r8, fp, sp, lr}
 80086a0:	08016991 	stmdaeq	r1, {r0, r4, r7, r8, fp, sp, lr}
 80086a4:	2000a9dc 	ldrdcs	sl, [r0], -ip

080086a8 <_itostr>:
 80086a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086aa:	0fc7      	lsrs	r7, r0, #31
 80086ac:	b091      	sub	sp, #68	; 0x44
 80086ae:	bf18      	it	ne
 80086b0:	4240      	negne	r0, r0
 80086b2:	f10d 043f 	add.w	r4, sp, #63	; 0x3f
 80086b6:	b9c8      	cbnz	r0, 80086ec <_itostr+0x44>
 80086b8:	2330      	movs	r3, #48	; 0x30
 80086ba:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 80086be:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 80086c2:	b132      	cbz	r2, 80086d2 <_itostr+0x2a>
 80086c4:	4668      	mov	r0, sp
 80086c6:	2530      	movs	r5, #48	; 0x30
 80086c8:	1ae6      	subs	r6, r4, r3
 80086ca:	4296      	cmp	r6, r2
 80086cc:	da01      	bge.n	80086d2 <_itostr+0x2a>
 80086ce:	4283      	cmp	r3, r0
 80086d0:	d81c      	bhi.n	800870c <_itostr+0x64>
 80086d2:	b117      	cbz	r7, 80086da <_itostr+0x32>
 80086d4:	222d      	movs	r2, #45	; 0x2d
 80086d6:	f803 2901 	strb.w	r2, [r3], #-1
 80086da:	3301      	adds	r3, #1
 80086dc:	1ae0      	subs	r0, r4, r3
 80086de:	3901      	subs	r1, #1
 80086e0:	aa10      	add	r2, sp, #64	; 0x40
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d315      	bcc.n	8008712 <_itostr+0x6a>
 80086e6:	3001      	adds	r0, #1
 80086e8:	b011      	add	sp, #68	; 0x44
 80086ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086ec:	4623      	mov	r3, r4
 80086ee:	250a      	movs	r5, #10
 80086f0:	46ec      	mov	ip, sp
 80086f2:	fb90 f6f5 	sdiv	r6, r0, r5
 80086f6:	fb05 0016 	mls	r0, r5, r6, r0
 80086fa:	3030      	adds	r0, #48	; 0x30
 80086fc:	f803 0901 	strb.w	r0, [r3], #-1
 8008700:	4630      	mov	r0, r6
 8008702:	2e00      	cmp	r6, #0
 8008704:	d0dd      	beq.n	80086c2 <_itostr+0x1a>
 8008706:	4563      	cmp	r3, ip
 8008708:	d1f3      	bne.n	80086f2 <_itostr+0x4a>
 800870a:	e7da      	b.n	80086c2 <_itostr+0x1a>
 800870c:	f803 5901 	strb.w	r5, [r3], #-1
 8008710:	e7da      	b.n	80086c8 <_itostr+0x20>
 8008712:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008716:	f801 2f01 	strb.w	r2, [r1, #1]!
 800871a:	e7e1      	b.n	80086e0 <_itostr+0x38>

0800871c <_xputch>:
 800871c:	4603      	mov	r3, r0
 800871e:	b410      	push	{r4}
 8008720:	4c08      	ldr	r4, [pc, #32]	; (8008744 <_xputch+0x28>)
 8008722:	68da      	ldr	r2, [r3, #12]
 8008724:	4608      	mov	r0, r1
 8008726:	6821      	ldr	r1, [r4, #0]
 8008728:	3201      	adds	r2, #1
 800872a:	60da      	str	r2, [r3, #12]
 800872c:	b139      	cbz	r1, 800873e <_xputch+0x22>
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	429a      	cmp	r2, r3
 8008732:	da02      	bge.n	800873a <_xputch+0x1e>
 8008734:	1c4b      	adds	r3, r1, #1
 8008736:	6023      	str	r3, [r4, #0]
 8008738:	7008      	strb	r0, [r1, #0]
 800873a:	bc10      	pop	{r4}
 800873c:	4770      	bx	lr
 800873e:	bc10      	pop	{r4}
 8008740:	f00b bdb0 	b.w	80142a4 <console_putc>
 8008744:	200000e8 	andcs	r0, r0, r8, ror #1

08008748 <_format_int>:
 8008748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800874c:	461f      	mov	r7, r3
 800874e:	b091      	sub	sp, #68	; 0x44
 8008750:	ea52 0307 	orrs.w	r3, r2, r7
 8008754:	4680      	mov	r8, r0
 8008756:	4616      	mov	r6, r2
 8008758:	f10d 053f 	add.w	r5, sp, #63	; 0x3f
 800875c:	d138      	bne.n	80087d0 <_format_int+0x88>
 800875e:	2330      	movs	r3, #48	; 0x30
 8008760:	f10d 043e 	add.w	r4, sp, #62	; 0x3e
 8008764:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8008768:	f8d8 3000 	ldr.w	r3, [r8]
 800876c:	07d8      	lsls	r0, r3, #31
 800876e:	d508      	bpl.n	8008782 <_format_int+0x3a>
 8008770:	466a      	mov	r2, sp
 8008772:	2030      	movs	r0, #48	; 0x30
 8008774:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008778:	1b2e      	subs	r6, r5, r4
 800877a:	428e      	cmp	r6, r1
 800877c:	da01      	bge.n	8008782 <_format_int+0x3a>
 800877e:	4294      	cmp	r4, r2
 8008780:	d843      	bhi.n	800880a <_format_int+0xc2>
 8008782:	0699      	lsls	r1, r3, #26
 8008784:	d508      	bpl.n	8008798 <_format_int+0x50>
 8008786:	466a      	mov	r2, sp
 8008788:	2030      	movs	r0, #48	; 0x30
 800878a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800878e:	1b2e      	subs	r6, r5, r4
 8008790:	428e      	cmp	r6, r1
 8008792:	da01      	bge.n	8008798 <_format_int+0x50>
 8008794:	4294      	cmp	r4, r2
 8008796:	d83b      	bhi.n	8008810 <_format_int+0xc8>
 8008798:	071a      	lsls	r2, r3, #28
 800879a:	bf44      	itt	mi
 800879c:	222d      	movmi	r2, #45	; 0x2d
 800879e:	f804 2901 	strbmi.w	r2, [r4], #-1
 80087a2:	065b      	lsls	r3, r3, #25
 80087a4:	d408      	bmi.n	80087b8 <_format_int+0x70>
 80087a6:	466b      	mov	r3, sp
 80087a8:	2120      	movs	r1, #32
 80087aa:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80087ae:	1b28      	subs	r0, r5, r4
 80087b0:	4290      	cmp	r0, r2
 80087b2:	da01      	bge.n	80087b8 <_format_int+0x70>
 80087b4:	429c      	cmp	r4, r3
 80087b6:	d82e      	bhi.n	8008816 <_format_int+0xce>
 80087b8:	1b2d      	subs	r5, r5, r4
 80087ba:	3401      	adds	r4, #1
 80087bc:	ab10      	add	r3, sp, #64	; 0x40
 80087be:	429c      	cmp	r4, r3
 80087c0:	d32c      	bcc.n	800881c <_format_int+0xd4>
 80087c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80087c6:	42ab      	cmp	r3, r5
 80087c8:	dc2e      	bgt.n	8008828 <_format_int+0xe0>
 80087ca:	b011      	add	sp, #68	; 0x44
 80087cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d0:	462c      	mov	r4, r5
 80087d2:	46eb      	mov	fp, sp
 80087d4:	4630      	mov	r0, r6
 80087d6:	4639      	mov	r1, r7
 80087d8:	220a      	movs	r2, #10
 80087da:	2300      	movs	r3, #0
 80087dc:	f7fe feb2 	bl	8007544 <__aeabi_uldivmod>
 80087e0:	46b2      	mov	sl, r6
 80087e2:	3230      	adds	r2, #48	; 0x30
 80087e4:	46b9      	mov	r9, r7
 80087e6:	2300      	movs	r3, #0
 80087e8:	4630      	mov	r0, r6
 80087ea:	4639      	mov	r1, r7
 80087ec:	f804 2901 	strb.w	r2, [r4], #-1
 80087f0:	220a      	movs	r2, #10
 80087f2:	f7fe fea7 	bl	8007544 <__aeabi_uldivmod>
 80087f6:	f1ba 0f0a 	cmp.w	sl, #10
 80087fa:	f179 0300 	sbcs.w	r3, r9, #0
 80087fe:	4606      	mov	r6, r0
 8008800:	460f      	mov	r7, r1
 8008802:	d3b1      	bcc.n	8008768 <_format_int+0x20>
 8008804:	455c      	cmp	r4, fp
 8008806:	d1e5      	bne.n	80087d4 <_format_int+0x8c>
 8008808:	e7ae      	b.n	8008768 <_format_int+0x20>
 800880a:	f804 0901 	strb.w	r0, [r4], #-1
 800880e:	e7b3      	b.n	8008778 <_format_int+0x30>
 8008810:	f804 0901 	strb.w	r0, [r4], #-1
 8008814:	e7bb      	b.n	800878e <_format_int+0x46>
 8008816:	f804 1901 	strb.w	r1, [r4], #-1
 800881a:	e7c8      	b.n	80087ae <_format_int+0x66>
 800881c:	4640      	mov	r0, r8
 800881e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008822:	f7ff ff7b 	bl	800871c <_xputch>
 8008826:	e7c9      	b.n	80087bc <_format_int+0x74>
 8008828:	2120      	movs	r1, #32
 800882a:	4640      	mov	r0, r8
 800882c:	f7ff ff76 	bl	800871c <_xputch>
 8008830:	3501      	adds	r5, #1
 8008832:	e7c6      	b.n	80087c2 <_format_int+0x7a>

08008834 <_format_hex>:
 8008834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008836:	b091      	sub	sp, #68	; 0x44
 8008838:	4606      	mov	r6, r0
 800883a:	6804      	ldr	r4, [r0, #0]
 800883c:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 8008840:	bb61      	cbnz	r1, 800889c <_format_hex+0x68>
 8008842:	2330      	movs	r3, #48	; 0x30
 8008844:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8008848:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800884c:	07e5      	lsls	r5, r4, #31
 800884e:	d507      	bpl.n	8008860 <_format_hex+0x2c>
 8008850:	4669      	mov	r1, sp
 8008852:	2530      	movs	r5, #48	; 0x30
 8008854:	6870      	ldr	r0, [r6, #4]
 8008856:	1ad7      	subs	r7, r2, r3
 8008858:	4287      	cmp	r7, r0
 800885a:	da01      	bge.n	8008860 <_format_hex+0x2c>
 800885c:	428b      	cmp	r3, r1
 800885e:	d831      	bhi.n	80088c4 <_format_hex+0x90>
 8008860:	06a0      	lsls	r0, r4, #26
 8008862:	d507      	bpl.n	8008874 <_format_hex+0x40>
 8008864:	4669      	mov	r1, sp
 8008866:	2530      	movs	r5, #48	; 0x30
 8008868:	68b0      	ldr	r0, [r6, #8]
 800886a:	1ad7      	subs	r7, r2, r3
 800886c:	4287      	cmp	r7, r0
 800886e:	da01      	bge.n	8008874 <_format_hex+0x40>
 8008870:	428b      	cmp	r3, r1
 8008872:	d82a      	bhi.n	80088ca <_format_hex+0x96>
 8008874:	0661      	lsls	r1, r4, #25
 8008876:	d407      	bmi.n	8008888 <_format_hex+0x54>
 8008878:	4669      	mov	r1, sp
 800887a:	2420      	movs	r4, #32
 800887c:	68b0      	ldr	r0, [r6, #8]
 800887e:	1ad5      	subs	r5, r2, r3
 8008880:	4285      	cmp	r5, r0
 8008882:	da01      	bge.n	8008888 <_format_hex+0x54>
 8008884:	428b      	cmp	r3, r1
 8008886:	d823      	bhi.n	80088d0 <_format_hex+0x9c>
 8008888:	1ad5      	subs	r5, r2, r3
 800888a:	1c5c      	adds	r4, r3, #1
 800888c:	ab10      	add	r3, sp, #64	; 0x40
 800888e:	429c      	cmp	r4, r3
 8008890:	d321      	bcc.n	80088d6 <_format_hex+0xa2>
 8008892:	68b3      	ldr	r3, [r6, #8]
 8008894:	429d      	cmp	r5, r3
 8008896:	db24      	blt.n	80088e2 <_format_hex+0xae>
 8008898:	b011      	add	sp, #68	; 0x44
 800889a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800889c:	f014 0f02 	tst.w	r4, #2
 80088a0:	bf0c      	ite	eq
 80088a2:	2757      	moveq	r7, #87	; 0x57
 80088a4:	2737      	movne	r7, #55	; 0x37
 80088a6:	4613      	mov	r3, r2
 80088a8:	466d      	mov	r5, sp
 80088aa:	f001 000f 	and.w	r0, r1, #15
 80088ae:	2809      	cmp	r0, #9
 80088b0:	bf94      	ite	ls
 80088b2:	3030      	addls	r0, #48	; 0x30
 80088b4:	19c0      	addhi	r0, r0, r7
 80088b6:	0909      	lsrs	r1, r1, #4
 80088b8:	f803 0901 	strb.w	r0, [r3], #-1
 80088bc:	d0c6      	beq.n	800884c <_format_hex+0x18>
 80088be:	42ab      	cmp	r3, r5
 80088c0:	d1f3      	bne.n	80088aa <_format_hex+0x76>
 80088c2:	e7c3      	b.n	800884c <_format_hex+0x18>
 80088c4:	f803 5901 	strb.w	r5, [r3], #-1
 80088c8:	e7c5      	b.n	8008856 <_format_hex+0x22>
 80088ca:	f803 5901 	strb.w	r5, [r3], #-1
 80088ce:	e7cc      	b.n	800886a <_format_hex+0x36>
 80088d0:	f803 4901 	strb.w	r4, [r3], #-1
 80088d4:	e7d3      	b.n	800887e <_format_hex+0x4a>
 80088d6:	4630      	mov	r0, r6
 80088d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088dc:	f7ff ff1e 	bl	800871c <_xputch>
 80088e0:	e7d4      	b.n	800888c <_format_hex+0x58>
 80088e2:	2120      	movs	r1, #32
 80088e4:	4630      	mov	r0, r6
 80088e6:	f7ff ff19 	bl	800871c <_xputch>
 80088ea:	3501      	adds	r5, #1
 80088ec:	e7d1      	b.n	8008892 <_format_hex+0x5e>
	...

080088f0 <_vprintf>:
 80088f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f4:	4614      	mov	r4, r2
 80088f6:	2200      	movs	r2, #0
 80088f8:	460b      	mov	r3, r1
 80088fa:	2700      	movs	r7, #0
 80088fc:	b099      	sub	sp, #100	; 0x64
 80088fe:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8008902:	ae08      	add	r6, sp, #32
 8008904:	7819      	ldrb	r1, [r3, #0]
 8008906:	b919      	cbnz	r1, 8008910 <_vprintf+0x20>
 8008908:	9806      	ldr	r0, [sp, #24]
 800890a:	b019      	add	sp, #100	; 0x64
 800890c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008910:	2925      	cmp	r1, #37	; 0x25
 8008912:	f103 0501 	add.w	r5, r3, #1
 8008916:	d004      	beq.n	8008922 <_vprintf+0x32>
 8008918:	a803      	add	r0, sp, #12
 800891a:	f7ff feff 	bl	800871c <_xputch>
 800891e:	462b      	mov	r3, r5
 8008920:	e7f0      	b.n	8008904 <_vprintf+0x14>
 8008922:	2200      	movs	r2, #0
 8008924:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8008928:	9205      	str	r2, [sp, #20]
 800892a:	785a      	ldrb	r2, [r3, #1]
 800892c:	2a30      	cmp	r2, #48	; 0x30
 800892e:	d12b      	bne.n	8008988 <_vprintf+0x98>
 8008930:	2220      	movs	r2, #32
 8008932:	9203      	str	r2, [sp, #12]
 8008934:	1c9d      	adds	r5, r3, #2
 8008936:	2200      	movs	r2, #0
 8008938:	46ac      	mov	ip, r5
 800893a:	4613      	mov	r3, r2
 800893c:	f04f 0e0a 	mov.w	lr, #10
 8008940:	f89c 1000 	ldrb.w	r1, [ip]
 8008944:	4665      	mov	r5, ip
 8008946:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 800894a:	2809      	cmp	r0, #9
 800894c:	f10c 0c01 	add.w	ip, ip, #1
 8008950:	d91e      	bls.n	8008990 <_vprintf+0xa0>
 8008952:	b12a      	cbz	r2, 8008960 <_vprintf+0x70>
 8008954:	9305      	str	r3, [sp, #20]
 8008956:	b11b      	cbz	r3, 8008960 <_vprintf+0x70>
 8008958:	9b03      	ldr	r3, [sp, #12]
 800895a:	f043 0310 	orr.w	r3, r3, #16
 800895e:	9303      	str	r3, [sp, #12]
 8008960:	292e      	cmp	r1, #46	; 0x2e
 8008962:	d124      	bne.n	80089ae <_vprintf+0xbe>
 8008964:	786b      	ldrb	r3, [r5, #1]
 8008966:	2b2a      	cmp	r3, #42	; 0x2a
 8008968:	d016      	beq.n	8008998 <_vprintf+0xa8>
 800896a:	2100      	movs	r1, #0
 800896c:	f04f 0c0a 	mov.w	ip, #10
 8008970:	460a      	mov	r2, r1
 8008972:	1c68      	adds	r0, r5, #1
 8008974:	7803      	ldrb	r3, [r0, #0]
 8008976:	4605      	mov	r5, r0
 8008978:	3b30      	subs	r3, #48	; 0x30
 800897a:	2b09      	cmp	r3, #9
 800897c:	f100 0001 	add.w	r0, r0, #1
 8008980:	d958      	bls.n	8008a34 <_vprintf+0x144>
 8008982:	b181      	cbz	r1, 80089a6 <_vprintf+0xb6>
 8008984:	9204      	str	r2, [sp, #16]
 8008986:	e00e      	b.n	80089a6 <_vprintf+0xb6>
 8008988:	2a2d      	cmp	r2, #45	; 0x2d
 800898a:	d1d4      	bne.n	8008936 <_vprintf+0x46>
 800898c:	2240      	movs	r2, #64	; 0x40
 800898e:	e7d0      	b.n	8008932 <_vprintf+0x42>
 8008990:	2201      	movs	r2, #1
 8008992:	fb0e 0303 	mla	r3, lr, r3, r0
 8008996:	e7d3      	b.n	8008940 <_vprintf+0x50>
 8008998:	f854 3b04 	ldr.w	r3, [r4], #4
 800899c:	3502      	adds	r5, #2
 800899e:	2b00      	cmp	r3, #0
 80089a0:	bfb8      	it	lt
 80089a2:	425b      	neglt	r3, r3
 80089a4:	9304      	str	r3, [sp, #16]
 80089a6:	9b03      	ldr	r3, [sp, #12]
 80089a8:	f043 0301 	orr.w	r3, r3, #1
 80089ac:	9303      	str	r3, [sp, #12]
 80089ae:	782b      	ldrb	r3, [r5, #0]
 80089b0:	2b6c      	cmp	r3, #108	; 0x6c
 80089b2:	bf04      	itt	eq
 80089b4:	9b03      	ldreq	r3, [sp, #12]
 80089b6:	3501      	addeq	r5, #1
 80089b8:	7829      	ldrb	r1, [r5, #0]
 80089ba:	bf04      	itt	eq
 80089bc:	f043 0304 	orreq.w	r3, r3, #4
 80089c0:	9303      	streq	r3, [sp, #12]
 80089c2:	2958      	cmp	r1, #88	; 0x58
 80089c4:	f000 8173 	beq.w	8008cae <_vprintf+0x3be>
 80089c8:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 80089cc:	b2da      	uxtb	r2, r3
 80089ce:	2a15      	cmp	r2, #21
 80089d0:	d8a2      	bhi.n	8008918 <_vprintf+0x28>
 80089d2:	2b15      	cmp	r3, #21
 80089d4:	d8a0      	bhi.n	8008918 <_vprintf+0x28>
 80089d6:	a201      	add	r2, pc, #4	; (adr r2, 80089dc <_vprintf+0xec>)
 80089d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089dc:	08008a3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r9, fp, pc}
 80089e0:	08008a4b 	stmdaeq	r0, {r0, r1, r3, r6, r9, fp, pc}
 80089e4:	08008919 	stmdaeq	r0, {r0, r3, r4, r8, fp, pc}
 80089e8:	08008a7f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r9, fp, pc}
 80089ec:	08008919 	stmdaeq	r0, {r0, r3, r4, r8, fp, pc}
 80089f0:	08008919 	stmdaeq	r0, {r0, r3, r4, r8, fp, pc}
 80089f4:	08008a4b 	stmdaeq	r0, {r0, r1, r3, r6, r9, fp, pc}
 80089f8:	08008919 	stmdaeq	r0, {r0, r3, r4, r8, fp, pc}
 80089fc:	08008919 	stmdaeq	r0, {r0, r3, r4, r8, fp, pc}
 8008a00:	08008919 	stmdaeq	r0, {r0, r3, r4, r8, fp, pc}
 8008a04:	08008919 	stmdaeq	r0, {r0, r3, r4, r8, fp, pc}
 8008a08:	08008919 	stmdaeq	r0, {r0, r3, r4, r8, fp, pc}
 8008a0c:	08008919 	stmdaeq	r0, {r0, r3, r4, r8, fp, pc}
 8008a10:	08008bf1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, r9, fp, pc}
 8008a14:	08008919 	stmdaeq	r0, {r0, r3, r4, r8, fp, pc}
 8008a18:	08008919 	stmdaeq	r0, {r0, r3, r4, r8, fp, pc}
 8008a1c:	08008c17 	stmdaeq	r0, {r0, r1, r2, r4, sl, fp, pc}
 8008a20:	08008919 	stmdaeq	r0, {r0, r3, r4, r8, fp, pc}
 8008a24:	08008c91 	stmdaeq	r0, {r0, r4, r7, sl, fp, pc}
 8008a28:	08008919 	stmdaeq	r0, {r0, r3, r4, r8, fp, pc}
 8008a2c:	08008919 	stmdaeq	r0, {r0, r3, r4, r8, fp, pc}
 8008a30:	08008cb7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r7, sl, fp, pc}
 8008a34:	2101      	movs	r1, #1
 8008a36:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a3a:	e79b      	b.n	8008974 <_vprintf+0x84>
 8008a3c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008a40:	a803      	add	r0, sp, #12
 8008a42:	f7ff fe6b 	bl	800871c <_xputch>
 8008a46:	3501      	adds	r5, #1
 8008a48:	e769      	b.n	800891e <_vprintf+0x2e>
 8008a4a:	9903      	ldr	r1, [sp, #12]
 8008a4c:	074a      	lsls	r2, r1, #29
 8008a4e:	bf43      	ittte	mi
 8008a50:	3407      	addmi	r4, #7
 8008a52:	f024 0307 	bicmi.w	r3, r4, #7
 8008a56:	461c      	movmi	r4, r3
 8008a58:	f854 2b04 	ldrpl.w	r2, [r4], #4
 8008a5c:	bf4a      	itet	mi
 8008a5e:	685b      	ldrmi	r3, [r3, #4]
 8008a60:	17d3      	asrpl	r3, r2, #31
 8008a62:	f854 2b08 	ldrmi.w	r2, [r4], #8
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	da05      	bge.n	8008a76 <_vprintf+0x186>
 8008a6a:	f041 0108 	orr.w	r1, r1, #8
 8008a6e:	4252      	negs	r2, r2
 8008a70:	9103      	str	r1, [sp, #12]
 8008a72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008a76:	a803      	add	r0, sp, #12
 8008a78:	f7ff fe66 	bl	8008748 <_format_int>
 8008a7c:	e7e3      	b.n	8008a46 <_vprintf+0x156>
 8008a7e:	3407      	adds	r4, #7
 8008a80:	f024 0407 	bic.w	r4, r4, #7
 8008a84:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008a88:	f7fe fb62 	bl	8007150 <__aeabi_d2f>
 8008a8c:	9b03      	ldr	r3, [sp, #12]
 8008a8e:	4639      	mov	r1, r7
 8008a90:	07db      	lsls	r3, r3, #31
 8008a92:	bf54      	ite	pl
 8008a94:	f04f 0a06 	movpl.w	sl, #6
 8008a98:	f8dd a010 	ldrmi.w	sl, [sp, #16]
 8008a9c:	4681      	mov	r9, r0
 8008a9e:	f7fe fd03 	bl	80074a8 <__aeabi_fcmplt>
 8008aa2:	2800      	cmp	r0, #0
 8008aa4:	d069      	beq.n	8008b7a <_vprintf+0x28a>
 8008aa6:	232d      	movs	r3, #45	; 0x2d
 8008aa8:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000
 8008aac:	f88d 3020 	strb.w	r3, [sp, #32]
 8008ab0:	f10d 0b21 	add.w	fp, sp, #33	; 0x21
 8008ab4:	4648      	mov	r0, r9
 8008ab6:	f7fe fd1f 	bl	80074f8 <__aeabi_f2iz>
 8008aba:	4659      	mov	r1, fp
 8008abc:	2200      	movs	r2, #0
 8008abe:	4680      	mov	r8, r0
 8008ac0:	f7ff fdf2 	bl	80086a8 <_itostr>
 8008ac4:	eb0b 0200 	add.w	r2, fp, r0
 8008ac8:	e9cd 2000 	strd	r2, r0, [sp]
 8008acc:	4640      	mov	r0, r8
 8008ace:	f7fe fc49 	bl	8007364 <__aeabi_i2f>
 8008ad2:	4601      	mov	r1, r0
 8008ad4:	4648      	mov	r0, r9
 8008ad6:	f7fe fb8f 	bl	80071f8 <__aeabi_fsub>
 8008ada:	222e      	movs	r2, #46	; 0x2e
 8008adc:	4601      	mov	r1, r0
 8008ade:	200a      	movs	r0, #10
 8008ae0:	9b00      	ldr	r3, [sp, #0]
 8008ae2:	f10a 0901 	add.w	r9, sl, #1
 8008ae6:	f103 0801 	add.w	r8, r3, #1
 8008aea:	9b01      	ldr	r3, [sp, #4]
 8008aec:	f80b 2003 	strb.w	r2, [fp, r3]
 8008af0:	4603      	mov	r3, r0
 8008af2:	f1ba 0f00 	cmp.w	sl, #0
 8008af6:	dc42      	bgt.n	8008b7e <_vprintf+0x28e>
 8008af8:	9100      	str	r1, [sp, #0]
 8008afa:	f7fe fc33 	bl	8007364 <__aeabi_i2f>
 8008afe:	9900      	ldr	r1, [sp, #0]
 8008b00:	f7ff f860 	bl	8007bc4 <__aeabi_fmul>
 8008b04:	f7fe fcf8 	bl	80074f8 <__aeabi_f2iz>
 8008b08:	4641      	mov	r1, r8
 8008b0a:	464a      	mov	r2, r9
 8008b0c:	f7ff fdcc 	bl	80086a8 <_itostr>
 8008b10:	4480      	add	r8, r0
 8008b12:	eba8 0806 	sub.w	r8, r8, r6
 8008b16:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 8008b1a:	5c73      	ldrb	r3, [r6, r1]
 8008b1c:	1872      	adds	r2, r6, r1
 8008b1e:	2b34      	cmp	r3, #52	; 0x34
 8008b20:	d910      	bls.n	8008b44 <_vprintf+0x254>
 8008b22:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 8008b26:	1e53      	subs	r3, r2, #1
 8008b28:	282e      	cmp	r0, #46	; 0x2e
 8008b2a:	d02f      	beq.n	8008b8c <_vprintf+0x29c>
 8008b2c:	469c      	mov	ip, r3
 8008b2e:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8008b32:	4663      	mov	r3, ip
 8008b34:	f81c 0901 	ldrb.w	r0, [ip], #-1
 8008b38:	2839      	cmp	r0, #57	; 0x39
 8008b3a:	d024      	beq.n	8008b86 <_vprintf+0x296>
 8008b3c:	282e      	cmp	r0, #46	; 0x2e
 8008b3e:	d025      	beq.n	8008b8c <_vprintf+0x29c>
 8008b40:	3001      	adds	r0, #1
 8008b42:	7018      	strb	r0, [r3, #0]
 8008b44:	f101 0360 	add.w	r3, r1, #96	; 0x60
 8008b48:	446b      	add	r3, sp
 8008b4a:	f813 3c41 	ldrb.w	r3, [r3, #-65]
 8008b4e:	2b2e      	cmp	r3, #46	; 0x2e
 8008b50:	bf08      	it	eq
 8008b52:	f101 31ff 	addeq.w	r1, r1, #4294967295	; 0xffffffff
 8008b56:	4688      	mov	r8, r1
 8008b58:	4689      	mov	r9, r1
 8008b5a:	9b05      	ldr	r3, [sp, #20]
 8008b5c:	454b      	cmp	r3, r9
 8008b5e:	dc40      	bgt.n	8008be2 <_vprintf+0x2f2>
 8008b60:	46b1      	mov	r9, r6
 8008b62:	f1b8 0f00 	cmp.w	r8, #0
 8008b66:	f77f af6e 	ble.w	8008a46 <_vprintf+0x156>
 8008b6a:	f819 1b01 	ldrb.w	r1, [r9], #1
 8008b6e:	a803      	add	r0, sp, #12
 8008b70:	f7ff fdd4 	bl	800871c <_xputch>
 8008b74:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008b78:	e7f3      	b.n	8008b62 <_vprintf+0x272>
 8008b7a:	46b3      	mov	fp, r6
 8008b7c:	e79a      	b.n	8008ab4 <_vprintf+0x1c4>
 8008b7e:	4358      	muls	r0, r3
 8008b80:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008b84:	e7b5      	b.n	8008af2 <_vprintf+0x202>
 8008b86:	f88c e001 	strb.w	lr, [ip, #1]
 8008b8a:	e7d2      	b.n	8008b32 <_vprintf+0x242>
 8008b8c:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8008b90:	3b01      	subs	r3, #1
 8008b92:	7818      	ldrb	r0, [r3, #0]
 8008b94:	2839      	cmp	r0, #57	; 0x39
 8008b96:	d112      	bne.n	8008bbe <_vprintf+0x2ce>
 8008b98:	42b3      	cmp	r3, r6
 8008b9a:	d20d      	bcs.n	8008bb8 <_vprintf+0x2c8>
 8008b9c:	1c98      	adds	r0, r3, #2
 8008b9e:	1c59      	adds	r1, r3, #1
 8008ba0:	4281      	cmp	r1, r0
 8008ba2:	eba2 0203 	sub.w	r2, r2, r3
 8008ba6:	d913      	bls.n	8008bd0 <_vprintf+0x2e0>
 8008ba8:	3201      	adds	r2, #1
 8008baa:	441a      	add	r2, r3
 8008bac:	428a      	cmp	r2, r1
 8008bae:	d10b      	bne.n	8008bc8 <_vprintf+0x2d8>
 8008bb0:	2231      	movs	r2, #49	; 0x31
 8008bb2:	4641      	mov	r1, r8
 8008bb4:	705a      	strb	r2, [r3, #1]
 8008bb6:	e7c5      	b.n	8008b44 <_vprintf+0x254>
 8008bb8:	f803 c901 	strb.w	ip, [r3], #-1
 8008bbc:	e7e9      	b.n	8008b92 <_vprintf+0x2a2>
 8008bbe:	42b3      	cmp	r3, r6
 8008bc0:	d3ec      	bcc.n	8008b9c <_vprintf+0x2ac>
 8008bc2:	282d      	cmp	r0, #45	; 0x2d
 8008bc4:	d0ea      	beq.n	8008b9c <_vprintf+0x2ac>
 8008bc6:	e7bb      	b.n	8008b40 <_vprintf+0x250>
 8008bc8:	f811 0b01 	ldrb.w	r0, [r1], #1
 8008bcc:	7008      	strb	r0, [r1, #0]
 8008bce:	e7ed      	b.n	8008bac <_vprintf+0x2bc>
 8008bd0:	4411      	add	r1, r2
 8008bd2:	4402      	add	r2, r0
 8008bd4:	4290      	cmp	r0, r2
 8008bd6:	d0eb      	beq.n	8008bb0 <_vprintf+0x2c0>
 8008bd8:	f811 cd01 	ldrb.w	ip, [r1, #-1]!
 8008bdc:	f802 cd01 	strb.w	ip, [r2, #-1]!
 8008be0:	e7f8      	b.n	8008bd4 <_vprintf+0x2e4>
 8008be2:	2120      	movs	r1, #32
 8008be4:	a803      	add	r0, sp, #12
 8008be6:	f7ff fd99 	bl	800871c <_xputch>
 8008bea:	f109 0901 	add.w	r9, r9, #1
 8008bee:	e7b4      	b.n	8008b5a <_vprintf+0x26a>
 8008bf0:	2308      	movs	r3, #8
 8008bf2:	9305      	str	r3, [sp, #20]
 8008bf4:	2320      	movs	r3, #32
 8008bf6:	2130      	movs	r1, #48	; 0x30
 8008bf8:	f854 8b04 	ldr.w	r8, [r4], #4
 8008bfc:	a803      	add	r0, sp, #12
 8008bfe:	9303      	str	r3, [sp, #12]
 8008c00:	f7ff fd8c 	bl	800871c <_xputch>
 8008c04:	2178      	movs	r1, #120	; 0x78
 8008c06:	a803      	add	r0, sp, #12
 8008c08:	f7ff fd88 	bl	800871c <_xputch>
 8008c0c:	4641      	mov	r1, r8
 8008c0e:	a803      	add	r0, sp, #12
 8008c10:	f7ff fe10 	bl	8008834 <_format_hex>
 8008c14:	e717      	b.n	8008a46 <_vprintf+0x156>
 8008c16:	f04f 0800 	mov.w	r8, #0
 8008c1a:	f854 9b04 	ldr.w	r9, [r4], #4
 8008c1e:	f819 3008 	ldrb.w	r3, [r9, r8]
 8008c22:	b993      	cbnz	r3, 8008c4a <_vprintf+0x35a>
 8008c24:	9b03      	ldr	r3, [sp, #12]
 8008c26:	07d9      	lsls	r1, r3, #31
 8008c28:	d503      	bpl.n	8008c32 <_vprintf+0x342>
 8008c2a:	9b04      	ldr	r3, [sp, #16]
 8008c2c:	4598      	cmp	r8, r3
 8008c2e:	bfa8      	it	ge
 8008c30:	4698      	movge	r8, r3
 8008c32:	9b03      	ldr	r3, [sp, #12]
 8008c34:	f108 0a01 	add.w	sl, r8, #1
 8008c38:	065a      	lsls	r2, r3, #25
 8008c3a:	d403      	bmi.n	8008c44 <_vprintf+0x354>
 8008c3c:	9b05      	ldr	r3, [sp, #20]
 8008c3e:	4598      	cmp	r8, r3
 8008c40:	db06      	blt.n	8008c50 <_vprintf+0x360>
 8008c42:	46d0      	mov	r8, sl
 8008c44:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008c48:	e00e      	b.n	8008c68 <_vprintf+0x378>
 8008c4a:	f108 0801 	add.w	r8, r8, #1
 8008c4e:	e7e6      	b.n	8008c1e <_vprintf+0x32e>
 8008c50:	2120      	movs	r1, #32
 8008c52:	a803      	add	r0, sp, #12
 8008c54:	f7ff fd62 	bl	800871c <_xputch>
 8008c58:	46d0      	mov	r8, sl
 8008c5a:	e7ea      	b.n	8008c32 <_vprintf+0x342>
 8008c5c:	a803      	add	r0, sp, #12
 8008c5e:	f7ff fd5d 	bl	800871c <_xputch>
 8008c62:	9b04      	ldr	r3, [sp, #16]
 8008c64:	3b01      	subs	r3, #1
 8008c66:	9304      	str	r3, [sp, #16]
 8008c68:	9b03      	ldr	r3, [sp, #12]
 8008c6a:	07db      	lsls	r3, r3, #31
 8008c6c:	d501      	bpl.n	8008c72 <_vprintf+0x382>
 8008c6e:	9b04      	ldr	r3, [sp, #16]
 8008c70:	b11b      	cbz	r3, 8008c7a <_vprintf+0x38a>
 8008c72:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8008c76:	2900      	cmp	r1, #0
 8008c78:	d1f0      	bne.n	8008c5c <_vprintf+0x36c>
 8008c7a:	9b05      	ldr	r3, [sp, #20]
 8008c7c:	4543      	cmp	r3, r8
 8008c7e:	f77f aee2 	ble.w	8008a46 <_vprintf+0x156>
 8008c82:	2120      	movs	r1, #32
 8008c84:	a803      	add	r0, sp, #12
 8008c86:	f7ff fd49 	bl	800871c <_xputch>
 8008c8a:	f108 0801 	add.w	r8, r8, #1
 8008c8e:	e7f4      	b.n	8008c7a <_vprintf+0x38a>
 8008c90:	9b03      	ldr	r3, [sp, #12]
 8008c92:	f013 0304 	ands.w	r3, r3, #4
 8008c96:	bf1d      	ittte	ne
 8008c98:	3407      	addne	r4, #7
 8008c9a:	f024 0307 	bicne.w	r3, r4, #7
 8008c9e:	461c      	movne	r4, r3
 8008ca0:	f854 2b04 	ldreq.w	r2, [r4], #4
 8008ca4:	bf1c      	itt	ne
 8008ca6:	f854 2b08 	ldrne.w	r2, [r4], #8
 8008caa:	685b      	ldrne	r3, [r3, #4]
 8008cac:	e6e3      	b.n	8008a76 <_vprintf+0x186>
 8008cae:	9b03      	ldr	r3, [sp, #12]
 8008cb0:	f043 0302 	orr.w	r3, r3, #2
 8008cb4:	9303      	str	r3, [sp, #12]
 8008cb6:	f854 1b04 	ldr.w	r1, [r4], #4
 8008cba:	e7a8      	b.n	8008c0e <_vprintf+0x31e>

08008cbc <printf>:
 8008cbc:	b40f      	push	{r0, r1, r2, r3}
 8008cbe:	b507      	push	{r0, r1, r2, lr}
 8008cc0:	aa04      	add	r2, sp, #16
 8008cc2:	f852 1b04 	ldr.w	r1, [r2], #4
 8008cc6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8008cca:	9201      	str	r2, [sp, #4]
 8008ccc:	f7ff fe10 	bl	80088f0 <_vprintf>
 8008cd0:	b003      	add	sp, #12
 8008cd2:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cd6:	b004      	add	sp, #16
 8008cd8:	4770      	bx	lr
	...

08008cdc <sprintf>:
 8008cdc:	b40e      	push	{r1, r2, r3}
 8008cde:	b517      	push	{r0, r1, r2, r4, lr}
 8008ce0:	4c09      	ldr	r4, [pc, #36]	; (8008d08 <sprintf+0x2c>)
 8008ce2:	aa05      	add	r2, sp, #20
 8008ce4:	f852 1b04 	ldr.w	r1, [r2], #4
 8008ce8:	6020      	str	r0, [r4, #0]
 8008cea:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8008cee:	9201      	str	r2, [sp, #4]
 8008cf0:	f7ff fdfe 	bl	80088f0 <_vprintf>
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	6822      	ldr	r2, [r4, #0]
 8008cf8:	6023      	str	r3, [r4, #0]
 8008cfa:	7013      	strb	r3, [r2, #0]
 8008cfc:	b003      	add	sp, #12
 8008cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d02:	b003      	add	sp, #12
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	200000e8 	andcs	r0, r0, r8, ror #1

08008d0c <snprintf>:
 8008d0c:	b40c      	push	{r2, r3}
 8008d0e:	460b      	mov	r3, r1
 8008d10:	b513      	push	{r0, r1, r4, lr}
 8008d12:	4c09      	ldr	r4, [pc, #36]	; (8008d38 <snprintf+0x2c>)
 8008d14:	aa04      	add	r2, sp, #16
 8008d16:	f852 1b04 	ldr.w	r1, [r2], #4
 8008d1a:	6020      	str	r0, [r4, #0]
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	9201      	str	r2, [sp, #4]
 8008d20:	f7ff fde6 	bl	80088f0 <_vprintf>
 8008d24:	2300      	movs	r3, #0
 8008d26:	6822      	ldr	r2, [r4, #0]
 8008d28:	6023      	str	r3, [r4, #0]
 8008d2a:	7013      	strb	r3, [r2, #0]
 8008d2c:	b002      	add	sp, #8
 8008d2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d32:	b002      	add	sp, #8
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop
 8008d38:	200000e8 	andcs	r0, r0, r8, ror #1

08008d3c <vsnprintf>:
 8008d3c:	b538      	push	{r3, r4, r5, lr}
 8008d3e:	4605      	mov	r5, r0
 8008d40:	4c05      	ldr	r4, [pc, #20]	; (8008d58 <vsnprintf+0x1c>)
 8008d42:	4608      	mov	r0, r1
 8008d44:	4611      	mov	r1, r2
 8008d46:	461a      	mov	r2, r3
 8008d48:	6025      	str	r5, [r4, #0]
 8008d4a:	f7ff fdd1 	bl	80088f0 <_vprintf>
 8008d4e:	2300      	movs	r3, #0
 8008d50:	6822      	ldr	r2, [r4, #0]
 8008d52:	6023      	str	r3, [r4, #0]
 8008d54:	7013      	strb	r3, [r2, #0]
 8008d56:	bd38      	pop	{r3, r4, r5, pc}
 8008d58:	200000e8 	andcs	r0, r0, r8, ror #1

08008d5c <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)>:
 8008d5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d5e:	4616      	mov	r6, r2
 8008d60:	1d07      	adds	r7, r0, #4
 8008d62:	4604      	mov	r4, r0
 8008d64:	4613      	mov	r3, r2
 8008d66:	4638      	mov	r0, r7
 8008d68:	f10d 0206 	add.w	r2, sp, #6
 8008d6c:	460d      	mov	r5, r1
 8008d6e:	f000 fc1d 	bl	80095ac <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 8008d72:	b1b6      	cbz	r6, 8008da2 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>
 8008d74:	b1a8      	cbz	r0, 8008da2 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>
 8008d76:	4629      	mov	r1, r5
 8008d78:	4638      	mov	r0, r7
 8008d7a:	f000 fda0 	bl	80098be <ArtNetNode::GetPortProtocol(unsigned int) const>
 8008d7e:	2801      	cmp	r0, #1
 8008d80:	d10f      	bne.n	8008da2 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>
 8008d82:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 8008d86:	b123      	cbz	r3, 8008d92 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x36>
 8008d88:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008d92:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008d96:	b933      	cbnz	r3, 8008da6 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x4a>
 8008d98:	2202      	movs	r2, #2
 8008d9a:	4629      	mov	r1, r5
 8008d9c:	4638      	mov	r0, r7
 8008d9e:	f000 fc48 	bl	8009632 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 8008da2:	b003      	add	sp, #12
 8008da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008da6:	1e71      	subs	r1, r6, #1
 8008da8:	424a      	negs	r2, r1
 8008daa:	414a      	adcs	r2, r1
 8008dac:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 8008db0:	4629      	mov	r1, r5
 8008db2:	f002 fc61 	bl	800b678 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 8008db6:	e7f4      	b.n	8008da2 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>

08008db8 <ArtNet4Node::~ArtNet4Node()>:
 8008db8:	b510      	push	{r4, lr}
 8008dba:	4604      	mov	r4, r0
 8008dbc:	4b05      	ldr	r3, [pc, #20]	; (8008dd4 <ArtNet4Node::~ArtNet4Node()+0x1c>)
 8008dbe:	6003      	str	r3, [r0, #0]
 8008dc0:	f500 60f7 	add.w	r0, r0, #1976	; 0x7b8
 8008dc4:	f002 fb68 	bl	800b498 <E131Bridge::Stop()>
 8008dc8:	1d20      	adds	r0, r4, #4
 8008dca:	f000 f961 	bl	8009090 <ArtNetNode::Stop()>
 8008dce:	4620      	mov	r0, r4
 8008dd0:	bd10      	pop	{r4, pc}
 8008dd2:	bf00      	nop
 8008dd4:	08016954 	stmdaeq	r1, {r2, r4, r6, r8, fp, sp, lr}

08008dd8 <ArtNet4Node::HandleAddress(unsigned char)>:
 8008dd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dda:	4605      	mov	r5, r0
 8008ddc:	460c      	mov	r4, r1
 8008dde:	2600      	movs	r6, #0
 8008de0:	1d07      	adds	r7, r0, #4
 8008de2:	792b      	ldrb	r3, [r5, #4]
 8008de4:	ebb6 0f83 	cmp.w	r6, r3, lsl #2
 8008de8:	d224      	bcs.n	8008e34 <ArtNet4Node::HandleAddress(unsigned char)+0x5c>
 8008dea:	2301      	movs	r3, #1
 8008dec:	4631      	mov	r1, r6
 8008dee:	4638      	mov	r0, r7
 8008df0:	f10d 0206 	add.w	r2, sp, #6
 8008df4:	f000 fbda 	bl	80095ac <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 8008df8:	b150      	cbz	r0, 8008e10 <ArtNet4Node::HandleAddress(unsigned char)+0x38>
 8008dfa:	f895 30a2 	ldrb.w	r3, [r5, #162]	; 0xa2
 8008dfe:	b123      	cbz	r3, 8008e0a <ArtNet4Node::HandleAddress(unsigned char)+0x32>
 8008e00:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008e04:	3301      	adds	r3, #1
 8008e06:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008e0a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008e0e:	b90b      	cbnz	r3, 8008e14 <ArtNet4Node::HandleAddress(unsigned char)+0x3c>
 8008e10:	3601      	adds	r6, #1
 8008e12:	e7e6      	b.n	8008de2 <ArtNet4Node::HandleAddress(unsigned char)+0xa>
 8008e14:	4631      	mov	r1, r6
 8008e16:	4638      	mov	r0, r7
 8008e18:	f000 fd51 	bl	80098be <ArtNetNode::GetPortProtocol(unsigned int) const>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	2a01      	cmp	r2, #1
 8008e20:	bf18      	it	ne
 8008e22:	2202      	movne	r2, #2
 8008e24:	4631      	mov	r1, r6
 8008e26:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008e2a:	f505 60f7 	add.w	r0, r5, #1976	; 0x7b8
 8008e2e:	f002 fc23 	bl	800b678 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 8008e32:	e7ed      	b.n	8008e10 <ArtNet4Node::HandleAddress(unsigned char)+0x38>
 8008e34:	2c13      	cmp	r4, #19
 8008e36:	f004 0603 	and.w	r6, r4, #3
 8008e3a:	d80a      	bhi.n	8008e52 <ArtNet4Node::HandleAddress(unsigned char)+0x7a>
 8008e3c:	2c0f      	cmp	r4, #15
 8008e3e:	d819      	bhi.n	8008e74 <ArtNet4Node::HandleAddress(unsigned char)+0x9c>
 8008e40:	2c02      	cmp	r4, #2
 8008e42:	d015      	beq.n	8008e70 <ArtNet4Node::HandleAddress(unsigned char)+0x98>
 8008e44:	3c03      	subs	r4, #3
 8008e46:	2c01      	cmp	r4, #1
 8008e48:	d810      	bhi.n	8008e6c <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	f885 37c0 	strb.w	r3, [r5, #1984]	; 0x7c0
 8008e50:	e00c      	b.n	8008e6c <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 8008e52:	2c53      	cmp	r4, #83	; 0x53
 8008e54:	d806      	bhi.n	8008e64 <ArtNet4Node::HandleAddress(unsigned char)+0x8c>
 8008e56:	2c4f      	cmp	r4, #79	; 0x4f
 8008e58:	d908      	bls.n	8008e6c <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 8008e5a:	2144      	movs	r1, #68	; 0x44
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	fb01 5506 	mla	r5, r1, r6, r5
 8008e62:	e00b      	b.n	8008e7c <ArtNet4Node::HandleAddress(unsigned char)+0xa4>
 8008e64:	3470      	adds	r4, #112	; 0x70
 8008e66:	b2e4      	uxtb	r4, r4
 8008e68:	2c03      	cmp	r4, #3
 8008e6a:	d90a      	bls.n	8008e82 <ArtNet4Node::HandleAddress(unsigned char)+0xaa>
 8008e6c:	b003      	add	sp, #12
 8008e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e70:	2301      	movs	r3, #1
 8008e72:	e7eb      	b.n	8008e4c <ArtNet4Node::HandleAddress(unsigned char)+0x74>
 8008e74:	2144      	movs	r1, #68	; 0x44
 8008e76:	2301      	movs	r3, #1
 8008e78:	fb01 5506 	mla	r5, r1, r6, r5
 8008e7c:	f8c5 3d04 	str.w	r3, [r5, #3332]	; 0xd04
 8008e80:	e7f4      	b.n	8008e6c <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 8008e82:	4631      	mov	r1, r6
 8008e84:	1d28      	adds	r0, r5, #4
 8008e86:	f000 fd1a 	bl	80098be <ArtNetNode::GetPortProtocol(unsigned int) const>
 8008e8a:	2801      	cmp	r0, #1
 8008e8c:	d1ee      	bne.n	8008e6c <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 8008e8e:	4631      	mov	r1, r6
 8008e90:	f505 60f7 	add.w	r0, r5, #1976	; 0x7b8
 8008e94:	b003      	add	sp, #12
 8008e96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8008e9a:	f002 bf07 	b.w	800bcac <E131Bridge::Clear(unsigned int)>

08008e9e <ArtNet4Node::IsStatusChanged()>:
 8008e9e:	f500 60f7 	add.w	r0, r0, #1976	; 0x7b8
 8008ea2:	f002 befb 	b.w	800bc9c <E131Bridge::IsStatusChanged()>

08008ea6 <ArtNet4Node::~ArtNet4Node()>:
 8008ea6:	b510      	push	{r4, lr}
 8008ea8:	4604      	mov	r4, r0
 8008eaa:	f7ff ff85 	bl	8008db8 <ArtNet4Node::~ArtNet4Node()>
 8008eae:	4620      	mov	r0, r4
 8008eb0:	f00b fb88 	bl	80145c4 <operator delete(void*)>
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	bd10      	pop	{r4, pc}

08008eb8 <ArtNet4Node::GetStatus(unsigned int)>:
 8008eb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008eba:	2301      	movs	r3, #1
 8008ebc:	4604      	mov	r4, r0
 8008ebe:	f10d 0206 	add.w	r2, sp, #6
 8008ec2:	f500 60f7 	add.w	r0, r0, #1976	; 0x7b8
 8008ec6:	460d      	mov	r5, r1
 8008ec8:	f002 fc4e 	bl	800b768 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 8008ecc:	b188      	cbz	r0, 8008ef2 <ArtNet4Node::GetStatus(unsigned int)+0x3a>
 8008ece:	2144      	movs	r1, #68	; 0x44
 8008ed0:	fb01 4405 	mla	r4, r1, r5, r4
 8008ed4:	f894 3d0a 	ldrb.w	r3, [r4, #3338]	; 0xd0a
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f894 3d09 	ldrb.w	r3, [r4, #3337]	; 0xd09
 8008ede:	bf14      	ite	ne
 8008ee0:	2080      	movne	r0, #128	; 0x80
 8008ee2:	2000      	moveq	r0, #0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	bf14      	ite	ne
 8008ee8:	2308      	movne	r3, #8
 8008eea:	2300      	moveq	r3, #0
 8008eec:	4318      	orrs	r0, r3
 8008eee:	f040 0001 	orr.w	r0, r0, #1
 8008ef2:	b003      	add	sp, #12
 8008ef4:	bd30      	pop	{r4, r5, pc}
	...

08008ef8 <ArtNet4Node::ArtNet4Node(unsigned char)>:
 8008ef8:	b538      	push	{r3, r4, r5, lr}
 8008efa:	4604      	mov	r4, r0
 8008efc:	1d05      	adds	r5, r0, #4
 8008efe:	4628      	mov	r0, r5
 8008f00:	f000 f964 	bl	80091cc <ArtNetNode::ArtNetNode(unsigned char)>
 8008f04:	4b05      	ldr	r3, [pc, #20]	; (8008f1c <ArtNet4Node::ArtNet4Node(unsigned char)+0x24>)
 8008f06:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 8008f0a:	6023      	str	r3, [r4, #0]
 8008f0c:	f002 fb14 	bl	800b538 <E131Bridge::E131Bridge()>
 8008f10:	4628      	mov	r0, r5
 8008f12:	4621      	mov	r1, r4
 8008f14:	f000 f866 	bl	8008fe4 <ArtNetNode::SetArtNet4Handler(ArtNet4Handler*)>
 8008f18:	4620      	mov	r0, r4
 8008f1a:	bd38      	pop	{r3, r4, r5, pc}
 8008f1c:	08016954 	stmdaeq	r1, {r2, r4, r6, r8, fp, sp, lr}

08008f20 <ArtNet4Node::Start()>:
 8008f20:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f22:	4604      	mov	r4, r0
 8008f24:	2500      	movs	r5, #0
 8008f26:	1d06      	adds	r6, r0, #4
 8008f28:	7923      	ldrb	r3, [r4, #4]
 8008f2a:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
 8008f2e:	d218      	bcs.n	8008f62 <ArtNet4Node::Start()+0x42>
 8008f30:	2301      	movs	r3, #1
 8008f32:	4629      	mov	r1, r5
 8008f34:	4630      	mov	r0, r6
 8008f36:	f10d 0206 	add.w	r2, sp, #6
 8008f3a:	f000 fb37 	bl	80095ac <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 8008f3e:	b170      	cbz	r0, 8008f5e <ArtNet4Node::Start()+0x3e>
 8008f40:	4629      	mov	r1, r5
 8008f42:	4630      	mov	r0, r6
 8008f44:	f000 fcbb 	bl	80098be <ArtNetNode::GetPortProtocol(unsigned int) const>
 8008f48:	2801      	cmp	r0, #1
 8008f4a:	d108      	bne.n	8008f5e <ArtNet4Node::Start()+0x3e>
 8008f4c:	4629      	mov	r1, r5
 8008f4e:	4630      	mov	r0, r6
 8008f50:	f000 fce6 	bl	8009920 <ArtNetNode::GetMergeMode(unsigned int) const>
 8008f54:	2344      	movs	r3, #68	; 0x44
 8008f56:	436b      	muls	r3, r5
 8008f58:	f604 5204 	addw	r2, r4, #3332	; 0xd04
 8008f5c:	50d0      	str	r0, [r2, r3]
 8008f5e:	3501      	adds	r5, #1
 8008f60:	e7e2      	b.n	8008f28 <ArtNet4Node::Start()+0x8>
 8008f62:	f8d4 36d0 	ldr.w	r3, [r4, #1744]	; 0x6d0
 8008f66:	4630      	mov	r0, r6
 8008f68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f6c:	bf2c      	ite	cs
 8008f6e:	2300      	movcs	r3, #0
 8008f70:	2301      	movcc	r3, #1
 8008f72:	f884 3cb1 	strb.w	r3, [r4, #3249]	; 0xcb1
 8008f76:	f894 36e0 	ldrb.w	r3, [r4, #1760]	; 0x6e0
 8008f7a:	f884 3cb2 	strb.w	r3, [r4, #3250]	; 0xcb2
 8008f7e:	68e3      	ldr	r3, [r4, #12]
 8008f80:	f8c4 37bc 	str.w	r3, [r4, #1980]	; 0x7bc
 8008f84:	f000 f840 	bl	8009008 <ArtNetNode::Start()>
 8008f88:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 8008f8c:	b002      	add	sp, #8
 8008f8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008f92:	f002 ba45 	b.w	800b420 <E131Bridge::Start()>

08008f96 <ArtNet4Node::Run()>:
 8008f96:	b510      	push	{r4, lr}
 8008f98:	4604      	mov	r4, r0
 8008f9a:	3004      	adds	r0, #4
 8008f9c:	f000 fa28 	bl	80093f0 <ArtNetNode::Run()>
 8008fa0:	f894 3cc3 	ldrb.w	r3, [r4, #3267]	; 0xcc3
 8008fa4:	b12b      	cbz	r3, 8008fb2 <ArtNet4Node::Run()+0x1c>
 8008fa6:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 8008faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fae:	f002 bedf 	b.w	800bd70 <E131Bridge::Run()>
 8008fb2:	bd10      	pop	{r4, pc}

08008fb4 <ArtNet4Node::Print()>:
 8008fb4:	b510      	push	{r4, lr}
 8008fb6:	4604      	mov	r4, r0
 8008fb8:	3004      	adds	r0, #4
 8008fba:	f001 fc31 	bl	800a820 <ArtNetNode::Print()>
 8008fbe:	f894 36e2 	ldrb.w	r3, [r4, #1762]	; 0x6e2
 8008fc2:	b15b      	cbz	r3, 8008fdc <ArtNet4Node::Print()+0x28>
 8008fc4:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 8008fc8:	b113      	cbz	r3, 8008fd0 <ArtNet4Node::Print()+0x1c>
 8008fca:	4805      	ldr	r0, [pc, #20]	; (8008fe0 <ArtNet4Node::Print()+0x2c>)
 8008fcc:	f7ff fe76 	bl	8008cbc <printf>
 8008fd0:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 8008fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fd8:	f003 b91e 	b.w	800c218 <E131Bridge::Print()>
 8008fdc:	bd10      	pop	{r4, pc}
 8008fde:	bf00      	nop
 8008fe0:	0801692d 	stmdaeq	r1, {r0, r2, r3, r5, r8, fp, sp, lr}

08008fe4 <ArtNetNode::SetArtNet4Handler(ArtNet4Handler*)>:
 8008fe4:	61c1      	str	r1, [r0, #28]
 8008fe6:	4770      	bx	lr

08008fe8 <strncpy.isra.0>:
 8008fe8:	3901      	subs	r1, #1
 8008fea:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008fee:	b92b      	cbnz	r3, 8008ffc <strncpy.isra.0+0x14>
 8008ff0:	4402      	add	r2, r0
 8008ff2:	4290      	cmp	r0, r2
 8008ff4:	d007      	beq.n	8009006 <strncpy.isra.0+0x1e>
 8008ff6:	f800 3b01 	strb.w	r3, [r0], #1
 8008ffa:	e7fa      	b.n	8008ff2 <strncpy.isra.0+0xa>
 8008ffc:	3a01      	subs	r2, #1
 8008ffe:	f800 3b01 	strb.w	r3, [r0], #1
 8009002:	d1f2      	bne.n	8008fea <strncpy.isra.0+0x2>
 8009004:	4770      	bx	lr
 8009006:	4770      	bx	lr

08009008 <ArtNetNode::Start()>:
 8009008:	b570      	push	{r4, r5, r6, lr}
 800900a:	4d1f      	ldr	r5, [pc, #124]	; (8009088 <ArtNetNode::Start()+0x80>)
 800900c:	f990 3096 	ldrsb.w	r3, [r0, #150]	; 0x96
 8009010:	682a      	ldr	r2, [r5, #0]
 8009012:	f023 0302 	bic.w	r3, r3, #2
 8009016:	7851      	ldrb	r1, [r2, #1]
 8009018:	4604      	mov	r4, r0
 800901a:	2900      	cmp	r1, #0
 800901c:	bf14      	ite	ne
 800901e:	2102      	movne	r1, #2
 8009020:	2100      	moveq	r1, #0
 8009022:	430b      	orrs	r3, r1
 8009024:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
 8009028:	7812      	ldrb	r2, [r2, #0]
 800902a:	f023 0304 	bic.w	r3, r3, #4
 800902e:	2a00      	cmp	r2, #0
 8009030:	bf14      	ite	ne
 8009032:	2204      	movne	r2, #4
 8009034:	2200      	moveq	r2, #0
 8009036:	4313      	orrs	r3, r2
 8009038:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
 800903c:	f001 f8ec 	bl	800a218 <ArtNetNode::FillPollReply()>
 8009040:	f641 1136 	movw	r1, #6454	; 0x1936
 8009044:	6828      	ldr	r0, [r5, #0]
 8009046:	f008 fc9d 	bl	8011984 <Network::Begin(unsigned short)>
 800904a:	2302      	movs	r3, #2
 800904c:	f884 36d5 	strb.w	r3, [r4, #1749]	; 0x6d5
 8009050:	6963      	ldr	r3, [r4, #20]
 8009052:	6060      	str	r0, [r4, #4]
 8009054:	b16b      	cbz	r3, 8009072 <ArtNetNode::Start()+0x6a>
 8009056:	2500      	movs	r5, #0
 8009058:	f504 66ef 	add.w	r6, r4, #1912	; 0x778
 800905c:	012b      	lsls	r3, r5, #4
 800905e:	5cf3      	ldrb	r3, [r6, r3]
 8009060:	b123      	cbz	r3, 800906c <ArtNetNode::Start()+0x64>
 8009062:	6960      	ldr	r0, [r4, #20]
 8009064:	4629      	mov	r1, r5
 8009066:	6803      	ldr	r3, [r0, #0]
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	4798      	blx	r3
 800906c:	3501      	adds	r5, #1
 800906e:	2d04      	cmp	r5, #4
 8009070:	d1f4      	bne.n	800905c <ArtNetNode::Start()+0x54>
 8009072:	4b06      	ldr	r3, [pc, #24]	; (800908c <ArtNetNode::Start()+0x84>)
 8009074:	2102      	movs	r1, #2
 8009076:	6818      	ldr	r0, [r3, #0]
 8009078:	f00b f9c4 	bl	8014404 <LedBlink::SetMode(ledblink::Mode)>
 800907c:	4620      	mov	r0, r4
 800907e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009082:	2100      	movs	r1, #0
 8009084:	f001 b93a 	b.w	800a2fc <ArtNetNode::SendPollRelply(bool)>
 8009088:	2000a29c 	mulcs	r0, ip, r2
 800908c:	2000a9c0 	andcs	sl, r0, r0, asr #19

08009090 <ArtNetNode::Stop()>:
 8009090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009094:	2500      	movs	r5, #0
 8009096:	4604      	mov	r4, r0
 8009098:	4606      	mov	r6, r0
 800909a:	46a9      	mov	r9, r5
 800909c:	f04f 0a01 	mov.w	sl, #1
 80090a0:	4f1f      	ldr	r7, [pc, #124]	; (8009120 <ArtNetNode::Stop()+0x90>)
 80090a2:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8009124 <ArtNetNode::Stop()+0x94>
 80090a6:	f8d6 3700 	ldr.w	r3, [r6, #1792]	; 0x700
 80090aa:	b97b      	cbnz	r3, 80090cc <ArtNetNode::Stop()+0x3c>
 80090ac:	68a0      	ldr	r0, [r4, #8]
 80090ae:	b118      	cbz	r0, 80090b8 <ArtNetNode::Stop()+0x28>
 80090b0:	6803      	ldr	r3, [r0, #0]
 80090b2:	4629      	mov	r1, r5
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	4798      	blx	r3
 80090b8:	f8d8 3000 	ldr.w	r3, [r8]
 80090bc:	f8c7 9600 	str.w	r9, [r7, #1536]	; 0x600
 80090c0:	07db      	lsls	r3, r3, #31
 80090c2:	bf58      	it	pl
 80090c4:	f8c8 a000 	strpl.w	sl, [r8]
 80090c8:	f886 9705 	strb.w	r9, [r6, #1797]	; 0x705
 80090cc:	3501      	adds	r5, #1
 80090ce:	2d04      	cmp	r5, #4
 80090d0:	f106 0624 	add.w	r6, r6, #36	; 0x24
 80090d4:	f207 6704 	addw	r7, r7, #1540	; 0x604
 80090d8:	d1e5      	bne.n	80090a6 <ArtNetNode::Stop()+0x16>
 80090da:	6963      	ldr	r3, [r4, #20]
 80090dc:	b16b      	cbz	r3, 80090fa <ArtNetNode::Stop()+0x6a>
 80090de:	2500      	movs	r5, #0
 80090e0:	f504 66ef 	add.w	r6, r4, #1912	; 0x778
 80090e4:	012b      	lsls	r3, r5, #4
 80090e6:	5cf3      	ldrb	r3, [r6, r3]
 80090e8:	b123      	cbz	r3, 80090f4 <ArtNetNode::Stop()+0x64>
 80090ea:	6960      	ldr	r0, [r4, #20]
 80090ec:	4629      	mov	r1, r5
 80090ee:	6803      	ldr	r3, [r0, #0]
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	4798      	blx	r3
 80090f4:	3501      	adds	r5, #1
 80090f6:	2d04      	cmp	r5, #4
 80090f8:	d1f4      	bne.n	80090e4 <ArtNetNode::Stop()+0x54>
 80090fa:	4b0b      	ldr	r3, [pc, #44]	; (8009128 <ArtNetNode::Stop()+0x98>)
 80090fc:	2100      	movs	r1, #0
 80090fe:	6818      	ldr	r0, [r3, #0]
 8009100:	f00b f980 	bl	8014404 <LedBlink::SetMode(ledblink::Mode)>
 8009104:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8009108:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800910c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009110:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8009114:	2300      	movs	r3, #0
 8009116:	f884 36d5 	strb.w	r3, [r4, #1749]	; 0x6d5
 800911a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800911e:	bf00      	nop
 8009120:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8009124:	200000ec 	andcs	r0, r0, ip, ror #1
 8009128:	2000a9c0 	andcs	sl, r0, r0, asr #19

0800912c <ArtNetNode::SetShortName(char const*)>:
 800912c:	b570      	push	{r4, r5, r6, lr}
 800912e:	f100 0542 	add.w	r5, r0, #66	; 0x42
 8009132:	4604      	mov	r4, r0
 8009134:	2211      	movs	r2, #17
 8009136:	4628      	mov	r0, r5
 8009138:	f7ff ff56 	bl	8008fe8 <strncpy.isra.0>
 800913c:	2300      	movs	r3, #0
 800913e:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
 8009142:	462b      	mov	r3, r5
 8009144:	f104 0154 	add.w	r1, r4, #84	; 0x54
 8009148:	428b      	cmp	r3, r1
 800914a:	d004      	beq.n	8009156 <ArtNetNode::SetShortName(char const*)+0x2a>
 800914c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009150:	f883 254b 	strb.w	r2, [r3, #1355]	; 0x54b
 8009154:	e7f8      	b.n	8009148 <ArtNetNode::SetShortName(char const*)+0x1c>
 8009156:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 800915a:	2b02      	cmp	r3, #2
 800915c:	d10d      	bne.n	800917a <ArtNetNode::SetShortName(char const*)+0x4e>
 800915e:	6a20      	ldr	r0, [r4, #32]
 8009160:	b118      	cbz	r0, 800916a <ArtNetNode::SetShortName(char const*)+0x3e>
 8009162:	6803      	ldr	r3, [r0, #0]
 8009164:	4629      	mov	r1, r5
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	4798      	blx	r3
 800916a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800916c:	b128      	cbz	r0, 800917a <ArtNetNode::SetShortName(char const*)+0x4e>
 800916e:	6803      	ldr	r3, [r0, #0]
 8009170:	4629      	mov	r1, r5
 8009172:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	4718      	bx	r3
 800917a:	bd70      	pop	{r4, r5, r6, pc}

0800917c <ArtNetNode::SetLongName(char const*)>:
 800917c:	b570      	push	{r4, r5, r6, lr}
 800917e:	f100 0554 	add.w	r5, r0, #84	; 0x54
 8009182:	4604      	mov	r4, r0
 8009184:	223f      	movs	r2, #63	; 0x3f
 8009186:	4628      	mov	r0, r5
 8009188:	f7ff ff2e 	bl	8008fe8 <strncpy.isra.0>
 800918c:	2300      	movs	r3, #0
 800918e:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
 8009192:	462b      	mov	r3, r5
 8009194:	f104 0194 	add.w	r1, r4, #148	; 0x94
 8009198:	428b      	cmp	r3, r1
 800919a:	d004      	beq.n	80091a6 <ArtNetNode::SetLongName(char const*)+0x2a>
 800919c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091a0:	f883 254b 	strb.w	r2, [r3, #1355]	; 0x54b
 80091a4:	e7f8      	b.n	8009198 <ArtNetNode::SetLongName(char const*)+0x1c>
 80091a6:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 80091aa:	2b02      	cmp	r3, #2
 80091ac:	d10d      	bne.n	80091ca <ArtNetNode::SetLongName(char const*)+0x4e>
 80091ae:	6a20      	ldr	r0, [r4, #32]
 80091b0:	b118      	cbz	r0, 80091ba <ArtNetNode::SetLongName(char const*)+0x3e>
 80091b2:	6803      	ldr	r3, [r0, #0]
 80091b4:	4629      	mov	r1, r5
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	4798      	blx	r3
 80091ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80091bc:	b128      	cbz	r0, 80091ca <ArtNetNode::SetLongName(char const*)+0x4e>
 80091be:	6803      	ldr	r3, [r0, #0]
 80091c0:	4629      	mov	r1, r5
 80091c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	4718      	bx	r3
 80091ca:	bd70      	pop	{r4, r5, r6, pc}

080091cc <ArtNetNode::ArtNetNode(unsigned char)>:
 80091cc:	2300      	movs	r3, #0
 80091ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091d2:	2901      	cmp	r1, #1
 80091d4:	bf28      	it	cs
 80091d6:	2101      	movcs	r1, #1
 80091d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091da:	4604      	mov	r4, r0
 80091dc:	e9c0 2301 	strd	r2, r3, [r0, #4]
 80091e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80091e4:	4a41      	ldr	r2, [pc, #260]	; (80092ec <ArtNetNode::ArtNetNode(unsigned char)+0x120>)
 80091e6:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80091ea:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80091ee:	7001      	strb	r1, [r0, #0]
 80091f0:	6010      	str	r0, [r2, #0]
 80091f2:	b085      	sub	sp, #20
 80091f4:	6243      	str	r3, [r0, #36]	; 0x24
 80091f6:	f8c0 3664 	str.w	r3, [r0, #1636]	; 0x664
 80091fa:	f8c0 3668 	str.w	r3, [r0, #1640]	; 0x668
 80091fe:	f880 366e 	strb.w	r3, [r0, #1646]	; 0x66e
 8009202:	f100 0228 	add.w	r2, r0, #40	; 0x28
 8009206:	f100 01a0 	add.w	r1, r0, #160	; 0xa0
 800920a:	428a      	cmp	r2, r1
 800920c:	d002      	beq.n	8009214 <ArtNetNode::ArtNetNode(unsigned char)+0x48>
 800920e:	f802 3b01 	strb.w	r3, [r2], #1
 8009212:	e7fa      	b.n	800920a <ArtNetNode::ArtNetNode(unsigned char)+0x3e>
 8009214:	4b36      	ldr	r3, [pc, #216]	; (80092f0 <ArtNetNode::ArtNetNode(unsigned char)+0x124>)
 8009216:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800921a:	6818      	ldr	r0, [r3, #0]
 800921c:	6903      	ldr	r3, [r0, #16]
 800921e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009220:	6982      	ldr	r2, [r0, #24]
 8009222:	ea63 0302 	orn	r3, r3, r2
 8009226:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009228:	6363      	str	r3, [r4, #52]	; 0x34
 800922a:	f008 fbb1 	bl	8011990 <Network::MacAddressCopyTo(unsigned char*)>
 800922e:	23d0      	movs	r3, #208	; 0xd0
 8009230:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8009234:	f244 0318 	movw	r3, #16408	; 0x4018
 8009238:	2200      	movs	r2, #0
 800923a:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 800923e:	f204 61e4 	addw	r1, r4, #1764	; 0x6e4
 8009242:	f504 63d8 	add.w	r3, r4, #1728	; 0x6c0
 8009246:	428b      	cmp	r3, r1
 8009248:	d002      	beq.n	8009250 <ArtNetNode::ArtNetNode(unsigned char)+0x84>
 800924a:	f803 2b01 	strb.w	r2, [r3], #1
 800924e:	e7fa      	b.n	8009246 <ArtNetNode::ArtNetNode(unsigned char)+0x7a>
 8009250:	f240 1201 	movw	r2, #257	; 0x101
 8009254:	f8a4 26d4 	strh.w	r2, [r4, #1748]	; 0x6d4
 8009258:	f242 7210 	movw	r2, #10000	; 0x2710
 800925c:	2500      	movs	r5, #0
 800925e:	2708      	movs	r7, #8
 8009260:	f8c4 26cc 	str.w	r2, [r4, #1740]	; 0x6cc
 8009264:	f204 7174 	addw	r1, r4, #1908	; 0x774
 8009268:	f204 76b4 	addw	r6, r4, #1972	; 0x7b4
 800926c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009270:	4283      	cmp	r3, r0
 8009272:	d005      	beq.n	8009280 <ArtNetNode::ArtNetNode(unsigned char)+0xb4>
 8009274:	f803 5b01 	strb.w	r5, [r3], #1
 8009278:	e7fa      	b.n	8009270 <ArtNetNode::ArtNetNode(unsigned char)+0xa4>
 800927a:	4603      	mov	r3, r0
 800927c:	4611      	mov	r1, r2
 800927e:	e7f5      	b.n	800926c <ArtNetNode::ArtNetNode(unsigned char)+0xa0>
 8009280:	460a      	mov	r2, r1
 8009282:	f101 0310 	add.w	r3, r1, #16
 8009286:	429a      	cmp	r2, r3
 8009288:	d002      	beq.n	8009290 <ArtNetNode::ArtNetNode(unsigned char)+0xc4>
 800928a:	f802 5b01 	strb.w	r5, [r2], #1
 800928e:	e7fa      	b.n	8009286 <ArtNetNode::ArtNetNode(unsigned char)+0xba>
 8009290:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009292:	4296      	cmp	r6, r2
 8009294:	608b      	str	r3, [r1, #8]
 8009296:	70cf      	strb	r7, [r1, #3]
 8009298:	d1ef      	bne.n	800927a <ArtNetNode::ArtNetNode(unsigned char)+0xae>
 800929a:	4620      	mov	r0, r4
 800929c:	4915      	ldr	r1, [pc, #84]	; (80092f4 <ArtNetNode::ArtNetNode(unsigned char)+0x128>)
 800929e:	f7ff ff45 	bl	800912c <ArtNetNode::SetShortName(char const*)>
 80092a2:	4b15      	ldr	r3, [pc, #84]	; (80092f8 <ArtNetNode::ArtNetNode(unsigned char)+0x12c>)
 80092a4:	f204 657f 	addw	r5, r4, #1663	; 0x67f
 80092a8:	9302      	str	r3, [sp, #8]
 80092aa:	2304      	movs	r3, #4
 80092ac:	9301      	str	r3, [sp, #4]
 80092ae:	4b13      	ldr	r3, [pc, #76]	; (80092fc <ArtNetNode::ArtNetNode(unsigned char)+0x130>)
 80092b0:	4a13      	ldr	r2, [pc, #76]	; (8009300 <ArtNetNode::ArtNetNode(unsigned char)+0x134>)
 80092b2:	9300      	str	r3, [sp, #0]
 80092b4:	2140      	movs	r1, #64	; 0x40
 80092b6:	4b13      	ldr	r3, [pc, #76]	; (8009304 <ArtNetNode::ArtNetNode(unsigned char)+0x138>)
 80092b8:	4628      	mov	r0, r5
 80092ba:	f7ff fd27 	bl	8008d0c <snprintf>
 80092be:	4629      	mov	r1, r5
 80092c0:	4620      	mov	r0, r4
 80092c2:	f7ff ff5b 	bl	800917c <ArtNetNode::SetLongName(char const*)>
 80092c6:	4b10      	ldr	r3, [pc, #64]	; (8009308 <ArtNetNode::ArtNetNode(unsigned char)+0x13c>)
 80092c8:	f204 606f 	addw	r0, r4, #1647	; 0x66f
 80092cc:	781a      	ldrb	r2, [r3, #0]
 80092ce:	490f      	ldr	r1, [pc, #60]	; (800930c <ArtNetNode::ArtNetNode(unsigned char)+0x140>)
 80092d0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 80092d4:	785b      	ldrb	r3, [r3, #1]
 80092d6:	220f      	movs	r2, #15
 80092d8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80092dc:	f7ff fe84 	bl	8008fe8 <strncpy.isra.0>
 80092e0:	2300      	movs	r3, #0
 80092e2:	4620      	mov	r0, r4
 80092e4:	f884 367e 	strb.w	r3, [r4, #1662]	; 0x67e
 80092e8:	b005      	add	sp, #20
 80092ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092ec:	20001900 	andcs	r1, r0, r0, lsl #18
 80092f0:	2000a29c 	mulcs	r0, ip, r2
 80092f4:	080169dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, fp, sp, lr}
 80092f8:	080169b7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, r8, fp, sp, lr}
 80092fc:	080169d4 	stmdaeq	r1, {r2, r4, r6, r7, r8, fp, sp, lr}
 8009300:	080169ab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r8, fp, sp, lr}
 8009304:	080169a1 	stmdaeq	r1, {r0, r5, r7, r8, fp, sp, lr}
 8009308:	08016c9d 	stmdaeq	r1, {r0, r2, r3, r4, r7, sl, fp, sp, lr}
 800930c:	080169cb 	stmdaeq	r1, {r0, r1, r3, r6, r7, r8, fp, sp, lr}

08009310 <ArtNetNode::SetOemValue(unsigned char const*)>:
 8009310:	780b      	ldrb	r3, [r1, #0]
 8009312:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8009316:	784b      	ldrb	r3, [r1, #1]
 8009318:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800931c:	4770      	bx	lr
	...

08009320 <ArtNetNode::SetNetworkDataLossCondition()>:
 8009320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009324:	2400      	movs	r4, #0
 8009326:	4606      	mov	r6, r0
 8009328:	4605      	mov	r5, r0
 800932a:	46a0      	mov	r8, r4
 800932c:	46a2      	mov	sl, r4
 800932e:	4f1a      	ldr	r7, [pc, #104]	; (8009398 <ArtNetNode::SetNetworkDataLossCondition()+0x78>)
 8009330:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800939c <ArtNetNode::SetNetworkDataLossCondition()+0x7c>
 8009334:	f880 46da 	strb.w	r4, [r0, #1754]	; 0x6da
 8009338:	f880 46d9 	strb.w	r4, [r0, #1753]	; 0x6d9
 800933c:	7833      	ldrb	r3, [r6, #0]
 800933e:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
 8009342:	d227      	bcs.n	8009394 <ArtNetNode::SetNetworkDataLossCondition()+0x74>
 8009344:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 8009348:	b953      	cbnz	r3, 8009360 <ArtNetNode::SetNetworkDataLossCondition()+0x40>
 800934a:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 800934e:	b13b      	cbz	r3, 8009360 <ArtNetNode::SetNetworkDataLossCondition()+0x40>
 8009350:	68b0      	ldr	r0, [r6, #8]
 8009352:	b118      	cbz	r0, 800935c <ArtNetNode::SetNetworkDataLossCondition()+0x3c>
 8009354:	6803      	ldr	r3, [r0, #0]
 8009356:	4621      	mov	r1, r4
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	4798      	blx	r3
 800935c:	f885 8705 	strb.w	r8, [r5, #1797]	; 0x705
 8009360:	f895 36e7 	ldrb.w	r3, [r5, #1767]	; 0x6e7
 8009364:	f8c5 86f0 	str.w	r8, [r5, #1776]	; 0x6f0
 8009368:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800936c:	f885 36e7 	strb.w	r3, [r5, #1767]	; 0x6e7
 8009370:	f8c5 86f8 	str.w	r8, [r5, #1784]	; 0x6f8
 8009374:	f8d9 3000 	ldr.w	r3, [r9]
 8009378:	f8c7 a600 	str.w	sl, [r7, #1536]	; 0x600
 800937c:	07db      	lsls	r3, r3, #31
 800937e:	bf58      	it	pl
 8009380:	2301      	movpl	r3, #1
 8009382:	f104 0401 	add.w	r4, r4, #1
 8009386:	bf58      	it	pl
 8009388:	f8c9 3000 	strpl.w	r3, [r9]
 800938c:	f207 6704 	addw	r7, r7, #1540	; 0x604
 8009390:	3524      	adds	r5, #36	; 0x24
 8009392:	e7d3      	b.n	800933c <ArtNetNode::SetNetworkDataLossCondition()+0x1c>
 8009394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009398:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800939c:	200000ec 	andcs	r0, r0, ip, ror #1

080093a0 <ArtNetNode::GetType()>:
 80093a0:	f8b0 3570 	ldrh.w	r3, [r0, #1392]	; 0x570
 80093a4:	b530      	push	{r4, r5, lr}
 80093a6:	2b0b      	cmp	r3, #11
 80093a8:	d803      	bhi.n	80093b2 <ArtNetNode::GetType()+0x12>
 80093aa:	2300      	movs	r3, #0
 80093ac:	f8a0 3572 	strh.w	r3, [r0, #1394]	; 0x572
 80093b0:	bd30      	pop	{r4, r5, pc}
 80093b2:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d1f7      	bne.n	80093aa <ArtNetNode::GetType()+0xa>
 80093ba:	f890 30ab 	ldrb.w	r3, [r0, #171]	; 0xab
 80093be:	2b0e      	cmp	r3, #14
 80093c0:	d1f3      	bne.n	80093aa <ArtNetNode::GetType()+0xa>
 80093c2:	4a0a      	ldr	r2, [pc, #40]	; (80093ec <ArtNetNode::GetType()+0x4c>)
 80093c4:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
 80093c8:	f100 05a8 	add.w	r5, r0, #168	; 0xa8
 80093cc:	42ab      	cmp	r3, r5
 80093ce:	d006      	beq.n	80093de <ArtNetNode::GetType()+0x3e>
 80093d0:	f813 4b01 	ldrb.w	r4, [r3], #1
 80093d4:	f812 1b01 	ldrb.w	r1, [r2], #1
 80093d8:	428c      	cmp	r4, r1
 80093da:	d0f7      	beq.n	80093cc <ArtNetNode::GetType()+0x2c>
 80093dc:	e7e5      	b.n	80093aa <ArtNetNode::GetType()+0xa>
 80093de:	f890 20a9 	ldrb.w	r2, [r0, #169]	; 0xa9
 80093e2:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
 80093e6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80093ea:	e7df      	b.n	80093ac <ArtNetNode::GetType()+0xc>
 80093ec:	080167e8 	stmdaeq	r1, {r3, r5, r6, r7, r8, r9, sl, sp, lr}

080093f0 <ArtNetNode::Run()>:
 80093f0:	b530      	push	{r4, r5, lr}
 80093f2:	b085      	sub	sp, #20
 80093f4:	f10d 030e 	add.w	r3, sp, #14
 80093f8:	9300      	str	r3, [sp, #0]
 80093fa:	4604      	mov	r4, r0
 80093fc:	f200 536c 	addw	r3, r0, #1388	; 0x56c
 8009400:	f100 01a0 	add.w	r1, r0, #160	; 0xa0
 8009404:	f240 42cc 	movw	r2, #1228	; 0x4cc
 8009408:	7900      	ldrb	r0, [r0, #4]
 800940a:	f007 fd8f 	bl	8010f2c <udp_recv>
 800940e:	4b65      	ldr	r3, [pc, #404]	; (80095a4 <ArtNetNode::Run()+0x1b4>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f8c4 3664 	str.w	r3, [r4, #1636]	; 0x664
 8009416:	2800      	cmp	r0, #0
 8009418:	d143      	bne.n	80094a2 <ArtNetNode::Run()+0xb2>
 800941a:	f8d4 26cc 	ldr.w	r2, [r4, #1740]	; 0x6cc
 800941e:	b13a      	cbz	r2, 8009430 <ArtNetNode::Run()+0x40>
 8009420:	f8d4 1668 	ldr.w	r1, [r4, #1640]	; 0x668
 8009424:	1a5b      	subs	r3, r3, r1
 8009426:	429a      	cmp	r2, r3
 8009428:	d802      	bhi.n	8009430 <ArtNetNode::Run()+0x40>
 800942a:	4620      	mov	r0, r4
 800942c:	f7ff ff78 	bl	8009320 <ArtNetNode::SetNetworkDataLossCondition()>
 8009430:	f894 36d6 	ldrb.w	r3, [r4, #1750]	; 0x6d6
 8009434:	b16b      	cbz	r3, 8009452 <ArtNetNode::Run()+0x62>
 8009436:	69e0      	ldr	r0, [r4, #28]
 8009438:	f894 56db 	ldrb.w	r5, [r4, #1755]	; 0x6db
 800943c:	b120      	cbz	r0, 8009448 <ArtNetNode::Run()+0x58>
 800943e:	6803      	ldr	r3, [r0, #0]
 8009440:	695b      	ldr	r3, [r3, #20]
 8009442:	4798      	blx	r3
 8009444:	4305      	orrs	r5, r0
 8009446:	b2ed      	uxtb	r5, r5
 8009448:	b11d      	cbz	r5, 8009452 <ArtNetNode::Run()+0x62>
 800944a:	2100      	movs	r1, #0
 800944c:	4620      	mov	r0, r4
 800944e:	f000 ff55 	bl	800a2fc <ArtNetNode::SendPollRelply(bool)>
 8009452:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 8009456:	f8d4 2668 	ldr.w	r2, [r4, #1640]	; 0x668
 800945a:	1a9b      	subs	r3, r3, r2
 800945c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009460:	d305      	bcc.n	800946e <ArtNetNode::Run()+0x7e>
 8009462:	f894 36dd 	ldrb.w	r3, [r4, #1757]	; 0x6dd
 8009466:	f023 0302 	bic.w	r3, r3, #2
 800946a:	f884 36dd 	strb.w	r3, [r4, #1757]	; 0x6dd
 800946e:	6963      	ldr	r3, [r4, #20]
 8009470:	b113      	cbz	r3, 8009478 <ArtNetNode::Run()+0x88>
 8009472:	4620      	mov	r0, r4
 8009474:	f000 fd56 	bl	8009f24 <ArtNetNode::HandleDmxIn()>
 8009478:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800947c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009480:	2bc0      	cmp	r3, #192	; 0xc0
 8009482:	d10c      	bne.n	800949e <ArtNetNode::Run()+0xae>
 8009484:	4b48      	ldr	r3, [pc, #288]	; (80095a8 <ArtNetNode::Run()+0x1b8>)
 8009486:	6818      	ldr	r0, [r3, #0]
 8009488:	6843      	ldr	r3, [r0, #4]
 800948a:	2b04      	cmp	r3, #4
 800948c:	d007      	beq.n	800949e <ArtNetNode::Run()+0xae>
 800948e:	f894 36dd 	ldrb.w	r3, [r4, #1757]	; 0x6dd
 8009492:	2b00      	cmp	r3, #0
 8009494:	f000 8084 	beq.w	80095a0 <ArtNetNode::Run()+0x1b0>
 8009498:	2103      	movs	r1, #3
 800949a:	f00a ffb3 	bl	8014404 <LedBlink::SetMode(ledblink::Mode)>
 800949e:	b005      	add	sp, #20
 80094a0:	bd30      	pop	{r4, r5, pc}
 80094a2:	f8a4 0570 	strh.w	r0, [r4, #1392]	; 0x570
 80094a6:	f8c4 3668 	str.w	r3, [r4, #1640]	; 0x668
 80094aa:	4620      	mov	r0, r4
 80094ac:	f7ff ff78 	bl	80093a0 <ArtNetNode::GetType()>
 80094b0:	f894 36d9 	ldrb.w	r3, [r4, #1753]	; 0x6d9
 80094b4:	b153      	cbz	r3, 80094cc <ArtNetNode::Run()+0xdc>
 80094b6:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 80094ba:	f8d4 26d0 	ldr.w	r2, [r4, #1744]	; 0x6d0
 80094be:	1a9b      	subs	r3, r3, r2
 80094c0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80094c4:	bf24      	itt	cs
 80094c6:	2300      	movcs	r3, #0
 80094c8:	f884 36d9 	strbcs.w	r3, [r4, #1753]	; 0x6d9
 80094cc:	f8b4 3572 	ldrh.w	r3, [r4, #1394]	; 0x572
 80094d0:	f5b3 4f02 	cmp.w	r3, #33280	; 0x8200
 80094d4:	d04c      	beq.n	8009570 <ArtNetNode::Run()+0x180>
 80094d6:	d81d      	bhi.n	8009514 <ArtNetNode::Run()+0x124>
 80094d8:	f5b3 4fa4 	cmp.w	r3, #20992	; 0x5200
 80094dc:	d039      	beq.n	8009552 <ArtNetNode::Run()+0x162>
 80094de:	d80c      	bhi.n	80094fa <ArtNetNode::Run()+0x10a>
 80094e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094e4:	d031      	beq.n	800954a <ArtNetNode::Run()+0x15a>
 80094e6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80094ea:	d1c0      	bne.n	800946e <ArtNetNode::Run()+0x7e>
 80094ec:	68a3      	ldr	r3, [r4, #8]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d0bd      	beq.n	800946e <ArtNetNode::Run()+0x7e>
 80094f2:	4620      	mov	r0, r4
 80094f4:	f000 fc2e 	bl	8009d54 <ArtNetNode::HandleDmx()>
 80094f8:	e7b9      	b.n	800946e <ArtNetNode::Run()+0x7e>
 80094fa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80094fe:	d02f      	beq.n	8009560 <ArtNetNode::Run()+0x170>
 8009500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009504:	d1b3      	bne.n	800946e <ArtNetNode::Run()+0x7e>
 8009506:	6923      	ldr	r3, [r4, #16]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d0b0      	beq.n	800946e <ArtNetNode::Run()+0x7e>
 800950c:	4620      	mov	r0, r4
 800950e:	f001 f889 	bl	800a624 <ArtNetNode::HandleTodRequest()>
 8009512:	e7ac      	b.n	800946e <ArtNetNode::Run()+0x7e>
 8009514:	f5b3 4f18 	cmp.w	r3, #38912	; 0x9800
 8009518:	d026      	beq.n	8009568 <ArtNetNode::Run()+0x178>
 800951a:	d80c      	bhi.n	8009536 <ArtNetNode::Run()+0x146>
 800951c:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 8009520:	d02e      	beq.n	8009580 <ArtNetNode::Run()+0x190>
 8009522:	f5b3 4f17 	cmp.w	r3, #38656	; 0x9700
 8009526:	d1a2      	bne.n	800946e <ArtNetNode::Run()+0x7e>
 8009528:	68e3      	ldr	r3, [r4, #12]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d09f      	beq.n	800946e <ArtNetNode::Run()+0x7e>
 800952e:	4620      	mov	r0, r4
 8009530:	f001 f94e 	bl	800a7d0 <ArtNetNode::HandleTimeCode()>
 8009534:	e79b      	b.n	800946e <ArtNetNode::Run()+0x7e>
 8009536:	f5b3 4f19 	cmp.w	r3, #39168	; 0x9900
 800953a:	d029      	beq.n	8009590 <ArtNetNode::Run()+0x1a0>
 800953c:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 8009540:	d195      	bne.n	800946e <ArtNetNode::Run()+0x7e>
 8009542:	4620      	mov	r0, r4
 8009544:	f000 fd9c 	bl	800a080 <ArtNetNode::HandleIpProg()>
 8009548:	e791      	b.n	800946e <ArtNetNode::Run()+0x7e>
 800954a:	4620      	mov	r0, r4
 800954c:	f000 ff9c 	bl	800a488 <ArtNetNode::HandlePoll()>
 8009550:	e78d      	b.n	800946e <ArtNetNode::Run()+0x7e>
 8009552:	68a3      	ldr	r3, [r4, #8]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d08a      	beq.n	800946e <ArtNetNode::Run()+0x7e>
 8009558:	4620      	mov	r0, r4
 800955a:	f001 f8ed 	bl	800a738 <ArtNetNode::HandleSync()>
 800955e:	e786      	b.n	800946e <ArtNetNode::Run()+0x7e>
 8009560:	4620      	mov	r0, r4
 8009562:	f000 f9e3 	bl	800992c <ArtNetNode::HandleAddress()>
 8009566:	e782      	b.n	800946e <ArtNetNode::Run()+0x7e>
 8009568:	4620      	mov	r0, r4
 800956a:	f001 f937 	bl	800a7dc <ArtNetNode::HandleTimeSync()>
 800956e:	e77e      	b.n	800946e <ArtNetNode::Run()+0x7e>
 8009570:	6923      	ldr	r3, [r4, #16]
 8009572:	2b00      	cmp	r3, #0
 8009574:	f43f af7b 	beq.w	800946e <ArtNetNode::Run()+0x7e>
 8009578:	4620      	mov	r0, r4
 800957a:	f001 f819 	bl	800a5b0 <ArtNetNode::HandleTodControl()>
 800957e:	e776      	b.n	800946e <ArtNetNode::Run()+0x7e>
 8009580:	6923      	ldr	r3, [r4, #16]
 8009582:	2b00      	cmp	r3, #0
 8009584:	f43f af73 	beq.w	800946e <ArtNetNode::Run()+0x7e>
 8009588:	4620      	mov	r0, r4
 800958a:	f001 f867 	bl	800a65c <ArtNetNode::HandleRdm()>
 800958e:	e76e      	b.n	800946e <ArtNetNode::Run()+0x7e>
 8009590:	69a3      	ldr	r3, [r4, #24]
 8009592:	2b00      	cmp	r3, #0
 8009594:	f43f af6b 	beq.w	800946e <ArtNetNode::Run()+0x7e>
 8009598:	4620      	mov	r0, r4
 800959a:	f001 fef1 	bl	800b380 <ArtNetNode::HandleTrigger()>
 800959e:	e766      	b.n	800946e <ArtNetNode::Run()+0x7e>
 80095a0:	2102      	movs	r1, #2
 80095a2:	e77a      	b.n	800949a <ArtNetNode::Run()+0xaa>
 80095a4:	2000a9dc 	ldrdcs	sl, [r0], -ip
 80095a8:	2000a9c0 	andcs	sl, r0, r0, asr #19

080095ac <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>:
 80095ac:	b93b      	cbnz	r3, 80095be <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const+0x12>
 80095ae:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 80095b2:	f8b0 3774 	ldrh.w	r3, [r0, #1908]	; 0x774
 80095b6:	8013      	strh	r3, [r2, #0]
 80095b8:	f890 0778 	ldrb.w	r0, [r0, #1912]	; 0x778
 80095bc:	4770      	bx	lr
 80095be:	2b01      	cmp	r3, #1
 80095c0:	bf01      	itttt	eq
 80095c2:	2324      	moveq	r3, #36	; 0x24
 80095c4:	fb03 0001 	mlaeq	r0, r3, r1, r0
 80095c8:	f8b0 36e4 	ldrheq.w	r3, [r0, #1764]	; 0x6e4
 80095cc:	f890 06e8 	ldrbeq.w	r0, [r0, #1768]	; 0x6e8
 80095d0:	bf0c      	ite	eq
 80095d2:	8013      	strheq	r3, [r2, #0]
 80095d4:	2000      	movne	r0, #0
 80095d6:	4770      	bx	lr

080095d8 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>:
 80095d8:	b94b      	cbnz	r3, 80095ee <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x16>
 80095da:	2903      	cmp	r1, #3
 80095dc:	d810      	bhi.n	8009600 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x28>
 80095de:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 80095e2:	f890 3776 	ldrb.w	r3, [r0, #1910]	; 0x776
 80095e6:	7013      	strb	r3, [r2, #0]
 80095e8:	f890 0778 	ldrb.w	r0, [r0, #1912]	; 0x778
 80095ec:	4770      	bx	lr
 80095ee:	2324      	movs	r3, #36	; 0x24
 80095f0:	fb03 0001 	mla	r0, r3, r1, r0
 80095f4:	f890 36e6 	ldrb.w	r3, [r0, #1766]	; 0x6e6
 80095f8:	7013      	strb	r3, [r2, #0]
 80095fa:	f890 06e8 	ldrb.w	r0, [r0, #1768]	; 0x6e8
 80095fe:	4770      	bx	lr
 8009600:	4618      	mov	r0, r3
 8009602:	4770      	bx	lr

08009604 <ArtNetNode::GetSubnetSwitch(unsigned int) const>:
 8009604:	4408      	add	r0, r1
 8009606:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 800960a:	4770      	bx	lr

0800960c <ArtNetNode::GetNetSwitch(unsigned int) const>:
 800960c:	4408      	add	r0, r1
 800960e:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8009612:	4770      	bx	lr

08009614 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>:
 8009614:	4402      	add	r2, r0
 8009616:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 800961a:	f892 003f 	ldrb.w	r0, [r2, #63]	; 0x3f
 800961e:	021b      	lsls	r3, r3, #8
 8009620:	0100      	lsls	r0, r0, #4
 8009622:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8009626:	b2c0      	uxtb	r0, r0
 8009628:	4318      	orrs	r0, r3
 800962a:	f001 010f 	and.w	r1, r1, #15
 800962e:	4308      	orrs	r0, r1
 8009630:	4770      	bx	lr

08009632 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>:
 8009632:	2903      	cmp	r1, #3
 8009634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009638:	4604      	mov	r4, r0
 800963a:	460d      	mov	r5, r1
 800963c:	4617      	mov	r7, r2
 800963e:	461e      	mov	r6, r3
 8009640:	f200 80a3 	bhi.w	800978a <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x158>
 8009644:	2a02      	cmp	r2, #2
 8009646:	d121      	bne.n	800968c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x5a>
 8009648:	2324      	movs	r3, #36	; 0x24
 800964a:	fb03 0301 	mla	r3, r3, r1, r0
 800964e:	f893 26e8 	ldrb.w	r2, [r3, #1768]	; 0x6e8
 8009652:	b13a      	cbz	r2, 8009664 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x32>
 8009654:	2200      	movs	r2, #0
 8009656:	f883 26e8 	strb.w	r2, [r3, #1768]	; 0x6e8
 800965a:	f890 36de 	ldrb.w	r3, [r0, #1758]	; 0x6de
 800965e:	3b01      	subs	r3, #1
 8009660:	f880 36de 	strb.w	r3, [r0, #1758]	; 0x6de
 8009664:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8009668:	f895 3778 	ldrb.w	r3, [r5, #1912]	; 0x778
 800966c:	b90b      	cbnz	r3, 8009672 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x40>
 800966e:	2000      	movs	r0, #0
 8009670:	e00a      	b.n	8009688 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x56>
 8009672:	2308      	movs	r3, #8
 8009674:	2000      	movs	r0, #0
 8009676:	f885 3777 	strb.w	r3, [r5, #1911]	; 0x777
 800967a:	f885 0778 	strb.w	r0, [r5, #1912]	; 0x778
 800967e:	f894 36df 	ldrb.w	r3, [r4, #1759]	; 0x6df
 8009682:	3b01      	subs	r3, #1
 8009684:	f884 36df 	strb.w	r3, [r4, #1759]	; 0x6df
 8009688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800968c:	2a00      	cmp	r2, #0
 800968e:	d13b      	bne.n	8009708 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xd6>
 8009690:	eb00 1801 	add.w	r8, r0, r1, lsl #4
 8009694:	f898 3778 	ldrb.w	r3, [r8, #1912]	; 0x778
 8009698:	b923      	cbnz	r3, 80096a4 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x72>
 800969a:	f890 36df 	ldrb.w	r3, [r0, #1759]	; 0x6df
 800969e:	3301      	adds	r3, #1
 80096a0:	f880 36df 	strb.w	r3, [r0, #1759]	; 0x6df
 80096a4:	2301      	movs	r3, #1
 80096a6:	f04f 0900 	mov.w	r9, #0
 80096aa:	f888 3778 	strb.w	r3, [r8, #1912]	; 0x778
 80096ae:	f006 030f 	and.w	r3, r6, #15
 80096b2:	464a      	mov	r2, r9
 80096b4:	f888 3776 	strb.w	r3, [r8, #1910]	; 0x776
 80096b8:	4631      	mov	r1, r6
 80096ba:	4620      	mov	r0, r4
 80096bc:	f888 9777 	strb.w	r9, [r8, #1911]	; 0x777
 80096c0:	f7ff ffa8 	bl	8009614 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 80096c4:	2324      	movs	r3, #36	; 0x24
 80096c6:	fb03 4305 	mla	r3, r3, r5, r4
 80096ca:	f8a8 0774 	strh.w	r0, [r8, #1908]	; 0x774
 80096ce:	f893 26e8 	ldrb.w	r2, [r3, #1768]	; 0x6e8
 80096d2:	b132      	cbz	r2, 80096e2 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 80096d4:	f883 96e8 	strb.w	r9, [r3, #1768]	; 0x6e8
 80096d8:	f894 36de 	ldrb.w	r3, [r4, #1758]	; 0x6de
 80096dc:	3b01      	subs	r3, #1
 80096de:	f884 36de 	strb.w	r3, [r4, #1758]	; 0x6de
 80096e2:	69e0      	ldr	r0, [r4, #28]
 80096e4:	2800      	cmp	r0, #0
 80096e6:	d044      	beq.n	8009772 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x140>
 80096e8:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 80096ec:	2b02      	cmp	r3, #2
 80096ee:	d13b      	bne.n	8009768 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x136>
 80096f0:	6a20      	ldr	r0, [r4, #32]
 80096f2:	2800      	cmp	r0, #0
 80096f4:	d143      	bne.n	800977e <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x14c>
 80096f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80096f8:	2800      	cmp	r0, #0
 80096fa:	d0b8      	beq.n	800966e <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 80096fc:	6803      	ldr	r3, [r0, #0]
 80096fe:	4632      	mov	r2, r6
 8009700:	4629      	mov	r1, r5
 8009702:	691b      	ldr	r3, [r3, #16]
 8009704:	4798      	blx	r3
 8009706:	e7b2      	b.n	800966e <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 8009708:	2a01      	cmp	r2, #1
 800970a:	d1ea      	bne.n	80096e2 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 800970c:	f04f 0824 	mov.w	r8, #36	; 0x24
 8009710:	fb08 0301 	mla	r3, r8, r1, r0
 8009714:	f893 36e8 	ldrb.w	r3, [r3, #1768]	; 0x6e8
 8009718:	b923      	cbnz	r3, 8009724 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xf2>
 800971a:	f890 36de 	ldrb.w	r3, [r0, #1758]	; 0x6de
 800971e:	3301      	adds	r3, #1
 8009720:	f880 36de 	strb.w	r3, [r0, #1758]	; 0x6de
 8009724:	2301      	movs	r3, #1
 8009726:	fb08 4805 	mla	r8, r8, r5, r4
 800972a:	f888 36e8 	strb.w	r3, [r8, #1768]	; 0x6e8
 800972e:	f006 030f 	and.w	r3, r6, #15
 8009732:	2200      	movs	r2, #0
 8009734:	f888 36e6 	strb.w	r3, [r8, #1766]	; 0x6e6
 8009738:	4631      	mov	r1, r6
 800973a:	4620      	mov	r0, r4
 800973c:	f7ff ff6a 	bl	8009614 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 8009740:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 8009744:	f8a8 06e4 	strh.w	r0, [r8, #1764]	; 0x6e4
 8009748:	f893 2778 	ldrb.w	r2, [r3, #1912]	; 0x778
 800974c:	2a00      	cmp	r2, #0
 800974e:	d0c8      	beq.n	80096e2 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 8009750:	2200      	movs	r2, #0
 8009752:	f883 2778 	strb.w	r2, [r3, #1912]	; 0x778
 8009756:	2208      	movs	r2, #8
 8009758:	f883 2777 	strb.w	r2, [r3, #1911]	; 0x777
 800975c:	f894 36df 	ldrb.w	r3, [r4, #1759]	; 0x6df
 8009760:	3b01      	subs	r3, #1
 8009762:	f884 36df 	strb.w	r3, [r4, #1759]	; 0x6df
 8009766:	e7bc      	b.n	80096e2 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 8009768:	6803      	ldr	r3, [r0, #0]
 800976a:	463a      	mov	r2, r7
 800976c:	4629      	mov	r1, r5
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	4798      	blx	r3
 8009772:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 8009776:	2b02      	cmp	r3, #2
 8009778:	f47f af79 	bne.w	800966e <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 800977c:	e7b8      	b.n	80096f0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xbe>
 800977e:	6803      	ldr	r3, [r0, #0]
 8009780:	4632      	mov	r2, r6
 8009782:	4629      	mov	r1, r5
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	4798      	blx	r3
 8009788:	e7b5      	b.n	80096f6 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xc4>
 800978a:	f06f 0004 	mvn.w	r0, #4
 800978e:	e77b      	b.n	8009688 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x56>

08009790 <ArtNetNode::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
 8009790:	b430      	push	{r4, r5}
 8009792:	eb00 0491 	add.w	r4, r0, r1, lsr #2
 8009796:	f3c3 2506 	ubfx	r5, r3, #8, #7
 800979a:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
 800979e:	f3c3 1503 	ubfx	r5, r3, #4, #4
 80097a2:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
 80097a6:	f003 030f 	and.w	r3, r3, #15
 80097aa:	bc30      	pop	{r4, r5}
 80097ac:	f7ff bf41 	b.w	8009632 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>

080097b0 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>:
 80097b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097b4:	2524      	movs	r5, #36	; 0x24
 80097b6:	4604      	mov	r4, r0
 80097b8:	460f      	mov	r7, r1
 80097ba:	4616      	mov	r6, r2
 80097bc:	1883      	adds	r3, r0, r2
 80097be:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
 80097c2:	0093      	lsls	r3, r2, #2
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	fb05 0503 	mla	r5, r5, r3, r0
 80097ca:	f103 0905 	add.w	r9, r3, #5
 80097ce:	f103 0801 	add.w	r8, r3, #1
 80097d2:	45c8      	cmp	r8, r9
 80097d4:	f105 0524 	add.w	r5, r5, #36	; 0x24
 80097d8:	d009      	beq.n	80097ee <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x3e>
 80097da:	f8b5 16c0 	ldrh.w	r1, [r5, #1728]	; 0x6c0
 80097de:	089a      	lsrs	r2, r3, #2
 80097e0:	4620      	mov	r0, r4
 80097e2:	f7ff ff17 	bl	8009614 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 80097e6:	4643      	mov	r3, r8
 80097e8:	f8a5 06c0 	strh.w	r0, [r5, #1728]	; 0x6c0
 80097ec:	e7ef      	b.n	80097ce <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x1e>
 80097ee:	6a20      	ldr	r0, [r4, #32]
 80097f0:	b150      	cbz	r0, 8009808 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x58>
 80097f2:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 80097f6:	2b02      	cmp	r3, #2
 80097f8:	d106      	bne.n	8009808 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x58>
 80097fa:	b92e      	cbnz	r6, 8009808 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x58>
 80097fc:	6803      	ldr	r3, [r0, #0]
 80097fe:	4639      	mov	r1, r7
 8009800:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009804:	699b      	ldr	r3, [r3, #24]
 8009806:	4718      	bx	r3
 8009808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800980c <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>:
 800980c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009810:	2524      	movs	r5, #36	; 0x24
 8009812:	4604      	mov	r4, r0
 8009814:	460f      	mov	r7, r1
 8009816:	4616      	mov	r6, r2
 8009818:	1883      	adds	r3, r0, r2
 800981a:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
 800981e:	0093      	lsls	r3, r2, #2
 8009820:	b2db      	uxtb	r3, r3
 8009822:	fb05 0503 	mla	r5, r5, r3, r0
 8009826:	f103 0905 	add.w	r9, r3, #5
 800982a:	f103 0801 	add.w	r8, r3, #1
 800982e:	45c8      	cmp	r8, r9
 8009830:	f105 0524 	add.w	r5, r5, #36	; 0x24
 8009834:	d009      	beq.n	800984a <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x3e>
 8009836:	f8b5 16c0 	ldrh.w	r1, [r5, #1728]	; 0x6c0
 800983a:	089a      	lsrs	r2, r3, #2
 800983c:	4620      	mov	r0, r4
 800983e:	f7ff fee9 	bl	8009614 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 8009842:	4643      	mov	r3, r8
 8009844:	f8a5 06c0 	strh.w	r0, [r5, #1728]	; 0x6c0
 8009848:	e7ef      	b.n	800982a <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x1e>
 800984a:	6a20      	ldr	r0, [r4, #32]
 800984c:	b150      	cbz	r0, 8009864 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x58>
 800984e:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 8009852:	2b02      	cmp	r3, #2
 8009854:	d106      	bne.n	8009864 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x58>
 8009856:	b92e      	cbnz	r6, 8009864 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x58>
 8009858:	6803      	ldr	r3, [r0, #0]
 800985a:	4639      	mov	r1, r7
 800985c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009860:	695b      	ldr	r3, [r3, #20]
 8009862:	4718      	bx	r3
 8009864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009868 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>:
 8009868:	b570      	push	{r4, r5, r6, lr}
 800986a:	4616      	mov	r6, r2
 800986c:	2224      	movs	r2, #36	; 0x24
 800986e:	fb02 0301 	mla	r3, r2, r1, r0
 8009872:	fb02 0201 	mla	r2, r2, r1, r0
 8009876:	f8c3 6700 	str.w	r6, [r3, #1792]	; 0x700
 800987a:	f893 36e7 	ldrb.w	r3, [r3, #1767]	; 0x6e7
 800987e:	2e01      	cmp	r6, #1
 8009880:	bf0c      	ite	eq
 8009882:	f043 0301 	orreq.w	r3, r3, #1
 8009886:	f003 03fe 	andne.w	r3, r3, #254	; 0xfe
 800988a:	f882 36e7 	strb.w	r3, [r2, #1767]	; 0x6e7
 800988e:	f890 36d5 	ldrb.w	r3, [r0, #1749]	; 0x6d5
 8009892:	4605      	mov	r5, r0
 8009894:	2b02      	cmp	r3, #2
 8009896:	460c      	mov	r4, r1
 8009898:	d110      	bne.n	80098bc <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 800989a:	2903      	cmp	r1, #3
 800989c:	d80e      	bhi.n	80098bc <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 800989e:	6a00      	ldr	r0, [r0, #32]
 80098a0:	b118      	cbz	r0, 80098aa <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x42>
 80098a2:	6803      	ldr	r3, [r0, #0]
 80098a4:	4632      	mov	r2, r6
 80098a6:	6a1b      	ldr	r3, [r3, #32]
 80098a8:	4798      	blx	r3
 80098aa:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80098ac:	b130      	cbz	r0, 80098bc <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 80098ae:	6803      	ldr	r3, [r0, #0]
 80098b0:	4632      	mov	r2, r6
 80098b2:	4621      	mov	r1, r4
 80098b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80098b8:	6a1b      	ldr	r3, [r3, #32]
 80098ba:	4718      	bx	r3
 80098bc:	bd70      	pop	{r4, r5, r6, pc}

080098be <ArtNetNode::GetPortProtocol(unsigned int) const>:
 80098be:	2324      	movs	r3, #36	; 0x24
 80098c0:	fb03 0001 	mla	r0, r3, r1, r0
 80098c4:	f8d0 0700 	ldr.w	r0, [r0, #1792]	; 0x700
 80098c8:	4770      	bx	lr

080098ca <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>:
 80098ca:	b570      	push	{r4, r5, r6, lr}
 80098cc:	4616      	mov	r6, r2
 80098ce:	2224      	movs	r2, #36	; 0x24
 80098d0:	fb02 0301 	mla	r3, r2, r1, r0
 80098d4:	fb02 0201 	mla	r2, r2, r1, r0
 80098d8:	f8c3 66fc 	str.w	r6, [r3, #1788]	; 0x6fc
 80098dc:	f893 36e7 	ldrb.w	r3, [r3, #1767]	; 0x6e7
 80098e0:	2e01      	cmp	r6, #1
 80098e2:	bf0c      	ite	eq
 80098e4:	f043 0302 	orreq.w	r3, r3, #2
 80098e8:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
 80098ec:	f882 36e7 	strb.w	r3, [r2, #1767]	; 0x6e7
 80098f0:	f890 36d5 	ldrb.w	r3, [r0, #1749]	; 0x6d5
 80098f4:	4605      	mov	r5, r0
 80098f6:	2b02      	cmp	r3, #2
 80098f8:	460c      	mov	r4, r1
 80098fa:	d110      	bne.n	800991e <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 80098fc:	2903      	cmp	r1, #3
 80098fe:	d80e      	bhi.n	800991e <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 8009900:	6a00      	ldr	r0, [r0, #32]
 8009902:	b118      	cbz	r0, 800990c <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x42>
 8009904:	6803      	ldr	r3, [r0, #0]
 8009906:	4632      	mov	r2, r6
 8009908:	69db      	ldr	r3, [r3, #28]
 800990a:	4798      	blx	r3
 800990c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800990e:	b130      	cbz	r0, 800991e <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 8009910:	6803      	ldr	r3, [r0, #0]
 8009912:	4632      	mov	r2, r6
 8009914:	4621      	mov	r1, r4
 8009916:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800991a:	69db      	ldr	r3, [r3, #28]
 800991c:	4718      	bx	r3
 800991e:	bd70      	pop	{r4, r5, r6, pc}

08009920 <ArtNetNode::GetMergeMode(unsigned int) const>:
 8009920:	2324      	movs	r3, #36	; 0x24
 8009922:	fb03 0001 	mla	r0, r3, r1, r0
 8009926:	f8d0 06fc 	ldr.w	r0, [r0, #1788]	; 0x6fc
 800992a:	4770      	bx	lr

0800992c <ArtNetNode::HandleAddress()>:
 800992c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009930:	2301      	movs	r3, #1
 8009932:	f880 36d4 	strb.w	r3, [r0, #1748]	; 0x6d4
 8009936:	f890 30ae 	ldrb.w	r3, [r0, #174]	; 0xae
 800993a:	4604      	mov	r4, r0
 800993c:	b133      	cbz	r3, 800994c <ArtNetNode::HandleAddress()+0x20>
 800993e:	f100 01ae 	add.w	r1, r0, #174	; 0xae
 8009942:	f7ff fbf3 	bl	800912c <ArtNetNode::SetShortName(char const*)>
 8009946:	2306      	movs	r3, #6
 8009948:	f884 36d4 	strb.w	r3, [r4, #1748]	; 0x6d4
 800994c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 8009950:	b13b      	cbz	r3, 8009962 <ArtNetNode::HandleAddress()+0x36>
 8009952:	4620      	mov	r0, r4
 8009954:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
 8009958:	f7ff fc10 	bl	800917c <ArtNetNode::SetLongName(char const*)>
 800995c:	2307      	movs	r3, #7
 800995e:	f884 36d4 	strb.w	r3, [r4, #1748]	; 0x6d4
 8009962:	f894 50ad 	ldrb.w	r5, [r4, #173]	; 0xad
 8009966:	b105      	cbz	r5, 800996a <ArtNetNode::HandleAddress()+0x3e>
 8009968:	3d01      	subs	r5, #1
 800996a:	f894 1108 	ldrb.w	r1, [r4, #264]	; 0x108
 800996e:	2900      	cmp	r1, #0
 8009970:	d13d      	bne.n	80099ee <ArtNetNode::HandleAddress()+0xc2>
 8009972:	462a      	mov	r2, r5
 8009974:	4620      	mov	r0, r4
 8009976:	f7ff ff1b 	bl	80097b0 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800997a:	f894 10ac 	ldrb.w	r1, [r4, #172]	; 0xac
 800997e:	2900      	cmp	r1, #0
 8009980:	d13b      	bne.n	80099fa <ArtNetNode::HandleAddress()+0xce>
 8009982:	462a      	mov	r2, r5
 8009984:	4620      	mov	r0, r4
 8009986:	f7ff ff41 	bl	800980c <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800998a:	00ad      	lsls	r5, r5, #2
 800998c:	b2ed      	uxtb	r5, r5
 800998e:	4627      	mov	r7, r4
 8009990:	462e      	mov	r6, r5
 8009992:	f504 7882 	add.w	r8, r4, #260	; 0x104
 8009996:	f504 7984 	add.w	r9, r4, #264	; 0x108
 800999a:	f818 3b01 	ldrb.w	r3, [r8], #1
 800999e:	2b7f      	cmp	r3, #127	; 0x7f
 80099a0:	d006      	beq.n	80099b0 <ArtNetNode::HandleAddress()+0x84>
 80099a2:	bb83      	cbnz	r3, 8009a06 <ArtNetNode::HandleAddress()+0xda>
 80099a4:	2301      	movs	r3, #1
 80099a6:	2201      	movs	r2, #1
 80099a8:	4631      	mov	r1, r6
 80099aa:	4620      	mov	r0, r4
 80099ac:	f7ff fe41 	bl	8009632 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 80099b0:	f818 2c05 	ldrb.w	r2, [r8, #-5]
 80099b4:	2a7f      	cmp	r2, #127	; 0x7f
 80099b6:	d005      	beq.n	80099c4 <ArtNetNode::HandleAddress()+0x98>
 80099b8:	bb52      	cbnz	r2, 8009a10 <ArtNetNode::HandleAddress()+0xe4>
 80099ba:	2301      	movs	r3, #1
 80099bc:	4631      	mov	r1, r6
 80099be:	4620      	mov	r0, r4
 80099c0:	f7ff fe37 	bl	8009632 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 80099c4:	3601      	adds	r6, #1
 80099c6:	45c1      	cmp	r9, r8
 80099c8:	b2f6      	uxtb	r6, r6
 80099ca:	d1e6      	bne.n	800999a <ArtNetNode::HandleAddress()+0x6e>
 80099cc:	f894 110a 	ldrb.w	r1, [r4, #266]	; 0x10a
 80099d0:	2913      	cmp	r1, #19
 80099d2:	d823      	bhi.n	8009a1c <ArtNetNode::HandleAddress()+0xf0>
 80099d4:	290f      	cmp	r1, #15
 80099d6:	f200 8092 	bhi.w	8009afe <ArtNetNode::HandleAddress()+0x1d2>
 80099da:	3901      	subs	r1, #1
 80099dc:	b2cb      	uxtb	r3, r1
 80099de:	2b03      	cmp	r3, #3
 80099e0:	d82a      	bhi.n	8009a38 <ArtNetNode::HandleAddress()+0x10c>
 80099e2:	2903      	cmp	r1, #3
 80099e4:	d828      	bhi.n	8009a38 <ArtNetNode::HandleAddress()+0x10c>
 80099e6:	e8df f001 	tbb	[pc, r1]
 80099ea:	7e726654 	mrcvc	6, 3, r6, cr2, cr4, {2}
 80099ee:	060f      	lsls	r7, r1, #24
 80099f0:	d5c3      	bpl.n	800997a <ArtNetNode::HandleAddress()+0x4e>
 80099f2:	462a      	mov	r2, r5
 80099f4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80099f8:	e7bc      	b.n	8009974 <ArtNetNode::HandleAddress()+0x48>
 80099fa:	060e      	lsls	r6, r1, #24
 80099fc:	d5c5      	bpl.n	800998a <ArtNetNode::HandleAddress()+0x5e>
 80099fe:	462a      	mov	r2, r5
 8009a00:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8009a04:	e7be      	b.n	8009984 <ArtNetNode::HandleAddress()+0x58>
 8009a06:	0618      	lsls	r0, r3, #24
 8009a08:	d5d2      	bpl.n	80099b0 <ArtNetNode::HandleAddress()+0x84>
 8009a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a0e:	e7ca      	b.n	80099a6 <ArtNetNode::HandleAddress()+0x7a>
 8009a10:	0611      	lsls	r1, r2, #24
 8009a12:	d5d7      	bpl.n	80099c4 <ArtNetNode::HandleAddress()+0x98>
 8009a14:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 8009a18:	2200      	movs	r2, #0
 8009a1a:	e7cf      	b.n	80099bc <ArtNetNode::HandleAddress()+0x90>
 8009a1c:	2973      	cmp	r1, #115	; 0x73
 8009a1e:	d818      	bhi.n	8009a52 <ArtNetNode::HandleAddress()+0x126>
 8009a20:	296f      	cmp	r1, #111	; 0x6f
 8009a22:	d87a      	bhi.n	8009b1a <ArtNetNode::HandleAddress()+0x1ee>
 8009a24:	2953      	cmp	r1, #83	; 0x53
 8009a26:	d803      	bhi.n	8009a30 <ArtNetNode::HandleAddress()+0x104>
 8009a28:	294f      	cmp	r1, #79	; 0x4f
 8009a2a:	d905      	bls.n	8009a38 <ArtNetNode::HandleAddress()+0x10c>
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	e067      	b.n	8009b00 <ArtNetNode::HandleAddress()+0x1d4>
 8009a30:	f1a1 0360 	sub.w	r3, r1, #96	; 0x60
 8009a34:	2b03      	cmp	r3, #3
 8009a36:	d969      	bls.n	8009b0c <ArtNetNode::HandleAddress()+0x1e0>
 8009a38:	69e0      	ldr	r0, [r4, #28]
 8009a3a:	b120      	cbz	r0, 8009a46 <ArtNetNode::HandleAddress()+0x11a>
 8009a3c:	6803      	ldr	r3, [r0, #0]
 8009a3e:	f894 110a 	ldrb.w	r1, [r4, #266]	; 0x10a
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	4798      	blx	r3
 8009a46:	4620      	mov	r0, r4
 8009a48:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a4c:	2101      	movs	r1, #1
 8009a4e:	f000 bc55 	b.w	800a2fc <ArtNetNode::SendPollRelply(bool)>
 8009a52:	f101 0370 	add.w	r3, r1, #112	; 0x70
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	2b03      	cmp	r3, #3
 8009a5a:	d8ed      	bhi.n	8009a38 <ArtNetNode::HandleAddress()+0x10c>
 8009a5c:	4b45      	ldr	r3, [pc, #276]	; (8009b74 <ArtNetNode::HandleAddress()+0x248>)
 8009a5e:	f001 0103 	and.w	r1, r1, #3
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	440d      	add	r5, r1
 8009a66:	07d2      	lsls	r2, r2, #31
 8009a68:	bf5c      	itt	pl
 8009a6a:	2201      	movpl	r2, #1
 8009a6c:	601a      	strpl	r2, [r3, #0]
 8009a6e:	f240 6204 	movw	r2, #1540	; 0x604
 8009a72:	b2ed      	uxtb	r5, r5
 8009a74:	436a      	muls	r2, r5
 8009a76:	4b40      	ldr	r3, [pc, #256]	; (8009b78 <ArtNetNode::HandleAddress()+0x24c>)
 8009a78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009a7c:	441a      	add	r2, r3
 8009a7e:	4611      	mov	r1, r2
 8009a80:	2600      	movs	r6, #0
 8009a82:	68a0      	ldr	r0, [r4, #8]
 8009a84:	f502 7700 	add.w	r7, r2, #512	; 0x200
 8009a88:	42b9      	cmp	r1, r7
 8009a8a:	d048      	beq.n	8009b1e <ArtNetNode::HandleAddress()+0x1f2>
 8009a8c:	f801 6b01 	strb.w	r6, [r1], #1
 8009a90:	e7fa      	b.n	8009a88 <ArtNetNode::HandleAddress()+0x15c>
 8009a92:	2300      	movs	r3, #0
 8009a94:	2224      	movs	r2, #36	; 0x24
 8009a96:	f884 36da 	strb.w	r3, [r4, #1754]	; 0x6da
 8009a9a:	7823      	ldrb	r3, [r4, #0]
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	fb02 4303 	mla	r3, r2, r3, r4
 8009aa2:	429f      	cmp	r7, r3
 8009aa4:	d0c8      	beq.n	8009a38 <ArtNetNode::HandleAddress()+0x10c>
 8009aa6:	f897 26e7 	ldrb.w	r2, [r7, #1767]	; 0x6e7
 8009aaa:	3724      	adds	r7, #36	; 0x24
 8009aac:	f022 0208 	bic.w	r2, r2, #8
 8009ab0:	f887 26c3 	strb.w	r2, [r7, #1731]	; 0x6c3
 8009ab4:	e7f5      	b.n	8009aa2 <ArtNetNode::HandleAddress()+0x176>
 8009ab6:	4b31      	ldr	r3, [pc, #196]	; (8009b7c <ArtNetNode::HandleAddress()+0x250>)
 8009ab8:	2102      	movs	r1, #2
 8009aba:	6818      	ldr	r0, [r3, #0]
 8009abc:	f00a fca2 	bl	8014404 <LedBlink::SetMode(ledblink::Mode)>
 8009ac0:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8009ac4:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8009ac8:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8009acc:	e7b4      	b.n	8009a38 <ArtNetNode::HandleAddress()+0x10c>
 8009ace:	4b2b      	ldr	r3, [pc, #172]	; (8009b7c <ArtNetNode::HandleAddress()+0x250>)
 8009ad0:	2100      	movs	r1, #0
 8009ad2:	6818      	ldr	r0, [r3, #0]
 8009ad4:	f00a fc96 	bl	8014404 <LedBlink::SetMode(ledblink::Mode)>
 8009ad8:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8009adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ae0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009ae4:	e7f0      	b.n	8009ac8 <ArtNetNode::HandleAddress()+0x19c>
 8009ae6:	4b25      	ldr	r3, [pc, #148]	; (8009b7c <ArtNetNode::HandleAddress()+0x250>)
 8009ae8:	2104      	movs	r1, #4
 8009aea:	6818      	ldr	r0, [r3, #0]
 8009aec:	f00a fc8a 	bl	8014404 <LedBlink::SetMode(ledblink::Mode)>
 8009af0:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8009af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009afc:	e7e4      	b.n	8009ac8 <ArtNetNode::HandleAddress()+0x19c>
 8009afe:	2201      	movs	r2, #1
 8009b00:	4620      	mov	r0, r4
 8009b02:	f001 0103 	and.w	r1, r1, #3
 8009b06:	f7ff fee0 	bl	80098ca <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 8009b0a:	e795      	b.n	8009a38 <ArtNetNode::HandleAddress()+0x10c>
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	4620      	mov	r0, r4
 8009b10:	f001 0103 	and.w	r1, r1, #3
 8009b14:	f7ff fea8 	bl	8009868 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 8009b18:	e78e      	b.n	8009a38 <ArtNetNode::HandleAddress()+0x10c>
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	e7f7      	b.n	8009b0e <ArtNetNode::HandleAddress()+0x1e2>
 8009b1e:	f240 6104 	movw	r1, #1540	; 0x604
 8009b22:	fb01 3105 	mla	r1, r1, r5, r3
 8009b26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b2a:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
 8009b2e:	6801      	ldr	r1, [r0, #0]
 8009b30:	690e      	ldr	r6, [r1, #16]
 8009b32:	4629      	mov	r1, r5
 8009b34:	47b0      	blx	r6
 8009b36:	2d03      	cmp	r5, #3
 8009b38:	f63f af7e 	bhi.w	8009a38 <ArtNetNode::HandleAddress()+0x10c>
 8009b3c:	2624      	movs	r6, #36	; 0x24
 8009b3e:	fb06 4605 	mla	r6, r6, r5, r4
 8009b42:	f8d6 3700 	ldr.w	r3, [r6, #1792]	; 0x700
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	f47f af76 	bne.w	8009a38 <ArtNetNode::HandleAddress()+0x10c>
 8009b4c:	f896 3705 	ldrb.w	r3, [r6, #1797]	; 0x705
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	f47f af71 	bne.w	8009a38 <ArtNetNode::HandleAddress()+0x10c>
 8009b56:	68a0      	ldr	r0, [r4, #8]
 8009b58:	4629      	mov	r1, r5
 8009b5a:	6803      	ldr	r3, [r0, #0]
 8009b5c:	689b      	ldr	r3, [r3, #8]
 8009b5e:	4798      	blx	r3
 8009b60:	2301      	movs	r3, #1
 8009b62:	f886 3705 	strb.w	r3, [r6, #1797]	; 0x705
 8009b66:	f896 36e7 	ldrb.w	r3, [r6, #1767]	; 0x6e7
 8009b6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009b6e:	f886 36e7 	strb.w	r3, [r6, #1767]	; 0x6e7
 8009b72:	e761      	b.n	8009a38 <ArtNetNode::HandleAddress()+0x10c>
 8009b74:	200000ec 	andcs	r0, r0, ip, ror #1
 8009b78:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8009b7c:	2000a9c0 	andcs	sl, r0, r0, asr #19

08009b80 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>:
 8009b80:	f240 6304 	movw	r3, #1540	; 0x604
 8009b84:	fb03 0101 	mla	r1, r3, r1, r0
 8009b88:	2300      	movs	r3, #0
 8009b8a:	b510      	push	{r4, lr}
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d00a      	beq.n	8009ba6 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0x26>
 8009b90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b94:	3301      	adds	r3, #1
 8009b96:	f891 01ff 	ldrb.w	r0, [r1, #511]	; 0x1ff
 8009b9a:	42a0      	cmp	r0, r4
 8009b9c:	bf38      	it	cc
 8009b9e:	4620      	movcc	r0, r4
 8009ba0:	f881 03ff 	strb.w	r0, [r1, #1023]	; 0x3ff
 8009ba4:	e7f2      	b.n	8009b8c <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0xc>
 8009ba6:	bd10      	pop	{r4, pc}

08009ba8 <memcpy.isra.0>:
 8009ba8:	3801      	subs	r0, #1
 8009baa:	440a      	add	r2, r1
 8009bac:	4291      	cmp	r1, r2
 8009bae:	d004      	beq.n	8009bba <memcpy.isra.0+0x12>
 8009bb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bb4:	f800 3f01 	strb.w	r3, [r0, #1]!
 8009bb8:	e7f8      	b.n	8009bac <memcpy.isra.0+0x4>
 8009bba:	4770      	bx	lr

08009bbc <lightset::Data::Get()>:
 8009bbc:	4b03      	ldr	r3, [pc, #12]	; (8009bcc <lightset::Data::Get()+0x10>)
 8009bbe:	4804      	ldr	r0, [pc, #16]	; (8009bd0 <lightset::Data::Get()+0x14>)
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	07d2      	lsls	r2, r2, #31
 8009bc4:	bf5c      	itt	pl
 8009bc6:	2201      	movpl	r2, #1
 8009bc8:	601a      	strpl	r2, [r3, #0]
 8009bca:	4770      	bx	lr
 8009bcc:	200000ec 	andcs	r0, r0, ip, ror #1
 8009bd0:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

08009bd4 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>:
 8009bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bd8:	4615      	mov	r5, r2
 8009bda:	460f      	mov	r7, r1
 8009bdc:	4604      	mov	r4, r0
 8009bde:	f7ff ffed 	bl	8009bbc <lightset::Data::Get()>
 8009be2:	4606      	mov	r6, r0
 8009be4:	f240 6004 	movw	r0, #1540	; 0x604
 8009be8:	4344      	muls	r4, r0
 8009bea:	eb06 0804 	add.w	r8, r6, r4
 8009bee:	462a      	mov	r2, r5
 8009bf0:	4639      	mov	r1, r7
 8009bf2:	4640      	mov	r0, r8
 8009bf4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009bf8:	f7ff ffd6 	bl	8009ba8 <memcpy.isra.0>
 8009bfc:	462a      	mov	r2, r5
 8009bfe:	4639      	mov	r1, r7
 8009c00:	f8c8 5600 	str.w	r5, [r8, #1536]	; 0x600
 8009c04:	1930      	adds	r0, r6, r4
 8009c06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c0a:	f7ff bfcd 	b.w	8009ba8 <memcpy.isra.0>

08009c0e <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 8009c0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c12:	4680      	mov	r8, r0
 8009c14:	f240 6404 	movw	r4, #1540	; 0x604
 8009c18:	4615      	mov	r5, r2
 8009c1a:	460f      	mov	r7, r1
 8009c1c:	4699      	mov	r9, r3
 8009c1e:	f7ff ffcd 	bl	8009bbc <lightset::Data::Get()>
 8009c22:	fb04 f408 	mul.w	r4, r4, r8
 8009c26:	eb00 0a04 	add.w	sl, r0, r4
 8009c2a:	4606      	mov	r6, r0
 8009c2c:	462a      	mov	r2, r5
 8009c2e:	4639      	mov	r1, r7
 8009c30:	4650      	mov	r0, sl
 8009c32:	f7ff ffb9 	bl	8009ba8 <memcpy.isra.0>
 8009c36:	f8ca 5600 	str.w	r5, [sl, #1536]	; 0x600
 8009c3a:	f1b9 0f00 	cmp.w	r9, #0
 8009c3e:	d106      	bne.n	8009c4e <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x40>
 8009c40:	462a      	mov	r2, r5
 8009c42:	4641      	mov	r1, r8
 8009c44:	4630      	mov	r0, r6
 8009c46:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c4a:	f7ff bf99 	b.w	8009b80 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 8009c4e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009c52:	462a      	mov	r2, r5
 8009c54:	4639      	mov	r1, r7
 8009c56:	1930      	adds	r0, r6, r4
 8009c58:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c5c:	f7ff bfa4 	b.w	8009ba8 <memcpy.isra.0>

08009c60 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 8009c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c64:	4616      	mov	r6, r2
 8009c66:	4699      	mov	r9, r3
 8009c68:	4680      	mov	r8, r0
 8009c6a:	460f      	mov	r7, r1
 8009c6c:	f7ff ffa6 	bl	8009bbc <lightset::Data::Get()>
 8009c70:	f240 6404 	movw	r4, #1540	; 0x604
 8009c74:	4605      	mov	r5, r0
 8009c76:	fb04 f408 	mul.w	r4, r4, r8
 8009c7a:	f504 7000 	add.w	r0, r4, #512	; 0x200
 8009c7e:	4632      	mov	r2, r6
 8009c80:	4639      	mov	r1, r7
 8009c82:	4428      	add	r0, r5
 8009c84:	f7ff ff90 	bl	8009ba8 <memcpy.isra.0>
 8009c88:	192b      	adds	r3, r5, r4
 8009c8a:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
 8009c8e:	f1b9 0f00 	cmp.w	r9, #0
 8009c92:	d106      	bne.n	8009ca2 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x42>
 8009c94:	4632      	mov	r2, r6
 8009c96:	4641      	mov	r1, r8
 8009c98:	4628      	mov	r0, r5
 8009c9a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c9e:	f7ff bf6f 	b.w	8009b80 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 8009ca2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009ca6:	4632      	mov	r2, r6
 8009ca8:	4639      	mov	r1, r7
 8009caa:	1928      	adds	r0, r5, r4
 8009cac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cb0:	f7ff bf7a 	b.w	8009ba8 <memcpy.isra.0>

08009cb4 <ArtNetNode::UpdateMergeStatus(unsigned int)>:
 8009cb4:	f890 36da 	ldrb.w	r3, [r0, #1754]	; 0x6da
 8009cb8:	b91b      	cbnz	r3, 8009cc2 <ArtNetNode::UpdateMergeStatus(unsigned int)+0xe>
 8009cba:	f240 1301 	movw	r3, #257	; 0x101
 8009cbe:	f8a0 36da 	strh.w	r3, [r0, #1754]	; 0x6da
 8009cc2:	2324      	movs	r3, #36	; 0x24
 8009cc4:	fb03 0001 	mla	r0, r3, r1, r0
 8009cc8:	f890 36e7 	ldrb.w	r3, [r0, #1767]	; 0x6e7
 8009ccc:	f043 0308 	orr.w	r3, r3, #8
 8009cd0:	f880 36e7 	strb.w	r3, [r0, #1767]	; 0x6e7
 8009cd4:	4770      	bx	lr

08009cd6 <ArtNetNode::CheckMergeTimeouts(unsigned int)>:
 8009cd6:	2324      	movs	r3, #36	; 0x24
 8009cd8:	b530      	push	{r4, r5, lr}
 8009cda:	f242 7510 	movw	r5, #10000	; 0x2710
 8009cde:	fb03 0301 	mla	r3, r3, r1, r0
 8009ce2:	f8d0 2664 	ldr.w	r2, [r0, #1636]	; 0x664
 8009ce6:	f8d3 46ec 	ldr.w	r4, [r3, #1772]	; 0x6ec
 8009cea:	1b14      	subs	r4, r2, r4
 8009cec:	42ac      	cmp	r4, r5
 8009cee:	d908      	bls.n	8009d02 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x2c>
 8009cf0:	2400      	movs	r4, #0
 8009cf2:	f8c3 46f0 	str.w	r4, [r3, #1776]	; 0x6f0
 8009cf6:	f893 46e7 	ldrb.w	r4, [r3, #1767]	; 0x6e7
 8009cfa:	f024 0408 	bic.w	r4, r4, #8
 8009cfe:	f883 46e7 	strb.w	r4, [r3, #1767]	; 0x6e7
 8009d02:	2324      	movs	r3, #36	; 0x24
 8009d04:	fb03 0101 	mla	r1, r3, r1, r0
 8009d08:	f8d1 36f4 	ldr.w	r3, [r1, #1780]	; 0x6f4
 8009d0c:	1ad2      	subs	r2, r2, r3
 8009d0e:	f242 7310 	movw	r3, #10000	; 0x2710
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d908      	bls.n	8009d28 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x52>
 8009d16:	2300      	movs	r3, #0
 8009d18:	f8c1 36f8 	str.w	r3, [r1, #1784]	; 0x6f8
 8009d1c:	f891 36e7 	ldrb.w	r3, [r1, #1767]	; 0x6e7
 8009d20:	f023 0308 	bic.w	r3, r3, #8
 8009d24:	f881 36e7 	strb.w	r3, [r1, #1767]	; 0x6e7
 8009d28:	2124      	movs	r1, #36	; 0x24
 8009d2a:	7803      	ldrb	r3, [r0, #0]
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	fb01 0303 	mla	r3, r1, r3, r0
 8009d34:	2100      	movs	r1, #0
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d006      	beq.n	8009d48 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x72>
 8009d3a:	f892 46e7 	ldrb.w	r4, [r2, #1767]	; 0x6e7
 8009d3e:	3224      	adds	r2, #36	; 0x24
 8009d40:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 8009d44:	4321      	orrs	r1, r4
 8009d46:	e7f6      	b.n	8009d36 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x60>
 8009d48:	b919      	cbnz	r1, 8009d52 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x7c>
 8009d4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d4e:	f8a0 36da 	strh.w	r3, [r0, #1754]	; 0x6da
 8009d52:	bd30      	pop	{r4, r5, pc}

08009d54 <ArtNetNode::HandleDmx()>:
 8009d54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d58:	f8b0 70b0 	ldrh.w	r7, [r0, #176]	; 0xb0
 8009d5c:	4604      	mov	r4, r0
 8009d5e:	ba7f      	rev16	r7, r7
 8009d60:	b2bf      	uxth	r7, r7
 8009d62:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8009d66:	bf28      	it	cs
 8009d68:	f44f 7700 	movcs.w	r7, #512	; 0x200
 8009d6c:	4605      	mov	r5, r0
 8009d6e:	2600      	movs	r6, #0
 8009d70:	f04f 0901 	mov.w	r9, #1
 8009d74:	f100 08b2 	add.w	r8, r0, #178	; 0xb2
 8009d78:	7823      	ldrb	r3, [r4, #0]
 8009d7a:	ebb6 0f83 	cmp.w	r6, r3, lsl #2
 8009d7e:	f080 809f 	bcs.w	8009ec0 <ArtNetNode::HandleDmx()+0x16c>
 8009d82:	f895 36e8 	ldrb.w	r3, [r5, #1768]	; 0x6e8
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d056      	beq.n	8009e38 <ArtNetNode::HandleDmx()+0xe4>
 8009d8a:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d152      	bne.n	8009e38 <ArtNetNode::HandleDmx()+0xe4>
 8009d92:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	; 0xae
 8009d96:	f8b5 36e4 	ldrh.w	r3, [r5, #1764]	; 0x6e4
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d14c      	bne.n	8009e38 <ArtNetNode::HandleDmx()+0xe4>
 8009d9e:	f895 36e7 	ldrb.w	r3, [r5, #1767]	; 0x6e7
 8009da2:	f8d5 b6f0 	ldr.w	fp, [r5, #1776]	; 0x6f0
 8009da6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009daa:	f885 36e7 	strb.w	r3, [r5, #1767]	; 0x6e7
 8009dae:	f894 36da 	ldrb.w	r3, [r4, #1754]	; 0x6da
 8009db2:	f8d5 a6f8 	ldr.w	sl, [r5, #1784]	; 0x6f8
 8009db6:	b133      	cbz	r3, 8009dc6 <ArtNetNode::HandleDmx()+0x72>
 8009db8:	f894 36dc 	ldrb.w	r3, [r4, #1756]	; 0x6dc
 8009dbc:	b91b      	cbnz	r3, 8009dc6 <ArtNetNode::HandleDmx()+0x72>
 8009dbe:	4631      	mov	r1, r6
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	f7ff ff88 	bl	8009cd6 <ArtNetNode::CheckMergeTimeouts(unsigned int)>
 8009dc6:	ea5b 020a 	orrs.w	r2, fp, sl
 8009dca:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
 8009dce:	d136      	bne.n	8009e3e <ArtNetNode::HandleDmx()+0xea>
 8009dd0:	f8c5 36f0 	str.w	r3, [r5, #1776]	; 0x6f0
 8009dd4:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 8009dd8:	463a      	mov	r2, r7
 8009dda:	4641      	mov	r1, r8
 8009ddc:	4630      	mov	r0, r6
 8009dde:	f8c5 36ec 	str.w	r3, [r5, #1772]	; 0x6ec
 8009de2:	f7ff fef7 	bl	8009bd4 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 8009de6:	f894 36d9 	ldrb.w	r3, [r4, #1753]	; 0x6d9
 8009dea:	b9fb      	cbnz	r3, 8009e2c <ArtNetNode::HandleDmx()+0xd8>
 8009dec:	f8d4 a008 	ldr.w	sl, [r4, #8]
 8009df0:	f7ff fee4 	bl	8009bbc <lightset::Data::Get()>
 8009df4:	f240 6304 	movw	r3, #1540	; 0x604
 8009df8:	4373      	muls	r3, r6
 8009dfa:	18c1      	adds	r1, r0, r3
 8009dfc:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8009e00:	f8da 3000 	ldr.w	r3, [sl]
 8009e04:	4402      	add	r2, r0
 8009e06:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8009e0a:	4650      	mov	r0, sl
 8009e0c:	f8d1 3600 	ldr.w	r3, [r1, #1536]	; 0x600
 8009e10:	4631      	mov	r1, r6
 8009e12:	47d8      	blx	fp
 8009e14:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 8009e18:	b943      	cbnz	r3, 8009e2c <ArtNetNode::HandleDmx()+0xd8>
 8009e1a:	68a0      	ldr	r0, [r4, #8]
 8009e1c:	4631      	mov	r1, r6
 8009e1e:	6803      	ldr	r3, [r0, #0]
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	4798      	blx	r3
 8009e24:	f884 96db 	strb.w	r9, [r4, #1755]	; 0x6db
 8009e28:	f885 9705 	strb.w	r9, [r5, #1797]	; 0x705
 8009e2c:	f894 36dd 	ldrb.w	r3, [r4, #1757]	; 0x6dd
 8009e30:	f043 0302 	orr.w	r3, r3, #2
 8009e34:	f884 36dd 	strb.w	r3, [r4, #1757]	; 0x6dd
 8009e38:	3601      	adds	r6, #1
 8009e3a:	3524      	adds	r5, #36	; 0x24
 8009e3c:	e79c      	b.n	8009d78 <ArtNetNode::HandleDmx()+0x24>
 8009e3e:	459b      	cmp	fp, r3
 8009e40:	d104      	bne.n	8009e4c <ArtNetNode::HandleDmx()+0xf8>
 8009e42:	f1ba 0f00 	cmp.w	sl, #0
 8009e46:	d0c5      	beq.n	8009dd4 <ArtNetNode::HandleDmx()+0x80>
 8009e48:	b11b      	cbz	r3, 8009e52 <ArtNetNode::HandleDmx()+0xfe>
 8009e4a:	e037      	b.n	8009ebc <ArtNetNode::HandleDmx()+0x168>
 8009e4c:	f1bb 0f00 	cmp.w	fp, #0
 8009e50:	d132      	bne.n	8009eb8 <ArtNetNode::HandleDmx()+0x164>
 8009e52:	459a      	cmp	sl, r3
 8009e54:	d11d      	bne.n	8009e92 <ArtNetNode::HandleDmx()+0x13e>
 8009e56:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 8009e5a:	f8c5 36f4 	str.w	r3, [r5, #1780]	; 0x6f4
 8009e5e:	f7ff fead 	bl	8009bbc <lightset::Data::Get()>
 8009e62:	f240 6304 	movw	r3, #1540	; 0x604
 8009e66:	4683      	mov	fp, r0
 8009e68:	fb03 fa06 	mul.w	sl, r3, r6
 8009e6c:	f50a 7000 	add.w	r0, sl, #512	; 0x200
 8009e70:	463a      	mov	r2, r7
 8009e72:	4641      	mov	r1, r8
 8009e74:	4458      	add	r0, fp
 8009e76:	f7ff fe97 	bl	8009ba8 <memcpy.isra.0>
 8009e7a:	eb0b 030a 	add.w	r3, fp, sl
 8009e7e:	f50a 6080 	add.w	r0, sl, #1024	; 0x400
 8009e82:	463a      	mov	r2, r7
 8009e84:	4641      	mov	r1, r8
 8009e86:	f8c3 7600 	str.w	r7, [r3, #1536]	; 0x600
 8009e8a:	4458      	add	r0, fp
 8009e8c:	f7ff fe8c 	bl	8009ba8 <memcpy.isra.0>
 8009e90:	e7a9      	b.n	8009de6 <ArtNetNode::HandleDmx()+0x92>
 8009e92:	b9bb      	cbnz	r3, 8009ec4 <ArtNetNode::HandleDmx()+0x170>
 8009e94:	f8c5 36f0 	str.w	r3, [r5, #1776]	; 0x6f0
 8009e98:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 8009e9c:	4631      	mov	r1, r6
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	f8c5 36ec 	str.w	r3, [r5, #1772]	; 0x6ec
 8009ea4:	f7ff ff06 	bl	8009cb4 <ArtNetNode::UpdateMergeStatus(unsigned int)>
 8009ea8:	463a      	mov	r2, r7
 8009eaa:	4641      	mov	r1, r8
 8009eac:	4630      	mov	r0, r6
 8009eae:	f8d5 36fc 	ldr.w	r3, [r5, #1788]	; 0x6fc
 8009eb2:	f7ff feac 	bl	8009c0e <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 8009eb6:	e796      	b.n	8009de6 <ArtNetNode::HandleDmx()+0x92>
 8009eb8:	459b      	cmp	fp, r3
 8009eba:	d118      	bne.n	8009eee <ArtNetNode::HandleDmx()+0x19a>
 8009ebc:	459a      	cmp	sl, r3
 8009ebe:	d1eb      	bne.n	8009e98 <ArtNetNode::HandleDmx()+0x144>
 8009ec0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ec4:	f1ba 0f00 	cmp.w	sl, #0
 8009ec8:	d1e4      	bne.n	8009e94 <ArtNetNode::HandleDmx()+0x140>
 8009eca:	f8c5 36f8 	str.w	r3, [r5, #1784]	; 0x6f8
 8009ece:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 8009ed2:	4631      	mov	r1, r6
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	f8c5 36f4 	str.w	r3, [r5, #1780]	; 0x6f4
 8009eda:	f7ff feeb 	bl	8009cb4 <ArtNetNode::UpdateMergeStatus(unsigned int)>
 8009ede:	463a      	mov	r2, r7
 8009ee0:	4641      	mov	r1, r8
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	f8d5 36fc 	ldr.w	r3, [r5, #1788]	; 0x6fc
 8009ee8:	f7ff feba 	bl	8009c60 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 8009eec:	e77b      	b.n	8009de6 <ArtNetNode::HandleDmx()+0x92>
 8009eee:	f1ba 0f00 	cmp.w	sl, #0
 8009ef2:	d0ea      	beq.n	8009eca <ArtNetNode::HandleDmx()+0x176>
 8009ef4:	459a      	cmp	sl, r3
 8009ef6:	d0ea      	beq.n	8009ece <ArtNetNode::HandleDmx()+0x17a>
 8009ef8:	e7e2      	b.n	8009ec0 <ArtNetNode::HandleDmx()+0x16c>
	...

08009efc <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>:
 8009efc:	2903      	cmp	r1, #3
 8009efe:	b510      	push	{r4, lr}
 8009f00:	d80d      	bhi.n	8009f1e <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x22>
 8009f02:	4b07      	ldr	r3, [pc, #28]	; (8009f20 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x24>)
 8009f04:	0109      	lsls	r1, r1, #4
 8009f06:	681c      	ldr	r4, [r3, #0]
 8009f08:	4401      	add	r1, r0
 8009f0a:	6923      	ldr	r3, [r4, #16]
 8009f0c:	69a4      	ldr	r4, [r4, #24]
 8009f0e:	4053      	eors	r3, r2
 8009f10:	4223      	tst	r3, r4
 8009f12:	bf16      	itet	ne
 8009f14:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
 8009f16:	f8c1 277c 	streq.w	r2, [r1, #1916]	; 0x77c
 8009f1a:	f8c1 377c 	strne.w	r3, [r1, #1916]	; 0x77c
 8009f1e:	bd10      	pop	{r4, pc}
 8009f20:	2000a29c 	mulcs	r0, ip, r2

08009f24 <ArtNetNode::HandleDmxIn()>:
 8009f24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f28:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8009f2c:	ab05      	add	r3, sp, #20
 8009f2e:	4607      	mov	r7, r0
 8009f30:	2208      	movs	r2, #8
 8009f32:	461e      	mov	r6, r3
 8009f34:	4942      	ldr	r1, [pc, #264]	; (800a040 <ArtNetNode::HandleDmxIn()+0x11c>)
 8009f36:	3a01      	subs	r2, #1
 8009f38:	d304      	bcc.n	8009f44 <ArtNetNode::HandleDmxIn()+0x20>
 8009f3a:	f811 0b01 	ldrb.w	r0, [r1], #1
 8009f3e:	f803 0b01 	strb.w	r0, [r3], #1
 8009f42:	e7f8      	b.n	8009f36 <ArtNetNode::HandleDmxIn()+0x12>
 8009f44:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8009f48:	2500      	movs	r5, #0
 8009f4a:	8133      	strh	r3, [r6, #8]
 8009f4c:	230e      	movs	r3, #14
 8009f4e:	463c      	mov	r4, r7
 8009f50:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 800a044 <ArtNetNode::HandleDmxIn()+0x120>
 8009f54:	72b5      	strb	r5, [r6, #10]
 8009f56:	72f3      	strb	r3, [r6, #11]
 8009f58:	f894 3778 	ldrb.w	r3, [r4, #1912]	; 0x778
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d049      	beq.n	8009ff4 <ArtNetNode::HandleDmxIn()+0xd0>
 8009f60:	6978      	ldr	r0, [r7, #20]
 8009f62:	4629      	mov	r1, r5
 8009f64:	6803      	ldr	r3, [r0, #0]
 8009f66:	aa03      	add	r2, sp, #12
 8009f68:	f8d3 9010 	ldr.w	r9, [r3, #16]
 8009f6c:	ab04      	add	r3, sp, #16
 8009f6e:	47c8      	blx	r9
 8009f70:	2800      	cmp	r0, #0
 8009f72:	d048      	beq.n	800a006 <ArtNetNode::HandleDmxIn()+0xe2>
 8009f74:	f894 3780 	ldrb.w	r3, [r4, #1920]	; 0x780
 8009f78:	7375      	strb	r5, [r6, #13]
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	f884 3780 	strb.w	r3, [r4, #1920]	; 0x780
 8009f82:	7333      	strb	r3, [r6, #12]
 8009f84:	f8b4 3774 	ldrh.w	r3, [r4, #1908]	; 0x774
 8009f88:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 8009f8c:	81f3      	strh	r3, [r6, #14]
 8009f8e:	9b03      	ldr	r3, [sp, #12]
 8009f90:	eb00 0c03 	add.w	ip, r0, r3
 8009f94:	4560      	cmp	r0, ip
 8009f96:	d004      	beq.n	8009fa2 <ArtNetNode::HandleDmxIn()+0x7e>
 8009f98:	f810 1b01 	ldrb.w	r1, [r0], #1
 8009f9c:	f802 1b01 	strb.w	r1, [r2], #1
 8009fa0:	e7f8      	b.n	8009f94 <ArtNetNode::HandleDmxIn()+0x70>
 8009fa2:	07da      	lsls	r2, r3, #31
 8009fa4:	d504      	bpl.n	8009fb0 <ArtNetNode::HandleDmxIn()+0x8c>
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	18f2      	adds	r2, r6, r3
 8009faa:	3301      	adds	r3, #1
 8009fac:	7491      	strb	r1, [r2, #18]
 8009fae:	9303      	str	r3, [sp, #12]
 8009fb0:	9b03      	ldr	r3, [sp, #12]
 8009fb2:	4631      	mov	r1, r6
 8009fb4:	0a1a      	lsrs	r2, r3, #8
 8009fb6:	7473      	strb	r3, [r6, #17]
 8009fb8:	2380      	movs	r3, #128	; 0x80
 8009fba:	f884 3777 	strb.w	r3, [r4, #1911]	; 0x777
 8009fbe:	f641 1336 	movw	r3, #6454	; 0x1936
 8009fc2:	7432      	strb	r2, [r6, #16]
 8009fc4:	9300      	str	r3, [sp, #0]
 8009fc6:	f240 2212 	movw	r2, #530	; 0x212
 8009fca:	f8d4 377c 	ldr.w	r3, [r4, #1916]	; 0x77c
 8009fce:	7938      	ldrb	r0, [r7, #4]
 8009fd0:	f007 f808 	bl	8010fe4 <udp_send>
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	f8d8 2000 	ldr.w	r2, [r8]
 8009fda:	40ab      	lsls	r3, r5
 8009fdc:	ea33 0102 	bics.w	r1, r3, r2
 8009fe0:	d008      	beq.n	8009ff4 <ArtNetNode::HandleDmxIn()+0xd0>
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	f8c8 3000 	str.w	r3, [r8]
 8009fe8:	f897 36dd 	ldrb.w	r3, [r7, #1757]	; 0x6dd
 8009fec:	f043 0301 	orr.w	r3, r3, #1
 8009ff0:	f887 36dd 	strb.w	r3, [r7, #1757]	; 0x6dd
 8009ff4:	3501      	adds	r5, #1
 8009ff6:	2d04      	cmp	r5, #4
 8009ff8:	f104 0410 	add.w	r4, r4, #16
 8009ffc:	d1ac      	bne.n	8009f58 <ArtNetNode::HandleDmxIn()+0x34>
 8009ffe:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c
 800a002:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a006:	f994 2777 	ldrsb.w	r2, [r4, #1911]	; 0x777
 800a00a:	f894 3777 	ldrb.w	r3, [r4, #1911]	; 0x777
 800a00e:	2a00      	cmp	r2, #0
 800a010:	daf0      	bge.n	8009ff4 <ArtNetNode::HandleDmxIn()+0xd0>
 800a012:	9a04      	ldr	r2, [sp, #16]
 800a014:	2a00      	cmp	r2, #0
 800a016:	d1ed      	bne.n	8009ff4 <ArtNetNode::HandleDmxIn()+0xd0>
 800a018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a01c:	f884 3777 	strb.w	r3, [r4, #1911]	; 0x777
 800a020:	2301      	movs	r3, #1
 800a022:	fa03 f205 	lsl.w	r2, r3, r5
 800a026:	f8d8 3000 	ldr.w	r3, [r8]
 800a02a:	ea23 0302 	bic.w	r3, r3, r2
 800a02e:	f8c8 3000 	str.w	r3, [r8]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d1de      	bne.n	8009ff4 <ArtNetNode::HandleDmxIn()+0xd0>
 800a036:	f897 36dd 	ldrb.w	r3, [r7, #1757]	; 0x6dd
 800a03a:	f023 0301 	bic.w	r3, r3, #1
 800a03e:	e7d7      	b.n	8009ff0 <ArtNetNode::HandleDmxIn()+0xcc>
 800a040:	080169ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r8, fp, sp, lr}
 800a044:	20001904 	andcs	r1, r0, r4, lsl #18

0800a048 <memcmp.constprop.0>:
 800a048:	b510      	push	{r4, lr}
 800a04a:	4c07      	ldr	r4, [pc, #28]	; (800a068 <memcmp.constprop.0+0x20>)
 800a04c:	1e42      	subs	r2, r0, #1
 800a04e:	3003      	adds	r0, #3
 800a050:	4282      	cmp	r2, r0
 800a052:	d007      	beq.n	800a064 <memcmp.constprop.0+0x1c>
 800a054:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800a058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a05c:	428b      	cmp	r3, r1
 800a05e:	d0f7      	beq.n	800a050 <memcmp.constprop.0+0x8>
 800a060:	1a58      	subs	r0, r3, r1
 800a062:	bd10      	pop	{r4, pc}
 800a064:	2000      	movs	r0, #0
 800a066:	e7fc      	b.n	800a062 <memcmp.constprop.0+0x1a>
 800a068:	20001908 	andcs	r1, r0, r8, lsl #18

0800a06c <memcpy.constprop.0.isra.0>:
 800a06c:	3801      	subs	r0, #1
 800a06e:	1d0a      	adds	r2, r1, #4
 800a070:	4291      	cmp	r1, r2
 800a072:	d004      	beq.n	800a07e <memcpy.constprop.0.isra.0+0x12>
 800a074:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a078:	f800 3f01 	strb.w	r3, [r0, #1]!
 800a07c:	e7f8      	b.n	800a070 <memcpy.constprop.0.isra.0+0x4>
 800a07e:	4770      	bx	lr

0800a080 <ArtNetNode::HandleIpProg()>:
 800a080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a084:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
 800a088:	b085      	sub	sp, #20
 800a08a:	4604      	mov	r4, r0
 800a08c:	9303      	str	r3, [sp, #12]
 800a08e:	2300      	movs	r3, #0
 800a090:	4d5a      	ldr	r5, [pc, #360]	; (800a1fc <ArtNetNode::HandleIpProg()+0x17c>)
 800a092:	f890 70ae 	ldrb.w	r7, [r0, #174]	; 0xae
 800a096:	6828      	ldr	r0, [r5, #0]
 800a098:	f890 b001 	ldrb.w	fp, [r0, #1]
 800a09c:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
 800a0a0:	f06f 0306 	mvn.w	r3, #6
 800a0a4:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
 800a0a8:	f007 03c0 	and.w	r3, r7, #192	; 0xc0
 800a0ac:	2bc0      	cmp	r3, #192	; 0xc0
 800a0ae:	d101      	bne.n	800a0b4 <ArtNetNode::HandleIpProg()+0x34>
 800a0b0:	f007 fe1c 	bl	8011cec <Network::EnableDhcp()>
 800a0b4:	f007 0388 	and.w	r3, r7, #136	; 0x88
 800a0b8:	2b88      	cmp	r3, #136	; 0x88
 800a0ba:	d103      	bne.n	800a0c4 <ArtNetNode::HandleIpProg()+0x44>
 800a0bc:	2100      	movs	r1, #0
 800a0be:	6828      	ldr	r0, [r5, #0]
 800a0c0:	f007 fdb8 	bl	8011c34 <Network::SetIp(unsigned int)>
 800a0c4:	f007 0384 	and.w	r3, r7, #132	; 0x84
 800a0c8:	2b84      	cmp	r3, #132	; 0x84
 800a0ca:	4e4d      	ldr	r6, [pc, #308]	; (800a200 <ArtNetNode::HandleIpProg()+0x180>)
 800a0cc:	f104 08b0 	add.w	r8, r4, #176	; 0xb0
 800a0d0:	d107      	bne.n	800a0e2 <ArtNetNode::HandleIpProg()+0x62>
 800a0d2:	4641      	mov	r1, r8
 800a0d4:	4630      	mov	r0, r6
 800a0d6:	f7ff ffc9 	bl	800a06c <memcpy.constprop.0.isra.0>
 800a0da:	6831      	ldr	r1, [r6, #0]
 800a0dc:	6828      	ldr	r0, [r5, #0]
 800a0de:	f007 fda9 	bl	8011c34 <Network::SetIp(unsigned int)>
 800a0e2:	f007 0382 	and.w	r3, r7, #130	; 0x82
 800a0e6:	2b82      	cmp	r3, #130	; 0x82
 800a0e8:	f104 09b4 	add.w	r9, r4, #180	; 0xb4
 800a0ec:	d107      	bne.n	800a0fe <ArtNetNode::HandleIpProg()+0x7e>
 800a0ee:	4649      	mov	r1, r9
 800a0f0:	4843      	ldr	r0, [pc, #268]	; (800a200 <ArtNetNode::HandleIpProg()+0x180>)
 800a0f2:	f7ff ffbb 	bl	800a06c <memcpy.constprop.0.isra.0>
 800a0f6:	6831      	ldr	r1, [r6, #0]
 800a0f8:	6828      	ldr	r0, [r5, #0]
 800a0fa:	f007 fdc9 	bl	8011c90 <Network::SetNetmask(unsigned int)>
 800a0fe:	f007 0790 	and.w	r7, r7, #144	; 0x90
 800a102:	2f90      	cmp	r7, #144	; 0x90
 800a104:	f104 0aba 	add.w	sl, r4, #186	; 0xba
 800a108:	d107      	bne.n	800a11a <ArtNetNode::HandleIpProg()+0x9a>
 800a10a:	4651      	mov	r1, sl
 800a10c:	483c      	ldr	r0, [pc, #240]	; (800a200 <ArtNetNode::HandleIpProg()+0x180>)
 800a10e:	f7ff ffad 	bl	800a06c <memcpy.constprop.0.isra.0>
 800a112:	6831      	ldr	r1, [r6, #0]
 800a114:	6828      	ldr	r0, [r5, #0]
 800a116:	f007 fdd1 	bl	8011cbc <Network::SetGatewayIp(unsigned int)>
 800a11a:	2200      	movs	r2, #0
 800a11c:	6829      	ldr	r1, [r5, #0]
 800a11e:	7848      	ldrb	r0, [r1, #1]
 800a120:	f884 20bb 	strb.w	r2, [r4, #187]	; 0xbb
 800a124:	4290      	cmp	r0, r2
 800a126:	bf0c      	ite	eq
 800a128:	4610      	moveq	r0, r2
 800a12a:	2040      	movne	r0, #64	; 0x40
 800a12c:	f884 00ba 	strb.w	r0, [r4, #186]	; 0xba
 800a130:	7848      	ldrb	r0, [r1, #1]
 800a132:	6909      	ldr	r1, [r1, #16]
 800a134:	ea8b 0b00 	eor.w	fp, fp, r0
 800a138:	4640      	mov	r0, r8
 800a13a:	6031      	str	r1, [r6, #0]
 800a13c:	f7ff ff84 	bl	800a048 <memcmp.constprop.0>
 800a140:	492f      	ldr	r1, [pc, #188]	; (800a200 <ArtNetNode::HandleIpProg()+0x180>)
 800a142:	4607      	mov	r7, r0
 800a144:	4640      	mov	r0, r8
 800a146:	f7ff ff91 	bl	800a06c <memcpy.constprop.0.isra.0>
 800a14a:	6829      	ldr	r1, [r5, #0]
 800a14c:	4648      	mov	r0, r9
 800a14e:	6989      	ldr	r1, [r1, #24]
 800a150:	6031      	str	r1, [r6, #0]
 800a152:	f7ff ff79 	bl	800a048 <memcmp.constprop.0>
 800a156:	492a      	ldr	r1, [pc, #168]	; (800a200 <ArtNetNode::HandleIpProg()+0x180>)
 800a158:	9003      	str	r0, [sp, #12]
 800a15a:	4648      	mov	r0, r9
 800a15c:	f7ff ff86 	bl	800a06c <memcpy.constprop.0.isra.0>
 800a160:	6829      	ldr	r1, [r5, #0]
 800a162:	4650      	mov	r0, sl
 800a164:	6949      	ldr	r1, [r1, #20]
 800a166:	6031      	str	r1, [r6, #0]
 800a168:	f7ff ff6e 	bl	800a048 <memcmp.constprop.0>
 800a16c:	9b03      	ldr	r3, [sp, #12]
 800a16e:	4924      	ldr	r1, [pc, #144]	; (800a200 <ArtNetNode::HandleIpProg()+0x180>)
 800a170:	431f      	orrs	r7, r3
 800a172:	ea57 0300 	orrs.w	r3, r7, r0
 800a176:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 800a17a:	bf0c      	ite	eq
 800a17c:	465e      	moveq	r6, fp
 800a17e:	f04b 0601 	orrne.w	r6, fp, #1
 800a182:	f7ff ff73 	bl	800a06c <memcpy.constprop.0.isra.0>
 800a186:	2200      	movs	r2, #0
 800a188:	f641 1336 	movw	r3, #6454	; 0x1936
 800a18c:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
 800a190:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
 800a194:	9300      	str	r3, [sp, #0]
 800a196:	2222      	movs	r2, #34	; 0x22
 800a198:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
 800a19c:	7920      	ldrb	r0, [r4, #4]
 800a19e:	f104 01a0 	add.w	r1, r4, #160	; 0xa0
 800a1a2:	f006 ff1f 	bl	8010fe4 <udp_send>
 800a1a6:	b336      	cbz	r6, 800a1f6 <ArtNetNode::HandleIpProg()+0x176>
 800a1a8:	682a      	ldr	r2, [r5, #0]
 800a1aa:	f204 507e 	addw	r0, r4, #1406	; 0x57e
 800a1ae:	6913      	ldr	r3, [r2, #16]
 800a1b0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a1b2:	6991      	ldr	r1, [r2, #24]
 800a1b4:	7852      	ldrb	r2, [r2, #1]
 800a1b6:	ea63 0301 	orn	r3, r3, r1
 800a1ba:	2a00      	cmp	r2, #0
 800a1bc:	bf14      	ite	ne
 800a1be:	2202      	movne	r2, #2
 800a1c0:	2200      	moveq	r2, #0
 800a1c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a1c4:	f994 3096 	ldrsb.w	r3, [r4, #150]	; 0x96
 800a1c8:	4641      	mov	r1, r8
 800a1ca:	f023 0302 	bic.w	r3, r3, #2
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
 800a1d4:	f7ff ff4a 	bl	800a06c <memcpy.constprop.0.isra.0>
 800a1d8:	4641      	mov	r1, r8
 800a1da:	f204 6043 	addw	r0, r4, #1603	; 0x643
 800a1de:	f7ff ff45 	bl	800a06c <memcpy.constprop.0.isra.0>
 800a1e2:	f894 36d6 	ldrb.w	r3, [r4, #1750]	; 0x6d6
 800a1e6:	b133      	cbz	r3, 800a1f6 <ArtNetNode::HandleIpProg()+0x176>
 800a1e8:	2101      	movs	r1, #1
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	b005      	add	sp, #20
 800a1ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f2:	f000 b883 	b.w	800a2fc <ArtNetNode::SendPollRelply(bool)>
 800a1f6:	b005      	add	sp, #20
 800a1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1fc:	2000a29c 	mulcs	r0, ip, r2
 800a200:	20001908 	andcs	r1, r0, r8, lsl #18

0800a204 <memcpy.isra.0>:
 800a204:	3801      	subs	r0, #1
 800a206:	440a      	add	r2, r1
 800a208:	4291      	cmp	r1, r2
 800a20a:	d004      	beq.n	800a216 <memcpy.isra.0+0x12>
 800a20c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a210:	f800 3f01 	strb.w	r3, [r0, #1]!
 800a214:	e7f8      	b.n	800a208 <memcpy.isra.0+0x4>
 800a216:	4770      	bx	lr

0800a218 <ArtNetNode::FillPollReply()>:
 800a218:	b538      	push	{r3, r4, r5, lr}
 800a21a:	4604      	mov	r4, r0
 800a21c:	f200 5074 	addw	r0, r0, #1396	; 0x574
 800a220:	4603      	mov	r3, r0
 800a222:	2200      	movs	r2, #0
 800a224:	f204 6163 	addw	r1, r4, #1635	; 0x663
 800a228:	4299      	cmp	r1, r3
 800a22a:	d002      	beq.n	800a232 <ArtNetNode::FillPollReply()+0x1a>
 800a22c:	f803 2b01 	strb.w	r2, [r3], #1
 800a230:	e7fa      	b.n	800a228 <ArtNetNode::FillPollReply()+0x10>
 800a232:	2208      	movs	r2, #8
 800a234:	492d      	ldr	r1, [pc, #180]	; (800a2ec <ArtNetNode::FillPollReply()+0xd4>)
 800a236:	f7ff ffe5 	bl	800a204 <memcpy.isra.0>
 800a23a:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 800a23e:	4d2c      	ldr	r5, [pc, #176]	; (800a2f0 <ArtNetNode::FillPollReply()+0xd8>)
 800a240:	f8a4 357c 	strh.w	r3, [r4, #1404]	; 0x57c
 800a244:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a246:	4629      	mov	r1, r5
 800a248:	f204 507e 	addw	r0, r4, #1406	; 0x57e
 800a24c:	2204      	movs	r2, #4
 800a24e:	602b      	str	r3, [r5, #0]
 800a250:	f7ff ffd8 	bl	800a204 <memcpy.isra.0>
 800a254:	f641 1336 	movw	r3, #6454	; 0x1936
 800a258:	f8a4 3582 	strh.w	r3, [r4, #1410]	; 0x582
 800a25c:	4b25      	ldr	r3, [pc, #148]	; (800a2f4 <ArtNetNode::FillPollReply()+0xdc>)
 800a25e:	f104 0142 	add.w	r1, r4, #66	; 0x42
 800a262:	781a      	ldrb	r2, [r3, #0]
 800a264:	f204 508e 	addw	r0, r4, #1422	; 0x58e
 800a268:	f884 2584 	strb.w	r2, [r4, #1412]	; 0x584
 800a26c:	785b      	ldrb	r3, [r3, #1]
 800a26e:	f884 3585 	strb.w	r3, [r4, #1413]	; 0x585
 800a272:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 800a276:	f8a4 3588 	strh.w	r3, [r4, #1416]	; 0x588
 800a27a:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800a27e:	f884 358b 	strb.w	r3, [r4, #1419]	; 0x58b
 800a282:	4b1d      	ldr	r3, [pc, #116]	; (800a2f8 <ArtNetNode::FillPollReply()+0xe0>)
 800a284:	785a      	ldrb	r2, [r3, #1]
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	f884 258c 	strb.w	r2, [r4, #1420]	; 0x58c
 800a28c:	f884 358d 	strb.w	r3, [r4, #1421]	; 0x58d
 800a290:	2212      	movs	r2, #18
 800a292:	f7ff ffb7 	bl	800a204 <memcpy.isra.0>
 800a296:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800a29a:	f504 60b4 	add.w	r0, r4, #1440	; 0x5a0
 800a29e:	2240      	movs	r2, #64	; 0x40
 800a2a0:	f7ff ffb0 	bl	800a204 <memcpy.isra.0>
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800a2aa:	f884 363c 	strb.w	r3, [r4, #1596]	; 0x63c
 800a2ae:	f204 603d 	addw	r0, r4, #1597	; 0x63d
 800a2b2:	2206      	movs	r2, #6
 800a2b4:	f7ff ffa6 	bl	800a204 <memcpy.isra.0>
 800a2b8:	4629      	mov	r1, r5
 800a2ba:	f204 6043 	addw	r0, r4, #1603	; 0x643
 800a2be:	2204      	movs	r2, #4
 800a2c0:	f7ff ffa0 	bl	800a204 <memcpy.isra.0>
 800a2c4:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800a2c8:	f104 0198 	add.w	r1, r4, #152	; 0x98
 800a2cc:	f884 3648 	strb.w	r3, [r4, #1608]	; 0x648
 800a2d0:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 800a2d4:	f204 604e 	addw	r0, r4, #1614	; 0x64e
 800a2d8:	f884 364d 	strb.w	r3, [r4, #1613]	; 0x64d
 800a2dc:	2304      	movs	r3, #4
 800a2de:	2206      	movs	r2, #6
 800a2e0:	f884 3621 	strb.w	r3, [r4, #1569]	; 0x621
 800a2e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2e8:	f7ff bf8c 	b.w	800a204 <memcpy.isra.0>
 800a2ec:	08016a08 	stmdaeq	r1, {r3, r9, fp, sp, lr}
 800a2f0:	2000190c 	andcs	r1, r0, ip, lsl #18
 800a2f4:	08016ca1 	stmdaeq	r1, {r0, r5, r7, sl, fp, sp, lr}
 800a2f8:	08016c9f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, sl, fp, sp, lr}

0800a2fc <ArtNetNode::SendPollRelply(bool)>:
 800a2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a300:	4604      	mov	r4, r0
 800a302:	b087      	sub	sp, #28
 800a304:	b941      	cbnz	r1, 800a318 <ArtNetNode::SendPollRelply(bool)+0x1c>
 800a306:	f890 36d5 	ldrb.w	r3, [r0, #1749]	; 0x6d5
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	bf02      	ittt	eq
 800a30e:	f8d0 36c0 	ldreq.w	r3, [r0, #1728]	; 0x6c0
 800a312:	3301      	addeq	r3, #1
 800a314:	f8c0 36c0 	streq.w	r3, [r0, #1728]	; 0x6c0
 800a318:	f04f 0900 	mov.w	r9, #0
 800a31c:	46c8      	mov	r8, r9
 800a31e:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800a322:	f884 358b 	strb.w	r3, [r4, #1419]	; 0x58b
 800a326:	f104 033e 	add.w	r3, r4, #62	; 0x3e
 800a32a:	9303      	str	r3, [sp, #12]
 800a32c:	7823      	ldrb	r3, [r4, #0]
 800a32e:	4543      	cmp	r3, r8
 800a330:	f340 80a1 	ble.w	800a476 <ArtNetNode::SendPollRelply(bool)+0x17a>
 800a334:	9b03      	ldr	r3, [sp, #12]
 800a336:	9a03      	ldr	r2, [sp, #12]
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	2590      	movs	r5, #144	; 0x90
 800a33c:	f884 3586 	strb.w	r3, [r4, #1414]	; 0x586
 800a340:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800a344:	4649      	mov	r1, r9
 800a346:	f884 3587 	strb.w	r3, [r4, #1415]	; 0x587
 800a34a:	f108 0301 	add.w	r3, r8, #1
 800a34e:	f884 3647 	strb.w	r3, [r4, #1607]	; 0x647
 800a352:	fa5f f389 	uxtb.w	r3, r9
 800a356:	2bfb      	cmp	r3, #251	; 0xfb
 800a358:	9203      	str	r2, [sp, #12]
 800a35a:	f04f 0a00 	mov.w	sl, #0
 800a35e:	bf8c      	ite	hi
 800a360:	2201      	movhi	r2, #1
 800a362:	2205      	movls	r2, #5
 800a364:	fb05 4508 	mla	r5, r5, r8, r4
 800a368:	eb04 1b88 	add.w	fp, r4, r8, lsl #6
 800a36c:	f204 6722 	addw	r7, r4, #1570	; 0x622
 800a370:	2a01      	cmp	r2, #1
 800a372:	d061      	beq.n	800a438 <ArtNetNode::SendPollRelply(bool)+0x13c>
 800a374:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 800a378:	f895 66e7 	ldrb.w	r6, [r5, #1767]	; 0x6e7
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d144      	bne.n	800a40a <ArtNetNode::SendPollRelply(bool)+0x10e>
 800a380:	f8d5 36f0 	ldr.w	r3, [r5, #1776]	; 0x6f0
 800a384:	f006 067f 	and.w	r6, r6, #127	; 0x7f
 800a388:	b14b      	cbz	r3, 800a39e <ArtNetNode::SendPollRelply(bool)+0xa2>
 800a38a:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 800a38e:	f8d5 06ec 	ldr.w	r0, [r5, #1772]	; 0x6ec
 800a392:	1a1b      	subs	r3, r3, r0
 800a394:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a398:	bf38      	it	cc
 800a39a:	f046 0680 	orrcc.w	r6, r6, #128	; 0x80
 800a39e:	f8d5 36f8 	ldr.w	r3, [r5, #1784]	; 0x6f8
 800a3a2:	b14b      	cbz	r3, 800a3b8 <ArtNetNode::SendPollRelply(bool)+0xbc>
 800a3a4:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 800a3a8:	f8d5 06f4 	ldr.w	r0, [r5, #1780]	; 0x6f4
 800a3ac:	1a1b      	subs	r3, r3, r0
 800a3ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3b2:	d201      	bcs.n	800a3b8 <ArtNetNode::SendPollRelply(bool)+0xbc>
 800a3b4:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 800a3b8:	f895 36e8 	ldrb.w	r3, [r5, #1768]	; 0x6e8
 800a3bc:	f885 66e7 	strb.w	r6, [r5, #1767]	; 0x6e7
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d037      	beq.n	800a434 <ArtNetNode::SendPollRelply(bool)+0x138>
 800a3c4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800a3c8:	f10a 0a01 	add.w	sl, sl, #1
 800a3cc:	703b      	strb	r3, [r7, #0]
 800a3ce:	723e      	strb	r6, [r7, #8]
 800a3d0:	f895 36e6 	ldrb.w	r3, [r5, #1766]	; 0x6e6
 800a3d4:	743b      	strb	r3, [r7, #16]
 800a3d6:	b2cb      	uxtb	r3, r1
 800a3d8:	2b03      	cmp	r3, #3
 800a3da:	d80e      	bhi.n	800a3fa <ArtNetNode::SendPollRelply(bool)+0xfe>
 800a3dc:	f89b 3778 	ldrb.w	r3, [fp, #1912]	; 0x778
 800a3e0:	b12b      	cbz	r3, 800a3ee <ArtNetNode::SendPollRelply(bool)+0xf2>
 800a3e2:	783b      	ldrb	r3, [r7, #0]
 800a3e4:	f10a 0a01 	add.w	sl, sl, #1
 800a3e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3ec:	703b      	strb	r3, [r7, #0]
 800a3ee:	f89b 3777 	ldrb.w	r3, [fp, #1911]	; 0x777
 800a3f2:	713b      	strb	r3, [r7, #4]
 800a3f4:	f89b 3776 	ldrb.w	r3, [fp, #1910]	; 0x776
 800a3f8:	733b      	strb	r3, [r7, #12]
 800a3fa:	1e53      	subs	r3, r2, #1
 800a3fc:	3101      	adds	r1, #1
 800a3fe:	b2da      	uxtb	r2, r3
 800a400:	f10b 0b10 	add.w	fp, fp, #16
 800a404:	3701      	adds	r7, #1
 800a406:	3524      	adds	r5, #36	; 0x24
 800a408:	e7b2      	b.n	800a370 <ArtNetNode::SendPollRelply(bool)+0x74>
 800a40a:	69e0      	ldr	r0, [r4, #28]
 800a40c:	2800      	cmp	r0, #0
 800a40e:	d0d3      	beq.n	800a3b8 <ArtNetNode::SendPollRelply(bool)+0xbc>
 800a410:	6803      	ldr	r3, [r0, #0]
 800a412:	9205      	str	r2, [sp, #20]
 800a414:	9104      	str	r1, [sp, #16]
 800a416:	691b      	ldr	r3, [r3, #16]
 800a418:	4798      	blx	r3
 800a41a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800a41e:	f000 0089 	and.w	r0, r0, #137	; 0x89
 800a422:	f006 0676 	and.w	r6, r6, #118	; 0x76
 800a426:	4306      	orrs	r6, r0
 800a428:	f010 0001 	ands.w	r0, r0, #1
 800a42c:	bf08      	it	eq
 800a42e:	f8c5 0700 	streq.w	r0, [r5, #1792]	; 0x700
 800a432:	e7c1      	b.n	800a3b8 <ArtNetNode::SendPollRelply(bool)+0xbc>
 800a434:	703b      	strb	r3, [r7, #0]
 800a436:	e7ca      	b.n	800a3ce <ArtNetNode::SendPollRelply(bool)+0xd2>
 800a438:	f204 636f 	addw	r3, r4, #1647	; 0x66f
 800a43c:	9301      	str	r3, [sp, #4]
 800a43e:	f8d4 36c0 	ldr.w	r3, [r4, #1728]	; 0x6c0
 800a442:	2140      	movs	r1, #64	; 0x40
 800a444:	4a0f      	ldr	r2, [pc, #60]	; (800a484 <ArtNetNode::SendPollRelply(bool)+0x188>)
 800a446:	9300      	str	r3, [sp, #0]
 800a448:	f884 a621 	strb.w	sl, [r4, #1569]	; 0x621
 800a44c:	f894 36d4 	ldrb.w	r3, [r4, #1748]	; 0x6d4
 800a450:	f504 60bc 	add.w	r0, r4, #1504	; 0x5e0
 800a454:	f7fe fc5a 	bl	8008d0c <snprintf>
 800a458:	f641 1336 	movw	r3, #6454	; 0x1936
 800a45c:	22ef      	movs	r2, #239	; 0xef
 800a45e:	9300      	str	r3, [sp, #0]
 800a460:	7920      	ldrb	r0, [r4, #4]
 800a462:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a464:	f204 5174 	addw	r1, r4, #1396	; 0x574
 800a468:	f006 fdbc 	bl	8010fe4 <udp_send>
 800a46c:	f108 0801 	add.w	r8, r8, #1
 800a470:	f109 0904 	add.w	r9, r9, #4
 800a474:	e75a      	b.n	800a32c <ArtNetNode::SendPollRelply(bool)+0x30>
 800a476:	2300      	movs	r3, #0
 800a478:	f884 36db 	strb.w	r3, [r4, #1755]	; 0x6db
 800a47c:	b007      	add	sp, #28
 800a47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a482:	bf00      	nop
 800a484:	080169f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, fp, sp, lr}

0800a488 <ArtNetNode::HandlePoll()>:
 800a488:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 800a48c:	b410      	push	{r4}
 800a48e:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800a492:	f880 26d6 	strb.w	r2, [r0, #1750]	; 0x6d6
 800a496:	f013 0204 	ands.w	r2, r3, #4
 800a49a:	d02e      	beq.n	800a4fa <ArtNetNode::HandlePoll()+0x72>
 800a49c:	2201      	movs	r2, #1
 800a49e:	f8d0 16c8 	ldr.w	r1, [r0, #1736]	; 0x6c8
 800a4a2:	f890 46d8 	ldrb.w	r4, [r0, #1752]	; 0x6d8
 800a4a6:	f880 26d7 	strb.w	r2, [r0, #1751]	; 0x6d7
 800a4aa:	b979      	cbnz	r1, 800a4cc <ArtNetNode::HandlePoll()+0x44>
 800a4ac:	f8d0 256c 	ldr.w	r2, [r0, #1388]	; 0x56c
 800a4b0:	f8c0 26c8 	str.w	r2, [r0, #1736]	; 0x6c8
 800a4b4:	b19c      	cbz	r4, 800a4de <ArtNetNode::HandlePoll()+0x56>
 800a4b6:	f890 36e0 	ldrb.w	r3, [r0, #1760]	; 0x6e0
 800a4ba:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	bf28      	it	cs
 800a4c2:	4613      	movcs	r3, r2
 800a4c4:	f880 36e0 	strb.w	r3, [r0, #1760]	; 0x6e0
 800a4c8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a4ca:	e010      	b.n	800a4ee <ArtNetNode::HandlePoll()+0x66>
 800a4cc:	2c00      	cmp	r4, #0
 800a4ce:	d1f2      	bne.n	800a4b6 <ArtNetNode::HandlePoll()+0x2e>
 800a4d0:	f8d0 456c 	ldr.w	r4, [r0, #1388]	; 0x56c
 800a4d4:	42a1      	cmp	r1, r4
 800a4d6:	d002      	beq.n	800a4de <ArtNetNode::HandlePoll()+0x56>
 800a4d8:	f880 26d8 	strb.w	r2, [r0, #1752]	; 0x6d8
 800a4dc:	e7eb      	b.n	800a4b6 <ArtNetNode::HandlePoll()+0x2e>
 800a4de:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 800a4e2:	071b      	lsls	r3, r3, #28
 800a4e4:	f880 26e0 	strb.w	r2, [r0, #1760]	; 0x6e0
 800a4e8:	d5ee      	bpl.n	800a4c8 <ArtNetNode::HandlePoll()+0x40>
 800a4ea:	f8d0 356c 	ldr.w	r3, [r0, #1388]	; 0x56c
 800a4ee:	f8c0 36c4 	str.w	r3, [r0, #1732]	; 0x6c4
 800a4f2:	2101      	movs	r1, #1
 800a4f4:	bc10      	pop	{r4}
 800a4f6:	f7ff bf01 	b.w	800a2fc <ArtNetNode::SendPollRelply(bool)>
 800a4fa:	f880 26d7 	strb.w	r2, [r0, #1751]	; 0x6d7
 800a4fe:	f8c0 26c4 	str.w	r2, [r0, #1732]	; 0x6c4
 800a502:	e7f6      	b.n	800a4f2 <ArtNetNode::HandlePoll()+0x6a>

0800a504 <ArtNetNode::SendTod(unsigned int)>:
 800a504:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800a508:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a50c:	2500      	movs	r5, #0
 800a50e:	f880 30a9 	strb.w	r3, [r0, #169]	; 0xa9
 800a512:	2301      	movs	r3, #1
 800a514:	4688      	mov	r8, r1
 800a516:	4604      	mov	r4, r0
 800a518:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
 800a51c:	f880 50a8 	strb.w	r5, [r0, #168]	; 0xa8
 800a520:	6900      	ldr	r0, [r0, #16]
 800a522:	088f      	lsrs	r7, r1, #2
 800a524:	6803      	ldr	r3, [r0, #0]
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	4798      	blx	r3
 800a52a:	f008 0303 	and.w	r3, r8, #3
 800a52e:	3301      	adds	r3, #1
 800a530:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 800a534:	1c7b      	adds	r3, r7, #1
 800a536:	b2ff      	uxtb	r7, r7
 800a538:	f884 50ae 	strb.w	r5, [r4, #174]	; 0xae
 800a53c:	f884 50af 	strb.w	r5, [r4, #175]	; 0xaf
 800a540:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 800a544:	f884 50b1 	strb.w	r5, [r4, #177]	; 0xb1
 800a548:	f884 50b2 	strb.w	r5, [r4, #178]	; 0xb2
 800a54c:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
 800a550:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 800a554:	4427      	add	r7, r4
 800a556:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a55a:	f884 50b6 	strb.w	r5, [r4, #182]	; 0xb6
 800a55e:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
 800a562:	2324      	movs	r3, #36	; 0x24
 800a564:	fb03 4308 	mla	r3, r3, r8, r4
 800a568:	f893 36e6 	ldrb.w	r3, [r3, #1766]	; 0x6e6
 800a56c:	b2c6      	uxtb	r6, r0
 800a56e:	6920      	ldr	r0, [r4, #16]
 800a570:	f884 50b8 	strb.w	r5, [r4, #184]	; 0xb8
 800a574:	f884 50ba 	strb.w	r5, [r4, #186]	; 0xba
 800a578:	f884 30b7 	strb.w	r3, [r4, #183]	; 0xb7
 800a57c:	f884 60b9 	strb.w	r6, [r4, #185]	; 0xb9
 800a580:	f884 60bb 	strb.w	r6, [r4, #187]	; 0xbb
 800a584:	6803      	ldr	r3, [r0, #0]
 800a586:	4641      	mov	r1, r8
 800a588:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 800a58c:	691b      	ldr	r3, [r3, #16]
 800a58e:	4798      	blx	r3
 800a590:	2206      	movs	r2, #6
 800a592:	f641 1336 	movw	r3, #6454	; 0x1936
 800a596:	4372      	muls	r2, r6
 800a598:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
 800a59c:	9300      	str	r3, [sp, #0]
 800a59e:	4629      	mov	r1, r5
 800a5a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a5a2:	7920      	ldrb	r0, [r4, #4]
 800a5a4:	321c      	adds	r2, #28
 800a5a6:	f006 fd1d 	bl	8010fe4 <udp_send>
 800a5aa:	b002      	add	sp, #8
 800a5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a5b0 <ArtNetNode::HandleTodControl()>:
 800a5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5b2:	4604      	mov	r4, r0
 800a5b4:	4606      	mov	r6, r0
 800a5b6:	2500      	movs	r5, #0
 800a5b8:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
 800a5bc:	f890 70b7 	ldrb.w	r7, [r0, #183]	; 0xb7
 800a5c0:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800a5c4:	f8b6 36e4 	ldrh.w	r3, [r6, #1764]	; 0x6e4
 800a5c8:	42bb      	cmp	r3, r7
 800a5ca:	d125      	bne.n	800a618 <ArtNetNode::HandleTodControl()+0x68>
 800a5cc:	f896 36e8 	ldrb.w	r3, [r6, #1768]	; 0x6e8
 800a5d0:	b313      	cbz	r3, 800a618 <ArtNetNode::HandleTodControl()+0x68>
 800a5d2:	f896 3705 	ldrb.w	r3, [r6, #1797]	; 0x705
 800a5d6:	b13b      	cbz	r3, 800a5e8 <ArtNetNode::HandleTodControl()+0x38>
 800a5d8:	f894 366e 	ldrb.w	r3, [r4, #1646]	; 0x66e
 800a5dc:	b923      	cbnz	r3, 800a5e8 <ArtNetNode::HandleTodControl()+0x38>
 800a5de:	68a0      	ldr	r0, [r4, #8]
 800a5e0:	4629      	mov	r1, r5
 800a5e2:	6803      	ldr	r3, [r0, #0]
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	4798      	blx	r3
 800a5e8:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d104      	bne.n	800a5fa <ArtNetNode::HandleTodControl()+0x4a>
 800a5f0:	6920      	ldr	r0, [r4, #16]
 800a5f2:	4629      	mov	r1, r5
 800a5f4:	6803      	ldr	r3, [r0, #0]
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	4798      	blx	r3
 800a5fa:	4629      	mov	r1, r5
 800a5fc:	4620      	mov	r0, r4
 800a5fe:	f7ff ff81 	bl	800a504 <ArtNetNode::SendTod(unsigned int)>
 800a602:	f896 3705 	ldrb.w	r3, [r6, #1797]	; 0x705
 800a606:	b13b      	cbz	r3, 800a618 <ArtNetNode::HandleTodControl()+0x68>
 800a608:	f894 366e 	ldrb.w	r3, [r4, #1646]	; 0x66e
 800a60c:	b923      	cbnz	r3, 800a618 <ArtNetNode::HandleTodControl()+0x68>
 800a60e:	68a0      	ldr	r0, [r4, #8]
 800a610:	4629      	mov	r1, r5
 800a612:	6803      	ldr	r3, [r0, #0]
 800a614:	689b      	ldr	r3, [r3, #8]
 800a616:	4798      	blx	r3
 800a618:	3501      	adds	r5, #1
 800a61a:	2d04      	cmp	r5, #4
 800a61c:	f106 0624 	add.w	r6, r6, #36	; 0x24
 800a620:	d1d0      	bne.n	800a5c4 <ArtNetNode::HandleTodControl()+0x14>
 800a622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a624 <ArtNetNode::HandleTodRequest()>:
 800a624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a626:	4604      	mov	r4, r0
 800a628:	4606      	mov	r6, r0
 800a62a:	2500      	movs	r5, #0
 800a62c:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
 800a630:	f890 70b8 	ldrb.w	r7, [r0, #184]	; 0xb8
 800a634:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800a638:	f8b6 36e4 	ldrh.w	r3, [r6, #1764]	; 0x6e4
 800a63c:	42bb      	cmp	r3, r7
 800a63e:	d106      	bne.n	800a64e <ArtNetNode::HandleTodRequest()+0x2a>
 800a640:	f896 36e8 	ldrb.w	r3, [r6, #1768]	; 0x6e8
 800a644:	b11b      	cbz	r3, 800a64e <ArtNetNode::HandleTodRequest()+0x2a>
 800a646:	4629      	mov	r1, r5
 800a648:	4620      	mov	r0, r4
 800a64a:	f7ff ff5b 	bl	800a504 <ArtNetNode::SendTod(unsigned int)>
 800a64e:	3501      	adds	r5, #1
 800a650:	2d04      	cmp	r5, #4
 800a652:	f106 0624 	add.w	r6, r6, #36	; 0x24
 800a656:	d1ef      	bne.n	800a638 <ArtNetNode::HandleTodRequest()+0x14>
 800a658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a65c <ArtNetNode::HandleRdm()>:
 800a65c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a660:	4604      	mov	r4, r0
 800a662:	4605      	mov	r5, r0
 800a664:	2600      	movs	r6, #0
 800a666:	f04f 0b01 	mov.w	fp, #1
 800a66a:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
 800a66e:	f890 70b7 	ldrb.w	r7, [r0, #183]	; 0xb7
 800a672:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 800a734 <ArtNetNode::HandleRdm()+0xd8>
 800a676:	f100 09a0 	add.w	r9, r0, #160	; 0xa0
 800a67a:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800a67e:	f100 08b8 	add.w	r8, r0, #184	; 0xb8
 800a682:	f8b5 36e4 	ldrh.w	r3, [r5, #1764]	; 0x6e4
 800a686:	42bb      	cmp	r3, r7
 800a688:	d148      	bne.n	800a71c <ArtNetNode::HandleRdm()+0xc0>
 800a68a:	f895 36e8 	ldrb.w	r3, [r5, #1768]	; 0x6e8
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d044      	beq.n	800a71c <ArtNetNode::HandleRdm()+0xc0>
 800a692:	f894 366e 	ldrb.w	r3, [r4, #1646]	; 0x66e
 800a696:	b9c3      	cbnz	r3, 800a6ca <ArtNetNode::HandleRdm()+0x6e>
 800a698:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d10c      	bne.n	800a6ba <ArtNetNode::HandleRdm()+0x5e>
 800a6a0:	69e0      	ldr	r0, [r4, #28]
 800a6a2:	b150      	cbz	r0, 800a6ba <ArtNetNode::HandleRdm()+0x5e>
 800a6a4:	6803      	ldr	r3, [r0, #0]
 800a6a6:	4631      	mov	r1, r6
 800a6a8:	691b      	ldr	r3, [r3, #16]
 800a6aa:	4798      	blx	r3
 800a6ac:	f010 0f89 	tst.w	r0, #137	; 0x89
 800a6b0:	bf14      	ite	ne
 800a6b2:	2301      	movne	r3, #1
 800a6b4:	2300      	moveq	r3, #0
 800a6b6:	f885 3705 	strb.w	r3, [r5, #1797]	; 0x705
 800a6ba:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 800a6be:	b123      	cbz	r3, 800a6ca <ArtNetNode::HandleRdm()+0x6e>
 800a6c0:	68a0      	ldr	r0, [r4, #8]
 800a6c2:	4631      	mov	r1, r6
 800a6c4:	6803      	ldr	r3, [r0, #0]
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	4798      	blx	r3
 800a6ca:	6920      	ldr	r0, [r4, #16]
 800a6cc:	4642      	mov	r2, r8
 800a6ce:	6803      	ldr	r3, [r0, #0]
 800a6d0:	4631      	mov	r1, r6
 800a6d2:	695b      	ldr	r3, [r3, #20]
 800a6d4:	4798      	blx	r3
 800a6d6:	b348      	cbz	r0, 800a72c <ArtNetNode::HandleRdm()+0xd0>
 800a6d8:	4641      	mov	r1, r8
 800a6da:	f884 b0ac 	strb.w	fp, [r4, #172]	; 0xac
 800a6de:	7882      	ldrb	r2, [r0, #2]
 800a6e0:	3001      	adds	r0, #1
 800a6e2:	1c53      	adds	r3, r2, #1
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	d304      	bcc.n	800a6f2 <ArtNetNode::HandleRdm()+0x96>
 800a6e8:	f810 cb01 	ldrb.w	ip, [r0], #1
 800a6ec:	f801 cb01 	strb.w	ip, [r1], #1
 800a6f0:	e7f8      	b.n	800a6e4 <ArtNetNode::HandleRdm()+0x88>
 800a6f2:	f641 1336 	movw	r3, #6454	; 0x1936
 800a6f6:	4649      	mov	r1, r9
 800a6f8:	9300      	str	r3, [sp, #0]
 800a6fa:	7920      	ldrb	r0, [r4, #4]
 800a6fc:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
 800a700:	3219      	adds	r2, #25
 800a702:	f006 fc6f 	bl	8010fe4 <udp_send>
 800a706:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 800a70a:	b13b      	cbz	r3, 800a71c <ArtNetNode::HandleRdm()+0xc0>
 800a70c:	f894 366e 	ldrb.w	r3, [r4, #1646]	; 0x66e
 800a710:	b923      	cbnz	r3, 800a71c <ArtNetNode::HandleRdm()+0xc0>
 800a712:	68a0      	ldr	r0, [r4, #8]
 800a714:	4631      	mov	r1, r6
 800a716:	6803      	ldr	r3, [r0, #0]
 800a718:	689b      	ldr	r3, [r3, #8]
 800a71a:	4798      	blx	r3
 800a71c:	3601      	adds	r6, #1
 800a71e:	2e04      	cmp	r6, #4
 800a720:	f105 0524 	add.w	r5, r5, #36	; 0x24
 800a724:	d1ad      	bne.n	800a682 <ArtNetNode::HandleRdm()+0x26>
 800a726:	b003      	add	sp, #12
 800a728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a72c:	4650      	mov	r0, sl
 800a72e:	f7fe fac5 	bl	8008cbc <printf>
 800a732:	e7e8      	b.n	800a706 <ArtNetNode::HandleRdm()+0xaa>
 800a734:	08016a10 	stmdaeq	r1, {r4, r9, fp, sp, lr}

0800a738 <ArtNetNode::HandleSync()>:
 800a738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a73c:	2600      	movs	r6, #0
 800a73e:	2301      	movs	r3, #1
 800a740:	4604      	mov	r4, r0
 800a742:	4605      	mov	r5, r0
 800a744:	46b1      	mov	r9, r6
 800a746:	f880 36d9 	strb.w	r3, [r0, #1753]	; 0x6d9
 800a74a:	4b1e      	ldr	r3, [pc, #120]	; (800a7c4 <ArtNetNode::HandleSync()+0x8c>)
 800a74c:	4f1e      	ldr	r7, [pc, #120]	; (800a7c8 <ArtNetNode::HandleSync()+0x90>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800a7cc <ArtNetNode::HandleSync()+0x94>
 800a754:	f8c0 36d0 	str.w	r3, [r0, #1744]	; 0x6d0
 800a758:	7823      	ldrb	r3, [r4, #0]
 800a75a:	ebb6 0f83 	cmp.w	r6, r3, lsl #2
 800a75e:	d22f      	bcs.n	800a7c0 <ArtNetNode::HandleSync()+0x88>
 800a760:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 800a764:	bb3b      	cbnz	r3, 800a7b6 <ArtNetNode::HandleSync()+0x7e>
 800a766:	f895 36e8 	ldrb.w	r3, [r5, #1768]	; 0x6e8
 800a76a:	b323      	cbz	r3, 800a7b6 <ArtNetNode::HandleSync()+0x7e>
 800a76c:	f8d8 3000 	ldr.w	r3, [r8]
 800a770:	68a0      	ldr	r0, [r4, #8]
 800a772:	07da      	lsls	r2, r3, #31
 800a774:	bf5c      	itt	pl
 800a776:	2301      	movpl	r3, #1
 800a778:	f8c8 3000 	strpl.w	r3, [r8]
 800a77c:	6803      	ldr	r3, [r0, #0]
 800a77e:	4631      	mov	r1, r6
 800a780:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800a784:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 800a788:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800a78c:	47d0      	blx	sl
 800a78e:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 800a792:	b93b      	cbnz	r3, 800a7a4 <ArtNetNode::HandleSync()+0x6c>
 800a794:	68a0      	ldr	r0, [r4, #8]
 800a796:	4631      	mov	r1, r6
 800a798:	6803      	ldr	r3, [r0, #0]
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	4798      	blx	r3
 800a79e:	2301      	movs	r3, #1
 800a7a0:	f885 3705 	strb.w	r3, [r5, #1797]	; 0x705
 800a7a4:	f8d8 3000 	ldr.w	r3, [r8]
 800a7a8:	f8c7 9600 	str.w	r9, [r7, #1536]	; 0x600
 800a7ac:	07db      	lsls	r3, r3, #31
 800a7ae:	bf5c      	itt	pl
 800a7b0:	2301      	movpl	r3, #1
 800a7b2:	f8c8 3000 	strpl.w	r3, [r8]
 800a7b6:	3601      	adds	r6, #1
 800a7b8:	f207 6704 	addw	r7, r7, #1540	; 0x604
 800a7bc:	3524      	adds	r5, #36	; 0x24
 800a7be:	e7cb      	b.n	800a758 <ArtNetNode::HandleSync()+0x20>
 800a7c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7c4:	2000a9dc 	ldrdcs	sl, [r0], -ip
 800a7c8:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800a7cc:	200000ec 	andcs	r0, r0, ip, ror #1

0800a7d0 <ArtNetNode::HandleTimeCode()>:
 800a7d0:	4601      	mov	r1, r0
 800a7d2:	68c0      	ldr	r0, [r0, #12]
 800a7d4:	31ae      	adds	r1, #174	; 0xae
 800a7d6:	6803      	ldr	r3, [r0, #0]
 800a7d8:	691b      	ldr	r3, [r3, #16]
 800a7da:	4718      	bx	r3

0800a7dc <ArtNetNode::HandleTimeSync()>:
 800a7dc:	b500      	push	{lr}
 800a7de:	f890 30af 	ldrb.w	r3, [r0, #175]	; 0xaf
 800a7e2:	b08b      	sub	sp, #44	; 0x2c
 800a7e4:	9301      	str	r3, [sp, #4]
 800a7e6:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 800a7ea:	f890 20b4 	ldrb.w	r2, [r0, #180]	; 0xb4
 800a7ee:	9302      	str	r3, [sp, #8]
 800a7f0:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
 800a7f4:	a901      	add	r1, sp, #4
 800a7f6:	9303      	str	r3, [sp, #12]
 800a7f8:	f890 30b2 	ldrb.w	r3, [r0, #178]	; 0xb2
 800a7fc:	9304      	str	r3, [sp, #16]
 800a7fe:	f890 30b3 	ldrb.w	r3, [r0, #179]	; 0xb3
 800a802:	9305      	str	r3, [sp, #20]
 800a804:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
 800a808:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800a80c:	9306      	str	r3, [sp, #24]
 800a80e:	4b03      	ldr	r3, [pc, #12]	; (800a81c <ArtNetNode::HandleTimeSync()+0x40>)
 800a810:	6818      	ldr	r0, [r3, #0]
 800a812:	f009 fe97 	bl	8014544 <Hardware::SetTime(tm const*)>
 800a816:	b00b      	add	sp, #44	; 0x2c
 800a818:	f85d fb04 	ldr.w	pc, [sp], #4
 800a81c:	2000a9c4 	andcs	sl, r0, r4, asr #19

0800a820 <ArtNetNode::Print()>:
 800a820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a824:	4605      	mov	r5, r0
 800a826:	4604      	mov	r4, r0
 800a828:	b08b      	sub	sp, #44	; 0x2c
 800a82a:	f815 2b42 	ldrb.w	r2, [r5], #66
 800a82e:	2104      	movs	r1, #4
 800a830:	4853      	ldr	r0, [pc, #332]	; (800a980 <ArtNetNode::Print()+0x160>)
 800a832:	f7fe fa43 	bl	8008cbc <printf>
 800a836:	4b53      	ldr	r3, [pc, #332]	; (800a984 <ArtNetNode::Print()+0x164>)
 800a838:	4853      	ldr	r0, [pc, #332]	; (800a988 <ArtNetNode::Print()+0x168>)
 800a83a:	7819      	ldrb	r1, [r3, #0]
 800a83c:	785a      	ldrb	r2, [r3, #1]
 800a83e:	f7fe fa3d 	bl	8008cbc <printf>
 800a842:	4629      	mov	r1, r5
 800a844:	4851      	ldr	r0, [pc, #324]	; (800a98c <ArtNetNode::Print()+0x16c>)
 800a846:	f7fe fa39 	bl	8008cbc <printf>
 800a84a:	4851      	ldr	r0, [pc, #324]	; (800a990 <ArtNetNode::Print()+0x170>)
 800a84c:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800a850:	f7fe fa34 	bl	8008cbc <printf>
 800a854:	f894 36de 	ldrb.w	r3, [r4, #1758]	; 0x6de
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d044      	beq.n	800a8e6 <ArtNetNode::Print()+0xc6>
 800a85c:	484d      	ldr	r0, [pc, #308]	; (800a994 <ArtNetNode::Print()+0x174>)
 800a85e:	f7fe fa2d 	bl	8008cbc <printf>
 800a862:	4626      	mov	r6, r4
 800a864:	2500      	movs	r5, #0
 800a866:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800a998 <ArtNetNode::Print()+0x178>
 800a86a:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800a99c <ArtNetNode::Print()+0x17c>
 800a86e:	7823      	ldrb	r3, [r4, #0]
 800a870:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
 800a874:	d237      	bcs.n	800a8e6 <ArtNetNode::Print()+0xc6>
 800a876:	2301      	movs	r3, #1
 800a878:	4629      	mov	r1, r5
 800a87a:	4620      	mov	r0, r4
 800a87c:	f10d 0225 	add.w	r2, sp, #37	; 0x25
 800a880:	f7fe feaa 	bl	80095d8 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 800a884:	b360      	cbz	r0, 800a8e0 <ArtNetNode::Print()+0xc0>
 800a886:	eb04 0395 	add.w	r3, r4, r5, lsr #2
 800a88a:	f893 a03e 	ldrb.w	sl, [r3, #62]	; 0x3e
 800a88e:	f893 b03f 	ldrb.w	fp, [r3, #63]	; 0x3f
 800a892:	4629      	mov	r1, r5
 800a894:	2301      	movs	r3, #1
 800a896:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800a89a:	4620      	mov	r0, r4
 800a89c:	f7fe fe86 	bl	80095ac <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800a8a0:	f8d6 06fc 	ldr.w	r0, [r6, #1788]	; 0x6fc
 800a8a4:	493e      	ldr	r1, [pc, #248]	; (800a9a0 <ArtNetNode::Print()+0x180>)
 800a8a6:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800a8aa:	2800      	cmp	r0, #0
 800a8ac:	bf18      	it	ne
 800a8ae:	4641      	movne	r1, r8
 800a8b0:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800a8b4:	08af      	lsrs	r7, r5, #2
 800a8b6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800a8ba:	e9cd b300 	strd	fp, r3, [sp]
 800a8be:	463a      	mov	r2, r7
 800a8c0:	4653      	mov	r3, sl
 800a8c2:	4629      	mov	r1, r5
 800a8c4:	4648      	mov	r0, r9
 800a8c6:	f7fe f9f9 	bl	8008cbc <printf>
 800a8ca:	f8d6 1700 	ldr.w	r1, [r6, #1792]	; 0x700
 800a8ce:	4a35      	ldr	r2, [pc, #212]	; (800a9a4 <ArtNetNode::Print()+0x184>)
 800a8d0:	4b35      	ldr	r3, [pc, #212]	; (800a9a8 <ArtNetNode::Print()+0x188>)
 800a8d2:	4836      	ldr	r0, [pc, #216]	; (800a9ac <ArtNetNode::Print()+0x18c>)
 800a8d4:	2900      	cmp	r1, #0
 800a8d6:	bf0c      	ite	eq
 800a8d8:	4611      	moveq	r1, r2
 800a8da:	4619      	movne	r1, r3
 800a8dc:	f7fe f9ee 	bl	8008cbc <printf>
 800a8e0:	3501      	adds	r5, #1
 800a8e2:	3624      	adds	r6, #36	; 0x24
 800a8e4:	e7c3      	b.n	800a86e <ArtNetNode::Print()+0x4e>
 800a8e6:	f894 36df 	ldrb.w	r3, [r4, #1759]	; 0x6df
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d045      	beq.n	800a97a <ArtNetNode::Print()+0x15a>
 800a8ee:	4830      	ldr	r0, [pc, #192]	; (800a9b0 <ArtNetNode::Print()+0x190>)
 800a8f0:	f7fe f9e4 	bl	8008cbc <printf>
 800a8f4:	f04f 0b00 	mov.w	fp, #0
 800a8f8:	4e2e      	ldr	r6, [pc, #184]	; (800a9b4 <ArtNetNode::Print()+0x194>)
 800a8fa:	4f2f      	ldr	r7, [pc, #188]	; (800a9b8 <ArtNetNode::Print()+0x198>)
 800a8fc:	7823      	ldrb	r3, [r4, #0]
 800a8fe:	ebbb 0f83 	cmp.w	fp, r3, lsl #2
 800a902:	d23a      	bcs.n	800a97a <ArtNetNode::Print()+0x15a>
 800a904:	2300      	movs	r3, #0
 800a906:	4659      	mov	r1, fp
 800a908:	4620      	mov	r0, r4
 800a90a:	f10d 0225 	add.w	r2, sp, #37	; 0x25
 800a90e:	f7fe fe63 	bl	80095d8 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 800a912:	b378      	cbz	r0, 800a974 <ArtNetNode::Print()+0x154>
 800a914:	eb04 039b 	add.w	r3, r4, fp, lsr #2
 800a918:	f893 903e 	ldrb.w	r9, [r3, #62]	; 0x3e
 800a91c:	f893 a03f 	ldrb.w	sl, [r3, #63]	; 0x3f
 800a920:	eb04 130b 	add.w	r3, r4, fp, lsl #4
 800a924:	f8d3 577c 	ldr.w	r5, [r3, #1916]	; 0x77c
 800a928:	ea4f 089b 	mov.w	r8, fp, lsr #2
 800a92c:	b925      	cbnz	r5, 800a938 <ArtNetNode::Print()+0x118>
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	699a      	ldr	r2, [r3, #24]
 800a932:	691d      	ldr	r5, [r3, #16]
 800a934:	ea65 0502 	orn	r5, r5, r2
 800a938:	2300      	movs	r3, #0
 800a93a:	4659      	mov	r1, fp
 800a93c:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800a940:	4620      	mov	r0, r4
 800a942:	f7fe fe33 	bl	80095ac <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800a946:	0e2b      	lsrs	r3, r5, #24
 800a948:	9306      	str	r3, [sp, #24]
 800a94a:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800a94e:	9305      	str	r3, [sp, #20]
 800a950:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800a954:	9304      	str	r3, [sp, #16]
 800a956:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800a95a:	b2ed      	uxtb	r5, r5
 800a95c:	9302      	str	r3, [sp, #8]
 800a95e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800a962:	4642      	mov	r2, r8
 800a964:	e9cd a300 	strd	sl, r3, [sp]
 800a968:	4659      	mov	r1, fp
 800a96a:	464b      	mov	r3, r9
 800a96c:	4630      	mov	r0, r6
 800a96e:	9503      	str	r5, [sp, #12]
 800a970:	f7fe f9a4 	bl	8008cbc <printf>
 800a974:	f10b 0b01 	add.w	fp, fp, #1
 800a978:	e7c0      	b.n	800a8fc <ArtNetNode::Print()+0xdc>
 800a97a:	b00b      	add	sp, #44	; 0x2c
 800a97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a980:	08016a36 	stmdaeq	r1, {r1, r2, r4, r5, r9, fp, sp, lr}
 800a984:	08016ca1 	stmdaeq	r1, {r0, r5, r7, sl, fp, sp, lr}
 800a988:	08016a44 	stmdaeq	r1, {r2, r6, r9, fp, sp, lr}
 800a98c:	08016a59 	stmdaeq	r1, {r0, r3, r4, r6, r9, fp, sp, lr}
 800a990:	08016a6b 	stmdaeq	r1, {r0, r1, r3, r5, r6, r9, fp, sp, lr}
 800a994:	08016a7d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r9, fp, sp, lr}
 800a998:	08016a25 	stmdaeq	r1, {r0, r2, r5, r9, fp, sp, lr}
 800a99c:	08016a86 	stmdaeq	r1, {r1, r2, r7, r9, fp, sp, lr}
 800a9a0:	08016a21 	stmdaeq	r1, {r0, r5, r9, fp, sp, lr}
 800a9a4:	08016a29 	stmdaeq	r1, {r0, r3, r5, r9, fp, sp, lr}
 800a9a8:	08016a31 	stmdaeq	r1, {r0, r4, r5, r9, fp, sp, lr}
 800a9ac:	08016aae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r9, fp, sp, lr}
 800a9b0:	08016ab5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r9, fp, sp, lr}
 800a9b4:	08016abd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r9, fp, sp, lr}
 800a9b8:	2000a29c 	mulcs	r0, ip, r2

0800a9bc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 800a9bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a9be:	88c5      	ldrh	r5, [r0, #6]
 800a9c0:	8886      	ldrh	r6, [r0, #4]
 800a9c2:	42b5      	cmp	r5, r6
 800a9c4:	d216      	bcs.n	800a9f4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 800a9c6:	4604      	mov	r4, r0
 800a9c8:	6800      	ldr	r0, [r0, #0]
 800a9ca:	4428      	add	r0, r5
 800a9cc:	1b75      	subs	r5, r6, r5
 800a9ce:	7a26      	ldrb	r6, [r4, #8]
 800a9d0:	b923      	cbnz	r3, 800a9dc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 800a9d2:	b926      	cbnz	r6, 800a9de <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 800a9d4:	9200      	str	r2, [sp, #0]
 800a9d6:	460b      	mov	r3, r1
 800a9d8:	4a09      	ldr	r2, [pc, #36]	; (800aa00 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 800a9da:	e003      	b.n	800a9e4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800a9dc:	b166      	cbz	r6, 800a9f8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 800a9de:	460b      	mov	r3, r1
 800a9e0:	9200      	str	r2, [sp, #0]
 800a9e2:	4a08      	ldr	r2, [pc, #32]	; (800aa04 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 800a9e4:	4629      	mov	r1, r5
 800a9e6:	f7fe f991 	bl	8008d0c <snprintf>
 800a9ea:	4285      	cmp	r5, r0
 800a9ec:	bfa2      	ittt	ge
 800a9ee:	88e3      	ldrhge	r3, [r4, #6]
 800a9f0:	181b      	addge	r3, r3, r0
 800a9f2:	80e3      	strhge	r3, [r4, #6]
 800a9f4:	b002      	add	sp, #8
 800a9f6:	bd70      	pop	{r4, r5, r6, pc}
 800a9f8:	9200      	str	r2, [sp, #0]
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	4a02      	ldr	r2, [pc, #8]	; (800aa08 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 800a9fe:	e7f1      	b.n	800a9e4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800aa00:	08016af9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, sp, lr}
 800aa04:	08016af0 	stmdaeq	r1, {r4, r5, r6, r7, r9, fp, sp, lr}
 800aa08:	08016afa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r9, fp, sp, lr}

0800aa0c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800aa0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa0e:	88c5      	ldrh	r5, [r0, #6]
 800aa10:	8886      	ldrh	r6, [r0, #4]
 800aa12:	42b5      	cmp	r5, r6
 800aa14:	d216      	bcs.n	800aa44 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800aa16:	4604      	mov	r4, r0
 800aa18:	6800      	ldr	r0, [r0, #0]
 800aa1a:	4428      	add	r0, r5
 800aa1c:	1b75      	subs	r5, r6, r5
 800aa1e:	7a26      	ldrb	r6, [r4, #8]
 800aa20:	b923      	cbnz	r3, 800aa2c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800aa22:	b926      	cbnz	r6, 800aa2e <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800aa24:	9200      	str	r2, [sp, #0]
 800aa26:	460b      	mov	r3, r1
 800aa28:	4a09      	ldr	r2, [pc, #36]	; (800aa50 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800aa2a:	e003      	b.n	800aa34 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800aa2c:	b166      	cbz	r6, 800aa48 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800aa2e:	460b      	mov	r3, r1
 800aa30:	9200      	str	r2, [sp, #0]
 800aa32:	4a08      	ldr	r2, [pc, #32]	; (800aa54 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800aa34:	4629      	mov	r1, r5
 800aa36:	f7fe f969 	bl	8008d0c <snprintf>
 800aa3a:	4285      	cmp	r5, r0
 800aa3c:	bfa2      	ittt	ge
 800aa3e:	88e3      	ldrhge	r3, [r4, #6]
 800aa40:	181b      	addge	r3, r3, r0
 800aa42:	80e3      	strhge	r3, [r4, #6]
 800aa44:	b002      	add	sp, #8
 800aa46:	bd70      	pop	{r4, r5, r6, pc}
 800aa48:	9200      	str	r2, [sp, #0]
 800aa4a:	460b      	mov	r3, r1
 800aa4c:	4a02      	ldr	r2, [pc, #8]	; (800aa58 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800aa4e:	e7f1      	b.n	800aa34 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800aa50:	08016b0c 	stmdaeq	r1, {r2, r3, r8, r9, fp, sp, lr}
 800aa54:	08016b01 	stmdaeq	r1, {r0, r8, r9, fp, sp, lr}
 800aa58:	08016b0d 	stmdaeq	r1, {r0, r2, r3, r8, r9, fp, sp, lr}

0800aa5c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800aa5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa5e:	460b      	mov	r3, r1
 800aa60:	8885      	ldrh	r5, [r0, #4]
 800aa62:	88c1      	ldrh	r1, [r0, #6]
 800aa64:	42a9      	cmp	r1, r5
 800aa66:	d214      	bcs.n	800aa92 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800aa68:	4604      	mov	r4, r0
 800aa6a:	6800      	ldr	r0, [r0, #0]
 800aa6c:	1a6d      	subs	r5, r5, r1
 800aa6e:	4408      	add	r0, r1
 800aa70:	7a21      	ldrb	r1, [r4, #8]
 800aa72:	b91a      	cbnz	r2, 800aa7c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800aa74:	b919      	cbnz	r1, 800aa7e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800aa76:	4a0a      	ldr	r2, [pc, #40]	; (800aaa0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800aa78:	9100      	str	r1, [sp, #0]
 800aa7a:	e002      	b.n	800aa82 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800aa7c:	b159      	cbz	r1, 800aa96 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800aa7e:	9200      	str	r2, [sp, #0]
 800aa80:	4a08      	ldr	r2, [pc, #32]	; (800aaa4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800aa82:	4629      	mov	r1, r5
 800aa84:	f7fe f942 	bl	8008d0c <snprintf>
 800aa88:	4285      	cmp	r5, r0
 800aa8a:	bfa2      	ittt	ge
 800aa8c:	88e3      	ldrhge	r3, [r4, #6]
 800aa8e:	181b      	addge	r3, r3, r0
 800aa90:	80e3      	strhge	r3, [r4, #6]
 800aa92:	b003      	add	sp, #12
 800aa94:	bd30      	pop	{r4, r5, pc}
 800aa96:	2201      	movs	r2, #1
 800aa98:	9200      	str	r2, [sp, #0]
 800aa9a:	4a03      	ldr	r2, [pc, #12]	; (800aaa8 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800aa9c:	e7f1      	b.n	800aa82 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800aa9e:	bf00      	nop
 800aaa0:	08016af9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, sp, lr}
 800aaa4:	08016af0 	stmdaeq	r1, {r4, r5, r6, r7, r9, fp, sp, lr}
 800aaa8:	08016afa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r9, fp, sp, lr}

0800aaac <strncpy.isra.0>:
 800aaac:	1e4b      	subs	r3, r1, #1
 800aaae:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800aab2:	b909      	cbnz	r1, 800aab8 <strncpy.isra.0+0xc>
 800aab4:	f009 be60 	b.w	8014778 <memset>
 800aab8:	3a01      	subs	r2, #1
 800aaba:	f800 1b01 	strb.w	r1, [r0], #1
 800aabe:	d1f6      	bne.n	800aaae <strncpy.isra.0+0x2>
 800aac0:	4770      	bx	lr
	...

0800aac4 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>:
 800aac4:	b510      	push	{r4, lr}
 800aac6:	2287      	movs	r2, #135	; 0x87
 800aac8:	4604      	mov	r4, r0
 800aaca:	f840 1b04 	str.w	r1, [r0], #4
 800aace:	2100      	movs	r1, #0
 800aad0:	f009 fe52 	bl	8014778 <memset>
 800aad4:	2301      	movs	r3, #1
 800aad6:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800aada:	f240 3302 	movw	r3, #770	; 0x302
 800aade:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800aae2:	2304      	movs	r3, #4
 800aae4:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 800aae8:	4b07      	ldr	r3, [pc, #28]	; (800ab08 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)+0x44>)
 800aaea:	4620      	mov	r0, r4
 800aaec:	785a      	ldrb	r2, [r3, #1]
 800aaee:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
 800aaf8:	230a      	movs	r3, #10
 800aafa:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
 800aafe:	23ff      	movs	r3, #255	; 0xff
 800ab00:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800ab04:	bd10      	pop	{r4, pc}
 800ab06:	bf00      	nop
 800ab08:	08016c9d 	stmdaeq	r1, {r0, r2, r3, r4, r7, sl, fp, sp, lr}

0800ab0c <ArtNetParams::Load()>:
 800ab0c:	b508      	push	{r3, lr}
 800ab0e:	2300      	movs	r3, #0
 800ab10:	4601      	mov	r1, r0
 800ab12:	6043      	str	r3, [r0, #4]
 800ab14:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800ab18:	6800      	ldr	r0, [r0, #0]
 800ab1a:	b120      	cbz	r0, 800ab26 <ArtNetParams::Load()+0x1a>
 800ab1c:	6803      	ldr	r3, [r0, #0]
 800ab1e:	3104      	adds	r1, #4
 800ab20:	68db      	ldr	r3, [r3, #12]
 800ab22:	4798      	blx	r3
 800ab24:	2001      	movs	r0, #1
 800ab26:	bd08      	pop	{r3, pc}

0800ab28 <ArtNetParams::Load(char const*, unsigned int)>:
 800ab28:	6803      	ldr	r3, [r0, #0]
 800ab2a:	b1e3      	cbz	r3, 800ab66 <ArtNetParams::Load(char const*, unsigned int)+0x3e>
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab30:	460d      	mov	r5, r1
 800ab32:	4616      	mov	r6, r2
 800ab34:	4604      	mov	r4, r0
 800ab36:	6043      	str	r3, [r0, #4]
 800ab38:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	490a      	ldr	r1, [pc, #40]	; (800ab68 <ArtNetParams::Load(char const*, unsigned int)+0x40>)
 800ab40:	4668      	mov	r0, sp
 800ab42:	f008 ff63 	bl	8013a0c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800ab46:	4632      	mov	r2, r6
 800ab48:	4629      	mov	r1, r5
 800ab4a:	4668      	mov	r0, sp
 800ab4c:	f008 ff62 	bl	8013a14 <ReadConfigFile::Read(char const*, unsigned int)>
 800ab50:	4621      	mov	r1, r4
 800ab52:	f851 0b04 	ldr.w	r0, [r1], #4
 800ab56:	6803      	ldr	r3, [r0, #0]
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	4798      	blx	r3
 800ab5c:	4668      	mov	r0, sp
 800ab5e:	f008 ff58 	bl	8013a12 <ReadConfigFile::~ReadConfigFile()>
 800ab62:	b002      	add	sp, #8
 800ab64:	bd70      	pop	{r4, r5, r6, pc}
 800ab66:	4770      	bx	lr
 800ab68:	0800af31 	stmdaeq	r0, {r0, r4, r5, r8, r9, sl, fp, sp, pc}

0800ab6c <ArtNetParams::SetBool(unsigned char, unsigned int)>:
 800ab6c:	6843      	ldr	r3, [r0, #4]
 800ab6e:	b111      	cbz	r1, 800ab76 <ArtNetParams::SetBool(unsigned char, unsigned int)+0xa>
 800ab70:	4313      	orrs	r3, r2
 800ab72:	6043      	str	r3, [r0, #4]
 800ab74:	4770      	bx	lr
 800ab76:	ea23 0302 	bic.w	r3, r3, r2
 800ab7a:	e7fa      	b.n	800ab72 <ArtNetParams::SetBool(unsigned char, unsigned int)+0x6>

0800ab7c <ArtNetParams::callbackFunction(char const*)>:
 800ab7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab80:	460e      	mov	r6, r1
 800ab82:	b0a5      	sub	sp, #148	; 0x94
 800ab84:	4604      	mov	r4, r0
 800ab86:	49a7      	ldr	r1, [pc, #668]	; (800ae24 <ArtNetParams::callbackFunction(char const*)+0x2a8>)
 800ab88:	4630      	mov	r0, r6
 800ab8a:	f10d 0205 	add.w	r2, sp, #5
 800ab8e:	f009 f8a3 	bl	8013cd8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ab92:	b930      	cbnz	r0, 800aba2 <ArtNetParams::callbackFunction(char const*)+0x26>
 800ab94:	2220      	movs	r2, #32
 800ab96:	4620      	mov	r0, r4
 800ab98:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800ab9c:	f7ff ffe6 	bl	800ab6c <ArtNetParams::SetBool(unsigned char, unsigned int)>
 800aba0:	e010      	b.n	800abc4 <ArtNetParams::callbackFunction(char const*)+0x48>
 800aba2:	2311      	movs	r3, #17
 800aba4:	4630      	mov	r0, r6
 800aba6:	9303      	str	r3, [sp, #12]
 800aba8:	499f      	ldr	r1, [pc, #636]	; (800ae28 <ArtNetParams::callbackFunction(char const*)+0x2ac>)
 800abaa:	ab03      	add	r3, sp, #12
 800abac:	f104 0210 	add.w	r2, r4, #16
 800abb0:	f008 ff64 	bl	8013a7c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800abb4:	b948      	cbnz	r0, 800abca <ArtNetParams::callbackFunction(char const*)+0x4e>
 800abb6:	9b03      	ldr	r3, [sp, #12]
 800abb8:	4423      	add	r3, r4
 800abba:	7418      	strb	r0, [r3, #16]
 800abbc:	6863      	ldr	r3, [r4, #4]
 800abbe:	f043 0302 	orr.w	r3, r3, #2
 800abc2:	6063      	str	r3, [r4, #4]
 800abc4:	b025      	add	sp, #148	; 0x94
 800abc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abca:	233f      	movs	r3, #63	; 0x3f
 800abcc:	4630      	mov	r0, r6
 800abce:	9303      	str	r3, [sp, #12]
 800abd0:	4996      	ldr	r1, [pc, #600]	; (800ae2c <ArtNetParams::callbackFunction(char const*)+0x2b0>)
 800abd2:	ab03      	add	r3, sp, #12
 800abd4:	f104 0222 	add.w	r2, r4, #34	; 0x22
 800abd8:	f008 ff50 	bl	8013a7c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800abdc:	b938      	cbnz	r0, 800abee <ArtNetParams::callbackFunction(char const*)+0x72>
 800abde:	9b03      	ldr	r3, [sp, #12]
 800abe0:	4423      	add	r3, r4
 800abe2:	f883 0022 	strb.w	r0, [r3, #34]	; 0x22
 800abe6:	6863      	ldr	r3, [r4, #4]
 800abe8:	f043 0301 	orr.w	r3, r3, #1
 800abec:	e7e9      	b.n	800abc2 <ArtNetParams::callbackFunction(char const*)+0x46>
 800abee:	4630      	mov	r0, r6
 800abf0:	498f      	ldr	r1, [pc, #572]	; (800ae30 <ArtNetParams::callbackFunction(char const*)+0x2b4>)
 800abf2:	f10d 0206 	add.w	r2, sp, #6
 800abf6:	f008 ffbd 	bl	8013b74 <Sscan::HexUint16(char const*, char const*, unsigned short&)>
 800abfa:	b940      	cbnz	r0, 800ac0e <ArtNetParams::callbackFunction(char const*)+0x92>
 800abfc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800ac00:	ba5b      	rev16	r3, r3
 800ac02:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 800ac06:	6863      	ldr	r3, [r4, #4]
 800ac08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ac0c:	e7d9      	b.n	800abc2 <ArtNetParams::callbackFunction(char const*)+0x46>
 800ac0e:	4630      	mov	r0, r6
 800ac10:	4988      	ldr	r1, [pc, #544]	; (800ae34 <ArtNetParams::callbackFunction(char const*)+0x2b8>)
 800ac12:	f10d 0205 	add.w	r2, sp, #5
 800ac16:	f009 f85f 	bl	8013cd8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ac1a:	b958      	cbnz	r0, 800ac34 <ArtNetParams::callbackFunction(char const*)+0xb8>
 800ac1c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ac20:	6863      	ldr	r3, [r4, #4]
 800ac22:	2a0a      	cmp	r2, #10
 800ac24:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
 800ac28:	bf14      	ite	ne
 800ac2a:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 800ac2e:	f423 6300 	biceq.w	r3, r3, #2048	; 0x800
 800ac32:	e7c6      	b.n	800abc2 <ArtNetParams::callbackFunction(char const*)+0x46>
 800ac34:	4630      	mov	r0, r6
 800ac36:	4980      	ldr	r1, [pc, #512]	; (800ae38 <ArtNetParams::callbackFunction(char const*)+0x2bc>)
 800ac38:	f10d 0205 	add.w	r2, sp, #5
 800ac3c:	f009 f84c 	bl	8013cd8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ac40:	b910      	cbnz	r0, 800ac48 <ArtNetParams::callbackFunction(char const*)+0xcc>
 800ac42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ac46:	e7a6      	b.n	800ab96 <ArtNetParams::callbackFunction(char const*)+0x1a>
 800ac48:	4630      	mov	r0, r6
 800ac4a:	497c      	ldr	r1, [pc, #496]	; (800ae3c <ArtNetParams::callbackFunction(char const*)+0x2c0>)
 800ac4c:	f10d 0205 	add.w	r2, sp, #5
 800ac50:	f009 f842 	bl	8013cd8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ac54:	b950      	cbnz	r0, 800ac6c <ArtNetParams::callbackFunction(char const*)+0xf0>
 800ac56:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ac5a:	6863      	ldr	r3, [r4, #4]
 800ac5c:	7222      	strb	r2, [r4, #8]
 800ac5e:	b112      	cbz	r2, 800ac66 <ArtNetParams::callbackFunction(char const*)+0xea>
 800ac60:	f043 0304 	orr.w	r3, r3, #4
 800ac64:	e7ad      	b.n	800abc2 <ArtNetParams::callbackFunction(char const*)+0x46>
 800ac66:	f023 0304 	bic.w	r3, r3, #4
 800ac6a:	e7aa      	b.n	800abc2 <ArtNetParams::callbackFunction(char const*)+0x46>
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	4974      	ldr	r1, [pc, #464]	; (800ae40 <ArtNetParams::callbackFunction(char const*)+0x2c4>)
 800ac70:	f10d 0205 	add.w	r2, sp, #5
 800ac74:	f009 f830 	bl	8013cd8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ac78:	b950      	cbnz	r0, 800ac90 <ArtNetParams::callbackFunction(char const*)+0x114>
 800ac7a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ac7e:	6863      	ldr	r3, [r4, #4]
 800ac80:	7262      	strb	r2, [r4, #9]
 800ac82:	b112      	cbz	r2, 800ac8a <ArtNetParams::callbackFunction(char const*)+0x10e>
 800ac84:	f043 0308 	orr.w	r3, r3, #8
 800ac88:	e79b      	b.n	800abc2 <ArtNetParams::callbackFunction(char const*)+0x46>
 800ac8a:	f023 0308 	bic.w	r3, r3, #8
 800ac8e:	e798      	b.n	800abc2 <ArtNetParams::callbackFunction(char const*)+0x46>
 800ac90:	2303      	movs	r3, #3
 800ac92:	4630      	mov	r0, r6
 800ac94:	9303      	str	r3, [sp, #12]
 800ac96:	496b      	ldr	r1, [pc, #428]	; (800ae44 <ArtNetParams::callbackFunction(char const*)+0x2c8>)
 800ac98:	ab03      	add	r3, sp, #12
 800ac9a:	aa04      	add	r2, sp, #16
 800ac9c:	f008 feee 	bl	8013a7c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800aca0:	b9f0      	cbnz	r0, 800ace0 <ArtNetParams::callbackFunction(char const*)+0x164>
 800aca2:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800aca6:	6863      	ldr	r3, [r4, #4]
 800aca8:	f042 0220 	orr.w	r2, r2, #32
 800acac:	2a6c      	cmp	r2, #108	; 0x6c
 800acae:	d111      	bne.n	800acd4 <ArtNetParams::callbackFunction(char const*)+0x158>
 800acb0:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800acb4:	f042 0220 	orr.w	r2, r2, #32
 800acb8:	2a74      	cmp	r2, #116	; 0x74
 800acba:	d10b      	bne.n	800acd4 <ArtNetParams::callbackFunction(char const*)+0x158>
 800acbc:	f89d 2012 	ldrb.w	r2, [sp, #18]
 800acc0:	f042 0220 	orr.w	r2, r2, #32
 800acc4:	2a70      	cmp	r2, #112	; 0x70
 800acc6:	d105      	bne.n	800acd4 <ArtNetParams::callbackFunction(char const*)+0x158>
 800acc8:	2201      	movs	r2, #1
 800acca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acce:	f884 206f 	strb.w	r2, [r4, #111]	; 0x6f
 800acd2:	e776      	b.n	800abc2 <ArtNetParams::callbackFunction(char const*)+0x46>
 800acd4:	2200      	movs	r2, #0
 800acd6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800acda:	f884 206f 	strb.w	r2, [r4, #111]	; 0x6f
 800acde:	e770      	b.n	800abc2 <ArtNetParams::callbackFunction(char const*)+0x46>
 800ace0:	2304      	movs	r3, #4
 800ace2:	4630      	mov	r0, r6
 800ace4:	9303      	str	r3, [sp, #12]
 800ace6:	4958      	ldr	r1, [pc, #352]	; (800ae48 <ArtNetParams::callbackFunction(char const*)+0x2cc>)
 800ace8:	ab03      	add	r3, sp, #12
 800acea:	aa04      	add	r2, sp, #16
 800acec:	f008 fec6 	bl	8013a7c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800acf0:	b9c0      	cbnz	r0, 800ad24 <ArtNetParams::callbackFunction(char const*)+0x1a8>
 800acf2:	2304      	movs	r3, #4
 800acf4:	4a55      	ldr	r2, [pc, #340]	; (800ae4c <ArtNetParams::callbackFunction(char const*)+0x2d0>)
 800acf6:	a904      	add	r1, sp, #16
 800acf8:	3b01      	subs	r3, #1
 800acfa:	d30c      	bcc.n	800ad16 <ArtNetParams::callbackFunction(char const*)+0x19a>
 800acfc:	f811 5b01 	ldrb.w	r5, [r1], #1
 800ad00:	f812 0b01 	ldrb.w	r0, [r2], #1
 800ad04:	4285      	cmp	r5, r0
 800ad06:	d0f7      	beq.n	800acf8 <ArtNetParams::callbackFunction(char const*)+0x17c>
 800ad08:	2200      	movs	r2, #0
 800ad0a:	6863      	ldr	r3, [r4, #4]
 800ad0c:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
 800ad10:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800ad14:	e755      	b.n	800abc2 <ArtNetParams::callbackFunction(char const*)+0x46>
 800ad16:	2301      	movs	r3, #1
 800ad18:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
 800ad1c:	6863      	ldr	r3, [r4, #4]
 800ad1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ad22:	e74e      	b.n	800abc2 <ArtNetParams::callbackFunction(char const*)+0x46>
 800ad24:	2500      	movs	r5, #0
 800ad26:	4f4a      	ldr	r7, [pc, #296]	; (800ae50 <ArtNetParams::callbackFunction(char const*)+0x2d4>)
 800ad28:	f8df 8128 	ldr.w	r8, [pc, #296]	; 800ae54 <ArtNetParams::callbackFunction(char const*)+0x2d8>
 800ad2c:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800ae58 <ArtNetParams::callbackFunction(char const*)+0x2dc>
 800ad30:	f8df a128 	ldr.w	sl, [pc, #296]	; 800ae5c <ArtNetParams::callbackFunction(char const*)+0x2e0>
 800ad34:	4639      	mov	r1, r7
 800ad36:	4630      	mov	r0, r6
 800ad38:	f10d 0205 	add.w	r2, sp, #5
 800ad3c:	f008 ffcc 	bl	8013cd8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ad40:	b9a0      	cbnz	r0, 800ad6c <ArtNetParams::callbackFunction(char const*)+0x1f0>
 800ad42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ad46:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800ad4a:	6862      	ldr	r2, [r4, #4]
 800ad4c:	280f      	cmp	r0, #15
 800ad4e:	fa03 f305 	lsl.w	r3, r3, r5
 800ad52:	eb04 0105 	add.w	r1, r4, r5
 800ad56:	d803      	bhi.n	800ad60 <ArtNetParams::callbackFunction(char const*)+0x1e4>
 800ad58:	f881 006b 	strb.w	r0, [r1, #107]	; 0x6b
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	e730      	b.n	800abc2 <ArtNetParams::callbackFunction(char const*)+0x46>
 800ad60:	3501      	adds	r5, #1
 800ad62:	f881 506b 	strb.w	r5, [r1, #107]	; 0x6b
 800ad66:	ea22 0303 	bic.w	r3, r2, r3
 800ad6a:	e72a      	b.n	800abc2 <ArtNetParams::callbackFunction(char const*)+0x46>
 800ad6c:	f04f 0b12 	mov.w	fp, #18
 800ad70:	2303      	movs	r3, #3
 800ad72:	fb0b fb05 	mul.w	fp, fp, r5
 800ad76:	9303      	str	r3, [sp, #12]
 800ad78:	4630      	mov	r0, r6
 800ad7a:	ab03      	add	r3, sp, #12
 800ad7c:	aa04      	add	r2, sp, #16
 800ad7e:	eb08 010b 	add.w	r1, r8, fp
 800ad82:	f008 fe7b 	bl	8013a7c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800ad86:	b9f0      	cbnz	r0, 800adc6 <ArtNetParams::callbackFunction(char const*)+0x24a>
 800ad88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ad8c:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800ad90:	40ab      	lsls	r3, r5
 800ad92:	f041 0120 	orr.w	r1, r1, #32
 800ad96:	296c      	cmp	r1, #108	; 0x6c
 800ad98:	6862      	ldr	r2, [r4, #4]
 800ad9a:	4425      	add	r5, r4
 800ad9c:	d10f      	bne.n	800adbe <ArtNetParams::callbackFunction(char const*)+0x242>
 800ad9e:	f89d 1011 	ldrb.w	r1, [sp, #17]
 800ada2:	f041 0120 	orr.w	r1, r1, #32
 800ada6:	2974      	cmp	r1, #116	; 0x74
 800ada8:	d109      	bne.n	800adbe <ArtNetParams::callbackFunction(char const*)+0x242>
 800adaa:	f89d 1012 	ldrb.w	r1, [sp, #18]
 800adae:	f041 0120 	orr.w	r1, r1, #32
 800adb2:	2970      	cmp	r1, #112	; 0x70
 800adb4:	d103      	bne.n	800adbe <ArtNetParams::callbackFunction(char const*)+0x242>
 800adb6:	2101      	movs	r1, #1
 800adb8:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800adbc:	e7ce      	b.n	800ad5c <ArtNetParams::callbackFunction(char const*)+0x1e0>
 800adbe:	2100      	movs	r1, #0
 800adc0:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800adc4:	e7cf      	b.n	800ad66 <ArtNetParams::callbackFunction(char const*)+0x1ea>
 800adc6:	2304      	movs	r3, #4
 800adc8:	4630      	mov	r0, r6
 800adca:	9303      	str	r3, [sp, #12]
 800adcc:	aa04      	add	r2, sp, #16
 800adce:	ab03      	add	r3, sp, #12
 800add0:	eb09 1105 	add.w	r1, r9, r5, lsl #4
 800add4:	f008 fe52 	bl	8013a7c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800add8:	2305      	movs	r3, #5
 800adda:	2800      	cmp	r0, #0
 800addc:	d140      	bne.n	800ae60 <ArtNetParams::callbackFunction(char const*)+0x2e4>
 800adde:	4a1b      	ldr	r2, [pc, #108]	; (800ae4c <ArtNetParams::callbackFunction(char const*)+0x2d0>)
 800ade0:	a904      	add	r1, sp, #16
 800ade2:	3b01      	subs	r3, #1
 800ade4:	d012      	beq.n	800ae0c <ArtNetParams::callbackFunction(char const*)+0x290>
 800ade6:	f811 6b01 	ldrb.w	r6, [r1], #1
 800adea:	f812 0b01 	ldrb.w	r0, [r2], #1
 800adee:	4286      	cmp	r6, r0
 800adf0:	d0f7      	beq.n	800ade2 <ArtNetParams::callbackFunction(char const*)+0x266>
 800adf2:	2100      	movs	r1, #0
 800adf4:	1962      	adds	r2, r4, r5
 800adf6:	6863      	ldr	r3, [r4, #4]
 800adf8:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
 800adfc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800ae00:	fa02 f505 	lsl.w	r5, r2, r5
 800ae04:	ea23 0505 	bic.w	r5, r3, r5
 800ae08:	6065      	str	r5, [r4, #4]
 800ae0a:	e6db      	b.n	800abc4 <ArtNetParams::callbackFunction(char const*)+0x48>
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	1963      	adds	r3, r4, r5
 800ae10:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800ae14:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ae18:	fa03 f505 	lsl.w	r5, r3, r5
 800ae1c:	6863      	ldr	r3, [r4, #4]
 800ae1e:	432b      	orrs	r3, r5
 800ae20:	e6cf      	b.n	800abc2 <ArtNetParams::callbackFunction(char const*)+0x46>
 800ae22:	bf00      	nop
 800ae24:	08016b76 	stmdaeq	r1, {r1, r2, r4, r5, r6, r8, r9, fp, sp, lr}
 800ae28:	08016be3 	stmdaeq	r1, {r0, r1, r5, r6, r7, r8, r9, fp, sp, lr}
 800ae2c:	08016bcf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, r8, r9, fp, sp, lr}
 800ae30:	08016bd9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r8, r9, fp, sp, lr}
 800ae34:	08016c64 	stmdaeq	r1, {r2, r5, r6, sl, fp, sp, lr}
 800ae38:	08016c4e 	stmdaeq	r1, {r1, r2, r3, r6, sl, fp, sp, lr}
 800ae3c:	08016c7e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, sl, fp, sp, lr}
 800ae40:	08016c82 	stmdaeq	r1, {r1, r7, sl, fp, sp, lr}
 800ae44:	080185ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r8, sl, pc}
 800ae48:	08016c89 	stmdaeq	r1, {r0, r3, r7, sl, fp, sp, lr}
 800ae4c:	08016b14 	stmdaeq	r1, {r2, r4, r8, r9, fp, sp, lr}
 800ae50:	08018607 	stmdaeq	r1, {r0, r1, r2, r9, sl, pc}
 800ae54:	080186d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r9, sl, pc}
 800ae58:	08016b8f 	stmdaeq	r1, {r0, r1, r2, r3, r7, r8, r9, fp, sp, lr}
 800ae5c:	0801873a 	stmdaeq	r1, {r1, r3, r4, r5, r8, r9, sl, pc}
 800ae60:	9303      	str	r3, [sp, #12]
 800ae62:	4630      	mov	r0, r6
 800ae64:	ab03      	add	r3, sp, #12
 800ae66:	aa04      	add	r2, sp, #16
 800ae68:	eb0a 010b 	add.w	r1, sl, fp
 800ae6c:	f008 fe06 	bl	8013a7c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800ae70:	bb68      	cbnz	r0, 800aece <ArtNetParams::callbackFunction(char const*)+0x352>
 800ae72:	2301      	movs	r3, #1
 800ae74:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
 800ae78:	40ab      	lsls	r3, r5
 800ae7a:	ea22 0303 	bic.w	r3, r2, r3
 800ae7e:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800ae82:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800ae86:	f042 0220 	orr.w	r2, r2, #32
 800ae8a:	2a69      	cmp	r2, #105	; 0x69
 800ae8c:	d118      	bne.n	800aec0 <ArtNetParams::callbackFunction(char const*)+0x344>
 800ae8e:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800ae92:	f042 0220 	orr.w	r2, r2, #32
 800ae96:	2a6e      	cmp	r2, #110	; 0x6e
 800ae98:	d112      	bne.n	800aec0 <ArtNetParams::callbackFunction(char const*)+0x344>
 800ae9a:	f89d 2012 	ldrb.w	r2, [sp, #18]
 800ae9e:	f042 0220 	orr.w	r2, r2, #32
 800aea2:	2a70      	cmp	r2, #112	; 0x70
 800aea4:	d10c      	bne.n	800aec0 <ArtNetParams::callbackFunction(char const*)+0x344>
 800aea6:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800aeaa:	f042 0220 	orr.w	r2, r2, #32
 800aeae:	2a75      	cmp	r2, #117	; 0x75
 800aeb0:	d106      	bne.n	800aec0 <ArtNetParams::callbackFunction(char const*)+0x344>
 800aeb2:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800aeb6:	f042 0220 	orr.w	r2, r2, #32
 800aeba:	2a74      	cmp	r2, #116	; 0x74
 800aebc:	f43f ae82 	beq.w	800abc4 <ArtNetParams::callbackFunction(char const*)+0x48>
 800aec0:	2201      	movs	r2, #1
 800aec2:	fa02 f505 	lsl.w	r5, r2, r5
 800aec6:	432b      	orrs	r3, r5
 800aec8:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800aecc:	e67a      	b.n	800abc4 <ArtNetParams::callbackFunction(char const*)+0x48>
 800aece:	2118      	movs	r1, #24
 800aed0:	4b15      	ldr	r3, [pc, #84]	; (800af28 <ArtNetParams::callbackFunction(char const*)+0x3ac>)
 800aed2:	4630      	mov	r0, r6
 800aed4:	fb01 3105 	mla	r1, r1, r5, r3
 800aed8:	aa02      	add	r2, sp, #8
 800aeda:	f008 fe76 	bl	8013bca <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 800aede:	b968      	cbnz	r0, 800aefc <ArtNetParams::callbackFunction(char const*)+0x380>
 800aee0:	9902      	ldr	r1, [sp, #8]
 800aee2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aee6:	f8c3 107b 	str.w	r1, [r3, #123]	; 0x7b
 800aeea:	2301      	movs	r3, #1
 800aeec:	40ab      	lsls	r3, r5
 800aeee:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	b1a1      	cbz	r1, 800af20 <ArtNetParams::callbackFunction(char const*)+0x3a4>
 800aef6:	4313      	orrs	r3, r2
 800aef8:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 800aefc:	3501      	adds	r5, #1
 800aefe:	2d04      	cmp	r5, #4
 800af00:	f107 0710 	add.w	r7, r7, #16
 800af04:	f47f af16 	bne.w	800ad34 <ArtNetParams::callbackFunction(char const*)+0x1b8>
 800af08:	4630      	mov	r0, r6
 800af0a:	4908      	ldr	r1, [pc, #32]	; (800af2c <ArtNetParams::callbackFunction(char const*)+0x3b0>)
 800af0c:	f10d 0205 	add.w	r2, sp, #5
 800af10:	f008 fee2 	bl	8013cd8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800af14:	2800      	cmp	r0, #0
 800af16:	f47f ae55 	bne.w	800abc4 <ArtNetParams::callbackFunction(char const*)+0x48>
 800af1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800af1e:	e63a      	b.n	800ab96 <ArtNetParams::callbackFunction(char const*)+0x1a>
 800af20:	ea22 0303 	bic.w	r3, r2, r3
 800af24:	e7e8      	b.n	800aef8 <ArtNetParams::callbackFunction(char const*)+0x37c>
 800af26:	bf00      	nop
 800af28:	08016bee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, r8, r9, fp, sp, lr}
 800af2c:	08016b81 	stmdaeq	r1, {r0, r7, r8, r9, fp, sp, lr}

0800af30 <ArtNetParams::staticCallbackFunction(void*, char const*)>:
 800af30:	f7ff be24 	b.w	800ab7c <ArtNetParams::callbackFunction(char const*)>

0800af34 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>:
 800af34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af38:	4604      	mov	r4, r0
 800af3a:	4615      	mov	r5, r2
 800af3c:	461e      	mov	r6, r3
 800af3e:	b086      	sub	sp, #24
 800af40:	3004      	adds	r0, #4
 800af42:	2900      	cmp	r1, #0
 800af44:	f000 814b 	beq.w	800b1de <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2aa>
 800af48:	2287      	movs	r2, #135	; 0x87
 800af4a:	f009 fbfe 	bl	801474a <memmove>
 800af4e:	4633      	mov	r3, r6
 800af50:	462a      	mov	r2, r5
 800af52:	49a6      	ldr	r1, [pc, #664]	; (800b1ec <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b8>)
 800af54:	a803      	add	r0, sp, #12
 800af56:	f008 fc89 	bl	801386c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800af5a:	2500      	movs	r5, #0
 800af5c:	4ea4      	ldr	r6, [pc, #656]	; (800b1f0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2bc>)
 800af5e:	f8df 8294 	ldr.w	r8, [pc, #660]	; 800b1f4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c0>
 800af62:	4fa5      	ldr	r7, [pc, #660]	; (800b1f8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c4>)
 800af64:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
 800af68:	4631      	mov	r1, r6
 800af6a:	412b      	asrs	r3, r5
 800af6c:	f013 0f01 	tst.w	r3, #1
 800af70:	ea6f 0303 	mvn.w	r3, r3
 800af74:	bf0c      	ite	eq
 800af76:	4642      	moveq	r2, r8
 800af78:	463a      	movne	r2, r7
 800af7a:	f003 0301 	and.w	r3, r3, #1
 800af7e:	a803      	add	r0, sp, #12
 800af80:	3501      	adds	r5, #1
 800af82:	f7ff fd43 	bl	800aa0c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800af86:	2d04      	cmp	r5, #4
 800af88:	f106 0612 	add.w	r6, r6, #18
 800af8c:	d1ea      	bne.n	800af64 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x30>
 800af8e:	6863      	ldr	r3, [r4, #4]
 800af90:	7a22      	ldrb	r2, [r4, #8]
 800af92:	499a      	ldr	r1, [pc, #616]	; (800b1fc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c8>)
 800af94:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800af98:	a803      	add	r0, sp, #12
 800af9a:	f7ff fd0f 	bl	800a9bc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800af9e:	6863      	ldr	r3, [r4, #4]
 800afa0:	7a62      	ldrb	r2, [r4, #9]
 800afa2:	4997      	ldr	r1, [pc, #604]	; (800b200 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2cc>)
 800afa4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800afa8:	a803      	add	r0, sp, #12
 800afaa:	f7ff fd07 	bl	800a9bc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800afae:	4995      	ldr	r1, [pc, #596]	; (800b204 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d0>)
 800afb0:	a803      	add	r0, sp, #12
 800afb2:	f008 fce1 	bl	8013978 <PropertiesBuilder::AddComment(char const*)>
 800afb6:	2500      	movs	r5, #0
 800afb8:	f44f 5800 	mov.w	r8, #8192	; 0x2000
 800afbc:	4e92      	ldr	r6, [pc, #584]	; (800b208 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d4>)
 800afbe:	f104 076b 	add.w	r7, r4, #107	; 0x6b
 800afc2:	6862      	ldr	r2, [r4, #4]
 800afc4:	fa08 f305 	lsl.w	r3, r8, r5
 800afc8:	4393      	bics	r3, r2
 800afca:	bf0c      	ite	eq
 800afcc:	2301      	moveq	r3, #1
 800afce:	2300      	movne	r3, #0
 800afd0:	4631      	mov	r1, r6
 800afd2:	f817 2b01 	ldrb.w	r2, [r7], #1
 800afd6:	a803      	add	r0, sp, #12
 800afd8:	3501      	adds	r5, #1
 800afda:	f7ff fcef 	bl	800a9bc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800afde:	2d04      	cmp	r5, #4
 800afe0:	f106 0610 	add.w	r6, r6, #16
 800afe4:	d1ed      	bne.n	800afc2 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 800afe6:	4989      	ldr	r1, [pc, #548]	; (800b20c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d8>)
 800afe8:	a803      	add	r0, sp, #12
 800afea:	f008 fcc5 	bl	8013978 <PropertiesBuilder::AddComment(char const*)>
 800afee:	6863      	ldr	r3, [r4, #4]
 800aff0:	f104 0622 	add.w	r6, r4, #34	; 0x22
 800aff4:	f013 0501 	ands.w	r5, r3, #1
 800aff8:	d108      	bne.n	800b00c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0xd8>
 800affa:	4b85      	ldr	r3, [pc, #532]	; (800b210 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 800affc:	223f      	movs	r2, #63	; 0x3f
 800affe:	6819      	ldr	r1, [r3, #0]
 800b000:	4630      	mov	r0, r6
 800b002:	3154      	adds	r1, #84	; 0x54
 800b004:	f7ff fd52 	bl	800aaac <strncpy.isra.0>
 800b008:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 800b00c:	6863      	ldr	r3, [r4, #4]
 800b00e:	4632      	mov	r2, r6
 800b010:	f003 0301 	and.w	r3, r3, #1
 800b014:	497f      	ldr	r1, [pc, #508]	; (800b214 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2e0>)
 800b016:	a803      	add	r0, sp, #12
 800b018:	f7ff fcf8 	bl	800aa0c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800b01c:	6863      	ldr	r3, [r4, #4]
 800b01e:	f104 0610 	add.w	r6, r4, #16
 800b022:	f013 0502 	ands.w	r5, r3, #2
 800b026:	d108      	bne.n	800b03a <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x106>
 800b028:	4b79      	ldr	r3, [pc, #484]	; (800b210 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 800b02a:	2211      	movs	r2, #17
 800b02c:	6819      	ldr	r1, [r3, #0]
 800b02e:	4630      	mov	r0, r6
 800b030:	3142      	adds	r1, #66	; 0x42
 800b032:	f7ff fd3b 	bl	800aaac <strncpy.isra.0>
 800b036:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 800b03a:	6863      	ldr	r3, [r4, #4]
 800b03c:	4632      	mov	r2, r6
 800b03e:	4976      	ldr	r1, [pc, #472]	; (800b218 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2e4>)
 800b040:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b044:	a803      	add	r0, sp, #12
 800b046:	f7ff fce1 	bl	800aa0c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800b04a:	2104      	movs	r1, #4
 800b04c:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 800b050:	6863      	ldr	r3, [r4, #4]
 800b052:	ba52      	rev16	r2, r2
 800b054:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800b058:	b292      	uxth	r2, r2
 800b05a:	9100      	str	r1, [sp, #0]
 800b05c:	a803      	add	r0, sp, #12
 800b05e:	496f      	ldr	r1, [pc, #444]	; (800b21c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2e8>)
 800b060:	f008 fca4 	bl	80139ac <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)>
 800b064:	496e      	ldr	r1, [pc, #440]	; (800b220 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2ec>)
 800b066:	a803      	add	r0, sp, #12
 800b068:	f008 fc86 	bl	8013978 <PropertiesBuilder::AddComment(char const*)>
 800b06c:	6862      	ldr	r2, [r4, #4]
 800b06e:	496d      	ldr	r1, [pc, #436]	; (800b224 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2f0>)
 800b070:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800b074:	a803      	add	r0, sp, #12
 800b076:	f7ff fcf1 	bl	800aa5c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800b07a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 800b228 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2f4>
 800b07e:	f894 206f 	ldrb.w	r2, [r4, #111]	; 0x6f
 800b082:	6863      	ldr	r3, [r4, #4]
 800b084:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b22c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2f8>
 800b088:	4969      	ldr	r1, [pc, #420]	; (800b230 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2fc>)
 800b08a:	2a00      	cmp	r2, #0
 800b08c:	bf0c      	ite	eq
 800b08e:	464a      	moveq	r2, r9
 800b090:	4642      	movne	r2, r8
 800b092:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800b096:	a803      	add	r0, sp, #12
 800b098:	f7ff fcb8 	bl	800aa0c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800b09c:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
 800b0a0:	6863      	ldr	r3, [r4, #4]
 800b0a2:	4964      	ldr	r1, [pc, #400]	; (800b234 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x300>)
 800b0a4:	4a64      	ldr	r2, [pc, #400]	; (800b238 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x304>)
 800b0a6:	f3c3 5380 	ubfx	r3, r3, #22, #1
 800b0aa:	2800      	cmp	r0, #0
 800b0ac:	bf18      	it	ne
 800b0ae:	460a      	movne	r2, r1
 800b0b0:	4962      	ldr	r1, [pc, #392]	; (800b23c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x308>)
 800b0b2:	a803      	add	r0, sp, #12
 800b0b4:	f7ff fcaa 	bl	800aa0c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800b0b8:	2500      	movs	r5, #0
 800b0ba:	4e61      	ldr	r6, [pc, #388]	; (800b240 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x30c>)
 800b0bc:	f8df a184 	ldr.w	sl, [pc, #388]	; 800b244 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x310>
 800b0c0:	f104 0770 	add.w	r7, r4, #112	; 0x70
 800b0c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b0c8:	6861      	ldr	r1, [r4, #4]
 800b0ca:	40ab      	lsls	r3, r5
 800b0cc:	438b      	bics	r3, r1
 800b0ce:	f04f 0112 	mov.w	r1, #18
 800b0d2:	f817 2b01 	ldrb.w	r2, [r7], #1
 800b0d6:	bf0c      	ite	eq
 800b0d8:	2301      	moveq	r3, #1
 800b0da:	2300      	movne	r3, #0
 800b0dc:	fb01 a105 	mla	r1, r1, r5, sl
 800b0e0:	2a00      	cmp	r2, #0
 800b0e2:	bf0c      	ite	eq
 800b0e4:	464a      	moveq	r2, r9
 800b0e6:	4642      	movne	r2, r8
 800b0e8:	a803      	add	r0, sp, #12
 800b0ea:	f7ff fc8f 	bl	800aa0c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800b0ee:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b0f2:	6862      	ldr	r2, [r4, #4]
 800b0f4:	40ab      	lsls	r3, r5
 800b0f6:	4393      	bics	r3, r2
 800b0f8:	7938      	ldrb	r0, [r7, #4]
 800b0fa:	494e      	ldr	r1, [pc, #312]	; (800b234 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x300>)
 800b0fc:	4a4e      	ldr	r2, [pc, #312]	; (800b238 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x304>)
 800b0fe:	bf0c      	ite	eq
 800b100:	2301      	moveq	r3, #1
 800b102:	2300      	movne	r3, #0
 800b104:	3501      	adds	r5, #1
 800b106:	2800      	cmp	r0, #0
 800b108:	bf18      	it	ne
 800b10a:	460a      	movne	r2, r1
 800b10c:	4631      	mov	r1, r6
 800b10e:	a803      	add	r0, sp, #12
 800b110:	f7ff fc7c 	bl	800aa0c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800b114:	2d04      	cmp	r5, #4
 800b116:	f106 0610 	add.w	r6, r6, #16
 800b11a:	d1d3      	bne.n	800b0c4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x190>
 800b11c:	6863      	ldr	r3, [r4, #4]
 800b11e:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
 800b122:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 800b126:	4948      	ldr	r1, [pc, #288]	; (800b248 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x314>)
 800b128:	a803      	add	r0, sp, #12
 800b12a:	f7ff fc47 	bl	800a9bc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800b12e:	6862      	ldr	r2, [r4, #4]
 800b130:	4946      	ldr	r1, [pc, #280]	; (800b24c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x318>)
 800b132:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800b136:	a803      	add	r0, sp, #12
 800b138:	f7ff fc90 	bl	800aa5c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800b13c:	4944      	ldr	r1, [pc, #272]	; (800b250 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x31c>)
 800b13e:	a803      	add	r0, sp, #12
 800b140:	f008 fc1a 	bl	8013978 <PropertiesBuilder::AddComment(char const*)>
 800b144:	2500      	movs	r5, #0
 800b146:	2601      	movs	r6, #1
 800b148:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800b254 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x320>
 800b14c:	4f30      	ldr	r7, [pc, #192]	; (800b210 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 800b14e:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800b152:	fa06 f305 	lsl.w	r3, r6, r5
 800b156:	b29b      	uxth	r3, r3
 800b158:	401a      	ands	r2, r3
 800b15a:	4293      	cmp	r3, r2
 800b15c:	bf0c      	ite	eq
 800b15e:	2301      	moveq	r3, #1
 800b160:	2300      	movne	r3, #0
 800b162:	f105 021c 	add.w	r2, r5, #28
 800b166:	d008      	beq.n	800b17a <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x246>
 800b168:	6839      	ldr	r1, [r7, #0]
 800b16a:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800b16e:	f8d1 077c 	ldr.w	r0, [r1, #1916]	; 0x77c
 800b172:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800b176:	f8c1 000b 	str.w	r0, [r1, #11]
 800b17a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b17e:	4641      	mov	r1, r8
 800b180:	f8d2 200b 	ldr.w	r2, [r2, #11]
 800b184:	a803      	add	r0, sp, #12
 800b186:	3501      	adds	r5, #1
 800b188:	f008 fbb2 	bl	80138f0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 800b18c:	2d04      	cmp	r5, #4
 800b18e:	f108 0818 	add.w	r8, r8, #24
 800b192:	d1dc      	bne.n	800b14e <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x21a>
 800b194:	4930      	ldr	r1, [pc, #192]	; (800b258 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x324>)
 800b196:	a803      	add	r0, sp, #12
 800b198:	f008 fbee 	bl	8013978 <PropertiesBuilder::AddComment(char const*)>
 800b19c:	6862      	ldr	r2, [r4, #4]
 800b19e:	492f      	ldr	r1, [pc, #188]	; (800b25c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x328>)
 800b1a0:	f3c2 62c0 	ubfx	r2, r2, #27, #1
 800b1a4:	a803      	add	r0, sp, #12
 800b1a6:	f7ff fc59 	bl	800aa5c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800b1aa:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800b1ae:	b17b      	cbz	r3, 800b1d0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x29c>
 800b1b0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800b1b4:	9b03      	ldr	r3, [sp, #12]
 800b1b6:	4413      	add	r3, r2
 800b1b8:	227d      	movs	r2, #125	; 0x7d
 800b1ba:	f803 2c01 	strb.w	r2, [r3, #-1]
 800b1be:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800b1c2:	9903      	ldr	r1, [sp, #12]
 800b1c4:	54ca      	strb	r2, [r1, r3]
 800b1c6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	f8ad 3012 	strh.w	r3, [sp, #18]
 800b1d0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800b1d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1d6:	601a      	str	r2, [r3, #0]
 800b1d8:	b006      	add	sp, #24
 800b1da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1de:	6823      	ldr	r3, [r4, #0]
 800b1e0:	4601      	mov	r1, r0
 800b1e2:	681a      	ldr	r2, [r3, #0]
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	68d2      	ldr	r2, [r2, #12]
 800b1e8:	4790      	blx	r2
 800b1ea:	e6b0      	b.n	800af4e <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x1a>
 800b1ec:	08016c92 	stmdaeq	r1, {r1, r4, r7, sl, fp, sp, lr}
 800b1f0:	0801873a 	stmdaeq	r1, {r1, r3, r4, r5, r8, r9, sl, pc}
 800b1f4:	08016b19 	stmdaeq	r1, {r0, r3, r4, r8, r9, fp, sp, lr}
 800b1f8:	08016b1f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r8, r9, fp, sp, lr}
 800b1fc:	08016c7e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, sl, fp, sp, lr}
 800b200:	08016c82 	stmdaeq	r1, {r1, r7, sl, fp, sp, lr}
 800b204:	08016b35 	stmdaeq	r1, {r0, r2, r4, r5, r8, r9, fp, sp, lr}
 800b208:	08018607 	stmdaeq	r1, {r0, r1, r2, r9, sl, pc}
 800b20c:	08016b4e 	stmdaeq	r1, {r1, r2, r3, r6, r8, r9, fp, sp, lr}
 800b210:	20001900 	andcs	r1, r0, r0, lsl #18
 800b214:	08016bcf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, r8, r9, fp, sp, lr}
 800b218:	08016be3 	stmdaeq	r1, {r0, r1, r5, r6, r7, r8, r9, fp, sp, lr}
 800b21c:	08016bd9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r8, r9, fp, sp, lr}
 800b220:	08016b53 	stmdaeq	r1, {r0, r1, r4, r6, r8, r9, fp, sp, lr}
 800b224:	08016b76 	stmdaeq	r1, {r1, r2, r4, r5, r6, r8, r9, fp, sp, lr}
 800b228:	08016b26 	stmdaeq	r1, {r1, r2, r5, r8, r9, fp, sp, lr}
 800b22c:	08016b2a 	stmdaeq	r1, {r1, r3, r5, r8, r9, fp, sp, lr}
 800b230:	080185ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r8, sl, pc}
 800b234:	08016b14 	stmdaeq	r1, {r2, r4, r8, r9, fp, sp, lr}
 800b238:	08016b2e 	stmdaeq	r1, {r1, r2, r3, r5, r8, r9, fp, sp, lr}
 800b23c:	08016c89 	stmdaeq	r1, {r0, r3, r7, sl, fp, sp, lr}
 800b240:	08016b8f 	stmdaeq	r1, {r0, r1, r2, r3, r7, r8, r9, fp, sp, lr}
 800b244:	080186d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r9, sl, pc}
 800b248:	08016c64 	stmdaeq	r1, {r2, r5, r6, sl, fp, sp, lr}
 800b24c:	08016c4e 	stmdaeq	r1, {r1, r2, r3, r6, sl, fp, sp, lr}
 800b250:	08016b62 	stmdaeq	r1, {r1, r5, r6, r8, r9, fp, sp, lr}
 800b254:	08016bee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, r8, r9, fp, sp, lr}
 800b258:	08016b6c 	stmdaeq	r1, {r2, r3, r5, r6, r8, r9, fp, sp, lr}
 800b25c:	08016b81 	stmdaeq	r1, {r0, r7, r8, r9, fp, sp, lr}

0800b260 <ArtNetParams::Save(char*, unsigned int, unsigned int&)>:
 800b260:	b513      	push	{r0, r1, r4, lr}
 800b262:	6804      	ldr	r4, [r0, #0]
 800b264:	b914      	cbnz	r4, 800b26c <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800b266:	601c      	str	r4, [r3, #0]
 800b268:	b002      	add	sp, #8
 800b26a:	bd10      	pop	{r4, pc}
 800b26c:	9300      	str	r3, [sp, #0]
 800b26e:	4613      	mov	r3, r2
 800b270:	460a      	mov	r2, r1
 800b272:	2100      	movs	r1, #0
 800b274:	f7ff fe5e 	bl	800af34 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>
 800b278:	e7f6      	b.n	800b268 <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800b27a <ArtNetParams::Set(ArtNetNode*)>:
 800b27a:	6843      	ldr	r3, [r0, #4]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d07d      	beq.n	800b37c <ArtNetParams::Set(ArtNetNode*)+0x102>
 800b280:	079a      	lsls	r2, r3, #30
 800b282:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b286:	4604      	mov	r4, r0
 800b288:	460d      	mov	r5, r1
 800b28a:	d504      	bpl.n	800b296 <ArtNetParams::Set(ArtNetNode*)+0x1c>
 800b28c:	f100 0110 	add.w	r1, r0, #16
 800b290:	4628      	mov	r0, r5
 800b292:	f7fd ff4b 	bl	800912c <ArtNetNode::SetShortName(char const*)>
 800b296:	6863      	ldr	r3, [r4, #4]
 800b298:	07db      	lsls	r3, r3, #31
 800b29a:	d504      	bpl.n	800b2a6 <ArtNetParams::Set(ArtNetNode*)+0x2c>
 800b29c:	4628      	mov	r0, r5
 800b29e:	f104 0122 	add.w	r1, r4, #34	; 0x22
 800b2a2:	f7fd ff6b 	bl	800917c <ArtNetNode::SetLongName(char const*)>
 800b2a6:	6863      	ldr	r3, [r4, #4]
 800b2a8:	075f      	lsls	r7, r3, #29
 800b2aa:	d504      	bpl.n	800b2b6 <ArtNetParams::Set(ArtNetNode*)+0x3c>
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	4628      	mov	r0, r5
 800b2b0:	7a21      	ldrb	r1, [r4, #8]
 800b2b2:	f7fe faab 	bl	800980c <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800b2b6:	6863      	ldr	r3, [r4, #4]
 800b2b8:	071e      	lsls	r6, r3, #28
 800b2ba:	d504      	bpl.n	800b2c6 <ArtNetParams::Set(ArtNetNode*)+0x4c>
 800b2bc:	2200      	movs	r2, #0
 800b2be:	4628      	mov	r0, r5
 800b2c0:	7a61      	ldrb	r1, [r4, #9]
 800b2c2:	f7fe fa75 	bl	80097b0 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800b2c6:	6863      	ldr	r3, [r4, #4]
 800b2c8:	0558      	lsls	r0, r3, #21
 800b2ca:	d504      	bpl.n	800b2d6 <ArtNetParams::Set(ArtNetNode*)+0x5c>
 800b2cc:	4628      	mov	r0, r5
 800b2ce:	f104 0164 	add.w	r1, r4, #100	; 0x64
 800b2d2:	f7fe f81d 	bl	8009310 <ArtNetNode::SetOemValue(unsigned char const*)>
 800b2d6:	6863      	ldr	r3, [r4, #4]
 800b2d8:	2600      	movs	r6, #0
 800b2da:	0519      	lsls	r1, r3, #20
 800b2dc:	bf44      	itt	mi
 800b2de:	f44f 727a 	movmi.w	r2, #1000	; 0x3e8
 800b2e2:	f894 3066 	ldrbmi.w	r3, [r4, #102]	; 0x66
 800b2e6:	f44f 2880 	mov.w	r8, #262144	; 0x40000
 800b2ea:	bf44      	itt	mi
 800b2ec:	4353      	mulmi	r3, r2
 800b2ee:	f8c5 36cc 	strmi.w	r3, [r5, #1740]	; 0x6cc
 800b2f2:	6863      	ldr	r3, [r4, #4]
 800b2f4:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
 800b2f8:	04da      	lsls	r2, r3, #19
 800b2fa:	bf48      	it	mi
 800b2fc:	2301      	movmi	r3, #1
 800b2fe:	f04f 0a01 	mov.w	sl, #1
 800b302:	bf48      	it	mi
 800b304:	f885 36dc 	strbmi.w	r3, [r5, #1756]	; 0x6dc
 800b308:	f104 0770 	add.w	r7, r4, #112	; 0x70
 800b30c:	6863      	ldr	r3, [r4, #4]
 800b30e:	fa08 f206 	lsl.w	r2, r8, r6
 800b312:	ea32 0303 	bics.w	r3, r2, r3
 800b316:	bf0c      	ite	eq
 800b318:	783a      	ldrbeq	r2, [r7, #0]
 800b31a:	f894 206f 	ldrbne.w	r2, [r4, #111]	; 0x6f
 800b31e:	4631      	mov	r1, r6
 800b320:	4628      	mov	r0, r5
 800b322:	f7fe fad2 	bl	80098ca <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 800b326:	6863      	ldr	r3, [r4, #4]
 800b328:	fa09 f206 	lsl.w	r2, r9, r6
 800b32c:	ea32 0303 	bics.w	r3, r2, r3
 800b330:	bf0c      	ite	eq
 800b332:	797a      	ldrbeq	r2, [r7, #5]
 800b334:	f894 2074 	ldrbne.w	r2, [r4, #116]	; 0x74
 800b338:	4631      	mov	r1, r6
 800b33a:	4628      	mov	r0, r5
 800b33c:	f7fe fa94 	bl	8009868 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 800b340:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800b344:	fa0a f306 	lsl.w	r3, sl, r6
 800b348:	b29b      	uxth	r3, r3
 800b34a:	4393      	bics	r3, r2
 800b34c:	d109      	bne.n	800b362 <ArtNetParams::Set(ArtNetNode*)+0xe8>
 800b34e:	f106 031c 	add.w	r3, r6, #28
 800b352:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b356:	4631      	mov	r1, r6
 800b358:	4628      	mov	r0, r5
 800b35a:	f8d3 200b 	ldr.w	r2, [r3, #11]
 800b35e:	f7fe fdcd 	bl	8009efc <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>
 800b362:	3601      	adds	r6, #1
 800b364:	2e04      	cmp	r6, #4
 800b366:	f107 0701 	add.w	r7, r7, #1
 800b36a:	d1cf      	bne.n	800b30c <ArtNetParams::Set(ArtNetNode*)+0x92>
 800b36c:	6863      	ldr	r3, [r4, #4]
 800b36e:	011b      	lsls	r3, r3, #4
 800b370:	bf44      	itt	mi
 800b372:	2301      	movmi	r3, #1
 800b374:	f885 309e 	strbmi.w	r3, [r5, #158]	; 0x9e
 800b378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b37c:	4770      	bx	lr

0800b37e <ArtNetParams::Dump()>:
 800b37e:	4770      	bx	lr

0800b380 <ArtNetNode::HandleTrigger()>:
 800b380:	f890 30ae 	ldrb.w	r3, [r0, #174]	; 0xae
 800b384:	4601      	mov	r1, r0
 800b386:	2bff      	cmp	r3, #255	; 0xff
 800b388:	d103      	bne.n	800b392 <ArtNetNode::HandleTrigger()+0x12>
 800b38a:	f890 20af 	ldrb.w	r2, [r0, #175]	; 0xaf
 800b38e:	2aff      	cmp	r2, #255	; 0xff
 800b390:	d009      	beq.n	800b3a6 <ArtNetNode::HandleTrigger()+0x26>
 800b392:	f891 2040 	ldrb.w	r2, [r1, #64]	; 0x40
 800b396:	429a      	cmp	r2, r3
 800b398:	d10a      	bne.n	800b3b0 <ArtNetNode::HandleTrigger()+0x30>
 800b39a:	f891 20af 	ldrb.w	r2, [r1, #175]	; 0xaf
 800b39e:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d104      	bne.n	800b3b0 <ArtNetNode::HandleTrigger()+0x30>
 800b3a6:	6988      	ldr	r0, [r1, #24]
 800b3a8:	31b0      	adds	r1, #176	; 0xb0
 800b3aa:	6803      	ldr	r3, [r0, #0]
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	4718      	bx	r3
 800b3b0:	4770      	bx	lr
	...

0800b3b4 <e131::universe_to_multicast_ip(unsigned short)>:
 800b3b4:	b513      	push	{r0, r1, r4, lr}
 800b3b6:	4604      	mov	r4, r0
 800b3b8:	a901      	add	r1, sp, #4
 800b3ba:	4806      	ldr	r0, [pc, #24]	; (800b3d4 <e131::universe_to_multicast_ip(unsigned short)+0x20>)
 800b3bc:	f009 f90a 	bl	80145d4 <inet_aton>
 800b3c0:	9801      	ldr	r0, [sp, #4]
 800b3c2:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 800b3c6:	0224      	lsls	r4, r4, #8
 800b3c8:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800b3cc:	4320      	orrs	r0, r4
 800b3ce:	b002      	add	sp, #8
 800b3d0:	bd10      	pop	{r4, pc}
 800b3d2:	bf00      	nop
 800b3d4:	08016ca3 	stmdaeq	r1, {r0, r1, r5, r7, sl, fp, sp, lr}

0800b3d8 <memset.constprop.0.isra.0>:
 800b3d8:	2300      	movs	r3, #0
 800b3da:	4401      	add	r1, r0
 800b3dc:	4288      	cmp	r0, r1
 800b3de:	d002      	beq.n	800b3e6 <memset.constprop.0.isra.0+0xe>
 800b3e0:	f800 3b01 	strb.w	r3, [r0], #1
 800b3e4:	e7fa      	b.n	800b3dc <memset.constprop.0.isra.0+0x4>
 800b3e6:	4770      	bx	lr

0800b3e8 <memcpy.isra.0>:
 800b3e8:	3801      	subs	r0, #1
 800b3ea:	440a      	add	r2, r1
 800b3ec:	4291      	cmp	r1, r2
 800b3ee:	d004      	beq.n	800b3fa <memcpy.isra.0+0x12>
 800b3f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3f4:	f800 3f01 	strb.w	r3, [r0, #1]!
 800b3f8:	e7f8      	b.n	800b3ec <memcpy.isra.0+0x4>
 800b3fa:	4770      	bx	lr

0800b3fc <lightset::Data::IOutput(LightSet*, unsigned int) const>:
 800b3fc:	f240 6304 	movw	r3, #1540	; 0x604
 800b400:	b470      	push	{r4, r5, r6}
 800b402:	4605      	mov	r5, r0
 800b404:	4608      	mov	r0, r1
 800b406:	4353      	muls	r3, r2
 800b408:	4611      	mov	r1, r2
 800b40a:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 800b40e:	18ea      	adds	r2, r5, r3
 800b410:	6803      	ldr	r3, [r0, #0]
 800b412:	691e      	ldr	r6, [r3, #16]
 800b414:	f8d2 3600 	ldr.w	r3, [r2, #1536]	; 0x600
 800b418:	46b4      	mov	ip, r6
 800b41a:	192a      	adds	r2, r5, r4
 800b41c:	bc70      	pop	{r4, r5, r6}
 800b41e:	4760      	bx	ip

0800b420 <E131Bridge::Start()>:
 800b420:	6943      	ldr	r3, [r0, #20]
 800b422:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b424:	4604      	mov	r4, r0
 800b426:	b35b      	cbz	r3, 800b480 <E131Bridge::Start()+0x60>
 800b428:	6983      	ldr	r3, [r0, #24]
 800b42a:	b9cb      	cbnz	r3, 800b460 <E131Bridge::Start()+0x40>
 800b42c:	a901      	add	r1, sp, #4
 800b42e:	4818      	ldr	r0, [pc, #96]	; (800b490 <E131Bridge::Start()+0x70>)
 800b430:	f009 f8d0 	bl	80145d4 <inet_aton>
 800b434:	9b01      	ldr	r3, [sp, #4]
 800b436:	f240 207e 	movw	r0, #638	; 0x27e
 800b43a:	f043 4356 	orr.w	r3, r3, #3590324224	; 0xd6000000
 800b43e:	f443 037a 	orr.w	r3, r3, #16384000	; 0xfa0000
 800b442:	6223      	str	r3, [r4, #32]
 800b444:	f009 f8c2 	bl	80145cc <operator new(unsigned int)>
 800b448:	61a0      	str	r0, [r4, #24]
 800b44a:	4620      	mov	r0, r4
 800b44c:	f000 fdc6 	bl	800bfdc <E131Bridge::FillDataPacket()>
 800b450:	f44f 608f 	mov.w	r0, #1144	; 0x478
 800b454:	f009 f8ba 	bl	80145cc <operator new(unsigned int)>
 800b458:	61e0      	str	r0, [r4, #28]
 800b45a:	4620      	mov	r0, r4
 800b45c:	f000 fd14 	bl	800be88 <E131Bridge::FillDiscoveryPacket()>
 800b460:	2500      	movs	r5, #0
 800b462:	270c      	movs	r7, #12
 800b464:	f204 6622 	addw	r6, r4, #1570	; 0x622
 800b468:	fb07 f305 	mul.w	r3, r7, r5
 800b46c:	5cf3      	ldrb	r3, [r6, r3]
 800b46e:	b123      	cbz	r3, 800b47a <E131Bridge::Start()+0x5a>
 800b470:	6960      	ldr	r0, [r4, #20]
 800b472:	4629      	mov	r1, r5
 800b474:	6803      	ldr	r3, [r0, #0]
 800b476:	689b      	ldr	r3, [r3, #8]
 800b478:	4798      	blx	r3
 800b47a:	3501      	adds	r5, #1
 800b47c:	2d04      	cmp	r5, #4
 800b47e:	d1f3      	bne.n	800b468 <E131Bridge::Start()+0x48>
 800b480:	2102      	movs	r1, #2
 800b482:	4b04      	ldr	r3, [pc, #16]	; (800b494 <E131Bridge::Start()+0x74>)
 800b484:	6818      	ldr	r0, [r3, #0]
 800b486:	b003      	add	sp, #12
 800b488:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b48c:	f008 bfba 	b.w	8014404 <LedBlink::SetMode(ledblink::Mode)>
 800b490:	08016ca3 	stmdaeq	r1, {r0, r1, r5, r7, sl, fp, sp, lr}
 800b494:	2000a9c0 	andcs	sl, r0, r0, asr #19

0800b498 <E131Bridge::Stop()>:
 800b498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b49c:	2500      	movs	r5, #0
 800b49e:	2301      	movs	r3, #1
 800b4a0:	4604      	mov	r4, r0
 800b4a2:	f240 6804 	movw	r8, #1540	; 0x604
 800b4a6:	462e      	mov	r6, r5
 800b4a8:	f880 34f4 	strb.w	r3, [r0, #1268]	; 0x4f4
 800b4ac:	f500 67aa 	add.w	r7, r0, #1360	; 0x550
 800b4b0:	6860      	ldr	r0, [r4, #4]
 800b4b2:	b118      	cbz	r0, 800b4bc <E131Bridge::Stop()+0x24>
 800b4b4:	6803      	ldr	r3, [r0, #0]
 800b4b6:	4629      	mov	r1, r5
 800b4b8:	68db      	ldr	r3, [r3, #12]
 800b4ba:	4798      	blx	r3
 800b4bc:	f7fe fb7e 	bl	8009bbc <lightset::Data::Get()>
 800b4c0:	2344      	movs	r3, #68	; 0x44
 800b4c2:	fb08 0005 	mla	r0, r8, r5, r0
 800b4c6:	436b      	muls	r3, r5
 800b4c8:	3501      	adds	r5, #1
 800b4ca:	2d04      	cmp	r5, #4
 800b4cc:	f8c0 6600 	str.w	r6, [r0, #1536]	; 0x600
 800b4d0:	54fe      	strb	r6, [r7, r3]
 800b4d2:	d1ed      	bne.n	800b4b0 <E131Bridge::Stop()+0x18>
 800b4d4:	6963      	ldr	r3, [r4, #20]
 800b4d6:	b17b      	cbz	r3, 800b4f8 <E131Bridge::Stop()+0x60>
 800b4d8:	2500      	movs	r5, #0
 800b4da:	270c      	movs	r7, #12
 800b4dc:	f204 6622 	addw	r6, r4, #1570	; 0x622
 800b4e0:	fb07 f305 	mul.w	r3, r7, r5
 800b4e4:	5cf3      	ldrb	r3, [r6, r3]
 800b4e6:	b123      	cbz	r3, 800b4f2 <E131Bridge::Stop()+0x5a>
 800b4e8:	6960      	ldr	r0, [r4, #20]
 800b4ea:	4629      	mov	r1, r5
 800b4ec:	6803      	ldr	r3, [r0, #0]
 800b4ee:	68db      	ldr	r3, [r3, #12]
 800b4f0:	4798      	blx	r3
 800b4f2:	3501      	adds	r5, #1
 800b4f4:	2d04      	cmp	r5, #4
 800b4f6:	d1f3      	bne.n	800b4e0 <E131Bridge::Stop()+0x48>
 800b4f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4fc:	4b02      	ldr	r3, [pc, #8]	; (800b508 <E131Bridge::Stop()+0x70>)
 800b4fe:	2100      	movs	r1, #0
 800b500:	6818      	ldr	r0, [r3, #0]
 800b502:	f008 bf7f 	b.w	8014404 <LedBlink::SetMode(ledblink::Mode)>
 800b506:	bf00      	nop
 800b508:	2000a9c0 	andcs	sl, r0, r0, asr #19

0800b50c <E131Bridge::SetSourceName(char const*)>:
 800b50c:	223f      	movs	r2, #63	; 0x3f
 800b50e:	b510      	push	{r4, lr}
 800b510:	f100 0334 	add.w	r3, r0, #52	; 0x34
 800b514:	3901      	subs	r1, #1
 800b516:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b51a:	b92c      	cbnz	r4, 800b528 <E131Bridge::SetSourceName(char const*)+0x1c>
 800b51c:	441a      	add	r2, r3
 800b51e:	4293      	cmp	r3, r2
 800b520:	d006      	beq.n	800b530 <E131Bridge::SetSourceName(char const*)+0x24>
 800b522:	f803 4b01 	strb.w	r4, [r3], #1
 800b526:	e7fa      	b.n	800b51e <E131Bridge::SetSourceName(char const*)+0x12>
 800b528:	3a01      	subs	r2, #1
 800b52a:	f803 4b01 	strb.w	r4, [r3], #1
 800b52e:	d1f2      	bne.n	800b516 <E131Bridge::SetSourceName(char const*)+0xa>
 800b530:	2300      	movs	r3, #0
 800b532:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
 800b536:	bd10      	pop	{r4, pc}

0800b538 <E131Bridge::E131Bridge()>:
 800b538:	2300      	movs	r3, #0
 800b53a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b53e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b540:	e9c0 2300 	strd	r2, r3, [r0]
 800b544:	2201      	movs	r2, #1
 800b546:	4604      	mov	r4, r0
 800b548:	2764      	movs	r7, #100	; 0x64
 800b54a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b54e:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800b552:	e9c0 3307 	strd	r3, r3, [r0, #28]
 800b556:	6743      	str	r3, [r0, #116]	; 0x74
 800b558:	4b1e      	ldr	r3, [pc, #120]	; (800b5d4 <E131Bridge::E131Bridge()+0x9c>)
 800b55a:	7202      	strb	r2, [r0, #8]
 800b55c:	b093      	sub	sp, #76	; 0x4c
 800b55e:	6018      	str	r0, [r3, #0]
 800b560:	f500 65a2 	add.w	r5, r0, #1296	; 0x510
 800b564:	f500 62c4 	add.w	r2, r0, #1568	; 0x620
 800b568:	f500 66ca 	add.w	r6, r0, #1616	; 0x650
 800b56c:	4628      	mov	r0, r5
 800b56e:	2144      	movs	r1, #68	; 0x44
 800b570:	f7ff ff32 	bl	800b3d8 <memset.constprop.0.isra.0>
 800b574:	4610      	mov	r0, r2
 800b576:	210c      	movs	r1, #12
 800b578:	f7ff ff2e 	bl	800b3d8 <memset.constprop.0.isra.0>
 800b57c:	320c      	adds	r2, #12
 800b57e:	f802 7c03 	strb.w	r7, [r2, #-3]
 800b582:	42b2      	cmp	r2, r6
 800b584:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800b588:	d1f0      	bne.n	800b56c <E131Bridge::E131Bridge()+0x34>
 800b58a:	f204 40f4 	addw	r0, r4, #1268	; 0x4f4
 800b58e:	211c      	movs	r1, #28
 800b590:	f7ff ff22 	bl	800b3d8 <memset.constprop.0.isra.0>
 800b594:	2301      	movs	r3, #1
 800b596:	4d10      	ldr	r5, [pc, #64]	; (800b5d8 <E131Bridge::E131Bridge()+0xa0>)
 800b598:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
 800b59c:	4a0f      	ldr	r2, [pc, #60]	; (800b5dc <E131Bridge::E131Bridge()+0xa4>)
 800b59e:	682b      	ldr	r3, [r5, #0]
 800b5a0:	2140      	movs	r1, #64	; 0x40
 800b5a2:	331c      	adds	r3, #28
 800b5a4:	9200      	str	r2, [sp, #0]
 800b5a6:	a802      	add	r0, sp, #8
 800b5a8:	4a0d      	ldr	r2, [pc, #52]	; (800b5e0 <E131Bridge::E131Bridge()+0xa8>)
 800b5aa:	f7fd fbaf 	bl	8008d0c <snprintf>
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	a902      	add	r1, sp, #8
 800b5b2:	f7ff ffab 	bl	800b50c <E131Bridge::SetSourceName(char const*)>
 800b5b6:	f44f 51ae 	mov.w	r1, #5568	; 0x15c0
 800b5ba:	6828      	ldr	r0, [r5, #0]
 800b5bc:	f006 f9e2 	bl	8011984 <Network::Begin(unsigned short)>
 800b5c0:	4621      	mov	r1, r4
 800b5c2:	4b08      	ldr	r3, [pc, #32]	; (800b5e4 <E131Bridge::E131Bridge()+0xac>)
 800b5c4:	f841 0b24 	str.w	r0, [r1], #36
 800b5c8:	6818      	ldr	r0, [r3, #0]
 800b5ca:	f008 ff9f 	bl	801450c <Hardware::GetUuid(unsigned char*)>
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	b013      	add	sp, #76	; 0x4c
 800b5d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5d4:	20001910 	andcs	r1, r0, r0, lsl r9
 800b5d8:	2000a29c 	mulcs	r0, ip, r2
 800b5dc:	080169a1 	stmdaeq	r1, {r0, r5, r7, r8, fp, sp, lr}
 800b5e0:	08016caf 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, sl, fp, sp, lr}
 800b5e4:	2000a9c4 	andcs	sl, r0, r4, asr #19

0800b5e8 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>:
 800b5e8:	b570      	push	{r4, r5, r6, lr}
 800b5ea:	4604      	mov	r4, r0
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	2544      	movs	r5, #68	; 0x44
 800b5f0:	4610      	mov	r0, r2
 800b5f2:	f504 62a2 	add.w	r2, r4, #1296	; 0x510
 800b5f6:	4299      	cmp	r1, r3
 800b5f8:	d004      	beq.n	800b604 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x1c>
 800b5fa:	fb05 f603 	mul.w	r6, r5, r3
 800b5fe:	5b96      	ldrh	r6, [r2, r6]
 800b600:	4286      	cmp	r6, r0
 800b602:	d00e      	beq.n	800b622 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x3a>
 800b604:	3301      	adds	r3, #1
 800b606:	2b04      	cmp	r3, #4
 800b608:	d1f5      	bne.n	800b5f6 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0xe>
 800b60a:	4b06      	ldr	r3, [pc, #24]	; (800b624 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x3c>)
 800b60c:	6824      	ldr	r4, [r4, #0]
 800b60e:	681d      	ldr	r5, [r3, #0]
 800b610:	f7ff fed0 	bl	800b3b4 <e131::universe_to_multicast_ip(unsigned short)>
 800b614:	4621      	mov	r1, r4
 800b616:	4602      	mov	r2, r0
 800b618:	4628      	mov	r0, r5
 800b61a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b61e:	f006 b9c5 	b.w	80119ac <Network::LeaveGroup(int, unsigned int)>
 800b622:	bd70      	pop	{r4, r5, r6, pc}
 800b624:	2000a29c 	mulcs	r0, ip, r2

0800b628 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>:
 800b628:	b570      	push	{r4, r5, r6, lr}
 800b62a:	4604      	mov	r4, r0
 800b62c:	461d      	mov	r5, r3
 800b62e:	b191      	cbz	r1, 800b656 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x2e>
 800b630:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800b634:	f200 5606 	addw	r6, r0, #1286	; 0x506
 800b638:	b99a      	cbnz	r2, 800b662 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x3a>
 800b63a:	4b0e      	ldr	r3, [pc, #56]	; (800b674 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x4c>)
 800b63c:	8035      	strh	r5, [r6, #0]
 800b63e:	4628      	mov	r0, r5
 800b640:	6826      	ldr	r6, [r4, #0]
 800b642:	681c      	ldr	r4, [r3, #0]
 800b644:	f7ff feb6 	bl	800b3b4 <e131::universe_to_multicast_ip(unsigned short)>
 800b648:	4631      	mov	r1, r6
 800b64a:	4602      	mov	r2, r0
 800b64c:	4620      	mov	r0, r4
 800b64e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b652:	f006 b9a8 	b.w	80119a6 <Network::JoinGroup(int, unsigned int)>
 800b656:	b15a      	cbz	r2, 800b670 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x48>
 800b658:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800b65c:	f500 66a1 	add.w	r6, r0, #1288	; 0x508
 800b660:	e7ea      	b.n	800b638 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x10>
 800b662:	42aa      	cmp	r2, r5
 800b664:	d004      	beq.n	800b670 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x48>
 800b666:	2104      	movs	r1, #4
 800b668:	4620      	mov	r0, r4
 800b66a:	f7ff ffbd 	bl	800b5e8 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800b66e:	e7e4      	b.n	800b63a <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x12>
 800b670:	bd70      	pop	{r4, r5, r6, pc}
 800b672:	bf00      	nop
 800b674:	2000a29c 	mulcs	r0, ip, r2

0800b678 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
 800b678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b67c:	4604      	mov	r4, r0
 800b67e:	460d      	mov	r5, r1
 800b680:	461e      	mov	r6, r3
 800b682:	bb02      	cbnz	r2, 800b6c6 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x4e>
 800b684:	2903      	cmp	r1, #3
 800b686:	d843      	bhi.n	800b710 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x98>
 800b688:	230c      	movs	r3, #12
 800b68a:	fb03 0301 	mla	r3, r3, r1, r0
 800b68e:	f893 2622 	ldrb.w	r2, [r3, #1570]	; 0x622
 800b692:	b12a      	cbz	r2, 800b6a0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x28>
 800b694:	f8b3 3620 	ldrh.w	r3, [r3, #1568]	; 0x620
 800b698:	42b3      	cmp	r3, r6
 800b69a:	d109      	bne.n	800b6b0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x38>
 800b69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6a0:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800b6a4:	3201      	adds	r2, #1
 800b6a6:	f880 250a 	strb.w	r2, [r0, #1290]	; 0x50a
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	f883 2622 	strb.w	r2, [r3, #1570]	; 0x622
 800b6b0:	210c      	movs	r1, #12
 800b6b2:	fb01 4405 	mla	r4, r1, r5, r4
 800b6b6:	4630      	mov	r0, r6
 800b6b8:	f8a4 6620 	strh.w	r6, [r4, #1568]	; 0x620
 800b6bc:	f7ff fe7a 	bl	800b3b4 <e131::universe_to_multicast_ip(unsigned short)>
 800b6c0:	f8c4 0624 	str.w	r0, [r4, #1572]	; 0x624
 800b6c4:	e7ea      	b.n	800b69c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800b6c6:	2a02      	cmp	r2, #2
 800b6c8:	d122      	bne.n	800b710 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x98>
 800b6ca:	2903      	cmp	r1, #3
 800b6cc:	d8e6      	bhi.n	800b69c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800b6ce:	2344      	movs	r3, #68	; 0x44
 800b6d0:	fb03 0301 	mla	r3, r3, r1, r0
 800b6d4:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 800b6d8:	b152      	cbz	r2, 800b6f0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x78>
 800b6da:	2200      	movs	r2, #0
 800b6dc:	f883 2512 	strb.w	r2, [r3, #1298]	; 0x512
 800b6e0:	f890 350b 	ldrb.w	r3, [r0, #1291]	; 0x50b
 800b6e4:	4632      	mov	r2, r6
 800b6e6:	3b01      	subs	r3, #1
 800b6e8:	f880 350b 	strb.w	r3, [r0, #1291]	; 0x50b
 800b6ec:	f7ff ff7c 	bl	800b5e8 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800b6f0:	210c      	movs	r1, #12
 800b6f2:	fb01 4505 	mla	r5, r1, r5, r4
 800b6f6:	f895 3622 	ldrb.w	r3, [r5, #1570]	; 0x622
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d0ce      	beq.n	800b69c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800b6fe:	2300      	movs	r3, #0
 800b700:	f885 3622 	strb.w	r3, [r5, #1570]	; 0x622
 800b704:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800b708:	3b01      	subs	r3, #1
 800b70a:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
 800b70e:	e7c5      	b.n	800b69c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800b710:	2344      	movs	r3, #68	; 0x44
 800b712:	fb03 4305 	mla	r3, r3, r5, r4
 800b716:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 800b71a:	b1d2      	cbz	r2, 800b752 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xda>
 800b71c:	f8b3 3510 	ldrh.w	r3, [r3, #1296]	; 0x510
 800b720:	42b3      	cmp	r3, r6
 800b722:	d0bb      	beq.n	800b69c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800b724:	4632      	mov	r2, r6
 800b726:	4629      	mov	r1, r5
 800b728:	4620      	mov	r0, r4
 800b72a:	f7ff ff5d 	bl	800b5e8 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800b72e:	4b0d      	ldr	r3, [pc, #52]	; (800b764 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xec>)
 800b730:	4630      	mov	r0, r6
 800b732:	681f      	ldr	r7, [r3, #0]
 800b734:	f8d4 8000 	ldr.w	r8, [r4]
 800b738:	f7ff fe3c 	bl	800b3b4 <e131::universe_to_multicast_ip(unsigned short)>
 800b73c:	4641      	mov	r1, r8
 800b73e:	4602      	mov	r2, r0
 800b740:	4638      	mov	r0, r7
 800b742:	f006 f930 	bl	80119a6 <Network::JoinGroup(int, unsigned int)>
 800b746:	2144      	movs	r1, #68	; 0x44
 800b748:	fb01 4405 	mla	r4, r1, r5, r4
 800b74c:	f8a4 6510 	strh.w	r6, [r4, #1296]	; 0x510
 800b750:	e7a4      	b.n	800b69c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800b752:	f894 250b 	ldrb.w	r2, [r4, #1291]	; 0x50b
 800b756:	3201      	adds	r2, #1
 800b758:	f884 250b 	strb.w	r2, [r4, #1291]	; 0x50b
 800b75c:	2201      	movs	r2, #1
 800b75e:	f883 2512 	strb.w	r2, [r3, #1298]	; 0x512
 800b762:	e7e4      	b.n	800b72e <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xb6>
 800b764:	2000a29c 	mulcs	r0, ip, r2

0800b768 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>:
 800b768:	b953      	cbnz	r3, 800b780 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x18>
 800b76a:	2903      	cmp	r1, #3
 800b76c:	d811      	bhi.n	800b792 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x2a>
 800b76e:	230c      	movs	r3, #12
 800b770:	fb03 0001 	mla	r0, r3, r1, r0
 800b774:	f8b0 3620 	ldrh.w	r3, [r0, #1568]	; 0x620
 800b778:	f890 0622 	ldrb.w	r0, [r0, #1570]	; 0x622
 800b77c:	8013      	strh	r3, [r2, #0]
 800b77e:	4770      	bx	lr
 800b780:	2344      	movs	r3, #68	; 0x44
 800b782:	fb03 0001 	mla	r0, r3, r1, r0
 800b786:	f8b0 3510 	ldrh.w	r3, [r0, #1296]	; 0x510
 800b78a:	f890 0512 	ldrb.w	r0, [r0, #1298]	; 0x512
 800b78e:	8013      	strh	r3, [r2, #0]
 800b790:	4770      	bx	lr
 800b792:	4618      	mov	r0, r3
 800b794:	4770      	bx	lr

0800b796 <E131Bridge::UpdateMergeStatus(unsigned int)>:
 800b796:	f890 34f5 	ldrb.w	r3, [r0, #1269]	; 0x4f5
 800b79a:	b923      	cbnz	r3, 800b7a6 <E131Bridge::UpdateMergeStatus(unsigned int)+0x10>
 800b79c:	2301      	movs	r3, #1
 800b79e:	f880 34f5 	strb.w	r3, [r0, #1269]	; 0x4f5
 800b7a2:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800b7a6:	2344      	movs	r3, #68	; 0x44
 800b7a8:	fb03 0001 	mla	r0, r3, r1, r0
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	f880 3551 	strb.w	r3, [r0, #1361]	; 0x551
 800b7b2:	4770      	bx	lr

0800b7b4 <E131Bridge::CheckMergeTimeouts(unsigned int)>:
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	2044      	movs	r0, #68	; 0x44
 800b7b8:	4348      	muls	r0, r1
 800b7ba:	b570      	push	{r4, r5, r6, lr}
 800b7bc:	1815      	adds	r5, r2, r0
 800b7be:	460c      	mov	r4, r1
 800b7c0:	68d3      	ldr	r3, [r2, #12]
 800b7c2:	f8d5 1514 	ldr.w	r1, [r5, #1300]	; 0x514
 800b7c6:	1a5b      	subs	r3, r3, r1
 800b7c8:	f242 7110 	movw	r1, #10000	; 0x2710
 800b7cc:	428b      	cmp	r3, r1
 800b7ce:	d90a      	bls.n	800b7e6 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x32>
 800b7d0:	2600      	movs	r6, #0
 800b7d2:	f200 501c 	addw	r0, r0, #1308	; 0x51c
 800b7d6:	2110      	movs	r1, #16
 800b7d8:	f8c5 6518 	str.w	r6, [r5, #1304]	; 0x518
 800b7dc:	4410      	add	r0, r2
 800b7de:	f7ff fdfb 	bl	800b3d8 <memset.constprop.0.isra.0>
 800b7e2:	f885 6551 	strb.w	r6, [r5, #1361]	; 0x551
 800b7e6:	2044      	movs	r0, #68	; 0x44
 800b7e8:	4344      	muls	r4, r0
 800b7ea:	1915      	adds	r5, r2, r4
 800b7ec:	f8d5 1530 	ldr.w	r1, [r5, #1328]	; 0x530
 800b7f0:	68d3      	ldr	r3, [r2, #12]
 800b7f2:	1a5b      	subs	r3, r3, r1
 800b7f4:	f242 7110 	movw	r1, #10000	; 0x2710
 800b7f8:	428b      	cmp	r3, r1
 800b7fa:	d90a      	bls.n	800b812 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x5e>
 800b7fc:	2600      	movs	r6, #0
 800b7fe:	f504 64a7 	add.w	r4, r4, #1336	; 0x538
 800b802:	2110      	movs	r1, #16
 800b804:	f8c5 6534 	str.w	r6, [r5, #1332]	; 0x534
 800b808:	1910      	adds	r0, r2, r4
 800b80a:	f7ff fde5 	bl	800b3d8 <memset.constprop.0.isra.0>
 800b80e:	f885 6551 	strb.w	r6, [r5, #1361]	; 0x551
 800b812:	f892 1595 	ldrb.w	r1, [r2, #1429]	; 0x595
 800b816:	f892 3551 	ldrb.w	r3, [r2, #1361]	; 0x551
 800b81a:	430b      	orrs	r3, r1
 800b81c:	f892 15d9 	ldrb.w	r1, [r2, #1497]	; 0x5d9
 800b820:	430b      	orrs	r3, r1
 800b822:	d107      	bne.n	800b834 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x80>
 800b824:	f892 361d 	ldrb.w	r3, [r2, #1565]	; 0x61d
 800b828:	b923      	cbnz	r3, 800b834 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x80>
 800b82a:	2101      	movs	r1, #1
 800b82c:	f882 34f5 	strb.w	r3, [r2, #1269]	; 0x4f5
 800b830:	f882 14f8 	strb.w	r1, [r2, #1272]	; 0x4f8
 800b834:	bd70      	pop	{r4, r5, r6, pc}

0800b836 <E131Bridge::IsPriorityTimeOut(unsigned int) const>:
 800b836:	2244      	movs	r2, #68	; 0x44
 800b838:	fb02 0101 	mla	r1, r2, r1, r0
 800b83c:	68c3      	ldr	r3, [r0, #12]
 800b83e:	f8d1 0530 	ldr.w	r0, [r1, #1328]	; 0x530
 800b842:	b510      	push	{r4, lr}
 800b844:	1a1a      	subs	r2, r3, r0
 800b846:	f8d1 4514 	ldr.w	r4, [r1, #1300]	; 0x514
 800b84a:	f8d1 0534 	ldr.w	r0, [r1, #1332]	; 0x534
 800b84e:	f8d1 1518 	ldr.w	r1, [r1, #1304]	; 0x518
 800b852:	b171      	cbz	r1, 800b872 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3c>
 800b854:	1b1b      	subs	r3, r3, r4
 800b856:	b128      	cbz	r0, 800b864 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2e>
 800b858:	f242 700f 	movw	r0, #9999	; 0x270f
 800b85c:	4283      	cmp	r3, r0
 800b85e:	d90d      	bls.n	800b87c <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x46>
 800b860:	4282      	cmp	r2, r0
 800b862:	e002      	b.n	800b86a <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x34>
 800b864:	f242 7010 	movw	r0, #10000	; 0x2710
 800b868:	4283      	cmp	r3, r0
 800b86a:	bf94      	ite	ls
 800b86c:	2000      	movls	r0, #0
 800b86e:	2001      	movhi	r0, #1
 800b870:	bd10      	pop	{r4, pc}
 800b872:	2800      	cmp	r0, #0
 800b874:	d0fc      	beq.n	800b870 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>
 800b876:	f242 7010 	movw	r0, #10000	; 0x2710
 800b87a:	e7f1      	b.n	800b860 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2a>
 800b87c:	2000      	movs	r0, #0
 800b87e:	e7f7      	b.n	800b870 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>

0800b880 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>:
 800b880:	684a      	ldr	r2, [r1, #4]
 800b882:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800b884:	b510      	push	{r4, lr}
 800b886:	429a      	cmp	r2, r3
 800b888:	d10b      	bne.n	800b8a2 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x22>
 800b88a:	f100 0392 	add.w	r3, r0, #146	; 0x92
 800b88e:	3108      	adds	r1, #8
 800b890:	30a2      	adds	r0, #162	; 0xa2
 800b892:	4298      	cmp	r0, r3
 800b894:	d007      	beq.n	800b8a6 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x26>
 800b896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b89a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b89e:	4294      	cmp	r4, r2
 800b8a0:	d0f7      	beq.n	800b892 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x12>
 800b8a2:	2000      	movs	r0, #0
 800b8a4:	bd10      	pop	{r4, pc}
 800b8a6:	2001      	movs	r0, #1
 800b8a8:	e7fc      	b.n	800b8a4 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x24>
	...

0800b8ac <E131Bridge::SetNetworkDataLossCondition(bool, bool)>:
 800b8ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	4605      	mov	r5, r0
 800b8b4:	4690      	mov	r8, r2
 800b8b6:	460f      	mov	r7, r1
 800b8b8:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800b8bc:	2900      	cmp	r1, #0
 800b8be:	d03d      	beq.n	800b93c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x90>
 800b8c0:	2a00      	cmp	r2, #0
 800b8c2:	d03b      	beq.n	800b93c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x90>
 800b8c4:	2600      	movs	r6, #0
 800b8c6:	f240 6804 	movw	r8, #1540	; 0x604
 800b8ca:	4637      	mov	r7, r6
 800b8cc:	f8c0 34f4 	str.w	r3, [r0, #1268]	; 0x4f4
 800b8d0:	f880 350c 	strb.w	r3, [r0, #1292]	; 0x50c
 800b8d4:	f200 541c 	addw	r4, r0, #1308	; 0x51c
 800b8d8:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800b8dc:	b1e3      	cbz	r3, 800b918 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x6c>
 800b8de:	6868      	ldr	r0, [r5, #4]
 800b8e0:	4631      	mov	r1, r6
 800b8e2:	6803      	ldr	r3, [r0, #0]
 800b8e4:	68db      	ldr	r3, [r3, #12]
 800b8e6:	4798      	blx	r3
 800b8e8:	2110      	movs	r1, #16
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	f844 7c04 	str.w	r7, [r4, #-4]
 800b8f0:	f7ff fd72 	bl	800b3d8 <memset.constprop.0.isra.0>
 800b8f4:	2110      	movs	r1, #16
 800b8f6:	f104 001c 	add.w	r0, r4, #28
 800b8fa:	61a7      	str	r7, [r4, #24]
 800b8fc:	f7ff fd6c 	bl	800b3d8 <memset.constprop.0.isra.0>
 800b900:	f7fe f95c 	bl	8009bbc <lightset::Data::Get()>
 800b904:	fb08 0006 	mla	r0, r8, r6, r0
 800b908:	f8c0 7600 	str.w	r7, [r0, #1536]	; 0x600
 800b90c:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
 800b910:	f884 7036 	strb.w	r7, [r4, #54]	; 0x36
 800b914:	f884 7035 	strb.w	r7, [r4, #53]	; 0x35
 800b918:	3601      	adds	r6, #1
 800b91a:	2e04      	cmp	r6, #4
 800b91c:	f104 0444 	add.w	r4, r4, #68	; 0x44
 800b920:	d1da      	bne.n	800b8d8 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x2c>
 800b922:	4b25      	ldr	r3, [pc, #148]	; (800b9b8 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x10c>)
 800b924:	2102      	movs	r1, #2
 800b926:	6818      	ldr	r0, [r3, #0]
 800b928:	f008 fd6c 	bl	8014404 <LedBlink::SetMode(ledblink::Mode)>
 800b92c:	f895 350d 	ldrb.w	r3, [r5, #1293]	; 0x50d
 800b930:	f023 0302 	bic.w	r3, r3, #2
 800b934:	f885 350d 	strb.w	r3, [r5, #1293]	; 0x50d
 800b938:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b93c:	2600      	movs	r6, #0
 800b93e:	f240 6b04 	movw	fp, #1540	; 0x604
 800b942:	46b1      	mov	r9, r6
 800b944:	f505 64a7 	add.w	r4, r5, #1336	; 0x538
 800b948:	7ea3      	ldrb	r3, [r4, #26]
 800b94a:	b373      	cbz	r3, 800b9aa <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xfe>
 800b94c:	b15f      	cbz	r7, 800b966 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xba>
 800b94e:	f854 3c20 	ldr.w	r3, [r4, #-32]
 800b952:	b143      	cbz	r3, 800b966 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xba>
 800b954:	2110      	movs	r1, #16
 800b956:	f844 9c20 	str.w	r9, [r4, #-32]
 800b95a:	f1a4 001c 	sub.w	r0, r4, #28
 800b95e:	f7ff fd3b 	bl	800b3d8 <memset.constprop.0.isra.0>
 800b962:	f884 9019 	strb.w	r9, [r4, #25]
 800b966:	f1b8 0f00 	cmp.w	r8, #0
 800b96a:	d00a      	beq.n	800b982 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd6>
 800b96c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b970:	b13b      	cbz	r3, 800b982 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd6>
 800b972:	2110      	movs	r1, #16
 800b974:	4620      	mov	r0, r4
 800b976:	f844 9c04 	str.w	r9, [r4, #-4]
 800b97a:	f7ff fd2d 	bl	800b3d8 <memset.constprop.0.isra.0>
 800b97e:	f884 9019 	strb.w	r9, [r4, #25]
 800b982:	f895 a4f5 	ldrb.w	sl, [r5, #1269]	; 0x4f5
 800b986:	f1ba 0f00 	cmp.w	sl, #0
 800b98a:	d10e      	bne.n	800b9aa <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xfe>
 800b98c:	6868      	ldr	r0, [r5, #4]
 800b98e:	4631      	mov	r1, r6
 800b990:	6803      	ldr	r3, [r0, #0]
 800b992:	68db      	ldr	r3, [r3, #12]
 800b994:	4798      	blx	r3
 800b996:	f7fe f911 	bl	8009bbc <lightset::Data::Get()>
 800b99a:	fb0b 0006 	mla	r0, fp, r6, r0
 800b99e:	f8c0 a600 	str.w	sl, [r0, #1536]	; 0x600
 800b9a2:	f884 a018 	strb.w	sl, [r4, #24]
 800b9a6:	f884 a01a 	strb.w	sl, [r4, #26]
 800b9aa:	3601      	adds	r6, #1
 800b9ac:	2e04      	cmp	r6, #4
 800b9ae:	f104 0444 	add.w	r4, r4, #68	; 0x44
 800b9b2:	d1c9      	bne.n	800b948 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x9c>
 800b9b4:	e7b5      	b.n	800b922 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x76>
 800b9b6:	bf00      	nop
 800b9b8:	2000a9c0 	andcs	sl, r0, r0, asr #19

0800b9bc <E131Bridge::HandleDmx()>:
 800b9bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c0:	4604      	mov	r4, r0
 800b9c2:	2600      	movs	r6, #0
 800b9c4:	f8b0 70f7 	ldrh.w	r7, [r0, #247]	; 0xf7
 800b9c8:	f100 09fa 	add.w	r9, r0, #250	; 0xfa
 800b9cc:	ba7f      	rev16	r7, r7
 800b9ce:	b2bf      	uxth	r7, r7
 800b9d0:	3f01      	subs	r7, #1
 800b9d2:	f200 551c 	addw	r5, r0, #1308	; 0x51c
 800b9d6:	f815 3c0a 	ldrb.w	r3, [r5, #-10]
 800b9da:	b353      	cbz	r3, 800ba32 <E131Bridge::HandleDmx()+0x76>
 800b9dc:	f835 3c0c 	ldrh.w	r3, [r5, #-12]
 800b9e0:	f8b4 20ed 	ldrh.w	r2, [r4, #237]	; 0xed
 800b9e4:	ba5b      	rev16	r3, r3
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d122      	bne.n	800ba32 <E131Bridge::HandleDmx()+0x76>
 800b9ec:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800b9f0:	f1a5 0108 	sub.w	r1, r5, #8
 800b9f4:	4620      	mov	r0, r4
 800b9f6:	9300      	str	r3, [sp, #0]
 800b9f8:	f7ff ff42 	bl	800b880 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800b9fc:	f105 0114 	add.w	r1, r5, #20
 800ba00:	4682      	mov	sl, r0
 800ba02:	4620      	mov	r0, r4
 800ba04:	f7ff ff3c 	bl	800b880 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800ba08:	f8d5 b018 	ldr.w	fp, [r5, #24]
 800ba0c:	4680      	mov	r8, r0
 800ba0e:	f1ba 0f00 	cmp.w	sl, #0
 800ba12:	d016      	beq.n	800ba42 <E131Bridge::HandleDmx()+0x86>
 800ba14:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800ba18:	7c2a      	ldrb	r2, [r5, #16]
 800ba1a:	742b      	strb	r3, [r5, #16]
 800ba1c:	3313      	adds	r3, #19
 800ba1e:	1a9b      	subs	r3, r3, r2
 800ba20:	b2db      	uxtb	r3, r3
 800ba22:	2b13      	cmp	r3, #19
 800ba24:	d905      	bls.n	800ba32 <E131Bridge::HandleDmx()+0x76>
 800ba26:	f994 20ec 	ldrsb.w	r2, [r4, #236]	; 0xec
 800ba2a:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800ba2e:	2a00      	cmp	r2, #0
 800ba30:	da10      	bge.n	800ba54 <E131Bridge::HandleDmx()+0x98>
 800ba32:	3601      	adds	r6, #1
 800ba34:	2e04      	cmp	r6, #4
 800ba36:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800ba3a:	d1cc      	bne.n	800b9d6 <E131Bridge::HandleDmx()+0x1a>
 800ba3c:	b003      	add	sp, #12
 800ba3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba42:	2800      	cmp	r0, #0
 800ba44:	d0ef      	beq.n	800ba26 <E131Bridge::HandleDmx()+0x6a>
 800ba46:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800ba4a:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 800ba4e:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800ba52:	e7e3      	b.n	800ba1c <E131Bridge::HandleDmx()+0x60>
 800ba54:	065a      	lsls	r2, r3, #25
 800ba56:	d50b      	bpl.n	800ba70 <E131Bridge::HandleDmx()+0xb4>
 800ba58:	f1ba 0f00 	cmp.w	sl, #0
 800ba5c:	d102      	bne.n	800ba64 <E131Bridge::HandleDmx()+0xa8>
 800ba5e:	f1b8 0f00 	cmp.w	r8, #0
 800ba62:	d0e6      	beq.n	800ba32 <E131Bridge::HandleDmx()+0x76>
 800ba64:	4642      	mov	r2, r8
 800ba66:	4651      	mov	r1, sl
 800ba68:	4620      	mov	r0, r4
 800ba6a:	f7ff ff1f 	bl	800b8ac <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800ba6e:	e7e0      	b.n	800ba32 <E131Bridge::HandleDmx()+0x76>
 800ba70:	f894 34f5 	ldrb.w	r3, [r4, #1269]	; 0x4f5
 800ba74:	b133      	cbz	r3, 800ba84 <E131Bridge::HandleDmx()+0xc8>
 800ba76:	f894 34fa 	ldrb.w	r3, [r4, #1274]	; 0x4fa
 800ba7a:	b91b      	cbnz	r3, 800ba84 <E131Bridge::HandleDmx()+0xc8>
 800ba7c:	4631      	mov	r1, r6
 800ba7e:	4620      	mov	r0, r4
 800ba80:	f7ff fe98 	bl	800b7b4 <E131Bridge::CheckMergeTimeouts(unsigned int)>
 800ba84:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
 800ba88:	f894 250c 	ldrb.w	r2, [r4, #1292]	; 0x50c
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d259      	bcs.n	800bb44 <E131Bridge::HandleDmx()+0x188>
 800ba90:	4631      	mov	r1, r6
 800ba92:	4620      	mov	r0, r4
 800ba94:	9301      	str	r3, [sp, #4]
 800ba96:	f7ff fece 	bl	800b836 <E131Bridge::IsPriorityTimeOut(unsigned int) const>
 800ba9a:	2800      	cmp	r0, #0
 800ba9c:	d0c9      	beq.n	800ba32 <E131Bridge::HandleDmx()+0x76>
 800ba9e:	9b01      	ldr	r3, [sp, #4]
 800baa0:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
 800baa4:	9b00      	ldr	r3, [sp, #0]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d154      	bne.n	800bb54 <E131Bridge::HandleDmx()+0x198>
 800baaa:	f1bb 0f00 	cmp.w	fp, #0
 800baae:	d15c      	bne.n	800bb6a <E131Bridge::HandleDmx()+0x1ae>
 800bab0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800bab2:	2210      	movs	r2, #16
 800bab4:	f845 3c04 	str.w	r3, [r5, #-4]
 800bab8:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800babc:	4628      	mov	r0, r5
 800babe:	742b      	strb	r3, [r5, #16]
 800bac0:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800bac4:	f7ff fc90 	bl	800b3e8 <memcpy.isra.0>
 800bac8:	68e3      	ldr	r3, [r4, #12]
 800baca:	463a      	mov	r2, r7
 800bacc:	4649      	mov	r1, r9
 800bace:	4630      	mov	r0, r6
 800bad0:	f845 3c08 	str.w	r3, [r5, #-8]
 800bad4:	f7fe f87e 	bl	8009bd4 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 800bad8:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800badc:	069b      	lsls	r3, r3, #26
 800bade:	f100 80ad 	bmi.w	800bc3c <E131Bridge::HandleDmx()+0x280>
 800bae2:	f8b4 30e9 	ldrh.w	r3, [r4, #233]	; 0xe9
 800bae6:	b29a      	uxth	r2, r3
 800bae8:	2a00      	cmp	r2, #0
 800baea:	f000 80ab 	beq.w	800bc44 <E131Bridge::HandleDmx()+0x288>
 800baee:	f894 24f7 	ldrb.w	r2, [r4, #1271]	; 0x4f7
 800baf2:	2a00      	cmp	r2, #0
 800baf4:	f040 80a6 	bne.w	800bc44 <E131Bridge::HandleDmx()+0x288>
 800baf8:	ba5b      	rev16	r3, r3
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	f1ba 0f00 	cmp.w	sl, #0
 800bb00:	f040 8099 	bne.w	800bc36 <E131Bridge::HandleDmx()+0x27a>
 800bb04:	f1b8 0f00 	cmp.w	r8, #0
 800bb08:	f040 8095 	bne.w	800bc36 <E131Bridge::HandleDmx()+0x27a>
 800bb0c:	69aa      	ldr	r2, [r5, #24]
 800bb0e:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800bb12:	3a00      	subs	r2, #0
 800bb14:	bf18      	it	ne
 800bb16:	2201      	movne	r2, #1
 800bb18:	3900      	subs	r1, #0
 800bb1a:	bf18      	it	ne
 800bb1c:	2101      	movne	r1, #1
 800bb1e:	4620      	mov	r0, r4
 800bb20:	f7ff fd82 	bl	800b628 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>
 800bb24:	f240 1301 	movw	r3, #257	; 0x101
 800bb28:	f8a4 34f6 	strh.w	r3, [r4, #1270]	; 0x4f6
 800bb2c:	f894 34fb 	ldrb.w	r3, [r4, #1275]	; 0x4fb
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	f040 808c 	bne.w	800bc4e <E131Bridge::HandleDmx()+0x292>
 800bb36:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800bb3a:	f043 0302 	orr.w	r3, r3, #2
 800bb3e:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800bb42:	e776      	b.n	800ba32 <E131Bridge::HandleDmx()+0x76>
 800bb44:	d9ae      	bls.n	800baa4 <E131Bridge::HandleDmx()+0xe8>
 800bb46:	2200      	movs	r2, #0
 800bb48:	f845 2c04 	str.w	r2, [r5, #-4]
 800bb4c:	61aa      	str	r2, [r5, #24]
 800bb4e:	f884 24f5 	strb.w	r2, [r4, #1269]	; 0x4f5
 800bb52:	e7a5      	b.n	800baa0 <E131Bridge::HandleDmx()+0xe4>
 800bb54:	f1ba 0f00 	cmp.w	sl, #0
 800bb58:	f000 8092 	beq.w	800bc80 <E131Bridge::HandleDmx()+0x2c4>
 800bb5c:	f1bb 0f00 	cmp.w	fp, #0
 800bb60:	d15c      	bne.n	800bc1c <E131Bridge::HandleDmx()+0x260>
 800bb62:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800bb66:	742b      	strb	r3, [r5, #16]
 800bb68:	e7ae      	b.n	800bac8 <E131Bridge::HandleDmx()+0x10c>
 800bb6a:	f1b8 0f00 	cmp.w	r8, #0
 800bb6e:	d03b      	beq.n	800bbe8 <E131Bridge::HandleDmx()+0x22c>
 800bb70:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800bb74:	f240 6b04 	movw	fp, #1540	; 0x604
 800bb78:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800bb7c:	68e3      	ldr	r3, [r4, #12]
 800bb7e:	fb0b fb06 	mul.w	fp, fp, r6
 800bb82:	616b      	str	r3, [r5, #20]
 800bb84:	f7fe f81a 	bl	8009bbc <lightset::Data::Get()>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	f50b 7000 	add.w	r0, fp, #512	; 0x200
 800bb8e:	463a      	mov	r2, r7
 800bb90:	4649      	mov	r1, r9
 800bb92:	4418      	add	r0, r3
 800bb94:	9300      	str	r3, [sp, #0]
 800bb96:	f7ff fc27 	bl	800b3e8 <memcpy.isra.0>
 800bb9a:	9b00      	ldr	r3, [sp, #0]
 800bb9c:	f50b 6080 	add.w	r0, fp, #1024	; 0x400
 800bba0:	eb03 020b 	add.w	r2, r3, fp
 800bba4:	f8c2 7600 	str.w	r7, [r2, #1536]	; 0x600
 800bba8:	4649      	mov	r1, r9
 800bbaa:	463a      	mov	r2, r7
 800bbac:	4418      	add	r0, r3
 800bbae:	f7ff fc1b 	bl	800b3e8 <memcpy.isra.0>
 800bbb2:	e791      	b.n	800bad8 <E131Bridge::HandleDmx()+0x11c>
 800bbb4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800bbb6:	2210      	movs	r2, #16
 800bbb8:	61ab      	str	r3, [r5, #24]
 800bbba:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800bbbe:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800bbc2:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800bbc6:	f105 001c 	add.w	r0, r5, #28
 800bbca:	f7ff fc0d 	bl	800b3e8 <memcpy.isra.0>
 800bbce:	68e3      	ldr	r3, [r4, #12]
 800bbd0:	4631      	mov	r1, r6
 800bbd2:	4620      	mov	r0, r4
 800bbd4:	616b      	str	r3, [r5, #20]
 800bbd6:	f7ff fdde 	bl	800b796 <E131Bridge::UpdateMergeStatus(unsigned int)>
 800bbda:	463a      	mov	r2, r7
 800bbdc:	4649      	mov	r1, r9
 800bbde:	4630      	mov	r0, r6
 800bbe0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800bbe2:	f7fe f83d 	bl	8009c60 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800bbe6:	e777      	b.n	800bad8 <E131Bridge::HandleDmx()+0x11c>
 800bbe8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800bbea:	2210      	movs	r2, #16
 800bbec:	f845 3c04 	str.w	r3, [r5, #-4]
 800bbf0:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800bbf4:	4628      	mov	r0, r5
 800bbf6:	742b      	strb	r3, [r5, #16]
 800bbf8:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800bbfc:	f7ff fbf4 	bl	800b3e8 <memcpy.isra.0>
 800bc00:	68e3      	ldr	r3, [r4, #12]
 800bc02:	4631      	mov	r1, r6
 800bc04:	4620      	mov	r0, r4
 800bc06:	f845 3c08 	str.w	r3, [r5, #-8]
 800bc0a:	f7ff fdc4 	bl	800b796 <E131Bridge::UpdateMergeStatus(unsigned int)>
 800bc0e:	463a      	mov	r2, r7
 800bc10:	4649      	mov	r1, r9
 800bc12:	4630      	mov	r0, r6
 800bc14:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800bc16:	f7fd fffa 	bl	8009c0e <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800bc1a:	e75d      	b.n	800bad8 <E131Bridge::HandleDmx()+0x11c>
 800bc1c:	f1b8 0f00 	cmp.w	r8, #0
 800bc20:	d103      	bne.n	800bc2a <E131Bridge::HandleDmx()+0x26e>
 800bc22:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800bc26:	742b      	strb	r3, [r5, #16]
 800bc28:	e7ea      	b.n	800bc00 <E131Bridge::HandleDmx()+0x244>
 800bc2a:	481b      	ldr	r0, [pc, #108]	; (800bc98 <E131Bridge::HandleDmx()+0x2dc>)
 800bc2c:	b003      	add	sp, #12
 800bc2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc32:	f7fd b843 	b.w	8008cbc <printf>
 800bc36:	4642      	mov	r2, r8
 800bc38:	4651      	mov	r1, sl
 800bc3a:	e770      	b.n	800bb1e <E131Bridge::HandleDmx()+0x162>
 800bc3c:	f04f 0300 	mov.w	r3, #0
 800bc40:	f884 34f7 	strb.w	r3, [r4, #1271]	; 0x4f7
 800bc44:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	f47f af6f 	bne.w	800bb2c <E131Bridge::HandleDmx()+0x170>
 800bc4e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800bc52:	f7fd ffb3 	bl	8009bbc <lightset::Data::Get()>
 800bc56:	4632      	mov	r2, r6
 800bc58:	4641      	mov	r1, r8
 800bc5a:	f7ff fbcf 	bl	800b3fc <lightset::Data::IOutput(LightSet*, unsigned int) const>
 800bc5e:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	f47f af67 	bne.w	800bb36 <E131Bridge::HandleDmx()+0x17a>
 800bc68:	6860      	ldr	r0, [r4, #4]
 800bc6a:	4631      	mov	r1, r6
 800bc6c:	6803      	ldr	r3, [r0, #0]
 800bc6e:	689b      	ldr	r3, [r3, #8]
 800bc70:	4798      	blx	r3
 800bc72:	f04f 0301 	mov.w	r3, #1
 800bc76:	f884 34f8 	strb.w	r3, [r4, #1272]	; 0x4f8
 800bc7a:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 800bc7e:	e75a      	b.n	800bb36 <E131Bridge::HandleDmx()+0x17a>
 800bc80:	f1bb 0f00 	cmp.w	fp, #0
 800bc84:	d096      	beq.n	800bbb4 <E131Bridge::HandleDmx()+0x1f8>
 800bc86:	f1b8 0f00 	cmp.w	r8, #0
 800bc8a:	d0ce      	beq.n	800bc2a <E131Bridge::HandleDmx()+0x26e>
 800bc8c:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800bc90:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800bc94:	e79b      	b.n	800bbce <E131Bridge::HandleDmx()+0x212>
 800bc96:	bf00      	nop
 800bc98:	08016cb8 	stmdaeq	r1, {r3, r4, r5, r7, sl, fp, sp, lr}

0800bc9c <E131Bridge::IsStatusChanged()>:
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	f890 04f8 	ldrb.w	r0, [r0, #1272]	; 0x4f8
 800bca2:	b110      	cbz	r0, 800bcaa <E131Bridge::IsStatusChanged()+0xe>
 800bca4:	2200      	movs	r2, #0
 800bca6:	f883 24f8 	strb.w	r2, [r3, #1272]	; 0x4f8
 800bcaa:	4770      	bx	lr

0800bcac <E131Bridge::Clear(unsigned int)>:
 800bcac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcae:	460d      	mov	r5, r1
 800bcb0:	4604      	mov	r4, r0
 800bcb2:	6847      	ldr	r7, [r0, #4]
 800bcb4:	f7fd ff82 	bl	8009bbc <lightset::Data::Get()>
 800bcb8:	f240 6204 	movw	r2, #1540	; 0x604
 800bcbc:	4606      	mov	r6, r0
 800bcbe:	436a      	muls	r2, r5
 800bcc0:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 800bcc4:	4430      	add	r0, r6
 800bcc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bcca:	f7ff fb85 	bl	800b3d8 <memset.constprop.0.isra.0>
 800bcce:	4432      	add	r2, r6
 800bcd0:	4630      	mov	r0, r6
 800bcd2:	2644      	movs	r6, #68	; 0x44
 800bcd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bcd8:	fb06 4605 	mla	r6, r6, r5, r4
 800bcdc:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
 800bce0:	4639      	mov	r1, r7
 800bce2:	462a      	mov	r2, r5
 800bce4:	f7ff fb8a 	bl	800b3fc <lightset::Data::IOutput(LightSet*, unsigned int) const>
 800bce8:	f896 3512 	ldrb.w	r3, [r6, #1298]	; 0x512
 800bcec:	b153      	cbz	r3, 800bd04 <E131Bridge::Clear(unsigned int)+0x58>
 800bcee:	f896 3552 	ldrb.w	r3, [r6, #1362]	; 0x552
 800bcf2:	b93b      	cbnz	r3, 800bd04 <E131Bridge::Clear(unsigned int)+0x58>
 800bcf4:	6860      	ldr	r0, [r4, #4]
 800bcf6:	4629      	mov	r1, r5
 800bcf8:	6803      	ldr	r3, [r0, #0]
 800bcfa:	689b      	ldr	r3, [r3, #8]
 800bcfc:	4798      	blx	r3
 800bcfe:	2301      	movs	r3, #1
 800bd00:	f886 3552 	strb.w	r3, [r6, #1362]	; 0x552
 800bd04:	2300      	movs	r3, #0
 800bd06:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
 800bd0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bd0c <E131Bridge::IsValidRoot()>:
 800bd0c:	4a0d      	ldr	r2, [pc, #52]	; (800bd44 <E131Bridge::IsValidRoot()+0x38>)
 800bd0e:	b530      	push	{r4, r5, lr}
 800bd10:	f100 0380 	add.w	r3, r0, #128	; 0x80
 800bd14:	f100 058c 	add.w	r5, r0, #140	; 0x8c
 800bd18:	42ab      	cmp	r3, r5
 800bd1a:	d007      	beq.n	800bd2c <E131Bridge::IsValidRoot()+0x20>
 800bd1c:	f813 4b01 	ldrb.w	r4, [r3], #1
 800bd20:	f812 1b01 	ldrb.w	r1, [r2], #1
 800bd24:	428c      	cmp	r4, r1
 800bd26:	d0f7      	beq.n	800bd18 <E131Bridge::IsValidRoot()+0xc>
 800bd28:	2000      	movs	r0, #0
 800bd2a:	e008      	b.n	800bd3e <E131Bridge::IsValidRoot()+0x32>
 800bd2c:	f8d0 008e 	ldr.w	r0, [r0, #142]	; 0x8e
 800bd30:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800bd34:	d004      	beq.n	800bd40 <E131Bridge::IsValidRoot()+0x34>
 800bd36:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 800bd3a:	4258      	negs	r0, r3
 800bd3c:	4158      	adcs	r0, r3
 800bd3e:	bd30      	pop	{r4, r5, pc}
 800bd40:	2001      	movs	r0, #1
 800bd42:	e7fc      	b.n	800bd3e <E131Bridge::IsValidRoot()+0x32>
 800bd44:	08016d68 	stmdaeq	r1, {r3, r5, r6, r8, sl, fp, sp, lr}

0800bd48 <E131Bridge::IsValidDataPacket()>:
 800bd48:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
 800bd4c:	2b02      	cmp	r3, #2
 800bd4e:	d10d      	bne.n	800bd6c <E131Bridge::IsValidDataPacket()+0x24>
 800bd50:	f890 30f2 	ldrb.w	r3, [r0, #242]	; 0xf2
 800bd54:	2ba1      	cmp	r3, #161	; 0xa1
 800bd56:	d109      	bne.n	800bd6c <E131Bridge::IsValidDataPacket()+0x24>
 800bd58:	f8b0 30f3 	ldrh.w	r3, [r0, #243]	; 0xf3
 800bd5c:	b933      	cbnz	r3, 800bd6c <E131Bridge::IsValidDataPacket()+0x24>
 800bd5e:	f8b0 00f5 	ldrh.w	r0, [r0, #245]	; 0xf5
 800bd62:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800bd66:	4258      	negs	r0, r3
 800bd68:	4158      	adcs	r0, r3
 800bd6a:	4770      	bx	lr
 800bd6c:	2000      	movs	r0, #0
 800bd6e:	4770      	bx	lr

0800bd70 <E131Bridge::Run()>:
 800bd70:	b530      	push	{r4, r5, lr}
 800bd72:	4601      	mov	r1, r0
 800bd74:	4604      	mov	r4, r0
 800bd76:	b085      	sub	sp, #20
 800bd78:	f10d 030e 	add.w	r3, sp, #14
 800bd7c:	f811 0b7c 	ldrb.w	r0, [r1], #124
 800bd80:	f44f 628f 	mov.w	r2, #1144	; 0x478
 800bd84:	9300      	str	r3, [sp, #0]
 800bd86:	f104 0378 	add.w	r3, r4, #120	; 0x78
 800bd8a:	f005 f8cf 	bl	8010f2c <udp_recv>
 800bd8e:	4b3c      	ldr	r3, [pc, #240]	; (800be80 <E131Bridge::Run()+0x110>)
 800bd90:	681d      	ldr	r5, [r3, #0]
 800bd92:	60e5      	str	r5, [r4, #12]
 800bd94:	2800      	cmp	r0, #0
 800bd96:	d13b      	bne.n	800be10 <E131Bridge::Run()+0xa0>
 800bd98:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800bd9c:	b183      	cbz	r3, 800bdc0 <E131Bridge::Run()+0x50>
 800bd9e:	f894 34f9 	ldrb.w	r3, [r4, #1273]	; 0x4f9
 800bda2:	bb73      	cbnz	r3, 800be02 <E131Bridge::Run()+0x92>
 800bda4:	6923      	ldr	r3, [r4, #16]
 800bda6:	1aed      	subs	r5, r5, r3
 800bda8:	f640 13c3 	movw	r3, #2499	; 0x9c3
 800bdac:	429d      	cmp	r5, r3
 800bdae:	d928      	bls.n	800be02 <E131Bridge::Run()+0x92>
 800bdb0:	6863      	ldr	r3, [r4, #4]
 800bdb2:	b9eb      	cbnz	r3, 800bdf0 <E131Bridge::Run()+0x80>
 800bdb4:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800bdb8:	f023 0302 	bic.w	r3, r3, #2
 800bdbc:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800bdc0:	6963      	ldr	r3, [r4, #20]
 800bdc2:	b12b      	cbz	r3, 800bdd0 <E131Bridge::Run()+0x60>
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	f000 f94f 	bl	800c068 <E131Bridge::HandleDmxIn()>
 800bdca:	4620      	mov	r0, r4
 800bdcc:	f000 f8ca 	bl	800bf64 <E131Bridge::SendDiscoveryPacket()>
 800bdd0:	7a23      	ldrb	r3, [r4, #8]
 800bdd2:	b15b      	cbz	r3, 800bdec <E131Bridge::Run()+0x7c>
 800bdd4:	4b2b      	ldr	r3, [pc, #172]	; (800be84 <E131Bridge::Run()+0x114>)
 800bdd6:	6818      	ldr	r0, [r3, #0]
 800bdd8:	6843      	ldr	r3, [r0, #4]
 800bdda:	2b04      	cmp	r3, #4
 800bddc:	d006      	beq.n	800bdec <E131Bridge::Run()+0x7c>
 800bdde:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d049      	beq.n	800be7a <E131Bridge::Run()+0x10a>
 800bde6:	2103      	movs	r1, #3
 800bde8:	f008 fb0c 	bl	8014404 <LedBlink::SetMode(ledblink::Mode)>
 800bdec:	b005      	add	sp, #20
 800bdee:	bd30      	pop	{r4, r5, pc}
 800bdf0:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d1dd      	bne.n	800bdb4 <E131Bridge::Run()+0x44>
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	4620      	mov	r0, r4
 800bdfc:	4611      	mov	r1, r2
 800bdfe:	f7ff fd55 	bl	800b8ac <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800be02:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 800be06:	1a9b      	subs	r3, r3, r2
 800be08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be0c:	d3d8      	bcc.n	800bdc0 <E131Bridge::Run()+0x50>
 800be0e:	e7d1      	b.n	800bdb4 <E131Bridge::Run()+0x44>
 800be10:	4620      	mov	r0, r4
 800be12:	f7ff ff7b 	bl	800bd0c <E131Bridge::IsValidRoot()>
 800be16:	2800      	cmp	r0, #0
 800be18:	d0e8      	beq.n	800bdec <E131Bridge::Run()+0x7c>
 800be1a:	2300      	movs	r3, #0
 800be1c:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
 800be20:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800be24:	6125      	str	r5, [r4, #16]
 800be26:	b15b      	cbz	r3, 800be40 <E131Bridge::Run()+0xd0>
 800be28:	f894 34f7 	ldrb.w	r3, [r4, #1271]	; 0x4f7
 800be2c:	b943      	cbnz	r3, 800be40 <E131Bridge::Run()+0xd0>
 800be2e:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	; 0x4fc
 800be32:	1aad      	subs	r5, r5, r2
 800be34:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800be38:	4295      	cmp	r5, r2
 800be3a:	bf88      	it	hi
 800be3c:	f884 34f6 	strbhi.w	r3, [r4, #1270]	; 0x4f6
 800be40:	6863      	ldr	r3, [r4, #4]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d0bc      	beq.n	800bdc0 <E131Bridge::Run()+0x50>
 800be46:	f8d4 308e 	ldr.w	r3, [r4, #142]	; 0x8e
 800be4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800be4e:	ba1a      	rev	r2, r3
 800be50:	d108      	bne.n	800be64 <E131Bridge::Run()+0xf4>
 800be52:	4620      	mov	r0, r4
 800be54:	f7ff ff78 	bl	800bd48 <E131Bridge::IsValidDataPacket()>
 800be58:	2800      	cmp	r0, #0
 800be5a:	d0b1      	beq.n	800bdc0 <E131Bridge::Run()+0x50>
 800be5c:	4620      	mov	r0, r4
 800be5e:	f7ff fdad 	bl	800b9bc <E131Bridge::HandleDmx()>
 800be62:	e7ad      	b.n	800bdc0 <E131Bridge::Run()+0x50>
 800be64:	2a08      	cmp	r2, #8
 800be66:	d1ab      	bne.n	800bdc0 <E131Bridge::Run()+0x50>
 800be68:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800be6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800be70:	d1a6      	bne.n	800bdc0 <E131Bridge::Run()+0x50>
 800be72:	4620      	mov	r0, r4
 800be74:	f000 f972 	bl	800c15c <E131Bridge::HandleSynchronization()>
 800be78:	e7a2      	b.n	800bdc0 <E131Bridge::Run()+0x50>
 800be7a:	2102      	movs	r1, #2
 800be7c:	e7b4      	b.n	800bde8 <E131Bridge::Run()+0x78>
 800be7e:	bf00      	nop
 800be80:	2000a9dc 	ldrdcs	sl, [r0], -ip
 800be84:	2000a9c0 	andcs	sl, r0, r0, asr #19

0800be88 <E131Bridge::FillDiscoveryPacket()>:
 800be88:	2200      	movs	r2, #0
 800be8a:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800be8e:	b510      	push	{r4, lr}
 800be90:	333c      	adds	r3, #60	; 0x3c
 800be92:	005b      	lsls	r3, r3, #1
 800be94:	f8a0 3504 	strh.w	r3, [r0, #1284]	; 0x504
 800be98:	69c3      	ldr	r3, [r0, #28]
 800be9a:	f503 618f 	add.w	r1, r3, #1144	; 0x478
 800be9e:	428b      	cmp	r3, r1
 800bea0:	d002      	beq.n	800bea8 <E131Bridge::FillDiscoveryPacket()+0x20>
 800bea2:	f803 2b01 	strb.w	r2, [r3], #1
 800bea6:	e7fa      	b.n	800be9e <E131Bridge::FillDiscoveryPacket()+0x16>
 800bea8:	69c3      	ldr	r3, [r0, #28]
 800beaa:	492d      	ldr	r1, [pc, #180]	; (800bf60 <E131Bridge::FillDiscoveryPacket()+0xd8>)
 800beac:	701a      	strb	r2, [r3, #0]
 800beae:	2210      	movs	r2, #16
 800beb0:	705a      	strb	r2, [r3, #1]
 800beb2:	1d1a      	adds	r2, r3, #4
 800beb4:	3310      	adds	r3, #16
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d004      	beq.n	800bec4 <E131Bridge::FillDiscoveryPacket()+0x3c>
 800beba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bebe:	f802 4b01 	strb.w	r4, [r2], #1
 800bec2:	e7f8      	b.n	800beb6 <E131Bridge::FillDiscoveryPacket()+0x2e>
 800bec4:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800bec8:	69c3      	ldr	r3, [r0, #28]
 800beca:	3234      	adds	r2, #52	; 0x34
 800becc:	0052      	lsls	r2, r2, #1
 800bece:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800bed2:	ba52      	rev16	r2, r2
 800bed4:	821a      	strh	r2, [r3, #16]
 800bed6:	2200      	movs	r2, #0
 800bed8:	749a      	strb	r2, [r3, #18]
 800beda:	74da      	strb	r2, [r3, #19]
 800bedc:	751a      	strb	r2, [r3, #20]
 800bede:	2208      	movs	r2, #8
 800bee0:	f100 0124 	add.w	r1, r0, #36	; 0x24
 800bee4:	755a      	strb	r2, [r3, #21]
 800bee6:	f100 0434 	add.w	r4, r0, #52	; 0x34
 800beea:	3316      	adds	r3, #22
 800beec:	42a1      	cmp	r1, r4
 800beee:	d004      	beq.n	800befa <E131Bridge::FillDiscoveryPacket()+0x72>
 800bef0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bef4:	f803 2b01 	strb.w	r2, [r3], #1
 800bef8:	e7f8      	b.n	800beec <E131Bridge::FillDiscoveryPacket()+0x64>
 800befa:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800befe:	69c3      	ldr	r3, [r0, #28]
 800bf00:	3229      	adds	r2, #41	; 0x29
 800bf02:	0052      	lsls	r2, r2, #1
 800bf04:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800bf08:	ba52      	rev16	r2, r2
 800bf0a:	84da      	strh	r2, [r3, #38]	; 0x26
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800bf12:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800bf16:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800bf1a:	2202      	movs	r2, #2
 800bf1c:	332c      	adds	r3, #44	; 0x2c
 800bf1e:	f803 2c01 	strb.w	r2, [r3, #-1]
 800bf22:	f100 0474 	add.w	r4, r0, #116	; 0x74
 800bf26:	42a1      	cmp	r1, r4
 800bf28:	d004      	beq.n	800bf34 <E131Bridge::FillDiscoveryPacket()+0xac>
 800bf2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf2e:	f803 2b01 	strb.w	r2, [r3], #1
 800bf32:	e7f8      	b.n	800bf26 <E131Bridge::FillDiscoveryPacket()+0x9e>
 800bf34:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800bf38:	69c2      	ldr	r2, [r0, #28]
 800bf3a:	3304      	adds	r3, #4
 800bf3c:	005b      	lsls	r3, r3, #1
 800bf3e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800bf42:	ba5b      	rev16	r3, r3
 800bf44:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
 800bf48:	2300      	movs	r3, #0
 800bf4a:	f882 3072 	strb.w	r3, [r2, #114]	; 0x72
 800bf4e:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
 800bf52:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
 800bf56:	2301      	movs	r3, #1
 800bf58:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
 800bf5c:	bd10      	pop	{r4, pc}
 800bf5e:	bf00      	nop
 800bf60:	08016d68 	stmdaeq	r1, {r3, r5, r6, r8, sl, fp, sp, lr}

0800bf64 <E131Bridge::SendDiscoveryPacket()>:
 800bf64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800bf66:	f242 710f 	movw	r1, #9999	; 0x270f
 800bf6a:	68c2      	ldr	r2, [r0, #12]
 800bf6c:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
 800bf70:	4604      	mov	r4, r0
 800bf72:	1ad3      	subs	r3, r2, r3
 800bf74:	428b      	cmp	r3, r1
 800bf76:	d924      	bls.n	800bfc2 <E131Bridge::SendDiscoveryPacket()+0x5e>
 800bf78:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800bf7c:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
 800bf80:	b1ab      	cbz	r3, 800bfae <E131Bridge::SendDiscoveryPacket()+0x4a>
 800bf82:	2500      	movs	r5, #0
 800bf84:	462e      	mov	r6, r5
 800bf86:	2300      	movs	r3, #0
 800bf88:	4629      	mov	r1, r5
 800bf8a:	4620      	mov	r0, r4
 800bf8c:	f10d 020e 	add.w	r2, sp, #14
 800bf90:	f7ff fbea 	bl	800b768 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800bf94:	b140      	cbz	r0, 800bfa8 <E131Bridge::SendDiscoveryPacket()+0x44>
 800bf96:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800bf9a:	69e2      	ldr	r2, [r4, #28]
 800bf9c:	f106 013c 	add.w	r1, r6, #60	; 0x3c
 800bfa0:	ba5b      	rev16	r3, r3
 800bfa2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800bfa6:	3601      	adds	r6, #1
 800bfa8:	3501      	adds	r5, #1
 800bfaa:	2d04      	cmp	r5, #4
 800bfac:	d1eb      	bne.n	800bf86 <E131Bridge::SendDiscoveryPacket()+0x22>
 800bfae:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800bfb2:	f8b4 2504 	ldrh.w	r2, [r4, #1284]	; 0x504
 800bfb6:	9300      	str	r3, [sp, #0]
 800bfb8:	69e1      	ldr	r1, [r4, #28]
 800bfba:	6a23      	ldr	r3, [r4, #32]
 800bfbc:	7820      	ldrb	r0, [r4, #0]
 800bfbe:	f005 f811 	bl	8010fe4 <udp_send>
 800bfc2:	b004      	add	sp, #16
 800bfc4:	bd70      	pop	{r4, r5, r6, pc}

0800bfc6 <memcpy.isra.0>:
 800bfc6:	3801      	subs	r0, #1
 800bfc8:	440a      	add	r2, r1
 800bfca:	4291      	cmp	r1, r2
 800bfcc:	d004      	beq.n	800bfd8 <memcpy.isra.0+0x12>
 800bfce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfd2:	f800 3f01 	strb.w	r3, [r0, #1]!
 800bfd6:	e7f8      	b.n	800bfca <memcpy.isra.0+0x4>
 800bfd8:	4770      	bx	lr
	...

0800bfdc <E131Bridge::FillDataPacket()>:
 800bfdc:	b570      	push	{r4, r5, r6, lr}
 800bfde:	2400      	movs	r4, #0
 800bfe0:	2610      	movs	r6, #16
 800bfe2:	4605      	mov	r5, r0
 800bfe4:	6980      	ldr	r0, [r0, #24]
 800bfe6:	220c      	movs	r2, #12
 800bfe8:	7046      	strb	r6, [r0, #1]
 800bfea:	7004      	strb	r4, [r0, #0]
 800bfec:	7084      	strb	r4, [r0, #2]
 800bfee:	70c4      	strb	r4, [r0, #3]
 800bff0:	491c      	ldr	r1, [pc, #112]	; (800c064 <E131Bridge::FillDataPacket()+0x88>)
 800bff2:	3004      	adds	r0, #4
 800bff4:	f7ff ffe7 	bl	800bfc6 <memcpy.isra.0>
 800bff8:	2304      	movs	r3, #4
 800bffa:	4632      	mov	r2, r6
 800bffc:	2602      	movs	r6, #2
 800bffe:	69a8      	ldr	r0, [r5, #24]
 800c000:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800c004:	7543      	strb	r3, [r0, #21]
 800c006:	7484      	strb	r4, [r0, #18]
 800c008:	74c4      	strb	r4, [r0, #19]
 800c00a:	7504      	strb	r4, [r0, #20]
 800c00c:	3016      	adds	r0, #22
 800c00e:	f7ff ffda 	bl	800bfc6 <memcpy.isra.0>
 800c012:	69a8      	ldr	r0, [r5, #24]
 800c014:	2240      	movs	r2, #64	; 0x40
 800c016:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
 800c01a:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
 800c01e:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
 800c022:	f880 602b 	strb.w	r6, [r0, #43]	; 0x2b
 800c026:	f105 0134 	add.w	r1, r5, #52	; 0x34
 800c02a:	302c      	adds	r0, #44	; 0x2c
 800c02c:	f7ff ffcb 	bl	800bfc6 <memcpy.isra.0>
 800c030:	22a1      	movs	r2, #161	; 0xa1
 800c032:	69ab      	ldr	r3, [r5, #24]
 800c034:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
 800c038:	f883 406d 	strb.w	r4, [r3, #109]	; 0x6d
 800c03c:	f883 406e 	strb.w	r4, [r3, #110]	; 0x6e
 800c040:	69ab      	ldr	r3, [r5, #24]
 800c042:	f883 6075 	strb.w	r6, [r3, #117]	; 0x75
 800c046:	69ab      	ldr	r3, [r5, #24]
 800c048:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800c04c:	2201      	movs	r2, #1
 800c04e:	69ab      	ldr	r3, [r5, #24]
 800c050:	f883 4077 	strb.w	r4, [r3, #119]	; 0x77
 800c054:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
 800c058:	f883 4079 	strb.w	r4, [r3, #121]	; 0x79
 800c05c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 800c060:	bd70      	pop	{r4, r5, r6, pc}
 800c062:	bf00      	nop
 800c064:	08016d68 	stmdaeq	r1, {r3, r5, r6, r8, sl, fp, sp, lr}

0800c068 <E131Bridge::HandleDmxIn()>:
 800c068:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800c06c:	4604      	mov	r4, r0
 800c06e:	4605      	mov	r5, r0
 800c070:	2600      	movs	r6, #0
 800c072:	4f39      	ldr	r7, [pc, #228]	; (800c158 <E131Bridge::HandleDmxIn()+0xf0>)
 800c074:	f895 3622 	ldrb.w	r3, [r5, #1570]	; 0x622
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d053      	beq.n	800c124 <E131Bridge::HandleDmxIn()+0xbc>
 800c07c:	6960      	ldr	r0, [r4, #20]
 800c07e:	4631      	mov	r1, r6
 800c080:	6803      	ldr	r3, [r0, #0]
 800c082:	aa02      	add	r2, sp, #8
 800c084:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800c088:	ab03      	add	r3, sp, #12
 800c08a:	47c0      	blx	r8
 800c08c:	4601      	mov	r1, r0
 800c08e:	2800      	cmp	r0, #0
 800c090:	d050      	beq.n	800c134 <E131Bridge::HandleDmxIn()+0xcc>
 800c092:	9b02      	ldr	r3, [sp, #8]
 800c094:	69a0      	ldr	r0, [r4, #24]
 800c096:	b29b      	uxth	r3, r3
 800c098:	f103 026d 	add.w	r2, r3, #109	; 0x6d
 800c09c:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800c0a0:	ba52      	rev16	r2, r2
 800c0a2:	8202      	strh	r2, [r0, #16]
 800c0a4:	f103 0257 	add.w	r2, r3, #87	; 0x57
 800c0a8:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800c0ac:	ba52      	rev16	r2, r2
 800c0ae:	84c2      	strh	r2, [r0, #38]	; 0x26
 800c0b0:	f895 2629 	ldrb.w	r2, [r5, #1577]	; 0x629
 800c0b4:	330a      	adds	r3, #10
 800c0b6:	f880 206c 	strb.w	r2, [r0, #108]	; 0x6c
 800c0ba:	f895 2628 	ldrb.w	r2, [r5, #1576]	; 0x628
 800c0be:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800c0c2:	1c50      	adds	r0, r2, #1
 800c0c4:	f885 0628 	strb.w	r0, [r5, #1576]	; 0x628
 800c0c8:	69a0      	ldr	r0, [r4, #24]
 800c0ca:	ba5b      	rev16	r3, r3
 800c0cc:	f880 206f 	strb.w	r2, [r0, #111]	; 0x6f
 800c0d0:	f8b5 2620 	ldrh.w	r2, [r5, #1568]	; 0x620
 800c0d4:	69a0      	ldr	r0, [r4, #24]
 800c0d6:	ba52      	rev16	r2, r2
 800c0d8:	f8a0 2071 	strh.w	r2, [r0, #113]	; 0x71
 800c0dc:	f8a0 3073 	strh.w	r3, [r0, #115]	; 0x73
 800c0e0:	9a02      	ldr	r2, [sp, #8]
 800c0e2:	307d      	adds	r0, #125	; 0x7d
 800c0e4:	f7ff ff6f 	bl	800bfc6 <memcpy.isra.0>
 800c0e8:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800c0ec:	69a1      	ldr	r1, [r4, #24]
 800c0ee:	ba53      	rev16	r3, r2
 800c0f0:	f8a1 307b 	strh.w	r3, [r1, #123]	; 0x7b
 800c0f4:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800c0f8:	327d      	adds	r2, #125	; 0x7d
 800c0fa:	9300      	str	r3, [sp, #0]
 800c0fc:	f8d5 3624 	ldr.w	r3, [r5, #1572]	; 0x624
 800c100:	b292      	uxth	r2, r2
 800c102:	7820      	ldrb	r0, [r4, #0]
 800c104:	f004 ff6e 	bl	8010fe4 <udp_send>
 800c108:	2301      	movs	r3, #1
 800c10a:	683a      	ldr	r2, [r7, #0]
 800c10c:	40b3      	lsls	r3, r6
 800c10e:	ea33 0102 	bics.w	r1, r3, r2
 800c112:	d007      	beq.n	800c124 <E131Bridge::HandleDmxIn()+0xbc>
 800c114:	4313      	orrs	r3, r2
 800c116:	603b      	str	r3, [r7, #0]
 800c118:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800c11c:	f043 0301 	orr.w	r3, r3, #1
 800c120:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800c124:	3601      	adds	r6, #1
 800c126:	2e04      	cmp	r6, #4
 800c128:	f105 050c 	add.w	r5, r5, #12
 800c12c:	d1a2      	bne.n	800c074 <E131Bridge::HandleDmxIn()+0xc>
 800c12e:	b004      	add	sp, #16
 800c130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c134:	9b03      	ldr	r3, [sp, #12]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d1f4      	bne.n	800c124 <E131Bridge::HandleDmxIn()+0xbc>
 800c13a:	2301      	movs	r3, #1
 800c13c:	fa03 f206 	lsl.w	r2, r3, r6
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	ea23 0302 	bic.w	r3, r3, r2
 800c146:	603b      	str	r3, [r7, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d1eb      	bne.n	800c124 <E131Bridge::HandleDmxIn()+0xbc>
 800c14c:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800c150:	f023 0301 	bic.w	r3, r3, #1
 800c154:	e7e4      	b.n	800c120 <E131Bridge::HandleDmxIn()+0xb8>
 800c156:	bf00      	nop
 800c158:	20001914 	andcs	r1, r0, r4, lsl r9

0800c15c <E131Bridge::HandleSynchronization()>:
 800c15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c160:	f8b0 30a9 	ldrh.w	r3, [r0, #169]	; 0xa9
 800c164:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800c168:	ba5b      	rev16	r3, r3
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	429a      	cmp	r2, r3
 800c16e:	4604      	mov	r4, r0
 800c170:	d00a      	beq.n	800c188 <E131Bridge::HandleSynchronization()+0x2c>
 800c172:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800c176:	429a      	cmp	r2, r3
 800c178:	d006      	beq.n	800c188 <E131Bridge::HandleSynchronization()+0x2c>
 800c17a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c17e:	4b23      	ldr	r3, [pc, #140]	; (800c20c <E131Bridge::HandleSynchronization()+0xb0>)
 800c180:	2102      	movs	r1, #2
 800c182:	6818      	ldr	r0, [r3, #0]
 800c184:	f008 b93e 	b.w	8014404 <LedBlink::SetMode(ledblink::Mode)>
 800c188:	2500      	movs	r5, #0
 800c18a:	4627      	mov	r7, r4
 800c18c:	46a9      	mov	r9, r5
 800c18e:	68e3      	ldr	r3, [r4, #12]
 800c190:	4e1f      	ldr	r6, [pc, #124]	; (800c210 <E131Bridge::HandleSynchronization()+0xb4>)
 800c192:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800c214 <E131Bridge::HandleSynchronization()+0xb8>
 800c196:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
 800c19a:	f897 3512 	ldrb.w	r3, [r7, #1298]	; 0x512
 800c19e:	b323      	cbz	r3, 800c1ea <E131Bridge::HandleSynchronization()+0x8e>
 800c1a0:	f8d8 3000 	ldr.w	r3, [r8]
 800c1a4:	6860      	ldr	r0, [r4, #4]
 800c1a6:	07da      	lsls	r2, r3, #31
 800c1a8:	bf5c      	itt	pl
 800c1aa:	2301      	movpl	r3, #1
 800c1ac:	f8c8 3000 	strpl.w	r3, [r8]
 800c1b0:	6803      	ldr	r3, [r0, #0]
 800c1b2:	4629      	mov	r1, r5
 800c1b4:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800c1b8:	f506 6280 	add.w	r2, r6, #1024	; 0x400
 800c1bc:	f8d6 3600 	ldr.w	r3, [r6, #1536]	; 0x600
 800c1c0:	47d0      	blx	sl
 800c1c2:	f897 3552 	ldrb.w	r3, [r7, #1362]	; 0x552
 800c1c6:	b93b      	cbnz	r3, 800c1d8 <E131Bridge::HandleSynchronization()+0x7c>
 800c1c8:	6860      	ldr	r0, [r4, #4]
 800c1ca:	4629      	mov	r1, r5
 800c1cc:	6803      	ldr	r3, [r0, #0]
 800c1ce:	689b      	ldr	r3, [r3, #8]
 800c1d0:	4798      	blx	r3
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	f887 3552 	strb.w	r3, [r7, #1362]	; 0x552
 800c1d8:	f8d8 3000 	ldr.w	r3, [r8]
 800c1dc:	f8c6 9600 	str.w	r9, [r6, #1536]	; 0x600
 800c1e0:	07db      	lsls	r3, r3, #31
 800c1e2:	bf5c      	itt	pl
 800c1e4:	2301      	movpl	r3, #1
 800c1e6:	f8c8 3000 	strpl.w	r3, [r8]
 800c1ea:	3501      	adds	r5, #1
 800c1ec:	2d04      	cmp	r5, #4
 800c1ee:	f107 0744 	add.w	r7, r7, #68	; 0x44
 800c1f2:	f206 6604 	addw	r6, r6, #1540	; 0x604
 800c1f6:	d1d0      	bne.n	800c19a <E131Bridge::HandleSynchronization()+0x3e>
 800c1f8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800c1fa:	b120      	cbz	r0, 800c206 <E131Bridge::HandleSynchronization()+0xaa>
 800c1fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c200:	6803      	ldr	r3, [r0, #0]
 800c202:	689b      	ldr	r3, [r3, #8]
 800c204:	4718      	bx	r3
 800c206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c20a:	bf00      	nop
 800c20c:	2000a9c0 	andcs	sl, r0, r0, asr #19
 800c210:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800c214:	200000ec 	andcs	r0, r0, ip, ror #1

0800c218 <E131Bridge::Print()>:
 800c218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c21c:	2500      	movs	r5, #0
 800c21e:	4604      	mov	r4, r0
 800c220:	b08c      	sub	sp, #48	; 0x30
 800c222:	a902      	add	r1, sp, #8
 800c224:	3024      	adds	r0, #36	; 0x24
 800c226:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800c22a:	f000 f8b3 	bl	800c394 <uuid_unparse>
 800c22e:	482c      	ldr	r0, [pc, #176]	; (800c2e0 <E131Bridge::Print()+0xc8>)
 800c230:	f7fc fd44 	bl	8008cbc <printf>
 800c234:	4b2b      	ldr	r3, [pc, #172]	; (800c2e4 <E131Bridge::Print()+0xcc>)
 800c236:	482c      	ldr	r0, [pc, #176]	; (800c2e8 <E131Bridge::Print()+0xd0>)
 800c238:	7819      	ldrb	r1, [r3, #0]
 800c23a:	785a      	ldrb	r2, [r3, #1]
 800c23c:	f7fc fd3e 	bl	8008cbc <printf>
 800c240:	482a      	ldr	r0, [pc, #168]	; (800c2ec <E131Bridge::Print()+0xd4>)
 800c242:	a902      	add	r1, sp, #8
 800c244:	f7fc fd3a 	bl	8008cbc <printf>
 800c248:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800c24c:	b303      	cbz	r3, 800c290 <E131Bridge::Print()+0x78>
 800c24e:	4828      	ldr	r0, [pc, #160]	; (800c2f0 <E131Bridge::Print()+0xd8>)
 800c250:	f7fc fd34 	bl	8008cbc <printf>
 800c254:	4e27      	ldr	r6, [pc, #156]	; (800c2f4 <E131Bridge::Print()+0xdc>)
 800c256:	4f28      	ldr	r7, [pc, #160]	; (800c2f8 <E131Bridge::Print()+0xe0>)
 800c258:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800c2fc <E131Bridge::Print()+0xe4>
 800c25c:	2301      	movs	r3, #1
 800c25e:	4629      	mov	r1, r5
 800c260:	4620      	mov	r0, r4
 800c262:	f10d 0206 	add.w	r2, sp, #6
 800c266:	f7ff fa7f 	bl	800b768 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800c26a:	b170      	cbz	r0, 800c28a <E131Bridge::Print()+0x72>
 800c26c:	2344      	movs	r3, #68	; 0x44
 800c26e:	436b      	muls	r3, r5
 800c270:	f204 524c 	addw	r2, r4, #1356	; 0x54c
 800c274:	58d3      	ldr	r3, [r2, r3]
 800c276:	4629      	mov	r1, r5
 800c278:	2b00      	cmp	r3, #0
 800c27a:	bf0c      	ite	eq
 800c27c:	4633      	moveq	r3, r6
 800c27e:	463b      	movne	r3, r7
 800c280:	4640      	mov	r0, r8
 800c282:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c286:	f7fc fd19 	bl	8008cbc <printf>
 800c28a:	3501      	adds	r5, #1
 800c28c:	2d04      	cmp	r5, #4
 800c28e:	d1e5      	bne.n	800c25c <E131Bridge::Print()+0x44>
 800c290:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800c294:	b1d3      	cbz	r3, 800c2cc <E131Bridge::Print()+0xb4>
 800c296:	481a      	ldr	r0, [pc, #104]	; (800c300 <E131Bridge::Print()+0xe8>)
 800c298:	f7fc fd10 	bl	8008cbc <printf>
 800c29c:	2500      	movs	r5, #0
 800c29e:	4e19      	ldr	r6, [pc, #100]	; (800c304 <E131Bridge::Print()+0xec>)
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	4629      	mov	r1, r5
 800c2a4:	4620      	mov	r0, r4
 800c2a6:	f10d 0206 	add.w	r2, sp, #6
 800c2aa:	f7ff fa5d 	bl	800b768 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800c2ae:	b150      	cbz	r0, 800c2c6 <E131Bridge::Print()+0xae>
 800c2b0:	230c      	movs	r3, #12
 800c2b2:	436b      	muls	r3, r5
 800c2b4:	f204 6229 	addw	r2, r4, #1577	; 0x629
 800c2b8:	5cd3      	ldrb	r3, [r2, r3]
 800c2ba:	4629      	mov	r1, r5
 800c2bc:	4630      	mov	r0, r6
 800c2be:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c2c2:	f7fc fcfb 	bl	8008cbc <printf>
 800c2c6:	3501      	adds	r5, #1
 800c2c8:	2d04      	cmp	r5, #4
 800c2ca:	d1e9      	bne.n	800c2a0 <E131Bridge::Print()+0x88>
 800c2cc:	f894 34fb 	ldrb.w	r3, [r4, #1275]	; 0x4fb
 800c2d0:	b113      	cbz	r3, 800c2d8 <E131Bridge::Print()+0xc0>
 800c2d2:	480d      	ldr	r0, [pc, #52]	; (800c308 <E131Bridge::Print()+0xf0>)
 800c2d4:	f7fc fcf2 	bl	8008cbc <printf>
 800c2d8:	b00c      	add	sp, #48	; 0x30
 800c2da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2de:	bf00      	nop
 800c2e0:	08016ce5 	stmdaeq	r1, {r0, r2, r5, r6, r7, sl, fp, sp, lr}
 800c2e4:	08016d74 	stmdaeq	r1, {r2, r4, r5, r6, r8, sl, fp, sp, lr}
 800c2e8:	08016ced 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, sl, fp, sp, lr}
 800c2ec:	08016d00 	stmdaeq	r1, {r8, sl, fp, sp, lr}
 800c2f0:	08016a7d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r9, fp, sp, lr}
 800c2f4:	08016a21 	stmdaeq	r1, {r0, r5, r9, fp, sp, lr}
 800c2f8:	08016a25 	stmdaeq	r1, {r0, r2, r5, r9, fp, sp, lr}
 800c2fc:	08016d10 	stmdaeq	r1, {r4, r8, sl, fp, sp, lr}
 800c300:	08016ab5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r9, fp, sp, lr}
 800c304:	08016d2f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r8, sl, fp, sp, lr}
 800c308:	08016d4e 	stmdaeq	r1, {r1, r2, r3, r6, r8, sl, fp, sp, lr}

0800c30c <uuid_unparse_x>:
 800c30c:	4603      	mov	r3, r0
 800c30e:	b530      	push	{r4, r5, lr}
 800c310:	4608      	mov	r0, r1
 800c312:	4611      	mov	r1, r2
 800c314:	681a      	ldr	r2, [r3, #0]
 800c316:	b08f      	sub	sp, #60	; 0x3c
 800c318:	ba12      	rev	r2, r2
 800c31a:	920a      	str	r2, [sp, #40]	; 0x28
 800c31c:	889a      	ldrh	r2, [r3, #4]
 800c31e:	891c      	ldrh	r4, [r3, #8]
 800c320:	ba52      	rev16	r2, r2
 800c322:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800c326:	88da      	ldrh	r2, [r3, #6]
 800c328:	ba64      	rev16	r4, r4
 800c32a:	ba52      	rev16	r2, r2
 800c32c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 800c330:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
 800c334:	f103 020a 	add.w	r2, r3, #10
 800c338:	f10d 0432 	add.w	r4, sp, #50	; 0x32
 800c33c:	3310      	adds	r3, #16
 800c33e:	4293      	cmp	r3, r2
 800c340:	d122      	bne.n	800c388 <uuid_unparse_x+0x7c>
 800c342:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800c346:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800c34a:	9208      	str	r2, [sp, #32]
 800c34c:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 800c350:	0a1b      	lsrs	r3, r3, #8
 800c352:	9207      	str	r2, [sp, #28]
 800c354:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800c358:	9301      	str	r3, [sp, #4]
 800c35a:	9206      	str	r2, [sp, #24]
 800c35c:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800c360:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800c364:	9205      	str	r2, [sp, #20]
 800c366:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800c36a:	9300      	str	r3, [sp, #0]
 800c36c:	9204      	str	r2, [sp, #16]
 800c36e:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800c372:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800c376:	9203      	str	r2, [sp, #12]
 800c378:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800c37c:	9202      	str	r2, [sp, #8]
 800c37e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c380:	f7fc fcac 	bl	8008cdc <sprintf>
 800c384:	b00f      	add	sp, #60	; 0x3c
 800c386:	bd30      	pop	{r4, r5, pc}
 800c388:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c38c:	f804 5b01 	strb.w	r5, [r4], #1
 800c390:	e7d5      	b.n	800c33e <uuid_unparse_x+0x32>
	...

0800c394 <uuid_unparse>:
 800c394:	4a01      	ldr	r2, [pc, #4]	; (800c39c <uuid_unparse+0x8>)
 800c396:	f7ff bfb9 	b.w	800c30c <uuid_unparse_x>
 800c39a:	bf00      	nop
 800c39c:	08016d76 	stmdaeq	r1, {r1, r2, r4, r5, r6, r8, sl, fp, sp, lr}

0800c3a0 <WS28xxDmx::GetDmxStartAddress()>:
 800c3a0:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
 800c3a2:	4770      	bx	lr

0800c3a4 <WS28xxDmx::GetDmxFootprint()>:
 800c3a4:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 800c3a6:	4770      	bx	lr

0800c3a8 <WS28xxDmx::~WS28xxDmx()>:
 800c3a8:	b538      	push	{r3, r4, r5, lr}
 800c3aa:	4b06      	ldr	r3, [pc, #24]	; (800c3c4 <WS28xxDmx::~WS28xxDmx()+0x1c>)
 800c3ac:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800c3ae:	4604      	mov	r4, r0
 800c3b0:	6003      	str	r3, [r0, #0]
 800c3b2:	b12d      	cbz	r5, 800c3c0 <WS28xxDmx::~WS28xxDmx()+0x18>
 800c3b4:	4628      	mov	r0, r5
 800c3b6:	f001 ff6b 	bl	800e290 <WS28xx::~WS28xx()>
 800c3ba:	4628      	mov	r0, r5
 800c3bc:	f008 f902 	bl	80145c4 <operator delete(void*)>
 800c3c0:	4620      	mov	r0, r4
 800c3c2:	bd38      	pop	{r3, r4, r5, pc}
 800c3c4:	08016db0 	stmdaeq	r1, {r4, r5, r7, r8, sl, fp, sp, lr}

0800c3c8 <WS28xxDmx::~WS28xxDmx()>:
 800c3c8:	b510      	push	{r4, lr}
 800c3ca:	4604      	mov	r4, r0
 800c3cc:	f7ff ffec 	bl	800c3a8 <WS28xxDmx::~WS28xxDmx()>
 800c3d0:	4620      	mov	r0, r4
 800c3d2:	f008 f8f7 	bl	80145c4 <operator delete(void*)>
 800c3d6:	4620      	mov	r0, r4
 800c3d8:	bd10      	pop	{r4, pc}

0800c3da <WS28xxDmx::Blackout(bool)>:
 800c3da:	b538      	push	{r3, r4, r5, lr}
 800c3dc:	4605      	mov	r5, r0
 800c3de:	460c      	mov	r4, r1
 800c3e0:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
 800c3e4:	f009 fa98 	bl	8015918 <gd32_spi_dma_tx_is_active()>
 800c3e8:	2800      	cmp	r0, #0
 800c3ea:	d1fb      	bne.n	800c3e4 <WS28xxDmx::Blackout(bool)+0xa>
 800c3ec:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800c3ee:	b11c      	cbz	r4, 800c3f8 <WS28xxDmx::Blackout(bool)+0x1e>
 800c3f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3f4:	f001 bfc6 	b.w	800e384 <WS28xx::Blackout()>
 800c3f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3fc:	f001 bfa6 	b.w	800e34c <WS28xx::Update()>

0800c400 <WS28xxDmx::Start(unsigned int)>:
 800c400:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800c404:	b93b      	cbnz	r3, 800c416 <WS28xxDmx::Start(unsigned int)+0x16>
 800c406:	2301      	movs	r3, #1
 800c408:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800c40c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800c40e:	b110      	cbz	r0, 800c416 <WS28xxDmx::Start(unsigned int)+0x16>
 800c410:	6803      	ldr	r3, [r0, #0]
 800c412:	689b      	ldr	r3, [r3, #8]
 800c414:	4718      	bx	r3
 800c416:	4770      	bx	lr

0800c418 <WS28xxDmx::SetDmxStartAddress(unsigned short)>:
 800c418:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
 800c41a:	b508      	push	{r3, lr}
 800c41c:	428a      	cmp	r2, r1
 800c41e:	d101      	bne.n	800c424 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xc>
 800c420:	2001      	movs	r0, #1
 800c422:	bd08      	pop	{r3, pc}
 800c424:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 800c426:	440a      	add	r2, r1
 800c428:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800c42c:	dc0b      	bgt.n	800c446 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x2e>
 800c42e:	1e4a      	subs	r2, r1, #1
 800c430:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800c434:	d207      	bcs.n	800c446 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x2e>
 800c436:	85c1      	strh	r1, [r0, #46]	; 0x2e
 800c438:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800c43a:	2800      	cmp	r0, #0
 800c43c:	d0f0      	beq.n	800c420 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x8>
 800c43e:	6803      	ldr	r3, [r0, #0]
 800c440:	69db      	ldr	r3, [r3, #28]
 800c442:	4798      	blx	r3
 800c444:	e7ec      	b.n	800c420 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x8>
 800c446:	2000      	movs	r0, #0
 800c448:	e7eb      	b.n	800c422 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xa>

0800c44a <WS28xxDmx::Stop(unsigned int)>:
 800c44a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800c44e:	b510      	push	{r4, lr}
 800c450:	4604      	mov	r4, r0
 800c452:	b16b      	cbz	r3, 800c470 <WS28xxDmx::Stop(unsigned int)+0x26>
 800c454:	2300      	movs	r3, #0
 800c456:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800c45a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800c45c:	b108      	cbz	r0, 800c462 <WS28xxDmx::Stop(unsigned int)+0x18>
 800c45e:	f001 ff91 	bl	800e384 <WS28xx::Blackout()>
 800c462:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800c464:	b120      	cbz	r0, 800c470 <WS28xxDmx::Stop(unsigned int)+0x26>
 800c466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c46a:	6803      	ldr	r3, [r0, #0]
 800c46c:	68db      	ldr	r3, [r3, #12]
 800c46e:	4718      	bx	r3
 800c470:	bd10      	pop	{r4, pc}

0800c472 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 800c472:	4603      	mov	r3, r0
 800c474:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 800c476:	4288      	cmp	r0, r1
 800c478:	f04f 0000 	mov.w	r0, #0
 800c47c:	d30f      	bcc.n	800c49e <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x2c>
 800c47e:	7090      	strb	r0, [r2, #2]
 800c480:	6a1b      	ldr	r3, [r3, #32]
 800c482:	fbb1 f0f3 	udiv	r0, r1, r3
 800c486:	fb03 1110 	mls	r1, r3, r0, r1
 800c48a:	2903      	cmp	r1, #3
 800c48c:	d80e      	bhi.n	800c4ac <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x3a>
 800c48e:	e8df f001 	tbb	[pc, r1]
 800c492:	0d0a0702 	stceq	7, cr0, [sl, #-8]
 800c496:	f240 2305 	movw	r3, #517	; 0x205
 800c49a:	2001      	movs	r0, #1
 800c49c:	8013      	strh	r3, [r2, #0]
 800c49e:	4770      	bx	lr
 800c4a0:	f240 2306 	movw	r3, #518	; 0x206
 800c4a4:	e7f9      	b.n	800c49a <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>
 800c4a6:	f240 2307 	movw	r3, #519	; 0x207
 800c4aa:	e7f6      	b.n	800c49a <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>
 800c4ac:	f240 2312 	movw	r3, #530	; 0x212
 800c4b0:	e7f3      	b.n	800c49a <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>

0800c4b2 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)>:
 800c4b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b6:	b085      	sub	sp, #20
 800c4b8:	4606      	mov	r6, r0
 800c4ba:	4690      	mov	r8, r2
 800c4bc:	4699      	mov	r9, r3
 800c4be:	9103      	str	r1, [sp, #12]
 800c4c0:	f009 fa2a 	bl	8015918 <gd32_spi_dma_tx_is_active()>
 800c4c4:	2800      	cmp	r0, #0
 800c4c6:	d170      	bne.n	800c5aa <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xf8>
 800c4c8:	9b03      	ldr	r3, [sp, #12]
 800c4ca:	6972      	ldr	r2, [r6, #20]
 800c4cc:	f003 0103 	and.w	r1, r3, #3
 800c4d0:	6a33      	ldr	r3, [r6, #32]
 800c4d2:	2902      	cmp	r1, #2
 800c4d4:	fbb9 f7f3 	udiv	r7, r9, r3
 800c4d8:	d02b      	beq.n	800c532 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x80>
 800c4da:	2903      	cmp	r1, #3
 800c4dc:	d030      	beq.n	800c540 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x8e>
 800c4de:	2901      	cmp	r1, #1
 800c4e0:	6875      	ldr	r5, [r6, #4]
 800c4e2:	d027      	beq.n	800c534 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x82>
 800c4e4:	4297      	cmp	r7, r2
 800c4e6:	bf28      	it	cs
 800c4e8:	4617      	movcs	r7, r2
 800c4ea:	4295      	cmp	r5, r2
 800c4ec:	d92a      	bls.n	800c544 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x92>
 800c4ee:	4605      	mov	r5, r0
 800c4f0:	8df4      	ldrh	r4, [r6, #46]	; 0x2e
 800c4f2:	3c01      	subs	r4, #1
 800c4f4:	2b03      	cmp	r3, #3
 800c4f6:	4444      	add	r4, r8
 800c4f8:	d12c      	bne.n	800c554 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xa2>
 800c4fa:	42af      	cmp	r7, r5
 800c4fc:	d948      	bls.n	800c590 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xde>
 800c4fe:	eba4 0308 	sub.w	r3, r4, r8
 800c502:	4599      	cmp	r9, r3
 800c504:	d944      	bls.n	800c590 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xde>
 800c506:	f04f 0a00 	mov.w	sl, #0
 800c50a:	69b3      	ldr	r3, [r6, #24]
 800c50c:	f894 f000 	pld	[r4]
 800c510:	fb03 fb05 	mul.w	fp, r3, r5
 800c514:	69b3      	ldr	r3, [r6, #24]
 800c516:	4553      	cmp	r3, sl
 800c518:	d917      	bls.n	800c54a <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x98>
 800c51a:	78a2      	ldrb	r2, [r4, #2]
 800c51c:	7863      	ldrb	r3, [r4, #1]
 800c51e:	9200      	str	r2, [sp, #0]
 800c520:	eb0b 010a 	add.w	r1, fp, sl
 800c524:	7822      	ldrb	r2, [r4, #0]
 800c526:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800c528:	f001 f8d0 	bl	800d6cc <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 800c52c:	f10a 0a01 	add.w	sl, sl, #1
 800c530:	e7f0      	b.n	800c514 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x62>
 800c532:	68b5      	ldr	r5, [r6, #8]
 800c534:	442f      	add	r7, r5
 800c536:	4297      	cmp	r7, r2
 800c538:	bf28      	it	cs
 800c53a:	4617      	movcs	r7, r2
 800c53c:	4604      	mov	r4, r0
 800c53e:	e7d9      	b.n	800c4f4 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x42>
 800c540:	68f5      	ldr	r5, [r6, #12]
 800c542:	e7f7      	b.n	800c534 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x82>
 800c544:	4605      	mov	r5, r0
 800c546:	4604      	mov	r4, r0
 800c548:	e7d4      	b.n	800c4f4 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x42>
 800c54a:	3501      	adds	r5, #1
 800c54c:	3403      	adds	r4, #3
 800c54e:	e7d4      	b.n	800c4fa <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x48>
 800c550:	3501      	adds	r5, #1
 800c552:	3404      	adds	r4, #4
 800c554:	42af      	cmp	r7, r5
 800c556:	d91b      	bls.n	800c590 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xde>
 800c558:	eba4 0308 	sub.w	r3, r4, r8
 800c55c:	4599      	cmp	r9, r3
 800c55e:	d917      	bls.n	800c590 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xde>
 800c560:	f04f 0a00 	mov.w	sl, #0
 800c564:	69b3      	ldr	r3, [r6, #24]
 800c566:	f894 f000 	pld	[r4]
 800c56a:	fb03 fb05 	mul.w	fp, r3, r5
 800c56e:	69b3      	ldr	r3, [r6, #24]
 800c570:	4553      	cmp	r3, sl
 800c572:	d9ed      	bls.n	800c550 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x9e>
 800c574:	78e2      	ldrb	r2, [r4, #3]
 800c576:	7863      	ldrb	r3, [r4, #1]
 800c578:	9201      	str	r2, [sp, #4]
 800c57a:	78a2      	ldrb	r2, [r4, #2]
 800c57c:	eb0b 010a 	add.w	r1, fp, sl
 800c580:	9200      	str	r2, [sp, #0]
 800c582:	7822      	ldrb	r2, [r4, #0]
 800c584:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800c586:	f001 fd6d 	bl	800e064 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 800c58a:	f10a 0a01 	add.w	sl, sl, #1
 800c58e:	e7ee      	b.n	800c56e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xbc>
 800c590:	6933      	ldr	r3, [r6, #16]
 800c592:	9a03      	ldr	r2, [sp, #12]
 800c594:	429a      	cmp	r2, r3
 800c596:	d108      	bne.n	800c5aa <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xf8>
 800c598:	f896 3041 	ldrb.w	r3, [r6, #65]	; 0x41
 800c59c:	b92b      	cbnz	r3, 800c5aa <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xf8>
 800c59e:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800c5a0:	b005      	add	sp, #20
 800c5a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5a6:	f001 bed1 	b.w	800e34c <WS28xx::Update()>
 800c5aa:	b005      	add	sp, #20
 800c5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c5b0 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>:
 800c5b0:	22ff      	movs	r2, #255	; 0xff
 800c5b2:	4b1d      	ldr	r3, [pc, #116]	; (800c628 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x78>)
 800c5b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c5b6:	6003      	str	r3, [r0, #0]
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	460d      	mov	r5, r1
 800c5bc:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 800c5c0:	2101      	movs	r1, #1
 800c5c2:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 800c5c6:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
 800c5ca:	8483      	strh	r3, [r0, #36]	; 0x24
 800c5cc:	6283      	str	r3, [r0, #40]	; 0x28
 800c5ce:	63c3      	str	r3, [r0, #60]	; 0x3c
 800c5d0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 800c5d4:	4b15      	ldr	r3, [pc, #84]	; (800c62c <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x7c>)
 800c5d6:	85c1      	strh	r1, [r0, #46]	; 0x2e
 800c5d8:	6018      	str	r0, [r3, #0]
 800c5da:	f100 031c 	add.w	r3, r0, #28
 800c5de:	8602      	strh	r2, [r0, #48]	; 0x30
 800c5e0:	9301      	str	r3, [sp, #4]
 800c5e2:	f100 0314 	add.w	r3, r0, #20
 800c5e6:	4604      	mov	r4, r0
 800c5e8:	f100 0220 	add.w	r2, r0, #32
 800c5ec:	9300      	str	r3, [sp, #0]
 800c5ee:	1d03      	adds	r3, r0, #4
 800c5f0:	4628      	mov	r0, r5
 800c5f2:	f000 fbdb 	bl	800cdac <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)>
 800c5f6:	201c      	movs	r0, #28
 800c5f8:	f007 ffe8 	bl	80145cc <operator new(unsigned int)>
 800c5fc:	4606      	mov	r6, r0
 800c5fe:	4629      	mov	r1, r5
 800c600:	f001 fe64 	bl	800e2cc <WS28xx::WS28xx(PixelConfiguration&)>
 800c604:	4630      	mov	r0, r6
 800c606:	6366      	str	r6, [r4, #52]	; 0x34
 800c608:	f001 febc 	bl	800e384 <WS28xx::Blackout()>
 800c60c:	69ab      	ldr	r3, [r5, #24]
 800c60e:	6a22      	ldr	r2, [r4, #32]
 800c610:	61a3      	str	r3, [r4, #24]
 800c612:	8bab      	ldrh	r3, [r5, #28]
 800c614:	4628      	mov	r0, r5
 800c616:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800c618:	6963      	ldr	r3, [r4, #20]
 800c61a:	4353      	muls	r3, r2
 800c61c:	8623      	strh	r3, [r4, #48]	; 0x30
 800c61e:	f000 fc1f 	bl	800ce60 <PixelDmxConfiguration::Dump()>
 800c622:	4620      	mov	r0, r4
 800c624:	b002      	add	sp, #8
 800c626:	bd70      	pop	{r4, r5, r6, pc}
 800c628:	08016db0 	stmdaeq	r1, {r4, r5, r7, r8, sl, fp, sp, lr}
 800c62c:	20001918 	andcs	r1, r0, r8, lsl r9

0800c630 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 800c630:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c632:	88c5      	ldrh	r5, [r0, #6]
 800c634:	8886      	ldrh	r6, [r0, #4]
 800c636:	42b5      	cmp	r5, r6
 800c638:	d216      	bcs.n	800c668 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 800c63a:	4604      	mov	r4, r0
 800c63c:	6800      	ldr	r0, [r0, #0]
 800c63e:	4428      	add	r0, r5
 800c640:	1b75      	subs	r5, r6, r5
 800c642:	7a26      	ldrb	r6, [r4, #8]
 800c644:	b923      	cbnz	r3, 800c650 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 800c646:	b926      	cbnz	r6, 800c652 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 800c648:	9200      	str	r2, [sp, #0]
 800c64a:	460b      	mov	r3, r1
 800c64c:	4a09      	ldr	r2, [pc, #36]	; (800c674 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 800c64e:	e003      	b.n	800c658 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800c650:	b166      	cbz	r6, 800c66c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 800c652:	460b      	mov	r3, r1
 800c654:	9200      	str	r2, [sp, #0]
 800c656:	4a08      	ldr	r2, [pc, #32]	; (800c678 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 800c658:	4629      	mov	r1, r5
 800c65a:	f7fc fb57 	bl	8008d0c <snprintf>
 800c65e:	4285      	cmp	r5, r0
 800c660:	bfa2      	ittt	ge
 800c662:	88e3      	ldrhge	r3, [r4, #6]
 800c664:	181b      	addge	r3, r3, r0
 800c666:	80e3      	strhge	r3, [r4, #6]
 800c668:	b002      	add	sp, #8
 800c66a:	bd70      	pop	{r4, r5, r6, pc}
 800c66c:	9200      	str	r2, [sp, #0]
 800c66e:	460b      	mov	r3, r1
 800c670:	4a02      	ldr	r2, [pc, #8]	; (800c67c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 800c672:	e7f1      	b.n	800c658 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800c674:	08016af9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, sp, lr}
 800c678:	08016af0 	stmdaeq	r1, {r4, r5, r6, r7, r9, fp, sp, lr}
 800c67c:	08016afa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r9, fp, sp, lr}

0800c680 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>:
 800c680:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c682:	88c5      	ldrh	r5, [r0, #6]
 800c684:	8886      	ldrh	r6, [r0, #4]
 800c686:	42b5      	cmp	r5, r6
 800c688:	d216      	bcs.n	800c6b8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x38>
 800c68a:	4604      	mov	r4, r0
 800c68c:	6800      	ldr	r0, [r0, #0]
 800c68e:	4428      	add	r0, r5
 800c690:	1b75      	subs	r5, r6, r5
 800c692:	7a26      	ldrb	r6, [r4, #8]
 800c694:	b923      	cbnz	r3, 800c6a0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x20>
 800c696:	b926      	cbnz	r6, 800c6a2 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x22>
 800c698:	9200      	str	r2, [sp, #0]
 800c69a:	460b      	mov	r3, r1
 800c69c:	4a09      	ldr	r2, [pc, #36]	; (800c6c4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x44>)
 800c69e:	e003      	b.n	800c6a8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800c6a0:	b166      	cbz	r6, 800c6bc <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x3c>
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	9200      	str	r2, [sp, #0]
 800c6a6:	4a08      	ldr	r2, [pc, #32]	; (800c6c8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x48>)
 800c6a8:	4629      	mov	r1, r5
 800c6aa:	f7fc fb2f 	bl	8008d0c <snprintf>
 800c6ae:	4285      	cmp	r5, r0
 800c6b0:	bfa2      	ittt	ge
 800c6b2:	88e3      	ldrhge	r3, [r4, #6]
 800c6b4:	181b      	addge	r3, r3, r0
 800c6b6:	80e3      	strhge	r3, [r4, #6]
 800c6b8:	b002      	add	sp, #8
 800c6ba:	bd70      	pop	{r4, r5, r6, pc}
 800c6bc:	9200      	str	r2, [sp, #0]
 800c6be:	460b      	mov	r3, r1
 800c6c0:	4a02      	ldr	r2, [pc, #8]	; (800c6cc <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x4c>)
 800c6c2:	e7f1      	b.n	800c6a8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800c6c4:	08016af9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, sp, lr}
 800c6c8:	08016af0 	stmdaeq	r1, {r4, r5, r6, r7, r9, fp, sp, lr}
 800c6cc:	08016afa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r9, fp, sp, lr}

0800c6d0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800c6d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c6d2:	88c5      	ldrh	r5, [r0, #6]
 800c6d4:	8886      	ldrh	r6, [r0, #4]
 800c6d6:	42b5      	cmp	r5, r6
 800c6d8:	d216      	bcs.n	800c708 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800c6da:	4604      	mov	r4, r0
 800c6dc:	6800      	ldr	r0, [r0, #0]
 800c6de:	4428      	add	r0, r5
 800c6e0:	1b75      	subs	r5, r6, r5
 800c6e2:	7a26      	ldrb	r6, [r4, #8]
 800c6e4:	b923      	cbnz	r3, 800c6f0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800c6e6:	b926      	cbnz	r6, 800c6f2 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800c6e8:	9200      	str	r2, [sp, #0]
 800c6ea:	460b      	mov	r3, r1
 800c6ec:	4a09      	ldr	r2, [pc, #36]	; (800c714 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800c6ee:	e003      	b.n	800c6f8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800c6f0:	b166      	cbz	r6, 800c70c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800c6f2:	460b      	mov	r3, r1
 800c6f4:	9200      	str	r2, [sp, #0]
 800c6f6:	4a08      	ldr	r2, [pc, #32]	; (800c718 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800c6f8:	4629      	mov	r1, r5
 800c6fa:	f7fc fb07 	bl	8008d0c <snprintf>
 800c6fe:	4285      	cmp	r5, r0
 800c700:	bfa2      	ittt	ge
 800c702:	88e3      	ldrhge	r3, [r4, #6]
 800c704:	181b      	addge	r3, r3, r0
 800c706:	80e3      	strhge	r3, [r4, #6]
 800c708:	b002      	add	sp, #8
 800c70a:	bd70      	pop	{r4, r5, r6, pc}
 800c70c:	9200      	str	r2, [sp, #0]
 800c70e:	460b      	mov	r3, r1
 800c710:	4a02      	ldr	r2, [pc, #8]	; (800c71c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800c712:	e7f1      	b.n	800c6f8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800c714:	08016b0c 	stmdaeq	r1, {r2, r3, r8, r9, fp, sp, lr}
 800c718:	08016b01 	stmdaeq	r1, {r0, r8, r9, fp, sp, lr}
 800c71c:	08016b0d 	stmdaeq	r1, {r0, r2, r3, r8, r9, fp, sp, lr}

0800c720 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>:
 800c720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c724:	4699      	mov	r9, r3
 800c726:	8885      	ldrh	r5, [r0, #4]
 800c728:	88c3      	ldrh	r3, [r0, #6]
 800c72a:	4604      	mov	r4, r0
 800c72c:	42ab      	cmp	r3, r5
 800c72e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800c732:	d227      	bcs.n	800c784 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x64>
 800c734:	6826      	ldr	r6, [r4, #0]
 800c736:	4610      	mov	r0, r2
 800c738:	460f      	mov	r7, r1
 800c73a:	f894 a008 	ldrb.w	sl, [r4, #8]
 800c73e:	441e      	add	r6, r3
 800c740:	1aed      	subs	r5, r5, r3
 800c742:	f7fb f9e7 	bl	8007b14 <__aeabi_f2d>
 800c746:	f1b9 0f00 	cmp.w	r9, #0
 800c74a:	d109      	bne.n	800c760 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x40>
 800c74c:	f1ba 0f00 	cmp.w	sl, #0
 800c750:	d109      	bne.n	800c766 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x46>
 800c752:	463b      	mov	r3, r7
 800c754:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c758:	4a0f      	ldr	r2, [pc, #60]	; (800c798 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x78>)
 800c75a:	f8cd 8000 	str.w	r8, [sp]
 800c75e:	e008      	b.n	800c772 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x52>
 800c760:	f1ba 0f00 	cmp.w	sl, #0
 800c764:	d011      	beq.n	800c78a <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x6a>
 800c766:	463b      	mov	r3, r7
 800c768:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c76c:	4a0b      	ldr	r2, [pc, #44]	; (800c79c <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x7c>)
 800c76e:	f8cd 8000 	str.w	r8, [sp]
 800c772:	4629      	mov	r1, r5
 800c774:	4630      	mov	r0, r6
 800c776:	f7fc fac9 	bl	8008d0c <snprintf>
 800c77a:	4285      	cmp	r5, r0
 800c77c:	bfa2      	ittt	ge
 800c77e:	88e3      	ldrhge	r3, [r4, #6]
 800c780:	181b      	addge	r3, r3, r0
 800c782:	80e3      	strhge	r3, [r4, #6]
 800c784:	b004      	add	sp, #16
 800c786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c78a:	463b      	mov	r3, r7
 800c78c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c790:	4a03      	ldr	r2, [pc, #12]	; (800c7a0 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x80>)
 800c792:	f8cd 8000 	str.w	r8, [sp]
 800c796:	e7ec      	b.n	800c772 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x52>
 800c798:	08016de7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r8, sl, fp, sp, lr}
 800c79c:	08016ddc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, sl, fp, sp, lr}
 800c7a0:	08016de8 	stmdaeq	r1, {r3, r5, r6, r7, r8, sl, fp, sp, lr}

0800c7a4 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>:
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	4a1c      	ldr	r2, [pc, #112]	; (800c818 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x74>)
 800c7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7aa:	e9c0 3201 	strd	r3, r2, [r0, #4]
 800c7ae:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800c7b2:	81c2      	strh	r2, [r0, #14]
 800c7b4:	223d      	movs	r2, #61	; 0x3d
 800c7b6:	8202      	strh	r2, [r0, #16]
 800c7b8:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c7bc:	8242      	strh	r2, [r0, #18]
 800c7be:	2206      	movs	r2, #6
 800c7c0:	2601      	movs	r6, #1
 800c7c2:	75c2      	strb	r2, [r0, #23]
 800c7c4:	f647 7cf0 	movw	ip, #32752	; 0x7ff0
 800c7c8:	461a      	mov	r2, r3
 800c7ca:	6001      	str	r1, [r0, #0]
 800c7cc:	7303      	strb	r3, [r0, #12]
 800c7ce:	7546      	strb	r6, [r0, #21]
 800c7d0:	7583      	strb	r3, [r0, #22]
 800c7d2:	8303      	strh	r3, [r0, #24]
 800c7d4:	f100 011a 	add.w	r1, r0, #26
 800c7d8:	f821 6b02 	strh.w	r6, [r1], #2
 800c7dc:	b1aa      	cbz	r2, 800c80a <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x66>
 800c7de:	f831 3c04 	ldrh.w	r3, [r1, #-4]
 800c7e2:	1d1c      	adds	r4, r3, #4
 800c7e4:	3307      	adds	r3, #7
 800c7e6:	b2a5      	uxth	r5, r4
 800c7e8:	b29f      	uxth	r7, r3
 800c7ea:	f404 44fe 	and.w	r4, r4, #32512	; 0x7f00
 800c7ee:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800c7f2:	429c      	cmp	r4, r3
 800c7f4:	d105      	bne.n	800c802 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x5e>
 800c7f6:	f005 03f0 	and.w	r3, r5, #240	; 0xf0
 800c7fa:	f007 04f0 	and.w	r4, r7, #240	; 0xf0
 800c7fe:	42a3      	cmp	r3, r4
 800c800:	d001      	beq.n	800c806 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x62>
 800c802:	ea07 050c 	and.w	r5, r7, ip
 800c806:	f821 5c02 	strh.w	r5, [r1, #-2]
 800c80a:	3201      	adds	r2, #1
 800c80c:	2a08      	cmp	r2, #8
 800c80e:	d1e3      	bne.n	800c7d8 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x34>
 800c810:	2300      	movs	r3, #0
 800c812:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
 800c816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c818:	0100aa03 	tsteq	r0, r3, lsl #20

0800c81c <WS28xxDmxParams::Load()>:
 800c81c:	b508      	push	{r3, lr}
 800c81e:	2300      	movs	r3, #0
 800c820:	4601      	mov	r1, r0
 800c822:	6043      	str	r3, [r0, #4]
 800c824:	6800      	ldr	r0, [r0, #0]
 800c826:	b120      	cbz	r0, 800c832 <WS28xxDmxParams::Load()+0x16>
 800c828:	6803      	ldr	r3, [r0, #0]
 800c82a:	3104      	adds	r1, #4
 800c82c:	68db      	ldr	r3, [r3, #12]
 800c82e:	4798      	blx	r3
 800c830:	2001      	movs	r0, #1
 800c832:	bd08      	pop	{r3, pc}

0800c834 <WS28xxDmxParams::Load(char const*, unsigned int)>:
 800c834:	6803      	ldr	r3, [r0, #0]
 800c836:	b1d3      	cbz	r3, 800c86e <WS28xxDmxParams::Load(char const*, unsigned int)+0x3a>
 800c838:	2300      	movs	r3, #0
 800c83a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c83c:	460d      	mov	r5, r1
 800c83e:	4616      	mov	r6, r2
 800c840:	4604      	mov	r4, r0
 800c842:	6043      	str	r3, [r0, #4]
 800c844:	4602      	mov	r2, r0
 800c846:	490a      	ldr	r1, [pc, #40]	; (800c870 <WS28xxDmxParams::Load(char const*, unsigned int)+0x3c>)
 800c848:	4668      	mov	r0, sp
 800c84a:	f007 f8df 	bl	8013a0c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800c84e:	4632      	mov	r2, r6
 800c850:	4629      	mov	r1, r5
 800c852:	4668      	mov	r0, sp
 800c854:	f007 f8de 	bl	8013a14 <ReadConfigFile::Read(char const*, unsigned int)>
 800c858:	4621      	mov	r1, r4
 800c85a:	f851 0b04 	ldr.w	r0, [r1], #4
 800c85e:	6803      	ldr	r3, [r0, #0]
 800c860:	689b      	ldr	r3, [r3, #8]
 800c862:	4798      	blx	r3
 800c864:	4668      	mov	r0, sp
 800c866:	f007 f8d4 	bl	8013a12 <ReadConfigFile::~ReadConfigFile()>
 800c86a:	b002      	add	sp, #8
 800c86c:	bd70      	pop	{r4, r5, r6, pc}
 800c86e:	4770      	bx	lr
 800c870:	0800cab1 	stmdaeq	r0, {r0, r4, r5, r7, r9, fp, lr, pc}

0800c874 <WS28xxDmxParams::callbackFunction(char const*)>:
 800c874:	b530      	push	{r4, r5, lr}
 800c876:	2308      	movs	r3, #8
 800c878:	460d      	mov	r5, r1
 800c87a:	b089      	sub	sp, #36	; 0x24
 800c87c:	4604      	mov	r4, r0
 800c87e:	9302      	str	r3, [sp, #8]
 800c880:	4628      	mov	r0, r5
 800c882:	497f      	ldr	r1, [pc, #508]	; (800ca80 <WS28xxDmxParams::callbackFunction(char const*)+0x20c>)
 800c884:	446b      	add	r3, sp
 800c886:	aa04      	add	r2, sp, #16
 800c888:	f007 f8f8 	bl	8013a7c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800c88c:	b9a0      	cbnz	r0, 800c8b8 <WS28xxDmxParams::callbackFunction(char const*)+0x44>
 800c88e:	9b02      	ldr	r3, [sp, #8]
 800c890:	3320      	adds	r3, #32
 800c892:	446b      	add	r3, sp
 800c894:	f803 0c10 	strb.w	r0, [r3, #-16]
 800c898:	a804      	add	r0, sp, #16
 800c89a:	f000 fe03 	bl	800d4a4 <PixelType::GetType(char const*)>
 800c89e:	280e      	cmp	r0, #14
 800c8a0:	bf08      	it	eq
 800c8a2:	2203      	moveq	r2, #3
 800c8a4:	6863      	ldr	r3, [r4, #4]
 800c8a6:	bf19      	ittee	ne
 800c8a8:	7220      	strbne	r0, [r4, #8]
 800c8aa:	f043 0301 	orrne.w	r3, r3, #1
 800c8ae:	7222      	strbeq	r2, [r4, #8]
 800c8b0:	f023 0301 	biceq.w	r3, r3, #1
 800c8b4:	6063      	str	r3, [r4, #4]
 800c8b6:	e033      	b.n	800c920 <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800c8b8:	4628      	mov	r0, r5
 800c8ba:	4972      	ldr	r1, [pc, #456]	; (800ca84 <WS28xxDmxParams::callbackFunction(char const*)+0x210>)
 800c8bc:	f10d 0202 	add.w	r2, sp, #2
 800c8c0:	f007 f9c3 	bl	8013c4a <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800c8c4:	b990      	cbnz	r0, 800c8ec <WS28xxDmxParams::callbackFunction(char const*)+0x78>
 800c8c6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800c8ca:	6863      	ldr	r3, [r4, #4]
 800c8cc:	1e51      	subs	r1, r2, #1
 800c8ce:	f5b1 7f2a 	cmp.w	r1, #680	; 0x2a8
 800c8d2:	bf2d      	iteet	cs
 800c8d4:	f06f 0255 	mvncs.w	r2, #85	; 0x55
 800c8d8:	f8a4 2009 	strhcc.w	r2, [r4, #9]
 800c8dc:	f043 0302 	orrcc.w	r3, r3, #2
 800c8e0:	7262      	strbcs	r2, [r4, #9]
 800c8e2:	bf24      	itt	cs
 800c8e4:	72a0      	strbcs	r0, [r4, #10]
 800c8e6:	f023 0302 	biccs.w	r3, r3, #2
 800c8ea:	e7e3      	b.n	800c8b4 <WS28xxDmxParams::callbackFunction(char const*)+0x40>
 800c8ec:	2303      	movs	r3, #3
 800c8ee:	4628      	mov	r0, r5
 800c8f0:	9302      	str	r3, [sp, #8]
 800c8f2:	4965      	ldr	r1, [pc, #404]	; (800ca88 <WS28xxDmxParams::callbackFunction(char const*)+0x214>)
 800c8f4:	ab02      	add	r3, sp, #8
 800c8f6:	aa04      	add	r2, sp, #16
 800c8f8:	f007 f8c0 	bl	8013a7c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800c8fc:	b990      	cbnz	r0, 800c924 <WS28xxDmxParams::callbackFunction(char const*)+0xb0>
 800c8fe:	9b02      	ldr	r3, [sp, #8]
 800c900:	3320      	adds	r3, #32
 800c902:	446b      	add	r3, sp
 800c904:	f803 0c10 	strb.w	r0, [r3, #-16]
 800c908:	a804      	add	r0, sp, #16
 800c90a:	f000 fdef 	bl	800d4ec <PixelType::GetMap(char const*)>
 800c90e:	6863      	ldr	r3, [r4, #4]
 800c910:	2806      	cmp	r0, #6
 800c912:	bf14      	ite	ne
 800c914:	f443 7300 	orrne.w	r3, r3, #512	; 0x200
 800c918:	f423 7300 	biceq.w	r3, r3, #512	; 0x200
 800c91c:	6063      	str	r3, [r4, #4]
 800c91e:	75e0      	strb	r0, [r4, #23]
 800c920:	b009      	add	sp, #36	; 0x24
 800c922:	bd30      	pop	{r4, r5, pc}
 800c924:	4628      	mov	r0, r5
 800c926:	4959      	ldr	r1, [pc, #356]	; (800ca8c <WS28xxDmxParams::callbackFunction(char const*)+0x218>)
 800c928:	aa01      	add	r2, sp, #4
 800c92a:	f007 f8c0 	bl	8013aae <Sscan::Float(char const*, char const*, float&)>
 800c92e:	b960      	cbnz	r0, 800c94a <WS28xxDmxParams::callbackFunction(char const*)+0xd6>
 800c930:	9801      	ldr	r0, [sp, #4]
 800c932:	f000 fe3d 	bl	800d5b0 <PixelType::ConvertTxH(float)>
 800c936:	6863      	ldr	r3, [r4, #4]
 800c938:	b120      	cbz	r0, 800c944 <WS28xxDmxParams::callbackFunction(char const*)+0xd0>
 800c93a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c93e:	6063      	str	r3, [r4, #4]
 800c940:	7620      	strb	r0, [r4, #24]
 800c942:	e7ed      	b.n	800c920 <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800c944:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c948:	e7f9      	b.n	800c93e <WS28xxDmxParams::callbackFunction(char const*)+0xca>
 800c94a:	4628      	mov	r0, r5
 800c94c:	4950      	ldr	r1, [pc, #320]	; (800ca90 <WS28xxDmxParams::callbackFunction(char const*)+0x21c>)
 800c94e:	aa01      	add	r2, sp, #4
 800c950:	f007 f8ad 	bl	8013aae <Sscan::Float(char const*, char const*, float&)>
 800c954:	b960      	cbnz	r0, 800c970 <WS28xxDmxParams::callbackFunction(char const*)+0xfc>
 800c956:	9801      	ldr	r0, [sp, #4]
 800c958:	f000 fe2a 	bl	800d5b0 <PixelType::ConvertTxH(float)>
 800c95c:	6863      	ldr	r3, [r4, #4]
 800c95e:	b120      	cbz	r0, 800c96a <WS28xxDmxParams::callbackFunction(char const*)+0xf6>
 800c960:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c964:	6063      	str	r3, [r4, #4]
 800c966:	7660      	strb	r0, [r4, #25]
 800c968:	e7da      	b.n	800c920 <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800c96a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c96e:	e7f9      	b.n	800c964 <WS28xxDmxParams::callbackFunction(char const*)+0xf0>
 800c970:	4628      	mov	r0, r5
 800c972:	4948      	ldr	r1, [pc, #288]	; (800ca94 <WS28xxDmxParams::callbackFunction(char const*)+0x220>)
 800c974:	f10d 0202 	add.w	r2, sp, #2
 800c978:	f007 f967 	bl	8013c4a <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800c97c:	b998      	cbnz	r0, 800c9a6 <WS28xxDmxParams::callbackFunction(char const*)+0x132>
 800c97e:	f240 25a6 	movw	r5, #678	; 0x2a6
 800c982:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800c986:	6863      	ldr	r3, [r4, #4]
 800c988:	1e8a      	subs	r2, r1, #2
 800c98a:	b292      	uxth	r2, r2
 800c98c:	42aa      	cmp	r2, r5
 800c98e:	bf81      	itttt	hi
 800c990:	2201      	movhi	r2, #1
 800c992:	75a0      	strbhi	r0, [r4, #22]
 800c994:	7562      	strbhi	r2, [r4, #21]
 800c996:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 800c99a:	bf9c      	itt	ls
 800c99c:	f8a4 1015 	strhls.w	r1, [r4, #21]
 800c9a0:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 800c9a4:	e786      	b.n	800c8b4 <WS28xxDmxParams::callbackFunction(char const*)+0x40>
 800c9a6:	4628      	mov	r0, r5
 800c9a8:	493b      	ldr	r1, [pc, #236]	; (800ca98 <WS28xxDmxParams::callbackFunction(char const*)+0x224>)
 800c9aa:	aa03      	add	r2, sp, #12
 800c9ac:	f007 f96b 	bl	8013c86 <Sscan::Uint32(char const*, char const*, unsigned int&)>
 800c9b0:	b960      	cbnz	r0, 800c9cc <WS28xxDmxParams::callbackFunction(char const*)+0x158>
 800c9b2:	9a03      	ldr	r2, [sp, #12]
 800c9b4:	4939      	ldr	r1, [pc, #228]	; (800ca9c <WS28xxDmxParams::callbackFunction(char const*)+0x228>)
 800c9b6:	6863      	ldr	r3, [r4, #4]
 800c9b8:	428a      	cmp	r2, r1
 800c9ba:	bf14      	ite	ne
 800c9bc:	f043 0310 	orrne.w	r3, r3, #16
 800c9c0:	f023 0310 	biceq.w	r3, r3, #16
 800c9c4:	6063      	str	r3, [r4, #4]
 800c9c6:	f8c4 200e 	str.w	r2, [r4, #14]
 800c9ca:	e7a9      	b.n	800c920 <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800c9cc:	4628      	mov	r0, r5
 800c9ce:	4934      	ldr	r1, [pc, #208]	; (800caa0 <WS28xxDmxParams::callbackFunction(char const*)+0x22c>)
 800c9d0:	f10d 0201 	add.w	r2, sp, #1
 800c9d4:	f007 f980 	bl	8013cd8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800c9d8:	b988      	cbnz	r0, 800c9fe <WS28xxDmxParams::callbackFunction(char const*)+0x18a>
 800c9da:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800c9de:	6863      	ldr	r3, [r4, #4]
 800c9e0:	1e4a      	subs	r2, r1, #1
 800c9e2:	b2d2      	uxtb	r2, r2
 800c9e4:	2afd      	cmp	r2, #253	; 0xfd
 800c9e6:	bf83      	ittte	hi
 800c9e8:	f023 0320 	bichi.w	r3, r3, #32
 800c9ec:	6063      	strhi	r3, [r4, #4]
 800c9ee:	23ff      	movhi	r3, #255	; 0xff
 800c9f0:	f043 0320 	orrls.w	r3, r3, #32
 800c9f4:	bf9a      	itte	ls
 800c9f6:	6063      	strls	r3, [r4, #4]
 800c9f8:	74a1      	strbls	r1, [r4, #18]
 800c9fa:	74a3      	strbhi	r3, [r4, #18]
 800c9fc:	e790      	b.n	800c920 <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800c9fe:	4628      	mov	r0, r5
 800ca00:	4928      	ldr	r1, [pc, #160]	; (800caa4 <WS28xxDmxParams::callbackFunction(char const*)+0x230>)
 800ca02:	f10d 0202 	add.w	r2, sp, #2
 800ca06:	f007 f920 	bl	8013c4a <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800ca0a:	b990      	cbnz	r0, 800ca32 <WS28xxDmxParams::callbackFunction(char const*)+0x1be>
 800ca0c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ca10:	6863      	ldr	r3, [r4, #4]
 800ca12:	1e91      	subs	r1, r2, #2
 800ca14:	f5b1 7fff 	cmp.w	r1, #510	; 0x1fe
 800ca18:	bf83      	ittte	hi
 800ca1a:	2201      	movhi	r2, #1
 800ca1c:	72e2      	strbhi	r2, [r4, #11]
 800ca1e:	2200      	movhi	r2, #0
 800ca20:	f8a4 200b 	strhls.w	r2, [r4, #11]
 800ca24:	bf92      	itee	ls
 800ca26:	f043 0304 	orrls.w	r3, r3, #4
 800ca2a:	7322      	strbhi	r2, [r4, #12]
 800ca2c:	f023 0304 	bichi.w	r3, r3, #4
 800ca30:	e740      	b.n	800c8b4 <WS28xxDmxParams::callbackFunction(char const*)+0x40>
 800ca32:	4628      	mov	r0, r5
 800ca34:	491c      	ldr	r1, [pc, #112]	; (800caa8 <WS28xxDmxParams::callbackFunction(char const*)+0x234>)
 800ca36:	f10d 0202 	add.w	r2, sp, #2
 800ca3a:	f007 f906 	bl	8013c4a <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800ca3e:	b930      	cbnz	r0, 800ca4e <WS28xxDmxParams::callbackFunction(char const*)+0x1da>
 800ca40:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800ca44:	8363      	strh	r3, [r4, #26]
 800ca46:	6863      	ldr	r3, [r4, #4]
 800ca48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ca4c:	6063      	str	r3, [r4, #4]
 800ca4e:	4628      	mov	r0, r5
 800ca50:	4916      	ldr	r1, [pc, #88]	; (800caac <WS28xxDmxParams::callbackFunction(char const*)+0x238>)
 800ca52:	f10d 0201 	add.w	r2, sp, #1
 800ca56:	f007 f93f 	bl	8013cd8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ca5a:	2800      	cmp	r0, #0
 800ca5c:	f47f af60 	bne.w	800c920 <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800ca60:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ca64:	6863      	ldr	r3, [r4, #4]
 800ca66:	1e51      	subs	r1, r2, #1
 800ca68:	2904      	cmp	r1, #4
 800ca6a:	bf99      	ittee	ls
 800ca6c:	f884 202a 	strbls.w	r2, [r4, #42]	; 0x2a
 800ca70:	f443 1380 	orrls.w	r3, r3, #1048576	; 0x100000
 800ca74:	f884 002a 	strbhi.w	r0, [r4, #42]	; 0x2a
 800ca78:	f423 1380 	bichi.w	r3, r3, #1048576	; 0x100000
 800ca7c:	e71a      	b.n	800c8b4 <WS28xxDmxParams::callbackFunction(char const*)+0x40>
 800ca7e:	bf00      	nop
 800ca80:	0801857c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, sl, pc}
 800ca84:	08018585 	stmdaeq	r1, {r0, r2, r7, r8, sl, pc}
 800ca88:	0801856c 	stmdaeq	r1, {r2, r3, r5, r6, r8, sl, pc}
 800ca8c:	0801858f 	stmdaeq	r1, {r0, r1, r2, r3, r7, r8, sl, pc}
 800ca90:	08018597 	stmdaeq	r1, {r0, r1, r2, r4, r7, r8, sl, pc}
 800ca94:	0801854a 	stmdaeq	r1, {r1, r3, r6, r8, sl, pc}
 800ca98:	0801853b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r8, sl, pc}
 800ca9c:	003d0900 	eorseq	r0, sp, r0, lsl #18
 800caa0:	0801855a 	stmdaeq	r1, {r1, r3, r4, r6, r8, sl, pc}
 800caa4:	0801871f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r8, r9, sl, pc}
 800caa8:	08018647 	stmdaeq	r1, {r0, r1, r2, r6, r9, sl, pc}
 800caac:	080185fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r8, sl, pc}

0800cab0 <WS28xxDmxParams::staticCallbackFunction(void*, char const*)>:
 800cab0:	f7ff bee0 	b.w	800c874 <WS28xxDmxParams::callbackFunction(char const*)>

0800cab4 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)>:
 800cab4:	b570      	push	{r4, r5, r6, lr}
 800cab6:	4604      	mov	r4, r0
 800cab8:	4615      	mov	r5, r2
 800caba:	461e      	mov	r6, r3
 800cabc:	b086      	sub	sp, #24
 800cabe:	3004      	adds	r0, #4
 800cac0:	2900      	cmp	r1, #0
 800cac2:	f000 808e 	beq.w	800cbe2 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x12e>
 800cac6:	2227      	movs	r2, #39	; 0x27
 800cac8:	f007 fe3f 	bl	801474a <memmove>
 800cacc:	4633      	mov	r3, r6
 800cace:	462a      	mov	r2, r5
 800cad0:	4974      	ldr	r1, [pc, #464]	; (800cca4 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1f0>)
 800cad2:	a803      	add	r0, sp, #12
 800cad4:	f006 feca 	bl	801386c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800cad8:	7a20      	ldrb	r0, [r4, #8]
 800cada:	f000 fcd7 	bl	800d48c <PixelType::GetType(pixel::Type)>
 800cade:	6863      	ldr	r3, [r4, #4]
 800cae0:	4602      	mov	r2, r0
 800cae2:	4971      	ldr	r1, [pc, #452]	; (800cca8 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1f4>)
 800cae4:	f003 0301 	and.w	r3, r3, #1
 800cae8:	a803      	add	r0, sp, #12
 800caea:	f7ff fdf1 	bl	800c6d0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800caee:	6863      	ldr	r3, [r4, #4]
 800caf0:	f8b4 2009 	ldrh.w	r2, [r4, #9]
 800caf4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800caf8:	496c      	ldr	r1, [pc, #432]	; (800ccac <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1f8>)
 800cafa:	a803      	add	r0, sp, #12
 800cafc:	f7ff fdc0 	bl	800c680 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800cb00:	496b      	ldr	r1, [pc, #428]	; (800ccb0 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1fc>)
 800cb02:	a803      	add	r0, sp, #12
 800cb04:	f006 ff38 	bl	8013978 <PropertiesBuilder::AddComment(char const*)>
 800cb08:	6863      	ldr	r3, [r4, #4]
 800cb0a:	059e      	lsls	r6, r3, #22
 800cb0c:	d403      	bmi.n	800cb16 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x62>
 800cb0e:	7a20      	ldrb	r0, [r4, #8]
 800cb10:	f000 f9a7 	bl	800ce62 <PixelConfiguration::GetRgbMapping(pixel::Type)>
 800cb14:	75e0      	strb	r0, [r4, #23]
 800cb16:	7de0      	ldrb	r0, [r4, #23]
 800cb18:	f000 fd10 	bl	800d53c <PixelType::GetMap(pixel::Map)>
 800cb1c:	6863      	ldr	r3, [r4, #4]
 800cb1e:	4602      	mov	r2, r0
 800cb20:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800cb24:	4963      	ldr	r1, [pc, #396]	; (800ccb4 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x200>)
 800cb26:	a803      	add	r0, sp, #12
 800cb28:	f7ff fdd2 	bl	800c6d0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800cb2c:	6863      	ldr	r3, [r4, #4]
 800cb2e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800cb32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cb36:	d011      	beq.n	800cb5c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0xa8>
 800cb38:	f10d 020b 	add.w	r2, sp, #11
 800cb3c:	7a20      	ldrb	r0, [r4, #8]
 800cb3e:	f10d 010a 	add.w	r1, sp, #10
 800cb42:	f000 f99d 	bl	800ce80 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 800cb46:	6863      	ldr	r3, [r4, #4]
 800cb48:	055d      	lsls	r5, r3, #21
 800cb4a:	bf5c      	itt	pl
 800cb4c:	f89d 200a 	ldrbpl.w	r2, [sp, #10]
 800cb50:	7622      	strbpl	r2, [r4, #24]
 800cb52:	0518      	lsls	r0, r3, #20
 800cb54:	bf5c      	itt	pl
 800cb56:	f89d 300b 	ldrbpl.w	r3, [sp, #11]
 800cb5a:	7663      	strbpl	r3, [r4, #25]
 800cb5c:	4956      	ldr	r1, [pc, #344]	; (800ccb8 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x204>)
 800cb5e:	a803      	add	r0, sp, #12
 800cb60:	f006 ff0a 	bl	8013978 <PropertiesBuilder::AddComment(char const*)>
 800cb64:	7e20      	ldrb	r0, [r4, #24]
 800cb66:	f000 fcf5 	bl	800d554 <PixelType::ConvertTxH(unsigned char)>
 800cb6a:	2502      	movs	r5, #2
 800cb6c:	6863      	ldr	r3, [r4, #4]
 800cb6e:	4602      	mov	r2, r0
 800cb70:	4952      	ldr	r1, [pc, #328]	; (800ccbc <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x208>)
 800cb72:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800cb76:	9500      	str	r5, [sp, #0]
 800cb78:	a803      	add	r0, sp, #12
 800cb7a:	f7ff fdd1 	bl	800c720 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 800cb7e:	7e60      	ldrb	r0, [r4, #25]
 800cb80:	f000 fce8 	bl	800d554 <PixelType::ConvertTxH(unsigned char)>
 800cb84:	6863      	ldr	r3, [r4, #4]
 800cb86:	4602      	mov	r2, r0
 800cb88:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 800cb8c:	494c      	ldr	r1, [pc, #304]	; (800ccc0 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x20c>)
 800cb8e:	9500      	str	r5, [sp, #0]
 800cb90:	a803      	add	r0, sp, #12
 800cb92:	f7ff fdc5 	bl	800c720 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 800cb96:	494b      	ldr	r1, [pc, #300]	; (800ccc4 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x210>)
 800cb98:	a803      	add	r0, sp, #12
 800cb9a:	f006 feed 	bl	8013978 <PropertiesBuilder::AddComment(char const*)>
 800cb9e:	6863      	ldr	r3, [r4, #4]
 800cba0:	f8b4 2015 	ldrh.w	r2, [r4, #21]
 800cba4:	4948      	ldr	r1, [pc, #288]	; (800ccc8 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x214>)
 800cba6:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800cbaa:	a803      	add	r0, sp, #12
 800cbac:	f7ff fd68 	bl	800c680 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800cbb0:	4946      	ldr	r1, [pc, #280]	; (800cccc <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x218>)
 800cbb2:	a803      	add	r0, sp, #12
 800cbb4:	f006 fee0 	bl	8013978 <PropertiesBuilder::AddComment(char const*)>
 800cbb8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800cbbc:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800cbc0:	42a9      	cmp	r1, r5
 800cbc2:	d224      	bcs.n	800cc0e <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x15a>
 800cbc4:	9803      	ldr	r0, [sp, #12]
 800cbc6:	1a6d      	subs	r5, r5, r1
 800cbc8:	4408      	add	r0, r1
 800cbca:	6861      	ldr	r1, [r4, #4]
 800cbcc:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800cbd0:	06c9      	lsls	r1, r1, #27
 800cbd2:	f8d4 300e 	ldr.w	r3, [r4, #14]
 800cbd6:	d40b      	bmi.n	800cbf0 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x13c>
 800cbd8:	b962      	cbnz	r2, 800cbf4 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x140>
 800cbda:	9300      	str	r3, [sp, #0]
 800cbdc:	4a3c      	ldr	r2, [pc, #240]	; (800ccd0 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x21c>)
 800cbde:	4b3d      	ldr	r3, [pc, #244]	; (800ccd4 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x220>)
 800cbe0:	e00b      	b.n	800cbfa <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x146>
 800cbe2:	6823      	ldr	r3, [r4, #0]
 800cbe4:	4601      	mov	r1, r0
 800cbe6:	681a      	ldr	r2, [r3, #0]
 800cbe8:	4618      	mov	r0, r3
 800cbea:	68d2      	ldr	r2, [r2, #12]
 800cbec:	4790      	blx	r2
 800cbee:	e76d      	b.n	800cacc <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x18>
 800cbf0:	2a00      	cmp	r2, #0
 800cbf2:	d053      	beq.n	800cc9c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1e8>
 800cbf4:	9300      	str	r3, [sp, #0]
 800cbf6:	4a38      	ldr	r2, [pc, #224]	; (800ccd8 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x224>)
 800cbf8:	4b36      	ldr	r3, [pc, #216]	; (800ccd4 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x220>)
 800cbfa:	4629      	mov	r1, r5
 800cbfc:	f7fc f886 	bl	8008d0c <snprintf>
 800cc00:	4285      	cmp	r5, r0
 800cc02:	bfa2      	ittt	ge
 800cc04:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800cc08:	18c0      	addge	r0, r0, r3
 800cc0a:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800cc0e:	4933      	ldr	r1, [pc, #204]	; (800ccdc <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x228>)
 800cc10:	a803      	add	r0, sp, #12
 800cc12:	f006 feb1 	bl	8013978 <PropertiesBuilder::AddComment(char const*)>
 800cc16:	6863      	ldr	r3, [r4, #4]
 800cc18:	7ca2      	ldrb	r2, [r4, #18]
 800cc1a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800cc1e:	4930      	ldr	r1, [pc, #192]	; (800cce0 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x22c>)
 800cc20:	a803      	add	r0, sp, #12
 800cc22:	f7ff fd05 	bl	800c630 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800cc26:	492f      	ldr	r1, [pc, #188]	; (800cce4 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x230>)
 800cc28:	a803      	add	r0, sp, #12
 800cc2a:	f006 fea5 	bl	8013978 <PropertiesBuilder::AddComment(char const*)>
 800cc2e:	6863      	ldr	r3, [r4, #4]
 800cc30:	f8b4 200b 	ldrh.w	r2, [r4, #11]
 800cc34:	492c      	ldr	r1, [pc, #176]	; (800cce8 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x234>)
 800cc36:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800cc3a:	a803      	add	r0, sp, #12
 800cc3c:	f7ff fd20 	bl	800c680 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800cc40:	6863      	ldr	r3, [r4, #4]
 800cc42:	8b62      	ldrh	r2, [r4, #26]
 800cc44:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800cc48:	4928      	ldr	r1, [pc, #160]	; (800ccec <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x238>)
 800cc4a:	a803      	add	r0, sp, #12
 800cc4c:	f7ff fd18 	bl	800c680 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800cc50:	4927      	ldr	r1, [pc, #156]	; (800ccf0 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x23c>)
 800cc52:	a803      	add	r0, sp, #12
 800cc54:	f006 fe90 	bl	8013978 <PropertiesBuilder::AddComment(char const*)>
 800cc58:	6863      	ldr	r3, [r4, #4]
 800cc5a:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800cc5e:	f3c3 5300 	ubfx	r3, r3, #20, #1
 800cc62:	4924      	ldr	r1, [pc, #144]	; (800ccf4 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x240>)
 800cc64:	a803      	add	r0, sp, #12
 800cc66:	f7ff fce3 	bl	800c630 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800cc6a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800cc6e:	b17b      	cbz	r3, 800cc90 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1dc>
 800cc70:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800cc74:	9b03      	ldr	r3, [sp, #12]
 800cc76:	4413      	add	r3, r2
 800cc78:	227d      	movs	r2, #125	; 0x7d
 800cc7a:	f803 2c01 	strb.w	r2, [r3, #-1]
 800cc7e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800cc82:	9903      	ldr	r1, [sp, #12]
 800cc84:	54ca      	strb	r2, [r1, r3]
 800cc86:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800cc8a:	3301      	adds	r3, #1
 800cc8c:	f8ad 3012 	strh.w	r3, [sp, #18]
 800cc90:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800cc94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc96:	601a      	str	r2, [r3, #0]
 800cc98:	b006      	add	sp, #24
 800cc9a:	bd70      	pop	{r4, r5, r6, pc}
 800cc9c:	9300      	str	r3, [sp, #0]
 800cc9e:	4a16      	ldr	r2, [pc, #88]	; (800ccf8 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x244>)
 800cca0:	4b0c      	ldr	r3, [pc, #48]	; (800ccd4 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x220>)
 800cca2:	e7aa      	b.n	800cbfa <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x146>
 800cca4:	0801859f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r8, sl, pc}
 800cca8:	0801857c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, sl, pc}
 800ccac:	08018585 	stmdaeq	r1, {r0, r2, r7, r8, sl, pc}
 800ccb0:	08016df1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r8, sl, fp, sp, lr}
 800ccb4:	0801856c 	stmdaeq	r1, {r2, r3, r5, r6, r8, sl, pc}
 800ccb8:	08016e05 	stmdaeq	r1, {r0, r2, r9, sl, fp, sp, lr}
 800ccbc:	0801858f 	stmdaeq	r1, {r0, r1, r2, r3, r7, r8, sl, pc}
 800ccc0:	08018597 	stmdaeq	r1, {r0, r1, r2, r4, r7, r8, sl, pc}
 800ccc4:	08016e1b 	stmdaeq	r1, {r0, r1, r3, r4, r9, sl, fp, sp, lr}
 800ccc8:	0801854a 	stmdaeq	r1, {r1, r3, r6, r8, sl, pc}
 800cccc:	08016e24 	stmdaeq	r1, {r2, r5, r9, sl, fp, sp, lr}
 800ccd0:	08016af9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, sp, lr}
 800ccd4:	0801853b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r8, sl, pc}
 800ccd8:	08016af0 	stmdaeq	r1, {r4, r5, r6, r7, r9, fp, sp, lr}
 800ccdc:	08016e36 	stmdaeq	r1, {r1, r2, r4, r5, r9, sl, fp, sp, lr}
 800cce0:	0801855a 	stmdaeq	r1, {r1, r3, r4, r6, r8, sl, pc}
 800cce4:	0801852d 	stmdaeq	r1, {r0, r2, r3, r5, r8, sl, pc}
 800cce8:	0801871f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r8, r9, sl, pc}
 800ccec:	08018647 	stmdaeq	r1, {r0, r1, r2, r6, r9, sl, pc}
 800ccf0:	08016e44 	stmdaeq	r1, {r2, r6, r9, sl, fp, sp, lr}
 800ccf4:	080185fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r8, sl, pc}
 800ccf8:	08016afa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r9, fp, sp, lr}

0800ccfc <WS28xxDmxParams::Save(char*, unsigned int, unsigned int&)>:
 800ccfc:	b513      	push	{r0, r1, r4, lr}
 800ccfe:	6804      	ldr	r4, [r0, #0]
 800cd00:	b914      	cbnz	r4, 800cd08 <WS28xxDmxParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800cd02:	601c      	str	r4, [r3, #0]
 800cd04:	b002      	add	sp, #8
 800cd06:	bd10      	pop	{r4, pc}
 800cd08:	9300      	str	r3, [sp, #0]
 800cd0a:	4613      	mov	r3, r2
 800cd0c:	460a      	mov	r2, r1
 800cd0e:	2100      	movs	r1, #0
 800cd10:	f7ff fed0 	bl	800cab4 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)>
 800cd14:	e7f6      	b.n	800cd04 <WS28xxDmxParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800cd16 <WS28xxDmxParams::Set(PixelDmxConfiguration*)>:
 800cd16:	6843      	ldr	r3, [r0, #4]
 800cd18:	07da      	lsls	r2, r3, #31
 800cd1a:	bf44      	itt	mi
 800cd1c:	7a02      	ldrbmi	r2, [r0, #8]
 800cd1e:	600a      	strmi	r2, [r1, #0]
 800cd20:	079a      	lsls	r2, r3, #30
 800cd22:	d505      	bpl.n	800cd30 <WS28xxDmxParams::Set(PixelDmxConfiguration*)+0x1a>
 800cd24:	f8b0 2009 	ldrh.w	r2, [r0, #9]
 800cd28:	2a00      	cmp	r2, #0
 800cd2a:	bf08      	it	eq
 800cd2c:	22aa      	moveq	r2, #170	; 0xaa
 800cd2e:	604a      	str	r2, [r1, #4]
 800cd30:	059a      	lsls	r2, r3, #22
 800cd32:	bf44      	itt	mi
 800cd34:	7dc2      	ldrbmi	r2, [r0, #23]
 800cd36:	608a      	strmi	r2, [r1, #8]
 800cd38:	055a      	lsls	r2, r3, #21
 800cd3a:	bf44      	itt	mi
 800cd3c:	7e02      	ldrbmi	r2, [r0, #24]
 800cd3e:	740a      	strbmi	r2, [r1, #16]
 800cd40:	051a      	lsls	r2, r3, #20
 800cd42:	bf44      	itt	mi
 800cd44:	7e42      	ldrbmi	r2, [r0, #25]
 800cd46:	744a      	strbmi	r2, [r1, #17]
 800cd48:	06da      	lsls	r2, r3, #27
 800cd4a:	bf44      	itt	mi
 800cd4c:	f8d0 200e 	ldrmi.w	r2, [r0, #14]
 800cd50:	60ca      	strmi	r2, [r1, #12]
 800cd52:	069a      	lsls	r2, r3, #26
 800cd54:	bf44      	itt	mi
 800cd56:	7c82      	ldrbmi	r2, [r0, #18]
 800cd58:	748a      	strbmi	r2, [r1, #18]
 800cd5a:	075a      	lsls	r2, r3, #29
 800cd5c:	d50b      	bpl.n	800cd76 <WS28xxDmxParams::Set(PixelDmxConfiguration*)+0x60>
 800cd5e:	7ac2      	ldrb	r2, [r0, #11]
 800cd60:	b510      	push	{r4, lr}
 800cd62:	7b04      	ldrb	r4, [r0, #12]
 800cd64:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800cd68:	838a      	strh	r2, [r1, #28]
 800cd6a:	05da      	lsls	r2, r3, #23
 800cd6c:	bf44      	itt	mi
 800cd6e:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 800cd72:	618b      	strmi	r3, [r1, #24]
 800cd74:	bd10      	pop	{r4, pc}
 800cd76:	05db      	lsls	r3, r3, #23
 800cd78:	bf44      	itt	mi
 800cd7a:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 800cd7e:	618b      	strmi	r3, [r1, #24]
 800cd80:	4770      	bx	lr

0800cd82 <WS28xxDmxParams::Dump()>:
 800cd82:	4770      	bx	lr

0800cd84 <WS28xxDmx::Print()>:
 800cd84:	b510      	push	{r4, lr}
 800cd86:	4604      	mov	r4, r0
 800cd88:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800cd8a:	f000 fc5d 	bl	800d648 <WS28xx::Print()>
 800cd8e:	4805      	ldr	r0, [pc, #20]	; (800cda4 <WS28xxDmx::Print()+0x20>)
 800cd90:	f7fb ff94 	bl	8008cbc <printf>
 800cd94:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 800cd98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd9c:	4802      	ldr	r0, [pc, #8]	; (800cda8 <WS28xxDmx::Print()+0x24>)
 800cd9e:	f7fb bf8d 	b.w	8008cbc <printf>
 800cda2:	bf00      	nop
 800cda4:	08016e51 	stmdaeq	r1, {r0, r4, r6, r9, sl, fp, sp, lr}
 800cda8:	08016e67 	stmdaeq	r1, {r0, r1, r2, r5, r6, r9, sl, fp, sp, lr}

0800cdac <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)>:
 800cdac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdb0:	460e      	mov	r6, r1
 800cdb2:	4611      	mov	r1, r2
 800cdb4:	4604      	mov	r4, r0
 800cdb6:	4690      	mov	r8, r2
 800cdb8:	461d      	mov	r5, r3
 800cdba:	9f06      	ldr	r7, [sp, #24]
 800cdbc:	f000 f86e 	bl	800ce9c <PixelConfiguration::Validate(unsigned int&)>
 800cdc0:	2e01      	cmp	r6, #1
 800cdc2:	d009      	beq.n	800cdd8 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x2c>
 800cdc4:	7ce2      	ldrb	r2, [r4, #19]
 800cdc6:	b93a      	cbnz	r2, 800cdd8 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x2c>
 800cdc8:	2e04      	cmp	r6, #4
 800cdca:	d141      	bne.n	800ce50 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0xa4>
 800cdcc:	2303      	movs	r3, #3
 800cdce:	6023      	str	r3, [r4, #0]
 800cdd0:	4641      	mov	r1, r8
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	f000 f862 	bl	800ce9c <PixelConfiguration::Validate(unsigned int&)>
 800cdd8:	6823      	ldr	r3, [r4, #0]
 800cdda:	2b07      	cmp	r3, #7
 800cddc:	bf0d      	iteet	eq
 800cdde:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800cde2:	f44f 73aa 	movne.w	r3, #340	; 0x154
 800cde6:	22aa      	movne	r2, #170	; 0xaa
 800cde8:	2180      	moveq	r1, #128	; 0x80
 800cdea:	bf15      	itete	ne
 800cdec:	e9c5 2300 	strdne	r2, r3, [r5]
 800cdf0:	e9c5 1300 	strdeq	r1, r3, [r5]
 800cdf4:	f44f 73ff 	movne.w	r3, #510	; 0x1fe
 800cdf8:	f44f 73c0 	moveq.w	r3, #384	; 0x180
 800cdfc:	69a2      	ldr	r2, [r4, #24]
 800cdfe:	60ab      	str	r3, [r5, #8]
 800ce00:	6863      	ldr	r3, [r4, #4]
 800ce02:	b10a      	cbz	r2, 800ce08 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x5c>
 800ce04:	4293      	cmp	r3, r2
 800ce06:	d200      	bcs.n	800ce0a <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x5e>
 800ce08:	61a3      	str	r3, [r4, #24]
 800ce0a:	69a2      	ldr	r2, [r4, #24]
 800ce0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce10:	603b      	str	r3, [r7, #0]
 800ce12:	6963      	ldr	r3, [r4, #20]
 800ce14:	42b3      	cmp	r3, r6
 800ce16:	bf94      	ite	ls
 800ce18:	6163      	strls	r3, [r4, #20]
 800ce1a:	6166      	strhi	r6, [r4, #20]
 800ce1c:	682b      	ldr	r3, [r5, #0]
 800ce1e:	2e01      	cmp	r6, #1
 800ce20:	f103 0201 	add.w	r2, r3, #1
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce2a:	9a07      	ldr	r2, [sp, #28]
 800ce2c:	f103 0101 	add.w	r1, r3, #1
 800ce30:	6011      	str	r1, [r2, #0]
 800ce32:	bf09      	itett	eq
 800ce34:	682b      	ldreq	r3, [r5, #0]
 800ce36:	6962      	ldrne	r2, [r4, #20]
 800ce38:	1c5a      	addeq	r2, r3, #1
 800ce3a:	683b      	ldreq	r3, [r7, #0]
 800ce3c:	bf16      	itet	ne
 800ce3e:	f102 32ff 	addne.w	r2, r2, #4294967295	; 0xffffffff
 800ce42:	fbb3 f3f2 	udiveq	r3, r3, r2
 800ce46:	eb03 0382 	addne.w	r3, r3, r2, lsl #2
 800ce4a:	60eb      	str	r3, [r5, #12]
 800ce4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce50:	6823      	ldr	r3, [r4, #0]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d0bc      	beq.n	800cdd0 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x24>
 800ce56:	3b0b      	subs	r3, #11
 800ce58:	2b01      	cmp	r3, #1
 800ce5a:	bf88      	it	hi
 800ce5c:	6022      	strhi	r2, [r4, #0]
 800ce5e:	e7b7      	b.n	800cdd0 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x24>

0800ce60 <PixelDmxConfiguration::Dump()>:
 800ce60:	4770      	bx	lr

0800ce62 <PixelConfiguration::GetRgbMapping(pixel::Type)>:
 800ce62:	f020 0308 	bic.w	r3, r0, #8
 800ce66:	2b01      	cmp	r3, #1
 800ce68:	d006      	beq.n	800ce78 <PixelConfiguration::GetRgbMapping(pixel::Type)+0x16>
 800ce6a:	2808      	cmp	r0, #8
 800ce6c:	d006      	beq.n	800ce7c <PixelConfiguration::GetRgbMapping(pixel::Type)+0x1a>
 800ce6e:	280a      	cmp	r0, #10
 800ce70:	bf14      	ite	ne
 800ce72:	2002      	movne	r0, #2
 800ce74:	2005      	moveq	r0, #5
 800ce76:	4770      	bx	lr
 800ce78:	2000      	movs	r0, #0
 800ce7a:	4770      	bx	lr
 800ce7c:	2004      	movs	r0, #4
 800ce7e:	4770      	bx	lr

0800ce80 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>:
 800ce80:	23c0      	movs	r3, #192	; 0xc0
 800ce82:	2803      	cmp	r0, #3
 800ce84:	700b      	strb	r3, [r1, #0]
 800ce86:	d006      	beq.n	800ce96 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x16>
 800ce88:	3808      	subs	r0, #8
 800ce8a:	2803      	cmp	r0, #3
 800ce8c:	bf34      	ite	cc
 800ce8e:	23fc      	movcc	r3, #252	; 0xfc
 800ce90:	23f0      	movcs	r3, #240	; 0xf0
 800ce92:	7013      	strb	r3, [r2, #0]
 800ce94:	4770      	bx	lr
 800ce96:	23f8      	movs	r3, #248	; 0xf8
 800ce98:	e7fb      	b.n	800ce92 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x12>
	...

0800ce9c <PixelConfiguration::Validate(unsigned int&)>:
 800ce9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce9e:	e9d0 5300 	ldrd	r5, r3, [r0]
 800cea2:	2d07      	cmp	r5, #7
 800cea4:	4604      	mov	r4, r0
 800cea6:	6882      	ldr	r2, [r0, #8]
 800cea8:	d129      	bne.n	800cefe <PixelConfiguration::Validate(unsigned int&)+0x62>
 800ceaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ceae:	bf28      	it	cs
 800ceb0:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800ceb4:	6043      	str	r3, [r0, #4]
 800ceb6:	2304      	movs	r3, #4
 800ceb8:	600b      	str	r3, [r1, #0]
 800ceba:	2301      	movs	r3, #1
 800cebc:	2a06      	cmp	r2, #6
 800cebe:	74e3      	strb	r3, [r4, #19]
 800cec0:	d103      	bne.n	800ceca <PixelConfiguration::Validate(unsigned int&)+0x2e>
 800cec2:	4628      	mov	r0, r5
 800cec4:	f7ff ffcd 	bl	800ce62 <PixelConfiguration::GetRgbMapping(pixel::Type)>
 800cec8:	60a0      	str	r0, [r4, #8]
 800ceca:	7c63      	ldrb	r3, [r4, #17]
 800cecc:	7c22      	ldrb	r2, [r4, #16]
 800cece:	4628      	mov	r0, r5
 800ced0:	429a      	cmp	r2, r3
 800ced2:	bf28      	it	cs
 800ced4:	2300      	movcs	r3, #0
 800ced6:	f10d 0207 	add.w	r2, sp, #7
 800ceda:	bf28      	it	cs
 800cedc:	8223      	strhcs	r3, [r4, #16]
 800cede:	f10d 0106 	add.w	r1, sp, #6
 800cee2:	f7ff ffcd 	bl	800ce80 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 800cee6:	7c23      	ldrb	r3, [r4, #16]
 800cee8:	b913      	cbnz	r3, 800cef0 <PixelConfiguration::Validate(unsigned int&)+0x54>
 800ceea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ceee:	7423      	strb	r3, [r4, #16]
 800cef0:	7c63      	ldrb	r3, [r4, #17]
 800cef2:	b913      	cbnz	r3, 800cefa <PixelConfiguration::Validate(unsigned int&)+0x5e>
 800cef4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cef8:	7463      	strb	r3, [r4, #17]
 800cefa:	4b1a      	ldr	r3, [pc, #104]	; (800cf64 <PixelConfiguration::Validate(unsigned int&)+0xc8>)
 800cefc:	e020      	b.n	800cf40 <PixelConfiguration::Validate(unsigned int&)+0xa4>
 800cefe:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 800cf02:	bf28      	it	cs
 800cf04:	f44f 732a 	movcs.w	r3, #680	; 0x2a8
 800cf08:	6043      	str	r3, [r0, #4]
 800cf0a:	2303      	movs	r3, #3
 800cf0c:	600b      	str	r3, [r1, #0]
 800cf0e:	f1a5 030b 	sub.w	r3, r5, #11
 800cf12:	2b01      	cmp	r3, #1
 800cf14:	d806      	bhi.n	800cf24 <PixelConfiguration::Validate(unsigned int&)+0x88>
 800cf16:	7c83      	ldrb	r3, [r0, #18]
 800cf18:	2b1f      	cmp	r3, #31
 800cf1a:	d81d      	bhi.n	800cf58 <PixelConfiguration::Validate(unsigned int&)+0xbc>
 800cf1c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800cf20:	74a3      	strb	r3, [r4, #18]
 800cf22:	e000      	b.n	800cf26 <PixelConfiguration::Validate(unsigned int&)+0x8a>
 800cf24:	b9d5      	cbnz	r5, 800cf5c <PixelConfiguration::Validate(unsigned int&)+0xc0>
 800cf26:	2300      	movs	r3, #0
 800cf28:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800cf2c:	2a06      	cmp	r2, #6
 800cf2e:	bf08      	it	eq
 800cf30:	60a3      	streq	r3, [r4, #8]
 800cf32:	2d0d      	cmp	r5, #13
 800cf34:	74e3      	strb	r3, [r4, #19]
 800cf36:	8221      	strh	r1, [r4, #16]
 800cf38:	68e3      	ldr	r3, [r4, #12]
 800cf3a:	d109      	bne.n	800cf50 <PixelConfiguration::Validate(unsigned int&)+0xb4>
 800cf3c:	b913      	cbnz	r3, 800cf44 <PixelConfiguration::Validate(unsigned int&)+0xa8>
 800cf3e:	4b0a      	ldr	r3, [pc, #40]	; (800cf68 <PixelConfiguration::Validate(unsigned int&)+0xcc>)
 800cf40:	60e3      	str	r3, [r4, #12]
 800cf42:	e003      	b.n	800cf4c <PixelConfiguration::Validate(unsigned int&)+0xb0>
 800cf44:	4a09      	ldr	r2, [pc, #36]	; (800cf6c <PixelConfiguration::Validate(unsigned int&)+0xd0>)
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d900      	bls.n	800cf4c <PixelConfiguration::Validate(unsigned int&)+0xb0>
 800cf4a:	60e2      	str	r2, [r4, #12]
 800cf4c:	b003      	add	sp, #12
 800cf4e:	bd30      	pop	{r4, r5, pc}
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d0f4      	beq.n	800cf3e <PixelConfiguration::Validate(unsigned int&)+0xa2>
 800cf54:	4a06      	ldr	r2, [pc, #24]	; (800cf70 <PixelConfiguration::Validate(unsigned int&)+0xd4>)
 800cf56:	e7f6      	b.n	800cf46 <PixelConfiguration::Validate(unsigned int&)+0xaa>
 800cf58:	23ff      	movs	r3, #255	; 0xff
 800cf5a:	e7e1      	b.n	800cf20 <PixelConfiguration::Validate(unsigned int&)+0x84>
 800cf5c:	2d0d      	cmp	r5, #13
 800cf5e:	d0e2      	beq.n	800cf26 <PixelConfiguration::Validate(unsigned int&)+0x8a>
 800cf60:	e7ab      	b.n	800ceba <PixelConfiguration::Validate(unsigned int&)+0x1e>
 800cf62:	bf00      	nop
 800cf64:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 800cf68:	003d0900 	eorseq	r0, sp, r0, lsl #18
 800cf6c:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 800cf70:	017d7840 	cmneq	sp, r0, asr #16

0800cf74 <PixelConfiguration::Dump()>:
 800cf74:	4770      	bx	lr
	...

0800cf78 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>:
 800cf78:	b507      	push	{r0, r1, r2, lr}
 800cf7a:	b2cb      	uxtb	r3, r1
 800cf7c:	9300      	str	r3, [sp, #0]
 800cf7e:	f3c1 4207 	ubfx	r2, r1, #16, #8
 800cf82:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800cf86:	4601      	mov	r1, r0
 800cf88:	4803      	ldr	r0, [pc, #12]	; (800cf98 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]+0x20>)
 800cf8a:	6800      	ldr	r0, [r0, #0]
 800cf8c:	f000 fb9e 	bl	800d6cc <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 800cf90:	b003      	add	sp, #12
 800cf92:	f85d fb04 	ldr.w	pc, [sp], #4
 800cf96:	bf00      	nop
 800cf98:	20001948 	andcs	r1, r0, r8, asr #18

0800cf9c <PixelPatterns::Clear(unsigned int) [clone .isra.0]>:
 800cf9c:	b538      	push	{r3, r4, r5, lr}
 800cf9e:	2400      	movs	r4, #0
 800cfa0:	4d05      	ldr	r5, [pc, #20]	; (800cfb8 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x1c>)
 800cfa2:	682b      	ldr	r3, [r5, #0]
 800cfa4:	42a3      	cmp	r3, r4
 800cfa6:	d905      	bls.n	800cfb4 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x18>
 800cfa8:	4620      	mov	r0, r4
 800cfaa:	2100      	movs	r1, #0
 800cfac:	f7ff ffe4 	bl	800cf78 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800cfb0:	3401      	adds	r4, #1
 800cfb2:	e7f6      	b.n	800cfa2 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x6>
 800cfb4:	bd38      	pop	{r3, r4, r5, pc}
 800cfb6:	bf00      	nop
 800cfb8:	20001944 	andcs	r1, r0, r4, asr #18

0800cfbc <PixelPatterns::PixelPatterns(unsigned int)>:
 800cfbc:	2901      	cmp	r1, #1
 800cfbe:	bf28      	it	cs
 800cfc0:	2101      	movcs	r1, #1
 800cfc2:	4b08      	ldr	r3, [pc, #32]	; (800cfe4 <PixelPatterns::PixelPatterns(unsigned int)+0x28>)
 800cfc4:	4a08      	ldr	r2, [pc, #32]	; (800cfe8 <PixelPatterns::PixelPatterns(unsigned int)+0x2c>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	6013      	str	r3, [r2, #0]
 800cfca:	4a08      	ldr	r2, [pc, #32]	; (800cfec <PixelPatterns::PixelPatterns(unsigned int)+0x30>)
 800cfcc:	6011      	str	r1, [r2, #0]
 800cfce:	685a      	ldr	r2, [r3, #4]
 800cfd0:	4b07      	ldr	r3, [pc, #28]	; (800cff0 <PixelPatterns::PixelPatterns(unsigned int)+0x34>)
 800cfd2:	601a      	str	r2, [r3, #0]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	4b07      	ldr	r3, [pc, #28]	; (800cff4 <PixelPatterns::PixelPatterns(unsigned int)+0x38>)
 800cfd8:	6819      	ldr	r1, [r3, #0]
 800cfda:	4b07      	ldr	r3, [pc, #28]	; (800cff8 <PixelPatterns::PixelPatterns(unsigned int)+0x3c>)
 800cfdc:	61da      	str	r2, [r3, #28]
 800cfde:	6019      	str	r1, [r3, #0]
 800cfe0:	619a      	str	r2, [r3, #24]
 800cfe2:	4770      	bx	lr
 800cfe4:	20001958 	andcs	r1, r0, r8, asr r9
 800cfe8:	20001948 	andcs	r1, r0, r8, asr #18
 800cfec:	2000193c 	andcs	r1, r0, ip, lsr r9
 800cff0:	20001944 	andcs	r1, r0, r4, asr #18
 800cff4:	2000a9dc 	ldrdcs	sl, [r0], -ip
 800cff8:	2000191c 	andcs	r1, r0, ip, lsl r9

0800cffc <PixelPatterns::GetName(pixelpatterns::Pattern)>:
 800cffc:	2805      	cmp	r0, #5
 800cffe:	bfdd      	ittte	le
 800d000:	220e      	movle	r2, #14
 800d002:	4b02      	ldrle	r3, [pc, #8]	; (800d00c <PixelPatterns::GetName(pixelpatterns::Pattern)+0x10>)
 800d004:	fb02 3000 	mlale	r0, r2, r0, r3
 800d008:	4801      	ldrgt	r0, [pc, #4]	; (800d010 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x14>)
 800d00a:	4770      	bx	lr
 800d00c:	08016e93 	stmdaeq	r1, {r0, r1, r4, r7, r9, sl, fp, sp, lr}
 800d010:	08016e8b 	stmdaeq	r1, {r0, r1, r3, r7, r9, sl, fp, sp, lr}

0800d014 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>:
 800d014:	b570      	push	{r4, r5, r6, lr}
 800d016:	460e      	mov	r6, r1
 800d018:	4615      	mov	r5, r2
 800d01a:	461c      	mov	r4, r3
 800d01c:	f7ff ffbe 	bl	800cf9c <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800d020:	2301      	movs	r3, #1
 800d022:	4905      	ldr	r1, [pc, #20]	; (800d038 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)+0x24>)
 800d024:	22ff      	movs	r2, #255	; 0xff
 800d026:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800d02a:	61cb      	str	r3, [r1, #28]
 800d02c:	2300      	movs	r3, #0
 800d02e:	604d      	str	r5, [r1, #4]
 800d030:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800d034:	618c      	str	r4, [r1, #24]
 800d036:	bd70      	pop	{r4, r5, r6, pc}
 800d038:	2000191c 	andcs	r1, r0, ip, lsl r9

0800d03c <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 800d03c:	b570      	push	{r4, r5, r6, lr}
 800d03e:	460e      	mov	r6, r1
 800d040:	461c      	mov	r4, r3
 800d042:	4615      	mov	r5, r2
 800d044:	f7ff ffaa 	bl	800cf9c <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800d048:	2302      	movs	r3, #2
 800d04a:	4908      	ldr	r1, [pc, #32]	; (800d06c <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 800d04c:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800d050:	61cb      	str	r3, [r1, #28]
 800d052:	9b04      	ldr	r3, [sp, #16]
 800d054:	e9c1 5402 	strd	r5, r4, [r1, #8]
 800d058:	604b      	str	r3, [r1, #4]
 800d05a:	4b05      	ldr	r3, [pc, #20]	; (800d070 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x34>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	610b      	str	r3, [r1, #16]
 800d060:	2300      	movs	r3, #0
 800d062:	614b      	str	r3, [r1, #20]
 800d064:	9b05      	ldr	r3, [sp, #20]
 800d066:	618b      	str	r3, [r1, #24]
 800d068:	bd70      	pop	{r4, r5, r6, pc}
 800d06a:	bf00      	nop
 800d06c:	2000191c 	andcs	r1, r0, ip, lsl r9
 800d070:	20001944 	andcs	r1, r0, r4, asr #18

0800d074 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 800d074:	b570      	push	{r4, r5, r6, lr}
 800d076:	460e      	mov	r6, r1
 800d078:	461d      	mov	r5, r3
 800d07a:	4614      	mov	r4, r2
 800d07c:	f7ff ff8e 	bl	800cf9c <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800d080:	2303      	movs	r3, #3
 800d082:	4907      	ldr	r1, [pc, #28]	; (800d0a0 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 800d084:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800d088:	61cb      	str	r3, [r1, #28]
 800d08a:	4b06      	ldr	r3, [pc, #24]	; (800d0a4 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 800d08c:	604d      	str	r5, [r1, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	608c      	str	r4, [r1, #8]
 800d092:	610b      	str	r3, [r1, #16]
 800d094:	2300      	movs	r3, #0
 800d096:	614b      	str	r3, [r1, #20]
 800d098:	9b04      	ldr	r3, [sp, #16]
 800d09a:	618b      	str	r3, [r1, #24]
 800d09c:	bd70      	pop	{r4, r5, r6, pc}
 800d09e:	bf00      	nop
 800d0a0:	2000191c 	andcs	r1, r0, ip, lsl r9
 800d0a4:	20001944 	andcs	r1, r0, r4, asr #18

0800d0a8 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>:
 800d0a8:	b570      	push	{r4, r5, r6, lr}
 800d0aa:	460e      	mov	r6, r1
 800d0ac:	461d      	mov	r5, r3
 800d0ae:	4614      	mov	r4, r2
 800d0b0:	f7ff ff74 	bl	800cf9c <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800d0b4:	2304      	movs	r3, #4
 800d0b6:	4912      	ldr	r1, [pc, #72]	; (800d100 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x58>)
 800d0b8:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800d0bc:	604d      	str	r5, [r1, #4]
 800d0be:	4d11      	ldr	r5, [pc, #68]	; (800d104 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x5c>)
 800d0c0:	61cb      	str	r3, [r1, #28]
 800d0c2:	6828      	ldr	r0, [r5, #0]
 800d0c4:	608c      	str	r4, [r1, #8]
 800d0c6:	1e43      	subs	r3, r0, #1
 800d0c8:	005b      	lsls	r3, r3, #1
 800d0ca:	b29b      	uxth	r3, r3
 800d0cc:	610b      	str	r3, [r1, #16]
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	4c0d      	ldr	r4, [pc, #52]	; (800d108 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x60>)
 800d0d2:	614b      	str	r3, [r1, #20]
 800d0d4:	6823      	ldr	r3, [r4, #0]
 800d0d6:	b993      	cbnz	r3, 800d0fe <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x56>
 800d0d8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800d0dc:	4298      	cmp	r0, r3
 800d0de:	bf2c      	ite	cs
 800d0e0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 800d0e4:	0080      	lslcc	r0, r0, #2
 800d0e6:	f007 fa73 	bl	80145d0 <operator new[](unsigned int)>
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	682b      	ldr	r3, [r5, #0]
 800d0ee:	6020      	str	r0, [r4, #0]
 800d0f0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800d0f4:	4298      	cmp	r0, r3
 800d0f6:	d002      	beq.n	800d0fe <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x56>
 800d0f8:	f840 2b04 	str.w	r2, [r0], #4
 800d0fc:	e7fa      	b.n	800d0f4 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x4c>
 800d0fe:	bd70      	pop	{r4, r5, r6, pc}
 800d100:	2000191c 	andcs	r1, r0, ip, lsl r9
 800d104:	20001944 	andcs	r1, r0, r4, asr #18
 800d108:	20001940 	andcs	r1, r0, r0, asr #18

0800d10c <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 800d10c:	b570      	push	{r4, r5, r6, lr}
 800d10e:	460e      	mov	r6, r1
 800d110:	461c      	mov	r4, r3
 800d112:	4615      	mov	r5, r2
 800d114:	f7ff ff42 	bl	800cf9c <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800d118:	2305      	movs	r3, #5
 800d11a:	4907      	ldr	r1, [pc, #28]	; (800d138 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 800d11c:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800d120:	61cb      	str	r3, [r1, #28]
 800d122:	9b05      	ldr	r3, [sp, #20]
 800d124:	e9c1 5402 	strd	r5, r4, [r1, #8]
 800d128:	604b      	str	r3, [r1, #4]
 800d12a:	9b04      	ldr	r3, [sp, #16]
 800d12c:	610b      	str	r3, [r1, #16]
 800d12e:	2300      	movs	r3, #0
 800d130:	614b      	str	r3, [r1, #20]
 800d132:	9b06      	ldr	r3, [sp, #24]
 800d134:	618b      	str	r3, [r1, #24]
 800d136:	bd70      	pop	{r4, r5, r6, pc}
 800d138:	2000191c 	andcs	r1, r0, ip, lsl r9

0800d13c <PixelPatterns::Wheel(unsigned char)>:
 800d13c:	43c9      	mvns	r1, r1
 800d13e:	b2c9      	uxtb	r1, r1
 800d140:	2954      	cmp	r1, #84	; 0x54
 800d142:	d809      	bhi.n	800d158 <PixelPatterns::Wheel(unsigned char)+0x1c>
 800d144:	eba1 0081 	sub.w	r0, r1, r1, lsl #2
 800d148:	3801      	subs	r0, #1
 800d14a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d14e:	b2c3      	uxtb	r3, r0
 800d150:	b2c8      	uxtb	r0, r1
 800d152:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800d156:	4770      	bx	lr
 800d158:	29a9      	cmp	r1, #169	; 0xa9
 800d15a:	d80b      	bhi.n	800d174 <PixelPatterns::Wheel(unsigned char)+0x38>
 800d15c:	3955      	subs	r1, #85	; 0x55
 800d15e:	b2c9      	uxtb	r1, r1
 800d160:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800d164:	eba1 0181 	sub.w	r1, r1, r1, lsl #2
 800d168:	b2c3      	uxtb	r3, r0
 800d16a:	1e48      	subs	r0, r1, #1
 800d16c:	b2c0      	uxtb	r0, r0
 800d16e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800d172:	4770      	bx	lr
 800d174:	3156      	adds	r1, #86	; 0x56
 800d176:	b2c9      	uxtb	r1, r1
 800d178:	eba1 0081 	sub.w	r0, r1, r1, lsl #2
 800d17c:	3801      	subs	r0, #1
 800d17e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d182:	b2c3      	uxtb	r3, r0
 800d184:	b2c8      	uxtb	r0, r1
 800d186:	0400      	lsls	r0, r0, #16
 800d188:	e7f1      	b.n	800d16e <PixelPatterns::Wheel(unsigned char)+0x32>
	...

0800d18c <PixelPatterns::Increment(unsigned int)>:
 800d18c:	4a0d      	ldr	r2, [pc, #52]	; (800d1c4 <PixelPatterns::Increment(unsigned int)+0x38>)
 800d18e:	b510      	push	{r4, lr}
 800d190:	014c      	lsls	r4, r1, #5
 800d192:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 800d196:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
 800d19a:	b930      	cbnz	r0, 800d1aa <PixelPatterns::Increment(unsigned int)+0x1e>
 800d19c:	690a      	ldr	r2, [r1, #16]
 800d19e:	3301      	adds	r3, #1
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	bf18      	it	ne
 800d1a4:	4618      	movne	r0, r3
 800d1a6:	6148      	str	r0, [r1, #20]
 800d1a8:	bd10      	pop	{r4, pc}
 800d1aa:	b92b      	cbnz	r3, 800d1b8 <PixelPatterns::Increment(unsigned int)+0x2c>
 800d1ac:	4422      	add	r2, r4
 800d1ae:	6913      	ldr	r3, [r2, #16]
 800d1b0:	3b01      	subs	r3, #1
 800d1b2:	b29b      	uxth	r3, r3
 800d1b4:	6153      	str	r3, [r2, #20]
 800d1b6:	e7f7      	b.n	800d1a8 <PixelPatterns::Increment(unsigned int)+0x1c>
 800d1b8:	3b01      	subs	r3, #1
 800d1ba:	614b      	str	r3, [r1, #20]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d1f3      	bne.n	800d1a8 <PixelPatterns::Increment(unsigned int)+0x1c>
 800d1c0:	e7f4      	b.n	800d1ac <PixelPatterns::Increment(unsigned int)+0x20>
 800d1c2:	bf00      	nop
 800d1c4:	2000191c 	andcs	r1, r0, ip, lsl r9

0800d1c8 <PixelPatterns::RainbowCycleUpdate(unsigned int)>:
 800d1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1cc:	4604      	mov	r4, r0
 800d1ce:	460d      	mov	r5, r1
 800d1d0:	2600      	movs	r6, #0
 800d1d2:	4b10      	ldr	r3, [pc, #64]	; (800d214 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x4c>)
 800d1d4:	f8df 8040 	ldr.w	r8, [pc, #64]	; 800d218 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x50>
 800d1d8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d1dc:	695f      	ldr	r7, [r3, #20]
 800d1de:	f8d8 1000 	ldr.w	r1, [r8]
 800d1e2:	b2b2      	uxth	r2, r6
 800d1e4:	4291      	cmp	r1, r2
 800d1e6:	f106 0601 	add.w	r6, r6, #1
 800d1ea:	d90c      	bls.n	800d206 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x3e>
 800d1ec:	0213      	lsls	r3, r2, #8
 800d1ee:	fbb3 f3f1 	udiv	r3, r3, r1
 800d1f2:	443b      	add	r3, r7
 800d1f4:	b2d9      	uxtb	r1, r3
 800d1f6:	4620      	mov	r0, r4
 800d1f8:	f7ff ffa0 	bl	800d13c <PixelPatterns::Wheel(unsigned char)>
 800d1fc:	4601      	mov	r1, r0
 800d1fe:	4610      	mov	r0, r2
 800d200:	f7ff feba 	bl	800cf78 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800d204:	e7eb      	b.n	800d1de <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x16>
 800d206:	4629      	mov	r1, r5
 800d208:	4620      	mov	r0, r4
 800d20a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d20e:	f7ff bfbd 	b.w	800d18c <PixelPatterns::Increment(unsigned int)>
 800d212:	bf00      	nop
 800d214:	2000191c 	andcs	r1, r0, ip, lsl r9
 800d218:	20001944 	andcs	r1, r0, r4, asr #18

0800d21c <PixelPatterns::TheaterChaseUpdate(unsigned int)>:
 800d21c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d220:	4605      	mov	r5, r0
 800d222:	460c      	mov	r4, r1
 800d224:	f04f 0b00 	mov.w	fp, #0
 800d228:	4b12      	ldr	r3, [pc, #72]	; (800d274 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x58>)
 800d22a:	f8df 904c 	ldr.w	r9, [pc, #76]	; 800d278 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x5c>
 800d22e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d232:	f8d3 8014 	ldr.w	r8, [r3, #20]
 800d236:	f8df a044 	ldr.w	sl, [pc, #68]	; 800d27c <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x60>
 800d23a:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
 800d23e:	f8d9 3000 	ldr.w	r3, [r9]
 800d242:	fa1f f08b 	uxth.w	r0, fp
 800d246:	4283      	cmp	r3, r0
 800d248:	d90d      	bls.n	800d266 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x4a>
 800d24a:	eb08 0300 	add.w	r3, r8, r0
 800d24e:	fb0a f303 	mul.w	r3, sl, r3
 800d252:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 800d256:	bf94      	ite	ls
 800d258:	4631      	movls	r1, r6
 800d25a:	4639      	movhi	r1, r7
 800d25c:	f7ff fe8c 	bl	800cf78 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800d260:	f10b 0b01 	add.w	fp, fp, #1
 800d264:	e7eb      	b.n	800d23e <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x22>
 800d266:	4621      	mov	r1, r4
 800d268:	4628      	mov	r0, r5
 800d26a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d26e:	f7ff bf8d 	b.w	800d18c <PixelPatterns::Increment(unsigned int)>
 800d272:	bf00      	nop
 800d274:	2000191c 	andcs	r1, r0, ip, lsl r9
 800d278:	20001944 	andcs	r1, r0, r4, asr #18
 800d27c:	aaaaaaab 	bge	6ab7d30 <__stack_size+0x6ab6530>

0800d280 <PixelPatterns::ColourWipeUpdate(unsigned int)>:
 800d280:	b538      	push	{r3, r4, r5, lr}
 800d282:	4605      	mov	r5, r0
 800d284:	460c      	mov	r4, r1
 800d286:	4b06      	ldr	r3, [pc, #24]	; (800d2a0 <PixelPatterns::ColourWipeUpdate(unsigned int)+0x20>)
 800d288:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d28c:	6899      	ldr	r1, [r3, #8]
 800d28e:	6958      	ldr	r0, [r3, #20]
 800d290:	f7ff fe72 	bl	800cf78 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800d294:	4621      	mov	r1, r4
 800d296:	4628      	mov	r0, r5
 800d298:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d29c:	f7ff bf76 	b.w	800d18c <PixelPatterns::Increment(unsigned int)>
 800d2a0:	2000191c 	andcs	r1, r0, ip, lsl r9

0800d2a4 <PixelPatterns::ScannerUpdate(unsigned int)>:
 800d2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2a8:	460d      	mov	r5, r1
 800d2aa:	f04f 0900 	mov.w	r9, #0
 800d2ae:	4a27      	ldr	r2, [pc, #156]	; (800d34c <PixelPatterns::ScannerUpdate(unsigned int)+0xa8>)
 800d2b0:	b085      	sub	sp, #20
 800d2b2:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 800d2b6:	e9d2 7604 	ldrd	r7, r6, [r2, #16]
 800d2ba:	f8d2 a008 	ldr.w	sl, [r2, #8]
 800d2be:	00b3      	lsls	r3, r6, #2
 800d2c0:	f8df b08c 	ldr.w	fp, [pc, #140]	; 800d350 <PixelPatterns::ScannerUpdate(unsigned int)+0xac>
 800d2c4:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800d354 <PixelPatterns::ScannerUpdate(unsigned int)+0xb0>
 800d2c8:	9002      	str	r0, [sp, #8]
 800d2ca:	9301      	str	r3, [sp, #4]
 800d2cc:	1bbf      	subs	r7, r7, r6
 800d2ce:	f8db 1000 	ldr.w	r1, [fp]
 800d2d2:	fa1f f489 	uxth.w	r4, r9
 800d2d6:	42a1      	cmp	r1, r4
 800d2d8:	d930      	bls.n	800d33c <PixelPatterns::ScannerUpdate(unsigned int)+0x98>
 800d2da:	42a6      	cmp	r6, r4
 800d2dc:	d10b      	bne.n	800d2f6 <PixelPatterns::ScannerUpdate(unsigned int)+0x52>
 800d2de:	4651      	mov	r1, sl
 800d2e0:	4630      	mov	r0, r6
 800d2e2:	f7ff fe49 	bl	800cf78 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800d2e6:	f8d8 1000 	ldr.w	r1, [r8]
 800d2ea:	9b01      	ldr	r3, [sp, #4]
 800d2ec:	f841 a003 	str.w	sl, [r1, r3]
 800d2f0:	f109 0901 	add.w	r9, r9, #1
 800d2f4:	e7eb      	b.n	800d2ce <PixelPatterns::ScannerUpdate(unsigned int)+0x2a>
 800d2f6:	42a7      	cmp	r7, r4
 800d2f8:	d108      	bne.n	800d30c <PixelPatterns::ScannerUpdate(unsigned int)+0x68>
 800d2fa:	4651      	mov	r1, sl
 800d2fc:	4638      	mov	r0, r7
 800d2fe:	f7ff fe3b 	bl	800cf78 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800d302:	f8d8 1000 	ldr.w	r1, [r8]
 800d306:	f841 a024 	str.w	sl, [r1, r4, lsl #2]
 800d30a:	e7f1      	b.n	800d2f0 <PixelPatterns::ScannerUpdate(unsigned int)+0x4c>
 800d30c:	f8d8 1000 	ldr.w	r1, [r8]
 800d310:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 800d314:	f3c0 2146 	ubfx	r1, r0, #9, #7
 800d318:	f3c0 4c46 	ubfx	ip, r0, #17, #7
 800d31c:	0209      	lsls	r1, r1, #8
 800d31e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800d322:	f3c0 0046 	ubfx	r0, r0, #1, #7
 800d326:	4301      	orrs	r1, r0
 800d328:	4620      	mov	r0, r4
 800d32a:	9103      	str	r1, [sp, #12]
 800d32c:	f7ff fe24 	bl	800cf78 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800d330:	f8d8 0000 	ldr.w	r0, [r8]
 800d334:	9903      	ldr	r1, [sp, #12]
 800d336:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 800d33a:	e7d9      	b.n	800d2f0 <PixelPatterns::ScannerUpdate(unsigned int)+0x4c>
 800d33c:	4629      	mov	r1, r5
 800d33e:	9802      	ldr	r0, [sp, #8]
 800d340:	b005      	add	sp, #20
 800d342:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d346:	f7ff bf21 	b.w	800d18c <PixelPatterns::Increment(unsigned int)>
 800d34a:	bf00      	nop
 800d34c:	2000191c 	andcs	r1, r0, ip, lsl r9
 800d350:	20001944 	andcs	r1, r0, r4, asr #18
 800d354:	20001940 	andcs	r1, r0, r0, asr #18

0800d358 <PixelPatterns::FadeUpdate(unsigned int)>:
 800d358:	4a21      	ldr	r2, [pc, #132]	; (800d3e0 <PixelPatterns::FadeUpdate(unsigned int)+0x88>)
 800d35a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d35e:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 800d362:	4605      	mov	r5, r0
 800d364:	e9d2 3002 	ldrd	r3, r0, [r2, #8]
 800d368:	460c      	mov	r4, r1
 800d36a:	e9d2 6104 	ldrd	r6, r1, [r2, #16]
 800d36e:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800d372:	434a      	muls	r2, r1
 800d374:	1a77      	subs	r7, r6, r1
 800d376:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 800d37a:	fb07 220c 	mla	r2, r7, ip, r2
 800d37e:	fbb2 f2f6 	udiv	r2, r2, r6
 800d382:	0212      	lsls	r2, r2, #8
 800d384:	fa1f fc82 	uxth.w	ip, r2
 800d388:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800d38c:	434a      	muls	r2, r1
 800d38e:	f3c3 4e07 	ubfx	lr, r3, #16, #8
 800d392:	fb07 220e 	mla	r2, r7, lr, r2
 800d396:	fbb2 f2f6 	udiv	r2, r2, r6
 800d39a:	0412      	lsls	r2, r2, #16
 800d39c:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800d3a0:	ea4c 0202 	orr.w	r2, ip, r2
 800d3a4:	fa5f fc83 	uxtb.w	ip, r3
 800d3a8:	b2c3      	uxtb	r3, r0
 800d3aa:	434b      	muls	r3, r1
 800d3ac:	fb07 330c 	mla	r3, r7, ip, r3
 800d3b0:	fbb3 f3f6 	udiv	r3, r3, r6
 800d3b4:	2700      	movs	r7, #0
 800d3b6:	b2db      	uxtb	r3, r3
 800d3b8:	f8df 8028 	ldr.w	r8, [pc, #40]	; 800d3e4 <PixelPatterns::FadeUpdate(unsigned int)+0x8c>
 800d3bc:	ea42 0603 	orr.w	r6, r2, r3
 800d3c0:	f8d8 3000 	ldr.w	r3, [r8]
 800d3c4:	42bb      	cmp	r3, r7
 800d3c6:	d905      	bls.n	800d3d4 <PixelPatterns::FadeUpdate(unsigned int)+0x7c>
 800d3c8:	4638      	mov	r0, r7
 800d3ca:	4631      	mov	r1, r6
 800d3cc:	f7ff fdd4 	bl	800cf78 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800d3d0:	3701      	adds	r7, #1
 800d3d2:	e7f5      	b.n	800d3c0 <PixelPatterns::FadeUpdate(unsigned int)+0x68>
 800d3d4:	4621      	mov	r1, r4
 800d3d6:	4628      	mov	r0, r5
 800d3d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3dc:	f7ff bed6 	b.w	800d18c <PixelPatterns::Increment(unsigned int)>
 800d3e0:	2000191c 	andcs	r1, r0, ip, lsl r9
 800d3e4:	20001944 	andcs	r1, r0, r4, asr #18

0800d3e8 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>:
 800d3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ea:	4b12      	ldr	r3, [pc, #72]	; (800d434 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x4c>)
 800d3ec:	014e      	lsls	r6, r1, #5
 800d3ee:	599c      	ldr	r4, [r3, r6]
 800d3f0:	eb03 1541 	add.w	r5, r3, r1, lsl #5
 800d3f4:	686f      	ldr	r7, [r5, #4]
 800d3f6:	1b14      	subs	r4, r2, r4
 800d3f8:	42bc      	cmp	r4, r7
 800d3fa:	d319      	bcc.n	800d430 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 800d3fc:	519a      	str	r2, [r3, r6]
 800d3fe:	69eb      	ldr	r3, [r5, #28]
 800d400:	3b01      	subs	r3, #1
 800d402:	2b04      	cmp	r3, #4
 800d404:	d814      	bhi.n	800d430 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 800d406:	e8df f003 	tbb	[pc, r3]
 800d40a:	0d0a0703 	stceq	7, cr0, [sl, #-12]
 800d40e:	f7ff0010 			; <UNDEFINED> instruction: 0xf7ff0010
 800d412:	feda 2001 	cdp2	0, 13, cr2, cr10, cr1, {0}
 800d416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d418:	f7ff ff00 	bl	800d21c <PixelPatterns::TheaterChaseUpdate(unsigned int)>
 800d41c:	e7fa      	b.n	800d414 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800d41e:	f7ff ff2f 	bl	800d280 <PixelPatterns::ColourWipeUpdate(unsigned int)>
 800d422:	e7f7      	b.n	800d414 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800d424:	f7ff ff3e 	bl	800d2a4 <PixelPatterns::ScannerUpdate(unsigned int)>
 800d428:	e7f4      	b.n	800d414 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800d42a:	f7ff ff95 	bl	800d358 <PixelPatterns::FadeUpdate(unsigned int)>
 800d42e:	e7f1      	b.n	800d414 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800d430:	2000      	movs	r0, #0
 800d432:	e7f0      	b.n	800d416 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2e>
 800d434:	2000191c 	andcs	r1, r0, ip, lsl r9

0800d438 <PixelPatterns::Run()>:
 800d438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d43c:	4605      	mov	r5, r0
 800d43e:	f008 fa6b 	bl	8015918 <gd32_spi_dma_tx_is_active()>
 800d442:	4604      	mov	r4, r0
 800d444:	b9c8      	cbnz	r0, 800d47a <PixelPatterns::Run()+0x42>
 800d446:	4606      	mov	r6, r0
 800d448:	4b0d      	ldr	r3, [pc, #52]	; (800d480 <PixelPatterns::Run()+0x48>)
 800d44a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 800d484 <PixelPatterns::Run()+0x4c>
 800d44e:	681f      	ldr	r7, [r3, #0]
 800d450:	f8d8 3000 	ldr.w	r3, [r8]
 800d454:	b2f1      	uxtb	r1, r6
 800d456:	428b      	cmp	r3, r1
 800d458:	f106 0601 	add.w	r6, r6, #1
 800d45c:	d906      	bls.n	800d46c <PixelPatterns::Run()+0x34>
 800d45e:	463a      	mov	r2, r7
 800d460:	4628      	mov	r0, r5
 800d462:	f7ff ffc1 	bl	800d3e8 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>
 800d466:	4304      	orrs	r4, r0
 800d468:	b2e4      	uxtb	r4, r4
 800d46a:	e7f1      	b.n	800d450 <PixelPatterns::Run()+0x18>
 800d46c:	b12c      	cbz	r4, 800d47a <PixelPatterns::Run()+0x42>
 800d46e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d472:	4b05      	ldr	r3, [pc, #20]	; (800d488 <PixelPatterns::Run()+0x50>)
 800d474:	6818      	ldr	r0, [r3, #0]
 800d476:	f000 bf69 	b.w	800e34c <WS28xx::Update()>
 800d47a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d47e:	bf00      	nop
 800d480:	2000a9dc 	ldrdcs	sl, [r0], -ip
 800d484:	2000193c 	andcs	r1, r0, ip, lsr r9
 800d488:	20001948 	andcs	r1, r0, r8, asr #18

0800d48c <PixelType::GetType(pixel::Type)>:
 800d48c:	280d      	cmp	r0, #13
 800d48e:	bfda      	itte	le
 800d490:	4b02      	ldrle	r3, [pc, #8]	; (800d49c <PixelType::GetType(pixel::Type)+0x10>)
 800d492:	eb03 00c0 	addle.w	r0, r3, r0, lsl #3
 800d496:	4802      	ldrgt	r0, [pc, #8]	; (800d4a0 <PixelType::GetType(pixel::Type)+0x14>)
 800d498:	4770      	bx	lr
 800d49a:	bf00      	nop
 800d49c:	08016f09 	stmdaeq	r1, {r0, r3, r8, r9, sl, fp, sp, lr}
 800d4a0:	08016e8b 	stmdaeq	r1, {r0, r1, r3, r7, r9, sl, fp, sp, lr}

0800d4a4 <PixelType::GetType(char const*)>:
 800d4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4a6:	4604      	mov	r4, r0
 800d4a8:	2000      	movs	r0, #0
 800d4aa:	490f      	ldr	r1, [pc, #60]	; (800d4e8 <PixelType::GetType(char const*)+0x44>)
 800d4ac:	1e66      	subs	r6, r4, #1
 800d4ae:	1e4d      	subs	r5, r1, #1
 800d4b0:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800d4b4:	461f      	mov	r7, r3
 800d4b6:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d4ba:	2a19      	cmp	r2, #25
 800d4bc:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800d4c0:	bf98      	it	ls
 800d4c2:	f103 0720 	addls.w	r7, r3, #32
 800d4c6:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
 800d4ca:	f1bc 0f19 	cmp.w	ip, #25
 800d4ce:	bf98      	it	ls
 800d4d0:	3220      	addls	r2, #32
 800d4d2:	42ba      	cmp	r2, r7
 800d4d4:	d102      	bne.n	800d4dc <PixelType::GetType(char const*)+0x38>
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d1ea      	bne.n	800d4b0 <PixelType::GetType(char const*)+0xc>
 800d4da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4dc:	3001      	adds	r0, #1
 800d4de:	280e      	cmp	r0, #14
 800d4e0:	f101 0108 	add.w	r1, r1, #8
 800d4e4:	d1e2      	bne.n	800d4ac <PixelType::GetType(char const*)+0x8>
 800d4e6:	e7f8      	b.n	800d4da <PixelType::GetType(char const*)+0x36>
 800d4e8:	08016f09 	stmdaeq	r1, {r0, r3, r8, r9, sl, fp, sp, lr}

0800d4ec <PixelType::GetMap(char const*)>:
 800d4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4ee:	4605      	mov	r5, r0
 800d4f0:	2000      	movs	r0, #0
 800d4f2:	4b11      	ldr	r3, [pc, #68]	; (800d538 <PixelType::GetMap(char const*)+0x4c>)
 800d4f4:	1e5c      	subs	r4, r3, #1
 800d4f6:	1e6e      	subs	r6, r5, #1
 800d4f8:	f103 0c02 	add.w	ip, r3, #2
 800d4fc:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 800d500:	4617      	mov	r7, r2
 800d502:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 800d506:	2919      	cmp	r1, #25
 800d508:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d50c:	bf98      	it	ls
 800d50e:	f102 0720 	addls.w	r7, r2, #32
 800d512:	f1a1 0e41 	sub.w	lr, r1, #65	; 0x41
 800d516:	f1be 0f19 	cmp.w	lr, #25
 800d51a:	bf98      	it	ls
 800d51c:	3120      	addls	r1, #32
 800d51e:	42b9      	cmp	r1, r7
 800d520:	d005      	beq.n	800d52e <PixelType::GetMap(char const*)+0x42>
 800d522:	3001      	adds	r0, #1
 800d524:	2806      	cmp	r0, #6
 800d526:	f103 0304 	add.w	r3, r3, #4
 800d52a:	d1e3      	bne.n	800d4f4 <PixelType::GetMap(char const*)+0x8>
 800d52c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d52e:	2a00      	cmp	r2, #0
 800d530:	d0fc      	beq.n	800d52c <PixelType::GetMap(char const*)+0x40>
 800d532:	4564      	cmp	r4, ip
 800d534:	d1e2      	bne.n	800d4fc <PixelType::GetMap(char const*)+0x10>
 800d536:	e7f9      	b.n	800d52c <PixelType::GetMap(char const*)+0x40>
 800d538:	08016ef1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r9, sl, fp, sp, lr}

0800d53c <PixelType::GetMap(pixel::Map)>:
 800d53c:	2805      	cmp	r0, #5
 800d53e:	bfda      	itte	le
 800d540:	4b02      	ldrle	r3, [pc, #8]	; (800d54c <PixelType::GetMap(pixel::Map)+0x10>)
 800d542:	eb03 0080 	addle.w	r0, r3, r0, lsl #2
 800d546:	4802      	ldrgt	r0, [pc, #8]	; (800d550 <PixelType::GetMap(pixel::Map)+0x14>)
 800d548:	4770      	bx	lr
 800d54a:	bf00      	nop
 800d54c:	08016ef1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r9, sl, fp, sp, lr}
 800d550:	08016ee7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r9, sl, fp, sp, lr}

0800d554 <PixelType::ConvertTxH(unsigned char)>:
 800d554:	28f0      	cmp	r0, #240	; 0xf0
 800d556:	d010      	beq.n	800d57a <PixelType::ConvertTxH(unsigned char)+0x26>
 800d558:	d807      	bhi.n	800d56a <PixelType::ConvertTxH(unsigned char)+0x16>
 800d55a:	28c0      	cmp	r0, #192	; 0xc0
 800d55c:	d00f      	beq.n	800d57e <PixelType::ConvertTxH(unsigned char)+0x2a>
 800d55e:	28e0      	cmp	r0, #224	; 0xe0
 800d560:	d00f      	beq.n	800d582 <PixelType::ConvertTxH(unsigned char)+0x2e>
 800d562:	2880      	cmp	r0, #128	; 0x80
 800d564:	d113      	bne.n	800d58e <PixelType::ConvertTxH(unsigned char)+0x3a>
 800d566:	480b      	ldr	r0, [pc, #44]	; (800d594 <PixelType::ConvertTxH(unsigned char)+0x40>)
 800d568:	4770      	bx	lr
 800d56a:	28fc      	cmp	r0, #252	; 0xfc
 800d56c:	d00b      	beq.n	800d586 <PixelType::ConvertTxH(unsigned char)+0x32>
 800d56e:	28fe      	cmp	r0, #254	; 0xfe
 800d570:	d00b      	beq.n	800d58a <PixelType::ConvertTxH(unsigned char)+0x36>
 800d572:	28f8      	cmp	r0, #248	; 0xf8
 800d574:	d10b      	bne.n	800d58e <PixelType::ConvertTxH(unsigned char)+0x3a>
 800d576:	4808      	ldr	r0, [pc, #32]	; (800d598 <PixelType::ConvertTxH(unsigned char)+0x44>)
 800d578:	4770      	bx	lr
 800d57a:	4808      	ldr	r0, [pc, #32]	; (800d59c <PixelType::ConvertTxH(unsigned char)+0x48>)
 800d57c:	4770      	bx	lr
 800d57e:	4808      	ldr	r0, [pc, #32]	; (800d5a0 <PixelType::ConvertTxH(unsigned char)+0x4c>)
 800d580:	4770      	bx	lr
 800d582:	4808      	ldr	r0, [pc, #32]	; (800d5a4 <PixelType::ConvertTxH(unsigned char)+0x50>)
 800d584:	4770      	bx	lr
 800d586:	4808      	ldr	r0, [pc, #32]	; (800d5a8 <PixelType::ConvertTxH(unsigned char)+0x54>)
 800d588:	4770      	bx	lr
 800d58a:	4808      	ldr	r0, [pc, #32]	; (800d5ac <PixelType::ConvertTxH(unsigned char)+0x58>)
 800d58c:	4770      	bx	lr
 800d58e:	2000      	movs	r0, #0
 800d590:	4770      	bx	lr
 800d592:	bf00      	nop
 800d594:	3e200000 	cdpcc	0, 2, cr0, cr0, cr0, {0}
 800d598:	3f480000 	svccc	0x00480000
 800d59c:	3f200000 	svccc	0x00200000
 800d5a0:	3ea00000 	cdpcc	0, 10, cr0, cr0, cr0, {0}
 800d5a4:	3ef00000 	cdpcc	0, 15, cr0, cr0, cr0, {0}
 800d5a8:	3f700000 	svccc	0x00700000
 800d5ac:	3f8c0000 	svccc	0x008c0000

0800d5b0 <PixelType::ConvertTxH(float)>:
 800d5b0:	b510      	push	{r4, lr}
 800d5b2:	491d      	ldr	r1, [pc, #116]	; (800d628 <PixelType::ConvertTxH(float)+0x78>)
 800d5b4:	4604      	mov	r4, r0
 800d5b6:	f7f9 ff77 	bl	80074a8 <__aeabi_fcmplt>
 800d5ba:	bb30      	cbnz	r0, 800d60a <PixelType::ConvertTxH(float)+0x5a>
 800d5bc:	4620      	mov	r0, r4
 800d5be:	491b      	ldr	r1, [pc, #108]	; (800d62c <PixelType::ConvertTxH(float)+0x7c>)
 800d5c0:	f7f9 ff72 	bl	80074a8 <__aeabi_fcmplt>
 800d5c4:	bb18      	cbnz	r0, 800d60e <PixelType::ConvertTxH(float)+0x5e>
 800d5c6:	4620      	mov	r0, r4
 800d5c8:	4919      	ldr	r1, [pc, #100]	; (800d630 <PixelType::ConvertTxH(float)+0x80>)
 800d5ca:	f7f9 ff6d 	bl	80074a8 <__aeabi_fcmplt>
 800d5ce:	bb00      	cbnz	r0, 800d612 <PixelType::ConvertTxH(float)+0x62>
 800d5d0:	4620      	mov	r0, r4
 800d5d2:	4918      	ldr	r1, [pc, #96]	; (800d634 <PixelType::ConvertTxH(float)+0x84>)
 800d5d4:	f7f9 ff68 	bl	80074a8 <__aeabi_fcmplt>
 800d5d8:	b9e8      	cbnz	r0, 800d616 <PixelType::ConvertTxH(float)+0x66>
 800d5da:	4620      	mov	r0, r4
 800d5dc:	4916      	ldr	r1, [pc, #88]	; (800d638 <PixelType::ConvertTxH(float)+0x88>)
 800d5de:	f7f9 ff63 	bl	80074a8 <__aeabi_fcmplt>
 800d5e2:	b9d0      	cbnz	r0, 800d61a <PixelType::ConvertTxH(float)+0x6a>
 800d5e4:	4620      	mov	r0, r4
 800d5e6:	4915      	ldr	r1, [pc, #84]	; (800d63c <PixelType::ConvertTxH(float)+0x8c>)
 800d5e8:	f7f9 ff5e 	bl	80074a8 <__aeabi_fcmplt>
 800d5ec:	b9b8      	cbnz	r0, 800d61e <PixelType::ConvertTxH(float)+0x6e>
 800d5ee:	4620      	mov	r0, r4
 800d5f0:	4913      	ldr	r1, [pc, #76]	; (800d640 <PixelType::ConvertTxH(float)+0x90>)
 800d5f2:	f7f9 ff59 	bl	80074a8 <__aeabi_fcmplt>
 800d5f6:	b9a0      	cbnz	r0, 800d622 <PixelType::ConvertTxH(float)+0x72>
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	4912      	ldr	r1, [pc, #72]	; (800d644 <PixelType::ConvertTxH(float)+0x94>)
 800d5fc:	f7f9 ff54 	bl	80074a8 <__aeabi_fcmplt>
 800d600:	2800      	cmp	r0, #0
 800d602:	bf14      	ite	ne
 800d604:	20fe      	movne	r0, #254	; 0xfe
 800d606:	2000      	moveq	r0, #0
 800d608:	bd10      	pop	{r4, pc}
 800d60a:	2000      	movs	r0, #0
 800d60c:	e7fc      	b.n	800d608 <PixelType::ConvertTxH(float)+0x58>
 800d60e:	2080      	movs	r0, #128	; 0x80
 800d610:	e7fa      	b.n	800d608 <PixelType::ConvertTxH(float)+0x58>
 800d612:	20c0      	movs	r0, #192	; 0xc0
 800d614:	e7f8      	b.n	800d608 <PixelType::ConvertTxH(float)+0x58>
 800d616:	20e0      	movs	r0, #224	; 0xe0
 800d618:	e7f6      	b.n	800d608 <PixelType::ConvertTxH(float)+0x58>
 800d61a:	20f0      	movs	r0, #240	; 0xf0
 800d61c:	e7f4      	b.n	800d608 <PixelType::ConvertTxH(float)+0x58>
 800d61e:	20f8      	movs	r0, #248	; 0xf8
 800d620:	e7f2      	b.n	800d608 <PixelType::ConvertTxH(float)+0x58>
 800d622:	20fc      	movs	r0, #252	; 0xfc
 800d624:	e7f0      	b.n	800d608 <PixelType::ConvertTxH(float)+0x58>
 800d626:	bf00      	nop
 800d628:	3da00000 	stccc	0, cr0, [r0]
 800d62c:	3e700000 	cdpcc	0, 7, cr0, cr0, cr0, {0}
 800d630:	3ec80000 	cdpcc	0, 12, cr0, cr8, cr0, {0}
 800d634:	3f0c0000 	svccc	0x000c0000
 800d638:	3f340000 	svccc	0x00340000
 800d63c:	3f5c0000 	svccc	0x005c0000
 800d640:	3f820000 	svccc	0x00820000
 800d644:	3f960000 	svccc	0x00960000

0800d648 <WS28xx::Print()>:
 800d648:	b513      	push	{r0, r1, r4, lr}
 800d64a:	4604      	mov	r4, r0
 800d64c:	4819      	ldr	r0, [pc, #100]	; (800d6b4 <WS28xx::Print()+0x6c>)
 800d64e:	f7fb fb35 	bl	8008cbc <printf>
 800d652:	6820      	ldr	r0, [r4, #0]
 800d654:	f7ff ff1a 	bl	800d48c <PixelType::GetType(pixel::Type)>
 800d658:	6822      	ldr	r2, [r4, #0]
 800d65a:	4601      	mov	r1, r0
 800d65c:	4816      	ldr	r0, [pc, #88]	; (800d6b8 <WS28xx::Print()+0x70>)
 800d65e:	f7fb fb2d 	bl	8008cbc <printf>
 800d662:	6861      	ldr	r1, [r4, #4]
 800d664:	4815      	ldr	r0, [pc, #84]	; (800d6bc <WS28xx::Print()+0x74>)
 800d666:	f7fb fb29 	bl	8008cbc <printf>
 800d66a:	7ca3      	ldrb	r3, [r4, #18]
 800d66c:	b1fb      	cbz	r3, 800d6ae <WS28xx::Print()+0x66>
 800d66e:	68a0      	ldr	r0, [r4, #8]
 800d670:	f7ff ff64 	bl	800d53c <PixelType::GetMap(pixel::Map)>
 800d674:	68a2      	ldr	r2, [r4, #8]
 800d676:	4601      	mov	r1, r0
 800d678:	4811      	ldr	r0, [pc, #68]	; (800d6c0 <WS28xx::Print()+0x78>)
 800d67a:	f7fb fb1f 	bl	8008cbc <printf>
 800d67e:	7c20      	ldrb	r0, [r4, #16]
 800d680:	f7ff ff68 	bl	800d554 <PixelType::ConvertTxH(unsigned char)>
 800d684:	f7fa fa46 	bl	8007b14 <__aeabi_f2d>
 800d688:	460b      	mov	r3, r1
 800d68a:	7c21      	ldrb	r1, [r4, #16]
 800d68c:	4602      	mov	r2, r0
 800d68e:	9100      	str	r1, [sp, #0]
 800d690:	480c      	ldr	r0, [pc, #48]	; (800d6c4 <WS28xx::Print()+0x7c>)
 800d692:	f7fb fb13 	bl	8008cbc <printf>
 800d696:	7c60      	ldrb	r0, [r4, #17]
 800d698:	f7ff ff5c 	bl	800d554 <PixelType::ConvertTxH(unsigned char)>
 800d69c:	f7fa fa3a 	bl	8007b14 <__aeabi_f2d>
 800d6a0:	460b      	mov	r3, r1
 800d6a2:	7c61      	ldrb	r1, [r4, #17]
 800d6a4:	4602      	mov	r2, r0
 800d6a6:	9100      	str	r1, [sp, #0]
 800d6a8:	4807      	ldr	r0, [pc, #28]	; (800d6c8 <WS28xx::Print()+0x80>)
 800d6aa:	f7fb fb07 	bl	8008cbc <printf>
 800d6ae:	b002      	add	sp, #8
 800d6b0:	bd10      	pop	{r4, pc}
 800d6b2:	bf00      	nop
 800d6b4:	08016f79 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, r9, sl, fp, sp, lr}
 800d6b8:	08016f8b 	stmdaeq	r1, {r0, r1, r3, r7, r8, r9, sl, fp, sp, lr}
 800d6bc:	08016f9f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r8, r9, sl, fp, sp, lr}
 800d6c0:	08016fae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, r9, sl, fp, sp, lr}
 800d6c4:	08016fc2 	stmdaeq	r1, {r1, r6, r7, r8, r9, sl, fp, sp, lr}
 800d6c8:	08016fda 	stmdaeq	r1, {r1, r3, r4, r6, r7, r8, r9, sl, fp, sp, lr}

0800d6cc <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>:
 800d6cc:	b530      	push	{r4, r5, lr}
 800d6ce:	7c84      	ldrb	r4, [r0, #18]
 800d6d0:	f89d c00c 	ldrb.w	ip, [sp, #12]
 800d6d4:	b994      	cbnz	r4, 800d6fc <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x30>
 800d6d6:	6804      	ldr	r4, [r0, #0]
 800d6d8:	f1a4 0e0b 	sub.w	lr, r4, #11
 800d6dc:	f1be 0f01 	cmp.w	lr, #1
 800d6e0:	d93d      	bls.n	800d75e <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x92>
 800d6e2:	b9d4      	cbnz	r4, 800d71a <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x4e>
 800d6e4:	6944      	ldr	r4, [r0, #20]
 800d6e6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d6ea:	5462      	strb	r2, [r4, r1]
 800d6ec:	6942      	ldr	r2, [r0, #20]
 800d6ee:	440a      	add	r2, r1
 800d6f0:	7053      	strb	r3, [r2, #1]
 800d6f2:	6943      	ldr	r3, [r0, #20]
 800d6f4:	4419      	add	r1, r3
 800d6f6:	f881 c002 	strb.w	ip, [r1, #2]
 800d6fa:	bd30      	pop	{r4, r5, pc}
 800d6fc:	6884      	ldr	r4, [r0, #8]
 800d6fe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d702:	00c9      	lsls	r1, r1, #3
 800d704:	2c05      	cmp	r4, #5
 800d706:	f200 812d 	bhi.w	800d964 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x298>
 800d70a:	e8df f014 	tbh	[pc, r4, lsl #1]
 800d70e:	02ed012b 	rsceq	r0, sp, #-1073741814	; 0xc000000a
 800d712:	04140384 	ldreq	r0, [r4], #-900	; 0xfffffc7c
 800d716:	0202003b 	andeq	r0, r2, #59	; 0x3b
 800d71a:	ea6f 0e9c 	mvn.w	lr, ip, lsr #2
 800d71e:	ea6f 1413 	mvn.w	r4, r3, lsr #4
 800d722:	f082 05c0 	eor.w	r5, r2, #192	; 0xc0
 800d726:	f00e 0e30 	and.w	lr, lr, #48	; 0x30
 800d72a:	f004 040c 	and.w	r4, r4, #12
 800d72e:	ea4e 1e95 	orr.w	lr, lr, r5, lsr #6
 800d732:	ea4e 0e04 	orr.w	lr, lr, r4
 800d736:	6944      	ldr	r4, [r0, #20]
 800d738:	3101      	adds	r1, #1
 800d73a:	f06e 0e3f 	orn	lr, lr, #63	; 0x3f
 800d73e:	f804 e021 	strb.w	lr, [r4, r1, lsl #2]
 800d742:	6944      	ldr	r4, [r0, #20]
 800d744:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800d748:	f884 c001 	strb.w	ip, [r4, #1]
 800d74c:	6944      	ldr	r4, [r0, #20]
 800d74e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800d752:	70a3      	strb	r3, [r4, #2]
 800d754:	6943      	ldr	r3, [r0, #20]
 800d756:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d75a:	70ca      	strb	r2, [r1, #3]
 800d75c:	bd30      	pop	{r4, r5, pc}
 800d75e:	6944      	ldr	r4, [r0, #20]
 800d760:	7cc5      	ldrb	r5, [r0, #19]
 800d762:	3101      	adds	r1, #1
 800d764:	f804 5021 	strb.w	r5, [r4, r1, lsl #2]
 800d768:	6944      	ldr	r4, [r0, #20]
 800d76a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800d76e:	7062      	strb	r2, [r4, #1]
 800d770:	6942      	ldr	r2, [r0, #20]
 800d772:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800d776:	7093      	strb	r3, [r2, #2]
 800d778:	6943      	ldr	r3, [r0, #20]
 800d77a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d77e:	f881 c003 	strb.w	ip, [r1, #3]
 800d782:	bd30      	pop	{r4, r5, pc}
 800d784:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800d788:	bf0c      	ite	eq
 800d78a:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800d78e:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800d792:	6945      	ldr	r5, [r0, #20]
 800d794:	1c4c      	adds	r4, r1, #1
 800d796:	f805 e004 	strb.w	lr, [r5, r4]
 800d79a:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800d79e:	bf0c      	ite	eq
 800d7a0:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800d7a4:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800d7a8:	6945      	ldr	r5, [r0, #20]
 800d7aa:	1c8c      	adds	r4, r1, #2
 800d7ac:	f805 e004 	strb.w	lr, [r5, r4]
 800d7b0:	f01c 0f20 	tst.w	ip, #32
 800d7b4:	bf0c      	ite	eq
 800d7b6:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800d7ba:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800d7be:	6945      	ldr	r5, [r0, #20]
 800d7c0:	1ccc      	adds	r4, r1, #3
 800d7c2:	f805 e004 	strb.w	lr, [r5, r4]
 800d7c6:	f01c 0f10 	tst.w	ip, #16
 800d7ca:	bf0c      	ite	eq
 800d7cc:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800d7d0:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800d7d4:	6945      	ldr	r5, [r0, #20]
 800d7d6:	1d0c      	adds	r4, r1, #4
 800d7d8:	f01c 0f08 	tst.w	ip, #8
 800d7dc:	f805 e004 	strb.w	lr, [r5, r4]
 800d7e0:	bf0c      	ite	eq
 800d7e2:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800d7e6:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800d7ea:	6945      	ldr	r5, [r0, #20]
 800d7ec:	1d4c      	adds	r4, r1, #5
 800d7ee:	f01c 0f04 	tst.w	ip, #4
 800d7f2:	f805 e004 	strb.w	lr, [r5, r4]
 800d7f6:	bf0c      	ite	eq
 800d7f8:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800d7fc:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800d800:	6945      	ldr	r5, [r0, #20]
 800d802:	1d8c      	adds	r4, r1, #6
 800d804:	f01c 0f02 	tst.w	ip, #2
 800d808:	f805 e004 	strb.w	lr, [r5, r4]
 800d80c:	bf0c      	ite	eq
 800d80e:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800d812:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800d816:	6945      	ldr	r5, [r0, #20]
 800d818:	1dcc      	adds	r4, r1, #7
 800d81a:	f01c 0f01 	tst.w	ip, #1
 800d81e:	f805 e004 	strb.w	lr, [r5, r4]
 800d822:	bf14      	ite	ne
 800d824:	f890 c011 	ldrbne.w	ip, [r0, #17]
 800d828:	f890 c010 	ldrbeq.w	ip, [r0, #16]
 800d82c:	6945      	ldr	r5, [r0, #20]
 800d82e:	f101 0408 	add.w	r4, r1, #8
 800d832:	f805 c004 	strb.w	ip, [r5, r4]
 800d836:	0615      	lsls	r5, r2, #24
 800d838:	bf54      	ite	pl
 800d83a:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800d83e:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800d842:	6945      	ldr	r5, [r0, #20]
 800d844:	f101 0409 	add.w	r4, r1, #9
 800d848:	f805 c004 	strb.w	ip, [r5, r4]
 800d84c:	0655      	lsls	r5, r2, #25
 800d84e:	bf54      	ite	pl
 800d850:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800d854:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800d858:	6945      	ldr	r5, [r0, #20]
 800d85a:	f101 040a 	add.w	r4, r1, #10
 800d85e:	f805 c004 	strb.w	ip, [r5, r4]
 800d862:	0695      	lsls	r5, r2, #26
 800d864:	bf54      	ite	pl
 800d866:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800d86a:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800d86e:	6945      	ldr	r5, [r0, #20]
 800d870:	f101 040b 	add.w	r4, r1, #11
 800d874:	f805 c004 	strb.w	ip, [r5, r4]
 800d878:	06d5      	lsls	r5, r2, #27
 800d87a:	bf54      	ite	pl
 800d87c:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800d880:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800d884:	6945      	ldr	r5, [r0, #20]
 800d886:	f101 040c 	add.w	r4, r1, #12
 800d88a:	f805 c004 	strb.w	ip, [r5, r4]
 800d88e:	0715      	lsls	r5, r2, #28
 800d890:	bf54      	ite	pl
 800d892:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800d896:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800d89a:	6945      	ldr	r5, [r0, #20]
 800d89c:	f101 040d 	add.w	r4, r1, #13
 800d8a0:	f805 c004 	strb.w	ip, [r5, r4]
 800d8a4:	0755      	lsls	r5, r2, #29
 800d8a6:	bf54      	ite	pl
 800d8a8:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800d8ac:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800d8b0:	6945      	ldr	r5, [r0, #20]
 800d8b2:	f101 040e 	add.w	r4, r1, #14
 800d8b6:	f805 c004 	strb.w	ip, [r5, r4]
 800d8ba:	0795      	lsls	r5, r2, #30
 800d8bc:	bf58      	it	pl
 800d8be:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800d8c2:	6945      	ldr	r5, [r0, #20]
 800d8c4:	bf48      	it	mi
 800d8c6:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800d8ca:	f101 040f 	add.w	r4, r1, #15
 800d8ce:	f805 c004 	strb.w	ip, [r5, r4]
 800d8d2:	07d5      	lsls	r5, r2, #31
 800d8d4:	bf4c      	ite	mi
 800d8d6:	7c45      	ldrbmi	r5, [r0, #17]
 800d8d8:	7c05      	ldrbpl	r5, [r0, #16]
 800d8da:	6942      	ldr	r2, [r0, #20]
 800d8dc:	f101 0410 	add.w	r4, r1, #16
 800d8e0:	5515      	strb	r5, [r2, r4]
 800d8e2:	061c      	lsls	r4, r3, #24
 800d8e4:	bf54      	ite	pl
 800d8e6:	7c05      	ldrbpl	r5, [r0, #16]
 800d8e8:	7c45      	ldrbmi	r5, [r0, #17]
 800d8ea:	6944      	ldr	r4, [r0, #20]
 800d8ec:	f101 0211 	add.w	r2, r1, #17
 800d8f0:	54a5      	strb	r5, [r4, r2]
 800d8f2:	065d      	lsls	r5, r3, #25
 800d8f4:	bf54      	ite	pl
 800d8f6:	7c05      	ldrbpl	r5, [r0, #16]
 800d8f8:	7c45      	ldrbmi	r5, [r0, #17]
 800d8fa:	6944      	ldr	r4, [r0, #20]
 800d8fc:	f101 0212 	add.w	r2, r1, #18
 800d900:	54a5      	strb	r5, [r4, r2]
 800d902:	069c      	lsls	r4, r3, #26
 800d904:	bf54      	ite	pl
 800d906:	7c05      	ldrbpl	r5, [r0, #16]
 800d908:	7c45      	ldrbmi	r5, [r0, #17]
 800d90a:	6944      	ldr	r4, [r0, #20]
 800d90c:	f101 0213 	add.w	r2, r1, #19
 800d910:	54a5      	strb	r5, [r4, r2]
 800d912:	06dd      	lsls	r5, r3, #27
 800d914:	bf54      	ite	pl
 800d916:	7c05      	ldrbpl	r5, [r0, #16]
 800d918:	7c45      	ldrbmi	r5, [r0, #17]
 800d91a:	6944      	ldr	r4, [r0, #20]
 800d91c:	f101 0214 	add.w	r2, r1, #20
 800d920:	54a5      	strb	r5, [r4, r2]
 800d922:	071c      	lsls	r4, r3, #28
 800d924:	bf54      	ite	pl
 800d926:	7c05      	ldrbpl	r5, [r0, #16]
 800d928:	7c45      	ldrbmi	r5, [r0, #17]
 800d92a:	6944      	ldr	r4, [r0, #20]
 800d92c:	f101 0215 	add.w	r2, r1, #21
 800d930:	54a5      	strb	r5, [r4, r2]
 800d932:	075d      	lsls	r5, r3, #29
 800d934:	bf54      	ite	pl
 800d936:	7c05      	ldrbpl	r5, [r0, #16]
 800d938:	7c45      	ldrbmi	r5, [r0, #17]
 800d93a:	6944      	ldr	r4, [r0, #20]
 800d93c:	f101 0216 	add.w	r2, r1, #22
 800d940:	54a5      	strb	r5, [r4, r2]
 800d942:	079c      	lsls	r4, r3, #30
 800d944:	bf54      	ite	pl
 800d946:	7c05      	ldrbpl	r5, [r0, #16]
 800d948:	7c45      	ldrbmi	r5, [r0, #17]
 800d94a:	6944      	ldr	r4, [r0, #20]
 800d94c:	f101 0217 	add.w	r2, r1, #23
 800d950:	54a5      	strb	r5, [r4, r2]
 800d952:	3118      	adds	r1, #24
 800d954:	f013 0f01 	tst.w	r3, #1
 800d958:	f000 80d9 	beq.w	800db0e <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x442>
 800d95c:	7c42      	ldrb	r2, [r0, #17]
 800d95e:	6943      	ldr	r3, [r0, #20]
 800d960:	545a      	strb	r2, [r3, r1]
 800d962:	bd30      	pop	{r4, r5, pc}
 800d964:	0615      	lsls	r5, r2, #24
 800d966:	bf54      	ite	pl
 800d968:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800d96c:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800d970:	6945      	ldr	r5, [r0, #20]
 800d972:	1c4c      	adds	r4, r1, #1
 800d974:	f805 e004 	strb.w	lr, [r5, r4]
 800d978:	0655      	lsls	r5, r2, #25
 800d97a:	bf54      	ite	pl
 800d97c:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800d980:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800d984:	6945      	ldr	r5, [r0, #20]
 800d986:	1c8c      	adds	r4, r1, #2
 800d988:	f805 e004 	strb.w	lr, [r5, r4]
 800d98c:	0695      	lsls	r5, r2, #26
 800d98e:	bf54      	ite	pl
 800d990:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800d994:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800d998:	6945      	ldr	r5, [r0, #20]
 800d99a:	1ccc      	adds	r4, r1, #3
 800d99c:	f805 e004 	strb.w	lr, [r5, r4]
 800d9a0:	06d5      	lsls	r5, r2, #27
 800d9a2:	bf54      	ite	pl
 800d9a4:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800d9a8:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800d9ac:	6945      	ldr	r5, [r0, #20]
 800d9ae:	1d0c      	adds	r4, r1, #4
 800d9b0:	f805 e004 	strb.w	lr, [r5, r4]
 800d9b4:	0715      	lsls	r5, r2, #28
 800d9b6:	bf54      	ite	pl
 800d9b8:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800d9bc:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800d9c0:	6945      	ldr	r5, [r0, #20]
 800d9c2:	1d4c      	adds	r4, r1, #5
 800d9c4:	f805 e004 	strb.w	lr, [r5, r4]
 800d9c8:	0755      	lsls	r5, r2, #29
 800d9ca:	bf54      	ite	pl
 800d9cc:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800d9d0:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800d9d4:	6945      	ldr	r5, [r0, #20]
 800d9d6:	1d8c      	adds	r4, r1, #6
 800d9d8:	f805 e004 	strb.w	lr, [r5, r4]
 800d9dc:	0795      	lsls	r5, r2, #30
 800d9de:	bf58      	it	pl
 800d9e0:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800d9e4:	6945      	ldr	r5, [r0, #20]
 800d9e6:	bf48      	it	mi
 800d9e8:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800d9ec:	1dcc      	adds	r4, r1, #7
 800d9ee:	f805 e004 	strb.w	lr, [r5, r4]
 800d9f2:	07d5      	lsls	r5, r2, #31
 800d9f4:	bf4c      	ite	mi
 800d9f6:	7c45      	ldrbmi	r5, [r0, #17]
 800d9f8:	7c05      	ldrbpl	r5, [r0, #16]
 800d9fa:	6942      	ldr	r2, [r0, #20]
 800d9fc:	f101 0408 	add.w	r4, r1, #8
 800da00:	5515      	strb	r5, [r2, r4]
 800da02:	061c      	lsls	r4, r3, #24
 800da04:	bf54      	ite	pl
 800da06:	7c05      	ldrbpl	r5, [r0, #16]
 800da08:	7c45      	ldrbmi	r5, [r0, #17]
 800da0a:	6944      	ldr	r4, [r0, #20]
 800da0c:	f101 0209 	add.w	r2, r1, #9
 800da10:	54a5      	strb	r5, [r4, r2]
 800da12:	065d      	lsls	r5, r3, #25
 800da14:	bf54      	ite	pl
 800da16:	7c05      	ldrbpl	r5, [r0, #16]
 800da18:	7c45      	ldrbmi	r5, [r0, #17]
 800da1a:	6944      	ldr	r4, [r0, #20]
 800da1c:	f101 020a 	add.w	r2, r1, #10
 800da20:	54a5      	strb	r5, [r4, r2]
 800da22:	069c      	lsls	r4, r3, #26
 800da24:	bf54      	ite	pl
 800da26:	7c05      	ldrbpl	r5, [r0, #16]
 800da28:	7c45      	ldrbmi	r5, [r0, #17]
 800da2a:	6944      	ldr	r4, [r0, #20]
 800da2c:	f101 020b 	add.w	r2, r1, #11
 800da30:	54a5      	strb	r5, [r4, r2]
 800da32:	06dd      	lsls	r5, r3, #27
 800da34:	bf54      	ite	pl
 800da36:	7c05      	ldrbpl	r5, [r0, #16]
 800da38:	7c45      	ldrbmi	r5, [r0, #17]
 800da3a:	6944      	ldr	r4, [r0, #20]
 800da3c:	f101 020c 	add.w	r2, r1, #12
 800da40:	54a5      	strb	r5, [r4, r2]
 800da42:	071c      	lsls	r4, r3, #28
 800da44:	bf54      	ite	pl
 800da46:	7c05      	ldrbpl	r5, [r0, #16]
 800da48:	7c45      	ldrbmi	r5, [r0, #17]
 800da4a:	6944      	ldr	r4, [r0, #20]
 800da4c:	f101 020d 	add.w	r2, r1, #13
 800da50:	54a5      	strb	r5, [r4, r2]
 800da52:	075d      	lsls	r5, r3, #29
 800da54:	bf54      	ite	pl
 800da56:	7c05      	ldrbpl	r5, [r0, #16]
 800da58:	7c45      	ldrbmi	r5, [r0, #17]
 800da5a:	6944      	ldr	r4, [r0, #20]
 800da5c:	f101 020e 	add.w	r2, r1, #14
 800da60:	54a5      	strb	r5, [r4, r2]
 800da62:	079c      	lsls	r4, r3, #30
 800da64:	bf58      	it	pl
 800da66:	7c05      	ldrbpl	r5, [r0, #16]
 800da68:	6944      	ldr	r4, [r0, #20]
 800da6a:	bf48      	it	mi
 800da6c:	7c45      	ldrbmi	r5, [r0, #17]
 800da6e:	f101 020f 	add.w	r2, r1, #15
 800da72:	54a5      	strb	r5, [r4, r2]
 800da74:	07db      	lsls	r3, r3, #31
 800da76:	bf4c      	ite	mi
 800da78:	7c44      	ldrbmi	r4, [r0, #17]
 800da7a:	7c04      	ldrbpl	r4, [r0, #16]
 800da7c:	6943      	ldr	r3, [r0, #20]
 800da7e:	f101 0210 	add.w	r2, r1, #16
 800da82:	549c      	strb	r4, [r3, r2]
 800da84:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800da88:	bf0c      	ite	eq
 800da8a:	7c04      	ldrbeq	r4, [r0, #16]
 800da8c:	7c44      	ldrbne	r4, [r0, #17]
 800da8e:	6942      	ldr	r2, [r0, #20]
 800da90:	f101 0311 	add.w	r3, r1, #17
 800da94:	54d4      	strb	r4, [r2, r3]
 800da96:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800da9a:	bf0c      	ite	eq
 800da9c:	7c04      	ldrbeq	r4, [r0, #16]
 800da9e:	7c44      	ldrbne	r4, [r0, #17]
 800daa0:	6942      	ldr	r2, [r0, #20]
 800daa2:	f101 0312 	add.w	r3, r1, #18
 800daa6:	54d4      	strb	r4, [r2, r3]
 800daa8:	f01c 0f20 	tst.w	ip, #32
 800daac:	bf0c      	ite	eq
 800daae:	7c04      	ldrbeq	r4, [r0, #16]
 800dab0:	7c44      	ldrbne	r4, [r0, #17]
 800dab2:	6942      	ldr	r2, [r0, #20]
 800dab4:	f101 0313 	add.w	r3, r1, #19
 800dab8:	54d4      	strb	r4, [r2, r3]
 800daba:	f01c 0f10 	tst.w	ip, #16
 800dabe:	bf0c      	ite	eq
 800dac0:	7c04      	ldrbeq	r4, [r0, #16]
 800dac2:	7c44      	ldrbne	r4, [r0, #17]
 800dac4:	6942      	ldr	r2, [r0, #20]
 800dac6:	f101 0314 	add.w	r3, r1, #20
 800daca:	54d4      	strb	r4, [r2, r3]
 800dacc:	f01c 0f08 	tst.w	ip, #8
 800dad0:	bf0c      	ite	eq
 800dad2:	7c04      	ldrbeq	r4, [r0, #16]
 800dad4:	7c44      	ldrbne	r4, [r0, #17]
 800dad6:	6942      	ldr	r2, [r0, #20]
 800dad8:	f101 0315 	add.w	r3, r1, #21
 800dadc:	54d4      	strb	r4, [r2, r3]
 800dade:	f01c 0f04 	tst.w	ip, #4
 800dae2:	bf0c      	ite	eq
 800dae4:	7c04      	ldrbeq	r4, [r0, #16]
 800dae6:	7c44      	ldrbne	r4, [r0, #17]
 800dae8:	6942      	ldr	r2, [r0, #20]
 800daea:	f101 0316 	add.w	r3, r1, #22
 800daee:	54d4      	strb	r4, [r2, r3]
 800daf0:	f01c 0f02 	tst.w	ip, #2
 800daf4:	bf0c      	ite	eq
 800daf6:	7c04      	ldrbeq	r4, [r0, #16]
 800daf8:	7c44      	ldrbne	r4, [r0, #17]
 800dafa:	6942      	ldr	r2, [r0, #20]
 800dafc:	f101 0317 	add.w	r3, r1, #23
 800db00:	f01c 0f01 	tst.w	ip, #1
 800db04:	54d4      	strb	r4, [r2, r3]
 800db06:	f101 0118 	add.w	r1, r1, #24
 800db0a:	f47f af27 	bne.w	800d95c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x290>
 800db0e:	7c02      	ldrb	r2, [r0, #16]
 800db10:	e725      	b.n	800d95e <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x292>
 800db12:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800db16:	bf0c      	ite	eq
 800db18:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800db1c:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800db20:	6945      	ldr	r5, [r0, #20]
 800db22:	1c4c      	adds	r4, r1, #1
 800db24:	f805 e004 	strb.w	lr, [r5, r4]
 800db28:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800db2c:	bf0c      	ite	eq
 800db2e:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800db32:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800db36:	6945      	ldr	r5, [r0, #20]
 800db38:	1c8c      	adds	r4, r1, #2
 800db3a:	f805 e004 	strb.w	lr, [r5, r4]
 800db3e:	f01c 0f20 	tst.w	ip, #32
 800db42:	bf0c      	ite	eq
 800db44:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800db48:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800db4c:	6945      	ldr	r5, [r0, #20]
 800db4e:	1ccc      	adds	r4, r1, #3
 800db50:	f805 e004 	strb.w	lr, [r5, r4]
 800db54:	f01c 0f10 	tst.w	ip, #16
 800db58:	bf0c      	ite	eq
 800db5a:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800db5e:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800db62:	6945      	ldr	r5, [r0, #20]
 800db64:	1d0c      	adds	r4, r1, #4
 800db66:	f01c 0f08 	tst.w	ip, #8
 800db6a:	f805 e004 	strb.w	lr, [r5, r4]
 800db6e:	bf0c      	ite	eq
 800db70:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800db74:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800db78:	6945      	ldr	r5, [r0, #20]
 800db7a:	1d4c      	adds	r4, r1, #5
 800db7c:	f01c 0f04 	tst.w	ip, #4
 800db80:	f805 e004 	strb.w	lr, [r5, r4]
 800db84:	bf0c      	ite	eq
 800db86:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800db8a:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800db8e:	6945      	ldr	r5, [r0, #20]
 800db90:	1d8c      	adds	r4, r1, #6
 800db92:	f01c 0f02 	tst.w	ip, #2
 800db96:	f805 e004 	strb.w	lr, [r5, r4]
 800db9a:	bf0c      	ite	eq
 800db9c:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800dba0:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800dba4:	6945      	ldr	r5, [r0, #20]
 800dba6:	1dcc      	adds	r4, r1, #7
 800dba8:	f01c 0f01 	tst.w	ip, #1
 800dbac:	f805 e004 	strb.w	lr, [r5, r4]
 800dbb0:	bf14      	ite	ne
 800dbb2:	f890 c011 	ldrbne.w	ip, [r0, #17]
 800dbb6:	f890 c010 	ldrbeq.w	ip, [r0, #16]
 800dbba:	6945      	ldr	r5, [r0, #20]
 800dbbc:	f101 0408 	add.w	r4, r1, #8
 800dbc0:	f805 c004 	strb.w	ip, [r5, r4]
 800dbc4:	061d      	lsls	r5, r3, #24
 800dbc6:	bf54      	ite	pl
 800dbc8:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800dbcc:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800dbd0:	6945      	ldr	r5, [r0, #20]
 800dbd2:	f101 0409 	add.w	r4, r1, #9
 800dbd6:	f805 c004 	strb.w	ip, [r5, r4]
 800dbda:	065d      	lsls	r5, r3, #25
 800dbdc:	bf54      	ite	pl
 800dbde:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800dbe2:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800dbe6:	6945      	ldr	r5, [r0, #20]
 800dbe8:	f101 040a 	add.w	r4, r1, #10
 800dbec:	f805 c004 	strb.w	ip, [r5, r4]
 800dbf0:	069d      	lsls	r5, r3, #26
 800dbf2:	bf54      	ite	pl
 800dbf4:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800dbf8:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800dbfc:	6945      	ldr	r5, [r0, #20]
 800dbfe:	f101 040b 	add.w	r4, r1, #11
 800dc02:	f805 c004 	strb.w	ip, [r5, r4]
 800dc06:	06dd      	lsls	r5, r3, #27
 800dc08:	bf54      	ite	pl
 800dc0a:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800dc0e:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800dc12:	6945      	ldr	r5, [r0, #20]
 800dc14:	f101 040c 	add.w	r4, r1, #12
 800dc18:	f805 c004 	strb.w	ip, [r5, r4]
 800dc1c:	071d      	lsls	r5, r3, #28
 800dc1e:	bf54      	ite	pl
 800dc20:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800dc24:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800dc28:	6945      	ldr	r5, [r0, #20]
 800dc2a:	f101 040d 	add.w	r4, r1, #13
 800dc2e:	f805 c004 	strb.w	ip, [r5, r4]
 800dc32:	075d      	lsls	r5, r3, #29
 800dc34:	bf54      	ite	pl
 800dc36:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800dc3a:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800dc3e:	6945      	ldr	r5, [r0, #20]
 800dc40:	f101 040e 	add.w	r4, r1, #14
 800dc44:	f805 c004 	strb.w	ip, [r5, r4]
 800dc48:	079d      	lsls	r5, r3, #30
 800dc4a:	bf58      	it	pl
 800dc4c:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800dc50:	6945      	ldr	r5, [r0, #20]
 800dc52:	bf48      	it	mi
 800dc54:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800dc58:	f101 040f 	add.w	r4, r1, #15
 800dc5c:	f805 c004 	strb.w	ip, [r5, r4]
 800dc60:	07dd      	lsls	r5, r3, #31
 800dc62:	bf4c      	ite	mi
 800dc64:	7c45      	ldrbmi	r5, [r0, #17]
 800dc66:	7c05      	ldrbpl	r5, [r0, #16]
 800dc68:	6943      	ldr	r3, [r0, #20]
 800dc6a:	f101 0410 	add.w	r4, r1, #16
 800dc6e:	551d      	strb	r5, [r3, r4]
 800dc70:	0614      	lsls	r4, r2, #24
 800dc72:	bf54      	ite	pl
 800dc74:	7c05      	ldrbpl	r5, [r0, #16]
 800dc76:	7c45      	ldrbmi	r5, [r0, #17]
 800dc78:	6944      	ldr	r4, [r0, #20]
 800dc7a:	f101 0311 	add.w	r3, r1, #17
 800dc7e:	54e5      	strb	r5, [r4, r3]
 800dc80:	0655      	lsls	r5, r2, #25
 800dc82:	bf54      	ite	pl
 800dc84:	7c05      	ldrbpl	r5, [r0, #16]
 800dc86:	7c45      	ldrbmi	r5, [r0, #17]
 800dc88:	6944      	ldr	r4, [r0, #20]
 800dc8a:	f101 0312 	add.w	r3, r1, #18
 800dc8e:	54e5      	strb	r5, [r4, r3]
 800dc90:	0694      	lsls	r4, r2, #26
 800dc92:	bf54      	ite	pl
 800dc94:	7c05      	ldrbpl	r5, [r0, #16]
 800dc96:	7c45      	ldrbmi	r5, [r0, #17]
 800dc98:	6944      	ldr	r4, [r0, #20]
 800dc9a:	f101 0313 	add.w	r3, r1, #19
 800dc9e:	54e5      	strb	r5, [r4, r3]
 800dca0:	06d5      	lsls	r5, r2, #27
 800dca2:	bf54      	ite	pl
 800dca4:	7c05      	ldrbpl	r5, [r0, #16]
 800dca6:	7c45      	ldrbmi	r5, [r0, #17]
 800dca8:	6944      	ldr	r4, [r0, #20]
 800dcaa:	f101 0314 	add.w	r3, r1, #20
 800dcae:	54e5      	strb	r5, [r4, r3]
 800dcb0:	0714      	lsls	r4, r2, #28
 800dcb2:	bf54      	ite	pl
 800dcb4:	7c05      	ldrbpl	r5, [r0, #16]
 800dcb6:	7c45      	ldrbmi	r5, [r0, #17]
 800dcb8:	6944      	ldr	r4, [r0, #20]
 800dcba:	f101 0315 	add.w	r3, r1, #21
 800dcbe:	54e5      	strb	r5, [r4, r3]
 800dcc0:	0755      	lsls	r5, r2, #29
 800dcc2:	bf54      	ite	pl
 800dcc4:	7c05      	ldrbpl	r5, [r0, #16]
 800dcc6:	7c45      	ldrbmi	r5, [r0, #17]
 800dcc8:	6944      	ldr	r4, [r0, #20]
 800dcca:	f101 0316 	add.w	r3, r1, #22
 800dcce:	54e5      	strb	r5, [r4, r3]
 800dcd0:	0794      	lsls	r4, r2, #30
 800dcd2:	bf54      	ite	pl
 800dcd4:	7c05      	ldrbpl	r5, [r0, #16]
 800dcd6:	7c45      	ldrbmi	r5, [r0, #17]
 800dcd8:	6944      	ldr	r4, [r0, #20]
 800dcda:	f101 0317 	add.w	r3, r1, #23
 800dcde:	54e5      	strb	r5, [r4, r3]
 800dce0:	3118      	adds	r1, #24
 800dce2:	f012 0f01 	tst.w	r2, #1
 800dce6:	e637      	b.n	800d958 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x28c>
 800dce8:	0615      	lsls	r5, r2, #24
 800dcea:	bf54      	ite	pl
 800dcec:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800dcf0:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800dcf4:	6945      	ldr	r5, [r0, #20]
 800dcf6:	1c4c      	adds	r4, r1, #1
 800dcf8:	f805 e004 	strb.w	lr, [r5, r4]
 800dcfc:	0655      	lsls	r5, r2, #25
 800dcfe:	bf54      	ite	pl
 800dd00:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800dd04:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800dd08:	6945      	ldr	r5, [r0, #20]
 800dd0a:	1c8c      	adds	r4, r1, #2
 800dd0c:	f805 e004 	strb.w	lr, [r5, r4]
 800dd10:	0695      	lsls	r5, r2, #26
 800dd12:	bf54      	ite	pl
 800dd14:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800dd18:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800dd1c:	6945      	ldr	r5, [r0, #20]
 800dd1e:	1ccc      	adds	r4, r1, #3
 800dd20:	f805 e004 	strb.w	lr, [r5, r4]
 800dd24:	06d5      	lsls	r5, r2, #27
 800dd26:	bf54      	ite	pl
 800dd28:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800dd2c:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800dd30:	6945      	ldr	r5, [r0, #20]
 800dd32:	1d0c      	adds	r4, r1, #4
 800dd34:	f805 e004 	strb.w	lr, [r5, r4]
 800dd38:	0715      	lsls	r5, r2, #28
 800dd3a:	bf54      	ite	pl
 800dd3c:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800dd40:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800dd44:	6945      	ldr	r5, [r0, #20]
 800dd46:	1d4c      	adds	r4, r1, #5
 800dd48:	f805 e004 	strb.w	lr, [r5, r4]
 800dd4c:	0755      	lsls	r5, r2, #29
 800dd4e:	bf54      	ite	pl
 800dd50:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800dd54:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800dd58:	6945      	ldr	r5, [r0, #20]
 800dd5a:	1d8c      	adds	r4, r1, #6
 800dd5c:	f805 e004 	strb.w	lr, [r5, r4]
 800dd60:	0795      	lsls	r5, r2, #30
 800dd62:	bf58      	it	pl
 800dd64:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800dd68:	6945      	ldr	r5, [r0, #20]
 800dd6a:	bf48      	it	mi
 800dd6c:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800dd70:	1dcc      	adds	r4, r1, #7
 800dd72:	f805 e004 	strb.w	lr, [r5, r4]
 800dd76:	07d2      	lsls	r2, r2, #31
 800dd78:	bf4c      	ite	mi
 800dd7a:	7c45      	ldrbmi	r5, [r0, #17]
 800dd7c:	7c05      	ldrbpl	r5, [r0, #16]
 800dd7e:	6942      	ldr	r2, [r0, #20]
 800dd80:	f101 0408 	add.w	r4, r1, #8
 800dd84:	5515      	strb	r5, [r2, r4]
 800dd86:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800dd8a:	bf0c      	ite	eq
 800dd8c:	7c05      	ldrbeq	r5, [r0, #16]
 800dd8e:	7c45      	ldrbne	r5, [r0, #17]
 800dd90:	6944      	ldr	r4, [r0, #20]
 800dd92:	f101 0209 	add.w	r2, r1, #9
 800dd96:	54a5      	strb	r5, [r4, r2]
 800dd98:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800dd9c:	bf0c      	ite	eq
 800dd9e:	7c05      	ldrbeq	r5, [r0, #16]
 800dda0:	7c45      	ldrbne	r5, [r0, #17]
 800dda2:	6944      	ldr	r4, [r0, #20]
 800dda4:	f101 020a 	add.w	r2, r1, #10
 800dda8:	54a5      	strb	r5, [r4, r2]
 800ddaa:	f01c 0f20 	tst.w	ip, #32
 800ddae:	bf0c      	ite	eq
 800ddb0:	7c05      	ldrbeq	r5, [r0, #16]
 800ddb2:	7c45      	ldrbne	r5, [r0, #17]
 800ddb4:	6944      	ldr	r4, [r0, #20]
 800ddb6:	f101 020b 	add.w	r2, r1, #11
 800ddba:	54a5      	strb	r5, [r4, r2]
 800ddbc:	f01c 0f10 	tst.w	ip, #16
 800ddc0:	bf0c      	ite	eq
 800ddc2:	7c05      	ldrbeq	r5, [r0, #16]
 800ddc4:	7c45      	ldrbne	r5, [r0, #17]
 800ddc6:	6944      	ldr	r4, [r0, #20]
 800ddc8:	f101 020c 	add.w	r2, r1, #12
 800ddcc:	54a5      	strb	r5, [r4, r2]
 800ddce:	f01c 0f08 	tst.w	ip, #8
 800ddd2:	bf0c      	ite	eq
 800ddd4:	7c05      	ldrbeq	r5, [r0, #16]
 800ddd6:	7c45      	ldrbne	r5, [r0, #17]
 800ddd8:	6944      	ldr	r4, [r0, #20]
 800ddda:	f101 020d 	add.w	r2, r1, #13
 800ddde:	54a5      	strb	r5, [r4, r2]
 800dde0:	f01c 0f04 	tst.w	ip, #4
 800dde4:	bf0c      	ite	eq
 800dde6:	7c05      	ldrbeq	r5, [r0, #16]
 800dde8:	7c45      	ldrbne	r5, [r0, #17]
 800ddea:	6944      	ldr	r4, [r0, #20]
 800ddec:	f101 020e 	add.w	r2, r1, #14
 800ddf0:	54a5      	strb	r5, [r4, r2]
 800ddf2:	f01c 0f02 	tst.w	ip, #2
 800ddf6:	bf0c      	ite	eq
 800ddf8:	7c05      	ldrbeq	r5, [r0, #16]
 800ddfa:	7c45      	ldrbne	r5, [r0, #17]
 800ddfc:	6944      	ldr	r4, [r0, #20]
 800ddfe:	f101 020f 	add.w	r2, r1, #15
 800de02:	54a5      	strb	r5, [r4, r2]
 800de04:	f01c 0f01 	tst.w	ip, #1
 800de08:	bf14      	ite	ne
 800de0a:	7c45      	ldrbne	r5, [r0, #17]
 800de0c:	7c05      	ldrbeq	r5, [r0, #16]
 800de0e:	6944      	ldr	r4, [r0, #20]
 800de10:	f101 0210 	add.w	r2, r1, #16
 800de14:	e564      	b.n	800d8e0 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x214>
 800de16:	061d      	lsls	r5, r3, #24
 800de18:	bf54      	ite	pl
 800de1a:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800de1e:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800de22:	6945      	ldr	r5, [r0, #20]
 800de24:	1c4c      	adds	r4, r1, #1
 800de26:	f805 e004 	strb.w	lr, [r5, r4]
 800de2a:	065d      	lsls	r5, r3, #25
 800de2c:	bf54      	ite	pl
 800de2e:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800de32:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800de36:	6945      	ldr	r5, [r0, #20]
 800de38:	1c8c      	adds	r4, r1, #2
 800de3a:	f805 e004 	strb.w	lr, [r5, r4]
 800de3e:	069d      	lsls	r5, r3, #26
 800de40:	bf54      	ite	pl
 800de42:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800de46:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800de4a:	6945      	ldr	r5, [r0, #20]
 800de4c:	1ccc      	adds	r4, r1, #3
 800de4e:	f805 e004 	strb.w	lr, [r5, r4]
 800de52:	06dd      	lsls	r5, r3, #27
 800de54:	bf54      	ite	pl
 800de56:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800de5a:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800de5e:	6945      	ldr	r5, [r0, #20]
 800de60:	1d0c      	adds	r4, r1, #4
 800de62:	f805 e004 	strb.w	lr, [r5, r4]
 800de66:	071d      	lsls	r5, r3, #28
 800de68:	bf54      	ite	pl
 800de6a:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800de6e:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800de72:	6945      	ldr	r5, [r0, #20]
 800de74:	1d4c      	adds	r4, r1, #5
 800de76:	f805 e004 	strb.w	lr, [r5, r4]
 800de7a:	075d      	lsls	r5, r3, #29
 800de7c:	bf54      	ite	pl
 800de7e:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800de82:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800de86:	6945      	ldr	r5, [r0, #20]
 800de88:	1d8c      	adds	r4, r1, #6
 800de8a:	f805 e004 	strb.w	lr, [r5, r4]
 800de8e:	079d      	lsls	r5, r3, #30
 800de90:	bf58      	it	pl
 800de92:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800de96:	6945      	ldr	r5, [r0, #20]
 800de98:	bf48      	it	mi
 800de9a:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800de9e:	1dcc      	adds	r4, r1, #7
 800dea0:	f805 e004 	strb.w	lr, [r5, r4]
 800dea4:	07dd      	lsls	r5, r3, #31
 800dea6:	bf4c      	ite	mi
 800dea8:	7c45      	ldrbmi	r5, [r0, #17]
 800deaa:	7c05      	ldrbpl	r5, [r0, #16]
 800deac:	6943      	ldr	r3, [r0, #20]
 800deae:	f101 0408 	add.w	r4, r1, #8
 800deb2:	551d      	strb	r5, [r3, r4]
 800deb4:	0614      	lsls	r4, r2, #24
 800deb6:	bf54      	ite	pl
 800deb8:	7c05      	ldrbpl	r5, [r0, #16]
 800deba:	7c45      	ldrbmi	r5, [r0, #17]
 800debc:	6944      	ldr	r4, [r0, #20]
 800debe:	f101 0309 	add.w	r3, r1, #9
 800dec2:	54e5      	strb	r5, [r4, r3]
 800dec4:	0655      	lsls	r5, r2, #25
 800dec6:	bf54      	ite	pl
 800dec8:	7c05      	ldrbpl	r5, [r0, #16]
 800deca:	7c45      	ldrbmi	r5, [r0, #17]
 800decc:	6944      	ldr	r4, [r0, #20]
 800dece:	f101 030a 	add.w	r3, r1, #10
 800ded2:	54e5      	strb	r5, [r4, r3]
 800ded4:	0694      	lsls	r4, r2, #26
 800ded6:	bf54      	ite	pl
 800ded8:	7c05      	ldrbpl	r5, [r0, #16]
 800deda:	7c45      	ldrbmi	r5, [r0, #17]
 800dedc:	6944      	ldr	r4, [r0, #20]
 800dede:	f101 030b 	add.w	r3, r1, #11
 800dee2:	54e5      	strb	r5, [r4, r3]
 800dee4:	06d5      	lsls	r5, r2, #27
 800dee6:	bf54      	ite	pl
 800dee8:	7c05      	ldrbpl	r5, [r0, #16]
 800deea:	7c45      	ldrbmi	r5, [r0, #17]
 800deec:	6944      	ldr	r4, [r0, #20]
 800deee:	f101 030c 	add.w	r3, r1, #12
 800def2:	54e5      	strb	r5, [r4, r3]
 800def4:	0714      	lsls	r4, r2, #28
 800def6:	bf54      	ite	pl
 800def8:	7c05      	ldrbpl	r5, [r0, #16]
 800defa:	7c45      	ldrbmi	r5, [r0, #17]
 800defc:	6944      	ldr	r4, [r0, #20]
 800defe:	f101 030d 	add.w	r3, r1, #13
 800df02:	54e5      	strb	r5, [r4, r3]
 800df04:	0755      	lsls	r5, r2, #29
 800df06:	bf54      	ite	pl
 800df08:	7c05      	ldrbpl	r5, [r0, #16]
 800df0a:	7c45      	ldrbmi	r5, [r0, #17]
 800df0c:	6944      	ldr	r4, [r0, #20]
 800df0e:	f101 030e 	add.w	r3, r1, #14
 800df12:	54e5      	strb	r5, [r4, r3]
 800df14:	0794      	lsls	r4, r2, #30
 800df16:	bf58      	it	pl
 800df18:	7c05      	ldrbpl	r5, [r0, #16]
 800df1a:	6944      	ldr	r4, [r0, #20]
 800df1c:	bf48      	it	mi
 800df1e:	7c45      	ldrbmi	r5, [r0, #17]
 800df20:	f101 030f 	add.w	r3, r1, #15
 800df24:	54e5      	strb	r5, [r4, r3]
 800df26:	07d2      	lsls	r2, r2, #31
 800df28:	bf4c      	ite	mi
 800df2a:	7c44      	ldrbmi	r4, [r0, #17]
 800df2c:	7c04      	ldrbpl	r4, [r0, #16]
 800df2e:	6942      	ldr	r2, [r0, #20]
 800df30:	f101 0310 	add.w	r3, r1, #16
 800df34:	e5a5      	b.n	800da82 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x3b6>
 800df36:	061d      	lsls	r5, r3, #24
 800df38:	bf54      	ite	pl
 800df3a:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800df3e:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800df42:	6945      	ldr	r5, [r0, #20]
 800df44:	1c4c      	adds	r4, r1, #1
 800df46:	f805 e004 	strb.w	lr, [r5, r4]
 800df4a:	065d      	lsls	r5, r3, #25
 800df4c:	bf54      	ite	pl
 800df4e:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800df52:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800df56:	6945      	ldr	r5, [r0, #20]
 800df58:	1c8c      	adds	r4, r1, #2
 800df5a:	f805 e004 	strb.w	lr, [r5, r4]
 800df5e:	069d      	lsls	r5, r3, #26
 800df60:	bf54      	ite	pl
 800df62:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800df66:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800df6a:	6945      	ldr	r5, [r0, #20]
 800df6c:	1ccc      	adds	r4, r1, #3
 800df6e:	f805 e004 	strb.w	lr, [r5, r4]
 800df72:	06dd      	lsls	r5, r3, #27
 800df74:	bf54      	ite	pl
 800df76:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800df7a:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800df7e:	6945      	ldr	r5, [r0, #20]
 800df80:	1d0c      	adds	r4, r1, #4
 800df82:	f805 e004 	strb.w	lr, [r5, r4]
 800df86:	071d      	lsls	r5, r3, #28
 800df88:	bf54      	ite	pl
 800df8a:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800df8e:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800df92:	6945      	ldr	r5, [r0, #20]
 800df94:	1d4c      	adds	r4, r1, #5
 800df96:	f805 e004 	strb.w	lr, [r5, r4]
 800df9a:	075d      	lsls	r5, r3, #29
 800df9c:	bf54      	ite	pl
 800df9e:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800dfa2:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800dfa6:	6945      	ldr	r5, [r0, #20]
 800dfa8:	1d8c      	adds	r4, r1, #6
 800dfaa:	f805 e004 	strb.w	lr, [r5, r4]
 800dfae:	079d      	lsls	r5, r3, #30
 800dfb0:	bf58      	it	pl
 800dfb2:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800dfb6:	6945      	ldr	r5, [r0, #20]
 800dfb8:	bf48      	it	mi
 800dfba:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800dfbe:	1dcc      	adds	r4, r1, #7
 800dfc0:	f805 e004 	strb.w	lr, [r5, r4]
 800dfc4:	07db      	lsls	r3, r3, #31
 800dfc6:	bf4c      	ite	mi
 800dfc8:	7c45      	ldrbmi	r5, [r0, #17]
 800dfca:	7c05      	ldrbpl	r5, [r0, #16]
 800dfcc:	6943      	ldr	r3, [r0, #20]
 800dfce:	f101 0408 	add.w	r4, r1, #8
 800dfd2:	551d      	strb	r5, [r3, r4]
 800dfd4:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800dfd8:	bf0c      	ite	eq
 800dfda:	7c05      	ldrbeq	r5, [r0, #16]
 800dfdc:	7c45      	ldrbne	r5, [r0, #17]
 800dfde:	6944      	ldr	r4, [r0, #20]
 800dfe0:	f101 0309 	add.w	r3, r1, #9
 800dfe4:	54e5      	strb	r5, [r4, r3]
 800dfe6:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800dfea:	bf0c      	ite	eq
 800dfec:	7c05      	ldrbeq	r5, [r0, #16]
 800dfee:	7c45      	ldrbne	r5, [r0, #17]
 800dff0:	6944      	ldr	r4, [r0, #20]
 800dff2:	f101 030a 	add.w	r3, r1, #10
 800dff6:	54e5      	strb	r5, [r4, r3]
 800dff8:	f01c 0f20 	tst.w	ip, #32
 800dffc:	bf0c      	ite	eq
 800dffe:	7c05      	ldrbeq	r5, [r0, #16]
 800e000:	7c45      	ldrbne	r5, [r0, #17]
 800e002:	6944      	ldr	r4, [r0, #20]
 800e004:	f101 030b 	add.w	r3, r1, #11
 800e008:	54e5      	strb	r5, [r4, r3]
 800e00a:	f01c 0f10 	tst.w	ip, #16
 800e00e:	bf0c      	ite	eq
 800e010:	7c05      	ldrbeq	r5, [r0, #16]
 800e012:	7c45      	ldrbne	r5, [r0, #17]
 800e014:	6944      	ldr	r4, [r0, #20]
 800e016:	f101 030c 	add.w	r3, r1, #12
 800e01a:	54e5      	strb	r5, [r4, r3]
 800e01c:	f01c 0f08 	tst.w	ip, #8
 800e020:	bf0c      	ite	eq
 800e022:	7c05      	ldrbeq	r5, [r0, #16]
 800e024:	7c45      	ldrbne	r5, [r0, #17]
 800e026:	6944      	ldr	r4, [r0, #20]
 800e028:	f101 030d 	add.w	r3, r1, #13
 800e02c:	54e5      	strb	r5, [r4, r3]
 800e02e:	f01c 0f04 	tst.w	ip, #4
 800e032:	bf0c      	ite	eq
 800e034:	7c05      	ldrbeq	r5, [r0, #16]
 800e036:	7c45      	ldrbne	r5, [r0, #17]
 800e038:	6944      	ldr	r4, [r0, #20]
 800e03a:	f101 030e 	add.w	r3, r1, #14
 800e03e:	54e5      	strb	r5, [r4, r3]
 800e040:	f01c 0f02 	tst.w	ip, #2
 800e044:	bf0c      	ite	eq
 800e046:	7c05      	ldrbeq	r5, [r0, #16]
 800e048:	7c45      	ldrbne	r5, [r0, #17]
 800e04a:	6944      	ldr	r4, [r0, #20]
 800e04c:	f101 030f 	add.w	r3, r1, #15
 800e050:	54e5      	strb	r5, [r4, r3]
 800e052:	f01c 0f01 	tst.w	ip, #1
 800e056:	bf14      	ite	ne
 800e058:	7c45      	ldrbne	r5, [r0, #17]
 800e05a:	7c05      	ldrbeq	r5, [r0, #16]
 800e05c:	6944      	ldr	r4, [r0, #20]
 800e05e:	f101 0310 	add.w	r3, r1, #16
 800e062:	e604      	b.n	800dc6e <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x5a2>

0800e064 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>:
 800e064:	b570      	push	{r4, r5, r6, lr}
 800e066:	6804      	ldr	r4, [r0, #0]
 800e068:	f89d c010 	ldrb.w	ip, [sp, #16]
 800e06c:	2c07      	cmp	r4, #7
 800e06e:	f89d e014 	ldrb.w	lr, [sp, #20]
 800e072:	d000      	beq.n	800e076 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)+0x12>
 800e074:	bd70      	pop	{r4, r5, r6, pc}
 800e076:	061e      	lsls	r6, r3, #24
 800e078:	ea4f 1141 	mov.w	r1, r1, lsl #5
 800e07c:	bf54      	ite	pl
 800e07e:	7c06      	ldrbpl	r6, [r0, #16]
 800e080:	7c46      	ldrbmi	r6, [r0, #17]
 800e082:	6945      	ldr	r5, [r0, #20]
 800e084:	1c4c      	adds	r4, r1, #1
 800e086:	552e      	strb	r6, [r5, r4]
 800e088:	065d      	lsls	r5, r3, #25
 800e08a:	bf54      	ite	pl
 800e08c:	7c06      	ldrbpl	r6, [r0, #16]
 800e08e:	7c46      	ldrbmi	r6, [r0, #17]
 800e090:	6945      	ldr	r5, [r0, #20]
 800e092:	1c8c      	adds	r4, r1, #2
 800e094:	552e      	strb	r6, [r5, r4]
 800e096:	069e      	lsls	r6, r3, #26
 800e098:	bf54      	ite	pl
 800e09a:	7c06      	ldrbpl	r6, [r0, #16]
 800e09c:	7c46      	ldrbmi	r6, [r0, #17]
 800e09e:	6945      	ldr	r5, [r0, #20]
 800e0a0:	1ccc      	adds	r4, r1, #3
 800e0a2:	552e      	strb	r6, [r5, r4]
 800e0a4:	06dd      	lsls	r5, r3, #27
 800e0a6:	bf54      	ite	pl
 800e0a8:	7c06      	ldrbpl	r6, [r0, #16]
 800e0aa:	7c46      	ldrbmi	r6, [r0, #17]
 800e0ac:	6945      	ldr	r5, [r0, #20]
 800e0ae:	1d0c      	adds	r4, r1, #4
 800e0b0:	552e      	strb	r6, [r5, r4]
 800e0b2:	071e      	lsls	r6, r3, #28
 800e0b4:	bf54      	ite	pl
 800e0b6:	7c06      	ldrbpl	r6, [r0, #16]
 800e0b8:	7c46      	ldrbmi	r6, [r0, #17]
 800e0ba:	6945      	ldr	r5, [r0, #20]
 800e0bc:	1d4c      	adds	r4, r1, #5
 800e0be:	552e      	strb	r6, [r5, r4]
 800e0c0:	075d      	lsls	r5, r3, #29
 800e0c2:	bf54      	ite	pl
 800e0c4:	7c06      	ldrbpl	r6, [r0, #16]
 800e0c6:	7c46      	ldrbmi	r6, [r0, #17]
 800e0c8:	6945      	ldr	r5, [r0, #20]
 800e0ca:	1d8c      	adds	r4, r1, #6
 800e0cc:	552e      	strb	r6, [r5, r4]
 800e0ce:	079e      	lsls	r6, r3, #30
 800e0d0:	6945      	ldr	r5, [r0, #20]
 800e0d2:	bf54      	ite	pl
 800e0d4:	7c06      	ldrbpl	r6, [r0, #16]
 800e0d6:	7c46      	ldrbmi	r6, [r0, #17]
 800e0d8:	1dcc      	adds	r4, r1, #7
 800e0da:	552e      	strb	r6, [r5, r4]
 800e0dc:	07dd      	lsls	r5, r3, #31
 800e0de:	bf4c      	ite	mi
 800e0e0:	7c45      	ldrbmi	r5, [r0, #17]
 800e0e2:	7c05      	ldrbpl	r5, [r0, #16]
 800e0e4:	6943      	ldr	r3, [r0, #20]
 800e0e6:	f101 0408 	add.w	r4, r1, #8
 800e0ea:	551d      	strb	r5, [r3, r4]
 800e0ec:	0614      	lsls	r4, r2, #24
 800e0ee:	bf54      	ite	pl
 800e0f0:	7c05      	ldrbpl	r5, [r0, #16]
 800e0f2:	7c45      	ldrbmi	r5, [r0, #17]
 800e0f4:	6944      	ldr	r4, [r0, #20]
 800e0f6:	f101 0309 	add.w	r3, r1, #9
 800e0fa:	54e5      	strb	r5, [r4, r3]
 800e0fc:	0656      	lsls	r6, r2, #25
 800e0fe:	bf54      	ite	pl
 800e100:	7c05      	ldrbpl	r5, [r0, #16]
 800e102:	7c45      	ldrbmi	r5, [r0, #17]
 800e104:	6944      	ldr	r4, [r0, #20]
 800e106:	f101 030a 	add.w	r3, r1, #10
 800e10a:	54e5      	strb	r5, [r4, r3]
 800e10c:	0695      	lsls	r5, r2, #26
 800e10e:	bf54      	ite	pl
 800e110:	7c05      	ldrbpl	r5, [r0, #16]
 800e112:	7c45      	ldrbmi	r5, [r0, #17]
 800e114:	6944      	ldr	r4, [r0, #20]
 800e116:	f101 030b 	add.w	r3, r1, #11
 800e11a:	54e5      	strb	r5, [r4, r3]
 800e11c:	06d4      	lsls	r4, r2, #27
 800e11e:	bf54      	ite	pl
 800e120:	7c05      	ldrbpl	r5, [r0, #16]
 800e122:	7c45      	ldrbmi	r5, [r0, #17]
 800e124:	6944      	ldr	r4, [r0, #20]
 800e126:	f101 030c 	add.w	r3, r1, #12
 800e12a:	54e5      	strb	r5, [r4, r3]
 800e12c:	0716      	lsls	r6, r2, #28
 800e12e:	bf54      	ite	pl
 800e130:	7c05      	ldrbpl	r5, [r0, #16]
 800e132:	7c45      	ldrbmi	r5, [r0, #17]
 800e134:	6944      	ldr	r4, [r0, #20]
 800e136:	f101 030d 	add.w	r3, r1, #13
 800e13a:	54e5      	strb	r5, [r4, r3]
 800e13c:	0755      	lsls	r5, r2, #29
 800e13e:	bf54      	ite	pl
 800e140:	7c05      	ldrbpl	r5, [r0, #16]
 800e142:	7c45      	ldrbmi	r5, [r0, #17]
 800e144:	6944      	ldr	r4, [r0, #20]
 800e146:	f101 030e 	add.w	r3, r1, #14
 800e14a:	54e5      	strb	r5, [r4, r3]
 800e14c:	0794      	lsls	r4, r2, #30
 800e14e:	bf58      	it	pl
 800e150:	7c05      	ldrbpl	r5, [r0, #16]
 800e152:	6944      	ldr	r4, [r0, #20]
 800e154:	bf48      	it	mi
 800e156:	7c45      	ldrbmi	r5, [r0, #17]
 800e158:	f101 030f 	add.w	r3, r1, #15
 800e15c:	54e5      	strb	r5, [r4, r3]
 800e15e:	07d2      	lsls	r2, r2, #31
 800e160:	bf4c      	ite	mi
 800e162:	7c44      	ldrbmi	r4, [r0, #17]
 800e164:	7c04      	ldrbpl	r4, [r0, #16]
 800e166:	6942      	ldr	r2, [r0, #20]
 800e168:	f101 0310 	add.w	r3, r1, #16
 800e16c:	54d4      	strb	r4, [r2, r3]
 800e16e:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800e172:	bf0c      	ite	eq
 800e174:	7c04      	ldrbeq	r4, [r0, #16]
 800e176:	7c44      	ldrbne	r4, [r0, #17]
 800e178:	6942      	ldr	r2, [r0, #20]
 800e17a:	f101 0311 	add.w	r3, r1, #17
 800e17e:	54d4      	strb	r4, [r2, r3]
 800e180:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800e184:	bf14      	ite	ne
 800e186:	7c44      	ldrbne	r4, [r0, #17]
 800e188:	7c04      	ldrbeq	r4, [r0, #16]
 800e18a:	6942      	ldr	r2, [r0, #20]
 800e18c:	f101 0312 	add.w	r3, r1, #18
 800e190:	54d4      	strb	r4, [r2, r3]
 800e192:	f01c 0f20 	tst.w	ip, #32
 800e196:	bf14      	ite	ne
 800e198:	7c44      	ldrbne	r4, [r0, #17]
 800e19a:	7c04      	ldrbeq	r4, [r0, #16]
 800e19c:	6942      	ldr	r2, [r0, #20]
 800e19e:	f101 0313 	add.w	r3, r1, #19
 800e1a2:	54d4      	strb	r4, [r2, r3]
 800e1a4:	f01c 0f10 	tst.w	ip, #16
 800e1a8:	bf14      	ite	ne
 800e1aa:	7c44      	ldrbne	r4, [r0, #17]
 800e1ac:	7c04      	ldrbeq	r4, [r0, #16]
 800e1ae:	6942      	ldr	r2, [r0, #20]
 800e1b0:	f101 0314 	add.w	r3, r1, #20
 800e1b4:	54d4      	strb	r4, [r2, r3]
 800e1b6:	f01c 0f08 	tst.w	ip, #8
 800e1ba:	bf14      	ite	ne
 800e1bc:	7c44      	ldrbne	r4, [r0, #17]
 800e1be:	7c04      	ldrbeq	r4, [r0, #16]
 800e1c0:	6942      	ldr	r2, [r0, #20]
 800e1c2:	f101 0315 	add.w	r3, r1, #21
 800e1c6:	54d4      	strb	r4, [r2, r3]
 800e1c8:	f01c 0f04 	tst.w	ip, #4
 800e1cc:	bf14      	ite	ne
 800e1ce:	7c44      	ldrbne	r4, [r0, #17]
 800e1d0:	7c04      	ldrbeq	r4, [r0, #16]
 800e1d2:	6942      	ldr	r2, [r0, #20]
 800e1d4:	f101 0316 	add.w	r3, r1, #22
 800e1d8:	54d4      	strb	r4, [r2, r3]
 800e1da:	f01c 0f02 	tst.w	ip, #2
 800e1de:	bf14      	ite	ne
 800e1e0:	7c44      	ldrbne	r4, [r0, #17]
 800e1e2:	7c04      	ldrbeq	r4, [r0, #16]
 800e1e4:	6942      	ldr	r2, [r0, #20]
 800e1e6:	f101 0317 	add.w	r3, r1, #23
 800e1ea:	54d4      	strb	r4, [r2, r3]
 800e1ec:	f01c 0f01 	tst.w	ip, #1
 800e1f0:	bf14      	ite	ne
 800e1f2:	7c44      	ldrbne	r4, [r0, #17]
 800e1f4:	7c04      	ldrbeq	r4, [r0, #16]
 800e1f6:	6942      	ldr	r2, [r0, #20]
 800e1f8:	f101 0318 	add.w	r3, r1, #24
 800e1fc:	54d4      	strb	r4, [r2, r3]
 800e1fe:	f01e 0f80 	tst.w	lr, #128	; 0x80
 800e202:	bf0c      	ite	eq
 800e204:	7c04      	ldrbeq	r4, [r0, #16]
 800e206:	7c44      	ldrbne	r4, [r0, #17]
 800e208:	6942      	ldr	r2, [r0, #20]
 800e20a:	f101 0319 	add.w	r3, r1, #25
 800e20e:	54d4      	strb	r4, [r2, r3]
 800e210:	f01e 0f40 	tst.w	lr, #64	; 0x40
 800e214:	bf0c      	ite	eq
 800e216:	7c04      	ldrbeq	r4, [r0, #16]
 800e218:	7c44      	ldrbne	r4, [r0, #17]
 800e21a:	6942      	ldr	r2, [r0, #20]
 800e21c:	f101 031a 	add.w	r3, r1, #26
 800e220:	54d4      	strb	r4, [r2, r3]
 800e222:	f01e 0f20 	tst.w	lr, #32
 800e226:	bf0c      	ite	eq
 800e228:	7c04      	ldrbeq	r4, [r0, #16]
 800e22a:	7c44      	ldrbne	r4, [r0, #17]
 800e22c:	6942      	ldr	r2, [r0, #20]
 800e22e:	f101 031b 	add.w	r3, r1, #27
 800e232:	54d4      	strb	r4, [r2, r3]
 800e234:	f01e 0f10 	tst.w	lr, #16
 800e238:	bf0c      	ite	eq
 800e23a:	7c04      	ldrbeq	r4, [r0, #16]
 800e23c:	7c44      	ldrbne	r4, [r0, #17]
 800e23e:	6942      	ldr	r2, [r0, #20]
 800e240:	f101 031c 	add.w	r3, r1, #28
 800e244:	54d4      	strb	r4, [r2, r3]
 800e246:	f01e 0f08 	tst.w	lr, #8
 800e24a:	bf0c      	ite	eq
 800e24c:	7c04      	ldrbeq	r4, [r0, #16]
 800e24e:	7c44      	ldrbne	r4, [r0, #17]
 800e250:	6942      	ldr	r2, [r0, #20]
 800e252:	f101 031d 	add.w	r3, r1, #29
 800e256:	54d4      	strb	r4, [r2, r3]
 800e258:	f01e 0f04 	tst.w	lr, #4
 800e25c:	bf0c      	ite	eq
 800e25e:	7c04      	ldrbeq	r4, [r0, #16]
 800e260:	7c44      	ldrbne	r4, [r0, #17]
 800e262:	6942      	ldr	r2, [r0, #20]
 800e264:	f101 031e 	add.w	r3, r1, #30
 800e268:	54d4      	strb	r4, [r2, r3]
 800e26a:	f01e 0f02 	tst.w	lr, #2
 800e26e:	6942      	ldr	r2, [r0, #20]
 800e270:	bf0c      	ite	eq
 800e272:	7c04      	ldrbeq	r4, [r0, #16]
 800e274:	7c44      	ldrbne	r4, [r0, #17]
 800e276:	f101 031f 	add.w	r3, r1, #31
 800e27a:	54d4      	strb	r4, [r2, r3]
 800e27c:	f01e 0f01 	tst.w	lr, #1
 800e280:	bf14      	ite	ne
 800e282:	7c42      	ldrbne	r2, [r0, #17]
 800e284:	7c02      	ldrbeq	r2, [r0, #16]
 800e286:	6943      	ldr	r3, [r0, #20]
 800e288:	3120      	adds	r1, #32
 800e28a:	545a      	strb	r2, [r3, r1]
 800e28c:	bd70      	pop	{r4, r5, r6, pc}
 800e28e:	bf00      	nop

0800e290 <WS28xx::~WS28xx()>:
 800e290:	2200      	movs	r2, #0
 800e292:	4b01      	ldr	r3, [pc, #4]	; (800e298 <WS28xx::~WS28xx()+0x8>)
 800e294:	601a      	str	r2, [r3, #0]
 800e296:	4770      	bx	lr
 800e298:	20001958 	andcs	r1, r0, r8, asr r9

0800e29c <WS28xx::SetupBuffers()>:
 800e29c:	b513      	push	{r0, r1, r4, lr}
 800e29e:	4604      	mov	r4, r0
 800e2a0:	a801      	add	r0, sp, #4
 800e2a2:	f007 fb17 	bl	80158d4 <gd32_spi_dma_tx_prepare(unsigned int*)>
 800e2a6:	9b01      	ldr	r3, [sp, #4]
 800e2a8:	4a07      	ldr	r2, [pc, #28]	; (800e2c8 <WS28xx::SetupBuffers()+0x2c>)
 800e2aa:	085b      	lsrs	r3, r3, #1
 800e2ac:	f023 0303 	bic.w	r3, r3, #3
 800e2b0:	6160      	str	r0, [r4, #20]
 800e2b2:	4418      	add	r0, r3
 800e2b4:	68e3      	ldr	r3, [r4, #12]
 800e2b6:	61a0      	str	r0, [r4, #24]
 800e2b8:	6013      	str	r3, [r2, #0]
 800e2ba:	3303      	adds	r3, #3
 800e2bc:	f023 0303 	bic.w	r3, r3, #3
 800e2c0:	60e3      	str	r3, [r4, #12]
 800e2c2:	b002      	add	sp, #8
 800e2c4:	bd10      	pop	{r4, pc}
 800e2c6:	bf00      	nop
 800e2c8:	20001954 	andcs	r1, r0, r4, asr r9

0800e2cc <WS28xx::WS28xx(PixelConfiguration&)>:
 800e2cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e2ce:	23aa      	movs	r3, #170	; 0xaa
 800e2d0:	2203      	movs	r2, #3
 800e2d2:	e9c0 2300 	strd	r2, r3, [r0]
 800e2d6:	2306      	movs	r3, #6
 800e2d8:	6083      	str	r3, [r0, #8]
 800e2da:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800e2de:	8243      	strh	r3, [r0, #18]
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	460d      	mov	r5, r1
 800e2e4:	4604      	mov	r4, r0
 800e2e6:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800e2ea:	4b17      	ldr	r3, [pc, #92]	; (800e348 <WS28xx::WS28xx(PixelConfiguration&)+0x7c>)
 800e2ec:	a901      	add	r1, sp, #4
 800e2ee:	6018      	str	r0, [r3, #0]
 800e2f0:	4628      	mov	r0, r5
 800e2f2:	f7fe fdd3 	bl	800ce9c <PixelConfiguration::Validate(unsigned int&)>
 800e2f6:	4628      	mov	r0, r5
 800e2f8:	f7fe fe3c 	bl	800cf74 <PixelConfiguration::Dump()>
 800e2fc:	68ab      	ldr	r3, [r5, #8]
 800e2fe:	686a      	ldr	r2, [r5, #4]
 800e300:	60a3      	str	r3, [r4, #8]
 800e302:	8a2b      	ldrh	r3, [r5, #16]
 800e304:	6829      	ldr	r1, [r5, #0]
 800e306:	8223      	strh	r3, [r4, #16]
 800e308:	7cab      	ldrb	r3, [r5, #18]
 800e30a:	7ce8      	ldrb	r0, [r5, #19]
 800e30c:	74e3      	strb	r3, [r4, #19]
 800e30e:	9b01      	ldr	r3, [sp, #4]
 800e310:	6021      	str	r1, [r4, #0]
 800e312:	4353      	muls	r3, r2
 800e314:	6062      	str	r2, [r4, #4]
 800e316:	74a0      	strb	r0, [r4, #18]
 800e318:	b998      	cbnz	r0, 800e342 <WS28xx::WS28xx(PixelConfiguration&)+0x76>
 800e31a:	390b      	subs	r1, #11
 800e31c:	2902      	cmp	r1, #2
 800e31e:	60e3      	str	r3, [r4, #12]
 800e320:	bf9e      	ittt	ls
 800e322:	68e3      	ldrls	r3, [r4, #12]
 800e324:	3208      	addls	r2, #8
 800e326:	18d2      	addls	r2, r2, r3
 800e328:	4620      	mov	r0, r4
 800e32a:	bf98      	it	ls
 800e32c:	60e2      	strls	r2, [r4, #12]
 800e32e:	f7ff ffb5 	bl	800e29c <WS28xx::SetupBuffers()>
 800e332:	f007 fa49 	bl	80157c8 <gd32_spi_dma_begin()>
 800e336:	68e8      	ldr	r0, [r5, #12]
 800e338:	f007 fab8 	bl	80158ac <gd32_spi_dma_set_speed_hz(unsigned int)>
 800e33c:	4620      	mov	r0, r4
 800e33e:	b003      	add	sp, #12
 800e340:	bd30      	pop	{r4, r5, pc}
 800e342:	00db      	lsls	r3, r3, #3
 800e344:	3301      	adds	r3, #1
 800e346:	e7e8      	b.n	800e31a <WS28xx::WS28xx(PixelConfiguration&)+0x4e>
 800e348:	20001958 	andcs	r1, r0, r8, asr r9

0800e34c <WS28xx::Update()>:
 800e34c:	2200      	movs	r2, #0
 800e34e:	b430      	push	{r4, r5}
 800e350:	4b0b      	ldr	r3, [pc, #44]	; (800e380 <WS28xx::Update()+0x34>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	68c1      	ldr	r1, [r0, #12]
 800e356:	6944      	ldr	r4, [r0, #20]
 800e358:	4299      	cmp	r1, r3
 800e35a:	d902      	bls.n	800e362 <WS28xx::Update()+0x16>
 800e35c:	54e2      	strb	r2, [r4, r3]
 800e35e:	3301      	adds	r3, #1
 800e360:	e7f8      	b.n	800e354 <WS28xx::Update()+0x8>
 800e362:	2300      	movs	r3, #0
 800e364:	6980      	ldr	r0, [r0, #24]
 800e366:	084d      	lsrs	r5, r1, #1
 800e368:	429d      	cmp	r5, r3
 800e36a:	d006      	beq.n	800e37a <WS28xx::Update()+0x2e>
 800e36c:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
 800e370:	ba52      	rev16	r2, r2
 800e372:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 800e376:	3301      	adds	r3, #1
 800e378:	e7f6      	b.n	800e368 <WS28xx::Update()+0x1c>
 800e37a:	bc30      	pop	{r4, r5}
 800e37c:	f007 bab2 	b.w	80158e4 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>
 800e380:	20001954 	andcs	r1, r0, r4, asr r9

0800e384 <WS28xx::Blackout()>:
 800e384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e386:	e9d0 6305 	ldrd	r6, r3, [r0, #20]
 800e38a:	4604      	mov	r4, r0
 800e38c:	6143      	str	r3, [r0, #20]
 800e38e:	f3bf 8f6f 	isb	sy
 800e392:	f007 fac1 	bl	8015918 <gd32_spi_dma_tx_is_active()>
 800e396:	2800      	cmp	r0, #0
 800e398:	d1f9      	bne.n	800e38e <WS28xx::Blackout()+0xa>
 800e39a:	6822      	ldr	r2, [r4, #0]
 800e39c:	6963      	ldr	r3, [r4, #20]
 800e39e:	3a0b      	subs	r2, #11
 800e3a0:	2a02      	cmp	r2, #2
 800e3a2:	7018      	strb	r0, [r3, #0]
 800e3a4:	d82a      	bhi.n	800e3fc <WS28xx::Blackout()+0x78>
 800e3a6:	4605      	mov	r5, r0
 800e3a8:	4607      	mov	r7, r0
 800e3aa:	7058      	strb	r0, [r3, #1]
 800e3ac:	7098      	strb	r0, [r3, #2]
 800e3ae:	70d8      	strb	r0, [r3, #3]
 800e3b0:	6863      	ldr	r3, [r4, #4]
 800e3b2:	42ab      	cmp	r3, r5
 800e3b4:	d908      	bls.n	800e3c8 <WS28xx::Blackout()+0x44>
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	4629      	mov	r1, r5
 800e3ba:	461a      	mov	r2, r3
 800e3bc:	4620      	mov	r0, r4
 800e3be:	9700      	str	r7, [sp, #0]
 800e3c0:	f7ff f984 	bl	800d6cc <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 800e3c4:	3501      	adds	r5, #1
 800e3c6:	e7f3      	b.n	800e3b0 <WS28xx::Blackout()+0x2c>
 800e3c8:	6821      	ldr	r1, [r4, #0]
 800e3ca:	68e2      	ldr	r2, [r4, #12]
 800e3cc:	390b      	subs	r1, #11
 800e3ce:	2901      	cmp	r1, #1
 800e3d0:	bf94      	ite	ls
 800e3d2:	21ff      	movls	r1, #255	; 0xff
 800e3d4:	2100      	movhi	r1, #0
 800e3d6:	6960      	ldr	r0, [r4, #20]
 800e3d8:	3a04      	subs	r2, #4
 800e3da:	1883      	adds	r3, r0, r2
 800e3dc:	5481      	strb	r1, [r0, r2]
 800e3de:	7059      	strb	r1, [r3, #1]
 800e3e0:	7099      	strb	r1, [r3, #2]
 800e3e2:	70d9      	strb	r1, [r3, #3]
 800e3e4:	4620      	mov	r0, r4
 800e3e6:	f7ff ffb1 	bl	800e34c <WS28xx::Update()>
 800e3ea:	f3bf 8f6f 	isb	sy
 800e3ee:	f007 fa93 	bl	8015918 <gd32_spi_dma_tx_is_active()>
 800e3f2:	2800      	cmp	r0, #0
 800e3f4:	d1f9      	bne.n	800e3ea <WS28xx::Blackout()+0x66>
 800e3f6:	6166      	str	r6, [r4, #20]
 800e3f8:	b003      	add	sp, #12
 800e3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3fc:	6963      	ldr	r3, [r4, #20]
 800e3fe:	6821      	ldr	r1, [r4, #0]
 800e400:	1c5a      	adds	r2, r3, #1
 800e402:	b101      	cbz	r1, 800e406 <WS28xx::Blackout()+0x82>
 800e404:	7c21      	ldrb	r1, [r4, #16]
 800e406:	68e0      	ldr	r0, [r4, #12]
 800e408:	3001      	adds	r0, #1
 800e40a:	4403      	add	r3, r0
 800e40c:	429a      	cmp	r2, r3
 800e40e:	d0e9      	beq.n	800e3e4 <WS28xx::Blackout()+0x60>
 800e410:	f802 1b01 	strb.w	r1, [r2], #1
 800e414:	e7fa      	b.n	800e40c <WS28xx::Blackout()+0x88>
	...

0800e418 <RemoteConfig::HandleList()>:
 800e418:	2212      	movs	r2, #18
 800e41a:	6803      	ldr	r3, [r0, #0]
 800e41c:	492f      	ldr	r1, [pc, #188]	; (800e4dc <RemoteConfig::HandleList()+0xc4>)
 800e41e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e422:	fb02 1103 	mla	r1, r2, r3, r1
 800e426:	220c      	movs	r2, #12
 800e428:	4604      	mov	r4, r0
 800e42a:	6843      	ldr	r3, [r0, #4]
 800e42c:	482c      	ldr	r0, [pc, #176]	; (800e4e0 <RemoteConfig::HandleList()+0xc8>)
 800e42e:	4e2d      	ldr	r6, [pc, #180]	; (800e4e4 <RemoteConfig::HandleList()+0xcc>)
 800e430:	fb02 0003 	mla	r0, r2, r3, r0
 800e434:	4b2c      	ldr	r3, [pc, #176]	; (800e4e8 <RemoteConfig::HandleList()+0xd0>)
 800e436:	4f2d      	ldr	r7, [pc, #180]	; (800e4ec <RemoteConfig::HandleList()+0xd4>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	6835      	ldr	r5, [r6, #0]
 800e43c:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800e440:	f897 9009 	ldrb.w	r9, [r7, #9]
 800e444:	fa5f f38c 	uxtb.w	r3, ip
 800e448:	ea4f 6e1c 	mov.w	lr, ip, lsr #24
 800e44c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 800e450:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800e454:	b089      	sub	sp, #36	; 0x24
 800e456:	3507      	adds	r5, #7
 800e458:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 800e45c:	f1b9 0f00 	cmp.w	r9, #0
 800e460:	d020      	beq.n	800e4a4 <RemoteConfig::HandleList()+0x8c>
 800e462:	b2d2      	uxtb	r2, r2
 800e464:	3709      	adds	r7, #9
 800e466:	9201      	str	r2, [sp, #4]
 800e468:	fa5f f28c 	uxtb.w	r2, ip
 800e46c:	e9cd 1003 	strd	r1, r0, [sp, #12]
 800e470:	9200      	str	r2, [sp, #0]
 800e472:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800e476:	4628      	mov	r0, r5
 800e478:	e9cd 8705 	strd	r8, r7, [sp, #20]
 800e47c:	4a1c      	ldr	r2, [pc, #112]	; (800e4f0 <RemoteConfig::HandleList()+0xd8>)
 800e47e:	f8cd e008 	str.w	lr, [sp, #8]
 800e482:	f7fa fc43 	bl	8008d0c <snprintf>
 800e486:	8ba3      	ldrh	r3, [r4, #28]
 800e488:	2b05      	cmp	r3, #5
 800e48a:	d11b      	bne.n	800e4c4 <RemoteConfig::HandleList()+0xac>
 800e48c:	f642 1305 	movw	r3, #10501	; 0x2905
 800e490:	9300      	str	r3, [sp, #0]
 800e492:	69a3      	ldr	r3, [r4, #24]
 800e494:	b282      	uxth	r2, r0
 800e496:	4629      	mov	r1, r5
 800e498:	7d20      	ldrb	r0, [r4, #20]
 800e49a:	f002 fda3 	bl	8010fe4 <udp_send>
 800e49e:	b009      	add	sp, #36	; 0x24
 800e4a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4a4:	b2d2      	uxtb	r2, r2
 800e4a6:	9201      	str	r2, [sp, #4]
 800e4a8:	fa5f f28c 	uxtb.w	r2, ip
 800e4ac:	e9cd 0804 	strd	r0, r8, [sp, #16]
 800e4b0:	e9cd e102 	strd	lr, r1, [sp, #8]
 800e4b4:	9200      	str	r2, [sp, #0]
 800e4b6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800e4ba:	4628      	mov	r0, r5
 800e4bc:	4a0d      	ldr	r2, [pc, #52]	; (800e4f4 <RemoteConfig::HandleList()+0xdc>)
 800e4be:	f7fa fc25 	bl	8008d0c <snprintf>
 800e4c2:	e7e0      	b.n	800e486 <RemoteConfig::HandleList()+0x6e>
 800e4c4:	2b06      	cmp	r3, #6
 800e4c6:	d1ea      	bne.n	800e49e <RemoteConfig::HandleList()+0x86>
 800e4c8:	6833      	ldr	r3, [r6, #0]
 800e4ca:	799b      	ldrb	r3, [r3, #6]
 800e4cc:	2b2a      	cmp	r3, #42	; 0x2a
 800e4ce:	d1e6      	bne.n	800e49e <RemoteConfig::HandleList()+0x86>
 800e4d0:	f642 1305 	movw	r3, #10501	; 0x2905
 800e4d4:	9300      	str	r3, [sp, #0]
 800e4d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e4da:	e7db      	b.n	800e494 <RemoteConfig::HandleList()+0x7c>
 800e4dc:	080170a9 	stmdaeq	r1, {r0, r3, r5, r7, ip, sp, lr}
 800e4e0:	0801714b 	stmdaeq	r1, {r0, r1, r3, r6, r8, ip, sp, lr}
 800e4e4:	2000195c 	andcs	r1, r0, ip, asr r9
 800e4e8:	2000a29c 	mulcs	r0, ip, r2
 800e4ec:	20001960 	andcs	r1, r0, r0, ror #18
 800e4f0:	08016ff2 	stmdaeq	r1, {r1, r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 800e4f4:	0801700b 	stmdaeq	r1, {r0, r1, r3, ip, sp, lr}

0800e4f8 <RemoteConfig::HandleDisplayGet()>:
 800e4f8:	8b83      	ldrh	r3, [r0, #28]
 800e4fa:	2b08      	cmp	r3, #8
 800e4fc:	d11b      	bne.n	800e536 <RemoteConfig::HandleDisplayGet()+0x3e>
 800e4fe:	4b0e      	ldr	r3, [pc, #56]	; (800e538 <RemoteConfig::HandleDisplayGet()+0x40>)
 800e500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	4d0d      	ldr	r5, [pc, #52]	; (800e53c <RemoteConfig::HandleDisplayGet()+0x44>)
 800e506:	7c19      	ldrb	r1, [r3, #16]
 800e508:	4a0d      	ldr	r2, [pc, #52]	; (800e540 <RemoteConfig::HandleDisplayGet()+0x48>)
 800e50a:	4b0e      	ldr	r3, [pc, #56]	; (800e544 <RemoteConfig::HandleDisplayGet()+0x4c>)
 800e50c:	4604      	mov	r4, r0
 800e50e:	2900      	cmp	r1, #0
 800e510:	bf18      	it	ne
 800e512:	4613      	movne	r3, r2
 800e514:	6828      	ldr	r0, [r5, #0]
 800e516:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800e51a:	4a0b      	ldr	r2, [pc, #44]	; (800e548 <RemoteConfig::HandleDisplayGet()+0x50>)
 800e51c:	f7fa fbf6 	bl	8008d0c <snprintf>
 800e520:	f642 1305 	movw	r3, #10501	; 0x2905
 800e524:	9300      	str	r3, [sp, #0]
 800e526:	b282      	uxth	r2, r0
 800e528:	69a3      	ldr	r3, [r4, #24]
 800e52a:	6829      	ldr	r1, [r5, #0]
 800e52c:	7d20      	ldrb	r0, [r4, #20]
 800e52e:	f002 fd59 	bl	8010fe4 <udp_send>
 800e532:	b003      	add	sp, #12
 800e534:	bd30      	pop	{r4, r5, pc}
 800e536:	4770      	bx	lr
 800e538:	2000a8d4 	ldrdcs	sl, [r0], -r4
 800e53c:	2000195c 	andcs	r1, r0, ip, asr r9
 800e540:	08017024 	stmdaeq	r1, {r2, r5, ip, sp, lr}
 800e544:	08017021 	stmdaeq	r1, {r0, r5, ip, sp, lr}
 800e548:	08017028 	stmdaeq	r1, {r3, r5, ip, sp, lr}

0800e54c <RemoteConfig::HandleVersion()>:
 800e54c:	8b83      	ldrh	r3, [r0, #28]
 800e54e:	2b08      	cmp	r3, #8
 800e550:	d114      	bne.n	800e57c <RemoteConfig::HandleVersion()+0x30>
 800e552:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e554:	4d0a      	ldr	r5, [pc, #40]	; (800e580 <RemoteConfig::HandleVersion()+0x34>)
 800e556:	4604      	mov	r4, r0
 800e558:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800e55c:	4b09      	ldr	r3, [pc, #36]	; (800e584 <RemoteConfig::HandleVersion()+0x38>)
 800e55e:	4a0a      	ldr	r2, [pc, #40]	; (800e588 <RemoteConfig::HandleVersion()+0x3c>)
 800e560:	6828      	ldr	r0, [r5, #0]
 800e562:	f7fa fbd3 	bl	8008d0c <snprintf>
 800e566:	f642 1305 	movw	r3, #10501	; 0x2905
 800e56a:	9300      	str	r3, [sp, #0]
 800e56c:	b282      	uxth	r2, r0
 800e56e:	69a3      	ldr	r3, [r4, #24]
 800e570:	6829      	ldr	r1, [r5, #0]
 800e572:	7d20      	ldrb	r0, [r4, #20]
 800e574:	f002 fd36 	bl	8010fe4 <udp_send>
 800e578:	b003      	add	sp, #12
 800e57a:	bd30      	pop	{r4, r5, pc}
 800e57c:	4770      	bx	lr
 800e57e:	bf00      	nop
 800e580:	2000195c 	andcs	r1, r0, ip, asr r9
 800e584:	2000a97a 	andcs	sl, r0, sl, ror r9
 800e588:	08017034 	stmdaeq	r1, {r2, r4, r5, ip, sp, lr}

0800e58c <RemoteConfig::HandleUptime()>:
 800e58c:	7bc3      	ldrb	r3, [r0, #15]
 800e58e:	b1e3      	cbz	r3, 800e5ca <RemoteConfig::HandleUptime()+0x3e>
 800e590:	4b0e      	ldr	r3, [pc, #56]	; (800e5cc <RemoteConfig::HandleUptime()+0x40>)
 800e592:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e594:	681a      	ldr	r2, [r3, #0]
 800e596:	8b83      	ldrh	r3, [r0, #28]
 800e598:	4604      	mov	r4, r0
 800e59a:	2b07      	cmp	r3, #7
 800e59c:	d113      	bne.n	800e5c6 <RemoteConfig::HandleUptime()+0x3a>
 800e59e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e5a2:	4d0b      	ldr	r5, [pc, #44]	; (800e5d0 <RemoteConfig::HandleUptime()+0x44>)
 800e5a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5a8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800e5ac:	4a09      	ldr	r2, [pc, #36]	; (800e5d4 <RemoteConfig::HandleUptime()+0x48>)
 800e5ae:	6828      	ldr	r0, [r5, #0]
 800e5b0:	f7fa fbac 	bl	8008d0c <snprintf>
 800e5b4:	f642 1305 	movw	r3, #10501	; 0x2905
 800e5b8:	9300      	str	r3, [sp, #0]
 800e5ba:	b282      	uxth	r2, r0
 800e5bc:	69a3      	ldr	r3, [r4, #24]
 800e5be:	6829      	ldr	r1, [r5, #0]
 800e5c0:	7d20      	ldrb	r0, [r4, #20]
 800e5c2:	f002 fd0f 	bl	8010fe4 <udp_send>
 800e5c6:	b003      	add	sp, #12
 800e5c8:	bd30      	pop	{r4, r5, pc}
 800e5ca:	4770      	bx	lr
 800e5cc:	2000a9dc 	ldrdcs	sl, [r0], -ip
 800e5d0:	2000195c 	andcs	r1, r0, ip, asr r9
 800e5d4:	0801703f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, ip, sp, lr}

0800e5d8 <RemoteConfig::HandleDisplaySet()>:
 800e5d8:	b538      	push	{r3, r4, r5, lr}
 800e5da:	8b83      	ldrh	r3, [r0, #28]
 800e5dc:	2b09      	cmp	r3, #9
 800e5de:	d113      	bne.n	800e608 <RemoteConfig::HandleDisplaySet()+0x30>
 800e5e0:	4b0a      	ldr	r3, [pc, #40]	; (800e60c <RemoteConfig::HandleDisplaySet()+0x34>)
 800e5e2:	681c      	ldr	r4, [r3, #0]
 800e5e4:	4b0a      	ldr	r3, [pc, #40]	; (800e610 <RemoteConfig::HandleDisplaySet()+0x38>)
 800e5e6:	69a0      	ldr	r0, [r4, #24]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	7a5d      	ldrb	r5, [r3, #9]
 800e5ec:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800e5f0:	4259      	negs	r1, r3
 800e5f2:	4159      	adcs	r1, r3
 800e5f4:	b140      	cbz	r0, 800e608 <RemoteConfig::HandleDisplaySet()+0x30>
 800e5f6:	6803      	ldr	r3, [r0, #0]
 800e5f8:	7421      	strb	r1, [r4, #16]
 800e5fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5fc:	4798      	blx	r3
 800e5fe:	2d30      	cmp	r5, #48	; 0x30
 800e600:	bf1e      	ittt	ne
 800e602:	4b04      	ldrne	r3, [pc, #16]	; (800e614 <RemoteConfig::HandleDisplaySet()+0x3c>)
 800e604:	681b      	ldrne	r3, [r3, #0]
 800e606:	6063      	strne	r3, [r4, #4]
 800e608:	bd38      	pop	{r3, r4, r5, pc}
 800e60a:	bf00      	nop
 800e60c:	2000a8d4 	ldrdcs	sl, [r0], -r4
 800e610:	2000195c 	andcs	r1, r0, ip, asr r9
 800e614:	2000a9dc 	ldrdcs	sl, [r0], -ip

0800e618 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>:
 800e618:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e61c:	2500      	movs	r5, #0
 800e61e:	461f      	mov	r7, r3
 800e620:	6083      	str	r3, [r0, #8]
 800e622:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e626:	4604      	mov	r4, r0
 800e628:	4690      	mov	r8, r2
 800e62a:	4689      	mov	r9, r1
 800e62c:	f100 0a24 	add.w	sl, r0, #36	; 0x24
 800e630:	e9c0 1200 	strd	r1, r2, [r0]
 800e634:	4e12      	ldr	r6, [pc, #72]	; (800e680 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x68>)
 800e636:	e9c0 3505 	strd	r3, r5, [r0, #20]
 800e63a:	f8df b048 	ldr.w	fp, [pc, #72]	; 800e684 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x6c>
 800e63e:	60c5      	str	r5, [r0, #12]
 800e640:	8205      	strh	r5, [r0, #16]
 800e642:	8385      	strh	r5, [r0, #28]
 800e644:	6205      	str	r5, [r0, #32]
 800e646:	4650      	mov	r0, sl
 800e648:	f000 fcb0 	bl	800efac <HttpDaemon::HttpDaemon()>
 800e64c:	4b0e      	ldr	r3, [pc, #56]	; (800e688 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x70>)
 800e64e:	4631      	mov	r1, r6
 800e650:	f8db 0000 	ldr.w	r0, [fp]
 800e654:	601c      	str	r4, [r3, #0]
 800e656:	f003 f99b 	bl	8011990 <Network::MacAddressCopyTo(unsigned char*)>
 800e65a:	f642 1105 	movw	r1, #10501	; 0x2905
 800e65e:	f8db 0000 	ldr.w	r0, [fp]
 800e662:	f886 9006 	strb.w	r9, [r6, #6]
 800e666:	f886 8007 	strb.w	r8, [r6, #7]
 800e66a:	7237      	strb	r7, [r6, #8]
 800e66c:	7275      	strb	r5, [r6, #9]
 800e66e:	f003 f989 	bl	8011984 <Network::Begin(unsigned short)>
 800e672:	6160      	str	r0, [r4, #20]
 800e674:	4650      	mov	r0, sl
 800e676:	f000 fcb1 	bl	800efdc <HttpDaemon::Start()>
 800e67a:	4620      	mov	r0, r4
 800e67c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e680:	20001960 	andcs	r1, r0, r0, ror #18
 800e684:	2000a29c 	mulcs	r0, ip, r2
 800e688:	20001984 	andcs	r1, r0, r4, lsl #19

0800e68c <RemoteConfig::GetStringNode() const>:
 800e68c:	2012      	movs	r0, #18
 800e68e:	4b03      	ldr	r3, [pc, #12]	; (800e69c <RemoteConfig::GetStringNode() const+0x10>)
 800e690:	799a      	ldrb	r2, [r3, #6]
 800e692:	4b03      	ldr	r3, [pc, #12]	; (800e6a0 <RemoteConfig::GetStringNode() const+0x14>)
 800e694:	fb00 3002 	mla	r0, r0, r2, r3
 800e698:	4770      	bx	lr
 800e69a:	bf00      	nop
 800e69c:	20001960 	andcs	r1, r0, r0, ror #18
 800e6a0:	080170a9 	stmdaeq	r1, {r0, r3, r5, r7, ip, sp, lr}

0800e6a4 <RemoteConfig::GetStringOutput() const>:
 800e6a4:	200c      	movs	r0, #12
 800e6a6:	4b03      	ldr	r3, [pc, #12]	; (800e6b4 <RemoteConfig::GetStringOutput() const+0x10>)
 800e6a8:	79da      	ldrb	r2, [r3, #7]
 800e6aa:	4b03      	ldr	r3, [pc, #12]	; (800e6b8 <RemoteConfig::GetStringOutput() const+0x14>)
 800e6ac:	fb00 3002 	mla	r0, r0, r2, r3
 800e6b0:	4770      	bx	lr
 800e6b2:	bf00      	nop
 800e6b4:	20001960 	andcs	r1, r0, r0, ror #18
 800e6b8:	0801714b 	stmdaeq	r1, {r0, r1, r3, r6, r8, ip, sp, lr}

0800e6bc <RemoteConfig::SetDisable(bool)>:
 800e6bc:	b538      	push	{r3, r4, r5, lr}
 800e6be:	4604      	mov	r4, r0
 800e6c0:	7b03      	ldrb	r3, [r0, #12]
 800e6c2:	b161      	cbz	r1, 800e6de <RemoteConfig::SetDisable(bool)+0x22>
 800e6c4:	b953      	cbnz	r3, 800e6dc <RemoteConfig::SetDisable(bool)+0x20>
 800e6c6:	4b0c      	ldr	r3, [pc, #48]	; (800e6f8 <RemoteConfig::SetDisable(bool)+0x3c>)
 800e6c8:	f642 1105 	movw	r1, #10501	; 0x2905
 800e6cc:	6818      	ldr	r0, [r3, #0]
 800e6ce:	f003 f95c 	bl	801198a <Network::End(unsigned short)>
 800e6d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e6d6:	6163      	str	r3, [r4, #20]
 800e6d8:	2301      	movs	r3, #1
 800e6da:	7323      	strb	r3, [r4, #12]
 800e6dc:	bd38      	pop	{r3, r4, r5, pc}
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d0fc      	beq.n	800e6dc <RemoteConfig::SetDisable(bool)+0x20>
 800e6e2:	4b05      	ldr	r3, [pc, #20]	; (800e6f8 <RemoteConfig::SetDisable(bool)+0x3c>)
 800e6e4:	460d      	mov	r5, r1
 800e6e6:	6818      	ldr	r0, [r3, #0]
 800e6e8:	f642 1105 	movw	r1, #10501	; 0x2905
 800e6ec:	f003 f94a 	bl	8011984 <Network::Begin(unsigned short)>
 800e6f0:	7325      	strb	r5, [r4, #12]
 800e6f2:	6160      	str	r0, [r4, #20]
 800e6f4:	e7f2      	b.n	800e6dc <RemoteConfig::SetDisable(bool)+0x20>
 800e6f6:	bf00      	nop
 800e6f8:	2000a29c 	mulcs	r0, ip, r2

0800e6fc <RemoteConfig::SetDisplayName(char const*)>:
 800e6fc:	2217      	movs	r2, #23
 800e6fe:	4809      	ldr	r0, [pc, #36]	; (800e724 <RemoteConfig::SetDisplayName(char const*)+0x28>)
 800e700:	b508      	push	{r3, lr}
 800e702:	1e4b      	subs	r3, r1, #1
 800e704:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800e708:	b931      	cbnz	r1, 800e718 <RemoteConfig::SetDisplayName(char const*)+0x1c>
 800e70a:	f006 f835 	bl	8014778 <memset>
 800e70e:	2200      	movs	r2, #0
 800e710:	4b05      	ldr	r3, [pc, #20]	; (800e728 <RemoteConfig::SetDisplayName(char const*)+0x2c>)
 800e712:	f883 2020 	strb.w	r2, [r3, #32]
 800e716:	bd08      	pop	{r3, pc}
 800e718:	3a01      	subs	r2, #1
 800e71a:	f800 1b01 	strb.w	r1, [r0], #1
 800e71e:	d1f1      	bne.n	800e704 <RemoteConfig::SetDisplayName(char const*)+0x8>
 800e720:	e7f5      	b.n	800e70e <RemoteConfig::SetDisplayName(char const*)+0x12>
 800e722:	bf00      	nop
 800e724:	20001969 	andcs	r1, r0, r9, ror #18
 800e728:	20001960 	andcs	r1, r0, r0, ror #18

0800e72c <RemoteConfig::HandleGet(void*, unsigned int)>:
 800e72c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e72e:	4604      	mov	r4, r0
 800e730:	4616      	mov	r6, r2
 800e732:	460d      	mov	r5, r1
 800e734:	4f27      	ldr	r7, [pc, #156]	; (800e7d4 <RemoteConfig::HandleGet(void*, unsigned int)+0xa8>)
 800e736:	b085      	sub	sp, #20
 800e738:	b9a9      	cbnz	r1, 800e766 <RemoteConfig::HandleGet(void*, unsigned int)+0x3a>
 800e73a:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 800e73e:	6839      	ldr	r1, [r7, #0]
 800e740:	aa03      	add	r2, sp, #12
 800e742:	3105      	adds	r1, #5
 800e744:	9303      	str	r3, [sp, #12]
 800e746:	f000 fbd3 	bl	800eef0 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800e74a:	1e03      	subs	r3, r0, #0
 800e74c:	da1b      	bge.n	800e786 <RemoteConfig::HandleGet(void*, unsigned int)+0x5a>
 800e74e:	f642 1305 	movw	r3, #10501	; 0x2905
 800e752:	220b      	movs	r2, #11
 800e754:	9300      	str	r3, [sp, #0]
 800e756:	4920      	ldr	r1, [pc, #128]	; (800e7d8 <RemoteConfig::HandleGet(void*, unsigned int)+0xac>)
 800e758:	69a3      	ldr	r3, [r4, #24]
 800e75a:	7d20      	ldrb	r0, [r4, #20]
 800e75c:	f002 fc42 	bl	8010fe4 <udp_send>
 800e760:	200c      	movs	r0, #12
 800e762:	b005      	add	sp, #20
 800e764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e766:	9203      	str	r2, [sp, #12]
 800e768:	aa03      	add	r2, sp, #12
 800e76a:	6039      	str	r1, [r7, #0]
 800e76c:	f000 fbc0 	bl	800eef0 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800e770:	1e03      	subs	r3, r0, #0
 800e772:	da08      	bge.n	800e786 <RemoteConfig::HandleGet(void*, unsigned int)+0x5a>
 800e774:	2e0b      	cmp	r6, #11
 800e776:	4632      	mov	r2, r6
 800e778:	4628      	mov	r0, r5
 800e77a:	bf28      	it	cs
 800e77c:	220b      	movcs	r2, #11
 800e77e:	4916      	ldr	r1, [pc, #88]	; (800e7d8 <RemoteConfig::HandleGet(void*, unsigned int)+0xac>)
 800e780:	f005 ffd8 	bl	8014734 <memcpy>
 800e784:	e7ec      	b.n	800e760 <RemoteConfig::HandleGet(void*, unsigned int)+0x34>
 800e786:	201c      	movs	r0, #28
 800e788:	4343      	muls	r3, r0
 800e78a:	4914      	ldr	r1, [pc, #80]	; (800e7dc <RemoteConfig::HandleGet(void*, unsigned int)+0xb0>)
 800e78c:	18ca      	adds	r2, r1, r3
 800e78e:	6852      	ldr	r2, [r2, #4]
 800e790:	58cb      	ldr	r3, [r1, r3]
 800e792:	ea4f 0c62 	mov.w	ip, r2, asr #1
 800e796:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800e79a:	07d2      	lsls	r2, r2, #31
 800e79c:	bf48      	it	mi
 800e79e:	f854 200c 	ldrmi.w	r2, [r4, ip]
 800e7a2:	a903      	add	r1, sp, #12
 800e7a4:	bf48      	it	mi
 800e7a6:	58d3      	ldrmi	r3, [r2, r3]
 800e7a8:	4798      	blx	r3
 800e7aa:	9a03      	ldr	r2, [sp, #12]
 800e7ac:	b955      	cbnz	r5, 800e7c4 <RemoteConfig::HandleGet(void*, unsigned int)+0x98>
 800e7ae:	f642 1305 	movw	r3, #10501	; 0x2905
 800e7b2:	6839      	ldr	r1, [r7, #0]
 800e7b4:	9300      	str	r3, [sp, #0]
 800e7b6:	7d20      	ldrb	r0, [r4, #20]
 800e7b8:	69a3      	ldr	r3, [r4, #24]
 800e7ba:	b292      	uxth	r2, r2
 800e7bc:	f002 fc12 	bl	8010fe4 <udp_send>
 800e7c0:	9803      	ldr	r0, [sp, #12]
 800e7c2:	e7ce      	b.n	800e762 <RemoteConfig::HandleGet(void*, unsigned int)+0x36>
 800e7c4:	42b2      	cmp	r2, r6
 800e7c6:	bf28      	it	cs
 800e7c8:	4632      	movcs	r2, r6
 800e7ca:	4628      	mov	r0, r5
 800e7cc:	6839      	ldr	r1, [r7, #0]
 800e7ce:	f005 ffbc 	bl	801474a <memmove>
 800e7d2:	e7f5      	b.n	800e7c0 <RemoteConfig::HandleGet(void*, unsigned int)+0x94>
 800e7d4:	2000195c 	andcs	r1, r0, ip, asr r9
 800e7d8:	0801704c 	stmdaeq	r1, {r2, r3, r6, ip, sp, lr}
 800e7dc:	080172b4 	stmdaeq	r1, {r2, r4, r5, r7, r9, ip, sp, lr}

0800e7e0 <RemoteConfig::HandleGetNoParams()>:
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	4611      	mov	r1, r2
 800e7e4:	f7ff bfa2 	b.w	800e72c <RemoteConfig::HandleGet(void*, unsigned int)>

0800e7e8 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)>:
 800e7e8:	b510      	push	{r4, lr}
 800e7ea:	460c      	mov	r4, r1
 800e7ec:	4b07      	ldr	r3, [pc, #28]	; (800e80c <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x24>)
 800e7ee:	b08a      	sub	sp, #40	; 0x28
 800e7f0:	6819      	ldr	r1, [r3, #0]
 800e7f2:	a801      	add	r0, sp, #4
 800e7f4:	f000 f9d8 	bl	800eba8 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 800e7f8:	4905      	ldr	r1, [pc, #20]	; (800e810 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x28>)
 800e7fa:	4623      	mov	r3, r4
 800e7fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e800:	6809      	ldr	r1, [r1, #0]
 800e802:	a801      	add	r0, sp, #4
 800e804:	f000 faf4 	bl	800edf0 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>
 800e808:	b00a      	add	sp, #40	; 0x28
 800e80a:	bd10      	pop	{r4, pc}
 800e80c:	200029b0 			; <UNDEFINED> instruction: 0x200029b0
 800e810:	2000195c 	andcs	r1, r0, ip, asr r9

0800e814 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)>:
 800e814:	b513      	push	{r0, r1, r4, lr}
 800e816:	460c      	mov	r4, r1
 800e818:	4b07      	ldr	r3, [pc, #28]	; (800e838 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x24>)
 800e81a:	a801      	add	r0, sp, #4
 800e81c:	6819      	ldr	r1, [r3, #0]
 800e81e:	f003 fb37 	bl	8011e90 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800e822:	4906      	ldr	r1, [pc, #24]	; (800e83c <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x28>)
 800e824:	4623      	mov	r3, r4
 800e826:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e82a:	6809      	ldr	r1, [r1, #0]
 800e82c:	a801      	add	r0, sp, #4
 800e82e:	f003 fd1b 	bl	8012268 <NetworkParams::Save(char*, unsigned int, unsigned int&)>
 800e832:	b002      	add	sp, #8
 800e834:	bd10      	pop	{r4, pc}
 800e836:	bf00      	nop
 800e838:	200029ac 	andcs	r2, r0, ip, lsr #19
 800e83c:	2000195c 	andcs	r1, r0, ip, asr r9

0800e840 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)>:
 800e840:	b510      	push	{r4, lr}
 800e842:	460c      	mov	r4, r1
 800e844:	4b07      	ldr	r3, [pc, #28]	; (800e864 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x24>)
 800e846:	b0a4      	sub	sp, #144	; 0x90
 800e848:	6819      	ldr	r1, [r3, #0]
 800e84a:	a801      	add	r0, sp, #4
 800e84c:	f7fc f93a 	bl	800aac4 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 800e850:	4905      	ldr	r1, [pc, #20]	; (800e868 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x28>)
 800e852:	4623      	mov	r3, r4
 800e854:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e858:	6809      	ldr	r1, [r1, #0]
 800e85a:	a801      	add	r0, sp, #4
 800e85c:	f7fc fd00 	bl	800b260 <ArtNetParams::Save(char*, unsigned int, unsigned int&)>
 800e860:	b024      	add	sp, #144	; 0x90
 800e862:	bd10      	pop	{r4, pc}
 800e864:	200029a4 	andcs	r2, r0, r4, lsr #19
 800e868:	2000195c 	andcs	r1, r0, ip, asr r9

0800e86c <RemoteConfig::HandleGetDevicesTxt(unsigned int&)>:
 800e86c:	b510      	push	{r4, lr}
 800e86e:	460c      	mov	r4, r1
 800e870:	4b07      	ldr	r3, [pc, #28]	; (800e890 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)+0x24>)
 800e872:	b08c      	sub	sp, #48	; 0x30
 800e874:	6819      	ldr	r1, [r3, #0]
 800e876:	a801      	add	r0, sp, #4
 800e878:	f7fd ff94 	bl	800c7a4 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>
 800e87c:	4905      	ldr	r1, [pc, #20]	; (800e894 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)+0x28>)
 800e87e:	4623      	mov	r3, r4
 800e880:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e884:	6809      	ldr	r1, [r1, #0]
 800e886:	a801      	add	r0, sp, #4
 800e888:	f7fe fa38 	bl	800ccfc <WS28xxDmxParams::Save(char*, unsigned int, unsigned int&)>
 800e88c:	b00c      	add	sp, #48	; 0x30
 800e88e:	bd10      	pop	{r4, pc}
 800e890:	200029b4 			; <UNDEFINED> instruction: 0x200029b4
 800e894:	2000195c 	andcs	r1, r0, ip, asr r9

0800e898 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)>:
 800e898:	b510      	push	{r4, lr}
 800e89a:	460c      	mov	r4, r1
 800e89c:	4b07      	ldr	r3, [pc, #28]	; (800e8bc <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x24>)
 800e89e:	b08a      	sub	sp, #40	; 0x28
 800e8a0:	6819      	ldr	r1, [r3, #0]
 800e8a2:	4668      	mov	r0, sp
 800e8a4:	f004 fc8c 	bl	80131c0 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 800e8a8:	4905      	ldr	r1, [pc, #20]	; (800e8c0 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x28>)
 800e8aa:	4623      	mov	r3, r4
 800e8ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e8b0:	4668      	mov	r0, sp
 800e8b2:	6809      	ldr	r1, [r1, #0]
 800e8b4:	f004 fdba 	bl	801342c <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>
 800e8b8:	b00a      	add	sp, #40	; 0x28
 800e8ba:	bd10      	pop	{r4, pc}
 800e8bc:	200029a8 	andcs	r2, r0, r8, lsr #19
 800e8c0:	2000195c 	andcs	r1, r0, ip, asr r9

0800e8c4 <RemoteConfig::HandleSet(void*, unsigned int)>:
 800e8c4:	b530      	push	{r4, r5, lr}
 800e8c6:	b085      	sub	sp, #20
 800e8c8:	4604      	mov	r4, r0
 800e8ca:	9201      	str	r2, [sp, #4]
 800e8cc:	b9c9      	cbnz	r1, 800e902 <RemoteConfig::HandleSet(void*, unsigned int)+0x3e>
 800e8ce:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800e8d2:	9303      	str	r3, [sp, #12]
 800e8d4:	4b1b      	ldr	r3, [pc, #108]	; (800e944 <RemoteConfig::HandleSet(void*, unsigned int)+0x80>)
 800e8d6:	aa03      	add	r2, sp, #12
 800e8d8:	6819      	ldr	r1, [r3, #0]
 800e8da:	3101      	adds	r1, #1
 800e8dc:	f000 fb08 	bl	800eef0 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800e8e0:	2800      	cmp	r0, #0
 800e8e2:	db24      	blt.n	800e92e <RemoteConfig::HandleSet(void*, unsigned int)+0x6a>
 800e8e4:	221c      	movs	r2, #28
 800e8e6:	4b18      	ldr	r3, [pc, #96]	; (800e948 <RemoteConfig::HandleSet(void*, unsigned int)+0x84>)
 800e8e8:	fb02 3300 	mla	r3, r2, r0, r3
 800e8ec:	68da      	ldr	r2, [r3, #12]
 800e8ee:	689b      	ldr	r3, [r3, #8]
 800e8f0:	1051      	asrs	r1, r2, #1
 800e8f2:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800e8f6:	07d2      	lsls	r2, r2, #31
 800e8f8:	bf44      	itt	mi
 800e8fa:	5862      	ldrmi	r2, [r4, r1]
 800e8fc:	58d3      	ldrmi	r3, [r2, r3]
 800e8fe:	4798      	blx	r3
 800e900:	e015      	b.n	800e92e <RemoteConfig::HandleSet(void*, unsigned int)+0x6a>
 800e902:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800e906:	4613      	mov	r3, r2
 800e908:	d811      	bhi.n	800e92e <RemoteConfig::HandleSet(void*, unsigned int)+0x6a>
 800e90a:	2200      	movs	r2, #0
 800e90c:	460d      	mov	r5, r1
 800e90e:	490f      	ldr	r1, [pc, #60]	; (800e94c <RemoteConfig::HandleSet(void*, unsigned int)+0x88>)
 800e910:	6202      	str	r2, [r0, #32]
 800e912:	7809      	ldrb	r1, [r1, #0]
 800e914:	b29b      	uxth	r3, r3
 800e916:	07c9      	lsls	r1, r1, #31
 800e918:	d50b      	bpl.n	800e932 <RemoteConfig::HandleSet(void*, unsigned int)+0x6e>
 800e91a:	7829      	ldrb	r1, [r5, #0]
 800e91c:	297b      	cmp	r1, #123	; 0x7b
 800e91e:	d108      	bne.n	800e932 <RemoteConfig::HandleSet(void*, unsigned int)+0x6e>
 800e920:	3b01      	subs	r3, #1
 800e922:	4628      	mov	r0, r5
 800e924:	b299      	uxth	r1, r3
 800e926:	f004 fef3 	bl	8013710 <properties::convert_json_file(char*, unsigned short, bool)>
 800e92a:	2800      	cmp	r0, #0
 800e92c:	dc08      	bgt.n	800e940 <RemoteConfig::HandleSet(void*, unsigned int)+0x7c>
 800e92e:	b005      	add	sp, #20
 800e930:	bd30      	pop	{r4, r5, pc}
 800e932:	83a3      	strh	r3, [r4, #28]
 800e934:	4b03      	ldr	r3, [pc, #12]	; (800e944 <RemoteConfig::HandleSet(void*, unsigned int)+0x80>)
 800e936:	4620      	mov	r0, r4
 800e938:	601d      	str	r5, [r3, #0]
 800e93a:	aa01      	add	r2, sp, #4
 800e93c:	1c69      	adds	r1, r5, #1
 800e93e:	e7cd      	b.n	800e8dc <RemoteConfig::HandleSet(void*, unsigned int)+0x18>
 800e940:	83a0      	strh	r0, [r4, #28]
 800e942:	e7f7      	b.n	800e934 <RemoteConfig::HandleSet(void*, unsigned int)+0x70>
 800e944:	2000195c 	andcs	r1, r0, ip, asr r9
 800e948:	080172b4 	stmdaeq	r1, {r2, r4, r5, r7, r9, ip, sp, lr}
 800e94c:	2000a8d0 	ldrdcs	sl, [r0], -r0

0800e950 <RemoteConfig::Run()>:
 800e950:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800e954:	7b03      	ldrb	r3, [r0, #12]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d14f      	bne.n	800e9fa <RemoteConfig::Run()+0xaa>
 800e95a:	4604      	mov	r4, r0
 800e95c:	4d3e      	ldr	r5, [pc, #248]	; (800ea58 <RemoteConfig::Run()+0x108>)
 800e95e:	3024      	adds	r0, #36	; 0x24
 800e960:	f000 fdb6 	bl	800f4d0 <HttpDaemon::Run()>
 800e964:	4629      	mov	r1, r5
 800e966:	7d20      	ldrb	r0, [r4, #20]
 800e968:	f10d 030e 	add.w	r3, sp, #14
 800e96c:	f104 0218 	add.w	r2, r4, #24
 800e970:	f002 fb12 	bl	8010f98 <udp_recv2>
 800e974:	2803      	cmp	r0, #3
 800e976:	83a0      	strh	r0, [r4, #28]
 800e978:	d93f      	bls.n	800e9fa <RemoteConfig::Run()+0xaa>
 800e97a:	682b      	ldr	r3, [r5, #0]
 800e97c:	181a      	adds	r2, r3, r0
 800e97e:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800e982:	2a0a      	cmp	r2, #10
 800e984:	bf04      	itt	eq
 800e986:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
 800e98a:	83a0      	strheq	r0, [r4, #28]
 800e98c:	7819      	ldrb	r1, [r3, #0]
 800e98e:	293f      	cmp	r1, #63	; 0x3f
 800e990:	d139      	bne.n	800ea06 <RemoteConfig::Run()+0xb6>
 800e992:	4832      	ldr	r0, [pc, #200]	; (800ea5c <RemoteConfig::Run()+0x10c>)
 800e994:	2200      	movs	r2, #0
 800e996:	4607      	mov	r7, r0
 800e998:	8ba1      	ldrh	r1, [r4, #28]
 800e99a:	3901      	subs	r1, #1
 800e99c:	b289      	uxth	r1, r1
 800e99e:	83a1      	strh	r1, [r4, #28]
 800e9a0:	7b86      	ldrb	r6, [r0, #14]
 800e9a2:	8985      	ldrh	r5, [r0, #12]
 800e9a4:	b17e      	cbz	r6, 800e9c6 <RemoteConfig::Run()+0x76>
 800e9a6:	42a9      	cmp	r1, r5
 800e9a8:	d80f      	bhi.n	800e9ca <RemoteConfig::Run()+0x7a>
 800e9aa:	3201      	adds	r2, #1
 800e9ac:	2a08      	cmp	r2, #8
 800e9ae:	f100 0010 	add.w	r0, r0, #16
 800e9b2:	d1f5      	bne.n	800e9a0 <RemoteConfig::Run()+0x50>
 800e9b4:	f642 1305 	movw	r3, #10501	; 0x2905
 800e9b8:	9300      	str	r3, [sp, #0]
 800e9ba:	69a3      	ldr	r3, [r4, #24]
 800e9bc:	4928      	ldr	r1, [pc, #160]	; (800ea60 <RemoteConfig::Run()+0x110>)
 800e9be:	7d20      	ldrb	r0, [r4, #20]
 800e9c0:	f002 fb10 	bl	8010fe4 <udp_send>
 800e9c4:	e019      	b.n	800e9fa <RemoteConfig::Run()+0xaa>
 800e9c6:	42a9      	cmp	r1, r5
 800e9c8:	d1ef      	bne.n	800e9aa <RemoteConfig::Run()+0x5a>
 800e9ca:	6886      	ldr	r6, [r0, #8]
 800e9cc:	f103 0c01 	add.w	ip, r3, #1
 800e9d0:	4435      	add	r5, r6
 800e9d2:	42b5      	cmp	r5, r6
 800e9d4:	d006      	beq.n	800e9e4 <RemoteConfig::Run()+0x94>
 800e9d6:	f81c 8b01 	ldrb.w	r8, [ip], #1
 800e9da:	f816 eb01 	ldrb.w	lr, [r6], #1
 800e9de:	45f0      	cmp	r8, lr
 800e9e0:	d0f7      	beq.n	800e9d2 <RemoteConfig::Run()+0x82>
 800e9e2:	e7e2      	b.n	800e9aa <RemoteConfig::Run()+0x5a>
 800e9e4:	0113      	lsls	r3, r2, #4
 800e9e6:	eb07 1202 	add.w	r2, r7, r2, lsl #4
 800e9ea:	6852      	ldr	r2, [r2, #4]
 800e9ec:	58fb      	ldr	r3, [r7, r3]
 800e9ee:	1051      	asrs	r1, r2, #1
 800e9f0:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800e9f4:	07d2      	lsls	r2, r2, #31
 800e9f6:	d403      	bmi.n	800ea00 <RemoteConfig::Run()+0xb0>
 800e9f8:	4798      	blx	r3
 800e9fa:	b004      	add	sp, #16
 800e9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea00:	5862      	ldr	r2, [r4, r1]
 800ea02:	58d3      	ldr	r3, [r2, r3]
 800ea04:	e7f8      	b.n	800e9f8 <RemoteConfig::Run()+0xa8>
 800ea06:	7b62      	ldrb	r2, [r4, #13]
 800ea08:	2a00      	cmp	r2, #0
 800ea0a:	d1f6      	bne.n	800e9fa <RemoteConfig::Run()+0xaa>
 800ea0c:	2923      	cmp	r1, #35	; 0x23
 800ea0e:	d105      	bne.n	800ea1c <RemoteConfig::Run()+0xcc>
 800ea10:	4611      	mov	r1, r2
 800ea12:	4620      	mov	r0, r4
 800ea14:	6222      	str	r2, [r4, #32]
 800ea16:	f7ff ff55 	bl	800e8c4 <RemoteConfig::HandleSet(void*, unsigned int)>
 800ea1a:	e7ee      	b.n	800e9fa <RemoteConfig::Run()+0xaa>
 800ea1c:	2921      	cmp	r1, #33	; 0x21
 800ea1e:	d1ec      	bne.n	800e9fa <RemoteConfig::Run()+0xaa>
 800ea20:	8ba2      	ldrh	r2, [r4, #28]
 800ea22:	3a01      	subs	r2, #1
 800ea24:	b292      	uxth	r2, r2
 800ea26:	2a08      	cmp	r2, #8
 800ea28:	83a2      	strh	r2, [r4, #28]
 800ea2a:	d90a      	bls.n	800ea42 <RemoteConfig::Run()+0xf2>
 800ea2c:	490d      	ldr	r1, [pc, #52]	; (800ea64 <RemoteConfig::Run()+0x114>)
 800ea2e:	1c5a      	adds	r2, r3, #1
 800ea30:	3309      	adds	r3, #9
 800ea32:	4293      	cmp	r3, r2
 800ea34:	d00c      	beq.n	800ea50 <RemoteConfig::Run()+0x100>
 800ea36:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ea3a:	f811 0b01 	ldrb.w	r0, [r1], #1
 800ea3e:	4285      	cmp	r5, r0
 800ea40:	d0f7      	beq.n	800ea32 <RemoteConfig::Run()+0xe2>
 800ea42:	f642 1305 	movw	r3, #10501	; 0x2905
 800ea46:	9300      	str	r3, [sp, #0]
 800ea48:	2208      	movs	r2, #8
 800ea4a:	69a3      	ldr	r3, [r4, #24]
 800ea4c:	4906      	ldr	r1, [pc, #24]	; (800ea68 <RemoteConfig::Run()+0x118>)
 800ea4e:	e7b6      	b.n	800e9be <RemoteConfig::Run()+0x6e>
 800ea50:	4620      	mov	r0, r4
 800ea52:	f7ff fdc1 	bl	800e5d8 <RemoteConfig::HandleDisplaySet()>
 800ea56:	e7d0      	b.n	800e9fa <RemoteConfig::Run()+0xaa>
 800ea58:	2000195c 	andcs	r1, r0, ip, asr r9
 800ea5c:	080171dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, ip, sp, lr}
 800ea60:	08017061 	stmdaeq	r1, {r0, r5, r6, ip, sp, lr}
 800ea64:	08017058 	stmdaeq	r1, {r3, r4, r6, ip, sp, lr}
 800ea68:	0801706a 	stmdaeq	r1, {r1, r3, r5, r6, ip, sp, lr}

0800ea6c <RemoteConfig::HandleSetRconfig()>:
 800ea6c:	b510      	push	{r4, lr}
 800ea6e:	4604      	mov	r4, r0
 800ea70:	4b08      	ldr	r3, [pc, #32]	; (800ea94 <RemoteConfig::HandleSetRconfig()+0x28>)
 800ea72:	b08a      	sub	sp, #40	; 0x28
 800ea74:	6819      	ldr	r1, [r3, #0]
 800ea76:	a801      	add	r0, sp, #4
 800ea78:	f000 f896 	bl	800eba8 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 800ea7c:	4b06      	ldr	r3, [pc, #24]	; (800ea98 <RemoteConfig::HandleSetRconfig()+0x2c>)
 800ea7e:	8ba2      	ldrh	r2, [r4, #28]
 800ea80:	6819      	ldr	r1, [r3, #0]
 800ea82:	a801      	add	r0, sp, #4
 800ea84:	f000 f8a6 	bl	800ebd4 <RemoteConfigParams::Load(char const*, unsigned int)>
 800ea88:	4621      	mov	r1, r4
 800ea8a:	a801      	add	r0, sp, #4
 800ea8c:	f000 f9bd 	bl	800ee0a <RemoteConfigParams::Set(RemoteConfig*)>
 800ea90:	b00a      	add	sp, #40	; 0x28
 800ea92:	bd10      	pop	{r4, pc}
 800ea94:	200029b0 			; <UNDEFINED> instruction: 0x200029b0
 800ea98:	2000195c 	andcs	r1, r0, ip, asr r9

0800ea9c <RemoteConfig::HandleSetNetworkTxt()>:
 800ea9c:	b513      	push	{r0, r1, r4, lr}
 800ea9e:	4604      	mov	r4, r0
 800eaa0:	4b06      	ldr	r3, [pc, #24]	; (800eabc <RemoteConfig::HandleSetNetworkTxt()+0x20>)
 800eaa2:	a801      	add	r0, sp, #4
 800eaa4:	6819      	ldr	r1, [r3, #0]
 800eaa6:	f003 f9f3 	bl	8011e90 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800eaaa:	4b05      	ldr	r3, [pc, #20]	; (800eac0 <RemoteConfig::HandleSetNetworkTxt()+0x24>)
 800eaac:	8ba2      	ldrh	r2, [r4, #28]
 800eaae:	6819      	ldr	r1, [r3, #0]
 800eab0:	a801      	add	r0, sp, #4
 800eab2:	f003 fa0d 	bl	8011ed0 <NetworkParams::Load(char const*, unsigned int)>
 800eab6:	b002      	add	sp, #8
 800eab8:	bd10      	pop	{r4, pc}
 800eaba:	bf00      	nop
 800eabc:	200029ac 	andcs	r2, r0, ip, lsr #19
 800eac0:	2000195c 	andcs	r1, r0, ip, asr r9

0800eac4 <RemoteConfig::HandleSetArtnetTxt()>:
 800eac4:	b510      	push	{r4, lr}
 800eac6:	4604      	mov	r4, r0
 800eac8:	4b06      	ldr	r3, [pc, #24]	; (800eae4 <RemoteConfig::HandleSetArtnetTxt()+0x20>)
 800eaca:	b0a4      	sub	sp, #144	; 0x90
 800eacc:	6819      	ldr	r1, [r3, #0]
 800eace:	a801      	add	r0, sp, #4
 800ead0:	f7fb fff8 	bl	800aac4 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 800ead4:	4b04      	ldr	r3, [pc, #16]	; (800eae8 <RemoteConfig::HandleSetArtnetTxt()+0x24>)
 800ead6:	8ba2      	ldrh	r2, [r4, #28]
 800ead8:	6819      	ldr	r1, [r3, #0]
 800eada:	a801      	add	r0, sp, #4
 800eadc:	f7fc f824 	bl	800ab28 <ArtNetParams::Load(char const*, unsigned int)>
 800eae0:	b024      	add	sp, #144	; 0x90
 800eae2:	bd10      	pop	{r4, pc}
 800eae4:	200029a4 	andcs	r2, r0, r4, lsr #19
 800eae8:	2000195c 	andcs	r1, r0, ip, asr r9

0800eaec <RemoteConfig::HandleSetDevicesTxt()>:
 800eaec:	b510      	push	{r4, lr}
 800eaee:	4604      	mov	r4, r0
 800eaf0:	4b06      	ldr	r3, [pc, #24]	; (800eb0c <RemoteConfig::HandleSetDevicesTxt()+0x20>)
 800eaf2:	b08c      	sub	sp, #48	; 0x30
 800eaf4:	6819      	ldr	r1, [r3, #0]
 800eaf6:	a801      	add	r0, sp, #4
 800eaf8:	f7fd fe54 	bl	800c7a4 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>
 800eafc:	4b04      	ldr	r3, [pc, #16]	; (800eb10 <RemoteConfig::HandleSetDevicesTxt()+0x24>)
 800eafe:	8ba2      	ldrh	r2, [r4, #28]
 800eb00:	6819      	ldr	r1, [r3, #0]
 800eb02:	a801      	add	r0, sp, #4
 800eb04:	f7fd fe96 	bl	800c834 <WS28xxDmxParams::Load(char const*, unsigned int)>
 800eb08:	b00c      	add	sp, #48	; 0x30
 800eb0a:	bd10      	pop	{r4, pc}
 800eb0c:	200029b4 			; <UNDEFINED> instruction: 0x200029b4
 800eb10:	2000195c 	andcs	r1, r0, ip, asr r9

0800eb14 <RemoteConfig::HandleSetDisplayTxt()>:
 800eb14:	b510      	push	{r4, lr}
 800eb16:	4604      	mov	r4, r0
 800eb18:	4b06      	ldr	r3, [pc, #24]	; (800eb34 <RemoteConfig::HandleSetDisplayTxt()+0x20>)
 800eb1a:	b08a      	sub	sp, #40	; 0x28
 800eb1c:	6819      	ldr	r1, [r3, #0]
 800eb1e:	4668      	mov	r0, sp
 800eb20:	f004 fb4e 	bl	80131c0 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 800eb24:	4b04      	ldr	r3, [pc, #16]	; (800eb38 <RemoteConfig::HandleSetDisplayTxt()+0x24>)
 800eb26:	4668      	mov	r0, sp
 800eb28:	8ba2      	ldrh	r2, [r4, #28]
 800eb2a:	6819      	ldr	r1, [r3, #0]
 800eb2c:	f004 fb62 	bl	80131f4 <DisplayUdfParams::Load(char const*, unsigned int)>
 800eb30:	b00a      	add	sp, #40	; 0x28
 800eb32:	bd10      	pop	{r4, pc}
 800eb34:	200029a8 	andcs	r2, r0, r8, lsr #19
 800eb38:	2000195c 	andcs	r1, r0, ip, asr r9

0800eb3c <RemoteConfig::HandleFactory()>:
 800eb3c:	b538      	push	{r3, r4, r5, lr}
 800eb3e:	2400      	movs	r4, #0
 800eb40:	4d04      	ldr	r5, [pc, #16]	; (800eb54 <RemoteConfig::HandleFactory()+0x18>)
 800eb42:	4621      	mov	r1, r4
 800eb44:	6828      	ldr	r0, [r5, #0]
 800eb46:	3401      	adds	r4, #1
 800eb48:	f000 fee6 	bl	800f918 <SpiFlashStore::ResetSetList(spiflashstore::Store)>
 800eb4c:	2c1c      	cmp	r4, #28
 800eb4e:	d1f8      	bne.n	800eb42 <RemoteConfig::HandleFactory()+0x6>
 800eb50:	bd38      	pop	{r3, r4, r5, pc}
 800eb52:	bf00      	nop
 800eb54:	2000299c 	mulcs	r0, ip, r9

0800eb58 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800eb58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb5a:	460b      	mov	r3, r1
 800eb5c:	8885      	ldrh	r5, [r0, #4]
 800eb5e:	88c1      	ldrh	r1, [r0, #6]
 800eb60:	42a9      	cmp	r1, r5
 800eb62:	d214      	bcs.n	800eb8e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800eb64:	4604      	mov	r4, r0
 800eb66:	6800      	ldr	r0, [r0, #0]
 800eb68:	1a6d      	subs	r5, r5, r1
 800eb6a:	4408      	add	r0, r1
 800eb6c:	7a21      	ldrb	r1, [r4, #8]
 800eb6e:	b91a      	cbnz	r2, 800eb78 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800eb70:	b919      	cbnz	r1, 800eb7a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800eb72:	4a0a      	ldr	r2, [pc, #40]	; (800eb9c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800eb74:	9100      	str	r1, [sp, #0]
 800eb76:	e002      	b.n	800eb7e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800eb78:	b159      	cbz	r1, 800eb92 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800eb7a:	9200      	str	r2, [sp, #0]
 800eb7c:	4a08      	ldr	r2, [pc, #32]	; (800eba0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800eb7e:	4629      	mov	r1, r5
 800eb80:	f7fa f8c4 	bl	8008d0c <snprintf>
 800eb84:	4285      	cmp	r5, r0
 800eb86:	bfa2      	ittt	ge
 800eb88:	88e3      	ldrhge	r3, [r4, #6]
 800eb8a:	181b      	addge	r3, r3, r0
 800eb8c:	80e3      	strhge	r3, [r4, #6]
 800eb8e:	b003      	add	sp, #12
 800eb90:	bd30      	pop	{r4, r5, pc}
 800eb92:	2201      	movs	r2, #1
 800eb94:	9200      	str	r2, [sp, #0]
 800eb96:	4a03      	ldr	r2, [pc, #12]	; (800eba4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800eb98:	e7f1      	b.n	800eb7e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800eb9a:	bf00      	nop
 800eb9c:	08016af9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, sp, lr}
 800eba0:	08016af0 	stmdaeq	r1, {r4, r5, r6, r7, r9, fp, sp, lr}
 800eba4:	08016afa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r9, fp, sp, lr}

0800eba8 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>:
 800eba8:	b510      	push	{r4, lr}
 800ebaa:	4604      	mov	r4, r0
 800ebac:	2220      	movs	r2, #32
 800ebae:	f840 1b04 	str.w	r1, [r0], #4
 800ebb2:	2100      	movs	r1, #0
 800ebb4:	f005 fde0 	bl	8014778 <memset>
 800ebb8:	4620      	mov	r0, r4
 800ebba:	bd10      	pop	{r4, pc}

0800ebbc <RemoteConfigParams::Load()>:
 800ebbc:	b508      	push	{r3, lr}
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	4601      	mov	r1, r0
 800ebc2:	6043      	str	r3, [r0, #4]
 800ebc4:	6800      	ldr	r0, [r0, #0]
 800ebc6:	b120      	cbz	r0, 800ebd2 <RemoteConfigParams::Load()+0x16>
 800ebc8:	6803      	ldr	r3, [r0, #0]
 800ebca:	3104      	adds	r1, #4
 800ebcc:	68db      	ldr	r3, [r3, #12]
 800ebce:	4798      	blx	r3
 800ebd0:	2001      	movs	r0, #1
 800ebd2:	bd08      	pop	{r3, pc}

0800ebd4 <RemoteConfigParams::Load(char const*, unsigned int)>:
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ebd8:	460d      	mov	r5, r1
 800ebda:	4616      	mov	r6, r2
 800ebdc:	4604      	mov	r4, r0
 800ebde:	6043      	str	r3, [r0, #4]
 800ebe0:	4602      	mov	r2, r0
 800ebe2:	490a      	ldr	r1, [pc, #40]	; (800ec0c <RemoteConfigParams::Load(char const*, unsigned int)+0x38>)
 800ebe4:	4668      	mov	r0, sp
 800ebe6:	f004 ff11 	bl	8013a0c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800ebea:	4632      	mov	r2, r6
 800ebec:	4629      	mov	r1, r5
 800ebee:	4668      	mov	r0, sp
 800ebf0:	f004 ff10 	bl	8013a14 <ReadConfigFile::Read(char const*, unsigned int)>
 800ebf4:	4621      	mov	r1, r4
 800ebf6:	f851 0b04 	ldr.w	r0, [r1], #4
 800ebfa:	6803      	ldr	r3, [r0, #0]
 800ebfc:	689b      	ldr	r3, [r3, #8]
 800ebfe:	4798      	blx	r3
 800ec00:	4668      	mov	r0, sp
 800ec02:	f004 ff06 	bl	8013a12 <ReadConfigFile::~ReadConfigFile()>
 800ec06:	b002      	add	sp, #8
 800ec08:	bd70      	pop	{r4, r5, r6, pc}
 800ec0a:	bf00      	nop
 800ec0c:	0800eccd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, fp, sp, lr, pc}

0800ec10 <RemoteConfigParams::SetBool(unsigned char, unsigned int)>:
 800ec10:	6843      	ldr	r3, [r0, #4]
 800ec12:	b111      	cbz	r1, 800ec1a <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0xa>
 800ec14:	4313      	orrs	r3, r2
 800ec16:	6043      	str	r3, [r0, #4]
 800ec18:	4770      	bx	lr
 800ec1a:	ea23 0302 	bic.w	r3, r3, r2
 800ec1e:	e7fa      	b.n	800ec16 <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0x6>

0800ec20 <RemoteConfigParams::callbackFunction(char const*)>:
 800ec20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec22:	460d      	mov	r5, r1
 800ec24:	4604      	mov	r4, r0
 800ec26:	4923      	ldr	r1, [pc, #140]	; (800ecb4 <RemoteConfigParams::callbackFunction(char const*)+0x94>)
 800ec28:	4628      	mov	r0, r5
 800ec2a:	f10d 0203 	add.w	r2, sp, #3
 800ec2e:	f005 f853 	bl	8013cd8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ec32:	b938      	cbnz	r0, 800ec44 <RemoteConfigParams::callbackFunction(char const*)+0x24>
 800ec34:	2201      	movs	r2, #1
 800ec36:	4620      	mov	r0, r4
 800ec38:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800ec3c:	f7ff ffe8 	bl	800ec10 <RemoteConfigParams::SetBool(unsigned char, unsigned int)>
 800ec40:	b003      	add	sp, #12
 800ec42:	bd30      	pop	{r4, r5, pc}
 800ec44:	4628      	mov	r0, r5
 800ec46:	491c      	ldr	r1, [pc, #112]	; (800ecb8 <RemoteConfigParams::callbackFunction(char const*)+0x98>)
 800ec48:	f10d 0203 	add.w	r2, sp, #3
 800ec4c:	f005 f844 	bl	8013cd8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ec50:	b908      	cbnz	r0, 800ec56 <RemoteConfigParams::callbackFunction(char const*)+0x36>
 800ec52:	2202      	movs	r2, #2
 800ec54:	e7ef      	b.n	800ec36 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800ec56:	4628      	mov	r0, r5
 800ec58:	4918      	ldr	r1, [pc, #96]	; (800ecbc <RemoteConfigParams::callbackFunction(char const*)+0x9c>)
 800ec5a:	f10d 0203 	add.w	r2, sp, #3
 800ec5e:	f005 f83b 	bl	8013cd8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ec62:	b908      	cbnz	r0, 800ec68 <RemoteConfigParams::callbackFunction(char const*)+0x48>
 800ec64:	2204      	movs	r2, #4
 800ec66:	e7e6      	b.n	800ec36 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800ec68:	4628      	mov	r0, r5
 800ec6a:	4915      	ldr	r1, [pc, #84]	; (800ecc0 <RemoteConfigParams::callbackFunction(char const*)+0xa0>)
 800ec6c:	f10d 0203 	add.w	r2, sp, #3
 800ec70:	f005 f832 	bl	8013cd8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ec74:	b908      	cbnz	r0, 800ec7a <RemoteConfigParams::callbackFunction(char const*)+0x5a>
 800ec76:	2208      	movs	r2, #8
 800ec78:	e7dd      	b.n	800ec36 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800ec7a:	4628      	mov	r0, r5
 800ec7c:	4911      	ldr	r1, [pc, #68]	; (800ecc4 <RemoteConfigParams::callbackFunction(char const*)+0xa4>)
 800ec7e:	f10d 0203 	add.w	r2, sp, #3
 800ec82:	f005 f829 	bl	8013cd8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ec86:	b908      	cbnz	r0, 800ec8c <RemoteConfigParams::callbackFunction(char const*)+0x6c>
 800ec88:	2220      	movs	r2, #32
 800ec8a:	e7d4      	b.n	800ec36 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800ec8c:	2317      	movs	r3, #23
 800ec8e:	4628      	mov	r0, r5
 800ec90:	9301      	str	r3, [sp, #4]
 800ec92:	490d      	ldr	r1, [pc, #52]	; (800ecc8 <RemoteConfigParams::callbackFunction(char const*)+0xa8>)
 800ec94:	ab01      	add	r3, sp, #4
 800ec96:	f104 020c 	add.w	r2, r4, #12
 800ec9a:	f004 feef 	bl	8013a7c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800ec9e:	2800      	cmp	r0, #0
 800eca0:	d1ce      	bne.n	800ec40 <RemoteConfigParams::callbackFunction(char const*)+0x20>
 800eca2:	9b01      	ldr	r3, [sp, #4]
 800eca4:	4423      	add	r3, r4
 800eca6:	7318      	strb	r0, [r3, #12]
 800eca8:	6863      	ldr	r3, [r4, #4]
 800ecaa:	f043 0310 	orr.w	r3, r3, #16
 800ecae:	6063      	str	r3, [r4, #4]
 800ecb0:	e7c6      	b.n	800ec40 <RemoteConfigParams::callbackFunction(char const*)+0x20>
 800ecb2:	bf00      	nop
 800ecb4:	0801761a 	stmdaeq	r1, {r1, r3, r4, r9, sl, ip, sp, lr}
 800ecb8:	0801763b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r9, sl, ip, sp, lr}
 800ecbc:	08017649 	stmdaeq	r1, {r0, r3, r6, r9, sl, ip, sp, lr}
 800ecc0:	08017657 	stmdaeq	r1, {r0, r1, r2, r4, r6, r9, sl, ip, sp, lr}
 800ecc4:	08017665 	stmdaeq	r1, {r0, r2, r5, r6, r9, sl, ip, sp, lr}
 800ecc8:	0801762e 	stmdaeq	r1, {r1, r2, r3, r5, r9, sl, ip, sp, lr}

0800eccc <RemoteConfigParams::staticCallbackFunction(void*, char const*)>:
 800eccc:	f7ff bfa8 	b.w	800ec20 <RemoteConfigParams::callbackFunction(char const*)>

0800ecd0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>:
 800ecd0:	b570      	push	{r4, r5, r6, lr}
 800ecd2:	4604      	mov	r4, r0
 800ecd4:	4615      	mov	r5, r2
 800ecd6:	461e      	mov	r6, r3
 800ecd8:	b086      	sub	sp, #24
 800ecda:	3004      	adds	r0, #4
 800ecdc:	2900      	cmp	r1, #0
 800ecde:	d040      	beq.n	800ed62 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x92>
 800ece0:	2220      	movs	r2, #32
 800ece2:	f005 fd32 	bl	801474a <memmove>
 800ece6:	4633      	mov	r3, r6
 800ece8:	462a      	mov	r2, r5
 800ecea:	4937      	ldr	r1, [pc, #220]	; (800edc8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf8>)
 800ecec:	a803      	add	r0, sp, #12
 800ecee:	f004 fdbd 	bl	801386c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800ecf2:	6862      	ldr	r2, [r4, #4]
 800ecf4:	4935      	ldr	r1, [pc, #212]	; (800edcc <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xfc>)
 800ecf6:	f002 0201 	and.w	r2, r2, #1
 800ecfa:	a803      	add	r0, sp, #12
 800ecfc:	f7ff ff2c 	bl	800eb58 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800ed00:	6862      	ldr	r2, [r4, #4]
 800ed02:	4933      	ldr	r1, [pc, #204]	; (800edd0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x100>)
 800ed04:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800ed08:	a803      	add	r0, sp, #12
 800ed0a:	f7ff ff25 	bl	800eb58 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800ed0e:	6862      	ldr	r2, [r4, #4]
 800ed10:	4930      	ldr	r1, [pc, #192]	; (800edd4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x104>)
 800ed12:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800ed16:	a803      	add	r0, sp, #12
 800ed18:	f7ff ff1e 	bl	800eb58 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800ed1c:	6862      	ldr	r2, [r4, #4]
 800ed1e:	492e      	ldr	r1, [pc, #184]	; (800edd8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x108>)
 800ed20:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800ed24:	a803      	add	r0, sp, #12
 800ed26:	f7ff ff17 	bl	800eb58 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800ed2a:	6862      	ldr	r2, [r4, #4]
 800ed2c:	492b      	ldr	r1, [pc, #172]	; (800eddc <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x10c>)
 800ed2e:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800ed32:	a803      	add	r0, sp, #12
 800ed34:	f7ff ff10 	bl	800eb58 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800ed38:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800ed3c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800ed40:	42a9      	cmp	r1, r5
 800ed42:	d223      	bcs.n	800ed8c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xbc>
 800ed44:	9803      	ldr	r0, [sp, #12]
 800ed46:	1a6d      	subs	r5, r5, r1
 800ed48:	4408      	add	r0, r1
 800ed4a:	6861      	ldr	r1, [r4, #4]
 800ed4c:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800ed50:	06c9      	lsls	r1, r1, #27
 800ed52:	f104 030c 	add.w	r3, r4, #12
 800ed56:	d40b      	bmi.n	800ed70 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa0>
 800ed58:	b95a      	cbnz	r2, 800ed72 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa2>
 800ed5a:	9300      	str	r3, [sp, #0]
 800ed5c:	4a20      	ldr	r2, [pc, #128]	; (800ede0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 800ed5e:	4b21      	ldr	r3, [pc, #132]	; (800ede4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>)
 800ed60:	e00a      	b.n	800ed78 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa8>
 800ed62:	6823      	ldr	r3, [r4, #0]
 800ed64:	4601      	mov	r1, r0
 800ed66:	681a      	ldr	r2, [r3, #0]
 800ed68:	4618      	mov	r0, r3
 800ed6a:	68d2      	ldr	r2, [r2, #12]
 800ed6c:	4790      	blx	r2
 800ed6e:	e7ba      	b.n	800ece6 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x16>
 800ed70:	b32a      	cbz	r2, 800edbe <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xee>
 800ed72:	9300      	str	r3, [sp, #0]
 800ed74:	4a1c      	ldr	r2, [pc, #112]	; (800ede8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x118>)
 800ed76:	4b1b      	ldr	r3, [pc, #108]	; (800ede4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>)
 800ed78:	4629      	mov	r1, r5
 800ed7a:	f7f9 ffc7 	bl	8008d0c <snprintf>
 800ed7e:	4285      	cmp	r5, r0
 800ed80:	bfa2      	ittt	ge
 800ed82:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800ed86:	18c0      	addge	r0, r0, r3
 800ed88:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800ed8c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800ed90:	b17b      	cbz	r3, 800edb2 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xe2>
 800ed92:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800ed96:	9b03      	ldr	r3, [sp, #12]
 800ed98:	4413      	add	r3, r2
 800ed9a:	227d      	movs	r2, #125	; 0x7d
 800ed9c:	f803 2c01 	strb.w	r2, [r3, #-1]
 800eda0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800eda4:	9903      	ldr	r1, [sp, #12]
 800eda6:	54ca      	strb	r2, [r1, r3]
 800eda8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800edac:	3301      	adds	r3, #1
 800edae:	f8ad 3012 	strh.w	r3, [sp, #18]
 800edb2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800edb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800edb8:	601a      	str	r2, [r3, #0]
 800edba:	b006      	add	sp, #24
 800edbc:	bd70      	pop	{r4, r5, r6, pc}
 800edbe:	9300      	str	r3, [sp, #0]
 800edc0:	4a0a      	ldr	r2, [pc, #40]	; (800edec <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x11c>)
 800edc2:	4b08      	ldr	r3, [pc, #32]	; (800ede4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>)
 800edc4:	e7d8      	b.n	800ed78 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa8>
 800edc6:	bf00      	nop
 800edc8:	08017622 	stmdaeq	r1, {r1, r5, r9, sl, ip, sp, lr}
 800edcc:	0801761a 	stmdaeq	r1, {r1, r3, r4, r9, sl, ip, sp, lr}
 800edd0:	0801763b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r9, sl, ip, sp, lr}
 800edd4:	08017649 	stmdaeq	r1, {r0, r3, r6, r9, sl, ip, sp, lr}
 800edd8:	08017657 	stmdaeq	r1, {r0, r1, r2, r4, r6, r9, sl, ip, sp, lr}
 800eddc:	08017665 	stmdaeq	r1, {r0, r2, r5, r6, r9, sl, ip, sp, lr}
 800ede0:	08016b0c 	stmdaeq	r1, {r2, r3, r8, r9, fp, sp, lr}
 800ede4:	0801762e 	stmdaeq	r1, {r1, r2, r3, r5, r9, sl, ip, sp, lr}
 800ede8:	08016b01 	stmdaeq	r1, {r0, r8, r9, fp, sp, lr}
 800edec:	08016b0d 	stmdaeq	r1, {r0, r2, r3, r8, r9, fp, sp, lr}

0800edf0 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>:
 800edf0:	b513      	push	{r0, r1, r4, lr}
 800edf2:	6804      	ldr	r4, [r0, #0]
 800edf4:	b914      	cbnz	r4, 800edfc <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800edf6:	601c      	str	r4, [r3, #0]
 800edf8:	b002      	add	sp, #8
 800edfa:	bd10      	pop	{r4, pc}
 800edfc:	9300      	str	r3, [sp, #0]
 800edfe:	4613      	mov	r3, r2
 800ee00:	460a      	mov	r2, r1
 800ee02:	2100      	movs	r1, #0
 800ee04:	f7ff ff64 	bl	800ecd0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>
 800ee08:	e7f6      	b.n	800edf8 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800ee0a <RemoteConfigParams::Set(RemoteConfig*)>:
 800ee0a:	b538      	push	{r3, r4, r5, lr}
 800ee0c:	460c      	mov	r4, r1
 800ee0e:	4605      	mov	r5, r0
 800ee10:	6841      	ldr	r1, [r0, #4]
 800ee12:	4620      	mov	r0, r4
 800ee14:	f001 0101 	and.w	r1, r1, #1
 800ee18:	f7ff fc50 	bl	800e6bc <RemoteConfig::SetDisable(bool)>
 800ee1c:	686b      	ldr	r3, [r5, #4]
 800ee1e:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800ee22:	7362      	strb	r2, [r4, #13]
 800ee24:	f3c3 0280 	ubfx	r2, r3, #2, #1
 800ee28:	73a2      	strb	r2, [r4, #14]
 800ee2a:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 800ee2e:	73e2      	strb	r2, [r4, #15]
 800ee30:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800ee34:	06db      	lsls	r3, r3, #27
 800ee36:	7422      	strb	r2, [r4, #16]
 800ee38:	d506      	bpl.n	800ee48 <RemoteConfigParams::Set(RemoteConfig*)+0x3e>
 800ee3a:	4620      	mov	r0, r4
 800ee3c:	f105 010c 	add.w	r1, r5, #12
 800ee40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee44:	f7ff bc5a 	b.w	800e6fc <RemoteConfig::SetDisplayName(char const*)>
 800ee48:	bd38      	pop	{r3, r4, r5, pc}

0800ee4a <RemoteConfigParams::Dump()>:
 800ee4a:	4770      	bx	lr

0800ee4c <RemoteConfig::HandleReboot()>:
 800ee4c:	7b83      	ldrb	r3, [r0, #14]
 800ee4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d03d      	beq.n	800eed0 <RemoteConfig::HandleReboot()+0x84>
 800ee54:	2301      	movs	r3, #1
 800ee56:	4c1f      	ldr	r4, [pc, #124]	; (800eed4 <RemoteConfig::HandleReboot()+0x88>)
 800ee58:	7443      	strb	r3, [r0, #17]
 800ee5a:	6825      	ldr	r5, [r4, #0]
 800ee5c:	69a8      	ldr	r0, [r5, #24]
 800ee5e:	b138      	cbz	r0, 800ee70 <RemoteConfig::HandleReboot()+0x24>
 800ee60:	2100      	movs	r1, #0
 800ee62:	6803      	ldr	r3, [r0, #0]
 800ee64:	7429      	strb	r1, [r5, #16]
 800ee66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee68:	4798      	blx	r3
 800ee6a:	4b1b      	ldr	r3, [pc, #108]	; (800eed8 <RemoteConfig::HandleReboot()+0x8c>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	606b      	str	r3, [r5, #4]
 800ee70:	4d1a      	ldr	r5, [pc, #104]	; (800eedc <RemoteConfig::HandleReboot()+0x90>)
 800ee72:	6828      	ldr	r0, [r5, #0]
 800ee74:	f000 fdd6 	bl	800fa24 <SpiFlashStore::Flash()>
 800ee78:	2800      	cmp	r0, #0
 800ee7a:	d1fa      	bne.n	800ee72 <RemoteConfig::HandleReboot()+0x26>
 800ee7c:	4b18      	ldr	r3, [pc, #96]	; (800eee0 <RemoteConfig::HandleReboot()+0x94>)
 800ee7e:	6818      	ldr	r0, [r3, #0]
 800ee80:	f002 fd78 	bl	8011974 <Network::Shutdown()>
 800ee84:	4817      	ldr	r0, [pc, #92]	; (800eee4 <RemoteConfig::HandleReboot()+0x98>)
 800ee86:	f7f9 ff19 	bl	8008cbc <printf>
 800ee8a:	6823      	ldr	r3, [r4, #0]
 800ee8c:	6998      	ldr	r0, [r3, #24]
 800ee8e:	b110      	cbz	r0, 800ee96 <RemoteConfig::HandleReboot()+0x4a>
 800ee90:	6803      	ldr	r3, [r0, #0]
 800ee92:	68db      	ldr	r3, [r3, #12]
 800ee94:	4798      	blx	r3
 800ee96:	6824      	ldr	r4, [r4, #0]
 800ee98:	4913      	ldr	r1, [pc, #76]	; (800eee8 <RemoteConfig::HandleReboot()+0x9c>)
 800ee9a:	4620      	mov	r0, r4
 800ee9c:	f7f9 f8f2 	bl	8008084 <Display::TextStatus(char const*)>
 800eea0:	7c63      	ldrb	r3, [r4, #17]
 800eea2:	b18b      	cbz	r3, 800eec8 <RemoteConfig::HandleReboot()+0x7c>
 800eea4:	2312      	movs	r3, #18
 800eea6:	f88d 3004 	strb.w	r3, [sp, #4]
 800eeaa:	23bf      	movs	r3, #191	; 0xbf
 800eeac:	7a20      	ldrb	r0, [r4, #8]
 800eeae:	f88d 3005 	strb.w	r3, [sp, #5]
 800eeb2:	f88d 3006 	strb.w	r3, [sp, #6]
 800eeb6:	f006 fb7b 	bl	80155b0 <gd32_i2c_set_address(unsigned char)>
 800eeba:	68e0      	ldr	r0, [r4, #12]
 800eebc:	f006 fb70 	bl	80155a0 <gd32_i2c_set_baudrate(unsigned int)>
 800eec0:	2103      	movs	r1, #3
 800eec2:	a801      	add	r0, sp, #4
 800eec4:	f006 fb7a 	bl	80155bc <gd32_i2c_write(char const*, unsigned int)>
 800eec8:	4b08      	ldr	r3, [pc, #32]	; (800eeec <RemoteConfig::HandleReboot()+0xa0>)
 800eeca:	6818      	ldr	r0, [r3, #0]
 800eecc:	f005 fb3c 	bl	8014548 <Hardware::Reboot()>
 800eed0:	b003      	add	sp, #12
 800eed2:	bd30      	pop	{r4, r5, pc}
 800eed4:	2000a8d4 	ldrdcs	sl, [r0], -r4
 800eed8:	2000a9dc 	ldrdcs	sl, [r0], -ip
 800eedc:	2000299c 	mulcs	r0, ip, r9
 800eee0:	2000a29c 	mulcs	r0, ip, r2
 800eee4:	0801725c 	stmdaeq	r1, {r2, r3, r4, r6, r9, ip, sp, lr}
 800eee8:	0801726b 	stmdaeq	r1, {r0, r1, r3, r5, r6, r9, ip, sp, lr}
 800eeec:	2000a9c4 	andcs	sl, r0, r4, asr #19

0800eef0 <RemoteConfig::GetIndex(void const*, unsigned int&)>:
 800eef0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800eef4:	2000      	movs	r0, #0
 800eef6:	4d12      	ldr	r5, [pc, #72]	; (800ef40 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x50>)
 800eef8:	f10d 0c04 	add.w	ip, sp, #4
 800eefc:	6814      	ldr	r4, [r2, #0]
 800eefe:	7d2b      	ldrb	r3, [r5, #20]
 800ef00:	692e      	ldr	r6, [r5, #16]
 800ef02:	42a3      	cmp	r3, r4
 800ef04:	bf34      	ite	cc
 800ef06:	4664      	movcc	r4, ip
 800ef08:	4614      	movcs	r4, r2
 800ef0a:	9301      	str	r3, [sp, #4]
 800ef0c:	6827      	ldr	r7, [r4, #0]
 800ef0e:	460c      	mov	r4, r1
 800ef10:	3e01      	subs	r6, #1
 800ef12:	440f      	add	r7, r1
 800ef14:	42bc      	cmp	r4, r7
 800ef16:	d011      	beq.n	800ef3c <RemoteConfig::GetIndex(void const*, unsigned int&)+0x4c>
 800ef18:	f894 8000 	ldrb.w	r8, [r4]
 800ef1c:	f816 ef01 	ldrb.w	lr, [r6, #1]!
 800ef20:	45f0      	cmp	r8, lr
 800ef22:	d009      	beq.n	800ef38 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x48>
 800ef24:	3001      	adds	r0, #1
 800ef26:	2805      	cmp	r0, #5
 800ef28:	f105 051c 	add.w	r5, r5, #28
 800ef2c:	d1e6      	bne.n	800eefc <RemoteConfig::GetIndex(void const*, unsigned int&)+0xc>
 800ef2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef32:	b002      	add	sp, #8
 800ef34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef38:	3401      	adds	r4, #1
 800ef3a:	e7eb      	b.n	800ef14 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x24>
 800ef3c:	6013      	str	r3, [r2, #0]
 800ef3e:	e7f8      	b.n	800ef32 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x42>
 800ef40:	080172b4 	stmdaeq	r1, {r2, r4, r5, r7, r9, ip, sp, lr}

0800ef44 <strcmp>:
 800ef44:	1e43      	subs	r3, r0, #1
 800ef46:	3901      	subs	r1, #1
 800ef48:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800ef4c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ef50:	4290      	cmp	r0, r2
 800ef52:	d102      	bne.n	800ef5a <strcmp+0x16>
 800ef54:	2800      	cmp	r0, #0
 800ef56:	d1f7      	bne.n	800ef48 <strcmp+0x4>
 800ef58:	4770      	bx	lr
 800ef5a:	1a80      	subs	r0, r0, r2
 800ef5c:	4770      	bx	lr

0800ef5e <strcasecmp>:
 800ef5e:	b530      	push	{r4, r5, lr}
 800ef60:	1e42      	subs	r2, r0, #1
 800ef62:	3901      	subs	r1, #1
 800ef64:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800ef68:	4604      	mov	r4, r0
 800ef6a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ef6e:	2b19      	cmp	r3, #25
 800ef70:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ef74:	bf98      	it	ls
 800ef76:	f100 0420 	addls.w	r4, r0, #32
 800ef7a:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
 800ef7e:	2d19      	cmp	r5, #25
 800ef80:	bf98      	it	ls
 800ef82:	3320      	addls	r3, #32
 800ef84:	42a3      	cmp	r3, r4
 800ef86:	d102      	bne.n	800ef8e <strcasecmp+0x30>
 800ef88:	2800      	cmp	r0, #0
 800ef8a:	d1eb      	bne.n	800ef64 <strcasecmp+0x6>
 800ef8c:	bd30      	pop	{r4, r5, pc}
 800ef8e:	1ae0      	subs	r0, r4, r3
 800ef90:	e7fc      	b.n	800ef8c <strcasecmp+0x2e>
	...

0800ef94 <PropertiesConfig::EnableJSON(bool)>:
 800ef94:	4a04      	ldr	r2, [pc, #16]	; (800efa8 <PropertiesConfig::EnableJSON(bool)+0x14>)
 800ef96:	7813      	ldrb	r3, [r2, #0]
 800ef98:	b118      	cbz	r0, 800efa2 <PropertiesConfig::EnableJSON(bool)+0xe>
 800ef9a:	f043 0301 	orr.w	r3, r3, #1
 800ef9e:	7013      	strb	r3, [r2, #0]
 800efa0:	4770      	bx	lr
 800efa2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800efa6:	e7fa      	b.n	800ef9e <PropertiesConfig::EnableJSON(bool)+0xa>
 800efa8:	2000a8d0 	ldrdcs	sl, [r0], -r0

0800efac <HttpDaemon::HttpDaemon()>:
 800efac:	4a0a      	ldr	r2, [pc, #40]	; (800efd8 <HttpDaemon::HttpDaemon()+0x2c>)
 800efae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800efb2:	6002      	str	r2, [r0, #0]
 800efb4:	2200      	movs	r2, #0
 800efb6:	f44f 7c02 	mov.w	ip, #520	; 0x208
 800efba:	e9c0 1204 	strd	r1, r2, [r0, #16]
 800efbe:	2102      	movs	r1, #2
 800efc0:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800efc4:	e9c0 c106 	strd	ip, r1, [r0, #24]
 800efc8:	60c2      	str	r2, [r0, #12]
 800efca:	8402      	strh	r2, [r0, #32]
 800efcc:	f8a0 25c2 	strh.w	r2, [r0, #1474]	; 0x5c2
 800efd0:	f8c0 25c4 	str.w	r2, [r0, #1476]	; 0x5c4
 800efd4:	4770      	bx	lr
 800efd6:	bf00      	nop
 800efd8:	0801759a 	stmdaeq	r1, {r1, r3, r4, r7, r8, sl, ip, sp, lr}

0800efdc <HttpDaemon::Start()>:
 800efdc:	4b04      	ldr	r3, [pc, #16]	; (800eff0 <HttpDaemon::Start()+0x14>)
 800efde:	b510      	push	{r4, lr}
 800efe0:	2150      	movs	r1, #80	; 0x50
 800efe2:	4604      	mov	r4, r0
 800efe4:	6818      	ldr	r0, [r3, #0]
 800efe6:	f002 ff47 	bl	8011e78 <Network::TcpBegin(unsigned short)>
 800efea:	6120      	str	r0, [r4, #16]
 800efec:	bd10      	pop	{r4, pc}
 800efee:	bf00      	nop
 800eff0:	2000a29c 	mulcs	r0, ip, r2

0800eff4 <HttpDaemon::ParseMethod(char*)>:
 800eff4:	b538      	push	{r3, r4, r5, lr}
 800eff6:	4604      	mov	r4, r0
 800eff8:	4608      	mov	r0, r1
 800effa:	491b      	ldr	r1, [pc, #108]	; (800f068 <HttpDaemon::ParseMethod(char*)+0x74>)
 800effc:	f005 fbea 	bl	80147d4 <strtok>
 800f000:	4605      	mov	r5, r0
 800f002:	b370      	cbz	r0, 800f062 <HttpDaemon::ParseMethod(char*)+0x6e>
 800f004:	4919      	ldr	r1, [pc, #100]	; (800f06c <HttpDaemon::ParseMethod(char*)+0x78>)
 800f006:	f7ff ff9d 	bl	800ef44 <strcmp>
 800f00a:	b940      	cbnz	r0, 800f01e <HttpDaemon::ParseMethod(char*)+0x2a>
 800f00c:	61e0      	str	r0, [r4, #28]
 800f00e:	2000      	movs	r0, #0
 800f010:	4915      	ldr	r1, [pc, #84]	; (800f068 <HttpDaemon::ParseMethod(char*)+0x74>)
 800f012:	f005 fbdf 	bl	80147d4 <strtok>
 800f016:	b950      	cbnz	r0, 800f02e <HttpDaemon::ParseMethod(char*)+0x3a>
 800f018:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800f01c:	bd38      	pop	{r3, r4, r5, pc}
 800f01e:	4628      	mov	r0, r5
 800f020:	4913      	ldr	r1, [pc, #76]	; (800f070 <HttpDaemon::ParseMethod(char*)+0x7c>)
 800f022:	f7ff ff8f 	bl	800ef44 <strcmp>
 800f026:	b9e0      	cbnz	r0, 800f062 <HttpDaemon::ParseMethod(char*)+0x6e>
 800f028:	2301      	movs	r3, #1
 800f02a:	61e3      	str	r3, [r4, #28]
 800f02c:	e7ef      	b.n	800f00e <HttpDaemon::ParseMethod(char*)+0x1a>
 800f02e:	6060      	str	r0, [r4, #4]
 800f030:	4910      	ldr	r1, [pc, #64]	; (800f074 <HttpDaemon::ParseMethod(char*)+0x80>)
 800f032:	2000      	movs	r0, #0
 800f034:	f005 fbce 	bl	80147d4 <strtok>
 800f038:	2800      	cmp	r0, #0
 800f03a:	d0ed      	beq.n	800f018 <HttpDaemon::ParseMethod(char*)+0x24>
 800f03c:	490e      	ldr	r1, [pc, #56]	; (800f078 <HttpDaemon::ParseMethod(char*)+0x84>)
 800f03e:	f7ff ff81 	bl	800ef44 <strcmp>
 800f042:	2800      	cmp	r0, #0
 800f044:	d1e8      	bne.n	800f018 <HttpDaemon::ParseMethod(char*)+0x24>
 800f046:	490d      	ldr	r1, [pc, #52]	; (800f07c <HttpDaemon::ParseMethod(char*)+0x88>)
 800f048:	f005 fbc4 	bl	80147d4 <strtok>
 800f04c:	2800      	cmp	r0, #0
 800f04e:	d0e3      	beq.n	800f018 <HttpDaemon::ParseMethod(char*)+0x24>
 800f050:	490b      	ldr	r1, [pc, #44]	; (800f080 <HttpDaemon::ParseMethod(char*)+0x8c>)
 800f052:	f7ff ff77 	bl	800ef44 <strcmp>
 800f056:	2800      	cmp	r0, #0
 800f058:	f240 10f9 	movw	r0, #505	; 0x1f9
 800f05c:	bf08      	it	eq
 800f05e:	20c8      	moveq	r0, #200	; 0xc8
 800f060:	e7dc      	b.n	800f01c <HttpDaemon::ParseMethod(char*)+0x28>
 800f062:	f240 10f5 	movw	r0, #501	; 0x1f5
 800f066:	e7d9      	b.n	800f01c <HttpDaemon::ParseMethod(char*)+0x28>
 800f068:	080184e7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, sl, pc}
 800f06c:	08017340 	stmdaeq	r1, {r6, r8, r9, ip, sp, lr}
 800f070:	08017344 	stmdaeq	r1, {r2, r6, r8, r9, ip, sp, lr}
 800f074:	080173ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, r9, ip, sp, lr}
 800f078:	08017349 	stmdaeq	r1, {r0, r3, r6, r8, r9, ip, sp, lr}
 800f07c:	0801734e 	stmdaeq	r1, {r1, r2, r3, r6, r8, r9, ip, sp, lr}
 800f080:	08017351 	stmdaeq	r1, {r0, r4, r6, r8, r9, ip, sp, lr}

0800f084 <HttpDaemon::ParseHeaderField(char*)>:
 800f084:	b538      	push	{r3, r4, r5, lr}
 800f086:	4605      	mov	r5, r0
 800f088:	4608      	mov	r0, r1
 800f08a:	491d      	ldr	r1, [pc, #116]	; (800f100 <HttpDaemon::ParseHeaderField(char*)+0x7c>)
 800f08c:	f005 fba2 	bl	80147d4 <strtok>
 800f090:	4604      	mov	r4, r0
 800f092:	b910      	cbnz	r0, 800f09a <HttpDaemon::ParseHeaderField(char*)+0x16>
 800f094:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800f098:	bd38      	pop	{r3, r4, r5, pc}
 800f09a:	491a      	ldr	r1, [pc, #104]	; (800f104 <HttpDaemon::ParseHeaderField(char*)+0x80>)
 800f09c:	f7ff ff5f 	bl	800ef5e <strcasecmp>
 800f0a0:	b970      	cbnz	r0, 800f0c0 <HttpDaemon::ParseHeaderField(char*)+0x3c>
 800f0a2:	4919      	ldr	r1, [pc, #100]	; (800f108 <HttpDaemon::ParseHeaderField(char*)+0x84>)
 800f0a4:	f005 fb96 	bl	80147d4 <strtok>
 800f0a8:	2800      	cmp	r0, #0
 800f0aa:	d0f3      	beq.n	800f094 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800f0ac:	4917      	ldr	r1, [pc, #92]	; (800f10c <HttpDaemon::ParseHeaderField(char*)+0x88>)
 800f0ae:	f7ff ff49 	bl	800ef44 <strcmp>
 800f0b2:	b108      	cbz	r0, 800f0b8 <HttpDaemon::ParseHeaderField(char*)+0x34>
 800f0b4:	20c8      	movs	r0, #200	; 0xc8
 800f0b6:	e7ef      	b.n	800f098 <HttpDaemon::ParseHeaderField(char*)+0x14>
 800f0b8:	2301      	movs	r3, #1
 800f0ba:	f885 3020 	strb.w	r3, [r5, #32]
 800f0be:	e7f9      	b.n	800f0b4 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800f0c0:	4620      	mov	r0, r4
 800f0c2:	4913      	ldr	r1, [pc, #76]	; (800f110 <HttpDaemon::ParseHeaderField(char*)+0x8c>)
 800f0c4:	f7ff ff4b 	bl	800ef5e <strcasecmp>
 800f0c8:	4604      	mov	r4, r0
 800f0ca:	2800      	cmp	r0, #0
 800f0cc:	d1f2      	bne.n	800f0b4 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800f0ce:	4911      	ldr	r1, [pc, #68]	; (800f114 <HttpDaemon::ParseHeaderField(char*)+0x90>)
 800f0d0:	f005 fb80 	bl	80147d4 <strtok>
 800f0d4:	2800      	cmp	r0, #0
 800f0d6:	d0dd      	beq.n	800f094 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800f0d8:	1e42      	subs	r2, r0, #1
 800f0da:	4623      	mov	r3, r4
 800f0dc:	200a      	movs	r0, #10
 800f0de:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800f0e2:	b151      	cbz	r1, 800f0fa <HttpDaemon::ParseHeaderField(char*)+0x76>
 800f0e4:	3930      	subs	r1, #48	; 0x30
 800f0e6:	2909      	cmp	r1, #9
 800f0e8:	d8d4      	bhi.n	800f094 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800f0ea:	fb00 1303 	mla	r3, r0, r3, r1
 800f0ee:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 800f0f2:	d9f4      	bls.n	800f0de <HttpDaemon::ParseHeaderField(char*)+0x5a>
 800f0f4:	f240 109d 	movw	r0, #413	; 0x19d
 800f0f8:	e7ce      	b.n	800f098 <HttpDaemon::ParseHeaderField(char*)+0x14>
 800f0fa:	f8a5 35c6 	strh.w	r3, [r5, #1478]	; 0x5c6
 800f0fe:	e7d9      	b.n	800f0b4 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800f100:	08017355 	stmdaeq	r1, {r0, r2, r4, r6, r8, r9, ip, sp, lr}
 800f104:	08017357 	stmdaeq	r1, {r0, r1, r2, r4, r6, r8, r9, ip, sp, lr}
 800f108:	08017364 	stmdaeq	r1, {r2, r5, r6, r8, r9, ip, sp, lr}
 800f10c:	08017367 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}
 800f110:	08017378 	stmdaeq	r1, {r3, r4, r5, r6, r8, r9, ip, sp, lr}
 800f114:	080184e7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, sl, pc}

0800f118 <HttpDaemon::ParseRequest()>:
 800f118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f11a:	2400      	movs	r4, #0
 800f11c:	4605      	mov	r5, r0
 800f11e:	4622      	mov	r2, r4
 800f120:	4626      	mov	r6, r4
 800f122:	68c1      	ldr	r1, [r0, #12]
 800f124:	f880 4020 	strb.w	r4, [r0, #32]
 800f128:	f8c0 45c4 	str.w	r4, [r0, #1476]	; 0x5c4
 800f12c:	8aab      	ldrh	r3, [r5, #20]
 800f12e:	42a3      	cmp	r3, r4
 800f130:	d923      	bls.n	800f17a <HttpDaemon::ParseRequest()+0x62>
 800f132:	68eb      	ldr	r3, [r5, #12]
 800f134:	5d18      	ldrb	r0, [r3, r4]
 800f136:	280a      	cmp	r0, #10
 800f138:	d10e      	bne.n	800f158 <HttpDaemon::ParseRequest()+0x40>
 800f13a:	4423      	add	r3, r4
 800f13c:	f803 6c01 	strb.w	r6, [r3, #-1]
 800f140:	1c57      	adds	r7, r2, #1
 800f142:	b962      	cbnz	r2, 800f15e <HttpDaemon::ParseRequest()+0x46>
 800f144:	4628      	mov	r0, r5
 800f146:	f7ff ff55 	bl	800eff4 <HttpDaemon::ParseMethod(char*)>
 800f14a:	28c8      	cmp	r0, #200	; 0xc8
 800f14c:	d116      	bne.n	800f17c <HttpDaemon::ParseRequest()+0x64>
 800f14e:	463a      	mov	r2, r7
 800f150:	68e9      	ldr	r1, [r5, #12]
 800f152:	3401      	adds	r4, #1
 800f154:	b2a4      	uxth	r4, r4
 800f156:	4421      	add	r1, r4
 800f158:	3401      	adds	r4, #1
 800f15a:	b2a4      	uxth	r4, r4
 800f15c:	e7e6      	b.n	800f12c <HttpDaemon::ParseRequest()+0x14>
 800f15e:	7808      	ldrb	r0, [r1, #0]
 800f160:	b968      	cbnz	r0, 800f17e <HttpDaemon::ParseRequest()+0x66>
 800f162:	696b      	ldr	r3, [r5, #20]
 800f164:	3b01      	subs	r3, #1
 800f166:	1b1b      	subs	r3, r3, r4
 800f168:	b29b      	uxth	r3, r3
 800f16a:	f8a5 35c4 	strh.w	r3, [r5, #1476]	; 0x5c4
 800f16e:	b123      	cbz	r3, 800f17a <HttpDaemon::ParseRequest()+0x62>
 800f170:	68ea      	ldr	r2, [r5, #12]
 800f172:	3401      	adds	r4, #1
 800f174:	4414      	add	r4, r2
 800f176:	60ac      	str	r4, [r5, #8]
 800f178:	54e0      	strb	r0, [r4, r3]
 800f17a:	20c8      	movs	r0, #200	; 0xc8
 800f17c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f17e:	4628      	mov	r0, r5
 800f180:	f7ff ff80 	bl	800f084 <HttpDaemon::ParseHeaderField(char*)>
 800f184:	e7e1      	b.n	800f14a <HttpDaemon::ParseRequest()+0x32>
	...

0800f188 <HttpDaemon::HandleGetTxt()>:
 800f188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f18c:	6847      	ldr	r7, [r0, #4]
 800f18e:	4604      	mov	r4, r0
 800f190:	1dbd      	adds	r5, r7, #6
 800f192:	462b      	mov	r3, r5
 800f194:	4618      	mov	r0, r3
 800f196:	7802      	ldrb	r2, [r0, #0]
 800f198:	3301      	adds	r3, #1
 800f19a:	2a00      	cmp	r2, #0
 800f19c:	d1fa      	bne.n	800f194 <HttpDaemon::HandleGetTxt()+0xc>
 800f19e:	1b40      	subs	r0, r0, r5
 800f1a0:	2804      	cmp	r0, #4
 800f1a2:	d925      	bls.n	800f1f0 <HttpDaemon::HandleGetTxt()+0x68>
 800f1a4:	3804      	subs	r0, #4
 800f1a6:	4915      	ldr	r1, [pc, #84]	; (800f1fc <HttpDaemon::HandleGetTxt()+0x74>)
 800f1a8:	4428      	add	r0, r5
 800f1aa:	f7ff fecb 	bl	800ef44 <strcmp>
 800f1ae:	b9f8      	cbnz	r0, 800f1f0 <HttpDaemon::HandleGetTxt()+0x68>
 800f1b0:	4b13      	ldr	r3, [pc, #76]	; (800f200 <HttpDaemon::HandleGetTxt()+0x78>)
 800f1b2:	2001      	movs	r0, #1
 800f1b4:	f893 8000 	ldrb.w	r8, [r3]
 800f1b8:	f7ff feec 	bl	800ef94 <PropertiesConfig::EnableJSON(bool)>
 800f1bc:	4b11      	ldr	r3, [pc, #68]	; (800f204 <HttpDaemon::HandleGetTxt()+0x7c>)
 800f1be:	f240 529b 	movw	r2, #1435	; 0x59b
 800f1c2:	4629      	mov	r1, r5
 800f1c4:	6818      	ldr	r0, [r3, #0]
 800f1c6:	f7ff fab1 	bl	800e72c <RemoteConfig::HandleGet(void*, unsigned int)>
 800f1ca:	4606      	mov	r6, r0
 800f1cc:	f008 0801 	and.w	r8, r8, #1
 800f1d0:	4640      	mov	r0, r8
 800f1d2:	f7ff fedf 	bl	800ef94 <PropertiesConfig::EnableJSON(bool)>
 800f1d6:	b15e      	cbz	r6, 800f1f0 <HttpDaemon::HandleGetTxt()+0x68>
 800f1d8:	f8a4 65c2 	strh.w	r6, [r4, #1474]	; 0x5c2
 800f1dc:	3606      	adds	r6, #6
 800f1de:	3422      	adds	r4, #34	; 0x22
 800f1e0:	443e      	add	r6, r7
 800f1e2:	42b5      	cmp	r5, r6
 800f1e4:	d008      	beq.n	800f1f8 <HttpDaemon::HandleGetTxt()+0x70>
 800f1e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f1ea:	f804 3b01 	strb.w	r3, [r4], #1
 800f1ee:	e7f8      	b.n	800f1e2 <HttpDaemon::HandleGetTxt()+0x5a>
 800f1f0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800f1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1f8:	20c8      	movs	r0, #200	; 0xc8
 800f1fa:	e7fb      	b.n	800f1f4 <HttpDaemon::HandleGetTxt()+0x6c>
 800f1fc:	08017280 	stmdaeq	r1, {r7, r9, ip, sp, lr}
 800f200:	2000a8d0 	ldrdcs	sl, [r0], -r0
 800f204:	20001984 	andcs	r1, r0, r4, lsl #19

0800f208 <HttpDaemon::HandleGet()>:
 800f208:	b570      	push	{r4, r5, r6, lr}
 800f20a:	6845      	ldr	r5, [r0, #4]
 800f20c:	4604      	mov	r4, r0
 800f20e:	4943      	ldr	r1, [pc, #268]	; (800f31c <HttpDaemon::HandleGet()+0x114>)
 800f210:	4628      	mov	r0, r5
 800f212:	f7ff fe97 	bl	800ef44 <strcmp>
 800f216:	b120      	cbz	r0, 800f222 <HttpDaemon::HandleGet()+0x1a>
 800f218:	4628      	mov	r0, r5
 800f21a:	4941      	ldr	r1, [pc, #260]	; (800f320 <HttpDaemon::HandleGet()+0x118>)
 800f21c:	f7ff fe92 	bl	800ef44 <strcmp>
 800f220:	b960      	cbnz	r0, 800f23c <HttpDaemon::HandleGet()+0x34>
 800f222:	4621      	mov	r1, r4
 800f224:	4b3f      	ldr	r3, [pc, #252]	; (800f324 <HttpDaemon::HandleGet()+0x11c>)
 800f226:	4840      	ldr	r0, [pc, #256]	; (800f328 <HttpDaemon::HandleGet()+0x120>)
 800f228:	f841 3b22 	str.w	r3, [r1], #34
 800f22c:	f000 fa7a 	bl	800f724 <get_file_content(char const*, char*)>
 800f230:	2800      	cmp	r0, #0
 800f232:	dd1e      	ble.n	800f272 <HttpDaemon::HandleGet()+0x6a>
 800f234:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 800f238:	20c8      	movs	r0, #200	; 0xc8
 800f23a:	bd70      	pop	{r4, r5, r6, pc}
 800f23c:	4628      	mov	r0, r5
 800f23e:	493b      	ldr	r1, [pc, #236]	; (800f32c <HttpDaemon::HandleGet()+0x124>)
 800f240:	f7ff fe80 	bl	800ef44 <strcmp>
 800f244:	b928      	cbnz	r0, 800f252 <HttpDaemon::HandleGet()+0x4a>
 800f246:	4621      	mov	r1, r4
 800f248:	4b39      	ldr	r3, [pc, #228]	; (800f330 <HttpDaemon::HandleGet()+0x128>)
 800f24a:	483a      	ldr	r0, [pc, #232]	; (800f334 <HttpDaemon::HandleGet()+0x12c>)
 800f24c:	f841 3b22 	str.w	r3, [r1], #34
 800f250:	e7ec      	b.n	800f22c <HttpDaemon::HandleGet()+0x24>
 800f252:	4628      	mov	r0, r5
 800f254:	4938      	ldr	r1, [pc, #224]	; (800f338 <HttpDaemon::HandleGet()+0x130>)
 800f256:	f7ff fe75 	bl	800ef44 <strcmp>
 800f25a:	b168      	cbz	r0, 800f278 <HttpDaemon::HandleGet()+0x70>
 800f25c:	4a37      	ldr	r2, [pc, #220]	; (800f33c <HttpDaemon::HandleGet()+0x134>)
 800f25e:	1e6b      	subs	r3, r5, #1
 800f260:	1d6e      	adds	r6, r5, #5
 800f262:	42b3      	cmp	r3, r6
 800f264:	d00e      	beq.n	800f284 <HttpDaemon::HandleGet()+0x7c>
 800f266:	f812 1b01 	ldrb.w	r1, [r2], #1
 800f26a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800f26e:	4288      	cmp	r0, r1
 800f270:	d0f7      	beq.n	800f262 <HttpDaemon::HandleGet()+0x5a>
 800f272:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800f276:	e7e0      	b.n	800f23a <HttpDaemon::HandleGet()+0x32>
 800f278:	4621      	mov	r1, r4
 800f27a:	4b31      	ldr	r3, [pc, #196]	; (800f340 <HttpDaemon::HandleGet()+0x138>)
 800f27c:	4831      	ldr	r0, [pc, #196]	; (800f344 <HttpDaemon::HandleGet()+0x13c>)
 800f27e:	f841 3b22 	str.w	r3, [r1], #34
 800f282:	e7d3      	b.n	800f22c <HttpDaemon::HandleGet()+0x24>
 800f284:	4b30      	ldr	r3, [pc, #192]	; (800f348 <HttpDaemon::HandleGet()+0x140>)
 800f286:	3506      	adds	r5, #6
 800f288:	4628      	mov	r0, r5
 800f28a:	4930      	ldr	r1, [pc, #192]	; (800f34c <HttpDaemon::HandleGet()+0x144>)
 800f28c:	6023      	str	r3, [r4, #0]
 800f28e:	f7ff fe59 	bl	800ef44 <strcmp>
 800f292:	b930      	cbnz	r0, 800f2a2 <HttpDaemon::HandleGet()+0x9a>
 800f294:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800f298:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800f29c:	f000 f9ca 	bl	800f634 <remoteconfig::json_get_list(char*, unsigned short)>
 800f2a0:	e7c6      	b.n	800f230 <HttpDaemon::HandleGet()+0x28>
 800f2a2:	4628      	mov	r0, r5
 800f2a4:	492a      	ldr	r1, [pc, #168]	; (800f350 <HttpDaemon::HandleGet()+0x148>)
 800f2a6:	f7ff fe4d 	bl	800ef44 <strcmp>
 800f2aa:	b930      	cbnz	r0, 800f2ba <HttpDaemon::HandleGet()+0xb2>
 800f2ac:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800f2b0:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800f2b4:	f000 f9f2 	bl	800f69c <remoteconfig::json_get_version(char*, unsigned short)>
 800f2b8:	e7ba      	b.n	800f230 <HttpDaemon::HandleGet()+0x28>
 800f2ba:	4628      	mov	r0, r5
 800f2bc:	4925      	ldr	r1, [pc, #148]	; (800f354 <HttpDaemon::HandleGet()+0x14c>)
 800f2be:	f7ff fe41 	bl	800ef44 <strcmp>
 800f2c2:	b950      	cbnz	r0, 800f2da <HttpDaemon::HandleGet()+0xd2>
 800f2c4:	4b24      	ldr	r3, [pc, #144]	; (800f358 <HttpDaemon::HandleGet()+0x150>)
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	7bdb      	ldrb	r3, [r3, #15]
 800f2ca:	b31b      	cbz	r3, 800f314 <HttpDaemon::HandleGet()+0x10c>
 800f2cc:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800f2d0:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800f2d4:	f000 f9fe 	bl	800f6d4 <remoteconfig::json_get_uptime(char*, unsigned short)>
 800f2d8:	e7aa      	b.n	800f230 <HttpDaemon::HandleGet()+0x28>
 800f2da:	4628      	mov	r0, r5
 800f2dc:	491f      	ldr	r1, [pc, #124]	; (800f35c <HttpDaemon::HandleGet()+0x154>)
 800f2de:	f7ff fe31 	bl	800ef44 <strcmp>
 800f2e2:	b930      	cbnz	r0, 800f2f2 <HttpDaemon::HandleGet()+0xea>
 800f2e4:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800f2e8:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800f2ec:	f000 fa02 	bl	800f6f4 <remoteconfig::json_get_display(char*, unsigned short)>
 800f2f0:	e79e      	b.n	800f230 <HttpDaemon::HandleGet()+0x28>
 800f2f2:	4628      	mov	r0, r5
 800f2f4:	491a      	ldr	r1, [pc, #104]	; (800f360 <HttpDaemon::HandleGet()+0x158>)
 800f2f6:	f7ff fe25 	bl	800ef44 <strcmp>
 800f2fa:	b930      	cbnz	r0, 800f30a <HttpDaemon::HandleGet()+0x102>
 800f2fc:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800f300:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800f304:	f000 fa06 	bl	800f714 <remoteconfig::json_get_directory(char*, unsigned short)>
 800f308:	e792      	b.n	800f230 <HttpDaemon::HandleGet()+0x28>
 800f30a:	4620      	mov	r0, r4
 800f30c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f310:	f7ff bf3a 	b.w	800f188 <HttpDaemon::HandleGetTxt()>
 800f314:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800f318:	e78f      	b.n	800f23a <HttpDaemon::HandleGet()+0x32>
 800f31a:	bf00      	nop
 800f31c:	080173ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, r9, ip, sp, lr}
 800f320:	08017387 	stmdaeq	r1, {r0, r1, r2, r7, r8, r9, ip, sp, lr}
 800f324:	0801759a 	stmdaeq	r1, {r1, r3, r4, r7, r8, sl, ip, sp, lr}
 800f328:	08017388 	stmdaeq	r1, {r3, r7, r8, r9, ip, sp, lr}
 800f32c:	08017393 	stmdaeq	r1, {r0, r1, r4, r7, r8, r9, ip, sp, lr}
 800f330:	080175ba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r8, sl, ip, sp, lr}
 800f334:	08017394 	stmdaeq	r1, {r2, r4, r7, r8, r9, ip, sp, lr}
 800f338:	0801739f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r8, r9, ip, sp, lr}
 800f33c:	080173a9 	stmdaeq	r1, {r0, r3, r5, r7, r8, r9, ip, sp, lr}
 800f340:	080175da 	stmdaeq	r1, {r1, r3, r4, r6, r7, r8, sl, ip, sp, lr}
 800f344:	080173a0 	stmdaeq	r1, {r5, r7, r8, r9, ip, sp, lr}
 800f348:	080175fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r8, sl, ip, sp, lr}
 800f34c:	080173b0 	stmdaeq	r1, {r4, r5, r7, r8, r9, ip, sp, lr}
 800f350:	080173b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, r9, ip, sp, lr}
 800f354:	080173bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, r9, ip, sp, lr}
 800f358:	20001984 	andcs	r1, r0, r4, lsl #19
 800f35c:	080173c4 	stmdaeq	r1, {r2, r6, r7, r8, r9, ip, sp, lr}
 800f360:	080173cc 	stmdaeq	r1, {r2, r3, r6, r7, r8, r9, ip, sp, lr}

0800f364 <HttpDaemon::HandlePost(bool)>:
 800f364:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f366:	4604      	mov	r4, r0
 800f368:	2900      	cmp	r1, #0
 800f36a:	f040 8090 	bne.w	800f48e <HttpDaemon::HandlePost(bool)+0x12a>
 800f36e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d05d      	beq.n	800f432 <HttpDaemon::HandlePost(bool)+0xce>
 800f376:	6845      	ldr	r5, [r0, #4]
 800f378:	4948      	ldr	r1, [pc, #288]	; (800f49c <HttpDaemon::HandlePost(bool)+0x138>)
 800f37a:	4628      	mov	r0, r5
 800f37c:	f7ff fde2 	bl	800ef44 <strcmp>
 800f380:	2800      	cmp	r0, #0
 800f382:	bf0c      	ite	eq
 800f384:	2301      	moveq	r3, #1
 800f386:	2300      	movne	r3, #0
 800f388:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 800f38c:	d055      	beq.n	800f43a <HttpDaemon::HandlePost(bool)+0xd6>
 800f38e:	4628      	mov	r0, r5
 800f390:	4943      	ldr	r1, [pc, #268]	; (800f4a0 <HttpDaemon::HandlePost(bool)+0x13c>)
 800f392:	f7ff fdd7 	bl	800ef44 <strcmp>
 800f396:	2800      	cmp	r0, #0
 800f398:	d04f      	beq.n	800f43a <HttpDaemon::HandlePost(bool)+0xd6>
 800f39a:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800f39e:	e04a      	b.n	800f436 <HttpDaemon::HandlePost(bool)+0xd2>
 800f3a0:	4940      	ldr	r1, [pc, #256]	; (800f4a4 <HttpDaemon::HandlePost(bool)+0x140>)
 800f3a2:	68a0      	ldr	r0, [r4, #8]
 800f3a4:	f10d 0207 	add.w	r2, sp, #7
 800f3a8:	f004 fc96 	bl	8013cd8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800f3ac:	b9e8      	cbnz	r0, 800f3ea <HttpDaemon::HandlePost(bool)+0x86>
 800f3ae:	f89d 6007 	ldrb.w	r6, [sp, #7]
 800f3b2:	4b3d      	ldr	r3, [pc, #244]	; (800f4a8 <HttpDaemon::HandlePost(bool)+0x144>)
 800f3b4:	fab6 f186 	clz	r1, r6
 800f3b8:	681d      	ldr	r5, [r3, #0]
 800f3ba:	0949      	lsrs	r1, r1, #5
 800f3bc:	69a8      	ldr	r0, [r5, #24]
 800f3be:	b138      	cbz	r0, 800f3d0 <HttpDaemon::HandlePost(bool)+0x6c>
 800f3c0:	6803      	ldr	r3, [r0, #0]
 800f3c2:	7429      	strb	r1, [r5, #16]
 800f3c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3c6:	4798      	blx	r3
 800f3c8:	b116      	cbz	r6, 800f3d0 <HttpDaemon::HandlePost(bool)+0x6c>
 800f3ca:	4b38      	ldr	r3, [pc, #224]	; (800f4ac <HttpDaemon::HandlePost(bool)+0x148>)
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	606b      	str	r3, [r5, #4]
 800f3d0:	4620      	mov	r0, r4
 800f3d2:	4b37      	ldr	r3, [pc, #220]	; (800f4b0 <HttpDaemon::HandlePost(bool)+0x14c>)
 800f3d4:	f240 519f 	movw	r1, #1439	; 0x59f
 800f3d8:	4a36      	ldr	r2, [pc, #216]	; (800f4b4 <HttpDaemon::HandlePost(bool)+0x150>)
 800f3da:	f840 3b22 	str.w	r3, [r0], #34
 800f3de:	f7f9 fc95 	bl	8008d0c <snprintf>
 800f3e2:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 800f3e6:	20c8      	movs	r0, #200	; 0xc8
 800f3e8:	e025      	b.n	800f436 <HttpDaemon::HandlePost(bool)+0xd2>
 800f3ea:	4933      	ldr	r1, [pc, #204]	; (800f4b8 <HttpDaemon::HandlePost(bool)+0x154>)
 800f3ec:	68a0      	ldr	r0, [r4, #8]
 800f3ee:	f10d 0207 	add.w	r2, sp, #7
 800f3f2:	f004 fc71 	bl	8013cd8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800f3f6:	b9e0      	cbnz	r0, 800f432 <HttpDaemon::HandlePost(bool)+0xce>
 800f3f8:	4b30      	ldr	r3, [pc, #192]	; (800f4bc <HttpDaemon::HandlePost(bool)+0x158>)
 800f3fa:	6818      	ldr	r0, [r3, #0]
 800f3fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f400:	b11b      	cbz	r3, 800f40a <HttpDaemon::HandlePost(bool)+0xa6>
 800f402:	2104      	movs	r1, #4
 800f404:	f004 fffe 	bl	8014404 <LedBlink::SetMode(ledblink::Mode)>
 800f408:	e7e2      	b.n	800f3d0 <HttpDaemon::HandlePost(bool)+0x6c>
 800f40a:	2102      	movs	r1, #2
 800f40c:	e7fa      	b.n	800f404 <HttpDaemon::HandlePost(bool)+0xa0>
 800f40e:	4b2c      	ldr	r3, [pc, #176]	; (800f4c0 <HttpDaemon::HandlePost(bool)+0x15c>)
 800f410:	2001      	movs	r0, #1
 800f412:	781d      	ldrb	r5, [r3, #0]
 800f414:	f7ff fdbe 	bl	800ef94 <PropertiesConfig::EnableJSON(bool)>
 800f418:	4b2a      	ldr	r3, [pc, #168]	; (800f4c4 <HttpDaemon::HandlePost(bool)+0x160>)
 800f41a:	f8b4 25c4 	ldrh.w	r2, [r4, #1476]	; 0x5c4
 800f41e:	6818      	ldr	r0, [r3, #0]
 800f420:	68a1      	ldr	r1, [r4, #8]
 800f422:	f005 0501 	and.w	r5, r5, #1
 800f426:	f7ff fa4d 	bl	800e8c4 <RemoteConfig::HandleSet(void*, unsigned int)>
 800f42a:	4628      	mov	r0, r5
 800f42c:	f7ff fdb2 	bl	800ef94 <PropertiesConfig::EnableJSON(bool)>
 800f430:	e7ce      	b.n	800f3d0 <HttpDaemon::HandlePost(bool)+0x6c>
 800f432:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800f436:	b002      	add	sp, #8
 800f438:	bd70      	pop	{r4, r5, r6, pc}
 800f43a:	f8b4 35c6 	ldrh.w	r3, [r4, #1478]	; 0x5c6
 800f43e:	6962      	ldr	r2, [r4, #20]
 800f440:	429a      	cmp	r2, r3
 800f442:	dbd0      	blt.n	800f3e6 <HttpDaemon::HandlePost(bool)+0x82>
 800f444:	f8b4 35c4 	ldrh.w	r3, [r4, #1476]	; 0x5c4
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d0cc      	beq.n	800f3e6 <HttpDaemon::HandlePost(bool)+0x82>
 800f44c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800f450:	2b00      	cmp	r3, #0
 800f452:	d0dc      	beq.n	800f40e <HttpDaemon::HandlePost(bool)+0xaa>
 800f454:	2201      	movs	r2, #1
 800f456:	f8b4 15c4 	ldrh.w	r1, [r4, #1476]	; 0x5c4
 800f45a:	68a0      	ldr	r0, [r4, #8]
 800f45c:	f004 f958 	bl	8013710 <properties::convert_json_file(char*, unsigned short, bool)>
 800f460:	2800      	cmp	r0, #0
 800f462:	dde6      	ble.n	800f432 <HttpDaemon::HandlePost(bool)+0xce>
 800f464:	4918      	ldr	r1, [pc, #96]	; (800f4c8 <HttpDaemon::HandlePost(bool)+0x164>)
 800f466:	68a0      	ldr	r0, [r4, #8]
 800f468:	f10d 0207 	add.w	r2, sp, #7
 800f46c:	f004 fc34 	bl	8013cd8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800f470:	2800      	cmp	r0, #0
 800f472:	d195      	bne.n	800f3a0 <HttpDaemon::HandlePost(bool)+0x3c>
 800f474:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d0a9      	beq.n	800f3d0 <HttpDaemon::HandlePost(bool)+0x6c>
 800f47c:	4b11      	ldr	r3, [pc, #68]	; (800f4c4 <HttpDaemon::HandlePost(bool)+0x160>)
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	7b9b      	ldrb	r3, [r3, #14]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d0d5      	beq.n	800f432 <HttpDaemon::HandlePost(bool)+0xce>
 800f486:	4b11      	ldr	r3, [pc, #68]	; (800f4cc <HttpDaemon::HandlePost(bool)+0x168>)
 800f488:	6818      	ldr	r0, [r3, #0]
 800f48a:	f005 f85d 	bl	8014548 <Hardware::Reboot()>
 800f48e:	68c3      	ldr	r3, [r0, #12]
 800f490:	6083      	str	r3, [r0, #8]
 800f492:	6943      	ldr	r3, [r0, #20]
 800f494:	f8a0 35c4 	strh.w	r3, [r0, #1476]	; 0x5c4
 800f498:	e7d8      	b.n	800f44c <HttpDaemon::HandlePost(bool)+0xe8>
 800f49a:	bf00      	nop
 800f49c:	080173d6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r8, r9, ip, sp, lr}
 800f4a0:	08017372 	stmdaeq	r1, {r1, r4, r5, r6, r8, r9, ip, sp, lr}
 800f4a4:	080173c4 	stmdaeq	r1, {r2, r6, r7, r8, r9, ip, sp, lr}
 800f4a8:	2000a8d4 	ldrdcs	sl, [r0], -r4
 800f4ac:	2000a9dc 	ldrdcs	sl, [r0], -ip
 800f4b0:	0801759a 	stmdaeq	r1, {r1, r3, r4, r7, r8, sl, ip, sp, lr}
 800f4b4:	080173f3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r8, r9, ip, sp, lr}
 800f4b8:	080173ea 	stmdaeq	r1, {r1, r3, r5, r6, r7, r8, r9, ip, sp, lr}
 800f4bc:	2000a9c0 	andcs	sl, r0, r0, asr #19
 800f4c0:	2000a8d0 	ldrdcs	sl, [r0], -r0
 800f4c4:	20001984 	andcs	r1, r0, r4, lsl #19
 800f4c8:	080173e3 	stmdaeq	r1, {r0, r1, r5, r6, r7, r8, r9, ip, sp, lr}
 800f4cc:	2000a9c4 	andcs	sl, r0, r4, asr #19

0800f4d0 <HttpDaemon::Run()>:
 800f4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4d2:	4e4a      	ldr	r6, [pc, #296]	; (800f5fc <HttpDaemon::Run()+0x12c>)
 800f4d4:	4604      	mov	r4, r0
 800f4d6:	6901      	ldr	r1, [r0, #16]
 800f4d8:	f100 020c 	add.w	r2, r0, #12
 800f4dc:	b085      	sub	sp, #20
 800f4de:	6830      	ldr	r0, [r6, #0]
 800f4e0:	f002 fccd 	bl	8011e7e <Network::TcpRead(int, unsigned char const**)>
 800f4e4:	6160      	str	r0, [r4, #20]
 800f4e6:	2800      	cmp	r0, #0
 800f4e8:	d061      	beq.n	800f5ae <HttpDaemon::Run()+0xde>
 800f4ea:	69a3      	ldr	r3, [r4, #24]
 800f4ec:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800f4f0:	d15f      	bne.n	800f5b2 <HttpDaemon::Run()+0xe2>
 800f4f2:	4620      	mov	r0, r4
 800f4f4:	f7ff fe10 	bl	800f118 <HttpDaemon::ParseRequest()>
 800f4f8:	28c8      	cmp	r0, #200	; 0xc8
 800f4fa:	61a0      	str	r0, [r4, #24]
 800f4fc:	d106      	bne.n	800f50c <HttpDaemon::Run()+0x3c>
 800f4fe:	69e3      	ldr	r3, [r4, #28]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d147      	bne.n	800f594 <HttpDaemon::Run()+0xc4>
 800f504:	4620      	mov	r0, r4
 800f506:	f7ff fe7f 	bl	800f208 <HttpDaemon::HandleGet()>
 800f50a:	61a0      	str	r0, [r4, #24]
 800f50c:	69a3      	ldr	r3, [r4, #24]
 800f50e:	f104 0722 	add.w	r7, r4, #34	; 0x22
 800f512:	2bc8      	cmp	r3, #200	; 0xc8
 800f514:	d06f      	beq.n	800f5f6 <HttpDaemon::Run()+0x126>
 800f516:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 800f51a:	d062      	beq.n	800f5e2 <HttpDaemon::Run()+0x112>
 800f51c:	dc52      	bgt.n	800f5c4 <HttpDaemon::Run()+0xf4>
 800f51e:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 800f522:	d060      	beq.n	800f5e6 <HttpDaemon::Run()+0x116>
 800f524:	f240 129d 	movw	r2, #413	; 0x19d
 800f528:	4293      	cmp	r3, r2
 800f52a:	d05e      	beq.n	800f5ea <HttpDaemon::Run()+0x11a>
 800f52c:	4d34      	ldr	r5, [pc, #208]	; (800f600 <HttpDaemon::Run()+0x130>)
 800f52e:	4a35      	ldr	r2, [pc, #212]	; (800f604 <HttpDaemon::Run()+0x134>)
 800f530:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800f534:	bf18      	it	ne
 800f536:	4615      	movne	r5, r2
 800f538:	4a33      	ldr	r2, [pc, #204]	; (800f608 <HttpDaemon::Run()+0x138>)
 800f53a:	f240 519f 	movw	r1, #1439	; 0x59f
 800f53e:	6022      	str	r2, [r4, #0]
 800f540:	4638      	mov	r0, r7
 800f542:	e9cd 5500 	strd	r5, r5, [sp]
 800f546:	4a31      	ldr	r2, [pc, #196]	; (800f60c <HttpDaemon::Run()+0x13c>)
 800f548:	f7f9 fbe0 	bl	8008d0c <snprintf>
 800f54c:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 800f550:	f8b4 35c2 	ldrh.w	r3, [r4, #1474]	; 0x5c2
 800f554:	f240 519f 	movw	r1, #1439	; 0x59f
 800f558:	9303      	str	r3, [sp, #12]
 800f55a:	6823      	ldr	r3, [r4, #0]
 800f55c:	4a2c      	ldr	r2, [pc, #176]	; (800f610 <HttpDaemon::Run()+0x140>)
 800f55e:	9302      	str	r3, [sp, #8]
 800f560:	4b2c      	ldr	r3, [pc, #176]	; (800f614 <HttpDaemon::Run()+0x144>)
 800f562:	68e0      	ldr	r0, [r4, #12]
 800f564:	e9cd 5300 	strd	r5, r3, [sp]
 800f568:	69a3      	ldr	r3, [r4, #24]
 800f56a:	f7f9 fbcf 	bl	8008d0c <snprintf>
 800f56e:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800f572:	b283      	uxth	r3, r0
 800f574:	6830      	ldr	r0, [r6, #0]
 800f576:	f002 fc86 	bl	8011e86 <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 800f57a:	463a      	mov	r2, r7
 800f57c:	f8b4 35c2 	ldrh.w	r3, [r4, #1474]	; 0x5c2
 800f580:	6921      	ldr	r1, [r4, #16]
 800f582:	6830      	ldr	r0, [r6, #0]
 800f584:	f002 fc7f 	bl	8011e86 <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 800f588:	f44f 7202 	mov.w	r2, #520	; 0x208
 800f58c:	2302      	movs	r3, #2
 800f58e:	e9c4 2306 	strd	r2, r3, [r4, #24]
 800f592:	e00c      	b.n	800f5ae <HttpDaemon::Run()+0xde>
 800f594:	2b01      	cmp	r3, #1
 800f596:	d1b9      	bne.n	800f50c <HttpDaemon::Run()+0x3c>
 800f598:	2100      	movs	r1, #0
 800f59a:	4620      	mov	r0, r4
 800f59c:	f7ff fee2 	bl	800f364 <HttpDaemon::HandlePost(bool)>
 800f5a0:	28c8      	cmp	r0, #200	; 0xc8
 800f5a2:	61a0      	str	r0, [r4, #24]
 800f5a4:	d1b2      	bne.n	800f50c <HttpDaemon::Run()+0x3c>
 800f5a6:	f8b4 35c4 	ldrh.w	r3, [r4, #1476]	; 0x5c4
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d1ae      	bne.n	800f50c <HttpDaemon::Run()+0x3c>
 800f5ae:	b005      	add	sp, #20
 800f5b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5b2:	2bc8      	cmp	r3, #200	; 0xc8
 800f5b4:	d1aa      	bne.n	800f50c <HttpDaemon::Run()+0x3c>
 800f5b6:	69e1      	ldr	r1, [r4, #28]
 800f5b8:	2901      	cmp	r1, #1
 800f5ba:	d1a7      	bne.n	800f50c <HttpDaemon::Run()+0x3c>
 800f5bc:	4620      	mov	r0, r4
 800f5be:	f7ff fed1 	bl	800f364 <HttpDaemon::HandlePost(bool)>
 800f5c2:	e7a2      	b.n	800f50a <HttpDaemon::Run()+0x3a>
 800f5c4:	f240 12f5 	movw	r2, #501	; 0x1f5
 800f5c8:	4293      	cmp	r3, r2
 800f5ca:	d010      	beq.n	800f5ee <HttpDaemon::Run()+0x11e>
 800f5cc:	f240 12f9 	movw	r2, #505	; 0x1f9
 800f5d0:	4293      	cmp	r3, r2
 800f5d2:	d00e      	beq.n	800f5f2 <HttpDaemon::Run()+0x122>
 800f5d4:	4d10      	ldr	r5, [pc, #64]	; (800f618 <HttpDaemon::Run()+0x148>)
 800f5d6:	4a0b      	ldr	r2, [pc, #44]	; (800f604 <HttpDaemon::Run()+0x134>)
 800f5d8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800f5dc:	bf18      	it	ne
 800f5de:	4615      	movne	r5, r2
 800f5e0:	e7aa      	b.n	800f538 <HttpDaemon::Run()+0x68>
 800f5e2:	4d0e      	ldr	r5, [pc, #56]	; (800f61c <HttpDaemon::Run()+0x14c>)
 800f5e4:	e7a8      	b.n	800f538 <HttpDaemon::Run()+0x68>
 800f5e6:	4d0e      	ldr	r5, [pc, #56]	; (800f620 <HttpDaemon::Run()+0x150>)
 800f5e8:	e7a6      	b.n	800f538 <HttpDaemon::Run()+0x68>
 800f5ea:	4d0e      	ldr	r5, [pc, #56]	; (800f624 <HttpDaemon::Run()+0x154>)
 800f5ec:	e7a4      	b.n	800f538 <HttpDaemon::Run()+0x68>
 800f5ee:	4d0e      	ldr	r5, [pc, #56]	; (800f628 <HttpDaemon::Run()+0x158>)
 800f5f0:	e7a2      	b.n	800f538 <HttpDaemon::Run()+0x68>
 800f5f2:	4d0e      	ldr	r5, [pc, #56]	; (800f62c <HttpDaemon::Run()+0x15c>)
 800f5f4:	e7a0      	b.n	800f538 <HttpDaemon::Run()+0x68>
 800f5f6:	4d0e      	ldr	r5, [pc, #56]	; (800f630 <HttpDaemon::Run()+0x160>)
 800f5f8:	e7aa      	b.n	800f550 <HttpDaemon::Run()+0x80>
 800f5fa:	bf00      	nop
 800f5fc:	2000a29c 	mulcs	r0, ip, r2
 800f600:	080174b4 	stmdaeq	r1, {r2, r4, r5, r7, sl, ip, sp, lr}
 800f604:	080174c0 	stmdaeq	r1, {r6, r7, sl, ip, sp, lr}
 800f608:	0801759a 	stmdaeq	r1, {r1, r3, r4, r7, r8, sl, ip, sp, lr}
 800f60c:	080174e7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, sl, ip, sp, lr}
 800f610:	08017542 	stmdaeq	r1, {r1, r6, r8, sl, ip, sp, lr}
 800f614:	080169a1 	stmdaeq	r1, {r0, r5, r7, r8, fp, sp, lr}
 800f618:	080174ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, sl, ip, sp, lr}
 800f61c:	08017472 	stmdaeq	r1, {r1, r4, r5, r6, sl, ip, sp, lr}
 800f620:	08017468 	stmdaeq	r1, {r3, r5, r6, sl, ip, sp, lr}
 800f624:	0801744f 	stmdaeq	r1, {r0, r1, r2, r3, r6, sl, ip, sp, lr}
 800f628:	0801749d 	stmdaeq	r1, {r0, r2, r3, r4, r7, sl, ip, sp, lr}
 800f62c:	08017487 	stmdaeq	r1, {r0, r1, r2, r7, sl, ip, sp, lr}
 800f630:	080174e4 	stmdaeq	r1, {r2, r5, r6, r7, sl, ip, sp, lr}

0800f634 <remoteconfig::json_get_list(char*, unsigned short)>:
 800f634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f638:	4b14      	ldr	r3, [pc, #80]	; (800f68c <remoteconfig::json_get_list(char*, unsigned short)+0x58>)
 800f63a:	f8df 8054 	ldr.w	r8, [pc, #84]	; 800f690 <remoteconfig::json_get_list(char*, unsigned short)+0x5c>
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	b088      	sub	sp, #32
 800f642:	4605      	mov	r5, r0
 800f644:	f8d8 0000 	ldr.w	r0, [r8]
 800f648:	691c      	ldr	r4, [r3, #16]
 800f64a:	460e      	mov	r6, r1
 800f64c:	f7ff f81e 	bl	800e68c <RemoteConfig::GetStringNode() const>
 800f650:	4607      	mov	r7, r0
 800f652:	f8d8 0000 	ldr.w	r0, [r8]
 800f656:	f7ff f825 	bl	800e6a4 <RemoteConfig::GetStringOutput() const>
 800f65a:	4b0e      	ldr	r3, [pc, #56]	; (800f694 <remoteconfig::json_get_list(char*, unsigned short)+0x60>)
 800f65c:	4631      	mov	r1, r6
 800f65e:	7a1a      	ldrb	r2, [r3, #8]
 800f660:	3309      	adds	r3, #9
 800f662:	9303      	str	r3, [sp, #12]
 800f664:	0e23      	lsrs	r3, r4, #24
 800f666:	9302      	str	r3, [sp, #8]
 800f668:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800f66c:	9301      	str	r3, [sp, #4]
 800f66e:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800f672:	e9cd 0205 	strd	r0, r2, [sp, #20]
 800f676:	9300      	str	r3, [sp, #0]
 800f678:	4628      	mov	r0, r5
 800f67a:	4a07      	ldr	r2, [pc, #28]	; (800f698 <remoteconfig::json_get_list(char*, unsigned short)+0x64>)
 800f67c:	9704      	str	r7, [sp, #16]
 800f67e:	b2e3      	uxtb	r3, r4
 800f680:	f7f9 fb44 	bl	8008d0c <snprintf>
 800f684:	b280      	uxth	r0, r0
 800f686:	b008      	add	sp, #32
 800f688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f68c:	2000a29c 	mulcs	r0, ip, r2
 800f690:	20001984 	andcs	r1, r0, r4, lsl #19
 800f694:	20001960 	andcs	r1, r0, r0, ror #18
 800f698:	08017674 	stmdaeq	r1, {r2, r4, r5, r6, r9, sl, ip, sp, lr}

0800f69c <remoteconfig::json_get_version(char*, unsigned short)>:
 800f69c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f69e:	2208      	movs	r2, #8
 800f6a0:	4b09      	ldr	r3, [pc, #36]	; (800f6c8 <remoteconfig::json_get_version(char*, unsigned short)+0x2c>)
 800f6a2:	9204      	str	r2, [sp, #16]
 800f6a4:	f1a3 020b 	sub.w	r2, r3, #11
 800f6a8:	9203      	str	r2, [sp, #12]
 800f6aa:	220b      	movs	r2, #11
 800f6ac:	9202      	str	r2, [sp, #8]
 800f6ae:	4a07      	ldr	r2, [pc, #28]	; (800f6cc <remoteconfig::json_get_version(char*, unsigned short)+0x30>)
 800f6b0:	9305      	str	r3, [sp, #20]
 800f6b2:	3b0e      	subs	r3, #14
 800f6b4:	9201      	str	r2, [sp, #4]
 800f6b6:	9300      	str	r3, [sp, #0]
 800f6b8:	4a05      	ldr	r2, [pc, #20]	; (800f6d0 <remoteconfig::json_get_version(char*, unsigned short)+0x34>)
 800f6ba:	2303      	movs	r3, #3
 800f6bc:	f7f9 fb26 	bl	8008d0c <snprintf>
 800f6c0:	b280      	uxth	r0, r0
 800f6c2:	b007      	add	sp, #28
 800f6c4:	f85d fb04 	ldr.w	pc, [sp], #4
 800f6c8:	2000a972 	andcs	sl, r0, r2, ror r9
 800f6cc:	080169a1 	stmdaeq	r1, {r0, r5, r7, r8, fp, sp, lr}
 800f6d0:	080176d3 	stmdaeq	r1, {r0, r1, r4, r6, r7, r9, sl, ip, sp, lr}

0800f6d4 <remoteconfig::json_get_uptime(char*, unsigned short)>:
 800f6d4:	b508      	push	{r3, lr}
 800f6d6:	4b05      	ldr	r3, [pc, #20]	; (800f6ec <remoteconfig::json_get_uptime(char*, unsigned short)+0x18>)
 800f6d8:	681a      	ldr	r2, [r3, #0]
 800f6da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f6de:	fbb2 f3f3 	udiv	r3, r2, r3
 800f6e2:	4a03      	ldr	r2, [pc, #12]	; (800f6f0 <remoteconfig::json_get_uptime(char*, unsigned short)+0x1c>)
 800f6e4:	f7f9 fb12 	bl	8008d0c <snprintf>
 800f6e8:	b280      	uxth	r0, r0
 800f6ea:	bd08      	pop	{r3, pc}
 800f6ec:	2000a9dc 	ldrdcs	sl, [r0], -ip
 800f6f0:	08017719 	stmdaeq	r1, {r0, r3, r4, r8, r9, sl, ip, sp, lr}

0800f6f4 <remoteconfig::json_get_display(char*, unsigned short)>:
 800f6f4:	b508      	push	{r3, lr}
 800f6f6:	4b05      	ldr	r3, [pc, #20]	; (800f70c <remoteconfig::json_get_display(char*, unsigned short)+0x18>)
 800f6f8:	4a05      	ldr	r2, [pc, #20]	; (800f710 <remoteconfig::json_get_display(char*, unsigned short)+0x1c>)
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	7c1b      	ldrb	r3, [r3, #16]
 800f6fe:	f083 0301 	eor.w	r3, r3, #1
 800f702:	f7f9 fb03 	bl	8008d0c <snprintf>
 800f706:	b280      	uxth	r0, r0
 800f708:	bd08      	pop	{r3, pc}
 800f70a:	bf00      	nop
 800f70c:	2000a8d4 	ldrdcs	sl, [r0], -r4
 800f710:	08017728 	stmdaeq	r1, {r3, r5, r8, r9, sl, ip, sp, lr}

0800f714 <remoteconfig::json_get_directory(char*, unsigned short)>:
 800f714:	b508      	push	{r3, lr}
 800f716:	4a02      	ldr	r2, [pc, #8]	; (800f720 <remoteconfig::json_get_directory(char*, unsigned short)+0xc>)
 800f718:	f7f9 faf8 	bl	8008d0c <snprintf>
 800f71c:	b280      	uxth	r0, r0
 800f71e:	bd08      	pop	{r3, pc}
 800f720:	08017737 	stmdaeq	r1, {r0, r1, r2, r4, r5, r8, r9, sl, ip, sp, lr}

0800f724 <get_file_content(char const*, char*)>:
 800f724:	2300      	movs	r3, #0
 800f726:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f728:	4a10      	ldr	r2, [pc, #64]	; (800f76c <get_file_content(char const*, char*)+0x48>)
 800f72a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800f72e:	1e46      	subs	r6, r0, #1
 800f730:	3c01      	subs	r4, #1
 800f732:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 800f736:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800f73a:	42bd      	cmp	r5, r7
 800f73c:	d10f      	bne.n	800f75e <get_file_content(char const*, char*)+0x3a>
 800f73e:	2d00      	cmp	r5, #0
 800f740:	d1f7      	bne.n	800f732 <get_file_content(char const*, char*)+0xe>
 800f742:	4608      	mov	r0, r1
 800f744:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f748:	685b      	ldr	r3, [r3, #4]
 800f74a:	3b01      	subs	r3, #1
 800f74c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800f750:	f800 2b01 	strb.w	r2, [r0], #1
 800f754:	2a00      	cmp	r2, #0
 800f756:	d1f9      	bne.n	800f74c <get_file_content(char const*, char*)+0x28>
 800f758:	1a40      	subs	r0, r0, r1
 800f75a:	3801      	subs	r0, #1
 800f75c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f75e:	3301      	adds	r3, #1
 800f760:	2b03      	cmp	r3, #3
 800f762:	d1e2      	bne.n	800f72a <get_file_content(char const*, char*)+0x6>
 800f764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f768:	e7f8      	b.n	800f75c <get_file_content(char const*, char*)+0x38>
 800f76a:	bf00      	nop
 800f76c:	08017a78 	stmdaeq	r1, {r3, r4, r5, r6, r9, fp, ip, sp, lr}

0800f770 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>:
 800f770:	2300      	movs	r3, #0
 800f772:	2020      	movs	r0, #32
 800f774:	b510      	push	{r4, lr}
 800f776:	4a04      	ldr	r2, [pc, #16]	; (800f788 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x18>)
 800f778:	428b      	cmp	r3, r1
 800f77a:	d004      	beq.n	800f786 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x16>
 800f77c:	f852 4b04 	ldr.w	r4, [r2], #4
 800f780:	3301      	adds	r3, #1
 800f782:	4420      	add	r0, r4
 800f784:	e7f8      	b.n	800f778 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x8>
 800f786:	bd10      	pop	{r4, pc}
 800f788:	08017fbc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r8, r9, sl, fp, ip, sp, lr}

0800f78c <SpiFlashStore::Init()>:
 800f78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f790:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800f8b4 <SpiFlashStore::Init()+0x128>
 800f794:	4607      	mov	r7, r0
 800f796:	b085      	sub	sp, #20
 800f798:	f8d8 0000 	ldr.w	r0, [r8]
 800f79c:	f000 fcbe 	bl	801011c <FlashRom::GetSectorSize()>
 800f7a0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800f7a4:	4605      	mov	r5, r0
 800f7a6:	f040 8083 	bne.w	800f8b0 <SpiFlashStore::Init()+0x124>
 800f7aa:	f8d8 0000 	ldr.w	r0, [r8]
 800f7ae:	f000 fcad 	bl	801010c <FlashRom::GetSize()>
 800f7b2:	4b41      	ldr	r3, [pc, #260]	; (800f8b8 <SpiFlashStore::Init()+0x12c>)
 800f7b4:	f5a0 5180 	sub.w	r1, r0, #4096	; 0x1000
 800f7b8:	f3c1 060b 	ubfx	r6, r1, #0, #12
 800f7bc:	6019      	str	r1, [r3, #0]
 800f7be:	2e00      	cmp	r6, #0
 800f7c0:	d176      	bne.n	800f8b0 <SpiFlashStore::Init()+0x124>
 800f7c2:	4c3e      	ldr	r4, [pc, #248]	; (800f8bc <SpiFlashStore::Init()+0x130>)
 800f7c4:	ab03      	add	r3, sp, #12
 800f7c6:	9300      	str	r3, [sp, #0]
 800f7c8:	462a      	mov	r2, r5
 800f7ca:	4623      	mov	r3, r4
 800f7cc:	f8d8 0000 	ldr.w	r0, [r8]
 800f7d0:	f000 fca7 	bl	8010122 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>
 800f7d4:	7823      	ldrb	r3, [r4, #0]
 800f7d6:	2b41      	cmp	r3, #65	; 0x41
 800f7d8:	bf1c      	itt	ne
 800f7da:	2341      	movne	r3, #65	; 0x41
 800f7dc:	7023      	strbne	r3, [r4, #0]
 800f7de:	7863      	ldrb	r3, [r4, #1]
 800f7e0:	bf14      	ite	ne
 800f7e2:	4635      	movne	r5, r6
 800f7e4:	2501      	moveq	r5, #1
 800f7e6:	2b76      	cmp	r3, #118	; 0x76
 800f7e8:	bf1c      	itt	ne
 800f7ea:	2376      	movne	r3, #118	; 0x76
 800f7ec:	7063      	strbne	r3, [r4, #1]
 800f7ee:	78a3      	ldrb	r3, [r4, #2]
 800f7f0:	bf18      	it	ne
 800f7f2:	2500      	movne	r5, #0
 800f7f4:	2b56      	cmp	r3, #86	; 0x56
 800f7f6:	bf1c      	itt	ne
 800f7f8:	2356      	movne	r3, #86	; 0x56
 800f7fa:	70a3      	strbne	r3, [r4, #2]
 800f7fc:	78e3      	ldrb	r3, [r4, #3]
 800f7fe:	bf18      	it	ne
 800f800:	2500      	movne	r5, #0
 800f802:	2b10      	cmp	r3, #16
 800f804:	d01c      	beq.n	800f840 <SpiFlashStore::Init()+0xb4>
 800f806:	2310      	movs	r3, #16
 800f808:	70e3      	strb	r3, [r4, #3]
 800f80a:	2201      	movs	r2, #1
 800f80c:	2500      	movs	r5, #0
 800f80e:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800f812:	4b2b      	ldr	r3, [pc, #172]	; (800f8c0 <SpiFlashStore::Init()+0x134>)
 800f814:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800f8c4 <SpiFlashStore::Init()+0x138>
 800f818:	701a      	strb	r2, [r3, #0]
 800f81a:	4631      	mov	r1, r6
 800f81c:	4638      	mov	r0, r7
 800f81e:	f7ff ffa7 	bl	800f770 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800f822:	1823      	adds	r3, r4, r0
 800f824:	5425      	strb	r5, [r4, r0]
 800f826:	705d      	strb	r5, [r3, #1]
 800f828:	709d      	strb	r5, [r3, #2]
 800f82a:	70dd      	strb	r5, [r3, #3]
 800f82c:	f858 3b04 	ldr.w	r3, [r8], #4
 800f830:	1d02      	adds	r2, r0, #4
 800f832:	4403      	add	r3, r0
 800f834:	4293      	cmp	r3, r2
 800f836:	d931      	bls.n	800f89c <SpiFlashStore::Init()+0x110>
 800f838:	f804 9002 	strb.w	r9, [r4, r2]
 800f83c:	3201      	adds	r2, #1
 800f83e:	e7f9      	b.n	800f834 <SpiFlashStore::Init()+0xa8>
 800f840:	2d00      	cmp	r5, #0
 800f842:	d0e2      	beq.n	800f80a <SpiFlashStore::Init()+0x7e>
 800f844:	f04f 0900 	mov.w	r9, #0
 800f848:	46c8      	mov	r8, r9
 800f84a:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800f8c8 <SpiFlashStore::Init()+0x13c>
 800f84e:	f8da b000 	ldr.w	fp, [sl]
 800f852:	4631      	mov	r1, r6
 800f854:	4638      	mov	r0, r7
 800f856:	f7ff ff8b 	bl	800f770 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800f85a:	5c23      	ldrb	r3, [r4, r0]
 800f85c:	2bff      	cmp	r3, #255	; 0xff
 800f85e:	d114      	bne.n	800f88a <SpiFlashStore::Init()+0xfe>
 800f860:	1823      	adds	r3, r4, r0
 800f862:	785a      	ldrb	r2, [r3, #1]
 800f864:	2aff      	cmp	r2, #255	; 0xff
 800f866:	d110      	bne.n	800f88a <SpiFlashStore::Init()+0xfe>
 800f868:	789a      	ldrb	r2, [r3, #2]
 800f86a:	2aff      	cmp	r2, #255	; 0xff
 800f86c:	d10d      	bne.n	800f88a <SpiFlashStore::Init()+0xfe>
 800f86e:	78da      	ldrb	r2, [r3, #3]
 800f870:	2aff      	cmp	r2, #255	; 0xff
 800f872:	d10a      	bne.n	800f88a <SpiFlashStore::Init()+0xfe>
 800f874:	46a9      	mov	r9, r5
 800f876:	f04f 0b01 	mov.w	fp, #1
 800f87a:	f804 8000 	strb.w	r8, [r4, r0]
 800f87e:	f883 8001 	strb.w	r8, [r3, #1]
 800f882:	f883 8002 	strb.w	r8, [r3, #2]
 800f886:	f883 8003 	strb.w	r8, [r3, #3]
 800f88a:	3601      	adds	r6, #1
 800f88c:	2e1c      	cmp	r6, #28
 800f88e:	d1e0      	bne.n	800f852 <SpiFlashStore::Init()+0xc6>
 800f890:	f1b9 0f00 	cmp.w	r9, #0
 800f894:	d008      	beq.n	800f8a8 <SpiFlashStore::Init()+0x11c>
 800f896:	f8ca b000 	str.w	fp, [sl]
 800f89a:	e005      	b.n	800f8a8 <SpiFlashStore::Init()+0x11c>
 800f89c:	3601      	adds	r6, #1
 800f89e:	2e1c      	cmp	r6, #28
 800f8a0:	d1bb      	bne.n	800f81a <SpiFlashStore::Init()+0x8e>
 800f8a2:	2501      	movs	r5, #1
 800f8a4:	4b08      	ldr	r3, [pc, #32]	; (800f8c8 <SpiFlashStore::Init()+0x13c>)
 800f8a6:	601d      	str	r5, [r3, #0]
 800f8a8:	4628      	mov	r0, r5
 800f8aa:	b005      	add	sp, #20
 800f8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8b0:	2500      	movs	r5, #0
 800f8b2:	e7f9      	b.n	800f8a8 <SpiFlashStore::Init()+0x11c>
 800f8b4:	200029b8 			; <UNDEFINED> instruction: 0x200029b8
 800f8b8:	2000298c 	andcs	r2, r0, ip, lsl #19
 800f8bc:	2000198c 	andcs	r1, r0, ip, lsl #19
 800f8c0:	200029a0 	andcs	r2, r0, r0, lsr #19
 800f8c4:	08017fbc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r8, r9, sl, fp, ip, sp, lr}
 800f8c8:	20002998 	mulcs	r0, r8, r9

0800f8cc <SpiFlashStore::SpiFlashStore()>:
 800f8cc:	b538      	push	{r3, r4, r5, lr}
 800f8ce:	4b0d      	ldr	r3, [pc, #52]	; (800f904 <SpiFlashStore::SpiFlashStore()+0x38>)
 800f8d0:	4604      	mov	r4, r0
 800f8d2:	6018      	str	r0, [r3, #0]
 800f8d4:	4b0c      	ldr	r3, [pc, #48]	; (800f908 <SpiFlashStore::SpiFlashStore()+0x3c>)
 800f8d6:	4d0d      	ldr	r5, [pc, #52]	; (800f90c <SpiFlashStore::SpiFlashStore()+0x40>)
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	781b      	ldrb	r3, [r3, #0]
 800f8dc:	b113      	cbz	r3, 800f8e4 <SpiFlashStore::SpiFlashStore()+0x18>
 800f8de:	f7ff ff55 	bl	800f78c <SpiFlashStore::Init()>
 800f8e2:	7028      	strb	r0, [r5, #0]
 800f8e4:	782b      	ldrb	r3, [r5, #0]
 800f8e6:	b153      	cbz	r3, 800f8fe <SpiFlashStore::SpiFlashStore()+0x32>
 800f8e8:	2320      	movs	r3, #32
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	4908      	ldr	r1, [pc, #32]	; (800f910 <SpiFlashStore::SpiFlashStore()+0x44>)
 800f8ee:	f851 0b04 	ldr.w	r0, [r1], #4
 800f8f2:	3201      	adds	r2, #1
 800f8f4:	2a1c      	cmp	r2, #28
 800f8f6:	4403      	add	r3, r0
 800f8f8:	d1f9      	bne.n	800f8ee <SpiFlashStore::SpiFlashStore()+0x22>
 800f8fa:	4a06      	ldr	r2, [pc, #24]	; (800f914 <SpiFlashStore::SpiFlashStore()+0x48>)
 800f8fc:	6013      	str	r3, [r2, #0]
 800f8fe:	4620      	mov	r0, r4
 800f900:	bd38      	pop	{r3, r4, r5, pc}
 800f902:	bf00      	nop
 800f904:	2000299c 	mulcs	r0, ip, r9
 800f908:	200029b8 			; <UNDEFINED> instruction: 0x200029b8
 800f90c:	20002990 	mulcs	r0, r0, r9
 800f910:	08017fbc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r8, r9, sl, fp, ip, sp, lr}
 800f914:	20002994 	mulcs	r0, r4, r9

0800f918 <SpiFlashStore::ResetSetList(spiflashstore::Store)>:
 800f918:	b508      	push	{r3, lr}
 800f91a:	f7ff ff29 	bl	800f770 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800f91e:	2300      	movs	r3, #0
 800f920:	4904      	ldr	r1, [pc, #16]	; (800f934 <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x1c>)
 800f922:	1842      	adds	r2, r0, r1
 800f924:	540b      	strb	r3, [r1, r0]
 800f926:	7053      	strb	r3, [r2, #1]
 800f928:	7093      	strb	r3, [r2, #2]
 800f92a:	70d3      	strb	r3, [r2, #3]
 800f92c:	2201      	movs	r2, #1
 800f92e:	4b02      	ldr	r3, [pc, #8]	; (800f938 <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x20>)
 800f930:	601a      	str	r2, [r3, #0]
 800f932:	bd08      	pop	{r3, pc}
 800f934:	2000198c 	andcs	r1, r0, ip, lsl #19
 800f938:	20002998 	mulcs	r0, r8, r9

0800f93c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>:
 800f93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f940:	461c      	mov	r4, r3
 800f942:	4b19      	ldr	r3, [pc, #100]	; (800f9a8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x6c>)
 800f944:	4615      	mov	r5, r2
 800f946:	781f      	ldrb	r7, [r3, #0]
 800f948:	9e07      	ldr	r6, [sp, #28]
 800f94a:	b35f      	cbz	r7, 800f9a4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x68>
 800f94c:	f7ff ff10 	bl	800f770 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800f950:	f04f 0c00 	mov.w	ip, #0
 800f954:	4a15      	ldr	r2, [pc, #84]	; (800f9ac <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x70>)
 800f956:	1941      	adds	r1, r0, r5
 800f958:	1e63      	subs	r3, r4, #1
 800f95a:	9c06      	ldr	r4, [sp, #24]
 800f95c:	4411      	add	r1, r2
 800f95e:	440c      	add	r4, r1
 800f960:	42a1      	cmp	r1, r4
 800f962:	d00a      	beq.n	800f97a <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x3e>
 800f964:	f891 8000 	ldrb.w	r8, [r1]
 800f968:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800f96c:	3101      	adds	r1, #1
 800f96e:	45f0      	cmp	r8, lr
 800f970:	bf1c      	itt	ne
 800f972:	f801 ec01 	strbne.w	lr, [r1, #-1]
 800f976:	46bc      	movne	ip, r7
 800f978:	e7f2      	b.n	800f960 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x24>
 800f97a:	f1bc 0f00 	cmp.w	ip, #0
 800f97e:	d011      	beq.n	800f9a4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x68>
 800f980:	4b0b      	ldr	r3, [pc, #44]	; (800f9b0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x74>)
 800f982:	6819      	ldr	r1, [r3, #0]
 800f984:	b109      	cbz	r1, 800f98a <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x4e>
 800f986:	2906      	cmp	r1, #6
 800f988:	d101      	bne.n	800f98e <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800f98a:	2101      	movs	r1, #1
 800f98c:	6019      	str	r1, [r3, #0]
 800f98e:	4b09      	ldr	r3, [pc, #36]	; (800f9b4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x78>)
 800f990:	6819      	ldr	r1, [r3, #0]
 800f992:	4b09      	ldr	r3, [pc, #36]	; (800f9b8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x7c>)
 800f994:	6019      	str	r1, [r3, #0]
 800f996:	b12d      	cbz	r5, 800f9a4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x68>
 800f998:	b126      	cbz	r6, 800f9a4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x68>
 800f99a:	9b08      	ldr	r3, [sp, #32]
 800f99c:	4418      	add	r0, r3
 800f99e:	5813      	ldr	r3, [r2, r0]
 800f9a0:	4333      	orrs	r3, r6
 800f9a2:	5013      	str	r3, [r2, r0]
 800f9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9a8:	20002990 	mulcs	r0, r0, r9
 800f9ac:	2000198c 	andcs	r1, r0, ip, lsl #19
 800f9b0:	20002998 	mulcs	r0, r8, r9
 800f9b4:	2000a9dc 	ldrdcs	sl, [r0], -ip
 800f9b8:	20001988 	andcs	r1, r0, r8, lsl #19

0800f9bc <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>:
 800f9bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f9c0:	461d      	mov	r5, r3
 800f9c2:	4b15      	ldr	r3, [pc, #84]	; (800fa18 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x5c>)
 800f9c4:	b085      	sub	sp, #20
 800f9c6:	781b      	ldrb	r3, [r3, #0]
 800f9c8:	4607      	mov	r7, r0
 800f9ca:	4688      	mov	r8, r1
 800f9cc:	4614      	mov	r4, r2
 800f9ce:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800f9d2:	b1eb      	cbz	r3, 800fa10 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x54>
 800f9d4:	f7ff fecc 	bl	800f770 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800f9d8:	4910      	ldr	r1, [pc, #64]	; (800fa1c <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x60>)
 800f9da:	4a11      	ldr	r2, [pc, #68]	; (800fa20 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x64>)
 800f9dc:	7809      	ldrb	r1, [r1, #0]
 800f9de:	eb00 0309 	add.w	r3, r0, r9
 800f9e2:	189e      	adds	r6, r3, r2
 800f9e4:	b951      	cbnz	r1, 800f9fc <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x40>
 800f9e6:	589b      	ldr	r3, [r3, r2]
 800f9e8:	b143      	cbz	r3, 800f9fc <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x40>
 800f9ea:	3c01      	subs	r4, #1
 800f9ec:	4435      	add	r5, r6
 800f9ee:	42b5      	cmp	r5, r6
 800f9f0:	d00e      	beq.n	800fa10 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x54>
 800f9f2:	f816 3b01 	ldrb.w	r3, [r6], #1
 800f9f6:	f804 3f01 	strb.w	r3, [r4, #1]!
 800f9fa:	e7f8      	b.n	800f9ee <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x32>
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	464a      	mov	r2, r9
 800fa00:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800fa04:	4641      	mov	r1, r8
 800fa06:	4623      	mov	r3, r4
 800fa08:	4638      	mov	r0, r7
 800fa0a:	9500      	str	r5, [sp, #0]
 800fa0c:	f7ff ff96 	bl	800f93c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fa10:	b005      	add	sp, #20
 800fa12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa16:	bf00      	nop
 800fa18:	20002990 	mulcs	r0, r0, r9
 800fa1c:	200029a0 	andcs	r2, r0, r0, lsr #19
 800fa20:	2000198c 	andcs	r1, r0, ip, lsl #19

0800fa24 <SpiFlashStore::Flash()>:
 800fa24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fa26:	4c25      	ldr	r4, [pc, #148]	; (800fabc <SpiFlashStore::Flash()+0x98>)
 800fa28:	6820      	ldr	r0, [r4, #0]
 800fa2a:	2800      	cmp	r0, #0
 800fa2c:	d043      	beq.n	800fab6 <SpiFlashStore::Flash()+0x92>
 800fa2e:	3801      	subs	r0, #1
 800fa30:	2805      	cmp	r0, #5
 800fa32:	d831      	bhi.n	800fa98 <SpiFlashStore::Flash()+0x74>
 800fa34:	e8df f000 	tbb	[pc, r0]
 800fa38:	2e140b03 	vnmlscs.f64	d0, d4, d3
 800fa3c:	4b203025 	blmi	881bad8 <__exidx_end+0x802f18>
 800fa40:	681a      	ldr	r2, [r3, #0]
 800fa42:	4b20      	ldr	r3, [pc, #128]	; (800fac4 <SpiFlashStore::Flash()+0xa0>)
 800fa44:	601a      	str	r2, [r3, #0]
 800fa46:	2302      	movs	r3, #2
 800fa48:	6023      	str	r3, [r4, #0]
 800fa4a:	2001      	movs	r0, #1
 800fa4c:	e033      	b.n	800fab6 <SpiFlashStore::Flash()+0x92>
 800fa4e:	4b1c      	ldr	r3, [pc, #112]	; (800fac0 <SpiFlashStore::Flash()+0x9c>)
 800fa50:	4a1c      	ldr	r2, [pc, #112]	; (800fac4 <SpiFlashStore::Flash()+0xa0>)
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	6812      	ldr	r2, [r2, #0]
 800fa56:	1a9b      	subs	r3, r3, r2
 800fa58:	2b63      	cmp	r3, #99	; 0x63
 800fa5a:	d9f6      	bls.n	800fa4a <SpiFlashStore::Flash()+0x26>
 800fa5c:	2303      	movs	r3, #3
 800fa5e:	e7f3      	b.n	800fa48 <SpiFlashStore::Flash()+0x24>
 800fa60:	4919      	ldr	r1, [pc, #100]	; (800fac8 <SpiFlashStore::Flash()+0xa4>)
 800fa62:	481a      	ldr	r0, [pc, #104]	; (800facc <SpiFlashStore::Flash()+0xa8>)
 800fa64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fa68:	6809      	ldr	r1, [r1, #0]
 800fa6a:	6800      	ldr	r0, [r0, #0]
 800fa6c:	ab03      	add	r3, sp, #12
 800fa6e:	f000 fb67 	bl	8010140 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>
 800fa72:	2800      	cmp	r0, #0
 800fa74:	d0e9      	beq.n	800fa4a <SpiFlashStore::Flash()+0x26>
 800fa76:	4b12      	ldr	r3, [pc, #72]	; (800fac0 <SpiFlashStore::Flash()+0x9c>)
 800fa78:	681a      	ldr	r2, [r3, #0]
 800fa7a:	4b12      	ldr	r3, [pc, #72]	; (800fac4 <SpiFlashStore::Flash()+0xa0>)
 800fa7c:	601a      	str	r2, [r3, #0]
 800fa7e:	2305      	movs	r3, #5
 800fa80:	e7e2      	b.n	800fa48 <SpiFlashStore::Flash()+0x24>
 800fa82:	4b0f      	ldr	r3, [pc, #60]	; (800fac0 <SpiFlashStore::Flash()+0x9c>)
 800fa84:	4a0f      	ldr	r2, [pc, #60]	; (800fac4 <SpiFlashStore::Flash()+0xa0>)
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	6812      	ldr	r2, [r2, #0]
 800fa8a:	1a9b      	subs	r3, r3, r2
 800fa8c:	2b63      	cmp	r3, #99	; 0x63
 800fa8e:	d9dc      	bls.n	800fa4a <SpiFlashStore::Flash()+0x26>
 800fa90:	2304      	movs	r3, #4
 800fa92:	e7d9      	b.n	800fa48 <SpiFlashStore::Flash()+0x24>
 800fa94:	2306      	movs	r3, #6
 800fa96:	e7d7      	b.n	800fa48 <SpiFlashStore::Flash()+0x24>
 800fa98:	ab03      	add	r3, sp, #12
 800fa9a:	4a0d      	ldr	r2, [pc, #52]	; (800fad0 <SpiFlashStore::Flash()+0xac>)
 800fa9c:	490a      	ldr	r1, [pc, #40]	; (800fac8 <SpiFlashStore::Flash()+0xa4>)
 800fa9e:	480b      	ldr	r0, [pc, #44]	; (800facc <SpiFlashStore::Flash()+0xa8>)
 800faa0:	9300      	str	r3, [sp, #0]
 800faa2:	6812      	ldr	r2, [r2, #0]
 800faa4:	4b0b      	ldr	r3, [pc, #44]	; (800fad4 <SpiFlashStore::Flash()+0xb0>)
 800faa6:	6809      	ldr	r1, [r1, #0]
 800faa8:	6800      	ldr	r0, [r0, #0]
 800faaa:	f000 fbe9 	bl	8010280 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>
 800faae:	2800      	cmp	r0, #0
 800fab0:	d0cb      	beq.n	800fa4a <SpiFlashStore::Flash()+0x26>
 800fab2:	2000      	movs	r0, #0
 800fab4:	6020      	str	r0, [r4, #0]
 800fab6:	b004      	add	sp, #16
 800fab8:	bd10      	pop	{r4, pc}
 800faba:	bf00      	nop
 800fabc:	20002998 	mulcs	r0, r8, r9
 800fac0:	2000a9dc 	ldrdcs	sl, [r0], -ip
 800fac4:	20001988 	andcs	r1, r0, r8, lsl #19
 800fac8:	2000298c 	andcs	r2, r0, ip, lsl #19
 800facc:	200029b8 			; <UNDEFINED> instruction: 0x200029b8
 800fad0:	20002994 	mulcs	r0, r4, r9
 800fad4:	2000198c 	andcs	r1, r0, ip, lsl #19

0800fad8 <StoreArtNet::~StoreArtNet()>:
 800fad8:	4770      	bx	lr

0800fada <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 800fada:	3804      	subs	r0, #4
 800fadc:	4770      	bx	lr
	...

0800fae0 <StoreArtNet::Update(artnetparams::Params const*)>:
 800fae0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fae2:	2200      	movs	r2, #0
 800fae4:	460b      	mov	r3, r1
 800fae6:	2187      	movs	r1, #135	; 0x87
 800fae8:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800faec:	4804      	ldr	r0, [pc, #16]	; (800fb00 <StoreArtNet::Update(artnetparams::Params const*)+0x20>)
 800faee:	9100      	str	r1, [sp, #0]
 800faf0:	6800      	ldr	r0, [r0, #0]
 800faf2:	2101      	movs	r1, #1
 800faf4:	f7ff ff22 	bl	800f93c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800faf8:	b005      	add	sp, #20
 800fafa:	f85d fb04 	ldr.w	pc, [sp], #4
 800fafe:	bf00      	nop
 800fb00:	2000299c 	mulcs	r0, ip, r9

0800fb04 <StoreArtNet::SaveShortName(char const*)>:
 800fb04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fb06:	460b      	mov	r3, r1
 800fb08:	2202      	movs	r2, #2
 800fb0a:	2100      	movs	r1, #0
 800fb0c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800fb10:	2212      	movs	r2, #18
 800fb12:	4805      	ldr	r0, [pc, #20]	; (800fb28 <StoreArtNet::SaveShortName(char const*)+0x24>)
 800fb14:	9200      	str	r2, [sp, #0]
 800fb16:	2101      	movs	r1, #1
 800fb18:	220c      	movs	r2, #12
 800fb1a:	6800      	ldr	r0, [r0, #0]
 800fb1c:	f7ff ff0e 	bl	800f93c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fb20:	b005      	add	sp, #20
 800fb22:	f85d fb04 	ldr.w	pc, [sp], #4
 800fb26:	bf00      	nop
 800fb28:	2000299c 	mulcs	r0, ip, r9

0800fb2c <non-virtual thunk to StoreArtNet::SaveShortName(char const*)>:
 800fb2c:	f1a0 0004 	sub.w	r0, r0, #4
 800fb30:	f7ff bfe8 	b.w	800fb04 <StoreArtNet::SaveShortName(char const*)>

0800fb34 <StoreArtNet::SaveLongName(char const*)>:
 800fb34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fb36:	460b      	mov	r3, r1
 800fb38:	2200      	movs	r2, #0
 800fb3a:	2101      	movs	r1, #1
 800fb3c:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800fb40:	2240      	movs	r2, #64	; 0x40
 800fb42:	4804      	ldr	r0, [pc, #16]	; (800fb54 <StoreArtNet::SaveLongName(char const*)+0x20>)
 800fb44:	9200      	str	r2, [sp, #0]
 800fb46:	6800      	ldr	r0, [r0, #0]
 800fb48:	221e      	movs	r2, #30
 800fb4a:	f7ff fef7 	bl	800f93c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fb4e:	b005      	add	sp, #20
 800fb50:	f85d fb04 	ldr.w	pc, [sp], #4
 800fb54:	2000299c 	mulcs	r0, ip, r9

0800fb58 <non-virtual thunk to StoreArtNet::SaveLongName(char const*)>:
 800fb58:	f1a0 0004 	sub.w	r0, r0, #4
 800fb5c:	f7ff bfea 	b.w	800fb34 <StoreArtNet::SaveLongName(char const*)>

0800fb60 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 800fb60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800fb62:	2300      	movs	r3, #0
 800fb64:	9302      	str	r3, [sp, #8]
 800fb66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fb6a:	4608      	mov	r0, r1
 800fb6c:	408b      	lsls	r3, r1
 800fb6e:	2101      	movs	r1, #1
 800fb70:	f88d 2017 	strb.w	r2, [sp, #23]
 800fb74:	f100 0267 	add.w	r2, r0, #103	; 0x67
 800fb78:	4805      	ldr	r0, [pc, #20]	; (800fb90 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x30>)
 800fb7a:	9301      	str	r3, [sp, #4]
 800fb7c:	9100      	str	r1, [sp, #0]
 800fb7e:	6800      	ldr	r0, [r0, #0]
 800fb80:	f10d 0317 	add.w	r3, sp, #23
 800fb84:	f7ff feda 	bl	800f93c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fb88:	b007      	add	sp, #28
 800fb8a:	f85d fb04 	ldr.w	pc, [sp], #4
 800fb8e:	bf00      	nop
 800fb90:	2000299c 	mulcs	r0, ip, r9

0800fb94 <non-virtual thunk to StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 800fb94:	f1a0 0004 	sub.w	r0, r0, #4
 800fb98:	f7ff bfe2 	b.w	800fb60 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>

0800fb9c <StoreArtNet::SaveNetSwitch(unsigned char)>:
 800fb9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800fb9e:	2204      	movs	r2, #4
 800fba0:	2300      	movs	r3, #0
 800fba2:	f88d 1017 	strb.w	r1, [sp, #23]
 800fba6:	2101      	movs	r1, #1
 800fba8:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800fbac:	4804      	ldr	r0, [pc, #16]	; (800fbc0 <StoreArtNet::SaveNetSwitch(unsigned char)+0x24>)
 800fbae:	9100      	str	r1, [sp, #0]
 800fbb0:	6800      	ldr	r0, [r0, #0]
 800fbb2:	f10d 0317 	add.w	r3, sp, #23
 800fbb6:	f7ff fec1 	bl	800f93c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fbba:	b007      	add	sp, #28
 800fbbc:	f85d fb04 	ldr.w	pc, [sp], #4
 800fbc0:	2000299c 	mulcs	r0, ip, r9

0800fbc4 <non-virtual thunk to StoreArtNet::SaveNetSwitch(unsigned char)>:
 800fbc4:	f1a0 0004 	sub.w	r0, r0, #4
 800fbc8:	f7ff bfe8 	b.w	800fb9c <StoreArtNet::SaveNetSwitch(unsigned char)>

0800fbcc <StoreArtNet::SaveSubnetSwitch(unsigned char)>:
 800fbcc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800fbce:	2308      	movs	r3, #8
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	f88d 1017 	strb.w	r1, [sp, #23]
 800fbd6:	2101      	movs	r1, #1
 800fbd8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800fbdc:	4805      	ldr	r0, [pc, #20]	; (800fbf4 <StoreArtNet::SaveSubnetSwitch(unsigned char)+0x28>)
 800fbde:	9100      	str	r1, [sp, #0]
 800fbe0:	2205      	movs	r2, #5
 800fbe2:	6800      	ldr	r0, [r0, #0]
 800fbe4:	f10d 0317 	add.w	r3, sp, #23
 800fbe8:	f7ff fea8 	bl	800f93c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fbec:	b007      	add	sp, #28
 800fbee:	f85d fb04 	ldr.w	pc, [sp], #4
 800fbf2:	bf00      	nop
 800fbf4:	2000299c 	mulcs	r0, ip, r9

0800fbf8 <non-virtual thunk to StoreArtNet::SaveSubnetSwitch(unsigned char)>:
 800fbf8:	f1a0 0004 	sub.w	r0, r0, #4
 800fbfc:	f7ff bfe6 	b.w	800fbcc <StoreArtNet::SaveSubnetSwitch(unsigned char)>

0800fc00 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 800fc00:	b530      	push	{r4, r5, lr}
 800fc02:	b087      	sub	sp, #28
 800fc04:	460c      	mov	r4, r1
 800fc06:	4d0f      	ldr	r5, [pc, #60]	; (800fc44 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x44>)
 800fc08:	9205      	str	r2, [sp, #20]
 800fc0a:	b951      	cbnz	r1, 800fc22 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x22>
 800fc0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800fc10:	9102      	str	r1, [sp, #8]
 800fc12:	2101      	movs	r1, #1
 800fc14:	226b      	movs	r2, #107	; 0x6b
 800fc16:	e9cd 1300 	strd	r1, r3, [sp]
 800fc1a:	6828      	ldr	r0, [r5, #0]
 800fc1c:	ab05      	add	r3, sp, #20
 800fc1e:	f7ff fe8d 	bl	800f93c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fc22:	2300      	movs	r3, #0
 800fc24:	9302      	str	r3, [sp, #8]
 800fc26:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800fc2a:	2101      	movs	r1, #1
 800fc2c:	40a3      	lsls	r3, r4
 800fc2e:	9301      	str	r3, [sp, #4]
 800fc30:	6828      	ldr	r0, [r5, #0]
 800fc32:	9100      	str	r1, [sp, #0]
 800fc34:	ab05      	add	r3, sp, #20
 800fc36:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 800fc3a:	f7ff fe7f 	bl	800f93c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fc3e:	b007      	add	sp, #28
 800fc40:	bd30      	pop	{r4, r5, pc}
 800fc42:	bf00      	nop
 800fc44:	2000299c 	mulcs	r0, ip, r9

0800fc48 <non-virtual thunk to StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 800fc48:	f1a0 0004 	sub.w	r0, r0, #4
 800fc4c:	f7ff bfd8 	b.w	800fc00 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>

0800fc50 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 800fc50:	b530      	push	{r4, r5, lr}
 800fc52:	b087      	sub	sp, #28
 800fc54:	460c      	mov	r4, r1
 800fc56:	4d0f      	ldr	r5, [pc, #60]	; (800fc94 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x44>)
 800fc58:	9205      	str	r2, [sp, #20]
 800fc5a:	b951      	cbnz	r1, 800fc72 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x22>
 800fc5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800fc60:	9102      	str	r1, [sp, #8]
 800fc62:	2101      	movs	r1, #1
 800fc64:	2270      	movs	r2, #112	; 0x70
 800fc66:	e9cd 1300 	strd	r1, r3, [sp]
 800fc6a:	6828      	ldr	r0, [r5, #0]
 800fc6c:	ab05      	add	r3, sp, #20
 800fc6e:	f7ff fe65 	bl	800f93c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fc72:	2300      	movs	r3, #0
 800fc74:	9302      	str	r3, [sp, #8]
 800fc76:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fc7a:	2101      	movs	r1, #1
 800fc7c:	40a3      	lsls	r3, r4
 800fc7e:	9301      	str	r3, [sp, #4]
 800fc80:	6828      	ldr	r0, [r5, #0]
 800fc82:	9100      	str	r1, [sp, #0]
 800fc84:	ab05      	add	r3, sp, #20
 800fc86:	f104 0271 	add.w	r2, r4, #113	; 0x71
 800fc8a:	f7ff fe57 	bl	800f93c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fc8e:	b007      	add	sp, #28
 800fc90:	bd30      	pop	{r4, r5, pc}
 800fc92:	bf00      	nop
 800fc94:	2000299c 	mulcs	r0, ip, r9

0800fc98 <non-virtual thunk to StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 800fc98:	f1a0 0004 	sub.w	r0, r0, #4
 800fc9c:	f7ff bfd8 	b.w	800fc50 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>

0800fca0 <StoreArtNet::~StoreArtNet()>:
 800fca0:	b510      	push	{r4, lr}
 800fca2:	4604      	mov	r4, r0
 800fca4:	f004 fc8e 	bl	80145c4 <operator delete(void*)>
 800fca8:	4620      	mov	r0, r4
 800fcaa:	bd10      	pop	{r4, pc}

0800fcac <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 800fcac:	f1a0 0004 	sub.w	r0, r0, #4
 800fcb0:	e7f6      	b.n	800fca0 <StoreArtNet::~StoreArtNet()>
	...

0800fcb4 <StoreArtNet::Copy(artnetparams::Params*)>:
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	b507      	push	{r0, r1, r2, lr}
 800fcb8:	4805      	ldr	r0, [pc, #20]	; (800fcd0 <StoreArtNet::Copy(artnetparams::Params*)+0x1c>)
 800fcba:	9300      	str	r3, [sp, #0]
 800fcbc:	460a      	mov	r2, r1
 800fcbe:	2387      	movs	r3, #135	; 0x87
 800fcc0:	2101      	movs	r1, #1
 800fcc2:	6800      	ldr	r0, [r0, #0]
 800fcc4:	f7ff fe7a 	bl	800f9bc <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800fcc8:	b003      	add	sp, #12
 800fcca:	f85d fb04 	ldr.w	pc, [sp], #4
 800fcce:	bf00      	nop
 800fcd0:	2000299c 	mulcs	r0, ip, r9

0800fcd4 <StoreArtNet::StoreArtNet()>:
 800fcd4:	4a04      	ldr	r2, [pc, #16]	; (800fce8 <StoreArtNet::StoreArtNet()+0x14>)
 800fcd6:	f102 0108 	add.w	r1, r2, #8
 800fcda:	323c      	adds	r2, #60	; 0x3c
 800fcdc:	6042      	str	r2, [r0, #4]
 800fcde:	4a03      	ldr	r2, [pc, #12]	; (800fcec <StoreArtNet::StoreArtNet()+0x18>)
 800fce0:	6001      	str	r1, [r0, #0]
 800fce2:	6010      	str	r0, [r2, #0]
 800fce4:	4770      	bx	lr
 800fce6:	bf00      	nop
 800fce8:	0801802c 	stmdaeq	r1, {r2, r3, r5, pc}
 800fcec:	200029a4 	andcs	r2, r0, r4, lsr #19

0800fcf0 <StoreDisplayUdf::~StoreDisplayUdf()>:
 800fcf0:	4770      	bx	lr
	...

0800fcf4 <StoreDisplayUdf::Copy(displayudfparams::Params*)>:
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	b507      	push	{r0, r1, r2, lr}
 800fcf8:	4805      	ldr	r0, [pc, #20]	; (800fd10 <StoreDisplayUdf::Copy(displayudfparams::Params*)+0x1c>)
 800fcfa:	9300      	str	r3, [sp, #0]
 800fcfc:	460a      	mov	r2, r1
 800fcfe:	2322      	movs	r3, #34	; 0x22
 800fd00:	210f      	movs	r1, #15
 800fd02:	6800      	ldr	r0, [r0, #0]
 800fd04:	f7ff fe5a 	bl	800f9bc <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800fd08:	b003      	add	sp, #12
 800fd0a:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd0e:	bf00      	nop
 800fd10:	2000299c 	mulcs	r0, ip, r9

0800fd14 <StoreDisplayUdf::Update(displayudfparams::Params const*)>:
 800fd14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd16:	2200      	movs	r2, #0
 800fd18:	460b      	mov	r3, r1
 800fd1a:	2122      	movs	r1, #34	; 0x22
 800fd1c:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800fd20:	4804      	ldr	r0, [pc, #16]	; (800fd34 <StoreDisplayUdf::Update(displayudfparams::Params const*)+0x20>)
 800fd22:	9100      	str	r1, [sp, #0]
 800fd24:	6800      	ldr	r0, [r0, #0]
 800fd26:	210f      	movs	r1, #15
 800fd28:	f7ff fe08 	bl	800f93c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fd2c:	b005      	add	sp, #20
 800fd2e:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd32:	bf00      	nop
 800fd34:	2000299c 	mulcs	r0, ip, r9

0800fd38 <StoreDisplayUdf::~StoreDisplayUdf()>:
 800fd38:	b510      	push	{r4, lr}
 800fd3a:	4604      	mov	r4, r0
 800fd3c:	f004 fc42 	bl	80145c4 <operator delete(void*)>
 800fd40:	4620      	mov	r0, r4
 800fd42:	bd10      	pop	{r4, pc}

0800fd44 <StoreDisplayUdf::StoreDisplayUdf()>:
 800fd44:	4a02      	ldr	r2, [pc, #8]	; (800fd50 <StoreDisplayUdf::StoreDisplayUdf()+0xc>)
 800fd46:	6002      	str	r2, [r0, #0]
 800fd48:	4a02      	ldr	r2, [pc, #8]	; (800fd54 <StoreDisplayUdf::StoreDisplayUdf()+0x10>)
 800fd4a:	6010      	str	r0, [r2, #0]
 800fd4c:	4770      	bx	lr
 800fd4e:	bf00      	nop
 800fd50:	08018094 	stmdaeq	r1, {r2, r4, r7, pc}
 800fd54:	200029a8 	andcs	r2, r0, r8, lsr #19

0800fd58 <StoreNetwork::~StoreNetwork()>:
 800fd58:	4770      	bx	lr

0800fd5a <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 800fd5a:	3804      	subs	r0, #4
 800fd5c:	4770      	bx	lr
	...

0800fd60 <StoreNetwork::Update(TNetworkParams const*)>:
 800fd60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd62:	2200      	movs	r2, #0
 800fd64:	460b      	mov	r3, r1
 800fd66:	215e      	movs	r1, #94	; 0x5e
 800fd68:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800fd6c:	4804      	ldr	r0, [pc, #16]	; (800fd80 <StoreNetwork::Update(TNetworkParams const*)+0x20>)
 800fd6e:	9100      	str	r1, [sp, #0]
 800fd70:	6800      	ldr	r0, [r0, #0]
 800fd72:	4611      	mov	r1, r2
 800fd74:	f7ff fde2 	bl	800f93c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fd78:	b005      	add	sp, #20
 800fd7a:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd7e:	bf00      	nop
 800fd80:	2000299c 	mulcs	r0, ip, r9

0800fd84 <StoreNetwork::SaveDhcp(bool)>:
 800fd84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800fd86:	2301      	movs	r3, #1
 800fd88:	f88d 1017 	strb.w	r1, [sp, #23]
 800fd8c:	2100      	movs	r1, #0
 800fd8e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800fd92:	4805      	ldr	r0, [pc, #20]	; (800fda8 <StoreNetwork::SaveDhcp(bool)+0x24>)
 800fd94:	9300      	str	r3, [sp, #0]
 800fd96:	2214      	movs	r2, #20
 800fd98:	6800      	ldr	r0, [r0, #0]
 800fd9a:	f10d 0317 	add.w	r3, sp, #23
 800fd9e:	f7ff fdcd 	bl	800f93c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fda2:	b007      	add	sp, #28
 800fda4:	f85d fb04 	ldr.w	pc, [sp], #4
 800fda8:	2000299c 	mulcs	r0, ip, r9

0800fdac <non-virtual thunk to StoreNetwork::SaveDhcp(bool)>:
 800fdac:	f1a0 0004 	sub.w	r0, r0, #4
 800fdb0:	e7e8      	b.n	800fd84 <StoreNetwork::SaveDhcp(bool)>
 800fdb2:	bf00      	nop

0800fdb4 <StoreNetwork::SaveGatewayIp(unsigned int)>:
 800fdb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800fdb6:	2308      	movs	r3, #8
 800fdb8:	9105      	str	r1, [sp, #20]
 800fdba:	2100      	movs	r1, #0
 800fdbc:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800fdc0:	2304      	movs	r3, #4
 800fdc2:	4805      	ldr	r0, [pc, #20]	; (800fdd8 <StoreNetwork::SaveGatewayIp(unsigned int)+0x24>)
 800fdc4:	9300      	str	r3, [sp, #0]
 800fdc6:	220c      	movs	r2, #12
 800fdc8:	6800      	ldr	r0, [r0, #0]
 800fdca:	ab05      	add	r3, sp, #20
 800fdcc:	f7ff fdb6 	bl	800f93c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fdd0:	b007      	add	sp, #28
 800fdd2:	f85d fb04 	ldr.w	pc, [sp], #4
 800fdd6:	bf00      	nop
 800fdd8:	2000299c 	mulcs	r0, ip, r9

0800fddc <non-virtual thunk to StoreNetwork::SaveGatewayIp(unsigned int)>:
 800fddc:	f1a0 0004 	sub.w	r0, r0, #4
 800fde0:	e7e8      	b.n	800fdb4 <StoreNetwork::SaveGatewayIp(unsigned int)>
 800fde2:	bf00      	nop

0800fde4 <StoreNetwork::SaveNetMask(unsigned int)>:
 800fde4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800fde6:	2304      	movs	r3, #4
 800fde8:	9105      	str	r1, [sp, #20]
 800fdea:	2100      	movs	r1, #0
 800fdec:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800fdf0:	4804      	ldr	r0, [pc, #16]	; (800fe04 <StoreNetwork::SaveNetMask(unsigned int)+0x20>)
 800fdf2:	9300      	str	r3, [sp, #0]
 800fdf4:	2208      	movs	r2, #8
 800fdf6:	6800      	ldr	r0, [r0, #0]
 800fdf8:	ab05      	add	r3, sp, #20
 800fdfa:	f7ff fd9f 	bl	800f93c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fdfe:	b007      	add	sp, #28
 800fe00:	f85d fb04 	ldr.w	pc, [sp], #4
 800fe04:	2000299c 	mulcs	r0, ip, r9

0800fe08 <non-virtual thunk to StoreNetwork::SaveNetMask(unsigned int)>:
 800fe08:	f1a0 0004 	sub.w	r0, r0, #4
 800fe0c:	e7ea      	b.n	800fde4 <StoreNetwork::SaveNetMask(unsigned int)>
 800fe0e:	bf00      	nop

0800fe10 <StoreNetwork::SaveIp(unsigned int)>:
 800fe10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800fe12:	2302      	movs	r3, #2
 800fe14:	9105      	str	r1, [sp, #20]
 800fe16:	2100      	movs	r1, #0
 800fe18:	2204      	movs	r2, #4
 800fe1a:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800fe1e:	4804      	ldr	r0, [pc, #16]	; (800fe30 <StoreNetwork::SaveIp(unsigned int)+0x20>)
 800fe20:	9200      	str	r2, [sp, #0]
 800fe22:	6800      	ldr	r0, [r0, #0]
 800fe24:	ab05      	add	r3, sp, #20
 800fe26:	f7ff fd89 	bl	800f93c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fe2a:	b007      	add	sp, #28
 800fe2c:	f85d fb04 	ldr.w	pc, [sp], #4
 800fe30:	2000299c 	mulcs	r0, ip, r9

0800fe34 <non-virtual thunk to StoreNetwork::SaveIp(unsigned int)>:
 800fe34:	f1a0 0004 	sub.w	r0, r0, #4
 800fe38:	e7ea      	b.n	800fe10 <StoreNetwork::SaveIp(unsigned int)>
 800fe3a:	bf00      	nop

0800fe3c <StoreNetwork::SaveHostName(char const*, unsigned int)>:
 800fe3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fe3e:	460b      	mov	r3, r1
 800fe40:	2020      	movs	r0, #32
 800fe42:	2100      	movs	r1, #0
 800fe44:	2a40      	cmp	r2, #64	; 0x40
 800fe46:	bf28      	it	cs
 800fe48:	2240      	movcs	r2, #64	; 0x40
 800fe4a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800fe4e:	4804      	ldr	r0, [pc, #16]	; (800fe60 <StoreNetwork::SaveHostName(char const*, unsigned int)+0x24>)
 800fe50:	9200      	str	r2, [sp, #0]
 800fe52:	6800      	ldr	r0, [r0, #0]
 800fe54:	2215      	movs	r2, #21
 800fe56:	f7ff fd71 	bl	800f93c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fe5a:	b005      	add	sp, #20
 800fe5c:	f85d fb04 	ldr.w	pc, [sp], #4
 800fe60:	2000299c 	mulcs	r0, ip, r9

0800fe64 <non-virtual thunk to StoreNetwork::SaveHostName(char const*, unsigned int)>:
 800fe64:	f1a0 0004 	sub.w	r0, r0, #4
 800fe68:	e7e8      	b.n	800fe3c <StoreNetwork::SaveHostName(char const*, unsigned int)>
 800fe6a:	bf00      	nop

0800fe6c <StoreNetwork::~StoreNetwork()>:
 800fe6c:	b510      	push	{r4, lr}
 800fe6e:	4604      	mov	r4, r0
 800fe70:	f004 fba8 	bl	80145c4 <operator delete(void*)>
 800fe74:	4620      	mov	r0, r4
 800fe76:	bd10      	pop	{r4, pc}

0800fe78 <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 800fe78:	f1a0 0004 	sub.w	r0, r0, #4
 800fe7c:	e7f6      	b.n	800fe6c <StoreNetwork::~StoreNetwork()>
	...

0800fe80 <StoreNetwork::Copy(TNetworkParams*)>:
 800fe80:	b507      	push	{r0, r1, r2, lr}
 800fe82:	460a      	mov	r2, r1
 800fe84:	2100      	movs	r1, #0
 800fe86:	4804      	ldr	r0, [pc, #16]	; (800fe98 <StoreNetwork::Copy(TNetworkParams*)+0x18>)
 800fe88:	9100      	str	r1, [sp, #0]
 800fe8a:	235e      	movs	r3, #94	; 0x5e
 800fe8c:	6800      	ldr	r0, [r0, #0]
 800fe8e:	f7ff fd95 	bl	800f9bc <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800fe92:	b003      	add	sp, #12
 800fe94:	f85d fb04 	ldr.w	pc, [sp], #4
 800fe98:	2000299c 	mulcs	r0, ip, r9

0800fe9c <StoreNetwork::StoreNetwork()>:
 800fe9c:	4a03      	ldr	r2, [pc, #12]	; (800feac <StoreNetwork::StoreNetwork()+0x10>)
 800fe9e:	6002      	str	r2, [r0, #0]
 800fea0:	322c      	adds	r2, #44	; 0x2c
 800fea2:	6042      	str	r2, [r0, #4]
 800fea4:	4a02      	ldr	r2, [pc, #8]	; (800feb0 <StoreNetwork::StoreNetwork()+0x14>)
 800fea6:	6010      	str	r0, [r2, #0]
 800fea8:	4770      	bx	lr
 800feaa:	bf00      	nop
 800feac:	080180ac 	stmdaeq	r1, {r2, r3, r5, r7, pc}
 800feb0:	200029ac 	andcs	r2, r0, ip, lsr #19

0800feb4 <StoreRemoteConfig::~StoreRemoteConfig()>:
 800feb4:	4770      	bx	lr
	...

0800feb8 <StoreRemoteConfig::Copy(TRemoteConfigParams*)>:
 800feb8:	2300      	movs	r3, #0
 800feba:	b507      	push	{r0, r1, r2, lr}
 800febc:	4805      	ldr	r0, [pc, #20]	; (800fed4 <StoreRemoteConfig::Copy(TRemoteConfigParams*)+0x1c>)
 800febe:	9300      	str	r3, [sp, #0]
 800fec0:	460a      	mov	r2, r1
 800fec2:	2320      	movs	r3, #32
 800fec4:	210c      	movs	r1, #12
 800fec6:	6800      	ldr	r0, [r0, #0]
 800fec8:	f7ff fd78 	bl	800f9bc <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800fecc:	b003      	add	sp, #12
 800fece:	f85d fb04 	ldr.w	pc, [sp], #4
 800fed2:	bf00      	nop
 800fed4:	2000299c 	mulcs	r0, ip, r9

0800fed8 <StoreRemoteConfig::Update(TRemoteConfigParams const*)>:
 800fed8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800feda:	2200      	movs	r2, #0
 800fedc:	460b      	mov	r3, r1
 800fede:	2120      	movs	r1, #32
 800fee0:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800fee4:	4804      	ldr	r0, [pc, #16]	; (800fef8 <StoreRemoteConfig::Update(TRemoteConfigParams const*)+0x20>)
 800fee6:	9100      	str	r1, [sp, #0]
 800fee8:	6800      	ldr	r0, [r0, #0]
 800feea:	210c      	movs	r1, #12
 800feec:	f7ff fd26 	bl	800f93c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fef0:	b005      	add	sp, #20
 800fef2:	f85d fb04 	ldr.w	pc, [sp], #4
 800fef6:	bf00      	nop
 800fef8:	2000299c 	mulcs	r0, ip, r9

0800fefc <StoreRemoteConfig::~StoreRemoteConfig()>:
 800fefc:	b510      	push	{r4, lr}
 800fefe:	4604      	mov	r4, r0
 800ff00:	f004 fb60 	bl	80145c4 <operator delete(void*)>
 800ff04:	4620      	mov	r0, r4
 800ff06:	bd10      	pop	{r4, pc}

0800ff08 <StoreRemoteConfig::StoreRemoteConfig()>:
 800ff08:	4a02      	ldr	r2, [pc, #8]	; (800ff14 <StoreRemoteConfig::StoreRemoteConfig()+0xc>)
 800ff0a:	6002      	str	r2, [r0, #0]
 800ff0c:	4a02      	ldr	r2, [pc, #8]	; (800ff18 <StoreRemoteConfig::StoreRemoteConfig()+0x10>)
 800ff0e:	6010      	str	r0, [r2, #0]
 800ff10:	4770      	bx	lr
 800ff12:	bf00      	nop
 800ff14:	080180fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, pc}
 800ff18:	200029b0 			; <UNDEFINED> instruction: 0x200029b0

0800ff1c <StoreWS28xxDmx::~StoreWS28xxDmx()>:
 800ff1c:	4770      	bx	lr

0800ff1e <non-virtual thunk to StoreWS28xxDmx::~StoreWS28xxDmx()>:
 800ff1e:	3804      	subs	r0, #4
 800ff20:	4770      	bx	lr
	...

0800ff24 <StoreWS28xxDmx::Update(TWS28xxDmxParams const*)>:
 800ff24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ff26:	2200      	movs	r2, #0
 800ff28:	460b      	mov	r3, r1
 800ff2a:	2127      	movs	r1, #39	; 0x27
 800ff2c:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800ff30:	4804      	ldr	r0, [pc, #16]	; (800ff44 <StoreWS28xxDmx::Update(TWS28xxDmxParams const*)+0x20>)
 800ff32:	9100      	str	r1, [sp, #0]
 800ff34:	6800      	ldr	r0, [r0, #0]
 800ff36:	2103      	movs	r1, #3
 800ff38:	f7ff fd00 	bl	800f93c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ff3c:	b005      	add	sp, #20
 800ff3e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ff42:	bf00      	nop
 800ff44:	2000299c 	mulcs	r0, ip, r9

0800ff48 <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>:
 800ff48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ff4a:	2304      	movs	r3, #4
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ff52:	2302      	movs	r3, #2
 800ff54:	4806      	ldr	r0, [pc, #24]	; (800ff70 <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)+0x28>)
 800ff56:	9300      	str	r3, [sp, #0]
 800ff58:	f8ad 1016 	strh.w	r1, [sp, #22]
 800ff5c:	2207      	movs	r2, #7
 800ff5e:	2103      	movs	r1, #3
 800ff60:	6800      	ldr	r0, [r0, #0]
 800ff62:	f10d 0316 	add.w	r3, sp, #22
 800ff66:	f7ff fce9 	bl	800f93c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ff6a:	b007      	add	sp, #28
 800ff6c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ff70:	2000299c 	mulcs	r0, ip, r9

0800ff74 <non-virtual thunk to StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>:
 800ff74:	f1a0 0004 	sub.w	r0, r0, #4
 800ff78:	e7e6      	b.n	800ff48 <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>
 800ff7a:	bf00      	nop

0800ff7c <StoreWS28xxDmx::SaveTestPattern(unsigned char)>:
 800ff7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ff7e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ff82:	2200      	movs	r2, #0
 800ff84:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ff88:	2301      	movs	r3, #1
 800ff8a:	4807      	ldr	r0, [pc, #28]	; (800ffa8 <StoreWS28xxDmx::SaveTestPattern(unsigned char)+0x2c>)
 800ff8c:	9300      	str	r3, [sp, #0]
 800ff8e:	f88d 1017 	strb.w	r1, [sp, #23]
 800ff92:	2226      	movs	r2, #38	; 0x26
 800ff94:	2103      	movs	r1, #3
 800ff96:	6800      	ldr	r0, [r0, #0]
 800ff98:	f10d 0317 	add.w	r3, sp, #23
 800ff9c:	f7ff fcce 	bl	800f93c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ffa0:	b007      	add	sp, #28
 800ffa2:	f85d fb04 	ldr.w	pc, [sp], #4
 800ffa6:	bf00      	nop
 800ffa8:	2000299c 	mulcs	r0, ip, r9

0800ffac <non-virtual thunk to StoreWS28xxDmx::SaveTestPattern(unsigned char)>:
 800ffac:	f1a0 0004 	sub.w	r0, r0, #4
 800ffb0:	e7e4      	b.n	800ff7c <StoreWS28xxDmx::SaveTestPattern(unsigned char)>
 800ffb2:	bf00      	nop

0800ffb4 <StoreWS28xxDmx::SaveMap(unsigned char)>:
 800ffb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ffb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ffba:	2200      	movs	r2, #0
 800ffbc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ffc0:	2301      	movs	r3, #1
 800ffc2:	4807      	ldr	r0, [pc, #28]	; (800ffe0 <StoreWS28xxDmx::SaveMap(unsigned char)+0x2c>)
 800ffc4:	9300      	str	r3, [sp, #0]
 800ffc6:	f88d 1017 	strb.w	r1, [sp, #23]
 800ffca:	2213      	movs	r2, #19
 800ffcc:	2103      	movs	r1, #3
 800ffce:	6800      	ldr	r0, [r0, #0]
 800ffd0:	f10d 0317 	add.w	r3, sp, #23
 800ffd4:	f7ff fcb2 	bl	800f93c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ffd8:	b007      	add	sp, #28
 800ffda:	f85d fb04 	ldr.w	pc, [sp], #4
 800ffde:	bf00      	nop
 800ffe0:	2000299c 	mulcs	r0, ip, r9

0800ffe4 <non-virtual thunk to StoreWS28xxDmx::SaveMap(unsigned char)>:
 800ffe4:	f1a0 0004 	sub.w	r0, r0, #4
 800ffe8:	e7e4      	b.n	800ffb4 <StoreWS28xxDmx::SaveMap(unsigned char)>
 800ffea:	bf00      	nop

0800ffec <StoreWS28xxDmx::SaveGroupingCount(unsigned short)>:
 800ffec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ffee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fff2:	2200      	movs	r2, #0
 800fff4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800fff8:	2302      	movs	r3, #2
 800fffa:	4807      	ldr	r0, [pc, #28]	; (8010018 <StoreWS28xxDmx::SaveGroupingCount(unsigned short)+0x2c>)
 800fffc:	9300      	str	r3, [sp, #0]
 800fffe:	f8ad 1016 	strh.w	r1, [sp, #22]
 8010002:	2211      	movs	r2, #17
 8010004:	2103      	movs	r1, #3
 8010006:	6800      	ldr	r0, [r0, #0]
 8010008:	f10d 0316 	add.w	r3, sp, #22
 801000c:	f7ff fc96 	bl	800f93c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010010:	b007      	add	sp, #28
 8010012:	f85d fb04 	ldr.w	pc, [sp], #4
 8010016:	bf00      	nop
 8010018:	2000299c 	mulcs	r0, ip, r9

0801001c <non-virtual thunk to StoreWS28xxDmx::SaveGroupingCount(unsigned short)>:
 801001c:	f1a0 0004 	sub.w	r0, r0, #4
 8010020:	e7e4      	b.n	800ffec <StoreWS28xxDmx::SaveGroupingCount(unsigned short)>
 8010022:	bf00      	nop

08010024 <StoreWS28xxDmx::SaveCount(unsigned short)>:
 8010024:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010026:	2302      	movs	r3, #2
 8010028:	2200      	movs	r2, #0
 801002a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801002e:	4807      	ldr	r0, [pc, #28]	; (801004c <StoreWS28xxDmx::SaveCount(unsigned short)+0x28>)
 8010030:	9300      	str	r3, [sp, #0]
 8010032:	f8ad 1016 	strh.w	r1, [sp, #22]
 8010036:	2205      	movs	r2, #5
 8010038:	2103      	movs	r1, #3
 801003a:	6800      	ldr	r0, [r0, #0]
 801003c:	f10d 0316 	add.w	r3, sp, #22
 8010040:	f7ff fc7c 	bl	800f93c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010044:	b007      	add	sp, #28
 8010046:	f85d fb04 	ldr.w	pc, [sp], #4
 801004a:	bf00      	nop
 801004c:	2000299c 	mulcs	r0, ip, r9

08010050 <non-virtual thunk to StoreWS28xxDmx::SaveCount(unsigned short)>:
 8010050:	f1a0 0004 	sub.w	r0, r0, #4
 8010054:	e7e6      	b.n	8010024 <StoreWS28xxDmx::SaveCount(unsigned short)>
 8010056:	bf00      	nop

08010058 <StoreWS28xxDmx::SaveType(unsigned char)>:
 8010058:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801005a:	2301      	movs	r3, #1
 801005c:	2200      	movs	r2, #0
 801005e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010062:	4807      	ldr	r0, [pc, #28]	; (8010080 <StoreWS28xxDmx::SaveType(unsigned char)+0x28>)
 8010064:	9300      	str	r3, [sp, #0]
 8010066:	f88d 1017 	strb.w	r1, [sp, #23]
 801006a:	2204      	movs	r2, #4
 801006c:	2103      	movs	r1, #3
 801006e:	6800      	ldr	r0, [r0, #0]
 8010070:	f10d 0317 	add.w	r3, sp, #23
 8010074:	f7ff fc62 	bl	800f93c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8010078:	b007      	add	sp, #28
 801007a:	f85d fb04 	ldr.w	pc, [sp], #4
 801007e:	bf00      	nop
 8010080:	2000299c 	mulcs	r0, ip, r9

08010084 <non-virtual thunk to StoreWS28xxDmx::SaveType(unsigned char)>:
 8010084:	f1a0 0004 	sub.w	r0, r0, #4
 8010088:	e7e6      	b.n	8010058 <StoreWS28xxDmx::SaveType(unsigned char)>
 801008a:	bf00      	nop

0801008c <StoreWS28xxDmx::~StoreWS28xxDmx()>:
 801008c:	b510      	push	{r4, lr}
 801008e:	4604      	mov	r4, r0
 8010090:	f004 fa98 	bl	80145c4 <operator delete(void*)>
 8010094:	4620      	mov	r0, r4
 8010096:	bd10      	pop	{r4, pc}

08010098 <non-virtual thunk to StoreWS28xxDmx::~StoreWS28xxDmx()>:
 8010098:	f1a0 0004 	sub.w	r0, r0, #4
 801009c:	e7f6      	b.n	801008c <StoreWS28xxDmx::~StoreWS28xxDmx()>
	...

080100a0 <StoreWS28xxDmx::Copy(TWS28xxDmxParams*)>:
 80100a0:	2300      	movs	r3, #0
 80100a2:	b507      	push	{r0, r1, r2, lr}
 80100a4:	4805      	ldr	r0, [pc, #20]	; (80100bc <StoreWS28xxDmx::Copy(TWS28xxDmxParams*)+0x1c>)
 80100a6:	9300      	str	r3, [sp, #0]
 80100a8:	460a      	mov	r2, r1
 80100aa:	2327      	movs	r3, #39	; 0x27
 80100ac:	2103      	movs	r1, #3
 80100ae:	6800      	ldr	r0, [r0, #0]
 80100b0:	f7ff fc84 	bl	800f9bc <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 80100b4:	b003      	add	sp, #12
 80100b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80100ba:	bf00      	nop
 80100bc:	2000299c 	mulcs	r0, ip, r9

080100c0 <StoreWS28xxDmx::StoreWS28xxDmx()>:
 80100c0:	4a03      	ldr	r2, [pc, #12]	; (80100d0 <StoreWS28xxDmx::StoreWS28xxDmx()+0x10>)
 80100c2:	6002      	str	r2, [r0, #0]
 80100c4:	3230      	adds	r2, #48	; 0x30
 80100c6:	6042      	str	r2, [r0, #4]
 80100c8:	4a02      	ldr	r2, [pc, #8]	; (80100d4 <StoreWS28xxDmx::StoreWS28xxDmx()+0x14>)
 80100ca:	6010      	str	r0, [r2, #0]
 80100cc:	4770      	bx	lr
 80100ce:	bf00      	nop
 80100d0:	08018114 	stmdaeq	r1, {r2, r4, r8, pc}
 80100d4:	200029b4 			; <UNDEFINED> instruction: 0x200029b4

080100d8 <FlashRom::FlashRom()>:
 80100d8:	4b08      	ldr	r3, [pc, #32]	; (80100fc <FlashRom::FlashRom()+0x24>)
 80100da:	b510      	push	{r4, lr}
 80100dc:	6018      	str	r0, [r3, #0]
 80100de:	2301      	movs	r3, #1
 80100e0:	4604      	mov	r4, r0
 80100e2:	7003      	strb	r3, [r0, #0]
 80100e4:	4b06      	ldr	r3, [pc, #24]	; (8010100 <FlashRom::FlashRom()+0x28>)
 80100e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80100ea:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 80100ee:	4905      	ldr	r1, [pc, #20]	; (8010104 <FlashRom::FlashRom()+0x2c>)
 80100f0:	029b      	lsls	r3, r3, #10
 80100f2:	4805      	ldr	r0, [pc, #20]	; (8010108 <FlashRom::FlashRom()+0x30>)
 80100f4:	f7f8 fde2 	bl	8008cbc <printf>
 80100f8:	4620      	mov	r0, r4
 80100fa:	bd10      	pop	{r4, pc}
 80100fc:	200029b8 			; <UNDEFINED> instruction: 0x200029b8
 8010100:	1ffff700 	svcne	0x00fff700
 8010104:	08018164 	stmdaeq	r1, {r2, r5, r6, r8, pc}
 8010108:	08018169 	stmdaeq	r1, {r0, r3, r5, r6, r8, pc}

0801010c <FlashRom::GetSize()>:
 801010c:	4b02      	ldr	r3, [pc, #8]	; (8010118 <FlashRom::GetSize()+0xc>)
 801010e:	f8b3 00e0 	ldrh.w	r0, [r3, #224]	; 0xe0
 8010112:	0280      	lsls	r0, r0, #10
 8010114:	4770      	bx	lr
 8010116:	bf00      	nop
 8010118:	1ffff700 	svcne	0x00fff700

0801011c <FlashRom::GetSectorSize()>:
 801011c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8010120:	4770      	bx	lr

08010122 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>:
 8010122:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8010126:	441a      	add	r2, r3
 8010128:	4293      	cmp	r3, r2
 801012a:	d004      	beq.n	8010136 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x14>
 801012c:	f851 0b04 	ldr.w	r0, [r1], #4
 8010130:	f843 0b04 	str.w	r0, [r3], #4
 8010134:	e7f8      	b.n	8010128 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x6>
 8010136:	2200      	movs	r2, #0
 8010138:	9b00      	ldr	r3, [sp, #0]
 801013a:	2001      	movs	r0, #1
 801013c:	601a      	str	r2, [r3, #0]
 801013e:	4770      	bx	lr

08010140 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>:
 8010140:	2000      	movs	r0, #0
 8010142:	b538      	push	{r3, r4, r5, lr}
 8010144:	4c47      	ldr	r4, [pc, #284]	; (8010264 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x124>)
 8010146:	6018      	str	r0, [r3, #0]
 8010148:	6823      	ldr	r3, [r4, #0]
 801014a:	2b04      	cmp	r3, #4
 801014c:	f200 8082 	bhi.w	8010254 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 8010150:	e8df f003 	tbb	[pc, r3]
 8010154:	78452003 	stmdavc	r5, {r0, r1, sp}^
 8010158:	4b430080 	blmi	90d0360 <__exidx_end+0x10b77a0>
 801015c:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8010160:	6019      	str	r1, [r3, #0]
 8010162:	4b42      	ldr	r3, [pc, #264]	; (801026c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 8010164:	601a      	str	r2, [r3, #0]
 8010166:	4b42      	ldr	r3, [pc, #264]	; (8010270 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x130>)
 8010168:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 801016c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010170:	4b40      	ldr	r3, [pc, #256]	; (8010274 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8010172:	d807      	bhi.n	8010184 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x44>
 8010174:	2201      	movs	r2, #1
 8010176:	701a      	strb	r2, [r3, #0]
 8010178:	f004 fcf4 	bl	8014b64 <fmc_bank0_unlock>
 801017c:	2301      	movs	r3, #1
 801017e:	6023      	str	r3, [r4, #0]
 8010180:	2000      	movs	r0, #0
 8010182:	e026      	b.n	80101d2 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 8010184:	4a3c      	ldr	r2, [pc, #240]	; (8010278 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x138>)
 8010186:	4291      	cmp	r1, r2
 8010188:	d3f4      	bcc.n	8010174 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x34>
 801018a:	2200      	movs	r2, #0
 801018c:	701a      	strb	r2, [r3, #0]
 801018e:	f004 fcf7 	bl	8014b80 <fmc_bank1_unlock>
 8010192:	e7f3      	b.n	801017c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 8010194:	4d37      	ldr	r5, [pc, #220]	; (8010274 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8010196:	782b      	ldrb	r3, [r5, #0]
 8010198:	b15b      	cbz	r3, 80101b2 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x72>
 801019a:	f004 fd0f 	bl	8014bbc <fmc_bank0_state_get>
 801019e:	2801      	cmp	r0, #1
 80101a0:	d0ee      	beq.n	8010180 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x40>
 80101a2:	7829      	ldrb	r1, [r5, #0]
 80101a4:	4b35      	ldr	r3, [pc, #212]	; (801027c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 80101a6:	b939      	cbnz	r1, 80101b8 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x78>
 80101a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80101aa:	f022 0202 	bic.w	r2, r2, #2
 80101ae:	651a      	str	r2, [r3, #80]	; 0x50
 80101b0:	e006      	b.n	80101c0 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x80>
 80101b2:	f004 fd17 	bl	8014be4 <fmc_bank1_state_get>
 80101b6:	e7f2      	b.n	801019e <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x5e>
 80101b8:	691a      	ldr	r2, [r3, #16]
 80101ba:	f022 0202 	bic.w	r2, r2, #2
 80101be:	611a      	str	r2, [r3, #16]
 80101c0:	4b2a      	ldr	r3, [pc, #168]	; (801026c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	b94b      	cbnz	r3, 80101da <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x9a>
 80101c6:	b129      	cbz	r1, 80101d4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x94>
 80101c8:	f004 fce8 	bl	8014b9c <fmc_bank0_lock>
 80101cc:	2300      	movs	r3, #0
 80101ce:	2001      	movs	r0, #1
 80101d0:	6023      	str	r3, [r4, #0]
 80101d2:	bd38      	pop	{r3, r4, r5, pc}
 80101d4:	f004 fcea 	bl	8014bac <fmc_bank1_lock>
 80101d8:	e7f8      	b.n	80101cc <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x8c>
 80101da:	2302      	movs	r3, #2
 80101dc:	e7cf      	b.n	801017e <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3e>
 80101de:	4923      	ldr	r1, [pc, #140]	; (801026c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 80101e0:	680b      	ldr	r3, [r1, #0]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d0ca      	beq.n	801017c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 80101e6:	4b23      	ldr	r3, [pc, #140]	; (8010274 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 80101e8:	4a1f      	ldr	r2, [pc, #124]	; (8010268 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x128>)
 80101ea:	7818      	ldrb	r0, [r3, #0]
 80101ec:	4b23      	ldr	r3, [pc, #140]	; (801027c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 80101ee:	b190      	cbz	r0, 8010216 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd6>
 80101f0:	6918      	ldr	r0, [r3, #16]
 80101f2:	f040 0002 	orr.w	r0, r0, #2
 80101f6:	6118      	str	r0, [r3, #16]
 80101f8:	6810      	ldr	r0, [r2, #0]
 80101fa:	6158      	str	r0, [r3, #20]
 80101fc:	6918      	ldr	r0, [r3, #16]
 80101fe:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8010202:	6118      	str	r0, [r3, #16]
 8010204:	680b      	ldr	r3, [r1, #0]
 8010206:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801020a:	600b      	str	r3, [r1, #0]
 801020c:	6813      	ldr	r3, [r2, #0]
 801020e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010212:	6013      	str	r3, [r2, #0]
 8010214:	e7b2      	b.n	801017c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 8010216:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8010218:	f040 0002 	orr.w	r0, r0, #2
 801021c:	6518      	str	r0, [r3, #80]	; 0x50
 801021e:	6810      	ldr	r0, [r2, #0]
 8010220:	6558      	str	r0, [r3, #84]	; 0x54
 8010222:	69dd      	ldr	r5, [r3, #28]
 8010224:	07ad      	lsls	r5, r5, #30
 8010226:	bf48      	it	mi
 8010228:	6158      	strmi	r0, [r3, #20]
 801022a:	4814      	ldr	r0, [pc, #80]	; (801027c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 801022c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801022e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010232:	6503      	str	r3, [r0, #80]	; 0x50
 8010234:	680b      	ldr	r3, [r1, #0]
 8010236:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 801023a:	600b      	str	r3, [r1, #0]
 801023c:	6813      	ldr	r3, [r2, #0]
 801023e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010242:	e7e6      	b.n	8010212 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd2>
 8010244:	4b0b      	ldr	r3, [pc, #44]	; (8010274 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8010246:	781a      	ldrb	r2, [r3, #0]
 8010248:	4b0c      	ldr	r3, [pc, #48]	; (801027c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 801024a:	b132      	cbz	r2, 801025a <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x11a>
 801024c:	691a      	ldr	r2, [r3, #16]
 801024e:	f022 0201 	bic.w	r2, r2, #1
 8010252:	611a      	str	r2, [r3, #16]
 8010254:	2000      	movs	r0, #0
 8010256:	6020      	str	r0, [r4, #0]
 8010258:	e7bb      	b.n	80101d2 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 801025a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801025c:	f022 0201 	bic.w	r2, r2, #1
 8010260:	651a      	str	r2, [r3, #80]	; 0x50
 8010262:	e7f7      	b.n	8010254 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 8010264:	200029c0 	andcs	r2, r0, r0, asr #19
 8010268:	200029c4 	andcs	r2, r0, r4, asr #19
 801026c:	200029d0 	ldrdcs	r2, [r0], -r0
 8010270:	1ffff700 	svcne	0x00fff700
 8010274:	200029cc 	andcs	r2, r0, ip, asr #19
 8010278:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 801027c:	40022000 	andmi	r2, r2, r0

08010280 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>:
 8010280:	b570      	push	{r4, r5, r6, lr}
 8010282:	2400      	movs	r4, #0
 8010284:	9804      	ldr	r0, [sp, #16]
 8010286:	6004      	str	r4, [r0, #0]
 8010288:	4c48      	ldr	r4, [pc, #288]	; (80103ac <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x12c>)
 801028a:	6820      	ldr	r0, [r4, #0]
 801028c:	2804      	cmp	r0, #4
 801028e:	d848      	bhi.n	8010322 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xa2>
 8010290:	e8df f000 	tbb	[pc, r0]
 8010294:	22847c03 	addcs	r7, r4, #768	; 0x300
 8010298:	48450047 	stmdami	r5, {r0, r1, r2, r6}^
 801029c:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 80102a0:	6001      	str	r1, [r0, #0]
 80102a2:	4844      	ldr	r0, [pc, #272]	; (80103b4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 80102a4:	6003      	str	r3, [r0, #0]
 80102a6:	4b44      	ldr	r3, [pc, #272]	; (80103b8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 80102a8:	601a      	str	r2, [r3, #0]
 80102aa:	4b44      	ldr	r3, [pc, #272]	; (80103bc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x13c>)
 80102ac:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 80102b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80102b4:	4b42      	ldr	r3, [pc, #264]	; (80103c0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 80102b6:	d807      	bhi.n	80102c8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x48>
 80102b8:	2201      	movs	r2, #1
 80102ba:	701a      	strb	r2, [r3, #0]
 80102bc:	f004 fc52 	bl	8014b64 <fmc_bank0_unlock>
 80102c0:	2303      	movs	r3, #3
 80102c2:	6023      	str	r3, [r4, #0]
 80102c4:	2000      	movs	r0, #0
 80102c6:	e026      	b.n	8010316 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 80102c8:	4a3e      	ldr	r2, [pc, #248]	; (80103c4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x144>)
 80102ca:	4291      	cmp	r1, r2
 80102cc:	d3f4      	bcc.n	80102b8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x38>
 80102ce:	2200      	movs	r2, #0
 80102d0:	701a      	strb	r2, [r3, #0]
 80102d2:	f004 fc55 	bl	8014b80 <fmc_bank1_unlock>
 80102d6:	e7f3      	b.n	80102c0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 80102d8:	4d39      	ldr	r5, [pc, #228]	; (80103c0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 80102da:	782b      	ldrb	r3, [r5, #0]
 80102dc:	b15b      	cbz	r3, 80102f6 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x76>
 80102de:	f004 fc6d 	bl	8014bbc <fmc_bank0_state_get>
 80102e2:	2801      	cmp	r0, #1
 80102e4:	d0ee      	beq.n	80102c4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x44>
 80102e6:	7829      	ldrb	r1, [r5, #0]
 80102e8:	4b37      	ldr	r3, [pc, #220]	; (80103c8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 80102ea:	b939      	cbnz	r1, 80102fc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x7c>
 80102ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80102ee:	f022 0201 	bic.w	r2, r2, #1
 80102f2:	651a      	str	r2, [r3, #80]	; 0x50
 80102f4:	e006      	b.n	8010304 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x84>
 80102f6:	f004 fc75 	bl	8014be4 <fmc_bank1_state_get>
 80102fa:	e7f2      	b.n	80102e2 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x62>
 80102fc:	691a      	ldr	r2, [r3, #16]
 80102fe:	f022 0201 	bic.w	r2, r2, #1
 8010302:	611a      	str	r2, [r3, #16]
 8010304:	4b2c      	ldr	r3, [pc, #176]	; (80103b8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	b94b      	cbnz	r3, 801031e <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x9e>
 801030a:	b129      	cbz	r1, 8010318 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x98>
 801030c:	f004 fc46 	bl	8014b9c <fmc_bank0_lock>
 8010310:	2300      	movs	r3, #0
 8010312:	2001      	movs	r0, #1
 8010314:	6023      	str	r3, [r4, #0]
 8010316:	bd70      	pop	{r4, r5, r6, pc}
 8010318:	f004 fc48 	bl	8014bac <fmc_bank1_lock>
 801031c:	e7f8      	b.n	8010310 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x90>
 801031e:	2304      	movs	r3, #4
 8010320:	e7cf      	b.n	80102c2 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x42>
 8010322:	4a25      	ldr	r2, [pc, #148]	; (80103b8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 8010324:	6813      	ldr	r3, [r2, #0]
 8010326:	2b03      	cmp	r3, #3
 8010328:	d91a      	bls.n	8010360 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xe0>
 801032a:	4b25      	ldr	r3, [pc, #148]	; (80103c0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 801032c:	7819      	ldrb	r1, [r3, #0]
 801032e:	4b26      	ldr	r3, [pc, #152]	; (80103c8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 8010330:	b189      	cbz	r1, 8010356 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xd6>
 8010332:	6919      	ldr	r1, [r3, #16]
 8010334:	f041 0101 	orr.w	r1, r1, #1
 8010338:	6119      	str	r1, [r3, #16]
 801033a:	4d1e      	ldr	r5, [pc, #120]	; (80103b4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 801033c:	481c      	ldr	r0, [pc, #112]	; (80103b0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 801033e:	6829      	ldr	r1, [r5, #0]
 8010340:	6803      	ldr	r3, [r0, #0]
 8010342:	f851 6b04 	ldr.w	r6, [r1], #4
 8010346:	f843 6b04 	str.w	r6, [r3], #4
 801034a:	6003      	str	r3, [r0, #0]
 801034c:	6813      	ldr	r3, [r2, #0]
 801034e:	6029      	str	r1, [r5, #0]
 8010350:	3b04      	subs	r3, #4
 8010352:	6013      	str	r3, [r2, #0]
 8010354:	e7b4      	b.n	80102c0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8010356:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8010358:	f041 0101 	orr.w	r1, r1, #1
 801035c:	6519      	str	r1, [r3, #80]	; 0x50
 801035e:	e7ec      	b.n	801033a <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xba>
 8010360:	2b00      	cmp	r3, #0
 8010362:	d0ad      	beq.n	80102c0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8010364:	4b16      	ldr	r3, [pc, #88]	; (80103c0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8010366:	781a      	ldrb	r2, [r3, #0]
 8010368:	4b17      	ldr	r3, [pc, #92]	; (80103c8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 801036a:	b152      	cbz	r2, 8010382 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x102>
 801036c:	691a      	ldr	r2, [r3, #16]
 801036e:	f042 0201 	orr.w	r2, r2, #1
 8010372:	611a      	str	r2, [r3, #16]
 8010374:	4a0f      	ldr	r2, [pc, #60]	; (80103b4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 8010376:	4b0e      	ldr	r3, [pc, #56]	; (80103b0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 8010378:	6812      	ldr	r2, [r2, #0]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	6812      	ldr	r2, [r2, #0]
 801037e:	601a      	str	r2, [r3, #0]
 8010380:	e79e      	b.n	80102c0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8010382:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010384:	f042 0201 	orr.w	r2, r2, #1
 8010388:	651a      	str	r2, [r3, #80]	; 0x50
 801038a:	e7f3      	b.n	8010374 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xf4>
 801038c:	4b0c      	ldr	r3, [pc, #48]	; (80103c0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 801038e:	781a      	ldrb	r2, [r3, #0]
 8010390:	4b0d      	ldr	r3, [pc, #52]	; (80103c8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 8010392:	b132      	cbz	r2, 80103a2 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x122>
 8010394:	691a      	ldr	r2, [r3, #16]
 8010396:	f022 0202 	bic.w	r2, r2, #2
 801039a:	611a      	str	r2, [r3, #16]
 801039c:	2000      	movs	r0, #0
 801039e:	6020      	str	r0, [r4, #0]
 80103a0:	e7b9      	b.n	8010316 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 80103a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80103a4:	f022 0202 	bic.w	r2, r2, #2
 80103a8:	651a      	str	r2, [r3, #80]	; 0x50
 80103aa:	e7f7      	b.n	801039c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x11c>
 80103ac:	200029c0 	andcs	r2, r0, r0, asr #19
 80103b0:	200029bc 			; <UNDEFINED> instruction: 0x200029bc
 80103b4:	200029c8 	andcs	r2, r0, r8, asr #19
 80103b8:	200029d0 	ldrdcs	r2, [r0], -r0
 80103bc:	1ffff700 	svcne	0x00fff700
 80103c0:	200029cc 	andcs	r2, r0, ip, asr #19
 80103c4:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 80103c8:	40022000 	andmi	r2, r2, r0

080103cc <net_init>:
 80103cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103d0:	460c      	mov	r4, r1
 80103d2:	4616      	mov	r6, r2
 80103d4:	9f06      	ldr	r7, [sp, #24]
 80103d6:	4a22      	ldr	r2, [pc, #136]	; (8010460 <net_init+0x94>)
 80103d8:	461d      	mov	r5, r3
 80103da:	1e43      	subs	r3, r0, #1
 80103dc:	3005      	adds	r0, #5
 80103de:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80103e2:	4283      	cmp	r3, r0
 80103e4:	f802 1b01 	strb.w	r1, [r2], #1
 80103e8:	d1f9      	bne.n	80103de <net_init+0x12>
 80103ea:	4623      	mov	r3, r4
 80103ec:	4a1d      	ldr	r2, [pc, #116]	; (8010464 <net_init+0x98>)
 80103ee:	f104 010c 	add.w	r1, r4, #12
 80103f2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80103f6:	428b      	cmp	r3, r1
 80103f8:	f802 0b01 	strb.w	r0, [r2], #1
 80103fc:	d1f9      	bne.n	80103f2 <net_init+0x26>
 80103fe:	f04f 0800 	mov.w	r8, #0
 8010402:	4918      	ldr	r1, [pc, #96]	; (8010464 <net_init+0x98>)
 8010404:	4816      	ldr	r0, [pc, #88]	; (8010460 <net_init+0x94>)
 8010406:	f002 fc5c 	bl	8012cc2 <ip_init>
 801040a:	4815      	ldr	r0, [pc, #84]	; (8010460 <net_init+0x94>)
 801040c:	f000 f8b6 	bl	801057c <rfc3927_init>
 8010410:	f887 8000 	strb.w	r8, [r7]
 8010414:	782b      	ldrb	r3, [r5, #0]
 8010416:	b163      	cbz	r3, 8010432 <net_init+0x66>
 8010418:	4632      	mov	r2, r6
 801041a:	4912      	ldr	r1, [pc, #72]	; (8010464 <net_init+0x98>)
 801041c:	4810      	ldr	r0, [pc, #64]	; (8010460 <net_init+0x94>)
 801041e:	f002 f961 	bl	80126e4 <dhcp_client>
 8010422:	4540      	cmp	r0, r8
 8010424:	da05      	bge.n	8010432 <net_init+0x66>
 8010426:	480f      	ldr	r0, [pc, #60]	; (8010464 <net_init+0x98>)
 8010428:	f885 8000 	strb.w	r8, [r5]
 801042c:	f000 f8b2 	bl	8010594 <rfc3927>
 8010430:	7038      	strb	r0, [r7, #0]
 8010432:	490c      	ldr	r1, [pc, #48]	; (8010464 <net_init+0x98>)
 8010434:	480a      	ldr	r0, [pc, #40]	; (8010460 <net_init+0x94>)
 8010436:	f001 ff65 	bl	8012304 <arp_init>
 801043a:	480a      	ldr	r0, [pc, #40]	; (8010464 <net_init+0x98>)
 801043c:	f002 fc38 	bl	8012cb0 <ip_set_ip>
 8010440:	f000 fa10 	bl	8010864 <tcp_init>
 8010444:	4a07      	ldr	r2, [pc, #28]	; (8010464 <net_init+0x98>)
 8010446:	1e63      	subs	r3, r4, #1
 8010448:	340b      	adds	r4, #11
 801044a:	f812 1b01 	ldrb.w	r1, [r2], #1
 801044e:	f803 1f01 	strb.w	r1, [r3, #1]!
 8010452:	429c      	cmp	r4, r3
 8010454:	d1f9      	bne.n	801044a <net_init+0x7e>
 8010456:	782a      	ldrb	r2, [r5, #0]
 8010458:	4b03      	ldr	r3, [pc, #12]	; (8010468 <net_init+0x9c>)
 801045a:	701a      	strb	r2, [r3, #0]
 801045c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010460:	200029e0 	andcs	r2, r0, r0, ror #19
 8010464:	200029d4 	ldrdcs	r2, [r0], -r4
 8010468:	200029e6 	andcs	r2, r0, r6, ror #19

0801046c <net_shutdown>:
 801046c:	b508      	push	{r3, lr}
 801046e:	f002 fc33 	bl	8012cd8 <ip_shutdown>
 8010472:	4b04      	ldr	r3, [pc, #16]	; (8010484 <net_shutdown+0x18>)
 8010474:	781b      	ldrb	r3, [r3, #0]
 8010476:	b11b      	cbz	r3, 8010480 <net_shutdown+0x14>
 8010478:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801047c:	f002 ba3a 	b.w	80128f4 <dhcp_client_release>
 8010480:	bd08      	pop	{r3, pc}
 8010482:	bf00      	nop
 8010484:	200029e6 	andcs	r2, r0, r6, ror #19

08010488 <net_set_ip>:
 8010488:	b510      	push	{r4, lr}
 801048a:	4c05      	ldr	r4, [pc, #20]	; (80104a0 <net_set_ip+0x18>)
 801048c:	6020      	str	r0, [r4, #0]
 801048e:	4621      	mov	r1, r4
 8010490:	4804      	ldr	r0, [pc, #16]	; (80104a4 <net_set_ip+0x1c>)
 8010492:	f001 ff37 	bl	8012304 <arp_init>
 8010496:	4620      	mov	r0, r4
 8010498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801049c:	f002 bc08 	b.w	8012cb0 <ip_set_ip>
 80104a0:	200029d4 	ldrdcs	r2, [r0], -r4
 80104a4:	200029e0 	andcs	r2, r0, r0, ror #19

080104a8 <net_set_gw>:
 80104a8:	4b02      	ldr	r3, [pc, #8]	; (80104b4 <net_set_gw+0xc>)
 80104aa:	6098      	str	r0, [r3, #8]
 80104ac:	4618      	mov	r0, r3
 80104ae:	f002 bbff 	b.w	8012cb0 <ip_set_ip>
 80104b2:	bf00      	nop
 80104b4:	200029d4 	ldrdcs	r2, [r0], -r4

080104b8 <net_set_dhcp>:
 80104b8:	b570      	push	{r4, r5, r6, lr}
 80104ba:	2400      	movs	r4, #0
 80104bc:	4605      	mov	r5, r0
 80104be:	7014      	strb	r4, [r2, #0]
 80104c0:	4616      	mov	r6, r2
 80104c2:	4810      	ldr	r0, [pc, #64]	; (8010504 <net_set_dhcp+0x4c>)
 80104c4:	460a      	mov	r2, r1
 80104c6:	4910      	ldr	r1, [pc, #64]	; (8010508 <net_set_dhcp+0x50>)
 80104c8:	f002 f90c 	bl	80126e4 <dhcp_client>
 80104cc:	42a0      	cmp	r0, r4
 80104ce:	da17      	bge.n	8010500 <net_set_dhcp+0x48>
 80104d0:	480d      	ldr	r0, [pc, #52]	; (8010508 <net_set_dhcp+0x50>)
 80104d2:	f000 f85f 	bl	8010594 <rfc3927>
 80104d6:	7030      	strb	r0, [r6, #0]
 80104d8:	490b      	ldr	r1, [pc, #44]	; (8010508 <net_set_dhcp+0x50>)
 80104da:	480a      	ldr	r0, [pc, #40]	; (8010504 <net_set_dhcp+0x4c>)
 80104dc:	f001 ff12 	bl	8012304 <arp_init>
 80104e0:	4809      	ldr	r0, [pc, #36]	; (8010508 <net_set_dhcp+0x50>)
 80104e2:	f002 fbe5 	bl	8012cb0 <ip_set_ip>
 80104e6:	4a08      	ldr	r2, [pc, #32]	; (8010508 <net_set_dhcp+0x50>)
 80104e8:	1e6b      	subs	r3, r5, #1
 80104ea:	350b      	adds	r5, #11
 80104ec:	f812 1b01 	ldrb.w	r1, [r2], #1
 80104f0:	f803 1f01 	strb.w	r1, [r3, #1]!
 80104f4:	42ab      	cmp	r3, r5
 80104f6:	d1f9      	bne.n	80104ec <net_set_dhcp+0x34>
 80104f8:	4b04      	ldr	r3, [pc, #16]	; (801050c <net_set_dhcp+0x54>)
 80104fa:	4620      	mov	r0, r4
 80104fc:	701c      	strb	r4, [r3, #0]
 80104fe:	bd70      	pop	{r4, r5, r6, pc}
 8010500:	2401      	movs	r4, #1
 8010502:	e7e9      	b.n	80104d8 <net_set_dhcp+0x20>
 8010504:	200029e0 	andcs	r2, r0, r0, ror #19
 8010508:	200029d4 	ldrdcs	r2, [r0], -r4
 801050c:	200029e6 	andcs	r2, r0, r6, ror #19

08010510 <net_dhcp_release>:
 8010510:	b508      	push	{r3, lr}
 8010512:	f002 f9ef 	bl	80128f4 <dhcp_client_release>
 8010516:	2200      	movs	r2, #0
 8010518:	4b01      	ldr	r3, [pc, #4]	; (8010520 <net_dhcp_release+0x10>)
 801051a:	701a      	strb	r2, [r3, #0]
 801051c:	bd08      	pop	{r3, pc}
 801051e:	bf00      	nop
 8010520:	200029e6 	andcs	r2, r0, r6, ror #19

08010524 <net_handle>:
 8010524:	b510      	push	{r4, lr}
 8010526:	4c0c      	ldr	r4, [pc, #48]	; (8010558 <net_handle+0x34>)
 8010528:	4620      	mov	r0, r4
 801052a:	f004 ff91 	bl	8015450 <emac_eth_recv>
 801052e:	2800      	cmp	r0, #0
 8010530:	dd07      	ble.n	8010542 <net_handle+0x1e>
 8010532:	6820      	ldr	r0, [r4, #0]
 8010534:	8983      	ldrh	r3, [r0, #12]
 8010536:	2b08      	cmp	r3, #8
 8010538:	d107      	bne.n	801054a <net_handle+0x26>
 801053a:	f002 fbd4 	bl	8012ce6 <ip_handle>
 801053e:	f004 ff9b 	bl	8015478 <emac_free_pkt>
 8010542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010546:	f000 b809 	b.w	801055c <net_timers_run>
 801054a:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801054e:	d1f6      	bne.n	801053e <net_handle+0x1a>
 8010550:	f001 ff5e 	bl	8012410 <arp_handle>
 8010554:	e7f3      	b.n	801053e <net_handle+0x1a>
 8010556:	bf00      	nop
 8010558:	200029e8 	andcs	r2, r0, r8, ror #19

0801055c <net_timers_run>:
 801055c:	4b05      	ldr	r3, [pc, #20]	; (8010574 <net_timers_run+0x18>)
 801055e:	4a06      	ldr	r2, [pc, #24]	; (8010578 <net_timers_run+0x1c>)
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	6811      	ldr	r1, [r2, #0]
 8010564:	4299      	cmp	r1, r3
 8010566:	d803      	bhi.n	8010570 <net_timers_run+0x14>
 8010568:	3364      	adds	r3, #100	; 0x64
 801056a:	6013      	str	r3, [r2, #0]
 801056c:	f002 bb02 	b.w	8012b74 <igmp_timer>
 8010570:	4770      	bx	lr
 8010572:	bf00      	nop
 8010574:	2000a9dc 	ldrdcs	sl, [r0], -ip
 8010578:	200029ec 	andcs	r2, r0, ip, ror #19

0801057c <rfc3927_init>:
 801057c:	4b04      	ldr	r3, [pc, #16]	; (8010590 <rfc3927_init+0x14>)
 801057e:	1d82      	adds	r2, r0, #6
 8010580:	4290      	cmp	r0, r2
 8010582:	d100      	bne.n	8010586 <rfc3927_init+0xa>
 8010584:	4770      	bx	lr
 8010586:	f810 1b01 	ldrb.w	r1, [r0], #1
 801058a:	f803 1b01 	strb.w	r1, [r3], #1
 801058e:	e7f7      	b.n	8010580 <rfc3927_init+0x4>
 8010590:	200029f0 	strdcs	r2, [r0], -r0

08010594 <rfc3927>:
 8010594:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010598:	4605      	mov	r5, r0
 801059a:	26ff      	movs	r6, #255	; 0xff
 801059c:	4b18      	ldr	r3, [pc, #96]	; (8010600 <rfc3927+0x6c>)
 801059e:	4f19      	ldr	r7, [pc, #100]	; (8010604 <rfc3927+0x70>)
 80105a0:	791a      	ldrb	r2, [r3, #4]
 80105a2:	78dc      	ldrb	r4, [r3, #3]
 80105a4:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8010608 <rfc3927+0x74>
 80105a8:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 80105ac:	f8d7 9000 	ldr.w	r9, [r7]
 80105b0:	f8df b058 	ldr.w	fp, [pc, #88]	; 801060c <rfc3927+0x78>
 80105b4:	f8df a058 	ldr.w	sl, [pc, #88]	; 8010610 <rfc3927+0x7c>
 80105b8:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80105bc:	4659      	mov	r1, fp
 80105be:	4620      	mov	r0, r4
 80105c0:	f001 ff74 	bl	80124ac <arp_cache_lookup>
 80105c4:	b938      	cbnz	r0, 80105d6 <rfc3927+0x42>
 80105c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80105ca:	2001      	movs	r0, #1
 80105cc:	602c      	str	r4, [r5, #0]
 80105ce:	60ac      	str	r4, [r5, #8]
 80105d0:	606b      	str	r3, [r5, #4]
 80105d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105d6:	ba24      	rev	r4, r4
 80105d8:	3401      	adds	r4, #1
 80105da:	3e01      	subs	r6, #1
 80105dc:	ba24      	rev	r4, r4
 80105de:	b2b6      	uxth	r6, r6
 80105e0:	4554      	cmp	r4, sl
 80105e2:	bf08      	it	eq
 80105e4:	4644      	moveq	r4, r8
 80105e6:	b12e      	cbz	r6, 80105f4 <rfc3927+0x60>
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	eba3 0309 	sub.w	r3, r3, r9
 80105ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80105f2:	d3e3      	bcc.n	80105bc <rfc3927+0x28>
 80105f4:	2000      	movs	r0, #0
 80105f6:	e9c5 0001 	strd	r0, r0, [r5, #4]
 80105fa:	6028      	str	r0, [r5, #0]
 80105fc:	e7e9      	b.n	80105d2 <rfc3927+0x3e>
 80105fe:	bf00      	nop
 8010600:	200029f0 	strdcs	r2, [r0], -r0
 8010604:	2000a9dc 	ldrdcs	sl, [r0], -ip
 8010608:	0100fea9 	smlatbeq	r0, r9, lr, pc	; <UNPREDICTABLE>
 801060c:	200029f8 	strdcs	r2, [r0], -r8
 8010610:	fffefea9 			; <UNDEFINED> instruction: 0xfffefea9

08010614 <_init_tcb>:
 8010614:	b510      	push	{r4, lr}
 8010616:	4603      	mov	r3, r0
 8010618:	2400      	movs	r4, #0
 801061a:	f100 0244 	add.w	r2, r0, #68	; 0x44
 801061e:	4293      	cmp	r3, r2
 8010620:	d10d      	bne.n	801063e <_init_tcb+0x2a>
 8010622:	4b08      	ldr	r3, [pc, #32]	; (8010644 <_init_tcb+0x30>)
 8010624:	f640 3268 	movw	r2, #2920	; 0xb68
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	8702      	strh	r2, [r0, #56]	; 0x38
 801062c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010630:	6283      	str	r3, [r0, #40]	; 0x28
 8010632:	6243      	str	r3, [r0, #36]	; 0x24
 8010634:	2301      	movs	r3, #1
 8010636:	8001      	strh	r1, [r0, #0]
 8010638:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 801063c:	bd10      	pop	{r4, pc}
 801063e:	f803 4b01 	strb.w	r4, [r3], #1
 8010642:	e7ec      	b.n	801061e <_init_tcb+0xa>
 8010644:	2000a9dc 	ldrdcs	sl, [r0], -ip

08010648 <memcpy.isra.0>:
 8010648:	3801      	subs	r0, #1
 801064a:	440a      	add	r2, r1
 801064c:	4291      	cmp	r1, r2
 801064e:	d100      	bne.n	8010652 <memcpy.isra.0+0xa>
 8010650:	4770      	bx	lr
 8010652:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010656:	f800 3f01 	strb.w	r3, [r0, #1]!
 801065a:	e7f7      	b.n	801064c <memcpy.isra.0+0x4>

0801065c <_bswap32>:
 801065c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801065e:	2204      	movs	r2, #4
 8010660:	f100 052a 	add.w	r5, r0, #42	; 0x2a
 8010664:	4629      	mov	r1, r5
 8010666:	4604      	mov	r4, r0
 8010668:	eb0d 0002 	add.w	r0, sp, r2
 801066c:	f7ff ffec 	bl	8010648 <memcpy.isra.0>
 8010670:	2204      	movs	r2, #4
 8010672:	9b01      	ldr	r3, [sp, #4]
 8010674:	eb0d 0102 	add.w	r1, sp, r2
 8010678:	ba1b      	rev	r3, r3
 801067a:	4628      	mov	r0, r5
 801067c:	9301      	str	r3, [sp, #4]
 801067e:	f7ff ffe3 	bl	8010648 <memcpy.isra.0>
 8010682:	2204      	movs	r2, #4
 8010684:	3426      	adds	r4, #38	; 0x26
 8010686:	eb0d 0002 	add.w	r0, sp, r2
 801068a:	4621      	mov	r1, r4
 801068c:	f7ff ffdc 	bl	8010648 <memcpy.isra.0>
 8010690:	2204      	movs	r2, #4
 8010692:	9b01      	ldr	r3, [sp, #4]
 8010694:	4620      	mov	r0, r4
 8010696:	ba1b      	rev	r3, r3
 8010698:	eb0d 0102 	add.w	r1, sp, r2
 801069c:	9301      	str	r3, [sp, #4]
 801069e:	f7ff ffd3 	bl	8010648 <memcpy.isra.0>
 80106a2:	b003      	add	sp, #12
 80106a4:	bd30      	pop	{r4, r5, pc}
	...

080106a8 <_tcp_send_package>:
 80106a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80106ac:	7a0b      	ldrb	r3, [r1, #8]
 80106ae:	4605      	mov	r5, r0
 80106b0:	f013 0f02 	tst.w	r3, #2
 80106b4:	bf0c      	ite	eq
 80106b6:	f04f 0905 	moveq.w	r9, #5
 80106ba:	f04f 0906 	movne.w	r9, #6
 80106be:	f04f 0800 	mov.w	r8, #0
 80106c2:	4c4b      	ldr	r4, [pc, #300]	; (80107f0 <_tcp_send_package+0x148>)
 80106c4:	460f      	mov	r7, r1
 80106c6:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 80106c8:	f100 0108 	add.w	r1, r0, #8
 80106cc:	2206      	movs	r2, #6
 80106ce:	4620      	mov	r0, r4
 80106d0:	f7ff ffba 	bl	8010648 <memcpy.isra.0>
 80106d4:	4a47      	ldr	r2, [pc, #284]	; (80107f4 <_tcp_send_package+0x14c>)
 80106d6:	eb06 0689 	add.w	r6, r6, r9, lsl #2
 80106da:	8813      	ldrh	r3, [r2, #0]
 80106dc:	b2b6      	uxth	r6, r6
 80106de:	1c59      	adds	r1, r3, #1
 80106e0:	8263      	strh	r3, [r4, #18]
 80106e2:	f105 0a04 	add.w	sl, r5, #4
 80106e6:	f106 0314 	add.w	r3, r6, #20
 80106ea:	ba5b      	rev16	r3, r3
 80106ec:	8011      	strh	r1, [r2, #0]
 80106ee:	f104 001e 	add.w	r0, r4, #30
 80106f2:	2204      	movs	r2, #4
 80106f4:	4651      	mov	r1, sl
 80106f6:	8223      	strh	r3, [r4, #16]
 80106f8:	f7ff ffa6 	bl	8010648 <memcpy.isra.0>
 80106fc:	2114      	movs	r1, #20
 80106fe:	f104 000e 	add.w	r0, r4, #14
 8010702:	f884 8018 	strb.w	r8, [r4, #24]
 8010706:	f884 8019 	strb.w	r8, [r4, #25]
 801070a:	f002 fb05 	bl	8012d18 <net_chksum>
 801070e:	882b      	ldrh	r3, [r5, #0]
 8010710:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8010714:	8463      	strh	r3, [r4, #34]	; 0x22
 8010716:	886b      	ldrh	r3, [r5, #2]
 8010718:	8320      	strh	r0, [r4, #24]
 801071a:	84a3      	strh	r3, [r4, #36]	; 0x24
 801071c:	683b      	ldr	r3, [r7, #0]
 801071e:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
 8010720:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f884 902e 	strb.w	r9, [r4, #46]	; 0x2e
 801072a:	f8c4 302a 	str.w	r3, [r4, #42]	; 0x2a
 801072e:	7a3b      	ldrb	r3, [r7, #8]
 8010730:	8622      	strh	r2, [r4, #48]	; 0x30
 8010732:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 8010736:	079b      	lsls	r3, r3, #30
 8010738:	bf48      	it	mi
 801073a:	2302      	movmi	r3, #2
 801073c:	8baa      	ldrh	r2, [r5, #28]
 801073e:	bf44      	itt	mi
 8010740:	f884 3036 	strbmi.w	r3, [r4, #54]	; 0x36
 8010744:	2304      	movmi	r3, #4
 8010746:	86a2      	strh	r2, [r4, #52]	; 0x34
 8010748:	bf41      	itttt	mi
 801074a:	f884 3037 	strbmi.w	r3, [r4, #55]	; 0x37
 801074e:	4622      	movmi	r2, r4
 8010750:	f24b 4305 	movwmi	r3, #46085	; 0xb405
 8010754:	f822 3f38 	strhmi.w	r3, [r2, #56]!
 8010758:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801075a:	f884 8032 	strb.w	r8, [r4, #50]	; 0x32
 801075e:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
 8010762:	bf58      	it	pl
 8010764:	f104 0236 	addpl.w	r2, r4, #54	; 0x36
 8010768:	2b00      	cmp	r3, #0
 801076a:	d13f      	bne.n	80107ec <_tcp_send_package+0x144>
 801076c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 801076e:	4820      	ldr	r0, [pc, #128]	; (80107f0 <_tcp_send_package+0x148>)
 8010770:	ba5b      	rev16	r3, r3
 8010772:	8463      	strh	r3, [r4, #34]	; 0x22
 8010774:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8010776:	ba5b      	rev16	r3, r3
 8010778:	84a3      	strh	r3, [r4, #36]	; 0x24
 801077a:	f7ff ff6f 	bl	801065c <_bswap32>
 801077e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8010780:	a801      	add	r0, sp, #4
 8010782:	ba5b      	rev16	r3, r3
 8010784:	8623      	strh	r3, [r4, #48]	; 0x30
 8010786:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8010788:	220c      	movs	r2, #12
 801078a:	ba5b      	rev16	r3, r3
 801078c:	491a      	ldr	r1, [pc, #104]	; (80107f8 <_tcp_send_package+0x150>)
 801078e:	86a3      	strh	r3, [r4, #52]	; 0x34
 8010790:	f7ff ff5a 	bl	8010648 <memcpy.isra.0>
 8010794:	2204      	movs	r2, #4
 8010796:	4919      	ldr	r1, [pc, #100]	; (80107fc <_tcp_send_package+0x154>)
 8010798:	4817      	ldr	r0, [pc, #92]	; (80107f8 <_tcp_send_package+0x150>)
 801079a:	f7ff ff55 	bl	8010648 <memcpy.isra.0>
 801079e:	2204      	movs	r2, #4
 80107a0:	4651      	mov	r1, sl
 80107a2:	4817      	ldr	r0, [pc, #92]	; (8010800 <_tcp_send_package+0x158>)
 80107a4:	f7ff ff50 	bl	8010648 <memcpy.isra.0>
 80107a8:	2300      	movs	r3, #0
 80107aa:	77a3      	strb	r3, [r4, #30]
 80107ac:	2306      	movs	r3, #6
 80107ae:	f106 010c 	add.w	r1, r6, #12
 80107b2:	77e3      	strb	r3, [r4, #31]
 80107b4:	4810      	ldr	r0, [pc, #64]	; (80107f8 <_tcp_send_package+0x150>)
 80107b6:	ba73      	rev16	r3, r6
 80107b8:	8423      	strh	r3, [r4, #32]
 80107ba:	f002 faad 	bl	8012d18 <net_chksum>
 80107be:	a901      	add	r1, sp, #4
 80107c0:	4605      	mov	r5, r0
 80107c2:	220c      	movs	r2, #12
 80107c4:	480c      	ldr	r0, [pc, #48]	; (80107f8 <_tcp_send_package+0x150>)
 80107c6:	f7ff ff3f 	bl	8010648 <memcpy.isra.0>
 80107ca:	4809      	ldr	r0, [pc, #36]	; (80107f0 <_tcp_send_package+0x148>)
 80107cc:	f106 0122 	add.w	r1, r6, #34	; 0x22
 80107d0:	8665      	strh	r5, [r4, #50]	; 0x32
 80107d2:	b004      	add	sp, #16
 80107d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107d8:	f004 be52 	b.w	8015480 <emac_eth_send>
 80107dc:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80107de:	5cc9      	ldrb	r1, [r1, r3]
 80107e0:	54d1      	strb	r1, [r2, r3]
 80107e2:	3301      	adds	r3, #1
 80107e4:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 80107e6:	4299      	cmp	r1, r3
 80107e8:	d8f8      	bhi.n	80107dc <_tcp_send_package+0x134>
 80107ea:	e7bf      	b.n	801076c <_tcp_send_package+0xc4>
 80107ec:	2300      	movs	r3, #0
 80107ee:	e7f9      	b.n	80107e4 <_tcp_send_package+0x13c>
 80107f0:	200035b4 			; <UNDEFINED> instruction: 0x200035b4
 80107f4:	200029fe 	strdcs	r2, [r0], -lr
 80107f8:	200035ca 	andcs	r3, r0, sl, asr #11
 80107fc:	200029d4 	ldrdcs	r2, [r0], -r4
 8010800:	200035ce 	andcs	r3, r0, lr, asr #11

08010804 <_send_reset>:
 8010804:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010806:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 801080a:	4604      	mov	r4, r0
 801080c:	075a      	lsls	r2, r3, #29
 801080e:	460e      	mov	r6, r1
 8010810:	d421      	bmi.n	8010856 <_send_reset+0x52>
 8010812:	2204      	movs	r2, #4
 8010814:	f013 0310 	ands.w	r3, r3, #16
 8010818:	f88d 200c 	strb.w	r2, [sp, #12]
 801081c:	d01d      	beq.n	801085a <_send_reset+0x56>
 801081e:	f100 012a 	add.w	r1, r0, #42	; 0x2a
 8010822:	4668      	mov	r0, sp
 8010824:	f7ff ff10 	bl	8010648 <memcpy.isra.0>
 8010828:	9b00      	ldr	r3, [sp, #0]
 801082a:	9301      	str	r3, [sp, #4]
 801082c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8010830:	4668      	mov	r0, sp
 8010832:	f3c3 0540 	ubfx	r5, r3, #1, #1
 8010836:	f104 0126 	add.w	r1, r4, #38	; 0x26
 801083a:	07db      	lsls	r3, r3, #31
 801083c:	f04f 0204 	mov.w	r2, #4
 8010840:	bf48      	it	mi
 8010842:	3501      	addmi	r5, #1
 8010844:	f7ff ff00 	bl	8010648 <memcpy.isra.0>
 8010848:	9b00      	ldr	r3, [sp, #0]
 801084a:	4630      	mov	r0, r6
 801084c:	441d      	add	r5, r3
 801084e:	a901      	add	r1, sp, #4
 8010850:	9502      	str	r5, [sp, #8]
 8010852:	f7ff ff29 	bl	80106a8 <_tcp_send_package>
 8010856:	b004      	add	sp, #16
 8010858:	bd70      	pop	{r4, r5, r6, pc}
 801085a:	9301      	str	r3, [sp, #4]
 801085c:	2314      	movs	r3, #20
 801085e:	f88d 300c 	strb.w	r3, [sp, #12]
 8010862:	e7e3      	b.n	801082c <_send_reset+0x28>

08010864 <tcp_init>:
 8010864:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010866:	2206      	movs	r2, #6
 8010868:	4c0e      	ldr	r4, [pc, #56]	; (80108a4 <tcp_init+0x40>)
 801086a:	490f      	ldr	r1, [pc, #60]	; (80108a8 <tcp_init+0x44>)
 801086c:	18a0      	adds	r0, r4, r2
 801086e:	f7ff feeb 	bl	8010648 <memcpy.isra.0>
 8010872:	2308      	movs	r3, #8
 8010874:	2204      	movs	r2, #4
 8010876:	2500      	movs	r5, #0
 8010878:	7323      	strb	r3, [r4, #12]
 801087a:	4b0c      	ldr	r3, [pc, #48]	; (80108ac <tcp_init+0x48>)
 801087c:	eb0d 0102 	add.w	r1, sp, r2
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	f104 001a 	add.w	r0, r4, #26
 8010886:	9301      	str	r3, [sp, #4]
 8010888:	7365      	strb	r5, [r4, #13]
 801088a:	f7ff fedd 	bl	8010648 <memcpy.isra.0>
 801088e:	2345      	movs	r3, #69	; 0x45
 8010890:	73a3      	strb	r3, [r4, #14]
 8010892:	2340      	movs	r3, #64	; 0x40
 8010894:	7523      	strb	r3, [r4, #20]
 8010896:	75a3      	strb	r3, [r4, #22]
 8010898:	2306      	movs	r3, #6
 801089a:	73e5      	strb	r5, [r4, #15]
 801089c:	7565      	strb	r5, [r4, #21]
 801089e:	75e3      	strb	r3, [r4, #23]
 80108a0:	b003      	add	sp, #12
 80108a2:	bd30      	pop	{r4, r5, pc}
 80108a4:	200035b4 			; <UNDEFINED> instruction: 0x200035b4
 80108a8:	200029e0 	andcs	r2, r0, r0, ror #19
 80108ac:	200029d4 	ldrdcs	r2, [r0], -r4

080108b0 <tcp_handle>:
 80108b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108b4:	4605      	mov	r5, r0
 80108b6:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80108b8:	b085      	sub	sp, #20
 80108ba:	ba5b      	rev16	r3, r3
 80108bc:	8443      	strh	r3, [r0, #34]	; 0x22
 80108be:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 80108c0:	f8b0 b010 	ldrh.w	fp, [r0, #16]
 80108c4:	ba5b      	rev16	r3, r3
 80108c6:	8483      	strh	r3, [r0, #36]	; 0x24
 80108c8:	f890 802e 	ldrb.w	r8, [r0, #46]	; 0x2e
 80108cc:	f7ff fec6 	bl	801065c <_bswap32>
 80108d0:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 80108d2:	4ca6      	ldr	r4, [pc, #664]	; (8010b6c <tcp_handle+0x2bc>)
 80108d4:	ba5b      	rev16	r3, r3
 80108d6:	862b      	strh	r3, [r5, #48]	; 0x30
 80108d8:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 80108da:	8822      	ldrh	r2, [r4, #0]
 80108dc:	ba5b      	rev16	r3, r3
 80108de:	86ab      	strh	r3, [r5, #52]	; 0x34
 80108e0:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 80108e2:	429a      	cmp	r2, r3
 80108e4:	d14d      	bne.n	8010982 <tcp_handle+0xd2>
 80108e6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80108ea:	2b01      	cmp	r3, #1
 80108ec:	d00d      	beq.n	801090a <tcp_handle+0x5a>
 80108ee:	2204      	movs	r2, #4
 80108f0:	4668      	mov	r0, sp
 80108f2:	f105 011a 	add.w	r1, r5, #26
 80108f6:	f7ff fea7 	bl	8010648 <memcpy.isra.0>
 80108fa:	8862      	ldrh	r2, [r4, #2]
 80108fc:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 80108fe:	429a      	cmp	r2, r3
 8010900:	d13f      	bne.n	8010982 <tcp_handle+0xd2>
 8010902:	6862      	ldr	r2, [r4, #4]
 8010904:	9b00      	ldr	r3, [sp, #0]
 8010906:	429a      	cmp	r2, r3
 8010908:	d13b      	bne.n	8010982 <tcp_handle+0xd2>
 801090a:	2204      	movs	r2, #4
 801090c:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 8010910:	eb0d 0002 	add.w	r0, sp, r2
 8010914:	f7ff fe98 	bl	8010648 <memcpy.isra.0>
 8010918:	2204      	movs	r2, #4
 801091a:	f105 0126 	add.w	r1, r5, #38	; 0x26
 801091e:	eb0d 0002 	add.w	r0, sp, r2
 8010922:	9e01      	ldr	r6, [sp, #4]
 8010924:	f7ff fe90 	bl	8010648 <memcpy.isra.0>
 8010928:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 801092c:	9f01      	ldr	r7, [sp, #4]
 801092e:	2a01      	cmp	r2, #1
 8010930:	f8b5 a030 	ldrh.w	sl, [r5, #48]	; 0x30
 8010934:	d01b      	beq.n	801096e <tcp_handle+0xbe>
 8010936:	1ed3      	subs	r3, r2, #3
 8010938:	2b07      	cmp	r3, #7
 801093a:	d822      	bhi.n	8010982 <tcp_handle+0xd2>
 801093c:	ea4f 1318 	mov.w	r3, r8, lsr #4
 8010940:	f64f 78ec 	movw	r8, #65516	; 0xffec
 8010944:	fa9b fb9b 	rev16.w	fp, fp
 8010948:	eba8 0883 	sub.w	r8, r8, r3, lsl #2
 801094c:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801094e:	44d8      	add	r8, fp
 8010950:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
 8010954:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8010958:	fa1f f888 	uxth.w	r8, r8
 801095c:	2900      	cmp	r1, #0
 801095e:	d142      	bne.n	80109e6 <tcp_handle+0x136>
 8010960:	f1b8 0f00 	cmp.w	r8, #0
 8010964:	d16b      	bne.n	8010a3e <tcp_handle+0x18e>
 8010966:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010968:	42bb      	cmp	r3, r7
 801096a:	d168      	bne.n	8010a3e <tcp_handle+0x18e>
 801096c:	e048      	b.n	8010a00 <tcp_handle+0x150>
 801096e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8010972:	075a      	lsls	r2, r3, #29
 8010974:	d405      	bmi.n	8010982 <tcp_handle+0xd2>
 8010976:	06d8      	lsls	r0, r3, #27
 8010978:	d506      	bpl.n	8010988 <tcp_handle+0xd8>
 801097a:	4628      	mov	r0, r5
 801097c:	497b      	ldr	r1, [pc, #492]	; (8010b6c <tcp_handle+0x2bc>)
 801097e:	f7ff ff41 	bl	8010804 <_send_reset>
 8010982:	b005      	add	sp, #20
 8010984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010988:	0799      	lsls	r1, r3, #30
 801098a:	d5fa      	bpl.n	8010982 <tcp_handle+0xd2>
 801098c:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
 8010990:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8010994:	4668      	mov	r0, sp
 8010996:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801099a:	f105 011a 	add.w	r1, r5, #26
 801099e:	2204      	movs	r2, #4
 80109a0:	8063      	strh	r3, [r4, #2]
 80109a2:	f7ff fe51 	bl	8010648 <memcpy.isra.0>
 80109a6:	2206      	movs	r2, #6
 80109a8:	9b00      	ldr	r3, [sp, #0]
 80109aa:	18a9      	adds	r1, r5, r2
 80109ac:	4870      	ldr	r0, [pc, #448]	; (8010b70 <tcp_handle+0x2c0>)
 80109ae:	6063      	str	r3, [r4, #4]
 80109b0:	f7ff fe4a 	bl	8010648 <memcpy.isra.0>
 80109b4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80109b6:	1c7b      	adds	r3, r7, #1
 80109b8:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80109bc:	6363      	str	r3, [r4, #52]	; 0x34
 80109be:	2312      	movs	r3, #18
 80109c0:	486a      	ldr	r0, [pc, #424]	; (8010b6c <tcp_handle+0x2bc>)
 80109c2:	a901      	add	r1, sp, #4
 80109c4:	f88d 300c 	strb.w	r3, [sp, #12]
 80109c8:	e9c4 7608 	strd	r7, r6, [r4, #32]
 80109cc:	63e7      	str	r7, [r4, #60]	; 0x3c
 80109ce:	f8c4 a018 	str.w	sl, [r4, #24]
 80109d2:	f7ff fe69 	bl	80106a8 <_tcp_send_package>
 80109d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80109d8:	1c5a      	adds	r2, r3, #1
 80109da:	e9c4 3204 	strd	r3, r2, [r4, #16]
 80109de:	2303      	movs	r3, #3
 80109e0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80109e4:	e7cd      	b.n	8010982 <tcp_handle+0xd2>
 80109e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80109e8:	eba3 0c07 	sub.w	ip, r3, r7
 80109ec:	f1b8 0f00 	cmp.w	r8, #0
 80109f0:	d10d      	bne.n	8010a0e <tcp_handle+0x15e>
 80109f2:	f1bc 0f00 	cmp.w	ip, #0
 80109f6:	dc22      	bgt.n	8010a3e <tcp_handle+0x18e>
 80109f8:	1afb      	subs	r3, r7, r3
 80109fa:	1a5b      	subs	r3, r3, r1
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	da1e      	bge.n	8010a3e <tcp_handle+0x18e>
 8010a00:	0743      	lsls	r3, r0, #29
 8010a02:	d530      	bpl.n	8010a66 <tcp_handle+0x1b6>
 8010a04:	8821      	ldrh	r1, [r4, #0]
 8010a06:	4859      	ldr	r0, [pc, #356]	; (8010b6c <tcp_handle+0x2bc>)
 8010a08:	f7ff fe04 	bl	8010614 <_init_tcb>
 8010a0c:	e7b9      	b.n	8010982 <tcp_handle+0xd2>
 8010a0e:	f1bc 0f00 	cmp.w	ip, #0
 8010a12:	dc06      	bgt.n	8010a22 <tcp_handle+0x172>
 8010a14:	eba7 0c03 	sub.w	ip, r7, r3
 8010a18:	ebac 0c01 	sub.w	ip, ip, r1
 8010a1c:	f1bc 0f00 	cmp.w	ip, #0
 8010a20:	dbee      	blt.n	8010a00 <tcp_handle+0x150>
 8010a22:	eb08 0c07 	add.w	ip, r8, r7
 8010a26:	f103 0e01 	add.w	lr, r3, #1
 8010a2a:	ebae 0e0c 	sub.w	lr, lr, ip
 8010a2e:	f1be 0f00 	cmp.w	lr, #0
 8010a32:	dc04      	bgt.n	8010a3e <tcp_handle+0x18e>
 8010a34:	43db      	mvns	r3, r3
 8010a36:	1a5b      	subs	r3, r3, r1
 8010a38:	eb13 0f0c 	cmn.w	r3, ip
 8010a3c:	d4e0      	bmi.n	8010a00 <tcp_handle+0x150>
 8010a3e:	0742      	lsls	r2, r0, #29
 8010a40:	d505      	bpl.n	8010a4e <tcp_handle+0x19e>
 8010a42:	8821      	ldrh	r1, [r4, #0]
 8010a44:	4849      	ldr	r0, [pc, #292]	; (8010b6c <tcp_handle+0x2bc>)
 8010a46:	f7ff fde5 	bl	8010614 <_init_tcb>
 8010a4a:	2301      	movs	r3, #1
 8010a4c:	e7c8      	b.n	80109e0 <tcp_handle+0x130>
 8010a4e:	6963      	ldr	r3, [r4, #20]
 8010a50:	9301      	str	r3, [sp, #4]
 8010a52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010a54:	9302      	str	r3, [sp, #8]
 8010a56:	2310      	movs	r3, #16
 8010a58:	4844      	ldr	r0, [pc, #272]	; (8010b6c <tcp_handle+0x2bc>)
 8010a5a:	a901      	add	r1, sp, #4
 8010a5c:	f88d 300c 	strb.w	r3, [sp, #12]
 8010a60:	f7ff fe22 	bl	80106a8 <_tcp_send_package>
 8010a64:	e78d      	b.n	8010982 <tcp_handle+0xd2>
 8010a66:	0781      	lsls	r1, r0, #30
 8010a68:	d505      	bpl.n	8010a76 <tcp_handle+0x1c6>
 8010a6a:	2a03      	cmp	r2, #3
 8010a6c:	d0ed      	beq.n	8010a4a <tcp_handle+0x19a>
 8010a6e:	4628      	mov	r0, r5
 8010a70:	493e      	ldr	r1, [pc, #248]	; (8010b6c <tcp_handle+0x2bc>)
 8010a72:	f7ff fec7 	bl	8010804 <_send_reset>
 8010a76:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8010a7a:	06da      	lsls	r2, r3, #27
 8010a7c:	d581      	bpl.n	8010982 <tcp_handle+0xd2>
 8010a7e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8010a82:	3b03      	subs	r3, #3
 8010a84:	2b07      	cmp	r3, #7
 8010a86:	d818      	bhi.n	8010aba <tcp_handle+0x20a>
 8010a88:	e8df f003 	tbb	[pc, r3]
 8010a8c:	76767604 	ldrbtvc	r7, [r6], -r4, lsl #12
 8010a90:	a69d7676 			; <UNDEFINED> instruction: 0xa69d7676
 8010a94:	6923      	ldr	r3, [r4, #16]
 8010a96:	1b9b      	subs	r3, r3, r6
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	dc0a      	bgt.n	8010ab2 <tcp_handle+0x202>
 8010a9c:	6963      	ldr	r3, [r4, #20]
 8010a9e:	1af3      	subs	r3, r6, r3
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	dc06      	bgt.n	8010ab2 <tcp_handle+0x202>
 8010aa4:	2304      	movs	r3, #4
 8010aa6:	e9c4 7608 	strd	r7, r6, [r4, #32]
 8010aaa:	f8c4 a018 	str.w	sl, [r4, #24]
 8010aae:	6126      	str	r6, [r4, #16]
 8010ab0:	e796      	b.n	80109e0 <tcp_handle+0x130>
 8010ab2:	4628      	mov	r0, r5
 8010ab4:	492d      	ldr	r1, [pc, #180]	; (8010b6c <tcp_handle+0x2bc>)
 8010ab6:	f7ff fea5 	bl	8010804 <_send_reset>
 8010aba:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8010abe:	3b04      	subs	r3, #4
 8010ac0:	2b02      	cmp	r3, #2
 8010ac2:	d830      	bhi.n	8010b26 <tcp_handle+0x276>
 8010ac4:	f1b8 0f00 	cmp.w	r8, #0
 8010ac8:	d02d      	beq.n	8010b26 <tcp_handle+0x276>
 8010aca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010acc:	42bb      	cmp	r3, r7
 8010ace:	f040 8092 	bne.w	8010bf6 <tcp_handle+0x346>
 8010ad2:	f240 53b6 	movw	r3, #1462	; 0x5b6
 8010ad6:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8010b74 <tcp_handle+0x2c4>
 8010ada:	f105 0122 	add.w	r1, r5, #34	; 0x22
 8010ade:	f8ba 7000 	ldrh.w	r7, [sl]
 8010ae2:	4642      	mov	r2, r8
 8010ae4:	435f      	muls	r7, r3
 8010ae6:	1d38      	adds	r0, r7, #4
 8010ae8:	4449      	add	r1, r9
 8010aea:	4450      	add	r0, sl
 8010aec:	f7ff fdac 	bl	8010648 <memcpy.isra.0>
 8010af0:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8010af2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010af4:	f2a2 52b4 	subw	r2, r2, #1460	; 0x5b4
 8010af8:	8722      	strh	r2, [r4, #56]	; 0x38
 8010afa:	6962      	ldr	r2, [r4, #20]
 8010afc:	4443      	add	r3, r8
 8010afe:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8010b02:	6363      	str	r3, [r4, #52]	; 0x34
 8010b04:	2310      	movs	r3, #16
 8010b06:	4457      	add	r7, sl
 8010b08:	4818      	ldr	r0, [pc, #96]	; (8010b6c <tcp_handle+0x2bc>)
 8010b0a:	f8a7 85b8 	strh.w	r8, [r7, #1464]	; 0x5b8
 8010b0e:	a901      	add	r1, sp, #4
 8010b10:	f88d 300c 	strb.w	r3, [sp, #12]
 8010b14:	f7ff fdc8 	bl	80106a8 <_tcp_send_package>
 8010b18:	f8ba 3000 	ldrh.w	r3, [sl]
 8010b1c:	3301      	adds	r3, #1
 8010b1e:	f003 0301 	and.w	r3, r3, #1
 8010b22:	f8aa 3000 	strh.w	r3, [sl]
 8010b26:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8010b2a:	2b02      	cmp	r3, #2
 8010b2c:	f67f af29 	bls.w	8010982 <tcp_handle+0xd2>
 8010b30:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8010b34:	07db      	lsls	r3, r3, #31
 8010b36:	f57f af24 	bpl.w	8010982 <tcp_handle+0xd2>
 8010b3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010b3c:	6962      	ldr	r2, [r4, #20]
 8010b3e:	3301      	adds	r3, #1
 8010b40:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8010b44:	6363      	str	r3, [r4, #52]	; 0x34
 8010b46:	2310      	movs	r3, #16
 8010b48:	4808      	ldr	r0, [pc, #32]	; (8010b6c <tcp_handle+0x2bc>)
 8010b4a:	a901      	add	r1, sp, #4
 8010b4c:	f88d 300c 	strb.w	r3, [sp, #12]
 8010b50:	f7ff fdaa 	bl	80106a8 <_tcp_send_package>
 8010b54:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8010b58:	2b05      	cmp	r3, #5
 8010b5a:	d054      	beq.n	8010c06 <tcp_handle+0x356>
 8010b5c:	d84e      	bhi.n	8010bfc <tcp_handle+0x34c>
 8010b5e:	3b03      	subs	r3, #3
 8010b60:	2b01      	cmp	r3, #1
 8010b62:	f63f af0e 	bhi.w	8010982 <tcp_handle+0xd2>
 8010b66:	2307      	movs	r3, #7
 8010b68:	e73a      	b.n	80109e0 <tcp_handle+0x130>
 8010b6a:	bf00      	nop
 8010b6c:	20003570 	andcs	r3, r0, r0, ror r5
 8010b70:	20003578 	andcs	r3, r0, r8, ror r5
 8010b74:	20002a00 	andcs	r2, r0, r0, lsl #20
 8010b78:	6923      	ldr	r3, [r4, #16]
 8010b7a:	1b99      	subs	r1, r3, r6
 8010b7c:	d513      	bpl.n	8010ba6 <tcp_handle+0x2f6>
 8010b7e:	6962      	ldr	r2, [r4, #20]
 8010b80:	1ab2      	subs	r2, r6, r2
 8010b82:	2a00      	cmp	r2, #0
 8010b84:	dc0f      	bgt.n	8010ba6 <tcp_handle+0x2f6>
 8010b86:	6126      	str	r6, [r4, #16]
 8010b88:	6a23      	ldr	r3, [r4, #32]
 8010b8a:	1bda      	subs	r2, r3, r7
 8010b8c:	2a00      	cmp	r2, #0
 8010b8e:	db05      	blt.n	8010b9c <tcp_handle+0x2ec>
 8010b90:	42bb      	cmp	r3, r7
 8010b92:	d192      	bne.n	8010aba <tcp_handle+0x20a>
 8010b94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b96:	1b9b      	subs	r3, r3, r6
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	dc8e      	bgt.n	8010aba <tcp_handle+0x20a>
 8010b9c:	e9c4 7608 	strd	r7, r6, [r4, #32]
 8010ba0:	f8c4 a018 	str.w	sl, [r4, #24]
 8010ba4:	e789      	b.n	8010aba <tcp_handle+0x20a>
 8010ba6:	1af3      	subs	r3, r6, r3
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	dc06      	bgt.n	8010bba <tcp_handle+0x30a>
 8010bac:	2900      	cmp	r1, #0
 8010bae:	dc84      	bgt.n	8010aba <tcp_handle+0x20a>
 8010bb0:	6963      	ldr	r3, [r4, #20]
 8010bb2:	1af3      	subs	r3, r6, r3
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	dc80      	bgt.n	8010aba <tcp_handle+0x20a>
 8010bb8:	e7e6      	b.n	8010b88 <tcp_handle+0x2d8>
 8010bba:	6963      	ldr	r3, [r4, #20]
 8010bbc:	1b9a      	subs	r2, r3, r6
 8010bbe:	2a00      	cmp	r2, #0
 8010bc0:	f6bf af7b 	bge.w	8010aba <tcp_handle+0x20a>
 8010bc4:	e744      	b.n	8010a50 <tcp_handle+0x1a0>
 8010bc6:	6963      	ldr	r3, [r4, #20]
 8010bc8:	42b3      	cmp	r3, r6
 8010bca:	f47f af76 	bne.w	8010aba <tcp_handle+0x20a>
 8010bce:	8821      	ldrh	r1, [r4, #0]
 8010bd0:	480f      	ldr	r0, [pc, #60]	; (8010c10 <tcp_handle+0x360>)
 8010bd2:	f7ff fd1f 	bl	8010614 <_init_tcb>
 8010bd6:	e770      	b.n	8010aba <tcp_handle+0x20a>
 8010bd8:	6963      	ldr	r3, [r4, #20]
 8010bda:	42b3      	cmp	r3, r6
 8010bdc:	f47f af6d 	bne.w	8010aba <tcp_handle+0x20a>
 8010be0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010be2:	480b      	ldr	r0, [pc, #44]	; (8010c10 <tcp_handle+0x360>)
 8010be4:	9302      	str	r3, [sp, #8]
 8010be6:	2310      	movs	r3, #16
 8010be8:	a901      	add	r1, sp, #4
 8010bea:	9601      	str	r6, [sp, #4]
 8010bec:	f88d 300c 	strb.w	r3, [sp, #12]
 8010bf0:	f7ff fd5a 	bl	80106a8 <_tcp_send_package>
 8010bf4:	e761      	b.n	8010aba <tcp_handle+0x20a>
 8010bf6:	6962      	ldr	r2, [r4, #20]
 8010bf8:	9201      	str	r2, [sp, #4]
 8010bfa:	e72b      	b.n	8010a54 <tcp_handle+0x1a4>
 8010bfc:	2b06      	cmp	r3, #6
 8010bfe:	f47f aec0 	bne.w	8010982 <tcp_handle+0xd2>
 8010c02:	230a      	movs	r3, #10
 8010c04:	e6ec      	b.n	80109e0 <tcp_handle+0x130>
 8010c06:	6963      	ldr	r3, [r4, #20]
 8010c08:	42b3      	cmp	r3, r6
 8010c0a:	d0fa      	beq.n	8010c02 <tcp_handle+0x352>
 8010c0c:	2308      	movs	r3, #8
 8010c0e:	e6e7      	b.n	80109e0 <tcp_handle+0x130>
 8010c10:	20003570 	andcs	r3, r0, r0, ror r5

08010c14 <tcp_begin>:
 8010c14:	b508      	push	{r3, lr}
 8010c16:	4b0a      	ldr	r3, [pc, #40]	; (8010c40 <tcp_begin+0x2c>)
 8010c18:	4601      	mov	r1, r0
 8010c1a:	881a      	ldrh	r2, [r3, #0]
 8010c1c:	4282      	cmp	r2, r0
 8010c1e:	d102      	bne.n	8010c26 <tcp_begin+0x12>
 8010c20:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010c24:	b130      	cbz	r0, 8010c34 <tcp_begin+0x20>
 8010c26:	b12a      	cbz	r2, 8010c34 <tcp_begin+0x20>
 8010c28:	4806      	ldr	r0, [pc, #24]	; (8010c44 <tcp_begin+0x30>)
 8010c2a:	f003 fb6b 	bl	8014304 <console_error>
 8010c2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010c32:	bd08      	pop	{r3, pc}
 8010c34:	4802      	ldr	r0, [pc, #8]	; (8010c40 <tcp_begin+0x2c>)
 8010c36:	8019      	strh	r1, [r3, #0]
 8010c38:	f7ff fcec 	bl	8010614 <_init_tcb>
 8010c3c:	2000      	movs	r0, #0
 8010c3e:	e7f8      	b.n	8010c32 <tcp_begin+0x1e>
 8010c40:	20003570 	andcs	r3, r0, r0, ror r5
 8010c44:	08018199 	stmdaeq	r1, {r0, r3, r4, r7, r8, pc}

08010c48 <tcp_write>:
 8010c48:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8010c4c:	429a      	cmp	r2, r3
 8010c4e:	bf28      	it	cs
 8010c50:	461a      	movcs	r2, r3
 8010c52:	2344      	movs	r3, #68	; 0x44
 8010c54:	b530      	push	{r4, r5, lr}
 8010c56:	4c0d      	ldr	r4, [pc, #52]	; (8010c8c <tcp_write+0x44>)
 8010c58:	b085      	sub	sp, #20
 8010c5a:	fb03 4400 	mla	r4, r3, r0, r4
 8010c5e:	6963      	ldr	r3, [r4, #20]
 8010c60:	4615      	mov	r5, r2
 8010c62:	9301      	str	r3, [sp, #4]
 8010c64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010c66:	62e1      	str	r1, [r4, #44]	; 0x2c
 8010c68:	9302      	str	r3, [sp, #8]
 8010c6a:	2318      	movs	r3, #24
 8010c6c:	8622      	strh	r2, [r4, #48]	; 0x30
 8010c6e:	4620      	mov	r0, r4
 8010c70:	a901      	add	r1, sp, #4
 8010c72:	f88d 300c 	strb.w	r3, [sp, #12]
 8010c76:	f7ff fd17 	bl	80106a8 <_tcp_send_package>
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	6962      	ldr	r2, [r4, #20]
 8010c7e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010c80:	442a      	add	r2, r5
 8010c82:	8623      	strh	r3, [r4, #48]	; 0x30
 8010c84:	6162      	str	r2, [r4, #20]
 8010c86:	b005      	add	sp, #20
 8010c88:	bd30      	pop	{r4, r5, pc}
 8010c8a:	bf00      	nop
 8010c8c:	20003570 	andcs	r3, r0, r0, ror r5

08010c90 <tcp_read>:
 8010c90:	2344      	movs	r3, #68	; 0x44
 8010c92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c94:	4c1c      	ldr	r4, [pc, #112]	; (8010d08 <tcp_read+0x78>)
 8010c96:	b085      	sub	sp, #20
 8010c98:	fb03 4400 	mla	r4, r3, r0, r4
 8010c9c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8010ca0:	2b07      	cmp	r3, #7
 8010ca2:	d112      	bne.n	8010cca <tcp_read+0x3a>
 8010ca4:	6963      	ldr	r3, [r4, #20]
 8010ca6:	4620      	mov	r0, r4
 8010ca8:	9301      	str	r3, [sp, #4]
 8010caa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010cac:	a901      	add	r1, sp, #4
 8010cae:	9302      	str	r3, [sp, #8]
 8010cb0:	2311      	movs	r3, #17
 8010cb2:	f88d 300c 	strb.w	r3, [sp, #12]
 8010cb6:	f7ff fcf7 	bl	80106a8 <_tcp_send_package>
 8010cba:	2309      	movs	r3, #9
 8010cbc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8010cc0:	6963      	ldr	r3, [r4, #20]
 8010cc2:	3301      	adds	r3, #1
 8010cc4:	6163      	str	r3, [r4, #20]
 8010cc6:	2000      	movs	r0, #0
 8010cc8:	e01b      	b.n	8010d02 <tcp_read+0x72>
 8010cca:	f44f 6337 	mov.w	r3, #2928	; 0xb70
 8010cce:	4358      	muls	r0, r3
 8010cd0:	4a0e      	ldr	r2, [pc, #56]	; (8010d0c <tcp_read+0x7c>)
 8010cd2:	1817      	adds	r7, r2, r0
 8010cd4:	887b      	ldrh	r3, [r7, #2]
 8010cd6:	5a15      	ldrh	r5, [r2, r0]
 8010cd8:	429d      	cmp	r5, r3
 8010cda:	d0f4      	beq.n	8010cc6 <tcp_read+0x36>
 8010cdc:	f240 55b6 	movw	r5, #1462	; 0x5b6
 8010ce0:	435d      	muls	r5, r3
 8010ce2:	1d06      	adds	r6, r0, #4
 8010ce4:	442e      	add	r6, r5
 8010ce6:	4416      	add	r6, r2
 8010ce8:	4428      	add	r0, r5
 8010cea:	600e      	str	r6, [r1, #0]
 8010cec:	4402      	add	r2, r0
 8010cee:	f8b2 05b8 	ldrh.w	r0, [r2, #1464]	; 0x5b8
 8010cf2:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8010cf4:	3301      	adds	r3, #1
 8010cf6:	f202 52b4 	addw	r2, r2, #1460	; 0x5b4
 8010cfa:	f003 0301 	and.w	r3, r3, #1
 8010cfe:	8722      	strh	r2, [r4, #56]	; 0x38
 8010d00:	807b      	strh	r3, [r7, #2]
 8010d02:	b005      	add	sp, #20
 8010d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d06:	bf00      	nop
 8010d08:	20003570 	andcs	r3, r0, r0, ror r5
 8010d0c:	20002a00 	andcs	r2, r0, r0, lsl #20

08010d10 <memcpy.isra.0>:
 8010d10:	3801      	subs	r0, #1
 8010d12:	440a      	add	r2, r1
 8010d14:	4291      	cmp	r1, r2
 8010d16:	d100      	bne.n	8010d1a <memcpy.isra.0+0xa>
 8010d18:	4770      	bx	lr
 8010d1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d1e:	f800 3f01 	strb.w	r3, [r0, #1]!
 8010d22:	e7f7      	b.n	8010d14 <memcpy.isra.0+0x4>

08010d24 <net_memcpy>:
 8010d24:	ea41 0300 	orr.w	r3, r1, r0
 8010d28:	079b      	lsls	r3, r3, #30
 8010d2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d2c:	d115      	bne.n	8010d5a <net_memcpy+0x36>
 8010d2e:	f022 0303 	bic.w	r3, r2, #3
 8010d32:	1f04      	subs	r4, r0, #4
 8010d34:	0895      	lsrs	r5, r2, #2
 8010d36:	18ce      	adds	r6, r1, r3
 8010d38:	42b1      	cmp	r1, r6
 8010d3a:	d109      	bne.n	8010d50 <net_memcpy+0x2c>
 8010d3c:	f06f 0403 	mvn.w	r4, #3
 8010d40:	fb04 2205 	mla	r2, r4, r5, r2
 8010d44:	4403      	add	r3, r0
 8010d46:	3b01      	subs	r3, #1
 8010d48:	440a      	add	r2, r1
 8010d4a:	4291      	cmp	r1, r2
 8010d4c:	d107      	bne.n	8010d5e <net_memcpy+0x3a>
 8010d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d50:	f851 7b04 	ldr.w	r7, [r1], #4
 8010d54:	f844 7f04 	str.w	r7, [r4, #4]!
 8010d58:	e7ee      	b.n	8010d38 <net_memcpy+0x14>
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	e7f3      	b.n	8010d46 <net_memcpy+0x22>
 8010d5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010d66:	e7f0      	b.n	8010d4a <net_memcpy+0x26>

08010d68 <udp_set_ip>:
 8010d68:	2204      	movs	r2, #4
 8010d6a:	b513      	push	{r0, r1, r4, lr}
 8010d6c:	4604      	mov	r4, r0
 8010d6e:	6803      	ldr	r3, [r0, #0]
 8010d70:	eb0d 0102 	add.w	r1, sp, r2
 8010d74:	4808      	ldr	r0, [pc, #32]	; (8010d98 <udp_set_ip+0x30>)
 8010d76:	9301      	str	r3, [sp, #4]
 8010d78:	f7ff ffca 	bl	8010d10 <memcpy.isra.0>
 8010d7c:	6862      	ldr	r2, [r4, #4]
 8010d7e:	4b07      	ldr	r3, [pc, #28]	; (8010d9c <udp_set_ip+0x34>)
 8010d80:	43d1      	mvns	r1, r2
 8010d82:	6019      	str	r1, [r3, #0]
 8010d84:	6823      	ldr	r3, [r4, #0]
 8010d86:	4013      	ands	r3, r2
 8010d88:	4a05      	ldr	r2, [pc, #20]	; (8010da0 <udp_set_ip+0x38>)
 8010d8a:	6013      	str	r3, [r2, #0]
 8010d8c:	68a2      	ldr	r2, [r4, #8]
 8010d8e:	4b05      	ldr	r3, [pc, #20]	; (8010da4 <udp_set_ip+0x3c>)
 8010d90:	601a      	str	r2, [r3, #0]
 8010d92:	b002      	add	sp, #8
 8010d94:	bd10      	pop	{r4, pc}
 8010d96:	bf00      	nop
 8010d98:	2000988a 	andcs	r9, r0, sl, lsl #17
 8010d9c:	20003ba0 	andcs	r3, r0, r0, lsr #23
 8010da0:	20003ba8 	andcs	r3, r0, r8, lsr #23
 8010da4:	20003ba4 	andcs	r3, r0, r4, lsr #23

08010da8 <udp_init>:
 8010da8:	b570      	push	{r4, r5, r6, lr}
 8010daa:	2200      	movs	r2, #0
 8010dac:	2508      	movs	r5, #8
 8010dae:	460e      	mov	r6, r1
 8010db0:	4b12      	ldr	r3, [pc, #72]	; (8010dfc <udp_init+0x54>)
 8010db2:	4913      	ldr	r1, [pc, #76]	; (8010e00 <udp_init+0x58>)
 8010db4:	3d01      	subs	r5, #1
 8010db6:	801a      	strh	r2, [r3, #0]
 8010db8:	805a      	strh	r2, [r3, #2]
 8010dba:	f841 2b04 	str.w	r2, [r1], #4
 8010dbe:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 8010dc2:	d1f7      	bne.n	8010db4 <udp_init+0xc>
 8010dc4:	2206      	movs	r2, #6
 8010dc6:	4c0f      	ldr	r4, [pc, #60]	; (8010e04 <udp_init+0x5c>)
 8010dc8:	4b0f      	ldr	r3, [pc, #60]	; (8010e08 <udp_init+0x60>)
 8010dca:	4601      	mov	r1, r0
 8010dcc:	18a0      	adds	r0, r4, r2
 8010dce:	801d      	strh	r5, [r3, #0]
 8010dd0:	f7ff ff9e 	bl	8010d10 <memcpy.isra.0>
 8010dd4:	2308      	movs	r3, #8
 8010dd6:	7323      	strb	r3, [r4, #12]
 8010dd8:	2345      	movs	r3, #69	; 0x45
 8010dda:	73a3      	strb	r3, [r4, #14]
 8010ddc:	2340      	movs	r3, #64	; 0x40
 8010dde:	7523      	strb	r3, [r4, #20]
 8010de0:	75a3      	strb	r3, [r4, #22]
 8010de2:	2311      	movs	r3, #17
 8010de4:	4630      	mov	r0, r6
 8010de6:	7365      	strb	r5, [r4, #13]
 8010de8:	73e5      	strb	r5, [r4, #15]
 8010dea:	7565      	strb	r5, [r4, #21]
 8010dec:	75e3      	strb	r3, [r4, #23]
 8010dee:	f7ff ffbb 	bl	8010d68 <udp_set_ip>
 8010df2:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 8010df6:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 8010dfa:	bd70      	pop	{r4, r5, r6, pc}
 8010dfc:	20003bd0 	ldrdcs	r3, [r0], -r0
 8010e00:	20003bb0 			; <UNDEFINED> instruction: 0x20003bb0
 8010e04:	20009870 	andcs	r9, r0, r0, ror r8
 8010e08:	20003bac 	andcs	r3, r0, ip, lsr #23

08010e0c <udp_shutdown>:
 8010e0c:	4770      	bx	lr
	...

08010e10 <udp_handle>:
 8010e10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010e14:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 8010e16:	4607      	mov	r7, r0
 8010e18:	ba5b      	rev16	r3, r3
 8010e1a:	b29b      	uxth	r3, r3
 8010e1c:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
 8010e20:	2a01      	cmp	r2, #1
 8010e22:	d904      	bls.n	8010e2e <udp_handle+0x1e>
 8010e24:	2b7b      	cmp	r3, #123	; 0x7b
 8010e26:	d002      	beq.n	8010e2e <udp_handle+0x1e>
 8010e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010e2c:	d308      	bcc.n	8010e40 <udp_handle+0x30>
 8010e2e:	2400      	movs	r4, #0
 8010e30:	4a1f      	ldr	r2, [pc, #124]	; (8010eb0 <udp_handle+0xa0>)
 8010e32:	f852 1b04 	ldr.w	r1, [r2], #4
 8010e36:	4299      	cmp	r1, r3
 8010e38:	d005      	beq.n	8010e46 <udp_handle+0x36>
 8010e3a:	3401      	adds	r4, #1
 8010e3c:	2c08      	cmp	r4, #8
 8010e3e:	d1f8      	bne.n	8010e32 <udp_handle+0x22>
 8010e40:	b002      	add	sp, #8
 8010e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e46:	f640 3394 	movw	r3, #2964	; 0xb94
 8010e4a:	8cfe      	ldrh	r6, [r7, #38]	; 0x26
 8010e4c:	435c      	muls	r4, r3
 8010e4e:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 8010e52:	ba76      	rev16	r6, r6
 8010e54:	3e08      	subs	r6, #8
 8010e56:	b2b6      	uxth	r6, r6
 8010e58:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 8010e5c:	bf28      	it	cs
 8010e5e:	f44f 66b8 	movcs.w	r6, #1472	; 0x5c0
 8010e62:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8010eb4 <udp_handle+0xa4>
 8010e66:	1d20      	adds	r0, r4, #4
 8010e68:	f838 5004 	ldrh.w	r5, [r8, r4]
 8010e6c:	4632      	mov	r2, r6
 8010e6e:	435d      	muls	r5, r3
 8010e70:	4428      	add	r0, r5
 8010e72:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 8010e76:	4440      	add	r0, r8
 8010e78:	f7ff ff4a 	bl	8010d10 <memcpy.isra.0>
 8010e7c:	2204      	movs	r2, #4
 8010e7e:	f107 011a 	add.w	r1, r7, #26
 8010e82:	eb0d 0002 	add.w	r0, sp, r2
 8010e86:	f7ff ff43 	bl	8010d10 <memcpy.isra.0>
 8010e8a:	9a01      	ldr	r2, [sp, #4]
 8010e8c:	192b      	adds	r3, r5, r4
 8010e8e:	4443      	add	r3, r8
 8010e90:	f8c3 25c4 	str.w	r2, [r3, #1476]	; 0x5c4
 8010e94:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010e96:	f8a3 65ca 	strh.w	r6, [r3, #1482]	; 0x5ca
 8010e9a:	ba52      	rev16	r2, r2
 8010e9c:	f8a3 25c8 	strh.w	r2, [r3, #1480]	; 0x5c8
 8010ea0:	f838 3004 	ldrh.w	r3, [r8, r4]
 8010ea4:	3301      	adds	r3, #1
 8010ea6:	f003 0301 	and.w	r3, r3, #1
 8010eaa:	f828 3004 	strh.w	r3, [r8, r4]
 8010eae:	e7c7      	b.n	8010e40 <udp_handle+0x30>
 8010eb0:	20003bb0 			; <UNDEFINED> instruction: 0x20003bb0
 8010eb4:	20003bd0 	ldrdcs	r3, [r0], -r0

08010eb8 <udp_bind>:
 8010eb8:	4a0a      	ldr	r2, [pc, #40]	; (8010ee4 <udp_bind+0x2c>)
 8010eba:	4603      	mov	r3, r0
 8010ebc:	b510      	push	{r4, lr}
 8010ebe:	2000      	movs	r0, #0
 8010ec0:	4614      	mov	r4, r2
 8010ec2:	f852 1b04 	ldr.w	r1, [r2], #4
 8010ec6:	4299      	cmp	r1, r3
 8010ec8:	d008      	beq.n	8010edc <udp_bind+0x24>
 8010eca:	b141      	cbz	r1, 8010ede <udp_bind+0x26>
 8010ecc:	3001      	adds	r0, #1
 8010ece:	2808      	cmp	r0, #8
 8010ed0:	d1f7      	bne.n	8010ec2 <udp_bind+0xa>
 8010ed2:	4805      	ldr	r0, [pc, #20]	; (8010ee8 <udp_bind+0x30>)
 8010ed4:	f003 fa16 	bl	8014304 <console_error>
 8010ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010edc:	bd10      	pop	{r4, pc}
 8010ede:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 8010ee2:	e7fb      	b.n	8010edc <udp_bind+0x24>
 8010ee4:	20003bb0 			; <UNDEFINED> instruction: 0x20003bb0
 8010ee8:	080181b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r8, pc}

08010eec <udp_unbind>:
 8010eec:	4a0c      	ldr	r2, [pc, #48]	; (8010f20 <udp_unbind+0x34>)
 8010eee:	2300      	movs	r3, #0
 8010ef0:	4611      	mov	r1, r2
 8010ef2:	b510      	push	{r4, lr}
 8010ef4:	f852 4b04 	ldr.w	r4, [r2], #4
 8010ef8:	4284      	cmp	r4, r0
 8010efa:	d108      	bne.n	8010f0e <udp_unbind+0x22>
 8010efc:	2000      	movs	r0, #0
 8010efe:	f640 3294 	movw	r2, #2964	; 0xb94
 8010f02:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8010f06:	4353      	muls	r3, r2
 8010f08:	4a06      	ldr	r2, [pc, #24]	; (8010f24 <udp_unbind+0x38>)
 8010f0a:	5098      	str	r0, [r3, r2]
 8010f0c:	bd10      	pop	{r4, pc}
 8010f0e:	3301      	adds	r3, #1
 8010f10:	2b08      	cmp	r3, #8
 8010f12:	d1ef      	bne.n	8010ef4 <udp_unbind+0x8>
 8010f14:	4804      	ldr	r0, [pc, #16]	; (8010f28 <udp_unbind+0x3c>)
 8010f16:	f003 f9f5 	bl	8014304 <console_error>
 8010f1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f1e:	e7f5      	b.n	8010f0c <udp_unbind+0x20>
 8010f20:	20003bb0 			; <UNDEFINED> instruction: 0x20003bb0
 8010f24:	20003bd0 	ldrdcs	r3, [r0], -r0
 8010f28:	080181be 	stmdaeq	r1, {r1, r2, r3, r4, r5, r7, r8, pc}

08010f2c <udp_recv>:
 8010f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f30:	4604      	mov	r4, r0
 8010f32:	4698      	mov	r8, r3
 8010f34:	f640 3394 	movw	r3, #2964	; 0xb94
 8010f38:	435c      	muls	r4, r3
 8010f3a:	4608      	mov	r0, r1
 8010f3c:	4915      	ldr	r1, [pc, #84]	; (8010f94 <udp_recv+0x68>)
 8010f3e:	190f      	adds	r7, r1, r4
 8010f40:	f8b7 c002 	ldrh.w	ip, [r7, #2]
 8010f44:	5b0b      	ldrh	r3, [r1, r4]
 8010f46:	4563      	cmp	r3, ip
 8010f48:	d021      	beq.n	8010f8e <udp_recv+0x62>
 8010f4a:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 8010f4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8010f52:	eb0c 0604 	add.w	r6, ip, r4
 8010f56:	440e      	add	r6, r1
 8010f58:	f8b6 55ca 	ldrh.w	r5, [r6, #1482]	; 0x5ca
 8010f5c:	3404      	adds	r4, #4
 8010f5e:	4295      	cmp	r5, r2
 8010f60:	bf28      	it	cs
 8010f62:	4615      	movcs	r5, r2
 8010f64:	4464      	add	r4, ip
 8010f66:	462a      	mov	r2, r5
 8010f68:	4421      	add	r1, r4
 8010f6a:	f7ff fedb 	bl	8010d24 <net_memcpy>
 8010f6e:	f8d6 35c4 	ldr.w	r3, [r6, #1476]	; 0x5c4
 8010f72:	f8c8 3000 	str.w	r3, [r8]
 8010f76:	f8b6 25c8 	ldrh.w	r2, [r6, #1480]	; 0x5c8
 8010f7a:	9b06      	ldr	r3, [sp, #24]
 8010f7c:	801a      	strh	r2, [r3, #0]
 8010f7e:	887b      	ldrh	r3, [r7, #2]
 8010f80:	3301      	adds	r3, #1
 8010f82:	f003 0301 	and.w	r3, r3, #1
 8010f86:	807b      	strh	r3, [r7, #2]
 8010f88:	4628      	mov	r0, r5
 8010f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f8e:	2500      	movs	r5, #0
 8010f90:	e7fa      	b.n	8010f88 <udp_recv+0x5c>
 8010f92:	bf00      	nop
 8010f94:	20003bd0 	ldrdcs	r3, [r0], -r0

08010f98 <udp_recv2>:
 8010f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f9a:	f640 3594 	movw	r5, #2964	; 0xb94
 8010f9e:	4368      	muls	r0, r5
 8010fa0:	4c0f      	ldr	r4, [pc, #60]	; (8010fe0 <udp_recv2+0x48>)
 8010fa2:	1827      	adds	r7, r4, r0
 8010fa4:	887d      	ldrh	r5, [r7, #2]
 8010fa6:	5a26      	ldrh	r6, [r4, r0]
 8010fa8:	42ae      	cmp	r6, r5
 8010faa:	d017      	beq.n	8010fdc <udp_recv2+0x44>
 8010fac:	f44f 6cb9 	mov.w	ip, #1480	; 0x5c8
 8010fb0:	fb0c f505 	mul.w	r5, ip, r5
 8010fb4:	1d06      	adds	r6, r0, #4
 8010fb6:	442e      	add	r6, r5
 8010fb8:	4405      	add	r5, r0
 8010fba:	4426      	add	r6, r4
 8010fbc:	442c      	add	r4, r5
 8010fbe:	600e      	str	r6, [r1, #0]
 8010fc0:	f8d4 15c4 	ldr.w	r1, [r4, #1476]	; 0x5c4
 8010fc4:	6011      	str	r1, [r2, #0]
 8010fc6:	f8b4 25c8 	ldrh.w	r2, [r4, #1480]	; 0x5c8
 8010fca:	801a      	strh	r2, [r3, #0]
 8010fcc:	887b      	ldrh	r3, [r7, #2]
 8010fce:	f8b4 05ca 	ldrh.w	r0, [r4, #1482]	; 0x5ca
 8010fd2:	3301      	adds	r3, #1
 8010fd4:	f003 0301 	and.w	r3, r3, #1
 8010fd8:	807b      	strh	r3, [r7, #2]
 8010fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fdc:	2000      	movs	r0, #0
 8010fde:	e7fc      	b.n	8010fda <udp_recv2+0x42>
 8010fe0:	20003bd0 	ldrdcs	r3, [r0], -r0

08010fe4 <udp_send>:
 8010fe4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8010fe8:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8011120 <udp_send+0x13c>
 8010fec:	461c      	mov	r4, r3
 8010fee:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
 8010ff2:	4607      	mov	r7, r0
 8010ff4:	4688      	mov	r8, r1
 8010ff6:	4616      	mov	r6, r2
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	f000 808e 	beq.w	801111a <udp_send+0x136>
 8010ffe:	1c63      	adds	r3, r4, #1
 8011000:	d144      	bne.n	801108c <udp_send+0xa8>
 8011002:	4848      	ldr	r0, [pc, #288]	; (8011124 <udp_send+0x140>)
 8011004:	2107      	movs	r1, #7
 8011006:	4602      	mov	r2, r0
 8011008:	23ff      	movs	r3, #255	; 0xff
 801100a:	e001      	b.n	8011010 <udp_send+0x2c>
 801100c:	f800 3b01 	strb.w	r3, [r0], #1
 8011010:	3901      	subs	r1, #1
 8011012:	d1fb      	bne.n	801100c <udp_send+0x28>
 8011014:	7793      	strb	r3, [r2, #30]
 8011016:	77d3      	strb	r3, [r2, #31]
 8011018:	f882 3020 	strb.w	r3, [r2, #32]
 801101c:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 8011020:	2500      	movs	r5, #0
 8011022:	f8df a104 	ldr.w	sl, [pc, #260]	; 8011128 <udp_send+0x144>
 8011026:	4c3f      	ldr	r4, [pc, #252]	; (8011124 <udp_send+0x140>)
 8011028:	f8ba 3000 	ldrh.w	r3, [sl]
 801102c:	2114      	movs	r1, #20
 801102e:	8263      	strh	r3, [r4, #18]
 8011030:	f106 031c 	add.w	r3, r6, #28
 8011034:	ba5b      	rev16	r3, r3
 8011036:	f104 000e 	add.w	r0, r4, #14
 801103a:	8223      	strh	r3, [r4, #16]
 801103c:	7625      	strb	r5, [r4, #24]
 801103e:	7665      	strb	r5, [r4, #25]
 8011040:	f001 fe6a 	bl	8012d18 <net_chksum>
 8011044:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
 8011048:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 801104c:	ba5b      	rev16	r3, r3
 801104e:	8463      	strh	r3, [r4, #34]	; 0x22
 8011050:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8011054:	4632      	mov	r2, r6
 8011056:	ba5b      	rev16	r3, r3
 8011058:	84a3      	strh	r3, [r4, #36]	; 0x24
 801105a:	f106 0308 	add.w	r3, r6, #8
 801105e:	ba5b      	rev16	r3, r3
 8011060:	bf28      	it	cs
 8011062:	f44f 62b8 	movcs.w	r2, #1472	; 0x5c0
 8011066:	4641      	mov	r1, r8
 8011068:	8320      	strh	r0, [r4, #24]
 801106a:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 801106e:	84e3      	strh	r3, [r4, #38]	; 0x26
 8011070:	f7ff fe58 	bl	8010d24 <net_memcpy>
 8011074:	4620      	mov	r0, r4
 8011076:	f106 012a 	add.w	r1, r6, #42	; 0x2a
 801107a:	f004 fa01 	bl	8015480 <emac_eth_send>
 801107e:	f8ba 3000 	ldrh.w	r3, [sl]
 8011082:	4628      	mov	r0, r5
 8011084:	3301      	adds	r3, #1
 8011086:	f8aa 3000 	strh.w	r3, [sl]
 801108a:	e037      	b.n	80110fc <udp_send+0x118>
 801108c:	4b27      	ldr	r3, [pc, #156]	; (801112c <udp_send+0x148>)
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	43a3      	bics	r3, r4
 8011092:	d10f      	bne.n	80110b4 <udp_send+0xd0>
 8011094:	2307      	movs	r3, #7
 8011096:	21ff      	movs	r1, #255	; 0xff
 8011098:	4a22      	ldr	r2, [pc, #136]	; (8011124 <udp_send+0x140>)
 801109a:	e001      	b.n	80110a0 <udp_send+0xbc>
 801109c:	f802 1b01 	strb.w	r1, [r2], #1
 80110a0:	3b01      	subs	r3, #1
 80110a2:	d1fb      	bne.n	801109c <udp_send+0xb8>
 80110a4:	2204      	movs	r2, #4
 80110a6:	4822      	ldr	r0, [pc, #136]	; (8011130 <udp_send+0x14c>)
 80110a8:	eb0d 0102 	add.w	r1, sp, r2
 80110ac:	9401      	str	r4, [sp, #4]
 80110ae:	f7ff fe2f 	bl	8010d10 <memcpy.isra.0>
 80110b2:	e7b5      	b.n	8011020 <udp_send+0x3c>
 80110b4:	f004 03e0 	and.w	r3, r4, #224	; 0xe0
 80110b8:	2be0      	cmp	r3, #224	; 0xe0
 80110ba:	d10e      	bne.n	80110da <udp_send+0xf6>
 80110bc:	491d      	ldr	r1, [pc, #116]	; (8011134 <udp_send+0x150>)
 80110be:	f3c4 2306 	ubfx	r3, r4, #8, #7
 80110c2:	70cb      	strb	r3, [r1, #3]
 80110c4:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80110c8:	710b      	strb	r3, [r1, #4]
 80110ca:	f3c4 6307 	ubfx	r3, r4, #24, #8
 80110ce:	2206      	movs	r2, #6
 80110d0:	4814      	ldr	r0, [pc, #80]	; (8011124 <udp_send+0x140>)
 80110d2:	714b      	strb	r3, [r1, #5]
 80110d4:	f7ff fe1c 	bl	8010d10 <memcpy.isra.0>
 80110d8:	e7e4      	b.n	80110a4 <udp_send+0xc0>
 80110da:	4b17      	ldr	r3, [pc, #92]	; (8011138 <udp_send+0x154>)
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	43a3      	bics	r3, r4
 80110e0:	d00f      	beq.n	8011102 <udp_send+0x11e>
 80110e2:	4d16      	ldr	r5, [pc, #88]	; (801113c <udp_send+0x158>)
 80110e4:	490f      	ldr	r1, [pc, #60]	; (8011124 <udp_send+0x140>)
 80110e6:	6828      	ldr	r0, [r5, #0]
 80110e8:	f001 f9e0 	bl	80124ac <arp_cache_lookup>
 80110ec:	682b      	ldr	r3, [r5, #0]
 80110ee:	4298      	cmp	r0, r3
 80110f0:	d0d8      	beq.n	80110a4 <udp_send+0xc0>
 80110f2:	4813      	ldr	r0, [pc, #76]	; (8011140 <udp_send+0x15c>)
 80110f4:	f003 f906 	bl	8014304 <console_error>
 80110f8:	f06f 0002 	mvn.w	r0, #2
 80110fc:	b002      	add	sp, #8
 80110fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011102:	4620      	mov	r0, r4
 8011104:	4907      	ldr	r1, [pc, #28]	; (8011124 <udp_send+0x140>)
 8011106:	f001 f9d1 	bl	80124ac <arp_cache_lookup>
 801110a:	42a0      	cmp	r0, r4
 801110c:	d0ca      	beq.n	80110a4 <udp_send+0xc0>
 801110e:	480d      	ldr	r0, [pc, #52]	; (8011144 <udp_send+0x160>)
 8011110:	f003 f8f8 	bl	8014304 <console_error>
 8011114:	f06f 0001 	mvn.w	r0, #1
 8011118:	e7f0      	b.n	80110fc <udp_send+0x118>
 801111a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801111e:	e7ed      	b.n	80110fc <udp_send+0x118>
 8011120:	20003bb0 			; <UNDEFINED> instruction: 0x20003bb0
 8011124:	20009870 	andcs	r9, r0, r0, ror r8
 8011128:	20003bac 	andcs	r3, r0, ip, lsr #23
 801112c:	20003ba0 	andcs	r3, r0, r0, lsr #23
 8011130:	2000988e 	andcs	r9, r0, lr, lsl #17
 8011134:	20000000 	andcs	r0, r0, r0
 8011138:	20003ba8 	andcs	r3, r0, r8, lsr #23
 801113c:	20003ba4 	andcs	r3, r0, r4, lsr #23
 8011140:	080181c6 	stmdaeq	r1, {r1, r2, r6, r7, r8, pc}
 8011144:	080181ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, pc}

08011148 <strlen>:
 8011148:	4603      	mov	r3, r0
 801114a:	461a      	mov	r2, r3
 801114c:	7811      	ldrb	r1, [r2, #0]
 801114e:	3301      	adds	r3, #1
 8011150:	2900      	cmp	r1, #0
 8011152:	d1fa      	bne.n	801114a <strlen+0x2>
 8011154:	1a10      	subs	r0, r2, r0
 8011156:	4770      	bx	lr

08011158 <strcmp>:
 8011158:	1e43      	subs	r3, r0, #1
 801115a:	3901      	subs	r1, #1
 801115c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8011160:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011164:	4290      	cmp	r0, r2
 8011166:	d102      	bne.n	801116e <strcmp+0x16>
 8011168:	2800      	cmp	r0, #0
 801116a:	d1f7      	bne.n	801115c <strcmp+0x4>
 801116c:	4770      	bx	lr
 801116e:	1a80      	subs	r0, r0, r2
 8011170:	4770      	bx	lr

08011172 <strcpy.isra.0>:
 8011172:	3801      	subs	r0, #1
 8011174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011178:	f800 3f01 	strb.w	r3, [r0, #1]!
 801117c:	2b00      	cmp	r3, #0
 801117e:	d1f9      	bne.n	8011174 <strcpy.isra.0+0x2>
 8011180:	4770      	bx	lr

08011182 <strcat.isra.0>:
 8011182:	b538      	push	{r3, r4, r5, lr}
 8011184:	4604      	mov	r4, r0
 8011186:	460d      	mov	r5, r1
 8011188:	f7ff ffde 	bl	8011148 <strlen>
 801118c:	4629      	mov	r1, r5
 801118e:	4420      	add	r0, r4
 8011190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011194:	f7ff bfed 	b.w	8011172 <strcpy.isra.0>

08011198 <MDNS::MDNS()>:
 8011198:	b513      	push	{r0, r1, r4, lr}
 801119a:	4604      	mov	r4, r0
 801119c:	a901      	add	r1, sp, #4
 801119e:	4804      	ldr	r0, [pc, #16]	; (80111b0 <MDNS::MDNS()+0x18>)
 80111a0:	f003 fa18 	bl	80145d4 <inet_aton>
 80111a4:	4620      	mov	r0, r4
 80111a6:	4b03      	ldr	r3, [pc, #12]	; (80111b4 <MDNS::MDNS()+0x1c>)
 80111a8:	9a01      	ldr	r2, [sp, #4]
 80111aa:	601a      	str	r2, [r3, #0]
 80111ac:	b002      	add	sp, #8
 80111ae:	bd10      	pop	{r4, pc}
 80111b0:	0801820c 	stmdaeq	r1, {r2, r3, r9, pc}
 80111b4:	20009e64 	andcs	r9, r0, r4, ror #28

080111b8 <MDNS::SetName(char const*)>:
 80111b8:	b538      	push	{r3, r4, r5, lr}
 80111ba:	4d0b      	ldr	r5, [pc, #44]	; (80111e8 <MDNS::SetName(char const*)+0x30>)
 80111bc:	460c      	mov	r4, r1
 80111be:	6828      	ldr	r0, [r5, #0]
 80111c0:	b108      	cbz	r0, 80111c6 <MDNS::SetName(char const*)+0xe>
 80111c2:	f003 fa01 	bl	80145c8 <operator delete[](void*)>
 80111c6:	4620      	mov	r0, r4
 80111c8:	f7ff ffbe 	bl	8011148 <strlen>
 80111cc:	3007      	adds	r0, #7
 80111ce:	f003 f9ff 	bl	80145d0 <operator new[](unsigned int)>
 80111d2:	4621      	mov	r1, r4
 80111d4:	6028      	str	r0, [r5, #0]
 80111d6:	f7ff ffcc 	bl	8011172 <strcpy.isra.0>
 80111da:	6828      	ldr	r0, [r5, #0]
 80111dc:	4903      	ldr	r1, [pc, #12]	; (80111ec <MDNS::SetName(char const*)+0x34>)
 80111de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80111e2:	f7ff bfce 	b.w	8011182 <strcat.isra.0>
 80111e6:	bf00      	nop
 80111e8:	2000a294 	mulcs	r0, r4, r2
 80111ec:	0801821c 	stmdaeq	r1, {r2, r3, r4, r9, pc}

080111f0 <MDNS::DecodeDNSNameNotation(char const*, char*)>:
 80111f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80111f4:	f04f 0e00 	mov.w	lr, #0
 80111f8:	262e      	movs	r6, #46	; 0x2e
 80111fa:	4675      	mov	r5, lr
 80111fc:	4694      	mov	ip, r2
 80111fe:	4f1d      	ldr	r7, [pc, #116]	; (8011274 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x84>)
 8011200:	4a1d      	ldr	r2, [pc, #116]	; (8011278 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x88>)
 8011202:	780b      	ldrb	r3, [r1, #0]
 8011204:	1c68      	adds	r0, r5, #1
 8011206:	b383      	cbz	r3, 801126a <MDNS::DecodeDNSNameNotation(char const*, char*)+0x7a>
 8011208:	2b3f      	cmp	r3, #63	; 0x3f
 801120a:	d91d      	bls.n	8011248 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x58>
 801120c:	f1be 0f00 	cmp.w	lr, #0
 8011210:	bf08      	it	eq
 8011212:	4605      	moveq	r5, r0
 8011214:	2000      	movs	r0, #0
 8011216:	7849      	ldrb	r1, [r1, #1]
 8011218:	ea07 2303 	and.w	r3, r7, r3, lsl #8
 801121c:	430b      	orrs	r3, r1
 801121e:	6811      	ldr	r1, [r2, #0]
 8011220:	5ccc      	ldrb	r4, [r1, r3]
 8011222:	3301      	adds	r3, #1
 8011224:	440b      	add	r3, r1
 8011226:	42a0      	cmp	r0, r4
 8011228:	5c19      	ldrb	r1, [r3, r0]
 801122a:	d309      	bcc.n	8011240 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x50>
 801122c:	f04f 0e01 	mov.w	lr, #1
 8011230:	1919      	adds	r1, r3, r4
 8011232:	4464      	add	r4, ip
 8011234:	780b      	ldrb	r3, [r1, #0]
 8011236:	b10b      	cbz	r3, 801123c <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4c>
 8011238:	f804 6b01 	strb.w	r6, [r4], #1
 801123c:	46a4      	mov	ip, r4
 801123e:	e7e0      	b.n	8011202 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x12>
 8011240:	f80c 1000 	strb.w	r1, [ip, r0]
 8011244:	3001      	adds	r0, #1
 8011246:	e7ee      	b.n	8011226 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x36>
 8011248:	4688      	mov	r8, r1
 801124a:	eb0c 0403 	add.w	r4, ip, r3
 801124e:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 8011252:	f80c 9b01 	strb.w	r9, [ip], #1
 8011256:	4564      	cmp	r4, ip
 8011258:	d1f9      	bne.n	801124e <MDNS::DecodeDNSNameNotation(char const*, char*)+0x5e>
 801125a:	f103 0c01 	add.w	ip, r3, #1
 801125e:	4461      	add	r1, ip
 8011260:	f1be 0f00 	cmp.w	lr, #0
 8011264:	d1e6      	bne.n	8011234 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x44>
 8011266:	18c5      	adds	r5, r0, r3
 8011268:	e7e4      	b.n	8011234 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x44>
 801126a:	f88c 3000 	strb.w	r3, [ip]
 801126e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011272:	bf00      	nop
 8011274:	ffff3f00 			; <UNDEFINED> instruction: 0xffff3f00
 8011278:	2000a298 	mulcs	r0, r8, r2

0801127c <MDNS::FindFirstDotFromRight(char const*) const>:
 801127c:	b510      	push	{r4, lr}
 801127e:	4608      	mov	r0, r1
 8011280:	460c      	mov	r4, r1
 8011282:	f7ff ff61 	bl	8011148 <strlen>
 8011286:	4420      	add	r0, r4
 8011288:	42a0      	cmp	r0, r4
 801128a:	d903      	bls.n	8011294 <MDNS::FindFirstDotFromRight(char const*) const+0x18>
 801128c:	f810 3901 	ldrb.w	r3, [r0], #-1
 8011290:	2b2e      	cmp	r3, #46	; 0x2e
 8011292:	d1f9      	bne.n	8011288 <MDNS::FindFirstDotFromRight(char const*) const+0xc>
 8011294:	3001      	adds	r0, #1
 8011296:	bd10      	pop	{r4, pc}

08011298 <MDNS::WriteDnsName(char const*, char*, bool)>:
 8011298:	4610      	mov	r0, r2
 801129a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801129c:	460f      	mov	r7, r1
 801129e:	1c44      	adds	r4, r0, #1
 80112a0:	463d      	mov	r5, r7
 80112a2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80112a6:	b126      	cbz	r6, 80112b2 <MDNS::WriteDnsName(char const*, char*, bool)+0x1a>
 80112a8:	2e2e      	cmp	r6, #46	; 0x2e
 80112aa:	d002      	beq.n	80112b2 <MDNS::WriteDnsName(char const*, char*, bool)+0x1a>
 80112ac:	f804 6b01 	strb.w	r6, [r4], #1
 80112b0:	e7f6      	b.n	80112a0 <MDNS::WriteDnsName(char const*, char*, bool)+0x8>
 80112b2:	1a69      	subs	r1, r5, r1
 80112b4:	7001      	strb	r1, [r0, #0]
 80112b6:	7829      	ldrb	r1, [r5, #0]
 80112b8:	b921      	cbnz	r1, 80112c4 <MDNS::WriteDnsName(char const*, char*, bool)+0x2c>
 80112ba:	b10b      	cbz	r3, 80112c0 <MDNS::WriteDnsName(char const*, char*, bool)+0x28>
 80112bc:	f804 1b01 	strb.w	r1, [r4], #1
 80112c0:	1aa0      	subs	r0, r4, r2
 80112c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112c4:	4620      	mov	r0, r4
 80112c6:	1c69      	adds	r1, r5, #1
 80112c8:	e7e8      	b.n	801129c <MDNS::WriteDnsName(char const*, char*, bool)+0x4>
	...

080112cc <MDNS::CreateAnswerLocalIpAddress()>:
 80112cc:	2384      	movs	r3, #132	; 0x84
 80112ce:	b510      	push	{r4, lr}
 80112d0:	4c0f      	ldr	r4, [pc, #60]	; (8011310 <MDNS::CreateAnswerLocalIpAddress()+0x44>)
 80112d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80112d6:	80e3      	strh	r3, [r4, #6]
 80112d8:	2300      	movs	r3, #0
 80112da:	490e      	ldr	r1, [pc, #56]	; (8011314 <MDNS::CreateAnswerLocalIpAddress()+0x48>)
 80112dc:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80112e0:	6809      	ldr	r1, [r1, #0]
 80112e2:	f104 0210 	add.w	r2, r4, #16
 80112e6:	2301      	movs	r3, #1
 80112e8:	f7ff ffd6 	bl	8011298 <MDNS::WriteDnsName(char const*, char*, bool)>
 80112ec:	490a      	ldr	r1, [pc, #40]	; (8011318 <MDNS::CreateAnswerLocalIpAddress()+0x4c>)
 80112ee:	1813      	adds	r3, r2, r0
 80112f0:	5011      	str	r1, [r2, r0]
 80112f2:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 80112f6:	605a      	str	r2, [r3, #4]
 80112f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80112fc:	811a      	strh	r2, [r3, #8]
 80112fe:	4a07      	ldr	r2, [pc, #28]	; (801131c <MDNS::CreateAnswerLocalIpAddress()+0x50>)
 8011300:	6812      	ldr	r2, [r2, #0]
 8011302:	6912      	ldr	r2, [r2, #16]
 8011304:	f8c3 200a 	str.w	r2, [r3, #10]
 8011308:	1b1b      	subs	r3, r3, r4
 801130a:	330a      	adds	r3, #10
 801130c:	6023      	str	r3, [r4, #0]
 801130e:	bd10      	pop	{r4, pc}
 8011310:	20009e68 	andcs	r9, r0, r8, ror #28
 8011314:	2000a294 	mulcs	r0, r4, r2
 8011318:	01800100 	orreq	r0, r0, r0, lsl #2
 801131c:	2000a29c 	mulcs	r0, ip, r2

08011320 <MDNS::Start()>:
 8011320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011322:	4c1e      	ldr	r4, [pc, #120]	; (801139c <MDNS::Start()+0x7c>)
 8011324:	f241 41e9 	movw	r1, #5353	; 0x14e9
 8011328:	4605      	mov	r5, r0
 801132a:	6820      	ldr	r0, [r4, #0]
 801132c:	f000 fb2a 	bl	8011984 <Network::Begin(unsigned short)>
 8011330:	4e1b      	ldr	r6, [pc, #108]	; (80113a0 <MDNS::Start()+0x80>)
 8011332:	4f1c      	ldr	r7, [pc, #112]	; (80113a4 <MDNS::Start()+0x84>)
 8011334:	4601      	mov	r1, r0
 8011336:	6030      	str	r0, [r6, #0]
 8011338:	683a      	ldr	r2, [r7, #0]
 801133a:	6820      	ldr	r0, [r4, #0]
 801133c:	f000 fb33 	bl	80119a6 <Network::JoinGroup(int, unsigned int)>
 8011340:	4b19      	ldr	r3, [pc, #100]	; (80113a8 <MDNS::Start()+0x88>)
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	b923      	cbnz	r3, 8011350 <MDNS::Start()+0x30>
 8011346:	6821      	ldr	r1, [r4, #0]
 8011348:	4628      	mov	r0, r5
 801134a:	311c      	adds	r1, #28
 801134c:	f7ff ff34 	bl	80111b8 <MDNS::SetName(char const*)>
 8011350:	4628      	mov	r0, r5
 8011352:	f7ff ffbb 	bl	80112cc <MDNS::CreateAnswerLocalIpAddress()>
 8011356:	f241 43e9 	movw	r3, #5353	; 0x14e9
 801135a:	4914      	ldr	r1, [pc, #80]	; (80113ac <MDNS::Start()+0x8c>)
 801135c:	7830      	ldrb	r0, [r6, #0]
 801135e:	f851 2b04 	ldr.w	r2, [r1], #4
 8011362:	9300      	str	r3, [sp, #0]
 8011364:	b292      	uxth	r2, r2
 8011366:	683b      	ldr	r3, [r7, #0]
 8011368:	f7ff fe3c 	bl	8010fe4 <udp_send>
 801136c:	223f      	movs	r2, #63	; 0x3f
 801136e:	6820      	ldr	r0, [r4, #0]
 8011370:	4c0f      	ldr	r4, [pc, #60]	; (80113b0 <MDNS::Start()+0x90>)
 8011372:	f100 035c 	add.w	r3, r0, #92	; 0x5c
 8011376:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 801137a:	b929      	cbnz	r1, 8011388 <MDNS::Start()+0x68>
 801137c:	441a      	add	r2, r3
 801137e:	4293      	cmp	r3, r2
 8011380:	d006      	beq.n	8011390 <MDNS::Start()+0x70>
 8011382:	f803 1b01 	strb.w	r1, [r3], #1
 8011386:	e7fa      	b.n	801137e <MDNS::Start()+0x5e>
 8011388:	3a01      	subs	r2, #1
 801138a:	f803 1b01 	strb.w	r1, [r3], #1
 801138e:	d1f2      	bne.n	8011376 <MDNS::Start()+0x56>
 8011390:	2300      	movs	r3, #0
 8011392:	f880 309b 	strb.w	r3, [r0, #155]	; 0x9b
 8011396:	b003      	add	sp, #12
 8011398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801139a:	bf00      	nop
 801139c:	2000a29c 	mulcs	r0, ip, r2
 80113a0:	20000008 	andcs	r0, r0, r8
 80113a4:	20009e64 	andcs	r9, r0, r4, ror #28
 80113a8:	2000a294 	mulcs	r0, r4, r2
 80113ac:	20009e68 	andcs	r9, r0, r8, ror #28
 80113b0:	0801821c 	stmdaeq	r1, {r2, r3, r4, r9, pc}

080113b4 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>:
 80113b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113b8:	4c1b      	ldr	r4, [pc, #108]	; (8011428 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x74>)
 80113ba:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 80113be:	eb04 1501 	add.w	r5, r4, r1, lsl #4
 80113c2:	2300      	movs	r3, #0
 80113c4:	f854 100c 	ldr.w	r1, [r4, ip]
 80113c8:	4607      	mov	r7, r0
 80113ca:	f7ff ff65 	bl	8011298 <MDNS::WriteDnsName(char const*, char*, bool)>
 80113ce:	2301      	movs	r3, #1
 80113d0:	7bac      	ldrb	r4, [r5, #14]
 80113d2:	4616      	mov	r6, r2
 80113d4:	4915      	ldr	r1, [pc, #84]	; (801142c <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x78>)
 80113d6:	4402      	add	r2, r0
 80113d8:	4815      	ldr	r0, [pc, #84]	; (8011430 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x7c>)
 80113da:	429c      	cmp	r4, r3
 80113dc:	bf18      	it	ne
 80113de:	4601      	movne	r1, r0
 80113e0:	4638      	mov	r0, r7
 80113e2:	f7ff ff59 	bl	8011298 <MDNS::WriteDnsName(char const*, char*, bool)>
 80113e6:	4b13      	ldr	r3, [pc, #76]	; (8011434 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x80>)
 80113e8:	1814      	adds	r4, r2, r0
 80113ea:	5013      	str	r3, [r2, r0]
 80113ec:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 80113f0:	6063      	str	r3, [r4, #4]
 80113f2:	4b11      	ldr	r3, [pc, #68]	; (8011438 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x84>)
 80113f4:	f8d3 8000 	ldr.w	r8, [r3]
 80113f8:	4640      	mov	r0, r8
 80113fa:	f7ff fea5 	bl	8011148 <strlen>
 80113fe:	f100 0308 	add.w	r3, r0, #8
 8011402:	ba5b      	rev16	r3, r3
 8011404:	8123      	strh	r3, [r4, #8]
 8011406:	2300      	movs	r3, #0
 8011408:	f8c4 300a 	str.w	r3, [r4, #10]
 801140c:	89ab      	ldrh	r3, [r5, #12]
 801140e:	f104 0210 	add.w	r2, r4, #16
 8011412:	ba5b      	rev16	r3, r3
 8011414:	81e3      	strh	r3, [r4, #14]
 8011416:	4641      	mov	r1, r8
 8011418:	2301      	movs	r3, #1
 801141a:	4638      	mov	r0, r7
 801141c:	f7ff ff3c 	bl	8011298 <MDNS::WriteDnsName(char const*, char*, bool)>
 8011420:	4410      	add	r0, r2
 8011422:	1b80      	subs	r0, r0, r6
 8011424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011428:	2000a06c 	andcs	sl, r0, ip, rrx
 801142c:	08018218 	stmdaeq	r1, {r3, r4, r9, pc}
 8011430:	08018235 	stmdaeq	r1, {r0, r2, r4, r5, r9, pc}
 8011434:	01802100 	orreq	r2, r0, r0, lsl #2
 8011438:	2000a294 	mulcs	r0, r4, r2

0801143c <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>:
 801143c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011440:	4e19      	ldr	r6, [pc, #100]	; (80114a8 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x6c>)
 8011442:	010f      	lsls	r7, r1, #4
 8011444:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 8011448:	2300      	movs	r3, #0
 801144a:	59f1      	ldr	r1, [r6, r7]
 801144c:	4604      	mov	r4, r0
 801144e:	f7ff ff23 	bl	8011298 <MDNS::WriteDnsName(char const*, char*, bool)>
 8011452:	2301      	movs	r3, #1
 8011454:	7bae      	ldrb	r6, [r5, #14]
 8011456:	4690      	mov	r8, r2
 8011458:	4914      	ldr	r1, [pc, #80]	; (80114ac <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x70>)
 801145a:	4402      	add	r2, r0
 801145c:	4814      	ldr	r0, [pc, #80]	; (80114b0 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x74>)
 801145e:	429e      	cmp	r6, r3
 8011460:	bf18      	it	ne
 8011462:	4601      	movne	r1, r0
 8011464:	4620      	mov	r0, r4
 8011466:	f7ff ff17 	bl	8011298 <MDNS::WriteDnsName(char const*, char*, bool)>
 801146a:	4b12      	ldr	r3, [pc, #72]	; (80114b4 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x78>)
 801146c:	1816      	adds	r6, r2, r0
 801146e:	5013      	str	r3, [r2, r0]
 8011470:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8011474:	68a8      	ldr	r0, [r5, #8]
 8011476:	6073      	str	r3, [r6, #4]
 8011478:	f106 040b 	add.w	r4, r6, #11
 801147c:	b938      	cbnz	r0, 801148e <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x52>
 801147e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011482:	72b0      	strb	r0, [r6, #10]
 8011484:	8133      	strh	r3, [r6, #8]
 8011486:	eba4 0008 	sub.w	r0, r4, r8
 801148a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801148e:	f7ff fe5b 	bl	8011148 <strlen>
 8011492:	4607      	mov	r7, r0
 8011494:	1c43      	adds	r3, r0, #1
 8011496:	72b0      	strb	r0, [r6, #10]
 8011498:	ba5b      	rev16	r3, r3
 801149a:	4620      	mov	r0, r4
 801149c:	68a9      	ldr	r1, [r5, #8]
 801149e:	8133      	strh	r3, [r6, #8]
 80114a0:	f7ff fe67 	bl	8011172 <strcpy.isra.0>
 80114a4:	443c      	add	r4, r7
 80114a6:	e7ee      	b.n	8011486 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x4a>
 80114a8:	2000a06c 	andcs	sl, r0, ip, rrx
 80114ac:	08018218 	stmdaeq	r1, {r3, r4, r9, pc}
 80114b0:	08018235 	stmdaeq	r1, {r0, r2, r4, r5, r9, pc}
 80114b4:	01801000 	orreq	r1, r0, r0

080114b8 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>:
 80114b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114bc:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8011520 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x68>
 80114c0:	ea4f 1901 	mov.w	r9, r1, lsl #4
 80114c4:	eb08 1501 	add.w	r5, r8, r1, lsl #4
 80114c8:	6869      	ldr	r1, [r5, #4]
 80114ca:	2301      	movs	r3, #1
 80114cc:	4607      	mov	r7, r0
 80114ce:	f7ff fee3 	bl	8011298 <MDNS::WriteDnsName(char const*, char*, bool)>
 80114d2:	4b14      	ldr	r3, [pc, #80]	; (8011524 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x6c>)
 80114d4:	f858 8009 	ldr.w	r8, [r8, r9]
 80114d8:	5013      	str	r3, [r2, r0]
 80114da:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 80114de:	1816      	adds	r6, r2, r0
 80114e0:	6073      	str	r3, [r6, #4]
 80114e2:	4640      	mov	r0, r8
 80114e4:	4614      	mov	r4, r2
 80114e6:	f7ff fe2f 	bl	8011148 <strlen>
 80114ea:	f100 030d 	add.w	r3, r0, #13
 80114ee:	ba5b      	rev16	r3, r3
 80114f0:	4641      	mov	r1, r8
 80114f2:	8133      	strh	r3, [r6, #8]
 80114f4:	f106 020a 	add.w	r2, r6, #10
 80114f8:	2300      	movs	r3, #0
 80114fa:	4638      	mov	r0, r7
 80114fc:	f7ff fecc 	bl	8011298 <MDNS::WriteDnsName(char const*, char*, bool)>
 8011500:	2301      	movs	r3, #1
 8011502:	4402      	add	r2, r0
 8011504:	7bad      	ldrb	r5, [r5, #14]
 8011506:	4808      	ldr	r0, [pc, #32]	; (8011528 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x70>)
 8011508:	4908      	ldr	r1, [pc, #32]	; (801152c <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x74>)
 801150a:	429d      	cmp	r5, r3
 801150c:	bf18      	it	ne
 801150e:	4601      	movne	r1, r0
 8011510:	4638      	mov	r0, r7
 8011512:	f7ff fec1 	bl	8011298 <MDNS::WriteDnsName(char const*, char*, bool)>
 8011516:	4410      	add	r0, r2
 8011518:	1b00      	subs	r0, r0, r4
 801151a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801151e:	bf00      	nop
 8011520:	2000a06c 	andcs	sl, r0, ip, rrx
 8011524:	01000c00 	tsteq	r0, r0, lsl #24
 8011528:	08018235 	stmdaeq	r1, {r0, r2, r4, r5, r9, pc}
 801152c:	08018218 	stmdaeq	r1, {r3, r4, r9, pc}

08011530 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>:
 8011530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011532:	460f      	mov	r7, r1
 8011534:	2301      	movs	r3, #1
 8011536:	490f      	ldr	r1, [pc, #60]	; (8011574 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x44>)
 8011538:	4606      	mov	r6, r0
 801153a:	f7ff fead 	bl	8011298 <MDNS::WriteDnsName(char const*, char*, bool)>
 801153e:	4b0e      	ldr	r3, [pc, #56]	; (8011578 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x48>)
 8011540:	490e      	ldr	r1, [pc, #56]	; (801157c <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x4c>)
 8011542:	5013      	str	r3, [r2, r0]
 8011544:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8011548:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 801154c:	684f      	ldr	r7, [r1, #4]
 801154e:	1815      	adds	r5, r2, r0
 8011550:	606b      	str	r3, [r5, #4]
 8011552:	4638      	mov	r0, r7
 8011554:	4614      	mov	r4, r2
 8011556:	f7ff fdf7 	bl	8011148 <strlen>
 801155a:	1c83      	adds	r3, r0, #2
 801155c:	ba5b      	rev16	r3, r3
 801155e:	812b      	strh	r3, [r5, #8]
 8011560:	f105 020a 	add.w	r2, r5, #10
 8011564:	2301      	movs	r3, #1
 8011566:	4639      	mov	r1, r7
 8011568:	4630      	mov	r0, r6
 801156a:	f7ff fe95 	bl	8011298 <MDNS::WriteDnsName(char const*, char*, bool)>
 801156e:	4410      	add	r0, r2
 8011570:	1b00      	subs	r0, r0, r4
 8011572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011574:	08018223 	stmdaeq	r1, {r0, r1, r5, r9, pc}
 8011578:	01000c00 	tsteq	r0, r0, lsl #24
 801157c:	2000a06c 	andcs	sl, r0, ip, rrx

08011580 <MDNS::CreateMDNSMessage(unsigned int)>:
 8011580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011582:	2384      	movs	r3, #132	; 0x84
 8011584:	4d19      	ldr	r5, [pc, #100]	; (80115ec <MDNS::CreateMDNSMessage(unsigned int)+0x6c>)
 8011586:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 801158a:	80eb      	strh	r3, [r5, #6]
 801158c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011590:	f105 0410 	add.w	r4, r5, #16
 8011594:	e9c5 2302 	strd	r2, r3, [r5, #8]
 8011598:	4622      	mov	r2, r4
 801159a:	4606      	mov	r6, r0
 801159c:	460f      	mov	r7, r1
 801159e:	f7ff ff09 	bl	80113b4 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>
 80115a2:	4404      	add	r4, r0
 80115a4:	4622      	mov	r2, r4
 80115a6:	4639      	mov	r1, r7
 80115a8:	4630      	mov	r0, r6
 80115aa:	f7ff ff47 	bl	801143c <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>
 80115ae:	4404      	add	r4, r0
 80115b0:	4622      	mov	r2, r4
 80115b2:	4639      	mov	r1, r7
 80115b4:	4630      	mov	r0, r6
 80115b6:	f7ff ffbb 	bl	8011530 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>
 80115ba:	4404      	add	r4, r0
 80115bc:	4622      	mov	r2, r4
 80115be:	4639      	mov	r1, r7
 80115c0:	4630      	mov	r0, r6
 80115c2:	f7ff ff79 	bl	80114b8 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>
 80115c6:	4b0a      	ldr	r3, [pc, #40]	; (80115f0 <MDNS::CreateMDNSMessage(unsigned int)+0x70>)
 80115c8:	4404      	add	r4, r0
 80115ca:	f853 2b10 	ldr.w	r2, [r3], #16
 80115ce:	1e60      	subs	r0, r4, #1
 80115d0:	3a0c      	subs	r2, #12
 80115d2:	4611      	mov	r1, r2
 80115d4:	3901      	subs	r1, #1
 80115d6:	d304      	bcc.n	80115e2 <MDNS::CreateMDNSMessage(unsigned int)+0x62>
 80115d8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80115dc:	f800 6f01 	strb.w	r6, [r0, #1]!
 80115e0:	e7f8      	b.n	80115d4 <MDNS::CreateMDNSMessage(unsigned int)+0x54>
 80115e2:	4414      	add	r4, r2
 80115e4:	4a03      	ldr	r2, [pc, #12]	; (80115f4 <MDNS::CreateMDNSMessage(unsigned int)+0x74>)
 80115e6:	1aa4      	subs	r4, r4, r2
 80115e8:	602c      	str	r4, [r5, #0]
 80115ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80115ec:	2000a090 	mulcs	r0, r0, r0
 80115f0:	20009e68 	andcs	r9, r0, r8, ror #28
 80115f4:	2000a094 	mulcs	r0, r4, r0

080115f8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>:
 80115f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115fc:	4d3f      	ldr	r5, [pc, #252]	; (80116fc <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x104>)
 80115fe:	b085      	sub	sp, #20
 8011600:	682c      	ldr	r4, [r5, #0]
 8011602:	4680      	mov	r8, r0
 8011604:	460f      	mov	r7, r1
 8011606:	4616      	mov	r6, r2
 8011608:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 801160c:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8011610:	b11c      	cbz	r4, 801161a <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x22>
 8011612:	692a      	ldr	r2, [r5, #16]
 8011614:	2a00      	cmp	r2, #0
 8011616:	d16d      	bne.n	80116f4 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xfc>
 8011618:	2401      	movs	r4, #1
 801161a:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 801161e:	ea4f 1904 	mov.w	r9, r4, lsl #4
 8011622:	8193      	strh	r3, [r2, #12]
 8011624:	f882 b00e 	strb.w	fp, [r2, #14]
 8011628:	2f00      	cmp	r7, #0
 801162a:	d153      	bne.n	80116d4 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xdc>
 801162c:	4630      	mov	r0, r6
 801162e:	f7ff fd8b 	bl	8011148 <strlen>
 8011632:	4f33      	ldr	r7, [pc, #204]	; (8011700 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x108>)
 8011634:	683b      	ldr	r3, [r7, #0]
 8011636:	331c      	adds	r3, #28
 8011638:	4418      	add	r0, r3
 801163a:	f7ff fd85 	bl	8011148 <strlen>
 801163e:	3001      	adds	r0, #1
 8011640:	f002 ffc6 	bl	80145d0 <operator new[](unsigned int)>
 8011644:	6839      	ldr	r1, [r7, #0]
 8011646:	f845 0009 	str.w	r0, [r5, r9]
 801164a:	311c      	adds	r1, #28
 801164c:	f7ff fd91 	bl	8011172 <strcpy.isra.0>
 8011650:	f855 0009 	ldr.w	r0, [r5, r9]
 8011654:	4631      	mov	r1, r6
 8011656:	f7ff fd94 	bl	8011182 <strcat.isra.0>
 801165a:	4631      	mov	r1, r6
 801165c:	4640      	mov	r0, r8
 801165e:	f7ff fe0d 	bl	801127c <MDNS::FindFirstDotFromRight(char const*) const>
 8011662:	eb05 0709 	add.w	r7, r5, r9
 8011666:	4605      	mov	r5, r0
 8011668:	f7ff fd6e 	bl	8011148 <strlen>
 801166c:	300d      	adds	r0, #13
 801166e:	f002 ffaf 	bl	80145d0 <operator new[](unsigned int)>
 8011672:	4629      	mov	r1, r5
 8011674:	6078      	str	r0, [r7, #4]
 8011676:	f7ff fd7c 	bl	8011172 <strcpy.isra.0>
 801167a:	4922      	ldr	r1, [pc, #136]	; (8011704 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10c>)
 801167c:	6878      	ldr	r0, [r7, #4]
 801167e:	f7ff fd80 	bl	8011182 <strcat.isra.0>
 8011682:	4921      	ldr	r1, [pc, #132]	; (8011708 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x110>)
 8011684:	4b21      	ldr	r3, [pc, #132]	; (801170c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x114>)
 8011686:	6878      	ldr	r0, [r7, #4]
 8011688:	f1bb 0f01 	cmp.w	fp, #1
 801168c:	bf18      	it	ne
 801168e:	4619      	movne	r1, r3
 8011690:	f7ff fd77 	bl	8011182 <strcat.isra.0>
 8011694:	f1ba 0f00 	cmp.w	sl, #0
 8011698:	d009      	beq.n	80116ae <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xb6>
 801169a:	4650      	mov	r0, sl
 801169c:	f7ff fd54 	bl	8011148 <strlen>
 80116a0:	3001      	adds	r0, #1
 80116a2:	f002 ff95 	bl	80145d0 <operator new[](unsigned int)>
 80116a6:	4651      	mov	r1, sl
 80116a8:	60b8      	str	r0, [r7, #8]
 80116aa:	f7ff fd62 	bl	8011172 <strcpy.isra.0>
 80116ae:	4621      	mov	r1, r4
 80116b0:	4640      	mov	r0, r8
 80116b2:	f7ff ff65 	bl	8011580 <MDNS::CreateMDNSMessage(unsigned int)>
 80116b6:	f241 43e9 	movw	r3, #5353	; 0x14e9
 80116ba:	4915      	ldr	r1, [pc, #84]	; (8011710 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x118>)
 80116bc:	4815      	ldr	r0, [pc, #84]	; (8011714 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x11c>)
 80116be:	f851 2b04 	ldr.w	r2, [r1], #4
 80116c2:	9300      	str	r3, [sp, #0]
 80116c4:	4b14      	ldr	r3, [pc, #80]	; (8011718 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x120>)
 80116c6:	7800      	ldrb	r0, [r0, #0]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	b292      	uxth	r2, r2
 80116cc:	f7ff fc8a 	bl	8010fe4 <udp_send>
 80116d0:	2001      	movs	r0, #1
 80116d2:	e010      	b.n	80116f6 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xfe>
 80116d4:	4638      	mov	r0, r7
 80116d6:	f7ff fd37 	bl	8011148 <strlen>
 80116da:	9003      	str	r0, [sp, #12]
 80116dc:	4630      	mov	r0, r6
 80116de:	f7ff fd33 	bl	8011148 <strlen>
 80116e2:	9b03      	ldr	r3, [sp, #12]
 80116e4:	4418      	add	r0, r3
 80116e6:	3001      	adds	r0, #1
 80116e8:	f002 ff72 	bl	80145d0 <operator new[](unsigned int)>
 80116ec:	4639      	mov	r1, r7
 80116ee:	f845 0009 	str.w	r0, [r5, r9]
 80116f2:	e7ab      	b.n	801164c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x54>
 80116f4:	2000      	movs	r0, #0
 80116f6:	b005      	add	sp, #20
 80116f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116fc:	2000a06c 	andcs	sl, r0, ip, rrx
 8011700:	2000a29c 	mulcs	r0, ip, r2
 8011704:	08017277 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r9, ip, sp, lr}
 8011708:	08018218 	stmdaeq	r1, {r3, r4, r9, pc}
 801170c:	08018235 	stmdaeq	r1, {r0, r2, r4, r5, r9, pc}
 8011710:	2000a090 	mulcs	r0, r0, r0
 8011714:	20000008 	andcs	r0, r0, r8
 8011718:	20009e64 	andcs	r9, r0, r4, ror #28

0801171c <MDNS::HandleRequest(unsigned short)>:
 801171c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011720:	4605      	mov	r5, r0
 8011722:	2700      	movs	r7, #0
 8011724:	f04f 080c 	mov.w	r8, #12
 8011728:	b0c5      	sub	sp, #276	; 0x114
 801172a:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80117f0 <MDNS::HandleRequest(unsigned short)+0xd4>
 801172e:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 80117f4 <MDNS::HandleRequest(unsigned short)+0xd8>
 8011732:	9103      	str	r1, [sp, #12]
 8011734:	9b03      	ldr	r3, [sp, #12]
 8011736:	42bb      	cmp	r3, r7
 8011738:	d956      	bls.n	80117e8 <MDNS::HandleRequest(unsigned short)+0xcc>
 801173a:	f8da 1000 	ldr.w	r1, [sl]
 801173e:	aa04      	add	r2, sp, #16
 8011740:	4441      	add	r1, r8
 8011742:	4628      	mov	r0, r5
 8011744:	f7ff fd54 	bl	80111f0 <MDNS::DecodeDNSNameNotation(char const*, char*)>
 8011748:	f8da 2000 	ldr.w	r2, [sl]
 801174c:	4440      	add	r0, r8
 801174e:	1813      	adds	r3, r2, r0
 8011750:	885b      	ldrh	r3, [r3, #2]
 8011752:	f100 0804 	add.w	r8, r0, #4
 8011756:	ba5b      	rev16	r3, r3
 8011758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801175c:	2b01      	cmp	r3, #1
 801175e:	d13e      	bne.n	80117de <MDNS::HandleRequest(unsigned short)+0xc2>
 8011760:	5a14      	ldrh	r4, [r2, r0]
 8011762:	4b25      	ldr	r3, [pc, #148]	; (80117f8 <MDNS::HandleRequest(unsigned short)+0xdc>)
 8011764:	ba64      	rev16	r4, r4
 8011766:	6818      	ldr	r0, [r3, #0]
 8011768:	a904      	add	r1, sp, #16
 801176a:	b2a4      	uxth	r4, r4
 801176c:	f7ff fcf4 	bl	8011158 <strcmp>
 8011770:	b970      	cbnz	r0, 8011790 <MDNS::HandleRequest(unsigned short)+0x74>
 8011772:	2c01      	cmp	r4, #1
 8011774:	d10c      	bne.n	8011790 <MDNS::HandleRequest(unsigned short)+0x74>
 8011776:	f241 43e9 	movw	r3, #5353	; 0x14e9
 801177a:	4920      	ldr	r1, [pc, #128]	; (80117fc <MDNS::HandleRequest(unsigned short)+0xe0>)
 801177c:	4820      	ldr	r0, [pc, #128]	; (8011800 <MDNS::HandleRequest(unsigned short)+0xe4>)
 801177e:	f851 2b04 	ldr.w	r2, [r1], #4
 8011782:	9300      	str	r3, [sp, #0]
 8011784:	4b1f      	ldr	r3, [pc, #124]	; (8011804 <MDNS::HandleRequest(unsigned short)+0xe8>)
 8011786:	7800      	ldrb	r0, [r0, #0]
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	b292      	uxth	r2, r2
 801178c:	f7ff fc2a 	bl	8010fe4 <udp_send>
 8011790:	481d      	ldr	r0, [pc, #116]	; (8011808 <MDNS::HandleRequest(unsigned short)+0xec>)
 8011792:	a904      	add	r1, sp, #16
 8011794:	f7ff fce0 	bl	8011158 <strcmp>
 8011798:	f04f 0900 	mov.w	r9, #0
 801179c:	4e1b      	ldr	r6, [pc, #108]	; (801180c <MDNS::HandleRequest(unsigned short)+0xf0>)
 801179e:	9002      	str	r0, [sp, #8]
 80117a0:	6833      	ldr	r3, [r6, #0]
 80117a2:	b1c3      	cbz	r3, 80117d6 <MDNS::HandleRequest(unsigned short)+0xba>
 80117a4:	9b02      	ldr	r3, [sp, #8]
 80117a6:	b123      	cbz	r3, 80117b2 <MDNS::HandleRequest(unsigned short)+0x96>
 80117a8:	6870      	ldr	r0, [r6, #4]
 80117aa:	a904      	add	r1, sp, #16
 80117ac:	f7ff fcd4 	bl	8011158 <strcmp>
 80117b0:	b988      	cbnz	r0, 80117d6 <MDNS::HandleRequest(unsigned short)+0xba>
 80117b2:	2c0c      	cmp	r4, #12
 80117b4:	d10f      	bne.n	80117d6 <MDNS::HandleRequest(unsigned short)+0xba>
 80117b6:	4649      	mov	r1, r9
 80117b8:	4628      	mov	r0, r5
 80117ba:	f7ff fee1 	bl	8011580 <MDNS::CreateMDNSMessage(unsigned int)>
 80117be:	f241 43e9 	movw	r3, #5353	; 0x14e9
 80117c2:	480f      	ldr	r0, [pc, #60]	; (8011800 <MDNS::HandleRequest(unsigned short)+0xe4>)
 80117c4:	9300      	str	r3, [sp, #0]
 80117c6:	4b0f      	ldr	r3, [pc, #60]	; (8011804 <MDNS::HandleRequest(unsigned short)+0xe8>)
 80117c8:	f8bb 2000 	ldrh.w	r2, [fp]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	4910      	ldr	r1, [pc, #64]	; (8011810 <MDNS::HandleRequest(unsigned short)+0xf4>)
 80117d0:	7800      	ldrb	r0, [r0, #0]
 80117d2:	f7ff fc07 	bl	8010fe4 <udp_send>
 80117d6:	3610      	adds	r6, #16
 80117d8:	f1b9 0f00 	cmp.w	r9, #0
 80117dc:	d001      	beq.n	80117e2 <MDNS::HandleRequest(unsigned short)+0xc6>
 80117de:	3701      	adds	r7, #1
 80117e0:	e7a8      	b.n	8011734 <MDNS::HandleRequest(unsigned short)+0x18>
 80117e2:	f04f 0901 	mov.w	r9, #1
 80117e6:	e7db      	b.n	80117a0 <MDNS::HandleRequest(unsigned short)+0x84>
 80117e8:	b045      	add	sp, #276	; 0x114
 80117ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117ee:	bf00      	nop
 80117f0:	2000a298 	mulcs	r0, r8, r2
 80117f4:	2000a090 	mulcs	r0, r0, r0
 80117f8:	2000a294 	mulcs	r0, r4, r2
 80117fc:	20009e68 	andcs	r9, r0, r8, ror #28
 8011800:	20000008 	andcs	r0, r0, r8
 8011804:	20009e64 	andcs	r9, r0, r4, ror #28
 8011808:	08018223 	stmdaeq	r1, {r0, r1, r5, r9, pc}
 801180c:	2000a06c 	andcs	sl, r0, ip, rrx
 8011810:	2000a094 	mulcs	r0, r4, r0

08011814 <MDNS::Parse()>:
 8011814:	4b08      	ldr	r3, [pc, #32]	; (8011838 <MDNS::Parse()+0x24>)
 8011816:	681a      	ldr	r2, [r3, #0]
 8011818:	8853      	ldrh	r3, [r2, #2]
 801181a:	ba5b      	rev16	r3, r3
 801181c:	b299      	uxth	r1, r3
 801181e:	041b      	lsls	r3, r3, #16
 8011820:	d408      	bmi.n	8011834 <MDNS::Parse()+0x20>
 8011822:	0b8b      	lsrs	r3, r1, #14
 8011824:	d106      	bne.n	8011834 <MDNS::Parse()+0x20>
 8011826:	8891      	ldrh	r1, [r2, #4]
 8011828:	b28b      	uxth	r3, r1
 801182a:	b11b      	cbz	r3, 8011834 <MDNS::Parse()+0x20>
 801182c:	ba49      	rev16	r1, r1
 801182e:	b289      	uxth	r1, r1
 8011830:	f7ff bf74 	b.w	801171c <MDNS::HandleRequest(unsigned short)>
 8011834:	4770      	bx	lr
 8011836:	bf00      	nop
 8011838:	2000a298 	mulcs	r0, r8, r2

0801183c <MDNS::Run()>:
 801183c:	b538      	push	{r3, r4, r5, lr}
 801183e:	4d0c      	ldr	r5, [pc, #48]	; (8011870 <MDNS::Run()+0x34>)
 8011840:	4604      	mov	r4, r0
 8011842:	480c      	ldr	r0, [pc, #48]	; (8011874 <MDNS::Run()+0x38>)
 8011844:	462b      	mov	r3, r5
 8011846:	4a0c      	ldr	r2, [pc, #48]	; (8011878 <MDNS::Run()+0x3c>)
 8011848:	490c      	ldr	r1, [pc, #48]	; (801187c <MDNS::Run()+0x40>)
 801184a:	7800      	ldrb	r0, [r0, #0]
 801184c:	f7ff fba4 	bl	8010f98 <udp_recv2>
 8011850:	4b0b      	ldr	r3, [pc, #44]	; (8011880 <MDNS::Run()+0x44>)
 8011852:	882a      	ldrh	r2, [r5, #0]
 8011854:	8018      	strh	r0, [r3, #0]
 8011856:	f241 43e9 	movw	r3, #5353	; 0x14e9
 801185a:	429a      	cmp	r2, r3
 801185c:	d106      	bne.n	801186c <MDNS::Run()+0x30>
 801185e:	280c      	cmp	r0, #12
 8011860:	d904      	bls.n	801186c <MDNS::Run()+0x30>
 8011862:	4620      	mov	r0, r4
 8011864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011868:	f7ff bfd4 	b.w	8011814 <MDNS::Parse()>
 801186c:	bd38      	pop	{r3, r4, r5, pc}
 801186e:	bf00      	nop
 8011870:	20009e60 	andcs	r9, r0, r0, ror #28
 8011874:	20000008 	andcs	r0, r0, r8
 8011878:	20009e5c 	andcs	r9, r0, ip, asr lr
 801187c:	2000a298 	mulcs	r0, r8, r2
 8011880:	2000a08c 	andcs	sl, r0, ip, lsl #1

08011884 <MDNS::Print()>:
 8011884:	b510      	push	{r4, lr}
 8011886:	4816      	ldr	r0, [pc, #88]	; (80118e0 <MDNS::Print()+0x5c>)
 8011888:	f7f7 fa18 	bl	8008cbc <printf>
 801188c:	4b15      	ldr	r3, [pc, #84]	; (80118e4 <MDNS::Print()+0x60>)
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	3301      	adds	r3, #1
 8011892:	d104      	bne.n	801189e <MDNS::Print()+0x1a>
 8011894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011898:	4813      	ldr	r0, [pc, #76]	; (80118e8 <MDNS::Print()+0x64>)
 801189a:	f7f7 ba0f 	b.w	8008cbc <printf>
 801189e:	4b13      	ldr	r3, [pc, #76]	; (80118ec <MDNS::Print()+0x68>)
 80118a0:	4c13      	ldr	r4, [pc, #76]	; (80118f0 <MDNS::Print()+0x6c>)
 80118a2:	6819      	ldr	r1, [r3, #0]
 80118a4:	4813      	ldr	r0, [pc, #76]	; (80118f4 <MDNS::Print()+0x70>)
 80118a6:	f7f7 fa09 	bl	8008cbc <printf>
 80118aa:	6823      	ldr	r3, [r4, #0]
 80118ac:	b14b      	cbz	r3, 80118c2 <MDNS::Print()+0x3e>
 80118ae:	4a12      	ldr	r2, [pc, #72]	; (80118f8 <MDNS::Print()+0x74>)
 80118b0:	68a3      	ldr	r3, [r4, #8]
 80118b2:	6861      	ldr	r1, [r4, #4]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	bf08      	it	eq
 80118b8:	4613      	moveq	r3, r2
 80118ba:	4810      	ldr	r0, [pc, #64]	; (80118fc <MDNS::Print()+0x78>)
 80118bc:	89a2      	ldrh	r2, [r4, #12]
 80118be:	f7f7 f9fd 	bl	8008cbc <printf>
 80118c2:	6923      	ldr	r3, [r4, #16]
 80118c4:	b15b      	cbz	r3, 80118de <MDNS::Print()+0x5a>
 80118c6:	69a3      	ldr	r3, [r4, #24]
 80118c8:	4a0b      	ldr	r2, [pc, #44]	; (80118f8 <MDNS::Print()+0x74>)
 80118ca:	6961      	ldr	r1, [r4, #20]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	bf08      	it	eq
 80118d0:	4613      	moveq	r3, r2
 80118d2:	480a      	ldr	r0, [pc, #40]	; (80118fc <MDNS::Print()+0x78>)
 80118d4:	8ba2      	ldrh	r2, [r4, #28]
 80118d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118da:	f7f7 b9ef 	b.w	8008cbc <printf>
 80118de:	bd10      	pop	{r4, pc}
 80118e0:	08018240 	stmdaeq	r1, {r6, r9, pc}
 80118e4:	20000008 	andcs	r0, r0, r8
 80118e8:	08018246 	stmdaeq	r1, {r1, r2, r6, r9, pc}
 80118ec:	2000a294 	mulcs	r0, r4, r2
 80118f0:	2000a06c 	andcs	sl, r0, ip, rrx
 80118f4:	08018254 	stmdaeq	r1, {r2, r4, r6, r9, pc}
 80118f8:	08017599 	stmdaeq	r1, {r0, r3, r4, r7, r8, sl, ip, sp, lr}
 80118fc:	08018260 	stmdaeq	r1, {r5, r6, r9, pc}

08011900 <strncpy.constprop.0.isra.0>:
 8011900:	233f      	movs	r3, #63	; 0x3f
 8011902:	3901      	subs	r1, #1
 8011904:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011908:	b92a      	cbnz	r2, 8011916 <strncpy.constprop.0.isra.0+0x16>
 801190a:	4403      	add	r3, r0
 801190c:	4298      	cmp	r0, r3
 801190e:	d007      	beq.n	8011920 <strncpy.constprop.0.isra.0+0x20>
 8011910:	f800 2b01 	strb.w	r2, [r0], #1
 8011914:	e7fa      	b.n	801190c <strncpy.constprop.0.isra.0+0xc>
 8011916:	3b01      	subs	r3, #1
 8011918:	f800 2b01 	strb.w	r2, [r0], #1
 801191c:	d1f2      	bne.n	8011904 <strncpy.constprop.0.isra.0+0x4>
 801191e:	4770      	bx	lr
 8011920:	4770      	bx	lr
	...

08011924 <Network::Network()>:
 8011924:	4a11      	ldr	r2, [pc, #68]	; (801196c <Network::Network()+0x48>)
 8011926:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801192a:	6010      	str	r0, [r2, #0]
 801192c:	2201      	movs	r2, #1
 801192e:	2300      	movs	r3, #0
 8011930:	e9c0 1200 	strd	r1, r2, [r0]
 8011934:	2200      	movs	r2, #0
 8011936:	e9c0 332f 	strd	r3, r3, [r0, #188]	; 0xbc
 801193a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801193e:	490c      	ldr	r1, [pc, #48]	; (8011970 <Network::Network()+0x4c>)
 8011940:	60c2      	str	r2, [r0, #12]
 8011942:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
 8011946:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
 801194a:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
 801194e:	6083      	str	r3, [r0, #8]
 8011950:	6183      	str	r3, [r0, #24]
 8011952:	7703      	strb	r3, [r0, #28]
 8011954:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 8011958:	f100 02a2 	add.w	r2, r0, #162	; 0xa2
 801195c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011960:	f802 3b01 	strb.w	r3, [r2], #1
 8011964:	2b00      	cmp	r3, #0
 8011966:	d1f9      	bne.n	801195c <Network::Network()+0x38>
 8011968:	4770      	bx	lr
 801196a:	bf00      	nop
 801196c:	2000a29c 	mulcs	r0, ip, r2
 8011970:	0801826b 	stmdaeq	r1, {r0, r1, r3, r5, r6, r9, pc}

08011974 <Network::Shutdown()>:
 8011974:	b508      	push	{r3, lr}
 8011976:	30b8      	adds	r0, #184	; 0xb8
 8011978:	f001 febe 	bl	80136f8 <NetworkDisplay::ShowShutdown()>
 801197c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011980:	f7fe bd74 	b.w	801046c <net_shutdown>

08011984 <Network::Begin(unsigned short)>:
 8011984:	4608      	mov	r0, r1
 8011986:	f7ff ba97 	b.w	8010eb8 <udp_bind>

0801198a <Network::End(unsigned short)>:
 801198a:	4608      	mov	r0, r1
 801198c:	f7ff baae 	b.w	8010eec <udp_unbind>

08011990 <Network::MacAddressCopyTo(unsigned char*)>:
 8011990:	f100 039c 	add.w	r3, r0, #156	; 0x9c
 8011994:	3901      	subs	r1, #1
 8011996:	30a2      	adds	r0, #162	; 0xa2
 8011998:	f813 2b01 	ldrb.w	r2, [r3], #1
 801199c:	4283      	cmp	r3, r0
 801199e:	f801 2f01 	strb.w	r2, [r1, #1]!
 80119a2:	d1f9      	bne.n	8011998 <Network::MacAddressCopyTo(unsigned char*)+0x8>
 80119a4:	4770      	bx	lr

080119a6 <Network::JoinGroup(int, unsigned int)>:
 80119a6:	4610      	mov	r0, r2
 80119a8:	f001 b8fe 	b.w	8012ba8 <igmp_join>

080119ac <Network::LeaveGroup(int, unsigned int)>:
 80119ac:	4610      	mov	r0, r2
 80119ae:	f001 b927 	b.w	8012c00 <igmp_leave>

080119b2 <Network::SetDefaultIp()>:
 80119b2:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80119b6:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
 80119ba:	041b      	lsls	r3, r3, #16
 80119bc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80119c0:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
 80119c4:	3302      	adds	r3, #2
 80119c6:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 80119ca:	22ff      	movs	r2, #255	; 0xff
 80119cc:	6103      	str	r3, [r0, #16]
 80119ce:	e9c0 3205 	strd	r3, r2, [r0, #20]
 80119d2:	4770      	bx	lr

080119d4 <Network::Init(NetworkParamsStore*)>:
 80119d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119d8:	b08b      	sub	sp, #44	; 0x2c
 80119da:	4604      	mov	r4, r0
 80119dc:	a806      	add	r0, sp, #24
 80119de:	f000 fa57 	bl	8011e90 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 80119e2:	a806      	add	r0, sp, #24
 80119e4:	f000 fa64 	bl	8011eb0 <NetworkParams::Load()>
 80119e8:	b110      	cbz	r0, 80119f0 <Network::Init(NetworkParamsStore*)+0x1c>
 80119ea:	a806      	add	r0, sp, #24
 80119ec:	f000 fc49 	bl	8012282 <NetworkParams::Dump()>
 80119f0:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
 80119f4:	f8df 8224 	ldr.w	r8, [pc, #548]	; 8011c1c <Network::Init(NetworkParamsStore*)+0x248>
 80119f8:	4628      	mov	r0, r5
 80119fa:	f104 079c 	add.w	r7, r4, #156	; 0x9c
 80119fe:	f001 fe63 	bl	80136c8 <NetworkDisplay::ShowEmacStart()>
 8011a02:	4638      	mov	r0, r7
 8011a04:	f003 fc78 	bl	80152f8 <emac_start>
 8011a08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011a0c:	f104 061c 	add.w	r6, r4, #28
 8011a10:	9307      	str	r3, [sp, #28]
 8011a12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011a16:	9308      	str	r3, [sp, #32]
 8011a18:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011a1c:	9309      	str	r3, [sp, #36]	; 0x24
 8011a1e:	f898 3014 	ldrb.w	r3, [r8, #20]
 8011a22:	7063      	strb	r3, [r4, #1]
 8011a24:	f8d8 3000 	ldr.w	r3, [r8]
 8011a28:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 8011a2c:	bf18      	it	ne
 8011a2e:	f8d8 2055 	ldrne.w	r2, [r8, #85]	; 0x55
 8011a32:	061b      	lsls	r3, r3, #24
 8011a34:	bf58      	it	pl
 8011a36:	2300      	movpl	r3, #0
 8011a38:	60a2      	str	r2, [r4, #8]
 8011a3a:	bf48      	it	mi
 8011a3c:	f8d8 3059 	ldrmi.w	r3, [r8, #89]	; 0x59
 8011a40:	60e3      	str	r3, [r4, #12]
 8011a42:	f898 3015 	ldrb.w	r3, [r8, #21]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d15e      	bne.n	8011b08 <Network::Init(NetworkParamsStore*)+0x134>
 8011a4a:	4632      	mov	r2, r6
 8011a4c:	4874      	ldr	r0, [pc, #464]	; (8011c20 <Network::Init(NetworkParamsStore*)+0x24c>)
 8011a4e:	f810 1b01 	ldrb.w	r1, [r0], #1
 8011a52:	f103 0c01 	add.w	ip, r3, #1
 8011a56:	b119      	cbz	r1, 8011a60 <Network::Init(NetworkParamsStore*)+0x8c>
 8011a58:	4663      	mov	r3, ip
 8011a5a:	f802 1b01 	strb.w	r1, [r2], #1
 8011a5e:	e7f6      	b.n	8011a4e <Network::Init(NetworkParamsStore*)+0x7a>
 8011a60:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
 8011a64:	18e1      	adds	r1, r4, r3
 8011a66:	0910      	lsrs	r0, r2, #4
 8011a68:	2a9f      	cmp	r2, #159	; 0x9f
 8011a6a:	f002 020f 	and.w	r2, r2, #15
 8011a6e:	bf94      	ite	ls
 8011a70:	3030      	addls	r0, #48	; 0x30
 8011a72:	3037      	addhi	r0, #55	; 0x37
 8011a74:	2a09      	cmp	r2, #9
 8011a76:	bf94      	ite	ls
 8011a78:	3230      	addls	r2, #48	; 0x30
 8011a7a:	3237      	addhi	r2, #55	; 0x37
 8011a7c:	44a4      	add	ip, r4
 8011a7e:	7708      	strb	r0, [r1, #28]
 8011a80:	f88c 201c 	strb.w	r2, [ip, #28]
 8011a84:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
 8011a88:	f103 0e02 	add.w	lr, r3, #2
 8011a8c:	0910      	lsrs	r0, r2, #4
 8011a8e:	2a9f      	cmp	r2, #159	; 0x9f
 8011a90:	f002 020f 	and.w	r2, r2, #15
 8011a94:	bf94      	ite	ls
 8011a96:	3030      	addls	r0, #48	; 0x30
 8011a98:	3037      	addhi	r0, #55	; 0x37
 8011a9a:	f103 0903 	add.w	r9, r3, #3
 8011a9e:	2a09      	cmp	r2, #9
 8011aa0:	44a6      	add	lr, r4
 8011aa2:	f88e 001c 	strb.w	r0, [lr, #28]
 8011aa6:	bf94      	ite	ls
 8011aa8:	3230      	addls	r2, #48	; 0x30
 8011aaa:	3237      	addhi	r2, #55	; 0x37
 8011aac:	eb04 0009 	add.w	r0, r4, r9
 8011ab0:	7702      	strb	r2, [r0, #28]
 8011ab2:	f894 20a1 	ldrb.w	r2, [r4, #161]	; 0xa1
 8011ab6:	f103 0c04 	add.w	ip, r3, #4
 8011aba:	0910      	lsrs	r0, r2, #4
 8011abc:	2a9f      	cmp	r2, #159	; 0x9f
 8011abe:	f002 020f 	and.w	r2, r2, #15
 8011ac2:	bf94      	ite	ls
 8011ac4:	3030      	addls	r0, #48	; 0x30
 8011ac6:	3037      	addhi	r0, #55	; 0x37
 8011ac8:	3305      	adds	r3, #5
 8011aca:	2a09      	cmp	r2, #9
 8011acc:	4423      	add	r3, r4
 8011ace:	44a4      	add	ip, r4
 8011ad0:	bf94      	ite	ls
 8011ad2:	3230      	addls	r2, #48	; 0x30
 8011ad4:	3237      	addhi	r2, #55	; 0x37
 8011ad6:	f88c 001c 	strb.w	r0, [ip, #28]
 8011ada:	771a      	strb	r2, [r3, #28]
 8011adc:	2300      	movs	r3, #0
 8011ade:	f881 3022 	strb.w	r3, [r1, #34]	; 0x22
 8011ae2:	7863      	ldrb	r3, [r4, #1]
 8011ae4:	b95b      	cbnz	r3, 8011afe <Network::Init(NetworkParamsStore*)+0x12a>
 8011ae6:	9b07      	ldr	r3, [sp, #28]
 8011ae8:	b9b3      	cbnz	r3, 8011b18 <Network::Init(NetworkParamsStore*)+0x144>
 8011aea:	4620      	mov	r0, r4
 8011aec:	f7ff ff61 	bl	80119b2 <Network::SetDefaultIp()>
 8011af0:	6923      	ldr	r3, [r4, #16]
 8011af2:	69a2      	ldr	r2, [r4, #24]
 8011af4:	9307      	str	r3, [sp, #28]
 8011af6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011afa:	7863      	ldrb	r3, [r4, #1]
 8011afc:	b19b      	cbz	r3, 8011b26 <Network::Init(NetworkParamsStore*)+0x152>
 8011afe:	2101      	movs	r1, #1
 8011b00:	4628      	mov	r0, r5
 8011b02:	f001 fdff 	bl	8013704 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8011b06:	e00e      	b.n	8011b26 <Network::Init(NetworkParamsStore*)+0x152>
 8011b08:	4630      	mov	r0, r6
 8011b0a:	4946      	ldr	r1, [pc, #280]	; (8011c24 <Network::Init(NetworkParamsStore*)+0x250>)
 8011b0c:	f7ff fef8 	bl	8011900 <strncpy.constprop.0.isra.0>
 8011b10:	2300      	movs	r3, #0
 8011b12:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 8011b16:	e7e4      	b.n	8011ae2 <Network::Init(NetworkParamsStore*)+0x10e>
 8011b18:	69a1      	ldr	r1, [r4, #24]
 8011b1a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8011b1e:	4053      	eors	r3, r2
 8011b20:	420b      	tst	r3, r1
 8011b22:	d000      	beq.n	8011b26 <Network::Init(NetworkParamsStore*)+0x152>
 8011b24:	9209      	str	r2, [sp, #36]	; 0x24
 8011b26:	1ce3      	adds	r3, r4, #3
 8011b28:	f104 0901 	add.w	r9, r4, #1
 8011b2c:	9302      	str	r3, [sp, #8]
 8011b2e:	9300      	str	r3, [sp, #0]
 8011b30:	4632      	mov	r2, r6
 8011b32:	464b      	mov	r3, r9
 8011b34:	4638      	mov	r0, r7
 8011b36:	a907      	add	r1, sp, #28
 8011b38:	f7fe fc48 	bl	80103cc <net_init>
 8011b3c:	78e3      	ldrb	r3, [r4, #3]
 8011b3e:	b11b      	cbz	r3, 8011b48 <Network::Init(NetworkParamsStore*)+0x174>
 8011b40:	2104      	movs	r1, #4
 8011b42:	4628      	mov	r0, r5
 8011b44:	f001 fdde 	bl	8013704 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8011b48:	f898 3014 	ldrb.w	r3, [r8, #20]
 8011b4c:	f898 a05d 	ldrb.w	sl, [r8, #93]	; 0x5d
 8011b50:	9304      	str	r3, [sp, #16]
 8011b52:	233c      	movs	r3, #60	; 0x3c
 8011b54:	fb03 f30a 	mul.w	r3, r3, sl
 8011b58:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8011c28 <Network::Init(NetworkParamsStore*)+0x254>
 8011b5c:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 8011c2c <Network::Init(NetworkParamsStore*)+0x258>
 8011b60:	9303      	str	r3, [sp, #12]
 8011b62:	78e3      	ldrb	r3, [r4, #3]
 8011b64:	b95b      	cbnz	r3, 8011b7e <Network::Init(NetworkParamsStore*)+0x1aa>
 8011b66:	9b07      	ldr	r3, [sp, #28]
 8011b68:	4628      	mov	r0, r5
 8011b6a:	6123      	str	r3, [r4, #16]
 8011b6c:	9b08      	ldr	r3, [sp, #32]
 8011b6e:	61a3      	str	r3, [r4, #24]
 8011b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b72:	6163      	str	r3, [r4, #20]
 8011b74:	f001 fdae 	bl	80136d4 <NetworkDisplay::ShowIp()>
 8011b78:	b00b      	add	sp, #44	; 0x2c
 8011b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b7e:	f1ba 0f00 	cmp.w	sl, #0
 8011b82:	d0f0      	beq.n	8011b66 <Network::Init(NetworkParamsStore*)+0x192>
 8011b84:	9b04      	ldr	r3, [sp, #16]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d0ed      	beq.n	8011b66 <Network::Init(NetworkParamsStore*)+0x192>
 8011b8a:	2104      	movs	r1, #4
 8011b8c:	f8d8 0000 	ldr.w	r0, [r8]
 8011b90:	f002 fc38 	bl	8014404 <LedBlink::SetMode(ledblink::Mode)>
 8011b94:	2103      	movs	r1, #3
 8011b96:	4628      	mov	r0, r5
 8011b98:	f001 fdb4 	bl	8013704 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8011b9c:	2000      	movs	r0, #0
 8011b9e:	f002 fef7 	bl	8014990 <time>
 8011ba2:	9005      	str	r0, [sp, #20]
 8011ba4:	2000      	movs	r0, #0
 8011ba6:	f002 fef3 	bl	8014990 <time>
 8011baa:	9b05      	ldr	r3, [sp, #20]
 8011bac:	1ac0      	subs	r0, r0, r3
 8011bae:	9b03      	ldr	r3, [sp, #12]
 8011bb0:	4298      	cmp	r0, r3
 8011bb2:	da1a      	bge.n	8011bea <Network::Init(NetworkParamsStore*)+0x216>
 8011bb4:	f8d8 3000 	ldr.w	r3, [r8]
 8011bb8:	491d      	ldr	r1, [pc, #116]	; (8011c30 <Network::Init(NetworkParamsStore*)+0x25c>)
 8011bba:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8011bbe:	f1bc 0f00 	cmp.w	ip, #0
 8011bc2:	d0ef      	beq.n	8011ba4 <Network::Init(NetworkParamsStore*)+0x1d0>
 8011bc4:	6808      	ldr	r0, [r1, #0]
 8011bc6:	695a      	ldr	r2, [r3, #20]
 8011bc8:	1a80      	subs	r0, r0, r2
 8011bca:	4584      	cmp	ip, r0
 8011bcc:	d8ea      	bhi.n	8011ba4 <Network::Init(NetworkParamsStore*)+0x1d0>
 8011bce:	6808      	ldr	r0, [r1, #0]
 8011bd0:	6158      	str	r0, [r3, #20]
 8011bd2:	6918      	ldr	r0, [r3, #16]
 8011bd4:	2801      	cmp	r0, #1
 8011bd6:	f080 0201 	eor.w	r2, r0, #1
 8011bda:	611a      	str	r2, [r3, #16]
 8011bdc:	bf16      	itet	ne
 8011bde:	2301      	movne	r3, #1
 8011be0:	f8cb 0014 	streq.w	r0, [fp, #20]
 8011be4:	f8cb 3010 	strne.w	r3, [fp, #16]
 8011be8:	e7dc      	b.n	8011ba4 <Network::Init(NetworkParamsStore*)+0x1d0>
 8011bea:	2101      	movs	r1, #1
 8011bec:	4628      	mov	r0, r5
 8011bee:	f001 fd89 	bl	8013704 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8011bf2:	2101      	movs	r1, #1
 8011bf4:	f8d8 0000 	ldr.w	r0, [r8]
 8011bf8:	f002 fc04 	bl	8014404 <LedBlink::SetMode(ledblink::Mode)>
 8011bfc:	2301      	movs	r3, #1
 8011bfe:	7063      	strb	r3, [r4, #1]
 8011c00:	2300      	movs	r3, #0
 8011c02:	70e3      	strb	r3, [r4, #3]
 8011c04:	9b02      	ldr	r3, [sp, #8]
 8011c06:	4632      	mov	r2, r6
 8011c08:	9300      	str	r3, [sp, #0]
 8011c0a:	4638      	mov	r0, r7
 8011c0c:	464b      	mov	r3, r9
 8011c0e:	a907      	add	r1, sp, #28
 8011c10:	f7fe fbdc 	bl	80103cc <net_init>
 8011c14:	7863      	ldrb	r3, [r4, #1]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d0a3      	beq.n	8011b62 <Network::Init(NetworkParamsStore*)+0x18e>
 8011c1a:	e7a4      	b.n	8011b66 <Network::Init(NetworkParamsStore*)+0x192>
 8011c1c:	2000a2a0 	andcs	sl, r0, r0, lsr #5
 8011c20:	08018270 	stmdaeq	r1, {r4, r5, r6, r9, pc}
 8011c24:	2000a2b5 			; <UNDEFINED> instruction: 0x2000a2b5
 8011c28:	2000a9c0 	andcs	sl, r0, r0, asr #19
 8011c2c:	40011000 	andmi	r1, r1, r0
 8011c30:	2000a9dc 	ldrdcs	sl, [r0], -ip

08011c34 <Network::SetIp(unsigned int)>:
 8011c34:	7843      	ldrb	r3, [r0, #1]
 8011c36:	b570      	push	{r4, r5, r6, lr}
 8011c38:	4604      	mov	r4, r0
 8011c3a:	460d      	mov	r5, r1
 8011c3c:	2600      	movs	r6, #0
 8011c3e:	b113      	cbz	r3, 8011c46 <Network::SetIp(unsigned int)+0x12>
 8011c40:	7046      	strb	r6, [r0, #1]
 8011c42:	f7fe fc65 	bl	8010510 <net_dhcp_release>
 8011c46:	70e6      	strb	r6, [r4, #3]
 8011c48:	b975      	cbnz	r5, 8011c68 <Network::SetIp(unsigned int)+0x34>
 8011c4a:	4620      	mov	r0, r4
 8011c4c:	f7ff feb1 	bl	80119b2 <Network::SetDefaultIp()>
 8011c50:	6920      	ldr	r0, [r4, #16]
 8011c52:	f7fe fc19 	bl	8010488 <net_set_ip>
 8011c56:	34b8      	adds	r4, #184	; 0xb8
 8011c58:	4620      	mov	r0, r4
 8011c5a:	f001 fd3b 	bl	80136d4 <NetworkDisplay::ShowIp()>
 8011c5e:	4620      	mov	r0, r4
 8011c60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c64:	f001 bd3c 	b.w	80136e0 <NetworkDisplay::ShowNetMask()>
 8011c68:	4628      	mov	r0, r5
 8011c6a:	f7fe fc0d 	bl	8010488 <net_set_ip>
 8011c6e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8011c72:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011c76:	2800      	cmp	r0, #0
 8011c78:	d0ed      	beq.n	8011c56 <Network::SetIp(unsigned int)+0x22>
 8011c7a:	6803      	ldr	r3, [r0, #0]
 8011c7c:	4629      	mov	r1, r5
 8011c7e:	689b      	ldr	r3, [r3, #8]
 8011c80:	4798      	blx	r3
 8011c82:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8011c86:	2100      	movs	r1, #0
 8011c88:	6803      	ldr	r3, [r0, #0]
 8011c8a:	699b      	ldr	r3, [r3, #24]
 8011c8c:	4798      	blx	r3
 8011c8e:	e7e2      	b.n	8011c56 <Network::SetIp(unsigned int)+0x22>

08011c90 <Network::SetNetmask(unsigned int)>:
 8011c90:	6982      	ldr	r2, [r0, #24]
 8011c92:	b510      	push	{r4, lr}
 8011c94:	428a      	cmp	r2, r1
 8011c96:	4604      	mov	r4, r0
 8011c98:	d00f      	beq.n	8011cba <Network::SetNetmask(unsigned int)+0x2a>
 8011c9a:	6181      	str	r1, [r0, #24]
 8011c9c:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
 8011ca0:	b110      	cbz	r0, 8011ca8 <Network::SetNetmask(unsigned int)+0x18>
 8011ca2:	6803      	ldr	r3, [r0, #0]
 8011ca4:	68db      	ldr	r3, [r3, #12]
 8011ca6:	4798      	blx	r3
 8011ca8:	34b8      	adds	r4, #184	; 0xb8
 8011caa:	4620      	mov	r0, r4
 8011cac:	f001 fd12 	bl	80136d4 <NetworkDisplay::ShowIp()>
 8011cb0:	4620      	mov	r0, r4
 8011cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cb6:	f001 bd13 	b.w	80136e0 <NetworkDisplay::ShowNetMask()>
 8011cba:	bd10      	pop	{r4, pc}

08011cbc <Network::SetGatewayIp(unsigned int)>:
 8011cbc:	b538      	push	{r3, r4, r5, lr}
 8011cbe:	6943      	ldr	r3, [r0, #20]
 8011cc0:	4604      	mov	r4, r0
 8011cc2:	428b      	cmp	r3, r1
 8011cc4:	460d      	mov	r5, r1
 8011cc6:	d00f      	beq.n	8011ce8 <Network::SetGatewayIp(unsigned int)+0x2c>
 8011cc8:	4608      	mov	r0, r1
 8011cca:	f7fe fbed 	bl	80104a8 <net_set_gw>
 8011cce:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8011cd2:	b118      	cbz	r0, 8011cdc <Network::SetGatewayIp(unsigned int)+0x20>
 8011cd4:	6803      	ldr	r3, [r0, #0]
 8011cd6:	4629      	mov	r1, r5
 8011cd8:	691b      	ldr	r3, [r3, #16]
 8011cda:	4798      	blx	r3
 8011cdc:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 8011ce0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ce4:	f001 bd02 	b.w	80136ec <NetworkDisplay::ShowGatewayIp()>
 8011ce8:	bd38      	pop	{r3, r4, r5, pc}
	...

08011cec <Network::EnableDhcp()>:
 8011cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cee:	4e23      	ldr	r6, [pc, #140]	; (8011d7c <Network::EnableDhcp()+0x90>)
 8011cf0:	4604      	mov	r4, r0
 8011cf2:	6833      	ldr	r3, [r6, #0]
 8011cf4:	b085      	sub	sp, #20
 8011cf6:	791f      	ldrb	r7, [r3, #4]
 8011cf8:	b137      	cbz	r7, 8011d08 <Network::EnableDhcp()+0x1c>
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	2104      	movs	r1, #4
 8011cfe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011d02:	711a      	strb	r2, [r3, #4]
 8011d04:	f002 ff92 	bl	8014c2c <fwdgt_config>
 8011d08:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
 8011d0c:	2101      	movs	r1, #1
 8011d0e:	4628      	mov	r0, r5
 8011d10:	f001 fcf8 	bl	8013704 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8011d14:	1ce2      	adds	r2, r4, #3
 8011d16:	f104 011c 	add.w	r1, r4, #28
 8011d1a:	a801      	add	r0, sp, #4
 8011d1c:	f7fe fbcc 	bl	80104b8 <net_set_dhcp>
 8011d20:	78e3      	ldrb	r3, [r4, #3]
 8011d22:	7060      	strb	r0, [r4, #1]
 8011d24:	b343      	cbz	r3, 8011d78 <Network::EnableDhcp()+0x8c>
 8011d26:	2104      	movs	r1, #4
 8011d28:	4628      	mov	r0, r5
 8011d2a:	f001 fceb 	bl	8013704 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8011d2e:	b16f      	cbz	r7, 8011d4c <Network::EnableDhcp()+0x60>
 8011d30:	2102      	movs	r1, #2
 8011d32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011d36:	6836      	ldr	r6, [r6, #0]
 8011d38:	f002 ff78 	bl	8014c2c <fwdgt_config>
 8011d3c:	2801      	cmp	r0, #1
 8011d3e:	bf0c      	ite	eq
 8011d40:	2301      	moveq	r3, #1
 8011d42:	2300      	movne	r3, #0
 8011d44:	7133      	strb	r3, [r6, #4]
 8011d46:	d101      	bne.n	8011d4c <Network::EnableDhcp()+0x60>
 8011d48:	f002 ff60 	bl	8014c0c <fwdgt_enable>
 8011d4c:	9b01      	ldr	r3, [sp, #4]
 8011d4e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8011d52:	6123      	str	r3, [r4, #16]
 8011d54:	9b02      	ldr	r3, [sp, #8]
 8011d56:	61a3      	str	r3, [r4, #24]
 8011d58:	9b03      	ldr	r3, [sp, #12]
 8011d5a:	6163      	str	r3, [r4, #20]
 8011d5c:	b118      	cbz	r0, 8011d66 <Network::EnableDhcp()+0x7a>
 8011d5e:	6803      	ldr	r3, [r0, #0]
 8011d60:	7861      	ldrb	r1, [r4, #1]
 8011d62:	699b      	ldr	r3, [r3, #24]
 8011d64:	4798      	blx	r3
 8011d66:	4628      	mov	r0, r5
 8011d68:	f001 fcb4 	bl	80136d4 <NetworkDisplay::ShowIp()>
 8011d6c:	4628      	mov	r0, r5
 8011d6e:	f001 fcb7 	bl	80136e0 <NetworkDisplay::ShowNetMask()>
 8011d72:	7860      	ldrb	r0, [r4, #1]
 8011d74:	b005      	add	sp, #20
 8011d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d78:	2102      	movs	r1, #2
 8011d7a:	e7d5      	b.n	8011d28 <Network::EnableDhcp()+0x3c>
 8011d7c:	2000a9c4 	andcs	sl, r0, r4, asr #19

08011d80 <Network::Print()>:
 8011d80:	b530      	push	{r4, r5, lr}
 8011d82:	4604      	mov	r4, r0
 8011d84:	b085      	sub	sp, #20
 8011d86:	4832      	ldr	r0, [pc, #200]	; (8011e50 <Network::Print()+0xd0>)
 8011d88:	f7f6 ff98 	bl	8008cbc <printf>
 8011d8c:	f104 011c 	add.w	r1, r4, #28
 8011d90:	4830      	ldr	r0, [pc, #192]	; (8011e54 <Network::Print()+0xd4>)
 8011d92:	f7f6 ff93 	bl	8008cbc <printf>
 8011d96:	6861      	ldr	r1, [r4, #4]
 8011d98:	f104 02a2 	add.w	r2, r4, #162	; 0xa2
 8011d9c:	482e      	ldr	r0, [pc, #184]	; (8011e58 <Network::Print()+0xd8>)
 8011d9e:	f7f6 ff8d 	bl	8008cbc <printf>
 8011da2:	69a0      	ldr	r0, [r4, #24]
 8011da4:	f7f6 f85e 	bl	8007e64 <__popcountsi2>
 8011da8:	6925      	ldr	r5, [r4, #16]
 8011daa:	9001      	str	r0, [sp, #4]
 8011dac:	0e2b      	lsrs	r3, r5, #24
 8011dae:	9300      	str	r3, [sp, #0]
 8011db0:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8011db4:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8011db8:	b2e9      	uxtb	r1, r5
 8011dba:	4828      	ldr	r0, [pc, #160]	; (8011e5c <Network::Print()+0xdc>)
 8011dbc:	f7f6 ff7e 	bl	8008cbc <printf>
 8011dc0:	69a1      	ldr	r1, [r4, #24]
 8011dc2:	4827      	ldr	r0, [pc, #156]	; (8011e60 <Network::Print()+0xe0>)
 8011dc4:	0e0b      	lsrs	r3, r1, #24
 8011dc6:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8011dca:	9300      	str	r3, [sp, #0]
 8011dcc:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8011dd0:	b2c9      	uxtb	r1, r1
 8011dd2:	f7f6 ff73 	bl	8008cbc <printf>
 8011dd6:	6961      	ldr	r1, [r4, #20]
 8011dd8:	4822      	ldr	r0, [pc, #136]	; (8011e64 <Network::Print()+0xe4>)
 8011dda:	0e0b      	lsrs	r3, r1, #24
 8011ddc:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8011de0:	9300      	str	r3, [sp, #0]
 8011de2:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8011de6:	b2c9      	uxtb	r1, r1
 8011de8:	f7f6 ff68 	bl	8008cbc <printf>
 8011dec:	69a3      	ldr	r3, [r4, #24]
 8011dee:	6921      	ldr	r1, [r4, #16]
 8011df0:	481d      	ldr	r0, [pc, #116]	; (8011e68 <Network::Print()+0xe8>)
 8011df2:	ea61 0103 	orn	r1, r1, r3
 8011df6:	0e0b      	lsrs	r3, r1, #24
 8011df8:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8011dfc:	9300      	str	r3, [sp, #0]
 8011dfe:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8011e02:	b2c9      	uxtb	r1, r1
 8011e04:	f7f6 ff5a 	bl	8008cbc <printf>
 8011e08:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 8011e0c:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
 8011e10:	9302      	str	r3, [sp, #8]
 8011e12:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8011e16:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
 8011e1a:	9301      	str	r3, [sp, #4]
 8011e1c:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
 8011e20:	4812      	ldr	r0, [pc, #72]	; (8011e6c <Network::Print()+0xec>)
 8011e22:	9300      	str	r3, [sp, #0]
 8011e24:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
 8011e28:	f7f6 ff48 	bl	8008cbc <printf>
 8011e2c:	4b10      	ldr	r3, [pc, #64]	; (8011e70 <Network::Print()+0xf0>)
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	78da      	ldrb	r2, [r3, #3]
 8011e32:	b952      	cbnz	r2, 8011e4a <Network::Print()+0xca>
 8011e34:	785b      	ldrb	r3, [r3, #1]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	bf14      	ite	ne
 8011e3a:	2144      	movne	r1, #68	; 0x44
 8011e3c:	2153      	moveq	r1, #83	; 0x53
 8011e3e:	480d      	ldr	r0, [pc, #52]	; (8011e74 <Network::Print()+0xf4>)
 8011e40:	b005      	add	sp, #20
 8011e42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011e46:	f7f6 bf39 	b.w	8008cbc <printf>
 8011e4a:	215a      	movs	r1, #90	; 0x5a
 8011e4c:	e7f7      	b.n	8011e3e <Network::Print()+0xbe>
 8011e4e:	bf00      	nop
 8011e50:	0801827c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r9, pc}
 8011e54:	08018285 	stmdaeq	r1, {r0, r2, r7, r9, pc}
 8011e58:	08018296 	stmdaeq	r1, {r1, r2, r4, r7, r9, pc}
 8011e5c:	080182ab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r9, pc}
 8011e60:	080182c8 	stmdaeq	r1, {r3, r6, r7, r9, pc}
 8011e64:	080182e2 	stmdaeq	r1, {r1, r5, r6, r7, r9, pc}
 8011e68:	080182fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r9, pc}
 8011e6c:	08018316 	stmdaeq	r1, {r1, r2, r4, r8, r9, pc}
 8011e70:	2000a29c 	mulcs	r0, ip, r2
 8011e74:	08018342 	stmdaeq	r1, {r1, r6, r8, r9, pc}

08011e78 <Network::TcpBegin(unsigned short)>:
 8011e78:	4608      	mov	r0, r1
 8011e7a:	f7fe becb 	b.w	8010c14 <tcp_begin>

08011e7e <Network::TcpRead(int, unsigned char const**)>:
 8011e7e:	4608      	mov	r0, r1
 8011e80:	4611      	mov	r1, r2
 8011e82:	f7fe bf05 	b.w	8010c90 <tcp_read>

08011e86 <Network::TcpWrite(int, unsigned char const*, unsigned short)>:
 8011e86:	4608      	mov	r0, r1
 8011e88:	4611      	mov	r1, r2
 8011e8a:	461a      	mov	r2, r3
 8011e8c:	f7fe bedc 	b.w	8010c48 <tcp_write>

08011e90 <NetworkParams::NetworkParams(NetworkParamsStore*)>:
 8011e90:	4b06      	ldr	r3, [pc, #24]	; (8011eac <NetworkParams::NetworkParams(NetworkParamsStore*)+0x1c>)
 8011e92:	b510      	push	{r4, lr}
 8011e94:	225e      	movs	r2, #94	; 0x5e
 8011e96:	4604      	mov	r4, r0
 8011e98:	6001      	str	r1, [r0, #0]
 8011e9a:	2100      	movs	r1, #0
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	f002 fc6b 	bl	8014778 <memset>
 8011ea2:	2201      	movs	r2, #1
 8011ea4:	7502      	strb	r2, [r0, #20]
 8011ea6:	4620      	mov	r0, r4
 8011ea8:	bd10      	pop	{r4, pc}
 8011eaa:	bf00      	nop
 8011eac:	2000a2a0 	andcs	sl, r0, r0, lsr #5

08011eb0 <NetworkParams::Load()>:
 8011eb0:	b508      	push	{r3, lr}
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	4905      	ldr	r1, [pc, #20]	; (8011ecc <NetworkParams::Load()+0x1c>)
 8011eb6:	6800      	ldr	r0, [r0, #0]
 8011eb8:	700b      	strb	r3, [r1, #0]
 8011eba:	704b      	strb	r3, [r1, #1]
 8011ebc:	708b      	strb	r3, [r1, #2]
 8011ebe:	70cb      	strb	r3, [r1, #3]
 8011ec0:	b118      	cbz	r0, 8011eca <NetworkParams::Load()+0x1a>
 8011ec2:	6803      	ldr	r3, [r0, #0]
 8011ec4:	68db      	ldr	r3, [r3, #12]
 8011ec6:	4798      	blx	r3
 8011ec8:	2001      	movs	r0, #1
 8011eca:	bd08      	pop	{r3, pc}
 8011ecc:	2000a2a0 	andcs	sl, r0, r0, lsr #5

08011ed0 <NetworkParams::Load(char const*, unsigned int)>:
 8011ed0:	6803      	ldr	r3, [r0, #0]
 8011ed2:	b1eb      	cbz	r3, 8011f10 <NetworkParams::Load(char const*, unsigned int)+0x40>
 8011ed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	460e      	mov	r6, r1
 8011eda:	4617      	mov	r7, r2
 8011edc:	4605      	mov	r5, r0
 8011ede:	4c0d      	ldr	r4, [pc, #52]	; (8011f14 <NetworkParams::Load(char const*, unsigned int)+0x44>)
 8011ee0:	4602      	mov	r2, r0
 8011ee2:	490d      	ldr	r1, [pc, #52]	; (8011f18 <NetworkParams::Load(char const*, unsigned int)+0x48>)
 8011ee4:	4668      	mov	r0, sp
 8011ee6:	7023      	strb	r3, [r4, #0]
 8011ee8:	7063      	strb	r3, [r4, #1]
 8011eea:	70a3      	strb	r3, [r4, #2]
 8011eec:	70e3      	strb	r3, [r4, #3]
 8011eee:	f001 fd8d 	bl	8013a0c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8011ef2:	463a      	mov	r2, r7
 8011ef4:	4631      	mov	r1, r6
 8011ef6:	4668      	mov	r0, sp
 8011ef8:	f001 fd8c 	bl	8013a14 <ReadConfigFile::Read(char const*, unsigned int)>
 8011efc:	6828      	ldr	r0, [r5, #0]
 8011efe:	4621      	mov	r1, r4
 8011f00:	6803      	ldr	r3, [r0, #0]
 8011f02:	689b      	ldr	r3, [r3, #8]
 8011f04:	4798      	blx	r3
 8011f06:	4668      	mov	r0, sp
 8011f08:	f001 fd83 	bl	8013a12 <ReadConfigFile::~ReadConfigFile()>
 8011f0c:	b003      	add	sp, #12
 8011f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f10:	4770      	bx	lr
 8011f12:	bf00      	nop
 8011f14:	2000a2a0 	andcs	sl, r0, r0, lsr #5
 8011f18:	0801204d 	stmdaeq	r1, {r0, r2, r3, r6, sp}

08011f1c <NetworkParams::callbackFunction(char const*)>:
 8011f1c:	b530      	push	{r4, r5, lr}
 8011f1e:	460c      	mov	r4, r1
 8011f20:	b085      	sub	sp, #20
 8011f22:	4620      	mov	r0, r4
 8011f24:	4942      	ldr	r1, [pc, #264]	; (8012030 <NetworkParams::callbackFunction(char const*)+0x114>)
 8011f26:	f10d 0207 	add.w	r2, sp, #7
 8011f2a:	f001 fed5 	bl	8013cd8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8011f2e:	b980      	cbnz	r0, 8011f52 <NetworkParams::callbackFunction(char const*)+0x36>
 8011f30:	4940      	ldr	r1, [pc, #256]	; (8012034 <NetworkParams::callbackFunction(char const*)+0x118>)
 8011f32:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011f36:	680b      	ldr	r3, [r1, #0]
 8011f38:	b142      	cbz	r2, 8011f4c <NetworkParams::callbackFunction(char const*)+0x30>
 8011f3a:	f023 0301 	bic.w	r3, r3, #1
 8011f3e:	3a00      	subs	r2, #0
 8011f40:	bf18      	it	ne
 8011f42:	2201      	movne	r2, #1
 8011f44:	600b      	str	r3, [r1, #0]
 8011f46:	750a      	strb	r2, [r1, #20]
 8011f48:	b005      	add	sp, #20
 8011f4a:	bd30      	pop	{r4, r5, pc}
 8011f4c:	f043 0301 	orr.w	r3, r3, #1
 8011f50:	e7f5      	b.n	8011f3e <NetworkParams::callbackFunction(char const*)+0x22>
 8011f52:	4620      	mov	r0, r4
 8011f54:	4938      	ldr	r1, [pc, #224]	; (8012038 <NetworkParams::callbackFunction(char const*)+0x11c>)
 8011f56:	f10d 0207 	add.w	r2, sp, #7
 8011f5a:	f001 febd 	bl	8013cd8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8011f5e:	b988      	cbnz	r0, 8011f84 <NetworkParams::callbackFunction(char const*)+0x68>
 8011f60:	4a34      	ldr	r2, [pc, #208]	; (8012034 <NetworkParams::callbackFunction(char const*)+0x118>)
 8011f62:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011f66:	6813      	ldr	r3, [r2, #0]
 8011f68:	1e4d      	subs	r5, r1, #1
 8011f6a:	2d04      	cmp	r5, #4
 8011f6c:	bf97      	itett	ls
 8011f6e:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 8011f72:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 8011f76:	6013      	strls	r3, [r2, #0]
 8011f78:	f882 105d 	strbls.w	r1, [r2, #93]	; 0x5d
 8011f7c:	bf84      	itt	hi
 8011f7e:	6013      	strhi	r3, [r2, #0]
 8011f80:	f882 005d 	strbhi.w	r0, [r2, #93]	; 0x5d
 8011f84:	4620      	mov	r0, r4
 8011f86:	492d      	ldr	r1, [pc, #180]	; (801203c <NetworkParams::callbackFunction(char const*)+0x120>)
 8011f88:	aa02      	add	r2, sp, #8
 8011f8a:	f001 fe1e 	bl	8013bca <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8011f8e:	b9d0      	cbnz	r0, 8011fc6 <NetworkParams::callbackFunction(char const*)+0xaa>
 8011f90:	9b02      	ldr	r3, [sp, #8]
 8011f92:	b2d9      	uxtb	r1, r3
 8011f94:	29ac      	cmp	r1, #172	; 0xac
 8011f96:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011f9a:	d00a      	beq.n	8011fb2 <NetworkParams::callbackFunction(char const*)+0x96>
 8011f9c:	29c0      	cmp	r1, #192	; 0xc0
 8011f9e:	d00c      	beq.n	8011fba <NetworkParams::callbackFunction(char const*)+0x9e>
 8011fa0:	290a      	cmp	r1, #10
 8011fa2:	d10d      	bne.n	8011fc0 <NetworkParams::callbackFunction(char const*)+0xa4>
 8011fa4:	4a23      	ldr	r2, [pc, #140]	; (8012034 <NetworkParams::callbackFunction(char const*)+0x118>)
 8011fa6:	6053      	str	r3, [r2, #4]
 8011fa8:	6813      	ldr	r3, [r2, #0]
 8011faa:	f043 0302 	orr.w	r3, r3, #2
 8011fae:	6013      	str	r3, [r2, #0]
 8011fb0:	e7ca      	b.n	8011f48 <NetworkParams::callbackFunction(char const*)+0x2c>
 8011fb2:	3a10      	subs	r2, #16
 8011fb4:	2a0f      	cmp	r2, #15
 8011fb6:	d8c7      	bhi.n	8011f48 <NetworkParams::callbackFunction(char const*)+0x2c>
 8011fb8:	e7f4      	b.n	8011fa4 <NetworkParams::callbackFunction(char const*)+0x88>
 8011fba:	2aa8      	cmp	r2, #168	; 0xa8
 8011fbc:	d1c4      	bne.n	8011f48 <NetworkParams::callbackFunction(char const*)+0x2c>
 8011fbe:	e7f1      	b.n	8011fa4 <NetworkParams::callbackFunction(char const*)+0x88>
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d0ef      	beq.n	8011fa4 <NetworkParams::callbackFunction(char const*)+0x88>
 8011fc4:	e7c0      	b.n	8011f48 <NetworkParams::callbackFunction(char const*)+0x2c>
 8011fc6:	4620      	mov	r0, r4
 8011fc8:	491d      	ldr	r1, [pc, #116]	; (8012040 <NetworkParams::callbackFunction(char const*)+0x124>)
 8011fca:	aa02      	add	r2, sp, #8
 8011fcc:	f001 fdfd 	bl	8013bca <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8011fd0:	b970      	cbnz	r0, 8011ff0 <NetworkParams::callbackFunction(char const*)+0xd4>
 8011fd2:	9a02      	ldr	r2, [sp, #8]
 8011fd4:	2a00      	cmp	r2, #0
 8011fd6:	d0b7      	beq.n	8011f48 <NetworkParams::callbackFunction(char const*)+0x2c>
 8011fd8:	ba13      	rev	r3, r2
 8011fda:	43d9      	mvns	r1, r3
 8011fdc:	ea13 0351 	ands.w	r3, r3, r1, lsr #1
 8011fe0:	d1b2      	bne.n	8011f48 <NetworkParams::callbackFunction(char const*)+0x2c>
 8011fe2:	4b14      	ldr	r3, [pc, #80]	; (8012034 <NetworkParams::callbackFunction(char const*)+0x118>)
 8011fe4:	609a      	str	r2, [r3, #8]
 8011fe6:	681a      	ldr	r2, [r3, #0]
 8011fe8:	f042 0204 	orr.w	r2, r2, #4
 8011fec:	601a      	str	r2, [r3, #0]
 8011fee:	e7ab      	b.n	8011f48 <NetworkParams::callbackFunction(char const*)+0x2c>
 8011ff0:	4620      	mov	r0, r4
 8011ff2:	4914      	ldr	r1, [pc, #80]	; (8012044 <NetworkParams::callbackFunction(char const*)+0x128>)
 8011ff4:	aa02      	add	r2, sp, #8
 8011ff6:	f001 fde8 	bl	8013bca <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8011ffa:	4d0e      	ldr	r5, [pc, #56]	; (8012034 <NetworkParams::callbackFunction(char const*)+0x118>)
 8011ffc:	b930      	cbnz	r0, 801200c <NetworkParams::callbackFunction(char const*)+0xf0>
 8011ffe:	9b02      	ldr	r3, [sp, #8]
 8012000:	60eb      	str	r3, [r5, #12]
 8012002:	682b      	ldr	r3, [r5, #0]
 8012004:	f043 0308 	orr.w	r3, r3, #8
 8012008:	602b      	str	r3, [r5, #0]
 801200a:	e79d      	b.n	8011f48 <NetworkParams::callbackFunction(char const*)+0x2c>
 801200c:	233f      	movs	r3, #63	; 0x3f
 801200e:	4620      	mov	r0, r4
 8012010:	9303      	str	r3, [sp, #12]
 8012012:	490d      	ldr	r1, [pc, #52]	; (8012048 <NetworkParams::callbackFunction(char const*)+0x12c>)
 8012014:	ab03      	add	r3, sp, #12
 8012016:	f105 0215 	add.w	r2, r5, #21
 801201a:	f001 fd2f 	bl	8013a7c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 801201e:	2800      	cmp	r0, #0
 8012020:	d192      	bne.n	8011f48 <NetworkParams::callbackFunction(char const*)+0x2c>
 8012022:	9b03      	ldr	r3, [sp, #12]
 8012024:	442b      	add	r3, r5
 8012026:	7558      	strb	r0, [r3, #21]
 8012028:	682b      	ldr	r3, [r5, #0]
 801202a:	f043 0320 	orr.w	r3, r3, #32
 801202e:	e7eb      	b.n	8012008 <NetworkParams::callbackFunction(char const*)+0xec>
 8012030:	0801839a 	stmdaeq	r1, {r1, r3, r4, r7, r8, r9, pc}
 8012034:	2000a2a0 	andcs	sl, r0, r0, lsr #5
 8012038:	08018378 	stmdaeq	r1, {r3, r4, r5, r6, r8, r9, pc}
 801203c:	0801835d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, r9, pc}
 8012040:	08018391 	stmdaeq	r1, {r0, r4, r7, r8, r9, pc}
 8012044:	08018368 	stmdaeq	r1, {r3, r5, r6, r8, r9, pc}
 8012048:	08018388 	stmdaeq	r1, {r3, r7, r8, r9, pc}

0801204c <NetworkParams::staticCallbackFunction(void*, char const*)>:
 801204c:	f7ff bf66 	b.w	8011f1c <NetworkParams::callbackFunction(char const*)>

08012050 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)>:
 8012050:	b530      	push	{r4, r5, lr}
 8012052:	4614      	mov	r4, r2
 8012054:	461d      	mov	r5, r3
 8012056:	b087      	sub	sp, #28
 8012058:	2900      	cmp	r1, #0
 801205a:	d040      	beq.n	80120de <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x8e>
 801205c:	225e      	movs	r2, #94	; 0x5e
 801205e:	4871      	ldr	r0, [pc, #452]	; (8012224 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1d4>)
 8012060:	f002 fb73 	bl	801474a <memmove>
 8012064:	4622      	mov	r2, r4
 8012066:	462b      	mov	r3, r5
 8012068:	496f      	ldr	r1, [pc, #444]	; (8012228 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1d8>)
 801206a:	a803      	add	r0, sp, #12
 801206c:	f001 fbfe 	bl	801386c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 8012070:	4c6c      	ldr	r4, [pc, #432]	; (8012224 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1d4>)
 8012072:	6823      	ldr	r3, [r4, #0]
 8012074:	0799      	lsls	r1, r3, #30
 8012076:	bf5f      	itttt	pl
 8012078:	4a6c      	ldrpl	r2, [pc, #432]	; (801222c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1dc>)
 801207a:	6812      	ldrpl	r2, [r2, #0]
 801207c:	6912      	ldrpl	r2, [r2, #16]
 801207e:	6062      	strpl	r2, [r4, #4]
 8012080:	075a      	lsls	r2, r3, #29
 8012082:	bf5f      	itttt	pl
 8012084:	4a69      	ldrpl	r2, [pc, #420]	; (801222c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1dc>)
 8012086:	6812      	ldrpl	r2, [r2, #0]
 8012088:	6992      	ldrpl	r2, [r2, #24]
 801208a:	60a2      	strpl	r2, [r4, #8]
 801208c:	071d      	lsls	r5, r3, #28
 801208e:	bf5f      	itttt	pl
 8012090:	4a66      	ldrpl	r2, [pc, #408]	; (801222c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1dc>)
 8012092:	6812      	ldrpl	r2, [r2, #0]
 8012094:	6952      	ldrpl	r2, [r2, #20]
 8012096:	60e2      	strpl	r2, [r4, #12]
 8012098:	0698      	lsls	r0, r3, #26
 801209a:	d40c      	bmi.n	80120b6 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x66>
 801209c:	223f      	movs	r2, #63	; 0x3f
 801209e:	4b63      	ldr	r3, [pc, #396]	; (801222c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1dc>)
 80120a0:	4863      	ldr	r0, [pc, #396]	; (8012230 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e0>)
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	331b      	adds	r3, #27
 80120a6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80120aa:	b9f1      	cbnz	r1, 80120ea <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x9a>
 80120ac:	f002 fb64 	bl	8014778 <memset>
 80120b0:	2300      	movs	r3, #0
 80120b2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80120b6:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 80120ba:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80120be:	42a9      	cmp	r1, r5
 80120c0:	d226      	bcs.n	8012110 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xc0>
 80120c2:	9803      	ldr	r0, [sp, #12]
 80120c4:	1a6d      	subs	r5, r5, r1
 80120c6:	4408      	add	r0, r1
 80120c8:	6821      	ldr	r1, [r4, #0]
 80120ca:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80120ce:	07c9      	lsls	r1, r1, #31
 80120d0:	7d23      	ldrb	r3, [r4, #20]
 80120d2:	d40f      	bmi.n	80120f4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xa4>
 80120d4:	b97a      	cbnz	r2, 80120f6 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xa6>
 80120d6:	9300      	str	r3, [sp, #0]
 80120d8:	4a56      	ldr	r2, [pc, #344]	; (8012234 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e4>)
 80120da:	4b57      	ldr	r3, [pc, #348]	; (8012238 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e8>)
 80120dc:	e00e      	b.n	80120fc <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xac>
 80120de:	6800      	ldr	r0, [r0, #0]
 80120e0:	4950      	ldr	r1, [pc, #320]	; (8012224 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1d4>)
 80120e2:	6803      	ldr	r3, [r0, #0]
 80120e4:	68db      	ldr	r3, [r3, #12]
 80120e6:	4798      	blx	r3
 80120e8:	e7bc      	b.n	8012064 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x14>
 80120ea:	3a01      	subs	r2, #1
 80120ec:	f800 1b01 	strb.w	r1, [r0], #1
 80120f0:	d1d9      	bne.n	80120a6 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x56>
 80120f2:	e7dd      	b.n	80120b0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x60>
 80120f4:	b30a      	cbz	r2, 801213a <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xea>
 80120f6:	9300      	str	r3, [sp, #0]
 80120f8:	4a50      	ldr	r2, [pc, #320]	; (801223c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1ec>)
 80120fa:	4b4f      	ldr	r3, [pc, #316]	; (8012238 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e8>)
 80120fc:	4629      	mov	r1, r5
 80120fe:	f7f6 fe05 	bl	8008d0c <snprintf>
 8012102:	4285      	cmp	r5, r0
 8012104:	bfa2      	ittt	ge
 8012106:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 801210a:	18c0      	addge	r0, r0, r3
 801210c:	f8ad 0012 	strhge.w	r0, [sp, #18]
 8012110:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8012114:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8012118:	42a9      	cmp	r1, r5
 801211a:	d221      	bcs.n	8012160 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x110>
 801211c:	9803      	ldr	r0, [sp, #12]
 801211e:	1a6d      	subs	r5, r5, r1
 8012120:	4408      	add	r0, r1
 8012122:	6821      	ldr	r1, [r4, #0]
 8012124:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8012128:	05c9      	lsls	r1, r1, #23
 801212a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 801212e:	d408      	bmi.n	8012142 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xf2>
 8012130:	b94a      	cbnz	r2, 8012146 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xf6>
 8012132:	9300      	str	r3, [sp, #0]
 8012134:	4a3f      	ldr	r2, [pc, #252]	; (8012234 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e4>)
 8012136:	4b42      	ldr	r3, [pc, #264]	; (8012240 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f0>)
 8012138:	e008      	b.n	801214c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xfc>
 801213a:	9300      	str	r3, [sp, #0]
 801213c:	4a41      	ldr	r2, [pc, #260]	; (8012244 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f4>)
 801213e:	4b3e      	ldr	r3, [pc, #248]	; (8012238 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e8>)
 8012140:	e7dc      	b.n	80120fc <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xac>
 8012142:	2a00      	cmp	r2, #0
 8012144:	d03e      	beq.n	80121c4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x174>
 8012146:	9300      	str	r3, [sp, #0]
 8012148:	4a3c      	ldr	r2, [pc, #240]	; (801223c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1ec>)
 801214a:	4b3d      	ldr	r3, [pc, #244]	; (8012240 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f0>)
 801214c:	4629      	mov	r1, r5
 801214e:	f7f6 fddd 	bl	8008d0c <snprintf>
 8012152:	4285      	cmp	r5, r0
 8012154:	bfa2      	ittt	ge
 8012156:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 801215a:	18c0      	addge	r0, r0, r3
 801215c:	f8ad 0012 	strhge.w	r0, [sp, #18]
 8012160:	4939      	ldr	r1, [pc, #228]	; (8012248 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f8>)
 8012162:	a803      	add	r0, sp, #12
 8012164:	f001 fc08 	bl	8013978 <PropertiesBuilder::AddComment(char const*)>
 8012168:	6823      	ldr	r3, [r4, #0]
 801216a:	6862      	ldr	r2, [r4, #4]
 801216c:	4937      	ldr	r1, [pc, #220]	; (801224c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1fc>)
 801216e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8012172:	a803      	add	r0, sp, #12
 8012174:	f001 fbbc 	bl	80138f0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 8012178:	6823      	ldr	r3, [r4, #0]
 801217a:	68a2      	ldr	r2, [r4, #8]
 801217c:	4934      	ldr	r1, [pc, #208]	; (8012250 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x200>)
 801217e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8012182:	a803      	add	r0, sp, #12
 8012184:	f001 fbb4 	bl	80138f0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 8012188:	6823      	ldr	r3, [r4, #0]
 801218a:	4932      	ldr	r1, [pc, #200]	; (8012254 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x204>)
 801218c:	68e2      	ldr	r2, [r4, #12]
 801218e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8012192:	a803      	add	r0, sp, #12
 8012194:	f001 fbac 	bl	80138f0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 8012198:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 801219c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80121a0:	42a9      	cmp	r1, r5
 80121a2:	d221      	bcs.n	80121e8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x198>
 80121a4:	6823      	ldr	r3, [r4, #0]
 80121a6:	9803      	ldr	r0, [sp, #12]
 80121a8:	f013 0f20 	tst.w	r3, #32
 80121ac:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80121b0:	4b1f      	ldr	r3, [pc, #124]	; (8012230 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e0>)
 80121b2:	4408      	add	r0, r1
 80121b4:	eba5 0501 	sub.w	r5, r5, r1
 80121b8:	d108      	bne.n	80121cc <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x17c>
 80121ba:	b942      	cbnz	r2, 80121ce <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x17e>
 80121bc:	9300      	str	r3, [sp, #0]
 80121be:	4a26      	ldr	r2, [pc, #152]	; (8012258 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x208>)
 80121c0:	4b26      	ldr	r3, [pc, #152]	; (801225c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x20c>)
 80121c2:	e007      	b.n	80121d4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x184>
 80121c4:	9300      	str	r3, [sp, #0]
 80121c6:	4a1f      	ldr	r2, [pc, #124]	; (8012244 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f4>)
 80121c8:	4b1d      	ldr	r3, [pc, #116]	; (8012240 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f0>)
 80121ca:	e7bf      	b.n	801214c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xfc>
 80121cc:	b32a      	cbz	r2, 801221a <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1ca>
 80121ce:	9300      	str	r3, [sp, #0]
 80121d0:	4a23      	ldr	r2, [pc, #140]	; (8012260 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x210>)
 80121d2:	4b22      	ldr	r3, [pc, #136]	; (801225c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x20c>)
 80121d4:	4629      	mov	r1, r5
 80121d6:	f7f6 fd99 	bl	8008d0c <snprintf>
 80121da:	4285      	cmp	r5, r0
 80121dc:	bfa2      	ittt	ge
 80121de:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 80121e2:	18c0      	addge	r0, r0, r3
 80121e4:	f8ad 0012 	strhge.w	r0, [sp, #18]
 80121e8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80121ec:	b17b      	cbz	r3, 801220e <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1be>
 80121ee:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80121f2:	9b03      	ldr	r3, [sp, #12]
 80121f4:	4413      	add	r3, r2
 80121f6:	227d      	movs	r2, #125	; 0x7d
 80121f8:	f803 2c01 	strb.w	r2, [r3, #-1]
 80121fc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8012200:	9903      	ldr	r1, [sp, #12]
 8012202:	54ca      	strb	r2, [r1, r3]
 8012204:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8012208:	3301      	adds	r3, #1
 801220a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801220e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8012212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012214:	601a      	str	r2, [r3, #0]
 8012216:	b007      	add	sp, #28
 8012218:	bd30      	pop	{r4, r5, pc}
 801221a:	9300      	str	r3, [sp, #0]
 801221c:	4a11      	ldr	r2, [pc, #68]	; (8012264 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x214>)
 801221e:	4b0f      	ldr	r3, [pc, #60]	; (801225c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x20c>)
 8012220:	e7d8      	b.n	80121d4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x184>
 8012222:	bf00      	nop
 8012224:	2000a2a0 	andcs	sl, r0, r0, lsr #5
 8012228:	080183a3 	stmdaeq	r1, {r0, r1, r5, r7, r8, r9, pc}
 801222c:	2000a29c 	mulcs	r0, ip, r2
 8012230:	2000a2b5 			; <UNDEFINED> instruction: 0x2000a2b5
 8012234:	08016af9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, sp, lr}
 8012238:	0801839a 	stmdaeq	r1, {r1, r3, r4, r7, r8, r9, pc}
 801223c:	08016af0 	stmdaeq	r1, {r4, r5, r6, r7, r9, fp, sp, lr}
 8012240:	08018378 	stmdaeq	r1, {r3, r4, r5, r6, r8, r9, pc}
 8012244:	08016afa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r9, fp, sp, lr}
 8012248:	08018353 	stmdaeq	r1, {r0, r1, r4, r6, r8, r9, pc}
 801224c:	0801835d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, r9, pc}
 8012250:	08018391 	stmdaeq	r1, {r0, r4, r7, r8, r9, pc}
 8012254:	08018368 	stmdaeq	r1, {r3, r5, r6, r8, r9, pc}
 8012258:	08016b0c 	stmdaeq	r1, {r2, r3, r8, r9, fp, sp, lr}
 801225c:	08018388 	stmdaeq	r1, {r3, r7, r8, r9, pc}
 8012260:	08016b01 	stmdaeq	r1, {r0, r8, r9, fp, sp, lr}
 8012264:	08016b0d 	stmdaeq	r1, {r0, r2, r3, r8, r9, fp, sp, lr}

08012268 <NetworkParams::Save(char*, unsigned int, unsigned int&)>:
 8012268:	b513      	push	{r0, r1, r4, lr}
 801226a:	6804      	ldr	r4, [r0, #0]
 801226c:	b914      	cbnz	r4, 8012274 <NetworkParams::Save(char*, unsigned int, unsigned int&)+0xc>
 801226e:	601c      	str	r4, [r3, #0]
 8012270:	b002      	add	sp, #8
 8012272:	bd10      	pop	{r4, pc}
 8012274:	9300      	str	r3, [sp, #0]
 8012276:	4613      	mov	r3, r2
 8012278:	460a      	mov	r2, r1
 801227a:	2100      	movs	r1, #0
 801227c:	f7ff fee8 	bl	8012050 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)>
 8012280:	e7f6      	b.n	8012270 <NetworkParams::Save(char*, unsigned int, unsigned int&)+0x8>

08012282 <NetworkParams::Dump()>:
 8012282:	4770      	bx	lr

08012284 <memcpy.isra.0>:
 8012284:	3801      	subs	r0, #1
 8012286:	440a      	add	r2, r1
 8012288:	4291      	cmp	r1, r2
 801228a:	d100      	bne.n	801228e <memcpy.isra.0+0xa>
 801228c:	4770      	bx	lr
 801228e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012292:	f800 3f01 	strb.w	r3, [r0, #1]!
 8012296:	e7f7      	b.n	8012288 <memcpy.isra.0+0x4>

08012298 <arp_announce>:
 8012298:	4803      	ldr	r0, [pc, #12]	; (80122a8 <arp_announce+0x10>)
 801229a:	69c3      	ldr	r3, [r0, #28]
 801229c:	b113      	cbz	r3, 80122a4 <arp_announce+0xc>
 801229e:	212a      	movs	r1, #42	; 0x2a
 80122a0:	f003 b8ee 	b.w	8015480 <emac_eth_send>
 80122a4:	4770      	bx	lr
 80122a6:	bf00      	nop
 80122a8:	2000a300 	andcs	sl, r0, r0, lsl #6

080122ac <arp_handle_request>:
 80122ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80122ae:	2204      	movs	r2, #4
 80122b0:	f100 0126 	add.w	r1, r0, #38	; 0x26
 80122b4:	4604      	mov	r4, r0
 80122b6:	eb0d 0002 	add.w	r0, sp, r2
 80122ba:	f7ff ffe3 	bl	8012284 <memcpy.isra.0>
 80122be:	4b0d      	ldr	r3, [pc, #52]	; (80122f4 <arp_handle_request+0x48>)
 80122c0:	9a01      	ldr	r2, [sp, #4]
 80122c2:	69db      	ldr	r3, [r3, #28]
 80122c4:	429a      	cmp	r2, r3
 80122c6:	d113      	bne.n	80122f0 <arp_handle_request+0x44>
 80122c8:	2206      	movs	r2, #6
 80122ca:	4d0b      	ldr	r5, [pc, #44]	; (80122f8 <arp_handle_request+0x4c>)
 80122cc:	18a1      	adds	r1, r4, r2
 80122ce:	4628      	mov	r0, r5
 80122d0:	f7ff ffd8 	bl	8012284 <memcpy.isra.0>
 80122d4:	f104 0116 	add.w	r1, r4, #22
 80122d8:	f105 0020 	add.w	r0, r5, #32
 80122dc:	2206      	movs	r2, #6
 80122de:	f7ff ffd1 	bl	8012284 <memcpy.isra.0>
 80122e2:	69e3      	ldr	r3, [r4, #28]
 80122e4:	212a      	movs	r1, #42	; 0x2a
 80122e6:	4628      	mov	r0, r5
 80122e8:	f8c5 3026 	str.w	r3, [r5, #38]	; 0x26
 80122ec:	f003 f8c8 	bl	8015480 <emac_eth_send>
 80122f0:	b003      	add	sp, #12
 80122f2:	bd30      	pop	{r4, r5, pc}
 80122f4:	2000a300 	andcs	sl, r0, r0, lsl #6
 80122f8:	2000a32c 	andcs	sl, r0, ip, lsr #6

080122fc <arp_handle_reply>:
 80122fc:	69c1      	ldr	r1, [r0, #28]
 80122fe:	3016      	adds	r0, #22
 8012300:	f000 b8ac 	b.w	801245c <arp_cache_update>

08012304 <arp_init>:
 8012304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012308:	4604      	mov	r4, r0
 801230a:	460d      	mov	r5, r1
 801230c:	f000 f88c 	bl	8012428 <arp_cache_init>
 8012310:	2206      	movs	r2, #6
 8012312:	4621      	mov	r1, r4
 8012314:	482e      	ldr	r0, [pc, #184]	; (80123d0 <arp_init+0xcc>)
 8012316:	682f      	ldr	r7, [r5, #0]
 8012318:	f7ff ffb4 	bl	8012284 <memcpy.isra.0>
 801231c:	4b2d      	ldr	r3, [pc, #180]	; (80123d4 <arp_init+0xd0>)
 801231e:	2507      	movs	r5, #7
 8012320:	461e      	mov	r6, r3
 8012322:	22ff      	movs	r2, #255	; 0xff
 8012324:	3d01      	subs	r5, #1
 8012326:	d146      	bne.n	80123b6 <arp_init+0xb2>
 8012328:	4b2b      	ldr	r3, [pc, #172]	; (80123d8 <arp_init+0xd4>)
 801232a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80123dc <arp_init+0xd8>
 801232e:	2206      	movs	r2, #6
 8012330:	e9c6 3803 	strd	r3, r8, [r6, #12]
 8012334:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012338:	4621      	mov	r1, r4
 801233a:	4829      	ldr	r0, [pc, #164]	; (80123e0 <arp_init+0xdc>)
 801233c:	82b3      	strh	r3, [r6, #20]
 801233e:	f7ff ffa1 	bl	8012284 <memcpy.isra.0>
 8012342:	2307      	movs	r3, #7
 8012344:	4a27      	ldr	r2, [pc, #156]	; (80123e4 <arp_init+0xe0>)
 8012346:	61f7      	str	r7, [r6, #28]
 8012348:	3b01      	subs	r3, #1
 801234a:	d137      	bne.n	80123bc <arp_init+0xb8>
 801234c:	2206      	movs	r2, #6
 801234e:	4621      	mov	r1, r4
 8012350:	4825      	ldr	r0, [pc, #148]	; (80123e8 <arp_init+0xe4>)
 8012352:	f8c6 7026 	str.w	r7, [r6, #38]	; 0x26
 8012356:	f7ff ff95 	bl	8012284 <memcpy.isra.0>
 801235a:	4a24      	ldr	r2, [pc, #144]	; (80123ec <arp_init+0xe8>)
 801235c:	2306      	movs	r3, #6
 801235e:	4615      	mov	r5, r2
 8012360:	21ff      	movs	r1, #255	; 0xff
 8012362:	3b01      	subs	r3, #1
 8012364:	d22d      	bcs.n	80123c2 <arp_init+0xbe>
 8012366:	4b1c      	ldr	r3, [pc, #112]	; (80123d8 <arp_init+0xd4>)
 8012368:	2206      	movs	r2, #6
 801236a:	e9c5 3803 	strd	r3, r8, [r5, #12]
 801236e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012372:	4621      	mov	r1, r4
 8012374:	481e      	ldr	r0, [pc, #120]	; (80123f0 <arp_init+0xec>)
 8012376:	82ab      	strh	r3, [r5, #20]
 8012378:	f7ff ff84 	bl	8012284 <memcpy.isra.0>
 801237c:	2307      	movs	r3, #7
 801237e:	2100      	movs	r1, #0
 8012380:	4a1c      	ldr	r2, [pc, #112]	; (80123f4 <arp_init+0xf0>)
 8012382:	61ef      	str	r7, [r5, #28]
 8012384:	3b01      	subs	r3, #1
 8012386:	d11f      	bne.n	80123c8 <arp_init+0xc4>
 8012388:	2206      	movs	r2, #6
 801238a:	4d1b      	ldr	r5, [pc, #108]	; (80123f8 <arp_init+0xf4>)
 801238c:	4621      	mov	r1, r4
 801238e:	18a8      	adds	r0, r5, r2
 8012390:	f7ff ff78 	bl	8012284 <memcpy.isra.0>
 8012394:	4b10      	ldr	r3, [pc, #64]	; (80123d8 <arp_init+0xd4>)
 8012396:	4621      	mov	r1, r4
 8012398:	e9c5 3803 	strd	r3, r8, [r5, #12]
 801239c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80123a0:	f105 0016 	add.w	r0, r5, #22
 80123a4:	2206      	movs	r2, #6
 80123a6:	82ab      	strh	r3, [r5, #20]
 80123a8:	f7ff ff6c 	bl	8012284 <memcpy.isra.0>
 80123ac:	61ef      	str	r7, [r5, #28]
 80123ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80123b2:	f7ff bf71 	b.w	8012298 <arp_announce>
 80123b6:	f803 2b01 	strb.w	r2, [r3], #1
 80123ba:	e7b3      	b.n	8012324 <arp_init+0x20>
 80123bc:	f802 5b01 	strb.w	r5, [r2], #1
 80123c0:	e7c2      	b.n	8012348 <arp_init+0x44>
 80123c2:	f802 1b01 	strb.w	r1, [r2], #1
 80123c6:	e7cc      	b.n	8012362 <arp_init+0x5e>
 80123c8:	f802 1b01 	strb.w	r1, [r2], #1
 80123cc:	e7da      	b.n	8012384 <arp_init+0x80>
 80123ce:	bf00      	nop
 80123d0:	2000a306 	andcs	sl, r0, r6, lsl #6
 80123d4:	2000a300 	andcs	sl, r0, r0, lsl #6
 80123d8:	01000608 	tsteq	r0, r8, lsl #12
 80123dc:	04060008 	streq	r0, [r6], #-8
 80123e0:	2000a316 	andcs	sl, r0, r6, lsl r3
 80123e4:	2000a320 	andcs	sl, r0, r0, lsr #6
 80123e8:	2000a35e 	andcs	sl, r0, lr, asr r3
 80123ec:	2000a358 	andcs	sl, r0, r8, asr r3
 80123f0:	2000a36e 	andcs	sl, r0, lr, ror #6
 80123f4:	2000a378 	andcs	sl, r0, r8, ror r3
 80123f8:	2000a32c 	andcs	sl, r0, ip, lsr #6

080123fc <arp_send_request>:
 80123fc:	4b03      	ldr	r3, [pc, #12]	; (801240c <arp_send_request+0x10>)
 80123fe:	212a      	movs	r1, #42	; 0x2a
 8012400:	f8c3 0026 	str.w	r0, [r3, #38]	; 0x26
 8012404:	4618      	mov	r0, r3
 8012406:	f003 b83b 	b.w	8015480 <emac_eth_send>
 801240a:	bf00      	nop
 801240c:	2000a358 	andcs	sl, r0, r8, asr r3

08012410 <arp_handle>:
 8012410:	8a83      	ldrh	r3, [r0, #20]
 8012412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012416:	d003      	beq.n	8012420 <arp_handle+0x10>
 8012418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801241c:	d002      	beq.n	8012424 <arp_handle+0x14>
 801241e:	4770      	bx	lr
 8012420:	f7ff bf44 	b.w	80122ac <arp_handle_request>
 8012424:	f7ff bf6a 	b.w	80122fc <arp_handle_reply>

08012428 <arp_cache_init>:
 8012428:	2300      	movs	r3, #0
 801242a:	4618      	mov	r0, r3
 801242c:	4a09      	ldr	r2, [pc, #36]	; (8012454 <arp_cache_init+0x2c>)
 801242e:	b510      	push	{r4, lr}
 8012430:	8013      	strh	r3, [r2, #0]
 8012432:	4a09      	ldr	r2, [pc, #36]	; (8012458 <arp_cache_init+0x30>)
 8012434:	4611      	mov	r1, r2
 8012436:	f842 0c04 	str.w	r0, [r2, #-4]
 801243a:	1d94      	adds	r4, r2, #6
 801243c:	42a1      	cmp	r1, r4
 801243e:	d105      	bne.n	801244c <arp_cache_init+0x24>
 8012440:	3303      	adds	r3, #3
 8012442:	2b60      	cmp	r3, #96	; 0x60
 8012444:	f102 020c 	add.w	r2, r2, #12
 8012448:	d1f4      	bne.n	8012434 <arp_cache_init+0xc>
 801244a:	bd10      	pop	{r4, pc}
 801244c:	f801 0b01 	strb.w	r0, [r1], #1
 8012450:	e7f4      	b.n	801243c <arp_cache_init+0x14>
 8012452:	bf00      	nop
 8012454:	2000a504 	andcs	sl, r0, r4, lsl #10
 8012458:	2000a388 	andcs	sl, r0, r8, lsl #7

0801245c <arp_cache_update>:
 801245c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801245e:	4e11      	ldr	r6, [pc, #68]	; (80124a4 <arp_cache_update+0x48>)
 8012460:	8833      	ldrh	r3, [r6, #0]
 8012462:	2b20      	cmp	r3, #32
 8012464:	d018      	beq.n	8012498 <arp_cache_update+0x3c>
 8012466:	2400      	movs	r4, #0
 8012468:	220c      	movs	r2, #12
 801246a:	4d0f      	ldr	r5, [pc, #60]	; (80124a8 <arp_cache_update+0x4c>)
 801246c:	b2a7      	uxth	r7, r4
 801246e:	42bb      	cmp	r3, r7
 8012470:	d80b      	bhi.n	801248a <arp_cache_update+0x2e>
 8012472:	fb02 5203 	mla	r2, r2, r3, r5
 8012476:	1d84      	adds	r4, r0, #6
 8012478:	3203      	adds	r2, #3
 801247a:	42a0      	cmp	r0, r4
 801247c:	d10d      	bne.n	801249a <arp_cache_update+0x3e>
 801247e:	220c      	movs	r2, #12
 8012480:	435a      	muls	r2, r3
 8012482:	3301      	adds	r3, #1
 8012484:	50a9      	str	r1, [r5, r2]
 8012486:	8033      	strh	r3, [r6, #0]
 8012488:	e006      	b.n	8012498 <arp_cache_update+0x3c>
 801248a:	3401      	adds	r4, #1
 801248c:	fb02 5704 	mla	r7, r2, r4, r5
 8012490:	f857 7c0c 	ldr.w	r7, [r7, #-12]
 8012494:	428f      	cmp	r7, r1
 8012496:	d1e9      	bne.n	801246c <arp_cache_update+0x10>
 8012498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801249a:	f810 7b01 	ldrb.w	r7, [r0], #1
 801249e:	f802 7f01 	strb.w	r7, [r2, #1]!
 80124a2:	e7ea      	b.n	801247a <arp_cache_update+0x1e>
 80124a4:	2000a504 	andcs	sl, r0, r4, lsl #10
 80124a8:	2000a384 	andcs	sl, r0, r4, lsl #7

080124ac <arp_cache_lookup>:
 80124ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124b0:	2200      	movs	r2, #0
 80124b2:	4606      	mov	r6, r0
 80124b4:	460c      	mov	r4, r1
 80124b6:	200c      	movs	r0, #12
 80124b8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8012540 <arp_cache_lookup+0x94>
 80124bc:	fb00 f302 	mul.w	r3, r0, r2
 80124c0:	f853 1008 	ldr.w	r1, [r3, r8]
 80124c4:	42b1      	cmp	r1, r6
 80124c6:	d10d      	bne.n	80124e4 <arp_cache_lookup+0x38>
 80124c8:	3304      	adds	r3, #4
 80124ca:	4443      	add	r3, r8
 80124cc:	3c01      	subs	r4, #1
 80124ce:	1d9a      	adds	r2, r3, #6
 80124d0:	4293      	cmp	r3, r2
 80124d2:	d102      	bne.n	80124da <arp_cache_lookup+0x2e>
 80124d4:	4630      	mov	r0, r6
 80124d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124da:	f813 1b01 	ldrb.w	r1, [r3], #1
 80124de:	f804 1f01 	strb.w	r1, [r4, #1]!
 80124e2:	e7f5      	b.n	80124d0 <arp_cache_lookup+0x24>
 80124e4:	b111      	cbz	r1, 80124ec <arp_cache_lookup+0x40>
 80124e6:	3201      	adds	r2, #1
 80124e8:	2a20      	cmp	r2, #32
 80124ea:	d1e7      	bne.n	80124bc <arp_cache_lookup+0x10>
 80124ec:	2704      	movs	r7, #4
 80124ee:	f8df a054 	ldr.w	sl, [pc, #84]	; 8012544 <arp_cache_lookup+0x98>
 80124f2:	f8ba 5000 	ldrh.w	r5, [sl]
 80124f6:	3f01      	subs	r7, #1
 80124f8:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 80124fc:	d101      	bne.n	8012502 <arp_cache_lookup+0x56>
 80124fe:	463e      	mov	r6, r7
 8012500:	e7e8      	b.n	80124d4 <arp_cache_lookup+0x28>
 8012502:	4630      	mov	r0, r6
 8012504:	f7ff ff7a 	bl	80123fc <arp_send_request>
 8012508:	f44f 3900 	mov.w	r9, #131072	; 0x20000
 801250c:	f1b9 0901 	subs.w	r9, r9, #1
 8012510:	f8ba 3000 	ldrh.w	r3, [sl]
 8012514:	d011      	beq.n	801253a <arp_cache_lookup+0x8e>
 8012516:	429d      	cmp	r5, r3
 8012518:	d00c      	beq.n	8012534 <arp_cache_lookup+0x88>
 801251a:	230c      	movs	r3, #12
 801251c:	fb03 8505 	mla	r5, r3, r5, r8
 8012520:	3c01      	subs	r4, #1
 8012522:	1d2b      	adds	r3, r5, #4
 8012524:	350a      	adds	r5, #10
 8012526:	42ab      	cmp	r3, r5
 8012528:	d0d4      	beq.n	80124d4 <arp_cache_lookup+0x28>
 801252a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801252e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012532:	e7f8      	b.n	8012526 <arp_cache_lookup+0x7a>
 8012534:	f7fd fff6 	bl	8010524 <net_handle>
 8012538:	e7e8      	b.n	801250c <arp_cache_lookup+0x60>
 801253a:	429d      	cmp	r5, r3
 801253c:	d0db      	beq.n	80124f6 <arp_cache_lookup+0x4a>
 801253e:	e7ec      	b.n	801251a <arp_cache_lookup+0x6e>
 8012540:	2000a384 	andcs	sl, r0, r4, lsl #7
 8012544:	2000a504 	andcs	sl, r0, r4, lsl #10

08012548 <_parse_response>:
 8012548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801254c:	460c      	mov	r4, r1
 801254e:	4e5b      	ldr	r6, [pc, #364]	; (80126bc <_parse_response+0x174>)
 8012550:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
 8012554:	6837      	ldr	r7, [r6, #0]
 8012556:	b2c5      	uxtb	r5, r0
 8012558:	f10d 0826 	add.w	r8, sp, #38	; 0x26
 801255c:	f7fd ffe2 	bl	8010524 <net_handle>
 8012560:	f44f 7209 	mov.w	r2, #548	; 0x224
 8012564:	4628      	mov	r0, r5
 8012566:	f8cd 8000 	str.w	r8, [sp]
 801256a:	ab0a      	add	r3, sp, #40	; 0x28
 801256c:	a90b      	add	r1, sp, #44	; 0x2c
 801256e:	f7fe fcdd 	bl	8010f2c <udp_recv>
 8012572:	2800      	cmp	r0, #0
 8012574:	d05f      	beq.n	8012636 <_parse_response+0xee>
 8012576:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801257a:	2b43      	cmp	r3, #67	; 0x43
 801257c:	d15b      	bne.n	8012636 <_parse_response+0xee>
 801257e:	aa12      	add	r2, sp, #72	; 0x48
 8012580:	1e63      	subs	r3, r4, #1
 8012582:	1d61      	adds	r1, r4, #5
 8012584:	428b      	cmp	r3, r1
 8012586:	d150      	bne.n	801262a <_parse_response+0xe2>
 8012588:	2100      	movs	r1, #0
 801258a:	ab0b      	add	r3, sp, #44	; 0x2c
 801258c:	181c      	adds	r4, r3, r0
 801258e:	4608      	mov	r0, r1
 8012590:	4b4b      	ldr	r3, [pc, #300]	; (80126c0 <_parse_response+0x178>)
 8012592:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8012596:	781a      	ldrb	r2, [r3, #0]
 8012598:	f893 b001 	ldrb.w	fp, [r3, #1]
 801259c:	f893 c002 	ldrb.w	ip, [r3, #2]
 80125a0:	78dd      	ldrb	r5, [r3, #3]
 80125a2:	4b48      	ldr	r3, [pc, #288]	; (80126c4 <_parse_response+0x17c>)
 80125a4:	9207      	str	r2, [sp, #28]
 80125a6:	781a      	ldrb	r2, [r3, #0]
 80125a8:	789f      	ldrb	r7, [r3, #2]
 80125aa:	78de      	ldrb	r6, [r3, #3]
 80125ac:	9206      	str	r2, [sp, #24]
 80125ae:	785a      	ldrb	r2, [r3, #1]
 80125b0:	4b45      	ldr	r3, [pc, #276]	; (80126c8 <_parse_response+0x180>)
 80125b2:	9203      	str	r2, [sp, #12]
 80125b4:	f893 a000 	ldrb.w	sl, [r3]
 80125b8:	f893 9001 	ldrb.w	r9, [r3, #1]
 80125bc:	f893 8002 	ldrb.w	r8, [r3, #2]
 80125c0:	f893 e003 	ldrb.w	lr, [r3, #3]
 80125c4:	ab47      	add	r3, sp, #284	; 0x11c
 80125c6:	42a3      	cmp	r3, r4
 80125c8:	d33f      	bcc.n	801264a <_parse_response+0x102>
 80125ca:	9b04      	ldr	r3, [sp, #16]
 80125cc:	b143      	cbz	r3, 80125e0 <_parse_response+0x98>
 80125ce:	4b3e      	ldr	r3, [pc, #248]	; (80126c8 <_parse_response+0x180>)
 80125d0:	f883 a000 	strb.w	sl, [r3]
 80125d4:	f883 9001 	strb.w	r9, [r3, #1]
 80125d8:	f883 8002 	strb.w	r8, [r3, #2]
 80125dc:	f883 e003 	strb.w	lr, [r3, #3]
 80125e0:	9b05      	ldr	r3, [sp, #20]
 80125e2:	b133      	cbz	r3, 80125f2 <_parse_response+0xaa>
 80125e4:	4b37      	ldr	r3, [pc, #220]	; (80126c4 <_parse_response+0x17c>)
 80125e6:	9a06      	ldr	r2, [sp, #24]
 80125e8:	709f      	strb	r7, [r3, #2]
 80125ea:	701a      	strb	r2, [r3, #0]
 80125ec:	9a03      	ldr	r2, [sp, #12]
 80125ee:	70de      	strb	r6, [r3, #3]
 80125f0:	705a      	strb	r2, [r3, #1]
 80125f2:	b139      	cbz	r1, 8012604 <_parse_response+0xbc>
 80125f4:	4b32      	ldr	r3, [pc, #200]	; (80126c0 <_parse_response+0x178>)
 80125f6:	9a07      	ldr	r2, [sp, #28]
 80125f8:	f883 b001 	strb.w	fp, [r3, #1]
 80125fc:	701a      	strb	r2, [r3, #0]
 80125fe:	f883 c002 	strb.w	ip, [r3, #2]
 8012602:	70dd      	strb	r5, [r3, #3]
 8012604:	2802      	cmp	r0, #2
 8012606:	d10c      	bne.n	8012622 <_parse_response+0xda>
 8012608:	4b30      	ldr	r3, [pc, #192]	; (80126cc <_parse_response+0x184>)
 801260a:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 801260e:	701a      	strb	r2, [r3, #0]
 8012610:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 8012614:	705a      	strb	r2, [r3, #1]
 8012616:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
 801261a:	709a      	strb	r2, [r3, #2]
 801261c:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8012620:	70da      	strb	r2, [r3, #3]
 8012622:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
 8012626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801262a:	f812 cb01 	ldrb.w	ip, [r2], #1
 801262e:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8012632:	45e6      	cmp	lr, ip
 8012634:	d0a6      	beq.n	8012584 <_parse_response+0x3c>
 8012636:	6833      	ldr	r3, [r6, #0]
 8012638:	1bdb      	subs	r3, r3, r7
 801263a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801263e:	d38b      	bcc.n	8012558 <_parse_response+0x10>
 8012640:	2800      	cmp	r0, #0
 8012642:	d1a1      	bne.n	8012588 <_parse_response+0x40>
 8012644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012648:	e7eb      	b.n	8012622 <_parse_response+0xda>
 801264a:	781a      	ldrb	r2, [r3, #0]
 801264c:	2a35      	cmp	r2, #53	; 0x35
 801264e:	d011      	beq.n	8012674 <_parse_response+0x12c>
 8012650:	d808      	bhi.n	8012664 <_parse_response+0x11c>
 8012652:	2a01      	cmp	r2, #1
 8012654:	d011      	beq.n	801267a <_parse_response+0x132>
 8012656:	2a03      	cmp	r2, #3
 8012658:	d01a      	beq.n	8012690 <_parse_response+0x148>
 801265a:	b14a      	cbz	r2, 8012670 <_parse_response+0x128>
 801265c:	1c9a      	adds	r2, r3, #2
 801265e:	785b      	ldrb	r3, [r3, #1]
 8012660:	4413      	add	r3, r2
 8012662:	e7b0      	b.n	80125c6 <_parse_response+0x7e>
 8012664:	2a36      	cmp	r2, #54	; 0x36
 8012666:	d01f      	beq.n	80126a8 <_parse_response+0x160>
 8012668:	2aff      	cmp	r2, #255	; 0xff
 801266a:	d1f7      	bne.n	801265c <_parse_response+0x114>
 801266c:	4623      	mov	r3, r4
 801266e:	e7aa      	b.n	80125c6 <_parse_response+0x7e>
 8012670:	3301      	adds	r3, #1
 8012672:	e7a8      	b.n	80125c6 <_parse_response+0x7e>
 8012674:	7898      	ldrb	r0, [r3, #2]
 8012676:	3303      	adds	r3, #3
 8012678:	e7a5      	b.n	80125c6 <_parse_response+0x7e>
 801267a:	f893 a002 	ldrb.w	sl, [r3, #2]
 801267e:	f893 9003 	ldrb.w	r9, [r3, #3]
 8012682:	f893 8004 	ldrb.w	r8, [r3, #4]
 8012686:	f893 e005 	ldrb.w	lr, [r3, #5]
 801268a:	9204      	str	r2, [sp, #16]
 801268c:	3306      	adds	r3, #6
 801268e:	e79a      	b.n	80125c6 <_parse_response+0x7e>
 8012690:	789a      	ldrb	r2, [r3, #2]
 8012692:	791f      	ldrb	r7, [r3, #4]
 8012694:	9206      	str	r2, [sp, #24]
 8012696:	78da      	ldrb	r2, [r3, #3]
 8012698:	795e      	ldrb	r6, [r3, #5]
 801269a:	9203      	str	r2, [sp, #12]
 801269c:	785a      	ldrb	r2, [r3, #1]
 801269e:	4413      	add	r3, r2
 80126a0:	2201      	movs	r2, #1
 80126a2:	3302      	adds	r3, #2
 80126a4:	9205      	str	r2, [sp, #20]
 80126a6:	e78e      	b.n	80125c6 <_parse_response+0x7e>
 80126a8:	789a      	ldrb	r2, [r3, #2]
 80126aa:	f893 b003 	ldrb.w	fp, [r3, #3]
 80126ae:	f893 c004 	ldrb.w	ip, [r3, #4]
 80126b2:	795d      	ldrb	r5, [r3, #5]
 80126b4:	2101      	movs	r1, #1
 80126b6:	9207      	str	r2, [sp, #28]
 80126b8:	3306      	adds	r3, #6
 80126ba:	e784      	b.n	80125c6 <_parse_response+0x7e>
 80126bc:	2000a9dc 	ldrdcs	sl, [r0], -ip
 80126c0:	2000a738 	andcs	sl, r0, r8, lsr r7
 80126c4:	2000a508 	andcs	sl, r0, r8, lsl #10
 80126c8:	2000a510 	andcs	sl, r0, r0, lsl r5
 80126cc:	2000a50c 	andcs	sl, r0, ip, lsl #10

080126d0 <memcpy.isra.0>:
 80126d0:	3801      	subs	r0, #1
 80126d2:	440a      	add	r2, r1
 80126d4:	4291      	cmp	r1, r2
 80126d6:	d100      	bne.n	80126da <memcpy.isra.0+0xa>
 80126d8:	4770      	bx	lr
 80126da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80126de:	f800 3f01 	strb.w	r3, [r0, #1]!
 80126e2:	e7f7      	b.n	80126d4 <memcpy.isra.0+0x4>

080126e4 <dhcp_client>:
 80126e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126e8:	b087      	sub	sp, #28
 80126ea:	9203      	str	r2, [sp, #12]
 80126ec:	4a77      	ldr	r2, [pc, #476]	; (80128cc <dhcp_client+0x1e8>)
 80126ee:	460f      	mov	r7, r1
 80126f0:	4605      	mov	r5, r0
 80126f2:	f44f 7309 	mov.w	r3, #548	; 0x224
 80126f6:	4614      	mov	r4, r2
 80126f8:	2100      	movs	r1, #0
 80126fa:	3b01      	subs	r3, #1
 80126fc:	f802 1b01 	strb.w	r1, [r2], #1
 8012700:	d1fb      	bne.n	80126fa <dhcp_client+0x16>
 8012702:	f240 1301 	movw	r3, #257	; 0x101
 8012706:	2206      	movs	r2, #6
 8012708:	4629      	mov	r1, r5
 801270a:	4871      	ldr	r0, [pc, #452]	; (80128d0 <dhcp_client+0x1ec>)
 801270c:	8023      	strh	r3, [r4, #0]
 801270e:	70a2      	strb	r2, [r4, #2]
 8012710:	f7ff ffde 	bl	80126d0 <memcpy.isra.0>
 8012714:	4b6f      	ldr	r3, [pc, #444]	; (80128d4 <dhcp_client+0x1f0>)
 8012716:	2044      	movs	r0, #68	; 0x44
 8012718:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 801271c:	f240 1335 	movw	r3, #309	; 0x135
 8012720:	f8a4 30f0 	strh.w	r3, [r4, #240]	; 0xf0
 8012724:	f7fe fbc8 	bl	8010eb8 <udp_bind>
 8012728:	1e06      	subs	r6, r0, #0
 801272a:	f2c0 80c9 	blt.w	80128c0 <dhcp_client+0x1dc>
 801272e:	f04f 0915 	mov.w	r9, #21
 8012732:	f8df a198 	ldr.w	sl, [pc, #408]	; 80128cc <dhcp_client+0x1e8>
 8012736:	f1b9 0901 	subs.w	r9, r9, #1
 801273a:	d11f      	bne.n	801277c <dhcp_client+0x98>
 801273c:	464c      	mov	r4, r9
 801273e:	2044      	movs	r0, #68	; 0x44
 8012740:	f7fe fbd4 	bl	8010eec <udp_unbind>
 8012744:	2c00      	cmp	r4, #0
 8012746:	f000 80be 	beq.w	80128c6 <dhcp_client+0x1e2>
 801274a:	2204      	movs	r2, #4
 801274c:	4962      	ldr	r1, [pc, #392]	; (80128d8 <dhcp_client+0x1f4>)
 801274e:	a805      	add	r0, sp, #20
 8012750:	f7ff ffbe 	bl	80126d0 <memcpy.isra.0>
 8012754:	9b05      	ldr	r3, [sp, #20]
 8012756:	2204      	movs	r2, #4
 8012758:	4960      	ldr	r1, [pc, #384]	; (80128dc <dhcp_client+0x1f8>)
 801275a:	603b      	str	r3, [r7, #0]
 801275c:	a805      	add	r0, sp, #20
 801275e:	f7ff ffb7 	bl	80126d0 <memcpy.isra.0>
 8012762:	9b05      	ldr	r3, [sp, #20]
 8012764:	a805      	add	r0, sp, #20
 8012766:	60bb      	str	r3, [r7, #8]
 8012768:	2204      	movs	r2, #4
 801276a:	495d      	ldr	r1, [pc, #372]	; (80128e0 <dhcp_client+0x1fc>)
 801276c:	f7ff ffb0 	bl	80126d0 <memcpy.isra.0>
 8012770:	2000      	movs	r0, #0
 8012772:	9b05      	ldr	r3, [sp, #20]
 8012774:	607b      	str	r3, [r7, #4]
 8012776:	b007      	add	sp, #28
 8012778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801277c:	f643 5301 	movw	r3, #15617	; 0x3d01
 8012780:	f240 1807 	movw	r8, #263	; 0x107
 8012784:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 8012788:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 801278c:	782b      	ldrb	r3, [r5, #0]
 801278e:	4a55      	ldr	r2, [pc, #340]	; (80128e4 <dhcp_client+0x200>)
 8012790:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 8012794:	786b      	ldrb	r3, [r5, #1]
 8012796:	fa5f fb86 	uxtb.w	fp, r6
 801279a:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 801279e:	78ab      	ldrb	r3, [r5, #2]
 80127a0:	4651      	mov	r1, sl
 80127a2:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 80127a6:	78eb      	ldrb	r3, [r5, #3]
 80127a8:	4658      	mov	r0, fp
 80127aa:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 80127ae:	792b      	ldrb	r3, [r5, #4]
 80127b0:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 80127b4:	796b      	ldrb	r3, [r5, #5]
 80127b6:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 80127ba:	4b4b      	ldr	r3, [pc, #300]	; (80128e8 <dhcp_client+0x204>)
 80127bc:	e9c4 233f 	strd	r2, r3, [r4, #252]	; 0xfc
 80127c0:	23ff      	movs	r3, #255	; 0xff
 80127c2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80127c6:	2343      	movs	r3, #67	; 0x43
 80127c8:	f240 1205 	movw	r2, #261	; 0x105
 80127cc:	9300      	str	r3, [sp, #0]
 80127ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80127d2:	f7fe fc07 	bl	8010fe4 <udp_send>
 80127d6:	4629      	mov	r1, r5
 80127d8:	4630      	mov	r0, r6
 80127da:	f7ff feb5 	bl	8012548 <_parse_response>
 80127de:	2802      	cmp	r0, #2
 80127e0:	d1a9      	bne.n	8012736 <dhcp_client+0x52>
 80127e2:	f643 5303 	movw	r3, #15619	; 0x3d03
 80127e6:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 80127ea:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 80127ee:	782b      	ldrb	r3, [r5, #0]
 80127f0:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 80128ec <dhcp_client+0x208>
 80127f4:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 80127f8:	786b      	ldrb	r3, [r5, #1]
 80127fa:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 80127fe:	78ab      	ldrb	r3, [r5, #2]
 8012800:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 8012804:	78eb      	ldrb	r3, [r5, #3]
 8012806:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 801280a:	792b      	ldrb	r3, [r5, #4]
 801280c:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 8012810:	796b      	ldrb	r3, [r5, #5]
 8012812:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 8012816:	f240 4332 	movw	r3, #1074	; 0x432
 801281a:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
 801281e:	4b2e      	ldr	r3, [pc, #184]	; (80128d8 <dhcp_client+0x1f4>)
 8012820:	881a      	ldrh	r2, [r3, #0]
 8012822:	885b      	ldrh	r3, [r3, #2]
 8012824:	f8a4 20fe 	strh.w	r2, [r4, #254]	; 0xfe
 8012828:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 801282c:	f240 4336 	movw	r3, #1078	; 0x436
 8012830:	f8a4 3102 	strh.w	r3, [r4, #258]	; 0x102
 8012834:	4b2e      	ldr	r3, [pc, #184]	; (80128f0 <dhcp_client+0x20c>)
 8012836:	221e      	movs	r2, #30
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 801283e:	230c      	movs	r3, #12
 8012840:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
 8012844:	9b03      	ldr	r3, [sp, #12]
 8012846:	1e58      	subs	r0, r3, #1
 8012848:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801284c:	f1a2 0e1e 	sub.w	lr, r2, #30
 8012850:	1c51      	adds	r1, r2, #1
 8012852:	bb8b      	cbnz	r3, 80128b8 <dhcp_client+0x1d4>
 8012854:	2037      	movs	r0, #55	; 0x37
 8012856:	18a3      	adds	r3, r4, r2
 8012858:	f883 00ec 	strb.w	r0, [r3, #236]	; 0xec
 801285c:	2006      	movs	r0, #6
 801285e:	4421      	add	r1, r4
 8012860:	f881 00ec 	strb.w	r0, [r1, #236]	; 0xec
 8012864:	2103      	movs	r1, #3
 8012866:	f883 10ef 	strb.w	r1, [r3, #239]	; 0xef
 801286a:	210f      	movs	r1, #15
 801286c:	f883 10f1 	strb.w	r1, [r3, #241]	; 0xf1
 8012870:	213a      	movs	r1, #58	; 0x3a
 8012872:	f883 10f2 	strb.w	r1, [r3, #242]	; 0xf2
 8012876:	213b      	movs	r1, #59	; 0x3b
 8012878:	f04f 0801 	mov.w	r8, #1
 801287c:	f883 10f3 	strb.w	r1, [r3, #243]	; 0xf3
 8012880:	21ff      	movs	r1, #255	; 0xff
 8012882:	f883 00f0 	strb.w	r0, [r3, #240]	; 0xf0
 8012886:	f883 10f4 	strb.w	r1, [r3, #244]	; 0xf4
 801288a:	f883 80ee 	strb.w	r8, [r3, #238]	; 0xee
 801288e:	2343      	movs	r3, #67	; 0x43
 8012890:	32f5      	adds	r2, #245	; 0xf5
 8012892:	f884 e109 	strb.w	lr, [r4, #265]	; 0x109
 8012896:	4651      	mov	r1, sl
 8012898:	9300      	str	r3, [sp, #0]
 801289a:	b292      	uxth	r2, r2
 801289c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80128a0:	4658      	mov	r0, fp
 80128a2:	f7fe fb9f 	bl	8010fe4 <udp_send>
 80128a6:	4629      	mov	r1, r5
 80128a8:	4630      	mov	r0, r6
 80128aa:	f7ff fe4d 	bl	8012548 <_parse_response>
 80128ae:	2805      	cmp	r0, #5
 80128b0:	f47f af41 	bne.w	8012736 <dhcp_client+0x52>
 80128b4:	4644      	mov	r4, r8
 80128b6:	e742      	b.n	801273e <dhcp_client+0x5a>
 80128b8:	460a      	mov	r2, r1
 80128ba:	f80c 3b01 	strb.w	r3, [ip], #1
 80128be:	e7c3      	b.n	8012848 <dhcp_client+0x164>
 80128c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80128c4:	e757      	b.n	8012776 <dhcp_client+0x92>
 80128c6:	f06f 0001 	mvn.w	r0, #1
 80128ca:	e754      	b.n	8012776 <dhcp_client+0x92>
 80128cc:	2000a514 	andcs	sl, r0, r4, lsl r5
 80128d0:	2000a530 	andcs	sl, r0, r0, lsr r5
 80128d4:	63538263 	cmpvs	r3, #805306374	; 0x30000006
 80128d8:	2000a50c 	andcs	sl, r0, ip, lsl #10
 80128dc:	2000a508 	andcs	sl, r0, r8, lsl #10
 80128e0:	2000a510 	andcs	sl, r0, r0, lsl r5
 80128e4:	03010637 	movweq	r0, #5687	; 0x1637
 80128e8:	3b3a0f06 	blcc	8e96508 <__exidx_end+0xe7d948>
 80128ec:	2000a61e 	andcs	sl, r0, lr, lsl r6
 80128f0:	2000a738 	andcs	sl, r0, r8, lsr r7

080128f4 <dhcp_client_release>:
 80128f4:	b507      	push	{r0, r1, r2, lr}
 80128f6:	2044      	movs	r0, #68	; 0x44
 80128f8:	f7fe fade 	bl	8010eb8 <udp_bind>
 80128fc:	f243 6307 	movw	r3, #13831	; 0x3607
 8012900:	4911      	ldr	r1, [pc, #68]	; (8012948 <dhcp_client_release+0x54>)
 8012902:	b2c0      	uxtb	r0, r0
 8012904:	f8a1 30f2 	strh.w	r3, [r1, #242]	; 0xf2
 8012908:	2304      	movs	r3, #4
 801290a:	f881 30f4 	strb.w	r3, [r1, #244]	; 0xf4
 801290e:	4b0f      	ldr	r3, [pc, #60]	; (801294c <dhcp_client_release+0x58>)
 8012910:	781a      	ldrb	r2, [r3, #0]
 8012912:	f881 20f5 	strb.w	r2, [r1, #245]	; 0xf5
 8012916:	785a      	ldrb	r2, [r3, #1]
 8012918:	f881 20f6 	strb.w	r2, [r1, #246]	; 0xf6
 801291c:	789a      	ldrb	r2, [r3, #2]
 801291e:	78db      	ldrb	r3, [r3, #3]
 8012920:	f881 20f7 	strb.w	r2, [r1, #247]	; 0xf7
 8012924:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
 8012928:	23ff      	movs	r3, #255	; 0xff
 801292a:	f881 30f9 	strb.w	r3, [r1, #249]	; 0xf9
 801292e:	2343      	movs	r3, #67	; 0x43
 8012930:	22fa      	movs	r2, #250	; 0xfa
 8012932:	9300      	str	r3, [sp, #0]
 8012934:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012938:	f7fe fb54 	bl	8010fe4 <udp_send>
 801293c:	2044      	movs	r0, #68	; 0x44
 801293e:	b003      	add	sp, #12
 8012940:	f85d eb04 	ldr.w	lr, [sp], #4
 8012944:	f7fe bad2 	b.w	8010eec <udp_unbind>
 8012948:	2000a514 	andcs	sl, r0, r4, lsl r5
 801294c:	2000a738 	andcs	sl, r0, r8, lsr r7

08012950 <memcpy.isra.0>:
 8012950:	3801      	subs	r0, #1
 8012952:	440a      	add	r2, r1
 8012954:	4291      	cmp	r1, r2
 8012956:	d100      	bne.n	801295a <memcpy.isra.0+0xa>
 8012958:	4770      	bx	lr
 801295a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801295e:	f800 3f01 	strb.w	r3, [r0, #1]!
 8012962:	e7f7      	b.n	8012954 <memcpy.isra.0+0x4>

08012964 <_send_report>:
 8012964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012966:	491c      	ldr	r1, [pc, #112]	; (80129d8 <_send_report+0x74>)
 8012968:	4c1c      	ldr	r4, [pc, #112]	; (80129dc <_send_report+0x78>)
 801296a:	f3c0 2306 	ubfx	r3, r0, #8, #7
 801296e:	9001      	str	r0, [sp, #4]
 8012970:	70cb      	strb	r3, [r1, #3]
 8012972:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8012976:	f3c0 6007 	ubfx	r0, r0, #24, #8
 801297a:	710b      	strb	r3, [r1, #4]
 801297c:	7148      	strb	r0, [r1, #5]
 801297e:	2206      	movs	r2, #6
 8012980:	4620      	mov	r0, r4
 8012982:	f7ff ffe5 	bl	8012950 <memcpy.isra.0>
 8012986:	2204      	movs	r2, #4
 8012988:	2700      	movs	r7, #0
 801298a:	4d15      	ldr	r5, [pc, #84]	; (80129e0 <_send_report+0x7c>)
 801298c:	eb0d 0102 	add.w	r1, sp, r2
 8012990:	882b      	ldrh	r3, [r5, #0]
 8012992:	f104 001e 	add.w	r0, r4, #30
 8012996:	f104 060e 	add.w	r6, r4, #14
 801299a:	8263      	strh	r3, [r4, #18]
 801299c:	f7ff ffd8 	bl	8012950 <memcpy.isra.0>
 80129a0:	2118      	movs	r1, #24
 80129a2:	4630      	mov	r0, r6
 80129a4:	8327      	strh	r7, [r4, #24]
 80129a6:	f000 f9b7 	bl	8012d18 <net_chksum>
 80129aa:	2204      	movs	r2, #4
 80129ac:	8320      	strh	r0, [r4, #24]
 80129ae:	eb0d 0102 	add.w	r1, sp, r2
 80129b2:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 80129b6:	f7ff ffcb 	bl	8012950 <memcpy.isra.0>
 80129ba:	2120      	movs	r1, #32
 80129bc:	4630      	mov	r0, r6
 80129be:	8527      	strh	r7, [r4, #40]	; 0x28
 80129c0:	f000 f9aa 	bl	8012d18 <net_chksum>
 80129c4:	212e      	movs	r1, #46	; 0x2e
 80129c6:	8520      	strh	r0, [r4, #40]	; 0x28
 80129c8:	4620      	mov	r0, r4
 80129ca:	f002 fd59 	bl	8015480 <emac_eth_send>
 80129ce:	882b      	ldrh	r3, [r5, #0]
 80129d0:	3301      	adds	r3, #1
 80129d2:	802b      	strh	r3, [r5, #0]
 80129d4:	b003      	add	sp, #12
 80129d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129d8:	2000a894 	mulcs	r0, r4, r8
 80129dc:	2000a89c 	mulcs	r0, ip, r8
 80129e0:	2000a85c 	andcs	sl, r0, ip, asr r8

080129e4 <igmp_set_ip>:
 80129e4:	b507      	push	{r0, r1, r2, lr}
 80129e6:	2204      	movs	r2, #4
 80129e8:	6803      	ldr	r3, [r0, #0]
 80129ea:	eb0d 0102 	add.w	r1, sp, r2
 80129ee:	4806      	ldr	r0, [pc, #24]	; (8012a08 <igmp_set_ip+0x24>)
 80129f0:	9301      	str	r3, [sp, #4]
 80129f2:	f7ff ffad 	bl	8012950 <memcpy.isra.0>
 80129f6:	2204      	movs	r2, #4
 80129f8:	4804      	ldr	r0, [pc, #16]	; (8012a0c <igmp_set_ip+0x28>)
 80129fa:	eb0d 0102 	add.w	r1, sp, r2
 80129fe:	f7ff ffa7 	bl	8012950 <memcpy.isra.0>
 8012a02:	b003      	add	sp, #12
 8012a04:	f85d fb04 	ldr.w	pc, [sp], #4
 8012a08:	2000a8b6 			; <UNDEFINED> instruction: 0x2000a8b6
 8012a0c:	2000a87e 	andcs	sl, r0, lr, ror r8

08012a10 <igmp_init>:
 8012a10:	2200      	movs	r2, #0
 8012a12:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a16:	4605      	mov	r5, r0
 8012a18:	4608      	mov	r0, r1
 8012a1a:	4611      	mov	r1, r2
 8012a1c:	4b23      	ldr	r3, [pc, #140]	; (8012aac <igmp_init+0x9c>)
 8012a1e:	f103 0408 	add.w	r4, r3, #8
 8012a22:	42a3      	cmp	r3, r4
 8012a24:	d13e      	bne.n	8012aa4 <igmp_init+0x94>
 8012a26:	3201      	adds	r2, #1
 8012a28:	2a24      	cmp	r2, #36	; 0x24
 8012a2a:	d1f8      	bne.n	8012a1e <igmp_init+0xe>
 8012a2c:	2600      	movs	r6, #0
 8012a2e:	4b20      	ldr	r3, [pc, #128]	; (8012ab0 <igmp_init+0xa0>)
 8012a30:	4c20      	ldr	r4, [pc, #128]	; (8012ab4 <igmp_init+0xa4>)
 8012a32:	601e      	str	r6, [r3, #0]
 8012a34:	4b20      	ldr	r3, [pc, #128]	; (8012ab8 <igmp_init+0xa8>)
 8012a36:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 8012a3a:	801e      	strh	r6, [r3, #0]
 8012a3c:	f7ff ffd2 	bl	80129e4 <igmp_set_ip>
 8012a40:	2201      	movs	r2, #1
 8012a42:	4b1e      	ldr	r3, [pc, #120]	; (8012abc <igmp_init+0xac>)
 8012a44:	4629      	mov	r1, r5
 8012a46:	801a      	strh	r2, [r3, #0]
 8012a48:	225e      	movs	r2, #94	; 0x5e
 8012a4a:	709a      	strb	r2, [r3, #2]
 8012a4c:	2206      	movs	r2, #6
 8012a4e:	18a0      	adds	r0, r4, r2
 8012a50:	f7ff ff7e 	bl	8012950 <memcpy.isra.0>
 8012a54:	f240 4394 	movw	r3, #1172	; 0x494
 8012a58:	8463      	strh	r3, [r4, #34]	; 0x22
 8012a5a:	2316      	movs	r3, #22
 8012a5c:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8012ac0 <igmp_init+0xb0>
 8012a60:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8012ac4 <igmp_init+0xb4>
 8012a64:	84e3      	strh	r3, [r4, #38]	; 0x26
 8012a66:	f8c4 9014 	str.w	r9, [r4, #20]
 8012a6a:	4b17      	ldr	r3, [pc, #92]	; (8012ac8 <igmp_init+0xb8>)
 8012a6c:	f8c4 800c 	str.w	r8, [r4, #12]
 8012a70:	8227      	strh	r7, [r4, #16]
 8012a72:	84a6      	strh	r6, [r4, #36]	; 0x24
 8012a74:	4c15      	ldr	r4, [pc, #84]	; (8012acc <igmp_init+0xbc>)
 8012a76:	2206      	movs	r2, #6
 8012a78:	6023      	str	r3, [r4, #0]
 8012a7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012a7e:	18a0      	adds	r0, r4, r2
 8012a80:	80a3      	strh	r3, [r4, #4]
 8012a82:	4629      	mov	r1, r5
 8012a84:	f7ff ff64 	bl	8012950 <memcpy.isra.0>
 8012a88:	23e0      	movs	r3, #224	; 0xe0
 8012a8a:	83e3      	strh	r3, [r4, #30]
 8012a8c:	f44f 13b8 	mov.w	r3, #1507328	; 0x170000
 8012a90:	4a0f      	ldr	r2, [pc, #60]	; (8012ad0 <igmp_init+0xc0>)
 8012a92:	f8c4 9014 	str.w	r9, [r4, #20]
 8012a96:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8012a9a:	f8c4 800c 	str.w	r8, [r4, #12]
 8012a9e:	8227      	strh	r7, [r4, #16]
 8012aa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012aa4:	f803 1b01 	strb.w	r1, [r3], #1
 8012aa8:	e7bb      	b.n	8012a22 <igmp_init+0x12>
 8012aaa:	bf00      	nop
 8012aac:	2000a73c 	andcs	sl, r0, ip, lsr r7
 8012ab0:	2000a860 	andcs	sl, r0, r0, ror #16
 8012ab4:	2000a89c 	mulcs	r0, ip, r8
 8012ab8:	2000a85c 	andcs	sl, r0, ip, asr r8
 8012abc:	2000a894 	mulcs	r0, r4, r8
 8012ac0:	02010040 	andeq	r0, r1, #64	; 0x40
 8012ac4:	00460008 	subeq	r0, r6, r8
 8012ac8:	005e0001 	subseq	r0, lr, r1
 8012acc:	2000a864 	andcs	sl, r0, r4, ror #16
 8012ad0:	04940200 	ldreq	r0, [r4], #512	; 0x200

08012ad4 <igmp_handle>:
 8012ad4:	7b83      	ldrb	r3, [r0, #14]
 8012ad6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012ada:	2b45      	cmp	r3, #69	; 0x45
 8012adc:	d116      	bne.n	8012b0c <igmp_handle+0x38>
 8012ade:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8012ae2:	2b11      	cmp	r3, #17
 8012ae4:	d112      	bne.n	8012b0c <igmp_handle+0x38>
 8012ae6:	4b20      	ldr	r3, [pc, #128]	; (8012b68 <igmp_handle+0x94>)
 8012ae8:	f100 051e 	add.w	r5, r0, #30
 8012aec:	9300      	str	r3, [sp, #0]
 8012aee:	466a      	mov	r2, sp
 8012af0:	462b      	mov	r3, r5
 8012af2:	f100 0622 	add.w	r6, r0, #34	; 0x22
 8012af6:	42b3      	cmp	r3, r6
 8012af8:	d10b      	bne.n	8012b12 <igmp_handle+0x3e>
 8012afa:	2401      	movs	r4, #1
 8012afc:	2100      	movs	r1, #0
 8012afe:	f04f 0c01 	mov.w	ip, #1
 8012b02:	4b1a      	ldr	r3, [pc, #104]	; (8012b6c <igmp_handle+0x98>)
 8012b04:	4a1a      	ldr	r2, [pc, #104]	; (8012b70 <igmp_handle+0x9c>)
 8012b06:	681f      	ldr	r7, [r3, #0]
 8012b08:	428f      	cmp	r7, r1
 8012b0a:	d10a      	bne.n	8012b22 <igmp_handle+0x4e>
 8012b0c:	b003      	add	sp, #12
 8012b0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b12:	f813 4b01 	ldrb.w	r4, [r3], #1
 8012b16:	f812 1b01 	ldrb.w	r1, [r2], #1
 8012b1a:	428c      	cmp	r4, r1
 8012b1c:	d0eb      	beq.n	8012af6 <igmp_handle+0x22>
 8012b1e:	2400      	movs	r4, #0
 8012b20:	e7ec      	b.n	8012afc <igmp_handle+0x28>
 8012b22:	6813      	ldr	r3, [r2, #0]
 8012b24:	9301      	str	r3, [sp, #4]
 8012b26:	b924      	cbnz	r4, 8012b32 <igmp_handle+0x5e>
 8012b28:	462b      	mov	r3, r5
 8012b2a:	f10d 0e04 	add.w	lr, sp, #4
 8012b2e:	42b3      	cmp	r3, r6
 8012b30:	d10e      	bne.n	8012b50 <igmp_handle+0x7c>
 8012b32:	f892 e005 	ldrb.w	lr, [r2, #5]
 8012b36:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8012b3a:	f1be 0f01 	cmp.w	lr, #1
 8012b3e:	d110      	bne.n	8012b62 <igmp_handle+0x8e>
 8012b40:	f892 e004 	ldrb.w	lr, [r2, #4]
 8012b44:	459e      	cmp	lr, r3
 8012b46:	d909      	bls.n	8012b5c <igmp_handle+0x88>
 8012b48:	085b      	lsrs	r3, r3, #1
 8012b4a:	3301      	adds	r3, #1
 8012b4c:	7113      	strb	r3, [r2, #4]
 8012b4e:	e005      	b.n	8012b5c <igmp_handle+0x88>
 8012b50:	f813 9b01 	ldrb.w	r9, [r3], #1
 8012b54:	f81e 8b01 	ldrb.w	r8, [lr], #1
 8012b58:	45c1      	cmp	r9, r8
 8012b5a:	d0e8      	beq.n	8012b2e <igmp_handle+0x5a>
 8012b5c:	3101      	adds	r1, #1
 8012b5e:	3208      	adds	r2, #8
 8012b60:	e7d2      	b.n	8012b08 <igmp_handle+0x34>
 8012b62:	f882 c005 	strb.w	ip, [r2, #5]
 8012b66:	e7ef      	b.n	8012b48 <igmp_handle+0x74>
 8012b68:	010000e0 	smlatteq	r0, r0, r0, r0
 8012b6c:	2000a860 	andcs	sl, r0, r0, ror #16
 8012b70:	2000a73c 	andcs	sl, r0, ip, lsr r7

08012b74 <igmp_timer>:
 8012b74:	b570      	push	{r4, r5, r6, lr}
 8012b76:	2500      	movs	r5, #0
 8012b78:	2602      	movs	r6, #2
 8012b7a:	4c0a      	ldr	r4, [pc, #40]	; (8012ba4 <igmp_timer+0x30>)
 8012b7c:	7963      	ldrb	r3, [r4, #5]
 8012b7e:	2b01      	cmp	r3, #1
 8012b80:	d109      	bne.n	8012b96 <igmp_timer+0x22>
 8012b82:	7923      	ldrb	r3, [r4, #4]
 8012b84:	b13b      	cbz	r3, 8012b96 <igmp_timer+0x22>
 8012b86:	3b01      	subs	r3, #1
 8012b88:	b2db      	uxtb	r3, r3
 8012b8a:	7123      	strb	r3, [r4, #4]
 8012b8c:	b91b      	cbnz	r3, 8012b96 <igmp_timer+0x22>
 8012b8e:	6820      	ldr	r0, [r4, #0]
 8012b90:	f7ff fee8 	bl	8012964 <_send_report>
 8012b94:	7166      	strb	r6, [r4, #5]
 8012b96:	3501      	adds	r5, #1
 8012b98:	2d24      	cmp	r5, #36	; 0x24
 8012b9a:	f104 0408 	add.w	r4, r4, #8
 8012b9e:	d1ed      	bne.n	8012b7c <igmp_timer+0x8>
 8012ba0:	bd70      	pop	{r4, r5, r6, pc}
 8012ba2:	bf00      	nop
 8012ba4:	2000a73c 	andcs	sl, r0, ip, lsr r7

08012ba8 <igmp_join>:
 8012ba8:	b538      	push	{r3, r4, r5, lr}
 8012baa:	f000 03e0 	and.w	r3, r0, #224	; 0xe0
 8012bae:	2be0      	cmp	r3, #224	; 0xe0
 8012bb0:	d11b      	bne.n	8012bea <igmp_join+0x42>
 8012bb2:	4911      	ldr	r1, [pc, #68]	; (8012bf8 <igmp_join+0x50>)
 8012bb4:	680c      	ldr	r4, [r1, #0]
 8012bb6:	2c24      	cmp	r4, #36	; 0x24
 8012bb8:	d01a      	beq.n	8012bf0 <igmp_join+0x48>
 8012bba:	2300      	movs	r3, #0
 8012bbc:	4a0f      	ldr	r2, [pc, #60]	; (8012bfc <igmp_join+0x54>)
 8012bbe:	429c      	cmp	r4, r3
 8012bc0:	dc0d      	bgt.n	8012bde <igmp_join+0x36>
 8012bc2:	f44f 7381 	mov.w	r3, #258	; 0x102
 8012bc6:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
 8012bca:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8012bce:	8093      	strh	r3, [r2, #4]
 8012bd0:	1c63      	adds	r3, r4, #1
 8012bd2:	600b      	str	r3, [r1, #0]
 8012bd4:	f7ff fec6 	bl	8012964 <_send_report>
 8012bd8:	4623      	mov	r3, r4
 8012bda:	4618      	mov	r0, r3
 8012bdc:	bd38      	pop	{r3, r4, r5, pc}
 8012bde:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8012be2:	4285      	cmp	r5, r0
 8012be4:	d0f9      	beq.n	8012bda <igmp_join+0x32>
 8012be6:	3301      	adds	r3, #1
 8012be8:	e7e9      	b.n	8012bbe <igmp_join+0x16>
 8012bea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012bee:	e7f4      	b.n	8012bda <igmp_join+0x32>
 8012bf0:	f06f 0301 	mvn.w	r3, #1
 8012bf4:	e7f1      	b.n	8012bda <igmp_join+0x32>
 8012bf6:	bf00      	nop
 8012bf8:	2000a860 	andcs	sl, r0, r0, ror #16
 8012bfc:	2000a73c 	andcs	sl, r0, ip, lsr r7

08012c00 <igmp_leave>:
 8012c00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012c04:	2600      	movs	r6, #0
 8012c06:	4f1c      	ldr	r7, [pc, #112]	; (8012c78 <igmp_leave+0x78>)
 8012c08:	f857 3036 	ldr.w	r3, [r7, r6, lsl #3]
 8012c0c:	4283      	cmp	r3, r0
 8012c0e:	d007      	beq.n	8012c20 <igmp_leave+0x20>
 8012c10:	3601      	adds	r6, #1
 8012c12:	2e24      	cmp	r6, #36	; 0x24
 8012c14:	d1f8      	bne.n	8012c08 <igmp_leave+0x8>
 8012c16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012c1a:	b002      	add	sp, #8
 8012c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c20:	2400      	movs	r4, #0
 8012c22:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8012c7c <igmp_leave+0x7c>
 8012c26:	4d16      	ldr	r5, [pc, #88]	; (8012c80 <igmp_leave+0x80>)
 8012c28:	f8b8 3000 	ldrh.w	r3, [r8]
 8012c2c:	2118      	movs	r1, #24
 8012c2e:	9001      	str	r0, [sp, #4]
 8012c30:	4814      	ldr	r0, [pc, #80]	; (8012c84 <igmp_leave+0x84>)
 8012c32:	826b      	strh	r3, [r5, #18]
 8012c34:	832c      	strh	r4, [r5, #24]
 8012c36:	f000 f86f 	bl	8012d18 <net_chksum>
 8012c3a:	2204      	movs	r2, #4
 8012c3c:	8328      	strh	r0, [r5, #24]
 8012c3e:	eb0d 0102 	add.w	r1, sp, r2
 8012c42:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 8012c46:	f7ff fe83 	bl	8012950 <memcpy.isra.0>
 8012c4a:	2120      	movs	r1, #32
 8012c4c:	f105 000e 	add.w	r0, r5, #14
 8012c50:	852c      	strh	r4, [r5, #40]	; 0x28
 8012c52:	f000 f861 	bl	8012d18 <net_chksum>
 8012c56:	212e      	movs	r1, #46	; 0x2e
 8012c58:	8528      	strh	r0, [r5, #40]	; 0x28
 8012c5a:	4628      	mov	r0, r5
 8012c5c:	f002 fc10 	bl	8015480 <emac_eth_send>
 8012c60:	f8b8 3000 	ldrh.w	r3, [r8]
 8012c64:	f847 4036 	str.w	r4, [r7, r6, lsl #3]
 8012c68:	3301      	adds	r3, #1
 8012c6a:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
 8012c6e:	4620      	mov	r0, r4
 8012c70:	f8a8 3000 	strh.w	r3, [r8]
 8012c74:	80b4      	strh	r4, [r6, #4]
 8012c76:	e7d0      	b.n	8012c1a <igmp_leave+0x1a>
 8012c78:	2000a73c 	andcs	sl, r0, ip, lsr r7
 8012c7c:	2000a85c 	andcs	sl, r0, ip, asr r8
 8012c80:	2000a864 	andcs	sl, r0, r4, ror #16
 8012c84:	2000a8aa 	andcs	sl, r0, sl, lsr #17

08012c88 <igmp_shutdown>:
 8012c88:	b570      	push	{r4, r5, r6, lr}
 8012c8a:	2500      	movs	r5, #0
 8012c8c:	462e      	mov	r6, r5
 8012c8e:	4c07      	ldr	r4, [pc, #28]	; (8012cac <igmp_shutdown+0x24>)
 8012c90:	6820      	ldr	r0, [r4, #0]
 8012c92:	b120      	cbz	r0, 8012c9e <igmp_shutdown+0x16>
 8012c94:	f7ff ffb4 	bl	8012c00 <igmp_leave>
 8012c98:	6026      	str	r6, [r4, #0]
 8012c9a:	7166      	strb	r6, [r4, #5]
 8012c9c:	7126      	strb	r6, [r4, #4]
 8012c9e:	3501      	adds	r5, #1
 8012ca0:	2d24      	cmp	r5, #36	; 0x24
 8012ca2:	f104 0408 	add.w	r4, r4, #8
 8012ca6:	d1f3      	bne.n	8012c90 <igmp_shutdown+0x8>
 8012ca8:	bd70      	pop	{r4, r5, r6, pc}
 8012caa:	bf00      	nop
 8012cac:	2000a73c 	andcs	sl, r0, ip, lsr r7

08012cb0 <ip_set_ip>:
 8012cb0:	b510      	push	{r4, lr}
 8012cb2:	4604      	mov	r4, r0
 8012cb4:	f7fe f858 	bl	8010d68 <udp_set_ip>
 8012cb8:	4620      	mov	r0, r4
 8012cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012cbe:	f7ff be91 	b.w	80129e4 <igmp_set_ip>

08012cc2 <ip_init>:
 8012cc2:	b538      	push	{r3, r4, r5, lr}
 8012cc4:	4604      	mov	r4, r0
 8012cc6:	460d      	mov	r5, r1
 8012cc8:	f7fe f86e 	bl	8010da8 <udp_init>
 8012ccc:	4629      	mov	r1, r5
 8012cce:	4620      	mov	r0, r4
 8012cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012cd4:	f7ff be9c 	b.w	8012a10 <igmp_init>

08012cd8 <ip_shutdown>:
 8012cd8:	b508      	push	{r3, lr}
 8012cda:	f7ff ffd5 	bl	8012c88 <igmp_shutdown>
 8012cde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012ce2:	f7fe b893 	b.w	8010e0c <udp_shutdown>

08012ce6 <ip_handle>:
 8012ce6:	7b82      	ldrb	r2, [r0, #14]
 8012ce8:	7dc3      	ldrb	r3, [r0, #23]
 8012cea:	2a45      	cmp	r2, #69	; 0x45
 8012cec:	d003      	beq.n	8012cf6 <ip_handle+0x10>
 8012cee:	2b02      	cmp	r3, #2
 8012cf0:	d111      	bne.n	8012d16 <ip_handle+0x30>
 8012cf2:	f7ff beef 	b.w	8012ad4 <igmp_handle>
 8012cf6:	2b06      	cmp	r3, #6
 8012cf8:	d00b      	beq.n	8012d12 <ip_handle+0x2c>
 8012cfa:	d804      	bhi.n	8012d06 <ip_handle+0x20>
 8012cfc:	2b01      	cmp	r3, #1
 8012cfe:	d006      	beq.n	8012d0e <ip_handle+0x28>
 8012d00:	2b02      	cmp	r3, #2
 8012d02:	d0f6      	beq.n	8012cf2 <ip_handle+0xc>
 8012d04:	4770      	bx	lr
 8012d06:	2b11      	cmp	r3, #17
 8012d08:	d105      	bne.n	8012d16 <ip_handle+0x30>
 8012d0a:	f7fe b881 	b.w	8010e10 <udp_handle>
 8012d0e:	f000 b82b 	b.w	8012d68 <icmp_handle>
 8012d12:	f7fd bdcd 	b.w	80108b0 <tcp_handle>
 8012d16:	4770      	bx	lr

08012d18 <net_chksum>:
 8012d18:	2300      	movs	r3, #0
 8012d1a:	f021 0201 	bic.w	r2, r1, #1
 8012d1e:	b530      	push	{r4, r5, lr}
 8012d20:	4402      	add	r2, r0
 8012d22:	084c      	lsrs	r4, r1, #1
 8012d24:	4290      	cmp	r0, r2
 8012d26:	d10e      	bne.n	8012d46 <net_chksum+0x2e>
 8012d28:	f06f 0201 	mvn.w	r2, #1
 8012d2c:	fb02 1104 	mla	r1, r2, r4, r1
 8012d30:	b121      	cbz	r1, 8012d3c <net_chksum+0x24>
 8012d32:	7802      	ldrb	r2, [r0, #0]
 8012d34:	0212      	lsls	r2, r2, #8
 8012d36:	ba52      	rev16	r2, r2
 8012d38:	b292      	uxth	r2, r2
 8012d3a:	4413      	add	r3, r2
 8012d3c:	0c1a      	lsrs	r2, r3, #16
 8012d3e:	d106      	bne.n	8012d4e <net_chksum+0x36>
 8012d40:	43d8      	mvns	r0, r3
 8012d42:	b280      	uxth	r0, r0
 8012d44:	bd30      	pop	{r4, r5, pc}
 8012d46:	f830 5b02 	ldrh.w	r5, [r0], #2
 8012d4a:	442b      	add	r3, r5
 8012d4c:	e7ea      	b.n	8012d24 <net_chksum+0xc>
 8012d4e:	b29b      	uxth	r3, r3
 8012d50:	e7f3      	b.n	8012d3a <net_chksum+0x22>

08012d52 <memcpy.isra.0>:
 8012d52:	3801      	subs	r0, #1
 8012d54:	440a      	add	r2, r1
 8012d56:	4291      	cmp	r1, r2
 8012d58:	d100      	bne.n	8012d5c <memcpy.isra.0+0xa>
 8012d5a:	4770      	bx	lr
 8012d5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012d60:	f800 3f01 	strb.w	r3, [r0, #1]!
 8012d64:	e7f7      	b.n	8012d56 <memcpy.isra.0+0x4>
	...

08012d68 <icmp_handle>:
 8012d68:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012d6a:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8012d6e:	4604      	mov	r4, r0
 8012d70:	2b08      	cmp	r3, #8
 8012d72:	d13e      	bne.n	8012df2 <icmp_handle+0x8a>
 8012d74:	f890 5023 	ldrb.w	r5, [r0, #35]	; 0x23
 8012d78:	2d00      	cmp	r5, #0
 8012d7a:	d13a      	bne.n	8012df2 <icmp_handle+0x8a>
 8012d7c:	1d86      	adds	r6, r0, #6
 8012d7e:	4631      	mov	r1, r6
 8012d80:	2206      	movs	r2, #6
 8012d82:	f7ff ffe6 	bl	8012d52 <memcpy.isra.0>
 8012d86:	4630      	mov	r0, r6
 8012d88:	2206      	movs	r2, #6
 8012d8a:	491b      	ldr	r1, [pc, #108]	; (8012df8 <icmp_handle+0x90>)
 8012d8c:	f7ff ffe1 	bl	8012d52 <memcpy.isra.0>
 8012d90:	8a63      	ldrh	r3, [r4, #18]
 8012d92:	f104 061a 	add.w	r6, r4, #26
 8012d96:	43db      	mvns	r3, r3
 8012d98:	4631      	mov	r1, r6
 8012d9a:	2204      	movs	r2, #4
 8012d9c:	8263      	strh	r3, [r4, #18]
 8012d9e:	f104 001e 	add.w	r0, r4, #30
 8012da2:	f7ff ffd6 	bl	8012d52 <memcpy.isra.0>
 8012da6:	2204      	movs	r2, #4
 8012da8:	4b14      	ldr	r3, [pc, #80]	; (8012dfc <icmp_handle+0x94>)
 8012daa:	eb0d 0102 	add.w	r1, sp, r2
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	4630      	mov	r0, r6
 8012db2:	f104 060e 	add.w	r6, r4, #14
 8012db6:	9301      	str	r3, [sp, #4]
 8012db8:	f7ff ffcb 	bl	8012d52 <memcpy.isra.0>
 8012dbc:	2114      	movs	r1, #20
 8012dbe:	4630      	mov	r0, r6
 8012dc0:	7625      	strb	r5, [r4, #24]
 8012dc2:	7665      	strb	r5, [r4, #25]
 8012dc4:	f7ff ffa8 	bl	8012d18 <net_chksum>
 8012dc8:	8a21      	ldrh	r1, [r4, #16]
 8012dca:	8320      	strh	r0, [r4, #24]
 8012dcc:	ba49      	rev16	r1, r1
 8012dce:	b289      	uxth	r1, r1
 8012dd0:	4630      	mov	r0, r6
 8012dd2:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8012dd6:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 8012dda:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 8012dde:	f7ff ff9b 	bl	8012d18 <net_chksum>
 8012de2:	8a21      	ldrh	r1, [r4, #16]
 8012de4:	84a0      	strh	r0, [r4, #36]	; 0x24
 8012de6:	ba49      	rev16	r1, r1
 8012de8:	b289      	uxth	r1, r1
 8012dea:	4620      	mov	r0, r4
 8012dec:	310e      	adds	r1, #14
 8012dee:	f002 fb47 	bl	8015480 <emac_eth_send>
 8012df2:	b002      	add	sp, #8
 8012df4:	bd70      	pop	{r4, r5, r6, pc}
 8012df6:	bf00      	nop
 8012df8:	200029e0 	andcs	r2, r0, r0, ror #19
 8012dfc:	200029d4 	ldrdcs	r2, [r0], -r4

08012e00 <Display::Write(unsigned char, char const*) [clone .isra.0]>:
 8012e00:	b430      	push	{r4, r5}
 8012e02:	b168      	cbz	r0, 8012e20 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x20>
 8012e04:	2300      	movs	r3, #0
 8012e06:	7905      	ldrb	r5, [r0, #4]
 8012e08:	5cd4      	ldrb	r4, [r2, r3]
 8012e0a:	b11c      	cbz	r4, 8012e14 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x14>
 8012e0c:	1c5c      	adds	r4, r3, #1
 8012e0e:	429d      	cmp	r5, r3
 8012e10:	4623      	mov	r3, r4
 8012e12:	dcf9      	bgt.n	8012e08 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x8>
 8012e14:	6804      	ldr	r4, [r0, #0]
 8012e16:	b2db      	uxtb	r3, r3
 8012e18:	69e4      	ldr	r4, [r4, #28]
 8012e1a:	46a4      	mov	ip, r4
 8012e1c:	bc30      	pop	{r4, r5}
 8012e1e:	4760      	bx	ip
 8012e20:	bc30      	pop	{r4, r5}
 8012e22:	4770      	bx	lr

08012e24 <Display::ClearLine(unsigned char) [clone .isra.0]>:
 8012e24:	b110      	cbz	r0, 8012e2c <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 8012e26:	6803      	ldr	r3, [r0, #0]
 8012e28:	691b      	ldr	r3, [r3, #16]
 8012e2a:	4718      	bx	r3
 8012e2c:	4770      	bx	lr

08012e2e <Display::Status(Display7SegmentMessage)>:
 8012e2e:	7c43      	ldrb	r3, [r0, #17]
 8012e30:	b513      	push	{r0, r1, r4, lr}
 8012e32:	4604      	mov	r4, r0
 8012e34:	b19b      	cbz	r3, 8012e5e <Display::Status(Display7SegmentMessage)+0x30>
 8012e36:	43c9      	mvns	r1, r1
 8012e38:	2312      	movs	r3, #18
 8012e3a:	7a00      	ldrb	r0, [r0, #8]
 8012e3c:	f88d 3004 	strb.w	r3, [sp, #4]
 8012e40:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8012e44:	f88d 1006 	strb.w	r1, [sp, #6]
 8012e48:	f88d 3005 	strb.w	r3, [sp, #5]
 8012e4c:	f002 fbb0 	bl	80155b0 <gd32_i2c_set_address(unsigned char)>
 8012e50:	68e0      	ldr	r0, [r4, #12]
 8012e52:	f002 fba5 	bl	80155a0 <gd32_i2c_set_baudrate(unsigned int)>
 8012e56:	2103      	movs	r1, #3
 8012e58:	a801      	add	r0, sp, #4
 8012e5a:	f002 fbaf 	bl	80155bc <gd32_i2c_write(char const*, unsigned int)>
 8012e5e:	b002      	add	sp, #8
 8012e60:	bd10      	pop	{r4, pc}
	...

08012e64 <DisplayUdf::DisplayUdf()>:
 8012e64:	b510      	push	{r4, lr}
 8012e66:	4604      	mov	r4, r0
 8012e68:	f000 ffea 	bl	8013e40 <Display::Display()>
 8012e6c:	2202      	movs	r2, #2
 8012e6e:	2300      	movs	r3, #0
 8012e70:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
 8012e74:	4b05      	ldr	r3, [pc, #20]	; (8012e8c <DisplayUdf::DisplayUdf()+0x28>)
 8012e76:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8012e7a:	601c      	str	r4, [r3, #0]
 8012e7c:	2301      	movs	r3, #1
 8012e7e:	f802 3b01 	strb.w	r3, [r2], #1
 8012e82:	3301      	adds	r3, #1
 8012e84:	2b15      	cmp	r3, #21
 8012e86:	d1fa      	bne.n	8012e7e <DisplayUdf::DisplayUdf()+0x1a>
 8012e88:	4620      	mov	r0, r4
 8012e8a:	bd10      	pop	{r4, pc}
 8012e8c:	2000a8cc 	andcs	sl, r0, ip, asr #17

08012e90 <DisplayUdf::SetTitle(char const*, ...)>:
 8012e90:	b40e      	push	{r1, r2, r3}
 8012e92:	b517      	push	{r0, r1, r2, r4, lr}
 8012e94:	ab05      	add	r3, sp, #20
 8012e96:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e9a:	4604      	mov	r4, r0
 8012e9c:	211f      	movs	r1, #31
 8012e9e:	301c      	adds	r0, #28
 8012ea0:	9301      	str	r3, [sp, #4]
 8012ea2:	f7f5 ff4b 	bl	8008d3c <vsnprintf>
 8012ea6:	2300      	movs	r3, #0
 8012ea8:	4404      	add	r4, r0
 8012eaa:	7723      	strb	r3, [r4, #28]
 8012eac:	b003      	add	sp, #12
 8012eae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012eb2:	b003      	add	sp, #12
 8012eb4:	4770      	bx	lr
	...

08012eb8 <DisplayUdf::ShowEmacStart()>:
 8012eb8:	b510      	push	{r4, lr}
 8012eba:	4604      	mov	r4, r0
 8012ebc:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 8012ec0:	6980      	ldr	r0, [r0, #24]
 8012ec2:	f7ff ffaf 	bl	8012e24 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8012ec6:	4620      	mov	r0, r4
 8012ec8:	4a02      	ldr	r2, [pc, #8]	; (8012ed4 <DisplayUdf::ShowEmacStart()+0x1c>)
 8012eca:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8012ece:	f7f5 f8bd 	bl	800804c <Display::Printf(unsigned char, char const*, ...)>
 8012ed2:	bd10      	pop	{r4, pc}
 8012ed4:	080183af 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, r8, r9, pc}

08012ed8 <DisplayUdf::ShowIpAddress()>:
 8012ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012edc:	4604      	mov	r4, r0
 8012ede:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 8012ee2:	b086      	sub	sp, #24
 8012ee4:	6980      	ldr	r0, [r0, #24]
 8012ee6:	f7ff ff9d 	bl	8012e24 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8012eea:	4b13      	ldr	r3, [pc, #76]	; (8012f38 <DisplayUdf::ShowIpAddress()+0x60>)
 8012eec:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
 8012ef0:	681d      	ldr	r5, [r3, #0]
 8012ef2:	69a8      	ldr	r0, [r5, #24]
 8012ef4:	692e      	ldr	r6, [r5, #16]
 8012ef6:	f7f4 ffb5 	bl	8007e64 <__popcountsi2>
 8012efa:	78eb      	ldrb	r3, [r5, #3]
 8012efc:	fa5f f886 	uxtb.w	r8, r6
 8012f00:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8012f04:	f3c6 4a07 	ubfx	sl, r6, #16, #8
 8012f08:	0e36      	lsrs	r6, r6, #24
 8012f0a:	b99b      	cbnz	r3, 8012f34 <DisplayUdf::ShowIpAddress()+0x5c>
 8012f0c:	786b      	ldrb	r3, [r5, #1]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	bf14      	ite	ne
 8012f12:	2244      	movne	r2, #68	; 0x44
 8012f14:	2253      	moveq	r2, #83	; 0x53
 8012f16:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8012f1a:	4643      	mov	r3, r8
 8012f1c:	4639      	mov	r1, r7
 8012f1e:	4620      	mov	r0, r4
 8012f20:	e9cd a601 	strd	sl, r6, [sp, #4]
 8012f24:	4a05      	ldr	r2, [pc, #20]	; (8012f3c <DisplayUdf::ShowIpAddress()+0x64>)
 8012f26:	f8cd 9000 	str.w	r9, [sp]
 8012f2a:	f7f5 f88f 	bl	800804c <Display::Printf(unsigned char, char const*, ...)>
 8012f2e:	b006      	add	sp, #24
 8012f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f34:	225a      	movs	r2, #90	; 0x5a
 8012f36:	e7ee      	b.n	8012f16 <DisplayUdf::ShowIpAddress()+0x3e>
 8012f38:	2000a29c 	mulcs	r0, ip, r2
 8012f3c:	080183be 	stmdaeq	r1, {r1, r2, r3, r4, r5, r7, r8, r9, pc}

08012f40 <DisplayUdf::ShowNetmask()>:
 8012f40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012f42:	4604      	mov	r4, r0
 8012f44:	4b0b      	ldr	r3, [pc, #44]	; (8012f74 <DisplayUdf::ShowNetmask()+0x34>)
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	699b      	ldr	r3, [r3, #24]
 8012f4a:	0e1a      	lsrs	r2, r3, #24
 8012f4c:	9202      	str	r2, [sp, #8]
 8012f4e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8012f52:	9201      	str	r2, [sp, #4]
 8012f54:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012f58:	9200      	str	r2, [sp, #0]
 8012f5a:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 8012f5e:	4a06      	ldr	r2, [pc, #24]	; (8012f78 <DisplayUdf::ShowNetmask()+0x38>)
 8012f60:	b2db      	uxtb	r3, r3
 8012f62:	f7f5 f873 	bl	800804c <Display::Printf(unsigned char, char const*, ...)>
 8012f66:	4620      	mov	r0, r4
 8012f68:	b004      	add	sp, #16
 8012f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f6e:	f7ff bfb3 	b.w	8012ed8 <DisplayUdf::ShowIpAddress()>
 8012f72:	bf00      	nop
 8012f74:	2000a29c 	mulcs	r0, ip, r2
 8012f78:	080183d0 	stmdaeq	r1, {r4, r6, r7, r8, r9, pc}

08012f7c <DisplayUdf::ShowGatewayIp()>:
 8012f7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012f7e:	4604      	mov	r4, r0
 8012f80:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 8012f84:	6980      	ldr	r0, [r0, #24]
 8012f86:	f7ff ff4d 	bl	8012e24 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8012f8a:	4b0a      	ldr	r3, [pc, #40]	; (8012fb4 <DisplayUdf::ShowGatewayIp()+0x38>)
 8012f8c:	4620      	mov	r0, r4
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	f894 104e 	ldrb.w	r1, [r4, #78]	; 0x4e
 8012f94:	695b      	ldr	r3, [r3, #20]
 8012f96:	0e1a      	lsrs	r2, r3, #24
 8012f98:	9202      	str	r2, [sp, #8]
 8012f9a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8012f9e:	9201      	str	r2, [sp, #4]
 8012fa0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012fa4:	9200      	str	r2, [sp, #0]
 8012fa6:	b2db      	uxtb	r3, r3
 8012fa8:	4a03      	ldr	r2, [pc, #12]	; (8012fb8 <DisplayUdf::ShowGatewayIp()+0x3c>)
 8012faa:	f7f5 f84f 	bl	800804c <Display::Printf(unsigned char, char const*, ...)>
 8012fae:	b004      	add	sp, #16
 8012fb0:	bd10      	pop	{r4, pc}
 8012fb2:	bf00      	nop
 8012fb4:	2000a29c 	mulcs	r0, ip, r2
 8012fb8:	080183df 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, r8, r9, pc}

08012fbc <DisplayUdf::ShowHostName()>:
 8012fbc:	b510      	push	{r4, lr}
 8012fbe:	4604      	mov	r4, r0
 8012fc0:	f890 1043 	ldrb.w	r1, [r0, #67]	; 0x43
 8012fc4:	6980      	ldr	r0, [r0, #24]
 8012fc6:	f7ff ff2d 	bl	8012e24 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8012fca:	4b05      	ldr	r3, [pc, #20]	; (8012fe0 <DisplayUdf::ShowHostName()+0x24>)
 8012fcc:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 8012fd0:	681a      	ldr	r2, [r3, #0]
 8012fd2:	69a0      	ldr	r0, [r4, #24]
 8012fd4:	321c      	adds	r2, #28
 8012fd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012fda:	f7ff bf11 	b.w	8012e00 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8012fde:	bf00      	nop
 8012fe0:	2000a29c 	mulcs	r0, ip, r2

08012fe4 <DisplayUdf::Show()>:
 8012fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012fe6:	4604      	mov	r4, r0
 8012fe8:	21ff      	movs	r1, #255	; 0xff
 8012fea:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 8012fee:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8012ff2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012ff6:	2806      	cmp	r0, #6
 8012ff8:	bf88      	it	hi
 8012ffa:	f803 1c01 	strbhi.w	r1, [r3, #-1]
 8012ffe:	429a      	cmp	r2, r3
 8013000:	d1f7      	bne.n	8012ff2 <DisplayUdf::Show()+0xe>
 8013002:	2501      	movs	r5, #1
 8013004:	4629      	mov	r1, r5
 8013006:	3501      	adds	r5, #1
 8013008:	69a0      	ldr	r0, [r4, #24]
 801300a:	b2ed      	uxtb	r5, r5
 801300c:	f7ff ff0a 	bl	8012e24 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8013010:	2d06      	cmp	r5, #6
 8013012:	d1f7      	bne.n	8013004 <DisplayUdf::Show()+0x20>
 8013014:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8013018:	69a0      	ldr	r0, [r4, #24]
 801301a:	f104 021c 	add.w	r2, r4, #28
 801301e:	f7ff feef 	bl	8012e00 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8013022:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8013026:	69a0      	ldr	r0, [r4, #24]
 8013028:	4a0d      	ldr	r2, [pc, #52]	; (8013060 <DisplayUdf::Show()+0x7c>)
 801302a:	f7ff fee9 	bl	8012e00 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 801302e:	4b0d      	ldr	r3, [pc, #52]	; (8013064 <DisplayUdf::Show()+0x80>)
 8013030:	4a0d      	ldr	r2, [pc, #52]	; (8013068 <DisplayUdf::Show()+0x84>)
 8013032:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 8013036:	9300      	str	r3, [sp, #0]
 8013038:	4620      	mov	r0, r4
 801303a:	2303      	movs	r3, #3
 801303c:	f7f5 f806 	bl	800804c <Display::Printf(unsigned char, char const*, ...)>
 8013040:	4620      	mov	r0, r4
 8013042:	f7ff ff49 	bl	8012ed8 <DisplayUdf::ShowIpAddress()>
 8013046:	4620      	mov	r0, r4
 8013048:	f7ff ff98 	bl	8012f7c <DisplayUdf::ShowGatewayIp()>
 801304c:	4620      	mov	r0, r4
 801304e:	f7ff ff77 	bl	8012f40 <DisplayUdf::ShowNetmask()>
 8013052:	4620      	mov	r0, r4
 8013054:	b003      	add	sp, #12
 8013056:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801305a:	f7ff bfaf 	b.w	8012fbc <DisplayUdf::ShowHostName()>
 801305e:	bf00      	nop
 8013060:	080169a1 	stmdaeq	r1, {r0, r5, r7, r8, fp, sp, lr}
 8013064:	2000a964 	andcs	sl, r0, r4, ror #18
 8013068:	080183ee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, r8, r9, pc}

0801306c <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 801306c:	3901      	subs	r1, #1
 801306e:	b510      	push	{r4, lr}
 8013070:	4604      	mov	r4, r0
 8013072:	2903      	cmp	r1, #3
 8013074:	d814      	bhi.n	80130a0 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 8013076:	e8df f001 	tbb	[pc, r1]
 801307a:	281b1402 	ldmdacs	fp, {r1, sl, ip}
 801307e:	4b14      	ldr	r3, [pc, #80]	; (80130d0 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8013080:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 8013084:	6818      	ldr	r0, [r3, #0]
 8013086:	f7ff fed2 	bl	8012e2e <Display::Status(Display7SegmentMessage)>
 801308a:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 801308e:	69a0      	ldr	r0, [r4, #24]
 8013090:	f7ff fec8 	bl	8012e24 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8013094:	4a0f      	ldr	r2, [pc, #60]	; (80130d4 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x68>)
 8013096:	4620      	mov	r0, r4
 8013098:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 801309c:	f7f4 ffd6 	bl	800804c <Display::Printf(unsigned char, char const*, ...)>
 80130a0:	bd10      	pop	{r4, pc}
 80130a2:	f248 0180 	movw	r1, #32896	; 0x8080
 80130a6:	4b0a      	ldr	r3, [pc, #40]	; (80130d0 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 80130a8:	6818      	ldr	r0, [r3, #0]
 80130aa:	f7ff fec0 	bl	8012e2e <Display::Status(Display7SegmentMessage)>
 80130ae:	e7f7      	b.n	80130a0 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 80130b0:	4b07      	ldr	r3, [pc, #28]	; (80130d0 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 80130b2:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 80130b6:	6818      	ldr	r0, [r3, #0]
 80130b8:	f7ff feb9 	bl	8012e2e <Display::Status(Display7SegmentMessage)>
 80130bc:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 80130c0:	69a0      	ldr	r0, [r4, #24]
 80130c2:	f7ff feaf 	bl	8012e24 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80130c6:	4a04      	ldr	r2, [pc, #16]	; (80130d8 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x6c>)
 80130c8:	e7e5      	b.n	8013096 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x2a>
 80130ca:	f645 3179 	movw	r1, #23417	; 0x5b79
 80130ce:	e7ea      	b.n	80130a6 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x3a>
 80130d0:	2000a8d4 	ldrdcs	sl, [r0], -r4
 80130d4:	080183fd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 80130d8:	0801840b 	stmdaeq	r1, {r0, r1, r3, sl, pc}

080130dc <DisplayUdf::ShowShutdown()>:
 80130dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130e0:	4604      	mov	r4, r0
 80130e2:	6980      	ldr	r0, [r0, #24]
 80130e4:	b308      	cbz	r0, 801312a <DisplayUdf::ShowShutdown()+0x4e>
 80130e6:	f890 8005 	ldrb.w	r8, [r0, #5]
 80130ea:	6803      	ldr	r3, [r0, #0]
 80130ec:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
 80130f0:	b2ed      	uxtb	r5, r5
 80130f2:	462a      	mov	r2, r5
 80130f4:	2100      	movs	r1, #0
 80130f6:	6a1b      	ldr	r3, [r3, #32]
 80130f8:	7907      	ldrb	r7, [r0, #4]
 80130fa:	2600      	movs	r6, #0
 80130fc:	4798      	blx	r3
 80130fe:	3f01      	subs	r7, #1
 8013100:	42b7      	cmp	r7, r6
 8013102:	69a0      	ldr	r0, [r4, #24]
 8013104:	d906      	bls.n	8013114 <DisplayUdf::ShowShutdown()+0x38>
 8013106:	b118      	cbz	r0, 8013110 <DisplayUdf::ShowShutdown()+0x34>
 8013108:	6803      	ldr	r3, [r0, #0]
 801310a:	2120      	movs	r1, #32
 801310c:	695b      	ldr	r3, [r3, #20]
 801310e:	4798      	blx	r3
 8013110:	3601      	adds	r6, #1
 8013112:	e7f5      	b.n	8013100 <DisplayUdf::ShowShutdown()+0x24>
 8013114:	b120      	cbz	r0, 8013120 <DisplayUdf::ShowShutdown()+0x44>
 8013116:	6803      	ldr	r3, [r0, #0]
 8013118:	462a      	mov	r2, r5
 801311a:	2100      	movs	r1, #0
 801311c:	6a1b      	ldr	r3, [r3, #32]
 801311e:	4798      	blx	r3
 8013120:	4641      	mov	r1, r8
 8013122:	4a05      	ldr	r2, [pc, #20]	; (8013138 <DisplayUdf::ShowShutdown()+0x5c>)
 8013124:	69a0      	ldr	r0, [r4, #24]
 8013126:	f7ff fe6b 	bl	8012e00 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 801312a:	f44f 41de 	mov.w	r1, #28416	; 0x6f00
 801312e:	4620      	mov	r0, r4
 8013130:	f7ff fe7d 	bl	8012e2e <Display::Status(Display7SegmentMessage)>
 8013134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013138:	08018419 	stmdaeq	r1, {r0, r3, r4, sl, pc}

0801313c <DisplayUdf::Set(unsigned char, displayudf::Labels)>:
 801313c:	1e4b      	subs	r3, r1, #1
 801313e:	2b05      	cmp	r3, #5
 8013140:	b530      	push	{r4, r5, lr}
 8013142:	d80f      	bhi.n	8013164 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x28>
 8013144:	2300      	movs	r3, #0
 8013146:	f100 043c 	add.w	r4, r0, #60	; 0x3c
 801314a:	f814 5b01 	ldrb.w	r5, [r4], #1
 801314e:	428d      	cmp	r5, r1
 8013150:	d109      	bne.n	8013166 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x2a>
 8013152:	1884      	adds	r4, r0, r2
 8013154:	f894 403c 	ldrb.w	r4, [r4, #60]	; 0x3c
 8013158:	4403      	add	r3, r0
 801315a:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
 801315e:	4410      	add	r0, r2
 8013160:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
 8013164:	bd30      	pop	{r4, r5, pc}
 8013166:	3301      	adds	r3, #1
 8013168:	2b14      	cmp	r3, #20
 801316a:	d1ee      	bne.n	801314a <DisplayUdf::Set(unsigned char, displayudf::Labels)+0xe>
 801316c:	e7f7      	b.n	801315e <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x22>
	...

08013170 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 8013170:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013172:	88c5      	ldrh	r5, [r0, #6]
 8013174:	8886      	ldrh	r6, [r0, #4]
 8013176:	42b5      	cmp	r5, r6
 8013178:	d216      	bcs.n	80131a8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 801317a:	4604      	mov	r4, r0
 801317c:	6800      	ldr	r0, [r0, #0]
 801317e:	4428      	add	r0, r5
 8013180:	1b75      	subs	r5, r6, r5
 8013182:	7a26      	ldrb	r6, [r4, #8]
 8013184:	b923      	cbnz	r3, 8013190 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 8013186:	b926      	cbnz	r6, 8013192 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 8013188:	9200      	str	r2, [sp, #0]
 801318a:	460b      	mov	r3, r1
 801318c:	4a09      	ldr	r2, [pc, #36]	; (80131b4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 801318e:	e003      	b.n	8013198 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8013190:	b166      	cbz	r6, 80131ac <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 8013192:	460b      	mov	r3, r1
 8013194:	9200      	str	r2, [sp, #0]
 8013196:	4a08      	ldr	r2, [pc, #32]	; (80131b8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 8013198:	4629      	mov	r1, r5
 801319a:	f7f5 fdb7 	bl	8008d0c <snprintf>
 801319e:	4285      	cmp	r5, r0
 80131a0:	bfa2      	ittt	ge
 80131a2:	88e3      	ldrhge	r3, [r4, #6]
 80131a4:	181b      	addge	r3, r3, r0
 80131a6:	80e3      	strhge	r3, [r4, #6]
 80131a8:	b002      	add	sp, #8
 80131aa:	bd70      	pop	{r4, r5, r6, pc}
 80131ac:	9200      	str	r2, [sp, #0]
 80131ae:	460b      	mov	r3, r1
 80131b0:	4a02      	ldr	r2, [pc, #8]	; (80131bc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 80131b2:	e7f1      	b.n	8013198 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 80131b4:	08016af9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, sp, lr}
 80131b8:	08016af0 	stmdaeq	r1, {r4, r5, r6, r7, r9, fp, sp, lr}
 80131bc:	08016afa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r9, fp, sp, lr}

080131c0 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>:
 80131c0:	b510      	push	{r4, lr}
 80131c2:	2220      	movs	r2, #32
 80131c4:	4604      	mov	r4, r0
 80131c6:	f840 1b04 	str.w	r1, [r0], #4
 80131ca:	2100      	movs	r1, #0
 80131cc:	f001 fad4 	bl	8014778 <memset>
 80131d0:	f647 7305 	movw	r3, #32517	; 0x7f05
 80131d4:	4620      	mov	r0, r4
 80131d6:	84a3      	strh	r3, [r4, #36]	; 0x24
 80131d8:	bd10      	pop	{r4, pc}

080131da <DisplayUdfParams::Load()>:
 80131da:	b508      	push	{r3, lr}
 80131dc:	2300      	movs	r3, #0
 80131de:	4601      	mov	r1, r0
 80131e0:	6043      	str	r3, [r0, #4]
 80131e2:	6800      	ldr	r0, [r0, #0]
 80131e4:	b120      	cbz	r0, 80131f0 <DisplayUdfParams::Load()+0x16>
 80131e6:	6803      	ldr	r3, [r0, #0]
 80131e8:	3104      	adds	r1, #4
 80131ea:	68db      	ldr	r3, [r3, #12]
 80131ec:	4798      	blx	r3
 80131ee:	2001      	movs	r0, #1
 80131f0:	bd08      	pop	{r3, pc}
	...

080131f4 <DisplayUdfParams::Load(char const*, unsigned int)>:
 80131f4:	6803      	ldr	r3, [r0, #0]
 80131f6:	b1d3      	cbz	r3, 801322e <DisplayUdfParams::Load(char const*, unsigned int)+0x3a>
 80131f8:	2300      	movs	r3, #0
 80131fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80131fc:	460d      	mov	r5, r1
 80131fe:	4616      	mov	r6, r2
 8013200:	4604      	mov	r4, r0
 8013202:	6043      	str	r3, [r0, #4]
 8013204:	4602      	mov	r2, r0
 8013206:	490a      	ldr	r1, [pc, #40]	; (8013230 <DisplayUdfParams::Load(char const*, unsigned int)+0x3c>)
 8013208:	4668      	mov	r0, sp
 801320a:	f000 fbff 	bl	8013a0c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 801320e:	4632      	mov	r2, r6
 8013210:	4629      	mov	r1, r5
 8013212:	4668      	mov	r0, sp
 8013214:	f000 fbfe 	bl	8013a14 <ReadConfigFile::Read(char const*, unsigned int)>
 8013218:	4621      	mov	r1, r4
 801321a:	f851 0b04 	ldr.w	r0, [r1], #4
 801321e:	6803      	ldr	r3, [r0, #0]
 8013220:	689b      	ldr	r3, [r3, #8]
 8013222:	4798      	blx	r3
 8013224:	4668      	mov	r0, sp
 8013226:	f000 fbf4 	bl	8013a12 <ReadConfigFile::~ReadConfigFile()>
 801322a:	b002      	add	sp, #8
 801322c:	bd70      	pop	{r4, r5, r6, pc}
 801322e:	4770      	bx	lr
 8013230:	080132f9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, ip, sp}

08013234 <DisplayUdfParams::callbackFunction(char const*)>:
 8013234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013236:	460e      	mov	r6, r1
 8013238:	4604      	mov	r4, r0
 801323a:	492b      	ldr	r1, [pc, #172]	; (80132e8 <DisplayUdfParams::callbackFunction(char const*)+0xb4>)
 801323c:	4630      	mov	r0, r6
 801323e:	f10d 0207 	add.w	r2, sp, #7
 8013242:	f000 fd49 	bl	8013cd8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8013246:	b968      	cbnz	r0, 8013264 <DisplayUdfParams::callbackFunction(char const*)+0x30>
 8013248:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801324c:	6863      	ldr	r3, [r4, #4]
 801324e:	2a7f      	cmp	r2, #127	; 0x7f
 8013250:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8013254:	bf14      	ite	ne
 8013256:	f043 5300 	orrne.w	r3, r3, #536870912	; 0x20000000
 801325a:	f023 5300 	biceq.w	r3, r3, #536870912	; 0x20000000
 801325e:	6063      	str	r3, [r4, #4]
 8013260:	b003      	add	sp, #12
 8013262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013264:	4630      	mov	r0, r6
 8013266:	4921      	ldr	r1, [pc, #132]	; (80132ec <DisplayUdfParams::callbackFunction(char const*)+0xb8>)
 8013268:	f10d 0207 	add.w	r2, sp, #7
 801326c:	f000 fd34 	bl	8013cd8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8013270:	b958      	cbnz	r0, 801328a <DisplayUdfParams::callbackFunction(char const*)+0x56>
 8013272:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013276:	6863      	ldr	r3, [r4, #4]
 8013278:	2a05      	cmp	r2, #5
 801327a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 801327e:	bf14      	ite	ne
 8013280:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8013284:	f023 5380 	biceq.w	r3, r3, #268435456	; 0x10000000
 8013288:	e7e9      	b.n	801325e <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 801328a:	4630      	mov	r0, r6
 801328c:	4918      	ldr	r1, [pc, #96]	; (80132f0 <DisplayUdfParams::callbackFunction(char const*)+0xbc>)
 801328e:	f10d 0207 	add.w	r2, sp, #7
 8013292:	f000 fd21 	bl	8013cd8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8013296:	b948      	cbnz	r0, 80132ac <DisplayUdfParams::callbackFunction(char const*)+0x78>
 8013298:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801329c:	6863      	ldr	r3, [r4, #4]
 801329e:	b112      	cbz	r2, 80132a6 <DisplayUdfParams::callbackFunction(char const*)+0x72>
 80132a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80132a4:	e7db      	b.n	801325e <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 80132a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80132aa:	e7d8      	b.n	801325e <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 80132ac:	2500      	movs	r5, #0
 80132ae:	4f11      	ldr	r7, [pc, #68]	; (80132f4 <DisplayUdfParams::callbackFunction(char const*)+0xc0>)
 80132b0:	4630      	mov	r0, r6
 80132b2:	f857 1b04 	ldr.w	r1, [r7], #4
 80132b6:	f10d 0207 	add.w	r2, sp, #7
 80132ba:	f000 fd0d 	bl	8013cd8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80132be:	b978      	cbnz	r0, 80132e0 <DisplayUdfParams::callbackFunction(char const*)+0xac>
 80132c0:	2301      	movs	r3, #1
 80132c2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80132c6:	6862      	ldr	r2, [r4, #4]
 80132c8:	1e4e      	subs	r6, r1, #1
 80132ca:	2e05      	cmp	r6, #5
 80132cc:	fa03 f305 	lsl.w	r3, r3, r5
 80132d0:	4425      	add	r5, r4
 80132d2:	bf99      	ittee	ls
 80132d4:	7229      	strbls	r1, [r5, #8]
 80132d6:	4313      	orrls	r3, r2
 80132d8:	7228      	strbhi	r0, [r5, #8]
 80132da:	ea22 0303 	bichi.w	r3, r2, r3
 80132de:	e7be      	b.n	801325e <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 80132e0:	3501      	adds	r5, #1
 80132e2:	2d14      	cmp	r5, #20
 80132e4:	d1e4      	bne.n	80132b0 <DisplayUdfParams::callbackFunction(char const*)+0x7c>
 80132e6:	e7bb      	b.n	8013260 <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 80132e8:	080184da 	stmdaeq	r1, {r1, r3, r4, r6, r7, sl, pc}
 80132ec:	080184a2 	stmdaeq	r1, {r1, r5, r7, sl, pc}
 80132f0:	080184b0 	stmdaeq	r1, {r4, r5, r7, sl, pc}
 80132f4:	0801842c 	stmdaeq	r1, {r2, r3, r5, sl, pc}

080132f8 <DisplayUdfParams::staticCallbackFunction(void*, char const*)>:
 80132f8:	f7ff bf9c 	b.w	8013234 <DisplayUdfParams::callbackFunction(char const*)>

080132fc <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>:
 80132fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013300:	4604      	mov	r4, r0
 8013302:	4615      	mov	r5, r2
 8013304:	461e      	mov	r6, r3
 8013306:	b086      	sub	sp, #24
 8013308:	3004      	adds	r0, #4
 801330a:	b379      	cbz	r1, 801336c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x70>
 801330c:	2222      	movs	r2, #34	; 0x22
 801330e:	f001 fa1c 	bl	801474a <memmove>
 8013312:	462a      	mov	r2, r5
 8013314:	4633      	mov	r3, r6
 8013316:	493d      	ldr	r1, [pc, #244]	; (801340c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x110>)
 8013318:	a803      	add	r0, sp, #12
 801331a:	f000 faa7 	bl	801386c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 801331e:	6863      	ldr	r3, [r4, #4]
 8013320:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8013324:	493a      	ldr	r1, [pc, #232]	; (8013410 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x114>)
 8013326:	f3c3 7340 	ubfx	r3, r3, #29, #1
 801332a:	a803      	add	r0, sp, #12
 801332c:	f7ff ff20 	bl	8013170 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8013330:	6863      	ldr	r3, [r4, #4]
 8013332:	4938      	ldr	r1, [pc, #224]	; (8013414 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x118>)
 8013334:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8013338:	f3c3 7300 	ubfx	r3, r3, #28, #1
 801333c:	a803      	add	r0, sp, #12
 801333e:	f7ff ff17 	bl	8013170 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8013342:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8013346:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 801334a:	42a9      	cmp	r1, r5
 801334c:	d227      	bcs.n	801339e <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xa2>
 801334e:	6863      	ldr	r3, [r4, #4]
 8013350:	9803      	ldr	r0, [sp, #12]
 8013352:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
 8013356:	f89d 2014 	ldrb.w	r2, [sp, #20]
 801335a:	4408      	add	r0, r1
 801335c:	eba5 0501 	sub.w	r5, r5, r1
 8013360:	d10b      	bne.n	801337a <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x7e>
 8013362:	b962      	cbnz	r2, 801337e <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x82>
 8013364:	9200      	str	r2, [sp, #0]
 8013366:	4b2c      	ldr	r3, [pc, #176]	; (8013418 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 8013368:	4a2c      	ldr	r2, [pc, #176]	; (801341c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x120>)
 801336a:	e00e      	b.n	801338a <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 801336c:	6823      	ldr	r3, [r4, #0]
 801336e:	4601      	mov	r1, r0
 8013370:	681a      	ldr	r2, [r3, #0]
 8013372:	4618      	mov	r0, r3
 8013374:	68d2      	ldr	r2, [r2, #12]
 8013376:	4790      	blx	r2
 8013378:	e7cb      	b.n	8013312 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x16>
 801337a:	2a00      	cmp	r2, #0
 801337c:	d041      	beq.n	8013402 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x106>
 801337e:	3b00      	subs	r3, #0
 8013380:	bf18      	it	ne
 8013382:	2301      	movne	r3, #1
 8013384:	4a26      	ldr	r2, [pc, #152]	; (8013420 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x124>)
 8013386:	9300      	str	r3, [sp, #0]
 8013388:	4b23      	ldr	r3, [pc, #140]	; (8013418 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 801338a:	4629      	mov	r1, r5
 801338c:	f7f5 fcbe 	bl	8008d0c <snprintf>
 8013390:	4285      	cmp	r5, r0
 8013392:	bfa2      	ittt	ge
 8013394:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8013398:	181b      	addge	r3, r3, r0
 801339a:	f8ad 3012 	strhge.w	r3, [sp, #18]
 801339e:	2500      	movs	r5, #0
 80133a0:	2701      	movs	r7, #1
 80133a2:	4e20      	ldr	r6, [pc, #128]	; (8013424 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x128>)
 80133a4:	f104 0808 	add.w	r8, r4, #8
 80133a8:	f856 1b04 	ldr.w	r1, [r6], #4
 80133ac:	780b      	ldrb	r3, [r1, #0]
 80133ae:	b15b      	cbz	r3, 80133c8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xcc>
 80133b0:	6862      	ldr	r2, [r4, #4]
 80133b2:	fa07 f305 	lsl.w	r3, r7, r5
 80133b6:	4393      	bics	r3, r2
 80133b8:	bf0c      	ite	eq
 80133ba:	2301      	moveq	r3, #1
 80133bc:	2300      	movne	r3, #0
 80133be:	f818 2005 	ldrb.w	r2, [r8, r5]
 80133c2:	a803      	add	r0, sp, #12
 80133c4:	f7ff fed4 	bl	8013170 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 80133c8:	3501      	adds	r5, #1
 80133ca:	2d14      	cmp	r5, #20
 80133cc:	d1ec      	bne.n	80133a8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xac>
 80133ce:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80133d2:	b17b      	cbz	r3, 80133f4 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xf8>
 80133d4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80133d8:	9b03      	ldr	r3, [sp, #12]
 80133da:	4413      	add	r3, r2
 80133dc:	227d      	movs	r2, #125	; 0x7d
 80133de:	f803 2c01 	strb.w	r2, [r3, #-1]
 80133e2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80133e6:	9903      	ldr	r1, [sp, #12]
 80133e8:	54ca      	strb	r2, [r1, r3]
 80133ea:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80133ee:	3301      	adds	r3, #1
 80133f0:	f8ad 3012 	strh.w	r3, [sp, #18]
 80133f4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80133f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80133fa:	601a      	str	r2, [r3, #0]
 80133fc:	b006      	add	sp, #24
 80133fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013402:	2301      	movs	r3, #1
 8013404:	4a08      	ldr	r2, [pc, #32]	; (8013428 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x12c>)
 8013406:	9300      	str	r3, [sp, #0]
 8013408:	4b03      	ldr	r3, [pc, #12]	; (8013418 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 801340a:	e7be      	b.n	801338a <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 801340c:	080184ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, sl, pc}
 8013410:	080184da 	stmdaeq	r1, {r1, r3, r4, r6, r7, sl, pc}
 8013414:	080184a2 	stmdaeq	r1, {r1, r5, r7, sl, pc}
 8013418:	080184b0 	stmdaeq	r1, {r4, r5, r7, sl, pc}
 801341c:	08016af9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, sp, lr}
 8013420:	08016af0 	stmdaeq	r1, {r4, r5, r6, r7, r9, fp, sp, lr}
 8013424:	0801842c 	stmdaeq	r1, {r2, r3, r5, sl, pc}
 8013428:	08016afa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r9, fp, sp, lr}

0801342c <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>:
 801342c:	b513      	push	{r0, r1, r4, lr}
 801342e:	6804      	ldr	r4, [r0, #0]
 8013430:	b914      	cbnz	r4, 8013438 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0xc>
 8013432:	601c      	str	r4, [r3, #0]
 8013434:	b002      	add	sp, #8
 8013436:	bd10      	pop	{r4, pc}
 8013438:	9300      	str	r3, [sp, #0]
 801343a:	4613      	mov	r3, r2
 801343c:	460a      	mov	r2, r1
 801343e:	2100      	movs	r1, #0
 8013440:	f7ff ff5c 	bl	80132fc <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>
 8013444:	e7f6      	b.n	8013434 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0x8>

08013446 <DisplayUdfParams::Set(DisplayUdf*)>:
 8013446:	6843      	ldr	r3, [r0, #4]
 8013448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801344c:	009a      	lsls	r2, r3, #2
 801344e:	4604      	mov	r4, r0
 8013450:	460e      	mov	r6, r1
 8013452:	d506      	bpl.n	8013462 <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8013454:	6988      	ldr	r0, [r1, #24]
 8013456:	b120      	cbz	r0, 8013462 <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8013458:	6803      	ldr	r3, [r0, #0]
 801345a:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 801345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013460:	4798      	blx	r3
 8013462:	6863      	ldr	r3, [r4, #4]
 8013464:	69b0      	ldr	r0, [r6, #24]
 8013466:	00db      	lsls	r3, r3, #3
 8013468:	bf41      	itttt	mi
 801346a:	f64e 2260 	movwmi	r2, #60000	; 0xea60
 801346e:	f894 3024 	ldrbmi.w	r3, [r4, #36]	; 0x24
 8013472:	4353      	mulmi	r3, r2
 8013474:	6173      	strmi	r3, [r6, #20]
 8013476:	6861      	ldr	r1, [r4, #4]
 8013478:	f3c1 7180 	ubfx	r1, r1, #30, #1
 801347c:	b110      	cbz	r0, 8013484 <DisplayUdfParams::Set(DisplayUdf*)+0x3e>
 801347e:	6803      	ldr	r3, [r0, #0]
 8013480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013482:	4798      	blx	r3
 8013484:	2500      	movs	r5, #0
 8013486:	2701      	movs	r7, #1
 8013488:	f104 0808 	add.w	r8, r4, #8
 801348c:	6862      	ldr	r2, [r4, #4]
 801348e:	fa07 f305 	lsl.w	r3, r7, r5
 8013492:	4393      	bics	r3, r2
 8013494:	d105      	bne.n	80134a2 <DisplayUdfParams::Set(DisplayUdf*)+0x5c>
 8013496:	462a      	mov	r2, r5
 8013498:	4630      	mov	r0, r6
 801349a:	f818 1005 	ldrb.w	r1, [r8, r5]
 801349e:	f7ff fe4d 	bl	801313c <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80134a2:	3501      	adds	r5, #1
 80134a4:	2d14      	cmp	r5, #20
 80134a6:	d1f1      	bne.n	801348c <DisplayUdfParams::Set(DisplayUdf*)+0x46>
 80134a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080134ac <DisplayUdfParams::Dump()>:
 80134ac:	4770      	bx	lr

080134ae <DisplayUdf::ShowNodeName(ArtNetNode*)>:
 80134ae:	b570      	push	{r4, r5, r6, lr}
 80134b0:	4605      	mov	r5, r0
 80134b2:	6980      	ldr	r0, [r0, #24]
 80134b4:	460c      	mov	r4, r1
 80134b6:	b120      	cbz	r0, 80134c2 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x14>
 80134b8:	6803      	ldr	r3, [r0, #0]
 80134ba:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
 80134be:	691b      	ldr	r3, [r3, #16]
 80134c0:	4798      	blx	r3
 80134c2:	69a8      	ldr	r0, [r5, #24]
 80134c4:	f104 0242 	add.w	r2, r4, #66	; 0x42
 80134c8:	b190      	cbz	r0, 80134f0 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x42>
 80134ca:	2300      	movs	r3, #0
 80134cc:	7906      	ldrb	r6, [r0, #4]
 80134ce:	3441      	adds	r4, #65	; 0x41
 80134d0:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80134d4:	b119      	cbz	r1, 80134de <DisplayUdf::ShowNodeName(ArtNetNode*)+0x30>
 80134d6:	1c59      	adds	r1, r3, #1
 80134d8:	429e      	cmp	r6, r3
 80134da:	460b      	mov	r3, r1
 80134dc:	dcf8      	bgt.n	80134d0 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x22>
 80134de:	6801      	ldr	r1, [r0, #0]
 80134e0:	b2db      	uxtb	r3, r3
 80134e2:	69cc      	ldr	r4, [r1, #28]
 80134e4:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
 80134e8:	46a4      	mov	ip, r4
 80134ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80134ee:	4760      	bx	ip
 80134f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080134f4 <DisplayUdf::ShowUniverse(ArtNetNode*)>:
 80134f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134f8:	460c      	mov	r4, r1
 80134fa:	b08b      	sub	sp, #44	; 0x2c
 80134fc:	4606      	mov	r6, r0
 80134fe:	2301      	movs	r3, #1
 8013500:	2100      	movs	r1, #0
 8013502:	4620      	mov	r0, r4
 8013504:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 8013508:	f7f6 f866 	bl	80095d8 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 801350c:	b350      	cbz	r0, 8013564 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x70>
 801350e:	2100      	movs	r1, #0
 8013510:	4620      	mov	r0, r4
 8013512:	f896 9040 	ldrb.w	r9, [r6, #64]	; 0x40
 8013516:	f7f6 f879 	bl	800960c <ArtNetNode::GetNetSwitch(unsigned int) const>
 801351a:	2100      	movs	r1, #0
 801351c:	4605      	mov	r5, r0
 801351e:	4620      	mov	r0, r4
 8013520:	f7f6 f870 	bl	8009604 <ArtNetNode::GetSubnetSwitch(unsigned int) const>
 8013524:	2100      	movs	r1, #0
 8013526:	4607      	mov	r7, r0
 8013528:	4620      	mov	r0, r4
 801352a:	f89d a027 	ldrb.w	sl, [sp, #39]	; 0x27
 801352e:	f7f6 f9f7 	bl	8009920 <ArtNetNode::GetMergeMode(unsigned int) const>
 8013532:	4a2d      	ldr	r2, [pc, #180]	; (80135e8 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf4>)
 8013534:	4b2d      	ldr	r3, [pc, #180]	; (80135ec <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf8>)
 8013536:	2100      	movs	r1, #0
 8013538:	2800      	cmp	r0, #0
 801353a:	bf0c      	ite	eq
 801353c:	4690      	moveq	r8, r2
 801353e:	4698      	movne	r8, r3
 8013540:	4620      	mov	r0, r4
 8013542:	f7f6 f9bc 	bl	80098be <ArtNetNode::GetPortProtocol(unsigned int) const>
 8013546:	4a2a      	ldr	r2, [pc, #168]	; (80135f0 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xfc>)
 8013548:	4b2a      	ldr	r3, [pc, #168]	; (80135f4 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x100>)
 801354a:	4649      	mov	r1, r9
 801354c:	2800      	cmp	r0, #0
 801354e:	bf18      	it	ne
 8013550:	4613      	movne	r3, r2
 8013552:	e9cd 7a00 	strd	r7, sl, [sp]
 8013556:	e9cd 8302 	strd	r8, r3, [sp, #8]
 801355a:	4630      	mov	r0, r6
 801355c:	462b      	mov	r3, r5
 801355e:	4a26      	ldr	r2, [pc, #152]	; (80135f8 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x104>)
 8013560:	f7f4 fd74 	bl	800804c <Display::Printf(unsigned char, char const*, ...)>
 8013564:	2500      	movs	r5, #0
 8013566:	f8df a08c 	ldr.w	sl, [pc, #140]	; 80135f4 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x100>
 801356a:	4629      	mov	r1, r5
 801356c:	2301      	movs	r3, #1
 801356e:	4620      	mov	r0, r4
 8013570:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 8013574:	f7f6 f830 	bl	80095d8 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 8013578:	46a9      	mov	r9, r5
 801357a:	3501      	adds	r5, #1
 801357c:	b378      	cbz	r0, 80135de <DisplayUdf::ShowUniverse(ArtNetNode*)+0xea>
 801357e:	f106 0343 	add.w	r3, r6, #67	; 0x43
 8013582:	2100      	movs	r1, #0
 8013584:	4620      	mov	r0, r4
 8013586:	f813 b005 	ldrb.w	fp, [r3, r5]
 801358a:	f7f6 f83f 	bl	800960c <ArtNetNode::GetNetSwitch(unsigned int) const>
 801358e:	2100      	movs	r1, #0
 8013590:	4607      	mov	r7, r0
 8013592:	4620      	mov	r0, r4
 8013594:	f7f6 f836 	bl	8009604 <ArtNetNode::GetSubnetSwitch(unsigned int) const>
 8013598:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 801359c:	4680      	mov	r8, r0
 801359e:	4649      	mov	r1, r9
 80135a0:	4620      	mov	r0, r4
 80135a2:	9307      	str	r3, [sp, #28]
 80135a4:	f7f6 f9bc 	bl	8009920 <ArtNetNode::GetMergeMode(unsigned int) const>
 80135a8:	4b10      	ldr	r3, [pc, #64]	; (80135ec <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf8>)
 80135aa:	4a0f      	ldr	r2, [pc, #60]	; (80135e8 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf4>)
 80135ac:	4649      	mov	r1, r9
 80135ae:	2800      	cmp	r0, #0
 80135b0:	bf18      	it	ne
 80135b2:	461a      	movne	r2, r3
 80135b4:	4620      	mov	r0, r4
 80135b6:	9206      	str	r2, [sp, #24]
 80135b8:	f7f6 f981 	bl	80098be <ArtNetNode::GetPortProtocol(unsigned int) const>
 80135bc:	490c      	ldr	r1, [pc, #48]	; (80135f0 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xfc>)
 80135be:	9a06      	ldr	r2, [sp, #24]
 80135c0:	2800      	cmp	r0, #0
 80135c2:	bf08      	it	eq
 80135c4:	4651      	moveq	r1, sl
 80135c6:	9b07      	ldr	r3, [sp, #28]
 80135c8:	9104      	str	r1, [sp, #16]
 80135ca:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80135ce:	9203      	str	r2, [sp, #12]
 80135d0:	462b      	mov	r3, r5
 80135d2:	4659      	mov	r1, fp
 80135d4:	4630      	mov	r0, r6
 80135d6:	4a09      	ldr	r2, [pc, #36]	; (80135fc <DisplayUdf::ShowUniverse(ArtNetNode*)+0x108>)
 80135d8:	9700      	str	r7, [sp, #0]
 80135da:	f7f4 fd37 	bl	800804c <Display::Printf(unsigned char, char const*, ...)>
 80135de:	2d04      	cmp	r5, #4
 80135e0:	d1c3      	bne.n	801356a <DisplayUdf::ShowUniverse(ArtNetNode*)+0x76>
 80135e2:	b00b      	add	sp, #44	; 0x2c
 80135e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135e8:	08016a21 	stmdaeq	r1, {r0, r5, r9, fp, sp, lr}
 80135ec:	08016a25 	stmdaeq	r1, {r0, r2, r5, r9, fp, sp, lr}
 80135f0:	08016a31 	stmdaeq	r1, {r0, r4, r5, r9, fp, sp, lr}
 80135f4:	080184e4 	stmdaeq	r1, {r2, r5, r6, r7, sl, pc}
 80135f8:	080184e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, sl, pc}
 80135fc:	080184fd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, sl, pc}

08013600 <DisplayUdf::ShowDestinationIp(ArtNetNode*)>:
 8013600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013604:	4606      	mov	r6, r0
 8013606:	2541      	movs	r5, #65	; 0x41
 8013608:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8013648 <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x48>
 801360c:	b085      	sub	sp, #20
 801360e:	f100 084a 	add.w	r8, r0, #74	; 0x4a
 8013612:	f501 775b 	add.w	r7, r1, #876	; 0x36c
 8013616:	012b      	lsls	r3, r5, #4
 8013618:	58fc      	ldr	r4, [r7, r3]
 801361a:	464a      	mov	r2, r9
 801361c:	0e23      	lsrs	r3, r4, #24
 801361e:	9303      	str	r3, [sp, #12]
 8013620:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8013624:	9302      	str	r3, [sp, #8]
 8013626:	f3c4 2307 	ubfx	r3, r4, #8, #8
 801362a:	b2e4      	uxtb	r4, r4
 801362c:	9301      	str	r3, [sp, #4]
 801362e:	9400      	str	r4, [sp, #0]
 8013630:	462b      	mov	r3, r5
 8013632:	4630      	mov	r0, r6
 8013634:	f818 1b01 	ldrb.w	r1, [r8], #1
 8013638:	3501      	adds	r5, #1
 801363a:	f7f4 fd07 	bl	800804c <Display::Printf(unsigned char, char const*, ...)>
 801363e:	2d45      	cmp	r5, #69	; 0x45
 8013640:	d1e9      	bne.n	8013616 <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x16>
 8013642:	b005      	add	sp, #20
 8013644:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013648:	08018513 	stmdaeq	r1, {r0, r1, r4, r8, sl, pc}

0801364c <DisplayUdf::Show(ArtNetNode*)>:
 801364c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801364e:	4604      	mov	r4, r0
 8013650:	460d      	mov	r5, r1
 8013652:	f7ff fcc7 	bl	8012fe4 <DisplayUdf::Show()>
 8013656:	4629      	mov	r1, r5
 8013658:	4620      	mov	r0, r4
 801365a:	f7ff ff28 	bl	80134ae <DisplayUdf::ShowNodeName(ArtNetNode*)>
 801365e:	4629      	mov	r1, r5
 8013660:	4620      	mov	r0, r4
 8013662:	f7ff ff47 	bl	80134f4 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8013666:	4629      	mov	r1, r5
 8013668:	4620      	mov	r0, r4
 801366a:	f7ff ffc9 	bl	8013600 <DisplayUdf::ShowDestinationIp(ArtNetNode*)>
 801366e:	f895 26de 	ldrb.w	r2, [r5, #1758]	; 0x6de
 8013672:	f895 36df 	ldrb.w	r3, [r5, #1759]	; 0x6df
 8013676:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 801367a:	4413      	add	r3, r2
 801367c:	4620      	mov	r0, r4
 801367e:	4a0d      	ldr	r2, [pc, #52]	; (80136b4 <DisplayUdf::Show(ArtNetNode*)+0x68>)
 8013680:	f7f4 fce4 	bl	800804c <Display::Printf(unsigned char, char const*, ...)>
 8013684:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8013686:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
 801368a:	2a02      	cmp	r2, #2
 801368c:	d001      	beq.n	8013692 <DisplayUdf::Show(ArtNetNode*)+0x46>
 801368e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8013690:	b92b      	cbnz	r3, 801369e <DisplayUdf::Show(ArtNetNode*)+0x52>
 8013692:	4620      	mov	r0, r4
 8013694:	4a08      	ldr	r2, [pc, #32]	; (80136b8 <DisplayUdf::Show(ArtNetNode*)+0x6c>)
 8013696:	f7f4 fcd9 	bl	800804c <Display::Printf(unsigned char, char const*, ...)>
 801369a:	b003      	add	sp, #12
 801369c:	bd30      	pop	{r4, r5, pc}
 801369e:	4807      	ldr	r0, [pc, #28]	; (80136bc <DisplayUdf::Show(ArtNetNode*)+0x70>)
 80136a0:	9300      	str	r3, [sp, #0]
 80136a2:	4b07      	ldr	r3, [pc, #28]	; (80136c0 <DisplayUdf::Show(ArtNetNode*)+0x74>)
 80136a4:	2a00      	cmp	r2, #0
 80136a6:	bf08      	it	eq
 80136a8:	4603      	moveq	r3, r0
 80136aa:	4620      	mov	r0, r4
 80136ac:	4a05      	ldr	r2, [pc, #20]	; (80136c4 <DisplayUdf::Show(ArtNetNode*)+0x78>)
 80136ae:	f7f4 fccd 	bl	800804c <Display::Printf(unsigned char, char const*, ...)>
 80136b2:	e7f2      	b.n	801369a <DisplayUdf::Show(ArtNetNode*)+0x4e>
 80136b4:	08018523 	stmdaeq	r1, {r0, r1, r5, r8, sl, pc}
 80136b8:	0801852a 	stmdaeq	r1, {r1, r3, r5, r8, sl, pc}
 80136bc:	08016b66 	stmdaeq	r1, {r1, r2, r5, r6, r8, r9, fp, sp, lr}
 80136c0:	08016b5b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r8, r9, fp, sp, lr}
 80136c4:	08018531 	stmdaeq	r1, {r0, r4, r5, r8, sl, pc}

080136c8 <NetworkDisplay::ShowEmacStart()>:
 80136c8:	4b01      	ldr	r3, [pc, #4]	; (80136d0 <NetworkDisplay::ShowEmacStart()+0x8>)
 80136ca:	6818      	ldr	r0, [r3, #0]
 80136cc:	f7ff bbf4 	b.w	8012eb8 <DisplayUdf::ShowEmacStart()>
 80136d0:	2000a8cc 	andcs	sl, r0, ip, asr #17

080136d4 <NetworkDisplay::ShowIp()>:
 80136d4:	4b01      	ldr	r3, [pc, #4]	; (80136dc <NetworkDisplay::ShowIp()+0x8>)
 80136d6:	6818      	ldr	r0, [r3, #0]
 80136d8:	f7ff bbfe 	b.w	8012ed8 <DisplayUdf::ShowIpAddress()>
 80136dc:	2000a8cc 	andcs	sl, r0, ip, asr #17

080136e0 <NetworkDisplay::ShowNetMask()>:
 80136e0:	4b01      	ldr	r3, [pc, #4]	; (80136e8 <NetworkDisplay::ShowNetMask()+0x8>)
 80136e2:	6818      	ldr	r0, [r3, #0]
 80136e4:	f7ff bc2c 	b.w	8012f40 <DisplayUdf::ShowNetmask()>
 80136e8:	2000a8cc 	andcs	sl, r0, ip, asr #17

080136ec <NetworkDisplay::ShowGatewayIp()>:
 80136ec:	4b01      	ldr	r3, [pc, #4]	; (80136f4 <NetworkDisplay::ShowGatewayIp()+0x8>)
 80136ee:	6818      	ldr	r0, [r3, #0]
 80136f0:	f7ff bc44 	b.w	8012f7c <DisplayUdf::ShowGatewayIp()>
 80136f4:	2000a8cc 	andcs	sl, r0, ip, asr #17

080136f8 <NetworkDisplay::ShowShutdown()>:
 80136f8:	4b01      	ldr	r3, [pc, #4]	; (8013700 <NetworkDisplay::ShowShutdown()+0x8>)
 80136fa:	6818      	ldr	r0, [r3, #0]
 80136fc:	f7ff bcee 	b.w	80130dc <DisplayUdf::ShowShutdown()>
 8013700:	2000a8cc 	andcs	sl, r0, ip, asr #17

08013704 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 8013704:	4b01      	ldr	r3, [pc, #4]	; (801370c <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)+0x8>)
 8013706:	6818      	ldr	r0, [r3, #0]
 8013708:	f7ff bcb0 	b.w	801306c <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>
 801370c:	2000a8cc 	andcs	sl, r0, ip, asr #17

08013710 <properties::convert_json_file(char*, unsigned short, bool)>:
 8013710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013714:	7803      	ldrb	r3, [r0, #0]
 8013716:	2b7b      	cmp	r3, #123	; 0x7b
 8013718:	d170      	bne.n	80137fc <properties::convert_json_file(char*, unsigned short, bool)+0xec>
 801371a:	b322      	cbz	r2, 8013766 <properties::convert_json_file(char*, unsigned short, bool)+0x56>
 801371c:	2301      	movs	r3, #1
 801371e:	4606      	mov	r6, r0
 8013720:	461c      	mov	r4, r3
 8013722:	2a00      	cmp	r2, #0
 8013724:	bf0c      	ite	eq
 8013726:	f04f 0c0a 	moveq.w	ip, #10
 801372a:	f04f 0c00 	movne.w	ip, #0
 801372e:	273d      	movs	r7, #61	; 0x3d
 8013730:	4299      	cmp	r1, r3
 8013732:	d960      	bls.n	80137f6 <properties::convert_json_file(char*, unsigned short, bool)+0xe6>
 8013734:	4299      	cmp	r1, r3
 8013736:	4602      	mov	r2, r0
 8013738:	f890 e000 	ldrb.w	lr, [r0]
 801373c:	f103 0301 	add.w	r3, r3, #1
 8013740:	f100 0001 	add.w	r0, r0, #1
 8013744:	d846      	bhi.n	80137d4 <properties::convert_json_file(char*, unsigned short, bool)+0xc4>
 8013746:	1aa0      	subs	r0, r4, r2
 8013748:	4615      	mov	r5, r2
 801374a:	1884      	adds	r4, r0, r2
 801374c:	f812 8b01 	ldrb.w	r8, [r2], #1
 8013750:	f103 0e01 	add.w	lr, r3, #1
 8013754:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
 8013758:	d053      	beq.n	8013802 <properties::convert_json_file(char*, unsigned short, bool)+0xf2>
 801375a:	4299      	cmp	r1, r3
 801375c:	d957      	bls.n	801380e <properties::convert_json_file(char*, unsigned short, bool)+0xfe>
 801375e:	4673      	mov	r3, lr
 8013760:	f806 8b01 	strb.w	r8, [r6], #1
 8013764:	e7f0      	b.n	8013748 <properties::convert_json_file(char*, unsigned short, bool)+0x38>
 8013766:	2323      	movs	r3, #35	; 0x23
 8013768:	f800 3b01 	strb.w	r3, [r0], #1
 801376c:	4605      	mov	r5, r0
 801376e:	2301      	movs	r3, #1
 8013770:	4299      	cmp	r1, r3
 8013772:	d92d      	bls.n	80137d0 <properties::convert_json_file(char*, unsigned short, bool)+0xc0>
 8013774:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013778:	2c22      	cmp	r4, #34	; 0x22
 801377a:	d001      	beq.n	8013780 <properties::convert_json_file(char*, unsigned short, bool)+0x70>
 801377c:	3301      	adds	r3, #1
 801377e:	e7f7      	b.n	8013770 <properties::convert_json_file(char*, unsigned short, bool)+0x60>
 8013780:	46ac      	mov	ip, r5
 8013782:	4606      	mov	r6, r0
 8013784:	2701      	movs	r7, #1
 8013786:	f89c e000 	ldrb.w	lr, [ip]
 801378a:	4665      	mov	r5, ip
 801378c:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8013790:	4630      	mov	r0, r6
 8013792:	463c      	mov	r4, r7
 8013794:	f10c 0c01 	add.w	ip, ip, #1
 8013798:	f106 0601 	add.w	r6, r6, #1
 801379c:	f107 0701 	add.w	r7, r7, #1
 80137a0:	d007      	beq.n	80137b2 <properties::convert_json_file(char*, unsigned short, bool)+0xa2>
 80137a2:	3301      	adds	r3, #1
 80137a4:	4299      	cmp	r1, r3
 80137a6:	4665      	mov	r5, ip
 80137a8:	f806 ec01 	strb.w	lr, [r6, #-1]
 80137ac:	d8eb      	bhi.n	8013786 <properties::convert_json_file(char*, unsigned short, bool)+0x76>
 80137ae:	463c      	mov	r4, r7
 80137b0:	4630      	mov	r0, r6
 80137b2:	4606      	mov	r6, r0
 80137b4:	200a      	movs	r0, #10
 80137b6:	3401      	adds	r4, #1
 80137b8:	f806 0b01 	strb.w	r0, [r6], #1
 80137bc:	4628      	mov	r0, r5
 80137be:	f815 7b01 	ldrb.w	r7, [r5], #1
 80137c2:	2f7b      	cmp	r7, #123	; 0x7b
 80137c4:	d0ad      	beq.n	8013722 <properties::convert_json_file(char*, unsigned short, bool)+0x12>
 80137c6:	1c5f      	adds	r7, r3, #1
 80137c8:	4299      	cmp	r1, r3
 80137ca:	463b      	mov	r3, r7
 80137cc:	d8f6      	bhi.n	80137bc <properties::convert_json_file(char*, unsigned short, bool)+0xac>
 80137ce:	e7a8      	b.n	8013722 <properties::convert_json_file(char*, unsigned short, bool)+0x12>
 80137d0:	2401      	movs	r4, #1
 80137d2:	e7ee      	b.n	80137b2 <properties::convert_json_file(char*, unsigned short, bool)+0xa2>
 80137d4:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 80137d8:	d1ac      	bne.n	8013734 <properties::convert_json_file(char*, unsigned short, bool)+0x24>
 80137da:	4602      	mov	r2, r0
 80137dc:	e7b3      	b.n	8013746 <properties::convert_json_file(char*, unsigned short, bool)+0x36>
 80137de:	283a      	cmp	r0, #58	; 0x3a
 80137e0:	d115      	bne.n	801380e <properties::convert_json_file(char*, unsigned short, bool)+0xfe>
 80137e2:	462b      	mov	r3, r5
 80137e4:	e01b      	b.n	801381e <properties::convert_json_file(char*, unsigned short, bool)+0x10e>
 80137e6:	4686      	mov	lr, r0
 80137e8:	e027      	b.n	801383a <properties::convert_json_file(char*, unsigned short, bool)+0x12a>
 80137ea:	4673      	mov	r3, lr
 80137ec:	f806 cb01 	strb.w	ip, [r6], #1
 80137f0:	3401      	adds	r4, #1
 80137f2:	3301      	adds	r3, #1
 80137f4:	e79c      	b.n	8013730 <properties::convert_json_file(char*, unsigned short, bool)+0x20>
 80137f6:	4620      	mov	r0, r4
 80137f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013800:	e7fa      	b.n	80137f8 <properties::convert_json_file(char*, unsigned short, bool)+0xe8>
 8013802:	4630      	mov	r0, r6
 8013804:	f800 7b01 	strb.w	r7, [r0], #1
 8013808:	469e      	mov	lr, r3
 801380a:	4606      	mov	r6, r0
 801380c:	3401      	adds	r4, #1
 801380e:	4571      	cmp	r1, lr
 8013810:	462b      	mov	r3, r5
 8013812:	7828      	ldrb	r0, [r5, #0]
 8013814:	f10e 0e01 	add.w	lr, lr, #1
 8013818:	f105 0501 	add.w	r5, r5, #1
 801381c:	d8df      	bhi.n	80137de <properties::convert_json_file(char*, unsigned short, bool)+0xce>
 801381e:	781d      	ldrb	r5, [r3, #0]
 8013820:	461a      	mov	r2, r3
 8013822:	2d2f      	cmp	r5, #47	; 0x2f
 8013824:	4670      	mov	r0, lr
 8013826:	f103 0301 	add.w	r3, r3, #1
 801382a:	f10e 0e01 	add.w	lr, lr, #1
 801382e:	d8da      	bhi.n	80137e6 <properties::convert_json_file(char*, unsigned short, bool)+0xd6>
 8013830:	4281      	cmp	r1, r0
 8013832:	d8f4      	bhi.n	801381e <properties::convert_json_file(char*, unsigned short, bool)+0x10e>
 8013834:	2d22      	cmp	r5, #34	; 0x22
 8013836:	bf08      	it	eq
 8013838:	461a      	moveq	r2, r3
 801383a:	4610      	mov	r0, r2
 801383c:	f810 5b01 	ldrb.w	r5, [r0], #1
 8013840:	f10e 0301 	add.w	r3, lr, #1
 8013844:	2d22      	cmp	r5, #34	; 0x22
 8013846:	d0d0      	beq.n	80137ea <properties::convert_json_file(char*, unsigned short, bool)+0xda>
 8013848:	2d2c      	cmp	r5, #44	; 0x2c
 801384a:	d0ce      	beq.n	80137ea <properties::convert_json_file(char*, unsigned short, bool)+0xda>
 801384c:	2d7d      	cmp	r5, #125	; 0x7d
 801384e:	d0cc      	beq.n	80137ea <properties::convert_json_file(char*, unsigned short, bool)+0xda>
 8013850:	4571      	cmp	r1, lr
 8013852:	d9ce      	bls.n	80137f2 <properties::convert_json_file(char*, unsigned short, bool)+0xe2>
 8013854:	f1a5 0e20 	sub.w	lr, r5, #32
 8013858:	f1be 0f5a 	cmp.w	lr, #90	; 0x5a
 801385c:	d803      	bhi.n	8013866 <properties::convert_json_file(char*, unsigned short, bool)+0x156>
 801385e:	4602      	mov	r2, r0
 8013860:	f806 5b01 	strb.w	r5, [r6], #1
 8013864:	3401      	adds	r4, #1
 8013866:	469e      	mov	lr, r3
 8013868:	e7e7      	b.n	801383a <properties::convert_json_file(char*, unsigned short, bool)+0x12a>
	...

0801386c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>:
 801386c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013870:	6002      	str	r2, [r0, #0]
 8013872:	4614      	mov	r4, r2
 8013874:	2200      	movs	r2, #0
 8013876:	4606      	mov	r6, r0
 8013878:	460f      	mov	r7, r1
 801387a:	80c2      	strh	r2, [r0, #6]
 801387c:	4a1b      	ldr	r2, [pc, #108]	; (80138ec <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x80>)
 801387e:	8083      	strh	r3, [r0, #4]
 8013880:	7810      	ldrb	r0, [r2, #0]
 8013882:	f000 0001 	and.w	r0, r0, #1
 8013886:	7230      	strb	r0, [r6, #8]
 8013888:	463d      	mov	r5, r7
 801388a:	782a      	ldrb	r2, [r5, #0]
 801388c:	3701      	adds	r7, #1
 801388e:	2a00      	cmp	r2, #0
 8013890:	d1fa      	bne.n	8013888 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x1c>
 8013892:	1a6d      	subs	r5, r5, r1
 8013894:	b29b      	uxth	r3, r3
 8013896:	b1d0      	cbz	r0, 80138ce <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x62>
 8013898:	1d2f      	adds	r7, r5, #4
 801389a:	429f      	cmp	r7, r3
 801389c:	d814      	bhi.n	80138c8 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 801389e:	f04f 087b 	mov.w	r8, #123	; 0x7b
 80138a2:	f04f 0922 	mov.w	r9, #34	; 0x22
 80138a6:	462a      	mov	r2, r5
 80138a8:	f884 8000 	strb.w	r8, [r4]
 80138ac:	f884 9001 	strb.w	r9, [r4, #1]
 80138b0:	1ca0      	adds	r0, r4, #2
 80138b2:	f000 ff4a 	bl	801474a <memmove>
 80138b6:	223a      	movs	r2, #58	; 0x3a
 80138b8:	1963      	adds	r3, r4, r5
 80138ba:	3505      	adds	r5, #5
 80138bc:	f883 9002 	strb.w	r9, [r3, #2]
 80138c0:	70da      	strb	r2, [r3, #3]
 80138c2:	80f5      	strh	r5, [r6, #6]
 80138c4:	f804 8007 	strb.w	r8, [r4, r7]
 80138c8:	4630      	mov	r0, r6
 80138ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138ce:	1caf      	adds	r7, r5, #2
 80138d0:	429f      	cmp	r7, r3
 80138d2:	d8f9      	bhi.n	80138c8 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 80138d4:	4620      	mov	r0, r4
 80138d6:	2323      	movs	r3, #35	; 0x23
 80138d8:	462a      	mov	r2, r5
 80138da:	f800 3b01 	strb.w	r3, [r0], #1
 80138de:	f000 ff34 	bl	801474a <memmove>
 80138e2:	230a      	movs	r3, #10
 80138e4:	442c      	add	r4, r5
 80138e6:	7063      	strb	r3, [r4, #1]
 80138e8:	80f7      	strh	r7, [r6, #6]
 80138ea:	e7ed      	b.n	80138c8 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 80138ec:	2000a8d0 	ldrdcs	sl, [r0], -r0

080138f0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>:
 80138f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138f2:	469c      	mov	ip, r3
 80138f4:	8885      	ldrh	r5, [r0, #4]
 80138f6:	88c3      	ldrh	r3, [r0, #6]
 80138f8:	b085      	sub	sp, #20
 80138fa:	42ab      	cmp	r3, r5
 80138fc:	d302      	bcc.n	8013904 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x14>
 80138fe:	2000      	movs	r0, #0
 8013900:	b005      	add	sp, #20
 8013902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013904:	4604      	mov	r4, r0
 8013906:	6800      	ldr	r0, [r0, #0]
 8013908:	1aed      	subs	r5, r5, r3
 801390a:	4418      	add	r0, r3
 801390c:	b2d6      	uxtb	r6, r2
 801390e:	f3c2 2707 	ubfx	r7, r2, #8, #8
 8013912:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8013916:	f894 e008 	ldrb.w	lr, [r4, #8]
 801391a:	0e12      	lsrs	r2, r2, #24
 801391c:	f1bc 0f00 	cmp.w	ip, #0
 8013920:	d109      	bne.n	8013936 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x46>
 8013922:	f1be 0f00 	cmp.w	lr, #0
 8013926:	d109      	bne.n	801393c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x4c>
 8013928:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801392c:	e9cd 6700 	strd	r6, r7, [sp]
 8013930:	460b      	mov	r3, r1
 8013932:	4a0e      	ldr	r2, [pc, #56]	; (801396c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x7c>)
 8013934:	e008      	b.n	8013948 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 8013936:	f1be 0f00 	cmp.w	lr, #0
 801393a:	d00f      	beq.n	801395c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x6c>
 801393c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8013940:	460b      	mov	r3, r1
 8013942:	e9cd 6700 	strd	r6, r7, [sp]
 8013946:	4a0a      	ldr	r2, [pc, #40]	; (8013970 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x80>)
 8013948:	4629      	mov	r1, r5
 801394a:	f7f5 f9df 	bl	8008d0c <snprintf>
 801394e:	4285      	cmp	r5, r0
 8013950:	dbd5      	blt.n	80138fe <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0xe>
 8013952:	88e3      	ldrh	r3, [r4, #6]
 8013954:	4403      	add	r3, r0
 8013956:	80e3      	strh	r3, [r4, #6]
 8013958:	2001      	movs	r0, #1
 801395a:	e7d1      	b.n	8013900 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x10>
 801395c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8013960:	e9cd 6700 	strd	r6, r7, [sp]
 8013964:	460b      	mov	r3, r1
 8013966:	4a03      	ldr	r2, [pc, #12]	; (8013974 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x84>)
 8013968:	e7ee      	b.n	8013948 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 801396a:	bf00      	nop
 801396c:	080185bf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, r8, sl, pc}
 8013970:	080185ab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r8, sl, pc}
 8013974:	080185c0 	stmdaeq	r1, {r6, r7, r8, sl, pc}

08013978 <PropertiesBuilder::AddComment(char const*)>:
 8013978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801397a:	7a06      	ldrb	r6, [r0, #8]
 801397c:	b996      	cbnz	r6, 80139a4 <PropertiesBuilder::AddComment(char const*)+0x2c>
 801397e:	4604      	mov	r4, r0
 8013980:	88c0      	ldrh	r0, [r0, #6]
 8013982:	88a5      	ldrh	r5, [r4, #4]
 8013984:	42a8      	cmp	r0, r5
 8013986:	d20d      	bcs.n	80139a4 <PropertiesBuilder::AddComment(char const*)+0x2c>
 8013988:	6827      	ldr	r7, [r4, #0]
 801398a:	1a2d      	subs	r5, r5, r0
 801398c:	460b      	mov	r3, r1
 801398e:	4a06      	ldr	r2, [pc, #24]	; (80139a8 <PropertiesBuilder::AddComment(char const*)+0x30>)
 8013990:	4629      	mov	r1, r5
 8013992:	4438      	add	r0, r7
 8013994:	f7f5 f9ba 	bl	8008d0c <snprintf>
 8013998:	4285      	cmp	r5, r0
 801399a:	bfa1      	itttt	ge
 801399c:	2601      	movge	r6, #1
 801399e:	88e3      	ldrhge	r3, [r4, #6]
 80139a0:	18c0      	addge	r0, r0, r3
 80139a2:	80e0      	strhge	r0, [r4, #6]
 80139a4:	4630      	mov	r0, r6
 80139a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139a8:	080185d0 	stmdaeq	r1, {r4, r6, r7, r8, sl, pc}

080139ac <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)>:
 80139ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80139ae:	88c5      	ldrh	r5, [r0, #6]
 80139b0:	8887      	ldrh	r7, [r0, #4]
 80139b2:	9e08      	ldr	r6, [sp, #32]
 80139b4:	42bd      	cmp	r5, r7
 80139b6:	d302      	bcc.n	80139be <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x12>
 80139b8:	2000      	movs	r0, #0
 80139ba:	b003      	add	sp, #12
 80139bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80139be:	4604      	mov	r4, r0
 80139c0:	6800      	ldr	r0, [r0, #0]
 80139c2:	4428      	add	r0, r5
 80139c4:	1b7d      	subs	r5, r7, r5
 80139c6:	7a27      	ldrb	r7, [r4, #8]
 80139c8:	b92b      	cbnz	r3, 80139d6 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x2a>
 80139ca:	b92f      	cbnz	r7, 80139d8 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x2c>
 80139cc:	e9cd 6200 	strd	r6, r2, [sp]
 80139d0:	460b      	mov	r3, r1
 80139d2:	4a0b      	ldr	r2, [pc, #44]	; (8013a00 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x54>)
 80139d4:	e004      	b.n	80139e0 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x34>
 80139d6:	b16f      	cbz	r7, 80139f4 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x48>
 80139d8:	460b      	mov	r3, r1
 80139da:	e9cd 6200 	strd	r6, r2, [sp]
 80139de:	4a09      	ldr	r2, [pc, #36]	; (8013a04 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x58>)
 80139e0:	4629      	mov	r1, r5
 80139e2:	f7f5 f993 	bl	8008d0c <snprintf>
 80139e6:	4285      	cmp	r5, r0
 80139e8:	dbe6      	blt.n	80139b8 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0xc>
 80139ea:	88e3      	ldrh	r3, [r4, #6]
 80139ec:	4403      	add	r3, r0
 80139ee:	80e3      	strh	r3, [r4, #6]
 80139f0:	2001      	movs	r0, #1
 80139f2:	e7e2      	b.n	80139ba <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0xe>
 80139f4:	e9cd 6200 	strd	r6, r2, [sp]
 80139f8:	460b      	mov	r3, r1
 80139fa:	4a03      	ldr	r2, [pc, #12]	; (8013a08 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x5c>)
 80139fc:	e7f0      	b.n	80139e0 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x34>
 80139fe:	bf00      	nop
 8013a00:	080185e5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r8, sl, pc}
 8013a04:	080185d8 	stmdaeq	r1, {r3, r4, r6, r7, r8, sl, pc}
 8013a08:	080185e6 	stmdaeq	r1, {r1, r2, r5, r6, r7, r8, sl, pc}

08013a0c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>:
 8013a0c:	e9c0 1200 	strd	r1, r2, [r0]
 8013a10:	4770      	bx	lr

08013a12 <ReadConfigFile::~ReadConfigFile()>:
 8013a12:	4770      	bx	lr

08013a14 <ReadConfigFile::Read(char const*, unsigned int)>:
 8013a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a18:	4606      	mov	r6, r0
 8013a1a:	460d      	mov	r5, r1
 8013a1c:	4614      	mov	r4, r2
 8013a1e:	f04f 0800 	mov.w	r8, #0
 8013a22:	b090      	sub	sp, #64	; 0x40
 8013a24:	b33c      	cbz	r4, 8013a76 <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 8013a26:	466b      	mov	r3, sp
 8013a28:	462a      	mov	r2, r5
 8013a2a:	4619      	mov	r1, r3
 8013a2c:	7817      	ldrb	r7, [r2, #0]
 8013a2e:	4610      	mov	r0, r2
 8013a30:	2f0d      	cmp	r7, #13
 8013a32:	f102 0201 	add.w	r2, r2, #1
 8013a36:	d013      	beq.n	8013a60 <ReadConfigFile::Read(char const*, unsigned int)+0x4c>
 8013a38:	2f0a      	cmp	r7, #10
 8013a3a:	d011      	beq.n	8013a60 <ReadConfigFile::Read(char const*, unsigned int)+0x4c>
 8013a3c:	f803 7b01 	strb.w	r7, [r3], #1
 8013a40:	1a58      	subs	r0, r3, r1
 8013a42:	283f      	cmp	r0, #63	; 0x3f
 8013a44:	4615      	mov	r5, r2
 8013a46:	dc16      	bgt.n	8013a76 <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 8013a48:	3c01      	subs	r4, #1
 8013a4a:	d1ef      	bne.n	8013a2c <ReadConfigFile::Read(char const*, unsigned int)+0x18>
 8013a4c:	f89d 2000 	ldrb.w	r2, [sp]
 8013a50:	2a60      	cmp	r2, #96	; 0x60
 8013a52:	d9e7      	bls.n	8013a24 <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 8013a54:	f883 8000 	strb.w	r8, [r3]
 8013a58:	e9d6 3000 	ldrd	r3, r0, [r6]
 8013a5c:	4798      	blx	r3
 8013a5e:	e7e1      	b.n	8013a24 <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 8013a60:	4605      	mov	r5, r0
 8013a62:	2c00      	cmp	r4, #0
 8013a64:	d0f2      	beq.n	8013a4c <ReadConfigFile::Read(char const*, unsigned int)+0x38>
 8013a66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a6a:	2a0d      	cmp	r2, #13
 8013a6c:	d001      	beq.n	8013a72 <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 8013a6e:	2a0a      	cmp	r2, #10
 8013a70:	d1ec      	bne.n	8013a4c <ReadConfigFile::Read(char const*, unsigned int)+0x38>
 8013a72:	3c01      	subs	r4, #1
 8013a74:	e7f4      	b.n	8013a60 <ReadConfigFile::Read(char const*, unsigned int)+0x4c>
 8013a76:	b010      	add	sp, #64	; 0x40
 8013a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013a7c <Sscan::Char(char const*, char const*, char*, unsigned int&)>:
 8013a7c:	b570      	push	{r4, r5, r6, lr}
 8013a7e:	4615      	mov	r5, r2
 8013a80:	461c      	mov	r4, r3
 8013a82:	f000 f946 	bl	8013d12 <Sscan::checkName(char const*, char const*)>
 8013a86:	b160      	cbz	r0, 8013aa2 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x26>
 8013a88:	2100      	movs	r1, #0
 8013a8a:	5c43      	ldrb	r3, [r0, r1]
 8013a8c:	6826      	ldr	r6, [r4, #0]
 8013a8e:	b28a      	uxth	r2, r1
 8013a90:	b123      	cbz	r3, 8013a9c <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x20>
 8013a92:	42b2      	cmp	r2, r6
 8013a94:	d207      	bcs.n	8013aa6 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2a>
 8013a96:	546b      	strb	r3, [r5, r1]
 8013a98:	3101      	adds	r1, #1
 8013a9a:	e7f6      	b.n	8013a8a <Sscan::Char(char const*, char const*, char*, unsigned int&)+0xe>
 8013a9c:	2000      	movs	r0, #0
 8013a9e:	6022      	str	r2, [r4, #0]
 8013aa0:	bd70      	pop	{r4, r5, r6, pc}
 8013aa2:	2001      	movs	r0, #1
 8013aa4:	e7fc      	b.n	8013aa0 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x24>
 8013aa6:	2b0a      	cmp	r3, #10
 8013aa8:	d0f8      	beq.n	8013a9c <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x20>
 8013aaa:	2002      	movs	r0, #2
 8013aac:	e7f8      	b.n	8013aa0 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x24>

08013aae <Sscan::Float(char const*, char const*, float&)>:
 8013aae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ab2:	4616      	mov	r6, r2
 8013ab4:	f000 f92d 	bl	8013d12 <Sscan::checkName(char const*, char const*)>
 8013ab8:	2800      	cmp	r0, #0
 8013aba:	d059      	beq.n	8013b70 <Sscan::Float(char const*, char const*, float&)+0xc2>
 8013abc:	4604      	mov	r4, r0
 8013abe:	7803      	ldrb	r3, [r0, #0]
 8013ac0:	2b2d      	cmp	r3, #45	; 0x2d
 8013ac2:	bf08      	it	eq
 8013ac4:	3401      	addeq	r4, #1
 8013ac6:	7823      	ldrb	r3, [r4, #0]
 8013ac8:	bf0c      	ite	eq
 8013aca:	f04f 0801 	moveq.w	r8, #1
 8013ace:	f04f 0800 	movne.w	r8, #0
 8013ad2:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8013ad6:	d103      	bne.n	8013ae0 <Sscan::Float(char const*, char const*, float&)+0x32>
 8013ad8:	2702      	movs	r7, #2
 8013ada:	4638      	mov	r0, r7
 8013adc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ae0:	2000      	movs	r0, #0
 8013ae2:	220a      	movs	r2, #10
 8013ae4:	7823      	ldrb	r3, [r4, #0]
 8013ae6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013aea:	2909      	cmp	r1, #9
 8013aec:	d8f4      	bhi.n	8013ad8 <Sscan::Float(char const*, char const*, float&)+0x2a>
 8013aee:	fb02 3000 	mla	r0, r2, r0, r3
 8013af2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013af6:	3830      	subs	r0, #48	; 0x30
 8013af8:	2b2e      	cmp	r3, #46	; 0x2e
 8013afa:	d002      	beq.n	8013b02 <Sscan::Float(char const*, char const*, float&)+0x54>
 8013afc:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8013b00:	d1f0      	bne.n	8013ae4 <Sscan::Float(char const*, char const*, float&)+0x36>
 8013b02:	f7f3 fc2b 	bl	800735c <__aeabi_ui2f>
 8013b06:	6030      	str	r0, [r6, #0]
 8013b08:	7823      	ldrb	r3, [r4, #0]
 8013b0a:	4605      	mov	r5, r0
 8013b0c:	2b2e      	cmp	r3, #46	; 0x2e
 8013b0e:	d008      	beq.n	8013b22 <Sscan::Float(char const*, char const*, float&)+0x74>
 8013b10:	f1b8 0f00 	cmp.w	r8, #0
 8013b14:	d101      	bne.n	8013b1a <Sscan::Float(char const*, char const*, float&)+0x6c>
 8013b16:	2700      	movs	r7, #0
 8013b18:	e7df      	b.n	8013ada <Sscan::Float(char const*, char const*, float&)+0x2c>
 8013b1a:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 8013b1e:	6035      	str	r5, [r6, #0]
 8013b20:	e7f9      	b.n	8013b16 <Sscan::Float(char const*, char const*, float&)+0x68>
 8013b22:	f04f 0901 	mov.w	r9, #1
 8013b26:	2000      	movs	r0, #0
 8013b28:	220a      	movs	r2, #10
 8013b2a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013b2e:	f013 07df 	ands.w	r7, r3, #223	; 0xdf
 8013b32:	d007      	beq.n	8013b44 <Sscan::Float(char const*, char const*, float&)+0x96>
 8013b34:	3b30      	subs	r3, #48	; 0x30
 8013b36:	2b09      	cmp	r3, #9
 8013b38:	d8ce      	bhi.n	8013ad8 <Sscan::Float(char const*, char const*, float&)+0x2a>
 8013b3a:	fb02 3000 	mla	r0, r2, r0, r3
 8013b3e:	fb02 f909 	mul.w	r9, r2, r9
 8013b42:	e7f2      	b.n	8013b2a <Sscan::Float(char const*, char const*, float&)+0x7c>
 8013b44:	f7f3 fc0a 	bl	800735c <__aeabi_ui2f>
 8013b48:	4604      	mov	r4, r0
 8013b4a:	4648      	mov	r0, r9
 8013b4c:	f7f3 fc06 	bl	800735c <__aeabi_ui2f>
 8013b50:	4601      	mov	r1, r0
 8013b52:	4620      	mov	r0, r4
 8013b54:	f7f4 f8ea 	bl	8007d2c <__aeabi_fdiv>
 8013b58:	4629      	mov	r1, r5
 8013b5a:	f7f3 fb4f 	bl	80071fc <__addsf3>
 8013b5e:	f1b8 0f00 	cmp.w	r8, #0
 8013b62:	d101      	bne.n	8013b68 <Sscan::Float(char const*, char const*, float&)+0xba>
 8013b64:	6030      	str	r0, [r6, #0]
 8013b66:	e7d6      	b.n	8013b16 <Sscan::Float(char const*, char const*, float&)+0x68>
 8013b68:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8013b6c:	6030      	str	r0, [r6, #0]
 8013b6e:	e7b4      	b.n	8013ada <Sscan::Float(char const*, char const*, float&)+0x2c>
 8013b70:	2701      	movs	r7, #1
 8013b72:	e7b2      	b.n	8013ada <Sscan::Float(char const*, char const*, float&)+0x2c>

08013b74 <Sscan::HexUint16(char const*, char const*, unsigned short&)>:
 8013b74:	b538      	push	{r3, r4, r5, lr}
 8013b76:	4614      	mov	r4, r2
 8013b78:	f000 f8cb 	bl	8013d12 <Sscan::checkName(char const*, char const*)>
 8013b7c:	b908      	cbnz	r0, 8013b82 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xe>
 8013b7e:	2001      	movs	r0, #1
 8013b80:	bd38      	pop	{r3, r4, r5, pc}
 8013b82:	2100      	movs	r1, #0
 8013b84:	4602      	mov	r2, r0
 8013b86:	8021      	strh	r1, [r4, #0]
 8013b88:	5c50      	ldrb	r0, [r2, r1]
 8013b8a:	b1b0      	cbz	r0, 8013bba <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x46>
 8013b8c:	2904      	cmp	r1, #4
 8013b8e:	d018      	beq.n	8013bc2 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x4e>
 8013b90:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013b94:	2b09      	cmp	r3, #9
 8013b96:	d904      	bls.n	8013ba2 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x2e>
 8013b98:	f040 0520 	orr.w	r5, r0, #32
 8013b9c:	3d61      	subs	r5, #97	; 0x61
 8013b9e:	2d05      	cmp	r5, #5
 8013ba0:	d8ed      	bhi.n	8013b7e <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xa>
 8013ba2:	2839      	cmp	r0, #57	; 0x39
 8013ba4:	bf84      	itt	hi
 8013ba6:	f040 0320 	orrhi.w	r3, r0, #32
 8013baa:	3b57      	subhi	r3, #87	; 0x57
 8013bac:	8820      	ldrh	r0, [r4, #0]
 8013bae:	b2db      	uxtb	r3, r3
 8013bb0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8013bb4:	8023      	strh	r3, [r4, #0]
 8013bb6:	3101      	adds	r1, #1
 8013bb8:	e7e6      	b.n	8013b88 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x14>
 8013bba:	2904      	cmp	r1, #4
 8013bbc:	bf18      	it	ne
 8013bbe:	2002      	movne	r0, #2
 8013bc0:	e7de      	b.n	8013b80 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xc>
 8013bc2:	3820      	subs	r0, #32
 8013bc4:	bf18      	it	ne
 8013bc6:	2001      	movne	r0, #1
 8013bc8:	e7da      	b.n	8013b80 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xc>

08013bca <Sscan::IpAddress(char const*, char const*, unsigned int&)>:
 8013bca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013bcc:	4615      	mov	r5, r2
 8013bce:	f000 f8a0 	bl	8013d12 <Sscan::checkName(char const*, char const*)>
 8013bd2:	b3c0      	cbz	r0, 8013c46 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x7c>
 8013bd4:	2400      	movs	r4, #0
 8013bd6:	270a      	movs	r7, #10
 8013bd8:	ae01      	add	r6, sp, #4
 8013bda:	4603      	mov	r3, r0
 8013bdc:	2100      	movs	r1, #0
 8013bde:	f100 0c04 	add.w	ip, r0, #4
 8013be2:	4618      	mov	r0, r3
 8013be4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013be8:	2a2e      	cmp	r2, #46	; 0x2e
 8013bea:	d00e      	beq.n	8013c0a <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x40>
 8013bec:	b16a      	cbz	r2, 8013c0a <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x40>
 8013bee:	4560      	cmp	r0, ip
 8013bf0:	d102      	bne.n	8013bf8 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x2e>
 8013bf2:	2002      	movs	r0, #2
 8013bf4:	b003      	add	sp, #12
 8013bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013bf8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8013bfc:	2b09      	cmp	r3, #9
 8013bfe:	d8f8      	bhi.n	8013bf2 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 8013c00:	fb07 2101 	mla	r1, r7, r1, r2
 8013c04:	4603      	mov	r3, r0
 8013c06:	3930      	subs	r1, #48	; 0x30
 8013c08:	e7eb      	b.n	8013be2 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x18>
 8013c0a:	29ff      	cmp	r1, #255	; 0xff
 8013c0c:	d8f1      	bhi.n	8013bf2 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 8013c0e:	3401      	adds	r4, #1
 8013c10:	2c03      	cmp	r4, #3
 8013c12:	f806 1b01 	strb.w	r1, [r6], #1
 8013c16:	d1e0      	bne.n	8013bda <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x10>
 8013c18:	2400      	movs	r4, #0
 8013c1a:	220a      	movs	r2, #10
 8013c1c:	1d1e      	adds	r6, r3, #4
 8013c1e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8013c22:	f011 00df 	ands.w	r0, r1, #223	; 0xdf
 8013c26:	d007      	beq.n	8013c38 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x6e>
 8013c28:	429e      	cmp	r6, r3
 8013c2a:	d0e2      	beq.n	8013bf2 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 8013c2c:	3930      	subs	r1, #48	; 0x30
 8013c2e:	2909      	cmp	r1, #9
 8013c30:	d8df      	bhi.n	8013bf2 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 8013c32:	fb02 1404 	mla	r4, r2, r4, r1
 8013c36:	e7f2      	b.n	8013c1e <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x54>
 8013c38:	2cff      	cmp	r4, #255	; 0xff
 8013c3a:	d8da      	bhi.n	8013bf2 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 8013c3c:	f88d 4007 	strb.w	r4, [sp, #7]
 8013c40:	9b01      	ldr	r3, [sp, #4]
 8013c42:	602b      	str	r3, [r5, #0]
 8013c44:	e7d6      	b.n	8013bf4 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x2a>
 8013c46:	2001      	movs	r0, #1
 8013c48:	e7d4      	b.n	8013bf4 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x2a>

08013c4a <Sscan::Uint16(char const*, char const*, unsigned short&)>:
 8013c4a:	b538      	push	{r3, r4, r5, lr}
 8013c4c:	4615      	mov	r5, r2
 8013c4e:	f000 f860 	bl	8013d12 <Sscan::checkName(char const*, char const*)>
 8013c52:	b1a0      	cbz	r0, 8013c7e <Sscan::Uint16(char const*, char const*, unsigned short&)+0x34>
 8013c54:	4604      	mov	r4, r0
 8013c56:	2100      	movs	r1, #0
 8013c58:	220a      	movs	r2, #10
 8013c5a:	7823      	ldrb	r3, [r4, #0]
 8013c5c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8013c60:	2809      	cmp	r0, #9
 8013c62:	d80e      	bhi.n	8013c82 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 8013c64:	fb02 3101 	mla	r1, r2, r1, r3
 8013c68:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013c6c:	3930      	subs	r1, #48	; 0x30
 8013c6e:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 8013c72:	d1f2      	bne.n	8013c5a <Sscan::Uint16(char const*, char const*, unsigned short&)+0x10>
 8013c74:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8013c78:	d203      	bcs.n	8013c82 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 8013c7a:	8029      	strh	r1, [r5, #0]
 8013c7c:	bd38      	pop	{r3, r4, r5, pc}
 8013c7e:	2001      	movs	r0, #1
 8013c80:	e7fc      	b.n	8013c7c <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>
 8013c82:	2002      	movs	r0, #2
 8013c84:	e7fa      	b.n	8013c7c <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>

08013c86 <Sscan::Uint32(char const*, char const*, unsigned int&)>:
 8013c86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c88:	4615      	mov	r5, r2
 8013c8a:	f000 f842 	bl	8013d12 <Sscan::checkName(char const*, char const*)>
 8013c8e:	b1f8      	cbz	r0, 8013cd0 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4a>
 8013c90:	2300      	movs	r3, #0
 8013c92:	4604      	mov	r4, r0
 8013c94:	461e      	mov	r6, r3
 8013c96:	270a      	movs	r7, #10
 8013c98:	7822      	ldrb	r2, [r4, #0]
 8013c9a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8013c9e:	2909      	cmp	r1, #9
 8013ca0:	d818      	bhi.n	8013cd4 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4e>
 8013ca2:	fba3 3107 	umull	r3, r1, r3, r7
 8013ca6:	fb07 1106 	mla	r1, r7, r6, r1
 8013caa:	3b30      	subs	r3, #48	; 0x30
 8013cac:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 8013cb0:	18d3      	adds	r3, r2, r3
 8013cb2:	f141 0600 	adc.w	r6, r1, #0
 8013cb6:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8013cba:	f011 00df 	ands.w	r0, r1, #223	; 0xdf
 8013cbe:	d1eb      	bne.n	8013c98 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x12>
 8013cc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013cc4:	429a      	cmp	r2, r3
 8013cc6:	eb70 0206 	sbcs.w	r2, r0, r6
 8013cca:	d303      	bcc.n	8013cd4 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4e>
 8013ccc:	602b      	str	r3, [r5, #0]
 8013cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013cd0:	2001      	movs	r0, #1
 8013cd2:	e7fc      	b.n	8013cce <Sscan::Uint32(char const*, char const*, unsigned int&)+0x48>
 8013cd4:	2002      	movs	r0, #2
 8013cd6:	e7fa      	b.n	8013cce <Sscan::Uint32(char const*, char const*, unsigned int&)+0x48>

08013cd8 <Sscan::Uint8(char const*, char const*, unsigned char&)>:
 8013cd8:	b538      	push	{r3, r4, r5, lr}
 8013cda:	4615      	mov	r5, r2
 8013cdc:	f000 f819 	bl	8013d12 <Sscan::checkName(char const*, char const*)>
 8013ce0:	b198      	cbz	r0, 8013d0a <Sscan::Uint8(char const*, char const*, unsigned char&)+0x32>
 8013ce2:	4604      	mov	r4, r0
 8013ce4:	2100      	movs	r1, #0
 8013ce6:	220a      	movs	r2, #10
 8013ce8:	7823      	ldrb	r3, [r4, #0]
 8013cea:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8013cee:	2809      	cmp	r0, #9
 8013cf0:	d80d      	bhi.n	8013d0e <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 8013cf2:	fb02 3101 	mla	r1, r2, r1, r3
 8013cf6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013cfa:	3930      	subs	r1, #48	; 0x30
 8013cfc:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 8013d00:	d1f2      	bne.n	8013ce8 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x10>
 8013d02:	29ff      	cmp	r1, #255	; 0xff
 8013d04:	d803      	bhi.n	8013d0e <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 8013d06:	7029      	strb	r1, [r5, #0]
 8013d08:	bd38      	pop	{r3, r4, r5, pc}
 8013d0a:	2001      	movs	r0, #1
 8013d0c:	e7fc      	b.n	8013d08 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>
 8013d0e:	2002      	movs	r0, #2
 8013d10:	e7fa      	b.n	8013d08 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>

08013d12 <Sscan::checkName(char const*, char const*)>:
 8013d12:	4603      	mov	r3, r0
 8013d14:	b510      	push	{r4, lr}
 8013d16:	3901      	subs	r1, #1
 8013d18:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013d1c:	461c      	mov	r4, r3
 8013d1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013d22:	b120      	cbz	r0, 8013d2e <Sscan::checkName(char const*, char const*)+0x1c>
 8013d24:	b10a      	cbz	r2, 8013d2a <Sscan::checkName(char const*, char const*)+0x18>
 8013d26:	4290      	cmp	r0, r2
 8013d28:	d0f6      	beq.n	8013d18 <Sscan::checkName(char const*, char const*)+0x6>
 8013d2a:	2000      	movs	r0, #0
 8013d2c:	e006      	b.n	8013d3c <Sscan::checkName(char const*, char const*)+0x2a>
 8013d2e:	2a3d      	cmp	r2, #61	; 0x3d
 8013d30:	d104      	bne.n	8013d3c <Sscan::checkName(char const*, char const*)+0x2a>
 8013d32:	7860      	ldrb	r0, [r4, #1]
 8013d34:	f010 00df 	ands.w	r0, r0, #223	; 0xdf
 8013d38:	d000      	beq.n	8013d3c <Sscan::checkName(char const*, char const*)+0x2a>
 8013d3a:	1c60      	adds	r0, r4, #1
 8013d3c:	bd10      	pop	{r4, pc}
	...

08013d40 <Display::PrintInfo() [clone .isra.0]>:
 8013d40:	b910      	cbnz	r0, 8013d48 <Display::PrintInfo() [clone .isra.0]+0x8>
 8013d42:	4803      	ldr	r0, [pc, #12]	; (8013d50 <Display::PrintInfo() [clone .isra.0]+0x10>)
 8013d44:	f000 bd3d 	b.w	80147c2 <puts>
 8013d48:	6803      	ldr	r3, [r0, #0]
 8013d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d4c:	4718      	bx	r3
 8013d4e:	bf00      	nop
 8013d50:	08018782 	stmdaeq	r1, {r1, r7, r8, r9, sl, pc}

08013d54 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
 8013d54:	b513      	push	{r0, r1, r4, lr}
 8013d56:	4604      	mov	r4, r0
 8013d58:	0a13      	lsrs	r3, r2, #8
 8013d5a:	7800      	ldrb	r0, [r0, #0]
 8013d5c:	f88d 1004 	strb.w	r1, [sp, #4]
 8013d60:	f88d 3005 	strb.w	r3, [sp, #5]
 8013d64:	f88d 2006 	strb.w	r2, [sp, #6]
 8013d68:	f001 fc22 	bl	80155b0 <gd32_i2c_set_address(unsigned char)>
 8013d6c:	6860      	ldr	r0, [r4, #4]
 8013d6e:	f001 fc17 	bl	80155a0 <gd32_i2c_set_baudrate(unsigned int)>
 8013d72:	2103      	movs	r1, #3
 8013d74:	a801      	add	r0, sp, #4
 8013d76:	f001 fc21 	bl	80155bc <gd32_i2c_write(char const*, unsigned int)>
 8013d7a:	b002      	add	sp, #8
 8013d7c:	bd10      	pop	{r4, pc}

08013d7e <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
 8013d7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013d80:	460d      	mov	r5, r1
 8013d82:	4604      	mov	r4, r0
 8013d84:	f001 fc14 	bl	80155b0 <gd32_i2c_set_address(unsigned char)>
 8013d88:	4628      	mov	r0, r5
 8013d8a:	f001 fc09 	bl	80155a0 <gd32_i2c_set_baudrate(unsigned int)>
 8013d8e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8013d92:	2b07      	cmp	r3, #7
 8013d94:	d902      	bls.n	8013d9c <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x1e>
 8013d96:	3c50      	subs	r4, #80	; 0x50
 8013d98:	2c0f      	cmp	r4, #15
 8013d9a:	d809      	bhi.n	8013db0 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x32>
 8013d9c:	2101      	movs	r1, #1
 8013d9e:	f10d 0007 	add.w	r0, sp, #7
 8013da2:	f001 fc71 	bl	8015688 <gd32_i2c_read(char*, unsigned int)>
 8013da6:	fab0 f080 	clz	r0, r0
 8013daa:	0940      	lsrs	r0, r0, #5
 8013dac:	b003      	add	sp, #12
 8013dae:	bd30      	pop	{r4, r5, pc}
 8013db0:	2100      	movs	r1, #0
 8013db2:	4608      	mov	r0, r1
 8013db4:	f001 fc02 	bl	80155bc <gd32_i2c_write(char const*, unsigned int)>
 8013db8:	e7f5      	b.n	8013da6 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x28>

08013dba <Display::Detect7Segment()>:
 8013dba:	b538      	push	{r3, r4, r5, lr}
 8013dbc:	68c1      	ldr	r1, [r0, #12]
 8013dbe:	4604      	mov	r4, r0
 8013dc0:	7a00      	ldrb	r0, [r0, #8]
 8013dc2:	f7ff ffdc 	bl	8013d7e <HAL_I2C::IsConnected_(unsigned char, unsigned int)>
 8013dc6:	7460      	strb	r0, [r4, #17]
 8013dc8:	b170      	cbz	r0, 8013de8 <Display::Detect7Segment()+0x2e>
 8013dca:	2200      	movs	r2, #0
 8013dcc:	f104 0508 	add.w	r5, r4, #8
 8013dd0:	4611      	mov	r1, r2
 8013dd2:	4628      	mov	r0, r5
 8013dd4:	f7ff ffbe 	bl	8013d54 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8013dd8:	7c63      	ldrb	r3, [r4, #17]
 8013dda:	b12b      	cbz	r3, 8013de8 <Display::Detect7Segment()+0x2e>
 8013ddc:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 8013de0:	2112      	movs	r1, #18
 8013de2:	4628      	mov	r0, r5
 8013de4:	f7ff ffb6 	bl	8013d54 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8013de8:	bd38      	pop	{r3, r4, r5, pc}

08013dea <Display::Detect(display::Type)>:
 8013dea:	2902      	cmp	r1, #2
 8013dec:	b538      	push	{r3, r4, r5, lr}
 8013dee:	4604      	mov	r4, r0
 8013df0:	d014      	beq.n	8013e1c <Display::Detect(display::Type)+0x32>
 8013df2:	2904      	cmp	r1, #4
 8013df4:	d01b      	beq.n	8013e2e <Display::Detect(display::Type)+0x44>
 8013df6:	69a0      	ldr	r0, [r4, #24]
 8013df8:	b168      	cbz	r0, 8013e16 <Display::Detect(display::Type)+0x2c>
 8013dfa:	6803      	ldr	r3, [r0, #0]
 8013dfc:	689b      	ldr	r3, [r3, #8]
 8013dfe:	4798      	blx	r3
 8013e00:	4603      	mov	r3, r0
 8013e02:	69a0      	ldr	r0, [r4, #24]
 8013e04:	b9ab      	cbnz	r3, 8013e32 <Display::Detect(display::Type)+0x48>
 8013e06:	b110      	cbz	r0, 8013e0e <Display::Detect(display::Type)+0x24>
 8013e08:	6803      	ldr	r3, [r0, #0]
 8013e0a:	685b      	ldr	r3, [r3, #4]
 8013e0c:	4798      	blx	r3
 8013e0e:	2300      	movs	r3, #0
 8013e10:	61a3      	str	r3, [r4, #24]
 8013e12:	2304      	movs	r3, #4
 8013e14:	6023      	str	r3, [r4, #0]
 8013e16:	2300      	movs	r3, #0
 8013e18:	6163      	str	r3, [r4, #20]
 8013e1a:	e010      	b.n	8013e3e <Display::Detect(display::Type)+0x54>
 8013e1c:	2018      	movs	r0, #24
 8013e1e:	f000 fbd5 	bl	80145cc <operator new(unsigned int)>
 8013e22:	4605      	mov	r5, r0
 8013e24:	2100      	movs	r1, #0
 8013e26:	f000 f89b 	bl	8013f60 <Ssd1306::Ssd1306(TOledPanel)>
 8013e2a:	61a5      	str	r5, [r4, #24]
 8013e2c:	e7e3      	b.n	8013df6 <Display::Detect(display::Type)+0xc>
 8013e2e:	6001      	str	r1, [r0, #0]
 8013e30:	e7e1      	b.n	8013df6 <Display::Detect(display::Type)+0xc>
 8013e32:	6803      	ldr	r3, [r0, #0]
 8013e34:	68db      	ldr	r3, [r3, #12]
 8013e36:	4798      	blx	r3
 8013e38:	69a3      	ldr	r3, [r4, #24]
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d0eb      	beq.n	8013e16 <Display::Detect(display::Type)+0x2c>
 8013e3e:	bd38      	pop	{r3, r4, r5, pc}

08013e40 <Display::Display()>:
 8013e40:	2304      	movs	r3, #4
 8013e42:	b510      	push	{r4, lr}
 8013e44:	6003      	str	r3, [r0, #0]
 8013e46:	4b0d      	ldr	r3, [pc, #52]	; (8013e7c <Display::Display()+0x3c>)
 8013e48:	4604      	mov	r4, r0
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	4a0c      	ldr	r2, [pc, #48]	; (8013e80 <Display::Display()+0x40>)
 8013e4e:	6043      	str	r3, [r0, #4]
 8013e50:	2321      	movs	r3, #33	; 0x21
 8013e52:	7203      	strb	r3, [r0, #8]
 8013e54:	4b0b      	ldr	r3, [pc, #44]	; (8013e84 <Display::Display()+0x44>)
 8013e56:	2102      	movs	r1, #2
 8013e58:	60c3      	str	r3, [r0, #12]
 8013e5a:	2300      	movs	r3, #0
 8013e5c:	e9c0 2305 	strd	r2, r3, [r0, #20]
 8013e60:	8203      	strh	r3, [r0, #16]
 8013e62:	4b09      	ldr	r3, [pc, #36]	; (8013e88 <Display::Display()+0x48>)
 8013e64:	6018      	str	r0, [r3, #0]
 8013e66:	f7ff ffc0 	bl	8013dea <Display::Detect(display::Type)>
 8013e6a:	4620      	mov	r0, r4
 8013e6c:	f7ff ffa5 	bl	8013dba <Display::Detect7Segment()>
 8013e70:	69a0      	ldr	r0, [r4, #24]
 8013e72:	f7ff ff65 	bl	8013d40 <Display::PrintInfo() [clone .isra.0]>
 8013e76:	4620      	mov	r0, r4
 8013e78:	bd10      	pop	{r4, pc}
 8013e7a:	bf00      	nop
 8013e7c:	2000a9dc 	ldrdcs	sl, [r0], -ip
 8013e80:	000493e0 	andeq	r9, r4, r0, ror #7
 8013e84:	00061a80 	andeq	r1, r6, r0, lsl #21
 8013e88:	2000a8d4 	ldrdcs	sl, [r0], -r4

08013e8c <Ssd1306::~Ssd1306()>:
 8013e8c:	4770      	bx	lr

08013e8e <Ssd1306::SetCursor(unsigned int)>:
 8013e8e:	4770      	bx	lr

08013e90 <Ssd1306::PrintInfo()>:
 8013e90:	b410      	push	{r4}
 8013e92:	4906      	ldr	r1, [pc, #24]	; (8013eac <Ssd1306::PrintInfo()+0x1c>)
 8013e94:	7c44      	ldrb	r4, [r0, #17]
 8013e96:	7903      	ldrb	r3, [r0, #4]
 8013e98:	7942      	ldrb	r2, [r0, #5]
 8013e9a:	4805      	ldr	r0, [pc, #20]	; (8013eb0 <Ssd1306::PrintInfo()+0x20>)
 8013e9c:	2c00      	cmp	r4, #0
 8013e9e:	bf08      	it	eq
 8013ea0:	4601      	moveq	r1, r0
 8013ea2:	4804      	ldr	r0, [pc, #16]	; (8013eb4 <Ssd1306::PrintInfo()+0x24>)
 8013ea4:	bc10      	pop	{r4}
 8013ea6:	f7f4 bf09 	b.w	8008cbc <printf>
 8013eaa:	bf00      	nop
 8013eac:	08018793 	stmdaeq	r1, {r0, r1, r4, r7, r8, r9, sl, pc}
 8013eb0:	0801879a 	stmdaeq	r1, {r1, r3, r4, r7, r8, r9, sl, pc}
 8013eb4:	080187a2 	stmdaeq	r1, {r1, r5, r7, r8, r9, sl, pc}

08013eb8 <Ssd1306::~Ssd1306()>:
 8013eb8:	b510      	push	{r4, lr}
 8013eba:	4604      	mov	r4, r0
 8013ebc:	f000 fb82 	bl	80145c4 <operator delete(void*)>
 8013ec0:	4620      	mov	r0, r4
 8013ec2:	bd10      	pop	{r4, pc}

08013ec4 <HAL_I2C::Setup()>:
 8013ec4:	b510      	push	{r4, lr}
 8013ec6:	4604      	mov	r4, r0
 8013ec8:	7800      	ldrb	r0, [r0, #0]
 8013eca:	f001 fb71 	bl	80155b0 <gd32_i2c_set_address(unsigned char)>
 8013ece:	6860      	ldr	r0, [r4, #4]
 8013ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ed4:	f001 bb64 	b.w	80155a0 <gd32_i2c_set_baudrate(unsigned int)>

08013ed8 <Ssd1306::PutChar(int)>:
 8013ed8:	b510      	push	{r4, lr}
 8013eda:	f1a1 0420 	sub.w	r4, r1, #32
 8013ede:	2c5f      	cmp	r4, #95	; 0x5f
 8013ee0:	bf88      	it	hi
 8013ee2:	2400      	movhi	r4, #0
 8013ee4:	3008      	adds	r0, #8
 8013ee6:	f7ff ffed 	bl	8013ec4 <HAL_I2C::Setup()>
 8013eea:	4804      	ldr	r0, [pc, #16]	; (8013efc <Ssd1306::PutChar(int)+0x24>)
 8013eec:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8013ef0:	4420      	add	r0, r4
 8013ef2:	2107      	movs	r1, #7
 8013ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ef8:	f001 bb60 	b.w	80155bc <gd32_i2c_write(char const*, unsigned int)>
 8013efc:	080187b4 	stmdaeq	r1, {r2, r4, r5, r7, r8, r9, sl, pc}

08013f00 <Ssd1306::PutString(char const*)>:
 8013f00:	b538      	push	{r3, r4, r5, lr}
 8013f02:	4605      	mov	r5, r0
 8013f04:	1e4c      	subs	r4, r1, #1
 8013f06:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8013f0a:	b119      	cbz	r1, 8013f14 <Ssd1306::PutString(char const*)+0x14>
 8013f0c:	4628      	mov	r0, r5
 8013f0e:	f7ff ffe3 	bl	8013ed8 <Ssd1306::PutChar(int)>
 8013f12:	e7f8      	b.n	8013f06 <Ssd1306::PutString(char const*)+0x6>
 8013f14:	bd38      	pop	{r3, r4, r5, pc}

08013f16 <Ssd1306::Text(char const*, unsigned int)>:
 8013f16:	b570      	push	{r4, r5, r6, lr}
 8013f18:	7903      	ldrb	r3, [r0, #4]
 8013f1a:	4605      	mov	r5, r0
 8013f1c:	460c      	mov	r4, r1
 8013f1e:	4293      	cmp	r3, r2
 8013f20:	bf94      	ite	ls
 8013f22:	18ce      	addls	r6, r1, r3
 8013f24:	188e      	addhi	r6, r1, r2
 8013f26:	42b4      	cmp	r4, r6
 8013f28:	d005      	beq.n	8013f36 <Ssd1306::Text(char const*, unsigned int)+0x20>
 8013f2a:	4628      	mov	r0, r5
 8013f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f30:	f7ff ffd2 	bl	8013ed8 <Ssd1306::PutChar(int)>
 8013f34:	e7f7      	b.n	8013f26 <Ssd1306::Text(char const*, unsigned int)+0x10>
 8013f36:	bd70      	pop	{r4, r5, r6, pc}

08013f38 <Ssd1306::InitMembers()>:
 8013f38:	7c03      	ldrb	r3, [r0, #16]
 8013f3a:	b12b      	cbz	r3, 8013f48 <Ssd1306::InitMembers()+0x10>
 8013f3c:	3b01      	subs	r3, #1
 8013f3e:	2b01      	cmp	r3, #1
 8013f40:	d908      	bls.n	8013f54 <Ssd1306::InitMembers()+0x1c>
 8013f42:	f640 0315 	movw	r3, #2069	; 0x815
 8013f46:	e007      	b.n	8013f58 <Ssd1306::InitMembers()+0x20>
 8013f48:	f640 0315 	movw	r3, #2069	; 0x815
 8013f4c:	8083      	strh	r3, [r0, #4]
 8013f4e:	2308      	movs	r3, #8
 8013f50:	6143      	str	r3, [r0, #20]
 8013f52:	4770      	bx	lr
 8013f54:	f240 4315 	movw	r3, #1045	; 0x415
 8013f58:	8083      	strh	r3, [r0, #4]
 8013f5a:	2304      	movs	r3, #4
 8013f5c:	e7f8      	b.n	8013f50 <Ssd1306::InitMembers()+0x18>
	...

08013f60 <Ssd1306::Ssd1306(TOledPanel)>:
 8013f60:	4a08      	ldr	r2, [pc, #32]	; (8013f84 <Ssd1306::Ssd1306(TOledPanel)+0x24>)
 8013f62:	b508      	push	{r3, lr}
 8013f64:	6002      	str	r2, [r0, #0]
 8013f66:	227f      	movs	r2, #127	; 0x7f
 8013f68:	80c2      	strh	r2, [r0, #6]
 8013f6a:	223c      	movs	r2, #60	; 0x3c
 8013f6c:	7202      	strb	r2, [r0, #8]
 8013f6e:	4a06      	ldr	r2, [pc, #24]	; (8013f88 <Ssd1306::Ssd1306(TOledPanel)+0x28>)
 8013f70:	7401      	strb	r1, [r0, #16]
 8013f72:	60c2      	str	r2, [r0, #12]
 8013f74:	2200      	movs	r2, #0
 8013f76:	7442      	strb	r2, [r0, #17]
 8013f78:	4a04      	ldr	r2, [pc, #16]	; (8013f8c <Ssd1306::Ssd1306(TOledPanel)+0x2c>)
 8013f7a:	6010      	str	r0, [r2, #0]
 8013f7c:	f7ff ffdc 	bl	8013f38 <Ssd1306::InitMembers()>
 8013f80:	bd08      	pop	{r3, pc}
 8013f82:	bf00      	nop
 8013f84:	08018a8c 	stmdaeq	r1, {r2, r3, r7, r9, fp, pc}
 8013f88:	00061a80 	andeq	r1, r6, r0, lsl #21
 8013f8c:	2000a960 	andcs	sl, r0, r0, ror #18

08013f90 <Ssd1306::SendCommand(unsigned char)>:
 8013f90:	2300      	movs	r3, #0
 8013f92:	b507      	push	{r0, r1, r2, lr}
 8013f94:	3008      	adds	r0, #8
 8013f96:	f88d 3004 	strb.w	r3, [sp, #4]
 8013f9a:	f88d 1005 	strb.w	r1, [sp, #5]
 8013f9e:	f7ff ff91 	bl	8013ec4 <HAL_I2C::Setup()>
 8013fa2:	2102      	movs	r1, #2
 8013fa4:	a801      	add	r0, sp, #4
 8013fa6:	f001 fb09 	bl	80155bc <gd32_i2c_write(char const*, unsigned int)>
 8013faa:	b003      	add	sp, #12
 8013fac:	f85d fb04 	ldr.w	pc, [sp], #4

08013fb0 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>:
 8013fb0:	2914      	cmp	r1, #20
 8013fb2:	b570      	push	{r4, r5, r6, lr}
 8013fb4:	4605      	mov	r5, r0
 8013fb6:	4616      	mov	r6, r2
 8013fb8:	d81c      	bhi.n	8013ff4 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 8013fba:	7943      	ldrb	r3, [r0, #5]
 8013fbc:	4293      	cmp	r3, r2
 8013fbe:	d919      	bls.n	8013ff4 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 8013fc0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8013fc4:	7c43      	ldrb	r3, [r0, #17]
 8013fc6:	004c      	lsls	r4, r1, #1
 8013fc8:	b2e4      	uxtb	r4, r4
 8013fca:	b10b      	cbz	r3, 8013fd0 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x20>
 8013fcc:	3404      	adds	r4, #4
 8013fce:	b2e4      	uxtb	r4, r4
 8013fd0:	4628      	mov	r0, r5
 8013fd2:	f004 010e 	and.w	r1, r4, #14
 8013fd6:	f7ff ffdb 	bl	8013f90 <Ssd1306::SendCommand(unsigned char)>
 8013fda:	0921      	lsrs	r1, r4, #4
 8013fdc:	4628      	mov	r0, r5
 8013fde:	f041 0110 	orr.w	r1, r1, #16
 8013fe2:	f7ff ffd5 	bl	8013f90 <Ssd1306::SendCommand(unsigned char)>
 8013fe6:	4628      	mov	r0, r5
 8013fe8:	f046 01b0 	orr.w	r1, r6, #176	; 0xb0
 8013fec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ff0:	f7ff bfce 	b.w	8013f90 <Ssd1306::SendCommand(unsigned char)>
 8013ff4:	bd70      	pop	{r4, r5, r6, pc}

08013ff6 <Ssd1306::TextLine(unsigned char, char const*, unsigned int)>:
 8013ff6:	b570      	push	{r4, r5, r6, lr}
 8013ff8:	4604      	mov	r4, r0
 8013ffa:	4615      	mov	r5, r2
 8013ffc:	461e      	mov	r6, r3
 8013ffe:	b171      	cbz	r1, 801401e <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x28>
 8014000:	7943      	ldrb	r3, [r0, #5]
 8014002:	428b      	cmp	r3, r1
 8014004:	d30b      	bcc.n	801401e <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x28>
 8014006:	3901      	subs	r1, #1
 8014008:	b2ca      	uxtb	r2, r1
 801400a:	2100      	movs	r1, #0
 801400c:	f7ff ffd0 	bl	8013fb0 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8014010:	4632      	mov	r2, r6
 8014012:	4629      	mov	r1, r5
 8014014:	4620      	mov	r0, r4
 8014016:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801401a:	f7ff bf7c 	b.w	8013f16 <Ssd1306::Text(char const*, unsigned int)>
 801401e:	bd70      	pop	{r4, r5, r6, pc}

08014020 <Ssd1306::ClearLine(unsigned char)>:
 8014020:	b538      	push	{r3, r4, r5, lr}
 8014022:	4605      	mov	r5, r0
 8014024:	b1b9      	cbz	r1, 8014056 <Ssd1306::ClearLine(unsigned char)+0x36>
 8014026:	7943      	ldrb	r3, [r0, #5]
 8014028:	428b      	cmp	r3, r1
 801402a:	d314      	bcc.n	8014056 <Ssd1306::ClearLine(unsigned char)+0x36>
 801402c:	3901      	subs	r1, #1
 801402e:	b2cc      	uxtb	r4, r1
 8014030:	4622      	mov	r2, r4
 8014032:	2100      	movs	r1, #0
 8014034:	f7ff ffbc 	bl	8013fb0 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8014038:	f105 0008 	add.w	r0, r5, #8
 801403c:	f7ff ff42 	bl	8013ec4 <HAL_I2C::Setup()>
 8014040:	2181      	movs	r1, #129	; 0x81
 8014042:	4805      	ldr	r0, [pc, #20]	; (8014058 <Ssd1306::ClearLine(unsigned char)+0x38>)
 8014044:	f001 faba 	bl	80155bc <gd32_i2c_write(char const*, unsigned int)>
 8014048:	4622      	mov	r2, r4
 801404a:	4628      	mov	r0, r5
 801404c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014050:	2100      	movs	r1, #0
 8014052:	f7ff bfad 	b.w	8013fb0 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8014056:	bd38      	pop	{r3, r4, r5, pc}
 8014058:	2000a8d8 	ldrdcs	sl, [r0], -r8

0801405c <Ssd1306::SetSleep(bool)>:
 801405c:	b111      	cbz	r1, 8014064 <Ssd1306::SetSleep(bool)+0x8>
 801405e:	21ae      	movs	r1, #174	; 0xae
 8014060:	f7ff bf96 	b.w	8013f90 <Ssd1306::SendCommand(unsigned char)>
 8014064:	21af      	movs	r1, #175	; 0xaf
 8014066:	e7fb      	b.n	8014060 <Ssd1306::SetSleep(bool)+0x4>

08014068 <Ssd1306::SetContrast(unsigned char)>:
 8014068:	b538      	push	{r3, r4, r5, lr}
 801406a:	4604      	mov	r4, r0
 801406c:	460d      	mov	r5, r1
 801406e:	7181      	strb	r1, [r0, #6]
 8014070:	2181      	movs	r1, #129	; 0x81
 8014072:	f7ff ff8d 	bl	8013f90 <Ssd1306::SendCommand(unsigned char)>
 8014076:	4629      	mov	r1, r5
 8014078:	4620      	mov	r0, r4
 801407a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801407e:	f7ff bf87 	b.w	8013f90 <Ssd1306::SendCommand(unsigned char)>

08014082 <Ssd1306::SetFlipVertically(bool)>:
 8014082:	b510      	push	{r4, lr}
 8014084:	4604      	mov	r4, r0
 8014086:	71c1      	strb	r1, [r0, #7]
 8014088:	b141      	cbz	r1, 801409c <Ssd1306::SetFlipVertically(bool)+0x1a>
 801408a:	21c0      	movs	r1, #192	; 0xc0
 801408c:	f7ff ff80 	bl	8013f90 <Ssd1306::SendCommand(unsigned char)>
 8014090:	21a0      	movs	r1, #160	; 0xa0
 8014092:	4620      	mov	r0, r4
 8014094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014098:	f7ff bf7a 	b.w	8013f90 <Ssd1306::SendCommand(unsigned char)>
 801409c:	21c8      	movs	r1, #200	; 0xc8
 801409e:	f7ff ff77 	bl	8013f90 <Ssd1306::SendCommand(unsigned char)>
 80140a2:	21a1      	movs	r1, #161	; 0xa1
 80140a4:	e7f5      	b.n	8014092 <Ssd1306::SetFlipVertically(bool)+0x10>
	...

080140a8 <Ssd1306::CheckSH1106()>:
 80140a8:	b570      	push	{r4, r5, r6, lr}
 80140aa:	4604      	mov	r4, r0
 80140ac:	b086      	sub	sp, #24
 80140ae:	2100      	movs	r1, #0
 80140b0:	f7ff ff6e 	bl	8013f90 <Ssd1306::SendCommand(unsigned char)>
 80140b4:	2190      	movs	r1, #144	; 0x90
 80140b6:	4620      	mov	r0, r4
 80140b8:	f7ff ff6a 	bl	8013f90 <Ssd1306::SendCommand(unsigned char)>
 80140bc:	21b0      	movs	r1, #176	; 0xb0
 80140be:	4620      	mov	r0, r4
 80140c0:	f7ff ff66 	bl	8013f90 <Ssd1306::SendCommand(unsigned char)>
 80140c4:	4b22      	ldr	r3, [pc, #136]	; (8014150 <Ssd1306::CheckSH1106()+0xa8>)
 80140c6:	f104 0608 	add.w	r6, r4, #8
 80140ca:	6818      	ldr	r0, [r3, #0]
 80140cc:	791b      	ldrb	r3, [r3, #4]
 80140ce:	ad02      	add	r5, sp, #8
 80140d0:	9002      	str	r0, [sp, #8]
 80140d2:	4630      	mov	r0, r6
 80140d4:	712b      	strb	r3, [r5, #4]
 80140d6:	f7ff fef5 	bl	8013ec4 <HAL_I2C::Setup()>
 80140da:	2105      	movs	r1, #5
 80140dc:	4628      	mov	r0, r5
 80140de:	f001 fa6d 	bl	80155bc <gd32_i2c_write(char const*, unsigned int)>
 80140e2:	2100      	movs	r1, #0
 80140e4:	4620      	mov	r0, r4
 80140e6:	f7ff ff53 	bl	8013f90 <Ssd1306::SendCommand(unsigned char)>
 80140ea:	2190      	movs	r1, #144	; 0x90
 80140ec:	4620      	mov	r0, r4
 80140ee:	f7ff ff4f 	bl	8013f90 <Ssd1306::SendCommand(unsigned char)>
 80140f2:	21b0      	movs	r1, #176	; 0xb0
 80140f4:	4620      	mov	r0, r4
 80140f6:	f7ff ff4b 	bl	8013f90 <Ssd1306::SendCommand(unsigned char)>
 80140fa:	2300      	movs	r3, #0
 80140fc:	9304      	str	r3, [sp, #16]
 80140fe:	f88d 3014 	strb.w	r3, [sp, #20]
 8014102:	2340      	movs	r3, #64	; 0x40
 8014104:	4630      	mov	r0, r6
 8014106:	f88d 3007 	strb.w	r3, [sp, #7]
 801410a:	f7ff fedb 	bl	8013ec4 <HAL_I2C::Setup()>
 801410e:	2101      	movs	r1, #1
 8014110:	f10d 0007 	add.w	r0, sp, #7
 8014114:	f001 fa52 	bl	80155bc <gd32_i2c_write(char const*, unsigned int)>
 8014118:	4630      	mov	r0, r6
 801411a:	f7ff fed3 	bl	8013ec4 <HAL_I2C::Setup()>
 801411e:	2105      	movs	r1, #5
 8014120:	a804      	add	r0, sp, #16
 8014122:	f001 fab1 	bl	8015688 <gd32_i2c_read(char*, unsigned int)>
 8014126:	2201      	movs	r2, #1
 8014128:	5cab      	ldrb	r3, [r5, r2]
 801412a:	a904      	add	r1, sp, #16
 801412c:	3201      	adds	r2, #1
 801412e:	4411      	add	r1, r2
 8014130:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 8014134:	428b      	cmp	r3, r1
 8014136:	d006      	beq.n	8014146 <Ssd1306::CheckSH1106()+0x9e>
 8014138:	1a5b      	subs	r3, r3, r1
 801413a:	fab3 f383 	clz	r3, r3
 801413e:	095b      	lsrs	r3, r3, #5
 8014140:	7463      	strb	r3, [r4, #17]
 8014142:	b006      	add	sp, #24
 8014144:	bd70      	pop	{r4, r5, r6, pc}
 8014146:	2a05      	cmp	r2, #5
 8014148:	d1ee      	bne.n	8014128 <Ssd1306::CheckSH1106()+0x80>
 801414a:	2300      	movs	r3, #0
 801414c:	e7f5      	b.n	801413a <Ssd1306::CheckSH1106()+0x92>
 801414e:	bf00      	nop
 8014150:	080187ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, r9, sl, pc}

08014154 <Ssd1306::Cls()>:
 8014154:	7c43      	ldrb	r3, [r0, #17]
 8014156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801415a:	2b00      	cmp	r3, #0
 801415c:	bf0c      	ite	eq
 801415e:	2500      	moveq	r5, #0
 8014160:	2504      	movne	r5, #4
 8014162:	4604      	mov	r4, r0
 8014164:	2600      	movs	r6, #0
 8014166:	f1a5 077f 	sub.w	r7, r5, #127	; 0x7f
 801416a:	f045 0810 	orr.w	r8, r5, #16
 801416e:	b2ff      	uxtb	r7, r7
 8014170:	6963      	ldr	r3, [r4, #20]
 8014172:	4629      	mov	r1, r5
 8014174:	42b3      	cmp	r3, r6
 8014176:	4620      	mov	r0, r4
 8014178:	d91b      	bls.n	80141b2 <Ssd1306::Cls()+0x5e>
 801417a:	f7ff ff09 	bl	8013f90 <Ssd1306::SendCommand(unsigned char)>
 801417e:	4641      	mov	r1, r8
 8014180:	4620      	mov	r0, r4
 8014182:	f7ff ff05 	bl	8013f90 <Ssd1306::SendCommand(unsigned char)>
 8014186:	f066 014f 	orn	r1, r6, #79	; 0x4f
 801418a:	4620      	mov	r0, r4
 801418c:	b2c9      	uxtb	r1, r1
 801418e:	f7ff feff 	bl	8013f90 <Ssd1306::SendCommand(unsigned char)>
 8014192:	7c23      	ldrb	r3, [r4, #16]
 8014194:	b123      	cbz	r3, 80141a0 <Ssd1306::Cls()+0x4c>
 8014196:	3b01      	subs	r3, #1
 8014198:	2b01      	cmp	r3, #1
 801419a:	d901      	bls.n	80141a0 <Ssd1306::Cls()+0x4c>
 801419c:	3601      	adds	r6, #1
 801419e:	e7e7      	b.n	8014170 <Ssd1306::Cls()+0x1c>
 80141a0:	f104 0008 	add.w	r0, r4, #8
 80141a4:	f7ff fe8e 	bl	8013ec4 <HAL_I2C::Setup()>
 80141a8:	4639      	mov	r1, r7
 80141aa:	4808      	ldr	r0, [pc, #32]	; (80141cc <Ssd1306::Cls()+0x78>)
 80141ac:	f001 fa06 	bl	80155bc <gd32_i2c_write(char const*, unsigned int)>
 80141b0:	e7f4      	b.n	801419c <Ssd1306::Cls()+0x48>
 80141b2:	f7ff feed 	bl	8013f90 <Ssd1306::SendCommand(unsigned char)>
 80141b6:	4641      	mov	r1, r8
 80141b8:	4620      	mov	r0, r4
 80141ba:	f7ff fee9 	bl	8013f90 <Ssd1306::SendCommand(unsigned char)>
 80141be:	4620      	mov	r0, r4
 80141c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80141c4:	21b0      	movs	r1, #176	; 0xb0
 80141c6:	f7ff bee3 	b.w	8013f90 <Ssd1306::SendCommand(unsigned char)>
 80141ca:	bf00      	nop
 80141cc:	2000a8d8 	ldrdcs	sl, [r0], -r8

080141d0 <Ssd1306::Start()>:
 80141d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80141d2:	7a04      	ldrb	r4, [r0, #8]
 80141d4:	68c6      	ldr	r6, [r0, #12]
 80141d6:	4605      	mov	r5, r0
 80141d8:	4620      	mov	r0, r4
 80141da:	f001 f9e9 	bl	80155b0 <gd32_i2c_set_address(unsigned char)>
 80141de:	4630      	mov	r0, r6
 80141e0:	f001 f9de 	bl	80155a0 <gd32_i2c_set_baudrate(unsigned int)>
 80141e4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80141e8:	2b07      	cmp	r3, #7
 80141ea:	d902      	bls.n	80141f2 <Ssd1306::Start()+0x22>
 80141ec:	3c50      	subs	r4, #80	; 0x50
 80141ee:	2c0f      	cmp	r4, #15
 80141f0:	d80f      	bhi.n	8014212 <Ssd1306::Start()+0x42>
 80141f2:	2101      	movs	r1, #1
 80141f4:	f10d 0007 	add.w	r0, sp, #7
 80141f8:	f001 fa46 	bl	8015688 <gd32_i2c_read(char*, unsigned int)>
 80141fc:	fab0 f480 	clz	r4, r0
 8014200:	0964      	lsrs	r4, r4, #5
 8014202:	b35c      	cbz	r4, 801425c <Ssd1306::Start()+0x8c>
 8014204:	7c2e      	ldrb	r6, [r5, #16]
 8014206:	b14e      	cbz	r6, 801421c <Ssd1306::Start()+0x4c>
 8014208:	3e01      	subs	r6, #1
 801420a:	2e01      	cmp	r6, #1
 801420c:	d929      	bls.n	8014262 <Ssd1306::Start()+0x92>
 801420e:	2400      	movs	r4, #0
 8014210:	e024      	b.n	801425c <Ssd1306::Start()+0x8c>
 8014212:	2100      	movs	r1, #0
 8014214:	4608      	mov	r0, r1
 8014216:	f001 f9d1 	bl	80155bc <gd32_i2c_write(char const*, unsigned int)>
 801421a:	e7ef      	b.n	80141fc <Ssd1306::Start()+0x2c>
 801421c:	4f16      	ldr	r7, [pc, #88]	; (8014278 <Ssd1306::Start()+0xa8>)
 801421e:	4628      	mov	r0, r5
 8014220:	f817 1b01 	ldrb.w	r1, [r7], #1
 8014224:	3601      	adds	r6, #1
 8014226:	f7ff feb3 	bl	8013f90 <Ssd1306::SendCommand(unsigned char)>
 801422a:	2e18      	cmp	r6, #24
 801422c:	d1f7      	bne.n	801421e <Ssd1306::Start()+0x4e>
 801422e:	2300      	movs	r3, #0
 8014230:	4a12      	ldr	r2, [pc, #72]	; (801427c <Ssd1306::Start()+0xac>)
 8014232:	4618      	mov	r0, r3
 8014234:	4611      	mov	r1, r2
 8014236:	3301      	adds	r3, #1
 8014238:	2b86      	cmp	r3, #134	; 0x86
 801423a:	f802 0b01 	strb.w	r0, [r2], #1
 801423e:	d1fa      	bne.n	8014236 <Ssd1306::Start()+0x66>
 8014240:	2340      	movs	r3, #64	; 0x40
 8014242:	4628      	mov	r0, r5
 8014244:	700b      	strb	r3, [r1, #0]
 8014246:	f7ff ff2f 	bl	80140a8 <Ssd1306::CheckSH1106()>
 801424a:	4628      	mov	r0, r5
 801424c:	f7ff ff82 	bl	8014154 <Ssd1306::Cls()>
 8014250:	21af      	movs	r1, #175	; 0xaf
 8014252:	4628      	mov	r0, r5
 8014254:	f7ff fe9c 	bl	8013f90 <Ssd1306::SendCommand(unsigned char)>
 8014258:	2301      	movs	r3, #1
 801425a:	71eb      	strb	r3, [r5, #7]
 801425c:	4620      	mov	r0, r4
 801425e:	b003      	add	sp, #12
 8014260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014262:	2600      	movs	r6, #0
 8014264:	4f06      	ldr	r7, [pc, #24]	; (8014280 <Ssd1306::Start()+0xb0>)
 8014266:	4628      	mov	r0, r5
 8014268:	f817 1b01 	ldrb.w	r1, [r7], #1
 801426c:	3601      	adds	r6, #1
 801426e:	f7ff fe8f 	bl	8013f90 <Ssd1306::SendCommand(unsigned char)>
 8014272:	2e18      	cmp	r6, #24
 8014274:	d1f7      	bne.n	8014266 <Ssd1306::Start()+0x96>
 8014276:	e7da      	b.n	801422e <Ssd1306::Start()+0x5e>
 8014278:	08018a6c 	stmdaeq	r1, {r2, r3, r5, r6, r9, fp, pc}
 801427c:	2000a8d8 	ldrdcs	sl, [r0], -r8
 8014280:	08018a54 	stmdaeq	r1, {r2, r4, r6, r9, fp, pc}

08014284 <console_init>:
 8014284:	b508      	push	{r3, lr}
 8014286:	f000 fb8f 	bl	80149a8 <uart0_init>
 801428a:	4804      	ldr	r0, [pc, #16]	; (801429c <console_init+0x18>)
 801428c:	f000 fbbc 	bl	8014a08 <uart0_puts>
 8014290:	4803      	ldr	r0, [pc, #12]	; (80142a0 <console_init+0x1c>)
 8014292:	f000 fbb9 	bl	8014a08 <uart0_puts>
 8014296:	2000      	movs	r0, #0
 8014298:	bd08      	pop	{r3, pc}
 801429a:	bf00      	nop
 801429c:	08016859 	stmdaeq	r1, {r0, r3, r4, r6, fp, sp, lr}
 80142a0:	08018ac4 	stmdaeq	r1, {r2, r6, r7, r9, fp, pc}

080142a4 <console_putc>:
 80142a4:	280a      	cmp	r0, #10
 80142a6:	b510      	push	{r4, lr}
 80142a8:	4604      	mov	r4, r0
 80142aa:	d102      	bne.n	80142b2 <console_putc+0xe>
 80142ac:	200d      	movs	r0, #13
 80142ae:	f000 fb8b 	bl	80149c8 <uart0_putc>
 80142b2:	4620      	mov	r0, r4
 80142b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80142b8:	f000 bb86 	b.w	80149c8 <uart0_putc>

080142bc <console_puts>:
 80142bc:	f000 bba4 	b.w	8014a08 <uart0_puts>

080142c0 <console_set_fg_color>:
 80142c0:	2807      	cmp	r0, #7
 80142c2:	d810      	bhi.n	80142e6 <console_set_fg_color+0x26>
 80142c4:	e8df f000 	tbb	[pc, r0]
 80142c8:	0b090704 	bleq	8255ee0 <__exidx_end+0x23d320>
 80142cc:	0d0f0f0f 	stceq	15, cr0, [pc, #-60]	; 8014298 <console_init+0x14>
 80142d0:	4806      	ldr	r0, [pc, #24]	; (80142ec <console_set_fg_color+0x2c>)
 80142d2:	f000 bb99 	b.w	8014a08 <uart0_puts>
 80142d6:	4806      	ldr	r0, [pc, #24]	; (80142f0 <console_set_fg_color+0x30>)
 80142d8:	e7fb      	b.n	80142d2 <console_set_fg_color+0x12>
 80142da:	4806      	ldr	r0, [pc, #24]	; (80142f4 <console_set_fg_color+0x34>)
 80142dc:	e7f9      	b.n	80142d2 <console_set_fg_color+0x12>
 80142de:	4806      	ldr	r0, [pc, #24]	; (80142f8 <console_set_fg_color+0x38>)
 80142e0:	e7f7      	b.n	80142d2 <console_set_fg_color+0x12>
 80142e2:	4806      	ldr	r0, [pc, #24]	; (80142fc <console_set_fg_color+0x3c>)
 80142e4:	e7f5      	b.n	80142d2 <console_set_fg_color+0x12>
 80142e6:	4806      	ldr	r0, [pc, #24]	; (8014300 <console_set_fg_color+0x40>)
 80142e8:	e7f3      	b.n	80142d2 <console_set_fg_color+0x12>
 80142ea:	bf00      	nop
 80142ec:	08018aca 	stmdaeq	r1, {r1, r3, r6, r7, r9, fp, pc}
 80142f0:	08018ad0 	stmdaeq	r1, {r4, r6, r7, r9, fp, pc}
 80142f4:	08018ad6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r9, fp, pc}
 80142f8:	08018adc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r9, fp, pc}
 80142fc:	08016859 	stmdaeq	r1, {r0, r3, r4, r6, fp, sp, lr}
 8014300:	08018ae2 	stmdaeq	r1, {r1, r5, r6, r7, r9, fp, pc}

08014304 <console_error>:
 8014304:	b510      	push	{r4, lr}
 8014306:	4604      	mov	r4, r0
 8014308:	4805      	ldr	r0, [pc, #20]	; (8014320 <console_error+0x1c>)
 801430a:	f000 fb7d 	bl	8014a08 <uart0_puts>
 801430e:	4620      	mov	r0, r4
 8014310:	f000 fb7a 	bl	8014a08 <uart0_puts>
 8014314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014318:	4802      	ldr	r0, [pc, #8]	; (8014324 <console_error+0x20>)
 801431a:	f000 bb75 	b.w	8014a08 <uart0_puts>
 801431e:	bf00      	nop
 8014320:	08018ad0 	stmdaeq	r1, {r4, r6, r7, r9, fp, pc}
 8014324:	08016859 	stmdaeq	r1, {r0, r3, r4, r6, fp, sp, lr}

08014328 <console_status>:
 8014328:	b510      	push	{r4, lr}
 801432a:	460c      	mov	r4, r1
 801432c:	b280      	uxth	r0, r0
 801432e:	f7ff ffc7 	bl	80142c0 <console_set_fg_color>
 8014332:	4807      	ldr	r0, [pc, #28]	; (8014350 <console_status+0x28>)
 8014334:	f000 fb68 	bl	8014a08 <uart0_puts>
 8014338:	4620      	mov	r0, r4
 801433a:	f000 fb65 	bl	8014a08 <uart0_puts>
 801433e:	200a      	movs	r0, #10
 8014340:	f7ff ffb0 	bl	80142a4 <console_putc>
 8014344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014348:	4802      	ldr	r0, [pc, #8]	; (8014354 <console_status+0x2c>)
 801434a:	f000 bb5d 	b.w	8014a08 <uart0_puts>
 801434e:	bf00      	nop
 8014350:	08018ac4 	stmdaeq	r1, {r2, r6, r7, r9, fp, pc}
 8014354:	08016859 	stmdaeq	r1, {r0, r3, r4, r6, fp, sp, lr}

08014358 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
 8014358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801435c:	4617      	mov	r7, r2
 801435e:	461e      	mov	r6, r3
 8014360:	4d14      	ldr	r5, [pc, #80]	; (80143b4 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>)
 8014362:	4b15      	ldr	r3, [pc, #84]	; (80143b8 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x60>)
 8014364:	b086      	sub	sp, #24
 8014366:	6018      	str	r0, [r3, #0]
 8014368:	4604      	mov	r4, r0
 801436a:	f105 0803 	add.w	r8, r5, #3
 801436e:	2203      	movs	r2, #3
 8014370:	4628      	mov	r0, r5
 8014372:	f000 f9ea 	bl	801474a <memmove>
 8014376:	4639      	mov	r1, r7
 8014378:	220b      	movs	r2, #11
 801437a:	4640      	mov	r0, r8
 801437c:	f000 f9e5 	bl	801474a <memmove>
 8014380:	f105 030e 	add.w	r3, r5, #14
 8014384:	4631      	mov	r1, r6
 8014386:	2208      	movs	r2, #8
 8014388:	4618      	mov	r0, r3
 801438a:	f000 f9de 	bl	801474a <memmove>
 801438e:	2308      	movs	r3, #8
 8014390:	e9cd 8303 	strd	r8, r3, [sp, #12]
 8014394:	230b      	movs	r3, #11
 8014396:	9302      	str	r3, [sp, #8]
 8014398:	4b08      	ldr	r3, [pc, #32]	; (80143bc <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x64>)
 801439a:	9005      	str	r0, [sp, #20]
 801439c:	e9cd 5300 	strd	r5, r3, [sp]
 80143a0:	213f      	movs	r1, #63	; 0x3f
 80143a2:	2303      	movs	r3, #3
 80143a4:	4a06      	ldr	r2, [pc, #24]	; (80143c0 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x68>)
 80143a6:	4807      	ldr	r0, [pc, #28]	; (80143c4 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x6c>)
 80143a8:	f7f4 fcb0 	bl	8008d0c <snprintf>
 80143ac:	4620      	mov	r0, r4
 80143ae:	b006      	add	sp, #24
 80143b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143b4:	2000a964 	andcs	sl, r0, r4, ror #18
 80143b8:	2000a9bc 			; <UNDEFINED> instruction: 0x2000a9bc
 80143bc:	080169a1 	stmdaeq	r1, {r0, r5, r7, r8, fp, sp, lr}
 80143c0:	08018ae8 	stmdaeq	r1, {r3, r5, r6, r7, r9, fp, pc}
 80143c4:	2000a97a 	andcs	sl, r0, sl, ror r9

080143c8 <FirmwareVersion::Print(char const*)>:
 80143c8:	b510      	push	{r4, lr}
 80143ca:	460c      	mov	r4, r1
 80143cc:	4804      	ldr	r0, [pc, #16]	; (80143e0 <FirmwareVersion::Print(char const*)+0x18>)
 80143ce:	f000 f9f8 	bl	80147c2 <puts>
 80143d2:	b124      	cbz	r4, 80143de <FirmwareVersion::Print(char const*)+0x16>
 80143d4:	4620      	mov	r0, r4
 80143d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80143da:	f000 b9f2 	b.w	80147c2 <puts>
 80143de:	bd10      	pop	{r4, pc}
 80143e0:	2000a97a 	andcs	sl, r0, sl, ror r9

080143e4 <LedBlink::LedBlink()>:
 80143e4:	2200      	movs	r2, #0
 80143e6:	2105      	movs	r1, #5
 80143e8:	e9c0 2100 	strd	r2, r1, [r0]
 80143ec:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80143f0:	6082      	str	r2, [r0, #8]
 80143f2:	e9c0 1203 	strd	r1, r2, [r0, #12]
 80143f6:	6142      	str	r2, [r0, #20]
 80143f8:	4a01      	ldr	r2, [pc, #4]	; (8014400 <LedBlink::LedBlink()+0x1c>)
 80143fa:	6010      	str	r0, [r2, #0]
 80143fc:	4770      	bx	lr
 80143fe:	bf00      	nop
 8014400:	2000a9c0 	andcs	sl, r0, r0, asr #19

08014404 <LedBlink::SetMode(ledblink::Mode)>:
 8014404:	6843      	ldr	r3, [r0, #4]
 8014406:	428b      	cmp	r3, r1
 8014408:	d02f      	beq.n	801446a <LedBlink::SetMode(ledblink::Mode)+0x66>
 801440a:	6041      	str	r1, [r0, #4]
 801440c:	2904      	cmp	r1, #4
 801440e:	d822      	bhi.n	8014456 <LedBlink::SetMode(ledblink::Mode)+0x52>
 8014410:	e8df f001 	tbb	[pc, r1]
 8014414:	18120321 	ldmdane	r2, {r0, r5, r8, r9}
 8014418:	23ff001d 	mvnscs	r0, #29
 801441c:	6003      	str	r3, [r0, #0]
 801441e:	2300      	movs	r3, #0
 8014420:	2201      	movs	r2, #1
 8014422:	60c3      	str	r3, [r0, #12]
 8014424:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014428:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 801442c:	611a      	str	r2, [r3, #16]
 801442e:	6880      	ldr	r0, [r0, #8]
 8014430:	b1d8      	cbz	r0, 801446a <LedBlink::SetMode(ledblink::Mode)+0x66>
 8014432:	6803      	ldr	r3, [r0, #0]
 8014434:	689b      	ldr	r3, [r3, #8]
 8014436:	4718      	bx	r3
 8014438:	2301      	movs	r3, #1
 801443a:	6003      	str	r3, [r0, #0]
 801443c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014440:	60c3      	str	r3, [r0, #12]
 8014442:	e7f4      	b.n	801442e <LedBlink::SetMode(ledblink::Mode)+0x2a>
 8014444:	2303      	movs	r3, #3
 8014446:	6003      	str	r3, [r0, #0]
 8014448:	f240 134d 	movw	r3, #333	; 0x14d
 801444c:	e7f8      	b.n	8014440 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 801444e:	2305      	movs	r3, #5
 8014450:	6003      	str	r3, [r0, #0]
 8014452:	23c8      	movs	r3, #200	; 0xc8
 8014454:	e7f4      	b.n	8014440 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 8014456:	2300      	movs	r3, #0
 8014458:	2201      	movs	r2, #1
 801445a:	6003      	str	r3, [r0, #0]
 801445c:	60c3      	str	r3, [r0, #12]
 801445e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014462:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8014466:	615a      	str	r2, [r3, #20]
 8014468:	e7e1      	b.n	801442e <LedBlink::SetMode(ledblink::Mode)+0x2a>
 801446a:	4770      	bx	lr

0801446c <Hardware::Hardware()>:
 801446c:	b570      	push	{r4, r5, r6, lr}
 801446e:	2400      	movs	r4, #0
 8014470:	4b24      	ldr	r3, [pc, #144]	; (8014504 <Hardware::Hardware()+0x98>)
 8014472:	4e25      	ldr	r6, [pc, #148]	; (8014508 <Hardware::Hardware()+0x9c>)
 8014474:	b090      	sub	sp, #64	; 0x40
 8014476:	4605      	mov	r5, r0
 8014478:	6004      	str	r4, [r0, #0]
 801447a:	7104      	strb	r4, [r0, #4]
 801447c:	6018      	str	r0, [r3, #0]
 801447e:	f240 6004 	movw	r0, #1540	; 0x604
 8014482:	f000 fc8d 	bl	8014da0 <rcu_periph_clock_enable>
 8014486:	2203      	movs	r2, #3
 8014488:	2110      	movs	r1, #16
 801448a:	4630      	mov	r0, r6
 801448c:	2301      	movs	r3, #1
 801448e:	f000 fbf7 	bl	8014c80 <gpio_init>
 8014492:	2301      	movs	r3, #1
 8014494:	6173      	str	r3, [r6, #20]
 8014496:	f7ff fef5 	bl	8014284 <console_init>
 801449a:	f5a6 3680 	sub.w	r6, r6, #65536	; 0x10000
 801449e:	f000 fac3 	bl	8014a28 <systick_config>
 80144a2:	f001 fb13 	bl	8015acc <udelay_init()>
 80144a6:	f001 fb0f 	bl	8015ac8 <micros_init()>
 80144aa:	f240 7004 	movw	r0, #1796	; 0x704
 80144ae:	f000 fc77 	bl	8014da0 <rcu_periph_clock_enable>
 80144b2:	4630      	mov	r0, r6
 80144b4:	f000 fdc0 	bl	8015038 <timer_deinit>
 80144b8:	236b      	movs	r3, #107	; 0x6b
 80144ba:	f8ad 300c 	strh.w	r3, [sp, #12]
 80144be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80144c2:	a903      	add	r1, sp, #12
 80144c4:	4630      	mov	r0, r6
 80144c6:	9305      	str	r3, [sp, #20]
 80144c8:	f000 fe18 	bl	80150fc <timer_init>
 80144cc:	4630      	mov	r0, r6
 80144ce:	f000 fe6d 	bl	80151ac <timer_enable>
 80144d2:	f000 ffd7 	bl	8015484 <gd32_adc_init()>
 80144d6:	230e      	movs	r3, #14
 80144d8:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80144dc:	237a      	movs	r3, #122	; 0x7a
 80144de:	a807      	add	r0, sp, #28
 80144e0:	930c      	str	r3, [sp, #48]	; 0x30
 80144e2:	e9cd 4408 	strd	r4, r4, [sp, #32]
 80144e6:	9407      	str	r4, [sp, #28]
 80144e8:	940f      	str	r4, [sp, #60]	; 0x3c
 80144ea:	f000 f9c3 	bl	8014874 <mktime>
 80144ee:	4621      	mov	r1, r4
 80144f0:	e9cd 0401 	strd	r0, r4, [sp, #4]
 80144f4:	a801      	add	r0, sp, #4
 80144f6:	f000 fa33 	bl	8014960 <settimeofday>
 80144fa:	f001 f81d 	bl	8015538 <gd32_i2c_begin()>
 80144fe:	4628      	mov	r0, r5
 8014500:	b010      	add	sp, #64	; 0x40
 8014502:	bd70      	pop	{r4, r5, r6, pc}
 8014504:	2000a9c4 	andcs	sl, r0, r4, asr #19
 8014508:	40011000 	andmi	r1, r1, r0

0801450c <Hardware::GetUuid(unsigned char*)>:
 801450c:	4a0c      	ldr	r2, [pc, #48]	; (8014540 <Hardware::GetUuid(unsigned char*)+0x34>)
 801450e:	b084      	sub	sp, #16
 8014510:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 8014514:	9300      	str	r3, [sp, #0]
 8014516:	f8d2 07ec 	ldr.w	r0, [r2, #2028]	; 0x7ec
 801451a:	9001      	str	r0, [sp, #4]
 801451c:	f8d2 27f0 	ldr.w	r2, [r2, #2032]	; 0x7f0
 8014520:	4403      	add	r3, r0
 8014522:	4413      	add	r3, r2
 8014524:	9202      	str	r2, [sp, #8]
 8014526:	466a      	mov	r2, sp
 8014528:	9303      	str	r3, [sp, #12]
 801452a:	1e4b      	subs	r3, r1, #1
 801452c:	310f      	adds	r1, #15
 801452e:	428b      	cmp	r3, r1
 8014530:	d004      	beq.n	801453c <Hardware::GetUuid(unsigned char*)+0x30>
 8014532:	f812 0b01 	ldrb.w	r0, [r2], #1
 8014536:	f803 0f01 	strb.w	r0, [r3, #1]!
 801453a:	e7f8      	b.n	801452e <Hardware::GetUuid(unsigned char*)+0x22>
 801453c:	b004      	add	sp, #16
 801453e:	4770      	bx	lr
 8014540:	1ffff000 	svcne	0x00fff000

08014544 <Hardware::SetTime(tm const*)>:
 8014544:	2000      	movs	r0, #0
 8014546:	4770      	bx	lr

08014548 <Hardware::Reboot()>:
 8014548:	b508      	push	{r3, lr}
 801454a:	6803      	ldr	r3, [r0, #0]
 801454c:	4604      	mov	r4, r0
 801454e:	b153      	cbz	r3, 8014566 <Hardware::Reboot()+0x1e>
 8014550:	2300      	movs	r3, #0
 8014552:	2104      	movs	r1, #4
 8014554:	7103      	strb	r3, [r0, #4]
 8014556:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801455a:	f000 fb67 	bl	8014c2c <fwdgt_config>
 801455e:	6820      	ldr	r0, [r4, #0]
 8014560:	6803      	ldr	r3, [r0, #0]
 8014562:	689b      	ldr	r3, [r3, #8]
 8014564:	4798      	blx	r3
 8014566:	2102      	movs	r1, #2
 8014568:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801456c:	f000 fb5e 	bl	8014c2c <fwdgt_config>
 8014570:	2801      	cmp	r0, #1
 8014572:	bf0c      	ite	eq
 8014574:	2301      	moveq	r3, #1
 8014576:	2300      	movne	r3, #0
 8014578:	7123      	strb	r3, [r4, #4]
 801457a:	d101      	bne.n	8014580 <Hardware::Reboot()+0x38>
 801457c:	f000 fb46 	bl	8014c0c <fwdgt_enable>
 8014580:	2208      	movs	r2, #8
 8014582:	4b0d      	ldr	r3, [pc, #52]	; (80145b8 <Hardware::Reboot()+0x70>)
 8014584:	2501      	movs	r5, #1
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	480c      	ldr	r0, [pc, #48]	; (80145bc <Hardware::Reboot()+0x74>)
 801458a:	601a      	str	r2, [r3, #0]
 801458c:	227d      	movs	r2, #125	; 0x7d
 801458e:	490c      	ldr	r1, [pc, #48]	; (80145c0 <Hardware::Reboot()+0x78>)
 8014590:	60da      	str	r2, [r3, #12]
 8014592:	68dc      	ldr	r4, [r3, #12]
 8014594:	b904      	cbnz	r4, 8014598 <Hardware::Reboot()+0x50>
 8014596:	e7fe      	b.n	8014596 <Hardware::Reboot()+0x4e>
 8014598:	6802      	ldr	r2, [r0, #0]
 801459a:	695e      	ldr	r6, [r3, #20]
 801459c:	1b92      	subs	r2, r2, r6
 801459e:	4294      	cmp	r4, r2
 80145a0:	d8f8      	bhi.n	8014594 <Hardware::Reboot()+0x4c>
 80145a2:	6802      	ldr	r2, [r0, #0]
 80145a4:	615a      	str	r2, [r3, #20]
 80145a6:	691a      	ldr	r2, [r3, #16]
 80145a8:	2a01      	cmp	r2, #1
 80145aa:	f082 0401 	eor.w	r4, r2, #1
 80145ae:	611c      	str	r4, [r3, #16]
 80145b0:	bf14      	ite	ne
 80145b2:	610d      	strne	r5, [r1, #16]
 80145b4:	614a      	streq	r2, [r1, #20]
 80145b6:	e7ec      	b.n	8014592 <Hardware::Reboot()+0x4a>
 80145b8:	2000a9c0 	andcs	sl, r0, r0, asr #19
 80145bc:	2000a9dc 	ldrdcs	sl, [r0], -ip
 80145c0:	40011000 	andmi	r1, r1, r0

080145c4 <operator delete(void*)>:
 80145c4:	f000 b890 	b.w	80146e8 <free>

080145c8 <operator delete[](void*)>:
 80145c8:	f000 b88e 	b.w	80146e8 <free>

080145cc <operator new(unsigned int)>:
 80145cc:	f000 b842 	b.w	8014654 <malloc>

080145d0 <operator new[](unsigned int)>:
 80145d0:	f000 b840 	b.w	8014654 <malloc>

080145d4 <inet_aton>:
 80145d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80145d6:	f04f 0c0a 	mov.w	ip, #10
 80145da:	2500      	movs	r5, #0
 80145dc:	ae01      	add	r6, sp, #4
 80145de:	4603      	mov	r3, r0
 80145e0:	2200      	movs	r2, #0
 80145e2:	1d07      	adds	r7, r0, #4
 80145e4:	e007      	b.n	80145f6 <inet_aton+0x22>
 80145e6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80145ea:	2b09      	cmp	r3, #9
 80145ec:	d820      	bhi.n	8014630 <inet_aton+0x5c>
 80145ee:	4603      	mov	r3, r0
 80145f0:	fb0c 4202 	mla	r2, ip, r2, r4
 80145f4:	3a30      	subs	r2, #48	; 0x30
 80145f6:	4618      	mov	r0, r3
 80145f8:	f810 4b01 	ldrb.w	r4, [r0], #1
 80145fc:	2c2e      	cmp	r4, #46	; 0x2e
 80145fe:	d111      	bne.n	8014624 <inet_aton+0x50>
 8014600:	3501      	adds	r5, #1
 8014602:	2d03      	cmp	r5, #3
 8014604:	f806 2b01 	strb.w	r2, [r6], #1
 8014608:	d1e9      	bne.n	80145de <inet_aton+0xa>
 801460a:	2200      	movs	r2, #0
 801460c:	250a      	movs	r5, #10
 801460e:	1d1c      	adds	r4, r3, #4
 8014610:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8014614:	f010 0fdf 	tst.w	r0, #223	; 0xdf
 8014618:	d10d      	bne.n	8014636 <inet_aton+0x62>
 801461a:	f88d 2007 	strb.w	r2, [sp, #7]
 801461e:	b9b1      	cbnz	r1, 801464e <inet_aton+0x7a>
 8014620:	2001      	movs	r0, #1
 8014622:	e006      	b.n	8014632 <inet_aton+0x5e>
 8014624:	2c00      	cmp	r4, #0
 8014626:	d0eb      	beq.n	8014600 <inet_aton+0x2c>
 8014628:	2c0a      	cmp	r4, #10
 801462a:	d0e9      	beq.n	8014600 <inet_aton+0x2c>
 801462c:	42b8      	cmp	r0, r7
 801462e:	d1da      	bne.n	80145e6 <inet_aton+0x12>
 8014630:	2000      	movs	r0, #0
 8014632:	b003      	add	sp, #12
 8014634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014636:	280a      	cmp	r0, #10
 8014638:	d0ef      	beq.n	801461a <inet_aton+0x46>
 801463a:	42a3      	cmp	r3, r4
 801463c:	d0f8      	beq.n	8014630 <inet_aton+0x5c>
 801463e:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
 8014642:	2e09      	cmp	r6, #9
 8014644:	d8f4      	bhi.n	8014630 <inet_aton+0x5c>
 8014646:	fb05 0202 	mla	r2, r5, r2, r0
 801464a:	3a30      	subs	r2, #48	; 0x30
 801464c:	e7e0      	b.n	8014610 <inet_aton+0x3c>
 801464e:	9b01      	ldr	r3, [sp, #4]
 8014650:	600b      	str	r3, [r1, #0]
 8014652:	e7e5      	b.n	8014620 <inet_aton+0x4c>

08014654 <malloc>:
 8014654:	b538      	push	{r3, r4, r5, lr}
 8014656:	4604      	mov	r4, r0
 8014658:	4601      	mov	r1, r0
 801465a:	481c      	ldr	r0, [pc, #112]	; (80146cc <malloc+0x78>)
 801465c:	f7f4 fb2e 	bl	8008cbc <printf>
 8014660:	b17c      	cbz	r4, 8014682 <malloc+0x2e>
 8014662:	4b1b      	ldr	r3, [pc, #108]	; (80146d0 <malloc+0x7c>)
 8014664:	6818      	ldr	r0, [r3, #0]
 8014666:	b978      	cbnz	r0, 8014688 <malloc+0x34>
 8014668:	4a1a      	ldr	r2, [pc, #104]	; (80146d4 <malloc+0x80>)
 801466a:	f104 031b 	add.w	r3, r4, #27
 801466e:	6811      	ldr	r1, [r2, #0]
 8014670:	4819      	ldr	r0, [pc, #100]	; (80146d8 <malloc+0x84>)
 8014672:	f023 030f 	bic.w	r3, r3, #15
 8014676:	440b      	add	r3, r1
 8014678:	4283      	cmp	r3, r0
 801467a:	d921      	bls.n	80146c0 <malloc+0x6c>
 801467c:	4817      	ldr	r0, [pc, #92]	; (80146dc <malloc+0x88>)
 801467e:	f7f4 fb1d 	bl	8008cbc <printf>
 8014682:	2500      	movs	r5, #0
 8014684:	4628      	mov	r0, r5
 8014686:	bd38      	pop	{r3, r4, r5, pc}
 8014688:	4284      	cmp	r4, r0
 801468a:	d80a      	bhi.n	80146a2 <malloc+0x4e>
 801468c:	685a      	ldr	r2, [r3, #4]
 801468e:	6899      	ldr	r1, [r3, #8]
 8014690:	3201      	adds	r2, #1
 8014692:	428a      	cmp	r2, r1
 8014694:	605a      	str	r2, [r3, #4]
 8014696:	d900      	bls.n	801469a <malloc+0x46>
 8014698:	609a      	str	r2, [r3, #8]
 801469a:	68d9      	ldr	r1, [r3, #12]
 801469c:	b919      	cbnz	r1, 80146a6 <malloc+0x52>
 801469e:	4604      	mov	r4, r0
 80146a0:	e7e2      	b.n	8014668 <malloc+0x14>
 80146a2:	3310      	adds	r3, #16
 80146a4:	e7de      	b.n	8014664 <malloc+0x10>
 80146a6:	4604      	mov	r4, r0
 80146a8:	688a      	ldr	r2, [r1, #8]
 80146aa:	60da      	str	r2, [r3, #12]
 80146ac:	2300      	movs	r3, #0
 80146ae:	f101 050c 	add.w	r5, r1, #12
 80146b2:	608b      	str	r3, [r1, #8]
 80146b4:	4622      	mov	r2, r4
 80146b6:	462b      	mov	r3, r5
 80146b8:	4809      	ldr	r0, [pc, #36]	; (80146e0 <malloc+0x8c>)
 80146ba:	f7f4 faff 	bl	8008cbc <printf>
 80146be:	e7e1      	b.n	8014684 <malloc+0x30>
 80146c0:	6013      	str	r3, [r2, #0]
 80146c2:	4b08      	ldr	r3, [pc, #32]	; (80146e4 <malloc+0x90>)
 80146c4:	e9c1 3400 	strd	r3, r4, [r1]
 80146c8:	e7f0      	b.n	80146ac <malloc+0x58>
 80146ca:	bf00      	nop
 80146cc:	08018b0c 	stmdaeq	r1, {r2, r3, r8, r9, fp, pc}
 80146d0:	20000010 	andcs	r0, r0, r0, lsl r0
 80146d4:	2000000c 	andcs	r0, r0, ip
 80146d8:	20016800 	andcs	r6, r1, r0, lsl #16
 80146dc:	08018b18 	stmdaeq	r1, {r3, r4, r8, r9, fp, pc}
 80146e0:	08018b34 	stmdaeq	r1, {r2, r4, r5, r8, r9, fp, pc}
 80146e4:	424c4d43 	submi	r4, ip, #4288	; 0x10c0

080146e8 <free>:
 80146e8:	b538      	push	{r3, r4, r5, lr}
 80146ea:	4604      	mov	r4, r0
 80146ec:	b1c8      	cbz	r0, 8014722 <free+0x3a>
 80146ee:	f1a0 050c 	sub.w	r5, r0, #12
 80146f2:	4602      	mov	r2, r0
 80146f4:	4629      	mov	r1, r5
 80146f6:	480c      	ldr	r0, [pc, #48]	; (8014728 <free+0x40>)
 80146f8:	f7f4 fae0 	bl	8008cbc <printf>
 80146fc:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8014700:	4b0a      	ldr	r3, [pc, #40]	; (801472c <free+0x44>)
 8014702:	429a      	cmp	r2, r3
 8014704:	d10d      	bne.n	8014722 <free+0x3a>
 8014706:	4b0a      	ldr	r3, [pc, #40]	; (8014730 <free+0x48>)
 8014708:	681a      	ldr	r2, [r3, #0]
 801470a:	b152      	cbz	r2, 8014722 <free+0x3a>
 801470c:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8014710:	4291      	cmp	r1, r2
 8014712:	d107      	bne.n	8014724 <free+0x3c>
 8014714:	68da      	ldr	r2, [r3, #12]
 8014716:	f844 2c04 	str.w	r2, [r4, #-4]
 801471a:	685a      	ldr	r2, [r3, #4]
 801471c:	60dd      	str	r5, [r3, #12]
 801471e:	3a01      	subs	r2, #1
 8014720:	605a      	str	r2, [r3, #4]
 8014722:	bd38      	pop	{r3, r4, r5, pc}
 8014724:	3310      	adds	r3, #16
 8014726:	e7ef      	b.n	8014708 <free+0x20>
 8014728:	08018b5f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r8, r9, fp, pc}
 801472c:	424c4d43 	submi	r4, ip, #4288	; 0x10c0
 8014730:	20000010 	andcs	r0, r0, r0, lsl r0

08014734 <memcpy>:
 8014734:	b510      	push	{r4, lr}
 8014736:	1e43      	subs	r3, r0, #1
 8014738:	440a      	add	r2, r1
 801473a:	4291      	cmp	r1, r2
 801473c:	d100      	bne.n	8014740 <memcpy+0xc>
 801473e:	bd10      	pop	{r4, pc}
 8014740:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014744:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014748:	e7f7      	b.n	801473a <memcpy+0x6>

0801474a <memmove>:
 801474a:	4288      	cmp	r0, r1
 801474c:	b510      	push	{r4, lr}
 801474e:	eb01 0302 	add.w	r3, r1, r2
 8014752:	d208      	bcs.n	8014766 <memmove+0x1c>
 8014754:	1e42      	subs	r2, r0, #1
 8014756:	4299      	cmp	r1, r3
 8014758:	d100      	bne.n	801475c <memmove+0x12>
 801475a:	bd10      	pop	{r4, pc}
 801475c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014760:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014764:	e7f7      	b.n	8014756 <memmove+0xc>
 8014766:	4601      	mov	r1, r0
 8014768:	4402      	add	r2, r0
 801476a:	428a      	cmp	r2, r1
 801476c:	d0f5      	beq.n	801475a <memmove+0x10>
 801476e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014772:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014776:	e7f8      	b.n	801476a <memmove+0x20>

08014778 <memset>:
 8014778:	b5f0      	push	{r4, r5, r6, r7, lr}
 801477a:	b1e2      	cbz	r2, 80147b6 <memset+0x3e>
 801477c:	4603      	mov	r3, r0
 801477e:	b2c9      	uxtb	r1, r1
 8014780:	075c      	lsls	r4, r3, #29
 8014782:	d114      	bne.n	80147ae <memset+0x36>
 8014784:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
 8014788:	ea44 4704 	orr.w	r7, r4, r4, lsl #16
 801478c:	463d      	mov	r5, r7
 801478e:	f022 0407 	bic.w	r4, r2, #7
 8014792:	08d6      	lsrs	r6, r2, #3
 8014794:	441c      	add	r4, r3
 8014796:	42a3      	cmp	r3, r4
 8014798:	d10e      	bne.n	80147b8 <memset+0x40>
 801479a:	f06f 0307 	mvn.w	r3, #7
 801479e:	fb03 2206 	mla	r2, r3, r6, r2
 80147a2:	4422      	add	r2, r4
 80147a4:	4294      	cmp	r4, r2
 80147a6:	d006      	beq.n	80147b6 <memset+0x3e>
 80147a8:	f804 1b01 	strb.w	r1, [r4], #1
 80147ac:	e7fa      	b.n	80147a4 <memset+0x2c>
 80147ae:	3a01      	subs	r2, #1
 80147b0:	f803 1b01 	strb.w	r1, [r3], #1
 80147b4:	d1e4      	bne.n	8014780 <memset+0x8>
 80147b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147b8:	f843 7b08 	str.w	r7, [r3], #8
 80147bc:	f843 5c04 	str.w	r5, [r3, #-4]
 80147c0:	e7e9      	b.n	8014796 <memset+0x1e>

080147c2 <puts>:
 80147c2:	b508      	push	{r3, lr}
 80147c4:	f7ff fd7a 	bl	80142bc <console_puts>
 80147c8:	200a      	movs	r0, #10
 80147ca:	f7ff fd6b 	bl	80142a4 <console_putc>
 80147ce:	2001      	movs	r0, #1
 80147d0:	bd08      	pop	{r3, pc}
	...

080147d4 <strtok>:
 80147d4:	b530      	push	{r4, r5, lr}
 80147d6:	b910      	cbnz	r0, 80147de <strtok+0xa>
 80147d8:	4b12      	ldr	r3, [pc, #72]	; (8014824 <strtok+0x50>)
 80147da:	6818      	ldr	r0, [r3, #0]
 80147dc:	b158      	cbz	r0, 80147f6 <strtok+0x22>
 80147de:	4603      	mov	r3, r0
 80147e0:	460d      	mov	r5, r1
 80147e2:	4618      	mov	r0, r3
 80147e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80147e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80147ec:	b924      	cbnz	r4, 80147f8 <strtok+0x24>
 80147ee:	b94a      	cbnz	r2, 8014804 <strtok+0x30>
 80147f0:	4610      	mov	r0, r2
 80147f2:	4b0c      	ldr	r3, [pc, #48]	; (8014824 <strtok+0x50>)
 80147f4:	601a      	str	r2, [r3, #0]
 80147f6:	bd30      	pop	{r4, r5, pc}
 80147f8:	42a2      	cmp	r2, r4
 80147fa:	d1f5      	bne.n	80147e8 <strtok+0x14>
 80147fc:	e7f0      	b.n	80147e0 <strtok+0xc>
 80147fe:	4613      	mov	r3, r2
 8014800:	e00c      	b.n	801481c <strtok+0x48>
 8014802:	b914      	cbnz	r4, 801480a <strtok+0x36>
 8014804:	460d      	mov	r5, r1
 8014806:	f813 2b01 	ldrb.w	r2, [r3], #1
 801480a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801480e:	42a2      	cmp	r2, r4
 8014810:	d1f7      	bne.n	8014802 <strtok+0x2e>
 8014812:	2a00      	cmp	r2, #0
 8014814:	d0f3      	beq.n	80147fe <strtok+0x2a>
 8014816:	2200      	movs	r2, #0
 8014818:	f803 2c01 	strb.w	r2, [r3, #-1]
 801481c:	4a01      	ldr	r2, [pc, #4]	; (8014824 <strtok+0x50>)
 801481e:	6013      	str	r3, [r2, #0]
 8014820:	e7e9      	b.n	80147f6 <strtok+0x22>
 8014822:	bf00      	nop
 8014824:	2000a9c8 	andcs	sl, r0, r8, asr #19

08014828 <isleapyear>:
 8014828:	2264      	movs	r2, #100	; 0x64
 801482a:	fb90 f3f2 	sdiv	r3, r0, r2
 801482e:	fb02 0313 	mls	r3, r2, r3, r0
 8014832:	b94b      	cbnz	r3, 8014848 <isleapyear+0x20>
 8014834:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8014838:	fb90 f2f3 	sdiv	r2, r0, r3
 801483c:	fb03 0012 	mls	r0, r3, r2, r0
 8014840:	fab0 f080 	clz	r0, r0
 8014844:	0940      	lsrs	r0, r0, #5
 8014846:	4770      	bx	lr
 8014848:	f010 0f03 	tst.w	r0, #3
 801484c:	bf0c      	ite	eq
 801484e:	2001      	moveq	r0, #1
 8014850:	2000      	movne	r0, #0
 8014852:	4770      	bx	lr

08014854 <getdaysofmonth>:
 8014854:	b510      	push	{r4, lr}
 8014856:	4604      	mov	r4, r0
 8014858:	2c01      	cmp	r4, #1
 801485a:	4608      	mov	r0, r1
 801485c:	d102      	bne.n	8014864 <getdaysofmonth+0x10>
 801485e:	f7ff ffe3 	bl	8014828 <isleapyear>
 8014862:	b918      	cbnz	r0, 801486c <getdaysofmonth+0x18>
 8014864:	4b02      	ldr	r3, [pc, #8]	; (8014870 <getdaysofmonth+0x1c>)
 8014866:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801486a:	bd10      	pop	{r4, pc}
 801486c:	201d      	movs	r0, #29
 801486e:	e7fc      	b.n	801486a <getdaysofmonth+0x16>
 8014870:	08018b88 	stmdaeq	r1, {r3, r7, r8, r9, fp, pc}

08014874 <mktime>:
 8014874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014878:	4604      	mov	r4, r0
 801487a:	2800      	cmp	r0, #0
 801487c:	d042      	beq.n	8014904 <mktime+0x90>
 801487e:	6941      	ldr	r1, [r0, #20]
 8014880:	f1a1 0346 	sub.w	r3, r1, #70	; 0x46
 8014884:	2b45      	cmp	r3, #69	; 0x45
 8014886:	d83d      	bhi.n	8014904 <mktime+0x90>
 8014888:	2600      	movs	r6, #0
 801488a:	f240 75b2 	movw	r5, #1970	; 0x7b2
 801488e:	f240 186d 	movw	r8, #365	; 0x16d
 8014892:	f201 776b 	addw	r7, r1, #1899	; 0x76b
 8014896:	42af      	cmp	r7, r5
 8014898:	da23      	bge.n	80148e2 <mktime+0x6e>
 801489a:	6927      	ldr	r7, [r4, #16]
 801489c:	2f0b      	cmp	r7, #11
 801489e:	d831      	bhi.n	8014904 <mktime+0x90>
 80148a0:	2500      	movs	r5, #0
 80148a2:	42af      	cmp	r7, r5
 80148a4:	d128      	bne.n	80148f8 <mktime+0x84>
 80148a6:	68e5      	ldr	r5, [r4, #12]
 80148a8:	2d00      	cmp	r5, #0
 80148aa:	dd2b      	ble.n	8014904 <mktime+0x90>
 80148ac:	4638      	mov	r0, r7
 80148ae:	f7ff ffd1 	bl	8014854 <getdaysofmonth>
 80148b2:	4285      	cmp	r5, r0
 80148b4:	dc26      	bgt.n	8014904 <mktime+0x90>
 80148b6:	2318      	movs	r3, #24
 80148b8:	3d01      	subs	r5, #1
 80148ba:	4435      	add	r5, r6
 80148bc:	435d      	muls	r5, r3
 80148be:	68a3      	ldr	r3, [r4, #8]
 80148c0:	2b17      	cmp	r3, #23
 80148c2:	d81f      	bhi.n	8014904 <mktime+0x90>
 80148c4:	203c      	movs	r0, #60	; 0x3c
 80148c6:	442b      	add	r3, r5
 80148c8:	fb00 f503 	mul.w	r5, r0, r3
 80148cc:	6863      	ldr	r3, [r4, #4]
 80148ce:	2b3b      	cmp	r3, #59	; 0x3b
 80148d0:	d818      	bhi.n	8014904 <mktime+0x90>
 80148d2:	442b      	add	r3, r5
 80148d4:	4343      	muls	r3, r0
 80148d6:	6820      	ldr	r0, [r4, #0]
 80148d8:	283b      	cmp	r0, #59	; 0x3b
 80148da:	d813      	bhi.n	8014904 <mktime+0x90>
 80148dc:	4418      	add	r0, r3
 80148de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148e2:	4628      	mov	r0, r5
 80148e4:	f7ff ffa0 	bl	8014828 <isleapyear>
 80148e8:	2800      	cmp	r0, #0
 80148ea:	bf14      	ite	ne
 80148ec:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 80148f0:	4643      	moveq	r3, r8
 80148f2:	3501      	adds	r5, #1
 80148f4:	441e      	add	r6, r3
 80148f6:	e7ce      	b.n	8014896 <mktime+0x22>
 80148f8:	4628      	mov	r0, r5
 80148fa:	f7ff ffab 	bl	8014854 <getdaysofmonth>
 80148fe:	3501      	adds	r5, #1
 8014900:	4406      	add	r6, r0
 8014902:	e7ce      	b.n	80148a2 <mktime+0x2e>
 8014904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014908:	e7e9      	b.n	80148de <mktime+0x6a>
	...

0801490c <gettimeofday>:
 801490c:	b538      	push	{r3, r4, r5, lr}
 801490e:	4b10      	ldr	r3, [pc, #64]	; (8014950 <gettimeofday+0x44>)
 8014910:	4a10      	ldr	r2, [pc, #64]	; (8014954 <gettimeofday+0x48>)
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	6814      	ldr	r4, [r2, #0]
 8014916:	6013      	str	r3, [r2, #0]
 8014918:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801491c:	429c      	cmp	r4, r3
 801491e:	bf2c      	ite	cs
 8014920:	1ae4      	subcs	r4, r4, r3
 8014922:	1b1c      	subcc	r4, r3, r4
 8014924:	4354      	muls	r4, r2
 8014926:	4b0c      	ldr	r3, [pc, #48]	; (8014958 <gettimeofday+0x4c>)
 8014928:	4605      	mov	r5, r0
 801492a:	e9d3 2100 	ldrd	r2, r1, [r3]
 801492e:	18a4      	adds	r4, r4, r2
 8014930:	f141 0100 	adc.w	r1, r1, #0
 8014934:	e9c3 4100 	strd	r4, r1, [r3]
 8014938:	4620      	mov	r0, r4
 801493a:	2300      	movs	r3, #0
 801493c:	4a07      	ldr	r2, [pc, #28]	; (801495c <gettimeofday+0x50>)
 801493e:	f7f2 fe01 	bl	8007544 <__aeabi_uldivmod>
 8014942:	4b06      	ldr	r3, [pc, #24]	; (801495c <gettimeofday+0x50>)
 8014944:	6028      	str	r0, [r5, #0]
 8014946:	fb03 4410 	mls	r4, r3, r0, r4
 801494a:	2000      	movs	r0, #0
 801494c:	606c      	str	r4, [r5, #4]
 801494e:	bd38      	pop	{r3, r4, r5, pc}
 8014950:	2000a9dc 	ldrdcs	sl, [r0], -ip
 8014954:	2000a9d8 	ldrdcs	sl, [r0], -r8
 8014958:	2000a9d0 	ldrdcs	sl, [r0], -r0
 801495c:	000f4240 	andeq	r4, pc, r0, asr #4

08014960 <settimeofday>:
 8014960:	4b07      	ldr	r3, [pc, #28]	; (8014980 <settimeofday+0x20>)
 8014962:	b510      	push	{r4, lr}
 8014964:	681a      	ldr	r2, [r3, #0]
 8014966:	4b07      	ldr	r3, [pc, #28]	; (8014984 <settimeofday+0x24>)
 8014968:	6804      	ldr	r4, [r0, #0]
 801496a:	601a      	str	r2, [r3, #0]
 801496c:	6843      	ldr	r3, [r0, #4]
 801496e:	4806      	ldr	r0, [pc, #24]	; (8014988 <settimeofday+0x28>)
 8014970:	17da      	asrs	r2, r3, #31
 8014972:	fbc4 3200 	smlal	r3, r2, r4, r0
 8014976:	4905      	ldr	r1, [pc, #20]	; (801498c <settimeofday+0x2c>)
 8014978:	2000      	movs	r0, #0
 801497a:	e9c1 3200 	strd	r3, r2, [r1]
 801497e:	bd10      	pop	{r4, pc}
 8014980:	2000a9dc 	ldrdcs	sl, [r0], -ip
 8014984:	2000a9d8 	ldrdcs	sl, [r0], -r8
 8014988:	000f4240 	andeq	r4, pc, r0, asr #4
 801498c:	2000a9d0 	ldrdcs	sl, [r0], -r0

08014990 <time>:
 8014990:	b513      	push	{r0, r1, r4, lr}
 8014992:	4604      	mov	r4, r0
 8014994:	2100      	movs	r1, #0
 8014996:	4668      	mov	r0, sp
 8014998:	f7ff ffb8 	bl	801490c <gettimeofday>
 801499c:	9800      	ldr	r0, [sp, #0]
 801499e:	b104      	cbz	r4, 80149a2 <time+0x12>
 80149a0:	6020      	str	r0, [r4, #0]
 80149a2:	b002      	add	sp, #8
 80149a4:	bd10      	pop	{r4, pc}
	...

080149a8 <uart0_init>:
 80149a8:	2301      	movs	r3, #1
 80149aa:	b507      	push	{r0, r1, r2, lr}
 80149ac:	2208      	movs	r2, #8
 80149ae:	9300      	str	r3, [sp, #0]
 80149b0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80149b4:	2300      	movs	r3, #0
 80149b6:	4803      	ldr	r0, [pc, #12]	; (80149c4 <uart0_init+0x1c>)
 80149b8:	f000 ffb8 	bl	801592c <gd32_uart_begin>
 80149bc:	b003      	add	sp, #12
 80149be:	f85d fb04 	ldr.w	pc, [sp], #4
 80149c2:	bf00      	nop
 80149c4:	40013800 	andmi	r3, r1, r0, lsl #16

080149c8 <uart0_putc>:
 80149c8:	280a      	cmp	r0, #10
 80149ca:	b538      	push	{r3, r4, r5, lr}
 80149cc:	4604      	mov	r4, r0
 80149ce:	d10a      	bne.n	80149e6 <uart0_putc+0x1e>
 80149d0:	4d0b      	ldr	r5, [pc, #44]	; (8014a00 <uart0_putc+0x38>)
 80149d2:	2107      	movs	r1, #7
 80149d4:	4628      	mov	r0, r5
 80149d6:	f000 fc87 	bl	80152e8 <usart_flag_get>
 80149da:	2800      	cmp	r0, #0
 80149dc:	d0f9      	beq.n	80149d2 <uart0_putc+0xa>
 80149de:	220d      	movs	r2, #13
 80149e0:	4b08      	ldr	r3, [pc, #32]	; (8014a04 <uart0_putc+0x3c>)
 80149e2:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 80149e6:	4d06      	ldr	r5, [pc, #24]	; (8014a00 <uart0_putc+0x38>)
 80149e8:	2107      	movs	r1, #7
 80149ea:	4628      	mov	r0, r5
 80149ec:	f000 fc7c 	bl	80152e8 <usart_flag_get>
 80149f0:	2800      	cmp	r0, #0
 80149f2:	d0f9      	beq.n	80149e8 <uart0_putc+0x20>
 80149f4:	4b03      	ldr	r3, [pc, #12]	; (8014a04 <uart0_putc+0x3c>)
 80149f6:	b2e4      	uxtb	r4, r4
 80149f8:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
 80149fc:	bd38      	pop	{r3, r4, r5, pc}
 80149fe:	bf00      	nop
 8014a00:	40013800 	andmi	r3, r1, r0, lsl #16
 8014a04:	40013000 	andmi	r3, r1, r0

08014a08 <uart0_puts>:
 8014a08:	b510      	push	{r4, lr}
 8014a0a:	1e44      	subs	r4, r0, #1
 8014a0c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8014a10:	b903      	cbnz	r3, 8014a14 <uart0_puts+0xc>
 8014a12:	bd10      	pop	{r4, pc}
 8014a14:	2b0a      	cmp	r3, #10
 8014a16:	d102      	bne.n	8014a1e <uart0_puts+0x16>
 8014a18:	200d      	movs	r0, #13
 8014a1a:	f7ff ffd5 	bl	80149c8 <uart0_putc>
 8014a1e:	7820      	ldrb	r0, [r4, #0]
 8014a20:	f7ff ffd2 	bl	80149c8 <uart0_putc>
 8014a24:	e7f2      	b.n	8014a0c <uart0_puts+0x4>
	...

08014a28 <systick_config>:
 8014a28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014a2c:	4b0b      	ldr	r3, [pc, #44]	; (8014a5c <systick_config+0x34>)
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	fbb3 f3f2 	udiv	r3, r3, r2
 8014a34:	3b01      	subs	r3, #1
 8014a36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8014a3a:	d20d      	bcs.n	8014a58 <systick_config+0x30>
 8014a3c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8014a40:	21f0      	movs	r1, #240	; 0xf0
 8014a42:	6153      	str	r3, [r2, #20]
 8014a44:	4b06      	ldr	r3, [pc, #24]	; (8014a60 <systick_config+0x38>)
 8014a46:	2007      	movs	r0, #7
 8014a48:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 8014a4c:	2100      	movs	r1, #0
 8014a4e:	6191      	str	r1, [r2, #24]
 8014a50:	6110      	str	r0, [r2, #16]
 8014a52:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 8014a56:	4770      	bx	lr
 8014a58:	e7fe      	b.n	8014a58 <systick_config+0x30>
 8014a5a:	bf00      	nop
 8014a5c:	200000e0 	andcs	r0, r0, r0, ror #1
 8014a60:	e000ed00 	and	lr, r0, r0, lsl #26

08014a64 <SysTick_Handler>:
 8014a64:	4a02      	ldr	r2, [pc, #8]	; (8014a70 <SysTick_Handler+0xc>)
 8014a66:	6813      	ldr	r3, [r2, #0]
 8014a68:	3301      	adds	r3, #1
 8014a6a:	6013      	str	r3, [r2, #0]
 8014a6c:	4770      	bx	lr
 8014a6e:	bf00      	nop
 8014a70:	2000a9dc 	ldrdcs	sl, [r0], -ip

08014a74 <SystemInit>:
 8014a74:	4b37      	ldr	r3, [pc, #220]	; (8014b54 <SystemInit+0xe0>)
 8014a76:	4838      	ldr	r0, [pc, #224]	; (8014b58 <SystemInit+0xe4>)
 8014a78:	681a      	ldr	r2, [r3, #0]
 8014a7a:	f042 0201 	orr.w	r2, r2, #1
 8014a7e:	601a      	str	r2, [r3, #0]
 8014a80:	685a      	ldr	r2, [r3, #4]
 8014a82:	f022 0203 	bic.w	r2, r2, #3
 8014a86:	605a      	str	r2, [r3, #4]
 8014a88:	6819      	ldr	r1, [r3, #0]
 8014a8a:	4001      	ands	r1, r0
 8014a8c:	6019      	str	r1, [r3, #0]
 8014a8e:	685a      	ldr	r2, [r3, #4]
 8014a90:	4932      	ldr	r1, [pc, #200]	; (8014b5c <SystemInit+0xe8>)
 8014a92:	4011      	ands	r1, r2
 8014a94:	6059      	str	r1, [r3, #4]
 8014a96:	681a      	ldr	r2, [r3, #0]
 8014a98:	4002      	ands	r2, r0
 8014a9a:	601a      	str	r2, [r3, #0]
 8014a9c:	681a      	ldr	r2, [r3, #0]
 8014a9e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8014aa2:	601a      	str	r2, [r3, #0]
 8014aa4:	685a      	ldr	r2, [r3, #4]
 8014aa6:	f022 5203 	bic.w	r2, r2, #549453824	; 0x20c00000
 8014aaa:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8014aae:	605a      	str	r2, [r3, #4]
 8014ab0:	2200      	movs	r2, #0
 8014ab2:	62da      	str	r2, [r3, #44]	; 0x2c
 8014ab4:	681a      	ldr	r2, [r3, #0]
 8014ab6:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8014aba:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8014abe:	601a      	str	r2, [r3, #0]
 8014ac0:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8014ac4:	609a      	str	r2, [r3, #8]
 8014ac6:	681a      	ldr	r2, [r3, #0]
 8014ac8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8014acc:	601a      	str	r2, [r3, #0]
 8014ace:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014ad2:	6819      	ldr	r1, [r3, #0]
 8014ad4:	0389      	lsls	r1, r1, #14
 8014ad6:	d401      	bmi.n	8014adc <SystemInit+0x68>
 8014ad8:	3a01      	subs	r2, #1
 8014ada:	d1fa      	bne.n	8014ad2 <SystemInit+0x5e>
 8014adc:	681a      	ldr	r2, [r3, #0]
 8014ade:	0392      	lsls	r2, r2, #14
 8014ae0:	d400      	bmi.n	8014ae4 <SystemInit+0x70>
 8014ae2:	e7fe      	b.n	8014ae2 <SystemInit+0x6e>
 8014ae4:	685a      	ldr	r2, [r3, #4]
 8014ae6:	605a      	str	r2, [r3, #4]
 8014ae8:	685a      	ldr	r2, [r3, #4]
 8014aea:	605a      	str	r2, [r3, #4]
 8014aec:	685a      	ldr	r2, [r3, #4]
 8014aee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8014af2:	605a      	str	r2, [r3, #4]
 8014af4:	685a      	ldr	r2, [r3, #4]
 8014af6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8014afa:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 8014afe:	605a      	str	r2, [r3, #4]
 8014b00:	685a      	ldr	r2, [r3, #4]
 8014b02:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8014b06:	f442 1224 	orr.w	r2, r2, #2686976	; 0x290000
 8014b0a:	605a      	str	r2, [r3, #4]
 8014b0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8014b0e:	4a14      	ldr	r2, [pc, #80]	; (8014b60 <SystemInit+0xec>)
 8014b10:	400a      	ands	r2, r1
 8014b12:	62da      	str	r2, [r3, #44]	; 0x2c
 8014b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b16:	f442 3283 	orr.w	r2, r2, #67072	; 0x10600
 8014b1a:	f042 0249 	orr.w	r2, r2, #73	; 0x49
 8014b1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8014b20:	681a      	ldr	r2, [r3, #0]
 8014b22:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8014b26:	601a      	str	r2, [r3, #0]
 8014b28:	681a      	ldr	r2, [r3, #0]
 8014b2a:	0110      	lsls	r0, r2, #4
 8014b2c:	d5fc      	bpl.n	8014b28 <SystemInit+0xb4>
 8014b2e:	681a      	ldr	r2, [r3, #0]
 8014b30:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8014b34:	601a      	str	r2, [r3, #0]
 8014b36:	681a      	ldr	r2, [r3, #0]
 8014b38:	0191      	lsls	r1, r2, #6
 8014b3a:	d5fc      	bpl.n	8014b36 <SystemInit+0xc2>
 8014b3c:	685a      	ldr	r2, [r3, #4]
 8014b3e:	f022 0203 	bic.w	r2, r2, #3
 8014b42:	605a      	str	r2, [r3, #4]
 8014b44:	685a      	ldr	r2, [r3, #4]
 8014b46:	f042 0202 	orr.w	r2, r2, #2
 8014b4a:	605a      	str	r2, [r3, #4]
 8014b4c:	685a      	ldr	r2, [r3, #4]
 8014b4e:	0712      	lsls	r2, r2, #28
 8014b50:	d5fc      	bpl.n	8014b4c <SystemInit+0xd8>
 8014b52:	4770      	bx	lr
 8014b54:	40021000 	andmi	r1, r2, r0
 8014b58:	fef6ffff 	mrc2	15, 7, pc, cr6, cr15, {7}
 8014b5c:	e0ff000c 	rscs	r0, pc, ip
 8014b60:	fffef000 			; <UNDEFINED> instruction: 0xfffef000

08014b64 <fmc_bank0_unlock>:
 8014b64:	4b04      	ldr	r3, [pc, #16]	; (8014b78 <fmc_bank0_unlock+0x14>)
 8014b66:	691a      	ldr	r2, [r3, #16]
 8014b68:	0612      	lsls	r2, r2, #24
 8014b6a:	bf41      	itttt	mi
 8014b6c:	4a03      	ldrmi	r2, [pc, #12]	; (8014b7c <fmc_bank0_unlock+0x18>)
 8014b6e:	605a      	strmi	r2, [r3, #4]
 8014b70:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8014b74:	605a      	strmi	r2, [r3, #4]
 8014b76:	4770      	bx	lr
 8014b78:	40022000 	andmi	r2, r2, r0
 8014b7c:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08014b80 <fmc_bank1_unlock>:
 8014b80:	4b04      	ldr	r3, [pc, #16]	; (8014b94 <fmc_bank1_unlock+0x14>)
 8014b82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014b84:	0612      	lsls	r2, r2, #24
 8014b86:	bf41      	itttt	mi
 8014b88:	4a03      	ldrmi	r2, [pc, #12]	; (8014b98 <fmc_bank1_unlock+0x18>)
 8014b8a:	645a      	strmi	r2, [r3, #68]	; 0x44
 8014b8c:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8014b90:	645a      	strmi	r2, [r3, #68]	; 0x44
 8014b92:	4770      	bx	lr
 8014b94:	40022000 	andmi	r2, r2, r0
 8014b98:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08014b9c <fmc_bank0_lock>:
 8014b9c:	4a02      	ldr	r2, [pc, #8]	; (8014ba8 <fmc_bank0_lock+0xc>)
 8014b9e:	6913      	ldr	r3, [r2, #16]
 8014ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014ba4:	6113      	str	r3, [r2, #16]
 8014ba6:	4770      	bx	lr
 8014ba8:	40022000 	andmi	r2, r2, r0

08014bac <fmc_bank1_lock>:
 8014bac:	4a02      	ldr	r2, [pc, #8]	; (8014bb8 <fmc_bank1_lock+0xc>)
 8014bae:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8014bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014bb4:	6513      	str	r3, [r2, #80]	; 0x50
 8014bb6:	4770      	bx	lr
 8014bb8:	40022000 	andmi	r2, r2, r0

08014bbc <fmc_bank0_state_get>:
 8014bbc:	4b08      	ldr	r3, [pc, #32]	; (8014be0 <fmc_bank0_state_get+0x24>)
 8014bbe:	68da      	ldr	r2, [r3, #12]
 8014bc0:	07d1      	lsls	r1, r2, #31
 8014bc2:	d409      	bmi.n	8014bd8 <fmc_bank0_state_get+0x1c>
 8014bc4:	68da      	ldr	r2, [r3, #12]
 8014bc6:	06d2      	lsls	r2, r2, #27
 8014bc8:	d408      	bmi.n	8014bdc <fmc_bank0_state_get+0x20>
 8014bca:	68db      	ldr	r3, [r3, #12]
 8014bcc:	f013 0f04 	tst.w	r3, #4
 8014bd0:	bf0c      	ite	eq
 8014bd2:	2000      	moveq	r0, #0
 8014bd4:	2002      	movne	r0, #2
 8014bd6:	4770      	bx	lr
 8014bd8:	2001      	movs	r0, #1
 8014bda:	4770      	bx	lr
 8014bdc:	2003      	movs	r0, #3
 8014bde:	4770      	bx	lr
 8014be0:	40022000 	andmi	r2, r2, r0

08014be4 <fmc_bank1_state_get>:
 8014be4:	4b08      	ldr	r3, [pc, #32]	; (8014c08 <fmc_bank1_state_get+0x24>)
 8014be6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014be8:	07d1      	lsls	r1, r2, #31
 8014bea:	d409      	bmi.n	8014c00 <fmc_bank1_state_get+0x1c>
 8014bec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014bee:	06d2      	lsls	r2, r2, #27
 8014bf0:	d408      	bmi.n	8014c04 <fmc_bank1_state_get+0x20>
 8014bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014bf4:	f013 0f04 	tst.w	r3, #4
 8014bf8:	bf0c      	ite	eq
 8014bfa:	2000      	moveq	r0, #0
 8014bfc:	2002      	movne	r0, #2
 8014bfe:	4770      	bx	lr
 8014c00:	2001      	movs	r0, #1
 8014c02:	4770      	bx	lr
 8014c04:	2003      	movs	r0, #3
 8014c06:	4770      	bx	lr
 8014c08:	40022000 	andmi	r2, r2, r0

08014c0c <fwdgt_enable>:
 8014c0c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8014c10:	4b01      	ldr	r3, [pc, #4]	; (8014c18 <fwdgt_enable+0xc>)
 8014c12:	601a      	str	r2, [r3, #0]
 8014c14:	4770      	bx	lr
 8014c16:	bf00      	nop
 8014c18:	40003000 	andmi	r3, r0, r0

08014c1c <fwdgt_counter_reload>:
 8014c1c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8014c20:	4b01      	ldr	r3, [pc, #4]	; (8014c28 <fwdgt_counter_reload+0xc>)
 8014c22:	601a      	str	r2, [r3, #0]
 8014c24:	4770      	bx	lr
 8014c26:	bf00      	nop
 8014c28:	40003000 	andmi	r3, r0, r0

08014c2c <fwdgt_config>:
 8014c2c:	f245 5355 	movw	r3, #21845	; 0x5555
 8014c30:	4a11      	ldr	r2, [pc, #68]	; (8014c78 <fwdgt_config+0x4c>)
 8014c32:	b510      	push	{r4, lr}
 8014c34:	4c11      	ldr	r4, [pc, #68]	; (8014c7c <fwdgt_config+0x50>)
 8014c36:	6013      	str	r3, [r2, #0]
 8014c38:	68d3      	ldr	r3, [r2, #12]
 8014c3a:	3c01      	subs	r4, #1
 8014c3c:	f003 0301 	and.w	r3, r3, #1
 8014c40:	d013      	beq.n	8014c6a <fwdgt_config+0x3e>
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d1f8      	bne.n	8014c38 <fwdgt_config+0xc>
 8014c46:	6051      	str	r1, [r2, #4]
 8014c48:	490c      	ldr	r1, [pc, #48]	; (8014c7c <fwdgt_config+0x50>)
 8014c4a:	4a0b      	ldr	r2, [pc, #44]	; (8014c78 <fwdgt_config+0x4c>)
 8014c4c:	68d3      	ldr	r3, [r2, #12]
 8014c4e:	3901      	subs	r1, #1
 8014c50:	f003 0302 	and.w	r3, r3, #2
 8014c54:	d00d      	beq.n	8014c72 <fwdgt_config+0x46>
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d1f8      	bne.n	8014c4c <fwdgt_config+0x20>
 8014c5a:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8014c5e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8014c62:	6090      	str	r0, [r2, #8]
 8014c64:	2001      	movs	r0, #1
 8014c66:	6013      	str	r3, [r2, #0]
 8014c68:	e002      	b.n	8014c70 <fwdgt_config+0x44>
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d0eb      	beq.n	8014c46 <fwdgt_config+0x1a>
 8014c6e:	2000      	movs	r0, #0
 8014c70:	bd10      	pop	{r4, pc}
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d1fb      	bne.n	8014c6e <fwdgt_config+0x42>
 8014c76:	e7f0      	b.n	8014c5a <fwdgt_config+0x2e>
 8014c78:	40003000 	andmi	r3, r0, r0
 8014c7c:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08014c80 <gpio_init>:
 8014c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c84:	f04f 0c0f 	mov.w	ip, #15
 8014c88:	06cf      	lsls	r7, r1, #27
 8014c8a:	f04f 0400 	mov.w	r4, #0
 8014c8e:	f04f 0701 	mov.w	r7, #1
 8014c92:	f001 050f 	and.w	r5, r1, #15
 8014c96:	bf48      	it	mi
 8014c98:	4315      	orrmi	r5, r2
 8014c9a:	fa23 f204 	lsr.w	r2, r3, r4
 8014c9e:	07d6      	lsls	r6, r2, #31
 8014ca0:	d510      	bpl.n	8014cc4 <gpio_init+0x44>
 8014ca2:	00a2      	lsls	r2, r4, #2
 8014ca4:	6806      	ldr	r6, [r0, #0]
 8014ca6:	fa0c fe02 	lsl.w	lr, ip, r2
 8014caa:	ea26 060e 	bic.w	r6, r6, lr
 8014cae:	fa05 f202 	lsl.w	r2, r5, r2
 8014cb2:	2928      	cmp	r1, #40	; 0x28
 8014cb4:	ea42 0206 	orr.w	r2, r2, r6
 8014cb8:	d128      	bne.n	8014d0c <gpio_init+0x8c>
 8014cba:	fa07 f604 	lsl.w	r6, r7, r4
 8014cbe:	401e      	ands	r6, r3
 8014cc0:	6146      	str	r6, [r0, #20]
 8014cc2:	6002      	str	r2, [r0, #0]
 8014cc4:	3401      	adds	r4, #1
 8014cc6:	2c08      	cmp	r4, #8
 8014cc8:	d1e7      	bne.n	8014c9a <gpio_init+0x1a>
 8014cca:	2600      	movs	r6, #0
 8014ccc:	f04f 0c0f 	mov.w	ip, #15
 8014cd0:	2701      	movs	r7, #1
 8014cd2:	f106 0208 	add.w	r2, r6, #8
 8014cd6:	fa23 f402 	lsr.w	r4, r3, r2
 8014cda:	07e4      	lsls	r4, r4, #31
 8014cdc:	d511      	bpl.n	8014d02 <gpio_init+0x82>
 8014cde:	00b4      	lsls	r4, r6, #2
 8014ce0:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8014ce4:	fa0c f804 	lsl.w	r8, ip, r4
 8014ce8:	ea2e 0e08 	bic.w	lr, lr, r8
 8014cec:	fa05 f404 	lsl.w	r4, r5, r4
 8014cf0:	2928      	cmp	r1, #40	; 0x28
 8014cf2:	ea44 040e 	orr.w	r4, r4, lr
 8014cf6:	d110      	bne.n	8014d1a <gpio_init+0x9a>
 8014cf8:	fa07 f202 	lsl.w	r2, r7, r2
 8014cfc:	401a      	ands	r2, r3
 8014cfe:	6142      	str	r2, [r0, #20]
 8014d00:	6044      	str	r4, [r0, #4]
 8014d02:	3601      	adds	r6, #1
 8014d04:	2e08      	cmp	r6, #8
 8014d06:	d1e4      	bne.n	8014cd2 <gpio_init+0x52>
 8014d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d0c:	2948      	cmp	r1, #72	; 0x48
 8014d0e:	bf02      	ittt	eq
 8014d10:	fa07 f604 	lsleq.w	r6, r7, r4
 8014d14:	401e      	andeq	r6, r3
 8014d16:	6106      	streq	r6, [r0, #16]
 8014d18:	e7d3      	b.n	8014cc2 <gpio_init+0x42>
 8014d1a:	2948      	cmp	r1, #72	; 0x48
 8014d1c:	bf02      	ittt	eq
 8014d1e:	fa07 f202 	lsleq.w	r2, r7, r2
 8014d22:	401a      	andeq	r2, r3
 8014d24:	6102      	streq	r2, [r0, #16]
 8014d26:	e7eb      	b.n	8014d00 <gpio_init+0x80>

08014d28 <gpio_pin_remap_config>:
 8014d28:	2800      	cmp	r0, #0
 8014d2a:	4a16      	ldr	r2, [pc, #88]	; (8014d84 <gpio_pin_remap_config+0x5c>)
 8014d2c:	b530      	push	{r4, r5, lr}
 8014d2e:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 8014d32:	bfb4      	ite	lt
 8014d34:	69d3      	ldrlt	r3, [r2, #28]
 8014d36:	6853      	ldrge	r3, [r2, #4]
 8014d38:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
 8014d3c:	b284      	uxth	r4, r0
 8014d3e:	d110      	bne.n	8014d62 <gpio_pin_remap_config+0x3a>
 8014d40:	6855      	ldr	r5, [r2, #4]
 8014d42:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8014d46:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 8014d4a:	6055      	str	r5, [r2, #4]
 8014d4c:	b119      	cbz	r1, 8014d56 <gpio_pin_remap_config+0x2e>
 8014d4e:	0d42      	lsrs	r2, r0, #21
 8014d50:	0112      	lsls	r2, r2, #4
 8014d52:	4094      	lsls	r4, r2
 8014d54:	4323      	orrs	r3, r4
 8014d56:	4a0b      	ldr	r2, [pc, #44]	; (8014d84 <gpio_pin_remap_config+0x5c>)
 8014d58:	2800      	cmp	r0, #0
 8014d5a:	bfb4      	ite	lt
 8014d5c:	61d3      	strlt	r3, [r2, #28]
 8014d5e:	6053      	strge	r3, [r2, #4]
 8014d60:	bd30      	pop	{r4, r5, pc}
 8014d62:	02c2      	lsls	r2, r0, #11
 8014d64:	bf4d      	iteet	mi
 8014d66:	2203      	movmi	r2, #3
 8014d68:	0d42      	lsrpl	r2, r0, #21
 8014d6a:	0112      	lslpl	r2, r2, #4
 8014d6c:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
 8014d70:	bf4c      	ite	mi
 8014d72:	40aa      	lslmi	r2, r5
 8014d74:	fa04 f202 	lslpl.w	r2, r4, r2
 8014d78:	ea23 0302 	bic.w	r3, r3, r2
 8014d7c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8014d80:	e7e4      	b.n	8014d4c <gpio_pin_remap_config+0x24>
 8014d82:	bf00      	nop
 8014d84:	40010000 	andmi	r0, r1, r0

08014d88 <gpio_ethernet_phy_select>:
 8014d88:	4b04      	ldr	r3, [pc, #16]	; (8014d9c <gpio_ethernet_phy_select+0x14>)
 8014d8a:	6859      	ldr	r1, [r3, #4]
 8014d8c:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8014d90:	6059      	str	r1, [r3, #4]
 8014d92:	685a      	ldr	r2, [r3, #4]
 8014d94:	4302      	orrs	r2, r0
 8014d96:	605a      	str	r2, [r3, #4]
 8014d98:	4770      	bx	lr
 8014d9a:	bf00      	nop
 8014d9c:	40010000 	andmi	r0, r1, r0

08014da0 <rcu_periph_clock_enable>:
 8014da0:	2201      	movs	r2, #1
 8014da2:	0983      	lsrs	r3, r0, #6
 8014da4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014da8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8014dac:	6819      	ldr	r1, [r3, #0]
 8014dae:	f000 001f 	and.w	r0, r0, #31
 8014db2:	fa02 f000 	lsl.w	r0, r2, r0
 8014db6:	4308      	orrs	r0, r1
 8014db8:	6018      	str	r0, [r3, #0]
 8014dba:	4770      	bx	lr

08014dbc <rcu_periph_clock_disable>:
 8014dbc:	2101      	movs	r1, #1
 8014dbe:	0983      	lsrs	r3, r0, #6
 8014dc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014dc4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8014dc8:	681a      	ldr	r2, [r3, #0]
 8014dca:	f000 001f 	and.w	r0, r0, #31
 8014dce:	fa01 f000 	lsl.w	r0, r1, r0
 8014dd2:	ea22 0000 	bic.w	r0, r2, r0
 8014dd6:	6018      	str	r0, [r3, #0]
 8014dd8:	4770      	bx	lr

08014dda <rcu_periph_reset_enable>:
 8014dda:	f7ff bfe1 	b.w	8014da0 <rcu_periph_clock_enable>

08014dde <rcu_periph_reset_disable>:
 8014dde:	f7ff bfed 	b.w	8014dbc <rcu_periph_clock_disable>
	...

08014de4 <rcu_ckout0_config>:
 8014de4:	4a03      	ldr	r2, [pc, #12]	; (8014df4 <rcu_ckout0_config+0x10>)
 8014de6:	6853      	ldr	r3, [r2, #4]
 8014de8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8014dec:	4303      	orrs	r3, r0
 8014dee:	6053      	str	r3, [r2, #4]
 8014df0:	4770      	bx	lr
 8014df2:	bf00      	nop
 8014df4:	40021000 	andmi	r1, r2, r0

08014df8 <rcu_pll2_config>:
 8014df8:	4b04      	ldr	r3, [pc, #16]	; (8014e0c <rcu_pll2_config+0x14>)
 8014dfa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8014dfc:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
 8014e00:	62d9      	str	r1, [r3, #44]	; 0x2c
 8014e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e04:	4302      	orrs	r2, r0
 8014e06:	62da      	str	r2, [r3, #44]	; 0x2c
 8014e08:	4770      	bx	lr
 8014e0a:	bf00      	nop
 8014e0c:	40021000 	andmi	r1, r2, r0

08014e10 <rcu_adc_clock_config>:
 8014e10:	490c      	ldr	r1, [pc, #48]	; (8014e44 <rcu_adc_clock_config+0x34>)
 8014e12:	2805      	cmp	r0, #5
 8014e14:	684b      	ldr	r3, [r1, #4]
 8014e16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014e1a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8014e1e:	d006      	beq.n	8014e2e <rcu_adc_clock_config+0x1e>
 8014e20:	d803      	bhi.n	8014e2a <rcu_adc_clock_config+0x1a>
 8014e22:	2804      	cmp	r0, #4
 8014e24:	d10a      	bne.n	8014e3c <rcu_adc_clock_config+0x2c>
 8014e26:	604b      	str	r3, [r1, #4]
 8014e28:	4770      	bx	lr
 8014e2a:	2807      	cmp	r0, #7
 8014e2c:	d1fb      	bne.n	8014e26 <rcu_adc_clock_config+0x16>
 8014e2e:	4a06      	ldr	r2, [pc, #24]	; (8014e48 <rcu_adc_clock_config+0x38>)
 8014e30:	ea02 3080 	and.w	r0, r2, r0, lsl #14
 8014e34:	4303      	orrs	r3, r0
 8014e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014e3a:	e7f4      	b.n	8014e26 <rcu_adc_clock_config+0x16>
 8014e3c:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 8014e40:	e7f1      	b.n	8014e26 <rcu_adc_clock_config+0x16>
 8014e42:	bf00      	nop
 8014e44:	40021000 	andmi	r1, r2, r0
 8014e48:	fffec000 			; <UNDEFINED> instruction: 0xfffec000

08014e4c <rcu_flag_get>:
 8014e4c:	0983      	lsrs	r3, r0, #6
 8014e4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014e52:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	f000 001f 	and.w	r0, r0, #31
 8014e5c:	fa23 f000 	lsr.w	r0, r3, r0
 8014e60:	f000 0001 	and.w	r0, r0, #1
 8014e64:	4770      	bx	lr
	...

08014e68 <rcu_osci_stab_wait>:
 8014e68:	281a      	cmp	r0, #26
 8014e6a:	b508      	push	{r3, lr}
 8014e6c:	d051      	beq.n	8014f12 <rcu_osci_stab_wait+0xaa>
 8014e6e:	d806      	bhi.n	8014e7e <rcu_osci_stab_wait+0x16>
 8014e70:	2810      	cmp	r0, #16
 8014e72:	d015      	beq.n	8014ea0 <rcu_osci_stab_wait+0x38>
 8014e74:	2818      	cmp	r0, #24
 8014e76:	d043      	beq.n	8014f00 <rcu_osci_stab_wait+0x98>
 8014e78:	b368      	cbz	r0, 8014ed6 <rcu_osci_stab_wait+0x6e>
 8014e7a:	2000      	movs	r0, #0
 8014e7c:	bd08      	pop	{r3, pc}
 8014e7e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8014e82:	d01c      	beq.n	8014ebe <rcu_osci_stab_wait+0x56>
 8014e84:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
 8014e88:	d02f      	beq.n	8014eea <rcu_osci_stab_wait+0x82>
 8014e8a:	281c      	cmp	r0, #28
 8014e8c:	d1f5      	bne.n	8014e7a <rcu_osci_stab_wait+0x12>
 8014e8e:	4a25      	ldr	r2, [pc, #148]	; (8014f24 <rcu_osci_stab_wait+0xbc>)
 8014e90:	201d      	movs	r0, #29
 8014e92:	f7ff ffdb 	bl	8014e4c <rcu_flag_get>
 8014e96:	b908      	cbnz	r0, 8014e9c <rcu_osci_stab_wait+0x34>
 8014e98:	3a01      	subs	r2, #1
 8014e9a:	d1f9      	bne.n	8014e90 <rcu_osci_stab_wait+0x28>
 8014e9c:	201d      	movs	r0, #29
 8014e9e:	e008      	b.n	8014eb2 <rcu_osci_stab_wait+0x4a>
 8014ea0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014ea4:	2011      	movs	r0, #17
 8014ea6:	f7ff ffd1 	bl	8014e4c <rcu_flag_get>
 8014eaa:	b908      	cbnz	r0, 8014eb0 <rcu_osci_stab_wait+0x48>
 8014eac:	3a01      	subs	r2, #1
 8014eae:	d1f9      	bne.n	8014ea4 <rcu_osci_stab_wait+0x3c>
 8014eb0:	2011      	movs	r0, #17
 8014eb2:	f7ff ffcb 	bl	8014e4c <rcu_flag_get>
 8014eb6:	3800      	subs	r0, #0
 8014eb8:	bf18      	it	ne
 8014eba:	2001      	movne	r0, #1
 8014ebc:	e7de      	b.n	8014e7c <rcu_osci_stab_wait+0x14>
 8014ebe:	f06f 427c 	mvn.w	r2, #4227858432	; 0xfc000000
 8014ec2:	f640 0001 	movw	r0, #2049	; 0x801
 8014ec6:	f7ff ffc1 	bl	8014e4c <rcu_flag_get>
 8014eca:	b908      	cbnz	r0, 8014ed0 <rcu_osci_stab_wait+0x68>
 8014ecc:	3a01      	subs	r2, #1
 8014ece:	d1f8      	bne.n	8014ec2 <rcu_osci_stab_wait+0x5a>
 8014ed0:	f640 0001 	movw	r0, #2049	; 0x801
 8014ed4:	e7ed      	b.n	8014eb2 <rcu_osci_stab_wait+0x4a>
 8014ed6:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8014eda:	2001      	movs	r0, #1
 8014edc:	f7ff ffb6 	bl	8014e4c <rcu_flag_get>
 8014ee0:	b908      	cbnz	r0, 8014ee6 <rcu_osci_stab_wait+0x7e>
 8014ee2:	3a01      	subs	r2, #1
 8014ee4:	d1f9      	bne.n	8014eda <rcu_osci_stab_wait+0x72>
 8014ee6:	2001      	movs	r0, #1
 8014ee8:	e7e3      	b.n	8014eb2 <rcu_osci_stab_wait+0x4a>
 8014eea:	4a0e      	ldr	r2, [pc, #56]	; (8014f24 <rcu_osci_stab_wait+0xbc>)
 8014eec:	f640 1001 	movw	r0, #2305	; 0x901
 8014ef0:	f7ff ffac 	bl	8014e4c <rcu_flag_get>
 8014ef4:	b908      	cbnz	r0, 8014efa <rcu_osci_stab_wait+0x92>
 8014ef6:	3a01      	subs	r2, #1
 8014ef8:	d1f8      	bne.n	8014eec <rcu_osci_stab_wait+0x84>
 8014efa:	f640 1001 	movw	r0, #2305	; 0x901
 8014efe:	e7d8      	b.n	8014eb2 <rcu_osci_stab_wait+0x4a>
 8014f00:	4a08      	ldr	r2, [pc, #32]	; (8014f24 <rcu_osci_stab_wait+0xbc>)
 8014f02:	2019      	movs	r0, #25
 8014f04:	f7ff ffa2 	bl	8014e4c <rcu_flag_get>
 8014f08:	b908      	cbnz	r0, 8014f0e <rcu_osci_stab_wait+0xa6>
 8014f0a:	3a01      	subs	r2, #1
 8014f0c:	d1f9      	bne.n	8014f02 <rcu_osci_stab_wait+0x9a>
 8014f0e:	2019      	movs	r0, #25
 8014f10:	e7cf      	b.n	8014eb2 <rcu_osci_stab_wait+0x4a>
 8014f12:	4a04      	ldr	r2, [pc, #16]	; (8014f24 <rcu_osci_stab_wait+0xbc>)
 8014f14:	201b      	movs	r0, #27
 8014f16:	f7ff ff99 	bl	8014e4c <rcu_flag_get>
 8014f1a:	b908      	cbnz	r0, 8014f20 <rcu_osci_stab_wait+0xb8>
 8014f1c:	3a01      	subs	r2, #1
 8014f1e:	d1f9      	bne.n	8014f14 <rcu_osci_stab_wait+0xac>
 8014f20:	201b      	movs	r0, #27
 8014f22:	e7c6      	b.n	8014eb2 <rcu_osci_stab_wait+0x4a>
 8014f24:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08014f28 <rcu_osci_on>:
 8014f28:	f7ff bf3a 	b.w	8014da0 <rcu_periph_clock_enable>

08014f2c <rcu_clock_freq_get>:
 8014f2c:	4b3d      	ldr	r3, [pc, #244]	; (8015024 <rcu_clock_freq_get+0xf8>)
 8014f2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f30:	4604      	mov	r4, r0
 8014f32:	461f      	mov	r7, r3
 8014f34:	b089      	sub	sp, #36	; 0x24
 8014f36:	ad04      	add	r5, sp, #16
 8014f38:	f103 0610 	add.w	r6, r3, #16
 8014f3c:	462a      	mov	r2, r5
 8014f3e:	6818      	ldr	r0, [r3, #0]
 8014f40:	6859      	ldr	r1, [r3, #4]
 8014f42:	3308      	adds	r3, #8
 8014f44:	c203      	stmia	r2!, {r0, r1}
 8014f46:	42b3      	cmp	r3, r6
 8014f48:	4615      	mov	r5, r2
 8014f4a:	d1f7      	bne.n	8014f3c <rcu_clock_freq_get+0x10>
 8014f4c:	466b      	mov	r3, sp
 8014f4e:	6938      	ldr	r0, [r7, #16]
 8014f50:	6871      	ldr	r1, [r6, #4]
 8014f52:	4a35      	ldr	r2, [pc, #212]	; (8015028 <rcu_clock_freq_get+0xfc>)
 8014f54:	c303      	stmia	r3!, {r0, r1}
 8014f56:	c303      	stmia	r3!, {r0, r1}
 8014f58:	6853      	ldr	r3, [r2, #4]
 8014f5a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8014f5e:	2b01      	cmp	r3, #1
 8014f60:	d053      	beq.n	801500a <rcu_clock_freq_get+0xde>
 8014f62:	2b02      	cmp	r3, #2
 8014f64:	d153      	bne.n	801500e <rcu_clock_freq_get+0xe2>
 8014f66:	6853      	ldr	r3, [r2, #4]
 8014f68:	03dd      	lsls	r5, r3, #15
 8014f6a:	d523      	bpl.n	8014fb4 <rcu_clock_freq_get+0x88>
 8014f6c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8014f6e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8014f72:	4b2e      	ldr	r3, [pc, #184]	; (801502c <rcu_clock_freq_get+0x100>)
 8014f74:	d00e      	beq.n	8014f94 <rcu_clock_freq_get+0x68>
 8014f76:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8014f78:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8014f7a:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8014f7e:	f3c0 2003 	ubfx	r0, r0, #8, #4
 8014f82:	3101      	adds	r1, #1
 8014f84:	280f      	cmp	r0, #15
 8014f86:	f100 0502 	add.w	r5, r0, #2
 8014f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8014f8e:	bf08      	it	eq
 8014f90:	2514      	moveq	r5, #20
 8014f92:	436b      	muls	r3, r5
 8014f94:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8014f96:	f001 010f 	and.w	r1, r1, #15
 8014f9a:	3101      	adds	r1, #1
 8014f9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8014fa0:	6851      	ldr	r1, [r2, #4]
 8014fa2:	6850      	ldr	r0, [r2, #4]
 8014fa4:	f3c1 4183 	ubfx	r1, r1, #18, #4
 8014fa8:	0080      	lsls	r0, r0, #2
 8014faa:	d505      	bpl.n	8014fb8 <rcu_clock_freq_get+0x8c>
 8014fac:	f041 0110 	orr.w	r1, r1, #16
 8014fb0:	1c48      	adds	r0, r1, #1
 8014fb2:	e007      	b.n	8014fc4 <rcu_clock_freq_get+0x98>
 8014fb4:	4b1e      	ldr	r3, [pc, #120]	; (8015030 <rcu_clock_freq_get+0x104>)
 8014fb6:	e7f3      	b.n	8014fa0 <rcu_clock_freq_get+0x74>
 8014fb8:	290f      	cmp	r1, #15
 8014fba:	d0f9      	beq.n	8014fb0 <rcu_clock_freq_get+0x84>
 8014fbc:	290d      	cmp	r1, #13
 8014fbe:	f101 0002 	add.w	r0, r1, #2
 8014fc2:	d01d      	beq.n	8015000 <rcu_clock_freq_get+0xd4>
 8014fc4:	4343      	muls	r3, r0
 8014fc6:	6851      	ldr	r1, [r2, #4]
 8014fc8:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8014fcc:	3120      	adds	r1, #32
 8014fce:	4469      	add	r1, sp
 8014fd0:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 8014fd4:	fa23 f001 	lsr.w	r0, r3, r1
 8014fd8:	6851      	ldr	r1, [r2, #4]
 8014fda:	6852      	ldr	r2, [r2, #4]
 8014fdc:	f3c1 2102 	ubfx	r1, r1, #8, #3
 8014fe0:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 8014fe4:	3120      	adds	r1, #32
 8014fe6:	3220      	adds	r2, #32
 8014fe8:	4469      	add	r1, sp
 8014fea:	446a      	add	r2, sp
 8014fec:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 8014ff0:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8014ff4:	2c03      	cmp	r4, #3
 8014ff6:	d813      	bhi.n	8015020 <rcu_clock_freq_get+0xf4>
 8014ff8:	e8df f004 	tbb	[pc, r4]
 8014ffc:	100e0c0b 	andne	r0, lr, fp, lsl #24
 8015000:	2006      	movs	r0, #6
 8015002:	0859      	lsrs	r1, r3, #1
 8015004:	fb00 1303 	mla	r3, r0, r3, r1
 8015008:	e7dd      	b.n	8014fc6 <rcu_clock_freq_get+0x9a>
 801500a:	4b08      	ldr	r3, [pc, #32]	; (801502c <rcu_clock_freq_get+0x100>)
 801500c:	e7db      	b.n	8014fc6 <rcu_clock_freq_get+0x9a>
 801500e:	4b09      	ldr	r3, [pc, #36]	; (8015034 <rcu_clock_freq_get+0x108>)
 8015010:	e7d9      	b.n	8014fc6 <rcu_clock_freq_get+0x9a>
 8015012:	4618      	mov	r0, r3
 8015014:	b009      	add	sp, #36	; 0x24
 8015016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015018:	40c8      	lsrs	r0, r1
 801501a:	e7fb      	b.n	8015014 <rcu_clock_freq_get+0xe8>
 801501c:	40d0      	lsrs	r0, r2
 801501e:	e7f9      	b.n	8015014 <rcu_clock_freq_get+0xe8>
 8015020:	2000      	movs	r0, #0
 8015022:	e7f7      	b.n	8015014 <rcu_clock_freq_get+0xe8>
 8015024:	080167f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r8, r9, sl, sp, lr}
 8015028:	40021000 	andmi	r1, r2, r0
 801502c:	017d7840 	cmneq	sp, r0, asr #16
 8015030:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8015034:	007a1200 	rsbseq	r1, sl, r0, lsl #4

08015038 <timer_deinit>:
 8015038:	b508      	push	{r3, lr}
 801503a:	4b2d      	ldr	r3, [pc, #180]	; (80150f0 <timer_deinit+0xb8>)
 801503c:	4298      	cmp	r0, r3
 801503e:	d048      	beq.n	80150d2 <timer_deinit+0x9a>
 8015040:	d816      	bhi.n	8015070 <timer_deinit+0x38>
 8015042:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015046:	4298      	cmp	r0, r3
 8015048:	d03c      	beq.n	80150c4 <timer_deinit+0x8c>
 801504a:	d807      	bhi.n	801505c <timer_deinit+0x24>
 801504c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8015050:	d02a      	beq.n	80150a8 <timer_deinit+0x70>
 8015052:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8015056:	4298      	cmp	r0, r3
 8015058:	d02d      	beq.n	80150b6 <timer_deinit+0x7e>
 801505a:	bd08      	pop	{r3, pc}
 801505c:	4b25      	ldr	r3, [pc, #148]	; (80150f4 <timer_deinit+0xbc>)
 801505e:	4298      	cmp	r0, r3
 8015060:	d1fb      	bne.n	801505a <timer_deinit+0x22>
 8015062:	f240 4003 	movw	r0, #1027	; 0x403
 8015066:	f7ff feb8 	bl	8014dda <rcu_periph_reset_enable>
 801506a:	f240 4003 	movw	r0, #1027	; 0x403
 801506e:	e017      	b.n	80150a0 <timer_deinit+0x68>
 8015070:	4b21      	ldr	r3, [pc, #132]	; (80150f8 <timer_deinit+0xc0>)
 8015072:	4298      	cmp	r0, r3
 8015074:	d00e      	beq.n	8015094 <timer_deinit+0x5c>
 8015076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801507a:	4298      	cmp	r0, r3
 801507c:	d030      	beq.n	80150e0 <timer_deinit+0xa8>
 801507e:	f5a3 3390 	sub.w	r3, r3, #73728	; 0x12000
 8015082:	4298      	cmp	r0, r3
 8015084:	d1e9      	bne.n	801505a <timer_deinit+0x22>
 8015086:	f240 4005 	movw	r0, #1029	; 0x405
 801508a:	f7ff fea6 	bl	8014dda <rcu_periph_reset_enable>
 801508e:	f240 4005 	movw	r0, #1029	; 0x405
 8015092:	e005      	b.n	80150a0 <timer_deinit+0x68>
 8015094:	f240 300b 	movw	r0, #779	; 0x30b
 8015098:	f7ff fe9f 	bl	8014dda <rcu_periph_reset_enable>
 801509c:	f240 300b 	movw	r0, #779	; 0x30b
 80150a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80150a4:	f7ff be9b 	b.w	8014dde <rcu_periph_reset_disable>
 80150a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80150ac:	f7ff fe95 	bl	8014dda <rcu_periph_reset_enable>
 80150b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80150b4:	e7f4      	b.n	80150a0 <timer_deinit+0x68>
 80150b6:	f240 4001 	movw	r0, #1025	; 0x401
 80150ba:	f7ff fe8e 	bl	8014dda <rcu_periph_reset_enable>
 80150be:	f240 4001 	movw	r0, #1025	; 0x401
 80150c2:	e7ed      	b.n	80150a0 <timer_deinit+0x68>
 80150c4:	f240 4002 	movw	r0, #1026	; 0x402
 80150c8:	f7ff fe87 	bl	8014dda <rcu_periph_reset_enable>
 80150cc:	f240 4002 	movw	r0, #1026	; 0x402
 80150d0:	e7e6      	b.n	80150a0 <timer_deinit+0x68>
 80150d2:	f240 4004 	movw	r0, #1028	; 0x404
 80150d6:	f7ff fe80 	bl	8014dda <rcu_periph_reset_enable>
 80150da:	f240 4004 	movw	r0, #1028	; 0x404
 80150de:	e7df      	b.n	80150a0 <timer_deinit+0x68>
 80150e0:	f240 300d 	movw	r0, #781	; 0x30d
 80150e4:	f7ff fe79 	bl	8014dda <rcu_periph_reset_enable>
 80150e8:	f240 300d 	movw	r0, #781	; 0x30d
 80150ec:	e7d8      	b.n	80150a0 <timer_deinit+0x68>
 80150ee:	bf00      	nop
 80150f0:	40001000 	andmi	r1, r0, r0
 80150f4:	40000c00 	andmi	r0, r0, r0, lsl #24
 80150f8:	40012c00 	andmi	r2, r1, r0, lsl #24

080150fc <timer_init>:
 80150fc:	880b      	ldrh	r3, [r1, #0]
 80150fe:	6283      	str	r3, [r0, #40]	; 0x28
 8015100:	4b26      	ldr	r3, [pc, #152]	; (801519c <timer_init+0xa0>)
 8015102:	4298      	cmp	r0, r3
 8015104:	d018      	beq.n	8015138 <timer_init+0x3c>
 8015106:	f420 6240 	bic.w	r2, r0, #3072	; 0xc00
 801510a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 801510e:	f420 6380 	bic.w	r3, r0, #1024	; 0x400
 8015112:	d011      	beq.n	8015138 <timer_init+0x3c>
 8015114:	4a22      	ldr	r2, [pc, #136]	; (80151a0 <timer_init+0xa4>)
 8015116:	4290      	cmp	r0, r2
 8015118:	d00e      	beq.n	8015138 <timer_init+0x3c>
 801511a:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 801511e:	4290      	cmp	r0, r2
 8015120:	d00a      	beq.n	8015138 <timer_init+0x3c>
 8015122:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8015126:	4293      	cmp	r3, r2
 8015128:	d006      	beq.n	8015138 <timer_init+0x3c>
 801512a:	f5a2 329c 	sub.w	r2, r2, #79872	; 0x13800
 801512e:	4293      	cmp	r3, r2
 8015130:	d002      	beq.n	8015138 <timer_init+0x3c>
 8015132:	4b1c      	ldr	r3, [pc, #112]	; (80151a4 <timer_init+0xa8>)
 8015134:	4298      	cmp	r0, r3
 8015136:	d10f      	bne.n	8015158 <timer_init+0x5c>
 8015138:	6803      	ldr	r3, [r0, #0]
 801513a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801513e:	6003      	str	r3, [r0, #0]
 8015140:	884b      	ldrh	r3, [r1, #2]
 8015142:	6802      	ldr	r2, [r0, #0]
 8015144:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015148:	4313      	orrs	r3, r2
 801514a:	6003      	str	r3, [r0, #0]
 801514c:	888b      	ldrh	r3, [r1, #4]
 801514e:	6802      	ldr	r2, [r0, #0]
 8015150:	f003 0310 	and.w	r3, r3, #16
 8015154:	4313      	orrs	r3, r2
 8015156:	6003      	str	r3, [r0, #0]
 8015158:	688b      	ldr	r3, [r1, #8]
 801515a:	62c3      	str	r3, [r0, #44]	; 0x2c
 801515c:	4b12      	ldr	r3, [pc, #72]	; (80151a8 <timer_init+0xac>)
 801515e:	4298      	cmp	r0, r3
 8015160:	d003      	beq.n	801516a <timer_init+0x6e>
 8015162:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015166:	4298      	cmp	r0, r3
 8015168:	d104      	bne.n	8015174 <timer_init+0x78>
 801516a:	6943      	ldr	r3, [r0, #20]
 801516c:	f043 0301 	orr.w	r3, r3, #1
 8015170:	6143      	str	r3, [r0, #20]
 8015172:	4770      	bx	lr
 8015174:	6803      	ldr	r3, [r0, #0]
 8015176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801517a:	6003      	str	r3, [r0, #0]
 801517c:	898b      	ldrh	r3, [r1, #12]
 801517e:	6802      	ldr	r2, [r0, #0]
 8015180:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015184:	4313      	orrs	r3, r2
 8015186:	6003      	str	r3, [r0, #0]
 8015188:	4b04      	ldr	r3, [pc, #16]	; (801519c <timer_init+0xa0>)
 801518a:	4298      	cmp	r0, r3
 801518c:	d002      	beq.n	8015194 <timer_init+0x98>
 801518e:	4b04      	ldr	r3, [pc, #16]	; (80151a0 <timer_init+0xa4>)
 8015190:	4298      	cmp	r0, r3
 8015192:	d1ea      	bne.n	801516a <timer_init+0x6e>
 8015194:	7b8b      	ldrb	r3, [r1, #14]
 8015196:	6303      	str	r3, [r0, #48]	; 0x30
 8015198:	e7e7      	b.n	801516a <timer_init+0x6e>
 801519a:	bf00      	nop
 801519c:	40012c00 	andmi	r2, r1, r0, lsl #24
 80151a0:	40013400 	andmi	r3, r1, r0, lsl #8
 80151a4:	40002000 	andmi	r2, r0, r0
 80151a8:	40001000 	andmi	r1, r0, r0

080151ac <timer_enable>:
 80151ac:	6803      	ldr	r3, [r0, #0]
 80151ae:	f043 0301 	orr.w	r3, r3, #1
 80151b2:	6003      	str	r3, [r0, #0]
 80151b4:	4770      	bx	lr
	...

080151b8 <usart_deinit>:
 80151b8:	b508      	push	{r3, lr}
 80151ba:	4b1d      	ldr	r3, [pc, #116]	; (8015230 <usart_deinit+0x78>)
 80151bc:	4298      	cmp	r0, r3
 80151be:	d028      	beq.n	8015212 <usart_deinit+0x5a>
 80151c0:	d808      	bhi.n	80151d4 <usart_deinit+0x1c>
 80151c2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80151c6:	4298      	cmp	r0, r3
 80151c8:	d015      	beq.n	80151f6 <usart_deinit+0x3e>
 80151ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80151ce:	4298      	cmp	r0, r3
 80151d0:	d018      	beq.n	8015204 <usart_deinit+0x4c>
 80151d2:	bd08      	pop	{r3, pc}
 80151d4:	4b17      	ldr	r3, [pc, #92]	; (8015234 <usart_deinit+0x7c>)
 80151d6:	4298      	cmp	r0, r3
 80151d8:	d022      	beq.n	8015220 <usart_deinit+0x68>
 80151da:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 80151de:	4298      	cmp	r0, r3
 80151e0:	d1f7      	bne.n	80151d2 <usart_deinit+0x1a>
 80151e2:	f240 300e 	movw	r0, #782	; 0x30e
 80151e6:	f7ff fdf8 	bl	8014dda <rcu_periph_reset_enable>
 80151ea:	f240 300e 	movw	r0, #782	; 0x30e
 80151ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80151f2:	f7ff bdf4 	b.w	8014dde <rcu_periph_reset_disable>
 80151f6:	f240 4011 	movw	r0, #1041	; 0x411
 80151fa:	f7ff fdee 	bl	8014dda <rcu_periph_reset_enable>
 80151fe:	f240 4011 	movw	r0, #1041	; 0x411
 8015202:	e7f4      	b.n	80151ee <usart_deinit+0x36>
 8015204:	f240 4012 	movw	r0, #1042	; 0x412
 8015208:	f7ff fde7 	bl	8014dda <rcu_periph_reset_enable>
 801520c:	f240 4012 	movw	r0, #1042	; 0x412
 8015210:	e7ed      	b.n	80151ee <usart_deinit+0x36>
 8015212:	f240 4013 	movw	r0, #1043	; 0x413
 8015216:	f7ff fde0 	bl	8014dda <rcu_periph_reset_enable>
 801521a:	f240 4013 	movw	r0, #1043	; 0x413
 801521e:	e7e6      	b.n	80151ee <usart_deinit+0x36>
 8015220:	f240 4014 	movw	r0, #1044	; 0x414
 8015224:	f7ff fdd9 	bl	8014dda <rcu_periph_reset_enable>
 8015228:	f240 4014 	movw	r0, #1044	; 0x414
 801522c:	e7df      	b.n	80151ee <usart_deinit+0x36>
 801522e:	bf00      	nop
 8015230:	40004c00 	andmi	r4, r0, r0, lsl #24
 8015234:	40005000 	andmi	r5, r0, r0

08015238 <usart_baudrate_set>:
 8015238:	b538      	push	{r3, r4, r5, lr}
 801523a:	4b11      	ldr	r3, [pc, #68]	; (8015280 <usart_baudrate_set+0x48>)
 801523c:	4604      	mov	r4, r0
 801523e:	4298      	cmp	r0, r3
 8015240:	460d      	mov	r5, r1
 8015242:	d01b      	beq.n	801527c <usart_baudrate_set+0x44>
 8015244:	d809      	bhi.n	801525a <usart_baudrate_set+0x22>
 8015246:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801524a:	4298      	cmp	r0, r3
 801524c:	d016      	beq.n	801527c <usart_baudrate_set+0x44>
 801524e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015252:	4298      	cmp	r0, r3
 8015254:	d012      	beq.n	801527c <usart_baudrate_set+0x44>
 8015256:	2000      	movs	r0, #0
 8015258:	e009      	b.n	801526e <usart_baudrate_set+0x36>
 801525a:	4b0a      	ldr	r3, [pc, #40]	; (8015284 <usart_baudrate_set+0x4c>)
 801525c:	4298      	cmp	r0, r3
 801525e:	d00d      	beq.n	801527c <usart_baudrate_set+0x44>
 8015260:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8015264:	4298      	cmp	r0, r3
 8015266:	d1f6      	bne.n	8015256 <usart_baudrate_set+0x1e>
 8015268:	2003      	movs	r0, #3
 801526a:	f7ff fe5f 	bl	8014f2c <rcu_clock_freq_get>
 801526e:	eb00 0355 	add.w	r3, r0, r5, lsr #1
 8015272:	fbb3 f1f5 	udiv	r1, r3, r5
 8015276:	b289      	uxth	r1, r1
 8015278:	60a1      	str	r1, [r4, #8]
 801527a:	bd38      	pop	{r3, r4, r5, pc}
 801527c:	2002      	movs	r0, #2
 801527e:	e7f4      	b.n	801526a <usart_baudrate_set+0x32>
 8015280:	40004c00 	andmi	r4, r0, r0, lsl #24
 8015284:	40005000 	andmi	r5, r0, r0

08015288 <usart_parity_config>:
 8015288:	68c2      	ldr	r2, [r0, #12]
 801528a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 801528e:	60c2      	str	r2, [r0, #12]
 8015290:	68c3      	ldr	r3, [r0, #12]
 8015292:	430b      	orrs	r3, r1
 8015294:	60c3      	str	r3, [r0, #12]
 8015296:	4770      	bx	lr

08015298 <usart_word_length_set>:
 8015298:	68c2      	ldr	r2, [r0, #12]
 801529a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801529e:	60c2      	str	r2, [r0, #12]
 80152a0:	68c3      	ldr	r3, [r0, #12]
 80152a2:	430b      	orrs	r3, r1
 80152a4:	60c3      	str	r3, [r0, #12]
 80152a6:	4770      	bx	lr

080152a8 <usart_stop_bit_set>:
 80152a8:	6902      	ldr	r2, [r0, #16]
 80152aa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80152ae:	6102      	str	r2, [r0, #16]
 80152b0:	6903      	ldr	r3, [r0, #16]
 80152b2:	430b      	orrs	r3, r1
 80152b4:	6103      	str	r3, [r0, #16]
 80152b6:	4770      	bx	lr

080152b8 <usart_transmit_config>:
 80152b8:	68c3      	ldr	r3, [r0, #12]
 80152ba:	f023 0308 	bic.w	r3, r3, #8
 80152be:	430b      	orrs	r3, r1
 80152c0:	60c3      	str	r3, [r0, #12]
 80152c2:	4770      	bx	lr

080152c4 <usart_receive_config>:
 80152c4:	68c3      	ldr	r3, [r0, #12]
 80152c6:	f023 0304 	bic.w	r3, r3, #4
 80152ca:	430b      	orrs	r3, r1
 80152cc:	60c3      	str	r3, [r0, #12]
 80152ce:	4770      	bx	lr

080152d0 <usart_hardware_flow_rts_config>:
 80152d0:	6943      	ldr	r3, [r0, #20]
 80152d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80152d6:	430b      	orrs	r3, r1
 80152d8:	6143      	str	r3, [r0, #20]
 80152da:	4770      	bx	lr

080152dc <usart_hardware_flow_cts_config>:
 80152dc:	6943      	ldr	r3, [r0, #20]
 80152de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80152e2:	430b      	orrs	r3, r1
 80152e4:	6143      	str	r3, [r0, #20]
 80152e6:	4770      	bx	lr

080152e8 <usart_flag_get>:
 80152e8:	098b      	lsrs	r3, r1, #6
 80152ea:	5818      	ldr	r0, [r3, r0]
 80152ec:	f001 011f 	and.w	r1, r1, #31
 80152f0:	40c8      	lsrs	r0, r1
 80152f2:	f000 0001 	and.w	r0, r0, #1
 80152f6:	4770      	bx	lr

080152f8 <emac_start>:
 80152f8:	b510      	push	{r4, lr}
 80152fa:	4604      	mov	r4, r0
 80152fc:	f240 6002 	movw	r0, #1538	; 0x602
 8015300:	f7ff fd4e 	bl	8014da0 <rcu_periph_clock_enable>
 8015304:	f240 6003 	movw	r0, #1539	; 0x603
 8015308:	f7ff fd4a 	bl	8014da0 <rcu_periph_clock_enable>
 801530c:	f240 6004 	movw	r0, #1540	; 0x604
 8015310:	f7ff fd46 	bl	8014da0 <rcu_periph_clock_enable>
 8015314:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015318:	2203      	movs	r2, #3
 801531a:	2118      	movs	r1, #24
 801531c:	4846      	ldr	r0, [pc, #280]	; (8015438 <emac_start+0x140>)
 801531e:	f7ff fcaf 	bl	8014c80 <gpio_init>
 8015322:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8015326:	f7ff fd3b 	bl	8014da0 <rcu_periph_clock_enable>
 801532a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 801532e:	f7ff fd63 	bl	8014df8 <rcu_pll2_config>
 8015332:	201c      	movs	r0, #28
 8015334:	f7ff fdf8 	bl	8014f28 <rcu_osci_on>
 8015338:	201c      	movs	r0, #28
 801533a:	f7ff fd95 	bl	8014e68 <rcu_osci_stab_wait>
 801533e:	f04f 6030 	mov.w	r0, #184549376	; 0xb000000
 8015342:	f7ff fd4f 	bl	8014de4 <rcu_ckout0_config>
 8015346:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 801534a:	f7ff fd1d 	bl	8014d88 <gpio_ethernet_phy_select>
 801534e:	2302      	movs	r3, #2
 8015350:	2203      	movs	r2, #3
 8015352:	2104      	movs	r1, #4
 8015354:	4838      	ldr	r0, [pc, #224]	; (8015438 <emac_start+0x140>)
 8015356:	f7ff fc93 	bl	8014c80 <gpio_init>
 801535a:	2304      	movs	r3, #4
 801535c:	2203      	movs	r2, #3
 801535e:	2118      	movs	r1, #24
 8015360:	4835      	ldr	r0, [pc, #212]	; (8015438 <emac_start+0x140>)
 8015362:	f7ff fc8d 	bl	8014c80 <gpio_init>
 8015366:	2380      	movs	r3, #128	; 0x80
 8015368:	2203      	movs	r2, #3
 801536a:	2104      	movs	r1, #4
 801536c:	4832      	ldr	r0, [pc, #200]	; (8015438 <emac_start+0x140>)
 801536e:	f7ff fc87 	bl	8014c80 <gpio_init>
 8015372:	2302      	movs	r3, #2
 8015374:	2203      	movs	r2, #3
 8015376:	2118      	movs	r1, #24
 8015378:	4830      	ldr	r0, [pc, #192]	; (801543c <emac_start+0x144>)
 801537a:	f7ff fc81 	bl	8014c80 <gpio_init>
 801537e:	2310      	movs	r3, #16
 8015380:	2203      	movs	r2, #3
 8015382:	2104      	movs	r1, #4
 8015384:	482d      	ldr	r0, [pc, #180]	; (801543c <emac_start+0x144>)
 8015386:	f7ff fc7b 	bl	8014c80 <gpio_init>
 801538a:	2320      	movs	r3, #32
 801538c:	2203      	movs	r2, #3
 801538e:	2104      	movs	r1, #4
 8015390:	482a      	ldr	r0, [pc, #168]	; (801543c <emac_start+0x144>)
 8015392:	f7ff fc75 	bl	8014c80 <gpio_init>
 8015396:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801539a:	2203      	movs	r2, #3
 801539c:	2118      	movs	r1, #24
 801539e:	4828      	ldr	r0, [pc, #160]	; (8015440 <emac_start+0x148>)
 80153a0:	f7ff fc6e 	bl	8014c80 <gpio_init>
 80153a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80153a8:	2203      	movs	r2, #3
 80153aa:	2118      	movs	r1, #24
 80153ac:	4824      	ldr	r0, [pc, #144]	; (8015440 <emac_start+0x148>)
 80153ae:	f7ff fc67 	bl	8014c80 <gpio_init>
 80153b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80153b6:	2203      	movs	r2, #3
 80153b8:	2118      	movs	r1, #24
 80153ba:	4821      	ldr	r0, [pc, #132]	; (8015440 <emac_start+0x148>)
 80153bc:	f7ff fc60 	bl	8014c80 <gpio_init>
 80153c0:	f240 500e 	movw	r0, #1294	; 0x50e
 80153c4:	f7ff fcec 	bl	8014da0 <rcu_periph_clock_enable>
 80153c8:	f240 500f 	movw	r0, #1295	; 0x50f
 80153cc:	f7ff fce8 	bl	8014da0 <rcu_periph_clock_enable>
 80153d0:	f44f 60a2 	mov.w	r0, #1296	; 0x510
 80153d4:	f7ff fce4 	bl	8014da0 <rcu_periph_clock_enable>
 80153d8:	f001 f8c6 	bl	8016568 <enet_deinit>
 80153dc:	f000 fd20 	bl	8015e20 <enet_software_reset>
 80153e0:	b900      	cbnz	r0, 80153e4 <emac_start+0xec>
 80153e2:	e7fe      	b.n	80153e2 <emac_start+0xea>
 80153e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80153e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80153ec:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 80153f0:	f000 fe9a 	bl	8016128 <enet_init>
 80153f4:	4b13      	ldr	r3, [pc, #76]	; (8015444 <emac_start+0x14c>)
 80153f6:	6018      	str	r0, [r3, #0]
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	b903      	cbnz	r3, 80153fe <emac_start+0x106>
 80153fc:	e7fe      	b.n	80153fc <emac_start+0x104>
 80153fe:	4620      	mov	r0, r4
 8015400:	f000 fb90 	bl	8015b24 <mac_address_get>
 8015404:	4621      	mov	r1, r4
 8015406:	2000      	movs	r0, #0
 8015408:	f000 fdee 	bl	8015fe8 <enet_mac_address_set>
 801540c:	f44f 00e0 	mov.w	r0, #7340032	; 0x700000
 8015410:	f000 fd1a 	bl	8015e48 <enet_descriptors_chain_init>
 8015414:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
 8015418:	f000 fd16 	bl	8015e48 <enet_descriptors_chain_init>
 801541c:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8015420:	4809      	ldr	r0, [pc, #36]	; (8015448 <emac_start+0x150>)
 8015422:	f000 fddb 	bl	8015fdc <enet_transmit_checksum_config>
 8015426:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 801542a:	4808      	ldr	r0, [pc, #32]	; (801544c <emac_start+0x154>)
 801542c:	f000 fdd6 	bl	8015fdc <enet_transmit_checksum_config>
 8015430:	f001 f812 	bl	8016458 <enet_enable>
 8015434:	2001      	movs	r0, #1
 8015436:	bd10      	pop	{r4, pc}
 8015438:	40010800 	andmi	r0, r1, r0, lsl #16
 801543c:	40011000 	andmi	r1, r1, r0
 8015440:	40010c00 	andmi	r0, r1, r0, lsl #24
 8015444:	2000a9e0 	andcs	sl, r0, r0, ror #19
 8015448:	20015a34 	andcs	r5, r1, r4, lsr sl
 801544c:	20015a44 	andcs	r5, r1, r4, asr #20

08015450 <emac_eth_recv>:
 8015450:	b538      	push	{r3, r4, r5, lr}
 8015452:	4605      	mov	r5, r0
 8015454:	f001 f858 	bl	8016508 <enet_rxframe_size_get>
 8015458:	4604      	mov	r4, r0
 801545a:	b138      	cbz	r0, 801546c <emac_eth_recv+0x1c>
 801545c:	4b05      	ldr	r3, [pc, #20]	; (8015474 <emac_eth_recv+0x24>)
 801545e:	2105      	movs	r1, #5
 8015460:	6818      	ldr	r0, [r3, #0]
 8015462:	f001 f800 	bl	8016466 <enet_desc_information_get>
 8015466:	6028      	str	r0, [r5, #0]
 8015468:	4620      	mov	r0, r4
 801546a:	bd38      	pop	{r3, r4, r5, pc}
 801546c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015470:	e7fb      	b.n	801546a <emac_eth_recv+0x1a>
 8015472:	bf00      	nop
 8015474:	200129f0 	strdcs	r2, [r1], -r0

08015478 <emac_free_pkt>:
 8015478:	2100      	movs	r1, #0
 801547a:	4608      	mov	r0, r1
 801547c:	f000 bd2c 	b.w	8015ed8 <enet_frame_receive>

08015480 <emac_eth_send>:
 8015480:	f000 bd6a 	b.w	8015f58 <enet_frame_transmit>

08015484 <gd32_adc_init()>:
 8015484:	b510      	push	{r4, lr}
 8015486:	f240 6009 	movw	r0, #1545	; 0x609
 801548a:	4c21      	ldr	r4, [pc, #132]	; (8015510 <gd32_adc_init()+0x8c>)
 801548c:	f7ff fc88 	bl	8014da0 <rcu_periph_clock_enable>
 8015490:	2005      	movs	r0, #5
 8015492:	f7ff fcbd 	bl	8014e10 <rcu_adc_clock_config>
 8015496:	4620      	mov	r0, r4
 8015498:	2201      	movs	r2, #1
 801549a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801549e:	f000 fb63 	bl	8015b68 <adc_special_function_config>
 80154a2:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80154a6:	4620      	mov	r0, r4
 80154a8:	2102      	movs	r1, #2
 80154aa:	f000 fbfd 	bl	8015ca8 <adc_external_trigger_source_config>
 80154ae:	2100      	movs	r1, #0
 80154b0:	4620      	mov	r0, r4
 80154b2:	f000 fb81 	bl	8015bb8 <adc_data_alignment_config>
 80154b6:	2000      	movs	r0, #0
 80154b8:	f000 fb46 	bl	8015b48 <adc_mode_config>
 80154bc:	2202      	movs	r2, #2
 80154be:	4620      	mov	r0, r4
 80154c0:	4611      	mov	r1, r2
 80154c2:	f000 fba5 	bl	8015c10 <adc_channel_length_config>
 80154c6:	4620      	mov	r0, r4
 80154c8:	2307      	movs	r3, #7
 80154ca:	2210      	movs	r2, #16
 80154cc:	2100      	movs	r1, #0
 80154ce:	f000 fbbc 	bl	8015c4a <adc_inserted_channel_config>
 80154d2:	2307      	movs	r3, #7
 80154d4:	4620      	mov	r0, r4
 80154d6:	2211      	movs	r2, #17
 80154d8:	2101      	movs	r1, #1
 80154da:	f000 fbb6 	bl	8015c4a <adc_inserted_channel_config>
 80154de:	2201      	movs	r2, #1
 80154e0:	2102      	movs	r1, #2
 80154e2:	4620      	mov	r0, r4
 80154e4:	f000 fbf1 	bl	8015cca <adc_external_trigger_config>
 80154e8:	f000 fb88 	bl	8015bfc <adc_tempsensor_vrefint_enable>
 80154ec:	4620      	mov	r0, r4
 80154ee:	f000 fb6c 	bl	8015bca <adc_enable>
 80154f2:	2100      	movs	r1, #0
 80154f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80154f8:	f000 fafc 	bl	8015af4 <udelay(unsigned int, unsigned int)>
 80154fc:	4620      	mov	r0, r4
 80154fe:	f000 fb6c 	bl	8015bda <adc_calibration_enable>
 8015502:	4620      	mov	r0, r4
 8015504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015508:	2102      	movs	r1, #2
 801550a:	f000 bbf9 	b.w	8015d00 <adc_software_trigger_enable>
 801550e:	bf00      	nop
 8015510:	40012400 	andmi	r2, r1, r0, lsl #8

08015514 <_stop() [clone .isra.0]>:
 8015514:	b508      	push	{r3, lr}
 8015516:	4806      	ldr	r0, [pc, #24]	; (8015530 <_stop() [clone .isra.0]+0x1c>)
 8015518:	f001 f8b6 	bl	8016688 <i2c_stop_on_bus>
 801551c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8015520:	4a04      	ldr	r2, [pc, #16]	; (8015534 <_stop() [clone .isra.0]+0x20>)
 8015522:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
 8015526:	0589      	lsls	r1, r1, #22
 8015528:	d501      	bpl.n	801552e <_stop() [clone .isra.0]+0x1a>
 801552a:	3b01      	subs	r3, #1
 801552c:	d1f9      	bne.n	8015522 <_stop() [clone .isra.0]+0xe>
 801552e:	bd08      	pop	{r3, pc}
 8015530:	40005400 	andmi	r5, r0, r0, lsl #8
 8015534:	40005000 	andmi	r5, r0, r0

08015538 <gd32_i2c_begin()>:
 8015538:	b510      	push	{r4, lr}
 801553a:	f240 7015 	movw	r0, #1813	; 0x715
 801553e:	f7ff fc2f 	bl	8014da0 <rcu_periph_clock_enable>
 8015542:	4c15      	ldr	r4, [pc, #84]	; (8015598 <gd32_i2c_begin()+0x60>)
 8015544:	f240 6003 	movw	r0, #1539	; 0x603
 8015548:	f7ff fc2a 	bl	8014da0 <rcu_periph_clock_enable>
 801554c:	f240 6003 	movw	r0, #1539	; 0x603
 8015550:	f7ff fc26 	bl	8014da0 <rcu_periph_clock_enable>
 8015554:	4620      	mov	r0, r4
 8015556:	f44f 7380 	mov.w	r3, #256	; 0x100
 801555a:	2203      	movs	r2, #3
 801555c:	211c      	movs	r1, #28
 801555e:	f7ff fb8f 	bl	8014c80 <gpio_init>
 8015562:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015566:	2203      	movs	r2, #3
 8015568:	4620      	mov	r0, r4
 801556a:	211c      	movs	r1, #28
 801556c:	f7ff fb88 	bl	8014c80 <gpio_init>
 8015570:	f5a4 4438 	sub.w	r4, r4, #47104	; 0xb800
 8015574:	2101      	movs	r1, #1
 8015576:	2002      	movs	r0, #2
 8015578:	f7ff fbd6 	bl	8014d28 <gpio_pin_remap_config>
 801557c:	4620      	mov	r0, r4
 801557e:	4907      	ldr	r1, [pc, #28]	; (801559c <gd32_i2c_begin()+0x64>)
 8015580:	2200      	movs	r2, #0
 8015582:	f000 ffff 	bl	8016584 <i2c_clock_config>
 8015586:	4620      	mov	r0, r4
 8015588:	f001 f874 	bl	8016674 <i2c_enable>
 801558c:	4620      	mov	r0, r4
 801558e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015592:	2101      	movs	r1, #1
 8015594:	f001 b854 	b.w	8016640 <i2c_ack_config>
 8015598:	40010c00 	andmi	r0, r1, r0, lsl #24
 801559c:	00061a80 	andeq	r1, r6, r0, lsl #21

080155a0 <gd32_i2c_set_baudrate(unsigned int)>:
 80155a0:	4601      	mov	r1, r0
 80155a2:	2200      	movs	r2, #0
 80155a4:	4801      	ldr	r0, [pc, #4]	; (80155ac <gd32_i2c_set_baudrate(unsigned int)+0xc>)
 80155a6:	f000 bfed 	b.w	8016584 <i2c_clock_config>
 80155aa:	bf00      	nop
 80155ac:	40005400 	andmi	r5, r0, r0, lsl #8

080155b0 <gd32_i2c_set_address(unsigned char)>:
 80155b0:	4b01      	ldr	r3, [pc, #4]	; (80155b8 <gd32_i2c_set_address(unsigned char)+0x8>)
 80155b2:	0040      	lsls	r0, r0, #1
 80155b4:	7018      	strb	r0, [r3, #0]
 80155b6:	4770      	bx	lr
 80155b8:	2000a9e4 	andcs	sl, r0, r4, ror #19

080155bc <gd32_i2c_write(char const*, unsigned int)>:
 80155bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155be:	4604      	mov	r4, r0
 80155c0:	460f      	mov	r7, r1
 80155c2:	f640 75ff 	movw	r5, #4095	; 0xfff
 80155c6:	4e2e      	ldr	r6, [pc, #184]	; (8015680 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 80155c8:	f240 6101 	movw	r1, #1537	; 0x601
 80155cc:	4630      	mov	r0, r6
 80155ce:	f001 f865 	bl	801669c <i2c_flag_get>
 80155d2:	b138      	cbz	r0, 80155e4 <gd32_i2c_write(char const*, unsigned int)+0x28>
 80155d4:	3d01      	subs	r5, #1
 80155d6:	d1f7      	bne.n	80155c8 <gd32_i2c_write(char const*, unsigned int)+0xc>
 80155d8:	f7ff ff9c 	bl	8015514 <_stop() [clone .isra.0]>
 80155dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80155e0:	4240      	negs	r0, r0
 80155e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155e4:	4826      	ldr	r0, [pc, #152]	; (8015680 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 80155e6:	f001 f84a 	bl	801667e <i2c_start_on_bus>
 80155ea:	f640 75ff 	movw	r5, #4095	; 0xfff
 80155ee:	4e24      	ldr	r6, [pc, #144]	; (8015680 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 80155f0:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80155f4:	4630      	mov	r0, r6
 80155f6:	f001 f851 	bl	801669c <i2c_flag_get>
 80155fa:	bb68      	cbnz	r0, 8015658 <gd32_i2c_write(char const*, unsigned int)+0x9c>
 80155fc:	3d01      	subs	r5, #1
 80155fe:	d1f7      	bne.n	80155f0 <gd32_i2c_write(char const*, unsigned int)+0x34>
 8015600:	e7ea      	b.n	80155d8 <gd32_i2c_write(char const*, unsigned int)+0x1c>
 8015602:	f240 5101 	movw	r1, #1281	; 0x501
 8015606:	481e      	ldr	r0, [pc, #120]	; (8015680 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8015608:	f001 f850 	bl	80166ac <i2c_flag_clear>
 801560c:	f640 75ff 	movw	r5, #4095	; 0xfff
 8015610:	4e1b      	ldr	r6, [pc, #108]	; (8015680 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8015612:	f240 5107 	movw	r1, #1287	; 0x507
 8015616:	4630      	mov	r0, r6
 8015618:	f001 f840 	bl	801669c <i2c_flag_get>
 801561c:	2801      	cmp	r0, #1
 801561e:	d114      	bne.n	801564a <gd32_i2c_write(char const*, unsigned int)+0x8e>
 8015620:	4e17      	ldr	r6, [pc, #92]	; (8015680 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8015622:	4427      	add	r7, r4
 8015624:	42a7      	cmp	r7, r4
 8015626:	d013      	beq.n	8015650 <gd32_i2c_write(char const*, unsigned int)+0x94>
 8015628:	4630      	mov	r0, r6
 801562a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801562e:	f001 f830 	bl	8016692 <i2c_data_transmit>
 8015632:	f640 75ff 	movw	r5, #4095	; 0xfff
 8015636:	f240 5102 	movw	r1, #1282	; 0x502
 801563a:	4630      	mov	r0, r6
 801563c:	f001 f82e 	bl	801669c <i2c_flag_get>
 8015640:	2800      	cmp	r0, #0
 8015642:	d1ef      	bne.n	8015624 <gd32_i2c_write(char const*, unsigned int)+0x68>
 8015644:	3d01      	subs	r5, #1
 8015646:	d1f6      	bne.n	8015636 <gd32_i2c_write(char const*, unsigned int)+0x7a>
 8015648:	e7c6      	b.n	80155d8 <gd32_i2c_write(char const*, unsigned int)+0x1c>
 801564a:	3d01      	subs	r5, #1
 801564c:	d1e1      	bne.n	8015612 <gd32_i2c_write(char const*, unsigned int)+0x56>
 801564e:	e7c3      	b.n	80155d8 <gd32_i2c_write(char const*, unsigned int)+0x1c>
 8015650:	f7ff ff60 	bl	8015514 <_stop() [clone .isra.0]>
 8015654:	2000      	movs	r0, #0
 8015656:	e7c3      	b.n	80155e0 <gd32_i2c_write(char const*, unsigned int)+0x24>
 8015658:	4b0a      	ldr	r3, [pc, #40]	; (8015684 <gd32_i2c_write(char const*, unsigned int)+0xc8>)
 801565a:	f06f 0201 	mvn.w	r2, #1
 801565e:	7819      	ldrb	r1, [r3, #0]
 8015660:	4807      	ldr	r0, [pc, #28]	; (8015680 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8015662:	f000 ffff 	bl	8016664 <i2c_master_addressing>
 8015666:	f640 75ff 	movw	r5, #4095	; 0xfff
 801566a:	4e05      	ldr	r6, [pc, #20]	; (8015680 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 801566c:	f240 5101 	movw	r1, #1281	; 0x501
 8015670:	4630      	mov	r0, r6
 8015672:	f001 f813 	bl	801669c <i2c_flag_get>
 8015676:	2800      	cmp	r0, #0
 8015678:	d1c3      	bne.n	8015602 <gd32_i2c_write(char const*, unsigned int)+0x46>
 801567a:	3d01      	subs	r5, #1
 801567c:	d1f6      	bne.n	801566c <gd32_i2c_write(char const*, unsigned int)+0xb0>
 801567e:	e7ab      	b.n	80155d8 <gd32_i2c_write(char const*, unsigned int)+0x1c>
 8015680:	40005400 	andmi	r5, r0, r0, lsl #8
 8015684:	2000a9e4 	andcs	sl, r0, r4, ror #19

08015688 <gd32_i2c_read(char*, unsigned int)>:
 8015688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801568c:	4680      	mov	r8, r0
 801568e:	460c      	mov	r4, r1
 8015690:	f640 76ff 	movw	r6, #4095	; 0xfff
 8015694:	4f49      	ldr	r7, [pc, #292]	; (80157bc <gd32_i2c_read(char*, unsigned int)+0x134>)
 8015696:	f240 6101 	movw	r1, #1537	; 0x601
 801569a:	4638      	mov	r0, r7
 801569c:	f000 fffe 	bl	801669c <i2c_flag_get>
 80156a0:	4605      	mov	r5, r0
 80156a2:	b128      	cbz	r0, 80156b0 <gd32_i2c_read(char*, unsigned int)+0x28>
 80156a4:	3e01      	subs	r6, #1
 80156a6:	d1f6      	bne.n	8015696 <gd32_i2c_read(char*, unsigned int)+0xe>
 80156a8:	f7ff ff34 	bl	8015514 <_stop() [clone .isra.0]>
 80156ac:	2504      	movs	r5, #4
 80156ae:	e082      	b.n	80157b6 <gd32_i2c_read(char*, unsigned int)+0x12e>
 80156b0:	2c02      	cmp	r4, #2
 80156b2:	d103      	bne.n	80156bc <gd32_i2c_read(char*, unsigned int)+0x34>
 80156b4:	4601      	mov	r1, r0
 80156b6:	4841      	ldr	r0, [pc, #260]	; (80157bc <gd32_i2c_read(char*, unsigned int)+0x134>)
 80156b8:	f000 ffcb 	bl	8016652 <i2c_ackpos_config>
 80156bc:	483f      	ldr	r0, [pc, #252]	; (80157bc <gd32_i2c_read(char*, unsigned int)+0x134>)
 80156be:	f000 ffde 	bl	801667e <i2c_start_on_bus>
 80156c2:	f640 76ff 	movw	r6, #4095	; 0xfff
 80156c6:	4f3d      	ldr	r7, [pc, #244]	; (80157bc <gd32_i2c_read(char*, unsigned int)+0x134>)
 80156c8:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80156cc:	4638      	mov	r0, r7
 80156ce:	f000 ffe5 	bl	801669c <i2c_flag_get>
 80156d2:	b910      	cbnz	r0, 80156da <gd32_i2c_read(char*, unsigned int)+0x52>
 80156d4:	3e01      	subs	r6, #1
 80156d6:	d1f7      	bne.n	80156c8 <gd32_i2c_read(char*, unsigned int)+0x40>
 80156d8:	e7e6      	b.n	80156a8 <gd32_i2c_read(char*, unsigned int)+0x20>
 80156da:	4b39      	ldr	r3, [pc, #228]	; (80157c0 <gd32_i2c_read(char*, unsigned int)+0x138>)
 80156dc:	2201      	movs	r2, #1
 80156de:	7819      	ldrb	r1, [r3, #0]
 80156e0:	4836      	ldr	r0, [pc, #216]	; (80157bc <gd32_i2c_read(char*, unsigned int)+0x134>)
 80156e2:	f000 ffbf 	bl	8016664 <i2c_master_addressing>
 80156e6:	2c02      	cmp	r4, #2
 80156e8:	d803      	bhi.n	80156f2 <gd32_i2c_read(char*, unsigned int)+0x6a>
 80156ea:	2100      	movs	r1, #0
 80156ec:	4833      	ldr	r0, [pc, #204]	; (80157bc <gd32_i2c_read(char*, unsigned int)+0x134>)
 80156ee:	f000 ffa7 	bl	8016640 <i2c_ack_config>
 80156f2:	f640 76ff 	movw	r6, #4095	; 0xfff
 80156f6:	4f31      	ldr	r7, [pc, #196]	; (80157bc <gd32_i2c_read(char*, unsigned int)+0x134>)
 80156f8:	f240 5101 	movw	r1, #1281	; 0x501
 80156fc:	4638      	mov	r0, r7
 80156fe:	f000 ffcd 	bl	801669c <i2c_flag_get>
 8015702:	b910      	cbnz	r0, 801570a <gd32_i2c_read(char*, unsigned int)+0x82>
 8015704:	3e01      	subs	r6, #1
 8015706:	d1f7      	bne.n	80156f8 <gd32_i2c_read(char*, unsigned int)+0x70>
 8015708:	e7ce      	b.n	80156a8 <gd32_i2c_read(char*, unsigned int)+0x20>
 801570a:	f240 5101 	movw	r1, #1281	; 0x501
 801570e:	482b      	ldr	r0, [pc, #172]	; (80157bc <gd32_i2c_read(char*, unsigned int)+0x134>)
 8015710:	f000 ffcc 	bl	80166ac <i2c_flag_clear>
 8015714:	2c01      	cmp	r4, #1
 8015716:	d102      	bne.n	801571e <gd32_i2c_read(char*, unsigned int)+0x96>
 8015718:	4828      	ldr	r0, [pc, #160]	; (80157bc <gd32_i2c_read(char*, unsigned int)+0x134>)
 801571a:	f000 ffb5 	bl	8016688 <i2c_stop_on_bus>
 801571e:	f640 77ff 	movw	r7, #4095	; 0xfff
 8015722:	4e26      	ldr	r6, [pc, #152]	; (80157bc <gd32_i2c_read(char*, unsigned int)+0x134>)
 8015724:	b3ac      	cbz	r4, 8015792 <gd32_i2c_read(char*, unsigned int)+0x10a>
 8015726:	2c03      	cmp	r4, #3
 8015728:	d121      	bne.n	801576e <gd32_i2c_read(char*, unsigned int)+0xe6>
 801572a:	f640 79ff 	movw	r9, #4095	; 0xfff
 801572e:	f240 5102 	movw	r1, #1282	; 0x502
 8015732:	4630      	mov	r0, r6
 8015734:	f000 ffb2 	bl	801669c <i2c_flag_get>
 8015738:	b918      	cbnz	r0, 8015742 <gd32_i2c_read(char*, unsigned int)+0xba>
 801573a:	f1b9 0901 	subs.w	r9, r9, #1
 801573e:	d1f6      	bne.n	801572e <gd32_i2c_read(char*, unsigned int)+0xa6>
 8015740:	e7b2      	b.n	80156a8 <gd32_i2c_read(char*, unsigned int)+0x20>
 8015742:	2100      	movs	r1, #0
 8015744:	4630      	mov	r0, r6
 8015746:	f000 ff7b 	bl	8016640 <i2c_ack_config>
 801574a:	f240 5106 	movw	r1, #1286	; 0x506
 801574e:	4630      	mov	r0, r6
 8015750:	f000 ffa4 	bl	801669c <i2c_flag_get>
 8015754:	b138      	cbz	r0, 8015766 <gd32_i2c_read(char*, unsigned int)+0xde>
 8015756:	4630      	mov	r0, r6
 8015758:	f000 ff9d 	bl	8016696 <i2c_data_receive>
 801575c:	f640 77ff 	movw	r7, #4095	; 0xfff
 8015760:	f808 0b01 	strb.w	r0, [r8], #1
 8015764:	3c01      	subs	r4, #1
 8015766:	3f01      	subs	r7, #1
 8015768:	2f00      	cmp	r7, #0
 801576a:	dcdb      	bgt.n	8015724 <gd32_i2c_read(char*, unsigned int)+0x9c>
 801576c:	e79c      	b.n	80156a8 <gd32_i2c_read(char*, unsigned int)+0x20>
 801576e:	2c02      	cmp	r4, #2
 8015770:	d1eb      	bne.n	801574a <gd32_i2c_read(char*, unsigned int)+0xc2>
 8015772:	f640 79ff 	movw	r9, #4095	; 0xfff
 8015776:	f240 5102 	movw	r1, #1282	; 0x502
 801577a:	4630      	mov	r0, r6
 801577c:	f000 ff8e 	bl	801669c <i2c_flag_get>
 8015780:	b918      	cbnz	r0, 801578a <gd32_i2c_read(char*, unsigned int)+0x102>
 8015782:	f1b9 0901 	subs.w	r9, r9, #1
 8015786:	d1f6      	bne.n	8015776 <gd32_i2c_read(char*, unsigned int)+0xee>
 8015788:	e78e      	b.n	80156a8 <gd32_i2c_read(char*, unsigned int)+0x20>
 801578a:	4630      	mov	r0, r6
 801578c:	f000 ff7c 	bl	8016688 <i2c_stop_on_bus>
 8015790:	e7db      	b.n	801574a <gd32_i2c_read(char*, unsigned int)+0xc2>
 8015792:	f640 73ff 	movw	r3, #4095	; 0xfff
 8015796:	4a0b      	ldr	r2, [pc, #44]	; (80157c4 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8015798:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
 801579c:	0589      	lsls	r1, r1, #22
 801579e:	d502      	bpl.n	80157a6 <gd32_i2c_read(char*, unsigned int)+0x11e>
 80157a0:	3b01      	subs	r3, #1
 80157a2:	d1f9      	bne.n	8015798 <gd32_i2c_read(char*, unsigned int)+0x110>
 80157a4:	e782      	b.n	80156ac <gd32_i2c_read(char*, unsigned int)+0x24>
 80157a6:	2101      	movs	r1, #1
 80157a8:	4804      	ldr	r0, [pc, #16]	; (80157bc <gd32_i2c_read(char*, unsigned int)+0x134>)
 80157aa:	f000 ff49 	bl	8016640 <i2c_ack_config>
 80157ae:	2101      	movs	r1, #1
 80157b0:	4802      	ldr	r0, [pc, #8]	; (80157bc <gd32_i2c_read(char*, unsigned int)+0x134>)
 80157b2:	f000 ff4e 	bl	8016652 <i2c_ackpos_config>
 80157b6:	4628      	mov	r0, r5
 80157b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80157bc:	40005400 	andmi	r5, r0, r0, lsl #8
 80157c0:	2000a9e4 	andcs	sl, r0, r4, ror #19
 80157c4:	40005000 	andmi	r5, r0, r0

080157c8 <gd32_spi_dma_begin()>:
 80157c8:	b530      	push	{r4, r5, lr}
 80157ca:	f240 6002 	movw	r0, #1538	; 0x602
 80157ce:	b089      	sub	sp, #36	; 0x24
 80157d0:	f7ff fae6 	bl	8014da0 <rcu_periph_clock_enable>
 80157d4:	f240 6003 	movw	r0, #1539	; 0x603
 80157d8:	f7ff fae2 	bl	8014da0 <rcu_periph_clock_enable>
 80157dc:	f240 700f 	movw	r0, #1807	; 0x70f
 80157e0:	f7ff fade 	bl	8014da0 <rcu_periph_clock_enable>
 80157e4:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80157e8:	f7ff fada 	bl	8014da0 <rcu_periph_clock_enable>
 80157ec:	2338      	movs	r3, #56	; 0x38
 80157ee:	2203      	movs	r2, #3
 80157f0:	2118      	movs	r1, #24
 80157f2:	4827      	ldr	r0, [pc, #156]	; (8015890 <gd32_spi_dma_begin()+0xc8>)
 80157f4:	f7ff fa44 	bl	8014c80 <gpio_init>
 80157f8:	4c26      	ldr	r4, [pc, #152]	; (8015894 <gd32_spi_dma_begin()+0xcc>)
 80157fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80157fe:	2203      	movs	r2, #3
 8015800:	2118      	movs	r1, #24
 8015802:	4825      	ldr	r0, [pc, #148]	; (8015898 <gd32_spi_dma_begin()+0xd0>)
 8015804:	f7ff fa3c 	bl	8014c80 <gpio_init>
 8015808:	2101      	movs	r1, #1
 801580a:	4824      	ldr	r0, [pc, #144]	; (801589c <gd32_spi_dma_begin()+0xd4>)
 801580c:	f7ff fa8c 	bl	8014d28 <gpio_pin_remap_config>
 8015810:	4620      	mov	r0, r4
 8015812:	f000 ffca 	bl	80167aa <i2s_disable>
 8015816:	2300      	movs	r3, #0
 8015818:	4620      	mov	r0, r4
 801581a:	461a      	mov	r2, r3
 801581c:	4920      	ldr	r1, [pc, #128]	; (80158a0 <gd32_spi_dma_begin()+0xd8>)
 801581e:	f000 ff67 	bl	80166f0 <i2s_psc_config>
 8015822:	2300      	movs	r3, #0
 8015824:	2210      	movs	r2, #16
 8015826:	f44f 7100 	mov.w	r1, #512	; 0x200
 801582a:	4620      	mov	r0, r4
 801582c:	f000 ff51 	bl	80166d2 <i2s_init>
 8015830:	4620      	mov	r0, r4
 8015832:	f000 ffb5 	bl	80167a0 <i2s_enable>
 8015836:	f504 34e4 	add.w	r4, r4, #116736	; 0x1c800
 801583a:	f240 5001 	movw	r0, #1281	; 0x501
 801583e:	f7ff faaf 	bl	8014da0 <rcu_periph_clock_enable>
 8015842:	4620      	mov	r0, r4
 8015844:	2101      	movs	r1, #1
 8015846:	f000 fa69 	bl	8015d1c <dma_deinit>
 801584a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801584e:	2501      	movs	r5, #1
 8015850:	9304      	str	r3, [sp, #16]
 8015852:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8015856:	f44f 7380 	mov.w	r3, #256	; 0x100
 801585a:	4912      	ldr	r1, [pc, #72]	; (80158a4 <gd32_spi_dma_begin()+0xdc>)
 801585c:	4620      	mov	r0, r4
 801585e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8015862:	9206      	str	r2, [sp, #24]
 8015864:	4629      	mov	r1, r5
 8015866:	aa01      	add	r2, sp, #4
 8015868:	f8ad 301c 	strh.w	r3, [sp, #28]
 801586c:	f88d 501e 	strb.w	r5, [sp, #30]
 8015870:	f000 fa70 	bl	8015d54 <dma_init>
 8015874:	4629      	mov	r1, r5
 8015876:	4620      	mov	r0, r4
 8015878:	f000 faa6 	bl	8015dc8 <dma_circulation_disable>
 801587c:	4629      	mov	r1, r5
 801587e:	4620      	mov	r0, r4
 8015880:	f000 fab2 	bl	8015de8 <dma_memory_to_memory_disable>
 8015884:	2200      	movs	r2, #0
 8015886:	4b08      	ldr	r3, [pc, #32]	; (80158a8 <gd32_spi_dma_begin()+0xe0>)
 8015888:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 801588c:	b009      	add	sp, #36	; 0x24
 801588e:	bd30      	pop	{r4, r5, pc}
 8015890:	40010c00 	andmi	r0, r1, r0, lsl #24
 8015894:	40003c00 	andmi	r3, r0, r0, lsl #24
 8015898:	40010800 	andmi	r0, r1, r0, lsl #16
 801589c:	00300400 	eorseq	r0, r0, r0, lsl #8
 80158a0:	00030d40 	andeq	r0, r3, r0, asr #26
 80158a4:	40003c0c 	andmi	r3, r0, ip, lsl #24
 80158a8:	40020000 	andmi	r0, r2, r0

080158ac <gd32_spi_dma_set_speed_hz(unsigned int)>:
 80158ac:	b538      	push	{r3, r4, r5, lr}
 80158ae:	4c08      	ldr	r4, [pc, #32]	; (80158d0 <gd32_spi_dma_set_speed_hz(unsigned int)+0x24>)
 80158b0:	4605      	mov	r5, r0
 80158b2:	4620      	mov	r0, r4
 80158b4:	f000 ff79 	bl	80167aa <i2s_disable>
 80158b8:	2300      	movs	r3, #0
 80158ba:	4620      	mov	r0, r4
 80158bc:	461a      	mov	r2, r3
 80158be:	0969      	lsrs	r1, r5, #5
 80158c0:	f000 ff16 	bl	80166f0 <i2s_psc_config>
 80158c4:	4620      	mov	r0, r4
 80158c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80158ca:	f000 bf69 	b.w	80167a0 <i2s_enable>
 80158ce:	bf00      	nop
 80158d0:	40003c00 	andmi	r3, r0, r0, lsl #24

080158d4 <gd32_spi_dma_tx_prepare(unsigned int*)>:
 80158d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80158d8:	6003      	str	r3, [r0, #0]
 80158da:	4801      	ldr	r0, [pc, #4]	; (80158e0 <gd32_spi_dma_tx_prepare(unsigned int*)+0xc>)
 80158dc:	4770      	bx	lr
 80158de:	bf00      	nop
 80158e0:	2000a9e8 	andcs	sl, r0, r8, ror #19

080158e4 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>:
 80158e4:	4a0a      	ldr	r2, [pc, #40]	; (8015910 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x2c>)
 80158e6:	3101      	adds	r1, #1
 80158e8:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
 80158ec:	f3c1 014f 	ubfx	r1, r1, #1, #16
 80158f0:	f023 0301 	bic.w	r3, r3, #1
 80158f4:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 80158f8:	f043 0301 	orr.w	r3, r3, #1
 80158fc:	f8c2 0428 	str.w	r0, [r2, #1064]	; 0x428
 8015900:	f8c2 1420 	str.w	r1, [r2, #1056]	; 0x420
 8015904:	4803      	ldr	r0, [pc, #12]	; (8015914 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x30>)
 8015906:	2100      	movs	r1, #0
 8015908:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 801590c:	f000 bf52 	b.w	80167b4 <spi_dma_enable>
 8015910:	40020000 	andmi	r0, r2, r0
 8015914:	40003c00 	andmi	r3, r0, r0, lsl #24

08015918 <gd32_spi_dma_tx_is_active()>:
 8015918:	4b03      	ldr	r3, [pc, #12]	; (8015928 <gd32_spi_dma_tx_is_active()+0x10>)
 801591a:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
 801591e:	3800      	subs	r0, #0
 8015920:	bf18      	it	ne
 8015922:	2001      	movne	r0, #1
 8015924:	4770      	bx	lr
 8015926:	bf00      	nop
 8015928:	40020000 	andmi	r0, r2, r0

0801592c <gd32_uart_begin>:
 801592c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801592e:	4604      	mov	r4, r0
 8015930:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8015934:	461d      	mov	r5, r3
 8015936:	460f      	mov	r7, r1
 8015938:	4616      	mov	r6, r2
 801593a:	f7ff fa31 	bl	8014da0 <rcu_periph_clock_enable>
 801593e:	4b5c      	ldr	r3, [pc, #368]	; (8015ab0 <gd32_uart_begin+0x184>)
 8015940:	429c      	cmp	r4, r3
 8015942:	f000 8083 	beq.w	8015a4c <gd32_uart_begin+0x120>
 8015946:	d857      	bhi.n	80159f8 <gd32_uart_begin+0xcc>
 8015948:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801594c:	429c      	cmp	r4, r3
 801594e:	d06d      	beq.n	8015a2c <gd32_uart_begin+0x100>
 8015950:	f240 7012 	movw	r0, #1810	; 0x712
 8015954:	f7ff fa24 	bl	8014da0 <rcu_periph_clock_enable>
 8015958:	f240 6004 	movw	r0, #1540	; 0x604
 801595c:	f7ff fa20 	bl	8014da0 <rcu_periph_clock_enable>
 8015960:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015964:	2203      	movs	r2, #3
 8015966:	2118      	movs	r1, #24
 8015968:	4852      	ldr	r0, [pc, #328]	; (8015ab4 <gd32_uart_begin+0x188>)
 801596a:	f7ff f989 	bl	8014c80 <gpio_init>
 801596e:	2104      	movs	r1, #4
 8015970:	4850      	ldr	r0, [pc, #320]	; (8015ab4 <gd32_uart_begin+0x188>)
 8015972:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015976:	2203      	movs	r2, #3
 8015978:	f7ff f982 	bl	8014c80 <gpio_init>
 801597c:	2101      	movs	r1, #1
 801597e:	484e      	ldr	r0, [pc, #312]	; (8015ab8 <gd32_uart_begin+0x18c>)
 8015980:	f7ff f9d2 	bl	8014d28 <gpio_pin_remap_config>
 8015984:	4620      	mov	r0, r4
 8015986:	f7ff fc17 	bl	80151b8 <usart_deinit>
 801598a:	68e3      	ldr	r3, [r4, #12]
 801598c:	4639      	mov	r1, r7
 801598e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8015992:	60e3      	str	r3, [r4, #12]
 8015994:	4620      	mov	r0, r4
 8015996:	f7ff fc4f 	bl	8015238 <usart_baudrate_set>
 801599a:	2e09      	cmp	r6, #9
 801599c:	bf0c      	ite	eq
 801599e:	f44f 5180 	moveq.w	r1, #4096	; 0x1000
 80159a2:	2100      	movne	r1, #0
 80159a4:	4620      	mov	r0, r4
 80159a6:	f7ff fc77 	bl	8015298 <usart_word_length_set>
 80159aa:	9b06      	ldr	r3, [sp, #24]
 80159ac:	4620      	mov	r0, r4
 80159ae:	2b02      	cmp	r3, #2
 80159b0:	bf0c      	ite	eq
 80159b2:	f44f 5100 	moveq.w	r1, #8192	; 0x2000
 80159b6:	2100      	movne	r1, #0
 80159b8:	f7ff fc76 	bl	80152a8 <usart_stop_bit_set>
 80159bc:	2d01      	cmp	r5, #1
 80159be:	d072      	beq.n	8015aa6 <gd32_uart_begin+0x17a>
 80159c0:	2d02      	cmp	r5, #2
 80159c2:	d173      	bne.n	8015aac <gd32_uart_begin+0x180>
 80159c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80159c8:	4620      	mov	r0, r4
 80159ca:	f7ff fc5d 	bl	8015288 <usart_parity_config>
 80159ce:	2100      	movs	r1, #0
 80159d0:	4620      	mov	r0, r4
 80159d2:	f7ff fc7d 	bl	80152d0 <usart_hardware_flow_rts_config>
 80159d6:	2100      	movs	r1, #0
 80159d8:	4620      	mov	r0, r4
 80159da:	f7ff fc7f 	bl	80152dc <usart_hardware_flow_cts_config>
 80159de:	2104      	movs	r1, #4
 80159e0:	4620      	mov	r0, r4
 80159e2:	f7ff fc6f 	bl	80152c4 <usart_receive_config>
 80159e6:	2108      	movs	r1, #8
 80159e8:	4620      	mov	r0, r4
 80159ea:	f7ff fc65 	bl	80152b8 <usart_transmit_config>
 80159ee:	68e3      	ldr	r3, [r4, #12]
 80159f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80159f4:	60e3      	str	r3, [r4, #12]
 80159f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159f8:	4b30      	ldr	r3, [pc, #192]	; (8015abc <gd32_uart_begin+0x190>)
 80159fa:	429c      	cmp	r4, r3
 80159fc:	d03b      	beq.n	8015a76 <gd32_uart_begin+0x14a>
 80159fe:	f240 600e 	movw	r0, #1550	; 0x60e
 8015a02:	f7ff f9cd 	bl	8014da0 <rcu_periph_clock_enable>
 8015a06:	f240 6002 	movw	r0, #1538	; 0x602
 8015a0a:	f7ff f9c9 	bl	8014da0 <rcu_periph_clock_enable>
 8015a0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015a12:	2203      	movs	r2, #3
 8015a14:	2118      	movs	r1, #24
 8015a16:	482a      	ldr	r0, [pc, #168]	; (8015ac0 <gd32_uart_begin+0x194>)
 8015a18:	f7ff f932 	bl	8014c80 <gpio_init>
 8015a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015a20:	2203      	movs	r2, #3
 8015a22:	2104      	movs	r1, #4
 8015a24:	4826      	ldr	r0, [pc, #152]	; (8015ac0 <gd32_uart_begin+0x194>)
 8015a26:	f7ff f92b 	bl	8014c80 <gpio_init>
 8015a2a:	e7ab      	b.n	8015984 <gd32_uart_begin+0x58>
 8015a2c:	f240 7011 	movw	r0, #1809	; 0x711
 8015a30:	f7ff f9b6 	bl	8014da0 <rcu_periph_clock_enable>
 8015a34:	f240 6002 	movw	r0, #1538	; 0x602
 8015a38:	f7ff f9b2 	bl	8014da0 <rcu_periph_clock_enable>
 8015a3c:	2304      	movs	r3, #4
 8015a3e:	2203      	movs	r2, #3
 8015a40:	2118      	movs	r1, #24
 8015a42:	481f      	ldr	r0, [pc, #124]	; (8015ac0 <gd32_uart_begin+0x194>)
 8015a44:	f7ff f91c 	bl	8014c80 <gpio_init>
 8015a48:	2308      	movs	r3, #8
 8015a4a:	e7e9      	b.n	8015a20 <gd32_uart_begin+0xf4>
 8015a4c:	f240 7013 	movw	r0, #1811	; 0x713
 8015a50:	f7ff f9a6 	bl	8014da0 <rcu_periph_clock_enable>
 8015a54:	f240 6004 	movw	r0, #1540	; 0x604
 8015a58:	f7ff f9a2 	bl	8014da0 <rcu_periph_clock_enable>
 8015a5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015a60:	2203      	movs	r2, #3
 8015a62:	2118      	movs	r1, #24
 8015a64:	4813      	ldr	r0, [pc, #76]	; (8015ab4 <gd32_uart_begin+0x188>)
 8015a66:	f7ff f90b 	bl	8014c80 <gpio_init>
 8015a6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015a6e:	2203      	movs	r2, #3
 8015a70:	2104      	movs	r1, #4
 8015a72:	4810      	ldr	r0, [pc, #64]	; (8015ab4 <gd32_uart_begin+0x188>)
 8015a74:	e7d7      	b.n	8015a26 <gd32_uart_begin+0xfa>
 8015a76:	f240 7014 	movw	r0, #1812	; 0x714
 8015a7a:	f7ff f991 	bl	8014da0 <rcu_periph_clock_enable>
 8015a7e:	f240 6004 	movw	r0, #1540	; 0x604
 8015a82:	f7ff f98d 	bl	8014da0 <rcu_periph_clock_enable>
 8015a86:	f240 6005 	movw	r0, #1541	; 0x605
 8015a8a:	f7ff f989 	bl	8014da0 <rcu_periph_clock_enable>
 8015a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015a92:	2203      	movs	r2, #3
 8015a94:	2118      	movs	r1, #24
 8015a96:	4807      	ldr	r0, [pc, #28]	; (8015ab4 <gd32_uart_begin+0x188>)
 8015a98:	f7ff f8f2 	bl	8014c80 <gpio_init>
 8015a9c:	2304      	movs	r3, #4
 8015a9e:	2203      	movs	r2, #3
 8015aa0:	4619      	mov	r1, r3
 8015aa2:	4808      	ldr	r0, [pc, #32]	; (8015ac4 <gd32_uart_begin+0x198>)
 8015aa4:	e7bf      	b.n	8015a26 <gd32_uart_begin+0xfa>
 8015aa6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8015aaa:	e78d      	b.n	80159c8 <gd32_uart_begin+0x9c>
 8015aac:	2100      	movs	r1, #0
 8015aae:	e78b      	b.n	80159c8 <gd32_uart_begin+0x9c>
 8015ab0:	40004c00 	andmi	r4, r0, r0, lsl #24
 8015ab4:	40011000 	andmi	r1, r1, r0
 8015ab8:	00140010 	andseq	r0, r4, r0, lsl r0
 8015abc:	40005000 	andmi	r5, r0, r0
 8015ac0:	40010800 	andmi	r0, r1, r0, lsl #16
 8015ac4:	40011400 	andmi	r1, r1, r0, lsl #8

08015ac8 <micros_init()>:
 8015ac8:	4770      	bx	lr
	...

08015acc <udelay_init()>:
 8015acc:	4a07      	ldr	r2, [pc, #28]	; (8015aec <udelay_init()+0x20>)
 8015ace:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8015ad2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8015ad6:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8015ada:	2200      	movs	r2, #0
 8015adc:	4b04      	ldr	r3, [pc, #16]	; (8015af0 <udelay_init()+0x24>)
 8015ade:	605a      	str	r2, [r3, #4]
 8015ae0:	681a      	ldr	r2, [r3, #0]
 8015ae2:	f042 0201 	orr.w	r2, r2, #1
 8015ae6:	601a      	str	r2, [r3, #0]
 8015ae8:	4770      	bx	lr
 8015aea:	bf00      	nop
 8015aec:	e000ed00 	and	lr, r0, r0, lsl #26
 8015af0:	e0001000 	and	r1, r0, r0

08015af4 <udelay(unsigned int, unsigned int)>:
 8015af4:	236c      	movs	r3, #108	; 0x6c
 8015af6:	b510      	push	{r4, lr}
 8015af8:	4358      	muls	r0, r3
 8015afa:	b909      	cbnz	r1, 8015b00 <udelay(unsigned int, unsigned int)+0xc>
 8015afc:	4b08      	ldr	r3, [pc, #32]	; (8015b20 <udelay(unsigned int, unsigned int)+0x2c>)
 8015afe:	6859      	ldr	r1, [r3, #4]
 8015b00:	2300      	movs	r3, #0
 8015b02:	4c07      	ldr	r4, [pc, #28]	; (8015b20 <udelay(unsigned int, unsigned int)+0x2c>)
 8015b04:	6862      	ldr	r2, [r4, #4]
 8015b06:	4291      	cmp	r1, r2
 8015b08:	d0fc      	beq.n	8015b04 <udelay(unsigned int, unsigned int)+0x10>
 8015b0a:	bf28      	it	cs
 8015b0c:	f103 33ff 	addcs.w	r3, r3, #4294967295	; 0xffffffff
 8015b10:	1a5b      	subs	r3, r3, r1
 8015b12:	4413      	add	r3, r2
 8015b14:	4283      	cmp	r3, r0
 8015b16:	d300      	bcc.n	8015b1a <udelay(unsigned int, unsigned int)+0x26>
 8015b18:	bd10      	pop	{r4, pc}
 8015b1a:	4611      	mov	r1, r2
 8015b1c:	e7f2      	b.n	8015b04 <udelay(unsigned int, unsigned int)+0x10>
 8015b1e:	bf00      	nop
 8015b20:	e0001000 	and	r1, r0, r0

08015b24 <mac_address_get>:
 8015b24:	2102      	movs	r1, #2
 8015b26:	4a07      	ldr	r2, [pc, #28]	; (8015b44 <mac_address_get+0x20>)
 8015b28:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 8015b2c:	f8d2 27ec 	ldr.w	r2, [r2, #2028]	; 0x7ec
 8015b30:	7001      	strb	r1, [r0, #0]
 8015b32:	7042      	strb	r2, [r0, #1]
 8015b34:	0e1a      	lsrs	r2, r3, #24
 8015b36:	7082      	strb	r2, [r0, #2]
 8015b38:	0c1a      	lsrs	r2, r3, #16
 8015b3a:	70c2      	strb	r2, [r0, #3]
 8015b3c:	0a1a      	lsrs	r2, r3, #8
 8015b3e:	7102      	strb	r2, [r0, #4]
 8015b40:	7143      	strb	r3, [r0, #5]
 8015b42:	4770      	bx	lr
 8015b44:	1ffff000 	svcne	0x00fff000

08015b48 <adc_mode_config>:
 8015b48:	4b06      	ldr	r3, [pc, #24]	; (8015b64 <adc_mode_config+0x1c>)
 8015b4a:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
 8015b4e:	f421 2170 	bic.w	r1, r1, #983040	; 0xf0000
 8015b52:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
 8015b56:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8015b5a:	4302      	orrs	r2, r0
 8015b5c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8015b60:	4770      	bx	lr
 8015b62:	bf00      	nop
 8015b64:	40012000 	andmi	r2, r1, r0

08015b68 <adc_special_function_config>:
 8015b68:	b510      	push	{r4, lr}
 8015b6a:	f401 7380 	and.w	r3, r1, #256	; 0x100
 8015b6e:	f401 6480 	and.w	r4, r1, #1024	; 0x400
 8015b72:	f001 0102 	and.w	r1, r1, #2
 8015b76:	b17a      	cbz	r2, 8015b98 <adc_special_function_config+0x30>
 8015b78:	b11b      	cbz	r3, 8015b82 <adc_special_function_config+0x1a>
 8015b7a:	6843      	ldr	r3, [r0, #4]
 8015b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015b80:	6043      	str	r3, [r0, #4]
 8015b82:	b11c      	cbz	r4, 8015b8c <adc_special_function_config+0x24>
 8015b84:	6843      	ldr	r3, [r0, #4]
 8015b86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8015b8a:	6043      	str	r3, [r0, #4]
 8015b8c:	b119      	cbz	r1, 8015b96 <adc_special_function_config+0x2e>
 8015b8e:	6883      	ldr	r3, [r0, #8]
 8015b90:	f043 0302 	orr.w	r3, r3, #2
 8015b94:	6083      	str	r3, [r0, #8]
 8015b96:	bd10      	pop	{r4, pc}
 8015b98:	b11b      	cbz	r3, 8015ba2 <adc_special_function_config+0x3a>
 8015b9a:	6843      	ldr	r3, [r0, #4]
 8015b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015ba0:	6043      	str	r3, [r0, #4]
 8015ba2:	b11c      	cbz	r4, 8015bac <adc_special_function_config+0x44>
 8015ba4:	6843      	ldr	r3, [r0, #4]
 8015ba6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8015baa:	6043      	str	r3, [r0, #4]
 8015bac:	2900      	cmp	r1, #0
 8015bae:	d0f2      	beq.n	8015b96 <adc_special_function_config+0x2e>
 8015bb0:	6883      	ldr	r3, [r0, #8]
 8015bb2:	f023 0302 	bic.w	r3, r3, #2
 8015bb6:	e7ed      	b.n	8015b94 <adc_special_function_config+0x2c>

08015bb8 <adc_data_alignment_config>:
 8015bb8:	6883      	ldr	r3, [r0, #8]
 8015bba:	b119      	cbz	r1, 8015bc4 <adc_data_alignment_config+0xc>
 8015bbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015bc0:	6083      	str	r3, [r0, #8]
 8015bc2:	4770      	bx	lr
 8015bc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015bc8:	e7fa      	b.n	8015bc0 <adc_data_alignment_config+0x8>

08015bca <adc_enable>:
 8015bca:	6883      	ldr	r3, [r0, #8]
 8015bcc:	07db      	lsls	r3, r3, #31
 8015bce:	bf5e      	ittt	pl
 8015bd0:	6883      	ldrpl	r3, [r0, #8]
 8015bd2:	f043 0301 	orrpl.w	r3, r3, #1
 8015bd6:	6083      	strpl	r3, [r0, #8]
 8015bd8:	4770      	bx	lr

08015bda <adc_calibration_enable>:
 8015bda:	6883      	ldr	r3, [r0, #8]
 8015bdc:	f100 0208 	add.w	r2, r0, #8
 8015be0:	f043 0308 	orr.w	r3, r3, #8
 8015be4:	6083      	str	r3, [r0, #8]
 8015be6:	6813      	ldr	r3, [r2, #0]
 8015be8:	0719      	lsls	r1, r3, #28
 8015bea:	d4fc      	bmi.n	8015be6 <adc_calibration_enable+0xc>
 8015bec:	6883      	ldr	r3, [r0, #8]
 8015bee:	f043 0304 	orr.w	r3, r3, #4
 8015bf2:	6083      	str	r3, [r0, #8]
 8015bf4:	6813      	ldr	r3, [r2, #0]
 8015bf6:	075b      	lsls	r3, r3, #29
 8015bf8:	d4fc      	bmi.n	8015bf4 <adc_calibration_enable+0x1a>
 8015bfa:	4770      	bx	lr

08015bfc <adc_tempsensor_vrefint_enable>:
 8015bfc:	4a03      	ldr	r2, [pc, #12]	; (8015c0c <adc_tempsensor_vrefint_enable+0x10>)
 8015bfe:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 8015c02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015c06:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
 8015c0a:	4770      	bx	lr
 8015c0c:	40012000 	andmi	r2, r1, r0

08015c10 <adc_channel_length_config>:
 8015c10:	2901      	cmp	r1, #1
 8015c12:	d002      	beq.n	8015c1a <adc_channel_length_config+0xa>
 8015c14:	2902      	cmp	r1, #2
 8015c16:	d00c      	beq.n	8015c32 <adc_channel_length_config+0x22>
 8015c18:	4770      	bx	lr
 8015c1a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015c1c:	3a01      	subs	r2, #1
 8015c1e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8015c22:	62c3      	str	r3, [r0, #44]	; 0x2c
 8015c24:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015c26:	0512      	lsls	r2, r2, #20
 8015c28:	f402 0270 	and.w	r2, r2, #15728640	; 0xf00000
 8015c2c:	431a      	orrs	r2, r3
 8015c2e:	62c2      	str	r2, [r0, #44]	; 0x2c
 8015c30:	4770      	bx	lr
 8015c32:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8015c34:	3a01      	subs	r2, #1
 8015c36:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8015c3a:	6383      	str	r3, [r0, #56]	; 0x38
 8015c3c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8015c3e:	0512      	lsls	r2, r2, #20
 8015c40:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8015c44:	431a      	orrs	r2, r3
 8015c46:	6382      	str	r2, [r0, #56]	; 0x38
 8015c48:	4770      	bx	lr

08015c4a <adc_inserted_channel_config>:
 8015c4a:	b530      	push	{r4, r5, lr}
 8015c4c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8015c4e:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8015c50:	f3c4 5401 	ubfx	r4, r4, #20, #2
 8015c54:	1a61      	subs	r1, r4, r1
 8015c56:	f06f 0404 	mvn.w	r4, #4
 8015c5a:	4361      	muls	r1, r4
 8015c5c:	241f      	movs	r4, #31
 8015c5e:	310f      	adds	r1, #15
 8015c60:	408c      	lsls	r4, r1
 8015c62:	ea25 0504 	bic.w	r5, r5, r4
 8015c66:	fa02 f101 	lsl.w	r1, r2, r1
 8015c6a:	4329      	orrs	r1, r5
 8015c6c:	2a09      	cmp	r2, #9
 8015c6e:	6381      	str	r1, [r0, #56]	; 0x38
 8015c70:	d80b      	bhi.n	8015c8a <adc_inserted_channel_config+0x40>
 8015c72:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8015c76:	2207      	movs	r2, #7
 8015c78:	6904      	ldr	r4, [r0, #16]
 8015c7a:	408a      	lsls	r2, r1
 8015c7c:	ea24 0402 	bic.w	r4, r4, r2
 8015c80:	fa03 f201 	lsl.w	r2, r3, r1
 8015c84:	4322      	orrs	r2, r4
 8015c86:	6102      	str	r2, [r0, #16]
 8015c88:	bd30      	pop	{r4, r5, pc}
 8015c8a:	2a11      	cmp	r2, #17
 8015c8c:	d8fc      	bhi.n	8015c88 <adc_inserted_channel_config+0x3e>
 8015c8e:	2407      	movs	r4, #7
 8015c90:	3a0a      	subs	r2, #10
 8015c92:	68c1      	ldr	r1, [r0, #12]
 8015c94:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015c98:	4094      	lsls	r4, r2
 8015c9a:	ea21 0104 	bic.w	r1, r1, r4
 8015c9e:	fa03 f202 	lsl.w	r2, r3, r2
 8015ca2:	430a      	orrs	r2, r1
 8015ca4:	60c2      	str	r2, [r0, #12]
 8015ca6:	e7ef      	b.n	8015c88 <adc_inserted_channel_config+0x3e>

08015ca8 <adc_external_trigger_source_config>:
 8015ca8:	2901      	cmp	r1, #1
 8015caa:	d002      	beq.n	8015cb2 <adc_external_trigger_source_config+0xa>
 8015cac:	2902      	cmp	r1, #2
 8015cae:	d008      	beq.n	8015cc2 <adc_external_trigger_source_config+0x1a>
 8015cb0:	4770      	bx	lr
 8015cb2:	6883      	ldr	r3, [r0, #8]
 8015cb4:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8015cb8:	6083      	str	r3, [r0, #8]
 8015cba:	6883      	ldr	r3, [r0, #8]
 8015cbc:	431a      	orrs	r2, r3
 8015cbe:	6082      	str	r2, [r0, #8]
 8015cc0:	4770      	bx	lr
 8015cc2:	6883      	ldr	r3, [r0, #8]
 8015cc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015cc8:	e7f6      	b.n	8015cb8 <adc_external_trigger_source_config+0x10>

08015cca <adc_external_trigger_config>:
 8015cca:	f001 0301 	and.w	r3, r1, #1
 8015cce:	f001 0102 	and.w	r1, r1, #2
 8015cd2:	b152      	cbz	r2, 8015cea <adc_external_trigger_config+0x20>
 8015cd4:	b11b      	cbz	r3, 8015cde <adc_external_trigger_config+0x14>
 8015cd6:	6883      	ldr	r3, [r0, #8]
 8015cd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015cdc:	6083      	str	r3, [r0, #8]
 8015cde:	b119      	cbz	r1, 8015ce8 <adc_external_trigger_config+0x1e>
 8015ce0:	6883      	ldr	r3, [r0, #8]
 8015ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015ce6:	6083      	str	r3, [r0, #8]
 8015ce8:	4770      	bx	lr
 8015cea:	b11b      	cbz	r3, 8015cf4 <adc_external_trigger_config+0x2a>
 8015cec:	6883      	ldr	r3, [r0, #8]
 8015cee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015cf2:	6083      	str	r3, [r0, #8]
 8015cf4:	2900      	cmp	r1, #0
 8015cf6:	d0f7      	beq.n	8015ce8 <adc_external_trigger_config+0x1e>
 8015cf8:	6883      	ldr	r3, [r0, #8]
 8015cfa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8015cfe:	e7f2      	b.n	8015ce6 <adc_external_trigger_config+0x1c>

08015d00 <adc_software_trigger_enable>:
 8015d00:	07ca      	lsls	r2, r1, #31
 8015d02:	bf42      	ittt	mi
 8015d04:	6883      	ldrmi	r3, [r0, #8]
 8015d06:	f443 0380 	orrmi.w	r3, r3, #4194304	; 0x400000
 8015d0a:	6083      	strmi	r3, [r0, #8]
 8015d0c:	078b      	lsls	r3, r1, #30
 8015d0e:	bf42      	ittt	mi
 8015d10:	6883      	ldrmi	r3, [r0, #8]
 8015d12:	f443 1300 	orrmi.w	r3, r3, #2097152	; 0x200000
 8015d16:	6083      	strmi	r3, [r0, #8]
 8015d18:	4770      	bx	lr
	...

08015d1c <dma_deinit>:
 8015d1c:	4b0c      	ldr	r3, [pc, #48]	; (8015d50 <dma_deinit+0x34>)
 8015d1e:	4298      	cmp	r0, r3
 8015d20:	d102      	bne.n	8015d28 <dma_deinit+0xc>
 8015d22:	2904      	cmp	r1, #4
 8015d24:	d900      	bls.n	8015d28 <dma_deinit+0xc>
 8015d26:	e7fe      	b.n	8015d26 <dma_deinit+0xa>
 8015d28:	2314      	movs	r3, #20
 8015d2a:	fb03 0301 	mla	r3, r3, r1, r0
 8015d2e:	689a      	ldr	r2, [r3, #8]
 8015d30:	0089      	lsls	r1, r1, #2
 8015d32:	f022 0201 	bic.w	r2, r2, #1
 8015d36:	609a      	str	r2, [r3, #8]
 8015d38:	2200      	movs	r2, #0
 8015d3a:	609a      	str	r2, [r3, #8]
 8015d3c:	60da      	str	r2, [r3, #12]
 8015d3e:	611a      	str	r2, [r3, #16]
 8015d40:	615a      	str	r2, [r3, #20]
 8015d42:	230f      	movs	r3, #15
 8015d44:	6842      	ldr	r2, [r0, #4]
 8015d46:	fa03 f101 	lsl.w	r1, r3, r1
 8015d4a:	4311      	orrs	r1, r2
 8015d4c:	6041      	str	r1, [r0, #4]
 8015d4e:	4770      	bx	lr
 8015d50:	40020400 	andmi	r0, r2, r0, lsl #8

08015d54 <dma_init>:
 8015d54:	4b1b      	ldr	r3, [pc, #108]	; (8015dc4 <dma_init+0x70>)
 8015d56:	b510      	push	{r4, lr}
 8015d58:	4298      	cmp	r0, r3
 8015d5a:	d102      	bne.n	8015d62 <dma_init+0xe>
 8015d5c:	2904      	cmp	r1, #4
 8015d5e:	d900      	bls.n	8015d62 <dma_init+0xe>
 8015d60:	e7fe      	b.n	8015d60 <dma_init+0xc>
 8015d62:	2314      	movs	r3, #20
 8015d64:	fb03 0101 	mla	r1, r3, r1, r0
 8015d68:	6813      	ldr	r3, [r2, #0]
 8015d6a:	610b      	str	r3, [r1, #16]
 8015d6c:	6893      	ldr	r3, [r2, #8]
 8015d6e:	614b      	str	r3, [r1, #20]
 8015d70:	8a13      	ldrh	r3, [r2, #16]
 8015d72:	60cb      	str	r3, [r1, #12]
 8015d74:	68d4      	ldr	r4, [r2, #12]
 8015d76:	6853      	ldr	r3, [r2, #4]
 8015d78:	6888      	ldr	r0, [r1, #8]
 8015d7a:	4323      	orrs	r3, r4
 8015d7c:	6954      	ldr	r4, [r2, #20]
 8015d7e:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8015d82:	4323      	orrs	r3, r4
 8015d84:	4303      	orrs	r3, r0
 8015d86:	608b      	str	r3, [r1, #8]
 8015d88:	7e13      	ldrb	r3, [r2, #24]
 8015d8a:	2b01      	cmp	r3, #1
 8015d8c:	688b      	ldr	r3, [r1, #8]
 8015d8e:	bf0c      	ite	eq
 8015d90:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 8015d94:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8015d98:	608b      	str	r3, [r1, #8]
 8015d9a:	7e53      	ldrb	r3, [r2, #25]
 8015d9c:	2b01      	cmp	r3, #1
 8015d9e:	688b      	ldr	r3, [r1, #8]
 8015da0:	bf0c      	ite	eq
 8015da2:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
 8015da6:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 8015daa:	608b      	str	r3, [r1, #8]
 8015dac:	7e93      	ldrb	r3, [r2, #26]
 8015dae:	b923      	cbnz	r3, 8015dba <dma_init+0x66>
 8015db0:	688b      	ldr	r3, [r1, #8]
 8015db2:	f023 0310 	bic.w	r3, r3, #16
 8015db6:	608b      	str	r3, [r1, #8]
 8015db8:	bd10      	pop	{r4, pc}
 8015dba:	688b      	ldr	r3, [r1, #8]
 8015dbc:	f043 0310 	orr.w	r3, r3, #16
 8015dc0:	e7f9      	b.n	8015db6 <dma_init+0x62>
 8015dc2:	bf00      	nop
 8015dc4:	40020400 	andmi	r0, r2, r0, lsl #8

08015dc8 <dma_circulation_disable>:
 8015dc8:	4b06      	ldr	r3, [pc, #24]	; (8015de4 <dma_circulation_disable+0x1c>)
 8015dca:	4298      	cmp	r0, r3
 8015dcc:	d102      	bne.n	8015dd4 <dma_circulation_disable+0xc>
 8015dce:	2904      	cmp	r1, #4
 8015dd0:	d900      	bls.n	8015dd4 <dma_circulation_disable+0xc>
 8015dd2:	e7fe      	b.n	8015dd2 <dma_circulation_disable+0xa>
 8015dd4:	2314      	movs	r3, #20
 8015dd6:	4359      	muls	r1, r3
 8015dd8:	3008      	adds	r0, #8
 8015dda:	580b      	ldr	r3, [r1, r0]
 8015ddc:	f023 0320 	bic.w	r3, r3, #32
 8015de0:	500b      	str	r3, [r1, r0]
 8015de2:	4770      	bx	lr
 8015de4:	40020400 	andmi	r0, r2, r0, lsl #8

08015de8 <dma_memory_to_memory_disable>:
 8015de8:	4b06      	ldr	r3, [pc, #24]	; (8015e04 <dma_memory_to_memory_disable+0x1c>)
 8015dea:	4298      	cmp	r0, r3
 8015dec:	d102      	bne.n	8015df4 <dma_memory_to_memory_disable+0xc>
 8015dee:	2904      	cmp	r1, #4
 8015df0:	d900      	bls.n	8015df4 <dma_memory_to_memory_disable+0xc>
 8015df2:	e7fe      	b.n	8015df2 <dma_memory_to_memory_disable+0xa>
 8015df4:	2314      	movs	r3, #20
 8015df6:	4359      	muls	r1, r3
 8015df8:	3008      	adds	r0, #8
 8015dfa:	580b      	ldr	r3, [r1, r0]
 8015dfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8015e00:	500b      	str	r3, [r1, r0]
 8015e02:	4770      	bx	lr
 8015e04:	40020400 	andmi	r0, r2, r0, lsl #8

08015e08 <enet_delay>:
 8015e08:	2300      	movs	r3, #0
 8015e0a:	b082      	sub	sp, #8
 8015e0c:	9301      	str	r3, [sp, #4]
 8015e0e:	9001      	str	r0, [sp, #4]
 8015e10:	9b01      	ldr	r3, [sp, #4]
 8015e12:	b90b      	cbnz	r3, 8015e18 <enet_delay+0x10>
 8015e14:	b002      	add	sp, #8
 8015e16:	4770      	bx	lr
 8015e18:	9b01      	ldr	r3, [sp, #4]
 8015e1a:	3b01      	subs	r3, #1
 8015e1c:	9301      	str	r3, [sp, #4]
 8015e1e:	e7f7      	b.n	8015e10 <enet_delay+0x8>

08015e20 <enet_software_reset>:
 8015e20:	4b07      	ldr	r3, [pc, #28]	; (8015e40 <enet_software_reset+0x20>)
 8015e22:	681a      	ldr	r2, [r3, #0]
 8015e24:	f042 0201 	orr.w	r2, r2, #1
 8015e28:	601a      	str	r2, [r3, #0]
 8015e2a:	4a06      	ldr	r2, [pc, #24]	; (8015e44 <enet_software_reset+0x24>)
 8015e2c:	6819      	ldr	r1, [r3, #0]
 8015e2e:	07c9      	lsls	r1, r1, #31
 8015e30:	d501      	bpl.n	8015e36 <enet_software_reset+0x16>
 8015e32:	3a01      	subs	r2, #1
 8015e34:	d1fa      	bne.n	8015e2c <enet_software_reset+0xc>
 8015e36:	6818      	ldr	r0, [r3, #0]
 8015e38:	43c0      	mvns	r0, r0
 8015e3a:	f000 0001 	and.w	r0, r0, #1
 8015e3e:	4770      	bx	lr
 8015e40:	40029000 	andmi	r9, r2, r0
 8015e44:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08015e48 <enet_descriptors_chain_init>:
 8015e48:	f5b0 0fe0 	cmp.w	r0, #7340032	; 0x700000
 8015e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e4e:	4a19      	ldr	r2, [pc, #100]	; (8015eb4 <enet_descriptors_chain_init+0x6c>)
 8015e50:	d125      	bne.n	8015e9e <enet_descriptors_chain_init+0x56>
 8015e52:	2500      	movs	r5, #0
 8015e54:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 8015e58:	2002      	movs	r0, #2
 8015e5a:	4b17      	ldr	r3, [pc, #92]	; (8015eb8 <enet_descriptors_chain_init+0x70>)
 8015e5c:	4c17      	ldr	r4, [pc, #92]	; (8015ebc <enet_descriptors_chain_init+0x74>)
 8015e5e:	6113      	str	r3, [r2, #16]
 8015e60:	4a17      	ldr	r2, [pc, #92]	; (8015ec0 <enet_descriptors_chain_init+0x78>)
 8015e62:	6013      	str	r3, [r2, #0]
 8015e64:	2200      	movs	r2, #0
 8015e66:	f240 5ef4 	movw	lr, #1524	; 0x5f4
 8015e6a:	4916      	ldr	r1, [pc, #88]	; (8015ec4 <enet_descriptors_chain_init+0x7c>)
 8015e6c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8015e70:	600a      	str	r2, [r1, #0]
 8015e72:	4915      	ldr	r1, [pc, #84]	; (8015ec8 <enet_descriptors_chain_init+0x80>)
 8015e74:	600a      	str	r2, [r1, #0]
 8015e76:	f103 0110 	add.w	r1, r3, #16
 8015e7a:	fb0e 4702 	mla	r7, lr, r2, r4
 8015e7e:	f841 7c08 	str.w	r7, [r1, #-8]
 8015e82:	4594      	cmp	ip, r2
 8015e84:	bf94      	ite	ls
 8015e86:	461f      	movls	r7, r3
 8015e88:	460f      	movhi	r7, r1
 8015e8a:	3201      	adds	r2, #1
 8015e8c:	4290      	cmp	r0, r2
 8015e8e:	e941 6504 	strd	r6, r5, [r1, #-16]
 8015e92:	f841 7c04 	str.w	r7, [r1, #-4]
 8015e96:	f101 0110 	add.w	r1, r1, #16
 8015e9a:	d1ee      	bne.n	8015e7a <enet_descriptors_chain_init+0x32>
 8015e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e9e:	4b0b      	ldr	r3, [pc, #44]	; (8015ecc <enet_descriptors_chain_init+0x84>)
 8015ea0:	f244 55f4 	movw	r5, #17908	; 0x45f4
 8015ea4:	60d3      	str	r3, [r2, #12]
 8015ea6:	4a0a      	ldr	r2, [pc, #40]	; (8015ed0 <enet_descriptors_chain_init+0x88>)
 8015ea8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8015eac:	2006      	movs	r0, #6
 8015eae:	4c09      	ldr	r4, [pc, #36]	; (8015ed4 <enet_descriptors_chain_init+0x8c>)
 8015eb0:	6013      	str	r3, [r2, #0]
 8015eb2:	e7d7      	b.n	8015e64 <enet_descriptors_chain_init+0x1c>
 8015eb4:	40029000 	andmi	r9, r2, r0
 8015eb8:	20015a34 	andcs	r5, r1, r4, lsr sl
 8015ebc:	20014e4c 	andcs	r4, r1, ip, asr #28
 8015ec0:	200129f4 	strdcs	r2, [r1], -r4
 8015ec4:	200129e8 	andcs	r2, r1, r8, ror #19
 8015ec8:	200129ec 	andcs	r2, r1, ip, ror #19
 8015ecc:	20014dec 	andcs	r4, r1, ip, ror #27
 8015ed0:	200129f0 	strdcs	r2, [r1], -r0
 8015ed4:	20012a34 	andcs	r2, r1, r4, lsr sl

08015ed8 <enet_frame_receive>:
 8015ed8:	4a1d      	ldr	r2, [pc, #116]	; (8015f50 <enet_frame_receive+0x78>)
 8015eda:	b510      	push	{r4, lr}
 8015edc:	6813      	ldr	r3, [r2, #0]
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	db33      	blt.n	8015f4c <enet_frame_receive+0x74>
 8015ee4:	b970      	cbnz	r0, 8015f04 <enet_frame_receive+0x2c>
 8015ee6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8015eea:	6813      	ldr	r3, [r2, #0]
 8015eec:	6019      	str	r1, [r3, #0]
 8015eee:	4919      	ldr	r1, [pc, #100]	; (8015f54 <enet_frame_receive+0x7c>)
 8015ef0:	6948      	ldr	r0, [r1, #20]
 8015ef2:	0604      	lsls	r4, r0, #24
 8015ef4:	d419      	bmi.n	8015f2a <enet_frame_receive+0x52>
 8015ef6:	6859      	ldr	r1, [r3, #4]
 8015ef8:	0448      	lsls	r0, r1, #17
 8015efa:	d51b      	bpl.n	8015f34 <enet_frame_receive+0x5c>
 8015efc:	68db      	ldr	r3, [r3, #12]
 8015efe:	2001      	movs	r0, #1
 8015f00:	6013      	str	r3, [r2, #0]
 8015f02:	bd10      	pop	{r4, pc}
 8015f04:	f403 4403 	and.w	r4, r3, #33536	; 0x8300
 8015f08:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 8015f0c:	d11e      	bne.n	8015f4c <enet_frame_receive+0x74>
 8015f0e:	f3c3 430d 	ubfx	r3, r3, #16, #14
 8015f12:	3b04      	subs	r3, #4
 8015f14:	428b      	cmp	r3, r1
 8015f16:	d819      	bhi.n	8015f4c <enet_frame_receive+0x74>
 8015f18:	2100      	movs	r1, #0
 8015f1a:	4299      	cmp	r1, r3
 8015f1c:	6814      	ldr	r4, [r2, #0]
 8015f1e:	d2e2      	bcs.n	8015ee6 <enet_frame_receive+0xe>
 8015f20:	68a4      	ldr	r4, [r4, #8]
 8015f22:	5d0c      	ldrb	r4, [r1, r4]
 8015f24:	5444      	strb	r4, [r0, r1]
 8015f26:	3101      	adds	r1, #1
 8015f28:	e7f7      	b.n	8015f1a <enet_frame_receive+0x42>
 8015f2a:	2080      	movs	r0, #128	; 0x80
 8015f2c:	6148      	str	r0, [r1, #20]
 8015f2e:	2000      	movs	r0, #0
 8015f30:	6088      	str	r0, [r1, #8]
 8015f32:	e7e0      	b.n	8015ef6 <enet_frame_receive+0x1e>
 8015f34:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8015f38:	4906      	ldr	r1, [pc, #24]	; (8015f54 <enet_frame_receive+0x7c>)
 8015f3a:	bf05      	ittet	eq
 8015f3c:	3310      	addeq	r3, #16
 8015f3e:	6809      	ldreq	r1, [r1, #0]
 8015f40:	68cb      	ldrne	r3, [r1, #12]
 8015f42:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 8015f46:	bf08      	it	eq
 8015f48:	185b      	addeq	r3, r3, r1
 8015f4a:	e7d8      	b.n	8015efe <enet_frame_receive+0x26>
 8015f4c:	2000      	movs	r0, #0
 8015f4e:	e7d8      	b.n	8015f02 <enet_frame_receive+0x2a>
 8015f50:	200129f0 	strdcs	r2, [r1], -r0
 8015f54:	40029000 	andmi	r9, r2, r0

08015f58 <enet_frame_transmit>:
 8015f58:	4a1e      	ldr	r2, [pc, #120]	; (8015fd4 <enet_frame_transmit+0x7c>)
 8015f5a:	b530      	push	{r4, r5, lr}
 8015f5c:	6813      	ldr	r3, [r2, #0]
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	db34      	blt.n	8015fce <enet_frame_transmit+0x76>
 8015f64:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8015f68:	4299      	cmp	r1, r3
 8015f6a:	d830      	bhi.n	8015fce <enet_frame_transmit+0x76>
 8015f6c:	b9e8      	cbnz	r0, 8015faa <enet_frame_transmit+0x52>
 8015f6e:	6813      	ldr	r3, [r2, #0]
 8015f70:	4819      	ldr	r0, [pc, #100]	; (8015fd8 <enet_frame_transmit+0x80>)
 8015f72:	6059      	str	r1, [r3, #4]
 8015f74:	6819      	ldr	r1, [r3, #0]
 8015f76:	f041 4130 	orr.w	r1, r1, #2952790016	; 0xb0000000
 8015f7a:	6019      	str	r1, [r3, #0]
 8015f7c:	6941      	ldr	r1, [r0, #20]
 8015f7e:	6944      	ldr	r4, [r0, #20]
 8015f80:	f001 0104 	and.w	r1, r1, #4
 8015f84:	f004 0420 	and.w	r4, r4, #32
 8015f88:	4321      	orrs	r1, r4
 8015f8a:	d110      	bne.n	8015fae <enet_frame_transmit+0x56>
 8015f8c:	6819      	ldr	r1, [r3, #0]
 8015f8e:	02c8      	lsls	r0, r1, #11
 8015f90:	d511      	bpl.n	8015fb6 <enet_frame_transmit+0x5e>
 8015f92:	68db      	ldr	r3, [r3, #12]
 8015f94:	2001      	movs	r0, #1
 8015f96:	6013      	str	r3, [r2, #0]
 8015f98:	bd30      	pop	{r4, r5, pc}
 8015f9a:	5cc5      	ldrb	r5, [r0, r3]
 8015f9c:	68a4      	ldr	r4, [r4, #8]
 8015f9e:	551d      	strb	r5, [r3, r4]
 8015fa0:	3301      	adds	r3, #1
 8015fa2:	428b      	cmp	r3, r1
 8015fa4:	6814      	ldr	r4, [r2, #0]
 8015fa6:	d1f8      	bne.n	8015f9a <enet_frame_transmit+0x42>
 8015fa8:	e7e1      	b.n	8015f6e <enet_frame_transmit+0x16>
 8015faa:	2300      	movs	r3, #0
 8015fac:	e7f9      	b.n	8015fa2 <enet_frame_transmit+0x4a>
 8015fae:	6141      	str	r1, [r0, #20]
 8015fb0:	2100      	movs	r1, #0
 8015fb2:	6041      	str	r1, [r0, #4]
 8015fb4:	e7ea      	b.n	8015f8c <enet_frame_transmit+0x34>
 8015fb6:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 8015fba:	4907      	ldr	r1, [pc, #28]	; (8015fd8 <enet_frame_transmit+0x80>)
 8015fbc:	bf05      	ittet	eq
 8015fbe:	3310      	addeq	r3, #16
 8015fc0:	6809      	ldreq	r1, [r1, #0]
 8015fc2:	690b      	ldrne	r3, [r1, #16]
 8015fc4:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 8015fc8:	bf08      	it	eq
 8015fca:	185b      	addeq	r3, r3, r1
 8015fcc:	e7e2      	b.n	8015f94 <enet_frame_transmit+0x3c>
 8015fce:	2000      	movs	r0, #0
 8015fd0:	e7e2      	b.n	8015f98 <enet_frame_transmit+0x40>
 8015fd2:	bf00      	nop
 8015fd4:	200129f4 	strdcs	r2, [r1], -r4
 8015fd8:	40029000 	andmi	r9, r2, r0

08015fdc <enet_transmit_checksum_config>:
 8015fdc:	6803      	ldr	r3, [r0, #0]
 8015fde:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8015fe2:	430b      	orrs	r3, r1
 8015fe4:	6003      	str	r3, [r0, #0]
 8015fe6:	4770      	bx	lr

08015fe8 <enet_mac_address_set>:
 8015fe8:	888a      	ldrh	r2, [r1, #4]
 8015fea:	4b03      	ldr	r3, [pc, #12]	; (8015ff8 <enet_mac_address_set+0x10>)
 8015fec:	50c2      	str	r2, [r0, r3]
 8015fee:	680a      	ldr	r2, [r1, #0]
 8015ff0:	3304      	adds	r3, #4
 8015ff2:	50c2      	str	r2, [r0, r3]
 8015ff4:	4770      	bx	lr
 8015ff6:	bf00      	nop
 8015ff8:	40028040 	andmi	r8, r2, r0, asr #32

08015ffc <enet_rx_enable>:
 8015ffc:	4a05      	ldr	r2, [pc, #20]	; (8016014 <enet_rx_enable+0x18>)
 8015ffe:	6813      	ldr	r3, [r2, #0]
 8016000:	f043 0304 	orr.w	r3, r3, #4
 8016004:	6013      	str	r3, [r2, #0]
 8016006:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801600a:	6993      	ldr	r3, [r2, #24]
 801600c:	f043 0302 	orr.w	r3, r3, #2
 8016010:	6193      	str	r3, [r2, #24]
 8016012:	4770      	bx	lr
 8016014:	40028000 	andmi	r8, r2, r0

08016018 <enet_phy_write_read>:
 8016018:	b530      	push	{r4, r5, lr}
 801601a:	4604      	mov	r4, r0
 801601c:	4d13      	ldr	r5, [pc, #76]	; (801606c <enet_phy_write_read+0x54>)
 801601e:	0192      	lsls	r2, r2, #6
 8016020:	6928      	ldr	r0, [r5, #16]
 8016022:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 8016026:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
 801602a:	f020 00c3 	bic.w	r0, r0, #195	; 0xc3
 801602e:	4302      	orrs	r2, r0
 8016030:	02c9      	lsls	r1, r1, #11
 8016032:	b289      	uxth	r1, r1
 8016034:	2c02      	cmp	r4, #2
 8016036:	ea42 0204 	orr.w	r2, r2, r4
 801603a:	ea42 0201 	orr.w	r2, r2, r1
 801603e:	bf08      	it	eq
 8016040:	8819      	ldrheq	r1, [r3, #0]
 8016042:	f042 0201 	orr.w	r2, r2, #1
 8016046:	bf08      	it	eq
 8016048:	6169      	streq	r1, [r5, #20]
 801604a:	612a      	str	r2, [r5, #16]
 801604c:	4907      	ldr	r1, [pc, #28]	; (801606c <enet_phy_write_read+0x54>)
 801604e:	4a08      	ldr	r2, [pc, #32]	; (8016070 <enet_phy_write_read+0x58>)
 8016050:	6908      	ldr	r0, [r1, #16]
 8016052:	07c0      	lsls	r0, r0, #31
 8016054:	d501      	bpl.n	801605a <enet_phy_write_read+0x42>
 8016056:	3a01      	subs	r2, #1
 8016058:	d1fa      	bne.n	8016050 <enet_phy_write_read+0x38>
 801605a:	690a      	ldr	r2, [r1, #16]
 801605c:	43d2      	mvns	r2, r2
 801605e:	f002 0001 	and.w	r0, r2, #1
 8016062:	b90c      	cbnz	r4, 8016068 <enet_phy_write_read+0x50>
 8016064:	694a      	ldr	r2, [r1, #20]
 8016066:	801a      	strh	r2, [r3, #0]
 8016068:	bd30      	pop	{r4, r5, pc}
 801606a:	bf00      	nop
 801606c:	40028000 	andmi	r8, r2, r0
 8016070:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08016074 <enet_phy_config>:
 8016074:	4b22      	ldr	r3, [pc, #136]	; (8016100 <enet_phy_config+0x8c>)
 8016076:	b513      	push	{r0, r1, r4, lr}
 8016078:	2001      	movs	r0, #1
 801607a:	691c      	ldr	r4, [r3, #16]
 801607c:	f7fe ff56 	bl	8014f2c <rcu_clock_freq_get>
 8016080:	4b20      	ldr	r3, [pc, #128]	; (8016104 <enet_phy_config+0x90>)
 8016082:	4a21      	ldr	r2, [pc, #132]	; (8016108 <enet_phy_config+0x94>)
 8016084:	4403      	add	r3, r0
 8016086:	4293      	cmp	r3, r2
 8016088:	f024 041c 	bic.w	r4, r4, #28
 801608c:	d220      	bcs.n	80160d0 <enet_phy_config+0x5c>
 801608e:	f044 0408 	orr.w	r4, r4, #8
 8016092:	4b1b      	ldr	r3, [pc, #108]	; (8016100 <enet_phy_config+0x8c>)
 8016094:	2200      	movs	r2, #0
 8016096:	611c      	str	r4, [r3, #16]
 8016098:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801609c:	2101      	movs	r1, #1
 801609e:	f8ad 3006 	strh.w	r3, [sp, #6]
 80160a2:	2002      	movs	r0, #2
 80160a4:	f10d 0306 	add.w	r3, sp, #6
 80160a8:	f7ff ffb6 	bl	8016018 <enet_phy_write_read>
 80160ac:	b310      	cbz	r0, 80160f4 <enet_phy_config+0x80>
 80160ae:	2200      	movs	r2, #0
 80160b0:	4816      	ldr	r0, [pc, #88]	; (801610c <enet_phy_config+0x98>)
 80160b2:	f7ff fea9 	bl	8015e08 <enet_delay>
 80160b6:	2101      	movs	r1, #1
 80160b8:	4610      	mov	r0, r2
 80160ba:	f10d 0306 	add.w	r3, sp, #6
 80160be:	f7ff ffab 	bl	8016018 <enet_phy_write_read>
 80160c2:	b1b8      	cbz	r0, 80160f4 <enet_phy_config+0x80>
 80160c4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80160c8:	43c0      	mvns	r0, r0
 80160ca:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 80160ce:	e012      	b.n	80160f6 <enet_phy_config+0x82>
 80160d0:	4b0f      	ldr	r3, [pc, #60]	; (8016110 <enet_phy_config+0x9c>)
 80160d2:	4a10      	ldr	r2, [pc, #64]	; (8016114 <enet_phy_config+0xa0>)
 80160d4:	4403      	add	r3, r0
 80160d6:	4293      	cmp	r3, r2
 80160d8:	d802      	bhi.n	80160e0 <enet_phy_config+0x6c>
 80160da:	f044 040c 	orr.w	r4, r4, #12
 80160de:	e7d8      	b.n	8016092 <enet_phy_config+0x1e>
 80160e0:	4b0d      	ldr	r3, [pc, #52]	; (8016118 <enet_phy_config+0xa4>)
 80160e2:	4a0e      	ldr	r2, [pc, #56]	; (801611c <enet_phy_config+0xa8>)
 80160e4:	4403      	add	r3, r0
 80160e6:	4293      	cmp	r3, r2
 80160e8:	d9d3      	bls.n	8016092 <enet_phy_config+0x1e>
 80160ea:	4b0d      	ldr	r3, [pc, #52]	; (8016120 <enet_phy_config+0xac>)
 80160ec:	4a0d      	ldr	r2, [pc, #52]	; (8016124 <enet_phy_config+0xb0>)
 80160ee:	4403      	add	r3, r0
 80160f0:	4293      	cmp	r3, r2
 80160f2:	d902      	bls.n	80160fa <enet_phy_config+0x86>
 80160f4:	2000      	movs	r0, #0
 80160f6:	b002      	add	sp, #8
 80160f8:	bd10      	pop	{r4, pc}
 80160fa:	f044 0404 	orr.w	r4, r4, #4
 80160fe:	e7c8      	b.n	8016092 <enet_phy_config+0x1e>
 8016100:	40028000 	andmi	r8, r2, r0
 8016104:	feced300 	cdp2	3, 12, cr13, cr14, cr0, {0}
 8016108:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 801610c:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 8016110:	fde9f140 	stc2l	1, cr15, [r9, #256]!	; 0x100
 8016114:	017d783f 	cmneq	sp, pc, lsr r8
 8016118:	fc6c7900 	stc2l	9, cr7, [ip], #-0	; <UNPREDICTABLE>
 801611c:	01c9c37f 	biceq	ip, r9, pc, ror r3
 8016120:	faa2b580 	blx	68c3728 <__stack_size+0x68c1f28>
 8016124:	0112a880 	tsteq	r2, r0, lsl #17

08016128 <enet_init>:
 8016128:	2300      	movs	r3, #0
 801612a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801612c:	4604      	mov	r4, r0
 801612e:	460d      	mov	r5, r1
 8016130:	4616      	mov	r6, r2
 8016132:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016136:	f7ff ff9d 	bl	8016074 <enet_phy_config>
 801613a:	2800      	cmp	r0, #0
 801613c:	d037      	beq.n	80161ae <enet_init+0x86>
 801613e:	4b3b      	ldr	r3, [pc, #236]	; (801622c <enet_init+0x104>)
 8016140:	4a3b      	ldr	r2, [pc, #236]	; (8016230 <enet_init+0x108>)
 8016142:	6819      	ldr	r1, [r3, #0]
 8016144:	2c01      	cmp	r4, #1
 8016146:	ea02 0201 	and.w	r2, r2, r1
 801614a:	601a      	str	r2, [r3, #0]
 801614c:	f04f 0200 	mov.w	r2, #0
 8016150:	605a      	str	r2, [r3, #4]
 8016152:	609a      	str	r2, [r3, #8]
 8016154:	60da      	str	r2, [r3, #12]
 8016156:	6999      	ldr	r1, [r3, #24]
 8016158:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
 801615c:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8016160:	ea4f 4111 	mov.w	r1, r1, lsr #16
 8016164:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8016168:	6199      	str	r1, [r3, #24]
 801616a:	4932      	ldr	r1, [pc, #200]	; (8016234 <enet_init+0x10c>)
 801616c:	61da      	str	r2, [r3, #28]
 801616e:	6988      	ldr	r0, [r1, #24]
 8016170:	4b31      	ldr	r3, [pc, #196]	; (8016238 <enet_init+0x110>)
 8016172:	ea03 0300 	and.w	r3, r3, r0
 8016176:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 801617a:	618b      	str	r3, [r1, #24]
 801617c:	680b      	ldr	r3, [r1, #0]
 801617e:	4b2f      	ldr	r3, [pc, #188]	; (801623c <enet_init+0x114>)
 8016180:	600b      	str	r3, [r1, #0]
 8016182:	d01e      	beq.n	80161c2 <enet_init+0x9a>
 8016184:	08e3      	lsrs	r3, r4, #3
 8016186:	0861      	lsrs	r1, r4, #1
 8016188:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 801618c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016190:	430b      	orrs	r3, r1
 8016192:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016196:	2101      	movs	r1, #1
 8016198:	2002      	movs	r0, #2
 801619a:	f10d 0306 	add.w	r3, sp, #6
 801619e:	f7ff ff3b 	bl	8016018 <enet_phy_write_read>
 80161a2:	b158      	cbz	r0, 80161bc <enet_init+0x94>
 80161a4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80161a8:	f7ff fe2e 	bl	8015e08 <enet_delay>
 80161ac:	e05f      	b.n	801626e <enet_init+0x146>
 80161ae:	4824      	ldr	r0, [pc, #144]	; (8016240 <enet_init+0x118>)
 80161b0:	f7ff fe2a 	bl	8015e08 <enet_delay>
 80161b4:	f7ff ff5e 	bl	8016074 <enet_phy_config>
 80161b8:	2800      	cmp	r0, #0
 80161ba:	d1c0      	bne.n	801613e <enet_init+0x16>
 80161bc:	2000      	movs	r0, #0
 80161be:	b003      	add	sp, #12
 80161c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80161c2:	4614      	mov	r4, r2
 80161c4:	4f1f      	ldr	r7, [pc, #124]	; (8016244 <enet_init+0x11c>)
 80161c6:	2201      	movs	r2, #1
 80161c8:	2000      	movs	r0, #0
 80161ca:	4611      	mov	r1, r2
 80161cc:	f10d 0306 	add.w	r3, sp, #6
 80161d0:	f7ff ff22 	bl	8016018 <enet_phy_write_read>
 80161d4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80161d8:	3401      	adds	r4, #1
 80161da:	f002 0204 	and.w	r2, r2, #4
 80161de:	f8ad 2006 	strh.w	r2, [sp, #6]
 80161e2:	b912      	cbnz	r2, 80161ea <enet_init+0xc2>
 80161e4:	42bc      	cmp	r4, r7
 80161e6:	d1ee      	bne.n	80161c6 <enet_init+0x9e>
 80161e8:	e7e8      	b.n	80161bc <enet_init+0x94>
 80161ea:	42bc      	cmp	r4, r7
 80161ec:	d0e6      	beq.n	80161bc <enet_init+0x94>
 80161ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80161f2:	2101      	movs	r1, #1
 80161f4:	f8ad 2006 	strh.w	r2, [sp, #6]
 80161f8:	2002      	movs	r0, #2
 80161fa:	2200      	movs	r2, #0
 80161fc:	f7ff ff0c 	bl	8016018 <enet_phy_write_read>
 8016200:	2800      	cmp	r0, #0
 8016202:	d0db      	beq.n	80161bc <enet_init+0x94>
 8016204:	2400      	movs	r4, #0
 8016206:	4f0f      	ldr	r7, [pc, #60]	; (8016244 <enet_init+0x11c>)
 8016208:	2201      	movs	r2, #1
 801620a:	2000      	movs	r0, #0
 801620c:	4611      	mov	r1, r2
 801620e:	f10d 0306 	add.w	r3, sp, #6
 8016212:	f7ff ff01 	bl	8016018 <enet_phy_write_read>
 8016216:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801621a:	3401      	adds	r4, #1
 801621c:	f002 0220 	and.w	r2, r2, #32
 8016220:	f8ad 2006 	strh.w	r2, [sp, #6]
 8016224:	b982      	cbnz	r2, 8016248 <enet_init+0x120>
 8016226:	42bc      	cmp	r4, r7
 8016228:	d1ee      	bne.n	8016208 <enet_init+0xe0>
 801622a:	e7c7      	b.n	80161bc <enet_init+0x94>
 801622c:	40028000 	andmi	r8, r2, r0
 8016230:	fd30810f 	ldc2	1, cr8, [r0, #-60]!	; 0xffffffc4
 8016234:	40029000 	andmi	r9, r2, r0
 8016238:	f8de3f23 			; <UNDEFINED> instruction: 0xf8de3f23
 801623c:	02c16000 	sbceq	r6, r1, #0
 8016240:	008fffff 	strdeq	pc, [pc], pc	; <UNPREDICTABLE>
 8016244:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 8016248:	42bc      	cmp	r4, r7
 801624a:	d0b7      	beq.n	80161bc <enet_init+0x94>
 801624c:	2101      	movs	r1, #1
 801624e:	2210      	movs	r2, #16
 8016250:	2000      	movs	r0, #0
 8016252:	f7ff fee1 	bl	8016018 <enet_phy_write_read>
 8016256:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801625a:	f013 0f04 	tst.w	r3, #4
 801625e:	bf14      	ite	ne
 8016260:	f44f 6400 	movne.w	r4, #2048	; 0x800
 8016264:	2400      	moveq	r4, #0
 8016266:	0799      	lsls	r1, r3, #30
 8016268:	d401      	bmi.n	801626e <enet_init+0x146>
 801626a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 801626e:	4b64      	ldr	r3, [pc, #400]	; (8016400 <enet_init+0x2d8>)
 8016270:	056a      	lsls	r2, r5, #21
 8016272:	6818      	ldr	r0, [r3, #0]
 8016274:	f420 40b0 	bic.w	r0, r0, #22528	; 0x5800
 8016278:	ea44 0400 	orr.w	r4, r4, r0
 801627c:	601c      	str	r4, [r3, #0]
 801627e:	d50c      	bpl.n	801629a <enet_init+0x172>
 8016280:	681a      	ldr	r2, [r3, #0]
 8016282:	f005 6580 	and.w	r5, r5, #67108864	; 0x4000000
 8016286:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801628a:	601a      	str	r2, [r3, #0]
 801628c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016290:	6999      	ldr	r1, [r3, #24]
 8016292:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
 8016296:	430d      	orrs	r5, r1
 8016298:	619d      	str	r5, [r3, #24]
 801629a:	4959      	ldr	r1, [pc, #356]	; (8016400 <enet_init+0x2d8>)
 801629c:	4b59      	ldr	r3, [pc, #356]	; (8016404 <enet_init+0x2dc>)
 801629e:	684a      	ldr	r2, [r1, #4]
 80162a0:	4316      	orrs	r6, r2
 80162a2:	604e      	str	r6, [r1, #4]
 80162a4:	681a      	ldr	r2, [r3, #0]
 80162a6:	07d7      	lsls	r7, r2, #31
 80162a8:	d510      	bpl.n	80162cc <enet_init+0x1a4>
 80162aa:	685a      	ldr	r2, [r3, #4]
 80162ac:	680c      	ldr	r4, [r1, #0]
 80162ae:	f002 0080 	and.w	r0, r2, #128	; 0x80
 80162b2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 80162b6:	4320      	orrs	r0, r4
 80162b8:	6008      	str	r0, [r1, #0]
 80162ba:	4853      	ldr	r0, [pc, #332]	; (8016408 <enet_init+0x2e0>)
 80162bc:	0892      	lsrs	r2, r2, #2
 80162be:	6981      	ldr	r1, [r0, #24]
 80162c0:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 80162c4:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80162c8:	430a      	orrs	r2, r1
 80162ca:	6182      	str	r2, [r0, #24]
 80162cc:	681a      	ldr	r2, [r3, #0]
 80162ce:	0796      	lsls	r6, r2, #30
 80162d0:	d508      	bpl.n	80162e4 <enet_init+0x1bc>
 80162d2:	494d      	ldr	r1, [pc, #308]	; (8016408 <enet_init+0x2e0>)
 80162d4:	6898      	ldr	r0, [r3, #8]
 80162d6:	680a      	ldr	r2, [r1, #0]
 80162d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80162dc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80162e0:	4302      	orrs	r2, r0
 80162e2:	600a      	str	r2, [r1, #0]
 80162e4:	681a      	ldr	r2, [r3, #0]
 80162e6:	0755      	lsls	r5, r2, #29
 80162e8:	d508      	bpl.n	80162fc <enet_init+0x1d4>
 80162ea:	4947      	ldr	r1, [pc, #284]	; (8016408 <enet_init+0x2e0>)
 80162ec:	68d8      	ldr	r0, [r3, #12]
 80162ee:	680a      	ldr	r2, [r1, #0]
 80162f0:	f422 027e 	bic.w	r2, r2, #16646144	; 0xfe0000
 80162f4:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80162f8:	4302      	orrs	r2, r0
 80162fa:	600a      	str	r2, [r1, #0]
 80162fc:	681a      	ldr	r2, [r3, #0]
 80162fe:	0714      	lsls	r4, r2, #28
 8016300:	d508      	bpl.n	8016314 <enet_init+0x1ec>
 8016302:	4941      	ldr	r1, [pc, #260]	; (8016408 <enet_init+0x2e0>)
 8016304:	6918      	ldr	r0, [r3, #16]
 8016306:	680a      	ldr	r2, [r1, #0]
 8016308:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 801630c:	f022 0202 	bic.w	r2, r2, #2
 8016310:	4302      	orrs	r2, r0
 8016312:	600a      	str	r2, [r1, #0]
 8016314:	681a      	ldr	r2, [r3, #0]
 8016316:	06d0      	lsls	r0, r2, #27
 8016318:	d506      	bpl.n	8016328 <enet_init+0x200>
 801631a:	493b      	ldr	r1, [pc, #236]	; (8016408 <enet_init+0x2e0>)
 801631c:	4a3b      	ldr	r2, [pc, #236]	; (801640c <enet_init+0x2e4>)
 801631e:	6988      	ldr	r0, [r1, #24]
 8016320:	4002      	ands	r2, r0
 8016322:	6958      	ldr	r0, [r3, #20]
 8016324:	4302      	orrs	r2, r0
 8016326:	618a      	str	r2, [r1, #24]
 8016328:	681a      	ldr	r2, [r3, #0]
 801632a:	0691      	lsls	r1, r2, #26
 801632c:	d508      	bpl.n	8016340 <enet_init+0x218>
 801632e:	4936      	ldr	r1, [pc, #216]	; (8016408 <enet_init+0x2e0>)
 8016330:	6998      	ldr	r0, [r3, #24]
 8016332:	698a      	ldr	r2, [r1, #24]
 8016334:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8016338:	f022 0204 	bic.w	r2, r2, #4
 801633c:	4302      	orrs	r2, r0
 801633e:	618a      	str	r2, [r1, #24]
 8016340:	681a      	ldr	r2, [r3, #0]
 8016342:	0652      	lsls	r2, r2, #25
 8016344:	d506      	bpl.n	8016354 <enet_init+0x22c>
 8016346:	492e      	ldr	r1, [pc, #184]	; (8016400 <enet_init+0x2d8>)
 8016348:	69d8      	ldr	r0, [r3, #28]
 801634a:	69ca      	ldr	r2, [r1, #28]
 801634c:	0c52      	lsrs	r2, r2, #17
 801634e:	0452      	lsls	r2, r2, #17
 8016350:	4302      	orrs	r2, r0
 8016352:	61ca      	str	r2, [r1, #28]
 8016354:	681a      	ldr	r2, [r3, #0]
 8016356:	0617      	lsls	r7, r2, #24
 8016358:	d517      	bpl.n	801638a <enet_init+0x262>
 801635a:	4c29      	ldr	r4, [pc, #164]	; (8016400 <enet_init+0x2d8>)
 801635c:	6a1a      	ldr	r2, [r3, #32]
 801635e:	69a0      	ldr	r0, [r4, #24]
 8016360:	f422 417f 	bic.w	r1, r2, #65280	; 0xff00
 8016364:	f020 00be 	bic.w	r0, r0, #190	; 0xbe
 8016368:	0400      	lsls	r0, r0, #16
 801636a:	0c00      	lsrs	r0, r0, #16
 801636c:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8016370:	4301      	orrs	r1, r0
 8016372:	4825      	ldr	r0, [pc, #148]	; (8016408 <enet_init+0x2e0>)
 8016374:	61a1      	str	r1, [r4, #24]
 8016376:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 801637a:	0a12      	lsrs	r2, r2, #8
 801637c:	f021 0177 	bic.w	r1, r1, #119	; 0x77
 8016380:	f002 0277 	and.w	r2, r2, #119	; 0x77
 8016384:	430a      	orrs	r2, r1
 8016386:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 801638a:	681a      	ldr	r2, [r3, #0]
 801638c:	05d6      	lsls	r6, r2, #23
 801638e:	bf42      	ittt	mi
 8016390:	6a59      	ldrmi	r1, [r3, #36]	; 0x24
 8016392:	4a1b      	ldrmi	r2, [pc, #108]	; (8016400 <enet_init+0x2d8>)
 8016394:	6091      	strmi	r1, [r2, #8]
 8016396:	681a      	ldr	r2, [r3, #0]
 8016398:	0595      	lsls	r5, r2, #22
 801639a:	bf42      	ittt	mi
 801639c:	4a18      	ldrmi	r2, [pc, #96]	; (8016400 <enet_init+0x2d8>)
 801639e:	6a99      	ldrmi	r1, [r3, #40]	; 0x28
 80163a0:	60d1      	strmi	r1, [r2, #12]
 80163a2:	681a      	ldr	r2, [r3, #0]
 80163a4:	0554      	lsls	r4, r2, #21
 80163a6:	d508      	bpl.n	80163ba <enet_init+0x292>
 80163a8:	4915      	ldr	r1, [pc, #84]	; (8016400 <enet_init+0x2d8>)
 80163aa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80163ac:	684a      	ldr	r2, [r1, #4]
 80163ae:	f422 62fb 	bic.w	r2, r2, #2008	; 0x7d8
 80163b2:	f022 0206 	bic.w	r2, r2, #6
 80163b6:	4302      	orrs	r2, r0
 80163b8:	604a      	str	r2, [r1, #4]
 80163ba:	681a      	ldr	r2, [r3, #0]
 80163bc:	0510      	lsls	r0, r2, #20
 80163be:	d508      	bpl.n	80163d2 <enet_init+0x2aa>
 80163c0:	490f      	ldr	r1, [pc, #60]	; (8016400 <enet_init+0x2d8>)
 80163c2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80163c4:	680a      	ldr	r2, [r1, #0]
 80163c6:	f422 3291 	bic.w	r2, r2, #74240	; 0x12200
 80163ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80163ce:	4302      	orrs	r2, r0
 80163d0:	600a      	str	r2, [r1, #0]
 80163d2:	681a      	ldr	r2, [r3, #0]
 80163d4:	04d1      	lsls	r1, r2, #19
 80163d6:	d506      	bpl.n	80163e6 <enet_init+0x2be>
 80163d8:	4909      	ldr	r1, [pc, #36]	; (8016400 <enet_init+0x2d8>)
 80163da:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80163dc:	680a      	ldr	r2, [r1, #0]
 80163de:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80163e2:	4302      	orrs	r2, r0
 80163e4:	600a      	str	r2, [r1, #0]
 80163e6:	681a      	ldr	r2, [r3, #0]
 80163e8:	0492      	lsls	r2, r2, #18
 80163ea:	d506      	bpl.n	80163fa <enet_init+0x2d2>
 80163ec:	4904      	ldr	r1, [pc, #16]	; (8016400 <enet_init+0x2d8>)
 80163ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80163f0:	680a      	ldr	r2, [r1, #0]
 80163f2:	f422 2260 	bic.w	r2, r2, #917504	; 0xe0000
 80163f6:	4313      	orrs	r3, r2
 80163f8:	600b      	str	r3, [r1, #0]
 80163fa:	2001      	movs	r0, #1
 80163fc:	e6df      	b.n	80161be <enet_init+0x96>
 80163fe:	bf00      	nop
 8016400:	40028000 	andmi	r8, r2, r0
 8016404:	200129f8 	strdcs	r2, [r1], -r8
 8016408:	40029000 	andmi	r9, r2, r0
 801640c:	fdde3fe7 	ldc2l	15, cr3, [lr, #924]	; 0x39c

08016410 <enet_txfifo_flush>:
 8016410:	4b06      	ldr	r3, [pc, #24]	; (801642c <enet_txfifo_flush+0x1c>)
 8016412:	4807      	ldr	r0, [pc, #28]	; (8016430 <enet_txfifo_flush+0x20>)
 8016414:	699a      	ldr	r2, [r3, #24]
 8016416:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801641a:	619a      	str	r2, [r3, #24]
 801641c:	699a      	ldr	r2, [r3, #24]
 801641e:	02d2      	lsls	r2, r2, #11
 8016420:	d502      	bpl.n	8016428 <enet_txfifo_flush+0x18>
 8016422:	3801      	subs	r0, #1
 8016424:	d1fa      	bne.n	801641c <enet_txfifo_flush+0xc>
 8016426:	4770      	bx	lr
 8016428:	2001      	movs	r0, #1
 801642a:	4770      	bx	lr
 801642c:	40029000 	andmi	r9, r2, r0
 8016430:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08016434 <enet_tx_enable>:
 8016434:	4a06      	ldr	r2, [pc, #24]	; (8016450 <enet_tx_enable+0x1c>)
 8016436:	b508      	push	{r3, lr}
 8016438:	6813      	ldr	r3, [r2, #0]
 801643a:	f043 0308 	orr.w	r3, r3, #8
 801643e:	6013      	str	r3, [r2, #0]
 8016440:	f7ff ffe6 	bl	8016410 <enet_txfifo_flush>
 8016444:	4a03      	ldr	r2, [pc, #12]	; (8016454 <enet_tx_enable+0x20>)
 8016446:	6993      	ldr	r3, [r2, #24]
 8016448:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801644c:	6193      	str	r3, [r2, #24]
 801644e:	bd08      	pop	{r3, pc}
 8016450:	40028000 	andmi	r8, r2, r0
 8016454:	40029000 	andmi	r9, r2, r0

08016458 <enet_enable>:
 8016458:	b508      	push	{r3, lr}
 801645a:	f7ff ffeb 	bl	8016434 <enet_tx_enable>
 801645e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016462:	f7ff bdcb 	b.w	8015ffc <enet_rx_enable>

08016466 <enet_desc_information_get>:
 8016466:	2905      	cmp	r1, #5
 8016468:	d817      	bhi.n	801649a <enet_desc_information_get+0x34>
 801646a:	e8df f001 	tbb	[pc, r1]
 801646e:	03091012 	movweq	r1, #36882	; 0x9012
 8016472:	68401007 	stmdavs	r0, {r0, r1, r2, ip}^
 8016476:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801647a:	4770      	bx	lr
 801647c:	88c0      	ldrh	r0, [r0, #6]
 801647e:	e7fa      	b.n	8016476 <enet_desc_information_get+0x10>
 8016480:	8840      	ldrh	r0, [r0, #2]
 8016482:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8016486:	2804      	cmp	r0, #4
 8016488:	d90a      	bls.n	80164a0 <enet_desc_information_get+0x3a>
 801648a:	3804      	subs	r0, #4
 801648c:	4770      	bx	lr
 801648e:	6880      	ldr	r0, [r0, #8]
 8016490:	4770      	bx	lr
 8016492:	6800      	ldr	r0, [r0, #0]
 8016494:	f3c0 00c3 	ubfx	r0, r0, #3, #4
 8016498:	4770      	bx	lr
 801649a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801649e:	4770      	bx	lr
 80164a0:	2000      	movs	r0, #0
 80164a2:	4770      	bx	lr

080164a4 <enet_rxframe_drop>:
 80164a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80164a8:	4814      	ldr	r0, [pc, #80]	; (80164fc <enet_rxframe_drop+0x58>)
 80164aa:	b510      	push	{r4, lr}
 80164ac:	6802      	ldr	r2, [r0, #0]
 80164ae:	4914      	ldr	r1, [pc, #80]	; (8016500 <enet_rxframe_drop+0x5c>)
 80164b0:	6854      	ldr	r4, [r2, #4]
 80164b2:	6013      	str	r3, [r2, #0]
 80164b4:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 80164b8:	680b      	ldr	r3, [r1, #0]
 80164ba:	d009      	beq.n	80164d0 <enet_rxframe_drop+0x2c>
 80164bc:	b12b      	cbz	r3, 80164ca <enet_rxframe_drop+0x26>
 80164be:	68da      	ldr	r2, [r3, #12]
 80164c0:	6002      	str	r2, [r0, #0]
 80164c2:	681a      	ldr	r2, [r3, #0]
 80164c4:	b1ba      	cbz	r2, 80164f6 <enet_rxframe_drop+0x52>
 80164c6:	600a      	str	r2, [r1, #0]
 80164c8:	bd10      	pop	{r4, pc}
 80164ca:	68d3      	ldr	r3, [r2, #12]
 80164cc:	6003      	str	r3, [r0, #0]
 80164ce:	e7fb      	b.n	80164c8 <enet_rxframe_drop+0x24>
 80164d0:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80164d4:	4c0b      	ldr	r4, [pc, #44]	; (8016504 <enet_rxframe_drop+0x60>)
 80164d6:	d006      	beq.n	80164e6 <enet_rxframe_drop+0x42>
 80164d8:	68e2      	ldr	r2, [r4, #12]
 80164da:	6002      	str	r2, [r0, #0]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d0f3      	beq.n	80164c8 <enet_rxframe_drop+0x24>
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	600b      	str	r3, [r1, #0]
 80164e4:	e7f0      	b.n	80164c8 <enet_rxframe_drop+0x24>
 80164e6:	6824      	ldr	r4, [r4, #0]
 80164e8:	3210      	adds	r2, #16
 80164ea:	f3c4 0484 	ubfx	r4, r4, #2, #5
 80164ee:	4422      	add	r2, r4
 80164f0:	6002      	str	r2, [r0, #0]
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d0e8      	beq.n	80164c8 <enet_rxframe_drop+0x24>
 80164f6:	3310      	adds	r3, #16
 80164f8:	e7f3      	b.n	80164e2 <enet_rxframe_drop+0x3e>
 80164fa:	bf00      	nop
 80164fc:	200129f0 	strdcs	r2, [r1], -r0
 8016500:	200129e8 	andcs	r2, r1, r8, ror #19
 8016504:	40029000 	andmi	r9, r2, r0

08016508 <enet_rxframe_size_get>:
 8016508:	b508      	push	{r3, lr}
 801650a:	4b0c      	ldr	r3, [pc, #48]	; (801653c <enet_rxframe_size_get+0x34>)
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	6818      	ldr	r0, [r3, #0]
 8016510:	2800      	cmp	r0, #0
 8016512:	db10      	blt.n	8016536 <enet_rxframe_size_get+0x2e>
 8016514:	f400 4303 	and.w	r3, r0, #33536	; 0x8300
 8016518:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801651c:	d003      	beq.n	8016526 <enet_rxframe_size_get+0x1e>
 801651e:	f7ff ffc1 	bl	80164a4 <enet_rxframe_drop>
 8016522:	2001      	movs	r0, #1
 8016524:	bd08      	pop	{r3, pc}
 8016526:	f000 0321 	and.w	r3, r0, #33	; 0x21
 801652a:	2b21      	cmp	r3, #33	; 0x21
 801652c:	d0f7      	beq.n	801651e <enet_rxframe_size_get+0x16>
 801652e:	f3c0 400d 	ubfx	r0, r0, #16, #14
 8016532:	3804      	subs	r0, #4
 8016534:	e7f6      	b.n	8016524 <enet_rxframe_size_get+0x1c>
 8016536:	2000      	movs	r0, #0
 8016538:	e7f4      	b.n	8016524 <enet_rxframe_size_get+0x1c>
 801653a:	bf00      	nop
 801653c:	200129f0 	strdcs	r2, [r1], -r0

08016540 <enet_initpara_reset>:
 8016540:	2200      	movs	r2, #0
 8016542:	4b08      	ldr	r3, [pc, #32]	; (8016564 <enet_initpara_reset+0x24>)
 8016544:	e9c3 2200 	strd	r2, r2, [r3]
 8016548:	e9c3 2202 	strd	r2, r2, [r3, #8]
 801654c:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8016550:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8016554:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8016558:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 801655c:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
 8016560:	639a      	str	r2, [r3, #56]	; 0x38
 8016562:	4770      	bx	lr
 8016564:	200129f8 	strdcs	r2, [r1], -r8

08016568 <enet_deinit>:
 8016568:	b508      	push	{r3, lr}
 801656a:	f640 200e 	movw	r0, #2574	; 0xa0e
 801656e:	f7fe fc34 	bl	8014dda <rcu_periph_reset_enable>
 8016572:	f640 200e 	movw	r0, #2574	; 0xa0e
 8016576:	f7fe fc32 	bl	8014dde <rcu_periph_reset_disable>
 801657a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801657e:	f7ff bfdf 	b.w	8016540 <enet_initpara_reset>
	...

08016584 <i2c_clock_config>:
 8016584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016586:	4605      	mov	r5, r0
 8016588:	2002      	movs	r0, #2
 801658a:	460c      	mov	r4, r1
 801658c:	4617      	mov	r7, r2
 801658e:	f7fe fccd 	bl	8014f2c <rcu_clock_freq_get>
 8016592:	4927      	ldr	r1, [pc, #156]	; (8016630 <i2c_clock_config+0xac>)
 8016594:	4a27      	ldr	r2, [pc, #156]	; (8016634 <i2c_clock_config+0xb0>)
 8016596:	fbb0 f1f1 	udiv	r1, r0, r1
 801659a:	4290      	cmp	r0, r2
 801659c:	bf34      	ite	cc
 801659e:	460b      	movcc	r3, r1
 80165a0:	2336      	movcs	r3, #54	; 0x36
 80165a2:	686e      	ldr	r6, [r5, #4]
 80165a4:	4a24      	ldr	r2, [pc, #144]	; (8016638 <i2c_clock_config+0xb4>)
 80165a6:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 80165aa:	431e      	orrs	r6, r3
 80165ac:	4294      	cmp	r4, r2
 80165ae:	606e      	str	r6, [r5, #4]
 80165b0:	d816      	bhi.n	80165e0 <i2c_clock_config+0x5c>
 80165b2:	3101      	adds	r1, #1
 80165b4:	2935      	cmp	r1, #53	; 0x35
 80165b6:	d90d      	bls.n	80165d4 <i2c_clock_config+0x50>
 80165b8:	2336      	movs	r3, #54	; 0x36
 80165ba:	622b      	str	r3, [r5, #32]
 80165bc:	0064      	lsls	r4, r4, #1
 80165be:	fbb0 f4f4 	udiv	r4, r0, r4
 80165c2:	2c04      	cmp	r4, #4
 80165c4:	bf38      	it	cc
 80165c6:	2404      	movcc	r4, #4
 80165c8:	69e8      	ldr	r0, [r5, #28]
 80165ca:	f3c4 040b 	ubfx	r4, r4, #0, #12
 80165ce:	4304      	orrs	r4, r0
 80165d0:	61ec      	str	r4, [r5, #28]
 80165d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80165d4:	2902      	cmp	r1, #2
 80165d6:	d801      	bhi.n	80165dc <i2c_clock_config+0x58>
 80165d8:	2302      	movs	r3, #2
 80165da:	e7ee      	b.n	80165ba <i2c_clock_config+0x36>
 80165dc:	6229      	str	r1, [r5, #32]
 80165de:	e7ed      	b.n	80165bc <i2c_clock_config+0x38>
 80165e0:	4a16      	ldr	r2, [pc, #88]	; (801663c <i2c_clock_config+0xb8>)
 80165e2:	4294      	cmp	r4, r2
 80165e4:	d8f5      	bhi.n	80165d2 <i2c_clock_config+0x4e>
 80165e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80165ea:	4353      	muls	r3, r2
 80165ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80165f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80165f4:	3301      	adds	r3, #1
 80165f6:	622b      	str	r3, [r5, #32]
 80165f8:	b997      	cbnz	r7, 8016620 <i2c_clock_config+0x9c>
 80165fa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80165fe:	fbb0 f4f4 	udiv	r4, r0, r4
 8016602:	69eb      	ldr	r3, [r5, #28]
 8016604:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8016608:	61eb      	str	r3, [r5, #28]
 801660a:	f3c4 030b 	ubfx	r3, r4, #0, #12
 801660e:	b90b      	cbnz	r3, 8016614 <i2c_clock_config+0x90>
 8016610:	f044 0401 	orr.w	r4, r4, #1
 8016614:	69eb      	ldr	r3, [r5, #28]
 8016616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801661a:	61eb      	str	r3, [r5, #28]
 801661c:	69e8      	ldr	r0, [r5, #28]
 801661e:	e7d6      	b.n	80165ce <i2c_clock_config+0x4a>
 8016620:	2119      	movs	r1, #25
 8016622:	434c      	muls	r4, r1
 8016624:	69eb      	ldr	r3, [r5, #28]
 8016626:	fbb0 f4f4 	udiv	r4, r0, r4
 801662a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801662e:	e7eb      	b.n	8016608 <i2c_clock_config+0x84>
 8016630:	000f4240 	andeq	r4, pc, r0, asr #4
 8016634:	0337f980 	teqeq	r7, #128, 18	; 0x200000	; <UNPREDICTABLE>
 8016638:	000186a0 	andeq	r8, r1, r0, lsr #13
 801663c:	00061a80 	andeq	r1, r6, r0, lsl #21

08016640 <i2c_ack_config>:
 8016640:	6803      	ldr	r3, [r0, #0]
 8016642:	2901      	cmp	r1, #1
 8016644:	bf0c      	ite	eq
 8016646:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
 801664a:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 801664e:	6003      	str	r3, [r0, #0]
 8016650:	4770      	bx	lr

08016652 <i2c_ackpos_config>:
 8016652:	6803      	ldr	r3, [r0, #0]
 8016654:	b919      	cbnz	r1, 801665e <i2c_ackpos_config+0xc>
 8016656:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801665a:	6003      	str	r3, [r0, #0]
 801665c:	4770      	bx	lr
 801665e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016662:	e7fa      	b.n	801665a <i2c_ackpos_config+0x8>

08016664 <i2c_master_addressing>:
 8016664:	3202      	adds	r2, #2
 8016666:	bf0c      	ite	eq
 8016668:	f021 0101 	biceq.w	r1, r1, #1
 801666c:	f041 0101 	orrne.w	r1, r1, #1
 8016670:	6101      	str	r1, [r0, #16]
 8016672:	4770      	bx	lr

08016674 <i2c_enable>:
 8016674:	6803      	ldr	r3, [r0, #0]
 8016676:	f043 0301 	orr.w	r3, r3, #1
 801667a:	6003      	str	r3, [r0, #0]
 801667c:	4770      	bx	lr

0801667e <i2c_start_on_bus>:
 801667e:	6803      	ldr	r3, [r0, #0]
 8016680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016684:	6003      	str	r3, [r0, #0]
 8016686:	4770      	bx	lr

08016688 <i2c_stop_on_bus>:
 8016688:	6803      	ldr	r3, [r0, #0]
 801668a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801668e:	6003      	str	r3, [r0, #0]
 8016690:	4770      	bx	lr

08016692 <i2c_data_transmit>:
 8016692:	6101      	str	r1, [r0, #16]
 8016694:	4770      	bx	lr

08016696 <i2c_data_receive>:
 8016696:	6900      	ldr	r0, [r0, #16]
 8016698:	b2c0      	uxtb	r0, r0
 801669a:	4770      	bx	lr

0801669c <i2c_flag_get>:
 801669c:	098b      	lsrs	r3, r1, #6
 801669e:	5818      	ldr	r0, [r3, r0]
 80166a0:	f001 011f 	and.w	r1, r1, #31
 80166a4:	40c8      	lsrs	r0, r1
 80166a6:	f000 0001 	and.w	r0, r0, #1
 80166aa:	4770      	bx	lr

080166ac <i2c_flag_clear>:
 80166ac:	f240 5301 	movw	r3, #1281	; 0x501
 80166b0:	4299      	cmp	r1, r3
 80166b2:	b510      	push	{r4, lr}
 80166b4:	d102      	bne.n	80166bc <i2c_flag_clear+0x10>
 80166b6:	6943      	ldr	r3, [r0, #20]
 80166b8:	6983      	ldr	r3, [r0, #24]
 80166ba:	bd10      	pop	{r4, pc}
 80166bc:	2201      	movs	r2, #1
 80166be:	098c      	lsrs	r4, r1, #6
 80166c0:	5823      	ldr	r3, [r4, r0]
 80166c2:	f001 011f 	and.w	r1, r1, #31
 80166c6:	fa02 f101 	lsl.w	r1, r2, r1
 80166ca:	ea23 0101 	bic.w	r1, r3, r1
 80166ce:	5021      	str	r1, [r4, r0]
 80166d0:	e7f3      	b.n	80166ba <i2c_flag_clear+0xe>

080166d2 <i2s_init>:
 80166d2:	b510      	push	{r4, lr}
 80166d4:	69c4      	ldr	r4, [r0, #28]
 80166d6:	f424 647b 	bic.w	r4, r4, #4016	; 0xfb0
 80166da:	f024 0408 	bic.w	r4, r4, #8
 80166de:	0424      	lsls	r4, r4, #16
 80166e0:	0c24      	lsrs	r4, r4, #16
 80166e2:	431c      	orrs	r4, r3
 80166e4:	4314      	orrs	r4, r2
 80166e6:	430c      	orrs	r4, r1
 80166e8:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 80166ec:	61c4      	str	r4, [r0, #28]
 80166ee:	bd10      	pop	{r4, pc}

080166f0 <i2s_psc_config>:
 80166f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166f4:	4698      	mov	r8, r3
 80166f6:	2302      	movs	r3, #2
 80166f8:	6203      	str	r3, [r0, #32]
 80166fa:	4b26      	ldr	r3, [pc, #152]	; (8016794 <i2s_psc_config+0xa4>)
 80166fc:	4617      	mov	r7, r2
 80166fe:	4298      	cmp	r0, r3
 8016700:	bf0c      	ite	eq
 8016702:	f44f 3300 	moveq.w	r3, #131072	; 0x20000
 8016706:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 801670a:	4a23      	ldr	r2, [pc, #140]	; (8016798 <i2s_psc_config+0xa8>)
 801670c:	4605      	mov	r5, r0
 801670e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8016710:	460e      	mov	r6, r1
 8016712:	4018      	ands	r0, r3
 8016714:	d036      	beq.n	8016784 <i2s_psc_config+0x94>
 8016716:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8016718:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801671c:	1f99      	subs	r1, r3, #6
 801671e:	2908      	cmp	r1, #8
 8016720:	d82c      	bhi.n	801677c <i2s_psc_config+0x8c>
 8016722:	3302      	adds	r3, #2
 8016724:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8016726:	f3c0 1003 	ubfx	r0, r0, #4, #4
 801672a:	1c42      	adds	r2, r0, #1
 801672c:	481b      	ldr	r0, [pc, #108]	; (801679c <i2s_psc_config+0xac>)
 801672e:	fbb0 f0f2 	udiv	r0, r0, r2
 8016732:	4358      	muls	r0, r3
 8016734:	0040      	lsls	r0, r0, #1
 8016736:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
 801673a:	f04f 010a 	mov.w	r1, #10
 801673e:	d124      	bne.n	801678a <i2s_psc_config+0x9a>
 8016740:	0a04      	lsrs	r4, r0, #8
 8016742:	434c      	muls	r4, r1
 8016744:	fbb4 f4f6 	udiv	r4, r4, r6
 8016748:	260a      	movs	r6, #10
 801674a:	3405      	adds	r4, #5
 801674c:	fbb4 f4f6 	udiv	r4, r4, r6
 8016750:	f004 0301 	and.w	r3, r4, #1
 8016754:	0864      	lsrs	r4, r4, #1
 8016756:	1ea2      	subs	r2, r4, #2
 8016758:	2afd      	cmp	r2, #253	; 0xfd
 801675a:	bf86      	itte	hi
 801675c:	2300      	movhi	r3, #0
 801675e:	2402      	movhi	r4, #2
 8016760:	021b      	lslls	r3, r3, #8
 8016762:	431c      	orrs	r4, r3
 8016764:	ea44 0408 	orr.w	r4, r4, r8
 8016768:	622c      	str	r4, [r5, #32]
 801676a:	69eb      	ldr	r3, [r5, #28]
 801676c:	f023 0307 	bic.w	r3, r3, #7
 8016770:	61eb      	str	r3, [r5, #28]
 8016772:	69ea      	ldr	r2, [r5, #28]
 8016774:	4317      	orrs	r7, r2
 8016776:	61ef      	str	r7, [r5, #28]
 8016778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801677c:	2b0f      	cmp	r3, #15
 801677e:	bf08      	it	eq
 8016780:	2314      	moveq	r3, #20
 8016782:	e7cf      	b.n	8016724 <i2s_psc_config+0x34>
 8016784:	f7fe fbd2 	bl	8014f2c <rcu_clock_freq_get>
 8016788:	e7d5      	b.n	8016736 <i2s_psc_config+0x46>
 801678a:	b90f      	cbnz	r7, 8016790 <i2s_psc_config+0xa0>
 801678c:	0944      	lsrs	r4, r0, #5
 801678e:	e7d8      	b.n	8016742 <i2s_psc_config+0x52>
 8016790:	0984      	lsrs	r4, r0, #6
 8016792:	e7d6      	b.n	8016742 <i2s_psc_config+0x52>
 8016794:	40003800 	andmi	r3, r0, r0, lsl #16
 8016798:	40021000 	andmi	r1, r2, r0
 801679c:	017d7840 	cmneq	sp, r0, asr #16

080167a0 <i2s_enable>:
 80167a0:	69c3      	ldr	r3, [r0, #28]
 80167a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80167a6:	61c3      	str	r3, [r0, #28]
 80167a8:	4770      	bx	lr

080167aa <i2s_disable>:
 80167aa:	69c3      	ldr	r3, [r0, #28]
 80167ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80167b0:	61c3      	str	r3, [r0, #28]
 80167b2:	4770      	bx	lr

080167b4 <spi_dma_enable>:
 80167b4:	6843      	ldr	r3, [r0, #4]
 80167b6:	b919      	cbnz	r1, 80167c0 <spi_dma_enable+0xc>
 80167b8:	f043 0302 	orr.w	r3, r3, #2
 80167bc:	6043      	str	r3, [r0, #4]
 80167be:	4770      	bx	lr
 80167c0:	f043 0301 	orr.w	r3, r3, #1
 80167c4:	e7fa      	b.n	80167bc <spi_dma_enable+0x8>
	...

Disassembly of section .rodata:

080167c8 <vtable for DisplayHandler-0xdc>:
 80167c8:	00000003 	andeq	r0, r0, r3
 80167cc:	000000aa 	andeq	r0, r0, sl, lsr #1
 80167d0:	00000006 	andeq	r0, r0, r6
 80167d4:	00000000 	andeq	r0, r0, r0
 80167d8:	01ff0000 	mvnseq	r0, r0
 80167dc:	00000001 	andeq	r0, r0, r1
 80167e0:	00000001 	andeq	r0, r0, r1
 80167e4:	00000001 	andeq	r0, r0, r1
 80167e8:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80167ec:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 80167f8:	03020100 	movweq	r0, #8448	; 0x2100
 80167fc:	08070604 	stmdaeq	r7, {r2, r9, sl}
 8016800:	00000009 	andeq	r0, r0, r9
 8016804:	03020100 	movweq	r0, #8448	; 0x2100
 8016808:	3a732504 	bcc	9cdfc20 <__exidx_end+0x1cc7060>
 801680c:	31007525 	tstcc	r0, r5, lsr #10
 8016810:	38343a35 	ldmdacc	r4!, {r0, r2, r4, r5, r9, fp, ip, sp}
 8016814:	0036353a 	eorseq	r3, r6, sl, lsr r5
 8016818:	206e614a 	rsbcs	r6, lr, sl, asr #2
 801681c:	32203431 	eorcc	r3, r0, #822083584	; 0x31000000
 8016820:	00323230 	eorseq	r3, r2, r0, lsr r2
 8016824:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016828:	2074654e 	rsbscs	r6, r4, lr, asr #10
 801682c:	6f4e2034 	svcvs	0x004e2034
 8016830:	1b206564 	blne	882fdc8 <__exidx_end+0x817208>
 8016834:	6d32335b 	ldcvs	3, cr3, [r2, #-364]!	; 0xfffffe94
 8016838:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 801683c:	6f63206c 	svcvs	0x0063206c
 8016840:	6f72746e 	svcvs	0x0072746e
 8016844:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 8016848:	78317b20 	ldmdavc	r1!, {r5, r8, r9, fp, ip, sp, lr}
 801684c:	55203420 	strpl	r3, [r0, #-1056]!	; 0xfffffbe0
 8016850:	6576696e 	ldrbvs	r6, [r6, #-2414]!	; 0xfffff692
 8016854:	73657372 	cmnvc	r5, #-939524095	; 0xc8000001
 8016858:	335b1b7d 	cmpcc	fp, #128000	; 0x1f400
 801685c:	2e006d37 	mcrcs	13, 0, r6, cr0, cr7, {1}
 8016860:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 8016864:	00676966 	rsbeq	r6, r7, r6, ror #18
 8016868:	74685f2e 	strbtvc	r5, [r8], #-3886	; 0xfffff0d2
 801686c:	6e007074 	mcrvs	0, 0, r7, cr0, cr4, {3}
 8016870:	3d65646f 	cfstrdcc	mvd6, [r5, #-444]!	; 0xfffffe44
 8016874:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016878:	2074654e 	rsbscs	r6, r4, lr, asr #10
 801687c:	69502034 	ldmdbvs	r0, {r2, r4, r5, sp}^
 8016880:	006c6578 	rsbeq	r6, ip, r8, ror r5
 8016884:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016888:	2074654e 	rsbscs	r6, r4, lr, asr #10
 801688c:	69502034 	ldmdbvs	r0, {r2, r4, r5, sp}^
 8016890:	206c6578 	rsbcs	r6, ip, r8, ror r5
 8016894:	73250031 			; <UNDEFINED> instruction: 0x73250031
 8016898:	2064253a 	rsbcs	r2, r4, sl, lsr r5
 801689c:	20642547 	rsbcs	r2, r4, r7, asr #10
 80168a0:	00007325 	andeq	r7, r0, r5, lsr #6

080168a4 <vtable for DisplayHandler>:
	...
 80168ac:	08007edb 	stmdaeq	r0, {r0, r1, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80168b0:	08007f35 	stmdaeq	r0, {r0, r2, r4, r5, r8, r9, sl, fp, ip, sp, lr}
 80168b4:	08007ff1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}

080168b8 <vtable for DisplayUdfHandler>:
	...
 80168c0:	08007edd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80168c4:	08007f41 	stmdaeq	r0, {r0, r6, r8, r9, sl, fp, ip, sp, lr}
 80168c8:	08007fc9 	stmdaeq	r0, {r0, r3, r6, r7, r8, r9, sl, fp, ip, sp, lr}
 80168cc:	08007edf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80168d0:	08007fb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, r9, sl, fp, ip, sp, lr}
 80168d4:	08007fa1 	stmdaeq	r0, {r0, r5, r7, r8, r9, sl, fp, ip, sp, lr}
 80168d8:	08007f8d 	stmdaeq	r0, {r0, r2, r3, r7, r8, r9, sl, fp, ip, sp, lr}
 80168dc:	08007f79 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}
 80168e0:	08007f65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, sl, fp, ip, sp, lr}

080168e4 <vtable for ArtNetTriggerHandler>:
	...
 80168ec:	08007ee1 	stmdaeq	r0, {r0, r5, r6, r7, r9, sl, fp, ip, sp, lr}
 80168f0:	08007f4d 	stmdaeq	r0, {r0, r2, r3, r6, r8, r9, sl, fp, ip, sp, lr}
 80168f4:	080081f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, pc}

080168f8 <vtable for PixelDmxStartStop>:
	...
 8016900:	08007ee3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r9, sl, fp, ip, sp, lr}
 8016904:	08007f59 	stmdaeq	r0, {r0, r3, r4, r6, r8, r9, sl, fp, ip, sp, lr}
 8016908:	08007ee5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r9, sl, fp, ip, sp, lr}
 801690c:	08007ef5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, sl, fp, ip, sp, lr}

08016910 <vtable for Reboot>:
	...
 8016918:	08007f05 	stmdaeq	r0, {r0, r2, r8, r9, sl, fp, ip, sp, lr}
 801691c:	08007f29 	stmdaeq	r0, {r0, r3, r5, r8, r9, sl, fp, ip, sp, lr}
 8016920:	08007f09 	stmdaeq	r0, {r0, r3, r8, r9, sl, fp, ip, sp, lr}

08016924 <CSWTCH.69>:
 8016924:	444e4f4f 	strbmi	r4, [lr], #-3919	; 0xfffff0b1
 8016928:	 	eorcc	r3, lr, r6, asr #2

08016929 <SOFTWARE_VERSION>:
 8016929:	00302e31 	eorseq	r2, r0, r1, lsr lr
 801692d:	6e552020 	cdpvs	0, 5, cr2, cr5, cr0, {1}
 8016931:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 8016935:	20736573 	rsbscs	r6, r3, r3, ror r5
 8016939:	20657261 	rsbcs	r7, r5, r1, ror #4
 801693d:	7070616d 	rsbsvc	r6, r0, sp, ror #2
 8016941:	20646570 	rsbcs	r6, r4, r0, ror r5
 8016945:	000a312b 	andeq	r3, sl, fp, lsr #2
 8016949:	 	andeq	r0, r0, r0

0801694c <vtable for ArtNet4Node>:
	...
 8016954:	08008db9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, sl, fp, pc}
 8016958:	08008ea7 	stmdaeq	r0, {r0, r1, r2, r5, r7, r9, sl, fp, pc}
 801695c:	08008d5d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, sl, fp, pc}
 8016960:	08008dd9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, sl, fp, pc}
 8016964:	08008eb9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r9, sl, fp, pc}
 8016968:	08008e9f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r7, r9, sl, fp, pc}

0801696c <ArtNetMsgConst::START>:
 801696c:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
 8016970:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 8016974:	74724120 	ldrbtvc	r4, [r2], #-288	; 0xfffffee0
 8016978:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
	...

0801697d <ArtNetMsgConst::PARAMS>:
 801697d:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 8016981:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 8016985:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8016989:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801698d:	0074654e 	rsbseq	r6, r4, lr, asr #10

08016991 <ArtNetMsgConst::STARTED>:
 8016991:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016995:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8016999:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801699d:	00646574 	rsbeq	r6, r4, r4, ror r5
 80169a1:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 80169a5:	37303146 	ldrcc	r3, [r0, -r6, asr #2]!
 80169a9:	73250052 			; <UNDEFINED> instruction: 0x73250052
 80169ad:	20732520 	rsbscs	r2, r3, r0, lsr #10
 80169b1:	25206425 	strcs	r6, [r0, #-1061]!	; 0xfffffbdb
 80169b5:	74680073 	strbtvc	r0, [r8], #-115	; 0xffffff8d
 80169b9:	2f3a7074 	svccs	0x003a7074
 80169bd:	3364672f 	cmncc	r4, #12320768	; 0xbc0000
 80169c1:	6d642d32 	stclvs	13, cr2, [r4, #-200]!	; 0xffffff38
 80169c5:	726f2e78 	rsbvc	r2, pc, #120, 28	; 0x780
 80169c9:	6d450067 	stclvs	0, cr0, [r5, #-412]	; 0xfffffe64
 80169cd:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
 80169d1:	 	tstmi	r0, r5, ror #8

080169d4 <artnet::NODE_ID>:
 80169d4:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80169d8:	0074654e 	rsbseq	r6, r4, lr, asr #10

080169dc <defaults::SHORT_NAME>:
 80169dc:	20567641 	subscs	r7, r6, r1, asr #12
 80169e0:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80169e4:	2074654e 	rsbscs	r6, r4, lr, asr #10
 80169e8:	65646f4e 	strbvs	r6, [r4, #-3918]!	; 0xfffff0b2
	...

080169ed <artnet::NODE_ID>:
 80169ed:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80169f1:	0074654e 	rsbseq	r6, r4, lr, asr #10
 80169f5:	78343025 	ldmdavc	r4!, {r0, r2, r5, ip, sp}
 80169f9:	30255b20 	eorcc	r5, r5, r0, lsr #22
 80169fd:	205d6434 	subscs	r6, sp, r4, lsr r4
 8016a01:	41207325 			; <UNDEFINED> instruction: 0x41207325
 8016a05:	 	tstmi	r0, r6, ror r6

08016a08 <artnet::NODE_ID>:
 8016a08:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016a0c:	0074654e 	rsbseq	r6, r4, lr, asr #10
 8016a10:	52206f4e 	eorpl	r6, r0, #312	; 0x138
 8016a14:	72204d44 	eorvc	r4, r0, #68, 26	; 0x1100
 8016a18:	6f707365 	svcvs	0x00707365
 8016a1c:	0a65736e 	beq	99737dc <__exidx_end+0x195ac1c>
 8016a20:	50544800 	subspl	r4, r4, r0, lsl #16
 8016a24:	50544c00 	subspl	r4, r4, r0, lsl #24
 8016a28:	74724100 	ldrbtvc	r4, [r2], #-256	; 0xffffff00
 8016a2c:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
 8016a30:	43417300 	movtmi	r7, #4864	; 0x1300
 8016a34:	6f4e004e 	svcvs	0x004e004e
 8016a38:	25206564 	strcs	r6, [r0, #-1380]!	; 0xfffffa9c
 8016a3c:	255b2064 	ldrbcs	r2, [fp, #-100]	; 0xffffff9c
 8016a40:	000a5d75 	andeq	r5, sl, r5, ror sp
 8016a44:	72694620 	rsbvc	r4, r9, #32, 12	; 0x2000000
 8016a48:	7261776d 	rsbvc	r7, r1, #28573696	; 0x1b40000
 8016a4c:	20202065 	eorcs	r2, r0, r5, rrx
 8016a50:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8016a54:	0a64252e 	beq	991ff14 <__exidx_end+0x1907354>
 8016a58:	68532000 	ldmdavs	r3, {sp}^
 8016a5c:	2074726f 	rsbscs	r7, r4, pc, ror #4
 8016a60:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 8016a64:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8016a68:	20000a73 	andcs	r0, r0, r3, ror sl
 8016a6c:	676e6f4c 	strbvs	r6, [lr, -ip, asr #30]!
 8016a70:	6d616e20 	stclvs	14, cr6, [r1, #-128]!	; 0xffffff80
 8016a74:	3a202065 	bcc	881ec10 <__exidx_end+0x806050>
 8016a78:	0a732520 	beq	9cdff00 <__exidx_end+0x1cc7340>
 8016a7c:	754f2000 	strbvc	r2, [pc, #-0]	; 8016a84 <artnet::NODE_ID+0x7c>
 8016a80:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
 8016a84:	2020000a 	eorcs	r0, r0, sl
 8016a88:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
 8016a8c:	64322520 	ldrtvs	r2, [r2], #-1312	; 0xfffffae0
 8016a90:	3a642520 	bcc	991ff18 <__exidx_end+0x1907358>
 8016a94:	322d255b 	eorcc	r2, sp, #381681664	; 0x16c00000
 8016a98:	2d253a64 	vstmdbcs	r5!, {s6-s105}
 8016a9c:	253a6432 	ldrcs	r6, [sl, #-1074]!	; 0xfffffbce
 8016aa0:	5d64322d 	sfmpl	f3, 2, [r4, #-180]!	; 0xffffff4c
 8016aa4:	7534253a 	ldrvc	r2, [r4, #-1338]!	; 0xfffffac6
 8016aa8:	73255b20 			; <UNDEFINED> instruction: 0x73255b20
 8016aac:	7b20005d 	blvc	8816c28 <__exidx_end+0x7fe068>
 8016ab0:	0a7d7325 	beq	9f7374c <__exidx_end+0x1f5ab8c>
 8016ab4:	6e492000 	cdpvs	0, 4, cr2, cr9, cr0, {0}
 8016ab8:	0a747570 	beq	9d34080 <__exidx_end+0x1d1b4c0>
 8016abc:	50202000 	eorpl	r2, r0, r0
 8016ac0:	2074726f 	rsbscs	r7, r4, pc, ror #4
 8016ac4:	20643225 	rsbcs	r3, r4, r5, lsr #4
 8016ac8:	5b3a6425 	blpl	8eafb64 <__exidx_end+0xe96fa4>
 8016acc:	64322d25 	ldrtvs	r2, [r2], #-3365	; 0xfffff2db
 8016ad0:	322d253a 	eorcc	r2, sp, #243269632	; 0xe800000
 8016ad4:	2d253a64 	vstmdbcs	r5!, {s6-s105}
 8016ad8:	3a5d6432 	bcc	976fba8 <__exidx_end+0x1756fe8>
 8016adc:	20753425 	rsbscs	r3, r5, r5, lsr #8
 8016ae0:	25203e2d 	strcs	r3, [r0, #-3629]!	; 0xfffff1d3
 8016ae4:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016ae8:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8016aec:	000a6425 	andeq	r6, sl, r5, lsr #8
 8016af0:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8016af4:	2c64253a 	cfstr64cs	mvdx2, [r4], #-232	; 0xffffff18
 8016af8:	73252300 			; <UNDEFINED> instruction: 0x73252300
 8016afc:	0a64253d 	beq	991fff8 <__exidx_end+0x1907438>
 8016b00:	73252200 			; <UNDEFINED> instruction: 0x73252200
 8016b04:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8016b08:	002c2273 	eoreq	r2, ip, r3, ror r2
 8016b0c:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
 8016b10:	000a7325 	andeq	r7, sl, r5, lsr #6
 8016b14:	6e636173 	mcrvs	1, 3, r6, cr3, cr3, {3}
 8016b18:	706e6900 	rsbvc	r6, lr, r0, lsl #18
 8016b1c:	6f007475 	svcvs	0x00007475
 8016b20:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 8016b24:	74680074 	strbtvc	r0, [r8], #-116	; 0xffffff8c
 8016b28:	746c0070 	strbtvc	r0, [ip], #-112	; 0xffffff90
 8016b2c:	72610070 	rsbvc	r0, r1, #112	; 0x70
 8016b30:	74656e74 	strbtvc	r6, [r5], #-3700	; 0xfffff18c
 8016b34:	6c754d00 	ldclvs	13, cr4, [r5], #-0
 8016b38:	70206974 	eorvc	r6, r0, r4, ror r9
 8016b3c:	2074726f 	rsbscs	r7, r4, pc, ror #4
 8016b40:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 8016b44:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 8016b48:	6f697461 	svcvs	0x00697461
 8016b4c:	6f4e006e 	svcvs	0x004e006e
 8016b50:	44006564 	strmi	r6, [r0], #-1380	; 0xfffffa9c
 8016b54:	522f584d 	eorpl	r5, pc, #5046272	; 0x4d0000
 8016b58:	4f204d44 	svcmi	0x00204d44
 8016b5c:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 8016b60:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
 8016b64:	6e492058 	mcrvs	0, 2, r2, cr9, cr8, {2}
 8016b68:	00747570 	rsbseq	r7, r4, r0, ror r5
 8016b6c:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016b70:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8016b74:	 	mcrvs	0, 3, r0, cr5, cr4, {1}

08016b76 <ArtNetParamsConst::ENABLE_RDM>:
 8016b76:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8016b7a:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 8016b7e:	 	stcvs	13, cr6, [r0, #-400]	; 0xfffffe70

08016b81 <ArtNetParamsConst::MAP_UNIVERSE0>:
 8016b81:	5f70616d 	svcpl	0x0070616d
 8016b85:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8016b89:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8016b8d:	 	rsbsvc	r0, r0, #48	; 0x30

08016b8f <ArtNetParamsConst::PROTOCOL_PORT>:
 8016b8f:	746f7270 	strbtvc	r7, [pc], #-624	; 8016b97 <ArtNetParamsConst::PROTOCOL_PORT+0x8>
 8016b93:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 80169dc <defaults::SHORT_NAME>
 8016b97:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016b9b:	00615f74 	rsbeq	r5, r1, r4, ror pc
 8016b9f:	746f7270 	strbtvc	r7, [pc], #-624	; 8016ba7 <ArtNetParamsConst::PROTOCOL_PORT+0x18>
 8016ba3:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 80169ec <defaults::SHORT_NAME+0x10>
 8016ba7:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016bab:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8016baf:	746f7270 	strbtvc	r7, [pc], #-624	; 8016bb7 <ArtNetParamsConst::PROTOCOL_PORT+0x28>
 8016bb3:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 80169fc <artnet::NODE_ID+0xf>
 8016bb7:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016bbb:	00635f74 	rsbeq	r5, r3, r4, ror pc
 8016bbf:	746f7270 	strbtvc	r7, [pc], #-624	; 8016bc7 <ArtNetParamsConst::PROTOCOL_PORT+0x38>
 8016bc3:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8016a0c <artnet::NODE_ID+0x4>
 8016bc7:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016bcb:	00645f74 	rsbeq	r5, r4, r4, ror pc

08016bcf <ArtNetParamsConst::NODE_LONG_NAME>:
 8016bcf:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 8016bd3:	6d616e5f 	stclvs	14, cr6, [r1, #-380]!	; 0xfffffe84
 8016bd7:	 	strbvs	r0, [pc, #-101]!	; 8016b7a <ArtNetParamsConst::ENABLE_RDM+0x4>

08016bd9 <ArtNetParamsConst::NODE_OEM_VALUE>:
 8016bd9:	5f6d656f 	svcpl	0x006d656f
 8016bdd:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 8016be1:	 	ldmdavs	r3!, {r0, r2, r5, r6}^

08016be3 <ArtNetParamsConst::NODE_SHORT_NAME>:
 8016be3:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 8016be7:	616e5f74 	smcvs	58868	; 0xe5f4
 8016beb:	 	strvs	r6, [r0], #-1389	; 0xfffffa93

08016bee <ArtNetParamsConst::DESTINATION_IP_PORT>:
 8016bee:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 8016bf2:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 8016bf6:	5f6e6f69 	svcpl	0x006e6f69
 8016bfa:	705f7069 	subsvc	r7, pc, r9, rrx
 8016bfe:	5f74726f 	svcpl	0x0074726f
 8016c02:	00000061 	andeq	r0, r0, r1, rrx
 8016c06:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 8016c0a:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 8016c0e:	5f6e6f69 	svcpl	0x006e6f69
 8016c12:	705f7069 	subsvc	r7, pc, r9, rrx
 8016c16:	5f74726f 	svcpl	0x0074726f
 8016c1a:	00000062 	andeq	r0, r0, r2, rrx
 8016c1e:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 8016c22:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 8016c26:	5f6e6f69 	svcpl	0x006e6f69
 8016c2a:	705f7069 	subsvc	r7, pc, r9, rrx
 8016c2e:	5f74726f 	svcpl	0x0074726f
 8016c32:	00000063 	andeq	r0, r0, r3, rrx
 8016c36:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 8016c3a:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 8016c3e:	5f6e6f69 	svcpl	0x006e6f69
 8016c42:	705f7069 	subsvc	r7, pc, r9, rrx
 8016c46:	5f74726f 	svcpl	0x0074726f
 8016c4a:	00000064 	andeq	r0, r0, r4, rrx

08016c4e <ArtNetParamsConst::DISABLE_MERGE_TIMEOUT>:
 8016c4e:	61736964 	cmnvs	r3, r4, ror #18
 8016c52:	5f656c62 	svcpl	0x00656c62
 8016c56:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 8016c5a:	69745f65 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 8016c5e:	756f656d 	strbvc	r6, [pc, #-1389]!	; 80166f9 <i2s_psc_config+0x9>
 8016c62:	 	strbvs	r0, [lr, #-116]!	; 0xffffff8c

08016c64 <ArtNetParamsConst::NODE_NETWORK_DATA_LOSS_TIMEOUT>:
 8016c64:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 8016c68:	5f6b726f 	svcpl	0x006b726f
 8016c6c:	61746164 	cmnvs	r4, r4, ror #2
 8016c70:	736f6c5f 	cmnvc	pc, #24320	; 0x5f00
 8016c74:	69745f73 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 8016c78:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8016713 <i2s_psc_config+0x23>
 8016c7c:	 	strbvs	r0, [lr, #-116]!	; 0xffffff8c

08016c7e <ArtNetParamsConst::NET>:
 8016c7e:	0074656e 	rsbseq	r6, r4, lr, ror #10

08016c82 <ArtNetParamsConst::SUBNET>:
 8016c82:	6e627573 	mcrvs	5, 3, r7, cr2, cr3, {3}
 8016c86:	 	andvc	r7, r0, r5, ror #8

08016c89 <ArtNetParamsConst::PROTOCOL>:
 8016c89:	746f7270 	strbtvc	r7, [pc], #-624	; 8016c91 <ArtNetParamsConst::PROTOCOL+0x8>
 8016c8d:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8016ad8 <artnet::NODE_ID+0xd0>
	...

08016c92 <ArtNetParamsConst::FILE_NAME>:
 8016c92:	6e747261 	cdpvs	2, 7, cr7, cr4, cr1, {3}
 8016c96:	742e7465 	strtvc	r7, [lr], #-1125	; 0xfffffb9b
 8016c9a:	 			; <UNDEFINED> instruction: 0xff007478

08016c9d <ArtNetConst::OEM_ID>:
 8016c9d:	 	ldrsheq	pc, [r0], #-255	; 0xffffff01	; <UNPREDICTABLE>

08016c9f <ArtNetConst::ESTA_ID>:
 8016c9f:	 	strcc	r0, [r1, #-80]	; 0xffffffb0

08016ca1 <ArtNetConst::VERSION>:
 8016ca1:	33323501 	teqcc	r2, #4194304	; 0x400000
 8016ca5:	35322e39 	ldrcc	r2, [r2, #-3641]!	; 0xfffff1c7
 8016ca9:	2e302e35 	mrccs	14, 1, r2, cr0, cr5, {1}
 8016cad:	2e250030 	mcrcs	0, 1, r0, cr5, cr0, {1}
 8016cb1:	20733834 	rsbscs	r3, r3, r4, lsr r8
 8016cb5:	30007325 	andcc	r7, r0, r5, lsr #6
 8016cb9:	6f4e202e 	svcvs	0x004e202e
 8016cbd:	73616320 	cmnvc	r1, #32, 6	; 0x80000000
 8016cc1:	6d207365 	stcvs	3, cr7, [r0, #-404]!	; 0xfffffe6c
 8016cc5:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
 8016cc9:	202c6465 	eorcs	r6, ip, r5, ror #8
 8016ccd:	73696874 	cmnvc	r9, #116, 16	; 0x740000
 8016cd1:	6f687320 	svcvs	0x00687320
 8016cd5:	6e646c75 	mcrvs	12, 3, r6, cr4, cr5, {3}
 8016cd9:	68207427 	stmdavs	r0!, {r0, r1, r2, r5, sl, ip, sp, lr}
 8016cdd:	65707061 	ldrbvs	r7, [r0, #-97]!	; 0xffffff9f
 8016ce1:	000a216e 	andeq	r2, sl, lr, ror #2
 8016ce5:	64697242 	strbtvs	r7, [r9], #-578	; 0xfffffdbe
 8016ce9:	000a6567 	andeq	r6, sl, r7, ror #10
 8016ced:	72694620 	rsbvc	r4, r9, #32, 12	; 0x2000000
 8016cf1:	7261776d 	rsbvc	r7, r1, #28573696	; 0x1b40000
 8016cf5:	203a2065 	eorscs	r2, sl, r5, rrx
 8016cf9:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016cfd:	20000a64 	andcs	r0, r0, r4, ror #20
 8016d01:	20444943 	subcs	r4, r4, r3, asr #18
 8016d05:	20202020 	eorcs	r2, r0, r0, lsr #32
 8016d09:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8016d0d:	20000a73 	andcs	r0, r0, r3, ror sl
 8016d11:	726f5020 	rsbvc	r5, pc, #32
 8016d15:	32252074 	eorcc	r2, r5, #116	; 0x74
 8016d19:	6e552064 	cdpvs	0, 5, cr2, cr5, cr4, {3}
 8016d1d:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 8016d21:	25206573 	strcs	r6, [r0, #-1395]!	; 0xfffffa8d
 8016d25:	2064332d 	rsbcs	r3, r4, sp, lsr #6
 8016d29:	5d73255b 	cfldr64pl	mvdx2, [r3, #-364]!	; 0xfffffe94
 8016d2d:	2020000a 	eorcs	r0, r0, sl
 8016d31:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
 8016d35:	64322520 	ldrtvs	r2, [r2], #-1312	; 0xfffffae0
 8016d39:	696e5520 	stmdbvs	lr!, {r5, r8, sl, ip, lr}^
 8016d3d:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8016d41:	2d252065 	stccs	0, cr2, [r5, #-404]!	; 0xfffffe6c
 8016d45:	5b206433 	blpl	882fe19 <__exidx_end+0x817259>
 8016d49:	0a5d6425 	beq	976fde5 <__exidx_end+0x1757225>
 8016d4d:	79532000 	ldmdbvc	r3, {sp}^
 8016d51:	7268636e 	rsbvc	r6, r8, #-1207959551	; 0xb8000001
 8016d55:	7a696e6f 	bvc	9a72719 <__exidx_end+0x1a59b59>
 8016d59:	73692065 	cmnvc	r9, #101	; 0x65
 8016d5d:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 8016d61:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8016d65:	 	tstmi	r0, r4, ror #20

08016d68 <E117Const::ACN_PACKET_IDENTIFIER>:
 8016d68:	2d435341 	stclcs	3, cr5, [r3, #-260]	; 0xfffffefc
 8016d6c:	312e3145 			; <UNDEFINED> instruction: 0x312e3145
 8016d70:	00000037 	andeq	r0, r0, r7, lsr r0

08016d74 <E131BridgeConst::VERSION>:
 8016d74:	30251801 	eorcc	r1, r5, r1, lsl #16
 8016d78:	252d7838 	strcs	r7, [sp, #-2104]!	; 0xfffff7c8
 8016d7c:	2d783430 	cfldrdcs	mvd3, [r8, #-192]!	; 0xffffff40
 8016d80:	78343025 	ldmdavc	r4!, {r0, r2, r5, ip, sp}
 8016d84:	3230252d 	eorscc	r2, r0, #188743680	; 0xb400000
 8016d88:	32302578 	eorscc	r2, r0, #120, 10	; 0x1e000000
 8016d8c:	30252d78 	eorcc	r2, r5, r8, ror sp
 8016d90:	30257832 	eorcc	r7, r5, r2, lsr r8
 8016d94:	30257832 	eorcc	r7, r5, r2, lsr r8
 8016d98:	30257832 	eorcc	r7, r5, r2, lsr r8
 8016d9c:	30257832 	eorcc	r7, r5, r2, lsr r8
 8016da0:	30257832 	eorcc	r7, r5, r2, lsr r8
 8016da4:	00007832 	andeq	r7, r0, r2, lsr r8

08016da8 <vtable for WS28xxDmx>:
	...
 8016db0:	0800c3a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, lr, pc}
 8016db4:	0800c3c9 	stmdaeq	r0, {r0, r3, r6, r7, r8, r9, lr, pc}
 8016db8:	0800c401 	stmdaeq	r0, {r0, sl, lr, pc}
 8016dbc:	0800c44b 	stmdaeq	r0, {r0, r1, r3, r6, sl, lr, pc}
 8016dc0:	0800c4b3 	stmdaeq	r0, {r0, r1, r4, r5, r7, sl, lr, pc}
 8016dc4:	0800c3db 	stmdaeq	r0, {r0, r1, r3, r4, r6, r7, r8, r9, lr, pc}
 8016dc8:	0800cd85 	stmdaeq	r0, {r0, r2, r7, r8, sl, fp, lr, pc}
 8016dcc:	0800c419 	stmdaeq	r0, {r0, r3, r4, sl, lr, pc}
 8016dd0:	0800c3a1 	stmdaeq	r0, {r0, r5, r7, r8, r9, lr, pc}
 8016dd4:	0800c3a5 	stmdaeq	r0, {r0, r2, r5, r7, r8, r9, lr, pc}
 8016dd8:	0800c473 	stmdaeq	r0, {r0, r1, r4, r5, r6, sl, lr, pc}
 8016ddc:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8016de0:	2a2e253a 	bcs	8ba02d0 <__exidx_end+0xb87710>
 8016de4:	23002c66 	movwcs	r2, #3174	; 0xc66
 8016de8:	253d7325 	ldrcs	r7, [sp, #-805]!	; 0xfffffcdb
 8016dec:	0a662a2e 	beq	99a16ac <__exidx_end+0x1988aec>
 8016df0:	65764f00 	ldrbvs	r4, [r6, #-3840]!	; 0xfffff100
 8016df4:	69727772 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
 8016df8:	64206574 	strtvs	r6, [r0], #-1396	; 0xfffffa8c
 8016dfc:	73617461 	cmnvc	r1, #1627389952	; 0x61000000
 8016e00:	74656568 	strbtvc	r6, [r5], #-1384	; 0xfffffa98
 8016e04:	65764f00 	ldrbvs	r4, [r6, #-3840]!	; 0xfffff100
 8016e08:	69727772 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
 8016e0c:	74206574 	strtvc	r6, [r0], #-1396	; 0xfffffa8c
 8016e10:	6e696d69 	cdpvs	13, 6, cr6, cr9, cr9, {3}
 8016e14:	75282067 	strvc	r2, [r8, #-103]!	; 0xffffff99
 8016e18:	47002973 	smlsdxmi	r0, r3, r9, r2
 8016e1c:	70756f72 	rsbsvc	r6, r5, r2, ror pc
 8016e20:	00676e69 	rsbeq	r6, r7, r9, ror #28
 8016e24:	636f6c43 	cmnvs	pc, #17152	; 0x4300
 8016e28:	6162206b 	cmnvs	r2, fp, rrx
 8016e2c:	20646573 	rsbcs	r6, r4, r3, ror r5
 8016e30:	70696863 	rsbvc	r6, r9, r3, ror #16
 8016e34:	50410073 	subpl	r0, r1, r3, ror r0
 8016e38:	32303141 	eorscc	r3, r0, #1073741840	; 0x40000010
 8016e3c:	394b532f 	stmdbcc	fp, {r0, r1, r2, r3, r5, r8, r9, ip, lr}^
 8016e40:	00323238 	eorseq	r3, r2, r8, lsr r2
 8016e44:	74736554 	ldrbtvc	r6, [r3], #-1364	; 0xfffffaac
 8016e48:	74617020 	strbtvc	r7, [r1], #-32	; 0xffffffe0
 8016e4c:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
 8016e50:	78695000 	stmdavc	r9!, {ip, lr}^
 8016e54:	44206c65 	strtmi	r6, [r0], #-3173	; 0xfffff39b
 8016e58:	7020584d 	eorvc	r5, r0, sp, asr #16
 8016e5c:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 8016e60:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 8016e64:	20000a73 	andcs	r0, r0, r3, ror sl
 8016e68:	756f7247 	strbvc	r7, [pc, #-583]!	; 8016c29 <ArtNetParamsConst::DESTINATION_IP_PORT+0x3b>
 8016e6c:	676e6970 			; <UNDEFINED> instruction: 0x676e6970
 8016e70:	756f6320 	strbvc	r6, [pc, #-800]!	; 8016b58 <artnet::NODE_ID+0x150>
 8016e74:	3a20746e 	bcc	8834034 <__exidx_end+0x81b474>
 8016e78:	20642520 	rsbcs	r2, r4, r0, lsr #10
 8016e7c:	6f72475b 	svcvs	0x0072475b
 8016e80:	20737075 	rsbscs	r7, r3, r5, ror r0
 8016e84:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8016e88:	55000a5d 	strpl	r0, [r0, #-2653]	; 0xfffff5a3
 8016e8c:	6f6e6b6e 	svcvs	0x006e6b6e
 8016e90:	 	mcrmi	14, 0, r6, cr0, cr7, {3}

08016e93 <s_patternName>:
 8016e93:	656e6f4e 	strbvs	r6, [lr, #-3918]!	; 0xfffff0b2
	...
 8016e9f:	61520000 	cmpvs	r2, r0
 8016ea3:	6f626e69 	svcvs	0x00626e69
 8016ea7:	79632077 	stmdbvc	r3!, {r0, r1, r2, r4, r5, r6, sp}^
 8016eab:	00656c63 	rsbeq	r6, r5, r3, ror #24
 8016eaf:	61656854 	cmnvs	r5, r4, asr r8
 8016eb3:	20726574 	rsbscs	r6, r2, r4, ror r5
 8016eb7:	73616863 	cmnvc	r1, #6488064	; 0x630000
 8016ebb:	6f430065 	svcvs	0x00430065
 8016ebf:	72756f6c 	rsbsvc	r6, r5, #108, 30	; 0x1b0
 8016ec3:	70697720 	rsbvc	r7, r9, r0, lsr #14
 8016ec7:	00000065 	andeq	r0, r0, r5, rrx
 8016ecb:	6e616353 	mcrvs	3, 3, r6, cr1, cr3, {2}
 8016ecf:	0072656e 	rsbseq	r6, r2, lr, ror #10
 8016ed3:	00000000 	andeq	r0, r0, r0
 8016ed7:	61460000 	mrsvs	r0, (UNDEF: 70)
 8016edb:	00006564 	andeq	r6, r0, r4, ror #10
	...
 8016ee7:	65646e55 	strbvs	r6, [r4, #-3669]!	; 0xfffff1ab
 8016eeb:	656e6966 	strbvs	r6, [lr, #-2406]!	; 0xfffff69a
 8016eef:	 	ldrbmi	r0, [r2, -r4, rrx]

08016ef1 <PixelType::MAPS>:
 8016ef1:	00424752 	subeq	r4, r2, r2, asr r7
 8016ef5:	00474252 	subeq	r4, r7, r2, asr r2
 8016ef9:	00425247 	subeq	r5, r2, r7, asr #4
 8016efd:	00524247 	subseq	r4, r2, r7, asr #4
 8016f01:	00475242 	subeq	r5, r7, r2, asr #4
 8016f05:	00524742 	subseq	r4, r2, r2, asr #14

08016f09 <PixelType::TYPES>:
 8016f09:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8016f0d:	00003130 	andeq	r3, r0, r0, lsr r1
 8016f11:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8016f15:	00003131 	andeq	r3, r0, r1, lsr r1
 8016f19:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8016f1d:	00003231 	andeq	r3, r0, r1, lsr r2
 8016f21:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8016f25:	00423231 	subeq	r3, r2, r1, lsr r2
 8016f29:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8016f2d:	00003331 	andeq	r3, r0, r1, lsr r3
 8016f31:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8016f35:	00003531 	andeq	r3, r0, r1, lsr r5
 8016f39:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 8016f3d:	00003231 	andeq	r3, r0, r1, lsr r2
 8016f41:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 8016f45:	00573231 	subseq	r3, r7, r1, lsr r2
 8016f49:	31534355 	cmpcc	r3, r5, asr r3
 8016f4d:	00333039 	eorseq	r3, r3, r9, lsr r0
 8016f51:	32534355 	subscc	r4, r3, #1409286145	; 0x54000001
 8016f55:	00333039 	eorseq	r3, r3, r9, lsr r0
 8016f59:	38385343 	ldmdacc	r8!, {r0, r1, r6, r8, r9, ip, lr}
 8016f5d:	00003231 	andeq	r3, r0, r1, lsr r2
 8016f61:	31415041 	cmpcc	r1, r1, asr #32
 8016f65:	00003230 	andeq	r3, r0, r0, lsr r2
 8016f69:	38394b53 	ldmdacc	r9!, {r0, r1, r4, r6, r8, r9, fp, lr}
 8016f6d:	00003232 	andeq	r3, r0, r2, lsr r2
 8016f71:	31383950 	teqcc	r8, r0, asr r9
 8016f75:	00000033 	andeq	r0, r0, r3, lsr r0
 8016f79:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 8016f7d:	6170206c 	cmnvs	r0, ip, rrx
 8016f81:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
 8016f85:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
 8016f89:	5420000a 	strtpl	r0, [r0], #-10
 8016f8d:	20657079 	rsbcs	r7, r5, r9, ror r0
 8016f91:	3a202020 	bcc	881f019 <__exidx_end+0x806459>
 8016f95:	20732520 	rsbscs	r2, r3, r0, lsr #10
 8016f99:	5d64255b 	cfstr64pl	mvdx2, [r4, #-364]!	; 0xfffffe94
 8016f9d:	4320000a 			; <UNDEFINED> instruction: 0x4320000a
 8016fa1:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 8016fa5:	3a202020 	bcc	881f02d <__exidx_end+0x80646d>
 8016fa9:	0a642520 	beq	9920431 <__exidx_end+0x1907871>
 8016fad:	614d2000 	mrsvs	r2, (UNDEF: 77)
 8016fb1:	6e697070 	mcrvs	0, 3, r7, cr9, cr0, {3}
 8016fb5:	203a2067 	eorscs	r2, sl, r7, rrx
 8016fb9:	5b207325 	blpl	8833c55 <__exidx_end+0x81b095>
 8016fbd:	0a5d6425 	beq	9770059 <__exidx_end+0x1757499>
 8016fc1:	30542000 	subscc	r2, r4, r0
 8016fc5:	20202048 	eorcs	r2, r0, r8, asr #32
 8016fc9:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8016fcd:	66322e25 	ldrtvs	r2, [r2], -r5, lsr #28
 8016fd1:	78305b20 	ldmdavc	r0!, {r5, r8, r9, fp, ip, lr}
 8016fd5:	0a5d5825 	beq	976d071 <__exidx_end+0x17544b1>
 8016fd9:	31542000 	cmpcc	r4, r0
 8016fdd:	20202048 	eorcs	r2, r0, r8, asr #32
 8016fe1:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8016fe5:	66322e25 	ldrtvs	r2, [r2], -r5, lsr #28
 8016fe9:	78305b20 	ldmdavc	r0!, {r5, r8, r9, fp, ip, lr}
 8016fed:	0a5d5825 	beq	976d089 <__exidx_end+0x17544c9>
 8016ff1:	2e642500 	cdpcs	5, 6, cr2, cr4, cr0, {0}
 8016ff5:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016ff9:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016ffd:	2c73252c 	cfldr64cs	mvdx2, [r3], #-176	; 0xffffff50
 8017001:	252c7325 	strcs	r7, [ip, #-805]!	; 0xfffffcdb
 8017005:	73252c64 			; <UNDEFINED> instruction: 0x73252c64
 8017009:	6425000a 	strtvs	r0, [r5], #-10
 801700d:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8017011:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017015:	73252c64 			; <UNDEFINED> instruction: 0x73252c64
 8017019:	2c73252c 	cfldr64cs	mvdx2, [r3], #-176	; 0xffffff50
 801701d:	000a6425 	andeq	r6, sl, r5, lsr #8
 8017021:	4f006e4f 	svcmi	0x00006e4f
 8017025:	64006666 	strvs	r6, [r0], #-1638	; 0xfffff99a
 8017029:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 801702d:	253a7961 	ldrcs	r7, [sl, #-2401]!	; 0xfffff69f
 8017031:	76000a73 			; <UNDEFINED> instruction: 0x76000a73
 8017035:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8017039:	253a6e6f 	ldrcs	r6, [sl, #-3695]!	; 0xfffff191
 801703d:	70750073 	rsbsvc	r0, r5, r3, ror r0
 8017041:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 8017045:	7525203a 	strvc	r2, [r5, #-58]!	; 0xffffffc6
 8017049:	45000a73 	strmi	r0, [r0, #-2675]	; 0xfffff58d
 801704d:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
 8017051:	65673f23 	strbvs	r3, [r7, #-3875]!	; 0xfffff0dd
 8017055:	64000a74 	strvs	r0, [r0], #-2676	; 0xfffff58c
 8017059:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 801705d:	00237961 	eoreq	r7, r3, r1, ror #18
 8017061:	4f525245 	svcmi	0x00525245
 8017065:	0a3f2352 	beq	8fdfdb5 <__exidx_end+0xfc71f5>
 8017069:	52524500 	subspl	r4, r2, #0, 10
 801706d:	2123524f 			; <UNDEFINED> instruction: 0x2123524f
 8017071:	6572000a 	ldrbvs	r0, [r2, #-10]!
 8017075:	746f6f62 	strbtvc	r6, [pc], #-3938	; 801707d <PixelType::TYPES+0x174>
 8017079:	6c002323 	stcvs	3, cr2, [r0], {35}	; 0x23
 801707d:	23747369 	cmncs	r4, #-1543503871	; 0xa4000001
 8017081:	73696c00 	cmnvc	r9, #0, 24
 8017085:	002a2374 	eoreq	r2, sl, r4, ror r3
 8017089:	69747075 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, ip, sp, lr}^
 801708d:	0023656d 	eoreq	r6, r3, sp, ror #10
 8017091:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8017095:	236e6f69 	cmncs	lr, #420	; 0x1a4
 8017099:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
 801709d:	61660023 	cmnvs	r6, r3, lsr #32
 80170a1:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 80170a5:	00232379 	eoreq	r2, r3, r9, ror r3

080170a9 <s_Node>:
 80170a9:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80170ad:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 80170b9:	41730000 	cmnmi	r3, r0
 80170bd:	45204e43 	strmi	r4, [r0, #-3651]!	; 0xfffff1bd
 80170c1:	31332e31 	teqcc	r3, r1, lsr lr
	...
 80170cd:	2043534f 	subcs	r5, r3, pc, asr #6
 80170d1:	76726553 			; <UNDEFINED> instruction: 0x76726553
 80170d5:	00007265 	andeq	r7, r0, r5, ror #4
 80170d9:	00000000 	andeq	r0, r0, r0
 80170dd:	544c0000 	strbpl	r0, [ip], #-0
 80170e1:	00000043 	andeq	r0, r0, r3, asr #32
	...
 80170f1:	2043534f 	subcs	r5, r3, pc, asr #6
 80170f5:	65696c43 	strbvs	r6, [r9, #-3139]!	; 0xfffff3bd
 80170f9:	0000746e 	andeq	r7, r0, lr, ror #8
 80170fd:	00000000 	andeq	r0, r0, r0
 8017101:	44520000 	ldrbmi	r0, [r2], #-0
 8017105:	74654e4d 	strbtvc	r4, [r5], #-3661	; 0xfffff1b3
 8017109:	524c4c20 	subpl	r4, ip, #32, 24	; 0x2000
 801710d:	6e4f2050 	mcrvs	0, 2, r2, cr15, cr0, {2}
 8017111:	0000796c 	andeq	r7, r0, ip, ror #18
 8017115:	776f6853 			; <UNDEFINED> instruction: 0x776f6853
 8017119:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
	...
 8017125:	494d0000 	stmdbmi	sp, {}^	; <UNPREDICTABLE>
 8017129:	00004944 	andeq	r4, r0, r4, asr #18
	...
 8017139:	00504444 	subseq	r4, r0, r4, asr #8
	...

0801714b <s_Output>:
 801714b:	00584d44 	subseq	r4, r8, r4, asr #26
	...
 8017157:	004d4452 	subeq	r4, sp, r2, asr r4
	...
 8017163:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
 8017167:	00726f74 	rsbseq	r6, r2, r4, ror pc
 801716b:	00000000 	andeq	r0, r0, r0
 801716f:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 8017173:	0000006c 	andeq	r0, r0, ip, rrx
 8017177:	00000000 	andeq	r0, r0, r0
 801717b:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
 801717f:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 8017183:	00000000 	andeq	r0, r0, r0
 8017187:	0043534f 	subeq	r5, r3, pc, asr #6
	...
 8017193:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 8017197:	00006769 	andeq	r6, r0, r9, ror #14
 801719b:	00000000 	andeq	r0, r0, r0
 801719f:	70657453 	rsbvc	r7, r5, r3, asr r4
 80171a3:	00726570 	rsbseq	r6, r2, r0, ror r5
 80171a7:	00000000 	andeq	r0, r0, r0
 80171ab:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
 80171af:	00007265 	andeq	r7, r0, r5, ror #4
 80171b3:	00000000 	andeq	r0, r0, r0
 80171b7:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80171bb:	0074654e 	rsbseq	r6, r4, lr, asr #10
 80171bf:	00000000 	andeq	r0, r0, r0
 80171c3:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
 80171c7:	00006c61 	andeq	r6, r0, r1, ror #24
 80171cb:	00000000 	andeq	r0, r0, r0
 80171cf:	20424752 	subcs	r4, r2, r2, asr r7
 80171d3:	656e6150 	strbvs	r6, [lr, #-336]!	; 0xfffffeb0
 80171d7:	0000006c 	andeq	r0, r0, ip, rrx
	...

080171dc <RemoteConfig::s_GET>:
 80171dc:	0800ee4d 	stmdaeq	r0, {r0, r2, r3, r6, r9, sl, fp, sp, lr, pc}
 80171e0:	00000000 	andeq	r0, r0, r0
 80171e4:	08017073 	stmdaeq	r1, {r0, r1, r4, r5, r6, ip, sp, lr}
 80171e8:	00000008 	andeq	r0, r0, r8
 80171ec:	0800e419 	stmdaeq	r0, {r0, r3, r4, sl, sp, lr, pc}
 80171f0:	00000000 	andeq	r0, r0, r0
 80171f4:	0801707c 	stmdaeq	r1, {r2, r3, r4, r5, r6, ip, sp, lr}
 80171f8:	00000005 	andeq	r0, r0, r5
 80171fc:	0800e419 	stmdaeq	r0, {r0, r3, r4, sl, sp, lr, pc}
 8017200:	00000000 	andeq	r0, r0, r0
 8017204:	08017082 	stmdaeq	r1, {r1, r7, ip, sp, lr}
 8017208:	00000006 	andeq	r0, r0, r6
 801720c:	0800e58d 	stmdaeq	r0, {r0, r2, r3, r7, r8, sl, sp, lr, pc}
 8017210:	00000000 	andeq	r0, r0, r0
 8017214:	08017089 	stmdaeq	r1, {r0, r3, r7, ip, sp, lr}
 8017218:	00000007 	andeq	r0, r0, r7
 801721c:	0800e54d 	stmdaeq	r0, {r0, r2, r3, r6, r8, sl, sp, lr, pc}
 8017220:	00000000 	andeq	r0, r0, r0
 8017224:	08017091 	stmdaeq	r1, {r0, r4, r7, ip, sp, lr}
 8017228:	00000008 	andeq	r0, r0, r8
 801722c:	0800e4f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, sl, sp, lr, pc}
 8017230:	00000000 	andeq	r0, r0, r0
 8017234:	08017058 	stmdaeq	r1, {r3, r4, r6, ip, sp, lr}
 8017238:	00000008 	andeq	r0, r0, r8
 801723c:	0800e7e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, sl, sp, lr, pc}
 8017240:	00000000 	andeq	r0, r0, r0
 8017244:	0801709a 	stmdaeq	r1, {r1, r3, r4, r7, ip, sp, lr}
 8017248:	00010004 	andeq	r0, r1, r4
 801724c:	0800eb3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, r9, fp, sp, lr, pc}
 8017250:	00000000 	andeq	r0, r0, r0
 8017254:	0801709f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, ip, sp, lr}
 8017258:	00000009 	andeq	r0, r0, r9
 801725c:	6f626552 	svcvs	0x00626552
 8017260:	6e69746f 	cdpvs	4, 6, cr7, cr9, cr15, {3}
 8017264:	2e2e2067 	cdpcs	0, 2, cr2, cr14, cr7, {3}
 8017268:	52000a2e 	andpl	r0, r0, #188416	; 0x2e000
 801726c:	6f6f6265 	svcvs	0x006f6265
 8017270:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 8017274:	2e2e2e20 	cdpcs	14, 2, cr2, cr14, cr0, {1}
 8017278:	6f637200 	svcvs	0x00637200
 801727c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 8017280:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8017284:	74656e00 	strbtvc	r6, [r5], #-3584	; 0xfffff200
 8017288:	6b726f77 	blvs	9cb306c <__exidx_end+0x1c9a4ac>
 801728c:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8017290:	73696400 	cmnvc	r9, #0, 8
 8017294:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8017298:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 801729c:	74726100 	ldrbtvc	r6, [r2], #-256	; 0xffffff00
 80172a0:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 80172a4:	00747874 	rsbseq	r7, r4, r4, ror r8
 80172a8:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 80172ac:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 80172b0:	00747874 	rsbseq	r7, r4, r4, ror r8

080172b4 <RemoteConfig::s_TXT>:
 80172b4:	0800e7e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, r9, sl, sp, lr, pc}
 80172b8:	00000000 	andeq	r0, r0, r0
 80172bc:	0800ea6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, fp, sp, lr, pc}
 80172c0:	00000000 	andeq	r0, r0, r0
 80172c4:	08017279 	stmdaeq	r1, {r0, r3, r4, r5, r6, r9, ip, sp, lr}
 80172c8:	0000000b 	andeq	r0, r0, fp
 80172cc:	0000000c 	andeq	r0, r0, ip
 80172d0:	0800e815 	stmdaeq	r0, {r0, r2, r4, fp, sp, lr, pc}
 80172d4:	00000000 	andeq	r0, r0, r0
 80172d8:	0800ea9d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r9, fp, sp, lr, pc}
 80172dc:	00000000 	andeq	r0, r0, r0
 80172e0:	08017285 	stmdaeq	r1, {r0, r2, r7, r9, ip, sp, lr}
 80172e4:	0000000b 	andeq	r0, r0, fp
 80172e8:	00000000 	andeq	r0, r0, r0
 80172ec:	0800e899 	stmdaeq	r0, {r0, r3, r4, r7, fp, sp, lr, pc}
 80172f0:	00000000 	andeq	r0, r0, r0
 80172f4:	0800eb15 	stmdaeq	r0, {r0, r2, r4, r8, r9, fp, sp, lr, pc}
 80172f8:	00000000 	andeq	r0, r0, r0
 80172fc:	08017291 	stmdaeq	r1, {r0, r4, r7, r9, ip, sp, lr}
 8017300:	0000000b 	andeq	r0, r0, fp
 8017304:	0000000f 	andeq	r0, r0, pc
 8017308:	0800e841 	stmdaeq	r0, {r0, r6, fp, sp, lr, pc}
 801730c:	00000000 	andeq	r0, r0, r0
 8017310:	0800eac5 	stmdaeq	r0, {r0, r2, r6, r7, r9, fp, sp, lr, pc}
 8017314:	00000000 	andeq	r0, r0, r0
 8017318:	0801729d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r9, ip, sp, lr}
 801731c:	0000000a 	andeq	r0, r0, sl
 8017320:	00000001 	andeq	r0, r0, r1
 8017324:	0800e86d 	stmdaeq	r0, {r0, r2, r3, r5, r6, fp, sp, lr, pc}
 8017328:	00000000 	andeq	r0, r0, r0
 801732c:	0800eaed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r9, fp, sp, lr, pc}
 8017330:	00000000 	andeq	r0, r0, r0
 8017334:	080172a8 	stmdaeq	r1, {r3, r5, r7, r9, ip, sp, lr}
 8017338:	0000000b 	andeq	r0, r0, fp
 801733c:	00000003 	andeq	r0, r0, r3
 8017340:	00544547 	subseq	r4, r4, r7, asr #10
 8017344:	54534f50 	ldrbpl	r4, [r3], #-3920	; 0xfffff0b0
 8017348:	54544800 	ldrbpl	r4, [r4], #-2048	; 0xfffff800
 801734c:	0a200050 	beq	8817494 <__exidx_end+0x7fe8d4>
 8017350:	312e3100 			; <UNDEFINED> instruction: 0x312e3100
 8017354:	43003a00 	movwmi	r3, #2560	; 0xa00
 8017358:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 801735c:	542d746e 	strtpl	r7, [sp], #-1134	; 0xfffffb92
 8017360:	00657079 	rsbeq	r7, r5, r9, ror r0
 8017364:	61003b20 	tstvs	r0, r0, lsr #22
 8017368:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
 801736c:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
 8017370:	6a2f6e6f 	bvs	8bf2d34 <__exidx_end+0xbda174>
 8017374:	006e6f73 	rsbeq	r6, lr, r3, ror pc
 8017378:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 801737c:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 8017380:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 8017384:	2f006874 	svccs	0x00006874
 8017388:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 801738c:	74682e78 	strbtvc	r2, [r8], #-3704	; 0xfffff188
 8017390:	2f006c6d 	svccs	0x00006c6d
 8017394:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 8017398:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 801739c:	2f007373 	svccs	0x00007373
 80173a0:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 80173a4:	736a2e78 	cmnvc	sl, #120, 28	; 0x780
 80173a8:	736a2f00 	cmnvc	sl, #0, 30
 80173ac:	002f6e6f 	eoreq	r6, pc, pc, ror #28
 80173b0:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 80173b4:	72657600 	rsbvc	r7, r5, #0, 12
 80173b8:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 80173bc:	74707500 	ldrbtvc	r7, [r0], #-1280	; 0xfffffb00
 80173c0:	00656d69 	rsbeq	r6, r5, r9, ror #26
 80173c4:	70736964 	rsbsvc	r6, r3, r4, ror #18
 80173c8:	0079616c 	rsbseq	r6, r9, ip, ror #2
 80173cc:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 80173d0:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 80173d4:	6a2f0079 	bvs	8bd75c0 <__exidx_end+0xbbea00>
 80173d8:	2f6e6f73 	svccs	0x006e6f73
 80173dc:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 80173e0:	72006e6f 	andvc	r6, r0, #1776	; 0x6f0
 80173e4:	6f6f6265 	svcvs	0x006f6265
 80173e8:	64690074 	strbtvs	r0, [r9], #-116	; 0xffffff8c
 80173ec:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 80173f0:	3c007966 			; <UNDEFINED> instruction: 0x3c007966
 80173f4:	434f4421 	movtmi	r4, #62497	; 0xf421
 80173f8:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 80173fc:	6d746820 	ldclvs	8, cr6, [r4, #-128]!	; 0xffffff80
 8017400:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 8017404:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8017408:	683c0a3e 	ldmdavs	ip!, {r1, r2, r3, r4, r5, r9, fp}
 801740c:	3e646165 	powccsz	f6, f4, f5
 8017410:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 8017414:	533e656c 	teqpl	lr, #108, 10	; 0x1b000000
 8017418:	696d6275 	stmdbvs	sp!, {r0, r2, r4, r5, r6, r9, sp, lr}^
 801741c:	742f3c74 	strtvc	r3, [pc], #-3188	; 8017424 <RemoteConfig::s_TXT+0x170>
 8017420:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
 8017424:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8017428:	3e646165 	powccsz	f6, f4, f5
 801742c:	6f623c0a 	svcvs	0x00623c0a
 8017430:	3c3e7964 			; <UNDEFINED> instruction: 0x3c3e7964
 8017434:	4f3e3168 	svcmi	0x003e3168
 8017438:	682f3c4b 	stmdavs	pc!, {r0, r1, r3, r6, sl, fp, ip, sp}	; <UNPREDICTABLE>
 801743c:	2f3c3e31 	svccs	0x003c3e31
 8017440:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 8017444:	2f3c0a3e 	svccs	0x003c0a3e
 8017448:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 801744c:	52000a3e 	andpl	r0, r0, #253952	; 0x3e000
 8017450:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
 8017454:	45207473 	strmi	r7, [r0, #-1139]!	; 0xfffffb8d
 8017458:	7469746e 	strbtvc	r7, [r9], #-1134	; 0xfffffb92
 801745c:	6f542079 	svcvs	0x00542079
 8017460:	614c206f 	cmpvs	ip, pc, rrx
 8017464:	00656772 	rsbeq	r6, r5, r2, ror r7
 8017468:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 801746c:	6e756f46 	cdpvs	15, 7, cr6, cr5, cr6, {2}
 8017470:	65520064 	ldrbvs	r0, [r2, #-100]	; 0xffffff9c
 8017474:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
 8017478:	52552d74 	subspl	r2, r5, #116, 26	; 0x1d00
 801747c:	6f542049 	svcvs	0x00542049
 8017480:	6f4c206f 	svcvs	0x004c206f
 8017484:	5600676e 	strpl	r6, [r0], -lr, ror #14
 8017488:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801748c:	4e206e6f 	cdpmi	14, 2, cr6, cr0, cr15, {3}
 8017490:	5320746f 			; <UNDEFINED> instruction: 0x5320746f
 8017494:	6f707075 	svcvs	0x00707075
 8017498:	64657472 	strbtvs	r7, [r5], #-1138	; 0xfffffb8e
 801749c:	74654d00 	strbtvc	r4, [r5], #-3328	; 0xfffff300
 80174a0:	20646f68 	rsbcs	r6, r4, r8, ror #30
 80174a4:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 80174a8:	6c706d49 	ldclvs	13, cr6, [r0], #-292	; 0xfffffedc
 80174ac:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 80174b0:	00646574 	rsbeq	r6, r4, r4, ror r5
 80174b4:	20646142 	rsbcs	r6, r4, r2, asr #2
 80174b8:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
 80174bc:	00747365 	rsbseq	r7, r4, r5, ror #6
 80174c0:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
 80174c4:	206e776f 	rsbcs	r7, lr, pc, ror #14
 80174c8:	6f727245 	svcvs	0x00727245
 80174cc:	6e490072 	mcrvs	0, 2, r0, cr9, cr2, {3}
 80174d0:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
 80174d4:	53206c61 			; <UNDEFINED> instruction: 0x53206c61
 80174d8:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
 80174dc:	72452072 	subvc	r2, r5, #114	; 0x72
 80174e0:	00726f72 	rsbseq	r6, r2, r2, ror pc
 80174e4:	3c004b4f 			; <UNDEFINED> instruction: 0x3c004b4f
 80174e8:	434f4421 	movtmi	r4, #62497	; 0xf421
 80174ec:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 80174f0:	6d746820 	ldclvs	8, cr6, [r4, #-128]!	; 0xffffff80
 80174f4:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 80174f8:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 80174fc:	683c0a3e 	ldmdavs	ip!, {r1, r2, r3, r4, r5, r9, fp}
 8017500:	3e646165 	powccsz	f6, f4, f5
 8017504:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 8017508:	253e656c 	ldrcs	r6, [lr, #-1388]!	; 0xfffffa94
 801750c:	73252075 			; <UNDEFINED> instruction: 0x73252075
 8017510:	69742f3c 	ldmdbvs	r4!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 8017514:	3e656c74 	mcrcc	12, 3, r6, cr5, cr4, {3}
 8017518:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 801751c:	0a3e6461 	beq	8fb06a8 <__exidx_end+0xf97ae8>
 8017520:	646f623c 	strbtvs	r6, [pc], #-572	; 8017528 <RemoteConfig::s_TXT+0x274>
 8017524:	683c3e79 	ldmdavs	ip!, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 8017528:	73253e31 			; <UNDEFINED> instruction: 0x73253e31
 801752c:	31682f3c 	cmncc	r8, ip, lsr pc
 8017530:	622f3c3e 	eorvs	r3, pc, #15872	; 0x3e00
 8017534:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 8017538:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 801753c:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 8017540:	5448000a 	strbpl	r0, [r8], #-10
 8017544:	312f5054 	qsubcc	r5, r4, pc	; <UNPREDICTABLE>
 8017548:	2520312e 	strcs	r3, [r0, #-302]!	; 0xfffffed2
 801754c:	73252075 			; <UNDEFINED> instruction: 0x73252075
 8017550:	65530a0d 	ldrbvs	r0, [r3, #-2573]	; 0xfffff5f3
 8017554:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
 8017558:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 801755c:	6f430a0d 	svcvs	0x00430a0d
 8017560:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 8017564:	79542d74 	ldmdbvc	r4, {r2, r4, r5, r6, r8, sl, fp, sp}^
 8017568:	203a6570 	eorscs	r6, sl, r0, ror r5
 801756c:	0a0d7325 	beq	8374208 <__exidx_end+0x35b648>
 8017570:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 8017574:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 8017578:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 801757c:	203a6874 	eorscs	r6, sl, r4, ror r8
 8017580:	0a0d7525 	beq	8374a1c <__exidx_end+0x35be5c>
 8017584:	6e6e6f43 	cdpvs	15, 6, cr6, cr14, cr3, {2}
 8017588:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 801758c:	203a6e6f 	eorscs	r6, sl, pc, ror #28
 8017590:	736f6c63 	cmnvc	pc, #25344	; 0x6300
 8017594:	0d0a0d65 	stceq	13, cr0, [sl, #-404]	; 0xfffffe6c
 8017598:	 	ldrbvs	r0, [r4, #-10]!

0801759a <contentType>:
 801759a:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 801759e:	6d74682f 	ldclvs	8, cr6, [r4, #-188]!	; 0xffffff44
 80175a2:	0000006c 	andeq	r0, r0, ip, rrx
	...
 80175ba:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 80175be:	7373632f 	cmnvc	r3, #-1140850688	; 0xbc000000
	...
 80175da:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 80175de:	76616a2f 	strbtvc	r6, [r1], -pc, lsr #20
 80175e2:	72637361 	rsbvc	r7, r3, #-2080374783	; 0x84000001
 80175e6:	00747069 	rsbseq	r7, r4, r9, rrx
	...
 80175fa:	6c707061 	ldclvs	0, cr7, [r0], #-388	; 0xfffffe7c
 80175fe:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
 8017602:	2f6e6f69 	svccs	0x006e6f69
 8017606:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
	...

0801761a <RemoteConfigConst::PARAMS_DISABLE>:
 801761a:	61736964 	cmnvs	r3, r4, ror #18
 801761e:	00656c62 	rsbeq	r6, r5, r2, ror #24

08017622 <RemoteConfigConst::PARAMS_FILE_NAME>:
 8017622:	6e6f6372 	mcrvs	3, 3, r6, cr15, cr2, {3}
 8017626:	2e676966 	vnmulcs.f16	s13, s14, s13	; <UNPREDICTABLE>
 801762a:	00747874 	rsbseq	r7, r4, r4, ror r8

0801762e <RemoteConfigConst::PARAMS_DISPLAY_NAME>:
 801762e:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8017632:	5f79616c 	svcpl	0x0079616c
 8017636:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

0801763b <RemoteConfigConst::PARAMS_DISABLE_WRITE>:
 801763b:	61736964 	cmnvs	r3, r4, ror #18
 801763f:	5f656c62 	svcpl	0x00656c62
 8017643:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 8017647:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

08017649 <RemoteConfigConst::PARAMS_ENABLE_REBOOT>:
 8017649:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 801764d:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 8017651:	6f6f6265 	svcvs	0x006f6265
 8017655:	 	mcrvs	0, 3, r0, cr5, cr4, {3}

08017657 <RemoteConfigConst::PARAMS_ENABLE_UPTIME>:
 8017657:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 801765b:	755f656c 	ldrbvc	r6, [pc, #-1388]	; 80170f7 <s_Node+0x4e>
 801765f:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 8017663:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

08017665 <RemoteConfigConst::PARAMS_ENABLE_FACTORY>:
 8017665:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8017669:	665f656c 	ldrbvs	r6, [pc], -ip, ror #10
 801766d:	6f746361 	svcvs	0x00746361
 8017671:	7b007972 	blvc	8035c41 <__exidx_end+0x1d081>
 8017675:	73696c22 	cmnvc	r9, #8704	; 0x2200
 8017679:	7b3a2274 	blvc	8ea0051 <__exidx_end+0xe87491>
 801767d:	22706922 	rsbscs	r6, r0, #557056	; 0x88000
 8017681:	6425223a 	strtvs	r2, [r5], #-570	; 0xfffffdc6
 8017685:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8017689:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801768d:	222c2264 	eorcs	r2, ip, #100, 4	; 0x40000006
 8017691:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 8017695:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8017699:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 801769d:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
 80176a1:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 80176a5:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 80176a9:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 80176ad:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 80176b1:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 80176b5:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 80176b9:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 80176bd:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 80176c1:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 80176c5:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 80176c9:	253a2274 	ldrcs	r2, [sl, #-628]!	; 0xfffffd8c
 80176cd:	7d7d7d64 	ldclvc	13, cr7, [sp, #-400]!	; 0xfffffe70
 80176d1:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 80176d5:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 80176d9:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 80176dd:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 80176e1:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 80176e5:	616f6222 	cmnvs	pc, r2, lsr #4
 80176e9:	3a226472 	bcc	88b08b9 <__exidx_end+0x897cf9>
 80176ed:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 80176f1:	7562222c 	strbvc	r2, [r2, #-556]!	; 0xfffffdd4
 80176f5:	22646c69 	rsbcs	r6, r4, #26880	; 0x6900
 80176f9:	64227b3a 	strtvs	r7, [r2], #-2874	; 0xfffff4c6
 80176fd:	22657461 	rsbcs	r7, r5, #1627389952	; 0x61000000
 8017701:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 8017705:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 8017709:	6d697422 	cfstrdvs	mvd7, [r9, #-136]!	; 0xffffff78
 801770d:	223a2265 	eorscs	r2, sl, #1342177286	; 0x50000006
 8017711:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 8017715:	007d7d22 	rsbseq	r7, sp, r2, lsr #26
 8017719:	7075227b 	rsbsvc	r2, r5, fp, ror r2
 801771d:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 8017721:	75253a22 	strvc	r3, [r5, #-2594]!	; 0xfffff5de
 8017725:	7b000a7d 	blvc	801a121 <__exidx_end+0x1561>
 8017729:	73696422 	cmnvc	r9, #570425344	; 0x22000000
 801772d:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8017731:	64253a22 	strtvs	r3, [r5], #-2594	; 0xfffff5de
 8017735:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 8017739:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 801773d:	7b3a2273 	blvc	8ea0111 <__exidx_end+0xe87551>
 8017741:	74726122 	ldrbtvc	r6, [r2], #-290	; 0xfffffede
 8017745:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 8017749:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 801774d:	7241223a 	subvc	r2, r1, #-1610612733	; 0xa0000003
 8017751:	654e2d74 	strbvs	r2, [lr, #-3444]	; 0xfffff28c
 8017755:	222c2274 	eorcs	r2, ip, #116, 4	; 0x40000007
 8017759:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 801775d:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 8017761:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 8017765:	4d44223a 	sfmmi	f2, 2, [r4, #-232]	; 0xffffff18
 8017769:	69502058 	ldmdbvs	r0, {r3, r4, r6, sp}^
 801776d:	226c6578 	rsbcs	r6, ip, #120, 10	; 0x1e000000
 8017771:	6964222c 	stmdbvs	r4!, {r2, r3, r5, r9, sp}^
 8017775:	616c7073 	smcvs	50947	; 0xc703
 8017779:	78742e79 	ldmdavc	r4!, {r0, r3, r4, r5, r6, r9, sl, fp, sp}^
 801777d:	223a2274 	eorscs	r2, sl, #116, 4	; 0x40000007
 8017781:	70736944 	rsbsvc	r6, r3, r4, asr #18
 8017785:	2079616c 	rsbscs	r6, r9, ip, ror #2
 8017789:	22464455 	subcs	r4, r6, #1426063360	; 0x55000000
 801778d:	656e222c 	strbvs	r2, [lr, #-556]!	; 0xfffffdd4
 8017791:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 8017795:	78742e6b 	ldmdavc	r4!, {r0, r1, r3, r5, r6, r9, sl, fp, sp}^
 8017799:	223a2274 	eorscs	r2, sl, #116, 4	; 0x40000007
 801779d:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 80177a1:	226b726f 	rsbcs	r7, fp, #-268435450	; 0xf0000006
 80177a5:	6372222c 	cmnvs	r2, #44, 4	; 0xc0000002
 80177a9:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 80177ad:	78742e67 	ldmdavc	r4!, {r0, r1, r2, r5, r6, r9, sl, fp, sp}^
 80177b1:	223a2274 	eorscs	r2, sl, #116, 4	; 0x40000007
 80177b5:	6f6d6552 	svcvs	0x006d6552
 80177b9:	63206574 			; <UNDEFINED> instruction: 0x63206574
 80177bd:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 80177c1:	61727567 	cmnvs	r2, r7, ror #10
 80177c5:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 80177c9:	007d7d22 	rsbseq	r7, sp, r2, lsr #26

080177cd <index_html>:
 80177cd:	4f44213c 	svcmi	0x0044213c
 80177d1:	50595443 	subspl	r5, r9, r3, asr #8
 80177d5:	74682045 	strbtvc	r2, [r8], #-69	; 0xffffffbb
 80177d9:	0a3e6c6d 	beq	8fb2995 <__exidx_end+0xf99dd5>
 80177dd:	6d74683c 	ldclvs	8, cr6, [r4, #-240]!	; 0xffffff10
 80177e1:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 80177e5:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
 80177e9:	3c090a3e 			; <UNDEFINED> instruction: 0x3c090a3e
 80177ed:	6b6e696c 	blvs	9bb1da5 <__exidx_end+0x1b991e5>
 80177f1:	6c657220 	sfmvs	f7, 2, [r5], #-128	; 0xffffff80
 80177f5:	7473223d 	ldrbtvc	r2, [r3], #-573	; 0xfffffdc3
 80177f9:	73656c79 	cmnvc	r5, #30976	; 0x7900
 80177fd:	74656568 	strbtvc	r6, [r5], #-1384	; 0xfffffa98
 8017801:	72682022 	rsbvc	r2, r8, #34	; 0x22
 8017805:	223d6665 	eorscs	r6, sp, #105906176	; 0x6500000
 8017809:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 801780d:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 8017811:	20227373 	eorcs	r7, r2, r3, ror r3
 8017815:	090a3e2f 	stmdbeq	sl, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}
 8017819:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 801781d:	3c3e656c 	cfldr32cc	mvfx6, [lr], #-432	; 0xfffffe50
 8017821:	7469742f 	strbtvc	r7, [r9], #-1071	; 0xfffffbd1
 8017825:	0a3e656c 	beq	8fb0ddd <__exidx_end+0xf9821d>
 8017829:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 801782d:	0a3e6461 	beq	8fb09b9 <__exidx_end+0xf97df9>
 8017831:	646f623c 	strbtvs	r6, [pc], #-572	; 8017839 <index_html+0x6c>
 8017835:	090a3e79 	stmdbeq	sl, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 8017839:	6165683c 	cmnvs	r5, ip, lsr r8
 801783d:	3e726564 	cdpcc	5, 7, cr6, cr2, cr4, {3}
 8017841:	206c753c 	rsbcs	r7, ip, ip, lsr r5
 8017845:	223d6469 	eorscs	r6, sp, #1761607680	; 0x69000000
 8017849:	694c6469 	stmdbvs	ip, {r0, r3, r5, r6, sl, sp, lr}^
 801784d:	3e227473 	mcrcc	4, 1, r7, cr2, cr3, {3}
 8017851:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 8017855:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8017859:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 801785d:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 8017861:	3c3e703c 	ldccc	0, cr7, [lr], #-240	; 0xffffff10
 8017865:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 8017869:	69207463 	stmdbvs	r0!, {r0, r1, r5, r6, sl, ip, sp, lr}
 801786d:	69223d64 	stmdbvs	r2!, {r2, r5, r6, r8, sl, fp, ip, sp}
 8017871:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 8017875:	6f746365 	svcvs	0x00746365
 8017879:	20227972 	eorcs	r7, r2, r2, ror r9
 801787d:	68636e6f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 8017881:	65676e61 	strbvs	r6, [r7, #-3681]!	; 0xfffff19f
 8017885:	6567223d 	strbvs	r2, [r7, #-573]!	; 0xfffffdc3
 8017889:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 801788d:	68742874 	ldmdavs	r4!, {r2, r4, r5, r6, fp, sp}^
 8017891:	762e7369 	strtvc	r7, [lr], -r9, ror #6
 8017895:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 8017899:	3c3e2229 	lfmcc	f2, 4, [lr], #-164	; 0xffffff5c
 801789d:	6c65732f 	stclvs	3, cr7, [r5], #-188	; 0xffffff44
 80178a1:	3e746365 	cdpcc	3, 7, cr6, cr4, cr5, {3}
 80178a5:	3e702f3c 	mrccc	15, 3, r2, cr0, cr12, {1}
 80178a9:	743c090a 	ldrtvc	r0, [ip], #-2314	; 0xfffff6f6
 80178ad:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 80178b1:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 80178b5:	54646922 	strbtpl	r6, [r4], #-2338	; 0xfffff6de
 80178b9:	20227478 	eorcs	r7, r2, r8, ror r4
 80178bd:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 80178c1:	273d7265 	ldrcs	r7, [sp, -r5, ror #4]!
 80178c5:	3c3e2731 	ldccc	7, cr2, [lr], #-196	; 0xffffff3c
 80178c9:	6261742f 	rsbvs	r7, r1, #788529152	; 0x2f000000
 80178cd:	0a3e656c 	beq	8fb0e85 <__exidx_end+0xf982c5>
 80178d1:	6f663c09 	svcvs	0x00663c09
 80178d5:	7265746f 	rsbvc	r7, r5, #1862270976	; 0x6f000000
 80178d9:	6c753c3e 	ldclvs	12, cr3, [r5], #-248	; 0xffffff08
 80178dd:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 80178e1:	56646922 	strbtpl	r6, [r4], -r2, lsr #18
 80178e5:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 80178e9:	3e226e6f 	cdpcc	14, 2, cr6, cr2, cr15, {3}
 80178ed:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 80178f1:	662f3c3e 			; <UNDEFINED> instruction: 0x662f3c3e
 80178f5:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 80178f9:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 80178fd:	7263733c 	rsbvc	r7, r3, #60, 6	; 0xf0000000
 8017901:	20747069 	rsbscs	r7, r4, r9, rrx
 8017905:	3d637273 	sfmcc	f7, 2, [r3, #-460]!	; 0xfffffe34
 8017909:	646e6922 	strbtvs	r6, [lr], #-2338	; 0xfffff6de
 801790d:	6a2e7865 	bvs	8bb5aa9 <__exidx_end+0xb9cee9>
 8017911:	3c3e2273 	lfmcc	f2, 4, [lr], #-460	; 0xfffffe34
 8017915:	7263732f 	rsbvc	r7, r3, #-1140850688	; 0xbc000000
 8017919:	3e747069 	cdpcc	0, 7, cr7, cr4, cr9, {3}
 801791d:	622f3c0a 	eorvs	r3, pc, #2560	; 0xa00
 8017921:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 8017925:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8017929:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 801792d:	 	svcvs	0x0062000a

0801792f <styles_css>:
 801792f:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 8017933:	200a7b20 	andcs	r7, sl, r0, lsr #22
 8017937:	63616220 	cmnvs	r1, #32, 4
 801793b:	6f72676b 	svcvs	0x0072676b
 801793f:	2d646e75 	stclcs	14, cr6, [r4, #-468]!	; 0xfffffe2c
 8017943:	6f6c6f63 	svcvs	0x006c6f63
 8017947:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 801794b:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 801794f:	30322c30 	eorscc	r2, r2, r0, lsr ip
 8017953:	2930322c 	ldmdbcs	r0!, {r2, r3, r5, r9, ip, sp}
 8017957:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 801795b:	6f6c6f63 	svcvs	0x006c6f63
 801795f:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 8017963:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 8017967:	202c3535 	eorcs	r3, ip, r5, lsr r5
 801796b:	2c353532 	cfldr32cs	mvfx3, [r5], #-200	; 0xffffff38
 801796f:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
 8017973:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 8017977:	6c750a0a 			; <UNDEFINED> instruction: 0x6c750a0a
 801797b:	200a7b20 	andcs	r7, sl, r0, lsr #22
 801797f:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 8017983:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8017987:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 801798b:	0a3b7865 	beq	8ef5b27 <__exidx_end+0xedcf67>
 801798f:	6c0a0a7d 			; <UNDEFINED> instruction: 0x6c0a0a7d
 8017993:	0a7b2069 	beq	9edfb3f <__exidx_end+0x1ec6f7f>
 8017997:	696c2020 	stmdbvs	ip!, {r5, sp}^
 801799b:	732d7473 			; <UNDEFINED> instruction: 0x732d7473
 801799f:	656c7974 	strbvs	r7, [ip, #-2420]!	; 0xfffff68c
 80179a3:	6f6e203a 	svcvs	0x006e203a
 80179a7:	0a3b656e 	beq	8ef0f67 <__exidx_end+0xed83a7>
 80179ab:	616d2020 	cmnvs	sp, r0, lsr #32
 80179af:	6e696772 	mcrvs	7, 3, r6, cr9, cr2, {3}
 80179b3:	7031203a 	eorsvc	r2, r1, sl, lsr r0
 80179b7:	70352078 	eorsvc	r2, r5, r8, ror r0
 80179bb:	7d0a3b78 	vstrvc	d3, [sl, #-480]	; 0xfffffe20
 80179bf:	65680a0a 	strbvs	r0, [r8, #-2570]!	; 0xfffff5f6
 80179c3:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 80179c7:	200a7b20 	andcs	r7, sl, r0, lsr #22
 80179cb:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 80179cf:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 80179d3:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 80179d7:	0a3b7865 	beq	8ef5b73 <__exidx_end+0xedcfb3>
 80179db:	6f622020 	svcvs	0x00622020
 80179df:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 80179e3:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 80179e7:	3a737569 	bcc	9cf4f93 <__exidx_end+0x1cdc3d3>
 80179eb:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 80179ef:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 80179f3:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 80179f7:	203a7265 	eorscs	r7, sl, r5, ror #4
 80179fb:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 80179ff:	72672064 	rsbvc	r2, r7, #100	; 0x64
 8017a03:	31207965 			; <UNDEFINED> instruction: 0x31207965
 8017a07:	0a3b7870 	beq	8ef5bcf <__exidx_end+0xedd00f>
 8017a0b:	660a0a7d 			; <UNDEFINED> instruction: 0x660a0a7d
 8017a0f:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 8017a13:	0a7b2072 	beq	9edfbe3 <__exidx_end+0x1ec7023>
 8017a17:	69642020 	stmdbvs	r4!, {r5, sp}^
 8017a1b:	616c7073 	smcvs	50947	; 0xc703
 8017a1f:	66203a79 			; <UNDEFINED> instruction: 0x66203a79
 8017a23:	3b78656c 	blcc	9e30fdb <__exidx_end+0x1e1841b>
 8017a27:	6a20200a 	bvs	881fa57 <__exidx_end+0x806e97>
 8017a2b:	69747375 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
 8017a2f:	632d7966 			; <UNDEFINED> instruction: 0x632d7966
 8017a33:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 8017a37:	203a746e 	eorscs	r7, sl, lr, ror #8
 8017a3b:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
 8017a3f:	0a3b7265 	beq	8ef43db <__exidx_end+0xedb81b>
 8017a43:	6f622020 	svcvs	0x00622020
 8017a47:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 8017a4b:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 8017a4f:	3a737569 	bcc	9cf4ffb <__exidx_end+0x1cdc43b>
 8017a53:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 8017a57:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 8017a5b:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 8017a5f:	203a7265 	eorscs	r7, sl, r5, ror #4
 8017a63:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8017a67:	72672064 	rsbvc	r2, r7, #100	; 0x64
 8017a6b:	31207965 			; <UNDEFINED> instruction: 0x31207965
 8017a6f:	0a3b7870 	beq	8ef5c37 <__exidx_end+0xedd077>
 8017a73:	00000a7d 	andeq	r0, r0, sp, ror sl
	...

08017a78 <HttpContent>:
 8017a78:	08017394 	stmdaeq	r1, {r2, r4, r7, r8, r9, ip, sp, lr}
 8017a7c:	0801792f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r8, fp, ip, sp, lr}
 8017a80:	080173a0 	stmdaeq	r1, {r5, r7, r8, r9, ip, sp, lr}
 8017a84:	08017a90 	stmdaeq	r1, {r4, r7, r9, fp, ip, sp, lr}
 8017a88:	08017388 	stmdaeq	r1, {r3, r7, r8, r9, ip, sp, lr}
 8017a8c:	080177cd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r8, r9, sl, ip, sp, lr}

08017a90 <index_js>:
 8017a90:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 8017a94:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 8017a98:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8017a9c:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 8017aa0:	534a7465 	movtpl	r7, #42085	; 0xa465
 8017aa4:	6a284e4f 	bvs	8a2b3e8 <__exidx_end+0xa12828>
 8017aa8:	296e6f73 	stmdbcs	lr!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8017aac:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 8017ab0:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 8017ab4:	6c727520 	cfldr64vs	mvdx7, [r2], #-128	; 0xffffff80
 8017ab8:	6a2f273d 	bvs	8be17b4 <__exidx_end+0xbc8bf4>
 8017abc:	2f6e6f73 	svccs	0x006e6f73
 8017ac0:	202b2027 	eorcs	r2, fp, r7, lsr #32
 8017ac4:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 8017ac8:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 8017acc:	20797274 	rsbscs	r7, r9, r4, ror r2
 8017ad0:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 8017ad4:	656c0909 	strbvs	r0, [ip, #-2313]!	; 0xfffff6f7
 8017ad8:	65722074 	ldrbvs	r2, [r2, #-116]!	; 0xffffff8c
 8017adc:	77613d73 			; <UNDEFINED> instruction: 0x77613d73
 8017ae0:	20746961 	rsbscs	r6, r4, r1, ror #18
 8017ae4:	63746566 	cmnvs	r4, #427819008	; 0x19800000
 8017ae8:	72752868 	rsbsvc	r2, r5, #104, 16	; 0x680000
 8017aec:	0a3b296c 	beq	8ee20a4 <__exidx_end+0xec94e4>
 8017af0:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 8017af4:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
 8017af8:	61206e72 			; <UNDEFINED> instruction: 0x61206e72
 8017afc:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 8017b00:	73657220 	cmnvc	r5, #32, 4
 8017b04:	6f736a2e 	svcvs	0x00736a2e
 8017b08:	3b29286e 	blcc	8a61cc8 <__exidx_end+0xa49108>
 8017b0c:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 8017b10:	74616320 	strbtvc	r6, [r1], #-800	; 0xfffffce0
 8017b14:	28206863 	stmdacs	r0!, {r0, r1, r5, r6, fp, sp, lr}
 8017b18:	6f727265 	svcvs	0x00727265
 8017b1c:	7b202972 	blvc	88220ec <__exidx_end+0x80952c>
 8017b20:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8017b24:	6e6f6309 	cdpvs	3, 6, cr6, cr15, cr9, {0}
 8017b28:	656c6f73 	strbvs	r6, [ip, #-3955]!	; 0xfffff08d
 8017b2c:	676f6c2e 	strbvs	r6, [pc, -lr, lsr #24]!
 8017b30:	72726528 	rsbsvc	r6, r2, #40, 10	; 0xa000000
 8017b34:	3b29726f 	blcc	8a744f8 <__exidx_end+0xa5b938>
 8017b38:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 8017b3c:	0a0a7d0a 	beq	82b6f6c <__exidx_end+0x29e3ac>
 8017b40:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 8017b44:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 8017b48:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8017b4c:	72206e6f 	eorvc	r6, r0, #1776	; 0x6f0
 8017b50:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 8017b54:	73694c72 	cmnvc	r9, #29184	; 0x7200
 8017b58:	20292874 	eorcs	r2, r9, r4, ror r8
 8017b5c:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 8017b60:	2074656c 	rsbscs	r6, r4, ip, ror #10
 8017b64:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8017b68:	6177613d 	cmnvs	r7, sp, lsr r1
 8017b6c:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 8017b70:	534a7465 	movtpl	r7, #42085	; 0xa465
 8017b74:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8017b78:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8017b7c:	0a3b2927 	beq	8ee2020 <__exidx_end+0xec9460>
 8017b80:	6f640909 	svcvs	0x00640909
 8017b84:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 8017b88:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 8017b8c:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 8017b90:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 8017b94:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 8017b98:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 8017b9c:	73694c64 	cmnvc	r9, #100, 24	; 0x6400
 8017ba0:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 8017ba4:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 8017ba8:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 8017bac:	3c223d4c 	stccc	13, cr3, [r2], #-304	; 0xfffffed0
 8017bb0:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 8017bb4:	73696c2b 	cmnvc	r9, #11008	; 0x2b00
 8017bb8:	696c2e74 	stmdbvs	ip!, {r2, r4, r5, r6, r9, sl, fp, sp}^
 8017bbc:	6e2e7473 	mcrvs	4, 1, r7, cr14, cr3, {3}
 8017bc0:	2b656d61 	blcs	997314c <__exidx_end+0x195a58c>
 8017bc4:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8017b44 <index_js+0xb4>
 8017bc8:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 8017bcc:	2b223e69 	blcs	88a7578 <__exidx_end+0x88e9b8>
 8017bd0:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8017bd4:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 8017bd8:	6f6e2e74 	svcvs	0x006e2e74
 8017bdc:	742e6564 	strtvc	r6, [lr], #-1380	; 0xfffffa9c
 8017be0:	2b657079 	blcs	9973dcc <__exidx_end+0x195b20c>
 8017be4:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8017b64 <index_js+0xd4>
 8017be8:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 8017bec:	2b223e69 	blcs	88a7598 <__exidx_end+0x88e9d8>
 8017bf0:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8017bf4:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 8017bf8:	6f6e2e74 	svcvs	0x006e2e74
 8017bfc:	702e6564 	eorvc	r6, lr, r4, ror #10
 8017c00:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
 8017c04:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8017c08:	2f3c222b 	svccs	0x003c222b
 8017c0c:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 8017c10:	0a7d0a3b 	beq	9f5a504 <__exidx_end+0x1f41944>
 8017c14:	7973610a 	ldmdbvc	r3!, {r1, r3, r8, sp, lr}^
 8017c18:	6620636e 	strtvs	r6, [r0], -lr, ror #6
 8017c1c:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 8017c20:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 8017c24:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 8017c28:	69447265 	stmdbvs	r4, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8017c2c:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8017c30:	2879726f 	ldmdacs	r9!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 8017c34:	0a7b2029 	beq	9edfce0 <__exidx_end+0x1ec7120>
 8017c38:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 8017c3c:	64207465 	strtvs	r7, [r0], #-1125	; 0xfffffb9b
 8017c40:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 8017c44:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8017c48:	6177613d 	cmnvs	r7, sp, lsr r1
 8017c4c:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 8017c50:	534a7465 	movtpl	r7, #42085	; 0xa465
 8017c54:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8017c58:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8017c5c:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8017c60:	3b292779 	blcc	8a61a4c <__exidx_end+0xa48e8c>
 8017c64:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8017c68:	2074656c 	rsbscs	r6, r4, ip, ror #10
 8017c6c:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8017c70:	0a22223d 	beq	88a056c <__exidx_end+0x8879ac>
 8017c74:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 8017c78:	66207465 	strtvs	r7, [r0], -r5, ror #8
 8017c7c:	6e656c69 	cdpvs	12, 6, cr6, cr5, cr9, {3}
 8017c80:	73656d61 	cmnvc	r5, #6208	; 0x1840
 8017c84:	6a624f3d 	bvs	98ab980 <__exidx_end+0x1892dc0>
 8017c88:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 8017c8c:	7379656b 	cmnvc	r9, #448790528	; 0x1ac00000
 8017c90:	72696428 	rsbvc	r6, r9, #40, 8	; 0x28000000
 8017c94:	6f746365 	svcvs	0x00746365
 8017c98:	225b7972 	subscs	r7, fp, #1867776	; 0x1c8000
 8017c9c:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8017ca0:	295d2273 	ldmdbcs	sp, {r0, r1, r4, r5, r6, r9, sp}^
 8017ca4:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 8017ca8:	6c696609 	stclvs	6, cr6, [r9], #-36	; 0xffffffdc
 8017cac:	6d616e65 	stclvs	14, cr6, [r1, #-404]!	; 0xfffffe6c
 8017cb0:	662e7365 	strtvs	r7, [lr], -r5, ror #6
 8017cb4:	6145726f 	cmpvs	r5, pc, ror #4
 8017cb8:	66286863 	strtvs	r6, [r8], -r3, ror #16
 8017cbc:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 8017cc0:	286e6f69 	stmdacs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 8017cc4:	2979656b 	ldmdbcs	r9!, {r0, r1, r3, r5, r6, r8, sl, sp, lr}^
 8017cc8:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 8017ccc:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 8017cd0:	20726176 	rsbscs	r6, r2, r6, ror r1
 8017cd4:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 8017cd8:	203d2065 	eorscs	r2, sp, r5, rrx
 8017cdc:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8017ce0:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8017ce4:	66225b79 			; <UNDEFINED> instruction: 0x66225b79
 8017ce8:	73656c69 	cmnvc	r5, #26880	; 0x6900
 8017cec:	6b5b5d22 	blvs	96ef17c <__exidx_end+0x16d65bc>
 8017cf0:	3b5d7965 	blcc	977628c <__exidx_end+0x175d6cc>
 8017cf4:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8017cf8:	74680909 	strbtvc	r0, [r8], #-2313	; 0xfffff6f7
 8017cfc:	3d2b6c6d 	stccc	12, cr6, [fp, #-436]!	; 0xfffffe4c
 8017d00:	706f3c22 	rsbvc	r3, pc, r2, lsr #24
 8017d04:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8017d08:	6c617620 	stclvs	6, cr7, [r1], #-128	; 0xffffff80
 8017d0c:	223d6575 	eorscs	r6, sp, #490733568	; 0x1d400000
 8017d10:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 8017d14:	223e222b 	eorscs	r2, lr, #-1342177278	; 0xb0000002
 8017d18:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 8017d1c:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 8017d20:	706f2f3c 	rsbvc	r2, pc, ip, lsr pc	; <UNPREDICTABLE>
 8017d24:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8017d28:	0a3b223e 	beq	8ee0628 <__exidx_end+0xec7a68>
 8017d2c:	7d090909 	vstrvc.16	s0, [r9, #-18]	; 0xffffffee	; <UNPREDICTABLE>
 8017d30:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 8017d34:	6f640909 	svcvs	0x00640909
 8017d38:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 8017d3c:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 8017d40:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 8017d44:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 8017d48:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 8017d4c:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 8017d50:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 8017d54:	6f746365 	svcvs	0x00746365
 8017d58:	29227972 	stmdbcs	r2!, {r1, r4, r5, r6, r8, fp, ip, sp, lr}
 8017d5c:	6e6e692e 	vmulvs.f16	s13, s28, s29	; <UNPREDICTABLE>
 8017d60:	54487265 	strbpl	r7, [r8], #-613	; 0xfffffd9b
 8017d64:	683d4c4d 	ldmdavs	sp!, {r0, r2, r3, r6, sl, fp, lr}
 8017d68:	3b6c6d74 	blcc	9b33340 <__exidx_end+0x1b1a780>
 8017d6c:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8017d70:	5f746567 	svcpl	0x00746567
 8017d74:	28747874 	ldmdacs	r4!, {r2, r4, r5, r6, fp, ip, sp, lr}^
 8017d78:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8017d7c:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 8017d80:	5d305b73 	fldmdbxpl	r0!, {d5-d61}	;@ Deprecated
 8017d84:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 8017d88:	73610a0a 	cmnvc	r1, #40960	; 0xa000
 8017d8c:	20636e79 	rsbcs	r6, r3, r9, ror lr
 8017d90:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 8017d94:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8017d98:	6e657220 	cdpvs	2, 6, cr7, cr5, cr0, {1}
 8017d9c:	56726564 	ldrbtpl	r6, [r2], -r4, ror #10
 8017da0:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8017da4:	29286e6f 	stmdbcs	r8!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
 8017da8:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 8017dac:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 8017db0:	72657620 	rsbvc	r7, r5, #32, 12	; 0x2000000
 8017db4:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 8017db8:	6177613d 	cmnvs	r7, sp, lsr r1
 8017dbc:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 8017dc0:	534a7465 	movtpl	r7, #42085	; 0xa465
 8017dc4:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8017dc8:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8017dcc:	276e6f69 	strbcs	r6, [lr, -r9, ror #30]!
 8017dd0:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 8017dd4:	636f6409 	cmnvs	pc, #150994944	; 0x9000000
 8017dd8:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 8017ddc:	65672e74 	strbvs	r2, [r7, #-3700]!	; 0xfffff18c
 8017de0:	656c4574 	strbvs	r4, [ip, #-1396]!	; 0xfffffa8c
 8017de4:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 8017de8:	64497942 	strbvs	r7, [r9], #-2370	; 0xfffff6be
 8017dec:	64692228 	strbtvs	r2, [r9], #-552	; 0xfffffdd8
 8017df0:	73726556 	cmnvc	r2, #360710144	; 0x15800000
 8017df4:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 8017df8:	6e692e29 	cdpvs	14, 6, cr2, cr9, cr9, {1}
 8017dfc:	4872656e 	ldmdami	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 8017e00:	3d4c4d54 	stclcc	13, cr4, [ip, #-336]	; 0xfffffeb0
 8017e04:	696c3c22 	stmdbvs	ip!, {r1, r5, sl, fp, ip, sp}^
 8017e08:	2b22563e 	blcs	88ad708 <__exidx_end+0x894b48>
 8017e0c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8017e10:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 8017e14:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8017e18:	2b6e6f69 	blcs	9bb3bc4 <__exidx_end+0x1b9b004>
 8017e1c:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8017d9c <index_js+0x30c>
 8017e20:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 8017e24:	2b223e69 	blcs	88a77d0 <__exidx_end+0x88ec10>
 8017e28:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8017e2c:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 8017e30:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 8017e34:	61642e64 	cmnvs	r4, r4, ror #28
 8017e38:	222b6574 	eorcs	r6, fp, #116, 10	; 0x1d000000
 8017e3c:	696c2f3c 	stmdbvs	ip!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 8017e40:	696c3c3e 	stmdbvs	ip!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 8017e44:	762b223e 			; <UNDEFINED> instruction: 0x762b223e
 8017e48:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8017e4c:	622e6e6f 	eorvs	r6, lr, #1776	; 0x6f0
 8017e50:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
 8017e54:	6d69742e 	cfstrdvs	mvd7, [r9, #-184]!	; 0xffffff48
 8017e58:	3c222b65 			; <UNDEFINED> instruction: 0x3c222b65
 8017e5c:	3e696c2f 	cdpcc	12, 6, cr6, cr9, cr15, {1}
 8017e60:	3e696c3c 	mcrcc	12, 3, r6, cr9, cr12, {1}
 8017e64:	65762b22 	ldrbvs	r2, [r6, #-2850]!	; 0xfffff4de
 8017e68:	6f697372 	svcvs	0x00697372
 8017e6c:	6f622e6e 	svcvs	0x00622e6e
 8017e70:	2b647261 	blcs	99347fc <__exidx_end+0x191bc3c>
 8017e74:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8017df4 <index_js+0x364>
 8017e78:	3b223e69 	blcc	88a7824 <__exidx_end+0x88ec64>
 8017e7c:	0a0a7d0a 	beq	82b72ac <__exidx_end+0x29e6ec>
 8017e80:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 8017e84:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 8017e88:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8017e8c:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 8017e90:	745f7465 	ldrbvc	r7, [pc], #-1125	; 8017e98 <index_js+0x408>
 8017e94:	73287478 			; <UNDEFINED> instruction: 0x73287478
 8017e98:	20296c65 	eorcs	r6, r9, r5, ror #24
 8017e9c:	6c090a7b 			; <UNDEFINED> instruction: 0x6c090a7b
 8017ea0:	74207465 	strtvc	r7, [r0], #-1125	; 0xfffffb9b
 8017ea4:	613d7478 	teqvs	sp, r8, ror r4
 8017ea8:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 8017eac:	74656720 	strbtvc	r6, [r5], #-1824	; 0xfffff8e0
 8017eb0:	4e4f534a 	cdpmi	3, 4, cr5, cr15, cr10, {2}
 8017eb4:	6c657328 	stclvs	3, cr7, [r5], #-160	; 0xffffff60
 8017eb8:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 8017ebc:	2074656c 	rsbscs	r6, r4, ip, ror #10
 8017ec0:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8017ec4:	3b22223d 	blcc	88a07c0 <__exidx_end+0x887c00>
 8017ec8:	624f090a 	subvs	r0, pc, #163840	; 0x28000
 8017ecc:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 8017ed0:	79656b2e 	stmdbvc	r5!, {r1, r2, r3, r5, r8, r9, fp, sp, lr}^
 8017ed4:	78742873 	ldmdavc	r4!, {r0, r1, r4, r5, r6, fp, sp}^
 8017ed8:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 8017edc:	2e295d6c 	cdpcs	13, 2, cr5, cr9, cr12, {3}
 8017ee0:	45726f66 	ldrbmi	r6, [r2, #-3942]!	; 0xfffff09a
 8017ee4:	28686361 	stmdacs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 8017ee8:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 8017eec:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8017ef0:	79656b28 	stmdbvc	r5!, {r3, r5, r8, r9, fp, sp, lr}^
 8017ef4:	0a7b2029 	beq	9edffa0 <__exidx_end+0x1ec73e0>
 8017ef8:	61760909 	cmnvs	r6, r9, lsl #18
 8017efc:	61762072 	cmnvs	r6, r2, ror r0
 8017f00:	2065756c 	rsbcs	r7, r5, ip, ror #10
 8017f04:	7874203d 	ldmdavc	r4!, {r0, r2, r3, r4, r5, sp}^
 8017f08:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 8017f0c:	6b5b5d6c 	blvs	96ef4c4 <__exidx_end+0x16d6904>
 8017f10:	3b5d7965 	blcc	97764ac <__exidx_end+0x175d8ec>
 8017f14:	2009090a 	andcs	r0, r9, sl, lsl #18
 8017f18:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8017f1c:	3c223d2b 	stccc	13, cr3, [r2], #-172	; 0xffffff54
 8017f20:	3c3e7274 	lfmcc	f7, 4, [lr], #-464	; 0xfffffe30
 8017f24:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 8017f28:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 8017f2c:	2f3c222b 	svccs	0x003c222b
 8017f30:	3c3e6474 	cfldrscc	mvf6, [lr], #-464	; 0xfffffe30
 8017f34:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 8017f38:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 8017f3c:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 8017f40:	64742f3c 	ldrbtvs	r2, [r4], #-3900	; 0xfffff0c4
 8017f44:	742f3c3e 	strtvc	r3, [pc], #-3134	; 8017f4c <index_js+0x4bc>
 8017f48:	3b223e72 	blcc	88a7918 <__exidx_end+0x88ed58>
 8017f4c:	297d090a 	ldmdbcs	sp!, {r1, r3, r8, fp}^
 8017f50:	64090a3b 	strvs	r0, [r9], #-2619	; 0xfffff5c5
 8017f54:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 8017f58:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 8017f5c:	45746567 	ldrbmi	r6, [r4, #-1383]!	; 0xfffffa99
 8017f60:	656d656c 	strbvs	r6, [sp, #-1388]!	; 0xfffffa94
 8017f64:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 8017f68:	22286449 	eorcs	r6, r8, #1224736768	; 0x49000000
 8017f6c:	78546469 	ldmdavc	r4, {r0, r3, r5, r6, sl, sp, lr}^
 8017f70:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 8017f74:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 8017f78:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 8017f7c:	74683d4c 	strbtvc	r3, [r8], #-3404	; 0xfffff2b4
 8017f80:	0a3b6c6d 	beq	8ef313c <__exidx_end+0xeda57c>
 8017f84:	720a0a7d 	andvc	r0, sl, #512000	; 0x7d000
 8017f88:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 8017f8c:	73694c72 	cmnvc	r9, #29184	; 0x7200
 8017f90:	3b292874 	blcc	8a62168 <__exidx_end+0xa495a8>
 8017f94:	6e65720a 	cdpvs	2, 6, cr7, cr5, cr10, {0}
 8017f98:	44726564 	ldrbtmi	r6, [r2], #-1380	; 0xfffffa9c
 8017f9c:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 8017fa0:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8017fa4:	0a3b2928 	beq	8ee244c <__exidx_end+0xec988c>
 8017fa8:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 8017fac:	65567265 	ldrbvs	r7, [r6, #-613]	; 0xfffffd9b
 8017fb0:	6f697372 	svcvs	0x00697372
 8017fb4:	3b29286e 	blcc	8a62174 <__exidx_end+0xa495b4>
 8017fb8:	0000000a 	andeq	r0, r0, sl

08017fbc <s_aStorSize>:
 8017fbc:	00000060 	andeq	r0, r0, r0, rrx
 8017fc0:	00000090 	muleq	r0, r0, r0
 8017fc4:	00000020 	andeq	r0, r0, r0, lsr #32
 8017fc8:	00000040 	andeq	r0, r0, r0, asr #32
 8017fcc:	00000060 	andeq	r0, r0, r0, rrx
 8017fd0:	00000040 	andeq	r0, r0, r0, asr #32
 8017fd4:	00000020 	andeq	r0, r0, r0, lsr #32
 8017fd8:	00000020 	andeq	r0, r0, r0, lsr #32
 8017fdc:	000001e0 	andeq	r0, r0, r0, ror #3
 8017fe0:	00000040 	andeq	r0, r0, r0, asr #32
 8017fe4:	00000020 	andeq	r0, r0, r0, lsr #32
 8017fe8:	00000060 	andeq	r0, r0, r0, rrx
 8017fec:	00000030 	andeq	r0, r0, r0, lsr r0
 8017ff0:	00000020 	andeq	r0, r0, r0, lsr #32
 8017ff4:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
 8017ff8:	00000030 	andeq	r0, r0, r0, lsr r0
 8017ffc:	00000040 	andeq	r0, r0, r0, asr #32
 8018000:	00000020 	andeq	r0, r0, r0, lsr #32
 8018004:	00000060 	andeq	r0, r0, r0, rrx
 8018008:	00000020 	andeq	r0, r0, r0, lsr #32
 801800c:	00000400 	andeq	r0, r0, r0, lsl #8
 8018010:	00000020 	andeq	r0, r0, r0, lsr #32
 8018014:	00000020 	andeq	r0, r0, r0, lsr #32
 8018018:	00000040 	andeq	r0, r0, r0, asr #32
 801801c:	00000060 	andeq	r0, r0, r0, rrx
 8018020:	00000020 	andeq	r0, r0, r0, lsr #32
 8018024:	00000020 	andeq	r0, r0, r0, lsr #32
 8018028:	00000020 	andeq	r0, r0, r0, lsr #32

0801802c <vtable for StoreArtNet>:
	...
 8018034:	0800fad9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, fp, ip, sp, lr, pc}
 8018038:	0800fca1 	stmdaeq	r0, {r0, r5, r7, sl, fp, ip, sp, lr, pc}
 801803c:	0800fae1 	stmdaeq	r0, {r0, r5, r6, r7, r9, fp, ip, sp, lr, pc}
 8018040:	0800fcb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, sl, fp, ip, sp, lr, pc}
 8018044:	0800fb05 	stmdaeq	r0, {r0, r2, r8, r9, fp, ip, sp, lr, pc}
 8018048:	0800fb35 	stmdaeq	r0, {r0, r2, r4, r5, r8, r9, fp, ip, sp, lr, pc}
 801804c:	0800fb61 	stmdaeq	r0, {r0, r5, r6, r8, r9, fp, ip, sp, lr, pc}
 8018050:	0800fb9d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, r9, fp, ip, sp, lr, pc}
 8018054:	0800fbcd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, r9, fp, ip, sp, lr, pc}
 8018058:	0800fc01 	stmdaeq	r0, {r0, sl, fp, ip, sp, lr, pc}
 801805c:	0800fc51 	stmdaeq	r0, {r0, r4, r6, sl, fp, ip, sp, lr, pc}
 8018060:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 8018064:	00000000 	andeq	r0, r0, r0
 8018068:	0800fadb 	stmdaeq	r0, {r0, r1, r3, r4, r6, r7, r9, fp, ip, sp, lr, pc}
 801806c:	0800fcad 	stmdaeq	r0, {r0, r2, r3, r5, r7, sl, fp, ip, sp, lr, pc}
 8018070:	0800fb2d 	stmdaeq	r0, {r0, r2, r3, r5, r8, r9, fp, ip, sp, lr, pc}
 8018074:	0800fb59 	stmdaeq	r0, {r0, r3, r4, r6, r8, r9, fp, ip, sp, lr, pc}
 8018078:	0800fb95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp, ip, sp, lr, pc}
 801807c:	0800fbc5 	stmdaeq	r0, {r0, r2, r6, r7, r8, r9, fp, ip, sp, lr, pc}
 8018080:	0800fbf9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, r9, fp, ip, sp, lr, pc}
 8018084:	0800fc49 	stmdaeq	r0, {r0, r3, r6, sl, fp, ip, sp, lr, pc}
 8018088:	0800fc99 	stmdaeq	r0, {r0, r3, r4, r7, sl, fp, ip, sp, lr, pc}

0801808c <vtable for StoreDisplayUdf>:
	...
 8018094:	0800fcf1 	stmdaeq	r0, {r0, r4, r5, r6, r7, sl, fp, ip, sp, lr, pc}
 8018098:	0800fd39 	stmdaeq	r0, {r0, r3, r4, r5, r8, sl, fp, ip, sp, lr, pc}
 801809c:	0800fd15 	stmdaeq	r0, {r0, r2, r4, r8, sl, fp, ip, sp, lr, pc}
 80180a0:	0800fcf5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, sl, fp, ip, sp, lr, pc}

080180a4 <vtable for StoreNetwork>:
	...
 80180ac:	0800fd59 	stmdaeq	r0, {r0, r3, r4, r6, r8, sl, fp, ip, sp, lr, pc}
 80180b0:	0800fe6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr, pc}
 80180b4:	0800fd61 	stmdaeq	r0, {r0, r5, r6, r8, sl, fp, ip, sp, lr, pc}
 80180b8:	0800fe81 	stmdaeq	r0, {r0, r7, r9, sl, fp, ip, sp, lr, pc}
 80180bc:	0800fe11 	stmdaeq	r0, {r0, r4, r9, sl, fp, ip, sp, lr, pc}
 80180c0:	0800fde5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, sl, fp, ip, sp, lr, pc}
 80180c4:	0800fdb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, sl, fp, ip, sp, lr, pc}
 80180c8:	0800fe3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r9, sl, fp, ip, sp, lr, pc}
 80180cc:	0800fd85 	stmdaeq	r0, {r0, r2, r7, r8, sl, fp, ip, sp, lr, pc}
 80180d0:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 80180d4:	00000000 	andeq	r0, r0, r0
 80180d8:	0800fd5b 	stmdaeq	r0, {r0, r1, r3, r4, r6, r8, sl, fp, ip, sp, lr, pc}
 80180dc:	0800fe79 	stmdaeq	r0, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp, lr, pc}
 80180e0:	0800fe35 	stmdaeq	r0, {r0, r2, r4, r5, r9, sl, fp, ip, sp, lr, pc}
 80180e4:	0800fe09 	stmdaeq	r0, {r0, r3, r9, sl, fp, ip, sp, lr, pc}
 80180e8:	0800fddd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sl, fp, ip, sp, lr, pc}
 80180ec:	0800fe65 	stmdaeq	r0, {r0, r2, r5, r6, r9, sl, fp, ip, sp, lr, pc}
 80180f0:	0800fdad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, sl, fp, ip, sp, lr, pc}

080180f4 <vtable for StoreRemoteConfig>:
	...
 80180fc:	0800feb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r9, sl, fp, ip, sp, lr, pc}
 8018100:	0800fefd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp, lr, pc}
 8018104:	0800fed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr, pc}
 8018108:	0800feb9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r9, sl, fp, ip, sp, lr, pc}

0801810c <vtable for StoreWS28xxDmx>:
	...
 8018114:	0800ff1d 	stmdaeq	r0, {r0, r2, r3, r4, r8, r9, sl, fp, ip, sp, lr, pc}
 8018118:	0801008d 	stmdaeq	r1, {r0, r2, r3, r7}
 801811c:	0800ff25 	stmdaeq	r0, {r0, r2, r5, r8, r9, sl, fp, ip, sp, lr, pc}
 8018120:	080100a1 	stmdaeq	r1, {r0, r5, r7}
 8018124:	08010059 	stmdaeq	r1, {r0, r3, r4, r6}
 8018128:	08010025 	stmdaeq	r1, {r0, r2, r5}
 801812c:	0800ffed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 8018130:	0800ffb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 8018134:	0800ff7d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr, pc}
 8018138:	0800ff49 	stmdaeq	r0, {r0, r3, r6, r8, r9, sl, fp, ip, sp, lr, pc}
 801813c:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 8018140:	00000000 	andeq	r0, r0, r0
 8018144:	0800ff1f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r8, r9, sl, fp, ip, sp, lr, pc}
 8018148:	08010099 	stmdaeq	r1, {r0, r3, r4, r7}
 801814c:	08010085 	stmdaeq	r1, {r0, r2, r7}
 8018150:	08010051 	stmdaeq	r1, {r0, r4, r6}
 8018154:	0801001d 	stmdaeq	r1, {r0, r2, r3, r4}
 8018158:	0800ffe5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 801815c:	0800ffad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 8018160:	0800ff75 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr, pc}
 8018164:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 8018168:	74654400 	strbtvc	r4, [r5], #-1024	; 0xfffffc00
 801816c:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0xfffffc9b
 8018170:	73252064 			; <UNDEFINED> instruction: 0x73252064
 8018174:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
 8018178:	65732068 	ldrbvs	r2, [r3, #-104]!	; 0xffffff98
 801817c:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8018180:	7a697320 	bvc	9a74e08 <__exidx_end+0x1a5c248>
 8018184:	64252065 	strtvs	r2, [r5], #-101	; 0xffffff9b
 8018188:	746f7420 	strbtvc	r7, [pc], #-1056	; 8018190 <vtable for StoreWS28xxDmx+0x84>
 801818c:	25206c61 	strcs	r6, [r0, #-3169]!	; 0xfffff39f
 8018190:	79622064 	stmdbvc	r2!, {r2, r5, r6, sp}^
 8018194:	0a736574 	beq	9cf176c <__exidx_end+0x1cd8bac>
 8018198:	70637400 	rsbvc	r7, r3, r0, lsl #8
 801819c:	6765625f 			; <UNDEFINED> instruction: 0x6765625f
 80181a0:	203a6e69 	eorscs	r6, sl, r9, ror #28
 80181a4:	206f6f74 	rsbcs	r6, pc, r4, ror pc	; <UNPREDICTABLE>
 80181a8:	796e616d 	stmdbvc	lr!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 80181ac:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 80181b0:	7463656e 	strbtvc	r6, [r3], #-1390	; 0xfffffa92
 80181b4:	736e6f69 	cmnvc	lr, #420	; 0x1a4
 80181b8:	6e696200 	cdpvs	2, 6, cr6, cr9, cr0, {0}
 80181bc:	6e750064 	cdpvs	0, 7, cr0, cr5, cr4, {3}
 80181c0:	646e6962 	strbtvs	r6, [lr], #-2402	; 0xfffff69e
 80181c4:	5241000a 	subpl	r0, r1, #10
 80181c8:	6f6c2050 	svcvs	0x006c2050
 80181cc:	70756b6f 	rsbsvc	r6, r5, pc, ror #22
 80181d0:	69616620 	stmdbvs	r1!, {r5, r9, sl, sp, lr}^
 80181d4:	2064656c 	rsbcs	r6, r4, ip, ror #10
 80181d8:	64203e2d 	strtvs	r3, [r0], #-3629	; 0xfffff1d3
 80181dc:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
 80181e0:	6720746c 	strvs	r7, [r0, -ip, ror #8]!
 80181e4:	77657461 	strbvc	r7, [r5, -r1, ror #8]!
 80181e8:	000a7961 	andeq	r7, sl, r1, ror #18
 80181ec:	20505241 	subscs	r5, r0, r1, asr #4
 80181f0:	6b6f6f6c 	blvs	9bf3fa8 <__exidx_end+0x1bdb3e8>
 80181f4:	66207075 			; <UNDEFINED> instruction: 0x66207075
 80181f8:	656c6961 	strbvs	r6, [ip, #-2401]!	; 0xfffff69f
 80181fc:	 	vmlsmi.f32	s0, s0, s9

080181ff <NetworkConst::MSG_NETWORK_INIT>:
 80181ff:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 8018203:	206b726f 	rsbcs	r7, fp, pc, ror #4
 8018207:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 801820b:	34323200 	ldrtcc	r3, [r2], #-512	; 0xfffffe00
 801820f:	302e302e 	eorcc	r3, lr, lr, lsr #32
 8018213:	3135322e 	teqcc	r5, lr, lsr #4
 8018217:	63745f00 	cmnvs	r4, #0, 30
 801821b:	6f6c2e70 	svcvs	0x006c2e70
 801821f:	006c6163 	rsbeq	r6, ip, r3, ror #2
 8018223:	7265735f 	rsbvc	r7, r5, #2080374785	; 0x7c000001
 8018227:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
 801822b:	645f2e73 	ldrbvs	r2, [pc], #-3699	; 8018233 <NetworkConst::MSG_NETWORK_INIT+0x34>
 801822f:	732d736e 			; <UNDEFINED> instruction: 0x732d736e
 8018233:	755f2e64 	ldrbvc	r2, [pc, #-3684]	; 80173d7 <RemoteConfig::s_TXT+0x123>
 8018237:	6c2e7064 	stcvs	0, cr7, [lr], #-400	; 0xfffffe70
 801823b:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 801823f:	4e446d00 	cdpmi	13, 4, cr6, cr4, cr0, {0}
 8018243:	20000a53 	andcs	r0, r0, r3, asr sl
 8018247:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 801824b:	6e6e7572 	mcrvs	5, 3, r7, cr14, cr2, {3}
 801824f:	0a676e69 	beq	99f3bfb <__exidx_end+0x19db03b>
 8018253:	614e2000 	mrsvs	r2, (UNDEF: 78)
 8018257:	3a20656d 	bcc	8831813 <__exidx_end+0x818c53>
 801825b:	0a732520 	beq	9ce16e3 <__exidx_end+0x1cc8b23>
 801825f:	73252000 			; <UNDEFINED> instruction: 0x73252000
 8018263:	20642520 	rsbcs	r2, r4, r0, lsr #10
 8018267:	000a7325 	andeq	r7, sl, r5, lsr #6
 801826b:	30687465 	rsbcc	r7, r8, r5, ror #8
 801826f:	67696700 	strbvs	r6, [r9, -r0, lsl #14]!
 8018273:	76656461 	strbtvc	r6, [r5], -r1, ror #8
 8018277:	5f656369 	svcpl	0x00656369
 801827b:	74654e00 	strbtvc	r4, [r5], #-3584	; 0xfffff200
 801827f:	6b726f77 	blvs	9cb4063 <__exidx_end+0x1c9b4a3>
 8018283:	4820000a 	stmdami	r0!, {r1, r3}
 8018287:	6e74736f 	cdpvs	3, 7, cr7, cr4, cr15, {3}
 801828b:	20656d61 	rsbcs	r6, r5, r1, ror #26
 801828f:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8018293:	20000a73 	andcs	r0, r0, r3, ror sl
 8018297:	614e6649 	cmpvs	lr, r9, asr #12
 801829b:	2020656d 	eorcs	r6, r0, sp, ror #10
 801829f:	203a2020 	eorscs	r2, sl, r0, lsr #32
 80182a3:	203a6425 	eorscs	r6, sl, r5, lsr #8
 80182a7:	000a7325 	andeq	r7, sl, r5, lsr #6
 80182ab:	656e4920 	strbvs	r4, [lr, #-2336]!	; 0xfffff6e0
 80182af:	20202074 	eorcs	r2, r0, r4, ror r0
 80182b3:	3a202020 	bcc	882033b <__exidx_end+0x80777b>
 80182b7:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 80182bb:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80182bf:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80182c3:	0a64252f 	beq	9921787 <__exidx_end+0x1908bc7>
 80182c7:	654e2000 	strbvs	r2, [lr, #-0]
 80182cb:	73616d74 	cmnvc	r1, #116, 26	; 0x1d00
 80182cf:	2020206b 	eorcs	r2, r0, fp, rrx
 80182d3:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 80182d7:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 80182db:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80182df:	20000a64 	andcs	r0, r0, r4, ror #20
 80182e3:	65746147 	ldrbvs	r6, [r4, #-327]!	; 0xfffffeb9
 80182e7:	20796177 	rsbscs	r6, r9, r7, ror r1
 80182eb:	203a2020 	eorscs	r2, sl, r0, lsr #32
 80182ef:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80182f3:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80182f7:	0a64252e 	beq	99217b7 <__exidx_end+0x1908bf7>
 80182fb:	72422000 	subvc	r2, r2, #0
 80182ff:	6364616f 	cmnvs	r4, #-1073741797	; 0xc000001b
 8018303:	20747361 	rsbscs	r7, r4, r1, ror #6
 8018307:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 801830b:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801830f:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8018313:	20000a64 	andcs	r0, r0, r4, ror #20
 8018317:	2063614d 	rsbcs	r6, r3, sp, asr #2
 801831b:	20202020 	eorcs	r2, r0, r0, lsr #32
 801831f:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8018323:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8018327:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 801832b:	2e253a78 			; <UNDEFINED> instruction: 0x2e253a78
 801832f:	253a7832 	ldrcs	r7, [sl, #-2098]!	; 0xfffff7ce
 8018333:	3a78322e 	bcc	9e24bf3 <__exidx_end+0x1e0c033>
 8018337:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 801833b:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 801833f:	20000a78 	andcs	r0, r0, r8, ror sl
 8018343:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
 8018347:	20202020 	eorcs	r2, r0, r0, lsr #32
 801834b:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801834f:	000a6325 	andeq	r6, sl, r5, lsr #6
 8018353:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
 8018357:	49206369 	stmdbmi	r0!, {r0, r3, r5, r6, r8, r9, sp, lr}
 801835b:	 	rsbvc	r0, r9, r0, asr r0

0801835d <NetworkParamsConst::IP_ADDRESS>:
 801835d:	615f7069 	cmpvs	pc, r9, rrx
 8018361:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 8018365:	 	strvs	r7, [r0], #-883	; 0xfffffc8d

08018368 <NetworkParamsConst::DEFAULT_GATEWAY>:
 8018368:	61666564 	cmnvs	r6, r4, ror #10
 801836c:	5f746c75 	svcpl	0x00746c75
 8018370:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 8018374:	00796177 	rsbseq	r6, r9, r7, ror r1

08018378 <NetworkParamsConst::DHCP_RETRY_TIME>:
 8018378:	70636864 	rsbvc	r6, r3, r4, ror #16
 801837c:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
 8018380:	745f7972 	ldrbvc	r7, [pc], #-2418	; 8018388 <NetworkParamsConst::HOSTNAME>
 8018384:	00656d69 	rsbeq	r6, r5, r9, ror #26

08018388 <NetworkParamsConst::HOSTNAME>:
 8018388:	74736f68 	ldrbtvc	r6, [r3], #-3944	; 0xfffff098
 801838c:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

08018391 <NetworkParamsConst::NET_MASK>:
 8018391:	5f74656e 	svcpl	0x0074656e
 8018395:	6b73616d 	blvs	9cf0951 <__exidx_end+0x1cd7d91>
	...

0801839a <NetworkParamsConst::USE_DHCP>:
 801839a:	5f657375 	svcpl	0x00657375
 801839e:	70636864 	rsbvc	r6, r3, r4, ror #16
	...

080183a3 <NetworkParamsConst::FILE_NAME>:
 80183a3:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 80183a7:	2e6b726f 	cdpcs	2, 6, cr7, cr11, cr15, {3}
 80183ab:	00747874 	rsbseq	r7, r4, r4, ror r8
 80183af:	65687445 	strbvs	r7, [r8, #-1093]!	; 0xfffffbbb
 80183b3:	74656e72 	strbtvc	r6, [r5], #-3698	; 0xfffff18e
 80183b7:	61747320 	cmnvs	r4, r0, lsr #6
 80183bb:	25007472 	strcs	r7, [r0, #-1138]	; 0xfffffb8e
 80183bf:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80183c3:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 80183c7:	252f6425 	strcs	r6, [pc, #-1061]!	; 8017faa <index_js+0x51a>
 80183cb:	63252064 			; <UNDEFINED> instruction: 0x63252064
 80183cf:	203a4e00 	eorscs	r4, sl, r0, lsl #28
 80183d3:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80183d7:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80183db:	0064252e 	rsbeq	r2, r4, lr, lsr #10
 80183df:	25203a47 	strcs	r3, [r0, #-2631]!	; 0xfffff5b9
 80183e3:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80183e7:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 80183eb:	46006425 	strmi	r6, [r0], -r5, lsr #8
 80183ef:	776d7269 	strbvc	r7, [sp, -r9, ror #4]!
 80183f3:	20657261 	rsbcs	r7, r5, r1, ror #4
 80183f7:	2a2e2556 	bcs	8ba1957 <__exidx_end+0xb88d97>
 80183fb:	48440073 	stmdami	r4, {r0, r1, r4, r5, r6}^
 80183ff:	72205043 	eorvc	r5, r0, #67	; 0x43
 8018403:	77656e65 	strbvc	r6, [r5, -r5, ror #28]!
 8018407:	00676e69 	rsbeq	r6, r7, r9, ror #28
 801840b:	50434844 	subpl	r4, r3, r4, asr #16
 801840f:	74657220 	strbtvc	r7, [r5], #-544	; 0xfffffde0
 8018413:	6e697972 			; <UNDEFINED> instruction: 0x6e697972
 8018417:	654e0067 	strbvs	r0, [lr, #-103]	; 0xffffff99
 801841b:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 801841f:	6873206b 	ldmdavs	r3!, {r0, r1, r3, r5, r6, sp}^
 8018423:	6f647475 	svcvs	0x00647475
 8018427:	00006e77 	andeq	r6, r0, r7, ror lr
	...

0801842c <pArray>:
 801842c:	080184c0 	stmdaeq	r1, {r6, r7, sl, pc}
 8018430:	0801847c 	stmdaeq	r1, {r2, r3, r4, r5, r6, sl, pc}
 8018434:	0801835d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, r9, pc}
 8018438:	080184c6 	stmdaeq	r1, {r1, r2, r6, r7, sl, pc}
 801843c:	08018731 	stmdaeq	r1, {r0, r4, r5, r8, r9, sl, pc}
 8018440:	08018487 	stmdaeq	r1, {r0, r1, r2, r7, sl, pc}
 8018444:	08016be3 	stmdaeq	r1, {r0, r1, r5, r6, r7, r8, r9, fp, sp, lr}
 8018448:	08018388 	stmdaeq	r1, {r3, r7, r8, r9, pc}
 801844c:	08018607 	stmdaeq	r1, {r0, r1, r2, r9, sl, pc}
 8018450:	08018617 	stmdaeq	r1, {r0, r1, r2, r4, r9, sl, pc}
 8018454:	08018627 	stmdaeq	r1, {r0, r1, r2, r5, r9, sl, pc}
 8018458:	08018637 	stmdaeq	r1, {r0, r1, r2, r4, r5, r9, sl, pc}
 801845c:	08018391 	stmdaeq	r1, {r0, r4, r7, r8, r9, pc}
 8018460:	0801871f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r8, r9, sl, pc}
 8018464:	08016bee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, r8, r9, fp, sp, lr}
 8018468:	08016c06 	stmdaeq	r1, {r1, r2, sl, fp, sp, lr}
 801846c:	08016c1e 	stmdaeq	r1, {r1, r2, r3, r4, sl, fp, sp, lr}
 8018470:	08016c36 	stmdaeq	r1, {r1, r2, r4, r5, sl, fp, sp, lr}
 8018474:	08018368 	stmdaeq	r1, {r3, r5, r6, r8, r9, pc}
 8018478:	08018494 	stmdaeq	r1, {r2, r4, r7, sl, pc}

0801847c <DisplayUdfParamsConst::BOARD_NAME>:
 801847c:	72616f62 	rsbvc	r6, r1, #392	; 0x188
 8018480:	616e5f64 	cmnvs	lr, r4, ror #30
 8018484:	 	tstvs	r0, sp, ror #10

08018487 <DisplayUdfParamsConst::ACTIVE_PORTS>:
 8018487:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 801848b:	705f6576 	subsvc	r6, pc, r6, ror r5	; <UNPREDICTABLE>
 801848f:	7374726f 	cmnvc	r4, #-268435450	; 0xf0000006
	...

08018494 <DisplayUdfParamsConst::DMX_DIRECTION>:
 8018494:	5f786d64 	svcpl	0x00786d64
 8018498:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801849c:	6f697463 	svcvs	0x00697463
 80184a0:	 	ldclvs	0, cr0, [r3], #-440	; 0xfffffe48

080184a2 <DisplayUdfParamsConst::SLEEP_TIMEOUT>:
 80184a2:	65656c73 	strbvs	r6, [r5, #-3187]!	; 0xfffff38d
 80184a6:	69745f70 	ldmdbvs	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 80184aa:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8017f45 <index_js+0x4b5>
 80184ae:	 	stclvs	0, cr0, [r6], #-464	; 0xfffffe30

080184b0 <DisplayUdfParamsConst::FLIP_VERTICALLY>:
 80184b0:	70696c66 	rsbvc	r6, r9, r6, ror #24
 80184b4:	7265765f 	rsbvc	r7, r5, #99614720	; 0x5f00000
 80184b8:	61636974 	smcvs	13972	; 0x3694
 80184bc:	00796c6c 	rsbseq	r6, r9, ip, ror #24

080184c0 <DisplayUdfParamsConst::TITLE>:
 80184c0:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 80184c4:	 	ldrbvs	r0, [r6, #-101]!	; 0xffffff9b

080184c6 <DisplayUdfParamsConst::VERSION>:
 80184c6:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 80184ca:	006e6f69 	rsbeq	r6, lr, r9, ror #30

080184ce <DisplayUdfParamsConst::FILE_NAME>:
 80184ce:	70736964 	rsbsvc	r6, r3, r4, ror #18
 80184d2:	2e79616c 	rpwcsez	f6, f1, #4.0
 80184d6:	00747874 	rsbseq	r7, r4, r4, ror r8

080184da <DisplayUdfParamsConst::INTENSITY>:
 80184da:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 80184de:	7469736e 	strbtvc	r7, [r9], #-878	; 0xfffffc92
 80184e2:	20200079 	eorcs	r0, r0, r9, ror r0
 80184e6:	4f002020 	svcmi	0x00002020
 80184ea:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 80184ee:	253a6432 	ldrcs	r6, [sl, #-1074]!	; 0xfffffbce
 80184f2:	64253a64 	strtvs	r3, [r5], #-2660	; 0xfffff59c
 80184f6:	20632520 	rsbcs	r2, r3, r0, lsr #10
 80184fa:	4f007325 	svcmi	0x00007325
 80184fe:	203a6425 	eorscs	r6, sl, r5, lsr #8
 8018502:	64322e25 	ldrtvs	r2, [r2], #-3621	; 0xfffff1db
 8018506:	3a64253a 	bcc	99219f6 <__exidx_end+0x1908e36>
 801850a:	25206425 	strcs	r6, [r0, #-1061]!	; 0xfffffbdb
 801850e:	73252063 			; <UNDEFINED> instruction: 0x73252063
 8018512:	3a632500 	bcc	98e191a <__exidx_end+0x18c8d5a>
 8018516:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 801851a:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801851e:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8018522:	3a504100 	bcc	942892a <__exidx_end+0x140fd6a>
 8018526:	00642520 	rsbeq	r2, r4, r0, lsr #10
 801852a:	44206f4e 	strtmi	r6, [r0], #-3918	; 0xfffff0b2
 801852e:	4400584d 	strmi	r5, [r0], #-2125	; 0xfffff7b3
 8018532:	2520584d 	strcs	r5, [r0, #-2125]!	; 0xfffff7b3
 8018536:	64252073 	strtvs	r2, [r5], #-115	; 0xffffff8d
	...

0801853b <DevicesParamsConst::SPI_SPEED_HZ>:
 801853b:	636f6c63 	cmnvs	pc, #25344	; 0x6300
 801853f:	70735f6b 	rsbsvc	r5, r3, fp, ror #30
 8018543:	5f646565 	svcpl	0x00646565
 8018547:	 			; <UNDEFINED> instruction: 0x6c007a68

0801854a <DevicesParamsConst::GROUPING_COUNT>:
 801854a:	5f64656c 	svcpl	0x0064656c
 801854e:	756f7267 	strbvc	r7, [pc, #-615]!	; 80182ef <NetworkConst::MSG_NETWORK_INIT+0xf0>
 8018552:	6f635f70 	svcvs	0x00635f70
 8018556:	00746e75 	rsbseq	r6, r4, r5, ror lr

0801855a <DevicesParamsConst::GLOBAL_BRIGHTNESS>:
 801855a:	626f6c67 	rsbvs	r6, pc, #26368	; 0x6700
 801855e:	625f6c61 	subsvs	r6, pc, #24832	; 0x6100
 8018562:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 8018566:	73656e74 	cmnvc	r5, #116, 28	; 0x740
 801856a:	 	strbvs	r0, [ip, #-115]!	; 0xffffff8d

0801856c <DevicesParamsConst::MAP>:
 801856c:	5f64656c 	svcpl	0x0064656c
 8018570:	5f626772 	svcpl	0x00626772
 8018574:	7070616d 	rsbsvc	r6, r0, sp, ror #2
 8018578:	00676e69 	rsbeq	r6, r7, r9, ror #28

0801857c <DevicesParamsConst::TYPE>:
 801857c:	5f64656c 	svcpl	0x0064656c
 8018580:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
	...

08018585 <DevicesParamsConst::COUNT>:
 8018585:	5f64656c 	svcpl	0x0064656c
 8018589:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 801858d:	 	strbvs	r0, [ip, #-116]!	; 0xffffff8c

0801858f <DevicesParamsConst::LED_T0H>:
 801858f:	5f64656c 	svcpl	0x0064656c
 8018593:	00683074 	rsbeq	r3, r8, r4, ror r0

08018597 <DevicesParamsConst::LED_T1H>:
 8018597:	5f64656c 	svcpl	0x0064656c
 801859b:	00683174 	rsbeq	r3, r8, r4, ror r1

0801859f <DevicesParamsConst::FILE_NAME>:
 801859f:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 80185a3:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 80185a7:	00747874 	rsbseq	r7, r4, r4, ror r8
 80185ab:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 80185af:	6425223a 	strtvs	r2, [r5], #-570	; 0xfffffdc6
 80185b3:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 80185b7:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80185bb:	002c2264 	eoreq	r2, ip, r4, ror #4
 80185bf:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
 80185c3:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80185c7:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80185cb:	0a64252e 	beq	9921a8b <__exidx_end+0x1908ecb>
 80185cf:	25202300 	strcs	r2, [r0, #-768]!	; 0xfffffd00
 80185d3:	0a232073 	beq	88e07a7 <__exidx_end+0x8c7be7>
 80185d7:	73252200 			; <UNDEFINED> instruction: 0x73252200
 80185db:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 80185df:	22782a2e 	rsbscs	r2, r8, #188416	; 0x2e000
 80185e3:	2523002c 	strcs	r0, [r3, #-44]!	; 0xffffffd4
 80185e7:	2e253d73 	mcrcs	13, 1, r3, cr5, cr3, {3}
 80185eb:	000a782a 	andeq	r7, sl, sl, lsr #16

080185ef <LightSetParamsConst::MERGE_MODE>:
 80185ef:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 80185f3:	6f6d5f65 	svcvs	0x006d5f65
 80185f7:	 	strvc	r6, [r0], #-1380	; 0xfffffa9c

080185fa <LightSetParamsConst::TEST_PATTERN>:
 80185fa:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
 80185fe:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
 8018602:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
	...

08018607 <LightSetParamsConst::UNIVERSE_PORT>:
 8018607:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801860b:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801860f:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8018613:	00615f74 	rsbeq	r5, r1, r4, ror pc
 8018617:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801861b:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801861f:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8018623:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8018627:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801862b:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801862f:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8018633:	00635f74 	rsbeq	r5, r3, r4, ror pc
 8018637:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801863b:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801863f:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8018643:	00645f74 	rsbeq	r5, r4, r4, ror pc

08018647 <LightSetParamsConst::START_UNI_PORT>:
 8018647:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801864b:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801864f:	6f705f69 	svcvs	0x00705f69
 8018653:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 8018657:	74730000 	ldrbtvc	r0, [r3], #-0
 801865b:	5f747261 	svcpl	0x00747261
 801865f:	5f696e75 	svcpl	0x00696e75
 8018663:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8018667:	0000325f 	andeq	r3, r0, pc, asr r2
 801866b:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801866f:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 8018673:	6f705f69 	svcvs	0x00705f69
 8018677:	335f7472 	cmpcc	pc, #1912602624	; 0x72000000
 801867b:	74730000 	ldrbtvc	r0, [r3], #-0
 801867f:	5f747261 	svcpl	0x00747261
 8018683:	5f696e75 	svcpl	0x00696e75
 8018687:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 801868b:	0000345f 	andeq	r3, r0, pc, asr r4
 801868f:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8018693:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 8018697:	6f705f69 	svcvs	0x00705f69
 801869b:	355f7472 	ldrbcc	r7, [pc, #-1138]	; 8018231 <NetworkConst::MSG_NETWORK_INIT+0x32>
 801869f:	74730000 	ldrbtvc	r0, [r3], #-0
 80186a3:	5f747261 	svcpl	0x00747261
 80186a7:	5f696e75 	svcpl	0x00696e75
 80186ab:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 80186af:	0000365f 	andeq	r3, r0, pc, asr r6
 80186b3:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 80186b7:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 80186bb:	6f705f69 	svcvs	0x00705f69
 80186bf:	375f7472 			; <UNDEFINED> instruction: 0x375f7472
 80186c3:	74730000 	ldrbtvc	r0, [r3], #-0
 80186c7:	5f747261 	svcpl	0x00747261
 80186cb:	5f696e75 	svcpl	0x00696e75
 80186cf:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 80186d3:	0000385f 	andeq	r3, r0, pc, asr r8

080186d7 <LightSetParamsConst::MERGE_MODE_PORT>:
 80186d7:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 80186db:	6f6d5f65 	svcvs	0x006d5f65
 80186df:	705f6564 	subsvc	r6, pc, r4, ror #10
 80186e3:	5f74726f 	svcpl	0x0074726f
 80186e7:	656d0061 	strbvs	r0, [sp, #-97]!	; 0xffffff9f
 80186eb:	5f656772 	svcpl	0x00656772
 80186ef:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 80186f3:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 80186f7:	00625f74 	rsbeq	r5, r2, r4, ror pc
 80186fb:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 80186ff:	6f6d5f65 	svcvs	0x006d5f65
 8018703:	705f6564 	subsvc	r6, pc, r4, ror #10
 8018707:	5f74726f 	svcpl	0x0074726f
 801870b:	656d0063 	strbvs	r0, [sp, #-99]!	; 0xffffff9d
 801870f:	5f656772 	svcpl	0x00656772
 8018713:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 8018717:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801871b:	00645f74 	rsbeq	r5, r4, r4, ror pc

0801871f <LightSetParamsConst::DMX_START_ADDRESS>:
 801871f:	5f786d64 	svcpl	0x00786d64
 8018723:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8018727:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xfffff08c
 801872b:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 801872f:	 	mrcvs	0, 3, r0, cr5, cr3, {3}

08018731 <LightSetParamsConst::UNIVERSE>:
 8018731:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8018735:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
	...

0801873a <LightSetParamsConst::DIRECTION>:
 801873a:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801873e:	6f697463 	svcvs	0x00697463
 8018742:	6f705f6e 	svcvs	0x00705f6e
 8018746:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
 801874a:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 801874e:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8018752:	5f6e6f69 	svcpl	0x006e6f69
 8018756:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 801875a:	0000625f 	andeq	r6, r0, pc, asr r2
 801875e:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8018762:	6f697463 	svcvs	0x00697463
 8018766:	6f705f6e 	svcvs	0x00705f6e
 801876a:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
 801876e:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 8018772:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8018776:	5f6e6f69 	svcpl	0x006e6f69
 801877a:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 801877e:	0000645f 	andeq	r6, r0, pc, asr r4
 8018782:	64206f4e 	strtvs	r6, [r0], #-3918	; 0xfffff0b2
 8018786:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 801878a:	66207961 	strtvs	r7, [r0], -r1, ror #18
 801878e:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 8018792:	31485300 	mrscc	r5, (UNDEF: 120)
 8018796:	00363031 	eorseq	r3, r6, r1, lsr r0
 801879a:	31445353 	cmpcc	r4, r3, asr r3
 801879e:	00363033 	eorseq	r3, r6, r3, lsr r0
 80187a2:	28207325 	stmdacs	r0!, {r0, r2, r5, r8, r9, ip, sp, lr}
 80187a6:	252c6425 	strcs	r6, [ip, #-1061]!	; 0xfffffbdb
 80187aa:	000a2964 	andeq	r2, sl, r4, ror #18
 80187ae:	aaeeaa40 	bge	7bc30b6 <__stack_size+0x7bc18b6>
 80187b2:	 	subeq	r0, r0, lr, ror #1

080187b4 <_OledFont8x6>:
 80187b4:	00000040 	andeq	r0, r0, r0, asr #32
 80187b8:	40000000 	andmi	r0, r0, r0
 80187bc:	005f0000 	subseq	r0, pc, r0
 80187c0:	00400000 	subeq	r0, r0, r0
 80187c4:	00070007 	andeq	r0, r7, r7
 80187c8:	7f144000 	svcvc	0x00144000
 80187cc:	00147f14 	andseq	r7, r4, r4, lsl pc
 80187d0:	7f2a2440 	svcvc	0x002a2440
 80187d4:	4000122a 	andmi	r1, r0, sl, lsr #4
 80187d8:	64081323 	strvs	r1, [r8], #-803	; 0xfffffcdd
 80187dc:	36400062 	strbcc	r0, [r0], -r2, rrx
 80187e0:	50205649 	eorpl	r5, r0, r9, asr #12
 80187e4:	08004000 	stmdaeq	r0, {lr}
 80187e8:	00000307 	andeq	r0, r0, r7, lsl #6
 80187ec:	221c0040 	andscs	r0, ip, #64	; 0x40
 80187f0:	40000041 	andmi	r0, r0, r1, asr #32
 80187f4:	1c224100 	stfnes	f4, [r2], #-0
 80187f8:	2a400000 	bcs	9018800 <__exidx_end+0xfffc40>
 80187fc:	2a1c7f1c 	bcs	8738474 <__exidx_end+0x71f8b4>
 8018800:	08084000 	stmdaeq	r8, {lr}
 8018804:	0008083e 	andeq	r0, r8, lr, lsr r8
 8018808:	70800040 	addvc	r0, r0, r0, asr #32
 801880c:	40000030 	andmi	r0, r0, r0, lsr r0
 8018810:	08080808 	stmdaeq	r8, {r3, fp}
 8018814:	00400008 	subeq	r0, r0, r8
 8018818:	00606000 	rsbeq	r6, r0, r0
 801881c:	10204000 	eorne	r4, r0, r0
 8018820:	00020408 	andeq	r0, r2, r8, lsl #8
 8018824:	49513e40 	ldmdbmi	r1, {r6, r9, sl, fp, ip, sp}^
 8018828:	40003e45 	andmi	r3, r0, r5, asr #28
 801882c:	407f4200 	rsbsmi	r4, pc, r0, lsl #4
 8018830:	72400000 	subvc	r0, r0, #0
 8018834:	46494949 	strbmi	r4, [r9], -r9, asr #18
 8018838:	41214000 			; <UNDEFINED> instruction: 0x41214000
 801883c:	00334d49 	eorseq	r4, r3, r9, asr #26
 8018840:	12141840 	andsne	r1, r4, #64, 16	; 0x400000
 8018844:	4000107f 	andmi	r1, r0, pc, ror r0
 8018848:	45454527 	strbmi	r4, [r5, #-1319]	; 0xfffffad9
 801884c:	3c400039 	mcrrcc	0, 3, r0, r0, cr9
 8018850:	3149494a 	cmpcc	r9, sl, asr #18
 8018854:	21414000 	mrscs	r4, (UNDEF: 65)
 8018858:	00070911 	andeq	r0, r7, r1, lsl r9
 801885c:	49493640 	stmdbmi	r9, {r6, r9, sl, ip, sp}^
 8018860:	40003649 	andmi	r3, r0, r9, asr #12
 8018864:	29494946 	stmdbcs	r9, {r1, r2, r6, r8, fp, lr}^
 8018868:	0040001e 	subeq	r0, r0, lr, lsl r0
 801886c:	00001400 	andeq	r1, r0, r0, lsl #8
 8018870:	40004000 	andmi	r4, r0, r0
 8018874:	00000034 	andeq	r0, r0, r4, lsr r0
 8018878:	14080040 	strne	r0, [r8], #-64	; 0xffffffc0
 801887c:	40004122 	andmi	r4, r0, r2, lsr #2
 8018880:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec
 8018884:	00400014 	subeq	r0, r0, r4, lsl r0
 8018888:	08142241 	ldmdaeq	r4, {r0, r6, r9, sp}
 801888c:	01024000 	mrseq	r4, (UNDEF: 2)
 8018890:	00060959 	andeq	r0, r6, r9, asr r9
 8018894:	5d413e40 	stclpl	14, cr3, [r1, #-256]	; 0xffffff00
 8018898:	40004e59 	andmi	r4, r0, r9, asr lr
 801889c:	1211127c 	andsne	r1, r1, #124, 4	; 0xc0000007
 80188a0:	7f40007c 	svcvc	0x0040007c
 80188a4:	36494949 	strbcc	r4, [r9], -r9, asr #18
 80188a8:	413e4000 	teqmi	lr, r0
 80188ac:	00224141 	eoreq	r4, r2, r1, asr #2
 80188b0:	41417f40 	cmpmi	r1, r0, asr #30
 80188b4:	40003e41 	andmi	r3, r0, r1, asr #28
 80188b8:	4949497f 	stmdbmi	r9, {r0, r1, r2, r3, r4, r5, r6, r8, fp, lr}^
 80188bc:	7f400041 	svcvc	0x00400041
 80188c0:	01090909 	tsteq	r9, r9, lsl #18
 80188c4:	413e4000 	teqmi	lr, r0
 80188c8:	00735141 	rsbseq	r5, r3, r1, asr #2
 80188cc:	08087f40 	stmdaeq	r8, {r6, r8, r9, sl, fp, ip, sp, lr}
 80188d0:	40007f08 	andmi	r7, r0, r8, lsl #30
 80188d4:	417f4100 	cmnmi	pc, r0, lsl #2
 80188d8:	20400000 	subcs	r0, r0, r0
 80188dc:	013f4140 	teqeq	pc, r0, asr #2
 80188e0:	087f4000 	ldmdaeq	pc!, {lr}^	; <UNPREDICTABLE>
 80188e4:	00412214 	subeq	r2, r1, r4, lsl r2
 80188e8:	40407f40 	submi	r7, r0, r0, asr #30
 80188ec:	40004040 	andmi	r4, r0, r0, asr #32
 80188f0:	021c027f 	andseq	r0, ip, #-268435449	; 0xf0000007
 80188f4:	7f40007f 	svcvc	0x0040007f
 80188f8:	7f100804 	svcvc	0x00100804
 80188fc:	413e4000 	teqmi	lr, r0
 8018900:	003e4141 	eorseq	r4, lr, r1, asr #2
 8018904:	09097f40 	stmdbeq	r9, {r6, r8, r9, sl, fp, ip, sp, lr}
 8018908:	40000609 	andmi	r0, r0, r9, lsl #12
 801890c:	2151413e 	cmpcs	r1, lr, lsr r1
 8018910:	7f40005e 	svcvc	0x0040005e
 8018914:	46291909 	strtmi	r1, [r9], -r9, lsl #18
 8018918:	49264000 	stmdbmi	r6!, {lr}
 801891c:	00324949 	eorseq	r4, r2, r9, asr #18
 8018920:	7f010340 	svcvc	0x00010340
 8018924:	40000301 	andmi	r0, r0, r1, lsl #6
 8018928:	4040403f 	submi	r4, r0, pc, lsr r0
 801892c:	1f40003f 	svcne	0x0040003f
 8018930:	1f204020 	svcne	0x00204020
 8018934:	403f4000 	eorsmi	r4, pc, r0
 8018938:	003f4038 	eorseq	r4, pc, r8, lsr r0	; <UNPREDICTABLE>
 801893c:	08146340 	ldmdaeq	r4, {r6, r8, r9, sp, lr}
 8018940:	40006314 	andmi	r6, r0, r4, lsl r3
 8018944:	04780403 	ldrbteq	r0, [r8], #-1027	; 0xfffffbfd
 8018948:	61400003 	cmpvs	r0, r3
 801894c:	434d4959 	movtmi	r4, #55641	; 0xd959
 8018950:	7f004000 	svcvc	0x00004000
 8018954:	00414141 	subeq	r4, r1, r1, asr #2
 8018958:	08040240 	stmdaeq	r4, {r6, r9}
 801895c:	40002010 	andmi	r2, r0, r0, lsl r0
 8018960:	41414100 	mrsmi	r4, (UNDEF: 81)
 8018964:	0440007f 	strbeq	r0, [r0], #-127	; 0xffffff81
 8018968:	04020102 	streq	r0, [r2], #-258	; 0xfffffefe
 801896c:	40404000 	submi	r4, r0, r0
 8018970:	00404040 	subeq	r4, r0, r0, asr #32
 8018974:	07030040 	streq	r0, [r3, -r0, asr #32]
 8018978:	40000008 	andmi	r0, r0, r8
 801897c:	78545420 	ldmdavc	r4, {r5, sl, ip, lr}^
 8018980:	7f400040 	svcvc	0x00400040
 8018984:	38444428 	stmdacc	r4, {r3, r5, sl, lr}^
 8018988:	44384000 	ldrtmi	r4, [r8], #-0
 801898c:	00284444 	eoreq	r4, r8, r4, asr #8
 8018990:	44443840 	strbmi	r3, [r4], #-2112	; 0xfffff7c0
 8018994:	40007f28 	andmi	r7, r0, r8, lsr #30
 8018998:	54545438 	ldrbpl	r5, [r4], #-1080	; 0xfffffbc8
 801899c:	00400018 	subeq	r0, r0, r8, lsl r0
 80189a0:	02097e08 	andeq	r7, r9, #8, 28	; 0x80
 80189a4:	a4184000 	ldrge	r4, [r8], #-0
 80189a8:	00789ca4 	rsbseq	r9, r8, r4, lsr #25
 80189ac:	04087f40 	streq	r7, [r8], #-3904	; 0xfffff0c0
 80189b0:	40007804 	andmi	r7, r0, r4, lsl #16
 80189b4:	407d4400 	rsbsmi	r4, sp, r0, lsl #8
 80189b8:	20400000 	subcs	r0, r0, r0
 80189bc:	003d4040 	eorseq	r4, sp, r0, asr #32
 80189c0:	107f4000 	rsbsne	r4, pc, r0
 80189c4:	00004428 	andeq	r4, r0, r8, lsr #8
 80189c8:	7f410040 	svcvc	0x00410040
 80189cc:	40000040 	andmi	r0, r0, r0, asr #32
 80189d0:	0478047c 	ldrbteq	r0, [r8], #-1148	; 0xfffffb84
 80189d4:	7c400078 	mcrrvc	0, 7, r0, r0, cr8
 80189d8:	78040408 	stmdavc	r4, {r3, sl}
 80189dc:	44384000 	ldrtmi	r4, [r8], #-0
 80189e0:	00384444 	eorseq	r4, r8, r4, asr #8
 80189e4:	2418fc40 	ldrcs	pc, [r8], #-3136	; 0xfffff3c0
 80189e8:	40001824 	andmi	r1, r0, r4, lsr #16
 80189ec:	18242418 	stmdane	r4!, {r3, r4, sl, sp}
 80189f0:	7c4000fc 	mcrrvc	0, 15, r0, r0, cr12
 80189f4:	08040408 	stmdaeq	r4, {r3, sl}
 80189f8:	54484000 	strbpl	r4, [r8], #-0
 80189fc:	00245454 	eoreq	r5, r4, r4, asr r4
 8018a00:	3f040440 	svccc	0x00040440
 8018a04:	40002444 	andmi	r2, r0, r4, asr #8
 8018a08:	2040403c 	subcs	r4, r0, ip, lsr r0
 8018a0c:	1c40007c 	mcrrne	0, 7, r0, r0, cr12
 8018a10:	1c204020 	stcne	0, cr4, [r0], #-128	; 0xffffff80
 8018a14:	403c4000 	eorsmi	r4, ip, r0
 8018a18:	003c4030 	eorseq	r4, ip, r0, lsr r0
 8018a1c:	10284440 	eorne	r4, r8, r0, asr #8
 8018a20:	40004428 	andmi	r4, r0, r8, lsr #8
 8018a24:	9090904c 	addsls	r9, r0, ip, asr #32
 8018a28:	4440007c 	strbmi	r0, [r0], #-124	; 0xffffff84
 8018a2c:	444c5464 	strbmi	r5, [ip], #-1124	; 0xfffffb9c
 8018a30:	08004000 	stmdaeq	r0, {lr}
 8018a34:	00004136 	andeq	r4, r0, r6, lsr r1
 8018a38:	77000040 	strvc	r0, [r0, -r0, asr #32]
 8018a3c:	40000000 	andmi	r0, r0, r0
 8018a40:	08364100 	ldmdaeq	r6!, {r8, lr}
 8018a44:	02400000 	subeq	r0, r0, #0
 8018a48:	02040201 	andeq	r0, r4, #268435456	; 0x10000000
 8018a4c:	263c4000 	ldrtcs	r4, [ip], -r0
 8018a50:	003c2623 	eorseq	r2, ip, r3, lsr #12

08018a54 <oled_128x32_init>:
 8018a54:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 8018a58:	4000d31f 	andmi	sp, r0, pc, lsl r3
 8018a5c:	0020148d 	eoreq	r1, r0, sp, lsl #9
 8018a60:	02dac8a1 	sbcseq	ip, sl, #10551296	; 0xa10000
 8018a64:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 8018a68:	a6a440db 	ssatge	r4, #5, fp, asr #1

08018a6c <oled_128x64_init>:
 8018a6c:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 8018a70:	4000d33f 	andmi	sp, r0, pc, lsr r3
 8018a74:	0020148d 	eoreq	r1, r0, sp, lsl #9
 8018a78:	12dac8a1 	sbcsne	ip, sl, #10551296	; 0xa10000
 8018a7c:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 8018a80:	a6a440db 	ssatge	r4, #5, fp, asr #1

08018a84 <vtable for Ssd1306>:
	...
 8018a8c:	08013e8d 	stmdaeq	r1, {r0, r2, r3, r7, r9, sl, fp, ip, sp}
 8018a90:	08013eb9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r9, sl, fp, ip, sp}
 8018a94:	080141d1 	stmdaeq	r1, {r0, r4, r6, r7, r8, lr}
 8018a98:	08014155 	stmdaeq	r1, {r0, r2, r4, r6, r8, lr}
 8018a9c:	08014021 	stmdaeq	r1, {r0, r5, lr}
 8018aa0:	08013ed9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp}
 8018aa4:	08013f01 	stmdaeq	r1, {r0, r8, r9, sl, fp, ip, sp}
 8018aa8:	08013ff7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp}
 8018aac:	08013fb1 	stmdaeq	r1, {r0, r4, r5, r7, r8, r9, sl, fp, ip, sp}
 8018ab0:	08013e8f 	stmdaeq	r1, {r0, r1, r2, r3, r7, r9, sl, fp, ip, sp}
 8018ab4:	0801405d 	stmdaeq	r1, {r0, r2, r3, r4, r6, lr}
 8018ab8:	08014069 	stmdaeq	r1, {r0, r3, r5, r6, lr}
 8018abc:	08014083 	stmdaeq	r1, {r0, r1, r7, lr}
 8018ac0:	08013e91 	stmdaeq	r1, {r0, r4, r7, r9, sl, fp, ip, sp}
 8018ac4:	30345b1b 	eorscc	r5, r4, fp, lsl fp
 8018ac8:	5b1b006d 	blpl	86d8c84 <__exidx_end+0x6c00c4>
 8018acc:	006d3033 	rsbeq	r3, sp, r3, lsr r0
 8018ad0:	31335b1b 	teqcc	r3, fp, lsl fp
 8018ad4:	5b1b006d 	blpl	86d8c90 <__exidx_end+0x6c00d0>
 8018ad8:	006d3233 	rsbeq	r3, sp, r3, lsr r2
 8018adc:	33335b1b 	teqcc	r3, #27648	; 0x6c00
 8018ae0:	5b1b006d 	blpl	86d8c9c <__exidx_end+0x6c00dc>
 8018ae4:	006d3933 	rsbeq	r3, sp, r3, lsr r9
 8018ae8:	2e25565b 	mcrcs	6, 1, r5, cr5, cr11, {2}
 8018aec:	205d732a 	subscs	r7, sp, sl, lsr #6
 8018af0:	43207325 			; <UNDEFINED> instruction: 0x43207325
 8018af4:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 8018af8:	2064656c 	rsbcs	r6, r4, ip, ror #10
 8018afc:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 8018b00:	20732a2e 	rsbscs	r2, r3, lr, lsr #20
 8018b04:	25207461 	strcs	r7, [r0, #-1121]!	; 0xfffffb9f
 8018b08:	00732a2e 	rsbseq	r2, r3, lr, lsr #20
 8018b0c:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 8018b10:	203a636f 	eorscs	r6, sl, pc, ror #6
 8018b14:	000a7525 	andeq	r7, sl, r5, lsr #10
 8018b18:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 8018b1c:	203a636f 	eorscs	r6, sl, pc, ror #6
 8018b20:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 8018b24:	62203e20 	eorvs	r3, r0, #32, 28	; 0x200
 8018b28:	6b636f6c 	blvs	98f48e0 <__exidx_end+0x18dbd20>
 8018b2c:	6d696c5f 	stclvs	12, cr6, [r9, #-380]!	; 0xfffffe84
 8018b30:	000a7469 	andeq	r7, sl, r9, ror #8
 8018b34:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 8018b38:	203a636f 	eorscs	r6, sl, pc, ror #6
 8018b3c:	6f6c4270 	svcvs	0x006c4270
 8018b40:	65486b63 	strbvs	r6, [r8, #-2915]	; 0xfffff49d
 8018b44:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 8018b48:	2c70253d 	cfldr64cs	mvdx2, [r0], #-244	; 0xffffff0c
 8018b4c:	7a697320 	bvc	9a757d4 <__exidx_end+0x1a5cc14>
 8018b50:	64253d65 	strtvs	r3, [r5], #-3429	; 0xfffff29b
 8018b54:	6164202c 	cmnvs	r4, ip, lsr #32
 8018b58:	253d6174 	ldrcs	r6, [sp, #-372]!	; 0xfffffe8c
 8018b5c:	66000a70 			; <UNDEFINED> instruction: 0x66000a70
 8018b60:	3a656572 	bcc	9972130 <__exidx_end+0x1959570>
 8018b64:	6c427020 	mcrrvs	0, 2, r7, r2, cr0
 8018b68:	486b636f 	stmdami	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8018b6c:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 8018b70:	203d2072 	eorscs	r2, sp, r2, ror r0
 8018b74:	202c7025 	eorcs	r7, ip, r5, lsr #32
 8018b78:	6f6c4270 	svcvs	0x006c4270
 8018b7c:	3d206b63 	fstmdbxcc	r0!, {d6-d54}	;@ Deprecated
 8018b80:	0a702520 	beq	9c22008 <__exidx_end+0x1c09448>
 8018b84:	00000000 	andeq	r0, r0, r0

08018b88 <days_of_month>:
 8018b88:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018b8c:	0000001c 	andeq	r0, r0, ip, lsl r0
 8018b90:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018b94:	0000001e 	andeq	r0, r0, lr, lsl r0
 8018b98:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018b9c:	0000001e 	andeq	r0, r0, lr, lsl r0
 8018ba0:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018ba4:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018ba8:	0000001e 	andeq	r0, r0, lr, lsl r0
 8018bac:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018bb0:	0000001e 	andeq	r0, r0, lr, lsl r0
 8018bb4:	0000001f 	andeq	r0, r0, pc, lsl r0

Disassembly of section .ARM:

08018bb8 <__exidx_start>:
 8018bb8:	7ffee9bc 	svcvc	0x00fee9bc
 8018bbc:	00000001 	andeq	r0, r0, r1

Disassembly of section .ARM.attributes:

08018bc0 <.ARM.attributes>:
 8018bc0:	00002e41 	andeq	r2, r0, r1, asr #28
 8018bc4:	61656100 	cmnvs	r5, r0, lsl #2
 8018bc8:	01006962 	tsteq	r0, r2, ror #18
 8018bcc:	00000024 	andeq	r0, r0, r4, lsr #32
 8018bd0:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
 8018bd4:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
 8018bd8:	0600334d 	streq	r3, [r0], -sp, asr #6
 8018bdc:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
 8018be0:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
 8018be4:	17011501 	strne	r1, [r1, -r1, lsl #10]
 8018be8:	1a011803 	bne	805ebfc <__exidx_end+0x4603c>
 8018bec:	Address 0x0000000008018bec is out of bounds.


Disassembly of section .data:

20000000 <s_multicast_mac>:
20000000:	005e0001 	subseq	r0, lr, r1
20000004:	00000000 	andeq	r0, r0, r0

20000008 <MDNS::s_nHandle>:
20000008:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

2000000c <next_block>:
2000000c:	20016000 	andcs	r6, r1, r0

20000010 <s_block_bucket>:
20000010:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20000020:	00000020 	andeq	r0, r0, r0, lsr #32
	...
20000030:	00000040 	andeq	r0, r0, r0, asr #32
	...
20000040:	00000060 	andeq	r0, r0, r0, rrx
	...
20000050:	00000080 	andeq	r0, r0, r0, lsl #1
	...
20000060:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20000070:	00000140 	andeq	r0, r0, r0, asr #2
	...
20000080:	00000180 	andeq	r0, r0, r0, lsl #3
	...
20000090:	00000200 	andeq	r0, r0, r0, lsl #4
	...
200000a0:	00000300 	andeq	r0, r0, r0, lsl #6
	...
200000b0:	00000400 	andeq	r0, r0, r0, lsl #8
	...
200000c0:	00000500 	andeq	r0, r0, r0, lsl #10
	...

200000e0 <SystemCoreClock>:
200000e0:	066ff300 	strbteq	pc, [pc], -r0, lsl #6	; <UNPREDICTABLE>

Disassembly of section .bss:

200000e8 <outptr>:
200000e8:	00000000 	andeq	r0, r0, r0

200000ec <guard variable for lightset::Data::Get()::instance>:
200000ec:	00000000 	andeq	r0, r0, r0

200000f0 <lightset::Data::Get()::instance>:
	...

20001900 <ArtNetNode::s_pThis>:
20001900:	00000000 	andeq	r0, r0, r0

20001904 <s_ReceivingMask>:
20001904:	00000000 	andeq	r0, r0, r0

20001908 <ip>:
20001908:	00000000 	andeq	r0, r0, r0

2000190c <ip>:
2000190c:	00000000 	andeq	r0, r0, r0

20001910 <E131Bridge::s_pThis>:
20001910:	00000000 	andeq	r0, r0, r0

20001914 <s_ReceivingMask>:
20001914:	00000000 	andeq	r0, r0, r0

20001918 <WS28xxDmx::s_pThis>:
20001918:	00000000 	andeq	r0, r0, r0

2000191c <PixelPatterns::m_PortConfig>:
	...

2000193c <PixelPatterns::m_nActivePorts>:
2000193c:	00000000 	andeq	r0, r0, r0

20001940 <PixelPatterns::m_pScannerColours>:
20001940:	00000000 	andeq	r0, r0, r0

20001944 <PixelPatterns::m_nCount>:
20001944:	00000000 	andeq	r0, r0, r0

20001948 <PixelPatterns::m_pOutput>:
20001948:	00000000 	andeq	r0, r0, r0

2000194c <PixelTestPattern::s_pThis>:
2000194c:	00000000 	andeq	r0, r0, r0

20001950 <PixelTestPattern::s_Pattern>:
20001950:	00000000 	andeq	r0, r0, r0

20001954 <s_tmp>:
20001954:	00000000 	andeq	r0, r0, r0

20001958 <WS28xx::s_pThis>:
20001958:	00000000 	andeq	r0, r0, r0

2000195c <RemoteConfig::s_pUdpBuffer>:
2000195c:	00000000 	andeq	r0, r0, r0

20001960 <RemoteConfig::s_RemoteConfigListBin>:
	...

20001984 <RemoteConfig::s_pThis>:
20001984:	00000000 	andeq	r0, r0, r0

20001988 <SpiFlashStore::s_nWaitMillis>:
20001988:	00000000 	andeq	r0, r0, r0

2000198c <SpiFlashStore::s_SpiFlashData>:
	...

2000298c <SpiFlashStore::s_nStartAddress>:
2000298c:	00000000 	andeq	r0, r0, r0

20002990 <SpiFlashStore::s_bHaveFlashChip>:
20002990:	00000000 	andeq	r0, r0, r0

20002994 <SpiFlashStore::s_nSpiFlashStoreSize>:
20002994:	00000000 	andeq	r0, r0, r0

20002998 <SpiFlashStore::s_State>:
20002998:	00000000 	andeq	r0, r0, r0

2000299c <SpiFlashStore::s_pThis>:
2000299c:	00000000 	andeq	r0, r0, r0

200029a0 <SpiFlashStore::s_bIsNew>:
200029a0:	00000000 	andeq	r0, r0, r0

200029a4 <StoreArtNet::s_pThis>:
200029a4:	00000000 	andeq	r0, r0, r0

200029a8 <StoreDisplayUdf::s_pThis>:
200029a8:	00000000 	andeq	r0, r0, r0

200029ac <StoreNetwork::s_pThis>:
200029ac:	00000000 	andeq	r0, r0, r0

200029b0 <StoreRemoteConfig::s_pThis>:
200029b0:	00000000 	andeq	r0, r0, r0

200029b4 <StoreWS28xxDmx::s_pThis>:
200029b4:	00000000 	andeq	r0, r0, r0

200029b8 <FlashRom::s_pThis>:
200029b8:	00000000 	andeq	r0, r0, r0

200029bc <flashrom::s_nAddress>:
200029bc:	00000000 	andeq	r0, r0, r0

200029c0 <flashrom::s_State>:
200029c0:	00000000 	andeq	r0, r0, r0

200029c4 <flashrom::s_nPage>:
200029c4:	00000000 	andeq	r0, r0, r0

200029c8 <flashrom::s_pData>:
200029c8:	00000000 	andeq	r0, r0, r0

200029cc <flashrom::s_isBank0>:
200029cc:	00000000 	andeq	r0, r0, r0

200029d0 <flashrom::s_nLength>:
200029d0:	00000000 	andeq	r0, r0, r0

200029d4 <g_ip_info>:
	...

200029e0 <g_mac_address>:
200029e0:	00000000 	andeq	r0, r0, r0
	...

200029e6 <s_is_dhcp>:
	...

200029e8 <s_p>:
200029e8:	00000000 	andeq	r0, r0, r0

200029ec <s_ticker>:
200029ec:	00000000 	andeq	r0, r0, r0

200029f0 <s_mac_address>:
	...

200029f8 <s_mac_address_arp_reply>:
200029f8:	00000000 	andeq	r0, r0, r0
	...

200029fe <s_id>:
	...

20002a00 <s_recv_queue>:
	...

20003570 <s_tcb>:
	...

200035b4 <s_tcp>:
	...

20003ba0 <broadcast_mask>:
20003ba0:	00000000 	andeq	r0, r0, r0

20003ba4 <gw_ip>:
20003ba4:	00000000 	andeq	r0, r0, r0

20003ba8 <on_network_mask>:
20003ba8:	00000000 	andeq	r0, r0, r0

20003bac <s_id>:
20003bac:	00000000 	andeq	r0, r0, r0

20003bb0 <s_ports_allowed>:
	...

20003bd0 <s_recv_queue>:
	...

20009870 <s_send_packet>:
	...

20009e5c <MDNS::s_nRemoteIp>:
20009e5c:	00000000 	andeq	r0, r0, r0

20009e60 <MDNS::s_nRemotePort>:
20009e60:	00000000 	andeq	r0, r0, r0

20009e64 <MDNS::s_nMulticastIp>:
20009e64:	00000000 	andeq	r0, r0, r0

20009e68 <MDNS::s_AnswerLocalIp>:
	...

2000a06c <MDNS::s_ServiceRecords>:
	...

2000a08c <MDNS::s_nBytesReceived>:
2000a08c:	00000000 	andeq	r0, r0, r0

2000a090 <MDNS::s_ServiceRecordsData>:
	...

2000a294 <MDNS::s_pName>:
2000a294:	00000000 	andeq	r0, r0, r0

2000a298 <MDNS::s_pBuffer>:
2000a298:	00000000 	andeq	r0, r0, r0

2000a29c <Network::s_pThis>:
2000a29c:	00000000 	andeq	r0, r0, r0

2000a2a0 <NetworkParams::m_tNetworkParams>:
	...

2000a300 <s_arp_announce>:
	...

2000a32c <s_arp_reply>:
	...

2000a358 <s_arp_request>:
	...

2000a384 <s_arp_records>:
	...

2000a504 <s_entry_current>:
2000a504:	00000000 	andeq	r0, r0, r0

2000a508 <s_dhcp_allocated_gw>:
2000a508:	00000000 	andeq	r0, r0, r0

2000a50c <s_dhcp_allocated_ip>:
2000a50c:	00000000 	andeq	r0, r0, r0

2000a510 <s_dhcp_allocated_netmask>:
2000a510:	00000000 	andeq	r0, r0, r0

2000a514 <s_dhcp_message>:
	...

2000a738 <s_dhcp_server_ip>:
2000a738:	00000000 	andeq	r0, r0, r0

2000a73c <s_groups>:
	...

2000a85c <s_id>:
2000a85c:	00000000 	andeq	r0, r0, r0

2000a860 <s_joins_allowed_index>:
2000a860:	00000000 	andeq	r0, r0, r0

2000a864 <s_leave>:
	...

2000a894 <s_multicast_mac>:
	...

2000a89c <s_report>:
	...

2000a8cc <DisplayUdf::s_pThis>:
2000a8cc:	00000000 	andeq	r0, r0, r0

2000a8d0 <PropertiesConfig::s_Config>:
2000a8d0:	00000000 	andeq	r0, r0, r0

2000a8d4 <Display::s_pThis>:
2000a8d4:	00000000 	andeq	r0, r0, r0

2000a8d8 <_ClearBuffer>:
	...

2000a960 <Ssd1306::s_pThis>:
2000a960:	00000000 	andeq	r0, r0, r0

2000a964 <FirmwareVersion::s_FirmwareVersion>:
	...

2000a97a <FirmwareVersion::s_Print>:
	...

2000a9bc <FirmwareVersion::s_pThis>:
2000a9bc:	00000000 	andeq	r0, r0, r0

2000a9c0 <LedBlink::s_pThis>:
2000a9c0:	00000000 	andeq	r0, r0, r0

2000a9c4 <Hardware::s_pThis>:
2000a9c4:	00000000 	andeq	r0, r0, r0

2000a9c8 <last.0>:
	...

2000a9d0 <s_micros>:
	...

2000a9d8 <set_timer>:
2000a9d8:	00000000 	andeq	r0, r0, r0

2000a9dc <s_nSysTickMillis>:
2000a9dc:	00000000 	andeq	r0, r0, r0

2000a9e0 <enet_init_status>:
2000a9e0:	00000000 	andeq	r0, r0, r0

2000a9e4 <s_nAddress>:
2000a9e4:	00000000 	andeq	r0, r0, r0

2000a9e8 <s_TxBuffer>:
	...

200129e8 <dma_current_ptp_rxdesc>:
200129e8:	00000000 	andeq	r0, r0, r0

200129ec <dma_current_ptp_txdesc>:
200129ec:	00000000 	andeq	r0, r0, r0

200129f0 <dma_current_rxdesc>:
200129f0:	00000000 	andeq	r0, r0, r0

200129f4 <dma_current_txdesc>:
200129f4:	00000000 	andeq	r0, r0, r0

200129f8 <enet_initpara>:
	...

20012a34 <rx_buff>:
	...

20014dec <rxdesc_tab>:
	...

20014e4c <tx_buff>:
	...

20015a34 <txdesc_tab>:
	...

Disassembly of section .heap:

20016000 <heap_low>:
	...

Disassembly of section .stack:

20016800 <_sp-0x1800>:
	...
