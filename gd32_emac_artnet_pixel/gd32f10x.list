
build_gd32/main.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08007000 <__gVectors>:
 8007000:	20018000 	andcs	r8, r1, r0
 8007004:	080081f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, pc}
 8007008:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 800700c:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007010:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007014:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007018:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
	...
 800702c:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007030:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007034:	00000000 	andeq	r0, r0, r0
 8007038:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 800703c:	08014349 	stmdaeq	r1, {r0, r3, r6, r8, r9, lr}
 8007040:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007044:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007048:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 800704c:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007050:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007054:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007058:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 800705c:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007060:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007064:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007068:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 800706c:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007070:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007074:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007078:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 800707c:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007080:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007084:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007088:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 800708c:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007090:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007094:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007098:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 800709c:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070a0:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070a4:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070a8:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070ac:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070b0:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070b4:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070b8:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070bc:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070c0:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070c4:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070c8:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070cc:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070d0:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070d4:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070d8:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070dc:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070e0:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070e4:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070e8:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070ec:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070f0:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 80070f4:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
	...
 8007100:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007104:	00000000 	andeq	r0, r0, r0
 8007108:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 800710c:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007110:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007114:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007118:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 800711c:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007120:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007124:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007128:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 800712c:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007130:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007134:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007138:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 800713c:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007140:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007144:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 8007148:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}
 800714c:	08008245 	stmdaeq	r0, {r0, r2, r6, r9, pc}

Disassembly of section .text:

08007150 <net_init>:
 8007150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007154:	460c      	mov	r4, r1
 8007156:	4616      	mov	r6, r2
 8007158:	9f06      	ldr	r7, [sp, #24]
 800715a:	4a22      	ldr	r2, [pc, #136]	; (80071e4 <net_init+0x94>)
 800715c:	461d      	mov	r5, r3
 800715e:	1e43      	subs	r3, r0, #1
 8007160:	3005      	adds	r0, #5
 8007162:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8007166:	4283      	cmp	r3, r0
 8007168:	f802 1b01 	strb.w	r1, [r2], #1
 800716c:	d1f9      	bne.n	8007162 <net_init+0x12>
 800716e:	4623      	mov	r3, r4
 8007170:	4a1d      	ldr	r2, [pc, #116]	; (80071e8 <net_init+0x98>)
 8007172:	f104 010c 	add.w	r1, r4, #12
 8007176:	f813 0b01 	ldrb.w	r0, [r3], #1
 800717a:	428b      	cmp	r3, r1
 800717c:	f802 0b01 	strb.w	r0, [r2], #1
 8007180:	d1f9      	bne.n	8007176 <net_init+0x26>
 8007182:	f04f 0800 	mov.w	r8, #0
 8007186:	4918      	ldr	r1, [pc, #96]	; (80071e8 <net_init+0x98>)
 8007188:	4816      	ldr	r0, [pc, #88]	; (80071e4 <net_init+0x94>)
 800718a:	f000 f9a7 	bl	80074dc <ip_init>
 800718e:	4815      	ldr	r0, [pc, #84]	; (80071e4 <net_init+0x94>)
 8007190:	f000 f83c 	bl	800720c <rfc3927_init>
 8007194:	f887 8000 	strb.w	r8, [r7]
 8007198:	782b      	ldrb	r3, [r5, #0]
 800719a:	b163      	cbz	r3, 80071b6 <net_init+0x66>
 800719c:	4632      	mov	r2, r6
 800719e:	4912      	ldr	r1, [pc, #72]	; (80071e8 <net_init+0x98>)
 80071a0:	4810      	ldr	r0, [pc, #64]	; (80071e4 <net_init+0x94>)
 80071a2:	f00a fa63 	bl	801166c <dhcp_client>
 80071a6:	4540      	cmp	r0, r8
 80071a8:	da05      	bge.n	80071b6 <net_init+0x66>
 80071aa:	480f      	ldr	r0, [pc, #60]	; (80071e8 <net_init+0x98>)
 80071ac:	f885 8000 	strb.w	r8, [r5]
 80071b0:	f008 fe92 	bl	800fed8 <rfc3927>
 80071b4:	7038      	strb	r0, [r7, #0]
 80071b6:	490c      	ldr	r1, [pc, #48]	; (80071e8 <net_init+0x98>)
 80071b8:	480a      	ldr	r0, [pc, #40]	; (80071e4 <net_init+0x94>)
 80071ba:	f000 f883 	bl	80072c4 <arp_init>
 80071be:	480a      	ldr	r0, [pc, #40]	; (80071e8 <net_init+0x98>)
 80071c0:	f00a fc74 	bl	8011aac <ip_set_ip>
 80071c4:	f000 f82e 	bl	8007224 <tcp_init>
 80071c8:	4a07      	ldr	r2, [pc, #28]	; (80071e8 <net_init+0x98>)
 80071ca:	1e63      	subs	r3, r4, #1
 80071cc:	340b      	adds	r4, #11
 80071ce:	f812 1b01 	ldrb.w	r1, [r2], #1
 80071d2:	f803 1f01 	strb.w	r1, [r3, #1]!
 80071d6:	429c      	cmp	r4, r3
 80071d8:	d1f9      	bne.n	80071ce <net_init+0x7e>
 80071da:	782a      	ldrb	r2, [r5, #0]
 80071dc:	4b03      	ldr	r3, [pc, #12]	; (80071ec <net_init+0x9c>)
 80071de:	701a      	strb	r2, [r3, #0]
 80071e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071e4:	20001934 	andcs	r1, r0, r4, lsr r9
 80071e8:	20001928 	andcs	r1, r0, r8, lsr #18
 80071ec:	2000193a 	andcs	r1, r0, sl, lsr r9

080071f0 <net_shutdown>:
 80071f0:	b508      	push	{r3, lr}
 80071f2:	f000 f97e 	bl	80074f2 <ip_shutdown>
 80071f6:	4b04      	ldr	r3, [pc, #16]	; (8007208 <net_shutdown+0x18>)
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	b11b      	cbz	r3, 8007204 <net_shutdown+0x14>
 80071fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007200:	f00a bb3c 	b.w	801187c <dhcp_client_release>
 8007204:	bd08      	pop	{r3, pc}
 8007206:	bf00      	nop
 8007208:	2000193a 	andcs	r1, r0, sl, lsr r9

0800720c <rfc3927_init>:
 800720c:	4b04      	ldr	r3, [pc, #16]	; (8007220 <rfc3927_init+0x14>)
 800720e:	1d82      	adds	r2, r0, #6
 8007210:	4290      	cmp	r0, r2
 8007212:	d100      	bne.n	8007216 <rfc3927_init+0xa>
 8007214:	4770      	bx	lr
 8007216:	f810 1b01 	ldrb.w	r1, [r0], #1
 800721a:	f803 1b01 	strb.w	r1, [r3], #1
 800721e:	e7f7      	b.n	8007210 <rfc3927_init+0x4>
 8007220:	20001944 	andcs	r1, r0, r4, asr #18

08007224 <tcp_init>:
 8007224:	2206      	movs	r2, #6
 8007226:	b513      	push	{r0, r1, r4, lr}
 8007228:	4c0b      	ldr	r4, [pc, #44]	; (8007258 <tcp_init+0x34>)
 800722a:	490c      	ldr	r1, [pc, #48]	; (800725c <tcp_init+0x38>)
 800722c:	18a0      	adds	r0, r4, r2
 800722e:	f008 fe93 	bl	800ff58 <memcpy.isra.0>
 8007232:	2308      	movs	r3, #8
 8007234:	2204      	movs	r2, #4
 8007236:	81a3      	strh	r3, [r4, #12]
 8007238:	4b09      	ldr	r3, [pc, #36]	; (8007260 <tcp_init+0x3c>)
 800723a:	eb0d 0102 	add.w	r1, sp, r2
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f104 001a 	add.w	r0, r4, #26
 8007244:	9301      	str	r3, [sp, #4]
 8007246:	f008 fe87 	bl	800ff58 <memcpy.isra.0>
 800724a:	2345      	movs	r3, #69	; 0x45
 800724c:	81e3      	strh	r3, [r4, #14]
 800724e:	4b05      	ldr	r3, [pc, #20]	; (8007264 <tcp_init+0x40>)
 8007250:	6163      	str	r3, [r4, #20]
 8007252:	b002      	add	sp, #8
 8007254:	bd10      	pop	{r4, pc}
 8007256:	bf00      	nop
 8007258:	20001954 	andcs	r1, r0, r4, asr r9
 800725c:	20001934 	andcs	r1, r0, r4, lsr r9
 8007260:	20001928 	andcs	r1, r0, r8, lsr #18
 8007264:	06400040 	strbeq	r0, [r0], -r0, asr #32

08007268 <udp_init>:
 8007268:	b570      	push	{r4, r5, r6, lr}
 800726a:	2200      	movs	r2, #0
 800726c:	2408      	movs	r4, #8
 800726e:	460e      	mov	r6, r1
 8007270:	4b0d      	ldr	r3, [pc, #52]	; (80072a8 <udp_init+0x40>)
 8007272:	490e      	ldr	r1, [pc, #56]	; (80072ac <udp_init+0x44>)
 8007274:	3c01      	subs	r4, #1
 8007276:	801a      	strh	r2, [r3, #0]
 8007278:	805a      	strh	r2, [r3, #2]
 800727a:	f841 2b04 	str.w	r2, [r1], #4
 800727e:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 8007282:	d1f7      	bne.n	8007274 <udp_init+0xc>
 8007284:	2206      	movs	r2, #6
 8007286:	4d0a      	ldr	r5, [pc, #40]	; (80072b0 <udp_init+0x48>)
 8007288:	4b0a      	ldr	r3, [pc, #40]	; (80072b4 <udp_init+0x4c>)
 800728a:	4601      	mov	r1, r0
 800728c:	18a8      	adds	r0, r5, r2
 800728e:	801c      	strh	r4, [r3, #0]
 8007290:	f008 fe6c 	bl	800ff6c <memcpy.isra.0>
 8007294:	4b08      	ldr	r3, [pc, #32]	; (80072b8 <udp_init+0x50>)
 8007296:	4630      	mov	r0, r6
 8007298:	60eb      	str	r3, [r5, #12]
 800729a:	4b08      	ldr	r3, [pc, #32]	; (80072bc <udp_init+0x54>)
 800729c:	616b      	str	r3, [r5, #20]
 800729e:	f008 fe8d 	bl	800ffbc <udp_set_ip>
 80072a2:	852c      	strh	r4, [r5, #40]	; 0x28
 80072a4:	bd70      	pop	{r4, r5, r6, pc}
 80072a6:	bf00      	nop
 80072a8:	20001f70 	andcs	r1, r0, r0, ror pc
 80072ac:	20001f50 	andcs	r1, r0, r0, asr pc
 80072b0:	20007c10 	andcs	r7, r0, r0, lsl ip
 80072b4:	20001f4c 	andcs	r1, r0, ip, asr #30
 80072b8:	00450008 	subeq	r0, r5, r8
 80072bc:	11400040 	cmpne	r0, r0, asr #32

080072c0 <udp_shutdown>:
 80072c0:	4770      	bx	lr
	...

080072c4 <arp_init>:
 80072c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072c8:	4604      	mov	r4, r0
 80072ca:	460d      	mov	r5, r1
 80072cc:	f000 f876 	bl	80073bc <arp_cache_init>
 80072d0:	2206      	movs	r2, #6
 80072d2:	4621      	mov	r1, r4
 80072d4:	482e      	ldr	r0, [pc, #184]	; (8007390 <arp_init+0xcc>)
 80072d6:	682f      	ldr	r7, [r5, #0]
 80072d8:	f00a f84a 	bl	8011370 <memcpy.isra.0>
 80072dc:	4b2d      	ldr	r3, [pc, #180]	; (8007394 <arp_init+0xd0>)
 80072de:	2507      	movs	r5, #7
 80072e0:	461e      	mov	r6, r3
 80072e2:	22ff      	movs	r2, #255	; 0xff
 80072e4:	3d01      	subs	r5, #1
 80072e6:	d146      	bne.n	8007376 <arp_init+0xb2>
 80072e8:	4b2b      	ldr	r3, [pc, #172]	; (8007398 <arp_init+0xd4>)
 80072ea:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800739c <arp_init+0xd8>
 80072ee:	2206      	movs	r2, #6
 80072f0:	e9c6 3803 	strd	r3, r8, [r6, #12]
 80072f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072f8:	4621      	mov	r1, r4
 80072fa:	4829      	ldr	r0, [pc, #164]	; (80073a0 <arp_init+0xdc>)
 80072fc:	82b3      	strh	r3, [r6, #20]
 80072fe:	f00a f837 	bl	8011370 <memcpy.isra.0>
 8007302:	2307      	movs	r3, #7
 8007304:	4a27      	ldr	r2, [pc, #156]	; (80073a4 <arp_init+0xe0>)
 8007306:	61f7      	str	r7, [r6, #28]
 8007308:	3b01      	subs	r3, #1
 800730a:	d137      	bne.n	800737c <arp_init+0xb8>
 800730c:	2206      	movs	r2, #6
 800730e:	4621      	mov	r1, r4
 8007310:	4825      	ldr	r0, [pc, #148]	; (80073a8 <arp_init+0xe4>)
 8007312:	f8c6 7026 	str.w	r7, [r6, #38]	; 0x26
 8007316:	f00a f82b 	bl	8011370 <memcpy.isra.0>
 800731a:	4a24      	ldr	r2, [pc, #144]	; (80073ac <arp_init+0xe8>)
 800731c:	2306      	movs	r3, #6
 800731e:	4615      	mov	r5, r2
 8007320:	21ff      	movs	r1, #255	; 0xff
 8007322:	3b01      	subs	r3, #1
 8007324:	d22d      	bcs.n	8007382 <arp_init+0xbe>
 8007326:	4b1c      	ldr	r3, [pc, #112]	; (8007398 <arp_init+0xd4>)
 8007328:	2206      	movs	r2, #6
 800732a:	e9c5 3803 	strd	r3, r8, [r5, #12]
 800732e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007332:	4621      	mov	r1, r4
 8007334:	481e      	ldr	r0, [pc, #120]	; (80073b0 <arp_init+0xec>)
 8007336:	82ab      	strh	r3, [r5, #20]
 8007338:	f00a f81a 	bl	8011370 <memcpy.isra.0>
 800733c:	2307      	movs	r3, #7
 800733e:	2100      	movs	r1, #0
 8007340:	4a1c      	ldr	r2, [pc, #112]	; (80073b4 <arp_init+0xf0>)
 8007342:	61ef      	str	r7, [r5, #28]
 8007344:	3b01      	subs	r3, #1
 8007346:	d11f      	bne.n	8007388 <arp_init+0xc4>
 8007348:	2206      	movs	r2, #6
 800734a:	4d1b      	ldr	r5, [pc, #108]	; (80073b8 <arp_init+0xf4>)
 800734c:	4621      	mov	r1, r4
 800734e:	18a8      	adds	r0, r5, r2
 8007350:	f00a f80e 	bl	8011370 <memcpy.isra.0>
 8007354:	4b10      	ldr	r3, [pc, #64]	; (8007398 <arp_init+0xd4>)
 8007356:	4621      	mov	r1, r4
 8007358:	e9c5 3803 	strd	r3, r8, [r5, #12]
 800735c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007360:	f105 0016 	add.w	r0, r5, #22
 8007364:	2206      	movs	r2, #6
 8007366:	82ab      	strh	r3, [r5, #20]
 8007368:	f00a f802 	bl	8011370 <memcpy.isra.0>
 800736c:	61ef      	str	r7, [r5, #28]
 800736e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007372:	f00a b807 	b.w	8011384 <arp_announce>
 8007376:	f803 2b01 	strb.w	r2, [r3], #1
 800737a:	e7b3      	b.n	80072e4 <arp_init+0x20>
 800737c:	f802 5b01 	strb.w	r5, [r2], #1
 8007380:	e7c2      	b.n	8007308 <arp_init+0x44>
 8007382:	f802 1b01 	strb.w	r1, [r2], #1
 8007386:	e7cc      	b.n	8007322 <arp_init+0x5e>
 8007388:	f802 1b01 	strb.w	r1, [r2], #1
 800738c:	e7da      	b.n	8007344 <arp_init+0x80>
 800738e:	bf00      	nop
 8007390:	20008646 	andcs	r8, r0, r6, asr #12
 8007394:	20008640 	andcs	r8, r0, r0, asr #12
 8007398:	01000608 	tsteq	r0, r8, lsl #12
 800739c:	04060008 	streq	r0, [r6], #-8
 80073a0:	20008656 	andcs	r8, r0, r6, asr r6
 80073a4:	20008660 	andcs	r8, r0, r0, ror #12
 80073a8:	2000869e 	mulcs	r0, lr, r6
 80073ac:	20008698 	mulcs	r0, r8, r6
 80073b0:	200086ae 	andcs	r8, r0, lr, lsr #13
 80073b4:	200086b8 			; <UNDEFINED> instruction: 0x200086b8
 80073b8:	2000866c 	andcs	r8, r0, ip, ror #12

080073bc <arp_cache_init>:
 80073bc:	2300      	movs	r3, #0
 80073be:	4618      	mov	r0, r3
 80073c0:	4a09      	ldr	r2, [pc, #36]	; (80073e8 <arp_cache_init+0x2c>)
 80073c2:	b510      	push	{r4, lr}
 80073c4:	8013      	strh	r3, [r2, #0]
 80073c6:	4a09      	ldr	r2, [pc, #36]	; (80073ec <arp_cache_init+0x30>)
 80073c8:	4611      	mov	r1, r2
 80073ca:	f842 0c04 	str.w	r0, [r2, #-4]
 80073ce:	1d94      	adds	r4, r2, #6
 80073d0:	42a1      	cmp	r1, r4
 80073d2:	d105      	bne.n	80073e0 <arp_cache_init+0x24>
 80073d4:	3303      	adds	r3, #3
 80073d6:	2b60      	cmp	r3, #96	; 0x60
 80073d8:	f102 020c 	add.w	r2, r2, #12
 80073dc:	d1f4      	bne.n	80073c8 <arp_cache_init+0xc>
 80073de:	bd10      	pop	{r4, pc}
 80073e0:	f801 0b01 	strb.w	r0, [r1], #1
 80073e4:	e7f4      	b.n	80073d0 <arp_cache_init+0x14>
 80073e6:	bf00      	nop
 80073e8:	20008844 	andcs	r8, r0, r4, asr #16
 80073ec:	200086c8 	andcs	r8, r0, r8, asr #13

080073f0 <igmp_init>:
 80073f0:	2200      	movs	r2, #0
 80073f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073f6:	4605      	mov	r5, r0
 80073f8:	4608      	mov	r0, r1
 80073fa:	4611      	mov	r1, r2
 80073fc:	4b23      	ldr	r3, [pc, #140]	; (800748c <igmp_init+0x9c>)
 80073fe:	f103 0408 	add.w	r4, r3, #8
 8007402:	42a3      	cmp	r3, r4
 8007404:	d13e      	bne.n	8007484 <igmp_init+0x94>
 8007406:	3201      	adds	r2, #1
 8007408:	2a24      	cmp	r2, #36	; 0x24
 800740a:	d1f8      	bne.n	80073fe <igmp_init+0xe>
 800740c:	2600      	movs	r6, #0
 800740e:	4b20      	ldr	r3, [pc, #128]	; (8007490 <igmp_init+0xa0>)
 8007410:	4c20      	ldr	r4, [pc, #128]	; (8007494 <igmp_init+0xa4>)
 8007412:	601e      	str	r6, [r3, #0]
 8007414:	4b20      	ldr	r3, [pc, #128]	; (8007498 <igmp_init+0xa8>)
 8007416:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 800741a:	801e      	strh	r6, [r3, #0]
 800741c:	f00a faa6 	bl	801196c <igmp_set_ip>
 8007420:	2201      	movs	r2, #1
 8007422:	4b1e      	ldr	r3, [pc, #120]	; (800749c <igmp_init+0xac>)
 8007424:	4629      	mov	r1, r5
 8007426:	801a      	strh	r2, [r3, #0]
 8007428:	225e      	movs	r2, #94	; 0x5e
 800742a:	709a      	strb	r2, [r3, #2]
 800742c:	2206      	movs	r2, #6
 800742e:	18a0      	adds	r0, r4, r2
 8007430:	f00a fa52 	bl	80118d8 <memcpy.isra.0>
 8007434:	f240 4394 	movw	r3, #1172	; 0x494
 8007438:	8463      	strh	r3, [r4, #34]	; 0x22
 800743a:	2316      	movs	r3, #22
 800743c:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80074a0 <igmp_init+0xb0>
 8007440:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80074a4 <igmp_init+0xb4>
 8007444:	84e3      	strh	r3, [r4, #38]	; 0x26
 8007446:	f8c4 9014 	str.w	r9, [r4, #20]
 800744a:	4b17      	ldr	r3, [pc, #92]	; (80074a8 <igmp_init+0xb8>)
 800744c:	f8c4 800c 	str.w	r8, [r4, #12]
 8007450:	8227      	strh	r7, [r4, #16]
 8007452:	84a6      	strh	r6, [r4, #36]	; 0x24
 8007454:	4c15      	ldr	r4, [pc, #84]	; (80074ac <igmp_init+0xbc>)
 8007456:	2206      	movs	r2, #6
 8007458:	6023      	str	r3, [r4, #0]
 800745a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800745e:	18a0      	adds	r0, r4, r2
 8007460:	80a3      	strh	r3, [r4, #4]
 8007462:	4629      	mov	r1, r5
 8007464:	f00a fa38 	bl	80118d8 <memcpy.isra.0>
 8007468:	23e0      	movs	r3, #224	; 0xe0
 800746a:	83e3      	strh	r3, [r4, #30]
 800746c:	f44f 13b8 	mov.w	r3, #1507328	; 0x170000
 8007470:	4a0f      	ldr	r2, [pc, #60]	; (80074b0 <igmp_init+0xc0>)
 8007472:	f8c4 9014 	str.w	r9, [r4, #20]
 8007476:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800747a:	f8c4 800c 	str.w	r8, [r4, #12]
 800747e:	8227      	strh	r7, [r4, #16]
 8007480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007484:	f803 1b01 	strb.w	r1, [r3], #1
 8007488:	e7bb      	b.n	8007402 <igmp_init+0x12>
 800748a:	bf00      	nop
 800748c:	20008a7c 	andcs	r8, r0, ip, ror sl
 8007490:	20008ba0 	andcs	r8, r0, r0, lsr #23
 8007494:	20008bdc 	ldrdcs	r8, [r0], -ip
 8007498:	20008b9c 	mulcs	r0, ip, fp
 800749c:	20008bd4 	ldrdcs	r8, [r0], -r4
 80074a0:	02010040 	andeq	r0, r1, #64	; 0x40
 80074a4:	00460008 	subeq	r0, r6, r8
 80074a8:	005e0001 	subseq	r0, lr, r1
 80074ac:	20008ba4 	andcs	r8, r0, r4, lsr #23
 80074b0:	04940200 	ldreq	r0, [r4], #512	; 0x200

080074b4 <igmp_shutdown>:
 80074b4:	b570      	push	{r4, r5, r6, lr}
 80074b6:	2500      	movs	r5, #0
 80074b8:	462e      	mov	r6, r5
 80074ba:	4c07      	ldr	r4, [pc, #28]	; (80074d8 <igmp_shutdown+0x24>)
 80074bc:	6820      	ldr	r0, [r4, #0]
 80074be:	b120      	cbz	r0, 80074ca <igmp_shutdown+0x16>
 80074c0:	f00a fab0 	bl	8011a24 <igmp_leave>
 80074c4:	6026      	str	r6, [r4, #0]
 80074c6:	7166      	strb	r6, [r4, #5]
 80074c8:	7126      	strb	r6, [r4, #4]
 80074ca:	3501      	adds	r5, #1
 80074cc:	2d24      	cmp	r5, #36	; 0x24
 80074ce:	f104 0408 	add.w	r4, r4, #8
 80074d2:	d1f3      	bne.n	80074bc <igmp_shutdown+0x8>
 80074d4:	bd70      	pop	{r4, r5, r6, pc}
 80074d6:	bf00      	nop
 80074d8:	20008a7c 	andcs	r8, r0, ip, ror sl

080074dc <ip_init>:
 80074dc:	b538      	push	{r3, r4, r5, lr}
 80074de:	4604      	mov	r4, r0
 80074e0:	460d      	mov	r5, r1
 80074e2:	f7ff fec1 	bl	8007268 <udp_init>
 80074e6:	4629      	mov	r1, r5
 80074e8:	4620      	mov	r0, r4
 80074ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074ee:	f7ff bf7f 	b.w	80073f0 <igmp_init>

080074f2 <ip_shutdown>:
 80074f2:	b508      	push	{r3, lr}
 80074f4:	f7ff ffde 	bl	80074b4 <igmp_shutdown>
 80074f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80074fc:	f7ff bee0 	b.w	80072c0 <udp_shutdown>

08007500 <console_init>:
 8007500:	b508      	push	{r3, lr}
 8007502:	f00c fec3 	bl	801428c <uart0_init>
 8007506:	4804      	ldr	r0, [pc, #16]	; (8007518 <console_init+0x18>)
 8007508:	f00c fef0 	bl	80142ec <uart0_puts>
 800750c:	4803      	ldr	r0, [pc, #12]	; (800751c <console_init+0x1c>)
 800750e:	f00c feed 	bl	80142ec <uart0_puts>
 8007512:	2000      	movs	r0, #0
 8007514:	bd08      	pop	{r3, pc}
 8007516:	bf00      	nop
 8007518:	0801621c 	stmdaeq	r1, {r2, r3, r4, r9, sp, lr}
 800751c:	0801832c 	stmdaeq	r1, {r2, r3, r5, r8, r9, pc}

08007520 <net_handle>:
 8007520:	b510      	push	{r4, lr}
 8007522:	4c0c      	ldr	r4, [pc, #48]	; (8007554 <net_handle+0x34>)
 8007524:	4620      	mov	r0, r4
 8007526:	f00d ff55 	bl	80153d4 <emac_eth_recv>
 800752a:	2800      	cmp	r0, #0
 800752c:	dd07      	ble.n	800753e <net_handle+0x1e>
 800752e:	6820      	ldr	r0, [r4, #0]
 8007530:	8983      	ldrh	r3, [r0, #12]
 8007532:	2b08      	cmp	r3, #8
 8007534:	d107      	bne.n	8007546 <net_handle+0x26>
 8007536:	f000 f8bf 	bl	80076b8 <ip_handle>
 800753a:	f00d ff5f 	bl	80153fc <emac_free_pkt>
 800753e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007542:	f008 bcb9 	b.w	800feb8 <net_timers_run>
 8007546:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800754a:	d1f6      	bne.n	800753a <net_handle+0x1a>
 800754c:	f000 f858 	bl	8007600 <arp_handle>
 8007550:	e7f3      	b.n	800753a <net_handle+0x1a>
 8007552:	bf00      	nop
 8007554:	2000193c 	andcs	r1, r0, ip, lsr r9

08007558 <udp_handle>:
 8007558:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800755c:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 800755e:	4607      	mov	r7, r0
 8007560:	ba5b      	rev16	r3, r3
 8007562:	b29b      	uxth	r3, r3
 8007564:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
 8007568:	2a01      	cmp	r2, #1
 800756a:	d904      	bls.n	8007576 <udp_handle+0x1e>
 800756c:	2b7b      	cmp	r3, #123	; 0x7b
 800756e:	d002      	beq.n	8007576 <udp_handle+0x1e>
 8007570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007574:	d308      	bcc.n	8007588 <udp_handle+0x30>
 8007576:	2400      	movs	r4, #0
 8007578:	4a1f      	ldr	r2, [pc, #124]	; (80075f8 <udp_handle+0xa0>)
 800757a:	f852 1b04 	ldr.w	r1, [r2], #4
 800757e:	4299      	cmp	r1, r3
 8007580:	d005      	beq.n	800758e <udp_handle+0x36>
 8007582:	3401      	adds	r4, #1
 8007584:	2c08      	cmp	r4, #8
 8007586:	d1f8      	bne.n	800757a <udp_handle+0x22>
 8007588:	b002      	add	sp, #8
 800758a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800758e:	f640 3394 	movw	r3, #2964	; 0xb94
 8007592:	8cfe      	ldrh	r6, [r7, #38]	; 0x26
 8007594:	435c      	muls	r4, r3
 8007596:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 800759a:	ba76      	rev16	r6, r6
 800759c:	3e08      	subs	r6, #8
 800759e:	b2b6      	uxth	r6, r6
 80075a0:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 80075a4:	bf28      	it	cs
 80075a6:	f44f 66b8 	movcs.w	r6, #1472	; 0x5c0
 80075aa:	f8df 8050 	ldr.w	r8, [pc, #80]	; 80075fc <udp_handle+0xa4>
 80075ae:	1d20      	adds	r0, r4, #4
 80075b0:	f838 5004 	ldrh.w	r5, [r8, r4]
 80075b4:	4632      	mov	r2, r6
 80075b6:	435d      	muls	r5, r3
 80075b8:	4428      	add	r0, r5
 80075ba:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 80075be:	4440      	add	r0, r8
 80075c0:	f008 fcd4 	bl	800ff6c <memcpy.isra.0>
 80075c4:	2204      	movs	r2, #4
 80075c6:	f107 011a 	add.w	r1, r7, #26
 80075ca:	eb0d 0002 	add.w	r0, sp, r2
 80075ce:	f008 fccd 	bl	800ff6c <memcpy.isra.0>
 80075d2:	9a01      	ldr	r2, [sp, #4]
 80075d4:	192b      	adds	r3, r5, r4
 80075d6:	4443      	add	r3, r8
 80075d8:	f8c3 25c4 	str.w	r2, [r3, #1476]	; 0x5c4
 80075dc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80075de:	f8a3 65ca 	strh.w	r6, [r3, #1482]	; 0x5ca
 80075e2:	ba52      	rev16	r2, r2
 80075e4:	f8a3 25c8 	strh.w	r2, [r3, #1480]	; 0x5c8
 80075e8:	f838 3004 	ldrh.w	r3, [r8, r4]
 80075ec:	3301      	adds	r3, #1
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	f828 3004 	strh.w	r3, [r8, r4]
 80075f6:	e7c7      	b.n	8007588 <udp_handle+0x30>
 80075f8:	20001f50 	andcs	r1, r0, r0, asr pc
 80075fc:	20001f70 	andcs	r1, r0, r0, ror pc

08007600 <arp_handle>:
 8007600:	8a83      	ldrh	r3, [r0, #20]
 8007602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007606:	d003      	beq.n	8007610 <arp_handle+0x10>
 8007608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800760c:	d002      	beq.n	8007614 <arp_handle+0x14>
 800760e:	4770      	bx	lr
 8007610:	f009 bec2 	b.w	8011398 <arp_handle_request>
 8007614:	f009 bee8 	b.w	80113e8 <arp_handle_reply>

08007618 <igmp_handle>:
 8007618:	7b83      	ldrb	r3, [r0, #14]
 800761a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800761e:	2b45      	cmp	r3, #69	; 0x45
 8007620:	d116      	bne.n	8007650 <igmp_handle+0x38>
 8007622:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8007626:	2b11      	cmp	r3, #17
 8007628:	d112      	bne.n	8007650 <igmp_handle+0x38>
 800762a:	4b20      	ldr	r3, [pc, #128]	; (80076ac <igmp_handle+0x94>)
 800762c:	f100 051d 	add.w	r5, r0, #29
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	466a      	mov	r2, sp
 8007634:	462b      	mov	r3, r5
 8007636:	f100 0621 	add.w	r6, r0, #33	; 0x21
 800763a:	42b3      	cmp	r3, r6
 800763c:	d10b      	bne.n	8007656 <igmp_handle+0x3e>
 800763e:	2401      	movs	r4, #1
 8007640:	2100      	movs	r1, #0
 8007642:	f04f 0c01 	mov.w	ip, #1
 8007646:	4b1a      	ldr	r3, [pc, #104]	; (80076b0 <igmp_handle+0x98>)
 8007648:	4a1a      	ldr	r2, [pc, #104]	; (80076b4 <igmp_handle+0x9c>)
 800764a:	681f      	ldr	r7, [r3, #0]
 800764c:	428f      	cmp	r7, r1
 800764e:	d10a      	bne.n	8007666 <igmp_handle+0x4e>
 8007650:	b003      	add	sp, #12
 8007652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007656:	f812 1b01 	ldrb.w	r1, [r2], #1
 800765a:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800765e:	428c      	cmp	r4, r1
 8007660:	d0eb      	beq.n	800763a <igmp_handle+0x22>
 8007662:	2400      	movs	r4, #0
 8007664:	e7ec      	b.n	8007640 <igmp_handle+0x28>
 8007666:	6813      	ldr	r3, [r2, #0]
 8007668:	9301      	str	r3, [sp, #4]
 800766a:	b924      	cbnz	r4, 8007676 <igmp_handle+0x5e>
 800766c:	462b      	mov	r3, r5
 800766e:	f10d 0e04 	add.w	lr, sp, #4
 8007672:	42b3      	cmp	r3, r6
 8007674:	d10e      	bne.n	8007694 <igmp_handle+0x7c>
 8007676:	f892 e005 	ldrb.w	lr, [r2, #5]
 800767a:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 800767e:	f1be 0f01 	cmp.w	lr, #1
 8007682:	d110      	bne.n	80076a6 <igmp_handle+0x8e>
 8007684:	f892 e004 	ldrb.w	lr, [r2, #4]
 8007688:	459e      	cmp	lr, r3
 800768a:	d909      	bls.n	80076a0 <igmp_handle+0x88>
 800768c:	085b      	lsrs	r3, r3, #1
 800768e:	3301      	adds	r3, #1
 8007690:	7113      	strb	r3, [r2, #4]
 8007692:	e005      	b.n	80076a0 <igmp_handle+0x88>
 8007694:	f81e 8b01 	ldrb.w	r8, [lr], #1
 8007698:	f813 9f01 	ldrb.w	r9, [r3, #1]!
 800769c:	45c1      	cmp	r9, r8
 800769e:	d0e8      	beq.n	8007672 <igmp_handle+0x5a>
 80076a0:	3101      	adds	r1, #1
 80076a2:	3208      	adds	r2, #8
 80076a4:	e7d2      	b.n	800764c <igmp_handle+0x34>
 80076a6:	f882 c005 	strb.w	ip, [r2, #5]
 80076aa:	e7ef      	b.n	800768c <igmp_handle+0x74>
 80076ac:	010000e0 	smlatteq	r0, r0, r0, r0
 80076b0:	20008ba0 	andcs	r8, r0, r0, lsr #23
 80076b4:	20008a7c 	andcs	r8, r0, ip, ror sl

080076b8 <ip_handle>:
 80076b8:	7b82      	ldrb	r2, [r0, #14]
 80076ba:	7dc3      	ldrb	r3, [r0, #23]
 80076bc:	2a45      	cmp	r2, #69	; 0x45
 80076be:	d003      	beq.n	80076c8 <ip_handle+0x10>
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d10b      	bne.n	80076dc <ip_handle+0x24>
 80076c4:	f7ff bfa8 	b.w	8007618 <igmp_handle>
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d0fb      	beq.n	80076c4 <ip_handle+0xc>
 80076cc:	2b11      	cmp	r3, #17
 80076ce:	d003      	beq.n	80076d8 <ip_handle+0x20>
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d103      	bne.n	80076dc <ip_handle+0x24>
 80076d4:	f000 b804 	b.w	80076e0 <icmp_handle>
 80076d8:	f7ff bf3e 	b.w	8007558 <udp_handle>
 80076dc:	4770      	bx	lr
	...

080076e0 <icmp_handle>:
 80076e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076e2:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80076e6:	4604      	mov	r4, r0
 80076e8:	2b08      	cmp	r3, #8
 80076ea:	d13e      	bne.n	800776a <icmp_handle+0x8a>
 80076ec:	f890 5023 	ldrb.w	r5, [r0, #35]	; 0x23
 80076f0:	2d00      	cmp	r5, #0
 80076f2:	d13a      	bne.n	800776a <icmp_handle+0x8a>
 80076f4:	1d86      	adds	r6, r0, #6
 80076f6:	4631      	mov	r1, r6
 80076f8:	2206      	movs	r2, #6
 80076fa:	f00a fa0a 	bl	8011b12 <memcpy.isra.0>
 80076fe:	4630      	mov	r0, r6
 8007700:	2206      	movs	r2, #6
 8007702:	491b      	ldr	r1, [pc, #108]	; (8007770 <icmp_handle+0x90>)
 8007704:	f00a fa05 	bl	8011b12 <memcpy.isra.0>
 8007708:	8a63      	ldrh	r3, [r4, #18]
 800770a:	f104 061a 	add.w	r6, r4, #26
 800770e:	43db      	mvns	r3, r3
 8007710:	4631      	mov	r1, r6
 8007712:	2204      	movs	r2, #4
 8007714:	8263      	strh	r3, [r4, #18]
 8007716:	f104 001e 	add.w	r0, r4, #30
 800771a:	f00a f9fa 	bl	8011b12 <memcpy.isra.0>
 800771e:	2204      	movs	r2, #4
 8007720:	4b14      	ldr	r3, [pc, #80]	; (8007774 <icmp_handle+0x94>)
 8007722:	eb0d 0102 	add.w	r1, sp, r2
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4630      	mov	r0, r6
 800772a:	f104 060e 	add.w	r6, r4, #14
 800772e:	9301      	str	r3, [sp, #4]
 8007730:	f00a f9ef 	bl	8011b12 <memcpy.isra.0>
 8007734:	2114      	movs	r1, #20
 8007736:	4630      	mov	r0, r6
 8007738:	7625      	strb	r5, [r4, #24]
 800773a:	7665      	strb	r5, [r4, #25]
 800773c:	f00a f9bf 	bl	8011abe <net_chksum>
 8007740:	8a21      	ldrh	r1, [r4, #16]
 8007742:	8320      	strh	r0, [r4, #24]
 8007744:	ba49      	rev16	r1, r1
 8007746:	b289      	uxth	r1, r1
 8007748:	4630      	mov	r0, r6
 800774a:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 800774e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 8007752:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 8007756:	f00a f9b2 	bl	8011abe <net_chksum>
 800775a:	8a21      	ldrh	r1, [r4, #16]
 800775c:	84a0      	strh	r0, [r4, #36]	; 0x24
 800775e:	ba49      	rev16	r1, r1
 8007760:	b289      	uxth	r1, r1
 8007762:	4620      	mov	r0, r4
 8007764:	310e      	adds	r1, #14
 8007766:	f00d fe4d 	bl	8015404 <emac_eth_send>
 800776a:	b002      	add	sp, #8
 800776c:	bd70      	pop	{r4, r5, r6, pc}
 800776e:	bf00      	nop
 8007770:	20001934 	andcs	r1, r0, r4, lsr r9
 8007774:	20001928 	andcs	r1, r0, r8, lsr #18

08007778 <__aeabi_d2f>:
 8007778:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800777c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8007780:	bf24      	itt	cs
 8007782:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8007786:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800778a:	d90d      	bls.n	80077a8 <__aeabi_d2f+0x30>
 800778c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8007790:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8007794:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8007798:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800779c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80077a0:	bf08      	it	eq
 80077a2:	f020 0001 	biceq.w	r0, r0, #1
 80077a6:	4770      	bx	lr
 80077a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80077ac:	d121      	bne.n	80077f2 <__aeabi_d2f+0x7a>
 80077ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80077b2:	bfbc      	itt	lt
 80077b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80077b8:	4770      	bxlt	lr
 80077ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80077be:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80077c2:	f1c2 0218 	rsb	r2, r2, #24
 80077c6:	f1c2 0c20 	rsb	ip, r2, #32
 80077ca:	fa10 f30c 	lsls.w	r3, r0, ip
 80077ce:	fa20 f002 	lsr.w	r0, r0, r2
 80077d2:	bf18      	it	ne
 80077d4:	f040 0001 	orrne.w	r0, r0, #1
 80077d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80077dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80077e0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80077e4:	ea40 000c 	orr.w	r0, r0, ip
 80077e8:	fa23 f302 	lsr.w	r3, r3, r2
 80077ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80077f0:	e7cc      	b.n	800778c <__aeabi_d2f+0x14>
 80077f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80077f6:	d107      	bne.n	8007808 <__aeabi_d2f+0x90>
 80077f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80077fc:	bf1e      	ittt	ne
 80077fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8007802:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8007806:	4770      	bxne	lr
 8007808:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800780c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8007810:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop

08007818 <__aeabi_frsub>:
 8007818:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800781c:	e002      	b.n	8007824 <__addsf3>
 800781e:	bf00      	nop

08007820 <__aeabi_fsub>:
 8007820:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08007824 <__addsf3>:
 8007824:	0042      	lsls	r2, r0, #1
 8007826:	bf1f      	itttt	ne
 8007828:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800782c:	ea92 0f03 	teqne	r2, r3
 8007830:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8007834:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007838:	d06a      	beq.n	8007910 <__addsf3+0xec>
 800783a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800783e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8007842:	bfc1      	itttt	gt
 8007844:	18d2      	addgt	r2, r2, r3
 8007846:	4041      	eorgt	r1, r0
 8007848:	4048      	eorgt	r0, r1
 800784a:	4041      	eorgt	r1, r0
 800784c:	bfb8      	it	lt
 800784e:	425b      	neglt	r3, r3
 8007850:	2b19      	cmp	r3, #25
 8007852:	bf88      	it	hi
 8007854:	4770      	bxhi	lr
 8007856:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800785a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800785e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8007862:	bf18      	it	ne
 8007864:	4240      	negne	r0, r0
 8007866:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800786a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800786e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8007872:	bf18      	it	ne
 8007874:	4249      	negne	r1, r1
 8007876:	ea92 0f03 	teq	r2, r3
 800787a:	d03f      	beq.n	80078fc <__addsf3+0xd8>
 800787c:	f1a2 0201 	sub.w	r2, r2, #1
 8007880:	fa41 fc03 	asr.w	ip, r1, r3
 8007884:	eb10 000c 	adds.w	r0, r0, ip
 8007888:	f1c3 0320 	rsb	r3, r3, #32
 800788c:	fa01 f103 	lsl.w	r1, r1, r3
 8007890:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8007894:	d502      	bpl.n	800789c <__addsf3+0x78>
 8007896:	4249      	negs	r1, r1
 8007898:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800789c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80078a0:	d313      	bcc.n	80078ca <__addsf3+0xa6>
 80078a2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80078a6:	d306      	bcc.n	80078b6 <__addsf3+0x92>
 80078a8:	0840      	lsrs	r0, r0, #1
 80078aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80078ae:	f102 0201 	add.w	r2, r2, #1
 80078b2:	2afe      	cmp	r2, #254	; 0xfe
 80078b4:	d251      	bcs.n	800795a <__addsf3+0x136>
 80078b6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80078ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80078be:	bf08      	it	eq
 80078c0:	f020 0001 	biceq.w	r0, r0, #1
 80078c4:	ea40 0003 	orr.w	r0, r0, r3
 80078c8:	4770      	bx	lr
 80078ca:	0049      	lsls	r1, r1, #1
 80078cc:	eb40 0000 	adc.w	r0, r0, r0
 80078d0:	3a01      	subs	r2, #1
 80078d2:	bf28      	it	cs
 80078d4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80078d8:	d2ed      	bcs.n	80078b6 <__addsf3+0x92>
 80078da:	fab0 fc80 	clz	ip, r0
 80078de:	f1ac 0c08 	sub.w	ip, ip, #8
 80078e2:	ebb2 020c 	subs.w	r2, r2, ip
 80078e6:	fa00 f00c 	lsl.w	r0, r0, ip
 80078ea:	bfaa      	itet	ge
 80078ec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80078f0:	4252      	neglt	r2, r2
 80078f2:	4318      	orrge	r0, r3
 80078f4:	bfbc      	itt	lt
 80078f6:	40d0      	lsrlt	r0, r2
 80078f8:	4318      	orrlt	r0, r3
 80078fa:	4770      	bx	lr
 80078fc:	f092 0f00 	teq	r2, #0
 8007900:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8007904:	bf06      	itte	eq
 8007906:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800790a:	3201      	addeq	r2, #1
 800790c:	3b01      	subne	r3, #1
 800790e:	e7b5      	b.n	800787c <__addsf3+0x58>
 8007910:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8007914:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007918:	bf18      	it	ne
 800791a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800791e:	d021      	beq.n	8007964 <__addsf3+0x140>
 8007920:	ea92 0f03 	teq	r2, r3
 8007924:	d004      	beq.n	8007930 <__addsf3+0x10c>
 8007926:	f092 0f00 	teq	r2, #0
 800792a:	bf08      	it	eq
 800792c:	4608      	moveq	r0, r1
 800792e:	4770      	bx	lr
 8007930:	ea90 0f01 	teq	r0, r1
 8007934:	bf1c      	itt	ne
 8007936:	2000      	movne	r0, #0
 8007938:	4770      	bxne	lr
 800793a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800793e:	d104      	bne.n	800794a <__addsf3+0x126>
 8007940:	0040      	lsls	r0, r0, #1
 8007942:	bf28      	it	cs
 8007944:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8007948:	4770      	bx	lr
 800794a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800794e:	bf3c      	itt	cc
 8007950:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8007954:	4770      	bxcc	lr
 8007956:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800795a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800795e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007962:	4770      	bx	lr
 8007964:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8007968:	bf16      	itet	ne
 800796a:	4608      	movne	r0, r1
 800796c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8007970:	4601      	movne	r1, r0
 8007972:	0242      	lsls	r2, r0, #9
 8007974:	bf06      	itte	eq
 8007976:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800797a:	ea90 0f01 	teqeq	r0, r1
 800797e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8007982:	4770      	bx	lr

08007984 <__aeabi_ui2f>:
 8007984:	f04f 0300 	mov.w	r3, #0
 8007988:	e004      	b.n	8007994 <__aeabi_i2f+0x8>
 800798a:	bf00      	nop

0800798c <__aeabi_i2f>:
 800798c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8007990:	bf48      	it	mi
 8007992:	4240      	negmi	r0, r0
 8007994:	ea5f 0c00 	movs.w	ip, r0
 8007998:	bf08      	it	eq
 800799a:	4770      	bxeq	lr
 800799c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80079a0:	4601      	mov	r1, r0
 80079a2:	f04f 0000 	mov.w	r0, #0
 80079a6:	e01c      	b.n	80079e2 <__aeabi_l2f+0x2a>

080079a8 <__aeabi_ul2f>:
 80079a8:	ea50 0201 	orrs.w	r2, r0, r1
 80079ac:	bf08      	it	eq
 80079ae:	4770      	bxeq	lr
 80079b0:	f04f 0300 	mov.w	r3, #0
 80079b4:	e00a      	b.n	80079cc <__aeabi_l2f+0x14>
 80079b6:	bf00      	nop

080079b8 <__aeabi_l2f>:
 80079b8:	ea50 0201 	orrs.w	r2, r0, r1
 80079bc:	bf08      	it	eq
 80079be:	4770      	bxeq	lr
 80079c0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80079c4:	d502      	bpl.n	80079cc <__aeabi_l2f+0x14>
 80079c6:	4240      	negs	r0, r0
 80079c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80079cc:	ea5f 0c01 	movs.w	ip, r1
 80079d0:	bf02      	ittt	eq
 80079d2:	4684      	moveq	ip, r0
 80079d4:	4601      	moveq	r1, r0
 80079d6:	2000      	moveq	r0, #0
 80079d8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80079dc:	bf08      	it	eq
 80079de:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80079e2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80079e6:	fabc f28c 	clz	r2, ip
 80079ea:	3a08      	subs	r2, #8
 80079ec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80079f0:	db10      	blt.n	8007a14 <__aeabi_l2f+0x5c>
 80079f2:	fa01 fc02 	lsl.w	ip, r1, r2
 80079f6:	4463      	add	r3, ip
 80079f8:	fa00 fc02 	lsl.w	ip, r0, r2
 80079fc:	f1c2 0220 	rsb	r2, r2, #32
 8007a00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007a04:	fa20 f202 	lsr.w	r2, r0, r2
 8007a08:	eb43 0002 	adc.w	r0, r3, r2
 8007a0c:	bf08      	it	eq
 8007a0e:	f020 0001 	biceq.w	r0, r0, #1
 8007a12:	4770      	bx	lr
 8007a14:	f102 0220 	add.w	r2, r2, #32
 8007a18:	fa01 fc02 	lsl.w	ip, r1, r2
 8007a1c:	f1c2 0220 	rsb	r2, r2, #32
 8007a20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8007a24:	fa21 f202 	lsr.w	r2, r1, r2
 8007a28:	eb43 0002 	adc.w	r0, r3, r2
 8007a2c:	bf08      	it	eq
 8007a2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8007a32:	4770      	bx	lr

08007a34 <__gesf2>:
 8007a34:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007a38:	e006      	b.n	8007a48 <__cmpsf2+0x4>
 8007a3a:	bf00      	nop

08007a3c <__lesf2>:
 8007a3c:	f04f 0c01 	mov.w	ip, #1
 8007a40:	e002      	b.n	8007a48 <__cmpsf2+0x4>
 8007a42:	bf00      	nop

08007a44 <__cmpsf2>:
 8007a44:	f04f 0c01 	mov.w	ip, #1
 8007a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8007a4c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8007a50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8007a54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007a58:	bf18      	it	ne
 8007a5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007a5e:	d011      	beq.n	8007a84 <__cmpsf2+0x40>
 8007a60:	b001      	add	sp, #4
 8007a62:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8007a66:	bf18      	it	ne
 8007a68:	ea90 0f01 	teqne	r0, r1
 8007a6c:	bf58      	it	pl
 8007a6e:	ebb2 0003 	subspl.w	r0, r2, r3
 8007a72:	bf88      	it	hi
 8007a74:	17c8      	asrhi	r0, r1, #31
 8007a76:	bf38      	it	cc
 8007a78:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8007a7c:	bf18      	it	ne
 8007a7e:	f040 0001 	orrne.w	r0, r0, #1
 8007a82:	4770      	bx	lr
 8007a84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007a88:	d102      	bne.n	8007a90 <__cmpsf2+0x4c>
 8007a8a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8007a8e:	d105      	bne.n	8007a9c <__cmpsf2+0x58>
 8007a90:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8007a94:	d1e4      	bne.n	8007a60 <__cmpsf2+0x1c>
 8007a96:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8007a9a:	d0e1      	beq.n	8007a60 <__cmpsf2+0x1c>
 8007a9c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop

08007aa4 <__aeabi_cfrcmple>:
 8007aa4:	4684      	mov	ip, r0
 8007aa6:	4608      	mov	r0, r1
 8007aa8:	4661      	mov	r1, ip
 8007aaa:	e7ff      	b.n	8007aac <__aeabi_cfcmpeq>

08007aac <__aeabi_cfcmpeq>:
 8007aac:	b50f      	push	{r0, r1, r2, r3, lr}
 8007aae:	f7ff ffc9 	bl	8007a44 <__cmpsf2>
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	bf48      	it	mi
 8007ab6:	f110 0f00 	cmnmi.w	r0, #0
 8007aba:	bd0f      	pop	{r0, r1, r2, r3, pc}

08007abc <__aeabi_fcmpeq>:
 8007abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007ac0:	f7ff fff4 	bl	8007aac <__aeabi_cfcmpeq>
 8007ac4:	bf0c      	ite	eq
 8007ac6:	2001      	moveq	r0, #1
 8007ac8:	2000      	movne	r0, #0
 8007aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8007ace:	bf00      	nop

08007ad0 <__aeabi_fcmplt>:
 8007ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007ad4:	f7ff ffea 	bl	8007aac <__aeabi_cfcmpeq>
 8007ad8:	bf34      	ite	cc
 8007ada:	2001      	movcc	r0, #1
 8007adc:	2000      	movcs	r0, #0
 8007ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8007ae2:	bf00      	nop

08007ae4 <__aeabi_fcmple>:
 8007ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007ae8:	f7ff ffe0 	bl	8007aac <__aeabi_cfcmpeq>
 8007aec:	bf94      	ite	ls
 8007aee:	2001      	movls	r0, #1
 8007af0:	2000      	movhi	r0, #0
 8007af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8007af6:	bf00      	nop

08007af8 <__aeabi_fcmpge>:
 8007af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007afc:	f7ff ffd2 	bl	8007aa4 <__aeabi_cfrcmple>
 8007b00:	bf94      	ite	ls
 8007b02:	2001      	movls	r0, #1
 8007b04:	2000      	movhi	r0, #0
 8007b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8007b0a:	bf00      	nop

08007b0c <__aeabi_fcmpgt>:
 8007b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007b10:	f7ff ffc8 	bl	8007aa4 <__aeabi_cfrcmple>
 8007b14:	bf34      	ite	cc
 8007b16:	2001      	movcc	r0, #1
 8007b18:	2000      	movcs	r0, #0
 8007b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8007b1e:	bf00      	nop

08007b20 <__aeabi_f2iz>:
 8007b20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8007b24:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8007b28:	d30f      	bcc.n	8007b4a <__aeabi_f2iz+0x2a>
 8007b2a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8007b2e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8007b32:	d90d      	bls.n	8007b50 <__aeabi_f2iz+0x30>
 8007b34:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8007b38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b3c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8007b40:	fa23 f002 	lsr.w	r0, r3, r2
 8007b44:	bf18      	it	ne
 8007b46:	4240      	negne	r0, r0
 8007b48:	4770      	bx	lr
 8007b4a:	f04f 0000 	mov.w	r0, #0
 8007b4e:	4770      	bx	lr
 8007b50:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8007b54:	d101      	bne.n	8007b5a <__aeabi_f2iz+0x3a>
 8007b56:	0242      	lsls	r2, r0, #9
 8007b58:	d105      	bne.n	8007b66 <__aeabi_f2iz+0x46>
 8007b5a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8007b5e:	bf08      	it	eq
 8007b60:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8007b64:	4770      	bx	lr
 8007b66:	f04f 0000 	mov.w	r0, #0
 8007b6a:	4770      	bx	lr

08007b6c <__aeabi_uldivmod>:
 8007b6c:	b953      	cbnz	r3, 8007b84 <__aeabi_uldivmod+0x18>
 8007b6e:	b94a      	cbnz	r2, 8007b84 <__aeabi_uldivmod+0x18>
 8007b70:	2900      	cmp	r1, #0
 8007b72:	bf08      	it	eq
 8007b74:	2800      	cmpeq	r0, #0
 8007b76:	bf1c      	itt	ne
 8007b78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8007b7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8007b80:	f000 b80c 	b.w	8007b9c <__aeabi_idiv0>
 8007b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8007b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8007b8c:	f001 fa58 	bl	8009040 <__udivmoddi4>
 8007b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b98:	b004      	add	sp, #16
 8007b9a:	4770      	bx	lr

08007b9c <__aeabi_idiv0>:
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop

08007ba0 <__aeabi_drsub>:
 8007ba0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8007ba4:	e002      	b.n	8007bac <__adddf3>
 8007ba6:	bf00      	nop

08007ba8 <__aeabi_dsub>:
 8007ba8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08007bac <__adddf3>:
 8007bac:	b530      	push	{r4, r5, lr}
 8007bae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8007bb2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8007bb6:	ea94 0f05 	teq	r4, r5
 8007bba:	bf08      	it	eq
 8007bbc:	ea90 0f02 	teqeq	r0, r2
 8007bc0:	bf1f      	itttt	ne
 8007bc2:	ea54 0c00 	orrsne.w	ip, r4, r0
 8007bc6:	ea55 0c02 	orrsne.w	ip, r5, r2
 8007bca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8007bce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007bd2:	f000 80e2 	beq.w	8007d9a <__adddf3+0x1ee>
 8007bd6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8007bda:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8007bde:	bfb8      	it	lt
 8007be0:	426d      	neglt	r5, r5
 8007be2:	dd0c      	ble.n	8007bfe <__adddf3+0x52>
 8007be4:	442c      	add	r4, r5
 8007be6:	ea80 0202 	eor.w	r2, r0, r2
 8007bea:	ea81 0303 	eor.w	r3, r1, r3
 8007bee:	ea82 0000 	eor.w	r0, r2, r0
 8007bf2:	ea83 0101 	eor.w	r1, r3, r1
 8007bf6:	ea80 0202 	eor.w	r2, r0, r2
 8007bfa:	ea81 0303 	eor.w	r3, r1, r3
 8007bfe:	2d36      	cmp	r5, #54	; 0x36
 8007c00:	bf88      	it	hi
 8007c02:	bd30      	pophi	{r4, r5, pc}
 8007c04:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007c08:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007c0c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8007c10:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8007c14:	d002      	beq.n	8007c1c <__adddf3+0x70>
 8007c16:	4240      	negs	r0, r0
 8007c18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007c1c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8007c20:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007c24:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8007c28:	d002      	beq.n	8007c30 <__adddf3+0x84>
 8007c2a:	4252      	negs	r2, r2
 8007c2c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8007c30:	ea94 0f05 	teq	r4, r5
 8007c34:	f000 80a7 	beq.w	8007d86 <__adddf3+0x1da>
 8007c38:	f1a4 0401 	sub.w	r4, r4, #1
 8007c3c:	f1d5 0e20 	rsbs	lr, r5, #32
 8007c40:	db0d      	blt.n	8007c5e <__adddf3+0xb2>
 8007c42:	fa02 fc0e 	lsl.w	ip, r2, lr
 8007c46:	fa22 f205 	lsr.w	r2, r2, r5
 8007c4a:	1880      	adds	r0, r0, r2
 8007c4c:	f141 0100 	adc.w	r1, r1, #0
 8007c50:	fa03 f20e 	lsl.w	r2, r3, lr
 8007c54:	1880      	adds	r0, r0, r2
 8007c56:	fa43 f305 	asr.w	r3, r3, r5
 8007c5a:	4159      	adcs	r1, r3
 8007c5c:	e00e      	b.n	8007c7c <__adddf3+0xd0>
 8007c5e:	f1a5 0520 	sub.w	r5, r5, #32
 8007c62:	f10e 0e20 	add.w	lr, lr, #32
 8007c66:	2a01      	cmp	r2, #1
 8007c68:	fa03 fc0e 	lsl.w	ip, r3, lr
 8007c6c:	bf28      	it	cs
 8007c6e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8007c72:	fa43 f305 	asr.w	r3, r3, r5
 8007c76:	18c0      	adds	r0, r0, r3
 8007c78:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8007c7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007c80:	d507      	bpl.n	8007c92 <__adddf3+0xe6>
 8007c82:	f04f 0e00 	mov.w	lr, #0
 8007c86:	f1dc 0c00 	rsbs	ip, ip, #0
 8007c8a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8007c8e:	eb6e 0101 	sbc.w	r1, lr, r1
 8007c92:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007c96:	d31b      	bcc.n	8007cd0 <__adddf3+0x124>
 8007c98:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007c9c:	d30c      	bcc.n	8007cb8 <__adddf3+0x10c>
 8007c9e:	0849      	lsrs	r1, r1, #1
 8007ca0:	ea5f 0030 	movs.w	r0, r0, rrx
 8007ca4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8007ca8:	f104 0401 	add.w	r4, r4, #1
 8007cac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8007cb0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8007cb4:	f080 809a 	bcs.w	8007dec <__adddf3+0x240>
 8007cb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007cbc:	bf08      	it	eq
 8007cbe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007cc2:	f150 0000 	adcs.w	r0, r0, #0
 8007cc6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007cca:	ea41 0105 	orr.w	r1, r1, r5
 8007cce:	bd30      	pop	{r4, r5, pc}
 8007cd0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8007cd4:	4140      	adcs	r0, r0
 8007cd6:	eb41 0101 	adc.w	r1, r1, r1
 8007cda:	3c01      	subs	r4, #1
 8007cdc:	bf28      	it	cs
 8007cde:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8007ce2:	d2e9      	bcs.n	8007cb8 <__adddf3+0x10c>
 8007ce4:	f091 0f00 	teq	r1, #0
 8007ce8:	bf04      	itt	eq
 8007cea:	4601      	moveq	r1, r0
 8007cec:	2000      	moveq	r0, #0
 8007cee:	fab1 f381 	clz	r3, r1
 8007cf2:	bf08      	it	eq
 8007cf4:	3320      	addeq	r3, #32
 8007cf6:	f1a3 030b 	sub.w	r3, r3, #11
 8007cfa:	f1b3 0220 	subs.w	r2, r3, #32
 8007cfe:	da0c      	bge.n	8007d1a <__adddf3+0x16e>
 8007d00:	320c      	adds	r2, #12
 8007d02:	dd08      	ble.n	8007d16 <__adddf3+0x16a>
 8007d04:	f102 0c14 	add.w	ip, r2, #20
 8007d08:	f1c2 020c 	rsb	r2, r2, #12
 8007d0c:	fa01 f00c 	lsl.w	r0, r1, ip
 8007d10:	fa21 f102 	lsr.w	r1, r1, r2
 8007d14:	e00c      	b.n	8007d30 <__adddf3+0x184>
 8007d16:	f102 0214 	add.w	r2, r2, #20
 8007d1a:	bfd8      	it	le
 8007d1c:	f1c2 0c20 	rsble	ip, r2, #32
 8007d20:	fa01 f102 	lsl.w	r1, r1, r2
 8007d24:	fa20 fc0c 	lsr.w	ip, r0, ip
 8007d28:	bfdc      	itt	le
 8007d2a:	ea41 010c 	orrle.w	r1, r1, ip
 8007d2e:	4090      	lslle	r0, r2
 8007d30:	1ae4      	subs	r4, r4, r3
 8007d32:	bfa2      	ittt	ge
 8007d34:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8007d38:	4329      	orrge	r1, r5
 8007d3a:	bd30      	popge	{r4, r5, pc}
 8007d3c:	ea6f 0404 	mvn.w	r4, r4
 8007d40:	3c1f      	subs	r4, #31
 8007d42:	da1c      	bge.n	8007d7e <__adddf3+0x1d2>
 8007d44:	340c      	adds	r4, #12
 8007d46:	dc0e      	bgt.n	8007d66 <__adddf3+0x1ba>
 8007d48:	f104 0414 	add.w	r4, r4, #20
 8007d4c:	f1c4 0220 	rsb	r2, r4, #32
 8007d50:	fa20 f004 	lsr.w	r0, r0, r4
 8007d54:	fa01 f302 	lsl.w	r3, r1, r2
 8007d58:	ea40 0003 	orr.w	r0, r0, r3
 8007d5c:	fa21 f304 	lsr.w	r3, r1, r4
 8007d60:	ea45 0103 	orr.w	r1, r5, r3
 8007d64:	bd30      	pop	{r4, r5, pc}
 8007d66:	f1c4 040c 	rsb	r4, r4, #12
 8007d6a:	f1c4 0220 	rsb	r2, r4, #32
 8007d6e:	fa20 f002 	lsr.w	r0, r0, r2
 8007d72:	fa01 f304 	lsl.w	r3, r1, r4
 8007d76:	ea40 0003 	orr.w	r0, r0, r3
 8007d7a:	4629      	mov	r1, r5
 8007d7c:	bd30      	pop	{r4, r5, pc}
 8007d7e:	fa21 f004 	lsr.w	r0, r1, r4
 8007d82:	4629      	mov	r1, r5
 8007d84:	bd30      	pop	{r4, r5, pc}
 8007d86:	f094 0f00 	teq	r4, #0
 8007d8a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8007d8e:	bf06      	itte	eq
 8007d90:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8007d94:	3401      	addeq	r4, #1
 8007d96:	3d01      	subne	r5, #1
 8007d98:	e74e      	b.n	8007c38 <__adddf3+0x8c>
 8007d9a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007d9e:	bf18      	it	ne
 8007da0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007da4:	d029      	beq.n	8007dfa <__adddf3+0x24e>
 8007da6:	ea94 0f05 	teq	r4, r5
 8007daa:	bf08      	it	eq
 8007dac:	ea90 0f02 	teqeq	r0, r2
 8007db0:	d005      	beq.n	8007dbe <__adddf3+0x212>
 8007db2:	ea54 0c00 	orrs.w	ip, r4, r0
 8007db6:	bf04      	itt	eq
 8007db8:	4619      	moveq	r1, r3
 8007dba:	4610      	moveq	r0, r2
 8007dbc:	bd30      	pop	{r4, r5, pc}
 8007dbe:	ea91 0f03 	teq	r1, r3
 8007dc2:	bf1e      	ittt	ne
 8007dc4:	2100      	movne	r1, #0
 8007dc6:	2000      	movne	r0, #0
 8007dc8:	bd30      	popne	{r4, r5, pc}
 8007dca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8007dce:	d105      	bne.n	8007ddc <__adddf3+0x230>
 8007dd0:	0040      	lsls	r0, r0, #1
 8007dd2:	4149      	adcs	r1, r1
 8007dd4:	bf28      	it	cs
 8007dd6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8007dda:	bd30      	pop	{r4, r5, pc}
 8007ddc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8007de0:	bf3c      	itt	cc
 8007de2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8007de6:	bd30      	popcc	{r4, r5, pc}
 8007de8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007dec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8007df0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007df4:	f04f 0000 	mov.w	r0, #0
 8007df8:	bd30      	pop	{r4, r5, pc}
 8007dfa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007dfe:	bf1a      	itte	ne
 8007e00:	4619      	movne	r1, r3
 8007e02:	4610      	movne	r0, r2
 8007e04:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8007e08:	bf1c      	itt	ne
 8007e0a:	460b      	movne	r3, r1
 8007e0c:	4602      	movne	r2, r0
 8007e0e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007e12:	bf06      	itte	eq
 8007e14:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8007e18:	ea91 0f03 	teqeq	r1, r3
 8007e1c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8007e20:	bd30      	pop	{r4, r5, pc}
 8007e22:	bf00      	nop

08007e24 <__aeabi_ui2d>:
 8007e24:	f090 0f00 	teq	r0, #0
 8007e28:	bf04      	itt	eq
 8007e2a:	2100      	moveq	r1, #0
 8007e2c:	4770      	bxeq	lr
 8007e2e:	b530      	push	{r4, r5, lr}
 8007e30:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007e34:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007e38:	f04f 0500 	mov.w	r5, #0
 8007e3c:	f04f 0100 	mov.w	r1, #0
 8007e40:	e750      	b.n	8007ce4 <__adddf3+0x138>
 8007e42:	bf00      	nop

08007e44 <__aeabi_i2d>:
 8007e44:	f090 0f00 	teq	r0, #0
 8007e48:	bf04      	itt	eq
 8007e4a:	2100      	moveq	r1, #0
 8007e4c:	4770      	bxeq	lr
 8007e4e:	b530      	push	{r4, r5, lr}
 8007e50:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007e54:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007e58:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8007e5c:	bf48      	it	mi
 8007e5e:	4240      	negmi	r0, r0
 8007e60:	f04f 0100 	mov.w	r1, #0
 8007e64:	e73e      	b.n	8007ce4 <__adddf3+0x138>
 8007e66:	bf00      	nop

08007e68 <__aeabi_f2d>:
 8007e68:	0042      	lsls	r2, r0, #1
 8007e6a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8007e6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8007e72:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8007e76:	bf1f      	itttt	ne
 8007e78:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8007e7c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007e80:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8007e84:	4770      	bxne	lr
 8007e86:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8007e8a:	bf08      	it	eq
 8007e8c:	4770      	bxeq	lr
 8007e8e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8007e92:	bf04      	itt	eq
 8007e94:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8007e98:	4770      	bxeq	lr
 8007e9a:	b530      	push	{r4, r5, lr}
 8007e9c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8007ea0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007ea4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007ea8:	e71c      	b.n	8007ce4 <__adddf3+0x138>
 8007eaa:	bf00      	nop

08007eac <__aeabi_ul2d>:
 8007eac:	ea50 0201 	orrs.w	r2, r0, r1
 8007eb0:	bf08      	it	eq
 8007eb2:	4770      	bxeq	lr
 8007eb4:	b530      	push	{r4, r5, lr}
 8007eb6:	f04f 0500 	mov.w	r5, #0
 8007eba:	e00a      	b.n	8007ed2 <__aeabi_l2d+0x16>

08007ebc <__aeabi_l2d>:
 8007ebc:	ea50 0201 	orrs.w	r2, r0, r1
 8007ec0:	bf08      	it	eq
 8007ec2:	4770      	bxeq	lr
 8007ec4:	b530      	push	{r4, r5, lr}
 8007ec6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8007eca:	d502      	bpl.n	8007ed2 <__aeabi_l2d+0x16>
 8007ecc:	4240      	negs	r0, r0
 8007ece:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007ed2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007ed6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007eda:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8007ede:	f43f aed8 	beq.w	8007c92 <__adddf3+0xe6>
 8007ee2:	f04f 0203 	mov.w	r2, #3
 8007ee6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007eea:	bf18      	it	ne
 8007eec:	3203      	addne	r2, #3
 8007eee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007ef2:	bf18      	it	ne
 8007ef4:	3203      	addne	r2, #3
 8007ef6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8007efa:	f1c2 0320 	rsb	r3, r2, #32
 8007efe:	fa00 fc03 	lsl.w	ip, r0, r3
 8007f02:	fa20 f002 	lsr.w	r0, r0, r2
 8007f06:	fa01 fe03 	lsl.w	lr, r1, r3
 8007f0a:	ea40 000e 	orr.w	r0, r0, lr
 8007f0e:	fa21 f102 	lsr.w	r1, r1, r2
 8007f12:	4414      	add	r4, r2
 8007f14:	e6bd      	b.n	8007c92 <__adddf3+0xe6>
 8007f16:	bf00      	nop

08007f18 <__aeabi_fmul>:
 8007f18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007f1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8007f20:	bf1e      	ittt	ne
 8007f22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8007f26:	ea92 0f0c 	teqne	r2, ip
 8007f2a:	ea93 0f0c 	teqne	r3, ip
 8007f2e:	d06f      	beq.n	8008010 <__aeabi_fmul+0xf8>
 8007f30:	441a      	add	r2, r3
 8007f32:	ea80 0c01 	eor.w	ip, r0, r1
 8007f36:	0240      	lsls	r0, r0, #9
 8007f38:	bf18      	it	ne
 8007f3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8007f3e:	d01e      	beq.n	8007f7e <__aeabi_fmul+0x66>
 8007f40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8007f48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8007f4c:	fba0 3101 	umull	r3, r1, r0, r1
 8007f50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8007f54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8007f58:	bf3e      	ittt	cc
 8007f5a:	0049      	lslcc	r1, r1, #1
 8007f5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8007f60:	005b      	lslcc	r3, r3, #1
 8007f62:	ea40 0001 	orr.w	r0, r0, r1
 8007f66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8007f6a:	2afd      	cmp	r2, #253	; 0xfd
 8007f6c:	d81d      	bhi.n	8007faa <__aeabi_fmul+0x92>
 8007f6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8007f76:	bf08      	it	eq
 8007f78:	f020 0001 	biceq.w	r0, r0, #1
 8007f7c:	4770      	bx	lr
 8007f7e:	f090 0f00 	teq	r0, #0
 8007f82:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8007f86:	bf08      	it	eq
 8007f88:	0249      	lsleq	r1, r1, #9
 8007f8a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8007f8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8007f92:	3a7f      	subs	r2, #127	; 0x7f
 8007f94:	bfc2      	ittt	gt
 8007f96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8007f9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8007f9e:	4770      	bxgt	lr
 8007fa0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007fa4:	f04f 0300 	mov.w	r3, #0
 8007fa8:	3a01      	subs	r2, #1
 8007faa:	dc5d      	bgt.n	8008068 <__aeabi_fmul+0x150>
 8007fac:	f112 0f19 	cmn.w	r2, #25
 8007fb0:	bfdc      	itt	le
 8007fb2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8007fb6:	4770      	bxle	lr
 8007fb8:	f1c2 0200 	rsb	r2, r2, #0
 8007fbc:	0041      	lsls	r1, r0, #1
 8007fbe:	fa21 f102 	lsr.w	r1, r1, r2
 8007fc2:	f1c2 0220 	rsb	r2, r2, #32
 8007fc6:	fa00 fc02 	lsl.w	ip, r0, r2
 8007fca:	ea5f 0031 	movs.w	r0, r1, rrx
 8007fce:	f140 0000 	adc.w	r0, r0, #0
 8007fd2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8007fd6:	bf08      	it	eq
 8007fd8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8007fdc:	4770      	bx	lr
 8007fde:	f092 0f00 	teq	r2, #0
 8007fe2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8007fe6:	bf02      	ittt	eq
 8007fe8:	0040      	lsleq	r0, r0, #1
 8007fea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8007fee:	3a01      	subeq	r2, #1
 8007ff0:	d0f9      	beq.n	8007fe6 <__aeabi_fmul+0xce>
 8007ff2:	ea40 000c 	orr.w	r0, r0, ip
 8007ff6:	f093 0f00 	teq	r3, #0
 8007ffa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8007ffe:	bf02      	ittt	eq
 8008000:	0049      	lsleq	r1, r1, #1
 8008002:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8008006:	3b01      	subeq	r3, #1
 8008008:	d0f9      	beq.n	8007ffe <__aeabi_fmul+0xe6>
 800800a:	ea41 010c 	orr.w	r1, r1, ip
 800800e:	e78f      	b.n	8007f30 <__aeabi_fmul+0x18>
 8008010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8008014:	ea92 0f0c 	teq	r2, ip
 8008018:	bf18      	it	ne
 800801a:	ea93 0f0c 	teqne	r3, ip
 800801e:	d00a      	beq.n	8008036 <__aeabi_fmul+0x11e>
 8008020:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8008024:	bf18      	it	ne
 8008026:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800802a:	d1d8      	bne.n	8007fde <__aeabi_fmul+0xc6>
 800802c:	ea80 0001 	eor.w	r0, r0, r1
 8008030:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008034:	4770      	bx	lr
 8008036:	f090 0f00 	teq	r0, #0
 800803a:	bf17      	itett	ne
 800803c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8008040:	4608      	moveq	r0, r1
 8008042:	f091 0f00 	teqne	r1, #0
 8008046:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800804a:	d014      	beq.n	8008076 <__aeabi_fmul+0x15e>
 800804c:	ea92 0f0c 	teq	r2, ip
 8008050:	d101      	bne.n	8008056 <__aeabi_fmul+0x13e>
 8008052:	0242      	lsls	r2, r0, #9
 8008054:	d10f      	bne.n	8008076 <__aeabi_fmul+0x15e>
 8008056:	ea93 0f0c 	teq	r3, ip
 800805a:	d103      	bne.n	8008064 <__aeabi_fmul+0x14c>
 800805c:	024b      	lsls	r3, r1, #9
 800805e:	bf18      	it	ne
 8008060:	4608      	movne	r0, r1
 8008062:	d108      	bne.n	8008076 <__aeabi_fmul+0x15e>
 8008064:	ea80 0001 	eor.w	r0, r0, r1
 8008068:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800806c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008070:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008074:	4770      	bx	lr
 8008076:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800807a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800807e:	4770      	bx	lr

08008080 <__aeabi_fdiv>:
 8008080:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008084:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8008088:	bf1e      	ittt	ne
 800808a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800808e:	ea92 0f0c 	teqne	r2, ip
 8008092:	ea93 0f0c 	teqne	r3, ip
 8008096:	d069      	beq.n	800816c <__aeabi_fdiv+0xec>
 8008098:	eba2 0203 	sub.w	r2, r2, r3
 800809c:	ea80 0c01 	eor.w	ip, r0, r1
 80080a0:	0249      	lsls	r1, r1, #9
 80080a2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80080a6:	d037      	beq.n	8008118 <__aeabi_fdiv+0x98>
 80080a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80080ac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80080b0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80080b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80080b8:	428b      	cmp	r3, r1
 80080ba:	bf38      	it	cc
 80080bc:	005b      	lslcc	r3, r3, #1
 80080be:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80080c2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80080c6:	428b      	cmp	r3, r1
 80080c8:	bf24      	itt	cs
 80080ca:	1a5b      	subcs	r3, r3, r1
 80080cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80080d0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80080d4:	bf24      	itt	cs
 80080d6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80080da:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80080de:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80080e2:	bf24      	itt	cs
 80080e4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80080e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80080ec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80080f0:	bf24      	itt	cs
 80080f2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80080f6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80080fa:	011b      	lsls	r3, r3, #4
 80080fc:	bf18      	it	ne
 80080fe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8008102:	d1e0      	bne.n	80080c6 <__aeabi_fdiv+0x46>
 8008104:	2afd      	cmp	r2, #253	; 0xfd
 8008106:	f63f af50 	bhi.w	8007faa <__aeabi_fmul+0x92>
 800810a:	428b      	cmp	r3, r1
 800810c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8008110:	bf08      	it	eq
 8008112:	f020 0001 	biceq.w	r0, r0, #1
 8008116:	4770      	bx	lr
 8008118:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800811c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8008120:	327f      	adds	r2, #127	; 0x7f
 8008122:	bfc2      	ittt	gt
 8008124:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8008128:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800812c:	4770      	bxgt	lr
 800812e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008132:	f04f 0300 	mov.w	r3, #0
 8008136:	3a01      	subs	r2, #1
 8008138:	e737      	b.n	8007faa <__aeabi_fmul+0x92>
 800813a:	f092 0f00 	teq	r2, #0
 800813e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8008142:	bf02      	ittt	eq
 8008144:	0040      	lsleq	r0, r0, #1
 8008146:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800814a:	3a01      	subeq	r2, #1
 800814c:	d0f9      	beq.n	8008142 <__aeabi_fdiv+0xc2>
 800814e:	ea40 000c 	orr.w	r0, r0, ip
 8008152:	f093 0f00 	teq	r3, #0
 8008156:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800815a:	bf02      	ittt	eq
 800815c:	0049      	lsleq	r1, r1, #1
 800815e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8008162:	3b01      	subeq	r3, #1
 8008164:	d0f9      	beq.n	800815a <__aeabi_fdiv+0xda>
 8008166:	ea41 010c 	orr.w	r1, r1, ip
 800816a:	e795      	b.n	8008098 <__aeabi_fdiv+0x18>
 800816c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8008170:	ea92 0f0c 	teq	r2, ip
 8008174:	d108      	bne.n	8008188 <__aeabi_fdiv+0x108>
 8008176:	0242      	lsls	r2, r0, #9
 8008178:	f47f af7d 	bne.w	8008076 <__aeabi_fmul+0x15e>
 800817c:	ea93 0f0c 	teq	r3, ip
 8008180:	f47f af70 	bne.w	8008064 <__aeabi_fmul+0x14c>
 8008184:	4608      	mov	r0, r1
 8008186:	e776      	b.n	8008076 <__aeabi_fmul+0x15e>
 8008188:	ea93 0f0c 	teq	r3, ip
 800818c:	d104      	bne.n	8008198 <__aeabi_fdiv+0x118>
 800818e:	024b      	lsls	r3, r1, #9
 8008190:	f43f af4c 	beq.w	800802c <__aeabi_fmul+0x114>
 8008194:	4608      	mov	r0, r1
 8008196:	e76e      	b.n	8008076 <__aeabi_fmul+0x15e>
 8008198:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800819c:	bf18      	it	ne
 800819e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80081a2:	d1ca      	bne.n	800813a <__aeabi_fdiv+0xba>
 80081a4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80081a8:	f47f af5c 	bne.w	8008064 <__aeabi_fmul+0x14c>
 80081ac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80081b0:	f47f af3c 	bne.w	800802c <__aeabi_fmul+0x114>
 80081b4:	e75f      	b.n	8008076 <__aeabi_fmul+0x15e>
 80081b6:	bf00      	nop

080081b8 <__aeabi_f2uiz>:
 80081b8:	0042      	lsls	r2, r0, #1
 80081ba:	d20e      	bcs.n	80081da <__aeabi_f2uiz+0x22>
 80081bc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80081c0:	d30b      	bcc.n	80081da <__aeabi_f2uiz+0x22>
 80081c2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80081c6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80081ca:	d409      	bmi.n	80081e0 <__aeabi_f2uiz+0x28>
 80081cc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80081d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081d4:	fa23 f002 	lsr.w	r0, r3, r2
 80081d8:	4770      	bx	lr
 80081da:	f04f 0000 	mov.w	r0, #0
 80081de:	4770      	bx	lr
 80081e0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80081e4:	d101      	bne.n	80081ea <__aeabi_f2uiz+0x32>
 80081e6:	0242      	lsls	r2, r0, #9
 80081e8:	d102      	bne.n	80081f0 <__aeabi_f2uiz+0x38>
 80081ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081ee:	4770      	bx	lr
 80081f0:	f04f 0000 	mov.w	r0, #0
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop

080081f8 <Reset_Handler>:
 80081f8:	480c      	ldr	r0, [pc, #48]	; (800822c <Zerobss+0x10>)
 80081fa:	4685      	mov	sp, r0
 80081fc:	2100      	movs	r1, #0
 80081fe:	e003      	b.n	8008208 <DataInit>

08008200 <CopyData>:
 8008200:	4b0b      	ldr	r3, [pc, #44]	; (8008230 <Zerobss+0x14>)
 8008202:	585b      	ldr	r3, [r3, r1]
 8008204:	5043      	str	r3, [r0, r1]
 8008206:	3104      	adds	r1, #4

08008208 <DataInit>:
 8008208:	480a      	ldr	r0, [pc, #40]	; (8008234 <Zerobss+0x18>)
 800820a:	4b0b      	ldr	r3, [pc, #44]	; (8008238 <Zerobss+0x1c>)
 800820c:	1842      	adds	r2, r0, r1
 800820e:	429a      	cmp	r2, r3
 8008210:	d3f6      	bcc.n	8008200 <CopyData>
 8008212:	4a0a      	ldr	r2, [pc, #40]	; (800823c <Zerobss+0x20>)
 8008214:	e002      	b.n	800821c <Zerobss>

08008216 <FillZerobss>:
 8008216:	2300      	movs	r3, #0
 8008218:	f842 3b04 	str.w	r3, [r2], #4

0800821c <Zerobss>:
 800821c:	4b08      	ldr	r3, [pc, #32]	; (8008240 <Zerobss+0x24>)
 800821e:	429a      	cmp	r2, r3
 8008220:	d3f9      	bcc.n	8008216 <FillZerobss>
 8008222:	f00c f899 	bl	8014358 <SystemInit>
 8008226:	f000 f9c1 	bl	80085ac <main>
 800822a:	4770      	bx	lr
 800822c:	20018000 	andcs	r8, r1, r0
 8008230:	080183ac 	stmdaeq	r1, {r2, r3, r5, r7, r8, r9, pc}
 8008234:	20000000 	andcs	r0, r0, r0
 8008238:	2000007c 	andcs	r0, r0, ip, ror r0
 800823c:	20000080 	andcs	r0, r0, r0, lsl #1
 8008240:	200139e8 	andcs	r3, r1, r8, ror #19

08008244 <ADC0_1_IRQHandler>:
 8008244:	e7fe      	b.n	8008244 <ADC0_1_IRQHandler>

08008246 <DisplayHandler::~DisplayHandler()>:
 8008246:	4770      	bx	lr

08008248 <ArtNetTriggerHandler::~ArtNetTriggerHandler()>:
 8008248:	4770      	bx	lr

0800824a <PixelDmxStartStop::~PixelDmxStartStop()>:
 800824a:	4770      	bx	lr

0800824c <PixelDmxStartStop::Start()>:
 800824c:	2204      	movs	r2, #4
 800824e:	4b01      	ldr	r3, [pc, #4]	; (8008254 <PixelDmxStartStop::Start()+0x8>)
 8008250:	611a      	str	r2, [r3, #16]
 8008252:	4770      	bx	lr
 8008254:	40011000 	andmi	r1, r1, r0

08008258 <PixelDmxStartStop::Stop()>:
 8008258:	2204      	movs	r2, #4
 800825a:	4b01      	ldr	r3, [pc, #4]	; (8008260 <PixelDmxStartStop::Stop()+0x8>)
 800825c:	615a      	str	r2, [r3, #20]
 800825e:	4770      	bx	lr
 8008260:	40011000 	andmi	r1, r1, r0

08008264 <DisplayHandler::~DisplayHandler()>:
 8008264:	b510      	push	{r4, lr}
 8008266:	4604      	mov	r4, r0
 8008268:	f00b fe74 	bl	8013f54 <operator delete(void*)>
 800826c:	4620      	mov	r0, r4
 800826e:	bd10      	pop	{r4, pc}

08008270 <ArtNetTriggerHandler::~ArtNetTriggerHandler()>:
 8008270:	b510      	push	{r4, lr}
 8008272:	4604      	mov	r4, r0
 8008274:	f00b fe6e 	bl	8013f54 <operator delete(void*)>
 8008278:	4620      	mov	r0, r4
 800827a:	bd10      	pop	{r4, pc}

0800827c <PixelDmxStartStop::~PixelDmxStartStop()>:
 800827c:	b510      	push	{r4, lr}
 800827e:	4604      	mov	r4, r0
 8008280:	f00b fe68 	bl	8013f54 <operator delete(void*)>
 8008284:	4620      	mov	r0, r4
 8008286:	bd10      	pop	{r4, pc}

08008288 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>:
 8008288:	b110      	cbz	r0, 8008290 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]+0x8>
 800828a:	6803      	ldr	r3, [r0, #0]
 800828c:	6a1b      	ldr	r3, [r3, #32]
 800828e:	4718      	bx	r3
 8008290:	4770      	bx	lr

08008292 <Display::PutChar(int) [clone .isra.0]>:
 8008292:	b110      	cbz	r0, 800829a <Display::PutChar(int) [clone .isra.0]+0x8>
 8008294:	6803      	ldr	r3, [r0, #0]
 8008296:	695b      	ldr	r3, [r3, #20]
 8008298:	4718      	bx	r3
 800829a:	4770      	bx	lr

0800829c <DisplayHandler::Print(unsigned int)>:
 800829c:	b538      	push	{r3, r4, r5, lr}
 800829e:	7903      	ldrb	r3, [r0, #4]
 80082a0:	b1f3      	cbz	r3, 80082e0 <DisplayHandler::Print(unsigned int)+0x44>
 80082a2:	2904      	cmp	r1, #4
 80082a4:	bf98      	it	ls
 80082a6:	4b0f      	ldrls	r3, [pc, #60]	; (80082e4 <DisplayHandler::Print(unsigned int)+0x48>)
 80082a8:	4d0f      	ldr	r5, [pc, #60]	; (80082e8 <DisplayHandler::Print(unsigned int)+0x4c>)
 80082aa:	bf98      	it	ls
 80082ac:	5c5c      	ldrbls	r4, [r3, r1]
 80082ae:	682b      	ldr	r3, [r5, #0]
 80082b0:	bf88      	it	hi
 80082b2:	2455      	movhi	r4, #85	; 0x55
 80082b4:	6998      	ldr	r0, [r3, #24]
 80082b6:	b178      	cbz	r0, 80082d8 <DisplayHandler::Print(unsigned int)+0x3c>
 80082b8:	7901      	ldrb	r1, [r0, #4]
 80082ba:	3901      	subs	r1, #1
 80082bc:	b2c9      	uxtb	r1, r1
 80082be:	b168      	cbz	r0, 80082dc <DisplayHandler::Print(unsigned int)+0x40>
 80082c0:	7942      	ldrb	r2, [r0, #5]
 80082c2:	3a01      	subs	r2, #1
 80082c4:	b2d2      	uxtb	r2, r2
 80082c6:	f7ff ffdf 	bl	8008288 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 80082ca:	682b      	ldr	r3, [r5, #0]
 80082cc:	4621      	mov	r1, r4
 80082ce:	6998      	ldr	r0, [r3, #24]
 80082d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082d4:	f7ff bfdd 	b.w	8008292 <Display::PutChar(int) [clone .isra.0]>
 80082d8:	4601      	mov	r1, r0
 80082da:	e7ee      	b.n	80082ba <DisplayHandler::Print(unsigned int)+0x1e>
 80082dc:	4602      	mov	r2, r0
 80082de:	e7f0      	b.n	80082c2 <DisplayHandler::Print(unsigned int)+0x26>
 80082e0:	bd38      	pop	{r3, r4, r5, pc}
 80082e2:	bf00      	nop
 80082e4:	0801628c 	stmdaeq	r1, {r2, r3, r7, r9, sp, lr}
 80082e8:	20009c68 	andcs	r9, r0, r8, ror #24

080082ec <Display::ClearLine(unsigned char)>:
 80082ec:	6980      	ldr	r0, [r0, #24]
 80082ee:	b110      	cbz	r0, 80082f6 <Display::ClearLine(unsigned char)+0xa>
 80082f0:	6803      	ldr	r3, [r0, #0]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	4718      	bx	r3
 80082f6:	4770      	bx	lr

080082f8 <Display::Printf(unsigned char, char const*, ...)>:
 80082f8:	b40c      	push	{r2, r3}
 80082fa:	b570      	push	{r4, r5, r6, lr}
 80082fc:	6984      	ldr	r4, [r0, #24]
 80082fe:	4605      	mov	r5, r0
 8008300:	460e      	mov	r6, r1
 8008302:	b08a      	sub	sp, #40	; 0x28
 8008304:	b174      	cbz	r4, 8008324 <Display::Printf(unsigned char, char const*, ...)+0x2c>
 8008306:	ab0f      	add	r3, sp, #60	; 0x3c
 8008308:	2120      	movs	r1, #32
 800830a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800830c:	a802      	add	r0, sp, #8
 800830e:	9301      	str	r3, [sp, #4]
 8008310:	f000 fe86 	bl	8009020 <vsnprintf>
 8008314:	4604      	mov	r4, r0
 8008316:	69a8      	ldr	r0, [r5, #24]
 8008318:	4631      	mov	r1, r6
 800831a:	6803      	ldr	r3, [r0, #0]
 800831c:	aa02      	add	r2, sp, #8
 800831e:	69dd      	ldr	r5, [r3, #28]
 8008320:	b2a3      	uxth	r3, r4
 8008322:	47a8      	blx	r5
 8008324:	4620      	mov	r0, r4
 8008326:	b00a      	add	sp, #40	; 0x28
 8008328:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800832c:	b002      	add	sp, #8
 800832e:	4770      	bx	lr

08008330 <Display::TextStatus(char const*)>:
 8008330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008334:	4604      	mov	r4, r0
 8008336:	6980      	ldr	r0, [r0, #24]
 8008338:	460d      	mov	r5, r1
 800833a:	b360      	cbz	r0, 8008396 <Display::TextStatus(char const*)+0x66>
 800833c:	7947      	ldrb	r7, [r0, #5]
 800833e:	2100      	movs	r1, #0
 8008340:	1e7e      	subs	r6, r7, #1
 8008342:	b2f6      	uxtb	r6, r6
 8008344:	4632      	mov	r2, r6
 8008346:	f890 9004 	ldrb.w	r9, [r0, #4]
 800834a:	f04f 0800 	mov.w	r8, #0
 800834e:	f7ff ff9b 	bl	8008288 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 8008352:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008356:	45c1      	cmp	r9, r8
 8008358:	69a0      	ldr	r0, [r4, #24]
 800835a:	d816      	bhi.n	800838a <Display::TextStatus(char const*)+0x5a>
 800835c:	4632      	mov	r2, r6
 800835e:	2100      	movs	r1, #0
 8008360:	f7ff ff92 	bl	8008288 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 8008364:	69a0      	ldr	r0, [r4, #24]
 8008366:	b1b0      	cbz	r0, 8008396 <Display::TextStatus(char const*)+0x66>
 8008368:	2300      	movs	r3, #0
 800836a:	7901      	ldrb	r1, [r0, #4]
 800836c:	5cea      	ldrb	r2, [r5, r3]
 800836e:	b11a      	cbz	r2, 8008378 <Display::TextStatus(char const*)+0x48>
 8008370:	1c5a      	adds	r2, r3, #1
 8008372:	4299      	cmp	r1, r3
 8008374:	4613      	mov	r3, r2
 8008376:	dcf9      	bgt.n	800836c <Display::TextStatus(char const*)+0x3c>
 8008378:	6802      	ldr	r2, [r0, #0]
 800837a:	4639      	mov	r1, r7
 800837c:	69d4      	ldr	r4, [r2, #28]
 800837e:	b2db      	uxtb	r3, r3
 8008380:	462a      	mov	r2, r5
 8008382:	46a4      	mov	ip, r4
 8008384:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008388:	4760      	bx	ip
 800838a:	2120      	movs	r1, #32
 800838c:	f7ff ff81 	bl	8008292 <Display::PutChar(int) [clone .isra.0]>
 8008390:	f108 0801 	add.w	r8, r8, #1
 8008394:	e7df      	b.n	8008356 <Display::TextStatus(char const*)+0x26>
 8008396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800839a <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>:
 800839a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800839c:	4605      	mov	r5, r0
 800839e:	461e      	mov	r6, r3
 80083a0:	460f      	mov	r7, r1
 80083a2:	4614      	mov	r4, r2
 80083a4:	f7ff ffc4 	bl	8008330 <Display::TextStatus(char const*)>
 80083a8:	7c6b      	ldrb	r3, [r5, #17]
 80083aa:	b19b      	cbz	r3, 80083d4 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x3a>
 80083ac:	43e2      	mvns	r2, r4
 80083ae:	2312      	movs	r3, #18
 80083b0:	7a28      	ldrb	r0, [r5, #8]
 80083b2:	f88d 3004 	strb.w	r3, [sp, #4]
 80083b6:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80083ba:	f88d 3005 	strb.w	r3, [sp, #5]
 80083be:	f88d 2006 	strb.w	r2, [sp, #6]
 80083c2:	f00d f8b7 	bl	8015534 <gd32_i2c_set_address>
 80083c6:	68e8      	ldr	r0, [r5, #12]
 80083c8:	f00d f8ac 	bl	8015524 <gd32_i2c_set_baudrate>
 80083cc:	2103      	movs	r1, #3
 80083ce:	a801      	add	r0, sp, #4
 80083d0:	f00d f8b6 	bl	8015540 <gd32_i2c_write>
 80083d4:	1c73      	adds	r3, r6, #1
 80083d6:	d006      	beq.n	80083e6 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x4c>
 80083d8:	4639      	mov	r1, r7
 80083da:	4630      	mov	r0, r6
 80083dc:	b003      	add	sp, #12
 80083de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80083e2:	f00b bc59 	b.w	8013c98 <console_status>
 80083e6:	b003      	add	sp, #12
 80083e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080083ec <Display::SetSleep(bool)>:
 80083ec:	b538      	push	{r3, r4, r5, lr}
 80083ee:	4604      	mov	r4, r0
 80083f0:	6980      	ldr	r0, [r0, #24]
 80083f2:	460d      	mov	r5, r1
 80083f4:	b138      	cbz	r0, 8008406 <Display::SetSleep(bool)+0x1a>
 80083f6:	6803      	ldr	r3, [r0, #0]
 80083f8:	7421      	strb	r1, [r4, #16]
 80083fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083fc:	4798      	blx	r3
 80083fe:	b915      	cbnz	r5, 8008406 <Display::SetSleep(bool)+0x1a>
 8008400:	4b01      	ldr	r3, [pc, #4]	; (8008408 <Display::SetSleep(bool)+0x1c>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	6063      	str	r3, [r4, #4]
 8008406:	bd38      	pop	{r3, r4, r5, pc}
 8008408:	20009d6c 	andcs	r9, r0, ip, ror #26

0800840c <display::timeout::gpio_init()>:
 800840c:	b510      	push	{r4, lr}
 800840e:	f240 6003 	movw	r0, #1539	; 0x603
 8008412:	f00c fd23 	bl	8014e5c <rcu_periph_clock_enable>
 8008416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800841a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800841e:	2203      	movs	r2, #3
 8008420:	2148      	movs	r1, #72	; 0x48
 8008422:	4801      	ldr	r0, [pc, #4]	; (8008428 <display::timeout::gpio_init()+0x1c>)
 8008424:	f00c bc82 	b.w	8014d2c <gpio_init>
 8008428:	40010c00 	andmi	r0, r1, r0, lsl #24

0800842c <display::timeout::gpio_renew()>:
 800842c:	4b03      	ldr	r3, [pc, #12]	; (800843c <display::timeout::gpio_renew()+0x10>)
 800842e:	f8d3 0c08 	ldr.w	r0, [r3, #3080]	; 0xc08
 8008432:	f480 4080 	eor.w	r0, r0, #16384	; 0x4000
 8008436:	f3c0 3080 	ubfx	r0, r0, #14, #1
 800843a:	4770      	bx	lr
 800843c:	40010000 	andmi	r0, r1, r0

08008440 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>:
 8008440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008442:	2905      	cmp	r1, #5
 8008444:	b085      	sub	sp, #20
 8008446:	dc51      	bgt.n	80084ec <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xac>
 8008448:	4b2a      	ldr	r3, [pc, #168]	; (80084f4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xb4>)
 800844a:	6019      	str	r1, [r3, #0]
 800844c:	2905      	cmp	r1, #5
 800844e:	d809      	bhi.n	8008464 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8008450:	e8df f001 	tbb	[pc, r1]
 8008454:	130a032c 	movwne	r0, #41772	; 0xa32c
 8008458:	2300211a 	movwcs	r2, #282	; 0x11a
 800845c:	2264      	movs	r2, #100	; 0x64
 800845e:	4619      	mov	r1, r3
 8008460:	f006 fc56 	bl	800ed10 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 8008464:	2001      	movs	r0, #1
 8008466:	e042      	b.n	80084ee <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xae>
 8008468:	2200      	movs	r2, #0
 800846a:	2364      	movs	r3, #100	; 0x64
 800846c:	4611      	mov	r1, r2
 800846e:	e9cd 3200 	strd	r3, r2, [sp]
 8008472:	4b21      	ldr	r3, [pc, #132]	; (80084f8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xb8>)
 8008474:	f006 fc60 	bl	800ed38 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8008478:	e7f4      	b.n	8008464 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 800847a:	2100      	movs	r1, #0
 800847c:	2364      	movs	r3, #100	; 0x64
 800847e:	4a1e      	ldr	r2, [pc, #120]	; (80084f8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xb8>)
 8008480:	9100      	str	r1, [sp, #0]
 8008482:	f006 fc75 	bl	800ed70 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8008486:	e7ed      	b.n	8008464 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8008488:	2364      	movs	r3, #100	; 0x64
 800848a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800848e:	2100      	movs	r1, #0
 8008490:	f006 fc88 	bl	800eda4 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 8008494:	e7e6      	b.n	8008464 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8008496:	2200      	movs	r2, #0
 8008498:	2364      	movs	r3, #100	; 0x64
 800849a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800849e:	230a      	movs	r3, #10
 80084a0:	4611      	mov	r1, r2
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	4b14      	ldr	r3, [pc, #80]	; (80084f8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xb8>)
 80084a6:	f006 fcaf 	bl	800ee08 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 80084aa:	e7db      	b.n	8008464 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 80084ac:	2400      	movs	r4, #0
 80084ae:	4625      	mov	r5, r4
 80084b0:	4b12      	ldr	r3, [pc, #72]	; (80084fc <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xbc>)
 80084b2:	4f13      	ldr	r7, [pc, #76]	; (8008500 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc0>)
 80084b4:	4e13      	ldr	r6, [pc, #76]	; (8008504 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc4>)
 80084b6:	61dc      	str	r4, [r3, #28]
 80084b8:	6833      	ldr	r3, [r6, #0]
 80084ba:	6838      	ldr	r0, [r7, #0]
 80084bc:	429c      	cmp	r4, r3
 80084be:	d302      	bcc.n	80084c6 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x86>
 80084c0:	f007 fbfe 	bl	800fcc0 <WS28xx::Update()>
 80084c4:	e7ce      	b.n	8008464 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 80084c6:	6803      	ldr	r3, [r0, #0]
 80084c8:	2b07      	cmp	r3, #7
 80084ca:	d007      	beq.n	80084dc <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x9c>
 80084cc:	2300      	movs	r3, #0
 80084ce:	4621      	mov	r1, r4
 80084d0:	461a      	mov	r2, r3
 80084d2:	9500      	str	r5, [sp, #0]
 80084d4:	f006 fe52 	bl	800f17c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 80084d8:	3401      	adds	r4, #1
 80084da:	e7ed      	b.n	80084b8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x78>
 80084dc:	2300      	movs	r3, #0
 80084de:	4621      	mov	r1, r4
 80084e0:	461a      	mov	r2, r3
 80084e2:	e9cd 5500 	strd	r5, r5, [sp]
 80084e6:	f007 fa7b 	bl	800f9e0 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 80084ea:	e7f5      	b.n	80084d8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x98>
 80084ec:	2000      	movs	r0, #0
 80084ee:	b005      	add	sp, #20
 80084f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084f2:	bf00      	nop
 80084f4:	2000191c 	andcs	r1, r0, ip, lsl r9
 80084f8:	00646464 	rsbeq	r6, r4, r4, ror #8
 80084fc:	200018e8 	andcs	r1, r0, r8, ror #17
 8008500:	20001914 	andcs	r1, r0, r4, lsl r9
 8008504:	20001910 	andcs	r1, r0, r0, lsl r9

08008508 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)>:
 8008508:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800850a:	780b      	ldrb	r3, [r1, #0]
 800850c:	4605      	mov	r5, r0
 800850e:	2b03      	cmp	r3, #3
 8008510:	d11f      	bne.n	8008552 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4a>
 8008512:	4b18      	ldr	r3, [pc, #96]	; (8008574 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x6c>)
 8008514:	784c      	ldrb	r4, [r1, #1]
 8008516:	6818      	ldr	r0, [r3, #0]
 8008518:	4b17      	ldr	r3, [pc, #92]	; (8008578 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x70>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	429c      	cmp	r4, r3
 800851e:	d018      	beq.n	8008552 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4a>
 8008520:	4621      	mov	r1, r4
 8008522:	f7ff ff8d 	bl	8008440 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 8008526:	b1a0      	cbz	r0, 8008552 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4a>
 8008528:	4e14      	ldr	r6, [pc, #80]	; (800857c <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x74>)
 800852a:	b1a4      	cbz	r4, 8008556 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4e>
 800852c:	2200      	movs	r2, #0
 800852e:	6833      	ldr	r3, [r6, #0]
 8008530:	4d13      	ldr	r5, [pc, #76]	; (8008580 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x78>)
 8008532:	605a      	str	r2, [r3, #4]
 8008534:	2106      	movs	r1, #6
 8008536:	6828      	ldr	r0, [r5, #0]
 8008538:	f7ff fed8 	bl	80082ec <Display::ClearLine(unsigned char)>
 800853c:	4620      	mov	r0, r4
 800853e:	682d      	ldr	r5, [r5, #0]
 8008540:	f006 fbda 	bl	800ecf8 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8008544:	2106      	movs	r1, #6
 8008546:	4603      	mov	r3, r0
 8008548:	4a0e      	ldr	r2, [pc, #56]	; (8008584 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x7c>)
 800854a:	4628      	mov	r0, r5
 800854c:	9400      	str	r4, [sp, #0]
 800854e:	f7ff fed3 	bl	80082f8 <Display::Printf(unsigned char, char const*, ...)>
 8008552:	b002      	add	sp, #8
 8008554:	bd70      	pop	{r4, r5, r6, pc}
 8008556:	6868      	ldr	r0, [r5, #4]
 8008558:	2101      	movs	r1, #1
 800855a:	6803      	ldr	r3, [r0, #0]
 800855c:	695b      	ldr	r3, [r3, #20]
 800855e:	4798      	blx	r3
 8008560:	6833      	ldr	r3, [r6, #0]
 8008562:	686a      	ldr	r2, [r5, #4]
 8008564:	605a      	str	r2, [r3, #4]
 8008566:	4b08      	ldr	r3, [pc, #32]	; (8008588 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x80>)
 8008568:	6818      	ldr	r0, [r3, #0]
 800856a:	b002      	add	sp, #8
 800856c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008570:	f009 bbc8 	b.w	8011d04 <DisplayUdf::Show()>
 8008574:	20001918 	andcs	r1, r0, r8, lsl r9
 8008578:	2000191c 	andcs	r1, r0, ip, lsl r9
 800857c:	200018c4 	andcs	r1, r0, r4, asr #17
 8008580:	20009c68 	andcs	r9, r0, r8, ror #24
 8008584:	080161d1 	stmdaeq	r1, {r0, r4, r6, r7, r8, sp, lr}
 8008588:	20008c0c 	andcs	r8, r0, ip, lsl #24

0800858c <Hardware::RebootHandler()>:
 800858c:	b508      	push	{r3, lr}
 800858e:	4b05      	ldr	r3, [pc, #20]	; (80085a4 <Hardware::RebootHandler()+0x18>)
 8008590:	6818      	ldr	r0, [r3, #0]
 8008592:	f007 fbb1 	bl	800fcf8 <WS28xx::Blackout()>
 8008596:	4b04      	ldr	r3, [pc, #16]	; (80085a8 <Hardware::RebootHandler()+0x1c>)
 8008598:	6818      	ldr	r0, [r3, #0]
 800859a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800859e:	f001 becd 	b.w	800a33c <ArtNetNode::Stop()>
 80085a2:	bf00      	nop
 80085a4:	20001924 	andcs	r1, r0, r4, lsr #18
 80085a8:	200018c4 	andcs	r1, r0, r4, asr #17

080085ac <main>:
 80085ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085b0:	f5ad 5da3 	sub.w	sp, sp, #5216	; 0x1460
 80085b4:	b082      	sub	sp, #8
 80085b6:	a806      	add	r0, sp, #24
 80085b8:	f00b fc22 	bl	8013e00 <Hardware::Hardware()>
 80085bc:	a89a      	add	r0, sp, #616	; 0x268
 80085be:	f008 fa49 	bl	8010a54 <Network::Network()>
 80085c2:	a815      	add	r0, sp, #84	; 0x54
 80085c4:	f00b fbc6 	bl	8013d54 <LedBlink::LedBlink()>
 80085c8:	a84a      	add	r0, sp, #296	; 0x128
 80085ca:	f009 fac3 	bl	8011b54 <DisplayUdf::DisplayUdf()>
 80085ce:	4ab4      	ldr	r2, [pc, #720]	; (80088a0 <main+0x2f4>)
 80085d0:	4bb4      	ldr	r3, [pc, #720]	; (80088a4 <main+0x2f8>)
 80085d2:	49b5      	ldr	r1, [pc, #724]	; (80088a8 <main+0x2fc>)
 80085d4:	a807      	add	r0, sp, #28
 80085d6:	f00b fb77 	bl	8013cc8 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
 80085da:	a80a      	add	r0, sp, #40	; 0x28
 80085dc:	f009 ffc0 	bl	8012560 <ConfigStore::ConfigStore()>
 80085e0:	49b2      	ldr	r1, [pc, #712]	; (80088ac <main+0x300>)
 80085e2:	a807      	add	r0, sp, #28
 80085e4:	f00b fba8 	bl	8013d38 <FirmwareVersion::Print(char const*)>
 80085e8:	2301      	movs	r3, #1
 80085ea:	4db1      	ldr	r5, [pc, #708]	; (80088b0 <main+0x304>)
 80085ec:	2008      	movs	r0, #8
 80085ee:	612b      	str	r3, [r5, #16]
 80085f0:	f00b fcb4 	bl	8013f5c <operator new(unsigned int)>
 80085f4:	4baf      	ldr	r3, [pc, #700]	; (80088b4 <main+0x308>)
 80085f6:	6003      	str	r3, [r0, #0]
 80085f8:	4baf      	ldr	r3, [pc, #700]	; (80088b8 <main+0x30c>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	bf14      	ite	ne
 8008600:	2201      	movne	r2, #1
 8008602:	2200      	moveq	r2, #0
 8008604:	7102      	strb	r2, [r0, #4]
 8008606:	d004      	beq.n	8008612 <main+0x66>
 8008608:	699b      	ldr	r3, [r3, #24]
 800860a:	3b00      	subs	r3, #0
 800860c:	bf18      	it	ne
 800860e:	2301      	movne	r3, #1
 8008610:	7103      	strb	r3, [r0, #4]
 8008612:	2400      	movs	r4, #0
 8008614:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008618:	49a8      	ldr	r1, [pc, #672]	; (80088bc <main+0x310>)
 800861a:	9017      	str	r0, [sp, #92]	; 0x5c
 800861c:	ab15      	add	r3, sp, #84	; 0x54
 800861e:	a84a      	add	r0, sp, #296	; 0x128
 8008620:	2303      	movs	r3, #3
 8008622:	f7ff feba 	bl	800839a <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008626:	a80d      	add	r0, sp, #52	; 0x34
 8008628:	f00a f972 	bl	8012910 <StoreNetwork::StoreNetwork()>
 800862c:	ab0e      	add	r3, sp, #56	; 0x38
 800862e:	a90d      	add	r1, sp, #52	; 0x34
 8008630:	a89a      	add	r0, sp, #616	; 0x268
 8008632:	93c8      	str	r3, [sp, #800]	; 0x320
 8008634:	f008 fa66 	bl	8010b04 <Network::Init(NetworkParamsStore*)>
 8008638:	a89a      	add	r0, sp, #616	; 0x268
 800863a:	f008 fc33 	bl	8010ea4 <Network::Print()>
 800863e:	2303      	movs	r3, #3
 8008640:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008644:	499e      	ldr	r1, [pc, #632]	; (80088c0 <main+0x314>)
 8008646:	a84a      	add	r0, sp, #296	; 0x128
 8008648:	f7ff fea7 	bl	800839a <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 800864c:	a808      	add	r0, sp, #32
 800864e:	f007 fe43 	bl	80102d8 <MDNS::MDNS()>
 8008652:	a808      	add	r0, sp, #32
 8008654:	f007 ff00 	bl	8010458 <MDNS::Start()>
 8008658:	f642 1305 	movw	r3, #10501	; 0x2905
 800865c:	4621      	mov	r1, r4
 800865e:	4a99      	ldr	r2, [pc, #612]	; (80088c4 <main+0x318>)
 8008660:	e9cd 4400 	strd	r4, r4, [sp]
 8008664:	a808      	add	r0, sp, #32
 8008666:	f008 f861 	bl	801072c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 800866a:	a808      	add	r0, sp, #32
 800866c:	f008 f9a4 	bl	80109b8 <MDNS::Print()>
 8008670:	2303      	movs	r3, #3
 8008672:	f44f 42cc 	mov.w	r2, #26112	; 0x6600
 8008676:	4994      	ldr	r1, [pc, #592]	; (80088c8 <main+0x31c>)
 8008678:	a84a      	add	r0, sp, #296	; 0x128
 800867a:	f7ff fe8e 	bl	800839a <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 800867e:	4621      	mov	r1, r4
 8008680:	a80f      	add	r0, sp, #60	; 0x3c
 8008682:	f00a fb03 	bl	8012c8c <StoreArtNet::StoreArtNet(unsigned int)>
 8008686:	a90f      	add	r1, sp, #60	; 0x3c
 8008688:	a877      	add	r0, sp, #476	; 0x1dc
 800868a:	f003 fc1f 	bl	800becc <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 800868e:	a8cc      	add	r0, sp, #816	; 0x330
 8008690:	f001 fd76 	bl	800a180 <ArtNet4Node::ArtNet4Node()>
 8008694:	a877      	add	r0, sp, #476	; 0x1dc
 8008696:	f003 fc39 	bl	800bf0c <ArtNetParams::Load()>
 800869a:	b130      	cbz	r0, 80086aa <main+0xfe>
 800869c:	a877      	add	r0, sp, #476	; 0x1dc
 800869e:	4621      	mov	r1, r4
 80086a0:	f003 ffd4 	bl	800c64c <ArtNetParams::Set(unsigned int)>
 80086a4:	a877      	add	r0, sp, #476	; 0x1dc
 80086a6:	f004 f865 	bl	800c774 <ArtNetParams::Dump()>
 80086aa:	abcc      	add	r3, sp, #816	; 0x330
 80086ac:	aa10      	add	r2, sp, #64	; 0x40
 80086ae:	621a      	str	r2, [r3, #32]
 80086b0:	21aa      	movs	r1, #170	; 0xaa
 80086b2:	2203      	movs	r2, #3
 80086b4:	ab3e      	add	r3, sp, #248	; 0xf8
 80086b6:	e9c3 2100 	strd	r2, r1, [r3]
 80086ba:	2006      	movs	r0, #6
 80086bc:	2200      	movs	r2, #0
 80086be:	e9c3 0202 	strd	r0, r2, [r3, #8]
 80086c2:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80086c6:	611a      	str	r2, [r3, #16]
 80086c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086cc:	829a      	strh	r2, [r3, #20]
 80086ce:	4a7f      	ldr	r2, [pc, #508]	; (80088cc <main+0x320>)
 80086d0:	6259      	str	r1, [r3, #36]	; 0x24
 80086d2:	619a      	str	r2, [r3, #24]
 80086d4:	2201      	movs	r2, #1
 80086d6:	a811      	add	r0, sp, #68	; 0x44
 80086d8:	e9c3 2207 	strd	r2, r2, [r3, #28]
 80086dc:	859a      	strh	r2, [r3, #44]	; 0x2c
 80086de:	f00a fbb9 	bl	8012e54 <StorePixelDmx::StorePixelDmx()>
 80086e2:	a911      	add	r1, sp, #68	; 0x44
 80086e4:	a81b      	add	r0, sp, #108	; 0x6c
 80086e6:	f005 fd7b 	bl	800e1e0 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>
 80086ea:	a81b      	add	r0, sp, #108	; 0x6c
 80086ec:	f005 fd8e 	bl	800e20c <PixelDmxParams::Load()>
 80086f0:	b130      	cbz	r0, 8008700 <main+0x154>
 80086f2:	a81b      	add	r0, sp, #108	; 0x6c
 80086f4:	a93e      	add	r1, sp, #248	; 0xf8
 80086f6:	f006 f87c 	bl	800e7f2 <PixelDmxParams::Set(PixelDmxConfiguration*)>
 80086fa:	a81b      	add	r0, sp, #108	; 0x6c
 80086fc:	f006 f8b6 	bl	800e86c <PixelDmxParams::Dump()>
 8008700:	ae60      	add	r6, sp, #384	; 0x180
 8008702:	a93e      	add	r1, sp, #248	; 0xf8
 8008704:	4630      	mov	r0, r6
 8008706:	f005 fc77 	bl	800dff8 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>
 800870a:	2004      	movs	r0, #4
 800870c:	f00b fc26 	bl	8013f5c <operator new(unsigned int)>
 8008710:	4b6f      	ldr	r3, [pc, #444]	; (80088d0 <main+0x324>)
 8008712:	4604      	mov	r4, r0
 8008714:	6003      	str	r3, [r0, #0]
 8008716:	2203      	movs	r2, #3
 8008718:	2304      	movs	r3, #4
 800871a:	2110      	movs	r1, #16
 800871c:	4864      	ldr	r0, [pc, #400]	; (80088b0 <main+0x304>)
 800871e:	f00c fb05 	bl	8014d2c <gpio_init>
 8008722:	2304      	movs	r3, #4
 8008724:	616b      	str	r3, [r5, #20]
 8008726:	6574      	str	r4, [r6, #84]	; 0x54
 8008728:	2400      	movs	r4, #0
 800872a:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800872c:	f8d6 802c 	ldr.w	r8, [r6, #44]	; 0x2c
 8008730:	f8bd 9086 	ldrh.w	r9, [sp, #134]	; 0x86
 8008734:	ab1b      	add	r3, sp, #108	; 0x6c
 8008736:	f407 5780 	and.w	r7, r7, #4096	; 0x1000
 800873a:	f50d 7a4d 	add.w	sl, sp, #820	; 0x334
 800873e:	4544      	cmp	r4, r8
 8008740:	f040 811e 	bne.w	8008980 <main+0x3d4>
 8008744:	f89d 4080 	ldrb.w	r4, [sp, #128]	; 0x80
 8008748:	2101      	movs	r1, #1
 800874a:	4f62      	ldr	r7, [pc, #392]	; (80088d4 <main+0x328>)
 800874c:	a809      	add	r0, sp, #36	; 0x24
 800874e:	ab1b      	add	r3, sp, #108	; 0x6c
 8008750:	f006 fab2 	bl	800ecb8 <PixelPatterns::PixelPatterns(unsigned int)>
 8008754:	4621      	mov	r1, r4
 8008756:	a809      	add	r0, sp, #36	; 0x24
 8008758:	603c      	str	r4, [r7, #0]
 800875a:	f7ff fe71 	bl	8008440 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	a8cc      	add	r0, sp, #816	; 0x330
 8008762:	2b00      	cmp	r3, #0
 8008764:	bf0c      	ite	eq
 8008766:	4632      	moveq	r2, r6
 8008768:	2200      	movne	r2, #0
 800876a:	92ce      	str	r2, [sp, #824]	; 0x338
 800876c:	4a5a      	ldr	r2, [pc, #360]	; (80088d8 <main+0x32c>)
 800876e:	abcc      	add	r3, sp, #816	; 0x330
 8008770:	ab13      	add	r3, sp, #76	; 0x4c
 8008772:	e9c3 2600 	strd	r2, r6, [r3]
 8008776:	4b59      	ldr	r3, [pc, #356]	; (80088dc <main+0x330>)
 8008778:	ae3e      	add	r6, sp, #248	; 0xf8
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	ab13      	add	r3, sp, #76	; 0x4c
 800877e:	6153      	str	r3, [r2, #20]
 8008780:	f001 fd4e 	bl	800a220 <ArtNet4Node::Print()>
 8008784:	a861      	add	r0, sp, #388	; 0x184
 8008786:	f005 fb09 	bl	800dd9c <PixelDmxConfiguration::Print()>
 800878a:	4955      	ldr	r1, [pc, #340]	; (80088e0 <main+0x334>)
 800878c:	a84a      	add	r0, sp, #296	; 0x128
 800878e:	f009 f9f7 	bl	8011b80 <DisplayUdf::SetTitle(char const*, ...)>
 8008792:	2202      	movs	r2, #2
 8008794:	a84a      	add	r0, sp, #296	; 0x128
 8008796:	4611      	mov	r1, r2
 8008798:	f009 fa05 	bl	8011ba6 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 800879c:	2206      	movs	r2, #6
 800879e:	2103      	movs	r1, #3
 80087a0:	a84a      	add	r0, sp, #296	; 0x128
 80087a2:	f009 fa00 	bl	8011ba6 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80087a6:	2203      	movs	r2, #3
 80087a8:	2104      	movs	r1, #4
 80087aa:	a84a      	add	r0, sp, #296	; 0x128
 80087ac:	f009 f9fb 	bl	8011ba6 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80087b0:	2208      	movs	r2, #8
 80087b2:	2105      	movs	r1, #5
 80087b4:	a84a      	add	r0, sp, #296	; 0x128
 80087b6:	f009 f9f6 	bl	8011ba6 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80087ba:	2201      	movs	r2, #1
 80087bc:	2106      	movs	r1, #6
 80087be:	a84a      	add	r0, sp, #296	; 0x128
 80087c0:	f009 f9f1 	bl	8011ba6 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80087c4:	6830      	ldr	r0, [r6, #0]
 80087c6:	f006 f959 	bl	800ea7c <PixelType::GetType(pixel::Type)>
 80087ca:	4680      	mov	r8, r0
 80087cc:	68b0      	ldr	r0, [r6, #8]
 80087ce:	f8d6 9004 	ldr.w	r9, [r6, #4]
 80087d2:	f8d6 a020 	ldr.w	sl, [r6, #32]
 80087d6:	f006 f9a9 	bl	800eb2c <PixelType::GetMap(pixel::Map)>
 80087da:	4643      	mov	r3, r8
 80087dc:	2107      	movs	r1, #7
 80087de:	4a41      	ldr	r2, [pc, #260]	; (80088e4 <main+0x338>)
 80087e0:	e9cd a001 	strd	sl, r0, [sp, #4]
 80087e4:	f8cd 9000 	str.w	r9, [sp]
 80087e8:	a84a      	add	r0, sp, #296	; 0x128
 80087ea:	f7ff fd85 	bl	80082f8 <Display::Printf(unsigned char, char const*, ...)>
 80087ee:	a80b      	add	r0, sp, #44	; 0x2c
 80087f0:	f009 ffe0 	bl	80127b4 <StoreDisplayUdf::StoreDisplayUdf()>
 80087f4:	a90b      	add	r1, sp, #44	; 0x2c
 80087f6:	a834      	add	r0, sp, #208	; 0xd0
 80087f8:	f009 fb56 	bl	8011ea8 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 80087fc:	a834      	add	r0, sp, #208	; 0xd0
 80087fe:	f009 fb60 	bl	8011ec2 <DisplayUdfParams::Load()>
 8008802:	b130      	cbz	r0, 8008812 <main+0x266>
 8008804:	a834      	add	r0, sp, #208	; 0xd0
 8008806:	f009 fcc7 	bl	8012198 <DisplayUdfParams::Dump()>
 800880a:	a94a      	add	r1, sp, #296	; 0x128
 800880c:	a834      	add	r0, sp, #208	; 0xd0
 800880e:	f009 fc90 	bl	8012132 <DisplayUdfParams::Set(DisplayUdf*)>
 8008812:	a9cd      	add	r1, sp, #820	; 0x334
 8008814:	a84a      	add	r0, sp, #296	; 0x128
 8008816:	f009 fd9f 	bl	8012358 <DisplayUdf::Show(ArtNetNode*)>
 800881a:	b16c      	cbz	r4, 8008838 <main+0x28c>
 800881c:	2106      	movs	r1, #6
 800881e:	a84a      	add	r0, sp, #296	; 0x128
 8008820:	f7ff fd64 	bl	80082ec <Display::ClearLine(unsigned char)>
 8008824:	4620      	mov	r0, r4
 8008826:	f006 fa67 	bl	800ecf8 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 800882a:	2106      	movs	r1, #6
 800882c:	4603      	mov	r3, r0
 800882e:	4a2e      	ldr	r2, [pc, #184]	; (80088e8 <main+0x33c>)
 8008830:	9400      	str	r4, [sp, #0]
 8008832:	a84a      	add	r0, sp, #296	; 0x128
 8008834:	f7ff fd60 	bl	80082f8 <Display::Printf(unsigned char, char const*, ...)>
 8008838:	2203      	movs	r2, #3
 800883a:	2100      	movs	r1, #0
 800883c:	f89d 3d2e 	ldrb.w	r3, [sp, #3374]	; 0xd2e
 8008840:	a822      	add	r0, sp, #136	; 0x88
 8008842:	f000 fec7 	bl	80095d4 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>
 8008846:	ab0c      	add	r3, sp, #48	; 0x30
 8008848:	4618      	mov	r0, r3
 800884a:	9305      	str	r3, [sp, #20]
 800884c:	f00a f898 	bl	8012980 <StoreRemoteConfig::StoreRemoteConfig()>
 8008850:	9905      	ldr	r1, [sp, #20]
 8008852:	a82b      	add	r0, sp, #172	; 0xac
 8008854:	f001 f9a0 	bl	8009b98 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 8008858:	a82b      	add	r0, sp, #172	; 0xac
 800885a:	f001 f9a7 	bl	8009bac <RemoteConfigParams::Load()>
 800885e:	b130      	cbz	r0, 800886e <main+0x2c2>
 8008860:	a82b      	add	r0, sp, #172	; 0xac
 8008862:	f001 faea 	bl	8009e3a <RemoteConfigParams::Dump()>
 8008866:	a922      	add	r1, sp, #136	; 0x88
 8008868:	a82b      	add	r0, sp, #172	; 0xac
 800886a:	f001 fac6 	bl	8009dfa <RemoteConfigParams::Set(RemoteConfig*)>
 800886e:	a80a      	add	r0, sp, #40	; 0x28
 8008870:	f009 ff1e 	bl	80126b0 <ConfigStore::Flash()>
 8008874:	2800      	cmp	r0, #0
 8008876:	d1fa      	bne.n	800886e <main+0x2c2>
 8008878:	2303      	movs	r3, #3
 800887a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800887e:	491b      	ldr	r1, [pc, #108]	; (80088ec <main+0x340>)
 8008880:	a84a      	add	r0, sp, #296	; 0x128
 8008882:	f7ff fd8a 	bl	800839a <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008886:	a8cc      	add	r0, sp, #816	; 0x330
 8008888:	f001 fc8a 	bl	800a1a0 <ArtNet4Node::Start()>
 800888c:	f248 0280 	movw	r2, #32896	; 0x8080
 8008890:	2302      	movs	r3, #2
 8008892:	4917      	ldr	r1, [pc, #92]	; (80088f0 <main+0x344>)
 8008894:	a84a      	add	r0, sp, #296	; 0x128
 8008896:	f7ff fd80 	bl	800839a <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 800889a:	2102      	movs	r1, #2
 800889c:	e02a      	b.n	80088f4 <main+0x348>
 800889e:	bf00      	nop
 80088a0:	080161e0 	stmdaeq	r1, {r5, r6, r7, r8, sp, lr}
 80088a4:	080161d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r8, sp, lr}
 80088a8:	08016291 	stmdaeq	r1, {r0, r4, r7, r9, sp, lr}
 80088ac:	080161ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, sp, lr}
 80088b0:	40011000 	andmi	r1, r1, r0
 80088b4:	08016254 	stmdaeq	r1, {r2, r4, r6, r9, sp, lr}
 80088b8:	20009c68 	andcs	r9, r0, r8, ror #24
 80088bc:	080178d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, fp, ip, sp, lr}
 80088c0:	080178c6 	stmdaeq	r1, {r1, r2, r6, r7, fp, ip, sp, lr}
 80088c4:	08016222 	stmdaeq	r1, {r1, r5, r9, sp, lr}
 80088c8:	08016865 	stmdaeq	r1, {r0, r2, r5, r6, fp, sp, lr}
 80088cc:	08016295 	stmdaeq	r1, {r0, r2, r4, r7, r9, sp, lr}
 80088d0:	0801627c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r9, sp, lr}
 80088d4:	2000191c 	andcs	r1, r0, ip, lsl r9
 80088d8:	08016268 	stmdaeq	r1, {r3, r5, r6, r9, sp, lr}
 80088dc:	200018c4 	andcs	r1, r0, r4, asr #17
 80088e0:	0801622b 	stmdaeq	r1, {r0, r1, r3, r5, r9, sp, lr}
 80088e4:	0801623d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r9, sp, lr}
 80088e8:	080161d1 	stmdaeq	r1, {r0, r4, r6, r7, r8, sp, lr}
 80088ec:	08016854 	stmdaeq	r1, {r2, r4, r6, fp, sp, lr}
 80088f0:	08016879 	stmdaeq	r1, {r0, r3, r4, r5, r6, fp, sp, lr}
 80088f4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80088f8:	f00c f9ee 	bl	8014cd8 <fwdgt_config>
 80088fc:	2801      	cmp	r0, #1
 80088fe:	bf0c      	ite	eq
 8008900:	2201      	moveq	r2, #1
 8008902:	2200      	movne	r2, #0
 8008904:	ab06      	add	r3, sp, #24
 8008906:	701a      	strb	r2, [r3, #0]
 8008908:	d101      	bne.n	800890e <main+0x362>
 800890a:	f00c f9d5 	bl	8014cb8 <fwdgt_enable>
 800890e:	2601      	movs	r6, #1
 8008910:	4c24      	ldr	r4, [pc, #144]	; (80089a4 <main+0x3f8>)
 8008912:	f00c f9d9 	bl	8014cc8 <fwdgt_counter_reload>
 8008916:	f7fe fe03 	bl	8007520 <net_handle>
 800891a:	a8cc      	add	r0, sp, #816	; 0x330
 800891c:	f001 fc71 	bl	800a202 <ArtNet4Node::Run()>
 8008920:	a822      	add	r0, sp, #136	; 0x88
 8008922:	f000 ffe9 	bl	80098f8 <RemoteConfig::Run()>
 8008926:	a80a      	add	r0, sp, #40	; 0x28
 8008928:	f009 fec2 	bl	80126b0 <ConfigStore::Flash()>
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	b113      	cbz	r3, 8008936 <main+0x38a>
 8008930:	a809      	add	r0, sp, #36	; 0x24
 8008932:	f006 fbfb 	bl	800f12c <PixelPatterns::Run()>
 8008936:	a808      	add	r0, sp, #32
 8008938:	f008 f81a 	bl	8010970 <MDNS::Run()>
 800893c:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
 800893e:	b15a      	cbz	r2, 8008958 <main+0x3ac>
 8008940:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 8008944:	bb3b      	cbnz	r3, 8008996 <main+0x3ea>
 8008946:	6823      	ldr	r3, [r4, #0]
 8008948:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800894a:	1a5b      	subs	r3, r3, r1
 800894c:	429a      	cmp	r2, r3
 800894e:	d203      	bcs.n	8008958 <main+0x3ac>
 8008950:	2101      	movs	r1, #1
 8008952:	a84a      	add	r0, sp, #296	; 0x128
 8008954:	f7ff fd4a 	bl	80083ec <Display::SetSleep(bool)>
 8008958:	9918      	ldr	r1, [sp, #96]	; 0x60
 800895a:	ab15      	add	r3, sp, #84	; 0x54
 800895c:	2900      	cmp	r1, #0
 800895e:	d0d8      	beq.n	8008912 <main+0x366>
 8008960:	6822      	ldr	r2, [r4, #0]
 8008962:	6958      	ldr	r0, [r3, #20]
 8008964:	1a12      	subs	r2, r2, r0
 8008966:	4291      	cmp	r1, r2
 8008968:	d8d3      	bhi.n	8008912 <main+0x366>
 800896a:	6822      	ldr	r2, [r4, #0]
 800896c:	615a      	str	r2, [r3, #20]
 800896e:	691a      	ldr	r2, [r3, #16]
 8008970:	2a01      	cmp	r2, #1
 8008972:	f082 0101 	eor.w	r1, r2, #1
 8008976:	6119      	str	r1, [r3, #16]
 8008978:	bf14      	ite	ne
 800897a:	612e      	strne	r6, [r5, #16]
 800897c:	616a      	streq	r2, [r5, #20]
 800897e:	e7c8      	b.n	8008912 <main+0x366>
 8008980:	b13f      	cbz	r7, 8008992 <main+0x3e6>
 8008982:	eb09 0304 	add.w	r3, r9, r4
 8008986:	2201      	movs	r2, #1
 8008988:	4621      	mov	r1, r4
 800898a:	4650      	mov	r0, sl
 800898c:	b29b      	uxth	r3, r3
 800898e:	f002 f833 	bl	800a9f8 <ArtNetNode::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 8008992:	3401      	adds	r4, #1
 8008994:	e6d3      	b.n	800873e <main+0x192>
 8008996:	f7ff fd49 	bl	800842c <display::timeout::gpio_renew()>
 800899a:	2800      	cmp	r0, #0
 800899c:	d0dc      	beq.n	8008958 <main+0x3ac>
 800899e:	2100      	movs	r1, #0
 80089a0:	e7d7      	b.n	8008952 <main+0x3a6>
 80089a2:	bf00      	nop
 80089a4:	20009d6c 	andcs	r9, r0, ip, ror #26

080089a8 <_itostr>:
 80089a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089aa:	0fc7      	lsrs	r7, r0, #31
 80089ac:	b091      	sub	sp, #68	; 0x44
 80089ae:	bf18      	it	ne
 80089b0:	4240      	negne	r0, r0
 80089b2:	f10d 043f 	add.w	r4, sp, #63	; 0x3f
 80089b6:	b9c8      	cbnz	r0, 80089ec <_itostr+0x44>
 80089b8:	2330      	movs	r3, #48	; 0x30
 80089ba:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 80089be:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 80089c2:	b132      	cbz	r2, 80089d2 <_itostr+0x2a>
 80089c4:	4668      	mov	r0, sp
 80089c6:	2530      	movs	r5, #48	; 0x30
 80089c8:	1ae6      	subs	r6, r4, r3
 80089ca:	4296      	cmp	r6, r2
 80089cc:	da01      	bge.n	80089d2 <_itostr+0x2a>
 80089ce:	4283      	cmp	r3, r0
 80089d0:	d81c      	bhi.n	8008a0c <_itostr+0x64>
 80089d2:	b117      	cbz	r7, 80089da <_itostr+0x32>
 80089d4:	222d      	movs	r2, #45	; 0x2d
 80089d6:	f803 2901 	strb.w	r2, [r3], #-1
 80089da:	3301      	adds	r3, #1
 80089dc:	1ae0      	subs	r0, r4, r3
 80089de:	3901      	subs	r1, #1
 80089e0:	aa10      	add	r2, sp, #64	; 0x40
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d315      	bcc.n	8008a12 <_itostr+0x6a>
 80089e6:	3001      	adds	r0, #1
 80089e8:	b011      	add	sp, #68	; 0x44
 80089ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089ec:	4623      	mov	r3, r4
 80089ee:	250a      	movs	r5, #10
 80089f0:	46ec      	mov	ip, sp
 80089f2:	fb90 f6f5 	sdiv	r6, r0, r5
 80089f6:	fb05 0016 	mls	r0, r5, r6, r0
 80089fa:	3030      	adds	r0, #48	; 0x30
 80089fc:	f803 0901 	strb.w	r0, [r3], #-1
 8008a00:	4630      	mov	r0, r6
 8008a02:	2e00      	cmp	r6, #0
 8008a04:	d0dd      	beq.n	80089c2 <_itostr+0x1a>
 8008a06:	4563      	cmp	r3, ip
 8008a08:	d1f3      	bne.n	80089f2 <_itostr+0x4a>
 8008a0a:	e7da      	b.n	80089c2 <_itostr+0x1a>
 8008a0c:	f803 5901 	strb.w	r5, [r3], #-1
 8008a10:	e7da      	b.n	80089c8 <_itostr+0x20>
 8008a12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a16:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008a1a:	e7e1      	b.n	80089e0 <_itostr+0x38>

08008a1c <_xputch>:
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	b410      	push	{r4}
 8008a20:	4c08      	ldr	r4, [pc, #32]	; (8008a44 <_xputch+0x28>)
 8008a22:	68da      	ldr	r2, [r3, #12]
 8008a24:	4608      	mov	r0, r1
 8008a26:	6821      	ldr	r1, [r4, #0]
 8008a28:	3201      	adds	r2, #1
 8008a2a:	60da      	str	r2, [r3, #12]
 8008a2c:	b139      	cbz	r1, 8008a3e <_xputch+0x22>
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	da02      	bge.n	8008a3a <_xputch+0x1e>
 8008a34:	1c4b      	adds	r3, r1, #1
 8008a36:	6023      	str	r3, [r4, #0]
 8008a38:	7008      	strb	r0, [r1, #0]
 8008a3a:	bc10      	pop	{r4}
 8008a3c:	4770      	bx	lr
 8008a3e:	bc10      	pop	{r4}
 8008a40:	f00b b8f2 	b.w	8013c28 <console_putc>
 8008a44:	20000080 	andcs	r0, r0, r0, lsl #1

08008a48 <_format_int>:
 8008a48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a4c:	4698      	mov	r8, r3
 8008a4e:	b091      	sub	sp, #68	; 0x44
 8008a50:	ea52 0308 	orrs.w	r3, r2, r8
 8008a54:	4606      	mov	r6, r0
 8008a56:	4617      	mov	r7, r2
 8008a58:	f10d 053f 	add.w	r5, sp, #63	; 0x3f
 8008a5c:	d133      	bne.n	8008ac6 <_format_int+0x7e>
 8008a5e:	2330      	movs	r3, #48	; 0x30
 8008a60:	f10d 043e 	add.w	r4, sp, #62	; 0x3e
 8008a64:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8008a68:	6833      	ldr	r3, [r6, #0]
 8008a6a:	07d8      	lsls	r0, r3, #31
 8008a6c:	d507      	bpl.n	8008a7e <_format_int+0x36>
 8008a6e:	466a      	mov	r2, sp
 8008a70:	2030      	movs	r0, #48	; 0x30
 8008a72:	6871      	ldr	r1, [r6, #4]
 8008a74:	1b2f      	subs	r7, r5, r4
 8008a76:	428f      	cmp	r7, r1
 8008a78:	da01      	bge.n	8008a7e <_format_int+0x36>
 8008a7a:	4294      	cmp	r4, r2
 8008a7c:	d839      	bhi.n	8008af2 <_format_int+0xaa>
 8008a7e:	0699      	lsls	r1, r3, #26
 8008a80:	d507      	bpl.n	8008a92 <_format_int+0x4a>
 8008a82:	466a      	mov	r2, sp
 8008a84:	2030      	movs	r0, #48	; 0x30
 8008a86:	68b1      	ldr	r1, [r6, #8]
 8008a88:	1b2f      	subs	r7, r5, r4
 8008a8a:	428f      	cmp	r7, r1
 8008a8c:	da01      	bge.n	8008a92 <_format_int+0x4a>
 8008a8e:	4294      	cmp	r4, r2
 8008a90:	d832      	bhi.n	8008af8 <_format_int+0xb0>
 8008a92:	071a      	lsls	r2, r3, #28
 8008a94:	bf44      	itt	mi
 8008a96:	222d      	movmi	r2, #45	; 0x2d
 8008a98:	f804 2901 	strbmi.w	r2, [r4], #-1
 8008a9c:	065b      	lsls	r3, r3, #25
 8008a9e:	d407      	bmi.n	8008ab0 <_format_int+0x68>
 8008aa0:	466b      	mov	r3, sp
 8008aa2:	2120      	movs	r1, #32
 8008aa4:	68b2      	ldr	r2, [r6, #8]
 8008aa6:	1b28      	subs	r0, r5, r4
 8008aa8:	4290      	cmp	r0, r2
 8008aaa:	da01      	bge.n	8008ab0 <_format_int+0x68>
 8008aac:	429c      	cmp	r4, r3
 8008aae:	d826      	bhi.n	8008afe <_format_int+0xb6>
 8008ab0:	1b2d      	subs	r5, r5, r4
 8008ab2:	3401      	adds	r4, #1
 8008ab4:	ab10      	add	r3, sp, #64	; 0x40
 8008ab6:	429c      	cmp	r4, r3
 8008ab8:	d324      	bcc.n	8008b04 <_format_int+0xbc>
 8008aba:	68b3      	ldr	r3, [r6, #8]
 8008abc:	42ab      	cmp	r3, r5
 8008abe:	dc27      	bgt.n	8008b10 <_format_int+0xc8>
 8008ac0:	b011      	add	sp, #68	; 0x44
 8008ac2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ac6:	462c      	mov	r4, r5
 8008ac8:	46e9      	mov	r9, sp
 8008aca:	4638      	mov	r0, r7
 8008acc:	4641      	mov	r1, r8
 8008ace:	220a      	movs	r2, #10
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	f7ff f84b 	bl	8007b6c <__aeabi_uldivmod>
 8008ad6:	3230      	adds	r2, #48	; 0x30
 8008ad8:	f804 2901 	strb.w	r2, [r4], #-1
 8008adc:	463a      	mov	r2, r7
 8008ade:	4643      	mov	r3, r8
 8008ae0:	2a0a      	cmp	r2, #10
 8008ae2:	f173 0300 	sbcs.w	r3, r3, #0
 8008ae6:	4607      	mov	r7, r0
 8008ae8:	4688      	mov	r8, r1
 8008aea:	d3bd      	bcc.n	8008a68 <_format_int+0x20>
 8008aec:	454c      	cmp	r4, r9
 8008aee:	d1ec      	bne.n	8008aca <_format_int+0x82>
 8008af0:	e7ba      	b.n	8008a68 <_format_int+0x20>
 8008af2:	f804 0901 	strb.w	r0, [r4], #-1
 8008af6:	e7bd      	b.n	8008a74 <_format_int+0x2c>
 8008af8:	f804 0901 	strb.w	r0, [r4], #-1
 8008afc:	e7c4      	b.n	8008a88 <_format_int+0x40>
 8008afe:	f804 1901 	strb.w	r1, [r4], #-1
 8008b02:	e7d0      	b.n	8008aa6 <_format_int+0x5e>
 8008b04:	4630      	mov	r0, r6
 8008b06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b0a:	f7ff ff87 	bl	8008a1c <_xputch>
 8008b0e:	e7d1      	b.n	8008ab4 <_format_int+0x6c>
 8008b10:	2120      	movs	r1, #32
 8008b12:	4630      	mov	r0, r6
 8008b14:	f7ff ff82 	bl	8008a1c <_xputch>
 8008b18:	3501      	adds	r5, #1
 8008b1a:	e7ce      	b.n	8008aba <_format_int+0x72>

08008b1c <_format_hex>:
 8008b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b1e:	b091      	sub	sp, #68	; 0x44
 8008b20:	4606      	mov	r6, r0
 8008b22:	6804      	ldr	r4, [r0, #0]
 8008b24:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 8008b28:	bb61      	cbnz	r1, 8008b84 <_format_hex+0x68>
 8008b2a:	2330      	movs	r3, #48	; 0x30
 8008b2c:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8008b30:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8008b34:	07e5      	lsls	r5, r4, #31
 8008b36:	d507      	bpl.n	8008b48 <_format_hex+0x2c>
 8008b38:	4669      	mov	r1, sp
 8008b3a:	2530      	movs	r5, #48	; 0x30
 8008b3c:	6870      	ldr	r0, [r6, #4]
 8008b3e:	1ad7      	subs	r7, r2, r3
 8008b40:	4287      	cmp	r7, r0
 8008b42:	da01      	bge.n	8008b48 <_format_hex+0x2c>
 8008b44:	428b      	cmp	r3, r1
 8008b46:	d831      	bhi.n	8008bac <_format_hex+0x90>
 8008b48:	06a0      	lsls	r0, r4, #26
 8008b4a:	d507      	bpl.n	8008b5c <_format_hex+0x40>
 8008b4c:	4669      	mov	r1, sp
 8008b4e:	2530      	movs	r5, #48	; 0x30
 8008b50:	68b0      	ldr	r0, [r6, #8]
 8008b52:	1ad7      	subs	r7, r2, r3
 8008b54:	4287      	cmp	r7, r0
 8008b56:	da01      	bge.n	8008b5c <_format_hex+0x40>
 8008b58:	428b      	cmp	r3, r1
 8008b5a:	d82a      	bhi.n	8008bb2 <_format_hex+0x96>
 8008b5c:	0661      	lsls	r1, r4, #25
 8008b5e:	d407      	bmi.n	8008b70 <_format_hex+0x54>
 8008b60:	4669      	mov	r1, sp
 8008b62:	2420      	movs	r4, #32
 8008b64:	68b0      	ldr	r0, [r6, #8]
 8008b66:	1ad5      	subs	r5, r2, r3
 8008b68:	4285      	cmp	r5, r0
 8008b6a:	da01      	bge.n	8008b70 <_format_hex+0x54>
 8008b6c:	428b      	cmp	r3, r1
 8008b6e:	d823      	bhi.n	8008bb8 <_format_hex+0x9c>
 8008b70:	1ad5      	subs	r5, r2, r3
 8008b72:	1c5c      	adds	r4, r3, #1
 8008b74:	ab10      	add	r3, sp, #64	; 0x40
 8008b76:	429c      	cmp	r4, r3
 8008b78:	d321      	bcc.n	8008bbe <_format_hex+0xa2>
 8008b7a:	68b3      	ldr	r3, [r6, #8]
 8008b7c:	429d      	cmp	r5, r3
 8008b7e:	db24      	blt.n	8008bca <_format_hex+0xae>
 8008b80:	b011      	add	sp, #68	; 0x44
 8008b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b84:	f014 0f02 	tst.w	r4, #2
 8008b88:	bf0c      	ite	eq
 8008b8a:	2757      	moveq	r7, #87	; 0x57
 8008b8c:	2737      	movne	r7, #55	; 0x37
 8008b8e:	4613      	mov	r3, r2
 8008b90:	466d      	mov	r5, sp
 8008b92:	f001 000f 	and.w	r0, r1, #15
 8008b96:	2809      	cmp	r0, #9
 8008b98:	bf94      	ite	ls
 8008b9a:	3030      	addls	r0, #48	; 0x30
 8008b9c:	19c0      	addhi	r0, r0, r7
 8008b9e:	0909      	lsrs	r1, r1, #4
 8008ba0:	f803 0901 	strb.w	r0, [r3], #-1
 8008ba4:	d0c6      	beq.n	8008b34 <_format_hex+0x18>
 8008ba6:	42ab      	cmp	r3, r5
 8008ba8:	d1f3      	bne.n	8008b92 <_format_hex+0x76>
 8008baa:	e7c3      	b.n	8008b34 <_format_hex+0x18>
 8008bac:	f803 5901 	strb.w	r5, [r3], #-1
 8008bb0:	e7c5      	b.n	8008b3e <_format_hex+0x22>
 8008bb2:	f803 5901 	strb.w	r5, [r3], #-1
 8008bb6:	e7cc      	b.n	8008b52 <_format_hex+0x36>
 8008bb8:	f803 4901 	strb.w	r4, [r3], #-1
 8008bbc:	e7d3      	b.n	8008b66 <_format_hex+0x4a>
 8008bbe:	4630      	mov	r0, r6
 8008bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bc4:	f7ff ff2a 	bl	8008a1c <_xputch>
 8008bc8:	e7d4      	b.n	8008b74 <_format_hex+0x58>
 8008bca:	2120      	movs	r1, #32
 8008bcc:	4630      	mov	r0, r6
 8008bce:	f7ff ff25 	bl	8008a1c <_xputch>
 8008bd2:	3501      	adds	r5, #1
 8008bd4:	e7d1      	b.n	8008b7a <_format_hex+0x5e>
	...

08008bd8 <_vprintf>:
 8008bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bdc:	4614      	mov	r4, r2
 8008bde:	2200      	movs	r2, #0
 8008be0:	460b      	mov	r3, r1
 8008be2:	f04f 0800 	mov.w	r8, #0
 8008be6:	b099      	sub	sp, #100	; 0x64
 8008be8:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8008bec:	af08      	add	r7, sp, #32
 8008bee:	7819      	ldrb	r1, [r3, #0]
 8008bf0:	b919      	cbnz	r1, 8008bfa <_vprintf+0x22>
 8008bf2:	9806      	ldr	r0, [sp, #24]
 8008bf4:	b019      	add	sp, #100	; 0x64
 8008bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bfa:	2925      	cmp	r1, #37	; 0x25
 8008bfc:	f103 0601 	add.w	r6, r3, #1
 8008c00:	d004      	beq.n	8008c0c <_vprintf+0x34>
 8008c02:	a803      	add	r0, sp, #12
 8008c04:	f7ff ff0a 	bl	8008a1c <_xputch>
 8008c08:	4633      	mov	r3, r6
 8008c0a:	e7f0      	b.n	8008bee <_vprintf+0x16>
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8008c12:	9205      	str	r2, [sp, #20]
 8008c14:	785a      	ldrb	r2, [r3, #1]
 8008c16:	2a30      	cmp	r2, #48	; 0x30
 8008c18:	d129      	bne.n	8008c6e <_vprintf+0x96>
 8008c1a:	2220      	movs	r2, #32
 8008c1c:	9203      	str	r2, [sp, #12]
 8008c1e:	1c9e      	adds	r6, r3, #2
 8008c20:	2200      	movs	r2, #0
 8008c22:	4635      	mov	r5, r6
 8008c24:	4613      	mov	r3, r2
 8008c26:	f04f 0c0a 	mov.w	ip, #10
 8008c2a:	7829      	ldrb	r1, [r5, #0]
 8008c2c:	462e      	mov	r6, r5
 8008c2e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8008c32:	2809      	cmp	r0, #9
 8008c34:	f105 0501 	add.w	r5, r5, #1
 8008c38:	d91d      	bls.n	8008c76 <_vprintf+0x9e>
 8008c3a:	b12a      	cbz	r2, 8008c48 <_vprintf+0x70>
 8008c3c:	9305      	str	r3, [sp, #20]
 8008c3e:	b11b      	cbz	r3, 8008c48 <_vprintf+0x70>
 8008c40:	9b03      	ldr	r3, [sp, #12]
 8008c42:	f043 0310 	orr.w	r3, r3, #16
 8008c46:	9303      	str	r3, [sp, #12]
 8008c48:	292e      	cmp	r1, #46	; 0x2e
 8008c4a:	d123      	bne.n	8008c94 <_vprintf+0xbc>
 8008c4c:	7873      	ldrb	r3, [r6, #1]
 8008c4e:	2b2a      	cmp	r3, #42	; 0x2a
 8008c50:	d015      	beq.n	8008c7e <_vprintf+0xa6>
 8008c52:	2100      	movs	r1, #0
 8008c54:	250a      	movs	r5, #10
 8008c56:	460a      	mov	r2, r1
 8008c58:	1c70      	adds	r0, r6, #1
 8008c5a:	7803      	ldrb	r3, [r0, #0]
 8008c5c:	4606      	mov	r6, r0
 8008c5e:	3b30      	subs	r3, #48	; 0x30
 8008c60:	2b09      	cmp	r3, #9
 8008c62:	f100 0001 	add.w	r0, r0, #1
 8008c66:	d959      	bls.n	8008d1c <_vprintf+0x144>
 8008c68:	b181      	cbz	r1, 8008c8c <_vprintf+0xb4>
 8008c6a:	9204      	str	r2, [sp, #16]
 8008c6c:	e00e      	b.n	8008c8c <_vprintf+0xb4>
 8008c6e:	2a2d      	cmp	r2, #45	; 0x2d
 8008c70:	d1d6      	bne.n	8008c20 <_vprintf+0x48>
 8008c72:	2240      	movs	r2, #64	; 0x40
 8008c74:	e7d2      	b.n	8008c1c <_vprintf+0x44>
 8008c76:	2201      	movs	r2, #1
 8008c78:	fb0c 0303 	mla	r3, ip, r3, r0
 8008c7c:	e7d5      	b.n	8008c2a <_vprintf+0x52>
 8008c7e:	f854 3b04 	ldr.w	r3, [r4], #4
 8008c82:	3602      	adds	r6, #2
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	bfb8      	it	lt
 8008c88:	425b      	neglt	r3, r3
 8008c8a:	9304      	str	r3, [sp, #16]
 8008c8c:	9b03      	ldr	r3, [sp, #12]
 8008c8e:	f043 0301 	orr.w	r3, r3, #1
 8008c92:	9303      	str	r3, [sp, #12]
 8008c94:	7833      	ldrb	r3, [r6, #0]
 8008c96:	2b6c      	cmp	r3, #108	; 0x6c
 8008c98:	bf04      	itt	eq
 8008c9a:	9b03      	ldreq	r3, [sp, #12]
 8008c9c:	3601      	addeq	r6, #1
 8008c9e:	7831      	ldrb	r1, [r6, #0]
 8008ca0:	bf04      	itt	eq
 8008ca2:	f043 0304 	orreq.w	r3, r3, #4
 8008ca6:	9303      	streq	r3, [sp, #12]
 8008ca8:	2958      	cmp	r1, #88	; 0x58
 8008caa:	f000 8171 	beq.w	8008f90 <_vprintf+0x3b8>
 8008cae:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 8008cb2:	b2da      	uxtb	r2, r3
 8008cb4:	2a15      	cmp	r2, #21
 8008cb6:	d8a4      	bhi.n	8008c02 <_vprintf+0x2a>
 8008cb8:	2b15      	cmp	r3, #21
 8008cba:	d8a2      	bhi.n	8008c02 <_vprintf+0x2a>
 8008cbc:	a201      	add	r2, pc, #4	; (adr r2, 8008cc4 <_vprintf+0xec>)
 8008cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc2:	bf00      	nop
 8008cc4:	08008d25 	stmdaeq	r0, {r0, r2, r5, r8, sl, fp, pc}
 8008cc8:	08008d37 	stmdaeq	r0, {r0, r1, r2, r4, r5, r8, sl, fp, pc}
 8008ccc:	08008c03 	stmdaeq	r0, {r0, r1, sl, fp, pc}
 8008cd0:	08008d6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl, fp, pc}
 8008cd4:	08008c03 	stmdaeq	r0, {r0, r1, sl, fp, pc}
 8008cd8:	08008c03 	stmdaeq	r0, {r0, r1, sl, fp, pc}
 8008cdc:	08008d37 	stmdaeq	r0, {r0, r1, r2, r4, r5, r8, sl, fp, pc}
 8008ce0:	08008c03 	stmdaeq	r0, {r0, r1, sl, fp, pc}
 8008ce4:	08008c03 	stmdaeq	r0, {r0, r1, sl, fp, pc}
 8008ce8:	08008c03 	stmdaeq	r0, {r0, r1, sl, fp, pc}
 8008cec:	08008c03 	stmdaeq	r0, {r0, r1, sl, fp, pc}
 8008cf0:	08008c03 	stmdaeq	r0, {r0, r1, sl, fp, pc}
 8008cf4:	08008c03 	stmdaeq	r0, {r0, r1, sl, fp, pc}
 8008cf8:	08008ed3 	stmdaeq	r0, {r0, r1, r4, r6, r7, r9, sl, fp, pc}
 8008cfc:	08008c03 	stmdaeq	r0, {r0, r1, sl, fp, pc}
 8008d00:	08008c03 	stmdaeq	r0, {r0, r1, sl, fp, pc}
 8008d04:	08008efb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r9, sl, fp, pc}
 8008d08:	08008c03 	stmdaeq	r0, {r0, r1, sl, fp, pc}
 8008d0c:	08008f71 	stmdaeq	r0, {r0, r4, r5, r6, r8, r9, sl, fp, pc}
 8008d10:	08008c03 	stmdaeq	r0, {r0, r1, sl, fp, pc}
 8008d14:	08008c03 	stmdaeq	r0, {r0, r1, sl, fp, pc}
 8008d18:	08008f99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, sl, fp, pc}
 8008d1c:	2101      	movs	r1, #1
 8008d1e:	fb05 3202 	mla	r2, r5, r2, r3
 8008d22:	e79a      	b.n	8008c5a <_vprintf+0x82>
 8008d24:	4625      	mov	r5, r4
 8008d26:	a803      	add	r0, sp, #12
 8008d28:	f855 1b04 	ldr.w	r1, [r5], #4
 8008d2c:	f7ff fe76 	bl	8008a1c <_xputch>
 8008d30:	462c      	mov	r4, r5
 8008d32:	3601      	adds	r6, #1
 8008d34:	e768      	b.n	8008c08 <_vprintf+0x30>
 8008d36:	9903      	ldr	r1, [sp, #12]
 8008d38:	074d      	lsls	r5, r1, #29
 8008d3a:	bf51      	iteee	pl
 8008d3c:	4625      	movpl	r5, r4
 8008d3e:	3407      	addmi	r4, #7
 8008d40:	f024 0407 	bicmi.w	r4, r4, #7
 8008d44:	4625      	movmi	r5, r4
 8008d46:	bf55      	itete	pl
 8008d48:	f855 2b04 	ldrpl.w	r2, [r5], #4
 8008d4c:	6863      	ldrmi	r3, [r4, #4]
 8008d4e:	17d3      	asrpl	r3, r2, #31
 8008d50:	f855 2b08 	ldrmi.w	r2, [r5], #8
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	da05      	bge.n	8008d64 <_vprintf+0x18c>
 8008d58:	f041 0108 	orr.w	r1, r1, #8
 8008d5c:	4252      	negs	r2, r2
 8008d5e:	9103      	str	r1, [sp, #12]
 8008d60:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008d64:	a803      	add	r0, sp, #12
 8008d66:	f7ff fe6f 	bl	8008a48 <_format_int>
 8008d6a:	e7e1      	b.n	8008d30 <_vprintf+0x158>
 8008d6c:	3407      	adds	r4, #7
 8008d6e:	f024 0507 	bic.w	r5, r4, #7
 8008d72:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8008d76:	f7fe fcff 	bl	8007778 <__aeabi_d2f>
 8008d7a:	9b03      	ldr	r3, [sp, #12]
 8008d7c:	4641      	mov	r1, r8
 8008d7e:	07dc      	lsls	r4, r3, #31
 8008d80:	bf54      	ite	pl
 8008d82:	f04f 0a06 	movpl.w	sl, #6
 8008d86:	f8dd a010 	ldrmi.w	sl, [sp, #16]
 8008d8a:	4681      	mov	r9, r0
 8008d8c:	f7fe fea0 	bl	8007ad0 <__aeabi_fcmplt>
 8008d90:	2800      	cmp	r0, #0
 8008d92:	d063      	beq.n	8008e5c <_vprintf+0x284>
 8008d94:	232d      	movs	r3, #45	; 0x2d
 8008d96:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000
 8008d9a:	f88d 3020 	strb.w	r3, [sp, #32]
 8008d9e:	f10d 0b21 	add.w	fp, sp, #33	; 0x21
 8008da2:	4648      	mov	r0, r9
 8008da4:	f7fe febc 	bl	8007b20 <__aeabi_f2iz>
 8008da8:	4659      	mov	r1, fp
 8008daa:	2200      	movs	r2, #0
 8008dac:	4604      	mov	r4, r0
 8008dae:	f7ff fdfb 	bl	80089a8 <_itostr>
 8008db2:	eb0b 0200 	add.w	r2, fp, r0
 8008db6:	e9cd 2000 	strd	r2, r0, [sp]
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f7fe fde6 	bl	800798c <__aeabi_i2f>
 8008dc0:	4601      	mov	r1, r0
 8008dc2:	4648      	mov	r0, r9
 8008dc4:	f7fe fd2c 	bl	8007820 <__aeabi_fsub>
 8008dc8:	222e      	movs	r2, #46	; 0x2e
 8008dca:	4601      	mov	r1, r0
 8008dcc:	200a      	movs	r0, #10
 8008dce:	9b00      	ldr	r3, [sp, #0]
 8008dd0:	f10a 0901 	add.w	r9, sl, #1
 8008dd4:	1c5c      	adds	r4, r3, #1
 8008dd6:	9b01      	ldr	r3, [sp, #4]
 8008dd8:	f80b 2003 	strb.w	r2, [fp, r3]
 8008ddc:	4603      	mov	r3, r0
 8008dde:	f1ba 0f00 	cmp.w	sl, #0
 8008de2:	dc3d      	bgt.n	8008e60 <_vprintf+0x288>
 8008de4:	9100      	str	r1, [sp, #0]
 8008de6:	f7fe fdd1 	bl	800798c <__aeabi_i2f>
 8008dea:	9900      	ldr	r1, [sp, #0]
 8008dec:	f7ff f894 	bl	8007f18 <__aeabi_fmul>
 8008df0:	f7fe fe96 	bl	8007b20 <__aeabi_f2iz>
 8008df4:	464a      	mov	r2, r9
 8008df6:	4621      	mov	r1, r4
 8008df8:	f7ff fdd6 	bl	80089a8 <_itostr>
 8008dfc:	4404      	add	r4, r0
 8008dfe:	1be0      	subs	r0, r4, r7
 8008e00:	1e44      	subs	r4, r0, #1
 8008e02:	5d3b      	ldrb	r3, [r7, r4]
 8008e04:	193a      	adds	r2, r7, r4
 8008e06:	2b34      	cmp	r3, #52	; 0x34
 8008e08:	d910      	bls.n	8008e2c <_vprintf+0x254>
 8008e0a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8008e0e:	1e53      	subs	r3, r2, #1
 8008e10:	292e      	cmp	r1, #46	; 0x2e
 8008e12:	d02c      	beq.n	8008e6e <_vprintf+0x296>
 8008e14:	469c      	mov	ip, r3
 8008e16:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8008e1a:	4663      	mov	r3, ip
 8008e1c:	f81c 1901 	ldrb.w	r1, [ip], #-1
 8008e20:	2939      	cmp	r1, #57	; 0x39
 8008e22:	d021      	beq.n	8008e68 <_vprintf+0x290>
 8008e24:	292e      	cmp	r1, #46	; 0x2e
 8008e26:	d022      	beq.n	8008e6e <_vprintf+0x296>
 8008e28:	3101      	adds	r1, #1
 8008e2a:	7019      	strb	r1, [r3, #0]
 8008e2c:	f104 0360 	add.w	r3, r4, #96	; 0x60
 8008e30:	446b      	add	r3, sp
 8008e32:	f813 3c41 	ldrb.w	r3, [r3, #-65]
 8008e36:	2b2e      	cmp	r3, #46	; 0x2e
 8008e38:	bf08      	it	eq
 8008e3a:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 8008e3e:	46a1      	mov	r9, r4
 8008e40:	9b05      	ldr	r3, [sp, #20]
 8008e42:	4599      	cmp	r9, r3
 8008e44:	db3e      	blt.n	8008ec4 <_vprintf+0x2ec>
 8008e46:	46b9      	mov	r9, r7
 8008e48:	2c00      	cmp	r4, #0
 8008e4a:	f77f af71 	ble.w	8008d30 <_vprintf+0x158>
 8008e4e:	f819 1b01 	ldrb.w	r1, [r9], #1
 8008e52:	a803      	add	r0, sp, #12
 8008e54:	f7ff fde2 	bl	8008a1c <_xputch>
 8008e58:	3c01      	subs	r4, #1
 8008e5a:	e7f5      	b.n	8008e48 <_vprintf+0x270>
 8008e5c:	46bb      	mov	fp, r7
 8008e5e:	e7a0      	b.n	8008da2 <_vprintf+0x1ca>
 8008e60:	4358      	muls	r0, r3
 8008e62:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008e66:	e7ba      	b.n	8008dde <_vprintf+0x206>
 8008e68:	f88c e001 	strb.w	lr, [ip, #1]
 8008e6c:	e7d5      	b.n	8008e1a <_vprintf+0x242>
 8008e6e:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8008e72:	3b01      	subs	r3, #1
 8008e74:	7819      	ldrb	r1, [r3, #0]
 8008e76:	2939      	cmp	r1, #57	; 0x39
 8008e78:	d112      	bne.n	8008ea0 <_vprintf+0x2c8>
 8008e7a:	42bb      	cmp	r3, r7
 8008e7c:	d20d      	bcs.n	8008e9a <_vprintf+0x2c2>
 8008e7e:	1c5c      	adds	r4, r3, #1
 8008e80:	1c99      	adds	r1, r3, #2
 8008e82:	428c      	cmp	r4, r1
 8008e84:	eba2 0203 	sub.w	r2, r2, r3
 8008e88:	d913      	bls.n	8008eb2 <_vprintf+0x2da>
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	441a      	add	r2, r3
 8008e8e:	428a      	cmp	r2, r1
 8008e90:	d10b      	bne.n	8008eaa <_vprintf+0x2d2>
 8008e92:	2231      	movs	r2, #49	; 0x31
 8008e94:	4604      	mov	r4, r0
 8008e96:	705a      	strb	r2, [r3, #1]
 8008e98:	e7c8      	b.n	8008e2c <_vprintf+0x254>
 8008e9a:	f803 c901 	strb.w	ip, [r3], #-1
 8008e9e:	e7e9      	b.n	8008e74 <_vprintf+0x29c>
 8008ea0:	42bb      	cmp	r3, r7
 8008ea2:	d3ec      	bcc.n	8008e7e <_vprintf+0x2a6>
 8008ea4:	292d      	cmp	r1, #45	; 0x2d
 8008ea6:	d0ea      	beq.n	8008e7e <_vprintf+0x2a6>
 8008ea8:	e7be      	b.n	8008e28 <_vprintf+0x250>
 8008eaa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008eae:	704c      	strb	r4, [r1, #1]
 8008eb0:	e7ed      	b.n	8008e8e <_vprintf+0x2b6>
 8008eb2:	4414      	add	r4, r2
 8008eb4:	440a      	add	r2, r1
 8008eb6:	428a      	cmp	r2, r1
 8008eb8:	d0eb      	beq.n	8008e92 <_vprintf+0x2ba>
 8008eba:	f814 cd01 	ldrb.w	ip, [r4, #-1]!
 8008ebe:	f802 cd01 	strb.w	ip, [r2, #-1]!
 8008ec2:	e7f8      	b.n	8008eb6 <_vprintf+0x2de>
 8008ec4:	2120      	movs	r1, #32
 8008ec6:	a803      	add	r0, sp, #12
 8008ec8:	f7ff fda8 	bl	8008a1c <_xputch>
 8008ecc:	f109 0901 	add.w	r9, r9, #1
 8008ed0:	e7b6      	b.n	8008e40 <_vprintf+0x268>
 8008ed2:	2308      	movs	r3, #8
 8008ed4:	4625      	mov	r5, r4
 8008ed6:	9305      	str	r3, [sp, #20]
 8008ed8:	2320      	movs	r3, #32
 8008eda:	2130      	movs	r1, #48	; 0x30
 8008edc:	f855 4b04 	ldr.w	r4, [r5], #4
 8008ee0:	a803      	add	r0, sp, #12
 8008ee2:	9303      	str	r3, [sp, #12]
 8008ee4:	f7ff fd9a 	bl	8008a1c <_xputch>
 8008ee8:	2178      	movs	r1, #120	; 0x78
 8008eea:	a803      	add	r0, sp, #12
 8008eec:	f7ff fd96 	bl	8008a1c <_xputch>
 8008ef0:	4621      	mov	r1, r4
 8008ef2:	a803      	add	r0, sp, #12
 8008ef4:	f7ff fe12 	bl	8008b1c <_format_hex>
 8008ef8:	e71a      	b.n	8008d30 <_vprintf+0x158>
 8008efa:	4625      	mov	r5, r4
 8008efc:	2400      	movs	r4, #0
 8008efe:	f855 9b04 	ldr.w	r9, [r5], #4
 8008f02:	f819 3004 	ldrb.w	r3, [r9, r4]
 8008f06:	b993      	cbnz	r3, 8008f2e <_vprintf+0x356>
 8008f08:	9b03      	ldr	r3, [sp, #12]
 8008f0a:	07d9      	lsls	r1, r3, #31
 8008f0c:	d503      	bpl.n	8008f16 <_vprintf+0x33e>
 8008f0e:	9b04      	ldr	r3, [sp, #16]
 8008f10:	429c      	cmp	r4, r3
 8008f12:	bfa8      	it	ge
 8008f14:	461c      	movge	r4, r3
 8008f16:	9b03      	ldr	r3, [sp, #12]
 8008f18:	f104 0a01 	add.w	sl, r4, #1
 8008f1c:	065a      	lsls	r2, r3, #25
 8008f1e:	d403      	bmi.n	8008f28 <_vprintf+0x350>
 8008f20:	9b05      	ldr	r3, [sp, #20]
 8008f22:	429c      	cmp	r4, r3
 8008f24:	db05      	blt.n	8008f32 <_vprintf+0x35a>
 8008f26:	4654      	mov	r4, sl
 8008f28:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008f2c:	e00d      	b.n	8008f4a <_vprintf+0x372>
 8008f2e:	3401      	adds	r4, #1
 8008f30:	e7e7      	b.n	8008f02 <_vprintf+0x32a>
 8008f32:	2120      	movs	r1, #32
 8008f34:	a803      	add	r0, sp, #12
 8008f36:	f7ff fd71 	bl	8008a1c <_xputch>
 8008f3a:	4654      	mov	r4, sl
 8008f3c:	e7eb      	b.n	8008f16 <_vprintf+0x33e>
 8008f3e:	a803      	add	r0, sp, #12
 8008f40:	f7ff fd6c 	bl	8008a1c <_xputch>
 8008f44:	9b04      	ldr	r3, [sp, #16]
 8008f46:	3b01      	subs	r3, #1
 8008f48:	9304      	str	r3, [sp, #16]
 8008f4a:	9b03      	ldr	r3, [sp, #12]
 8008f4c:	07db      	lsls	r3, r3, #31
 8008f4e:	d501      	bpl.n	8008f54 <_vprintf+0x37c>
 8008f50:	9b04      	ldr	r3, [sp, #16]
 8008f52:	b11b      	cbz	r3, 8008f5c <_vprintf+0x384>
 8008f54:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8008f58:	2900      	cmp	r1, #0
 8008f5a:	d1f0      	bne.n	8008f3e <_vprintf+0x366>
 8008f5c:	9b05      	ldr	r3, [sp, #20]
 8008f5e:	429c      	cmp	r4, r3
 8008f60:	f6bf aee6 	bge.w	8008d30 <_vprintf+0x158>
 8008f64:	2120      	movs	r1, #32
 8008f66:	a803      	add	r0, sp, #12
 8008f68:	f7ff fd58 	bl	8008a1c <_xputch>
 8008f6c:	3401      	adds	r4, #1
 8008f6e:	e7f5      	b.n	8008f5c <_vprintf+0x384>
 8008f70:	9b03      	ldr	r3, [sp, #12]
 8008f72:	f013 0304 	ands.w	r3, r3, #4
 8008f76:	bf1d      	ittte	ne
 8008f78:	3407      	addne	r4, #7
 8008f7a:	f024 0407 	bicne.w	r4, r4, #7
 8008f7e:	4625      	movne	r5, r4
 8008f80:	4625      	moveq	r5, r4
 8008f82:	bf1a      	itte	ne
 8008f84:	f855 2b08 	ldrne.w	r2, [r5], #8
 8008f88:	6863      	ldrne	r3, [r4, #4]
 8008f8a:	f855 2b04 	ldreq.w	r2, [r5], #4
 8008f8e:	e6e9      	b.n	8008d64 <_vprintf+0x18c>
 8008f90:	9b03      	ldr	r3, [sp, #12]
 8008f92:	f043 0302 	orr.w	r3, r3, #2
 8008f96:	9303      	str	r3, [sp, #12]
 8008f98:	4625      	mov	r5, r4
 8008f9a:	f855 1b04 	ldr.w	r1, [r5], #4
 8008f9e:	e7a8      	b.n	8008ef2 <_vprintf+0x31a>

08008fa0 <printf>:
 8008fa0:	b40f      	push	{r0, r1, r2, r3}
 8008fa2:	b507      	push	{r0, r1, r2, lr}
 8008fa4:	aa04      	add	r2, sp, #16
 8008fa6:	f852 1b04 	ldr.w	r1, [r2], #4
 8008faa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8008fae:	9201      	str	r2, [sp, #4]
 8008fb0:	f7ff fe12 	bl	8008bd8 <_vprintf>
 8008fb4:	b003      	add	sp, #12
 8008fb6:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fba:	b004      	add	sp, #16
 8008fbc:	4770      	bx	lr
	...

08008fc0 <sprintf>:
 8008fc0:	b40e      	push	{r1, r2, r3}
 8008fc2:	b517      	push	{r0, r1, r2, r4, lr}
 8008fc4:	4c09      	ldr	r4, [pc, #36]	; (8008fec <sprintf+0x2c>)
 8008fc6:	aa05      	add	r2, sp, #20
 8008fc8:	f852 1b04 	ldr.w	r1, [r2], #4
 8008fcc:	6020      	str	r0, [r4, #0]
 8008fce:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8008fd2:	9201      	str	r2, [sp, #4]
 8008fd4:	f7ff fe00 	bl	8008bd8 <_vprintf>
 8008fd8:	2300      	movs	r3, #0
 8008fda:	6822      	ldr	r2, [r4, #0]
 8008fdc:	6023      	str	r3, [r4, #0]
 8008fde:	7013      	strb	r3, [r2, #0]
 8008fe0:	b003      	add	sp, #12
 8008fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fe6:	b003      	add	sp, #12
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop
 8008fec:	20000080 	andcs	r0, r0, r0, lsl #1

08008ff0 <snprintf>:
 8008ff0:	b40c      	push	{r2, r3}
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	b513      	push	{r0, r1, r4, lr}
 8008ff6:	4c09      	ldr	r4, [pc, #36]	; (800901c <snprintf+0x2c>)
 8008ff8:	aa04      	add	r2, sp, #16
 8008ffa:	f852 1b04 	ldr.w	r1, [r2], #4
 8008ffe:	6020      	str	r0, [r4, #0]
 8009000:	4618      	mov	r0, r3
 8009002:	9201      	str	r2, [sp, #4]
 8009004:	f7ff fde8 	bl	8008bd8 <_vprintf>
 8009008:	2300      	movs	r3, #0
 800900a:	6822      	ldr	r2, [r4, #0]
 800900c:	6023      	str	r3, [r4, #0]
 800900e:	7013      	strb	r3, [r2, #0]
 8009010:	b002      	add	sp, #8
 8009012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009016:	b002      	add	sp, #8
 8009018:	4770      	bx	lr
 800901a:	bf00      	nop
 800901c:	20000080 	andcs	r0, r0, r0, lsl #1

08009020 <vsnprintf>:
 8009020:	b538      	push	{r3, r4, r5, lr}
 8009022:	4605      	mov	r5, r0
 8009024:	4c05      	ldr	r4, [pc, #20]	; (800903c <vsnprintf+0x1c>)
 8009026:	4608      	mov	r0, r1
 8009028:	4611      	mov	r1, r2
 800902a:	461a      	mov	r2, r3
 800902c:	6025      	str	r5, [r4, #0]
 800902e:	f7ff fdd3 	bl	8008bd8 <_vprintf>
 8009032:	2300      	movs	r3, #0
 8009034:	6822      	ldr	r2, [r4, #0]
 8009036:	6023      	str	r3, [r4, #0]
 8009038:	7013      	strb	r3, [r2, #0]
 800903a:	bd38      	pop	{r3, r4, r5, pc}
 800903c:	20000080 	andcs	r0, r0, r0, lsl #1

08009040 <__udivmoddi4>:
 8009040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009044:	9e08      	ldr	r6, [sp, #32]
 8009046:	460d      	mov	r5, r1
 8009048:	4604      	mov	r4, r0
 800904a:	468e      	mov	lr, r1
 800904c:	2b00      	cmp	r3, #0
 800904e:	d14c      	bne.n	80090ea <__udivmoddi4+0xaa>
 8009050:	428a      	cmp	r2, r1
 8009052:	4694      	mov	ip, r2
 8009054:	d967      	bls.n	8009126 <__udivmoddi4+0xe6>
 8009056:	fab2 f382 	clz	r3, r2
 800905a:	b153      	cbz	r3, 8009072 <__udivmoddi4+0x32>
 800905c:	fa02 fc03 	lsl.w	ip, r2, r3
 8009060:	f1c3 0220 	rsb	r2, r3, #32
 8009064:	fa01 fe03 	lsl.w	lr, r1, r3
 8009068:	fa20 f202 	lsr.w	r2, r0, r2
 800906c:	ea42 0e0e 	orr.w	lr, r2, lr
 8009070:	409c      	lsls	r4, r3
 8009072:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8009076:	fbbe f1f7 	udiv	r1, lr, r7
 800907a:	fa1f f58c 	uxth.w	r5, ip
 800907e:	fb07 ee11 	mls	lr, r7, r1, lr
 8009082:	fb01 f005 	mul.w	r0, r1, r5
 8009086:	0c22      	lsrs	r2, r4, #16
 8009088:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800908c:	4290      	cmp	r0, r2
 800908e:	d90a      	bls.n	80090a6 <__udivmoddi4+0x66>
 8009090:	eb1c 0202 	adds.w	r2, ip, r2
 8009094:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8009098:	f080 8119 	bcs.w	80092ce <__udivmoddi4+0x28e>
 800909c:	4290      	cmp	r0, r2
 800909e:	f240 8116 	bls.w	80092ce <__udivmoddi4+0x28e>
 80090a2:	3902      	subs	r1, #2
 80090a4:	4462      	add	r2, ip
 80090a6:	1a12      	subs	r2, r2, r0
 80090a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80090ac:	fb07 2210 	mls	r2, r7, r0, r2
 80090b0:	fb00 f505 	mul.w	r5, r0, r5
 80090b4:	b2a4      	uxth	r4, r4
 80090b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80090ba:	42a5      	cmp	r5, r4
 80090bc:	d90a      	bls.n	80090d4 <__udivmoddi4+0x94>
 80090be:	eb1c 0404 	adds.w	r4, ip, r4
 80090c2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80090c6:	f080 8104 	bcs.w	80092d2 <__udivmoddi4+0x292>
 80090ca:	42a5      	cmp	r5, r4
 80090cc:	f240 8101 	bls.w	80092d2 <__udivmoddi4+0x292>
 80090d0:	4464      	add	r4, ip
 80090d2:	3802      	subs	r0, #2
 80090d4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80090d8:	2100      	movs	r1, #0
 80090da:	1b64      	subs	r4, r4, r5
 80090dc:	b11e      	cbz	r6, 80090e6 <__udivmoddi4+0xa6>
 80090de:	40dc      	lsrs	r4, r3
 80090e0:	2300      	movs	r3, #0
 80090e2:	e9c6 4300 	strd	r4, r3, [r6]
 80090e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ea:	428b      	cmp	r3, r1
 80090ec:	d908      	bls.n	8009100 <__udivmoddi4+0xc0>
 80090ee:	2e00      	cmp	r6, #0
 80090f0:	f000 80ea 	beq.w	80092c8 <__udivmoddi4+0x288>
 80090f4:	2100      	movs	r1, #0
 80090f6:	e9c6 0500 	strd	r0, r5, [r6]
 80090fa:	4608      	mov	r0, r1
 80090fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009100:	fab3 f183 	clz	r1, r3
 8009104:	2900      	cmp	r1, #0
 8009106:	d148      	bne.n	800919a <__udivmoddi4+0x15a>
 8009108:	42ab      	cmp	r3, r5
 800910a:	d302      	bcc.n	8009112 <__udivmoddi4+0xd2>
 800910c:	4282      	cmp	r2, r0
 800910e:	f200 80f8 	bhi.w	8009302 <__udivmoddi4+0x2c2>
 8009112:	1a84      	subs	r4, r0, r2
 8009114:	eb65 0203 	sbc.w	r2, r5, r3
 8009118:	2001      	movs	r0, #1
 800911a:	4696      	mov	lr, r2
 800911c:	2e00      	cmp	r6, #0
 800911e:	d0e2      	beq.n	80090e6 <__udivmoddi4+0xa6>
 8009120:	e9c6 4e00 	strd	r4, lr, [r6]
 8009124:	e7df      	b.n	80090e6 <__udivmoddi4+0xa6>
 8009126:	b902      	cbnz	r2, 800912a <__udivmoddi4+0xea>
 8009128:	deff      	udf	#255	; 0xff
 800912a:	fab2 f382 	clz	r3, r2
 800912e:	2b00      	cmp	r3, #0
 8009130:	f040 808e 	bne.w	8009250 <__udivmoddi4+0x210>
 8009134:	1a88      	subs	r0, r1, r2
 8009136:	2101      	movs	r1, #1
 8009138:	0c17      	lsrs	r7, r2, #16
 800913a:	fa1f fe82 	uxth.w	lr, r2
 800913e:	fbb0 f5f7 	udiv	r5, r0, r7
 8009142:	fb07 0015 	mls	r0, r7, r5, r0
 8009146:	0c22      	lsrs	r2, r4, #16
 8009148:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800914c:	fb0e f005 	mul.w	r0, lr, r5
 8009150:	4290      	cmp	r0, r2
 8009152:	d908      	bls.n	8009166 <__udivmoddi4+0x126>
 8009154:	eb1c 0202 	adds.w	r2, ip, r2
 8009158:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800915c:	d202      	bcs.n	8009164 <__udivmoddi4+0x124>
 800915e:	4290      	cmp	r0, r2
 8009160:	f200 80cc 	bhi.w	80092fc <__udivmoddi4+0x2bc>
 8009164:	4645      	mov	r5, r8
 8009166:	1a12      	subs	r2, r2, r0
 8009168:	fbb2 f0f7 	udiv	r0, r2, r7
 800916c:	fb07 2210 	mls	r2, r7, r0, r2
 8009170:	fb0e fe00 	mul.w	lr, lr, r0
 8009174:	b2a4      	uxth	r4, r4
 8009176:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800917a:	45a6      	cmp	lr, r4
 800917c:	d908      	bls.n	8009190 <__udivmoddi4+0x150>
 800917e:	eb1c 0404 	adds.w	r4, ip, r4
 8009182:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8009186:	d202      	bcs.n	800918e <__udivmoddi4+0x14e>
 8009188:	45a6      	cmp	lr, r4
 800918a:	f200 80b4 	bhi.w	80092f6 <__udivmoddi4+0x2b6>
 800918e:	4610      	mov	r0, r2
 8009190:	eba4 040e 	sub.w	r4, r4, lr
 8009194:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8009198:	e7a0      	b.n	80090dc <__udivmoddi4+0x9c>
 800919a:	f1c1 0720 	rsb	r7, r1, #32
 800919e:	408b      	lsls	r3, r1
 80091a0:	fa22 fc07 	lsr.w	ip, r2, r7
 80091a4:	ea4c 0c03 	orr.w	ip, ip, r3
 80091a8:	fa25 fa07 	lsr.w	sl, r5, r7
 80091ac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80091b0:	fbba f8f9 	udiv	r8, sl, r9
 80091b4:	408d      	lsls	r5, r1
 80091b6:	fa20 f307 	lsr.w	r3, r0, r7
 80091ba:	fb09 aa18 	mls	sl, r9, r8, sl
 80091be:	fa1f fe8c 	uxth.w	lr, ip
 80091c2:	432b      	orrs	r3, r5
 80091c4:	fa00 f501 	lsl.w	r5, r0, r1
 80091c8:	fb08 f00e 	mul.w	r0, r8, lr
 80091cc:	0c1c      	lsrs	r4, r3, #16
 80091ce:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80091d2:	42a0      	cmp	r0, r4
 80091d4:	fa02 f201 	lsl.w	r2, r2, r1
 80091d8:	d90b      	bls.n	80091f2 <__udivmoddi4+0x1b2>
 80091da:	eb1c 0404 	adds.w	r4, ip, r4
 80091de:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80091e2:	f080 8086 	bcs.w	80092f2 <__udivmoddi4+0x2b2>
 80091e6:	42a0      	cmp	r0, r4
 80091e8:	f240 8083 	bls.w	80092f2 <__udivmoddi4+0x2b2>
 80091ec:	f1a8 0802 	sub.w	r8, r8, #2
 80091f0:	4464      	add	r4, ip
 80091f2:	1a24      	subs	r4, r4, r0
 80091f4:	b298      	uxth	r0, r3
 80091f6:	fbb4 f3f9 	udiv	r3, r4, r9
 80091fa:	fb09 4413 	mls	r4, r9, r3, r4
 80091fe:	fb03 fe0e 	mul.w	lr, r3, lr
 8009202:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8009206:	45a6      	cmp	lr, r4
 8009208:	d908      	bls.n	800921c <__udivmoddi4+0x1dc>
 800920a:	eb1c 0404 	adds.w	r4, ip, r4
 800920e:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8009212:	d26a      	bcs.n	80092ea <__udivmoddi4+0x2aa>
 8009214:	45a6      	cmp	lr, r4
 8009216:	d968      	bls.n	80092ea <__udivmoddi4+0x2aa>
 8009218:	3b02      	subs	r3, #2
 800921a:	4464      	add	r4, ip
 800921c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8009220:	fba0 9302 	umull	r9, r3, r0, r2
 8009224:	eba4 040e 	sub.w	r4, r4, lr
 8009228:	429c      	cmp	r4, r3
 800922a:	46c8      	mov	r8, r9
 800922c:	469e      	mov	lr, r3
 800922e:	d354      	bcc.n	80092da <__udivmoddi4+0x29a>
 8009230:	d051      	beq.n	80092d6 <__udivmoddi4+0x296>
 8009232:	2e00      	cmp	r6, #0
 8009234:	d067      	beq.n	8009306 <__udivmoddi4+0x2c6>
 8009236:	ebb5 0308 	subs.w	r3, r5, r8
 800923a:	eb64 040e 	sbc.w	r4, r4, lr
 800923e:	40cb      	lsrs	r3, r1
 8009240:	fa04 f707 	lsl.w	r7, r4, r7
 8009244:	431f      	orrs	r7, r3
 8009246:	40cc      	lsrs	r4, r1
 8009248:	e9c6 7400 	strd	r7, r4, [r6]
 800924c:	2100      	movs	r1, #0
 800924e:	e74a      	b.n	80090e6 <__udivmoddi4+0xa6>
 8009250:	fa02 fc03 	lsl.w	ip, r2, r3
 8009254:	f1c3 0020 	rsb	r0, r3, #32
 8009258:	40c1      	lsrs	r1, r0
 800925a:	409d      	lsls	r5, r3
 800925c:	fa24 f000 	lsr.w	r0, r4, r0
 8009260:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8009264:	4328      	orrs	r0, r5
 8009266:	fbb1 f5f7 	udiv	r5, r1, r7
 800926a:	fb07 1115 	mls	r1, r7, r5, r1
 800926e:	fa1f fe8c 	uxth.w	lr, ip
 8009272:	0c02      	lsrs	r2, r0, #16
 8009274:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009278:	fb05 f10e 	mul.w	r1, r5, lr
 800927c:	4291      	cmp	r1, r2
 800927e:	fa04 f403 	lsl.w	r4, r4, r3
 8009282:	d908      	bls.n	8009296 <__udivmoddi4+0x256>
 8009284:	eb1c 0202 	adds.w	r2, ip, r2
 8009288:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800928c:	d22f      	bcs.n	80092ee <__udivmoddi4+0x2ae>
 800928e:	4291      	cmp	r1, r2
 8009290:	d92d      	bls.n	80092ee <__udivmoddi4+0x2ae>
 8009292:	3d02      	subs	r5, #2
 8009294:	4462      	add	r2, ip
 8009296:	1a52      	subs	r2, r2, r1
 8009298:	fbb2 f1f7 	udiv	r1, r2, r7
 800929c:	fb07 2211 	mls	r2, r7, r1, r2
 80092a0:	b280      	uxth	r0, r0
 80092a2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80092a6:	fb01 f20e 	mul.w	r2, r1, lr
 80092aa:	4282      	cmp	r2, r0
 80092ac:	d908      	bls.n	80092c0 <__udivmoddi4+0x280>
 80092ae:	eb1c 0000 	adds.w	r0, ip, r0
 80092b2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80092b6:	d216      	bcs.n	80092e6 <__udivmoddi4+0x2a6>
 80092b8:	4282      	cmp	r2, r0
 80092ba:	d914      	bls.n	80092e6 <__udivmoddi4+0x2a6>
 80092bc:	3902      	subs	r1, #2
 80092be:	4460      	add	r0, ip
 80092c0:	1a80      	subs	r0, r0, r2
 80092c2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80092c6:	e73a      	b.n	800913e <__udivmoddi4+0xfe>
 80092c8:	4631      	mov	r1, r6
 80092ca:	4630      	mov	r0, r6
 80092cc:	e70b      	b.n	80090e6 <__udivmoddi4+0xa6>
 80092ce:	4671      	mov	r1, lr
 80092d0:	e6e9      	b.n	80090a6 <__udivmoddi4+0x66>
 80092d2:	4610      	mov	r0, r2
 80092d4:	e6fe      	b.n	80090d4 <__udivmoddi4+0x94>
 80092d6:	454d      	cmp	r5, r9
 80092d8:	d2ab      	bcs.n	8009232 <__udivmoddi4+0x1f2>
 80092da:	ebb9 0802 	subs.w	r8, r9, r2
 80092de:	eb63 0e0c 	sbc.w	lr, r3, ip
 80092e2:	3801      	subs	r0, #1
 80092e4:	e7a5      	b.n	8009232 <__udivmoddi4+0x1f2>
 80092e6:	4641      	mov	r1, r8
 80092e8:	e7ea      	b.n	80092c0 <__udivmoddi4+0x280>
 80092ea:	4603      	mov	r3, r0
 80092ec:	e796      	b.n	800921c <__udivmoddi4+0x1dc>
 80092ee:	4645      	mov	r5, r8
 80092f0:	e7d1      	b.n	8009296 <__udivmoddi4+0x256>
 80092f2:	46d0      	mov	r8, sl
 80092f4:	e77d      	b.n	80091f2 <__udivmoddi4+0x1b2>
 80092f6:	4464      	add	r4, ip
 80092f8:	3802      	subs	r0, #2
 80092fa:	e749      	b.n	8009190 <__udivmoddi4+0x150>
 80092fc:	3d02      	subs	r5, #2
 80092fe:	4462      	add	r2, ip
 8009300:	e731      	b.n	8009166 <__udivmoddi4+0x126>
 8009302:	4608      	mov	r0, r1
 8009304:	e70a      	b.n	800911c <__udivmoddi4+0xdc>
 8009306:	4631      	mov	r1, r6
 8009308:	e6ed      	b.n	80090e6 <__udivmoddi4+0xa6>
 800930a:	bf00      	nop

0800930c <RemoteConfig::HandleList()>:
 800930c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009310:	6801      	ldr	r1, [r0, #0]
 8009312:	4604      	mov	r4, r0
 8009314:	2012      	movs	r0, #18
 8009316:	f04f 080c 	mov.w	r8, #12
 800931a:	4a29      	ldr	r2, [pc, #164]	; (80093c0 <RemoteConfig::HandleList()+0xb4>)
 800931c:	4b29      	ldr	r3, [pc, #164]	; (80093c4 <RemoteConfig::HandleList()+0xb8>)
 800931e:	fb00 2201 	mla	r2, r0, r1, r2
 8009322:	6860      	ldr	r0, [r4, #4]
 8009324:	4928      	ldr	r1, [pc, #160]	; (80093c8 <RemoteConfig::HandleList()+0xbc>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	fb08 1100 	mla	r1, r8, r0, r1
 800932c:	4e27      	ldr	r6, [pc, #156]	; (80093cc <RemoteConfig::HandleList()+0xc0>)
 800932e:	4828      	ldr	r0, [pc, #160]	; (80093d0 <RemoteConfig::HandleList()+0xc4>)
 8009330:	695f      	ldr	r7, [r3, #20]
 8009332:	6835      	ldr	r5, [r6, #0]
 8009334:	f890 9009 	ldrb.w	r9, [r0, #9]
 8009338:	b2fb      	uxtb	r3, r7
 800933a:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 800933e:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8009342:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8009346:	b089      	sub	sp, #36	; 0x24
 8009348:	3507      	adds	r5, #7
 800934a:	0e3f      	lsrs	r7, r7, #24
 800934c:	f1b9 0f00 	cmp.w	r9, #0
 8009350:	d01d      	beq.n	800938e <RemoteConfig::HandleList()+0x82>
 8009352:	3009      	adds	r0, #9
 8009354:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8009358:	e9cd 8005 	strd	r8, r0, [sp, #20]
 800935c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8009360:	4628      	mov	r0, r5
 8009362:	e9cd e701 	strd	lr, r7, [sp, #4]
 8009366:	4a1b      	ldr	r2, [pc, #108]	; (80093d4 <RemoteConfig::HandleList()+0xc8>)
 8009368:	f8cd c000 	str.w	ip, [sp]
 800936c:	f7ff fe40 	bl	8008ff0 <snprintf>
 8009370:	69e3      	ldr	r3, [r4, #28]
 8009372:	2b05      	cmp	r3, #5
 8009374:	d118      	bne.n	80093a8 <RemoteConfig::HandleList()+0x9c>
 8009376:	f642 1305 	movw	r3, #10501	; 0x2905
 800937a:	9300      	str	r3, [sp, #0]
 800937c:	69a3      	ldr	r3, [r4, #24]
 800937e:	b282      	uxth	r2, r0
 8009380:	4629      	mov	r1, r5
 8009382:	7d20      	ldrb	r0, [r4, #20]
 8009384:	f006 fed0 	bl	8010128 <udp_send>
 8009388:	b009      	add	sp, #36	; 0x24
 800938a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800938e:	e9cd 1804 	strd	r1, r8, [sp, #16]
 8009392:	e9cd 7202 	strd	r7, r2, [sp, #8]
 8009396:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800939a:	4628      	mov	r0, r5
 800939c:	e9cd ce00 	strd	ip, lr, [sp]
 80093a0:	4a0d      	ldr	r2, [pc, #52]	; (80093d8 <RemoteConfig::HandleList()+0xcc>)
 80093a2:	f7ff fe25 	bl	8008ff0 <snprintf>
 80093a6:	e7e3      	b.n	8009370 <RemoteConfig::HandleList()+0x64>
 80093a8:	2b06      	cmp	r3, #6
 80093aa:	d1ed      	bne.n	8009388 <RemoteConfig::HandleList()+0x7c>
 80093ac:	6833      	ldr	r3, [r6, #0]
 80093ae:	799b      	ldrb	r3, [r3, #6]
 80093b0:	2b2a      	cmp	r3, #42	; 0x2a
 80093b2:	d1e9      	bne.n	8009388 <RemoteConfig::HandleList()+0x7c>
 80093b4:	f642 1305 	movw	r3, #10501	; 0x2905
 80093b8:	9300      	str	r3, [sp, #0]
 80093ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80093be:	e7de      	b.n	800937e <RemoteConfig::HandleList()+0x72>
 80093c0:	08016480 	stmdaeq	r1, {r7, sl, sp, lr}
 80093c4:	2000863c 	andcs	r8, r0, ip, lsr r6
 80093c8:	08016546 	stmdaeq	r1, {r1, r2, r6, r8, sl, sp, lr}
 80093cc:	20000084 	andcs	r0, r0, r4, lsl #1
 80093d0:	20000088 	andcs	r0, r0, r8, lsl #1
 80093d4:	08016395 	stmdaeq	r1, {r0, r2, r4, r7, r8, r9, sp, lr}
 80093d8:	080163ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, r9, sp, lr}

080093dc <RemoteConfig::HandleDisplayGet()>:
 80093dc:	69c3      	ldr	r3, [r0, #28]
 80093de:	2b08      	cmp	r3, #8
 80093e0:	d11b      	bne.n	800941a <RemoteConfig::HandleDisplayGet()+0x3e>
 80093e2:	4b0e      	ldr	r3, [pc, #56]	; (800941c <RemoteConfig::HandleDisplayGet()+0x40>)
 80093e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4d0d      	ldr	r5, [pc, #52]	; (8009420 <RemoteConfig::HandleDisplayGet()+0x44>)
 80093ea:	7c19      	ldrb	r1, [r3, #16]
 80093ec:	4a0d      	ldr	r2, [pc, #52]	; (8009424 <RemoteConfig::HandleDisplayGet()+0x48>)
 80093ee:	4b0e      	ldr	r3, [pc, #56]	; (8009428 <RemoteConfig::HandleDisplayGet()+0x4c>)
 80093f0:	4604      	mov	r4, r0
 80093f2:	2900      	cmp	r1, #0
 80093f4:	bf18      	it	ne
 80093f6:	4613      	movne	r3, r2
 80093f8:	6828      	ldr	r0, [r5, #0]
 80093fa:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80093fe:	4a0b      	ldr	r2, [pc, #44]	; (800942c <RemoteConfig::HandleDisplayGet()+0x50>)
 8009400:	f7ff fdf6 	bl	8008ff0 <snprintf>
 8009404:	f642 1305 	movw	r3, #10501	; 0x2905
 8009408:	9300      	str	r3, [sp, #0]
 800940a:	b282      	uxth	r2, r0
 800940c:	69a3      	ldr	r3, [r4, #24]
 800940e:	6829      	ldr	r1, [r5, #0]
 8009410:	7d20      	ldrb	r0, [r4, #20]
 8009412:	f006 fe89 	bl	8010128 <udp_send>
 8009416:	b003      	add	sp, #12
 8009418:	bd30      	pop	{r4, r5, pc}
 800941a:	4770      	bx	lr
 800941c:	20009c68 	andcs	r9, r0, r8, ror #24
 8009420:	20000084 	andcs	r0, r0, r4, lsl #1
 8009424:	080163c7 	stmdaeq	r1, {r0, r1, r2, r6, r7, r8, r9, sp, lr}
 8009428:	080163c4 	stmdaeq	r1, {r2, r6, r7, r8, r9, sp, lr}
 800942c:	080163cb 	stmdaeq	r1, {r0, r1, r3, r6, r7, r8, r9, sp, lr}

08009430 <RemoteConfig::HandleTftpGet()>:
 8009430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009432:	4604      	mov	r4, r0
 8009434:	f000 fd86 	bl	8009f44 <RemoteConfig::PlatformHandleTftpGet()>
 8009438:	69e3      	ldr	r3, [r4, #28]
 800943a:	2b05      	cmp	r3, #5
 800943c:	d116      	bne.n	800946c <RemoteConfig::HandleTftpGet()+0x3c>
 800943e:	f894 1020 	ldrb.w	r1, [r4, #32]
 8009442:	4d0b      	ldr	r5, [pc, #44]	; (8009470 <RemoteConfig::HandleTftpGet()+0x40>)
 8009444:	4a0b      	ldr	r2, [pc, #44]	; (8009474 <RemoteConfig::HandleTftpGet()+0x44>)
 8009446:	4b0c      	ldr	r3, [pc, #48]	; (8009478 <RemoteConfig::HandleTftpGet()+0x48>)
 8009448:	6828      	ldr	r0, [r5, #0]
 800944a:	2900      	cmp	r1, #0
 800944c:	bf08      	it	eq
 800944e:	4613      	moveq	r3, r2
 8009450:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8009454:	4a09      	ldr	r2, [pc, #36]	; (800947c <RemoteConfig::HandleTftpGet()+0x4c>)
 8009456:	f7ff fdcb 	bl	8008ff0 <snprintf>
 800945a:	f642 1305 	movw	r3, #10501	; 0x2905
 800945e:	b282      	uxth	r2, r0
 8009460:	9300      	str	r3, [sp, #0]
 8009462:	6829      	ldr	r1, [r5, #0]
 8009464:	69a3      	ldr	r3, [r4, #24]
 8009466:	7d20      	ldrb	r0, [r4, #20]
 8009468:	f006 fe5e 	bl	8010128 <udp_send>
 800946c:	b003      	add	sp, #12
 800946e:	bd30      	pop	{r4, r5, pc}
 8009470:	20000084 	andcs	r0, r0, r4, lsl #1
 8009474:	080163c7 	stmdaeq	r1, {r0, r1, r2, r6, r7, r8, r9, sp, lr}
 8009478:	080163c4 	stmdaeq	r1, {r2, r6, r7, r8, r9, sp, lr}
 800947c:	080163d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r8, r9, sp, lr}

08009480 <RemoteConfig::HandleVersion()>:
 8009480:	69c3      	ldr	r3, [r0, #28]
 8009482:	2b08      	cmp	r3, #8
 8009484:	d114      	bne.n	80094b0 <RemoteConfig::HandleVersion()+0x30>
 8009486:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009488:	4d0a      	ldr	r5, [pc, #40]	; (80094b4 <RemoteConfig::HandleVersion()+0x34>)
 800948a:	4604      	mov	r4, r0
 800948c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8009490:	4b09      	ldr	r3, [pc, #36]	; (80094b8 <RemoteConfig::HandleVersion()+0x38>)
 8009492:	4a0a      	ldr	r2, [pc, #40]	; (80094bc <RemoteConfig::HandleVersion()+0x3c>)
 8009494:	6828      	ldr	r0, [r5, #0]
 8009496:	f7ff fdab 	bl	8008ff0 <snprintf>
 800949a:	f642 1305 	movw	r3, #10501	; 0x2905
 800949e:	9300      	str	r3, [sp, #0]
 80094a0:	b282      	uxth	r2, r0
 80094a2:	69a3      	ldr	r3, [r4, #24]
 80094a4:	6829      	ldr	r1, [r5, #0]
 80094a6:	7d20      	ldrb	r0, [r4, #20]
 80094a8:	f006 fe3e 	bl	8010128 <udp_send>
 80094ac:	b003      	add	sp, #12
 80094ae:	bd30      	pop	{r4, r5, pc}
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	20000084 	andcs	r0, r0, r4, lsl #1
 80094b8:	20009d0e 	andcs	r9, r0, lr, lsl #26
 80094bc:	080163e0 	stmdaeq	r1, {r5, r6, r7, r8, r9, sp, lr}

080094c0 <RemoteConfig::HandleUptime()>:
 80094c0:	7bc3      	ldrb	r3, [r0, #15]
 80094c2:	b1e3      	cbz	r3, 80094fe <RemoteConfig::HandleUptime()+0x3e>
 80094c4:	4b0e      	ldr	r3, [pc, #56]	; (8009500 <RemoteConfig::HandleUptime()+0x40>)
 80094c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	69c3      	ldr	r3, [r0, #28]
 80094cc:	4604      	mov	r4, r0
 80094ce:	2b07      	cmp	r3, #7
 80094d0:	d113      	bne.n	80094fa <RemoteConfig::HandleUptime()+0x3a>
 80094d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80094d6:	4d0b      	ldr	r5, [pc, #44]	; (8009504 <RemoteConfig::HandleUptime()+0x44>)
 80094d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80094dc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80094e0:	4a09      	ldr	r2, [pc, #36]	; (8009508 <RemoteConfig::HandleUptime()+0x48>)
 80094e2:	6828      	ldr	r0, [r5, #0]
 80094e4:	f7ff fd84 	bl	8008ff0 <snprintf>
 80094e8:	f642 1305 	movw	r3, #10501	; 0x2905
 80094ec:	9300      	str	r3, [sp, #0]
 80094ee:	b282      	uxth	r2, r0
 80094f0:	69a3      	ldr	r3, [r4, #24]
 80094f2:	6829      	ldr	r1, [r5, #0]
 80094f4:	7d20      	ldrb	r0, [r4, #20]
 80094f6:	f006 fe17 	bl	8010128 <udp_send>
 80094fa:	b003      	add	sp, #12
 80094fc:	bd30      	pop	{r4, r5, pc}
 80094fe:	4770      	bx	lr
 8009500:	20009d6c 	andcs	r9, r0, ip, ror #26
 8009504:	20000084 	andcs	r0, r0, r4, lsl #1
 8009508:	080163eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r8, r9, sp, lr}

0800950c <Display::Status(Display7SegmentMessage)>:
 800950c:	7c43      	ldrb	r3, [r0, #17]
 800950e:	b1bb      	cbz	r3, 8009540 <Display::Status(Display7SegmentMessage)+0x34>
 8009510:	b513      	push	{r0, r1, r4, lr}
 8009512:	2312      	movs	r3, #18
 8009514:	43c9      	mvns	r1, r1
 8009516:	4604      	mov	r4, r0
 8009518:	f88d 3004 	strb.w	r3, [sp, #4]
 800951c:	7a00      	ldrb	r0, [r0, #8]
 800951e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8009522:	f88d 3005 	strb.w	r3, [sp, #5]
 8009526:	f88d 1006 	strb.w	r1, [sp, #6]
 800952a:	f00c f803 	bl	8015534 <gd32_i2c_set_address>
 800952e:	68e0      	ldr	r0, [r4, #12]
 8009530:	f00b fff8 	bl	8015524 <gd32_i2c_set_baudrate>
 8009534:	2103      	movs	r1, #3
 8009536:	a801      	add	r0, sp, #4
 8009538:	f00c f802 	bl	8015540 <gd32_i2c_write>
 800953c:	b002      	add	sp, #8
 800953e:	bd10      	pop	{r4, pc}
 8009540:	4770      	bx	lr
	...

08009544 <RemoteConfig::HandleDisplaySet()>:
 8009544:	b508      	push	{r3, lr}
 8009546:	69c3      	ldr	r3, [r0, #28]
 8009548:	2b09      	cmp	r3, #9
 800954a:	d10a      	bne.n	8009562 <RemoteConfig::HandleDisplaySet()+0x1e>
 800954c:	4b05      	ldr	r3, [pc, #20]	; (8009564 <RemoteConfig::HandleDisplaySet()+0x20>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	7a59      	ldrb	r1, [r3, #9]
 8009552:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009556:	4259      	negs	r1, r3
 8009558:	4159      	adcs	r1, r3
 800955a:	4b03      	ldr	r3, [pc, #12]	; (8009568 <RemoteConfig::HandleDisplaySet()+0x24>)
 800955c:	6818      	ldr	r0, [r3, #0]
 800955e:	f7fe ff45 	bl	80083ec <Display::SetSleep(bool)>
 8009562:	bd08      	pop	{r3, pc}
 8009564:	20000084 	andcs	r0, r0, r4, lsl #1
 8009568:	20009c68 	andcs	r9, r0, r8, ror #24

0800956c <RemoteConfig::HandleTftpSet()>:
 800956c:	69c3      	ldr	r3, [r0, #28]
 800956e:	2b06      	cmp	r3, #6
 8009570:	d127      	bne.n	80095c2 <RemoteConfig::HandleTftpSet()+0x56>
 8009572:	b570      	push	{r4, r5, r6, lr}
 8009574:	4b13      	ldr	r3, [pc, #76]	; (80095c4 <RemoteConfig::HandleTftpSet()+0x58>)
 8009576:	4e14      	ldr	r6, [pc, #80]	; (80095c8 <RemoteConfig::HandleTftpSet()+0x5c>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4604      	mov	r4, r0
 800957c:	799b      	ldrb	r3, [r3, #6]
 800957e:	6835      	ldr	r5, [r6, #0]
 8009580:	2b30      	cmp	r3, #48	; 0x30
 8009582:	bf14      	ite	ne
 8009584:	2301      	movne	r3, #1
 8009586:	2300      	moveq	r3, #0
 8009588:	f880 3020 	strb.w	r3, [r0, #32]
 800958c:	d012      	beq.n	80095b4 <RemoteConfig::HandleTftpSet()+0x48>
 800958e:	4628      	mov	r0, r5
 8009590:	2100      	movs	r1, #0
 8009592:	f7fe ff2b 	bl	80083ec <Display::SetSleep(bool)>
 8009596:	6835      	ldr	r5, [r6, #0]
 8009598:	490c      	ldr	r1, [pc, #48]	; (80095cc <RemoteConfig::HandleTftpSet()+0x60>)
 800959a:	4628      	mov	r0, r5
 800959c:	f7fe fec8 	bl	8008330 <Display::TextStatus(char const*)>
 80095a0:	f244 0171 	movw	r1, #16497	; 0x4071
 80095a4:	4628      	mov	r0, r5
 80095a6:	f7ff ffb1 	bl	800950c <Display::Status(Display7SegmentMessage)>
 80095aa:	4620      	mov	r0, r4
 80095ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80095b0:	f000 bcc0 	b.w	8009f34 <RemoteConfig::PlatformHandleTftpSet()>
 80095b4:	4906      	ldr	r1, [pc, #24]	; (80095d0 <RemoteConfig::HandleTftpSet()+0x64>)
 80095b6:	4628      	mov	r0, r5
 80095b8:	f7fe feba 	bl	8008330 <Display::TextStatus(char const*)>
 80095bc:	f248 0171 	movw	r1, #32881	; 0x8071
 80095c0:	e7f0      	b.n	80095a4 <RemoteConfig::HandleTftpSet()+0x38>
 80095c2:	4770      	bx	lr
 80095c4:	20000084 	andcs	r0, r0, r4, lsl #1
 80095c8:	20009c68 	andcs	r9, r0, r8, ror #24
 80095cc:	080163f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, r9, sp, lr}
 80095d0:	0801640a 	stmdaeq	r1, {r1, r3, sl, sp, lr}

080095d4 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>:
 80095d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095d8:	2500      	movs	r5, #0
 80095da:	461f      	mov	r7, r3
 80095dc:	6083      	str	r3, [r0, #8]
 80095de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80095e2:	4690      	mov	r8, r2
 80095e4:	4689      	mov	r9, r1
 80095e6:	4e12      	ldr	r6, [pc, #72]	; (8009630 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x5c>)
 80095e8:	e9c0 3505 	strd	r3, r5, [r0, #20]
 80095ec:	f8df a044 	ldr.w	sl, [pc, #68]	; 8009634 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x60>
 80095f0:	4b11      	ldr	r3, [pc, #68]	; (8009638 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x64>)
 80095f2:	e9c0 1200 	strd	r1, r2, [r0]
 80095f6:	4604      	mov	r4, r0
 80095f8:	6018      	str	r0, [r3, #0]
 80095fa:	4631      	mov	r1, r6
 80095fc:	60c5      	str	r5, [r0, #12]
 80095fe:	8205      	strh	r5, [r0, #16]
 8009600:	61c5      	str	r5, [r0, #28]
 8009602:	f880 5020 	strb.w	r5, [r0, #32]
 8009606:	f8da 0000 	ldr.w	r0, [sl]
 800960a:	f007 fa58 	bl	8010abe <Network::MacAddressCopyTo(unsigned char*)>
 800960e:	f642 1105 	movw	r1, #10501	; 0x2905
 8009612:	f8da 0000 	ldr.w	r0, [sl]
 8009616:	f886 9006 	strb.w	r9, [r6, #6]
 800961a:	f886 8007 	strb.w	r8, [r6, #7]
 800961e:	7237      	strb	r7, [r6, #8]
 8009620:	7275      	strb	r5, [r6, #9]
 8009622:	f007 fa46 	bl	8010ab2 <Network::Begin(unsigned short)>
 8009626:	6160      	str	r0, [r4, #20]
 8009628:	4620      	mov	r0, r4
 800962a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800962e:	bf00      	nop
 8009630:	20000088 	andcs	r0, r0, r8, lsl #1
 8009634:	2000863c 	andcs	r8, r0, ip, lsr r6
 8009638:	200000ac 	andcs	r0, r0, ip, lsr #1

0800963c <RemoteConfig::SetDisable(bool)>:
 800963c:	b538      	push	{r3, r4, r5, lr}
 800963e:	4604      	mov	r4, r0
 8009640:	7b03      	ldrb	r3, [r0, #12]
 8009642:	b161      	cbz	r1, 800965e <RemoteConfig::SetDisable(bool)+0x22>
 8009644:	b953      	cbnz	r3, 800965c <RemoteConfig::SetDisable(bool)+0x20>
 8009646:	4b0c      	ldr	r3, [pc, #48]	; (8009678 <RemoteConfig::SetDisable(bool)+0x3c>)
 8009648:	f642 1105 	movw	r1, #10501	; 0x2905
 800964c:	6818      	ldr	r0, [r3, #0]
 800964e:	f007 fa33 	bl	8010ab8 <Network::End(unsigned short)>
 8009652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009656:	6163      	str	r3, [r4, #20]
 8009658:	2301      	movs	r3, #1
 800965a:	7323      	strb	r3, [r4, #12]
 800965c:	bd38      	pop	{r3, r4, r5, pc}
 800965e:	2b00      	cmp	r3, #0
 8009660:	d0fc      	beq.n	800965c <RemoteConfig::SetDisable(bool)+0x20>
 8009662:	4b05      	ldr	r3, [pc, #20]	; (8009678 <RemoteConfig::SetDisable(bool)+0x3c>)
 8009664:	460d      	mov	r5, r1
 8009666:	6818      	ldr	r0, [r3, #0]
 8009668:	f642 1105 	movw	r1, #10501	; 0x2905
 800966c:	f007 fa21 	bl	8010ab2 <Network::Begin(unsigned short)>
 8009670:	7325      	strb	r5, [r4, #12]
 8009672:	6160      	str	r0, [r4, #20]
 8009674:	e7f2      	b.n	800965c <RemoteConfig::SetDisable(bool)+0x20>
 8009676:	bf00      	nop
 8009678:	2000863c 	andcs	r8, r0, ip, lsr r6

0800967c <RemoteConfig::SetDisplayName(char const*)>:
 800967c:	2217      	movs	r2, #23
 800967e:	4809      	ldr	r0, [pc, #36]	; (80096a4 <RemoteConfig::SetDisplayName(char const*)+0x28>)
 8009680:	b508      	push	{r3, lr}
 8009682:	1e4b      	subs	r3, r1, #1
 8009684:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8009688:	b911      	cbnz	r1, 8009690 <RemoteConfig::SetDisplayName(char const*)+0x14>
 800968a:	f00a fd15 	bl	80140b8 <memset>
 800968e:	e003      	b.n	8009698 <RemoteConfig::SetDisplayName(char const*)+0x1c>
 8009690:	3a01      	subs	r2, #1
 8009692:	f800 1b01 	strb.w	r1, [r0], #1
 8009696:	d1f5      	bne.n	8009684 <RemoteConfig::SetDisplayName(char const*)+0x8>
 8009698:	2200      	movs	r2, #0
 800969a:	4b03      	ldr	r3, [pc, #12]	; (80096a8 <RemoteConfig::SetDisplayName(char const*)+0x2c>)
 800969c:	f883 2020 	strb.w	r2, [r3, #32]
 80096a0:	bd08      	pop	{r3, pc}
 80096a2:	bf00      	nop
 80096a4:	20000091 	mulcs	r0, r1, r0
 80096a8:	20000088 	andcs	r0, r0, r8, lsl #1

080096ac <RemoteConfig::HandleGet(void*, unsigned int)>:
 80096ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096ae:	4604      	mov	r4, r0
 80096b0:	4616      	mov	r6, r2
 80096b2:	460d      	mov	r5, r1
 80096b4:	4f28      	ldr	r7, [pc, #160]	; (8009758 <RemoteConfig::HandleGet(void*, unsigned int)+0xac>)
 80096b6:	b085      	sub	sp, #20
 80096b8:	b9a9      	cbnz	r1, 80096e6 <RemoteConfig::HandleGet(void*, unsigned int)+0x3a>
 80096ba:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 80096be:	6839      	ldr	r1, [r7, #0]
 80096c0:	aa03      	add	r2, sp, #12
 80096c2:	3105      	adds	r1, #5
 80096c4:	9303      	str	r3, [sp, #12]
 80096c6:	f000 fc0b 	bl	8009ee0 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 80096ca:	1e03      	subs	r3, r0, #0
 80096cc:	da1b      	bge.n	8009706 <RemoteConfig::HandleGet(void*, unsigned int)+0x5a>
 80096ce:	f642 1305 	movw	r3, #10501	; 0x2905
 80096d2:	220b      	movs	r2, #11
 80096d4:	9300      	str	r3, [sp, #0]
 80096d6:	4921      	ldr	r1, [pc, #132]	; (800975c <RemoteConfig::HandleGet(void*, unsigned int)+0xb0>)
 80096d8:	69a3      	ldr	r3, [r4, #24]
 80096da:	7d20      	ldrb	r0, [r4, #20]
 80096dc:	f006 fd24 	bl	8010128 <udp_send>
 80096e0:	200c      	movs	r0, #12
 80096e2:	b005      	add	sp, #20
 80096e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096e6:	9203      	str	r2, [sp, #12]
 80096e8:	aa03      	add	r2, sp, #12
 80096ea:	6039      	str	r1, [r7, #0]
 80096ec:	f000 fbf8 	bl	8009ee0 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 80096f0:	1e03      	subs	r3, r0, #0
 80096f2:	da08      	bge.n	8009706 <RemoteConfig::HandleGet(void*, unsigned int)+0x5a>
 80096f4:	2e0b      	cmp	r6, #11
 80096f6:	4632      	mov	r2, r6
 80096f8:	4628      	mov	r0, r5
 80096fa:	bf28      	it	cs
 80096fc:	220b      	movcs	r2, #11
 80096fe:	4917      	ldr	r1, [pc, #92]	; (800975c <RemoteConfig::HandleGet(void*, unsigned int)+0xb0>)
 8009700:	f00a fcb8 	bl	8014074 <memcpy>
 8009704:	e7ec      	b.n	80096e0 <RemoteConfig::HandleGet(void*, unsigned int)+0x34>
 8009706:	221c      	movs	r2, #28
 8009708:	4353      	muls	r3, r2
 800970a:	4915      	ldr	r1, [pc, #84]	; (8009760 <RemoteConfig::HandleGet(void*, unsigned int)+0xb4>)
 800970c:	18ca      	adds	r2, r1, r3
 800970e:	6852      	ldr	r2, [r2, #4]
 8009710:	58cb      	ldr	r3, [r1, r3]
 8009712:	ea4f 0c62 	mov.w	ip, r2, asr #1
 8009716:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800971a:	07d2      	lsls	r2, r2, #31
 800971c:	bf48      	it	mi
 800971e:	f854 200c 	ldrmi.w	r2, [r4, ip]
 8009722:	a903      	add	r1, sp, #12
 8009724:	bf48      	it	mi
 8009726:	58d3      	ldrmi	r3, [r2, r3]
 8009728:	4798      	blx	r3
 800972a:	b95d      	cbnz	r5, 8009744 <RemoteConfig::HandleGet(void*, unsigned int)+0x98>
 800972c:	f642 1305 	movw	r3, #10501	; 0x2905
 8009730:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8009734:	9300      	str	r3, [sp, #0]
 8009736:	6839      	ldr	r1, [r7, #0]
 8009738:	69a3      	ldr	r3, [r4, #24]
 800973a:	7d20      	ldrb	r0, [r4, #20]
 800973c:	f006 fcf4 	bl	8010128 <udp_send>
 8009740:	9803      	ldr	r0, [sp, #12]
 8009742:	e7ce      	b.n	80096e2 <RemoteConfig::HandleGet(void*, unsigned int)+0x36>
 8009744:	9a03      	ldr	r2, [sp, #12]
 8009746:	4628      	mov	r0, r5
 8009748:	42b2      	cmp	r2, r6
 800974a:	bf28      	it	cs
 800974c:	4632      	movcs	r2, r6
 800974e:	6839      	ldr	r1, [r7, #0]
 8009750:	f00a fc9b 	bl	801408a <memmove>
 8009754:	e7f4      	b.n	8009740 <RemoteConfig::HandleGet(void*, unsigned int)+0x94>
 8009756:	bf00      	nop
 8009758:	20000084 	andcs	r0, r0, r4, lsl #1
 800975c:	0801641d 	stmdaeq	r1, {r0, r2, r3, r4, sl, sp, lr}
 8009760:	08016710 	stmdaeq	r1, {r4, r8, r9, sl, sp, lr}

08009764 <RemoteConfig::HandleGetNoParams()>:
 8009764:	2200      	movs	r2, #0
 8009766:	4611      	mov	r1, r2
 8009768:	f7ff bfa0 	b.w	80096ac <RemoteConfig::HandleGet(void*, unsigned int)>

0800976c <RemoteConfig::HandleGetRconfigTxt(unsigned int&)>:
 800976c:	b510      	push	{r4, lr}
 800976e:	460c      	mov	r4, r1
 8009770:	4b07      	ldr	r3, [pc, #28]	; (8009790 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x24>)
 8009772:	b08a      	sub	sp, #40	; 0x28
 8009774:	6819      	ldr	r1, [r3, #0]
 8009776:	a801      	add	r0, sp, #4
 8009778:	f000 fa0e 	bl	8009b98 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 800977c:	4905      	ldr	r1, [pc, #20]	; (8009794 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x28>)
 800977e:	4623      	mov	r3, r4
 8009780:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009784:	6809      	ldr	r1, [r1, #0]
 8009786:	a801      	add	r0, sp, #4
 8009788:	f000 fb2a 	bl	8009de0 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>
 800978c:	b00a      	add	sp, #40	; 0x28
 800978e:	bd10      	pop	{r4, pc}
 8009790:	20009c34 	andcs	r9, r0, r4, lsr ip
 8009794:	20000084 	andcs	r0, r0, r4, lsl #1

08009798 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)>:
 8009798:	b510      	push	{r4, lr}
 800979a:	460c      	mov	r4, r1
 800979c:	4b07      	ldr	r3, [pc, #28]	; (80097bc <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x24>)
 800979e:	b09a      	sub	sp, #104	; 0x68
 80097a0:	6819      	ldr	r1, [r3, #0]
 80097a2:	a801      	add	r0, sp, #4
 80097a4:	f007 fbfa 	bl	8010f9c <NetworkParams::NetworkParams(NetworkParamsStore*)>
 80097a8:	4905      	ldr	r1, [pc, #20]	; (80097c0 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x28>)
 80097aa:	4623      	mov	r3, r4
 80097ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80097b0:	6809      	ldr	r1, [r1, #0]
 80097b2:	a801      	add	r0, sp, #4
 80097b4:	f007 fdce 	bl	8011354 <NetworkParams::Save(char*, unsigned int, unsigned int&)>
 80097b8:	b01a      	add	sp, #104	; 0x68
 80097ba:	bd10      	pop	{r4, pc}
 80097bc:	20009c30 	andcs	r9, r0, r0, lsr ip
 80097c0:	20000084 	andcs	r0, r0, r4, lsl #1

080097c4 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)>:
 80097c4:	b510      	push	{r4, lr}
 80097c6:	460c      	mov	r4, r1
 80097c8:	4b07      	ldr	r3, [pc, #28]	; (80097e8 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x24>)
 80097ca:	b0a4      	sub	sp, #144	; 0x90
 80097cc:	6819      	ldr	r1, [r3, #0]
 80097ce:	a801      	add	r0, sp, #4
 80097d0:	f002 fb7c 	bl	800becc <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 80097d4:	4905      	ldr	r1, [pc, #20]	; (80097ec <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x28>)
 80097d6:	4623      	mov	r3, r4
 80097d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80097dc:	6809      	ldr	r1, [r1, #0]
 80097de:	a801      	add	r0, sp, #4
 80097e0:	f002 ff26 	bl	800c630 <ArtNetParams::Save(char*, unsigned int, unsigned int&)>
 80097e4:	b024      	add	sp, #144	; 0x90
 80097e6:	bd10      	pop	{r4, pc}
 80097e8:	20009c3c 	andcs	r9, r0, ip, lsr ip
 80097ec:	20000084 	andcs	r0, r0, r4, lsl #1

080097f0 <RemoteConfig::HandleGetE131Txt(unsigned int&)>:
 80097f0:	b510      	push	{r4, lr}
 80097f2:	460c      	mov	r4, r1
 80097f4:	4b07      	ldr	r3, [pc, #28]	; (8009814 <RemoteConfig::HandleGetE131Txt(unsigned int&)+0x24>)
 80097f6:	b08a      	sub	sp, #40	; 0x28
 80097f8:	6819      	ldr	r1, [r3, #0]
 80097fa:	a801      	add	r0, sp, #4
 80097fc:	f003 ff50 	bl	800d6a0 <E131Params::E131Params(E131ParamsStore*)>
 8009800:	4905      	ldr	r1, [pc, #20]	; (8009818 <RemoteConfig::HandleGetE131Txt(unsigned int&)+0x28>)
 8009802:	4623      	mov	r3, r4
 8009804:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009808:	6809      	ldr	r1, [r1, #0]
 800980a:	a801      	add	r0, sp, #4
 800980c:	f004 fa30 	bl	800dc70 <E131Params::Save(char*, unsigned int, unsigned int&)>
 8009810:	b00a      	add	sp, #40	; 0x28
 8009812:	bd10      	pop	{r4, pc}
 8009814:	20009c40 	andcs	r9, r0, r0, asr #24
 8009818:	20000084 	andcs	r0, r0, r4, lsl #1

0800981c <RemoteConfig::HandleGetDevicesTxt(unsigned int&)>:
 800981c:	b510      	push	{r4, lr}
 800981e:	460c      	mov	r4, r1
 8009820:	4b07      	ldr	r3, [pc, #28]	; (8009840 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)+0x24>)
 8009822:	b088      	sub	sp, #32
 8009824:	6819      	ldr	r1, [r3, #0]
 8009826:	a801      	add	r0, sp, #4
 8009828:	f004 fcda 	bl	800e1e0 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>
 800982c:	4905      	ldr	r1, [pc, #20]	; (8009844 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)+0x28>)
 800982e:	4623      	mov	r3, r4
 8009830:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009834:	6809      	ldr	r1, [r1, #0]
 8009836:	a801      	add	r0, sp, #4
 8009838:	f004 ffce 	bl	800e7d8 <PixelDmxParams::Save(char*, unsigned int, unsigned int&)>
 800983c:	b008      	add	sp, #32
 800983e:	bd10      	pop	{r4, pc}
 8009840:	20009c44 	andcs	r9, r0, r4, asr #24
 8009844:	20000084 	andcs	r0, r0, r4, lsl #1

08009848 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)>:
 8009848:	b510      	push	{r4, lr}
 800984a:	460c      	mov	r4, r1
 800984c:	4b07      	ldr	r3, [pc, #28]	; (800986c <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x24>)
 800984e:	b08a      	sub	sp, #40	; 0x28
 8009850:	6819      	ldr	r1, [r3, #0]
 8009852:	4668      	mov	r0, sp
 8009854:	f008 fb28 	bl	8011ea8 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 8009858:	4905      	ldr	r1, [pc, #20]	; (8009870 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x28>)
 800985a:	4623      	mov	r3, r4
 800985c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009860:	4668      	mov	r0, sp
 8009862:	6809      	ldr	r1, [r1, #0]
 8009864:	f008 fc58 	bl	8012118 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>
 8009868:	b00a      	add	sp, #40	; 0x28
 800986a:	bd10      	pop	{r4, pc}
 800986c:	20009c2c 	andcs	r9, r0, ip, lsr #24
 8009870:	20000084 	andcs	r0, r0, r4, lsl #1

08009874 <RemoteConfig::HandleSet(void*, unsigned int)>:
 8009874:	b530      	push	{r4, r5, lr}
 8009876:	b085      	sub	sp, #20
 8009878:	4604      	mov	r4, r0
 800987a:	9201      	str	r2, [sp, #4]
 800987c:	b9d1      	cbnz	r1, 80098b4 <RemoteConfig::HandleSet(void*, unsigned int)+0x40>
 800987e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8009882:	9303      	str	r3, [sp, #12]
 8009884:	4b19      	ldr	r3, [pc, #100]	; (80098ec <RemoteConfig::HandleSet(void*, unsigned int)+0x78>)
 8009886:	aa03      	add	r2, sp, #12
 8009888:	6819      	ldr	r1, [r3, #0]
 800988a:	3101      	adds	r1, #1
 800988c:	f000 fb28 	bl	8009ee0 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 8009890:	2800      	cmp	r0, #0
 8009892:	db0d      	blt.n	80098b0 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 8009894:	221c      	movs	r2, #28
 8009896:	4b16      	ldr	r3, [pc, #88]	; (80098f0 <RemoteConfig::HandleSet(void*, unsigned int)+0x7c>)
 8009898:	fb02 3300 	mla	r3, r2, r0, r3
 800989c:	68da      	ldr	r2, [r3, #12]
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	1051      	asrs	r1, r2, #1
 80098a2:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80098a6:	07d2      	lsls	r2, r2, #31
 80098a8:	bf44      	itt	mi
 80098aa:	5862      	ldrmi	r2, [r4, r1]
 80098ac:	58d3      	ldrmi	r3, [r2, r3]
 80098ae:	4798      	blx	r3
 80098b0:	b005      	add	sp, #20
 80098b2:	bd30      	pop	{r4, r5, pc}
 80098b4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80098b8:	d8fa      	bhi.n	80098b0 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 80098ba:	4b0e      	ldr	r3, [pc, #56]	; (80098f4 <RemoteConfig::HandleSet(void*, unsigned int)+0x80>)
 80098bc:	460d      	mov	r5, r1
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	07d9      	lsls	r1, r3, #31
 80098c2:	d50b      	bpl.n	80098dc <RemoteConfig::HandleSet(void*, unsigned int)+0x68>
 80098c4:	782b      	ldrb	r3, [r5, #0]
 80098c6:	2b7b      	cmp	r3, #123	; 0x7b
 80098c8:	d108      	bne.n	80098dc <RemoteConfig::HandleSet(void*, unsigned int)+0x68>
 80098ca:	1e51      	subs	r1, r2, #1
 80098cc:	4628      	mov	r0, r5
 80098ce:	2200      	movs	r2, #0
 80098d0:	b289      	uxth	r1, r1
 80098d2:	f009 fc45 	bl	8013160 <properties::convert_json_file(char*, unsigned short, bool)>
 80098d6:	1e02      	subs	r2, r0, #0
 80098d8:	ddea      	ble.n	80098b0 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 80098da:	b292      	uxth	r2, r2
 80098dc:	4b03      	ldr	r3, [pc, #12]	; (80098ec <RemoteConfig::HandleSet(void*, unsigned int)+0x78>)
 80098de:	61e2      	str	r2, [r4, #28]
 80098e0:	4620      	mov	r0, r4
 80098e2:	601d      	str	r5, [r3, #0]
 80098e4:	aa01      	add	r2, sp, #4
 80098e6:	1c69      	adds	r1, r5, #1
 80098e8:	e7d0      	b.n	800988c <RemoteConfig::HandleSet(void*, unsigned int)+0x18>
 80098ea:	bf00      	nop
 80098ec:	20000084 	andcs	r0, r0, r4, lsl #1
 80098f0:	08016710 	stmdaeq	r1, {r4, r8, r9, sl, sp, lr}
 80098f4:	20009c64 	andcs	r9, r0, r4, ror #24

080098f8 <RemoteConfig::Run()>:
 80098f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80098fc:	7b05      	ldrb	r5, [r0, #12]
 80098fe:	2d00      	cmp	r5, #0
 8009900:	d156      	bne.n	80099b0 <RemoteConfig::Run()+0xb8>
 8009902:	4e45      	ldr	r6, [pc, #276]	; (8009a18 <RemoteConfig::Run()+0x120>)
 8009904:	4604      	mov	r4, r0
 8009906:	f100 0218 	add.w	r2, r0, #24
 800990a:	4631      	mov	r1, r6
 800990c:	7d00      	ldrb	r0, [r0, #20]
 800990e:	f10d 030e 	add.w	r3, sp, #14
 8009912:	f006 fbe3 	bl	80100dc <udp_recv2>
 8009916:	2803      	cmp	r0, #3
 8009918:	61e0      	str	r0, [r4, #28]
 800991a:	d949      	bls.n	80099b0 <RemoteConfig::Run()+0xb8>
 800991c:	6831      	ldr	r1, [r6, #0]
 800991e:	1e43      	subs	r3, r0, #1
 8009920:	5cca      	ldrb	r2, [r1, r3]
 8009922:	2a0a      	cmp	r2, #10
 8009924:	bf18      	it	ne
 8009926:	4603      	movne	r3, r0
 8009928:	61e3      	str	r3, [r4, #28]
 800992a:	7808      	ldrb	r0, [r1, #0]
 800992c:	283f      	cmp	r0, #63	; 0x3f
 800992e:	d137      	bne.n	80099a0 <RemoteConfig::Run()+0xa8>
 8009930:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8009a1c <RemoteConfig::Run()+0x124>
 8009934:	462a      	mov	r2, r5
 8009936:	4667      	mov	r7, ip
 8009938:	3b01      	subs	r3, #1
 800993a:	61e3      	str	r3, [r4, #28]
 800993c:	f89c 500e 	ldrb.w	r5, [ip, #14]
 8009940:	f8bc 000c 	ldrh.w	r0, [ip, #12]
 8009944:	b16d      	cbz	r5, 8009962 <RemoteConfig::Run()+0x6a>
 8009946:	4283      	cmp	r3, r0
 8009948:	d80d      	bhi.n	8009966 <RemoteConfig::Run()+0x6e>
 800994a:	3201      	adds	r2, #1
 800994c:	2a09      	cmp	r2, #9
 800994e:	f10c 0c10 	add.w	ip, ip, #16
 8009952:	d1f3      	bne.n	800993c <RemoteConfig::Run()+0x44>
 8009954:	f642 1305 	movw	r3, #10501	; 0x2905
 8009958:	9300      	str	r3, [sp, #0]
 800995a:	2208      	movs	r2, #8
 800995c:	69a3      	ldr	r3, [r4, #24]
 800995e:	4930      	ldr	r1, [pc, #192]	; (8009a20 <RemoteConfig::Run()+0x128>)
 8009960:	e04e      	b.n	8009a00 <RemoteConfig::Run()+0x108>
 8009962:	4283      	cmp	r3, r0
 8009964:	d1f1      	bne.n	800994a <RemoteConfig::Run()+0x52>
 8009966:	460e      	mov	r6, r1
 8009968:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800996c:	4408      	add	r0, r1
 800996e:	3d01      	subs	r5, #1
 8009970:	4286      	cmp	r6, r0
 8009972:	d10b      	bne.n	800998c <RemoteConfig::Run()+0x94>
 8009974:	0113      	lsls	r3, r2, #4
 8009976:	eb07 1202 	add.w	r2, r7, r2, lsl #4
 800997a:	6852      	ldr	r2, [r2, #4]
 800997c:	58fb      	ldr	r3, [r7, r3]
 800997e:	1051      	asrs	r1, r2, #1
 8009980:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8009984:	07d2      	lsls	r2, r2, #31
 8009986:	d408      	bmi.n	800999a <RemoteConfig::Run()+0xa2>
 8009988:	4798      	blx	r3
 800998a:	e011      	b.n	80099b0 <RemoteConfig::Run()+0xb8>
 800998c:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8009990:	f815 ef01 	ldrb.w	lr, [r5, #1]!
 8009994:	45f0      	cmp	r8, lr
 8009996:	d0eb      	beq.n	8009970 <RemoteConfig::Run()+0x78>
 8009998:	e7d7      	b.n	800994a <RemoteConfig::Run()+0x52>
 800999a:	5862      	ldr	r2, [r4, r1]
 800999c:	58d3      	ldr	r3, [r2, r3]
 800999e:	e7f3      	b.n	8009988 <RemoteConfig::Run()+0x90>
 80099a0:	7b62      	ldrb	r2, [r4, #13]
 80099a2:	b92a      	cbnz	r2, 80099b0 <RemoteConfig::Run()+0xb8>
 80099a4:	2823      	cmp	r0, #35	; 0x23
 80099a6:	d106      	bne.n	80099b6 <RemoteConfig::Run()+0xbe>
 80099a8:	4611      	mov	r1, r2
 80099aa:	4620      	mov	r0, r4
 80099ac:	f7ff ff62 	bl	8009874 <RemoteConfig::HandleSet(void*, unsigned int)>
 80099b0:	b004      	add	sp, #16
 80099b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099b6:	2821      	cmp	r0, #33	; 0x21
 80099b8:	d1fa      	bne.n	80099b0 <RemoteConfig::Run()+0xb8>
 80099ba:	3b01      	subs	r3, #1
 80099bc:	2b05      	cmp	r3, #5
 80099be:	61e3      	str	r3, [r4, #28]
 80099c0:	d918      	bls.n	80099f4 <RemoteConfig::Run()+0xfc>
 80099c2:	460a      	mov	r2, r1
 80099c4:	4608      	mov	r0, r1
 80099c6:	4d17      	ldr	r5, [pc, #92]	; (8009a24 <RemoteConfig::Run()+0x12c>)
 80099c8:	f101 0c05 	add.w	ip, r1, #5
 80099cc:	4560      	cmp	r0, ip
 80099ce:	d01b      	beq.n	8009a08 <RemoteConfig::Run()+0x110>
 80099d0:	f815 6b01 	ldrb.w	r6, [r5], #1
 80099d4:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 80099d8:	42b7      	cmp	r7, r6
 80099da:	d0f7      	beq.n	80099cc <RemoteConfig::Run()+0xd4>
 80099dc:	2b08      	cmp	r3, #8
 80099de:	d909      	bls.n	80099f4 <RemoteConfig::Run()+0xfc>
 80099e0:	4b11      	ldr	r3, [pc, #68]	; (8009a28 <RemoteConfig::Run()+0x130>)
 80099e2:	3108      	adds	r1, #8
 80099e4:	428a      	cmp	r2, r1
 80099e6:	d015      	beq.n	8009a14 <RemoteConfig::Run()+0x11c>
 80099e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80099ec:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80099f0:	4285      	cmp	r5, r0
 80099f2:	d0f7      	beq.n	80099e4 <RemoteConfig::Run()+0xec>
 80099f4:	f642 1305 	movw	r3, #10501	; 0x2905
 80099f8:	2208      	movs	r2, #8
 80099fa:	9300      	str	r3, [sp, #0]
 80099fc:	69a3      	ldr	r3, [r4, #24]
 80099fe:	490b      	ldr	r1, [pc, #44]	; (8009a2c <RemoteConfig::Run()+0x134>)
 8009a00:	7d20      	ldrb	r0, [r4, #20]
 8009a02:	f006 fb91 	bl	8010128 <udp_send>
 8009a06:	e7d3      	b.n	80099b0 <RemoteConfig::Run()+0xb8>
 8009a08:	2300      	movs	r3, #0
 8009a0a:	4a09      	ldr	r2, [pc, #36]	; (8009a30 <RemoteConfig::Run()+0x138>)
 8009a0c:	011b      	lsls	r3, r3, #4
 8009a0e:	4620      	mov	r0, r4
 8009a10:	58d3      	ldr	r3, [r2, r3]
 8009a12:	e7b9      	b.n	8009988 <RemoteConfig::Run()+0x90>
 8009a14:	2301      	movs	r3, #1
 8009a16:	e7f8      	b.n	8009a0a <RemoteConfig::Run()+0x112>
 8009a18:	20000084 	andcs	r0, r0, r4, lsl #1
 8009a1c:	080165d8 	stmdaeq	r1, {r3, r4, r6, r7, r8, sl, sp, lr}
 8009a20:	08016441 	stmdaeq	r1, {r0, r6, sl, sp, lr}
 8009a24:	08016429 	stmdaeq	r1, {r0, r3, r5, sl, sp, lr}
 8009a28:	0801642f 	stmdaeq	r1, {r0, r1, r2, r3, r5, sl, sp, lr}
 8009a2c:	08016438 	stmdaeq	r1, {r3, r4, r5, sl, sp, lr}
 8009a30:	08016668 	stmdaeq	r1, {r3, r5, r6, r9, sl, sp, lr}

08009a34 <RemoteConfig::HandleSetRconfig()>:
 8009a34:	b510      	push	{r4, lr}
 8009a36:	4604      	mov	r4, r0
 8009a38:	4b08      	ldr	r3, [pc, #32]	; (8009a5c <RemoteConfig::HandleSetRconfig()+0x28>)
 8009a3a:	b08a      	sub	sp, #40	; 0x28
 8009a3c:	6819      	ldr	r1, [r3, #0]
 8009a3e:	a801      	add	r0, sp, #4
 8009a40:	f000 f8aa 	bl	8009b98 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 8009a44:	4b06      	ldr	r3, [pc, #24]	; (8009a60 <RemoteConfig::HandleSetRconfig()+0x2c>)
 8009a46:	69e2      	ldr	r2, [r4, #28]
 8009a48:	6819      	ldr	r1, [r3, #0]
 8009a4a:	a801      	add	r0, sp, #4
 8009a4c:	f000 f8ba 	bl	8009bc4 <RemoteConfigParams::Load(char const*, unsigned int)>
 8009a50:	4621      	mov	r1, r4
 8009a52:	a801      	add	r0, sp, #4
 8009a54:	f000 f9d1 	bl	8009dfa <RemoteConfigParams::Set(RemoteConfig*)>
 8009a58:	b00a      	add	sp, #40	; 0x28
 8009a5a:	bd10      	pop	{r4, pc}
 8009a5c:	20009c34 	andcs	r9, r0, r4, lsr ip
 8009a60:	20000084 	andcs	r0, r0, r4, lsl #1

08009a64 <RemoteConfig::HandleSetNetworkTxt()>:
 8009a64:	b510      	push	{r4, lr}
 8009a66:	4604      	mov	r4, r0
 8009a68:	4b06      	ldr	r3, [pc, #24]	; (8009a84 <RemoteConfig::HandleSetNetworkTxt()+0x20>)
 8009a6a:	b09a      	sub	sp, #104	; 0x68
 8009a6c:	6819      	ldr	r1, [r3, #0]
 8009a6e:	a801      	add	r0, sp, #4
 8009a70:	f007 fa94 	bl	8010f9c <NetworkParams::NetworkParams(NetworkParamsStore*)>
 8009a74:	4b04      	ldr	r3, [pc, #16]	; (8009a88 <RemoteConfig::HandleSetNetworkTxt()+0x24>)
 8009a76:	69e2      	ldr	r2, [r4, #28]
 8009a78:	6819      	ldr	r1, [r3, #0]
 8009a7a:	a801      	add	r0, sp, #4
 8009a7c:	f007 faa6 	bl	8010fcc <NetworkParams::Load(char const*, unsigned int)>
 8009a80:	b01a      	add	sp, #104	; 0x68
 8009a82:	bd10      	pop	{r4, pc}
 8009a84:	20009c30 	andcs	r9, r0, r0, lsr ip
 8009a88:	20000084 	andcs	r0, r0, r4, lsl #1

08009a8c <RemoteConfig::HandleSetArtnetTxt()>:
 8009a8c:	b510      	push	{r4, lr}
 8009a8e:	4604      	mov	r4, r0
 8009a90:	4b06      	ldr	r3, [pc, #24]	; (8009aac <RemoteConfig::HandleSetArtnetTxt()+0x20>)
 8009a92:	b0a4      	sub	sp, #144	; 0x90
 8009a94:	6819      	ldr	r1, [r3, #0]
 8009a96:	a801      	add	r0, sp, #4
 8009a98:	f002 fa18 	bl	800becc <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 8009a9c:	4b04      	ldr	r3, [pc, #16]	; (8009ab0 <RemoteConfig::HandleSetArtnetTxt()+0x24>)
 8009a9e:	69e2      	ldr	r2, [r4, #28]
 8009aa0:	6819      	ldr	r1, [r3, #0]
 8009aa2:	a801      	add	r0, sp, #4
 8009aa4:	f002 fa40 	bl	800bf28 <ArtNetParams::Load(char const*, unsigned int)>
 8009aa8:	b024      	add	sp, #144	; 0x90
 8009aaa:	bd10      	pop	{r4, pc}
 8009aac:	20009c3c 	andcs	r9, r0, ip, lsr ip
 8009ab0:	20000084 	andcs	r0, r0, r4, lsl #1

08009ab4 <RemoteConfig::HandleSetE131Txt()>:
 8009ab4:	b510      	push	{r4, lr}
 8009ab6:	4604      	mov	r4, r0
 8009ab8:	4b06      	ldr	r3, [pc, #24]	; (8009ad4 <RemoteConfig::HandleSetE131Txt()+0x20>)
 8009aba:	b08a      	sub	sp, #40	; 0x28
 8009abc:	6819      	ldr	r1, [r3, #0]
 8009abe:	a801      	add	r0, sp, #4
 8009ac0:	f003 fdee 	bl	800d6a0 <E131Params::E131Params(E131ParamsStore*)>
 8009ac4:	4b04      	ldr	r3, [pc, #16]	; (8009ad8 <RemoteConfig::HandleSetE131Txt()+0x24>)
 8009ac6:	69e2      	ldr	r2, [r4, #28]
 8009ac8:	6819      	ldr	r1, [r3, #0]
 8009aca:	a801      	add	r0, sp, #4
 8009acc:	f003 fe0c 	bl	800d6e8 <E131Params::Load(char const*, unsigned int)>
 8009ad0:	b00a      	add	sp, #40	; 0x28
 8009ad2:	bd10      	pop	{r4, pc}
 8009ad4:	20009c40 	andcs	r9, r0, r0, asr #24
 8009ad8:	20000084 	andcs	r0, r0, r4, lsl #1

08009adc <RemoteConfig::HandleSetDevicesTxt()>:
 8009adc:	b510      	push	{r4, lr}
 8009ade:	4604      	mov	r4, r0
 8009ae0:	4b06      	ldr	r3, [pc, #24]	; (8009afc <RemoteConfig::HandleSetDevicesTxt()+0x20>)
 8009ae2:	b088      	sub	sp, #32
 8009ae4:	6819      	ldr	r1, [r3, #0]
 8009ae6:	a801      	add	r0, sp, #4
 8009ae8:	f004 fb7a 	bl	800e1e0 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>
 8009aec:	4b04      	ldr	r3, [pc, #16]	; (8009b00 <RemoteConfig::HandleSetDevicesTxt()+0x24>)
 8009aee:	69e2      	ldr	r2, [r4, #28]
 8009af0:	6819      	ldr	r1, [r3, #0]
 8009af2:	a801      	add	r0, sp, #4
 8009af4:	f004 fb96 	bl	800e224 <PixelDmxParams::Load(char const*, unsigned int)>
 8009af8:	b008      	add	sp, #32
 8009afa:	bd10      	pop	{r4, pc}
 8009afc:	20009c44 	andcs	r9, r0, r4, asr #24
 8009b00:	20000084 	andcs	r0, r0, r4, lsl #1

08009b04 <RemoteConfig::HandleSetDisplayTxt()>:
 8009b04:	b510      	push	{r4, lr}
 8009b06:	4604      	mov	r4, r0
 8009b08:	4b06      	ldr	r3, [pc, #24]	; (8009b24 <RemoteConfig::HandleSetDisplayTxt()+0x20>)
 8009b0a:	b08a      	sub	sp, #40	; 0x28
 8009b0c:	6819      	ldr	r1, [r3, #0]
 8009b0e:	4668      	mov	r0, sp
 8009b10:	f008 f9ca 	bl	8011ea8 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 8009b14:	4b04      	ldr	r3, [pc, #16]	; (8009b28 <RemoteConfig::HandleSetDisplayTxt()+0x24>)
 8009b16:	4668      	mov	r0, sp
 8009b18:	69e2      	ldr	r2, [r4, #28]
 8009b1a:	6819      	ldr	r1, [r3, #0]
 8009b1c:	f008 f9de 	bl	8011edc <DisplayUdfParams::Load(char const*, unsigned int)>
 8009b20:	b00a      	add	sp, #40	; 0x28
 8009b22:	bd10      	pop	{r4, pc}
 8009b24:	20009c2c 	andcs	r9, r0, ip, lsr #24
 8009b28:	20000084 	andcs	r0, r0, r4, lsl #1

08009b2c <RemoteConfig::HandleFactory()>:
 8009b2c:	b538      	push	{r3, r4, r5, lr}
 8009b2e:	2400      	movs	r4, #0
 8009b30:	4d04      	ldr	r5, [pc, #16]	; (8009b44 <RemoteConfig::HandleFactory()+0x18>)
 8009b32:	4621      	mov	r1, r4
 8009b34:	6828      	ldr	r0, [r5, #0]
 8009b36:	3401      	adds	r4, #1
 8009b38:	f008 fd36 	bl	80125a8 <ConfigStore::ResetSetList(configstore::Store)>
 8009b3c:	2c1c      	cmp	r4, #28
 8009b3e:	d1f8      	bne.n	8009b32 <RemoteConfig::HandleFactory()+0x6>
 8009b40:	bd38      	pop	{r3, r4, r5, pc}
 8009b42:	bf00      	nop
 8009b44:	20009c24 	andcs	r9, r0, r4, lsr #24

08009b48 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 8009b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	8885      	ldrh	r5, [r0, #4]
 8009b4e:	88c1      	ldrh	r1, [r0, #6]
 8009b50:	42a9      	cmp	r1, r5
 8009b52:	d214      	bcs.n	8009b7e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 8009b54:	4604      	mov	r4, r0
 8009b56:	6800      	ldr	r0, [r0, #0]
 8009b58:	1a6d      	subs	r5, r5, r1
 8009b5a:	4408      	add	r0, r1
 8009b5c:	7a21      	ldrb	r1, [r4, #8]
 8009b5e:	b91a      	cbnz	r2, 8009b68 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 8009b60:	b919      	cbnz	r1, 8009b6a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 8009b62:	4a0a      	ldr	r2, [pc, #40]	; (8009b8c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 8009b64:	9100      	str	r1, [sp, #0]
 8009b66:	e002      	b.n	8009b6e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 8009b68:	b159      	cbz	r1, 8009b82 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 8009b6a:	9200      	str	r2, [sp, #0]
 8009b6c:	4a08      	ldr	r2, [pc, #32]	; (8009b90 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 8009b6e:	4629      	mov	r1, r5
 8009b70:	f7ff fa3e 	bl	8008ff0 <snprintf>
 8009b74:	4285      	cmp	r5, r0
 8009b76:	bfa2      	ittt	ge
 8009b78:	88e3      	ldrhge	r3, [r4, #6]
 8009b7a:	181b      	addge	r3, r3, r0
 8009b7c:	80e3      	strhge	r3, [r4, #6]
 8009b7e:	b003      	add	sp, #12
 8009b80:	bd30      	pop	{r4, r5, pc}
 8009b82:	2201      	movs	r2, #1
 8009b84:	9200      	str	r2, [sp, #0]
 8009b86:	4a03      	ldr	r2, [pc, #12]	; (8009b94 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 8009b88:	e7f1      	b.n	8009b6e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 8009b8a:	bf00      	nop
 8009b8c:	08016691 	stmdaeq	r1, {r0, r4, r7, r9, sl, sp, lr}
 8009b90:	08016688 	stmdaeq	r1, {r3, r7, r9, sl, sp, lr}
 8009b94:	08016692 	stmdaeq	r1, {r1, r4, r7, r9, sl, sp, lr}

08009b98 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>:
 8009b98:	b510      	push	{r4, lr}
 8009b9a:	4604      	mov	r4, r0
 8009b9c:	2220      	movs	r2, #32
 8009b9e:	f840 1b04 	str.w	r1, [r0], #4
 8009ba2:	2100      	movs	r1, #0
 8009ba4:	f00a fa88 	bl	80140b8 <memset>
 8009ba8:	4620      	mov	r0, r4
 8009baa:	bd10      	pop	{r4, pc}

08009bac <RemoteConfigParams::Load()>:
 8009bac:	b508      	push	{r3, lr}
 8009bae:	2300      	movs	r3, #0
 8009bb0:	4601      	mov	r1, r0
 8009bb2:	6043      	str	r3, [r0, #4]
 8009bb4:	6800      	ldr	r0, [r0, #0]
 8009bb6:	b120      	cbz	r0, 8009bc2 <RemoteConfigParams::Load()+0x16>
 8009bb8:	6803      	ldr	r3, [r0, #0]
 8009bba:	3104      	adds	r1, #4
 8009bbc:	68db      	ldr	r3, [r3, #12]
 8009bbe:	4798      	blx	r3
 8009bc0:	2001      	movs	r0, #1
 8009bc2:	bd08      	pop	{r3, pc}

08009bc4 <RemoteConfigParams::Load(char const*, unsigned int)>:
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009bc8:	460d      	mov	r5, r1
 8009bca:	4616      	mov	r6, r2
 8009bcc:	4604      	mov	r4, r0
 8009bce:	6043      	str	r3, [r0, #4]
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	490a      	ldr	r1, [pc, #40]	; (8009bfc <RemoteConfigParams::Load(char const*, unsigned int)+0x38>)
 8009bd4:	4668      	mov	r0, sp
 8009bd6:	f009 fc15 	bl	8013404 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8009bda:	4632      	mov	r2, r6
 8009bdc:	4629      	mov	r1, r5
 8009bde:	4668      	mov	r0, sp
 8009be0:	f009 fc14 	bl	801340c <ReadConfigFile::Read(char const*, unsigned int)>
 8009be4:	4621      	mov	r1, r4
 8009be6:	f851 0b04 	ldr.w	r0, [r1], #4
 8009bea:	6803      	ldr	r3, [r0, #0]
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	4798      	blx	r3
 8009bf0:	4668      	mov	r0, sp
 8009bf2:	f009 fc0a 	bl	801340a <ReadConfigFile::~ReadConfigFile()>
 8009bf6:	b002      	add	sp, #8
 8009bf8:	bd70      	pop	{r4, r5, r6, pc}
 8009bfa:	bf00      	nop
 8009bfc:	08009cbd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, sl, fp, ip, pc}

08009c00 <RemoteConfigParams::SetBool(unsigned char, unsigned int)>:
 8009c00:	6843      	ldr	r3, [r0, #4]
 8009c02:	b111      	cbz	r1, 8009c0a <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0xa>
 8009c04:	4313      	orrs	r3, r2
 8009c06:	6043      	str	r3, [r0, #4]
 8009c08:	4770      	bx	lr
 8009c0a:	ea23 0302 	bic.w	r3, r3, r2
 8009c0e:	e7fa      	b.n	8009c06 <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0x6>

08009c10 <RemoteConfigParams::callbackFunction(char const*)>:
 8009c10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c12:	460d      	mov	r5, r1
 8009c14:	4604      	mov	r4, r0
 8009c16:	4923      	ldr	r1, [pc, #140]	; (8009ca4 <RemoteConfigParams::callbackFunction(char const*)+0x94>)
 8009c18:	4628      	mov	r0, r5
 8009c1a:	f10d 0203 	add.w	r2, sp, #3
 8009c1e:	f009 fd2d 	bl	801367c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8009c22:	b940      	cbnz	r0, 8009c36 <RemoteConfigParams::callbackFunction(char const*)+0x26>
 8009c24:	2201      	movs	r2, #1
 8009c26:	4620      	mov	r0, r4
 8009c28:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8009c2c:	b003      	add	sp, #12
 8009c2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c32:	f7ff bfe5 	b.w	8009c00 <RemoteConfigParams::SetBool(unsigned char, unsigned int)>
 8009c36:	4628      	mov	r0, r5
 8009c38:	491b      	ldr	r1, [pc, #108]	; (8009ca8 <RemoteConfigParams::callbackFunction(char const*)+0x98>)
 8009c3a:	f10d 0203 	add.w	r2, sp, #3
 8009c3e:	f009 fd1d 	bl	801367c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8009c42:	b908      	cbnz	r0, 8009c48 <RemoteConfigParams::callbackFunction(char const*)+0x38>
 8009c44:	2202      	movs	r2, #2
 8009c46:	e7ee      	b.n	8009c26 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 8009c48:	4628      	mov	r0, r5
 8009c4a:	4918      	ldr	r1, [pc, #96]	; (8009cac <RemoteConfigParams::callbackFunction(char const*)+0x9c>)
 8009c4c:	f10d 0203 	add.w	r2, sp, #3
 8009c50:	f009 fd14 	bl	801367c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8009c54:	b908      	cbnz	r0, 8009c5a <RemoteConfigParams::callbackFunction(char const*)+0x4a>
 8009c56:	2204      	movs	r2, #4
 8009c58:	e7e5      	b.n	8009c26 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	4914      	ldr	r1, [pc, #80]	; (8009cb0 <RemoteConfigParams::callbackFunction(char const*)+0xa0>)
 8009c5e:	f10d 0203 	add.w	r2, sp, #3
 8009c62:	f009 fd0b 	bl	801367c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8009c66:	b908      	cbnz	r0, 8009c6c <RemoteConfigParams::callbackFunction(char const*)+0x5c>
 8009c68:	2208      	movs	r2, #8
 8009c6a:	e7dc      	b.n	8009c26 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 8009c6c:	4628      	mov	r0, r5
 8009c6e:	4911      	ldr	r1, [pc, #68]	; (8009cb4 <RemoteConfigParams::callbackFunction(char const*)+0xa4>)
 8009c70:	f10d 0203 	add.w	r2, sp, #3
 8009c74:	f009 fd02 	bl	801367c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8009c78:	b908      	cbnz	r0, 8009c7e <RemoteConfigParams::callbackFunction(char const*)+0x6e>
 8009c7a:	2220      	movs	r2, #32
 8009c7c:	e7d3      	b.n	8009c26 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 8009c7e:	2317      	movs	r3, #23
 8009c80:	4628      	mov	r0, r5
 8009c82:	9301      	str	r3, [sp, #4]
 8009c84:	490c      	ldr	r1, [pc, #48]	; (8009cb8 <RemoteConfigParams::callbackFunction(char const*)+0xa8>)
 8009c86:	ab01      	add	r3, sp, #4
 8009c88:	f104 020c 	add.w	r2, r4, #12
 8009c8c:	f009 fbf2 	bl	8013474 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 8009c90:	b930      	cbnz	r0, 8009ca0 <RemoteConfigParams::callbackFunction(char const*)+0x90>
 8009c92:	9b01      	ldr	r3, [sp, #4]
 8009c94:	4423      	add	r3, r4
 8009c96:	7318      	strb	r0, [r3, #12]
 8009c98:	6863      	ldr	r3, [r4, #4]
 8009c9a:	f043 0310 	orr.w	r3, r3, #16
 8009c9e:	6063      	str	r3, [r4, #4]
 8009ca0:	b003      	add	sp, #12
 8009ca2:	bd30      	pop	{r4, r5, pc}
 8009ca4:	080167b8 	stmdaeq	r1, {r3, r4, r5, r7, r8, r9, sl, sp, lr}
 8009ca8:	080167d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r8, r9, sl, sp, lr}
 8009cac:	080167e7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r8, r9, sl, sp, lr}
 8009cb0:	080167f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, r9, sl, sp, lr}
 8009cb4:	08016803 	stmdaeq	r1, {r0, r1, fp, sp, lr}
 8009cb8:	080167cc 	stmdaeq	r1, {r2, r3, r6, r7, r8, r9, sl, sp, lr}

08009cbc <RemoteConfigParams::staticCallbackFunction(void*, char const*)>:
 8009cbc:	f7ff bfa8 	b.w	8009c10 <RemoteConfigParams::callbackFunction(char const*)>

08009cc0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>:
 8009cc0:	b570      	push	{r4, r5, r6, lr}
 8009cc2:	4604      	mov	r4, r0
 8009cc4:	4615      	mov	r5, r2
 8009cc6:	461e      	mov	r6, r3
 8009cc8:	b086      	sub	sp, #24
 8009cca:	3004      	adds	r0, #4
 8009ccc:	2900      	cmp	r1, #0
 8009cce:	d041      	beq.n	8009d54 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x94>
 8009cd0:	2220      	movs	r2, #32
 8009cd2:	f00a f9da 	bl	801408a <memmove>
 8009cd6:	4633      	mov	r3, r6
 8009cd8:	462a      	mov	r2, r5
 8009cda:	4937      	ldr	r1, [pc, #220]	; (8009db8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf8>)
 8009cdc:	a803      	add	r0, sp, #12
 8009cde:	f009 faf1 	bl	80132c4 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 8009ce2:	6862      	ldr	r2, [r4, #4]
 8009ce4:	4935      	ldr	r1, [pc, #212]	; (8009dbc <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xfc>)
 8009ce6:	f002 0201 	and.w	r2, r2, #1
 8009cea:	a803      	add	r0, sp, #12
 8009cec:	f7ff ff2c 	bl	8009b48 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 8009cf0:	6862      	ldr	r2, [r4, #4]
 8009cf2:	4933      	ldr	r1, [pc, #204]	; (8009dc0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x100>)
 8009cf4:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8009cf8:	a803      	add	r0, sp, #12
 8009cfa:	f7ff ff25 	bl	8009b48 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 8009cfe:	6862      	ldr	r2, [r4, #4]
 8009d00:	4930      	ldr	r1, [pc, #192]	; (8009dc4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x104>)
 8009d02:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8009d06:	a803      	add	r0, sp, #12
 8009d08:	f7ff ff1e 	bl	8009b48 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 8009d0c:	6862      	ldr	r2, [r4, #4]
 8009d0e:	492e      	ldr	r1, [pc, #184]	; (8009dc8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x108>)
 8009d10:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8009d14:	a803      	add	r0, sp, #12
 8009d16:	f7ff ff17 	bl	8009b48 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 8009d1a:	6862      	ldr	r2, [r4, #4]
 8009d1c:	492b      	ldr	r1, [pc, #172]	; (8009dcc <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x10c>)
 8009d1e:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8009d22:	a803      	add	r0, sp, #12
 8009d24:	f7ff ff10 	bl	8009b48 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 8009d28:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8009d2c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8009d30:	6862      	ldr	r2, [r4, #4]
 8009d32:	42ab      	cmp	r3, r5
 8009d34:	d223      	bcs.n	8009d7e <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xbe>
 8009d36:	9803      	ldr	r0, [sp, #12]
 8009d38:	06d2      	lsls	r2, r2, #27
 8009d3a:	4418      	add	r0, r3
 8009d3c:	eba5 0503 	sub.w	r5, r5, r3
 8009d40:	f104 040c 	add.w	r4, r4, #12
 8009d44:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8009d48:	d40b      	bmi.n	8009d62 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa2>
 8009d4a:	b95b      	cbnz	r3, 8009d64 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa4>
 8009d4c:	4b20      	ldr	r3, [pc, #128]	; (8009dd0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 8009d4e:	4a21      	ldr	r2, [pc, #132]	; (8009dd4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>)
 8009d50:	9400      	str	r4, [sp, #0]
 8009d52:	e00a      	b.n	8009d6a <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xaa>
 8009d54:	6823      	ldr	r3, [r4, #0]
 8009d56:	4601      	mov	r1, r0
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	68d2      	ldr	r2, [r2, #12]
 8009d5e:	4790      	blx	r2
 8009d60:	e7b9      	b.n	8009cd6 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x16>
 8009d62:	b32b      	cbz	r3, 8009db0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf0>
 8009d64:	4b1a      	ldr	r3, [pc, #104]	; (8009dd0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 8009d66:	4a1c      	ldr	r2, [pc, #112]	; (8009dd8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x118>)
 8009d68:	9400      	str	r4, [sp, #0]
 8009d6a:	4629      	mov	r1, r5
 8009d6c:	f7ff f940 	bl	8008ff0 <snprintf>
 8009d70:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8009d74:	4285      	cmp	r5, r0
 8009d76:	bfa4      	itt	ge
 8009d78:	181b      	addge	r3, r3, r0
 8009d7a:	f8ad 3012 	strhge.w	r3, [sp, #18]
 8009d7e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8009d82:	b17b      	cbz	r3, 8009da4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xe4>
 8009d84:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8009d88:	9b03      	ldr	r3, [sp, #12]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	227d      	movs	r2, #125	; 0x7d
 8009d8e:	f803 2c01 	strb.w	r2, [r3, #-1]
 8009d92:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8009d96:	9903      	ldr	r1, [sp, #12]
 8009d98:	54ca      	strb	r2, [r1, r3]
 8009d9a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8009d9e:	3301      	adds	r3, #1
 8009da0:	f8ad 3012 	strh.w	r3, [sp, #18]
 8009da4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8009da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009daa:	601a      	str	r2, [r3, #0]
 8009dac:	b006      	add	sp, #24
 8009dae:	bd70      	pop	{r4, r5, r6, pc}
 8009db0:	4b07      	ldr	r3, [pc, #28]	; (8009dd0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 8009db2:	4a0a      	ldr	r2, [pc, #40]	; (8009ddc <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x11c>)
 8009db4:	9400      	str	r4, [sp, #0]
 8009db6:	e7d8      	b.n	8009d6a <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xaa>
 8009db8:	080167c0 	stmdaeq	r1, {r6, r7, r8, r9, sl, sp, lr}
 8009dbc:	080167b8 	stmdaeq	r1, {r3, r4, r5, r7, r8, r9, sl, sp, lr}
 8009dc0:	080167d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r8, r9, sl, sp, lr}
 8009dc4:	080167e7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r8, r9, sl, sp, lr}
 8009dc8:	080167f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, r9, sl, sp, lr}
 8009dcc:	08016803 	stmdaeq	r1, {r0, r1, fp, sp, lr}
 8009dd0:	080167cc 	stmdaeq	r1, {r2, r3, r6, r7, r8, r9, sl, sp, lr}
 8009dd4:	080166a4 	stmdaeq	r1, {r2, r5, r7, r9, sl, sp, lr}
 8009dd8:	08016699 	stmdaeq	r1, {r0, r3, r4, r7, r9, sl, sp, lr}
 8009ddc:	080166a5 	stmdaeq	r1, {r0, r2, r5, r7, r9, sl, sp, lr}

08009de0 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>:
 8009de0:	b513      	push	{r0, r1, r4, lr}
 8009de2:	6804      	ldr	r4, [r0, #0]
 8009de4:	b914      	cbnz	r4, 8009dec <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0xc>
 8009de6:	601c      	str	r4, [r3, #0]
 8009de8:	b002      	add	sp, #8
 8009dea:	bd10      	pop	{r4, pc}
 8009dec:	9300      	str	r3, [sp, #0]
 8009dee:	4613      	mov	r3, r2
 8009df0:	460a      	mov	r2, r1
 8009df2:	2100      	movs	r1, #0
 8009df4:	f7ff ff64 	bl	8009cc0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>
 8009df8:	e7f6      	b.n	8009de8 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0x8>

08009dfa <RemoteConfigParams::Set(RemoteConfig*)>:
 8009dfa:	b538      	push	{r3, r4, r5, lr}
 8009dfc:	460c      	mov	r4, r1
 8009dfe:	4605      	mov	r5, r0
 8009e00:	6841      	ldr	r1, [r0, #4]
 8009e02:	4620      	mov	r0, r4
 8009e04:	f001 0101 	and.w	r1, r1, #1
 8009e08:	f7ff fc18 	bl	800963c <RemoteConfig::SetDisable(bool)>
 8009e0c:	686b      	ldr	r3, [r5, #4]
 8009e0e:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8009e12:	7362      	strb	r2, [r4, #13]
 8009e14:	f3c3 0280 	ubfx	r2, r3, #2, #1
 8009e18:	73a2      	strb	r2, [r4, #14]
 8009e1a:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8009e1e:	73e2      	strb	r2, [r4, #15]
 8009e20:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8009e24:	06db      	lsls	r3, r3, #27
 8009e26:	7422      	strb	r2, [r4, #16]
 8009e28:	d506      	bpl.n	8009e38 <RemoteConfigParams::Set(RemoteConfig*)+0x3e>
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	f105 010c 	add.w	r1, r5, #12
 8009e30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e34:	f7ff bc22 	b.w	800967c <RemoteConfig::SetDisplayName(char const*)>
 8009e38:	bd38      	pop	{r3, r4, r5, pc}

08009e3a <RemoteConfigParams::Dump()>:
 8009e3a:	4770      	bx	lr

08009e3c <RemoteConfig::HandleReboot()>:
 8009e3c:	7b83      	ldrb	r3, [r0, #14]
 8009e3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d03c      	beq.n	8009ebe <RemoteConfig::HandleReboot()+0x82>
 8009e44:	2301      	movs	r3, #1
 8009e46:	4c1f      	ldr	r4, [pc, #124]	; (8009ec4 <RemoteConfig::HandleReboot()+0x88>)
 8009e48:	7443      	strb	r3, [r0, #17]
 8009e4a:	6825      	ldr	r5, [r4, #0]
 8009e4c:	69a8      	ldr	r0, [r5, #24]
 8009e4e:	b138      	cbz	r0, 8009e60 <RemoteConfig::HandleReboot()+0x24>
 8009e50:	2100      	movs	r1, #0
 8009e52:	6803      	ldr	r3, [r0, #0]
 8009e54:	7429      	strb	r1, [r5, #16]
 8009e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e58:	4798      	blx	r3
 8009e5a:	4b1b      	ldr	r3, [pc, #108]	; (8009ec8 <RemoteConfig::HandleReboot()+0x8c>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	606b      	str	r3, [r5, #4]
 8009e60:	4d1a      	ldr	r5, [pc, #104]	; (8009ecc <RemoteConfig::HandleReboot()+0x90>)
 8009e62:	6828      	ldr	r0, [r5, #0]
 8009e64:	f008 fc24 	bl	80126b0 <ConfigStore::Flash()>
 8009e68:	2800      	cmp	r0, #0
 8009e6a:	d1fa      	bne.n	8009e62 <RemoteConfig::HandleReboot()+0x26>
 8009e6c:	4b18      	ldr	r3, [pc, #96]	; (8009ed0 <RemoteConfig::HandleReboot()+0x94>)
 8009e6e:	6818      	ldr	r0, [r3, #0]
 8009e70:	f006 fe18 	bl	8010aa4 <Network::Shutdown()>
 8009e74:	4817      	ldr	r0, [pc, #92]	; (8009ed4 <RemoteConfig::HandleReboot()+0x98>)
 8009e76:	f7ff f893 	bl	8008fa0 <printf>
 8009e7a:	6823      	ldr	r3, [r4, #0]
 8009e7c:	6998      	ldr	r0, [r3, #24]
 8009e7e:	b110      	cbz	r0, 8009e86 <RemoteConfig::HandleReboot()+0x4a>
 8009e80:	6803      	ldr	r3, [r0, #0]
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	4798      	blx	r3
 8009e86:	6824      	ldr	r4, [r4, #0]
 8009e88:	4913      	ldr	r1, [pc, #76]	; (8009ed8 <RemoteConfig::HandleReboot()+0x9c>)
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	f7fe fa50 	bl	8008330 <Display::TextStatus(char const*)>
 8009e90:	7c63      	ldrb	r3, [r4, #17]
 8009e92:	b183      	cbz	r3, 8009eb6 <RemoteConfig::HandleReboot()+0x7a>
 8009e94:	f64b 7312 	movw	r3, #48914	; 0xbf12
 8009e98:	f8ad 3004 	strh.w	r3, [sp, #4]
 8009e9c:	23bf      	movs	r3, #191	; 0xbf
 8009e9e:	7a20      	ldrb	r0, [r4, #8]
 8009ea0:	f88d 3006 	strb.w	r3, [sp, #6]
 8009ea4:	f00b fb46 	bl	8015534 <gd32_i2c_set_address>
 8009ea8:	68e0      	ldr	r0, [r4, #12]
 8009eaa:	f00b fb3b 	bl	8015524 <gd32_i2c_set_baudrate>
 8009eae:	2103      	movs	r1, #3
 8009eb0:	a801      	add	r0, sp, #4
 8009eb2:	f00b fb45 	bl	8015540 <gd32_i2c_write>
 8009eb6:	4b09      	ldr	r3, [pc, #36]	; (8009edc <RemoteConfig::HandleReboot()+0xa0>)
 8009eb8:	6818      	ldr	r0, [r3, #0]
 8009eba:	f00a f80f 	bl	8013edc <Hardware::Reboot()>
 8009ebe:	b003      	add	sp, #12
 8009ec0:	bd30      	pop	{r4, r5, pc}
 8009ec2:	bf00      	nop
 8009ec4:	20009c68 	andcs	r9, r0, r8, ror #24
 8009ec8:	20009d6c 	andcs	r9, r0, ip, ror #26
 8009ecc:	20009c24 	andcs	r9, r0, r4, lsr #24
 8009ed0:	2000863c 	andcs	r8, r0, ip, lsr r6
 8009ed4:	080166ac 	stmdaeq	r1, {r2, r3, r5, r7, r9, sl, sp, lr}
 8009ed8:	080166bb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r9, sl, sp, lr}
 8009edc:	20009d58 	andcs	r9, r0, r8, asr sp

08009ee0 <RemoteConfig::GetIndex(void const*, unsigned int&)>:
 8009ee0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009ee4:	2000      	movs	r0, #0
 8009ee6:	4d12      	ldr	r5, [pc, #72]	; (8009f30 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x50>)
 8009ee8:	f10d 0c04 	add.w	ip, sp, #4
 8009eec:	6814      	ldr	r4, [r2, #0]
 8009eee:	7d2b      	ldrb	r3, [r5, #20]
 8009ef0:	692e      	ldr	r6, [r5, #16]
 8009ef2:	42a3      	cmp	r3, r4
 8009ef4:	bf34      	ite	cc
 8009ef6:	4664      	movcc	r4, ip
 8009ef8:	4614      	movcs	r4, r2
 8009efa:	9301      	str	r3, [sp, #4]
 8009efc:	6827      	ldr	r7, [r4, #0]
 8009efe:	460c      	mov	r4, r1
 8009f00:	3e01      	subs	r6, #1
 8009f02:	440f      	add	r7, r1
 8009f04:	42bc      	cmp	r4, r7
 8009f06:	d101      	bne.n	8009f0c <RemoteConfig::GetIndex(void const*, unsigned int&)+0x2c>
 8009f08:	6013      	str	r3, [r2, #0]
 8009f0a:	e00c      	b.n	8009f26 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x46>
 8009f0c:	f894 8000 	ldrb.w	r8, [r4]
 8009f10:	f816 ef01 	ldrb.w	lr, [r6, #1]!
 8009f14:	45f0      	cmp	r8, lr
 8009f16:	d009      	beq.n	8009f2c <RemoteConfig::GetIndex(void const*, unsigned int&)+0x4c>
 8009f18:	3001      	adds	r0, #1
 8009f1a:	2806      	cmp	r0, #6
 8009f1c:	f105 051c 	add.w	r5, r5, #28
 8009f20:	d1e4      	bne.n	8009eec <RemoteConfig::GetIndex(void const*, unsigned int&)+0xc>
 8009f22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f26:	b002      	add	sp, #8
 8009f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f2c:	3401      	adds	r4, #1
 8009f2e:	e7e9      	b.n	8009f04 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x24>
 8009f30:	08016710 	stmdaeq	r1, {r4, r8, r9, sl, sp, lr}

08009f34 <RemoteConfig::PlatformHandleTftpSet()>:
 8009f34:	f890 1020 	ldrb.w	r1, [r0, #32]
 8009f38:	b109      	cbz	r1, 8009f3e <RemoteConfig::PlatformHandleTftpSet()+0xa>
 8009f3a:	f24a 51a5 	movw	r1, #42405	; 0xa5a5
 8009f3e:	2002      	movs	r0, #2
 8009f40:	f00a ba82 	b.w	8014448 <bkp_data_write>

08009f44 <RemoteConfig::PlatformHandleTftpGet()>:
 8009f44:	b510      	push	{r4, lr}
 8009f46:	4604      	mov	r4, r0
 8009f48:	2002      	movs	r0, #2
 8009f4a:	f00a fa93 	bl	8014474 <bkp_data_read>
 8009f4e:	f24a 53a5 	movw	r3, #42405	; 0xa5a5
 8009f52:	1ac3      	subs	r3, r0, r3
 8009f54:	4258      	negs	r0, r3
 8009f56:	4158      	adcs	r0, r3
 8009f58:	f884 0020 	strb.w	r0, [r4, #32]
 8009f5c:	bd10      	pop	{r4, pc}

08009f5e <ArtNet4Node::IsStatusChanged()>:
 8009f5e:	4603      	mov	r3, r0
 8009f60:	f890 0fdc 	ldrb.w	r0, [r0, #4060]	; 0xfdc
 8009f64:	b110      	cbz	r0, 8009f6c <ArtNet4Node::IsStatusChanged()+0xe>
 8009f66:	2200      	movs	r2, #0
 8009f68:	f883 2fdc 	strb.w	r2, [r3, #4060]	; 0xfdc
 8009f6c:	4770      	bx	lr

08009f6e <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)>:
 8009f6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f70:	4616      	mov	r6, r2
 8009f72:	1d07      	adds	r7, r0, #4
 8009f74:	4604      	mov	r4, r0
 8009f76:	4613      	mov	r3, r2
 8009f78:	4638      	mov	r0, r7
 8009f7a:	f10d 0206 	add.w	r2, sp, #6
 8009f7e:	460d      	mov	r5, r1
 8009f80:	f000 fc6a 	bl	800a858 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 8009f84:	b1be      	cbz	r6, 8009fb6 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>
 8009f86:	b1b0      	cbz	r0, 8009fb6 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>
 8009f88:	2328      	movs	r3, #40	; 0x28
 8009f8a:	fb03 4305 	mla	r3, r3, r5, r4
 8009f8e:	f8d3 3a24 	ldr.w	r3, [r3, #2596]	; 0xa24
 8009f92:	2b01      	cmp	r3, #1
 8009f94:	d10f      	bne.n	8009fb6 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>
 8009f96:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 8009f9a:	b123      	cbz	r3, 8009fa6 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x38>
 8009f9c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009fa6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009faa:	b933      	cbnz	r3, 8009fba <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x4c>
 8009fac:	2202      	movs	r2, #2
 8009fae:	4629      	mov	r1, r5
 8009fb0:	4638      	mov	r0, r7
 8009fb2:	f000 fc77 	bl	800a8a4 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 8009fb6:	b003      	add	sp, #12
 8009fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fba:	1e71      	subs	r1, r6, #1
 8009fbc:	424a      	negs	r2, r1
 8009fbe:	414a      	adcs	r2, r1
 8009fc0:	f604 20e4 	addw	r0, r4, #2788	; 0xae4
 8009fc4:	4629      	mov	r1, r5
 8009fc6:	f002 fd01 	bl	800c9cc <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 8009fca:	e7f4      	b.n	8009fb6 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>

08009fcc <ArtNet4Node::SetLedBlinkMode(ledblink::Mode)>:
 8009fcc:	1e8a      	subs	r2, r1, #2
 8009fce:	4253      	negs	r3, r2
 8009fd0:	4153      	adcs	r3, r2
 8009fd2:	f880 3aec 	strb.w	r3, [r0, #2796]	; 0xaec
 8009fd6:	4b02      	ldr	r3, [pc, #8]	; (8009fe0 <ArtNet4Node::SetLedBlinkMode(ledblink::Mode)+0x14>)
 8009fd8:	6818      	ldr	r0, [r3, #0]
 8009fda:	f009 bedd 	b.w	8013d98 <LedBlink::SetMode(ledblink::Mode)>
 8009fde:	bf00      	nop
 8009fe0:	20009d54 	andcs	r9, r0, r4, asr sp

08009fe4 <ArtNet4Node::~ArtNet4Node()>:
 8009fe4:	b510      	push	{r4, lr}
 8009fe6:	4604      	mov	r4, r0
 8009fe8:	4b05      	ldr	r3, [pc, #20]	; (800a000 <ArtNet4Node::~ArtNet4Node()+0x1c>)
 8009fea:	6003      	str	r3, [r0, #0]
 8009fec:	f600 20e4 	addw	r0, r0, #2788	; 0xae4
 8009ff0:	f002 fc68 	bl	800c8c4 <E131Bridge::~E131Bridge()>
 8009ff4:	1d20      	adds	r0, r4, #4
 8009ff6:	f000 f944 	bl	800a282 <ArtNetNode::~ArtNetNode()>
 8009ffa:	4620      	mov	r0, r4
 8009ffc:	bd10      	pop	{r4, pc}
 8009ffe:	bf00      	nop
 800a000:	08016838 	stmdaeq	r1, {r3, r4, r5, fp, sp, lr}

0800a004 <ArtNet4Node::~ArtNet4Node()>:
 800a004:	b510      	push	{r4, lr}
 800a006:	4604      	mov	r4, r0
 800a008:	f7ff ffec 	bl	8009fe4 <ArtNet4Node::~ArtNet4Node()>
 800a00c:	4620      	mov	r0, r4
 800a00e:	f009 ffa1 	bl	8013f54 <operator delete(void*)>
 800a012:	4620      	mov	r0, r4
 800a014:	bd10      	pop	{r4, pc}

0800a016 <ArtNet4Node::GetStatus(unsigned int)>:
 800a016:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a018:	2301      	movs	r3, #1
 800a01a:	4604      	mov	r4, r0
 800a01c:	f10d 0206 	add.w	r2, sp, #6
 800a020:	f600 20e4 	addw	r0, r0, #2788	; 0xae4
 800a024:	460d      	mov	r5, r1
 800a026:	f002 fd49 	bl	800cabc <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800a02a:	b170      	cbz	r0, 800a04a <ArtNet4Node::GetStatus(unsigned int)+0x34>
 800a02c:	2344      	movs	r3, #68	; 0x44
 800a02e:	f241 023a 	movw	r2, #4154	; 0x103a
 800a032:	fb03 4405 	mla	r4, r3, r5, r4
 800a036:	f241 0339 	movw	r3, #4153	; 0x1039
 800a03a:	5ca0      	ldrb	r0, [r4, r2]
 800a03c:	5ce3      	ldrb	r3, [r4, r3]
 800a03e:	01c0      	lsls	r0, r0, #7
 800a040:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 800a044:	f040 0001 	orr.w	r0, r0, #1
 800a048:	b2c0      	uxtb	r0, r0
 800a04a:	b003      	add	sp, #12
 800a04c:	bd30      	pop	{r4, r5, pc}
	...

0800a050 <ArtNet4Node::HandleAddress(unsigned char)>:
 800a050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a052:	4605      	mov	r5, r0
 800a054:	460c      	mov	r4, r1
 800a056:	2600      	movs	r6, #0
 800a058:	1d07      	adds	r7, r0, #4
 800a05a:	2301      	movs	r3, #1
 800a05c:	4631      	mov	r1, r6
 800a05e:	4638      	mov	r0, r7
 800a060:	f10d 0206 	add.w	r2, sp, #6
 800a064:	f000 fbf8 	bl	800a858 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800a068:	b150      	cbz	r0, 800a080 <ArtNet4Node::HandleAddress(unsigned char)+0x30>
 800a06a:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
 800a06e:	b123      	cbz	r3, 800a07a <ArtNet4Node::HandleAddress(unsigned char)+0x2a>
 800a070:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a074:	3301      	adds	r3, #1
 800a076:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a07a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a07e:	b98b      	cbnz	r3, 800a0a4 <ArtNet4Node::HandleAddress(unsigned char)+0x54>
 800a080:	3601      	adds	r6, #1
 800a082:	2e04      	cmp	r6, #4
 800a084:	d1e9      	bne.n	800a05a <ArtNet4Node::HandleAddress(unsigned char)+0xa>
 800a086:	2c13      	cmp	r4, #19
 800a088:	f004 0603 	and.w	r6, r4, #3
 800a08c:	d818      	bhi.n	800a0c0 <ArtNet4Node::HandleAddress(unsigned char)+0x70>
 800a08e:	2c0f      	cmp	r4, #15
 800a090:	d829      	bhi.n	800a0e6 <ArtNet4Node::HandleAddress(unsigned char)+0x96>
 800a092:	2c02      	cmp	r4, #2
 800a094:	d025      	beq.n	800a0e2 <ArtNet4Node::HandleAddress(unsigned char)+0x92>
 800a096:	3c03      	subs	r4, #3
 800a098:	2c01      	cmp	r4, #1
 800a09a:	d820      	bhi.n	800a0de <ArtNet4Node::HandleAddress(unsigned char)+0x8e>
 800a09c:	2300      	movs	r3, #0
 800a09e:	f885 3aec 	strb.w	r3, [r5, #2796]	; 0xaec
 800a0a2:	e01c      	b.n	800a0de <ArtNet4Node::HandleAddress(unsigned char)+0x8e>
 800a0a4:	2228      	movs	r2, #40	; 0x28
 800a0a6:	4372      	muls	r2, r6
 800a0a8:	f605 2124 	addw	r1, r5, #2596	; 0xa24
 800a0ac:	588a      	ldr	r2, [r1, r2]
 800a0ae:	f605 20e4 	addw	r0, r5, #2788	; 0xae4
 800a0b2:	2a01      	cmp	r2, #1
 800a0b4:	bf18      	it	ne
 800a0b6:	2202      	movne	r2, #2
 800a0b8:	4631      	mov	r1, r6
 800a0ba:	f002 fc87 	bl	800c9cc <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 800a0be:	e7df      	b.n	800a080 <ArtNet4Node::HandleAddress(unsigned char)+0x30>
 800a0c0:	2c53      	cmp	r4, #83	; 0x53
 800a0c2:	d808      	bhi.n	800a0d6 <ArtNet4Node::HandleAddress(unsigned char)+0x86>
 800a0c4:	2c4f      	cmp	r4, #79	; 0x4f
 800a0c6:	d90a      	bls.n	800a0de <ArtNet4Node::HandleAddress(unsigned char)+0x8e>
 800a0c8:	2344      	movs	r3, #68	; 0x44
 800a0ca:	f241 0234 	movw	r2, #4148	; 0x1034
 800a0ce:	2100      	movs	r1, #0
 800a0d0:	fb03 5306 	mla	r3, r3, r6, r5
 800a0d4:	e00d      	b.n	800a0f2 <ArtNet4Node::HandleAddress(unsigned char)+0xa2>
 800a0d6:	3470      	adds	r4, #112	; 0x70
 800a0d8:	b2e4      	uxtb	r4, r4
 800a0da:	2c03      	cmp	r4, #3
 800a0dc:	d90b      	bls.n	800a0f6 <ArtNet4Node::HandleAddress(unsigned char)+0xa6>
 800a0de:	b003      	add	sp, #12
 800a0e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e7db      	b.n	800a09e <ArtNet4Node::HandleAddress(unsigned char)+0x4e>
 800a0e6:	2344      	movs	r3, #68	; 0x44
 800a0e8:	f241 0234 	movw	r2, #4148	; 0x1034
 800a0ec:	2101      	movs	r1, #1
 800a0ee:	fb03 5306 	mla	r3, r3, r6, r5
 800a0f2:	5099      	str	r1, [r3, r2]
 800a0f4:	e7f3      	b.n	800a0de <ArtNet4Node::HandleAddress(unsigned char)+0x8e>
 800a0f6:	2328      	movs	r3, #40	; 0x28
 800a0f8:	fb03 5306 	mla	r3, r3, r6, r5
 800a0fc:	f8d3 2a24 	ldr.w	r2, [r3, #2596]	; 0xa24
 800a100:	2a01      	cmp	r2, #1
 800a102:	d1ec      	bne.n	800a0de <ArtNet4Node::HandleAddress(unsigned char)+0x8e>
 800a104:	4b1c      	ldr	r3, [pc, #112]	; (800a178 <ArtNet4Node::HandleAddress(unsigned char)+0x128>)
 800a106:	2700      	movs	r7, #0
 800a108:	6819      	ldr	r1, [r3, #0]
 800a10a:	f8d5 0ae8 	ldr.w	r0, [r5, #2792]	; 0xae8
 800a10e:	07c9      	lsls	r1, r1, #31
 800a110:	bf58      	it	pl
 800a112:	601a      	strpl	r2, [r3, #0]
 800a114:	f240 6204 	movw	r2, #1540	; 0x604
 800a118:	4372      	muls	r2, r6
 800a11a:	4b18      	ldr	r3, [pc, #96]	; (800a17c <ArtNet4Node::HandleAddress(unsigned char)+0x12c>)
 800a11c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a120:	441a      	add	r2, r3
 800a122:	4611      	mov	r1, r2
 800a124:	f502 7400 	add.w	r4, r2, #512	; 0x200
 800a128:	428c      	cmp	r4, r1
 800a12a:	d121      	bne.n	800a170 <ArtNet4Node::HandleAddress(unsigned char)+0x120>
 800a12c:	f240 6104 	movw	r1, #1540	; 0x604
 800a130:	fb01 3106 	mla	r1, r1, r6, r3
 800a134:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a138:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
 800a13c:	6801      	ldr	r1, [r0, #0]
 800a13e:	690c      	ldr	r4, [r1, #16]
 800a140:	4631      	mov	r1, r6
 800a142:	47a0      	blx	r4
 800a144:	2444      	movs	r4, #68	; 0x44
 800a146:	fb04 5406 	mla	r4, r4, r6, r5
 800a14a:	f894 3ffa 	ldrb.w	r3, [r4, #4090]	; 0xffa
 800a14e:	b15b      	cbz	r3, 800a168 <ArtNet4Node::HandleAddress(unsigned char)+0x118>
 800a150:	f241 073a 	movw	r7, #4154	; 0x103a
 800a154:	5de3      	ldrb	r3, [r4, r7]
 800a156:	b93b      	cbnz	r3, 800a168 <ArtNet4Node::HandleAddress(unsigned char)+0x118>
 800a158:	f8d5 0ae8 	ldr.w	r0, [r5, #2792]	; 0xae8
 800a15c:	4631      	mov	r1, r6
 800a15e:	6803      	ldr	r3, [r0, #0]
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	4798      	blx	r3
 800a164:	2301      	movs	r3, #1
 800a166:	55e3      	strb	r3, [r4, r7]
 800a168:	2300      	movs	r3, #0
 800a16a:	f885 3fd8 	strb.w	r3, [r5, #4056]	; 0xfd8
 800a16e:	e7b6      	b.n	800a0de <ArtNet4Node::HandleAddress(unsigned char)+0x8e>
 800a170:	f801 7b01 	strb.w	r7, [r1], #1
 800a174:	e7d8      	b.n	800a128 <ArtNet4Node::HandleAddress(unsigned char)+0xd8>
 800a176:	bf00      	nop
 800a178:	200000b0 	strhcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800a17c:	200000b4 	strhcs	r0, [r0], -r4

0800a180 <ArtNet4Node::ArtNet4Node()>:
 800a180:	b510      	push	{r4, lr}
 800a182:	4604      	mov	r4, r0
 800a184:	3004      	adds	r0, #4
 800a186:	f000 f969 	bl	800a45c <ArtNetNode::ArtNetNode()>
 800a18a:	4b04      	ldr	r3, [pc, #16]	; (800a19c <ArtNet4Node::ArtNet4Node()+0x1c>)
 800a18c:	f604 20e4 	addw	r0, r4, #2788	; 0xae4
 800a190:	6023      	str	r3, [r4, #0]
 800a192:	f002 fb2f 	bl	800c7f4 <E131Bridge::E131Bridge()>
 800a196:	4620      	mov	r0, r4
 800a198:	61e4      	str	r4, [r4, #28]
 800a19a:	bd10      	pop	{r4, pc}
 800a19c:	08016838 	stmdaeq	r1, {r3, r4, r5, fp, sp, lr}

0800a1a0 <ArtNet4Node::Start()>:
 800a1a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a1a4:	4604      	mov	r4, r0
 800a1a6:	4606      	mov	r6, r0
 800a1a8:	2500      	movs	r5, #0
 800a1aa:	f500 5781 	add.w	r7, r0, #4128	; 0x1020
 800a1ae:	3714      	adds	r7, #20
 800a1b0:	f104 0804 	add.w	r8, r4, #4
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	4629      	mov	r1, r5
 800a1b8:	4640      	mov	r0, r8
 800a1ba:	f10d 0206 	add.w	r2, sp, #6
 800a1be:	f000 fb4b 	bl	800a858 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800a1c2:	b140      	cbz	r0, 800a1d6 <ArtNet4Node::Start()+0x36>
 800a1c4:	f8d6 3a24 	ldr.w	r3, [r6, #2596]	; 0xa24
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	bf01      	itttt	eq
 800a1cc:	2344      	moveq	r3, #68	; 0x44
 800a1ce:	436b      	muleq	r3, r5
 800a1d0:	f8d6 2a1c 	ldreq.w	r2, [r6, #2588]	; 0xa1c
 800a1d4:	50fa      	streq	r2, [r7, r3]
 800a1d6:	3501      	adds	r5, #1
 800a1d8:	2d04      	cmp	r5, #4
 800a1da:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800a1de:	d1e7      	bne.n	800a1b0 <ArtNet4Node::Start()+0x10>
 800a1e0:	f894 39fc 	ldrb.w	r3, [r4, #2556]	; 0x9fc
 800a1e4:	4640      	mov	r0, r8
 800a1e6:	f884 3fdd 	strb.w	r3, [r4, #4061]	; 0xfdd
 800a1ea:	68a3      	ldr	r3, [r4, #8]
 800a1ec:	f8c4 3ae8 	str.w	r3, [r4, #2792]	; 0xae8
 800a1f0:	f000 f848 	bl	800a284 <ArtNetNode::Start()>
 800a1f4:	f604 20e4 	addw	r0, r4, #2788	; 0xae4
 800a1f8:	b002      	add	sp, #8
 800a1fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1fe:	f002 bb63 	b.w	800c8c8 <E131Bridge::Start()>

0800a202 <ArtNet4Node::Run()>:
 800a202:	b510      	push	{r4, lr}
 800a204:	4604      	mov	r4, r0
 800a206:	3004      	adds	r0, #4
 800a208:	f000 fa48 	bl	800a69c <ArtNetNode::Run()>
 800a20c:	f894 3fef 	ldrb.w	r3, [r4, #4079]	; 0xfef
 800a210:	b12b      	cbz	r3, 800a21e <ArtNet4Node::Run()+0x1c>
 800a212:	f604 20e4 	addw	r0, r4, #2788	; 0xae4
 800a216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a21a:	f002 bf39 	b.w	800d090 <E131Bridge::Run()>
 800a21e:	bd10      	pop	{r4, pc}

0800a220 <ArtNet4Node::Print()>:
 800a220:	b510      	push	{r4, lr}
 800a222:	4604      	mov	r4, r0
 800a224:	3004      	adds	r0, #4
 800a226:	f001 fd21 	bl	800bc6c <ArtNetNode::Print()>
 800a22a:	f894 39fe 	ldrb.w	r3, [r4, #2558]	; 0x9fe
 800a22e:	b15b      	cbz	r3, 800a248 <ArtNet4Node::Print()+0x28>
 800a230:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 800a234:	b113      	cbz	r3, 800a23c <ArtNet4Node::Print()+0x1c>
 800a236:	4805      	ldr	r0, [pc, #20]	; (800a24c <ArtNet4Node::Print()+0x2c>)
 800a238:	f7fe feb2 	bl	8008fa0 <printf>
 800a23c:	f604 20e4 	addw	r0, r4, #2788	; 0xae4
 800a240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a244:	f003 b976 	b.w	800d534 <E131Bridge::Print()>
 800a248:	bd10      	pop	{r4, pc}
 800a24a:	bf00      	nop
 800a24c:	08016812 	stmdaeq	r1, {r1, r4, fp, sp, lr}

0800a250 <strncpy.isra.0>:
 800a250:	3901      	subs	r1, #1
 800a252:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a256:	b92b      	cbnz	r3, 800a264 <strncpy.isra.0+0x14>
 800a258:	4402      	add	r2, r0
 800a25a:	4290      	cmp	r0, r2
 800a25c:	d006      	beq.n	800a26c <strncpy.isra.0+0x1c>
 800a25e:	f800 3b01 	strb.w	r3, [r0], #1
 800a262:	e7fa      	b.n	800a25a <strncpy.isra.0+0xa>
 800a264:	3a01      	subs	r2, #1
 800a266:	f800 3b01 	strb.w	r3, [r0], #1
 800a26a:	d1f2      	bne.n	800a252 <strncpy.isra.0+0x2>
 800a26c:	4770      	bx	lr

0800a26e <memcpy.isra.0>:
 800a26e:	3801      	subs	r0, #1
 800a270:	440a      	add	r2, r1
 800a272:	4291      	cmp	r1, r2
 800a274:	d100      	bne.n	800a278 <memcpy.isra.0+0xa>
 800a276:	4770      	bx	lr
 800a278:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a27c:	f800 3f01 	strb.w	r3, [r0, #1]!
 800a280:	e7f7      	b.n	800a272 <memcpy.isra.0+0x4>

0800a282 <ArtNetNode::~ArtNetNode()>:
 800a282:	4770      	bx	lr

0800a284 <ArtNetNode::Start()>:
 800a284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a286:	4d2b      	ldr	r5, [pc, #172]	; (800a334 <ArtNetNode::Start()+0xb0>)
 800a288:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
 800a28c:	682a      	ldr	r2, [r5, #0]
 800a28e:	f023 0302 	bic.w	r3, r3, #2
 800a292:	7951      	ldrb	r1, [r2, #5]
 800a294:	4604      	mov	r4, r0
 800a296:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800a29a:	b25b      	sxtb	r3, r3
 800a29c:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
 800a2a0:	7912      	ldrb	r2, [r2, #4]
 800a2a2:	f023 0304 	bic.w	r3, r3, #4
 800a2a6:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800a2aa:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
 800a2ae:	f001 f90d 	bl	800b4cc <ArtNetNode::FillPollReply()>
 800a2b2:	f641 1136 	movw	r1, #6454	; 0x1936
 800a2b6:	6828      	ldr	r0, [r5, #0]
 800a2b8:	f006 fbfb 	bl	8010ab2 <Network::Begin(unsigned short)>
 800a2bc:	2302      	movs	r3, #2
 800a2be:	f884 39f1 	strb.w	r3, [r4, #2545]	; 0x9f1
 800a2c2:	6923      	ldr	r3, [r4, #16]
 800a2c4:	6020      	str	r0, [r4, #0]
 800a2c6:	b16b      	cbz	r3, 800a2e4 <ArtNetNode::Start()+0x60>
 800a2c8:	2500      	movs	r5, #0
 800a2ca:	f604 26a4 	addw	r6, r4, #2724	; 0xaa4
 800a2ce:	012b      	lsls	r3, r5, #4
 800a2d0:	5cf3      	ldrb	r3, [r6, r3]
 800a2d2:	b123      	cbz	r3, 800a2de <ArtNetNode::Start()+0x5a>
 800a2d4:	6920      	ldr	r0, [r4, #16]
 800a2d6:	4629      	mov	r1, r5
 800a2d8:	6803      	ldr	r3, [r0, #0]
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	4798      	blx	r3
 800a2de:	3501      	adds	r5, #1
 800a2e0:	2d04      	cmp	r5, #4
 800a2e2:	d1f4      	bne.n	800a2ce <ArtNetNode::Start()+0x4a>
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	f001 f9c8 	bl	800b67c <ArtNetNode::SendPollRelply(bool)>
 800a2ec:	68e3      	ldr	r3, [r4, #12]
 800a2ee:	b1cb      	cbz	r3, 800a324 <ArtNetNode::Start()+0xa0>
 800a2f0:	4626      	mov	r6, r4
 800a2f2:	2500      	movs	r5, #0
 800a2f4:	f604 27a4 	addw	r7, r4, #2724	; 0xaa4
 800a2f8:	f896 3a1c 	ldrb.w	r3, [r6, #2588]	; 0xa1c
 800a2fc:	b133      	cbz	r3, 800a30c <ArtNetNode::Start()+0x88>
 800a2fe:	f896 3a04 	ldrb.w	r3, [r6, #2564]	; 0xa04
 800a302:	b11b      	cbz	r3, 800a30c <ArtNetNode::Start()+0x88>
 800a304:	4629      	mov	r1, r5
 800a306:	4620      	mov	r0, r4
 800a308:	f001 fa96 	bl	800b838 <ArtNetNode::SendTod(unsigned int)>
 800a30c:	012b      	lsls	r3, r5, #4
 800a30e:	5cfb      	ldrb	r3, [r7, r3]
 800a310:	b11b      	cbz	r3, 800a31a <ArtNetNode::Start()+0x96>
 800a312:	4629      	mov	r1, r5
 800a314:	4620      	mov	r0, r4
 800a316:	f001 fb61 	bl	800b9dc <ArtNetNode::SendTodRequest(unsigned int)>
 800a31a:	3501      	adds	r5, #1
 800a31c:	2d04      	cmp	r5, #4
 800a31e:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800a322:	d1e9      	bne.n	800a2f8 <ArtNetNode::Start()+0x74>
 800a324:	4b04      	ldr	r3, [pc, #16]	; (800a338 <ArtNetNode::Start()+0xb4>)
 800a326:	2102      	movs	r1, #2
 800a328:	6818      	ldr	r0, [r3, #0]
 800a32a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a32e:	f009 bd33 	b.w	8013d98 <LedBlink::SetMode(ledblink::Mode)>
 800a332:	bf00      	nop
 800a334:	2000863c 	andcs	r8, r0, ip, lsr r6
 800a338:	20009d54 	andcs	r9, r0, r4, asr sp

0800a33c <ArtNetNode::Stop()>:
 800a33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a340:	2500      	movs	r5, #0
 800a342:	4604      	mov	r4, r0
 800a344:	4606      	mov	r6, r0
 800a346:	46a9      	mov	r9, r5
 800a348:	f04f 0a01 	mov.w	sl, #1
 800a34c:	4f1f      	ldr	r7, [pc, #124]	; (800a3cc <ArtNetNode::Stop()+0x90>)
 800a34e:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800a3d0 <ArtNetNode::Stop()+0x94>
 800a352:	f8d6 3a20 	ldr.w	r3, [r6, #2592]	; 0xa20
 800a356:	b97b      	cbnz	r3, 800a378 <ArtNetNode::Stop()+0x3c>
 800a358:	6860      	ldr	r0, [r4, #4]
 800a35a:	b118      	cbz	r0, 800a364 <ArtNetNode::Stop()+0x28>
 800a35c:	6803      	ldr	r3, [r0, #0]
 800a35e:	4629      	mov	r1, r5
 800a360:	68db      	ldr	r3, [r3, #12]
 800a362:	4798      	blx	r3
 800a364:	f8d8 3000 	ldr.w	r3, [r8]
 800a368:	f8c7 9600 	str.w	r9, [r7, #1536]	; 0x600
 800a36c:	07db      	lsls	r3, r3, #31
 800a36e:	bf58      	it	pl
 800a370:	f8c8 a000 	strpl.w	sl, [r8]
 800a374:	f886 9a25 	strb.w	r9, [r6, #2597]	; 0xa25
 800a378:	3501      	adds	r5, #1
 800a37a:	2d04      	cmp	r5, #4
 800a37c:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800a380:	f207 6704 	addw	r7, r7, #1540	; 0x604
 800a384:	d1e5      	bne.n	800a352 <ArtNetNode::Stop()+0x16>
 800a386:	6923      	ldr	r3, [r4, #16]
 800a388:	b16b      	cbz	r3, 800a3a6 <ArtNetNode::Stop()+0x6a>
 800a38a:	2500      	movs	r5, #0
 800a38c:	f604 26a4 	addw	r6, r4, #2724	; 0xaa4
 800a390:	012b      	lsls	r3, r5, #4
 800a392:	5cf3      	ldrb	r3, [r6, r3]
 800a394:	b123      	cbz	r3, 800a3a0 <ArtNetNode::Stop()+0x64>
 800a396:	6920      	ldr	r0, [r4, #16]
 800a398:	4629      	mov	r1, r5
 800a39a:	6803      	ldr	r3, [r0, #0]
 800a39c:	68db      	ldr	r3, [r3, #12]
 800a39e:	4798      	blx	r3
 800a3a0:	3501      	adds	r5, #1
 800a3a2:	2d04      	cmp	r5, #4
 800a3a4:	d1f4      	bne.n	800a390 <ArtNetNode::Stop()+0x54>
 800a3a6:	4b0b      	ldr	r3, [pc, #44]	; (800a3d4 <ArtNetNode::Stop()+0x98>)
 800a3a8:	2100      	movs	r1, #0
 800a3aa:	6818      	ldr	r0, [r3, #0]
 800a3ac:	f009 fcf4 	bl	8013d98 <LedBlink::SetMode(ledblink::Mode)>
 800a3b0:	f894 308b 	ldrb.w	r3, [r4, #139]	; 0x8b
 800a3b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a3bc:	f884 308b 	strb.w	r3, [r4, #139]	; 0x8b
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	f884 39f1 	strb.w	r3, [r4, #2545]	; 0x9f1
 800a3c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ca:	bf00      	nop
 800a3cc:	200000b4 	strhcs	r0, [r0], -r4
 800a3d0:	200000b0 	strhcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800a3d4:	20009d54 	andcs	r9, r0, r4, asr sp

0800a3d8 <ArtNetNode::SetShortName(char const*)>:
 800a3d8:	b538      	push	{r3, r4, r5, lr}
 800a3da:	f100 0538 	add.w	r5, r0, #56	; 0x38
 800a3de:	4604      	mov	r4, r0
 800a3e0:	2211      	movs	r2, #17
 800a3e2:	4628      	mov	r0, r5
 800a3e4:	f7ff ff34 	bl	800a250 <strncpy.isra.0>
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	2212      	movs	r2, #18
 800a3ec:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 800a3f0:	4629      	mov	r1, r5
 800a3f2:	f204 5086 	addw	r0, r4, #1414	; 0x586
 800a3f6:	f7ff ff3a 	bl	800a26e <memcpy.isra.0>
 800a3fa:	f894 39f1 	ldrb.w	r3, [r4, #2545]	; 0x9f1
 800a3fe:	2b02      	cmp	r3, #2
 800a400:	d10a      	bne.n	800a418 <ArtNetNode::SetShortName(char const*)+0x40>
 800a402:	69e0      	ldr	r0, [r4, #28]
 800a404:	b118      	cbz	r0, 800a40e <ArtNetNode::SetShortName(char const*)+0x36>
 800a406:	6803      	ldr	r3, [r0, #0]
 800a408:	4629      	mov	r1, r5
 800a40a:	68db      	ldr	r3, [r3, #12]
 800a40c:	4798      	blx	r3
 800a40e:	4628      	mov	r0, r5
 800a410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a414:	f007 bec2 	b.w	801219c <artnet::display_shortname(char const*)>
 800a418:	bd38      	pop	{r3, r4, r5, pc}

0800a41a <ArtNetNode::SetLongName(char const*)>:
 800a41a:	b538      	push	{r3, r4, r5, lr}
 800a41c:	f100 054a 	add.w	r5, r0, #74	; 0x4a
 800a420:	4604      	mov	r4, r0
 800a422:	223f      	movs	r2, #63	; 0x3f
 800a424:	4628      	mov	r0, r5
 800a426:	f7ff ff13 	bl	800a250 <strncpy.isra.0>
 800a42a:	2300      	movs	r3, #0
 800a42c:	2240      	movs	r2, #64	; 0x40
 800a42e:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
 800a432:	4629      	mov	r1, r5
 800a434:	f504 60b3 	add.w	r0, r4, #1432	; 0x598
 800a438:	f7ff ff19 	bl	800a26e <memcpy.isra.0>
 800a43c:	f894 39f1 	ldrb.w	r3, [r4, #2545]	; 0x9f1
 800a440:	2b02      	cmp	r3, #2
 800a442:	d10a      	bne.n	800a45a <ArtNetNode::SetLongName(char const*)+0x40>
 800a444:	69e0      	ldr	r0, [r4, #28]
 800a446:	b118      	cbz	r0, 800a450 <ArtNetNode::SetLongName(char const*)+0x36>
 800a448:	6803      	ldr	r3, [r0, #0]
 800a44a:	4629      	mov	r1, r5
 800a44c:	691b      	ldr	r3, [r3, #16]
 800a44e:	4798      	blx	r3
 800a450:	4628      	mov	r0, r5
 800a452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a456:	f007 beab 	b.w	80121b0 <artnet::display_longname(char const*)>
 800a45a:	bd38      	pop	{r3, r4, r5, pc}

0800a45c <ArtNetNode::ArtNetNode()>:
 800a45c:	2300      	movs	r3, #0
 800a45e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a462:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a464:	4604      	mov	r4, r0
 800a466:	e9c0 2300 	strd	r2, r3, [r0]
 800a46a:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800a46e:	4a4f      	ldr	r2, [pc, #316]	; (800a5ac <ArtNetNode::ArtNetNode()+0x150>)
 800a470:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a474:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800a478:	6010      	str	r0, [r2, #0]
 800a47a:	b085      	sub	sp, #20
 800a47c:	f8c0 3984 	str.w	r3, [r0, #2436]	; 0x984
 800a480:	f8c0 3988 	str.w	r3, [r0, #2440]	; 0x988
 800a484:	f880 398c 	strb.w	r3, [r0, #2444]	; 0x98c
 800a488:	f100 0220 	add.w	r2, r0, #32
 800a48c:	f100 0198 	add.w	r1, r0, #152	; 0x98
 800a490:	428a      	cmp	r2, r1
 800a492:	d17c      	bne.n	800a58e <ArtNetNode::ArtNetNode()+0x132>
 800a494:	4b46      	ldr	r3, [pc, #280]	; (800a5b0 <ArtNetNode::ArtNetNode()+0x154>)
 800a496:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800a49a:	6818      	ldr	r0, [r3, #0]
 800a49c:	6943      	ldr	r3, [r0, #20]
 800a49e:	6223      	str	r3, [r4, #32]
 800a4a0:	69c2      	ldr	r2, [r0, #28]
 800a4a2:	ea63 0302 	orn	r3, r3, r2
 800a4a6:	6263      	str	r3, [r4, #36]	; 0x24
 800a4a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a4aa:	f006 fb08 	bl	8010abe <Network::MacAddressCopyTo(unsigned char*)>
 800a4ae:	23d0      	movs	r3, #208	; 0xd0
 800a4b0:	f884 308b 	strb.w	r3, [r4, #139]	; 0x8b
 800a4b4:	f642 0398 	movw	r3, #10392	; 0x2898
 800a4b8:	2100      	movs	r1, #0
 800a4ba:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
 800a4be:	f504 6220 	add.w	r2, r4, #2560	; 0xa00
 800a4c2:	f504 631e 	add.w	r3, r4, #2528	; 0x9e0
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d164      	bne.n	800a594 <ArtNetNode::ArtNetNode()+0x138>
 800a4ca:	f240 1201 	movw	r2, #257	; 0x101
 800a4ce:	2500      	movs	r5, #0
 800a4d0:	2708      	movs	r7, #8
 800a4d2:	f8a4 29f0 	strh.w	r2, [r4, #2544]	; 0x9f0
 800a4d6:	f504 612a 	add.w	r1, r4, #2720	; 0xaa0
 800a4da:	f504 662e 	add.w	r6, r4, #2784	; 0xae0
 800a4de:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800a4e2:	4283      	cmp	r3, r0
 800a4e4:	d15c      	bne.n	800a5a0 <ArtNetNode::ArtNetNode()+0x144>
 800a4e6:	460a      	mov	r2, r1
 800a4e8:	f101 0310 	add.w	r3, r1, #16
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d15a      	bne.n	800a5a6 <ArtNetNode::ArtNetNode()+0x14a>
 800a4f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4f2:	4296      	cmp	r6, r2
 800a4f4:	608b      	str	r3, [r1, #8]
 800a4f6:	70cf      	strb	r7, [r1, #3]
 800a4f8:	d14f      	bne.n	800a59a <ArtNetNode::ArtNetNode()+0x13e>
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	492d      	ldr	r1, [pc, #180]	; (800a5b4 <ArtNetNode::ArtNetNode()+0x158>)
 800a4fe:	f7ff ff6b 	bl	800a3d8 <ArtNetNode::SetShortName(char const*)>
 800a502:	4b2d      	ldr	r3, [pc, #180]	; (800a5b8 <ArtNetNode::ArtNetNode()+0x15c>)
 800a504:	4e2d      	ldr	r6, [pc, #180]	; (800a5bc <ArtNetNode::ArtNetNode()+0x160>)
 800a506:	9302      	str	r3, [sp, #8]
 800a508:	2304      	movs	r3, #4
 800a50a:	f604 159d 	addw	r5, r4, #2461	; 0x99d
 800a50e:	4a2c      	ldr	r2, [pc, #176]	; (800a5c0 <ArtNetNode::ArtNetNode()+0x164>)
 800a510:	9301      	str	r3, [sp, #4]
 800a512:	2140      	movs	r1, #64	; 0x40
 800a514:	4b2b      	ldr	r3, [pc, #172]	; (800a5c4 <ArtNetNode::ArtNetNode()+0x168>)
 800a516:	4628      	mov	r0, r5
 800a518:	9600      	str	r6, [sp, #0]
 800a51a:	f7fe fd69 	bl	8008ff0 <snprintf>
 800a51e:	4629      	mov	r1, r5
 800a520:	2500      	movs	r5, #0
 800a522:	4620      	mov	r0, r4
 800a524:	f7ff ff79 	bl	800a41a <ArtNetNode::SetLongName(char const*)>
 800a528:	f604 108d 	addw	r0, r4, #2445	; 0x98d
 800a52c:	220f      	movs	r2, #15
 800a52e:	4926      	ldr	r1, [pc, #152]	; (800a5c8 <ArtNetNode::ArtNetNode()+0x16c>)
 800a530:	f7ff fe8e 	bl	800a250 <strncpy.isra.0>
 800a534:	4631      	mov	r1, r6
 800a536:	f204 605b 	addw	r0, r4, #1627	; 0x65b
 800a53a:	2208      	movs	r2, #8
 800a53c:	f884 599c 	strb.w	r5, [r4, #2460]	; 0x99c
 800a540:	f7ff fe95 	bl	800a26e <memcpy.isra.0>
 800a544:	2350      	movs	r3, #80	; 0x50
 800a546:	f884 3664 	strb.w	r3, [r4, #1636]	; 0x664
 800a54a:	230e      	movs	r3, #14
 800a54c:	f604 006d 	addw	r0, r4, #2157	; 0x86d
 800a550:	f884 3666 	strb.w	r3, [r4, #1638]	; 0x666
 800a554:	2208      	movs	r2, #8
 800a556:	4631      	mov	r1, r6
 800a558:	f884 5663 	strb.w	r5, [r4, #1635]	; 0x663
 800a55c:	f884 5665 	strb.w	r5, [r4, #1637]	; 0x665
 800a560:	f7ff fe85 	bl	800a26e <memcpy.isra.0>
 800a564:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800a568:	4620      	mov	r0, r4
 800a56a:	f884 3876 	strb.w	r3, [r4, #2166]	; 0x876
 800a56e:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800a572:	f884 5875 	strb.w	r5, [r4, #2165]	; 0x875
 800a576:	f884 5877 	strb.w	r5, [r4, #2167]	; 0x877
 800a57a:	f8a4 3878 	strh.w	r3, [r4, #2168]	; 0x878
 800a57e:	f884 587b 	strb.w	r5, [r4, #2171]	; 0x87b
 800a582:	f8c4 587c 	str.w	r5, [r4, #2172]	; 0x87c
 800a586:	f8a4 5880 	strh.w	r5, [r4, #2176]	; 0x880
 800a58a:	b005      	add	sp, #20
 800a58c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a58e:	f802 3b01 	strb.w	r3, [r2], #1
 800a592:	e77d      	b.n	800a490 <ArtNetNode::ArtNetNode()+0x34>
 800a594:	f803 1b01 	strb.w	r1, [r3], #1
 800a598:	e795      	b.n	800a4c6 <ArtNetNode::ArtNetNode()+0x6a>
 800a59a:	4603      	mov	r3, r0
 800a59c:	4611      	mov	r1, r2
 800a59e:	e79e      	b.n	800a4de <ArtNetNode::ArtNetNode()+0x82>
 800a5a0:	f803 5b01 	strb.w	r5, [r3], #1
 800a5a4:	e79d      	b.n	800a4e2 <ArtNetNode::ArtNetNode()+0x86>
 800a5a6:	f802 5b01 	strb.w	r5, [r2], #1
 800a5aa:	e79f      	b.n	800a4ec <ArtNetNode::ArtNetNode()+0x90>
 800a5ac:	200018c4 	andcs	r1, r0, r4, asr #17
 800a5b0:	2000863c 	andcs	r8, r0, ip, lsr r6
 800a5b4:	080168c6 	stmdaeq	r1, {r1, r2, r6, r7, fp, sp, lr}
 800a5b8:	080168a0 	stmdaeq	r1, {r5, r7, fp, sp, lr}
 800a5bc:	080168be 	stmdaeq	r1, {r1, r2, r3, r4, r5, r7, fp, sp, lr}
 800a5c0:	08016894 	stmdaeq	r1, {r2, r4, r7, fp, sp, lr}
 800a5c4:	08016889 	stmdaeq	r1, {r0, r3, r7, fp, sp, lr}
 800a5c8:	080168b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, fp, sp, lr}

0800a5cc <ArtNetNode::SetNetworkDataLossCondition()>:
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	b570      	push	{r4, r5, r6, lr}
 800a5d0:	f880 39f6 	strb.w	r3, [r0, #2550]	; 0x9f6
 800a5d4:	f880 39f5 	strb.w	r3, [r0, #2549]	; 0x9f5
 800a5d8:	4604      	mov	r4, r0
 800a5da:	4603      	mov	r3, r0
 800a5dc:	f100 05a0 	add.w	r5, r0, #160	; 0xa0
 800a5e0:	f8d3 2a0c 	ldr.w	r2, [r3, #2572]	; 0xa0c
 800a5e4:	f8d3 1a14 	ldr.w	r1, [r3, #2580]	; 0xa14
 800a5e8:	42ca      	cmn	r2, r1
 800a5ea:	d11c      	bne.n	800a626 <ArtNetNode::SetNetworkDataLossCondition()+0x5a>
 800a5ec:	3328      	adds	r3, #40	; 0x28
 800a5ee:	42ab      	cmp	r3, r5
 800a5f0:	d1f6      	bne.n	800a5e0 <ArtNetNode::SetNetworkDataLossCondition()+0x14>
 800a5f2:	bd70      	pop	{r4, r5, r6, pc}
 800a5f4:	6840      	ldr	r0, [r0, #4]
 800a5f6:	2101      	movs	r1, #1
 800a5f8:	6803      	ldr	r3, [r0, #0]
 800a5fa:	695b      	ldr	r3, [r3, #20]
 800a5fc:	4798      	blx	r3
 800a5fe:	2200      	movs	r2, #0
 800a600:	2001      	movs	r0, #1
 800a602:	4b10      	ldr	r3, [pc, #64]	; (800a644 <ArtNetNode::SetNetworkDataLossCondition()+0x78>)
 800a604:	4910      	ldr	r1, [pc, #64]	; (800a648 <ArtNetNode::SetNetworkDataLossCondition()+0x7c>)
 800a606:	f8c4 2a0c 	str.w	r2, [r4, #2572]	; 0xa0c
 800a60a:	f8c4 2a14 	str.w	r2, [r4, #2580]	; 0xa14
 800a60e:	680e      	ldr	r6, [r1, #0]
 800a610:	3428      	adds	r4, #40	; 0x28
 800a612:	07f6      	lsls	r6, r6, #31
 800a614:	bf58      	it	pl
 800a616:	6008      	strpl	r0, [r1, #0]
 800a618:	42ac      	cmp	r4, r5
 800a61a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
 800a61e:	f203 6304 	addw	r3, r3, #1540	; 0x604
 800a622:	d1f0      	bne.n	800a606 <ArtNetNode::SetNetworkDataLossCondition()+0x3a>
 800a624:	e7e5      	b.n	800a5f2 <ArtNetNode::SetNetworkDataLossCondition()+0x26>
 800a626:	f890 308d 	ldrb.w	r3, [r0, #141]	; 0x8d
 800a62a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a62e:	2b40      	cmp	r3, #64	; 0x40
 800a630:	d0e0      	beq.n	800a5f4 <ArtNetNode::SetNetworkDataLossCondition()+0x28>
 800a632:	d9e4      	bls.n	800a5fe <ArtNetNode::SetNetworkDataLossCondition()+0x32>
 800a634:	2b80      	cmp	r3, #128	; 0x80
 800a636:	d1e2      	bne.n	800a5fe <ArtNetNode::SetNetworkDataLossCondition()+0x32>
 800a638:	6840      	ldr	r0, [r0, #4]
 800a63a:	6803      	ldr	r3, [r0, #0]
 800a63c:	699b      	ldr	r3, [r3, #24]
 800a63e:	4798      	blx	r3
 800a640:	e7dd      	b.n	800a5fe <ArtNetNode::SetNetworkDataLossCondition()+0x32>
 800a642:	bf00      	nop
 800a644:	200000b4 	strhcs	r0, [r0], -r4
 800a648:	200000b0 	strhcs	r0, [r0], -r0	; <UNPREDICTABLE>

0800a64c <ArtNetNode::GetType()>:
 800a64c:	f8b0 3568 	ldrh.w	r3, [r0, #1384]	; 0x568
 800a650:	b530      	push	{r4, r5, lr}
 800a652:	2b0b      	cmp	r3, #11
 800a654:	d91d      	bls.n	800a692 <ArtNetNode::GetType()+0x46>
 800a656:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
 800a65a:	b9d3      	cbnz	r3, 800a692 <ArtNetNode::GetType()+0x46>
 800a65c:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
 800a660:	2a0e      	cmp	r2, #14
 800a662:	d10d      	bne.n	800a680 <ArtNetNode::GetType()+0x34>
 800a664:	4a0c      	ldr	r2, [pc, #48]	; (800a698 <ArtNetNode::GetType()+0x4c>)
 800a666:	f100 0397 	add.w	r3, r0, #151	; 0x97
 800a66a:	f100 019f 	add.w	r1, r0, #159	; 0x9f
 800a66e:	428b      	cmp	r3, r1
 800a670:	d109      	bne.n	800a686 <ArtNetNode::GetType()+0x3a>
 800a672:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
 800a676:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800a67a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800a67e:	b29b      	uxth	r3, r3
 800a680:	f8a0 356a 	strh.w	r3, [r0, #1386]	; 0x56a
 800a684:	bd30      	pop	{r4, r5, pc}
 800a686:	f812 4b01 	ldrb.w	r4, [r2], #1
 800a68a:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 800a68e:	42a5      	cmp	r5, r4
 800a690:	d0ed      	beq.n	800a66e <ArtNetNode::GetType()+0x22>
 800a692:	2300      	movs	r3, #0
 800a694:	e7f4      	b.n	800a680 <ArtNetNode::GetType()+0x34>
 800a696:	bf00      	nop
 800a698:	080161b0 	stmdaeq	r1, {r4, r5, r7, r8, sp, lr}

0800a69c <ArtNetNode::Run()>:
 800a69c:	b530      	push	{r4, r5, lr}
 800a69e:	4601      	mov	r1, r0
 800a6a0:	4604      	mov	r4, r0
 800a6a2:	b085      	sub	sp, #20
 800a6a4:	f10d 030e 	add.w	r3, sp, #14
 800a6a8:	f811 0b98 	ldrb.w	r0, [r1], #152
 800a6ac:	f240 42cc 	movw	r2, #1228	; 0x4cc
 800a6b0:	9300      	str	r3, [sp, #0]
 800a6b2:	f204 5364 	addw	r3, r4, #1380	; 0x564
 800a6b6:	f005 fcdb 	bl	8010070 <udp_recv>
 800a6ba:	4b65      	ldr	r3, [pc, #404]	; (800a850 <ArtNetNode::Run()+0x1b4>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f8c4 3984 	str.w	r3, [r4, #2436]	; 0x984
 800a6c2:	2800      	cmp	r0, #0
 800a6c4:	d146      	bne.n	800a754 <ArtNetNode::Run()+0xb8>
 800a6c6:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
 800a6ca:	1a9b      	subs	r3, r3, r2
 800a6cc:	f242 720f 	movw	r2, #9999	; 0x270f
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d902      	bls.n	800a6da <ArtNetNode::Run()+0x3e>
 800a6d4:	4620      	mov	r0, r4
 800a6d6:	f7ff ff79 	bl	800a5cc <ArtNetNode::SetNetworkDataLossCondition()>
 800a6da:	f894 39f2 	ldrb.w	r3, [r4, #2546]	; 0x9f2
 800a6de:	b15b      	cbz	r3, 800a6f8 <ArtNetNode::Run()+0x5c>
 800a6e0:	69a0      	ldr	r0, [r4, #24]
 800a6e2:	f894 59f7 	ldrb.w	r5, [r4, #2551]	; 0x9f7
 800a6e6:	6803      	ldr	r3, [r0, #0]
 800a6e8:	695b      	ldr	r3, [r3, #20]
 800a6ea:	4798      	blx	r3
 800a6ec:	b905      	cbnz	r5, 800a6f0 <ArtNetNode::Run()+0x54>
 800a6ee:	b118      	cbz	r0, 800a6f8 <ArtNetNode::Run()+0x5c>
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	f000 ffc2 	bl	800b67c <ArtNetNode::SendPollRelply(bool)>
 800a6f8:	f8d4 3984 	ldr.w	r3, [r4, #2436]	; 0x984
 800a6fc:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
 800a700:	1a9b      	subs	r3, r3, r2
 800a702:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a706:	d305      	bcc.n	800a714 <ArtNetNode::Run()+0x78>
 800a708:	f894 39f9 	ldrb.w	r3, [r4, #2553]	; 0x9f9
 800a70c:	f023 0302 	bic.w	r3, r3, #2
 800a710:	f884 39f9 	strb.w	r3, [r4, #2553]	; 0x9f9
 800a714:	6923      	ldr	r3, [r4, #16]
 800a716:	b113      	cbz	r3, 800a71e <ArtNetNode::Run()+0x82>
 800a718:	4620      	mov	r0, r4
 800a71a:	f000 fd79 	bl	800b210 <ArtNetNode::HandleDmxIn()>
 800a71e:	68e3      	ldr	r3, [r4, #12]
 800a720:	b113      	cbz	r3, 800a728 <ArtNetNode::Run()+0x8c>
 800a722:	4620      	mov	r0, r4
 800a724:	f001 f9e2 	bl	800baec <ArtNetNode::HandleRdmIn()>
 800a728:	f894 308b 	ldrb.w	r3, [r4, #139]	; 0x8b
 800a72c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a730:	2bc0      	cmp	r3, #192	; 0xc0
 800a732:	d10d      	bne.n	800a750 <ArtNetNode::Run()+0xb4>
 800a734:	4b47      	ldr	r3, [pc, #284]	; (800a854 <ArtNetNode::Run()+0x1b8>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	2b04      	cmp	r3, #4
 800a73c:	d008      	beq.n	800a750 <ArtNetNode::Run()+0xb4>
 800a73e:	69a0      	ldr	r0, [r4, #24]
 800a740:	f894 29f9 	ldrb.w	r2, [r4, #2553]	; 0x9f9
 800a744:	6803      	ldr	r3, [r0, #0]
 800a746:	699b      	ldr	r3, [r3, #24]
 800a748:	2a00      	cmp	r2, #0
 800a74a:	d07f      	beq.n	800a84c <ArtNetNode::Run()+0x1b0>
 800a74c:	2103      	movs	r1, #3
 800a74e:	4798      	blx	r3
 800a750:	b005      	add	sp, #20
 800a752:	bd30      	pop	{r4, r5, pc}
 800a754:	f894 29f5 	ldrb.w	r2, [r4, #2549]	; 0x9f5
 800a758:	f8a4 0568 	strh.w	r0, [r4, #1384]	; 0x568
 800a75c:	f8c4 3988 	str.w	r3, [r4, #2440]	; 0x988
 800a760:	b142      	cbz	r2, 800a774 <ArtNetNode::Run()+0xd8>
 800a762:	f8d4 29ec 	ldr.w	r2, [r4, #2540]	; 0x9ec
 800a766:	1a9b      	subs	r3, r3, r2
 800a768:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800a76c:	bf24      	itt	cs
 800a76e:	2300      	movcs	r3, #0
 800a770:	f884 39f5 	strbcs.w	r3, [r4, #2549]	; 0x9f5
 800a774:	4620      	mov	r0, r4
 800a776:	f7ff ff69 	bl	800a64c <ArtNetNode::GetType()>
 800a77a:	f8b4 356a 	ldrh.w	r3, [r4, #1386]	; 0x56a
 800a77e:	f5b3 4f02 	cmp.w	r3, #33280	; 0x8200
 800a782:	d04e      	beq.n	800a822 <ArtNetNode::Run()+0x186>
 800a784:	d81b      	bhi.n	800a7be <ArtNetNode::Run()+0x122>
 800a786:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a78a:	d03d      	beq.n	800a808 <ArtNetNode::Run()+0x16c>
 800a78c:	d80b      	bhi.n	800a7a6 <ArtNetNode::Run()+0x10a>
 800a78e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a792:	d02d      	beq.n	800a7f0 <ArtNetNode::Run()+0x154>
 800a794:	f5b3 4fa4 	cmp.w	r3, #20992	; 0x5200
 800a798:	d030      	beq.n	800a7fc <ArtNetNode::Run()+0x160>
 800a79a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a79e:	d1b9      	bne.n	800a714 <ArtNetNode::Run()+0x78>
 800a7a0:	f000 ffb8 	bl	800b714 <ArtNetNode::HandlePoll()>
 800a7a4:	e7b6      	b.n	800a714 <ArtNetNode::Run()+0x78>
 800a7a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7aa:	d033      	beq.n	800a814 <ArtNetNode::Run()+0x178>
 800a7ac:	f5b3 4f01 	cmp.w	r3, #33024	; 0x8100
 800a7b0:	d1b0      	bne.n	800a714 <ArtNetNode::Run()+0x78>
 800a7b2:	68e3      	ldr	r3, [r4, #12]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d0ad      	beq.n	800a714 <ArtNetNode::Run()+0x78>
 800a7b8:	f001 f80e 	bl	800b7d8 <ArtNetNode::HandleTodData()>
 800a7bc:	e7aa      	b.n	800a714 <ArtNetNode::Run()+0x78>
 800a7be:	f5b3 4f18 	cmp.w	r3, #38912	; 0x9800
 800a7c2:	d024      	beq.n	800a80e <ArtNetNode::Run()+0x172>
 800a7c4:	d80b      	bhi.n	800a7de <ArtNetNode::Run()+0x142>
 800a7c6:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 800a7ca:	d031      	beq.n	800a830 <ArtNetNode::Run()+0x194>
 800a7cc:	f5b3 4f17 	cmp.w	r3, #38656	; 0x9700
 800a7d0:	d1a0      	bne.n	800a714 <ArtNetNode::Run()+0x78>
 800a7d2:	68a3      	ldr	r3, [r4, #8]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d09d      	beq.n	800a714 <ArtNetNode::Run()+0x78>
 800a7d8:	f001 fa20 	bl	800bc1c <ArtNetNode::HandleTimeCode()>
 800a7dc:	e79a      	b.n	800a714 <ArtNetNode::Run()+0x78>
 800a7de:	f5b3 4f19 	cmp.w	r3, #39168	; 0x9900
 800a7e2:	d02c      	beq.n	800a83e <ArtNetNode::Run()+0x1a2>
 800a7e4:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 800a7e8:	d194      	bne.n	800a714 <ArtNetNode::Run()+0x78>
 800a7ea:	f000 fda9 	bl	800b340 <ArtNetNode::HandleIpProg()>
 800a7ee:	e791      	b.n	800a714 <ArtNetNode::Run()+0x78>
 800a7f0:	6863      	ldr	r3, [r4, #4]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d08e      	beq.n	800a714 <ArtNetNode::Run()+0x78>
 800a7f6:	f000 fc24 	bl	800b042 <ArtNetNode::HandleDmx()>
 800a7fa:	e78b      	b.n	800a714 <ArtNetNode::Run()+0x78>
 800a7fc:	6863      	ldr	r3, [r4, #4]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d088      	beq.n	800a714 <ArtNetNode::Run()+0x78>
 800a802:	f001 f9c1 	bl	800bb88 <ArtNetNode::HandleSync()>
 800a806:	e785      	b.n	800a714 <ArtNetNode::Run()+0x78>
 800a808:	f000 f9fa 	bl	800ac00 <ArtNetNode::HandleAddress()>
 800a80c:	e782      	b.n	800a714 <ArtNetNode::Run()+0x78>
 800a80e:	f001 fa0b 	bl	800bc28 <ArtNetNode::HandleTimeSync()>
 800a812:	e77f      	b.n	800a714 <ArtNetNode::Run()+0x78>
 800a814:	68e3      	ldr	r3, [r4, #12]
 800a816:	2b00      	cmp	r3, #0
 800a818:	f43f af7c 	beq.w	800a714 <ArtNetNode::Run()+0x78>
 800a81c:	f001 f8af 	bl	800b97e <ArtNetNode::HandleTodRequest()>
 800a820:	e778      	b.n	800a714 <ArtNetNode::Run()+0x78>
 800a822:	68e3      	ldr	r3, [r4, #12]
 800a824:	2b00      	cmp	r3, #0
 800a826:	f43f af75 	beq.w	800a714 <ArtNetNode::Run()+0x78>
 800a82a:	f001 f86b 	bl	800b904 <ArtNetNode::HandleTodControl()>
 800a82e:	e771      	b.n	800a714 <ArtNetNode::Run()+0x78>
 800a830:	68e3      	ldr	r3, [r4, #12]
 800a832:	2b00      	cmp	r3, #0
 800a834:	f43f af6e 	beq.w	800a714 <ArtNetNode::Run()+0x78>
 800a838:	f001 f916 	bl	800ba68 <ArtNetNode::HandleRdm()>
 800a83c:	e76a      	b.n	800a714 <ArtNetNode::Run()+0x78>
 800a83e:	6963      	ldr	r3, [r4, #20]
 800a840:	2b00      	cmp	r3, #0
 800a842:	f43f af67 	beq.w	800a714 <ArtNetNode::Run()+0x78>
 800a846:	f001 ff97 	bl	800c778 <ArtNetNode::HandleTrigger()>
 800a84a:	e763      	b.n	800a714 <ArtNetNode::Run()+0x78>
 800a84c:	2102      	movs	r1, #2
 800a84e:	e77e      	b.n	800a74e <ArtNetNode::Run()+0xb2>
 800a850:	20009d6c 	andcs	r9, r0, ip, ror #26
 800a854:	20009d54 	andcs	r9, r0, r4, asr sp

0800a858 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>:
 800a858:	b93b      	cbnz	r3, 800a86a <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const+0x12>
 800a85a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800a85e:	f8b0 3aa0 	ldrh.w	r3, [r0, #2720]	; 0xaa0
 800a862:	8013      	strh	r3, [r2, #0]
 800a864:	f890 0aa4 	ldrb.w	r0, [r0, #2724]	; 0xaa4
 800a868:	4770      	bx	lr
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	bf01      	itttt	eq
 800a86e:	2328      	moveq	r3, #40	; 0x28
 800a870:	fb03 0001 	mlaeq	r0, r3, r1, r0
 800a874:	f8b0 3a00 	ldrheq.w	r3, [r0, #2560]	; 0xa00
 800a878:	f890 0a04 	ldrbeq.w	r0, [r0, #2564]	; 0xa04
 800a87c:	bf0c      	ite	eq
 800a87e:	8013      	strheq	r3, [r2, #0]
 800a880:	2000      	movne	r0, #0
 800a882:	4770      	bx	lr

0800a884 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>:
 800a884:	4402      	add	r2, r0
 800a886:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
 800a88a:	f892 2037 	ldrb.w	r2, [r2, #55]	; 0x37
 800a88e:	021b      	lsls	r3, r3, #8
 800a890:	0112      	lsls	r2, r2, #4
 800a892:	b2d2      	uxtb	r2, r2
 800a894:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800a898:	4313      	orrs	r3, r2
 800a89a:	f001 010f 	and.w	r1, r1, #15
 800a89e:	ea43 0001 	orr.w	r0, r3, r1
 800a8a2:	4770      	bx	lr

0800a8a4 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>:
 800a8a4:	2903      	cmp	r1, #3
 800a8a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8aa:	4604      	mov	r4, r0
 800a8ac:	460d      	mov	r5, r1
 800a8ae:	4617      	mov	r7, r2
 800a8b0:	461e      	mov	r6, r3
 800a8b2:	f200 809e 	bhi.w	800a9f2 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x14e>
 800a8b6:	2a02      	cmp	r2, #2
 800a8b8:	d121      	bne.n	800a8fe <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x5a>
 800a8ba:	2328      	movs	r3, #40	; 0x28
 800a8bc:	fb03 0301 	mla	r3, r3, r1, r0
 800a8c0:	f893 2a04 	ldrb.w	r2, [r3, #2564]	; 0xa04
 800a8c4:	b13a      	cbz	r2, 800a8d6 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x32>
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f883 2a04 	strb.w	r2, [r3, #2564]	; 0xa04
 800a8cc:	f890 39fa 	ldrb.w	r3, [r0, #2554]	; 0x9fa
 800a8d0:	3b01      	subs	r3, #1
 800a8d2:	f880 39fa 	strb.w	r3, [r0, #2554]	; 0x9fa
 800a8d6:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 800a8da:	f895 3aa4 	ldrb.w	r3, [r5, #2724]	; 0xaa4
 800a8de:	b90b      	cbnz	r3, 800a8e4 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x40>
 800a8e0:	2000      	movs	r0, #0
 800a8e2:	e00a      	b.n	800a8fa <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x56>
 800a8e4:	2308      	movs	r3, #8
 800a8e6:	2000      	movs	r0, #0
 800a8e8:	f885 3aa3 	strb.w	r3, [r5, #2723]	; 0xaa3
 800a8ec:	f885 0aa4 	strb.w	r0, [r5, #2724]	; 0xaa4
 800a8f0:	f894 39fb 	ldrb.w	r3, [r4, #2555]	; 0x9fb
 800a8f4:	3b01      	subs	r3, #1
 800a8f6:	f884 39fb 	strb.w	r3, [r4, #2555]	; 0x9fb
 800a8fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8fe:	bbba      	cbnz	r2, 800a970 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xcc>
 800a900:	eb00 1801 	add.w	r8, r0, r1, lsl #4
 800a904:	f898 3aa4 	ldrb.w	r3, [r8, #2724]	; 0xaa4
 800a908:	b923      	cbnz	r3, 800a914 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x70>
 800a90a:	f890 39fb 	ldrb.w	r3, [r0, #2555]	; 0x9fb
 800a90e:	3301      	adds	r3, #1
 800a910:	f880 39fb 	strb.w	r3, [r0, #2555]	; 0x9fb
 800a914:	2301      	movs	r3, #1
 800a916:	f04f 0900 	mov.w	r9, #0
 800a91a:	f888 3aa4 	strb.w	r3, [r8, #2724]	; 0xaa4
 800a91e:	f006 030f 	and.w	r3, r6, #15
 800a922:	464a      	mov	r2, r9
 800a924:	f888 3aa2 	strb.w	r3, [r8, #2722]	; 0xaa2
 800a928:	4631      	mov	r1, r6
 800a92a:	4620      	mov	r0, r4
 800a92c:	f888 9aa3 	strb.w	r9, [r8, #2723]	; 0xaa3
 800a930:	f7ff ffa8 	bl	800a884 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800a934:	2328      	movs	r3, #40	; 0x28
 800a936:	fb03 4305 	mla	r3, r3, r5, r4
 800a93a:	f8a8 0aa0 	strh.w	r0, [r8, #2720]	; 0xaa0
 800a93e:	f893 2a04 	ldrb.w	r2, [r3, #2564]	; 0xa04
 800a942:	b132      	cbz	r2, 800a952 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xae>
 800a944:	f883 9a04 	strb.w	r9, [r3, #2564]	; 0xa04
 800a948:	f894 39fa 	ldrb.w	r3, [r4, #2554]	; 0x9fa
 800a94c:	3b01      	subs	r3, #1
 800a94e:	f884 39fa 	strb.w	r3, [r4, #2554]	; 0x9fa
 800a952:	69a0      	ldr	r0, [r4, #24]
 800a954:	f894 39f1 	ldrb.w	r3, [r4, #2545]	; 0x9f1
 800a958:	2800      	cmp	r0, #0
 800a95a:	d03e      	beq.n	800a9da <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x136>
 800a95c:	2b02      	cmp	r3, #2
 800a95e:	d137      	bne.n	800a9d0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x12c>
 800a960:	69e0      	ldr	r0, [r4, #28]
 800a962:	2800      	cmp	r0, #0
 800a964:	d13f      	bne.n	800a9e6 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x142>
 800a966:	4631      	mov	r1, r6
 800a968:	4628      	mov	r0, r5
 800a96a:	f007 fc23 	bl	80121b4 <artnet::display_universe_switch(unsigned int, unsigned char)>
 800a96e:	e7b7      	b.n	800a8e0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 800a970:	2a01      	cmp	r2, #1
 800a972:	d1ee      	bne.n	800a952 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xae>
 800a974:	f04f 0828 	mov.w	r8, #40	; 0x28
 800a978:	fb08 0301 	mla	r3, r8, r1, r0
 800a97c:	f893 3a04 	ldrb.w	r3, [r3, #2564]	; 0xa04
 800a980:	b923      	cbnz	r3, 800a98c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xe8>
 800a982:	f890 39fa 	ldrb.w	r3, [r0, #2554]	; 0x9fa
 800a986:	3301      	adds	r3, #1
 800a988:	f880 39fa 	strb.w	r3, [r0, #2554]	; 0x9fa
 800a98c:	2301      	movs	r3, #1
 800a98e:	fb08 4805 	mla	r8, r8, r5, r4
 800a992:	f888 3a04 	strb.w	r3, [r8, #2564]	; 0xa04
 800a996:	f006 030f 	and.w	r3, r6, #15
 800a99a:	2200      	movs	r2, #0
 800a99c:	f888 3a02 	strb.w	r3, [r8, #2562]	; 0xa02
 800a9a0:	4631      	mov	r1, r6
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	f7ff ff6e 	bl	800a884 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800a9a8:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 800a9ac:	f8a8 0a00 	strh.w	r0, [r8, #2560]	; 0xa00
 800a9b0:	f893 2aa4 	ldrb.w	r2, [r3, #2724]	; 0xaa4
 800a9b4:	2a00      	cmp	r2, #0
 800a9b6:	d0cc      	beq.n	800a952 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xae>
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	f883 2aa4 	strb.w	r2, [r3, #2724]	; 0xaa4
 800a9be:	2208      	movs	r2, #8
 800a9c0:	f883 2aa3 	strb.w	r2, [r3, #2723]	; 0xaa3
 800a9c4:	f894 39fb 	ldrb.w	r3, [r4, #2555]	; 0x9fb
 800a9c8:	3b01      	subs	r3, #1
 800a9ca:	f884 39fb 	strb.w	r3, [r4, #2555]	; 0x9fb
 800a9ce:	e7c0      	b.n	800a952 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xae>
 800a9d0:	6803      	ldr	r3, [r0, #0]
 800a9d2:	463a      	mov	r2, r7
 800a9d4:	4629      	mov	r1, r5
 800a9d6:	689b      	ldr	r3, [r3, #8]
 800a9d8:	4798      	blx	r3
 800a9da:	f894 39f1 	ldrb.w	r3, [r4, #2545]	; 0x9f1
 800a9de:	2b02      	cmp	r3, #2
 800a9e0:	f47f af7e 	bne.w	800a8e0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 800a9e4:	e7bc      	b.n	800a960 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xbc>
 800a9e6:	6803      	ldr	r3, [r0, #0]
 800a9e8:	4632      	mov	r2, r6
 800a9ea:	4629      	mov	r1, r5
 800a9ec:	695b      	ldr	r3, [r3, #20]
 800a9ee:	4798      	blx	r3
 800a9f0:	e7b9      	b.n	800a966 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xc2>
 800a9f2:	f06f 0004 	mvn.w	r0, #4
 800a9f6:	e780      	b.n	800a8fa <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x56>

0800a9f8 <ArtNetNode::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
 800a9f8:	b430      	push	{r4, r5}
 800a9fa:	eb00 0491 	add.w	r4, r0, r1, lsr #2
 800a9fe:	f3c3 2506 	ubfx	r5, r3, #8, #7
 800aa02:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
 800aa06:	f3c3 1503 	ubfx	r5, r3, #4, #4
 800aa0a:	f884 5037 	strb.w	r5, [r4, #55]	; 0x37
 800aa0e:	f003 030f 	and.w	r3, r3, #15
 800aa12:	bc30      	pop	{r4, r5}
 800aa14:	f7ff bf46 	b.w	800a8a4 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>

0800aa18 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>:
 800aa18:	2903      	cmp	r1, #3
 800aa1a:	d813      	bhi.n	800aa44 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x2c>
 800aa1c:	b93b      	cbnz	r3, 800aa2e <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x16>
 800aa1e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800aa22:	f890 3aa2 	ldrb.w	r3, [r0, #2722]	; 0xaa2
 800aa26:	7013      	strb	r3, [r2, #0]
 800aa28:	f890 0aa4 	ldrb.w	r0, [r0, #2724]	; 0xaa4
 800aa2c:	4770      	bx	lr
 800aa2e:	2b02      	cmp	r3, #2
 800aa30:	d008      	beq.n	800aa44 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x2c>
 800aa32:	2328      	movs	r3, #40	; 0x28
 800aa34:	fb03 0001 	mla	r0, r3, r1, r0
 800aa38:	f890 3a02 	ldrb.w	r3, [r0, #2562]	; 0xa02
 800aa3c:	7013      	strb	r3, [r2, #0]
 800aa3e:	f890 0a04 	ldrb.w	r0, [r0, #2564]	; 0xa04
 800aa42:	4770      	bx	lr
 800aa44:	2000      	movs	r0, #0
 800aa46:	4770      	bx	lr

0800aa48 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>:
 800aa48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa4c:	26a0      	movs	r6, #160	; 0xa0
 800aa4e:	ea4f 0882 	mov.w	r8, r2, lsl #2
 800aa52:	f108 0904 	add.w	r9, r8, #4
 800aa56:	f1b9 0f04 	cmp.w	r9, #4
 800aa5a:	4605      	mov	r5, r0
 800aa5c:	460f      	mov	r7, r1
 800aa5e:	4614      	mov	r4, r2
 800aa60:	bf28      	it	cs
 800aa62:	f04f 0904 	movcs.w	r9, #4
 800aa66:	fb06 0602 	mla	r6, r6, r2, r0
 800aa6a:	1883      	adds	r3, r0, r2
 800aa6c:	f883 1037 	strb.w	r1, [r3, #55]	; 0x37
 800aa70:	45c8      	cmp	r8, r9
 800aa72:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800aa76:	d30c      	bcc.n	800aa92 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x4a>
 800aa78:	69e8      	ldr	r0, [r5, #28]
 800aa7a:	b1a8      	cbz	r0, 800aaa8 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x60>
 800aa7c:	f895 39f1 	ldrb.w	r3, [r5, #2545]	; 0x9f1
 800aa80:	2b02      	cmp	r3, #2
 800aa82:	d111      	bne.n	800aaa8 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x60>
 800aa84:	6803      	ldr	r3, [r0, #0]
 800aa86:	463a      	mov	r2, r7
 800aa88:	4621      	mov	r1, r4
 800aa8a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa8e:	69db      	ldr	r3, [r3, #28]
 800aa90:	4718      	bx	r3
 800aa92:	f8b6 19d8 	ldrh.w	r1, [r6, #2520]	; 0x9d8
 800aa96:	4622      	mov	r2, r4
 800aa98:	4628      	mov	r0, r5
 800aa9a:	f7ff fef3 	bl	800a884 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800aa9e:	f108 0801 	add.w	r8, r8, #1
 800aaa2:	f8a6 09d8 	strh.w	r0, [r6, #2520]	; 0x9d8
 800aaa6:	e7e3      	b.n	800aa70 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x28>
 800aaa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800aaac <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>:
 800aaac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aab0:	26a0      	movs	r6, #160	; 0xa0
 800aab2:	ea4f 0882 	mov.w	r8, r2, lsl #2
 800aab6:	f108 0904 	add.w	r9, r8, #4
 800aaba:	f1b9 0f04 	cmp.w	r9, #4
 800aabe:	4605      	mov	r5, r0
 800aac0:	460f      	mov	r7, r1
 800aac2:	4614      	mov	r4, r2
 800aac4:	bf28      	it	cs
 800aac6:	f04f 0904 	movcs.w	r9, #4
 800aaca:	fb06 0602 	mla	r6, r6, r2, r0
 800aace:	1883      	adds	r3, r0, r2
 800aad0:	f883 1036 	strb.w	r1, [r3, #54]	; 0x36
 800aad4:	45c8      	cmp	r8, r9
 800aad6:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800aada:	d30c      	bcc.n	800aaf6 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x4a>
 800aadc:	69e8      	ldr	r0, [r5, #28]
 800aade:	b1a8      	cbz	r0, 800ab0c <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x60>
 800aae0:	f895 39f1 	ldrb.w	r3, [r5, #2545]	; 0x9f1
 800aae4:	2b02      	cmp	r3, #2
 800aae6:	d111      	bne.n	800ab0c <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x60>
 800aae8:	6803      	ldr	r3, [r0, #0]
 800aaea:	463a      	mov	r2, r7
 800aaec:	4621      	mov	r1, r4
 800aaee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaf2:	699b      	ldr	r3, [r3, #24]
 800aaf4:	4718      	bx	r3
 800aaf6:	f8b6 19d8 	ldrh.w	r1, [r6, #2520]	; 0x9d8
 800aafa:	4622      	mov	r2, r4
 800aafc:	4628      	mov	r0, r5
 800aafe:	f7ff fec1 	bl	800a884 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800ab02:	f108 0801 	add.w	r8, r8, #1
 800ab06:	f8a6 09d8 	strh.w	r0, [r6, #2520]	; 0x9d8
 800ab0a:	e7e3      	b.n	800aad4 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x28>
 800ab0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ab10 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>:
 800ab10:	2903      	cmp	r1, #3
 800ab12:	b538      	push	{r3, r4, r5, lr}
 800ab14:	460c      	mov	r4, r1
 800ab16:	4615      	mov	r5, r2
 800ab18:	d820      	bhi.n	800ab5c <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x4c>
 800ab1a:	2228      	movs	r2, #40	; 0x28
 800ab1c:	fb02 0301 	mla	r3, r2, r1, r0
 800ab20:	fb02 0201 	mla	r2, r2, r1, r0
 800ab24:	f8c3 5a20 	str.w	r5, [r3, #2592]	; 0xa20
 800ab28:	f893 3a03 	ldrb.w	r3, [r3, #2563]	; 0xa03
 800ab2c:	2d01      	cmp	r5, #1
 800ab2e:	bf0c      	ite	eq
 800ab30:	f043 0301 	orreq.w	r3, r3, #1
 800ab34:	f003 03fe 	andne.w	r3, r3, #254	; 0xfe
 800ab38:	f882 3a03 	strb.w	r3, [r2, #2563]	; 0xa03
 800ab3c:	f890 39f1 	ldrb.w	r3, [r0, #2545]	; 0x9f1
 800ab40:	2b02      	cmp	r3, #2
 800ab42:	d10b      	bne.n	800ab5c <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x4c>
 800ab44:	69c0      	ldr	r0, [r0, #28]
 800ab46:	b118      	cbz	r0, 800ab50 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x40>
 800ab48:	6803      	ldr	r3, [r0, #0]
 800ab4a:	462a      	mov	r2, r5
 800ab4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab4e:	4798      	blx	r3
 800ab50:	4629      	mov	r1, r5
 800ab52:	4620      	mov	r0, r4
 800ab54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab58:	f007 bb40 	b.w	80121dc <artnet::display_port_protocol(unsigned int, artnet::PortProtocol)>
 800ab5c:	bd38      	pop	{r3, r4, r5, pc}

0800ab5e <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>:
 800ab5e:	2903      	cmp	r1, #3
 800ab60:	b538      	push	{r3, r4, r5, lr}
 800ab62:	460c      	mov	r4, r1
 800ab64:	4615      	mov	r5, r2
 800ab66:	d820      	bhi.n	800abaa <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x4c>
 800ab68:	2228      	movs	r2, #40	; 0x28
 800ab6a:	fb02 0301 	mla	r3, r2, r1, r0
 800ab6e:	fb02 0201 	mla	r2, r2, r1, r0
 800ab72:	f8c3 5a18 	str.w	r5, [r3, #2584]	; 0xa18
 800ab76:	f893 3a03 	ldrb.w	r3, [r3, #2563]	; 0xa03
 800ab7a:	2d01      	cmp	r5, #1
 800ab7c:	bf0c      	ite	eq
 800ab7e:	f043 0302 	orreq.w	r3, r3, #2
 800ab82:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
 800ab86:	f882 3a03 	strb.w	r3, [r2, #2563]	; 0xa03
 800ab8a:	f890 39f1 	ldrb.w	r3, [r0, #2545]	; 0x9f1
 800ab8e:	2b02      	cmp	r3, #2
 800ab90:	d10b      	bne.n	800abaa <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x4c>
 800ab92:	69c0      	ldr	r0, [r0, #28]
 800ab94:	b118      	cbz	r0, 800ab9e <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x40>
 800ab96:	6803      	ldr	r3, [r0, #0]
 800ab98:	462a      	mov	r2, r5
 800ab9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9c:	4798      	blx	r3
 800ab9e:	4629      	mov	r1, r5
 800aba0:	4620      	mov	r0, r4
 800aba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aba6:	f007 bb0f 	b.w	80121c8 <artnet::display_merge_mode(unsigned int, lightset::MergeMode)>
 800abaa:	bd38      	pop	{r3, r4, r5, pc}

0800abac <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>:
 800abac:	b510      	push	{r4, lr}
 800abae:	f890 308d 	ldrb.w	r3, [r0, #141]	; 0x8d
 800abb2:	f1a1 0208 	sub.w	r2, r1, #8
 800abb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abba:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
 800abbe:	2a04      	cmp	r2, #4
 800abc0:	d81c      	bhi.n	800abfc <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x50>
 800abc2:	e8df f002 	tbb	[pc, r2]
 800abc6:	1b180307 	blne	860b7ea <__exidx_end+0x5f343e>
 800abca:	f043001b 			; <UNDEFINED> instruction: 0xf043001b
 800abce:	0340      	lsls	r0, r0, #13
 800abd0:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
 800abd4:	f890 39f1 	ldrb.w	r3, [r0, #2545]	; 0x9f1
 800abd8:	2b02      	cmp	r3, #2
 800abda:	d10f      	bne.n	800abfc <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x50>
 800abdc:	69c0      	ldr	r0, [r0, #28]
 800abde:	f001 0403 	and.w	r4, r1, #3
 800abe2:	b118      	cbz	r0, 800abec <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x40>
 800abe4:	6803      	ldr	r3, [r0, #0]
 800abe6:	4621      	mov	r1, r4
 800abe8:	689b      	ldr	r3, [r3, #8]
 800abea:	4798      	blx	r3
 800abec:	4620      	mov	r0, r4
 800abee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abf2:	f007 baf6 	b.w	80121e2 <artnet::display_failsafe(unsigned char)>
 800abf6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800abfa:	e7e9      	b.n	800abd0 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x24>
 800abfc:	bd10      	pop	{r4, pc}
	...

0800ac00 <ArtNetNode::HandleAddress()>:
 800ac00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac04:	2301      	movs	r3, #1
 800ac06:	f880 39f0 	strb.w	r3, [r0, #2544]	; 0x9f0
 800ac0a:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 800ac0e:	4604      	mov	r4, r0
 800ac10:	b133      	cbz	r3, 800ac20 <ArtNetNode::HandleAddress()+0x20>
 800ac12:	f100 01a6 	add.w	r1, r0, #166	; 0xa6
 800ac16:	f7ff fbdf 	bl	800a3d8 <ArtNetNode::SetShortName(char const*)>
 800ac1a:	2306      	movs	r3, #6
 800ac1c:	f884 39f0 	strb.w	r3, [r4, #2544]	; 0x9f0
 800ac20:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
 800ac24:	b13b      	cbz	r3, 800ac36 <ArtNetNode::HandleAddress()+0x36>
 800ac26:	4620      	mov	r0, r4
 800ac28:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
 800ac2c:	f7ff fbf5 	bl	800a41a <ArtNetNode::SetLongName(char const*)>
 800ac30:	2307      	movs	r3, #7
 800ac32:	f884 39f0 	strb.w	r3, [r4, #2544]	; 0x9f0
 800ac36:	f894 50a5 	ldrb.w	r5, [r4, #165]	; 0xa5
 800ac3a:	b105      	cbz	r5, 800ac3e <ArtNetNode::HandleAddress()+0x3e>
 800ac3c:	3d01      	subs	r5, #1
 800ac3e:	f894 1100 	ldrb.w	r1, [r4, #256]	; 0x100
 800ac42:	2900      	cmp	r1, #0
 800ac44:	d148      	bne.n	800acd8 <ArtNetNode::HandleAddress()+0xd8>
 800ac46:	462a      	mov	r2, r5
 800ac48:	4620      	mov	r0, r4
 800ac4a:	f7ff fefd 	bl	800aa48 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800ac4e:	f894 10a4 	ldrb.w	r1, [r4, #164]	; 0xa4
 800ac52:	2900      	cmp	r1, #0
 800ac54:	d146      	bne.n	800ace4 <ArtNetNode::HandleAddress()+0xe4>
 800ac56:	462a      	mov	r2, r5
 800ac58:	4620      	mov	r0, r4
 800ac5a:	f7ff ff27 	bl	800aaac <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800ac5e:	00ad      	lsls	r5, r5, #2
 800ac60:	4627      	mov	r7, r4
 800ac62:	462e      	mov	r6, r5
 800ac64:	f104 08f7 	add.w	r8, r4, #247	; 0xf7
 800ac68:	f104 09fb 	add.w	r9, r4, #251	; 0xfb
 800ac6c:	f898 3005 	ldrb.w	r3, [r8, #5]
 800ac70:	2b7f      	cmp	r3, #127	; 0x7f
 800ac72:	d007      	beq.n	800ac84 <ArtNetNode::HandleAddress()+0x84>
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d13b      	bne.n	800acf0 <ArtNetNode::HandleAddress()+0xf0>
 800ac78:	2301      	movs	r3, #1
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	4631      	mov	r1, r6
 800ac7e:	4620      	mov	r0, r4
 800ac80:	f7ff fe10 	bl	800a8a4 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 800ac84:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 800ac88:	2a7f      	cmp	r2, #127	; 0x7f
 800ac8a:	d005      	beq.n	800ac98 <ArtNetNode::HandleAddress()+0x98>
 800ac8c:	bbaa      	cbnz	r2, 800acfa <ArtNetNode::HandleAddress()+0xfa>
 800ac8e:	2301      	movs	r3, #1
 800ac90:	4631      	mov	r1, r6
 800ac92:	4620      	mov	r0, r4
 800ac94:	f7ff fe06 	bl	800a8a4 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 800ac98:	45c8      	cmp	r8, r9
 800ac9a:	f106 0601 	add.w	r6, r6, #1
 800ac9e:	d1e5      	bne.n	800ac6c <ArtNetNode::HandleAddress()+0x6c>
 800aca0:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
 800aca4:	f003 0103 	and.w	r1, r3, #3
 800aca8:	2b53      	cmp	r3, #83	; 0x53
 800acaa:	4429      	add	r1, r5
 800acac:	d82b      	bhi.n	800ad06 <ArtNetNode::HandleAddress()+0x106>
 800acae:	2b4f      	cmp	r3, #79	; 0x4f
 800acb0:	f200 8092 	bhi.w	800add8 <ArtNetNode::HandleAddress()+0x1d8>
 800acb4:	1e5a      	subs	r2, r3, #1
 800acb6:	b2d0      	uxtb	r0, r2
 800acb8:	2812      	cmp	r0, #18
 800acba:	d834      	bhi.n	800ad26 <ArtNetNode::HandleAddress()+0x126>
 800acbc:	2a12      	cmp	r2, #18
 800acbe:	d832      	bhi.n	800ad26 <ArtNetNode::HandleAddress()+0x126>
 800acc0:	e8df f002 	tbb	[pc, r2]
 800acc4:	74685c4d 	strbtvc	r5, [r8], #-3149	; 0xfffff3b3
 800acc8:	80313131 	eorshi	r3, r1, r1, lsr r1
 800accc:	80808080 	addhi	r8, r0, r0, lsl #1
 800acd0:	85313131 	ldrhi	r3, [r1, #-305]!	; 0xfffffecf
 800acd4:	00858585 	addeq	r8, r5, r5, lsl #11
 800acd8:	060f      	lsls	r7, r1, #24
 800acda:	d5b8      	bpl.n	800ac4e <ArtNetNode::HandleAddress()+0x4e>
 800acdc:	462a      	mov	r2, r5
 800acde:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800ace2:	e7b1      	b.n	800ac48 <ArtNetNode::HandleAddress()+0x48>
 800ace4:	060e      	lsls	r6, r1, #24
 800ace6:	d5ba      	bpl.n	800ac5e <ArtNetNode::HandleAddress()+0x5e>
 800ace8:	462a      	mov	r2, r5
 800acea:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800acee:	e7b3      	b.n	800ac58 <ArtNetNode::HandleAddress()+0x58>
 800acf0:	0618      	lsls	r0, r3, #24
 800acf2:	d5c7      	bpl.n	800ac84 <ArtNetNode::HandleAddress()+0x84>
 800acf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acf8:	e7bf      	b.n	800ac7a <ArtNetNode::HandleAddress()+0x7a>
 800acfa:	0611      	lsls	r1, r2, #24
 800acfc:	d5cc      	bpl.n	800ac98 <ArtNetNode::HandleAddress()+0x98>
 800acfe:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 800ad02:	2200      	movs	r2, #0
 800ad04:	e7c4      	b.n	800ac90 <ArtNetNode::HandleAddress()+0x90>
 800ad06:	2b93      	cmp	r3, #147	; 0x93
 800ad08:	d81a      	bhi.n	800ad40 <ArtNetNode::HandleAddress()+0x140>
 800ad0a:	2b8f      	cmp	r3, #143	; 0x8f
 800ad0c:	d868      	bhi.n	800ade0 <ArtNetNode::HandleAddress()+0x1e0>
 800ad0e:	2b63      	cmp	r3, #99	; 0x63
 800ad10:	d806      	bhi.n	800ad20 <ArtNetNode::HandleAddress()+0x120>
 800ad12:	2b5f      	cmp	r3, #95	; 0x5f
 800ad14:	d907      	bls.n	800ad26 <ArtNetNode::HandleAddress()+0x126>
 800ad16:	2200      	movs	r2, #0
 800ad18:	4620      	mov	r0, r4
 800ad1a:	f7ff fef9 	bl	800ab10 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 800ad1e:	e002      	b.n	800ad26 <ArtNetNode::HandleAddress()+0x126>
 800ad20:	3b70      	subs	r3, #112	; 0x70
 800ad22:	2b03      	cmp	r3, #3
 800ad24:	d95a      	bls.n	800addc <ArtNetNode::HandleAddress()+0x1dc>
 800ad26:	69a0      	ldr	r0, [r4, #24]
 800ad28:	b120      	cbz	r0, 800ad34 <ArtNetNode::HandleAddress()+0x134>
 800ad2a:	6803      	ldr	r3, [r0, #0]
 800ad2c:	f894 1102 	ldrb.w	r1, [r4, #258]	; 0x102
 800ad30:	68db      	ldr	r3, [r3, #12]
 800ad32:	4798      	blx	r3
 800ad34:	4620      	mov	r0, r4
 800ad36:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad3a:	2101      	movs	r1, #1
 800ad3c:	f000 bc9e 	b.w	800b67c <ArtNetNode::SendPollRelply(bool)>
 800ad40:	2bc3      	cmp	r3, #195	; 0xc3
 800ad42:	d806      	bhi.n	800ad52 <ArtNetNode::HandleAddress()+0x152>
 800ad44:	2bbf      	cmp	r3, #191	; 0xbf
 800ad46:	d9ee      	bls.n	800ad26 <ArtNetNode::HandleAddress()+0x126>
 800ad48:	2201      	movs	r2, #1
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	f000 fd28 	bl	800b7a0 <ArtNetNode::SetRmd(unsigned int, bool)>
 800ad50:	e7e9      	b.n	800ad26 <ArtNetNode::HandleAddress()+0x126>
 800ad52:	3330      	adds	r3, #48	; 0x30
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	2b03      	cmp	r3, #3
 800ad58:	d8e5      	bhi.n	800ad26 <ArtNetNode::HandleAddress()+0x126>
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	e7f5      	b.n	800ad4a <ArtNetNode::HandleAddress()+0x14a>
 800ad5e:	2300      	movs	r3, #0
 800ad60:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
 800ad64:	f884 39f6 	strb.w	r3, [r4, #2550]	; 0x9f6
 800ad68:	f897 3a03 	ldrb.w	r3, [r7, #2563]	; 0xa03
 800ad6c:	3728      	adds	r7, #40	; 0x28
 800ad6e:	f023 0308 	bic.w	r3, r3, #8
 800ad72:	f887 39db 	strb.w	r3, [r7, #2523]	; 0x9db
 800ad76:	42ba      	cmp	r2, r7
 800ad78:	d1f6      	bne.n	800ad68 <ArtNetNode::HandleAddress()+0x168>
 800ad7a:	e7d4      	b.n	800ad26 <ArtNetNode::HandleAddress()+0x126>
 800ad7c:	4b3a      	ldr	r3, [pc, #232]	; (800ae68 <ArtNetNode::HandleAddress()+0x268>)
 800ad7e:	2102      	movs	r1, #2
 800ad80:	6818      	ldr	r0, [r3, #0]
 800ad82:	f009 f809 	bl	8013d98 <LedBlink::SetMode(ledblink::Mode)>
 800ad86:	f894 308b 	ldrb.w	r3, [r4, #139]	; 0x8b
 800ad8a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800ad8e:	f884 308b 	strb.w	r3, [r4, #139]	; 0x8b
 800ad92:	e7c8      	b.n	800ad26 <ArtNetNode::HandleAddress()+0x126>
 800ad94:	4b34      	ldr	r3, [pc, #208]	; (800ae68 <ArtNetNode::HandleAddress()+0x268>)
 800ad96:	2100      	movs	r1, #0
 800ad98:	6818      	ldr	r0, [r3, #0]
 800ad9a:	f008 fffd 	bl	8013d98 <LedBlink::SetMode(ledblink::Mode)>
 800ad9e:	f894 308b 	ldrb.w	r3, [r4, #139]	; 0x8b
 800ada2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ada6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800adaa:	e7f0      	b.n	800ad8e <ArtNetNode::HandleAddress()+0x18e>
 800adac:	4b2e      	ldr	r3, [pc, #184]	; (800ae68 <ArtNetNode::HandleAddress()+0x268>)
 800adae:	2104      	movs	r1, #4
 800adb0:	6818      	ldr	r0, [r3, #0]
 800adb2:	f008 fff1 	bl	8013d98 <LedBlink::SetMode(ledblink::Mode)>
 800adb6:	f894 308b 	ldrb.w	r3, [r4, #139]	; 0x8b
 800adba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800adbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adc2:	e7e4      	b.n	800ad8e <ArtNetNode::HandleAddress()+0x18e>
 800adc4:	4619      	mov	r1, r3
 800adc6:	4620      	mov	r0, r4
 800adc8:	f7ff fef0 	bl	800abac <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>
 800adcc:	e7ab      	b.n	800ad26 <ArtNetNode::HandleAddress()+0x126>
 800adce:	2201      	movs	r2, #1
 800add0:	4620      	mov	r0, r4
 800add2:	f7ff fec4 	bl	800ab5e <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 800add6:	e7a6      	b.n	800ad26 <ArtNetNode::HandleAddress()+0x126>
 800add8:	2200      	movs	r2, #0
 800adda:	e7f9      	b.n	800add0 <ArtNetNode::HandleAddress()+0x1d0>
 800addc:	2201      	movs	r2, #1
 800adde:	e79b      	b.n	800ad18 <ArtNetNode::HandleAddress()+0x118>
 800ade0:	4b22      	ldr	r3, [pc, #136]	; (800ae6c <ArtNetNode::HandleAddress()+0x26c>)
 800ade2:	b2cd      	uxtb	r5, r1
 800ade4:	681a      	ldr	r2, [r3, #0]
 800ade6:	2700      	movs	r7, #0
 800ade8:	07d2      	lsls	r2, r2, #31
 800adea:	bf5c      	itt	pl
 800adec:	2201      	movpl	r2, #1
 800adee:	601a      	strpl	r2, [r3, #0]
 800adf0:	f240 6204 	movw	r2, #1540	; 0x604
 800adf4:	436a      	muls	r2, r5
 800adf6:	4b1e      	ldr	r3, [pc, #120]	; (800ae70 <ArtNetNode::HandleAddress()+0x270>)
 800adf8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800adfc:	441a      	add	r2, r3
 800adfe:	4611      	mov	r1, r2
 800ae00:	6860      	ldr	r0, [r4, #4]
 800ae02:	f502 7600 	add.w	r6, r2, #512	; 0x200
 800ae06:	428e      	cmp	r6, r1
 800ae08:	d12a      	bne.n	800ae60 <ArtNetNode::HandleAddress()+0x260>
 800ae0a:	f240 6104 	movw	r1, #1540	; 0x604
 800ae0e:	fb01 3105 	mla	r1, r1, r5, r3
 800ae12:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae16:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
 800ae1a:	6801      	ldr	r1, [r0, #0]
 800ae1c:	690e      	ldr	r6, [r1, #16]
 800ae1e:	4629      	mov	r1, r5
 800ae20:	47b0      	blx	r6
 800ae22:	2d03      	cmp	r5, #3
 800ae24:	f63f af7f 	bhi.w	800ad26 <ArtNetNode::HandleAddress()+0x126>
 800ae28:	2628      	movs	r6, #40	; 0x28
 800ae2a:	fb06 4605 	mla	r6, r6, r5, r4
 800ae2e:	f8d6 3a20 	ldr.w	r3, [r6, #2592]	; 0xa20
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	f47f af77 	bne.w	800ad26 <ArtNetNode::HandleAddress()+0x126>
 800ae38:	f896 3a25 	ldrb.w	r3, [r6, #2597]	; 0xa25
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	f47f af72 	bne.w	800ad26 <ArtNetNode::HandleAddress()+0x126>
 800ae42:	6860      	ldr	r0, [r4, #4]
 800ae44:	4629      	mov	r1, r5
 800ae46:	6803      	ldr	r3, [r0, #0]
 800ae48:	689b      	ldr	r3, [r3, #8]
 800ae4a:	4798      	blx	r3
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	f886 3a25 	strb.w	r3, [r6, #2597]	; 0xa25
 800ae52:	f896 3a03 	ldrb.w	r3, [r6, #2563]	; 0xa03
 800ae56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ae5a:	f886 3a03 	strb.w	r3, [r6, #2563]	; 0xa03
 800ae5e:	e762      	b.n	800ad26 <ArtNetNode::HandleAddress()+0x126>
 800ae60:	f801 7b01 	strb.w	r7, [r1], #1
 800ae64:	e7cf      	b.n	800ae06 <ArtNetNode::HandleAddress()+0x206>
 800ae66:	bf00      	nop
 800ae68:	20009d54 	andcs	r9, r0, r4, asr sp
 800ae6c:	200000b0 	strhcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800ae70:	200000b4 	strhcs	r0, [r0], -r4

0800ae74 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>:
 800ae74:	f240 6304 	movw	r3, #1540	; 0x604
 800ae78:	fb03 0001 	mla	r0, r3, r1, r0
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	b510      	push	{r4, lr}
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d100      	bne.n	800ae86 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0x12>
 800ae84:	bd10      	pop	{r4, pc}
 800ae86:	f810 4b01 	ldrb.w	r4, [r0], #1
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	f890 11ff 	ldrb.w	r1, [r0, #511]	; 0x1ff
 800ae90:	42a1      	cmp	r1, r4
 800ae92:	bf38      	it	cc
 800ae94:	4621      	movcc	r1, r4
 800ae96:	f880 13ff 	strb.w	r1, [r0, #1023]	; 0x3ff
 800ae9a:	e7f1      	b.n	800ae80 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0xc>

0800ae9c <memcpy.isra.0>:
 800ae9c:	3801      	subs	r0, #1
 800ae9e:	440a      	add	r2, r1
 800aea0:	4291      	cmp	r1, r2
 800aea2:	d100      	bne.n	800aea6 <memcpy.isra.0+0xa>
 800aea4:	4770      	bx	lr
 800aea6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aeaa:	f800 3f01 	strb.w	r3, [r0, #1]!
 800aeae:	e7f7      	b.n	800aea0 <memcpy.isra.0+0x4>

0800aeb0 <lightset::Data::Get()>:
 800aeb0:	4b03      	ldr	r3, [pc, #12]	; (800aec0 <lightset::Data::Get()+0x10>)
 800aeb2:	4804      	ldr	r0, [pc, #16]	; (800aec4 <lightset::Data::Get()+0x14>)
 800aeb4:	681a      	ldr	r2, [r3, #0]
 800aeb6:	07d2      	lsls	r2, r2, #31
 800aeb8:	bf5c      	itt	pl
 800aeba:	2201      	movpl	r2, #1
 800aebc:	601a      	strpl	r2, [r3, #0]
 800aebe:	4770      	bx	lr
 800aec0:	200000b0 	strhcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800aec4:	200000b4 	strhcs	r0, [r0], -r4

0800aec8 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>:
 800aec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aecc:	4615      	mov	r5, r2
 800aece:	460f      	mov	r7, r1
 800aed0:	4604      	mov	r4, r0
 800aed2:	f7ff ffed 	bl	800aeb0 <lightset::Data::Get()>
 800aed6:	f240 6304 	movw	r3, #1540	; 0x604
 800aeda:	4606      	mov	r6, r0
 800aedc:	435c      	muls	r4, r3
 800aede:	eb00 0804 	add.w	r8, r0, r4
 800aee2:	462a      	mov	r2, r5
 800aee4:	4639      	mov	r1, r7
 800aee6:	4640      	mov	r0, r8
 800aee8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800aeec:	f7ff ffd6 	bl	800ae9c <memcpy.isra.0>
 800aef0:	462a      	mov	r2, r5
 800aef2:	4639      	mov	r1, r7
 800aef4:	f8c8 5600 	str.w	r5, [r8, #1536]	; 0x600
 800aef8:	1930      	adds	r0, r6, r4
 800aefa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aefe:	f7ff bfcd 	b.w	800ae9c <memcpy.isra.0>

0800af02 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 800af02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af06:	4680      	mov	r8, r0
 800af08:	f240 6404 	movw	r4, #1540	; 0x604
 800af0c:	4615      	mov	r5, r2
 800af0e:	460f      	mov	r7, r1
 800af10:	4699      	mov	r9, r3
 800af12:	f7ff ffcd 	bl	800aeb0 <lightset::Data::Get()>
 800af16:	fb04 f408 	mul.w	r4, r4, r8
 800af1a:	eb00 0a04 	add.w	sl, r0, r4
 800af1e:	4606      	mov	r6, r0
 800af20:	462a      	mov	r2, r5
 800af22:	4639      	mov	r1, r7
 800af24:	4650      	mov	r0, sl
 800af26:	f7ff ffb9 	bl	800ae9c <memcpy.isra.0>
 800af2a:	f8ca 5600 	str.w	r5, [sl, #1536]	; 0x600
 800af2e:	f1b9 0f00 	cmp.w	r9, #0
 800af32:	d106      	bne.n	800af42 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x40>
 800af34:	462a      	mov	r2, r5
 800af36:	4641      	mov	r1, r8
 800af38:	4630      	mov	r0, r6
 800af3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af3e:	f7ff bf99 	b.w	800ae74 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 800af42:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800af46:	462a      	mov	r2, r5
 800af48:	4639      	mov	r1, r7
 800af4a:	1930      	adds	r0, r6, r4
 800af4c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af50:	f7ff bfa4 	b.w	800ae9c <memcpy.isra.0>

0800af54 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 800af54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af58:	4616      	mov	r6, r2
 800af5a:	4699      	mov	r9, r3
 800af5c:	4680      	mov	r8, r0
 800af5e:	460f      	mov	r7, r1
 800af60:	f7ff ffa6 	bl	800aeb0 <lightset::Data::Get()>
 800af64:	f240 6404 	movw	r4, #1540	; 0x604
 800af68:	4605      	mov	r5, r0
 800af6a:	fb04 f408 	mul.w	r4, r4, r8
 800af6e:	f504 7000 	add.w	r0, r4, #512	; 0x200
 800af72:	4632      	mov	r2, r6
 800af74:	4639      	mov	r1, r7
 800af76:	4428      	add	r0, r5
 800af78:	f7ff ff90 	bl	800ae9c <memcpy.isra.0>
 800af7c:	192b      	adds	r3, r5, r4
 800af7e:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
 800af82:	f1b9 0f00 	cmp.w	r9, #0
 800af86:	d106      	bne.n	800af96 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x42>
 800af88:	4632      	mov	r2, r6
 800af8a:	4641      	mov	r1, r8
 800af8c:	4628      	mov	r0, r5
 800af8e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af92:	f7ff bf6f 	b.w	800ae74 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 800af96:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800af9a:	4632      	mov	r2, r6
 800af9c:	4639      	mov	r1, r7
 800af9e:	1928      	adds	r0, r5, r4
 800afa0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afa4:	f7ff bf7a 	b.w	800ae9c <memcpy.isra.0>

0800afa8 <ArtNetNode::UpdateMergeStatus(unsigned int)>:
 800afa8:	f890 39f6 	ldrb.w	r3, [r0, #2550]	; 0x9f6
 800afac:	b91b      	cbnz	r3, 800afb6 <ArtNetNode::UpdateMergeStatus(unsigned int)+0xe>
 800afae:	f240 1301 	movw	r3, #257	; 0x101
 800afb2:	f8a0 39f6 	strh.w	r3, [r0, #2550]	; 0x9f6
 800afb6:	2328      	movs	r3, #40	; 0x28
 800afb8:	fb03 0001 	mla	r0, r3, r1, r0
 800afbc:	f890 3a03 	ldrb.w	r3, [r0, #2563]	; 0xa03
 800afc0:	f043 0308 	orr.w	r3, r3, #8
 800afc4:	f880 3a03 	strb.w	r3, [r0, #2563]	; 0xa03
 800afc8:	4770      	bx	lr

0800afca <ArtNetNode::CheckMergeTimeouts(unsigned int)>:
 800afca:	2328      	movs	r3, #40	; 0x28
 800afcc:	b530      	push	{r4, r5, lr}
 800afce:	f242 7510 	movw	r5, #10000	; 0x2710
 800afd2:	fb03 0301 	mla	r3, r3, r1, r0
 800afd6:	f8d0 2984 	ldr.w	r2, [r0, #2436]	; 0x984
 800afda:	f8d3 4a08 	ldr.w	r4, [r3, #2568]	; 0xa08
 800afde:	1b14      	subs	r4, r2, r4
 800afe0:	42ac      	cmp	r4, r5
 800afe2:	d908      	bls.n	800aff6 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x2c>
 800afe4:	2400      	movs	r4, #0
 800afe6:	f8c3 4a0c 	str.w	r4, [r3, #2572]	; 0xa0c
 800afea:	f893 4a03 	ldrb.w	r4, [r3, #2563]	; 0xa03
 800afee:	f024 0408 	bic.w	r4, r4, #8
 800aff2:	f883 4a03 	strb.w	r4, [r3, #2563]	; 0xa03
 800aff6:	2328      	movs	r3, #40	; 0x28
 800aff8:	fb03 0101 	mla	r1, r3, r1, r0
 800affc:	f8d1 3a10 	ldr.w	r3, [r1, #2576]	; 0xa10
 800b000:	1ad2      	subs	r2, r2, r3
 800b002:	f242 7310 	movw	r3, #10000	; 0x2710
 800b006:	429a      	cmp	r2, r3
 800b008:	d908      	bls.n	800b01c <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x52>
 800b00a:	2300      	movs	r3, #0
 800b00c:	f8c1 3a14 	str.w	r3, [r1, #2580]	; 0xa14
 800b010:	f891 3a03 	ldrb.w	r3, [r1, #2563]	; 0xa03
 800b014:	f023 0308 	bic.w	r3, r3, #8
 800b018:	f881 3a03 	strb.w	r3, [r1, #2563]	; 0xa03
 800b01c:	4603      	mov	r3, r0
 800b01e:	2200      	movs	r2, #0
 800b020:	f100 04a0 	add.w	r4, r0, #160	; 0xa0
 800b024:	f893 1a03 	ldrb.w	r1, [r3, #2563]	; 0xa03
 800b028:	3328      	adds	r3, #40	; 0x28
 800b02a:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 800b02e:	429c      	cmp	r4, r3
 800b030:	ea42 0201 	orr.w	r2, r2, r1
 800b034:	d1f6      	bne.n	800b024 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x5a>
 800b036:	b91a      	cbnz	r2, 800b040 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x76>
 800b038:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b03c:	f8a0 39f6 	strh.w	r3, [r0, #2550]	; 0x9f6
 800b040:	bd30      	pop	{r4, r5, pc}

0800b042 <ArtNetNode::HandleDmx()>:
 800b042:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b046:	f8b0 70a8 	ldrh.w	r7, [r0, #168]	; 0xa8
 800b04a:	4604      	mov	r4, r0
 800b04c:	ba7f      	rev16	r7, r7
 800b04e:	b2bf      	uxth	r7, r7
 800b050:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 800b054:	bf28      	it	cs
 800b056:	f44f 7700 	movcs.w	r7, #512	; 0x200
 800b05a:	4605      	mov	r5, r0
 800b05c:	2600      	movs	r6, #0
 800b05e:	f04f 0901 	mov.w	r9, #1
 800b062:	f100 08aa 	add.w	r8, r0, #170	; 0xaa
 800b066:	f895 3a04 	ldrb.w	r3, [r5, #2564]	; 0xa04
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d056      	beq.n	800b11c <ArtNetNode::HandleDmx()+0xda>
 800b06e:	f8d5 3a20 	ldr.w	r3, [r5, #2592]	; 0xa20
 800b072:	2b00      	cmp	r3, #0
 800b074:	d152      	bne.n	800b11c <ArtNetNode::HandleDmx()+0xda>
 800b076:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 800b07a:	f8b5 3a00 	ldrh.w	r3, [r5, #2560]	; 0xa00
 800b07e:	429a      	cmp	r2, r3
 800b080:	d14c      	bne.n	800b11c <ArtNetNode::HandleDmx()+0xda>
 800b082:	f895 3a03 	ldrb.w	r3, [r5, #2563]	; 0xa03
 800b086:	f8d5 ba0c 	ldr.w	fp, [r5, #2572]	; 0xa0c
 800b08a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b08e:	f885 3a03 	strb.w	r3, [r5, #2563]	; 0xa03
 800b092:	f894 39f6 	ldrb.w	r3, [r4, #2550]	; 0x9f6
 800b096:	f8d5 aa14 	ldr.w	sl, [r5, #2580]	; 0xa14
 800b09a:	b133      	cbz	r3, 800b0aa <ArtNetNode::HandleDmx()+0x68>
 800b09c:	f894 39f8 	ldrb.w	r3, [r4, #2552]	; 0x9f8
 800b0a0:	b91b      	cbnz	r3, 800b0aa <ArtNetNode::HandleDmx()+0x68>
 800b0a2:	4631      	mov	r1, r6
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	f7ff ff90 	bl	800afca <ArtNetNode::CheckMergeTimeouts(unsigned int)>
 800b0aa:	ea5b 020a 	orrs.w	r2, fp, sl
 800b0ae:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
 800b0b2:	d139      	bne.n	800b128 <ArtNetNode::HandleDmx()+0xe6>
 800b0b4:	f8c5 3a0c 	str.w	r3, [r5, #2572]	; 0xa0c
 800b0b8:	f8d4 3984 	ldr.w	r3, [r4, #2436]	; 0x984
 800b0bc:	463a      	mov	r2, r7
 800b0be:	4641      	mov	r1, r8
 800b0c0:	4630      	mov	r0, r6
 800b0c2:	f8c5 3a08 	str.w	r3, [r5, #2568]	; 0xa08
 800b0c6:	f7ff feff 	bl	800aec8 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 800b0ca:	f894 39f5 	ldrb.w	r3, [r4, #2549]	; 0x9f5
 800b0ce:	b9fb      	cbnz	r3, 800b110 <ArtNetNode::HandleDmx()+0xce>
 800b0d0:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800b0d4:	f7ff feec 	bl	800aeb0 <lightset::Data::Get()>
 800b0d8:	f240 6304 	movw	r3, #1540	; 0x604
 800b0dc:	4373      	muls	r3, r6
 800b0de:	18c2      	adds	r2, r0, r3
 800b0e0:	f503 6180 	add.w	r1, r3, #1024	; 0x400
 800b0e4:	f8da 3000 	ldr.w	r3, [sl]
 800b0e8:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800b0ec:	f8d2 3600 	ldr.w	r3, [r2, #1536]	; 0x600
 800b0f0:	1842      	adds	r2, r0, r1
 800b0f2:	4631      	mov	r1, r6
 800b0f4:	4650      	mov	r0, sl
 800b0f6:	47d8      	blx	fp
 800b0f8:	f895 3a25 	ldrb.w	r3, [r5, #2597]	; 0xa25
 800b0fc:	b943      	cbnz	r3, 800b110 <ArtNetNode::HandleDmx()+0xce>
 800b0fe:	6860      	ldr	r0, [r4, #4]
 800b100:	4631      	mov	r1, r6
 800b102:	6803      	ldr	r3, [r0, #0]
 800b104:	689b      	ldr	r3, [r3, #8]
 800b106:	4798      	blx	r3
 800b108:	f884 99f7 	strb.w	r9, [r4, #2551]	; 0x9f7
 800b10c:	f885 9a25 	strb.w	r9, [r5, #2597]	; 0xa25
 800b110:	f894 39f9 	ldrb.w	r3, [r4, #2553]	; 0x9f9
 800b114:	f043 0302 	orr.w	r3, r3, #2
 800b118:	f884 39f9 	strb.w	r3, [r4, #2553]	; 0x9f9
 800b11c:	3601      	adds	r6, #1
 800b11e:	2e04      	cmp	r6, #4
 800b120:	f105 0528 	add.w	r5, r5, #40	; 0x28
 800b124:	d19f      	bne.n	800b066 <ArtNetNode::HandleDmx()+0x24>
 800b126:	e040      	b.n	800b1aa <ArtNetNode::HandleDmx()+0x168>
 800b128:	459b      	cmp	fp, r3
 800b12a:	d104      	bne.n	800b136 <ArtNetNode::HandleDmx()+0xf4>
 800b12c:	f1ba 0f00 	cmp.w	sl, #0
 800b130:	d0c2      	beq.n	800b0b8 <ArtNetNode::HandleDmx()+0x76>
 800b132:	b11b      	cbz	r3, 800b13c <ArtNetNode::HandleDmx()+0xfa>
 800b134:	e037      	b.n	800b1a6 <ArtNetNode::HandleDmx()+0x164>
 800b136:	f1bb 0f00 	cmp.w	fp, #0
 800b13a:	d132      	bne.n	800b1a2 <ArtNetNode::HandleDmx()+0x160>
 800b13c:	459a      	cmp	sl, r3
 800b13e:	d11d      	bne.n	800b17c <ArtNetNode::HandleDmx()+0x13a>
 800b140:	f8d4 3984 	ldr.w	r3, [r4, #2436]	; 0x984
 800b144:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
 800b148:	f7ff feb2 	bl	800aeb0 <lightset::Data::Get()>
 800b14c:	f240 6304 	movw	r3, #1540	; 0x604
 800b150:	4683      	mov	fp, r0
 800b152:	fb03 fa06 	mul.w	sl, r3, r6
 800b156:	f50a 7000 	add.w	r0, sl, #512	; 0x200
 800b15a:	463a      	mov	r2, r7
 800b15c:	4641      	mov	r1, r8
 800b15e:	4458      	add	r0, fp
 800b160:	f7ff fe9c 	bl	800ae9c <memcpy.isra.0>
 800b164:	eb0b 030a 	add.w	r3, fp, sl
 800b168:	f50a 6080 	add.w	r0, sl, #1024	; 0x400
 800b16c:	463a      	mov	r2, r7
 800b16e:	4641      	mov	r1, r8
 800b170:	f8c3 7600 	str.w	r7, [r3, #1536]	; 0x600
 800b174:	4458      	add	r0, fp
 800b176:	f7ff fe91 	bl	800ae9c <memcpy.isra.0>
 800b17a:	e7a6      	b.n	800b0ca <ArtNetNode::HandleDmx()+0x88>
 800b17c:	b9bb      	cbnz	r3, 800b1ae <ArtNetNode::HandleDmx()+0x16c>
 800b17e:	f8c5 3a0c 	str.w	r3, [r5, #2572]	; 0xa0c
 800b182:	f8d4 3984 	ldr.w	r3, [r4, #2436]	; 0x984
 800b186:	4631      	mov	r1, r6
 800b188:	4620      	mov	r0, r4
 800b18a:	f8c5 3a08 	str.w	r3, [r5, #2568]	; 0xa08
 800b18e:	f7ff ff0b 	bl	800afa8 <ArtNetNode::UpdateMergeStatus(unsigned int)>
 800b192:	463a      	mov	r2, r7
 800b194:	4641      	mov	r1, r8
 800b196:	4630      	mov	r0, r6
 800b198:	f8d5 3a18 	ldr.w	r3, [r5, #2584]	; 0xa18
 800b19c:	f7ff feb1 	bl	800af02 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800b1a0:	e793      	b.n	800b0ca <ArtNetNode::HandleDmx()+0x88>
 800b1a2:	459b      	cmp	fp, r3
 800b1a4:	d118      	bne.n	800b1d8 <ArtNetNode::HandleDmx()+0x196>
 800b1a6:	459a      	cmp	sl, r3
 800b1a8:	d1eb      	bne.n	800b182 <ArtNetNode::HandleDmx()+0x140>
 800b1aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ae:	f1ba 0f00 	cmp.w	sl, #0
 800b1b2:	d1e4      	bne.n	800b17e <ArtNetNode::HandleDmx()+0x13c>
 800b1b4:	f8c5 3a14 	str.w	r3, [r5, #2580]	; 0xa14
 800b1b8:	f8d4 3984 	ldr.w	r3, [r4, #2436]	; 0x984
 800b1bc:	4631      	mov	r1, r6
 800b1be:	4620      	mov	r0, r4
 800b1c0:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
 800b1c4:	f7ff fef0 	bl	800afa8 <ArtNetNode::UpdateMergeStatus(unsigned int)>
 800b1c8:	463a      	mov	r2, r7
 800b1ca:	4641      	mov	r1, r8
 800b1cc:	4630      	mov	r0, r6
 800b1ce:	f8d5 3a18 	ldr.w	r3, [r5, #2584]	; 0xa18
 800b1d2:	f7ff febf 	bl	800af54 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800b1d6:	e778      	b.n	800b0ca <ArtNetNode::HandleDmx()+0x88>
 800b1d8:	f1ba 0f00 	cmp.w	sl, #0
 800b1dc:	d0ea      	beq.n	800b1b4 <ArtNetNode::HandleDmx()+0x172>
 800b1de:	459a      	cmp	sl, r3
 800b1e0:	d0ea      	beq.n	800b1b8 <ArtNetNode::HandleDmx()+0x176>
 800b1e2:	e7e2      	b.n	800b1aa <ArtNetNode::HandleDmx()+0x168>

0800b1e4 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>:
 800b1e4:	2903      	cmp	r1, #3
 800b1e6:	b510      	push	{r4, lr}
 800b1e8:	d80f      	bhi.n	800b20a <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x26>
 800b1ea:	4b08      	ldr	r3, [pc, #32]	; (800b20c <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x28>)
 800b1ec:	0109      	lsls	r1, r1, #4
 800b1ee:	681c      	ldr	r4, [r3, #0]
 800b1f0:	6963      	ldr	r3, [r4, #20]
 800b1f2:	69e4      	ldr	r4, [r4, #28]
 800b1f4:	4053      	eors	r3, r2
 800b1f6:	4223      	tst	r3, r4
 800b1f8:	bf15      	itete	ne
 800b1fa:	6a43      	ldrne	r3, [r0, #36]	; 0x24
 800b1fc:	1840      	addeq	r0, r0, r1
 800b1fe:	1809      	addne	r1, r1, r0
 800b200:	f8c0 2aa8 	streq.w	r2, [r0, #2728]	; 0xaa8
 800b204:	bf18      	it	ne
 800b206:	f8c1 3aa8 	strne.w	r3, [r1, #2728]	; 0xaa8
 800b20a:	bd10      	pop	{r4, pc}
 800b20c:	2000863c 	andcs	r8, r0, ip, lsr r6

0800b210 <ArtNetNode::HandleDmxIn()>:
 800b210:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800b214:	4604      	mov	r4, r0
 800b216:	4605      	mov	r5, r0
 800b218:	2600      	movs	r6, #0
 800b21a:	4f3a      	ldr	r7, [pc, #232]	; (800b304 <ArtNetNode::HandleDmxIn()+0xf4>)
 800b21c:	f895 3aa4 	ldrb.w	r3, [r5, #2724]	; 0xaa4
 800b220:	b93b      	cbnz	r3, 800b232 <ArtNetNode::HandleDmxIn()+0x22>
 800b222:	3601      	adds	r6, #1
 800b224:	2e04      	cmp	r6, #4
 800b226:	f105 0510 	add.w	r5, r5, #16
 800b22a:	d1f7      	bne.n	800b21c <ArtNetNode::HandleDmxIn()+0xc>
 800b22c:	b004      	add	sp, #16
 800b22e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b232:	6920      	ldr	r0, [r4, #16]
 800b234:	4631      	mov	r1, r6
 800b236:	6803      	ldr	r3, [r0, #0]
 800b238:	aa02      	add	r2, sp, #8
 800b23a:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800b23e:	ab03      	add	r3, sp, #12
 800b240:	47c0      	blx	r8
 800b242:	2800      	cmp	r0, #0
 800b244:	d044      	beq.n	800b2d0 <ArtNetNode::HandleDmxIn()+0xc0>
 800b246:	f895 3aac 	ldrb.w	r3, [r5, #2732]	; 0xaac
 800b24a:	f204 626c 	addw	r2, r4, #1644	; 0x66c
 800b24e:	3301      	adds	r3, #1
 800b250:	b2db      	uxtb	r3, r3
 800b252:	f885 3aac 	strb.w	r3, [r5, #2732]	; 0xaac
 800b256:	f884 3667 	strb.w	r3, [r4, #1639]	; 0x667
 800b25a:	f884 6668 	strb.w	r6, [r4, #1640]	; 0x668
 800b25e:	f8b5 3aa0 	ldrh.w	r3, [r5, #2720]	; 0xaa0
 800b262:	f8a4 3669 	strh.w	r3, [r4, #1641]	; 0x669
 800b266:	9b02      	ldr	r3, [sp, #8]
 800b268:	18c1      	adds	r1, r0, r3
 800b26a:	4281      	cmp	r1, r0
 800b26c:	d12b      	bne.n	800b2c6 <ArtNetNode::HandleDmxIn()+0xb6>
 800b26e:	07da      	lsls	r2, r3, #31
 800b270:	d505      	bpl.n	800b27e <ArtNetNode::HandleDmxIn()+0x6e>
 800b272:	2100      	movs	r1, #0
 800b274:	18e2      	adds	r2, r4, r3
 800b276:	3301      	adds	r3, #1
 800b278:	f882 166d 	strb.w	r1, [r2, #1645]	; 0x66d
 800b27c:	9302      	str	r3, [sp, #8]
 800b27e:	9b02      	ldr	r3, [sp, #8]
 800b280:	f204 615b 	addw	r1, r4, #1627	; 0x65b
 800b284:	f884 366c 	strb.w	r3, [r4, #1644]	; 0x66c
 800b288:	0a1a      	lsrs	r2, r3, #8
 800b28a:	2380      	movs	r3, #128	; 0x80
 800b28c:	f884 266b 	strb.w	r2, [r4, #1643]	; 0x66b
 800b290:	f885 3aa3 	strb.w	r3, [r5, #2723]	; 0xaa3
 800b294:	f641 1336 	movw	r3, #6454	; 0x1936
 800b298:	9300      	str	r3, [sp, #0]
 800b29a:	f240 2212 	movw	r2, #530	; 0x212
 800b29e:	f8d5 3aa8 	ldr.w	r3, [r5, #2728]	; 0xaa8
 800b2a2:	7820      	ldrb	r0, [r4, #0]
 800b2a4:	f004 ff40 	bl	8010128 <udp_send>
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	683a      	ldr	r2, [r7, #0]
 800b2ac:	40b3      	lsls	r3, r6
 800b2ae:	ea33 0102 	bics.w	r1, r3, r2
 800b2b2:	d0b6      	beq.n	800b222 <ArtNetNode::HandleDmxIn()+0x12>
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	603b      	str	r3, [r7, #0]
 800b2b8:	f894 39f9 	ldrb.w	r3, [r4, #2553]	; 0x9f9
 800b2bc:	f043 0301 	orr.w	r3, r3, #1
 800b2c0:	f884 39f9 	strb.w	r3, [r4, #2553]	; 0x9f9
 800b2c4:	e7ad      	b.n	800b222 <ArtNetNode::HandleDmxIn()+0x12>
 800b2c6:	f810 cb01 	ldrb.w	ip, [r0], #1
 800b2ca:	f802 cf01 	strb.w	ip, [r2, #1]!
 800b2ce:	e7cc      	b.n	800b26a <ArtNetNode::HandleDmxIn()+0x5a>
 800b2d0:	f995 2aa3 	ldrsb.w	r2, [r5, #2723]	; 0xaa3
 800b2d4:	f895 3aa3 	ldrb.w	r3, [r5, #2723]	; 0xaa3
 800b2d8:	2a00      	cmp	r2, #0
 800b2da:	daa2      	bge.n	800b222 <ArtNetNode::HandleDmxIn()+0x12>
 800b2dc:	9a03      	ldr	r2, [sp, #12]
 800b2de:	2a00      	cmp	r2, #0
 800b2e0:	d19f      	bne.n	800b222 <ArtNetNode::HandleDmxIn()+0x12>
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2e8:	f885 3aa3 	strb.w	r3, [r5, #2723]	; 0xaa3
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	40b2      	lsls	r2, r6
 800b2f0:	ea23 0302 	bic.w	r3, r3, r2
 800b2f4:	603b      	str	r3, [r7, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d193      	bne.n	800b222 <ArtNetNode::HandleDmxIn()+0x12>
 800b2fa:	f894 39f9 	ldrb.w	r3, [r4, #2553]	; 0x9f9
 800b2fe:	f023 0301 	bic.w	r3, r3, #1
 800b302:	e7dd      	b.n	800b2c0 <ArtNetNode::HandleDmxIn()+0xb0>
 800b304:	200018c8 	andcs	r1, r0, r8, asr #17

0800b308 <memcmp.constprop.0>:
 800b308:	b510      	push	{r4, lr}
 800b30a:	4907      	ldr	r1, [pc, #28]	; (800b328 <memcmp.constprop.0+0x20>)
 800b30c:	1e42      	subs	r2, r0, #1
 800b30e:	3003      	adds	r0, #3
 800b310:	4282      	cmp	r2, r0
 800b312:	d101      	bne.n	800b318 <memcmp.constprop.0+0x10>
 800b314:	2000      	movs	r0, #0
 800b316:	e006      	b.n	800b326 <memcmp.constprop.0+0x1e>
 800b318:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800b31c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b320:	42a3      	cmp	r3, r4
 800b322:	d0f5      	beq.n	800b310 <memcmp.constprop.0+0x8>
 800b324:	1b18      	subs	r0, r3, r4
 800b326:	bd10      	pop	{r4, pc}
 800b328:	200018cc 	andcs	r1, r0, ip, asr #17

0800b32c <memcpy.constprop.0.isra.0>:
 800b32c:	3801      	subs	r0, #1
 800b32e:	1d0b      	adds	r3, r1, #4
 800b330:	4299      	cmp	r1, r3
 800b332:	d100      	bne.n	800b336 <memcpy.constprop.0.isra.0+0xa>
 800b334:	4770      	bx	lr
 800b336:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b33a:	f800 2f01 	strb.w	r2, [r0, #1]!
 800b33e:	e7f7      	b.n	800b330 <memcpy.constprop.0.isra.0+0x4>

0800b340 <ArtNetNode::HandleIpProg()>:
 800b340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b344:	f100 0398 	add.w	r3, r0, #152	; 0x98
 800b348:	b085      	sub	sp, #20
 800b34a:	4604      	mov	r4, r0
 800b34c:	9303      	str	r3, [sp, #12]
 800b34e:	2300      	movs	r3, #0
 800b350:	4d57      	ldr	r5, [pc, #348]	; (800b4b0 <ArtNetNode::HandleIpProg()+0x170>)
 800b352:	f890 70a6 	ldrb.w	r7, [r0, #166]	; 0xa6
 800b356:	6828      	ldr	r0, [r5, #0]
 800b358:	f890 b005 	ldrb.w	fp, [r0, #5]
 800b35c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 800b360:	f06f 0306 	mvn.w	r3, #6
 800b364:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 800b368:	f007 03c0 	and.w	r3, r7, #192	; 0xc0
 800b36c:	2bc0      	cmp	r3, #192	; 0xc0
 800b36e:	d101      	bne.n	800b374 <ArtNetNode::HandleIpProg()+0x34>
 800b370:	f005 fd52 	bl	8010e18 <Network::EnableDhcp()>
 800b374:	f007 0388 	and.w	r3, r7, #136	; 0x88
 800b378:	2b88      	cmp	r3, #136	; 0x88
 800b37a:	d103      	bne.n	800b384 <ArtNetNode::HandleIpProg()+0x44>
 800b37c:	2100      	movs	r1, #0
 800b37e:	6828      	ldr	r0, [r5, #0]
 800b380:	f005 fcf8 	bl	8010d74 <Network::SetIp(unsigned int)>
 800b384:	f007 0384 	and.w	r3, r7, #132	; 0x84
 800b388:	2b84      	cmp	r3, #132	; 0x84
 800b38a:	4e4a      	ldr	r6, [pc, #296]	; (800b4b4 <ArtNetNode::HandleIpProg()+0x174>)
 800b38c:	f104 08a8 	add.w	r8, r4, #168	; 0xa8
 800b390:	d107      	bne.n	800b3a2 <ArtNetNode::HandleIpProg()+0x62>
 800b392:	4641      	mov	r1, r8
 800b394:	4630      	mov	r0, r6
 800b396:	f7ff ffc9 	bl	800b32c <memcpy.constprop.0.isra.0>
 800b39a:	6831      	ldr	r1, [r6, #0]
 800b39c:	6828      	ldr	r0, [r5, #0]
 800b39e:	f005 fce9 	bl	8010d74 <Network::SetIp(unsigned int)>
 800b3a2:	f007 0382 	and.w	r3, r7, #130	; 0x82
 800b3a6:	2b82      	cmp	r3, #130	; 0x82
 800b3a8:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 800b3ac:	d107      	bne.n	800b3be <ArtNetNode::HandleIpProg()+0x7e>
 800b3ae:	4649      	mov	r1, r9
 800b3b0:	4840      	ldr	r0, [pc, #256]	; (800b4b4 <ArtNetNode::HandleIpProg()+0x174>)
 800b3b2:	f7ff ffbb 	bl	800b32c <memcpy.constprop.0.isra.0>
 800b3b6:	6831      	ldr	r1, [r6, #0]
 800b3b8:	6828      	ldr	r0, [r5, #0]
 800b3ba:	f005 fd06 	bl	8010dca <Network::SetNetmask(unsigned int)>
 800b3be:	f007 0790 	and.w	r7, r7, #144	; 0x90
 800b3c2:	2f90      	cmp	r7, #144	; 0x90
 800b3c4:	f104 0ab2 	add.w	sl, r4, #178	; 0xb2
 800b3c8:	d107      	bne.n	800b3da <ArtNetNode::HandleIpProg()+0x9a>
 800b3ca:	4651      	mov	r1, sl
 800b3cc:	4839      	ldr	r0, [pc, #228]	; (800b4b4 <ArtNetNode::HandleIpProg()+0x174>)
 800b3ce:	f7ff ffad 	bl	800b32c <memcpy.constprop.0.isra.0>
 800b3d2:	6831      	ldr	r1, [r6, #0]
 800b3d4:	6828      	ldr	r0, [r5, #0]
 800b3d6:	f005 fd0a 	bl	8010dee <Network::SetGatewayIp(unsigned int)>
 800b3da:	6829      	ldr	r1, [r5, #0]
 800b3dc:	794a      	ldrb	r2, [r1, #5]
 800b3de:	0192      	lsls	r2, r2, #6
 800b3e0:	f884 20b2 	strb.w	r2, [r4, #178]	; 0xb2
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	f884 20b3 	strb.w	r2, [r4, #179]	; 0xb3
 800b3ea:	7948      	ldrb	r0, [r1, #5]
 800b3ec:	6949      	ldr	r1, [r1, #20]
 800b3ee:	ea8b 0b00 	eor.w	fp, fp, r0
 800b3f2:	4640      	mov	r0, r8
 800b3f4:	6031      	str	r1, [r6, #0]
 800b3f6:	f7ff ff87 	bl	800b308 <memcmp.constprop.0>
 800b3fa:	492e      	ldr	r1, [pc, #184]	; (800b4b4 <ArtNetNode::HandleIpProg()+0x174>)
 800b3fc:	4607      	mov	r7, r0
 800b3fe:	4640      	mov	r0, r8
 800b400:	f7ff ff94 	bl	800b32c <memcpy.constprop.0.isra.0>
 800b404:	6829      	ldr	r1, [r5, #0]
 800b406:	4648      	mov	r0, r9
 800b408:	69c9      	ldr	r1, [r1, #28]
 800b40a:	6031      	str	r1, [r6, #0]
 800b40c:	f7ff ff7c 	bl	800b308 <memcmp.constprop.0>
 800b410:	4928      	ldr	r1, [pc, #160]	; (800b4b4 <ArtNetNode::HandleIpProg()+0x174>)
 800b412:	9003      	str	r0, [sp, #12]
 800b414:	4648      	mov	r0, r9
 800b416:	f7ff ff89 	bl	800b32c <memcpy.constprop.0.isra.0>
 800b41a:	6829      	ldr	r1, [r5, #0]
 800b41c:	4650      	mov	r0, sl
 800b41e:	6989      	ldr	r1, [r1, #24]
 800b420:	6031      	str	r1, [r6, #0]
 800b422:	f7ff ff71 	bl	800b308 <memcmp.constprop.0>
 800b426:	9b03      	ldr	r3, [sp, #12]
 800b428:	4922      	ldr	r1, [pc, #136]	; (800b4b4 <ArtNetNode::HandleIpProg()+0x174>)
 800b42a:	431f      	orrs	r7, r3
 800b42c:	4307      	orrs	r7, r0
 800b42e:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 800b432:	bf0c      	ite	eq
 800b434:	465e      	moveq	r6, fp
 800b436:	f04b 0601 	orrne.w	r6, fp, #1
 800b43a:	f7ff ff77 	bl	800b32c <memcpy.constprop.0.isra.0>
 800b43e:	2200      	movs	r2, #0
 800b440:	f641 1336 	movw	r3, #6454	; 0x1936
 800b444:	f884 20b8 	strb.w	r2, [r4, #184]	; 0xb8
 800b448:	f884 20b9 	strb.w	r2, [r4, #185]	; 0xb9
 800b44c:	9300      	str	r3, [sp, #0]
 800b44e:	2222      	movs	r2, #34	; 0x22
 800b450:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
 800b454:	7820      	ldrb	r0, [r4, #0]
 800b456:	f104 0198 	add.w	r1, r4, #152	; 0x98
 800b45a:	f004 fe65 	bl	8010128 <udp_send>
 800b45e:	b31e      	cbz	r6, 800b4a8 <ArtNetNode::HandleIpProg()+0x168>
 800b460:	682a      	ldr	r2, [r5, #0]
 800b462:	f204 5076 	addw	r0, r4, #1398	; 0x576
 800b466:	6953      	ldr	r3, [r2, #20]
 800b468:	6223      	str	r3, [r4, #32]
 800b46a:	69d1      	ldr	r1, [r2, #28]
 800b46c:	7952      	ldrb	r2, [r2, #5]
 800b46e:	ea63 0301 	orn	r3, r3, r1
 800b472:	6263      	str	r3, [r4, #36]	; 0x24
 800b474:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
 800b478:	4641      	mov	r1, r8
 800b47a:	f023 0302 	bic.w	r3, r3, #2
 800b47e:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800b482:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
 800b486:	f7ff ff51 	bl	800b32c <memcpy.constprop.0.isra.0>
 800b48a:	4641      	mov	r1, r8
 800b48c:	f204 603b 	addw	r0, r4, #1595	; 0x63b
 800b490:	f7ff ff4c 	bl	800b32c <memcpy.constprop.0.isra.0>
 800b494:	f894 39f2 	ldrb.w	r3, [r4, #2546]	; 0x9f2
 800b498:	b133      	cbz	r3, 800b4a8 <ArtNetNode::HandleIpProg()+0x168>
 800b49a:	2101      	movs	r1, #1
 800b49c:	4620      	mov	r0, r4
 800b49e:	b005      	add	sp, #20
 800b4a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4a4:	f000 b8ea 	b.w	800b67c <ArtNetNode::SendPollRelply(bool)>
 800b4a8:	b005      	add	sp, #20
 800b4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ae:	bf00      	nop
 800b4b0:	2000863c 	andcs	r8, r0, ip, lsr r6
 800b4b4:	200018cc 	andcs	r1, r0, ip, asr #17

0800b4b8 <memcpy.isra.0>:
 800b4b8:	3801      	subs	r0, #1
 800b4ba:	440a      	add	r2, r1
 800b4bc:	4291      	cmp	r1, r2
 800b4be:	d100      	bne.n	800b4c2 <memcpy.isra.0+0xa>
 800b4c0:	4770      	bx	lr
 800b4c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4c6:	f800 3f01 	strb.w	r3, [r0, #1]!
 800b4ca:	e7f7      	b.n	800b4bc <memcpy.isra.0+0x4>

0800b4cc <ArtNetNode::FillPollReply()>:
 800b4cc:	b538      	push	{r3, r4, r5, lr}
 800b4ce:	4604      	mov	r4, r0
 800b4d0:	f200 506c 	addw	r0, r0, #1388	; 0x56c
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	2100      	movs	r1, #0
 800b4d8:	f204 625b 	addw	r2, r4, #1627	; 0x65b
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d153      	bne.n	800b588 <ArtNetNode::FillPollReply()+0xbc>
 800b4e0:	2208      	movs	r2, #8
 800b4e2:	492b      	ldr	r1, [pc, #172]	; (800b590 <ArtNetNode::FillPollReply()+0xc4>)
 800b4e4:	f7ff ffe8 	bl	800b4b8 <memcpy.isra.0>
 800b4e8:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 800b4ec:	4d29      	ldr	r5, [pc, #164]	; (800b594 <ArtNetNode::FillPollReply()+0xc8>)
 800b4ee:	f8a4 3574 	strh.w	r3, [r4, #1396]	; 0x574
 800b4f2:	6a23      	ldr	r3, [r4, #32]
 800b4f4:	4629      	mov	r1, r5
 800b4f6:	f204 5076 	addw	r0, r4, #1398	; 0x576
 800b4fa:	2204      	movs	r2, #4
 800b4fc:	602b      	str	r3, [r5, #0]
 800b4fe:	f7ff ffdb 	bl	800b4b8 <memcpy.isra.0>
 800b502:	f641 1336 	movw	r3, #6454	; 0x1936
 800b506:	f8a4 357a 	strh.w	r3, [r4, #1402]	; 0x57a
 800b50a:	4b23      	ldr	r3, [pc, #140]	; (800b598 <ArtNetNode::FillPollReply()+0xcc>)
 800b50c:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800b510:	781a      	ldrb	r2, [r3, #0]
 800b512:	f204 5086 	addw	r0, r4, #1414	; 0x586
 800b516:	f884 257c 	strb.w	r2, [r4, #1404]	; 0x57c
 800b51a:	785b      	ldrb	r3, [r3, #1]
 800b51c:	f884 357d 	strb.w	r3, [r4, #1405]	; 0x57d
 800b520:	4b1e      	ldr	r3, [pc, #120]	; (800b59c <ArtNetNode::FillPollReply()+0xd0>)
 800b522:	781a      	ldrb	r2, [r3, #0]
 800b524:	f884 2580 	strb.w	r2, [r4, #1408]	; 0x580
 800b528:	785b      	ldrb	r3, [r3, #1]
 800b52a:	f884 3581 	strb.w	r3, [r4, #1409]	; 0x581
 800b52e:	4b1c      	ldr	r3, [pc, #112]	; (800b5a0 <ArtNetNode::FillPollReply()+0xd4>)
 800b530:	785a      	ldrb	r2, [r3, #1]
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	f884 2584 	strb.w	r2, [r4, #1412]	; 0x584
 800b538:	f884 3585 	strb.w	r3, [r4, #1413]	; 0x585
 800b53c:	2212      	movs	r2, #18
 800b53e:	f7ff ffbb 	bl	800b4b8 <memcpy.isra.0>
 800b542:	f104 014a 	add.w	r1, r4, #74	; 0x4a
 800b546:	f504 60b3 	add.w	r0, r4, #1432	; 0x598
 800b54a:	2240      	movs	r2, #64	; 0x40
 800b54c:	f7ff ffb4 	bl	800b4b8 <memcpy.isra.0>
 800b550:	2300      	movs	r3, #0
 800b552:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800b556:	f884 3634 	strb.w	r3, [r4, #1588]	; 0x634
 800b55a:	f204 6035 	addw	r0, r4, #1589	; 0x635
 800b55e:	2206      	movs	r2, #6
 800b560:	f7ff ffaa 	bl	800b4b8 <memcpy.isra.0>
 800b564:	4629      	mov	r1, r5
 800b566:	f204 603b 	addw	r0, r4, #1595	; 0x63b
 800b56a:	2204      	movs	r2, #4
 800b56c:	f7ff ffa4 	bl	800b4b8 <memcpy.isra.0>
 800b570:	2304      	movs	r3, #4
 800b572:	f104 018e 	add.w	r1, r4, #142	; 0x8e
 800b576:	f884 3619 	strb.w	r3, [r4, #1561]	; 0x619
 800b57a:	f204 6046 	addw	r0, r4, #1606	; 0x646
 800b57e:	2206      	movs	r2, #6
 800b580:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b584:	f7ff bf98 	b.w	800b4b8 <memcpy.isra.0>
 800b588:	f803 1b01 	strb.w	r1, [r3], #1
 800b58c:	e7a6      	b.n	800b4dc <ArtNetNode::FillPollReply()+0x10>
 800b58e:	bf00      	nop
 800b590:	080168ea 	stmdaeq	r1, {r1, r3, r5, r6, r7, fp, sp, lr}
 800b594:	200018d0 	ldrdcs	r1, [r0], -r0
 800b598:	08016b34 	stmdaeq	r1, {r2, r4, r5, r8, r9, fp, sp, lr}
 800b59c:	08016b30 	stmdaeq	r1, {r4, r5, r8, r9, fp, sp, lr}
 800b5a0:	08016b32 	stmdaeq	r1, {r1, r4, r5, r8, r9, fp, sp, lr}

0800b5a4 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)>:
 800b5a4:	1a8a      	subs	r2, r1, r2
 800b5a6:	2903      	cmp	r1, #3
 800b5a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5ac:	4605      	mov	r5, r0
 800b5ae:	460e      	mov	r6, r1
 800b5b0:	461f      	mov	r7, r3
 800b5b2:	eb00 0402 	add.w	r4, r0, r2
 800b5b6:	d90e      	bls.n	800b5d6 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x32>
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	f884 361a 	strb.w	r3, [r4, #1562]	; 0x61a
 800b5be:	f884 3622 	strb.w	r3, [r4, #1570]	; 0x622
 800b5c2:	f884 3641 	strb.w	r3, [r4, #1601]	; 0x641
 800b5c6:	f884 362a 	strb.w	r3, [r4, #1578]	; 0x62a
 800b5ca:	f884 361e 	strb.w	r3, [r4, #1566]	; 0x61e
 800b5ce:	f884 3626 	strb.w	r3, [r4, #1574]	; 0x626
 800b5d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5d6:	f04f 0928 	mov.w	r9, #40	; 0x28
 800b5da:	fb09 0901 	mla	r9, r9, r1, r0
 800b5de:	f8d9 3a20 	ldr.w	r3, [r9, #2592]	; 0xa20
 800b5e2:	2b01      	cmp	r3, #1
 800b5e4:	d115      	bne.n	800b612 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x6e>
 800b5e6:	6980      	ldr	r0, [r0, #24]
 800b5e8:	f899 8a03 	ldrb.w	r8, [r9, #2563]	; 0xa03
 800b5ec:	6803      	ldr	r3, [r0, #0]
 800b5ee:	f008 0876 	and.w	r8, r8, #118	; 0x76
 800b5f2:	691b      	ldr	r3, [r3, #16]
 800b5f4:	4798      	blx	r3
 800b5f6:	2328      	movs	r3, #40	; 0x28
 800b5f8:	fb03 5306 	mla	r3, r3, r6, r5
 800b5fc:	f000 0089 	and.w	r0, r0, #137	; 0x89
 800b600:	ea40 0808 	orr.w	r8, r0, r8
 800b604:	f010 0001 	ands.w	r0, r0, #1
 800b608:	bf08      	it	eq
 800b60a:	f8c9 0a20 	streq.w	r0, [r9, #2592]	; 0xa20
 800b60e:	f883 8a03 	strb.w	r8, [r3, #2563]	; 0xa03
 800b612:	2300      	movs	r3, #0
 800b614:	f884 361a 	strb.w	r3, [r4, #1562]	; 0x61a
 800b618:	2328      	movs	r3, #40	; 0x28
 800b61a:	fb03 5306 	mla	r3, r3, r6, r5
 800b61e:	f893 3a04 	ldrb.w	r3, [r3, #2564]	; 0xa04
 800b622:	b12b      	cbz	r3, 800b630 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x8c>
 800b624:	2380      	movs	r3, #128	; 0x80
 800b626:	f884 361a 	strb.w	r3, [r4, #1562]	; 0x61a
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	3301      	adds	r3, #1
 800b62e:	603b      	str	r3, [r7, #0]
 800b630:	2328      	movs	r3, #40	; 0x28
 800b632:	fb03 5306 	mla	r3, r3, r6, r5
 800b636:	f893 2a03 	ldrb.w	r2, [r3, #2563]	; 0xa03
 800b63a:	eb05 1506 	add.w	r5, r5, r6, lsl #4
 800b63e:	f884 2622 	strb.w	r2, [r4, #1570]	; 0x622
 800b642:	f893 2a1c 	ldrb.w	r2, [r3, #2588]	; 0xa1c
 800b646:	2a00      	cmp	r2, #0
 800b648:	bf14      	ite	ne
 800b64a:	2240      	movne	r2, #64	; 0x40
 800b64c:	22c0      	moveq	r2, #192	; 0xc0
 800b64e:	f884 2641 	strb.w	r2, [r4, #1601]	; 0x641
 800b652:	f893 3a02 	ldrb.w	r3, [r3, #2562]	; 0xa02
 800b656:	f884 362a 	strb.w	r3, [r4, #1578]	; 0x62a
 800b65a:	f895 3aa4 	ldrb.w	r3, [r5, #2724]	; 0xaa4
 800b65e:	b12b      	cbz	r3, 800b66c <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0xc8>
 800b660:	2340      	movs	r3, #64	; 0x40
 800b662:	f884 361a 	strb.w	r3, [r4, #1562]	; 0x61a
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	3301      	adds	r3, #1
 800b66a:	603b      	str	r3, [r7, #0]
 800b66c:	f895 3aa3 	ldrb.w	r3, [r5, #2723]	; 0xaa3
 800b670:	f884 361e 	strb.w	r3, [r4, #1566]	; 0x61e
 800b674:	f895 3aa2 	ldrb.w	r3, [r5, #2722]	; 0xaa2
 800b678:	e7a9      	b.n	800b5ce <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x2a>
	...

0800b67c <ArtNetNode::SendPollRelply(bool)>:
 800b67c:	b530      	push	{r4, r5, lr}
 800b67e:	4604      	mov	r4, r0
 800b680:	b085      	sub	sp, #20
 800b682:	b941      	cbnz	r1, 800b696 <ArtNetNode::SendPollRelply(bool)+0x1a>
 800b684:	f890 39f1 	ldrb.w	r3, [r0, #2545]	; 0x9f1
 800b688:	2b02      	cmp	r3, #2
 800b68a:	bf02      	ittt	eq
 800b68c:	f8d0 39e0 	ldreq.w	r3, [r0, #2528]	; 0x9e0
 800b690:	3301      	addeq	r3, #1
 800b692:	f8c0 39e0 	streq.w	r3, [r0, #2528]	; 0x9e0
 800b696:	f894 308b 	ldrb.w	r3, [r4, #139]	; 0x8b
 800b69a:	2500      	movs	r5, #0
 800b69c:	f884 3583 	strb.w	r3, [r4, #1411]	; 0x583
 800b6a0:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
 800b6a4:	9503      	str	r5, [sp, #12]
 800b6a6:	f884 3640 	strb.w	r3, [r4, #1600]	; 0x640
 800b6aa:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
 800b6ae:	f884 3645 	strb.w	r3, [r4, #1605]	; 0x645
 800b6b2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800b6b4:	f8a4 357e 	strh.w	r3, [r4, #1406]	; 0x57e
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	f884 363f 	strb.w	r3, [r4, #1599]	; 0x63f
 800b6be:	4629      	mov	r1, r5
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	ab03      	add	r3, sp, #12
 800b6c6:	3501      	adds	r5, #1
 800b6c8:	f7ff ff6c 	bl	800b5a4 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)>
 800b6cc:	2d04      	cmp	r5, #4
 800b6ce:	d1f6      	bne.n	800b6be <ArtNetNode::SendPollRelply(bool)+0x42>
 800b6d0:	9b03      	ldr	r3, [sp, #12]
 800b6d2:	2140      	movs	r1, #64	; 0x40
 800b6d4:	f884 3619 	strb.w	r3, [r4, #1561]	; 0x619
 800b6d8:	f604 138d 	addw	r3, r4, #2445	; 0x98d
 800b6dc:	9301      	str	r3, [sp, #4]
 800b6de:	f8d4 39e0 	ldr.w	r3, [r4, #2528]	; 0x9e0
 800b6e2:	4a0b      	ldr	r2, [pc, #44]	; (800b710 <ArtNetNode::SendPollRelply(bool)+0x94>)
 800b6e4:	9300      	str	r3, [sp, #0]
 800b6e6:	f504 60bb 	add.w	r0, r4, #1496	; 0x5d8
 800b6ea:	f894 39f0 	ldrb.w	r3, [r4, #2544]	; 0x9f0
 800b6ee:	f7fd fc7f 	bl	8008ff0 <snprintf>
 800b6f2:	f641 1336 	movw	r3, #6454	; 0x1936
 800b6f6:	22ef      	movs	r2, #239	; 0xef
 800b6f8:	9300      	str	r3, [sp, #0]
 800b6fa:	7820      	ldrb	r0, [r4, #0]
 800b6fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6fe:	f204 516c 	addw	r1, r4, #1388	; 0x56c
 800b702:	f004 fd11 	bl	8010128 <udp_send>
 800b706:	2300      	movs	r3, #0
 800b708:	f884 39f7 	strb.w	r3, [r4, #2551]	; 0x9f7
 800b70c:	b005      	add	sp, #20
 800b70e:	bd30      	pop	{r4, r5, pc}
 800b710:	080168d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, fp, sp, lr}

0800b714 <ArtNetNode::HandlePoll()>:
 800b714:	f890 20a4 	ldrb.w	r2, [r0, #164]	; 0xa4
 800b718:	b410      	push	{r4}
 800b71a:	f3c2 0340 	ubfx	r3, r2, #1, #1
 800b71e:	f880 39f2 	strb.w	r3, [r0, #2546]	; 0x9f2
 800b722:	f012 0304 	ands.w	r3, r2, #4
 800b726:	d02e      	beq.n	800b786 <ArtNetNode::HandlePoll()+0x72>
 800b728:	2301      	movs	r3, #1
 800b72a:	f8d0 19e8 	ldr.w	r1, [r0, #2536]	; 0x9e8
 800b72e:	f890 49f4 	ldrb.w	r4, [r0, #2548]	; 0x9f4
 800b732:	f880 39f3 	strb.w	r3, [r0, #2547]	; 0x9f3
 800b736:	b979      	cbnz	r1, 800b758 <ArtNetNode::HandlePoll()+0x44>
 800b738:	f8d0 3564 	ldr.w	r3, [r0, #1380]	; 0x564
 800b73c:	f8c0 39e8 	str.w	r3, [r0, #2536]	; 0x9e8
 800b740:	b19c      	cbz	r4, 800b76a <ArtNetNode::HandlePoll()+0x56>
 800b742:	f890 39fc 	ldrb.w	r3, [r0, #2556]	; 0x9fc
 800b746:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
 800b74a:	4293      	cmp	r3, r2
 800b74c:	bf28      	it	cs
 800b74e:	4613      	movcs	r3, r2
 800b750:	f880 39fc 	strb.w	r3, [r0, #2556]	; 0x9fc
 800b754:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b756:	e010      	b.n	800b77a <ArtNetNode::HandlePoll()+0x66>
 800b758:	2c00      	cmp	r4, #0
 800b75a:	d1f2      	bne.n	800b742 <ArtNetNode::HandlePoll()+0x2e>
 800b75c:	f8d0 4564 	ldr.w	r4, [r0, #1380]	; 0x564
 800b760:	42a1      	cmp	r1, r4
 800b762:	d002      	beq.n	800b76a <ArtNetNode::HandlePoll()+0x56>
 800b764:	f880 39f4 	strb.w	r3, [r0, #2548]	; 0x9f4
 800b768:	e7eb      	b.n	800b742 <ArtNetNode::HandlePoll()+0x2e>
 800b76a:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 800b76e:	f880 39fc 	strb.w	r3, [r0, #2556]	; 0x9fc
 800b772:	0713      	lsls	r3, r2, #28
 800b774:	d5ee      	bpl.n	800b754 <ArtNetNode::HandlePoll()+0x40>
 800b776:	f8d0 3564 	ldr.w	r3, [r0, #1380]	; 0x564
 800b77a:	2101      	movs	r1, #1
 800b77c:	bc10      	pop	{r4}
 800b77e:	f8c0 39e4 	str.w	r3, [r0, #2532]	; 0x9e4
 800b782:	f7ff bf7b 	b.w	800b67c <ArtNetNode::SendPollRelply(bool)>
 800b786:	f880 39f3 	strb.w	r3, [r0, #2547]	; 0x9f3
 800b78a:	e7f6      	b.n	800b77a <ArtNetNode::HandlePoll()+0x66>

0800b78c <memcpy.isra.0>:
 800b78c:	3801      	subs	r0, #1
 800b78e:	440a      	add	r2, r1
 800b790:	4291      	cmp	r1, r2
 800b792:	d100      	bne.n	800b796 <memcpy.isra.0+0xa>
 800b794:	4770      	bx	lr
 800b796:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b79a:	f800 3f01 	strb.w	r3, [r0, #1]!
 800b79e:	e7f7      	b.n	800b790 <memcpy.isra.0+0x4>

0800b7a0 <ArtNetNode::SetRmd(unsigned int, bool)>:
 800b7a0:	2328      	movs	r3, #40	; 0x28
 800b7a2:	fb03 0301 	mla	r3, r3, r1, r0
 800b7a6:	b570      	push	{r4, r5, r6, lr}
 800b7a8:	f893 6a1c 	ldrb.w	r6, [r3, #2588]	; 0xa1c
 800b7ac:	460d      	mov	r5, r1
 800b7ae:	4296      	cmp	r6, r2
 800b7b0:	4614      	mov	r4, r2
 800b7b2:	f883 2a1c 	strb.w	r2, [r3, #2588]	; 0xa1c
 800b7b6:	d00e      	beq.n	800b7d6 <ArtNetNode::SetRmd(unsigned int, bool)+0x36>
 800b7b8:	f890 39f1 	ldrb.w	r3, [r0, #2545]	; 0x9f1
 800b7bc:	2b02      	cmp	r3, #2
 800b7be:	d10a      	bne.n	800b7d6 <ArtNetNode::SetRmd(unsigned int, bool)+0x36>
 800b7c0:	69c0      	ldr	r0, [r0, #28]
 800b7c2:	b110      	cbz	r0, 800b7ca <ArtNetNode::SetRmd(unsigned int, bool)+0x2a>
 800b7c4:	6803      	ldr	r3, [r0, #0]
 800b7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c8:	4798      	blx	r3
 800b7ca:	4621      	mov	r1, r4
 800b7cc:	4628      	mov	r0, r5
 800b7ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b7d2:	f006 bd05 	b.w	80121e0 <artnet::display_rdm_enabled(unsigned int, bool)>
 800b7d6:	bd70      	pop	{r4, r5, r6, pc}

0800b7d8 <ArtNetNode::HandleTodData()>:
 800b7d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7dc:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 800b7e0:	4604      	mov	r4, r0
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d10f      	bne.n	800b806 <ArtNetNode::HandleTodData()+0x2e>
 800b7e6:	4606      	mov	r6, r0
 800b7e8:	2500      	movs	r5, #0
 800b7ea:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
 800b7ee:	f890 70af 	ldrb.w	r7, [r0, #175]	; 0xaf
 800b7f2:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800b7f6:	f896 3aa4 	ldrb.w	r3, [r6, #2724]	; 0xaa4
 800b7fa:	b933      	cbnz	r3, 800b80a <ArtNetNode::HandleTodData()+0x32>
 800b7fc:	3501      	adds	r5, #1
 800b7fe:	2d04      	cmp	r5, #4
 800b800:	f106 0610 	add.w	r6, r6, #16
 800b804:	d1f7      	bne.n	800b7f6 <ArtNetNode::HandleTodData()+0x1e>
 800b806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b80a:	f8b6 3aa0 	ldrh.w	r3, [r6, #2720]	; 0xaa0
 800b80e:	42bb      	cmp	r3, r7
 800b810:	d1f4      	bne.n	800b7fc <ArtNetNode::HandleTodData()+0x24>
 800b812:	f04f 0800 	mov.w	r8, #0
 800b816:	f104 09b4 	add.w	r9, r4, #180	; 0xb4
 800b81a:	f894 30b3 	ldrb.w	r3, [r4, #179]	; 0xb3
 800b81e:	4543      	cmp	r3, r8
 800b820:	d9ec      	bls.n	800b7fc <ArtNetNode::HandleTodData()+0x24>
 800b822:	68e0      	ldr	r0, [r4, #12]
 800b824:	464a      	mov	r2, r9
 800b826:	6803      	ldr	r3, [r0, #0]
 800b828:	4629      	mov	r1, r5
 800b82a:	699b      	ldr	r3, [r3, #24]
 800b82c:	4798      	blx	r3
 800b82e:	f108 0801 	add.w	r8, r8, #1
 800b832:	f109 0906 	add.w	r9, r9, #6
 800b836:	e7f0      	b.n	800b81a <ArtNetNode::HandleTodData()+0x42>

0800b838 <ArtNetNode::SendTod(unsigned int)>:
 800b838:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b83c:	f100 0998 	add.w	r9, r0, #152	; 0x98
 800b840:	4604      	mov	r4, r0
 800b842:	460f      	mov	r7, r1
 800b844:	2208      	movs	r2, #8
 800b846:	4648      	mov	r0, r9
 800b848:	ea4f 0891 	mov.w	r8, r1, lsr #2
 800b84c:	492c      	ldr	r1, [pc, #176]	; (800b900 <ArtNetNode::SendTod(unsigned int)+0xc8>)
 800b84e:	f7ff ff9d 	bl	800b78c <memcpy.isra.0>
 800b852:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800b856:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 800b85a:	230e      	movs	r3, #14
 800b85c:	2500      	movs	r5, #0
 800b85e:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 800b862:	2301      	movs	r3, #1
 800b864:	68e0      	ldr	r0, [r4, #12]
 800b866:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
 800b86a:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 800b86e:	6803      	ldr	r3, [r0, #0]
 800b870:	4639      	mov	r1, r7
 800b872:	68db      	ldr	r3, [r3, #12]
 800b874:	f884 50a0 	strb.w	r5, [r4, #160]	; 0xa0
 800b878:	4798      	blx	r3
 800b87a:	f007 0303 	and.w	r3, r7, #3
 800b87e:	3301      	adds	r3, #1
 800b880:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 800b884:	f108 0301 	add.w	r3, r8, #1
 800b888:	f884 50a6 	strb.w	r5, [r4, #166]	; 0xa6
 800b88c:	f884 50a7 	strb.w	r5, [r4, #167]	; 0xa7
 800b890:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
 800b894:	f884 50a9 	strb.w	r5, [r4, #169]	; 0xa9
 800b898:	f884 50aa 	strb.w	r5, [r4, #170]	; 0xaa
 800b89c:	f884 50ab 	strb.w	r5, [r4, #171]	; 0xab
 800b8a0:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
 800b8a4:	44a0      	add	r8, r4
 800b8a6:	f898 3036 	ldrb.w	r3, [r8, #54]	; 0x36
 800b8aa:	f884 50ae 	strb.w	r5, [r4, #174]	; 0xae
 800b8ae:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 800b8b2:	2328      	movs	r3, #40	; 0x28
 800b8b4:	fb03 4307 	mla	r3, r3, r7, r4
 800b8b8:	f893 3a02 	ldrb.w	r3, [r3, #2562]	; 0xa02
 800b8bc:	b2c6      	uxtb	r6, r0
 800b8be:	68e0      	ldr	r0, [r4, #12]
 800b8c0:	f884 30af 	strb.w	r3, [r4, #175]	; 0xaf
 800b8c4:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 800b8c8:	f884 60b1 	strb.w	r6, [r4, #177]	; 0xb1
 800b8cc:	f884 50b2 	strb.w	r5, [r4, #178]	; 0xb2
 800b8d0:	f884 60b3 	strb.w	r6, [r4, #179]	; 0xb3
 800b8d4:	6803      	ldr	r3, [r0, #0]
 800b8d6:	4639      	mov	r1, r7
 800b8d8:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
 800b8dc:	691b      	ldr	r3, [r3, #16]
 800b8de:	4798      	blx	r3
 800b8e0:	2306      	movs	r3, #6
 800b8e2:	fb03 f206 	mul.w	r2, r3, r6
 800b8e6:	f641 1336 	movw	r3, #6454	; 0x1936
 800b8ea:	4649      	mov	r1, r9
 800b8ec:	9300      	str	r3, [sp, #0]
 800b8ee:	7820      	ldrb	r0, [r4, #0]
 800b8f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8f2:	321c      	adds	r2, #28
 800b8f4:	f004 fc18 	bl	8010128 <udp_send>
 800b8f8:	b003      	add	sp, #12
 800b8fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8fe:	bf00      	nop
 800b900:	080168f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, fp, sp, lr}

0800b904 <ArtNetNode::HandleTodControl()>:
 800b904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b906:	4604      	mov	r4, r0
 800b908:	4606      	mov	r6, r0
 800b90a:	2500      	movs	r5, #0
 800b90c:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
 800b910:	f890 70af 	ldrb.w	r7, [r0, #175]	; 0xaf
 800b914:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800b918:	f896 3a1c 	ldrb.w	r3, [r6, #2588]	; 0xa1c
 800b91c:	b34b      	cbz	r3, 800b972 <ArtNetNode::HandleTodControl()+0x6e>
 800b91e:	f8b6 3a00 	ldrh.w	r3, [r6, #2560]	; 0xa00
 800b922:	42bb      	cmp	r3, r7
 800b924:	d125      	bne.n	800b972 <ArtNetNode::HandleTodControl()+0x6e>
 800b926:	f896 3a04 	ldrb.w	r3, [r6, #2564]	; 0xa04
 800b92a:	b313      	cbz	r3, 800b972 <ArtNetNode::HandleTodControl()+0x6e>
 800b92c:	f896 3a25 	ldrb.w	r3, [r6, #2597]	; 0xa25
 800b930:	b13b      	cbz	r3, 800b942 <ArtNetNode::HandleTodControl()+0x3e>
 800b932:	f894 398c 	ldrb.w	r3, [r4, #2444]	; 0x98c
 800b936:	b923      	cbnz	r3, 800b942 <ArtNetNode::HandleTodControl()+0x3e>
 800b938:	6860      	ldr	r0, [r4, #4]
 800b93a:	4629      	mov	r1, r5
 800b93c:	6803      	ldr	r3, [r0, #0]
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	4798      	blx	r3
 800b942:	f894 30ae 	ldrb.w	r3, [r4, #174]	; 0xae
 800b946:	2b01      	cmp	r3, #1
 800b948:	d104      	bne.n	800b954 <ArtNetNode::HandleTodControl()+0x50>
 800b94a:	68e0      	ldr	r0, [r4, #12]
 800b94c:	4629      	mov	r1, r5
 800b94e:	6803      	ldr	r3, [r0, #0]
 800b950:	689b      	ldr	r3, [r3, #8]
 800b952:	4798      	blx	r3
 800b954:	4629      	mov	r1, r5
 800b956:	4620      	mov	r0, r4
 800b958:	f7ff ff6e 	bl	800b838 <ArtNetNode::SendTod(unsigned int)>
 800b95c:	f896 3a25 	ldrb.w	r3, [r6, #2597]	; 0xa25
 800b960:	b13b      	cbz	r3, 800b972 <ArtNetNode::HandleTodControl()+0x6e>
 800b962:	f894 398c 	ldrb.w	r3, [r4, #2444]	; 0x98c
 800b966:	b923      	cbnz	r3, 800b972 <ArtNetNode::HandleTodControl()+0x6e>
 800b968:	6860      	ldr	r0, [r4, #4]
 800b96a:	4629      	mov	r1, r5
 800b96c:	6803      	ldr	r3, [r0, #0]
 800b96e:	689b      	ldr	r3, [r3, #8]
 800b970:	4798      	blx	r3
 800b972:	3501      	adds	r5, #1
 800b974:	2d04      	cmp	r5, #4
 800b976:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800b97a:	d1cd      	bne.n	800b918 <ArtNetNode::HandleTodControl()+0x14>
 800b97c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b97e <ArtNetNode::HandleTodRequest()>:
 800b97e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b982:	4605      	mov	r5, r0
 800b984:	f06f 0aae 	mvn.w	sl, #174	; 0xae
 800b988:	4604      	mov	r4, r0
 800b98a:	f815 8faf 	ldrb.w	r8, [r5, #175]!
 800b98e:	ebaa 0a00 	sub.w	sl, sl, r0
 800b992:	f008 081f 	and.w	r8, r8, #31
 800b996:	eb0a 0305 	add.w	r3, sl, r5
 800b99a:	4598      	cmp	r8, r3
 800b99c:	4626      	mov	r6, r4
 800b99e:	dc01      	bgt.n	800b9a4 <ArtNetNode::HandleTodRequest()+0x26>
 800b9a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9a4:	2700      	movs	r7, #0
 800b9a6:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
 800b9aa:	f815 9f01 	ldrb.w	r9, [r5, #1]!
 800b9ae:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
 800b9b2:	f896 3a1c 	ldrb.w	r3, [r6, #2588]	; 0xa1c
 800b9b6:	b153      	cbz	r3, 800b9ce <ArtNetNode::HandleTodRequest()+0x50>
 800b9b8:	f8b6 3a00 	ldrh.w	r3, [r6, #2560]	; 0xa00
 800b9bc:	454b      	cmp	r3, r9
 800b9be:	d106      	bne.n	800b9ce <ArtNetNode::HandleTodRequest()+0x50>
 800b9c0:	f896 3a04 	ldrb.w	r3, [r6, #2564]	; 0xa04
 800b9c4:	b11b      	cbz	r3, 800b9ce <ArtNetNode::HandleTodRequest()+0x50>
 800b9c6:	4639      	mov	r1, r7
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	f7ff ff35 	bl	800b838 <ArtNetNode::SendTod(unsigned int)>
 800b9ce:	3701      	adds	r7, #1
 800b9d0:	2f04      	cmp	r7, #4
 800b9d2:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800b9d6:	d1ec      	bne.n	800b9b2 <ArtNetNode::HandleTodRequest()+0x34>
 800b9d8:	e7dd      	b.n	800b996 <ArtNetNode::HandleTodRequest()+0x18>
	...

0800b9dc <ArtNetNode::SendTodRequest(unsigned int)>:
 800b9dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b9de:	4604      	mov	r4, r0
 800b9e0:	68c0      	ldr	r0, [r0, #12]
 800b9e2:	f104 0698 	add.w	r6, r4, #152	; 0x98
 800b9e6:	6803      	ldr	r3, [r0, #0]
 800b9e8:	460d      	mov	r5, r1
 800b9ea:	695b      	ldr	r3, [r3, #20]
 800b9ec:	4798      	blx	r3
 800b9ee:	4630      	mov	r0, r6
 800b9f0:	2208      	movs	r2, #8
 800b9f2:	491c      	ldr	r1, [pc, #112]	; (800ba64 <ArtNetNode::SendTodRequest(unsigned int)+0x88>)
 800b9f4:	f7ff feca 	bl	800b78c <memcpy.isra.0>
 800b9f8:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
 800ba02:	220e      	movs	r2, #14
 800ba04:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 800ba08:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 800ba0c:	f884 20a3 	strb.w	r2, [r4, #163]	; 0xa3
 800ba10:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 800ba14:	f884 30a7 	strb.w	r3, [r4, #167]	; 0xa7
 800ba18:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
 800ba1c:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
 800ba20:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
 800ba24:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
 800ba28:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
 800ba2c:	eb04 0295 	add.w	r2, r4, r5, lsr #2
 800ba30:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800ba34:	f884 30ae 	strb.w	r3, [r4, #174]	; 0xae
 800ba38:	2301      	movs	r3, #1
 800ba3a:	f884 20ad 	strb.w	r2, [r4, #173]	; 0xad
 800ba3e:	f884 30af 	strb.w	r3, [r4, #175]	; 0xaf
 800ba42:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 800ba46:	f895 3aa2 	ldrb.w	r3, [r5, #2722]	; 0xaa2
 800ba4a:	2219      	movs	r2, #25
 800ba4c:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
 800ba50:	f641 1336 	movw	r3, #6454	; 0x1936
 800ba54:	4631      	mov	r1, r6
 800ba56:	9300      	str	r3, [sp, #0]
 800ba58:	7820      	ldrb	r0, [r4, #0]
 800ba5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba5c:	f004 fb64 	bl	8010128 <udp_send>
 800ba60:	b002      	add	sp, #8
 800ba62:	bd70      	pop	{r4, r5, r6, pc}
 800ba64:	080168f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, fp, sp, lr}

0800ba68 <ArtNetNode::HandleRdm()>:
 800ba68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba6c:	f890 70a4 	ldrb.w	r7, [r0, #164]	; 0xa4
 800ba70:	4604      	mov	r4, r0
 800ba72:	2f01      	cmp	r7, #1
 800ba74:	d136      	bne.n	800bae4 <ArtNetNode::HandleRdm()+0x7c>
 800ba76:	4605      	mov	r5, r0
 800ba78:	2600      	movs	r6, #0
 800ba7a:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 800ba7e:	f890 30af 	ldrb.w	r3, [r0, #175]	; 0xaf
 800ba82:	f100 0a98 	add.w	sl, r0, #152	; 0x98
 800ba86:	ea43 2b02 	orr.w	fp, r3, r2, lsl #8
 800ba8a:	f100 08b0 	add.w	r8, r0, #176	; 0xb0
 800ba8e:	f895 3a1c 	ldrb.w	r3, [r5, #2588]	; 0xa1c
 800ba92:	b313      	cbz	r3, 800bada <ArtNetNode::HandleRdm()+0x72>
 800ba94:	f8b5 3a00 	ldrh.w	r3, [r5, #2560]	; 0xa00
 800ba98:	455b      	cmp	r3, fp
 800ba9a:	d11e      	bne.n	800bada <ArtNetNode::HandleRdm()+0x72>
 800ba9c:	f895 3a04 	ldrb.w	r3, [r5, #2564]	; 0xa04
 800baa0:	b1db      	cbz	r3, 800bada <ArtNetNode::HandleRdm()+0x72>
 800baa2:	68e0      	ldr	r0, [r4, #12]
 800baa4:	4642      	mov	r2, r8
 800baa6:	6803      	ldr	r3, [r0, #0]
 800baa8:	4631      	mov	r1, r6
 800baaa:	69db      	ldr	r3, [r3, #28]
 800baac:	4798      	blx	r3
 800baae:	b1a0      	cbz	r0, 800bada <ArtNetNode::HandleRdm()+0x72>
 800bab0:	f884 70a4 	strb.w	r7, [r4, #164]	; 0xa4
 800bab4:	f890 9002 	ldrb.w	r9, [r0, #2]
 800bab8:	1c41      	adds	r1, r0, #1
 800baba:	f109 0201 	add.w	r2, r9, #1
 800babe:	4640      	mov	r0, r8
 800bac0:	f7ff fe64 	bl	800b78c <memcpy.isra.0>
 800bac4:	f641 1336 	movw	r3, #6454	; 0x1936
 800bac8:	4651      	mov	r1, sl
 800baca:	9300      	str	r3, [sp, #0]
 800bacc:	7820      	ldrb	r0, [r4, #0]
 800bace:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
 800bad2:	f109 0219 	add.w	r2, r9, #25
 800bad6:	f004 fb27 	bl	8010128 <udp_send>
 800bada:	3601      	adds	r6, #1
 800badc:	2e04      	cmp	r6, #4
 800bade:	f105 0528 	add.w	r5, r5, #40	; 0x28
 800bae2:	d1d4      	bne.n	800ba8e <ArtNetNode::HandleRdm()+0x26>
 800bae4:	b003      	add	sp, #12
 800bae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800baec <ArtNetNode::HandleRdmIn()>:
 800baec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800baf0:	2500      	movs	r5, #0
 800baf2:	4604      	mov	r4, r0
 800baf4:	4606      	mov	r6, r0
 800baf6:	462f      	mov	r7, r5
 800baf8:	f100 0898 	add.w	r8, r0, #152	; 0x98
 800bafc:	f100 09b0 	add.w	r9, r0, #176	; 0xb0
 800bb00:	f100 0a9f 	add.w	sl, r0, #159	; 0x9f
 800bb04:	f896 3aa4 	ldrb.w	r3, [r6, #2724]	; 0xaa4
 800bb08:	b373      	cbz	r3, 800bb68 <ArtNetNode::HandleRdmIn()+0x7c>
 800bb0a:	68e0      	ldr	r0, [r4, #12]
 800bb0c:	464a      	mov	r2, r9
 800bb0e:	6803      	ldr	r3, [r0, #0]
 800bb10:	4629      	mov	r1, r5
 800bb12:	6a1b      	ldr	r3, [r3, #32]
 800bb14:	4798      	blx	r3
 800bb16:	b338      	cbz	r0, 800bb68 <ArtNetNode::HandleRdmIn()+0x7c>
 800bb18:	4a1a      	ldr	r2, [pc, #104]	; (800bb84 <ArtNetNode::HandleRdmIn()+0x98>)
 800bb1a:	f104 0397 	add.w	r3, r4, #151	; 0x97
 800bb1e:	4553      	cmp	r3, sl
 800bb20:	d12a      	bne.n	800bb78 <ArtNetNode::HandleRdmIn()+0x8c>
 800bb22:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800bb26:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 800bb2a:	230e      	movs	r3, #14
 800bb2c:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 800bb30:	2301      	movs	r3, #1
 800bb32:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 800bb36:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800bb3a:	f884 70a2 	strb.w	r7, [r4, #162]	; 0xa2
 800bb3e:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 800bb42:	f884 70ae 	strb.w	r7, [r4, #174]	; 0xae
 800bb46:	f884 70a0 	strb.w	r7, [r4, #160]	; 0xa0
 800bb4a:	f896 3aa2 	ldrb.w	r3, [r6, #2722]	; 0xaa2
 800bb4e:	f240 1217 	movw	r2, #279	; 0x117
 800bb52:	f884 30af 	strb.w	r3, [r4, #175]	; 0xaf
 800bb56:	f641 1336 	movw	r3, #6454	; 0x1936
 800bb5a:	9300      	str	r3, [sp, #0]
 800bb5c:	4641      	mov	r1, r8
 800bb5e:	f8d6 3aa8 	ldr.w	r3, [r6, #2728]	; 0xaa8
 800bb62:	7820      	ldrb	r0, [r4, #0]
 800bb64:	f004 fae0 	bl	8010128 <udp_send>
 800bb68:	3501      	adds	r5, #1
 800bb6a:	2d04      	cmp	r5, #4
 800bb6c:	f106 0610 	add.w	r6, r6, #16
 800bb70:	d1c8      	bne.n	800bb04 <ArtNetNode::HandleRdmIn()+0x18>
 800bb72:	b002      	add	sp, #8
 800bb74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb78:	f812 1b01 	ldrb.w	r1, [r2], #1
 800bb7c:	f803 1f01 	strb.w	r1, [r3, #1]!
 800bb80:	e7cd      	b.n	800bb1e <ArtNetNode::HandleRdmIn()+0x32>
 800bb82:	bf00      	nop
 800bb84:	080168fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, fp, sp, lr}

0800bb88 <ArtNetNode::HandleSync()>:
 800bb88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb8c:	2500      	movs	r5, #0
 800bb8e:	2301      	movs	r3, #1
 800bb90:	4604      	mov	r4, r0
 800bb92:	4606      	mov	r6, r0
 800bb94:	46a9      	mov	r9, r5
 800bb96:	f880 39f5 	strb.w	r3, [r0, #2549]	; 0x9f5
 800bb9a:	4b1d      	ldr	r3, [pc, #116]	; (800bc10 <ArtNetNode::HandleSync()+0x88>)
 800bb9c:	4f1d      	ldr	r7, [pc, #116]	; (800bc14 <ArtNetNode::HandleSync()+0x8c>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f8df 8074 	ldr.w	r8, [pc, #116]	; 800bc18 <ArtNetNode::HandleSync()+0x90>
 800bba4:	f8c0 39ec 	str.w	r3, [r0, #2540]	; 0x9ec
 800bba8:	f8d6 3a20 	ldr.w	r3, [r6, #2592]	; 0xa20
 800bbac:	bb3b      	cbnz	r3, 800bbfe <ArtNetNode::HandleSync()+0x76>
 800bbae:	f896 3a04 	ldrb.w	r3, [r6, #2564]	; 0xa04
 800bbb2:	b323      	cbz	r3, 800bbfe <ArtNetNode::HandleSync()+0x76>
 800bbb4:	f8d8 3000 	ldr.w	r3, [r8]
 800bbb8:	6860      	ldr	r0, [r4, #4]
 800bbba:	07da      	lsls	r2, r3, #31
 800bbbc:	bf5c      	itt	pl
 800bbbe:	2301      	movpl	r3, #1
 800bbc0:	f8c8 3000 	strpl.w	r3, [r8]
 800bbc4:	6803      	ldr	r3, [r0, #0]
 800bbc6:	4629      	mov	r1, r5
 800bbc8:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800bbcc:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 800bbd0:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800bbd4:	47d0      	blx	sl
 800bbd6:	f896 3a25 	ldrb.w	r3, [r6, #2597]	; 0xa25
 800bbda:	b93b      	cbnz	r3, 800bbec <ArtNetNode::HandleSync()+0x64>
 800bbdc:	6860      	ldr	r0, [r4, #4]
 800bbde:	4629      	mov	r1, r5
 800bbe0:	6803      	ldr	r3, [r0, #0]
 800bbe2:	689b      	ldr	r3, [r3, #8]
 800bbe4:	4798      	blx	r3
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	f886 3a25 	strb.w	r3, [r6, #2597]	; 0xa25
 800bbec:	f8d8 3000 	ldr.w	r3, [r8]
 800bbf0:	f8c7 9600 	str.w	r9, [r7, #1536]	; 0x600
 800bbf4:	07db      	lsls	r3, r3, #31
 800bbf6:	bf5c      	itt	pl
 800bbf8:	2301      	movpl	r3, #1
 800bbfa:	f8c8 3000 	strpl.w	r3, [r8]
 800bbfe:	3501      	adds	r5, #1
 800bc00:	2d04      	cmp	r5, #4
 800bc02:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800bc06:	f207 6704 	addw	r7, r7, #1540	; 0x604
 800bc0a:	d1cd      	bne.n	800bba8 <ArtNetNode::HandleSync()+0x20>
 800bc0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc10:	20009d6c 	andcs	r9, r0, ip, ror #26
 800bc14:	200000b4 	strhcs	r0, [r0], -r4
 800bc18:	200000b0 	strhcs	r0, [r0], -r0	; <UNPREDICTABLE>

0800bc1c <ArtNetNode::HandleTimeCode()>:
 800bc1c:	4601      	mov	r1, r0
 800bc1e:	6880      	ldr	r0, [r0, #8]
 800bc20:	31a6      	adds	r1, #166	; 0xa6
 800bc22:	6803      	ldr	r3, [r0, #0]
 800bc24:	691b      	ldr	r3, [r3, #16]
 800bc26:	4718      	bx	r3

0800bc28 <ArtNetNode::HandleTimeSync()>:
 800bc28:	b500      	push	{lr}
 800bc2a:	f890 30a7 	ldrb.w	r3, [r0, #167]	; 0xa7
 800bc2e:	b08b      	sub	sp, #44	; 0x2c
 800bc30:	9301      	str	r3, [sp, #4]
 800bc32:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
 800bc36:	f890 20ac 	ldrb.w	r2, [r0, #172]	; 0xac
 800bc3a:	9302      	str	r3, [sp, #8]
 800bc3c:	f890 30a9 	ldrb.w	r3, [r0, #169]	; 0xa9
 800bc40:	a901      	add	r1, sp, #4
 800bc42:	9303      	str	r3, [sp, #12]
 800bc44:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
 800bc48:	9304      	str	r3, [sp, #16]
 800bc4a:	f890 30ab 	ldrb.w	r3, [r0, #171]	; 0xab
 800bc4e:	9305      	str	r3, [sp, #20]
 800bc50:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
 800bc54:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800bc58:	9306      	str	r3, [sp, #24]
 800bc5a:	4b03      	ldr	r3, [pc, #12]	; (800bc68 <ArtNetNode::HandleTimeSync()+0x40>)
 800bc5c:	6818      	ldr	r0, [r3, #0]
 800bc5e:	f008 f93b 	bl	8013ed8 <Hardware::SetTime(tm const*)>
 800bc62:	b00b      	add	sp, #44	; 0x2c
 800bc64:	f85d fb04 	ldr.w	pc, [sp], #4
 800bc68:	20009d58 	andcs	r9, r0, r8, asr sp

0800bc6c <ArtNetNode::Print()>:
 800bc6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc70:	4604      	mov	r4, r0
 800bc72:	b087      	sub	sp, #28
 800bc74:	2201      	movs	r2, #1
 800bc76:	2104      	movs	r1, #4
 800bc78:	4839      	ldr	r0, [pc, #228]	; (800bd60 <ArtNetNode::Print()+0xf4>)
 800bc7a:	f7fd f991 	bl	8008fa0 <printf>
 800bc7e:	4b39      	ldr	r3, [pc, #228]	; (800bd64 <ArtNetNode::Print()+0xf8>)
 800bc80:	4839      	ldr	r0, [pc, #228]	; (800bd68 <ArtNetNode::Print()+0xfc>)
 800bc82:	7819      	ldrb	r1, [r3, #0]
 800bc84:	785a      	ldrb	r2, [r3, #1]
 800bc86:	f7fd f98b 	bl	8008fa0 <printf>
 800bc8a:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800bc8e:	4837      	ldr	r0, [pc, #220]	; (800bd6c <ArtNetNode::Print()+0x100>)
 800bc90:	f7fd f986 	bl	8008fa0 <printf>
 800bc94:	4836      	ldr	r0, [pc, #216]	; (800bd70 <ArtNetNode::Print()+0x104>)
 800bc96:	f104 014a 	add.w	r1, r4, #74	; 0x4a
 800bc9a:	f7fd f981 	bl	8008fa0 <printf>
 800bc9e:	f894 39fa 	ldrb.w	r3, [r4, #2554]	; 0x9fa
 800bca2:	b36b      	cbz	r3, 800bd00 <ArtNetNode::Print()+0x94>
 800bca4:	4833      	ldr	r0, [pc, #204]	; (800bd74 <ArtNetNode::Print()+0x108>)
 800bca6:	f7fd f97b 	bl	8008fa0 <printf>
 800bcaa:	4626      	mov	r6, r4
 800bcac:	2500      	movs	r5, #0
 800bcae:	4f32      	ldr	r7, [pc, #200]	; (800bd78 <ArtNetNode::Print()+0x10c>)
 800bcb0:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 800bd7c <ArtNetNode::Print()+0x110>
 800bcb4:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800bd80 <ArtNetNode::Print()+0x114>
 800bcb8:	2301      	movs	r3, #1
 800bcba:	4629      	mov	r1, r5
 800bcbc:	4620      	mov	r0, r4
 800bcbe:	f10d 0216 	add.w	r2, sp, #22
 800bcc2:	f7fe fdc9 	bl	800a858 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800bcc6:	b1b0      	cbz	r0, 800bcf6 <ArtNetNode::Print()+0x8a>
 800bcc8:	f8d6 3a18 	ldr.w	r3, [r6, #2584]	; 0xa18
 800bccc:	4629      	mov	r1, r5
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	bf0c      	ite	eq
 800bcd2:	463b      	moveq	r3, r7
 800bcd4:	4643      	movne	r3, r8
 800bcd6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800bcda:	4648      	mov	r0, r9
 800bcdc:	f7fd f960 	bl	8008fa0 <printf>
 800bce0:	f8d6 1a20 	ldr.w	r1, [r6, #2592]	; 0xa20
 800bce4:	4a27      	ldr	r2, [pc, #156]	; (800bd84 <ArtNetNode::Print()+0x118>)
 800bce6:	4b28      	ldr	r3, [pc, #160]	; (800bd88 <ArtNetNode::Print()+0x11c>)
 800bce8:	4828      	ldr	r0, [pc, #160]	; (800bd8c <ArtNetNode::Print()+0x120>)
 800bcea:	2900      	cmp	r1, #0
 800bcec:	bf0c      	ite	eq
 800bcee:	4611      	moveq	r1, r2
 800bcf0:	4619      	movne	r1, r3
 800bcf2:	f7fd f955 	bl	8008fa0 <printf>
 800bcf6:	3501      	adds	r5, #1
 800bcf8:	2d04      	cmp	r5, #4
 800bcfa:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800bcfe:	d1db      	bne.n	800bcb8 <ArtNetNode::Print()+0x4c>
 800bd00:	f894 39fb 	ldrb.w	r3, [r4, #2555]	; 0x9fb
 800bd04:	b34b      	cbz	r3, 800bd5a <ArtNetNode::Print()+0xee>
 800bd06:	4822      	ldr	r0, [pc, #136]	; (800bd90 <ArtNetNode::Print()+0x124>)
 800bd08:	f7fd f94a 	bl	8008fa0 <printf>
 800bd0c:	2500      	movs	r5, #0
 800bd0e:	4e21      	ldr	r6, [pc, #132]	; (800bd94 <ArtNetNode::Print()+0x128>)
 800bd10:	4f21      	ldr	r7, [pc, #132]	; (800bd98 <ArtNetNode::Print()+0x12c>)
 800bd12:	2300      	movs	r3, #0
 800bd14:	4629      	mov	r1, r5
 800bd16:	4620      	mov	r0, r4
 800bd18:	f10d 0216 	add.w	r2, sp, #22
 800bd1c:	f7fe fd9c 	bl	800a858 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800bd20:	b1c0      	cbz	r0, 800bd54 <ArtNetNode::Print()+0xe8>
 800bd22:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 800bd26:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800bd2a:	b923      	cbnz	r3, 800bd36 <ArtNetNode::Print()+0xca>
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	69da      	ldr	r2, [r3, #28]
 800bd30:	695b      	ldr	r3, [r3, #20]
 800bd32:	ea63 0302 	orn	r3, r3, r2
 800bd36:	0e1a      	lsrs	r2, r3, #24
 800bd38:	9202      	str	r2, [sp, #8]
 800bd3a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800bd3e:	9201      	str	r2, [sp, #4]
 800bd40:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800bd44:	9200      	str	r2, [sp, #0]
 800bd46:	4629      	mov	r1, r5
 800bd48:	4630      	mov	r0, r6
 800bd4a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800bd4e:	b2db      	uxtb	r3, r3
 800bd50:	f7fd f926 	bl	8008fa0 <printf>
 800bd54:	3501      	adds	r5, #1
 800bd56:	2d04      	cmp	r5, #4
 800bd58:	d1db      	bne.n	800bd12 <ArtNetNode::Print()+0xa6>
 800bd5a:	b007      	add	sp, #28
 800bd5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd60:	08016917 	stmdaeq	r1, {r0, r1, r2, r4, r8, fp, sp, lr}
 800bd64:	08016b34 	stmdaeq	r1, {r2, r4, r5, r8, r9, fp, sp, lr}
 800bd68:	08016925 	stmdaeq	r1, {r0, r2, r5, r8, fp, sp, lr}
 800bd6c:	0801693a 	stmdaeq	r1, {r1, r3, r4, r5, r8, fp, sp, lr}
 800bd70:	0801694c 	stmdaeq	r1, {r2, r3, r6, r8, fp, sp, lr}
 800bd74:	0801695e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, fp, sp, lr}
 800bd78:	08016902 	stmdaeq	r1, {r1, r8, fp, sp, lr}
 800bd7c:	08016906 	stmdaeq	r1, {r1, r2, r8, fp, sp, lr}
 800bd80:	08016967 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, fp, sp, lr}
 800bd84:	0801690a 	stmdaeq	r1, {r1, r3, r8, fp, sp, lr}
 800bd88:	08016912 	stmdaeq	r1, {r1, r4, r8, fp, sp, lr}
 800bd8c:	0801697b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r8, fp, sp, lr}
 800bd90:	08016982 	stmdaeq	r1, {r1, r7, r8, fp, sp, lr}
 800bd94:	0801698a 	stmdaeq	r1, {r1, r3, r7, r8, fp, sp, lr}
 800bd98:	2000863c 	andcs	r8, r0, ip, lsr r6

0800bd9c <memcmp>:
 800bd9c:	4402      	add	r2, r0
 800bd9e:	4290      	cmp	r0, r2
 800bda0:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 800bda4:	d106      	bne.n	800bdb4 <memcmp+0x18>
 800bda6:	2000      	movs	r0, #0
 800bda8:	4770      	bx	lr
 800bdaa:	3001      	adds	r0, #1
 800bdac:	4290      	cmp	r0, r2
 800bdae:	d102      	bne.n	800bdb6 <memcmp+0x1a>
 800bdb0:	2000      	movs	r0, #0
 800bdb2:	e006      	b.n	800bdc2 <memcmp+0x26>
 800bdb4:	b510      	push	{r4, lr}
 800bdb6:	7803      	ldrb	r3, [r0, #0]
 800bdb8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bdbc:	42a3      	cmp	r3, r4
 800bdbe:	d0f4      	beq.n	800bdaa <memcmp+0xe>
 800bdc0:	1b18      	subs	r0, r3, r4
 800bdc2:	bd10      	pop	{r4, pc}

0800bdc4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 800bdc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bdc6:	88c6      	ldrh	r6, [r0, #6]
 800bdc8:	8885      	ldrh	r5, [r0, #4]
 800bdca:	42ae      	cmp	r6, r5
 800bdcc:	d216      	bcs.n	800bdfc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 800bdce:	4604      	mov	r4, r0
 800bdd0:	6800      	ldr	r0, [r0, #0]
 800bdd2:	1bad      	subs	r5, r5, r6
 800bdd4:	4430      	add	r0, r6
 800bdd6:	7a26      	ldrb	r6, [r4, #8]
 800bdd8:	b923      	cbnz	r3, 800bde4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 800bdda:	b926      	cbnz	r6, 800bde6 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 800bddc:	9200      	str	r2, [sp, #0]
 800bdde:	460b      	mov	r3, r1
 800bde0:	4a09      	ldr	r2, [pc, #36]	; (800be08 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 800bde2:	e003      	b.n	800bdec <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800bde4:	b166      	cbz	r6, 800be00 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 800bde6:	460b      	mov	r3, r1
 800bde8:	9200      	str	r2, [sp, #0]
 800bdea:	4a08      	ldr	r2, [pc, #32]	; (800be0c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 800bdec:	4629      	mov	r1, r5
 800bdee:	f7fd f8ff 	bl	8008ff0 <snprintf>
 800bdf2:	4285      	cmp	r5, r0
 800bdf4:	bfa2      	ittt	ge
 800bdf6:	88e3      	ldrhge	r3, [r4, #6]
 800bdf8:	181b      	addge	r3, r3, r0
 800bdfa:	80e3      	strhge	r3, [r4, #6]
 800bdfc:	b002      	add	sp, #8
 800bdfe:	bd70      	pop	{r4, r5, r6, pc}
 800be00:	9200      	str	r2, [sp, #0]
 800be02:	460b      	mov	r3, r1
 800be04:	4a02      	ldr	r2, [pc, #8]	; (800be10 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 800be06:	e7f1      	b.n	800bdec <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800be08:	08016691 	stmdaeq	r1, {r0, r4, r7, r9, sl, sp, lr}
 800be0c:	08016688 	stmdaeq	r1, {r3, r7, r9, sl, sp, lr}
 800be10:	08016692 	stmdaeq	r1, {r1, r4, r7, r9, sl, sp, lr}

0800be14 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800be14:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be16:	88c6      	ldrh	r6, [r0, #6]
 800be18:	8885      	ldrh	r5, [r0, #4]
 800be1a:	42ae      	cmp	r6, r5
 800be1c:	d216      	bcs.n	800be4c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800be1e:	4604      	mov	r4, r0
 800be20:	6800      	ldr	r0, [r0, #0]
 800be22:	1bad      	subs	r5, r5, r6
 800be24:	4430      	add	r0, r6
 800be26:	7a26      	ldrb	r6, [r4, #8]
 800be28:	b923      	cbnz	r3, 800be34 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800be2a:	b926      	cbnz	r6, 800be36 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800be2c:	9200      	str	r2, [sp, #0]
 800be2e:	460b      	mov	r3, r1
 800be30:	4a09      	ldr	r2, [pc, #36]	; (800be58 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800be32:	e003      	b.n	800be3c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800be34:	b166      	cbz	r6, 800be50 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800be36:	460b      	mov	r3, r1
 800be38:	9200      	str	r2, [sp, #0]
 800be3a:	4a08      	ldr	r2, [pc, #32]	; (800be5c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800be3c:	4629      	mov	r1, r5
 800be3e:	f7fd f8d7 	bl	8008ff0 <snprintf>
 800be42:	4285      	cmp	r5, r0
 800be44:	bfa2      	ittt	ge
 800be46:	88e3      	ldrhge	r3, [r4, #6]
 800be48:	181b      	addge	r3, r3, r0
 800be4a:	80e3      	strhge	r3, [r4, #6]
 800be4c:	b002      	add	sp, #8
 800be4e:	bd70      	pop	{r4, r5, r6, pc}
 800be50:	9200      	str	r2, [sp, #0]
 800be52:	460b      	mov	r3, r1
 800be54:	4a02      	ldr	r2, [pc, #8]	; (800be60 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800be56:	e7f1      	b.n	800be3c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800be58:	080166a4 	stmdaeq	r1, {r2, r5, r7, r9, sl, sp, lr}
 800be5c:	08016699 	stmdaeq	r1, {r0, r3, r4, r7, r9, sl, sp, lr}
 800be60:	080166a5 	stmdaeq	r1, {r0, r2, r5, r7, r9, sl, sp, lr}

0800be64 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800be64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be66:	460b      	mov	r3, r1
 800be68:	8885      	ldrh	r5, [r0, #4]
 800be6a:	88c1      	ldrh	r1, [r0, #6]
 800be6c:	42a9      	cmp	r1, r5
 800be6e:	d214      	bcs.n	800be9a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800be70:	4604      	mov	r4, r0
 800be72:	6800      	ldr	r0, [r0, #0]
 800be74:	1a6d      	subs	r5, r5, r1
 800be76:	4408      	add	r0, r1
 800be78:	7a21      	ldrb	r1, [r4, #8]
 800be7a:	b91a      	cbnz	r2, 800be84 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800be7c:	b919      	cbnz	r1, 800be86 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800be7e:	4a0a      	ldr	r2, [pc, #40]	; (800bea8 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800be80:	9100      	str	r1, [sp, #0]
 800be82:	e002      	b.n	800be8a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800be84:	b159      	cbz	r1, 800be9e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800be86:	9200      	str	r2, [sp, #0]
 800be88:	4a08      	ldr	r2, [pc, #32]	; (800beac <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800be8a:	4629      	mov	r1, r5
 800be8c:	f7fd f8b0 	bl	8008ff0 <snprintf>
 800be90:	4285      	cmp	r5, r0
 800be92:	bfa2      	ittt	ge
 800be94:	88e3      	ldrhge	r3, [r4, #6]
 800be96:	181b      	addge	r3, r3, r0
 800be98:	80e3      	strhge	r3, [r4, #6]
 800be9a:	b003      	add	sp, #12
 800be9c:	bd30      	pop	{r4, r5, pc}
 800be9e:	2201      	movs	r2, #1
 800bea0:	9200      	str	r2, [sp, #0]
 800bea2:	4a03      	ldr	r2, [pc, #12]	; (800beb0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800bea4:	e7f1      	b.n	800be8a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800bea6:	bf00      	nop
 800bea8:	08016691 	stmdaeq	r1, {r0, r4, r7, r9, sl, sp, lr}
 800beac:	08016688 	stmdaeq	r1, {r3, r7, r9, sl, sp, lr}
 800beb0:	08016692 	stmdaeq	r1, {r1, r4, r7, r9, sl, sp, lr}

0800beb4 <strncpy.isra.0>:
 800beb4:	1e4b      	subs	r3, r1, #1
 800beb6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800beba:	b909      	cbnz	r1, 800bec0 <strncpy.isra.0+0xc>
 800bebc:	f008 b8fc 	b.w	80140b8 <memset>
 800bec0:	3a01      	subs	r2, #1
 800bec2:	f800 1b01 	strb.w	r1, [r0], #1
 800bec6:	d1f6      	bne.n	800beb6 <strncpy.isra.0+0x2>
 800bec8:	4770      	bx	lr
	...

0800becc <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>:
 800becc:	b510      	push	{r4, lr}
 800bece:	2287      	movs	r2, #135	; 0x87
 800bed0:	4604      	mov	r4, r0
 800bed2:	f840 1b04 	str.w	r1, [r0], #4
 800bed6:	2100      	movs	r1, #0
 800bed8:	f008 f8ee 	bl	80140b8 <memset>
 800bedc:	2301      	movs	r3, #1
 800bede:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800bee2:	f240 3302 	movw	r3, #770	; 0x302
 800bee6:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800beea:	2355      	movs	r3, #85	; 0x55
 800beec:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
 800bef0:	2300      	movs	r3, #0
 800bef2:	2204      	movs	r2, #4
 800bef4:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800bef8:	4b03      	ldr	r3, [pc, #12]	; (800bf08 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)+0x3c>)
 800befa:	f884 206e 	strb.w	r2, [r4, #110]	; 0x6e
 800befe:	6819      	ldr	r1, [r3, #0]
 800bf00:	b901      	cbnz	r1, 800bf04 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)+0x38>
 800bf02:	601a      	str	r2, [r3, #0]
 800bf04:	4620      	mov	r0, r4
 800bf06:	bd10      	pop	{r4, pc}
 800bf08:	200018d4 	ldrdcs	r1, [r0], -r4

0800bf0c <ArtNetParams::Load()>:
 800bf0c:	b508      	push	{r3, lr}
 800bf0e:	2300      	movs	r3, #0
 800bf10:	4601      	mov	r1, r0
 800bf12:	6043      	str	r3, [r0, #4]
 800bf14:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800bf18:	6800      	ldr	r0, [r0, #0]
 800bf1a:	b120      	cbz	r0, 800bf26 <ArtNetParams::Load()+0x1a>
 800bf1c:	6803      	ldr	r3, [r0, #0]
 800bf1e:	3104      	adds	r1, #4
 800bf20:	68db      	ldr	r3, [r3, #12]
 800bf22:	4798      	blx	r3
 800bf24:	2001      	movs	r0, #1
 800bf26:	bd08      	pop	{r3, pc}

0800bf28 <ArtNetParams::Load(char const*, unsigned int)>:
 800bf28:	6803      	ldr	r3, [r0, #0]
 800bf2a:	b1e3      	cbz	r3, 800bf66 <ArtNetParams::Load(char const*, unsigned int)+0x3e>
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf30:	460d      	mov	r5, r1
 800bf32:	4616      	mov	r6, r2
 800bf34:	4604      	mov	r4, r0
 800bf36:	6043      	str	r3, [r0, #4]
 800bf38:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800bf3c:	4602      	mov	r2, r0
 800bf3e:	490a      	ldr	r1, [pc, #40]	; (800bf68 <ArtNetParams::Load(char const*, unsigned int)+0x40>)
 800bf40:	4668      	mov	r0, sp
 800bf42:	f007 fa5f 	bl	8013404 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800bf46:	4632      	mov	r2, r6
 800bf48:	4629      	mov	r1, r5
 800bf4a:	4668      	mov	r0, sp
 800bf4c:	f007 fa5e 	bl	801340c <ReadConfigFile::Read(char const*, unsigned int)>
 800bf50:	4621      	mov	r1, r4
 800bf52:	f851 0b04 	ldr.w	r0, [r1], #4
 800bf56:	6803      	ldr	r3, [r0, #0]
 800bf58:	689b      	ldr	r3, [r3, #8]
 800bf5a:	4798      	blx	r3
 800bf5c:	4668      	mov	r0, sp
 800bf5e:	f007 fa54 	bl	801340a <ReadConfigFile::~ReadConfigFile()>
 800bf62:	b002      	add	sp, #8
 800bf64:	bd70      	pop	{r4, r5, r6, pc}
 800bf66:	4770      	bx	lr
 800bf68:	0800c34d 	stmdaeq	r0, {r0, r2, r3, r6, r8, r9, lr, pc}

0800bf6c <ArtNetParams::SetBool(unsigned char, unsigned int)>:
 800bf6c:	6843      	ldr	r3, [r0, #4]
 800bf6e:	b111      	cbz	r1, 800bf76 <ArtNetParams::SetBool(unsigned char, unsigned int)+0xa>
 800bf70:	4313      	orrs	r3, r2
 800bf72:	6043      	str	r3, [r0, #4]
 800bf74:	4770      	bx	lr
 800bf76:	ea23 0302 	bic.w	r3, r3, r2
 800bf7a:	e7fa      	b.n	800bf72 <ArtNetParams::SetBool(unsigned char, unsigned int)+0x6>

0800bf7c <ArtNetParams::callbackFunction(char const*)>:
 800bf7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf80:	460e      	mov	r6, r1
 800bf82:	b0a7      	sub	sp, #156	; 0x9c
 800bf84:	4604      	mov	r4, r0
 800bf86:	499d      	ldr	r1, [pc, #628]	; (800c1fc <ArtNetParams::callbackFunction(char const*)+0x280>)
 800bf88:	4630      	mov	r0, r6
 800bf8a:	f10d 020f 	add.w	r2, sp, #15
 800bf8e:	f007 fb75 	bl	801367c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800bf92:	b940      	cbnz	r0, 800bfa6 <ArtNetParams::callbackFunction(char const*)+0x2a>
 800bf94:	2220      	movs	r2, #32
 800bf96:	4620      	mov	r0, r4
 800bf98:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800bf9c:	b027      	add	sp, #156	; 0x9c
 800bf9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfa2:	f7ff bfe3 	b.w	800bf6c <ArtNetParams::SetBool(unsigned char, unsigned int)>
 800bfa6:	2708      	movs	r7, #8
 800bfa8:	4630      	mov	r0, r6
 800bfaa:	4995      	ldr	r1, [pc, #596]	; (800c200 <ArtNetParams::callbackFunction(char const*)+0x284>)
 800bfac:	ab05      	add	r3, sp, #20
 800bfae:	aa06      	add	r2, sp, #24
 800bfb0:	9705      	str	r7, [sp, #20]
 800bfb2:	f007 fa5f 	bl	8013474 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800bfb6:	bb40      	cbnz	r0, 800c00a <ArtNetParams::callbackFunction(char const*)+0x8e>
 800bfb8:	2204      	movs	r2, #4
 800bfba:	4992      	ldr	r1, [pc, #584]	; (800c204 <ArtNetParams::callbackFunction(char const*)+0x288>)
 800bfbc:	a806      	add	r0, sp, #24
 800bfbe:	f7ff feed 	bl	800bd9c <memcmp>
 800bfc2:	6865      	ldr	r5, [r4, #4]
 800bfc4:	b188      	cbz	r0, 800bfea <ArtNetParams::callbackFunction(char const*)+0x6e>
 800bfc6:	2203      	movs	r2, #3
 800bfc8:	498f      	ldr	r1, [pc, #572]	; (800c208 <ArtNetParams::callbackFunction(char const*)+0x28c>)
 800bfca:	a806      	add	r0, sp, #24
 800bfcc:	f7ff fee6 	bl	800bd9c <memcmp>
 800bfd0:	b198      	cbz	r0, 800bffa <ArtNetParams::callbackFunction(char const*)+0x7e>
 800bfd2:	2202      	movs	r2, #2
 800bfd4:	498d      	ldr	r1, [pc, #564]	; (800c20c <ArtNetParams::callbackFunction(char const*)+0x290>)
 800bfd6:	a806      	add	r0, sp, #24
 800bfd8:	f7ff fee0 	bl	800bd9c <memcmp>
 800bfdc:	b188      	cbz	r0, 800c002 <ArtNetParams::callbackFunction(char const*)+0x86>
 800bfde:	463a      	mov	r2, r7
 800bfe0:	498b      	ldr	r1, [pc, #556]	; (800c210 <ArtNetParams::callbackFunction(char const*)+0x294>)
 800bfe2:	a806      	add	r0, sp, #24
 800bfe4:	f7ff feda 	bl	800bd9c <memcmp>
 800bfe8:	b168      	cbz	r0, 800c006 <ArtNetParams::callbackFunction(char const*)+0x8a>
 800bfea:	2300      	movs	r3, #0
 800bfec:	f025 0510 	bic.w	r5, r5, #16
 800bff0:	6065      	str	r5, [r4, #4]
 800bff2:	72a3      	strb	r3, [r4, #10]
 800bff4:	b027      	add	sp, #156	; 0x9c
 800bff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bffa:	2301      	movs	r3, #1
 800bffc:	f045 0510 	orr.w	r5, r5, #16
 800c000:	e7f6      	b.n	800bff0 <ArtNetParams::callbackFunction(char const*)+0x74>
 800c002:	2302      	movs	r3, #2
 800c004:	e7fa      	b.n	800bffc <ArtNetParams::callbackFunction(char const*)+0x80>
 800c006:	2303      	movs	r3, #3
 800c008:	e7f8      	b.n	800bffc <ArtNetParams::callbackFunction(char const*)+0x80>
 800c00a:	2311      	movs	r3, #17
 800c00c:	4630      	mov	r0, r6
 800c00e:	9305      	str	r3, [sp, #20]
 800c010:	4980      	ldr	r1, [pc, #512]	; (800c214 <ArtNetParams::callbackFunction(char const*)+0x298>)
 800c012:	ab05      	add	r3, sp, #20
 800c014:	f104 0210 	add.w	r2, r4, #16
 800c018:	f007 fa2c 	bl	8013474 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800c01c:	b938      	cbnz	r0, 800c02e <ArtNetParams::callbackFunction(char const*)+0xb2>
 800c01e:	9b05      	ldr	r3, [sp, #20]
 800c020:	4423      	add	r3, r4
 800c022:	7418      	strb	r0, [r3, #16]
 800c024:	6863      	ldr	r3, [r4, #4]
 800c026:	f043 0302 	orr.w	r3, r3, #2
 800c02a:	6063      	str	r3, [r4, #4]
 800c02c:	e7e2      	b.n	800bff4 <ArtNetParams::callbackFunction(char const*)+0x78>
 800c02e:	233f      	movs	r3, #63	; 0x3f
 800c030:	4630      	mov	r0, r6
 800c032:	9305      	str	r3, [sp, #20]
 800c034:	4978      	ldr	r1, [pc, #480]	; (800c218 <ArtNetParams::callbackFunction(char const*)+0x29c>)
 800c036:	ab05      	add	r3, sp, #20
 800c038:	f104 0222 	add.w	r2, r4, #34	; 0x22
 800c03c:	f007 fa1a 	bl	8013474 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800c040:	b938      	cbnz	r0, 800c052 <ArtNetParams::callbackFunction(char const*)+0xd6>
 800c042:	9b05      	ldr	r3, [sp, #20]
 800c044:	4423      	add	r3, r4
 800c046:	f883 0022 	strb.w	r0, [r3, #34]	; 0x22
 800c04a:	6863      	ldr	r3, [r4, #4]
 800c04c:	f043 0301 	orr.w	r3, r3, #1
 800c050:	e7eb      	b.n	800c02a <ArtNetParams::callbackFunction(char const*)+0xae>
 800c052:	4630      	mov	r0, r6
 800c054:	4971      	ldr	r1, [pc, #452]	; (800c21c <ArtNetParams::callbackFunction(char const*)+0x2a0>)
 800c056:	f10d 020f 	add.w	r2, sp, #15
 800c05a:	f007 fb0f 	bl	801367c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800c05e:	b950      	cbnz	r0, 800c076 <ArtNetParams::callbackFunction(char const*)+0xfa>
 800c060:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800c064:	6863      	ldr	r3, [r4, #4]
 800c066:	7222      	strb	r2, [r4, #8]
 800c068:	b112      	cbz	r2, 800c070 <ArtNetParams::callbackFunction(char const*)+0xf4>
 800c06a:	f043 0304 	orr.w	r3, r3, #4
 800c06e:	e7dc      	b.n	800c02a <ArtNetParams::callbackFunction(char const*)+0xae>
 800c070:	f023 0304 	bic.w	r3, r3, #4
 800c074:	e7d9      	b.n	800c02a <ArtNetParams::callbackFunction(char const*)+0xae>
 800c076:	4630      	mov	r0, r6
 800c078:	4969      	ldr	r1, [pc, #420]	; (800c220 <ArtNetParams::callbackFunction(char const*)+0x2a4>)
 800c07a:	f10d 020f 	add.w	r2, sp, #15
 800c07e:	f007 fafd 	bl	801367c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800c082:	b950      	cbnz	r0, 800c09a <ArtNetParams::callbackFunction(char const*)+0x11e>
 800c084:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800c088:	6863      	ldr	r3, [r4, #4]
 800c08a:	7262      	strb	r2, [r4, #9]
 800c08c:	b112      	cbz	r2, 800c094 <ArtNetParams::callbackFunction(char const*)+0x118>
 800c08e:	f043 0308 	orr.w	r3, r3, #8
 800c092:	e7ca      	b.n	800c02a <ArtNetParams::callbackFunction(char const*)+0xae>
 800c094:	f023 0308 	bic.w	r3, r3, #8
 800c098:	e7c7      	b.n	800c02a <ArtNetParams::callbackFunction(char const*)+0xae>
 800c09a:	2500      	movs	r5, #0
 800c09c:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800c224 <ArtNetParams::callbackFunction(char const*)+0x2a8>
 800c0a0:	f8df 8184 	ldr.w	r8, [pc, #388]	; 800c228 <ArtNetParams::callbackFunction(char const*)+0x2ac>
 800c0a4:	f8df b184 	ldr.w	fp, [pc, #388]	; 800c22c <ArtNetParams::callbackFunction(char const*)+0x2b0>
 800c0a8:	4649      	mov	r1, r9
 800c0aa:	4630      	mov	r0, r6
 800c0ac:	f10d 020f 	add.w	r2, sp, #15
 800c0b0:	f007 fae4 	bl	801367c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800c0b4:	b9a8      	cbnz	r0, 800c0e2 <ArtNetParams::callbackFunction(char const*)+0x166>
 800c0b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c0ba:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800c0be:	6862      	ldr	r2, [r4, #4]
 800c0c0:	280f      	cmp	r0, #15
 800c0c2:	fa03 f305 	lsl.w	r3, r3, r5
 800c0c6:	eb04 0105 	add.w	r1, r4, r5
 800c0ca:	d803      	bhi.n	800c0d4 <ArtNetParams::callbackFunction(char const*)+0x158>
 800c0cc:	f881 006b 	strb.w	r0, [r1, #107]	; 0x6b
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	e7aa      	b.n	800c02a <ArtNetParams::callbackFunction(char const*)+0xae>
 800c0d4:	3501      	adds	r5, #1
 800c0d6:	ea22 0203 	bic.w	r2, r2, r3
 800c0da:	f881 506b 	strb.w	r5, [r1, #107]	; 0x6b
 800c0de:	6062      	str	r2, [r4, #4]
 800c0e0:	e788      	b.n	800bff4 <ArtNetParams::callbackFunction(char const*)+0x78>
 800c0e2:	2712      	movs	r7, #18
 800c0e4:	2303      	movs	r3, #3
 800c0e6:	436f      	muls	r7, r5
 800c0e8:	4951      	ldr	r1, [pc, #324]	; (800c230 <ArtNetParams::callbackFunction(char const*)+0x2b4>)
 800c0ea:	9305      	str	r3, [sp, #20]
 800c0ec:	4630      	mov	r0, r6
 800c0ee:	ab05      	add	r3, sp, #20
 800c0f0:	aa06      	add	r2, sp, #24
 800c0f2:	4439      	add	r1, r7
 800c0f4:	f007 f9be 	bl	8013474 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800c0f8:	bb00      	cbnz	r0, 800c13c <ArtNetParams::callbackFunction(char const*)+0x1c0>
 800c0fa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800c0fe:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800c102:	40aa      	lsls	r2, r5
 800c104:	f041 0120 	orr.w	r1, r1, #32
 800c108:	296c      	cmp	r1, #108	; 0x6c
 800c10a:	6863      	ldr	r3, [r4, #4]
 800c10c:	4425      	add	r5, r4
 800c10e:	d10f      	bne.n	800c130 <ArtNetParams::callbackFunction(char const*)+0x1b4>
 800c110:	f89d 1019 	ldrb.w	r1, [sp, #25]
 800c114:	f041 0120 	orr.w	r1, r1, #32
 800c118:	2974      	cmp	r1, #116	; 0x74
 800c11a:	d109      	bne.n	800c130 <ArtNetParams::callbackFunction(char const*)+0x1b4>
 800c11c:	f89d 101a 	ldrb.w	r1, [sp, #26]
 800c120:	f041 0120 	orr.w	r1, r1, #32
 800c124:	2970      	cmp	r1, #112	; 0x70
 800c126:	d103      	bne.n	800c130 <ArtNetParams::callbackFunction(char const*)+0x1b4>
 800c128:	2101      	movs	r1, #1
 800c12a:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800c12e:	e7cf      	b.n	800c0d0 <ArtNetParams::callbackFunction(char const*)+0x154>
 800c130:	2100      	movs	r1, #0
 800c132:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800c136:	ea23 0302 	bic.w	r3, r3, r2
 800c13a:	e776      	b.n	800c02a <ArtNetParams::callbackFunction(char const*)+0xae>
 800c13c:	f04f 0a04 	mov.w	sl, #4
 800c140:	493c      	ldr	r1, [pc, #240]	; (800c234 <ArtNetParams::callbackFunction(char const*)+0x2b8>)
 800c142:	4630      	mov	r0, r6
 800c144:	ab05      	add	r3, sp, #20
 800c146:	aa06      	add	r2, sp, #24
 800c148:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800c14c:	f8cd a014 	str.w	sl, [sp, #20]
 800c150:	f007 f990 	bl	8013474 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800c154:	b9a0      	cbnz	r0, 800c180 <ArtNetParams::callbackFunction(char const*)+0x204>
 800c156:	4652      	mov	r2, sl
 800c158:	9001      	str	r0, [sp, #4]
 800c15a:	4937      	ldr	r1, [pc, #220]	; (800c238 <ArtNetParams::callbackFunction(char const*)+0x2bc>)
 800c15c:	a806      	add	r0, sp, #24
 800c15e:	f7ff fe1d 	bl	800bd9c <memcmp>
 800c162:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800c166:	9b01      	ldr	r3, [sp, #4]
 800c168:	40aa      	lsls	r2, r5
 800c16a:	4425      	add	r5, r4
 800c16c:	b920      	cbnz	r0, 800c178 <ArtNetParams::callbackFunction(char const*)+0x1fc>
 800c16e:	2301      	movs	r3, #1
 800c170:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
 800c174:	6863      	ldr	r3, [r4, #4]
 800c176:	e7ab      	b.n	800c0d0 <ArtNetParams::callbackFunction(char const*)+0x154>
 800c178:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
 800c17c:	6863      	ldr	r3, [r4, #4]
 800c17e:	e7da      	b.n	800c136 <ArtNetParams::callbackFunction(char const*)+0x1ba>
 800c180:	2307      	movs	r3, #7
 800c182:	4630      	mov	r0, r6
 800c184:	9305      	str	r3, [sp, #20]
 800c186:	aa06      	add	r2, sp, #24
 800c188:	ab05      	add	r3, sp, #20
 800c18a:	eb0b 0107 	add.w	r1, fp, r7
 800c18e:	f007 f971 	bl	8013474 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800c192:	2800      	cmp	r0, #0
 800c194:	d17d      	bne.n	800c292 <ArtNetParams::callbackFunction(char const*)+0x316>
 800c196:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800c19a:	f043 0320 	orr.w	r3, r3, #32
 800c19e:	2b69      	cmp	r3, #105	; 0x69
 800c1a0:	d14c      	bne.n	800c23c <ArtNetParams::callbackFunction(char const*)+0x2c0>
 800c1a2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800c1a6:	f043 0320 	orr.w	r3, r3, #32
 800c1aa:	2b6e      	cmp	r3, #110	; 0x6e
 800c1ac:	d16f      	bne.n	800c28e <ArtNetParams::callbackFunction(char const*)+0x312>
 800c1ae:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800c1b2:	f043 0320 	orr.w	r3, r3, #32
 800c1b6:	2b70      	cmp	r3, #112	; 0x70
 800c1b8:	d169      	bne.n	800c28e <ArtNetParams::callbackFunction(char const*)+0x312>
 800c1ba:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800c1be:	f043 0320 	orr.w	r3, r3, #32
 800c1c2:	2b75      	cmp	r3, #117	; 0x75
 800c1c4:	d163      	bne.n	800c28e <ArtNetParams::callbackFunction(char const*)+0x312>
 800c1c6:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800c1ca:	f043 0320 	orr.w	r3, r3, #32
 800c1ce:	3b74      	subs	r3, #116	; 0x74
 800c1d0:	bf18      	it	ne
 800c1d2:	2301      	movne	r3, #1
 800c1d4:	2103      	movs	r1, #3
 800c1d6:	f8b4 2079 	ldrh.w	r2, [r4, #121]	; 0x79
 800c1da:	006d      	lsls	r5, r5, #1
 800c1dc:	40a9      	lsls	r1, r5
 800c1de:	ea22 0201 	bic.w	r2, r2, r1
 800c1e2:	b143      	cbz	r3, 800c1f6 <ArtNetParams::callbackFunction(char const*)+0x27a>
 800c1e4:	2b02      	cmp	r3, #2
 800c1e6:	bf15      	itete	ne
 800c1e8:	2301      	movne	r3, #1
 800c1ea:	40ab      	lsleq	r3, r5
 800c1ec:	fa03 f505 	lslne.w	r5, r3, r5
 800c1f0:	431a      	orreq	r2, r3
 800c1f2:	bf18      	it	ne
 800c1f4:	432a      	orrne	r2, r5
 800c1f6:	f8a4 2079 	strh.w	r2, [r4, #121]	; 0x79
 800c1fa:	e6fb      	b.n	800bff4 <ArtNetParams::callbackFunction(char const*)+0x78>
 800c1fc:	08016a04 	stmdaeq	r1, {r2, r9, fp, sp, lr}
 800c200:	08017f8d 	stmdaeq	r1, {r0, r2, r3, r7, r8, r9, sl, fp, ip, sp, lr}
 800c204:	080169a9 	stmdaeq	r1, {r0, r3, r5, r7, r8, fp, sp, lr}
 800c208:	080169ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, fp, sp, lr}
 800c20c:	080169b2 	stmdaeq	r1, {r1, r4, r5, r7, r8, fp, sp, lr}
 800c210:	080169b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, fp, sp, lr}
 800c214:	08016a67 	stmdaeq	r1, {r0, r1, r2, r5, r6, r9, fp, sp, lr}
 800c218:	08016a5d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r9, fp, sp, lr}
 800c21c:	08016b1a 	stmdaeq	r1, {r1, r3, r4, r8, r9, fp, sp, lr}
 800c220:	08016b1e 	stmdaeq	r1, {r1, r2, r3, r4, r8, r9, fp, sp, lr}
 800c224:	08017ec9 	stmdaeq	r1, {r0, r3, r6, r7, r9, sl, fp, ip, sp, lr}
 800c228:	08016a72 	stmdaeq	r1, {r1, r4, r5, r6, r9, fp, sp, lr}
 800c22c:	08017f9f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r8, r9, sl, fp, ip, sp, lr}
 800c230:	08017f1d 	stmdaeq	r1, {r0, r2, r3, r4, r8, r9, sl, fp, ip, sp, lr}
 800c234:	08016a1d 	stmdaeq	r1, {r0, r2, r3, r4, r9, fp, sp, lr}
 800c238:	080169be 	stmdaeq	r1, {r1, r2, r3, r4, r5, r7, r8, fp, sp, lr}
 800c23c:	2b64      	cmp	r3, #100	; 0x64
 800c23e:	d126      	bne.n	800c28e <ArtNetParams::callbackFunction(char const*)+0x312>
 800c240:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800c244:	f043 0320 	orr.w	r3, r3, #32
 800c248:	2b69      	cmp	r3, #105	; 0x69
 800c24a:	d120      	bne.n	800c28e <ArtNetParams::callbackFunction(char const*)+0x312>
 800c24c:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800c250:	f043 0320 	orr.w	r3, r3, #32
 800c254:	2b73      	cmp	r3, #115	; 0x73
 800c256:	d11a      	bne.n	800c28e <ArtNetParams::callbackFunction(char const*)+0x312>
 800c258:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800c25c:	f043 0320 	orr.w	r3, r3, #32
 800c260:	2b61      	cmp	r3, #97	; 0x61
 800c262:	d114      	bne.n	800c28e <ArtNetParams::callbackFunction(char const*)+0x312>
 800c264:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800c268:	f043 0320 	orr.w	r3, r3, #32
 800c26c:	2b62      	cmp	r3, #98	; 0x62
 800c26e:	d10e      	bne.n	800c28e <ArtNetParams::callbackFunction(char const*)+0x312>
 800c270:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800c274:	f043 0320 	orr.w	r3, r3, #32
 800c278:	2b6c      	cmp	r3, #108	; 0x6c
 800c27a:	d108      	bne.n	800c28e <ArtNetParams::callbackFunction(char const*)+0x312>
 800c27c:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800c280:	f043 0320 	orr.w	r3, r3, #32
 800c284:	2b65      	cmp	r3, #101	; 0x65
 800c286:	bf14      	ite	ne
 800c288:	2301      	movne	r3, #1
 800c28a:	2302      	moveq	r3, #2
 800c28c:	e7a2      	b.n	800c1d4 <ArtNetParams::callbackFunction(char const*)+0x258>
 800c28e:	2301      	movs	r3, #1
 800c290:	e7a0      	b.n	800c1d4 <ArtNetParams::callbackFunction(char const*)+0x258>
 800c292:	2118      	movs	r1, #24
 800c294:	4b2a      	ldr	r3, [pc, #168]	; (800c340 <ArtNetParams::callbackFunction(char const*)+0x3c4>)
 800c296:	4630      	mov	r0, r6
 800c298:	fb01 3105 	mla	r1, r1, r5, r3
 800c29c:	aa04      	add	r2, sp, #16
 800c29e:	f007 f965 	bl	801356c <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 800c2a2:	b998      	cbnz	r0, 800c2cc <ArtNetParams::callbackFunction(char const*)+0x350>
 800c2a4:	9904      	ldr	r1, [sp, #16]
 800c2a6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c2aa:	f8c3 107b 	str.w	r1, [r3, #123]	; 0x7b
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	40ab      	lsls	r3, r5
 800c2b2:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	b119      	cbz	r1, 800c2c2 <ArtNetParams::callbackFunction(char const*)+0x346>
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 800c2c0:	e698      	b.n	800bff4 <ArtNetParams::callbackFunction(char const*)+0x78>
 800c2c2:	ea22 0203 	bic.w	r2, r2, r3
 800c2c6:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
 800c2ca:	e693      	b.n	800bff4 <ArtNetParams::callbackFunction(char const*)+0x78>
 800c2cc:	4641      	mov	r1, r8
 800c2ce:	4630      	mov	r0, r6
 800c2d0:	f10d 020f 	add.w	r2, sp, #15
 800c2d4:	f007 f9d2 	bl	801367c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800c2d8:	b998      	cbnz	r0, 800c302 <ArtNetParams::callbackFunction(char const*)+0x386>
 800c2da:	2201      	movs	r2, #1
 800c2dc:	f105 0308 	add.w	r3, r5, #8
 800c2e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c2e4:	40aa      	lsls	r2, r5
 800c2e6:	4313      	orrs	r3, r2
 800c2e8:	89a2      	ldrh	r2, [r4, #12]
 800c2ea:	b29b      	uxth	r3, r3
 800c2ec:	ea22 0103 	bic.w	r1, r2, r3
 800c2f0:	81a1      	strh	r1, [r4, #12]
 800c2f2:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800c2f6:	2900      	cmp	r1, #0
 800c2f8:	f43f ae7c 	beq.w	800bff4 <ArtNetParams::callbackFunction(char const*)+0x78>
 800c2fc:	431a      	orrs	r2, r3
 800c2fe:	81a2      	strh	r2, [r4, #12]
 800c300:	e678      	b.n	800bff4 <ArtNetParams::callbackFunction(char const*)+0x78>
 800c302:	3501      	adds	r5, #1
 800c304:	2d04      	cmp	r5, #4
 800c306:	f109 0910 	add.w	r9, r9, #16
 800c30a:	f108 0812 	add.w	r8, r8, #18
 800c30e:	f47f aecb 	bne.w	800c0a8 <ArtNetParams::callbackFunction(char const*)+0x12c>
 800c312:	4630      	mov	r0, r6
 800c314:	490b      	ldr	r1, [pc, #44]	; (800c344 <ArtNetParams::callbackFunction(char const*)+0x3c8>)
 800c316:	f10d 020f 	add.w	r2, sp, #15
 800c31a:	f007 f9af 	bl	801367c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800c31e:	b910      	cbnz	r0, 800c326 <ArtNetParams::callbackFunction(char const*)+0x3aa>
 800c320:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c324:	e637      	b.n	800bf96 <ArtNetParams::callbackFunction(char const*)+0x1a>
 800c326:	4630      	mov	r0, r6
 800c328:	4907      	ldr	r1, [pc, #28]	; (800c348 <ArtNetParams::callbackFunction(char const*)+0x3cc>)
 800c32a:	f10d 020f 	add.w	r2, sp, #15
 800c32e:	f007 f9a5 	bl	801367c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800c332:	2800      	cmp	r0, #0
 800c334:	f47f ae5e 	bne.w	800bff4 <ArtNetParams::callbackFunction(char const*)+0x78>
 800c338:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c33c:	e62b      	b.n	800bf96 <ArtNetParams::callbackFunction(char const*)+0x1a>
 800c33e:	bf00      	nop
 800c340:	08016aba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r9, fp, sp, lr}
 800c344:	08016a0f 	stmdaeq	r1, {r0, r1, r2, r3, r9, fp, sp, lr}
 800c348:	08017f77 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}

0800c34c <ArtNetParams::staticCallbackFunction(void*, char const*)>:
 800c34c:	f7ff be16 	b.w	800bf7c <ArtNetParams::callbackFunction(char const*)>

0800c350 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>:
 800c350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c354:	4604      	mov	r4, r0
 800c356:	4615      	mov	r5, r2
 800c358:	461e      	mov	r6, r3
 800c35a:	b085      	sub	sp, #20
 800c35c:	3004      	adds	r0, #4
 800c35e:	2900      	cmp	r1, #0
 800c360:	f000 80a2 	beq.w	800c4a8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x158>
 800c364:	2287      	movs	r2, #135	; 0x87
 800c366:	f007 fe90 	bl	801408a <memmove>
 800c36a:	4633      	mov	r3, r6
 800c36c:	462a      	mov	r2, r5
 800c36e:	4995      	ldr	r1, [pc, #596]	; (800c5c4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x274>)
 800c370:	a801      	add	r0, sp, #4
 800c372:	f006 ffa7 	bl	80132c4 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800c376:	6863      	ldr	r3, [r4, #4]
 800c378:	f104 0622 	add.w	r6, r4, #34	; 0x22
 800c37c:	f013 0501 	ands.w	r5, r3, #1
 800c380:	d108      	bne.n	800c394 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x44>
 800c382:	4b91      	ldr	r3, [pc, #580]	; (800c5c8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x278>)
 800c384:	223f      	movs	r2, #63	; 0x3f
 800c386:	6819      	ldr	r1, [r3, #0]
 800c388:	4630      	mov	r0, r6
 800c38a:	314a      	adds	r1, #74	; 0x4a
 800c38c:	f7ff fd92 	bl	800beb4 <strncpy.isra.0>
 800c390:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 800c394:	6863      	ldr	r3, [r4, #4]
 800c396:	4632      	mov	r2, r6
 800c398:	f003 0301 	and.w	r3, r3, #1
 800c39c:	498b      	ldr	r1, [pc, #556]	; (800c5cc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x27c>)
 800c39e:	a801      	add	r0, sp, #4
 800c3a0:	f7ff fd38 	bl	800be14 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800c3a4:	6863      	ldr	r3, [r4, #4]
 800c3a6:	f104 0610 	add.w	r6, r4, #16
 800c3aa:	f013 0502 	ands.w	r5, r3, #2
 800c3ae:	d108      	bne.n	800c3c2 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x72>
 800c3b0:	4b85      	ldr	r3, [pc, #532]	; (800c5c8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x278>)
 800c3b2:	2211      	movs	r2, #17
 800c3b4:	6819      	ldr	r1, [r3, #0]
 800c3b6:	4630      	mov	r0, r6
 800c3b8:	3138      	adds	r1, #56	; 0x38
 800c3ba:	f7ff fd7b 	bl	800beb4 <strncpy.isra.0>
 800c3be:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 800c3c2:	6863      	ldr	r3, [r4, #4]
 800c3c4:	4632      	mov	r2, r6
 800c3c6:	4982      	ldr	r1, [pc, #520]	; (800c5d0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x280>)
 800c3c8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c3cc:	a801      	add	r0, sp, #4
 800c3ce:	f7ff fd21 	bl	800be14 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800c3d2:	6863      	ldr	r3, [r4, #4]
 800c3d4:	7a22      	ldrb	r2, [r4, #8]
 800c3d6:	497f      	ldr	r1, [pc, #508]	; (800c5d4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x284>)
 800c3d8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c3dc:	a801      	add	r0, sp, #4
 800c3de:	f7ff fcf1 	bl	800bdc4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800c3e2:	6863      	ldr	r3, [r4, #4]
 800c3e4:	7a62      	ldrb	r2, [r4, #9]
 800c3e6:	497c      	ldr	r1, [pc, #496]	; (800c5d8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x288>)
 800c3e8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c3ec:	a801      	add	r0, sp, #4
 800c3ee:	f7ff fce9 	bl	800bdc4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800c3f2:	6862      	ldr	r2, [r4, #4]
 800c3f4:	4979      	ldr	r1, [pc, #484]	; (800c5dc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x28c>)
 800c3f6:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800c3fa:	a801      	add	r0, sp, #4
 800c3fc:	f7ff fd32 	bl	800be64 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800c400:	2500      	movs	r5, #0
 800c402:	4f77      	ldr	r7, [pc, #476]	; (800c5e0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x290>)
 800c404:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 800c5e4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x294>
 800c408:	f104 086a 	add.w	r8, r4, #106	; 0x6a
 800c40c:	f8d9 2000 	ldr.w	r2, [r9]
 800c410:	6863      	ldr	r3, [r4, #4]
 800c412:	42aa      	cmp	r2, r5
 800c414:	d84f      	bhi.n	800c4b6 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x166>
 800c416:	7aa1      	ldrb	r1, [r4, #10]
 800c418:	4a73      	ldr	r2, [pc, #460]	; (800c5e8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 800c41a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c41e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c422:	a801      	add	r0, sp, #4
 800c424:	4971      	ldr	r1, [pc, #452]	; (800c5ec <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x29c>)
 800c426:	f7ff fcf5 	bl	800be14 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800c42a:	4971      	ldr	r1, [pc, #452]	; (800c5f0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 800c42c:	a801      	add	r0, sp, #4
 800c42e:	f006 ffcf 	bl	80133d0 <PropertiesBuilder::AddComment(char const*)>
 800c432:	2500      	movs	r5, #0
 800c434:	f44f 0b00 	mov.w	fp, #8388608	; 0x800000
 800c438:	4e6e      	ldr	r6, [pc, #440]	; (800c5f4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2a4>)
 800c43a:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c5f8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2a8>
 800c43e:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 800c5fc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2ac>
 800c442:	f104 0774 	add.w	r7, r4, #116	; 0x74
 800c446:	f8d9 3000 	ldr.w	r3, [r9]
 800c44a:	42ab      	cmp	r3, r5
 800c44c:	6863      	ldr	r3, [r4, #4]
 800c44e:	f200 80a5 	bhi.w	800c59c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x24c>
 800c452:	f3c3 62c0 	ubfx	r2, r3, #27, #1
 800c456:	496a      	ldr	r1, [pc, #424]	; (800c600 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b0>)
 800c458:	a801      	add	r0, sp, #4
 800c45a:	f7ff fd03 	bl	800be64 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800c45e:	4969      	ldr	r1, [pc, #420]	; (800c604 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b4>)
 800c460:	a801      	add	r0, sp, #4
 800c462:	f006 ffb5 	bl	80133d0 <PropertiesBuilder::AddComment(char const*)>
 800c466:	6862      	ldr	r2, [r4, #4]
 800c468:	4967      	ldr	r1, [pc, #412]	; (800c608 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b8>)
 800c46a:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800c46e:	a801      	add	r0, sp, #4
 800c470:	f7ff fcf8 	bl	800be64 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800c474:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800c478:	b17b      	cbz	r3, 800c49a <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x14a>
 800c47a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800c47e:	9b01      	ldr	r3, [sp, #4]
 800c480:	4413      	add	r3, r2
 800c482:	227d      	movs	r2, #125	; 0x7d
 800c484:	f803 2c01 	strb.w	r2, [r3, #-1]
 800c488:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800c48c:	9901      	ldr	r1, [sp, #4]
 800c48e:	54ca      	strb	r2, [r1, r3]
 800c490:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800c494:	3301      	adds	r3, #1
 800c496:	f8ad 300a 	strh.w	r3, [sp, #10]
 800c49a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800c49e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c4a0:	601a      	str	r2, [r3, #0]
 800c4a2:	b005      	add	sp, #20
 800c4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4a8:	6823      	ldr	r3, [r4, #0]
 800c4aa:	4601      	mov	r1, r0
 800c4ac:	681a      	ldr	r2, [r3, #0]
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	68d2      	ldr	r2, [r2, #12]
 800c4b2:	4790      	blx	r2
 800c4b4:	e759      	b.n	800c36a <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x1a>
 800c4b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c4ba:	2612      	movs	r6, #18
 800c4bc:	40aa      	lsls	r2, r5
 800c4be:	4953      	ldr	r1, [pc, #332]	; (800c60c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2bc>)
 800c4c0:	439a      	bics	r2, r3
 800c4c2:	bf0c      	ite	eq
 800c4c4:	2301      	moveq	r3, #1
 800c4c6:	2300      	movne	r3, #0
 800c4c8:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 800c4cc:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800c4d0:	a801      	add	r0, sp, #4
 800c4d2:	f7ff fc77 	bl	800bdc4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800c4d6:	436e      	muls	r6, r5
 800c4d8:	f8b4 3079 	ldrh.w	r3, [r4, #121]	; 0x79
 800c4dc:	006a      	lsls	r2, r5, #1
 800c4de:	494c      	ldr	r1, [pc, #304]	; (800c610 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c0>)
 800c4e0:	40d3      	lsrs	r3, r2
 800c4e2:	f013 0303 	ands.w	r3, r3, #3
 800c4e6:	ea4f 1b05 	mov.w	fp, r5, lsl #4
 800c4ea:	4431      	add	r1, r6
 800c4ec:	d054      	beq.n	800c598 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x248>
 800c4ee:	4a49      	ldr	r2, [pc, #292]	; (800c614 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c4>)
 800c4f0:	4849      	ldr	r0, [pc, #292]	; (800c618 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c8>)
 800c4f2:	2b02      	cmp	r3, #2
 800c4f4:	bf08      	it	eq
 800c4f6:	4602      	moveq	r2, r0
 800c4f8:	3b01      	subs	r3, #1
 800c4fa:	bf18      	it	ne
 800c4fc:	2301      	movne	r3, #1
 800c4fe:	a801      	add	r0, sp, #4
 800c500:	f7ff fc88 	bl	800be14 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800c504:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c508:	f04f 0a01 	mov.w	sl, #1
 800c50c:	6861      	ldr	r1, [r4, #4]
 800c50e:	40ab      	lsls	r3, r5
 800c510:	438b      	bics	r3, r1
 800c512:	f898 2005 	ldrb.w	r2, [r8, #5]
 800c516:	4841      	ldr	r0, [pc, #260]	; (800c61c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2cc>)
 800c518:	4941      	ldr	r1, [pc, #260]	; (800c620 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d0>)
 800c51a:	bf0c      	ite	eq
 800c51c:	2301      	moveq	r3, #1
 800c51e:	2300      	movne	r3, #0
 800c520:	2a00      	cmp	r2, #0
 800c522:	bf0c      	ite	eq
 800c524:	4602      	moveq	r2, r0
 800c526:	460a      	movne	r2, r1
 800c528:	493e      	ldr	r1, [pc, #248]	; (800c624 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d4>)
 800c52a:	a801      	add	r0, sp, #4
 800c52c:	4431      	add	r1, r6
 800c52e:	f7ff fc71 	bl	800be14 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800c532:	f105 0208 	add.w	r2, r5, #8
 800c536:	89a1      	ldrh	r1, [r4, #12]
 800c538:	fa0a f202 	lsl.w	r2, sl, r2
 800c53c:	b292      	uxth	r2, r2
 800c53e:	438a      	bics	r2, r1
 800c540:	4939      	ldr	r1, [pc, #228]	; (800c628 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d8>)
 800c542:	bf0c      	ite	eq
 800c544:	4652      	moveq	r2, sl
 800c546:	2200      	movne	r2, #0
 800c548:	4431      	add	r1, r6
 800c54a:	a801      	add	r0, sp, #4
 800c54c:	f7ff fc8a 	bl	800be64 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800c550:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800c554:	fa0a f305 	lsl.w	r3, sl, r5
 800c558:	b29b      	uxth	r3, r3
 800c55a:	401a      	ands	r2, r3
 800c55c:	4293      	cmp	r3, r2
 800c55e:	bf0c      	ite	eq
 800c560:	4653      	moveq	r3, sl
 800c562:	2300      	movne	r3, #0
 800c564:	f105 021c 	add.w	r2, r5, #28
 800c568:	d00b      	beq.n	800c582 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x232>
 800c56a:	4917      	ldr	r1, [pc, #92]	; (800c5c8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x278>)
 800c56c:	2d04      	cmp	r5, #4
 800c56e:	6809      	ldr	r1, [r1, #0]
 800c570:	bf0e      	itee	eq
 800c572:	2100      	moveq	r1, #0
 800c574:	4459      	addne	r1, fp
 800c576:	f8d1 1aa8 	ldrne.w	r1, [r1, #2728]	; 0xaa8
 800c57a:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 800c57e:	f8c0 100b 	str.w	r1, [r0, #11]
 800c582:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c586:	4639      	mov	r1, r7
 800c588:	f8d2 200b 	ldr.w	r2, [r2, #11]
 800c58c:	a801      	add	r0, sp, #4
 800c58e:	f006 fedb 	bl	8013348 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 800c592:	3501      	adds	r5, #1
 800c594:	3718      	adds	r7, #24
 800c596:	e739      	b.n	800c40c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0xbc>
 800c598:	4a24      	ldr	r2, [pc, #144]	; (800c62c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 800c59a:	e7ad      	b.n	800c4f8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x1a8>
 800c59c:	fa0b f105 	lsl.w	r1, fp, r5
 800c5a0:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800c5a4:	4399      	bics	r1, r3
 800c5a6:	bf0c      	ite	eq
 800c5a8:	2301      	moveq	r3, #1
 800c5aa:	2300      	movne	r3, #0
 800c5ac:	4631      	mov	r1, r6
 800c5ae:	2a00      	cmp	r2, #0
 800c5b0:	bf0c      	ite	eq
 800c5b2:	4642      	moveq	r2, r8
 800c5b4:	4652      	movne	r2, sl
 800c5b6:	a801      	add	r0, sp, #4
 800c5b8:	f7ff fc2c 	bl	800be14 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800c5bc:	3501      	adds	r5, #1
 800c5be:	3610      	adds	r6, #16
 800c5c0:	e741      	b.n	800c446 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0xf6>
 800c5c2:	bf00      	nop
 800c5c4:	08016b25 	stmdaeq	r1, {r0, r2, r5, r8, r9, fp, sp, lr}
 800c5c8:	200018c4 	andcs	r1, r0, r4, asr #17
 800c5cc:	08016a5d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r9, fp, sp, lr}
 800c5d0:	08016a67 	stmdaeq	r1, {r0, r1, r2, r5, r6, r9, fp, sp, lr}
 800c5d4:	08016b1a 	stmdaeq	r1, {r1, r3, r4, r8, r9, fp, sp, lr}
 800c5d8:	08016b1e 	stmdaeq	r1, {r1, r2, r3, r4, r8, r9, fp, sp, lr}
 800c5dc:	08016a04 	stmdaeq	r1, {r2, r9, fp, sp, lr}
 800c5e0:	08016aba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r9, fp, sp, lr}
 800c5e4:	200018d4 	ldrdcs	r1, [r0], -r4
 800c5e8:	080169f4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r8, fp, sp, lr}
 800c5ec:	08017f8d 	stmdaeq	r1, {r0, r2, r3, r7, r8, r9, sl, fp, ip, sp, lr}
 800c5f0:	080169e7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r8, fp, sp, lr}
 800c5f4:	08016a1d 	stmdaeq	r1, {r0, r2, r3, r4, r9, fp, sp, lr}
 800c5f8:	080169e0 	stmdaeq	r1, {r5, r6, r7, r8, fp, sp, lr}
 800c5fc:	080169be 	stmdaeq	r1, {r1, r2, r3, r4, r5, r7, r8, fp, sp, lr}
 800c600:	08016a0f 	stmdaeq	r1, {r0, r1, r2, r3, r9, fp, sp, lr}
 800c604:	08016451 	stmdaeq	r1, {r0, r4, r6, sl, sp, lr}
 800c608:	08017f77 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}
 800c60c:	08017ec9 	stmdaeq	r1, {r0, r3, r6, r7, r9, sl, fp, ip, sp, lr}
 800c610:	08017f9f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r8, r9, sl, fp, ip, sp, lr}
 800c614:	080169c9 	stmdaeq	r1, {r0, r3, r6, r7, r8, fp, sp, lr}
 800c618:	080169d0 	stmdaeq	r1, {r4, r6, r7, r8, fp, sp, lr}
 800c61c:	080169dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, fp, sp, lr}
 800c620:	080169d8 	stmdaeq	r1, {r3, r4, r6, r7, r8, fp, sp, lr}
 800c624:	08017f1d 	stmdaeq	r1, {r0, r2, r3, r4, r8, r9, sl, fp, ip, sp, lr}
 800c628:	08016a72 	stmdaeq	r1, {r1, r4, r5, r6, r9, fp, sp, lr}
 800c62c:	080169c3 	stmdaeq	r1, {r0, r1, r6, r7, r8, fp, sp, lr}

0800c630 <ArtNetParams::Save(char*, unsigned int, unsigned int&)>:
 800c630:	b513      	push	{r0, r1, r4, lr}
 800c632:	6804      	ldr	r4, [r0, #0]
 800c634:	b914      	cbnz	r4, 800c63c <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800c636:	601c      	str	r4, [r3, #0]
 800c638:	b002      	add	sp, #8
 800c63a:	bd10      	pop	{r4, pc}
 800c63c:	9300      	str	r3, [sp, #0]
 800c63e:	4613      	mov	r3, r2
 800c640:	460a      	mov	r2, r1
 800c642:	2100      	movs	r1, #0
 800c644:	f7ff fe84 	bl	800c350 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>
 800c648:	e7f6      	b.n	800c638 <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0x8>
	...

0800c64c <ArtNetParams::Set(unsigned int)>:
 800c64c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c650:	1e4b      	subs	r3, r1, #1
 800c652:	2b02      	cmp	r3, #2
 800c654:	4604      	mov	r4, r0
 800c656:	460f      	mov	r7, r1
 800c658:	d807      	bhi.n	800c66a <ArtNetParams::Set(unsigned int)+0x1e>
 800c65a:	4a44      	ldr	r2, [pc, #272]	; (800c76c <ArtNetParams::Set(unsigned int)+0x120>)
 800c65c:	f1c1 0304 	rsb	r3, r1, #4
 800c660:	6811      	ldr	r1, [r2, #0]
 800c662:	428b      	cmp	r3, r1
 800c664:	bf94      	ite	ls
 800c666:	6013      	strls	r3, [r2, #0]
 800c668:	6011      	strhi	r1, [r2, #0]
 800c66a:	6863      	ldr	r3, [r4, #4]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d07b      	beq.n	800c768 <ArtNetParams::Set(unsigned int)+0x11c>
 800c670:	4a3f      	ldr	r2, [pc, #252]	; (800c770 <ArtNetParams::Set(unsigned int)+0x124>)
 800c672:	079b      	lsls	r3, r3, #30
 800c674:	6815      	ldr	r5, [r2, #0]
 800c676:	d504      	bpl.n	800c682 <ArtNetParams::Set(unsigned int)+0x36>
 800c678:	4628      	mov	r0, r5
 800c67a:	f104 0110 	add.w	r1, r4, #16
 800c67e:	f7fd feab 	bl	800a3d8 <ArtNetNode::SetShortName(char const*)>
 800c682:	6863      	ldr	r3, [r4, #4]
 800c684:	07de      	lsls	r6, r3, #31
 800c686:	d504      	bpl.n	800c692 <ArtNetParams::Set(unsigned int)+0x46>
 800c688:	4628      	mov	r0, r5
 800c68a:	f104 0122 	add.w	r1, r4, #34	; 0x22
 800c68e:	f7fd fec4 	bl	800a41a <ArtNetNode::SetLongName(char const*)>
 800c692:	6863      	ldr	r3, [r4, #4]
 800c694:	0758      	lsls	r0, r3, #29
 800c696:	d504      	bpl.n	800c6a2 <ArtNetParams::Set(unsigned int)+0x56>
 800c698:	2200      	movs	r2, #0
 800c69a:	4628      	mov	r0, r5
 800c69c:	7a21      	ldrb	r1, [r4, #8]
 800c69e:	f7fe fa05 	bl	800aaac <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800c6a2:	6863      	ldr	r3, [r4, #4]
 800c6a4:	0719      	lsls	r1, r3, #28
 800c6a6:	d504      	bpl.n	800c6b2 <ArtNetParams::Set(unsigned int)+0x66>
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	4628      	mov	r0, r5
 800c6ac:	7a61      	ldrb	r1, [r4, #9]
 800c6ae:	f7fe f9cb 	bl	800aa48 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800c6b2:	2600      	movs	r6, #0
 800c6b4:	f44f 2b80 	mov.w	fp, #262144	; 0x40000
 800c6b8:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800c76c <ArtNetParams::Set(unsigned int)+0x120>
 800c6bc:	f104 0870 	add.w	r8, r4, #112	; 0x70
 800c6c0:	e03d      	b.n	800c73e <ArtNetParams::Set(unsigned int)+0xf2>
 800c6c2:	eb06 0a07 	add.w	sl, r6, r7
 800c6c6:	f1ba 0f03 	cmp.w	sl, #3
 800c6ca:	d83c      	bhi.n	800c746 <ArtNetParams::Set(unsigned int)+0xfa>
 800c6cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c6d0:	fa03 f206 	lsl.w	r2, r3, r6
 800c6d4:	6863      	ldr	r3, [r4, #4]
 800c6d6:	439a      	bics	r2, r3
 800c6d8:	d105      	bne.n	800c6e6 <ArtNetParams::Set(unsigned int)+0x9a>
 800c6da:	4651      	mov	r1, sl
 800c6dc:	4628      	mov	r0, r5
 800c6de:	f898 2005 	ldrb.w	r2, [r8, #5]
 800c6e2:	f7fe fa15 	bl	800ab10 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 800c6e6:	6863      	ldr	r3, [r4, #4]
 800c6e8:	fa0b f206 	lsl.w	r2, fp, r6
 800c6ec:	439a      	bics	r2, r3
 800c6ee:	d105      	bne.n	800c6fc <ArtNetParams::Set(unsigned int)+0xb0>
 800c6f0:	4651      	mov	r1, sl
 800c6f2:	4628      	mov	r0, r5
 800c6f4:	f898 2000 	ldrb.w	r2, [r8]
 800c6f8:	f7fe fa31 	bl	800ab5e <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800c702:	40b3      	lsls	r3, r6
 800c704:	b29b      	uxth	r3, r3
 800c706:	4393      	bics	r3, r2
 800c708:	d109      	bne.n	800c71e <ArtNetParams::Set(unsigned int)+0xd2>
 800c70a:	f106 031c 	add.w	r3, r6, #28
 800c70e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c712:	4651      	mov	r1, sl
 800c714:	4628      	mov	r0, r5
 800c716:	f8d3 200b 	ldr.w	r2, [r3, #11]
 800c71a:	f7fe fd63 	bl	800b1e4 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>
 800c71e:	2201      	movs	r2, #1
 800c720:	f106 0308 	add.w	r3, r6, #8
 800c724:	89a0      	ldrh	r0, [r4, #12]
 800c726:	fa02 f303 	lsl.w	r3, r2, r3
 800c72a:	b29b      	uxth	r3, r3
 800c72c:	4383      	bics	r3, r0
 800c72e:	d103      	bne.n	800c738 <ArtNetParams::Set(unsigned int)+0xec>
 800c730:	4651      	mov	r1, sl
 800c732:	4628      	mov	r0, r5
 800c734:	f7ff f834 	bl	800b7a0 <ArtNetNode::SetRmd(unsigned int, bool)>
 800c738:	3601      	adds	r6, #1
 800c73a:	f108 0801 	add.w	r8, r8, #1
 800c73e:	f8d9 3000 	ldr.w	r3, [r9]
 800c742:	42b3      	cmp	r3, r6
 800c744:	d8bd      	bhi.n	800c6c2 <ArtNetParams::Set(unsigned int)+0x76>
 800c746:	7aa1      	ldrb	r1, [r4, #10]
 800c748:	4628      	mov	r0, r5
 800c74a:	3108      	adds	r1, #8
 800c74c:	b2c9      	uxtb	r1, r1
 800c74e:	f7fe fa2d 	bl	800abac <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>
 800c752:	6863      	ldr	r3, [r4, #4]
 800c754:	011a      	lsls	r2, r3, #4
 800c756:	bf44      	itt	mi
 800c758:	2201      	movmi	r2, #1
 800c75a:	f885 2094 	strbmi.w	r2, [r5, #148]	; 0x94
 800c75e:	04db      	lsls	r3, r3, #19
 800c760:	bf44      	itt	mi
 800c762:	2301      	movmi	r3, #1
 800c764:	f885 39f8 	strbmi.w	r3, [r5, #2552]	; 0x9f8
 800c768:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c76c:	200018d4 	ldrdcs	r1, [r0], -r4
 800c770:	200018c4 	andcs	r1, r0, r4, asr #17

0800c774 <ArtNetParams::Dump()>:
 800c774:	4770      	bx	lr
	...

0800c778 <ArtNetNode::HandleTrigger()>:
 800c778:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
 800c77c:	4601      	mov	r1, r0
 800c77e:	2aff      	cmp	r2, #255	; 0xff
 800c780:	d103      	bne.n	800c78a <ArtNetNode::HandleTrigger()+0x12>
 800c782:	f890 30a7 	ldrb.w	r3, [r0, #167]	; 0xa7
 800c786:	2bff      	cmp	r3, #255	; 0xff
 800c788:	d008      	beq.n	800c79c <ArtNetNode::HandleTrigger()+0x24>
 800c78a:	4b07      	ldr	r3, [pc, #28]	; (800c7a8 <ArtNetNode::HandleTrigger()+0x30>)
 800c78c:	7818      	ldrb	r0, [r3, #0]
 800c78e:	4290      	cmp	r0, r2
 800c790:	d109      	bne.n	800c7a6 <ArtNetNode::HandleTrigger()+0x2e>
 800c792:	f891 20a7 	ldrb.w	r2, [r1, #167]	; 0xa7
 800c796:	785b      	ldrb	r3, [r3, #1]
 800c798:	429a      	cmp	r2, r3
 800c79a:	d104      	bne.n	800c7a6 <ArtNetNode::HandleTrigger()+0x2e>
 800c79c:	6948      	ldr	r0, [r1, #20]
 800c79e:	31a8      	adds	r1, #168	; 0xa8
 800c7a0:	6803      	ldr	r3, [r0, #0]
 800c7a2:	689b      	ldr	r3, [r3, #8]
 800c7a4:	4718      	bx	r3
 800c7a6:	4770      	bx	lr
 800c7a8:	08016b30 	stmdaeq	r1, {r4, r5, r8, r9, fp, sp, lr}

0800c7ac <e131::universe_to_multicast_ip(unsigned short)>:
 800c7ac:	b513      	push	{r0, r1, r4, lr}
 800c7ae:	4604      	mov	r4, r0
 800c7b0:	a901      	add	r1, sp, #4
 800c7b2:	4806      	ldr	r0, [pc, #24]	; (800c7cc <e131::universe_to_multicast_ip(unsigned short)+0x20>)
 800c7b4:	f007 fbd6 	bl	8013f64 <inet_aton>
 800c7b8:	9801      	ldr	r0, [sp, #4]
 800c7ba:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 800c7be:	0224      	lsls	r4, r4, #8
 800c7c0:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800c7c4:	4320      	orrs	r0, r4
 800c7c6:	b002      	add	sp, #8
 800c7c8:	bd10      	pop	{r4, pc}
 800c7ca:	bf00      	nop
 800c7cc:	08016b36 	stmdaeq	r1, {r1, r2, r4, r5, r8, r9, fp, sp, lr}

0800c7d0 <memset.constprop.0.isra.0>:
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	4401      	add	r1, r0
 800c7d4:	4288      	cmp	r0, r1
 800c7d6:	d100      	bne.n	800c7da <memset.constprop.0.isra.0+0xa>
 800c7d8:	4770      	bx	lr
 800c7da:	f800 3b01 	strb.w	r3, [r0], #1
 800c7de:	e7f9      	b.n	800c7d4 <memset.constprop.0.isra.0+0x4>

0800c7e0 <memcpy.isra.0>:
 800c7e0:	3801      	subs	r0, #1
 800c7e2:	440a      	add	r2, r1
 800c7e4:	4291      	cmp	r1, r2
 800c7e6:	d100      	bne.n	800c7ea <memcpy.isra.0+0xa>
 800c7e8:	4770      	bx	lr
 800c7ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7ee:	f800 3f01 	strb.w	r3, [r0, #1]!
 800c7f2:	e7f7      	b.n	800c7e4 <memcpy.isra.0+0x4>

0800c7f4 <E131Bridge::E131Bridge()>:
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c7fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7fc:	e9c0 2300 	strd	r2, r3, [r0]
 800c800:	2201      	movs	r2, #1
 800c802:	4604      	mov	r4, r0
 800c804:	2764      	movs	r7, #100	; 0x64
 800c806:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c80a:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800c80e:	e9c0 3307 	strd	r3, r3, [r0, #28]
 800c812:	6743      	str	r3, [r0, #116]	; 0x74
 800c814:	4b26      	ldr	r3, [pc, #152]	; (800c8b0 <E131Bridge::E131Bridge()+0xbc>)
 800c816:	7202      	strb	r2, [r0, #8]
 800c818:	b093      	sub	sp, #76	; 0x4c
 800c81a:	6018      	str	r0, [r3, #0]
 800c81c:	f200 5514 	addw	r5, r0, #1300	; 0x514
 800c820:	f200 6224 	addw	r2, r0, #1572	; 0x624
 800c824:	f200 6654 	addw	r6, r0, #1620	; 0x654
 800c828:	4628      	mov	r0, r5
 800c82a:	2144      	movs	r1, #68	; 0x44
 800c82c:	f7ff ffd0 	bl	800c7d0 <memset.constprop.0.isra.0>
 800c830:	4610      	mov	r0, r2
 800c832:	210c      	movs	r1, #12
 800c834:	f7ff ffcc 	bl	800c7d0 <memset.constprop.0.isra.0>
 800c838:	320c      	adds	r2, #12
 800c83a:	f802 7c03 	strb.w	r7, [r2, #-3]
 800c83e:	4296      	cmp	r6, r2
 800c840:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800c844:	d1f0      	bne.n	800c828 <E131Bridge::E131Bridge()+0x34>
 800c846:	2120      	movs	r1, #32
 800c848:	f204 40f4 	addw	r0, r4, #1268	; 0x4f4
 800c84c:	f7ff ffc0 	bl	800c7d0 <memset.constprop.0.isra.0>
 800c850:	2301      	movs	r3, #1
 800c852:	4d18      	ldr	r5, [pc, #96]	; (800c8b4 <E131Bridge::E131Bridge()+0xc0>)
 800c854:	4a18      	ldr	r2, [pc, #96]	; (800c8b8 <E131Bridge::E131Bridge()+0xc4>)
 800c856:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
 800c85a:	682b      	ldr	r3, [r5, #0]
 800c85c:	2140      	movs	r1, #64	; 0x40
 800c85e:	9200      	str	r2, [sp, #0]
 800c860:	3320      	adds	r3, #32
 800c862:	4a16      	ldr	r2, [pc, #88]	; (800c8bc <E131Bridge::E131Bridge()+0xc8>)
 800c864:	a802      	add	r0, sp, #8
 800c866:	f7fc fbc3 	bl	8008ff0 <snprintf>
 800c86a:	233f      	movs	r3, #63	; 0x3f
 800c86c:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800c870:	a902      	add	r1, sp, #8
 800c872:	f811 0b01 	ldrb.w	r0, [r1], #1
 800c876:	b928      	cbnz	r0, 800c884 <E131Bridge::E131Bridge()+0x90>
 800c878:	4413      	add	r3, r2
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d006      	beq.n	800c88c <E131Bridge::E131Bridge()+0x98>
 800c87e:	f802 0b01 	strb.w	r0, [r2], #1
 800c882:	e7fa      	b.n	800c87a <E131Bridge::E131Bridge()+0x86>
 800c884:	3b01      	subs	r3, #1
 800c886:	f802 0b01 	strb.w	r0, [r2], #1
 800c88a:	d1f2      	bne.n	800c872 <E131Bridge::E131Bridge()+0x7e>
 800c88c:	2300      	movs	r3, #0
 800c88e:	f44f 51ae 	mov.w	r1, #5568	; 0x15c0
 800c892:	f884 3073 	strb.w	r3, [r4, #115]	; 0x73
 800c896:	6828      	ldr	r0, [r5, #0]
 800c898:	f004 f90b 	bl	8010ab2 <Network::Begin(unsigned short)>
 800c89c:	4621      	mov	r1, r4
 800c89e:	4b08      	ldr	r3, [pc, #32]	; (800c8c0 <E131Bridge::E131Bridge()+0xcc>)
 800c8a0:	f841 0b24 	str.w	r0, [r1], #36
 800c8a4:	6818      	ldr	r0, [r3, #0]
 800c8a6:	f007 fafb 	bl	8013ea0 <Hardware::GetUuid(unsigned char*)>
 800c8aa:	4620      	mov	r0, r4
 800c8ac:	b013      	add	sp, #76	; 0x4c
 800c8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8b0:	200018d8 	ldrdcs	r1, [r0], -r8
 800c8b4:	2000863c 	andcs	r8, r0, ip, lsr r6
 800c8b8:	08016889 	stmdaeq	r1, {r0, r3, r7, fp, sp, lr}
 800c8bc:	08016b42 	stmdaeq	r1, {r1, r6, r8, r9, fp, sp, lr}
 800c8c0:	20009d58 	andcs	r9, r0, r8, asr sp

0800c8c4 <E131Bridge::~E131Bridge()>:
 800c8c4:	4770      	bx	lr
	...

0800c8c8 <E131Bridge::Start()>:
 800c8c8:	6943      	ldr	r3, [r0, #20]
 800c8ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8cc:	4604      	mov	r4, r0
 800c8ce:	b35b      	cbz	r3, 800c928 <E131Bridge::Start()+0x60>
 800c8d0:	6983      	ldr	r3, [r0, #24]
 800c8d2:	b9cb      	cbnz	r3, 800c908 <E131Bridge::Start()+0x40>
 800c8d4:	a901      	add	r1, sp, #4
 800c8d6:	4818      	ldr	r0, [pc, #96]	; (800c938 <E131Bridge::Start()+0x70>)
 800c8d8:	f007 fb44 	bl	8013f64 <inet_aton>
 800c8dc:	9b01      	ldr	r3, [sp, #4]
 800c8de:	f240 207e 	movw	r0, #638	; 0x27e
 800c8e2:	f043 4356 	orr.w	r3, r3, #3590324224	; 0xd6000000
 800c8e6:	f443 037a 	orr.w	r3, r3, #16384000	; 0xfa0000
 800c8ea:	6223      	str	r3, [r4, #32]
 800c8ec:	f007 fb36 	bl	8013f5c <operator new(unsigned int)>
 800c8f0:	61a0      	str	r0, [r4, #24]
 800c8f2:	4620      	mov	r0, r4
 800c8f4:	f000 fcfc 	bl	800d2f0 <E131Bridge::FillDataPacket()>
 800c8f8:	f44f 608f 	mov.w	r0, #1144	; 0x478
 800c8fc:	f007 fb2e 	bl	8013f5c <operator new(unsigned int)>
 800c900:	61e0      	str	r0, [r4, #28]
 800c902:	4620      	mov	r0, r4
 800c904:	f000 fc4c 	bl	800d1a0 <E131Bridge::FillDiscoveryPacket()>
 800c908:	2500      	movs	r5, #0
 800c90a:	270c      	movs	r7, #12
 800c90c:	f204 6626 	addw	r6, r4, #1574	; 0x626
 800c910:	fb07 f305 	mul.w	r3, r7, r5
 800c914:	5cf3      	ldrb	r3, [r6, r3]
 800c916:	b123      	cbz	r3, 800c922 <E131Bridge::Start()+0x5a>
 800c918:	6960      	ldr	r0, [r4, #20]
 800c91a:	4629      	mov	r1, r5
 800c91c:	6803      	ldr	r3, [r0, #0]
 800c91e:	689b      	ldr	r3, [r3, #8]
 800c920:	4798      	blx	r3
 800c922:	3501      	adds	r5, #1
 800c924:	2d04      	cmp	r5, #4
 800c926:	d1f3      	bne.n	800c910 <E131Bridge::Start()+0x48>
 800c928:	2102      	movs	r1, #2
 800c92a:	4b04      	ldr	r3, [pc, #16]	; (800c93c <E131Bridge::Start()+0x74>)
 800c92c:	6818      	ldr	r0, [r3, #0]
 800c92e:	b003      	add	sp, #12
 800c930:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c934:	f007 ba30 	b.w	8013d98 <LedBlink::SetMode(ledblink::Mode)>
 800c938:	08016b36 	stmdaeq	r1, {r1, r2, r4, r5, r8, r9, fp, sp, lr}
 800c93c:	20009d54 	andcs	r9, r0, r4, asr sp

0800c940 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>:
 800c940:	b570      	push	{r4, r5, r6, lr}
 800c942:	4604      	mov	r4, r0
 800c944:	2300      	movs	r3, #0
 800c946:	2544      	movs	r5, #68	; 0x44
 800c948:	4610      	mov	r0, r2
 800c94a:	f204 5214 	addw	r2, r4, #1300	; 0x514
 800c94e:	4299      	cmp	r1, r3
 800c950:	d004      	beq.n	800c95c <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x1c>
 800c952:	fb05 f603 	mul.w	r6, r5, r3
 800c956:	5b96      	ldrh	r6, [r2, r6]
 800c958:	4286      	cmp	r6, r0
 800c95a:	d00e      	beq.n	800c97a <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x3a>
 800c95c:	3301      	adds	r3, #1
 800c95e:	2b04      	cmp	r3, #4
 800c960:	d1f5      	bne.n	800c94e <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0xe>
 800c962:	4b06      	ldr	r3, [pc, #24]	; (800c97c <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x3c>)
 800c964:	6824      	ldr	r4, [r4, #0]
 800c966:	681d      	ldr	r5, [r3, #0]
 800c968:	f7ff ff20 	bl	800c7ac <e131::universe_to_multicast_ip(unsigned short)>
 800c96c:	4621      	mov	r1, r4
 800c96e:	4602      	mov	r2, r0
 800c970:	4628      	mov	r0, r5
 800c972:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c976:	f004 b8b0 	b.w	8010ada <Network::LeaveGroup(int, unsigned int)>
 800c97a:	bd70      	pop	{r4, r5, r6, pc}
 800c97c:	2000863c 	andcs	r8, r0, ip, lsr r6

0800c980 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>:
 800c980:	b570      	push	{r4, r5, r6, lr}
 800c982:	4604      	mov	r4, r0
 800c984:	461d      	mov	r5, r3
 800c986:	b1c1      	cbz	r1, 800c9ba <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x3a>
 800c988:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800c98c:	f200 5606 	addw	r6, r0, #1286	; 0x506
 800c990:	b12a      	cbz	r2, 800c99e <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x1e>
 800c992:	42aa      	cmp	r2, r5
 800c994:	d017      	beq.n	800c9c6 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x46>
 800c996:	2104      	movs	r1, #4
 800c998:	4620      	mov	r0, r4
 800c99a:	f7ff ffd1 	bl	800c940 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800c99e:	4b0a      	ldr	r3, [pc, #40]	; (800c9c8 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x48>)
 800c9a0:	8035      	strh	r5, [r6, #0]
 800c9a2:	4628      	mov	r0, r5
 800c9a4:	6826      	ldr	r6, [r4, #0]
 800c9a6:	681c      	ldr	r4, [r3, #0]
 800c9a8:	f7ff ff00 	bl	800c7ac <e131::universe_to_multicast_ip(unsigned short)>
 800c9ac:	4631      	mov	r1, r6
 800c9ae:	4602      	mov	r2, r0
 800c9b0:	4620      	mov	r0, r4
 800c9b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c9b6:	f004 b88d 	b.w	8010ad4 <Network::JoinGroup(int, unsigned int)>
 800c9ba:	b122      	cbz	r2, 800c9c6 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x46>
 800c9bc:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800c9c0:	f500 66a1 	add.w	r6, r0, #1288	; 0x508
 800c9c4:	e7e4      	b.n	800c990 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x10>
 800c9c6:	bd70      	pop	{r4, r5, r6, pc}
 800c9c8:	2000863c 	andcs	r8, r0, ip, lsr r6

0800c9cc <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
 800c9cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9d0:	4604      	mov	r4, r0
 800c9d2:	460d      	mov	r5, r1
 800c9d4:	461e      	mov	r6, r3
 800c9d6:	bb02      	cbnz	r2, 800ca1a <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x4e>
 800c9d8:	2903      	cmp	r1, #3
 800c9da:	d843      	bhi.n	800ca64 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x98>
 800c9dc:	230c      	movs	r3, #12
 800c9de:	fb03 0301 	mla	r3, r3, r1, r0
 800c9e2:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 800c9e6:	b12a      	cbz	r2, 800c9f4 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x28>
 800c9e8:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800c9ec:	42b3      	cmp	r3, r6
 800c9ee:	d109      	bne.n	800ca04 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x38>
 800c9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9f4:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800c9f8:	3201      	adds	r2, #1
 800c9fa:	f880 250a 	strb.w	r2, [r0, #1290]	; 0x50a
 800c9fe:	2201      	movs	r2, #1
 800ca00:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
 800ca04:	230c      	movs	r3, #12
 800ca06:	fb03 4405 	mla	r4, r3, r5, r4
 800ca0a:	4630      	mov	r0, r6
 800ca0c:	f8a4 6624 	strh.w	r6, [r4, #1572]	; 0x624
 800ca10:	f7ff fecc 	bl	800c7ac <e131::universe_to_multicast_ip(unsigned short)>
 800ca14:	f8c4 0628 	str.w	r0, [r4, #1576]	; 0x628
 800ca18:	e7ea      	b.n	800c9f0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800ca1a:	2a02      	cmp	r2, #2
 800ca1c:	d122      	bne.n	800ca64 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x98>
 800ca1e:	2903      	cmp	r1, #3
 800ca20:	d8e6      	bhi.n	800c9f0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800ca22:	2344      	movs	r3, #68	; 0x44
 800ca24:	fb03 0301 	mla	r3, r3, r1, r0
 800ca28:	f893 2516 	ldrb.w	r2, [r3, #1302]	; 0x516
 800ca2c:	b152      	cbz	r2, 800ca44 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x78>
 800ca2e:	2200      	movs	r2, #0
 800ca30:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
 800ca34:	f890 350b 	ldrb.w	r3, [r0, #1291]	; 0x50b
 800ca38:	4632      	mov	r2, r6
 800ca3a:	3b01      	subs	r3, #1
 800ca3c:	f880 350b 	strb.w	r3, [r0, #1291]	; 0x50b
 800ca40:	f7ff ff7e 	bl	800c940 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800ca44:	230c      	movs	r3, #12
 800ca46:	fb03 4505 	mla	r5, r3, r5, r4
 800ca4a:	f895 3626 	ldrb.w	r3, [r5, #1574]	; 0x626
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d0ce      	beq.n	800c9f0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800ca52:	2300      	movs	r3, #0
 800ca54:	f885 3626 	strb.w	r3, [r5, #1574]	; 0x626
 800ca58:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800ca5c:	3b01      	subs	r3, #1
 800ca5e:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
 800ca62:	e7c5      	b.n	800c9f0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800ca64:	2344      	movs	r3, #68	; 0x44
 800ca66:	fb03 4305 	mla	r3, r3, r5, r4
 800ca6a:	f893 2516 	ldrb.w	r2, [r3, #1302]	; 0x516
 800ca6e:	b1d2      	cbz	r2, 800caa6 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xda>
 800ca70:	f8b3 3514 	ldrh.w	r3, [r3, #1300]	; 0x514
 800ca74:	42b3      	cmp	r3, r6
 800ca76:	d0bb      	beq.n	800c9f0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800ca78:	4632      	mov	r2, r6
 800ca7a:	4629      	mov	r1, r5
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	f7ff ff5f 	bl	800c940 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800ca82:	4b0d      	ldr	r3, [pc, #52]	; (800cab8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xec>)
 800ca84:	4630      	mov	r0, r6
 800ca86:	681f      	ldr	r7, [r3, #0]
 800ca88:	f8d4 8000 	ldr.w	r8, [r4]
 800ca8c:	f7ff fe8e 	bl	800c7ac <e131::universe_to_multicast_ip(unsigned short)>
 800ca90:	4641      	mov	r1, r8
 800ca92:	4602      	mov	r2, r0
 800ca94:	4638      	mov	r0, r7
 800ca96:	f004 f81d 	bl	8010ad4 <Network::JoinGroup(int, unsigned int)>
 800ca9a:	2344      	movs	r3, #68	; 0x44
 800ca9c:	fb03 4305 	mla	r3, r3, r5, r4
 800caa0:	f8a3 6514 	strh.w	r6, [r3, #1300]	; 0x514
 800caa4:	e7a4      	b.n	800c9f0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800caa6:	f894 250b 	ldrb.w	r2, [r4, #1291]	; 0x50b
 800caaa:	3201      	adds	r2, #1
 800caac:	f884 250b 	strb.w	r2, [r4, #1291]	; 0x50b
 800cab0:	2201      	movs	r2, #1
 800cab2:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
 800cab6:	e7e4      	b.n	800ca82 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xb6>
 800cab8:	2000863c 	andcs	r8, r0, ip, lsr r6

0800cabc <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>:
 800cabc:	b953      	cbnz	r3, 800cad4 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x18>
 800cabe:	2903      	cmp	r1, #3
 800cac0:	d811      	bhi.n	800cae6 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x2a>
 800cac2:	230c      	movs	r3, #12
 800cac4:	fb03 0001 	mla	r0, r3, r1, r0
 800cac8:	f8b0 3624 	ldrh.w	r3, [r0, #1572]	; 0x624
 800cacc:	f890 0626 	ldrb.w	r0, [r0, #1574]	; 0x626
 800cad0:	8013      	strh	r3, [r2, #0]
 800cad2:	4770      	bx	lr
 800cad4:	2344      	movs	r3, #68	; 0x44
 800cad6:	fb03 0001 	mla	r0, r3, r1, r0
 800cada:	f8b0 3514 	ldrh.w	r3, [r0, #1300]	; 0x514
 800cade:	f890 0516 	ldrb.w	r0, [r0, #1302]	; 0x516
 800cae2:	8013      	strh	r3, [r2, #0]
 800cae4:	4770      	bx	lr
 800cae6:	4618      	mov	r0, r3
 800cae8:	4770      	bx	lr

0800caea <E131Bridge::UpdateMergeStatus(unsigned int)>:
 800caea:	f890 34f5 	ldrb.w	r3, [r0, #1269]	; 0x4f5
 800caee:	b923      	cbnz	r3, 800cafa <E131Bridge::UpdateMergeStatus(unsigned int)+0x10>
 800caf0:	2301      	movs	r3, #1
 800caf2:	f880 34f5 	strb.w	r3, [r0, #1269]	; 0x4f5
 800caf6:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800cafa:	2344      	movs	r3, #68	; 0x44
 800cafc:	fb03 0001 	mla	r0, r3, r1, r0
 800cb00:	2301      	movs	r3, #1
 800cb02:	f880 3555 	strb.w	r3, [r0, #1365]	; 0x555
 800cb06:	4770      	bx	lr

0800cb08 <E131Bridge::CheckMergeTimeouts(unsigned int)>:
 800cb08:	4602      	mov	r2, r0
 800cb0a:	2044      	movs	r0, #68	; 0x44
 800cb0c:	4348      	muls	r0, r1
 800cb0e:	b570      	push	{r4, r5, r6, lr}
 800cb10:	1815      	adds	r5, r2, r0
 800cb12:	460c      	mov	r4, r1
 800cb14:	68d3      	ldr	r3, [r2, #12]
 800cb16:	f8d5 1518 	ldr.w	r1, [r5, #1304]	; 0x518
 800cb1a:	1a5b      	subs	r3, r3, r1
 800cb1c:	f242 7110 	movw	r1, #10000	; 0x2710
 800cb20:	428b      	cmp	r3, r1
 800cb22:	d90a      	bls.n	800cb3a <E131Bridge::CheckMergeTimeouts(unsigned int)+0x32>
 800cb24:	2600      	movs	r6, #0
 800cb26:	f500 60a4 	add.w	r0, r0, #1312	; 0x520
 800cb2a:	2110      	movs	r1, #16
 800cb2c:	f8c5 651c 	str.w	r6, [r5, #1308]	; 0x51c
 800cb30:	4410      	add	r0, r2
 800cb32:	f7ff fe4d 	bl	800c7d0 <memset.constprop.0.isra.0>
 800cb36:	f885 6555 	strb.w	r6, [r5, #1365]	; 0x555
 800cb3a:	2344      	movs	r3, #68	; 0x44
 800cb3c:	435c      	muls	r4, r3
 800cb3e:	1915      	adds	r5, r2, r4
 800cb40:	f8d5 1534 	ldr.w	r1, [r5, #1332]	; 0x534
 800cb44:	68d3      	ldr	r3, [r2, #12]
 800cb46:	1a5b      	subs	r3, r3, r1
 800cb48:	f242 7110 	movw	r1, #10000	; 0x2710
 800cb4c:	428b      	cmp	r3, r1
 800cb4e:	d90a      	bls.n	800cb66 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x5e>
 800cb50:	2600      	movs	r6, #0
 800cb52:	f204 543c 	addw	r4, r4, #1340	; 0x53c
 800cb56:	2110      	movs	r1, #16
 800cb58:	f8c5 6538 	str.w	r6, [r5, #1336]	; 0x538
 800cb5c:	1910      	adds	r0, r2, r4
 800cb5e:	f7ff fe37 	bl	800c7d0 <memset.constprop.0.isra.0>
 800cb62:	f885 6555 	strb.w	r6, [r5, #1365]	; 0x555
 800cb66:	f892 1599 	ldrb.w	r1, [r2, #1433]	; 0x599
 800cb6a:	f892 3555 	ldrb.w	r3, [r2, #1365]	; 0x555
 800cb6e:	430b      	orrs	r3, r1
 800cb70:	f892 15dd 	ldrb.w	r1, [r2, #1501]	; 0x5dd
 800cb74:	430b      	orrs	r3, r1
 800cb76:	d107      	bne.n	800cb88 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x80>
 800cb78:	f892 3621 	ldrb.w	r3, [r2, #1569]	; 0x621
 800cb7c:	b923      	cbnz	r3, 800cb88 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x80>
 800cb7e:	2101      	movs	r1, #1
 800cb80:	f882 34f5 	strb.w	r3, [r2, #1269]	; 0x4f5
 800cb84:	f882 14f8 	strb.w	r1, [r2, #1272]	; 0x4f8
 800cb88:	bd70      	pop	{r4, r5, r6, pc}

0800cb8a <E131Bridge::IsPriorityTimeOut(unsigned int) const>:
 800cb8a:	2244      	movs	r2, #68	; 0x44
 800cb8c:	fb02 0101 	mla	r1, r2, r1, r0
 800cb90:	68c3      	ldr	r3, [r0, #12]
 800cb92:	b510      	push	{r4, lr}
 800cb94:	f8d1 2534 	ldr.w	r2, [r1, #1332]	; 0x534
 800cb98:	f8d1 451c 	ldr.w	r4, [r1, #1308]	; 0x51c
 800cb9c:	f8d1 0538 	ldr.w	r0, [r1, #1336]	; 0x538
 800cba0:	1a9a      	subs	r2, r3, r2
 800cba2:	b184      	cbz	r4, 800cbc6 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3c>
 800cba4:	f8d1 1518 	ldr.w	r1, [r1, #1304]	; 0x518
 800cba8:	1a5b      	subs	r3, r3, r1
 800cbaa:	b128      	cbz	r0, 800cbb8 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2e>
 800cbac:	f242 700f 	movw	r0, #9999	; 0x270f
 800cbb0:	4283      	cmp	r3, r0
 800cbb2:	d90d      	bls.n	800cbd0 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x46>
 800cbb4:	4282      	cmp	r2, r0
 800cbb6:	e002      	b.n	800cbbe <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x34>
 800cbb8:	f242 7010 	movw	r0, #10000	; 0x2710
 800cbbc:	4283      	cmp	r3, r0
 800cbbe:	bf94      	ite	ls
 800cbc0:	2000      	movls	r0, #0
 800cbc2:	2001      	movhi	r0, #1
 800cbc4:	bd10      	pop	{r4, pc}
 800cbc6:	2800      	cmp	r0, #0
 800cbc8:	d0fc      	beq.n	800cbc4 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>
 800cbca:	f242 7010 	movw	r0, #10000	; 0x2710
 800cbce:	e7f1      	b.n	800cbb4 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2a>
 800cbd0:	2000      	movs	r0, #0
 800cbd2:	e7f7      	b.n	800cbc4 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>

0800cbd4 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>:
 800cbd4:	684a      	ldr	r2, [r1, #4]
 800cbd6:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800cbd8:	b510      	push	{r4, lr}
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d10d      	bne.n	800cbfa <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x26>
 800cbde:	f100 0391 	add.w	r3, r0, #145	; 0x91
 800cbe2:	3107      	adds	r1, #7
 800cbe4:	30a1      	adds	r0, #161	; 0xa1
 800cbe6:	4283      	cmp	r3, r0
 800cbe8:	d101      	bne.n	800cbee <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x1a>
 800cbea:	2001      	movs	r0, #1
 800cbec:	bd10      	pop	{r4, pc}
 800cbee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cbf2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800cbf6:	4294      	cmp	r4, r2
 800cbf8:	d0f5      	beq.n	800cbe6 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x12>
 800cbfa:	2000      	movs	r0, #0
 800cbfc:	e7f6      	b.n	800cbec <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x18>
	...

0800cc00 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>:
 800cc00:	2301      	movs	r3, #1
 800cc02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc06:	4604      	mov	r4, r0
 800cc08:	4690      	mov	r8, r2
 800cc0a:	460f      	mov	r7, r1
 800cc0c:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800cc10:	2900      	cmp	r1, #0
 800cc12:	d044      	beq.n	800cc9e <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x9e>
 800cc14:	2a00      	cmp	r2, #0
 800cc16:	d042      	beq.n	800cc9e <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x9e>
 800cc18:	2600      	movs	r6, #0
 800cc1a:	f240 6904 	movw	r9, #1540	; 0x604
 800cc1e:	4632      	mov	r2, r6
 800cc20:	4637      	mov	r7, r6
 800cc22:	f8c0 34f4 	str.w	r3, [r0, #1268]	; 0x4f4
 800cc26:	f880 350c 	strb.w	r3, [r0, #1292]	; 0x50c
 800cc2a:	f500 65a4 	add.w	r5, r0, #1312	; 0x520
 800cc2e:	f895 8036 	ldrb.w	r8, [r5, #54]	; 0x36
 800cc32:	f1b8 0f00 	cmp.w	r8, #0
 800cc36:	d018      	beq.n	800cc6a <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x6a>
 800cc38:	2110      	movs	r1, #16
 800cc3a:	4628      	mov	r0, r5
 800cc3c:	f845 7c04 	str.w	r7, [r5, #-4]
 800cc40:	f7ff fdc6 	bl	800c7d0 <memset.constprop.0.isra.0>
 800cc44:	2110      	movs	r1, #16
 800cc46:	f105 001c 	add.w	r0, r5, #28
 800cc4a:	61af      	str	r7, [r5, #24]
 800cc4c:	f7ff fdc0 	bl	800c7d0 <memset.constprop.0.isra.0>
 800cc50:	f7fe f92e 	bl	800aeb0 <lightset::Data::Get()>
 800cc54:	4642      	mov	r2, r8
 800cc56:	fb09 0006 	mla	r0, r9, r6, r0
 800cc5a:	f8c0 7600 	str.w	r7, [r0, #1536]	; 0x600
 800cc5e:	f885 7034 	strb.w	r7, [r5, #52]	; 0x34
 800cc62:	f885 7036 	strb.w	r7, [r5, #54]	; 0x36
 800cc66:	f885 7035 	strb.w	r7, [r5, #53]	; 0x35
 800cc6a:	3601      	adds	r6, #1
 800cc6c:	2e04      	cmp	r6, #4
 800cc6e:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800cc72:	d1dc      	bne.n	800cc2e <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x2e>
 800cc74:	b12a      	cbz	r2, 800cc82 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x82>
 800cc76:	f8d4 1510 	ldr.w	r1, [r4, #1296]	; 0x510
 800cc7a:	2901      	cmp	r1, #1
 800cc7c:	d04a      	beq.n	800cd14 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x114>
 800cc7e:	2902      	cmp	r1, #2
 800cc80:	d04d      	beq.n	800cd1e <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x11e>
 800cc82:	4b29      	ldr	r3, [pc, #164]	; (800cd28 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x128>)
 800cc84:	2102      	movs	r1, #2
 800cc86:	6818      	ldr	r0, [r3, #0]
 800cc88:	f007 f886 	bl	8013d98 <LedBlink::SetMode(ledblink::Mode)>
 800cc8c:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800cc90:	f023 0302 	bic.w	r3, r3, #2
 800cc94:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800cc98:	b003      	add	sp, #12
 800cc9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc9e:	2600      	movs	r6, #0
 800cca0:	f240 6b04 	movw	fp, #1540	; 0x604
 800cca4:	4632      	mov	r2, r6
 800cca6:	46b1      	mov	r9, r6
 800cca8:	f204 553c 	addw	r5, r4, #1340	; 0x53c
 800ccac:	f895 a01a 	ldrb.w	sl, [r5, #26]
 800ccb0:	f1ba 0f00 	cmp.w	sl, #0
 800ccb4:	d028      	beq.n	800cd08 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x108>
 800ccb6:	b15f      	cbz	r7, 800ccd0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd0>
 800ccb8:	f855 3c20 	ldr.w	r3, [r5, #-32]
 800ccbc:	b143      	cbz	r3, 800ccd0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd0>
 800ccbe:	2110      	movs	r1, #16
 800ccc0:	f845 9c20 	str.w	r9, [r5, #-32]
 800ccc4:	f1a5 001c 	sub.w	r0, r5, #28
 800ccc8:	f7ff fd82 	bl	800c7d0 <memset.constprop.0.isra.0>
 800cccc:	f885 9019 	strb.w	r9, [r5, #25]
 800ccd0:	f1b8 0f00 	cmp.w	r8, #0
 800ccd4:	d00a      	beq.n	800ccec <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xec>
 800ccd6:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800ccda:	b13b      	cbz	r3, 800ccec <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xec>
 800ccdc:	2110      	movs	r1, #16
 800ccde:	4628      	mov	r0, r5
 800cce0:	f845 9c04 	str.w	r9, [r5, #-4]
 800cce4:	f7ff fd74 	bl	800c7d0 <memset.constprop.0.isra.0>
 800cce8:	f885 9019 	strb.w	r9, [r5, #25]
 800ccec:	f894 34f5 	ldrb.w	r3, [r4, #1269]	; 0x4f5
 800ccf0:	b953      	cbnz	r3, 800cd08 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x108>
 800ccf2:	9301      	str	r3, [sp, #4]
 800ccf4:	f7fe f8dc 	bl	800aeb0 <lightset::Data::Get()>
 800ccf8:	4652      	mov	r2, sl
 800ccfa:	fb0b 0006 	mla	r0, fp, r6, r0
 800ccfe:	9b01      	ldr	r3, [sp, #4]
 800cd00:	f8c0 3600 	str.w	r3, [r0, #1536]	; 0x600
 800cd04:	762b      	strb	r3, [r5, #24]
 800cd06:	76ab      	strb	r3, [r5, #26]
 800cd08:	3601      	adds	r6, #1
 800cd0a:	2e04      	cmp	r6, #4
 800cd0c:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800cd10:	d1cc      	bne.n	800ccac <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xac>
 800cd12:	e7af      	b.n	800cc74 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x74>
 800cd14:	6860      	ldr	r0, [r4, #4]
 800cd16:	6803      	ldr	r3, [r0, #0]
 800cd18:	695b      	ldr	r3, [r3, #20]
 800cd1a:	4798      	blx	r3
 800cd1c:	e7b1      	b.n	800cc82 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x82>
 800cd1e:	6860      	ldr	r0, [r4, #4]
 800cd20:	6803      	ldr	r3, [r0, #0]
 800cd22:	699b      	ldr	r3, [r3, #24]
 800cd24:	4798      	blx	r3
 800cd26:	e7ac      	b.n	800cc82 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x82>
 800cd28:	20009d54 	andcs	r9, r0, r4, asr sp

0800cd2c <E131Bridge::HandleDmx()>:
 800cd2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd34:	4604      	mov	r4, r0
 800cd36:	2600      	movs	r6, #0
 800cd38:	f8b0 70f7 	ldrh.w	r7, [r0, #247]	; 0xf7
 800cd3c:	b085      	sub	sp, #20
 800cd3e:	ba7f      	rev16	r7, r7
 800cd40:	b2bf      	uxth	r7, r7
 800cd42:	f100 09fa 	add.w	r9, r0, #250	; 0xfa
 800cd46:	3f01      	subs	r7, #1
 800cd48:	f500 65a4 	add.w	r5, r0, #1312	; 0x520
 800cd4c:	9301      	str	r3, [sp, #4]
 800cd4e:	f815 3c0a 	ldrb.w	r3, [r5, #-10]
 800cd52:	b353      	cbz	r3, 800cdaa <E131Bridge::HandleDmx()+0x7e>
 800cd54:	f835 3c0c 	ldrh.w	r3, [r5, #-12]
 800cd58:	f8b4 20ed 	ldrh.w	r2, [r4, #237]	; 0xed
 800cd5c:	ba5b      	rev16	r3, r3
 800cd5e:	b29b      	uxth	r3, r3
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d122      	bne.n	800cdaa <E131Bridge::HandleDmx()+0x7e>
 800cd64:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800cd68:	f1a5 0108 	sub.w	r1, r5, #8
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	9302      	str	r3, [sp, #8]
 800cd70:	f7ff ff30 	bl	800cbd4 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800cd74:	f105 0114 	add.w	r1, r5, #20
 800cd78:	4682      	mov	sl, r0
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	f7ff ff2a 	bl	800cbd4 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800cd80:	f8d5 b018 	ldr.w	fp, [r5, #24]
 800cd84:	4680      	mov	r8, r0
 800cd86:	f1ba 0f00 	cmp.w	sl, #0
 800cd8a:	d01a      	beq.n	800cdc2 <E131Bridge::HandleDmx()+0x96>
 800cd8c:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800cd90:	7c2a      	ldrb	r2, [r5, #16]
 800cd92:	742b      	strb	r3, [r5, #16]
 800cd94:	3313      	adds	r3, #19
 800cd96:	1a9b      	subs	r3, r3, r2
 800cd98:	b2db      	uxtb	r3, r3
 800cd9a:	2b13      	cmp	r3, #19
 800cd9c:	d905      	bls.n	800cdaa <E131Bridge::HandleDmx()+0x7e>
 800cd9e:	f994 20ec 	ldrsb.w	r2, [r4, #236]	; 0xec
 800cda2:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800cda6:	2a00      	cmp	r2, #0
 800cda8:	da14      	bge.n	800cdd4 <E131Bridge::HandleDmx()+0xa8>
 800cdaa:	9b01      	ldr	r3, [sp, #4]
 800cdac:	3601      	adds	r6, #1
 800cdae:	f203 6304 	addw	r3, r3, #1540	; 0x604
 800cdb2:	2e04      	cmp	r6, #4
 800cdb4:	9301      	str	r3, [sp, #4]
 800cdb6:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800cdba:	d1c8      	bne.n	800cd4e <E131Bridge::HandleDmx()+0x22>
 800cdbc:	b005      	add	sp, #20
 800cdbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdc2:	2800      	cmp	r0, #0
 800cdc4:	d0eb      	beq.n	800cd9e <E131Bridge::HandleDmx()+0x72>
 800cdc6:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800cdca:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 800cdce:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800cdd2:	e7df      	b.n	800cd94 <E131Bridge::HandleDmx()+0x68>
 800cdd4:	065a      	lsls	r2, r3, #25
 800cdd6:	d50b      	bpl.n	800cdf0 <E131Bridge::HandleDmx()+0xc4>
 800cdd8:	f1ba 0f00 	cmp.w	sl, #0
 800cddc:	d102      	bne.n	800cde4 <E131Bridge::HandleDmx()+0xb8>
 800cdde:	f1b8 0f00 	cmp.w	r8, #0
 800cde2:	d0e2      	beq.n	800cdaa <E131Bridge::HandleDmx()+0x7e>
 800cde4:	4642      	mov	r2, r8
 800cde6:	4651      	mov	r1, sl
 800cde8:	4620      	mov	r0, r4
 800cdea:	f7ff ff09 	bl	800cc00 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800cdee:	e7dc      	b.n	800cdaa <E131Bridge::HandleDmx()+0x7e>
 800cdf0:	f894 34f5 	ldrb.w	r3, [r4, #1269]	; 0x4f5
 800cdf4:	b133      	cbz	r3, 800ce04 <E131Bridge::HandleDmx()+0xd8>
 800cdf6:	f894 34f9 	ldrb.w	r3, [r4, #1273]	; 0x4f9
 800cdfa:	b91b      	cbnz	r3, 800ce04 <E131Bridge::HandleDmx()+0xd8>
 800cdfc:	4631      	mov	r1, r6
 800cdfe:	4620      	mov	r0, r4
 800ce00:	f7ff fe82 	bl	800cb08 <E131Bridge::CheckMergeTimeouts(unsigned int)>
 800ce04:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
 800ce08:	f894 250c 	ldrb.w	r2, [r4, #1292]	; 0x50c
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d259      	bcs.n	800cec4 <E131Bridge::HandleDmx()+0x198>
 800ce10:	4631      	mov	r1, r6
 800ce12:	4620      	mov	r0, r4
 800ce14:	9303      	str	r3, [sp, #12]
 800ce16:	f7ff feb8 	bl	800cb8a <E131Bridge::IsPriorityTimeOut(unsigned int) const>
 800ce1a:	2800      	cmp	r0, #0
 800ce1c:	d0c5      	beq.n	800cdaa <E131Bridge::HandleDmx()+0x7e>
 800ce1e:	9b03      	ldr	r3, [sp, #12]
 800ce20:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
 800ce24:	9b02      	ldr	r3, [sp, #8]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d154      	bne.n	800ced4 <E131Bridge::HandleDmx()+0x1a8>
 800ce2a:	f1bb 0f00 	cmp.w	fp, #0
 800ce2e:	d15c      	bne.n	800ceea <E131Bridge::HandleDmx()+0x1be>
 800ce30:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ce32:	2210      	movs	r2, #16
 800ce34:	f845 3c04 	str.w	r3, [r5, #-4]
 800ce38:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800ce3c:	4628      	mov	r0, r5
 800ce3e:	742b      	strb	r3, [r5, #16]
 800ce40:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800ce44:	f7ff fccc 	bl	800c7e0 <memcpy.isra.0>
 800ce48:	68e3      	ldr	r3, [r4, #12]
 800ce4a:	463a      	mov	r2, r7
 800ce4c:	4649      	mov	r1, r9
 800ce4e:	4630      	mov	r0, r6
 800ce50:	f845 3c08 	str.w	r3, [r5, #-8]
 800ce54:	f7fe f838 	bl	800aec8 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 800ce58:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800ce5c:	069b      	lsls	r3, r3, #26
 800ce5e:	f100 80aa 	bmi.w	800cfb6 <E131Bridge::HandleDmx()+0x28a>
 800ce62:	f8b4 30e9 	ldrh.w	r3, [r4, #233]	; 0xe9
 800ce66:	b29a      	uxth	r2, r3
 800ce68:	2a00      	cmp	r2, #0
 800ce6a:	f000 80a8 	beq.w	800cfbe <E131Bridge::HandleDmx()+0x292>
 800ce6e:	f894 24f7 	ldrb.w	r2, [r4, #1271]	; 0x4f7
 800ce72:	2a00      	cmp	r2, #0
 800ce74:	f040 80a3 	bne.w	800cfbe <E131Bridge::HandleDmx()+0x292>
 800ce78:	ba5b      	rev16	r3, r3
 800ce7a:	b29b      	uxth	r3, r3
 800ce7c:	f1ba 0f00 	cmp.w	sl, #0
 800ce80:	f040 8096 	bne.w	800cfb0 <E131Bridge::HandleDmx()+0x284>
 800ce84:	f1b8 0f00 	cmp.w	r8, #0
 800ce88:	f040 8092 	bne.w	800cfb0 <E131Bridge::HandleDmx()+0x284>
 800ce8c:	69aa      	ldr	r2, [r5, #24]
 800ce8e:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800ce92:	3a00      	subs	r2, #0
 800ce94:	bf18      	it	ne
 800ce96:	2201      	movne	r2, #1
 800ce98:	3900      	subs	r1, #0
 800ce9a:	bf18      	it	ne
 800ce9c:	2101      	movne	r1, #1
 800ce9e:	4620      	mov	r0, r4
 800cea0:	f7ff fd6e 	bl	800c980 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>
 800cea4:	f240 1301 	movw	r3, #257	; 0x101
 800cea8:	f8a4 34f6 	strh.w	r3, [r4, #1270]	; 0x4f6
 800ceac:	f894 34fa 	ldrb.w	r3, [r4, #1274]	; 0x4fa
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	f040 8089 	bne.w	800cfc8 <E131Bridge::HandleDmx()+0x29c>
 800ceb6:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800ceba:	f043 0302 	orr.w	r3, r3, #2
 800cebe:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800cec2:	e772      	b.n	800cdaa <E131Bridge::HandleDmx()+0x7e>
 800cec4:	d9ae      	bls.n	800ce24 <E131Bridge::HandleDmx()+0xf8>
 800cec6:	2200      	movs	r2, #0
 800cec8:	f845 2c04 	str.w	r2, [r5, #-4]
 800cecc:	61aa      	str	r2, [r5, #24]
 800cece:	f884 24f5 	strb.w	r2, [r4, #1269]	; 0x4f5
 800ced2:	e7a5      	b.n	800ce20 <E131Bridge::HandleDmx()+0xf4>
 800ced4:	f1ba 0f00 	cmp.w	sl, #0
 800ced8:	f000 809a 	beq.w	800d010 <E131Bridge::HandleDmx()+0x2e4>
 800cedc:	f1bb 0f00 	cmp.w	fp, #0
 800cee0:	d159      	bne.n	800cf96 <E131Bridge::HandleDmx()+0x26a>
 800cee2:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800cee6:	742b      	strb	r3, [r5, #16]
 800cee8:	e7ae      	b.n	800ce48 <E131Bridge::HandleDmx()+0x11c>
 800ceea:	f1b8 0f00 	cmp.w	r8, #0
 800ceee:	d038      	beq.n	800cf62 <E131Bridge::HandleDmx()+0x236>
 800cef0:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800cef4:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800cef8:	68e3      	ldr	r3, [r4, #12]
 800cefa:	616b      	str	r3, [r5, #20]
 800cefc:	f7fd ffd8 	bl	800aeb0 <lightset::Data::Get()>
 800cf00:	4683      	mov	fp, r0
 800cf02:	9b01      	ldr	r3, [sp, #4]
 800cf04:	463a      	mov	r2, r7
 800cf06:	f5a3 7000 	sub.w	r0, r3, #512	; 0x200
 800cf0a:	4649      	mov	r1, r9
 800cf0c:	4458      	add	r0, fp
 800cf0e:	f7ff fc67 	bl	800c7e0 <memcpy.isra.0>
 800cf12:	f240 6304 	movw	r3, #1540	; 0x604
 800cf16:	fb03 b306 	mla	r3, r3, r6, fp
 800cf1a:	f8c3 7600 	str.w	r7, [r3, #1536]	; 0x600
 800cf1e:	9b01      	ldr	r3, [sp, #4]
 800cf20:	463a      	mov	r2, r7
 800cf22:	4649      	mov	r1, r9
 800cf24:	eb0b 0003 	add.w	r0, fp, r3
 800cf28:	f7ff fc5a 	bl	800c7e0 <memcpy.isra.0>
 800cf2c:	e794      	b.n	800ce58 <E131Bridge::HandleDmx()+0x12c>
 800cf2e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800cf30:	2210      	movs	r2, #16
 800cf32:	61ab      	str	r3, [r5, #24]
 800cf34:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800cf38:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800cf3c:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800cf40:	f105 001c 	add.w	r0, r5, #28
 800cf44:	f7ff fc4c 	bl	800c7e0 <memcpy.isra.0>
 800cf48:	68e3      	ldr	r3, [r4, #12]
 800cf4a:	4631      	mov	r1, r6
 800cf4c:	4620      	mov	r0, r4
 800cf4e:	616b      	str	r3, [r5, #20]
 800cf50:	f7ff fdcb 	bl	800caea <E131Bridge::UpdateMergeStatus(unsigned int)>
 800cf54:	463a      	mov	r2, r7
 800cf56:	4649      	mov	r1, r9
 800cf58:	4630      	mov	r0, r6
 800cf5a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800cf5c:	f7fd fffa 	bl	800af54 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800cf60:	e77a      	b.n	800ce58 <E131Bridge::HandleDmx()+0x12c>
 800cf62:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800cf64:	2210      	movs	r2, #16
 800cf66:	f845 3c04 	str.w	r3, [r5, #-4]
 800cf6a:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800cf6e:	4628      	mov	r0, r5
 800cf70:	742b      	strb	r3, [r5, #16]
 800cf72:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800cf76:	f7ff fc33 	bl	800c7e0 <memcpy.isra.0>
 800cf7a:	68e3      	ldr	r3, [r4, #12]
 800cf7c:	4631      	mov	r1, r6
 800cf7e:	4620      	mov	r0, r4
 800cf80:	f845 3c08 	str.w	r3, [r5, #-8]
 800cf84:	f7ff fdb1 	bl	800caea <E131Bridge::UpdateMergeStatus(unsigned int)>
 800cf88:	463a      	mov	r2, r7
 800cf8a:	4649      	mov	r1, r9
 800cf8c:	4630      	mov	r0, r6
 800cf8e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800cf90:	f7fd ffb7 	bl	800af02 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800cf94:	e760      	b.n	800ce58 <E131Bridge::HandleDmx()+0x12c>
 800cf96:	f1b8 0f00 	cmp.w	r8, #0
 800cf9a:	d103      	bne.n	800cfa4 <E131Bridge::HandleDmx()+0x278>
 800cf9c:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800cfa0:	742b      	strb	r3, [r5, #16]
 800cfa2:	e7ea      	b.n	800cf7a <E131Bridge::HandleDmx()+0x24e>
 800cfa4:	4820      	ldr	r0, [pc, #128]	; (800d028 <E131Bridge::HandleDmx()+0x2fc>)
 800cfa6:	b005      	add	sp, #20
 800cfa8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfac:	f7fb bff8 	b.w	8008fa0 <printf>
 800cfb0:	4642      	mov	r2, r8
 800cfb2:	4651      	mov	r1, sl
 800cfb4:	e773      	b.n	800ce9e <E131Bridge::HandleDmx()+0x172>
 800cfb6:	f04f 0300 	mov.w	r3, #0
 800cfba:	f884 34f7 	strb.w	r3, [r4, #1271]	; 0x4f7
 800cfbe:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	f47f af72 	bne.w	800ceac <E131Bridge::HandleDmx()+0x180>
 800cfc8:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800cfcc:	f7fd ff70 	bl	800aeb0 <lightset::Data::Get()>
 800cfd0:	f240 6304 	movw	r3, #1540	; 0x604
 800cfd4:	f8d8 2000 	ldr.w	r2, [r8]
 800cfd8:	fb03 0306 	mla	r3, r3, r6, r0
 800cfdc:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800cfe0:	9a01      	ldr	r2, [sp, #4]
 800cfe2:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
 800cfe6:	1882      	adds	r2, r0, r2
 800cfe8:	4631      	mov	r1, r6
 800cfea:	4640      	mov	r0, r8
 800cfec:	47d0      	blx	sl
 800cfee:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	f47f af5f 	bne.w	800ceb6 <E131Bridge::HandleDmx()+0x18a>
 800cff8:	6860      	ldr	r0, [r4, #4]
 800cffa:	4631      	mov	r1, r6
 800cffc:	6803      	ldr	r3, [r0, #0]
 800cffe:	689b      	ldr	r3, [r3, #8]
 800d000:	4798      	blx	r3
 800d002:	f04f 0301 	mov.w	r3, #1
 800d006:	f884 34f8 	strb.w	r3, [r4, #1272]	; 0x4f8
 800d00a:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 800d00e:	e752      	b.n	800ceb6 <E131Bridge::HandleDmx()+0x18a>
 800d010:	f1bb 0f00 	cmp.w	fp, #0
 800d014:	d08b      	beq.n	800cf2e <E131Bridge::HandleDmx()+0x202>
 800d016:	f1b8 0f00 	cmp.w	r8, #0
 800d01a:	d0c3      	beq.n	800cfa4 <E131Bridge::HandleDmx()+0x278>
 800d01c:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800d020:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800d024:	e790      	b.n	800cf48 <E131Bridge::HandleDmx()+0x21c>
 800d026:	bf00      	nop
 800d028:	08016b4b 	stmdaeq	r1, {r0, r1, r3, r6, r8, r9, fp, sp, lr}

0800d02c <E131Bridge::IsValidRoot()>:
 800d02c:	b530      	push	{r4, r5, lr}
 800d02e:	4a0d      	ldr	r2, [pc, #52]	; (800d064 <E131Bridge::IsValidRoot()+0x38>)
 800d030:	f100 037f 	add.w	r3, r0, #127	; 0x7f
 800d034:	f100 018b 	add.w	r1, r0, #139	; 0x8b
 800d038:	4299      	cmp	r1, r3
 800d03a:	d109      	bne.n	800d050 <E131Bridge::IsValidRoot()+0x24>
 800d03c:	f8d0 008e 	ldr.w	r0, [r0, #142]	; 0x8e
 800d040:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800d044:	d00c      	beq.n	800d060 <E131Bridge::IsValidRoot()+0x34>
 800d046:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 800d04a:	4258      	negs	r0, r3
 800d04c:	4158      	adcs	r0, r3
 800d04e:	bd30      	pop	{r4, r5, pc}
 800d050:	f812 4b01 	ldrb.w	r4, [r2], #1
 800d054:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 800d058:	42a5      	cmp	r5, r4
 800d05a:	d0ed      	beq.n	800d038 <E131Bridge::IsValidRoot()+0xc>
 800d05c:	2000      	movs	r0, #0
 800d05e:	e7f6      	b.n	800d04e <E131Bridge::IsValidRoot()+0x22>
 800d060:	2001      	movs	r0, #1
 800d062:	e7f4      	b.n	800d04e <E131Bridge::IsValidRoot()+0x22>
 800d064:	08016c71 	stmdaeq	r1, {r0, r4, r5, r6, sl, fp, sp, lr}

0800d068 <E131Bridge::IsValidDataPacket()>:
 800d068:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
 800d06c:	2b02      	cmp	r3, #2
 800d06e:	d10d      	bne.n	800d08c <E131Bridge::IsValidDataPacket()+0x24>
 800d070:	f890 30f2 	ldrb.w	r3, [r0, #242]	; 0xf2
 800d074:	2ba1      	cmp	r3, #161	; 0xa1
 800d076:	d109      	bne.n	800d08c <E131Bridge::IsValidDataPacket()+0x24>
 800d078:	f8b0 30f3 	ldrh.w	r3, [r0, #243]	; 0xf3
 800d07c:	b933      	cbnz	r3, 800d08c <E131Bridge::IsValidDataPacket()+0x24>
 800d07e:	f8b0 00f5 	ldrh.w	r0, [r0, #245]	; 0xf5
 800d082:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800d086:	4258      	negs	r0, r3
 800d088:	4158      	adcs	r0, r3
 800d08a:	4770      	bx	lr
 800d08c:	2000      	movs	r0, #0
 800d08e:	4770      	bx	lr

0800d090 <E131Bridge::Run()>:
 800d090:	b530      	push	{r4, r5, lr}
 800d092:	4601      	mov	r1, r0
 800d094:	4604      	mov	r4, r0
 800d096:	b085      	sub	sp, #20
 800d098:	f10d 030e 	add.w	r3, sp, #14
 800d09c:	f811 0b7c 	ldrb.w	r0, [r1], #124
 800d0a0:	f44f 628f 	mov.w	r2, #1144	; 0x478
 800d0a4:	9300      	str	r3, [sp, #0]
 800d0a6:	f104 0378 	add.w	r3, r4, #120	; 0x78
 800d0aa:	f002 ffe1 	bl	8010070 <udp_recv>
 800d0ae:	4b3a      	ldr	r3, [pc, #232]	; (800d198 <E131Bridge::Run()+0x108>)
 800d0b0:	681d      	ldr	r5, [r3, #0]
 800d0b2:	60e5      	str	r5, [r4, #12]
 800d0b4:	2800      	cmp	r0, #0
 800d0b6:	d138      	bne.n	800d12a <E131Bridge::Run()+0x9a>
 800d0b8:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800d0bc:	b16b      	cbz	r3, 800d0da <E131Bridge::Run()+0x4a>
 800d0be:	6923      	ldr	r3, [r4, #16]
 800d0c0:	1aed      	subs	r5, r5, r3
 800d0c2:	f640 13c3 	movw	r3, #2499	; 0x9c3
 800d0c6:	429d      	cmp	r5, r3
 800d0c8:	d928      	bls.n	800d11c <E131Bridge::Run()+0x8c>
 800d0ca:	6863      	ldr	r3, [r4, #4]
 800d0cc:	b9eb      	cbnz	r3, 800d10a <E131Bridge::Run()+0x7a>
 800d0ce:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800d0d2:	f023 0302 	bic.w	r3, r3, #2
 800d0d6:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800d0da:	6963      	ldr	r3, [r4, #20]
 800d0dc:	b12b      	cbz	r3, 800d0ea <E131Bridge::Run()+0x5a>
 800d0de:	4620      	mov	r0, r4
 800d0e0:	f000 f94c 	bl	800d37c <E131Bridge::HandleDmxIn()>
 800d0e4:	4620      	mov	r0, r4
 800d0e6:	f000 f8c7 	bl	800d278 <E131Bridge::SendDiscoveryPacket()>
 800d0ea:	7a23      	ldrb	r3, [r4, #8]
 800d0ec:	b15b      	cbz	r3, 800d106 <E131Bridge::Run()+0x76>
 800d0ee:	4b2b      	ldr	r3, [pc, #172]	; (800d19c <E131Bridge::Run()+0x10c>)
 800d0f0:	6818      	ldr	r0, [r3, #0]
 800d0f2:	6843      	ldr	r3, [r0, #4]
 800d0f4:	2b04      	cmp	r3, #4
 800d0f6:	d006      	beq.n	800d106 <E131Bridge::Run()+0x76>
 800d0f8:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d049      	beq.n	800d194 <E131Bridge::Run()+0x104>
 800d100:	2103      	movs	r1, #3
 800d102:	f006 fe49 	bl	8013d98 <LedBlink::SetMode(ledblink::Mode)>
 800d106:	b005      	add	sp, #20
 800d108:	bd30      	pop	{r4, r5, pc}
 800d10a:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d1dd      	bne.n	800d0ce <E131Bridge::Run()+0x3e>
 800d112:	2201      	movs	r2, #1
 800d114:	4620      	mov	r0, r4
 800d116:	4611      	mov	r1, r2
 800d118:	f7ff fd72 	bl	800cc00 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800d11c:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 800d120:	1a9b      	subs	r3, r3, r2
 800d122:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d126:	d3d8      	bcc.n	800d0da <E131Bridge::Run()+0x4a>
 800d128:	e7d1      	b.n	800d0ce <E131Bridge::Run()+0x3e>
 800d12a:	4620      	mov	r0, r4
 800d12c:	f7ff ff7e 	bl	800d02c <E131Bridge::IsValidRoot()>
 800d130:	2800      	cmp	r0, #0
 800d132:	d0e8      	beq.n	800d106 <E131Bridge::Run()+0x76>
 800d134:	2300      	movs	r3, #0
 800d136:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
 800d13a:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800d13e:	6125      	str	r5, [r4, #16]
 800d140:	b15b      	cbz	r3, 800d15a <E131Bridge::Run()+0xca>
 800d142:	f894 34f7 	ldrb.w	r3, [r4, #1271]	; 0x4f7
 800d146:	b943      	cbnz	r3, 800d15a <E131Bridge::Run()+0xca>
 800d148:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	; 0x4fc
 800d14c:	1aad      	subs	r5, r5, r2
 800d14e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800d152:	4295      	cmp	r5, r2
 800d154:	bf88      	it	hi
 800d156:	f884 34f6 	strbhi.w	r3, [r4, #1270]	; 0x4f6
 800d15a:	6863      	ldr	r3, [r4, #4]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d0bc      	beq.n	800d0da <E131Bridge::Run()+0x4a>
 800d160:	f8d4 308e 	ldr.w	r3, [r4, #142]	; 0x8e
 800d164:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d168:	ba1a      	rev	r2, r3
 800d16a:	d108      	bne.n	800d17e <E131Bridge::Run()+0xee>
 800d16c:	4620      	mov	r0, r4
 800d16e:	f7ff ff7b 	bl	800d068 <E131Bridge::IsValidDataPacket()>
 800d172:	2800      	cmp	r0, #0
 800d174:	d0b1      	beq.n	800d0da <E131Bridge::Run()+0x4a>
 800d176:	4620      	mov	r0, r4
 800d178:	f7ff fdd8 	bl	800cd2c <E131Bridge::HandleDmx()>
 800d17c:	e7ad      	b.n	800d0da <E131Bridge::Run()+0x4a>
 800d17e:	2a08      	cmp	r2, #8
 800d180:	d1ab      	bne.n	800d0da <E131Bridge::Run()+0x4a>
 800d182:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800d186:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d18a:	d1a6      	bne.n	800d0da <E131Bridge::Run()+0x4a>
 800d18c:	4620      	mov	r0, r4
 800d18e:	f000 f973 	bl	800d478 <E131Bridge::HandleSynchronization()>
 800d192:	e7a2      	b.n	800d0da <E131Bridge::Run()+0x4a>
 800d194:	2102      	movs	r1, #2
 800d196:	e7b4      	b.n	800d102 <E131Bridge::Run()+0x72>
 800d198:	20009d6c 	andcs	r9, r0, ip, ror #26
 800d19c:	20009d54 	andcs	r9, r0, r4, asr sp

0800d1a0 <E131Bridge::FillDiscoveryPacket()>:
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800d1a6:	b510      	push	{r4, lr}
 800d1a8:	333c      	adds	r3, #60	; 0x3c
 800d1aa:	005b      	lsls	r3, r3, #1
 800d1ac:	f8a0 3504 	strh.w	r3, [r0, #1284]	; 0x504
 800d1b0:	69c3      	ldr	r3, [r0, #28]
 800d1b2:	f503 618f 	add.w	r1, r3, #1144	; 0x478
 800d1b6:	428b      	cmp	r3, r1
 800d1b8:	d14a      	bne.n	800d250 <E131Bridge::FillDiscoveryPacket()+0xb0>
 800d1ba:	69c3      	ldr	r3, [r0, #28]
 800d1bc:	492d      	ldr	r1, [pc, #180]	; (800d274 <E131Bridge::FillDiscoveryPacket()+0xd4>)
 800d1be:	701a      	strb	r2, [r3, #0]
 800d1c0:	2210      	movs	r2, #16
 800d1c2:	705a      	strb	r2, [r3, #1]
 800d1c4:	1cda      	adds	r2, r3, #3
 800d1c6:	330f      	adds	r3, #15
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d144      	bne.n	800d256 <E131Bridge::FillDiscoveryPacket()+0xb6>
 800d1cc:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800d1d0:	69c3      	ldr	r3, [r0, #28]
 800d1d2:	3234      	adds	r2, #52	; 0x34
 800d1d4:	0052      	lsls	r2, r2, #1
 800d1d6:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800d1da:	ba52      	rev16	r2, r2
 800d1dc:	821a      	strh	r2, [r3, #16]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	749a      	strb	r2, [r3, #18]
 800d1e2:	74da      	strb	r2, [r3, #19]
 800d1e4:	751a      	strb	r2, [r3, #20]
 800d1e6:	2208      	movs	r2, #8
 800d1e8:	f100 0124 	add.w	r1, r0, #36	; 0x24
 800d1ec:	f803 2f15 	strb.w	r2, [r3, #21]!
 800d1f0:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800d1f4:	4291      	cmp	r1, r2
 800d1f6:	d133      	bne.n	800d260 <E131Bridge::FillDiscoveryPacket()+0xc0>
 800d1f8:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800d1fc:	69c3      	ldr	r3, [r0, #28]
 800d1fe:	3229      	adds	r2, #41	; 0x29
 800d200:	0052      	lsls	r2, r2, #1
 800d202:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800d206:	ba52      	rev16	r2, r2
 800d208:	84da      	strh	r2, [r3, #38]	; 0x26
 800d20a:	2200      	movs	r2, #0
 800d20c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800d210:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800d214:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800d218:	2202      	movs	r2, #2
 800d21a:	f803 2f2b 	strb.w	r2, [r3, #43]!
 800d21e:	f100 0274 	add.w	r2, r0, #116	; 0x74
 800d222:	4291      	cmp	r1, r2
 800d224:	d121      	bne.n	800d26a <E131Bridge::FillDiscoveryPacket()+0xca>
 800d226:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800d22a:	69c2      	ldr	r2, [r0, #28]
 800d22c:	3304      	adds	r3, #4
 800d22e:	005b      	lsls	r3, r3, #1
 800d230:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800d234:	ba5b      	rev16	r3, r3
 800d236:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
 800d23a:	2300      	movs	r3, #0
 800d23c:	f882 3072 	strb.w	r3, [r2, #114]	; 0x72
 800d240:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
 800d244:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
 800d248:	2301      	movs	r3, #1
 800d24a:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
 800d24e:	bd10      	pop	{r4, pc}
 800d250:	f803 2b01 	strb.w	r2, [r3], #1
 800d254:	e7af      	b.n	800d1b6 <E131Bridge::FillDiscoveryPacket()+0x16>
 800d256:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d25a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d25e:	e7b3      	b.n	800d1c8 <E131Bridge::FillDiscoveryPacket()+0x28>
 800d260:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d264:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d268:	e7c4      	b.n	800d1f4 <E131Bridge::FillDiscoveryPacket()+0x54>
 800d26a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d26e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d272:	e7d6      	b.n	800d222 <E131Bridge::FillDiscoveryPacket()+0x82>
 800d274:	08016c71 	stmdaeq	r1, {r0, r4, r5, r6, sl, fp, sp, lr}

0800d278 <E131Bridge::SendDiscoveryPacket()>:
 800d278:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d27a:	f242 710f 	movw	r1, #9999	; 0x270f
 800d27e:	68c2      	ldr	r2, [r0, #12]
 800d280:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
 800d284:	4604      	mov	r4, r0
 800d286:	1ad3      	subs	r3, r2, r3
 800d288:	428b      	cmp	r3, r1
 800d28a:	d924      	bls.n	800d2d6 <E131Bridge::SendDiscoveryPacket()+0x5e>
 800d28c:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800d290:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
 800d294:	b1ab      	cbz	r3, 800d2c2 <E131Bridge::SendDiscoveryPacket()+0x4a>
 800d296:	2500      	movs	r5, #0
 800d298:	462e      	mov	r6, r5
 800d29a:	2300      	movs	r3, #0
 800d29c:	4629      	mov	r1, r5
 800d29e:	4620      	mov	r0, r4
 800d2a0:	f10d 020e 	add.w	r2, sp, #14
 800d2a4:	f7ff fc0a 	bl	800cabc <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800d2a8:	b140      	cbz	r0, 800d2bc <E131Bridge::SendDiscoveryPacket()+0x44>
 800d2aa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800d2ae:	69e2      	ldr	r2, [r4, #28]
 800d2b0:	f106 013c 	add.w	r1, r6, #60	; 0x3c
 800d2b4:	ba5b      	rev16	r3, r3
 800d2b6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800d2ba:	3601      	adds	r6, #1
 800d2bc:	3501      	adds	r5, #1
 800d2be:	2d04      	cmp	r5, #4
 800d2c0:	d1eb      	bne.n	800d29a <E131Bridge::SendDiscoveryPacket()+0x22>
 800d2c2:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800d2c6:	f8b4 2504 	ldrh.w	r2, [r4, #1284]	; 0x504
 800d2ca:	9300      	str	r3, [sp, #0]
 800d2cc:	69e1      	ldr	r1, [r4, #28]
 800d2ce:	6a23      	ldr	r3, [r4, #32]
 800d2d0:	7820      	ldrb	r0, [r4, #0]
 800d2d2:	f002 ff29 	bl	8010128 <udp_send>
 800d2d6:	b004      	add	sp, #16
 800d2d8:	bd70      	pop	{r4, r5, r6, pc}

0800d2da <memcpy.isra.0>:
 800d2da:	3801      	subs	r0, #1
 800d2dc:	440a      	add	r2, r1
 800d2de:	4291      	cmp	r1, r2
 800d2e0:	d100      	bne.n	800d2e4 <memcpy.isra.0+0xa>
 800d2e2:	4770      	bx	lr
 800d2e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2e8:	f800 3f01 	strb.w	r3, [r0, #1]!
 800d2ec:	e7f7      	b.n	800d2de <memcpy.isra.0+0x4>
	...

0800d2f0 <E131Bridge::FillDataPacket()>:
 800d2f0:	b570      	push	{r4, r5, r6, lr}
 800d2f2:	2400      	movs	r4, #0
 800d2f4:	2610      	movs	r6, #16
 800d2f6:	4605      	mov	r5, r0
 800d2f8:	6980      	ldr	r0, [r0, #24]
 800d2fa:	220c      	movs	r2, #12
 800d2fc:	7046      	strb	r6, [r0, #1]
 800d2fe:	7004      	strb	r4, [r0, #0]
 800d300:	7084      	strb	r4, [r0, #2]
 800d302:	70c4      	strb	r4, [r0, #3]
 800d304:	491c      	ldr	r1, [pc, #112]	; (800d378 <E131Bridge::FillDataPacket()+0x88>)
 800d306:	3004      	adds	r0, #4
 800d308:	f7ff ffe7 	bl	800d2da <memcpy.isra.0>
 800d30c:	2304      	movs	r3, #4
 800d30e:	4632      	mov	r2, r6
 800d310:	2602      	movs	r6, #2
 800d312:	69a8      	ldr	r0, [r5, #24]
 800d314:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800d318:	7543      	strb	r3, [r0, #21]
 800d31a:	7484      	strb	r4, [r0, #18]
 800d31c:	74c4      	strb	r4, [r0, #19]
 800d31e:	7504      	strb	r4, [r0, #20]
 800d320:	3016      	adds	r0, #22
 800d322:	f7ff ffda 	bl	800d2da <memcpy.isra.0>
 800d326:	69a8      	ldr	r0, [r5, #24]
 800d328:	2240      	movs	r2, #64	; 0x40
 800d32a:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
 800d32e:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
 800d332:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
 800d336:	f880 602b 	strb.w	r6, [r0, #43]	; 0x2b
 800d33a:	f105 0134 	add.w	r1, r5, #52	; 0x34
 800d33e:	302c      	adds	r0, #44	; 0x2c
 800d340:	f7ff ffcb 	bl	800d2da <memcpy.isra.0>
 800d344:	22a1      	movs	r2, #161	; 0xa1
 800d346:	69ab      	ldr	r3, [r5, #24]
 800d348:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
 800d34c:	f883 406d 	strb.w	r4, [r3, #109]	; 0x6d
 800d350:	f883 406e 	strb.w	r4, [r3, #110]	; 0x6e
 800d354:	69ab      	ldr	r3, [r5, #24]
 800d356:	f883 6075 	strb.w	r6, [r3, #117]	; 0x75
 800d35a:	69ab      	ldr	r3, [r5, #24]
 800d35c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800d360:	2201      	movs	r2, #1
 800d362:	69ab      	ldr	r3, [r5, #24]
 800d364:	f883 4077 	strb.w	r4, [r3, #119]	; 0x77
 800d368:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
 800d36c:	f883 4079 	strb.w	r4, [r3, #121]	; 0x79
 800d370:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 800d374:	bd70      	pop	{r4, r5, r6, pc}
 800d376:	bf00      	nop
 800d378:	08016c71 	stmdaeq	r1, {r0, r4, r5, r6, sl, fp, sp, lr}

0800d37c <E131Bridge::HandleDmxIn()>:
 800d37c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800d380:	4604      	mov	r4, r0
 800d382:	4605      	mov	r5, r0
 800d384:	2600      	movs	r6, #0
 800d386:	4f3b      	ldr	r7, [pc, #236]	; (800d474 <E131Bridge::HandleDmxIn()+0xf8>)
 800d388:	f895 3626 	ldrb.w	r3, [r5, #1574]	; 0x626
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d058      	beq.n	800d442 <E131Bridge::HandleDmxIn()+0xc6>
 800d390:	6960      	ldr	r0, [r4, #20]
 800d392:	4631      	mov	r1, r6
 800d394:	6803      	ldr	r3, [r0, #0]
 800d396:	aa02      	add	r2, sp, #8
 800d398:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800d39c:	ab03      	add	r3, sp, #12
 800d39e:	47c0      	blx	r8
 800d3a0:	4601      	mov	r1, r0
 800d3a2:	2800      	cmp	r0, #0
 800d3a4:	d055      	beq.n	800d452 <E131Bridge::HandleDmxIn()+0xd6>
 800d3a6:	9a02      	ldr	r2, [sp, #8]
 800d3a8:	69a0      	ldr	r0, [r4, #24]
 800d3aa:	b293      	uxth	r3, r2
 800d3ac:	f103 0c6d 	add.w	ip, r3, #109	; 0x6d
 800d3b0:	f44c 4ce0 	orr.w	ip, ip, #28672	; 0x7000
 800d3b4:	fa9c fc9c 	rev16.w	ip, ip
 800d3b8:	f8a0 c010 	strh.w	ip, [r0, #16]
 800d3bc:	f103 0c57 	add.w	ip, r3, #87	; 0x57
 800d3c0:	f44c 4ce0 	orr.w	ip, ip, #28672	; 0x7000
 800d3c4:	fa9c fc9c 	rev16.w	ip, ip
 800d3c8:	f8a0 c026 	strh.w	ip, [r0, #38]	; 0x26
 800d3cc:	f895 c62d 	ldrb.w	ip, [r5, #1581]	; 0x62d
 800d3d0:	330a      	adds	r3, #10
 800d3d2:	f880 c06c 	strb.w	ip, [r0, #108]	; 0x6c
 800d3d6:	f895 c62c 	ldrb.w	ip, [r5, #1580]	; 0x62c
 800d3da:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800d3de:	f10c 0001 	add.w	r0, ip, #1
 800d3e2:	f885 062c 	strb.w	r0, [r5, #1580]	; 0x62c
 800d3e6:	69a0      	ldr	r0, [r4, #24]
 800d3e8:	ba5b      	rev16	r3, r3
 800d3ea:	f880 c06f 	strb.w	ip, [r0, #111]	; 0x6f
 800d3ee:	f8b5 c624 	ldrh.w	ip, [r5, #1572]	; 0x624
 800d3f2:	69a0      	ldr	r0, [r4, #24]
 800d3f4:	fa9c fc9c 	rev16.w	ip, ip
 800d3f8:	f8a0 c071 	strh.w	ip, [r0, #113]	; 0x71
 800d3fc:	f8a0 3073 	strh.w	r3, [r0, #115]	; 0x73
 800d400:	307d      	adds	r0, #125	; 0x7d
 800d402:	f7ff ff6a 	bl	800d2da <memcpy.isra.0>
 800d406:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800d40a:	69a1      	ldr	r1, [r4, #24]
 800d40c:	ba53      	rev16	r3, r2
 800d40e:	f8a1 307b 	strh.w	r3, [r1, #123]	; 0x7b
 800d412:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800d416:	327d      	adds	r2, #125	; 0x7d
 800d418:	9300      	str	r3, [sp, #0]
 800d41a:	f8d5 3628 	ldr.w	r3, [r5, #1576]	; 0x628
 800d41e:	b292      	uxth	r2, r2
 800d420:	7820      	ldrb	r0, [r4, #0]
 800d422:	f002 fe81 	bl	8010128 <udp_send>
 800d426:	2301      	movs	r3, #1
 800d428:	683a      	ldr	r2, [r7, #0]
 800d42a:	40b3      	lsls	r3, r6
 800d42c:	ea33 0102 	bics.w	r1, r3, r2
 800d430:	d007      	beq.n	800d442 <E131Bridge::HandleDmxIn()+0xc6>
 800d432:	4313      	orrs	r3, r2
 800d434:	603b      	str	r3, [r7, #0]
 800d436:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800d43a:	f043 0301 	orr.w	r3, r3, #1
 800d43e:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800d442:	3601      	adds	r6, #1
 800d444:	2e04      	cmp	r6, #4
 800d446:	f105 050c 	add.w	r5, r5, #12
 800d44a:	d19d      	bne.n	800d388 <E131Bridge::HandleDmxIn()+0xc>
 800d44c:	b004      	add	sp, #16
 800d44e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d452:	9b03      	ldr	r3, [sp, #12]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d1f4      	bne.n	800d442 <E131Bridge::HandleDmxIn()+0xc6>
 800d458:	2201      	movs	r2, #1
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	40b2      	lsls	r2, r6
 800d45e:	ea23 0302 	bic.w	r3, r3, r2
 800d462:	603b      	str	r3, [r7, #0]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d1ec      	bne.n	800d442 <E131Bridge::HandleDmxIn()+0xc6>
 800d468:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800d46c:	f023 0301 	bic.w	r3, r3, #1
 800d470:	e7e5      	b.n	800d43e <E131Bridge::HandleDmxIn()+0xc2>
 800d472:	bf00      	nop
 800d474:	200018dc 	ldrdcs	r1, [r0], -ip

0800d478 <E131Bridge::HandleSynchronization()>:
 800d478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d47c:	f8b0 30a9 	ldrh.w	r3, [r0, #169]	; 0xa9
 800d480:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800d484:	ba5b      	rev16	r3, r3
 800d486:	b29b      	uxth	r3, r3
 800d488:	429a      	cmp	r2, r3
 800d48a:	4604      	mov	r4, r0
 800d48c:	d00a      	beq.n	800d4a4 <E131Bridge::HandleSynchronization()+0x2c>
 800d48e:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800d492:	429a      	cmp	r2, r3
 800d494:	d006      	beq.n	800d4a4 <E131Bridge::HandleSynchronization()+0x2c>
 800d496:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d49a:	4b23      	ldr	r3, [pc, #140]	; (800d528 <E131Bridge::HandleSynchronization()+0xb0>)
 800d49c:	2102      	movs	r1, #2
 800d49e:	6818      	ldr	r0, [r3, #0]
 800d4a0:	f006 bc7a 	b.w	8013d98 <LedBlink::SetMode(ledblink::Mode)>
 800d4a4:	2500      	movs	r5, #0
 800d4a6:	4627      	mov	r7, r4
 800d4a8:	46a9      	mov	r9, r5
 800d4aa:	68e3      	ldr	r3, [r4, #12]
 800d4ac:	4e1f      	ldr	r6, [pc, #124]	; (800d52c <E131Bridge::HandleSynchronization()+0xb4>)
 800d4ae:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800d530 <E131Bridge::HandleSynchronization()+0xb8>
 800d4b2:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
 800d4b6:	f897 3516 	ldrb.w	r3, [r7, #1302]	; 0x516
 800d4ba:	b323      	cbz	r3, 800d506 <E131Bridge::HandleSynchronization()+0x8e>
 800d4bc:	f8d8 3000 	ldr.w	r3, [r8]
 800d4c0:	6860      	ldr	r0, [r4, #4]
 800d4c2:	07da      	lsls	r2, r3, #31
 800d4c4:	bf5c      	itt	pl
 800d4c6:	2301      	movpl	r3, #1
 800d4c8:	f8c8 3000 	strpl.w	r3, [r8]
 800d4cc:	6803      	ldr	r3, [r0, #0]
 800d4ce:	4629      	mov	r1, r5
 800d4d0:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800d4d4:	f506 6280 	add.w	r2, r6, #1024	; 0x400
 800d4d8:	f8d6 3600 	ldr.w	r3, [r6, #1536]	; 0x600
 800d4dc:	47d0      	blx	sl
 800d4de:	f897 3556 	ldrb.w	r3, [r7, #1366]	; 0x556
 800d4e2:	b93b      	cbnz	r3, 800d4f4 <E131Bridge::HandleSynchronization()+0x7c>
 800d4e4:	6860      	ldr	r0, [r4, #4]
 800d4e6:	4629      	mov	r1, r5
 800d4e8:	6803      	ldr	r3, [r0, #0]
 800d4ea:	689b      	ldr	r3, [r3, #8]
 800d4ec:	4798      	blx	r3
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
 800d4f4:	f8d8 3000 	ldr.w	r3, [r8]
 800d4f8:	f8c6 9600 	str.w	r9, [r6, #1536]	; 0x600
 800d4fc:	07db      	lsls	r3, r3, #31
 800d4fe:	bf5c      	itt	pl
 800d500:	2301      	movpl	r3, #1
 800d502:	f8c8 3000 	strpl.w	r3, [r8]
 800d506:	3501      	adds	r5, #1
 800d508:	2d04      	cmp	r5, #4
 800d50a:	f107 0744 	add.w	r7, r7, #68	; 0x44
 800d50e:	f206 6604 	addw	r6, r6, #1540	; 0x604
 800d512:	d1d0      	bne.n	800d4b6 <E131Bridge::HandleSynchronization()+0x3e>
 800d514:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800d516:	b120      	cbz	r0, 800d522 <E131Bridge::HandleSynchronization()+0xaa>
 800d518:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d51c:	6803      	ldr	r3, [r0, #0]
 800d51e:	689b      	ldr	r3, [r3, #8]
 800d520:	4718      	bx	r3
 800d522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d526:	bf00      	nop
 800d528:	20009d54 	andcs	r9, r0, r4, asr sp
 800d52c:	200000b4 	strhcs	r0, [r0], -r4
 800d530:	200000b0 	strhcs	r0, [r0], -r0	; <UNPREDICTABLE>

0800d534 <E131Bridge::Print()>:
 800d534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d538:	2500      	movs	r5, #0
 800d53a:	4604      	mov	r4, r0
 800d53c:	b08c      	sub	sp, #48	; 0x30
 800d53e:	a902      	add	r1, sp, #8
 800d540:	3024      	adds	r0, #36	; 0x24
 800d542:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800d546:	f000 fbe3 	bl	800dd10 <uuid_unparse>
 800d54a:	482c      	ldr	r0, [pc, #176]	; (800d5fc <E131Bridge::Print()+0xc8>)
 800d54c:	f7fb fd28 	bl	8008fa0 <printf>
 800d550:	4b2b      	ldr	r3, [pc, #172]	; (800d600 <E131Bridge::Print()+0xcc>)
 800d552:	482c      	ldr	r0, [pc, #176]	; (800d604 <E131Bridge::Print()+0xd0>)
 800d554:	7819      	ldrb	r1, [r3, #0]
 800d556:	785a      	ldrb	r2, [r3, #1]
 800d558:	f7fb fd22 	bl	8008fa0 <printf>
 800d55c:	482a      	ldr	r0, [pc, #168]	; (800d608 <E131Bridge::Print()+0xd4>)
 800d55e:	a902      	add	r1, sp, #8
 800d560:	f7fb fd1e 	bl	8008fa0 <printf>
 800d564:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800d568:	b303      	cbz	r3, 800d5ac <E131Bridge::Print()+0x78>
 800d56a:	4828      	ldr	r0, [pc, #160]	; (800d60c <E131Bridge::Print()+0xd8>)
 800d56c:	f7fb fd18 	bl	8008fa0 <printf>
 800d570:	4e27      	ldr	r6, [pc, #156]	; (800d610 <E131Bridge::Print()+0xdc>)
 800d572:	4f28      	ldr	r7, [pc, #160]	; (800d614 <E131Bridge::Print()+0xe0>)
 800d574:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800d618 <E131Bridge::Print()+0xe4>
 800d578:	2301      	movs	r3, #1
 800d57a:	4629      	mov	r1, r5
 800d57c:	4620      	mov	r0, r4
 800d57e:	f10d 0206 	add.w	r2, sp, #6
 800d582:	f7ff fa9b 	bl	800cabc <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800d586:	b170      	cbz	r0, 800d5a6 <E131Bridge::Print()+0x72>
 800d588:	2344      	movs	r3, #68	; 0x44
 800d58a:	436b      	muls	r3, r5
 800d58c:	f504 62aa 	add.w	r2, r4, #1360	; 0x550
 800d590:	58d3      	ldr	r3, [r2, r3]
 800d592:	4629      	mov	r1, r5
 800d594:	2b00      	cmp	r3, #0
 800d596:	bf0c      	ite	eq
 800d598:	4633      	moveq	r3, r6
 800d59a:	463b      	movne	r3, r7
 800d59c:	4640      	mov	r0, r8
 800d59e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d5a2:	f7fb fcfd 	bl	8008fa0 <printf>
 800d5a6:	3501      	adds	r5, #1
 800d5a8:	2d04      	cmp	r5, #4
 800d5aa:	d1e5      	bne.n	800d578 <E131Bridge::Print()+0x44>
 800d5ac:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800d5b0:	b1d3      	cbz	r3, 800d5e8 <E131Bridge::Print()+0xb4>
 800d5b2:	481a      	ldr	r0, [pc, #104]	; (800d61c <E131Bridge::Print()+0xe8>)
 800d5b4:	f7fb fcf4 	bl	8008fa0 <printf>
 800d5b8:	2500      	movs	r5, #0
 800d5ba:	4e19      	ldr	r6, [pc, #100]	; (800d620 <E131Bridge::Print()+0xec>)
 800d5bc:	2300      	movs	r3, #0
 800d5be:	4629      	mov	r1, r5
 800d5c0:	4620      	mov	r0, r4
 800d5c2:	f10d 0206 	add.w	r2, sp, #6
 800d5c6:	f7ff fa79 	bl	800cabc <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800d5ca:	b150      	cbz	r0, 800d5e2 <E131Bridge::Print()+0xae>
 800d5cc:	230c      	movs	r3, #12
 800d5ce:	436b      	muls	r3, r5
 800d5d0:	f204 622d 	addw	r2, r4, #1581	; 0x62d
 800d5d4:	5cd3      	ldrb	r3, [r2, r3]
 800d5d6:	4629      	mov	r1, r5
 800d5d8:	4630      	mov	r0, r6
 800d5da:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d5de:	f7fb fcdf 	bl	8008fa0 <printf>
 800d5e2:	3501      	adds	r5, #1
 800d5e4:	2d04      	cmp	r5, #4
 800d5e6:	d1e9      	bne.n	800d5bc <E131Bridge::Print()+0x88>
 800d5e8:	f894 34fa 	ldrb.w	r3, [r4, #1274]	; 0x4fa
 800d5ec:	b113      	cbz	r3, 800d5f4 <E131Bridge::Print()+0xc0>
 800d5ee:	480d      	ldr	r0, [pc, #52]	; (800d624 <E131Bridge::Print()+0xf0>)
 800d5f0:	f7fb fcd6 	bl	8008fa0 <printf>
 800d5f4:	b00c      	add	sp, #48	; 0x30
 800d5f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5fa:	bf00      	nop
 800d5fc:	08016b78 	stmdaeq	r1, {r3, r4, r5, r6, r8, r9, fp, sp, lr}
 800d600:	08016c7d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, sl, fp, sp, lr}
 800d604:	08016b80 	stmdaeq	r1, {r7, r8, r9, fp, sp, lr}
 800d608:	08016b93 	stmdaeq	r1, {r0, r1, r4, r7, r8, r9, fp, sp, lr}
 800d60c:	0801695e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, fp, sp, lr}
 800d610:	08016902 	stmdaeq	r1, {r1, r8, fp, sp, lr}
 800d614:	08016906 	stmdaeq	r1, {r1, r2, r8, fp, sp, lr}
 800d618:	08016ba3 	stmdaeq	r1, {r0, r1, r5, r7, r8, r9, fp, sp, lr}
 800d61c:	08016982 	stmdaeq	r1, {r1, r7, r8, fp, sp, lr}
 800d620:	08016bc2 	stmdaeq	r1, {r1, r6, r7, r8, r9, fp, sp, lr}
 800d624:	08016be1 	stmdaeq	r1, {r0, r5, r6, r7, r8, r9, fp, sp, lr}

0800d628 <memcmp>:
 800d628:	4402      	add	r2, r0
 800d62a:	4290      	cmp	r0, r2
 800d62c:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 800d630:	d106      	bne.n	800d640 <memcmp+0x18>
 800d632:	2000      	movs	r0, #0
 800d634:	4770      	bx	lr
 800d636:	3001      	adds	r0, #1
 800d638:	4290      	cmp	r0, r2
 800d63a:	d102      	bne.n	800d642 <memcmp+0x1a>
 800d63c:	2000      	movs	r0, #0
 800d63e:	e006      	b.n	800d64e <memcmp+0x26>
 800d640:	b510      	push	{r4, lr}
 800d642:	7803      	ldrb	r3, [r0, #0]
 800d644:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d648:	42a3      	cmp	r3, r4
 800d64a:	d0f4      	beq.n	800d636 <memcmp+0xe>
 800d64c:	1b18      	subs	r0, r3, r4
 800d64e:	bd10      	pop	{r4, pc}

0800d650 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800d650:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d652:	88c6      	ldrh	r6, [r0, #6]
 800d654:	8885      	ldrh	r5, [r0, #4]
 800d656:	42ae      	cmp	r6, r5
 800d658:	d216      	bcs.n	800d688 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800d65a:	4604      	mov	r4, r0
 800d65c:	6800      	ldr	r0, [r0, #0]
 800d65e:	1bad      	subs	r5, r5, r6
 800d660:	4430      	add	r0, r6
 800d662:	7a26      	ldrb	r6, [r4, #8]
 800d664:	b923      	cbnz	r3, 800d670 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800d666:	b926      	cbnz	r6, 800d672 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800d668:	9200      	str	r2, [sp, #0]
 800d66a:	460b      	mov	r3, r1
 800d66c:	4a09      	ldr	r2, [pc, #36]	; (800d694 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800d66e:	e003      	b.n	800d678 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800d670:	b166      	cbz	r6, 800d68c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800d672:	460b      	mov	r3, r1
 800d674:	9200      	str	r2, [sp, #0]
 800d676:	4a08      	ldr	r2, [pc, #32]	; (800d698 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800d678:	4629      	mov	r1, r5
 800d67a:	f7fb fcb9 	bl	8008ff0 <snprintf>
 800d67e:	4285      	cmp	r5, r0
 800d680:	bfa2      	ittt	ge
 800d682:	88e3      	ldrhge	r3, [r4, #6]
 800d684:	181b      	addge	r3, r3, r0
 800d686:	80e3      	strhge	r3, [r4, #6]
 800d688:	b002      	add	sp, #8
 800d68a:	bd70      	pop	{r4, r5, r6, pc}
 800d68c:	9200      	str	r2, [sp, #0]
 800d68e:	460b      	mov	r3, r1
 800d690:	4a02      	ldr	r2, [pc, #8]	; (800d69c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800d692:	e7f1      	b.n	800d678 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800d694:	080166a4 	stmdaeq	r1, {r2, r5, r7, r9, sl, sp, lr}
 800d698:	08016699 	stmdaeq	r1, {r0, r3, r4, r7, r9, sl, sp, lr}
 800d69c:	080166a5 	stmdaeq	r1, {r0, r2, r5, r7, r9, sl, sp, lr}

0800d6a0 <E131Params::E131Params(E131ParamsStore*)>:
 800d6a0:	b510      	push	{r4, lr}
 800d6a2:	2219      	movs	r2, #25
 800d6a4:	4604      	mov	r4, r0
 800d6a6:	f840 1b04 	str.w	r1, [r0], #4
 800d6aa:	2100      	movs	r1, #0
 800d6ac:	f006 fd04 	bl	80140b8 <memset>
 800d6b0:	2201      	movs	r2, #1
 800d6b2:	72e2      	strb	r2, [r4, #11]
 800d6b4:	2202      	movs	r2, #2
 800d6b6:	f04f 3364 	mov.w	r3, #1684300900	; 0x64646464
 800d6ba:	f8a4 200d 	strh.w	r2, [r4, #13]
 800d6be:	2203      	movs	r2, #3
 800d6c0:	f8c4 301f 	str.w	r3, [r4, #31]
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	2155      	movs	r1, #85	; 0x55
 800d6c8:	f8a4 200f 	strh.w	r2, [r4, #15]
 800d6cc:	2204      	movs	r2, #4
 800d6ce:	7323      	strb	r3, [r4, #12]
 800d6d0:	77a3      	strb	r3, [r4, #30]
 800d6d2:	4b04      	ldr	r3, [pc, #16]	; (800d6e4 <E131Params::E131Params(E131ParamsStore*)+0x44>)
 800d6d4:	7761      	strb	r1, [r4, #29]
 800d6d6:	6819      	ldr	r1, [r3, #0]
 800d6d8:	f8a4 2011 	strh.w	r2, [r4, #17]
 800d6dc:	b901      	cbnz	r1, 800d6e0 <E131Params::E131Params(E131ParamsStore*)+0x40>
 800d6de:	601a      	str	r2, [r3, #0]
 800d6e0:	4620      	mov	r0, r4
 800d6e2:	bd10      	pop	{r4, pc}
 800d6e4:	200018e0 	andcs	r1, r0, r0, ror #17

0800d6e8 <E131Params::Load(char const*, unsigned int)>:
 800d6e8:	6803      	ldr	r3, [r0, #0]
 800d6ea:	b1d3      	cbz	r3, 800d722 <E131Params::Load(char const*, unsigned int)+0x3a>
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d6f0:	460d      	mov	r5, r1
 800d6f2:	4616      	mov	r6, r2
 800d6f4:	4604      	mov	r4, r0
 800d6f6:	6043      	str	r3, [r0, #4]
 800d6f8:	4602      	mov	r2, r0
 800d6fa:	490a      	ldr	r1, [pc, #40]	; (800d724 <E131Params::Load(char const*, unsigned int)+0x3c>)
 800d6fc:	4668      	mov	r0, sp
 800d6fe:	f005 fe81 	bl	8013404 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800d702:	4632      	mov	r2, r6
 800d704:	4629      	mov	r1, r5
 800d706:	4668      	mov	r0, sp
 800d708:	f005 fe80 	bl	801340c <ReadConfigFile::Read(char const*, unsigned int)>
 800d70c:	4621      	mov	r1, r4
 800d70e:	f851 0b04 	ldr.w	r0, [r1], #4
 800d712:	6803      	ldr	r3, [r0, #0]
 800d714:	689b      	ldr	r3, [r3, #8]
 800d716:	4798      	blx	r3
 800d718:	4668      	mov	r0, sp
 800d71a:	f005 fe76 	bl	801340a <ReadConfigFile::~ReadConfigFile()>
 800d71e:	b002      	add	sp, #8
 800d720:	bd70      	pop	{r4, r5, r6, pc}
 800d722:	4770      	bx	lr
 800d724:	0800d9bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8, fp, ip, lr, pc}

0800d728 <E131Params::callbackFunction(char const*)>:
 800d728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d72c:	460e      	mov	r6, r1
 800d72e:	2708      	movs	r7, #8
 800d730:	b087      	sub	sp, #28
 800d732:	4604      	mov	r4, r0
 800d734:	4997      	ldr	r1, [pc, #604]	; (800d994 <E131Params::callbackFunction(char const*)+0x26c>)
 800d736:	4630      	mov	r0, r6
 800d738:	ab01      	add	r3, sp, #4
 800d73a:	eb0d 0207 	add.w	r2, sp, r7
 800d73e:	9701      	str	r7, [sp, #4]
 800d740:	f005 fe98 	bl	8013474 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800d744:	bb68      	cbnz	r0, 800d7a2 <E131Params::callbackFunction(char const*)+0x7a>
 800d746:	2204      	movs	r2, #4
 800d748:	4993      	ldr	r1, [pc, #588]	; (800d998 <E131Params::callbackFunction(char const*)+0x270>)
 800d74a:	eb0d 0007 	add.w	r0, sp, r7
 800d74e:	f7ff ff6b 	bl	800d628 <memcmp>
 800d752:	6865      	ldr	r5, [r4, #4]
 800d754:	b1a0      	cbz	r0, 800d780 <E131Params::callbackFunction(char const*)+0x58>
 800d756:	2203      	movs	r2, #3
 800d758:	4990      	ldr	r1, [pc, #576]	; (800d99c <E131Params::callbackFunction(char const*)+0x274>)
 800d75a:	eb0d 0007 	add.w	r0, sp, r7
 800d75e:	f7ff ff63 	bl	800d628 <memcmp>
 800d762:	b1b0      	cbz	r0, 800d792 <E131Params::callbackFunction(char const*)+0x6a>
 800d764:	2202      	movs	r2, #2
 800d766:	498e      	ldr	r1, [pc, #568]	; (800d9a0 <E131Params::callbackFunction(char const*)+0x278>)
 800d768:	eb0d 0007 	add.w	r0, sp, r7
 800d76c:	f7ff ff5c 	bl	800d628 <memcmp>
 800d770:	b198      	cbz	r0, 800d79a <E131Params::callbackFunction(char const*)+0x72>
 800d772:	463a      	mov	r2, r7
 800d774:	498b      	ldr	r1, [pc, #556]	; (800d9a4 <E131Params::callbackFunction(char const*)+0x27c>)
 800d776:	eb0d 0007 	add.w	r0, sp, r7
 800d77a:	f7ff ff55 	bl	800d628 <memcmp>
 800d77e:	b170      	cbz	r0, 800d79e <E131Params::callbackFunction(char const*)+0x76>
 800d780:	2300      	movs	r3, #0
 800d782:	f025 0501 	bic.w	r5, r5, #1
 800d786:	6065      	str	r5, [r4, #4]
 800d788:	f8a4 3009 	strh.w	r3, [r4, #9]
 800d78c:	b007      	add	sp, #28
 800d78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d792:	2301      	movs	r3, #1
 800d794:	f045 0501 	orr.w	r5, r5, #1
 800d798:	e7f5      	b.n	800d786 <E131Params::callbackFunction(char const*)+0x5e>
 800d79a:	2302      	movs	r3, #2
 800d79c:	e7fa      	b.n	800d794 <E131Params::callbackFunction(char const*)+0x6c>
 800d79e:	2303      	movs	r3, #3
 800d7a0:	e7f8      	b.n	800d794 <E131Params::callbackFunction(char const*)+0x6c>
 800d7a2:	2500      	movs	r5, #0
 800d7a4:	f8df 9200 	ldr.w	r9, [pc, #512]	; 800d9a8 <E131Params::callbackFunction(char const*)+0x280>
 800d7a8:	f8df 8200 	ldr.w	r8, [pc, #512]	; 800d9ac <E131Params::callbackFunction(char const*)+0x284>
 800d7ac:	f8df a200 	ldr.w	sl, [pc, #512]	; 800d9b0 <E131Params::callbackFunction(char const*)+0x288>
 800d7b0:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d9b4 <E131Params::callbackFunction(char const*)+0x28c>
 800d7b4:	4649      	mov	r1, r9
 800d7b6:	4630      	mov	r0, r6
 800d7b8:	f10d 0202 	add.w	r2, sp, #2
 800d7bc:	f005 ff17 	bl	80135ee <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800d7c0:	b9d8      	cbnz	r0, 800d7fa <E131Params::callbackFunction(char const*)+0xd2>
 800d7c2:	f64f 16fe 	movw	r6, #63998	; 0xf9fe
 800d7c6:	2310      	movs	r3, #16
 800d7c8:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 800d7cc:	6861      	ldr	r1, [r4, #4]
 800d7ce:	1e42      	subs	r2, r0, #1
 800d7d0:	b292      	uxth	r2, r2
 800d7d2:	42b2      	cmp	r2, r6
 800d7d4:	fa03 f305 	lsl.w	r3, r3, r5
 800d7d8:	ea4f 0245 	mov.w	r2, r5, lsl #1
 800d7dc:	d907      	bls.n	800d7ee <E131Params::callbackFunction(char const*)+0xc6>
 800d7de:	3501      	adds	r5, #1
 800d7e0:	4422      	add	r2, r4
 800d7e2:	ea21 0103 	bic.w	r1, r1, r3
 800d7e6:	f8a2 500b 	strh.w	r5, [r2, #11]
 800d7ea:	6061      	str	r1, [r4, #4]
 800d7ec:	e7ce      	b.n	800d78c <E131Params::callbackFunction(char const*)+0x64>
 800d7ee:	4422      	add	r2, r4
 800d7f0:	f8a2 000b 	strh.w	r0, [r2, #11]
 800d7f4:	430b      	orrs	r3, r1
 800d7f6:	6063      	str	r3, [r4, #4]
 800d7f8:	e7c8      	b.n	800d78c <E131Params::callbackFunction(char const*)+0x64>
 800d7fa:	2712      	movs	r7, #18
 800d7fc:	2303      	movs	r3, #3
 800d7fe:	436f      	muls	r7, r5
 800d800:	9301      	str	r3, [sp, #4]
 800d802:	4630      	mov	r0, r6
 800d804:	ab01      	add	r3, sp, #4
 800d806:	aa02      	add	r2, sp, #8
 800d808:	eb0a 0107 	add.w	r1, sl, r7
 800d80c:	f005 fe32 	bl	8013474 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800d810:	bb00      	cbnz	r0, 800d854 <E131Params::callbackFunction(char const*)+0x12c>
 800d812:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d816:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800d81a:	40ab      	lsls	r3, r5
 800d81c:	f041 0120 	orr.w	r1, r1, #32
 800d820:	296c      	cmp	r1, #108	; 0x6c
 800d822:	6862      	ldr	r2, [r4, #4]
 800d824:	4425      	add	r5, r4
 800d826:	d10f      	bne.n	800d848 <E131Params::callbackFunction(char const*)+0x120>
 800d828:	f89d 1009 	ldrb.w	r1, [sp, #9]
 800d82c:	f041 0120 	orr.w	r1, r1, #32
 800d830:	2974      	cmp	r1, #116	; 0x74
 800d832:	d109      	bne.n	800d848 <E131Params::callbackFunction(char const*)+0x120>
 800d834:	f89d 100a 	ldrb.w	r1, [sp, #10]
 800d838:	f041 0120 	orr.w	r1, r1, #32
 800d83c:	2970      	cmp	r1, #112	; 0x70
 800d83e:	d103      	bne.n	800d848 <E131Params::callbackFunction(char const*)+0x120>
 800d840:	2101      	movs	r1, #1
 800d842:	7529      	strb	r1, [r5, #20]
 800d844:	4313      	orrs	r3, r2
 800d846:	e7d6      	b.n	800d7f6 <E131Params::callbackFunction(char const*)+0xce>
 800d848:	2100      	movs	r1, #0
 800d84a:	ea22 0203 	bic.w	r2, r2, r3
 800d84e:	7529      	strb	r1, [r5, #20]
 800d850:	6062      	str	r2, [r4, #4]
 800d852:	e79b      	b.n	800d78c <E131Params::callbackFunction(char const*)+0x64>
 800d854:	2307      	movs	r3, #7
 800d856:	4630      	mov	r0, r6
 800d858:	9301      	str	r3, [sp, #4]
 800d85a:	aa02      	add	r2, sp, #8
 800d85c:	ab01      	add	r3, sp, #4
 800d85e:	eb0b 0107 	add.w	r1, fp, r7
 800d862:	f005 fe07 	bl	8013474 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800d866:	2800      	cmp	r0, #0
 800d868:	d15e      	bne.n	800d928 <E131Params::callbackFunction(char const*)+0x200>
 800d86a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d86e:	f043 0320 	orr.w	r3, r3, #32
 800d872:	2b69      	cmp	r3, #105	; 0x69
 800d874:	d123      	bne.n	800d8be <E131Params::callbackFunction(char const*)+0x196>
 800d876:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800d87a:	f043 0320 	orr.w	r3, r3, #32
 800d87e:	2b6e      	cmp	r3, #110	; 0x6e
 800d880:	d146      	bne.n	800d910 <E131Params::callbackFunction(char const*)+0x1e8>
 800d882:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800d886:	f043 0320 	orr.w	r3, r3, #32
 800d88a:	2b70      	cmp	r3, #112	; 0x70
 800d88c:	d140      	bne.n	800d910 <E131Params::callbackFunction(char const*)+0x1e8>
 800d88e:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800d892:	f043 0320 	orr.w	r3, r3, #32
 800d896:	2b75      	cmp	r3, #117	; 0x75
 800d898:	d13a      	bne.n	800d910 <E131Params::callbackFunction(char const*)+0x1e8>
 800d89a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800d89e:	f043 0320 	orr.w	r3, r3, #32
 800d8a2:	3b74      	subs	r3, #116	; 0x74
 800d8a4:	bf18      	it	ne
 800d8a6:	2301      	movne	r3, #1
 800d8a8:	2103      	movs	r1, #3
 800d8aa:	f8b4 201d 	ldrh.w	r2, [r4, #29]
 800d8ae:	006d      	lsls	r5, r5, #1
 800d8b0:	40a9      	lsls	r1, r5
 800d8b2:	ea22 0201 	bic.w	r2, r2, r1
 800d8b6:	bb6b      	cbnz	r3, 800d914 <E131Params::callbackFunction(char const*)+0x1ec>
 800d8b8:	f8a4 201d 	strh.w	r2, [r4, #29]
 800d8bc:	e766      	b.n	800d78c <E131Params::callbackFunction(char const*)+0x64>
 800d8be:	2b64      	cmp	r3, #100	; 0x64
 800d8c0:	d126      	bne.n	800d910 <E131Params::callbackFunction(char const*)+0x1e8>
 800d8c2:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800d8c6:	f043 0320 	orr.w	r3, r3, #32
 800d8ca:	2b69      	cmp	r3, #105	; 0x69
 800d8cc:	d120      	bne.n	800d910 <E131Params::callbackFunction(char const*)+0x1e8>
 800d8ce:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800d8d2:	f043 0320 	orr.w	r3, r3, #32
 800d8d6:	2b73      	cmp	r3, #115	; 0x73
 800d8d8:	d11a      	bne.n	800d910 <E131Params::callbackFunction(char const*)+0x1e8>
 800d8da:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800d8de:	f043 0320 	orr.w	r3, r3, #32
 800d8e2:	2b61      	cmp	r3, #97	; 0x61
 800d8e4:	d114      	bne.n	800d910 <E131Params::callbackFunction(char const*)+0x1e8>
 800d8e6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800d8ea:	f043 0320 	orr.w	r3, r3, #32
 800d8ee:	2b62      	cmp	r3, #98	; 0x62
 800d8f0:	d10e      	bne.n	800d910 <E131Params::callbackFunction(char const*)+0x1e8>
 800d8f2:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800d8f6:	f043 0320 	orr.w	r3, r3, #32
 800d8fa:	2b6c      	cmp	r3, #108	; 0x6c
 800d8fc:	d108      	bne.n	800d910 <E131Params::callbackFunction(char const*)+0x1e8>
 800d8fe:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800d902:	f043 0320 	orr.w	r3, r3, #32
 800d906:	2b65      	cmp	r3, #101	; 0x65
 800d908:	bf14      	ite	ne
 800d90a:	2301      	movne	r3, #1
 800d90c:	2302      	moveq	r3, #2
 800d90e:	e7cb      	b.n	800d8a8 <E131Params::callbackFunction(char const*)+0x180>
 800d910:	2301      	movs	r3, #1
 800d912:	e7c9      	b.n	800d8a8 <E131Params::callbackFunction(char const*)+0x180>
 800d914:	2b02      	cmp	r3, #2
 800d916:	bf15      	itete	ne
 800d918:	2301      	movne	r3, #1
 800d91a:	40ab      	lsleq	r3, r5
 800d91c:	fa03 f505 	lslne.w	r5, r3, r5
 800d920:	431a      	orreq	r2, r3
 800d922:	bf18      	it	ne
 800d924:	432a      	orrne	r2, r5
 800d926:	e7c7      	b.n	800d8b8 <E131Params::callbackFunction(char const*)+0x190>
 800d928:	4641      	mov	r1, r8
 800d92a:	4630      	mov	r0, r6
 800d92c:	f10d 0201 	add.w	r2, sp, #1
 800d930:	f005 fea4 	bl	801367c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d934:	b998      	cbnz	r0, 800d95e <E131Params::callbackFunction(char const*)+0x236>
 800d936:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800d93a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800d93e:	40aa      	lsls	r2, r5
 800d940:	1e48      	subs	r0, r1, #1
 800d942:	b2c0      	uxtb	r0, r0
 800d944:	28c7      	cmp	r0, #199	; 0xc7
 800d946:	6863      	ldr	r3, [r4, #4]
 800d948:	4425      	add	r5, r4
 800d94a:	d803      	bhi.n	800d954 <E131Params::callbackFunction(char const*)+0x22c>
 800d94c:	2964      	cmp	r1, #100	; 0x64
 800d94e:	d001      	beq.n	800d954 <E131Params::callbackFunction(char const*)+0x22c>
 800d950:	77e9      	strb	r1, [r5, #31]
 800d952:	e777      	b.n	800d844 <E131Params::callbackFunction(char const*)+0x11c>
 800d954:	2164      	movs	r1, #100	; 0x64
 800d956:	ea23 0302 	bic.w	r3, r3, r2
 800d95a:	77e9      	strb	r1, [r5, #31]
 800d95c:	e74b      	b.n	800d7f6 <E131Params::callbackFunction(char const*)+0xce>
 800d95e:	3501      	adds	r5, #1
 800d960:	2d04      	cmp	r5, #4
 800d962:	f109 0910 	add.w	r9, r9, #16
 800d966:	f108 0812 	add.w	r8, r8, #18
 800d96a:	f47f af23 	bne.w	800d7b4 <E131Params::callbackFunction(char const*)+0x8c>
 800d96e:	4630      	mov	r0, r6
 800d970:	4911      	ldr	r1, [pc, #68]	; (800d9b8 <E131Params::callbackFunction(char const*)+0x290>)
 800d972:	f10d 0201 	add.w	r2, sp, #1
 800d976:	f005 fe81 	bl	801367c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d97a:	2800      	cmp	r0, #0
 800d97c:	f47f af06 	bne.w	800d78c <E131Params::callbackFunction(char const*)+0x64>
 800d980:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d984:	6863      	ldr	r3, [r4, #4]
 800d986:	b112      	cbz	r2, 800d98e <E131Params::callbackFunction(char const*)+0x266>
 800d988:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d98c:	e733      	b.n	800d7f6 <E131Params::callbackFunction(char const*)+0xce>
 800d98e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d992:	e730      	b.n	800d7f6 <E131Params::callbackFunction(char const*)+0xce>
 800d994:	08017f8d 	stmdaeq	r1, {r0, r2, r3, r7, r8, r9, sl, fp, ip, sp, lr}
 800d998:	080169a9 	stmdaeq	r1, {r0, r3, r5, r7, r8, fp, sp, lr}
 800d99c:	080169ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, fp, sp, lr}
 800d9a0:	080169b2 	stmdaeq	r1, {r1, r4, r5, r7, r8, fp, sp, lr}
 800d9a4:	080169b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, fp, sp, lr}
 800d9a8:	08017ec9 	stmdaeq	r1, {r0, r3, r6, r7, r9, sl, fp, ip, sp, lr}
 800d9ac:	08016c20 	stmdaeq	r1, {r5, sl, fp, sp, lr}
 800d9b0:	08017f1d 	stmdaeq	r1, {r0, r2, r3, r4, r8, r9, sl, fp, ip, sp, lr}
 800d9b4:	08017f9f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r8, r9, sl, fp, ip, sp, lr}
 800d9b8:	08017f77 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}

0800d9bc <E131Params::staticCallbackFunction(void*, char const*)>:
 800d9bc:	f7ff beb4 	b.w	800d728 <E131Params::callbackFunction(char const*)>

0800d9c0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)>:
 800d9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9c4:	4604      	mov	r4, r0
 800d9c6:	4615      	mov	r5, r2
 800d9c8:	461e      	mov	r6, r3
 800d9ca:	b087      	sub	sp, #28
 800d9cc:	3004      	adds	r0, #4
 800d9ce:	2900      	cmp	r1, #0
 800d9d0:	d05f      	beq.n	800da92 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xd2>
 800d9d2:	221f      	movs	r2, #31
 800d9d4:	f006 fb59 	bl	801408a <memmove>
 800d9d8:	4633      	mov	r3, r6
 800d9da:	462a      	mov	r2, r5
 800d9dc:	4990      	ldr	r1, [pc, #576]	; (800dc20 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x260>)
 800d9de:	a803      	add	r0, sp, #12
 800d9e0:	f005 fc70 	bl	80132c4 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800d9e4:	2500      	movs	r5, #0
 800d9e6:	4f8f      	ldr	r7, [pc, #572]	; (800dc24 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x264>)
 800d9e8:	4e8f      	ldr	r6, [pc, #572]	; (800dc28 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x268>)
 800d9ea:	f8df 8240 	ldr.w	r8, [pc, #576]	; 800dc2c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x26c>
 800d9ee:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800dc30 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x270>
 800d9f2:	f8d8 2000 	ldr.w	r2, [r8]
 800d9f6:	6863      	ldr	r3, [r4, #4]
 800d9f8:	42aa      	cmp	r2, r5
 800d9fa:	d851      	bhi.n	800daa0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xe0>
 800d9fc:	f8b4 1009 	ldrh.w	r1, [r4, #9]
 800da00:	4a8c      	ldr	r2, [pc, #560]	; (800dc34 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x274>)
 800da02:	f003 0301 	and.w	r3, r3, #1
 800da06:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800da0a:	a803      	add	r0, sp, #12
 800da0c:	498a      	ldr	r1, [pc, #552]	; (800dc38 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x278>)
 800da0e:	f7ff fe1f 	bl	800d650 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800da12:	498a      	ldr	r1, [pc, #552]	; (800dc3c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x27c>)
 800da14:	a803      	add	r0, sp, #12
 800da16:	f005 fcdb 	bl	80133d0 <PropertiesBuilder::AddComment(char const*)>
 800da1a:	2500      	movs	r5, #0
 800da1c:	f44f 7b80 	mov.w	fp, #256	; 0x100
 800da20:	4e87      	ldr	r6, [pc, #540]	; (800dc40 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x280>)
 800da22:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800dc44 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x284>
 800da26:	f8df a220 	ldr.w	sl, [pc, #544]	; 800dc48 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x288>
 800da2a:	f104 0713 	add.w	r7, r4, #19
 800da2e:	f8d8 3000 	ldr.w	r3, [r8]
 800da32:	42ab      	cmp	r3, r5
 800da34:	d87f      	bhi.n	800db36 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x176>
 800da36:	4985      	ldr	r1, [pc, #532]	; (800dc4c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x28c>)
 800da38:	a803      	add	r0, sp, #12
 800da3a:	f005 fcc9 	bl	80133d0 <PropertiesBuilder::AddComment(char const*)>
 800da3e:	2700      	movs	r7, #0
 800da40:	4e83      	ldr	r6, [pc, #524]	; (800dc50 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x290>)
 800da42:	f8df a210 	ldr.w	sl, [pc, #528]	; 800dc54 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x294>
 800da46:	f8df b210 	ldr.w	fp, [pc, #528]	; 800dc58 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x298>
 800da4a:	f104 091e 	add.w	r9, r4, #30
 800da4e:	f8d8 3000 	ldr.w	r3, [r8]
 800da52:	42bb      	cmp	r3, r7
 800da54:	f200 8083 	bhi.w	800db5e <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x19e>
 800da58:	4980      	ldr	r1, [pc, #512]	; (800dc5c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x29c>)
 800da5a:	a803      	add	r0, sp, #12
 800da5c:	f005 fcb8 	bl	80133d0 <PropertiesBuilder::AddComment(char const*)>
 800da60:	6863      	ldr	r3, [r4, #4]
 800da62:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800da66:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 800da6a:	42a2      	cmp	r2, r4
 800da6c:	f080 80b8 	bcs.w	800dbe0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x220>
 800da70:	9803      	ldr	r0, [sp, #12]
 800da72:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 800da76:	4410      	add	r0, r2
 800da78:	eba4 0402 	sub.w	r4, r4, r2
 800da7c:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800da80:	f040 809d 	bne.w	800dbbe <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1fe>
 800da84:	2a00      	cmp	r2, #0
 800da86:	f040 809b 	bne.w	800dbc0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x200>
 800da8a:	9200      	str	r2, [sp, #0]
 800da8c:	4b74      	ldr	r3, [pc, #464]	; (800dc60 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 800da8e:	4a72      	ldr	r2, [pc, #456]	; (800dc58 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 800da90:	e09c      	b.n	800dbcc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x20c>
 800da92:	6823      	ldr	r3, [r4, #0]
 800da94:	4601      	mov	r1, r0
 800da96:	681a      	ldr	r2, [r3, #0]
 800da98:	4618      	mov	r0, r3
 800da9a:	68d2      	ldr	r2, [r2, #12]
 800da9c:	4790      	blx	r2
 800da9e:	e79b      	b.n	800d9d8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x18>
 800daa0:	f8bd c012 	ldrh.w	ip, [sp, #18]
 800daa4:	f8bd b010 	ldrh.w	fp, [sp, #16]
 800daa8:	eb04 0245 	add.w	r2, r4, r5, lsl #1
 800daac:	45dc      	cmp	ip, fp
 800daae:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 800dab2:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 800dab6:	d221      	bcs.n	800dafc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x13c>
 800dab8:	2110      	movs	r1, #16
 800daba:	9803      	ldr	r0, [sp, #12]
 800dabc:	40a9      	lsls	r1, r5
 800dabe:	ea31 0303 	bics.w	r3, r1, r3
 800dac2:	4460      	add	r0, ip
 800dac4:	ebab 0b0c 	sub.w	fp, fp, ip
 800dac8:	f89d c014 	ldrb.w	ip, [sp, #20]
 800dacc:	d006      	beq.n	800dadc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x11c>
 800dace:	f1bc 0f00 	cmp.w	ip, #0
 800dad2:	d106      	bne.n	800dae2 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x122>
 800dad4:	9200      	str	r2, [sp, #0]
 800dad6:	4633      	mov	r3, r6
 800dad8:	4a5f      	ldr	r2, [pc, #380]	; (800dc58 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 800dada:	e005      	b.n	800dae8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x128>
 800dadc:	f1bc 0f00 	cmp.w	ip, #0
 800dae0:	d023      	beq.n	800db2a <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x16a>
 800dae2:	9200      	str	r2, [sp, #0]
 800dae4:	4633      	mov	r3, r6
 800dae6:	464a      	mov	r2, r9
 800dae8:	4659      	mov	r1, fp
 800daea:	f7fb fa81 	bl	8008ff0 <snprintf>
 800daee:	4583      	cmp	fp, r0
 800daf0:	bfa2      	ittt	ge
 800daf2:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800daf6:	18c0      	addge	r0, r0, r3
 800daf8:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800dafc:	f8b4 301d 	ldrh.w	r3, [r4, #29]
 800db00:	fa23 f30a 	lsr.w	r3, r3, sl
 800db04:	f013 0303 	ands.w	r3, r3, #3
 800db08:	d013      	beq.n	800db32 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x172>
 800db0a:	4a56      	ldr	r2, [pc, #344]	; (800dc64 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a4>)
 800db0c:	4956      	ldr	r1, [pc, #344]	; (800dc68 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a8>)
 800db0e:	2b02      	cmp	r3, #2
 800db10:	bf08      	it	eq
 800db12:	460a      	moveq	r2, r1
 800db14:	3b01      	subs	r3, #1
 800db16:	4639      	mov	r1, r7
 800db18:	bf18      	it	ne
 800db1a:	2301      	movne	r3, #1
 800db1c:	a803      	add	r0, sp, #12
 800db1e:	f7ff fd97 	bl	800d650 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800db22:	3501      	adds	r5, #1
 800db24:	3712      	adds	r7, #18
 800db26:	3610      	adds	r6, #16
 800db28:	e763      	b.n	800d9f2 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x32>
 800db2a:	9200      	str	r2, [sp, #0]
 800db2c:	4633      	mov	r3, r6
 800db2e:	4a49      	ldr	r2, [pc, #292]	; (800dc54 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x294>)
 800db30:	e7da      	b.n	800dae8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x128>
 800db32:	4a4e      	ldr	r2, [pc, #312]	; (800dc6c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2ac>)
 800db34:	e7ee      	b.n	800db14 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x154>
 800db36:	6861      	ldr	r1, [r4, #4]
 800db38:	fa0b f305 	lsl.w	r3, fp, r5
 800db3c:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800db40:	438b      	bics	r3, r1
 800db42:	bf0c      	ite	eq
 800db44:	2301      	moveq	r3, #1
 800db46:	2300      	movne	r3, #0
 800db48:	4631      	mov	r1, r6
 800db4a:	2a00      	cmp	r2, #0
 800db4c:	bf0c      	ite	eq
 800db4e:	464a      	moveq	r2, r9
 800db50:	4652      	movne	r2, sl
 800db52:	a803      	add	r0, sp, #12
 800db54:	f7ff fd7c 	bl	800d650 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800db58:	3501      	adds	r5, #1
 800db5a:	3612      	adds	r6, #18
 800db5c:	e767      	b.n	800da2e <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x6e>
 800db5e:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800db62:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800db66:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 800db6a:	42a9      	cmp	r1, r5
 800db6c:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800db70:	d21e      	bcs.n	800dbb0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1f0>
 800db72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800db76:	9803      	ldr	r0, [sp, #12]
 800db78:	40ba      	lsls	r2, r7
 800db7a:	ea32 0c0c 	bics.w	ip, r2, ip
 800db7e:	4408      	add	r0, r1
 800db80:	eba5 0501 	sub.w	r5, r5, r1
 800db84:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800db88:	d004      	beq.n	800db94 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1d4>
 800db8a:	b921      	cbnz	r1, 800db96 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1d6>
 800db8c:	9300      	str	r3, [sp, #0]
 800db8e:	465a      	mov	r2, fp
 800db90:	4633      	mov	r3, r6
 800db92:	e003      	b.n	800db9c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1dc>
 800db94:	b179      	cbz	r1, 800dbb6 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1f6>
 800db96:	9300      	str	r3, [sp, #0]
 800db98:	4633      	mov	r3, r6
 800db9a:	4a25      	ldr	r2, [pc, #148]	; (800dc30 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x270>)
 800db9c:	4629      	mov	r1, r5
 800db9e:	f7fb fa27 	bl	8008ff0 <snprintf>
 800dba2:	4285      	cmp	r5, r0
 800dba4:	bfa2      	ittt	ge
 800dba6:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800dbaa:	18c0      	addge	r0, r0, r3
 800dbac:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800dbb0:	3701      	adds	r7, #1
 800dbb2:	3612      	adds	r6, #18
 800dbb4:	e74b      	b.n	800da4e <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 800dbb6:	9300      	str	r3, [sp, #0]
 800dbb8:	4652      	mov	r2, sl
 800dbba:	4633      	mov	r3, r6
 800dbbc:	e7ee      	b.n	800db9c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1dc>
 800dbbe:	b34a      	cbz	r2, 800dc14 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x254>
 800dbc0:	3b00      	subs	r3, #0
 800dbc2:	bf18      	it	ne
 800dbc4:	2301      	movne	r3, #1
 800dbc6:	4a1a      	ldr	r2, [pc, #104]	; (800dc30 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x270>)
 800dbc8:	9300      	str	r3, [sp, #0]
 800dbca:	4b25      	ldr	r3, [pc, #148]	; (800dc60 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 800dbcc:	4621      	mov	r1, r4
 800dbce:	f7fb fa0f 	bl	8008ff0 <snprintf>
 800dbd2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800dbd6:	4284      	cmp	r4, r0
 800dbd8:	bfa4      	itt	ge
 800dbda:	181b      	addge	r3, r3, r0
 800dbdc:	f8ad 3012 	strhge.w	r3, [sp, #18]
 800dbe0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800dbe4:	b17b      	cbz	r3, 800dc06 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x246>
 800dbe6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800dbea:	9b03      	ldr	r3, [sp, #12]
 800dbec:	4413      	add	r3, r2
 800dbee:	227d      	movs	r2, #125	; 0x7d
 800dbf0:	f803 2c01 	strb.w	r2, [r3, #-1]
 800dbf4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800dbf8:	9903      	ldr	r1, [sp, #12]
 800dbfa:	54ca      	strb	r2, [r1, r3]
 800dbfc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800dc00:	3301      	adds	r3, #1
 800dc02:	f8ad 3012 	strh.w	r3, [sp, #18]
 800dc06:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800dc0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc0c:	601a      	str	r2, [r3, #0]
 800dc0e:	b007      	add	sp, #28
 800dc10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc14:	2301      	movs	r3, #1
 800dc16:	4a0f      	ldr	r2, [pc, #60]	; (800dc54 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x294>)
 800dc18:	9300      	str	r3, [sp, #0]
 800dc1a:	4b11      	ldr	r3, [pc, #68]	; (800dc60 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 800dc1c:	e7d6      	b.n	800dbcc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x20c>
 800dc1e:	bf00      	nop
 800dc20:	08016c68 	stmdaeq	r1, {r3, r5, r6, sl, fp, sp, lr}
 800dc24:	08017f9f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r8, r9, sl, fp, ip, sp, lr}
 800dc28:	08017ec9 	stmdaeq	r1, {r0, r3, r6, r7, r9, sl, fp, ip, sp, lr}
 800dc2c:	200018e0 	andcs	r1, r0, r0, ror #17
 800dc30:	08016688 	stmdaeq	r1, {r3, r7, r9, sl, sp, lr}
 800dc34:	08016c10 	stmdaeq	r1, {r4, sl, fp, sp, lr}
 800dc38:	08017f8d 	stmdaeq	r1, {r0, r2, r3, r7, r8, r9, sl, fp, ip, sp, lr}
 800dc3c:	08016bfb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, r9, fp, sp, lr}
 800dc40:	08017f1d 	stmdaeq	r1, {r0, r2, r3, r4, r8, r9, sl, fp, ip, sp, lr}
 800dc44:	080169dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, fp, sp, lr}
 800dc48:	080169d8 	stmdaeq	r1, {r3, r4, r6, r7, r8, fp, sp, lr}
 800dc4c:	08016c06 	stmdaeq	r1, {r1, r2, sl, fp, sp, lr}
 800dc50:	08016c20 	stmdaeq	r1, {r5, sl, fp, sp, lr}
 800dc54:	08016692 	stmdaeq	r1, {r1, r4, r7, r9, sl, sp, lr}
 800dc58:	08016691 	stmdaeq	r1, {r0, r4, r7, r9, sl, sp, lr}
 800dc5c:	08016451 	stmdaeq	r1, {r0, r4, r6, sl, sp, lr}
 800dc60:	08017f77 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}
 800dc64:	080169c9 	stmdaeq	r1, {r0, r3, r6, r7, r8, fp, sp, lr}
 800dc68:	080169d0 	stmdaeq	r1, {r4, r6, r7, r8, fp, sp, lr}
 800dc6c:	080169c3 	stmdaeq	r1, {r0, r1, r6, r7, r8, fp, sp, lr}

0800dc70 <E131Params::Save(char*, unsigned int, unsigned int&)>:
 800dc70:	b513      	push	{r0, r1, r4, lr}
 800dc72:	6804      	ldr	r4, [r0, #0]
 800dc74:	b914      	cbnz	r4, 800dc7c <E131Params::Save(char*, unsigned int, unsigned int&)+0xc>
 800dc76:	601c      	str	r4, [r3, #0]
 800dc78:	b002      	add	sp, #8
 800dc7a:	bd10      	pop	{r4, pc}
 800dc7c:	9300      	str	r3, [sp, #0]
 800dc7e:	4613      	mov	r3, r2
 800dc80:	460a      	mov	r2, r1
 800dc82:	2100      	movs	r1, #0
 800dc84:	f7ff fe9c 	bl	800d9c0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)>
 800dc88:	e7f6      	b.n	800dc78 <E131Params::Save(char*, unsigned int, unsigned int&)+0x8>

0800dc8a <uuid_unparse_x>:
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	b530      	push	{r4, r5, lr}
 800dc8e:	4608      	mov	r0, r1
 800dc90:	4611      	mov	r1, r2
 800dc92:	681a      	ldr	r2, [r3, #0]
 800dc94:	b08f      	sub	sp, #60	; 0x3c
 800dc96:	ba12      	rev	r2, r2
 800dc98:	920a      	str	r2, [sp, #40]	; 0x28
 800dc9a:	889a      	ldrh	r2, [r3, #4]
 800dc9c:	891c      	ldrh	r4, [r3, #8]
 800dc9e:	ba52      	rev16	r2, r2
 800dca0:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800dca4:	88da      	ldrh	r2, [r3, #6]
 800dca6:	ba64      	rev16	r4, r4
 800dca8:	ba52      	rev16	r2, r2
 800dcaa:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 800dcae:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
 800dcb2:	f103 020a 	add.w	r2, r3, #10
 800dcb6:	f10d 0431 	add.w	r4, sp, #49	; 0x31
 800dcba:	3310      	adds	r3, #16
 800dcbc:	4293      	cmp	r3, r2
 800dcbe:	d122      	bne.n	800dd06 <uuid_unparse_x+0x7c>
 800dcc0:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800dcc4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800dcc8:	9208      	str	r2, [sp, #32]
 800dcca:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 800dcce:	0a1b      	lsrs	r3, r3, #8
 800dcd0:	9207      	str	r2, [sp, #28]
 800dcd2:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800dcd6:	9301      	str	r3, [sp, #4]
 800dcd8:	9206      	str	r2, [sp, #24]
 800dcda:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800dcde:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800dce2:	9205      	str	r2, [sp, #20]
 800dce4:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800dce8:	9300      	str	r3, [sp, #0]
 800dcea:	9204      	str	r2, [sp, #16]
 800dcec:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800dcf0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800dcf4:	9203      	str	r2, [sp, #12]
 800dcf6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800dcfa:	9202      	str	r2, [sp, #8]
 800dcfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dcfe:	f7fb f95f 	bl	8008fc0 <sprintf>
 800dd02:	b00f      	add	sp, #60	; 0x3c
 800dd04:	bd30      	pop	{r4, r5, pc}
 800dd06:	f812 5b01 	ldrb.w	r5, [r2], #1
 800dd0a:	f804 5f01 	strb.w	r5, [r4, #1]!
 800dd0e:	e7d5      	b.n	800dcbc <uuid_unparse_x+0x32>

0800dd10 <uuid_unparse>:
 800dd10:	4a01      	ldr	r2, [pc, #4]	; (800dd18 <uuid_unparse+0x8>)
 800dd12:	f7ff bfba 	b.w	800dc8a <uuid_unparse_x>
 800dd16:	bf00      	nop
 800dd18:	08016c7f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, sl, fp, sp, lr}

0800dd1c <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)>:
 800dd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd1e:	4604      	mov	r4, r0
 800dd20:	460e      	mov	r6, r1
 800dd22:	4611      	mov	r1, r2
 800dd24:	4617      	mov	r7, r2
 800dd26:	461d      	mov	r5, r3
 800dd28:	f000 fdae 	bl	800e888 <PixelConfiguration::Validate(unsigned int&)>
 800dd2c:	7d62      	ldrb	r2, [r4, #21]
 800dd2e:	b94a      	cbnz	r2, 800dd44 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x28>
 800dd30:	6823      	ldr	r3, [r4, #0]
 800dd32:	b11b      	cbz	r3, 800dd3c <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x20>
 800dd34:	3b0b      	subs	r3, #11
 800dd36:	2b01      	cmp	r3, #1
 800dd38:	bf88      	it	hi
 800dd3a:	6022      	strhi	r2, [r4, #0]
 800dd3c:	4639      	mov	r1, r7
 800dd3e:	4620      	mov	r0, r4
 800dd40:	f000 fda2 	bl	800e888 <PixelConfiguration::Validate(unsigned int&)>
 800dd44:	6823      	ldr	r3, [r4, #0]
 800dd46:	2b07      	cmp	r3, #7
 800dd48:	bf15      	itete	ne
 800dd4a:	f44f 71aa 	movne.w	r1, #340	; 0x154
 800dd4e:	f44f 7180 	moveq.w	r1, #256	; 0x100
 800dd52:	23aa      	movne	r3, #170	; 0xaa
 800dd54:	2380      	moveq	r3, #128	; 0x80
 800dd56:	bf14      	ite	ne
 800dd58:	f44f 72ff 	movne.w	r2, #510	; 0x1fe
 800dd5c:	f44f 72c0 	moveq.w	r2, #384	; 0x180
 800dd60:	e9c5 3100 	strd	r3, r1, [r5]
 800dd64:	6a21      	ldr	r1, [r4, #32]
 800dd66:	60aa      	str	r2, [r5, #8]
 800dd68:	6862      	ldr	r2, [r4, #4]
 800dd6a:	b109      	cbz	r1, 800dd70 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x54>
 800dd6c:	4291      	cmp	r1, r2
 800dd6e:	d900      	bls.n	800dd72 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x56>
 800dd70:	6222      	str	r2, [r4, #32]
 800dd72:	6a21      	ldr	r1, [r4, #32]
 800dd74:	69e0      	ldr	r0, [r4, #28]
 800dd76:	fbb2 f2f1 	udiv	r2, r2, r1
 800dd7a:	3301      	adds	r3, #1
 800dd7c:	6262      	str	r2, [r4, #36]	; 0x24
 800dd7e:	42b0      	cmp	r0, r6
 800dd80:	fbb2 f2f3 	udiv	r2, r2, r3
 800dd84:	bf28      	it	cs
 800dd86:	4630      	movcs	r0, r6
 800dd88:	1c53      	adds	r3, r2, #1
 800dd8a:	2e01      	cmp	r6, #1
 800dd8c:	62a3      	str	r3, [r4, #40]	; 0x28
 800dd8e:	bf1c      	itt	ne
 800dd90:	eb03 0380 	addne.w	r3, r3, r0, lsl #2
 800dd94:	1f5a      	subne	r2, r3, #5
 800dd96:	61e0      	str	r0, [r4, #28]
 800dd98:	60ea      	str	r2, [r5, #12]
 800dd9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dd9c <PixelDmxConfiguration::Print()>:
 800dd9c:	b510      	push	{r4, lr}
 800dd9e:	4604      	mov	r4, r0
 800dda0:	f000 fe08 	bl	800e9b4 <PixelConfiguration::Print()>
 800dda4:	4806      	ldr	r0, [pc, #24]	; (800ddc0 <PixelDmxConfiguration::Print()+0x24>)
 800dda6:	f7fb f8fb 	bl	8008fa0 <printf>
 800ddaa:	69e1      	ldr	r1, [r4, #28]
 800ddac:	4805      	ldr	r0, [pc, #20]	; (800ddc4 <PixelDmxConfiguration::Print()+0x28>)
 800ddae:	f7fb f8f7 	bl	8008fa0 <printf>
 800ddb2:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
 800ddb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddba:	4803      	ldr	r0, [pc, #12]	; (800ddc8 <PixelDmxConfiguration::Print()+0x2c>)
 800ddbc:	f7fb b8f0 	b.w	8008fa0 <printf>
 800ddc0:	08016cb0 	stmdaeq	r1, {r4, r5, r7, sl, fp, sp, lr}
 800ddc4:	08016cc9 	stmdaeq	r1, {r0, r3, r6, r7, sl, fp, sp, lr}
 800ddc8:	08016cd8 	stmdaeq	r1, {r3, r4, r6, r7, sl, fp, sp, lr}

0800ddcc <WS28xxDmx::GetDmxStartAddress()>:
 800ddcc:	f8b0 0048 	ldrh.w	r0, [r0, #72]	; 0x48
 800ddd0:	4770      	bx	lr

0800ddd2 <WS28xxDmx::GetDmxFootprint()>:
 800ddd2:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
 800ddd6:	4770      	bx	lr

0800ddd8 <WS28xxDmx::~WS28xxDmx()>:
 800ddd8:	b538      	push	{r3, r4, r5, lr}
 800ddda:	4b06      	ldr	r3, [pc, #24]	; (800ddf4 <WS28xxDmx::~WS28xxDmx()+0x1c>)
 800dddc:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 800ddde:	4604      	mov	r4, r0
 800dde0:	6003      	str	r3, [r0, #0]
 800dde2:	b12d      	cbz	r5, 800ddf0 <WS28xxDmx::~WS28xxDmx()+0x18>
 800dde4:	4628      	mov	r0, r5
 800dde6:	f001 ff09 	bl	800fbfc <WS28xx::~WS28xx()>
 800ddea:	4628      	mov	r0, r5
 800ddec:	f006 f8b2 	bl	8013f54 <operator delete(void*)>
 800ddf0:	4620      	mov	r0, r4
 800ddf2:	bd38      	pop	{r3, r4, r5, pc}
 800ddf4:	08016d04 	stmdaeq	r1, {r2, r8, sl, fp, sp, lr}

0800ddf8 <WS28xxDmx::~WS28xxDmx()>:
 800ddf8:	b510      	push	{r4, lr}
 800ddfa:	4604      	mov	r4, r0
 800ddfc:	f7ff ffec 	bl	800ddd8 <WS28xxDmx::~WS28xxDmx()>
 800de00:	4620      	mov	r0, r4
 800de02:	f006 f8a7 	bl	8013f54 <operator delete(void*)>
 800de06:	4620      	mov	r0, r4
 800de08:	bd10      	pop	{r4, pc}

0800de0a <WS28xxDmx::Blackout(bool)>:
 800de0a:	b538      	push	{r3, r4, r5, lr}
 800de0c:	4605      	mov	r5, r0
 800de0e:	460c      	mov	r4, r1
 800de10:	f880 1059 	strb.w	r1, [r0, #89]	; 0x59
 800de14:	f007 fd5e 	bl	80158d4 <gd32_spi_dma_tx_is_active()>
 800de18:	2800      	cmp	r0, #0
 800de1a:	d1fb      	bne.n	800de14 <WS28xxDmx::Blackout(bool)+0xa>
 800de1c:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 800de1e:	b11c      	cbz	r4, 800de28 <WS28xxDmx::Blackout(bool)+0x1e>
 800de20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de24:	f001 bf68 	b.w	800fcf8 <WS28xx::Blackout()>
 800de28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de2c:	f001 bf48 	b.w	800fcc0 <WS28xx::Update()>

0800de30 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)>:
 800de30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de34:	b087      	sub	sp, #28
 800de36:	4607      	mov	r7, r0
 800de38:	4692      	mov	sl, r2
 800de3a:	9104      	str	r1, [sp, #16]
 800de3c:	9303      	str	r3, [sp, #12]
 800de3e:	f007 fd49 	bl	80158d4 <gd32_spi_dma_tx_is_active()>
 800de42:	2800      	cmp	r0, #0
 800de44:	d171      	bne.n	800df2a <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xfa>
 800de46:	9b04      	ldr	r3, [sp, #16]
 800de48:	9c03      	ldr	r4, [sp, #12]
 800de4a:	f003 0103 	and.w	r1, r3, #3
 800de4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de50:	2902      	cmp	r1, #2
 800de52:	fbb4 f6f3 	udiv	r6, r4, r3
 800de56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de58:	d026      	beq.n	800dea8 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x78>
 800de5a:	2903      	cmp	r1, #3
 800de5c:	d02b      	beq.n	800deb6 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x86>
 800de5e:	2901      	cmp	r1, #1
 800de60:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 800de62:	d022      	beq.n	800deaa <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x7a>
 800de64:	4296      	cmp	r6, r2
 800de66:	bf28      	it	cs
 800de68:	4616      	movcs	r6, r2
 800de6a:	4295      	cmp	r5, r2
 800de6c:	d925      	bls.n	800deba <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x8a>
 800de6e:	4605      	mov	r5, r0
 800de70:	8e3c      	ldrh	r4, [r7, #48]	; 0x30
 800de72:	3c01      	subs	r4, #1
 800de74:	f8d7 9024 	ldr.w	r9, [r7, #36]	; 0x24
 800de78:	2b03      	cmp	r3, #3
 800de7a:	fb09 f805 	mul.w	r8, r9, r5
 800de7e:	4454      	add	r4, sl
 800de80:	eb08 0b09 	add.w	fp, r8, r9
 800de84:	d035      	beq.n	800def2 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xc2>
 800de86:	42ae      	cmp	r6, r5
 800de88:	d935      	bls.n	800def6 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xc6>
 800de8a:	9a03      	ldr	r2, [sp, #12]
 800de8c:	eba4 030a 	sub.w	r3, r4, sl
 800de90:	429a      	cmp	r2, r3
 800de92:	d930      	bls.n	800def6 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xc6>
 800de94:	4641      	mov	r1, r8
 800de96:	f894 f000 	pld	[r4]
 800de9a:	458b      	cmp	fp, r1
 800de9c:	d138      	bne.n	800df10 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xe0>
 800de9e:	3501      	adds	r5, #1
 800dea0:	44c8      	add	r8, r9
 800dea2:	44cb      	add	fp, r9
 800dea4:	3404      	adds	r4, #4
 800dea6:	e7ee      	b.n	800de86 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x56>
 800dea8:	6bbd      	ldr	r5, [r7, #56]	; 0x38
 800deaa:	442e      	add	r6, r5
 800deac:	4296      	cmp	r6, r2
 800deae:	bf28      	it	cs
 800deb0:	4616      	movcs	r6, r2
 800deb2:	4604      	mov	r4, r0
 800deb4:	e7de      	b.n	800de74 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x44>
 800deb6:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 800deb8:	e7f7      	b.n	800deaa <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x7a>
 800deba:	4605      	mov	r5, r0
 800debc:	4604      	mov	r4, r0
 800debe:	e7d9      	b.n	800de74 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x44>
 800dec0:	78a2      	ldrb	r2, [r4, #2]
 800dec2:	7863      	ldrb	r3, [r4, #1]
 800dec4:	9200      	str	r2, [sp, #0]
 800dec6:	7822      	ldrb	r2, [r4, #0]
 800dec8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800deca:	9105      	str	r1, [sp, #20]
 800decc:	f001 f956 	bl	800f17c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 800ded0:	9905      	ldr	r1, [sp, #20]
 800ded2:	3101      	adds	r1, #1
 800ded4:	e007      	b.n	800dee6 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xb6>
 800ded6:	9a03      	ldr	r2, [sp, #12]
 800ded8:	eba4 030a 	sub.w	r3, r4, sl
 800dedc:	429a      	cmp	r2, r3
 800dede:	d90a      	bls.n	800def6 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xc6>
 800dee0:	4641      	mov	r1, r8
 800dee2:	f894 f000 	pld	[r4]
 800dee6:	458b      	cmp	fp, r1
 800dee8:	d1ea      	bne.n	800dec0 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x90>
 800deea:	3501      	adds	r5, #1
 800deec:	44c8      	add	r8, r9
 800deee:	44cb      	add	fp, r9
 800def0:	3403      	adds	r4, #3
 800def2:	42ae      	cmp	r6, r5
 800def4:	d8ef      	bhi.n	800ded6 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xa6>
 800def6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800def8:	9a04      	ldr	r2, [sp, #16]
 800defa:	4293      	cmp	r3, r2
 800defc:	d115      	bne.n	800df2a <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xfa>
 800defe:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800df02:	b993      	cbnz	r3, 800df2a <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xfa>
 800df04:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800df06:	b007      	add	sp, #28
 800df08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df0c:	f001 bed8 	b.w	800fcc0 <WS28xx::Update()>
 800df10:	78e2      	ldrb	r2, [r4, #3]
 800df12:	7863      	ldrb	r3, [r4, #1]
 800df14:	9201      	str	r2, [sp, #4]
 800df16:	78a2      	ldrb	r2, [r4, #2]
 800df18:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800df1a:	9200      	str	r2, [sp, #0]
 800df1c:	7822      	ldrb	r2, [r4, #0]
 800df1e:	9105      	str	r1, [sp, #20]
 800df20:	f001 fd5e 	bl	800f9e0 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 800df24:	9905      	ldr	r1, [sp, #20]
 800df26:	3101      	adds	r1, #1
 800df28:	e7b7      	b.n	800de9a <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x6a>
 800df2a:	b007      	add	sp, #28
 800df2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800df30 <WS28xxDmx::FullOn()>:
 800df30:	b510      	push	{r4, lr}
 800df32:	4604      	mov	r4, r0
 800df34:	f007 fcce 	bl	80158d4 <gd32_spi_dma_tx_is_active()>
 800df38:	2800      	cmp	r0, #0
 800df3a:	d1fb      	bne.n	800df34 <WS28xxDmx::FullOn()+0x4>
 800df3c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800df3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df42:	f001 bf20 	b.w	800fd86 <WS28xx::FullOn()>

0800df46 <WS28xxDmx::Print()>:
 800df46:	3004      	adds	r0, #4
 800df48:	f7ff bf28 	b.w	800dd9c <PixelDmxConfiguration::Print()>

0800df4c <WS28xxDmx::Start(unsigned int)>:
 800df4c:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 800df50:	b93b      	cbnz	r3, 800df62 <WS28xxDmx::Start(unsigned int)+0x16>
 800df52:	2301      	movs	r3, #1
 800df54:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
 800df58:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800df5a:	b110      	cbz	r0, 800df62 <WS28xxDmx::Start(unsigned int)+0x16>
 800df5c:	6803      	ldr	r3, [r0, #0]
 800df5e:	689b      	ldr	r3, [r3, #8]
 800df60:	4718      	bx	r3
 800df62:	4770      	bx	lr

0800df64 <WS28xxDmx::Stop(unsigned int)>:
 800df64:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 800df68:	b13b      	cbz	r3, 800df7a <WS28xxDmx::Stop(unsigned int)+0x16>
 800df6a:	2300      	movs	r3, #0
 800df6c:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
 800df70:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800df72:	b110      	cbz	r0, 800df7a <WS28xxDmx::Stop(unsigned int)+0x16>
 800df74:	6803      	ldr	r3, [r0, #0]
 800df76:	68db      	ldr	r3, [r3, #12]
 800df78:	4718      	bx	r3
 800df7a:	4770      	bx	lr

0800df7c <WS28xxDmx::SetDmxStartAddress(unsigned short)>:
 800df7c:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
 800df80:	b508      	push	{r3, lr}
 800df82:	428a      	cmp	r2, r1
 800df84:	d101      	bne.n	800df8a <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xe>
 800df86:	2001      	movs	r0, #1
 800df88:	bd08      	pop	{r3, pc}
 800df8a:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
 800df8e:	440a      	add	r2, r1
 800df90:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800df94:	dc0c      	bgt.n	800dfb0 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x34>
 800df96:	1e4a      	subs	r2, r1, #1
 800df98:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800df9c:	d208      	bcs.n	800dfb0 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x34>
 800df9e:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
 800dfa2:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800dfa4:	2800      	cmp	r0, #0
 800dfa6:	d0ee      	beq.n	800df86 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xa>
 800dfa8:	6803      	ldr	r3, [r0, #0]
 800dfaa:	69db      	ldr	r3, [r3, #28]
 800dfac:	4798      	blx	r3
 800dfae:	e7ea      	b.n	800df86 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xa>
 800dfb0:	2000      	movs	r0, #0
 800dfb2:	e7e9      	b.n	800df88 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xc>

0800dfb4 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
 800dfba:	4288      	cmp	r0, r1
 800dfbc:	f04f 0000 	mov.w	r0, #0
 800dfc0:	d30f      	bcc.n	800dfe2 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x2e>
 800dfc2:	7090      	strb	r0, [r2, #2]
 800dfc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfc6:	fbb1 f0f3 	udiv	r0, r1, r3
 800dfca:	fb03 1110 	mls	r1, r3, r0, r1
 800dfce:	2903      	cmp	r1, #3
 800dfd0:	d80e      	bhi.n	800dff0 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x3c>
 800dfd2:	e8df f001 	tbb	[pc, r1]
 800dfd6:	0d0a0702 	stceq	7, cr0, [sl, #-8]
 800dfda:	f240 2305 	movw	r3, #517	; 0x205
 800dfde:	2001      	movs	r0, #1
 800dfe0:	8013      	strh	r3, [r2, #0]
 800dfe2:	4770      	bx	lr
 800dfe4:	f240 2306 	movw	r3, #518	; 0x206
 800dfe8:	e7f9      	b.n	800dfde <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x2a>
 800dfea:	f240 2307 	movw	r3, #519	; 0x207
 800dfee:	e7f6      	b.n	800dfde <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x2a>
 800dff0:	f240 2312 	movw	r3, #530	; 0x212
 800dff4:	e7f3      	b.n	800dfde <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x2a>
	...

0800dff8 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>:
 800dff8:	b570      	push	{r4, r5, r6, lr}
 800dffa:	4605      	mov	r5, r0
 800dffc:	460e      	mov	r6, r1
 800dffe:	4b19      	ldr	r3, [pc, #100]	; (800e064 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x6c>)
 800e000:	4604      	mov	r4, r0
 800e002:	f845 3b04 	str.w	r3, [r5], #4
 800e006:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e008:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e00a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e00c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e00e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800e012:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800e016:	2300      	movs	r3, #0
 800e018:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 800e01c:	6563      	str	r3, [r4, #84]	; 0x54
 800e01e:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 800e022:	4b11      	ldr	r3, [pc, #68]	; (800e068 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x70>)
 800e024:	1d26      	adds	r6, r4, #4
 800e026:	f104 0244 	add.w	r2, r4, #68	; 0x44
 800e02a:	2101      	movs	r1, #1
 800e02c:	4630      	mov	r0, r6
 800e02e:	601c      	str	r4, [r3, #0]
 800e030:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800e034:	f7ff fe72 	bl	800dd1c <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)>
 800e038:	2028      	movs	r0, #40	; 0x28
 800e03a:	f005 ff8f 	bl	8013f5c <operator new(unsigned int)>
 800e03e:	4605      	mov	r5, r0
 800e040:	4631      	mov	r1, r6
 800e042:	f001 fdf9 	bl	800fc38 <WS28xx::WS28xx(PixelConfiguration&)>
 800e046:	4628      	mov	r0, r5
 800e048:	64e5      	str	r5, [r4, #76]	; 0x4c
 800e04a:	f001 fe55 	bl	800fcf8 <WS28xx::Blackout()>
 800e04e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800e050:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800e052:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800e056:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e058:	4620      	mov	r0, r4
 800e05a:	4353      	muls	r3, r2
 800e05c:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 800e060:	bd70      	pop	{r4, r5, r6, pc}
 800e062:	bf00      	nop
 800e064:	08016d04 	stmdaeq	r1, {r2, r8, sl, fp, sp, lr}
 800e068:	200018e4 	andcs	r1, r0, r4, ror #17

0800e06c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 800e06c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e06e:	88c6      	ldrh	r6, [r0, #6]
 800e070:	8885      	ldrh	r5, [r0, #4]
 800e072:	42ae      	cmp	r6, r5
 800e074:	d216      	bcs.n	800e0a4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 800e076:	4604      	mov	r4, r0
 800e078:	6800      	ldr	r0, [r0, #0]
 800e07a:	1bad      	subs	r5, r5, r6
 800e07c:	4430      	add	r0, r6
 800e07e:	7a26      	ldrb	r6, [r4, #8]
 800e080:	b923      	cbnz	r3, 800e08c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 800e082:	b926      	cbnz	r6, 800e08e <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 800e084:	9200      	str	r2, [sp, #0]
 800e086:	460b      	mov	r3, r1
 800e088:	4a09      	ldr	r2, [pc, #36]	; (800e0b0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 800e08a:	e003      	b.n	800e094 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800e08c:	b166      	cbz	r6, 800e0a8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 800e08e:	460b      	mov	r3, r1
 800e090:	9200      	str	r2, [sp, #0]
 800e092:	4a08      	ldr	r2, [pc, #32]	; (800e0b4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 800e094:	4629      	mov	r1, r5
 800e096:	f7fa ffab 	bl	8008ff0 <snprintf>
 800e09a:	4285      	cmp	r5, r0
 800e09c:	bfa2      	ittt	ge
 800e09e:	88e3      	ldrhge	r3, [r4, #6]
 800e0a0:	181b      	addge	r3, r3, r0
 800e0a2:	80e3      	strhge	r3, [r4, #6]
 800e0a4:	b002      	add	sp, #8
 800e0a6:	bd70      	pop	{r4, r5, r6, pc}
 800e0a8:	9200      	str	r2, [sp, #0]
 800e0aa:	460b      	mov	r3, r1
 800e0ac:	4a02      	ldr	r2, [pc, #8]	; (800e0b8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 800e0ae:	e7f1      	b.n	800e094 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800e0b0:	08016691 	stmdaeq	r1, {r0, r4, r7, r9, sl, sp, lr}
 800e0b4:	08016688 	stmdaeq	r1, {r3, r7, r9, sl, sp, lr}
 800e0b8:	08016692 	stmdaeq	r1, {r1, r4, r7, r9, sl, sp, lr}

0800e0bc <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>:
 800e0bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e0be:	88c6      	ldrh	r6, [r0, #6]
 800e0c0:	8885      	ldrh	r5, [r0, #4]
 800e0c2:	42ae      	cmp	r6, r5
 800e0c4:	d216      	bcs.n	800e0f4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x38>
 800e0c6:	4604      	mov	r4, r0
 800e0c8:	6800      	ldr	r0, [r0, #0]
 800e0ca:	1bad      	subs	r5, r5, r6
 800e0cc:	4430      	add	r0, r6
 800e0ce:	7a26      	ldrb	r6, [r4, #8]
 800e0d0:	b923      	cbnz	r3, 800e0dc <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x20>
 800e0d2:	b926      	cbnz	r6, 800e0de <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x22>
 800e0d4:	9200      	str	r2, [sp, #0]
 800e0d6:	460b      	mov	r3, r1
 800e0d8:	4a09      	ldr	r2, [pc, #36]	; (800e100 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x44>)
 800e0da:	e003      	b.n	800e0e4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800e0dc:	b166      	cbz	r6, 800e0f8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x3c>
 800e0de:	460b      	mov	r3, r1
 800e0e0:	9200      	str	r2, [sp, #0]
 800e0e2:	4a08      	ldr	r2, [pc, #32]	; (800e104 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x48>)
 800e0e4:	4629      	mov	r1, r5
 800e0e6:	f7fa ff83 	bl	8008ff0 <snprintf>
 800e0ea:	4285      	cmp	r5, r0
 800e0ec:	bfa2      	ittt	ge
 800e0ee:	88e3      	ldrhge	r3, [r4, #6]
 800e0f0:	181b      	addge	r3, r3, r0
 800e0f2:	80e3      	strhge	r3, [r4, #6]
 800e0f4:	b002      	add	sp, #8
 800e0f6:	bd70      	pop	{r4, r5, r6, pc}
 800e0f8:	9200      	str	r2, [sp, #0]
 800e0fa:	460b      	mov	r3, r1
 800e0fc:	4a02      	ldr	r2, [pc, #8]	; (800e108 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x4c>)
 800e0fe:	e7f1      	b.n	800e0e4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800e100:	08016691 	stmdaeq	r1, {r0, r4, r7, r9, sl, sp, lr}
 800e104:	08016688 	stmdaeq	r1, {r3, r7, r9, sl, sp, lr}
 800e108:	08016692 	stmdaeq	r1, {r1, r4, r7, r9, sl, sp, lr}

0800e10c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800e10c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e10e:	88c6      	ldrh	r6, [r0, #6]
 800e110:	8885      	ldrh	r5, [r0, #4]
 800e112:	42ae      	cmp	r6, r5
 800e114:	d216      	bcs.n	800e144 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800e116:	4604      	mov	r4, r0
 800e118:	6800      	ldr	r0, [r0, #0]
 800e11a:	1bad      	subs	r5, r5, r6
 800e11c:	4430      	add	r0, r6
 800e11e:	7a26      	ldrb	r6, [r4, #8]
 800e120:	b923      	cbnz	r3, 800e12c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800e122:	b926      	cbnz	r6, 800e12e <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800e124:	9200      	str	r2, [sp, #0]
 800e126:	460b      	mov	r3, r1
 800e128:	4a09      	ldr	r2, [pc, #36]	; (800e150 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800e12a:	e003      	b.n	800e134 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800e12c:	b166      	cbz	r6, 800e148 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800e12e:	460b      	mov	r3, r1
 800e130:	9200      	str	r2, [sp, #0]
 800e132:	4a08      	ldr	r2, [pc, #32]	; (800e154 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800e134:	4629      	mov	r1, r5
 800e136:	f7fa ff5b 	bl	8008ff0 <snprintf>
 800e13a:	4285      	cmp	r5, r0
 800e13c:	bfa2      	ittt	ge
 800e13e:	88e3      	ldrhge	r3, [r4, #6]
 800e140:	181b      	addge	r3, r3, r0
 800e142:	80e3      	strhge	r3, [r4, #6]
 800e144:	b002      	add	sp, #8
 800e146:	bd70      	pop	{r4, r5, r6, pc}
 800e148:	9200      	str	r2, [sp, #0]
 800e14a:	460b      	mov	r3, r1
 800e14c:	4a02      	ldr	r2, [pc, #8]	; (800e158 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800e14e:	e7f1      	b.n	800e134 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800e150:	080166a4 	stmdaeq	r1, {r2, r5, r7, r9, sl, sp, lr}
 800e154:	08016699 	stmdaeq	r1, {r0, r3, r4, r7, r9, sl, sp, lr}
 800e158:	080166a5 	stmdaeq	r1, {r0, r2, r5, r7, r9, sl, sp, lr}

0800e15c <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>:
 800e15c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e160:	4699      	mov	r9, r3
 800e162:	8885      	ldrh	r5, [r0, #4]
 800e164:	88c3      	ldrh	r3, [r0, #6]
 800e166:	4604      	mov	r4, r0
 800e168:	42ab      	cmp	r3, r5
 800e16a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800e16e:	d227      	bcs.n	800e1c0 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x64>
 800e170:	6826      	ldr	r6, [r4, #0]
 800e172:	4610      	mov	r0, r2
 800e174:	460f      	mov	r7, r1
 800e176:	f894 a008 	ldrb.w	sl, [r4, #8]
 800e17a:	441e      	add	r6, r3
 800e17c:	1aed      	subs	r5, r5, r3
 800e17e:	f7f9 fe73 	bl	8007e68 <__aeabi_f2d>
 800e182:	f1b9 0f00 	cmp.w	r9, #0
 800e186:	d109      	bne.n	800e19c <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x40>
 800e188:	f1ba 0f00 	cmp.w	sl, #0
 800e18c:	d109      	bne.n	800e1a2 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x46>
 800e18e:	463b      	mov	r3, r7
 800e190:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e194:	4a0f      	ldr	r2, [pc, #60]	; (800e1d4 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x78>)
 800e196:	f8cd 8000 	str.w	r8, [sp]
 800e19a:	e008      	b.n	800e1ae <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x52>
 800e19c:	f1ba 0f00 	cmp.w	sl, #0
 800e1a0:	d011      	beq.n	800e1c6 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x6a>
 800e1a2:	463b      	mov	r3, r7
 800e1a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1a8:	4a0b      	ldr	r2, [pc, #44]	; (800e1d8 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x7c>)
 800e1aa:	f8cd 8000 	str.w	r8, [sp]
 800e1ae:	4629      	mov	r1, r5
 800e1b0:	4630      	mov	r0, r6
 800e1b2:	f7fa ff1d 	bl	8008ff0 <snprintf>
 800e1b6:	4285      	cmp	r5, r0
 800e1b8:	bfa2      	ittt	ge
 800e1ba:	88e3      	ldrhge	r3, [r4, #6]
 800e1bc:	181b      	addge	r3, r3, r0
 800e1be:	80e3      	strhge	r3, [r4, #6]
 800e1c0:	b004      	add	sp, #16
 800e1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1c6:	463b      	mov	r3, r7
 800e1c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1cc:	4a03      	ldr	r2, [pc, #12]	; (800e1dc <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x80>)
 800e1ce:	f8cd 8000 	str.w	r8, [sp]
 800e1d2:	e7ec      	b.n	800e1ae <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x52>
 800e1d4:	08016d3f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r8, sl, fp, sp, lr}
 800e1d8:	08016d34 	stmdaeq	r1, {r2, r4, r5, r8, sl, fp, sp, lr}
 800e1dc:	08016d40 	stmdaeq	r1, {r6, r8, sl, fp, sp, lr}

0800e1e0 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>:
 800e1e0:	6001      	str	r1, [r0, #0]
 800e1e2:	2100      	movs	r1, #0
 800e1e4:	f04f 6c10 	mov.w	ip, #150994944	; 0x9000000
 800e1e8:	4a05      	ldr	r2, [pc, #20]	; (800e200 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x20>)
 800e1ea:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800e1ee:	4a05      	ldr	r2, [pc, #20]	; (800e204 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x24>)
 800e1f0:	4905      	ldr	r1, [pc, #20]	; (800e208 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x28>)
 800e1f2:	e9c0 c203 	strd	ip, r2, [r0, #12]
 800e1f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800e1fa:	e9c0 1205 	strd	r1, r2, [r0, #20]
 800e1fe:	4770      	bx	lr
 800e200:	0100aa03 	tsteq	r0, r3, lsl #20
 800e204:	01ff003d 	mvnseq	r0, sp, lsr r0
 800e208:	06000100 	streq	r0, [r0], -r0, lsl #2

0800e20c <PixelDmxParams::Load()>:
 800e20c:	b508      	push	{r3, lr}
 800e20e:	2300      	movs	r3, #0
 800e210:	4601      	mov	r1, r0
 800e212:	6043      	str	r3, [r0, #4]
 800e214:	6800      	ldr	r0, [r0, #0]
 800e216:	b120      	cbz	r0, 800e222 <PixelDmxParams::Load()+0x16>
 800e218:	6803      	ldr	r3, [r0, #0]
 800e21a:	3104      	adds	r1, #4
 800e21c:	68db      	ldr	r3, [r3, #12]
 800e21e:	4798      	blx	r3
 800e220:	2001      	movs	r0, #1
 800e222:	bd08      	pop	{r3, pc}

0800e224 <PixelDmxParams::Load(char const*, unsigned int)>:
 800e224:	6803      	ldr	r3, [r0, #0]
 800e226:	b1d3      	cbz	r3, 800e25e <PixelDmxParams::Load(char const*, unsigned int)+0x3a>
 800e228:	2300      	movs	r3, #0
 800e22a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e22c:	460d      	mov	r5, r1
 800e22e:	4616      	mov	r6, r2
 800e230:	4604      	mov	r4, r0
 800e232:	6043      	str	r3, [r0, #4]
 800e234:	4602      	mov	r2, r0
 800e236:	490a      	ldr	r1, [pc, #40]	; (800e260 <PixelDmxParams::Load(char const*, unsigned int)+0x3c>)
 800e238:	4668      	mov	r0, sp
 800e23a:	f005 f8e3 	bl	8013404 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800e23e:	4632      	mov	r2, r6
 800e240:	4629      	mov	r1, r5
 800e242:	4668      	mov	r0, sp
 800e244:	f005 f8e2 	bl	801340c <ReadConfigFile::Read(char const*, unsigned int)>
 800e248:	4621      	mov	r1, r4
 800e24a:	f851 0b04 	ldr.w	r0, [r1], #4
 800e24e:	6803      	ldr	r3, [r0, #0]
 800e250:	689b      	ldr	r3, [r3, #8]
 800e252:	4798      	blx	r3
 800e254:	4668      	mov	r0, sp
 800e256:	f005 f8d8 	bl	801340a <ReadConfigFile::~ReadConfigFile()>
 800e25a:	b002      	add	sp, #8
 800e25c:	bd70      	pop	{r4, r5, r6, pc}
 800e25e:	4770      	bx	lr
 800e260:	0800e4f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, sl, sp, lr, pc}

0800e264 <PixelDmxParams::callbackFunction(char const*)>:
 800e264:	b530      	push	{r4, r5, lr}
 800e266:	2308      	movs	r3, #8
 800e268:	460d      	mov	r5, r1
 800e26a:	b089      	sub	sp, #36	; 0x24
 800e26c:	4604      	mov	r4, r0
 800e26e:	9302      	str	r3, [sp, #8]
 800e270:	4628      	mov	r0, r5
 800e272:	4992      	ldr	r1, [pc, #584]	; (800e4bc <PixelDmxParams::callbackFunction(char const*)+0x258>)
 800e274:	446b      	add	r3, sp
 800e276:	aa04      	add	r2, sp, #16
 800e278:	f005 f8fc 	bl	8013474 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800e27c:	b9a0      	cbnz	r0, 800e2a8 <PixelDmxParams::callbackFunction(char const*)+0x44>
 800e27e:	9b02      	ldr	r3, [sp, #8]
 800e280:	3320      	adds	r3, #32
 800e282:	446b      	add	r3, sp
 800e284:	f803 0c10 	strb.w	r0, [r3, #-16]
 800e288:	a804      	add	r0, sp, #16
 800e28a:	f000 fc03 	bl	800ea94 <PixelType::GetType(char const*)>
 800e28e:	280e      	cmp	r0, #14
 800e290:	bf08      	it	eq
 800e292:	2203      	moveq	r2, #3
 800e294:	6863      	ldr	r3, [r4, #4]
 800e296:	bf19      	ittee	ne
 800e298:	7220      	strbne	r0, [r4, #8]
 800e29a:	f043 0301 	orrne.w	r3, r3, #1
 800e29e:	7222      	strbeq	r2, [r4, #8]
 800e2a0:	f023 0301 	biceq.w	r3, r3, #1
 800e2a4:	6063      	str	r3, [r4, #4]
 800e2a6:	e033      	b.n	800e310 <PixelDmxParams::callbackFunction(char const*)+0xac>
 800e2a8:	4628      	mov	r0, r5
 800e2aa:	4985      	ldr	r1, [pc, #532]	; (800e4c0 <PixelDmxParams::callbackFunction(char const*)+0x25c>)
 800e2ac:	f10d 0202 	add.w	r2, sp, #2
 800e2b0:	f005 f99d 	bl	80135ee <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800e2b4:	b990      	cbnz	r0, 800e2dc <PixelDmxParams::callbackFunction(char const*)+0x78>
 800e2b6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800e2ba:	6863      	ldr	r3, [r4, #4]
 800e2bc:	1e51      	subs	r1, r2, #1
 800e2be:	f5b1 7f2a 	cmp.w	r1, #680	; 0x2a8
 800e2c2:	bf2d      	iteet	cs
 800e2c4:	f06f 0255 	mvncs.w	r2, #85	; 0x55
 800e2c8:	f8a4 2009 	strhcc.w	r2, [r4, #9]
 800e2cc:	f043 0302 	orrcc.w	r3, r3, #2
 800e2d0:	7262      	strbcs	r2, [r4, #9]
 800e2d2:	bf24      	itt	cs
 800e2d4:	72a0      	strbcs	r0, [r4, #10]
 800e2d6:	f023 0302 	biccs.w	r3, r3, #2
 800e2da:	e7e3      	b.n	800e2a4 <PixelDmxParams::callbackFunction(char const*)+0x40>
 800e2dc:	2303      	movs	r3, #3
 800e2de:	4628      	mov	r0, r5
 800e2e0:	9302      	str	r3, [sp, #8]
 800e2e2:	4978      	ldr	r1, [pc, #480]	; (800e4c4 <PixelDmxParams::callbackFunction(char const*)+0x260>)
 800e2e4:	ab02      	add	r3, sp, #8
 800e2e6:	aa04      	add	r2, sp, #16
 800e2e8:	f005 f8c4 	bl	8013474 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800e2ec:	b990      	cbnz	r0, 800e314 <PixelDmxParams::callbackFunction(char const*)+0xb0>
 800e2ee:	9b02      	ldr	r3, [sp, #8]
 800e2f0:	3320      	adds	r3, #32
 800e2f2:	446b      	add	r3, sp
 800e2f4:	f803 0c10 	strb.w	r0, [r3, #-16]
 800e2f8:	a804      	add	r0, sp, #16
 800e2fa:	f000 fbef 	bl	800eadc <PixelType::GetMap(char const*)>
 800e2fe:	6863      	ldr	r3, [r4, #4]
 800e300:	2806      	cmp	r0, #6
 800e302:	bf14      	ite	ne
 800e304:	f443 7300 	orrne.w	r3, r3, #512	; 0x200
 800e308:	f423 7300 	biceq.w	r3, r3, #512	; 0x200
 800e30c:	6063      	str	r3, [r4, #4]
 800e30e:	75e0      	strb	r0, [r4, #23]
 800e310:	b009      	add	sp, #36	; 0x24
 800e312:	bd30      	pop	{r4, r5, pc}
 800e314:	4628      	mov	r0, r5
 800e316:	496c      	ldr	r1, [pc, #432]	; (800e4c8 <PixelDmxParams::callbackFunction(char const*)+0x264>)
 800e318:	aa01      	add	r2, sp, #4
 800e31a:	f005 f8c4 	bl	80134a6 <Sscan::Float(char const*, char const*, float&)>
 800e31e:	b960      	cbnz	r0, 800e33a <PixelDmxParams::callbackFunction(char const*)+0xd6>
 800e320:	9801      	ldr	r0, [sp, #4]
 800e322:	f000 fc47 	bl	800ebb4 <PixelType::ConvertTxH(float)>
 800e326:	6863      	ldr	r3, [r4, #4]
 800e328:	b120      	cbz	r0, 800e334 <PixelDmxParams::callbackFunction(char const*)+0xd0>
 800e32a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e32e:	6063      	str	r3, [r4, #4]
 800e330:	7620      	strb	r0, [r4, #24]
 800e332:	e7ed      	b.n	800e310 <PixelDmxParams::callbackFunction(char const*)+0xac>
 800e334:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e338:	e7f9      	b.n	800e32e <PixelDmxParams::callbackFunction(char const*)+0xca>
 800e33a:	4628      	mov	r0, r5
 800e33c:	4963      	ldr	r1, [pc, #396]	; (800e4cc <PixelDmxParams::callbackFunction(char const*)+0x268>)
 800e33e:	aa01      	add	r2, sp, #4
 800e340:	f005 f8b1 	bl	80134a6 <Sscan::Float(char const*, char const*, float&)>
 800e344:	b960      	cbnz	r0, 800e360 <PixelDmxParams::callbackFunction(char const*)+0xfc>
 800e346:	9801      	ldr	r0, [sp, #4]
 800e348:	f000 fc34 	bl	800ebb4 <PixelType::ConvertTxH(float)>
 800e34c:	6863      	ldr	r3, [r4, #4]
 800e34e:	b120      	cbz	r0, 800e35a <PixelDmxParams::callbackFunction(char const*)+0xf6>
 800e350:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e354:	6063      	str	r3, [r4, #4]
 800e356:	7660      	strb	r0, [r4, #25]
 800e358:	e7da      	b.n	800e310 <PixelDmxParams::callbackFunction(char const*)+0xac>
 800e35a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e35e:	e7f9      	b.n	800e354 <PixelDmxParams::callbackFunction(char const*)+0xf0>
 800e360:	4628      	mov	r0, r5
 800e362:	495b      	ldr	r1, [pc, #364]	; (800e4d0 <PixelDmxParams::callbackFunction(char const*)+0x26c>)
 800e364:	f10d 0202 	add.w	r2, sp, #2
 800e368:	f005 f941 	bl	80135ee <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800e36c:	b998      	cbnz	r0, 800e396 <PixelDmxParams::callbackFunction(char const*)+0x132>
 800e36e:	f240 25a6 	movw	r5, #678	; 0x2a6
 800e372:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800e376:	6863      	ldr	r3, [r4, #4]
 800e378:	1e8a      	subs	r2, r1, #2
 800e37a:	b292      	uxth	r2, r2
 800e37c:	42aa      	cmp	r2, r5
 800e37e:	bf81      	itttt	hi
 800e380:	2201      	movhi	r2, #1
 800e382:	75a0      	strbhi	r0, [r4, #22]
 800e384:	7562      	strbhi	r2, [r4, #21]
 800e386:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 800e38a:	bf9c      	itt	ls
 800e38c:	f8a4 1015 	strhls.w	r1, [r4, #21]
 800e390:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 800e394:	e786      	b.n	800e2a4 <PixelDmxParams::callbackFunction(char const*)+0x40>
 800e396:	4628      	mov	r0, r5
 800e398:	494e      	ldr	r1, [pc, #312]	; (800e4d4 <PixelDmxParams::callbackFunction(char const*)+0x270>)
 800e39a:	aa03      	add	r2, sp, #12
 800e39c:	f005 f945 	bl	801362a <Sscan::Uint32(char const*, char const*, unsigned int&)>
 800e3a0:	b960      	cbnz	r0, 800e3bc <PixelDmxParams::callbackFunction(char const*)+0x158>
 800e3a2:	9a03      	ldr	r2, [sp, #12]
 800e3a4:	494c      	ldr	r1, [pc, #304]	; (800e4d8 <PixelDmxParams::callbackFunction(char const*)+0x274>)
 800e3a6:	6863      	ldr	r3, [r4, #4]
 800e3a8:	428a      	cmp	r2, r1
 800e3aa:	bf14      	ite	ne
 800e3ac:	f043 0310 	orrne.w	r3, r3, #16
 800e3b0:	f023 0310 	biceq.w	r3, r3, #16
 800e3b4:	6063      	str	r3, [r4, #4]
 800e3b6:	f8c4 200e 	str.w	r2, [r4, #14]
 800e3ba:	e7a9      	b.n	800e310 <PixelDmxParams::callbackFunction(char const*)+0xac>
 800e3bc:	4628      	mov	r0, r5
 800e3be:	4947      	ldr	r1, [pc, #284]	; (800e4dc <PixelDmxParams::callbackFunction(char const*)+0x278>)
 800e3c0:	f10d 0201 	add.w	r2, sp, #1
 800e3c4:	f005 f95a 	bl	801367c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800e3c8:	b988      	cbnz	r0, 800e3ee <PixelDmxParams::callbackFunction(char const*)+0x18a>
 800e3ca:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800e3ce:	6863      	ldr	r3, [r4, #4]
 800e3d0:	1e4a      	subs	r2, r1, #1
 800e3d2:	b2d2      	uxtb	r2, r2
 800e3d4:	2afd      	cmp	r2, #253	; 0xfd
 800e3d6:	bf83      	ittte	hi
 800e3d8:	f023 0320 	bichi.w	r3, r3, #32
 800e3dc:	6063      	strhi	r3, [r4, #4]
 800e3de:	23ff      	movhi	r3, #255	; 0xff
 800e3e0:	f043 0320 	orrls.w	r3, r3, #32
 800e3e4:	bf9a      	itte	ls
 800e3e6:	6063      	strls	r3, [r4, #4]
 800e3e8:	74a1      	strbls	r1, [r4, #18]
 800e3ea:	74a3      	strbhi	r3, [r4, #18]
 800e3ec:	e790      	b.n	800e310 <PixelDmxParams::callbackFunction(char const*)+0xac>
 800e3ee:	4628      	mov	r0, r5
 800e3f0:	493b      	ldr	r1, [pc, #236]	; (800e4e0 <PixelDmxParams::callbackFunction(char const*)+0x27c>)
 800e3f2:	f10d 0202 	add.w	r2, sp, #2
 800e3f6:	f005 f8fa 	bl	80135ee <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800e3fa:	2800      	cmp	r0, #0
 800e3fc:	d13a      	bne.n	800e474 <PixelDmxParams::callbackFunction(char const*)+0x210>
 800e3fe:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800e402:	6863      	ldr	r3, [r4, #4]
 800e404:	1e91      	subs	r1, r2, #2
 800e406:	f5b1 7fff 	cmp.w	r1, #510	; 0x1fe
 800e40a:	bf83      	ittte	hi
 800e40c:	2201      	movhi	r2, #1
 800e40e:	72e2      	strbhi	r2, [r4, #11]
 800e410:	2200      	movhi	r2, #0
 800e412:	f8a4 200b 	strhls.w	r2, [r4, #11]
 800e416:	bf92      	itee	ls
 800e418:	f043 0304 	orrls.w	r3, r3, #4
 800e41c:	7322      	strbhi	r2, [r4, #12]
 800e41e:	f023 0304 	bichi.w	r3, r3, #4
 800e422:	e73f      	b.n	800e2a4 <PixelDmxParams::callbackFunction(char const*)+0x40>
 800e424:	4628      	mov	r0, r5
 800e426:	492f      	ldr	r1, [pc, #188]	; (800e4e4 <PixelDmxParams::callbackFunction(char const*)+0x280>)
 800e428:	f10d 0201 	add.w	r2, sp, #1
 800e42c:	f005 f926 	bl	801367c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800e430:	b948      	cbnz	r0, 800e446 <PixelDmxParams::callbackFunction(char const*)+0x1e2>
 800e432:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e436:	6863      	ldr	r3, [r4, #4]
 800e438:	b112      	cbz	r2, 800e440 <PixelDmxParams::callbackFunction(char const*)+0x1dc>
 800e43a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e43e:	e731      	b.n	800e2a4 <PixelDmxParams::callbackFunction(char const*)+0x40>
 800e440:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e444:	e72e      	b.n	800e2a4 <PixelDmxParams::callbackFunction(char const*)+0x40>
 800e446:	4628      	mov	r0, r5
 800e448:	4927      	ldr	r1, [pc, #156]	; (800e4e8 <PixelDmxParams::callbackFunction(char const*)+0x284>)
 800e44a:	aa01      	add	r2, sp, #4
 800e44c:	f005 f82b 	bl	80134a6 <Sscan::Float(char const*, char const*, float&)>
 800e450:	4605      	mov	r5, r0
 800e452:	2800      	cmp	r0, #0
 800e454:	f47f af5c 	bne.w	800e310 <PixelDmxParams::callbackFunction(char const*)+0xac>
 800e458:	4924      	ldr	r1, [pc, #144]	; (800e4ec <PixelDmxParams::callbackFunction(char const*)+0x288>)
 800e45a:	9801      	ldr	r0, [sp, #4]
 800e45c:	f7f9 fd5c 	bl	8007f18 <__aeabi_fmul>
 800e460:	f7f9 feaa 	bl	80081b8 <__aeabi_f2uiz>
 800e464:	b2c3      	uxtb	r3, r0
 800e466:	f1a3 0214 	sub.w	r2, r3, #20
 800e46a:	2a05      	cmp	r2, #5
 800e46c:	bf8c      	ite	hi
 800e46e:	7365      	strbhi	r5, [r4, #13]
 800e470:	7363      	strbls	r3, [r4, #13]
 800e472:	e74d      	b.n	800e310 <PixelDmxParams::callbackFunction(char const*)+0xac>
 800e474:	4628      	mov	r0, r5
 800e476:	491e      	ldr	r1, [pc, #120]	; (800e4f0 <PixelDmxParams::callbackFunction(char const*)+0x28c>)
 800e478:	f10d 0202 	add.w	r2, sp, #2
 800e47c:	f005 f8b7 	bl	80135ee <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800e480:	b930      	cbnz	r0, 800e490 <PixelDmxParams::callbackFunction(char const*)+0x22c>
 800e482:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e486:	8363      	strh	r3, [r4, #26]
 800e488:	6863      	ldr	r3, [r4, #4]
 800e48a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e48e:	6063      	str	r3, [r4, #4]
 800e490:	4628      	mov	r0, r5
 800e492:	4918      	ldr	r1, [pc, #96]	; (800e4f4 <PixelDmxParams::callbackFunction(char const*)+0x290>)
 800e494:	f10d 0201 	add.w	r2, sp, #1
 800e498:	f005 f8f0 	bl	801367c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800e49c:	2800      	cmp	r0, #0
 800e49e:	d1c1      	bne.n	800e424 <PixelDmxParams::callbackFunction(char const*)+0x1c0>
 800e4a0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e4a4:	6863      	ldr	r3, [r4, #4]
 800e4a6:	1e51      	subs	r1, r2, #1
 800e4a8:	2904      	cmp	r1, #4
 800e4aa:	bf99      	ittee	ls
 800e4ac:	7522      	strbls	r2, [r4, #20]
 800e4ae:	f043 0308 	orrls.w	r3, r3, #8
 800e4b2:	7520      	strbhi	r0, [r4, #20]
 800e4b4:	f023 0308 	bichi.w	r3, r3, #8
 800e4b8:	e6f4      	b.n	800e2a4 <PixelDmxParams::callbackFunction(char const*)+0x40>
 800e4ba:	bf00      	nop
 800e4bc:	08017e6d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 800e4c0:	08017e76 	stmdaeq	r1, {r1, r2, r4, r5, r6, r9, sl, fp, ip, sp, lr}
 800e4c4:	08017e5d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r9, sl, fp, ip, sp, lr}
 800e4c8:	08017e80 	stmdaeq	r1, {r7, r9, sl, fp, ip, sp, lr}
 800e4cc:	08017e88 	stmdaeq	r1, {r3, r7, r9, sl, fp, ip, sp, lr}
 800e4d0:	08017e2a 	stmdaeq	r1, {r1, r3, r5, r9, sl, fp, ip, sp, lr}
 800e4d4:	08017e0e 	stmdaeq	r1, {r1, r2, r3, r9, sl, fp, ip, sp, lr}
 800e4d8:	003d0900 	eorseq	r0, sp, r0, lsl #18
 800e4dc:	08017e4b 	stmdaeq	r1, {r0, r1, r3, r6, r9, sl, fp, ip, sp, lr}
 800e4e0:	08017f65 	stmdaeq	r1, {r0, r2, r5, r6, r8, r9, sl, fp, ip, sp, lr}
 800e4e4:	08017e3a 	stmdaeq	r1, {r1, r3, r4, r5, r9, sl, fp, ip, sp, lr}
 800e4e8:	08017e02 	stmdaeq	r1, {r1, r9, sl, fp, ip, sp, lr}
 800e4ec:	41200000 			; <UNDEFINED> instruction: 0x41200000
 800e4f0:	08017f09 	stmdaeq	r1, {r0, r3, r8, r9, sl, fp, ip, sp, lr}
 800e4f4:	08017e1d 	stmdaeq	r1, {r0, r2, r3, r4, r9, sl, fp, ip, sp, lr}

0800e4f8 <PixelDmxParams::staticCallbackFunction(void*, char const*)>:
 800e4f8:	f7ff beb4 	b.w	800e264 <PixelDmxParams::callbackFunction(char const*)>

0800e4fc <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)>:
 800e4fc:	b570      	push	{r4, r5, r6, lr}
 800e4fe:	4604      	mov	r4, r0
 800e500:	4615      	mov	r5, r2
 800e502:	461e      	mov	r6, r3
 800e504:	b086      	sub	sp, #24
 800e506:	3004      	adds	r0, #4
 800e508:	b389      	cbz	r1, 800e56e <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x72>
 800e50a:	2218      	movs	r2, #24
 800e50c:	f005 fdbd 	bl	801408a <memmove>
 800e510:	462a      	mov	r2, r5
 800e512:	4633      	mov	r3, r6
 800e514:	4996      	ldr	r1, [pc, #600]	; (800e770 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x274>)
 800e516:	a803      	add	r0, sp, #12
 800e518:	f004 fed4 	bl	80132c4 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800e51c:	7a20      	ldrb	r0, [r4, #8]
 800e51e:	f000 faad 	bl	800ea7c <PixelType::GetType(pixel::Type)>
 800e522:	6863      	ldr	r3, [r4, #4]
 800e524:	4602      	mov	r2, r0
 800e526:	4993      	ldr	r1, [pc, #588]	; (800e774 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x278>)
 800e528:	f003 0301 	and.w	r3, r3, #1
 800e52c:	a803      	add	r0, sp, #12
 800e52e:	f7ff fded 	bl	800e10c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800e532:	6863      	ldr	r3, [r4, #4]
 800e534:	f8b4 2009 	ldrh.w	r2, [r4, #9]
 800e538:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e53c:	498e      	ldr	r1, [pc, #568]	; (800e778 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x27c>)
 800e53e:	a803      	add	r0, sp, #12
 800e540:	f7ff fdbc 	bl	800e0bc <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800e544:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800e548:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800e54c:	6863      	ldr	r3, [r4, #4]
 800e54e:	42aa      	cmp	r2, r5
 800e550:	d227      	bcs.n	800e5a2 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0xa6>
 800e552:	9803      	ldr	r0, [sp, #12]
 800e554:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800e558:	4410      	add	r0, r2
 800e55a:	eba5 0502 	sub.w	r5, r5, r2
 800e55e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800e562:	d10b      	bne.n	800e57c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x80>
 800e564:	b96a      	cbnz	r2, 800e582 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x86>
 800e566:	9200      	str	r2, [sp, #0]
 800e568:	4b84      	ldr	r3, [pc, #528]	; (800e77c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x280>)
 800e56a:	4a85      	ldr	r2, [pc, #532]	; (800e780 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x284>)
 800e56c:	e00f      	b.n	800e58e <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x92>
 800e56e:	6823      	ldr	r3, [r4, #0]
 800e570:	4601      	mov	r1, r0
 800e572:	681a      	ldr	r2, [r3, #0]
 800e574:	4618      	mov	r0, r3
 800e576:	68d2      	ldr	r2, [r2, #12]
 800e578:	4790      	blx	r2
 800e57a:	e7c9      	b.n	800e510 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x14>
 800e57c:	2a00      	cmp	r2, #0
 800e57e:	f000 808a 	beq.w	800e696 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x19a>
 800e582:	3b00      	subs	r3, #0
 800e584:	bf18      	it	ne
 800e586:	2301      	movne	r3, #1
 800e588:	4a7e      	ldr	r2, [pc, #504]	; (800e784 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x288>)
 800e58a:	9300      	str	r3, [sp, #0]
 800e58c:	4b7b      	ldr	r3, [pc, #492]	; (800e77c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x280>)
 800e58e:	4629      	mov	r1, r5
 800e590:	f7fa fd2e 	bl	8008ff0 <snprintf>
 800e594:	4285      	cmp	r5, r0
 800e596:	bfa2      	ittt	ge
 800e598:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800e59c:	18c0      	addge	r0, r0, r3
 800e59e:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800e5a2:	7b63      	ldrb	r3, [r4, #13]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d17b      	bne.n	800e6a0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1a4>
 800e5a8:	4a77      	ldr	r2, [pc, #476]	; (800e788 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x28c>)
 800e5aa:	4978      	ldr	r1, [pc, #480]	; (800e78c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x290>)
 800e5ac:	a803      	add	r0, sp, #12
 800e5ae:	f7ff fdad 	bl	800e10c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800e5b2:	4977      	ldr	r1, [pc, #476]	; (800e790 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x294>)
 800e5b4:	a803      	add	r0, sp, #12
 800e5b6:	f004 ff0b 	bl	80133d0 <PropertiesBuilder::AddComment(char const*)>
 800e5ba:	6863      	ldr	r3, [r4, #4]
 800e5bc:	059e      	lsls	r6, r3, #22
 800e5be:	d403      	bmi.n	800e5c8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0xcc>
 800e5c0:	7a20      	ldrb	r0, [r4, #8]
 800e5c2:	f000 fabf 	bl	800eb44 <PixelType::GetMap(pixel::Type)>
 800e5c6:	75e0      	strb	r0, [r4, #23]
 800e5c8:	7de0      	ldrb	r0, [r4, #23]
 800e5ca:	f000 faaf 	bl	800eb2c <PixelType::GetMap(pixel::Map)>
 800e5ce:	6863      	ldr	r3, [r4, #4]
 800e5d0:	4602      	mov	r2, r0
 800e5d2:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800e5d6:	496f      	ldr	r1, [pc, #444]	; (800e794 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 800e5d8:	a803      	add	r0, sp, #12
 800e5da:	f7ff fd97 	bl	800e10c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800e5de:	6863      	ldr	r3, [r4, #4]
 800e5e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e5e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e5e8:	d011      	beq.n	800e60e <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x112>
 800e5ea:	f10d 020b 	add.w	r2, sp, #11
 800e5ee:	7a20      	ldrb	r0, [r4, #8]
 800e5f0:	f10d 010a 	add.w	r1, sp, #10
 800e5f4:	f000 f93b 	bl	800e86e <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 800e5f8:	6863      	ldr	r3, [r4, #4]
 800e5fa:	055d      	lsls	r5, r3, #21
 800e5fc:	bf5c      	itt	pl
 800e5fe:	f89d 200a 	ldrbpl.w	r2, [sp, #10]
 800e602:	7622      	strbpl	r2, [r4, #24]
 800e604:	0518      	lsls	r0, r3, #20
 800e606:	bf5c      	itt	pl
 800e608:	f89d 300b 	ldrbpl.w	r3, [sp, #11]
 800e60c:	7663      	strbpl	r3, [r4, #25]
 800e60e:	4962      	ldr	r1, [pc, #392]	; (800e798 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x29c>)
 800e610:	a803      	add	r0, sp, #12
 800e612:	f004 fedd 	bl	80133d0 <PropertiesBuilder::AddComment(char const*)>
 800e616:	7e20      	ldrb	r0, [r4, #24]
 800e618:	f000 fa9e 	bl	800eb58 <PixelType::ConvertTxH(unsigned char)>
 800e61c:	2502      	movs	r5, #2
 800e61e:	6863      	ldr	r3, [r4, #4]
 800e620:	4602      	mov	r2, r0
 800e622:	495e      	ldr	r1, [pc, #376]	; (800e79c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 800e624:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800e628:	9500      	str	r5, [sp, #0]
 800e62a:	a803      	add	r0, sp, #12
 800e62c:	f7ff fd96 	bl	800e15c <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 800e630:	7e60      	ldrb	r0, [r4, #25]
 800e632:	f000 fa91 	bl	800eb58 <PixelType::ConvertTxH(unsigned char)>
 800e636:	6863      	ldr	r3, [r4, #4]
 800e638:	4602      	mov	r2, r0
 800e63a:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 800e63e:	4958      	ldr	r1, [pc, #352]	; (800e7a0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2a4>)
 800e640:	9500      	str	r5, [sp, #0]
 800e642:	a803      	add	r0, sp, #12
 800e644:	f7ff fd8a 	bl	800e15c <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 800e648:	4956      	ldr	r1, [pc, #344]	; (800e7a4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2a8>)
 800e64a:	a803      	add	r0, sp, #12
 800e64c:	f004 fec0 	bl	80133d0 <PropertiesBuilder::AddComment(char const*)>
 800e650:	6863      	ldr	r3, [r4, #4]
 800e652:	f8b4 2015 	ldrh.w	r2, [r4, #21]
 800e656:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800e65a:	4953      	ldr	r1, [pc, #332]	; (800e7a8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2ac>)
 800e65c:	a803      	add	r0, sp, #12
 800e65e:	f7ff fd2d 	bl	800e0bc <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800e662:	4952      	ldr	r1, [pc, #328]	; (800e7ac <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2b0>)
 800e664:	a803      	add	r0, sp, #12
 800e666:	f004 feb3 	bl	80133d0 <PropertiesBuilder::AddComment(char const*)>
 800e66a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800e66e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800e672:	f8d4 300e 	ldr.w	r3, [r4, #14]
 800e676:	42aa      	cmp	r2, r5
 800e678:	6861      	ldr	r1, [r4, #4]
 800e67a:	d22e      	bcs.n	800e6da <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1de>
 800e67c:	9803      	ldr	r0, [sp, #12]
 800e67e:	06c9      	lsls	r1, r1, #27
 800e680:	4410      	add	r0, r2
 800e682:	eba5 0502 	sub.w	r5, r5, r2
 800e686:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800e68a:	d417      	bmi.n	800e6bc <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1c0>
 800e68c:	b9c2      	cbnz	r2, 800e6c0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1c4>
 800e68e:	9300      	str	r3, [sp, #0]
 800e690:	4a3b      	ldr	r2, [pc, #236]	; (800e780 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x284>)
 800e692:	4b47      	ldr	r3, [pc, #284]	; (800e7b0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2b4>)
 800e694:	e017      	b.n	800e6c6 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1ca>
 800e696:	2301      	movs	r3, #1
 800e698:	4a46      	ldr	r2, [pc, #280]	; (800e7b4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2b8>)
 800e69a:	9300      	str	r3, [sp, #0]
 800e69c:	4b37      	ldr	r3, [pc, #220]	; (800e77c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x280>)
 800e69e:	e776      	b.n	800e58e <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x92>
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f7f9 f96f 	bl	8007984 <__aeabi_ui2f>
 800e6a6:	4944      	ldr	r1, [pc, #272]	; (800e7b8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2bc>)
 800e6a8:	f7f9 fcea 	bl	8008080 <__aeabi_fdiv>
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	4602      	mov	r2, r0
 800e6b0:	4936      	ldr	r1, [pc, #216]	; (800e78c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x290>)
 800e6b2:	9300      	str	r3, [sp, #0]
 800e6b4:	a803      	add	r0, sp, #12
 800e6b6:	f7ff fd51 	bl	800e15c <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 800e6ba:	e77a      	b.n	800e5b2 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0xb6>
 800e6bc:	2a00      	cmp	r2, #0
 800e6be:	d052      	beq.n	800e766 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x26a>
 800e6c0:	9300      	str	r3, [sp, #0]
 800e6c2:	4a30      	ldr	r2, [pc, #192]	; (800e784 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x288>)
 800e6c4:	4b3a      	ldr	r3, [pc, #232]	; (800e7b0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2b4>)
 800e6c6:	4629      	mov	r1, r5
 800e6c8:	f7fa fc92 	bl	8008ff0 <snprintf>
 800e6cc:	4285      	cmp	r5, r0
 800e6ce:	bfa2      	ittt	ge
 800e6d0:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800e6d4:	18c0      	addge	r0, r0, r3
 800e6d6:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800e6da:	4938      	ldr	r1, [pc, #224]	; (800e7bc <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2c0>)
 800e6dc:	a803      	add	r0, sp, #12
 800e6de:	f004 fe77 	bl	80133d0 <PropertiesBuilder::AddComment(char const*)>
 800e6e2:	6863      	ldr	r3, [r4, #4]
 800e6e4:	7ca2      	ldrb	r2, [r4, #18]
 800e6e6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e6ea:	4935      	ldr	r1, [pc, #212]	; (800e7c0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2c4>)
 800e6ec:	a803      	add	r0, sp, #12
 800e6ee:	f7ff fcbd 	bl	800e06c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800e6f2:	4934      	ldr	r1, [pc, #208]	; (800e7c4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2c8>)
 800e6f4:	a803      	add	r0, sp, #12
 800e6f6:	f004 fe6b 	bl	80133d0 <PropertiesBuilder::AddComment(char const*)>
 800e6fa:	6863      	ldr	r3, [r4, #4]
 800e6fc:	f8b4 200b 	ldrh.w	r2, [r4, #11]
 800e700:	4931      	ldr	r1, [pc, #196]	; (800e7c8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2cc>)
 800e702:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800e706:	a803      	add	r0, sp, #12
 800e708:	f7ff fcd8 	bl	800e0bc <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800e70c:	6863      	ldr	r3, [r4, #4]
 800e70e:	8b62      	ldrh	r2, [r4, #26]
 800e710:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800e714:	492d      	ldr	r1, [pc, #180]	; (800e7cc <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2d0>)
 800e716:	a803      	add	r0, sp, #12
 800e718:	f7ff fcd0 	bl	800e0bc <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800e71c:	492c      	ldr	r1, [pc, #176]	; (800e7d0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2d4>)
 800e71e:	a803      	add	r0, sp, #12
 800e720:	f004 fe56 	bl	80133d0 <PropertiesBuilder::AddComment(char const*)>
 800e724:	6863      	ldr	r3, [r4, #4]
 800e726:	7d22      	ldrb	r2, [r4, #20]
 800e728:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800e72c:	4929      	ldr	r1, [pc, #164]	; (800e7d4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2d8>)
 800e72e:	a803      	add	r0, sp, #12
 800e730:	f7ff fc9c 	bl	800e06c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800e734:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800e738:	b17b      	cbz	r3, 800e75a <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x25e>
 800e73a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800e73e:	9b03      	ldr	r3, [sp, #12]
 800e740:	4413      	add	r3, r2
 800e742:	227d      	movs	r2, #125	; 0x7d
 800e744:	f803 2c01 	strb.w	r2, [r3, #-1]
 800e748:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800e74c:	9903      	ldr	r1, [sp, #12]
 800e74e:	54ca      	strb	r2, [r1, r3]
 800e750:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800e754:	3301      	adds	r3, #1
 800e756:	f8ad 3012 	strh.w	r3, [sp, #18]
 800e75a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800e75e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e760:	601a      	str	r2, [r3, #0]
 800e762:	b006      	add	sp, #24
 800e764:	bd70      	pop	{r4, r5, r6, pc}
 800e766:	9300      	str	r3, [sp, #0]
 800e768:	4a12      	ldr	r2, [pc, #72]	; (800e7b4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2b8>)
 800e76a:	4b11      	ldr	r3, [pc, #68]	; (800e7b0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2b4>)
 800e76c:	e7ab      	b.n	800e6c6 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1ca>
 800e76e:	bf00      	nop
 800e770:	08017e90 	stmdaeq	r1, {r4, r7, r9, sl, fp, ip, sp, lr}
 800e774:	08017e6d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 800e778:	08017e76 	stmdaeq	r1, {r1, r2, r4, r5, r6, r9, sl, fp, ip, sp, lr}
 800e77c:	08017e3a 	stmdaeq	r1, {r1, r3, r4, r5, r9, sl, fp, ip, sp, lr}
 800e780:	08016691 	stmdaeq	r1, {r0, r4, r7, r9, sl, sp, lr}
 800e784:	08016688 	stmdaeq	r1, {r3, r7, r9, sl, sp, lr}
 800e788:	08016d49 	stmdaeq	r1, {r0, r3, r6, r8, sl, fp, sp, lr}
 800e78c:	08017e02 	stmdaeq	r1, {r1, r9, sl, fp, ip, sp, lr}
 800e790:	08016d53 	stmdaeq	r1, {r0, r1, r4, r6, r8, sl, fp, sp, lr}
 800e794:	08017e5d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r9, sl, fp, ip, sp, lr}
 800e798:	08016d67 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, sl, fp, sp, lr}
 800e79c:	08017e80 	stmdaeq	r1, {r7, r9, sl, fp, ip, sp, lr}
 800e7a0:	08017e88 	stmdaeq	r1, {r3, r7, r9, sl, fp, ip, sp, lr}
 800e7a4:	08016d7d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r8, sl, fp, sp, lr}
 800e7a8:	08017e2a 	stmdaeq	r1, {r1, r3, r5, r9, sl, fp, ip, sp, lr}
 800e7ac:	08016d86 	stmdaeq	r1, {r1, r2, r7, r8, sl, fp, sp, lr}
 800e7b0:	08017e0e 	stmdaeq	r1, {r1, r2, r3, r9, sl, fp, ip, sp, lr}
 800e7b4:	08016692 	stmdaeq	r1, {r1, r4, r7, r9, sl, sp, lr}
 800e7b8:	41200000 			; <UNDEFINED> instruction: 0x41200000
 800e7bc:	08016d98 	stmdaeq	r1, {r3, r4, r7, r8, sl, fp, sp, lr}
 800e7c0:	08017e4b 	stmdaeq	r1, {r0, r1, r3, r6, r9, sl, fp, ip, sp, lr}
 800e7c4:	08017c05 	stmdaeq	r1, {r0, r2, sl, fp, ip, sp, lr}
 800e7c8:	08017f65 	stmdaeq	r1, {r0, r2, r5, r6, r8, r9, sl, fp, ip, sp, lr}
 800e7cc:	08017f09 	stmdaeq	r1, {r0, r3, r8, r9, sl, fp, ip, sp, lr}
 800e7d0:	08016da6 	stmdaeq	r1, {r1, r2, r5, r7, r8, sl, fp, sp, lr}
 800e7d4:	08017e1d 	stmdaeq	r1, {r0, r2, r3, r4, r9, sl, fp, ip, sp, lr}

0800e7d8 <PixelDmxParams::Save(char*, unsigned int, unsigned int&)>:
 800e7d8:	b513      	push	{r0, r1, r4, lr}
 800e7da:	6804      	ldr	r4, [r0, #0]
 800e7dc:	b914      	cbnz	r4, 800e7e4 <PixelDmxParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800e7de:	601c      	str	r4, [r3, #0]
 800e7e0:	b002      	add	sp, #8
 800e7e2:	bd10      	pop	{r4, pc}
 800e7e4:	9300      	str	r3, [sp, #0]
 800e7e6:	4613      	mov	r3, r2
 800e7e8:	460a      	mov	r2, r1
 800e7ea:	2100      	movs	r1, #0
 800e7ec:	f7ff fe86 	bl	800e4fc <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)>
 800e7f0:	e7f6      	b.n	800e7e0 <PixelDmxParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800e7f2 <PixelDmxParams::Set(PixelDmxConfiguration*)>:
 800e7f2:	6843      	ldr	r3, [r0, #4]
 800e7f4:	07da      	lsls	r2, r3, #31
 800e7f6:	bf44      	itt	mi
 800e7f8:	7a02      	ldrbmi	r2, [r0, #8]
 800e7fa:	600a      	strmi	r2, [r1, #0]
 800e7fc:	079a      	lsls	r2, r3, #30
 800e7fe:	d505      	bpl.n	800e80c <PixelDmxParams::Set(PixelDmxConfiguration*)+0x1a>
 800e800:	f8b0 2009 	ldrh.w	r2, [r0, #9]
 800e804:	2a00      	cmp	r2, #0
 800e806:	bf08      	it	eq
 800e808:	22aa      	moveq	r2, #170	; 0xaa
 800e80a:	604a      	str	r2, [r1, #4]
 800e80c:	059a      	lsls	r2, r3, #22
 800e80e:	bf44      	itt	mi
 800e810:	7dc2      	ldrbmi	r2, [r0, #23]
 800e812:	608a      	strmi	r2, [r1, #8]
 800e814:	055a      	lsls	r2, r3, #21
 800e816:	bf44      	itt	mi
 800e818:	7e02      	ldrbmi	r2, [r0, #24]
 800e81a:	740a      	strbmi	r2, [r1, #16]
 800e81c:	051a      	lsls	r2, r3, #20
 800e81e:	bf44      	itt	mi
 800e820:	7e42      	ldrbmi	r2, [r0, #25]
 800e822:	744a      	strbmi	r2, [r1, #17]
 800e824:	06da      	lsls	r2, r3, #27
 800e826:	bf44      	itt	mi
 800e828:	f8d0 200e 	ldrmi.w	r2, [r0, #14]
 800e82c:	60ca      	strmi	r2, [r1, #12]
 800e82e:	069a      	lsls	r2, r3, #26
 800e830:	bf44      	itt	mi
 800e832:	7c82      	ldrbmi	r2, [r0, #18]
 800e834:	748a      	strbmi	r2, [r1, #18]
 800e836:	061a      	lsls	r2, r3, #24
 800e838:	d504      	bpl.n	800e844 <PixelDmxParams::Set(PixelDmxConfiguration*)+0x52>
 800e83a:	2201      	movs	r2, #1
 800e83c:	750a      	strb	r2, [r1, #20]
 800e83e:	7b42      	ldrb	r2, [r0, #13]
 800e840:	b102      	cbz	r2, 800e844 <PixelDmxParams::Set(PixelDmxConfiguration*)+0x52>
 800e842:	74ca      	strb	r2, [r1, #19]
 800e844:	075a      	lsls	r2, r3, #29
 800e846:	d50b      	bpl.n	800e860 <PixelDmxParams::Set(PixelDmxConfiguration*)+0x6e>
 800e848:	7ac2      	ldrb	r2, [r0, #11]
 800e84a:	b510      	push	{r4, lr}
 800e84c:	7b04      	ldrb	r4, [r0, #12]
 800e84e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800e852:	858a      	strh	r2, [r1, #44]	; 0x2c
 800e854:	05da      	lsls	r2, r3, #23
 800e856:	bf44      	itt	mi
 800e858:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 800e85c:	620b      	strmi	r3, [r1, #32]
 800e85e:	bd10      	pop	{r4, pc}
 800e860:	05db      	lsls	r3, r3, #23
 800e862:	bf44      	itt	mi
 800e864:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 800e868:	620b      	strmi	r3, [r1, #32]
 800e86a:	4770      	bx	lr

0800e86c <PixelDmxParams::Dump()>:
 800e86c:	4770      	bx	lr

0800e86e <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>:
 800e86e:	23c0      	movs	r3, #192	; 0xc0
 800e870:	2803      	cmp	r0, #3
 800e872:	700b      	strb	r3, [r1, #0]
 800e874:	d006      	beq.n	800e884 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x16>
 800e876:	3808      	subs	r0, #8
 800e878:	2803      	cmp	r0, #3
 800e87a:	bf34      	ite	cc
 800e87c:	23fc      	movcc	r3, #252	; 0xfc
 800e87e:	23f0      	movcs	r3, #240	; 0xf0
 800e880:	7013      	strb	r3, [r2, #0]
 800e882:	4770      	bx	lr
 800e884:	23f8      	movs	r3, #248	; 0xf8
 800e886:	e7fb      	b.n	800e880 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x12>

0800e888 <PixelConfiguration::Validate(unsigned int&)>:
 800e888:	b513      	push	{r0, r1, r4, lr}
 800e88a:	4604      	mov	r4, r0
 800e88c:	6800      	ldr	r0, [r0, #0]
 800e88e:	6863      	ldr	r3, [r4, #4]
 800e890:	2807      	cmp	r0, #7
 800e892:	68a2      	ldr	r2, [r4, #8]
 800e894:	d128      	bne.n	800e8e8 <PixelConfiguration::Validate(unsigned int&)+0x60>
 800e896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e89a:	bf28      	it	cs
 800e89c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e8a0:	6063      	str	r3, [r4, #4]
 800e8a2:	2304      	movs	r3, #4
 800e8a4:	600b      	str	r3, [r1, #0]
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	2a06      	cmp	r2, #6
 800e8aa:	7563      	strb	r3, [r4, #21]
 800e8ac:	d102      	bne.n	800e8b4 <PixelConfiguration::Validate(unsigned int&)+0x2c>
 800e8ae:	f000 f949 	bl	800eb44 <PixelType::GetMap(pixel::Type)>
 800e8b2:	60a0      	str	r0, [r4, #8]
 800e8b4:	7c63      	ldrb	r3, [r4, #17]
 800e8b6:	7c22      	ldrb	r2, [r4, #16]
 800e8b8:	6820      	ldr	r0, [r4, #0]
 800e8ba:	429a      	cmp	r2, r3
 800e8bc:	bf28      	it	cs
 800e8be:	2300      	movcs	r3, #0
 800e8c0:	f10d 0207 	add.w	r2, sp, #7
 800e8c4:	bf28      	it	cs
 800e8c6:	8223      	strhcs	r3, [r4, #16]
 800e8c8:	f10d 0106 	add.w	r1, sp, #6
 800e8cc:	f7ff ffcf 	bl	800e86e <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 800e8d0:	7c23      	ldrb	r3, [r4, #16]
 800e8d2:	b913      	cbnz	r3, 800e8da <PixelConfiguration::Validate(unsigned int&)+0x52>
 800e8d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e8d8:	7423      	strb	r3, [r4, #16]
 800e8da:	7c63      	ldrb	r3, [r4, #17]
 800e8dc:	b913      	cbnz	r3, 800e8e4 <PixelConfiguration::Validate(unsigned int&)+0x5c>
 800e8de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e8e2:	7463      	strb	r3, [r4, #17]
 800e8e4:	4b29      	ldr	r3, [pc, #164]	; (800e98c <PixelConfiguration::Validate(unsigned int&)+0x104>)
 800e8e6:	e01e      	b.n	800e926 <PixelConfiguration::Validate(unsigned int&)+0x9e>
 800e8e8:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 800e8ec:	bf28      	it	cs
 800e8ee:	f44f 732a 	movcs.w	r3, #680	; 0x2a8
 800e8f2:	6063      	str	r3, [r4, #4]
 800e8f4:	2303      	movs	r3, #3
 800e8f6:	600b      	str	r3, [r1, #0]
 800e8f8:	f1a0 030b 	sub.w	r3, r0, #11
 800e8fc:	2b01      	cmp	r3, #1
 800e8fe:	d806      	bhi.n	800e90e <PixelConfiguration::Validate(unsigned int&)+0x86>
 800e900:	7ca3      	ldrb	r3, [r4, #18]
 800e902:	2b1f      	cmp	r3, #31
 800e904:	d83d      	bhi.n	800e982 <PixelConfiguration::Validate(unsigned int&)+0xfa>
 800e906:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800e90a:	74a3      	strb	r3, [r4, #18]
 800e90c:	e001      	b.n	800e912 <PixelConfiguration::Validate(unsigned int&)+0x8a>
 800e90e:	2800      	cmp	r0, #0
 800e910:	d139      	bne.n	800e986 <PixelConfiguration::Validate(unsigned int&)+0xfe>
 800e912:	2300      	movs	r3, #0
 800e914:	2a06      	cmp	r2, #6
 800e916:	bf08      	it	eq
 800e918:	60a3      	streq	r3, [r4, #8]
 800e91a:	280d      	cmp	r0, #13
 800e91c:	7563      	strb	r3, [r4, #21]
 800e91e:	68e3      	ldr	r3, [r4, #12]
 800e920:	d119      	bne.n	800e956 <PixelConfiguration::Validate(unsigned int&)+0xce>
 800e922:	b913      	cbnz	r3, 800e92a <PixelConfiguration::Validate(unsigned int&)+0xa2>
 800e924:	4b1a      	ldr	r3, [pc, #104]	; (800e990 <PixelConfiguration::Validate(unsigned int&)+0x108>)
 800e926:	60e3      	str	r3, [r4, #12]
 800e928:	e003      	b.n	800e932 <PixelConfiguration::Validate(unsigned int&)+0xaa>
 800e92a:	4a1a      	ldr	r2, [pc, #104]	; (800e994 <PixelConfiguration::Validate(unsigned int&)+0x10c>)
 800e92c:	4293      	cmp	r3, r2
 800e92e:	d900      	bls.n	800e932 <PixelConfiguration::Validate(unsigned int&)+0xaa>
 800e930:	60e2      	str	r2, [r4, #12]
 800e932:	7d23      	ldrb	r3, [r4, #20]
 800e934:	b31b      	cbz	r3, 800e97e <PixelConfiguration::Validate(unsigned int&)+0xf6>
 800e936:	7ce3      	ldrb	r3, [r4, #19]
 800e938:	b9ab      	cbnz	r3, 800e966 <PixelConfiguration::Validate(unsigned int&)+0xde>
 800e93a:	6822      	ldr	r2, [r4, #0]
 800e93c:	b17a      	cbz	r2, 800e95e <PixelConfiguration::Validate(unsigned int&)+0xd6>
 800e93e:	f1a2 030b 	sub.w	r3, r2, #11
 800e942:	2b01      	cmp	r3, #1
 800e944:	d90d      	bls.n	800e962 <PixelConfiguration::Validate(unsigned int&)+0xda>
 800e946:	4b14      	ldr	r3, [pc, #80]	; (800e998 <PixelConfiguration::Validate(unsigned int&)+0x110>)
 800e948:	4914      	ldr	r1, [pc, #80]	; (800e99c <PixelConfiguration::Validate(unsigned int&)+0x114>)
 800e94a:	2a0d      	cmp	r2, #13
 800e94c:	bf08      	it	eq
 800e94e:	460b      	moveq	r3, r1
 800e950:	61a3      	str	r3, [r4, #24]
 800e952:	b002      	add	sp, #8
 800e954:	bd10      	pop	{r4, pc}
 800e956:	2b00      	cmp	r3, #0
 800e958:	d0e4      	beq.n	800e924 <PixelConfiguration::Validate(unsigned int&)+0x9c>
 800e95a:	4a11      	ldr	r2, [pc, #68]	; (800e9a0 <PixelConfiguration::Validate(unsigned int&)+0x118>)
 800e95c:	e7e6      	b.n	800e92c <PixelConfiguration::Validate(unsigned int&)+0xa4>
 800e95e:	4b11      	ldr	r3, [pc, #68]	; (800e9a4 <PixelConfiguration::Validate(unsigned int&)+0x11c>)
 800e960:	e7f6      	b.n	800e950 <PixelConfiguration::Validate(unsigned int&)+0xc8>
 800e962:	4b11      	ldr	r3, [pc, #68]	; (800e9a8 <PixelConfiguration::Validate(unsigned int&)+0x120>)
 800e964:	e7f4      	b.n	800e950 <PixelConfiguration::Validate(unsigned int&)+0xc8>
 800e966:	f1a3 0214 	sub.w	r2, r3, #20
 800e96a:	2a05      	cmp	r2, #5
 800e96c:	d807      	bhi.n	800e97e <PixelConfiguration::Validate(unsigned int&)+0xf6>
 800e96e:	3b15      	subs	r3, #21
 800e970:	2b04      	cmp	r3, #4
 800e972:	bf96      	itet	ls
 800e974:	4a0d      	ldrls	r2, [pc, #52]	; (800e9ac <PixelConfiguration::Validate(unsigned int&)+0x124>)
 800e976:	4b0e      	ldrhi	r3, [pc, #56]	; (800e9b0 <PixelConfiguration::Validate(unsigned int&)+0x128>)
 800e978:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
 800e97c:	e7e8      	b.n	800e950 <PixelConfiguration::Validate(unsigned int&)+0xc8>
 800e97e:	4b07      	ldr	r3, [pc, #28]	; (800e99c <PixelConfiguration::Validate(unsigned int&)+0x114>)
 800e980:	e7e6      	b.n	800e950 <PixelConfiguration::Validate(unsigned int&)+0xc8>
 800e982:	23ff      	movs	r3, #255	; 0xff
 800e984:	e7c1      	b.n	800e90a <PixelConfiguration::Validate(unsigned int&)+0x82>
 800e986:	280d      	cmp	r0, #13
 800e988:	d18d      	bne.n	800e8a6 <PixelConfiguration::Validate(unsigned int&)+0x1e>
 800e98a:	e7c2      	b.n	800e912 <PixelConfiguration::Validate(unsigned int&)+0x8a>
 800e98c:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 800e990:	003d0900 	eorseq	r0, sp, r0, lsl #18
 800e994:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 800e998:	08017188 	stmdaeq	r1, {r3, r7, r8, ip, sp, lr}
 800e99c:	08016e88 	stmdaeq	r1, {r3, r7, r9, sl, fp, sp, lr}
 800e9a0:	017d7840 	cmneq	sp, r0, asr #16
 800e9a4:	08017488 	stmdaeq	r1, {r3, r7, sl, ip, sp, lr}
 800e9a8:	08017588 	stmdaeq	r1, {r3, r7, r8, sl, ip, sp, lr}
 800e9ac:	08016e74 	stmdaeq	r1, {r2, r4, r5, r6, r9, sl, fp, sp, lr}
 800e9b0:	08016f88 	stmdaeq	r1, {r3, r7, r8, r9, sl, fp, sp, lr}

0800e9b4 <PixelConfiguration::Print()>:
 800e9b4:	b513      	push	{r0, r1, r4, lr}
 800e9b6:	4604      	mov	r4, r0
 800e9b8:	4825      	ldr	r0, [pc, #148]	; (800ea50 <PixelConfiguration::Print()+0x9c>)
 800e9ba:	f7fa faf1 	bl	8008fa0 <printf>
 800e9be:	6820      	ldr	r0, [r4, #0]
 800e9c0:	f000 f85c 	bl	800ea7c <PixelType::GetType(pixel::Type)>
 800e9c4:	6822      	ldr	r2, [r4, #0]
 800e9c6:	4601      	mov	r1, r0
 800e9c8:	4822      	ldr	r0, [pc, #136]	; (800ea54 <PixelConfiguration::Print()+0xa0>)
 800e9ca:	f7fa fae9 	bl	8008fa0 <printf>
 800e9ce:	6861      	ldr	r1, [r4, #4]
 800e9d0:	4821      	ldr	r0, [pc, #132]	; (800ea58 <PixelConfiguration::Print()+0xa4>)
 800e9d2:	f7fa fae5 	bl	8008fa0 <printf>
 800e9d6:	7d63      	ldrb	r3, [r4, #21]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d030      	beq.n	800ea3e <PixelConfiguration::Print()+0x8a>
 800e9dc:	68a0      	ldr	r0, [r4, #8]
 800e9de:	f000 f8a5 	bl	800eb2c <PixelType::GetMap(pixel::Map)>
 800e9e2:	68a2      	ldr	r2, [r4, #8]
 800e9e4:	4601      	mov	r1, r0
 800e9e6:	481d      	ldr	r0, [pc, #116]	; (800ea5c <PixelConfiguration::Print()+0xa8>)
 800e9e8:	f7fa fada 	bl	8008fa0 <printf>
 800e9ec:	7c20      	ldrb	r0, [r4, #16]
 800e9ee:	f000 f8b3 	bl	800eb58 <PixelType::ConvertTxH(unsigned char)>
 800e9f2:	f7f9 fa39 	bl	8007e68 <__aeabi_f2d>
 800e9f6:	460b      	mov	r3, r1
 800e9f8:	7c21      	ldrb	r1, [r4, #16]
 800e9fa:	4602      	mov	r2, r0
 800e9fc:	9100      	str	r1, [sp, #0]
 800e9fe:	4818      	ldr	r0, [pc, #96]	; (800ea60 <PixelConfiguration::Print()+0xac>)
 800ea00:	f7fa face 	bl	8008fa0 <printf>
 800ea04:	7c60      	ldrb	r0, [r4, #17]
 800ea06:	f000 f8a7 	bl	800eb58 <PixelType::ConvertTxH(unsigned char)>
 800ea0a:	f7f9 fa2d 	bl	8007e68 <__aeabi_f2d>
 800ea0e:	460b      	mov	r3, r1
 800ea10:	7c61      	ldrb	r1, [r4, #17]
 800ea12:	4602      	mov	r2, r0
 800ea14:	9100      	str	r1, [sp, #0]
 800ea16:	4813      	ldr	r0, [pc, #76]	; (800ea64 <PixelConfiguration::Print()+0xb0>)
 800ea18:	f7fa fac2 	bl	8008fa0 <printf>
 800ea1c:	7d21      	ldrb	r1, [r4, #20]
 800ea1e:	4a12      	ldr	r2, [pc, #72]	; (800ea68 <PixelConfiguration::Print()+0xb4>)
 800ea20:	4b12      	ldr	r3, [pc, #72]	; (800ea6c <PixelConfiguration::Print()+0xb8>)
 800ea22:	4813      	ldr	r0, [pc, #76]	; (800ea70 <PixelConfiguration::Print()+0xbc>)
 800ea24:	2900      	cmp	r1, #0
 800ea26:	bf14      	ite	ne
 800ea28:	4611      	movne	r1, r2
 800ea2a:	4619      	moveq	r1, r3
 800ea2c:	f7fa fab8 	bl	8008fa0 <printf>
 800ea30:	68e1      	ldr	r1, [r4, #12]
 800ea32:	4810      	ldr	r0, [pc, #64]	; (800ea74 <PixelConfiguration::Print()+0xc0>)
 800ea34:	b002      	add	sp, #8
 800ea36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea3a:	f7fa bab1 	b.w	8008fa0 <printf>
 800ea3e:	6823      	ldr	r3, [r4, #0]
 800ea40:	3b0b      	subs	r3, #11
 800ea42:	2b01      	cmp	r3, #1
 800ea44:	d8ea      	bhi.n	800ea1c <PixelConfiguration::Print()+0x68>
 800ea46:	7ca1      	ldrb	r1, [r4, #18]
 800ea48:	480b      	ldr	r0, [pc, #44]	; (800ea78 <PixelConfiguration::Print()+0xc4>)
 800ea4a:	f7fa faa9 	bl	8008fa0 <printf>
 800ea4e:	e7e5      	b.n	800ea1c <PixelConfiguration::Print()+0x68>
 800ea50:	08016dba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r8, sl, fp, sp, lr}
 800ea54:	08016dcf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, r8, sl, fp, sp, lr}
 800ea58:	08016de3 	stmdaeq	r1, {r0, r1, r5, r6, r7, r8, sl, fp, sp, lr}
 800ea5c:	08016df2 	stmdaeq	r1, {r1, r4, r5, r6, r7, r8, sl, fp, sp, lr}
 800ea60:	08016e06 	stmdaeq	r1, {r1, r2, r9, sl, fp, sp, lr}
 800ea64:	08016e1e 	stmdaeq	r1, {r1, r2, r3, r4, r9, sl, fp, sp, lr}
 800ea68:	08016db3 	stmdaeq	r1, {r0, r1, r4, r5, r7, r8, sl, fp, sp, lr}
 800ea6c:	08016db7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, r8, sl, fp, sp, lr}
 800ea70:	08016e4d 	stmdaeq	r1, {r0, r2, r3, r6, r9, sl, fp, sp, lr}
 800ea74:	08016e63 	stmdaeq	r1, {r0, r1, r5, r6, r9, sl, fp, sp, lr}
 800ea78:	08016e36 	stmdaeq	r1, {r1, r2, r4, r5, r9, sl, fp, sp, lr}

0800ea7c <PixelType::GetType(pixel::Type)>:
 800ea7c:	280d      	cmp	r0, #13
 800ea7e:	bfda      	itte	le
 800ea80:	4b02      	ldrle	r3, [pc, #8]	; (800ea8c <PixelType::GetType(pixel::Type)+0x10>)
 800ea82:	eb03 00c0 	addle.w	r0, r3, r0, lsl #3
 800ea86:	4802      	ldrgt	r0, [pc, #8]	; (800ea90 <PixelType::GetType(pixel::Type)+0x14>)
 800ea88:	4770      	bx	lr
 800ea8a:	bf00      	nop
 800ea8c:	080176bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r9, sl, ip, sp, lr}
 800ea90:	08017688 	stmdaeq	r1, {r3, r7, r9, sl, ip, sp, lr}

0800ea94 <PixelType::GetType(char const*)>:
 800ea94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea96:	4604      	mov	r4, r0
 800ea98:	2000      	movs	r0, #0
 800ea9a:	490f      	ldr	r1, [pc, #60]	; (800ead8 <PixelType::GetType(char const*)+0x44>)
 800ea9c:	1e67      	subs	r7, r4, #1
 800ea9e:	1e4e      	subs	r6, r1, #1
 800eaa0:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800eaa4:	4615      	mov	r5, r2
 800eaa6:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 800eaaa:	2b19      	cmp	r3, #25
 800eaac:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800eab0:	bf98      	it	ls
 800eab2:	f102 0520 	addls.w	r5, r2, #32
 800eab6:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 800eaba:	f1bc 0f19 	cmp.w	ip, #25
 800eabe:	bf98      	it	ls
 800eac0:	3320      	addls	r3, #32
 800eac2:	42ab      	cmp	r3, r5
 800eac4:	d005      	beq.n	800ead2 <PixelType::GetType(char const*)+0x3e>
 800eac6:	3001      	adds	r0, #1
 800eac8:	280e      	cmp	r0, #14
 800eaca:	f101 0108 	add.w	r1, r1, #8
 800eace:	d1e5      	bne.n	800ea9c <PixelType::GetType(char const*)+0x8>
 800ead0:	e001      	b.n	800ead6 <PixelType::GetType(char const*)+0x42>
 800ead2:	2a00      	cmp	r2, #0
 800ead4:	d1e4      	bne.n	800eaa0 <PixelType::GetType(char const*)+0xc>
 800ead6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ead8:	080176bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r9, sl, ip, sp, lr}

0800eadc <PixelType::GetMap(char const*)>:
 800eadc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eade:	4605      	mov	r5, r0
 800eae0:	2000      	movs	r0, #0
 800eae2:	4b11      	ldr	r3, [pc, #68]	; (800eb28 <PixelType::GetMap(char const*)+0x4c>)
 800eae4:	1e5c      	subs	r4, r3, #1
 800eae6:	1e6e      	subs	r6, r5, #1
 800eae8:	f103 0c02 	add.w	ip, r3, #2
 800eaec:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 800eaf0:	4617      	mov	r7, r2
 800eaf2:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 800eaf6:	2919      	cmp	r1, #25
 800eaf8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800eafc:	bf98      	it	ls
 800eafe:	f102 0720 	addls.w	r7, r2, #32
 800eb02:	f1a1 0e41 	sub.w	lr, r1, #65	; 0x41
 800eb06:	f1be 0f19 	cmp.w	lr, #25
 800eb0a:	bf98      	it	ls
 800eb0c:	3120      	addls	r1, #32
 800eb0e:	42b9      	cmp	r1, r7
 800eb10:	d005      	beq.n	800eb1e <PixelType::GetMap(char const*)+0x42>
 800eb12:	3001      	adds	r0, #1
 800eb14:	2806      	cmp	r0, #6
 800eb16:	f103 0304 	add.w	r3, r3, #4
 800eb1a:	d1e3      	bne.n	800eae4 <PixelType::GetMap(char const*)+0x8>
 800eb1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb1e:	2a00      	cmp	r2, #0
 800eb20:	d0fc      	beq.n	800eb1c <PixelType::GetMap(char const*)+0x40>
 800eb22:	4564      	cmp	r4, ip
 800eb24:	d1e2      	bne.n	800eaec <PixelType::GetMap(char const*)+0x10>
 800eb26:	e7f9      	b.n	800eb1c <PixelType::GetMap(char const*)+0x40>
 800eb28:	080176a4 	stmdaeq	r1, {r2, r5, r7, r9, sl, ip, sp, lr}

0800eb2c <PixelType::GetMap(pixel::Map)>:
 800eb2c:	2805      	cmp	r0, #5
 800eb2e:	bfda      	itte	le
 800eb30:	4b02      	ldrle	r3, [pc, #8]	; (800eb3c <PixelType::GetMap(pixel::Map)+0x10>)
 800eb32:	eb03 0080 	addle.w	r0, r3, r0, lsl #2
 800eb36:	4802      	ldrgt	r0, [pc, #8]	; (800eb40 <PixelType::GetMap(pixel::Map)+0x14>)
 800eb38:	4770      	bx	lr
 800eb3a:	bf00      	nop
 800eb3c:	080176a4 	stmdaeq	r1, {r2, r5, r7, r9, sl, ip, sp, lr}
 800eb40:	08017690 	stmdaeq	r1, {r4, r7, r9, sl, ip, sp, lr}

0800eb44 <PixelType::GetMap(pixel::Type)>:
 800eb44:	3801      	subs	r0, #1
 800eb46:	2809      	cmp	r0, #9
 800eb48:	bf9a      	itte	ls
 800eb4a:	4b02      	ldrls	r3, [pc, #8]	; (800eb54 <PixelType::GetMap(pixel::Type)+0x10>)
 800eb4c:	5618      	ldrsbls	r0, [r3, r0]
 800eb4e:	2002      	movhi	r0, #2
 800eb50:	4770      	bx	lr
 800eb52:	bf00      	nop
 800eb54:	0801769a 	stmdaeq	r1, {r1, r3, r4, r7, r9, sl, ip, sp, lr}

0800eb58 <PixelType::ConvertTxH(unsigned char)>:
 800eb58:	28f0      	cmp	r0, #240	; 0xf0
 800eb5a:	d010      	beq.n	800eb7e <PixelType::ConvertTxH(unsigned char)+0x26>
 800eb5c:	d807      	bhi.n	800eb6e <PixelType::ConvertTxH(unsigned char)+0x16>
 800eb5e:	28c0      	cmp	r0, #192	; 0xc0
 800eb60:	d00f      	beq.n	800eb82 <PixelType::ConvertTxH(unsigned char)+0x2a>
 800eb62:	28e0      	cmp	r0, #224	; 0xe0
 800eb64:	d00f      	beq.n	800eb86 <PixelType::ConvertTxH(unsigned char)+0x2e>
 800eb66:	2880      	cmp	r0, #128	; 0x80
 800eb68:	d113      	bne.n	800eb92 <PixelType::ConvertTxH(unsigned char)+0x3a>
 800eb6a:	480b      	ldr	r0, [pc, #44]	; (800eb98 <PixelType::ConvertTxH(unsigned char)+0x40>)
 800eb6c:	4770      	bx	lr
 800eb6e:	28fc      	cmp	r0, #252	; 0xfc
 800eb70:	d00b      	beq.n	800eb8a <PixelType::ConvertTxH(unsigned char)+0x32>
 800eb72:	28fe      	cmp	r0, #254	; 0xfe
 800eb74:	d00b      	beq.n	800eb8e <PixelType::ConvertTxH(unsigned char)+0x36>
 800eb76:	28f8      	cmp	r0, #248	; 0xf8
 800eb78:	d10b      	bne.n	800eb92 <PixelType::ConvertTxH(unsigned char)+0x3a>
 800eb7a:	4808      	ldr	r0, [pc, #32]	; (800eb9c <PixelType::ConvertTxH(unsigned char)+0x44>)
 800eb7c:	4770      	bx	lr
 800eb7e:	4808      	ldr	r0, [pc, #32]	; (800eba0 <PixelType::ConvertTxH(unsigned char)+0x48>)
 800eb80:	4770      	bx	lr
 800eb82:	4808      	ldr	r0, [pc, #32]	; (800eba4 <PixelType::ConvertTxH(unsigned char)+0x4c>)
 800eb84:	4770      	bx	lr
 800eb86:	4808      	ldr	r0, [pc, #32]	; (800eba8 <PixelType::ConvertTxH(unsigned char)+0x50>)
 800eb88:	4770      	bx	lr
 800eb8a:	4808      	ldr	r0, [pc, #32]	; (800ebac <PixelType::ConvertTxH(unsigned char)+0x54>)
 800eb8c:	4770      	bx	lr
 800eb8e:	4808      	ldr	r0, [pc, #32]	; (800ebb0 <PixelType::ConvertTxH(unsigned char)+0x58>)
 800eb90:	4770      	bx	lr
 800eb92:	2000      	movs	r0, #0
 800eb94:	4770      	bx	lr
 800eb96:	bf00      	nop
 800eb98:	3e200000 	cdpcc	0, 2, cr0, cr0, cr0, {0}
 800eb9c:	3f480000 	svccc	0x00480000
 800eba0:	3f200000 	svccc	0x00200000
 800eba4:	3ea00000 	cdpcc	0, 10, cr0, cr0, cr0, {0}
 800eba8:	3ef00000 	cdpcc	0, 15, cr0, cr0, cr0, {0}
 800ebac:	3f700000 	svccc	0x00700000
 800ebb0:	3f8c0000 	svccc	0x008c0000

0800ebb4 <PixelType::ConvertTxH(float)>:
 800ebb4:	b510      	push	{r4, lr}
 800ebb6:	491d      	ldr	r1, [pc, #116]	; (800ec2c <PixelType::ConvertTxH(float)+0x78>)
 800ebb8:	4604      	mov	r4, r0
 800ebba:	f7f8 ff89 	bl	8007ad0 <__aeabi_fcmplt>
 800ebbe:	bb30      	cbnz	r0, 800ec0e <PixelType::ConvertTxH(float)+0x5a>
 800ebc0:	4620      	mov	r0, r4
 800ebc2:	491b      	ldr	r1, [pc, #108]	; (800ec30 <PixelType::ConvertTxH(float)+0x7c>)
 800ebc4:	f7f8 ff84 	bl	8007ad0 <__aeabi_fcmplt>
 800ebc8:	bb18      	cbnz	r0, 800ec12 <PixelType::ConvertTxH(float)+0x5e>
 800ebca:	4620      	mov	r0, r4
 800ebcc:	4919      	ldr	r1, [pc, #100]	; (800ec34 <PixelType::ConvertTxH(float)+0x80>)
 800ebce:	f7f8 ff7f 	bl	8007ad0 <__aeabi_fcmplt>
 800ebd2:	bb00      	cbnz	r0, 800ec16 <PixelType::ConvertTxH(float)+0x62>
 800ebd4:	4620      	mov	r0, r4
 800ebd6:	4918      	ldr	r1, [pc, #96]	; (800ec38 <PixelType::ConvertTxH(float)+0x84>)
 800ebd8:	f7f8 ff7a 	bl	8007ad0 <__aeabi_fcmplt>
 800ebdc:	b9e8      	cbnz	r0, 800ec1a <PixelType::ConvertTxH(float)+0x66>
 800ebde:	4620      	mov	r0, r4
 800ebe0:	4916      	ldr	r1, [pc, #88]	; (800ec3c <PixelType::ConvertTxH(float)+0x88>)
 800ebe2:	f7f8 ff75 	bl	8007ad0 <__aeabi_fcmplt>
 800ebe6:	b9d0      	cbnz	r0, 800ec1e <PixelType::ConvertTxH(float)+0x6a>
 800ebe8:	4620      	mov	r0, r4
 800ebea:	4915      	ldr	r1, [pc, #84]	; (800ec40 <PixelType::ConvertTxH(float)+0x8c>)
 800ebec:	f7f8 ff70 	bl	8007ad0 <__aeabi_fcmplt>
 800ebf0:	b9b8      	cbnz	r0, 800ec22 <PixelType::ConvertTxH(float)+0x6e>
 800ebf2:	4620      	mov	r0, r4
 800ebf4:	4913      	ldr	r1, [pc, #76]	; (800ec44 <PixelType::ConvertTxH(float)+0x90>)
 800ebf6:	f7f8 ff6b 	bl	8007ad0 <__aeabi_fcmplt>
 800ebfa:	b9a0      	cbnz	r0, 800ec26 <PixelType::ConvertTxH(float)+0x72>
 800ebfc:	4620      	mov	r0, r4
 800ebfe:	4912      	ldr	r1, [pc, #72]	; (800ec48 <PixelType::ConvertTxH(float)+0x94>)
 800ec00:	f7f8 ff66 	bl	8007ad0 <__aeabi_fcmplt>
 800ec04:	2800      	cmp	r0, #0
 800ec06:	bf14      	ite	ne
 800ec08:	20fe      	movne	r0, #254	; 0xfe
 800ec0a:	2000      	moveq	r0, #0
 800ec0c:	bd10      	pop	{r4, pc}
 800ec0e:	2000      	movs	r0, #0
 800ec10:	e7fc      	b.n	800ec0c <PixelType::ConvertTxH(float)+0x58>
 800ec12:	2080      	movs	r0, #128	; 0x80
 800ec14:	e7fa      	b.n	800ec0c <PixelType::ConvertTxH(float)+0x58>
 800ec16:	20c0      	movs	r0, #192	; 0xc0
 800ec18:	e7f8      	b.n	800ec0c <PixelType::ConvertTxH(float)+0x58>
 800ec1a:	20e0      	movs	r0, #224	; 0xe0
 800ec1c:	e7f6      	b.n	800ec0c <PixelType::ConvertTxH(float)+0x58>
 800ec1e:	20f0      	movs	r0, #240	; 0xf0
 800ec20:	e7f4      	b.n	800ec0c <PixelType::ConvertTxH(float)+0x58>
 800ec22:	20f8      	movs	r0, #248	; 0xf8
 800ec24:	e7f2      	b.n	800ec0c <PixelType::ConvertTxH(float)+0x58>
 800ec26:	20fc      	movs	r0, #252	; 0xfc
 800ec28:	e7f0      	b.n	800ec0c <PixelType::ConvertTxH(float)+0x58>
 800ec2a:	bf00      	nop
 800ec2c:	3da00000 	stccc	0, cr0, [r0]
 800ec30:	3e700000 	cdpcc	0, 7, cr0, cr0, cr0, {0}
 800ec34:	3ec80000 	cdpcc	0, 12, cr0, cr8, cr0, {0}
 800ec38:	3f0c0000 	svccc	0x000c0000
 800ec3c:	3f340000 	svccc	0x00340000
 800ec40:	3f5c0000 	svccc	0x005c0000
 800ec44:	3f820000 	svccc	0x00820000
 800ec48:	3f960000 	svccc	0x00960000

0800ec4c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>:
 800ec4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec4e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800ec52:	f3c1 4207 	ubfx	r2, r1, #16, #8
 800ec56:	b2cc      	uxtb	r4, r1
 800ec58:	490e      	ldr	r1, [pc, #56]	; (800ec94 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x48>)
 800ec5a:	4605      	mov	r5, r0
 800ec5c:	6808      	ldr	r0, [r1, #0]
 800ec5e:	6801      	ldr	r1, [r0, #0]
 800ec60:	2907      	cmp	r1, #7
 800ec62:	d005      	beq.n	800ec70 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x24>
 800ec64:	4629      	mov	r1, r5
 800ec66:	9400      	str	r4, [sp, #0]
 800ec68:	f000 fa88 	bl	800f17c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 800ec6c:	b003      	add	sp, #12
 800ec6e:	bd30      	pop	{r4, r5, pc}
 800ec70:	429a      	cmp	r2, r3
 800ec72:	f04f 0100 	mov.w	r1, #0
 800ec76:	d109      	bne.n	800ec8c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x40>
 800ec78:	42a2      	cmp	r2, r4
 800ec7a:	d107      	bne.n	800ec8c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x40>
 800ec7c:	e9cd 1200 	strd	r1, r2, [sp]
 800ec80:	460b      	mov	r3, r1
 800ec82:	460a      	mov	r2, r1
 800ec84:	4629      	mov	r1, r5
 800ec86:	f000 feab 	bl	800f9e0 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 800ec8a:	e7ef      	b.n	800ec6c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x20>
 800ec8c:	e9cd 4100 	strd	r4, r1, [sp]
 800ec90:	e7f8      	b.n	800ec84 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x38>
 800ec92:	bf00      	nop
 800ec94:	20001914 	andcs	r1, r0, r4, lsl r9

0800ec98 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>:
 800ec98:	b538      	push	{r3, r4, r5, lr}
 800ec9a:	2400      	movs	r4, #0
 800ec9c:	4d05      	ldr	r5, [pc, #20]	; (800ecb4 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x1c>)
 800ec9e:	682b      	ldr	r3, [r5, #0]
 800eca0:	429c      	cmp	r4, r3
 800eca2:	d300      	bcc.n	800eca6 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0xe>
 800eca4:	bd38      	pop	{r3, r4, r5, pc}
 800eca6:	4620      	mov	r0, r4
 800eca8:	2100      	movs	r1, #0
 800ecaa:	f7ff ffcf 	bl	800ec4c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 800ecae:	3401      	adds	r4, #1
 800ecb0:	e7f5      	b.n	800ec9e <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x6>
 800ecb2:	bf00      	nop
 800ecb4:	20001910 	andcs	r1, r0, r0, lsl r9

0800ecb8 <PixelPatterns::PixelPatterns(unsigned int)>:
 800ecb8:	2901      	cmp	r1, #1
 800ecba:	bf28      	it	cs
 800ecbc:	2101      	movcs	r1, #1
 800ecbe:	4b08      	ldr	r3, [pc, #32]	; (800ece0 <PixelPatterns::PixelPatterns(unsigned int)+0x28>)
 800ecc0:	4a08      	ldr	r2, [pc, #32]	; (800ece4 <PixelPatterns::PixelPatterns(unsigned int)+0x2c>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	6013      	str	r3, [r2, #0]
 800ecc6:	4a08      	ldr	r2, [pc, #32]	; (800ece8 <PixelPatterns::PixelPatterns(unsigned int)+0x30>)
 800ecc8:	6011      	str	r1, [r2, #0]
 800ecca:	685a      	ldr	r2, [r3, #4]
 800eccc:	4b07      	ldr	r3, [pc, #28]	; (800ecec <PixelPatterns::PixelPatterns(unsigned int)+0x34>)
 800ecce:	601a      	str	r2, [r3, #0]
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	4b07      	ldr	r3, [pc, #28]	; (800ecf0 <PixelPatterns::PixelPatterns(unsigned int)+0x38>)
 800ecd4:	6819      	ldr	r1, [r3, #0]
 800ecd6:	4b07      	ldr	r3, [pc, #28]	; (800ecf4 <PixelPatterns::PixelPatterns(unsigned int)+0x3c>)
 800ecd8:	61da      	str	r2, [r3, #28]
 800ecda:	6019      	str	r1, [r3, #0]
 800ecdc:	619a      	str	r2, [r3, #24]
 800ecde:	4770      	bx	lr
 800ece0:	20001924 	andcs	r1, r0, r4, lsr #18
 800ece4:	20001914 	andcs	r1, r0, r4, lsl r9
 800ece8:	20001908 	andcs	r1, r0, r8, lsl #18
 800ecec:	20001910 	andcs	r1, r0, r0, lsl r9
 800ecf0:	20009d6c 	andcs	r9, r0, ip, ror #26
 800ecf4:	200018e8 	andcs	r1, r0, r8, ror #17

0800ecf8 <PixelPatterns::GetName(pixelpatterns::Pattern)>:
 800ecf8:	2805      	cmp	r0, #5
 800ecfa:	bfdd      	ittte	le
 800ecfc:	220e      	movle	r2, #14
 800ecfe:	4b02      	ldrle	r3, [pc, #8]	; (800ed08 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x10>)
 800ed00:	fb02 3000 	mlale	r0, r2, r0, r3
 800ed04:	4801      	ldrgt	r0, [pc, #4]	; (800ed0c <PixelPatterns::GetName(pixelpatterns::Pattern)+0x14>)
 800ed06:	4770      	bx	lr
 800ed08:	0801772c 	stmdaeq	r1, {r2, r3, r5, r8, r9, sl, ip, sp, lr}
 800ed0c:	08017688 	stmdaeq	r1, {r3, r7, r9, sl, ip, sp, lr}

0800ed10 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>:
 800ed10:	b570      	push	{r4, r5, r6, lr}
 800ed12:	460e      	mov	r6, r1
 800ed14:	4615      	mov	r5, r2
 800ed16:	461c      	mov	r4, r3
 800ed18:	f7ff ffbe 	bl	800ec98 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800ed1c:	2301      	movs	r3, #1
 800ed1e:	4905      	ldr	r1, [pc, #20]	; (800ed34 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)+0x24>)
 800ed20:	22ff      	movs	r2, #255	; 0xff
 800ed22:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800ed26:	61cb      	str	r3, [r1, #28]
 800ed28:	2300      	movs	r3, #0
 800ed2a:	604d      	str	r5, [r1, #4]
 800ed2c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800ed30:	618c      	str	r4, [r1, #24]
 800ed32:	bd70      	pop	{r4, r5, r6, pc}
 800ed34:	200018e8 	andcs	r1, r0, r8, ror #17

0800ed38 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 800ed38:	b570      	push	{r4, r5, r6, lr}
 800ed3a:	460e      	mov	r6, r1
 800ed3c:	461c      	mov	r4, r3
 800ed3e:	4615      	mov	r5, r2
 800ed40:	f7ff ffaa 	bl	800ec98 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800ed44:	2302      	movs	r3, #2
 800ed46:	4908      	ldr	r1, [pc, #32]	; (800ed68 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 800ed48:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800ed4c:	61cb      	str	r3, [r1, #28]
 800ed4e:	9b04      	ldr	r3, [sp, #16]
 800ed50:	e9c1 5402 	strd	r5, r4, [r1, #8]
 800ed54:	604b      	str	r3, [r1, #4]
 800ed56:	4b05      	ldr	r3, [pc, #20]	; (800ed6c <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x34>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	610b      	str	r3, [r1, #16]
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	614b      	str	r3, [r1, #20]
 800ed60:	9b05      	ldr	r3, [sp, #20]
 800ed62:	618b      	str	r3, [r1, #24]
 800ed64:	bd70      	pop	{r4, r5, r6, pc}
 800ed66:	bf00      	nop
 800ed68:	200018e8 	andcs	r1, r0, r8, ror #17
 800ed6c:	20001910 	andcs	r1, r0, r0, lsl r9

0800ed70 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 800ed70:	b570      	push	{r4, r5, r6, lr}
 800ed72:	460e      	mov	r6, r1
 800ed74:	461d      	mov	r5, r3
 800ed76:	4614      	mov	r4, r2
 800ed78:	f7ff ff8e 	bl	800ec98 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800ed7c:	2303      	movs	r3, #3
 800ed7e:	4907      	ldr	r1, [pc, #28]	; (800ed9c <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 800ed80:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800ed84:	61cb      	str	r3, [r1, #28]
 800ed86:	4b06      	ldr	r3, [pc, #24]	; (800eda0 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 800ed88:	604d      	str	r5, [r1, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	608c      	str	r4, [r1, #8]
 800ed8e:	610b      	str	r3, [r1, #16]
 800ed90:	2300      	movs	r3, #0
 800ed92:	614b      	str	r3, [r1, #20]
 800ed94:	9b04      	ldr	r3, [sp, #16]
 800ed96:	618b      	str	r3, [r1, #24]
 800ed98:	bd70      	pop	{r4, r5, r6, pc}
 800ed9a:	bf00      	nop
 800ed9c:	200018e8 	andcs	r1, r0, r8, ror #17
 800eda0:	20001910 	andcs	r1, r0, r0, lsl r9

0800eda4 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>:
 800eda4:	b570      	push	{r4, r5, r6, lr}
 800eda6:	460e      	mov	r6, r1
 800eda8:	461d      	mov	r5, r3
 800edaa:	4614      	mov	r4, r2
 800edac:	f7ff ff74 	bl	800ec98 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800edb0:	2304      	movs	r3, #4
 800edb2:	4912      	ldr	r1, [pc, #72]	; (800edfc <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x58>)
 800edb4:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800edb8:	604d      	str	r5, [r1, #4]
 800edba:	4d11      	ldr	r5, [pc, #68]	; (800ee00 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x5c>)
 800edbc:	61cb      	str	r3, [r1, #28]
 800edbe:	6828      	ldr	r0, [r5, #0]
 800edc0:	608c      	str	r4, [r1, #8]
 800edc2:	1e43      	subs	r3, r0, #1
 800edc4:	005b      	lsls	r3, r3, #1
 800edc6:	b29b      	uxth	r3, r3
 800edc8:	610b      	str	r3, [r1, #16]
 800edca:	2300      	movs	r3, #0
 800edcc:	4c0d      	ldr	r4, [pc, #52]	; (800ee04 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x60>)
 800edce:	614b      	str	r3, [r1, #20]
 800edd0:	6823      	ldr	r3, [r4, #0]
 800edd2:	b97b      	cbnz	r3, 800edf4 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x50>
 800edd4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800edd8:	4298      	cmp	r0, r3
 800edda:	bf2c      	ite	cs
 800eddc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 800ede0:	0080      	lslcc	r0, r0, #2
 800ede2:	f005 f8bd 	bl	8013f60 <operator new[](unsigned int)>
 800ede6:	2200      	movs	r2, #0
 800ede8:	682b      	ldr	r3, [r5, #0]
 800edea:	6020      	str	r0, [r4, #0]
 800edec:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800edf0:	4298      	cmp	r0, r3
 800edf2:	d100      	bne.n	800edf6 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x52>
 800edf4:	bd70      	pop	{r4, r5, r6, pc}
 800edf6:	f840 2b04 	str.w	r2, [r0], #4
 800edfa:	e7f9      	b.n	800edf0 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x4c>
 800edfc:	200018e8 	andcs	r1, r0, r8, ror #17
 800ee00:	20001910 	andcs	r1, r0, r0, lsl r9
 800ee04:	2000190c 	andcs	r1, r0, ip, lsl #18

0800ee08 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 800ee08:	b570      	push	{r4, r5, r6, lr}
 800ee0a:	460e      	mov	r6, r1
 800ee0c:	461c      	mov	r4, r3
 800ee0e:	4615      	mov	r5, r2
 800ee10:	f7ff ff42 	bl	800ec98 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800ee14:	2305      	movs	r3, #5
 800ee16:	4907      	ldr	r1, [pc, #28]	; (800ee34 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 800ee18:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800ee1c:	61cb      	str	r3, [r1, #28]
 800ee1e:	9b05      	ldr	r3, [sp, #20]
 800ee20:	e9c1 5402 	strd	r5, r4, [r1, #8]
 800ee24:	604b      	str	r3, [r1, #4]
 800ee26:	9b04      	ldr	r3, [sp, #16]
 800ee28:	610b      	str	r3, [r1, #16]
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	614b      	str	r3, [r1, #20]
 800ee2e:	9b06      	ldr	r3, [sp, #24]
 800ee30:	618b      	str	r3, [r1, #24]
 800ee32:	bd70      	pop	{r4, r5, r6, pc}
 800ee34:	200018e8 	andcs	r1, r0, r8, ror #17

0800ee38 <PixelPatterns::Wheel(unsigned char)>:
 800ee38:	43cb      	mvns	r3, r1
 800ee3a:	b2db      	uxtb	r3, r3
 800ee3c:	2b54      	cmp	r3, #84	; 0x54
 800ee3e:	d809      	bhi.n	800ee54 <PixelPatterns::Wheel(unsigned char)+0x1c>
 800ee40:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 800ee44:	b2db      	uxtb	r3, r3
 800ee46:	1e5a      	subs	r2, r3, #1
 800ee48:	4258      	negs	r0, r3
 800ee4a:	b2d2      	uxtb	r2, r2
 800ee4c:	b2c0      	uxtb	r0, r0
 800ee4e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800ee52:	4770      	bx	lr
 800ee54:	2ba9      	cmp	r3, #169	; 0xa9
 800ee56:	d809      	bhi.n	800ee6c <PixelPatterns::Wheel(unsigned char)+0x34>
 800ee58:	f1c1 01aa 	rsb	r1, r1, #170	; 0xaa
 800ee5c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ee60:	b2c9      	uxtb	r1, r1
 800ee62:	43c8      	mvns	r0, r1
 800ee64:	b2c0      	uxtb	r0, r0
 800ee66:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 800ee6a:	4770      	bx	lr
 800ee6c:	f1c1 0155 	rsb	r1, r1, #85	; 0x55
 800ee70:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ee74:	b2c9      	uxtb	r1, r1
 800ee76:	0208      	lsls	r0, r1, #8
 800ee78:	f480 407f 	eor.w	r0, r0, #65280	; 0xff00
 800ee7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800ee80:	4770      	bx	lr
	...

0800ee84 <PixelPatterns::Increment(unsigned int)>:
 800ee84:	4a0d      	ldr	r2, [pc, #52]	; (800eebc <PixelPatterns::Increment(unsigned int)+0x38>)
 800ee86:	b510      	push	{r4, lr}
 800ee88:	014c      	lsls	r4, r1, #5
 800ee8a:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 800ee8e:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
 800ee92:	b930      	cbnz	r0, 800eea2 <PixelPatterns::Increment(unsigned int)+0x1e>
 800ee94:	690a      	ldr	r2, [r1, #16]
 800ee96:	3301      	adds	r3, #1
 800ee98:	4293      	cmp	r3, r2
 800ee9a:	bf18      	it	ne
 800ee9c:	4618      	movne	r0, r3
 800ee9e:	6148      	str	r0, [r1, #20]
 800eea0:	bd10      	pop	{r4, pc}
 800eea2:	b92b      	cbnz	r3, 800eeb0 <PixelPatterns::Increment(unsigned int)+0x2c>
 800eea4:	4422      	add	r2, r4
 800eea6:	6913      	ldr	r3, [r2, #16]
 800eea8:	3b01      	subs	r3, #1
 800eeaa:	b29b      	uxth	r3, r3
 800eeac:	6153      	str	r3, [r2, #20]
 800eeae:	e7f7      	b.n	800eea0 <PixelPatterns::Increment(unsigned int)+0x1c>
 800eeb0:	3b01      	subs	r3, #1
 800eeb2:	614b      	str	r3, [r1, #20]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d1f3      	bne.n	800eea0 <PixelPatterns::Increment(unsigned int)+0x1c>
 800eeb8:	e7f4      	b.n	800eea4 <PixelPatterns::Increment(unsigned int)+0x20>
 800eeba:	bf00      	nop
 800eebc:	200018e8 	andcs	r1, r0, r8, ror #17

0800eec0 <PixelPatterns::RainbowCycleUpdate(unsigned int)>:
 800eec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eec4:	4604      	mov	r4, r0
 800eec6:	460d      	mov	r5, r1
 800eec8:	2700      	movs	r7, #0
 800eeca:	4b10      	ldr	r3, [pc, #64]	; (800ef0c <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x4c>)
 800eecc:	f8df 8040 	ldr.w	r8, [pc, #64]	; 800ef10 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x50>
 800eed0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800eed4:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800eed8:	f8d8 2000 	ldr.w	r2, [r8]
 800eedc:	b2be      	uxth	r6, r7
 800eede:	42b2      	cmp	r2, r6
 800eee0:	f107 0701 	add.w	r7, r7, #1
 800eee4:	d805      	bhi.n	800eef2 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x32>
 800eee6:	4629      	mov	r1, r5
 800eee8:	4620      	mov	r0, r4
 800eeea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eeee:	f7ff bfc9 	b.w	800ee84 <PixelPatterns::Increment(unsigned int)>
 800eef2:	0233      	lsls	r3, r6, #8
 800eef4:	fbb3 f3f2 	udiv	r3, r3, r2
 800eef8:	444b      	add	r3, r9
 800eefa:	b2d9      	uxtb	r1, r3
 800eefc:	4620      	mov	r0, r4
 800eefe:	f7ff ff9b 	bl	800ee38 <PixelPatterns::Wheel(unsigned char)>
 800ef02:	4601      	mov	r1, r0
 800ef04:	4630      	mov	r0, r6
 800ef06:	f7ff fea1 	bl	800ec4c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 800ef0a:	e7e5      	b.n	800eed8 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x18>
 800ef0c:	200018e8 	andcs	r1, r0, r8, ror #17
 800ef10:	20001910 	andcs	r1, r0, r0, lsl r9

0800ef14 <PixelPatterns::TheaterChaseUpdate(unsigned int)>:
 800ef14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef18:	4605      	mov	r5, r0
 800ef1a:	460c      	mov	r4, r1
 800ef1c:	f04f 0b00 	mov.w	fp, #0
 800ef20:	4b11      	ldr	r3, [pc, #68]	; (800ef68 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x54>)
 800ef22:	4e12      	ldr	r6, [pc, #72]	; (800ef6c <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x58>)
 800ef24:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ef28:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800ef2c:	f8df a040 	ldr.w	sl, [pc, #64]	; 800ef70 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x5c>
 800ef30:	e9d3 7802 	ldrd	r7, r8, [r3, #8]
 800ef34:	6833      	ldr	r3, [r6, #0]
 800ef36:	fa1f f08b 	uxth.w	r0, fp
 800ef3a:	4283      	cmp	r3, r0
 800ef3c:	d805      	bhi.n	800ef4a <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x36>
 800ef3e:	4621      	mov	r1, r4
 800ef40:	4628      	mov	r0, r5
 800ef42:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef46:	f7ff bf9d 	b.w	800ee84 <PixelPatterns::Increment(unsigned int)>
 800ef4a:	eb09 0300 	add.w	r3, r9, r0
 800ef4e:	fb0a f303 	mul.w	r3, sl, r3
 800ef52:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 800ef56:	bf94      	ite	ls
 800ef58:	4639      	movls	r1, r7
 800ef5a:	4641      	movhi	r1, r8
 800ef5c:	f7ff fe76 	bl	800ec4c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 800ef60:	f10b 0b01 	add.w	fp, fp, #1
 800ef64:	e7e6      	b.n	800ef34 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x20>
 800ef66:	bf00      	nop
 800ef68:	200018e8 	andcs	r1, r0, r8, ror #17
 800ef6c:	20001910 	andcs	r1, r0, r0, lsl r9
 800ef70:	aaaaaaab 	bge	6ab9a24 <__stack_size+0x6ab7a24>

0800ef74 <PixelPatterns::ColourWipeUpdate(unsigned int)>:
 800ef74:	b538      	push	{r3, r4, r5, lr}
 800ef76:	4605      	mov	r5, r0
 800ef78:	460c      	mov	r4, r1
 800ef7a:	4b06      	ldr	r3, [pc, #24]	; (800ef94 <PixelPatterns::ColourWipeUpdate(unsigned int)+0x20>)
 800ef7c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ef80:	6899      	ldr	r1, [r3, #8]
 800ef82:	6958      	ldr	r0, [r3, #20]
 800ef84:	f7ff fe62 	bl	800ec4c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 800ef88:	4621      	mov	r1, r4
 800ef8a:	4628      	mov	r0, r5
 800ef8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef90:	f7ff bf78 	b.w	800ee84 <PixelPatterns::Increment(unsigned int)>
 800ef94:	200018e8 	andcs	r1, r0, r8, ror #17

0800ef98 <PixelPatterns::ScannerUpdate(unsigned int)>:
 800ef98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef9c:	460d      	mov	r5, r1
 800ef9e:	f04f 0900 	mov.w	r9, #0
 800efa2:	4a27      	ldr	r2, [pc, #156]	; (800f040 <PixelPatterns::ScannerUpdate(unsigned int)+0xa8>)
 800efa4:	b085      	sub	sp, #20
 800efa6:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 800efaa:	e9d2 7604 	ldrd	r7, r6, [r2, #16]
 800efae:	f8d2 b008 	ldr.w	fp, [r2, #8]
 800efb2:	00b3      	lsls	r3, r6, #2
 800efb4:	f8df a08c 	ldr.w	sl, [pc, #140]	; 800f044 <PixelPatterns::ScannerUpdate(unsigned int)+0xac>
 800efb8:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800f048 <PixelPatterns::ScannerUpdate(unsigned int)+0xb0>
 800efbc:	9002      	str	r0, [sp, #8]
 800efbe:	9301      	str	r3, [sp, #4]
 800efc0:	1bbf      	subs	r7, r7, r6
 800efc2:	f8da 1000 	ldr.w	r1, [sl]
 800efc6:	fa1f f489 	uxth.w	r4, r9
 800efca:	42a1      	cmp	r1, r4
 800efcc:	d806      	bhi.n	800efdc <PixelPatterns::ScannerUpdate(unsigned int)+0x44>
 800efce:	4629      	mov	r1, r5
 800efd0:	9802      	ldr	r0, [sp, #8]
 800efd2:	b005      	add	sp, #20
 800efd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efd8:	f7ff bf54 	b.w	800ee84 <PixelPatterns::Increment(unsigned int)>
 800efdc:	42a6      	cmp	r6, r4
 800efde:	d10b      	bne.n	800eff8 <PixelPatterns::ScannerUpdate(unsigned int)+0x60>
 800efe0:	4659      	mov	r1, fp
 800efe2:	4630      	mov	r0, r6
 800efe4:	f7ff fe32 	bl	800ec4c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 800efe8:	f8d8 1000 	ldr.w	r1, [r8]
 800efec:	9b01      	ldr	r3, [sp, #4]
 800efee:	f841 b003 	str.w	fp, [r1, r3]
 800eff2:	f109 0901 	add.w	r9, r9, #1
 800eff6:	e7e4      	b.n	800efc2 <PixelPatterns::ScannerUpdate(unsigned int)+0x2a>
 800eff8:	42a7      	cmp	r7, r4
 800effa:	d108      	bne.n	800f00e <PixelPatterns::ScannerUpdate(unsigned int)+0x76>
 800effc:	4659      	mov	r1, fp
 800effe:	4638      	mov	r0, r7
 800f000:	f7ff fe24 	bl	800ec4c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 800f004:	f8d8 1000 	ldr.w	r1, [r8]
 800f008:	f841 b024 	str.w	fp, [r1, r4, lsl #2]
 800f00c:	e7f1      	b.n	800eff2 <PixelPatterns::ScannerUpdate(unsigned int)+0x5a>
 800f00e:	f8d8 1000 	ldr.w	r1, [r8]
 800f012:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 800f016:	f3c0 2146 	ubfx	r1, r0, #9, #7
 800f01a:	f3c0 4c46 	ubfx	ip, r0, #17, #7
 800f01e:	0209      	lsls	r1, r1, #8
 800f020:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800f024:	f3c0 0046 	ubfx	r0, r0, #1, #7
 800f028:	4301      	orrs	r1, r0
 800f02a:	4620      	mov	r0, r4
 800f02c:	9103      	str	r1, [sp, #12]
 800f02e:	f7ff fe0d 	bl	800ec4c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 800f032:	f8d8 0000 	ldr.w	r0, [r8]
 800f036:	9903      	ldr	r1, [sp, #12]
 800f038:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 800f03c:	e7d9      	b.n	800eff2 <PixelPatterns::ScannerUpdate(unsigned int)+0x5a>
 800f03e:	bf00      	nop
 800f040:	200018e8 	andcs	r1, r0, r8, ror #17
 800f044:	20001910 	andcs	r1, r0, r0, lsl r9
 800f048:	2000190c 	andcs	r1, r0, ip, lsl #18

0800f04c <PixelPatterns::FadeUpdate(unsigned int)>:
 800f04c:	4a21      	ldr	r2, [pc, #132]	; (800f0d4 <PixelPatterns::FadeUpdate(unsigned int)+0x88>)
 800f04e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f052:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 800f056:	4605      	mov	r5, r0
 800f058:	e9d2 0704 	ldrd	r0, r7, [r2, #16]
 800f05c:	460c      	mov	r4, r1
 800f05e:	e9d2 1302 	ldrd	r1, r3, [r2, #8]
 800f062:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800f066:	437a      	muls	r2, r7
 800f068:	1bc6      	subs	r6, r0, r7
 800f06a:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 800f06e:	fb06 220c 	mla	r2, r6, ip, r2
 800f072:	fbb2 f2f0 	udiv	r2, r2, r0
 800f076:	0212      	lsls	r2, r2, #8
 800f078:	fa1f fc82 	uxth.w	ip, r2
 800f07c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800f080:	437a      	muls	r2, r7
 800f082:	b2db      	uxtb	r3, r3
 800f084:	437b      	muls	r3, r7
 800f086:	f3c1 4e07 	ubfx	lr, r1, #16, #8
 800f08a:	fb06 220e 	mla	r2, r6, lr, r2
 800f08e:	b2c9      	uxtb	r1, r1
 800f090:	fb06 3301 	mla	r3, r6, r1, r3
 800f094:	fbb2 f2f0 	udiv	r2, r2, r0
 800f098:	fbb3 f3f0 	udiv	r3, r3, r0
 800f09c:	2700      	movs	r7, #0
 800f09e:	0412      	lsls	r2, r2, #16
 800f0a0:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800f0a4:	ea4c 0202 	orr.w	r2, ip, r2
 800f0a8:	b2db      	uxtb	r3, r3
 800f0aa:	f8df 802c 	ldr.w	r8, [pc, #44]	; 800f0d8 <PixelPatterns::FadeUpdate(unsigned int)+0x8c>
 800f0ae:	ea42 0603 	orr.w	r6, r2, r3
 800f0b2:	f8d8 3000 	ldr.w	r3, [r8]
 800f0b6:	429f      	cmp	r7, r3
 800f0b8:	d305      	bcc.n	800f0c6 <PixelPatterns::FadeUpdate(unsigned int)+0x7a>
 800f0ba:	4621      	mov	r1, r4
 800f0bc:	4628      	mov	r0, r5
 800f0be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0c2:	f7ff bedf 	b.w	800ee84 <PixelPatterns::Increment(unsigned int)>
 800f0c6:	4638      	mov	r0, r7
 800f0c8:	4631      	mov	r1, r6
 800f0ca:	f7ff fdbf 	bl	800ec4c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 800f0ce:	3701      	adds	r7, #1
 800f0d0:	e7ef      	b.n	800f0b2 <PixelPatterns::FadeUpdate(unsigned int)+0x66>
 800f0d2:	bf00      	nop
 800f0d4:	200018e8 	andcs	r1, r0, r8, ror #17
 800f0d8:	20001910 	andcs	r1, r0, r0, lsl r9

0800f0dc <PixelPatterns::PortUpdate(unsigned int, unsigned int)>:
 800f0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0de:	4b12      	ldr	r3, [pc, #72]	; (800f128 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x4c>)
 800f0e0:	014e      	lsls	r6, r1, #5
 800f0e2:	599c      	ldr	r4, [r3, r6]
 800f0e4:	eb03 1541 	add.w	r5, r3, r1, lsl #5
 800f0e8:	686f      	ldr	r7, [r5, #4]
 800f0ea:	1b14      	subs	r4, r2, r4
 800f0ec:	42bc      	cmp	r4, r7
 800f0ee:	d319      	bcc.n	800f124 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 800f0f0:	519a      	str	r2, [r3, r6]
 800f0f2:	69eb      	ldr	r3, [r5, #28]
 800f0f4:	3b01      	subs	r3, #1
 800f0f6:	2b04      	cmp	r3, #4
 800f0f8:	d814      	bhi.n	800f124 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 800f0fa:	e8df f003 	tbb	[pc, r3]
 800f0fe:	0d0a0703 	stceq	7, cr0, [sl, #-12]
 800f102:	f7ff0010 			; <UNDEFINED> instruction: 0xf7ff0010
 800f106:	fedc 2001 	cdp2	0, 13, cr2, cr12, cr1, {0}
 800f10a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f10c:	f7ff ff02 	bl	800ef14 <PixelPatterns::TheaterChaseUpdate(unsigned int)>
 800f110:	e7fa      	b.n	800f108 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800f112:	f7ff ff2f 	bl	800ef74 <PixelPatterns::ColourWipeUpdate(unsigned int)>
 800f116:	e7f7      	b.n	800f108 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800f118:	f7ff ff3e 	bl	800ef98 <PixelPatterns::ScannerUpdate(unsigned int)>
 800f11c:	e7f4      	b.n	800f108 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800f11e:	f7ff ff95 	bl	800f04c <PixelPatterns::FadeUpdate(unsigned int)>
 800f122:	e7f1      	b.n	800f108 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800f124:	2000      	movs	r0, #0
 800f126:	e7f0      	b.n	800f10a <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2e>
 800f128:	200018e8 	andcs	r1, r0, r8, ror #17

0800f12c <PixelPatterns::Run()>:
 800f12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f130:	4606      	mov	r6, r0
 800f132:	f006 fbcf 	bl	80158d4 <gd32_spi_dma_tx_is_active()>
 800f136:	4604      	mov	r4, r0
 800f138:	b9c0      	cbnz	r0, 800f16c <PixelPatterns::Run()+0x40>
 800f13a:	4605      	mov	r5, r0
 800f13c:	4b0c      	ldr	r3, [pc, #48]	; (800f170 <PixelPatterns::Run()+0x44>)
 800f13e:	4f0d      	ldr	r7, [pc, #52]	; (800f174 <PixelPatterns::Run()+0x48>)
 800f140:	f8d3 8000 	ldr.w	r8, [r3]
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	b2e9      	uxtb	r1, r5
 800f148:	428b      	cmp	r3, r1
 800f14a:	f105 0501 	add.w	r5, r5, #1
 800f14e:	d806      	bhi.n	800f15e <PixelPatterns::Run()+0x32>
 800f150:	b164      	cbz	r4, 800f16c <PixelPatterns::Run()+0x40>
 800f152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f156:	4b08      	ldr	r3, [pc, #32]	; (800f178 <PixelPatterns::Run()+0x4c>)
 800f158:	6818      	ldr	r0, [r3, #0]
 800f15a:	f000 bdb1 	b.w	800fcc0 <WS28xx::Update()>
 800f15e:	4642      	mov	r2, r8
 800f160:	4630      	mov	r0, r6
 800f162:	f7ff ffbb 	bl	800f0dc <PixelPatterns::PortUpdate(unsigned int, unsigned int)>
 800f166:	4304      	orrs	r4, r0
 800f168:	b2e4      	uxtb	r4, r4
 800f16a:	e7eb      	b.n	800f144 <PixelPatterns::Run()+0x18>
 800f16c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f170:	20009d6c 	andcs	r9, r0, ip, ror #26
 800f174:	20001908 	andcs	r1, r0, r8, lsl #18
 800f178:	20001914 	andcs	r1, r0, r4, lsl r9

0800f17c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>:
 800f17c:	b570      	push	{r4, r5, r6, lr}
 800f17e:	6984      	ldr	r4, [r0, #24]
 800f180:	f89d e010 	ldrb.w	lr, [sp, #16]
 800f184:	f814 c003 	ldrb.w	ip, [r4, r3]
 800f188:	7d43      	ldrb	r3, [r0, #21]
 800f18a:	5ca2      	ldrb	r2, [r4, r2]
 800f18c:	f814 e00e 	ldrb.w	lr, [r4, lr]
 800f190:	b993      	cbnz	r3, 800f1b8 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x3c>
 800f192:	6803      	ldr	r3, [r0, #0]
 800f194:	f1a3 040b 	sub.w	r4, r3, #11
 800f198:	2c01      	cmp	r4, #1
 800f19a:	d93e      	bls.n	800f21a <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x9e>
 800f19c:	b9db      	cbnz	r3, 800f1d6 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x5a>
 800f19e:	6a03      	ldr	r3, [r0, #32]
 800f1a0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f1a4:	545a      	strb	r2, [r3, r1]
 800f1a6:	6a03      	ldr	r3, [r0, #32]
 800f1a8:	440b      	add	r3, r1
 800f1aa:	f883 c001 	strb.w	ip, [r3, #1]
 800f1ae:	6a03      	ldr	r3, [r0, #32]
 800f1b0:	440b      	add	r3, r1
 800f1b2:	f883 e002 	strb.w	lr, [r3, #2]
 800f1b6:	bd70      	pop	{r4, r5, r6, pc}
 800f1b8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f1bc:	00cb      	lsls	r3, r1, #3
 800f1be:	6881      	ldr	r1, [r0, #8]
 800f1c0:	2905      	cmp	r1, #5
 800f1c2:	f200 80ff 	bhi.w	800f3c4 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x248>
 800f1c6:	e8df f011 	tbh	[pc, r1, lsl #1]
 800f1ca:	028400fd 	addeq	r0, r4, #253	; 0xfd
 800f1ce:	038b030b 	orreq	r0, fp, #738197504	; 0x2c000000
 800f1d2:	01c1003c 	biceq	r0, r1, ip, lsr r0
 800f1d6:	ea6f 039e 	mvn.w	r3, lr, lsr #2
 800f1da:	ea6f 151c 	mvn.w	r5, ip, lsr #4
 800f1de:	f082 06c0 	eor.w	r6, r2, #192	; 0xc0
 800f1e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f1e6:	ea43 1396 	orr.w	r3, r3, r6, lsr #6
 800f1ea:	f005 050c 	and.w	r5, r5, #12
 800f1ee:	6a04      	ldr	r4, [r0, #32]
 800f1f0:	432b      	orrs	r3, r5
 800f1f2:	3101      	adds	r1, #1
 800f1f4:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800f1f8:	f804 3021 	strb.w	r3, [r4, r1, lsl #2]
 800f1fc:	6a03      	ldr	r3, [r0, #32]
 800f1fe:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800f202:	f883 e001 	strb.w	lr, [r3, #1]
 800f206:	6a03      	ldr	r3, [r0, #32]
 800f208:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800f20c:	f883 c002 	strb.w	ip, [r3, #2]
 800f210:	6a03      	ldr	r3, [r0, #32]
 800f212:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800f216:	70da      	strb	r2, [r3, #3]
 800f218:	bd70      	pop	{r4, r5, r6, pc}
 800f21a:	6a03      	ldr	r3, [r0, #32]
 800f21c:	7c84      	ldrb	r4, [r0, #18]
 800f21e:	3101      	adds	r1, #1
 800f220:	f803 4021 	strb.w	r4, [r3, r1, lsl #2]
 800f224:	6a03      	ldr	r3, [r0, #32]
 800f226:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800f22a:	705a      	strb	r2, [r3, #1]
 800f22c:	6a03      	ldr	r3, [r0, #32]
 800f22e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800f232:	f883 c002 	strb.w	ip, [r3, #2]
 800f236:	6a03      	ldr	r3, [r0, #32]
 800f238:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800f23c:	f883 e003 	strb.w	lr, [r3, #3]
 800f240:	bd70      	pop	{r4, r5, r6, pc}
 800f242:	7c01      	ldrb	r1, [r0, #16]
 800f244:	7c44      	ldrb	r4, [r0, #17]
 800f246:	6a05      	ldr	r5, [r0, #32]
 800f248:	1c5e      	adds	r6, r3, #1
 800f24a:	f01e 0f80 	tst.w	lr, #128	; 0x80
 800f24e:	bf0c      	ite	eq
 800f250:	55a9      	strbeq	r1, [r5, r6]
 800f252:	55ac      	strbne	r4, [r5, r6]
 800f254:	6a05      	ldr	r5, [r0, #32]
 800f256:	1c9e      	adds	r6, r3, #2
 800f258:	f01e 0f40 	tst.w	lr, #64	; 0x40
 800f25c:	bf0c      	ite	eq
 800f25e:	55a9      	strbeq	r1, [r5, r6]
 800f260:	55ac      	strbne	r4, [r5, r6]
 800f262:	6a05      	ldr	r5, [r0, #32]
 800f264:	1cde      	adds	r6, r3, #3
 800f266:	f01e 0f20 	tst.w	lr, #32
 800f26a:	bf0c      	ite	eq
 800f26c:	55a9      	strbeq	r1, [r5, r6]
 800f26e:	55ac      	strbne	r4, [r5, r6]
 800f270:	6a05      	ldr	r5, [r0, #32]
 800f272:	1d1e      	adds	r6, r3, #4
 800f274:	f01e 0f10 	tst.w	lr, #16
 800f278:	bf0c      	ite	eq
 800f27a:	55a9      	strbeq	r1, [r5, r6]
 800f27c:	55ac      	strbne	r4, [r5, r6]
 800f27e:	6a05      	ldr	r5, [r0, #32]
 800f280:	1d5e      	adds	r6, r3, #5
 800f282:	f01e 0f08 	tst.w	lr, #8
 800f286:	bf0c      	ite	eq
 800f288:	55a9      	strbeq	r1, [r5, r6]
 800f28a:	55ac      	strbne	r4, [r5, r6]
 800f28c:	6a05      	ldr	r5, [r0, #32]
 800f28e:	1d9e      	adds	r6, r3, #6
 800f290:	f01e 0f04 	tst.w	lr, #4
 800f294:	bf0c      	ite	eq
 800f296:	55a9      	strbeq	r1, [r5, r6]
 800f298:	55ac      	strbne	r4, [r5, r6]
 800f29a:	6a05      	ldr	r5, [r0, #32]
 800f29c:	1dde      	adds	r6, r3, #7
 800f29e:	f01e 0f02 	tst.w	lr, #2
 800f2a2:	bf0c      	ite	eq
 800f2a4:	55a9      	strbeq	r1, [r5, r6]
 800f2a6:	55ac      	strbne	r4, [r5, r6]
 800f2a8:	f01e 0f01 	tst.w	lr, #1
 800f2ac:	bf14      	ite	ne
 800f2ae:	6a01      	ldrne	r1, [r0, #32]
 800f2b0:	6a04      	ldreq	r4, [r0, #32]
 800f2b2:	f103 0508 	add.w	r5, r3, #8
 800f2b6:	bf14      	ite	ne
 800f2b8:	554c      	strbne	r4, [r1, r5]
 800f2ba:	5561      	strbeq	r1, [r4, r5]
 800f2bc:	7c01      	ldrb	r1, [r0, #16]
 800f2be:	7c44      	ldrb	r4, [r0, #17]
 800f2c0:	6a06      	ldr	r6, [r0, #32]
 800f2c2:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f2c6:	f103 0509 	add.w	r5, r3, #9
 800f2ca:	bf0c      	ite	eq
 800f2cc:	5571      	strbeq	r1, [r6, r5]
 800f2ce:	5574      	strbne	r4, [r6, r5]
 800f2d0:	6a06      	ldr	r6, [r0, #32]
 800f2d2:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f2d6:	f103 050a 	add.w	r5, r3, #10
 800f2da:	bf0c      	ite	eq
 800f2dc:	5571      	strbeq	r1, [r6, r5]
 800f2de:	5574      	strbne	r4, [r6, r5]
 800f2e0:	6a06      	ldr	r6, [r0, #32]
 800f2e2:	f012 0f20 	tst.w	r2, #32
 800f2e6:	f103 050b 	add.w	r5, r3, #11
 800f2ea:	bf0c      	ite	eq
 800f2ec:	5571      	strbeq	r1, [r6, r5]
 800f2ee:	5574      	strbne	r4, [r6, r5]
 800f2f0:	6a06      	ldr	r6, [r0, #32]
 800f2f2:	f012 0f10 	tst.w	r2, #16
 800f2f6:	f103 050c 	add.w	r5, r3, #12
 800f2fa:	bf0c      	ite	eq
 800f2fc:	5571      	strbeq	r1, [r6, r5]
 800f2fe:	5574      	strbne	r4, [r6, r5]
 800f300:	6a06      	ldr	r6, [r0, #32]
 800f302:	f012 0f08 	tst.w	r2, #8
 800f306:	f103 050d 	add.w	r5, r3, #13
 800f30a:	bf0c      	ite	eq
 800f30c:	5571      	strbeq	r1, [r6, r5]
 800f30e:	5574      	strbne	r4, [r6, r5]
 800f310:	6a06      	ldr	r6, [r0, #32]
 800f312:	f012 0f04 	tst.w	r2, #4
 800f316:	f103 050e 	add.w	r5, r3, #14
 800f31a:	bf0c      	ite	eq
 800f31c:	5571      	strbeq	r1, [r6, r5]
 800f31e:	5574      	strbne	r4, [r6, r5]
 800f320:	6a06      	ldr	r6, [r0, #32]
 800f322:	f012 0f02 	tst.w	r2, #2
 800f326:	f103 050f 	add.w	r5, r3, #15
 800f32a:	bf0c      	ite	eq
 800f32c:	5571      	strbeq	r1, [r6, r5]
 800f32e:	5574      	strbne	r4, [r6, r5]
 800f330:	f012 0f01 	tst.w	r2, #1
 800f334:	6a02      	ldr	r2, [r0, #32]
 800f336:	f103 0510 	add.w	r5, r3, #16
 800f33a:	bf14      	ite	ne
 800f33c:	5554      	strbne	r4, [r2, r5]
 800f33e:	5551      	strbeq	r1, [r2, r5]
 800f340:	6a05      	ldr	r5, [r0, #32]
 800f342:	7c02      	ldrb	r2, [r0, #16]
 800f344:	7c41      	ldrb	r1, [r0, #17]
 800f346:	f103 0411 	add.w	r4, r3, #17
 800f34a:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800f34e:	bf0c      	ite	eq
 800f350:	552a      	strbeq	r2, [r5, r4]
 800f352:	5529      	strbne	r1, [r5, r4]
 800f354:	6a05      	ldr	r5, [r0, #32]
 800f356:	f103 0412 	add.w	r4, r3, #18
 800f35a:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800f35e:	bf0c      	ite	eq
 800f360:	552a      	strbeq	r2, [r5, r4]
 800f362:	5529      	strbne	r1, [r5, r4]
 800f364:	6a05      	ldr	r5, [r0, #32]
 800f366:	f103 0413 	add.w	r4, r3, #19
 800f36a:	f01c 0f20 	tst.w	ip, #32
 800f36e:	bf0c      	ite	eq
 800f370:	552a      	strbeq	r2, [r5, r4]
 800f372:	5529      	strbne	r1, [r5, r4]
 800f374:	6a05      	ldr	r5, [r0, #32]
 800f376:	f103 0414 	add.w	r4, r3, #20
 800f37a:	f01c 0f10 	tst.w	ip, #16
 800f37e:	bf0c      	ite	eq
 800f380:	552a      	strbeq	r2, [r5, r4]
 800f382:	5529      	strbne	r1, [r5, r4]
 800f384:	6a05      	ldr	r5, [r0, #32]
 800f386:	f103 0415 	add.w	r4, r3, #21
 800f38a:	f01c 0f08 	tst.w	ip, #8
 800f38e:	bf0c      	ite	eq
 800f390:	552a      	strbeq	r2, [r5, r4]
 800f392:	5529      	strbne	r1, [r5, r4]
 800f394:	6a05      	ldr	r5, [r0, #32]
 800f396:	f103 0416 	add.w	r4, r3, #22
 800f39a:	f01c 0f04 	tst.w	ip, #4
 800f39e:	bf0c      	ite	eq
 800f3a0:	552a      	strbeq	r2, [r5, r4]
 800f3a2:	5529      	strbne	r1, [r5, r4]
 800f3a4:	6a05      	ldr	r5, [r0, #32]
 800f3a6:	f103 0417 	add.w	r4, r3, #23
 800f3aa:	f01c 0f02 	tst.w	ip, #2
 800f3ae:	bf0c      	ite	eq
 800f3b0:	552a      	strbeq	r2, [r5, r4]
 800f3b2:	5529      	strbne	r1, [r5, r4]
 800f3b4:	3318      	adds	r3, #24
 800f3b6:	f01c 0f01 	tst.w	ip, #1
 800f3ba:	f000 830d 	beq.w	800f9d8 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x85c>
 800f3be:	6a02      	ldr	r2, [r0, #32]
 800f3c0:	54d1      	strb	r1, [r2, r3]
 800f3c2:	bd70      	pop	{r4, r5, r6, pc}
 800f3c4:	7c01      	ldrb	r1, [r0, #16]
 800f3c6:	7c44      	ldrb	r4, [r0, #17]
 800f3c8:	6a05      	ldr	r5, [r0, #32]
 800f3ca:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f3ce:	f103 0601 	add.w	r6, r3, #1
 800f3d2:	bf14      	ite	ne
 800f3d4:	55ac      	strbne	r4, [r5, r6]
 800f3d6:	55a9      	strbeq	r1, [r5, r6]
 800f3d8:	6a05      	ldr	r5, [r0, #32]
 800f3da:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f3de:	f103 0602 	add.w	r6, r3, #2
 800f3e2:	bf14      	ite	ne
 800f3e4:	55ac      	strbne	r4, [r5, r6]
 800f3e6:	55a9      	strbeq	r1, [r5, r6]
 800f3e8:	6a05      	ldr	r5, [r0, #32]
 800f3ea:	f012 0f20 	tst.w	r2, #32
 800f3ee:	f103 0603 	add.w	r6, r3, #3
 800f3f2:	bf14      	ite	ne
 800f3f4:	55ac      	strbne	r4, [r5, r6]
 800f3f6:	55a9      	strbeq	r1, [r5, r6]
 800f3f8:	6a05      	ldr	r5, [r0, #32]
 800f3fa:	f012 0f10 	tst.w	r2, #16
 800f3fe:	f103 0604 	add.w	r6, r3, #4
 800f402:	bf14      	ite	ne
 800f404:	55ac      	strbne	r4, [r5, r6]
 800f406:	55a9      	strbeq	r1, [r5, r6]
 800f408:	6a05      	ldr	r5, [r0, #32]
 800f40a:	f012 0f08 	tst.w	r2, #8
 800f40e:	f103 0605 	add.w	r6, r3, #5
 800f412:	bf14      	ite	ne
 800f414:	55ac      	strbne	r4, [r5, r6]
 800f416:	55a9      	strbeq	r1, [r5, r6]
 800f418:	6a05      	ldr	r5, [r0, #32]
 800f41a:	f012 0f04 	tst.w	r2, #4
 800f41e:	f103 0606 	add.w	r6, r3, #6
 800f422:	bf14      	ite	ne
 800f424:	55ac      	strbne	r4, [r5, r6]
 800f426:	55a9      	strbeq	r1, [r5, r6]
 800f428:	6a05      	ldr	r5, [r0, #32]
 800f42a:	f012 0f02 	tst.w	r2, #2
 800f42e:	f103 0607 	add.w	r6, r3, #7
 800f432:	bf14      	ite	ne
 800f434:	55ac      	strbne	r4, [r5, r6]
 800f436:	55a9      	strbeq	r1, [r5, r6]
 800f438:	f012 0f01 	tst.w	r2, #1
 800f43c:	6a02      	ldr	r2, [r0, #32]
 800f43e:	f103 0508 	add.w	r5, r3, #8
 800f442:	bf14      	ite	ne
 800f444:	5554      	strbne	r4, [r2, r5]
 800f446:	5551      	strbeq	r1, [r2, r5]
 800f448:	7c41      	ldrb	r1, [r0, #17]
 800f44a:	7c02      	ldrb	r2, [r0, #16]
 800f44c:	6a05      	ldr	r5, [r0, #32]
 800f44e:	f103 0409 	add.w	r4, r3, #9
 800f452:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800f456:	bf0c      	ite	eq
 800f458:	552a      	strbeq	r2, [r5, r4]
 800f45a:	5529      	strbne	r1, [r5, r4]
 800f45c:	6a05      	ldr	r5, [r0, #32]
 800f45e:	f103 040a 	add.w	r4, r3, #10
 800f462:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800f466:	bf0c      	ite	eq
 800f468:	552a      	strbeq	r2, [r5, r4]
 800f46a:	5529      	strbne	r1, [r5, r4]
 800f46c:	6a05      	ldr	r5, [r0, #32]
 800f46e:	f103 040b 	add.w	r4, r3, #11
 800f472:	f01c 0f20 	tst.w	ip, #32
 800f476:	bf0c      	ite	eq
 800f478:	552a      	strbeq	r2, [r5, r4]
 800f47a:	5529      	strbne	r1, [r5, r4]
 800f47c:	6a05      	ldr	r5, [r0, #32]
 800f47e:	f103 040c 	add.w	r4, r3, #12
 800f482:	f01c 0f10 	tst.w	ip, #16
 800f486:	bf0c      	ite	eq
 800f488:	552a      	strbeq	r2, [r5, r4]
 800f48a:	5529      	strbne	r1, [r5, r4]
 800f48c:	6a05      	ldr	r5, [r0, #32]
 800f48e:	f103 040d 	add.w	r4, r3, #13
 800f492:	f01c 0f08 	tst.w	ip, #8
 800f496:	bf0c      	ite	eq
 800f498:	552a      	strbeq	r2, [r5, r4]
 800f49a:	5529      	strbne	r1, [r5, r4]
 800f49c:	6a05      	ldr	r5, [r0, #32]
 800f49e:	f103 040e 	add.w	r4, r3, #14
 800f4a2:	f01c 0f04 	tst.w	ip, #4
 800f4a6:	bf0c      	ite	eq
 800f4a8:	552a      	strbeq	r2, [r5, r4]
 800f4aa:	5529      	strbne	r1, [r5, r4]
 800f4ac:	6a05      	ldr	r5, [r0, #32]
 800f4ae:	f103 040f 	add.w	r4, r3, #15
 800f4b2:	f01c 0f02 	tst.w	ip, #2
 800f4b6:	bf0c      	ite	eq
 800f4b8:	552a      	strbeq	r2, [r5, r4]
 800f4ba:	5529      	strbne	r1, [r5, r4]
 800f4bc:	f01c 0f01 	tst.w	ip, #1
 800f4c0:	bf14      	ite	ne
 800f4c2:	6a02      	ldrne	r2, [r0, #32]
 800f4c4:	6a01      	ldreq	r1, [r0, #32]
 800f4c6:	f103 0410 	add.w	r4, r3, #16
 800f4ca:	bf14      	ite	ne
 800f4cc:	5511      	strbne	r1, [r2, r4]
 800f4ce:	550a      	strbeq	r2, [r1, r4]
 800f4d0:	6a05      	ldr	r5, [r0, #32]
 800f4d2:	7c02      	ldrb	r2, [r0, #16]
 800f4d4:	7c41      	ldrb	r1, [r0, #17]
 800f4d6:	f103 0411 	add.w	r4, r3, #17
 800f4da:	f01e 0f80 	tst.w	lr, #128	; 0x80
 800f4de:	bf0c      	ite	eq
 800f4e0:	552a      	strbeq	r2, [r5, r4]
 800f4e2:	5529      	strbne	r1, [r5, r4]
 800f4e4:	6a05      	ldr	r5, [r0, #32]
 800f4e6:	f103 0412 	add.w	r4, r3, #18
 800f4ea:	f01e 0f40 	tst.w	lr, #64	; 0x40
 800f4ee:	bf0c      	ite	eq
 800f4f0:	552a      	strbeq	r2, [r5, r4]
 800f4f2:	5529      	strbne	r1, [r5, r4]
 800f4f4:	6a05      	ldr	r5, [r0, #32]
 800f4f6:	f103 0413 	add.w	r4, r3, #19
 800f4fa:	f01e 0f20 	tst.w	lr, #32
 800f4fe:	bf0c      	ite	eq
 800f500:	552a      	strbeq	r2, [r5, r4]
 800f502:	5529      	strbne	r1, [r5, r4]
 800f504:	6a05      	ldr	r5, [r0, #32]
 800f506:	f103 0414 	add.w	r4, r3, #20
 800f50a:	f01e 0f10 	tst.w	lr, #16
 800f50e:	bf0c      	ite	eq
 800f510:	552a      	strbeq	r2, [r5, r4]
 800f512:	5529      	strbne	r1, [r5, r4]
 800f514:	6a05      	ldr	r5, [r0, #32]
 800f516:	f103 0415 	add.w	r4, r3, #21
 800f51a:	f01e 0f08 	tst.w	lr, #8
 800f51e:	bf0c      	ite	eq
 800f520:	552a      	strbeq	r2, [r5, r4]
 800f522:	5529      	strbne	r1, [r5, r4]
 800f524:	6a05      	ldr	r5, [r0, #32]
 800f526:	f103 0416 	add.w	r4, r3, #22
 800f52a:	f01e 0f04 	tst.w	lr, #4
 800f52e:	bf0c      	ite	eq
 800f530:	552a      	strbeq	r2, [r5, r4]
 800f532:	5529      	strbne	r1, [r5, r4]
 800f534:	6a05      	ldr	r5, [r0, #32]
 800f536:	f103 0417 	add.w	r4, r3, #23
 800f53a:	f01e 0f02 	tst.w	lr, #2
 800f53e:	bf0c      	ite	eq
 800f540:	552a      	strbeq	r2, [r5, r4]
 800f542:	5529      	strbne	r1, [r5, r4]
 800f544:	3318      	adds	r3, #24
 800f546:	f01e 0f01 	tst.w	lr, #1
 800f54a:	e736      	b.n	800f3ba <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x23e>
 800f54c:	7c01      	ldrb	r1, [r0, #16]
 800f54e:	7c44      	ldrb	r4, [r0, #17]
 800f550:	6a05      	ldr	r5, [r0, #32]
 800f552:	1c5e      	adds	r6, r3, #1
 800f554:	f01e 0f80 	tst.w	lr, #128	; 0x80
 800f558:	bf0c      	ite	eq
 800f55a:	55a9      	strbeq	r1, [r5, r6]
 800f55c:	55ac      	strbne	r4, [r5, r6]
 800f55e:	6a05      	ldr	r5, [r0, #32]
 800f560:	1c9e      	adds	r6, r3, #2
 800f562:	f01e 0f40 	tst.w	lr, #64	; 0x40
 800f566:	bf0c      	ite	eq
 800f568:	55a9      	strbeq	r1, [r5, r6]
 800f56a:	55ac      	strbne	r4, [r5, r6]
 800f56c:	6a05      	ldr	r5, [r0, #32]
 800f56e:	1cde      	adds	r6, r3, #3
 800f570:	f01e 0f20 	tst.w	lr, #32
 800f574:	bf0c      	ite	eq
 800f576:	55a9      	strbeq	r1, [r5, r6]
 800f578:	55ac      	strbne	r4, [r5, r6]
 800f57a:	6a05      	ldr	r5, [r0, #32]
 800f57c:	1d1e      	adds	r6, r3, #4
 800f57e:	f01e 0f10 	tst.w	lr, #16
 800f582:	bf0c      	ite	eq
 800f584:	55a9      	strbeq	r1, [r5, r6]
 800f586:	55ac      	strbne	r4, [r5, r6]
 800f588:	6a05      	ldr	r5, [r0, #32]
 800f58a:	1d5e      	adds	r6, r3, #5
 800f58c:	f01e 0f08 	tst.w	lr, #8
 800f590:	bf0c      	ite	eq
 800f592:	55a9      	strbeq	r1, [r5, r6]
 800f594:	55ac      	strbne	r4, [r5, r6]
 800f596:	6a05      	ldr	r5, [r0, #32]
 800f598:	1d9e      	adds	r6, r3, #6
 800f59a:	f01e 0f04 	tst.w	lr, #4
 800f59e:	bf0c      	ite	eq
 800f5a0:	55a9      	strbeq	r1, [r5, r6]
 800f5a2:	55ac      	strbne	r4, [r5, r6]
 800f5a4:	6a05      	ldr	r5, [r0, #32]
 800f5a6:	1dde      	adds	r6, r3, #7
 800f5a8:	f01e 0f02 	tst.w	lr, #2
 800f5ac:	bf0c      	ite	eq
 800f5ae:	55a9      	strbeq	r1, [r5, r6]
 800f5b0:	55ac      	strbne	r4, [r5, r6]
 800f5b2:	f01e 0f01 	tst.w	lr, #1
 800f5b6:	bf14      	ite	ne
 800f5b8:	6a01      	ldrne	r1, [r0, #32]
 800f5ba:	6a04      	ldreq	r4, [r0, #32]
 800f5bc:	f103 0508 	add.w	r5, r3, #8
 800f5c0:	bf14      	ite	ne
 800f5c2:	554c      	strbne	r4, [r1, r5]
 800f5c4:	5561      	strbeq	r1, [r4, r5]
 800f5c6:	7c01      	ldrb	r1, [r0, #16]
 800f5c8:	7c44      	ldrb	r4, [r0, #17]
 800f5ca:	6a06      	ldr	r6, [r0, #32]
 800f5cc:	f103 0509 	add.w	r5, r3, #9
 800f5d0:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800f5d4:	bf0c      	ite	eq
 800f5d6:	5571      	strbeq	r1, [r6, r5]
 800f5d8:	5574      	strbne	r4, [r6, r5]
 800f5da:	6a06      	ldr	r6, [r0, #32]
 800f5dc:	f103 050a 	add.w	r5, r3, #10
 800f5e0:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800f5e4:	bf0c      	ite	eq
 800f5e6:	5571      	strbeq	r1, [r6, r5]
 800f5e8:	5574      	strbne	r4, [r6, r5]
 800f5ea:	6a06      	ldr	r6, [r0, #32]
 800f5ec:	f103 050b 	add.w	r5, r3, #11
 800f5f0:	f01c 0f20 	tst.w	ip, #32
 800f5f4:	bf0c      	ite	eq
 800f5f6:	5571      	strbeq	r1, [r6, r5]
 800f5f8:	5574      	strbne	r4, [r6, r5]
 800f5fa:	6a06      	ldr	r6, [r0, #32]
 800f5fc:	f103 050c 	add.w	r5, r3, #12
 800f600:	f01c 0f10 	tst.w	ip, #16
 800f604:	bf0c      	ite	eq
 800f606:	5571      	strbeq	r1, [r6, r5]
 800f608:	5574      	strbne	r4, [r6, r5]
 800f60a:	6a06      	ldr	r6, [r0, #32]
 800f60c:	f103 050d 	add.w	r5, r3, #13
 800f610:	f01c 0f08 	tst.w	ip, #8
 800f614:	bf0c      	ite	eq
 800f616:	5571      	strbeq	r1, [r6, r5]
 800f618:	5574      	strbne	r4, [r6, r5]
 800f61a:	6a06      	ldr	r6, [r0, #32]
 800f61c:	f103 050e 	add.w	r5, r3, #14
 800f620:	f01c 0f04 	tst.w	ip, #4
 800f624:	bf0c      	ite	eq
 800f626:	5571      	strbeq	r1, [r6, r5]
 800f628:	5574      	strbne	r4, [r6, r5]
 800f62a:	6a06      	ldr	r6, [r0, #32]
 800f62c:	f103 050f 	add.w	r5, r3, #15
 800f630:	f01c 0f02 	tst.w	ip, #2
 800f634:	bf0c      	ite	eq
 800f636:	5571      	strbeq	r1, [r6, r5]
 800f638:	5574      	strbne	r4, [r6, r5]
 800f63a:	f103 0510 	add.w	r5, r3, #16
 800f63e:	f01c 0f01 	tst.w	ip, #1
 800f642:	bf15      	itete	ne
 800f644:	6a01      	ldrne	r1, [r0, #32]
 800f646:	6a04      	ldreq	r4, [r0, #32]
 800f648:	554c      	strbne	r4, [r1, r5]
 800f64a:	5561      	strbeq	r1, [r4, r5]
 800f64c:	6a06      	ldr	r6, [r0, #32]
 800f64e:	7c01      	ldrb	r1, [r0, #16]
 800f650:	7c44      	ldrb	r4, [r0, #17]
 800f652:	f103 0511 	add.w	r5, r3, #17
 800f656:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f65a:	bf0c      	ite	eq
 800f65c:	5571      	strbeq	r1, [r6, r5]
 800f65e:	5574      	strbne	r4, [r6, r5]
 800f660:	6a06      	ldr	r6, [r0, #32]
 800f662:	f103 0512 	add.w	r5, r3, #18
 800f666:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f66a:	bf0c      	ite	eq
 800f66c:	5571      	strbeq	r1, [r6, r5]
 800f66e:	5574      	strbne	r4, [r6, r5]
 800f670:	6a06      	ldr	r6, [r0, #32]
 800f672:	f103 0513 	add.w	r5, r3, #19
 800f676:	f012 0f20 	tst.w	r2, #32
 800f67a:	bf0c      	ite	eq
 800f67c:	5571      	strbeq	r1, [r6, r5]
 800f67e:	5574      	strbne	r4, [r6, r5]
 800f680:	6a06      	ldr	r6, [r0, #32]
 800f682:	f103 0514 	add.w	r5, r3, #20
 800f686:	f012 0f10 	tst.w	r2, #16
 800f68a:	bf0c      	ite	eq
 800f68c:	5571      	strbeq	r1, [r6, r5]
 800f68e:	5574      	strbne	r4, [r6, r5]
 800f690:	6a06      	ldr	r6, [r0, #32]
 800f692:	f103 0515 	add.w	r5, r3, #21
 800f696:	f012 0f08 	tst.w	r2, #8
 800f69a:	bf0c      	ite	eq
 800f69c:	5571      	strbeq	r1, [r6, r5]
 800f69e:	5574      	strbne	r4, [r6, r5]
 800f6a0:	6a06      	ldr	r6, [r0, #32]
 800f6a2:	f103 0516 	add.w	r5, r3, #22
 800f6a6:	f012 0f04 	tst.w	r2, #4
 800f6aa:	bf0c      	ite	eq
 800f6ac:	5571      	strbeq	r1, [r6, r5]
 800f6ae:	5574      	strbne	r4, [r6, r5]
 800f6b0:	6a06      	ldr	r6, [r0, #32]
 800f6b2:	f012 0f02 	tst.w	r2, #2
 800f6b6:	f103 0517 	add.w	r5, r3, #23
 800f6ba:	bf0c      	ite	eq
 800f6bc:	5571      	strbeq	r1, [r6, r5]
 800f6be:	5574      	strbne	r4, [r6, r5]
 800f6c0:	f012 0f01 	tst.w	r2, #1
 800f6c4:	f103 0318 	add.w	r3, r3, #24
 800f6c8:	6a02      	ldr	r2, [r0, #32]
 800f6ca:	f43f ae79 	beq.w	800f3c0 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x244>
 800f6ce:	54d4      	strb	r4, [r2, r3]
 800f6d0:	bd70      	pop	{r4, r5, r6, pc}
 800f6d2:	7c01      	ldrb	r1, [r0, #16]
 800f6d4:	7c44      	ldrb	r4, [r0, #17]
 800f6d6:	6a05      	ldr	r5, [r0, #32]
 800f6d8:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f6dc:	f103 0601 	add.w	r6, r3, #1
 800f6e0:	bf14      	ite	ne
 800f6e2:	55ac      	strbne	r4, [r5, r6]
 800f6e4:	55a9      	strbeq	r1, [r5, r6]
 800f6e6:	6a05      	ldr	r5, [r0, #32]
 800f6e8:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f6ec:	f103 0602 	add.w	r6, r3, #2
 800f6f0:	bf14      	ite	ne
 800f6f2:	55ac      	strbne	r4, [r5, r6]
 800f6f4:	55a9      	strbeq	r1, [r5, r6]
 800f6f6:	6a05      	ldr	r5, [r0, #32]
 800f6f8:	f012 0f20 	tst.w	r2, #32
 800f6fc:	f103 0603 	add.w	r6, r3, #3
 800f700:	bf14      	ite	ne
 800f702:	55ac      	strbne	r4, [r5, r6]
 800f704:	55a9      	strbeq	r1, [r5, r6]
 800f706:	6a05      	ldr	r5, [r0, #32]
 800f708:	f012 0f10 	tst.w	r2, #16
 800f70c:	f103 0604 	add.w	r6, r3, #4
 800f710:	bf14      	ite	ne
 800f712:	55ac      	strbne	r4, [r5, r6]
 800f714:	55a9      	strbeq	r1, [r5, r6]
 800f716:	6a05      	ldr	r5, [r0, #32]
 800f718:	f012 0f08 	tst.w	r2, #8
 800f71c:	f103 0605 	add.w	r6, r3, #5
 800f720:	bf14      	ite	ne
 800f722:	55ac      	strbne	r4, [r5, r6]
 800f724:	55a9      	strbeq	r1, [r5, r6]
 800f726:	6a05      	ldr	r5, [r0, #32]
 800f728:	f012 0f04 	tst.w	r2, #4
 800f72c:	f103 0606 	add.w	r6, r3, #6
 800f730:	bf14      	ite	ne
 800f732:	55ac      	strbne	r4, [r5, r6]
 800f734:	55a9      	strbeq	r1, [r5, r6]
 800f736:	6a05      	ldr	r5, [r0, #32]
 800f738:	f012 0f02 	tst.w	r2, #2
 800f73c:	f103 0607 	add.w	r6, r3, #7
 800f740:	bf14      	ite	ne
 800f742:	55ac      	strbne	r4, [r5, r6]
 800f744:	55a9      	strbeq	r1, [r5, r6]
 800f746:	f012 0f01 	tst.w	r2, #1
 800f74a:	6a02      	ldr	r2, [r0, #32]
 800f74c:	f103 0508 	add.w	r5, r3, #8
 800f750:	bf14      	ite	ne
 800f752:	5554      	strbne	r4, [r2, r5]
 800f754:	5551      	strbeq	r1, [r2, r5]
 800f756:	7c41      	ldrb	r1, [r0, #17]
 800f758:	7c02      	ldrb	r2, [r0, #16]
 800f75a:	6a05      	ldr	r5, [r0, #32]
 800f75c:	f103 0409 	add.w	r4, r3, #9
 800f760:	f01e 0f80 	tst.w	lr, #128	; 0x80
 800f764:	bf0c      	ite	eq
 800f766:	552a      	strbeq	r2, [r5, r4]
 800f768:	5529      	strbne	r1, [r5, r4]
 800f76a:	6a05      	ldr	r5, [r0, #32]
 800f76c:	f103 040a 	add.w	r4, r3, #10
 800f770:	f01e 0f40 	tst.w	lr, #64	; 0x40
 800f774:	bf0c      	ite	eq
 800f776:	552a      	strbeq	r2, [r5, r4]
 800f778:	5529      	strbne	r1, [r5, r4]
 800f77a:	6a05      	ldr	r5, [r0, #32]
 800f77c:	f103 040b 	add.w	r4, r3, #11
 800f780:	f01e 0f20 	tst.w	lr, #32
 800f784:	bf0c      	ite	eq
 800f786:	552a      	strbeq	r2, [r5, r4]
 800f788:	5529      	strbne	r1, [r5, r4]
 800f78a:	6a05      	ldr	r5, [r0, #32]
 800f78c:	f103 040c 	add.w	r4, r3, #12
 800f790:	f01e 0f10 	tst.w	lr, #16
 800f794:	bf0c      	ite	eq
 800f796:	552a      	strbeq	r2, [r5, r4]
 800f798:	5529      	strbne	r1, [r5, r4]
 800f79a:	6a05      	ldr	r5, [r0, #32]
 800f79c:	f103 040d 	add.w	r4, r3, #13
 800f7a0:	f01e 0f08 	tst.w	lr, #8
 800f7a4:	bf0c      	ite	eq
 800f7a6:	552a      	strbeq	r2, [r5, r4]
 800f7a8:	5529      	strbne	r1, [r5, r4]
 800f7aa:	6a05      	ldr	r5, [r0, #32]
 800f7ac:	f103 040e 	add.w	r4, r3, #14
 800f7b0:	f01e 0f04 	tst.w	lr, #4
 800f7b4:	bf0c      	ite	eq
 800f7b6:	552a      	strbeq	r2, [r5, r4]
 800f7b8:	5529      	strbne	r1, [r5, r4]
 800f7ba:	6a05      	ldr	r5, [r0, #32]
 800f7bc:	f103 040f 	add.w	r4, r3, #15
 800f7c0:	f01e 0f02 	tst.w	lr, #2
 800f7c4:	bf0c      	ite	eq
 800f7c6:	552a      	strbeq	r2, [r5, r4]
 800f7c8:	5529      	strbne	r1, [r5, r4]
 800f7ca:	f01e 0f01 	tst.w	lr, #1
 800f7ce:	bf14      	ite	ne
 800f7d0:	6a02      	ldrne	r2, [r0, #32]
 800f7d2:	6a01      	ldreq	r1, [r0, #32]
 800f7d4:	f103 0410 	add.w	r4, r3, #16
 800f7d8:	bf14      	ite	ne
 800f7da:	5511      	strbne	r1, [r2, r4]
 800f7dc:	550a      	strbeq	r2, [r1, r4]
 800f7de:	e5af      	b.n	800f340 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x1c4>
 800f7e0:	7c01      	ldrb	r1, [r0, #16]
 800f7e2:	7c44      	ldrb	r4, [r0, #17]
 800f7e4:	6a05      	ldr	r5, [r0, #32]
 800f7e6:	1c5e      	adds	r6, r3, #1
 800f7e8:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800f7ec:	bf0c      	ite	eq
 800f7ee:	55a9      	strbeq	r1, [r5, r6]
 800f7f0:	55ac      	strbne	r4, [r5, r6]
 800f7f2:	6a05      	ldr	r5, [r0, #32]
 800f7f4:	1c9e      	adds	r6, r3, #2
 800f7f6:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800f7fa:	bf0c      	ite	eq
 800f7fc:	55a9      	strbeq	r1, [r5, r6]
 800f7fe:	55ac      	strbne	r4, [r5, r6]
 800f800:	6a05      	ldr	r5, [r0, #32]
 800f802:	1cde      	adds	r6, r3, #3
 800f804:	f01c 0f20 	tst.w	ip, #32
 800f808:	bf0c      	ite	eq
 800f80a:	55a9      	strbeq	r1, [r5, r6]
 800f80c:	55ac      	strbne	r4, [r5, r6]
 800f80e:	6a05      	ldr	r5, [r0, #32]
 800f810:	1d1e      	adds	r6, r3, #4
 800f812:	f01c 0f10 	tst.w	ip, #16
 800f816:	bf0c      	ite	eq
 800f818:	55a9      	strbeq	r1, [r5, r6]
 800f81a:	55ac      	strbne	r4, [r5, r6]
 800f81c:	6a05      	ldr	r5, [r0, #32]
 800f81e:	1d5e      	adds	r6, r3, #5
 800f820:	f01c 0f08 	tst.w	ip, #8
 800f824:	bf0c      	ite	eq
 800f826:	55a9      	strbeq	r1, [r5, r6]
 800f828:	55ac      	strbne	r4, [r5, r6]
 800f82a:	6a05      	ldr	r5, [r0, #32]
 800f82c:	1d9e      	adds	r6, r3, #6
 800f82e:	f01c 0f04 	tst.w	ip, #4
 800f832:	bf0c      	ite	eq
 800f834:	55a9      	strbeq	r1, [r5, r6]
 800f836:	55ac      	strbne	r4, [r5, r6]
 800f838:	6a05      	ldr	r5, [r0, #32]
 800f83a:	1dde      	adds	r6, r3, #7
 800f83c:	f01c 0f02 	tst.w	ip, #2
 800f840:	bf0c      	ite	eq
 800f842:	55a9      	strbeq	r1, [r5, r6]
 800f844:	55ac      	strbne	r4, [r5, r6]
 800f846:	f01c 0f01 	tst.w	ip, #1
 800f84a:	bf14      	ite	ne
 800f84c:	6a01      	ldrne	r1, [r0, #32]
 800f84e:	6a04      	ldreq	r4, [r0, #32]
 800f850:	f103 0508 	add.w	r5, r3, #8
 800f854:	bf14      	ite	ne
 800f856:	554c      	strbne	r4, [r1, r5]
 800f858:	5561      	strbeq	r1, [r4, r5]
 800f85a:	7c01      	ldrb	r1, [r0, #16]
 800f85c:	7c44      	ldrb	r4, [r0, #17]
 800f85e:	6a06      	ldr	r6, [r0, #32]
 800f860:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f864:	f103 0509 	add.w	r5, r3, #9
 800f868:	bf0c      	ite	eq
 800f86a:	5571      	strbeq	r1, [r6, r5]
 800f86c:	5574      	strbne	r4, [r6, r5]
 800f86e:	6a06      	ldr	r6, [r0, #32]
 800f870:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f874:	f103 050a 	add.w	r5, r3, #10
 800f878:	bf0c      	ite	eq
 800f87a:	5571      	strbeq	r1, [r6, r5]
 800f87c:	5574      	strbne	r4, [r6, r5]
 800f87e:	6a06      	ldr	r6, [r0, #32]
 800f880:	f012 0f20 	tst.w	r2, #32
 800f884:	f103 050b 	add.w	r5, r3, #11
 800f888:	bf0c      	ite	eq
 800f88a:	5571      	strbeq	r1, [r6, r5]
 800f88c:	5574      	strbne	r4, [r6, r5]
 800f88e:	6a06      	ldr	r6, [r0, #32]
 800f890:	f012 0f10 	tst.w	r2, #16
 800f894:	f103 050c 	add.w	r5, r3, #12
 800f898:	bf0c      	ite	eq
 800f89a:	5571      	strbeq	r1, [r6, r5]
 800f89c:	5574      	strbne	r4, [r6, r5]
 800f89e:	6a06      	ldr	r6, [r0, #32]
 800f8a0:	f012 0f08 	tst.w	r2, #8
 800f8a4:	f103 050d 	add.w	r5, r3, #13
 800f8a8:	bf0c      	ite	eq
 800f8aa:	5571      	strbeq	r1, [r6, r5]
 800f8ac:	5574      	strbne	r4, [r6, r5]
 800f8ae:	6a06      	ldr	r6, [r0, #32]
 800f8b0:	f012 0f04 	tst.w	r2, #4
 800f8b4:	f103 050e 	add.w	r5, r3, #14
 800f8b8:	bf0c      	ite	eq
 800f8ba:	5571      	strbeq	r1, [r6, r5]
 800f8bc:	5574      	strbne	r4, [r6, r5]
 800f8be:	6a06      	ldr	r6, [r0, #32]
 800f8c0:	f012 0f02 	tst.w	r2, #2
 800f8c4:	f103 050f 	add.w	r5, r3, #15
 800f8c8:	bf0c      	ite	eq
 800f8ca:	5571      	strbeq	r1, [r6, r5]
 800f8cc:	5574      	strbne	r4, [r6, r5]
 800f8ce:	f012 0f01 	tst.w	r2, #1
 800f8d2:	6a02      	ldr	r2, [r0, #32]
 800f8d4:	f103 0510 	add.w	r5, r3, #16
 800f8d8:	bf14      	ite	ne
 800f8da:	5554      	strbne	r4, [r2, r5]
 800f8dc:	5551      	strbeq	r1, [r2, r5]
 800f8de:	e5f7      	b.n	800f4d0 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x354>
 800f8e0:	7c01      	ldrb	r1, [r0, #16]
 800f8e2:	7c44      	ldrb	r4, [r0, #17]
 800f8e4:	6a05      	ldr	r5, [r0, #32]
 800f8e6:	1c5e      	adds	r6, r3, #1
 800f8e8:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800f8ec:	bf0c      	ite	eq
 800f8ee:	55a9      	strbeq	r1, [r5, r6]
 800f8f0:	55ac      	strbne	r4, [r5, r6]
 800f8f2:	6a05      	ldr	r5, [r0, #32]
 800f8f4:	1c9e      	adds	r6, r3, #2
 800f8f6:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800f8fa:	bf0c      	ite	eq
 800f8fc:	55a9      	strbeq	r1, [r5, r6]
 800f8fe:	55ac      	strbne	r4, [r5, r6]
 800f900:	6a05      	ldr	r5, [r0, #32]
 800f902:	1cde      	adds	r6, r3, #3
 800f904:	f01c 0f20 	tst.w	ip, #32
 800f908:	bf0c      	ite	eq
 800f90a:	55a9      	strbeq	r1, [r5, r6]
 800f90c:	55ac      	strbne	r4, [r5, r6]
 800f90e:	6a05      	ldr	r5, [r0, #32]
 800f910:	1d1e      	adds	r6, r3, #4
 800f912:	f01c 0f10 	tst.w	ip, #16
 800f916:	bf0c      	ite	eq
 800f918:	55a9      	strbeq	r1, [r5, r6]
 800f91a:	55ac      	strbne	r4, [r5, r6]
 800f91c:	6a05      	ldr	r5, [r0, #32]
 800f91e:	1d5e      	adds	r6, r3, #5
 800f920:	f01c 0f08 	tst.w	ip, #8
 800f924:	bf0c      	ite	eq
 800f926:	55a9      	strbeq	r1, [r5, r6]
 800f928:	55ac      	strbne	r4, [r5, r6]
 800f92a:	6a05      	ldr	r5, [r0, #32]
 800f92c:	1d9e      	adds	r6, r3, #6
 800f92e:	f01c 0f04 	tst.w	ip, #4
 800f932:	bf0c      	ite	eq
 800f934:	55a9      	strbeq	r1, [r5, r6]
 800f936:	55ac      	strbne	r4, [r5, r6]
 800f938:	6a05      	ldr	r5, [r0, #32]
 800f93a:	1dde      	adds	r6, r3, #7
 800f93c:	f01c 0f02 	tst.w	ip, #2
 800f940:	bf0c      	ite	eq
 800f942:	55a9      	strbeq	r1, [r5, r6]
 800f944:	55ac      	strbne	r4, [r5, r6]
 800f946:	f01c 0f01 	tst.w	ip, #1
 800f94a:	bf14      	ite	ne
 800f94c:	6a01      	ldrne	r1, [r0, #32]
 800f94e:	6a04      	ldreq	r4, [r0, #32]
 800f950:	f103 0508 	add.w	r5, r3, #8
 800f954:	bf14      	ite	ne
 800f956:	554c      	strbne	r4, [r1, r5]
 800f958:	5561      	strbeq	r1, [r4, r5]
 800f95a:	7c01      	ldrb	r1, [r0, #16]
 800f95c:	7c44      	ldrb	r4, [r0, #17]
 800f95e:	6a06      	ldr	r6, [r0, #32]
 800f960:	f103 0509 	add.w	r5, r3, #9
 800f964:	f01e 0f80 	tst.w	lr, #128	; 0x80
 800f968:	bf0c      	ite	eq
 800f96a:	5571      	strbeq	r1, [r6, r5]
 800f96c:	5574      	strbne	r4, [r6, r5]
 800f96e:	6a06      	ldr	r6, [r0, #32]
 800f970:	f103 050a 	add.w	r5, r3, #10
 800f974:	f01e 0f40 	tst.w	lr, #64	; 0x40
 800f978:	bf0c      	ite	eq
 800f97a:	5571      	strbeq	r1, [r6, r5]
 800f97c:	5574      	strbne	r4, [r6, r5]
 800f97e:	6a06      	ldr	r6, [r0, #32]
 800f980:	f103 050b 	add.w	r5, r3, #11
 800f984:	f01e 0f20 	tst.w	lr, #32
 800f988:	bf0c      	ite	eq
 800f98a:	5571      	strbeq	r1, [r6, r5]
 800f98c:	5574      	strbne	r4, [r6, r5]
 800f98e:	6a06      	ldr	r6, [r0, #32]
 800f990:	f103 050c 	add.w	r5, r3, #12
 800f994:	f01e 0f10 	tst.w	lr, #16
 800f998:	bf0c      	ite	eq
 800f99a:	5571      	strbeq	r1, [r6, r5]
 800f99c:	5574      	strbne	r4, [r6, r5]
 800f99e:	6a06      	ldr	r6, [r0, #32]
 800f9a0:	f103 050d 	add.w	r5, r3, #13
 800f9a4:	f01e 0f08 	tst.w	lr, #8
 800f9a8:	bf0c      	ite	eq
 800f9aa:	5571      	strbeq	r1, [r6, r5]
 800f9ac:	5574      	strbne	r4, [r6, r5]
 800f9ae:	6a06      	ldr	r6, [r0, #32]
 800f9b0:	f103 050e 	add.w	r5, r3, #14
 800f9b4:	f01e 0f04 	tst.w	lr, #4
 800f9b8:	bf0c      	ite	eq
 800f9ba:	5571      	strbeq	r1, [r6, r5]
 800f9bc:	5574      	strbne	r4, [r6, r5]
 800f9be:	6a06      	ldr	r6, [r0, #32]
 800f9c0:	f103 050f 	add.w	r5, r3, #15
 800f9c4:	f01e 0f02 	tst.w	lr, #2
 800f9c8:	bf0c      	ite	eq
 800f9ca:	5571      	strbeq	r1, [r6, r5]
 800f9cc:	5574      	strbne	r4, [r6, r5]
 800f9ce:	f103 0510 	add.w	r5, r3, #16
 800f9d2:	f01e 0f01 	tst.w	lr, #1
 800f9d6:	e634      	b.n	800f642 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x4c6>
 800f9d8:	6a01      	ldr	r1, [r0, #32]
 800f9da:	54ca      	strb	r2, [r1, r3]
 800f9dc:	bd70      	pop	{r4, r5, r6, pc}
 800f9de:	bf00      	nop

0800f9e0 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>:
 800f9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9e2:	6984      	ldr	r4, [r0, #24]
 800f9e4:	f89d 6014 	ldrb.w	r6, [sp, #20]
 800f9e8:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800f9ec:	f814 c006 	ldrb.w	ip, [r4, r6]
 800f9f0:	56e6      	ldrsb	r6, [r4, r3]
 800f9f2:	0149      	lsls	r1, r1, #5
 800f9f4:	f814 e002 	ldrb.w	lr, [r4, r2]
 800f9f8:	5ce3      	ldrb	r3, [r4, r3]
 800f9fa:	5d62      	ldrb	r2, [r4, r5]
 800f9fc:	2e00      	cmp	r6, #0
 800f9fe:	7c05      	ldrb	r5, [r0, #16]
 800fa00:	7c44      	ldrb	r4, [r0, #17]
 800fa02:	6a06      	ldr	r6, [r0, #32]
 800fa04:	f101 0701 	add.w	r7, r1, #1
 800fa08:	bfac      	ite	ge
 800fa0a:	55f5      	strbge	r5, [r6, r7]
 800fa0c:	55f4      	strblt	r4, [r6, r7]
 800fa0e:	6a07      	ldr	r7, [r0, #32]
 800fa10:	1c8e      	adds	r6, r1, #2
 800fa12:	f013 0f40 	tst.w	r3, #64	; 0x40
 800fa16:	bf0c      	ite	eq
 800fa18:	55bd      	strbeq	r5, [r7, r6]
 800fa1a:	55bc      	strbne	r4, [r7, r6]
 800fa1c:	6a07      	ldr	r7, [r0, #32]
 800fa1e:	1cce      	adds	r6, r1, #3
 800fa20:	f013 0f20 	tst.w	r3, #32
 800fa24:	bf0c      	ite	eq
 800fa26:	55bd      	strbeq	r5, [r7, r6]
 800fa28:	55bc      	strbne	r4, [r7, r6]
 800fa2a:	6a07      	ldr	r7, [r0, #32]
 800fa2c:	1d0e      	adds	r6, r1, #4
 800fa2e:	f013 0f10 	tst.w	r3, #16
 800fa32:	bf0c      	ite	eq
 800fa34:	55bd      	strbeq	r5, [r7, r6]
 800fa36:	55bc      	strbne	r4, [r7, r6]
 800fa38:	6a07      	ldr	r7, [r0, #32]
 800fa3a:	1d4e      	adds	r6, r1, #5
 800fa3c:	f013 0f08 	tst.w	r3, #8
 800fa40:	bf0c      	ite	eq
 800fa42:	55bd      	strbeq	r5, [r7, r6]
 800fa44:	55bc      	strbne	r4, [r7, r6]
 800fa46:	6a07      	ldr	r7, [r0, #32]
 800fa48:	1d8e      	adds	r6, r1, #6
 800fa4a:	f013 0f04 	tst.w	r3, #4
 800fa4e:	bf0c      	ite	eq
 800fa50:	55bd      	strbeq	r5, [r7, r6]
 800fa52:	55bc      	strbne	r4, [r7, r6]
 800fa54:	6a07      	ldr	r7, [r0, #32]
 800fa56:	1dce      	adds	r6, r1, #7
 800fa58:	f013 0f02 	tst.w	r3, #2
 800fa5c:	bf0c      	ite	eq
 800fa5e:	55bd      	strbeq	r5, [r7, r6]
 800fa60:	55bc      	strbne	r4, [r7, r6]
 800fa62:	f013 0f01 	tst.w	r3, #1
 800fa66:	6a03      	ldr	r3, [r0, #32]
 800fa68:	f101 0608 	add.w	r6, r1, #8
 800fa6c:	bf14      	ite	ne
 800fa6e:	559c      	strbne	r4, [r3, r6]
 800fa70:	559d      	strbeq	r5, [r3, r6]
 800fa72:	7c03      	ldrb	r3, [r0, #16]
 800fa74:	7c44      	ldrb	r4, [r0, #17]
 800fa76:	6a05      	ldr	r5, [r0, #32]
 800fa78:	f101 0609 	add.w	r6, r1, #9
 800fa7c:	f01e 0f80 	tst.w	lr, #128	; 0x80
 800fa80:	bf0c      	ite	eq
 800fa82:	55ab      	strbeq	r3, [r5, r6]
 800fa84:	55ac      	strbne	r4, [r5, r6]
 800fa86:	6a05      	ldr	r5, [r0, #32]
 800fa88:	f101 060a 	add.w	r6, r1, #10
 800fa8c:	f01e 0f40 	tst.w	lr, #64	; 0x40
 800fa90:	bf0c      	ite	eq
 800fa92:	55ab      	strbeq	r3, [r5, r6]
 800fa94:	55ac      	strbne	r4, [r5, r6]
 800fa96:	6a05      	ldr	r5, [r0, #32]
 800fa98:	f101 060b 	add.w	r6, r1, #11
 800fa9c:	f01e 0f20 	tst.w	lr, #32
 800faa0:	bf0c      	ite	eq
 800faa2:	55ab      	strbeq	r3, [r5, r6]
 800faa4:	55ac      	strbne	r4, [r5, r6]
 800faa6:	6a05      	ldr	r5, [r0, #32]
 800faa8:	f101 060c 	add.w	r6, r1, #12
 800faac:	f01e 0f10 	tst.w	lr, #16
 800fab0:	bf0c      	ite	eq
 800fab2:	55ab      	strbeq	r3, [r5, r6]
 800fab4:	55ac      	strbne	r4, [r5, r6]
 800fab6:	6a05      	ldr	r5, [r0, #32]
 800fab8:	f101 060d 	add.w	r6, r1, #13
 800fabc:	f01e 0f08 	tst.w	lr, #8
 800fac0:	bf0c      	ite	eq
 800fac2:	55ab      	strbeq	r3, [r5, r6]
 800fac4:	55ac      	strbne	r4, [r5, r6]
 800fac6:	6a05      	ldr	r5, [r0, #32]
 800fac8:	f101 060e 	add.w	r6, r1, #14
 800facc:	f01e 0f04 	tst.w	lr, #4
 800fad0:	bf0c      	ite	eq
 800fad2:	55ab      	strbeq	r3, [r5, r6]
 800fad4:	55ac      	strbne	r4, [r5, r6]
 800fad6:	6a05      	ldr	r5, [r0, #32]
 800fad8:	f101 060f 	add.w	r6, r1, #15
 800fadc:	f01e 0f02 	tst.w	lr, #2
 800fae0:	bf0c      	ite	eq
 800fae2:	55ab      	strbeq	r3, [r5, r6]
 800fae4:	55ac      	strbne	r4, [r5, r6]
 800fae6:	f01e 0f01 	tst.w	lr, #1
 800faea:	bf14      	ite	ne
 800faec:	6a03      	ldrne	r3, [r0, #32]
 800faee:	6a04      	ldreq	r4, [r0, #32]
 800faf0:	f101 0510 	add.w	r5, r1, #16
 800faf4:	bf14      	ite	ne
 800faf6:	555c      	strbne	r4, [r3, r5]
 800faf8:	5563      	strbeq	r3, [r4, r5]
 800fafa:	7c03      	ldrb	r3, [r0, #16]
 800fafc:	7c44      	ldrb	r4, [r0, #17]
 800fafe:	6a06      	ldr	r6, [r0, #32]
 800fb00:	f101 0511 	add.w	r5, r1, #17
 800fb04:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800fb08:	bf0c      	ite	eq
 800fb0a:	5573      	strbeq	r3, [r6, r5]
 800fb0c:	5574      	strbne	r4, [r6, r5]
 800fb0e:	6a06      	ldr	r6, [r0, #32]
 800fb10:	f101 0512 	add.w	r5, r1, #18
 800fb14:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800fb18:	bf0c      	ite	eq
 800fb1a:	5573      	strbeq	r3, [r6, r5]
 800fb1c:	5574      	strbne	r4, [r6, r5]
 800fb1e:	6a06      	ldr	r6, [r0, #32]
 800fb20:	f101 0513 	add.w	r5, r1, #19
 800fb24:	f01c 0f20 	tst.w	ip, #32
 800fb28:	bf0c      	ite	eq
 800fb2a:	5573      	strbeq	r3, [r6, r5]
 800fb2c:	5574      	strbne	r4, [r6, r5]
 800fb2e:	6a06      	ldr	r6, [r0, #32]
 800fb30:	f101 0514 	add.w	r5, r1, #20
 800fb34:	f01c 0f10 	tst.w	ip, #16
 800fb38:	bf0c      	ite	eq
 800fb3a:	5573      	strbeq	r3, [r6, r5]
 800fb3c:	5574      	strbne	r4, [r6, r5]
 800fb3e:	6a06      	ldr	r6, [r0, #32]
 800fb40:	f101 0515 	add.w	r5, r1, #21
 800fb44:	f01c 0f08 	tst.w	ip, #8
 800fb48:	bf0c      	ite	eq
 800fb4a:	5573      	strbeq	r3, [r6, r5]
 800fb4c:	5574      	strbne	r4, [r6, r5]
 800fb4e:	6a06      	ldr	r6, [r0, #32]
 800fb50:	f101 0516 	add.w	r5, r1, #22
 800fb54:	f01c 0f04 	tst.w	ip, #4
 800fb58:	bf0c      	ite	eq
 800fb5a:	5573      	strbeq	r3, [r6, r5]
 800fb5c:	5574      	strbne	r4, [r6, r5]
 800fb5e:	6a06      	ldr	r6, [r0, #32]
 800fb60:	f101 0517 	add.w	r5, r1, #23
 800fb64:	f01c 0f02 	tst.w	ip, #2
 800fb68:	bf0c      	ite	eq
 800fb6a:	5573      	strbeq	r3, [r6, r5]
 800fb6c:	5574      	strbne	r4, [r6, r5]
 800fb6e:	f01c 0f01 	tst.w	ip, #1
 800fb72:	bf14      	ite	ne
 800fb74:	6a03      	ldrne	r3, [r0, #32]
 800fb76:	6a04      	ldreq	r4, [r0, #32]
 800fb78:	f101 0518 	add.w	r5, r1, #24
 800fb7c:	bf14      	ite	ne
 800fb7e:	555c      	strbne	r4, [r3, r5]
 800fb80:	5563      	strbeq	r3, [r4, r5]
 800fb82:	7c03      	ldrb	r3, [r0, #16]
 800fb84:	7c44      	ldrb	r4, [r0, #17]
 800fb86:	6a06      	ldr	r6, [r0, #32]
 800fb88:	0617      	lsls	r7, r2, #24
 800fb8a:	f101 0519 	add.w	r5, r1, #25
 800fb8e:	bf54      	ite	pl
 800fb90:	5573      	strbpl	r3, [r6, r5]
 800fb92:	5574      	strbmi	r4, [r6, r5]
 800fb94:	6a06      	ldr	r6, [r0, #32]
 800fb96:	0657      	lsls	r7, r2, #25
 800fb98:	f101 051a 	add.w	r5, r1, #26
 800fb9c:	bf54      	ite	pl
 800fb9e:	5573      	strbpl	r3, [r6, r5]
 800fba0:	5574      	strbmi	r4, [r6, r5]
 800fba2:	6a06      	ldr	r6, [r0, #32]
 800fba4:	0697      	lsls	r7, r2, #26
 800fba6:	f101 051b 	add.w	r5, r1, #27
 800fbaa:	bf54      	ite	pl
 800fbac:	5573      	strbpl	r3, [r6, r5]
 800fbae:	5574      	strbmi	r4, [r6, r5]
 800fbb0:	6a06      	ldr	r6, [r0, #32]
 800fbb2:	06d7      	lsls	r7, r2, #27
 800fbb4:	f101 051c 	add.w	r5, r1, #28
 800fbb8:	bf54      	ite	pl
 800fbba:	5573      	strbpl	r3, [r6, r5]
 800fbbc:	5574      	strbmi	r4, [r6, r5]
 800fbbe:	6a06      	ldr	r6, [r0, #32]
 800fbc0:	0717      	lsls	r7, r2, #28
 800fbc2:	f101 051d 	add.w	r5, r1, #29
 800fbc6:	bf54      	ite	pl
 800fbc8:	5573      	strbpl	r3, [r6, r5]
 800fbca:	5574      	strbmi	r4, [r6, r5]
 800fbcc:	6a06      	ldr	r6, [r0, #32]
 800fbce:	0757      	lsls	r7, r2, #29
 800fbd0:	f101 051e 	add.w	r5, r1, #30
 800fbd4:	bf54      	ite	pl
 800fbd6:	5573      	strbpl	r3, [r6, r5]
 800fbd8:	5574      	strbmi	r4, [r6, r5]
 800fbda:	6a06      	ldr	r6, [r0, #32]
 800fbdc:	0797      	lsls	r7, r2, #30
 800fbde:	f101 051f 	add.w	r5, r1, #31
 800fbe2:	bf54      	ite	pl
 800fbe4:	5573      	strbpl	r3, [r6, r5]
 800fbe6:	5574      	strbmi	r4, [r6, r5]
 800fbe8:	07d2      	lsls	r2, r2, #31
 800fbea:	bf4c      	ite	mi
 800fbec:	6a03      	ldrmi	r3, [r0, #32]
 800fbee:	6a02      	ldrpl	r2, [r0, #32]
 800fbf0:	f101 0120 	add.w	r1, r1, #32
 800fbf4:	bf4c      	ite	mi
 800fbf6:	545c      	strbmi	r4, [r3, r1]
 800fbf8:	5453      	strbpl	r3, [r2, r1]
 800fbfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fbfc <WS28xx::~WS28xx()>:
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	4b01      	ldr	r3, [pc, #4]	; (800fc04 <WS28xx::~WS28xx()+0x8>)
 800fc00:	601a      	str	r2, [r3, #0]
 800fc02:	4770      	bx	lr
 800fc04:	20001924 	andcs	r1, r0, r4, lsr #18

0800fc08 <WS28xx::SetupBuffers()>:
 800fc08:	b513      	push	{r0, r1, r4, lr}
 800fc0a:	4604      	mov	r4, r0
 800fc0c:	a801      	add	r0, sp, #4
 800fc0e:	f005 fe3f 	bl	8015890 <gd32_spi_dma_tx_prepare(unsigned int*)>
 800fc12:	9b01      	ldr	r3, [sp, #4]
 800fc14:	4a07      	ldr	r2, [pc, #28]	; (800fc34 <WS28xx::SetupBuffers()+0x2c>)
 800fc16:	085b      	lsrs	r3, r3, #1
 800fc18:	f023 0303 	bic.w	r3, r3, #3
 800fc1c:	6220      	str	r0, [r4, #32]
 800fc1e:	4418      	add	r0, r3
 800fc20:	69e3      	ldr	r3, [r4, #28]
 800fc22:	6260      	str	r0, [r4, #36]	; 0x24
 800fc24:	6013      	str	r3, [r2, #0]
 800fc26:	3303      	adds	r3, #3
 800fc28:	f023 0303 	bic.w	r3, r3, #3
 800fc2c:	61e3      	str	r3, [r4, #28]
 800fc2e:	b002      	add	sp, #8
 800fc30:	bd10      	pop	{r4, pc}
 800fc32:	bf00      	nop
 800fc34:	20001920 	andcs	r1, r0, r0, lsr #18

0800fc38 <WS28xx::WS28xx(PixelConfiguration&)>:
 800fc38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc3a:	23aa      	movs	r3, #170	; 0xaa
 800fc3c:	2203      	movs	r2, #3
 800fc3e:	e9c0 2300 	strd	r2, r3, [r0]
 800fc42:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800fc46:	460f      	mov	r7, r1
 800fc48:	6102      	str	r2, [r0, #16]
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	2106      	movs	r1, #6
 800fc4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fc52:	4605      	mov	r5, r0
 800fc54:	463e      	mov	r6, r7
 800fc56:	4604      	mov	r4, r0
 800fc58:	8282      	strh	r2, [r0, #20]
 800fc5a:	e9c0 1302 	strd	r1, r3, [r0, #8]
 800fc5e:	4a16      	ldr	r2, [pc, #88]	; (800fcb8 <WS28xx::WS28xx(PixelConfiguration&)+0x80>)
 800fc60:	e9c0 3308 	strd	r3, r3, [r0, #32]
 800fc64:	4b15      	ldr	r3, [pc, #84]	; (800fcbc <WS28xx::WS28xx(PixelConfiguration&)+0x84>)
 800fc66:	6182      	str	r2, [r0, #24]
 800fc68:	6018      	str	r0, [r3, #0]
 800fc6a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800fc6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fc6e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800fc72:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800fc76:	a901      	add	r1, sp, #4
 800fc78:	4638      	mov	r0, r7
 800fc7a:	f7fe fe05 	bl	800e888 <PixelConfiguration::Validate(unsigned int&)>
 800fc7e:	6862      	ldr	r2, [r4, #4]
 800fc80:	9b01      	ldr	r3, [sp, #4]
 800fc82:	7d61      	ldrb	r1, [r4, #21]
 800fc84:	4353      	muls	r3, r2
 800fc86:	61e3      	str	r3, [r4, #28]
 800fc88:	b111      	cbz	r1, 800fc90 <WS28xx::WS28xx(PixelConfiguration&)+0x58>
 800fc8a:	00db      	lsls	r3, r3, #3
 800fc8c:	3301      	adds	r3, #1
 800fc8e:	61e3      	str	r3, [r4, #28]
 800fc90:	6823      	ldr	r3, [r4, #0]
 800fc92:	4620      	mov	r0, r4
 800fc94:	3b0b      	subs	r3, #11
 800fc96:	2b02      	cmp	r3, #2
 800fc98:	bf9f      	itttt	ls
 800fc9a:	69e3      	ldrls	r3, [r4, #28]
 800fc9c:	18d2      	addls	r2, r2, r3
 800fc9e:	3208      	addls	r2, #8
 800fca0:	61e2      	strls	r2, [r4, #28]
 800fca2:	f7ff ffb1 	bl	800fc08 <WS28xx::SetupBuffers()>
 800fca6:	f005 fd55 	bl	8015754 <gd32_spi_dma_begin()>
 800fcaa:	68f8      	ldr	r0, [r7, #12]
 800fcac:	f005 fddc 	bl	8015868 <gd32_spi_dma_set_speed_hz(unsigned int)>
 800fcb0:	4620      	mov	r0, r4
 800fcb2:	b003      	add	sp, #12
 800fcb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcb6:	bf00      	nop
 800fcb8:	08017780 	stmdaeq	r1, {r7, r8, r9, sl, ip, sp, lr}
 800fcbc:	20001924 	andcs	r1, r0, r4, lsr #18

0800fcc0 <WS28xx::Update()>:
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	b430      	push	{r4, r5}
 800fcc4:	4b0b      	ldr	r3, [pc, #44]	; (800fcf4 <WS28xx::Update()+0x34>)
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	e9d0 1407 	ldrd	r1, r4, [r0, #28]
 800fccc:	4299      	cmp	r1, r3
 800fcce:	d807      	bhi.n	800fce0 <WS28xx::Update()+0x20>
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800fcd4:	084d      	lsrs	r5, r1, #1
 800fcd6:	42ab      	cmp	r3, r5
 800fcd8:	d105      	bne.n	800fce6 <WS28xx::Update()+0x26>
 800fcda:	bc30      	pop	{r4, r5}
 800fcdc:	f005 bde0 	b.w	80158a0 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>
 800fce0:	54e2      	strb	r2, [r4, r3]
 800fce2:	3301      	adds	r3, #1
 800fce4:	e7f0      	b.n	800fcc8 <WS28xx::Update()+0x8>
 800fce6:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
 800fcea:	ba52      	rev16	r2, r2
 800fcec:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 800fcf0:	3301      	adds	r3, #1
 800fcf2:	e7f0      	b.n	800fcd6 <WS28xx::Update()+0x16>
 800fcf4:	20001920 	andcs	r1, r0, r0, lsr #18

0800fcf8 <WS28xx::Blackout()>:
 800fcf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fcfc:	4604      	mov	r4, r0
 800fcfe:	f3bf 8f6f 	isb	sy
 800fd02:	f005 fde7 	bl	80158d4 <gd32_spi_dma_tx_is_active()>
 800fd06:	2800      	cmp	r0, #0
 800fd08:	d1f9      	bne.n	800fcfe <WS28xx::Blackout()+0x6>
 800fd0a:	e9d4 2800 	ldrd	r2, r8, [r4]
 800fd0e:	e9d4 6308 	ldrd	r6, r3, [r4, #32]
 800fd12:	f1a2 070b 	sub.w	r7, r2, #11
 800fd16:	2f02      	cmp	r7, #2
 800fd18:	6223      	str	r3, [r4, #32]
 800fd1a:	7018      	strb	r0, [r3, #0]
 800fd1c:	d829      	bhi.n	800fd72 <WS28xx::Blackout()+0x7a>
 800fd1e:	4605      	mov	r5, r0
 800fd20:	4681      	mov	r9, r0
 800fd22:	7058      	strb	r0, [r3, #1]
 800fd24:	7098      	strb	r0, [r3, #2]
 800fd26:	70d8      	strb	r0, [r3, #3]
 800fd28:	4545      	cmp	r5, r8
 800fd2a:	d118      	bne.n	800fd5e <WS28xx::Blackout()+0x66>
 800fd2c:	2f02      	cmp	r7, #2
 800fd2e:	bf14      	ite	ne
 800fd30:	21ff      	movne	r1, #255	; 0xff
 800fd32:	2100      	moveq	r1, #0
 800fd34:	69e2      	ldr	r2, [r4, #28]
 800fd36:	6a20      	ldr	r0, [r4, #32]
 800fd38:	3a04      	subs	r2, #4
 800fd3a:	1883      	adds	r3, r0, r2
 800fd3c:	5481      	strb	r1, [r0, r2]
 800fd3e:	7059      	strb	r1, [r3, #1]
 800fd40:	7099      	strb	r1, [r3, #2]
 800fd42:	70d9      	strb	r1, [r3, #3]
 800fd44:	4620      	mov	r0, r4
 800fd46:	f7ff ffbb 	bl	800fcc0 <WS28xx::Update()>
 800fd4a:	f3bf 8f6f 	isb	sy
 800fd4e:	f005 fdc1 	bl	80158d4 <gd32_spi_dma_tx_is_active()>
 800fd52:	2800      	cmp	r0, #0
 800fd54:	d1f9      	bne.n	800fd4a <WS28xx::Blackout()+0x52>
 800fd56:	6226      	str	r6, [r4, #32]
 800fd58:	b003      	add	sp, #12
 800fd5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd5e:	2300      	movs	r3, #0
 800fd60:	4629      	mov	r1, r5
 800fd62:	461a      	mov	r2, r3
 800fd64:	4620      	mov	r0, r4
 800fd66:	f8cd 9000 	str.w	r9, [sp]
 800fd6a:	f7ff fa07 	bl	800f17c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 800fd6e:	3501      	adds	r5, #1
 800fd70:	e7da      	b.n	800fd28 <WS28xx::Blackout()+0x30>
 800fd72:	6a23      	ldr	r3, [r4, #32]
 800fd74:	b102      	cbz	r2, 800fd78 <WS28xx::Blackout()+0x80>
 800fd76:	7c22      	ldrb	r2, [r4, #16]
 800fd78:	69e1      	ldr	r1, [r4, #28]
 800fd7a:	4419      	add	r1, r3
 800fd7c:	4299      	cmp	r1, r3
 800fd7e:	d0e1      	beq.n	800fd44 <WS28xx::Blackout()+0x4c>
 800fd80:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fd84:	e7fa      	b.n	800fd7c <WS28xx::Blackout()+0x84>

0800fd86 <WS28xx::FullOn()>:
 800fd86:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fd8a:	4604      	mov	r4, r0
 800fd8c:	f3bf 8f6f 	isb	sy
 800fd90:	f005 fda0 	bl	80158d4 <gd32_spi_dma_tx_is_active()>
 800fd94:	2800      	cmp	r0, #0
 800fd96:	d1f9      	bne.n	800fd8c <WS28xx::FullOn()+0x6>
 800fd98:	e9d4 2800 	ldrd	r2, r8, [r4]
 800fd9c:	e9d4 6308 	ldrd	r6, r3, [r4, #32]
 800fda0:	f1a2 070b 	sub.w	r7, r2, #11
 800fda4:	2f02      	cmp	r7, #2
 800fda6:	6223      	str	r3, [r4, #32]
 800fda8:	7018      	strb	r0, [r3, #0]
 800fdaa:	d82a      	bhi.n	800fe02 <WS28xx::FullOn()+0x7c>
 800fdac:	4605      	mov	r5, r0
 800fdae:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800fdb2:	7058      	strb	r0, [r3, #1]
 800fdb4:	7098      	strb	r0, [r3, #2]
 800fdb6:	70d8      	strb	r0, [r3, #3]
 800fdb8:	4545      	cmp	r5, r8
 800fdba:	d118      	bne.n	800fdee <WS28xx::FullOn()+0x68>
 800fdbc:	2f02      	cmp	r7, #2
 800fdbe:	bf14      	ite	ne
 800fdc0:	21ff      	movne	r1, #255	; 0xff
 800fdc2:	2100      	moveq	r1, #0
 800fdc4:	69e2      	ldr	r2, [r4, #28]
 800fdc6:	6a20      	ldr	r0, [r4, #32]
 800fdc8:	3a04      	subs	r2, #4
 800fdca:	1883      	adds	r3, r0, r2
 800fdcc:	5481      	strb	r1, [r0, r2]
 800fdce:	7059      	strb	r1, [r3, #1]
 800fdd0:	7099      	strb	r1, [r3, #2]
 800fdd2:	70d9      	strb	r1, [r3, #3]
 800fdd4:	4620      	mov	r0, r4
 800fdd6:	f7ff ff73 	bl	800fcc0 <WS28xx::Update()>
 800fdda:	f3bf 8f6f 	isb	sy
 800fdde:	f005 fd79 	bl	80158d4 <gd32_spi_dma_tx_is_active()>
 800fde2:	2800      	cmp	r0, #0
 800fde4:	d1f9      	bne.n	800fdda <WS28xx::FullOn()+0x54>
 800fde6:	6226      	str	r6, [r4, #32]
 800fde8:	b003      	add	sp, #12
 800fdea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdee:	23ff      	movs	r3, #255	; 0xff
 800fdf0:	4629      	mov	r1, r5
 800fdf2:	461a      	mov	r2, r3
 800fdf4:	4620      	mov	r0, r4
 800fdf6:	f8cd 9000 	str.w	r9, [sp]
 800fdfa:	f7ff f9bf 	bl	800f17c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 800fdfe:	3501      	adds	r5, #1
 800fe00:	e7da      	b.n	800fdb8 <WS28xx::FullOn()+0x32>
 800fe02:	6a23      	ldr	r3, [r4, #32]
 800fe04:	b13a      	cbz	r2, 800fe16 <WS28xx::FullOn()+0x90>
 800fe06:	7c61      	ldrb	r1, [r4, #17]
 800fe08:	69e2      	ldr	r2, [r4, #28]
 800fe0a:	441a      	add	r2, r3
 800fe0c:	429a      	cmp	r2, r3
 800fe0e:	d0e1      	beq.n	800fdd4 <WS28xx::FullOn()+0x4e>
 800fe10:	f803 1f01 	strb.w	r1, [r3, #1]!
 800fe14:	e7fa      	b.n	800fe0c <WS28xx::FullOn()+0x86>
 800fe16:	21ff      	movs	r1, #255	; 0xff
 800fe18:	e7f6      	b.n	800fe08 <WS28xx::FullOn()+0x82>
	...

0800fe1c <net_set_ip>:
 800fe1c:	b510      	push	{r4, lr}
 800fe1e:	4c05      	ldr	r4, [pc, #20]	; (800fe34 <net_set_ip+0x18>)
 800fe20:	6020      	str	r0, [r4, #0]
 800fe22:	4621      	mov	r1, r4
 800fe24:	4804      	ldr	r0, [pc, #16]	; (800fe38 <net_set_ip+0x1c>)
 800fe26:	f7f7 fa4d 	bl	80072c4 <arp_init>
 800fe2a:	4620      	mov	r0, r4
 800fe2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe30:	f001 be3c 	b.w	8011aac <ip_set_ip>
 800fe34:	20001928 	andcs	r1, r0, r8, lsr #18
 800fe38:	20001934 	andcs	r1, r0, r4, lsr r9

0800fe3c <net_set_gw>:
 800fe3c:	4b02      	ldr	r3, [pc, #8]	; (800fe48 <net_set_gw+0xc>)
 800fe3e:	6098      	str	r0, [r3, #8]
 800fe40:	4618      	mov	r0, r3
 800fe42:	f001 be33 	b.w	8011aac <ip_set_ip>
 800fe46:	bf00      	nop
 800fe48:	20001928 	andcs	r1, r0, r8, lsr #18

0800fe4c <net_set_dhcp>:
 800fe4c:	b570      	push	{r4, r5, r6, lr}
 800fe4e:	2400      	movs	r4, #0
 800fe50:	4605      	mov	r5, r0
 800fe52:	7014      	strb	r4, [r2, #0]
 800fe54:	4616      	mov	r6, r2
 800fe56:	4810      	ldr	r0, [pc, #64]	; (800fe98 <net_set_dhcp+0x4c>)
 800fe58:	460a      	mov	r2, r1
 800fe5a:	4910      	ldr	r1, [pc, #64]	; (800fe9c <net_set_dhcp+0x50>)
 800fe5c:	f001 fc06 	bl	801166c <dhcp_client>
 800fe60:	42a0      	cmp	r0, r4
 800fe62:	da17      	bge.n	800fe94 <net_set_dhcp+0x48>
 800fe64:	480d      	ldr	r0, [pc, #52]	; (800fe9c <net_set_dhcp+0x50>)
 800fe66:	f000 f837 	bl	800fed8 <rfc3927>
 800fe6a:	7030      	strb	r0, [r6, #0]
 800fe6c:	490b      	ldr	r1, [pc, #44]	; (800fe9c <net_set_dhcp+0x50>)
 800fe6e:	480a      	ldr	r0, [pc, #40]	; (800fe98 <net_set_dhcp+0x4c>)
 800fe70:	f7f7 fa28 	bl	80072c4 <arp_init>
 800fe74:	4809      	ldr	r0, [pc, #36]	; (800fe9c <net_set_dhcp+0x50>)
 800fe76:	f001 fe19 	bl	8011aac <ip_set_ip>
 800fe7a:	4a08      	ldr	r2, [pc, #32]	; (800fe9c <net_set_dhcp+0x50>)
 800fe7c:	1e6b      	subs	r3, r5, #1
 800fe7e:	350b      	adds	r5, #11
 800fe80:	f812 1b01 	ldrb.w	r1, [r2], #1
 800fe84:	f803 1f01 	strb.w	r1, [r3, #1]!
 800fe88:	42ab      	cmp	r3, r5
 800fe8a:	d1f9      	bne.n	800fe80 <net_set_dhcp+0x34>
 800fe8c:	4b04      	ldr	r3, [pc, #16]	; (800fea0 <net_set_dhcp+0x54>)
 800fe8e:	4620      	mov	r0, r4
 800fe90:	701c      	strb	r4, [r3, #0]
 800fe92:	bd70      	pop	{r4, r5, r6, pc}
 800fe94:	2401      	movs	r4, #1
 800fe96:	e7e9      	b.n	800fe6c <net_set_dhcp+0x20>
 800fe98:	20001934 	andcs	r1, r0, r4, lsr r9
 800fe9c:	20001928 	andcs	r1, r0, r8, lsr #18
 800fea0:	2000193a 	andcs	r1, r0, sl, lsr r9

0800fea4 <net_dhcp_release>:
 800fea4:	b508      	push	{r3, lr}
 800fea6:	f001 fce9 	bl	801187c <dhcp_client_release>
 800feaa:	2200      	movs	r2, #0
 800feac:	4b01      	ldr	r3, [pc, #4]	; (800feb4 <net_dhcp_release+0x10>)
 800feae:	701a      	strb	r2, [r3, #0]
 800feb0:	bd08      	pop	{r3, pc}
 800feb2:	bf00      	nop
 800feb4:	2000193a 	andcs	r1, r0, sl, lsr r9

0800feb8 <net_timers_run>:
 800feb8:	4b05      	ldr	r3, [pc, #20]	; (800fed0 <net_timers_run+0x18>)
 800feba:	4a06      	ldr	r2, [pc, #24]	; (800fed4 <net_timers_run+0x1c>)
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	6811      	ldr	r1, [r2, #0]
 800fec0:	4299      	cmp	r1, r3
 800fec2:	d803      	bhi.n	800fecc <net_timers_run+0x14>
 800fec4:	3364      	adds	r3, #100	; 0x64
 800fec6:	6013      	str	r3, [r2, #0]
 800fec8:	f001 bd66 	b.w	8011998 <igmp_timer>
 800fecc:	4770      	bx	lr
 800fece:	bf00      	nop
 800fed0:	20009d6c 	andcs	r9, r0, ip, ror #26
 800fed4:	20001940 	andcs	r1, r0, r0, asr #18

0800fed8 <rfc3927>:
 800fed8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fedc:	4606      	mov	r6, r0
 800fede:	25ff      	movs	r5, #255	; 0xff
 800fee0:	4b18      	ldr	r3, [pc, #96]	; (800ff44 <rfc3927+0x6c>)
 800fee2:	4f19      	ldr	r7, [pc, #100]	; (800ff48 <rfc3927+0x70>)
 800fee4:	791a      	ldrb	r2, [r3, #4]
 800fee6:	78dc      	ldrb	r4, [r3, #3]
 800fee8:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800ff4c <rfc3927+0x74>
 800feec:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 800fef0:	f8d7 9000 	ldr.w	r9, [r7]
 800fef4:	f8df b058 	ldr.w	fp, [pc, #88]	; 800ff50 <rfc3927+0x78>
 800fef8:	f8df a058 	ldr.w	sl, [pc, #88]	; 800ff54 <rfc3927+0x7c>
 800fefc:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 800ff00:	4659      	mov	r1, fp
 800ff02:	4620      	mov	r0, r4
 800ff04:	f001 faa6 	bl	8011454 <arp_cache_lookup>
 800ff08:	b190      	cbz	r0, 800ff30 <rfc3927+0x58>
 800ff0a:	ba24      	rev	r4, r4
 800ff0c:	3401      	adds	r4, #1
 800ff0e:	3d01      	subs	r5, #1
 800ff10:	ba24      	rev	r4, r4
 800ff12:	b2ad      	uxth	r5, r5
 800ff14:	4554      	cmp	r4, sl
 800ff16:	bf08      	it	eq
 800ff18:	4644      	moveq	r4, r8
 800ff1a:	b18d      	cbz	r5, 800ff40 <rfc3927+0x68>
 800ff1c:	683b      	ldr	r3, [r7, #0]
 800ff1e:	eba3 0309 	sub.w	r3, r3, r9
 800ff22:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800ff26:	d3eb      	bcc.n	800ff00 <rfc3927+0x28>
 800ff28:	2400      	movs	r4, #0
 800ff2a:	4623      	mov	r3, r4
 800ff2c:	4620      	mov	r0, r4
 800ff2e:	e002      	b.n	800ff36 <rfc3927+0x5e>
 800ff30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ff34:	2001      	movs	r0, #1
 800ff36:	e9c6 3401 	strd	r3, r4, [r6, #4]
 800ff3a:	6034      	str	r4, [r6, #0]
 800ff3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff40:	462c      	mov	r4, r5
 800ff42:	e7f2      	b.n	800ff2a <rfc3927+0x52>
 800ff44:	20001944 	andcs	r1, r0, r4, asr #18
 800ff48:	20009d6c 	andcs	r9, r0, ip, ror #26
 800ff4c:	0100fea9 	smlatbeq	r0, r9, lr, pc	; <UNPREDICTABLE>
 800ff50:	2000194c 	andcs	r1, r0, ip, asr #18
 800ff54:	fffefea9 			; <UNDEFINED> instruction: 0xfffefea9

0800ff58 <memcpy.isra.0>:
 800ff58:	3801      	subs	r0, #1
 800ff5a:	440a      	add	r2, r1
 800ff5c:	4291      	cmp	r1, r2
 800ff5e:	d100      	bne.n	800ff62 <memcpy.isra.0+0xa>
 800ff60:	4770      	bx	lr
 800ff62:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff66:	f800 3f01 	strb.w	r3, [r0, #1]!
 800ff6a:	e7f7      	b.n	800ff5c <memcpy.isra.0+0x4>

0800ff6c <memcpy.isra.0>:
 800ff6c:	3801      	subs	r0, #1
 800ff6e:	440a      	add	r2, r1
 800ff70:	4291      	cmp	r1, r2
 800ff72:	d100      	bne.n	800ff76 <memcpy.isra.0+0xa>
 800ff74:	4770      	bx	lr
 800ff76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff7a:	f800 3f01 	strb.w	r3, [r0, #1]!
 800ff7e:	e7f7      	b.n	800ff70 <memcpy.isra.0+0x4>

0800ff80 <net_memcpy>:
 800ff80:	ea40 0301 	orr.w	r3, r0, r1
 800ff84:	079b      	lsls	r3, r3, #30
 800ff86:	b570      	push	{r4, r5, r6, lr}
 800ff88:	d108      	bne.n	800ff9c <net_memcpy+0x1c>
 800ff8a:	f022 0303 	bic.w	r3, r2, #3
 800ff8e:	1f04      	subs	r4, r0, #4
 800ff90:	18cd      	adds	r5, r1, r3
 800ff92:	42a9      	cmp	r1, r5
 800ff94:	d108      	bne.n	800ffa8 <net_memcpy+0x28>
 800ff96:	1ad2      	subs	r2, r2, r3
 800ff98:	4403      	add	r3, r0
 800ff9a:	e000      	b.n	800ff9e <net_memcpy+0x1e>
 800ff9c:	4603      	mov	r3, r0
 800ff9e:	3b01      	subs	r3, #1
 800ffa0:	440a      	add	r2, r1
 800ffa2:	4291      	cmp	r1, r2
 800ffa4:	d105      	bne.n	800ffb2 <net_memcpy+0x32>
 800ffa6:	bd70      	pop	{r4, r5, r6, pc}
 800ffa8:	f851 6b04 	ldr.w	r6, [r1], #4
 800ffac:	f844 6f04 	str.w	r6, [r4, #4]!
 800ffb0:	e7ef      	b.n	800ff92 <net_memcpy+0x12>
 800ffb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ffb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ffba:	e7f2      	b.n	800ffa2 <net_memcpy+0x22>

0800ffbc <udp_set_ip>:
 800ffbc:	2204      	movs	r2, #4
 800ffbe:	b513      	push	{r0, r1, r4, lr}
 800ffc0:	4604      	mov	r4, r0
 800ffc2:	6803      	ldr	r3, [r0, #0]
 800ffc4:	eb0d 0102 	add.w	r1, sp, r2
 800ffc8:	4808      	ldr	r0, [pc, #32]	; (800ffec <udp_set_ip+0x30>)
 800ffca:	9301      	str	r3, [sp, #4]
 800ffcc:	f7ff ffce 	bl	800ff6c <memcpy.isra.0>
 800ffd0:	6862      	ldr	r2, [r4, #4]
 800ffd2:	4b07      	ldr	r3, [pc, #28]	; (800fff0 <udp_set_ip+0x34>)
 800ffd4:	43d1      	mvns	r1, r2
 800ffd6:	6019      	str	r1, [r3, #0]
 800ffd8:	6823      	ldr	r3, [r4, #0]
 800ffda:	4013      	ands	r3, r2
 800ffdc:	4a05      	ldr	r2, [pc, #20]	; (800fff4 <udp_set_ip+0x38>)
 800ffde:	6013      	str	r3, [r2, #0]
 800ffe0:	68a2      	ldr	r2, [r4, #8]
 800ffe2:	4b05      	ldr	r3, [pc, #20]	; (800fff8 <udp_set_ip+0x3c>)
 800ffe4:	601a      	str	r2, [r3, #0]
 800ffe6:	b002      	add	sp, #8
 800ffe8:	bd10      	pop	{r4, pc}
 800ffea:	bf00      	nop
 800ffec:	20007c2a 	andcs	r7, r0, sl, lsr #24
 800fff0:	20001f40 	andcs	r1, r0, r0, asr #30
 800fff4:	20001f48 	andcs	r1, r0, r8, asr #30
 800fff8:	20001f44 	andcs	r1, r0, r4, asr #30

0800fffc <udp_bind>:
 800fffc:	4a0a      	ldr	r2, [pc, #40]	; (8010028 <udp_bind+0x2c>)
 800fffe:	4603      	mov	r3, r0
 8010000:	b510      	push	{r4, lr}
 8010002:	2000      	movs	r0, #0
 8010004:	4614      	mov	r4, r2
 8010006:	f852 1b04 	ldr.w	r1, [r2], #4
 801000a:	4299      	cmp	r1, r3
 801000c:	d008      	beq.n	8010020 <udp_bind+0x24>
 801000e:	b141      	cbz	r1, 8010022 <udp_bind+0x26>
 8010010:	3001      	adds	r0, #1
 8010012:	2808      	cmp	r0, #8
 8010014:	d1f7      	bne.n	8010006 <udp_bind+0xa>
 8010016:	4805      	ldr	r0, [pc, #20]	; (801002c <udp_bind+0x30>)
 8010018:	f003 fe2c 	bl	8013c74 <console_error>
 801001c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010020:	bd10      	pop	{r4, pc}
 8010022:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 8010026:	e7fb      	b.n	8010020 <udp_bind+0x24>
 8010028:	20001f50 	andcs	r1, r0, r0, asr pc
 801002c:	08017880 	stmdaeq	r1, {r7, fp, ip, sp, lr}

08010030 <udp_unbind>:
 8010030:	4a0c      	ldr	r2, [pc, #48]	; (8010064 <udp_unbind+0x34>)
 8010032:	2300      	movs	r3, #0
 8010034:	4611      	mov	r1, r2
 8010036:	b510      	push	{r4, lr}
 8010038:	f852 4b04 	ldr.w	r4, [r2], #4
 801003c:	4284      	cmp	r4, r0
 801003e:	d108      	bne.n	8010052 <udp_unbind+0x22>
 8010040:	2000      	movs	r0, #0
 8010042:	f640 3294 	movw	r2, #2964	; 0xb94
 8010046:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 801004a:	4353      	muls	r3, r2
 801004c:	4a06      	ldr	r2, [pc, #24]	; (8010068 <udp_unbind+0x38>)
 801004e:	50d0      	str	r0, [r2, r3]
 8010050:	bd10      	pop	{r4, pc}
 8010052:	3301      	adds	r3, #1
 8010054:	2b08      	cmp	r3, #8
 8010056:	d1ef      	bne.n	8010038 <udp_unbind+0x8>
 8010058:	4804      	ldr	r0, [pc, #16]	; (801006c <udp_unbind+0x3c>)
 801005a:	f003 fe0b 	bl	8013c74 <console_error>
 801005e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010062:	e7f5      	b.n	8010050 <udp_unbind+0x20>
 8010064:	20001f50 	andcs	r1, r0, r0, asr pc
 8010068:	20001f70 	andcs	r1, r0, r0, ror pc
 801006c:	08017885 	stmdaeq	r1, {r0, r2, r7, fp, ip, sp, lr}

08010070 <udp_recv>:
 8010070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010074:	4604      	mov	r4, r0
 8010076:	4698      	mov	r8, r3
 8010078:	f640 3394 	movw	r3, #2964	; 0xb94
 801007c:	435c      	muls	r4, r3
 801007e:	4608      	mov	r0, r1
 8010080:	4915      	ldr	r1, [pc, #84]	; (80100d8 <udp_recv+0x68>)
 8010082:	190f      	adds	r7, r1, r4
 8010084:	f8b7 c002 	ldrh.w	ip, [r7, #2]
 8010088:	5b0b      	ldrh	r3, [r1, r4]
 801008a:	4563      	cmp	r3, ip
 801008c:	d021      	beq.n	80100d2 <udp_recv+0x62>
 801008e:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 8010092:	fb03 fc0c 	mul.w	ip, r3, ip
 8010096:	eb0c 0604 	add.w	r6, ip, r4
 801009a:	440e      	add	r6, r1
 801009c:	f8b6 55ca 	ldrh.w	r5, [r6, #1482]	; 0x5ca
 80100a0:	3404      	adds	r4, #4
 80100a2:	4295      	cmp	r5, r2
 80100a4:	bf28      	it	cs
 80100a6:	4615      	movcs	r5, r2
 80100a8:	4464      	add	r4, ip
 80100aa:	462a      	mov	r2, r5
 80100ac:	4421      	add	r1, r4
 80100ae:	f7ff ff67 	bl	800ff80 <net_memcpy>
 80100b2:	f8d6 35c4 	ldr.w	r3, [r6, #1476]	; 0x5c4
 80100b6:	f8c8 3000 	str.w	r3, [r8]
 80100ba:	f8b6 25c8 	ldrh.w	r2, [r6, #1480]	; 0x5c8
 80100be:	9b06      	ldr	r3, [sp, #24]
 80100c0:	801a      	strh	r2, [r3, #0]
 80100c2:	887b      	ldrh	r3, [r7, #2]
 80100c4:	3301      	adds	r3, #1
 80100c6:	f003 0301 	and.w	r3, r3, #1
 80100ca:	807b      	strh	r3, [r7, #2]
 80100cc:	4628      	mov	r0, r5
 80100ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100d2:	2500      	movs	r5, #0
 80100d4:	e7fa      	b.n	80100cc <udp_recv+0x5c>
 80100d6:	bf00      	nop
 80100d8:	20001f70 	andcs	r1, r0, r0, ror pc

080100dc <udp_recv2>:
 80100dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100de:	f640 3594 	movw	r5, #2964	; 0xb94
 80100e2:	4368      	muls	r0, r5
 80100e4:	4c0f      	ldr	r4, [pc, #60]	; (8010124 <udp_recv2+0x48>)
 80100e6:	1827      	adds	r7, r4, r0
 80100e8:	887d      	ldrh	r5, [r7, #2]
 80100ea:	5a26      	ldrh	r6, [r4, r0]
 80100ec:	42ae      	cmp	r6, r5
 80100ee:	d017      	beq.n	8010120 <udp_recv2+0x44>
 80100f0:	f44f 6cb9 	mov.w	ip, #1480	; 0x5c8
 80100f4:	fb0c f505 	mul.w	r5, ip, r5
 80100f8:	1d06      	adds	r6, r0, #4
 80100fa:	442e      	add	r6, r5
 80100fc:	4405      	add	r5, r0
 80100fe:	4426      	add	r6, r4
 8010100:	442c      	add	r4, r5
 8010102:	600e      	str	r6, [r1, #0]
 8010104:	f8d4 15c4 	ldr.w	r1, [r4, #1476]	; 0x5c4
 8010108:	6011      	str	r1, [r2, #0]
 801010a:	f8b4 25c8 	ldrh.w	r2, [r4, #1480]	; 0x5c8
 801010e:	801a      	strh	r2, [r3, #0]
 8010110:	887b      	ldrh	r3, [r7, #2]
 8010112:	f8b4 05ca 	ldrh.w	r0, [r4, #1482]	; 0x5ca
 8010116:	3301      	adds	r3, #1
 8010118:	f003 0301 	and.w	r3, r3, #1
 801011c:	807b      	strh	r3, [r7, #2]
 801011e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010120:	2000      	movs	r0, #0
 8010122:	e7fc      	b.n	801011e <udp_recv2+0x42>
 8010124:	20001f70 	andcs	r1, r0, r0, ror pc

08010128 <udp_send>:
 8010128:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801012c:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8010260 <udp_send+0x138>
 8010130:	461c      	mov	r4, r3
 8010132:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
 8010136:	4607      	mov	r7, r0
 8010138:	4688      	mov	r8, r1
 801013a:	4616      	mov	r6, r2
 801013c:	2b00      	cmp	r3, #0
 801013e:	f000 808b 	beq.w	8010258 <udp_send+0x130>
 8010142:	1c63      	adds	r3, r4, #1
 8010144:	d141      	bne.n	80101ca <udp_send+0xa2>
 8010146:	4a47      	ldr	r2, [pc, #284]	; (8010264 <udp_send+0x13c>)
 8010148:	2307      	movs	r3, #7
 801014a:	4611      	mov	r1, r2
 801014c:	20ff      	movs	r0, #255	; 0xff
 801014e:	e001      	b.n	8010154 <udp_send+0x2c>
 8010150:	f802 0b01 	strb.w	r0, [r2], #1
 8010154:	3b01      	subs	r3, #1
 8010156:	d1fb      	bne.n	8010150 <udp_send+0x28>
 8010158:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801015c:	83cb      	strh	r3, [r1, #30]
 801015e:	840b      	strh	r3, [r1, #32]
 8010160:	2500      	movs	r5, #0
 8010162:	f8df a104 	ldr.w	sl, [pc, #260]	; 8010268 <udp_send+0x140>
 8010166:	4c3f      	ldr	r4, [pc, #252]	; (8010264 <udp_send+0x13c>)
 8010168:	f8ba 3000 	ldrh.w	r3, [sl]
 801016c:	2114      	movs	r1, #20
 801016e:	8263      	strh	r3, [r4, #18]
 8010170:	f106 031c 	add.w	r3, r6, #28
 8010174:	ba5b      	rev16	r3, r3
 8010176:	f104 000e 	add.w	r0, r4, #14
 801017a:	8223      	strh	r3, [r4, #16]
 801017c:	8325      	strh	r5, [r4, #24]
 801017e:	f001 fc9e 	bl	8011abe <net_chksum>
 8010182:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
 8010186:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 801018a:	ba5b      	rev16	r3, r3
 801018c:	8463      	strh	r3, [r4, #34]	; 0x22
 801018e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8010192:	4632      	mov	r2, r6
 8010194:	ba5b      	rev16	r3, r3
 8010196:	84a3      	strh	r3, [r4, #36]	; 0x24
 8010198:	f106 0308 	add.w	r3, r6, #8
 801019c:	ba5b      	rev16	r3, r3
 801019e:	bf28      	it	cs
 80101a0:	f44f 62b8 	movcs.w	r2, #1472	; 0x5c0
 80101a4:	4641      	mov	r1, r8
 80101a6:	8320      	strh	r0, [r4, #24]
 80101a8:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 80101ac:	84e3      	strh	r3, [r4, #38]	; 0x26
 80101ae:	f7ff fee7 	bl	800ff80 <net_memcpy>
 80101b2:	4620      	mov	r0, r4
 80101b4:	f106 012a 	add.w	r1, r6, #42	; 0x2a
 80101b8:	f005 f924 	bl	8015404 <emac_eth_send>
 80101bc:	f8ba 3000 	ldrh.w	r3, [sl]
 80101c0:	4628      	mov	r0, r5
 80101c2:	3301      	adds	r3, #1
 80101c4:	f8aa 3000 	strh.w	r3, [sl]
 80101c8:	e037      	b.n	801023a <udp_send+0x112>
 80101ca:	4b28      	ldr	r3, [pc, #160]	; (801026c <udp_send+0x144>)
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	43a3      	bics	r3, r4
 80101d0:	d10f      	bne.n	80101f2 <udp_send+0xca>
 80101d2:	2307      	movs	r3, #7
 80101d4:	21ff      	movs	r1, #255	; 0xff
 80101d6:	4a23      	ldr	r2, [pc, #140]	; (8010264 <udp_send+0x13c>)
 80101d8:	e001      	b.n	80101de <udp_send+0xb6>
 80101da:	f802 1b01 	strb.w	r1, [r2], #1
 80101de:	3b01      	subs	r3, #1
 80101e0:	d1fb      	bne.n	80101da <udp_send+0xb2>
 80101e2:	2204      	movs	r2, #4
 80101e4:	4822      	ldr	r0, [pc, #136]	; (8010270 <udp_send+0x148>)
 80101e6:	eb0d 0102 	add.w	r1, sp, r2
 80101ea:	9401      	str	r4, [sp, #4]
 80101ec:	f7ff febe 	bl	800ff6c <memcpy.isra.0>
 80101f0:	e7b6      	b.n	8010160 <udp_send+0x38>
 80101f2:	f004 03e0 	and.w	r3, r4, #224	; 0xe0
 80101f6:	2be0      	cmp	r3, #224	; 0xe0
 80101f8:	d10e      	bne.n	8010218 <udp_send+0xf0>
 80101fa:	491e      	ldr	r1, [pc, #120]	; (8010274 <udp_send+0x14c>)
 80101fc:	f3c4 2306 	ubfx	r3, r4, #8, #7
 8010200:	70cb      	strb	r3, [r1, #3]
 8010202:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8010206:	710b      	strb	r3, [r1, #4]
 8010208:	f3c4 6307 	ubfx	r3, r4, #24, #8
 801020c:	2206      	movs	r2, #6
 801020e:	4815      	ldr	r0, [pc, #84]	; (8010264 <udp_send+0x13c>)
 8010210:	714b      	strb	r3, [r1, #5]
 8010212:	f7ff feab 	bl	800ff6c <memcpy.isra.0>
 8010216:	e7e4      	b.n	80101e2 <udp_send+0xba>
 8010218:	4b17      	ldr	r3, [pc, #92]	; (8010278 <udp_send+0x150>)
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	43a3      	bics	r3, r4
 801021e:	d00f      	beq.n	8010240 <udp_send+0x118>
 8010220:	4d16      	ldr	r5, [pc, #88]	; (801027c <udp_send+0x154>)
 8010222:	4910      	ldr	r1, [pc, #64]	; (8010264 <udp_send+0x13c>)
 8010224:	6828      	ldr	r0, [r5, #0]
 8010226:	f001 f915 	bl	8011454 <arp_cache_lookup>
 801022a:	682b      	ldr	r3, [r5, #0]
 801022c:	4298      	cmp	r0, r3
 801022e:	d0d8      	beq.n	80101e2 <udp_send+0xba>
 8010230:	4813      	ldr	r0, [pc, #76]	; (8010280 <udp_send+0x158>)
 8010232:	f003 fd1f 	bl	8013c74 <console_error>
 8010236:	f06f 0002 	mvn.w	r0, #2
 801023a:	b002      	add	sp, #8
 801023c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010240:	4620      	mov	r0, r4
 8010242:	4908      	ldr	r1, [pc, #32]	; (8010264 <udp_send+0x13c>)
 8010244:	f001 f906 	bl	8011454 <arp_cache_lookup>
 8010248:	42a0      	cmp	r0, r4
 801024a:	d0ca      	beq.n	80101e2 <udp_send+0xba>
 801024c:	480d      	ldr	r0, [pc, #52]	; (8010284 <udp_send+0x15c>)
 801024e:	f003 fd11 	bl	8013c74 <console_error>
 8010252:	f06f 0001 	mvn.w	r0, #1
 8010256:	e7f0      	b.n	801023a <udp_send+0x112>
 8010258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801025c:	e7ed      	b.n	801023a <udp_send+0x112>
 801025e:	bf00      	nop
 8010260:	20001f50 	andcs	r1, r0, r0, asr pc
 8010264:	20007c10 	andcs	r7, r0, r0, lsl ip
 8010268:	20001f4c 	andcs	r1, r0, ip, asr #30
 801026c:	20001f40 	andcs	r1, r0, r0, asr #30
 8010270:	20007c2e 	andcs	r7, r0, lr, lsr #24
 8010274:	20000000 	andcs	r0, r0, r0
 8010278:	20001f48 	andcs	r1, r0, r8, asr #30
 801027c:	20001f44 	andcs	r1, r0, r4, asr #30
 8010280:	0801788d 	stmdaeq	r1, {r0, r2, r3, r7, fp, ip, sp, lr}
 8010284:	080178b3 	stmdaeq	r1, {r0, r1, r4, r5, r7, fp, ip, sp, lr}

08010288 <strlen>:
 8010288:	4603      	mov	r3, r0
 801028a:	461a      	mov	r2, r3
 801028c:	7811      	ldrb	r1, [r2, #0]
 801028e:	3301      	adds	r3, #1
 8010290:	2900      	cmp	r1, #0
 8010292:	d1fa      	bne.n	801028a <strlen+0x2>
 8010294:	1a10      	subs	r0, r2, r0
 8010296:	4770      	bx	lr

08010298 <strcmp>:
 8010298:	1e43      	subs	r3, r0, #1
 801029a:	3901      	subs	r1, #1
 801029c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80102a0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80102a4:	4290      	cmp	r0, r2
 80102a6:	d001      	beq.n	80102ac <strcmp+0x14>
 80102a8:	1a80      	subs	r0, r0, r2
 80102aa:	e001      	b.n	80102b0 <strcmp+0x18>
 80102ac:	2800      	cmp	r0, #0
 80102ae:	d1f5      	bne.n	801029c <strcmp+0x4>
 80102b0:	4770      	bx	lr

080102b2 <strcpy.isra.0>:
 80102b2:	3801      	subs	r0, #1
 80102b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80102b8:	f800 3f01 	strb.w	r3, [r0, #1]!
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d1f9      	bne.n	80102b4 <strcpy.isra.0+0x2>
 80102c0:	4770      	bx	lr

080102c2 <strcat.isra.0>:
 80102c2:	b538      	push	{r3, r4, r5, lr}
 80102c4:	4604      	mov	r4, r0
 80102c6:	460d      	mov	r5, r1
 80102c8:	f7ff ffde 	bl	8010288 <strlen>
 80102cc:	4629      	mov	r1, r5
 80102ce:	4420      	add	r0, r4
 80102d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80102d4:	f7ff bfed 	b.w	80102b2 <strcpy.isra.0>

080102d8 <MDNS::MDNS()>:
 80102d8:	b513      	push	{r0, r1, r4, lr}
 80102da:	4604      	mov	r4, r0
 80102dc:	a901      	add	r1, sp, #4
 80102de:	4804      	ldr	r0, [pc, #16]	; (80102f0 <MDNS::MDNS()+0x18>)
 80102e0:	f003 fe40 	bl	8013f64 <inet_aton>
 80102e4:	4620      	mov	r0, r4
 80102e6:	4b03      	ldr	r3, [pc, #12]	; (80102f4 <MDNS::MDNS()+0x1c>)
 80102e8:	9a01      	ldr	r2, [sp, #4]
 80102ea:	601a      	str	r2, [r3, #0]
 80102ec:	b002      	add	sp, #8
 80102ee:	bd10      	pop	{r4, pc}
 80102f0:	080178e4 	stmdaeq	r1, {r2, r5, r6, r7, fp, ip, sp, lr}
 80102f4:	20008204 	andcs	r8, r0, r4, lsl #4

080102f8 <MDNS::SetName(char const*)>:
 80102f8:	b538      	push	{r3, r4, r5, lr}
 80102fa:	4d0b      	ldr	r5, [pc, #44]	; (8010328 <MDNS::SetName(char const*)+0x30>)
 80102fc:	460c      	mov	r4, r1
 80102fe:	6828      	ldr	r0, [r5, #0]
 8010300:	b108      	cbz	r0, 8010306 <MDNS::SetName(char const*)+0xe>
 8010302:	f003 fe29 	bl	8013f58 <operator delete[](void*)>
 8010306:	4620      	mov	r0, r4
 8010308:	f7ff ffbe 	bl	8010288 <strlen>
 801030c:	3007      	adds	r0, #7
 801030e:	f003 fe27 	bl	8013f60 <operator new[](unsigned int)>
 8010312:	4621      	mov	r1, r4
 8010314:	6028      	str	r0, [r5, #0]
 8010316:	f7ff ffcc 	bl	80102b2 <strcpy.isra.0>
 801031a:	6828      	ldr	r0, [r5, #0]
 801031c:	4903      	ldr	r1, [pc, #12]	; (801032c <MDNS::SetName(char const*)+0x34>)
 801031e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010322:	f7ff bfce 	b.w	80102c2 <strcat.isra.0>
 8010326:	bf00      	nop
 8010328:	20008634 	andcs	r8, r0, r4, lsr r6
 801032c:	080178f4 	stmdaeq	r1, {r2, r4, r5, r6, r7, fp, ip, sp, lr}

08010330 <MDNS::DecodeDNSNameNotation(char const*, char*)>:
 8010330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010334:	f04f 0e00 	mov.w	lr, #0
 8010338:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
 801033c:	4675      	mov	r5, lr
 801033e:	4e1b      	ldr	r6, [pc, #108]	; (80103ac <MDNS::DecodeDNSNameNotation(char const*, char*)+0x7c>)
 8010340:	4f1b      	ldr	r7, [pc, #108]	; (80103b0 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x80>)
 8010342:	780b      	ldrb	r3, [r1, #0]
 8010344:	1c68      	adds	r0, r5, #1
 8010346:	b913      	cbnz	r3, 801034e <MDNS::DecodeDNSNameNotation(char const*, char*)+0x1e>
 8010348:	7013      	strb	r3, [r2, #0]
 801034a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801034e:	2b3f      	cmp	r3, #63	; 0x3f
 8010350:	d91c      	bls.n	801038c <MDNS::DecodeDNSNameNotation(char const*, char*)+0x5c>
 8010352:	7849      	ldrb	r1, [r1, #1]
 8010354:	ea06 2303 	and.w	r3, r6, r3, lsl #8
 8010358:	430b      	orrs	r3, r1
 801035a:	6839      	ldr	r1, [r7, #0]
 801035c:	f1be 0f00 	cmp.w	lr, #0
 8010360:	bf08      	it	eq
 8010362:	4605      	moveq	r5, r0
 8010364:	5ccc      	ldrb	r4, [r1, r3]
 8010366:	3301      	adds	r3, #1
 8010368:	4419      	add	r1, r3
 801036a:	2300      	movs	r3, #0
 801036c:	42a3      	cmp	r3, r4
 801036e:	5cc8      	ldrb	r0, [r1, r3]
 8010370:	d309      	bcc.n	8010386 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x56>
 8010372:	f04f 0e01 	mov.w	lr, #1
 8010376:	4421      	add	r1, r4
 8010378:	4414      	add	r4, r2
 801037a:	780b      	ldrb	r3, [r1, #0]
 801037c:	b10b      	cbz	r3, 8010382 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x52>
 801037e:	f804 cb01 	strb.w	ip, [r4], #1
 8010382:	4622      	mov	r2, r4
 8010384:	e7dd      	b.n	8010342 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x12>
 8010386:	54d0      	strb	r0, [r2, r3]
 8010388:	3301      	adds	r3, #1
 801038a:	e7ef      	b.n	801036c <MDNS::DecodeDNSNameNotation(char const*, char*)+0x3c>
 801038c:	4688      	mov	r8, r1
 801038e:	18d4      	adds	r4, r2, r3
 8010390:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 8010394:	f802 9b01 	strb.w	r9, [r2], #1
 8010398:	4294      	cmp	r4, r2
 801039a:	d1f9      	bne.n	8010390 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x60>
 801039c:	1c5a      	adds	r2, r3, #1
 801039e:	4411      	add	r1, r2
 80103a0:	f1be 0f00 	cmp.w	lr, #0
 80103a4:	d1e9      	bne.n	801037a <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4a>
 80103a6:	181d      	adds	r5, r3, r0
 80103a8:	e7e7      	b.n	801037a <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4a>
 80103aa:	bf00      	nop
 80103ac:	ffff3f00 			; <UNDEFINED> instruction: 0xffff3f00
 80103b0:	20008638 	andcs	r8, r0, r8, lsr r6

080103b4 <MDNS::FindFirstDotFromRight(char const*) const>:
 80103b4:	b510      	push	{r4, lr}
 80103b6:	4608      	mov	r0, r1
 80103b8:	460c      	mov	r4, r1
 80103ba:	f7ff ff65 	bl	8010288 <strlen>
 80103be:	4420      	add	r0, r4
 80103c0:	42a0      	cmp	r0, r4
 80103c2:	d903      	bls.n	80103cc <MDNS::FindFirstDotFromRight(char const*) const+0x18>
 80103c4:	f810 3901 	ldrb.w	r3, [r0], #-1
 80103c8:	2b2e      	cmp	r3, #46	; 0x2e
 80103ca:	d1f9      	bne.n	80103c0 <MDNS::FindFirstDotFromRight(char const*) const+0xc>
 80103cc:	3001      	adds	r0, #1
 80103ce:	bd10      	pop	{r4, pc}

080103d0 <MDNS::WriteDnsName(char const*, char*, bool)>:
 80103d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103d2:	4614      	mov	r4, r2
 80103d4:	460f      	mov	r7, r1
 80103d6:	1c60      	adds	r0, r4, #1
 80103d8:	463d      	mov	r5, r7
 80103da:	f817 6b01 	ldrb.w	r6, [r7], #1
 80103de:	b946      	cbnz	r6, 80103f2 <MDNS::WriteDnsName(char const*, char*, bool)+0x22>
 80103e0:	1a69      	subs	r1, r5, r1
 80103e2:	7021      	strb	r1, [r4, #0]
 80103e4:	7829      	ldrb	r1, [r5, #0]
 80103e6:	b949      	cbnz	r1, 80103fc <MDNS::WriteDnsName(char const*, char*, bool)+0x2c>
 80103e8:	b10b      	cbz	r3, 80103ee <MDNS::WriteDnsName(char const*, char*, bool)+0x1e>
 80103ea:	f800 1b01 	strb.w	r1, [r0], #1
 80103ee:	1a80      	subs	r0, r0, r2
 80103f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103f2:	2e2e      	cmp	r6, #46	; 0x2e
 80103f4:	d0f4      	beq.n	80103e0 <MDNS::WriteDnsName(char const*, char*, bool)+0x10>
 80103f6:	f800 6b01 	strb.w	r6, [r0], #1
 80103fa:	e7ed      	b.n	80103d8 <MDNS::WriteDnsName(char const*, char*, bool)+0x8>
 80103fc:	4604      	mov	r4, r0
 80103fe:	1c69      	adds	r1, r5, #1
 8010400:	e7e8      	b.n	80103d4 <MDNS::WriteDnsName(char const*, char*, bool)+0x4>
	...

08010404 <MDNS::CreateAnswerLocalIpAddress()>:
 8010404:	2384      	movs	r3, #132	; 0x84
 8010406:	b510      	push	{r4, lr}
 8010408:	4c0f      	ldr	r4, [pc, #60]	; (8010448 <MDNS::CreateAnswerLocalIpAddress()+0x44>)
 801040a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801040e:	80e3      	strh	r3, [r4, #6]
 8010410:	2300      	movs	r3, #0
 8010412:	490e      	ldr	r1, [pc, #56]	; (801044c <MDNS::CreateAnswerLocalIpAddress()+0x48>)
 8010414:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8010418:	6809      	ldr	r1, [r1, #0]
 801041a:	f104 0210 	add.w	r2, r4, #16
 801041e:	2301      	movs	r3, #1
 8010420:	f7ff ffd6 	bl	80103d0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8010424:	490a      	ldr	r1, [pc, #40]	; (8010450 <MDNS::CreateAnswerLocalIpAddress()+0x4c>)
 8010426:	1813      	adds	r3, r2, r0
 8010428:	5011      	str	r1, [r2, r0]
 801042a:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 801042e:	605a      	str	r2, [r3, #4]
 8010430:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010434:	811a      	strh	r2, [r3, #8]
 8010436:	4a07      	ldr	r2, [pc, #28]	; (8010454 <MDNS::CreateAnswerLocalIpAddress()+0x50>)
 8010438:	6812      	ldr	r2, [r2, #0]
 801043a:	6952      	ldr	r2, [r2, #20]
 801043c:	f8c3 200a 	str.w	r2, [r3, #10]
 8010440:	1b1b      	subs	r3, r3, r4
 8010442:	330a      	adds	r3, #10
 8010444:	6023      	str	r3, [r4, #0]
 8010446:	bd10      	pop	{r4, pc}
 8010448:	20008208 	andcs	r8, r0, r8, lsl #4
 801044c:	20008634 	andcs	r8, r0, r4, lsr r6
 8010450:	01800100 	orreq	r0, r0, r0, lsl #2
 8010454:	2000863c 	andcs	r8, r0, ip, lsr r6

08010458 <MDNS::Start()>:
 8010458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801045a:	4c1d      	ldr	r4, [pc, #116]	; (80104d0 <MDNS::Start()+0x78>)
 801045c:	f241 41e9 	movw	r1, #5353	; 0x14e9
 8010460:	4605      	mov	r5, r0
 8010462:	6820      	ldr	r0, [r4, #0]
 8010464:	f000 fb25 	bl	8010ab2 <Network::Begin(unsigned short)>
 8010468:	4e1a      	ldr	r6, [pc, #104]	; (80104d4 <MDNS::Start()+0x7c>)
 801046a:	4f1b      	ldr	r7, [pc, #108]	; (80104d8 <MDNS::Start()+0x80>)
 801046c:	4601      	mov	r1, r0
 801046e:	6030      	str	r0, [r6, #0]
 8010470:	683a      	ldr	r2, [r7, #0]
 8010472:	6820      	ldr	r0, [r4, #0]
 8010474:	f000 fb2e 	bl	8010ad4 <Network::JoinGroup(int, unsigned int)>
 8010478:	4b18      	ldr	r3, [pc, #96]	; (80104dc <MDNS::Start()+0x84>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	b923      	cbnz	r3, 8010488 <MDNS::Start()+0x30>
 801047e:	6821      	ldr	r1, [r4, #0]
 8010480:	4628      	mov	r0, r5
 8010482:	3120      	adds	r1, #32
 8010484:	f7ff ff38 	bl	80102f8 <MDNS::SetName(char const*)>
 8010488:	4628      	mov	r0, r5
 801048a:	f7ff ffbb 	bl	8010404 <MDNS::CreateAnswerLocalIpAddress()>
 801048e:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8010492:	4913      	ldr	r1, [pc, #76]	; (80104e0 <MDNS::Start()+0x88>)
 8010494:	7830      	ldrb	r0, [r6, #0]
 8010496:	f831 2b04 	ldrh.w	r2, [r1], #4
 801049a:	9300      	str	r3, [sp, #0]
 801049c:	683b      	ldr	r3, [r7, #0]
 801049e:	f7ff fe43 	bl	8010128 <udp_send>
 80104a2:	233f      	movs	r3, #63	; 0x3f
 80104a4:	6820      	ldr	r0, [r4, #0]
 80104a6:	4c0f      	ldr	r4, [pc, #60]	; (80104e4 <MDNS::Start()+0x8c>)
 80104a8:	f100 0260 	add.w	r2, r0, #96	; 0x60
 80104ac:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80104b0:	b929      	cbnz	r1, 80104be <MDNS::Start()+0x66>
 80104b2:	4413      	add	r3, r2
 80104b4:	429a      	cmp	r2, r3
 80104b6:	d006      	beq.n	80104c6 <MDNS::Start()+0x6e>
 80104b8:	f802 1b01 	strb.w	r1, [r2], #1
 80104bc:	e7fa      	b.n	80104b4 <MDNS::Start()+0x5c>
 80104be:	3b01      	subs	r3, #1
 80104c0:	f802 1b01 	strb.w	r1, [r2], #1
 80104c4:	d1f2      	bne.n	80104ac <MDNS::Start()+0x54>
 80104c6:	2300      	movs	r3, #0
 80104c8:	f880 309f 	strb.w	r3, [r0, #159]	; 0x9f
 80104cc:	b003      	add	sp, #12
 80104ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104d0:	2000863c 	andcs	r8, r0, ip, lsr r6
 80104d4:	20000008 	andcs	r0, r0, r8
 80104d8:	20008204 	andcs	r8, r0, r4, lsl #4
 80104dc:	20008634 	andcs	r8, r0, r4, lsr r6
 80104e0:	20008208 	andcs	r8, r0, r8, lsl #4
 80104e4:	080178f4 	stmdaeq	r1, {r2, r4, r5, r6, r7, fp, ip, sp, lr}

080104e8 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>:
 80104e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104ec:	4c1b      	ldr	r4, [pc, #108]	; (801055c <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x74>)
 80104ee:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 80104f2:	eb04 1501 	add.w	r5, r4, r1, lsl #4
 80104f6:	2300      	movs	r3, #0
 80104f8:	f854 100c 	ldr.w	r1, [r4, ip]
 80104fc:	4607      	mov	r7, r0
 80104fe:	f7ff ff67 	bl	80103d0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8010502:	2301      	movs	r3, #1
 8010504:	7bac      	ldrb	r4, [r5, #14]
 8010506:	4616      	mov	r6, r2
 8010508:	4915      	ldr	r1, [pc, #84]	; (8010560 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x78>)
 801050a:	4402      	add	r2, r0
 801050c:	4815      	ldr	r0, [pc, #84]	; (8010564 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x7c>)
 801050e:	429c      	cmp	r4, r3
 8010510:	bf18      	it	ne
 8010512:	4601      	movne	r1, r0
 8010514:	4638      	mov	r0, r7
 8010516:	f7ff ff5b 	bl	80103d0 <MDNS::WriteDnsName(char const*, char*, bool)>
 801051a:	4b13      	ldr	r3, [pc, #76]	; (8010568 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x80>)
 801051c:	1814      	adds	r4, r2, r0
 801051e:	5013      	str	r3, [r2, r0]
 8010520:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8010524:	6063      	str	r3, [r4, #4]
 8010526:	4b11      	ldr	r3, [pc, #68]	; (801056c <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x84>)
 8010528:	f8d3 8000 	ldr.w	r8, [r3]
 801052c:	4640      	mov	r0, r8
 801052e:	f7ff feab 	bl	8010288 <strlen>
 8010532:	f100 0308 	add.w	r3, r0, #8
 8010536:	ba5b      	rev16	r3, r3
 8010538:	8123      	strh	r3, [r4, #8]
 801053a:	2300      	movs	r3, #0
 801053c:	f8c4 300a 	str.w	r3, [r4, #10]
 8010540:	89ab      	ldrh	r3, [r5, #12]
 8010542:	f104 0210 	add.w	r2, r4, #16
 8010546:	ba5b      	rev16	r3, r3
 8010548:	81e3      	strh	r3, [r4, #14]
 801054a:	4641      	mov	r1, r8
 801054c:	2301      	movs	r3, #1
 801054e:	4638      	mov	r0, r7
 8010550:	f7ff ff3e 	bl	80103d0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8010554:	4410      	add	r0, r2
 8010556:	1b80      	subs	r0, r0, r6
 8010558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801055c:	2000840c 	andcs	r8, r0, ip, lsl #8
 8010560:	080178f0 	stmdaeq	r1, {r4, r5, r6, r7, fp, ip, sp, lr}
 8010564:	0801790d 	stmdaeq	r1, {r0, r2, r3, r8, fp, ip, sp, lr}
 8010568:	01802100 	orreq	r2, r0, r0, lsl #2
 801056c:	20008634 	andcs	r8, r0, r4, lsr r6

08010570 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>:
 8010570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010574:	4e19      	ldr	r6, [pc, #100]	; (80105dc <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x6c>)
 8010576:	010f      	lsls	r7, r1, #4
 8010578:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 801057c:	2300      	movs	r3, #0
 801057e:	59f1      	ldr	r1, [r6, r7]
 8010580:	4604      	mov	r4, r0
 8010582:	f7ff ff25 	bl	80103d0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8010586:	2301      	movs	r3, #1
 8010588:	7bae      	ldrb	r6, [r5, #14]
 801058a:	4690      	mov	r8, r2
 801058c:	4914      	ldr	r1, [pc, #80]	; (80105e0 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x70>)
 801058e:	4402      	add	r2, r0
 8010590:	4814      	ldr	r0, [pc, #80]	; (80105e4 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x74>)
 8010592:	429e      	cmp	r6, r3
 8010594:	bf18      	it	ne
 8010596:	4601      	movne	r1, r0
 8010598:	4620      	mov	r0, r4
 801059a:	f7ff ff19 	bl	80103d0 <MDNS::WriteDnsName(char const*, char*, bool)>
 801059e:	4b12      	ldr	r3, [pc, #72]	; (80105e8 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x78>)
 80105a0:	1816      	adds	r6, r2, r0
 80105a2:	5013      	str	r3, [r2, r0]
 80105a4:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 80105a8:	68a8      	ldr	r0, [r5, #8]
 80105aa:	6073      	str	r3, [r6, #4]
 80105ac:	f106 040b 	add.w	r4, r6, #11
 80105b0:	b938      	cbnz	r0, 80105c2 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x52>
 80105b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80105b6:	72b0      	strb	r0, [r6, #10]
 80105b8:	8133      	strh	r3, [r6, #8]
 80105ba:	eba4 0008 	sub.w	r0, r4, r8
 80105be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105c2:	f7ff fe61 	bl	8010288 <strlen>
 80105c6:	4607      	mov	r7, r0
 80105c8:	1c43      	adds	r3, r0, #1
 80105ca:	72b0      	strb	r0, [r6, #10]
 80105cc:	ba5b      	rev16	r3, r3
 80105ce:	4620      	mov	r0, r4
 80105d0:	68a9      	ldr	r1, [r5, #8]
 80105d2:	8133      	strh	r3, [r6, #8]
 80105d4:	f7ff fe6d 	bl	80102b2 <strcpy.isra.0>
 80105d8:	443c      	add	r4, r7
 80105da:	e7ee      	b.n	80105ba <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x4a>
 80105dc:	2000840c 	andcs	r8, r0, ip, lsl #8
 80105e0:	080178f0 	stmdaeq	r1, {r4, r5, r6, r7, fp, ip, sp, lr}
 80105e4:	0801790d 	stmdaeq	r1, {r0, r2, r3, r8, fp, ip, sp, lr}
 80105e8:	01801000 	orreq	r1, r0, r0

080105ec <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>:
 80105ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105f0:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8010654 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x68>
 80105f4:	ea4f 1901 	mov.w	r9, r1, lsl #4
 80105f8:	eb08 1501 	add.w	r5, r8, r1, lsl #4
 80105fc:	6869      	ldr	r1, [r5, #4]
 80105fe:	2301      	movs	r3, #1
 8010600:	4607      	mov	r7, r0
 8010602:	f7ff fee5 	bl	80103d0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8010606:	4b14      	ldr	r3, [pc, #80]	; (8010658 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x6c>)
 8010608:	f858 8009 	ldr.w	r8, [r8, r9]
 801060c:	5013      	str	r3, [r2, r0]
 801060e:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8010612:	1816      	adds	r6, r2, r0
 8010614:	6073      	str	r3, [r6, #4]
 8010616:	4640      	mov	r0, r8
 8010618:	4614      	mov	r4, r2
 801061a:	f7ff fe35 	bl	8010288 <strlen>
 801061e:	f100 030d 	add.w	r3, r0, #13
 8010622:	ba5b      	rev16	r3, r3
 8010624:	4641      	mov	r1, r8
 8010626:	8133      	strh	r3, [r6, #8]
 8010628:	f106 020a 	add.w	r2, r6, #10
 801062c:	2300      	movs	r3, #0
 801062e:	4638      	mov	r0, r7
 8010630:	f7ff fece 	bl	80103d0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8010634:	2301      	movs	r3, #1
 8010636:	4402      	add	r2, r0
 8010638:	7bad      	ldrb	r5, [r5, #14]
 801063a:	4808      	ldr	r0, [pc, #32]	; (801065c <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x70>)
 801063c:	4908      	ldr	r1, [pc, #32]	; (8010660 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x74>)
 801063e:	429d      	cmp	r5, r3
 8010640:	bf18      	it	ne
 8010642:	4601      	movne	r1, r0
 8010644:	4638      	mov	r0, r7
 8010646:	f7ff fec3 	bl	80103d0 <MDNS::WriteDnsName(char const*, char*, bool)>
 801064a:	4410      	add	r0, r2
 801064c:	1b00      	subs	r0, r0, r4
 801064e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010652:	bf00      	nop
 8010654:	2000840c 	andcs	r8, r0, ip, lsl #8
 8010658:	01000c00 	tsteq	r0, r0, lsl #24
 801065c:	0801790d 	stmdaeq	r1, {r0, r2, r3, r8, fp, ip, sp, lr}
 8010660:	080178f0 	stmdaeq	r1, {r4, r5, r6, r7, fp, ip, sp, lr}

08010664 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>:
 8010664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010666:	460f      	mov	r7, r1
 8010668:	2301      	movs	r3, #1
 801066a:	490f      	ldr	r1, [pc, #60]	; (80106a8 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x44>)
 801066c:	4606      	mov	r6, r0
 801066e:	f7ff feaf 	bl	80103d0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8010672:	4b0e      	ldr	r3, [pc, #56]	; (80106ac <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x48>)
 8010674:	490e      	ldr	r1, [pc, #56]	; (80106b0 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x4c>)
 8010676:	5013      	str	r3, [r2, r0]
 8010678:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 801067c:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8010680:	684f      	ldr	r7, [r1, #4]
 8010682:	1815      	adds	r5, r2, r0
 8010684:	606b      	str	r3, [r5, #4]
 8010686:	4638      	mov	r0, r7
 8010688:	4614      	mov	r4, r2
 801068a:	f7ff fdfd 	bl	8010288 <strlen>
 801068e:	1c83      	adds	r3, r0, #2
 8010690:	ba5b      	rev16	r3, r3
 8010692:	812b      	strh	r3, [r5, #8]
 8010694:	f105 020a 	add.w	r2, r5, #10
 8010698:	2301      	movs	r3, #1
 801069a:	4639      	mov	r1, r7
 801069c:	4630      	mov	r0, r6
 801069e:	f7ff fe97 	bl	80103d0 <MDNS::WriteDnsName(char const*, char*, bool)>
 80106a2:	4410      	add	r0, r2
 80106a4:	1b00      	subs	r0, r0, r4
 80106a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106a8:	080178fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, fp, ip, sp, lr}
 80106ac:	01000c00 	tsteq	r0, r0, lsl #24
 80106b0:	2000840c 	andcs	r8, r0, ip, lsl #8

080106b4 <MDNS::CreateMDNSMessage(unsigned int)>:
 80106b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106b6:	2384      	movs	r3, #132	; 0x84
 80106b8:	4d19      	ldr	r5, [pc, #100]	; (8010720 <MDNS::CreateMDNSMessage(unsigned int)+0x6c>)
 80106ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80106be:	80eb      	strh	r3, [r5, #6]
 80106c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80106c4:	f105 0410 	add.w	r4, r5, #16
 80106c8:	e9c5 2302 	strd	r2, r3, [r5, #8]
 80106cc:	4622      	mov	r2, r4
 80106ce:	4606      	mov	r6, r0
 80106d0:	460f      	mov	r7, r1
 80106d2:	f7ff ff09 	bl	80104e8 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>
 80106d6:	4404      	add	r4, r0
 80106d8:	4622      	mov	r2, r4
 80106da:	4639      	mov	r1, r7
 80106dc:	4630      	mov	r0, r6
 80106de:	f7ff ff47 	bl	8010570 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>
 80106e2:	4404      	add	r4, r0
 80106e4:	4622      	mov	r2, r4
 80106e6:	4639      	mov	r1, r7
 80106e8:	4630      	mov	r0, r6
 80106ea:	f7ff ffbb 	bl	8010664 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>
 80106ee:	4404      	add	r4, r0
 80106f0:	4622      	mov	r2, r4
 80106f2:	4639      	mov	r1, r7
 80106f4:	4630      	mov	r0, r6
 80106f6:	f7ff ff79 	bl	80105ec <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>
 80106fa:	4a0a      	ldr	r2, [pc, #40]	; (8010724 <MDNS::CreateMDNSMessage(unsigned int)+0x70>)
 80106fc:	4404      	add	r4, r0
 80106fe:	f852 3b10 	ldr.w	r3, [r2], #16
 8010702:	1e60      	subs	r0, r4, #1
 8010704:	3b0c      	subs	r3, #12
 8010706:	4619      	mov	r1, r3
 8010708:	3901      	subs	r1, #1
 801070a:	d204      	bcs.n	8010716 <MDNS::CreateMDNSMessage(unsigned int)+0x62>
 801070c:	441c      	add	r4, r3
 801070e:	4b06      	ldr	r3, [pc, #24]	; (8010728 <MDNS::CreateMDNSMessage(unsigned int)+0x74>)
 8010710:	1ae4      	subs	r4, r4, r3
 8010712:	602c      	str	r4, [r5, #0]
 8010714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010716:	f812 6b01 	ldrb.w	r6, [r2], #1
 801071a:	f800 6f01 	strb.w	r6, [r0, #1]!
 801071e:	e7f3      	b.n	8010708 <MDNS::CreateMDNSMessage(unsigned int)+0x54>
 8010720:	20008430 	andcs	r8, r0, r0, lsr r4
 8010724:	20008208 	andcs	r8, r0, r8, lsl #4
 8010728:	20008434 	andcs	r8, r0, r4, lsr r4

0801072c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>:
 801072c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010730:	4d40      	ldr	r5, [pc, #256]	; (8010834 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x108>)
 8010732:	b085      	sub	sp, #20
 8010734:	682c      	ldr	r4, [r5, #0]
 8010736:	4680      	mov	r8, r0
 8010738:	460f      	mov	r7, r1
 801073a:	4616      	mov	r6, r2
 801073c:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 8010740:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8010744:	b11c      	cbz	r4, 801074e <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x22>
 8010746:	692a      	ldr	r2, [r5, #16]
 8010748:	2a00      	cmp	r2, #0
 801074a:	d16e      	bne.n	801082a <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xfe>
 801074c:	2401      	movs	r4, #1
 801074e:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 8010752:	ea4f 1904 	mov.w	r9, r4, lsl #4
 8010756:	8193      	strh	r3, [r2, #12]
 8010758:	f882 b00e 	strb.w	fp, [r2, #14]
 801075c:	2f00      	cmp	r7, #0
 801075e:	d154      	bne.n	801080a <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xde>
 8010760:	4b35      	ldr	r3, [pc, #212]	; (8010838 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10c>)
 8010762:	6818      	ldr	r0, [r3, #0]
 8010764:	3020      	adds	r0, #32
 8010766:	f7ff fd8f 	bl	8010288 <strlen>
 801076a:	4607      	mov	r7, r0
 801076c:	4630      	mov	r0, r6
 801076e:	f7ff fd8b 	bl	8010288 <strlen>
 8010772:	4438      	add	r0, r7
 8010774:	3001      	adds	r0, #1
 8010776:	f003 fbf3 	bl	8013f60 <operator new[](unsigned int)>
 801077a:	4b2f      	ldr	r3, [pc, #188]	; (8010838 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10c>)
 801077c:	f845 0009 	str.w	r0, [r5, r9]
 8010780:	6819      	ldr	r1, [r3, #0]
 8010782:	3120      	adds	r1, #32
 8010784:	f7ff fd95 	bl	80102b2 <strcpy.isra.0>
 8010788:	f855 0009 	ldr.w	r0, [r5, r9]
 801078c:	4631      	mov	r1, r6
 801078e:	f7ff fd98 	bl	80102c2 <strcat.isra.0>
 8010792:	4631      	mov	r1, r6
 8010794:	4640      	mov	r0, r8
 8010796:	f7ff fe0d 	bl	80103b4 <MDNS::FindFirstDotFromRight(char const*) const>
 801079a:	eb05 0709 	add.w	r7, r5, r9
 801079e:	4605      	mov	r5, r0
 80107a0:	f7ff fd72 	bl	8010288 <strlen>
 80107a4:	300d      	adds	r0, #13
 80107a6:	f003 fbdb 	bl	8013f60 <operator new[](unsigned int)>
 80107aa:	4629      	mov	r1, r5
 80107ac:	6078      	str	r0, [r7, #4]
 80107ae:	f7ff fd80 	bl	80102b2 <strcpy.isra.0>
 80107b2:	4922      	ldr	r1, [pc, #136]	; (801083c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x110>)
 80107b4:	6878      	ldr	r0, [r7, #4]
 80107b6:	f7ff fd84 	bl	80102c2 <strcat.isra.0>
 80107ba:	4921      	ldr	r1, [pc, #132]	; (8010840 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x114>)
 80107bc:	4b21      	ldr	r3, [pc, #132]	; (8010844 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x118>)
 80107be:	6878      	ldr	r0, [r7, #4]
 80107c0:	f1bb 0f01 	cmp.w	fp, #1
 80107c4:	bf18      	it	ne
 80107c6:	4619      	movne	r1, r3
 80107c8:	f7ff fd7b 	bl	80102c2 <strcat.isra.0>
 80107cc:	f1ba 0f00 	cmp.w	sl, #0
 80107d0:	d009      	beq.n	80107e6 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xba>
 80107d2:	4650      	mov	r0, sl
 80107d4:	f7ff fd58 	bl	8010288 <strlen>
 80107d8:	3001      	adds	r0, #1
 80107da:	f003 fbc1 	bl	8013f60 <operator new[](unsigned int)>
 80107de:	4651      	mov	r1, sl
 80107e0:	60b8      	str	r0, [r7, #8]
 80107e2:	f7ff fd66 	bl	80102b2 <strcpy.isra.0>
 80107e6:	4621      	mov	r1, r4
 80107e8:	4640      	mov	r0, r8
 80107ea:	f7ff ff63 	bl	80106b4 <MDNS::CreateMDNSMessage(unsigned int)>
 80107ee:	f241 43e9 	movw	r3, #5353	; 0x14e9
 80107f2:	4915      	ldr	r1, [pc, #84]	; (8010848 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x11c>)
 80107f4:	4815      	ldr	r0, [pc, #84]	; (801084c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x120>)
 80107f6:	f831 2b04 	ldrh.w	r2, [r1], #4
 80107fa:	9300      	str	r3, [sp, #0]
 80107fc:	4b14      	ldr	r3, [pc, #80]	; (8010850 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x124>)
 80107fe:	7800      	ldrb	r0, [r0, #0]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	f7ff fc91 	bl	8010128 <udp_send>
 8010806:	2001      	movs	r0, #1
 8010808:	e010      	b.n	801082c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x100>
 801080a:	4638      	mov	r0, r7
 801080c:	f7ff fd3c 	bl	8010288 <strlen>
 8010810:	9003      	str	r0, [sp, #12]
 8010812:	4630      	mov	r0, r6
 8010814:	f7ff fd38 	bl	8010288 <strlen>
 8010818:	9b03      	ldr	r3, [sp, #12]
 801081a:	4418      	add	r0, r3
 801081c:	3001      	adds	r0, #1
 801081e:	f003 fb9f 	bl	8013f60 <operator new[](unsigned int)>
 8010822:	4639      	mov	r1, r7
 8010824:	f845 0009 	str.w	r0, [r5, r9]
 8010828:	e7ac      	b.n	8010784 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x58>
 801082a:	2000      	movs	r0, #0
 801082c:	b005      	add	sp, #20
 801082e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010832:	bf00      	nop
 8010834:	2000840c 	andcs	r8, r0, ip, lsl #8
 8010838:	2000863c 	andcs	r8, r0, ip, lsr r6
 801083c:	080166c7 	stmdaeq	r1, {r0, r1, r2, r6, r7, r9, sl, sp, lr}
 8010840:	080178f0 	stmdaeq	r1, {r4, r5, r6, r7, fp, ip, sp, lr}
 8010844:	0801790d 	stmdaeq	r1, {r0, r2, r3, r8, fp, ip, sp, lr}
 8010848:	20008430 	andcs	r8, r0, r0, lsr r4
 801084c:	20000008 	andcs	r0, r0, r8
 8010850:	20008204 	andcs	r8, r0, r4, lsl #4

08010854 <MDNS::HandleRequest(unsigned short)>:
 8010854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010858:	4605      	mov	r5, r0
 801085a:	2700      	movs	r7, #0
 801085c:	f04f 080c 	mov.w	r8, #12
 8010860:	b0c5      	sub	sp, #276	; 0x114
 8010862:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8010924 <MDNS::HandleRequest(unsigned short)+0xd0>
 8010866:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 8010928 <MDNS::HandleRequest(unsigned short)+0xd4>
 801086a:	9103      	str	r1, [sp, #12]
 801086c:	9b03      	ldr	r3, [sp, #12]
 801086e:	42bb      	cmp	r3, r7
 8010870:	d802      	bhi.n	8010878 <MDNS::HandleRequest(unsigned short)+0x24>
 8010872:	b045      	add	sp, #276	; 0x114
 8010874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010878:	f8da 1000 	ldr.w	r1, [sl]
 801087c:	aa04      	add	r2, sp, #16
 801087e:	4441      	add	r1, r8
 8010880:	4628      	mov	r0, r5
 8010882:	f7ff fd55 	bl	8010330 <MDNS::DecodeDNSNameNotation(char const*, char*)>
 8010886:	f8da 2000 	ldr.w	r2, [sl]
 801088a:	4440      	add	r0, r8
 801088c:	1813      	adds	r3, r2, r0
 801088e:	885b      	ldrh	r3, [r3, #2]
 8010890:	f100 0804 	add.w	r8, r0, #4
 8010894:	ba5b      	rev16	r3, r3
 8010896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801089a:	2b01      	cmp	r3, #1
 801089c:	d13d      	bne.n	801091a <MDNS::HandleRequest(unsigned short)+0xc6>
 801089e:	5a14      	ldrh	r4, [r2, r0]
 80108a0:	4b22      	ldr	r3, [pc, #136]	; (801092c <MDNS::HandleRequest(unsigned short)+0xd8>)
 80108a2:	ba64      	rev16	r4, r4
 80108a4:	6818      	ldr	r0, [r3, #0]
 80108a6:	a904      	add	r1, sp, #16
 80108a8:	b2a4      	uxth	r4, r4
 80108aa:	f7ff fcf5 	bl	8010298 <strcmp>
 80108ae:	b968      	cbnz	r0, 80108cc <MDNS::HandleRequest(unsigned short)+0x78>
 80108b0:	2c01      	cmp	r4, #1
 80108b2:	d10b      	bne.n	80108cc <MDNS::HandleRequest(unsigned short)+0x78>
 80108b4:	f241 43e9 	movw	r3, #5353	; 0x14e9
 80108b8:	491d      	ldr	r1, [pc, #116]	; (8010930 <MDNS::HandleRequest(unsigned short)+0xdc>)
 80108ba:	481e      	ldr	r0, [pc, #120]	; (8010934 <MDNS::HandleRequest(unsigned short)+0xe0>)
 80108bc:	f831 2b04 	ldrh.w	r2, [r1], #4
 80108c0:	9300      	str	r3, [sp, #0]
 80108c2:	4b1d      	ldr	r3, [pc, #116]	; (8010938 <MDNS::HandleRequest(unsigned short)+0xe4>)
 80108c4:	7800      	ldrb	r0, [r0, #0]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	f7ff fc2e 	bl	8010128 <udp_send>
 80108cc:	481b      	ldr	r0, [pc, #108]	; (801093c <MDNS::HandleRequest(unsigned short)+0xe8>)
 80108ce:	a904      	add	r1, sp, #16
 80108d0:	f7ff fce2 	bl	8010298 <strcmp>
 80108d4:	f04f 0900 	mov.w	r9, #0
 80108d8:	4e19      	ldr	r6, [pc, #100]	; (8010940 <MDNS::HandleRequest(unsigned short)+0xec>)
 80108da:	9002      	str	r0, [sp, #8]
 80108dc:	6833      	ldr	r3, [r6, #0]
 80108de:	b1c3      	cbz	r3, 8010912 <MDNS::HandleRequest(unsigned short)+0xbe>
 80108e0:	9b02      	ldr	r3, [sp, #8]
 80108e2:	b123      	cbz	r3, 80108ee <MDNS::HandleRequest(unsigned short)+0x9a>
 80108e4:	6870      	ldr	r0, [r6, #4]
 80108e6:	a904      	add	r1, sp, #16
 80108e8:	f7ff fcd6 	bl	8010298 <strcmp>
 80108ec:	b988      	cbnz	r0, 8010912 <MDNS::HandleRequest(unsigned short)+0xbe>
 80108ee:	2c0c      	cmp	r4, #12
 80108f0:	d10f      	bne.n	8010912 <MDNS::HandleRequest(unsigned short)+0xbe>
 80108f2:	4649      	mov	r1, r9
 80108f4:	4628      	mov	r0, r5
 80108f6:	f7ff fedd 	bl	80106b4 <MDNS::CreateMDNSMessage(unsigned int)>
 80108fa:	f241 43e9 	movw	r3, #5353	; 0x14e9
 80108fe:	480d      	ldr	r0, [pc, #52]	; (8010934 <MDNS::HandleRequest(unsigned short)+0xe0>)
 8010900:	9300      	str	r3, [sp, #0]
 8010902:	4b0d      	ldr	r3, [pc, #52]	; (8010938 <MDNS::HandleRequest(unsigned short)+0xe4>)
 8010904:	f8bb 2000 	ldrh.w	r2, [fp]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	490e      	ldr	r1, [pc, #56]	; (8010944 <MDNS::HandleRequest(unsigned short)+0xf0>)
 801090c:	7800      	ldrb	r0, [r0, #0]
 801090e:	f7ff fc0b 	bl	8010128 <udp_send>
 8010912:	3610      	adds	r6, #16
 8010914:	f1b9 0f00 	cmp.w	r9, #0
 8010918:	d001      	beq.n	801091e <MDNS::HandleRequest(unsigned short)+0xca>
 801091a:	3701      	adds	r7, #1
 801091c:	e7a6      	b.n	801086c <MDNS::HandleRequest(unsigned short)+0x18>
 801091e:	f04f 0901 	mov.w	r9, #1
 8010922:	e7db      	b.n	80108dc <MDNS::HandleRequest(unsigned short)+0x88>
 8010924:	20008638 	andcs	r8, r0, r8, lsr r6
 8010928:	20008430 	andcs	r8, r0, r0, lsr r4
 801092c:	20008634 	andcs	r8, r0, r4, lsr r6
 8010930:	20008208 	andcs	r8, r0, r8, lsl #4
 8010934:	20000008 	andcs	r0, r0, r8
 8010938:	20008204 	andcs	r8, r0, r4, lsl #4
 801093c:	080178fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, fp, ip, sp, lr}
 8010940:	2000840c 	andcs	r8, r0, ip, lsl #8
 8010944:	20008434 	andcs	r8, r0, r4, lsr r4

08010948 <MDNS::Parse()>:
 8010948:	4b08      	ldr	r3, [pc, #32]	; (801096c <MDNS::Parse()+0x24>)
 801094a:	681a      	ldr	r2, [r3, #0]
 801094c:	8853      	ldrh	r3, [r2, #2]
 801094e:	ba5b      	rev16	r3, r3
 8010950:	b299      	uxth	r1, r3
 8010952:	041b      	lsls	r3, r3, #16
 8010954:	d408      	bmi.n	8010968 <MDNS::Parse()+0x20>
 8010956:	0b89      	lsrs	r1, r1, #14
 8010958:	d106      	bne.n	8010968 <MDNS::Parse()+0x20>
 801095a:	8891      	ldrh	r1, [r2, #4]
 801095c:	b28b      	uxth	r3, r1
 801095e:	b11b      	cbz	r3, 8010968 <MDNS::Parse()+0x20>
 8010960:	ba49      	rev16	r1, r1
 8010962:	b289      	uxth	r1, r1
 8010964:	f7ff bf76 	b.w	8010854 <MDNS::HandleRequest(unsigned short)>
 8010968:	4770      	bx	lr
 801096a:	bf00      	nop
 801096c:	20008638 	andcs	r8, r0, r8, lsr r6

08010970 <MDNS::Run()>:
 8010970:	b538      	push	{r3, r4, r5, lr}
 8010972:	4d0c      	ldr	r5, [pc, #48]	; (80109a4 <MDNS::Run()+0x34>)
 8010974:	4604      	mov	r4, r0
 8010976:	480c      	ldr	r0, [pc, #48]	; (80109a8 <MDNS::Run()+0x38>)
 8010978:	462b      	mov	r3, r5
 801097a:	4a0c      	ldr	r2, [pc, #48]	; (80109ac <MDNS::Run()+0x3c>)
 801097c:	490c      	ldr	r1, [pc, #48]	; (80109b0 <MDNS::Run()+0x40>)
 801097e:	7800      	ldrb	r0, [r0, #0]
 8010980:	f7ff fbac 	bl	80100dc <udp_recv2>
 8010984:	4b0b      	ldr	r3, [pc, #44]	; (80109b4 <MDNS::Run()+0x44>)
 8010986:	882a      	ldrh	r2, [r5, #0]
 8010988:	8018      	strh	r0, [r3, #0]
 801098a:	f241 43e9 	movw	r3, #5353	; 0x14e9
 801098e:	429a      	cmp	r2, r3
 8010990:	d106      	bne.n	80109a0 <MDNS::Run()+0x30>
 8010992:	280c      	cmp	r0, #12
 8010994:	d904      	bls.n	80109a0 <MDNS::Run()+0x30>
 8010996:	4620      	mov	r0, r4
 8010998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801099c:	f7ff bfd4 	b.w	8010948 <MDNS::Parse()>
 80109a0:	bd38      	pop	{r3, r4, r5, pc}
 80109a2:	bf00      	nop
 80109a4:	20008200 	andcs	r8, r0, r0, lsl #4
 80109a8:	20000008 	andcs	r0, r0, r8
 80109ac:	200081fc 	strdcs	r8, [r0], -ip
 80109b0:	20008638 	andcs	r8, r0, r8, lsr r6
 80109b4:	2000842c 	andcs	r8, r0, ip, lsr #8

080109b8 <MDNS::Print()>:
 80109b8:	b510      	push	{r4, lr}
 80109ba:	4816      	ldr	r0, [pc, #88]	; (8010a14 <MDNS::Print()+0x5c>)
 80109bc:	f7f8 faf0 	bl	8008fa0 <printf>
 80109c0:	4b15      	ldr	r3, [pc, #84]	; (8010a18 <MDNS::Print()+0x60>)
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	3301      	adds	r3, #1
 80109c6:	d104      	bne.n	80109d2 <MDNS::Print()+0x1a>
 80109c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109cc:	4813      	ldr	r0, [pc, #76]	; (8010a1c <MDNS::Print()+0x64>)
 80109ce:	f7f8 bae7 	b.w	8008fa0 <printf>
 80109d2:	4b13      	ldr	r3, [pc, #76]	; (8010a20 <MDNS::Print()+0x68>)
 80109d4:	4c13      	ldr	r4, [pc, #76]	; (8010a24 <MDNS::Print()+0x6c>)
 80109d6:	6819      	ldr	r1, [r3, #0]
 80109d8:	4813      	ldr	r0, [pc, #76]	; (8010a28 <MDNS::Print()+0x70>)
 80109da:	f7f8 fae1 	bl	8008fa0 <printf>
 80109de:	6823      	ldr	r3, [r4, #0]
 80109e0:	b14b      	cbz	r3, 80109f6 <MDNS::Print()+0x3e>
 80109e2:	4a12      	ldr	r2, [pc, #72]	; (8010a2c <MDNS::Print()+0x74>)
 80109e4:	68a3      	ldr	r3, [r4, #8]
 80109e6:	6861      	ldr	r1, [r4, #4]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	bf08      	it	eq
 80109ec:	4613      	moveq	r3, r2
 80109ee:	4810      	ldr	r0, [pc, #64]	; (8010a30 <MDNS::Print()+0x78>)
 80109f0:	89a2      	ldrh	r2, [r4, #12]
 80109f2:	f7f8 fad5 	bl	8008fa0 <printf>
 80109f6:	6923      	ldr	r3, [r4, #16]
 80109f8:	b15b      	cbz	r3, 8010a12 <MDNS::Print()+0x5a>
 80109fa:	69a3      	ldr	r3, [r4, #24]
 80109fc:	4a0b      	ldr	r2, [pc, #44]	; (8010a2c <MDNS::Print()+0x74>)
 80109fe:	6961      	ldr	r1, [r4, #20]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	bf08      	it	eq
 8010a04:	4613      	moveq	r3, r2
 8010a06:	480a      	ldr	r0, [pc, #40]	; (8010a30 <MDNS::Print()+0x78>)
 8010a08:	8ba2      	ldrh	r2, [r4, #28]
 8010a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a0e:	f7f8 bac7 	b.w	8008fa0 <printf>
 8010a12:	bd10      	pop	{r4, pc}
 8010a14:	08017918 	stmdaeq	r1, {r3, r4, r8, fp, ip, sp, lr}
 8010a18:	20000008 	andcs	r0, r0, r8
 8010a1c:	0801791e 	stmdaeq	r1, {r1, r2, r3, r4, r8, fp, ip, sp, lr}
 8010a20:	20008634 	andcs	r8, r0, r4, lsr r6
 8010a24:	2000840c 	andcs	r8, r0, ip, lsl #8
 8010a28:	0801792c 	stmdaeq	r1, {r2, r3, r5, r8, fp, ip, sp, lr}
 8010a2c:	08016440 	stmdaeq	r1, {r6, sl, sp, lr}
 8010a30:	08017938 	stmdaeq	r1, {r3, r4, r5, r8, fp, ip, sp, lr}

08010a34 <strncpy.constprop.0.isra.0>:
 8010a34:	233f      	movs	r3, #63	; 0x3f
 8010a36:	3901      	subs	r1, #1
 8010a38:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010a3c:	b92a      	cbnz	r2, 8010a4a <strncpy.constprop.0.isra.0+0x16>
 8010a3e:	4403      	add	r3, r0
 8010a40:	4298      	cmp	r0, r3
 8010a42:	d006      	beq.n	8010a52 <strncpy.constprop.0.isra.0+0x1e>
 8010a44:	f800 2b01 	strb.w	r2, [r0], #1
 8010a48:	e7fa      	b.n	8010a40 <strncpy.constprop.0.isra.0+0xc>
 8010a4a:	3b01      	subs	r3, #1
 8010a4c:	f800 2b01 	strb.w	r2, [r0], #1
 8010a50:	d1f2      	bne.n	8010a38 <strncpy.constprop.0.isra.0+0x4>
 8010a52:	4770      	bx	lr

08010a54 <Network::Network()>:
 8010a54:	4a11      	ldr	r2, [pc, #68]	; (8010a9c <Network::Network()+0x48>)
 8010a56:	2300      	movs	r3, #0
 8010a58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010a5c:	6010      	str	r0, [r2, #0]
 8010a5e:	2201      	movs	r2, #1
 8010a60:	e9c0 2100 	strd	r2, r1, [r0]
 8010a64:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010a68:	2200      	movs	r2, #0
 8010a6a:	e9c0 332e 	strd	r3, r3, [r0, #184]	; 0xb8
 8010a6e:	e9c0 3330 	strd	r3, r3, [r0, #192]	; 0xc0
 8010a72:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8010a76:	490a      	ldr	r1, [pc, #40]	; (8010aa0 <Network::Network()+0x4c>)
 8010a78:	6102      	str	r2, [r0, #16]
 8010a7a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8010a7e:	61c3      	str	r3, [r0, #28]
 8010a80:	f880 3020 	strb.w	r3, [r0, #32]
 8010a84:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8010a88:	f100 02a5 	add.w	r2, r0, #165	; 0xa5
 8010a8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a90:	f802 3f01 	strb.w	r3, [r2, #1]!
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d1f9      	bne.n	8010a8c <Network::Network()+0x38>
 8010a98:	4770      	bx	lr
 8010a9a:	bf00      	nop
 8010a9c:	2000863c 	andcs	r8, r0, ip, lsr r6
 8010aa0:	08017943 	stmdaeq	r1, {r0, r1, r6, r8, fp, ip, sp, lr}

08010aa4 <Network::Shutdown()>:
 8010aa4:	b508      	push	{r3, lr}
 8010aa6:	f001 fcad 	bl	8012404 <network::display_emac_shutdown()>
 8010aaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010aae:	f7f6 bb9f 	b.w	80071f0 <net_shutdown>

08010ab2 <Network::Begin(unsigned short)>:
 8010ab2:	4608      	mov	r0, r1
 8010ab4:	f7ff baa2 	b.w	800fffc <udp_bind>

08010ab8 <Network::End(unsigned short)>:
 8010ab8:	4608      	mov	r0, r1
 8010aba:	f7ff bab9 	b.w	8010030 <udp_unbind>

08010abe <Network::MacAddressCopyTo(unsigned char*)>:
 8010abe:	f100 039f 	add.w	r3, r0, #159	; 0x9f
 8010ac2:	3901      	subs	r1, #1
 8010ac4:	30a5      	adds	r0, #165	; 0xa5
 8010ac6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8010aca:	4283      	cmp	r3, r0
 8010acc:	f801 2f01 	strb.w	r2, [r1, #1]!
 8010ad0:	d1f9      	bne.n	8010ac6 <Network::MacAddressCopyTo(unsigned char*)+0x8>
 8010ad2:	4770      	bx	lr

08010ad4 <Network::JoinGroup(int, unsigned int)>:
 8010ad4:	4610      	mov	r0, r2
 8010ad6:	f000 bf79 	b.w	80119cc <igmp_join>

08010ada <Network::LeaveGroup(int, unsigned int)>:
 8010ada:	4610      	mov	r0, r2
 8010adc:	f000 bfa2 	b.w	8011a24 <igmp_leave>

08010ae0 <Network::SetDefaultIp()>:
 8010ae0:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8010ae4:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
 8010ae8:	041b      	lsls	r3, r3, #16
 8010aea:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010aee:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
 8010af2:	3302      	adds	r3, #2
 8010af4:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8010af8:	22ff      	movs	r2, #255	; 0xff
 8010afa:	6143      	str	r3, [r0, #20]
 8010afc:	e9c0 3206 	strd	r3, r2, [r0, #24]
 8010b00:	4770      	bx	lr
	...

08010b04 <Network::Init(NetworkParamsStore*)>:
 8010b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b08:	b0a5      	sub	sp, #148	; 0x94
 8010b0a:	4604      	mov	r4, r0
 8010b0c:	a80b      	add	r0, sp, #44	; 0x2c
 8010b0e:	f000 fa45 	bl	8010f9c <NetworkParams::NetworkParams(NetworkParamsStore*)>
 8010b12:	a80b      	add	r0, sp, #44	; 0x2c
 8010b14:	f000 fa4e 	bl	8010fb4 <NetworkParams::Load()>
 8010b18:	b110      	cbz	r0, 8010b20 <Network::Init(NetworkParamsStore*)+0x1c>
 8010b1a:	a80b      	add	r0, sp, #44	; 0x2c
 8010b1c:	f000 fc27 	bl	801136e <NetworkParams::Dump()>
 8010b20:	f001 fc58 	bl	80123d4 <network::display_emac_start()>
 8010b24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b26:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
 8010b2a:	9308      	str	r3, [sp, #32]
 8010b2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010b2e:	4628      	mov	r0, r5
 8010b30:	9309      	str	r3, [sp, #36]	; 0x24
 8010b32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010b34:	f104 0620 	add.w	r6, r4, #32
 8010b38:	930a      	str	r3, [sp, #40]	; 0x28
 8010b3a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8010b3e:	7163      	strb	r3, [r4, #5]
 8010b40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b42:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 8010b46:	bf18      	it	ne
 8010b48:	f8dd 2085 	ldrne.w	r2, [sp, #133]	; 0x85
 8010b4c:	061b      	lsls	r3, r3, #24
 8010b4e:	bf54      	ite	pl
 8010b50:	2300      	movpl	r3, #0
 8010b52:	f8dd 3089 	ldrmi.w	r3, [sp, #137]	; 0x89
 8010b56:	60e2      	str	r2, [r4, #12]
 8010b58:	6123      	str	r3, [r4, #16]
 8010b5a:	f004 ffcb 	bl	8015af4 <emac_start(unsigned char*)>
 8010b5e:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	f040 80bf 	bne.w	8010ce6 <Network::Init(NetworkParamsStore*)+0x1e2>
 8010b68:	497e      	ldr	r1, [pc, #504]	; (8010d64 <Network::Init(NetworkParamsStore*)+0x260>)
 8010b6a:	f104 001f 	add.w	r0, r4, #31
 8010b6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010b72:	1c5f      	adds	r7, r3, #1
 8010b74:	2a00      	cmp	r2, #0
 8010b76:	f040 80b2 	bne.w	8010cde <Network::Init(NetworkParamsStore*)+0x1da>
 8010b7a:	f894 20a3 	ldrb.w	r2, [r4, #163]	; 0xa3
 8010b7e:	18e1      	adds	r1, r4, r3
 8010b80:	0910      	lsrs	r0, r2, #4
 8010b82:	2a9f      	cmp	r2, #159	; 0x9f
 8010b84:	f002 020f 	and.w	r2, r2, #15
 8010b88:	bf94      	ite	ls
 8010b8a:	3030      	addls	r0, #48	; 0x30
 8010b8c:	3037      	addhi	r0, #55	; 0x37
 8010b8e:	2a09      	cmp	r2, #9
 8010b90:	bf94      	ite	ls
 8010b92:	3230      	addls	r2, #48	; 0x30
 8010b94:	3237      	addhi	r2, #55	; 0x37
 8010b96:	4427      	add	r7, r4
 8010b98:	f881 0020 	strb.w	r0, [r1, #32]
 8010b9c:	f887 2020 	strb.w	r2, [r7, #32]
 8010ba0:	f894 20a4 	ldrb.w	r2, [r4, #164]	; 0xa4
 8010ba4:	f103 0e02 	add.w	lr, r3, #2
 8010ba8:	0910      	lsrs	r0, r2, #4
 8010baa:	2a9f      	cmp	r2, #159	; 0x9f
 8010bac:	f002 020f 	and.w	r2, r2, #15
 8010bb0:	bf94      	ite	ls
 8010bb2:	3030      	addls	r0, #48	; 0x30
 8010bb4:	3037      	addhi	r0, #55	; 0x37
 8010bb6:	f103 0c03 	add.w	ip, r3, #3
 8010bba:	2a09      	cmp	r2, #9
 8010bbc:	eb04 070e 	add.w	r7, r4, lr
 8010bc0:	f887 0020 	strb.w	r0, [r7, #32]
 8010bc4:	bf94      	ite	ls
 8010bc6:	3230      	addls	r2, #48	; 0x30
 8010bc8:	3237      	addhi	r2, #55	; 0x37
 8010bca:	eb04 000c 	add.w	r0, r4, ip
 8010bce:	f880 2020 	strb.w	r2, [r0, #32]
 8010bd2:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
 8010bd6:	1d1f      	adds	r7, r3, #4
 8010bd8:	0910      	lsrs	r0, r2, #4
 8010bda:	2a9f      	cmp	r2, #159	; 0x9f
 8010bdc:	f002 020f 	and.w	r2, r2, #15
 8010be0:	bf94      	ite	ls
 8010be2:	3030      	addls	r0, #48	; 0x30
 8010be4:	3037      	addhi	r0, #55	; 0x37
 8010be6:	3305      	adds	r3, #5
 8010be8:	2a09      	cmp	r2, #9
 8010bea:	4423      	add	r3, r4
 8010bec:	4427      	add	r7, r4
 8010bee:	bf94      	ite	ls
 8010bf0:	3230      	addls	r2, #48	; 0x30
 8010bf2:	3237      	addhi	r2, #55	; 0x37
 8010bf4:	f887 0020 	strb.w	r0, [r7, #32]
 8010bf8:	f883 2020 	strb.w	r2, [r3, #32]
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	f881 3026 	strb.w	r3, [r1, #38]	; 0x26
 8010c02:	f000 ff75 	bl	8011af0 <net::link_register_read()>
 8010c06:	7963      	ldrb	r3, [r4, #5]
 8010c08:	6020      	str	r0, [r4, #0]
 8010c0a:	2800      	cmp	r0, #0
 8010c0c:	f040 8095 	bne.w	8010d3a <Network::Init(NetworkParamsStore*)+0x236>
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	f040 80a3 	bne.w	8010d5c <Network::Init(NetworkParamsStore*)+0x258>
 8010c16:	9b08      	ldr	r3, [sp, #32]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d16d      	bne.n	8010cf8 <Network::Init(NetworkParamsStore*)+0x1f4>
 8010c1c:	4620      	mov	r0, r4
 8010c1e:	f7ff ff5f 	bl	8010ae0 <Network::SetDefaultIp()>
 8010c22:	6963      	ldr	r3, [r4, #20]
 8010c24:	69e2      	ldr	r2, [r4, #28]
 8010c26:	9308      	str	r3, [sp, #32]
 8010c28:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
 8010c2c:	f104 0805 	add.w	r8, r4, #5
 8010c30:	f104 0907 	add.w	r9, r4, #7
 8010c34:	4643      	mov	r3, r8
 8010c36:	4632      	mov	r2, r6
 8010c38:	4628      	mov	r0, r5
 8010c3a:	f8cd 9000 	str.w	r9, [sp]
 8010c3e:	a908      	add	r1, sp, #32
 8010c40:	f7f6 fa86 	bl	8007150 <net_init>
 8010c44:	79e3      	ldrb	r3, [r4, #7]
 8010c46:	b113      	cbz	r3, 8010c4e <Network::Init(NetworkParamsStore*)+0x14a>
 8010c48:	2004      	movs	r0, #4
 8010c4a:	f001 fbe1 	bl	8012410 <network::display_dhcp_status(network::dhcp::ClientStatus)>
 8010c4e:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8010c52:	f89d a08d 	ldrb.w	sl, [sp, #141]	; 0x8d
 8010c56:	9304      	str	r3, [sp, #16]
 8010c58:	233c      	movs	r3, #60	; 0x3c
 8010c5a:	fb03 f30a 	mul.w	r3, r3, sl
 8010c5e:	4f42      	ldr	r7, [pc, #264]	; (8010d68 <Network::Init(NetworkParamsStore*)+0x264>)
 8010c60:	f8df b108 	ldr.w	fp, [pc, #264]	; 8010d6c <Network::Init(NetworkParamsStore*)+0x268>
 8010c64:	9303      	str	r3, [sp, #12]
 8010c66:	79e3      	ldrb	r3, [r4, #7]
 8010c68:	b373      	cbz	r3, 8010cc8 <Network::Init(NetworkParamsStore*)+0x1c4>
 8010c6a:	f1ba 0f00 	cmp.w	sl, #0
 8010c6e:	d02b      	beq.n	8010cc8 <Network::Init(NetworkParamsStore*)+0x1c4>
 8010c70:	9b04      	ldr	r3, [sp, #16]
 8010c72:	b34b      	cbz	r3, 8010cc8 <Network::Init(NetworkParamsStore*)+0x1c4>
 8010c74:	2104      	movs	r1, #4
 8010c76:	6838      	ldr	r0, [r7, #0]
 8010c78:	f003 f88e 	bl	8013d98 <LedBlink::SetMode(ledblink::Mode)>
 8010c7c:	2003      	movs	r0, #3
 8010c7e:	f001 fbc7 	bl	8012410 <network::display_dhcp_status(network::dhcp::ClientStatus)>
 8010c82:	2000      	movs	r0, #0
 8010c84:	f003 faf6 	bl	8014274 <time>
 8010c88:	9005      	str	r0, [sp, #20]
 8010c8a:	2000      	movs	r0, #0
 8010c8c:	f003 faf2 	bl	8014274 <time>
 8010c90:	9b05      	ldr	r3, [sp, #20]
 8010c92:	4937      	ldr	r1, [pc, #220]	; (8010d70 <Network::Init(NetworkParamsStore*)+0x26c>)
 8010c94:	1ac0      	subs	r0, r0, r3
 8010c96:	9b03      	ldr	r3, [sp, #12]
 8010c98:	4298      	cmp	r0, r3
 8010c9a:	db35      	blt.n	8010d08 <Network::Init(NetworkParamsStore*)+0x204>
 8010c9c:	2001      	movs	r0, #1
 8010c9e:	f001 fbb7 	bl	8012410 <network::display_dhcp_status(network::dhcp::ClientStatus)>
 8010ca2:	2101      	movs	r1, #1
 8010ca4:	6838      	ldr	r0, [r7, #0]
 8010ca6:	f003 f877 	bl	8013d98 <LedBlink::SetMode(ledblink::Mode)>
 8010caa:	2301      	movs	r3, #1
 8010cac:	7163      	strb	r3, [r4, #5]
 8010cae:	2300      	movs	r3, #0
 8010cb0:	4632      	mov	r2, r6
 8010cb2:	71e3      	strb	r3, [r4, #7]
 8010cb4:	4628      	mov	r0, r5
 8010cb6:	4643      	mov	r3, r8
 8010cb8:	f8cd 9000 	str.w	r9, [sp]
 8010cbc:	a908      	add	r1, sp, #32
 8010cbe:	f7f6 fa47 	bl	8007150 <net_init>
 8010cc2:	7963      	ldrb	r3, [r4, #5]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d0ce      	beq.n	8010c66 <Network::Init(NetworkParamsStore*)+0x162>
 8010cc8:	9b08      	ldr	r3, [sp, #32]
 8010cca:	6163      	str	r3, [r4, #20]
 8010ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cce:	61e3      	str	r3, [r4, #28]
 8010cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010cd2:	61a3      	str	r3, [r4, #24]
 8010cd4:	f001 fb84 	bl	80123e0 <network::display_ip()>
 8010cd8:	b025      	add	sp, #148	; 0x94
 8010cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cde:	463b      	mov	r3, r7
 8010ce0:	f800 2f01 	strb.w	r2, [r0, #1]!
 8010ce4:	e743      	b.n	8010b6e <Network::Init(NetworkParamsStore*)+0x6a>
 8010ce6:	4630      	mov	r0, r6
 8010ce8:	f10d 0145 	add.w	r1, sp, #69	; 0x45
 8010cec:	f7ff fea2 	bl	8010a34 <strncpy.constprop.0.isra.0>
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
 8010cf6:	e784      	b.n	8010c02 <Network::Init(NetworkParamsStore*)+0xfe>
 8010cf8:	69e1      	ldr	r1, [r4, #28]
 8010cfa:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8010cfe:	4053      	eors	r3, r2
 8010d00:	420b      	tst	r3, r1
 8010d02:	bf18      	it	ne
 8010d04:	920a      	strne	r2, [sp, #40]	; 0x28
 8010d06:	e791      	b.n	8010c2c <Network::Init(NetworkParamsStore*)+0x128>
 8010d08:	683b      	ldr	r3, [r7, #0]
 8010d0a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8010d0e:	f1bc 0f00 	cmp.w	ip, #0
 8010d12:	d0ba      	beq.n	8010c8a <Network::Init(NetworkParamsStore*)+0x186>
 8010d14:	6808      	ldr	r0, [r1, #0]
 8010d16:	695a      	ldr	r2, [r3, #20]
 8010d18:	1a80      	subs	r0, r0, r2
 8010d1a:	4584      	cmp	ip, r0
 8010d1c:	d8b5      	bhi.n	8010c8a <Network::Init(NetworkParamsStore*)+0x186>
 8010d1e:	6808      	ldr	r0, [r1, #0]
 8010d20:	6158      	str	r0, [r3, #20]
 8010d22:	6918      	ldr	r0, [r3, #16]
 8010d24:	2801      	cmp	r0, #1
 8010d26:	f080 0201 	eor.w	r2, r0, #1
 8010d2a:	611a      	str	r2, [r3, #16]
 8010d2c:	bf16      	itet	ne
 8010d2e:	2301      	movne	r3, #1
 8010d30:	f8cb 0014 	streq.w	r0, [fp, #20]
 8010d34:	f8cb 3010 	strne.w	r3, [fp, #16]
 8010d38:	e7a7      	b.n	8010c8a <Network::Init(NetworkParamsStore*)+0x186>
 8010d3a:	b11b      	cbz	r3, 8010d44 <Network::Init(NetworkParamsStore*)+0x240>
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8010d42:	9308      	str	r3, [sp, #32]
 8010d44:	2300      	movs	r3, #0
 8010d46:	f88d 301f 	strb.w	r3, [sp, #31]
 8010d4a:	f10d 031f 	add.w	r3, sp, #31
 8010d4e:	4632      	mov	r2, r6
 8010d50:	4628      	mov	r0, r5
 8010d52:	9300      	str	r3, [sp, #0]
 8010d54:	a908      	add	r1, sp, #32
 8010d56:	f7f6 f9fb 	bl	8007150 <net_init>
 8010d5a:	e7b5      	b.n	8010cc8 <Network::Init(NetworkParamsStore*)+0x1c4>
 8010d5c:	2001      	movs	r0, #1
 8010d5e:	f001 fb57 	bl	8012410 <network::display_dhcp_status(network::dhcp::ClientStatus)>
 8010d62:	e763      	b.n	8010c2c <Network::Init(NetworkParamsStore*)+0x128>
 8010d64:	08017948 	stmdaeq	r1, {r3, r6, r8, fp, ip, sp, lr}
 8010d68:	20009d54 	andcs	r9, r0, r4, asr sp
 8010d6c:	40011000 	andmi	r1, r1, r0
 8010d70:	20009d6c 	andcs	r9, r0, ip, ror #26

08010d74 <Network::SetIp(unsigned int)>:
 8010d74:	7943      	ldrb	r3, [r0, #5]
 8010d76:	b570      	push	{r4, r5, r6, lr}
 8010d78:	4604      	mov	r4, r0
 8010d7a:	460d      	mov	r5, r1
 8010d7c:	2600      	movs	r6, #0
 8010d7e:	b113      	cbz	r3, 8010d86 <Network::SetIp(unsigned int)+0x12>
 8010d80:	7146      	strb	r6, [r0, #5]
 8010d82:	f7ff f88f 	bl	800fea4 <net_dhcp_release>
 8010d86:	71e6      	strb	r6, [r4, #7]
 8010d88:	b95d      	cbnz	r5, 8010da2 <Network::SetIp(unsigned int)+0x2e>
 8010d8a:	4620      	mov	r0, r4
 8010d8c:	f7ff fea8 	bl	8010ae0 <Network::SetDefaultIp()>
 8010d90:	6960      	ldr	r0, [r4, #20]
 8010d92:	f7ff f843 	bl	800fe1c <net_set_ip>
 8010d96:	f001 fb23 	bl	80123e0 <network::display_ip()>
 8010d9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010d9e:	f001 bb25 	b.w	80123ec <network::display_netmask()>
 8010da2:	4628      	mov	r0, r5
 8010da4:	f7ff f83a 	bl	800fe1c <net_set_ip>
 8010da8:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8010dac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010db0:	2800      	cmp	r0, #0
 8010db2:	d0f0      	beq.n	8010d96 <Network::SetIp(unsigned int)+0x22>
 8010db4:	6803      	ldr	r3, [r0, #0]
 8010db6:	4629      	mov	r1, r5
 8010db8:	689b      	ldr	r3, [r3, #8]
 8010dba:	4798      	blx	r3
 8010dbc:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8010dc0:	2100      	movs	r1, #0
 8010dc2:	6803      	ldr	r3, [r0, #0]
 8010dc4:	699b      	ldr	r3, [r3, #24]
 8010dc6:	4798      	blx	r3
 8010dc8:	e7e5      	b.n	8010d96 <Network::SetIp(unsigned int)+0x22>

08010dca <Network::SetNetmask(unsigned int)>:
 8010dca:	69c2      	ldr	r2, [r0, #28]
 8010dcc:	b508      	push	{r3, lr}
 8010dce:	428a      	cmp	r2, r1
 8010dd0:	d00c      	beq.n	8010dec <Network::SetNetmask(unsigned int)+0x22>
 8010dd2:	61c1      	str	r1, [r0, #28]
 8010dd4:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 8010dd8:	b110      	cbz	r0, 8010de0 <Network::SetNetmask(unsigned int)+0x16>
 8010dda:	6803      	ldr	r3, [r0, #0]
 8010ddc:	68db      	ldr	r3, [r3, #12]
 8010dde:	4798      	blx	r3
 8010de0:	f001 fafe 	bl	80123e0 <network::display_ip()>
 8010de4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010de8:	f001 bb00 	b.w	80123ec <network::display_netmask()>
 8010dec:	bd08      	pop	{r3, pc}

08010dee <Network::SetGatewayIp(unsigned int)>:
 8010dee:	b538      	push	{r3, r4, r5, lr}
 8010df0:	6983      	ldr	r3, [r0, #24]
 8010df2:	4605      	mov	r5, r0
 8010df4:	428b      	cmp	r3, r1
 8010df6:	460c      	mov	r4, r1
 8010df8:	d00d      	beq.n	8010e16 <Network::SetGatewayIp(unsigned int)+0x28>
 8010dfa:	4608      	mov	r0, r1
 8010dfc:	f7ff f81e 	bl	800fe3c <net_set_gw>
 8010e00:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
 8010e04:	b118      	cbz	r0, 8010e0e <Network::SetGatewayIp(unsigned int)+0x20>
 8010e06:	6803      	ldr	r3, [r0, #0]
 8010e08:	4621      	mov	r1, r4
 8010e0a:	691b      	ldr	r3, [r3, #16]
 8010e0c:	4798      	blx	r3
 8010e0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e12:	f001 baf1 	b.w	80123f8 <network::display_gateway()>
 8010e16:	bd38      	pop	{r3, r4, r5, pc}

08010e18 <Network::EnableDhcp()>:
 8010e18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010e1a:	4d21      	ldr	r5, [pc, #132]	; (8010ea0 <Network::EnableDhcp()+0x88>)
 8010e1c:	4604      	mov	r4, r0
 8010e1e:	682b      	ldr	r3, [r5, #0]
 8010e20:	781e      	ldrb	r6, [r3, #0]
 8010e22:	b136      	cbz	r6, 8010e32 <Network::EnableDhcp()+0x1a>
 8010e24:	2200      	movs	r2, #0
 8010e26:	2104      	movs	r1, #4
 8010e28:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8010e2c:	701a      	strb	r2, [r3, #0]
 8010e2e:	f003 ff53 	bl	8014cd8 <fwdgt_config>
 8010e32:	2001      	movs	r0, #1
 8010e34:	f001 faec 	bl	8012410 <network::display_dhcp_status(network::dhcp::ClientStatus)>
 8010e38:	1de2      	adds	r2, r4, #7
 8010e3a:	f104 0120 	add.w	r1, r4, #32
 8010e3e:	a801      	add	r0, sp, #4
 8010e40:	f7ff f804 	bl	800fe4c <net_set_dhcp>
 8010e44:	79e3      	ldrb	r3, [r4, #7]
 8010e46:	7160      	strb	r0, [r4, #5]
 8010e48:	b33b      	cbz	r3, 8010e9a <Network::EnableDhcp()+0x82>
 8010e4a:	2004      	movs	r0, #4
 8010e4c:	f001 fae0 	bl	8012410 <network::display_dhcp_status(network::dhcp::ClientStatus)>
 8010e50:	b16e      	cbz	r6, 8010e6e <Network::EnableDhcp()+0x56>
 8010e52:	2102      	movs	r1, #2
 8010e54:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8010e58:	682d      	ldr	r5, [r5, #0]
 8010e5a:	f003 ff3d 	bl	8014cd8 <fwdgt_config>
 8010e5e:	2801      	cmp	r0, #1
 8010e60:	bf0c      	ite	eq
 8010e62:	2301      	moveq	r3, #1
 8010e64:	2300      	movne	r3, #0
 8010e66:	702b      	strb	r3, [r5, #0]
 8010e68:	d101      	bne.n	8010e6e <Network::EnableDhcp()+0x56>
 8010e6a:	f003 ff25 	bl	8014cb8 <fwdgt_enable>
 8010e6e:	9b01      	ldr	r3, [sp, #4]
 8010e70:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8010e74:	6163      	str	r3, [r4, #20]
 8010e76:	9b02      	ldr	r3, [sp, #8]
 8010e78:	61e3      	str	r3, [r4, #28]
 8010e7a:	9b03      	ldr	r3, [sp, #12]
 8010e7c:	61a3      	str	r3, [r4, #24]
 8010e7e:	b118      	cbz	r0, 8010e88 <Network::EnableDhcp()+0x70>
 8010e80:	6803      	ldr	r3, [r0, #0]
 8010e82:	7961      	ldrb	r1, [r4, #5]
 8010e84:	699b      	ldr	r3, [r3, #24]
 8010e86:	4798      	blx	r3
 8010e88:	f001 faaa 	bl	80123e0 <network::display_ip()>
 8010e8c:	f001 faae 	bl	80123ec <network::display_netmask()>
 8010e90:	f001 fab2 	bl	80123f8 <network::display_gateway()>
 8010e94:	7960      	ldrb	r0, [r4, #5]
 8010e96:	b004      	add	sp, #16
 8010e98:	bd70      	pop	{r4, r5, r6, pc}
 8010e9a:	2002      	movs	r0, #2
 8010e9c:	e7d6      	b.n	8010e4c <Network::EnableDhcp()+0x34>
 8010e9e:	bf00      	nop
 8010ea0:	20009d58 	andcs	r9, r0, r8, asr sp

08010ea4 <Network::Print()>:
 8010ea4:	b530      	push	{r4, r5, lr}
 8010ea6:	4604      	mov	r4, r0
 8010ea8:	b085      	sub	sp, #20
 8010eaa:	4832      	ldr	r0, [pc, #200]	; (8010f74 <Network::Print()+0xd0>)
 8010eac:	f7f8 f878 	bl	8008fa0 <printf>
 8010eb0:	f104 0120 	add.w	r1, r4, #32
 8010eb4:	4830      	ldr	r0, [pc, #192]	; (8010f78 <Network::Print()+0xd4>)
 8010eb6:	f7f8 f873 	bl	8008fa0 <printf>
 8010eba:	68a1      	ldr	r1, [r4, #8]
 8010ebc:	f104 02a6 	add.w	r2, r4, #166	; 0xa6
 8010ec0:	482e      	ldr	r0, [pc, #184]	; (8010f7c <Network::Print()+0xd8>)
 8010ec2:	f7f8 f86d 	bl	8008fa0 <printf>
 8010ec6:	69e0      	ldr	r0, [r4, #28]
 8010ec8:	f005 f95e 	bl	8016188 <__popcountsi2>
 8010ecc:	6965      	ldr	r5, [r4, #20]
 8010ece:	9001      	str	r0, [sp, #4]
 8010ed0:	0e2b      	lsrs	r3, r5, #24
 8010ed2:	9300      	str	r3, [sp, #0]
 8010ed4:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8010ed8:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8010edc:	b2e9      	uxtb	r1, r5
 8010ede:	4828      	ldr	r0, [pc, #160]	; (8010f80 <Network::Print()+0xdc>)
 8010ee0:	f7f8 f85e 	bl	8008fa0 <printf>
 8010ee4:	69e1      	ldr	r1, [r4, #28]
 8010ee6:	4827      	ldr	r0, [pc, #156]	; (8010f84 <Network::Print()+0xe0>)
 8010ee8:	0e0b      	lsrs	r3, r1, #24
 8010eea:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8010eee:	9300      	str	r3, [sp, #0]
 8010ef0:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8010ef4:	b2c9      	uxtb	r1, r1
 8010ef6:	f7f8 f853 	bl	8008fa0 <printf>
 8010efa:	69a1      	ldr	r1, [r4, #24]
 8010efc:	4822      	ldr	r0, [pc, #136]	; (8010f88 <Network::Print()+0xe4>)
 8010efe:	0e0b      	lsrs	r3, r1, #24
 8010f00:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8010f04:	9300      	str	r3, [sp, #0]
 8010f06:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8010f0a:	b2c9      	uxtb	r1, r1
 8010f0c:	f7f8 f848 	bl	8008fa0 <printf>
 8010f10:	69e3      	ldr	r3, [r4, #28]
 8010f12:	6961      	ldr	r1, [r4, #20]
 8010f14:	481d      	ldr	r0, [pc, #116]	; (8010f8c <Network::Print()+0xe8>)
 8010f16:	ea61 0103 	orn	r1, r1, r3
 8010f1a:	0e0b      	lsrs	r3, r1, #24
 8010f1c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8010f20:	9300      	str	r3, [sp, #0]
 8010f22:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8010f26:	b2c9      	uxtb	r1, r1
 8010f28:	f7f8 f83a 	bl	8008fa0 <printf>
 8010f2c:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 8010f30:	f894 20a1 	ldrb.w	r2, [r4, #161]	; 0xa1
 8010f34:	9302      	str	r3, [sp, #8]
 8010f36:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 8010f3a:	f894 10a0 	ldrb.w	r1, [r4, #160]	; 0xa0
 8010f3e:	9301      	str	r3, [sp, #4]
 8010f40:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
 8010f44:	4812      	ldr	r0, [pc, #72]	; (8010f90 <Network::Print()+0xec>)
 8010f46:	9300      	str	r3, [sp, #0]
 8010f48:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 8010f4c:	f7f8 f828 	bl	8008fa0 <printf>
 8010f50:	4b10      	ldr	r3, [pc, #64]	; (8010f94 <Network::Print()+0xf0>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	79da      	ldrb	r2, [r3, #7]
 8010f56:	b952      	cbnz	r2, 8010f6e <Network::Print()+0xca>
 8010f58:	795b      	ldrb	r3, [r3, #5]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	bf14      	ite	ne
 8010f5e:	2144      	movne	r1, #68	; 0x44
 8010f60:	2153      	moveq	r1, #83	; 0x53
 8010f62:	480d      	ldr	r0, [pc, #52]	; (8010f98 <Network::Print()+0xf4>)
 8010f64:	b005      	add	sp, #20
 8010f66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f6a:	f7f8 b819 	b.w	8008fa0 <printf>
 8010f6e:	215a      	movs	r1, #90	; 0x5a
 8010f70:	e7f7      	b.n	8010f62 <Network::Print()+0xbe>
 8010f72:	bf00      	nop
 8010f74:	08017954 	stmdaeq	r1, {r2, r4, r6, r8, fp, ip, sp, lr}
 8010f78:	0801795d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, fp, ip, sp, lr}
 8010f7c:	0801796e 	stmdaeq	r1, {r1, r2, r3, r5, r6, r8, fp, ip, sp, lr}
 8010f80:	08017983 	stmdaeq	r1, {r0, r1, r7, r8, fp, ip, sp, lr}
 8010f84:	080179a0 	stmdaeq	r1, {r5, r7, r8, fp, ip, sp, lr}
 8010f88:	080179ba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r8, fp, ip, sp, lr}
 8010f8c:	080179d4 	stmdaeq	r1, {r2, r4, r6, r7, r8, fp, ip, sp, lr}
 8010f90:	080179ee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, r8, fp, ip, sp, lr}
 8010f94:	2000863c 	andcs	r8, r0, ip, lsr r6
 8010f98:	08017a1a 	stmdaeq	r1, {r1, r3, r4, r9, fp, ip, sp, lr}

08010f9c <NetworkParams::NetworkParams(NetworkParamsStore*)>:
 8010f9c:	b510      	push	{r4, lr}
 8010f9e:	225e      	movs	r2, #94	; 0x5e
 8010fa0:	4604      	mov	r4, r0
 8010fa2:	f840 1b04 	str.w	r1, [r0], #4
 8010fa6:	2100      	movs	r1, #0
 8010fa8:	f003 f886 	bl	80140b8 <memset>
 8010fac:	2301      	movs	r3, #1
 8010fae:	4620      	mov	r0, r4
 8010fb0:	7623      	strb	r3, [r4, #24]
 8010fb2:	bd10      	pop	{r4, pc}

08010fb4 <NetworkParams::Load()>:
 8010fb4:	b508      	push	{r3, lr}
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	4601      	mov	r1, r0
 8010fba:	6043      	str	r3, [r0, #4]
 8010fbc:	6800      	ldr	r0, [r0, #0]
 8010fbe:	b120      	cbz	r0, 8010fca <NetworkParams::Load()+0x16>
 8010fc0:	6803      	ldr	r3, [r0, #0]
 8010fc2:	3104      	adds	r1, #4
 8010fc4:	68db      	ldr	r3, [r3, #12]
 8010fc6:	4798      	blx	r3
 8010fc8:	2001      	movs	r0, #1
 8010fca:	bd08      	pop	{r3, pc}

08010fcc <NetworkParams::Load(char const*, unsigned int)>:
 8010fcc:	6803      	ldr	r3, [r0, #0]
 8010fce:	b1d3      	cbz	r3, 8011006 <NetworkParams::Load(char const*, unsigned int)+0x3a>
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010fd4:	460d      	mov	r5, r1
 8010fd6:	4616      	mov	r6, r2
 8010fd8:	4604      	mov	r4, r0
 8010fda:	6043      	str	r3, [r0, #4]
 8010fdc:	4602      	mov	r2, r0
 8010fde:	490a      	ldr	r1, [pc, #40]	; (8011008 <NetworkParams::Load(char const*, unsigned int)+0x3c>)
 8010fe0:	4668      	mov	r0, sp
 8010fe2:	f002 fa0f 	bl	8013404 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8010fe6:	4632      	mov	r2, r6
 8010fe8:	4629      	mov	r1, r5
 8010fea:	4668      	mov	r0, sp
 8010fec:	f002 fa0e 	bl	801340c <ReadConfigFile::Read(char const*, unsigned int)>
 8010ff0:	4621      	mov	r1, r4
 8010ff2:	f851 0b04 	ldr.w	r0, [r1], #4
 8010ff6:	6803      	ldr	r3, [r0, #0]
 8010ff8:	689b      	ldr	r3, [r3, #8]
 8010ffa:	4798      	blx	r3
 8010ffc:	4668      	mov	r0, sp
 8010ffe:	f002 fa04 	bl	801340a <ReadConfigFile::~ReadConfigFile()>
 8011002:	b002      	add	sp, #8
 8011004:	bd70      	pop	{r4, r5, r6, pc}
 8011006:	4770      	bx	lr
 8011008:	08011139 	stmdaeq	r1, {r0, r3, r4, r5, r8, ip}

0801100c <NetworkParams::callbackFunction(char const*)>:
 801100c:	b530      	push	{r4, r5, lr}
 801100e:	460d      	mov	r5, r1
 8011010:	b085      	sub	sp, #20
 8011012:	4604      	mov	r4, r0
 8011014:	4942      	ldr	r1, [pc, #264]	; (8011120 <NetworkParams::callbackFunction(char const*)+0x114>)
 8011016:	4628      	mov	r0, r5
 8011018:	f10d 0207 	add.w	r2, sp, #7
 801101c:	f002 fb2e 	bl	801367c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8011020:	b978      	cbnz	r0, 8011042 <NetworkParams::callbackFunction(char const*)+0x36>
 8011022:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011026:	6863      	ldr	r3, [r4, #4]
 8011028:	b142      	cbz	r2, 801103c <NetworkParams::callbackFunction(char const*)+0x30>
 801102a:	f023 0301 	bic.w	r3, r3, #1
 801102e:	3a00      	subs	r2, #0
 8011030:	bf18      	it	ne
 8011032:	2201      	movne	r2, #1
 8011034:	6063      	str	r3, [r4, #4]
 8011036:	7622      	strb	r2, [r4, #24]
 8011038:	b005      	add	sp, #20
 801103a:	bd30      	pop	{r4, r5, pc}
 801103c:	f043 0301 	orr.w	r3, r3, #1
 8011040:	e7f5      	b.n	801102e <NetworkParams::callbackFunction(char const*)+0x22>
 8011042:	4628      	mov	r0, r5
 8011044:	4937      	ldr	r1, [pc, #220]	; (8011124 <NetworkParams::callbackFunction(char const*)+0x118>)
 8011046:	f10d 0207 	add.w	r2, sp, #7
 801104a:	f002 fb17 	bl	801367c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 801104e:	b980      	cbnz	r0, 8011072 <NetworkParams::callbackFunction(char const*)+0x66>
 8011050:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011054:	6863      	ldr	r3, [r4, #4]
 8011056:	1e51      	subs	r1, r2, #1
 8011058:	2904      	cmp	r1, #4
 801105a:	bf97      	itett	ls
 801105c:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 8011060:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 8011064:	6063      	strls	r3, [r4, #4]
 8011066:	f884 2061 	strbls.w	r2, [r4, #97]	; 0x61
 801106a:	bf84      	itt	hi
 801106c:	6063      	strhi	r3, [r4, #4]
 801106e:	f884 0061 	strbhi.w	r0, [r4, #97]	; 0x61
 8011072:	4628      	mov	r0, r5
 8011074:	492c      	ldr	r1, [pc, #176]	; (8011128 <NetworkParams::callbackFunction(char const*)+0x11c>)
 8011076:	aa02      	add	r2, sp, #8
 8011078:	f002 fa78 	bl	801356c <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 801107c:	b9e8      	cbnz	r0, 80110ba <NetworkParams::callbackFunction(char const*)+0xae>
 801107e:	9a02      	ldr	r2, [sp, #8]
 8011080:	6863      	ldr	r3, [r4, #4]
 8011082:	b2d1      	uxtb	r1, r2
 8011084:	29ac      	cmp	r1, #172	; 0xac
 8011086:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801108a:	d007      	beq.n	801109c <NetworkParams::callbackFunction(char const*)+0x90>
 801108c:	29c0      	cmp	r1, #192	; 0xc0
 801108e:	d00c      	beq.n	80110aa <NetworkParams::callbackFunction(char const*)+0x9e>
 8011090:	290a      	cmp	r1, #10
 8011092:	d10d      	bne.n	80110b0 <NetworkParams::callbackFunction(char const*)+0xa4>
 8011094:	60a2      	str	r2, [r4, #8]
 8011096:	f043 0302 	orr.w	r3, r3, #2
 801109a:	e004      	b.n	80110a6 <NetworkParams::callbackFunction(char const*)+0x9a>
 801109c:	3810      	subs	r0, #16
 801109e:	280f      	cmp	r0, #15
 80110a0:	d9f8      	bls.n	8011094 <NetworkParams::callbackFunction(char const*)+0x88>
 80110a2:	f023 0302 	bic.w	r3, r3, #2
 80110a6:	6063      	str	r3, [r4, #4]
 80110a8:	e7c6      	b.n	8011038 <NetworkParams::callbackFunction(char const*)+0x2c>
 80110aa:	28a8      	cmp	r0, #168	; 0xa8
 80110ac:	d1f9      	bne.n	80110a2 <NetworkParams::callbackFunction(char const*)+0x96>
 80110ae:	e7f1      	b.n	8011094 <NetworkParams::callbackFunction(char const*)+0x88>
 80110b0:	2902      	cmp	r1, #2
 80110b2:	d0ef      	beq.n	8011094 <NetworkParams::callbackFunction(char const*)+0x88>
 80110b4:	2a00      	cmp	r2, #0
 80110b6:	d0ed      	beq.n	8011094 <NetworkParams::callbackFunction(char const*)+0x88>
 80110b8:	e7f3      	b.n	80110a2 <NetworkParams::callbackFunction(char const*)+0x96>
 80110ba:	4628      	mov	r0, r5
 80110bc:	491b      	ldr	r1, [pc, #108]	; (801112c <NetworkParams::callbackFunction(char const*)+0x120>)
 80110be:	aa02      	add	r2, sp, #8
 80110c0:	f002 fa54 	bl	801356c <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 80110c4:	b970      	cbnz	r0, 80110e4 <NetworkParams::callbackFunction(char const*)+0xd8>
 80110c6:	9a02      	ldr	r2, [sp, #8]
 80110c8:	6863      	ldr	r3, [r4, #4]
 80110ca:	b142      	cbz	r2, 80110de <NetworkParams::callbackFunction(char const*)+0xd2>
 80110cc:	ba11      	rev	r1, r2
 80110ce:	43c8      	mvns	r0, r1
 80110d0:	ea11 0150 	ands.w	r1, r1, r0, lsr #1
 80110d4:	d103      	bne.n	80110de <NetworkParams::callbackFunction(char const*)+0xd2>
 80110d6:	60e2      	str	r2, [r4, #12]
 80110d8:	f043 0304 	orr.w	r3, r3, #4
 80110dc:	e7e3      	b.n	80110a6 <NetworkParams::callbackFunction(char const*)+0x9a>
 80110de:	f023 0304 	bic.w	r3, r3, #4
 80110e2:	e7e0      	b.n	80110a6 <NetworkParams::callbackFunction(char const*)+0x9a>
 80110e4:	4628      	mov	r0, r5
 80110e6:	4912      	ldr	r1, [pc, #72]	; (8011130 <NetworkParams::callbackFunction(char const*)+0x124>)
 80110e8:	aa02      	add	r2, sp, #8
 80110ea:	f002 fa3f 	bl	801356c <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 80110ee:	b928      	cbnz	r0, 80110fc <NetworkParams::callbackFunction(char const*)+0xf0>
 80110f0:	9b02      	ldr	r3, [sp, #8]
 80110f2:	6123      	str	r3, [r4, #16]
 80110f4:	6863      	ldr	r3, [r4, #4]
 80110f6:	f043 0308 	orr.w	r3, r3, #8
 80110fa:	e7d4      	b.n	80110a6 <NetworkParams::callbackFunction(char const*)+0x9a>
 80110fc:	233f      	movs	r3, #63	; 0x3f
 80110fe:	4628      	mov	r0, r5
 8011100:	9303      	str	r3, [sp, #12]
 8011102:	490c      	ldr	r1, [pc, #48]	; (8011134 <NetworkParams::callbackFunction(char const*)+0x128>)
 8011104:	ab03      	add	r3, sp, #12
 8011106:	f104 0219 	add.w	r2, r4, #25
 801110a:	f002 f9b3 	bl	8013474 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 801110e:	2800      	cmp	r0, #0
 8011110:	d192      	bne.n	8011038 <NetworkParams::callbackFunction(char const*)+0x2c>
 8011112:	9b03      	ldr	r3, [sp, #12]
 8011114:	4423      	add	r3, r4
 8011116:	7658      	strb	r0, [r3, #25]
 8011118:	6863      	ldr	r3, [r4, #4]
 801111a:	f043 0320 	orr.w	r3, r3, #32
 801111e:	e7c2      	b.n	80110a6 <NetworkParams::callbackFunction(char const*)+0x9a>
 8011120:	08017a72 	stmdaeq	r1, {r1, r4, r5, r6, r9, fp, ip, sp, lr}
 8011124:	08017a50 	stmdaeq	r1, {r4, r6, r9, fp, ip, sp, lr}
 8011128:	08017a35 	stmdaeq	r1, {r0, r2, r4, r5, r9, fp, ip, sp, lr}
 801112c:	08017a69 	stmdaeq	r1, {r0, r3, r5, r6, r9, fp, ip, sp, lr}
 8011130:	08017a40 	stmdaeq	r1, {r6, r9, fp, ip, sp, lr}
 8011134:	08017a60 	stmdaeq	r1, {r5, r6, r9, fp, ip, sp, lr}

08011138 <NetworkParams::staticCallbackFunction(void*, char const*)>:
 8011138:	f7ff bf68 	b.w	801100c <NetworkParams::callbackFunction(char const*)>

0801113c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)>:
 801113c:	b570      	push	{r4, r5, r6, lr}
 801113e:	4604      	mov	r4, r0
 8011140:	4615      	mov	r5, r2
 8011142:	461e      	mov	r6, r3
 8011144:	b086      	sub	sp, #24
 8011146:	3004      	adds	r0, #4
 8011148:	2900      	cmp	r1, #0
 801114a:	d02b      	beq.n	80111a4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x68>
 801114c:	225e      	movs	r2, #94	; 0x5e
 801114e:	f002 ff9c 	bl	801408a <memmove>
 8011152:	462a      	mov	r2, r5
 8011154:	4633      	mov	r3, r6
 8011156:	4970      	ldr	r1, [pc, #448]	; (8011318 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1dc>)
 8011158:	a803      	add	r0, sp, #12
 801115a:	f002 f8b3 	bl	80132c4 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 801115e:	6863      	ldr	r3, [r4, #4]
 8011160:	079a      	lsls	r2, r3, #30
 8011162:	bf5f      	itttt	pl
 8011164:	4a6d      	ldrpl	r2, [pc, #436]	; (801131c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e0>)
 8011166:	6812      	ldrpl	r2, [r2, #0]
 8011168:	6952      	ldrpl	r2, [r2, #20]
 801116a:	60a2      	strpl	r2, [r4, #8]
 801116c:	075e      	lsls	r6, r3, #29
 801116e:	bf5f      	itttt	pl
 8011170:	4a6a      	ldrpl	r2, [pc, #424]	; (801131c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e0>)
 8011172:	6812      	ldrpl	r2, [r2, #0]
 8011174:	69d2      	ldrpl	r2, [r2, #28]
 8011176:	60e2      	strpl	r2, [r4, #12]
 8011178:	071d      	lsls	r5, r3, #28
 801117a:	bf58      	it	pl
 801117c:	4a67      	ldrpl	r2, [pc, #412]	; (801131c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e0>)
 801117e:	f104 0519 	add.w	r5, r4, #25
 8011182:	bf5e      	ittt	pl
 8011184:	6812      	ldrpl	r2, [r2, #0]
 8011186:	6992      	ldrpl	r2, [r2, #24]
 8011188:	6122      	strpl	r2, [r4, #16]
 801118a:	0698      	lsls	r0, r3, #26
 801118c:	d418      	bmi.n	80111c0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x84>
 801118e:	4628      	mov	r0, r5
 8011190:	223f      	movs	r2, #63	; 0x3f
 8011192:	4b62      	ldr	r3, [pc, #392]	; (801131c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e0>)
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	331f      	adds	r3, #31
 8011198:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 801119c:	b949      	cbnz	r1, 80111b2 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x76>
 801119e:	f002 ff8b 	bl	80140b8 <memset>
 80111a2:	e00a      	b.n	80111ba <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x7e>
 80111a4:	6823      	ldr	r3, [r4, #0]
 80111a6:	4601      	mov	r1, r0
 80111a8:	681a      	ldr	r2, [r3, #0]
 80111aa:	4618      	mov	r0, r3
 80111ac:	68d2      	ldr	r2, [r2, #12]
 80111ae:	4790      	blx	r2
 80111b0:	e7cf      	b.n	8011152 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x16>
 80111b2:	3a01      	subs	r2, #1
 80111b4:	f800 1b01 	strb.w	r1, [r0], #1
 80111b8:	d1ee      	bne.n	8011198 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x5c>
 80111ba:	2300      	movs	r3, #0
 80111bc:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80111c0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80111c4:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 80111c8:	7e23      	ldrb	r3, [r4, #24]
 80111ca:	42b2      	cmp	r2, r6
 80111cc:	6861      	ldr	r1, [r4, #4]
 80111ce:	d21a      	bcs.n	8011206 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xca>
 80111d0:	9803      	ldr	r0, [sp, #12]
 80111d2:	07c9      	lsls	r1, r1, #31
 80111d4:	4410      	add	r0, r2
 80111d6:	eba6 0602 	sub.w	r6, r6, r2
 80111da:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80111de:	d404      	bmi.n	80111ea <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xae>
 80111e0:	b922      	cbnz	r2, 80111ec <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xb0>
 80111e2:	9300      	str	r3, [sp, #0]
 80111e4:	4a4e      	ldr	r2, [pc, #312]	; (8011320 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e4>)
 80111e6:	4b4f      	ldr	r3, [pc, #316]	; (8011324 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e8>)
 80111e8:	e003      	b.n	80111f2 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xb6>
 80111ea:	b312      	cbz	r2, 8011232 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xf6>
 80111ec:	9300      	str	r3, [sp, #0]
 80111ee:	4a4e      	ldr	r2, [pc, #312]	; (8011328 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1ec>)
 80111f0:	4b4c      	ldr	r3, [pc, #304]	; (8011324 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e8>)
 80111f2:	4631      	mov	r1, r6
 80111f4:	f7f7 fefc 	bl	8008ff0 <snprintf>
 80111f8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80111fc:	4286      	cmp	r6, r0
 80111fe:	bfa4      	itt	ge
 8011200:	181b      	addge	r3, r3, r0
 8011202:	f8ad 3012 	strhge.w	r3, [sp, #18]
 8011206:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801120a:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 801120e:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8011212:	42b2      	cmp	r2, r6
 8011214:	6861      	ldr	r1, [r4, #4]
 8011216:	d21f      	bcs.n	8011258 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>
 8011218:	9803      	ldr	r0, [sp, #12]
 801121a:	05c9      	lsls	r1, r1, #23
 801121c:	4410      	add	r0, r2
 801121e:	eba6 0602 	sub.w	r6, r6, r2
 8011222:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8011226:	d408      	bmi.n	801123a <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xfe>
 8011228:	b94a      	cbnz	r2, 801123e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x102>
 801122a:	9300      	str	r3, [sp, #0]
 801122c:	4a3c      	ldr	r2, [pc, #240]	; (8011320 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e4>)
 801122e:	4b3f      	ldr	r3, [pc, #252]	; (801132c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f0>)
 8011230:	e008      	b.n	8011244 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x108>
 8011232:	9300      	str	r3, [sp, #0]
 8011234:	4a3e      	ldr	r2, [pc, #248]	; (8011330 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f4>)
 8011236:	4b3b      	ldr	r3, [pc, #236]	; (8011324 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e8>)
 8011238:	e7db      	b.n	80111f2 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xb6>
 801123a:	2a00      	cmp	r2, #0
 801123c:	d03c      	beq.n	80112b8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x17c>
 801123e:	9300      	str	r3, [sp, #0]
 8011240:	4a39      	ldr	r2, [pc, #228]	; (8011328 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1ec>)
 8011242:	4b3a      	ldr	r3, [pc, #232]	; (801132c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f0>)
 8011244:	4631      	mov	r1, r6
 8011246:	f7f7 fed3 	bl	8008ff0 <snprintf>
 801124a:	4286      	cmp	r6, r0
 801124c:	bfa2      	ittt	ge
 801124e:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8011252:	18c0      	addge	r0, r0, r3
 8011254:	f8ad 0012 	strhge.w	r0, [sp, #18]
 8011258:	4936      	ldr	r1, [pc, #216]	; (8011334 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f8>)
 801125a:	a803      	add	r0, sp, #12
 801125c:	f002 f8b8 	bl	80133d0 <PropertiesBuilder::AddComment(char const*)>
 8011260:	6863      	ldr	r3, [r4, #4]
 8011262:	68a2      	ldr	r2, [r4, #8]
 8011264:	4934      	ldr	r1, [pc, #208]	; (8011338 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1fc>)
 8011266:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801126a:	a803      	add	r0, sp, #12
 801126c:	f002 f86c 	bl	8013348 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 8011270:	6863      	ldr	r3, [r4, #4]
 8011272:	68e2      	ldr	r2, [r4, #12]
 8011274:	4931      	ldr	r1, [pc, #196]	; (801133c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x200>)
 8011276:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801127a:	a803      	add	r0, sp, #12
 801127c:	f002 f864 	bl	8013348 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 8011280:	6863      	ldr	r3, [r4, #4]
 8011282:	6922      	ldr	r2, [r4, #16]
 8011284:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011288:	492d      	ldr	r1, [pc, #180]	; (8011340 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x204>)
 801128a:	a803      	add	r0, sp, #12
 801128c:	f002 f85c 	bl	8013348 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 8011290:	6862      	ldr	r2, [r4, #4]
 8011292:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011296:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 801129a:	42a3      	cmp	r3, r4
 801129c:	d21e      	bcs.n	80112dc <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1a0>
 801129e:	9803      	ldr	r0, [sp, #12]
 80112a0:	0692      	lsls	r2, r2, #26
 80112a2:	4418      	add	r0, r3
 80112a4:	eba4 0403 	sub.w	r4, r4, r3
 80112a8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80112ac:	d408      	bmi.n	80112c0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x184>
 80112ae:	b943      	cbnz	r3, 80112c2 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x186>
 80112b0:	4b24      	ldr	r3, [pc, #144]	; (8011344 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x208>)
 80112b2:	4a25      	ldr	r2, [pc, #148]	; (8011348 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x20c>)
 80112b4:	9500      	str	r5, [sp, #0]
 80112b6:	e007      	b.n	80112c8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x18c>
 80112b8:	9300      	str	r3, [sp, #0]
 80112ba:	4a1d      	ldr	r2, [pc, #116]	; (8011330 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f4>)
 80112bc:	4b1b      	ldr	r3, [pc, #108]	; (801132c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f0>)
 80112be:	e7c1      	b.n	8011244 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x108>
 80112c0:	b32b      	cbz	r3, 801130e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1d2>
 80112c2:	4b20      	ldr	r3, [pc, #128]	; (8011344 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x208>)
 80112c4:	4a21      	ldr	r2, [pc, #132]	; (801134c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x210>)
 80112c6:	9500      	str	r5, [sp, #0]
 80112c8:	4621      	mov	r1, r4
 80112ca:	f7f7 fe91 	bl	8008ff0 <snprintf>
 80112ce:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80112d2:	4284      	cmp	r4, r0
 80112d4:	bfa4      	itt	ge
 80112d6:	181b      	addge	r3, r3, r0
 80112d8:	f8ad 3012 	strhge.w	r3, [sp, #18]
 80112dc:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80112e0:	b17b      	cbz	r3, 8011302 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1c6>
 80112e2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80112e6:	9b03      	ldr	r3, [sp, #12]
 80112e8:	4413      	add	r3, r2
 80112ea:	227d      	movs	r2, #125	; 0x7d
 80112ec:	f803 2c01 	strb.w	r2, [r3, #-1]
 80112f0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80112f4:	9903      	ldr	r1, [sp, #12]
 80112f6:	54ca      	strb	r2, [r1, r3]
 80112f8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80112fc:	3301      	adds	r3, #1
 80112fe:	f8ad 3012 	strh.w	r3, [sp, #18]
 8011302:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8011306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011308:	601a      	str	r2, [r3, #0]
 801130a:	b006      	add	sp, #24
 801130c:	bd70      	pop	{r4, r5, r6, pc}
 801130e:	4b0d      	ldr	r3, [pc, #52]	; (8011344 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x208>)
 8011310:	4a0f      	ldr	r2, [pc, #60]	; (8011350 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x214>)
 8011312:	9500      	str	r5, [sp, #0]
 8011314:	e7d8      	b.n	80112c8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x18c>
 8011316:	bf00      	nop
 8011318:	08017a7b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r9, fp, ip, sp, lr}
 801131c:	2000863c 	andcs	r8, r0, ip, lsr r6
 8011320:	08016691 	stmdaeq	r1, {r0, r4, r7, r9, sl, sp, lr}
 8011324:	08017a72 	stmdaeq	r1, {r1, r4, r5, r6, r9, fp, ip, sp, lr}
 8011328:	08016688 	stmdaeq	r1, {r3, r7, r9, sl, sp, lr}
 801132c:	08017a50 	stmdaeq	r1, {r4, r6, r9, fp, ip, sp, lr}
 8011330:	08016692 	stmdaeq	r1, {r1, r4, r7, r9, sl, sp, lr}
 8011334:	08017a2b 	stmdaeq	r1, {r0, r1, r3, r5, r9, fp, ip, sp, lr}
 8011338:	08017a35 	stmdaeq	r1, {r0, r2, r4, r5, r9, fp, ip, sp, lr}
 801133c:	08017a69 	stmdaeq	r1, {r0, r3, r5, r6, r9, fp, ip, sp, lr}
 8011340:	08017a40 	stmdaeq	r1, {r6, r9, fp, ip, sp, lr}
 8011344:	08017a60 	stmdaeq	r1, {r5, r6, r9, fp, ip, sp, lr}
 8011348:	080166a4 	stmdaeq	r1, {r2, r5, r7, r9, sl, sp, lr}
 801134c:	08016699 	stmdaeq	r1, {r0, r3, r4, r7, r9, sl, sp, lr}
 8011350:	080166a5 	stmdaeq	r1, {r0, r2, r5, r7, r9, sl, sp, lr}

08011354 <NetworkParams::Save(char*, unsigned int, unsigned int&)>:
 8011354:	b513      	push	{r0, r1, r4, lr}
 8011356:	6804      	ldr	r4, [r0, #0]
 8011358:	b914      	cbnz	r4, 8011360 <NetworkParams::Save(char*, unsigned int, unsigned int&)+0xc>
 801135a:	601c      	str	r4, [r3, #0]
 801135c:	b002      	add	sp, #8
 801135e:	bd10      	pop	{r4, pc}
 8011360:	9300      	str	r3, [sp, #0]
 8011362:	4613      	mov	r3, r2
 8011364:	460a      	mov	r2, r1
 8011366:	2100      	movs	r1, #0
 8011368:	f7ff fee8 	bl	801113c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)>
 801136c:	e7f6      	b.n	801135c <NetworkParams::Save(char*, unsigned int, unsigned int&)+0x8>

0801136e <NetworkParams::Dump()>:
 801136e:	4770      	bx	lr

08011370 <memcpy.isra.0>:
 8011370:	3801      	subs	r0, #1
 8011372:	440a      	add	r2, r1
 8011374:	4291      	cmp	r1, r2
 8011376:	d100      	bne.n	801137a <memcpy.isra.0+0xa>
 8011378:	4770      	bx	lr
 801137a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801137e:	f800 3f01 	strb.w	r3, [r0, #1]!
 8011382:	e7f7      	b.n	8011374 <memcpy.isra.0+0x4>

08011384 <arp_announce>:
 8011384:	4803      	ldr	r0, [pc, #12]	; (8011394 <arp_announce+0x10>)
 8011386:	69c3      	ldr	r3, [r0, #28]
 8011388:	b113      	cbz	r3, 8011390 <arp_announce+0xc>
 801138a:	212a      	movs	r1, #42	; 0x2a
 801138c:	f004 b83a 	b.w	8015404 <emac_eth_send>
 8011390:	4770      	bx	lr
 8011392:	bf00      	nop
 8011394:	20008640 	andcs	r8, r0, r0, asr #12

08011398 <arp_handle_request>:
 8011398:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801139a:	2204      	movs	r2, #4
 801139c:	f100 0126 	add.w	r1, r0, #38	; 0x26
 80113a0:	4604      	mov	r4, r0
 80113a2:	eb0d 0002 	add.w	r0, sp, r2
 80113a6:	f7ff ffe3 	bl	8011370 <memcpy.isra.0>
 80113aa:	4b0d      	ldr	r3, [pc, #52]	; (80113e0 <arp_handle_request+0x48>)
 80113ac:	9a01      	ldr	r2, [sp, #4]
 80113ae:	69db      	ldr	r3, [r3, #28]
 80113b0:	429a      	cmp	r2, r3
 80113b2:	d113      	bne.n	80113dc <arp_handle_request+0x44>
 80113b4:	2206      	movs	r2, #6
 80113b6:	4d0b      	ldr	r5, [pc, #44]	; (80113e4 <arp_handle_request+0x4c>)
 80113b8:	18a1      	adds	r1, r4, r2
 80113ba:	4628      	mov	r0, r5
 80113bc:	f7ff ffd8 	bl	8011370 <memcpy.isra.0>
 80113c0:	f104 0116 	add.w	r1, r4, #22
 80113c4:	f105 0020 	add.w	r0, r5, #32
 80113c8:	2206      	movs	r2, #6
 80113ca:	f7ff ffd1 	bl	8011370 <memcpy.isra.0>
 80113ce:	69e3      	ldr	r3, [r4, #28]
 80113d0:	212a      	movs	r1, #42	; 0x2a
 80113d2:	4628      	mov	r0, r5
 80113d4:	f8c5 3026 	str.w	r3, [r5, #38]	; 0x26
 80113d8:	f004 f814 	bl	8015404 <emac_eth_send>
 80113dc:	b003      	add	sp, #12
 80113de:	bd30      	pop	{r4, r5, pc}
 80113e0:	20008640 	andcs	r8, r0, r0, asr #12
 80113e4:	2000866c 	andcs	r8, r0, ip, ror #12

080113e8 <arp_handle_reply>:
 80113e8:	69c1      	ldr	r1, [r0, #28]
 80113ea:	3016      	adds	r0, #22
 80113ec:	f000 b80a 	b.w	8011404 <arp_cache_update>

080113f0 <arp_send_request>:
 80113f0:	4b03      	ldr	r3, [pc, #12]	; (8011400 <arp_send_request+0x10>)
 80113f2:	212a      	movs	r1, #42	; 0x2a
 80113f4:	f8c3 0026 	str.w	r0, [r3, #38]	; 0x26
 80113f8:	4618      	mov	r0, r3
 80113fa:	f004 b803 	b.w	8015404 <emac_eth_send>
 80113fe:	bf00      	nop
 8011400:	20008698 	mulcs	r0, r8, r6

08011404 <arp_cache_update>:
 8011404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011406:	4e11      	ldr	r6, [pc, #68]	; (801144c <arp_cache_update+0x48>)
 8011408:	8833      	ldrh	r3, [r6, #0]
 801140a:	2b20      	cmp	r3, #32
 801140c:	d018      	beq.n	8011440 <arp_cache_update+0x3c>
 801140e:	2400      	movs	r4, #0
 8011410:	220c      	movs	r2, #12
 8011412:	4d0f      	ldr	r5, [pc, #60]	; (8011450 <arp_cache_update+0x4c>)
 8011414:	b2a7      	uxth	r7, r4
 8011416:	42bb      	cmp	r3, r7
 8011418:	d80b      	bhi.n	8011432 <arp_cache_update+0x2e>
 801141a:	fb02 5203 	mla	r2, r2, r3, r5
 801141e:	1d84      	adds	r4, r0, #6
 8011420:	3203      	adds	r2, #3
 8011422:	42a0      	cmp	r0, r4
 8011424:	d10d      	bne.n	8011442 <arp_cache_update+0x3e>
 8011426:	220c      	movs	r2, #12
 8011428:	435a      	muls	r2, r3
 801142a:	3301      	adds	r3, #1
 801142c:	50a9      	str	r1, [r5, r2]
 801142e:	8033      	strh	r3, [r6, #0]
 8011430:	e006      	b.n	8011440 <arp_cache_update+0x3c>
 8011432:	3401      	adds	r4, #1
 8011434:	fb02 5704 	mla	r7, r2, r4, r5
 8011438:	f857 7c0c 	ldr.w	r7, [r7, #-12]
 801143c:	428f      	cmp	r7, r1
 801143e:	d1e9      	bne.n	8011414 <arp_cache_update+0x10>
 8011440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011442:	f810 7b01 	ldrb.w	r7, [r0], #1
 8011446:	f802 7f01 	strb.w	r7, [r2, #1]!
 801144a:	e7ea      	b.n	8011422 <arp_cache_update+0x1e>
 801144c:	20008844 	andcs	r8, r0, r4, asr #16
 8011450:	200086c4 	andcs	r8, r0, r4, asr #13

08011454 <arp_cache_lookup>:
 8011454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011458:	2200      	movs	r2, #0
 801145a:	4606      	mov	r6, r0
 801145c:	460c      	mov	r4, r1
 801145e:	200c      	movs	r0, #12
 8011460:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80114e8 <arp_cache_lookup+0x94>
 8011464:	fb00 f302 	mul.w	r3, r0, r2
 8011468:	f853 1008 	ldr.w	r1, [r3, r8]
 801146c:	42b1      	cmp	r1, r6
 801146e:	d10d      	bne.n	801148c <arp_cache_lookup+0x38>
 8011470:	3304      	adds	r3, #4
 8011472:	4443      	add	r3, r8
 8011474:	3c01      	subs	r4, #1
 8011476:	1d9a      	adds	r2, r3, #6
 8011478:	4293      	cmp	r3, r2
 801147a:	d102      	bne.n	8011482 <arp_cache_lookup+0x2e>
 801147c:	4630      	mov	r0, r6
 801147e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011482:	f813 1b01 	ldrb.w	r1, [r3], #1
 8011486:	f804 1f01 	strb.w	r1, [r4, #1]!
 801148a:	e7f5      	b.n	8011478 <arp_cache_lookup+0x24>
 801148c:	b111      	cbz	r1, 8011494 <arp_cache_lookup+0x40>
 801148e:	3201      	adds	r2, #1
 8011490:	2a20      	cmp	r2, #32
 8011492:	d1e7      	bne.n	8011464 <arp_cache_lookup+0x10>
 8011494:	2704      	movs	r7, #4
 8011496:	f8df a054 	ldr.w	sl, [pc, #84]	; 80114ec <arp_cache_lookup+0x98>
 801149a:	f8ba 5000 	ldrh.w	r5, [sl]
 801149e:	3f01      	subs	r7, #1
 80114a0:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 80114a4:	d101      	bne.n	80114aa <arp_cache_lookup+0x56>
 80114a6:	463e      	mov	r6, r7
 80114a8:	e7e8      	b.n	801147c <arp_cache_lookup+0x28>
 80114aa:	4630      	mov	r0, r6
 80114ac:	f7ff ffa0 	bl	80113f0 <arp_send_request>
 80114b0:	f44f 3900 	mov.w	r9, #131072	; 0x20000
 80114b4:	f1b9 0901 	subs.w	r9, r9, #1
 80114b8:	f8ba 3000 	ldrh.w	r3, [sl]
 80114bc:	d011      	beq.n	80114e2 <arp_cache_lookup+0x8e>
 80114be:	429d      	cmp	r5, r3
 80114c0:	d00c      	beq.n	80114dc <arp_cache_lookup+0x88>
 80114c2:	230c      	movs	r3, #12
 80114c4:	fb03 8505 	mla	r5, r3, r5, r8
 80114c8:	3c01      	subs	r4, #1
 80114ca:	1d2b      	adds	r3, r5, #4
 80114cc:	350a      	adds	r5, #10
 80114ce:	42ab      	cmp	r3, r5
 80114d0:	d0d4      	beq.n	801147c <arp_cache_lookup+0x28>
 80114d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80114d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80114da:	e7f8      	b.n	80114ce <arp_cache_lookup+0x7a>
 80114dc:	f7f6 f820 	bl	8007520 <net_handle>
 80114e0:	e7e8      	b.n	80114b4 <arp_cache_lookup+0x60>
 80114e2:	429d      	cmp	r5, r3
 80114e4:	d0db      	beq.n	801149e <arp_cache_lookup+0x4a>
 80114e6:	e7ec      	b.n	80114c2 <arp_cache_lookup+0x6e>
 80114e8:	200086c4 	andcs	r8, r0, r4, asr #13
 80114ec:	20008844 	andcs	r8, r0, r4, asr #16

080114f0 <_parse_response>:
 80114f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114f4:	2400      	movs	r4, #0
 80114f6:	460d      	mov	r5, r1
 80114f8:	46a3      	mov	fp, r4
 80114fa:	4627      	mov	r7, r4
 80114fc:	46a2      	mov	sl, r4
 80114fe:	46a1      	mov	r9, r4
 8011500:	46a0      	mov	r8, r4
 8011502:	4e50      	ldr	r6, [pc, #320]	; (8011644 <_parse_response+0x154>)
 8011504:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8011508:	6833      	ldr	r3, [r6, #0]
 801150a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 801150e:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8011512:	9009      	str	r0, [sp, #36]	; 0x24
 8011514:	9402      	str	r4, [sp, #8]
 8011516:	9407      	str	r4, [sp, #28]
 8011518:	9308      	str	r3, [sp, #32]
 801151a:	f7f6 f801 	bl	8007520 <net_handle>
 801151e:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8011522:	9300      	str	r3, [sp, #0]
 8011524:	f44f 7209 	mov.w	r2, #548	; 0x224
 8011528:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 801152c:	ab0c      	add	r3, sp, #48	; 0x30
 801152e:	a90d      	add	r1, sp, #52	; 0x34
 8011530:	f7fe fd9e 	bl	8010070 <udp_recv>
 8011534:	2800      	cmp	r0, #0
 8011536:	d03f      	beq.n	80115b8 <_parse_response+0xc8>
 8011538:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801153c:	2b43      	cmp	r3, #67	; 0x43
 801153e:	d13b      	bne.n	80115b8 <_parse_response+0xc8>
 8011540:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 8011544:	1e6b      	subs	r3, r5, #1
 8011546:	1d69      	adds	r1, r5, #5
 8011548:	4299      	cmp	r1, r3
 801154a:	d12f      	bne.n	80115ac <_parse_response+0xbc>
 801154c:	2100      	movs	r1, #0
 801154e:	ab0d      	add	r3, sp, #52	; 0x34
 8011550:	181d      	adds	r5, r3, r0
 8011552:	468c      	mov	ip, r1
 8011554:	460e      	mov	r6, r1
 8011556:	4608      	mov	r0, r1
 8011558:	ab49      	add	r3, sp, #292	; 0x124
 801155a:	42ab      	cmp	r3, r5
 801155c:	d337      	bcc.n	80115ce <_parse_response+0xde>
 801155e:	b141      	cbz	r1, 8011572 <_parse_response+0x82>
 8011560:	4b39      	ldr	r3, [pc, #228]	; (8011648 <_parse_response+0x158>)
 8011562:	9a07      	ldr	r2, [sp, #28]
 8011564:	f883 8003 	strb.w	r8, [r3, #3]
 8011568:	709a      	strb	r2, [r3, #2]
 801156a:	9a06      	ldr	r2, [sp, #24]
 801156c:	705a      	strb	r2, [r3, #1]
 801156e:	9a05      	ldr	r2, [sp, #20]
 8011570:	701a      	strb	r2, [r3, #0]
 8011572:	f1bc 0f00 	cmp.w	ip, #0
 8011576:	d007      	beq.n	8011588 <_parse_response+0x98>
 8011578:	4b34      	ldr	r3, [pc, #208]	; (801164c <_parse_response+0x15c>)
 801157a:	9a04      	ldr	r2, [sp, #16]
 801157c:	705c      	strb	r4, [r3, #1]
 801157e:	70da      	strb	r2, [r3, #3]
 8011580:	9a03      	ldr	r2, [sp, #12]
 8011582:	709a      	strb	r2, [r3, #2]
 8011584:	9a02      	ldr	r2, [sp, #8]
 8011586:	701a      	strb	r2, [r3, #0]
 8011588:	b13e      	cbz	r6, 801159a <_parse_response+0xaa>
 801158a:	4b31      	ldr	r3, [pc, #196]	; (8011650 <_parse_response+0x160>)
 801158c:	70df      	strb	r7, [r3, #3]
 801158e:	f883 a002 	strb.w	sl, [r3, #2]
 8011592:	f883 9001 	strb.w	r9, [r3, #1]
 8011596:	f883 b000 	strb.w	fp, [r3]
 801159a:	2802      	cmp	r0, #2
 801159c:	d102      	bne.n	80115a4 <_parse_response+0xb4>
 801159e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80115a0:	4b2c      	ldr	r3, [pc, #176]	; (8011654 <_parse_response+0x164>)
 80115a2:	601a      	str	r2, [r3, #0]
 80115a4:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 80115a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115ac:	f812 ef01 	ldrb.w	lr, [r2, #1]!
 80115b0:	f813 cf01 	ldrb.w	ip, [r3, #1]!
 80115b4:	45e6      	cmp	lr, ip
 80115b6:	d0c7      	beq.n	8011548 <_parse_response+0x58>
 80115b8:	6833      	ldr	r3, [r6, #0]
 80115ba:	9a08      	ldr	r2, [sp, #32]
 80115bc:	1a9b      	subs	r3, r3, r2
 80115be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80115c2:	d3aa      	bcc.n	801151a <_parse_response+0x2a>
 80115c4:	2800      	cmp	r0, #0
 80115c6:	d1c1      	bne.n	801154c <_parse_response+0x5c>
 80115c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80115cc:	e7ea      	b.n	80115a4 <_parse_response+0xb4>
 80115ce:	781a      	ldrb	r2, [r3, #0]
 80115d0:	2a35      	cmp	r2, #53	; 0x35
 80115d2:	d011      	beq.n	80115f8 <_parse_response+0x108>
 80115d4:	d808      	bhi.n	80115e8 <_parse_response+0xf8>
 80115d6:	2a01      	cmp	r2, #1
 80115d8:	d011      	beq.n	80115fe <_parse_response+0x10e>
 80115da:	2a03      	cmp	r2, #3
 80115dc:	d019      	beq.n	8011612 <_parse_response+0x122>
 80115de:	b14a      	cbz	r2, 80115f4 <_parse_response+0x104>
 80115e0:	1c9a      	adds	r2, r3, #2
 80115e2:	785b      	ldrb	r3, [r3, #1]
 80115e4:	4413      	add	r3, r2
 80115e6:	e7b8      	b.n	801155a <_parse_response+0x6a>
 80115e8:	2a36      	cmp	r2, #54	; 0x36
 80115ea:	d01f      	beq.n	801162c <_parse_response+0x13c>
 80115ec:	2aff      	cmp	r2, #255	; 0xff
 80115ee:	d1f7      	bne.n	80115e0 <_parse_response+0xf0>
 80115f0:	462b      	mov	r3, r5
 80115f2:	e7b2      	b.n	801155a <_parse_response+0x6a>
 80115f4:	3301      	adds	r3, #1
 80115f6:	e7b0      	b.n	801155a <_parse_response+0x6a>
 80115f8:	7898      	ldrb	r0, [r3, #2]
 80115fa:	3303      	adds	r3, #3
 80115fc:	e7ad      	b.n	801155a <_parse_response+0x6a>
 80115fe:	f893 b002 	ldrb.w	fp, [r3, #2]
 8011602:	f893 9003 	ldrb.w	r9, [r3, #3]
 8011606:	f893 a004 	ldrb.w	sl, [r3, #4]
 801160a:	795f      	ldrb	r7, [r3, #5]
 801160c:	4616      	mov	r6, r2
 801160e:	3306      	adds	r3, #6
 8011610:	e7a3      	b.n	801155a <_parse_response+0x6a>
 8011612:	789a      	ldrb	r2, [r3, #2]
 8011614:	78dc      	ldrb	r4, [r3, #3]
 8011616:	9202      	str	r2, [sp, #8]
 8011618:	791a      	ldrb	r2, [r3, #4]
 801161a:	f04f 0c01 	mov.w	ip, #1
 801161e:	9203      	str	r2, [sp, #12]
 8011620:	795a      	ldrb	r2, [r3, #5]
 8011622:	9204      	str	r2, [sp, #16]
 8011624:	785a      	ldrb	r2, [r3, #1]
 8011626:	4413      	add	r3, r2
 8011628:	3302      	adds	r3, #2
 801162a:	e796      	b.n	801155a <_parse_response+0x6a>
 801162c:	789a      	ldrb	r2, [r3, #2]
 801162e:	f893 8005 	ldrb.w	r8, [r3, #5]
 8011632:	9205      	str	r2, [sp, #20]
 8011634:	78da      	ldrb	r2, [r3, #3]
 8011636:	2101      	movs	r1, #1
 8011638:	9206      	str	r2, [sp, #24]
 801163a:	791a      	ldrb	r2, [r3, #4]
 801163c:	3306      	adds	r3, #6
 801163e:	9207      	str	r2, [sp, #28]
 8011640:	e78b      	b.n	801155a <_parse_response+0x6a>
 8011642:	bf00      	nop
 8011644:	20009d6c 	andcs	r9, r0, ip, ror #26
 8011648:	20008a78 	andcs	r8, r0, r8, ror sl
 801164c:	20008848 	andcs	r8, r0, r8, asr #16
 8011650:	20008850 	andcs	r8, r0, r0, asr r8
 8011654:	2000884c 	andcs	r8, r0, ip, asr #16

08011658 <memcpy.isra.0>:
 8011658:	3801      	subs	r0, #1
 801165a:	440a      	add	r2, r1
 801165c:	4291      	cmp	r1, r2
 801165e:	d100      	bne.n	8011662 <memcpy.isra.0+0xa>
 8011660:	4770      	bx	lr
 8011662:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011666:	f800 3f01 	strb.w	r3, [r0, #1]!
 801166a:	e7f7      	b.n	801165c <memcpy.isra.0+0x4>

0801166c <dhcp_client>:
 801166c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011670:	b087      	sub	sp, #28
 8011672:	9203      	str	r2, [sp, #12]
 8011674:	4a77      	ldr	r2, [pc, #476]	; (8011854 <dhcp_client+0x1e8>)
 8011676:	460f      	mov	r7, r1
 8011678:	4605      	mov	r5, r0
 801167a:	f44f 7309 	mov.w	r3, #548	; 0x224
 801167e:	4614      	mov	r4, r2
 8011680:	2100      	movs	r1, #0
 8011682:	3b01      	subs	r3, #1
 8011684:	f802 1b01 	strb.w	r1, [r2], #1
 8011688:	d1fb      	bne.n	8011682 <dhcp_client+0x16>
 801168a:	f240 1301 	movw	r3, #257	; 0x101
 801168e:	2206      	movs	r2, #6
 8011690:	4629      	mov	r1, r5
 8011692:	4871      	ldr	r0, [pc, #452]	; (8011858 <dhcp_client+0x1ec>)
 8011694:	8023      	strh	r3, [r4, #0]
 8011696:	70a2      	strb	r2, [r4, #2]
 8011698:	f7ff ffde 	bl	8011658 <memcpy.isra.0>
 801169c:	4b6f      	ldr	r3, [pc, #444]	; (801185c <dhcp_client+0x1f0>)
 801169e:	2044      	movs	r0, #68	; 0x44
 80116a0:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 80116a4:	f240 1335 	movw	r3, #309	; 0x135
 80116a8:	f8a4 30f0 	strh.w	r3, [r4, #240]	; 0xf0
 80116ac:	f7fe fca6 	bl	800fffc <udp_bind>
 80116b0:	1e06      	subs	r6, r0, #0
 80116b2:	f2c0 80c9 	blt.w	8011848 <dhcp_client+0x1dc>
 80116b6:	f04f 0915 	mov.w	r9, #21
 80116ba:	f8df a198 	ldr.w	sl, [pc, #408]	; 8011854 <dhcp_client+0x1e8>
 80116be:	f1b9 0901 	subs.w	r9, r9, #1
 80116c2:	d11f      	bne.n	8011704 <dhcp_client+0x98>
 80116c4:	464c      	mov	r4, r9
 80116c6:	2044      	movs	r0, #68	; 0x44
 80116c8:	f7fe fcb2 	bl	8010030 <udp_unbind>
 80116cc:	2c00      	cmp	r4, #0
 80116ce:	f000 80be 	beq.w	801184e <dhcp_client+0x1e2>
 80116d2:	2204      	movs	r2, #4
 80116d4:	4962      	ldr	r1, [pc, #392]	; (8011860 <dhcp_client+0x1f4>)
 80116d6:	a805      	add	r0, sp, #20
 80116d8:	f7ff ffbe 	bl	8011658 <memcpy.isra.0>
 80116dc:	9b05      	ldr	r3, [sp, #20]
 80116de:	2204      	movs	r2, #4
 80116e0:	4960      	ldr	r1, [pc, #384]	; (8011864 <dhcp_client+0x1f8>)
 80116e2:	603b      	str	r3, [r7, #0]
 80116e4:	a805      	add	r0, sp, #20
 80116e6:	f7ff ffb7 	bl	8011658 <memcpy.isra.0>
 80116ea:	9b05      	ldr	r3, [sp, #20]
 80116ec:	a805      	add	r0, sp, #20
 80116ee:	60bb      	str	r3, [r7, #8]
 80116f0:	2204      	movs	r2, #4
 80116f2:	495d      	ldr	r1, [pc, #372]	; (8011868 <dhcp_client+0x1fc>)
 80116f4:	f7ff ffb0 	bl	8011658 <memcpy.isra.0>
 80116f8:	2000      	movs	r0, #0
 80116fa:	9b05      	ldr	r3, [sp, #20]
 80116fc:	607b      	str	r3, [r7, #4]
 80116fe:	b007      	add	sp, #28
 8011700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011704:	f643 5301 	movw	r3, #15617	; 0x3d01
 8011708:	f240 1807 	movw	r8, #263	; 0x107
 801170c:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 8011710:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 8011714:	782b      	ldrb	r3, [r5, #0]
 8011716:	4a55      	ldr	r2, [pc, #340]	; (801186c <dhcp_client+0x200>)
 8011718:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 801171c:	786b      	ldrb	r3, [r5, #1]
 801171e:	fa5f fb86 	uxtb.w	fp, r6
 8011722:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 8011726:	78ab      	ldrb	r3, [r5, #2]
 8011728:	4651      	mov	r1, sl
 801172a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 801172e:	78eb      	ldrb	r3, [r5, #3]
 8011730:	4658      	mov	r0, fp
 8011732:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 8011736:	792b      	ldrb	r3, [r5, #4]
 8011738:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 801173c:	796b      	ldrb	r3, [r5, #5]
 801173e:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 8011742:	4b4b      	ldr	r3, [pc, #300]	; (8011870 <dhcp_client+0x204>)
 8011744:	e9c4 233f 	strd	r2, r3, [r4, #252]	; 0xfc
 8011748:	23ff      	movs	r3, #255	; 0xff
 801174a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 801174e:	2343      	movs	r3, #67	; 0x43
 8011750:	f240 1205 	movw	r2, #261	; 0x105
 8011754:	9300      	str	r3, [sp, #0]
 8011756:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801175a:	f7fe fce5 	bl	8010128 <udp_send>
 801175e:	4629      	mov	r1, r5
 8011760:	4630      	mov	r0, r6
 8011762:	f7ff fec5 	bl	80114f0 <_parse_response>
 8011766:	2802      	cmp	r0, #2
 8011768:	d1a9      	bne.n	80116be <dhcp_client+0x52>
 801176a:	f643 5303 	movw	r3, #15619	; 0x3d03
 801176e:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 8011772:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 8011776:	782b      	ldrb	r3, [r5, #0]
 8011778:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8011874 <dhcp_client+0x208>
 801177c:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 8011780:	786b      	ldrb	r3, [r5, #1]
 8011782:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 8011786:	78ab      	ldrb	r3, [r5, #2]
 8011788:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 801178c:	78eb      	ldrb	r3, [r5, #3]
 801178e:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 8011792:	792b      	ldrb	r3, [r5, #4]
 8011794:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 8011798:	796b      	ldrb	r3, [r5, #5]
 801179a:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 801179e:	f240 4332 	movw	r3, #1074	; 0x432
 80117a2:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
 80117a6:	4b2e      	ldr	r3, [pc, #184]	; (8011860 <dhcp_client+0x1f4>)
 80117a8:	881a      	ldrh	r2, [r3, #0]
 80117aa:	885b      	ldrh	r3, [r3, #2]
 80117ac:	f8a4 20fe 	strh.w	r2, [r4, #254]	; 0xfe
 80117b0:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 80117b4:	f240 4336 	movw	r3, #1078	; 0x436
 80117b8:	f8a4 3102 	strh.w	r3, [r4, #258]	; 0x102
 80117bc:	4b2e      	ldr	r3, [pc, #184]	; (8011878 <dhcp_client+0x20c>)
 80117be:	221e      	movs	r2, #30
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 80117c6:	230c      	movs	r3, #12
 80117c8:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
 80117cc:	9b03      	ldr	r3, [sp, #12]
 80117ce:	1e58      	subs	r0, r3, #1
 80117d0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80117d4:	f1a2 0e1e 	sub.w	lr, r2, #30
 80117d8:	1c51      	adds	r1, r2, #1
 80117da:	bb8b      	cbnz	r3, 8011840 <dhcp_client+0x1d4>
 80117dc:	2037      	movs	r0, #55	; 0x37
 80117de:	18a3      	adds	r3, r4, r2
 80117e0:	f883 00ec 	strb.w	r0, [r3, #236]	; 0xec
 80117e4:	2006      	movs	r0, #6
 80117e6:	4421      	add	r1, r4
 80117e8:	f881 00ec 	strb.w	r0, [r1, #236]	; 0xec
 80117ec:	2103      	movs	r1, #3
 80117ee:	f883 10ef 	strb.w	r1, [r3, #239]	; 0xef
 80117f2:	210f      	movs	r1, #15
 80117f4:	f883 10f1 	strb.w	r1, [r3, #241]	; 0xf1
 80117f8:	213a      	movs	r1, #58	; 0x3a
 80117fa:	f883 10f2 	strb.w	r1, [r3, #242]	; 0xf2
 80117fe:	213b      	movs	r1, #59	; 0x3b
 8011800:	f04f 0801 	mov.w	r8, #1
 8011804:	f883 10f3 	strb.w	r1, [r3, #243]	; 0xf3
 8011808:	21ff      	movs	r1, #255	; 0xff
 801180a:	f883 00f0 	strb.w	r0, [r3, #240]	; 0xf0
 801180e:	f883 10f4 	strb.w	r1, [r3, #244]	; 0xf4
 8011812:	f883 80ee 	strb.w	r8, [r3, #238]	; 0xee
 8011816:	2343      	movs	r3, #67	; 0x43
 8011818:	32f5      	adds	r2, #245	; 0xf5
 801181a:	f884 e109 	strb.w	lr, [r4, #265]	; 0x109
 801181e:	4651      	mov	r1, sl
 8011820:	9300      	str	r3, [sp, #0]
 8011822:	b292      	uxth	r2, r2
 8011824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011828:	4658      	mov	r0, fp
 801182a:	f7fe fc7d 	bl	8010128 <udp_send>
 801182e:	4629      	mov	r1, r5
 8011830:	4630      	mov	r0, r6
 8011832:	f7ff fe5d 	bl	80114f0 <_parse_response>
 8011836:	2805      	cmp	r0, #5
 8011838:	f47f af41 	bne.w	80116be <dhcp_client+0x52>
 801183c:	4644      	mov	r4, r8
 801183e:	e742      	b.n	80116c6 <dhcp_client+0x5a>
 8011840:	460a      	mov	r2, r1
 8011842:	f80c 3f01 	strb.w	r3, [ip, #1]!
 8011846:	e7c3      	b.n	80117d0 <dhcp_client+0x164>
 8011848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801184c:	e757      	b.n	80116fe <dhcp_client+0x92>
 801184e:	f06f 0001 	mvn.w	r0, #1
 8011852:	e754      	b.n	80116fe <dhcp_client+0x92>
 8011854:	20008854 	andcs	r8, r0, r4, asr r8
 8011858:	20008870 	andcs	r8, r0, r0, ror r8
 801185c:	63538263 	cmpvs	r3, #805306374	; 0x30000006
 8011860:	2000884c 	andcs	r8, r0, ip, asr #16
 8011864:	20008848 	andcs	r8, r0, r8, asr #16
 8011868:	20008850 	andcs	r8, r0, r0, asr r8
 801186c:	03010637 	movweq	r0, #5687	; 0x1637
 8011870:	3b3a0f06 	blcc	8e95490 <__exidx_end+0xe7d0e4>
 8011874:	2000895d 	andcs	r8, r0, sp, asr r9
 8011878:	20008a78 	andcs	r8, r0, r8, ror sl

0801187c <dhcp_client_release>:
 801187c:	b507      	push	{r0, r1, r2, lr}
 801187e:	2044      	movs	r0, #68	; 0x44
 8011880:	f7fe fbbc 	bl	800fffc <udp_bind>
 8011884:	f243 6307 	movw	r3, #13831	; 0x3607
 8011888:	4911      	ldr	r1, [pc, #68]	; (80118d0 <dhcp_client_release+0x54>)
 801188a:	b2c0      	uxtb	r0, r0
 801188c:	f8a1 30f2 	strh.w	r3, [r1, #242]	; 0xf2
 8011890:	2304      	movs	r3, #4
 8011892:	f881 30f4 	strb.w	r3, [r1, #244]	; 0xf4
 8011896:	4b0f      	ldr	r3, [pc, #60]	; (80118d4 <dhcp_client_release+0x58>)
 8011898:	781a      	ldrb	r2, [r3, #0]
 801189a:	f881 20f5 	strb.w	r2, [r1, #245]	; 0xf5
 801189e:	785a      	ldrb	r2, [r3, #1]
 80118a0:	f881 20f6 	strb.w	r2, [r1, #246]	; 0xf6
 80118a4:	789a      	ldrb	r2, [r3, #2]
 80118a6:	78db      	ldrb	r3, [r3, #3]
 80118a8:	f881 20f7 	strb.w	r2, [r1, #247]	; 0xf7
 80118ac:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
 80118b0:	23ff      	movs	r3, #255	; 0xff
 80118b2:	f881 30f9 	strb.w	r3, [r1, #249]	; 0xf9
 80118b6:	2343      	movs	r3, #67	; 0x43
 80118b8:	22fa      	movs	r2, #250	; 0xfa
 80118ba:	9300      	str	r3, [sp, #0]
 80118bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80118c0:	f7fe fc32 	bl	8010128 <udp_send>
 80118c4:	2044      	movs	r0, #68	; 0x44
 80118c6:	b003      	add	sp, #12
 80118c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80118cc:	f7fe bbb0 	b.w	8010030 <udp_unbind>
 80118d0:	20008854 	andcs	r8, r0, r4, asr r8
 80118d4:	20008a78 	andcs	r8, r0, r8, ror sl

080118d8 <memcpy.isra.0>:
 80118d8:	3801      	subs	r0, #1
 80118da:	440a      	add	r2, r1
 80118dc:	4291      	cmp	r1, r2
 80118de:	d100      	bne.n	80118e2 <memcpy.isra.0+0xa>
 80118e0:	4770      	bx	lr
 80118e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80118e6:	f800 3f01 	strb.w	r3, [r0, #1]!
 80118ea:	e7f7      	b.n	80118dc <memcpy.isra.0+0x4>

080118ec <_send_report>:
 80118ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80118ee:	491c      	ldr	r1, [pc, #112]	; (8011960 <_send_report+0x74>)
 80118f0:	4c1c      	ldr	r4, [pc, #112]	; (8011964 <_send_report+0x78>)
 80118f2:	f3c0 2306 	ubfx	r3, r0, #8, #7
 80118f6:	9001      	str	r0, [sp, #4]
 80118f8:	70cb      	strb	r3, [r1, #3]
 80118fa:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80118fe:	f3c0 6007 	ubfx	r0, r0, #24, #8
 8011902:	710b      	strb	r3, [r1, #4]
 8011904:	7148      	strb	r0, [r1, #5]
 8011906:	2206      	movs	r2, #6
 8011908:	4620      	mov	r0, r4
 801190a:	f7ff ffe5 	bl	80118d8 <memcpy.isra.0>
 801190e:	2204      	movs	r2, #4
 8011910:	2700      	movs	r7, #0
 8011912:	4d15      	ldr	r5, [pc, #84]	; (8011968 <_send_report+0x7c>)
 8011914:	eb0d 0102 	add.w	r1, sp, r2
 8011918:	882b      	ldrh	r3, [r5, #0]
 801191a:	f104 001e 	add.w	r0, r4, #30
 801191e:	f104 060e 	add.w	r6, r4, #14
 8011922:	8263      	strh	r3, [r4, #18]
 8011924:	f7ff ffd8 	bl	80118d8 <memcpy.isra.0>
 8011928:	2118      	movs	r1, #24
 801192a:	4630      	mov	r0, r6
 801192c:	8327      	strh	r7, [r4, #24]
 801192e:	f000 f8c6 	bl	8011abe <net_chksum>
 8011932:	2204      	movs	r2, #4
 8011934:	8320      	strh	r0, [r4, #24]
 8011936:	eb0d 0102 	add.w	r1, sp, r2
 801193a:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 801193e:	f7ff ffcb 	bl	80118d8 <memcpy.isra.0>
 8011942:	2120      	movs	r1, #32
 8011944:	4630      	mov	r0, r6
 8011946:	8527      	strh	r7, [r4, #40]	; 0x28
 8011948:	f000 f8b9 	bl	8011abe <net_chksum>
 801194c:	212e      	movs	r1, #46	; 0x2e
 801194e:	8520      	strh	r0, [r4, #40]	; 0x28
 8011950:	4620      	mov	r0, r4
 8011952:	f003 fd57 	bl	8015404 <emac_eth_send>
 8011956:	882b      	ldrh	r3, [r5, #0]
 8011958:	3301      	adds	r3, #1
 801195a:	802b      	strh	r3, [r5, #0]
 801195c:	b003      	add	sp, #12
 801195e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011960:	20008bd4 	ldrdcs	r8, [r0], -r4
 8011964:	20008bdc 	ldrdcs	r8, [r0], -ip
 8011968:	20008b9c 	mulcs	r0, ip, fp

0801196c <igmp_set_ip>:
 801196c:	b507      	push	{r0, r1, r2, lr}
 801196e:	2204      	movs	r2, #4
 8011970:	6803      	ldr	r3, [r0, #0]
 8011972:	eb0d 0102 	add.w	r1, sp, r2
 8011976:	4806      	ldr	r0, [pc, #24]	; (8011990 <igmp_set_ip+0x24>)
 8011978:	9301      	str	r3, [sp, #4]
 801197a:	f7ff ffad 	bl	80118d8 <memcpy.isra.0>
 801197e:	2204      	movs	r2, #4
 8011980:	4804      	ldr	r0, [pc, #16]	; (8011994 <igmp_set_ip+0x28>)
 8011982:	eb0d 0102 	add.w	r1, sp, r2
 8011986:	f7ff ffa7 	bl	80118d8 <memcpy.isra.0>
 801198a:	b003      	add	sp, #12
 801198c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011990:	20008bf6 	strdcs	r8, [r0], -r6
 8011994:	20008bbe 			; <UNDEFINED> instruction: 0x20008bbe

08011998 <igmp_timer>:
 8011998:	b570      	push	{r4, r5, r6, lr}
 801199a:	2500      	movs	r5, #0
 801199c:	2602      	movs	r6, #2
 801199e:	4c0a      	ldr	r4, [pc, #40]	; (80119c8 <igmp_timer+0x30>)
 80119a0:	7963      	ldrb	r3, [r4, #5]
 80119a2:	2b01      	cmp	r3, #1
 80119a4:	d109      	bne.n	80119ba <igmp_timer+0x22>
 80119a6:	7923      	ldrb	r3, [r4, #4]
 80119a8:	b13b      	cbz	r3, 80119ba <igmp_timer+0x22>
 80119aa:	3b01      	subs	r3, #1
 80119ac:	b2db      	uxtb	r3, r3
 80119ae:	7123      	strb	r3, [r4, #4]
 80119b0:	b91b      	cbnz	r3, 80119ba <igmp_timer+0x22>
 80119b2:	6820      	ldr	r0, [r4, #0]
 80119b4:	f7ff ff9a 	bl	80118ec <_send_report>
 80119b8:	7166      	strb	r6, [r4, #5]
 80119ba:	3501      	adds	r5, #1
 80119bc:	2d24      	cmp	r5, #36	; 0x24
 80119be:	f104 0408 	add.w	r4, r4, #8
 80119c2:	d1ed      	bne.n	80119a0 <igmp_timer+0x8>
 80119c4:	bd70      	pop	{r4, r5, r6, pc}
 80119c6:	bf00      	nop
 80119c8:	20008a7c 	andcs	r8, r0, ip, ror sl

080119cc <igmp_join>:
 80119cc:	b538      	push	{r3, r4, r5, lr}
 80119ce:	f000 03e0 	and.w	r3, r0, #224	; 0xe0
 80119d2:	2be0      	cmp	r3, #224	; 0xe0
 80119d4:	d11b      	bne.n	8011a0e <igmp_join+0x42>
 80119d6:	4911      	ldr	r1, [pc, #68]	; (8011a1c <igmp_join+0x50>)
 80119d8:	680c      	ldr	r4, [r1, #0]
 80119da:	2c24      	cmp	r4, #36	; 0x24
 80119dc:	d01a      	beq.n	8011a14 <igmp_join+0x48>
 80119de:	2300      	movs	r3, #0
 80119e0:	4a0f      	ldr	r2, [pc, #60]	; (8011a20 <igmp_join+0x54>)
 80119e2:	429c      	cmp	r4, r3
 80119e4:	dc0d      	bgt.n	8011a02 <igmp_join+0x36>
 80119e6:	f44f 7381 	mov.w	r3, #258	; 0x102
 80119ea:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
 80119ee:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80119f2:	8093      	strh	r3, [r2, #4]
 80119f4:	1c63      	adds	r3, r4, #1
 80119f6:	600b      	str	r3, [r1, #0]
 80119f8:	f7ff ff78 	bl	80118ec <_send_report>
 80119fc:	4623      	mov	r3, r4
 80119fe:	4618      	mov	r0, r3
 8011a00:	bd38      	pop	{r3, r4, r5, pc}
 8011a02:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8011a06:	4285      	cmp	r5, r0
 8011a08:	d0f9      	beq.n	80119fe <igmp_join+0x32>
 8011a0a:	3301      	adds	r3, #1
 8011a0c:	e7e9      	b.n	80119e2 <igmp_join+0x16>
 8011a0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a12:	e7f4      	b.n	80119fe <igmp_join+0x32>
 8011a14:	f06f 0301 	mvn.w	r3, #1
 8011a18:	e7f1      	b.n	80119fe <igmp_join+0x32>
 8011a1a:	bf00      	nop
 8011a1c:	20008ba0 	andcs	r8, r0, r0, lsr #23
 8011a20:	20008a7c 	andcs	r8, r0, ip, ror sl

08011a24 <igmp_leave>:
 8011a24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011a28:	2600      	movs	r6, #0
 8011a2a:	4f1c      	ldr	r7, [pc, #112]	; (8011a9c <igmp_leave+0x78>)
 8011a2c:	f857 3036 	ldr.w	r3, [r7, r6, lsl #3]
 8011a30:	4283      	cmp	r3, r0
 8011a32:	d007      	beq.n	8011a44 <igmp_leave+0x20>
 8011a34:	3601      	adds	r6, #1
 8011a36:	2e24      	cmp	r6, #36	; 0x24
 8011a38:	d1f8      	bne.n	8011a2c <igmp_leave+0x8>
 8011a3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a3e:	b002      	add	sp, #8
 8011a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a44:	2400      	movs	r4, #0
 8011a46:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8011aa0 <igmp_leave+0x7c>
 8011a4a:	4d16      	ldr	r5, [pc, #88]	; (8011aa4 <igmp_leave+0x80>)
 8011a4c:	f8b8 3000 	ldrh.w	r3, [r8]
 8011a50:	2118      	movs	r1, #24
 8011a52:	9001      	str	r0, [sp, #4]
 8011a54:	4814      	ldr	r0, [pc, #80]	; (8011aa8 <igmp_leave+0x84>)
 8011a56:	826b      	strh	r3, [r5, #18]
 8011a58:	832c      	strh	r4, [r5, #24]
 8011a5a:	f000 f830 	bl	8011abe <net_chksum>
 8011a5e:	2204      	movs	r2, #4
 8011a60:	8328      	strh	r0, [r5, #24]
 8011a62:	eb0d 0102 	add.w	r1, sp, r2
 8011a66:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 8011a6a:	f7ff ff35 	bl	80118d8 <memcpy.isra.0>
 8011a6e:	2120      	movs	r1, #32
 8011a70:	f105 000e 	add.w	r0, r5, #14
 8011a74:	852c      	strh	r4, [r5, #40]	; 0x28
 8011a76:	f000 f822 	bl	8011abe <net_chksum>
 8011a7a:	212e      	movs	r1, #46	; 0x2e
 8011a7c:	8528      	strh	r0, [r5, #40]	; 0x28
 8011a7e:	4628      	mov	r0, r5
 8011a80:	f003 fcc0 	bl	8015404 <emac_eth_send>
 8011a84:	f8b8 3000 	ldrh.w	r3, [r8]
 8011a88:	f847 4036 	str.w	r4, [r7, r6, lsl #3]
 8011a8c:	3301      	adds	r3, #1
 8011a8e:	eb07 07c6 	add.w	r7, r7, r6, lsl #3
 8011a92:	4620      	mov	r0, r4
 8011a94:	f8a8 3000 	strh.w	r3, [r8]
 8011a98:	80bc      	strh	r4, [r7, #4]
 8011a9a:	e7d0      	b.n	8011a3e <igmp_leave+0x1a>
 8011a9c:	20008a7c 	andcs	r8, r0, ip, ror sl
 8011aa0:	20008b9c 	mulcs	r0, ip, fp
 8011aa4:	20008ba4 	andcs	r8, r0, r4, lsr #23
 8011aa8:	20008bea 	andcs	r8, r0, sl, ror #23

08011aac <ip_set_ip>:
 8011aac:	b510      	push	{r4, lr}
 8011aae:	4604      	mov	r4, r0
 8011ab0:	f7fe fa84 	bl	800ffbc <udp_set_ip>
 8011ab4:	4620      	mov	r0, r4
 8011ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011aba:	f7ff bf57 	b.w	801196c <igmp_set_ip>

08011abe <net_chksum>:
 8011abe:	2300      	movs	r3, #0
 8011ac0:	f021 0201 	bic.w	r2, r1, #1
 8011ac4:	b530      	push	{r4, r5, lr}
 8011ac6:	1884      	adds	r4, r0, r2
 8011ac8:	42a0      	cmp	r0, r4
 8011aca:	d10b      	bne.n	8011ae4 <net_chksum+0x26>
 8011acc:	4291      	cmp	r1, r2
 8011ace:	d004      	beq.n	8011ada <net_chksum+0x1c>
 8011ad0:	7802      	ldrb	r2, [r0, #0]
 8011ad2:	0212      	lsls	r2, r2, #8
 8011ad4:	ba52      	rev16	r2, r2
 8011ad6:	b292      	uxth	r2, r2
 8011ad8:	4413      	add	r3, r2
 8011ada:	0c1a      	lsrs	r2, r3, #16
 8011adc:	d106      	bne.n	8011aec <net_chksum+0x2e>
 8011ade:	43d8      	mvns	r0, r3
 8011ae0:	b280      	uxth	r0, r0
 8011ae2:	bd30      	pop	{r4, r5, pc}
 8011ae4:	f830 5b02 	ldrh.w	r5, [r0], #2
 8011ae8:	442b      	add	r3, r5
 8011aea:	e7ed      	b.n	8011ac8 <net_chksum+0xa>
 8011aec:	b29b      	uxth	r3, r3
 8011aee:	e7f3      	b.n	8011ad8 <net_chksum+0x1a>

08011af0 <net::link_register_read()>:
 8011af0:	b507      	push	{r0, r1, r2, lr}
 8011af2:	2201      	movs	r2, #1
 8011af4:	f10d 0306 	add.w	r3, sp, #6
 8011af8:	4611      	mov	r1, r2
 8011afa:	2000      	movs	r0, #0
 8011afc:	f002 fdda 	bl	80146b4 <enet_phy_write_read>
 8011b00:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8011b04:	f080 0004 	eor.w	r0, r0, #4
 8011b08:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8011b0c:	b003      	add	sp, #12
 8011b0e:	f85d fb04 	ldr.w	pc, [sp], #4

08011b12 <memcpy.isra.0>:
 8011b12:	3801      	subs	r0, #1
 8011b14:	440a      	add	r2, r1
 8011b16:	4291      	cmp	r1, r2
 8011b18:	d100      	bne.n	8011b1c <memcpy.isra.0+0xa>
 8011b1a:	4770      	bx	lr
 8011b1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011b20:	f800 3f01 	strb.w	r3, [r0, #1]!
 8011b24:	e7f7      	b.n	8011b16 <memcpy.isra.0+0x4>

08011b26 <Display::Write(unsigned char, char const*) [clone .isra.0]>:
 8011b26:	b430      	push	{r4, r5}
 8011b28:	b168      	cbz	r0, 8011b46 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x20>
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	7905      	ldrb	r5, [r0, #4]
 8011b2e:	5cd4      	ldrb	r4, [r2, r3]
 8011b30:	b11c      	cbz	r4, 8011b3a <Display::Write(unsigned char, char const*) [clone .isra.0]+0x14>
 8011b32:	1c5c      	adds	r4, r3, #1
 8011b34:	429d      	cmp	r5, r3
 8011b36:	4623      	mov	r3, r4
 8011b38:	dcf9      	bgt.n	8011b2e <Display::Write(unsigned char, char const*) [clone .isra.0]+0x8>
 8011b3a:	6804      	ldr	r4, [r0, #0]
 8011b3c:	b2db      	uxtb	r3, r3
 8011b3e:	69e4      	ldr	r4, [r4, #28]
 8011b40:	46a4      	mov	ip, r4
 8011b42:	bc30      	pop	{r4, r5}
 8011b44:	4760      	bx	ip
 8011b46:	bc30      	pop	{r4, r5}
 8011b48:	4770      	bx	lr

08011b4a <Display::ClearLine(unsigned char) [clone .isra.0]>:
 8011b4a:	b110      	cbz	r0, 8011b52 <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 8011b4c:	6803      	ldr	r3, [r0, #0]
 8011b4e:	691b      	ldr	r3, [r3, #16]
 8011b50:	4718      	bx	r3
 8011b52:	4770      	bx	lr

08011b54 <DisplayUdf::DisplayUdf()>:
 8011b54:	b510      	push	{r4, lr}
 8011b56:	4604      	mov	r4, r0
 8011b58:	f001 fe44 	bl	80137e4 <Display::Display()>
 8011b5c:	2202      	movs	r2, #2
 8011b5e:	2300      	movs	r3, #0
 8011b60:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
 8011b64:	4b05      	ldr	r3, [pc, #20]	; (8011b7c <DisplayUdf::DisplayUdf()+0x28>)
 8011b66:	f104 023b 	add.w	r2, r4, #59	; 0x3b
 8011b6a:	601c      	str	r4, [r3, #0]
 8011b6c:	2301      	movs	r3, #1
 8011b6e:	f802 3f01 	strb.w	r3, [r2, #1]!
 8011b72:	3301      	adds	r3, #1
 8011b74:	2b15      	cmp	r3, #21
 8011b76:	d1fa      	bne.n	8011b6e <DisplayUdf::DisplayUdf()+0x1a>
 8011b78:	4620      	mov	r0, r4
 8011b7a:	bd10      	pop	{r4, pc}
 8011b7c:	20008c0c 	andcs	r8, r0, ip, lsl #24

08011b80 <DisplayUdf::SetTitle(char const*, ...)>:
 8011b80:	b40e      	push	{r1, r2, r3}
 8011b82:	b517      	push	{r0, r1, r2, r4, lr}
 8011b84:	ab05      	add	r3, sp, #20
 8011b86:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b8a:	4604      	mov	r4, r0
 8011b8c:	211f      	movs	r1, #31
 8011b8e:	301c      	adds	r0, #28
 8011b90:	9301      	str	r3, [sp, #4]
 8011b92:	f7f7 fa45 	bl	8009020 <vsnprintf>
 8011b96:	2300      	movs	r3, #0
 8011b98:	4404      	add	r4, r0
 8011b9a:	7723      	strb	r3, [r4, #28]
 8011b9c:	b003      	add	sp, #12
 8011b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ba2:	b003      	add	sp, #12
 8011ba4:	4770      	bx	lr

08011ba6 <DisplayUdf::Set(unsigned char, displayudf::Labels)>:
 8011ba6:	1e4b      	subs	r3, r1, #1
 8011ba8:	2b05      	cmp	r3, #5
 8011baa:	b530      	push	{r4, r5, lr}
 8011bac:	d80f      	bhi.n	8011bce <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x28>
 8011bae:	2300      	movs	r3, #0
 8011bb0:	f100 043b 	add.w	r4, r0, #59	; 0x3b
 8011bb4:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8011bb8:	428d      	cmp	r5, r1
 8011bba:	d109      	bne.n	8011bd0 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x2a>
 8011bbc:	1884      	adds	r4, r0, r2
 8011bbe:	f894 403c 	ldrb.w	r4, [r4, #60]	; 0x3c
 8011bc2:	4403      	add	r3, r0
 8011bc4:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
 8011bc8:	4410      	add	r0, r2
 8011bca:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
 8011bce:	bd30      	pop	{r4, r5, pc}
 8011bd0:	3301      	adds	r3, #1
 8011bd2:	2b14      	cmp	r3, #20
 8011bd4:	d1ee      	bne.n	8011bb4 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0xe>
 8011bd6:	e7f7      	b.n	8011bc8 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x22>

08011bd8 <DisplayUdf::ShowEmacStart()>:
 8011bd8:	b510      	push	{r4, lr}
 8011bda:	4604      	mov	r4, r0
 8011bdc:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 8011be0:	6980      	ldr	r0, [r0, #24]
 8011be2:	f7ff ffb2 	bl	8011b4a <Display::ClearLine(unsigned char) [clone .isra.0]>
 8011be6:	4620      	mov	r0, r4
 8011be8:	4a02      	ldr	r2, [pc, #8]	; (8011bf4 <DisplayUdf::ShowEmacStart()+0x1c>)
 8011bea:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8011bee:	f7f6 fb83 	bl	80082f8 <Display::Printf(unsigned char, char const*, ...)>
 8011bf2:	bd10      	pop	{r4, pc}
 8011bf4:	08017a87 	stmdaeq	r1, {r0, r1, r2, r7, r9, fp, ip, sp, lr}

08011bf8 <DisplayUdf::ShowIpAddress()>:
 8011bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011bfc:	4604      	mov	r4, r0
 8011bfe:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 8011c02:	b086      	sub	sp, #24
 8011c04:	6980      	ldr	r0, [r0, #24]
 8011c06:	f7ff ffa0 	bl	8011b4a <Display::ClearLine(unsigned char) [clone .isra.0]>
 8011c0a:	4b13      	ldr	r3, [pc, #76]	; (8011c58 <DisplayUdf::ShowIpAddress()+0x60>)
 8011c0c:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
 8011c10:	681d      	ldr	r5, [r3, #0]
 8011c12:	69e8      	ldr	r0, [r5, #28]
 8011c14:	696e      	ldr	r6, [r5, #20]
 8011c16:	f004 fab7 	bl	8016188 <__popcountsi2>
 8011c1a:	79eb      	ldrb	r3, [r5, #7]
 8011c1c:	fa5f f886 	uxtb.w	r8, r6
 8011c20:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8011c24:	f3c6 4a07 	ubfx	sl, r6, #16, #8
 8011c28:	0e36      	lsrs	r6, r6, #24
 8011c2a:	b99b      	cbnz	r3, 8011c54 <DisplayUdf::ShowIpAddress()+0x5c>
 8011c2c:	796b      	ldrb	r3, [r5, #5]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	bf14      	ite	ne
 8011c32:	2244      	movne	r2, #68	; 0x44
 8011c34:	2253      	moveq	r2, #83	; 0x53
 8011c36:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8011c3a:	4643      	mov	r3, r8
 8011c3c:	4639      	mov	r1, r7
 8011c3e:	4620      	mov	r0, r4
 8011c40:	e9cd a601 	strd	sl, r6, [sp, #4]
 8011c44:	4a05      	ldr	r2, [pc, #20]	; (8011c5c <DisplayUdf::ShowIpAddress()+0x64>)
 8011c46:	f8cd 9000 	str.w	r9, [sp]
 8011c4a:	f7f6 fb55 	bl	80082f8 <Display::Printf(unsigned char, char const*, ...)>
 8011c4e:	b006      	add	sp, #24
 8011c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c54:	225a      	movs	r2, #90	; 0x5a
 8011c56:	e7ee      	b.n	8011c36 <DisplayUdf::ShowIpAddress()+0x3e>
 8011c58:	2000863c 	andcs	r8, r0, ip, lsr r6
 8011c5c:	08017a96 	stmdaeq	r1, {r1, r2, r4, r7, r9, fp, ip, sp, lr}

08011c60 <DisplayUdf::ShowNetmask()>:
 8011c60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011c62:	4604      	mov	r4, r0
 8011c64:	4b0b      	ldr	r3, [pc, #44]	; (8011c94 <DisplayUdf::ShowNetmask()+0x34>)
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	69db      	ldr	r3, [r3, #28]
 8011c6a:	0e1a      	lsrs	r2, r3, #24
 8011c6c:	9202      	str	r2, [sp, #8]
 8011c6e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011c72:	9201      	str	r2, [sp, #4]
 8011c74:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011c78:	9200      	str	r2, [sp, #0]
 8011c7a:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 8011c7e:	4a06      	ldr	r2, [pc, #24]	; (8011c98 <DisplayUdf::ShowNetmask()+0x38>)
 8011c80:	b2db      	uxtb	r3, r3
 8011c82:	f7f6 fb39 	bl	80082f8 <Display::Printf(unsigned char, char const*, ...)>
 8011c86:	4620      	mov	r0, r4
 8011c88:	b004      	add	sp, #16
 8011c8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c8e:	f7ff bfb3 	b.w	8011bf8 <DisplayUdf::ShowIpAddress()>
 8011c92:	bf00      	nop
 8011c94:	2000863c 	andcs	r8, r0, ip, lsr r6
 8011c98:	08017aa8 	stmdaeq	r1, {r3, r5, r7, r9, fp, ip, sp, lr}

08011c9c <DisplayUdf::ShowGatewayIp()>:
 8011c9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011c9e:	4604      	mov	r4, r0
 8011ca0:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 8011ca4:	6980      	ldr	r0, [r0, #24]
 8011ca6:	f7ff ff50 	bl	8011b4a <Display::ClearLine(unsigned char) [clone .isra.0]>
 8011caa:	4b0a      	ldr	r3, [pc, #40]	; (8011cd4 <DisplayUdf::ShowGatewayIp()+0x38>)
 8011cac:	4620      	mov	r0, r4
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	f894 104e 	ldrb.w	r1, [r4, #78]	; 0x4e
 8011cb4:	699b      	ldr	r3, [r3, #24]
 8011cb6:	0e1a      	lsrs	r2, r3, #24
 8011cb8:	9202      	str	r2, [sp, #8]
 8011cba:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011cbe:	9201      	str	r2, [sp, #4]
 8011cc0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011cc4:	9200      	str	r2, [sp, #0]
 8011cc6:	b2db      	uxtb	r3, r3
 8011cc8:	4a03      	ldr	r2, [pc, #12]	; (8011cd8 <DisplayUdf::ShowGatewayIp()+0x3c>)
 8011cca:	f7f6 fb15 	bl	80082f8 <Display::Printf(unsigned char, char const*, ...)>
 8011cce:	b004      	add	sp, #16
 8011cd0:	bd10      	pop	{r4, pc}
 8011cd2:	bf00      	nop
 8011cd4:	2000863c 	andcs	r8, r0, ip, lsr r6
 8011cd8:	08017ab7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, r9, fp, ip, sp, lr}

08011cdc <DisplayUdf::ShowHostName()>:
 8011cdc:	b510      	push	{r4, lr}
 8011cde:	4604      	mov	r4, r0
 8011ce0:	f890 1043 	ldrb.w	r1, [r0, #67]	; 0x43
 8011ce4:	6980      	ldr	r0, [r0, #24]
 8011ce6:	f7ff ff30 	bl	8011b4a <Display::ClearLine(unsigned char) [clone .isra.0]>
 8011cea:	4b05      	ldr	r3, [pc, #20]	; (8011d00 <DisplayUdf::ShowHostName()+0x24>)
 8011cec:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 8011cf0:	681a      	ldr	r2, [r3, #0]
 8011cf2:	69a0      	ldr	r0, [r4, #24]
 8011cf4:	3220      	adds	r2, #32
 8011cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cfa:	f7ff bf14 	b.w	8011b26 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8011cfe:	bf00      	nop
 8011d00:	2000863c 	andcs	r8, r0, ip, lsr r6

08011d04 <DisplayUdf::Show()>:
 8011d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011d06:	4604      	mov	r4, r0
 8011d08:	21ff      	movs	r1, #255	; 0xff
 8011d0a:	f100 033b 	add.w	r3, r0, #59	; 0x3b
 8011d0e:	f100 024f 	add.w	r2, r0, #79	; 0x4f
 8011d12:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8011d16:	2806      	cmp	r0, #6
 8011d18:	bf88      	it	hi
 8011d1a:	7019      	strbhi	r1, [r3, #0]
 8011d1c:	429a      	cmp	r2, r3
 8011d1e:	d1f8      	bne.n	8011d12 <DisplayUdf::Show()+0xe>
 8011d20:	2501      	movs	r5, #1
 8011d22:	4629      	mov	r1, r5
 8011d24:	3501      	adds	r5, #1
 8011d26:	69a0      	ldr	r0, [r4, #24]
 8011d28:	b2ed      	uxtb	r5, r5
 8011d2a:	f7ff ff0e 	bl	8011b4a <Display::ClearLine(unsigned char) [clone .isra.0]>
 8011d2e:	2d06      	cmp	r5, #6
 8011d30:	d1f7      	bne.n	8011d22 <DisplayUdf::Show()+0x1e>
 8011d32:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8011d36:	69a0      	ldr	r0, [r4, #24]
 8011d38:	f104 021c 	add.w	r2, r4, #28
 8011d3c:	f7ff fef3 	bl	8011b26 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8011d40:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8011d44:	69a0      	ldr	r0, [r4, #24]
 8011d46:	4a0d      	ldr	r2, [pc, #52]	; (8011d7c <DisplayUdf::Show()+0x78>)
 8011d48:	f7ff feed 	bl	8011b26 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8011d4c:	4b0c      	ldr	r3, [pc, #48]	; (8011d80 <DisplayUdf::Show()+0x7c>)
 8011d4e:	4a0d      	ldr	r2, [pc, #52]	; (8011d84 <DisplayUdf::Show()+0x80>)
 8011d50:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 8011d54:	9300      	str	r3, [sp, #0]
 8011d56:	4620      	mov	r0, r4
 8011d58:	2303      	movs	r3, #3
 8011d5a:	f7f6 facd 	bl	80082f8 <Display::Printf(unsigned char, char const*, ...)>
 8011d5e:	4620      	mov	r0, r4
 8011d60:	f7ff ff4a 	bl	8011bf8 <DisplayUdf::ShowIpAddress()>
 8011d64:	4620      	mov	r0, r4
 8011d66:	f7ff ff99 	bl	8011c9c <DisplayUdf::ShowGatewayIp()>
 8011d6a:	4620      	mov	r0, r4
 8011d6c:	f7ff ff78 	bl	8011c60 <DisplayUdf::ShowNetmask()>
 8011d70:	4620      	mov	r0, r4
 8011d72:	b003      	add	sp, #12
 8011d74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011d78:	f7ff bfb0 	b.w	8011cdc <DisplayUdf::ShowHostName()>
 8011d7c:	08016889 	stmdaeq	r1, {r0, r3, r7, fp, sp, lr}
 8011d80:	20009cf8 	strdcs	r9, [r0], -r8
 8011d84:	08017ac6 	stmdaeq	r1, {r1, r2, r6, r7, r9, fp, ip, sp, lr}

08011d88 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 8011d88:	3901      	subs	r1, #1
 8011d8a:	b510      	push	{r4, lr}
 8011d8c:	4604      	mov	r4, r0
 8011d8e:	2903      	cmp	r1, #3
 8011d90:	d814      	bhi.n	8011dbc <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 8011d92:	e8df f001 	tbb	[pc, r1]
 8011d96:	281b1402 	ldmdacs	fp, {r1, sl, ip}
 8011d9a:	4b14      	ldr	r3, [pc, #80]	; (8011dec <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8011d9c:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 8011da0:	6818      	ldr	r0, [r3, #0]
 8011da2:	f7f7 fbb3 	bl	800950c <Display::Status(Display7SegmentMessage)>
 8011da6:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8011daa:	69a0      	ldr	r0, [r4, #24]
 8011dac:	f7ff fecd 	bl	8011b4a <Display::ClearLine(unsigned char) [clone .isra.0]>
 8011db0:	4a0f      	ldr	r2, [pc, #60]	; (8011df0 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x68>)
 8011db2:	4620      	mov	r0, r4
 8011db4:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8011db8:	f7f6 fa9e 	bl	80082f8 <Display::Printf(unsigned char, char const*, ...)>
 8011dbc:	bd10      	pop	{r4, pc}
 8011dbe:	f248 0180 	movw	r1, #32896	; 0x8080
 8011dc2:	4b0a      	ldr	r3, [pc, #40]	; (8011dec <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8011dc4:	6818      	ldr	r0, [r3, #0]
 8011dc6:	f7f7 fba1 	bl	800950c <Display::Status(Display7SegmentMessage)>
 8011dca:	e7f7      	b.n	8011dbc <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 8011dcc:	4b07      	ldr	r3, [pc, #28]	; (8011dec <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8011dce:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 8011dd2:	6818      	ldr	r0, [r3, #0]
 8011dd4:	f7f7 fb9a 	bl	800950c <Display::Status(Display7SegmentMessage)>
 8011dd8:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8011ddc:	69a0      	ldr	r0, [r4, #24]
 8011dde:	f7ff feb4 	bl	8011b4a <Display::ClearLine(unsigned char) [clone .isra.0]>
 8011de2:	4a04      	ldr	r2, [pc, #16]	; (8011df4 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x6c>)
 8011de4:	e7e5      	b.n	8011db2 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x2a>
 8011de6:	f645 3179 	movw	r1, #23417	; 0x5b79
 8011dea:	e7ea      	b.n	8011dc2 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x3a>
 8011dec:	20009c68 	andcs	r9, r0, r8, ror #24
 8011df0:	08017ad5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r9, fp, ip, sp, lr}
 8011df4:	08017ae3 	stmdaeq	r1, {r0, r1, r5, r6, r7, r9, fp, ip, sp, lr}

08011df8 <DisplayUdf::ShowShutdown()>:
 8011df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dfc:	4604      	mov	r4, r0
 8011dfe:	6980      	ldr	r0, [r0, #24]
 8011e00:	b1d0      	cbz	r0, 8011e38 <DisplayUdf::ShowShutdown()+0x40>
 8011e02:	f890 8005 	ldrb.w	r8, [r0, #5]
 8011e06:	6803      	ldr	r3, [r0, #0]
 8011e08:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
 8011e0c:	b2ed      	uxtb	r5, r5
 8011e0e:	462a      	mov	r2, r5
 8011e10:	2100      	movs	r1, #0
 8011e12:	6a1b      	ldr	r3, [r3, #32]
 8011e14:	7906      	ldrb	r6, [r0, #4]
 8011e16:	2700      	movs	r7, #0
 8011e18:	4798      	blx	r3
 8011e1a:	3e01      	subs	r6, #1
 8011e1c:	42b7      	cmp	r7, r6
 8011e1e:	69a0      	ldr	r0, [r4, #24]
 8011e20:	d311      	bcc.n	8011e46 <DisplayUdf::ShowShutdown()+0x4e>
 8011e22:	b120      	cbz	r0, 8011e2e <DisplayUdf::ShowShutdown()+0x36>
 8011e24:	6803      	ldr	r3, [r0, #0]
 8011e26:	462a      	mov	r2, r5
 8011e28:	2100      	movs	r1, #0
 8011e2a:	6a1b      	ldr	r3, [r3, #32]
 8011e2c:	4798      	blx	r3
 8011e2e:	4641      	mov	r1, r8
 8011e30:	4a08      	ldr	r2, [pc, #32]	; (8011e54 <DisplayUdf::ShowShutdown()+0x5c>)
 8011e32:	69a0      	ldr	r0, [r4, #24]
 8011e34:	f7ff fe77 	bl	8011b26 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8011e38:	f44f 41de 	mov.w	r1, #28416	; 0x6f00
 8011e3c:	4620      	mov	r0, r4
 8011e3e:	f7f7 fb65 	bl	800950c <Display::Status(Display7SegmentMessage)>
 8011e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e46:	b118      	cbz	r0, 8011e50 <DisplayUdf::ShowShutdown()+0x58>
 8011e48:	6803      	ldr	r3, [r0, #0]
 8011e4a:	2120      	movs	r1, #32
 8011e4c:	695b      	ldr	r3, [r3, #20]
 8011e4e:	4798      	blx	r3
 8011e50:	3701      	adds	r7, #1
 8011e52:	e7e3      	b.n	8011e1c <DisplayUdf::ShowShutdown()+0x24>
 8011e54:	08017af1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r9, fp, ip, sp, lr}

08011e58 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 8011e58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011e5a:	88c6      	ldrh	r6, [r0, #6]
 8011e5c:	8885      	ldrh	r5, [r0, #4]
 8011e5e:	42ae      	cmp	r6, r5
 8011e60:	d216      	bcs.n	8011e90 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 8011e62:	4604      	mov	r4, r0
 8011e64:	6800      	ldr	r0, [r0, #0]
 8011e66:	1bad      	subs	r5, r5, r6
 8011e68:	4430      	add	r0, r6
 8011e6a:	7a26      	ldrb	r6, [r4, #8]
 8011e6c:	b923      	cbnz	r3, 8011e78 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 8011e6e:	b926      	cbnz	r6, 8011e7a <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 8011e70:	9200      	str	r2, [sp, #0]
 8011e72:	460b      	mov	r3, r1
 8011e74:	4a09      	ldr	r2, [pc, #36]	; (8011e9c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 8011e76:	e003      	b.n	8011e80 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8011e78:	b166      	cbz	r6, 8011e94 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 8011e7a:	460b      	mov	r3, r1
 8011e7c:	9200      	str	r2, [sp, #0]
 8011e7e:	4a08      	ldr	r2, [pc, #32]	; (8011ea0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 8011e80:	4629      	mov	r1, r5
 8011e82:	f7f7 f8b5 	bl	8008ff0 <snprintf>
 8011e86:	4285      	cmp	r5, r0
 8011e88:	bfa2      	ittt	ge
 8011e8a:	88e3      	ldrhge	r3, [r4, #6]
 8011e8c:	181b      	addge	r3, r3, r0
 8011e8e:	80e3      	strhge	r3, [r4, #6]
 8011e90:	b002      	add	sp, #8
 8011e92:	bd70      	pop	{r4, r5, r6, pc}
 8011e94:	9200      	str	r2, [sp, #0]
 8011e96:	460b      	mov	r3, r1
 8011e98:	4a02      	ldr	r2, [pc, #8]	; (8011ea4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 8011e9a:	e7f1      	b.n	8011e80 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8011e9c:	08016691 	stmdaeq	r1, {r0, r4, r7, r9, sl, sp, lr}
 8011ea0:	08016688 	stmdaeq	r1, {r3, r7, r9, sl, sp, lr}
 8011ea4:	08016692 	stmdaeq	r1, {r1, r4, r7, r9, sl, sp, lr}

08011ea8 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>:
 8011ea8:	b510      	push	{r4, lr}
 8011eaa:	2220      	movs	r2, #32
 8011eac:	4604      	mov	r4, r0
 8011eae:	f840 1b04 	str.w	r1, [r0], #4
 8011eb2:	2100      	movs	r1, #0
 8011eb4:	f002 f900 	bl	80140b8 <memset>
 8011eb8:	f647 7305 	movw	r3, #32517	; 0x7f05
 8011ebc:	4620      	mov	r0, r4
 8011ebe:	84a3      	strh	r3, [r4, #36]	; 0x24
 8011ec0:	bd10      	pop	{r4, pc}

08011ec2 <DisplayUdfParams::Load()>:
 8011ec2:	b508      	push	{r3, lr}
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	4601      	mov	r1, r0
 8011ec8:	6043      	str	r3, [r0, #4]
 8011eca:	6800      	ldr	r0, [r0, #0]
 8011ecc:	b120      	cbz	r0, 8011ed8 <DisplayUdfParams::Load()+0x16>
 8011ece:	6803      	ldr	r3, [r0, #0]
 8011ed0:	3104      	adds	r1, #4
 8011ed2:	68db      	ldr	r3, [r3, #12]
 8011ed4:	4798      	blx	r3
 8011ed6:	2001      	movs	r0, #1
 8011ed8:	bd08      	pop	{r3, pc}
	...

08011edc <DisplayUdfParams::Load(char const*, unsigned int)>:
 8011edc:	6803      	ldr	r3, [r0, #0]
 8011ede:	b1d3      	cbz	r3, 8011f16 <DisplayUdfParams::Load(char const*, unsigned int)+0x3a>
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011ee4:	460d      	mov	r5, r1
 8011ee6:	4616      	mov	r6, r2
 8011ee8:	4604      	mov	r4, r0
 8011eea:	6043      	str	r3, [r0, #4]
 8011eec:	4602      	mov	r2, r0
 8011eee:	490a      	ldr	r1, [pc, #40]	; (8011f18 <DisplayUdfParams::Load(char const*, unsigned int)+0x3c>)
 8011ef0:	4668      	mov	r0, sp
 8011ef2:	f001 fa87 	bl	8013404 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8011ef6:	4632      	mov	r2, r6
 8011ef8:	4629      	mov	r1, r5
 8011efa:	4668      	mov	r0, sp
 8011efc:	f001 fa86 	bl	801340c <ReadConfigFile::Read(char const*, unsigned int)>
 8011f00:	4621      	mov	r1, r4
 8011f02:	f851 0b04 	ldr.w	r0, [r1], #4
 8011f06:	6803      	ldr	r3, [r0, #0]
 8011f08:	689b      	ldr	r3, [r3, #8]
 8011f0a:	4798      	blx	r3
 8011f0c:	4668      	mov	r0, sp
 8011f0e:	f001 fa7c 	bl	801340a <ReadConfigFile::~ReadConfigFile()>
 8011f12:	b002      	add	sp, #8
 8011f14:	bd70      	pop	{r4, r5, r6, pc}
 8011f16:	4770      	bx	lr
 8011f18:	08011fe5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r8, r9, sl, fp, ip}

08011f1c <DisplayUdfParams::callbackFunction(char const*)>:
 8011f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011f1e:	460e      	mov	r6, r1
 8011f20:	4604      	mov	r4, r0
 8011f22:	492c      	ldr	r1, [pc, #176]	; (8011fd4 <DisplayUdfParams::callbackFunction(char const*)+0xb8>)
 8011f24:	4630      	mov	r0, r6
 8011f26:	f10d 0207 	add.w	r2, sp, #7
 8011f2a:	f001 fba7 	bl	801367c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8011f2e:	b968      	cbnz	r0, 8011f4c <DisplayUdfParams::callbackFunction(char const*)+0x30>
 8011f30:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011f34:	6863      	ldr	r3, [r4, #4]
 8011f36:	2a7f      	cmp	r2, #127	; 0x7f
 8011f38:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8011f3c:	bf14      	ite	ne
 8011f3e:	f043 5300 	orrne.w	r3, r3, #536870912	; 0x20000000
 8011f42:	f023 5300 	biceq.w	r3, r3, #536870912	; 0x20000000
 8011f46:	6063      	str	r3, [r4, #4]
 8011f48:	b003      	add	sp, #12
 8011f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f4c:	4630      	mov	r0, r6
 8011f4e:	4922      	ldr	r1, [pc, #136]	; (8011fd8 <DisplayUdfParams::callbackFunction(char const*)+0xbc>)
 8011f50:	f10d 0207 	add.w	r2, sp, #7
 8011f54:	f001 fb92 	bl	801367c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8011f58:	b958      	cbnz	r0, 8011f72 <DisplayUdfParams::callbackFunction(char const*)+0x56>
 8011f5a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011f5e:	6863      	ldr	r3, [r4, #4]
 8011f60:	2a05      	cmp	r2, #5
 8011f62:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8011f66:	bf14      	ite	ne
 8011f68:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8011f6c:	f023 5380 	biceq.w	r3, r3, #268435456	; 0x10000000
 8011f70:	e7e9      	b.n	8011f46 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8011f72:	4630      	mov	r0, r6
 8011f74:	4919      	ldr	r1, [pc, #100]	; (8011fdc <DisplayUdfParams::callbackFunction(char const*)+0xc0>)
 8011f76:	f10d 0207 	add.w	r2, sp, #7
 8011f7a:	f001 fb7f 	bl	801367c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8011f7e:	b948      	cbnz	r0, 8011f94 <DisplayUdfParams::callbackFunction(char const*)+0x78>
 8011f80:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011f84:	6863      	ldr	r3, [r4, #4]
 8011f86:	b112      	cbz	r2, 8011f8e <DisplayUdfParams::callbackFunction(char const*)+0x72>
 8011f88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011f8c:	e7db      	b.n	8011f46 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8011f8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011f92:	e7d8      	b.n	8011f46 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8011f94:	2500      	movs	r5, #0
 8011f96:	4f12      	ldr	r7, [pc, #72]	; (8011fe0 <DisplayUdfParams::callbackFunction(char const*)+0xc4>)
 8011f98:	4630      	mov	r0, r6
 8011f9a:	f857 1b04 	ldr.w	r1, [r7], #4
 8011f9e:	f10d 0207 	add.w	r2, sp, #7
 8011fa2:	f001 fb6b 	bl	801367c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8011fa6:	b980      	cbnz	r0, 8011fca <DisplayUdfParams::callbackFunction(char const*)+0xae>
 8011fa8:	2301      	movs	r3, #1
 8011faa:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011fae:	40ab      	lsls	r3, r5
 8011fb0:	1e4e      	subs	r6, r1, #1
 8011fb2:	2e05      	cmp	r6, #5
 8011fb4:	6862      	ldr	r2, [r4, #4]
 8011fb6:	4425      	add	r5, r4
 8011fb8:	d802      	bhi.n	8011fc0 <DisplayUdfParams::callbackFunction(char const*)+0xa4>
 8011fba:	7229      	strb	r1, [r5, #8]
 8011fbc:	4313      	orrs	r3, r2
 8011fbe:	e7c2      	b.n	8011f46 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8011fc0:	ea22 0203 	bic.w	r2, r2, r3
 8011fc4:	7228      	strb	r0, [r5, #8]
 8011fc6:	6062      	str	r2, [r4, #4]
 8011fc8:	e7be      	b.n	8011f48 <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 8011fca:	3501      	adds	r5, #1
 8011fcc:	2d14      	cmp	r5, #20
 8011fce:	d1e3      	bne.n	8011f98 <DisplayUdfParams::callbackFunction(char const*)+0x7c>
 8011fd0:	e7ba      	b.n	8011f48 <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 8011fd2:	bf00      	nop
 8011fd4:	08017bb2 	stmdaeq	r1, {r1, r4, r5, r7, r8, r9, fp, ip, sp, lr}
 8011fd8:	08017b7a 	stmdaeq	r1, {r1, r3, r4, r5, r6, r8, r9, fp, ip, sp, lr}
 8011fdc:	08017b88 	stmdaeq	r1, {r3, r7, r8, r9, fp, ip, sp, lr}
 8011fe0:	08017b04 	stmdaeq	r1, {r2, r8, r9, fp, ip, sp, lr}

08011fe4 <DisplayUdfParams::staticCallbackFunction(void*, char const*)>:
 8011fe4:	f7ff bf9a 	b.w	8011f1c <DisplayUdfParams::callbackFunction(char const*)>

08011fe8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>:
 8011fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fec:	4604      	mov	r4, r0
 8011fee:	4615      	mov	r5, r2
 8011ff0:	461e      	mov	r6, r3
 8011ff2:	b086      	sub	sp, #24
 8011ff4:	3004      	adds	r0, #4
 8011ff6:	b379      	cbz	r1, 8012058 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x70>
 8011ff8:	2222      	movs	r2, #34	; 0x22
 8011ffa:	f002 f846 	bl	801408a <memmove>
 8011ffe:	462a      	mov	r2, r5
 8012000:	4633      	mov	r3, r6
 8012002:	493d      	ldr	r1, [pc, #244]	; (80120f8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x110>)
 8012004:	a803      	add	r0, sp, #12
 8012006:	f001 f95d 	bl	80132c4 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 801200a:	6863      	ldr	r3, [r4, #4]
 801200c:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8012010:	493a      	ldr	r1, [pc, #232]	; (80120fc <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x114>)
 8012012:	f3c3 7340 	ubfx	r3, r3, #29, #1
 8012016:	a803      	add	r0, sp, #12
 8012018:	f7ff ff1e 	bl	8011e58 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 801201c:	6863      	ldr	r3, [r4, #4]
 801201e:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8012022:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8012026:	4936      	ldr	r1, [pc, #216]	; (8012100 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x118>)
 8012028:	a803      	add	r0, sp, #12
 801202a:	f7ff ff15 	bl	8011e58 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 801202e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8012032:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8012036:	6863      	ldr	r3, [r4, #4]
 8012038:	42aa      	cmp	r2, r5
 801203a:	d226      	bcs.n	801208a <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xa2>
 801203c:	9803      	ldr	r0, [sp, #12]
 801203e:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
 8012042:	4410      	add	r0, r2
 8012044:	eba5 0502 	sub.w	r5, r5, r2
 8012048:	f89d 2014 	ldrb.w	r2, [sp, #20]
 801204c:	d10b      	bne.n	8012066 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x7e>
 801204e:	b962      	cbnz	r2, 801206a <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x82>
 8012050:	9200      	str	r2, [sp, #0]
 8012052:	4b2c      	ldr	r3, [pc, #176]	; (8012104 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 8012054:	4a2c      	ldr	r2, [pc, #176]	; (8012108 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x120>)
 8012056:	e00e      	b.n	8012076 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 8012058:	6823      	ldr	r3, [r4, #0]
 801205a:	4601      	mov	r1, r0
 801205c:	681a      	ldr	r2, [r3, #0]
 801205e:	4618      	mov	r0, r3
 8012060:	68d2      	ldr	r2, [r2, #12]
 8012062:	4790      	blx	r2
 8012064:	e7cb      	b.n	8011ffe <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x16>
 8012066:	2a00      	cmp	r2, #0
 8012068:	d041      	beq.n	80120ee <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x106>
 801206a:	3b00      	subs	r3, #0
 801206c:	bf18      	it	ne
 801206e:	2301      	movne	r3, #1
 8012070:	4a26      	ldr	r2, [pc, #152]	; (801210c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x124>)
 8012072:	9300      	str	r3, [sp, #0]
 8012074:	4b23      	ldr	r3, [pc, #140]	; (8012104 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 8012076:	4629      	mov	r1, r5
 8012078:	f7f6 ffba 	bl	8008ff0 <snprintf>
 801207c:	4285      	cmp	r5, r0
 801207e:	bfa2      	ittt	ge
 8012080:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8012084:	181b      	addge	r3, r3, r0
 8012086:	f8ad 3012 	strhge.w	r3, [sp, #18]
 801208a:	2500      	movs	r5, #0
 801208c:	2701      	movs	r7, #1
 801208e:	4e20      	ldr	r6, [pc, #128]	; (8012110 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x128>)
 8012090:	f104 0808 	add.w	r8, r4, #8
 8012094:	f856 1b04 	ldr.w	r1, [r6], #4
 8012098:	780b      	ldrb	r3, [r1, #0]
 801209a:	b15b      	cbz	r3, 80120b4 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xcc>
 801209c:	6862      	ldr	r2, [r4, #4]
 801209e:	fa07 f305 	lsl.w	r3, r7, r5
 80120a2:	4393      	bics	r3, r2
 80120a4:	bf0c      	ite	eq
 80120a6:	2301      	moveq	r3, #1
 80120a8:	2300      	movne	r3, #0
 80120aa:	f818 2005 	ldrb.w	r2, [r8, r5]
 80120ae:	a803      	add	r0, sp, #12
 80120b0:	f7ff fed2 	bl	8011e58 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 80120b4:	3501      	adds	r5, #1
 80120b6:	2d14      	cmp	r5, #20
 80120b8:	d1ec      	bne.n	8012094 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xac>
 80120ba:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80120be:	b17b      	cbz	r3, 80120e0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xf8>
 80120c0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80120c4:	9b03      	ldr	r3, [sp, #12]
 80120c6:	4413      	add	r3, r2
 80120c8:	227d      	movs	r2, #125	; 0x7d
 80120ca:	f803 2c01 	strb.w	r2, [r3, #-1]
 80120ce:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80120d2:	9903      	ldr	r1, [sp, #12]
 80120d4:	54ca      	strb	r2, [r1, r3]
 80120d6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80120da:	3301      	adds	r3, #1
 80120dc:	f8ad 3012 	strh.w	r3, [sp, #18]
 80120e0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80120e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80120e6:	601a      	str	r2, [r3, #0]
 80120e8:	b006      	add	sp, #24
 80120ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120ee:	2301      	movs	r3, #1
 80120f0:	4a08      	ldr	r2, [pc, #32]	; (8012114 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x12c>)
 80120f2:	9300      	str	r3, [sp, #0]
 80120f4:	4b03      	ldr	r3, [pc, #12]	; (8012104 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 80120f6:	e7be      	b.n	8012076 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 80120f8:	08017ba6 	stmdaeq	r1, {r1, r2, r5, r7, r8, r9, fp, ip, sp, lr}
 80120fc:	08017bb2 	stmdaeq	r1, {r1, r4, r5, r7, r8, r9, fp, ip, sp, lr}
 8012100:	08017b7a 	stmdaeq	r1, {r1, r3, r4, r5, r6, r8, r9, fp, ip, sp, lr}
 8012104:	08017b88 	stmdaeq	r1, {r3, r7, r8, r9, fp, ip, sp, lr}
 8012108:	08016691 	stmdaeq	r1, {r0, r4, r7, r9, sl, sp, lr}
 801210c:	08016688 	stmdaeq	r1, {r3, r7, r9, sl, sp, lr}
 8012110:	08017b04 	stmdaeq	r1, {r2, r8, r9, fp, ip, sp, lr}
 8012114:	08016692 	stmdaeq	r1, {r1, r4, r7, r9, sl, sp, lr}

08012118 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>:
 8012118:	b513      	push	{r0, r1, r4, lr}
 801211a:	6804      	ldr	r4, [r0, #0]
 801211c:	b914      	cbnz	r4, 8012124 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0xc>
 801211e:	601c      	str	r4, [r3, #0]
 8012120:	b002      	add	sp, #8
 8012122:	bd10      	pop	{r4, pc}
 8012124:	9300      	str	r3, [sp, #0]
 8012126:	4613      	mov	r3, r2
 8012128:	460a      	mov	r2, r1
 801212a:	2100      	movs	r1, #0
 801212c:	f7ff ff5c 	bl	8011fe8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>
 8012130:	e7f6      	b.n	8012120 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0x8>

08012132 <DisplayUdfParams::Set(DisplayUdf*)>:
 8012132:	6843      	ldr	r3, [r0, #4]
 8012134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012138:	009a      	lsls	r2, r3, #2
 801213a:	4604      	mov	r4, r0
 801213c:	460e      	mov	r6, r1
 801213e:	d506      	bpl.n	801214e <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8012140:	6988      	ldr	r0, [r1, #24]
 8012142:	b120      	cbz	r0, 801214e <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8012144:	6803      	ldr	r3, [r0, #0]
 8012146:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 801214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801214c:	4798      	blx	r3
 801214e:	6863      	ldr	r3, [r4, #4]
 8012150:	69b0      	ldr	r0, [r6, #24]
 8012152:	00db      	lsls	r3, r3, #3
 8012154:	bf41      	itttt	mi
 8012156:	f64e 2260 	movwmi	r2, #60000	; 0xea60
 801215a:	f894 3024 	ldrbmi.w	r3, [r4, #36]	; 0x24
 801215e:	4353      	mulmi	r3, r2
 8012160:	6173      	strmi	r3, [r6, #20]
 8012162:	6861      	ldr	r1, [r4, #4]
 8012164:	f3c1 7180 	ubfx	r1, r1, #30, #1
 8012168:	b110      	cbz	r0, 8012170 <DisplayUdfParams::Set(DisplayUdf*)+0x3e>
 801216a:	6803      	ldr	r3, [r0, #0]
 801216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801216e:	4798      	blx	r3
 8012170:	2500      	movs	r5, #0
 8012172:	2701      	movs	r7, #1
 8012174:	f104 0808 	add.w	r8, r4, #8
 8012178:	6862      	ldr	r2, [r4, #4]
 801217a:	fa07 f305 	lsl.w	r3, r7, r5
 801217e:	4393      	bics	r3, r2
 8012180:	d105      	bne.n	801218e <DisplayUdfParams::Set(DisplayUdf*)+0x5c>
 8012182:	462a      	mov	r2, r5
 8012184:	4630      	mov	r0, r6
 8012186:	f818 1005 	ldrb.w	r1, [r8, r5]
 801218a:	f7ff fd0c 	bl	8011ba6 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 801218e:	3501      	adds	r5, #1
 8012190:	2d14      	cmp	r5, #20
 8012192:	d1f1      	bne.n	8012178 <DisplayUdfParams::Set(DisplayUdf*)+0x46>
 8012194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012198 <DisplayUdfParams::Dump()>:
 8012198:	4770      	bx	lr
	...

0801219c <artnet::display_shortname(char const*)>:
 801219c:	4b02      	ldr	r3, [pc, #8]	; (80121a8 <artnet::display_shortname(char const*)+0xc>)
 801219e:	6819      	ldr	r1, [r3, #0]
 80121a0:	4b02      	ldr	r3, [pc, #8]	; (80121ac <artnet::display_shortname(char const*)+0x10>)
 80121a2:	6818      	ldr	r0, [r3, #0]
 80121a4:	f000 b81e 	b.w	80121e4 <DisplayUdf::ShowNodeName(ArtNetNode*)>
 80121a8:	200018c4 	andcs	r1, r0, r4, asr #17
 80121ac:	20008c0c 	andcs	r8, r0, ip, lsl #24

080121b0 <artnet::display_longname(char const*)>:
 80121b0:	4770      	bx	lr
	...

080121b4 <artnet::display_universe_switch(unsigned int, unsigned char)>:
 80121b4:	4b02      	ldr	r3, [pc, #8]	; (80121c0 <artnet::display_universe_switch(unsigned int, unsigned char)+0xc>)
 80121b6:	6819      	ldr	r1, [r3, #0]
 80121b8:	4b02      	ldr	r3, [pc, #8]	; (80121c4 <artnet::display_universe_switch(unsigned int, unsigned char)+0x10>)
 80121ba:	6818      	ldr	r0, [r3, #0]
 80121bc:	f000 b834 	b.w	8012228 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 80121c0:	200018c4 	andcs	r1, r0, r4, asr #17
 80121c4:	20008c0c 	andcs	r8, r0, ip, lsl #24

080121c8 <artnet::display_merge_mode(unsigned int, lightset::MergeMode)>:
 80121c8:	4b02      	ldr	r3, [pc, #8]	; (80121d4 <artnet::display_merge_mode(unsigned int, lightset::MergeMode)+0xc>)
 80121ca:	6819      	ldr	r1, [r3, #0]
 80121cc:	4b02      	ldr	r3, [pc, #8]	; (80121d8 <artnet::display_merge_mode(unsigned int, lightset::MergeMode)+0x10>)
 80121ce:	6818      	ldr	r0, [r3, #0]
 80121d0:	f000 b82a 	b.w	8012228 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 80121d4:	200018c4 	andcs	r1, r0, r4, asr #17
 80121d8:	20008c0c 	andcs	r8, r0, ip, lsl #24

080121dc <artnet::display_port_protocol(unsigned int, artnet::PortProtocol)>:
 80121dc:	f7ff bff4 	b.w	80121c8 <artnet::display_merge_mode(unsigned int, lightset::MergeMode)>

080121e0 <artnet::display_rdm_enabled(unsigned int, bool)>:
 80121e0:	4770      	bx	lr

080121e2 <artnet::display_failsafe(unsigned char)>:
 80121e2:	4770      	bx	lr

080121e4 <DisplayUdf::ShowNodeName(ArtNetNode*)>:
 80121e4:	b570      	push	{r4, r5, r6, lr}
 80121e6:	4605      	mov	r5, r0
 80121e8:	6980      	ldr	r0, [r0, #24]
 80121ea:	460c      	mov	r4, r1
 80121ec:	b120      	cbz	r0, 80121f8 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x14>
 80121ee:	6803      	ldr	r3, [r0, #0]
 80121f0:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
 80121f4:	691b      	ldr	r3, [r3, #16]
 80121f6:	4798      	blx	r3
 80121f8:	69a8      	ldr	r0, [r5, #24]
 80121fa:	f104 0238 	add.w	r2, r4, #56	; 0x38
 80121fe:	b190      	cbz	r0, 8012226 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x42>
 8012200:	2300      	movs	r3, #0
 8012202:	7906      	ldrb	r6, [r0, #4]
 8012204:	3437      	adds	r4, #55	; 0x37
 8012206:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 801220a:	b119      	cbz	r1, 8012214 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x30>
 801220c:	1c59      	adds	r1, r3, #1
 801220e:	429e      	cmp	r6, r3
 8012210:	460b      	mov	r3, r1
 8012212:	dcf8      	bgt.n	8012206 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x22>
 8012214:	6801      	ldr	r1, [r0, #0]
 8012216:	b2db      	uxtb	r3, r3
 8012218:	69cc      	ldr	r4, [r1, #28]
 801221a:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
 801221e:	46a4      	mov	ip, r4
 8012220:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012224:	4760      	bx	ip
 8012226:	bd70      	pop	{r4, r5, r6, pc}

08012228 <DisplayUdf::ShowUniverse(ArtNetNode*)>:
 8012228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801222c:	460c      	mov	r4, r1
 801222e:	b089      	sub	sp, #36	; 0x24
 8012230:	4606      	mov	r6, r0
 8012232:	2301      	movs	r3, #1
 8012234:	2100      	movs	r1, #0
 8012236:	4620      	mov	r0, r4
 8012238:	f10d 021f 	add.w	r2, sp, #31
 801223c:	f7f8 fbec 	bl	800aa18 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 8012240:	b1e8      	cbz	r0, 801227e <DisplayUdf::ShowUniverse(ArtNetNode*)+0x56>
 8012242:	f8d4 5a18 	ldr.w	r5, [r4, #2584]	; 0xa18
 8012246:	4a2b      	ldr	r2, [pc, #172]	; (80122f4 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xcc>)
 8012248:	4b2b      	ldr	r3, [pc, #172]	; (80122f8 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd0>)
 801224a:	4f2c      	ldr	r7, [pc, #176]	; (80122fc <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd4>)
 801224c:	2d00      	cmp	r5, #0
 801224e:	bf18      	it	ne
 8012250:	4613      	movne	r3, r2
 8012252:	f8d4 5a20 	ldr.w	r5, [r4, #2592]	; 0xa20
 8012256:	4a2a      	ldr	r2, [pc, #168]	; (8012300 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd8>)
 8012258:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
 801225c:	2d00      	cmp	r5, #0
 801225e:	bf18      	it	ne
 8012260:	463a      	movne	r2, r7
 8012262:	f89d 001f 	ldrb.w	r0, [sp, #31]
 8012266:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801226a:	e9cd 1000 	strd	r1, r0, [sp]
 801226e:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8012272:	4630      	mov	r0, r6
 8012274:	4a23      	ldr	r2, [pc, #140]	; (8012304 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xdc>)
 8012276:	f896 1040 	ldrb.w	r1, [r6, #64]	; 0x40
 801227a:	f7f6 f83d 	bl	80082f8 <Display::Printf(unsigned char, char const*, ...)>
 801227e:	4627      	mov	r7, r4
 8012280:	2500      	movs	r5, #0
 8012282:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80122f8 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd0>
 8012286:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80122f4 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xcc>
 801228a:	f8df a074 	ldr.w	sl, [pc, #116]	; 8012300 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd8>
 801228e:	4629      	mov	r1, r5
 8012290:	2301      	movs	r3, #1
 8012292:	4620      	mov	r0, r4
 8012294:	f10d 021f 	add.w	r2, sp, #31
 8012298:	f7f8 fbbe 	bl	800aa18 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 801229c:	3501      	adds	r5, #1
 801229e:	b308      	cbz	r0, 80122e4 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xbc>
 80122a0:	f8d7 ca18 	ldr.w	ip, [r7, #2584]	; 0xa18
 80122a4:	f8df b054 	ldr.w	fp, [pc, #84]	; 80122fc <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd4>
 80122a8:	f1bc 0f00 	cmp.w	ip, #0
 80122ac:	bf0c      	ite	eq
 80122ae:	46c6      	moveq	lr, r8
 80122b0:	46ce      	movne	lr, r9
 80122b2:	f8d7 ca20 	ldr.w	ip, [r7, #2592]	; 0xa20
 80122b6:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
 80122ba:	f1bc 0f00 	cmp.w	ip, #0
 80122be:	bf08      	it	eq
 80122c0:	46d3      	moveq	fp, sl
 80122c2:	f89d 001f 	ldrb.w	r0, [sp, #31]
 80122c6:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80122ca:	e9cd 2001 	strd	r2, r0, [sp, #4]
 80122ce:	e9cd eb03 	strd	lr, fp, [sp, #12]
 80122d2:	9300      	str	r3, [sp, #0]
 80122d4:	f106 0143 	add.w	r1, r6, #67	; 0x43
 80122d8:	462b      	mov	r3, r5
 80122da:	4630      	mov	r0, r6
 80122dc:	4a0a      	ldr	r2, [pc, #40]	; (8012308 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xe0>)
 80122de:	5d49      	ldrb	r1, [r1, r5]
 80122e0:	f7f6 f80a 	bl	80082f8 <Display::Printf(unsigned char, char const*, ...)>
 80122e4:	2d04      	cmp	r5, #4
 80122e6:	f107 0728 	add.w	r7, r7, #40	; 0x28
 80122ea:	d1d0      	bne.n	801228e <DisplayUdf::ShowUniverse(ArtNetNode*)+0x66>
 80122ec:	b009      	add	sp, #36	; 0x24
 80122ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122f2:	bf00      	nop
 80122f4:	08016906 	stmdaeq	r1, {r1, r2, r8, fp, sp, lr}
 80122f8:	08016902 	stmdaeq	r1, {r1, r8, fp, sp, lr}
 80122fc:	08016912 	stmdaeq	r1, {r1, r4, r8, fp, sp, lr}
 8012300:	08017bbc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r8, r9, fp, ip, sp, lr}
 8012304:	08017bc1 	stmdaeq	r1, {r0, r6, r7, r8, r9, fp, ip, sp, lr}
 8012308:	08017bd5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, r9, fp, ip, sp, lr}

0801230c <DisplayUdf::ShowDestinationIp(ArtNetNode*)>:
 801230c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012310:	4606      	mov	r6, r0
 8012312:	2541      	movs	r5, #65	; 0x41
 8012314:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8012354 <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x48>
 8012318:	b085      	sub	sp, #20
 801231a:	f100 0849 	add.w	r8, r0, #73	; 0x49
 801231e:	f501 67d3 	add.w	r7, r1, #1688	; 0x698
 8012322:	012b      	lsls	r3, r5, #4
 8012324:	58fc      	ldr	r4, [r7, r3]
 8012326:	464a      	mov	r2, r9
 8012328:	0e23      	lsrs	r3, r4, #24
 801232a:	9303      	str	r3, [sp, #12]
 801232c:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8012330:	9302      	str	r3, [sp, #8]
 8012332:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8012336:	b2e4      	uxtb	r4, r4
 8012338:	9301      	str	r3, [sp, #4]
 801233a:	9400      	str	r4, [sp, #0]
 801233c:	462b      	mov	r3, r5
 801233e:	4630      	mov	r0, r6
 8012340:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8012344:	3501      	adds	r5, #1
 8012346:	f7f5 ffd7 	bl	80082f8 <Display::Printf(unsigned char, char const*, ...)>
 801234a:	2d45      	cmp	r5, #69	; 0x45
 801234c:	d1e9      	bne.n	8012322 <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x16>
 801234e:	b005      	add	sp, #20
 8012350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012354:	08017beb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r8, r9, fp, ip, sp, lr}

08012358 <DisplayUdf::Show(ArtNetNode*)>:
 8012358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801235a:	4604      	mov	r4, r0
 801235c:	460d      	mov	r5, r1
 801235e:	f7ff fcd1 	bl	8011d04 <DisplayUdf::Show()>
 8012362:	4629      	mov	r1, r5
 8012364:	4620      	mov	r0, r4
 8012366:	f7ff ff3d 	bl	80121e4 <DisplayUdf::ShowNodeName(ArtNetNode*)>
 801236a:	4629      	mov	r1, r5
 801236c:	4620      	mov	r0, r4
 801236e:	f7ff ff5b 	bl	8012228 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8012372:	4629      	mov	r1, r5
 8012374:	4620      	mov	r0, r4
 8012376:	f7ff ffc9 	bl	801230c <DisplayUdf::ShowDestinationIp(ArtNetNode*)>
 801237a:	f895 29fb 	ldrb.w	r2, [r5, #2555]	; 0x9fb
 801237e:	f895 39fa 	ldrb.w	r3, [r5, #2554]	; 0x9fa
 8012382:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8012386:	4413      	add	r3, r2
 8012388:	4620      	mov	r0, r4
 801238a:	4a0d      	ldr	r2, [pc, #52]	; (80123c0 <DisplayUdf::Show(ArtNetNode*)+0x68>)
 801238c:	f7f5 ffb4 	bl	80082f8 <Display::Printf(unsigned char, char const*, ...)>
 8012390:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8012392:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
 8012396:	2a02      	cmp	r2, #2
 8012398:	d001      	beq.n	801239e <DisplayUdf::Show(ArtNetNode*)+0x46>
 801239a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801239c:	b92b      	cbnz	r3, 80123aa <DisplayUdf::Show(ArtNetNode*)+0x52>
 801239e:	4620      	mov	r0, r4
 80123a0:	4a08      	ldr	r2, [pc, #32]	; (80123c4 <DisplayUdf::Show(ArtNetNode*)+0x6c>)
 80123a2:	f7f5 ffa9 	bl	80082f8 <Display::Printf(unsigned char, char const*, ...)>
 80123a6:	b003      	add	sp, #12
 80123a8:	bd30      	pop	{r4, r5, pc}
 80123aa:	4807      	ldr	r0, [pc, #28]	; (80123c8 <DisplayUdf::Show(ArtNetNode*)+0x70>)
 80123ac:	9300      	str	r3, [sp, #0]
 80123ae:	4b07      	ldr	r3, [pc, #28]	; (80123cc <DisplayUdf::Show(ArtNetNode*)+0x74>)
 80123b0:	2a00      	cmp	r2, #0
 80123b2:	bf08      	it	eq
 80123b4:	4603      	moveq	r3, r0
 80123b6:	4620      	mov	r0, r4
 80123b8:	4a05      	ldr	r2, [pc, #20]	; (80123d0 <DisplayUdf::Show(ArtNetNode*)+0x78>)
 80123ba:	f7f5 ff9d 	bl	80082f8 <Display::Printf(unsigned char, char const*, ...)>
 80123be:	e7f2      	b.n	80123a6 <DisplayUdf::Show(ArtNetNode*)+0x4e>
 80123c0:	08017bfb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, r9, fp, ip, sp, lr}
 80123c4:	08017c02 	stmdaeq	r1, {r1, sl, fp, ip, sp, lr}
 80123c8:	08016c0a 	stmdaeq	r1, {r1, r3, sl, fp, sp, lr}
 80123cc:	08016bff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, fp, sp, lr}
 80123d0:	08017c09 	stmdaeq	r1, {r0, r3, sl, fp, ip, sp, lr}

080123d4 <network::display_emac_start()>:
 80123d4:	4b01      	ldr	r3, [pc, #4]	; (80123dc <network::display_emac_start()+0x8>)
 80123d6:	6818      	ldr	r0, [r3, #0]
 80123d8:	f7ff bbfe 	b.w	8011bd8 <DisplayUdf::ShowEmacStart()>
 80123dc:	20008c0c 	andcs	r8, r0, ip, lsl #24

080123e0 <network::display_ip()>:
 80123e0:	4b01      	ldr	r3, [pc, #4]	; (80123e8 <network::display_ip()+0x8>)
 80123e2:	6818      	ldr	r0, [r3, #0]
 80123e4:	f7ff bc08 	b.w	8011bf8 <DisplayUdf::ShowIpAddress()>
 80123e8:	20008c0c 	andcs	r8, r0, ip, lsl #24

080123ec <network::display_netmask()>:
 80123ec:	4b01      	ldr	r3, [pc, #4]	; (80123f4 <network::display_netmask()+0x8>)
 80123ee:	6818      	ldr	r0, [r3, #0]
 80123f0:	f7ff bc36 	b.w	8011c60 <DisplayUdf::ShowNetmask()>
 80123f4:	20008c0c 	andcs	r8, r0, ip, lsl #24

080123f8 <network::display_gateway()>:
 80123f8:	4b01      	ldr	r3, [pc, #4]	; (8012400 <network::display_gateway()+0x8>)
 80123fa:	6818      	ldr	r0, [r3, #0]
 80123fc:	f7ff bc4e 	b.w	8011c9c <DisplayUdf::ShowGatewayIp()>
 8012400:	20008c0c 	andcs	r8, r0, ip, lsl #24

08012404 <network::display_emac_shutdown()>:
 8012404:	4b01      	ldr	r3, [pc, #4]	; (801240c <network::display_emac_shutdown()+0x8>)
 8012406:	6818      	ldr	r0, [r3, #0]
 8012408:	f7ff bcf6 	b.w	8011df8 <DisplayUdf::ShowShutdown()>
 801240c:	20008c0c 	andcs	r8, r0, ip, lsl #24

08012410 <network::display_dhcp_status(network::dhcp::ClientStatus)>:
 8012410:	4b02      	ldr	r3, [pc, #8]	; (801241c <network::display_dhcp_status(network::dhcp::ClientStatus)+0xc>)
 8012412:	4601      	mov	r1, r0
 8012414:	6818      	ldr	r0, [r3, #0]
 8012416:	f7ff bcb7 	b.w	8011d88 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>
 801241a:	bf00      	nop
 801241c:	20008c0c 	andcs	r8, r0, ip, lsl #24

08012420 <ConfigStore::GetStoreOffset(configstore::Store)>:
 8012420:	2300      	movs	r3, #0
 8012422:	2020      	movs	r0, #32
 8012424:	b510      	push	{r4, lr}
 8012426:	4a04      	ldr	r2, [pc, #16]	; (8012438 <ConfigStore::GetStoreOffset(configstore::Store)+0x18>)
 8012428:	428b      	cmp	r3, r1
 801242a:	d100      	bne.n	801242e <ConfigStore::GetStoreOffset(configstore::Store)+0xe>
 801242c:	bd10      	pop	{r4, pc}
 801242e:	f852 4b04 	ldr.w	r4, [r2], #4
 8012432:	3301      	adds	r3, #1
 8012434:	4420      	add	r0, r4
 8012436:	e7f7      	b.n	8012428 <ConfigStore::GetStoreOffset(configstore::Store)+0x8>
 8012438:	08017c14 	stmdaeq	r1, {r2, r4, sl, fp, ip, sp, lr}

0801243c <ConfigStore::Init()>:
 801243c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012440:	b085      	sub	sp, #20
 8012442:	4607      	mov	r7, r0
 8012444:	f000 fab0 	bl	80129a8 <StoreDevice::GetSectorSize() const>
 8012448:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 801244c:	4605      	mov	r5, r0
 801244e:	d004      	beq.n	801245a <ConfigStore::Init()+0x1e>
 8012450:	2500      	movs	r5, #0
 8012452:	4628      	mov	r0, r5
 8012454:	b005      	add	sp, #20
 8012456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801245a:	4638      	mov	r0, r7
 801245c:	f000 faa2 	bl	80129a4 <StoreDevice::GetSize() const>
 8012460:	4b3a      	ldr	r3, [pc, #232]	; (801254c <ConfigStore::Init()+0x110>)
 8012462:	f5a0 5180 	sub.w	r1, r0, #4096	; 0x1000
 8012466:	f3c1 060b 	ubfx	r6, r1, #0, #12
 801246a:	6019      	str	r1, [r3, #0]
 801246c:	2e00      	cmp	r6, #0
 801246e:	d1ef      	bne.n	8012450 <ConfigStore::Init()+0x14>
 8012470:	4c37      	ldr	r4, [pc, #220]	; (8012550 <ConfigStore::Init()+0x114>)
 8012472:	ab03      	add	r3, sp, #12
 8012474:	462a      	mov	r2, r5
 8012476:	9300      	str	r3, [sp, #0]
 8012478:	4638      	mov	r0, r7
 801247a:	4623      	mov	r3, r4
 801247c:	f000 fa96 	bl	80129ac <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)>
 8012480:	7823      	ldrb	r3, [r4, #0]
 8012482:	2b41      	cmp	r3, #65	; 0x41
 8012484:	bf1c      	itt	ne
 8012486:	2341      	movne	r3, #65	; 0x41
 8012488:	7023      	strbne	r3, [r4, #0]
 801248a:	7863      	ldrb	r3, [r4, #1]
 801248c:	bf14      	ite	ne
 801248e:	4635      	movne	r5, r6
 8012490:	2501      	moveq	r5, #1
 8012492:	2b76      	cmp	r3, #118	; 0x76
 8012494:	bf1c      	itt	ne
 8012496:	2376      	movne	r3, #118	; 0x76
 8012498:	7063      	strbne	r3, [r4, #1]
 801249a:	78a3      	ldrb	r3, [r4, #2]
 801249c:	bf18      	it	ne
 801249e:	2500      	movne	r5, #0
 80124a0:	2b56      	cmp	r3, #86	; 0x56
 80124a2:	bf1c      	itt	ne
 80124a4:	2356      	movne	r3, #86	; 0x56
 80124a6:	70a3      	strbne	r3, [r4, #2]
 80124a8:	78e3      	ldrb	r3, [r4, #3]
 80124aa:	bf18      	it	ne
 80124ac:	2500      	movne	r5, #0
 80124ae:	2b10      	cmp	r3, #16
 80124b0:	d01f      	beq.n	80124f2 <ConfigStore::Init()+0xb6>
 80124b2:	2310      	movs	r3, #16
 80124b4:	70e3      	strb	r3, [r4, #3]
 80124b6:	2201      	movs	r2, #1
 80124b8:	2500      	movs	r5, #0
 80124ba:	f04f 09ff 	mov.w	r9, #255	; 0xff
 80124be:	4b25      	ldr	r3, [pc, #148]	; (8012554 <ConfigStore::Init()+0x118>)
 80124c0:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8012558 <ConfigStore::Init()+0x11c>
 80124c4:	701a      	strb	r2, [r3, #0]
 80124c6:	4631      	mov	r1, r6
 80124c8:	4638      	mov	r0, r7
 80124ca:	f7ff ffa9 	bl	8012420 <ConfigStore::GetStoreOffset(configstore::Store)>
 80124ce:	1823      	adds	r3, r4, r0
 80124d0:	5425      	strb	r5, [r4, r0]
 80124d2:	705d      	strb	r5, [r3, #1]
 80124d4:	709d      	strb	r5, [r3, #2]
 80124d6:	70dd      	strb	r5, [r3, #3]
 80124d8:	f858 3b04 	ldr.w	r3, [r8], #4
 80124dc:	1d02      	adds	r2, r0, #4
 80124de:	4403      	add	r3, r0
 80124e0:	429a      	cmp	r2, r3
 80124e2:	d32f      	bcc.n	8012544 <ConfigStore::Init()+0x108>
 80124e4:	3601      	adds	r6, #1
 80124e6:	2e1c      	cmp	r6, #28
 80124e8:	d1ed      	bne.n	80124c6 <ConfigStore::Init()+0x8a>
 80124ea:	2501      	movs	r5, #1
 80124ec:	4b1b      	ldr	r3, [pc, #108]	; (801255c <ConfigStore::Init()+0x120>)
 80124ee:	601d      	str	r5, [r3, #0]
 80124f0:	e7af      	b.n	8012452 <ConfigStore::Init()+0x16>
 80124f2:	2d00      	cmp	r5, #0
 80124f4:	d0df      	beq.n	80124b6 <ConfigStore::Init()+0x7a>
 80124f6:	f04f 0900 	mov.w	r9, #0
 80124fa:	46c8      	mov	r8, r9
 80124fc:	4631      	mov	r1, r6
 80124fe:	4638      	mov	r0, r7
 8012500:	f7ff ff8e 	bl	8012420 <ConfigStore::GetStoreOffset(configstore::Store)>
 8012504:	5c23      	ldrb	r3, [r4, r0]
 8012506:	2bff      	cmp	r3, #255	; 0xff
 8012508:	d112      	bne.n	8012530 <ConfigStore::Init()+0xf4>
 801250a:	1823      	adds	r3, r4, r0
 801250c:	785a      	ldrb	r2, [r3, #1]
 801250e:	2aff      	cmp	r2, #255	; 0xff
 8012510:	d10e      	bne.n	8012530 <ConfigStore::Init()+0xf4>
 8012512:	789a      	ldrb	r2, [r3, #2]
 8012514:	2aff      	cmp	r2, #255	; 0xff
 8012516:	d10b      	bne.n	8012530 <ConfigStore::Init()+0xf4>
 8012518:	78da      	ldrb	r2, [r3, #3]
 801251a:	2aff      	cmp	r2, #255	; 0xff
 801251c:	d108      	bne.n	8012530 <ConfigStore::Init()+0xf4>
 801251e:	46a9      	mov	r9, r5
 8012520:	f804 8000 	strb.w	r8, [r4, r0]
 8012524:	f883 8001 	strb.w	r8, [r3, #1]
 8012528:	f883 8002 	strb.w	r8, [r3, #2]
 801252c:	f883 8003 	strb.w	r8, [r3, #3]
 8012530:	3601      	adds	r6, #1
 8012532:	2e1c      	cmp	r6, #28
 8012534:	d1e2      	bne.n	80124fc <ConfigStore::Init()+0xc0>
 8012536:	f1b9 0f00 	cmp.w	r9, #0
 801253a:	d08a      	beq.n	8012452 <ConfigStore::Init()+0x16>
 801253c:	2201      	movs	r2, #1
 801253e:	4b07      	ldr	r3, [pc, #28]	; (801255c <ConfigStore::Init()+0x120>)
 8012540:	601a      	str	r2, [r3, #0]
 8012542:	e786      	b.n	8012452 <ConfigStore::Init()+0x16>
 8012544:	f804 9002 	strb.w	r9, [r4, r2]
 8012548:	3201      	adds	r2, #1
 801254a:	e7c9      	b.n	80124e0 <ConfigStore::Init()+0xa4>
 801254c:	20009c14 	andcs	r9, r0, r4, lsl ip
 8012550:	20008c14 	andcs	r8, r0, r4, lsl ip
 8012554:	20009c28 	andcs	r9, r0, r8, lsr #24
 8012558:	08017c14 	stmdaeq	r1, {r2, r4, sl, fp, ip, sp, lr}
 801255c:	20009c20 	andcs	r9, r0, r0, lsr #24

08012560 <ConfigStore::ConfigStore()>:
 8012560:	b538      	push	{r3, r4, r5, lr}
 8012562:	4604      	mov	r4, r0
 8012564:	f000 fa16 	bl	8012994 <StoreDevice::StoreDevice()>
 8012568:	4b0b      	ldr	r3, [pc, #44]	; (8012598 <ConfigStore::ConfigStore()+0x38>)
 801256a:	4d0c      	ldr	r5, [pc, #48]	; (801259c <ConfigStore::ConfigStore()+0x3c>)
 801256c:	601c      	str	r4, [r3, #0]
 801256e:	7863      	ldrb	r3, [r4, #1]
 8012570:	b11b      	cbz	r3, 801257a <ConfigStore::ConfigStore()+0x1a>
 8012572:	4620      	mov	r0, r4
 8012574:	f7ff ff62 	bl	801243c <ConfigStore::Init()>
 8012578:	7028      	strb	r0, [r5, #0]
 801257a:	782b      	ldrb	r3, [r5, #0]
 801257c:	b153      	cbz	r3, 8012594 <ConfigStore::ConfigStore()+0x34>
 801257e:	2320      	movs	r3, #32
 8012580:	2200      	movs	r2, #0
 8012582:	4907      	ldr	r1, [pc, #28]	; (80125a0 <ConfigStore::ConfigStore()+0x40>)
 8012584:	f851 0b04 	ldr.w	r0, [r1], #4
 8012588:	3201      	adds	r2, #1
 801258a:	2a1c      	cmp	r2, #28
 801258c:	4403      	add	r3, r0
 801258e:	d1f9      	bne.n	8012584 <ConfigStore::ConfigStore()+0x24>
 8012590:	4a04      	ldr	r2, [pc, #16]	; (80125a4 <ConfigStore::ConfigStore()+0x44>)
 8012592:	6013      	str	r3, [r2, #0]
 8012594:	4620      	mov	r0, r4
 8012596:	bd38      	pop	{r3, r4, r5, pc}
 8012598:	20009c24 	andcs	r9, r0, r4, lsr #24
 801259c:	20009c18 	andcs	r9, r0, r8, lsl ip
 80125a0:	08017c14 	stmdaeq	r1, {r2, r4, sl, fp, ip, sp, lr}
 80125a4:	20009c1c 	andcs	r9, r0, ip, lsl ip

080125a8 <ConfigStore::ResetSetList(configstore::Store)>:
 80125a8:	b508      	push	{r3, lr}
 80125aa:	f7ff ff39 	bl	8012420 <ConfigStore::GetStoreOffset(configstore::Store)>
 80125ae:	2300      	movs	r3, #0
 80125b0:	4904      	ldr	r1, [pc, #16]	; (80125c4 <ConfigStore::ResetSetList(configstore::Store)+0x1c>)
 80125b2:	1842      	adds	r2, r0, r1
 80125b4:	540b      	strb	r3, [r1, r0]
 80125b6:	7053      	strb	r3, [r2, #1]
 80125b8:	7093      	strb	r3, [r2, #2]
 80125ba:	70d3      	strb	r3, [r2, #3]
 80125bc:	2201      	movs	r2, #1
 80125be:	4b02      	ldr	r3, [pc, #8]	; (80125c8 <ConfigStore::ResetSetList(configstore::Store)+0x20>)
 80125c0:	601a      	str	r2, [r3, #0]
 80125c2:	bd08      	pop	{r3, pc}
 80125c4:	20008c14 	andcs	r8, r0, r4, lsl ip
 80125c8:	20009c20 	andcs	r9, r0, r0, lsr #24

080125cc <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>:
 80125cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125d0:	461c      	mov	r4, r3
 80125d2:	4b19      	ldr	r3, [pc, #100]	; (8012638 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x6c>)
 80125d4:	4616      	mov	r6, r2
 80125d6:	781f      	ldrb	r7, [r3, #0]
 80125d8:	9d07      	ldr	r5, [sp, #28]
 80125da:	b307      	cbz	r7, 801261e <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 80125dc:	f7ff ff20 	bl	8012420 <ConfigStore::GetStoreOffset(configstore::Store)>
 80125e0:	f04f 0c00 	mov.w	ip, #0
 80125e4:	4a15      	ldr	r2, [pc, #84]	; (801263c <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x70>)
 80125e6:	1831      	adds	r1, r6, r0
 80125e8:	1e63      	subs	r3, r4, #1
 80125ea:	9c06      	ldr	r4, [sp, #24]
 80125ec:	4411      	add	r1, r2
 80125ee:	440c      	add	r4, r1
 80125f0:	42a1      	cmp	r1, r4
 80125f2:	d116      	bne.n	8012622 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x56>
 80125f4:	f1bc 0f00 	cmp.w	ip, #0
 80125f8:	d011      	beq.n	801261e <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 80125fa:	4b11      	ldr	r3, [pc, #68]	; (8012640 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x74>)
 80125fc:	6819      	ldr	r1, [r3, #0]
 80125fe:	b109      	cbz	r1, 8012604 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x38>
 8012600:	2906      	cmp	r1, #6
 8012602:	d101      	bne.n	8012608 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x3c>
 8012604:	2101      	movs	r1, #1
 8012606:	6019      	str	r1, [r3, #0]
 8012608:	4b0e      	ldr	r3, [pc, #56]	; (8012644 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x78>)
 801260a:	6819      	ldr	r1, [r3, #0]
 801260c:	4b0e      	ldr	r3, [pc, #56]	; (8012648 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x7c>)
 801260e:	6019      	str	r1, [r3, #0]
 8012610:	b12e      	cbz	r6, 801261e <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 8012612:	b125      	cbz	r5, 801261e <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 8012614:	9b08      	ldr	r3, [sp, #32]
 8012616:	4418      	add	r0, r3
 8012618:	5813      	ldr	r3, [r2, r0]
 801261a:	432b      	orrs	r3, r5
 801261c:	5013      	str	r3, [r2, r0]
 801261e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012622:	f891 8000 	ldrb.w	r8, [r1]
 8012626:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801262a:	3101      	adds	r1, #1
 801262c:	45f0      	cmp	r8, lr
 801262e:	bf1c      	itt	ne
 8012630:	f801 ec01 	strbne.w	lr, [r1, #-1]
 8012634:	46bc      	movne	ip, r7
 8012636:	e7db      	b.n	80125f0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x24>
 8012638:	20009c18 	andcs	r9, r0, r8, lsl ip
 801263c:	20008c14 	andcs	r8, r0, r4, lsl ip
 8012640:	20009c20 	andcs	r9, r0, r0, lsr #24
 8012644:	20009d6c 	andcs	r9, r0, ip, ror #26
 8012648:	20008c10 	andcs	r8, r0, r0, lsl ip

0801264c <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>:
 801264c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012650:	461d      	mov	r5, r3
 8012652:	4b15      	ldr	r3, [pc, #84]	; (80126a8 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x5c>)
 8012654:	b085      	sub	sp, #20
 8012656:	781b      	ldrb	r3, [r3, #0]
 8012658:	4607      	mov	r7, r0
 801265a:	4614      	mov	r4, r2
 801265c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8012660:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8012664:	b193      	cbz	r3, 801268c <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x40>
 8012666:	f7ff fedb 	bl	8012420 <ConfigStore::GetStoreOffset(configstore::Store)>
 801266a:	4a10      	ldr	r2, [pc, #64]	; (80126ac <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x60>)
 801266c:	eb08 0600 	add.w	r6, r8, r0
 8012670:	18b3      	adds	r3, r6, r2
 8012672:	f1b9 0f00 	cmp.w	r9, #0
 8012676:	d013      	beq.n	80126a0 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x54>
 8012678:	5990      	ldr	r0, [r2, r6]
 801267a:	b988      	cbnz	r0, 80126a0 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x54>
 801267c:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8012680:	4623      	mov	r3, r4
 8012682:	4642      	mov	r2, r8
 8012684:	4638      	mov	r0, r7
 8012686:	9500      	str	r5, [sp, #0]
 8012688:	f7ff ffa0 	bl	80125cc <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801268c:	b005      	add	sp, #20
 801268e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012692:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012696:	f804 2f01 	strb.w	r2, [r4, #1]!
 801269a:	429d      	cmp	r5, r3
 801269c:	d1f9      	bne.n	8012692 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x46>
 801269e:	e7f5      	b.n	801268c <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x40>
 80126a0:	3c01      	subs	r4, #1
 80126a2:	441d      	add	r5, r3
 80126a4:	e7f9      	b.n	801269a <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x4e>
 80126a6:	bf00      	nop
 80126a8:	20009c18 	andcs	r9, r0, r8, lsl ip
 80126ac:	20008c14 	andcs	r8, r0, r4, lsl ip

080126b0 <ConfigStore::Flash()>:
 80126b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80126b2:	4c24      	ldr	r4, [pc, #144]	; (8012744 <ConfigStore::Flash()+0x94>)
 80126b4:	6823      	ldr	r3, [r4, #0]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d041      	beq.n	801273e <ConfigStore::Flash()+0x8e>
 80126ba:	3b01      	subs	r3, #1
 80126bc:	2b05      	cmp	r3, #5
 80126be:	d82f      	bhi.n	8012720 <ConfigStore::Flash()+0x70>
 80126c0:	e8df f003 	tbb	[pc, r3]
 80126c4:	2c140b03 			; <UNDEFINED> instruction: 0x2c140b03
 80126c8:	4b1f2e23 	blmi	87ddf5c <__exidx_end+0x7c5bb0>
 80126cc:	681a      	ldr	r2, [r3, #0]
 80126ce:	4b1f      	ldr	r3, [pc, #124]	; (801274c <ConfigStore::Flash()+0x9c>)
 80126d0:	601a      	str	r2, [r3, #0]
 80126d2:	2302      	movs	r3, #2
 80126d4:	6023      	str	r3, [r4, #0]
 80126d6:	2001      	movs	r0, #1
 80126d8:	e02f      	b.n	801273a <ConfigStore::Flash()+0x8a>
 80126da:	4b1b      	ldr	r3, [pc, #108]	; (8012748 <ConfigStore::Flash()+0x98>)
 80126dc:	4a1b      	ldr	r2, [pc, #108]	; (801274c <ConfigStore::Flash()+0x9c>)
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	6812      	ldr	r2, [r2, #0]
 80126e2:	1a9b      	subs	r3, r3, r2
 80126e4:	2b63      	cmp	r3, #99	; 0x63
 80126e6:	d9f6      	bls.n	80126d6 <ConfigStore::Flash()+0x26>
 80126e8:	2303      	movs	r3, #3
 80126ea:	e7f3      	b.n	80126d4 <ConfigStore::Flash()+0x24>
 80126ec:	4918      	ldr	r1, [pc, #96]	; (8012750 <ConfigStore::Flash()+0xa0>)
 80126ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80126f2:	6809      	ldr	r1, [r1, #0]
 80126f4:	ab03      	add	r3, sp, #12
 80126f6:	f000 f963 	bl	80129c0 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)>
 80126fa:	2800      	cmp	r0, #0
 80126fc:	d0eb      	beq.n	80126d6 <ConfigStore::Flash()+0x26>
 80126fe:	4b12      	ldr	r3, [pc, #72]	; (8012748 <ConfigStore::Flash()+0x98>)
 8012700:	681a      	ldr	r2, [r3, #0]
 8012702:	4b12      	ldr	r3, [pc, #72]	; (801274c <ConfigStore::Flash()+0x9c>)
 8012704:	601a      	str	r2, [r3, #0]
 8012706:	2305      	movs	r3, #5
 8012708:	e7e4      	b.n	80126d4 <ConfigStore::Flash()+0x24>
 801270a:	4b0f      	ldr	r3, [pc, #60]	; (8012748 <ConfigStore::Flash()+0x98>)
 801270c:	4a0f      	ldr	r2, [pc, #60]	; (801274c <ConfigStore::Flash()+0x9c>)
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	6812      	ldr	r2, [r2, #0]
 8012712:	1a9b      	subs	r3, r3, r2
 8012714:	2b63      	cmp	r3, #99	; 0x63
 8012716:	d9de      	bls.n	80126d6 <ConfigStore::Flash()+0x26>
 8012718:	2304      	movs	r3, #4
 801271a:	e7db      	b.n	80126d4 <ConfigStore::Flash()+0x24>
 801271c:	2306      	movs	r3, #6
 801271e:	e7d9      	b.n	80126d4 <ConfigStore::Flash()+0x24>
 8012720:	ab03      	add	r3, sp, #12
 8012722:	4a0c      	ldr	r2, [pc, #48]	; (8012754 <ConfigStore::Flash()+0xa4>)
 8012724:	490a      	ldr	r1, [pc, #40]	; (8012750 <ConfigStore::Flash()+0xa0>)
 8012726:	9300      	str	r3, [sp, #0]
 8012728:	6812      	ldr	r2, [r2, #0]
 801272a:	4b0b      	ldr	r3, [pc, #44]	; (8012758 <ConfigStore::Flash()+0xa8>)
 801272c:	6809      	ldr	r1, [r1, #0]
 801272e:	f000 f950 	bl	80129d2 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)>
 8012732:	2800      	cmp	r0, #0
 8012734:	d0cf      	beq.n	80126d6 <ConfigStore::Flash()+0x26>
 8012736:	2000      	movs	r0, #0
 8012738:	6020      	str	r0, [r4, #0]
 801273a:	b004      	add	sp, #16
 801273c:	bd10      	pop	{r4, pc}
 801273e:	4618      	mov	r0, r3
 8012740:	e7fb      	b.n	801273a <ConfigStore::Flash()+0x8a>
 8012742:	bf00      	nop
 8012744:	20009c20 	andcs	r9, r0, r0, lsr #24
 8012748:	20009d6c 	andcs	r9, r0, ip, ror #26
 801274c:	20008c10 	andcs	r8, r0, r0, lsl ip
 8012750:	20009c14 	andcs	r9, r0, r4, lsl ip
 8012754:	20009c1c 	andcs	r9, r0, ip, lsl ip
 8012758:	20008c14 	andcs	r8, r0, r4, lsl ip

0801275c <StoreDisplayUdf::~StoreDisplayUdf()>:
 801275c:	4770      	bx	lr
	...

08012760 <StoreDisplayUdf::Copy(displayudfparams::Params*)>:
 8012760:	b507      	push	{r0, r1, r2, lr}
 8012762:	2300      	movs	r3, #0
 8012764:	460a      	mov	r2, r1
 8012766:	2101      	movs	r1, #1
 8012768:	e9cd 3100 	strd	r3, r1, [sp]
 801276c:	4804      	ldr	r0, [pc, #16]	; (8012780 <StoreDisplayUdf::Copy(displayudfparams::Params*)+0x20>)
 801276e:	2322      	movs	r3, #34	; 0x22
 8012770:	210f      	movs	r1, #15
 8012772:	6800      	ldr	r0, [r0, #0]
 8012774:	f7ff ff6a 	bl	801264c <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8012778:	b003      	add	sp, #12
 801277a:	f85d fb04 	ldr.w	pc, [sp], #4
 801277e:	bf00      	nop
 8012780:	20009c24 	andcs	r9, r0, r4, lsr #24

08012784 <StoreDisplayUdf::Update(displayudfparams::Params const*)>:
 8012784:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012786:	2200      	movs	r2, #0
 8012788:	460b      	mov	r3, r1
 801278a:	2122      	movs	r1, #34	; 0x22
 801278c:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8012790:	4804      	ldr	r0, [pc, #16]	; (80127a4 <StoreDisplayUdf::Update(displayudfparams::Params const*)+0x20>)
 8012792:	9100      	str	r1, [sp, #0]
 8012794:	6800      	ldr	r0, [r0, #0]
 8012796:	210f      	movs	r1, #15
 8012798:	f7ff ff18 	bl	80125cc <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801279c:	b005      	add	sp, #20
 801279e:	f85d fb04 	ldr.w	pc, [sp], #4
 80127a2:	bf00      	nop
 80127a4:	20009c24 	andcs	r9, r0, r4, lsr #24

080127a8 <StoreDisplayUdf::~StoreDisplayUdf()>:
 80127a8:	b510      	push	{r4, lr}
 80127aa:	4604      	mov	r4, r0
 80127ac:	f001 fbd2 	bl	8013f54 <operator delete(void*)>
 80127b0:	4620      	mov	r0, r4
 80127b2:	bd10      	pop	{r4, pc}

080127b4 <StoreDisplayUdf::StoreDisplayUdf()>:
 80127b4:	4a02      	ldr	r2, [pc, #8]	; (80127c0 <StoreDisplayUdf::StoreDisplayUdf()+0xc>)
 80127b6:	6002      	str	r2, [r0, #0]
 80127b8:	4a02      	ldr	r2, [pc, #8]	; (80127c4 <StoreDisplayUdf::StoreDisplayUdf()+0x10>)
 80127ba:	6010      	str	r0, [r2, #0]
 80127bc:	4770      	bx	lr
 80127be:	bf00      	nop
 80127c0:	08017c8c 	stmdaeq	r1, {r2, r3, r7, sl, fp, ip, sp, lr}
 80127c4:	20009c2c 	andcs	r9, r0, ip, lsr #24

080127c8 <StoreNetwork::~StoreNetwork()>:
 80127c8:	4770      	bx	lr

080127ca <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 80127ca:	3804      	subs	r0, #4
 80127cc:	4770      	bx	lr
	...

080127d0 <StoreNetwork::Update(networkparams::Params const*)>:
 80127d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80127d2:	2200      	movs	r2, #0
 80127d4:	460b      	mov	r3, r1
 80127d6:	215e      	movs	r1, #94	; 0x5e
 80127d8:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80127dc:	4804      	ldr	r0, [pc, #16]	; (80127f0 <StoreNetwork::Update(networkparams::Params const*)+0x20>)
 80127de:	9100      	str	r1, [sp, #0]
 80127e0:	6800      	ldr	r0, [r0, #0]
 80127e2:	4611      	mov	r1, r2
 80127e4:	f7ff fef2 	bl	80125cc <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80127e8:	b005      	add	sp, #20
 80127ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80127ee:	bf00      	nop
 80127f0:	20009c24 	andcs	r9, r0, r4, lsr #24

080127f4 <StoreNetwork::SaveDhcp(bool)>:
 80127f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80127f6:	2301      	movs	r3, #1
 80127f8:	f88d 1017 	strb.w	r1, [sp, #23]
 80127fc:	2100      	movs	r1, #0
 80127fe:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8012802:	4805      	ldr	r0, [pc, #20]	; (8012818 <StoreNetwork::SaveDhcp(bool)+0x24>)
 8012804:	9300      	str	r3, [sp, #0]
 8012806:	2214      	movs	r2, #20
 8012808:	6800      	ldr	r0, [r0, #0]
 801280a:	f10d 0317 	add.w	r3, sp, #23
 801280e:	f7ff fedd 	bl	80125cc <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012812:	b007      	add	sp, #28
 8012814:	f85d fb04 	ldr.w	pc, [sp], #4
 8012818:	20009c24 	andcs	r9, r0, r4, lsr #24

0801281c <non-virtual thunk to StoreNetwork::SaveDhcp(bool)>:
 801281c:	f1a0 0004 	sub.w	r0, r0, #4
 8012820:	e7e8      	b.n	80127f4 <StoreNetwork::SaveDhcp(bool)>
 8012822:	bf00      	nop

08012824 <StoreNetwork::SaveGatewayIp(unsigned int)>:
 8012824:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012826:	2308      	movs	r3, #8
 8012828:	9105      	str	r1, [sp, #20]
 801282a:	2100      	movs	r1, #0
 801282c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8012830:	2304      	movs	r3, #4
 8012832:	4805      	ldr	r0, [pc, #20]	; (8012848 <StoreNetwork::SaveGatewayIp(unsigned int)+0x24>)
 8012834:	9300      	str	r3, [sp, #0]
 8012836:	220c      	movs	r2, #12
 8012838:	6800      	ldr	r0, [r0, #0]
 801283a:	ab05      	add	r3, sp, #20
 801283c:	f7ff fec6 	bl	80125cc <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012840:	b007      	add	sp, #28
 8012842:	f85d fb04 	ldr.w	pc, [sp], #4
 8012846:	bf00      	nop
 8012848:	20009c24 	andcs	r9, r0, r4, lsr #24

0801284c <non-virtual thunk to StoreNetwork::SaveGatewayIp(unsigned int)>:
 801284c:	f1a0 0004 	sub.w	r0, r0, #4
 8012850:	e7e8      	b.n	8012824 <StoreNetwork::SaveGatewayIp(unsigned int)>
 8012852:	bf00      	nop

08012854 <StoreNetwork::SaveNetMask(unsigned int)>:
 8012854:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012856:	2304      	movs	r3, #4
 8012858:	9105      	str	r1, [sp, #20]
 801285a:	2100      	movs	r1, #0
 801285c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8012860:	4804      	ldr	r0, [pc, #16]	; (8012874 <StoreNetwork::SaveNetMask(unsigned int)+0x20>)
 8012862:	9300      	str	r3, [sp, #0]
 8012864:	2208      	movs	r2, #8
 8012866:	6800      	ldr	r0, [r0, #0]
 8012868:	ab05      	add	r3, sp, #20
 801286a:	f7ff feaf 	bl	80125cc <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801286e:	b007      	add	sp, #28
 8012870:	f85d fb04 	ldr.w	pc, [sp], #4
 8012874:	20009c24 	andcs	r9, r0, r4, lsr #24

08012878 <non-virtual thunk to StoreNetwork::SaveNetMask(unsigned int)>:
 8012878:	f1a0 0004 	sub.w	r0, r0, #4
 801287c:	e7ea      	b.n	8012854 <StoreNetwork::SaveNetMask(unsigned int)>
 801287e:	bf00      	nop

08012880 <StoreNetwork::SaveIp(unsigned int)>:
 8012880:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012882:	2302      	movs	r3, #2
 8012884:	9105      	str	r1, [sp, #20]
 8012886:	2100      	movs	r1, #0
 8012888:	2204      	movs	r2, #4
 801288a:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801288e:	4804      	ldr	r0, [pc, #16]	; (80128a0 <StoreNetwork::SaveIp(unsigned int)+0x20>)
 8012890:	9200      	str	r2, [sp, #0]
 8012892:	6800      	ldr	r0, [r0, #0]
 8012894:	ab05      	add	r3, sp, #20
 8012896:	f7ff fe99 	bl	80125cc <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801289a:	b007      	add	sp, #28
 801289c:	f85d fb04 	ldr.w	pc, [sp], #4
 80128a0:	20009c24 	andcs	r9, r0, r4, lsr #24

080128a4 <non-virtual thunk to StoreNetwork::SaveIp(unsigned int)>:
 80128a4:	f1a0 0004 	sub.w	r0, r0, #4
 80128a8:	e7ea      	b.n	8012880 <StoreNetwork::SaveIp(unsigned int)>
 80128aa:	bf00      	nop

080128ac <StoreNetwork::SaveHostName(char const*, unsigned int)>:
 80128ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80128ae:	460b      	mov	r3, r1
 80128b0:	2020      	movs	r0, #32
 80128b2:	2100      	movs	r1, #0
 80128b4:	2a40      	cmp	r2, #64	; 0x40
 80128b6:	bf28      	it	cs
 80128b8:	2240      	movcs	r2, #64	; 0x40
 80128ba:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80128be:	4804      	ldr	r0, [pc, #16]	; (80128d0 <StoreNetwork::SaveHostName(char const*, unsigned int)+0x24>)
 80128c0:	9200      	str	r2, [sp, #0]
 80128c2:	6800      	ldr	r0, [r0, #0]
 80128c4:	2215      	movs	r2, #21
 80128c6:	f7ff fe81 	bl	80125cc <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80128ca:	b005      	add	sp, #20
 80128cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80128d0:	20009c24 	andcs	r9, r0, r4, lsr #24

080128d4 <non-virtual thunk to StoreNetwork::SaveHostName(char const*, unsigned int)>:
 80128d4:	f1a0 0004 	sub.w	r0, r0, #4
 80128d8:	e7e8      	b.n	80128ac <StoreNetwork::SaveHostName(char const*, unsigned int)>
 80128da:	bf00      	nop

080128dc <StoreNetwork::~StoreNetwork()>:
 80128dc:	b510      	push	{r4, lr}
 80128de:	4604      	mov	r4, r0
 80128e0:	f001 fb38 	bl	8013f54 <operator delete(void*)>
 80128e4:	4620      	mov	r0, r4
 80128e6:	bd10      	pop	{r4, pc}

080128e8 <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 80128e8:	f1a0 0004 	sub.w	r0, r0, #4
 80128ec:	e7f6      	b.n	80128dc <StoreNetwork::~StoreNetwork()>
	...

080128f0 <StoreNetwork::Copy(networkparams::Params*)>:
 80128f0:	b507      	push	{r0, r1, r2, lr}
 80128f2:	2301      	movs	r3, #1
 80128f4:	460a      	mov	r2, r1
 80128f6:	2100      	movs	r1, #0
 80128f8:	e9cd 1300 	strd	r1, r3, [sp]
 80128fc:	4803      	ldr	r0, [pc, #12]	; (801290c <StoreNetwork::Copy(networkparams::Params*)+0x1c>)
 80128fe:	235e      	movs	r3, #94	; 0x5e
 8012900:	6800      	ldr	r0, [r0, #0]
 8012902:	f7ff fea3 	bl	801264c <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8012906:	b003      	add	sp, #12
 8012908:	f85d fb04 	ldr.w	pc, [sp], #4
 801290c:	20009c24 	andcs	r9, r0, r4, lsr #24

08012910 <StoreNetwork::StoreNetwork()>:
 8012910:	4a03      	ldr	r2, [pc, #12]	; (8012920 <StoreNetwork::StoreNetwork()+0x10>)
 8012912:	6002      	str	r2, [r0, #0]
 8012914:	322c      	adds	r2, #44	; 0x2c
 8012916:	6042      	str	r2, [r0, #4]
 8012918:	4a02      	ldr	r2, [pc, #8]	; (8012924 <StoreNetwork::StoreNetwork()+0x14>)
 801291a:	6010      	str	r0, [r2, #0]
 801291c:	4770      	bx	lr
 801291e:	bf00      	nop
 8012920:	08017ca4 	stmdaeq	r1, {r2, r5, r7, sl, fp, ip, sp, lr}
 8012924:	20009c30 	andcs	r9, r0, r0, lsr ip

08012928 <StoreRemoteConfig::~StoreRemoteConfig()>:
 8012928:	4770      	bx	lr
	...

0801292c <StoreRemoteConfig::Copy(TRemoteConfigParams*)>:
 801292c:	b507      	push	{r0, r1, r2, lr}
 801292e:	2300      	movs	r3, #0
 8012930:	460a      	mov	r2, r1
 8012932:	2101      	movs	r1, #1
 8012934:	e9cd 3100 	strd	r3, r1, [sp]
 8012938:	4804      	ldr	r0, [pc, #16]	; (801294c <StoreRemoteConfig::Copy(TRemoteConfigParams*)+0x20>)
 801293a:	2320      	movs	r3, #32
 801293c:	210c      	movs	r1, #12
 801293e:	6800      	ldr	r0, [r0, #0]
 8012940:	f7ff fe84 	bl	801264c <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8012944:	b003      	add	sp, #12
 8012946:	f85d fb04 	ldr.w	pc, [sp], #4
 801294a:	bf00      	nop
 801294c:	20009c24 	andcs	r9, r0, r4, lsr #24

08012950 <StoreRemoteConfig::Update(TRemoteConfigParams const*)>:
 8012950:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012952:	2200      	movs	r2, #0
 8012954:	460b      	mov	r3, r1
 8012956:	2120      	movs	r1, #32
 8012958:	e9cd 2201 	strd	r2, r2, [sp, #4]
 801295c:	4804      	ldr	r0, [pc, #16]	; (8012970 <StoreRemoteConfig::Update(TRemoteConfigParams const*)+0x20>)
 801295e:	9100      	str	r1, [sp, #0]
 8012960:	6800      	ldr	r0, [r0, #0]
 8012962:	210c      	movs	r1, #12
 8012964:	f7ff fe32 	bl	80125cc <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012968:	b005      	add	sp, #20
 801296a:	f85d fb04 	ldr.w	pc, [sp], #4
 801296e:	bf00      	nop
 8012970:	20009c24 	andcs	r9, r0, r4, lsr #24

08012974 <StoreRemoteConfig::~StoreRemoteConfig()>:
 8012974:	b510      	push	{r4, lr}
 8012976:	4604      	mov	r4, r0
 8012978:	f001 faec 	bl	8013f54 <operator delete(void*)>
 801297c:	4620      	mov	r0, r4
 801297e:	bd10      	pop	{r4, pc}

08012980 <StoreRemoteConfig::StoreRemoteConfig()>:
 8012980:	4a02      	ldr	r2, [pc, #8]	; (801298c <StoreRemoteConfig::StoreRemoteConfig()+0xc>)
 8012982:	6002      	str	r2, [r0, #0]
 8012984:	4a02      	ldr	r2, [pc, #8]	; (8012990 <StoreRemoteConfig::StoreRemoteConfig()+0x10>)
 8012986:	6010      	str	r0, [r2, #0]
 8012988:	4770      	bx	lr
 801298a:	bf00      	nop
 801298c:	08017cf4 	stmdaeq	r1, {r2, r4, r5, r6, r7, sl, fp, ip, sp, lr}
 8012990:	20009c34 	andcs	r9, r0, r4, lsr ip

08012994 <StoreDevice::StoreDevice()>:
 8012994:	b510      	push	{r4, lr}
 8012996:	4604      	mov	r4, r0
 8012998:	f000 fa68 	bl	8012e6c <FlashCode::FlashCode()>
 801299c:	7823      	ldrb	r3, [r4, #0]
 801299e:	4620      	mov	r0, r4
 80129a0:	7063      	strb	r3, [r4, #1]
 80129a2:	bd10      	pop	{r4, pc}

080129a4 <StoreDevice::GetSize() const>:
 80129a4:	f000 ba7c 	b.w	8012ea0 <FlashCode::GetSize() const>

080129a8 <StoreDevice::GetSectorSize() const>:
 80129a8:	f000 ba82 	b.w	8012eb0 <FlashCode::GetSectorSize() const>

080129ac <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)>:
 80129ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80129ae:	ac03      	add	r4, sp, #12
 80129b0:	9400      	str	r4, [sp, #0]
 80129b2:	f000 fa80 	bl	8012eb6 <FlashCode::Read(unsigned int, unsigned int, unsigned char*, flashcode::result&)>
 80129b6:	9b06      	ldr	r3, [sp, #24]
 80129b8:	9a03      	ldr	r2, [sp, #12]
 80129ba:	601a      	str	r2, [r3, #0]
 80129bc:	b004      	add	sp, #16
 80129be:	bd10      	pop	{r4, pc}

080129c0 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)>:
 80129c0:	b513      	push	{r0, r1, r4, lr}
 80129c2:	461c      	mov	r4, r3
 80129c4:	ab01      	add	r3, sp, #4
 80129c6:	f000 fa85 	bl	8012ed4 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)>
 80129ca:	9b01      	ldr	r3, [sp, #4]
 80129cc:	6023      	str	r3, [r4, #0]
 80129ce:	b002      	add	sp, #8
 80129d0:	bd10      	pop	{r4, pc}

080129d2 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)>:
 80129d2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80129d4:	ac03      	add	r4, sp, #12
 80129d6:	9400      	str	r4, [sp, #0]
 80129d8:	f000 fb1c 	bl	8013014 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)>
 80129dc:	9b06      	ldr	r3, [sp, #24]
 80129de:	9a03      	ldr	r2, [sp, #12]
 80129e0:	601a      	str	r2, [r3, #0]
 80129e2:	b004      	add	sp, #16
 80129e4:	bd10      	pop	{r4, pc}

080129e6 <StoreArtNet::SaveUniverse(unsigned int, unsigned short)>:
 80129e6:	4770      	bx	lr

080129e8 <non-virtual thunk to StoreArtNet::SaveUniverse(unsigned int, unsigned short)>:
 80129e8:	4770      	bx	lr

080129ea <StoreArtNet::~StoreArtNet()>:
 80129ea:	4770      	bx	lr

080129ec <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 80129ec:	3804      	subs	r0, #4
 80129ee:	4770      	bx	lr

080129f0 <StoreArtNet::Update(artnetparams::Params const*)>:
 80129f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80129f2:	2200      	movs	r2, #0
 80129f4:	460b      	mov	r3, r1
 80129f6:	2187      	movs	r1, #135	; 0x87
 80129f8:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80129fc:	4804      	ldr	r0, [pc, #16]	; (8012a10 <StoreArtNet::Update(artnetparams::Params const*)+0x20>)
 80129fe:	9100      	str	r1, [sp, #0]
 8012a00:	6800      	ldr	r0, [r0, #0]
 8012a02:	2101      	movs	r1, #1
 8012a04:	f7ff fde2 	bl	80125cc <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012a08:	b005      	add	sp, #20
 8012a0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8012a0e:	bf00      	nop
 8012a10:	20009c24 	andcs	r9, r0, r4, lsr #24

08012a14 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 8012a14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012a16:	4b0d      	ldr	r3, [pc, #52]	; (8012a4c <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x38>)
 8012a18:	f88d 2017 	strb.w	r2, [sp, #23]
 8012a1c:	681a      	ldr	r2, [r3, #0]
 8012a1e:	428a      	cmp	r2, r1
 8012a20:	d811      	bhi.n	8012a46 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x32>
 8012a22:	1a8a      	subs	r2, r1, r2
 8012a24:	2a03      	cmp	r2, #3
 8012a26:	d80e      	bhi.n	8012a46 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x32>
 8012a28:	2300      	movs	r3, #0
 8012a2a:	9302      	str	r3, [sp, #8]
 8012a2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012a30:	2101      	movs	r1, #1
 8012a32:	4093      	lsls	r3, r2
 8012a34:	4806      	ldr	r0, [pc, #24]	; (8012a50 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x3c>)
 8012a36:	9301      	str	r3, [sp, #4]
 8012a38:	9100      	str	r1, [sp, #0]
 8012a3a:	6800      	ldr	r0, [r0, #0]
 8012a3c:	f10d 0317 	add.w	r3, sp, #23
 8012a40:	3267      	adds	r2, #103	; 0x67
 8012a42:	f7ff fdc3 	bl	80125cc <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012a46:	b007      	add	sp, #28
 8012a48:	f85d fb04 	ldr.w	pc, [sp], #4
 8012a4c:	20009c38 	andcs	r9, r0, r8, lsr ip
 8012a50:	20009c24 	andcs	r9, r0, r4, lsr #24

08012a54 <non-virtual thunk to StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 8012a54:	f1a0 0004 	sub.w	r0, r0, #4
 8012a58:	f7ff bfdc 	b.w	8012a14 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>

08012a5c <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)>:
 8012a5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012a5e:	f88d 2017 	strb.w	r2, [sp, #23]
 8012a62:	b951      	cbnz	r1, 8012a7a <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)+0x1e>
 8012a64:	9102      	str	r1, [sp, #8]
 8012a66:	2204      	movs	r2, #4
 8012a68:	2101      	movs	r1, #1
 8012a6a:	e9cd 1200 	strd	r1, r2, [sp]
 8012a6e:	4804      	ldr	r0, [pc, #16]	; (8012a80 <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)+0x24>)
 8012a70:	f10d 0317 	add.w	r3, sp, #23
 8012a74:	6800      	ldr	r0, [r0, #0]
 8012a76:	f7ff fda9 	bl	80125cc <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012a7a:	b007      	add	sp, #28
 8012a7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012a80:	20009c24 	andcs	r9, r0, r4, lsr #24

08012a84 <non-virtual thunk to StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)>:
 8012a84:	f1a0 0004 	sub.w	r0, r0, #4
 8012a88:	f7ff bfe8 	b.w	8012a5c <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)>

08012a8c <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)>:
 8012a8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012a8e:	f88d 2017 	strb.w	r2, [sp, #23]
 8012a92:	b959      	cbnz	r1, 8012aac <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)+0x20>
 8012a94:	2308      	movs	r3, #8
 8012a96:	9102      	str	r1, [sp, #8]
 8012a98:	2101      	movs	r1, #1
 8012a9a:	e9cd 1300 	strd	r1, r3, [sp]
 8012a9e:	4805      	ldr	r0, [pc, #20]	; (8012ab4 <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)+0x28>)
 8012aa0:	2205      	movs	r2, #5
 8012aa2:	6800      	ldr	r0, [r0, #0]
 8012aa4:	f10d 0317 	add.w	r3, sp, #23
 8012aa8:	f7ff fd90 	bl	80125cc <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012aac:	b007      	add	sp, #28
 8012aae:	f85d fb04 	ldr.w	pc, [sp], #4
 8012ab2:	bf00      	nop
 8012ab4:	20009c24 	andcs	r9, r0, r4, lsr #24

08012ab8 <non-virtual thunk to StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)>:
 8012ab8:	f1a0 0004 	sub.w	r0, r0, #4
 8012abc:	f7ff bfe6 	b.w	8012a8c <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)>

08012ac0 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 8012ac0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012ac2:	4b0c      	ldr	r3, [pc, #48]	; (8012af4 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x34>)
 8012ac4:	9205      	str	r2, [sp, #20]
 8012ac6:	681a      	ldr	r2, [r3, #0]
 8012ac8:	428a      	cmp	r2, r1
 8012aca:	d810      	bhi.n	8012aee <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x2e>
 8012acc:	1a8a      	subs	r2, r1, r2
 8012ace:	2a03      	cmp	r2, #3
 8012ad0:	d80d      	bhi.n	8012aee <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x2e>
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	9302      	str	r3, [sp, #8]
 8012ad6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012ada:	2101      	movs	r1, #1
 8012adc:	4093      	lsls	r3, r2
 8012ade:	4806      	ldr	r0, [pc, #24]	; (8012af8 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x38>)
 8012ae0:	9301      	str	r3, [sp, #4]
 8012ae2:	9100      	str	r1, [sp, #0]
 8012ae4:	6800      	ldr	r0, [r0, #0]
 8012ae6:	ab05      	add	r3, sp, #20
 8012ae8:	326c      	adds	r2, #108	; 0x6c
 8012aea:	f7ff fd6f 	bl	80125cc <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012aee:	b007      	add	sp, #28
 8012af0:	f85d fb04 	ldr.w	pc, [sp], #4
 8012af4:	20009c38 	andcs	r9, r0, r8, lsr ip
 8012af8:	20009c24 	andcs	r9, r0, r4, lsr #24

08012afc <non-virtual thunk to StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 8012afc:	f1a0 0004 	sub.w	r0, r0, #4
 8012b00:	f7ff bfde 	b.w	8012ac0 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>

08012b04 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 8012b04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012b06:	4b0c      	ldr	r3, [pc, #48]	; (8012b38 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x34>)
 8012b08:	9205      	str	r2, [sp, #20]
 8012b0a:	681a      	ldr	r2, [r3, #0]
 8012b0c:	428a      	cmp	r2, r1
 8012b0e:	d810      	bhi.n	8012b32 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x2e>
 8012b10:	1a8a      	subs	r2, r1, r2
 8012b12:	2a03      	cmp	r2, #3
 8012b14:	d80d      	bhi.n	8012b32 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x2e>
 8012b16:	2300      	movs	r3, #0
 8012b18:	9302      	str	r3, [sp, #8]
 8012b1a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012b1e:	2101      	movs	r1, #1
 8012b20:	4093      	lsls	r3, r2
 8012b22:	4806      	ldr	r0, [pc, #24]	; (8012b3c <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x38>)
 8012b24:	9301      	str	r3, [sp, #4]
 8012b26:	9100      	str	r1, [sp, #0]
 8012b28:	6800      	ldr	r0, [r0, #0]
 8012b2a:	ab05      	add	r3, sp, #20
 8012b2c:	3271      	adds	r2, #113	; 0x71
 8012b2e:	f7ff fd4d 	bl	80125cc <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012b32:	b007      	add	sp, #28
 8012b34:	f85d fb04 	ldr.w	pc, [sp], #4
 8012b38:	20009c38 	andcs	r9, r0, r8, lsr ip
 8012b3c:	20009c24 	andcs	r9, r0, r4, lsr #24

08012b40 <non-virtual thunk to StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 8012b40:	f1a0 0004 	sub.w	r0, r0, #4
 8012b44:	f7ff bfde 	b.w	8012b04 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>

08012b48 <StoreArtNet::SaveLongName(char const*)>:
 8012b48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012b4a:	460b      	mov	r3, r1
 8012b4c:	2200      	movs	r2, #0
 8012b4e:	2101      	movs	r1, #1
 8012b50:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8012b54:	2240      	movs	r2, #64	; 0x40
 8012b56:	4804      	ldr	r0, [pc, #16]	; (8012b68 <StoreArtNet::SaveLongName(char const*)+0x20>)
 8012b58:	9200      	str	r2, [sp, #0]
 8012b5a:	6800      	ldr	r0, [r0, #0]
 8012b5c:	221e      	movs	r2, #30
 8012b5e:	f7ff fd35 	bl	80125cc <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012b62:	b005      	add	sp, #20
 8012b64:	f85d fb04 	ldr.w	pc, [sp], #4
 8012b68:	20009c24 	andcs	r9, r0, r4, lsr #24

08012b6c <non-virtual thunk to StoreArtNet::SaveLongName(char const*)>:
 8012b6c:	f1a0 0004 	sub.w	r0, r0, #4
 8012b70:	e7ea      	b.n	8012b48 <StoreArtNet::SaveLongName(char const*)>
 8012b72:	bf00      	nop

08012b74 <StoreArtNet::SaveShortName(char const*)>:
 8012b74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012b76:	460b      	mov	r3, r1
 8012b78:	2202      	movs	r2, #2
 8012b7a:	2100      	movs	r1, #0
 8012b7c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8012b80:	2212      	movs	r2, #18
 8012b82:	4805      	ldr	r0, [pc, #20]	; (8012b98 <StoreArtNet::SaveShortName(char const*)+0x24>)
 8012b84:	9200      	str	r2, [sp, #0]
 8012b86:	2101      	movs	r1, #1
 8012b88:	220c      	movs	r2, #12
 8012b8a:	6800      	ldr	r0, [r0, #0]
 8012b8c:	f7ff fd1e 	bl	80125cc <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012b90:	b005      	add	sp, #20
 8012b92:	f85d fb04 	ldr.w	pc, [sp], #4
 8012b96:	bf00      	nop
 8012b98:	20009c24 	andcs	r9, r0, r4, lsr #24

08012b9c <non-virtual thunk to StoreArtNet::SaveShortName(char const*)>:
 8012b9c:	f1a0 0004 	sub.w	r0, r0, #4
 8012ba0:	e7e8      	b.n	8012b74 <StoreArtNet::SaveShortName(char const*)>
 8012ba2:	bf00      	nop

08012ba4 <StoreArtNet::SaveFailSafe(unsigned char)>:
 8012ba4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012ba6:	2310      	movs	r3, #16
 8012ba8:	2200      	movs	r2, #0
 8012baa:	f88d 1017 	strb.w	r1, [sp, #23]
 8012bae:	2101      	movs	r1, #1
 8012bb0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8012bb4:	4805      	ldr	r0, [pc, #20]	; (8012bcc <StoreArtNet::SaveFailSafe(unsigned char)+0x28>)
 8012bb6:	9100      	str	r1, [sp, #0]
 8012bb8:	2206      	movs	r2, #6
 8012bba:	6800      	ldr	r0, [r0, #0]
 8012bbc:	f10d 0317 	add.w	r3, sp, #23
 8012bc0:	f7ff fd04 	bl	80125cc <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012bc4:	b007      	add	sp, #28
 8012bc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8012bca:	bf00      	nop
 8012bcc:	20009c24 	andcs	r9, r0, r4, lsr #24

08012bd0 <non-virtual thunk to StoreArtNet::SaveFailSafe(unsigned char)>:
 8012bd0:	f1a0 0004 	sub.w	r0, r0, #4
 8012bd4:	e7e6      	b.n	8012ba4 <StoreArtNet::SaveFailSafe(unsigned char)>
 8012bd6:	bf00      	nop

08012bd8 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)>:
 8012bd8:	b570      	push	{r4, r5, r6, lr}
 8012bda:	4b1b      	ldr	r3, [pc, #108]	; (8012c48 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x70>)
 8012bdc:	4615      	mov	r5, r2
 8012bde:	681c      	ldr	r4, [r3, #0]
 8012be0:	b086      	sub	sp, #24
 8012be2:	428c      	cmp	r4, r1
 8012be4:	d829      	bhi.n	8012c3a <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x62>
 8012be6:	1b0c      	subs	r4, r1, r4
 8012be8:	2c03      	cmp	r4, #3
 8012bea:	d826      	bhi.n	8012c3a <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x62>
 8012bec:	2308      	movs	r3, #8
 8012bee:	2200      	movs	r2, #0
 8012bf0:	4e16      	ldr	r6, [pc, #88]	; (8012c4c <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x74>)
 8012bf2:	e9cd 3200 	strd	r3, r2, [sp]
 8012bf6:	2101      	movs	r1, #1
 8012bf8:	2302      	movs	r3, #2
 8012bfa:	f10d 0216 	add.w	r2, sp, #22
 8012bfe:	6830      	ldr	r0, [r6, #0]
 8012c00:	f7ff fd24 	bl	801264c <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8012c04:	2201      	movs	r2, #1
 8012c06:	f104 0308 	add.w	r3, r4, #8
 8012c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8012c0e:	40a2      	lsls	r2, r4
 8012c10:	4313      	orrs	r3, r2
 8012c12:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8012c16:	b29b      	uxth	r3, r3
 8012c18:	ea21 0203 	bic.w	r2, r1, r3
 8012c1c:	b97d      	cbnz	r5, 8012c3e <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x66>
 8012c1e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8012c22:	2300      	movs	r3, #0
 8012c24:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8012c28:	2302      	movs	r3, #2
 8012c2a:	2208      	movs	r2, #8
 8012c2c:	9300      	str	r3, [sp, #0]
 8012c2e:	2101      	movs	r1, #1
 8012c30:	6830      	ldr	r0, [r6, #0]
 8012c32:	f10d 0316 	add.w	r3, sp, #22
 8012c36:	f7ff fcc9 	bl	80125cc <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012c3a:	b006      	add	sp, #24
 8012c3c:	bd70      	pop	{r4, r5, r6, pc}
 8012c3e:	4319      	orrs	r1, r3
 8012c40:	f8ad 1016 	strh.w	r1, [sp, #22]
 8012c44:	e7ed      	b.n	8012c22 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x4a>
 8012c46:	bf00      	nop
 8012c48:	20009c38 	andcs	r9, r0, r8, lsr ip
 8012c4c:	20009c24 	andcs	r9, r0, r4, lsr #24

08012c50 <non-virtual thunk to StoreArtNet::SaveRdmEnabled(unsigned int, bool)>:
 8012c50:	f1a0 0004 	sub.w	r0, r0, #4
 8012c54:	f7ff bfc0 	b.w	8012bd8 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)>

08012c58 <StoreArtNet::Copy(artnetparams::Params*)>:
 8012c58:	b507      	push	{r0, r1, r2, lr}
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	460a      	mov	r2, r1
 8012c5e:	2101      	movs	r1, #1
 8012c60:	e9cd 3100 	strd	r3, r1, [sp]
 8012c64:	4803      	ldr	r0, [pc, #12]	; (8012c74 <StoreArtNet::Copy(artnetparams::Params*)+0x1c>)
 8012c66:	2387      	movs	r3, #135	; 0x87
 8012c68:	6800      	ldr	r0, [r0, #0]
 8012c6a:	f7ff fcef 	bl	801264c <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8012c6e:	b003      	add	sp, #12
 8012c70:	f85d fb04 	ldr.w	pc, [sp], #4
 8012c74:	20009c24 	andcs	r9, r0, r4, lsr #24

08012c78 <StoreArtNet::~StoreArtNet()>:
 8012c78:	b510      	push	{r4, lr}
 8012c7a:	4604      	mov	r4, r0
 8012c7c:	f001 f96a 	bl	8013f54 <operator delete(void*)>
 8012c80:	4620      	mov	r0, r4
 8012c82:	bd10      	pop	{r4, pc}

08012c84 <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 8012c84:	f1a0 0004 	sub.w	r0, r0, #4
 8012c88:	e7f6      	b.n	8012c78 <StoreArtNet::~StoreArtNet()>
	...

08012c8c <StoreArtNet::StoreArtNet(unsigned int)>:
 8012c8c:	b510      	push	{r4, lr}
 8012c8e:	4a05      	ldr	r2, [pc, #20]	; (8012ca4 <StoreArtNet::StoreArtNet(unsigned int)+0x18>)
 8012c90:	4b05      	ldr	r3, [pc, #20]	; (8012ca8 <StoreArtNet::StoreArtNet(unsigned int)+0x1c>)
 8012c92:	f102 0408 	add.w	r4, r2, #8
 8012c96:	3248      	adds	r2, #72	; 0x48
 8012c98:	6042      	str	r2, [r0, #4]
 8012c9a:	4a04      	ldr	r2, [pc, #16]	; (8012cac <StoreArtNet::StoreArtNet(unsigned int)+0x20>)
 8012c9c:	6004      	str	r4, [r0, #0]
 8012c9e:	6010      	str	r0, [r2, #0]
 8012ca0:	6019      	str	r1, [r3, #0]
 8012ca2:	bd10      	pop	{r4, pc}
 8012ca4:	08017d04 	stmdaeq	r1, {r2, r8, sl, fp, ip, sp, lr}
 8012ca8:	20009c38 	andcs	r9, r0, r8, lsr ip
 8012cac:	20009c3c 	andcs	r9, r0, ip, lsr ip

08012cb0 <StorePixelDmx::~StorePixelDmx()>:
 8012cb0:	4770      	bx	lr

08012cb2 <non-virtual thunk to StorePixelDmx::~StorePixelDmx()>:
 8012cb2:	3804      	subs	r0, #4
 8012cb4:	4770      	bx	lr
	...

08012cb8 <StorePixelDmx::Update(pixeldmxparams::Params const*)>:
 8012cb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012cba:	2200      	movs	r2, #0
 8012cbc:	460b      	mov	r3, r1
 8012cbe:	2118      	movs	r1, #24
 8012cc0:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8012cc4:	4804      	ldr	r0, [pc, #16]	; (8012cd8 <StorePixelDmx::Update(pixeldmxparams::Params const*)+0x20>)
 8012cc6:	9100      	str	r1, [sp, #0]
 8012cc8:	6800      	ldr	r0, [r0, #0]
 8012cca:	2103      	movs	r1, #3
 8012ccc:	f7ff fc7e 	bl	80125cc <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012cd0:	b005      	add	sp, #20
 8012cd2:	f85d fb04 	ldr.w	pc, [sp], #4
 8012cd6:	bf00      	nop
 8012cd8:	20009c24 	andcs	r9, r0, r4, lsr #24

08012cdc <StorePixelDmx::SaveDmxStartAddress(unsigned short)>:
 8012cdc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012cde:	2304      	movs	r3, #4
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8012ce6:	2302      	movs	r3, #2
 8012ce8:	4806      	ldr	r0, [pc, #24]	; (8012d04 <StorePixelDmx::SaveDmxStartAddress(unsigned short)+0x28>)
 8012cea:	9300      	str	r3, [sp, #0]
 8012cec:	f8ad 1016 	strh.w	r1, [sp, #22]
 8012cf0:	2207      	movs	r2, #7
 8012cf2:	2103      	movs	r1, #3
 8012cf4:	6800      	ldr	r0, [r0, #0]
 8012cf6:	f10d 0316 	add.w	r3, sp, #22
 8012cfa:	f7ff fc67 	bl	80125cc <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012cfe:	b007      	add	sp, #28
 8012d00:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d04:	20009c24 	andcs	r9, r0, r4, lsr #24

08012d08 <non-virtual thunk to StorePixelDmx::SaveDmxStartAddress(unsigned short)>:
 8012d08:	f1a0 0004 	sub.w	r0, r0, #4
 8012d0c:	e7e6      	b.n	8012cdc <StorePixelDmx::SaveDmxStartAddress(unsigned short)>
 8012d0e:	bf00      	nop

08012d10 <StorePixelDmx::SaveTestPattern(unsigned char)>:
 8012d10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012d12:	2308      	movs	r3, #8
 8012d14:	2200      	movs	r2, #0
 8012d16:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8012d1a:	2301      	movs	r3, #1
 8012d1c:	4806      	ldr	r0, [pc, #24]	; (8012d38 <StorePixelDmx::SaveTestPattern(unsigned char)+0x28>)
 8012d1e:	9300      	str	r3, [sp, #0]
 8012d20:	f88d 1017 	strb.w	r1, [sp, #23]
 8012d24:	2210      	movs	r2, #16
 8012d26:	2103      	movs	r1, #3
 8012d28:	6800      	ldr	r0, [r0, #0]
 8012d2a:	f10d 0317 	add.w	r3, sp, #23
 8012d2e:	f7ff fc4d 	bl	80125cc <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012d32:	b007      	add	sp, #28
 8012d34:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d38:	20009c24 	andcs	r9, r0, r4, lsr #24

08012d3c <non-virtual thunk to StorePixelDmx::SaveTestPattern(unsigned char)>:
 8012d3c:	f1a0 0004 	sub.w	r0, r0, #4
 8012d40:	e7e6      	b.n	8012d10 <StorePixelDmx::SaveTestPattern(unsigned char)>
 8012d42:	bf00      	nop

08012d44 <StorePixelDmx::SaveMap(unsigned char)>:
 8012d44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012d46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8012d50:	2301      	movs	r3, #1
 8012d52:	4807      	ldr	r0, [pc, #28]	; (8012d70 <StorePixelDmx::SaveMap(unsigned char)+0x2c>)
 8012d54:	9300      	str	r3, [sp, #0]
 8012d56:	f88d 1017 	strb.w	r1, [sp, #23]
 8012d5a:	2213      	movs	r2, #19
 8012d5c:	2103      	movs	r1, #3
 8012d5e:	6800      	ldr	r0, [r0, #0]
 8012d60:	f10d 0317 	add.w	r3, sp, #23
 8012d64:	f7ff fc32 	bl	80125cc <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012d68:	b007      	add	sp, #28
 8012d6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d6e:	bf00      	nop
 8012d70:	20009c24 	andcs	r9, r0, r4, lsr #24

08012d74 <non-virtual thunk to StorePixelDmx::SaveMap(unsigned char)>:
 8012d74:	f1a0 0004 	sub.w	r0, r0, #4
 8012d78:	e7e4      	b.n	8012d44 <StorePixelDmx::SaveMap(unsigned char)>
 8012d7a:	bf00      	nop

08012d7c <StorePixelDmx::SaveGroupingCount(unsigned short)>:
 8012d7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012d7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012d82:	2200      	movs	r2, #0
 8012d84:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8012d88:	2302      	movs	r3, #2
 8012d8a:	4807      	ldr	r0, [pc, #28]	; (8012da8 <StorePixelDmx::SaveGroupingCount(unsigned short)+0x2c>)
 8012d8c:	9300      	str	r3, [sp, #0]
 8012d8e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8012d92:	2211      	movs	r2, #17
 8012d94:	2103      	movs	r1, #3
 8012d96:	6800      	ldr	r0, [r0, #0]
 8012d98:	f10d 0316 	add.w	r3, sp, #22
 8012d9c:	f7ff fc16 	bl	80125cc <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012da0:	b007      	add	sp, #28
 8012da2:	f85d fb04 	ldr.w	pc, [sp], #4
 8012da6:	bf00      	nop
 8012da8:	20009c24 	andcs	r9, r0, r4, lsr #24

08012dac <non-virtual thunk to StorePixelDmx::SaveGroupingCount(unsigned short)>:
 8012dac:	f1a0 0004 	sub.w	r0, r0, #4
 8012db0:	e7e4      	b.n	8012d7c <StorePixelDmx::SaveGroupingCount(unsigned short)>
 8012db2:	bf00      	nop

08012db4 <StorePixelDmx::SaveCount(unsigned short)>:
 8012db4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012db6:	2302      	movs	r3, #2
 8012db8:	2200      	movs	r2, #0
 8012dba:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8012dbe:	4807      	ldr	r0, [pc, #28]	; (8012ddc <StorePixelDmx::SaveCount(unsigned short)+0x28>)
 8012dc0:	9300      	str	r3, [sp, #0]
 8012dc2:	f8ad 1016 	strh.w	r1, [sp, #22]
 8012dc6:	2205      	movs	r2, #5
 8012dc8:	2103      	movs	r1, #3
 8012dca:	6800      	ldr	r0, [r0, #0]
 8012dcc:	f10d 0316 	add.w	r3, sp, #22
 8012dd0:	f7ff fbfc 	bl	80125cc <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012dd4:	b007      	add	sp, #28
 8012dd6:	f85d fb04 	ldr.w	pc, [sp], #4
 8012dda:	bf00      	nop
 8012ddc:	20009c24 	andcs	r9, r0, r4, lsr #24

08012de0 <non-virtual thunk to StorePixelDmx::SaveCount(unsigned short)>:
 8012de0:	f1a0 0004 	sub.w	r0, r0, #4
 8012de4:	e7e6      	b.n	8012db4 <StorePixelDmx::SaveCount(unsigned short)>
 8012de6:	bf00      	nop

08012de8 <StorePixelDmx::SaveType(unsigned char)>:
 8012de8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012dea:	2301      	movs	r3, #1
 8012dec:	2200      	movs	r2, #0
 8012dee:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8012df2:	4807      	ldr	r0, [pc, #28]	; (8012e10 <StorePixelDmx::SaveType(unsigned char)+0x28>)
 8012df4:	9300      	str	r3, [sp, #0]
 8012df6:	f88d 1017 	strb.w	r1, [sp, #23]
 8012dfa:	2204      	movs	r2, #4
 8012dfc:	2103      	movs	r1, #3
 8012dfe:	6800      	ldr	r0, [r0, #0]
 8012e00:	f10d 0317 	add.w	r3, sp, #23
 8012e04:	f7ff fbe2 	bl	80125cc <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012e08:	b007      	add	sp, #28
 8012e0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8012e0e:	bf00      	nop
 8012e10:	20009c24 	andcs	r9, r0, r4, lsr #24

08012e14 <non-virtual thunk to StorePixelDmx::SaveType(unsigned char)>:
 8012e14:	f1a0 0004 	sub.w	r0, r0, #4
 8012e18:	e7e6      	b.n	8012de8 <StorePixelDmx::SaveType(unsigned char)>
 8012e1a:	bf00      	nop

08012e1c <StorePixelDmx::~StorePixelDmx()>:
 8012e1c:	b510      	push	{r4, lr}
 8012e1e:	4604      	mov	r4, r0
 8012e20:	f001 f898 	bl	8013f54 <operator delete(void*)>
 8012e24:	4620      	mov	r0, r4
 8012e26:	bd10      	pop	{r4, pc}

08012e28 <non-virtual thunk to StorePixelDmx::~StorePixelDmx()>:
 8012e28:	f1a0 0004 	sub.w	r0, r0, #4
 8012e2c:	e7f6      	b.n	8012e1c <StorePixelDmx::~StorePixelDmx()>
	...

08012e30 <StorePixelDmx::Copy(pixeldmxparams::Params*)>:
 8012e30:	b507      	push	{r0, r1, r2, lr}
 8012e32:	2300      	movs	r3, #0
 8012e34:	460a      	mov	r2, r1
 8012e36:	2101      	movs	r1, #1
 8012e38:	e9cd 3100 	strd	r3, r1, [sp]
 8012e3c:	4804      	ldr	r0, [pc, #16]	; (8012e50 <StorePixelDmx::Copy(pixeldmxparams::Params*)+0x20>)
 8012e3e:	2318      	movs	r3, #24
 8012e40:	2103      	movs	r1, #3
 8012e42:	6800      	ldr	r0, [r0, #0]
 8012e44:	f7ff fc02 	bl	801264c <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8012e48:	b003      	add	sp, #12
 8012e4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8012e4e:	bf00      	nop
 8012e50:	20009c24 	andcs	r9, r0, r4, lsr #24

08012e54 <StorePixelDmx::StorePixelDmx()>:
 8012e54:	4a03      	ldr	r2, [pc, #12]	; (8012e64 <StorePixelDmx::StorePixelDmx()+0x10>)
 8012e56:	6002      	str	r2, [r0, #0]
 8012e58:	3230      	adds	r2, #48	; 0x30
 8012e5a:	6042      	str	r2, [r0, #4]
 8012e5c:	4a02      	ldr	r2, [pc, #8]	; (8012e68 <StorePixelDmx::StorePixelDmx()+0x14>)
 8012e5e:	6010      	str	r0, [r2, #0]
 8012e60:	4770      	bx	lr
 8012e62:	bf00      	nop
 8012e64:	08017d84 	stmdaeq	r1, {r2, r7, r8, sl, fp, ip, sp, lr}
 8012e68:	20009c44 	andcs	r9, r0, r4, asr #24

08012e6c <FlashCode::FlashCode()>:
 8012e6c:	b538      	push	{r3, r4, r5, lr}
 8012e6e:	4b09      	ldr	r3, [pc, #36]	; (8012e94 <FlashCode::FlashCode()+0x28>)
 8012e70:	4604      	mov	r4, r0
 8012e72:	6018      	str	r0, [r3, #0]
 8012e74:	2301      	movs	r3, #1
 8012e76:	7003      	strb	r3, [r0, #0]
 8012e78:	f000 f812 	bl	8012ea0 <FlashCode::GetSize() const>
 8012e7c:	4605      	mov	r5, r0
 8012e7e:	4620      	mov	r0, r4
 8012e80:	f000 f80e 	bl	8012ea0 <FlashCode::GetSize() const>
 8012e84:	462a      	mov	r2, r5
 8012e86:	0a83      	lsrs	r3, r0, #10
 8012e88:	4903      	ldr	r1, [pc, #12]	; (8012e98 <FlashCode::FlashCode()+0x2c>)
 8012e8a:	4804      	ldr	r0, [pc, #16]	; (8012e9c <FlashCode::FlashCode()+0x30>)
 8012e8c:	f7f6 f888 	bl	8008fa0 <printf>
 8012e90:	4620      	mov	r0, r4
 8012e92:	bd38      	pop	{r3, r4, r5, pc}
 8012e94:	20009c48 	andcs	r9, r0, r8, asr #24
 8012e98:	08016889 	stmdaeq	r1, {r0, r3, r7, fp, sp, lr}
 8012e9c:	08017dd4 	stmdaeq	r1, {r2, r4, r6, r7, r8, sl, fp, ip, sp, lr}

08012ea0 <FlashCode::GetSize() const>:
 8012ea0:	4b02      	ldr	r3, [pc, #8]	; (8012eac <FlashCode::GetSize() const+0xc>)
 8012ea2:	f8b3 00e0 	ldrh.w	r0, [r3, #224]	; 0xe0
 8012ea6:	0280      	lsls	r0, r0, #10
 8012ea8:	4770      	bx	lr
 8012eaa:	bf00      	nop
 8012eac:	1ffff700 	svcne	0x00fff700

08012eb0 <FlashCode::GetSectorSize() const>:
 8012eb0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8012eb4:	4770      	bx	lr

08012eb6 <FlashCode::Read(unsigned int, unsigned int, unsigned char*, flashcode::result&)>:
 8012eb6:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8012eba:	441a      	add	r2, r3
 8012ebc:	4293      	cmp	r3, r2
 8012ebe:	d104      	bne.n	8012eca <FlashCode::Read(unsigned int, unsigned int, unsigned char*, flashcode::result&)+0x14>
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	9b00      	ldr	r3, [sp, #0]
 8012ec4:	2001      	movs	r0, #1
 8012ec6:	601a      	str	r2, [r3, #0]
 8012ec8:	4770      	bx	lr
 8012eca:	f851 0b04 	ldr.w	r0, [r1], #4
 8012ece:	f843 0b04 	str.w	r0, [r3], #4
 8012ed2:	e7f3      	b.n	8012ebc <FlashCode::Read(unsigned int, unsigned int, unsigned char*, flashcode::result&)+0x6>

08012ed4 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)>:
 8012ed4:	2000      	movs	r0, #0
 8012ed6:	b538      	push	{r3, r4, r5, lr}
 8012ed8:	4c47      	ldr	r4, [pc, #284]	; (8012ff8 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x124>)
 8012eda:	6018      	str	r0, [r3, #0]
 8012edc:	6823      	ldr	r3, [r4, #0]
 8012ede:	2b04      	cmp	r3, #4
 8012ee0:	f200 8082 	bhi.w	8012fe8 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x114>
 8012ee4:	e8df f003 	tbb	[pc, r3]
 8012ee8:	78452003 	stmdavc	r5, {r0, r1, sp}^
 8012eec:	4b430080 	blmi	90d30f4 <__exidx_end+0x10bad48>
 8012ef0:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8012ef4:	6019      	str	r1, [r3, #0]
 8012ef6:	4b42      	ldr	r3, [pc, #264]	; (8013000 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x12c>)
 8012ef8:	601a      	str	r2, [r3, #0]
 8012efa:	4b42      	ldr	r3, [pc, #264]	; (8013004 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x130>)
 8012efc:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8012f00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012f04:	4b40      	ldr	r3, [pc, #256]	; (8013008 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x134>)
 8012f06:	d807      	bhi.n	8012f18 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x44>
 8012f08:	2201      	movs	r2, #1
 8012f0a:	701a      	strb	r2, [r3, #0]
 8012f0c:	f001 fe84 	bl	8014c18 <fmc_bank0_unlock>
 8012f10:	2301      	movs	r3, #1
 8012f12:	6023      	str	r3, [r4, #0]
 8012f14:	2000      	movs	r0, #0
 8012f16:	e026      	b.n	8012f66 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x92>
 8012f18:	4a3c      	ldr	r2, [pc, #240]	; (801300c <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x138>)
 8012f1a:	4291      	cmp	r1, r2
 8012f1c:	d3f4      	bcc.n	8012f08 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x34>
 8012f1e:	2200      	movs	r2, #0
 8012f20:	701a      	strb	r2, [r3, #0]
 8012f22:	f001 fe87 	bl	8014c34 <fmc_bank1_unlock>
 8012f26:	e7f3      	b.n	8012f10 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x3c>
 8012f28:	4d37      	ldr	r5, [pc, #220]	; (8013008 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x134>)
 8012f2a:	782b      	ldrb	r3, [r5, #0]
 8012f2c:	b15b      	cbz	r3, 8012f46 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x72>
 8012f2e:	f001 fe9f 	bl	8014c70 <fmc_bank0_state_get>
 8012f32:	2801      	cmp	r0, #1
 8012f34:	d0ee      	beq.n	8012f14 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x40>
 8012f36:	7829      	ldrb	r1, [r5, #0]
 8012f38:	4b35      	ldr	r3, [pc, #212]	; (8013010 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x13c>)
 8012f3a:	b939      	cbnz	r1, 8012f4c <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x78>
 8012f3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012f3e:	f022 0202 	bic.w	r2, r2, #2
 8012f42:	651a      	str	r2, [r3, #80]	; 0x50
 8012f44:	e006      	b.n	8012f54 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x80>
 8012f46:	f001 fea5 	bl	8014c94 <fmc_bank1_state_get>
 8012f4a:	e7f2      	b.n	8012f32 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x5e>
 8012f4c:	691a      	ldr	r2, [r3, #16]
 8012f4e:	f022 0202 	bic.w	r2, r2, #2
 8012f52:	611a      	str	r2, [r3, #16]
 8012f54:	4b2a      	ldr	r3, [pc, #168]	; (8013000 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x12c>)
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	b94b      	cbnz	r3, 8012f6e <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x9a>
 8012f5a:	b129      	cbz	r1, 8012f68 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x94>
 8012f5c:	f001 fe78 	bl	8014c50 <fmc_bank0_lock>
 8012f60:	2300      	movs	r3, #0
 8012f62:	2001      	movs	r0, #1
 8012f64:	6023      	str	r3, [r4, #0]
 8012f66:	bd38      	pop	{r3, r4, r5, pc}
 8012f68:	f001 fe7a 	bl	8014c60 <fmc_bank1_lock>
 8012f6c:	e7f8      	b.n	8012f60 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x8c>
 8012f6e:	2302      	movs	r3, #2
 8012f70:	e7cf      	b.n	8012f12 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x3e>
 8012f72:	4923      	ldr	r1, [pc, #140]	; (8013000 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x12c>)
 8012f74:	680b      	ldr	r3, [r1, #0]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d0ca      	beq.n	8012f10 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x3c>
 8012f7a:	4b23      	ldr	r3, [pc, #140]	; (8013008 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x134>)
 8012f7c:	4a1f      	ldr	r2, [pc, #124]	; (8012ffc <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x128>)
 8012f7e:	7818      	ldrb	r0, [r3, #0]
 8012f80:	4b23      	ldr	r3, [pc, #140]	; (8013010 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x13c>)
 8012f82:	b190      	cbz	r0, 8012faa <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0xd6>
 8012f84:	6918      	ldr	r0, [r3, #16]
 8012f86:	f040 0002 	orr.w	r0, r0, #2
 8012f8a:	6118      	str	r0, [r3, #16]
 8012f8c:	6810      	ldr	r0, [r2, #0]
 8012f8e:	6158      	str	r0, [r3, #20]
 8012f90:	6918      	ldr	r0, [r3, #16]
 8012f92:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8012f96:	6118      	str	r0, [r3, #16]
 8012f98:	680b      	ldr	r3, [r1, #0]
 8012f9a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8012f9e:	600b      	str	r3, [r1, #0]
 8012fa0:	6813      	ldr	r3, [r2, #0]
 8012fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fa6:	6013      	str	r3, [r2, #0]
 8012fa8:	e7b2      	b.n	8012f10 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x3c>
 8012faa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8012fac:	f040 0002 	orr.w	r0, r0, #2
 8012fb0:	6518      	str	r0, [r3, #80]	; 0x50
 8012fb2:	6810      	ldr	r0, [r2, #0]
 8012fb4:	6558      	str	r0, [r3, #84]	; 0x54
 8012fb6:	69dd      	ldr	r5, [r3, #28]
 8012fb8:	07ad      	lsls	r5, r5, #30
 8012fba:	bf48      	it	mi
 8012fbc:	6158      	strmi	r0, [r3, #20]
 8012fbe:	4814      	ldr	r0, [pc, #80]	; (8013010 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x13c>)
 8012fc0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8012fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012fc6:	6503      	str	r3, [r0, #80]	; 0x50
 8012fc8:	680b      	ldr	r3, [r1, #0]
 8012fca:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8012fce:	600b      	str	r3, [r1, #0]
 8012fd0:	6813      	ldr	r3, [r2, #0]
 8012fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012fd6:	e7e6      	b.n	8012fa6 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0xd2>
 8012fd8:	4b0b      	ldr	r3, [pc, #44]	; (8013008 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x134>)
 8012fda:	781a      	ldrb	r2, [r3, #0]
 8012fdc:	4b0c      	ldr	r3, [pc, #48]	; (8013010 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x13c>)
 8012fde:	b132      	cbz	r2, 8012fee <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x11a>
 8012fe0:	691a      	ldr	r2, [r3, #16]
 8012fe2:	f022 0201 	bic.w	r2, r2, #1
 8012fe6:	611a      	str	r2, [r3, #16]
 8012fe8:	2000      	movs	r0, #0
 8012fea:	6020      	str	r0, [r4, #0]
 8012fec:	e7bb      	b.n	8012f66 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x92>
 8012fee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012ff0:	f022 0201 	bic.w	r2, r2, #1
 8012ff4:	651a      	str	r2, [r3, #80]	; 0x50
 8012ff6:	e7f7      	b.n	8012fe8 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x114>
 8012ff8:	20009c50 	andcs	r9, r0, r0, asr ip
 8012ffc:	20009c54 	andcs	r9, r0, r4, asr ip
 8013000:	20009c60 	andcs	r9, r0, r0, ror #24
 8013004:	1ffff700 	svcne	0x00fff700
 8013008:	20009c5c 	andcs	r9, r0, ip, asr ip
 801300c:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 8013010:	40022000 	andmi	r2, r2, r0

08013014 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)>:
 8013014:	b570      	push	{r4, r5, r6, lr}
 8013016:	2400      	movs	r4, #0
 8013018:	9804      	ldr	r0, [sp, #16]
 801301a:	6004      	str	r4, [r0, #0]
 801301c:	4c48      	ldr	r4, [pc, #288]	; (8013140 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x12c>)
 801301e:	6820      	ldr	r0, [r4, #0]
 8013020:	2804      	cmp	r0, #4
 8013022:	d848      	bhi.n	80130b6 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0xa2>
 8013024:	e8df f000 	tbb	[pc, r0]
 8013028:	22847c03 	addcs	r7, r4, #768	; 0x300
 801302c:	48450047 	stmdami	r5, {r0, r1, r2, r6}^
 8013030:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8013034:	6001      	str	r1, [r0, #0]
 8013036:	4844      	ldr	r0, [pc, #272]	; (8013148 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x134>)
 8013038:	6003      	str	r3, [r0, #0]
 801303a:	4b44      	ldr	r3, [pc, #272]	; (801314c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x138>)
 801303c:	601a      	str	r2, [r3, #0]
 801303e:	4b44      	ldr	r3, [pc, #272]	; (8013150 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x13c>)
 8013040:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8013044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013048:	4b42      	ldr	r3, [pc, #264]	; (8013154 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x140>)
 801304a:	d807      	bhi.n	801305c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x48>
 801304c:	2201      	movs	r2, #1
 801304e:	701a      	strb	r2, [r3, #0]
 8013050:	f001 fde2 	bl	8014c18 <fmc_bank0_unlock>
 8013054:	2303      	movs	r3, #3
 8013056:	6023      	str	r3, [r4, #0]
 8013058:	2000      	movs	r0, #0
 801305a:	e026      	b.n	80130aa <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x96>
 801305c:	4a3e      	ldr	r2, [pc, #248]	; (8013158 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x144>)
 801305e:	4291      	cmp	r1, r2
 8013060:	d3f4      	bcc.n	801304c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x38>
 8013062:	2200      	movs	r2, #0
 8013064:	701a      	strb	r2, [r3, #0]
 8013066:	f001 fde5 	bl	8014c34 <fmc_bank1_unlock>
 801306a:	e7f3      	b.n	8013054 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x40>
 801306c:	4d39      	ldr	r5, [pc, #228]	; (8013154 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x140>)
 801306e:	782b      	ldrb	r3, [r5, #0]
 8013070:	b15b      	cbz	r3, 801308a <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x76>
 8013072:	f001 fdfd 	bl	8014c70 <fmc_bank0_state_get>
 8013076:	2801      	cmp	r0, #1
 8013078:	d0ee      	beq.n	8013058 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x44>
 801307a:	7829      	ldrb	r1, [r5, #0]
 801307c:	4b37      	ldr	r3, [pc, #220]	; (801315c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x148>)
 801307e:	b939      	cbnz	r1, 8013090 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x7c>
 8013080:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013082:	f022 0201 	bic.w	r2, r2, #1
 8013086:	651a      	str	r2, [r3, #80]	; 0x50
 8013088:	e006      	b.n	8013098 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x84>
 801308a:	f001 fe03 	bl	8014c94 <fmc_bank1_state_get>
 801308e:	e7f2      	b.n	8013076 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x62>
 8013090:	691a      	ldr	r2, [r3, #16]
 8013092:	f022 0201 	bic.w	r2, r2, #1
 8013096:	611a      	str	r2, [r3, #16]
 8013098:	4b2c      	ldr	r3, [pc, #176]	; (801314c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x138>)
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	b94b      	cbnz	r3, 80130b2 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x9e>
 801309e:	b129      	cbz	r1, 80130ac <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x98>
 80130a0:	f001 fdd6 	bl	8014c50 <fmc_bank0_lock>
 80130a4:	2300      	movs	r3, #0
 80130a6:	2001      	movs	r0, #1
 80130a8:	6023      	str	r3, [r4, #0]
 80130aa:	bd70      	pop	{r4, r5, r6, pc}
 80130ac:	f001 fdd8 	bl	8014c60 <fmc_bank1_lock>
 80130b0:	e7f8      	b.n	80130a4 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x90>
 80130b2:	2304      	movs	r3, #4
 80130b4:	e7cf      	b.n	8013056 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x42>
 80130b6:	4a25      	ldr	r2, [pc, #148]	; (801314c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x138>)
 80130b8:	6813      	ldr	r3, [r2, #0]
 80130ba:	2b03      	cmp	r3, #3
 80130bc:	d91a      	bls.n	80130f4 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0xe0>
 80130be:	4b25      	ldr	r3, [pc, #148]	; (8013154 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x140>)
 80130c0:	7819      	ldrb	r1, [r3, #0]
 80130c2:	4b26      	ldr	r3, [pc, #152]	; (801315c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x148>)
 80130c4:	b189      	cbz	r1, 80130ea <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0xd6>
 80130c6:	6919      	ldr	r1, [r3, #16]
 80130c8:	f041 0101 	orr.w	r1, r1, #1
 80130cc:	6119      	str	r1, [r3, #16]
 80130ce:	4d1e      	ldr	r5, [pc, #120]	; (8013148 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x134>)
 80130d0:	481c      	ldr	r0, [pc, #112]	; (8013144 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x130>)
 80130d2:	6829      	ldr	r1, [r5, #0]
 80130d4:	6803      	ldr	r3, [r0, #0]
 80130d6:	f851 6b04 	ldr.w	r6, [r1], #4
 80130da:	f843 6b04 	str.w	r6, [r3], #4
 80130de:	6003      	str	r3, [r0, #0]
 80130e0:	6813      	ldr	r3, [r2, #0]
 80130e2:	6029      	str	r1, [r5, #0]
 80130e4:	3b04      	subs	r3, #4
 80130e6:	6013      	str	r3, [r2, #0]
 80130e8:	e7b4      	b.n	8013054 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x40>
 80130ea:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80130ec:	f041 0101 	orr.w	r1, r1, #1
 80130f0:	6519      	str	r1, [r3, #80]	; 0x50
 80130f2:	e7ec      	b.n	80130ce <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0xba>
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d0ad      	beq.n	8013054 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x40>
 80130f8:	4b16      	ldr	r3, [pc, #88]	; (8013154 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x140>)
 80130fa:	781a      	ldrb	r2, [r3, #0]
 80130fc:	4b17      	ldr	r3, [pc, #92]	; (801315c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x148>)
 80130fe:	b152      	cbz	r2, 8013116 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x102>
 8013100:	691a      	ldr	r2, [r3, #16]
 8013102:	f042 0201 	orr.w	r2, r2, #1
 8013106:	611a      	str	r2, [r3, #16]
 8013108:	4a0f      	ldr	r2, [pc, #60]	; (8013148 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x134>)
 801310a:	4b0e      	ldr	r3, [pc, #56]	; (8013144 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x130>)
 801310c:	6812      	ldr	r2, [r2, #0]
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	6812      	ldr	r2, [r2, #0]
 8013112:	601a      	str	r2, [r3, #0]
 8013114:	e79e      	b.n	8013054 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x40>
 8013116:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013118:	f042 0201 	orr.w	r2, r2, #1
 801311c:	651a      	str	r2, [r3, #80]	; 0x50
 801311e:	e7f3      	b.n	8013108 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0xf4>
 8013120:	4b0c      	ldr	r3, [pc, #48]	; (8013154 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x140>)
 8013122:	781a      	ldrb	r2, [r3, #0]
 8013124:	4b0d      	ldr	r3, [pc, #52]	; (801315c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x148>)
 8013126:	b132      	cbz	r2, 8013136 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x122>
 8013128:	691a      	ldr	r2, [r3, #16]
 801312a:	f022 0202 	bic.w	r2, r2, #2
 801312e:	611a      	str	r2, [r3, #16]
 8013130:	2000      	movs	r0, #0
 8013132:	6020      	str	r0, [r4, #0]
 8013134:	e7b9      	b.n	80130aa <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x96>
 8013136:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013138:	f022 0202 	bic.w	r2, r2, #2
 801313c:	651a      	str	r2, [r3, #80]	; 0x50
 801313e:	e7f7      	b.n	8013130 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x11c>
 8013140:	20009c50 	andcs	r9, r0, r0, asr ip
 8013144:	20009c4c 	andcs	r9, r0, ip, asr #24
 8013148:	20009c58 	andcs	r9, r0, r8, asr ip
 801314c:	20009c60 	andcs	r9, r0, r0, ror #24
 8013150:	1ffff700 	svcne	0x00fff700
 8013154:	20009c5c 	andcs	r9, r0, ip, asr ip
 8013158:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 801315c:	40022000 	andmi	r2, r2, r0

08013160 <properties::convert_json_file(char*, unsigned short, bool)>:
 8013160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013164:	4603      	mov	r3, r0
 8013166:	7800      	ldrb	r0, [r0, #0]
 8013168:	287b      	cmp	r0, #123	; 0x7b
 801316a:	f040 80a2 	bne.w	80132b2 <properties::convert_json_file(char*, unsigned short, bool)+0x152>
 801316e:	b17a      	cbz	r2, 8013190 <properties::convert_json_file(char*, unsigned short, bool)+0x30>
 8013170:	2401      	movs	r4, #1
 8013172:	461e      	mov	r6, r3
 8013174:	4620      	mov	r0, r4
 8013176:	2a00      	cmp	r2, #0
 8013178:	bf0c      	ite	eq
 801317a:	f04f 0c0a 	moveq.w	ip, #10
 801317e:	f04f 0c00 	movne.w	ip, #0
 8013182:	273d      	movs	r7, #61	; 0x3d
 8013184:	42a1      	cmp	r1, r4
 8013186:	d850      	bhi.n	801322a <properties::convert_json_file(char*, unsigned short, bool)+0xca>
 8013188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801318c:	463c      	mov	r4, r7
 801318e:	e7f2      	b.n	8013176 <properties::convert_json_file(char*, unsigned short, bool)+0x16>
 8013190:	2023      	movs	r0, #35	; 0x23
 8013192:	f803 0b01 	strb.w	r0, [r3], #1
 8013196:	461c      	mov	r4, r3
 8013198:	2701      	movs	r7, #1
 801319a:	42b9      	cmp	r1, r7
 801319c:	d811      	bhi.n	80131c2 <properties::convert_json_file(char*, unsigned short, bool)+0x62>
 801319e:	2001      	movs	r0, #1
 80131a0:	461e      	mov	r6, r3
 80131a2:	230a      	movs	r3, #10
 80131a4:	4625      	mov	r5, r4
 80131a6:	f806 3b01 	strb.w	r3, [r6], #1
 80131aa:	3001      	adds	r0, #1
 80131ac:	462b      	mov	r3, r5
 80131ae:	781c      	ldrb	r4, [r3, #0]
 80131b0:	3501      	adds	r5, #1
 80131b2:	2c7b      	cmp	r4, #123	; 0x7b
 80131b4:	d0ea      	beq.n	801318c <properties::convert_json_file(char*, unsigned short, bool)+0x2c>
 80131b6:	42b9      	cmp	r1, r7
 80131b8:	f107 0401 	add.w	r4, r7, #1
 80131bc:	d9db      	bls.n	8013176 <properties::convert_json_file(char*, unsigned short, bool)+0x16>
 80131be:	4627      	mov	r7, r4
 80131c0:	e7f4      	b.n	80131ac <properties::convert_json_file(char*, unsigned short, bool)+0x4c>
 80131c2:	f814 0b01 	ldrb.w	r0, [r4], #1
 80131c6:	2822      	cmp	r0, #34	; 0x22
 80131c8:	d119      	bne.n	80131fe <properties::convert_json_file(char*, unsigned short, bool)+0x9e>
 80131ca:	46a4      	mov	ip, r4
 80131cc:	461d      	mov	r5, r3
 80131ce:	2601      	movs	r6, #1
 80131d0:	f89c e000 	ldrb.w	lr, [ip]
 80131d4:	4664      	mov	r4, ip
 80131d6:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 80131da:	462b      	mov	r3, r5
 80131dc:	4630      	mov	r0, r6
 80131de:	f10c 0c01 	add.w	ip, ip, #1
 80131e2:	f105 0501 	add.w	r5, r5, #1
 80131e6:	f106 0601 	add.w	r6, r6, #1
 80131ea:	d0d9      	beq.n	80131a0 <properties::convert_json_file(char*, unsigned short, bool)+0x40>
 80131ec:	3701      	adds	r7, #1
 80131ee:	42b9      	cmp	r1, r7
 80131f0:	4664      	mov	r4, ip
 80131f2:	f805 ec01 	strb.w	lr, [r5, #-1]
 80131f6:	d8eb      	bhi.n	80131d0 <properties::convert_json_file(char*, unsigned short, bool)+0x70>
 80131f8:	4630      	mov	r0, r6
 80131fa:	462b      	mov	r3, r5
 80131fc:	e7d0      	b.n	80131a0 <properties::convert_json_file(char*, unsigned short, bool)+0x40>
 80131fe:	3701      	adds	r7, #1
 8013200:	e7cb      	b.n	801319a <properties::convert_json_file(char*, unsigned short, bool)+0x3a>
 8013202:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8013206:	d110      	bne.n	801322a <properties::convert_json_file(char*, unsigned short, bool)+0xca>
 8013208:	eba0 0803 	sub.w	r8, r0, r3
 801320c:	461a      	mov	r2, r3
 801320e:	eb08 0003 	add.w	r0, r8, r3
 8013212:	f813 eb01 	ldrb.w	lr, [r3], #1
 8013216:	1c65      	adds	r5, r4, #1
 8013218:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 801321c:	d04c      	beq.n	80132b8 <properties::convert_json_file(char*, unsigned short, bool)+0x158>
 801321e:	42a1      	cmp	r1, r4
 8013220:	d911      	bls.n	8013246 <properties::convert_json_file(char*, unsigned short, bool)+0xe6>
 8013222:	462c      	mov	r4, r5
 8013224:	f806 eb01 	strb.w	lr, [r6], #1
 8013228:	e7f0      	b.n	801320c <properties::convert_json_file(char*, unsigned short, bool)+0xac>
 801322a:	42a1      	cmp	r1, r4
 801322c:	461d      	mov	r5, r3
 801322e:	f893 e000 	ldrb.w	lr, [r3]
 8013232:	f104 0401 	add.w	r4, r4, #1
 8013236:	f103 0301 	add.w	r3, r3, #1
 801323a:	d8e2      	bhi.n	8013202 <properties::convert_json_file(char*, unsigned short, bool)+0xa2>
 801323c:	462b      	mov	r3, r5
 801323e:	e7e3      	b.n	8013208 <properties::convert_json_file(char*, unsigned short, bool)+0xa8>
 8013240:	f1be 0f3a 	cmp.w	lr, #58	; 0x3a
 8013244:	d009      	beq.n	801325a <properties::convert_json_file(char*, unsigned short, bool)+0xfa>
 8013246:	42a9      	cmp	r1, r5
 8013248:	4614      	mov	r4, r2
 801324a:	f892 e000 	ldrb.w	lr, [r2]
 801324e:	f105 0501 	add.w	r5, r5, #1
 8013252:	f102 0201 	add.w	r2, r2, #1
 8013256:	d8f3      	bhi.n	8013240 <properties::convert_json_file(char*, unsigned short, bool)+0xe0>
 8013258:	4622      	mov	r2, r4
 801325a:	7814      	ldrb	r4, [r2, #0]
 801325c:	4696      	mov	lr, r2
 801325e:	2c2f      	cmp	r4, #47	; 0x2f
 8013260:	462b      	mov	r3, r5
 8013262:	f102 0201 	add.w	r2, r2, #1
 8013266:	f105 0501 	add.w	r5, r5, #1
 801326a:	d81a      	bhi.n	80132a2 <properties::convert_json_file(char*, unsigned short, bool)+0x142>
 801326c:	4299      	cmp	r1, r3
 801326e:	d8f4      	bhi.n	801325a <properties::convert_json_file(char*, unsigned short, bool)+0xfa>
 8013270:	2c22      	cmp	r4, #34	; 0x22
 8013272:	bf08      	it	eq
 8013274:	4696      	moveq	lr, r2
 8013276:	4673      	mov	r3, lr
 8013278:	f813 2b01 	ldrb.w	r2, [r3], #1
 801327c:	1c6c      	adds	r4, r5, #1
 801327e:	2a22      	cmp	r2, #34	; 0x22
 8013280:	d011      	beq.n	80132a6 <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 8013282:	2a2c      	cmp	r2, #44	; 0x2c
 8013284:	d00f      	beq.n	80132a6 <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 8013286:	2a7d      	cmp	r2, #125	; 0x7d
 8013288:	d00d      	beq.n	80132a6 <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 801328a:	42a9      	cmp	r1, r5
 801328c:	d90f      	bls.n	80132ae <properties::convert_json_file(char*, unsigned short, bool)+0x14e>
 801328e:	f1a2 0520 	sub.w	r5, r2, #32
 8013292:	2d5a      	cmp	r5, #90	; 0x5a
 8013294:	d803      	bhi.n	801329e <properties::convert_json_file(char*, unsigned short, bool)+0x13e>
 8013296:	469e      	mov	lr, r3
 8013298:	f806 2b01 	strb.w	r2, [r6], #1
 801329c:	3001      	adds	r0, #1
 801329e:	4625      	mov	r5, r4
 80132a0:	e7e9      	b.n	8013276 <properties::convert_json_file(char*, unsigned short, bool)+0x116>
 80132a2:	461d      	mov	r5, r3
 80132a4:	e7e7      	b.n	8013276 <properties::convert_json_file(char*, unsigned short, bool)+0x116>
 80132a6:	462c      	mov	r4, r5
 80132a8:	f806 cb01 	strb.w	ip, [r6], #1
 80132ac:	3001      	adds	r0, #1
 80132ae:	3401      	adds	r4, #1
 80132b0:	e768      	b.n	8013184 <properties::convert_json_file(char*, unsigned short, bool)+0x24>
 80132b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80132b6:	e767      	b.n	8013188 <properties::convert_json_file(char*, unsigned short, bool)+0x28>
 80132b8:	4625      	mov	r5, r4
 80132ba:	f806 7b01 	strb.w	r7, [r6], #1
 80132be:	3001      	adds	r0, #1
 80132c0:	e7c1      	b.n	8013246 <properties::convert_json_file(char*, unsigned short, bool)+0xe6>
	...

080132c4 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>:
 80132c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80132c8:	6002      	str	r2, [r0, #0]
 80132ca:	4614      	mov	r4, r2
 80132cc:	2200      	movs	r2, #0
 80132ce:	80c2      	strh	r2, [r0, #6]
 80132d0:	4a1c      	ldr	r2, [pc, #112]	; (8013344 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x80>)
 80132d2:	4606      	mov	r6, r0
 80132d4:	7812      	ldrb	r2, [r2, #0]
 80132d6:	8083      	strh	r3, [r0, #4]
 80132d8:	f002 0201 	and.w	r2, r2, #1
 80132dc:	7202      	strb	r2, [r0, #8]
 80132de:	4608      	mov	r0, r1
 80132e0:	4605      	mov	r5, r0
 80132e2:	782f      	ldrb	r7, [r5, #0]
 80132e4:	3001      	adds	r0, #1
 80132e6:	2f00      	cmp	r7, #0
 80132e8:	d1fa      	bne.n	80132e0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x1c>
 80132ea:	1a6d      	subs	r5, r5, r1
 80132ec:	b29b      	uxth	r3, r3
 80132ee:	b1d2      	cbz	r2, 8013326 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x62>
 80132f0:	1d2f      	adds	r7, r5, #4
 80132f2:	429f      	cmp	r7, r3
 80132f4:	d814      	bhi.n	8013320 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 80132f6:	f04f 087b 	mov.w	r8, #123	; 0x7b
 80132fa:	f04f 0922 	mov.w	r9, #34	; 0x22
 80132fe:	462a      	mov	r2, r5
 8013300:	f884 8000 	strb.w	r8, [r4]
 8013304:	f884 9001 	strb.w	r9, [r4, #1]
 8013308:	1ca0      	adds	r0, r4, #2
 801330a:	f000 febe 	bl	801408a <memmove>
 801330e:	223a      	movs	r2, #58	; 0x3a
 8013310:	1963      	adds	r3, r4, r5
 8013312:	3505      	adds	r5, #5
 8013314:	f883 9002 	strb.w	r9, [r3, #2]
 8013318:	70da      	strb	r2, [r3, #3]
 801331a:	80f5      	strh	r5, [r6, #6]
 801331c:	f804 8007 	strb.w	r8, [r4, r7]
 8013320:	4630      	mov	r0, r6
 8013322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013326:	1caf      	adds	r7, r5, #2
 8013328:	429f      	cmp	r7, r3
 801332a:	d8f9      	bhi.n	8013320 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 801332c:	4620      	mov	r0, r4
 801332e:	2323      	movs	r3, #35	; 0x23
 8013330:	462a      	mov	r2, r5
 8013332:	f800 3b01 	strb.w	r3, [r0], #1
 8013336:	f000 fea8 	bl	801408a <memmove>
 801333a:	230a      	movs	r3, #10
 801333c:	442c      	add	r4, r5
 801333e:	7063      	strb	r3, [r4, #1]
 8013340:	80f7      	strh	r7, [r6, #6]
 8013342:	e7ed      	b.n	8013320 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8013344:	20009c64 	andcs	r9, r0, r4, ror #24

08013348 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>:
 8013348:	b5f0      	push	{r4, r5, r6, r7, lr}
 801334a:	469c      	mov	ip, r3
 801334c:	8885      	ldrh	r5, [r0, #4]
 801334e:	88c3      	ldrh	r3, [r0, #6]
 8013350:	b085      	sub	sp, #20
 8013352:	42ab      	cmp	r3, r5
 8013354:	d302      	bcc.n	801335c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x14>
 8013356:	2000      	movs	r0, #0
 8013358:	b005      	add	sp, #20
 801335a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801335c:	4604      	mov	r4, r0
 801335e:	6800      	ldr	r0, [r0, #0]
 8013360:	1aed      	subs	r5, r5, r3
 8013362:	4418      	add	r0, r3
 8013364:	b2d6      	uxtb	r6, r2
 8013366:	f3c2 2707 	ubfx	r7, r2, #8, #8
 801336a:	f3c2 4307 	ubfx	r3, r2, #16, #8
 801336e:	f894 e008 	ldrb.w	lr, [r4, #8]
 8013372:	0e12      	lsrs	r2, r2, #24
 8013374:	f1bc 0f00 	cmp.w	ip, #0
 8013378:	d109      	bne.n	801338e <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x46>
 801337a:	f1be 0f00 	cmp.w	lr, #0
 801337e:	d109      	bne.n	8013394 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x4c>
 8013380:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8013384:	e9cd 6700 	strd	r6, r7, [sp]
 8013388:	460b      	mov	r3, r1
 801338a:	4a0e      	ldr	r2, [pc, #56]	; (80133c4 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x7c>)
 801338c:	e008      	b.n	80133a0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 801338e:	f1be 0f00 	cmp.w	lr, #0
 8013392:	d00f      	beq.n	80133b4 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x6c>
 8013394:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8013398:	460b      	mov	r3, r1
 801339a:	e9cd 6700 	strd	r6, r7, [sp]
 801339e:	4a0a      	ldr	r2, [pc, #40]	; (80133c8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x80>)
 80133a0:	4629      	mov	r1, r5
 80133a2:	f7f5 fe25 	bl	8008ff0 <snprintf>
 80133a6:	4285      	cmp	r5, r0
 80133a8:	dbd5      	blt.n	8013356 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0xe>
 80133aa:	88e3      	ldrh	r3, [r4, #6]
 80133ac:	4403      	add	r3, r0
 80133ae:	80e3      	strh	r3, [r4, #6]
 80133b0:	2001      	movs	r0, #1
 80133b2:	e7d1      	b.n	8013358 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x10>
 80133b4:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80133b8:	e9cd 6700 	strd	r6, r7, [sp]
 80133bc:	460b      	mov	r3, r1
 80133be:	4a03      	ldr	r2, [pc, #12]	; (80133cc <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x84>)
 80133c0:	e7ee      	b.n	80133a0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 80133c2:	bf00      	nop
 80133c4:	08017eb0 	stmdaeq	r1, {r4, r5, r7, r9, sl, fp, ip, sp, lr}
 80133c8:	08017e9c 	stmdaeq	r1, {r2, r3, r4, r7, r9, sl, fp, ip, sp, lr}
 80133cc:	08017eb1 	stmdaeq	r1, {r0, r4, r5, r7, r9, sl, fp, ip, sp, lr}

080133d0 <PropertiesBuilder::AddComment(char const*)>:
 80133d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133d2:	7a06      	ldrb	r6, [r0, #8]
 80133d4:	b996      	cbnz	r6, 80133fc <PropertiesBuilder::AddComment(char const*)+0x2c>
 80133d6:	4604      	mov	r4, r0
 80133d8:	88c0      	ldrh	r0, [r0, #6]
 80133da:	88a5      	ldrh	r5, [r4, #4]
 80133dc:	42a8      	cmp	r0, r5
 80133de:	d20d      	bcs.n	80133fc <PropertiesBuilder::AddComment(char const*)+0x2c>
 80133e0:	6827      	ldr	r7, [r4, #0]
 80133e2:	1a2d      	subs	r5, r5, r0
 80133e4:	460b      	mov	r3, r1
 80133e6:	4a06      	ldr	r2, [pc, #24]	; (8013400 <PropertiesBuilder::AddComment(char const*)+0x30>)
 80133e8:	4629      	mov	r1, r5
 80133ea:	4438      	add	r0, r7
 80133ec:	f7f5 fe00 	bl	8008ff0 <snprintf>
 80133f0:	4285      	cmp	r5, r0
 80133f2:	bfa1      	itttt	ge
 80133f4:	2601      	movge	r6, #1
 80133f6:	88e3      	ldrhge	r3, [r4, #6]
 80133f8:	18c0      	addge	r0, r0, r3
 80133fa:	80e0      	strhge	r0, [r4, #6]
 80133fc:	4630      	mov	r0, r6
 80133fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013400:	08017ec1 	stmdaeq	r1, {r0, r6, r7, r9, sl, fp, ip, sp, lr}

08013404 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>:
 8013404:	e9c0 1200 	strd	r1, r2, [r0]
 8013408:	4770      	bx	lr

0801340a <ReadConfigFile::~ReadConfigFile()>:
 801340a:	4770      	bx	lr

0801340c <ReadConfigFile::Read(char const*, unsigned int)>:
 801340c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013410:	4606      	mov	r6, r0
 8013412:	460d      	mov	r5, r1
 8013414:	4614      	mov	r4, r2
 8013416:	f04f 0800 	mov.w	r8, #0
 801341a:	b0a0      	sub	sp, #128	; 0x80
 801341c:	b33c      	cbz	r4, 801346e <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 801341e:	466b      	mov	r3, sp
 8013420:	462a      	mov	r2, r5
 8013422:	4619      	mov	r1, r3
 8013424:	e007      	b.n	8013436 <ReadConfigFile::Read(char const*, unsigned int)+0x2a>
 8013426:	f803 7b01 	strb.w	r7, [r3], #1
 801342a:	1a58      	subs	r0, r3, r1
 801342c:	287f      	cmp	r0, #127	; 0x7f
 801342e:	4615      	mov	r5, r2
 8013430:	dc1d      	bgt.n	801346e <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 8013432:	3c01      	subs	r4, #1
 8013434:	d00f      	beq.n	8013456 <ReadConfigFile::Read(char const*, unsigned int)+0x4a>
 8013436:	7817      	ldrb	r7, [r2, #0]
 8013438:	4610      	mov	r0, r2
 801343a:	2f0d      	cmp	r7, #13
 801343c:	f102 0201 	add.w	r2, r2, #1
 8013440:	d001      	beq.n	8013446 <ReadConfigFile::Read(char const*, unsigned int)+0x3a>
 8013442:	2f0a      	cmp	r7, #10
 8013444:	d1ef      	bne.n	8013426 <ReadConfigFile::Read(char const*, unsigned int)+0x1a>
 8013446:	4605      	mov	r5, r0
 8013448:	b12c      	cbz	r4, 8013456 <ReadConfigFile::Read(char const*, unsigned int)+0x4a>
 801344a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801344e:	2a0d      	cmp	r2, #13
 8013450:	d00b      	beq.n	801346a <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 8013452:	2a0a      	cmp	r2, #10
 8013454:	d009      	beq.n	801346a <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 8013456:	f89d 2000 	ldrb.w	r2, [sp]
 801345a:	2a60      	cmp	r2, #96	; 0x60
 801345c:	d9de      	bls.n	801341c <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 801345e:	f883 8000 	strb.w	r8, [r3]
 8013462:	e9d6 3000 	ldrd	r3, r0, [r6]
 8013466:	4798      	blx	r3
 8013468:	e7d8      	b.n	801341c <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 801346a:	3c01      	subs	r4, #1
 801346c:	e7eb      	b.n	8013446 <ReadConfigFile::Read(char const*, unsigned int)+0x3a>
 801346e:	b020      	add	sp, #128	; 0x80
 8013470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013474 <Sscan::Char(char const*, char const*, char*, unsigned int&)>:
 8013474:	b570      	push	{r4, r5, r6, lr}
 8013476:	4615      	mov	r5, r2
 8013478:	461c      	mov	r4, r3
 801347a:	f000 f91c 	bl	80136b6 <Sscan::checkName(char const*, char const*)>
 801347e:	b180      	cbz	r0, 80134a2 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2e>
 8013480:	2100      	movs	r1, #0
 8013482:	5c43      	ldrb	r3, [r0, r1]
 8013484:	6826      	ldr	r6, [r4, #0]
 8013486:	b28a      	uxth	r2, r1
 8013488:	b143      	cbz	r3, 801349c <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x28>
 801348a:	42b2      	cmp	r2, r6
 801348c:	d303      	bcc.n	8013496 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x22>
 801348e:	2b0a      	cmp	r3, #10
 8013490:	d004      	beq.n	801349c <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x28>
 8013492:	2002      	movs	r0, #2
 8013494:	e004      	b.n	80134a0 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2c>
 8013496:	546b      	strb	r3, [r5, r1]
 8013498:	3101      	adds	r1, #1
 801349a:	e7f2      	b.n	8013482 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0xe>
 801349c:	2000      	movs	r0, #0
 801349e:	6022      	str	r2, [r4, #0]
 80134a0:	bd70      	pop	{r4, r5, r6, pc}
 80134a2:	2001      	movs	r0, #1
 80134a4:	e7fc      	b.n	80134a0 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2c>

080134a6 <Sscan::Float(char const*, char const*, float&)>:
 80134a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80134aa:	4616      	mov	r6, r2
 80134ac:	f000 f903 	bl	80136b6 <Sscan::checkName(char const*, char const*)>
 80134b0:	2800      	cmp	r0, #0
 80134b2:	d059      	beq.n	8013568 <Sscan::Float(char const*, char const*, float&)+0xc2>
 80134b4:	4604      	mov	r4, r0
 80134b6:	7803      	ldrb	r3, [r0, #0]
 80134b8:	2b2d      	cmp	r3, #45	; 0x2d
 80134ba:	bf08      	it	eq
 80134bc:	3401      	addeq	r4, #1
 80134be:	7823      	ldrb	r3, [r4, #0]
 80134c0:	bf0c      	ite	eq
 80134c2:	f04f 0801 	moveq.w	r8, #1
 80134c6:	f04f 0800 	movne.w	r8, #0
 80134ca:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 80134ce:	d103      	bne.n	80134d8 <Sscan::Float(char const*, char const*, float&)+0x32>
 80134d0:	2702      	movs	r7, #2
 80134d2:	4638      	mov	r0, r7
 80134d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134d8:	2000      	movs	r0, #0
 80134da:	220a      	movs	r2, #10
 80134dc:	7823      	ldrb	r3, [r4, #0]
 80134de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80134e2:	2909      	cmp	r1, #9
 80134e4:	d8f4      	bhi.n	80134d0 <Sscan::Float(char const*, char const*, float&)+0x2a>
 80134e6:	fb02 3000 	mla	r0, r2, r0, r3
 80134ea:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80134ee:	3830      	subs	r0, #48	; 0x30
 80134f0:	2b2e      	cmp	r3, #46	; 0x2e
 80134f2:	d002      	beq.n	80134fa <Sscan::Float(char const*, char const*, float&)+0x54>
 80134f4:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 80134f8:	d1f0      	bne.n	80134dc <Sscan::Float(char const*, char const*, float&)+0x36>
 80134fa:	f7f4 fa43 	bl	8007984 <__aeabi_ui2f>
 80134fe:	6030      	str	r0, [r6, #0]
 8013500:	7823      	ldrb	r3, [r4, #0]
 8013502:	4605      	mov	r5, r0
 8013504:	2b2e      	cmp	r3, #46	; 0x2e
 8013506:	d008      	beq.n	801351a <Sscan::Float(char const*, char const*, float&)+0x74>
 8013508:	f1b8 0f00 	cmp.w	r8, #0
 801350c:	d101      	bne.n	8013512 <Sscan::Float(char const*, char const*, float&)+0x6c>
 801350e:	2700      	movs	r7, #0
 8013510:	e7df      	b.n	80134d2 <Sscan::Float(char const*, char const*, float&)+0x2c>
 8013512:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 8013516:	6035      	str	r5, [r6, #0]
 8013518:	e7f9      	b.n	801350e <Sscan::Float(char const*, char const*, float&)+0x68>
 801351a:	f04f 0901 	mov.w	r9, #1
 801351e:	2000      	movs	r0, #0
 8013520:	220a      	movs	r2, #10
 8013522:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013526:	f013 07df 	ands.w	r7, r3, #223	; 0xdf
 801352a:	d111      	bne.n	8013550 <Sscan::Float(char const*, char const*, float&)+0xaa>
 801352c:	f7f4 fa2a 	bl	8007984 <__aeabi_ui2f>
 8013530:	4604      	mov	r4, r0
 8013532:	4648      	mov	r0, r9
 8013534:	f7f4 fa26 	bl	8007984 <__aeabi_ui2f>
 8013538:	4601      	mov	r1, r0
 801353a:	4620      	mov	r0, r4
 801353c:	f7f4 fda0 	bl	8008080 <__aeabi_fdiv>
 8013540:	4629      	mov	r1, r5
 8013542:	f7f4 f96f 	bl	8007824 <__addsf3>
 8013546:	f1b8 0f00 	cmp.w	r8, #0
 801354a:	d109      	bne.n	8013560 <Sscan::Float(char const*, char const*, float&)+0xba>
 801354c:	6030      	str	r0, [r6, #0]
 801354e:	e7de      	b.n	801350e <Sscan::Float(char const*, char const*, float&)+0x68>
 8013550:	3b30      	subs	r3, #48	; 0x30
 8013552:	2b09      	cmp	r3, #9
 8013554:	d8bc      	bhi.n	80134d0 <Sscan::Float(char const*, char const*, float&)+0x2a>
 8013556:	fb02 3000 	mla	r0, r2, r0, r3
 801355a:	fb02 f909 	mul.w	r9, r2, r9
 801355e:	e7e0      	b.n	8013522 <Sscan::Float(char const*, char const*, float&)+0x7c>
 8013560:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8013564:	6030      	str	r0, [r6, #0]
 8013566:	e7b4      	b.n	80134d2 <Sscan::Float(char const*, char const*, float&)+0x2c>
 8013568:	2701      	movs	r7, #1
 801356a:	e7b2      	b.n	80134d2 <Sscan::Float(char const*, char const*, float&)+0x2c>

0801356c <Sscan::IpAddress(char const*, char const*, unsigned int&)>:
 801356c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801356e:	4615      	mov	r5, r2
 8013570:	f000 f8a1 	bl	80136b6 <Sscan::checkName(char const*, char const*)>
 8013574:	bb58      	cbnz	r0, 80135ce <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x62>
 8013576:	2001      	movs	r0, #1
 8013578:	e027      	b.n	80135ca <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5e>
 801357a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801357e:	2b09      	cmp	r3, #9
 8013580:	d822      	bhi.n	80135c8 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8013582:	4603      	mov	r3, r0
 8013584:	fb0c 2101 	mla	r1, ip, r1, r2
 8013588:	3930      	subs	r1, #48	; 0x30
 801358a:	4618      	mov	r0, r3
 801358c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013590:	2a2e      	cmp	r2, #46	; 0x2e
 8013592:	d115      	bne.n	80135c0 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x54>
 8013594:	29ff      	cmp	r1, #255	; 0xff
 8013596:	d817      	bhi.n	80135c8 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8013598:	3401      	adds	r4, #1
 801359a:	2c03      	cmp	r4, #3
 801359c:	f806 1b01 	strb.w	r1, [r6], #1
 80135a0:	d119      	bne.n	80135d6 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x6a>
 80135a2:	2400      	movs	r4, #0
 80135a4:	260a      	movs	r6, #10
 80135a6:	1d1a      	adds	r2, r3, #4
 80135a8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80135ac:	f011 00df 	ands.w	r0, r1, #223	; 0xdf
 80135b0:	d115      	bne.n	80135de <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x72>
 80135b2:	2cff      	cmp	r4, #255	; 0xff
 80135b4:	d808      	bhi.n	80135c8 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 80135b6:	f88d 4007 	strb.w	r4, [sp, #7]
 80135ba:	9b01      	ldr	r3, [sp, #4]
 80135bc:	602b      	str	r3, [r5, #0]
 80135be:	e004      	b.n	80135ca <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5e>
 80135c0:	2a00      	cmp	r2, #0
 80135c2:	d0e7      	beq.n	8013594 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 80135c4:	42b8      	cmp	r0, r7
 80135c6:	d1d8      	bne.n	801357a <Sscan::IpAddress(char const*, char const*, unsigned int&)+0xe>
 80135c8:	2002      	movs	r0, #2
 80135ca:	b003      	add	sp, #12
 80135cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135ce:	2400      	movs	r4, #0
 80135d0:	f04f 0c0a 	mov.w	ip, #10
 80135d4:	ae01      	add	r6, sp, #4
 80135d6:	4603      	mov	r3, r0
 80135d8:	2100      	movs	r1, #0
 80135da:	1d07      	adds	r7, r0, #4
 80135dc:	e7d5      	b.n	801358a <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x1e>
 80135de:	4293      	cmp	r3, r2
 80135e0:	d0f2      	beq.n	80135c8 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 80135e2:	3930      	subs	r1, #48	; 0x30
 80135e4:	2909      	cmp	r1, #9
 80135e6:	d8ef      	bhi.n	80135c8 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 80135e8:	fb06 1404 	mla	r4, r6, r4, r1
 80135ec:	e7dc      	b.n	80135a8 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x3c>

080135ee <Sscan::Uint16(char const*, char const*, unsigned short&)>:
 80135ee:	b538      	push	{r3, r4, r5, lr}
 80135f0:	4615      	mov	r5, r2
 80135f2:	f000 f860 	bl	80136b6 <Sscan::checkName(char const*, char const*)>
 80135f6:	b1a0      	cbz	r0, 8013622 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x34>
 80135f8:	4604      	mov	r4, r0
 80135fa:	2100      	movs	r1, #0
 80135fc:	220a      	movs	r2, #10
 80135fe:	7823      	ldrb	r3, [r4, #0]
 8013600:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8013604:	2809      	cmp	r0, #9
 8013606:	d80e      	bhi.n	8013626 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 8013608:	fb02 3101 	mla	r1, r2, r1, r3
 801360c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013610:	3930      	subs	r1, #48	; 0x30
 8013612:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 8013616:	d1f2      	bne.n	80135fe <Sscan::Uint16(char const*, char const*, unsigned short&)+0x10>
 8013618:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 801361c:	d203      	bcs.n	8013626 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 801361e:	8029      	strh	r1, [r5, #0]
 8013620:	bd38      	pop	{r3, r4, r5, pc}
 8013622:	2001      	movs	r0, #1
 8013624:	e7fc      	b.n	8013620 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>
 8013626:	2002      	movs	r0, #2
 8013628:	e7fa      	b.n	8013620 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>

0801362a <Sscan::Uint32(char const*, char const*, unsigned int&)>:
 801362a:	b570      	push	{r4, r5, r6, lr}
 801362c:	4615      	mov	r5, r2
 801362e:	f000 f842 	bl	80136b6 <Sscan::checkName(char const*, char const*)>
 8013632:	b1f8      	cbz	r0, 8013674 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4a>
 8013634:	2300      	movs	r3, #0
 8013636:	4604      	mov	r4, r0
 8013638:	461a      	mov	r2, r3
 801363a:	260a      	movs	r6, #10
 801363c:	7820      	ldrb	r0, [r4, #0]
 801363e:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
 8013642:	2909      	cmp	r1, #9
 8013644:	d818      	bhi.n	8013678 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4e>
 8013646:	fba3 3106 	umull	r3, r1, r3, r6
 801364a:	fb06 1102 	mla	r1, r6, r2, r1
 801364e:	3b30      	subs	r3, #48	; 0x30
 8013650:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 8013654:	18c3      	adds	r3, r0, r3
 8013656:	f141 0200 	adc.w	r2, r1, #0
 801365a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 801365e:	f011 00df 	ands.w	r0, r1, #223	; 0xdf
 8013662:	d1eb      	bne.n	801363c <Sscan::Uint32(char const*, char const*, unsigned int&)+0x12>
 8013664:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013668:	4299      	cmp	r1, r3
 801366a:	eb70 0202 	sbcs.w	r2, r0, r2
 801366e:	d303      	bcc.n	8013678 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4e>
 8013670:	602b      	str	r3, [r5, #0]
 8013672:	bd70      	pop	{r4, r5, r6, pc}
 8013674:	2001      	movs	r0, #1
 8013676:	e7fc      	b.n	8013672 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x48>
 8013678:	2002      	movs	r0, #2
 801367a:	e7fa      	b.n	8013672 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x48>

0801367c <Sscan::Uint8(char const*, char const*, unsigned char&)>:
 801367c:	b538      	push	{r3, r4, r5, lr}
 801367e:	4615      	mov	r5, r2
 8013680:	f000 f819 	bl	80136b6 <Sscan::checkName(char const*, char const*)>
 8013684:	b198      	cbz	r0, 80136ae <Sscan::Uint8(char const*, char const*, unsigned char&)+0x32>
 8013686:	4604      	mov	r4, r0
 8013688:	2100      	movs	r1, #0
 801368a:	220a      	movs	r2, #10
 801368c:	7823      	ldrb	r3, [r4, #0]
 801368e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8013692:	2809      	cmp	r0, #9
 8013694:	d80d      	bhi.n	80136b2 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 8013696:	fb02 3101 	mla	r1, r2, r1, r3
 801369a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801369e:	3930      	subs	r1, #48	; 0x30
 80136a0:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 80136a4:	d1f2      	bne.n	801368c <Sscan::Uint8(char const*, char const*, unsigned char&)+0x10>
 80136a6:	29ff      	cmp	r1, #255	; 0xff
 80136a8:	d803      	bhi.n	80136b2 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 80136aa:	7029      	strb	r1, [r5, #0]
 80136ac:	bd38      	pop	{r3, r4, r5, pc}
 80136ae:	2001      	movs	r0, #1
 80136b0:	e7fc      	b.n	80136ac <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>
 80136b2:	2002      	movs	r0, #2
 80136b4:	e7fa      	b.n	80136ac <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>

080136b6 <Sscan::checkName(char const*, char const*)>:
 80136b6:	4603      	mov	r3, r0
 80136b8:	b510      	push	{r4, lr}
 80136ba:	3901      	subs	r1, #1
 80136bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80136c0:	461c      	mov	r4, r3
 80136c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80136c6:	b120      	cbz	r0, 80136d2 <Sscan::checkName(char const*, char const*)+0x1c>
 80136c8:	b10a      	cbz	r2, 80136ce <Sscan::checkName(char const*, char const*)+0x18>
 80136ca:	4290      	cmp	r0, r2
 80136cc:	d0f6      	beq.n	80136bc <Sscan::checkName(char const*, char const*)+0x6>
 80136ce:	2000      	movs	r0, #0
 80136d0:	e006      	b.n	80136e0 <Sscan::checkName(char const*, char const*)+0x2a>
 80136d2:	2a3d      	cmp	r2, #61	; 0x3d
 80136d4:	d104      	bne.n	80136e0 <Sscan::checkName(char const*, char const*)+0x2a>
 80136d6:	7860      	ldrb	r0, [r4, #1]
 80136d8:	f010 00df 	ands.w	r0, r0, #223	; 0xdf
 80136dc:	d000      	beq.n	80136e0 <Sscan::checkName(char const*, char const*)+0x2a>
 80136de:	1c60      	adds	r0, r4, #1
 80136e0:	bd10      	pop	{r4, pc}
	...

080136e4 <Display::PrintInfo() [clone .isra.0]>:
 80136e4:	b910      	cbnz	r0, 80136ec <Display::PrintInfo() [clone .isra.0]+0x8>
 80136e6:	4803      	ldr	r0, [pc, #12]	; (80136f4 <Display::PrintInfo() [clone .isra.0]+0x10>)
 80136e8:	f000 bd07 	b.w	80140fa <puts>
 80136ec:	6803      	ldr	r3, [r0, #0]
 80136ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136f0:	4718      	bx	r3
 80136f2:	bf00      	nop
 80136f4:	08017fe7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}

080136f8 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
 80136f8:	b513      	push	{r0, r1, r4, lr}
 80136fa:	4604      	mov	r4, r0
 80136fc:	0a13      	lsrs	r3, r2, #8
 80136fe:	7800      	ldrb	r0, [r0, #0]
 8013700:	f88d 1004 	strb.w	r1, [sp, #4]
 8013704:	f88d 3005 	strb.w	r3, [sp, #5]
 8013708:	f88d 2006 	strb.w	r2, [sp, #6]
 801370c:	f001 ff12 	bl	8015534 <gd32_i2c_set_address>
 8013710:	6860      	ldr	r0, [r4, #4]
 8013712:	f001 ff07 	bl	8015524 <gd32_i2c_set_baudrate>
 8013716:	2103      	movs	r1, #3
 8013718:	a801      	add	r0, sp, #4
 801371a:	f001 ff11 	bl	8015540 <gd32_i2c_write>
 801371e:	b002      	add	sp, #8
 8013720:	bd10      	pop	{r4, pc}

08013722 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
 8013722:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013724:	460d      	mov	r5, r1
 8013726:	4604      	mov	r4, r0
 8013728:	f001 ff04 	bl	8015534 <gd32_i2c_set_address>
 801372c:	4628      	mov	r0, r5
 801372e:	f001 fef9 	bl	8015524 <gd32_i2c_set_baudrate>
 8013732:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8013736:	2b07      	cmp	r3, #7
 8013738:	d902      	bls.n	8013740 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x1e>
 801373a:	3c50      	subs	r4, #80	; 0x50
 801373c:	2c0f      	cmp	r4, #15
 801373e:	d809      	bhi.n	8013754 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x32>
 8013740:	2101      	movs	r1, #1
 8013742:	f10d 0007 	add.w	r0, sp, #7
 8013746:	f001 ff61 	bl	801560c <gd32_i2c_read>
 801374a:	fab0 f080 	clz	r0, r0
 801374e:	0940      	lsrs	r0, r0, #5
 8013750:	b003      	add	sp, #12
 8013752:	bd30      	pop	{r4, r5, pc}
 8013754:	2100      	movs	r1, #0
 8013756:	4608      	mov	r0, r1
 8013758:	f001 fef2 	bl	8015540 <gd32_i2c_write>
 801375c:	e7f5      	b.n	801374a <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x28>

0801375e <Display::Detect7Segment()>:
 801375e:	b538      	push	{r3, r4, r5, lr}
 8013760:	68c1      	ldr	r1, [r0, #12]
 8013762:	4604      	mov	r4, r0
 8013764:	7a00      	ldrb	r0, [r0, #8]
 8013766:	f7ff ffdc 	bl	8013722 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>
 801376a:	7460      	strb	r0, [r4, #17]
 801376c:	b170      	cbz	r0, 801378c <Display::Detect7Segment()+0x2e>
 801376e:	2200      	movs	r2, #0
 8013770:	f104 0508 	add.w	r5, r4, #8
 8013774:	4611      	mov	r1, r2
 8013776:	4628      	mov	r0, r5
 8013778:	f7ff ffbe 	bl	80136f8 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 801377c:	7c63      	ldrb	r3, [r4, #17]
 801377e:	b12b      	cbz	r3, 801378c <Display::Detect7Segment()+0x2e>
 8013780:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 8013784:	2112      	movs	r1, #18
 8013786:	4628      	mov	r0, r5
 8013788:	f7ff ffb6 	bl	80136f8 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 801378c:	bd38      	pop	{r3, r4, r5, pc}

0801378e <Display::Detect(display::Type)>:
 801378e:	2902      	cmp	r1, #2
 8013790:	b538      	push	{r3, r4, r5, lr}
 8013792:	4604      	mov	r4, r0
 8013794:	d014      	beq.n	80137c0 <Display::Detect(display::Type)+0x32>
 8013796:	2904      	cmp	r1, #4
 8013798:	d01b      	beq.n	80137d2 <Display::Detect(display::Type)+0x44>
 801379a:	69a0      	ldr	r0, [r4, #24]
 801379c:	b168      	cbz	r0, 80137ba <Display::Detect(display::Type)+0x2c>
 801379e:	6803      	ldr	r3, [r0, #0]
 80137a0:	689b      	ldr	r3, [r3, #8]
 80137a2:	4798      	blx	r3
 80137a4:	4603      	mov	r3, r0
 80137a6:	69a0      	ldr	r0, [r4, #24]
 80137a8:	b9ab      	cbnz	r3, 80137d6 <Display::Detect(display::Type)+0x48>
 80137aa:	b110      	cbz	r0, 80137b2 <Display::Detect(display::Type)+0x24>
 80137ac:	6803      	ldr	r3, [r0, #0]
 80137ae:	685b      	ldr	r3, [r3, #4]
 80137b0:	4798      	blx	r3
 80137b2:	2300      	movs	r3, #0
 80137b4:	61a3      	str	r3, [r4, #24]
 80137b6:	2304      	movs	r3, #4
 80137b8:	6023      	str	r3, [r4, #0]
 80137ba:	2300      	movs	r3, #0
 80137bc:	6163      	str	r3, [r4, #20]
 80137be:	e010      	b.n	80137e2 <Display::Detect(display::Type)+0x54>
 80137c0:	2018      	movs	r0, #24
 80137c2:	f000 fbcb 	bl	8013f5c <operator new(unsigned int)>
 80137c6:	4605      	mov	r5, r0
 80137c8:	2100      	movs	r1, #0
 80137ca:	f000 f89d 	bl	8013908 <Ssd1306::Ssd1306(TOledPanel)>
 80137ce:	61a5      	str	r5, [r4, #24]
 80137d0:	e7e3      	b.n	801379a <Display::Detect(display::Type)+0xc>
 80137d2:	6001      	str	r1, [r0, #0]
 80137d4:	e7e1      	b.n	801379a <Display::Detect(display::Type)+0xc>
 80137d6:	6803      	ldr	r3, [r0, #0]
 80137d8:	68db      	ldr	r3, [r3, #12]
 80137da:	4798      	blx	r3
 80137dc:	69a3      	ldr	r3, [r4, #24]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d0eb      	beq.n	80137ba <Display::Detect(display::Type)+0x2c>
 80137e2:	bd38      	pop	{r3, r4, r5, pc}

080137e4 <Display::Display()>:
 80137e4:	2304      	movs	r3, #4
 80137e6:	b510      	push	{r4, lr}
 80137e8:	6003      	str	r3, [r0, #0]
 80137ea:	4b0f      	ldr	r3, [pc, #60]	; (8013828 <Display::Display()+0x44>)
 80137ec:	4604      	mov	r4, r0
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	4a0e      	ldr	r2, [pc, #56]	; (801382c <Display::Display()+0x48>)
 80137f2:	6043      	str	r3, [r0, #4]
 80137f4:	2321      	movs	r3, #33	; 0x21
 80137f6:	7203      	strb	r3, [r0, #8]
 80137f8:	4b0d      	ldr	r3, [pc, #52]	; (8013830 <Display::Display()+0x4c>)
 80137fa:	2102      	movs	r1, #2
 80137fc:	60c3      	str	r3, [r0, #12]
 80137fe:	2300      	movs	r3, #0
 8013800:	e9c0 2305 	strd	r2, r3, [r0, #20]
 8013804:	8203      	strh	r3, [r0, #16]
 8013806:	4b0b      	ldr	r3, [pc, #44]	; (8013834 <Display::Display()+0x50>)
 8013808:	6018      	str	r0, [r3, #0]
 801380a:	f7ff ffc0 	bl	801378e <Display::Detect(display::Type)>
 801380e:	4620      	mov	r0, r4
 8013810:	f7ff ffa5 	bl	801375e <Display::Detect7Segment()>
 8013814:	69a3      	ldr	r3, [r4, #24]
 8013816:	b10b      	cbz	r3, 801381c <Display::Display()+0x38>
 8013818:	f7f4 fdf8 	bl	800840c <display::timeout::gpio_init()>
 801381c:	69a0      	ldr	r0, [r4, #24]
 801381e:	f7ff ff61 	bl	80136e4 <Display::PrintInfo() [clone .isra.0]>
 8013822:	4620      	mov	r0, r4
 8013824:	bd10      	pop	{r4, pc}
 8013826:	bf00      	nop
 8013828:	20009d6c 	andcs	r9, r0, ip, ror #26
 801382c:	000493e0 	andeq	r9, r4, r0, ror #7
 8013830:	00061a80 	andeq	r1, r6, r0, lsl #21
 8013834:	20009c68 	andcs	r9, r0, r8, ror #24

08013838 <Ssd1306::~Ssd1306()>:
 8013838:	4770      	bx	lr

0801383a <Ssd1306::SetCursor(unsigned int)>:
 801383a:	4770      	bx	lr

0801383c <Ssd1306::PrintInfo()>:
 801383c:	b410      	push	{r4}
 801383e:	4906      	ldr	r1, [pc, #24]	; (8013858 <Ssd1306::PrintInfo()+0x1c>)
 8013840:	7c44      	ldrb	r4, [r0, #17]
 8013842:	7903      	ldrb	r3, [r0, #4]
 8013844:	7942      	ldrb	r2, [r0, #5]
 8013846:	4805      	ldr	r0, [pc, #20]	; (801385c <Ssd1306::PrintInfo()+0x20>)
 8013848:	2c00      	cmp	r4, #0
 801384a:	bf08      	it	eq
 801384c:	4601      	moveq	r1, r0
 801384e:	4804      	ldr	r0, [pc, #16]	; (8013860 <Ssd1306::PrintInfo()+0x24>)
 8013850:	bc10      	pop	{r4}
 8013852:	f7f5 bba5 	b.w	8008fa0 <printf>
 8013856:	bf00      	nop
 8013858:	08017ff8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
 801385c:	08017fff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
 8013860:	08018007 	stmdaeq	r1, {r0, r1, r2, pc}

08013864 <Ssd1306::~Ssd1306()>:
 8013864:	b510      	push	{r4, lr}
 8013866:	4604      	mov	r4, r0
 8013868:	f000 fb74 	bl	8013f54 <operator delete(void*)>
 801386c:	4620      	mov	r0, r4
 801386e:	bd10      	pop	{r4, pc}

08013870 <HAL_I2C::Setup()>:
 8013870:	b510      	push	{r4, lr}
 8013872:	4604      	mov	r4, r0
 8013874:	7800      	ldrb	r0, [r0, #0]
 8013876:	f001 fe5d 	bl	8015534 <gd32_i2c_set_address>
 801387a:	6860      	ldr	r0, [r4, #4]
 801387c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013880:	f001 be50 	b.w	8015524 <gd32_i2c_set_baudrate>

08013884 <Ssd1306::PutChar(int)>:
 8013884:	b510      	push	{r4, lr}
 8013886:	f1a1 0420 	sub.w	r4, r1, #32
 801388a:	2c5f      	cmp	r4, #95	; 0x5f
 801388c:	bf88      	it	hi
 801388e:	2400      	movhi	r4, #0
 8013890:	3008      	adds	r0, #8
 8013892:	f7ff ffed 	bl	8013870 <HAL_I2C::Setup()>
 8013896:	4804      	ldr	r0, [pc, #16]	; (80138a8 <Ssd1306::PutChar(int)+0x24>)
 8013898:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 801389c:	4420      	add	r0, r4
 801389e:	2107      	movs	r1, #7
 80138a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80138a4:	f001 be4c 	b.w	8015540 <gd32_i2c_write>
 80138a8:	0801801c 	stmdaeq	r1, {r2, r3, r4, pc}

080138ac <Ssd1306::PutString(char const*)>:
 80138ac:	b538      	push	{r3, r4, r5, lr}
 80138ae:	4605      	mov	r5, r0
 80138b0:	1e4c      	subs	r4, r1, #1
 80138b2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80138b6:	b901      	cbnz	r1, 80138ba <Ssd1306::PutString(char const*)+0xe>
 80138b8:	bd38      	pop	{r3, r4, r5, pc}
 80138ba:	4628      	mov	r0, r5
 80138bc:	f7ff ffe2 	bl	8013884 <Ssd1306::PutChar(int)>
 80138c0:	e7f7      	b.n	80138b2 <Ssd1306::PutString(char const*)+0x6>

080138c2 <Ssd1306::Text(char const*, unsigned int)>:
 80138c2:	b570      	push	{r4, r5, r6, lr}
 80138c4:	7903      	ldrb	r3, [r0, #4]
 80138c6:	4605      	mov	r5, r0
 80138c8:	460c      	mov	r4, r1
 80138ca:	4293      	cmp	r3, r2
 80138cc:	bf94      	ite	ls
 80138ce:	18ce      	addls	r6, r1, r3
 80138d0:	188e      	addhi	r6, r1, r2
 80138d2:	42b4      	cmp	r4, r6
 80138d4:	d100      	bne.n	80138d8 <Ssd1306::Text(char const*, unsigned int)+0x16>
 80138d6:	bd70      	pop	{r4, r5, r6, pc}
 80138d8:	4628      	mov	r0, r5
 80138da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138de:	f7ff ffd1 	bl	8013884 <Ssd1306::PutChar(int)>
 80138e2:	e7f6      	b.n	80138d2 <Ssd1306::Text(char const*, unsigned int)+0x10>

080138e4 <Ssd1306::InitMembers()>:
 80138e4:	7c03      	ldrb	r3, [r0, #16]
 80138e6:	b14b      	cbz	r3, 80138fc <Ssd1306::InitMembers()+0x18>
 80138e8:	3b01      	subs	r3, #1
 80138ea:	2b01      	cmp	r3, #1
 80138ec:	d909      	bls.n	8013902 <Ssd1306::InitMembers()+0x1e>
 80138ee:	2308      	movs	r3, #8
 80138f0:	2204      	movs	r2, #4
 80138f2:	2115      	movs	r1, #21
 80138f4:	7143      	strb	r3, [r0, #5]
 80138f6:	7101      	strb	r1, [r0, #4]
 80138f8:	6142      	str	r2, [r0, #20]
 80138fa:	4770      	bx	lr
 80138fc:	2308      	movs	r3, #8
 80138fe:	461a      	mov	r2, r3
 8013900:	e7f7      	b.n	80138f2 <Ssd1306::InitMembers()+0xe>
 8013902:	2304      	movs	r3, #4
 8013904:	e7fb      	b.n	80138fe <Ssd1306::InitMembers()+0x1a>
	...

08013908 <Ssd1306::Ssd1306(TOledPanel)>:
 8013908:	4a08      	ldr	r2, [pc, #32]	; (801392c <Ssd1306::Ssd1306(TOledPanel)+0x24>)
 801390a:	b508      	push	{r3, lr}
 801390c:	6002      	str	r2, [r0, #0]
 801390e:	227f      	movs	r2, #127	; 0x7f
 8013910:	80c2      	strh	r2, [r0, #6]
 8013912:	223c      	movs	r2, #60	; 0x3c
 8013914:	7202      	strb	r2, [r0, #8]
 8013916:	4a06      	ldr	r2, [pc, #24]	; (8013930 <Ssd1306::Ssd1306(TOledPanel)+0x28>)
 8013918:	7401      	strb	r1, [r0, #16]
 801391a:	60c2      	str	r2, [r0, #12]
 801391c:	2200      	movs	r2, #0
 801391e:	7442      	strb	r2, [r0, #17]
 8013920:	4a04      	ldr	r2, [pc, #16]	; (8013934 <Ssd1306::Ssd1306(TOledPanel)+0x2c>)
 8013922:	6010      	str	r0, [r2, #0]
 8013924:	f7ff ffde 	bl	80138e4 <Ssd1306::InitMembers()>
 8013928:	bd08      	pop	{r3, pc}
 801392a:	bf00      	nop
 801392c:	080182f4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r9, pc}
 8013930:	00061a80 	andeq	r1, r6, r0, lsl #21
 8013934:	20009cf4 	strdcs	r9, [r0], -r4

08013938 <Ssd1306::SendCommand(unsigned char)>:
 8013938:	2300      	movs	r3, #0
 801393a:	b507      	push	{r0, r1, r2, lr}
 801393c:	3008      	adds	r0, #8
 801393e:	f88d 3004 	strb.w	r3, [sp, #4]
 8013942:	f88d 1005 	strb.w	r1, [sp, #5]
 8013946:	f7ff ff93 	bl	8013870 <HAL_I2C::Setup()>
 801394a:	2102      	movs	r1, #2
 801394c:	a801      	add	r0, sp, #4
 801394e:	f001 fdf7 	bl	8015540 <gd32_i2c_write>
 8013952:	b003      	add	sp, #12
 8013954:	f85d fb04 	ldr.w	pc, [sp], #4

08013958 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>:
 8013958:	2914      	cmp	r1, #20
 801395a:	b570      	push	{r4, r5, r6, lr}
 801395c:	4605      	mov	r5, r0
 801395e:	4616      	mov	r6, r2
 8013960:	d81c      	bhi.n	801399c <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 8013962:	7943      	ldrb	r3, [r0, #5]
 8013964:	4293      	cmp	r3, r2
 8013966:	d919      	bls.n	801399c <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 8013968:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801396c:	7c43      	ldrb	r3, [r0, #17]
 801396e:	004c      	lsls	r4, r1, #1
 8013970:	b2e4      	uxtb	r4, r4
 8013972:	b10b      	cbz	r3, 8013978 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x20>
 8013974:	3404      	adds	r4, #4
 8013976:	b2e4      	uxtb	r4, r4
 8013978:	4628      	mov	r0, r5
 801397a:	f004 010e 	and.w	r1, r4, #14
 801397e:	f7ff ffdb 	bl	8013938 <Ssd1306::SendCommand(unsigned char)>
 8013982:	0921      	lsrs	r1, r4, #4
 8013984:	4628      	mov	r0, r5
 8013986:	f041 0110 	orr.w	r1, r1, #16
 801398a:	f7ff ffd5 	bl	8013938 <Ssd1306::SendCommand(unsigned char)>
 801398e:	4628      	mov	r0, r5
 8013990:	f046 01b0 	orr.w	r1, r6, #176	; 0xb0
 8013994:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013998:	f7ff bfce 	b.w	8013938 <Ssd1306::SendCommand(unsigned char)>
 801399c:	bd70      	pop	{r4, r5, r6, pc}

0801399e <Ssd1306::TextLine(unsigned char, char const*, unsigned int)>:
 801399e:	b570      	push	{r4, r5, r6, lr}
 80139a0:	461e      	mov	r6, r3
 80139a2:	7943      	ldrb	r3, [r0, #5]
 80139a4:	4604      	mov	r4, r0
 80139a6:	428b      	cmp	r3, r1
 80139a8:	4615      	mov	r5, r2
 80139aa:	d30b      	bcc.n	80139c4 <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x26>
 80139ac:	3901      	subs	r1, #1
 80139ae:	b2ca      	uxtb	r2, r1
 80139b0:	2100      	movs	r1, #0
 80139b2:	f7ff ffd1 	bl	8013958 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 80139b6:	4632      	mov	r2, r6
 80139b8:	4629      	mov	r1, r5
 80139ba:	4620      	mov	r0, r4
 80139bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80139c0:	f7ff bf7f 	b.w	80138c2 <Ssd1306::Text(char const*, unsigned int)>
 80139c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080139c8 <Ssd1306::ClearLine(unsigned char)>:
 80139c8:	b538      	push	{r3, r4, r5, lr}
 80139ca:	7943      	ldrb	r3, [r0, #5]
 80139cc:	4605      	mov	r5, r0
 80139ce:	428b      	cmp	r3, r1
 80139d0:	d314      	bcc.n	80139fc <Ssd1306::ClearLine(unsigned char)+0x34>
 80139d2:	3901      	subs	r1, #1
 80139d4:	b2cc      	uxtb	r4, r1
 80139d6:	4622      	mov	r2, r4
 80139d8:	2100      	movs	r1, #0
 80139da:	f7ff ffbd 	bl	8013958 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 80139de:	f105 0008 	add.w	r0, r5, #8
 80139e2:	f7ff ff45 	bl	8013870 <HAL_I2C::Setup()>
 80139e6:	2181      	movs	r1, #129	; 0x81
 80139e8:	4805      	ldr	r0, [pc, #20]	; (8013a00 <Ssd1306::ClearLine(unsigned char)+0x38>)
 80139ea:	f001 fda9 	bl	8015540 <gd32_i2c_write>
 80139ee:	4622      	mov	r2, r4
 80139f0:	4628      	mov	r0, r5
 80139f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80139f6:	2100      	movs	r1, #0
 80139f8:	f7ff bfae 	b.w	8013958 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 80139fc:	bd38      	pop	{r3, r4, r5, pc}
 80139fe:	bf00      	nop
 8013a00:	20009c6c 	andcs	r9, r0, ip, ror #24

08013a04 <Ssd1306::SetSleep(bool)>:
 8013a04:	b111      	cbz	r1, 8013a0c <Ssd1306::SetSleep(bool)+0x8>
 8013a06:	21ae      	movs	r1, #174	; 0xae
 8013a08:	f7ff bf96 	b.w	8013938 <Ssd1306::SendCommand(unsigned char)>
 8013a0c:	21af      	movs	r1, #175	; 0xaf
 8013a0e:	e7fb      	b.n	8013a08 <Ssd1306::SetSleep(bool)+0x4>

08013a10 <Ssd1306::SetContrast(unsigned char)>:
 8013a10:	b538      	push	{r3, r4, r5, lr}
 8013a12:	4604      	mov	r4, r0
 8013a14:	460d      	mov	r5, r1
 8013a16:	7181      	strb	r1, [r0, #6]
 8013a18:	2181      	movs	r1, #129	; 0x81
 8013a1a:	f7ff ff8d 	bl	8013938 <Ssd1306::SendCommand(unsigned char)>
 8013a1e:	4629      	mov	r1, r5
 8013a20:	4620      	mov	r0, r4
 8013a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013a26:	f7ff bf87 	b.w	8013938 <Ssd1306::SendCommand(unsigned char)>

08013a2a <Ssd1306::SetFlipVertically(bool)>:
 8013a2a:	b510      	push	{r4, lr}
 8013a2c:	4604      	mov	r4, r0
 8013a2e:	71c1      	strb	r1, [r0, #7]
 8013a30:	b141      	cbz	r1, 8013a44 <Ssd1306::SetFlipVertically(bool)+0x1a>
 8013a32:	21c0      	movs	r1, #192	; 0xc0
 8013a34:	f7ff ff80 	bl	8013938 <Ssd1306::SendCommand(unsigned char)>
 8013a38:	21a0      	movs	r1, #160	; 0xa0
 8013a3a:	4620      	mov	r0, r4
 8013a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a40:	f7ff bf7a 	b.w	8013938 <Ssd1306::SendCommand(unsigned char)>
 8013a44:	21c8      	movs	r1, #200	; 0xc8
 8013a46:	f7ff ff77 	bl	8013938 <Ssd1306::SendCommand(unsigned char)>
 8013a4a:	21a1      	movs	r1, #161	; 0xa1
 8013a4c:	e7f5      	b.n	8013a3a <Ssd1306::SetFlipVertically(bool)+0x10>
	...

08013a50 <Ssd1306::CheckSH1106()>:
 8013a50:	b530      	push	{r4, r5, lr}
 8013a52:	4604      	mov	r4, r0
 8013a54:	b087      	sub	sp, #28
 8013a56:	2100      	movs	r1, #0
 8013a58:	f7ff ff6e 	bl	8013938 <Ssd1306::SendCommand(unsigned char)>
 8013a5c:	2190      	movs	r1, #144	; 0x90
 8013a5e:	4620      	mov	r0, r4
 8013a60:	f7ff ff6a 	bl	8013938 <Ssd1306::SendCommand(unsigned char)>
 8013a64:	21b0      	movs	r1, #176	; 0xb0
 8013a66:	4620      	mov	r0, r4
 8013a68:	f7ff ff66 	bl	8013938 <Ssd1306::SendCommand(unsigned char)>
 8013a6c:	4b22      	ldr	r3, [pc, #136]	; (8013af8 <Ssd1306::CheckSH1106()+0xa8>)
 8013a6e:	f104 0508 	add.w	r5, r4, #8
 8013a72:	6818      	ldr	r0, [r3, #0]
 8013a74:	791b      	ldrb	r3, [r3, #4]
 8013a76:	9002      	str	r0, [sp, #8]
 8013a78:	4628      	mov	r0, r5
 8013a7a:	f88d 300c 	strb.w	r3, [sp, #12]
 8013a7e:	f7ff fef7 	bl	8013870 <HAL_I2C::Setup()>
 8013a82:	2105      	movs	r1, #5
 8013a84:	a802      	add	r0, sp, #8
 8013a86:	f001 fd5b 	bl	8015540 <gd32_i2c_write>
 8013a8a:	2100      	movs	r1, #0
 8013a8c:	4620      	mov	r0, r4
 8013a8e:	f7ff ff53 	bl	8013938 <Ssd1306::SendCommand(unsigned char)>
 8013a92:	2190      	movs	r1, #144	; 0x90
 8013a94:	4620      	mov	r0, r4
 8013a96:	f7ff ff4f 	bl	8013938 <Ssd1306::SendCommand(unsigned char)>
 8013a9a:	21b0      	movs	r1, #176	; 0xb0
 8013a9c:	4620      	mov	r0, r4
 8013a9e:	f7ff ff4b 	bl	8013938 <Ssd1306::SendCommand(unsigned char)>
 8013aa2:	2300      	movs	r3, #0
 8013aa4:	9304      	str	r3, [sp, #16]
 8013aa6:	f88d 3014 	strb.w	r3, [sp, #20]
 8013aaa:	2340      	movs	r3, #64	; 0x40
 8013aac:	4628      	mov	r0, r5
 8013aae:	f88d 3007 	strb.w	r3, [sp, #7]
 8013ab2:	f7ff fedd 	bl	8013870 <HAL_I2C::Setup()>
 8013ab6:	2101      	movs	r1, #1
 8013ab8:	f10d 0007 	add.w	r0, sp, #7
 8013abc:	f001 fd40 	bl	8015540 <gd32_i2c_write>
 8013ac0:	4628      	mov	r0, r5
 8013ac2:	f7ff fed5 	bl	8013870 <HAL_I2C::Setup()>
 8013ac6:	2105      	movs	r1, #5
 8013ac8:	a804      	add	r0, sp, #16
 8013aca:	f001 fd9f 	bl	801560c <gd32_i2c_read>
 8013ace:	2004      	movs	r0, #4
 8013ad0:	aa02      	add	r2, sp, #8
 8013ad2:	a904      	add	r1, sp, #16
 8013ad4:	3801      	subs	r0, #1
 8013ad6:	d201      	bcs.n	8013adc <Ssd1306::CheckSH1106()+0x8c>
 8013ad8:	2300      	movs	r3, #0
 8013ada:	e006      	b.n	8013aea <Ssd1306::CheckSH1106()+0x9a>
 8013adc:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8013ae0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8013ae4:	42ab      	cmp	r3, r5
 8013ae6:	d0f5      	beq.n	8013ad4 <Ssd1306::CheckSH1106()+0x84>
 8013ae8:	1b5b      	subs	r3, r3, r5
 8013aea:	fab3 f383 	clz	r3, r3
 8013aee:	095b      	lsrs	r3, r3, #5
 8013af0:	7463      	strb	r3, [r4, #17]
 8013af2:	b007      	add	sp, #28
 8013af4:	bd30      	pop	{r4, r5, pc}
 8013af6:	bf00      	nop
 8013af8:	08018013 	stmdaeq	r1, {r0, r1, r4, pc}

08013afc <Ssd1306::Cls()>:
 8013afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b00:	4604      	mov	r4, r0
 8013b02:	2600      	movs	r6, #0
 8013b04:	7c45      	ldrb	r5, [r0, #17]
 8013b06:	00ad      	lsls	r5, r5, #2
 8013b08:	b2ed      	uxtb	r5, r5
 8013b0a:	f1a5 077f 	sub.w	r7, r5, #127	; 0x7f
 8013b0e:	f045 0810 	orr.w	r8, r5, #16
 8013b12:	b2ff      	uxtb	r7, r7
 8013b14:	6963      	ldr	r3, [r4, #20]
 8013b16:	4629      	mov	r1, r5
 8013b18:	42b3      	cmp	r3, r6
 8013b1a:	4620      	mov	r0, r4
 8013b1c:	d80b      	bhi.n	8013b36 <Ssd1306::Cls()+0x3a>
 8013b1e:	f7ff ff0b 	bl	8013938 <Ssd1306::SendCommand(unsigned char)>
 8013b22:	4641      	mov	r1, r8
 8013b24:	4620      	mov	r0, r4
 8013b26:	f7ff ff07 	bl	8013938 <Ssd1306::SendCommand(unsigned char)>
 8013b2a:	4620      	mov	r0, r4
 8013b2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b30:	21b0      	movs	r1, #176	; 0xb0
 8013b32:	f7ff bf01 	b.w	8013938 <Ssd1306::SendCommand(unsigned char)>
 8013b36:	f7ff feff 	bl	8013938 <Ssd1306::SendCommand(unsigned char)>
 8013b3a:	4641      	mov	r1, r8
 8013b3c:	4620      	mov	r0, r4
 8013b3e:	f7ff fefb 	bl	8013938 <Ssd1306::SendCommand(unsigned char)>
 8013b42:	f066 014f 	orn	r1, r6, #79	; 0x4f
 8013b46:	4620      	mov	r0, r4
 8013b48:	b2c9      	uxtb	r1, r1
 8013b4a:	f7ff fef5 	bl	8013938 <Ssd1306::SendCommand(unsigned char)>
 8013b4e:	7c23      	ldrb	r3, [r4, #16]
 8013b50:	b123      	cbz	r3, 8013b5c <Ssd1306::Cls()+0x60>
 8013b52:	3b01      	subs	r3, #1
 8013b54:	2b01      	cmp	r3, #1
 8013b56:	d901      	bls.n	8013b5c <Ssd1306::Cls()+0x60>
 8013b58:	3601      	adds	r6, #1
 8013b5a:	e7db      	b.n	8013b14 <Ssd1306::Cls()+0x18>
 8013b5c:	f104 0008 	add.w	r0, r4, #8
 8013b60:	f7ff fe86 	bl	8013870 <HAL_I2C::Setup()>
 8013b64:	4639      	mov	r1, r7
 8013b66:	4802      	ldr	r0, [pc, #8]	; (8013b70 <Ssd1306::Cls()+0x74>)
 8013b68:	f001 fcea 	bl	8015540 <gd32_i2c_write>
 8013b6c:	e7f4      	b.n	8013b58 <Ssd1306::Cls()+0x5c>
 8013b6e:	bf00      	nop
 8013b70:	20009c6c 	andcs	r9, r0, ip, ror #24

08013b74 <Ssd1306::Start()>:
 8013b74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013b76:	7a04      	ldrb	r4, [r0, #8]
 8013b78:	68c6      	ldr	r6, [r0, #12]
 8013b7a:	4605      	mov	r5, r0
 8013b7c:	4620      	mov	r0, r4
 8013b7e:	f001 fcd9 	bl	8015534 <gd32_i2c_set_address>
 8013b82:	4630      	mov	r0, r6
 8013b84:	f001 fcce 	bl	8015524 <gd32_i2c_set_baudrate>
 8013b88:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8013b8c:	2b07      	cmp	r3, #7
 8013b8e:	d902      	bls.n	8013b96 <Ssd1306::Start()+0x22>
 8013b90:	3c50      	subs	r4, #80	; 0x50
 8013b92:	2c0f      	cmp	r4, #15
 8013b94:	d80f      	bhi.n	8013bb6 <Ssd1306::Start()+0x42>
 8013b96:	2101      	movs	r1, #1
 8013b98:	f10d 0007 	add.w	r0, sp, #7
 8013b9c:	f001 fd36 	bl	801560c <gd32_i2c_read>
 8013ba0:	fab0 f480 	clz	r4, r0
 8013ba4:	0964      	lsrs	r4, r4, #5
 8013ba6:	b35c      	cbz	r4, 8013c00 <Ssd1306::Start()+0x8c>
 8013ba8:	7c2e      	ldrb	r6, [r5, #16]
 8013baa:	b14e      	cbz	r6, 8013bc0 <Ssd1306::Start()+0x4c>
 8013bac:	3e01      	subs	r6, #1
 8013bae:	2e01      	cmp	r6, #1
 8013bb0:	d929      	bls.n	8013c06 <Ssd1306::Start()+0x92>
 8013bb2:	2400      	movs	r4, #0
 8013bb4:	e024      	b.n	8013c00 <Ssd1306::Start()+0x8c>
 8013bb6:	2100      	movs	r1, #0
 8013bb8:	4608      	mov	r0, r1
 8013bba:	f001 fcc1 	bl	8015540 <gd32_i2c_write>
 8013bbe:	e7ef      	b.n	8013ba0 <Ssd1306::Start()+0x2c>
 8013bc0:	4f16      	ldr	r7, [pc, #88]	; (8013c1c <Ssd1306::Start()+0xa8>)
 8013bc2:	4628      	mov	r0, r5
 8013bc4:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013bc8:	3601      	adds	r6, #1
 8013bca:	f7ff feb5 	bl	8013938 <Ssd1306::SendCommand(unsigned char)>
 8013bce:	2e18      	cmp	r6, #24
 8013bd0:	d1f7      	bne.n	8013bc2 <Ssd1306::Start()+0x4e>
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	4a12      	ldr	r2, [pc, #72]	; (8013c20 <Ssd1306::Start()+0xac>)
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	4611      	mov	r1, r2
 8013bda:	3301      	adds	r3, #1
 8013bdc:	2b86      	cmp	r3, #134	; 0x86
 8013bde:	f802 0b01 	strb.w	r0, [r2], #1
 8013be2:	d1fa      	bne.n	8013bda <Ssd1306::Start()+0x66>
 8013be4:	2340      	movs	r3, #64	; 0x40
 8013be6:	4628      	mov	r0, r5
 8013be8:	700b      	strb	r3, [r1, #0]
 8013bea:	f7ff ff31 	bl	8013a50 <Ssd1306::CheckSH1106()>
 8013bee:	4628      	mov	r0, r5
 8013bf0:	f7ff ff84 	bl	8013afc <Ssd1306::Cls()>
 8013bf4:	21af      	movs	r1, #175	; 0xaf
 8013bf6:	4628      	mov	r0, r5
 8013bf8:	f7ff fe9e 	bl	8013938 <Ssd1306::SendCommand(unsigned char)>
 8013bfc:	2301      	movs	r3, #1
 8013bfe:	71eb      	strb	r3, [r5, #7]
 8013c00:	4620      	mov	r0, r4
 8013c02:	b003      	add	sp, #12
 8013c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c06:	2600      	movs	r6, #0
 8013c08:	4f06      	ldr	r7, [pc, #24]	; (8013c24 <Ssd1306::Start()+0xb0>)
 8013c0a:	4628      	mov	r0, r5
 8013c0c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013c10:	3601      	adds	r6, #1
 8013c12:	f7ff fe91 	bl	8013938 <Ssd1306::SendCommand(unsigned char)>
 8013c16:	2e18      	cmp	r6, #24
 8013c18:	d1f7      	bne.n	8013c0a <Ssd1306::Start()+0x96>
 8013c1a:	e7da      	b.n	8013bd2 <Ssd1306::Start()+0x5e>
 8013c1c:	080182d4 	stmdaeq	r1, {r2, r4, r6, r7, r9, pc}
 8013c20:	20009c6c 	andcs	r9, r0, ip, ror #24
 8013c24:	080182bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r9, pc}

08013c28 <console_putc>:
 8013c28:	f000 bb40 	b.w	80142ac <uart0_putc>

08013c2c <console_puts>:
 8013c2c:	f000 bb5e 	b.w	80142ec <uart0_puts>

08013c30 <console_set_fg_color>:
 8013c30:	2807      	cmp	r0, #7
 8013c32:	d810      	bhi.n	8013c56 <console_set_fg_color+0x26>
 8013c34:	e8df f000 	tbb	[pc, r0]
 8013c38:	0b090704 	bleq	8255850 <__exidx_end+0x23d4a4>
 8013c3c:	0d0f0f0f 	stceq	15, cr0, [pc, #-60]	; 8013c08 <Ssd1306::Start()+0x94>
 8013c40:	4806      	ldr	r0, [pc, #24]	; (8013c5c <console_set_fg_color+0x2c>)
 8013c42:	f000 bb53 	b.w	80142ec <uart0_puts>
 8013c46:	4806      	ldr	r0, [pc, #24]	; (8013c60 <console_set_fg_color+0x30>)
 8013c48:	e7fb      	b.n	8013c42 <console_set_fg_color+0x12>
 8013c4a:	4806      	ldr	r0, [pc, #24]	; (8013c64 <console_set_fg_color+0x34>)
 8013c4c:	e7f9      	b.n	8013c42 <console_set_fg_color+0x12>
 8013c4e:	4806      	ldr	r0, [pc, #24]	; (8013c68 <console_set_fg_color+0x38>)
 8013c50:	e7f7      	b.n	8013c42 <console_set_fg_color+0x12>
 8013c52:	4806      	ldr	r0, [pc, #24]	; (8013c6c <console_set_fg_color+0x3c>)
 8013c54:	e7f5      	b.n	8013c42 <console_set_fg_color+0x12>
 8013c56:	4806      	ldr	r0, [pc, #24]	; (8013c70 <console_set_fg_color+0x40>)
 8013c58:	e7f3      	b.n	8013c42 <console_set_fg_color+0x12>
 8013c5a:	bf00      	nop
 8013c5c:	08018332 	stmdaeq	r1, {r1, r4, r5, r8, r9, pc}
 8013c60:	08018338 	stmdaeq	r1, {r3, r4, r5, r8, r9, pc}
 8013c64:	0801833e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r8, r9, pc}
 8013c68:	08018344 	stmdaeq	r1, {r2, r6, r8, r9, pc}
 8013c6c:	0801621c 	stmdaeq	r1, {r2, r3, r4, r9, sp, lr}
 8013c70:	0801834a 	stmdaeq	r1, {r1, r3, r6, r8, r9, pc}

08013c74 <console_error>:
 8013c74:	b510      	push	{r4, lr}
 8013c76:	4604      	mov	r4, r0
 8013c78:	4805      	ldr	r0, [pc, #20]	; (8013c90 <console_error+0x1c>)
 8013c7a:	f000 fb37 	bl	80142ec <uart0_puts>
 8013c7e:	4620      	mov	r0, r4
 8013c80:	f000 fb34 	bl	80142ec <uart0_puts>
 8013c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c88:	4802      	ldr	r0, [pc, #8]	; (8013c94 <console_error+0x20>)
 8013c8a:	f000 bb2f 	b.w	80142ec <uart0_puts>
 8013c8e:	bf00      	nop
 8013c90:	08018338 	stmdaeq	r1, {r3, r4, r5, r8, r9, pc}
 8013c94:	0801621c 	stmdaeq	r1, {r2, r3, r4, r9, sp, lr}

08013c98 <console_status>:
 8013c98:	b510      	push	{r4, lr}
 8013c9a:	460c      	mov	r4, r1
 8013c9c:	b280      	uxth	r0, r0
 8013c9e:	f7ff ffc7 	bl	8013c30 <console_set_fg_color>
 8013ca2:	4807      	ldr	r0, [pc, #28]	; (8013cc0 <console_status+0x28>)
 8013ca4:	f000 fb22 	bl	80142ec <uart0_puts>
 8013ca8:	4620      	mov	r0, r4
 8013caa:	f000 fb1f 	bl	80142ec <uart0_puts>
 8013cae:	200a      	movs	r0, #10
 8013cb0:	f000 fafc 	bl	80142ac <uart0_putc>
 8013cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013cb8:	4802      	ldr	r0, [pc, #8]	; (8013cc4 <console_status+0x2c>)
 8013cba:	f000 bb17 	b.w	80142ec <uart0_puts>
 8013cbe:	bf00      	nop
 8013cc0:	0801832c 	stmdaeq	r1, {r2, r3, r5, r8, r9, pc}
 8013cc4:	0801621c 	stmdaeq	r1, {r2, r3, r4, r9, sp, lr}

08013cc8 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
 8013cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ccc:	4617      	mov	r7, r2
 8013cce:	461e      	mov	r6, r3
 8013cd0:	4d14      	ldr	r5, [pc, #80]	; (8013d24 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>)
 8013cd2:	4b15      	ldr	r3, [pc, #84]	; (8013d28 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x60>)
 8013cd4:	b086      	sub	sp, #24
 8013cd6:	6018      	str	r0, [r3, #0]
 8013cd8:	4604      	mov	r4, r0
 8013cda:	f105 0803 	add.w	r8, r5, #3
 8013cde:	2203      	movs	r2, #3
 8013ce0:	4628      	mov	r0, r5
 8013ce2:	f000 f9d2 	bl	801408a <memmove>
 8013ce6:	4639      	mov	r1, r7
 8013ce8:	220b      	movs	r2, #11
 8013cea:	4640      	mov	r0, r8
 8013cec:	f000 f9cd 	bl	801408a <memmove>
 8013cf0:	f105 030e 	add.w	r3, r5, #14
 8013cf4:	4631      	mov	r1, r6
 8013cf6:	2208      	movs	r2, #8
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	f000 f9c6 	bl	801408a <memmove>
 8013cfe:	2308      	movs	r3, #8
 8013d00:	e9cd 8303 	strd	r8, r3, [sp, #12]
 8013d04:	230b      	movs	r3, #11
 8013d06:	9302      	str	r3, [sp, #8]
 8013d08:	4b08      	ldr	r3, [pc, #32]	; (8013d2c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x64>)
 8013d0a:	9005      	str	r0, [sp, #20]
 8013d0c:	e9cd 5300 	strd	r5, r3, [sp]
 8013d10:	213f      	movs	r1, #63	; 0x3f
 8013d12:	2303      	movs	r3, #3
 8013d14:	4a06      	ldr	r2, [pc, #24]	; (8013d30 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x68>)
 8013d16:	4807      	ldr	r0, [pc, #28]	; (8013d34 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x6c>)
 8013d18:	f7f5 f96a 	bl	8008ff0 <snprintf>
 8013d1c:	4620      	mov	r0, r4
 8013d1e:	b006      	add	sp, #24
 8013d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d24:	20009cf8 	strdcs	r9, [r0], -r8
 8013d28:	20009d50 	andcs	r9, r0, r0, asr sp
 8013d2c:	08016889 	stmdaeq	r1, {r0, r3, r7, fp, sp, lr}
 8013d30:	08018350 	stmdaeq	r1, {r4, r6, r8, r9, pc}
 8013d34:	20009d0e 	andcs	r9, r0, lr, lsl #26

08013d38 <FirmwareVersion::Print(char const*)>:
 8013d38:	b510      	push	{r4, lr}
 8013d3a:	460c      	mov	r4, r1
 8013d3c:	4804      	ldr	r0, [pc, #16]	; (8013d50 <FirmwareVersion::Print(char const*)+0x18>)
 8013d3e:	f000 f9dc 	bl	80140fa <puts>
 8013d42:	b124      	cbz	r4, 8013d4e <FirmwareVersion::Print(char const*)+0x16>
 8013d44:	4620      	mov	r0, r4
 8013d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d4a:	f000 b9d6 	b.w	80140fa <puts>
 8013d4e:	bd10      	pop	{r4, pc}
 8013d50:	20009d0e 	andcs	r9, r0, lr, lsl #26

08013d54 <LedBlink::LedBlink()>:
 8013d54:	b538      	push	{r3, r4, r5, lr}
 8013d56:	2205      	movs	r2, #5
 8013d58:	2300      	movs	r3, #0
 8013d5a:	e9c0 3200 	strd	r3, r2, [r0]
 8013d5e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8013d62:	6083      	str	r3, [r0, #8]
 8013d64:	e9c0 2303 	strd	r2, r3, [r0, #12]
 8013d68:	6143      	str	r3, [r0, #20]
 8013d6a:	4b09      	ldr	r3, [pc, #36]	; (8013d90 <LedBlink::LedBlink()+0x3c>)
 8013d6c:	4d09      	ldr	r5, [pc, #36]	; (8013d94 <LedBlink::LedBlink()+0x40>)
 8013d6e:	4604      	mov	r4, r0
 8013d70:	6018      	str	r0, [r3, #0]
 8013d72:	f240 6004 	movw	r0, #1540	; 0x604
 8013d76:	f001 f871 	bl	8014e5c <rcu_periph_clock_enable>
 8013d7a:	4628      	mov	r0, r5
 8013d7c:	2301      	movs	r3, #1
 8013d7e:	2203      	movs	r2, #3
 8013d80:	2110      	movs	r1, #16
 8013d82:	f000 ffd3 	bl	8014d2c <gpio_init>
 8013d86:	2301      	movs	r3, #1
 8013d88:	4620      	mov	r0, r4
 8013d8a:	616b      	str	r3, [r5, #20]
 8013d8c:	bd38      	pop	{r3, r4, r5, pc}
 8013d8e:	bf00      	nop
 8013d90:	20009d54 	andcs	r9, r0, r4, asr sp
 8013d94:	40011000 	andmi	r1, r1, r0

08013d98 <LedBlink::SetMode(ledblink::Mode)>:
 8013d98:	6843      	ldr	r3, [r0, #4]
 8013d9a:	428b      	cmp	r3, r1
 8013d9c:	d02f      	beq.n	8013dfe <LedBlink::SetMode(ledblink::Mode)+0x66>
 8013d9e:	6041      	str	r1, [r0, #4]
 8013da0:	2904      	cmp	r1, #4
 8013da2:	d822      	bhi.n	8013dea <LedBlink::SetMode(ledblink::Mode)+0x52>
 8013da4:	e8df f001 	tbb	[pc, r1]
 8013da8:	18120321 	ldmdane	r2, {r0, r5, r8, r9}
 8013dac:	23ff001d 	mvnscs	r0, #29
 8013db0:	6003      	str	r3, [r0, #0]
 8013db2:	2300      	movs	r3, #0
 8013db4:	2201      	movs	r2, #1
 8013db6:	60c3      	str	r3, [r0, #12]
 8013db8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013dbc:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8013dc0:	611a      	str	r2, [r3, #16]
 8013dc2:	6880      	ldr	r0, [r0, #8]
 8013dc4:	b1d8      	cbz	r0, 8013dfe <LedBlink::SetMode(ledblink::Mode)+0x66>
 8013dc6:	6803      	ldr	r3, [r0, #0]
 8013dc8:	689b      	ldr	r3, [r3, #8]
 8013dca:	4718      	bx	r3
 8013dcc:	2301      	movs	r3, #1
 8013dce:	6003      	str	r3, [r0, #0]
 8013dd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013dd4:	60c3      	str	r3, [r0, #12]
 8013dd6:	e7f4      	b.n	8013dc2 <LedBlink::SetMode(ledblink::Mode)+0x2a>
 8013dd8:	2303      	movs	r3, #3
 8013dda:	6003      	str	r3, [r0, #0]
 8013ddc:	f240 134d 	movw	r3, #333	; 0x14d
 8013de0:	e7f8      	b.n	8013dd4 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 8013de2:	2305      	movs	r3, #5
 8013de4:	6003      	str	r3, [r0, #0]
 8013de6:	23c8      	movs	r3, #200	; 0xc8
 8013de8:	e7f4      	b.n	8013dd4 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 8013dea:	2300      	movs	r3, #0
 8013dec:	2201      	movs	r2, #1
 8013dee:	6003      	str	r3, [r0, #0]
 8013df0:	60c3      	str	r3, [r0, #12]
 8013df2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013df6:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8013dfa:	615a      	str	r2, [r3, #20]
 8013dfc:	e7e1      	b.n	8013dc2 <LedBlink::SetMode(ledblink::Mode)+0x2a>
 8013dfe:	4770      	bx	lr

08013e00 <Hardware::Hardware()>:
 8013e00:	b570      	push	{r4, r5, r6, lr}
 8013e02:	2400      	movs	r4, #0
 8013e04:	4b24      	ldr	r3, [pc, #144]	; (8013e98 <Hardware::Hardware()+0x98>)
 8013e06:	b090      	sub	sp, #64	; 0x40
 8013e08:	7004      	strb	r4, [r0, #0]
 8013e0a:	6018      	str	r0, [r3, #0]
 8013e0c:	4605      	mov	r5, r0
 8013e0e:	f7f3 fb77 	bl	8007500 <console_init>
 8013e12:	f000 fa7b 	bl	801430c <systick_config>
 8013e16:	f001 fe41 	bl	8015a9c <udelay_init()>
 8013e1a:	f001 fe3d 	bl	8015a98 <micros_init()>
 8013e1e:	f240 701b 	movw	r0, #1819	; 0x71b
 8013e22:	f001 f81b 	bl	8014e5c <rcu_periph_clock_enable>
 8013e26:	f240 701c 	movw	r0, #1820	; 0x71c
 8013e2a:	f001 f817 	bl	8014e5c <rcu_periph_clock_enable>
 8013e2e:	4e1b      	ldr	r6, [pc, #108]	; (8013e9c <Hardware::Hardware()+0x9c>)
 8013e30:	f001 f80c 	bl	8014e4c <pmu_backup_write_enable>
 8013e34:	4621      	mov	r1, r4
 8013e36:	2002      	movs	r0, #2
 8013e38:	f000 fb06 	bl	8014448 <bkp_data_write>
 8013e3c:	f240 7004 	movw	r0, #1796	; 0x704
 8013e40:	f001 f80c 	bl	8014e5c <rcu_periph_clock_enable>
 8013e44:	4630      	mov	r0, r6
 8013e46:	f001 f961 	bl	801510c <timer_deinit>
 8013e4a:	236b      	movs	r3, #107	; 0x6b
 8013e4c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013e50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013e54:	a903      	add	r1, sp, #12
 8013e56:	4630      	mov	r0, r6
 8013e58:	9305      	str	r3, [sp, #20]
 8013e5a:	f001 f9b9 	bl	80151d0 <timer_init>
 8013e5e:	4630      	mov	r0, r6
 8013e60:	f001 fa0e 	bl	8015280 <timer_enable>
 8013e64:	f001 fad0 	bl	8015408 <gd32_adc_init()>
 8013e68:	2219      	movs	r2, #25
 8013e6a:	230b      	movs	r3, #11
 8013e6c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013e70:	237a      	movs	r3, #122	; 0x7a
 8013e72:	a807      	add	r0, sp, #28
 8013e74:	930c      	str	r3, [sp, #48]	; 0x30
 8013e76:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8013e7a:	9407      	str	r4, [sp, #28]
 8013e7c:	940f      	str	r4, [sp, #60]	; 0x3c
 8013e7e:	f000 f96b 	bl	8014158 <mktime>
 8013e82:	4621      	mov	r1, r4
 8013e84:	e9cd 0401 	strd	r0, r4, [sp, #4]
 8013e88:	a801      	add	r0, sp, #4
 8013e8a:	f000 f9db 	bl	8014244 <settimeofday>
 8013e8e:	f001 fb15 	bl	80154bc <gd32_i2c_begin>
 8013e92:	4628      	mov	r0, r5
 8013e94:	b010      	add	sp, #64	; 0x40
 8013e96:	bd70      	pop	{r4, r5, r6, pc}
 8013e98:	20009d58 	andcs	r9, r0, r8, asr sp
 8013e9c:	40001000 	andmi	r1, r0, r0

08013ea0 <Hardware::GetUuid(unsigned char*)>:
 8013ea0:	4a0c      	ldr	r2, [pc, #48]	; (8013ed4 <Hardware::GetUuid(unsigned char*)+0x34>)
 8013ea2:	b084      	sub	sp, #16
 8013ea4:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 8013ea8:	9300      	str	r3, [sp, #0]
 8013eaa:	f8d2 07ec 	ldr.w	r0, [r2, #2028]	; 0x7ec
 8013eae:	9001      	str	r0, [sp, #4]
 8013eb0:	f8d2 27f0 	ldr.w	r2, [r2, #2032]	; 0x7f0
 8013eb4:	4403      	add	r3, r0
 8013eb6:	4413      	add	r3, r2
 8013eb8:	9202      	str	r2, [sp, #8]
 8013eba:	466a      	mov	r2, sp
 8013ebc:	9303      	str	r3, [sp, #12]
 8013ebe:	1e4b      	subs	r3, r1, #1
 8013ec0:	310f      	adds	r1, #15
 8013ec2:	428b      	cmp	r3, r1
 8013ec4:	d101      	bne.n	8013eca <Hardware::GetUuid(unsigned char*)+0x2a>
 8013ec6:	b004      	add	sp, #16
 8013ec8:	4770      	bx	lr
 8013eca:	f812 0b01 	ldrb.w	r0, [r2], #1
 8013ece:	f803 0f01 	strb.w	r0, [r3, #1]!
 8013ed2:	e7f6      	b.n	8013ec2 <Hardware::GetUuid(unsigned char*)+0x22>
 8013ed4:	1ffff000 	svcne	0x00fff000

08013ed8 <Hardware::SetTime(tm const*)>:
 8013ed8:	2000      	movs	r0, #0
 8013eda:	4770      	bx	lr

08013edc <Hardware::Reboot()>:
 8013edc:	b508      	push	{r3, lr}
 8013ede:	2300      	movs	r3, #0
 8013ee0:	4604      	mov	r4, r0
 8013ee2:	7003      	strb	r3, [r0, #0]
 8013ee4:	2104      	movs	r1, #4
 8013ee6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013eea:	f000 fef5 	bl	8014cd8 <fwdgt_config>
 8013eee:	4620      	mov	r0, r4
 8013ef0:	f7f4 fb4c 	bl	800858c <Hardware::RebootHandler()>
 8013ef4:	2102      	movs	r1, #2
 8013ef6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013efa:	f000 feed 	bl	8014cd8 <fwdgt_config>
 8013efe:	2801      	cmp	r0, #1
 8013f00:	bf0c      	ite	eq
 8013f02:	2301      	moveq	r3, #1
 8013f04:	2300      	movne	r3, #0
 8013f06:	7023      	strb	r3, [r4, #0]
 8013f08:	d101      	bne.n	8013f0e <Hardware::Reboot()+0x32>
 8013f0a:	f000 fed5 	bl	8014cb8 <fwdgt_enable>
 8013f0e:	2208      	movs	r2, #8
 8013f10:	4b0d      	ldr	r3, [pc, #52]	; (8013f48 <Hardware::Reboot()+0x6c>)
 8013f12:	2501      	movs	r5, #1
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	480d      	ldr	r0, [pc, #52]	; (8013f4c <Hardware::Reboot()+0x70>)
 8013f18:	601a      	str	r2, [r3, #0]
 8013f1a:	227d      	movs	r2, #125	; 0x7d
 8013f1c:	490c      	ldr	r1, [pc, #48]	; (8013f50 <Hardware::Reboot()+0x74>)
 8013f1e:	60da      	str	r2, [r3, #12]
 8013f20:	68dc      	ldr	r4, [r3, #12]
 8013f22:	b904      	cbnz	r4, 8013f26 <Hardware::Reboot()+0x4a>
 8013f24:	e7fe      	b.n	8013f24 <Hardware::Reboot()+0x48>
 8013f26:	6802      	ldr	r2, [r0, #0]
 8013f28:	695e      	ldr	r6, [r3, #20]
 8013f2a:	1b92      	subs	r2, r2, r6
 8013f2c:	4294      	cmp	r4, r2
 8013f2e:	d8f8      	bhi.n	8013f22 <Hardware::Reboot()+0x46>
 8013f30:	6802      	ldr	r2, [r0, #0]
 8013f32:	615a      	str	r2, [r3, #20]
 8013f34:	691a      	ldr	r2, [r3, #16]
 8013f36:	2a01      	cmp	r2, #1
 8013f38:	f082 0401 	eor.w	r4, r2, #1
 8013f3c:	611c      	str	r4, [r3, #16]
 8013f3e:	bf14      	ite	ne
 8013f40:	610d      	strne	r5, [r1, #16]
 8013f42:	614a      	streq	r2, [r1, #20]
 8013f44:	e7ec      	b.n	8013f20 <Hardware::Reboot()+0x44>
 8013f46:	bf00      	nop
 8013f48:	20009d54 	andcs	r9, r0, r4, asr sp
 8013f4c:	20009d6c 	andcs	r9, r0, ip, ror #26
 8013f50:	40011000 	andmi	r1, r1, r0

08013f54 <operator delete(void*)>:
 8013f54:	f000 b874 	b.w	8014040 <free>

08013f58 <operator delete[](void*)>:
 8013f58:	f000 b872 	b.w	8014040 <free>

08013f5c <operator new(unsigned int)>:
 8013f5c:	f000 b842 	b.w	8013fe4 <malloc>

08013f60 <operator new[](unsigned int)>:
 8013f60:	f000 b840 	b.w	8013fe4 <malloc>

08013f64 <inet_aton>:
 8013f64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013f66:	f04f 0c0a 	mov.w	ip, #10
 8013f6a:	2500      	movs	r5, #0
 8013f6c:	ae01      	add	r6, sp, #4
 8013f6e:	4603      	mov	r3, r0
 8013f70:	2200      	movs	r2, #0
 8013f72:	1d07      	adds	r7, r0, #4
 8013f74:	e007      	b.n	8013f86 <inet_aton+0x22>
 8013f76:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8013f7a:	2b09      	cmp	r3, #9
 8013f7c:	d820      	bhi.n	8013fc0 <inet_aton+0x5c>
 8013f7e:	4603      	mov	r3, r0
 8013f80:	fb0c 4202 	mla	r2, ip, r2, r4
 8013f84:	3a30      	subs	r2, #48	; 0x30
 8013f86:	4618      	mov	r0, r3
 8013f88:	f810 4b01 	ldrb.w	r4, [r0], #1
 8013f8c:	2c2e      	cmp	r4, #46	; 0x2e
 8013f8e:	d111      	bne.n	8013fb4 <inet_aton+0x50>
 8013f90:	3501      	adds	r5, #1
 8013f92:	2d03      	cmp	r5, #3
 8013f94:	f806 2b01 	strb.w	r2, [r6], #1
 8013f98:	d1e9      	bne.n	8013f6e <inet_aton+0xa>
 8013f9a:	2200      	movs	r2, #0
 8013f9c:	250a      	movs	r5, #10
 8013f9e:	1d1c      	adds	r4, r3, #4
 8013fa0:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8013fa4:	f010 0fdf 	tst.w	r0, #223	; 0xdf
 8013fa8:	d10d      	bne.n	8013fc6 <inet_aton+0x62>
 8013faa:	f88d 2007 	strb.w	r2, [sp, #7]
 8013fae:	b9b1      	cbnz	r1, 8013fde <inet_aton+0x7a>
 8013fb0:	2001      	movs	r0, #1
 8013fb2:	e006      	b.n	8013fc2 <inet_aton+0x5e>
 8013fb4:	2c00      	cmp	r4, #0
 8013fb6:	d0eb      	beq.n	8013f90 <inet_aton+0x2c>
 8013fb8:	2c0a      	cmp	r4, #10
 8013fba:	d0e9      	beq.n	8013f90 <inet_aton+0x2c>
 8013fbc:	42b8      	cmp	r0, r7
 8013fbe:	d1da      	bne.n	8013f76 <inet_aton+0x12>
 8013fc0:	2000      	movs	r0, #0
 8013fc2:	b003      	add	sp, #12
 8013fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fc6:	280a      	cmp	r0, #10
 8013fc8:	d0ef      	beq.n	8013faa <inet_aton+0x46>
 8013fca:	42a3      	cmp	r3, r4
 8013fcc:	d0f8      	beq.n	8013fc0 <inet_aton+0x5c>
 8013fce:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
 8013fd2:	2e09      	cmp	r6, #9
 8013fd4:	d8f4      	bhi.n	8013fc0 <inet_aton+0x5c>
 8013fd6:	fb05 0202 	mla	r2, r5, r2, r0
 8013fda:	3a30      	subs	r2, #48	; 0x30
 8013fdc:	e7e0      	b.n	8013fa0 <inet_aton+0x3c>
 8013fde:	9b01      	ldr	r3, [sp, #4]
 8013fe0:	600b      	str	r3, [r1, #0]
 8013fe2:	e7e5      	b.n	8013fb0 <inet_aton+0x4c>

08013fe4 <malloc>:
 8013fe4:	b510      	push	{r4, lr}
 8013fe6:	b1d8      	cbz	r0, 8014020 <malloc+0x3c>
 8013fe8:	4a11      	ldr	r2, [pc, #68]	; (8014030 <malloc+0x4c>)
 8013fea:	6811      	ldr	r1, [r2, #0]
 8013fec:	b971      	cbnz	r1, 801400c <malloc+0x28>
 8013fee:	4911      	ldr	r1, [pc, #68]	; (8014034 <malloc+0x50>)
 8013ff0:	f100 021b 	add.w	r2, r0, #27
 8013ff4:	680b      	ldr	r3, [r1, #0]
 8013ff6:	4c10      	ldr	r4, [pc, #64]	; (8014038 <malloc+0x54>)
 8013ff8:	f022 020f 	bic.w	r2, r2, #15
 8013ffc:	441a      	add	r2, r3
 8013ffe:	42a2      	cmp	r2, r4
 8014000:	d80f      	bhi.n	8014022 <malloc+0x3e>
 8014002:	600a      	str	r2, [r1, #0]
 8014004:	4a0d      	ldr	r2, [pc, #52]	; (801403c <malloc+0x58>)
 8014006:	e9c3 2000 	strd	r2, r0, [r3]
 801400a:	e005      	b.n	8014018 <malloc+0x34>
 801400c:	4288      	cmp	r0, r1
 801400e:	d90a      	bls.n	8014026 <malloc+0x42>
 8014010:	3208      	adds	r2, #8
 8014012:	e7ea      	b.n	8013fea <malloc+0x6>
 8014014:	6899      	ldr	r1, [r3, #8]
 8014016:	6051      	str	r1, [r2, #4]
 8014018:	2200      	movs	r2, #0
 801401a:	f103 000c 	add.w	r0, r3, #12
 801401e:	609a      	str	r2, [r3, #8]
 8014020:	bd10      	pop	{r4, pc}
 8014022:	2000      	movs	r0, #0
 8014024:	e7fc      	b.n	8014020 <malloc+0x3c>
 8014026:	6853      	ldr	r3, [r2, #4]
 8014028:	2b00      	cmp	r3, #0
 801402a:	d1f3      	bne.n	8014014 <malloc+0x30>
 801402c:	4608      	mov	r0, r1
 801402e:	e7de      	b.n	8013fee <malloc+0xa>
 8014030:	20000010 	andcs	r0, r0, r0, lsl r0
 8014034:	2000000c 	andcs	r0, r0, ip
 8014038:	20016000 	andcs	r6, r1, r0
 801403c:	424c4d43 	submi	r4, ip, #4288	; 0x10c0

08014040 <free>:
 8014040:	b138      	cbz	r0, 8014052 <free+0x12>
 8014042:	f850 2c0c 	ldr.w	r2, [r0, #-12]
 8014046:	4b09      	ldr	r3, [pc, #36]	; (801406c <free+0x2c>)
 8014048:	429a      	cmp	r2, r3
 801404a:	d102      	bne.n	8014052 <free+0x12>
 801404c:	4b08      	ldr	r3, [pc, #32]	; (8014070 <free+0x30>)
 801404e:	681a      	ldr	r2, [r3, #0]
 8014050:	b902      	cbnz	r2, 8014054 <free+0x14>
 8014052:	4770      	bx	lr
 8014054:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8014058:	4291      	cmp	r1, r2
 801405a:	d104      	bne.n	8014066 <free+0x26>
 801405c:	685a      	ldr	r2, [r3, #4]
 801405e:	380c      	subs	r0, #12
 8014060:	6082      	str	r2, [r0, #8]
 8014062:	6058      	str	r0, [r3, #4]
 8014064:	4770      	bx	lr
 8014066:	3308      	adds	r3, #8
 8014068:	e7f1      	b.n	801404e <free+0xe>
 801406a:	bf00      	nop
 801406c:	424c4d43 	submi	r4, ip, #4288	; 0x10c0
 8014070:	20000010 	andcs	r0, r0, r0, lsl r0

08014074 <memcpy>:
 8014074:	b510      	push	{r4, lr}
 8014076:	1e43      	subs	r3, r0, #1
 8014078:	440a      	add	r2, r1
 801407a:	4291      	cmp	r1, r2
 801407c:	d100      	bne.n	8014080 <memcpy+0xc>
 801407e:	bd10      	pop	{r4, pc}
 8014080:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014084:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014088:	e7f7      	b.n	801407a <memcpy+0x6>

0801408a <memmove>:
 801408a:	4288      	cmp	r0, r1
 801408c:	b510      	push	{r4, lr}
 801408e:	eb01 0302 	add.w	r3, r1, r2
 8014092:	d208      	bcs.n	80140a6 <memmove+0x1c>
 8014094:	1e42      	subs	r2, r0, #1
 8014096:	4299      	cmp	r1, r3
 8014098:	d100      	bne.n	801409c <memmove+0x12>
 801409a:	bd10      	pop	{r4, pc}
 801409c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80140a0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80140a4:	e7f7      	b.n	8014096 <memmove+0xc>
 80140a6:	4601      	mov	r1, r0
 80140a8:	4402      	add	r2, r0
 80140aa:	428a      	cmp	r2, r1
 80140ac:	d0f5      	beq.n	801409a <memmove+0x10>
 80140ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80140b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80140b6:	e7f8      	b.n	80140aa <memmove+0x20>

080140b8 <memset>:
 80140b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80140ba:	b1c2      	cbz	r2, 80140ee <memset+0x36>
 80140bc:	4603      	mov	r3, r0
 80140be:	b2c9      	uxtb	r1, r1
 80140c0:	075c      	lsls	r4, r3, #29
 80140c2:	d110      	bne.n	80140e6 <memset+0x2e>
 80140c4:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
 80140c8:	ea44 4704 	orr.w	r7, r4, r4, lsl #16
 80140cc:	463d      	mov	r5, r7
 80140ce:	461e      	mov	r6, r3
 80140d0:	f022 0407 	bic.w	r4, r2, #7
 80140d4:	441c      	add	r4, r3
 80140d6:	42a6      	cmp	r6, r4
 80140d8:	d10a      	bne.n	80140f0 <memset+0x38>
 80140da:	4413      	add	r3, r2
 80140dc:	429c      	cmp	r4, r3
 80140de:	d006      	beq.n	80140ee <memset+0x36>
 80140e0:	f804 1b01 	strb.w	r1, [r4], #1
 80140e4:	e7fa      	b.n	80140dc <memset+0x24>
 80140e6:	3a01      	subs	r2, #1
 80140e8:	f803 1b01 	strb.w	r1, [r3], #1
 80140ec:	d1e8      	bne.n	80140c0 <memset+0x8>
 80140ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80140f0:	f846 7b08 	str.w	r7, [r6], #8
 80140f4:	f846 5c04 	str.w	r5, [r6, #-4]
 80140f8:	e7ed      	b.n	80140d6 <memset+0x1e>

080140fa <puts>:
 80140fa:	b508      	push	{r3, lr}
 80140fc:	f7ff fd96 	bl	8013c2c <console_puts>
 8014100:	200a      	movs	r0, #10
 8014102:	f7ff fd91 	bl	8013c28 <console_putc>
 8014106:	2001      	movs	r0, #1
 8014108:	bd08      	pop	{r3, pc}

0801410a <isleapyear>:
 801410a:	2264      	movs	r2, #100	; 0x64
 801410c:	fb90 f3f2 	sdiv	r3, r0, r2
 8014110:	fb02 0313 	mls	r3, r2, r3, r0
 8014114:	b94b      	cbnz	r3, 801412a <isleapyear+0x20>
 8014116:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801411a:	fb90 f2f3 	sdiv	r2, r0, r3
 801411e:	fb03 0012 	mls	r0, r3, r2, r0
 8014122:	fab0 f080 	clz	r0, r0
 8014126:	0940      	lsrs	r0, r0, #5
 8014128:	4770      	bx	lr
 801412a:	f010 0f03 	tst.w	r0, #3
 801412e:	bf0c      	ite	eq
 8014130:	2001      	moveq	r0, #1
 8014132:	2000      	movne	r0, #0
 8014134:	4770      	bx	lr
	...

08014138 <getdaysofmonth>:
 8014138:	b510      	push	{r4, lr}
 801413a:	4604      	mov	r4, r0
 801413c:	2c01      	cmp	r4, #1
 801413e:	4608      	mov	r0, r1
 8014140:	d102      	bne.n	8014148 <getdaysofmonth+0x10>
 8014142:	f7ff ffe2 	bl	801410a <isleapyear>
 8014146:	b918      	cbnz	r0, 8014150 <getdaysofmonth+0x18>
 8014148:	4b02      	ldr	r3, [pc, #8]	; (8014154 <getdaysofmonth+0x1c>)
 801414a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801414e:	bd10      	pop	{r4, pc}
 8014150:	201d      	movs	r0, #29
 8014152:	e7fc      	b.n	801414e <getdaysofmonth+0x16>
 8014154:	08018374 	stmdaeq	r1, {r2, r4, r5, r6, r8, r9, pc}

08014158 <mktime>:
 8014158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801415c:	4604      	mov	r4, r0
 801415e:	2800      	cmp	r0, #0
 8014160:	d043      	beq.n	80141ea <mktime+0x92>
 8014162:	6941      	ldr	r1, [r0, #20]
 8014164:	f1a1 0346 	sub.w	r3, r1, #70	; 0x46
 8014168:	2b45      	cmp	r3, #69	; 0x45
 801416a:	d83e      	bhi.n	80141ea <mktime+0x92>
 801416c:	2600      	movs	r6, #0
 801416e:	f240 75b2 	movw	r5, #1970	; 0x7b2
 8014172:	f240 186d 	movw	r8, #365	; 0x16d
 8014176:	f201 776b 	addw	r7, r1, #1899	; 0x76b
 801417a:	42af      	cmp	r7, r5
 801417c:	da24      	bge.n	80141c8 <mktime+0x70>
 801417e:	6927      	ldr	r7, [r4, #16]
 8014180:	2f0b      	cmp	r7, #11
 8014182:	d832      	bhi.n	80141ea <mktime+0x92>
 8014184:	2500      	movs	r5, #0
 8014186:	42af      	cmp	r7, r5
 8014188:	d129      	bne.n	80141de <mktime+0x86>
 801418a:	68e5      	ldr	r5, [r4, #12]
 801418c:	2d00      	cmp	r5, #0
 801418e:	dd2c      	ble.n	80141ea <mktime+0x92>
 8014190:	4638      	mov	r0, r7
 8014192:	f7ff ffd1 	bl	8014138 <getdaysofmonth>
 8014196:	4285      	cmp	r5, r0
 8014198:	dc27      	bgt.n	80141ea <mktime+0x92>
 801419a:	2318      	movs	r3, #24
 801419c:	3d01      	subs	r5, #1
 801419e:	4435      	add	r5, r6
 80141a0:	435d      	muls	r5, r3
 80141a2:	68a3      	ldr	r3, [r4, #8]
 80141a4:	2b17      	cmp	r3, #23
 80141a6:	d820      	bhi.n	80141ea <mktime+0x92>
 80141a8:	213c      	movs	r1, #60	; 0x3c
 80141aa:	442b      	add	r3, r5
 80141ac:	fb01 f203 	mul.w	r2, r1, r3
 80141b0:	6863      	ldr	r3, [r4, #4]
 80141b2:	2b3b      	cmp	r3, #59	; 0x3b
 80141b4:	d819      	bhi.n	80141ea <mktime+0x92>
 80141b6:	6820      	ldr	r0, [r4, #0]
 80141b8:	4413      	add	r3, r2
 80141ba:	283b      	cmp	r0, #59	; 0x3b
 80141bc:	fb01 f303 	mul.w	r3, r1, r3
 80141c0:	d813      	bhi.n	80141ea <mktime+0x92>
 80141c2:	4418      	add	r0, r3
 80141c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141c8:	4628      	mov	r0, r5
 80141ca:	f7ff ff9e 	bl	801410a <isleapyear>
 80141ce:	2800      	cmp	r0, #0
 80141d0:	bf14      	ite	ne
 80141d2:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 80141d6:	4643      	moveq	r3, r8
 80141d8:	3501      	adds	r5, #1
 80141da:	441e      	add	r6, r3
 80141dc:	e7cd      	b.n	801417a <mktime+0x22>
 80141de:	4628      	mov	r0, r5
 80141e0:	f7ff ffaa 	bl	8014138 <getdaysofmonth>
 80141e4:	3501      	adds	r5, #1
 80141e6:	4406      	add	r6, r0
 80141e8:	e7cd      	b.n	8014186 <mktime+0x2e>
 80141ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80141ee:	e7e9      	b.n	80141c4 <mktime+0x6c>

080141f0 <gettimeofday>:
 80141f0:	b538      	push	{r3, r4, r5, lr}
 80141f2:	4b10      	ldr	r3, [pc, #64]	; (8014234 <gettimeofday+0x44>)
 80141f4:	4a10      	ldr	r2, [pc, #64]	; (8014238 <gettimeofday+0x48>)
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	6814      	ldr	r4, [r2, #0]
 80141fa:	6013      	str	r3, [r2, #0]
 80141fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014200:	429c      	cmp	r4, r3
 8014202:	bf2c      	ite	cs
 8014204:	1ae4      	subcs	r4, r4, r3
 8014206:	1b1c      	subcc	r4, r3, r4
 8014208:	4354      	muls	r4, r2
 801420a:	4b0c      	ldr	r3, [pc, #48]	; (801423c <gettimeofday+0x4c>)
 801420c:	4605      	mov	r5, r0
 801420e:	e9d3 2100 	ldrd	r2, r1, [r3]
 8014212:	18a4      	adds	r4, r4, r2
 8014214:	f141 0100 	adc.w	r1, r1, #0
 8014218:	e9c3 4100 	strd	r4, r1, [r3]
 801421c:	4620      	mov	r0, r4
 801421e:	2300      	movs	r3, #0
 8014220:	4a07      	ldr	r2, [pc, #28]	; (8014240 <gettimeofday+0x50>)
 8014222:	f7f3 fca3 	bl	8007b6c <__aeabi_uldivmod>
 8014226:	4b06      	ldr	r3, [pc, #24]	; (8014240 <gettimeofday+0x50>)
 8014228:	6028      	str	r0, [r5, #0]
 801422a:	fb03 4410 	mls	r4, r3, r0, r4
 801422e:	2000      	movs	r0, #0
 8014230:	606c      	str	r4, [r5, #4]
 8014232:	bd38      	pop	{r3, r4, r5, pc}
 8014234:	20009d6c 	andcs	r9, r0, ip, ror #26
 8014238:	20009d68 	andcs	r9, r0, r8, ror #26
 801423c:	20009d60 	andcs	r9, r0, r0, ror #26
 8014240:	000f4240 	andeq	r4, pc, r0, asr #4

08014244 <settimeofday>:
 8014244:	4b07      	ldr	r3, [pc, #28]	; (8014264 <settimeofday+0x20>)
 8014246:	b510      	push	{r4, lr}
 8014248:	681a      	ldr	r2, [r3, #0]
 801424a:	4b07      	ldr	r3, [pc, #28]	; (8014268 <settimeofday+0x24>)
 801424c:	6804      	ldr	r4, [r0, #0]
 801424e:	601a      	str	r2, [r3, #0]
 8014250:	6843      	ldr	r3, [r0, #4]
 8014252:	4806      	ldr	r0, [pc, #24]	; (801426c <settimeofday+0x28>)
 8014254:	17da      	asrs	r2, r3, #31
 8014256:	fbc4 3200 	smlal	r3, r2, r4, r0
 801425a:	4905      	ldr	r1, [pc, #20]	; (8014270 <settimeofday+0x2c>)
 801425c:	2000      	movs	r0, #0
 801425e:	e9c1 3200 	strd	r3, r2, [r1]
 8014262:	bd10      	pop	{r4, pc}
 8014264:	20009d6c 	andcs	r9, r0, ip, ror #26
 8014268:	20009d68 	andcs	r9, r0, r8, ror #26
 801426c:	000f4240 	andeq	r4, pc, r0, asr #4
 8014270:	20009d60 	andcs	r9, r0, r0, ror #26

08014274 <time>:
 8014274:	b513      	push	{r0, r1, r4, lr}
 8014276:	4604      	mov	r4, r0
 8014278:	2100      	movs	r1, #0
 801427a:	4668      	mov	r0, sp
 801427c:	f7ff ffb8 	bl	80141f0 <gettimeofday>
 8014280:	9800      	ldr	r0, [sp, #0]
 8014282:	b104      	cbz	r4, 8014286 <time+0x12>
 8014284:	6020      	str	r0, [r4, #0]
 8014286:	b002      	add	sp, #8
 8014288:	bd10      	pop	{r4, pc}
	...

0801428c <uart0_init>:
 801428c:	2301      	movs	r3, #1
 801428e:	b507      	push	{r0, r1, r2, lr}
 8014290:	2208      	movs	r2, #8
 8014292:	9300      	str	r3, [sp, #0]
 8014294:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8014298:	2300      	movs	r3, #0
 801429a:	4803      	ldr	r0, [pc, #12]	; (80142a8 <uart0_init+0x1c>)
 801429c:	f001 fb24 	bl	80158e8 <gd32_uart_begin>
 80142a0:	b003      	add	sp, #12
 80142a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80142a6:	bf00      	nop
 80142a8:	40013800 	andmi	r3, r1, r0, lsl #16

080142ac <uart0_putc>:
 80142ac:	280a      	cmp	r0, #10
 80142ae:	b538      	push	{r3, r4, r5, lr}
 80142b0:	4604      	mov	r4, r0
 80142b2:	d10a      	bne.n	80142ca <uart0_putc+0x1e>
 80142b4:	4d0b      	ldr	r5, [pc, #44]	; (80142e4 <uart0_putc+0x38>)
 80142b6:	2107      	movs	r1, #7
 80142b8:	4628      	mov	r0, r5
 80142ba:	f001 f87f 	bl	80153bc <usart_flag_get>
 80142be:	2800      	cmp	r0, #0
 80142c0:	d0f9      	beq.n	80142b6 <uart0_putc+0xa>
 80142c2:	220d      	movs	r2, #13
 80142c4:	4b08      	ldr	r3, [pc, #32]	; (80142e8 <uart0_putc+0x3c>)
 80142c6:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 80142ca:	4d06      	ldr	r5, [pc, #24]	; (80142e4 <uart0_putc+0x38>)
 80142cc:	2107      	movs	r1, #7
 80142ce:	4628      	mov	r0, r5
 80142d0:	f001 f874 	bl	80153bc <usart_flag_get>
 80142d4:	2800      	cmp	r0, #0
 80142d6:	d0f9      	beq.n	80142cc <uart0_putc+0x20>
 80142d8:	4b03      	ldr	r3, [pc, #12]	; (80142e8 <uart0_putc+0x3c>)
 80142da:	b2e4      	uxtb	r4, r4
 80142dc:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
 80142e0:	bd38      	pop	{r3, r4, r5, pc}
 80142e2:	bf00      	nop
 80142e4:	40013800 	andmi	r3, r1, r0, lsl #16
 80142e8:	40013000 	andmi	r3, r1, r0

080142ec <uart0_puts>:
 80142ec:	b510      	push	{r4, lr}
 80142ee:	1e44      	subs	r4, r0, #1
 80142f0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80142f4:	b903      	cbnz	r3, 80142f8 <uart0_puts+0xc>
 80142f6:	bd10      	pop	{r4, pc}
 80142f8:	2b0a      	cmp	r3, #10
 80142fa:	d102      	bne.n	8014302 <uart0_puts+0x16>
 80142fc:	200d      	movs	r0, #13
 80142fe:	f7ff ffd5 	bl	80142ac <uart0_putc>
 8014302:	7820      	ldrb	r0, [r4, #0]
 8014304:	f7ff ffd2 	bl	80142ac <uart0_putc>
 8014308:	e7f2      	b.n	80142f0 <uart0_puts+0x4>
	...

0801430c <systick_config>:
 801430c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014310:	4b0b      	ldr	r3, [pc, #44]	; (8014340 <systick_config+0x34>)
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	fbb3 f3f2 	udiv	r3, r3, r2
 8014318:	3b01      	subs	r3, #1
 801431a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801431e:	d20d      	bcs.n	801433c <systick_config+0x30>
 8014320:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8014324:	21f0      	movs	r1, #240	; 0xf0
 8014326:	6153      	str	r3, [r2, #20]
 8014328:	4b06      	ldr	r3, [pc, #24]	; (8014344 <systick_config+0x38>)
 801432a:	2007      	movs	r0, #7
 801432c:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 8014330:	2100      	movs	r1, #0
 8014332:	6191      	str	r1, [r2, #24]
 8014334:	6110      	str	r0, [r2, #16]
 8014336:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 801433a:	4770      	bx	lr
 801433c:	e7fe      	b.n	801433c <systick_config+0x30>
 801433e:	bf00      	nop
 8014340:	20000078 	andcs	r0, r0, r8, ror r0
 8014344:	e000ed00 	and	lr, r0, r0, lsl #26

08014348 <SysTick_Handler>:
 8014348:	4a02      	ldr	r2, [pc, #8]	; (8014354 <SysTick_Handler+0xc>)
 801434a:	6813      	ldr	r3, [r2, #0]
 801434c:	3301      	adds	r3, #1
 801434e:	6013      	str	r3, [r2, #0]
 8014350:	4770      	bx	lr
 8014352:	bf00      	nop
 8014354:	20009d6c 	andcs	r9, r0, ip, ror #26

08014358 <SystemInit>:
 8014358:	4b37      	ldr	r3, [pc, #220]	; (8014438 <SystemInit+0xe0>)
 801435a:	4938      	ldr	r1, [pc, #224]	; (801443c <SystemInit+0xe4>)
 801435c:	681a      	ldr	r2, [r3, #0]
 801435e:	f042 0201 	orr.w	r2, r2, #1
 8014362:	601a      	str	r2, [r3, #0]
 8014364:	685a      	ldr	r2, [r3, #4]
 8014366:	f022 0203 	bic.w	r2, r2, #3
 801436a:	605a      	str	r2, [r3, #4]
 801436c:	681a      	ldr	r2, [r3, #0]
 801436e:	400a      	ands	r2, r1
 8014370:	601a      	str	r2, [r3, #0]
 8014372:	6858      	ldr	r0, [r3, #4]
 8014374:	4a32      	ldr	r2, [pc, #200]	; (8014440 <SystemInit+0xe8>)
 8014376:	4002      	ands	r2, r0
 8014378:	605a      	str	r2, [r3, #4]
 801437a:	681a      	ldr	r2, [r3, #0]
 801437c:	400a      	ands	r2, r1
 801437e:	601a      	str	r2, [r3, #0]
 8014380:	681a      	ldr	r2, [r3, #0]
 8014382:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8014386:	601a      	str	r2, [r3, #0]
 8014388:	685a      	ldr	r2, [r3, #4]
 801438a:	f022 5203 	bic.w	r2, r2, #549453824	; 0x20c00000
 801438e:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8014392:	605a      	str	r2, [r3, #4]
 8014394:	2200      	movs	r2, #0
 8014396:	62da      	str	r2, [r3, #44]	; 0x2c
 8014398:	681a      	ldr	r2, [r3, #0]
 801439a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 801439e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80143a2:	601a      	str	r2, [r3, #0]
 80143a4:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80143a8:	609a      	str	r2, [r3, #8]
 80143aa:	681a      	ldr	r2, [r3, #0]
 80143ac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80143b0:	601a      	str	r2, [r3, #0]
 80143b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80143b6:	6819      	ldr	r1, [r3, #0]
 80143b8:	0389      	lsls	r1, r1, #14
 80143ba:	d401      	bmi.n	80143c0 <SystemInit+0x68>
 80143bc:	3a01      	subs	r2, #1
 80143be:	d1fa      	bne.n	80143b6 <SystemInit+0x5e>
 80143c0:	681a      	ldr	r2, [r3, #0]
 80143c2:	0392      	lsls	r2, r2, #14
 80143c4:	d400      	bmi.n	80143c8 <SystemInit+0x70>
 80143c6:	e7fe      	b.n	80143c6 <SystemInit+0x6e>
 80143c8:	685a      	ldr	r2, [r3, #4]
 80143ca:	605a      	str	r2, [r3, #4]
 80143cc:	685a      	ldr	r2, [r3, #4]
 80143ce:	605a      	str	r2, [r3, #4]
 80143d0:	685a      	ldr	r2, [r3, #4]
 80143d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80143d6:	605a      	str	r2, [r3, #4]
 80143d8:	685a      	ldr	r2, [r3, #4]
 80143da:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80143de:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 80143e2:	605a      	str	r2, [r3, #4]
 80143e4:	685a      	ldr	r2, [r3, #4]
 80143e6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80143ea:	f442 1224 	orr.w	r2, r2, #2686976	; 0x290000
 80143ee:	605a      	str	r2, [r3, #4]
 80143f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80143f2:	4a14      	ldr	r2, [pc, #80]	; (8014444 <SystemInit+0xec>)
 80143f4:	400a      	ands	r2, r1
 80143f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80143f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143fa:	f442 3283 	orr.w	r2, r2, #67072	; 0x10600
 80143fe:	f042 0249 	orr.w	r2, r2, #73	; 0x49
 8014402:	62da      	str	r2, [r3, #44]	; 0x2c
 8014404:	681a      	ldr	r2, [r3, #0]
 8014406:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801440a:	601a      	str	r2, [r3, #0]
 801440c:	681a      	ldr	r2, [r3, #0]
 801440e:	0110      	lsls	r0, r2, #4
 8014410:	d5fc      	bpl.n	801440c <SystemInit+0xb4>
 8014412:	681a      	ldr	r2, [r3, #0]
 8014414:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8014418:	601a      	str	r2, [r3, #0]
 801441a:	681a      	ldr	r2, [r3, #0]
 801441c:	0191      	lsls	r1, r2, #6
 801441e:	d5fc      	bpl.n	801441a <SystemInit+0xc2>
 8014420:	685a      	ldr	r2, [r3, #4]
 8014422:	f022 0203 	bic.w	r2, r2, #3
 8014426:	605a      	str	r2, [r3, #4]
 8014428:	685a      	ldr	r2, [r3, #4]
 801442a:	f042 0202 	orr.w	r2, r2, #2
 801442e:	605a      	str	r2, [r3, #4]
 8014430:	685a      	ldr	r2, [r3, #4]
 8014432:	0712      	lsls	r2, r2, #28
 8014434:	d5fc      	bpl.n	8014430 <SystemInit+0xd8>
 8014436:	4770      	bx	lr
 8014438:	40021000 	andmi	r1, r2, r0
 801443c:	fef6ffff 	mrc2	15, 7, pc, cr6, cr15, {7}
 8014440:	e0ff000c 	rscs	r0, pc, ip
 8014444:	fffef000 			; <UNDEFINED> instruction: 0xfffef000

08014448 <bkp_data_write>:
 8014448:	f1a0 030b 	sub.w	r3, r0, #11
 801444c:	2b1f      	cmp	r3, #31
 801444e:	d804      	bhi.n	801445a <bkp_data_write+0x12>
 8014450:	4b07      	ldr	r3, [pc, #28]	; (8014470 <bkp_data_write+0x28>)
 8014452:	4403      	add	r3, r0
 8014454:	009b      	lsls	r3, r3, #2
 8014456:	8019      	strh	r1, [r3, #0]
 8014458:	4770      	bx	lr
 801445a:	1e43      	subs	r3, r0, #1
 801445c:	2b09      	cmp	r3, #9
 801445e:	bf9f      	itttt	ls
 8014460:	f100 5080 	addls.w	r0, r0, #268435456	; 0x10000000
 8014464:	f500 50d8 	addls.w	r0, r0, #6912	; 0x1b00
 8014468:	0080      	lslls	r0, r0, #2
 801446a:	8001      	strhls	r1, [r0, #0]
 801446c:	4770      	bx	lr
 801446e:	bf00      	nop
 8014470:	10001b05 	andne	r1, r0, r5, lsl #22

08014474 <bkp_data_read>:
 8014474:	f1a0 030b 	sub.w	r3, r0, #11
 8014478:	2b1f      	cmp	r3, #31
 801447a:	d805      	bhi.n	8014488 <bkp_data_read+0x14>
 801447c:	4b08      	ldr	r3, [pc, #32]	; (80144a0 <bkp_data_read+0x2c>)
 801447e:	4403      	add	r3, r0
 8014480:	009b      	lsls	r3, r3, #2
 8014482:	8818      	ldrh	r0, [r3, #0]
 8014484:	b280      	uxth	r0, r0
 8014486:	4770      	bx	lr
 8014488:	1e43      	subs	r3, r0, #1
 801448a:	2b09      	cmp	r3, #9
 801448c:	d806      	bhi.n	801449c <bkp_data_read+0x28>
 801448e:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
 8014492:	f500 50d8 	add.w	r0, r0, #6912	; 0x1b00
 8014496:	0080      	lsls	r0, r0, #2
 8014498:	8800      	ldrh	r0, [r0, #0]
 801449a:	e7f3      	b.n	8014484 <bkp_data_read+0x10>
 801449c:	2000      	movs	r0, #0
 801449e:	4770      	bx	lr
 80144a0:	10001b05 	andne	r1, r0, r5, lsl #22

080144a4 <enet_delay>:
 80144a4:	2300      	movs	r3, #0
 80144a6:	b082      	sub	sp, #8
 80144a8:	9301      	str	r3, [sp, #4]
 80144aa:	9001      	str	r0, [sp, #4]
 80144ac:	9b01      	ldr	r3, [sp, #4]
 80144ae:	b90b      	cbnz	r3, 80144b4 <enet_delay+0x10>
 80144b0:	b002      	add	sp, #8
 80144b2:	4770      	bx	lr
 80144b4:	9b01      	ldr	r3, [sp, #4]
 80144b6:	3b01      	subs	r3, #1
 80144b8:	9301      	str	r3, [sp, #4]
 80144ba:	e7f7      	b.n	80144ac <enet_delay+0x8>

080144bc <enet_software_reset>:
 80144bc:	4b07      	ldr	r3, [pc, #28]	; (80144dc <enet_software_reset+0x20>)
 80144be:	681a      	ldr	r2, [r3, #0]
 80144c0:	f042 0201 	orr.w	r2, r2, #1
 80144c4:	601a      	str	r2, [r3, #0]
 80144c6:	4a06      	ldr	r2, [pc, #24]	; (80144e0 <enet_software_reset+0x24>)
 80144c8:	6819      	ldr	r1, [r3, #0]
 80144ca:	07c9      	lsls	r1, r1, #31
 80144cc:	d501      	bpl.n	80144d2 <enet_software_reset+0x16>
 80144ce:	3a01      	subs	r2, #1
 80144d0:	d1fa      	bne.n	80144c8 <enet_software_reset+0xc>
 80144d2:	6818      	ldr	r0, [r3, #0]
 80144d4:	43c0      	mvns	r0, r0
 80144d6:	f000 0001 	and.w	r0, r0, #1
 80144da:	4770      	bx	lr
 80144dc:	40029000 	andmi	r9, r2, r0
 80144e0:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

080144e4 <enet_descriptors_chain_init>:
 80144e4:	f5b0 0fe0 	cmp.w	r0, #7340032	; 0x700000
 80144e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80144ea:	4a19      	ldr	r2, [pc, #100]	; (8014550 <enet_descriptors_chain_init+0x6c>)
 80144ec:	d125      	bne.n	801453a <enet_descriptors_chain_init+0x56>
 80144ee:	2500      	movs	r5, #0
 80144f0:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 80144f4:	2002      	movs	r0, #2
 80144f6:	4b17      	ldr	r3, [pc, #92]	; (8014554 <enet_descriptors_chain_init+0x70>)
 80144f8:	4c17      	ldr	r4, [pc, #92]	; (8014558 <enet_descriptors_chain_init+0x74>)
 80144fa:	6113      	str	r3, [r2, #16]
 80144fc:	4a17      	ldr	r2, [pc, #92]	; (801455c <enet_descriptors_chain_init+0x78>)
 80144fe:	6013      	str	r3, [r2, #0]
 8014500:	2200      	movs	r2, #0
 8014502:	f240 5ef4 	movw	lr, #1524	; 0x5f4
 8014506:	4916      	ldr	r1, [pc, #88]	; (8014560 <enet_descriptors_chain_init+0x7c>)
 8014508:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 801450c:	600a      	str	r2, [r1, #0]
 801450e:	4915      	ldr	r1, [pc, #84]	; (8014564 <enet_descriptors_chain_init+0x80>)
 8014510:	600a      	str	r2, [r1, #0]
 8014512:	f103 0110 	add.w	r1, r3, #16
 8014516:	fb0e 4702 	mla	r7, lr, r2, r4
 801451a:	f841 7c08 	str.w	r7, [r1, #-8]
 801451e:	4594      	cmp	ip, r2
 8014520:	bf94      	ite	ls
 8014522:	461f      	movls	r7, r3
 8014524:	460f      	movhi	r7, r1
 8014526:	3201      	adds	r2, #1
 8014528:	4290      	cmp	r0, r2
 801452a:	e941 6504 	strd	r6, r5, [r1, #-16]
 801452e:	f841 7c04 	str.w	r7, [r1, #-4]
 8014532:	f101 0110 	add.w	r1, r1, #16
 8014536:	d1ee      	bne.n	8014516 <enet_descriptors_chain_init+0x32>
 8014538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801453a:	4b0b      	ldr	r3, [pc, #44]	; (8014568 <enet_descriptors_chain_init+0x84>)
 801453c:	f244 55f4 	movw	r5, #17908	; 0x45f4
 8014540:	60d3      	str	r3, [r2, #12]
 8014542:	4a0a      	ldr	r2, [pc, #40]	; (801456c <enet_descriptors_chain_init+0x88>)
 8014544:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8014548:	2008      	movs	r0, #8
 801454a:	4c09      	ldr	r4, [pc, #36]	; (8014570 <enet_descriptors_chain_init+0x8c>)
 801454c:	6013      	str	r3, [r2, #0]
 801454e:	e7d7      	b.n	8014500 <enet_descriptors_chain_init+0x1c>
 8014550:	40029000 	andmi	r9, r2, r0
 8014554:	2000d9c4 	andcs	sp, r0, r4, asr #19
 8014558:	2000cddc 	ldrdcs	ip, [r0], -ip	; <UNPREDICTABLE>
 801455c:	20009d7c 	andcs	r9, r0, ip, ror sp
 8014560:	20009d70 	andcs	r9, r0, r0, ror sp
 8014564:	20009d74 	andcs	r9, r0, r4, ror sp
 8014568:	2000cd5c 	andcs	ip, r0, ip, asr sp
 801456c:	20009d78 	andcs	r9, r0, r8, ror sp
 8014570:	20009dbc 			; <UNDEFINED> instruction: 0x20009dbc

08014574 <enet_frame_receive>:
 8014574:	4a1d      	ldr	r2, [pc, #116]	; (80145ec <enet_frame_receive+0x78>)
 8014576:	b510      	push	{r4, lr}
 8014578:	6813      	ldr	r3, [r2, #0]
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	2b00      	cmp	r3, #0
 801457e:	db33      	blt.n	80145e8 <enet_frame_receive+0x74>
 8014580:	b970      	cbnz	r0, 80145a0 <enet_frame_receive+0x2c>
 8014582:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8014586:	6813      	ldr	r3, [r2, #0]
 8014588:	6019      	str	r1, [r3, #0]
 801458a:	4919      	ldr	r1, [pc, #100]	; (80145f0 <enet_frame_receive+0x7c>)
 801458c:	6948      	ldr	r0, [r1, #20]
 801458e:	0604      	lsls	r4, r0, #24
 8014590:	d419      	bmi.n	80145c6 <enet_frame_receive+0x52>
 8014592:	6859      	ldr	r1, [r3, #4]
 8014594:	0448      	lsls	r0, r1, #17
 8014596:	d51b      	bpl.n	80145d0 <enet_frame_receive+0x5c>
 8014598:	68db      	ldr	r3, [r3, #12]
 801459a:	2001      	movs	r0, #1
 801459c:	6013      	str	r3, [r2, #0]
 801459e:	bd10      	pop	{r4, pc}
 80145a0:	f403 4403 	and.w	r4, r3, #33536	; 0x8300
 80145a4:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 80145a8:	d11e      	bne.n	80145e8 <enet_frame_receive+0x74>
 80145aa:	f3c3 430d 	ubfx	r3, r3, #16, #14
 80145ae:	3b04      	subs	r3, #4
 80145b0:	428b      	cmp	r3, r1
 80145b2:	d819      	bhi.n	80145e8 <enet_frame_receive+0x74>
 80145b4:	2100      	movs	r1, #0
 80145b6:	4299      	cmp	r1, r3
 80145b8:	6814      	ldr	r4, [r2, #0]
 80145ba:	d2e2      	bcs.n	8014582 <enet_frame_receive+0xe>
 80145bc:	68a4      	ldr	r4, [r4, #8]
 80145be:	5d0c      	ldrb	r4, [r1, r4]
 80145c0:	5444      	strb	r4, [r0, r1]
 80145c2:	3101      	adds	r1, #1
 80145c4:	e7f7      	b.n	80145b6 <enet_frame_receive+0x42>
 80145c6:	2080      	movs	r0, #128	; 0x80
 80145c8:	6148      	str	r0, [r1, #20]
 80145ca:	2000      	movs	r0, #0
 80145cc:	6088      	str	r0, [r1, #8]
 80145ce:	e7e0      	b.n	8014592 <enet_frame_receive+0x1e>
 80145d0:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 80145d4:	4906      	ldr	r1, [pc, #24]	; (80145f0 <enet_frame_receive+0x7c>)
 80145d6:	bf05      	ittet	eq
 80145d8:	3310      	addeq	r3, #16
 80145da:	6809      	ldreq	r1, [r1, #0]
 80145dc:	68cb      	ldrne	r3, [r1, #12]
 80145de:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 80145e2:	bf08      	it	eq
 80145e4:	185b      	addeq	r3, r3, r1
 80145e6:	e7d8      	b.n	801459a <enet_frame_receive+0x26>
 80145e8:	2000      	movs	r0, #0
 80145ea:	e7d8      	b.n	801459e <enet_frame_receive+0x2a>
 80145ec:	20009d78 	andcs	r9, r0, r8, ror sp
 80145f0:	40029000 	andmi	r9, r2, r0

080145f4 <enet_frame_transmit>:
 80145f4:	4a1e      	ldr	r2, [pc, #120]	; (8014670 <enet_frame_transmit+0x7c>)
 80145f6:	b530      	push	{r4, r5, lr}
 80145f8:	6813      	ldr	r3, [r2, #0]
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	db34      	blt.n	801466a <enet_frame_transmit+0x76>
 8014600:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8014604:	4299      	cmp	r1, r3
 8014606:	d830      	bhi.n	801466a <enet_frame_transmit+0x76>
 8014608:	b9e8      	cbnz	r0, 8014646 <enet_frame_transmit+0x52>
 801460a:	6813      	ldr	r3, [r2, #0]
 801460c:	4819      	ldr	r0, [pc, #100]	; (8014674 <enet_frame_transmit+0x80>)
 801460e:	6059      	str	r1, [r3, #4]
 8014610:	6819      	ldr	r1, [r3, #0]
 8014612:	f041 4130 	orr.w	r1, r1, #2952790016	; 0xb0000000
 8014616:	6019      	str	r1, [r3, #0]
 8014618:	6941      	ldr	r1, [r0, #20]
 801461a:	6944      	ldr	r4, [r0, #20]
 801461c:	f001 0104 	and.w	r1, r1, #4
 8014620:	f004 0420 	and.w	r4, r4, #32
 8014624:	4321      	orrs	r1, r4
 8014626:	d110      	bne.n	801464a <enet_frame_transmit+0x56>
 8014628:	6819      	ldr	r1, [r3, #0]
 801462a:	02c8      	lsls	r0, r1, #11
 801462c:	d511      	bpl.n	8014652 <enet_frame_transmit+0x5e>
 801462e:	68db      	ldr	r3, [r3, #12]
 8014630:	2001      	movs	r0, #1
 8014632:	6013      	str	r3, [r2, #0]
 8014634:	bd30      	pop	{r4, r5, pc}
 8014636:	5cc5      	ldrb	r5, [r0, r3]
 8014638:	68a4      	ldr	r4, [r4, #8]
 801463a:	551d      	strb	r5, [r3, r4]
 801463c:	3301      	adds	r3, #1
 801463e:	428b      	cmp	r3, r1
 8014640:	6814      	ldr	r4, [r2, #0]
 8014642:	d1f8      	bne.n	8014636 <enet_frame_transmit+0x42>
 8014644:	e7e1      	b.n	801460a <enet_frame_transmit+0x16>
 8014646:	2300      	movs	r3, #0
 8014648:	e7f9      	b.n	801463e <enet_frame_transmit+0x4a>
 801464a:	6141      	str	r1, [r0, #20]
 801464c:	2100      	movs	r1, #0
 801464e:	6041      	str	r1, [r0, #4]
 8014650:	e7ea      	b.n	8014628 <enet_frame_transmit+0x34>
 8014652:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 8014656:	4907      	ldr	r1, [pc, #28]	; (8014674 <enet_frame_transmit+0x80>)
 8014658:	bf05      	ittet	eq
 801465a:	3310      	addeq	r3, #16
 801465c:	6809      	ldreq	r1, [r1, #0]
 801465e:	690b      	ldrne	r3, [r1, #16]
 8014660:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 8014664:	bf08      	it	eq
 8014666:	185b      	addeq	r3, r3, r1
 8014668:	e7e2      	b.n	8014630 <enet_frame_transmit+0x3c>
 801466a:	2000      	movs	r0, #0
 801466c:	e7e2      	b.n	8014634 <enet_frame_transmit+0x40>
 801466e:	bf00      	nop
 8014670:	20009d7c 	andcs	r9, r0, ip, ror sp
 8014674:	40029000 	andmi	r9, r2, r0

08014678 <enet_transmit_checksum_config>:
 8014678:	6803      	ldr	r3, [r0, #0]
 801467a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 801467e:	430b      	orrs	r3, r1
 8014680:	6003      	str	r3, [r0, #0]
 8014682:	4770      	bx	lr

08014684 <enet_mac_address_set>:
 8014684:	888a      	ldrh	r2, [r1, #4]
 8014686:	4b03      	ldr	r3, [pc, #12]	; (8014694 <enet_mac_address_set+0x10>)
 8014688:	50c2      	str	r2, [r0, r3]
 801468a:	680a      	ldr	r2, [r1, #0]
 801468c:	3304      	adds	r3, #4
 801468e:	50c2      	str	r2, [r0, r3]
 8014690:	4770      	bx	lr
 8014692:	bf00      	nop
 8014694:	40028040 	andmi	r8, r2, r0, asr #32

08014698 <enet_rx_enable>:
 8014698:	4a05      	ldr	r2, [pc, #20]	; (80146b0 <enet_rx_enable+0x18>)
 801469a:	6813      	ldr	r3, [r2, #0]
 801469c:	f043 0304 	orr.w	r3, r3, #4
 80146a0:	6013      	str	r3, [r2, #0]
 80146a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80146a6:	6993      	ldr	r3, [r2, #24]
 80146a8:	f043 0302 	orr.w	r3, r3, #2
 80146ac:	6193      	str	r3, [r2, #24]
 80146ae:	4770      	bx	lr
 80146b0:	40028000 	andmi	r8, r2, r0

080146b4 <enet_phy_write_read>:
 80146b4:	b530      	push	{r4, r5, lr}
 80146b6:	4604      	mov	r4, r0
 80146b8:	4d13      	ldr	r5, [pc, #76]	; (8014708 <enet_phy_write_read+0x54>)
 80146ba:	0192      	lsls	r2, r2, #6
 80146bc:	6928      	ldr	r0, [r5, #16]
 80146be:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 80146c2:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
 80146c6:	f020 00c3 	bic.w	r0, r0, #195	; 0xc3
 80146ca:	4302      	orrs	r2, r0
 80146cc:	02c9      	lsls	r1, r1, #11
 80146ce:	b289      	uxth	r1, r1
 80146d0:	2c02      	cmp	r4, #2
 80146d2:	ea42 0204 	orr.w	r2, r2, r4
 80146d6:	ea42 0201 	orr.w	r2, r2, r1
 80146da:	bf08      	it	eq
 80146dc:	8819      	ldrheq	r1, [r3, #0]
 80146de:	f042 0201 	orr.w	r2, r2, #1
 80146e2:	bf08      	it	eq
 80146e4:	6169      	streq	r1, [r5, #20]
 80146e6:	612a      	str	r2, [r5, #16]
 80146e8:	4907      	ldr	r1, [pc, #28]	; (8014708 <enet_phy_write_read+0x54>)
 80146ea:	4a08      	ldr	r2, [pc, #32]	; (801470c <enet_phy_write_read+0x58>)
 80146ec:	6908      	ldr	r0, [r1, #16]
 80146ee:	07c0      	lsls	r0, r0, #31
 80146f0:	d501      	bpl.n	80146f6 <enet_phy_write_read+0x42>
 80146f2:	3a01      	subs	r2, #1
 80146f4:	d1fa      	bne.n	80146ec <enet_phy_write_read+0x38>
 80146f6:	690a      	ldr	r2, [r1, #16]
 80146f8:	43d2      	mvns	r2, r2
 80146fa:	f002 0001 	and.w	r0, r2, #1
 80146fe:	b90c      	cbnz	r4, 8014704 <enet_phy_write_read+0x50>
 8014700:	694a      	ldr	r2, [r1, #20]
 8014702:	801a      	strh	r2, [r3, #0]
 8014704:	bd30      	pop	{r4, r5, pc}
 8014706:	bf00      	nop
 8014708:	40028000 	andmi	r8, r2, r0
 801470c:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08014710 <enet_phy_config>:
 8014710:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014712:	4d22      	ldr	r5, [pc, #136]	; (801479c <enet_phy_config+0x8c>)
 8014714:	2001      	movs	r0, #1
 8014716:	692c      	ldr	r4, [r5, #16]
 8014718:	f000 fc70 	bl	8014ffc <rcu_clock_freq_get>
 801471c:	4b20      	ldr	r3, [pc, #128]	; (80147a0 <enet_phy_config+0x90>)
 801471e:	4a21      	ldr	r2, [pc, #132]	; (80147a4 <enet_phy_config+0x94>)
 8014720:	4403      	add	r3, r0
 8014722:	4293      	cmp	r3, r2
 8014724:	f024 041c 	bic.w	r4, r4, #28
 8014728:	d21f      	bcs.n	801476a <enet_phy_config+0x5a>
 801472a:	f044 0408 	orr.w	r4, r4, #8
 801472e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014732:	612c      	str	r4, [r5, #16]
 8014734:	2200      	movs	r2, #0
 8014736:	f8ad 3006 	strh.w	r3, [sp, #6]
 801473a:	2101      	movs	r1, #1
 801473c:	2002      	movs	r0, #2
 801473e:	f10d 0306 	add.w	r3, sp, #6
 8014742:	f7ff ffb7 	bl	80146b4 <enet_phy_write_read>
 8014746:	b310      	cbz	r0, 801478e <enet_phy_config+0x7e>
 8014748:	2200      	movs	r2, #0
 801474a:	4817      	ldr	r0, [pc, #92]	; (80147a8 <enet_phy_config+0x98>)
 801474c:	f7ff feaa 	bl	80144a4 <enet_delay>
 8014750:	2101      	movs	r1, #1
 8014752:	4610      	mov	r0, r2
 8014754:	f10d 0306 	add.w	r3, sp, #6
 8014758:	f7ff ffac 	bl	80146b4 <enet_phy_write_read>
 801475c:	b1b8      	cbz	r0, 801478e <enet_phy_config+0x7e>
 801475e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8014762:	43c0      	mvns	r0, r0
 8014764:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8014768:	e012      	b.n	8014790 <enet_phy_config+0x80>
 801476a:	4b10      	ldr	r3, [pc, #64]	; (80147ac <enet_phy_config+0x9c>)
 801476c:	4a10      	ldr	r2, [pc, #64]	; (80147b0 <enet_phy_config+0xa0>)
 801476e:	4403      	add	r3, r0
 8014770:	4293      	cmp	r3, r2
 8014772:	d802      	bhi.n	801477a <enet_phy_config+0x6a>
 8014774:	f044 040c 	orr.w	r4, r4, #12
 8014778:	e7d9      	b.n	801472e <enet_phy_config+0x1e>
 801477a:	4b0e      	ldr	r3, [pc, #56]	; (80147b4 <enet_phy_config+0xa4>)
 801477c:	4a0e      	ldr	r2, [pc, #56]	; (80147b8 <enet_phy_config+0xa8>)
 801477e:	4403      	add	r3, r0
 8014780:	4293      	cmp	r3, r2
 8014782:	d9d4      	bls.n	801472e <enet_phy_config+0x1e>
 8014784:	4b0d      	ldr	r3, [pc, #52]	; (80147bc <enet_phy_config+0xac>)
 8014786:	4a0e      	ldr	r2, [pc, #56]	; (80147c0 <enet_phy_config+0xb0>)
 8014788:	4403      	add	r3, r0
 801478a:	4293      	cmp	r3, r2
 801478c:	d902      	bls.n	8014794 <enet_phy_config+0x84>
 801478e:	2000      	movs	r0, #0
 8014790:	b003      	add	sp, #12
 8014792:	bd30      	pop	{r4, r5, pc}
 8014794:	f044 0404 	orr.w	r4, r4, #4
 8014798:	e7c9      	b.n	801472e <enet_phy_config+0x1e>
 801479a:	bf00      	nop
 801479c:	40028000 	andmi	r8, r2, r0
 80147a0:	feced300 	cdp2	3, 12, cr13, cr14, cr0, {0}
 80147a4:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 80147a8:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 80147ac:	fde9f140 	stc2l	1, cr15, [r9, #256]!	; 0x100
 80147b0:	017d783f 	cmneq	sp, pc, lsr r8
 80147b4:	fc6c7900 	stc2l	9, cr7, [ip], #-0	; <UNPREDICTABLE>
 80147b8:	01c9c37f 	biceq	ip, r9, pc, ror r3
 80147bc:	faa2b580 	blx	68c1dc4 <__stack_size+0x68bfdc4>
 80147c0:	0112a880 	tsteq	r2, r0, lsl #17

080147c4 <enet_init>:
 80147c4:	2300      	movs	r3, #0
 80147c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80147c8:	4604      	mov	r4, r0
 80147ca:	460d      	mov	r5, r1
 80147cc:	4616      	mov	r6, r2
 80147ce:	f8ad 3006 	strh.w	r3, [sp, #6]
 80147d2:	f7ff ff9d 	bl	8014710 <enet_phy_config>
 80147d6:	2800      	cmp	r0, #0
 80147d8:	d037      	beq.n	801484a <enet_init+0x86>
 80147da:	4b3b      	ldr	r3, [pc, #236]	; (80148c8 <enet_init+0x104>)
 80147dc:	4a3b      	ldr	r2, [pc, #236]	; (80148cc <enet_init+0x108>)
 80147de:	6819      	ldr	r1, [r3, #0]
 80147e0:	2c01      	cmp	r4, #1
 80147e2:	ea02 0201 	and.w	r2, r2, r1
 80147e6:	601a      	str	r2, [r3, #0]
 80147e8:	f04f 0200 	mov.w	r2, #0
 80147ec:	605a      	str	r2, [r3, #4]
 80147ee:	609a      	str	r2, [r3, #8]
 80147f0:	60da      	str	r2, [r3, #12]
 80147f2:	6999      	ldr	r1, [r3, #24]
 80147f4:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
 80147f8:	ea4f 4101 	mov.w	r1, r1, lsl #16
 80147fc:	ea4f 4111 	mov.w	r1, r1, lsr #16
 8014800:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8014804:	6199      	str	r1, [r3, #24]
 8014806:	4932      	ldr	r1, [pc, #200]	; (80148d0 <enet_init+0x10c>)
 8014808:	61da      	str	r2, [r3, #28]
 801480a:	6988      	ldr	r0, [r1, #24]
 801480c:	4b31      	ldr	r3, [pc, #196]	; (80148d4 <enet_init+0x110>)
 801480e:	ea03 0300 	and.w	r3, r3, r0
 8014812:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8014816:	618b      	str	r3, [r1, #24]
 8014818:	680b      	ldr	r3, [r1, #0]
 801481a:	4b2f      	ldr	r3, [pc, #188]	; (80148d8 <enet_init+0x114>)
 801481c:	600b      	str	r3, [r1, #0]
 801481e:	d01e      	beq.n	801485e <enet_init+0x9a>
 8014820:	08e3      	lsrs	r3, r4, #3
 8014822:	0861      	lsrs	r1, r4, #1
 8014824:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8014828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801482c:	430b      	orrs	r3, r1
 801482e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014832:	2101      	movs	r1, #1
 8014834:	2002      	movs	r0, #2
 8014836:	f10d 0306 	add.w	r3, sp, #6
 801483a:	f7ff ff3b 	bl	80146b4 <enet_phy_write_read>
 801483e:	b158      	cbz	r0, 8014858 <enet_init+0x94>
 8014840:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8014844:	f7ff fe2e 	bl	80144a4 <enet_delay>
 8014848:	e05d      	b.n	8014906 <enet_init+0x142>
 801484a:	4824      	ldr	r0, [pc, #144]	; (80148dc <enet_init+0x118>)
 801484c:	f7ff fe2a 	bl	80144a4 <enet_delay>
 8014850:	f7ff ff5e 	bl	8014710 <enet_phy_config>
 8014854:	2800      	cmp	r0, #0
 8014856:	d1c0      	bne.n	80147da <enet_init+0x16>
 8014858:	2000      	movs	r0, #0
 801485a:	b003      	add	sp, #12
 801485c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801485e:	4614      	mov	r4, r2
 8014860:	4f1f      	ldr	r7, [pc, #124]	; (80148e0 <enet_init+0x11c>)
 8014862:	2201      	movs	r2, #1
 8014864:	2000      	movs	r0, #0
 8014866:	4611      	mov	r1, r2
 8014868:	f10d 0306 	add.w	r3, sp, #6
 801486c:	f7ff ff22 	bl	80146b4 <enet_phy_write_read>
 8014870:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8014874:	3401      	adds	r4, #1
 8014876:	f002 0204 	and.w	r2, r2, #4
 801487a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801487e:	b912      	cbnz	r2, 8014886 <enet_init+0xc2>
 8014880:	42bc      	cmp	r4, r7
 8014882:	d1ee      	bne.n	8014862 <enet_init+0x9e>
 8014884:	e7e8      	b.n	8014858 <enet_init+0x94>
 8014886:	42bc      	cmp	r4, r7
 8014888:	d0e6      	beq.n	8014858 <enet_init+0x94>
 801488a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801488e:	2101      	movs	r1, #1
 8014890:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014894:	2002      	movs	r0, #2
 8014896:	2200      	movs	r2, #0
 8014898:	f7ff ff0c 	bl	80146b4 <enet_phy_write_read>
 801489c:	2800      	cmp	r0, #0
 801489e:	d0db      	beq.n	8014858 <enet_init+0x94>
 80148a0:	2400      	movs	r4, #0
 80148a2:	4f0f      	ldr	r7, [pc, #60]	; (80148e0 <enet_init+0x11c>)
 80148a4:	2201      	movs	r2, #1
 80148a6:	2000      	movs	r0, #0
 80148a8:	4611      	mov	r1, r2
 80148aa:	f10d 0306 	add.w	r3, sp, #6
 80148ae:	f7ff ff01 	bl	80146b4 <enet_phy_write_read>
 80148b2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80148b6:	3401      	adds	r4, #1
 80148b8:	f002 0220 	and.w	r2, r2, #32
 80148bc:	f8ad 2006 	strh.w	r2, [sp, #6]
 80148c0:	b982      	cbnz	r2, 80148e4 <enet_init+0x120>
 80148c2:	42bc      	cmp	r4, r7
 80148c4:	d1ee      	bne.n	80148a4 <enet_init+0xe0>
 80148c6:	e7c7      	b.n	8014858 <enet_init+0x94>
 80148c8:	40028000 	andmi	r8, r2, r0
 80148cc:	fd30810f 	ldc2	1, cr8, [r0, #-60]!	; 0xffffffc4
 80148d0:	40029000 	andmi	r9, r2, r0
 80148d4:	f8de3f23 			; <UNDEFINED> instruction: 0xf8de3f23
 80148d8:	02c16000 	sbceq	r6, r1, #0
 80148dc:	008fffff 	strdeq	pc, [pc], pc	; <UNPREDICTABLE>
 80148e0:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 80148e4:	42bc      	cmp	r4, r7
 80148e6:	d0b7      	beq.n	8014858 <enet_init+0x94>
 80148e8:	2101      	movs	r1, #1
 80148ea:	2210      	movs	r2, #16
 80148ec:	2000      	movs	r0, #0
 80148ee:	f7ff fee1 	bl	80146b4 <enet_phy_write_read>
 80148f2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80148f6:	f3c3 0480 	ubfx	r4, r3, #2, #1
 80148fa:	0799      	lsls	r1, r3, #30
 80148fc:	ea4f 24c4 	mov.w	r4, r4, lsl #11
 8014900:	d401      	bmi.n	8014906 <enet_init+0x142>
 8014902:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8014906:	4b63      	ldr	r3, [pc, #396]	; (8014a94 <enet_init+0x2d0>)
 8014908:	681a      	ldr	r2, [r3, #0]
 801490a:	f422 42b0 	bic.w	r2, r2, #22528	; 0x5800
 801490e:	4314      	orrs	r4, r2
 8014910:	056a      	lsls	r2, r5, #21
 8014912:	601c      	str	r4, [r3, #0]
 8014914:	d50b      	bpl.n	801492e <enet_init+0x16a>
 8014916:	681a      	ldr	r2, [r3, #0]
 8014918:	f005 6580 	and.w	r5, r5, #67108864	; 0x4000000
 801491c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8014920:	601a      	str	r2, [r3, #0]
 8014922:	4a5d      	ldr	r2, [pc, #372]	; (8014a98 <enet_init+0x2d4>)
 8014924:	6993      	ldr	r3, [r2, #24]
 8014926:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801492a:	431d      	orrs	r5, r3
 801492c:	6195      	str	r5, [r2, #24]
 801492e:	4959      	ldr	r1, [pc, #356]	; (8014a94 <enet_init+0x2d0>)
 8014930:	684b      	ldr	r3, [r1, #4]
 8014932:	431e      	orrs	r6, r3
 8014934:	4b59      	ldr	r3, [pc, #356]	; (8014a9c <enet_init+0x2d8>)
 8014936:	604e      	str	r6, [r1, #4]
 8014938:	681a      	ldr	r2, [r3, #0]
 801493a:	07d7      	lsls	r7, r2, #31
 801493c:	d510      	bpl.n	8014960 <enet_init+0x19c>
 801493e:	685a      	ldr	r2, [r3, #4]
 8014940:	680c      	ldr	r4, [r1, #0]
 8014942:	f002 0080 	and.w	r0, r2, #128	; 0x80
 8014946:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 801494a:	4320      	orrs	r0, r4
 801494c:	6008      	str	r0, [r1, #0]
 801494e:	4852      	ldr	r0, [pc, #328]	; (8014a98 <enet_init+0x2d4>)
 8014950:	0892      	lsrs	r2, r2, #2
 8014952:	6981      	ldr	r1, [r0, #24]
 8014954:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8014958:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 801495c:	430a      	orrs	r2, r1
 801495e:	6182      	str	r2, [r0, #24]
 8014960:	681a      	ldr	r2, [r3, #0]
 8014962:	0796      	lsls	r6, r2, #30
 8014964:	d508      	bpl.n	8014978 <enet_init+0x1b4>
 8014966:	494c      	ldr	r1, [pc, #304]	; (8014a98 <enet_init+0x2d4>)
 8014968:	6898      	ldr	r0, [r3, #8]
 801496a:	680a      	ldr	r2, [r1, #0]
 801496c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8014970:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8014974:	4302      	orrs	r2, r0
 8014976:	600a      	str	r2, [r1, #0]
 8014978:	681a      	ldr	r2, [r3, #0]
 801497a:	0755      	lsls	r5, r2, #29
 801497c:	d508      	bpl.n	8014990 <enet_init+0x1cc>
 801497e:	4946      	ldr	r1, [pc, #280]	; (8014a98 <enet_init+0x2d4>)
 8014980:	68d8      	ldr	r0, [r3, #12]
 8014982:	680a      	ldr	r2, [r1, #0]
 8014984:	f422 027e 	bic.w	r2, r2, #16646144	; 0xfe0000
 8014988:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 801498c:	4302      	orrs	r2, r0
 801498e:	600a      	str	r2, [r1, #0]
 8014990:	681a      	ldr	r2, [r3, #0]
 8014992:	0714      	lsls	r4, r2, #28
 8014994:	d508      	bpl.n	80149a8 <enet_init+0x1e4>
 8014996:	4940      	ldr	r1, [pc, #256]	; (8014a98 <enet_init+0x2d4>)
 8014998:	6918      	ldr	r0, [r3, #16]
 801499a:	680a      	ldr	r2, [r1, #0]
 801499c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80149a0:	f022 0202 	bic.w	r2, r2, #2
 80149a4:	4302      	orrs	r2, r0
 80149a6:	600a      	str	r2, [r1, #0]
 80149a8:	681a      	ldr	r2, [r3, #0]
 80149aa:	06d0      	lsls	r0, r2, #27
 80149ac:	d506      	bpl.n	80149bc <enet_init+0x1f8>
 80149ae:	493a      	ldr	r1, [pc, #232]	; (8014a98 <enet_init+0x2d4>)
 80149b0:	4a3b      	ldr	r2, [pc, #236]	; (8014aa0 <enet_init+0x2dc>)
 80149b2:	6988      	ldr	r0, [r1, #24]
 80149b4:	4002      	ands	r2, r0
 80149b6:	6958      	ldr	r0, [r3, #20]
 80149b8:	4302      	orrs	r2, r0
 80149ba:	618a      	str	r2, [r1, #24]
 80149bc:	681a      	ldr	r2, [r3, #0]
 80149be:	0691      	lsls	r1, r2, #26
 80149c0:	d508      	bpl.n	80149d4 <enet_init+0x210>
 80149c2:	4935      	ldr	r1, [pc, #212]	; (8014a98 <enet_init+0x2d4>)
 80149c4:	6998      	ldr	r0, [r3, #24]
 80149c6:	698a      	ldr	r2, [r1, #24]
 80149c8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80149cc:	f022 0204 	bic.w	r2, r2, #4
 80149d0:	4302      	orrs	r2, r0
 80149d2:	618a      	str	r2, [r1, #24]
 80149d4:	681a      	ldr	r2, [r3, #0]
 80149d6:	0652      	lsls	r2, r2, #25
 80149d8:	d506      	bpl.n	80149e8 <enet_init+0x224>
 80149da:	492e      	ldr	r1, [pc, #184]	; (8014a94 <enet_init+0x2d0>)
 80149dc:	69d8      	ldr	r0, [r3, #28]
 80149de:	69ca      	ldr	r2, [r1, #28]
 80149e0:	0c52      	lsrs	r2, r2, #17
 80149e2:	0452      	lsls	r2, r2, #17
 80149e4:	4302      	orrs	r2, r0
 80149e6:	61ca      	str	r2, [r1, #28]
 80149e8:	681a      	ldr	r2, [r3, #0]
 80149ea:	0617      	lsls	r7, r2, #24
 80149ec:	d517      	bpl.n	8014a1e <enet_init+0x25a>
 80149ee:	4c29      	ldr	r4, [pc, #164]	; (8014a94 <enet_init+0x2d0>)
 80149f0:	6a1a      	ldr	r2, [r3, #32]
 80149f2:	69a0      	ldr	r0, [r4, #24]
 80149f4:	f422 417f 	bic.w	r1, r2, #65280	; 0xff00
 80149f8:	f020 00be 	bic.w	r0, r0, #190	; 0xbe
 80149fc:	0400      	lsls	r0, r0, #16
 80149fe:	0c00      	lsrs	r0, r0, #16
 8014a00:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8014a04:	4301      	orrs	r1, r0
 8014a06:	4824      	ldr	r0, [pc, #144]	; (8014a98 <enet_init+0x2d4>)
 8014a08:	61a1      	str	r1, [r4, #24]
 8014a0a:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8014a0e:	0a12      	lsrs	r2, r2, #8
 8014a10:	f021 0177 	bic.w	r1, r1, #119	; 0x77
 8014a14:	f002 0277 	and.w	r2, r2, #119	; 0x77
 8014a18:	430a      	orrs	r2, r1
 8014a1a:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8014a1e:	681a      	ldr	r2, [r3, #0]
 8014a20:	05d6      	lsls	r6, r2, #23
 8014a22:	bf42      	ittt	mi
 8014a24:	6a59      	ldrmi	r1, [r3, #36]	; 0x24
 8014a26:	4a1b      	ldrmi	r2, [pc, #108]	; (8014a94 <enet_init+0x2d0>)
 8014a28:	6091      	strmi	r1, [r2, #8]
 8014a2a:	681a      	ldr	r2, [r3, #0]
 8014a2c:	0595      	lsls	r5, r2, #22
 8014a2e:	bf42      	ittt	mi
 8014a30:	4a18      	ldrmi	r2, [pc, #96]	; (8014a94 <enet_init+0x2d0>)
 8014a32:	6a99      	ldrmi	r1, [r3, #40]	; 0x28
 8014a34:	60d1      	strmi	r1, [r2, #12]
 8014a36:	681a      	ldr	r2, [r3, #0]
 8014a38:	0554      	lsls	r4, r2, #21
 8014a3a:	d508      	bpl.n	8014a4e <enet_init+0x28a>
 8014a3c:	4915      	ldr	r1, [pc, #84]	; (8014a94 <enet_init+0x2d0>)
 8014a3e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8014a40:	684a      	ldr	r2, [r1, #4]
 8014a42:	f422 62fb 	bic.w	r2, r2, #2008	; 0x7d8
 8014a46:	f022 0206 	bic.w	r2, r2, #6
 8014a4a:	4302      	orrs	r2, r0
 8014a4c:	604a      	str	r2, [r1, #4]
 8014a4e:	681a      	ldr	r2, [r3, #0]
 8014a50:	0510      	lsls	r0, r2, #20
 8014a52:	d508      	bpl.n	8014a66 <enet_init+0x2a2>
 8014a54:	490f      	ldr	r1, [pc, #60]	; (8014a94 <enet_init+0x2d0>)
 8014a56:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014a58:	680a      	ldr	r2, [r1, #0]
 8014a5a:	f422 3291 	bic.w	r2, r2, #74240	; 0x12200
 8014a5e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8014a62:	4302      	orrs	r2, r0
 8014a64:	600a      	str	r2, [r1, #0]
 8014a66:	681a      	ldr	r2, [r3, #0]
 8014a68:	04d1      	lsls	r1, r2, #19
 8014a6a:	d506      	bpl.n	8014a7a <enet_init+0x2b6>
 8014a6c:	4909      	ldr	r1, [pc, #36]	; (8014a94 <enet_init+0x2d0>)
 8014a6e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8014a70:	680a      	ldr	r2, [r1, #0]
 8014a72:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8014a76:	4302      	orrs	r2, r0
 8014a78:	600a      	str	r2, [r1, #0]
 8014a7a:	681a      	ldr	r2, [r3, #0]
 8014a7c:	0492      	lsls	r2, r2, #18
 8014a7e:	d506      	bpl.n	8014a8e <enet_init+0x2ca>
 8014a80:	4904      	ldr	r1, [pc, #16]	; (8014a94 <enet_init+0x2d0>)
 8014a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a84:	680a      	ldr	r2, [r1, #0]
 8014a86:	f422 2260 	bic.w	r2, r2, #917504	; 0xe0000
 8014a8a:	4313      	orrs	r3, r2
 8014a8c:	600b      	str	r3, [r1, #0]
 8014a8e:	2001      	movs	r0, #1
 8014a90:	e6e3      	b.n	801485a <enet_init+0x96>
 8014a92:	bf00      	nop
 8014a94:	40028000 	andmi	r8, r2, r0
 8014a98:	40029000 	andmi	r9, r2, r0
 8014a9c:	20009d80 	andcs	r9, r0, r0, lsl #27
 8014aa0:	fdde3fe7 	ldc2l	15, cr3, [lr, #924]	; 0x39c

08014aa4 <enet_txfifo_flush>:
 8014aa4:	4b06      	ldr	r3, [pc, #24]	; (8014ac0 <enet_txfifo_flush+0x1c>)
 8014aa6:	4807      	ldr	r0, [pc, #28]	; (8014ac4 <enet_txfifo_flush+0x20>)
 8014aa8:	699a      	ldr	r2, [r3, #24]
 8014aaa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8014aae:	619a      	str	r2, [r3, #24]
 8014ab0:	699a      	ldr	r2, [r3, #24]
 8014ab2:	02d2      	lsls	r2, r2, #11
 8014ab4:	d502      	bpl.n	8014abc <enet_txfifo_flush+0x18>
 8014ab6:	3801      	subs	r0, #1
 8014ab8:	d1fa      	bne.n	8014ab0 <enet_txfifo_flush+0xc>
 8014aba:	4770      	bx	lr
 8014abc:	2001      	movs	r0, #1
 8014abe:	4770      	bx	lr
 8014ac0:	40029000 	andmi	r9, r2, r0
 8014ac4:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08014ac8 <enet_tx_enable>:
 8014ac8:	4a06      	ldr	r2, [pc, #24]	; (8014ae4 <enet_tx_enable+0x1c>)
 8014aca:	b508      	push	{r3, lr}
 8014acc:	6813      	ldr	r3, [r2, #0]
 8014ace:	f043 0308 	orr.w	r3, r3, #8
 8014ad2:	6013      	str	r3, [r2, #0]
 8014ad4:	f7ff ffe6 	bl	8014aa4 <enet_txfifo_flush>
 8014ad8:	4a03      	ldr	r2, [pc, #12]	; (8014ae8 <enet_tx_enable+0x20>)
 8014ada:	6993      	ldr	r3, [r2, #24]
 8014adc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014ae0:	6193      	str	r3, [r2, #24]
 8014ae2:	bd08      	pop	{r3, pc}
 8014ae4:	40028000 	andmi	r8, r2, r0
 8014ae8:	40029000 	andmi	r9, r2, r0

08014aec <enet_enable>:
 8014aec:	b508      	push	{r3, lr}
 8014aee:	f7ff ffeb 	bl	8014ac8 <enet_tx_enable>
 8014af2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014af6:	f7ff bdcf 	b.w	8014698 <enet_rx_enable>

08014afa <enet_desc_information_get>:
 8014afa:	2905      	cmp	r1, #5
 8014afc:	d817      	bhi.n	8014b2e <enet_desc_information_get+0x34>
 8014afe:	e8df f001 	tbb	[pc, r1]
 8014b02:	03091012 	movweq	r1, #36882	; 0x9012
 8014b06:	68401007 	stmdavs	r0, {r0, r1, r2, ip}^
 8014b0a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8014b0e:	4770      	bx	lr
 8014b10:	88c0      	ldrh	r0, [r0, #6]
 8014b12:	e7fa      	b.n	8014b0a <enet_desc_information_get+0x10>
 8014b14:	8840      	ldrh	r0, [r0, #2]
 8014b16:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8014b1a:	2804      	cmp	r0, #4
 8014b1c:	d90a      	bls.n	8014b34 <enet_desc_information_get+0x3a>
 8014b1e:	3804      	subs	r0, #4
 8014b20:	4770      	bx	lr
 8014b22:	6880      	ldr	r0, [r0, #8]
 8014b24:	4770      	bx	lr
 8014b26:	6800      	ldr	r0, [r0, #0]
 8014b28:	f3c0 00c3 	ubfx	r0, r0, #3, #4
 8014b2c:	4770      	bx	lr
 8014b2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014b32:	4770      	bx	lr
 8014b34:	2000      	movs	r0, #0
 8014b36:	4770      	bx	lr

08014b38 <enet_rxframe_drop>:
 8014b38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014b3c:	4814      	ldr	r0, [pc, #80]	; (8014b90 <enet_rxframe_drop+0x58>)
 8014b3e:	b510      	push	{r4, lr}
 8014b40:	6802      	ldr	r2, [r0, #0]
 8014b42:	4914      	ldr	r1, [pc, #80]	; (8014b94 <enet_rxframe_drop+0x5c>)
 8014b44:	6854      	ldr	r4, [r2, #4]
 8014b46:	6013      	str	r3, [r2, #0]
 8014b48:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8014b4c:	680b      	ldr	r3, [r1, #0]
 8014b4e:	d009      	beq.n	8014b64 <enet_rxframe_drop+0x2c>
 8014b50:	b12b      	cbz	r3, 8014b5e <enet_rxframe_drop+0x26>
 8014b52:	68da      	ldr	r2, [r3, #12]
 8014b54:	6002      	str	r2, [r0, #0]
 8014b56:	681a      	ldr	r2, [r3, #0]
 8014b58:	b1ba      	cbz	r2, 8014b8a <enet_rxframe_drop+0x52>
 8014b5a:	600a      	str	r2, [r1, #0]
 8014b5c:	bd10      	pop	{r4, pc}
 8014b5e:	68d3      	ldr	r3, [r2, #12]
 8014b60:	6003      	str	r3, [r0, #0]
 8014b62:	e7fb      	b.n	8014b5c <enet_rxframe_drop+0x24>
 8014b64:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8014b68:	4c0b      	ldr	r4, [pc, #44]	; (8014b98 <enet_rxframe_drop+0x60>)
 8014b6a:	d006      	beq.n	8014b7a <enet_rxframe_drop+0x42>
 8014b6c:	68e2      	ldr	r2, [r4, #12]
 8014b6e:	6002      	str	r2, [r0, #0]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d0f3      	beq.n	8014b5c <enet_rxframe_drop+0x24>
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	600b      	str	r3, [r1, #0]
 8014b78:	e7f0      	b.n	8014b5c <enet_rxframe_drop+0x24>
 8014b7a:	6824      	ldr	r4, [r4, #0]
 8014b7c:	3210      	adds	r2, #16
 8014b7e:	f3c4 0484 	ubfx	r4, r4, #2, #5
 8014b82:	4422      	add	r2, r4
 8014b84:	6002      	str	r2, [r0, #0]
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d0e8      	beq.n	8014b5c <enet_rxframe_drop+0x24>
 8014b8a:	3310      	adds	r3, #16
 8014b8c:	e7f3      	b.n	8014b76 <enet_rxframe_drop+0x3e>
 8014b8e:	bf00      	nop
 8014b90:	20009d78 	andcs	r9, r0, r8, ror sp
 8014b94:	20009d70 	andcs	r9, r0, r0, ror sp
 8014b98:	40029000 	andmi	r9, r2, r0

08014b9c <enet_rxframe_size_get>:
 8014b9c:	b508      	push	{r3, lr}
 8014b9e:	4b0c      	ldr	r3, [pc, #48]	; (8014bd0 <enet_rxframe_size_get+0x34>)
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	6818      	ldr	r0, [r3, #0]
 8014ba4:	2800      	cmp	r0, #0
 8014ba6:	db10      	blt.n	8014bca <enet_rxframe_size_get+0x2e>
 8014ba8:	f400 4303 	and.w	r3, r0, #33536	; 0x8300
 8014bac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014bb0:	d003      	beq.n	8014bba <enet_rxframe_size_get+0x1e>
 8014bb2:	f7ff ffc1 	bl	8014b38 <enet_rxframe_drop>
 8014bb6:	2001      	movs	r0, #1
 8014bb8:	bd08      	pop	{r3, pc}
 8014bba:	f000 0321 	and.w	r3, r0, #33	; 0x21
 8014bbe:	2b21      	cmp	r3, #33	; 0x21
 8014bc0:	d0f7      	beq.n	8014bb2 <enet_rxframe_size_get+0x16>
 8014bc2:	f3c0 400d 	ubfx	r0, r0, #16, #14
 8014bc6:	3804      	subs	r0, #4
 8014bc8:	e7f6      	b.n	8014bb8 <enet_rxframe_size_get+0x1c>
 8014bca:	2000      	movs	r0, #0
 8014bcc:	e7f4      	b.n	8014bb8 <enet_rxframe_size_get+0x1c>
 8014bce:	bf00      	nop
 8014bd0:	20009d78 	andcs	r9, r0, r8, ror sp

08014bd4 <enet_initpara_reset>:
 8014bd4:	2200      	movs	r2, #0
 8014bd6:	4b08      	ldr	r3, [pc, #32]	; (8014bf8 <enet_initpara_reset+0x24>)
 8014bd8:	e9c3 2200 	strd	r2, r2, [r3]
 8014bdc:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8014be0:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8014be4:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8014be8:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8014bec:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 8014bf0:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
 8014bf4:	639a      	str	r2, [r3, #56]	; 0x38
 8014bf6:	4770      	bx	lr
 8014bf8:	20009d80 	andcs	r9, r0, r0, lsl #27

08014bfc <enet_deinit>:
 8014bfc:	b508      	push	{r3, lr}
 8014bfe:	f640 200e 	movw	r0, #2574	; 0xa0e
 8014c02:	f000 f946 	bl	8014e92 <rcu_periph_reset_enable>
 8014c06:	f640 200e 	movw	r0, #2574	; 0xa0e
 8014c0a:	f000 f944 	bl	8014e96 <rcu_periph_reset_disable>
 8014c0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014c12:	f7ff bfdf 	b.w	8014bd4 <enet_initpara_reset>
	...

08014c18 <fmc_bank0_unlock>:
 8014c18:	4b04      	ldr	r3, [pc, #16]	; (8014c2c <fmc_bank0_unlock+0x14>)
 8014c1a:	691a      	ldr	r2, [r3, #16]
 8014c1c:	0612      	lsls	r2, r2, #24
 8014c1e:	bf41      	itttt	mi
 8014c20:	4a03      	ldrmi	r2, [pc, #12]	; (8014c30 <fmc_bank0_unlock+0x18>)
 8014c22:	605a      	strmi	r2, [r3, #4]
 8014c24:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8014c28:	605a      	strmi	r2, [r3, #4]
 8014c2a:	4770      	bx	lr
 8014c2c:	40022000 	andmi	r2, r2, r0
 8014c30:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08014c34 <fmc_bank1_unlock>:
 8014c34:	4b04      	ldr	r3, [pc, #16]	; (8014c48 <fmc_bank1_unlock+0x14>)
 8014c36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014c38:	0612      	lsls	r2, r2, #24
 8014c3a:	bf41      	itttt	mi
 8014c3c:	4a03      	ldrmi	r2, [pc, #12]	; (8014c4c <fmc_bank1_unlock+0x18>)
 8014c3e:	645a      	strmi	r2, [r3, #68]	; 0x44
 8014c40:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8014c44:	645a      	strmi	r2, [r3, #68]	; 0x44
 8014c46:	4770      	bx	lr
 8014c48:	40022000 	andmi	r2, r2, r0
 8014c4c:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08014c50 <fmc_bank0_lock>:
 8014c50:	4a02      	ldr	r2, [pc, #8]	; (8014c5c <fmc_bank0_lock+0xc>)
 8014c52:	6913      	ldr	r3, [r2, #16]
 8014c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014c58:	6113      	str	r3, [r2, #16]
 8014c5a:	4770      	bx	lr
 8014c5c:	40022000 	andmi	r2, r2, r0

08014c60 <fmc_bank1_lock>:
 8014c60:	4a02      	ldr	r2, [pc, #8]	; (8014c6c <fmc_bank1_lock+0xc>)
 8014c62:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8014c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014c68:	6513      	str	r3, [r2, #80]	; 0x50
 8014c6a:	4770      	bx	lr
 8014c6c:	40022000 	andmi	r2, r2, r0

08014c70 <fmc_bank0_state_get>:
 8014c70:	4b07      	ldr	r3, [pc, #28]	; (8014c90 <fmc_bank0_state_get+0x20>)
 8014c72:	68da      	ldr	r2, [r3, #12]
 8014c74:	07d1      	lsls	r1, r2, #31
 8014c76:	d407      	bmi.n	8014c88 <fmc_bank0_state_get+0x18>
 8014c78:	68da      	ldr	r2, [r3, #12]
 8014c7a:	06d2      	lsls	r2, r2, #27
 8014c7c:	d406      	bmi.n	8014c8c <fmc_bank0_state_get+0x1c>
 8014c7e:	68d8      	ldr	r0, [r3, #12]
 8014c80:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8014c84:	0040      	lsls	r0, r0, #1
 8014c86:	4770      	bx	lr
 8014c88:	2001      	movs	r0, #1
 8014c8a:	4770      	bx	lr
 8014c8c:	2003      	movs	r0, #3
 8014c8e:	4770      	bx	lr
 8014c90:	40022000 	andmi	r2, r2, r0

08014c94 <fmc_bank1_state_get>:
 8014c94:	4b07      	ldr	r3, [pc, #28]	; (8014cb4 <fmc_bank1_state_get+0x20>)
 8014c96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014c98:	07d1      	lsls	r1, r2, #31
 8014c9a:	d407      	bmi.n	8014cac <fmc_bank1_state_get+0x18>
 8014c9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014c9e:	06d2      	lsls	r2, r2, #27
 8014ca0:	d406      	bmi.n	8014cb0 <fmc_bank1_state_get+0x1c>
 8014ca2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8014ca4:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8014ca8:	0040      	lsls	r0, r0, #1
 8014caa:	4770      	bx	lr
 8014cac:	2001      	movs	r0, #1
 8014cae:	4770      	bx	lr
 8014cb0:	2003      	movs	r0, #3
 8014cb2:	4770      	bx	lr
 8014cb4:	40022000 	andmi	r2, r2, r0

08014cb8 <fwdgt_enable>:
 8014cb8:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8014cbc:	4b01      	ldr	r3, [pc, #4]	; (8014cc4 <fwdgt_enable+0xc>)
 8014cbe:	601a      	str	r2, [r3, #0]
 8014cc0:	4770      	bx	lr
 8014cc2:	bf00      	nop
 8014cc4:	40003000 	andmi	r3, r0, r0

08014cc8 <fwdgt_counter_reload>:
 8014cc8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8014ccc:	4b01      	ldr	r3, [pc, #4]	; (8014cd4 <fwdgt_counter_reload+0xc>)
 8014cce:	601a      	str	r2, [r3, #0]
 8014cd0:	4770      	bx	lr
 8014cd2:	bf00      	nop
 8014cd4:	40003000 	andmi	r3, r0, r0

08014cd8 <fwdgt_config>:
 8014cd8:	f245 5355 	movw	r3, #21845	; 0x5555
 8014cdc:	4a11      	ldr	r2, [pc, #68]	; (8014d24 <fwdgt_config+0x4c>)
 8014cde:	b510      	push	{r4, lr}
 8014ce0:	4c11      	ldr	r4, [pc, #68]	; (8014d28 <fwdgt_config+0x50>)
 8014ce2:	6013      	str	r3, [r2, #0]
 8014ce4:	68d3      	ldr	r3, [r2, #12]
 8014ce6:	3c01      	subs	r4, #1
 8014ce8:	f003 0301 	and.w	r3, r3, #1
 8014cec:	d013      	beq.n	8014d16 <fwdgt_config+0x3e>
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d1f8      	bne.n	8014ce4 <fwdgt_config+0xc>
 8014cf2:	6051      	str	r1, [r2, #4]
 8014cf4:	490c      	ldr	r1, [pc, #48]	; (8014d28 <fwdgt_config+0x50>)
 8014cf6:	4a0b      	ldr	r2, [pc, #44]	; (8014d24 <fwdgt_config+0x4c>)
 8014cf8:	68d3      	ldr	r3, [r2, #12]
 8014cfa:	3901      	subs	r1, #1
 8014cfc:	f003 0302 	and.w	r3, r3, #2
 8014d00:	d00d      	beq.n	8014d1e <fwdgt_config+0x46>
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d1f8      	bne.n	8014cf8 <fwdgt_config+0x20>
 8014d06:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8014d0a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8014d0e:	6090      	str	r0, [r2, #8]
 8014d10:	2001      	movs	r0, #1
 8014d12:	6013      	str	r3, [r2, #0]
 8014d14:	e002      	b.n	8014d1c <fwdgt_config+0x44>
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d0eb      	beq.n	8014cf2 <fwdgt_config+0x1a>
 8014d1a:	2000      	movs	r0, #0
 8014d1c:	bd10      	pop	{r4, pc}
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d1fb      	bne.n	8014d1a <fwdgt_config+0x42>
 8014d22:	e7f0      	b.n	8014d06 <fwdgt_config+0x2e>
 8014d24:	40003000 	andmi	r3, r0, r0
 8014d28:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08014d2c <gpio_init>:
 8014d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d30:	f04f 0c0f 	mov.w	ip, #15
 8014d34:	06cf      	lsls	r7, r1, #27
 8014d36:	f04f 0400 	mov.w	r4, #0
 8014d3a:	f04f 0701 	mov.w	r7, #1
 8014d3e:	f001 050f 	and.w	r5, r1, #15
 8014d42:	bf48      	it	mi
 8014d44:	4315      	orrmi	r5, r2
 8014d46:	fa23 f204 	lsr.w	r2, r3, r4
 8014d4a:	07d6      	lsls	r6, r2, #31
 8014d4c:	d510      	bpl.n	8014d70 <gpio_init+0x44>
 8014d4e:	00a2      	lsls	r2, r4, #2
 8014d50:	6806      	ldr	r6, [r0, #0]
 8014d52:	fa0c fe02 	lsl.w	lr, ip, r2
 8014d56:	ea26 060e 	bic.w	r6, r6, lr
 8014d5a:	fa05 f202 	lsl.w	r2, r5, r2
 8014d5e:	2928      	cmp	r1, #40	; 0x28
 8014d60:	ea42 0206 	orr.w	r2, r2, r6
 8014d64:	d128      	bne.n	8014db8 <gpio_init+0x8c>
 8014d66:	fa07 f604 	lsl.w	r6, r7, r4
 8014d6a:	401e      	ands	r6, r3
 8014d6c:	6146      	str	r6, [r0, #20]
 8014d6e:	6002      	str	r2, [r0, #0]
 8014d70:	3401      	adds	r4, #1
 8014d72:	2c08      	cmp	r4, #8
 8014d74:	d1e7      	bne.n	8014d46 <gpio_init+0x1a>
 8014d76:	2600      	movs	r6, #0
 8014d78:	f04f 0c0f 	mov.w	ip, #15
 8014d7c:	2701      	movs	r7, #1
 8014d7e:	f106 0208 	add.w	r2, r6, #8
 8014d82:	fa23 f402 	lsr.w	r4, r3, r2
 8014d86:	07e4      	lsls	r4, r4, #31
 8014d88:	d511      	bpl.n	8014dae <gpio_init+0x82>
 8014d8a:	00b4      	lsls	r4, r6, #2
 8014d8c:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8014d90:	fa0c f804 	lsl.w	r8, ip, r4
 8014d94:	ea2e 0e08 	bic.w	lr, lr, r8
 8014d98:	fa05 f404 	lsl.w	r4, r5, r4
 8014d9c:	2928      	cmp	r1, #40	; 0x28
 8014d9e:	ea44 040e 	orr.w	r4, r4, lr
 8014da2:	d110      	bne.n	8014dc6 <gpio_init+0x9a>
 8014da4:	fa07 f202 	lsl.w	r2, r7, r2
 8014da8:	401a      	ands	r2, r3
 8014daa:	6142      	str	r2, [r0, #20]
 8014dac:	6044      	str	r4, [r0, #4]
 8014dae:	3601      	adds	r6, #1
 8014db0:	2e08      	cmp	r6, #8
 8014db2:	d1e4      	bne.n	8014d7e <gpio_init+0x52>
 8014db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014db8:	2948      	cmp	r1, #72	; 0x48
 8014dba:	bf02      	ittt	eq
 8014dbc:	fa07 f604 	lsleq.w	r6, r7, r4
 8014dc0:	401e      	andeq	r6, r3
 8014dc2:	6106      	streq	r6, [r0, #16]
 8014dc4:	e7d3      	b.n	8014d6e <gpio_init+0x42>
 8014dc6:	2948      	cmp	r1, #72	; 0x48
 8014dc8:	bf02      	ittt	eq
 8014dca:	fa07 f202 	lsleq.w	r2, r7, r2
 8014dce:	401a      	andeq	r2, r3
 8014dd0:	6102      	streq	r2, [r0, #16]
 8014dd2:	e7eb      	b.n	8014dac <gpio_init+0x80>

08014dd4 <gpio_pin_remap_config>:
 8014dd4:	2800      	cmp	r0, #0
 8014dd6:	4a16      	ldr	r2, [pc, #88]	; (8014e30 <gpio_pin_remap_config+0x5c>)
 8014dd8:	b530      	push	{r4, r5, lr}
 8014dda:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 8014dde:	bfb4      	ite	lt
 8014de0:	69d3      	ldrlt	r3, [r2, #28]
 8014de2:	6853      	ldrge	r3, [r2, #4]
 8014de4:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
 8014de8:	b284      	uxth	r4, r0
 8014dea:	d110      	bne.n	8014e0e <gpio_pin_remap_config+0x3a>
 8014dec:	6855      	ldr	r5, [r2, #4]
 8014dee:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8014df2:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 8014df6:	6055      	str	r5, [r2, #4]
 8014df8:	b119      	cbz	r1, 8014e02 <gpio_pin_remap_config+0x2e>
 8014dfa:	0d42      	lsrs	r2, r0, #21
 8014dfc:	0112      	lsls	r2, r2, #4
 8014dfe:	4094      	lsls	r4, r2
 8014e00:	4323      	orrs	r3, r4
 8014e02:	4a0b      	ldr	r2, [pc, #44]	; (8014e30 <gpio_pin_remap_config+0x5c>)
 8014e04:	2800      	cmp	r0, #0
 8014e06:	bfb4      	ite	lt
 8014e08:	61d3      	strlt	r3, [r2, #28]
 8014e0a:	6053      	strge	r3, [r2, #4]
 8014e0c:	bd30      	pop	{r4, r5, pc}
 8014e0e:	02c2      	lsls	r2, r0, #11
 8014e10:	bf4d      	iteet	mi
 8014e12:	2203      	movmi	r2, #3
 8014e14:	0d42      	lsrpl	r2, r0, #21
 8014e16:	0112      	lslpl	r2, r2, #4
 8014e18:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
 8014e1c:	bf4c      	ite	mi
 8014e1e:	40aa      	lslmi	r2, r5
 8014e20:	fa04 f202 	lslpl.w	r2, r4, r2
 8014e24:	ea23 0302 	bic.w	r3, r3, r2
 8014e28:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8014e2c:	e7e4      	b.n	8014df8 <gpio_pin_remap_config+0x24>
 8014e2e:	bf00      	nop
 8014e30:	40010000 	andmi	r0, r1, r0

08014e34 <gpio_ethernet_phy_select>:
 8014e34:	4b04      	ldr	r3, [pc, #16]	; (8014e48 <gpio_ethernet_phy_select+0x14>)
 8014e36:	685a      	ldr	r2, [r3, #4]
 8014e38:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8014e3c:	605a      	str	r2, [r3, #4]
 8014e3e:	685a      	ldr	r2, [r3, #4]
 8014e40:	4302      	orrs	r2, r0
 8014e42:	605a      	str	r2, [r3, #4]
 8014e44:	4770      	bx	lr
 8014e46:	bf00      	nop
 8014e48:	40010000 	andmi	r0, r1, r0

08014e4c <pmu_backup_write_enable>:
 8014e4c:	4a02      	ldr	r2, [pc, #8]	; (8014e58 <pmu_backup_write_enable+0xc>)
 8014e4e:	6813      	ldr	r3, [r2, #0]
 8014e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014e54:	6013      	str	r3, [r2, #0]
 8014e56:	4770      	bx	lr
 8014e58:	40007000 	andmi	r7, r0, r0

08014e5c <rcu_periph_clock_enable>:
 8014e5c:	2201      	movs	r2, #1
 8014e5e:	0983      	lsrs	r3, r0, #6
 8014e60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014e64:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8014e68:	6819      	ldr	r1, [r3, #0]
 8014e6a:	f000 001f 	and.w	r0, r0, #31
 8014e6e:	4082      	lsls	r2, r0
 8014e70:	430a      	orrs	r2, r1
 8014e72:	601a      	str	r2, [r3, #0]
 8014e74:	4770      	bx	lr

08014e76 <rcu_periph_clock_disable>:
 8014e76:	2101      	movs	r1, #1
 8014e78:	0983      	lsrs	r3, r0, #6
 8014e7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014e7e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8014e82:	681a      	ldr	r2, [r3, #0]
 8014e84:	f000 001f 	and.w	r0, r0, #31
 8014e88:	4081      	lsls	r1, r0
 8014e8a:	ea22 0201 	bic.w	r2, r2, r1
 8014e8e:	601a      	str	r2, [r3, #0]
 8014e90:	4770      	bx	lr

08014e92 <rcu_periph_reset_enable>:
 8014e92:	f7ff bfe3 	b.w	8014e5c <rcu_periph_clock_enable>

08014e96 <rcu_periph_reset_disable>:
 8014e96:	f7ff bfee 	b.w	8014e76 <rcu_periph_clock_disable>
	...

08014e9c <rcu_ckout0_config>:
 8014e9c:	4a03      	ldr	r2, [pc, #12]	; (8014eac <rcu_ckout0_config+0x10>)
 8014e9e:	6853      	ldr	r3, [r2, #4]
 8014ea0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8014ea4:	4303      	orrs	r3, r0
 8014ea6:	6053      	str	r3, [r2, #4]
 8014ea8:	4770      	bx	lr
 8014eaa:	bf00      	nop
 8014eac:	40021000 	andmi	r1, r2, r0

08014eb0 <rcu_pll2_config>:
 8014eb0:	4b04      	ldr	r3, [pc, #16]	; (8014ec4 <rcu_pll2_config+0x14>)
 8014eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014eb4:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8014eb8:	62da      	str	r2, [r3, #44]	; 0x2c
 8014eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ebc:	4302      	orrs	r2, r0
 8014ebe:	62da      	str	r2, [r3, #44]	; 0x2c
 8014ec0:	4770      	bx	lr
 8014ec2:	bf00      	nop
 8014ec4:	40021000 	andmi	r1, r2, r0

08014ec8 <rcu_adc_clock_config>:
 8014ec8:	490c      	ldr	r1, [pc, #48]	; (8014efc <rcu_adc_clock_config+0x34>)
 8014eca:	2805      	cmp	r0, #5
 8014ecc:	684b      	ldr	r3, [r1, #4]
 8014ece:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014ed2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8014ed6:	d006      	beq.n	8014ee6 <rcu_adc_clock_config+0x1e>
 8014ed8:	d803      	bhi.n	8014ee2 <rcu_adc_clock_config+0x1a>
 8014eda:	2804      	cmp	r0, #4
 8014edc:	d10a      	bne.n	8014ef4 <rcu_adc_clock_config+0x2c>
 8014ede:	604b      	str	r3, [r1, #4]
 8014ee0:	4770      	bx	lr
 8014ee2:	2807      	cmp	r0, #7
 8014ee4:	d1fb      	bne.n	8014ede <rcu_adc_clock_config+0x16>
 8014ee6:	4a06      	ldr	r2, [pc, #24]	; (8014f00 <rcu_adc_clock_config+0x38>)
 8014ee8:	ea02 3280 	and.w	r2, r2, r0, lsl #14
 8014eec:	4313      	orrs	r3, r2
 8014eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014ef2:	e7f4      	b.n	8014ede <rcu_adc_clock_config+0x16>
 8014ef4:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 8014ef8:	e7f1      	b.n	8014ede <rcu_adc_clock_config+0x16>
 8014efa:	bf00      	nop
 8014efc:	40021000 	andmi	r1, r2, r0
 8014f00:	fffec000 			; <UNDEFINED> instruction: 0xfffec000

08014f04 <rcu_i2s2_clock_config>:
 8014f04:	4a03      	ldr	r2, [pc, #12]	; (8014f14 <rcu_i2s2_clock_config+0x10>)
 8014f06:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8014f08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8014f0c:	4303      	orrs	r3, r0
 8014f0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014f10:	4770      	bx	lr
 8014f12:	bf00      	nop
 8014f14:	40021000 	andmi	r1, r2, r0

08014f18 <rcu_flag_get>:
 8014f18:	0983      	lsrs	r3, r0, #6
 8014f1a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014f1e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8014f22:	681a      	ldr	r2, [r3, #0]
 8014f24:	2301      	movs	r3, #1
 8014f26:	f000 001f 	and.w	r0, r0, #31
 8014f2a:	4083      	lsls	r3, r0
 8014f2c:	4213      	tst	r3, r2
 8014f2e:	bf14      	ite	ne
 8014f30:	2001      	movne	r0, #1
 8014f32:	2000      	moveq	r0, #0
 8014f34:	4770      	bx	lr
	...

08014f38 <rcu_osci_stab_wait>:
 8014f38:	281a      	cmp	r0, #26
 8014f3a:	b508      	push	{r3, lr}
 8014f3c:	d051      	beq.n	8014fe2 <rcu_osci_stab_wait+0xaa>
 8014f3e:	d806      	bhi.n	8014f4e <rcu_osci_stab_wait+0x16>
 8014f40:	2810      	cmp	r0, #16
 8014f42:	d015      	beq.n	8014f70 <rcu_osci_stab_wait+0x38>
 8014f44:	2818      	cmp	r0, #24
 8014f46:	d043      	beq.n	8014fd0 <rcu_osci_stab_wait+0x98>
 8014f48:	b368      	cbz	r0, 8014fa6 <rcu_osci_stab_wait+0x6e>
 8014f4a:	2000      	movs	r0, #0
 8014f4c:	bd08      	pop	{r3, pc}
 8014f4e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8014f52:	d01c      	beq.n	8014f8e <rcu_osci_stab_wait+0x56>
 8014f54:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
 8014f58:	d02f      	beq.n	8014fba <rcu_osci_stab_wait+0x82>
 8014f5a:	281c      	cmp	r0, #28
 8014f5c:	d1f5      	bne.n	8014f4a <rcu_osci_stab_wait+0x12>
 8014f5e:	4925      	ldr	r1, [pc, #148]	; (8014ff4 <rcu_osci_stab_wait+0xbc>)
 8014f60:	201d      	movs	r0, #29
 8014f62:	f7ff ffd9 	bl	8014f18 <rcu_flag_get>
 8014f66:	b908      	cbnz	r0, 8014f6c <rcu_osci_stab_wait+0x34>
 8014f68:	3901      	subs	r1, #1
 8014f6a:	d1f9      	bne.n	8014f60 <rcu_osci_stab_wait+0x28>
 8014f6c:	201d      	movs	r0, #29
 8014f6e:	e008      	b.n	8014f82 <rcu_osci_stab_wait+0x4a>
 8014f70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014f74:	2011      	movs	r0, #17
 8014f76:	f7ff ffcf 	bl	8014f18 <rcu_flag_get>
 8014f7a:	b908      	cbnz	r0, 8014f80 <rcu_osci_stab_wait+0x48>
 8014f7c:	3901      	subs	r1, #1
 8014f7e:	d1f9      	bne.n	8014f74 <rcu_osci_stab_wait+0x3c>
 8014f80:	2011      	movs	r0, #17
 8014f82:	f7ff ffc9 	bl	8014f18 <rcu_flag_get>
 8014f86:	3800      	subs	r0, #0
 8014f88:	bf18      	it	ne
 8014f8a:	2001      	movne	r0, #1
 8014f8c:	e7de      	b.n	8014f4c <rcu_osci_stab_wait+0x14>
 8014f8e:	f06f 417c 	mvn.w	r1, #4227858432	; 0xfc000000
 8014f92:	f640 0001 	movw	r0, #2049	; 0x801
 8014f96:	f7ff ffbf 	bl	8014f18 <rcu_flag_get>
 8014f9a:	b908      	cbnz	r0, 8014fa0 <rcu_osci_stab_wait+0x68>
 8014f9c:	3901      	subs	r1, #1
 8014f9e:	d1f8      	bne.n	8014f92 <rcu_osci_stab_wait+0x5a>
 8014fa0:	f640 0001 	movw	r0, #2049	; 0x801
 8014fa4:	e7ed      	b.n	8014f82 <rcu_osci_stab_wait+0x4a>
 8014fa6:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8014faa:	2001      	movs	r0, #1
 8014fac:	f7ff ffb4 	bl	8014f18 <rcu_flag_get>
 8014fb0:	b908      	cbnz	r0, 8014fb6 <rcu_osci_stab_wait+0x7e>
 8014fb2:	3901      	subs	r1, #1
 8014fb4:	d1f9      	bne.n	8014faa <rcu_osci_stab_wait+0x72>
 8014fb6:	2001      	movs	r0, #1
 8014fb8:	e7e3      	b.n	8014f82 <rcu_osci_stab_wait+0x4a>
 8014fba:	490e      	ldr	r1, [pc, #56]	; (8014ff4 <rcu_osci_stab_wait+0xbc>)
 8014fbc:	f640 1001 	movw	r0, #2305	; 0x901
 8014fc0:	f7ff ffaa 	bl	8014f18 <rcu_flag_get>
 8014fc4:	b908      	cbnz	r0, 8014fca <rcu_osci_stab_wait+0x92>
 8014fc6:	3901      	subs	r1, #1
 8014fc8:	d1f8      	bne.n	8014fbc <rcu_osci_stab_wait+0x84>
 8014fca:	f640 1001 	movw	r0, #2305	; 0x901
 8014fce:	e7d8      	b.n	8014f82 <rcu_osci_stab_wait+0x4a>
 8014fd0:	4908      	ldr	r1, [pc, #32]	; (8014ff4 <rcu_osci_stab_wait+0xbc>)
 8014fd2:	2019      	movs	r0, #25
 8014fd4:	f7ff ffa0 	bl	8014f18 <rcu_flag_get>
 8014fd8:	b908      	cbnz	r0, 8014fde <rcu_osci_stab_wait+0xa6>
 8014fda:	3901      	subs	r1, #1
 8014fdc:	d1f9      	bne.n	8014fd2 <rcu_osci_stab_wait+0x9a>
 8014fde:	2019      	movs	r0, #25
 8014fe0:	e7cf      	b.n	8014f82 <rcu_osci_stab_wait+0x4a>
 8014fe2:	4904      	ldr	r1, [pc, #16]	; (8014ff4 <rcu_osci_stab_wait+0xbc>)
 8014fe4:	201b      	movs	r0, #27
 8014fe6:	f7ff ff97 	bl	8014f18 <rcu_flag_get>
 8014fea:	b908      	cbnz	r0, 8014ff0 <rcu_osci_stab_wait+0xb8>
 8014fec:	3901      	subs	r1, #1
 8014fee:	d1f9      	bne.n	8014fe4 <rcu_osci_stab_wait+0xac>
 8014ff0:	201b      	movs	r0, #27
 8014ff2:	e7c6      	b.n	8014f82 <rcu_osci_stab_wait+0x4a>
 8014ff4:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08014ff8 <rcu_osci_on>:
 8014ff8:	f7ff bf30 	b.w	8014e5c <rcu_periph_clock_enable>

08014ffc <rcu_clock_freq_get>:
 8014ffc:	4b3e      	ldr	r3, [pc, #248]	; (80150f8 <rcu_clock_freq_get+0xfc>)
 8014ffe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015000:	4604      	mov	r4, r0
 8015002:	461f      	mov	r7, r3
 8015004:	b089      	sub	sp, #36	; 0x24
 8015006:	ad04      	add	r5, sp, #16
 8015008:	f103 0610 	add.w	r6, r3, #16
 801500c:	462a      	mov	r2, r5
 801500e:	6818      	ldr	r0, [r3, #0]
 8015010:	6859      	ldr	r1, [r3, #4]
 8015012:	3308      	adds	r3, #8
 8015014:	c203      	stmia	r2!, {r0, r1}
 8015016:	42b3      	cmp	r3, r6
 8015018:	4615      	mov	r5, r2
 801501a:	d1f7      	bne.n	801500c <rcu_clock_freq_get+0x10>
 801501c:	466b      	mov	r3, sp
 801501e:	6938      	ldr	r0, [r7, #16]
 8015020:	6871      	ldr	r1, [r6, #4]
 8015022:	4a36      	ldr	r2, [pc, #216]	; (80150fc <rcu_clock_freq_get+0x100>)
 8015024:	c303      	stmia	r3!, {r0, r1}
 8015026:	c303      	stmia	r3!, {r0, r1}
 8015028:	6853      	ldr	r3, [r2, #4]
 801502a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801502e:	2b01      	cmp	r3, #1
 8015030:	d053      	beq.n	80150da <rcu_clock_freq_get+0xde>
 8015032:	2b02      	cmp	r3, #2
 8015034:	d153      	bne.n	80150de <rcu_clock_freq_get+0xe2>
 8015036:	6853      	ldr	r3, [r2, #4]
 8015038:	03dd      	lsls	r5, r3, #15
 801503a:	d523      	bpl.n	8015084 <rcu_clock_freq_get+0x88>
 801503c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 801503e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8015042:	4b2f      	ldr	r3, [pc, #188]	; (8015100 <rcu_clock_freq_get+0x104>)
 8015044:	d00e      	beq.n	8015064 <rcu_clock_freq_get+0x68>
 8015046:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8015048:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 801504a:	f3c1 1103 	ubfx	r1, r1, #4, #4
 801504e:	f3c0 2003 	ubfx	r0, r0, #8, #4
 8015052:	3101      	adds	r1, #1
 8015054:	280f      	cmp	r0, #15
 8015056:	f100 0502 	add.w	r5, r0, #2
 801505a:	fbb3 f3f1 	udiv	r3, r3, r1
 801505e:	bf08      	it	eq
 8015060:	2514      	moveq	r5, #20
 8015062:	436b      	muls	r3, r5
 8015064:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8015066:	f001 010f 	and.w	r1, r1, #15
 801506a:	3101      	adds	r1, #1
 801506c:	fbb3 f3f1 	udiv	r3, r3, r1
 8015070:	6851      	ldr	r1, [r2, #4]
 8015072:	6850      	ldr	r0, [r2, #4]
 8015074:	f3c1 4183 	ubfx	r1, r1, #18, #4
 8015078:	0080      	lsls	r0, r0, #2
 801507a:	d505      	bpl.n	8015088 <rcu_clock_freq_get+0x8c>
 801507c:	f041 0110 	orr.w	r1, r1, #16
 8015080:	1c48      	adds	r0, r1, #1
 8015082:	e007      	b.n	8015094 <rcu_clock_freq_get+0x98>
 8015084:	4b1f      	ldr	r3, [pc, #124]	; (8015104 <rcu_clock_freq_get+0x108>)
 8015086:	e7f3      	b.n	8015070 <rcu_clock_freq_get+0x74>
 8015088:	290f      	cmp	r1, #15
 801508a:	d0f9      	beq.n	8015080 <rcu_clock_freq_get+0x84>
 801508c:	290d      	cmp	r1, #13
 801508e:	f101 0002 	add.w	r0, r1, #2
 8015092:	d01d      	beq.n	80150d0 <rcu_clock_freq_get+0xd4>
 8015094:	4358      	muls	r0, r3
 8015096:	6853      	ldr	r3, [r2, #4]
 8015098:	6851      	ldr	r1, [r2, #4]
 801509a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801509e:	6852      	ldr	r2, [r2, #4]
 80150a0:	3320      	adds	r3, #32
 80150a2:	446b      	add	r3, sp
 80150a4:	f3c1 2102 	ubfx	r1, r1, #8, #3
 80150a8:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 80150ac:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80150b0:	3120      	adds	r1, #32
 80150b2:	3220      	adds	r2, #32
 80150b4:	4469      	add	r1, sp
 80150b6:	446a      	add	r2, sp
 80150b8:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 80150bc:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80150c0:	fa20 f303 	lsr.w	r3, r0, r3
 80150c4:	2c03      	cmp	r4, #3
 80150c6:	d815      	bhi.n	80150f4 <rcu_clock_freq_get+0xf8>
 80150c8:	e8df f004 	tbb	[pc, r4]
 80150cc:	110e0b0c 	tstne	lr, ip, lsl #22
 80150d0:	2006      	movs	r0, #6
 80150d2:	0859      	lsrs	r1, r3, #1
 80150d4:	fb00 1003 	mla	r0, r0, r3, r1
 80150d8:	e7dd      	b.n	8015096 <rcu_clock_freq_get+0x9a>
 80150da:	4809      	ldr	r0, [pc, #36]	; (8015100 <rcu_clock_freq_get+0x104>)
 80150dc:	e7db      	b.n	8015096 <rcu_clock_freq_get+0x9a>
 80150de:	480a      	ldr	r0, [pc, #40]	; (8015108 <rcu_clock_freq_get+0x10c>)
 80150e0:	e7d9      	b.n	8015096 <rcu_clock_freq_get+0x9a>
 80150e2:	4618      	mov	r0, r3
 80150e4:	b009      	add	sp, #36	; 0x24
 80150e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150e8:	fa23 f001 	lsr.w	r0, r3, r1
 80150ec:	e7fa      	b.n	80150e4 <rcu_clock_freq_get+0xe8>
 80150ee:	fa23 f002 	lsr.w	r0, r3, r2
 80150f2:	e7f7      	b.n	80150e4 <rcu_clock_freq_get+0xe8>
 80150f4:	2000      	movs	r0, #0
 80150f6:	e7f5      	b.n	80150e4 <rcu_clock_freq_get+0xe8>
 80150f8:	080161b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r8, sp, lr}
 80150fc:	40021000 	andmi	r1, r2, r0
 8015100:	017d7840 	cmneq	sp, r0, asr #16
 8015104:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8015108:	007a1200 	rsbseq	r1, sl, r0, lsl #4

0801510c <timer_deinit>:
 801510c:	b508      	push	{r3, lr}
 801510e:	4b2d      	ldr	r3, [pc, #180]	; (80151c4 <timer_deinit+0xb8>)
 8015110:	4298      	cmp	r0, r3
 8015112:	d048      	beq.n	80151a6 <timer_deinit+0x9a>
 8015114:	d816      	bhi.n	8015144 <timer_deinit+0x38>
 8015116:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801511a:	4298      	cmp	r0, r3
 801511c:	d03c      	beq.n	8015198 <timer_deinit+0x8c>
 801511e:	d807      	bhi.n	8015130 <timer_deinit+0x24>
 8015120:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8015124:	d02a      	beq.n	801517c <timer_deinit+0x70>
 8015126:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801512a:	4298      	cmp	r0, r3
 801512c:	d02d      	beq.n	801518a <timer_deinit+0x7e>
 801512e:	bd08      	pop	{r3, pc}
 8015130:	4b25      	ldr	r3, [pc, #148]	; (80151c8 <timer_deinit+0xbc>)
 8015132:	4298      	cmp	r0, r3
 8015134:	d1fb      	bne.n	801512e <timer_deinit+0x22>
 8015136:	f240 4003 	movw	r0, #1027	; 0x403
 801513a:	f7ff feaa 	bl	8014e92 <rcu_periph_reset_enable>
 801513e:	f240 4003 	movw	r0, #1027	; 0x403
 8015142:	e017      	b.n	8015174 <timer_deinit+0x68>
 8015144:	4b21      	ldr	r3, [pc, #132]	; (80151cc <timer_deinit+0xc0>)
 8015146:	4298      	cmp	r0, r3
 8015148:	d00e      	beq.n	8015168 <timer_deinit+0x5c>
 801514a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801514e:	4298      	cmp	r0, r3
 8015150:	d030      	beq.n	80151b4 <timer_deinit+0xa8>
 8015152:	f5a3 3390 	sub.w	r3, r3, #73728	; 0x12000
 8015156:	4298      	cmp	r0, r3
 8015158:	d1e9      	bne.n	801512e <timer_deinit+0x22>
 801515a:	f240 4005 	movw	r0, #1029	; 0x405
 801515e:	f7ff fe98 	bl	8014e92 <rcu_periph_reset_enable>
 8015162:	f240 4005 	movw	r0, #1029	; 0x405
 8015166:	e005      	b.n	8015174 <timer_deinit+0x68>
 8015168:	f240 300b 	movw	r0, #779	; 0x30b
 801516c:	f7ff fe91 	bl	8014e92 <rcu_periph_reset_enable>
 8015170:	f240 300b 	movw	r0, #779	; 0x30b
 8015174:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015178:	f7ff be8d 	b.w	8014e96 <rcu_periph_reset_disable>
 801517c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8015180:	f7ff fe87 	bl	8014e92 <rcu_periph_reset_enable>
 8015184:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8015188:	e7f4      	b.n	8015174 <timer_deinit+0x68>
 801518a:	f240 4001 	movw	r0, #1025	; 0x401
 801518e:	f7ff fe80 	bl	8014e92 <rcu_periph_reset_enable>
 8015192:	f240 4001 	movw	r0, #1025	; 0x401
 8015196:	e7ed      	b.n	8015174 <timer_deinit+0x68>
 8015198:	f240 4002 	movw	r0, #1026	; 0x402
 801519c:	f7ff fe79 	bl	8014e92 <rcu_periph_reset_enable>
 80151a0:	f240 4002 	movw	r0, #1026	; 0x402
 80151a4:	e7e6      	b.n	8015174 <timer_deinit+0x68>
 80151a6:	f240 4004 	movw	r0, #1028	; 0x404
 80151aa:	f7ff fe72 	bl	8014e92 <rcu_periph_reset_enable>
 80151ae:	f240 4004 	movw	r0, #1028	; 0x404
 80151b2:	e7df      	b.n	8015174 <timer_deinit+0x68>
 80151b4:	f240 300d 	movw	r0, #781	; 0x30d
 80151b8:	f7ff fe6b 	bl	8014e92 <rcu_periph_reset_enable>
 80151bc:	f240 300d 	movw	r0, #781	; 0x30d
 80151c0:	e7d8      	b.n	8015174 <timer_deinit+0x68>
 80151c2:	bf00      	nop
 80151c4:	40001000 	andmi	r1, r0, r0
 80151c8:	40000c00 	andmi	r0, r0, r0, lsl #24
 80151cc:	40012c00 	andmi	r2, r1, r0, lsl #24

080151d0 <timer_init>:
 80151d0:	880b      	ldrh	r3, [r1, #0]
 80151d2:	6283      	str	r3, [r0, #40]	; 0x28
 80151d4:	4b26      	ldr	r3, [pc, #152]	; (8015270 <timer_init+0xa0>)
 80151d6:	4298      	cmp	r0, r3
 80151d8:	d018      	beq.n	801520c <timer_init+0x3c>
 80151da:	f420 6240 	bic.w	r2, r0, #3072	; 0xc00
 80151de:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80151e2:	f420 6380 	bic.w	r3, r0, #1024	; 0x400
 80151e6:	d011      	beq.n	801520c <timer_init+0x3c>
 80151e8:	4a22      	ldr	r2, [pc, #136]	; (8015274 <timer_init+0xa4>)
 80151ea:	4290      	cmp	r0, r2
 80151ec:	d00e      	beq.n	801520c <timer_init+0x3c>
 80151ee:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 80151f2:	4290      	cmp	r0, r2
 80151f4:	d00a      	beq.n	801520c <timer_init+0x3c>
 80151f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80151fa:	4293      	cmp	r3, r2
 80151fc:	d006      	beq.n	801520c <timer_init+0x3c>
 80151fe:	f5a2 329c 	sub.w	r2, r2, #79872	; 0x13800
 8015202:	4293      	cmp	r3, r2
 8015204:	d002      	beq.n	801520c <timer_init+0x3c>
 8015206:	4b1c      	ldr	r3, [pc, #112]	; (8015278 <timer_init+0xa8>)
 8015208:	4298      	cmp	r0, r3
 801520a:	d10f      	bne.n	801522c <timer_init+0x5c>
 801520c:	6803      	ldr	r3, [r0, #0]
 801520e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015212:	6003      	str	r3, [r0, #0]
 8015214:	884b      	ldrh	r3, [r1, #2]
 8015216:	6802      	ldr	r2, [r0, #0]
 8015218:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801521c:	4313      	orrs	r3, r2
 801521e:	6003      	str	r3, [r0, #0]
 8015220:	888b      	ldrh	r3, [r1, #4]
 8015222:	6802      	ldr	r2, [r0, #0]
 8015224:	f003 0310 	and.w	r3, r3, #16
 8015228:	4313      	orrs	r3, r2
 801522a:	6003      	str	r3, [r0, #0]
 801522c:	688b      	ldr	r3, [r1, #8]
 801522e:	62c3      	str	r3, [r0, #44]	; 0x2c
 8015230:	4b12      	ldr	r3, [pc, #72]	; (801527c <timer_init+0xac>)
 8015232:	4298      	cmp	r0, r3
 8015234:	d003      	beq.n	801523e <timer_init+0x6e>
 8015236:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801523a:	4298      	cmp	r0, r3
 801523c:	d104      	bne.n	8015248 <timer_init+0x78>
 801523e:	6943      	ldr	r3, [r0, #20]
 8015240:	f043 0301 	orr.w	r3, r3, #1
 8015244:	6143      	str	r3, [r0, #20]
 8015246:	4770      	bx	lr
 8015248:	6803      	ldr	r3, [r0, #0]
 801524a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801524e:	6003      	str	r3, [r0, #0]
 8015250:	898b      	ldrh	r3, [r1, #12]
 8015252:	6802      	ldr	r2, [r0, #0]
 8015254:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015258:	4313      	orrs	r3, r2
 801525a:	6003      	str	r3, [r0, #0]
 801525c:	4b04      	ldr	r3, [pc, #16]	; (8015270 <timer_init+0xa0>)
 801525e:	4298      	cmp	r0, r3
 8015260:	d002      	beq.n	8015268 <timer_init+0x98>
 8015262:	4b04      	ldr	r3, [pc, #16]	; (8015274 <timer_init+0xa4>)
 8015264:	4298      	cmp	r0, r3
 8015266:	d1ea      	bne.n	801523e <timer_init+0x6e>
 8015268:	7b8b      	ldrb	r3, [r1, #14]
 801526a:	6303      	str	r3, [r0, #48]	; 0x30
 801526c:	e7e7      	b.n	801523e <timer_init+0x6e>
 801526e:	bf00      	nop
 8015270:	40012c00 	andmi	r2, r1, r0, lsl #24
 8015274:	40013400 	andmi	r3, r1, r0, lsl #8
 8015278:	40002000 	andmi	r2, r0, r0
 801527c:	40001000 	andmi	r1, r0, r0

08015280 <timer_enable>:
 8015280:	6803      	ldr	r3, [r0, #0]
 8015282:	f043 0301 	orr.w	r3, r3, #1
 8015286:	6003      	str	r3, [r0, #0]
 8015288:	4770      	bx	lr
	...

0801528c <usart_deinit>:
 801528c:	b508      	push	{r3, lr}
 801528e:	4b1d      	ldr	r3, [pc, #116]	; (8015304 <usart_deinit+0x78>)
 8015290:	4298      	cmp	r0, r3
 8015292:	d028      	beq.n	80152e6 <usart_deinit+0x5a>
 8015294:	d808      	bhi.n	80152a8 <usart_deinit+0x1c>
 8015296:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801529a:	4298      	cmp	r0, r3
 801529c:	d015      	beq.n	80152ca <usart_deinit+0x3e>
 801529e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80152a2:	4298      	cmp	r0, r3
 80152a4:	d018      	beq.n	80152d8 <usart_deinit+0x4c>
 80152a6:	bd08      	pop	{r3, pc}
 80152a8:	4b17      	ldr	r3, [pc, #92]	; (8015308 <usart_deinit+0x7c>)
 80152aa:	4298      	cmp	r0, r3
 80152ac:	d022      	beq.n	80152f4 <usart_deinit+0x68>
 80152ae:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 80152b2:	4298      	cmp	r0, r3
 80152b4:	d1f7      	bne.n	80152a6 <usart_deinit+0x1a>
 80152b6:	f240 300e 	movw	r0, #782	; 0x30e
 80152ba:	f7ff fdea 	bl	8014e92 <rcu_periph_reset_enable>
 80152be:	f240 300e 	movw	r0, #782	; 0x30e
 80152c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80152c6:	f7ff bde6 	b.w	8014e96 <rcu_periph_reset_disable>
 80152ca:	f240 4011 	movw	r0, #1041	; 0x411
 80152ce:	f7ff fde0 	bl	8014e92 <rcu_periph_reset_enable>
 80152d2:	f240 4011 	movw	r0, #1041	; 0x411
 80152d6:	e7f4      	b.n	80152c2 <usart_deinit+0x36>
 80152d8:	f240 4012 	movw	r0, #1042	; 0x412
 80152dc:	f7ff fdd9 	bl	8014e92 <rcu_periph_reset_enable>
 80152e0:	f240 4012 	movw	r0, #1042	; 0x412
 80152e4:	e7ed      	b.n	80152c2 <usart_deinit+0x36>
 80152e6:	f240 4013 	movw	r0, #1043	; 0x413
 80152ea:	f7ff fdd2 	bl	8014e92 <rcu_periph_reset_enable>
 80152ee:	f240 4013 	movw	r0, #1043	; 0x413
 80152f2:	e7e6      	b.n	80152c2 <usart_deinit+0x36>
 80152f4:	f240 4014 	movw	r0, #1044	; 0x414
 80152f8:	f7ff fdcb 	bl	8014e92 <rcu_periph_reset_enable>
 80152fc:	f240 4014 	movw	r0, #1044	; 0x414
 8015300:	e7df      	b.n	80152c2 <usart_deinit+0x36>
 8015302:	bf00      	nop
 8015304:	40004c00 	andmi	r4, r0, r0, lsl #24
 8015308:	40005000 	andmi	r5, r0, r0

0801530c <usart_baudrate_set>:
 801530c:	b538      	push	{r3, r4, r5, lr}
 801530e:	4b11      	ldr	r3, [pc, #68]	; (8015354 <usart_baudrate_set+0x48>)
 8015310:	4604      	mov	r4, r0
 8015312:	4298      	cmp	r0, r3
 8015314:	460d      	mov	r5, r1
 8015316:	d01b      	beq.n	8015350 <usart_baudrate_set+0x44>
 8015318:	d809      	bhi.n	801532e <usart_baudrate_set+0x22>
 801531a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801531e:	4298      	cmp	r0, r3
 8015320:	d016      	beq.n	8015350 <usart_baudrate_set+0x44>
 8015322:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015326:	4298      	cmp	r0, r3
 8015328:	d012      	beq.n	8015350 <usart_baudrate_set+0x44>
 801532a:	2000      	movs	r0, #0
 801532c:	e009      	b.n	8015342 <usart_baudrate_set+0x36>
 801532e:	4b0a      	ldr	r3, [pc, #40]	; (8015358 <usart_baudrate_set+0x4c>)
 8015330:	4298      	cmp	r0, r3
 8015332:	d00d      	beq.n	8015350 <usart_baudrate_set+0x44>
 8015334:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8015338:	4298      	cmp	r0, r3
 801533a:	d1f6      	bne.n	801532a <usart_baudrate_set+0x1e>
 801533c:	2003      	movs	r0, #3
 801533e:	f7ff fe5d 	bl	8014ffc <rcu_clock_freq_get>
 8015342:	eb00 0155 	add.w	r1, r0, r5, lsr #1
 8015346:	fbb1 f1f5 	udiv	r1, r1, r5
 801534a:	b289      	uxth	r1, r1
 801534c:	60a1      	str	r1, [r4, #8]
 801534e:	bd38      	pop	{r3, r4, r5, pc}
 8015350:	2002      	movs	r0, #2
 8015352:	e7f4      	b.n	801533e <usart_baudrate_set+0x32>
 8015354:	40004c00 	andmi	r4, r0, r0, lsl #24
 8015358:	40005000 	andmi	r5, r0, r0

0801535c <usart_parity_config>:
 801535c:	68c3      	ldr	r3, [r0, #12]
 801535e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8015362:	60c3      	str	r3, [r0, #12]
 8015364:	68c3      	ldr	r3, [r0, #12]
 8015366:	430b      	orrs	r3, r1
 8015368:	60c3      	str	r3, [r0, #12]
 801536a:	4770      	bx	lr

0801536c <usart_word_length_set>:
 801536c:	68c3      	ldr	r3, [r0, #12]
 801536e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015372:	60c3      	str	r3, [r0, #12]
 8015374:	68c3      	ldr	r3, [r0, #12]
 8015376:	430b      	orrs	r3, r1
 8015378:	60c3      	str	r3, [r0, #12]
 801537a:	4770      	bx	lr

0801537c <usart_stop_bit_set>:
 801537c:	6903      	ldr	r3, [r0, #16]
 801537e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8015382:	6103      	str	r3, [r0, #16]
 8015384:	6903      	ldr	r3, [r0, #16]
 8015386:	430b      	orrs	r3, r1
 8015388:	6103      	str	r3, [r0, #16]
 801538a:	4770      	bx	lr

0801538c <usart_transmit_config>:
 801538c:	68c3      	ldr	r3, [r0, #12]
 801538e:	f023 0308 	bic.w	r3, r3, #8
 8015392:	430b      	orrs	r3, r1
 8015394:	60c3      	str	r3, [r0, #12]
 8015396:	4770      	bx	lr

08015398 <usart_receive_config>:
 8015398:	68c3      	ldr	r3, [r0, #12]
 801539a:	f023 0304 	bic.w	r3, r3, #4
 801539e:	430b      	orrs	r3, r1
 80153a0:	60c3      	str	r3, [r0, #12]
 80153a2:	4770      	bx	lr

080153a4 <usart_hardware_flow_rts_config>:
 80153a4:	6943      	ldr	r3, [r0, #20]
 80153a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80153aa:	430b      	orrs	r3, r1
 80153ac:	6143      	str	r3, [r0, #20]
 80153ae:	4770      	bx	lr

080153b0 <usart_hardware_flow_cts_config>:
 80153b0:	6943      	ldr	r3, [r0, #20]
 80153b2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80153b6:	430b      	orrs	r3, r1
 80153b8:	6143      	str	r3, [r0, #20]
 80153ba:	4770      	bx	lr

080153bc <usart_flag_get>:
 80153bc:	098b      	lsrs	r3, r1, #6
 80153be:	581a      	ldr	r2, [r3, r0]
 80153c0:	2301      	movs	r3, #1
 80153c2:	f001 011f 	and.w	r1, r1, #31
 80153c6:	408b      	lsls	r3, r1
 80153c8:	4213      	tst	r3, r2
 80153ca:	bf14      	ite	ne
 80153cc:	2001      	movne	r0, #1
 80153ce:	2000      	moveq	r0, #0
 80153d0:	4770      	bx	lr
	...

080153d4 <emac_eth_recv>:
 80153d4:	b538      	push	{r3, r4, r5, lr}
 80153d6:	4605      	mov	r5, r0
 80153d8:	f7ff fbe0 	bl	8014b9c <enet_rxframe_size_get>
 80153dc:	4604      	mov	r4, r0
 80153de:	b138      	cbz	r0, 80153f0 <emac_eth_recv+0x1c>
 80153e0:	4b05      	ldr	r3, [pc, #20]	; (80153f8 <emac_eth_recv+0x24>)
 80153e2:	2105      	movs	r1, #5
 80153e4:	6818      	ldr	r0, [r3, #0]
 80153e6:	f7ff fb88 	bl	8014afa <enet_desc_information_get>
 80153ea:	6028      	str	r0, [r5, #0]
 80153ec:	4620      	mov	r0, r4
 80153ee:	bd38      	pop	{r3, r4, r5, pc}
 80153f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80153f4:	e7fb      	b.n	80153ee <emac_eth_recv+0x1a>
 80153f6:	bf00      	nop
 80153f8:	20009d78 	andcs	r9, r0, r8, ror sp

080153fc <emac_free_pkt>:
 80153fc:	2100      	movs	r1, #0
 80153fe:	4608      	mov	r0, r1
 8015400:	f7ff b8b8 	b.w	8014574 <enet_frame_receive>

08015404 <emac_eth_send>:
 8015404:	f7ff b8f6 	b.w	80145f4 <enet_frame_transmit>

08015408 <gd32_adc_init()>:
 8015408:	b510      	push	{r4, lr}
 801540a:	f240 6009 	movw	r0, #1545	; 0x609
 801540e:	4c21      	ldr	r4, [pc, #132]	; (8015494 <gd32_adc_init()+0x8c>)
 8015410:	f7ff fd24 	bl	8014e5c <rcu_periph_clock_enable>
 8015414:	2005      	movs	r0, #5
 8015416:	f7ff fd57 	bl	8014ec8 <rcu_adc_clock_config>
 801541a:	4620      	mov	r0, r4
 801541c:	2201      	movs	r2, #1
 801541e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8015422:	f000 fc1f 	bl	8015c64 <adc_special_function_config>
 8015426:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 801542a:	4620      	mov	r0, r4
 801542c:	2102      	movs	r1, #2
 801542e:	f000 fcb8 	bl	8015da2 <adc_external_trigger_source_config>
 8015432:	2100      	movs	r1, #0
 8015434:	4620      	mov	r0, r4
 8015436:	f000 fc3d 	bl	8015cb4 <adc_data_alignment_config>
 801543a:	2000      	movs	r0, #0
 801543c:	f000 fc02 	bl	8015c44 <adc_mode_config>
 8015440:	2202      	movs	r2, #2
 8015442:	4620      	mov	r0, r4
 8015444:	4611      	mov	r1, r2
 8015446:	f000 fc61 	bl	8015d0c <adc_channel_length_config>
 801544a:	4620      	mov	r0, r4
 801544c:	2307      	movs	r3, #7
 801544e:	2210      	movs	r2, #16
 8015450:	2100      	movs	r1, #0
 8015452:	f000 fc78 	bl	8015d46 <adc_inserted_channel_config>
 8015456:	2307      	movs	r3, #7
 8015458:	4620      	mov	r0, r4
 801545a:	2211      	movs	r2, #17
 801545c:	2101      	movs	r1, #1
 801545e:	f000 fc72 	bl	8015d46 <adc_inserted_channel_config>
 8015462:	2201      	movs	r2, #1
 8015464:	2102      	movs	r1, #2
 8015466:	4620      	mov	r0, r4
 8015468:	f000 fcac 	bl	8015dc4 <adc_external_trigger_config>
 801546c:	f000 fc44 	bl	8015cf8 <adc_tempsensor_vrefint_enable>
 8015470:	4620      	mov	r0, r4
 8015472:	f000 fc28 	bl	8015cc6 <adc_enable>
 8015476:	2100      	movs	r1, #0
 8015478:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801547c:	f000 fb22 	bl	8015ac4 <udelay(unsigned int, unsigned int)>
 8015480:	4620      	mov	r0, r4
 8015482:	f000 fc28 	bl	8015cd6 <adc_calibration_enable>
 8015486:	4620      	mov	r0, r4
 8015488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801548c:	2102      	movs	r1, #2
 801548e:	f000 bcb4 	b.w	8015dfa <adc_software_trigger_enable>
 8015492:	bf00      	nop
 8015494:	40012400 	andmi	r2, r1, r0, lsl #8

08015498 <_stop() [clone .isra.0]>:
 8015498:	b508      	push	{r3, lr}
 801549a:	4806      	ldr	r0, [pc, #24]	; (80154b4 <_stop() [clone .isra.0]+0x1c>)
 801549c:	f000 fdc0 	bl	8016020 <i2c_stop_on_bus>
 80154a0:	f640 73ff 	movw	r3, #4095	; 0xfff
 80154a4:	4904      	ldr	r1, [pc, #16]	; (80154b8 <_stop() [clone .isra.0]+0x20>)
 80154a6:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 80154aa:	0592      	lsls	r2, r2, #22
 80154ac:	d501      	bpl.n	80154b2 <_stop() [clone .isra.0]+0x1a>
 80154ae:	3b01      	subs	r3, #1
 80154b0:	d1f9      	bne.n	80154a6 <_stop() [clone .isra.0]+0xe>
 80154b2:	bd08      	pop	{r3, pc}
 80154b4:	40005400 	andmi	r5, r0, r0, lsl #8
 80154b8:	40005000 	andmi	r5, r0, r0

080154bc <gd32_i2c_begin>:
 80154bc:	b510      	push	{r4, lr}
 80154be:	f240 7015 	movw	r0, #1813	; 0x715
 80154c2:	f7ff fccb 	bl	8014e5c <rcu_periph_clock_enable>
 80154c6:	4c15      	ldr	r4, [pc, #84]	; (801551c <gd32_i2c_begin+0x60>)
 80154c8:	f240 6003 	movw	r0, #1539	; 0x603
 80154cc:	f7ff fcc6 	bl	8014e5c <rcu_periph_clock_enable>
 80154d0:	f240 6003 	movw	r0, #1539	; 0x603
 80154d4:	f7ff fcc2 	bl	8014e5c <rcu_periph_clock_enable>
 80154d8:	4620      	mov	r0, r4
 80154da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80154de:	2203      	movs	r2, #3
 80154e0:	211c      	movs	r1, #28
 80154e2:	f7ff fc23 	bl	8014d2c <gpio_init>
 80154e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80154ea:	2203      	movs	r2, #3
 80154ec:	4620      	mov	r0, r4
 80154ee:	211c      	movs	r1, #28
 80154f0:	f7ff fc1c 	bl	8014d2c <gpio_init>
 80154f4:	f5a4 4438 	sub.w	r4, r4, #47104	; 0xb800
 80154f8:	2101      	movs	r1, #1
 80154fa:	2002      	movs	r0, #2
 80154fc:	f7ff fc6a 	bl	8014dd4 <gpio_pin_remap_config>
 8015500:	4620      	mov	r0, r4
 8015502:	4907      	ldr	r1, [pc, #28]	; (8015520 <gd32_i2c_begin+0x64>)
 8015504:	2200      	movs	r2, #0
 8015506:	f000 fd05 	bl	8015f14 <i2c_clock_config>
 801550a:	4620      	mov	r0, r4
 801550c:	f000 fd7e 	bl	801600c <i2c_enable>
 8015510:	4620      	mov	r0, r4
 8015512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015516:	2101      	movs	r1, #1
 8015518:	f000 bd5e 	b.w	8015fd8 <i2c_ack_config>
 801551c:	40010c00 	andmi	r0, r1, r0, lsl #24
 8015520:	00061a80 	andeq	r1, r6, r0, lsl #21

08015524 <gd32_i2c_set_baudrate>:
 8015524:	4601      	mov	r1, r0
 8015526:	2200      	movs	r2, #0
 8015528:	4801      	ldr	r0, [pc, #4]	; (8015530 <gd32_i2c_set_baudrate+0xc>)
 801552a:	f000 bcf3 	b.w	8015f14 <i2c_clock_config>
 801552e:	bf00      	nop
 8015530:	40005400 	andmi	r5, r0, r0, lsl #8

08015534 <gd32_i2c_set_address>:
 8015534:	4b01      	ldr	r3, [pc, #4]	; (801553c <gd32_i2c_set_address+0x8>)
 8015536:	0040      	lsls	r0, r0, #1
 8015538:	7018      	strb	r0, [r3, #0]
 801553a:	4770      	bx	lr
 801553c:	2000d9e4 	andcs	sp, r0, r4, ror #19

08015540 <gd32_i2c_write>:
 8015540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015542:	4604      	mov	r4, r0
 8015544:	460f      	mov	r7, r1
 8015546:	f640 75ff 	movw	r5, #4095	; 0xfff
 801554a:	4e2e      	ldr	r6, [pc, #184]	; (8015604 <gd32_i2c_write+0xc4>)
 801554c:	f240 6101 	movw	r1, #1537	; 0x601
 8015550:	4630      	mov	r0, r6
 8015552:	f000 fd6f 	bl	8016034 <i2c_flag_get>
 8015556:	b9b0      	cbnz	r0, 8015586 <gd32_i2c_write+0x46>
 8015558:	482a      	ldr	r0, [pc, #168]	; (8015604 <gd32_i2c_write+0xc4>)
 801555a:	f000 fd5c 	bl	8016016 <i2c_start_on_bus>
 801555e:	f640 75ff 	movw	r5, #4095	; 0xfff
 8015562:	4e28      	ldr	r6, [pc, #160]	; (8015604 <gd32_i2c_write+0xc4>)
 8015564:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8015568:	4630      	mov	r0, r6
 801556a:	f000 fd63 	bl	8016034 <i2c_flag_get>
 801556e:	b190      	cbz	r0, 8015596 <gd32_i2c_write+0x56>
 8015570:	4b25      	ldr	r3, [pc, #148]	; (8015608 <gd32_i2c_write+0xc8>)
 8015572:	f06f 0201 	mvn.w	r2, #1
 8015576:	7819      	ldrb	r1, [r3, #0]
 8015578:	4822      	ldr	r0, [pc, #136]	; (8015604 <gd32_i2c_write+0xc4>)
 801557a:	f000 fd3f 	bl	8015ffc <i2c_master_addressing>
 801557e:	f640 75ff 	movw	r5, #4095	; 0xfff
 8015582:	4e20      	ldr	r6, [pc, #128]	; (8015604 <gd32_i2c_write+0xc4>)
 8015584:	e00c      	b.n	80155a0 <gd32_i2c_write+0x60>
 8015586:	3d01      	subs	r5, #1
 8015588:	d1e0      	bne.n	801554c <gd32_i2c_write+0xc>
 801558a:	f7ff ff85 	bl	8015498 <_stop() [clone .isra.0]>
 801558e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015592:	4240      	negs	r0, r0
 8015594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015596:	3d01      	subs	r5, #1
 8015598:	d1e4      	bne.n	8015564 <gd32_i2c_write+0x24>
 801559a:	e7f6      	b.n	801558a <gd32_i2c_write+0x4a>
 801559c:	3d01      	subs	r5, #1
 801559e:	d0f4      	beq.n	801558a <gd32_i2c_write+0x4a>
 80155a0:	f240 5101 	movw	r1, #1281	; 0x501
 80155a4:	4630      	mov	r0, r6
 80155a6:	f000 fd45 	bl	8016034 <i2c_flag_get>
 80155aa:	2800      	cmp	r0, #0
 80155ac:	d0f6      	beq.n	801559c <gd32_i2c_write+0x5c>
 80155ae:	f240 5101 	movw	r1, #1281	; 0x501
 80155b2:	4814      	ldr	r0, [pc, #80]	; (8015604 <gd32_i2c_write+0xc4>)
 80155b4:	f000 fd49 	bl	801604a <i2c_flag_clear>
 80155b8:	f640 75ff 	movw	r5, #4095	; 0xfff
 80155bc:	4e11      	ldr	r6, [pc, #68]	; (8015604 <gd32_i2c_write+0xc4>)
 80155be:	f240 5107 	movw	r1, #1287	; 0x507
 80155c2:	4630      	mov	r0, r6
 80155c4:	f000 fd36 	bl	8016034 <i2c_flag_get>
 80155c8:	2801      	cmp	r0, #1
 80155ca:	d107      	bne.n	80155dc <gd32_i2c_write+0x9c>
 80155cc:	4e0d      	ldr	r6, [pc, #52]	; (8015604 <gd32_i2c_write+0xc4>)
 80155ce:	4427      	add	r7, r4
 80155d0:	42a7      	cmp	r7, r4
 80155d2:	d106      	bne.n	80155e2 <gd32_i2c_write+0xa2>
 80155d4:	f7ff ff60 	bl	8015498 <_stop() [clone .isra.0]>
 80155d8:	2000      	movs	r0, #0
 80155da:	e7da      	b.n	8015592 <gd32_i2c_write+0x52>
 80155dc:	3d01      	subs	r5, #1
 80155de:	d1ee      	bne.n	80155be <gd32_i2c_write+0x7e>
 80155e0:	e7d3      	b.n	801558a <gd32_i2c_write+0x4a>
 80155e2:	4630      	mov	r0, r6
 80155e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80155e8:	f000 fd1f 	bl	801602a <i2c_data_transmit>
 80155ec:	f640 75ff 	movw	r5, #4095	; 0xfff
 80155f0:	f240 5102 	movw	r1, #1282	; 0x502
 80155f4:	4630      	mov	r0, r6
 80155f6:	f000 fd1d 	bl	8016034 <i2c_flag_get>
 80155fa:	2800      	cmp	r0, #0
 80155fc:	d1e8      	bne.n	80155d0 <gd32_i2c_write+0x90>
 80155fe:	3d01      	subs	r5, #1
 8015600:	d1f6      	bne.n	80155f0 <gd32_i2c_write+0xb0>
 8015602:	e7c2      	b.n	801558a <gd32_i2c_write+0x4a>
 8015604:	40005400 	andmi	r5, r0, r0, lsl #8
 8015608:	2000d9e4 	andcs	sp, r0, r4, ror #19

0801560c <gd32_i2c_read>:
 801560c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015610:	4680      	mov	r8, r0
 8015612:	460c      	mov	r4, r1
 8015614:	f640 76ff 	movw	r6, #4095	; 0xfff
 8015618:	4f4b      	ldr	r7, [pc, #300]	; (8015748 <gd32_i2c_read+0x13c>)
 801561a:	f240 6101 	movw	r1, #1537	; 0x601
 801561e:	4638      	mov	r0, r7
 8015620:	f000 fd08 	bl	8016034 <i2c_flag_get>
 8015624:	4605      	mov	r5, r0
 8015626:	bb08      	cbnz	r0, 801566c <gd32_i2c_read+0x60>
 8015628:	2c02      	cmp	r4, #2
 801562a:	d103      	bne.n	8015634 <gd32_i2c_read+0x28>
 801562c:	4601      	mov	r1, r0
 801562e:	4846      	ldr	r0, [pc, #280]	; (8015748 <gd32_i2c_read+0x13c>)
 8015630:	f000 fcdb 	bl	8015fea <i2c_ackpos_config>
 8015634:	4844      	ldr	r0, [pc, #272]	; (8015748 <gd32_i2c_read+0x13c>)
 8015636:	f000 fcee 	bl	8016016 <i2c_start_on_bus>
 801563a:	f640 76ff 	movw	r6, #4095	; 0xfff
 801563e:	4f42      	ldr	r7, [pc, #264]	; (8015748 <gd32_i2c_read+0x13c>)
 8015640:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8015644:	4638      	mov	r0, r7
 8015646:	f000 fcf5 	bl	8016034 <i2c_flag_get>
 801564a:	b1a8      	cbz	r0, 8015678 <gd32_i2c_read+0x6c>
 801564c:	4b3f      	ldr	r3, [pc, #252]	; (801574c <gd32_i2c_read+0x140>)
 801564e:	2201      	movs	r2, #1
 8015650:	7819      	ldrb	r1, [r3, #0]
 8015652:	483d      	ldr	r0, [pc, #244]	; (8015748 <gd32_i2c_read+0x13c>)
 8015654:	f000 fcd2 	bl	8015ffc <i2c_master_addressing>
 8015658:	2c02      	cmp	r4, #2
 801565a:	d803      	bhi.n	8015664 <gd32_i2c_read+0x58>
 801565c:	2100      	movs	r1, #0
 801565e:	483a      	ldr	r0, [pc, #232]	; (8015748 <gd32_i2c_read+0x13c>)
 8015660:	f000 fcba 	bl	8015fd8 <i2c_ack_config>
 8015664:	f640 76ff 	movw	r6, #4095	; 0xfff
 8015668:	4f37      	ldr	r7, [pc, #220]	; (8015748 <gd32_i2c_read+0x13c>)
 801566a:	e00a      	b.n	8015682 <gd32_i2c_read+0x76>
 801566c:	3e01      	subs	r6, #1
 801566e:	d1d4      	bne.n	801561a <gd32_i2c_read+0xe>
 8015670:	f7ff ff12 	bl	8015498 <_stop() [clone .isra.0]>
 8015674:	2504      	movs	r5, #4
 8015676:	e04d      	b.n	8015714 <gd32_i2c_read+0x108>
 8015678:	3e01      	subs	r6, #1
 801567a:	d1e1      	bne.n	8015640 <gd32_i2c_read+0x34>
 801567c:	e7f8      	b.n	8015670 <gd32_i2c_read+0x64>
 801567e:	3e01      	subs	r6, #1
 8015680:	d0f6      	beq.n	8015670 <gd32_i2c_read+0x64>
 8015682:	f240 5101 	movw	r1, #1281	; 0x501
 8015686:	4638      	mov	r0, r7
 8015688:	f000 fcd4 	bl	8016034 <i2c_flag_get>
 801568c:	2800      	cmp	r0, #0
 801568e:	d0f6      	beq.n	801567e <gd32_i2c_read+0x72>
 8015690:	f240 5101 	movw	r1, #1281	; 0x501
 8015694:	482c      	ldr	r0, [pc, #176]	; (8015748 <gd32_i2c_read+0x13c>)
 8015696:	f000 fcd8 	bl	801604a <i2c_flag_clear>
 801569a:	2c01      	cmp	r4, #1
 801569c:	d102      	bne.n	80156a4 <gd32_i2c_read+0x98>
 801569e:	482a      	ldr	r0, [pc, #168]	; (8015748 <gd32_i2c_read+0x13c>)
 80156a0:	f000 fcbe 	bl	8016020 <i2c_stop_on_bus>
 80156a4:	f640 77ff 	movw	r7, #4095	; 0xfff
 80156a8:	4e27      	ldr	r6, [pc, #156]	; (8015748 <gd32_i2c_read+0x13c>)
 80156aa:	e022      	b.n	80156f2 <gd32_i2c_read+0xe6>
 80156ac:	2c03      	cmp	r4, #3
 80156ae:	d134      	bne.n	801571a <gd32_i2c_read+0x10e>
 80156b0:	f640 79ff 	movw	r9, #4095	; 0xfff
 80156b4:	e002      	b.n	80156bc <gd32_i2c_read+0xb0>
 80156b6:	f1b9 0901 	subs.w	r9, r9, #1
 80156ba:	d0d9      	beq.n	8015670 <gd32_i2c_read+0x64>
 80156bc:	f240 5102 	movw	r1, #1282	; 0x502
 80156c0:	4630      	mov	r0, r6
 80156c2:	f000 fcb7 	bl	8016034 <i2c_flag_get>
 80156c6:	2800      	cmp	r0, #0
 80156c8:	d0f5      	beq.n	80156b6 <gd32_i2c_read+0xaa>
 80156ca:	2100      	movs	r1, #0
 80156cc:	4630      	mov	r0, r6
 80156ce:	f000 fc83 	bl	8015fd8 <i2c_ack_config>
 80156d2:	f240 5106 	movw	r1, #1286	; 0x506
 80156d6:	4630      	mov	r0, r6
 80156d8:	f000 fcac 	bl	8016034 <i2c_flag_get>
 80156dc:	b138      	cbz	r0, 80156ee <gd32_i2c_read+0xe2>
 80156de:	4630      	mov	r0, r6
 80156e0:	f000 fca5 	bl	801602e <i2c_data_receive>
 80156e4:	f640 77ff 	movw	r7, #4095	; 0xfff
 80156e8:	f808 0b01 	strb.w	r0, [r8], #1
 80156ec:	3c01      	subs	r4, #1
 80156ee:	3f01      	subs	r7, #1
 80156f0:	d0be      	beq.n	8015670 <gd32_i2c_read+0x64>
 80156f2:	2c00      	cmp	r4, #0
 80156f4:	d1da      	bne.n	80156ac <gd32_i2c_read+0xa0>
 80156f6:	f640 73ff 	movw	r3, #4095	; 0xfff
 80156fa:	4915      	ldr	r1, [pc, #84]	; (8015750 <gd32_i2c_read+0x144>)
 80156fc:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 8015700:	0592      	lsls	r2, r2, #22
 8015702:	d41d      	bmi.n	8015740 <gd32_i2c_read+0x134>
 8015704:	2101      	movs	r1, #1
 8015706:	4810      	ldr	r0, [pc, #64]	; (8015748 <gd32_i2c_read+0x13c>)
 8015708:	f000 fc66 	bl	8015fd8 <i2c_ack_config>
 801570c:	2101      	movs	r1, #1
 801570e:	480e      	ldr	r0, [pc, #56]	; (8015748 <gd32_i2c_read+0x13c>)
 8015710:	f000 fc6b 	bl	8015fea <i2c_ackpos_config>
 8015714:	4628      	mov	r0, r5
 8015716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801571a:	2c02      	cmp	r4, #2
 801571c:	d1d9      	bne.n	80156d2 <gd32_i2c_read+0xc6>
 801571e:	f640 79ff 	movw	r9, #4095	; 0xfff
 8015722:	e002      	b.n	801572a <gd32_i2c_read+0x11e>
 8015724:	f1b9 0901 	subs.w	r9, r9, #1
 8015728:	d0a2      	beq.n	8015670 <gd32_i2c_read+0x64>
 801572a:	f240 5102 	movw	r1, #1282	; 0x502
 801572e:	4630      	mov	r0, r6
 8015730:	f000 fc80 	bl	8016034 <i2c_flag_get>
 8015734:	2800      	cmp	r0, #0
 8015736:	d0f5      	beq.n	8015724 <gd32_i2c_read+0x118>
 8015738:	4630      	mov	r0, r6
 801573a:	f000 fc71 	bl	8016020 <i2c_stop_on_bus>
 801573e:	e7c8      	b.n	80156d2 <gd32_i2c_read+0xc6>
 8015740:	3b01      	subs	r3, #1
 8015742:	d1db      	bne.n	80156fc <gd32_i2c_read+0xf0>
 8015744:	e796      	b.n	8015674 <gd32_i2c_read+0x68>
 8015746:	bf00      	nop
 8015748:	40005400 	andmi	r5, r0, r0, lsl #8
 801574c:	2000d9e4 	andcs	sp, r0, r4, ror #19
 8015750:	40005000 	andmi	r5, r0, r0

08015754 <gd32_spi_dma_begin()>:
 8015754:	b510      	push	{r4, lr}
 8015756:	f240 6002 	movw	r0, #1538	; 0x602
 801575a:	b088      	sub	sp, #32
 801575c:	f7ff fb7e 	bl	8014e5c <rcu_periph_clock_enable>
 8015760:	f240 6003 	movw	r0, #1539	; 0x603
 8015764:	f7ff fb7a 	bl	8014e5c <rcu_periph_clock_enable>
 8015768:	f240 700f 	movw	r0, #1807	; 0x70f
 801576c:	f7ff fb76 	bl	8014e5c <rcu_periph_clock_enable>
 8015770:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8015774:	f7ff fb72 	bl	8014e5c <rcu_periph_clock_enable>
 8015778:	2338      	movs	r3, #56	; 0x38
 801577a:	2203      	movs	r2, #3
 801577c:	2118      	movs	r1, #24
 801577e:	4831      	ldr	r0, [pc, #196]	; (8015844 <gd32_spi_dma_begin()+0xf0>)
 8015780:	f7ff fad4 	bl	8014d2c <gpio_init>
 8015784:	4c30      	ldr	r4, [pc, #192]	; (8015848 <gd32_spi_dma_begin()+0xf4>)
 8015786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801578a:	2203      	movs	r2, #3
 801578c:	2118      	movs	r1, #24
 801578e:	482f      	ldr	r0, [pc, #188]	; (801584c <gd32_spi_dma_begin()+0xf8>)
 8015790:	f7ff facc 	bl	8014d2c <gpio_init>
 8015794:	2101      	movs	r1, #1
 8015796:	482e      	ldr	r0, [pc, #184]	; (8015850 <gd32_spi_dma_begin()+0xfc>)
 8015798:	f7ff fb1c 	bl	8014dd4 <gpio_pin_remap_config>
 801579c:	6823      	ldr	r3, [r4, #0]
 801579e:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 80157a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80157a6:	6023      	str	r3, [r4, #0]
 80157a8:	f7ff fb82 	bl	8014eb0 <rcu_pll2_config>
 80157ac:	6823      	ldr	r3, [r4, #0]
 80157ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80157b2:	6023      	str	r3, [r4, #0]
 80157b4:	6823      	ldr	r3, [r4, #0]
 80157b6:	0098      	lsls	r0, r3, #2
 80157b8:	d5fc      	bpl.n	80157b4 <gd32_spi_dma_begin()+0x60>
 80157ba:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80157be:	f7ff fba1 	bl	8014f04 <rcu_i2s2_clock_config>
 80157c2:	4824      	ldr	r0, [pc, #144]	; (8015854 <gd32_spi_dma_begin()+0x100>)
 80157c4:	f000 fcbf 	bl	8016146 <i2s_disable>
 80157c8:	2300      	movs	r3, #0
 80157ca:	4923      	ldr	r1, [pc, #140]	; (8015858 <gd32_spi_dma_begin()+0x104>)
 80157cc:	461a      	mov	r2, r3
 80157ce:	4821      	ldr	r0, [pc, #132]	; (8015854 <gd32_spi_dma_begin()+0x100>)
 80157d0:	f000 fc5c 	bl	801608c <i2s_psc_config>
 80157d4:	2300      	movs	r3, #0
 80157d6:	2210      	movs	r2, #16
 80157d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80157dc:	481d      	ldr	r0, [pc, #116]	; (8015854 <gd32_spi_dma_begin()+0x100>)
 80157de:	f000 fc46 	bl	801606e <i2s_init>
 80157e2:	481c      	ldr	r0, [pc, #112]	; (8015854 <gd32_spi_dma_begin()+0x100>)
 80157e4:	f000 fcaa 	bl	801613c <i2s_enable>
 80157e8:	f240 5001 	movw	r0, #1281	; 0x501
 80157ec:	f7ff fb36 	bl	8014e5c <rcu_periph_clock_enable>
 80157f0:	2101      	movs	r1, #1
 80157f2:	481a      	ldr	r0, [pc, #104]	; (801585c <gd32_spi_dma_begin()+0x108>)
 80157f4:	f000 fb0e 	bl	8015e14 <dma_deinit>
 80157f8:	a801      	add	r0, sp, #4
 80157fa:	f000 fb27 	bl	8015e4c <dma_struct_para_init>
 80157fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015802:	2401      	movs	r4, #1
 8015804:	9304      	str	r3, [sp, #16]
 8015806:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801580a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801580e:	4914      	ldr	r1, [pc, #80]	; (8015860 <gd32_spi_dma_begin()+0x10c>)
 8015810:	9206      	str	r2, [sp, #24]
 8015812:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8015816:	aa01      	add	r2, sp, #4
 8015818:	4621      	mov	r1, r4
 801581a:	4810      	ldr	r0, [pc, #64]	; (801585c <gd32_spi_dma_begin()+0x108>)
 801581c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015820:	f88d 401e 	strb.w	r4, [sp, #30]
 8015824:	f000 fb1c 	bl	8015e60 <dma_init>
 8015828:	4621      	mov	r1, r4
 801582a:	480c      	ldr	r0, [pc, #48]	; (801585c <gd32_spi_dma_begin()+0x108>)
 801582c:	f000 fb52 	bl	8015ed4 <dma_circulation_disable>
 8015830:	4621      	mov	r1, r4
 8015832:	480a      	ldr	r0, [pc, #40]	; (801585c <gd32_spi_dma_begin()+0x108>)
 8015834:	f000 fb5e 	bl	8015ef4 <dma_memory_to_memory_disable>
 8015838:	2200      	movs	r2, #0
 801583a:	4b0a      	ldr	r3, [pc, #40]	; (8015864 <gd32_spi_dma_begin()+0x110>)
 801583c:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8015840:	b008      	add	sp, #32
 8015842:	bd10      	pop	{r4, pc}
 8015844:	40010c00 	andmi	r0, r1, r0, lsl #24
 8015848:	40021000 	andmi	r1, r2, r0
 801584c:	40010800 	andmi	r0, r1, r0, lsl #16
 8015850:	00300400 	eorseq	r0, r0, r0, lsl #8
 8015854:	40003c00 	andmi	r3, r0, r0, lsl #24
 8015858:	00030d40 	andeq	r0, r3, r0, asr #26
 801585c:	40020400 	andmi	r0, r2, r0, lsl #8
 8015860:	40003c0c 	andmi	r3, r0, ip, lsl #24
 8015864:	40020000 	andmi	r0, r2, r0

08015868 <gd32_spi_dma_set_speed_hz(unsigned int)>:
 8015868:	b538      	push	{r3, r4, r5, lr}
 801586a:	4c08      	ldr	r4, [pc, #32]	; (801588c <gd32_spi_dma_set_speed_hz(unsigned int)+0x24>)
 801586c:	4605      	mov	r5, r0
 801586e:	4620      	mov	r0, r4
 8015870:	f000 fc69 	bl	8016146 <i2s_disable>
 8015874:	2300      	movs	r3, #0
 8015876:	4620      	mov	r0, r4
 8015878:	461a      	mov	r2, r3
 801587a:	0969      	lsrs	r1, r5, #5
 801587c:	f000 fc06 	bl	801608c <i2s_psc_config>
 8015880:	4620      	mov	r0, r4
 8015882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015886:	f000 bc59 	b.w	801613c <i2s_enable>
 801588a:	bf00      	nop
 801588c:	40003c00 	andmi	r3, r0, r0, lsl #24

08015890 <gd32_spi_dma_tx_prepare(unsigned int*)>:
 8015890:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8015894:	6003      	str	r3, [r0, #0]
 8015896:	4801      	ldr	r0, [pc, #4]	; (801589c <gd32_spi_dma_tx_prepare(unsigned int*)+0xc>)
 8015898:	4770      	bx	lr
 801589a:	bf00      	nop
 801589c:	2000d9e8 	andcs	sp, r0, r8, ror #19

080158a0 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>:
 80158a0:	4a0a      	ldr	r2, [pc, #40]	; (80158cc <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x2c>)
 80158a2:	3101      	adds	r1, #1
 80158a4:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
 80158a8:	f3c1 014f 	ubfx	r1, r1, #1, #16
 80158ac:	f023 0301 	bic.w	r3, r3, #1
 80158b0:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 80158b4:	f043 0301 	orr.w	r3, r3, #1
 80158b8:	f8c2 0428 	str.w	r0, [r2, #1064]	; 0x428
 80158bc:	f8c2 1420 	str.w	r1, [r2, #1056]	; 0x420
 80158c0:	4803      	ldr	r0, [pc, #12]	; (80158d0 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x30>)
 80158c2:	2100      	movs	r1, #0
 80158c4:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 80158c8:	f000 bc42 	b.w	8016150 <spi_dma_enable>
 80158cc:	40020000 	andmi	r0, r2, r0
 80158d0:	40003c00 	andmi	r3, r0, r0, lsl #24

080158d4 <gd32_spi_dma_tx_is_active()>:
 80158d4:	4b03      	ldr	r3, [pc, #12]	; (80158e4 <gd32_spi_dma_tx_is_active()+0x10>)
 80158d6:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
 80158da:	3800      	subs	r0, #0
 80158dc:	bf18      	it	ne
 80158de:	2001      	movne	r0, #1
 80158e0:	4770      	bx	lr
 80158e2:	bf00      	nop
 80158e4:	40020000 	andmi	r0, r2, r0

080158e8 <gd32_uart_begin>:
 80158e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158ea:	461e      	mov	r6, r3
 80158ec:	4b63      	ldr	r3, [pc, #396]	; (8015a7c <gd32_uart_begin+0x194>)
 80158ee:	4604      	mov	r4, r0
 80158f0:	4298      	cmp	r0, r3
 80158f2:	460f      	mov	r7, r1
 80158f4:	4615      	mov	r5, r2
 80158f6:	d03b      	beq.n	8015970 <gd32_uart_begin+0x88>
 80158f8:	d80a      	bhi.n	8015910 <gd32_uart_begin+0x28>
 80158fa:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80158fe:	4298      	cmp	r0, r3
 8015900:	d02f      	beq.n	8015962 <gd32_uart_begin+0x7a>
 8015902:	f240 7012 	movw	r0, #1810	; 0x712
 8015906:	f7ff faa9 	bl	8014e5c <rcu_periph_clock_enable>
 801590a:	f240 6004 	movw	r0, #1540	; 0x604
 801590e:	e008      	b.n	8015922 <gd32_uart_begin+0x3a>
 8015910:	4b5b      	ldr	r3, [pc, #364]	; (8015a80 <gd32_uart_begin+0x198>)
 8015912:	4298      	cmp	r0, r3
 8015914:	d02f      	beq.n	8015976 <gd32_uart_begin+0x8e>
 8015916:	f240 600e 	movw	r0, #1550	; 0x60e
 801591a:	f7ff fa9f 	bl	8014e5c <rcu_periph_clock_enable>
 801591e:	f240 6003 	movw	r0, #1539	; 0x603
 8015922:	f7ff fa9b 	bl	8014e5c <rcu_periph_clock_enable>
 8015926:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 801592a:	f7ff fa97 	bl	8014e5c <rcu_periph_clock_enable>
 801592e:	4b53      	ldr	r3, [pc, #332]	; (8015a7c <gd32_uart_begin+0x194>)
 8015930:	429c      	cmp	r4, r3
 8015932:	f000 8084 	beq.w	8015a3e <gd32_uart_begin+0x156>
 8015936:	d829      	bhi.n	801598c <gd32_uart_begin+0xa4>
 8015938:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801593c:	429c      	cmp	r4, r3
 801593e:	d071      	beq.n	8015a24 <gd32_uart_begin+0x13c>
 8015940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015944:	2203      	movs	r2, #3
 8015946:	2118      	movs	r1, #24
 8015948:	484e      	ldr	r0, [pc, #312]	; (8015a84 <gd32_uart_begin+0x19c>)
 801594a:	f7ff f9ef 	bl	8014d2c <gpio_init>
 801594e:	2104      	movs	r1, #4
 8015950:	484c      	ldr	r0, [pc, #304]	; (8015a84 <gd32_uart_begin+0x19c>)
 8015952:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015956:	2203      	movs	r2, #3
 8015958:	f7ff f9e8 	bl	8014d2c <gpio_init>
 801595c:	2101      	movs	r1, #1
 801595e:	484a      	ldr	r0, [pc, #296]	; (8015a88 <gd32_uart_begin+0x1a0>)
 8015960:	e025      	b.n	80159ae <gd32_uart_begin+0xc6>
 8015962:	f240 7011 	movw	r0, #1809	; 0x711
 8015966:	f7ff fa79 	bl	8014e5c <rcu_periph_clock_enable>
 801596a:	f240 6002 	movw	r0, #1538	; 0x602
 801596e:	e7d8      	b.n	8015922 <gd32_uart_begin+0x3a>
 8015970:	f240 7013 	movw	r0, #1811	; 0x713
 8015974:	e7c7      	b.n	8015906 <gd32_uart_begin+0x1e>
 8015976:	f240 7014 	movw	r0, #1812	; 0x714
 801597a:	f7ff fa6f 	bl	8014e5c <rcu_periph_clock_enable>
 801597e:	f240 6004 	movw	r0, #1540	; 0x604
 8015982:	f7ff fa6b 	bl	8014e5c <rcu_periph_clock_enable>
 8015986:	f240 6005 	movw	r0, #1541	; 0x605
 801598a:	e7ca      	b.n	8015922 <gd32_uart_begin+0x3a>
 801598c:	4b3c      	ldr	r3, [pc, #240]	; (8015a80 <gd32_uart_begin+0x198>)
 801598e:	429c      	cmp	r4, r3
 8015990:	d062      	beq.n	8015a58 <gd32_uart_begin+0x170>
 8015992:	2340      	movs	r3, #64	; 0x40
 8015994:	2203      	movs	r2, #3
 8015996:	2118      	movs	r1, #24
 8015998:	483c      	ldr	r0, [pc, #240]	; (8015a8c <gd32_uart_begin+0x1a4>)
 801599a:	f7ff f9c7 	bl	8014d2c <gpio_init>
 801599e:	2104      	movs	r1, #4
 80159a0:	483a      	ldr	r0, [pc, #232]	; (8015a8c <gd32_uart_begin+0x1a4>)
 80159a2:	2380      	movs	r3, #128	; 0x80
 80159a4:	2203      	movs	r2, #3
 80159a6:	f7ff f9c1 	bl	8014d2c <gpio_init>
 80159aa:	2101      	movs	r1, #1
 80159ac:	2004      	movs	r0, #4
 80159ae:	f7ff fa11 	bl	8014dd4 <gpio_pin_remap_config>
 80159b2:	4620      	mov	r0, r4
 80159b4:	f7ff fc6a 	bl	801528c <usart_deinit>
 80159b8:	68e3      	ldr	r3, [r4, #12]
 80159ba:	4639      	mov	r1, r7
 80159bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80159c0:	4620      	mov	r0, r4
 80159c2:	60e3      	str	r3, [r4, #12]
 80159c4:	f7ff fca2 	bl	801530c <usart_baudrate_set>
 80159c8:	f1a5 0309 	sub.w	r3, r5, #9
 80159cc:	4259      	negs	r1, r3
 80159ce:	4159      	adcs	r1, r3
 80159d0:	4620      	mov	r0, r4
 80159d2:	0309      	lsls	r1, r1, #12
 80159d4:	f7ff fcca 	bl	801536c <usart_word_length_set>
 80159d8:	9906      	ldr	r1, [sp, #24]
 80159da:	4620      	mov	r0, r4
 80159dc:	1e8a      	subs	r2, r1, #2
 80159de:	4251      	negs	r1, r2
 80159e0:	4151      	adcs	r1, r2
 80159e2:	0349      	lsls	r1, r1, #13
 80159e4:	f7ff fcca 	bl	801537c <usart_stop_bit_set>
 80159e8:	2e01      	cmp	r6, #1
 80159ea:	d041      	beq.n	8015a70 <gd32_uart_begin+0x188>
 80159ec:	2e02      	cmp	r6, #2
 80159ee:	d142      	bne.n	8015a76 <gd32_uart_begin+0x18e>
 80159f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80159f4:	4620      	mov	r0, r4
 80159f6:	f7ff fcb1 	bl	801535c <usart_parity_config>
 80159fa:	2100      	movs	r1, #0
 80159fc:	4620      	mov	r0, r4
 80159fe:	f7ff fcd1 	bl	80153a4 <usart_hardware_flow_rts_config>
 8015a02:	2100      	movs	r1, #0
 8015a04:	4620      	mov	r0, r4
 8015a06:	f7ff fcd3 	bl	80153b0 <usart_hardware_flow_cts_config>
 8015a0a:	2104      	movs	r1, #4
 8015a0c:	4620      	mov	r0, r4
 8015a0e:	f7ff fcc3 	bl	8015398 <usart_receive_config>
 8015a12:	2108      	movs	r1, #8
 8015a14:	4620      	mov	r0, r4
 8015a16:	f7ff fcb9 	bl	801538c <usart_transmit_config>
 8015a1a:	68e3      	ldr	r3, [r4, #12]
 8015a1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015a20:	60e3      	str	r3, [r4, #12]
 8015a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a24:	2304      	movs	r3, #4
 8015a26:	2203      	movs	r2, #3
 8015a28:	2118      	movs	r1, #24
 8015a2a:	4819      	ldr	r0, [pc, #100]	; (8015a90 <gd32_uart_begin+0x1a8>)
 8015a2c:	f7ff f97e 	bl	8014d2c <gpio_init>
 8015a30:	2308      	movs	r3, #8
 8015a32:	2203      	movs	r2, #3
 8015a34:	2104      	movs	r1, #4
 8015a36:	4816      	ldr	r0, [pc, #88]	; (8015a90 <gd32_uart_begin+0x1a8>)
 8015a38:	f7ff f978 	bl	8014d2c <gpio_init>
 8015a3c:	e7b9      	b.n	80159b2 <gd32_uart_begin+0xca>
 8015a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015a42:	2203      	movs	r2, #3
 8015a44:	2118      	movs	r1, #24
 8015a46:	480f      	ldr	r0, [pc, #60]	; (8015a84 <gd32_uart_begin+0x19c>)
 8015a48:	f7ff f970 	bl	8014d2c <gpio_init>
 8015a4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015a50:	2203      	movs	r2, #3
 8015a52:	2104      	movs	r1, #4
 8015a54:	480b      	ldr	r0, [pc, #44]	; (8015a84 <gd32_uart_begin+0x19c>)
 8015a56:	e7ef      	b.n	8015a38 <gd32_uart_begin+0x150>
 8015a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015a5c:	2203      	movs	r2, #3
 8015a5e:	2118      	movs	r1, #24
 8015a60:	4808      	ldr	r0, [pc, #32]	; (8015a84 <gd32_uart_begin+0x19c>)
 8015a62:	f7ff f963 	bl	8014d2c <gpio_init>
 8015a66:	2304      	movs	r3, #4
 8015a68:	2203      	movs	r2, #3
 8015a6a:	4619      	mov	r1, r3
 8015a6c:	4809      	ldr	r0, [pc, #36]	; (8015a94 <gd32_uart_begin+0x1ac>)
 8015a6e:	e7e3      	b.n	8015a38 <gd32_uart_begin+0x150>
 8015a70:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8015a74:	e7be      	b.n	80159f4 <gd32_uart_begin+0x10c>
 8015a76:	2100      	movs	r1, #0
 8015a78:	e7bc      	b.n	80159f4 <gd32_uart_begin+0x10c>
 8015a7a:	bf00      	nop
 8015a7c:	40004c00 	andmi	r4, r0, r0, lsl #24
 8015a80:	40005000 	andmi	r5, r0, r0
 8015a84:	40011000 	andmi	r1, r1, r0
 8015a88:	00140010 	andseq	r0, r4, r0, lsl r0
 8015a8c:	40010c00 	andmi	r0, r1, r0, lsl #24
 8015a90:	40010800 	andmi	r0, r1, r0, lsl #16
 8015a94:	40011400 	andmi	r1, r1, r0, lsl #8

08015a98 <micros_init()>:
 8015a98:	4770      	bx	lr
	...

08015a9c <udelay_init()>:
 8015a9c:	4a07      	ldr	r2, [pc, #28]	; (8015abc <udelay_init()+0x20>)
 8015a9e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8015aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8015aa6:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8015aaa:	2200      	movs	r2, #0
 8015aac:	4b04      	ldr	r3, [pc, #16]	; (8015ac0 <udelay_init()+0x24>)
 8015aae:	605a      	str	r2, [r3, #4]
 8015ab0:	681a      	ldr	r2, [r3, #0]
 8015ab2:	f042 0201 	orr.w	r2, r2, #1
 8015ab6:	601a      	str	r2, [r3, #0]
 8015ab8:	4770      	bx	lr
 8015aba:	bf00      	nop
 8015abc:	e000ed00 	and	lr, r0, r0, lsl #26
 8015ac0:	e0001000 	and	r1, r0, r0

08015ac4 <udelay(unsigned int, unsigned int)>:
 8015ac4:	236c      	movs	r3, #108	; 0x6c
 8015ac6:	b530      	push	{r4, r5, lr}
 8015ac8:	4358      	muls	r0, r3
 8015aca:	b909      	cbnz	r1, 8015ad0 <udelay(unsigned int, unsigned int)+0xc>
 8015acc:	4b08      	ldr	r3, [pc, #32]	; (8015af0 <udelay(unsigned int, unsigned int)+0x2c>)
 8015ace:	6859      	ldr	r1, [r3, #4]
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	4c07      	ldr	r4, [pc, #28]	; (8015af0 <udelay(unsigned int, unsigned int)+0x2c>)
 8015ad4:	6862      	ldr	r2, [r4, #4]
 8015ad6:	4291      	cmp	r1, r2
 8015ad8:	d0fc      	beq.n	8015ad4 <udelay(unsigned int, unsigned int)+0x10>
 8015ada:	bf2a      	itet	cs
 8015adc:	f102 35ff 	addcs.w	r5, r2, #4294967295	; 0xffffffff
 8015ae0:	189b      	addcc	r3, r3, r2
 8015ae2:	195b      	addcs	r3, r3, r5
 8015ae4:	1a5b      	subs	r3, r3, r1
 8015ae6:	4283      	cmp	r3, r0
 8015ae8:	d300      	bcc.n	8015aec <udelay(unsigned int, unsigned int)+0x28>
 8015aea:	bd30      	pop	{r4, r5, pc}
 8015aec:	4611      	mov	r1, r2
 8015aee:	e7f1      	b.n	8015ad4 <udelay(unsigned int, unsigned int)+0x10>
 8015af0:	e0001000 	and	r1, r0, r0

08015af4 <emac_start(unsigned char*)>:
 8015af4:	b538      	push	{r3, r4, r5, lr}
 8015af6:	4605      	mov	r5, r0
 8015af8:	f240 6002 	movw	r0, #1538	; 0x602
 8015afc:	f7ff f9ae 	bl	8014e5c <rcu_periph_clock_enable>
 8015b00:	f240 6003 	movw	r0, #1539	; 0x603
 8015b04:	f7ff f9aa 	bl	8014e5c <rcu_periph_clock_enable>
 8015b08:	f240 6004 	movw	r0, #1540	; 0x604
 8015b0c:	f7ff f9a6 	bl	8014e5c <rcu_periph_clock_enable>
 8015b10:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8015b14:	f7ff f9a2 	bl	8014e5c <rcu_periph_clock_enable>
 8015b18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015b1c:	2203      	movs	r2, #3
 8015b1e:	2118      	movs	r1, #24
 8015b20:	4843      	ldr	r0, [pc, #268]	; (8015c30 <emac_start(unsigned char*)+0x13c>)
 8015b22:	f7ff f903 	bl	8014d2c <gpio_init>
 8015b26:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8015b2a:	f7ff f9c1 	bl	8014eb0 <rcu_pll2_config>
 8015b2e:	201c      	movs	r0, #28
 8015b30:	f7ff fa62 	bl	8014ff8 <rcu_osci_on>
 8015b34:	201c      	movs	r0, #28
 8015b36:	f7ff f9ff 	bl	8014f38 <rcu_osci_stab_wait>
 8015b3a:	f04f 6030 	mov.w	r0, #184549376	; 0xb000000
 8015b3e:	f7ff f9ad 	bl	8014e9c <rcu_ckout0_config>
 8015b42:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8015b46:	f7ff f975 	bl	8014e34 <gpio_ethernet_phy_select>
 8015b4a:	2302      	movs	r3, #2
 8015b4c:	2203      	movs	r2, #3
 8015b4e:	2104      	movs	r1, #4
 8015b50:	4837      	ldr	r0, [pc, #220]	; (8015c30 <emac_start(unsigned char*)+0x13c>)
 8015b52:	f7ff f8eb 	bl	8014d2c <gpio_init>
 8015b56:	2304      	movs	r3, #4
 8015b58:	2203      	movs	r2, #3
 8015b5a:	2118      	movs	r1, #24
 8015b5c:	4834      	ldr	r0, [pc, #208]	; (8015c30 <emac_start(unsigned char*)+0x13c>)
 8015b5e:	f7ff f8e5 	bl	8014d2c <gpio_init>
 8015b62:	2380      	movs	r3, #128	; 0x80
 8015b64:	2203      	movs	r2, #3
 8015b66:	2104      	movs	r1, #4
 8015b68:	4831      	ldr	r0, [pc, #196]	; (8015c30 <emac_start(unsigned char*)+0x13c>)
 8015b6a:	f7ff f8df 	bl	8014d2c <gpio_init>
 8015b6e:	2302      	movs	r3, #2
 8015b70:	2203      	movs	r2, #3
 8015b72:	2118      	movs	r1, #24
 8015b74:	482f      	ldr	r0, [pc, #188]	; (8015c34 <emac_start(unsigned char*)+0x140>)
 8015b76:	f7ff f8d9 	bl	8014d2c <gpio_init>
 8015b7a:	2310      	movs	r3, #16
 8015b7c:	2203      	movs	r2, #3
 8015b7e:	2104      	movs	r1, #4
 8015b80:	482c      	ldr	r0, [pc, #176]	; (8015c34 <emac_start(unsigned char*)+0x140>)
 8015b82:	f7ff f8d3 	bl	8014d2c <gpio_init>
 8015b86:	2320      	movs	r3, #32
 8015b88:	2203      	movs	r2, #3
 8015b8a:	2104      	movs	r1, #4
 8015b8c:	4829      	ldr	r0, [pc, #164]	; (8015c34 <emac_start(unsigned char*)+0x140>)
 8015b8e:	f7ff f8cd 	bl	8014d2c <gpio_init>
 8015b92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015b96:	2203      	movs	r2, #3
 8015b98:	2118      	movs	r1, #24
 8015b9a:	4827      	ldr	r0, [pc, #156]	; (8015c38 <emac_start(unsigned char*)+0x144>)
 8015b9c:	f7ff f8c6 	bl	8014d2c <gpio_init>
 8015ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015ba4:	2203      	movs	r2, #3
 8015ba6:	2118      	movs	r1, #24
 8015ba8:	4823      	ldr	r0, [pc, #140]	; (8015c38 <emac_start(unsigned char*)+0x144>)
 8015baa:	f7ff f8bf 	bl	8014d2c <gpio_init>
 8015bae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8015bb2:	2203      	movs	r2, #3
 8015bb4:	2118      	movs	r1, #24
 8015bb6:	4820      	ldr	r0, [pc, #128]	; (8015c38 <emac_start(unsigned char*)+0x144>)
 8015bb8:	f7ff f8b8 	bl	8014d2c <gpio_init>
 8015bbc:	f240 500e 	movw	r0, #1294	; 0x50e
 8015bc0:	f7ff f94c 	bl	8014e5c <rcu_periph_clock_enable>
 8015bc4:	f240 500f 	movw	r0, #1295	; 0x50f
 8015bc8:	f7ff f948 	bl	8014e5c <rcu_periph_clock_enable>
 8015bcc:	f44f 60a2 	mov.w	r0, #1296	; 0x510
 8015bd0:	f7ff f944 	bl	8014e5c <rcu_periph_clock_enable>
 8015bd4:	f7ff f812 	bl	8014bfc <enet_deinit>
 8015bd8:	f7fe fc70 	bl	80144bc <enet_software_reset>
 8015bdc:	4604      	mov	r4, r0
 8015bde:	b138      	cbz	r0, 8015bf0 <emac_start(unsigned char*)+0xfc>
 8015be0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015be4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8015be8:	2001      	movs	r0, #1
 8015bea:	f7fe fdeb 	bl	80147c4 <enet_init>
 8015bee:	4604      	mov	r4, r0
 8015bf0:	4628      	mov	r0, r5
 8015bf2:	f000 fab7 	bl	8016164 <mac_address_get(unsigned char*)>
 8015bf6:	4629      	mov	r1, r5
 8015bf8:	2000      	movs	r0, #0
 8015bfa:	f7fe fd43 	bl	8014684 <enet_mac_address_set>
 8015bfe:	f44f 00e0 	mov.w	r0, #7340032	; 0x700000
 8015c02:	f7fe fc6f 	bl	80144e4 <enet_descriptors_chain_init>
 8015c06:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
 8015c0a:	f7fe fc6b 	bl	80144e4 <enet_descriptors_chain_init>
 8015c0e:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8015c12:	480a      	ldr	r0, [pc, #40]	; (8015c3c <emac_start(unsigned char*)+0x148>)
 8015c14:	f7fe fd30 	bl	8014678 <enet_transmit_checksum_config>
 8015c18:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8015c1c:	4808      	ldr	r0, [pc, #32]	; (8015c40 <emac_start(unsigned char*)+0x14c>)
 8015c1e:	f7fe fd2b 	bl	8014678 <enet_transmit_checksum_config>
 8015c22:	f7fe ff63 	bl	8014aec <enet_enable>
 8015c26:	fab4 f084 	clz	r0, r4
 8015c2a:	0940      	lsrs	r0, r0, #5
 8015c2c:	4240      	negs	r0, r0
 8015c2e:	bd38      	pop	{r3, r4, r5, pc}
 8015c30:	40010800 	andmi	r0, r1, r0, lsl #16
 8015c34:	40011000 	andmi	r1, r1, r0
 8015c38:	40010c00 	andmi	r0, r1, r0, lsl #24
 8015c3c:	2000d9c4 	andcs	sp, r0, r4, asr #19
 8015c40:	2000d9d4 	ldrdcs	sp, [r0], -r4

08015c44 <adc_mode_config>:
 8015c44:	4b06      	ldr	r3, [pc, #24]	; (8015c60 <adc_mode_config+0x1c>)
 8015c46:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8015c4a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8015c4e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8015c52:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8015c56:	4302      	orrs	r2, r0
 8015c58:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8015c5c:	4770      	bx	lr
 8015c5e:	bf00      	nop
 8015c60:	40012000 	andmi	r2, r1, r0

08015c64 <adc_special_function_config>:
 8015c64:	b510      	push	{r4, lr}
 8015c66:	f401 7380 	and.w	r3, r1, #256	; 0x100
 8015c6a:	f401 6480 	and.w	r4, r1, #1024	; 0x400
 8015c6e:	f001 0102 	and.w	r1, r1, #2
 8015c72:	b17a      	cbz	r2, 8015c94 <adc_special_function_config+0x30>
 8015c74:	b11b      	cbz	r3, 8015c7e <adc_special_function_config+0x1a>
 8015c76:	6843      	ldr	r3, [r0, #4]
 8015c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015c7c:	6043      	str	r3, [r0, #4]
 8015c7e:	b11c      	cbz	r4, 8015c88 <adc_special_function_config+0x24>
 8015c80:	6843      	ldr	r3, [r0, #4]
 8015c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8015c86:	6043      	str	r3, [r0, #4]
 8015c88:	b119      	cbz	r1, 8015c92 <adc_special_function_config+0x2e>
 8015c8a:	6883      	ldr	r3, [r0, #8]
 8015c8c:	f043 0302 	orr.w	r3, r3, #2
 8015c90:	6083      	str	r3, [r0, #8]
 8015c92:	bd10      	pop	{r4, pc}
 8015c94:	b11b      	cbz	r3, 8015c9e <adc_special_function_config+0x3a>
 8015c96:	6843      	ldr	r3, [r0, #4]
 8015c98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015c9c:	6043      	str	r3, [r0, #4]
 8015c9e:	b11c      	cbz	r4, 8015ca8 <adc_special_function_config+0x44>
 8015ca0:	6843      	ldr	r3, [r0, #4]
 8015ca2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8015ca6:	6043      	str	r3, [r0, #4]
 8015ca8:	2900      	cmp	r1, #0
 8015caa:	d0f2      	beq.n	8015c92 <adc_special_function_config+0x2e>
 8015cac:	6883      	ldr	r3, [r0, #8]
 8015cae:	f023 0302 	bic.w	r3, r3, #2
 8015cb2:	e7ed      	b.n	8015c90 <adc_special_function_config+0x2c>

08015cb4 <adc_data_alignment_config>:
 8015cb4:	6883      	ldr	r3, [r0, #8]
 8015cb6:	b119      	cbz	r1, 8015cc0 <adc_data_alignment_config+0xc>
 8015cb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015cbc:	6083      	str	r3, [r0, #8]
 8015cbe:	4770      	bx	lr
 8015cc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015cc4:	e7fa      	b.n	8015cbc <adc_data_alignment_config+0x8>

08015cc6 <adc_enable>:
 8015cc6:	6883      	ldr	r3, [r0, #8]
 8015cc8:	07db      	lsls	r3, r3, #31
 8015cca:	bf5e      	ittt	pl
 8015ccc:	6883      	ldrpl	r3, [r0, #8]
 8015cce:	f043 0301 	orrpl.w	r3, r3, #1
 8015cd2:	6083      	strpl	r3, [r0, #8]
 8015cd4:	4770      	bx	lr

08015cd6 <adc_calibration_enable>:
 8015cd6:	6883      	ldr	r3, [r0, #8]
 8015cd8:	f100 0208 	add.w	r2, r0, #8
 8015cdc:	f043 0308 	orr.w	r3, r3, #8
 8015ce0:	6083      	str	r3, [r0, #8]
 8015ce2:	6813      	ldr	r3, [r2, #0]
 8015ce4:	0719      	lsls	r1, r3, #28
 8015ce6:	d4fc      	bmi.n	8015ce2 <adc_calibration_enable+0xc>
 8015ce8:	6883      	ldr	r3, [r0, #8]
 8015cea:	f043 0304 	orr.w	r3, r3, #4
 8015cee:	6083      	str	r3, [r0, #8]
 8015cf0:	6813      	ldr	r3, [r2, #0]
 8015cf2:	075b      	lsls	r3, r3, #29
 8015cf4:	d4fc      	bmi.n	8015cf0 <adc_calibration_enable+0x1a>
 8015cf6:	4770      	bx	lr

08015cf8 <adc_tempsensor_vrefint_enable>:
 8015cf8:	4a03      	ldr	r2, [pc, #12]	; (8015d08 <adc_tempsensor_vrefint_enable+0x10>)
 8015cfa:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 8015cfe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015d02:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
 8015d06:	4770      	bx	lr
 8015d08:	40012000 	andmi	r2, r1, r0

08015d0c <adc_channel_length_config>:
 8015d0c:	2901      	cmp	r1, #1
 8015d0e:	d002      	beq.n	8015d16 <adc_channel_length_config+0xa>
 8015d10:	2902      	cmp	r1, #2
 8015d12:	d00c      	beq.n	8015d2e <adc_channel_length_config+0x22>
 8015d14:	4770      	bx	lr
 8015d16:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015d18:	3a01      	subs	r2, #1
 8015d1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8015d1e:	62c3      	str	r3, [r0, #44]	; 0x2c
 8015d20:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015d22:	0512      	lsls	r2, r2, #20
 8015d24:	f402 0270 	and.w	r2, r2, #15728640	; 0xf00000
 8015d28:	431a      	orrs	r2, r3
 8015d2a:	62c2      	str	r2, [r0, #44]	; 0x2c
 8015d2c:	4770      	bx	lr
 8015d2e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8015d30:	3a01      	subs	r2, #1
 8015d32:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8015d36:	6383      	str	r3, [r0, #56]	; 0x38
 8015d38:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8015d3a:	0512      	lsls	r2, r2, #20
 8015d3c:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8015d40:	431a      	orrs	r2, r3
 8015d42:	6382      	str	r2, [r0, #56]	; 0x38
 8015d44:	4770      	bx	lr

08015d46 <adc_inserted_channel_config>:
 8015d46:	b530      	push	{r4, r5, lr}
 8015d48:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8015d4a:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8015d4c:	f3c4 5401 	ubfx	r4, r4, #20, #2
 8015d50:	1a61      	subs	r1, r4, r1
 8015d52:	f06f 0404 	mvn.w	r4, #4
 8015d56:	4361      	muls	r1, r4
 8015d58:	241f      	movs	r4, #31
 8015d5a:	310f      	adds	r1, #15
 8015d5c:	408c      	lsls	r4, r1
 8015d5e:	ea25 0504 	bic.w	r5, r5, r4
 8015d62:	fa02 f101 	lsl.w	r1, r2, r1
 8015d66:	4329      	orrs	r1, r5
 8015d68:	2a09      	cmp	r2, #9
 8015d6a:	6381      	str	r1, [r0, #56]	; 0x38
 8015d6c:	d80b      	bhi.n	8015d86 <adc_inserted_channel_config+0x40>
 8015d6e:	2407      	movs	r4, #7
 8015d70:	6901      	ldr	r1, [r0, #16]
 8015d72:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015d76:	4094      	lsls	r4, r2
 8015d78:	ea21 0104 	bic.w	r1, r1, r4
 8015d7c:	fa03 f202 	lsl.w	r2, r3, r2
 8015d80:	430a      	orrs	r2, r1
 8015d82:	6102      	str	r2, [r0, #16]
 8015d84:	bd30      	pop	{r4, r5, pc}
 8015d86:	2a11      	cmp	r2, #17
 8015d88:	d8fc      	bhi.n	8015d84 <adc_inserted_channel_config+0x3e>
 8015d8a:	2407      	movs	r4, #7
 8015d8c:	3a0a      	subs	r2, #10
 8015d8e:	68c1      	ldr	r1, [r0, #12]
 8015d90:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015d94:	4094      	lsls	r4, r2
 8015d96:	ea21 0104 	bic.w	r1, r1, r4
 8015d9a:	4093      	lsls	r3, r2
 8015d9c:	430b      	orrs	r3, r1
 8015d9e:	60c3      	str	r3, [r0, #12]
 8015da0:	e7f0      	b.n	8015d84 <adc_inserted_channel_config+0x3e>

08015da2 <adc_external_trigger_source_config>:
 8015da2:	2901      	cmp	r1, #1
 8015da4:	d002      	beq.n	8015dac <adc_external_trigger_source_config+0xa>
 8015da6:	2902      	cmp	r1, #2
 8015da8:	d008      	beq.n	8015dbc <adc_external_trigger_source_config+0x1a>
 8015daa:	4770      	bx	lr
 8015dac:	6883      	ldr	r3, [r0, #8]
 8015dae:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8015db2:	6083      	str	r3, [r0, #8]
 8015db4:	6883      	ldr	r3, [r0, #8]
 8015db6:	4313      	orrs	r3, r2
 8015db8:	6083      	str	r3, [r0, #8]
 8015dba:	4770      	bx	lr
 8015dbc:	6883      	ldr	r3, [r0, #8]
 8015dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015dc2:	e7f6      	b.n	8015db2 <adc_external_trigger_source_config+0x10>

08015dc4 <adc_external_trigger_config>:
 8015dc4:	f001 0301 	and.w	r3, r1, #1
 8015dc8:	f001 0102 	and.w	r1, r1, #2
 8015dcc:	b152      	cbz	r2, 8015de4 <adc_external_trigger_config+0x20>
 8015dce:	b11b      	cbz	r3, 8015dd8 <adc_external_trigger_config+0x14>
 8015dd0:	6883      	ldr	r3, [r0, #8]
 8015dd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015dd6:	6083      	str	r3, [r0, #8]
 8015dd8:	b119      	cbz	r1, 8015de2 <adc_external_trigger_config+0x1e>
 8015dda:	6883      	ldr	r3, [r0, #8]
 8015ddc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015de0:	6083      	str	r3, [r0, #8]
 8015de2:	4770      	bx	lr
 8015de4:	b11b      	cbz	r3, 8015dee <adc_external_trigger_config+0x2a>
 8015de6:	6883      	ldr	r3, [r0, #8]
 8015de8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015dec:	6083      	str	r3, [r0, #8]
 8015dee:	2900      	cmp	r1, #0
 8015df0:	d0f7      	beq.n	8015de2 <adc_external_trigger_config+0x1e>
 8015df2:	6883      	ldr	r3, [r0, #8]
 8015df4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8015df8:	e7f2      	b.n	8015de0 <adc_external_trigger_config+0x1c>

08015dfa <adc_software_trigger_enable>:
 8015dfa:	07ca      	lsls	r2, r1, #31
 8015dfc:	bf42      	ittt	mi
 8015dfe:	6883      	ldrmi	r3, [r0, #8]
 8015e00:	f443 0380 	orrmi.w	r3, r3, #4194304	; 0x400000
 8015e04:	6083      	strmi	r3, [r0, #8]
 8015e06:	078b      	lsls	r3, r1, #30
 8015e08:	bf42      	ittt	mi
 8015e0a:	6883      	ldrmi	r3, [r0, #8]
 8015e0c:	f443 1300 	orrmi.w	r3, r3, #2097152	; 0x200000
 8015e10:	6083      	strmi	r3, [r0, #8]
 8015e12:	4770      	bx	lr

08015e14 <dma_deinit>:
 8015e14:	4b0c      	ldr	r3, [pc, #48]	; (8015e48 <dma_deinit+0x34>)
 8015e16:	4298      	cmp	r0, r3
 8015e18:	d102      	bne.n	8015e20 <dma_deinit+0xc>
 8015e1a:	2904      	cmp	r1, #4
 8015e1c:	d900      	bls.n	8015e20 <dma_deinit+0xc>
 8015e1e:	e7fe      	b.n	8015e1e <dma_deinit+0xa>
 8015e20:	2314      	movs	r3, #20
 8015e22:	fb03 0301 	mla	r3, r3, r1, r0
 8015e26:	689a      	ldr	r2, [r3, #8]
 8015e28:	0089      	lsls	r1, r1, #2
 8015e2a:	f022 0201 	bic.w	r2, r2, #1
 8015e2e:	609a      	str	r2, [r3, #8]
 8015e30:	2200      	movs	r2, #0
 8015e32:	609a      	str	r2, [r3, #8]
 8015e34:	60da      	str	r2, [r3, #12]
 8015e36:	611a      	str	r2, [r3, #16]
 8015e38:	615a      	str	r2, [r3, #20]
 8015e3a:	230f      	movs	r3, #15
 8015e3c:	6842      	ldr	r2, [r0, #4]
 8015e3e:	408b      	lsls	r3, r1
 8015e40:	4313      	orrs	r3, r2
 8015e42:	6043      	str	r3, [r0, #4]
 8015e44:	4770      	bx	lr
 8015e46:	bf00      	nop
 8015e48:	40020400 	andmi	r0, r2, r0, lsl #8

08015e4c <dma_struct_para_init>:
 8015e4c:	2300      	movs	r3, #0
 8015e4e:	e9c0 3300 	strd	r3, r3, [r0]
 8015e52:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8015e56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015e5a:	8303      	strh	r3, [r0, #24]
 8015e5c:	7683      	strb	r3, [r0, #26]
 8015e5e:	4770      	bx	lr

08015e60 <dma_init>:
 8015e60:	4b1b      	ldr	r3, [pc, #108]	; (8015ed0 <dma_init+0x70>)
 8015e62:	b510      	push	{r4, lr}
 8015e64:	4298      	cmp	r0, r3
 8015e66:	d102      	bne.n	8015e6e <dma_init+0xe>
 8015e68:	2904      	cmp	r1, #4
 8015e6a:	d900      	bls.n	8015e6e <dma_init+0xe>
 8015e6c:	e7fe      	b.n	8015e6c <dma_init+0xc>
 8015e6e:	2314      	movs	r3, #20
 8015e70:	fb03 0101 	mla	r1, r3, r1, r0
 8015e74:	6813      	ldr	r3, [r2, #0]
 8015e76:	610b      	str	r3, [r1, #16]
 8015e78:	6893      	ldr	r3, [r2, #8]
 8015e7a:	614b      	str	r3, [r1, #20]
 8015e7c:	8a13      	ldrh	r3, [r2, #16]
 8015e7e:	60cb      	str	r3, [r1, #12]
 8015e80:	68d4      	ldr	r4, [r2, #12]
 8015e82:	6853      	ldr	r3, [r2, #4]
 8015e84:	6888      	ldr	r0, [r1, #8]
 8015e86:	4323      	orrs	r3, r4
 8015e88:	6954      	ldr	r4, [r2, #20]
 8015e8a:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8015e8e:	4323      	orrs	r3, r4
 8015e90:	4303      	orrs	r3, r0
 8015e92:	608b      	str	r3, [r1, #8]
 8015e94:	7e13      	ldrb	r3, [r2, #24]
 8015e96:	2b01      	cmp	r3, #1
 8015e98:	688b      	ldr	r3, [r1, #8]
 8015e9a:	bf0c      	ite	eq
 8015e9c:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 8015ea0:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8015ea4:	608b      	str	r3, [r1, #8]
 8015ea6:	7e53      	ldrb	r3, [r2, #25]
 8015ea8:	2b01      	cmp	r3, #1
 8015eaa:	688b      	ldr	r3, [r1, #8]
 8015eac:	bf0c      	ite	eq
 8015eae:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
 8015eb2:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 8015eb6:	608b      	str	r3, [r1, #8]
 8015eb8:	7e93      	ldrb	r3, [r2, #26]
 8015eba:	b923      	cbnz	r3, 8015ec6 <dma_init+0x66>
 8015ebc:	688b      	ldr	r3, [r1, #8]
 8015ebe:	f023 0310 	bic.w	r3, r3, #16
 8015ec2:	608b      	str	r3, [r1, #8]
 8015ec4:	bd10      	pop	{r4, pc}
 8015ec6:	688b      	ldr	r3, [r1, #8]
 8015ec8:	f043 0310 	orr.w	r3, r3, #16
 8015ecc:	e7f9      	b.n	8015ec2 <dma_init+0x62>
 8015ece:	bf00      	nop
 8015ed0:	40020400 	andmi	r0, r2, r0, lsl #8

08015ed4 <dma_circulation_disable>:
 8015ed4:	4b06      	ldr	r3, [pc, #24]	; (8015ef0 <dma_circulation_disable+0x1c>)
 8015ed6:	4298      	cmp	r0, r3
 8015ed8:	d102      	bne.n	8015ee0 <dma_circulation_disable+0xc>
 8015eda:	2904      	cmp	r1, #4
 8015edc:	d900      	bls.n	8015ee0 <dma_circulation_disable+0xc>
 8015ede:	e7fe      	b.n	8015ede <dma_circulation_disable+0xa>
 8015ee0:	2314      	movs	r3, #20
 8015ee2:	4359      	muls	r1, r3
 8015ee4:	3008      	adds	r0, #8
 8015ee6:	580b      	ldr	r3, [r1, r0]
 8015ee8:	f023 0320 	bic.w	r3, r3, #32
 8015eec:	500b      	str	r3, [r1, r0]
 8015eee:	4770      	bx	lr
 8015ef0:	40020400 	andmi	r0, r2, r0, lsl #8

08015ef4 <dma_memory_to_memory_disable>:
 8015ef4:	4b06      	ldr	r3, [pc, #24]	; (8015f10 <dma_memory_to_memory_disable+0x1c>)
 8015ef6:	4298      	cmp	r0, r3
 8015ef8:	d102      	bne.n	8015f00 <dma_memory_to_memory_disable+0xc>
 8015efa:	2904      	cmp	r1, #4
 8015efc:	d900      	bls.n	8015f00 <dma_memory_to_memory_disable+0xc>
 8015efe:	e7fe      	b.n	8015efe <dma_memory_to_memory_disable+0xa>
 8015f00:	2314      	movs	r3, #20
 8015f02:	4359      	muls	r1, r3
 8015f04:	3008      	adds	r0, #8
 8015f06:	580b      	ldr	r3, [r1, r0]
 8015f08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8015f0c:	500b      	str	r3, [r1, r0]
 8015f0e:	4770      	bx	lr
 8015f10:	40020400 	andmi	r0, r2, r0, lsl #8

08015f14 <i2c_clock_config>:
 8015f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f16:	4605      	mov	r5, r0
 8015f18:	2002      	movs	r0, #2
 8015f1a:	460c      	mov	r4, r1
 8015f1c:	4617      	mov	r7, r2
 8015f1e:	f7ff f86d 	bl	8014ffc <rcu_clock_freq_get>
 8015f22:	4603      	mov	r3, r0
 8015f24:	4828      	ldr	r0, [pc, #160]	; (8015fc8 <i2c_clock_config+0xb4>)
 8015f26:	4a29      	ldr	r2, [pc, #164]	; (8015fcc <i2c_clock_config+0xb8>)
 8015f28:	fbb3 f0f0 	udiv	r0, r3, r0
 8015f2c:	4293      	cmp	r3, r2
 8015f2e:	bf34      	ite	cc
 8015f30:	4601      	movcc	r1, r0
 8015f32:	2136      	movcs	r1, #54	; 0x36
 8015f34:	686e      	ldr	r6, [r5, #4]
 8015f36:	4a26      	ldr	r2, [pc, #152]	; (8015fd0 <i2c_clock_config+0xbc>)
 8015f38:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8015f3c:	430e      	orrs	r6, r1
 8015f3e:	4294      	cmp	r4, r2
 8015f40:	606e      	str	r6, [r5, #4]
 8015f42:	d816      	bhi.n	8015f72 <i2c_clock_config+0x5e>
 8015f44:	3001      	adds	r0, #1
 8015f46:	2835      	cmp	r0, #53	; 0x35
 8015f48:	d90d      	bls.n	8015f66 <i2c_clock_config+0x52>
 8015f4a:	2236      	movs	r2, #54	; 0x36
 8015f4c:	622a      	str	r2, [r5, #32]
 8015f4e:	0064      	lsls	r4, r4, #1
 8015f50:	fbb3 f4f4 	udiv	r4, r3, r4
 8015f54:	2c04      	cmp	r4, #4
 8015f56:	bf38      	it	cc
 8015f58:	2404      	movcc	r4, #4
 8015f5a:	69ea      	ldr	r2, [r5, #28]
 8015f5c:	f3c4 040b 	ubfx	r4, r4, #0, #12
 8015f60:	4314      	orrs	r4, r2
 8015f62:	61ec      	str	r4, [r5, #28]
 8015f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f66:	2802      	cmp	r0, #2
 8015f68:	d801      	bhi.n	8015f6e <i2c_clock_config+0x5a>
 8015f6a:	2202      	movs	r2, #2
 8015f6c:	e7ee      	b.n	8015f4c <i2c_clock_config+0x38>
 8015f6e:	6228      	str	r0, [r5, #32]
 8015f70:	e7ed      	b.n	8015f4e <i2c_clock_config+0x3a>
 8015f72:	4a18      	ldr	r2, [pc, #96]	; (8015fd4 <i2c_clock_config+0xc0>)
 8015f74:	4294      	cmp	r4, r2
 8015f76:	d8f5      	bhi.n	8015f64 <i2c_clock_config+0x50>
 8015f78:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8015f7c:	4351      	muls	r1, r2
 8015f7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015f82:	fbb1 f1f2 	udiv	r1, r1, r2
 8015f86:	3101      	adds	r1, #1
 8015f88:	6229      	str	r1, [r5, #32]
 8015f8a:	b9a7      	cbnz	r7, 8015fb6 <i2c_clock_config+0xa2>
 8015f8c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015f90:	fbb3 f4f4 	udiv	r4, r3, r4
 8015f94:	69eb      	ldr	r3, [r5, #28]
 8015f96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8015f9a:	61eb      	str	r3, [r5, #28]
 8015f9c:	f3c4 030b 	ubfx	r3, r4, #0, #12
 8015fa0:	b90b      	cbnz	r3, 8015fa6 <i2c_clock_config+0x92>
 8015fa2:	f044 0401 	orr.w	r4, r4, #1
 8015fa6:	69eb      	ldr	r3, [r5, #28]
 8015fa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015fac:	61eb      	str	r3, [r5, #28]
 8015fae:	69eb      	ldr	r3, [r5, #28]
 8015fb0:	4323      	orrs	r3, r4
 8015fb2:	61eb      	str	r3, [r5, #28]
 8015fb4:	e7d6      	b.n	8015f64 <i2c_clock_config+0x50>
 8015fb6:	2219      	movs	r2, #25
 8015fb8:	4354      	muls	r4, r2
 8015fba:	fbb3 f4f4 	udiv	r4, r3, r4
 8015fbe:	69eb      	ldr	r3, [r5, #28]
 8015fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015fc4:	e7e9      	b.n	8015f9a <i2c_clock_config+0x86>
 8015fc6:	bf00      	nop
 8015fc8:	000f4240 	andeq	r4, pc, r0, asr #4
 8015fcc:	0337f980 	teqeq	r7, #128, 18	; 0x200000	; <UNPREDICTABLE>
 8015fd0:	000186a0 	andeq	r8, r1, r0, lsr #13
 8015fd4:	00061a80 	andeq	r1, r6, r0, lsl #21

08015fd8 <i2c_ack_config>:
 8015fd8:	6803      	ldr	r3, [r0, #0]
 8015fda:	2901      	cmp	r1, #1
 8015fdc:	bf0c      	ite	eq
 8015fde:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
 8015fe2:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 8015fe6:	6003      	str	r3, [r0, #0]
 8015fe8:	4770      	bx	lr

08015fea <i2c_ackpos_config>:
 8015fea:	6803      	ldr	r3, [r0, #0]
 8015fec:	b919      	cbnz	r1, 8015ff6 <i2c_ackpos_config+0xc>
 8015fee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015ff2:	6003      	str	r3, [r0, #0]
 8015ff4:	4770      	bx	lr
 8015ff6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015ffa:	e7fa      	b.n	8015ff2 <i2c_ackpos_config+0x8>

08015ffc <i2c_master_addressing>:
 8015ffc:	3202      	adds	r2, #2
 8015ffe:	bf0c      	ite	eq
 8016000:	f021 0101 	biceq.w	r1, r1, #1
 8016004:	f041 0101 	orrne.w	r1, r1, #1
 8016008:	6101      	str	r1, [r0, #16]
 801600a:	4770      	bx	lr

0801600c <i2c_enable>:
 801600c:	6803      	ldr	r3, [r0, #0]
 801600e:	f043 0301 	orr.w	r3, r3, #1
 8016012:	6003      	str	r3, [r0, #0]
 8016014:	4770      	bx	lr

08016016 <i2c_start_on_bus>:
 8016016:	6803      	ldr	r3, [r0, #0]
 8016018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801601c:	6003      	str	r3, [r0, #0]
 801601e:	4770      	bx	lr

08016020 <i2c_stop_on_bus>:
 8016020:	6803      	ldr	r3, [r0, #0]
 8016022:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8016026:	6003      	str	r3, [r0, #0]
 8016028:	4770      	bx	lr

0801602a <i2c_data_transmit>:
 801602a:	6101      	str	r1, [r0, #16]
 801602c:	4770      	bx	lr

0801602e <i2c_data_receive>:
 801602e:	6900      	ldr	r0, [r0, #16]
 8016030:	b2c0      	uxtb	r0, r0
 8016032:	4770      	bx	lr

08016034 <i2c_flag_get>:
 8016034:	098b      	lsrs	r3, r1, #6
 8016036:	581a      	ldr	r2, [r3, r0]
 8016038:	2301      	movs	r3, #1
 801603a:	f001 011f 	and.w	r1, r1, #31
 801603e:	408b      	lsls	r3, r1
 8016040:	4213      	tst	r3, r2
 8016042:	bf14      	ite	ne
 8016044:	2001      	movne	r0, #1
 8016046:	2000      	moveq	r0, #0
 8016048:	4770      	bx	lr

0801604a <i2c_flag_clear>:
 801604a:	f240 5301 	movw	r3, #1281	; 0x501
 801604e:	4299      	cmp	r1, r3
 8016050:	b510      	push	{r4, lr}
 8016052:	d102      	bne.n	801605a <i2c_flag_clear+0x10>
 8016054:	6943      	ldr	r3, [r0, #20]
 8016056:	6983      	ldr	r3, [r0, #24]
 8016058:	bd10      	pop	{r4, pc}
 801605a:	2201      	movs	r2, #1
 801605c:	098c      	lsrs	r4, r1, #6
 801605e:	5823      	ldr	r3, [r4, r0]
 8016060:	f001 011f 	and.w	r1, r1, #31
 8016064:	408a      	lsls	r2, r1
 8016066:	ea23 0302 	bic.w	r3, r3, r2
 801606a:	5023      	str	r3, [r4, r0]
 801606c:	e7f4      	b.n	8016058 <i2c_flag_clear+0xe>

0801606e <i2s_init>:
 801606e:	b510      	push	{r4, lr}
 8016070:	69c4      	ldr	r4, [r0, #28]
 8016072:	f424 647b 	bic.w	r4, r4, #4016	; 0xfb0
 8016076:	f024 0408 	bic.w	r4, r4, #8
 801607a:	0424      	lsls	r4, r4, #16
 801607c:	0c24      	lsrs	r4, r4, #16
 801607e:	431c      	orrs	r4, r3
 8016080:	4314      	orrs	r4, r2
 8016082:	430c      	orrs	r4, r1
 8016084:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8016088:	61c4      	str	r4, [r0, #28]
 801608a:	bd10      	pop	{r4, pc}

0801608c <i2s_psc_config>:
 801608c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016090:	4698      	mov	r8, r3
 8016092:	2302      	movs	r3, #2
 8016094:	6203      	str	r3, [r0, #32]
 8016096:	4b26      	ldr	r3, [pc, #152]	; (8016130 <i2s_psc_config+0xa4>)
 8016098:	4617      	mov	r7, r2
 801609a:	4298      	cmp	r0, r3
 801609c:	bf0c      	ite	eq
 801609e:	f44f 3300 	moveq.w	r3, #131072	; 0x20000
 80160a2:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 80160a6:	4a23      	ldr	r2, [pc, #140]	; (8016134 <i2s_psc_config+0xa8>)
 80160a8:	4605      	mov	r5, r0
 80160aa:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80160ac:	460e      	mov	r6, r1
 80160ae:	4018      	ands	r0, r3
 80160b0:	d036      	beq.n	8016120 <i2s_psc_config+0x94>
 80160b2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80160b4:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80160b8:	1f99      	subs	r1, r3, #6
 80160ba:	2908      	cmp	r1, #8
 80160bc:	d82c      	bhi.n	8016118 <i2s_psc_config+0x8c>
 80160be:	3302      	adds	r3, #2
 80160c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80160c2:	481d      	ldr	r0, [pc, #116]	; (8016138 <i2s_psc_config+0xac>)
 80160c4:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80160c8:	3201      	adds	r2, #1
 80160ca:	fbb0 f0f2 	udiv	r0, r0, r2
 80160ce:	4358      	muls	r0, r3
 80160d0:	0040      	lsls	r0, r0, #1
 80160d2:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
 80160d6:	f04f 030a 	mov.w	r3, #10
 80160da:	d124      	bne.n	8016126 <i2s_psc_config+0x9a>
 80160dc:	0a04      	lsrs	r4, r0, #8
 80160de:	435c      	muls	r4, r3
 80160e0:	fbb4 f6f6 	udiv	r6, r4, r6
 80160e4:	230a      	movs	r3, #10
 80160e6:	3605      	adds	r6, #5
 80160e8:	fbb6 f6f3 	udiv	r6, r6, r3
 80160ec:	f006 0301 	and.w	r3, r6, #1
 80160f0:	0876      	lsrs	r6, r6, #1
 80160f2:	1eb2      	subs	r2, r6, #2
 80160f4:	2afd      	cmp	r2, #253	; 0xfd
 80160f6:	bf86      	itte	hi
 80160f8:	2300      	movhi	r3, #0
 80160fa:	2602      	movhi	r6, #2
 80160fc:	021b      	lslls	r3, r3, #8
 80160fe:	431e      	orrs	r6, r3
 8016100:	ea46 0608 	orr.w	r6, r6, r8
 8016104:	622e      	str	r6, [r5, #32]
 8016106:	69eb      	ldr	r3, [r5, #28]
 8016108:	f023 0307 	bic.w	r3, r3, #7
 801610c:	61eb      	str	r3, [r5, #28]
 801610e:	69eb      	ldr	r3, [r5, #28]
 8016110:	433b      	orrs	r3, r7
 8016112:	61eb      	str	r3, [r5, #28]
 8016114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016118:	2b0f      	cmp	r3, #15
 801611a:	bf08      	it	eq
 801611c:	2314      	moveq	r3, #20
 801611e:	e7cf      	b.n	80160c0 <i2s_psc_config+0x34>
 8016120:	f7fe ff6c 	bl	8014ffc <rcu_clock_freq_get>
 8016124:	e7d5      	b.n	80160d2 <i2s_psc_config+0x46>
 8016126:	b90f      	cbnz	r7, 801612c <i2s_psc_config+0xa0>
 8016128:	0944      	lsrs	r4, r0, #5
 801612a:	e7d8      	b.n	80160de <i2s_psc_config+0x52>
 801612c:	0984      	lsrs	r4, r0, #6
 801612e:	e7d6      	b.n	80160de <i2s_psc_config+0x52>
 8016130:	40003800 	andmi	r3, r0, r0, lsl #16
 8016134:	40021000 	andmi	r1, r2, r0
 8016138:	017d7840 	cmneq	sp, r0, asr #16

0801613c <i2s_enable>:
 801613c:	69c3      	ldr	r3, [r0, #28]
 801613e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8016142:	61c3      	str	r3, [r0, #28]
 8016144:	4770      	bx	lr

08016146 <i2s_disable>:
 8016146:	69c3      	ldr	r3, [r0, #28]
 8016148:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801614c:	61c3      	str	r3, [r0, #28]
 801614e:	4770      	bx	lr

08016150 <spi_dma_enable>:
 8016150:	6843      	ldr	r3, [r0, #4]
 8016152:	b919      	cbnz	r1, 801615c <spi_dma_enable+0xc>
 8016154:	f043 0302 	orr.w	r3, r3, #2
 8016158:	6043      	str	r3, [r0, #4]
 801615a:	4770      	bx	lr
 801615c:	f043 0301 	orr.w	r3, r3, #1
 8016160:	e7fa      	b.n	8016158 <spi_dma_enable+0x8>
	...

08016164 <mac_address_get(unsigned char*)>:
 8016164:	2102      	movs	r1, #2
 8016166:	4a07      	ldr	r2, [pc, #28]	; (8016184 <mac_address_get(unsigned char*)+0x20>)
 8016168:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 801616c:	f8d2 27ec 	ldr.w	r2, [r2, #2028]	; 0x7ec
 8016170:	7001      	strb	r1, [r0, #0]
 8016172:	7042      	strb	r2, [r0, #1]
 8016174:	0e1a      	lsrs	r2, r3, #24
 8016176:	7082      	strb	r2, [r0, #2]
 8016178:	0c1a      	lsrs	r2, r3, #16
 801617a:	70c2      	strb	r2, [r0, #3]
 801617c:	0a1a      	lsrs	r2, r3, #8
 801617e:	7102      	strb	r2, [r0, #4]
 8016180:	7143      	strb	r3, [r0, #5]
 8016182:	4770      	bx	lr
 8016184:	1ffff000 	svcne	0x00fff000

08016188 <__popcountsi2>:
 8016188:	0843      	lsrs	r3, r0, #1
 801618a:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 801618e:	1ac0      	subs	r0, r0, r3
 8016190:	0883      	lsrs	r3, r0, #2
 8016192:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8016196:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 801619a:	4418      	add	r0, r3
 801619c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80161a0:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 80161a4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80161a8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80161ac:	0e00      	lsrs	r0, r0, #24
 80161ae:	4770      	bx	lr

Disassembly of section .rodata:

080161b0 <vtable for DisplayHandler-0x9c>:
 80161b0:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80161b4:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 80161c0:	03020100 	movweq	r0, #8448	; 0x2100
 80161c4:	08070604 	stmdaeq	r7, {r2, r9, sl}
 80161c8:	00000009 	andeq	r0, r0, r9
 80161cc:	03020100 	movweq	r0, #8448	; 0x2100
 80161d0:	3a732504 	bcc	9cdf5e8 <__exidx_end+0x1cc723c>
 80161d4:	31007525 	tstcc	r0, r5, lsr #10
 80161d8:	35313a31 	ldrcc	r3, [r1, #-2609]!	; 0xfffff5cf
 80161dc:	0037343a 	eorseq	r3, r7, sl, lsr r4
 80161e0:	20636544 	rsbcs	r6, r3, r4, asr #10
 80161e4:	32203532 	eorcc	r3, r0, #209715200	; 0xc800000
 80161e8:	00323230 	eorseq	r3, r2, r0, lsr r2
 80161ec:	32335b1b 	eorscc	r5, r3, #27648	; 0x6c00
 80161f0:	7472416d 	ldrbtvc	r4, [r2], #-365	; 0xfffffe93
 80161f4:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
 80161f8:	50203420 	eorpl	r3, r0, r0, lsr #8
 80161fc:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 8016200:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 8016204:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 801603c <i2c_flag_get+0x8>
 8016208:	2072656c 	rsbscs	r6, r2, ip, ror #10
 801620c:	2078317b 	rsbscs	r3, r8, fp, ror r1
 8016210:	6e552034 	mrcvs	0, 2, r2, cr5, cr4, {1}
 8016214:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 8016218:	7d736573 	cfldr64vc	mvdx6, [r3, #-460]!	; 0xfffffe34
 801621c:	37335b1b 			; <UNDEFINED> instruction: 0x37335b1b
 8016220:	5f2e006d 	svcpl	0x002e006d
 8016224:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 8016228:	41006769 	tstmi	r0, r9, ror #14
 801622c:	4e2d7472 	mcrmi	4, 1, r7, cr13, cr2, {3}
 8016230:	34207465 	strtcc	r7, [r0], #-1125	; 0xfffffb9b
 8016234:	78695020 	stmdavc	r9!, {r5, ip, lr}^
 8016238:	31206c65 			; <UNDEFINED> instruction: 0x31206c65
 801623c:	3a732500 	bcc	9cdf644 <__exidx_end+0x1cc7298>
 8016240:	47206425 	strmi	r6, [r0, -r5, lsr #8]!
 8016244:	25206425 	strcs	r6, [r0, #-1061]!	; 0xfffffbdb
 8016248:	00000073 	andeq	r0, r0, r3, ror r0

0801624c <vtable for DisplayHandler>:
	...
 8016254:	08008247 	stmdaeq	r0, {r0, r1, r2, r6, r9, pc}
 8016258:	08008265 	stmdaeq	r0, {r0, r2, r5, r6, r9, pc}
 801625c:	0800829d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r9, pc}

08016260 <vtable for ArtNetTriggerHandler>:
	...
 8016268:	08008249 	stmdaeq	r0, {r0, r3, r6, r9, pc}
 801626c:	08008271 	stmdaeq	r0, {r0, r4, r5, r6, r9, pc}
 8016270:	08008509 	stmdaeq	r0, {r0, r3, r8, sl, pc}

08016274 <vtable for PixelDmxStartStop>:
	...
 801627c:	0800824b 	stmdaeq	r0, {r0, r1, r3, r6, r9, pc}
 8016280:	0800827d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r9, pc}
 8016284:	0800824d 	stmdaeq	r0, {r0, r2, r3, r6, r9, pc}
 8016288:	08008259 	stmdaeq	r0, {r0, r3, r4, r6, r9, pc}

0801628c <CSWTCH.67>:
 801628c:	444e4f4f 	strbmi	r4, [lr], #-3919	; 0xfffff0b1
 8016290:	 	strtcc	r3, [lr], #-326	; 0xfffffeba

08016291 <SOFTWARE_VERSION>:
 8016291:	00342e31 	eorseq	r2, r4, r1, lsr lr

08016295 <gamma10_0>:
 8016295:	03020100 	movweq	r0, #8448	; 0x2100
 8016299:	07060504 	streq	r0, [r6, -r4, lsl #10]
 801629d:	0b0a0908 	bleq	82986c5 <__exidx_end+0x280319>
 80162a1:	0f0e0d0c 	svceq	0x000e0d0c
 80162a5:	13121110 	tstne	r2, #16, 2
 80162a9:	17161514 			; <UNDEFINED> instruction: 0x17161514
 80162ad:	1b1a1918 	blne	869c715 <__exidx_end+0x684369>
 80162b1:	1f1e1d1c 	svcne	0x001e1d1c
 80162b5:	23222120 			; <UNDEFINED> instruction: 0x23222120
 80162b9:	27262524 	strcs	r2, [r6, -r4, lsr #10]!
 80162bd:	2b2a2928 	blcs	8aa0765 <__exidx_end+0xa883b9>
 80162c1:	2f2e2d2c 	svccs	0x002e2d2c
 80162c5:	33323130 	teqcc	r2, #48, 2
 80162c9:	37363534 			; <UNDEFINED> instruction: 0x37363534
 80162cd:	3b3a3938 	blcc	8ea47b5 <__exidx_end+0xe8c409>
 80162d1:	3f3e3d3c 	svccc	0x003e3d3c
 80162d5:	43424140 	movtmi	r4, #8512	; 0x2140
 80162d9:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 80162dd:	4b4a4948 	blmi	92a8805 <__exidx_end+0x1290459>
 80162e1:	4f4e4d4c 	svcmi	0x004e4d4c
 80162e5:	53525150 	cmppl	r2, #80, 2
 80162e9:	57565554 			; <UNDEFINED> instruction: 0x57565554
 80162ed:	5b5a5958 	blpl	96ac855 <__exidx_end+0x16944a9>
 80162f1:	5f5e5d5c 	svcpl	0x005e5d5c
 80162f5:	63626160 	cmnvs	r2, #96, 2
 80162f9:	67666564 	strbvs	r6, [r6, -r4, ror #10]!
 80162fd:	6b6a6968 	blvs	9ab08a5 <__exidx_end+0x1a984f9>
 8016301:	6f6e6d6c 	svcvs	0x006e6d6c
 8016305:	73727170 	cmnvc	r2, #112, 2
 8016309:	77767574 			; <UNDEFINED> instruction: 0x77767574
 801630d:	7b7a7978 	blvc	9eb48f5 <__exidx_end+0x1e9c549>
 8016311:	7f7e7d7c 	svcvc	0x007e7d7c
 8016315:	83828180 	orrhi	r8, r2, #128, 2
 8016319:	87868584 	strhi	r8, [r6, r4, lsl #11]
 801631d:	8b8a8988 	blhi	62b8945 <__stack_size+0x62b6945>
 8016321:	8f8e8d8c 	svchi	0x008e8d8c
 8016325:	93929190 	orrsls	r9, r2, #144, 2	; 0x24
 8016329:	97969594 			; <UNDEFINED> instruction: 0x97969594
 801632d:	9b9a9998 	blls	66bc995 <__stack_size+0x66ba995>
 8016331:	9f9e9d9c 	svcls	0x009e9d9c
 8016335:	a3a2a1a0 			; <UNDEFINED> instruction: 0xa3a2a1a0
 8016339:	a7a6a5a4 	strge	sl, [r6, r4, lsr #11]!
 801633d:	abaaa9a8 	blge	6ac09e5 <__stack_size+0x6abe9e5>
 8016341:	afaeadac 	svcge	0x00aeadac
 8016345:	b3b2b1b0 			; <UNDEFINED> instruction: 0xb3b2b1b0
 8016349:	b7b6b5b4 			; <UNDEFINED> instruction: 0xb7b6b5b4
 801634d:	bbbab9b8 	bllt	6ec4a35 <__stack_size+0x6ec2a35>
 8016351:	bfbebdbc 	svclt	0x00bebdbc
 8016355:	c3c2c1c0 	bicgt	ip, r2, #192, 2	; 0x30
 8016359:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
 801635d:	cbcac9c8 	blgt	72c8a85 <__stack_size+0x72c6a85>
 8016361:	cfcecdcc 	svcgt	0x00cecdcc
 8016365:	d3d2d1d0 	bicsle	sp, r2, #208, 2	; 0x34
 8016369:	d7d6d5d4 			; <UNDEFINED> instruction: 0xd7d6d5d4
 801636d:	dbdad9d8 	blle	76ccad5 <__stack_size+0x76caad5>
 8016371:	dfdedddc 	svcle	0x00dedddc
 8016375:	e3e2e1e0 	mvn	lr, #224, 2	; 0x38
 8016379:	e7e6e5e4 	strb	lr, [r6, r4, ror #11]!
 801637d:	ebeae9e8 	bl	7ad0b25 <__stack_size+0x7aceb25>
 8016381:	efeeedec 	svc	0x00eeedec
 8016385:	f3f2f1f0 	vsra.u64	<illegal reg q15.5>, q8, #14
 8016389:	f7f6f5f4 			; <UNDEFINED> instruction: 0xf7f6f5f4
 801638d:	fbfaf9f8 	blx	7ed4b77 <__stack_size+0x7ed2b77>
 8016391:	fffefdfc 			; <UNDEFINED> instruction: 0xfffefdfc
 8016395:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016399:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801639d:	2c64252e 	cfstr64cs	mvdx2, [r4], #-184	; 0xffffff48
 80163a1:	252c7325 	strcs	r7, [ip, #-805]!	; 0xfffffcdb
 80163a5:	64252c73 	strtvs	r2, [r5], #-3187	; 0xfffff38d
 80163a9:	0a73252c 	beq	9cdf861 <__exidx_end+0x1cc74b5>
 80163ad:	2e642500 	cdpcs	5, 6, cr2, cr4, cr0, {0}
 80163b1:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80163b5:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80163b9:	2c73252c 	cfldr64cs	mvdx2, [r3], #-176	; 0xffffff50
 80163bd:	252c7325 	strcs	r7, [ip, #-805]!	; 0xfffffcdb
 80163c1:	4f000a64 	svcmi	0x00000a64
 80163c5:	664f006e 	strbvs	r0, [pc], -lr, rrx
 80163c9:	69640066 	stmdbvs	r4!, {r1, r2, r5, r6}^
 80163cd:	616c7073 	smcvs	50947	; 0xc703
 80163d1:	73253a79 			; <UNDEFINED> instruction: 0x73253a79
 80163d5:	6674000a 	ldrbtvs	r0, [r4], -sl
 80163d9:	253a7074 	ldrcs	r7, [sl, #-116]!	; 0xffffff8c
 80163dd:	76000a73 			; <UNDEFINED> instruction: 0x76000a73
 80163e1:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 80163e5:	253a6e6f 	ldrcs	r6, [sl, #-3695]!	; 0xfffff191
 80163e9:	70750073 	rsbsvc	r0, r5, r3, ror r0
 80163ed:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 80163f1:	7525203a 	strvc	r2, [r5, #-58]!	; 0xffffffc6
 80163f5:	54000a73 	strpl	r0, [r0], #-2675	; 0xfffff58d
 80163f9:	20505446 	subscs	r5, r0, r6, asr #8
 80163fd:	20206e4f 	eorcs	r6, r0, pc, asr #28
 8016401:	6265525b 	rsbvs	r5, r5, #-1342177275	; 0xb0000005
 8016405:	5d746f6f 	ldclpl	15, cr6, [r4, #-444]!	; 0xfffffe44
 8016409:	54465400 	strbpl	r5, [r6], #-1024	; 0xfffffc00
 801640d:	664f2050 			; <UNDEFINED> instruction: 0x664f2050
 8016411:	525b2066 	subspl	r2, fp, #102	; 0x66
 8016415:	6f6f6265 	svcvs	0x006f6265
 8016419:	00205d74 	eoreq	r5, r0, r4, ror sp
 801641d:	4f525245 	svcmi	0x00525245
 8016421:	673f2352 			; <UNDEFINED> instruction: 0x673f2352
 8016425:	000a7465 	andeq	r7, sl, r5, ror #8
 8016429:	70746674 	rsbsvc	r6, r4, r4, ror r6
 801642d:	69640023 	stmdbvs	r4!, {r0, r1, r5}^
 8016431:	616c7073 	smcvs	50947	; 0xc703
 8016435:	45002379 	strmi	r2, [r0, #-889]	; 0xfffffc87
 8016439:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
 801643d:	000a2123 	andeq	r2, sl, r3, lsr #2
 8016441:	4f525245 	svcmi	0x00525245
 8016445:	0a3f2352 	beq	8fdf195 <__exidx_end+0xfc6de9>
 8016449:	62657200 	rsbvs	r7, r5, #0, 4
 801644d:	23746f6f 	cmncs	r4, #444	; 0x1bc
 8016451:	696c0023 	stmdbvs	ip!, {r0, r1, r5}^
 8016455:	00237473 	eoreq	r7, r3, r3, ror r4
 8016459:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 801645d:	75002a23 	strvc	r2, [r0, #-2595]	; 0xfffff5dd
 8016461:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 8016465:	76002365 	strvc	r2, [r0], -r5, ror #6
 8016469:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801646d:	00236e6f 	eoreq	r6, r3, pc, ror #28
 8016471:	23746567 	cmncs	r4, #432013312	; 0x19c00000
 8016475:	63616600 	cmnvs	r1, #0, 12
 8016479:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801647d:	 	tstmi	r0, r3, lsr #6

08016480 <s_Node>:
 8016480:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016484:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 8016490:	41730000 	cmnmi	r3, r0
 8016494:	45204e43 	strmi	r4, [r0, #-3651]!	; 0xfffff1bd
 8016498:	31332e31 	teqcc	r3, r1, lsr lr
	...
 80164a4:	2043534f 	subcs	r5, r3, pc, asr #6
 80164a8:	76726553 			; <UNDEFINED> instruction: 0x76726553
 80164ac:	00007265 	andeq	r7, r0, r5, ror #4
 80164b0:	00000000 	andeq	r0, r0, r0
 80164b4:	544c0000 	strbpl	r0, [ip], #-0
 80164b8:	00000043 	andeq	r0, r0, r3, asr #32
	...
 80164c8:	2043534f 	subcs	r5, r3, pc, asr #6
 80164cc:	65696c43 	strbvs	r6, [r9, #-3139]!	; 0xfffff3bd
 80164d0:	0000746e 	andeq	r7, r0, lr, ror #8
 80164d4:	00000000 	andeq	r0, r0, r0
 80164d8:	44520000 	ldrbmi	r0, [r2], #-0
 80164dc:	74654e4d 	strbtvc	r4, [r5], #-3661	; 0xfffff1b3
 80164e0:	524c4c20 	subpl	r4, ip, #32, 24	; 0x2000
 80164e4:	6e4f2050 	mcrvs	0, 2, r2, cr15, cr0, {2}
 80164e8:	0000796c 	andeq	r7, r0, ip, ror #18
 80164ec:	776f6853 			; <UNDEFINED> instruction: 0x776f6853
 80164f0:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
	...
 80164fc:	494d0000 	stmdbmi	sp, {}^	; <UNPREDICTABLE>
 8016500:	00004944 	andeq	r4, r0, r4, asr #18
	...
 8016510:	00504444 	subseq	r4, r0, r4, asr #8
	...
 8016520:	69500000 	ldmdbvs	r0, {}^	; <UNPREDICTABLE>
 8016524:	506c6578 	rsbpl	r6, ip, r8, ror r5
 8016528:	65687375 	strbvs	r7, [r8, #-885]!	; 0xfffffc8b
 801652c:	00000072 	andeq	r0, r0, r2, ror r0
 8016530:	00000000 	andeq	r0, r0, r0
 8016534:	65646f4e 	strbvs	r6, [r4, #-3918]!	; 0xfffff0b2
	...

08016546 <s_Output>:
 8016546:	00584d44 	subseq	r4, r8, r4, asr #26
	...
 8016552:	004d4452 	subeq	r4, sp, r2, asr r4
	...
 801655e:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
 8016562:	00726f74 	rsbseq	r6, r2, r4, ror pc
 8016566:	00000000 	andeq	r0, r0, r0
 801656a:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 801656e:	0000006c 	andeq	r0, r0, ip, rrx
 8016572:	00000000 	andeq	r0, r0, r0
 8016576:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
 801657a:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 801657e:	00000000 	andeq	r0, r0, r0
 8016582:	0043534f 	subeq	r5, r3, pc, asr #6
	...
 801658e:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 8016592:	00006769 	andeq	r6, r0, r9, ror #14
 8016596:	00000000 	andeq	r0, r0, r0
 801659a:	70657453 	rsbvc	r7, r5, r3, asr r4
 801659e:	00726570 	rsbseq	r6, r2, r0, ror r5
 80165a2:	00000000 	andeq	r0, r0, r0
 80165a6:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
 80165aa:	00007265 	andeq	r7, r0, r5, ror #4
 80165ae:	00000000 	andeq	r0, r0, r0
 80165b2:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80165b6:	0074654e 	rsbseq	r6, r4, lr, asr #10
 80165ba:	00000000 	andeq	r0, r0, r0
 80165be:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
 80165c2:	00006c61 	andeq	r6, r0, r1, ror #24
 80165c6:	00000000 	andeq	r0, r0, r0
 80165ca:	20424752 	subcs	r4, r2, r2, asr r7
 80165ce:	656e6150 	strbvs	r6, [lr, #-336]!	; 0xfffffeb0
 80165d2:	0000006c 	andeq	r0, r0, ip, rrx
	...

080165d8 <RemoteConfig::s_GET>:
 80165d8:	08009e3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r9, sl, fp, ip, pc}
 80165dc:	00000000 	andeq	r0, r0, r0
 80165e0:	0801644a 	stmdaeq	r1, {r1, r3, r6, sl, sp, lr}
 80165e4:	00000008 	andeq	r0, r0, r8
 80165e8:	0800930d 	stmdaeq	r0, {r0, r2, r3, r8, r9, ip, pc}
 80165ec:	00000000 	andeq	r0, r0, r0
 80165f0:	08016453 	stmdaeq	r1, {r0, r1, r4, r6, sl, sp, lr}
 80165f4:	00000005 	andeq	r0, r0, r5
 80165f8:	0800930d 	stmdaeq	r0, {r0, r2, r3, r8, r9, ip, pc}
 80165fc:	00000000 	andeq	r0, r0, r0
 8016600:	08016459 	stmdaeq	r1, {r0, r3, r4, r6, sl, sp, lr}
 8016604:	00000006 	andeq	r0, r0, r6
 8016608:	080094c1 	stmdaeq	r0, {r0, r6, r7, sl, ip, pc}
 801660c:	00000000 	andeq	r0, r0, r0
 8016610:	08016460 	stmdaeq	r1, {r5, r6, sl, sp, lr}
 8016614:	00000007 	andeq	r0, r0, r7
 8016618:	08009481 	stmdaeq	r0, {r0, r7, sl, ip, pc}
 801661c:	00000000 	andeq	r0, r0, r0
 8016620:	08016468 	stmdaeq	r1, {r3, r5, r6, sl, sp, lr}
 8016624:	00000008 	andeq	r0, r0, r8
 8016628:	080093dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, r9, ip, pc}
 801662c:	00000000 	andeq	r0, r0, r0
 8016630:	0801642f 	stmdaeq	r1, {r0, r1, r2, r3, r5, sl, sp, lr}
 8016634:	00000008 	andeq	r0, r0, r8
 8016638:	08009765 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, sl, ip, pc}
 801663c:	00000000 	andeq	r0, r0, r0
 8016640:	08016471 	stmdaeq	r1, {r0, r4, r5, r6, sl, sp, lr}
 8016644:	00010004 	andeq	r0, r1, r4
 8016648:	08009431 	stmdaeq	r0, {r0, r4, r5, sl, ip, pc}
 801664c:	00000000 	andeq	r0, r0, r0
 8016650:	08016429 	stmdaeq	r1, {r0, r3, r5, sl, sp, lr}
 8016654:	00000005 	andeq	r0, r0, r5
 8016658:	08009b2d 	stmdaeq	r0, {r0, r2, r3, r5, r8, r9, fp, ip, pc}
 801665c:	00000000 	andeq	r0, r0, r0
 8016660:	08016476 	stmdaeq	r1, {r1, r2, r4, r5, r6, sl, sp, lr}
 8016664:	00000009 	andeq	r0, r0, r9

08016668 <RemoteConfig::s_SET>:
 8016668:	0800956d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl, ip, pc}
 801666c:	00000000 	andeq	r0, r0, r0
 8016670:	08016429 	stmdaeq	r1, {r0, r3, r5, sl, sp, lr}
 8016674:	00010005 	andeq	r0, r1, r5
 8016678:	08009545 	stmdaeq	r0, {r0, r2, r6, r8, sl, ip, pc}
 801667c:	00000000 	andeq	r0, r0, r0
 8016680:	0801642f 	stmdaeq	r1, {r0, r1, r2, r3, r5, sl, sp, lr}
 8016684:	00010008 	andeq	r0, r1, r8
 8016688:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 801668c:	2c64253a 	cfstr64cs	mvdx2, [r4], #-232	; 0xffffff18
 8016690:	73252300 			; <UNDEFINED> instruction: 0x73252300
 8016694:	0a64253d 	beq	991fb90 <__exidx_end+0x19077e4>
 8016698:	73252200 			; <UNDEFINED> instruction: 0x73252200
 801669c:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 80166a0:	002c2273 	eoreq	r2, ip, r3, ror r2
 80166a4:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
 80166a8:	000a7325 	andeq	r7, sl, r5, lsr #6
 80166ac:	6f626552 	svcvs	0x00626552
 80166b0:	6e69746f 	cdpvs	4, 6, cr7, cr9, cr15, {3}
 80166b4:	2e2e2067 	cdpcs	0, 2, cr2, cr14, cr7, {3}
 80166b8:	52000a2e 	andpl	r0, r0, #188416	; 0x2e000
 80166bc:	6f6f6265 	svcvs	0x006f6265
 80166c0:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 80166c4:	2e2e2e20 	cdpcs	14, 2, cr2, cr14, cr0, {1}
 80166c8:	6f637200 	svcvs	0x00637200
 80166cc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 80166d0:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 80166d4:	74656e00 	strbtvc	r6, [r5], #-3584	; 0xfffff200
 80166d8:	6b726f77 	blvs	9cb24bc <__exidx_end+0x1c9a110>
 80166dc:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 80166e0:	73696400 	cmnvc	r9, #0, 8
 80166e4:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 80166e8:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 80166ec:	74726100 	ldrbtvc	r6, [r2], #-256	; 0xffffff00
 80166f0:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 80166f4:	00747874 	rsbseq	r7, r4, r4, ror r8
 80166f8:	31333165 	teqcc	r3, r5, ror #2
 80166fc:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8016700:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
 8016704:	73656369 	cmnvc	r5, #-1543503871	; 0xa4000001
 8016708:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 801670c:	00000000 	andeq	r0, r0, r0

08016710 <RemoteConfig::s_TXT>:
 8016710:	0800976d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, r9, sl, ip, pc}
 8016714:	00000000 	andeq	r0, r0, r0
 8016718:	08009a35 	stmdaeq	r0, {r0, r2, r4, r5, r9, fp, ip, pc}
 801671c:	00000000 	andeq	r0, r0, r0
 8016720:	080166c9 	stmdaeq	r1, {r0, r3, r6, r7, r9, sl, sp, lr}
 8016724:	0000000b 	andeq	r0, r0, fp
 8016728:	0000000c 	andeq	r0, r0, ip
 801672c:	08009799 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, sl, ip, pc}
 8016730:	00000000 	andeq	r0, r0, r0
 8016734:	08009a65 	stmdaeq	r0, {r0, r2, r5, r6, r9, fp, ip, pc}
 8016738:	00000000 	andeq	r0, r0, r0
 801673c:	080166d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r9, sl, sp, lr}
 8016740:	0000000b 	andeq	r0, r0, fp
 8016744:	00000000 	andeq	r0, r0, r0
 8016748:	08009849 	stmdaeq	r0, {r0, r3, r6, fp, ip, pc}
 801674c:	00000000 	andeq	r0, r0, r0
 8016750:	08009b05 	stmdaeq	r0, {r0, r2, r8, r9, fp, ip, pc}
 8016754:	00000000 	andeq	r0, r0, r0
 8016758:	080166e1 	stmdaeq	r1, {r0, r5, r6, r7, r9, sl, sp, lr}
 801675c:	0000000b 	andeq	r0, r0, fp
 8016760:	0000000f 	andeq	r0, r0, pc
 8016764:	080097c5 	stmdaeq	r0, {r0, r2, r6, r7, r8, r9, sl, ip, pc}
 8016768:	00000000 	andeq	r0, r0, r0
 801676c:	08009a8d 	stmdaeq	r0, {r0, r2, r3, r7, r9, fp, ip, pc}
 8016770:	00000000 	andeq	r0, r0, r0
 8016774:	080166ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r9, sl, sp, lr}
 8016778:	0000000a 	andeq	r0, r0, sl
 801677c:	00000001 	andeq	r0, r0, r1
 8016780:	080097f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, r9, sl, ip, pc}
 8016784:	00000000 	andeq	r0, r0, r0
 8016788:	08009ab5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r9, fp, ip, pc}
 801678c:	00000000 	andeq	r0, r0, r0
 8016790:	080166f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r9, sl, sp, lr}
 8016794:	00000008 	andeq	r0, r0, r8
 8016798:	00000004 	andeq	r0, r0, r4
 801679c:	0800981d 	stmdaeq	r0, {r0, r2, r3, r4, fp, ip, pc}
 80167a0:	00000000 	andeq	r0, r0, r0
 80167a4:	08009add 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r9, fp, ip, pc}
 80167a8:	00000000 	andeq	r0, r0, r0
 80167ac:	08016701 	stmdaeq	r1, {r0, r8, r9, sl, sp, lr}
 80167b0:	0000000b 	andeq	r0, r0, fp
 80167b4:	00000003 	andeq	r0, r0, r3

080167b8 <RemoteConfigConst::PARAMS_DISABLE>:
 80167b8:	61736964 	cmnvs	r3, r4, ror #18
 80167bc:	00656c62 	rsbeq	r6, r5, r2, ror #24

080167c0 <RemoteConfigConst::PARAMS_FILE_NAME>:
 80167c0:	6e6f6372 	mcrvs	3, 3, r6, cr15, cr2, {3}
 80167c4:	2e676966 	vnmulcs.f16	s13, s14, s13	; <UNPREDICTABLE>
 80167c8:	00747874 	rsbseq	r7, r4, r4, ror r8

080167cc <RemoteConfigConst::PARAMS_DISPLAY_NAME>:
 80167cc:	70736964 	rsbsvc	r6, r3, r4, ror #18
 80167d0:	5f79616c 	svcpl	0x0079616c
 80167d4:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

080167d9 <RemoteConfigConst::PARAMS_DISABLE_WRITE>:
 80167d9:	61736964 	cmnvs	r3, r4, ror #18
 80167dd:	5f656c62 	svcpl	0x00656c62
 80167e1:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 80167e5:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

080167e7 <RemoteConfigConst::PARAMS_ENABLE_REBOOT>:
 80167e7:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 80167eb:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 80167ef:	6f6f6265 	svcvs	0x006f6265
 80167f3:	 	mcrvs	0, 3, r0, cr5, cr4, {3}

080167f5 <RemoteConfigConst::PARAMS_ENABLE_UPTIME>:
 80167f5:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 80167f9:	755f656c 	ldrbvc	r6, [pc, #-1388]	; 8016295 <gamma10_0>
 80167fd:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 8016801:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

08016803 <RemoteConfigConst::PARAMS_ENABLE_FACTORY>:
 8016803:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8016807:	665f656c 	ldrbvs	r6, [pc], -ip, ror #10
 801680b:	6f746361 	svcvs	0x00746361
 801680f:	20007972 	andcs	r7, r0, r2, ror r9
 8016813:	696e5520 	stmdbvs	lr!, {r5, r8, sl, ip, lr}^
 8016817:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801681b:	61207365 			; <UNDEFINED> instruction: 0x61207365
 801681f:	6d206572 	cfstr32vs	mvfx6, [r0, #-456]!	; 0xfffffe38
 8016823:	70707061 	rsbsvc	r7, r0, r1, rrx
 8016827:	2b206465 	blcs	882f9c3 <__exidx_end+0x817617>
 801682b:	00000a31 	andeq	r0, r0, r1, lsr sl
	...

08016830 <vtable for ArtNet4Node>:
	...
 8016838:	08009fe5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 801683c:	0800a005 	stmdaeq	r0, {r0, r2, sp, pc}
 8016840:	08009f6f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, pc}
 8016844:	0800a051 	stmdaeq	r0, {r0, r4, r6, sp, pc}
 8016848:	0800a017 	stmdaeq	r0, {r0, r1, r2, r4, sp, pc}
 801684c:	08009f5f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, pc}
 8016850:	08009fcd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, r9, sl, fp, ip, pc}

08016854 <ArtNetMsgConst::START>:
 8016854:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
 8016858:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 801685c:	74724120 	ldrbtvc	r4, [r2], #-288	; 0xfffffee0
 8016860:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
	...

08016865 <ArtNetMsgConst::PARAMS>:
 8016865:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 8016869:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 801686d:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8016871:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016875:	0074654e 	rsbseq	r6, r4, lr, asr #10

08016879 <ArtNetMsgConst::STARTED>:
 8016879:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801687d:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8016881:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8016885:	00646574 	rsbeq	r6, r4, r4, ror r5
 8016889:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 801688d:	37303146 	ldrcc	r3, [r0, -r6, asr #2]!
 8016891:	25004352 	strcs	r4, [r0, #-850]	; 0xfffffcae
 8016895:	73252073 			; <UNDEFINED> instruction: 0x73252073
 8016899:	20642520 	rsbcs	r2, r4, r0, lsr #10
 801689d:	68007325 	stmdavs	r0, {r0, r2, r5, r8, r9, ip, sp, lr}
 80168a1:	73707474 	cmnvc	r0, #116, 8	; 0x74000000
 80168a5:	672f2f3a 			; <UNDEFINED> instruction: 0x672f2f3a
 80168a9:	2d323364 	ldccs	3, cr3, [r2, #-400]!	; 0xfffffe70
 80168ad:	2e786d64 	cdpcs	13, 7, cr6, cr8, cr4, {3}
 80168b1:	0067726f 	rsbeq	r7, r7, pc, ror #4
 80168b5:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
 80168b9:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
	...

080168be <artnet::NODE_ID>:
 80168be:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80168c2:	0074654e 	rsbseq	r6, r4, lr, asr #10

080168c6 <defaults::SHORT_NAME>:
 80168c6:	20567641 	subscs	r7, r6, r1, asr #12
 80168ca:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80168ce:	2074654e 	rsbscs	r6, r4, lr, asr #10
 80168d2:	65646f4e 	strbvs	r6, [r4, #-3918]!	; 0xfffff0b2
 80168d6:	34302500 	ldrtcc	r2, [r0], #-1280	; 0xfffffb00
 80168da:	255b2078 	ldrbcs	r2, [fp, #-120]	; 0xffffff88
 80168de:	5d643430 	cfstrdpl	mvd3, [r4, #-192]!	; 0xffffff40
 80168e2:	20732520 	rsbscs	r2, r3, r0, lsr #10
 80168e6:	00567641 	subseq	r7, r6, r1, asr #12

080168ea <artnet::NODE_ID>:
 80168ea:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80168ee:	0074654e 	rsbseq	r6, r4, lr, asr #10

080168f2 <artnet::NODE_ID>:
 80168f2:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80168f6:	0074654e 	rsbseq	r6, r4, lr, asr #10

080168fa <artnet::NODE_ID>:
 80168fa:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80168fe:	0074654e 	rsbseq	r6, r4, lr, asr #10
 8016902:	00505448 	subseq	r5, r0, r8, asr #8
 8016906:	0050544c 	subseq	r5, r0, ip, asr #8
 801690a:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801690e:	0074654e 	rsbseq	r6, r4, lr, asr #10
 8016912:	4e434173 	mcrmi	1, 2, r4, cr3, cr3, {3}
 8016916:	646f4e00 	strbtvs	r4, [pc], #-3584	; 801691e <artnet::NODE_ID+0x24>
 801691a:	64252065 	strtvs	r2, [r5], #-101	; 0xffffff9b
 801691e:	75255b20 	strvc	r5, [r5, #-2848]!	; 0xfffff4e0
 8016922:	20000a5d 	andcs	r0, r0, sp, asr sl
 8016926:	6d726946 			; <UNDEFINED> instruction: 0x6d726946
 801692a:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0xfffffe89
 801692e:	3a202020 	bcc	881e9b6 <__exidx_end+0x80660a>
 8016932:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 8016936:	000a6425 	andeq	r6, sl, r5, lsr #8
 801693a:	6f685320 	svcvs	0x00685320
 801693e:	6e207472 	mcrvs	4, 1, r7, cr0, cr2, {3}
 8016942:	20656d61 	rsbcs	r6, r5, r1, ror #26
 8016946:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 801694a:	4c20000a 	stcmi	0, cr0, [r0], #-40	; 0xffffffd8
 801694e:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 8016952:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 8016956:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801695a:	000a7325 	andeq	r7, sl, r5, lsr #6
 801695e:	74754f20 	ldrbtvc	r4, [r5], #-3872	; 0xfffff0e0
 8016962:	0a747570 	beq	9d33f2a <__exidx_end+0x1d1bb7e>
 8016966:	50202000 	eorpl	r2, r0, r0
 801696a:	2074726f 	rsbscs	r7, r4, pc, ror #4
 801696e:	20643225 	rsbcs	r3, r4, r5, lsr #4
 8016972:	20753425 	rsbscs	r3, r5, r5, lsr #8
 8016976:	5d73255b 	cfldr64pl	mvdx2, [r3, #-364]!	; 0xfffffe94
 801697a:	257b2000 	ldrbcs	r2, [fp, #-0]!
 801697e:	000a7d73 	andeq	r7, sl, r3, ror sp
 8016982:	706e4920 	rsbvc	r4, lr, r0, lsr #18
 8016986:	000a7475 	andeq	r7, sl, r5, ror r4
 801698a:	6f502020 	svcvs	0x00502020
 801698e:	25207472 	strcs	r7, [r0, #-1138]!	; 0xfffffb8e
 8016992:	25206432 	strcs	r6, [r0, #-1074]!	; 0xfffffbce
 8016996:	2d207534 	cfstr32cs	mvfx7, [r0, #-208]!	; 0xffffff30
 801699a:	6425203e 	strtvs	r2, [r5], #-62	; 0xffffffc2
 801699e:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 80169a2:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80169a6:	68000a64 	stmdavs	r0, {r2, r5, r6, r9, fp}
 80169aa:	00646c6f 	rsbeq	r6, r4, pc, ror #24
 80169ae:	0066666f 	rsbeq	r6, r6, pc, ror #12
 80169b2:	70006e6f 	andvc	r6, r0, pc, ror #28
 80169b6:	6279616c 	rsbsvs	r6, r9, #108, 2
 80169ba:	006b6361 	rsbeq	r6, fp, r1, ror #6
 80169be:	6e636173 	mcrvs	1, 3, r6, cr3, cr3, {3}
 80169c2:	706e6900 	rsbvc	r6, lr, r0, lsl #18
 80169c6:	6f007475 	svcvs	0x00007475
 80169ca:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 80169ce:	69640074 	stmdbvs	r4!, {r2, r4, r5, r6}^
 80169d2:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
 80169d6:	746c0065 	strbtvc	r0, [ip], #-101	; 0xffffff9b
 80169da:	74680070 	strbtvc	r0, [r8], #-112	; 0xffffff90
 80169de:	72610070 	rsbvc	r0, r1, #112	; 0x70
 80169e2:	74656e74 	strbtvc	r6, [r5], #-3700	; 0xfffff18c
 80169e6:	74724100 	ldrbtvc	r4, [r2], #-256	; 0xffffff00
 80169ea:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
 80169ee:	00003420 	andeq	r3, r0, r0, lsr #8
	...

080169f4 <CSWTCH.95>:
 80169f4:	080169a9 	stmdaeq	r1, {r0, r3, r5, r7, r8, fp, sp, lr}
 80169f8:	080169ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, fp, sp, lr}
 80169fc:	080169b2 	stmdaeq	r1, {r1, r4, r5, r7, r8, fp, sp, lr}
 8016a00:	080169b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, fp, sp, lr}

08016a04 <ArtNetParamsConst::ENABLE_RDM>:
 8016a04:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8016a08:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 8016a0c:	 	stcvs	13, cr6, [r0, #-400]	; 0xfffffe70

08016a0f <ArtNetParamsConst::MAP_UNIVERSE0>:
 8016a0f:	5f70616d 	svcpl	0x0070616d
 8016a13:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8016a17:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8016a1b:	 	rsbsvc	r0, r0, #48	; 0x30

08016a1d <ArtNetParamsConst::PROTOCOL_PORT>:
 8016a1d:	746f7270 	strbtvc	r7, [pc], #-624	; 8016a25 <ArtNetParamsConst::PROTOCOL_PORT+0x8>
 8016a21:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 801686c <ArtNetMsgConst::PARAMS+0x7>
 8016a25:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016a29:	00615f74 	rsbeq	r5, r1, r4, ror pc
 8016a2d:	746f7270 	strbtvc	r7, [pc], #-624	; 8016a35 <ArtNetParamsConst::PROTOCOL_PORT+0x18>
 8016a31:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 801687c <ArtNetMsgConst::STARTED+0x3>
 8016a35:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016a39:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8016a3d:	746f7270 	strbtvc	r7, [pc], #-624	; 8016a45 <ArtNetParamsConst::PROTOCOL_PORT+0x28>
 8016a41:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 801688c <ArtNetMsgConst::STARTED+0x13>
 8016a45:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016a49:	00635f74 	rsbeq	r5, r3, r4, ror pc
 8016a4d:	746f7270 	strbtvc	r7, [pc], #-624	; 8016a55 <ArtNetParamsConst::PROTOCOL_PORT+0x38>
 8016a51:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 801689c <ArtNetMsgConst::STARTED+0x23>
 8016a55:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016a59:	00645f74 	rsbeq	r5, r4, r4, ror pc

08016a5d <ArtNetParamsConst::NODE_LONG_NAME>:
 8016a5d:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 8016a61:	6d616e5f 	stclvs	14, cr6, [r1, #-380]!	; 0xfffffe84
 8016a65:	 	ldmdavs	r3!, {r0, r2, r5, r6}^

08016a67 <ArtNetParamsConst::NODE_SHORT_NAME>:
 8016a67:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 8016a6b:	616e5f74 	smcvs	58868	; 0xe5f4
 8016a6f:	 	andvc	r6, r0, #457179136	; 0x1b400000

08016a72 <ArtNetParamsConst::RDM_ENABLE_PORT>:
 8016a72:	5f6d6472 	svcpl	0x006d6472
 8016a76:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8016a7a:	705f656c 	subsvc	r6, pc, ip, ror #10
 8016a7e:	5f74726f 	svcpl	0x0074726f
 8016a82:	64720061 	ldrbtvs	r0, [r2], #-97	; 0xffffff9f
 8016a86:	6e655f6d 	cdpvs	15, 6, cr5, cr5, cr13, {3}
 8016a8a:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8016a8e:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016a92:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8016a96:	5f6d6472 	svcpl	0x006d6472
 8016a9a:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8016a9e:	705f656c 	subsvc	r6, pc, ip, ror #10
 8016aa2:	5f74726f 	svcpl	0x0074726f
 8016aa6:	64720063 	ldrbtvs	r0, [r2], #-99	; 0xffffff9d
 8016aaa:	6e655f6d 	cdpvs	15, 6, cr5, cr5, cr13, {3}
 8016aae:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8016ab2:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016ab6:	00645f74 	rsbeq	r5, r4, r4, ror pc

08016aba <ArtNetParamsConst::DESTINATION_IP_PORT>:
 8016aba:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 8016abe:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 8016ac2:	5f6e6f69 	svcpl	0x006e6f69
 8016ac6:	705f7069 	subsvc	r7, pc, r9, rrx
 8016aca:	5f74726f 	svcpl	0x0074726f
 8016ace:	00000061 	andeq	r0, r0, r1, rrx
 8016ad2:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 8016ad6:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 8016ada:	5f6e6f69 	svcpl	0x006e6f69
 8016ade:	705f7069 	subsvc	r7, pc, r9, rrx
 8016ae2:	5f74726f 	svcpl	0x0074726f
 8016ae6:	00000062 	andeq	r0, r0, r2, rrx
 8016aea:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 8016aee:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 8016af2:	5f6e6f69 	svcpl	0x006e6f69
 8016af6:	705f7069 	subsvc	r7, pc, r9, rrx
 8016afa:	5f74726f 	svcpl	0x0074726f
 8016afe:	00000063 	andeq	r0, r0, r3, rrx
 8016b02:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 8016b06:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 8016b0a:	5f6e6f69 	svcpl	0x006e6f69
 8016b0e:	705f7069 	subsvc	r7, pc, r9, rrx
 8016b12:	5f74726f 	svcpl	0x0074726f
 8016b16:	00000064 	andeq	r0, r0, r4, rrx

08016b1a <ArtNetParamsConst::NET>:
 8016b1a:	0074656e 	rsbseq	r6, r4, lr, ror #10

08016b1e <ArtNetParamsConst::SUBNET>:
 8016b1e:	6e627573 	mcrvs	5, 3, r7, cr2, cr3, {3}
 8016b22:	 	tstvs	r0, r5, ror #8

08016b25 <ArtNetParamsConst::FILE_NAME>:
 8016b25:	6e747261 	cdpvs	2, 7, cr7, cr4, cr1, {3}
 8016b29:	742e7465 	strtvc	r7, [lr], #-1125	; 0xfffffb9b
 8016b2d:	 			; <UNDEFINED> instruction: 0xff007478

08016b30 <ArtNetConst::OEM_ID>:
 8016b30:	 	ldrsheq	pc, [r0], #-255	; 0xffffff01	; <UNPREDICTABLE>

08016b32 <ArtNetConst::ESTA_ID>:
 8016b32:	 	stmdacc	r1, {r4, r6}

08016b34 <ArtNetConst::VERSION>:
 8016b34:	33323801 	teqcc	r2, #65536	; 0x10000
 8016b38:	35322e39 	ldrcc	r2, [r2, #-3641]!	; 0xfffff1c7
 8016b3c:	2e302e35 	mrccs	14, 1, r2, cr0, cr5, {1}
 8016b40:	2e250030 	mcrcs	0, 1, r0, cr5, cr0, {1}
 8016b44:	20733834 	rsbscs	r3, r3, r4, lsr r8
 8016b48:	30007325 	andcc	r7, r0, r5, lsr #6
 8016b4c:	6f4e202e 	svcvs	0x004e202e
 8016b50:	73616320 	cmnvc	r1, #32, 6	; 0x80000000
 8016b54:	6d207365 	stcvs	3, cr7, [r0, #-404]!	; 0xfffffe6c
 8016b58:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
 8016b5c:	202c6465 	eorcs	r6, ip, r5, ror #8
 8016b60:	73696874 	cmnvc	r9, #116, 16	; 0x740000
 8016b64:	6f687320 	svcvs	0x00687320
 8016b68:	6e646c75 	mcrvs	12, 3, r6, cr4, cr5, {3}
 8016b6c:	68207427 	stmdavs	r0!, {r0, r1, r2, r5, sl, ip, sp, lr}
 8016b70:	65707061 	ldrbvs	r7, [r0, #-97]!	; 0xffffff9f
 8016b74:	000a216e 	andeq	r2, sl, lr, ror #2
 8016b78:	64697242 	strbtvs	r7, [r9], #-578	; 0xfffffdbe
 8016b7c:	000a6567 	andeq	r6, sl, r7, ror #10
 8016b80:	72694620 	rsbvc	r4, r9, #32, 12	; 0x2000000
 8016b84:	7261776d 	rsbvc	r7, r1, #28573696	; 0x1b40000
 8016b88:	203a2065 	eorscs	r2, sl, r5, rrx
 8016b8c:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016b90:	20000a64 	andcs	r0, r0, r4, ror #20
 8016b94:	20444943 	subcs	r4, r4, r3, asr #18
 8016b98:	20202020 	eorcs	r2, r0, r0, lsr #32
 8016b9c:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8016ba0:	20000a73 	andcs	r0, r0, r3, ror sl
 8016ba4:	726f5020 	rsbvc	r5, pc, #32
 8016ba8:	32252074 	eorcc	r2, r5, #116	; 0x74
 8016bac:	6e552064 	cdpvs	0, 5, cr2, cr5, cr4, {3}
 8016bb0:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 8016bb4:	25206573 	strcs	r6, [r0, #-1395]!	; 0xfffffa8d
 8016bb8:	2064332d 	rsbcs	r3, r4, sp, lsr #6
 8016bbc:	5d73255b 	cfldr64pl	mvdx2, [r3, #-364]!	; 0xfffffe94
 8016bc0:	2020000a 	eorcs	r0, r0, sl
 8016bc4:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
 8016bc8:	64322520 	ldrtvs	r2, [r2], #-1312	; 0xfffffae0
 8016bcc:	696e5520 	stmdbvs	lr!, {r5, r8, sl, ip, lr}^
 8016bd0:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8016bd4:	2d252065 	stccs	0, cr2, [r5, #-404]!	; 0xfffffe6c
 8016bd8:	5b206433 	blpl	882fcac <__exidx_end+0x817900>
 8016bdc:	0a5d6425 	beq	976fc78 <__exidx_end+0x17578cc>
 8016be0:	79532000 	ldmdbvc	r3, {sp}^
 8016be4:	7268636e 	rsbvc	r6, r8, #-1207959551	; 0xb8000001
 8016be8:	7a696e6f 	bvc	9a725ac <__exidx_end+0x1a5a200>
 8016bec:	73692065 	cmnvc	r9, #101	; 0x65
 8016bf0:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 8016bf4:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8016bf8:	44000a64 	strmi	r0, [r0], #-2660	; 0xfffff59c
 8016bfc:	4f20584d 	svcmi	0x0020584d
 8016c00:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 8016c04:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
 8016c08:	6e492058 	mcrvs	0, 2, r2, cr9, cr8, {2}
 8016c0c:	00747570 	rsbseq	r7, r4, r0, ror r5

08016c10 <CSWTCH.56>:
 8016c10:	080169a9 	stmdaeq	r1, {r0, r3, r5, r7, r8, fp, sp, lr}
 8016c14:	080169ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, fp, sp, lr}
 8016c18:	080169b2 	stmdaeq	r1, {r1, r4, r5, r7, r8, fp, sp, lr}
 8016c1c:	080169b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, fp, sp, lr}

08016c20 <E131ParamsConst::PRIORITY>:
 8016c20:	6f697270 	svcvs	0x00697270
 8016c24:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 8016c28:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016c2c:	00615f74 	rsbeq	r5, r1, r4, ror pc
 8016c30:	72700000 	rsbsvc	r0, r0, #0
 8016c34:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 8016c38:	705f7974 	subsvc	r7, pc, r4, ror r9	; <UNPREDICTABLE>
 8016c3c:	5f74726f 	svcpl	0x0074726f
 8016c40:	00000062 	andeq	r0, r0, r2, rrx
 8016c44:	6f697270 	svcvs	0x00697270
 8016c48:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 8016c4c:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016c50:	00635f74 	rsbeq	r5, r3, r4, ror pc
 8016c54:	72700000 	rsbsvc	r0, r0, #0
 8016c58:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 8016c5c:	705f7974 	subsvc	r7, pc, r4, ror r9	; <UNPREDICTABLE>
 8016c60:	5f74726f 	svcpl	0x0074726f
 8016c64:	00000064 	andeq	r0, r0, r4, rrx

08016c68 <E131ParamsConst::FILE_NAME>:
 8016c68:	31333165 	teqcc	r3, r5, ror #2
 8016c6c:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
	...

08016c71 <E117Const::ACN_PACKET_IDENTIFIER>:
 8016c71:	2d435341 	stclcs	3, cr5, [r3, #-260]	; 0xfffffefc
 8016c75:	312e3145 			; <UNDEFINED> instruction: 0x312e3145
 8016c79:	00000037 	andeq	r0, r0, r7, lsr r0

08016c7d <E131BridgeConst::VERSION>:
 8016c7d:	30251901 	eorcc	r1, r5, r1, lsl #18
 8016c81:	252d7838 	strcs	r7, [sp, #-2104]!	; 0xfffff7c8
 8016c85:	2d783430 	cfldrdcs	mvd3, [r8, #-192]!	; 0xffffff40
 8016c89:	78343025 	ldmdavc	r4!, {r0, r2, r5, ip, sp}
 8016c8d:	3230252d 	eorscc	r2, r0, #188743680	; 0xb400000
 8016c91:	32302578 	eorscc	r2, r0, #120, 10	; 0x1e000000
 8016c95:	30252d78 	eorcc	r2, r5, r8, ror sp
 8016c99:	30257832 	eorcc	r7, r5, r2, lsr r8
 8016c9d:	30257832 	eorcc	r7, r5, r2, lsr r8
 8016ca1:	30257832 	eorcc	r7, r5, r2, lsr r8
 8016ca5:	30257832 	eorcc	r7, r5, r2, lsr r8
 8016ca9:	30257832 	eorcc	r7, r5, r2, lsr r8
 8016cad:	50007832 	andpl	r7, r0, r2, lsr r8
 8016cb1:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 8016cb5:	584d4420 	stmdapl	sp, {r5, sl, lr}^
 8016cb9:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 8016cbd:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
 8016cc1:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 8016cc5:	000a6e6f 	andeq	r6, sl, pc, ror #28
 8016cc9:	74754f20 	ldrbtvc	r4, [r5], #-3872	; 0xfffff0e0
 8016ccd:	73747570 	cmnvc	r4, #112, 10	; 0x1c000000
 8016cd1:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8016cd5:	20000a64 	andcs	r0, r0, r4, ror #20
 8016cd9:	756f7247 	strbvc	r7, [pc, #-583]!	; 8016a9a <ArtNetParamsConst::RDM_ENABLE_PORT+0x28>
 8016cdd:	676e6970 			; <UNDEFINED> instruction: 0x676e6970
 8016ce1:	756f6320 	strbvc	r6, [pc, #-800]!	; 80169c9 <artnet::NODE_ID+0xcf>
 8016ce5:	3a20746e 	bcc	8833ea5 <__exidx_end+0x81baf9>
 8016ce9:	20642520 	rsbcs	r2, r4, r0, lsr #10
 8016ced:	6f72475b 	svcvs	0x0072475b
 8016cf1:	20737075 	rsbscs	r7, r3, r5, ror r0
 8016cf5:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8016cf9:	 	andeq	r0, r0, sp, asr sl

08016cfc <vtable for WS28xxDmx>:
	...
 8016d04:	0800ddd9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, sl, fp, ip, lr, pc}
 8016d08:	0800ddf9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, sl, fp, ip, lr, pc}
 8016d0c:	0800df4d 	stmdaeq	r0, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr, pc}
 8016d10:	0800df65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr, pc}
 8016d14:	0800de31 	stmdaeq	r0, {r0, r4, r5, r9, sl, fp, ip, lr, pc}
 8016d18:	0800de0b 	stmdaeq	r0, {r0, r1, r3, r9, sl, fp, ip, lr, pc}
 8016d1c:	0800df31 	stmdaeq	r0, {r0, r4, r5, r8, r9, sl, fp, ip, lr, pc}
 8016d20:	0800df47 	stmdaeq	r0, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr, pc}
 8016d24:	0800df7d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr, pc}
 8016d28:	0800ddcd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, sl, fp, ip, lr, pc}
 8016d2c:	0800ddd3 	stmdaeq	r0, {r0, r1, r4, r6, r7, r8, sl, fp, ip, lr, pc}
 8016d30:	0800dfb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, r9, sl, fp, ip, lr, pc}
 8016d34:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8016d38:	2a2e253a 	bcs	8ba0228 <__exidx_end+0xb87e7c>
 8016d3c:	23002c66 	movwcs	r2, #3174	; 0xc66
 8016d40:	253d7325 	ldrcs	r7, [sp, #-805]!	; 0xfffffcdb
 8016d44:	0a662a2e 	beq	99a1604 <__exidx_end+0x1989258>
 8016d48:	65643c00 	strbvs	r3, [r4, #-3072]!	; 0xfffff400
 8016d4c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
 8016d50:	4f003e74 	svcmi	0x00003e74
 8016d54:	77726576 			; <UNDEFINED> instruction: 0x77726576
 8016d58:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 8016d5c:	74616420 	strbtvc	r6, [r1], #-1056	; 0xfffffbe0
 8016d60:	65687361 	strbvs	r7, [r8, #-865]!	; 0xfffffc9f
 8016d64:	4f007465 	svcmi	0x00007465
 8016d68:	77726576 			; <UNDEFINED> instruction: 0x77726576
 8016d6c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 8016d70:	6d697420 	cfstrdvs	mvd7, [r9, #-128]!	; 0xffffff80
 8016d74:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8016d78:	29737528 	ldmdbcs	r3!, {r3, r5, r8, sl, ip, sp, lr}^
 8016d7c:	6f724700 	svcvs	0x00724700
 8016d80:	6e697075 	mcrvs	0, 3, r7, cr9, cr5, {3}
 8016d84:	6c430067 	mcrrvs	0, 6, r0, r3, cr7
 8016d88:	206b636f 	rsbcs	r6, fp, pc, ror #6
 8016d8c:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
 8016d90:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
 8016d94:	00737069 	rsbseq	r7, r3, r9, rrx
 8016d98:	31415041 	cmpcc	r1, r1, asr #32
 8016d9c:	532f3230 			; <UNDEFINED> instruction: 0x532f3230
 8016da0:	3238394b 	eorscc	r3, r8, #1228800	; 0x12c000
 8016da4:	65540032 	ldrbvs	r0, [r4, #-50]	; 0xffffffce
 8016da8:	70207473 	eorvc	r7, r0, r3, ror r4
 8016dac:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
 8016db0:	59006e72 	stmdbpl	r0, {r1, r4, r5, r6, r9, sl, fp, sp, lr}
 8016db4:	4e007365 	cdpmi	3, 0, cr7, cr0, cr5, {3}
 8016db8:	6950006f 	ldmdbvs	r0, {r0, r1, r2, r3, r5, r6}^
 8016dbc:	206c6578 	rsbcs	r6, ip, r8, ror r5
 8016dc0:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 8016dc4:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 8016dc8:	6f697461 	svcvs	0x00697461
 8016dcc:	20000a6e 	andcs	r0, r0, lr, ror #20
 8016dd0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
 8016dd4:	20202020 	eorcs	r2, r0, r0, lsr #32
 8016dd8:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 8016ddc:	64255b20 	strtvs	r5, [r5], #-2848	; 0xfffff4e0
 8016de0:	20000a5d 	andcs	r0, r0, sp, asr sl
 8016de4:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
 8016de8:	20202074 	eorcs	r2, r0, r4, ror r0
 8016dec:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8016df0:	4d20000a 	stcmi	0, cr0, [r0, #-40]!	; 0xffffffd8
 8016df4:	69707061 	ldmdbvs	r0!, {r0, r5, r6, ip, sp, lr}^
 8016df8:	3a20676e 	bcc	8830bb8 <__exidx_end+0x81880c>
 8016dfc:	20732520 	rsbscs	r2, r3, r0, lsr #10
 8016e00:	5d64255b 	cfstr64pl	mvdx2, [r4, #-364]!	; 0xfffffe94
 8016e04:	5420000a 	strtpl	r0, [r0], #-10
 8016e08:	20204830 	eorcs	r4, r0, r0, lsr r8
 8016e0c:	3a202020 	bcc	881ee94 <__exidx_end+0x806ae8>
 8016e10:	322e2520 	eorcc	r2, lr, #32, 10	; 0x8000000
 8016e14:	305b2066 	subscc	r2, fp, r6, rrx
 8016e18:	5d582578 	cfldr64pl	mvdx2, [r8, #-480]	; 0xfffffe20
 8016e1c:	5420000a 	strtpl	r0, [r0], #-10
 8016e20:	20204831 	eorcs	r4, r0, r1, lsr r8
 8016e24:	3a202020 	bcc	881eeac <__exidx_end+0x806b00>
 8016e28:	322e2520 	eorcc	r2, lr, #32, 10	; 0x8000000
 8016e2c:	305b2066 	subscc	r2, fp, r6, rrx
 8016e30:	5d582578 	cfldr64pl	mvdx2, [r8, #-480]	; 0xfffffe20
 8016e34:	4720000a 	strmi	r0, [r0, -sl]!
 8016e38:	61626f6c 	cmnvs	r2, ip, ror #30
 8016e3c:	6972426c 	ldmdbvs	r2!, {r2, r3, r5, r6, r9, lr}^
 8016e40:	6e746867 	cdpvs	8, 7, cr6, cr4, cr7, {3}
 8016e44:	3a737365 	bcc	9cf3be0 <__exidx_end+0x1cdb834>
 8016e48:	0a752520 	beq	9d602d0 <__exidx_end+0x1d47f24>
 8016e4c:	61472000 	mrsvs	r2, (UNDEF: 71)
 8016e50:	20616d6d 	rsbcs	r6, r1, sp, ror #26
 8016e54:	72726f63 	rsbsvc	r6, r2, #396	; 0x18c
 8016e58:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 8016e5c:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 8016e60:	20000a73 	andcs	r0, r0, r3, ror sl
 8016e64:	636f6c43 	cmnvs	pc, #17152	; 0x4300
 8016e68:	25203a6b 	strcs	r3, [r0, #-2667]!	; 0xfffff595
 8016e6c:	7a482075 	bvc	921f048 <__exidx_end+0x1206c9c>
 8016e70:	0000000a 	andeq	r0, r0, sl

08016e74 <CSWTCH.9>:
 8016e74:	08017088 	stmdaeq	r1, {r3, r7, ip, sp, lr}
 8016e78:	08017188 	stmdaeq	r1, {r3, r7, r8, ip, sp, lr}
 8016e7c:	08017288 	stmdaeq	r1, {r3, r7, r9, ip, sp, lr}
 8016e80:	08017388 	stmdaeq	r1, {r3, r7, r8, r9, ip, sp, lr}
 8016e84:	08017488 	stmdaeq	r1, {r3, r7, sl, ip, sp, lr}

08016e88 <gamma10_0>:
 8016e88:	03020100 	movweq	r0, #8448	; 0x2100
 8016e8c:	07060504 	streq	r0, [r6, -r4, lsl #10]
 8016e90:	0b0a0908 	bleq	82992b8 <__exidx_end+0x280f0c>
 8016e94:	0f0e0d0c 	svceq	0x000e0d0c
 8016e98:	13121110 	tstne	r2, #16, 2
 8016e9c:	17161514 			; <UNDEFINED> instruction: 0x17161514
 8016ea0:	1b1a1918 	blne	869d308 <__exidx_end+0x684f5c>
 8016ea4:	1f1e1d1c 	svcne	0x001e1d1c
 8016ea8:	23222120 			; <UNDEFINED> instruction: 0x23222120
 8016eac:	27262524 	strcs	r2, [r6, -r4, lsr #10]!
 8016eb0:	2b2a2928 	blcs	8aa1358 <__exidx_end+0xa88fac>
 8016eb4:	2f2e2d2c 	svccs	0x002e2d2c
 8016eb8:	33323130 	teqcc	r2, #48, 2
 8016ebc:	37363534 			; <UNDEFINED> instruction: 0x37363534
 8016ec0:	3b3a3938 	blcc	8ea53a8 <__exidx_end+0xe8cffc>
 8016ec4:	3f3e3d3c 	svccc	0x003e3d3c
 8016ec8:	43424140 	movtmi	r4, #8512	; 0x2140
 8016ecc:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 8016ed0:	4b4a4948 	blmi	92a93f8 <__exidx_end+0x129104c>
 8016ed4:	4f4e4d4c 	svcmi	0x004e4d4c
 8016ed8:	53525150 	cmppl	r2, #80, 2
 8016edc:	57565554 			; <UNDEFINED> instruction: 0x57565554
 8016ee0:	5b5a5958 	blpl	96ad448 <__exidx_end+0x169509c>
 8016ee4:	5f5e5d5c 	svcpl	0x005e5d5c
 8016ee8:	63626160 	cmnvs	r2, #96, 2
 8016eec:	67666564 	strbvs	r6, [r6, -r4, ror #10]!
 8016ef0:	6b6a6968 	blvs	9ab1498 <__exidx_end+0x1a990ec>
 8016ef4:	6f6e6d6c 	svcvs	0x006e6d6c
 8016ef8:	73727170 	cmnvc	r2, #112, 2
 8016efc:	77767574 			; <UNDEFINED> instruction: 0x77767574
 8016f00:	7b7a7978 	blvc	9eb54e8 <__exidx_end+0x1e9d13c>
 8016f04:	7f7e7d7c 	svcvc	0x007e7d7c
 8016f08:	83828180 	orrhi	r8, r2, #128, 2
 8016f0c:	87868584 	strhi	r8, [r6, r4, lsl #11]
 8016f10:	8b8a8988 	blhi	62b9538 <__stack_size+0x62b7538>
 8016f14:	8f8e8d8c 	svchi	0x008e8d8c
 8016f18:	93929190 	orrsls	r9, r2, #144, 2	; 0x24
 8016f1c:	97969594 			; <UNDEFINED> instruction: 0x97969594
 8016f20:	9b9a9998 	blls	66bd588 <__stack_size+0x66bb588>
 8016f24:	9f9e9d9c 	svcls	0x009e9d9c
 8016f28:	a3a2a1a0 			; <UNDEFINED> instruction: 0xa3a2a1a0
 8016f2c:	a7a6a5a4 	strge	sl, [r6, r4, lsr #11]!
 8016f30:	abaaa9a8 	blge	6ac15d8 <__stack_size+0x6abf5d8>
 8016f34:	afaeadac 	svcge	0x00aeadac
 8016f38:	b3b2b1b0 			; <UNDEFINED> instruction: 0xb3b2b1b0
 8016f3c:	b7b6b5b4 			; <UNDEFINED> instruction: 0xb7b6b5b4
 8016f40:	bbbab9b8 	bllt	6ec5628 <__stack_size+0x6ec3628>
 8016f44:	bfbebdbc 	svclt	0x00bebdbc
 8016f48:	c3c2c1c0 	bicgt	ip, r2, #192, 2	; 0x30
 8016f4c:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
 8016f50:	cbcac9c8 	blgt	72c9678 <__stack_size+0x72c7678>
 8016f54:	cfcecdcc 	svcgt	0x00cecdcc
 8016f58:	d3d2d1d0 	bicsle	sp, r2, #208, 2	; 0x34
 8016f5c:	d7d6d5d4 			; <UNDEFINED> instruction: 0xd7d6d5d4
 8016f60:	dbdad9d8 	blle	76cd6c8 <__stack_size+0x76cb6c8>
 8016f64:	dfdedddc 	svcle	0x00dedddc
 8016f68:	e3e2e1e0 	mvn	lr, #224, 2	; 0x38
 8016f6c:	e7e6e5e4 	strb	lr, [r6, r4, ror #11]!
 8016f70:	ebeae9e8 	bl	7ad1718 <__stack_size+0x7acf718>
 8016f74:	efeeedec 	svc	0x00eeedec
 8016f78:	f3f2f1f0 	vsra.u64	<illegal reg q15.5>, q8, #14
 8016f7c:	f7f6f5f4 			; <UNDEFINED> instruction: 0xf7f6f5f4
 8016f80:	fbfaf9f8 	blx	7ed576a <__stack_size+0x7ed376a>
 8016f84:	fffefdfc 			; <UNDEFINED> instruction: 0xfffefdfc

08016f88 <gamma20_0>:
	...
 8016f94:	01010101 	tsteq	r1, r1, lsl #2
 8016f98:	01010101 	tsteq	r1, r1, lsl #2
 8016f9c:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 8016fa0:	03030202 	movweq	r0, #12802	; 0x3202
 8016fa4:	04040303 	streq	r0, [r4], #-771	; 0xfffffcfd
 8016fa8:	05050404 	streq	r0, [r5, #-1028]	; 0xfffffbfc
 8016fac:	06060505 	streq	r0, [r6], -r5, lsl #10
 8016fb0:	07070706 	streq	r0, [r7, -r6, lsl #14]
 8016fb4:	09080808 	stmdbeq	r8, {r3, fp}
 8016fb8:	0a0a0909 	beq	82993e4 <__exidx_end+0x281038>
 8016fbc:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 8016fc0:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 8016fc4:	100f0f0e 	andne	r0, pc, lr, lsl #30
 8016fc8:	12111110 	andsne	r1, r1, #16, 2
 8016fcc:	14131312 	ldrne	r1, [r3], #-786	; 0xfffffcee
 8016fd0:	16151514 			; <UNDEFINED> instruction: 0x16151514
 8016fd4:	18181717 	ldmdane	r8, {r0, r1, r2, r4, r8, r9, sl, ip}
 8016fd8:	1b1a1a19 	blne	869d844 <__exidx_end+0x685498>
 8016fdc:	1e1d1c1c 	mrcne	12, 0, r1, cr13, cr12, {0}
 8016fe0:	20201f1e 	eorcs	r1, r0, lr, lsl pc
 8016fe4:	23232221 			; <UNDEFINED> instruction: 0x23232221
 8016fe8:	26262524 	strtcs	r2, [r6], -r4, lsr #10
 8016fec:	2a292827 	bcs	8a61090 <__exidx_end+0xa48ce4>
 8016ff0:	2d2c2b2a 	vstmdbcs	ip!, {d2-d22}
 8016ff4:	302f2f2e 	eorcc	r2, pc, lr, lsr #30
 8016ff8:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 8016ffc:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 8017000:	3b3a3938 	blcc	8ea54e8 <__exidx_end+0xe8d13c>
 8017004:	3f3e3d3c 	svccc	0x003e3d3c
 8017008:	43424140 	movtmi	r4, #8512	; 0x2140
 801700c:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 8017010:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 8017014:	504f4e4d 	subpl	r4, pc, sp, asr #28
 8017018:	55545251 	ldrbpl	r5, [r4, #-593]	; 0xfffffdaf
 801701c:	59585756 	ldmdbpl	r8, {r1, r2, r4, r6, r8, r9, sl, ip, lr}^
 8017020:	5e5d5c5b 	mrcpl	12, 2, r5, cr13, cr11, {2}
 8017024:	6362615f 	cmnvs	r2, #-1073741801	; 0xc0000017
 8017028:	68676664 	stmdavs	r7!, {r2, r5, r6, r9, sl, sp, lr}^
 801702c:	6d6c6b69 	fstmdbxvs	ip!, {d22-d73}	;@ Deprecated
 8017030:	7371706f 	cmnvc	r1, #111	; 0x6f
 8017034:	78777574 	ldmdavc	r7!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}^
 8017038:	7e7c7b79 	vmovvc.s8	r7, d12[7]
 801703c:	8382807f 	orrhi	r8, r2, #127	; 0x7f
 8017040:	89888685 	stmibhi	r8, {r0, r2, r7, r9, sl, pc}
 8017044:	8f8e8c8b 	svchi	0x008e8c8b
 8017048:	95949291 	ldrls	r9, [r4, #657]	; 0x291
 801704c:	9b9a9897 	blls	66bd2b0 <__stack_size+0x66bb2b0>
 8017050:	a2a09e9d 	adcge	r9, r0, #2512	; 0x9d0
 8017054:	a8a6a5a3 	stmiage	r6!, {r0, r1, r5, r7, r8, sl, sp, pc}
 8017058:	afadabaa 	svcge	0x00adabaa
 801705c:	b5b4b2b0 	ldrlt	fp, [r4, #688]!	; 0x2b0
 8017060:	bcbab9b7 			; <UNDEFINED> instruction: 0xbcbab9b7
 8017064:	c3c1c0be 	bicgt	ip, r1, #190	; 0xbe
 8017068:	cac8c7c5 	bgt	7248f84 <__stack_size+0x7246f84>
 801706c:	d1cfcecc 	bicle	ip, pc, ip, asr #29
 8017070:	d9d7d5d3 	ldmible	r7, {r0, r1, r4, r6, r7, r8, sl, ip, lr, pc}^
 8017074:	e0dedcda 	ldrsb	sp, [lr], #202	; 0xca
 8017078:	e8e6e4e2 	stmia	r6!, {r1, r5, r6, r7, sl, sp, lr, pc}^
 801707c:	efedebe9 	svc	0x00edebe9
 8017080:	f7f5f3f1 			; <UNDEFINED> instruction: 0xf7f5f3f1
 8017084:	fffdfbf9 			; <UNDEFINED> instruction: 0xfffdfbf9

08017088 <gamma21_0>:
	...
 8017094:	01010000 	mrseq	r0, (UNDEF: 1)
 8017098:	01010101 	tsteq	r1, r1, lsl #2
 801709c:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
 80170a0:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 80170a4:	03030302 	movweq	r0, #13058	; 0x3302
 80170a8:	04040303 	streq	r0, [r4], #-771	; 0xfffffcfd
 80170ac:	05050404 	streq	r0, [r5, #-1028]	; 0xfffffbfc
 80170b0:	06060505 	streq	r0, [r6], -r5, lsl #10
 80170b4:	07070706 	streq	r0, [r7, -r6, lsl #14]
 80170b8:	09080808 	stmdbeq	r8, {r3, fp}
 80170bc:	0a0a0909 	beq	82994e8 <__exidx_end+0x28113c>
 80170c0:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 80170c4:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 80170c8:	0f0f0e0e 	svceq	0x000f0e0e
 80170cc:	11111010 	tstne	r1, r0, lsl r0
 80170d0:	14131212 	ldrne	r1, [r3], #-530	; 0xfffffdee
 80170d4:	16151514 			; <UNDEFINED> instruction: 0x16151514
 80170d8:	18181716 	ldmdane	r8, {r1, r2, r4, r8, r9, sl, ip}
 80170dc:	1b1a1919 	blne	869d548 <__exidx_end+0x68519c>
 80170e0:	1d1d1c1b 	ldcne	12, cr1, [sp, #-108]	; 0xffffff94
 80170e4:	201f1f1e 	andscs	r1, pc, lr, lsl pc	; <UNPREDICTABLE>
 80170e8:	23222121 			; <UNDEFINED> instruction: 0x23222121
 80170ec:	26252424 	strtcs	r2, [r5], -r4, lsr #8
 80170f0:	29282827 	stmdbcs	r8!, {r0, r1, r2, r5, fp, sp}
 80170f4:	2c2c2b2a 			; <UNDEFINED> instruction: 0x2c2c2b2a
 80170f8:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 80170fc:	33333231 	teqcc	r3, #268435459	; 0x10000003
 8017100:	37363534 			; <UNDEFINED> instruction: 0x37363534
 8017104:	3b3a3938 	blcc	8ea55ec <__exidx_end+0xe8d240>
 8017108:	3f3e3d3c 	svccc	0x003e3d3c
 801710c:	43424140 	movtmi	r4, #8512	; 0x2140
 8017110:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 8017114:	4c4b4948 	mcrrmi	9, 4, r4, fp, cr8	; <UNPREDICTABLE>
 8017118:	504f4e4d 	subpl	r4, pc, sp, asr #28
 801711c:	55545351 	ldrbpl	r5, [r4, #-849]	; 0xfffffcaf
 8017120:	5a585756 	bpl	962ce80 <__exidx_end+0x1614ad4>
 8017124:	5f5d5c5b 	svcpl	0x005d5c5b
 8017128:	64626160 	strbtvs	r6, [r2], #-352	; 0xfffffea0
 801712c:	69686665 	stmdbvs	r8!, {r0, r2, r5, r6, r9, sl, sp, lr}^
 8017130:	6e6d6b6a 	vnmulvs.f64	d22, d13, d26
 8017134:	74727170 	ldrbtvc	r7, [r2], #-368	; 0xfffffe90
 8017138:	79787675 	ldmdbvc	r8!, {r0, r2, r4, r5, r6, r9, sl, ip, sp, lr}^
 801713c:	7f7e7c7b 	svcvc	0x007e7c7b
 8017140:	85838281 	strhi	r8, [r3, #641]	; 0x281
 8017144:	8b898886 	blhi	6279364 <__stack_size+0x6277364>
 8017148:	91908e8d 	orrsls	r8, r0, sp, lsl #29
 801714c:	97969493 			; <UNDEFINED> instruction: 0x97969493
 8017150:	9e9c9b99 	vmovls.32	r9, d28[0]
 8017154:	a5a3a1a0 	strge	sl, [r3, #416]!	; 0x1a0
 8017158:	abaaa8a6 	blge	6ac13f8 <__stack_size+0x6abf3f8>
 801715c:	b2b0afad 	adcslt	sl, r0, #692	; 0x2b4
 8017160:	b9b7b6b4 	ldmiblt	r7!, {r2, r4, r5, r7, r9, sl, ip, sp, pc}
 8017164:	c0bfbdbb 	ldrhtgt	fp, [pc], fp
 8017168:	c8c6c4c2 	stmiagt	r6, {r1, r6, r7, sl, lr, pc}^
 801716c:	cfcdcbca 	svcgt	0x00cdcbca
 8017170:	d7d5d3d1 			; <UNDEFINED> instruction: 0xd7d5d3d1
 8017174:	dfdddbd9 	svcle	0x00dddbd9
 8017178:	e6e4e2e1 	strbt	lr, [r4], r1, ror #5
 801717c:	eeeceae8 	vfms.f32	s29, s25, s17
 8017180:	f7f5f3f1 			; <UNDEFINED> instruction: 0xf7f5f3f1
 8017184:	fffdfbf9 			; <UNDEFINED> instruction: 0xfffdfbf9

08017188 <gamma22_0>:
	...
 8017194:	01000000 	mrseq	r0, (UNDEF: 0)
 8017198:	01010101 	tsteq	r1, r1, lsl #2
 801719c:	01010101 	tsteq	r1, r1, lsl #2
 80171a0:	02020201 	andeq	r0, r2, #268435456	; 0x10000000
 80171a4:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 80171a8:	03030303 	movweq	r0, #13059	; 0x3303
 80171ac:	04040403 	streq	r0, [r4], #-1027	; 0xfffffbfd
 80171b0:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
 80171b4:	06060605 	streq	r0, [r6], -r5, lsl #12
 80171b8:	07070706 	streq	r0, [r7, -r6, lsl #14]
 80171bc:	09080808 	stmdbeq	r8, {r3, fp}
 80171c0:	0a0a0909 	beq	82995ec <__exidx_end+0x281240>
 80171c4:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 80171c8:	0d0d0d0c 	stceq	13, cr0, [sp, #-48]	; 0xffffffd0
 80171cc:	0f0f0e0e 	svceq	0x000f0e0e
 80171d0:	11111010 	tstne	r1, r0, lsl r0
 80171d4:	13131212 	tstne	r3, #536870913	; 0x20000001
 80171d8:	16151414 			; <UNDEFINED> instruction: 0x16151414
 80171dc:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 80171e0:	1a1a1919 	bne	869d64c <__exidx_end+0x6852a0>
 80171e4:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 80171e8:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 80171ec:	23222121 			; <UNDEFINED> instruction: 0x23222121
 80171f0:	26252423 	strtcs	r2, [r5], -r3, lsr #8
 80171f4:	29282727 	stmdbcs	r8!, {r0, r1, r2, r5, r8, r9, sl, sp}
 80171f8:	2c2b2b2a 			; <UNDEFINED> instruction: 0x2c2b2b2a
 80171fc:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 8017200:	33323131 	teqcc	r2, #1073741836	; 0x4000000c
 8017204:	37363534 			; <UNDEFINED> instruction: 0x37363534
 8017208:	3b3a3938 	blcc	8ea56f0 <__exidx_end+0xe8d344>
 801720c:	3f3e3d3c 	svccc	0x003e3d3c
 8017210:	43424140 	movtmi	r4, #8512	; 0x2140
 8017214:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 8017218:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 801721c:	514f4e4d 	cmppl	pc, sp, asr #28
 8017220:	55545352 	ldrbpl	r5, [r4, #-850]	; 0xfffffcae
 8017224:	5a595857 	bpl	966d388 <__exidx_end+0x1654fdc>
 8017228:	5f5e5d5b 	svcpl	0x005e5d5b
 801722c:	64636261 	strbtvs	r6, [r3], #-609	; 0xfffffd9f
 8017230:	6a696766 	bvs	9a70fd0 <__exidx_end+0x1a58c24>
 8017234:	6f6e6d6b 	svcvs	0x006e6d6b
 8017238:	75747271 	ldrbvc	r7, [r4, #-625]!	; 0xfffffd8f
 801723c:	7b797877 	blvc	9e75420 <__exidx_end+0x1e5d074>
 8017240:	817f7e7c 	cmnhi	pc, ip, ror lr	; <UNPREDICTABLE>
 8017244:	87858482 	strhi	r8, [r5, r2, lsl #9]
 8017248:	8d8c8a89 	vstrhi	s16, [ip, #548]	; 0x224
 801724c:	9492918f 	ldrls	r9, [r2], #399	; 0x18f
 8017250:	9a999795 	bls	667d0ac <__stack_size+0x667b0ac>
 8017254:	a19f9e9c 			; <UNDEFINED> instruction: 0xa19f9e9c
 8017258:	a8a6a5a3 	stmiage	r6!, {r0, r1, r5, r7, r8, sl, sp, pc}
 801725c:	afadacaa 	svcge	0x00adacaa
 8017260:	b6b5b3b1 			; <UNDEFINED> instruction: 0xb6b5b3b1
 8017264:	bebcbab8 			; <UNDEFINED> instruction: 0xbebcbab8
 8017268:	c5c4c2c0 	strbgt	ip, [r4, #704]	; 0x2c0
 801726c:	cdcbc9c7 	vstrgt.16	s25, [fp, #398]	; 0x18e	; <UNPREDICTABLE>
 8017270:	d5d3d1cf 	ldrble	sp, [r3, #463]	; 0x1cf
 8017274:	dddbd9d7 	vldrle.16	s27, [fp, #430]	; 0x1ae	; <UNPREDICTABLE>
 8017278:	e5e3e1df 	strb	lr, [r3, #479]!	; 0x1df
 801727c:	eeeceae7 	vfms.f32	s29, s25, s15
 8017280:	f6f4f2f0 			; <UNDEFINED> instruction: 0xf6f4f2f0
 8017284:	fffdfbf8 			; <UNDEFINED> instruction: 0xfffdfbf8

08017288 <gamma23_0>:
	...
 8017298:	01010100 	mrseq	r0, (UNDEF: 17)
 801729c:	01010101 	tsteq	r1, r1, lsl #2
 80172a0:	01010101 	tsteq	r1, r1, lsl #2
 80172a4:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 80172a8:	03020202 	movweq	r0, #8706	; 0x2202
 80172ac:	03030303 	movweq	r0, #13059	; 0x3303
 80172b0:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 80172b4:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
 80172b8:	06060605 	streq	r0, [r6], -r5, lsl #12
 80172bc:	07070707 	streq	r0, [r7, -r7, lsl #14]
 80172c0:	09080808 	stmdbeq	r8, {r3, fp}
 80172c4:	0a0a0a09 	beq	8299af0 <__exidx_end+0x281744>
 80172c8:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 80172cc:	0d0d0d0c 	stceq	13, cr0, [sp, #-48]	; 0xffffffd0
 80172d0:	0f0f0e0e 	svceq	0x000f0e0e
 80172d4:	11111010 	tstne	r1, r0, lsl r0
 80172d8:	13131212 	tstne	r3, #536870913	; 0x20000001
 80172dc:	15151414 	ldrne	r1, [r5, #-1044]	; 0xfffffbec
 80172e0:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 80172e4:	1a1a1918 	bne	869d74c <__exidx_end+0x6853a0>
 80172e8:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 80172ec:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 80172f0:	23222120 			; <UNDEFINED> instruction: 0x23222120
 80172f4:	26252423 	strtcs	r2, [r5], -r3, lsr #8
 80172f8:	29282726 	stmdbcs	r8!, {r1, r2, r5, r8, r9, sl, sp}
 80172fc:	2c2b2a2a 			; <UNDEFINED> instruction: 0x2c2b2a2a
 8017300:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 8017304:	33323131 	teqcc	r2, #1073741836	; 0x4000000c
 8017308:	37363534 			; <UNDEFINED> instruction: 0x37363534
 801730c:	3b3a3938 	blcc	8ea57f4 <__exidx_end+0xe8d448>
 8017310:	3f3e3d3c 	svccc	0x003e3d3c
 8017314:	43424140 	movtmi	r4, #8512	; 0x2140
 8017318:	48474645 	stmdami	r7, {r0, r2, r6, r9, sl, lr}^
 801731c:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 8017320:	51504f4e 	cmppl	r0, lr, asr #30
 8017324:	56555452 			; <UNDEFINED> instruction: 0x56555452
 8017328:	5b5a5957 	blpl	96ad88c <__exidx_end+0x16954e0>
 801732c:	605f5e5c 	subsvs	r5, pc, ip, asr lr	; <UNPREDICTABLE>
 8017330:	66646362 	strbtvs	r6, [r4], -r2, ror #6
 8017334:	6b6a6867 	blvs	9ab14d8 <__exidx_end+0x1a9912c>
 8017338:	71706e6d 	cmnvc	r0, sp, ror #28
 801733c:	77757472 			; <UNDEFINED> instruction: 0x77757472
 8017340:	7d7b7a78 	vldmdbvc	fp!, {s15-s134}
 8017344:	8382807e 	orrhi	r8, r2, #126	; 0x7e
 8017348:	8a888685 	bhi	6238d64 <__stack_size+0x6236d64>
 801734c:	908f8d8b 	addls	r8, pc, fp, lsl #27
 8017350:	97959492 			; <UNDEFINED> instruction: 0x97959492
 8017354:	9e9c9a99 			; <UNDEFINED> instruction: 0x9e9c9a99
 8017358:	a5a3a1a0 	strge	sl, [r3, #416]!	; 0x1a0
 801735c:	acaaa9a7 			; <UNDEFINED> instruction: 0xacaaa9a7
 8017360:	b4b2b0ae 	ldrtlt	fp, [r2], #174	; 0xae
 8017364:	bbb9b7b6 	bllt	6e85244 <__stack_size+0x6e83244>
 8017368:	c3c1bfbd 	bicgt	fp, r1, #756	; 0x2f4
 801736c:	cbc9c7c5 	blgt	7289288 <__stack_size+0x7287288>
 8017370:	d3d1cfcd 	bicsle	ip, r1, #820	; 0x334
 8017374:	dcdad7d5 	ldclle	7, cr13, [sl], {213}	; 0xd5
 8017378:	e4e2e0de 	strbt	lr, [r2], #222	; 0xde
 801737c:	edebe9e6 			; <UNDEFINED> instruction: 0xedebe9e6
 8017380:	f6f4f1ef 			; <UNDEFINED> instruction: 0xf6f4f1ef
 8017384:	fffdfaf8 			; <UNDEFINED> instruction: 0xfffdfaf8

08017388 <gamma24_0>:
	...
 8017398:	01000000 	mrseq	r0, (UNDEF: 0)
 801739c:	01010101 	tsteq	r1, r1, lsl #2
 80173a0:	01010101 	tsteq	r1, r1, lsl #2
 80173a4:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
 80173a8:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 80173ac:	03030202 	movweq	r0, #12802	; 0x3202
 80173b0:	04030303 	streq	r0, [r3], #-771	; 0xfffffcfd
 80173b4:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 80173b8:	05050505 	streq	r0, [r5, #-1285]	; 0xfffffafb
 80173bc:	06060606 	streq	r0, [r6], -r6, lsl #12
 80173c0:	08070707 	stmdaeq	r7, {r0, r1, r2, r8, r9, sl}
 80173c4:	09090808 	stmdbeq	r9, {r3, fp}
 80173c8:	0a0a0a09 	beq	8299bf4 <__exidx_end+0x281848>
 80173cc:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 80173d0:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 80173d4:	0f0f0e0e 	svceq	0x000f0e0e
 80173d8:	11111010 	tstne	r1, r0, lsl r0
 80173dc:	13131212 	tstne	r3, #536870913	; 0x20000001
 80173e0:	16151414 			; <UNDEFINED> instruction: 0x16151414
 80173e4:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 80173e8:	1a1a1918 	bne	869d850 <__exidx_end+0x6854a4>
 80173ec:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 80173f0:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 80173f4:	23222120 			; <UNDEFINED> instruction: 0x23222120
 80173f8:	26252423 	strtcs	r2, [r5], -r3, lsr #8
 80173fc:	29282727 	stmdbcs	r8!, {r0, r1, r2, r5, r8, r9, sl, sp}
 8017400:	2c2b2b2a 			; <UNDEFINED> instruction: 0x2c2b2b2a
 8017404:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 8017408:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 801740c:	37363535 			; <UNDEFINED> instruction: 0x37363535
 8017410:	3b3a3938 	blcc	8ea58f8 <__exidx_end+0xe8d54c>
 8017414:	403f3e3c 	eorsmi	r3, pc, ip, lsr lr	; <UNPREDICTABLE>
 8017418:	44434241 	strbmi	r4, [r3], #-577	; 0xfffffdbf
 801741c:	49474645 	stmdbmi	r7, {r0, r2, r6, r9, sl, lr}^
 8017420:	4d4c4b4a 	vstrmi	d20, [ip, #-296]	; 0xfffffed8
 8017424:	5251504e 	subspl	r5, r1, #78	; 0x4e
 8017428:	57565553 			; <UNDEFINED> instruction: 0x57565553
 801742c:	5c5b5a58 	mrrcpl	10, 5, r5, fp, cr8
 8017430:	62605f5e 	rsbvs	r5, r0, #376	; 0x178
 8017434:	67666463 	strbvs	r6, [r6, -r3, ror #8]!
 8017438:	6d6c6a69 	vstmdbvs	ip!, {s13-s117}
 801743c:	7372706f 	cmnvc	r2, #111	; 0x6f
 8017440:	79787675 	ldmdbvc	r8!, {r0, r2, r4, r5, r6, r9, sl, ip, sp, lr}^
 8017444:	7f7e7c7b 	svcvc	0x007e7c7b
 8017448:	86848381 	strhi	r8, [r4], r1, lsl #7
 801744c:	8d8b8988 	vstrhi.16	s16, [fp, #272]	; 0x110	; <UNPREDICTABLE>
 8017450:	9492908e 	ldrls	r9, [r2], #142	; 0x8e
 8017454:	9b999795 	blls	667d2b0 <__stack_size+0x667b2b0>
 8017458:	a2a09e9c 	adcge	r9, r0, #156, 28	; 0x9c0
 801745c:	a9a7a6a4 	stmibge	r7!, {r2, r5, r7, r9, sl, sp, pc}
 8017460:	b1afadab 			; <UNDEFINED> instruction: 0xb1afadab
 8017464:	b9b7b5b3 	ldmiblt	r7!, {r0, r1, r4, r5, r7, r8, sl, ip, sp, pc}
 8017468:	c1bfbdbb 			; <UNDEFINED> instruction: 0xc1bfbdbb
 801746c:	c9c7c5c3 	stmibgt	r7, {r0, r1, r6, r7, r8, sl, lr, pc}^
 8017470:	d2cfcdcb 	sbcle	ip, pc, #12992	; 0x32c0
 8017474:	dad8d6d4 	ble	764cfcc <__stack_size+0x764afcc>
 8017478:	e3e1dfdc 	mvn	sp, #220, 30	; 0x370
 801747c:	eceae8e5 	stcl	8, cr14, [sl], #916	; 0x394
 8017480:	f6f3f1ef 			; <UNDEFINED> instruction: 0xf6f3f1ef
 8017484:	fffdfaf8 			; <UNDEFINED> instruction: 0xfffdfaf8

08017488 <gamma25_0>:
	...
 801749c:	01010000 	mrseq	r0, (UNDEF: 1)
 80174a0:	01010101 	tsteq	r1, r1, lsl #2
 80174a4:	01010101 	tsteq	r1, r1, lsl #2
 80174a8:	02020201 	andeq	r0, r2, #268435456	; 0x10000000
 80174ac:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 80174b0:	03030302 	movweq	r0, #13058	; 0x3302
 80174b4:	04040303 	streq	r0, [r4], #-771	; 0xfffffcfd
 80174b8:	05040404 	streq	r0, [r4, #-1028]	; 0xfffffbfc
 80174bc:	06050505 	streq	r0, [r5], -r5, lsl #10
 80174c0:	07060606 	streq	r0, [r6, -r6, lsl #12]
 80174c4:	08070707 	stmdaeq	r7, {r0, r1, r2, r8, r9, sl}
 80174c8:	09090808 	stmdbeq	r9, {r3, fp}
 80174cc:	0a0a0a09 	beq	8299cf8 <__exidx_end+0x28194c>
 80174d0:	0c0c0b0b 			; <UNDEFINED> instruction: 0x0c0c0b0b
 80174d4:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 80174d8:	0f0f0f0e 	svceq	0x000f0f0e
 80174dc:	11111010 	tstne	r1, r0, lsl r0
 80174e0:	13131212 	tstne	r3, #536870913	; 0x20000001
 80174e4:	16151414 			; <UNDEFINED> instruction: 0x16151414
 80174e8:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 80174ec:	1a1a1919 	bne	869d958 <__exidx_end+0x6855ac>
 80174f0:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 80174f4:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 80174f8:	23222121 			; <UNDEFINED> instruction: 0x23222121
 80174fc:	26252424 	strtcs	r2, [r5], -r4, lsr #8
 8017500:	29282827 	stmdbcs	r8!, {r0, r1, r2, r5, fp, sp}
 8017504:	2d2c2b2a 	vstmdbcs	ip!, {d2-d22}
 8017508:	302f2e2e 	eorcc	r2, pc, lr, lsr #28
 801750c:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 8017510:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 8017514:	3c3b3a39 			; <UNDEFINED> instruction: 0x3c3b3a39
 8017518:	403f3e3d 	eorsmi	r3, pc, sp, lsr lr	; <UNPREDICTABLE>
 801751c:	45444341 	strbmi	r4, [r4, #-833]	; 0xfffffcbf
 8017520:	49484746 	stmdbmi	r8, {r1, r2, r6, r8, r9, sl, lr}^
 8017524:	4e4d4c4b 	cdpmi	12, 4, cr4, cr13, cr11, {2}
 8017528:	53525150 	cmppl	r2, #80, 2
 801752c:	59575655 	ldmdbpl	r7, {r0, r2, r4, r6, r9, sl, ip, lr}^
 8017530:	5e5d5b5a 	vmovpl.s8	r5, d13[2]
 8017534:	6362615f 	cmnvs	r2, #-1073741801	; 0xc0000017
 8017538:	69686665 	stmdbvs	r8!, {r0, r2, r5, r6, r9, sl, sp, lr}^
 801753c:	6f6e6c6b 	svcvs	0x006e6c6b
 8017540:	75747271 	ldrbvc	r7, [r4, #-625]!	; 0xfffffd8f
 8017544:	7c7a7977 			; <UNDEFINED> instruction: 0x7c7a7977
 8017548:	82817f7d 	addhi	r7, r1, #500	; 0x1f4
 801754c:	89878684 	stmibhi	r7, {r2, r7, r9, sl, pc}
 8017550:	908e8d8b 	addls	r8, lr, fp, lsl #27
 8017554:	97969492 			; <UNDEFINED> instruction: 0x97969492
 8017558:	9f9d9b99 	svcls	0x009d9b99
 801755c:	a6a5a3a1 	strtge	sl, [r5], r1, lsr #7
 8017560:	aeacaaa8 	vfmage.f32	s20, s25, s17
 8017564:	b6b4b2b0 			; <UNDEFINED> instruction: 0xb6b4b2b0
 8017568:	bfbdbab8 	svclt	0x00bdbab8
 801756c:	c7c5c3c1 	strbgt	ip, [r5, r1, asr #7]
 8017570:	d0ceccc9 	sbcle	ip, lr, r9, asr #25
 8017574:	d9d7d4d2 	ldmible	r7, {r1, r4, r6, r7, sl, ip, lr, pc}^
 8017578:	e2e0dddb 	rsc	sp, r0, #14016	; 0x36c0
 801757c:	ebe9e7e4 	bl	7a91514 <__stack_size+0x7a8f514>
 8017580:	f5f3f0ee 			; <UNDEFINED> instruction: 0xf5f3f0ee
 8017584:	fffdfaf8 			; <UNDEFINED> instruction: 0xfffdfaf8

08017588 <gamma25_5>:
 8017588:	01010100 	mrseq	r0, (UNDEF: 17)
 801758c:	01010101 	tsteq	r1, r1, lsl #2
 8017590:	01010101 	tsteq	r1, r1, lsl #2
 8017594:	01010101 	tsteq	r1, r1, lsl #2
 8017598:	01010101 	tsteq	r1, r1, lsl #2
 801759c:	01010101 	tsteq	r1, r1, lsl #2
 80175a0:	01010101 	tsteq	r1, r1, lsl #2
 80175a4:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 80175a8:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 80175ac:	03030302 	movweq	r0, #13058	; 0x3302
 80175b0:	03030303 	movweq	r0, #13059	; 0x3303
 80175b4:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 80175b8:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
 80175bc:	06060605 	streq	r0, [r6], -r5, lsl #12
 80175c0:	07070706 	streq	r0, [r7, -r6, lsl #14]
 80175c4:	08080807 	stmdaeq	r8, {r0, r1, r2, fp}
 80175c8:	0a090909 	beq	82599f4 <__exidx_end+0x241648>
 80175cc:	0b0b0a0a 	bleq	82d9dfc <__exidx_end+0x2c1a50>
 80175d0:	0c0c0c0b 	stceq	12, cr0, [ip], {11}
 80175d4:	0e0e0d0d 	cdpeq	13, 0, cr0, cr14, cr13, {0}
 80175d8:	100f0f0f 	andne	r0, pc, pc, lsl #30
 80175dc:	12111110 	andsne	r1, r1, #16, 2
 80175e0:	14131312 	ldrne	r1, [r3], #-786	; 0xfffffcee
 80175e4:	16161514 			; <UNDEFINED> instruction: 0x16161514
 80175e8:	18181717 	ldmdane	r8, {r0, r1, r2, r4, r8, r9, sl, ip}
 80175ec:	1b1a1a19 	blne	869de58 <__exidx_end+0x685aac>
 80175f0:	1e1d1c1c 	mrcne	12, 0, r1, cr13, cr12, {0}
 80175f4:	20201f1e 	eorcs	r1, r0, lr, lsl pc
 80175f8:	23232221 			; <UNDEFINED> instruction: 0x23232221
 80175fc:	26262524 	strtcs	r2, [r6], -r4, lsr #10
 8017600:	2a292827 	bcs	8a616a4 <__exidx_end+0xa492f8>
 8017604:	2d2c2b2b 	fstmdbxcs	ip!, {d2-d22}	;@ Deprecated
 8017608:	31302f2e 	teqcc	r0, lr, lsr #30
 801760c:	35343332 	ldrcc	r3, [r4, #-818]!	; 0xfffffcce
 8017610:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 8017614:	3d3c3a39 	vldmdbcc	ip!, {s6-s62}
 8017618:	41403f3e 	cmpmi	r0, lr, lsr pc
 801761c:	45444342 	strbmi	r4, [r4, #-834]	; 0xfffffcbe
 8017620:	4a494846 	bmi	9269740 <__exidx_end+0x1251394>
 8017624:	4f4e4c4b 	svcmi	0x004e4c4b
 8017628:	54535150 	ldrbpl	r5, [r3], #-336	; 0xfffffeb0
 801762c:	59585655 	ldmdbpl	r8, {r0, r2, r4, r6, r9, sl, ip, lr}^
 8017630:	5e5d5c5a 	mrcpl	12, 2, r5, cr13, cr10, {2}
 8017634:	64636160 	strbtvs	r6, [r3], #-352	; 0xfffffea0
 8017638:	6a686765 	bvs	9a313d4 <__exidx_end+0x1a19028>
 801763c:	706e6d6b 	rsbvc	r6, lr, fp, ror #26
 8017640:	76747371 			; <UNDEFINED> instruction: 0x76747371
 8017644:	7c7b7978 			; <UNDEFINED> instruction: 0x7c7b7978
 8017648:	8381807e 	orrhi	r8, r1, #126	; 0x7e
 801764c:	8a888685 	bhi	6239068 <__stack_size+0x6237068>
 8017650:	918f8d8b 	orrls	r8, pc, fp, lsl #27
 8017654:	98969492 	ldmls	r6, {r1, r4, r7, sl, ip, pc}
 8017658:	9f9d9c9a 	svcls	0x009d9c9a
 801765c:	a7a5a3a1 	strge	sl, [r5, r1, lsr #7]!
 8017660:	afadaba9 	svcge	0x00adaba9
 8017664:	b7b5b3b1 			; <UNDEFINED> instruction: 0xb7b5b3b1
 8017668:	bfbdbbb9 	svclt	0x00bdbbb9
 801766c:	c8c6c3c1 	stmiagt	r6, {r0, r6, r7, r8, r9, lr, pc}^
 8017670:	d0ceccca 	sbcle	ip, lr, sl, asr #25
 8017674:	d9d7d5d3 	ldmible	r7, {r0, r1, r4, r6, r7, r8, sl, ip, lr, pc}^
 8017678:	e3e0dedc 	mvn	sp, #220, 28	; 0xdc0
 801767c:	eceae7e5 	stcl	7, cr14, [sl], #916	; 0x394
 8017680:	f6f3f1ee 			; <UNDEFINED> instruction: 0xf6f3f1ee
 8017684:	fffdfbf8 			; <UNDEFINED> instruction: 0xfffdfbf8
 8017688:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
 801768c:	006e776f 	rsbeq	r7, lr, pc, ror #14
 8017690:	65646e55 	strbvs	r6, [r4, #-3669]!	; 0xfffff1ab
 8017694:	656e6966 	strbvs	r6, [lr, #-2406]!	; 0xfffff69a
 8017698:	 	andeq	r0, r0, #100	; 0x64

0801769a <CSWTCH.18>:
 801769a:	02020200 	andeq	r0, r2, #0, 4
 801769e:	04020202 	streq	r0, [r2], #-514	; 0xfffffdfe
 80176a2:	 	ldrbmi	r0, [r2, -r0, lsl #10]

080176a4 <PixelType::MAPS>:
 80176a4:	00424752 	subeq	r4, r2, r2, asr r7
 80176a8:	00474252 	subeq	r4, r7, r2, asr r2
 80176ac:	00425247 	subeq	r5, r2, r7, asr #4
 80176b0:	00524247 	subseq	r4, r2, r7, asr #4
 80176b4:	00475242 	subeq	r5, r7, r2, asr #4
 80176b8:	00524742 	subseq	r4, r2, r2, asr #14

080176bc <PixelType::TYPES>:
 80176bc:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 80176c0:	00003130 	andeq	r3, r0, r0, lsr r1
 80176c4:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 80176c8:	00003131 	andeq	r3, r0, r1, lsr r1
 80176cc:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 80176d0:	00003231 	andeq	r3, r0, r1, lsr r2
 80176d4:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 80176d8:	00423231 	subeq	r3, r2, r1, lsr r2
 80176dc:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 80176e0:	00003331 	andeq	r3, r0, r1, lsr r3
 80176e4:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 80176e8:	00003531 	andeq	r3, r0, r1, lsr r5
 80176ec:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 80176f0:	00003231 	andeq	r3, r0, r1, lsr r2
 80176f4:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 80176f8:	00573231 	subseq	r3, r7, r1, lsr r2
 80176fc:	31534355 	cmpcc	r3, r5, asr r3
 8017700:	00333039 	eorseq	r3, r3, r9, lsr r0
 8017704:	32534355 	subscc	r4, r3, #1409286145	; 0x54000001
 8017708:	00333039 	eorseq	r3, r3, r9, lsr r0
 801770c:	38385343 	ldmdacc	r8!, {r0, r1, r6, r8, r9, ip, lr}
 8017710:	00003231 	andeq	r3, r0, r1, lsr r2
 8017714:	31415041 	cmpcc	r1, r1, asr #32
 8017718:	00003230 	andeq	r3, r0, r0, lsr r2
 801771c:	38394b53 	ldmdacc	r9!, {r0, r1, r4, r6, r8, r9, fp, lr}
 8017720:	00003232 	andeq	r3, r0, r2, lsr r2
 8017724:	31383950 	teqcc	r8, r0, asr r9
 8017728:	00000033 	andeq	r0, r0, r3, lsr r0

0801772c <s_patternName>:
 801772c:	656e6f4e 	strbvs	r6, [lr, #-3918]!	; 0xfffff0b2
	...
 8017738:	61520000 	cmpvs	r2, r0
 801773c:	6f626e69 	svcvs	0x00626e69
 8017740:	79632077 	stmdbvc	r3!, {r0, r1, r2, r4, r5, r6, sp}^
 8017744:	00656c63 	rsbeq	r6, r5, r3, ror #24
 8017748:	61656854 	cmnvs	r5, r4, asr r8
 801774c:	20726574 	rsbscs	r6, r2, r4, ror r5
 8017750:	73616863 	cmnvc	r1, #6488064	; 0x630000
 8017754:	6f430065 	svcvs	0x00430065
 8017758:	72756f6c 	rsbsvc	r6, r5, #108, 30	; 0x1b0
 801775c:	70697720 	rsbvc	r7, r9, r0, lsr #14
 8017760:	00000065 	andeq	r0, r0, r5, rrx
 8017764:	6e616353 	mcrvs	3, 3, r6, cr1, cr3, {2}
 8017768:	0072656e 	rsbseq	r6, r2, lr, ror #10
 801776c:	00000000 	andeq	r0, r0, r0
 8017770:	61460000 	mrsvs	r0, (UNDEF: 70)
 8017774:	00006564 	andeq	r6, r0, r4, ror #10
	...

08017780 <gamma10_0>:
 8017780:	03020100 	movweq	r0, #8448	; 0x2100
 8017784:	07060504 	streq	r0, [r6, -r4, lsl #10]
 8017788:	0b0a0908 	bleq	8299bb0 <__exidx_end+0x281804>
 801778c:	0f0e0d0c 	svceq	0x000e0d0c
 8017790:	13121110 	tstne	r2, #16, 2
 8017794:	17161514 			; <UNDEFINED> instruction: 0x17161514
 8017798:	1b1a1918 	blne	869dc00 <__exidx_end+0x685854>
 801779c:	1f1e1d1c 	svcne	0x001e1d1c
 80177a0:	23222120 			; <UNDEFINED> instruction: 0x23222120
 80177a4:	27262524 	strcs	r2, [r6, -r4, lsr #10]!
 80177a8:	2b2a2928 	blcs	8aa1c50 <__exidx_end+0xa898a4>
 80177ac:	2f2e2d2c 	svccs	0x002e2d2c
 80177b0:	33323130 	teqcc	r2, #48, 2
 80177b4:	37363534 			; <UNDEFINED> instruction: 0x37363534
 80177b8:	3b3a3938 	blcc	8ea5ca0 <__exidx_end+0xe8d8f4>
 80177bc:	3f3e3d3c 	svccc	0x003e3d3c
 80177c0:	43424140 	movtmi	r4, #8512	; 0x2140
 80177c4:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 80177c8:	4b4a4948 	blmi	92a9cf0 <__exidx_end+0x1291944>
 80177cc:	4f4e4d4c 	svcmi	0x004e4d4c
 80177d0:	53525150 	cmppl	r2, #80, 2
 80177d4:	57565554 			; <UNDEFINED> instruction: 0x57565554
 80177d8:	5b5a5958 	blpl	96add40 <__exidx_end+0x1695994>
 80177dc:	5f5e5d5c 	svcpl	0x005e5d5c
 80177e0:	63626160 	cmnvs	r2, #96, 2
 80177e4:	67666564 	strbvs	r6, [r6, -r4, ror #10]!
 80177e8:	6b6a6968 	blvs	9ab1d90 <__exidx_end+0x1a999e4>
 80177ec:	6f6e6d6c 	svcvs	0x006e6d6c
 80177f0:	73727170 	cmnvc	r2, #112, 2
 80177f4:	77767574 			; <UNDEFINED> instruction: 0x77767574
 80177f8:	7b7a7978 	blvc	9eb5de0 <__exidx_end+0x1e9da34>
 80177fc:	7f7e7d7c 	svcvc	0x007e7d7c
 8017800:	83828180 	orrhi	r8, r2, #128, 2
 8017804:	87868584 	strhi	r8, [r6, r4, lsl #11]
 8017808:	8b8a8988 	blhi	62b9e30 <__stack_size+0x62b7e30>
 801780c:	8f8e8d8c 	svchi	0x008e8d8c
 8017810:	93929190 	orrsls	r9, r2, #144, 2	; 0x24
 8017814:	97969594 			; <UNDEFINED> instruction: 0x97969594
 8017818:	9b9a9998 	blls	66bde80 <__stack_size+0x66bbe80>
 801781c:	9f9e9d9c 	svcls	0x009e9d9c
 8017820:	a3a2a1a0 			; <UNDEFINED> instruction: 0xa3a2a1a0
 8017824:	a7a6a5a4 	strge	sl, [r6, r4, lsr #11]!
 8017828:	abaaa9a8 	blge	6ac1ed0 <__stack_size+0x6abfed0>
 801782c:	afaeadac 	svcge	0x00aeadac
 8017830:	b3b2b1b0 			; <UNDEFINED> instruction: 0xb3b2b1b0
 8017834:	b7b6b5b4 			; <UNDEFINED> instruction: 0xb7b6b5b4
 8017838:	bbbab9b8 	bllt	6ec5f20 <__stack_size+0x6ec3f20>
 801783c:	bfbebdbc 	svclt	0x00bebdbc
 8017840:	c3c2c1c0 	bicgt	ip, r2, #192, 2	; 0x30
 8017844:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
 8017848:	cbcac9c8 	blgt	72c9f70 <__stack_size+0x72c7f70>
 801784c:	cfcecdcc 	svcgt	0x00cecdcc
 8017850:	d3d2d1d0 	bicsle	sp, r2, #208, 2	; 0x34
 8017854:	d7d6d5d4 			; <UNDEFINED> instruction: 0xd7d6d5d4
 8017858:	dbdad9d8 	blle	76cdfc0 <__stack_size+0x76cbfc0>
 801785c:	dfdedddc 	svcle	0x00dedddc
 8017860:	e3e2e1e0 	mvn	lr, #224, 2	; 0x38
 8017864:	e7e6e5e4 	strb	lr, [r6, r4, ror #11]!
 8017868:	ebeae9e8 	bl	7ad2010 <__stack_size+0x7ad0010>
 801786c:	efeeedec 	svc	0x00eeedec
 8017870:	f3f2f1f0 	vsra.u64	<illegal reg q15.5>, q8, #14
 8017874:	f7f6f5f4 			; <UNDEFINED> instruction: 0xf7f6f5f4
 8017878:	fbfaf9f8 	blx	7ed6062 <__stack_size+0x7ed4062>
 801787c:	fffefdfc 			; <UNDEFINED> instruction: 0xfffefdfc
 8017880:	646e6962 	strbtvs	r6, [lr], #-2402	; 0xfffff69e
 8017884:	626e7500 	rsbvs	r7, lr, #0, 10
 8017888:	0a646e69 	beq	9933234 <__exidx_end+0x191ae88>
 801788c:	50524100 	subspl	r4, r2, r0, lsl #2
 8017890:	6f6f6c20 	svcvs	0x006f6c20
 8017894:	2070756b 	rsbscs	r7, r0, fp, ror #10
 8017898:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
 801789c:	2d206465 	cfstrscs	mvf6, [r0, #-404]!	; 0xfffffe6c
 80178a0:	6564203e 	strbvs	r2, [r4, #-62]!	; 0xffffffc2
 80178a4:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
 80178a8:	61672074 	smcvs	29188	; 0x7204
 80178ac:	61776574 	cmnvs	r7, r4, ror r5
 80178b0:	41000a79 	tstmi	r0, r9, ror sl
 80178b4:	6c205052 	stcvs	0, cr5, [r0], #-328	; 0xfffffeb8
 80178b8:	756b6f6f 	strbvc	r6, [fp, #-3951]!	; 0xfffff091
 80178bc:	61662070 	smcvs	25088	; 0x6200
 80178c0:	64656c69 	strbtvs	r6, [r5], #-3177	; 0xfffff397
 80178c4:	 	svcvs	0x0043000a

080178c6 <NetworkConst::MSG_MDNS_CONFIG>:
 80178c6:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 80178ca:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 80178ce:	20676e69 	rsbcs	r6, r7, r9, ror #28
 80178d2:	534e444d 	movtpl	r4, #58445	; 0xe44d
	...

080178d7 <NetworkConst::MSG_NETWORK_INIT>:
 80178d7:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 80178db:	206b726f 	rsbcs	r7, fp, pc, ror #4
 80178df:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 80178e3:	34323200 	ldrtcc	r3, [r2], #-512	; 0xfffffe00
 80178e7:	302e302e 	eorcc	r3, lr, lr, lsr #32
 80178eb:	3135322e 	teqcc	r5, lr, lsr #4
 80178ef:	63745f00 	cmnvs	r4, #0, 30
 80178f3:	6f6c2e70 	svcvs	0x006c2e70
 80178f7:	006c6163 	rsbeq	r6, ip, r3, ror #2
 80178fb:	7265735f 	rsbvc	r7, r5, #2080374785	; 0x7c000001
 80178ff:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
 8017903:	645f2e73 	ldrbvs	r2, [pc], #-3699	; 801790b <NetworkConst::MSG_NETWORK_INIT+0x34>
 8017907:	732d736e 			; <UNDEFINED> instruction: 0x732d736e
 801790b:	755f2e64 	ldrbvc	r2, [pc, #-3684]	; 8016aaf <ArtNetParamsConst::RDM_ENABLE_PORT+0x3d>
 801790f:	6c2e7064 	stcvs	0, cr7, [lr], #-400	; 0xfffffe70
 8017913:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 8017917:	4e446d00 	cdpmi	13, 4, cr6, cr4, cr0, {0}
 801791b:	20000a53 	andcs	r0, r0, r3, asr sl
 801791f:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 8017923:	6e6e7572 	mcrvs	5, 3, r7, cr14, cr2, {3}
 8017927:	0a676e69 	beq	99f32d3 <__exidx_end+0x19daf27>
 801792b:	614e2000 	mrsvs	r2, (UNDEF: 78)
 801792f:	3a20656d 	bcc	8830eeb <__exidx_end+0x818b3f>
 8017933:	0a732520 	beq	9ce0dbb <__exidx_end+0x1cc8a0f>
 8017937:	73252000 			; <UNDEFINED> instruction: 0x73252000
 801793b:	20642520 	rsbcs	r2, r4, r0, lsr #10
 801793f:	000a7325 	andeq	r7, sl, r5, lsr #6
 8017943:	30687465 	rsbcc	r7, r8, r5, ror #8
 8017947:	67696700 	strbvs	r6, [r9, -r0, lsl #14]!
 801794b:	76656461 	strbtvc	r6, [r5], -r1, ror #8
 801794f:	5f656369 	svcpl	0x00656369
 8017953:	74654e00 	strbtvc	r4, [r5], #-3584	; 0xfffff200
 8017957:	6b726f77 	blvs	9cb373b <__exidx_end+0x1c9b38f>
 801795b:	4820000a 	stmdami	r0!, {r1, r3}
 801795f:	6e74736f 	cdpvs	3, 7, cr7, cr4, cr15, {3}
 8017963:	20656d61 	rsbcs	r6, r5, r1, ror #26
 8017967:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801796b:	20000a73 	andcs	r0, r0, r3, ror sl
 801796f:	614e6649 	cmpvs	lr, r9, asr #12
 8017973:	2020656d 	eorcs	r6, r0, sp, ror #10
 8017977:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801797b:	203a6425 	eorscs	r6, sl, r5, lsr #8
 801797f:	000a7325 	andeq	r7, sl, r5, lsr #6
 8017983:	656e4920 	strbvs	r4, [lr, #-2336]!	; 0xfffff6e0
 8017987:	20202074 	eorcs	r2, r0, r4, ror r0
 801798b:	3a202020 	bcc	881fa13 <__exidx_end+0x807667>
 801798f:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 8017993:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017997:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801799b:	0a64252f 	beq	9920e5f <__exidx_end+0x1908ab3>
 801799f:	654e2000 	strbvs	r2, [lr, #-0]
 80179a3:	73616d74 	cmnvc	r1, #116, 26	; 0x1d00
 80179a7:	2020206b 	eorcs	r2, r0, fp, rrx
 80179ab:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 80179af:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 80179b3:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80179b7:	20000a64 	andcs	r0, r0, r4, ror #20
 80179bb:	65746147 	ldrbvs	r6, [r4, #-327]!	; 0xfffffeb9
 80179bf:	20796177 	rsbscs	r6, r9, r7, ror r1
 80179c3:	203a2020 	eorscs	r2, sl, r0, lsr #32
 80179c7:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80179cb:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80179cf:	0a64252e 	beq	9920e8f <__exidx_end+0x1908ae3>
 80179d3:	72422000 	subvc	r2, r2, #0
 80179d7:	6364616f 	cmnvs	r4, #-1073741797	; 0xc000001b
 80179db:	20747361 	rsbscs	r7, r4, r1, ror #6
 80179df:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 80179e3:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 80179e7:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80179eb:	20000a64 	andcs	r0, r0, r4, ror #20
 80179ef:	2063614d 	rsbcs	r6, r3, sp, asr #2
 80179f3:	20202020 	eorcs	r2, r0, r0, lsr #32
 80179f7:	203a2020 	eorscs	r2, sl, r0, lsr #32
 80179fb:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 80179ff:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 8017a03:	2e253a78 			; <UNDEFINED> instruction: 0x2e253a78
 8017a07:	253a7832 	ldrcs	r7, [sl, #-2098]!	; 0xfffff7ce
 8017a0b:	3a78322e 	bcc	9e242cb <__exidx_end+0x1e0bf1f>
 8017a0f:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8017a13:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 8017a17:	20000a78 	andcs	r0, r0, r8, ror sl
 8017a1b:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
 8017a1f:	20202020 	eorcs	r2, r0, r0, lsr #32
 8017a23:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8017a27:	000a6325 	andeq	r6, sl, r5, lsr #6
 8017a2b:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
 8017a2f:	49206369 	stmdbmi	r0!, {r0, r3, r5, r6, r8, r9, sp, lr}
 8017a33:	 	rsbvc	r0, r9, r0, asr r0

08017a35 <NetworkParamsConst::IP_ADDRESS>:
 8017a35:	615f7069 	cmpvs	pc, r9, rrx
 8017a39:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 8017a3d:	 	strvs	r7, [r0], #-883	; 0xfffffc8d

08017a40 <NetworkParamsConst::DEFAULT_GATEWAY>:
 8017a40:	61666564 	cmnvs	r6, r4, ror #10
 8017a44:	5f746c75 	svcpl	0x00746c75
 8017a48:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 8017a4c:	00796177 	rsbseq	r6, r9, r7, ror r1

08017a50 <NetworkParamsConst::DHCP_RETRY_TIME>:
 8017a50:	70636864 	rsbvc	r6, r3, r4, ror #16
 8017a54:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
 8017a58:	745f7972 	ldrbvc	r7, [pc], #-2418	; 8017a60 <NetworkParamsConst::HOSTNAME>
 8017a5c:	00656d69 	rsbeq	r6, r5, r9, ror #26

08017a60 <NetworkParamsConst::HOSTNAME>:
 8017a60:	74736f68 	ldrbtvc	r6, [r3], #-3944	; 0xfffff098
 8017a64:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

08017a69 <NetworkParamsConst::NET_MASK>:
 8017a69:	5f74656e 	svcpl	0x0074656e
 8017a6d:	6b73616d 	blvs	9cf0029 <__exidx_end+0x1cd7c7d>
	...

08017a72 <NetworkParamsConst::USE_DHCP>:
 8017a72:	5f657375 	svcpl	0x00657375
 8017a76:	70636864 	rsbvc	r6, r3, r4, ror #16
	...

08017a7b <NetworkParamsConst::FILE_NAME>:
 8017a7b:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 8017a7f:	2e6b726f 	cdpcs	2, 6, cr7, cr11, cr15, {3}
 8017a83:	00747874 	rsbseq	r7, r4, r4, ror r8
 8017a87:	65687445 	strbvs	r7, [r8, #-1093]!	; 0xfffffbbb
 8017a8b:	74656e72 	strbtvc	r6, [r5], #-3698	; 0xfffff18e
 8017a8f:	61747320 	cmnvs	r4, r0, lsr #6
 8017a93:	25007472 	strcs	r7, [r0, #-1138]	; 0xfffffb8e
 8017a97:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8017a9b:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8017a9f:	252f6425 	strcs	r6, [pc, #-1061]!	; 8017682 <gamma25_5+0xfa>
 8017aa3:	63252064 			; <UNDEFINED> instruction: 0x63252064
 8017aa7:	203a4e00 	eorscs	r4, sl, r0, lsl #28
 8017aab:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017aaf:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8017ab3:	0064252e 	rsbeq	r2, r4, lr, lsr #10
 8017ab7:	25203a47 	strcs	r3, [r0, #-2631]!	; 0xfffff5b9
 8017abb:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8017abf:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8017ac3:	46006425 	strmi	r6, [r0], -r5, lsr #8
 8017ac7:	776d7269 	strbvc	r7, [sp, -r9, ror #4]!
 8017acb:	20657261 	rsbcs	r7, r5, r1, ror #4
 8017acf:	2a2e2556 	bcs	8ba102f <__exidx_end+0xb88c83>
 8017ad3:	48440073 	stmdami	r4, {r0, r1, r4, r5, r6}^
 8017ad7:	72205043 	eorvc	r5, r0, #67	; 0x43
 8017adb:	77656e65 	strbvc	r6, [r5, -r5, ror #28]!
 8017adf:	00676e69 	rsbeq	r6, r7, r9, ror #28
 8017ae3:	50434844 	subpl	r4, r3, r4, asr #16
 8017ae7:	74657220 	strbtvc	r7, [r5], #-544	; 0xfffffde0
 8017aeb:	6e697972 			; <UNDEFINED> instruction: 0x6e697972
 8017aef:	654e0067 	strbvs	r0, [lr, #-103]	; 0xffffff99
 8017af3:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 8017af7:	6873206b 	ldmdavs	r3!, {r0, r1, r3, r5, r6, sp}^
 8017afb:	6f647475 	svcvs	0x00647475
 8017aff:	00006e77 	andeq	r6, r0, r7, ror lr
	...

08017b04 <pArray>:
 8017b04:	08017b98 	stmdaeq	r1, {r3, r4, r7, r8, r9, fp, ip, sp, lr}
 8017b08:	08017b54 	stmdaeq	r1, {r2, r4, r6, r8, r9, fp, ip, sp, lr}
 8017b0c:	08017a35 	stmdaeq	r1, {r0, r2, r4, r5, r9, fp, ip, sp, lr}
 8017b10:	08017b9e 	stmdaeq	r1, {r1, r2, r3, r4, r7, r8, r9, fp, ip, sp, lr}
 8017b14:	08017f96 	stmdaeq	r1, {r1, r2, r4, r7, r8, r9, sl, fp, ip, sp, lr}
 8017b18:	08017b5f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r8, r9, fp, ip, sp, lr}
 8017b1c:	08016a67 	stmdaeq	r1, {r0, r1, r2, r5, r6, r9, fp, sp, lr}
 8017b20:	08017a60 	stmdaeq	r1, {r5, r6, r9, fp, ip, sp, lr}
 8017b24:	08017ec9 	stmdaeq	r1, {r0, r3, r6, r7, r9, sl, fp, ip, sp, lr}
 8017b28:	08017ed9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8017b2c:	08017ee9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r9, sl, fp, ip, sp, lr}
 8017b30:	08017ef9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp, lr}
 8017b34:	08017a69 	stmdaeq	r1, {r0, r3, r5, r6, r9, fp, ip, sp, lr}
 8017b38:	08017f65 	stmdaeq	r1, {r0, r2, r5, r6, r8, r9, sl, fp, ip, sp, lr}
 8017b3c:	08016aba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r9, fp, sp, lr}
 8017b40:	08016ad2 	stmdaeq	r1, {r1, r4, r6, r7, r9, fp, sp, lr}
 8017b44:	08016aea 	stmdaeq	r1, {r1, r3, r5, r6, r7, r9, fp, sp, lr}
 8017b48:	08016b02 	stmdaeq	r1, {r1, r8, r9, fp, sp, lr}
 8017b4c:	08017a40 	stmdaeq	r1, {r6, r9, fp, ip, sp, lr}
 8017b50:	08017b6c 	stmdaeq	r1, {r2, r3, r5, r6, r8, r9, fp, ip, sp, lr}

08017b54 <DisplayUdfParamsConst::BOARD_NAME>:
 8017b54:	72616f62 	rsbvc	r6, r1, #392	; 0x188
 8017b58:	616e5f64 	cmnvs	lr, r4, ror #30
 8017b5c:	 	tstvs	r0, sp, ror #10

08017b5f <DisplayUdfParamsConst::ACTIVE_PORTS>:
 8017b5f:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 8017b63:	705f6576 	subsvc	r6, pc, r6, ror r5	; <UNPREDICTABLE>
 8017b67:	7374726f 	cmnvc	r4, #-268435450	; 0xf0000006
	...

08017b6c <DisplayUdfParamsConst::DMX_DIRECTION>:
 8017b6c:	5f786d64 	svcpl	0x00786d64
 8017b70:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8017b74:	6f697463 	svcvs	0x00697463
 8017b78:	 	ldclvs	0, cr0, [r3], #-440	; 0xfffffe48

08017b7a <DisplayUdfParamsConst::SLEEP_TIMEOUT>:
 8017b7a:	65656c73 	strbvs	r6, [r5, #-3187]!	; 0xfffff38d
 8017b7e:	69745f70 	ldmdbvs	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 8017b82:	756f656d 	strbvc	r6, [pc, #-1389]!	; 801761d <gamma25_5+0x95>
 8017b86:	 	stclvs	0, cr0, [r6], #-464	; 0xfffffe30

08017b88 <DisplayUdfParamsConst::FLIP_VERTICALLY>:
 8017b88:	70696c66 	rsbvc	r6, r9, r6, ror #24
 8017b8c:	7265765f 	rsbvc	r7, r5, #99614720	; 0x5f00000
 8017b90:	61636974 	smcvs	13972	; 0x3694
 8017b94:	00796c6c 	rsbseq	r6, r9, ip, ror #24

08017b98 <DisplayUdfParamsConst::TITLE>:
 8017b98:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 8017b9c:	 	ldrbvs	r0, [r6, #-101]!	; 0xffffff9b

08017b9e <DisplayUdfParamsConst::VERSION>:
 8017b9e:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8017ba2:	006e6f69 	rsbeq	r6, lr, r9, ror #30

08017ba6 <DisplayUdfParamsConst::FILE_NAME>:
 8017ba6:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8017baa:	2e79616c 	rpwcsez	f6, f1, #4.0
 8017bae:	00747874 	rsbseq	r7, r4, r4, ror r8

08017bb2 <DisplayUdfParamsConst::INTENSITY>:
 8017bb2:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 8017bb6:	7469736e 	strbtvc	r7, [r9], #-878	; 0xfffffc92
 8017bba:	20200079 	eorcs	r0, r0, r9, ror r0
 8017bbe:	4f002020 	svcmi	0x00002020
 8017bc2:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 8017bc6:	253a6432 	ldrcs	r6, [sl, #-1074]!	; 0xfffffbce
 8017bca:	64253a64 	strtvs	r3, [r5], #-2660	; 0xfffff59c
 8017bce:	20732520 	rsbscs	r2, r3, r0, lsr #10
 8017bd2:	4f007325 	svcmi	0x00007325
 8017bd6:	203a6425 	eorscs	r6, sl, r5, lsr #8
 8017bda:	64322e25 	ldrtvs	r2, [r2], #-3621	; 0xfffff1db
 8017bde:	3a64253a 	bcc	99210ce <__exidx_end+0x1908d22>
 8017be2:	25206425 	strcs	r6, [r0, #-1061]!	; 0xfffffbdb
 8017be6:	73252073 			; <UNDEFINED> instruction: 0x73252073
 8017bea:	3a632500 	bcc	98e0ff2 <__exidx_end+0x18c8c46>
 8017bee:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 8017bf2:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017bf6:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8017bfa:	3a504100 	bcc	9428002 <__exidx_end+0x140fc56>
 8017bfe:	00642520 	rsbeq	r2, r4, r0, lsr #10
 8017c02:	44206f4e 	strtmi	r6, [r0], #-3918	; 0xfffff0b2
 8017c06:	4400584d 	strmi	r5, [r0], #-2125	; 0xfffff7b3
 8017c0a:	2520584d 	strcs	r5, [r0, #-2125]!	; 0xfffff7b3
 8017c0e:	64252073 	strtvs	r2, [r5], #-115	; 0xffffff8d
	...

08017c14 <s_aStorSize>:
 8017c14:	00000060 	andeq	r0, r0, r0, rrx
 8017c18:	00000090 	muleq	r0, r0, r0
 8017c1c:	00000020 	andeq	r0, r0, r0, lsr #32
 8017c20:	00000040 	andeq	r0, r0, r0, asr #32
 8017c24:	00000060 	andeq	r0, r0, r0, rrx
 8017c28:	00000040 	andeq	r0, r0, r0, asr #32
 8017c2c:	00000020 	andeq	r0, r0, r0, lsr #32
 8017c30:	00000020 	andeq	r0, r0, r0, lsr #32
 8017c34:	000001e0 	andeq	r0, r0, r0, ror #3
 8017c38:	00000040 	andeq	r0, r0, r0, asr #32
 8017c3c:	00000020 	andeq	r0, r0, r0, lsr #32
 8017c40:	00000060 	andeq	r0, r0, r0, rrx
 8017c44:	00000030 	andeq	r0, r0, r0, lsr r0
 8017c48:	00000020 	andeq	r0, r0, r0, lsr #32
 8017c4c:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
 8017c50:	00000030 	andeq	r0, r0, r0, lsr r0
 8017c54:	00000040 	andeq	r0, r0, r0, asr #32
 8017c58:	00000020 	andeq	r0, r0, r0, lsr #32
 8017c5c:	00000060 	andeq	r0, r0, r0, rrx
 8017c60:	00000020 	andeq	r0, r0, r0, lsr #32
 8017c64:	00000400 	andeq	r0, r0, r0, lsl #8
 8017c68:	00000020 	andeq	r0, r0, r0, lsr #32
 8017c6c:	00000020 	andeq	r0, r0, r0, lsr #32
 8017c70:	00000040 	andeq	r0, r0, r0, asr #32
 8017c74:	00000060 	andeq	r0, r0, r0, rrx
 8017c78:	00000020 	andeq	r0, r0, r0, lsr #32
 8017c7c:	00000020 	andeq	r0, r0, r0, lsr #32
 8017c80:	000000c0 	andeq	r0, r0, r0, asr #1

08017c84 <vtable for StoreDisplayUdf>:
	...
 8017c8c:	0801275d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, r9, sl, sp}
 8017c90:	080127a9 	stmdaeq	r1, {r0, r3, r5, r7, r8, r9, sl, sp}
 8017c94:	08012785 	stmdaeq	r1, {r0, r2, r7, r8, r9, sl, sp}
 8017c98:	08012761 	stmdaeq	r1, {r0, r5, r6, r8, r9, sl, sp}

08017c9c <vtable for StoreNetwork>:
	...
 8017ca4:	080127c9 	stmdaeq	r1, {r0, r3, r6, r7, r8, r9, sl, sp}
 8017ca8:	080128dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, fp, sp}
 8017cac:	080127d1 	stmdaeq	r1, {r0, r4, r6, r7, r8, r9, sl, sp}
 8017cb0:	080128f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, fp, sp}
 8017cb4:	08012881 	stmdaeq	r1, {r0, r7, fp, sp}
 8017cb8:	08012855 	stmdaeq	r1, {r0, r2, r4, r6, fp, sp}
 8017cbc:	08012825 	stmdaeq	r1, {r0, r2, r5, fp, sp}
 8017cc0:	080128ad 	stmdaeq	r1, {r0, r2, r3, r5, r7, fp, sp}
 8017cc4:	080127f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, r9, sl, sp}
 8017cc8:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 8017ccc:	00000000 	andeq	r0, r0, r0
 8017cd0:	080127cb 	stmdaeq	r1, {r0, r1, r3, r6, r7, r8, r9, sl, sp}
 8017cd4:	080128e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, fp, sp}
 8017cd8:	080128a5 	stmdaeq	r1, {r0, r2, r5, r7, fp, sp}
 8017cdc:	08012879 	stmdaeq	r1, {r0, r3, r4, r5, r6, fp, sp}
 8017ce0:	0801284d 	stmdaeq	r1, {r0, r2, r3, r6, fp, sp}
 8017ce4:	080128d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, fp, sp}
 8017ce8:	0801281d 	stmdaeq	r1, {r0, r2, r3, r4, fp, sp}

08017cec <vtable for StoreRemoteConfig>:
	...
 8017cf4:	08012929 	stmdaeq	r1, {r0, r3, r5, r8, fp, sp}
 8017cf8:	08012975 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, fp, sp}
 8017cfc:	08012951 	stmdaeq	r1, {r0, r4, r6, r8, fp, sp}
 8017d00:	0801292d 	stmdaeq	r1, {r0, r2, r3, r5, r8, fp, sp}

08017d04 <vtable for StoreArtNet>:
	...
 8017d0c:	080129eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r8, fp, sp}
 8017d10:	08012c79 	stmdaeq	r1, {r0, r3, r4, r5, r6, sl, fp, sp}
 8017d14:	080129f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r8, fp, sp}
 8017d18:	08012c59 	stmdaeq	r1, {r0, r3, r4, r6, sl, fp, sp}
 8017d1c:	08012ba5 	stmdaeq	r1, {r0, r2, r5, r7, r8, r9, fp, sp}
 8017d20:	08012b75 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, r9, fp, sp}
 8017d24:	08012b49 	stmdaeq	r1, {r0, r3, r6, r8, r9, fp, sp}
 8017d28:	08012a15 	stmdaeq	r1, {r0, r2, r4, r9, fp, sp}
 8017d2c:	08012a5d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r9, fp, sp}
 8017d30:	08012a8d 	stmdaeq	r1, {r0, r2, r3, r7, r9, fp, sp}
 8017d34:	08012ac1 	stmdaeq	r1, {r0, r6, r7, r9, fp, sp}
 8017d38:	08012b05 	stmdaeq	r1, {r0, r2, r8, r9, fp, sp}
 8017d3c:	08012bd9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r8, r9, fp, sp}
 8017d40:	080129e7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r8, fp, sp}
 8017d44:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 8017d48:	00000000 	andeq	r0, r0, r0
 8017d4c:	080129ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r8, fp, sp}
 8017d50:	08012c85 	stmdaeq	r1, {r0, r2, r7, sl, fp, sp}
 8017d54:	08012bd1 	stmdaeq	r1, {r0, r4, r6, r7, r8, r9, fp, sp}
 8017d58:	08012b9d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, r9, fp, sp}
 8017d5c:	08012b6d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r8, r9, fp, sp}
 8017d60:	08012a55 	stmdaeq	r1, {r0, r2, r4, r6, r9, fp, sp}
 8017d64:	08012a85 	stmdaeq	r1, {r0, r2, r7, r9, fp, sp}
 8017d68:	08012ab9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r9, fp, sp}
 8017d6c:	080129e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, fp, sp}
 8017d70:	08012afd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r9, fp, sp}
 8017d74:	08012b41 	stmdaeq	r1, {r0, r6, r8, r9, fp, sp}
 8017d78:	08012c51 	stmdaeq	r1, {r0, r4, r6, sl, fp, sp}

08017d7c <vtable for StorePixelDmx>:
	...
 8017d84:	08012cb1 	stmdaeq	r1, {r0, r4, r5, r7, sl, fp, sp}
 8017d88:	08012e1d 	stmdaeq	r1, {r0, r2, r3, r4, r9, sl, fp, sp}
 8017d8c:	08012cb9 	stmdaeq	r1, {r0, r3, r4, r5, r7, sl, fp, sp}
 8017d90:	08012e31 	stmdaeq	r1, {r0, r4, r5, r9, sl, fp, sp}
 8017d94:	08012de9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, sl, fp, sp}
 8017d98:	08012db5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, sl, fp, sp}
 8017d9c:	08012d7d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r8, sl, fp, sp}
 8017da0:	08012d45 	stmdaeq	r1, {r0, r2, r6, r8, sl, fp, sp}
 8017da4:	08012d11 	stmdaeq	r1, {r0, r4, r8, sl, fp, sp}
 8017da8:	08012cdd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, sl, fp, sp}
 8017dac:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 8017db0:	00000000 	andeq	r0, r0, r0
 8017db4:	08012cb3 	stmdaeq	r1, {r0, r1, r4, r5, r7, sl, fp, sp}
 8017db8:	08012e29 	stmdaeq	r1, {r0, r3, r5, r9, sl, fp, sp}
 8017dbc:	08012e15 	stmdaeq	r1, {r0, r2, r4, r9, sl, fp, sp}
 8017dc0:	08012de1 	stmdaeq	r1, {r0, r5, r6, r7, r8, sl, fp, sp}
 8017dc4:	08012dad 	stmdaeq	r1, {r0, r2, r3, r5, r7, r8, sl, fp, sp}
 8017dc8:	08012d75 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, sl, fp, sp}
 8017dcc:	08012d3d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r8, sl, fp, sp}
 8017dd0:	08012d09 	stmdaeq	r1, {r0, r3, r8, sl, fp, sp}
 8017dd4:	3a434d46 	bcc	90eb2f4 <__exidx_end+0x10d2f48>
 8017dd8:	74654420 	strbtvc	r4, [r5], #-1056	; 0xfffffbe0
 8017ddc:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0xfffffc9b
 8017de0:	73252064 			; <UNDEFINED> instruction: 0x73252064
 8017de4:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
 8017de8:	6f742068 	svcvs	0x00742068
 8017dec:	206c6174 	rsbcs	r6, ip, r4, ror r1
 8017df0:	62206425 	eorvs	r6, r0, #620756992	; 0x25000000
 8017df4:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
 8017df8:	64255b20 	strtvs	r5, [r5], #-2848	; 0xfffff4e0
 8017dfc:	5d426b20 	vstrpl	d22, [r2, #-128]	; 0xffffff80
 8017e00:	 	cmnvs	r7, sl

08017e02 <DevicesParamsConst::GAMMA_VALUE>:
 8017e02:	6d6d6167 	stfvse	f6, [sp, #-412]!	; 0xfffffe64
 8017e06:	61765f61 	cmnvs	r6, r1, ror #30
 8017e0a:	0065756c 	rsbeq	r7, r5, ip, ror #10

08017e0e <DevicesParamsConst::SPI_SPEED_HZ>:
 8017e0e:	636f6c63 	cmnvs	pc, #25344	; 0x6300
 8017e12:	70735f6b 	rsbsvc	r5, r3, fp, ror #30
 8017e16:	5f646565 	svcpl	0x00646565
 8017e1a:	 	strvc	r7, [r0], #-2664	; 0xfffff598

08017e1d <DevicesParamsConst::TEST_PATTERN>:
 8017e1d:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
 8017e21:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
 8017e25:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
	...

08017e2a <DevicesParamsConst::GROUPING_COUNT>:
 8017e2a:	5f64656c 	svcpl	0x0064656c
 8017e2e:	756f7267 	strbvc	r7, [pc, #-615]!	; 8017bcf <DisplayUdfParamsConst::INTENSITY+0x1d>
 8017e32:	6f635f70 	svcvs	0x00635f70
 8017e36:	00746e75 	rsbseq	r6, r4, r5, ror lr

08017e3a <DevicesParamsConst::GAMMA_CORRECTION>:
 8017e3a:	6d6d6167 	stfvse	f6, [sp, #-412]!	; 0xfffffe64
 8017e3e:	6f635f61 	svcvs	0x00635f61
 8017e42:	63657272 	cmnvs	r5, #536870919	; 0x20000007
 8017e46:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
	...

08017e4b <DevicesParamsConst::GLOBAL_BRIGHTNESS>:
 8017e4b:	626f6c67 	rsbvs	r6, pc, #26368	; 0x6700
 8017e4f:	625f6c61 	subsvs	r6, pc, #24832	; 0x6100
 8017e53:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 8017e57:	73656e74 	cmnvc	r5, #116, 28	; 0x740
 8017e5b:	 	strbvs	r0, [ip, #-115]!	; 0xffffff8d

08017e5d <DevicesParamsConst::MAP>:
 8017e5d:	5f64656c 	svcpl	0x0064656c
 8017e61:	5f626772 	svcpl	0x00626772
 8017e65:	7070616d 	rsbsvc	r6, r0, sp, ror #2
 8017e69:	00676e69 	rsbeq	r6, r7, r9, ror #28

08017e6d <DevicesParamsConst::TYPE>:
 8017e6d:	5f64656c 	svcpl	0x0064656c
 8017e71:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
	...

08017e76 <DevicesParamsConst::COUNT>:
 8017e76:	5f64656c 	svcpl	0x0064656c
 8017e7a:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 8017e7e:	 	strbvs	r0, [ip, #-116]!	; 0xffffff8c

08017e80 <DevicesParamsConst::LED_T0H>:
 8017e80:	5f64656c 	svcpl	0x0064656c
 8017e84:	00683074 	rsbeq	r3, r8, r4, ror r0

08017e88 <DevicesParamsConst::LED_T1H>:
 8017e88:	5f64656c 	svcpl	0x0064656c
 8017e8c:	00683174 	rsbeq	r3, r8, r4, ror r1

08017e90 <DevicesParamsConst::FILE_NAME>:
 8017e90:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 8017e94:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 8017e98:	00747874 	rsbseq	r7, r4, r4, ror r8
 8017e9c:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8017ea0:	6425223a 	strtvs	r2, [r5], #-570	; 0xfffffdc6
 8017ea4:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8017ea8:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017eac:	002c2264 	eoreq	r2, ip, r4, ror #4
 8017eb0:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
 8017eb4:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017eb8:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8017ebc:	0a64252e 	beq	992137c <__exidx_end+0x1908fd0>
 8017ec0:	25202300 	strcs	r2, [r0, #-768]!	; 0xfffffd00
 8017ec4:	0a232073 	beq	88e0098 <__exidx_end+0x8c7cec>
	...

08017ec9 <LightSetParamsConst::UNIVERSE_PORT>:
 8017ec9:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8017ecd:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8017ed1:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8017ed5:	00615f74 	rsbeq	r5, r1, r4, ror pc
 8017ed9:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8017edd:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8017ee1:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8017ee5:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8017ee9:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8017eed:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8017ef1:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8017ef5:	00635f74 	rsbeq	r5, r3, r4, ror pc
 8017ef9:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8017efd:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8017f01:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8017f05:	00645f74 	rsbeq	r5, r4, r4, ror pc

08017f09 <LightSetParamsConst::START_UNI_PORT>:
 8017f09:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8017f0d:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 8017f11:	6f705f69 	svcvs	0x00705f69
 8017f15:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 8017f19:	00000000 	andeq	r0, r0, r0

08017f1d <LightSetParamsConst::MERGE_MODE_PORT>:
 8017f1d:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 8017f21:	6f6d5f65 	svcvs	0x006d5f65
 8017f25:	705f6564 	subsvc	r6, pc, r4, ror #10
 8017f29:	5f74726f 	svcpl	0x0074726f
 8017f2d:	656d0061 	strbvs	r0, [sp, #-97]!	; 0xffffff9f
 8017f31:	5f656772 	svcpl	0x00656772
 8017f35:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 8017f39:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8017f3d:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8017f41:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 8017f45:	6f6d5f65 	svcvs	0x006d5f65
 8017f49:	705f6564 	subsvc	r6, pc, r4, ror #10
 8017f4d:	5f74726f 	svcpl	0x0074726f
 8017f51:	656d0063 	strbvs	r0, [sp, #-99]!	; 0xffffff9d
 8017f55:	5f656772 	svcpl	0x00656772
 8017f59:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 8017f5d:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8017f61:	00645f74 	rsbeq	r5, r4, r4, ror pc

08017f65 <LightSetParamsConst::DMX_START_ADDRESS>:
 8017f65:	5f786d64 	svcpl	0x00786d64
 8017f69:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8017f6d:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xfffff08c
 8017f71:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 8017f75:	 	stmdbvs	r4!, {r0, r1, r4, r5, r6}^

08017f77 <LightSetParamsConst::DISABLE_MERGE_TIMEOUT>:
 8017f77:	61736964 	cmnvs	r3, r4, ror #18
 8017f7b:	5f656c62 	svcpl	0x00656c62
 8017f7f:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 8017f83:	69745f65 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 8017f87:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8017a22 <NetworkConst::MSG_NETWORK_INIT+0x14b>
 8017f8b:	 	smcvs	24580	; 0x6004

08017f8d <LightSetParamsConst::FAILSAFE>:
 8017f8d:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
 8017f91:	65666173 	strbvs	r6, [r6, #-371]!	; 0xfffffe8d
	...

08017f96 <LightSetParamsConst::UNIVERSE>:
 8017f96:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8017f9a:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
	...

08017f9f <LightSetParamsConst::DIRECTION>:
 8017f9f:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8017fa3:	6f697463 	svcvs	0x00697463
 8017fa7:	6f705f6e 	svcvs	0x00705f6e
 8017fab:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
 8017faf:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 8017fb3:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8017fb7:	5f6e6f69 	svcpl	0x006e6f69
 8017fbb:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8017fbf:	0000625f 	andeq	r6, r0, pc, asr r2
 8017fc3:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8017fc7:	6f697463 	svcvs	0x00697463
 8017fcb:	6f705f6e 	svcvs	0x00705f6e
 8017fcf:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
 8017fd3:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 8017fd7:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8017fdb:	5f6e6f69 	svcpl	0x006e6f69
 8017fdf:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8017fe3:	0000645f 	andeq	r6, r0, pc, asr r4
 8017fe7:	64206f4e 	strtvs	r6, [r0], #-3918	; 0xfffff0b2
 8017feb:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 8017fef:	66207961 	strtvs	r7, [r0], -r1, ror #18
 8017ff3:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 8017ff7:	31485300 	mrscc	r5, (UNDEF: 120)
 8017ffb:	00363031 	eorseq	r3, r6, r1, lsr r0
 8017fff:	31445353 	cmpcc	r4, r3, asr r3
 8018003:	00363033 	eorseq	r3, r6, r3, lsr r0
 8018007:	28207325 	stmdacs	r0!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801800b:	252c6425 	strcs	r6, [ip, #-1061]!	; 0xfffffbdb
 801800f:	000a2964 	andeq	r2, sl, r4, ror #18
 8018013:	aaeeaa40 	bge	7bc291b <__stack_size+0x7bc091b>
 8018017:	000000ee 	andeq	r0, r0, lr, ror #1
	...

0801801c <_OledFont8x6>:
 801801c:	00000040 	andeq	r0, r0, r0, asr #32
 8018020:	40000000 	andmi	r0, r0, r0
 8018024:	005f0000 	subseq	r0, pc, r0
 8018028:	00400000 	subeq	r0, r0, r0
 801802c:	00070007 	andeq	r0, r7, r7
 8018030:	7f144000 	svcvc	0x00144000
 8018034:	00147f14 	andseq	r7, r4, r4, lsl pc
 8018038:	7f2a2440 	svcvc	0x002a2440
 801803c:	4000122a 	andmi	r1, r0, sl, lsr #4
 8018040:	64081323 	strvs	r1, [r8], #-803	; 0xfffffcdd
 8018044:	36400062 	strbcc	r0, [r0], -r2, rrx
 8018048:	50205649 	eorpl	r5, r0, r9, asr #12
 801804c:	08004000 	stmdaeq	r0, {lr}
 8018050:	00000307 	andeq	r0, r0, r7, lsl #6
 8018054:	221c0040 	andscs	r0, ip, #64	; 0x40
 8018058:	40000041 	andmi	r0, r0, r1, asr #32
 801805c:	1c224100 	stfnes	f4, [r2], #-0
 8018060:	2a400000 	bcs	9018068 <__exidx_end+0xfffcbc>
 8018064:	2a1c7f1c 	bcs	8737cdc <__exidx_end+0x71f930>
 8018068:	08084000 	stmdaeq	r8, {lr}
 801806c:	0008083e 	andeq	r0, r8, lr, lsr r8
 8018070:	70800040 	addvc	r0, r0, r0, asr #32
 8018074:	40000030 	andmi	r0, r0, r0, lsr r0
 8018078:	08080808 	stmdaeq	r8, {r3, fp}
 801807c:	00400008 	subeq	r0, r0, r8
 8018080:	00606000 	rsbeq	r6, r0, r0
 8018084:	10204000 	eorne	r4, r0, r0
 8018088:	00020408 	andeq	r0, r2, r8, lsl #8
 801808c:	49513e40 	ldmdbmi	r1, {r6, r9, sl, fp, ip, sp}^
 8018090:	40003e45 	andmi	r3, r0, r5, asr #28
 8018094:	407f4200 	rsbsmi	r4, pc, r0, lsl #4
 8018098:	72400000 	subvc	r0, r0, #0
 801809c:	46494949 	strbmi	r4, [r9], -r9, asr #18
 80180a0:	41214000 			; <UNDEFINED> instruction: 0x41214000
 80180a4:	00334d49 	eorseq	r4, r3, r9, asr #26
 80180a8:	12141840 	andsne	r1, r4, #64, 16	; 0x400000
 80180ac:	4000107f 	andmi	r1, r0, pc, ror r0
 80180b0:	45454527 	strbmi	r4, [r5, #-1319]	; 0xfffffad9
 80180b4:	3c400039 	mcrrcc	0, 3, r0, r0, cr9
 80180b8:	3149494a 	cmpcc	r9, sl, asr #18
 80180bc:	21414000 	mrscs	r4, (UNDEF: 65)
 80180c0:	00070911 	andeq	r0, r7, r1, lsl r9
 80180c4:	49493640 	stmdbmi	r9, {r6, r9, sl, ip, sp}^
 80180c8:	40003649 	andmi	r3, r0, r9, asr #12
 80180cc:	29494946 	stmdbcs	r9, {r1, r2, r6, r8, fp, lr}^
 80180d0:	0040001e 	subeq	r0, r0, lr, lsl r0
 80180d4:	00001400 	andeq	r1, r0, r0, lsl #8
 80180d8:	40004000 	andmi	r4, r0, r0
 80180dc:	00000034 	andeq	r0, r0, r4, lsr r0
 80180e0:	14080040 	strne	r0, [r8], #-64	; 0xffffffc0
 80180e4:	40004122 	andmi	r4, r0, r2, lsr #2
 80180e8:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec
 80180ec:	00400014 	subeq	r0, r0, r4, lsl r0
 80180f0:	08142241 	ldmdaeq	r4, {r0, r6, r9, sp}
 80180f4:	01024000 	mrseq	r4, (UNDEF: 2)
 80180f8:	00060959 	andeq	r0, r6, r9, asr r9
 80180fc:	5d413e40 	stclpl	14, cr3, [r1, #-256]	; 0xffffff00
 8018100:	40004e59 	andmi	r4, r0, r9, asr lr
 8018104:	1211127c 	andsne	r1, r1, #124, 4	; 0xc0000007
 8018108:	7f40007c 	svcvc	0x0040007c
 801810c:	36494949 	strbcc	r4, [r9], -r9, asr #18
 8018110:	413e4000 	teqmi	lr, r0
 8018114:	00224141 	eoreq	r4, r2, r1, asr #2
 8018118:	41417f40 	cmpmi	r1, r0, asr #30
 801811c:	40003e41 	andmi	r3, r0, r1, asr #28
 8018120:	4949497f 	stmdbmi	r9, {r0, r1, r2, r3, r4, r5, r6, r8, fp, lr}^
 8018124:	7f400041 	svcvc	0x00400041
 8018128:	01090909 	tsteq	r9, r9, lsl #18
 801812c:	413e4000 	teqmi	lr, r0
 8018130:	00735141 	rsbseq	r5, r3, r1, asr #2
 8018134:	08087f40 	stmdaeq	r8, {r6, r8, r9, sl, fp, ip, sp, lr}
 8018138:	40007f08 	andmi	r7, r0, r8, lsl #30
 801813c:	417f4100 	cmnmi	pc, r0, lsl #2
 8018140:	20400000 	subcs	r0, r0, r0
 8018144:	013f4140 	teqeq	pc, r0, asr #2
 8018148:	087f4000 	ldmdaeq	pc!, {lr}^	; <UNPREDICTABLE>
 801814c:	00412214 	subeq	r2, r1, r4, lsl r2
 8018150:	40407f40 	submi	r7, r0, r0, asr #30
 8018154:	40004040 	andmi	r4, r0, r0, asr #32
 8018158:	021c027f 	andseq	r0, ip, #-268435449	; 0xf0000007
 801815c:	7f40007f 	svcvc	0x0040007f
 8018160:	7f100804 	svcvc	0x00100804
 8018164:	413e4000 	teqmi	lr, r0
 8018168:	003e4141 	eorseq	r4, lr, r1, asr #2
 801816c:	09097f40 	stmdbeq	r9, {r6, r8, r9, sl, fp, ip, sp, lr}
 8018170:	40000609 	andmi	r0, r0, r9, lsl #12
 8018174:	2151413e 	cmpcs	r1, lr, lsr r1
 8018178:	7f40005e 	svcvc	0x0040005e
 801817c:	46291909 	strtmi	r1, [r9], -r9, lsl #18
 8018180:	49264000 	stmdbmi	r6!, {lr}
 8018184:	00324949 	eorseq	r4, r2, r9, asr #18
 8018188:	7f010340 	svcvc	0x00010340
 801818c:	40000301 	andmi	r0, r0, r1, lsl #6
 8018190:	4040403f 	submi	r4, r0, pc, lsr r0
 8018194:	1f40003f 	svcne	0x0040003f
 8018198:	1f204020 	svcne	0x00204020
 801819c:	403f4000 	eorsmi	r4, pc, r0
 80181a0:	003f4038 	eorseq	r4, pc, r8, lsr r0	; <UNPREDICTABLE>
 80181a4:	08146340 	ldmdaeq	r4, {r6, r8, r9, sp, lr}
 80181a8:	40006314 	andmi	r6, r0, r4, lsl r3
 80181ac:	04780403 	ldrbteq	r0, [r8], #-1027	; 0xfffffbfd
 80181b0:	61400003 	cmpvs	r0, r3
 80181b4:	434d4959 	movtmi	r4, #55641	; 0xd959
 80181b8:	7f004000 	svcvc	0x00004000
 80181bc:	00414141 	subeq	r4, r1, r1, asr #2
 80181c0:	08040240 	stmdaeq	r4, {r6, r9}
 80181c4:	40002010 	andmi	r2, r0, r0, lsl r0
 80181c8:	41414100 	mrsmi	r4, (UNDEF: 81)
 80181cc:	0440007f 	strbeq	r0, [r0], #-127	; 0xffffff81
 80181d0:	04020102 	streq	r0, [r2], #-258	; 0xfffffefe
 80181d4:	40404000 	submi	r4, r0, r0
 80181d8:	00404040 	subeq	r4, r0, r0, asr #32
 80181dc:	07030040 	streq	r0, [r3, -r0, asr #32]
 80181e0:	40000008 	andmi	r0, r0, r8
 80181e4:	78545420 	ldmdavc	r4, {r5, sl, ip, lr}^
 80181e8:	7f400040 	svcvc	0x00400040
 80181ec:	38444428 	stmdacc	r4, {r3, r5, sl, lr}^
 80181f0:	44384000 	ldrtmi	r4, [r8], #-0
 80181f4:	00284444 	eoreq	r4, r8, r4, asr #8
 80181f8:	44443840 	strbmi	r3, [r4], #-2112	; 0xfffff7c0
 80181fc:	40007f28 	andmi	r7, r0, r8, lsr #30
 8018200:	54545438 	ldrbpl	r5, [r4], #-1080	; 0xfffffbc8
 8018204:	00400018 	subeq	r0, r0, r8, lsl r0
 8018208:	02097e08 	andeq	r7, r9, #8, 28	; 0x80
 801820c:	a4184000 	ldrge	r4, [r8], #-0
 8018210:	00789ca4 	rsbseq	r9, r8, r4, lsr #25
 8018214:	04087f40 	streq	r7, [r8], #-3904	; 0xfffff0c0
 8018218:	40007804 	andmi	r7, r0, r4, lsl #16
 801821c:	407d4400 	rsbsmi	r4, sp, r0, lsl #8
 8018220:	20400000 	subcs	r0, r0, r0
 8018224:	003d4040 	eorseq	r4, sp, r0, asr #32
 8018228:	107f4000 	rsbsne	r4, pc, r0
 801822c:	00004428 	andeq	r4, r0, r8, lsr #8
 8018230:	7f410040 	svcvc	0x00410040
 8018234:	40000040 	andmi	r0, r0, r0, asr #32
 8018238:	0478047c 	ldrbteq	r0, [r8], #-1148	; 0xfffffb84
 801823c:	7c400078 	mcrrvc	0, 7, r0, r0, cr8
 8018240:	78040408 	stmdavc	r4, {r3, sl}
 8018244:	44384000 	ldrtmi	r4, [r8], #-0
 8018248:	00384444 	eorseq	r4, r8, r4, asr #8
 801824c:	2418fc40 	ldrcs	pc, [r8], #-3136	; 0xfffff3c0
 8018250:	40001824 	andmi	r1, r0, r4, lsr #16
 8018254:	18242418 	stmdane	r4!, {r3, r4, sl, sp}
 8018258:	7c4000fc 	mcrrvc	0, 15, r0, r0, cr12
 801825c:	08040408 	stmdaeq	r4, {r3, sl}
 8018260:	54484000 	strbpl	r4, [r8], #-0
 8018264:	00245454 	eoreq	r5, r4, r4, asr r4
 8018268:	3f040440 	svccc	0x00040440
 801826c:	40002444 	andmi	r2, r0, r4, asr #8
 8018270:	2040403c 	subcs	r4, r0, ip, lsr r0
 8018274:	1c40007c 	mcrrne	0, 7, r0, r0, cr12
 8018278:	1c204020 	stcne	0, cr4, [r0], #-128	; 0xffffff80
 801827c:	403c4000 	eorsmi	r4, ip, r0
 8018280:	003c4030 	eorseq	r4, ip, r0, lsr r0
 8018284:	10284440 	eorne	r4, r8, r0, asr #8
 8018288:	40004428 	andmi	r4, r0, r8, lsr #8
 801828c:	9090904c 	addsls	r9, r0, ip, asr #32
 8018290:	4440007c 	strbmi	r0, [r0], #-124	; 0xffffff84
 8018294:	444c5464 	strbmi	r5, [ip], #-1124	; 0xfffffb9c
 8018298:	08004000 	stmdaeq	r0, {lr}
 801829c:	00004136 	andeq	r4, r0, r6, lsr r1
 80182a0:	77000040 	strvc	r0, [r0, -r0, asr #32]
 80182a4:	40000000 	andmi	r0, r0, r0
 80182a8:	08364100 	ldmdaeq	r6!, {r8, lr}
 80182ac:	02400000 	subeq	r0, r0, #0
 80182b0:	02040201 	andeq	r0, r4, #268435456	; 0x10000000
 80182b4:	263c4000 	ldrtcs	r4, [ip], -r0
 80182b8:	003c2623 	eorseq	r2, ip, r3, lsr #12

080182bc <oled_128x32_init>:
 80182bc:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 80182c0:	4000d31f 	andmi	sp, r0, pc, lsl r3
 80182c4:	0020148d 	eoreq	r1, r0, sp, lsl #9
 80182c8:	02dac8a1 	sbcseq	ip, sl, #10551296	; 0xa10000
 80182cc:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 80182d0:	a6a440db 	ssatge	r4, #5, fp, asr #1

080182d4 <oled_128x64_init>:
 80182d4:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 80182d8:	4000d33f 	andmi	sp, r0, pc, lsr r3
 80182dc:	0020148d 	eoreq	r1, r0, sp, lsl #9
 80182e0:	12dac8a1 	sbcsne	ip, sl, #10551296	; 0xa10000
 80182e4:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 80182e8:	a6a440db 	ssatge	r4, #5, fp, asr #1

080182ec <vtable for Ssd1306>:
	...
 80182f4:	08013839 	stmdaeq	r1, {r0, r3, r4, r5, fp, ip, sp}
 80182f8:	08013865 	stmdaeq	r1, {r0, r2, r5, r6, fp, ip, sp}
 80182fc:	08013b75 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, r9, fp, ip, sp}
 8018300:	08013afd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r9, fp, ip, sp}
 8018304:	080139c9 	stmdaeq	r1, {r0, r3, r6, r7, r8, fp, ip, sp}
 8018308:	08013885 	stmdaeq	r1, {r0, r2, r7, fp, ip, sp}
 801830c:	080138ad 	stmdaeq	r1, {r0, r2, r3, r5, r7, fp, ip, sp}
 8018310:	0801399f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r8, fp, ip, sp}
 8018314:	08013959 	stmdaeq	r1, {r0, r3, r4, r6, r8, fp, ip, sp}
 8018318:	0801383b 	stmdaeq	r1, {r0, r1, r3, r4, r5, fp, ip, sp}
 801831c:	08013a05 	stmdaeq	r1, {r0, r2, r9, fp, ip, sp}
 8018320:	08013a11 	stmdaeq	r1, {r0, r4, r9, fp, ip, sp}
 8018324:	08013a2b 	stmdaeq	r1, {r0, r1, r3, r5, r9, fp, ip, sp}
 8018328:	0801383d 	stmdaeq	r1, {r0, r2, r3, r4, r5, fp, ip, sp}
 801832c:	30345b1b 	eorscc	r5, r4, fp, lsl fp
 8018330:	5b1b006d 	blpl	86d84ec <__exidx_end+0x6c0140>
 8018334:	006d3033 	rsbeq	r3, sp, r3, lsr r0
 8018338:	31335b1b 	teqcc	r3, fp, lsl fp
 801833c:	5b1b006d 	blpl	86d84f8 <__exidx_end+0x6c014c>
 8018340:	006d3233 	rsbeq	r3, sp, r3, lsr r2
 8018344:	33335b1b 	teqcc	r3, #27648	; 0x6c00
 8018348:	5b1b006d 	blpl	86d8504 <__exidx_end+0x6c0158>
 801834c:	006d3933 	rsbeq	r3, sp, r3, lsr r9
 8018350:	2e25565b 	mcrcs	6, 1, r5, cr5, cr11, {2}
 8018354:	205d732a 	subscs	r7, sp, sl, lsr #6
 8018358:	43207325 			; <UNDEFINED> instruction: 0x43207325
 801835c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 8018360:	2064656c 	rsbcs	r6, r4, ip, ror #10
 8018364:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 8018368:	20732a2e 	rsbscs	r2, r3, lr, lsr #20
 801836c:	25207461 	strcs	r7, [r0, #-1121]!	; 0xfffffb9f
 8018370:	00732a2e 	rsbseq	r2, r3, lr, lsr #20

08018374 <days_of_month>:
 8018374:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018378:	0000001c 	andeq	r0, r0, ip, lsl r0
 801837c:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018380:	0000001e 	andeq	r0, r0, lr, lsl r0
 8018384:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018388:	0000001e 	andeq	r0, r0, lr, lsl r0
 801838c:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018390:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018394:	0000001e 	andeq	r0, r0, lr, lsl r0
 8018398:	0000001f 	andeq	r0, r0, pc, lsl r0
 801839c:	0000001e 	andeq	r0, r0, lr, lsl r0
 80183a0:	0000001f 	andeq	r0, r0, pc, lsl r0

Disassembly of section .ARM:

080183a4 <__exidx_start>:
 80183a4:	7fff0c9c 	svcvc	0x00ff0c9c
 80183a8:	00000001 	andeq	r0, r0, r1

Disassembly of section .ARM.attributes:

080183ac <.ARM.attributes>:
 80183ac:	00002e41 	andeq	r2, r0, r1, asr #28
 80183b0:	61656100 	cmnvs	r5, r0, lsl #2
 80183b4:	01006962 	tsteq	r0, r2, ror #18
 80183b8:	00000024 	andeq	r0, r0, r4, lsr #32
 80183bc:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
 80183c0:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
 80183c4:	0600334d 	streq	r3, [r0], -sp, asr #6
 80183c8:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
 80183cc:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
 80183d0:	17011501 	strne	r1, [r1, -r1, lsl #10]
 80183d4:	1a011803 	bne	805e3e8 <__exidx_end+0x4603c>
 80183d8:	Address 0x00000000080183d8 is out of bounds.


Disassembly of section .data:

20000000 <s_multicast_mac>:
20000000:	005e0001 	subseq	r0, lr, r1
20000004:	00000000 	andeq	r0, r0, r0

20000008 <MDNS::s_nHandle>:
20000008:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

2000000c <next_block>:
2000000c:	20015800 	andcs	r5, r1, r0, lsl #16

20000010 <s_block_bucket>:
20000010:	00000010 	andeq	r0, r0, r0, lsl r0
20000014:	00000000 	andeq	r0, r0, r0
20000018:	00000020 	andeq	r0, r0, r0, lsr #32
2000001c:	00000000 	andeq	r0, r0, r0
20000020:	00000040 	andeq	r0, r0, r0, asr #32
20000024:	00000000 	andeq	r0, r0, r0
20000028:	00000060 	andeq	r0, r0, r0, rrx
2000002c:	00000000 	andeq	r0, r0, r0
20000030:	00000080 	andeq	r0, r0, r0, lsl #1
20000034:	00000000 	andeq	r0, r0, r0
20000038:	00000100 	andeq	r0, r0, r0, lsl #2
2000003c:	00000000 	andeq	r0, r0, r0
20000040:	00000140 	andeq	r0, r0, r0, asr #2
20000044:	00000000 	andeq	r0, r0, r0
20000048:	00000180 	andeq	r0, r0, r0, lsl #3
2000004c:	00000000 	andeq	r0, r0, r0
20000050:	00000200 	andeq	r0, r0, r0, lsl #4
20000054:	00000000 	andeq	r0, r0, r0
20000058:	00000300 	andeq	r0, r0, r0, lsl #6
2000005c:	00000000 	andeq	r0, r0, r0
20000060:	00000400 	andeq	r0, r0, r0, lsl #8
20000064:	00000000 	andeq	r0, r0, r0
20000068:	00000500 	andeq	r0, r0, r0, lsl #10
	...

20000078 <SystemCoreClock>:
20000078:	066ff300 	strbteq	pc, [pc], -r0, lsl #6	; <UNPREDICTABLE>

Disassembly of section .bss:

20000080 <outptr>:
20000080:	00000000 	andeq	r0, r0, r0

20000084 <RemoteConfig::s_pUdpBuffer>:
20000084:	00000000 	andeq	r0, r0, r0

20000088 <RemoteConfig::s_RemoteConfigListBin>:
	...

200000ac <RemoteConfig::s_pThis>:
200000ac:	00000000 	andeq	r0, r0, r0

200000b0 <guard variable for lightset::Data::Get()::instance>:
200000b0:	00000000 	andeq	r0, r0, r0

200000b4 <lightset::Data::Get()::instance>:
	...

200018c4 <ArtNetNode::s_pThis>:
200018c4:	00000000 	andeq	r0, r0, r0

200018c8 <s_ReceivingMask>:
200018c8:	00000000 	andeq	r0, r0, r0

200018cc <ip>:
200018cc:	00000000 	andeq	r0, r0, r0

200018d0 <ip>:
200018d0:	00000000 	andeq	r0, r0, r0

200018d4 <s_nPortsMax>:
200018d4:	00000000 	andeq	r0, r0, r0

200018d8 <E131Bridge::s_pThis>:
200018d8:	00000000 	andeq	r0, r0, r0

200018dc <s_ReceivingMask>:
200018dc:	00000000 	andeq	r0, r0, r0

200018e0 <s_nPortsMax>:
200018e0:	00000000 	andeq	r0, r0, r0

200018e4 <WS28xxDmx::s_pThis>:
200018e4:	00000000 	andeq	r0, r0, r0

200018e8 <PixelPatterns::m_PortConfig>:
	...

20001908 <PixelPatterns::m_nActivePorts>:
20001908:	00000000 	andeq	r0, r0, r0

2000190c <PixelPatterns::m_pScannerColours>:
2000190c:	00000000 	andeq	r0, r0, r0

20001910 <PixelPatterns::m_nCount>:
20001910:	00000000 	andeq	r0, r0, r0

20001914 <PixelPatterns::m_pOutput>:
20001914:	00000000 	andeq	r0, r0, r0

20001918 <PixelTestPattern::s_pThis>:
20001918:	00000000 	andeq	r0, r0, r0

2000191c <PixelTestPattern::s_Pattern>:
2000191c:	00000000 	andeq	r0, r0, r0

20001920 <s_tmp>:
20001920:	00000000 	andeq	r0, r0, r0

20001924 <WS28xx::s_pThis>:
20001924:	00000000 	andeq	r0, r0, r0

20001928 <g_ip_info>:
	...

20001934 <g_mac_address>:
20001934:	00000000 	andeq	r0, r0, r0
	...

2000193a <s_is_dhcp>:
	...

2000193c <s_p>:
2000193c:	00000000 	andeq	r0, r0, r0

20001940 <s_ticker>:
20001940:	00000000 	andeq	r0, r0, r0

20001944 <s_mac_address>:
	...

2000194c <s_mac_address_arp_reply>:
	...

20001954 <s_tcp>:
	...

20001f40 <broadcast_mask>:
20001f40:	00000000 	andeq	r0, r0, r0

20001f44 <gw_ip>:
20001f44:	00000000 	andeq	r0, r0, r0

20001f48 <on_network_mask>:
20001f48:	00000000 	andeq	r0, r0, r0

20001f4c <s_id>:
20001f4c:	00000000 	andeq	r0, r0, r0

20001f50 <s_ports_allowed>:
	...

20001f70 <s_recv_queue>:
	...

20007c10 <s_send_packet>:
	...

200081fc <MDNS::s_nRemoteIp>:
200081fc:	00000000 	andeq	r0, r0, r0

20008200 <MDNS::s_nRemotePort>:
20008200:	00000000 	andeq	r0, r0, r0

20008204 <MDNS::s_nMulticastIp>:
20008204:	00000000 	andeq	r0, r0, r0

20008208 <MDNS::s_AnswerLocalIp>:
	...

2000840c <MDNS::s_ServiceRecords>:
	...

2000842c <MDNS::s_nBytesReceived>:
2000842c:	00000000 	andeq	r0, r0, r0

20008430 <MDNS::s_ServiceRecordsData>:
	...

20008634 <MDNS::s_pName>:
20008634:	00000000 	andeq	r0, r0, r0

20008638 <MDNS::s_pBuffer>:
20008638:	00000000 	andeq	r0, r0, r0

2000863c <Network::s_pThis>:
2000863c:	00000000 	andeq	r0, r0, r0

20008640 <s_arp_announce>:
	...

2000866c <s_arp_reply>:
	...

20008698 <s_arp_request>:
	...

200086c4 <s_arp_records>:
	...

20008844 <s_entry_current>:
20008844:	00000000 	andeq	r0, r0, r0

20008848 <s_dhcp_allocated_gw>:
20008848:	00000000 	andeq	r0, r0, r0

2000884c <s_dhcp_allocated_ip>:
2000884c:	00000000 	andeq	r0, r0, r0

20008850 <s_dhcp_allocated_netmask>:
20008850:	00000000 	andeq	r0, r0, r0

20008854 <s_dhcp_message>:
	...

20008a78 <s_dhcp_server_ip>:
20008a78:	00000000 	andeq	r0, r0, r0

20008a7c <s_groups>:
	...

20008b9c <s_id>:
20008b9c:	00000000 	andeq	r0, r0, r0

20008ba0 <s_joins_allowed_index>:
20008ba0:	00000000 	andeq	r0, r0, r0

20008ba4 <s_leave>:
	...

20008bd4 <s_multicast_mac>:
	...

20008bdc <s_report>:
	...

20008c0c <DisplayUdf::s_pThis>:
20008c0c:	00000000 	andeq	r0, r0, r0

20008c10 <ConfigStore::s_nWaitMillis>:
20008c10:	00000000 	andeq	r0, r0, r0

20008c14 <ConfigStore::s_SpiFlashData>:
	...

20009c14 <ConfigStore::s_nStartAddress>:
20009c14:	00000000 	andeq	r0, r0, r0

20009c18 <ConfigStore::s_bHaveFlashChip>:
20009c18:	00000000 	andeq	r0, r0, r0

20009c1c <ConfigStore::s_nSpiFlashStoreSize>:
20009c1c:	00000000 	andeq	r0, r0, r0

20009c20 <ConfigStore::s_State>:
20009c20:	00000000 	andeq	r0, r0, r0

20009c24 <ConfigStore::s_pThis>:
20009c24:	00000000 	andeq	r0, r0, r0

20009c28 <ConfigStore::s_bIsNew>:
20009c28:	00000000 	andeq	r0, r0, r0

20009c2c <StoreDisplayUdf::s_pThis>:
20009c2c:	00000000 	andeq	r0, r0, r0

20009c30 <StoreNetwork::s_pThis>:
20009c30:	00000000 	andeq	r0, r0, r0

20009c34 <StoreRemoteConfig::s_pThis>:
20009c34:	00000000 	andeq	r0, r0, r0

20009c38 <StoreArtNet::s_nPortIndexOffset>:
20009c38:	00000000 	andeq	r0, r0, r0

20009c3c <StoreArtNet::s_pThis>:
20009c3c:	00000000 	andeq	r0, r0, r0

20009c40 <StoreE131::s_pThis>:
20009c40:	00000000 	andeq	r0, r0, r0

20009c44 <StorePixelDmx::s_pThis>:
20009c44:	00000000 	andeq	r0, r0, r0

20009c48 <FlashCode::s_pThis>:
20009c48:	00000000 	andeq	r0, r0, r0

20009c4c <flashcode::s_nAddress>:
20009c4c:	00000000 	andeq	r0, r0, r0

20009c50 <flashcode::s_State>:
20009c50:	00000000 	andeq	r0, r0, r0

20009c54 <flashcode::s_nPage>:
20009c54:	00000000 	andeq	r0, r0, r0

20009c58 <flashcode::s_pData>:
20009c58:	00000000 	andeq	r0, r0, r0

20009c5c <flashcode::s_isBank0>:
20009c5c:	00000000 	andeq	r0, r0, r0

20009c60 <flashcode::s_nLength>:
20009c60:	00000000 	andeq	r0, r0, r0

20009c64 <PropertiesConfig::s_Config>:
20009c64:	00000000 	andeq	r0, r0, r0

20009c68 <Display::s_pThis>:
20009c68:	00000000 	andeq	r0, r0, r0

20009c6c <_ClearBuffer>:
	...

20009cf4 <Ssd1306::s_pThis>:
20009cf4:	00000000 	andeq	r0, r0, r0

20009cf8 <FirmwareVersion::s_FirmwareVersion>:
	...

20009d0e <FirmwareVersion::s_Print>:
	...

20009d50 <FirmwareVersion::s_pThis>:
20009d50:	00000000 	andeq	r0, r0, r0

20009d54 <LedBlink::s_pThis>:
20009d54:	00000000 	andeq	r0, r0, r0

20009d58 <Hardware::s_pThis>:
	...

20009d60 <s_micros>:
	...

20009d68 <set_timer>:
20009d68:	00000000 	andeq	r0, r0, r0

20009d6c <s_nSysTickMillis>:
20009d6c:	00000000 	andeq	r0, r0, r0

20009d70 <dma_current_ptp_rxdesc>:
20009d70:	00000000 	andeq	r0, r0, r0

20009d74 <dma_current_ptp_txdesc>:
20009d74:	00000000 	andeq	r0, r0, r0

20009d78 <dma_current_rxdesc>:
20009d78:	00000000 	andeq	r0, r0, r0

20009d7c <dma_current_txdesc>:
20009d7c:	00000000 	andeq	r0, r0, r0

20009d80 <enet_initpara>:
	...

20009dbc <rx_buff>:
	...

2000cd5c <rxdesc_tab>:
	...

2000cddc <tx_buff>:
	...

2000d9c4 <txdesc_tab>:
	...

2000d9e4 <s_nAddress>:
2000d9e4:	00000000 	andeq	r0, r0, r0

2000d9e8 <s_TxBuffer>:
	...

Disassembly of section .heap:

20015800 <heap_low>:
	...

Disassembly of section .stack:

20016000 <_sp-0x2000>:
	...
