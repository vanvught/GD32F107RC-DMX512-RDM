
build_gd32/main.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08007000 <__gVectors>:
 8007000:	20018000 	andcs	r8, r1, r0
 8007004:	08008565 	stmdaeq	r0, {r0, r2, r5, r6, r8, sl, pc}
 8007008:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 800700c:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007010:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007014:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007018:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
	...
 800702c:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007030:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007034:	00000000 	andeq	r0, r0, r0
 8007038:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 800703c:	08011355 	stmdaeq	r1, {r0, r2, r4, r6, r8, r9, ip}
 8007040:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007044:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007048:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 800704c:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007050:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007054:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007058:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 800705c:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007060:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007064:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007068:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 800706c:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007070:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007074:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007078:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 800707c:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007080:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007084:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007088:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 800708c:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007090:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007094:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007098:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 800709c:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 80070a0:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 80070a4:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 80070a8:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 80070ac:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 80070b0:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 80070b4:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 80070b8:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 80070bc:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 80070c0:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 80070c4:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 80070c8:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 80070cc:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 80070d0:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 80070d4:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 80070d8:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 80070dc:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 80070e0:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 80070e4:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 80070e8:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 80070ec:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 80070f0:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 80070f4:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
	...
 8007100:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007104:	00000000 	andeq	r0, r0, r0
 8007108:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 800710c:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007110:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007114:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007118:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 800711c:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007120:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007124:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007128:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 800712c:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007130:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007134:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007138:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 800713c:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007140:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007144:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 8007148:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}
 800714c:	080085b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, pc}

Disassembly of section .text:

08007150 <net_init>:
 8007150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007154:	460c      	mov	r4, r1
 8007156:	4616      	mov	r6, r2
 8007158:	9f06      	ldr	r7, [sp, #24]
 800715a:	4a22      	ldr	r2, [pc, #136]	; (80071e4 <net_init+0x94>)
 800715c:	461d      	mov	r5, r3
 800715e:	1e43      	subs	r3, r0, #1
 8007160:	3005      	adds	r0, #5
 8007162:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8007166:	4283      	cmp	r3, r0
 8007168:	f802 1b01 	strb.w	r1, [r2], #1
 800716c:	d1f9      	bne.n	8007162 <net_init+0x12>
 800716e:	4623      	mov	r3, r4
 8007170:	4a1d      	ldr	r2, [pc, #116]	; (80071e8 <net_init+0x98>)
 8007172:	f104 010c 	add.w	r1, r4, #12
 8007176:	f813 0b01 	ldrb.w	r0, [r3], #1
 800717a:	428b      	cmp	r3, r1
 800717c:	f802 0b01 	strb.w	r0, [r2], #1
 8007180:	d1f9      	bne.n	8007176 <net_init+0x26>
 8007182:	f04f 0800 	mov.w	r8, #0
 8007186:	4918      	ldr	r1, [pc, #96]	; (80071e8 <net_init+0x98>)
 8007188:	4816      	ldr	r0, [pc, #88]	; (80071e4 <net_init+0x94>)
 800718a:	f000 f9a7 	bl	80074dc <ip_init>
 800718e:	4815      	ldr	r0, [pc, #84]	; (80071e4 <net_init+0x94>)
 8007190:	f000 f83c 	bl	800720c <rfc3927_init>
 8007194:	f887 8000 	strb.w	r8, [r7]
 8007198:	782b      	ldrb	r3, [r5, #0]
 800719a:	b163      	cbz	r3, 80071b6 <net_init+0x66>
 800719c:	4632      	mov	r2, r6
 800719e:	4912      	ldr	r1, [pc, #72]	; (80071e8 <net_init+0x98>)
 80071a0:	4810      	ldr	r0, [pc, #64]	; (80071e4 <net_init+0x94>)
 80071a2:	f008 fd59 	bl	800fc58 <dhcp_client>
 80071a6:	4540      	cmp	r0, r8
 80071a8:	da05      	bge.n	80071b6 <net_init+0x66>
 80071aa:	480f      	ldr	r0, [pc, #60]	; (80071e8 <net_init+0x98>)
 80071ac:	f885 8000 	strb.w	r8, [r5]
 80071b0:	f007 f876 	bl	800e2a0 <rfc3927>
 80071b4:	7038      	strb	r0, [r7, #0]
 80071b6:	490c      	ldr	r1, [pc, #48]	; (80071e8 <net_init+0x98>)
 80071b8:	480a      	ldr	r0, [pc, #40]	; (80071e4 <net_init+0x94>)
 80071ba:	f000 f883 	bl	80072c4 <arp_init>
 80071be:	480a      	ldr	r0, [pc, #40]	; (80071e8 <net_init+0x98>)
 80071c0:	f008 ff6a 	bl	8010098 <ip_set_ip>
 80071c4:	f000 f82e 	bl	8007224 <tcp_init>
 80071c8:	4a07      	ldr	r2, [pc, #28]	; (80071e8 <net_init+0x98>)
 80071ca:	1e63      	subs	r3, r4, #1
 80071cc:	340b      	adds	r4, #11
 80071ce:	f812 1b01 	ldrb.w	r1, [r2], #1
 80071d2:	f803 1f01 	strb.w	r1, [r3, #1]!
 80071d6:	429c      	cmp	r4, r3
 80071d8:	d1f9      	bne.n	80071ce <net_init+0x7e>
 80071da:	782a      	ldrb	r2, [r5, #0]
 80071dc:	4b03      	ldr	r3, [pc, #12]	; (80071ec <net_init+0x9c>)
 80071de:	701a      	strb	r2, [r3, #0]
 80071e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071e4:	200017b4 			; <UNDEFINED> instruction: 0x200017b4
 80071e8:	200017a8 	andcs	r1, r0, r8, lsr #15
 80071ec:	200017ba 			; <UNDEFINED> instruction: 0x200017ba

080071f0 <net_shutdown>:
 80071f0:	b508      	push	{r3, lr}
 80071f2:	f000 f97e 	bl	80074f2 <ip_shutdown>
 80071f6:	4b04      	ldr	r3, [pc, #16]	; (8007208 <net_shutdown+0x18>)
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	b11b      	cbz	r3, 8007204 <net_shutdown+0x14>
 80071fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007200:	f008 be32 	b.w	800fe68 <dhcp_client_release>
 8007204:	bd08      	pop	{r3, pc}
 8007206:	bf00      	nop
 8007208:	200017ba 			; <UNDEFINED> instruction: 0x200017ba

0800720c <rfc3927_init>:
 800720c:	4b04      	ldr	r3, [pc, #16]	; (8007220 <rfc3927_init+0x14>)
 800720e:	1d82      	adds	r2, r0, #6
 8007210:	4290      	cmp	r0, r2
 8007212:	d100      	bne.n	8007216 <rfc3927_init+0xa>
 8007214:	4770      	bx	lr
 8007216:	f810 1b01 	ldrb.w	r1, [r0], #1
 800721a:	f803 1b01 	strb.w	r1, [r3], #1
 800721e:	e7f7      	b.n	8007210 <rfc3927_init+0x4>
 8007220:	200017c4 	andcs	r1, r0, r4, asr #15

08007224 <tcp_init>:
 8007224:	2206      	movs	r2, #6
 8007226:	b513      	push	{r0, r1, r4, lr}
 8007228:	4c0b      	ldr	r4, [pc, #44]	; (8007258 <tcp_init+0x34>)
 800722a:	490c      	ldr	r1, [pc, #48]	; (800725c <tcp_init+0x38>)
 800722c:	18a0      	adds	r0, r4, r2
 800722e:	f007 f891 	bl	800e354 <memcpy.isra.0>
 8007232:	2308      	movs	r3, #8
 8007234:	2204      	movs	r2, #4
 8007236:	81a3      	strh	r3, [r4, #12]
 8007238:	4b09      	ldr	r3, [pc, #36]	; (8007260 <tcp_init+0x3c>)
 800723a:	eb0d 0102 	add.w	r1, sp, r2
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f104 001a 	add.w	r0, r4, #26
 8007244:	9301      	str	r3, [sp, #4]
 8007246:	f007 f885 	bl	800e354 <memcpy.isra.0>
 800724a:	2345      	movs	r3, #69	; 0x45
 800724c:	81e3      	strh	r3, [r4, #14]
 800724e:	4b05      	ldr	r3, [pc, #20]	; (8007264 <tcp_init+0x40>)
 8007250:	6163      	str	r3, [r4, #20]
 8007252:	b002      	add	sp, #8
 8007254:	bd10      	pop	{r4, pc}
 8007256:	bf00      	nop
 8007258:	2000238c 	andcs	r2, r0, ip, lsl #7
 800725c:	200017b4 			; <UNDEFINED> instruction: 0x200017b4
 8007260:	200017a8 	andcs	r1, r0, r8, lsr #15
 8007264:	06400040 	strbeq	r0, [r0], -r0, asr #32

08007268 <udp_init>:
 8007268:	b570      	push	{r4, r5, r6, lr}
 800726a:	2200      	movs	r2, #0
 800726c:	2408      	movs	r4, #8
 800726e:	460e      	mov	r6, r1
 8007270:	4b0d      	ldr	r3, [pc, #52]	; (80072a8 <udp_init+0x40>)
 8007272:	490e      	ldr	r1, [pc, #56]	; (80072ac <udp_init+0x44>)
 8007274:	3c01      	subs	r4, #1
 8007276:	801a      	strh	r2, [r3, #0]
 8007278:	805a      	strh	r2, [r3, #2]
 800727a:	f841 2b04 	str.w	r2, [r1], #4
 800727e:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 8007282:	d1f7      	bne.n	8007274 <udp_init+0xc>
 8007284:	2206      	movs	r2, #6
 8007286:	4d0a      	ldr	r5, [pc, #40]	; (80072b0 <udp_init+0x48>)
 8007288:	4b0a      	ldr	r3, [pc, #40]	; (80072b4 <udp_init+0x4c>)
 800728a:	4601      	mov	r1, r0
 800728c:	18a8      	adds	r0, r5, r2
 800728e:	801c      	strh	r4, [r3, #0]
 8007290:	f007 f9e4 	bl	800e65c <memcpy.isra.0>
 8007294:	4b08      	ldr	r3, [pc, #32]	; (80072b8 <udp_init+0x50>)
 8007296:	4630      	mov	r0, r6
 8007298:	60eb      	str	r3, [r5, #12]
 800729a:	4b08      	ldr	r3, [pc, #32]	; (80072bc <udp_init+0x54>)
 800729c:	616b      	str	r3, [r5, #20]
 800729e:	f007 fa05 	bl	800e6ac <udp_set_ip>
 80072a2:	852c      	strh	r4, [r5, #40]	; 0x28
 80072a4:	bd70      	pop	{r4, r5, r6, pc}
 80072a6:	bf00      	nop
 80072a8:	200029a8 	andcs	r2, r0, r8, lsr #19
 80072ac:	20002988 	andcs	r2, r0, r8, lsl #19
 80072b0:	20008648 	andcs	r8, r0, r8, asr #12
 80072b4:	20002984 	andcs	r2, r0, r4, lsl #19
 80072b8:	00450008 	subeq	r0, r5, r8
 80072bc:	11400040 	cmpne	r0, r0, asr #32

080072c0 <udp_shutdown>:
 80072c0:	4770      	bx	lr
	...

080072c4 <arp_init>:
 80072c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072c8:	4604      	mov	r4, r0
 80072ca:	460d      	mov	r5, r1
 80072cc:	f000 f876 	bl	80073bc <arp_cache_init>
 80072d0:	2206      	movs	r2, #6
 80072d2:	4621      	mov	r1, r4
 80072d4:	482e      	ldr	r0, [pc, #184]	; (8007390 <arp_init+0xcc>)
 80072d6:	682f      	ldr	r7, [r5, #0]
 80072d8:	f008 fb42 	bl	800f960 <memcpy.isra.0>
 80072dc:	4b2d      	ldr	r3, [pc, #180]	; (8007394 <arp_init+0xd0>)
 80072de:	2507      	movs	r5, #7
 80072e0:	461e      	mov	r6, r3
 80072e2:	22ff      	movs	r2, #255	; 0xff
 80072e4:	3d01      	subs	r5, #1
 80072e6:	d146      	bne.n	8007376 <arp_init+0xb2>
 80072e8:	4b2b      	ldr	r3, [pc, #172]	; (8007398 <arp_init+0xd4>)
 80072ea:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800739c <arp_init+0xd8>
 80072ee:	2206      	movs	r2, #6
 80072f0:	e9c6 3803 	strd	r3, r8, [r6, #12]
 80072f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072f8:	4621      	mov	r1, r4
 80072fa:	4829      	ldr	r0, [pc, #164]	; (80073a0 <arp_init+0xdc>)
 80072fc:	82b3      	strh	r3, [r6, #20]
 80072fe:	f008 fb2f 	bl	800f960 <memcpy.isra.0>
 8007302:	2307      	movs	r3, #7
 8007304:	4a27      	ldr	r2, [pc, #156]	; (80073a4 <arp_init+0xe0>)
 8007306:	61f7      	str	r7, [r6, #28]
 8007308:	3b01      	subs	r3, #1
 800730a:	d137      	bne.n	800737c <arp_init+0xb8>
 800730c:	2206      	movs	r2, #6
 800730e:	4621      	mov	r1, r4
 8007310:	4825      	ldr	r0, [pc, #148]	; (80073a8 <arp_init+0xe4>)
 8007312:	f8c6 7026 	str.w	r7, [r6, #38]	; 0x26
 8007316:	f008 fb23 	bl	800f960 <memcpy.isra.0>
 800731a:	4a24      	ldr	r2, [pc, #144]	; (80073ac <arp_init+0xe8>)
 800731c:	2306      	movs	r3, #6
 800731e:	4615      	mov	r5, r2
 8007320:	21ff      	movs	r1, #255	; 0xff
 8007322:	3b01      	subs	r3, #1
 8007324:	d22d      	bcs.n	8007382 <arp_init+0xbe>
 8007326:	4b1c      	ldr	r3, [pc, #112]	; (8007398 <arp_init+0xd4>)
 8007328:	2206      	movs	r2, #6
 800732a:	e9c5 3803 	strd	r3, r8, [r5, #12]
 800732e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007332:	4621      	mov	r1, r4
 8007334:	481e      	ldr	r0, [pc, #120]	; (80073b0 <arp_init+0xec>)
 8007336:	82ab      	strh	r3, [r5, #20]
 8007338:	f008 fb12 	bl	800f960 <memcpy.isra.0>
 800733c:	2307      	movs	r3, #7
 800733e:	2100      	movs	r1, #0
 8007340:	4a1c      	ldr	r2, [pc, #112]	; (80073b4 <arp_init+0xf0>)
 8007342:	61ef      	str	r7, [r5, #28]
 8007344:	3b01      	subs	r3, #1
 8007346:	d11f      	bne.n	8007388 <arp_init+0xc4>
 8007348:	2206      	movs	r2, #6
 800734a:	4d1b      	ldr	r5, [pc, #108]	; (80073b8 <arp_init+0xf4>)
 800734c:	4621      	mov	r1, r4
 800734e:	18a8      	adds	r0, r5, r2
 8007350:	f008 fb06 	bl	800f960 <memcpy.isra.0>
 8007354:	4b10      	ldr	r3, [pc, #64]	; (8007398 <arp_init+0xd4>)
 8007356:	4621      	mov	r1, r4
 8007358:	e9c5 3803 	strd	r3, r8, [r5, #12]
 800735c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007360:	f105 0016 	add.w	r0, r5, #22
 8007364:	2206      	movs	r2, #6
 8007366:	82ab      	strh	r3, [r5, #20]
 8007368:	f008 fafa 	bl	800f960 <memcpy.isra.0>
 800736c:	61ef      	str	r7, [r5, #28]
 800736e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007372:	f008 baff 	b.w	800f974 <arp_announce>
 8007376:	f803 2b01 	strb.w	r2, [r3], #1
 800737a:	e7b3      	b.n	80072e4 <arp_init+0x20>
 800737c:	f802 5b01 	strb.w	r5, [r2], #1
 8007380:	e7c2      	b.n	8007308 <arp_init+0x44>
 8007382:	f802 1b01 	strb.w	r1, [r2], #1
 8007386:	e7cc      	b.n	8007322 <arp_init+0x5e>
 8007388:	f802 1b01 	strb.w	r1, [r2], #1
 800738c:	e7da      	b.n	8007344 <arp_init+0x80>
 800738e:	bf00      	nop
 8007390:	200090de 	ldrdcs	r9, [r0], -lr
 8007394:	200090d8 	ldrdcs	r9, [r0], -r8
 8007398:	01000608 	tsteq	r0, r8, lsl #12
 800739c:	04060008 	streq	r0, [r6], #-8
 80073a0:	200090ee 	andcs	r9, r0, lr, ror #1
 80073a4:	200090f8 	strdcs	r9, [r0], -r8
 80073a8:	20009136 	andcs	r9, r0, r6, lsr r1
 80073ac:	20009130 	andcs	r9, r0, r0, lsr r1
 80073b0:	20009146 	andcs	r9, r0, r6, asr #2
 80073b4:	20009150 	andcs	r9, r0, r0, asr r1
 80073b8:	20009104 	andcs	r9, r0, r4, lsl #2

080073bc <arp_cache_init>:
 80073bc:	2300      	movs	r3, #0
 80073be:	4618      	mov	r0, r3
 80073c0:	4a09      	ldr	r2, [pc, #36]	; (80073e8 <arp_cache_init+0x2c>)
 80073c2:	b510      	push	{r4, lr}
 80073c4:	8013      	strh	r3, [r2, #0]
 80073c6:	4a09      	ldr	r2, [pc, #36]	; (80073ec <arp_cache_init+0x30>)
 80073c8:	4611      	mov	r1, r2
 80073ca:	f842 0c04 	str.w	r0, [r2, #-4]
 80073ce:	1d94      	adds	r4, r2, #6
 80073d0:	42a1      	cmp	r1, r4
 80073d2:	d105      	bne.n	80073e0 <arp_cache_init+0x24>
 80073d4:	3303      	adds	r3, #3
 80073d6:	2b60      	cmp	r3, #96	; 0x60
 80073d8:	f102 020c 	add.w	r2, r2, #12
 80073dc:	d1f4      	bne.n	80073c8 <arp_cache_init+0xc>
 80073de:	bd10      	pop	{r4, pc}
 80073e0:	f801 0b01 	strb.w	r0, [r1], #1
 80073e4:	e7f4      	b.n	80073d0 <arp_cache_init+0x14>
 80073e6:	bf00      	nop
 80073e8:	200092dc 	ldrdcs	r9, [r0], -ip
 80073ec:	20009160 	andcs	r9, r0, r0, ror #2

080073f0 <igmp_init>:
 80073f0:	2200      	movs	r2, #0
 80073f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073f6:	4605      	mov	r5, r0
 80073f8:	4608      	mov	r0, r1
 80073fa:	4611      	mov	r1, r2
 80073fc:	4b23      	ldr	r3, [pc, #140]	; (800748c <igmp_init+0x9c>)
 80073fe:	f103 0408 	add.w	r4, r3, #8
 8007402:	42a3      	cmp	r3, r4
 8007404:	d13e      	bne.n	8007484 <igmp_init+0x94>
 8007406:	3201      	adds	r2, #1
 8007408:	2a24      	cmp	r2, #36	; 0x24
 800740a:	d1f8      	bne.n	80073fe <igmp_init+0xe>
 800740c:	2600      	movs	r6, #0
 800740e:	4b20      	ldr	r3, [pc, #128]	; (8007490 <igmp_init+0xa0>)
 8007410:	4c20      	ldr	r4, [pc, #128]	; (8007494 <igmp_init+0xa4>)
 8007412:	601e      	str	r6, [r3, #0]
 8007414:	4b20      	ldr	r3, [pc, #128]	; (8007498 <igmp_init+0xa8>)
 8007416:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 800741a:	801e      	strh	r6, [r3, #0]
 800741c:	f008 fd9c 	bl	800ff58 <igmp_set_ip>
 8007420:	2201      	movs	r2, #1
 8007422:	4b1e      	ldr	r3, [pc, #120]	; (800749c <igmp_init+0xac>)
 8007424:	4629      	mov	r1, r5
 8007426:	801a      	strh	r2, [r3, #0]
 8007428:	225e      	movs	r2, #94	; 0x5e
 800742a:	709a      	strb	r2, [r3, #2]
 800742c:	2206      	movs	r2, #6
 800742e:	18a0      	adds	r0, r4, r2
 8007430:	f008 fd48 	bl	800fec4 <memcpy.isra.0>
 8007434:	f240 4394 	movw	r3, #1172	; 0x494
 8007438:	8463      	strh	r3, [r4, #34]	; 0x22
 800743a:	2316      	movs	r3, #22
 800743c:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80074a0 <igmp_init+0xb0>
 8007440:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80074a4 <igmp_init+0xb4>
 8007444:	84e3      	strh	r3, [r4, #38]	; 0x26
 8007446:	f8c4 9014 	str.w	r9, [r4, #20]
 800744a:	4b17      	ldr	r3, [pc, #92]	; (80074a8 <igmp_init+0xb8>)
 800744c:	f8c4 800c 	str.w	r8, [r4, #12]
 8007450:	8227      	strh	r7, [r4, #16]
 8007452:	84a6      	strh	r6, [r4, #36]	; 0x24
 8007454:	4c15      	ldr	r4, [pc, #84]	; (80074ac <igmp_init+0xbc>)
 8007456:	2206      	movs	r2, #6
 8007458:	6023      	str	r3, [r4, #0]
 800745a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800745e:	18a0      	adds	r0, r4, r2
 8007460:	80a3      	strh	r3, [r4, #4]
 8007462:	4629      	mov	r1, r5
 8007464:	f008 fd2e 	bl	800fec4 <memcpy.isra.0>
 8007468:	23e0      	movs	r3, #224	; 0xe0
 800746a:	83e3      	strh	r3, [r4, #30]
 800746c:	f44f 13b8 	mov.w	r3, #1507328	; 0x170000
 8007470:	4a0f      	ldr	r2, [pc, #60]	; (80074b0 <igmp_init+0xc0>)
 8007472:	f8c4 9014 	str.w	r9, [r4, #20]
 8007476:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800747a:	f8c4 800c 	str.w	r8, [r4, #12]
 800747e:	8227      	strh	r7, [r4, #16]
 8007480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007484:	f803 1b01 	strb.w	r1, [r3], #1
 8007488:	e7bb      	b.n	8007402 <igmp_init+0x12>
 800748a:	bf00      	nop
 800748c:	20009514 	andcs	r9, r0, r4, lsl r5
 8007490:	20009638 	andcs	r9, r0, r8, lsr r6
 8007494:	20009674 	andcs	r9, r0, r4, ror r6
 8007498:	20009634 	andcs	r9, r0, r4, lsr r6
 800749c:	2000966c 	andcs	r9, r0, ip, ror #12
 80074a0:	02010040 	andeq	r0, r1, #64	; 0x40
 80074a4:	00460008 	subeq	r0, r6, r8
 80074a8:	005e0001 	subseq	r0, lr, r1
 80074ac:	2000963c 	andcs	r9, r0, ip, lsr r6
 80074b0:	04940200 	ldreq	r0, [r4], #512	; 0x200

080074b4 <igmp_shutdown>:
 80074b4:	b570      	push	{r4, r5, r6, lr}
 80074b6:	2500      	movs	r5, #0
 80074b8:	462e      	mov	r6, r5
 80074ba:	4c07      	ldr	r4, [pc, #28]	; (80074d8 <igmp_shutdown+0x24>)
 80074bc:	6820      	ldr	r0, [r4, #0]
 80074be:	b120      	cbz	r0, 80074ca <igmp_shutdown+0x16>
 80074c0:	f008 fda6 	bl	8010010 <igmp_leave>
 80074c4:	6026      	str	r6, [r4, #0]
 80074c6:	7166      	strb	r6, [r4, #5]
 80074c8:	7126      	strb	r6, [r4, #4]
 80074ca:	3501      	adds	r5, #1
 80074cc:	2d24      	cmp	r5, #36	; 0x24
 80074ce:	f104 0408 	add.w	r4, r4, #8
 80074d2:	d1f3      	bne.n	80074bc <igmp_shutdown+0x8>
 80074d4:	bd70      	pop	{r4, r5, r6, pc}
 80074d6:	bf00      	nop
 80074d8:	20009514 	andcs	r9, r0, r4, lsl r5

080074dc <ip_init>:
 80074dc:	b538      	push	{r3, r4, r5, lr}
 80074de:	4604      	mov	r4, r0
 80074e0:	460d      	mov	r5, r1
 80074e2:	f7ff fec1 	bl	8007268 <udp_init>
 80074e6:	4629      	mov	r1, r5
 80074e8:	4620      	mov	r0, r4
 80074ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074ee:	f7ff bf7f 	b.w	80073f0 <igmp_init>

080074f2 <ip_shutdown>:
 80074f2:	b508      	push	{r3, lr}
 80074f4:	f7ff ffde 	bl	80074b4 <igmp_shutdown>
 80074f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80074fc:	f7ff bee0 	b.w	80072c0 <udp_shutdown>

08007500 <console_init>:
 8007500:	b508      	push	{r3, lr}
 8007502:	f009 fec9 	bl	8011298 <uart0_init>
 8007506:	4804      	ldr	r0, [pc, #16]	; (8007518 <console_init+0x18>)
 8007508:	f009 fef6 	bl	80112f8 <uart0_puts>
 800750c:	4803      	ldr	r0, [pc, #12]	; (800751c <console_init+0x1c>)
 800750e:	f009 fef3 	bl	80112f8 <uart0_puts>
 8007512:	2000      	movs	r0, #0
 8007514:	bd08      	pop	{r3, pc}
 8007516:	bf00      	nop
 8007518:	08013263 	stmdaeq	r1, {r0, r1, r5, r6, r9, ip, sp}
 800751c:	08014f44 	stmdaeq	r1, {r2, r6, r8, r9, sl, fp, lr}

08007520 <net_handle>:
 8007520:	b510      	push	{r4, lr}
 8007522:	4c0c      	ldr	r4, [pc, #48]	; (8007554 <net_handle+0x34>)
 8007524:	4620      	mov	r0, r4
 8007526:	f00a fc5b 	bl	8011de0 <emac_eth_recv>
 800752a:	2800      	cmp	r0, #0
 800752c:	dd07      	ble.n	800753e <net_handle+0x1e>
 800752e:	6820      	ldr	r0, [r4, #0]
 8007530:	8983      	ldrh	r3, [r0, #12]
 8007532:	2b08      	cmp	r3, #8
 8007534:	d107      	bne.n	8007546 <net_handle+0x26>
 8007536:	f000 fa6f 	bl	8007a18 <ip_handle>
 800753a:	f00a fc65 	bl	8011e08 <emac_free_pkt>
 800753e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007542:	f006 be9d 	b.w	800e280 <net_timers_run>
 8007546:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800754a:	d1f6      	bne.n	800753a <net_handle+0x1a>
 800754c:	f000 fa08 	bl	8007960 <arp_handle>
 8007550:	e7f3      	b.n	800753a <net_handle+0x1a>
 8007552:	bf00      	nop
 8007554:	200017bc 			; <UNDEFINED> instruction: 0x200017bc

08007558 <tcp_handle>:
 8007558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800755c:	4605      	mov	r5, r0
 800755e:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8007560:	f8b0 8010 	ldrh.w	r8, [r0, #16]
 8007564:	ba5b      	rev16	r3, r3
 8007566:	8443      	strh	r3, [r0, #34]	; 0x22
 8007568:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 800756a:	f890 902e 	ldrb.w	r9, [r0, #46]	; 0x2e
 800756e:	ba5b      	rev16	r3, r3
 8007570:	8483      	strh	r3, [r0, #36]	; 0x24
 8007572:	f006 fef9 	bl	800e368 <_bswap32>
 8007576:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 8007578:	4ca5      	ldr	r4, [pc, #660]	; (8007810 <tcp_handle+0x2b8>)
 800757a:	ba5b      	rev16	r3, r3
 800757c:	862b      	strh	r3, [r5, #48]	; 0x30
 800757e:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 8007580:	8822      	ldrh	r2, [r4, #0]
 8007582:	ba5b      	rev16	r3, r3
 8007584:	86ab      	strh	r3, [r5, #52]	; 0x34
 8007586:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 8007588:	429a      	cmp	r2, r3
 800758a:	d14d      	bne.n	8007628 <tcp_handle+0xd0>
 800758c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007590:	2b01      	cmp	r3, #1
 8007592:	d00d      	beq.n	80075b0 <tcp_handle+0x58>
 8007594:	2204      	movs	r2, #4
 8007596:	4668      	mov	r0, sp
 8007598:	f105 011a 	add.w	r1, r5, #26
 800759c:	f006 feda 	bl	800e354 <memcpy.isra.0>
 80075a0:	8862      	ldrh	r2, [r4, #2]
 80075a2:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d13f      	bne.n	8007628 <tcp_handle+0xd0>
 80075a8:	6862      	ldr	r2, [r4, #4]
 80075aa:	9b00      	ldr	r3, [sp, #0]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d13b      	bne.n	8007628 <tcp_handle+0xd0>
 80075b0:	2204      	movs	r2, #4
 80075b2:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 80075b6:	eb0d 0002 	add.w	r0, sp, r2
 80075ba:	f006 fecb 	bl	800e354 <memcpy.isra.0>
 80075be:	2204      	movs	r2, #4
 80075c0:	f105 0126 	add.w	r1, r5, #38	; 0x26
 80075c4:	eb0d 0002 	add.w	r0, sp, r2
 80075c8:	9e01      	ldr	r6, [sp, #4]
 80075ca:	f006 fec3 	bl	800e354 <memcpy.isra.0>
 80075ce:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 80075d2:	9f01      	ldr	r7, [sp, #4]
 80075d4:	2a01      	cmp	r2, #1
 80075d6:	f8b5 a030 	ldrh.w	sl, [r5, #48]	; 0x30
 80075da:	d01b      	beq.n	8007614 <tcp_handle+0xbc>
 80075dc:	1ed3      	subs	r3, r2, #3
 80075de:	2b07      	cmp	r3, #7
 80075e0:	d822      	bhi.n	8007628 <tcp_handle+0xd0>
 80075e2:	fa98 f198 	rev16.w	r1, r8
 80075e6:	f64f 78ec 	movw	r8, #65516	; 0xffec
 80075ea:	ea4f 1319 	mov.w	r3, r9, lsr #4
 80075ee:	eba8 0883 	sub.w	r8, r8, r3, lsl #2
 80075f2:	4488      	add	r8, r1
 80075f4:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 80075f6:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
 80075fa:	ea4f 0983 	mov.w	r9, r3, lsl #2
 80075fe:	fa1f f888 	uxth.w	r8, r8
 8007602:	2900      	cmp	r1, #0
 8007604:	d142      	bne.n	800768c <tcp_handle+0x134>
 8007606:	f1b8 0f00 	cmp.w	r8, #0
 800760a:	d16b      	bne.n	80076e4 <tcp_handle+0x18c>
 800760c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800760e:	42bb      	cmp	r3, r7
 8007610:	d168      	bne.n	80076e4 <tcp_handle+0x18c>
 8007612:	e048      	b.n	80076a6 <tcp_handle+0x14e>
 8007614:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8007618:	075a      	lsls	r2, r3, #29
 800761a:	d405      	bmi.n	8007628 <tcp_handle+0xd0>
 800761c:	06d8      	lsls	r0, r3, #27
 800761e:	d506      	bpl.n	800762e <tcp_handle+0xd6>
 8007620:	4628      	mov	r0, r5
 8007622:	497b      	ldr	r1, [pc, #492]	; (8007810 <tcp_handle+0x2b8>)
 8007624:	f006 ff6c 	bl	800e500 <_send_reset>
 8007628:	b004      	add	sp, #16
 800762a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800762e:	0799      	lsls	r1, r3, #30
 8007630:	d5fa      	bpl.n	8007628 <tcp_handle+0xd0>
 8007632:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
 8007636:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800763a:	4668      	mov	r0, sp
 800763c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007640:	f105 011a 	add.w	r1, r5, #26
 8007644:	2204      	movs	r2, #4
 8007646:	8063      	strh	r3, [r4, #2]
 8007648:	f006 fe84 	bl	800e354 <memcpy.isra.0>
 800764c:	2206      	movs	r2, #6
 800764e:	9b00      	ldr	r3, [sp, #0]
 8007650:	18a9      	adds	r1, r5, r2
 8007652:	4870      	ldr	r0, [pc, #448]	; (8007814 <tcp_handle+0x2bc>)
 8007654:	6063      	str	r3, [r4, #4]
 8007656:	f006 fe7d 	bl	800e354 <memcpy.isra.0>
 800765a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800765c:	1c7b      	adds	r3, r7, #1
 800765e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8007662:	6363      	str	r3, [r4, #52]	; 0x34
 8007664:	2312      	movs	r3, #18
 8007666:	486a      	ldr	r0, [pc, #424]	; (8007810 <tcp_handle+0x2b8>)
 8007668:	a901      	add	r1, sp, #4
 800766a:	f88d 300c 	strb.w	r3, [sp, #12]
 800766e:	e9c4 7608 	strd	r7, r6, [r4, #32]
 8007672:	63e7      	str	r7, [r4, #60]	; 0x3c
 8007674:	f8c4 a018 	str.w	sl, [r4, #24]
 8007678:	f006 fe9c 	bl	800e3b4 <_tcp_send_package>
 800767c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800767e:	1c5a      	adds	r2, r3, #1
 8007680:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8007684:	2303      	movs	r3, #3
 8007686:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800768a:	e7cd      	b.n	8007628 <tcp_handle+0xd0>
 800768c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800768e:	eba3 0c07 	sub.w	ip, r3, r7
 8007692:	f1b8 0f00 	cmp.w	r8, #0
 8007696:	d10d      	bne.n	80076b4 <tcp_handle+0x15c>
 8007698:	f1bc 0f00 	cmp.w	ip, #0
 800769c:	dc22      	bgt.n	80076e4 <tcp_handle+0x18c>
 800769e:	1afb      	subs	r3, r7, r3
 80076a0:	1a5b      	subs	r3, r3, r1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	da1e      	bge.n	80076e4 <tcp_handle+0x18c>
 80076a6:	0743      	lsls	r3, r0, #29
 80076a8:	d530      	bpl.n	800770c <tcp_handle+0x1b4>
 80076aa:	8821      	ldrh	r1, [r4, #0]
 80076ac:	4858      	ldr	r0, [pc, #352]	; (8007810 <tcp_handle+0x2b8>)
 80076ae:	f006 fe37 	bl	800e320 <_init_tcb>
 80076b2:	e7b9      	b.n	8007628 <tcp_handle+0xd0>
 80076b4:	f1bc 0f00 	cmp.w	ip, #0
 80076b8:	dc06      	bgt.n	80076c8 <tcp_handle+0x170>
 80076ba:	eba7 0c03 	sub.w	ip, r7, r3
 80076be:	ebac 0c01 	sub.w	ip, ip, r1
 80076c2:	f1bc 0f00 	cmp.w	ip, #0
 80076c6:	dbee      	blt.n	80076a6 <tcp_handle+0x14e>
 80076c8:	eb08 0c07 	add.w	ip, r8, r7
 80076cc:	f103 0e01 	add.w	lr, r3, #1
 80076d0:	ebae 0e0c 	sub.w	lr, lr, ip
 80076d4:	f1be 0f00 	cmp.w	lr, #0
 80076d8:	dc04      	bgt.n	80076e4 <tcp_handle+0x18c>
 80076da:	43db      	mvns	r3, r3
 80076dc:	1a5b      	subs	r3, r3, r1
 80076de:	eb13 0f0c 	cmn.w	r3, ip
 80076e2:	d4e0      	bmi.n	80076a6 <tcp_handle+0x14e>
 80076e4:	0742      	lsls	r2, r0, #29
 80076e6:	d505      	bpl.n	80076f4 <tcp_handle+0x19c>
 80076e8:	8821      	ldrh	r1, [r4, #0]
 80076ea:	4849      	ldr	r0, [pc, #292]	; (8007810 <tcp_handle+0x2b8>)
 80076ec:	f006 fe18 	bl	800e320 <_init_tcb>
 80076f0:	2301      	movs	r3, #1
 80076f2:	e7c8      	b.n	8007686 <tcp_handle+0x12e>
 80076f4:	6963      	ldr	r3, [r4, #20]
 80076f6:	9301      	str	r3, [sp, #4]
 80076f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076fa:	9302      	str	r3, [sp, #8]
 80076fc:	2310      	movs	r3, #16
 80076fe:	4844      	ldr	r0, [pc, #272]	; (8007810 <tcp_handle+0x2b8>)
 8007700:	a901      	add	r1, sp, #4
 8007702:	f88d 300c 	strb.w	r3, [sp, #12]
 8007706:	f006 fe55 	bl	800e3b4 <_tcp_send_package>
 800770a:	e78d      	b.n	8007628 <tcp_handle+0xd0>
 800770c:	0781      	lsls	r1, r0, #30
 800770e:	d505      	bpl.n	800771c <tcp_handle+0x1c4>
 8007710:	2a03      	cmp	r2, #3
 8007712:	d0ed      	beq.n	80076f0 <tcp_handle+0x198>
 8007714:	4628      	mov	r0, r5
 8007716:	493e      	ldr	r1, [pc, #248]	; (8007810 <tcp_handle+0x2b8>)
 8007718:	f006 fef2 	bl	800e500 <_send_reset>
 800771c:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8007720:	06da      	lsls	r2, r3, #27
 8007722:	d581      	bpl.n	8007628 <tcp_handle+0xd0>
 8007724:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007728:	3b03      	subs	r3, #3
 800772a:	2b07      	cmp	r3, #7
 800772c:	d818      	bhi.n	8007760 <tcp_handle+0x208>
 800772e:	e8df f003 	tbb	[pc, r3]
 8007732:	75757504 	ldrbvc	r7, [r5, #-1284]!	; 0xfffffafc
 8007736:	a59c7575 	ldrge	r7, [ip, #1397]	; 0x575
 800773a:	6923      	ldr	r3, [r4, #16]
 800773c:	1b9b      	subs	r3, r3, r6
 800773e:	2b00      	cmp	r3, #0
 8007740:	dc0a      	bgt.n	8007758 <tcp_handle+0x200>
 8007742:	6963      	ldr	r3, [r4, #20]
 8007744:	1af3      	subs	r3, r6, r3
 8007746:	2b00      	cmp	r3, #0
 8007748:	dc06      	bgt.n	8007758 <tcp_handle+0x200>
 800774a:	2304      	movs	r3, #4
 800774c:	e9c4 7608 	strd	r7, r6, [r4, #32]
 8007750:	f8c4 a018 	str.w	sl, [r4, #24]
 8007754:	6126      	str	r6, [r4, #16]
 8007756:	e796      	b.n	8007686 <tcp_handle+0x12e>
 8007758:	4628      	mov	r0, r5
 800775a:	492d      	ldr	r1, [pc, #180]	; (8007810 <tcp_handle+0x2b8>)
 800775c:	f006 fed0 	bl	800e500 <_send_reset>
 8007760:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007764:	3b04      	subs	r3, #4
 8007766:	2b02      	cmp	r3, #2
 8007768:	d830      	bhi.n	80077cc <tcp_handle+0x274>
 800776a:	f1b8 0f00 	cmp.w	r8, #0
 800776e:	d02d      	beq.n	80077cc <tcp_handle+0x274>
 8007770:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007772:	42bb      	cmp	r3, r7
 8007774:	f040 8091 	bne.w	800789a <tcp_handle+0x342>
 8007778:	f240 53b6 	movw	r3, #1462	; 0x5b6
 800777c:	f8df a098 	ldr.w	sl, [pc, #152]	; 8007818 <tcp_handle+0x2c0>
 8007780:	f105 0122 	add.w	r1, r5, #34	; 0x22
 8007784:	f8ba 7000 	ldrh.w	r7, [sl]
 8007788:	4642      	mov	r2, r8
 800778a:	435f      	muls	r7, r3
 800778c:	1d38      	adds	r0, r7, #4
 800778e:	4449      	add	r1, r9
 8007790:	4450      	add	r0, sl
 8007792:	f006 fddf 	bl	800e354 <memcpy.isra.0>
 8007796:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8007798:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800779a:	f2a2 52b4 	subw	r2, r2, #1460	; 0x5b4
 800779e:	8722      	strh	r2, [r4, #56]	; 0x38
 80077a0:	6962      	ldr	r2, [r4, #20]
 80077a2:	4443      	add	r3, r8
 80077a4:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80077a8:	6363      	str	r3, [r4, #52]	; 0x34
 80077aa:	2310      	movs	r3, #16
 80077ac:	4457      	add	r7, sl
 80077ae:	4818      	ldr	r0, [pc, #96]	; (8007810 <tcp_handle+0x2b8>)
 80077b0:	f8a7 85b8 	strh.w	r8, [r7, #1464]	; 0x5b8
 80077b4:	a901      	add	r1, sp, #4
 80077b6:	f88d 300c 	strb.w	r3, [sp, #12]
 80077ba:	f006 fdfb 	bl	800e3b4 <_tcp_send_package>
 80077be:	f8ba 3000 	ldrh.w	r3, [sl]
 80077c2:	3301      	adds	r3, #1
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	f8aa 3000 	strh.w	r3, [sl]
 80077cc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	f67f af29 	bls.w	8007628 <tcp_handle+0xd0>
 80077d6:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 80077da:	07db      	lsls	r3, r3, #31
 80077dc:	f57f af24 	bpl.w	8007628 <tcp_handle+0xd0>
 80077e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077e2:	6962      	ldr	r2, [r4, #20]
 80077e4:	3301      	adds	r3, #1
 80077e6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80077ea:	6363      	str	r3, [r4, #52]	; 0x34
 80077ec:	2310      	movs	r3, #16
 80077ee:	4808      	ldr	r0, [pc, #32]	; (8007810 <tcp_handle+0x2b8>)
 80077f0:	a901      	add	r1, sp, #4
 80077f2:	f88d 300c 	strb.w	r3, [sp, #12]
 80077f6:	f006 fddd 	bl	800e3b4 <_tcp_send_package>
 80077fa:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80077fe:	2b05      	cmp	r3, #5
 8007800:	d053      	beq.n	80078aa <tcp_handle+0x352>
 8007802:	d84d      	bhi.n	80078a0 <tcp_handle+0x348>
 8007804:	3b03      	subs	r3, #3
 8007806:	2b01      	cmp	r3, #1
 8007808:	f63f af0e 	bhi.w	8007628 <tcp_handle+0xd0>
 800780c:	2307      	movs	r3, #7
 800780e:	e73a      	b.n	8007686 <tcp_handle+0x12e>
 8007810:	20002348 	andcs	r2, r0, r8, asr #6
 8007814:	20002350 	andcs	r2, r0, r0, asr r3
 8007818:	200017d8 	ldrdcs	r1, [r0], -r8
 800781c:	6923      	ldr	r3, [r4, #16]
 800781e:	1b99      	subs	r1, r3, r6
 8007820:	d513      	bpl.n	800784a <tcp_handle+0x2f2>
 8007822:	6962      	ldr	r2, [r4, #20]
 8007824:	1ab2      	subs	r2, r6, r2
 8007826:	2a00      	cmp	r2, #0
 8007828:	dc0f      	bgt.n	800784a <tcp_handle+0x2f2>
 800782a:	6126      	str	r6, [r4, #16]
 800782c:	6a23      	ldr	r3, [r4, #32]
 800782e:	1bda      	subs	r2, r3, r7
 8007830:	2a00      	cmp	r2, #0
 8007832:	db05      	blt.n	8007840 <tcp_handle+0x2e8>
 8007834:	42bb      	cmp	r3, r7
 8007836:	d193      	bne.n	8007760 <tcp_handle+0x208>
 8007838:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800783a:	1b9b      	subs	r3, r3, r6
 800783c:	2b00      	cmp	r3, #0
 800783e:	dc8f      	bgt.n	8007760 <tcp_handle+0x208>
 8007840:	e9c4 7608 	strd	r7, r6, [r4, #32]
 8007844:	f8c4 a018 	str.w	sl, [r4, #24]
 8007848:	e78a      	b.n	8007760 <tcp_handle+0x208>
 800784a:	1af3      	subs	r3, r6, r3
 800784c:	2b00      	cmp	r3, #0
 800784e:	dc06      	bgt.n	800785e <tcp_handle+0x306>
 8007850:	2900      	cmp	r1, #0
 8007852:	dc85      	bgt.n	8007760 <tcp_handle+0x208>
 8007854:	6963      	ldr	r3, [r4, #20]
 8007856:	1af3      	subs	r3, r6, r3
 8007858:	2b00      	cmp	r3, #0
 800785a:	dc81      	bgt.n	8007760 <tcp_handle+0x208>
 800785c:	e7e6      	b.n	800782c <tcp_handle+0x2d4>
 800785e:	6963      	ldr	r3, [r4, #20]
 8007860:	1b9a      	subs	r2, r3, r6
 8007862:	2a00      	cmp	r2, #0
 8007864:	f6bf af7c 	bge.w	8007760 <tcp_handle+0x208>
 8007868:	e745      	b.n	80076f6 <tcp_handle+0x19e>
 800786a:	6963      	ldr	r3, [r4, #20]
 800786c:	42b3      	cmp	r3, r6
 800786e:	f47f af77 	bne.w	8007760 <tcp_handle+0x208>
 8007872:	8821      	ldrh	r1, [r4, #0]
 8007874:	480f      	ldr	r0, [pc, #60]	; (80078b4 <tcp_handle+0x35c>)
 8007876:	f006 fd53 	bl	800e320 <_init_tcb>
 800787a:	e771      	b.n	8007760 <tcp_handle+0x208>
 800787c:	6963      	ldr	r3, [r4, #20]
 800787e:	42b3      	cmp	r3, r6
 8007880:	f47f af6e 	bne.w	8007760 <tcp_handle+0x208>
 8007884:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007886:	480b      	ldr	r0, [pc, #44]	; (80078b4 <tcp_handle+0x35c>)
 8007888:	9302      	str	r3, [sp, #8]
 800788a:	2310      	movs	r3, #16
 800788c:	a901      	add	r1, sp, #4
 800788e:	9601      	str	r6, [sp, #4]
 8007890:	f88d 300c 	strb.w	r3, [sp, #12]
 8007894:	f006 fd8e 	bl	800e3b4 <_tcp_send_package>
 8007898:	e762      	b.n	8007760 <tcp_handle+0x208>
 800789a:	6962      	ldr	r2, [r4, #20]
 800789c:	9201      	str	r2, [sp, #4]
 800789e:	e72c      	b.n	80076fa <tcp_handle+0x1a2>
 80078a0:	2b06      	cmp	r3, #6
 80078a2:	f47f aec1 	bne.w	8007628 <tcp_handle+0xd0>
 80078a6:	230a      	movs	r3, #10
 80078a8:	e6ed      	b.n	8007686 <tcp_handle+0x12e>
 80078aa:	6963      	ldr	r3, [r4, #20]
 80078ac:	42b3      	cmp	r3, r6
 80078ae:	d0fa      	beq.n	80078a6 <tcp_handle+0x34e>
 80078b0:	2308      	movs	r3, #8
 80078b2:	e6e8      	b.n	8007686 <tcp_handle+0x12e>
 80078b4:	20002348 	andcs	r2, r0, r8, asr #6

080078b8 <udp_handle>:
 80078b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80078bc:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 80078be:	4607      	mov	r7, r0
 80078c0:	ba5b      	rev16	r3, r3
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
 80078c8:	2a01      	cmp	r2, #1
 80078ca:	d904      	bls.n	80078d6 <udp_handle+0x1e>
 80078cc:	2b7b      	cmp	r3, #123	; 0x7b
 80078ce:	d002      	beq.n	80078d6 <udp_handle+0x1e>
 80078d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078d4:	d308      	bcc.n	80078e8 <udp_handle+0x30>
 80078d6:	2400      	movs	r4, #0
 80078d8:	4a1f      	ldr	r2, [pc, #124]	; (8007958 <udp_handle+0xa0>)
 80078da:	f852 1b04 	ldr.w	r1, [r2], #4
 80078de:	4299      	cmp	r1, r3
 80078e0:	d005      	beq.n	80078ee <udp_handle+0x36>
 80078e2:	3401      	adds	r4, #1
 80078e4:	2c08      	cmp	r4, #8
 80078e6:	d1f8      	bne.n	80078da <udp_handle+0x22>
 80078e8:	b002      	add	sp, #8
 80078ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078ee:	f640 3394 	movw	r3, #2964	; 0xb94
 80078f2:	8cfe      	ldrh	r6, [r7, #38]	; 0x26
 80078f4:	435c      	muls	r4, r3
 80078f6:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 80078fa:	ba76      	rev16	r6, r6
 80078fc:	3e08      	subs	r6, #8
 80078fe:	b2b6      	uxth	r6, r6
 8007900:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 8007904:	bf28      	it	cs
 8007906:	f44f 66b8 	movcs.w	r6, #1472	; 0x5c0
 800790a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 800795c <udp_handle+0xa4>
 800790e:	1d20      	adds	r0, r4, #4
 8007910:	f838 5004 	ldrh.w	r5, [r8, r4]
 8007914:	4632      	mov	r2, r6
 8007916:	435d      	muls	r5, r3
 8007918:	4428      	add	r0, r5
 800791a:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 800791e:	4440      	add	r0, r8
 8007920:	f006 fe9c 	bl	800e65c <memcpy.isra.0>
 8007924:	2204      	movs	r2, #4
 8007926:	f107 011a 	add.w	r1, r7, #26
 800792a:	eb0d 0002 	add.w	r0, sp, r2
 800792e:	f006 fe95 	bl	800e65c <memcpy.isra.0>
 8007932:	9a01      	ldr	r2, [sp, #4]
 8007934:	192b      	adds	r3, r5, r4
 8007936:	4443      	add	r3, r8
 8007938:	f8c3 25c4 	str.w	r2, [r3, #1476]	; 0x5c4
 800793c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800793e:	f8a3 65ca 	strh.w	r6, [r3, #1482]	; 0x5ca
 8007942:	ba52      	rev16	r2, r2
 8007944:	f8a3 25c8 	strh.w	r2, [r3, #1480]	; 0x5c8
 8007948:	f838 3004 	ldrh.w	r3, [r8, r4]
 800794c:	3301      	adds	r3, #1
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	f828 3004 	strh.w	r3, [r8, r4]
 8007956:	e7c7      	b.n	80078e8 <udp_handle+0x30>
 8007958:	20002988 	andcs	r2, r0, r8, lsl #19
 800795c:	200029a8 	andcs	r2, r0, r8, lsr #19

08007960 <arp_handle>:
 8007960:	8a83      	ldrh	r3, [r0, #20]
 8007962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007966:	d003      	beq.n	8007970 <arp_handle+0x10>
 8007968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800796c:	d002      	beq.n	8007974 <arp_handle+0x14>
 800796e:	4770      	bx	lr
 8007970:	f008 b80a 	b.w	800f988 <arp_handle_request>
 8007974:	f008 b830 	b.w	800f9d8 <arp_handle_reply>

08007978 <igmp_handle>:
 8007978:	7b83      	ldrb	r3, [r0, #14]
 800797a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800797e:	2b45      	cmp	r3, #69	; 0x45
 8007980:	d116      	bne.n	80079b0 <igmp_handle+0x38>
 8007982:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8007986:	2b11      	cmp	r3, #17
 8007988:	d112      	bne.n	80079b0 <igmp_handle+0x38>
 800798a:	4b20      	ldr	r3, [pc, #128]	; (8007a0c <igmp_handle+0x94>)
 800798c:	f100 051e 	add.w	r5, r0, #30
 8007990:	9300      	str	r3, [sp, #0]
 8007992:	466a      	mov	r2, sp
 8007994:	462b      	mov	r3, r5
 8007996:	f100 0622 	add.w	r6, r0, #34	; 0x22
 800799a:	42b3      	cmp	r3, r6
 800799c:	d10b      	bne.n	80079b6 <igmp_handle+0x3e>
 800799e:	2401      	movs	r4, #1
 80079a0:	2100      	movs	r1, #0
 80079a2:	f04f 0c01 	mov.w	ip, #1
 80079a6:	4b1a      	ldr	r3, [pc, #104]	; (8007a10 <igmp_handle+0x98>)
 80079a8:	4a1a      	ldr	r2, [pc, #104]	; (8007a14 <igmp_handle+0x9c>)
 80079aa:	681f      	ldr	r7, [r3, #0]
 80079ac:	428f      	cmp	r7, r1
 80079ae:	d10a      	bne.n	80079c6 <igmp_handle+0x4e>
 80079b0:	b003      	add	sp, #12
 80079b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079b6:	f813 4b01 	ldrb.w	r4, [r3], #1
 80079ba:	f812 1b01 	ldrb.w	r1, [r2], #1
 80079be:	428c      	cmp	r4, r1
 80079c0:	d0eb      	beq.n	800799a <igmp_handle+0x22>
 80079c2:	2400      	movs	r4, #0
 80079c4:	e7ec      	b.n	80079a0 <igmp_handle+0x28>
 80079c6:	6813      	ldr	r3, [r2, #0]
 80079c8:	9301      	str	r3, [sp, #4]
 80079ca:	b924      	cbnz	r4, 80079d6 <igmp_handle+0x5e>
 80079cc:	462b      	mov	r3, r5
 80079ce:	f10d 0e04 	add.w	lr, sp, #4
 80079d2:	42b3      	cmp	r3, r6
 80079d4:	d10e      	bne.n	80079f4 <igmp_handle+0x7c>
 80079d6:	f892 e005 	ldrb.w	lr, [r2, #5]
 80079da:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 80079de:	f1be 0f01 	cmp.w	lr, #1
 80079e2:	d110      	bne.n	8007a06 <igmp_handle+0x8e>
 80079e4:	f892 e004 	ldrb.w	lr, [r2, #4]
 80079e8:	459e      	cmp	lr, r3
 80079ea:	d909      	bls.n	8007a00 <igmp_handle+0x88>
 80079ec:	085b      	lsrs	r3, r3, #1
 80079ee:	3301      	adds	r3, #1
 80079f0:	7113      	strb	r3, [r2, #4]
 80079f2:	e005      	b.n	8007a00 <igmp_handle+0x88>
 80079f4:	f813 9b01 	ldrb.w	r9, [r3], #1
 80079f8:	f81e 8b01 	ldrb.w	r8, [lr], #1
 80079fc:	45c1      	cmp	r9, r8
 80079fe:	d0e8      	beq.n	80079d2 <igmp_handle+0x5a>
 8007a00:	3101      	adds	r1, #1
 8007a02:	3208      	adds	r2, #8
 8007a04:	e7d2      	b.n	80079ac <igmp_handle+0x34>
 8007a06:	f882 c005 	strb.w	ip, [r2, #5]
 8007a0a:	e7ef      	b.n	80079ec <igmp_handle+0x74>
 8007a0c:	010000e0 	smlatteq	r0, r0, r0, r0
 8007a10:	20009638 	andcs	r9, r0, r8, lsr r6
 8007a14:	20009514 	andcs	r9, r0, r4, lsl r5

08007a18 <ip_handle>:
 8007a18:	7b82      	ldrb	r2, [r0, #14]
 8007a1a:	7dc3      	ldrb	r3, [r0, #23]
 8007a1c:	2a45      	cmp	r2, #69	; 0x45
 8007a1e:	d003      	beq.n	8007a28 <ip_handle+0x10>
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d111      	bne.n	8007a48 <ip_handle+0x30>
 8007a24:	f7ff bfa8 	b.w	8007978 <igmp_handle>
 8007a28:	2b06      	cmp	r3, #6
 8007a2a:	d00b      	beq.n	8007a44 <ip_handle+0x2c>
 8007a2c:	d804      	bhi.n	8007a38 <ip_handle+0x20>
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d006      	beq.n	8007a40 <ip_handle+0x28>
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d0f6      	beq.n	8007a24 <ip_handle+0xc>
 8007a36:	4770      	bx	lr
 8007a38:	2b11      	cmp	r3, #17
 8007a3a:	d105      	bne.n	8007a48 <ip_handle+0x30>
 8007a3c:	f7ff bf3c 	b.w	80078b8 <udp_handle>
 8007a40:	f000 b804 	b.w	8007a4c <icmp_handle>
 8007a44:	f7ff bd88 	b.w	8007558 <tcp_handle>
 8007a48:	4770      	bx	lr
	...

08007a4c <icmp_handle>:
 8007a4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a4e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8007a52:	4604      	mov	r4, r0
 8007a54:	2b08      	cmp	r3, #8
 8007a56:	d13e      	bne.n	8007ad6 <icmp_handle+0x8a>
 8007a58:	f890 5023 	ldrb.w	r5, [r0, #35]	; 0x23
 8007a5c:	2d00      	cmp	r5, #0
 8007a5e:	d13a      	bne.n	8007ad6 <icmp_handle+0x8a>
 8007a60:	1d86      	adds	r6, r0, #6
 8007a62:	4631      	mov	r1, r6
 8007a64:	2206      	movs	r2, #6
 8007a66:	f008 fb39 	bl	80100dc <memcpy.isra.0>
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	2206      	movs	r2, #6
 8007a6e:	491b      	ldr	r1, [pc, #108]	; (8007adc <icmp_handle+0x90>)
 8007a70:	f008 fb34 	bl	80100dc <memcpy.isra.0>
 8007a74:	8a63      	ldrh	r3, [r4, #18]
 8007a76:	f104 061a 	add.w	r6, r4, #26
 8007a7a:	43db      	mvns	r3, r3
 8007a7c:	4631      	mov	r1, r6
 8007a7e:	2204      	movs	r2, #4
 8007a80:	8263      	strh	r3, [r4, #18]
 8007a82:	f104 001e 	add.w	r0, r4, #30
 8007a86:	f008 fb29 	bl	80100dc <memcpy.isra.0>
 8007a8a:	2204      	movs	r2, #4
 8007a8c:	4b14      	ldr	r3, [pc, #80]	; (8007ae0 <icmp_handle+0x94>)
 8007a8e:	eb0d 0102 	add.w	r1, sp, r2
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4630      	mov	r0, r6
 8007a96:	f104 060e 	add.w	r6, r4, #14
 8007a9a:	9301      	str	r3, [sp, #4]
 8007a9c:	f008 fb1e 	bl	80100dc <memcpy.isra.0>
 8007aa0:	2114      	movs	r1, #20
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	7625      	strb	r5, [r4, #24]
 8007aa6:	7665      	strb	r5, [r4, #25]
 8007aa8:	f008 faff 	bl	80100aa <net_chksum>
 8007aac:	8a21      	ldrh	r1, [r4, #16]
 8007aae:	8320      	strh	r0, [r4, #24]
 8007ab0:	ba49      	rev16	r1, r1
 8007ab2:	b289      	uxth	r1, r1
 8007ab4:	4630      	mov	r0, r6
 8007ab6:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8007aba:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 8007abe:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 8007ac2:	f008 faf2 	bl	80100aa <net_chksum>
 8007ac6:	8a21      	ldrh	r1, [r4, #16]
 8007ac8:	84a0      	strh	r0, [r4, #36]	; 0x24
 8007aca:	ba49      	rev16	r1, r1
 8007acc:	b289      	uxth	r1, r1
 8007ace:	4620      	mov	r0, r4
 8007ad0:	310e      	adds	r1, #14
 8007ad2:	f00a f99d 	bl	8011e10 <emac_eth_send>
 8007ad6:	b002      	add	sp, #8
 8007ad8:	bd70      	pop	{r4, r5, r6, pc}
 8007ada:	bf00      	nop
 8007adc:	200017b4 			; <UNDEFINED> instruction: 0x200017b4
 8007ae0:	200017a8 	andcs	r1, r0, r8, lsr #15

08007ae4 <__aeabi_d2f>:
 8007ae4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007ae8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8007aec:	bf24      	itt	cs
 8007aee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8007af2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8007af6:	d90d      	bls.n	8007b14 <__aeabi_d2f+0x30>
 8007af8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8007afc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8007b00:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8007b04:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8007b08:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8007b0c:	bf08      	it	eq
 8007b0e:	f020 0001 	biceq.w	r0, r0, #1
 8007b12:	4770      	bx	lr
 8007b14:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8007b18:	d121      	bne.n	8007b5e <__aeabi_d2f+0x7a>
 8007b1a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8007b1e:	bfbc      	itt	lt
 8007b20:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8007b24:	4770      	bxlt	lr
 8007b26:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007b2a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8007b2e:	f1c2 0218 	rsb	r2, r2, #24
 8007b32:	f1c2 0c20 	rsb	ip, r2, #32
 8007b36:	fa10 f30c 	lsls.w	r3, r0, ip
 8007b3a:	fa20 f002 	lsr.w	r0, r0, r2
 8007b3e:	bf18      	it	ne
 8007b40:	f040 0001 	orrne.w	r0, r0, #1
 8007b44:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8007b48:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8007b4c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8007b50:	ea40 000c 	orr.w	r0, r0, ip
 8007b54:	fa23 f302 	lsr.w	r3, r3, r2
 8007b58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007b5c:	e7cc      	b.n	8007af8 <__aeabi_d2f+0x14>
 8007b5e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8007b62:	d107      	bne.n	8007b74 <__aeabi_d2f+0x90>
 8007b64:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8007b68:	bf1e      	ittt	ne
 8007b6a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8007b6e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8007b72:	4770      	bxne	lr
 8007b74:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8007b78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8007b7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop

08007b84 <__aeabi_frsub>:
 8007b84:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8007b88:	e002      	b.n	8007b90 <__addsf3>
 8007b8a:	bf00      	nop

08007b8c <__aeabi_fsub>:
 8007b8c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08007b90 <__addsf3>:
 8007b90:	0042      	lsls	r2, r0, #1
 8007b92:	bf1f      	itttt	ne
 8007b94:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8007b98:	ea92 0f03 	teqne	r2, r3
 8007b9c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8007ba0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007ba4:	d06a      	beq.n	8007c7c <__addsf3+0xec>
 8007ba6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8007baa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8007bae:	bfc1      	itttt	gt
 8007bb0:	18d2      	addgt	r2, r2, r3
 8007bb2:	4041      	eorgt	r1, r0
 8007bb4:	4048      	eorgt	r0, r1
 8007bb6:	4041      	eorgt	r1, r0
 8007bb8:	bfb8      	it	lt
 8007bba:	425b      	neglt	r3, r3
 8007bbc:	2b19      	cmp	r3, #25
 8007bbe:	bf88      	it	hi
 8007bc0:	4770      	bxhi	lr
 8007bc2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8007bc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007bca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8007bce:	bf18      	it	ne
 8007bd0:	4240      	negne	r0, r0
 8007bd2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007bd6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8007bda:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8007bde:	bf18      	it	ne
 8007be0:	4249      	negne	r1, r1
 8007be2:	ea92 0f03 	teq	r2, r3
 8007be6:	d03f      	beq.n	8007c68 <__addsf3+0xd8>
 8007be8:	f1a2 0201 	sub.w	r2, r2, #1
 8007bec:	fa41 fc03 	asr.w	ip, r1, r3
 8007bf0:	eb10 000c 	adds.w	r0, r0, ip
 8007bf4:	f1c3 0320 	rsb	r3, r3, #32
 8007bf8:	fa01 f103 	lsl.w	r1, r1, r3
 8007bfc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8007c00:	d502      	bpl.n	8007c08 <__addsf3+0x78>
 8007c02:	4249      	negs	r1, r1
 8007c04:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8007c08:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8007c0c:	d313      	bcc.n	8007c36 <__addsf3+0xa6>
 8007c0e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007c12:	d306      	bcc.n	8007c22 <__addsf3+0x92>
 8007c14:	0840      	lsrs	r0, r0, #1
 8007c16:	ea4f 0131 	mov.w	r1, r1, rrx
 8007c1a:	f102 0201 	add.w	r2, r2, #1
 8007c1e:	2afe      	cmp	r2, #254	; 0xfe
 8007c20:	d251      	bcs.n	8007cc6 <__addsf3+0x136>
 8007c22:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8007c26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8007c2a:	bf08      	it	eq
 8007c2c:	f020 0001 	biceq.w	r0, r0, #1
 8007c30:	ea40 0003 	orr.w	r0, r0, r3
 8007c34:	4770      	bx	lr
 8007c36:	0049      	lsls	r1, r1, #1
 8007c38:	eb40 0000 	adc.w	r0, r0, r0
 8007c3c:	3a01      	subs	r2, #1
 8007c3e:	bf28      	it	cs
 8007c40:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8007c44:	d2ed      	bcs.n	8007c22 <__addsf3+0x92>
 8007c46:	fab0 fc80 	clz	ip, r0
 8007c4a:	f1ac 0c08 	sub.w	ip, ip, #8
 8007c4e:	ebb2 020c 	subs.w	r2, r2, ip
 8007c52:	fa00 f00c 	lsl.w	r0, r0, ip
 8007c56:	bfaa      	itet	ge
 8007c58:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8007c5c:	4252      	neglt	r2, r2
 8007c5e:	4318      	orrge	r0, r3
 8007c60:	bfbc      	itt	lt
 8007c62:	40d0      	lsrlt	r0, r2
 8007c64:	4318      	orrlt	r0, r3
 8007c66:	4770      	bx	lr
 8007c68:	f092 0f00 	teq	r2, #0
 8007c6c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8007c70:	bf06      	itte	eq
 8007c72:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8007c76:	3201      	addeq	r2, #1
 8007c78:	3b01      	subne	r3, #1
 8007c7a:	e7b5      	b.n	8007be8 <__addsf3+0x58>
 8007c7c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8007c80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007c84:	bf18      	it	ne
 8007c86:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007c8a:	d021      	beq.n	8007cd0 <__addsf3+0x140>
 8007c8c:	ea92 0f03 	teq	r2, r3
 8007c90:	d004      	beq.n	8007c9c <__addsf3+0x10c>
 8007c92:	f092 0f00 	teq	r2, #0
 8007c96:	bf08      	it	eq
 8007c98:	4608      	moveq	r0, r1
 8007c9a:	4770      	bx	lr
 8007c9c:	ea90 0f01 	teq	r0, r1
 8007ca0:	bf1c      	itt	ne
 8007ca2:	2000      	movne	r0, #0
 8007ca4:	4770      	bxne	lr
 8007ca6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8007caa:	d104      	bne.n	8007cb6 <__addsf3+0x126>
 8007cac:	0040      	lsls	r0, r0, #1
 8007cae:	bf28      	it	cs
 8007cb0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8007cb4:	4770      	bx	lr
 8007cb6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8007cba:	bf3c      	itt	cc
 8007cbc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8007cc0:	4770      	bxcc	lr
 8007cc2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8007cc6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8007cca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007cce:	4770      	bx	lr
 8007cd0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8007cd4:	bf16      	itet	ne
 8007cd6:	4608      	movne	r0, r1
 8007cd8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8007cdc:	4601      	movne	r1, r0
 8007cde:	0242      	lsls	r2, r0, #9
 8007ce0:	bf06      	itte	eq
 8007ce2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8007ce6:	ea90 0f01 	teqeq	r0, r1
 8007cea:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8007cee:	4770      	bx	lr

08007cf0 <__aeabi_ui2f>:
 8007cf0:	f04f 0300 	mov.w	r3, #0
 8007cf4:	e004      	b.n	8007d00 <__aeabi_i2f+0x8>
 8007cf6:	bf00      	nop

08007cf8 <__aeabi_i2f>:
 8007cf8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8007cfc:	bf48      	it	mi
 8007cfe:	4240      	negmi	r0, r0
 8007d00:	ea5f 0c00 	movs.w	ip, r0
 8007d04:	bf08      	it	eq
 8007d06:	4770      	bxeq	lr
 8007d08:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8007d0c:	4601      	mov	r1, r0
 8007d0e:	f04f 0000 	mov.w	r0, #0
 8007d12:	e01c      	b.n	8007d4e <__aeabi_l2f+0x2a>

08007d14 <__aeabi_ul2f>:
 8007d14:	ea50 0201 	orrs.w	r2, r0, r1
 8007d18:	bf08      	it	eq
 8007d1a:	4770      	bxeq	lr
 8007d1c:	f04f 0300 	mov.w	r3, #0
 8007d20:	e00a      	b.n	8007d38 <__aeabi_l2f+0x14>
 8007d22:	bf00      	nop

08007d24 <__aeabi_l2f>:
 8007d24:	ea50 0201 	orrs.w	r2, r0, r1
 8007d28:	bf08      	it	eq
 8007d2a:	4770      	bxeq	lr
 8007d2c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8007d30:	d502      	bpl.n	8007d38 <__aeabi_l2f+0x14>
 8007d32:	4240      	negs	r0, r0
 8007d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007d38:	ea5f 0c01 	movs.w	ip, r1
 8007d3c:	bf02      	ittt	eq
 8007d3e:	4684      	moveq	ip, r0
 8007d40:	4601      	moveq	r1, r0
 8007d42:	2000      	moveq	r0, #0
 8007d44:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8007d48:	bf08      	it	eq
 8007d4a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8007d4e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8007d52:	fabc f28c 	clz	r2, ip
 8007d56:	3a08      	subs	r2, #8
 8007d58:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8007d5c:	db10      	blt.n	8007d80 <__aeabi_l2f+0x5c>
 8007d5e:	fa01 fc02 	lsl.w	ip, r1, r2
 8007d62:	4463      	add	r3, ip
 8007d64:	fa00 fc02 	lsl.w	ip, r0, r2
 8007d68:	f1c2 0220 	rsb	r2, r2, #32
 8007d6c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007d70:	fa20 f202 	lsr.w	r2, r0, r2
 8007d74:	eb43 0002 	adc.w	r0, r3, r2
 8007d78:	bf08      	it	eq
 8007d7a:	f020 0001 	biceq.w	r0, r0, #1
 8007d7e:	4770      	bx	lr
 8007d80:	f102 0220 	add.w	r2, r2, #32
 8007d84:	fa01 fc02 	lsl.w	ip, r1, r2
 8007d88:	f1c2 0220 	rsb	r2, r2, #32
 8007d8c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8007d90:	fa21 f202 	lsr.w	r2, r1, r2
 8007d94:	eb43 0002 	adc.w	r0, r3, r2
 8007d98:	bf08      	it	eq
 8007d9a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8007d9e:	4770      	bx	lr

08007da0 <__gesf2>:
 8007da0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007da4:	e006      	b.n	8007db4 <__cmpsf2+0x4>
 8007da6:	bf00      	nop

08007da8 <__lesf2>:
 8007da8:	f04f 0c01 	mov.w	ip, #1
 8007dac:	e002      	b.n	8007db4 <__cmpsf2+0x4>
 8007dae:	bf00      	nop

08007db0 <__cmpsf2>:
 8007db0:	f04f 0c01 	mov.w	ip, #1
 8007db4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8007db8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8007dbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8007dc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007dc4:	bf18      	it	ne
 8007dc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007dca:	d011      	beq.n	8007df0 <__cmpsf2+0x40>
 8007dcc:	b001      	add	sp, #4
 8007dce:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8007dd2:	bf18      	it	ne
 8007dd4:	ea90 0f01 	teqne	r0, r1
 8007dd8:	bf58      	it	pl
 8007dda:	ebb2 0003 	subspl.w	r0, r2, r3
 8007dde:	bf88      	it	hi
 8007de0:	17c8      	asrhi	r0, r1, #31
 8007de2:	bf38      	it	cc
 8007de4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8007de8:	bf18      	it	ne
 8007dea:	f040 0001 	orrne.w	r0, r0, #1
 8007dee:	4770      	bx	lr
 8007df0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007df4:	d102      	bne.n	8007dfc <__cmpsf2+0x4c>
 8007df6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8007dfa:	d105      	bne.n	8007e08 <__cmpsf2+0x58>
 8007dfc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8007e00:	d1e4      	bne.n	8007dcc <__cmpsf2+0x1c>
 8007e02:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8007e06:	d0e1      	beq.n	8007dcc <__cmpsf2+0x1c>
 8007e08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop

08007e10 <__aeabi_cfrcmple>:
 8007e10:	4684      	mov	ip, r0
 8007e12:	4608      	mov	r0, r1
 8007e14:	4661      	mov	r1, ip
 8007e16:	e7ff      	b.n	8007e18 <__aeabi_cfcmpeq>

08007e18 <__aeabi_cfcmpeq>:
 8007e18:	b50f      	push	{r0, r1, r2, r3, lr}
 8007e1a:	f7ff ffc9 	bl	8007db0 <__cmpsf2>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	bf48      	it	mi
 8007e22:	f110 0f00 	cmnmi.w	r0, #0
 8007e26:	bd0f      	pop	{r0, r1, r2, r3, pc}

08007e28 <__aeabi_fcmpeq>:
 8007e28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007e2c:	f7ff fff4 	bl	8007e18 <__aeabi_cfcmpeq>
 8007e30:	bf0c      	ite	eq
 8007e32:	2001      	moveq	r0, #1
 8007e34:	2000      	movne	r0, #0
 8007e36:	f85d fb08 	ldr.w	pc, [sp], #8
 8007e3a:	bf00      	nop

08007e3c <__aeabi_fcmplt>:
 8007e3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007e40:	f7ff ffea 	bl	8007e18 <__aeabi_cfcmpeq>
 8007e44:	bf34      	ite	cc
 8007e46:	2001      	movcc	r0, #1
 8007e48:	2000      	movcs	r0, #0
 8007e4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8007e4e:	bf00      	nop

08007e50 <__aeabi_fcmple>:
 8007e50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007e54:	f7ff ffe0 	bl	8007e18 <__aeabi_cfcmpeq>
 8007e58:	bf94      	ite	ls
 8007e5a:	2001      	movls	r0, #1
 8007e5c:	2000      	movhi	r0, #0
 8007e5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8007e62:	bf00      	nop

08007e64 <__aeabi_fcmpge>:
 8007e64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007e68:	f7ff ffd2 	bl	8007e10 <__aeabi_cfrcmple>
 8007e6c:	bf94      	ite	ls
 8007e6e:	2001      	movls	r0, #1
 8007e70:	2000      	movhi	r0, #0
 8007e72:	f85d fb08 	ldr.w	pc, [sp], #8
 8007e76:	bf00      	nop

08007e78 <__aeabi_fcmpgt>:
 8007e78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007e7c:	f7ff ffc8 	bl	8007e10 <__aeabi_cfrcmple>
 8007e80:	bf34      	ite	cc
 8007e82:	2001      	movcc	r0, #1
 8007e84:	2000      	movcs	r0, #0
 8007e86:	f85d fb08 	ldr.w	pc, [sp], #8
 8007e8a:	bf00      	nop

08007e8c <__aeabi_f2iz>:
 8007e8c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8007e90:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8007e94:	d30f      	bcc.n	8007eb6 <__aeabi_f2iz+0x2a>
 8007e96:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8007e9a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8007e9e:	d90d      	bls.n	8007ebc <__aeabi_f2iz+0x30>
 8007ea0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8007ea4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ea8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8007eac:	fa23 f002 	lsr.w	r0, r3, r2
 8007eb0:	bf18      	it	ne
 8007eb2:	4240      	negne	r0, r0
 8007eb4:	4770      	bx	lr
 8007eb6:	f04f 0000 	mov.w	r0, #0
 8007eba:	4770      	bx	lr
 8007ebc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8007ec0:	d101      	bne.n	8007ec6 <__aeabi_f2iz+0x3a>
 8007ec2:	0242      	lsls	r2, r0, #9
 8007ec4:	d105      	bne.n	8007ed2 <__aeabi_f2iz+0x46>
 8007ec6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8007eca:	bf08      	it	eq
 8007ecc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8007ed0:	4770      	bx	lr
 8007ed2:	f04f 0000 	mov.w	r0, #0
 8007ed6:	4770      	bx	lr

08007ed8 <__aeabi_uldivmod>:
 8007ed8:	b953      	cbnz	r3, 8007ef0 <__aeabi_uldivmod+0x18>
 8007eda:	b94a      	cbnz	r2, 8007ef0 <__aeabi_uldivmod+0x18>
 8007edc:	2900      	cmp	r1, #0
 8007ede:	bf08      	it	eq
 8007ee0:	2800      	cmpeq	r0, #0
 8007ee2:	bf1c      	itt	ne
 8007ee4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8007ee8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8007eec:	f000 b80c 	b.w	8007f08 <__aeabi_idiv0>
 8007ef0:	f1ad 0c08 	sub.w	ip, sp, #8
 8007ef4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8007ef8:	f001 fa08 	bl	800930c <__udivmoddi4>
 8007efc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007f00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f04:	b004      	add	sp, #16
 8007f06:	4770      	bx	lr

08007f08 <__aeabi_idiv0>:
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop

08007f0c <__aeabi_drsub>:
 8007f0c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8007f10:	e002      	b.n	8007f18 <__adddf3>
 8007f12:	bf00      	nop

08007f14 <__aeabi_dsub>:
 8007f14:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08007f18 <__adddf3>:
 8007f18:	b530      	push	{r4, r5, lr}
 8007f1a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8007f1e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8007f22:	ea94 0f05 	teq	r4, r5
 8007f26:	bf08      	it	eq
 8007f28:	ea90 0f02 	teqeq	r0, r2
 8007f2c:	bf1f      	itttt	ne
 8007f2e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8007f32:	ea55 0c02 	orrsne.w	ip, r5, r2
 8007f36:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8007f3a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007f3e:	f000 80e2 	beq.w	8008106 <__adddf3+0x1ee>
 8007f42:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8007f46:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8007f4a:	bfb8      	it	lt
 8007f4c:	426d      	neglt	r5, r5
 8007f4e:	dd0c      	ble.n	8007f6a <__adddf3+0x52>
 8007f50:	442c      	add	r4, r5
 8007f52:	ea80 0202 	eor.w	r2, r0, r2
 8007f56:	ea81 0303 	eor.w	r3, r1, r3
 8007f5a:	ea82 0000 	eor.w	r0, r2, r0
 8007f5e:	ea83 0101 	eor.w	r1, r3, r1
 8007f62:	ea80 0202 	eor.w	r2, r0, r2
 8007f66:	ea81 0303 	eor.w	r3, r1, r3
 8007f6a:	2d36      	cmp	r5, #54	; 0x36
 8007f6c:	bf88      	it	hi
 8007f6e:	bd30      	pophi	{r4, r5, pc}
 8007f70:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007f74:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007f78:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8007f7c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8007f80:	d002      	beq.n	8007f88 <__adddf3+0x70>
 8007f82:	4240      	negs	r0, r0
 8007f84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007f88:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8007f8c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007f90:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8007f94:	d002      	beq.n	8007f9c <__adddf3+0x84>
 8007f96:	4252      	negs	r2, r2
 8007f98:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8007f9c:	ea94 0f05 	teq	r4, r5
 8007fa0:	f000 80a7 	beq.w	80080f2 <__adddf3+0x1da>
 8007fa4:	f1a4 0401 	sub.w	r4, r4, #1
 8007fa8:	f1d5 0e20 	rsbs	lr, r5, #32
 8007fac:	db0d      	blt.n	8007fca <__adddf3+0xb2>
 8007fae:	fa02 fc0e 	lsl.w	ip, r2, lr
 8007fb2:	fa22 f205 	lsr.w	r2, r2, r5
 8007fb6:	1880      	adds	r0, r0, r2
 8007fb8:	f141 0100 	adc.w	r1, r1, #0
 8007fbc:	fa03 f20e 	lsl.w	r2, r3, lr
 8007fc0:	1880      	adds	r0, r0, r2
 8007fc2:	fa43 f305 	asr.w	r3, r3, r5
 8007fc6:	4159      	adcs	r1, r3
 8007fc8:	e00e      	b.n	8007fe8 <__adddf3+0xd0>
 8007fca:	f1a5 0520 	sub.w	r5, r5, #32
 8007fce:	f10e 0e20 	add.w	lr, lr, #32
 8007fd2:	2a01      	cmp	r2, #1
 8007fd4:	fa03 fc0e 	lsl.w	ip, r3, lr
 8007fd8:	bf28      	it	cs
 8007fda:	f04c 0c02 	orrcs.w	ip, ip, #2
 8007fde:	fa43 f305 	asr.w	r3, r3, r5
 8007fe2:	18c0      	adds	r0, r0, r3
 8007fe4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8007fe8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007fec:	d507      	bpl.n	8007ffe <__adddf3+0xe6>
 8007fee:	f04f 0e00 	mov.w	lr, #0
 8007ff2:	f1dc 0c00 	rsbs	ip, ip, #0
 8007ff6:	eb7e 0000 	sbcs.w	r0, lr, r0
 8007ffa:	eb6e 0101 	sbc.w	r1, lr, r1
 8007ffe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008002:	d31b      	bcc.n	800803c <__adddf3+0x124>
 8008004:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8008008:	d30c      	bcc.n	8008024 <__adddf3+0x10c>
 800800a:	0849      	lsrs	r1, r1, #1
 800800c:	ea5f 0030 	movs.w	r0, r0, rrx
 8008010:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008014:	f104 0401 	add.w	r4, r4, #1
 8008018:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800801c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008020:	f080 809a 	bcs.w	8008158 <__adddf3+0x240>
 8008024:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8008028:	bf08      	it	eq
 800802a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800802e:	f150 0000 	adcs.w	r0, r0, #0
 8008032:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008036:	ea41 0105 	orr.w	r1, r1, r5
 800803a:	bd30      	pop	{r4, r5, pc}
 800803c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008040:	4140      	adcs	r0, r0
 8008042:	eb41 0101 	adc.w	r1, r1, r1
 8008046:	3c01      	subs	r4, #1
 8008048:	bf28      	it	cs
 800804a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800804e:	d2e9      	bcs.n	8008024 <__adddf3+0x10c>
 8008050:	f091 0f00 	teq	r1, #0
 8008054:	bf04      	itt	eq
 8008056:	4601      	moveq	r1, r0
 8008058:	2000      	moveq	r0, #0
 800805a:	fab1 f381 	clz	r3, r1
 800805e:	bf08      	it	eq
 8008060:	3320      	addeq	r3, #32
 8008062:	f1a3 030b 	sub.w	r3, r3, #11
 8008066:	f1b3 0220 	subs.w	r2, r3, #32
 800806a:	da0c      	bge.n	8008086 <__adddf3+0x16e>
 800806c:	320c      	adds	r2, #12
 800806e:	dd08      	ble.n	8008082 <__adddf3+0x16a>
 8008070:	f102 0c14 	add.w	ip, r2, #20
 8008074:	f1c2 020c 	rsb	r2, r2, #12
 8008078:	fa01 f00c 	lsl.w	r0, r1, ip
 800807c:	fa21 f102 	lsr.w	r1, r1, r2
 8008080:	e00c      	b.n	800809c <__adddf3+0x184>
 8008082:	f102 0214 	add.w	r2, r2, #20
 8008086:	bfd8      	it	le
 8008088:	f1c2 0c20 	rsble	ip, r2, #32
 800808c:	fa01 f102 	lsl.w	r1, r1, r2
 8008090:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008094:	bfdc      	itt	le
 8008096:	ea41 010c 	orrle.w	r1, r1, ip
 800809a:	4090      	lslle	r0, r2
 800809c:	1ae4      	subs	r4, r4, r3
 800809e:	bfa2      	ittt	ge
 80080a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80080a4:	4329      	orrge	r1, r5
 80080a6:	bd30      	popge	{r4, r5, pc}
 80080a8:	ea6f 0404 	mvn.w	r4, r4
 80080ac:	3c1f      	subs	r4, #31
 80080ae:	da1c      	bge.n	80080ea <__adddf3+0x1d2>
 80080b0:	340c      	adds	r4, #12
 80080b2:	dc0e      	bgt.n	80080d2 <__adddf3+0x1ba>
 80080b4:	f104 0414 	add.w	r4, r4, #20
 80080b8:	f1c4 0220 	rsb	r2, r4, #32
 80080bc:	fa20 f004 	lsr.w	r0, r0, r4
 80080c0:	fa01 f302 	lsl.w	r3, r1, r2
 80080c4:	ea40 0003 	orr.w	r0, r0, r3
 80080c8:	fa21 f304 	lsr.w	r3, r1, r4
 80080cc:	ea45 0103 	orr.w	r1, r5, r3
 80080d0:	bd30      	pop	{r4, r5, pc}
 80080d2:	f1c4 040c 	rsb	r4, r4, #12
 80080d6:	f1c4 0220 	rsb	r2, r4, #32
 80080da:	fa20 f002 	lsr.w	r0, r0, r2
 80080de:	fa01 f304 	lsl.w	r3, r1, r4
 80080e2:	ea40 0003 	orr.w	r0, r0, r3
 80080e6:	4629      	mov	r1, r5
 80080e8:	bd30      	pop	{r4, r5, pc}
 80080ea:	fa21 f004 	lsr.w	r0, r1, r4
 80080ee:	4629      	mov	r1, r5
 80080f0:	bd30      	pop	{r4, r5, pc}
 80080f2:	f094 0f00 	teq	r4, #0
 80080f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80080fa:	bf06      	itte	eq
 80080fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008100:	3401      	addeq	r4, #1
 8008102:	3d01      	subne	r5, #1
 8008104:	e74e      	b.n	8007fa4 <__adddf3+0x8c>
 8008106:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800810a:	bf18      	it	ne
 800810c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008110:	d029      	beq.n	8008166 <__adddf3+0x24e>
 8008112:	ea94 0f05 	teq	r4, r5
 8008116:	bf08      	it	eq
 8008118:	ea90 0f02 	teqeq	r0, r2
 800811c:	d005      	beq.n	800812a <__adddf3+0x212>
 800811e:	ea54 0c00 	orrs.w	ip, r4, r0
 8008122:	bf04      	itt	eq
 8008124:	4619      	moveq	r1, r3
 8008126:	4610      	moveq	r0, r2
 8008128:	bd30      	pop	{r4, r5, pc}
 800812a:	ea91 0f03 	teq	r1, r3
 800812e:	bf1e      	ittt	ne
 8008130:	2100      	movne	r1, #0
 8008132:	2000      	movne	r0, #0
 8008134:	bd30      	popne	{r4, r5, pc}
 8008136:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800813a:	d105      	bne.n	8008148 <__adddf3+0x230>
 800813c:	0040      	lsls	r0, r0, #1
 800813e:	4149      	adcs	r1, r1
 8008140:	bf28      	it	cs
 8008142:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8008146:	bd30      	pop	{r4, r5, pc}
 8008148:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800814c:	bf3c      	itt	cc
 800814e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008152:	bd30      	popcc	{r4, r5, pc}
 8008154:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008158:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800815c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008160:	f04f 0000 	mov.w	r0, #0
 8008164:	bd30      	pop	{r4, r5, pc}
 8008166:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800816a:	bf1a      	itte	ne
 800816c:	4619      	movne	r1, r3
 800816e:	4610      	movne	r0, r2
 8008170:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008174:	bf1c      	itt	ne
 8008176:	460b      	movne	r3, r1
 8008178:	4602      	movne	r2, r0
 800817a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800817e:	bf06      	itte	eq
 8008180:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008184:	ea91 0f03 	teqeq	r1, r3
 8008188:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800818c:	bd30      	pop	{r4, r5, pc}
 800818e:	bf00      	nop

08008190 <__aeabi_ui2d>:
 8008190:	f090 0f00 	teq	r0, #0
 8008194:	bf04      	itt	eq
 8008196:	2100      	moveq	r1, #0
 8008198:	4770      	bxeq	lr
 800819a:	b530      	push	{r4, r5, lr}
 800819c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80081a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80081a4:	f04f 0500 	mov.w	r5, #0
 80081a8:	f04f 0100 	mov.w	r1, #0
 80081ac:	e750      	b.n	8008050 <__adddf3+0x138>
 80081ae:	bf00      	nop

080081b0 <__aeabi_i2d>:
 80081b0:	f090 0f00 	teq	r0, #0
 80081b4:	bf04      	itt	eq
 80081b6:	2100      	moveq	r1, #0
 80081b8:	4770      	bxeq	lr
 80081ba:	b530      	push	{r4, r5, lr}
 80081bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80081c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80081c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80081c8:	bf48      	it	mi
 80081ca:	4240      	negmi	r0, r0
 80081cc:	f04f 0100 	mov.w	r1, #0
 80081d0:	e73e      	b.n	8008050 <__adddf3+0x138>
 80081d2:	bf00      	nop

080081d4 <__aeabi_f2d>:
 80081d4:	0042      	lsls	r2, r0, #1
 80081d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80081da:	ea4f 0131 	mov.w	r1, r1, rrx
 80081de:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80081e2:	bf1f      	itttt	ne
 80081e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80081e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80081ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80081f0:	4770      	bxne	lr
 80081f2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80081f6:	bf08      	it	eq
 80081f8:	4770      	bxeq	lr
 80081fa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80081fe:	bf04      	itt	eq
 8008200:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8008204:	4770      	bxeq	lr
 8008206:	b530      	push	{r4, r5, lr}
 8008208:	f44f 7460 	mov.w	r4, #896	; 0x380
 800820c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008210:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008214:	e71c      	b.n	8008050 <__adddf3+0x138>
 8008216:	bf00      	nop

08008218 <__aeabi_ul2d>:
 8008218:	ea50 0201 	orrs.w	r2, r0, r1
 800821c:	bf08      	it	eq
 800821e:	4770      	bxeq	lr
 8008220:	b530      	push	{r4, r5, lr}
 8008222:	f04f 0500 	mov.w	r5, #0
 8008226:	e00a      	b.n	800823e <__aeabi_l2d+0x16>

08008228 <__aeabi_l2d>:
 8008228:	ea50 0201 	orrs.w	r2, r0, r1
 800822c:	bf08      	it	eq
 800822e:	4770      	bxeq	lr
 8008230:	b530      	push	{r4, r5, lr}
 8008232:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8008236:	d502      	bpl.n	800823e <__aeabi_l2d+0x16>
 8008238:	4240      	negs	r0, r0
 800823a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800823e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008242:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008246:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800824a:	f43f aed8 	beq.w	8007ffe <__adddf3+0xe6>
 800824e:	f04f 0203 	mov.w	r2, #3
 8008252:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008256:	bf18      	it	ne
 8008258:	3203      	addne	r2, #3
 800825a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800825e:	bf18      	it	ne
 8008260:	3203      	addne	r2, #3
 8008262:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8008266:	f1c2 0320 	rsb	r3, r2, #32
 800826a:	fa00 fc03 	lsl.w	ip, r0, r3
 800826e:	fa20 f002 	lsr.w	r0, r0, r2
 8008272:	fa01 fe03 	lsl.w	lr, r1, r3
 8008276:	ea40 000e 	orr.w	r0, r0, lr
 800827a:	fa21 f102 	lsr.w	r1, r1, r2
 800827e:	4414      	add	r4, r2
 8008280:	e6bd      	b.n	8007ffe <__adddf3+0xe6>
 8008282:	bf00      	nop

08008284 <__aeabi_fmul>:
 8008284:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008288:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800828c:	bf1e      	ittt	ne
 800828e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8008292:	ea92 0f0c 	teqne	r2, ip
 8008296:	ea93 0f0c 	teqne	r3, ip
 800829a:	d06f      	beq.n	800837c <__aeabi_fmul+0xf8>
 800829c:	441a      	add	r2, r3
 800829e:	ea80 0c01 	eor.w	ip, r0, r1
 80082a2:	0240      	lsls	r0, r0, #9
 80082a4:	bf18      	it	ne
 80082a6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80082aa:	d01e      	beq.n	80082ea <__aeabi_fmul+0x66>
 80082ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80082b0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80082b4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80082b8:	fba0 3101 	umull	r3, r1, r0, r1
 80082bc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80082c0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80082c4:	bf3e      	ittt	cc
 80082c6:	0049      	lslcc	r1, r1, #1
 80082c8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80082cc:	005b      	lslcc	r3, r3, #1
 80082ce:	ea40 0001 	orr.w	r0, r0, r1
 80082d2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80082d6:	2afd      	cmp	r2, #253	; 0xfd
 80082d8:	d81d      	bhi.n	8008316 <__aeabi_fmul+0x92>
 80082da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80082e2:	bf08      	it	eq
 80082e4:	f020 0001 	biceq.w	r0, r0, #1
 80082e8:	4770      	bx	lr
 80082ea:	f090 0f00 	teq	r0, #0
 80082ee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80082f2:	bf08      	it	eq
 80082f4:	0249      	lsleq	r1, r1, #9
 80082f6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80082fa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80082fe:	3a7f      	subs	r2, #127	; 0x7f
 8008300:	bfc2      	ittt	gt
 8008302:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8008306:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800830a:	4770      	bxgt	lr
 800830c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008310:	f04f 0300 	mov.w	r3, #0
 8008314:	3a01      	subs	r2, #1
 8008316:	dc5d      	bgt.n	80083d4 <__aeabi_fmul+0x150>
 8008318:	f112 0f19 	cmn.w	r2, #25
 800831c:	bfdc      	itt	le
 800831e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8008322:	4770      	bxle	lr
 8008324:	f1c2 0200 	rsb	r2, r2, #0
 8008328:	0041      	lsls	r1, r0, #1
 800832a:	fa21 f102 	lsr.w	r1, r1, r2
 800832e:	f1c2 0220 	rsb	r2, r2, #32
 8008332:	fa00 fc02 	lsl.w	ip, r0, r2
 8008336:	ea5f 0031 	movs.w	r0, r1, rrx
 800833a:	f140 0000 	adc.w	r0, r0, #0
 800833e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8008342:	bf08      	it	eq
 8008344:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8008348:	4770      	bx	lr
 800834a:	f092 0f00 	teq	r2, #0
 800834e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8008352:	bf02      	ittt	eq
 8008354:	0040      	lsleq	r0, r0, #1
 8008356:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800835a:	3a01      	subeq	r2, #1
 800835c:	d0f9      	beq.n	8008352 <__aeabi_fmul+0xce>
 800835e:	ea40 000c 	orr.w	r0, r0, ip
 8008362:	f093 0f00 	teq	r3, #0
 8008366:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800836a:	bf02      	ittt	eq
 800836c:	0049      	lsleq	r1, r1, #1
 800836e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8008372:	3b01      	subeq	r3, #1
 8008374:	d0f9      	beq.n	800836a <__aeabi_fmul+0xe6>
 8008376:	ea41 010c 	orr.w	r1, r1, ip
 800837a:	e78f      	b.n	800829c <__aeabi_fmul+0x18>
 800837c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8008380:	ea92 0f0c 	teq	r2, ip
 8008384:	bf18      	it	ne
 8008386:	ea93 0f0c 	teqne	r3, ip
 800838a:	d00a      	beq.n	80083a2 <__aeabi_fmul+0x11e>
 800838c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8008390:	bf18      	it	ne
 8008392:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8008396:	d1d8      	bne.n	800834a <__aeabi_fmul+0xc6>
 8008398:	ea80 0001 	eor.w	r0, r0, r1
 800839c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80083a0:	4770      	bx	lr
 80083a2:	f090 0f00 	teq	r0, #0
 80083a6:	bf17      	itett	ne
 80083a8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80083ac:	4608      	moveq	r0, r1
 80083ae:	f091 0f00 	teqne	r1, #0
 80083b2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80083b6:	d014      	beq.n	80083e2 <__aeabi_fmul+0x15e>
 80083b8:	ea92 0f0c 	teq	r2, ip
 80083bc:	d101      	bne.n	80083c2 <__aeabi_fmul+0x13e>
 80083be:	0242      	lsls	r2, r0, #9
 80083c0:	d10f      	bne.n	80083e2 <__aeabi_fmul+0x15e>
 80083c2:	ea93 0f0c 	teq	r3, ip
 80083c6:	d103      	bne.n	80083d0 <__aeabi_fmul+0x14c>
 80083c8:	024b      	lsls	r3, r1, #9
 80083ca:	bf18      	it	ne
 80083cc:	4608      	movne	r0, r1
 80083ce:	d108      	bne.n	80083e2 <__aeabi_fmul+0x15e>
 80083d0:	ea80 0001 	eor.w	r0, r0, r1
 80083d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80083d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80083dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80083e0:	4770      	bx	lr
 80083e2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80083e6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80083ea:	4770      	bx	lr

080083ec <__aeabi_fdiv>:
 80083ec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80083f0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80083f4:	bf1e      	ittt	ne
 80083f6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80083fa:	ea92 0f0c 	teqne	r2, ip
 80083fe:	ea93 0f0c 	teqne	r3, ip
 8008402:	d069      	beq.n	80084d8 <__aeabi_fdiv+0xec>
 8008404:	eba2 0203 	sub.w	r2, r2, r3
 8008408:	ea80 0c01 	eor.w	ip, r0, r1
 800840c:	0249      	lsls	r1, r1, #9
 800840e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8008412:	d037      	beq.n	8008484 <__aeabi_fdiv+0x98>
 8008414:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008418:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800841c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8008420:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8008424:	428b      	cmp	r3, r1
 8008426:	bf38      	it	cc
 8008428:	005b      	lslcc	r3, r3, #1
 800842a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800842e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8008432:	428b      	cmp	r3, r1
 8008434:	bf24      	itt	cs
 8008436:	1a5b      	subcs	r3, r3, r1
 8008438:	ea40 000c 	orrcs.w	r0, r0, ip
 800843c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8008440:	bf24      	itt	cs
 8008442:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8008446:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800844a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800844e:	bf24      	itt	cs
 8008450:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8008454:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008458:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800845c:	bf24      	itt	cs
 800845e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8008462:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008466:	011b      	lsls	r3, r3, #4
 8008468:	bf18      	it	ne
 800846a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800846e:	d1e0      	bne.n	8008432 <__aeabi_fdiv+0x46>
 8008470:	2afd      	cmp	r2, #253	; 0xfd
 8008472:	f63f af50 	bhi.w	8008316 <__aeabi_fmul+0x92>
 8008476:	428b      	cmp	r3, r1
 8008478:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800847c:	bf08      	it	eq
 800847e:	f020 0001 	biceq.w	r0, r0, #1
 8008482:	4770      	bx	lr
 8008484:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8008488:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800848c:	327f      	adds	r2, #127	; 0x7f
 800848e:	bfc2      	ittt	gt
 8008490:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8008494:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8008498:	4770      	bxgt	lr
 800849a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800849e:	f04f 0300 	mov.w	r3, #0
 80084a2:	3a01      	subs	r2, #1
 80084a4:	e737      	b.n	8008316 <__aeabi_fmul+0x92>
 80084a6:	f092 0f00 	teq	r2, #0
 80084aa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80084ae:	bf02      	ittt	eq
 80084b0:	0040      	lsleq	r0, r0, #1
 80084b2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80084b6:	3a01      	subeq	r2, #1
 80084b8:	d0f9      	beq.n	80084ae <__aeabi_fdiv+0xc2>
 80084ba:	ea40 000c 	orr.w	r0, r0, ip
 80084be:	f093 0f00 	teq	r3, #0
 80084c2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80084c6:	bf02      	ittt	eq
 80084c8:	0049      	lsleq	r1, r1, #1
 80084ca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80084ce:	3b01      	subeq	r3, #1
 80084d0:	d0f9      	beq.n	80084c6 <__aeabi_fdiv+0xda>
 80084d2:	ea41 010c 	orr.w	r1, r1, ip
 80084d6:	e795      	b.n	8008404 <__aeabi_fdiv+0x18>
 80084d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80084dc:	ea92 0f0c 	teq	r2, ip
 80084e0:	d108      	bne.n	80084f4 <__aeabi_fdiv+0x108>
 80084e2:	0242      	lsls	r2, r0, #9
 80084e4:	f47f af7d 	bne.w	80083e2 <__aeabi_fmul+0x15e>
 80084e8:	ea93 0f0c 	teq	r3, ip
 80084ec:	f47f af70 	bne.w	80083d0 <__aeabi_fmul+0x14c>
 80084f0:	4608      	mov	r0, r1
 80084f2:	e776      	b.n	80083e2 <__aeabi_fmul+0x15e>
 80084f4:	ea93 0f0c 	teq	r3, ip
 80084f8:	d104      	bne.n	8008504 <__aeabi_fdiv+0x118>
 80084fa:	024b      	lsls	r3, r1, #9
 80084fc:	f43f af4c 	beq.w	8008398 <__aeabi_fmul+0x114>
 8008500:	4608      	mov	r0, r1
 8008502:	e76e      	b.n	80083e2 <__aeabi_fmul+0x15e>
 8008504:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8008508:	bf18      	it	ne
 800850a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800850e:	d1ca      	bne.n	80084a6 <__aeabi_fdiv+0xba>
 8008510:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8008514:	f47f af5c 	bne.w	80083d0 <__aeabi_fmul+0x14c>
 8008518:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800851c:	f47f af3c 	bne.w	8008398 <__aeabi_fmul+0x114>
 8008520:	e75f      	b.n	80083e2 <__aeabi_fmul+0x15e>
 8008522:	bf00      	nop

08008524 <__aeabi_f2uiz>:
 8008524:	0042      	lsls	r2, r0, #1
 8008526:	d20e      	bcs.n	8008546 <__aeabi_f2uiz+0x22>
 8008528:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800852c:	d30b      	bcc.n	8008546 <__aeabi_f2uiz+0x22>
 800852e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8008532:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8008536:	d409      	bmi.n	800854c <__aeabi_f2uiz+0x28>
 8008538:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800853c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008540:	fa23 f002 	lsr.w	r0, r3, r2
 8008544:	4770      	bx	lr
 8008546:	f04f 0000 	mov.w	r0, #0
 800854a:	4770      	bx	lr
 800854c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8008550:	d101      	bne.n	8008556 <__aeabi_f2uiz+0x32>
 8008552:	0242      	lsls	r2, r0, #9
 8008554:	d102      	bne.n	800855c <__aeabi_f2uiz+0x38>
 8008556:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800855a:	4770      	bx	lr
 800855c:	f04f 0000 	mov.w	r0, #0
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop

08008564 <Reset_Handler>:
 8008564:	480c      	ldr	r0, [pc, #48]	; (8008598 <Zerobss+0x10>)
 8008566:	4685      	mov	sp, r0
 8008568:	2100      	movs	r1, #0
 800856a:	e003      	b.n	8008574 <DataInit>

0800856c <CopyData>:
 800856c:	4b0b      	ldr	r3, [pc, #44]	; (800859c <Zerobss+0x14>)
 800856e:	585b      	ldr	r3, [r3, r1]
 8008570:	5043      	str	r3, [r0, r1]
 8008572:	3104      	adds	r1, #4

08008574 <DataInit>:
 8008574:	480a      	ldr	r0, [pc, #40]	; (80085a0 <Zerobss+0x18>)
 8008576:	4b0b      	ldr	r3, [pc, #44]	; (80085a4 <Zerobss+0x1c>)
 8008578:	1842      	adds	r2, r0, r1
 800857a:	429a      	cmp	r2, r3
 800857c:	d3f6      	bcc.n	800856c <CopyData>
 800857e:	4a0a      	ldr	r2, [pc, #40]	; (80085a8 <Zerobss+0x20>)
 8008580:	e002      	b.n	8008588 <Zerobss>

08008582 <FillZerobss>:
 8008582:	2300      	movs	r3, #0
 8008584:	f842 3b04 	str.w	r3, [r2], #4

08008588 <Zerobss>:
 8008588:	4b08      	ldr	r3, [pc, #32]	; (80085ac <Zerobss+0x24>)
 800858a:	429a      	cmp	r2, r3
 800858c:	d3f9      	bcc.n	8008582 <FillZerobss>
 800858e:	f008 fee9 	bl	8011364 <SystemInit>
 8008592:	f000 f933 	bl	80087fc <main>
 8008596:	4770      	bx	lr
 8008598:	20018000 	andcs	r8, r1, r0
 800859c:	08015040 	stmdaeq	r1, {r6, ip, lr}
 80085a0:	20000000 	andcs	r0, r0, r0
 80085a4:	200000e4 	andcs	r0, r0, r4, ror #1
 80085a8:	200000e8 	andcs	r0, r0, r8, ror #1
 80085ac:	20011c1c 	andcs	r1, r1, ip, lsl ip

080085b0 <ADC0_1_IRQHandler>:
 80085b0:	e7fe      	b.n	80085b0 <ADC0_1_IRQHandler>

080085b2 <DisplayHandler::~DisplayHandler()>:
 80085b2:	4770      	bx	lr

080085b4 <PixelDmxStartStop::~PixelDmxStartStop()>:
 80085b4:	4770      	bx	lr
	...

080085b8 <PixelDmxStartStop::Start()>:
 80085b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80085bc:	4b01      	ldr	r3, [pc, #4]	; (80085c4 <PixelDmxStartStop::Start()+0xc>)
 80085be:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 80085c2:	4770      	bx	lr
 80085c4:	40010000 	andmi	r0, r1, r0

080085c8 <PixelDmxStartStop::Stop()>:
 80085c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80085cc:	4b01      	ldr	r3, [pc, #4]	; (80085d4 <PixelDmxStartStop::Stop()+0xc>)
 80085ce:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 80085d2:	4770      	bx	lr
 80085d4:	40010000 	andmi	r0, r1, r0

080085d8 <Handler::~Handler()>:
 80085d8:	4770      	bx	lr

080085da <DisplayHandler::~DisplayHandler()>:
 80085da:	b510      	push	{r4, lr}
 80085dc:	4604      	mov	r4, r0
 80085de:	f008 fc6d 	bl	8010ebc <operator delete(void*)>
 80085e2:	4620      	mov	r0, r4
 80085e4:	bd10      	pop	{r4, pc}

080085e6 <Handler::~Handler()>:
 80085e6:	b510      	push	{r4, lr}
 80085e8:	4604      	mov	r4, r0
 80085ea:	f008 fc67 	bl	8010ebc <operator delete(void*)>
 80085ee:	4620      	mov	r0, r4
 80085f0:	bd10      	pop	{r4, pc}

080085f2 <PixelDmxStartStop::~PixelDmxStartStop()>:
 80085f2:	b510      	push	{r4, lr}
 80085f4:	4604      	mov	r4, r0
 80085f6:	f008 fc61 	bl	8010ebc <operator delete(void*)>
 80085fa:	4620      	mov	r0, r4
 80085fc:	bd10      	pop	{r4, pc}
	...

08008600 <Handler::Info(int, unsigned int, unsigned short)>:
 8008600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008604:	461e      	mov	r6, r3
 8008606:	6843      	ldr	r3, [r0, #4]
 8008608:	b088      	sub	sp, #32
 800860a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800860c:	4607      	mov	r7, r0
 800860e:	6818      	ldr	r0, [r3, #0]
 8008610:	460c      	mov	r4, r1
 8008612:	4615      	mov	r5, r2
 8008614:	f002 fef4 	bl	800b400 <PixelType::GetType(pixel::Type)>
 8008618:	4b15      	ldr	r3, [pc, #84]	; (8008670 <Handler::Info(int, unsigned int, unsigned short)+0x70>)
 800861a:	462a      	mov	r2, r5
 800861c:	9301      	str	r3, [sp, #4]
 800861e:	4b15      	ldr	r3, [pc, #84]	; (8008674 <Handler::Info(int, unsigned int, unsigned short)+0x74>)
 8008620:	4621      	mov	r1, r4
 8008622:	9002      	str	r0, [sp, #8]
 8008624:	9300      	str	r3, [sp, #0]
 8008626:	a805      	add	r0, sp, #20
 8008628:	4633      	mov	r3, r6
 800862a:	f001 fe2f 	bl	800a28c <OscSimpleSend::OscSimpleSend(int, unsigned int, unsigned short, char const*, char const*, char const*)>
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8008678 <Handler::Info(int, unsigned int, unsigned short)+0x78>
 8008634:	6993      	ldr	r3, [r2, #24]
 8008636:	6952      	ldr	r2, [r2, #20]
 8008638:	4621      	mov	r1, r4
 800863a:	4353      	muls	r3, r2
 800863c:	9302      	str	r3, [sp, #8]
 800863e:	4b0f      	ldr	r3, [pc, #60]	; (800867c <Handler::Info(int, unsigned int, unsigned short)+0x7c>)
 8008640:	462a      	mov	r2, r5
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	f8cd 8004 	str.w	r8, [sp, #4]
 8008648:	4633      	mov	r3, r6
 800864a:	a806      	add	r0, sp, #24
 800864c:	f001 fe5c 	bl	800a308 <OscSimpleSend::OscSimpleSend(int, unsigned int, unsigned short, char const*, char const*, int)>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	462a      	mov	r2, r5
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	4621      	mov	r1, r4
 8008658:	e9cd 8301 	strd	r8, r3, [sp, #4]
 800865c:	4b08      	ldr	r3, [pc, #32]	; (8008680 <Handler::Info(int, unsigned int, unsigned short)+0x80>)
 800865e:	a807      	add	r0, sp, #28
 8008660:	9300      	str	r3, [sp, #0]
 8008662:	4633      	mov	r3, r6
 8008664:	f001 fe50 	bl	800a308 <OscSimpleSend::OscSimpleSend(int, unsigned int, unsigned short, char const*, char const*, int)>
 8008668:	b008      	add	sp, #32
 800866a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800866e:	bf00      	nop
 8008670:	08013350 	stmdaeq	r1, {r4, r6, r8, r9, ip, sp}
 8008674:	080131f0 	stmdaeq	r1, {r4, r5, r6, r7, r8, ip, sp}
 8008678:	080131fe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r7, r8, ip, sp}
 800867c:	08013200 	stmdaeq	r1, {r9, ip, sp}
 8008680:	0801320f 	stmdaeq	r1, {r0, r1, r2, r3, r9, ip, sp}

08008684 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>:
 8008684:	b110      	cbz	r0, 800868c <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]+0x8>
 8008686:	6803      	ldr	r3, [r0, #0]
 8008688:	6a1b      	ldr	r3, [r3, #32]
 800868a:	4718      	bx	r3
 800868c:	4770      	bx	lr

0800868e <Display::Write(unsigned char, char const*) [clone .isra.0]>:
 800868e:	b430      	push	{r4, r5}
 8008690:	b168      	cbz	r0, 80086ae <Display::Write(unsigned char, char const*) [clone .isra.0]+0x20>
 8008692:	2300      	movs	r3, #0
 8008694:	7905      	ldrb	r5, [r0, #4]
 8008696:	5cd4      	ldrb	r4, [r2, r3]
 8008698:	b11c      	cbz	r4, 80086a2 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x14>
 800869a:	1c5c      	adds	r4, r3, #1
 800869c:	429d      	cmp	r5, r3
 800869e:	4623      	mov	r3, r4
 80086a0:	dcf9      	bgt.n	8008696 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x8>
 80086a2:	6804      	ldr	r4, [r0, #0]
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	69e4      	ldr	r4, [r4, #28]
 80086a8:	46a4      	mov	ip, r4
 80086aa:	bc30      	pop	{r4, r5}
 80086ac:	4760      	bx	ip
 80086ae:	bc30      	pop	{r4, r5}
 80086b0:	4770      	bx	lr

080086b2 <Display::PutChar(int) [clone .isra.0]>:
 80086b2:	b110      	cbz	r0, 80086ba <Display::PutChar(int) [clone .isra.0]+0x8>
 80086b4:	6803      	ldr	r3, [r0, #0]
 80086b6:	695b      	ldr	r3, [r3, #20]
 80086b8:	4718      	bx	r3
 80086ba:	4770      	bx	lr

080086bc <DisplayHandler::Print(unsigned int)>:
 80086bc:	b538      	push	{r3, r4, r5, lr}
 80086be:	7903      	ldrb	r3, [r0, #4]
 80086c0:	b1f3      	cbz	r3, 8008700 <DisplayHandler::Print(unsigned int)+0x44>
 80086c2:	2904      	cmp	r1, #4
 80086c4:	bf98      	it	ls
 80086c6:	4b0f      	ldrls	r3, [pc, #60]	; (8008704 <DisplayHandler::Print(unsigned int)+0x48>)
 80086c8:	4d0f      	ldr	r5, [pc, #60]	; (8008708 <DisplayHandler::Print(unsigned int)+0x4c>)
 80086ca:	bf98      	it	ls
 80086cc:	5c5c      	ldrbls	r4, [r3, r1]
 80086ce:	682b      	ldr	r3, [r5, #0]
 80086d0:	bf88      	it	hi
 80086d2:	2455      	movhi	r4, #85	; 0x55
 80086d4:	6998      	ldr	r0, [r3, #24]
 80086d6:	b178      	cbz	r0, 80086f8 <DisplayHandler::Print(unsigned int)+0x3c>
 80086d8:	7901      	ldrb	r1, [r0, #4]
 80086da:	3901      	subs	r1, #1
 80086dc:	b2c9      	uxtb	r1, r1
 80086de:	b168      	cbz	r0, 80086fc <DisplayHandler::Print(unsigned int)+0x40>
 80086e0:	7942      	ldrb	r2, [r0, #5]
 80086e2:	3a01      	subs	r2, #1
 80086e4:	b2d2      	uxtb	r2, r2
 80086e6:	f7ff ffcd 	bl	8008684 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 80086ea:	682b      	ldr	r3, [r5, #0]
 80086ec:	4621      	mov	r1, r4
 80086ee:	6998      	ldr	r0, [r3, #24]
 80086f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086f4:	f7ff bfdd 	b.w	80086b2 <Display::PutChar(int) [clone .isra.0]>
 80086f8:	4601      	mov	r1, r0
 80086fa:	e7ee      	b.n	80086da <DisplayHandler::Print(unsigned int)+0x1e>
 80086fc:	4602      	mov	r2, r0
 80086fe:	e7f0      	b.n	80086e2 <DisplayHandler::Print(unsigned int)+0x26>
 8008700:	bd38      	pop	{r3, r4, r5, pc}
 8008702:	bf00      	nop
 8008704:	0801331c 	stmdaeq	r1, {r2, r3, r4, r8, r9, ip, sp}
 8008708:	200096a4 	andcs	r9, r0, r4, lsr #13

0800870c <Display::SetSleep(bool)>:
 800870c:	b538      	push	{r3, r4, r5, lr}
 800870e:	4604      	mov	r4, r0
 8008710:	6980      	ldr	r0, [r0, #24]
 8008712:	460d      	mov	r5, r1
 8008714:	b138      	cbz	r0, 8008726 <Display::SetSleep(bool)+0x1a>
 8008716:	6803      	ldr	r3, [r0, #0]
 8008718:	7421      	strb	r1, [r4, #16]
 800871a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871c:	4798      	blx	r3
 800871e:	b915      	cbnz	r5, 8008726 <Display::SetSleep(bool)+0x1a>
 8008720:	4b01      	ldr	r3, [pc, #4]	; (8008728 <Display::SetSleep(bool)+0x1c>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	6063      	str	r3, [r4, #4]
 8008726:	bd38      	pop	{r3, r4, r5, pc}
 8008728:	200097ac 	andcs	r9, r0, ip, lsr #15

0800872c <Display::Printf(unsigned char, char const*, ...)>:
 800872c:	b40c      	push	{r2, r3}
 800872e:	b570      	push	{r4, r5, r6, lr}
 8008730:	6984      	ldr	r4, [r0, #24]
 8008732:	4605      	mov	r5, r0
 8008734:	460e      	mov	r6, r1
 8008736:	b08a      	sub	sp, #40	; 0x28
 8008738:	b174      	cbz	r4, 8008758 <Display::Printf(unsigned char, char const*, ...)+0x2c>
 800873a:	ab0f      	add	r3, sp, #60	; 0x3c
 800873c:	2120      	movs	r1, #32
 800873e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008740:	a802      	add	r0, sp, #8
 8008742:	9301      	str	r3, [sp, #4]
 8008744:	f000 fdd2 	bl	80092ec <vsnprintf>
 8008748:	4604      	mov	r4, r0
 800874a:	69a8      	ldr	r0, [r5, #24]
 800874c:	4631      	mov	r1, r6
 800874e:	6803      	ldr	r3, [r0, #0]
 8008750:	aa02      	add	r2, sp, #8
 8008752:	69dd      	ldr	r5, [r3, #28]
 8008754:	b2a3      	uxth	r3, r4
 8008756:	47a8      	blx	r5
 8008758:	4620      	mov	r0, r4
 800875a:	b00a      	add	sp, #40	; 0x28
 800875c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008760:	b002      	add	sp, #8
 8008762:	4770      	bx	lr

08008764 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>:
 8008764:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008768:	4604      	mov	r4, r0
 800876a:	6980      	ldr	r0, [r0, #24]
 800876c:	460f      	mov	r7, r1
 800876e:	4615      	mov	r5, r2
 8008770:	461e      	mov	r6, r3
 8008772:	b1d8      	cbz	r0, 80087ac <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x48>
 8008774:	f890 a005 	ldrb.w	sl, [r0, #5]
 8008778:	2100      	movs	r1, #0
 800877a:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 800877e:	fa5f f888 	uxtb.w	r8, r8
 8008782:	4642      	mov	r2, r8
 8008784:	f890 9004 	ldrb.w	r9, [r0, #4]
 8008788:	f04f 0b00 	mov.w	fp, #0
 800878c:	f7ff ff7a 	bl	8008684 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 8008790:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008794:	45cb      	cmp	fp, r9
 8008796:	69a0      	ldr	r0, [r4, #24]
 8008798:	d327      	bcc.n	80087ea <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x86>
 800879a:	4642      	mov	r2, r8
 800879c:	2100      	movs	r1, #0
 800879e:	f7ff ff71 	bl	8008684 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 80087a2:	463a      	mov	r2, r7
 80087a4:	4651      	mov	r1, sl
 80087a6:	69a0      	ldr	r0, [r4, #24]
 80087a8:	f7ff ff71 	bl	800868e <Display::Write(unsigned char, char const*) [clone .isra.0]>
 80087ac:	7c63      	ldrb	r3, [r4, #17]
 80087ae:	b19b      	cbz	r3, 80087d8 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x74>
 80087b0:	43ea      	mvns	r2, r5
 80087b2:	2312      	movs	r3, #18
 80087b4:	7a20      	ldrb	r0, [r4, #8]
 80087b6:	f88d 3004 	strb.w	r3, [sp, #4]
 80087ba:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80087be:	f88d 3005 	strb.w	r3, [sp, #5]
 80087c2:	f88d 2006 	strb.w	r2, [sp, #6]
 80087c6:	f009 fbbb 	bl	8011f40 <gd32_i2c_set_address(unsigned char)>
 80087ca:	68e0      	ldr	r0, [r4, #12]
 80087cc:	f009 fbb0 	bl	8011f30 <gd32_i2c_set_baudrate(unsigned int)>
 80087d0:	2103      	movs	r1, #3
 80087d2:	a801      	add	r0, sp, #4
 80087d4:	f009 fbba 	bl	8011f4c <gd32_i2c_write(char const*, unsigned int)>
 80087d8:	1c73      	adds	r3, r6, #1
 80087da:	d00c      	beq.n	80087f6 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x92>
 80087dc:	4639      	mov	r1, r7
 80087de:	4630      	mov	r0, r6
 80087e0:	b003      	add	sp, #12
 80087e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e6:	f008 ba23 	b.w	8010c30 <console_status>
 80087ea:	2120      	movs	r1, #32
 80087ec:	f7ff ff61 	bl	80086b2 <Display::PutChar(int) [clone .isra.0]>
 80087f0:	f10b 0b01 	add.w	fp, fp, #1
 80087f4:	e7ce      	b.n	8008794 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x30>
 80087f6:	b003      	add	sp, #12
 80087f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080087fc <main>:
 80087fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008800:	f6ad 1dd8 	subw	sp, sp, #2520	; 0x9d8
 8008804:	a810      	add	r0, sp, #64	; 0x40
 8008806:	f008 fac7 	bl	8010d98 <Hardware::Hardware()>
 800880a:	a864      	add	r0, sp, #400	; 0x190
 800880c:	f006 fc9a 	bl	800f144 <Network::Network()>
 8008810:	a81a      	add	r0, sp, #104	; 0x68
 8008812:	f008 fa6b 	bl	8010cec <LedBlink::LedBlink()>
 8008816:	a820      	add	r0, sp, #128	; 0x80
 8008818:	f007 ffac 	bl	8010774 <Display::Display()>
 800881c:	4aac      	ldr	r2, [pc, #688]	; (8008ad0 <main+0x2d4>)
 800881e:	4bad      	ldr	r3, [pc, #692]	; (8008ad4 <main+0x2d8>)
 8008820:	49ad      	ldr	r1, [pc, #692]	; (8008ad8 <main+0x2dc>)
 8008822:	a805      	add	r0, sp, #20
 8008824:	f008 fa1c 	bl	8010c60 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
 8008828:	a806      	add	r0, sp, #24
 800882a:	f005 fbb1 	bl	800df90 <FlashRom::FlashRom()>
 800882e:	a807      	add	r0, sp, #28
 8008830:	f005 f8be 	bl	800d9b0 <SpiFlashStore::SpiFlashStore()>
 8008834:	49a9      	ldr	r1, [pc, #676]	; (8008adc <main+0x2e0>)
 8008836:	a805      	add	r0, sp, #20
 8008838:	f008 fa4a 	bl	8010cd0 <FirmwareVersion::Print(char const*)>
 800883c:	2301      	movs	r3, #1
 800883e:	4ea8      	ldr	r6, [pc, #672]	; (8008ae0 <main+0x2e4>)
 8008840:	2008      	movs	r0, #8
 8008842:	6133      	str	r3, [r6, #16]
 8008844:	f008 fb3e 	bl	8010ec4 <operator new(unsigned int)>
 8008848:	4ba6      	ldr	r3, [pc, #664]	; (8008ae4 <main+0x2e8>)
 800884a:	901c      	str	r0, [sp, #112]	; 0x70
 800884c:	6003      	str	r3, [r0, #0]
 800884e:	4ba6      	ldr	r3, [pc, #664]	; (8008ae8 <main+0x2ec>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	3b00      	subs	r3, #0
 8008854:	bf18      	it	ne
 8008856:	2301      	movne	r3, #1
 8008858:	7103      	strb	r3, [r0, #4]
 800885a:	a80a      	add	r0, sp, #40	; 0x28
 800885c:	f005 fa7c 	bl	800dd58 <StoreOscServer::StoreOscServer()>
 8008860:	a90a      	add	r1, sp, #40	; 0x28
 8008862:	a896      	add	r0, sp, #600	; 0x258
 8008864:	f001 f9d2 	bl	8009c0c <OSCServerParams::OSCServerParams(OSCServerParamsStore*)>
 8008868:	a843      	add	r0, sp, #268	; 0x10c
 800886a:	f000 fed5 	bl	8009618 <OscServer::OscServer()>
 800886e:	a896      	add	r0, sp, #600	; 0x258
 8008870:	f001 f9dc 	bl	8009c2c <OSCServerParams::Load()>
 8008874:	b130      	cbz	r0, 8008884 <main+0x88>
 8008876:	a896      	add	r0, sp, #600	; 0x258
 8008878:	f001 fb6f 	bl	8009f5a <OSCServerParams::Dump()>
 800887c:	a943      	add	r1, sp, #268	; 0x10c
 800887e:	a896      	add	r0, sp, #600	; 0x258
 8008880:	f001 fa7e 	bl	8009d80 <OSCServerParams::Set(OscServer*)>
 8008884:	2400      	movs	r4, #0
 8008886:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800888a:	2303      	movs	r3, #3
 800888c:	4997      	ldr	r1, [pc, #604]	; (8008aec <main+0x2f0>)
 800888e:	a820      	add	r0, sp, #128	; 0x80
 8008890:	f7ff ff68 	bl	8008764 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008894:	a812      	add	r0, sp, #72	; 0x48
 8008896:	f005 fa29 	bl	800dcec <StoreNetwork::StoreNetwork()>
 800889a:	ab13      	add	r3, sp, #76	; 0x4c
 800889c:	a912      	add	r1, sp, #72	; 0x48
 800889e:	a864      	add	r0, sp, #400	; 0x190
 80088a0:	9391      	str	r3, [sp, #580]	; 0x244
 80088a2:	f006 fca5 	bl	800f1f0 <Network::Init(NetworkParamsStore*)>
 80088a6:	a864      	add	r0, sp, #400	; 0x190
 80088a8:	f006 fdd6 	bl	800f458 <Network::Print()>
 80088ac:	2303      	movs	r3, #3
 80088ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80088b2:	498f      	ldr	r1, [pc, #572]	; (8008af0 <main+0x2f4>)
 80088b4:	a820      	add	r0, sp, #128	; 0x80
 80088b6:	f7ff ff55 	bl	8008764 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 80088ba:	a808      	add	r0, sp, #32
 80088bc:	f006 f884 	bl	800e9c8 <MDNS::MDNS()>
 80088c0:	a808      	add	r0, sp, #32
 80088c2:	f006 f941 	bl	800eb48 <MDNS::Start()>
 80088c6:	4b8b      	ldr	r3, [pc, #556]	; (8008af4 <main+0x2f8>)
 80088c8:	4621      	mov	r1, r4
 80088ca:	4a8b      	ldr	r2, [pc, #556]	; (8008af8 <main+0x2fc>)
 80088cc:	9301      	str	r3, [sp, #4]
 80088ce:	9400      	str	r4, [sp, #0]
 80088d0:	f8bd 310c 	ldrh.w	r3, [sp, #268]	; 0x10c
 80088d4:	a808      	add	r0, sp, #32
 80088d6:	f006 faa1 	bl	800ee1c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 80088da:	4b88      	ldr	r3, [pc, #544]	; (8008afc <main+0x300>)
 80088dc:	4621      	mov	r1, r4
 80088de:	9301      	str	r3, [sp, #4]
 80088e0:	2301      	movs	r3, #1
 80088e2:	4a87      	ldr	r2, [pc, #540]	; (8008b00 <main+0x304>)
 80088e4:	9300      	str	r3, [sp, #0]
 80088e6:	a808      	add	r0, sp, #32
 80088e8:	2350      	movs	r3, #80	; 0x50
 80088ea:	f006 fa97 	bl	800ee1c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 80088ee:	4d85      	ldr	r5, [pc, #532]	; (8008b04 <main+0x308>)
 80088f0:	a808      	add	r0, sp, #32
 80088f2:	f006 fbd9 	bl	800f0a8 <MDNS::Print()>
 80088f6:	ac27      	add	r4, sp, #156	; 0x9c
 80088f8:	2303      	movs	r3, #3
 80088fa:	f44f 42cc 	mov.w	r2, #26112	; 0x6600
 80088fe:	4982      	ldr	r1, [pc, #520]	; (8008b08 <main+0x30c>)
 8008900:	a820      	add	r0, sp, #128	; 0x80
 8008902:	f7ff ff2f 	bl	8008764 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008906:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008908:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800890a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800890e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008912:	a814      	add	r0, sp, #80	; 0x50
 8008914:	f005 fb30 	bl	800df78 <StoreWS28xxDmx::StoreWS28xxDmx()>
 8008918:	a914      	add	r1, sp, #80	; 0x50
 800891a:	a838      	add	r0, sp, #224	; 0xe0
 800891c:	f001 ff7a 	bl	800a814 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>
 8008920:	a838      	add	r0, sp, #224	; 0xe0
 8008922:	f001 ff9f 	bl	800a864 <WS28xxDmxParams::Load()>
 8008926:	b130      	cbz	r0, 8008936 <main+0x13a>
 8008928:	a838      	add	r0, sp, #224	; 0xe0
 800892a:	a927      	add	r1, sp, #156	; 0x9c
 800892c:	f002 fa1f 	bl	800ad6e <WS28xxDmxParams::Set(PixelDmxConfiguration*)>
 8008930:	a838      	add	r0, sp, #224	; 0xe0
 8008932:	f002 fa52 	bl	800adda <WS28xxDmxParams::Dump()>
 8008936:	ab0c      	add	r3, sp, #48	; 0x30
 8008938:	ac0d      	add	r4, sp, #52	; 0x34
 800893a:	2101      	movs	r1, #1
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008940:	ab16      	add	r3, sp, #88	; 0x58
 8008942:	a827      	add	r0, sp, #156	; 0x9c
 8008944:	9401      	str	r4, [sp, #4]
 8008946:	f001 fd0b 	bl	800a360 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)>
 800894a:	a827      	add	r0, sp, #156	; 0x9c
 800894c:	f001 fd5d 	bl	800a40a <PixelDmxConfiguration::Dump()>
 8008950:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008952:	2b01      	cmp	r3, #1
 8008954:	d909      	bls.n	800896a <main+0x16e>
 8008956:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8008958:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800895a:	024b      	lsls	r3, r1, #9
 800895c:	ebb2 2f41 	cmp.w	r2, r1, lsl #9
 8008960:	bf94      	ite	ls
 8008962:	fbb3 f3f2 	udivls	r3, r3, r2
 8008966:	23aa      	movhi	r3, #170	; 0xaa
 8008968:	9328      	str	r3, [sp, #160]	; 0xa0
 800896a:	a927      	add	r1, sp, #156	; 0x9c
 800896c:	a853      	add	r0, sp, #332	; 0x14c
 800896e:	f001 fe57 	bl	800a620 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>
 8008972:	f89d 410a 	ldrb.w	r4, [sp, #266]	; 0x10a
 8008976:	ab15      	add	r3, sp, #84	; 0x54
 8008978:	2101      	movs	r1, #1
 800897a:	a809      	add	r0, sp, #36	; 0x24
 800897c:	9361      	str	r3, [sp, #388]	; 0x184
 800897e:	f002 fae9 	bl	800af54 <PixelPatterns::PixelPatterns(unsigned int)>
 8008982:	4b62      	ldr	r3, [pc, #392]	; (8008b0c <main+0x310>)
 8008984:	2c05      	cmp	r4, #5
 8008986:	601c      	str	r4, [r3, #0]
 8008988:	f340 8161 	ble.w	8008c4e <main+0x452>
 800898c:	4b60      	ldr	r3, [pc, #384]	; (8008b10 <main+0x314>)
 800898e:	2110      	movs	r1, #16
 8008990:	2203      	movs	r2, #3
 8008992:	4860      	ldr	r0, [pc, #384]	; (8008b14 <main+0x318>)
 8008994:	930e      	str	r3, [sp, #56]	; 0x38
 8008996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800899a:	f008 fe1b 	bl	80115d4 <gpio_init>
 800899e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80089a2:	4b5d      	ldr	r3, [pc, #372]	; (8008b18 <main+0x31c>)
 80089a4:	ac0e      	add	r4, sp, #56	; 0x38
 80089a6:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 80089aa:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80089ac:	9462      	str	r4, [sp, #392]	; 0x188
 80089ae:	f002 fd27 	bl	800b400 <PixelType::GetType(pixel::Type)>
 80089b2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80089b4:	2107      	movs	r1, #7
 80089b6:	9201      	str	r2, [sp, #4]
 80089b8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80089ba:	4603      	mov	r3, r0
 80089bc:	9200      	str	r2, [sp, #0]
 80089be:	a820      	add	r0, sp, #128	; 0x80
 80089c0:	4a56      	ldr	r2, [pc, #344]	; (8008b1c <main+0x320>)
 80089c2:	f7ff feb3 	bl	800872c <Display::Printf(unsigned char, char const*, ...)>
 80089c6:	ab53      	add	r3, sp, #332	; 0x14c
 80089c8:	2008      	movs	r0, #8
 80089ca:	9350      	str	r3, [sp, #320]	; 0x140
 80089cc:	f008 fa7a 	bl	8010ec4 <operator new(unsigned int)>
 80089d0:	4b53      	ldr	r3, [pc, #332]	; (8008b20 <main+0x324>)
 80089d2:	904f      	str	r0, [sp, #316]	; 0x13c
 80089d4:	6003      	str	r3, [r0, #0]
 80089d6:	ab53      	add	r3, sp, #332	; 0x14c
 80089d8:	6043      	str	r3, [r0, #4]
 80089da:	a843      	add	r0, sp, #268	; 0x10c
 80089dc:	f001 f882 	bl	8009ae4 <OscServer::Print()>
 80089e0:	a853      	add	r0, sp, #332	; 0x14c
 80089e2:	f002 f9fb 	bl	800addc <WS28xxDmx::Print()>
 80089e6:	2401      	movs	r4, #1
 80089e8:	9826      	ldr	r0, [sp, #152]	; 0x98
 80089ea:	b2e1      	uxtb	r1, r4
 80089ec:	b110      	cbz	r0, 80089f4 <main+0x1f8>
 80089ee:	6803      	ldr	r3, [r0, #0]
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	4798      	blx	r3
 80089f4:	3401      	adds	r4, #1
 80089f6:	2c07      	cmp	r4, #7
 80089f8:	d1f6      	bne.n	80089e8 <main+0x1ec>
 80089fa:	2101      	movs	r1, #1
 80089fc:	4a49      	ldr	r2, [pc, #292]	; (8008b24 <main+0x328>)
 80089fe:	a820      	add	r0, sp, #128	; 0x80
 8008a00:	f7ff fe94 	bl	800872c <Display::Printf(unsigned char, char const*, ...)>
 8008a04:	2102      	movs	r1, #2
 8008a06:	4a48      	ldr	r2, [pc, #288]	; (8008b28 <main+0x32c>)
 8008a08:	9826      	ldr	r0, [sp, #152]	; 0x98
 8008a0a:	f7ff fe40 	bl	800868e <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8008a0e:	f89d 4191 	ldrb.w	r4, [sp, #401]	; 0x191
 8008a12:	4b46      	ldr	r3, [pc, #280]	; (8008b2c <main+0x330>)
 8008a14:	2c00      	cmp	r4, #0
 8008a16:	bf14      	ite	ne
 8008a18:	2444      	movne	r4, #68	; 0x44
 8008a1a:	2453      	moveq	r4, #83	; 0x53
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008a24:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8008a28:	0e18      	lsrs	r0, r3, #24
 8008a2a:	e9cd 2100 	strd	r2, r1, [sp]
 8008a2e:	e9cd 0402 	strd	r0, r4, [sp, #8]
 8008a32:	2103      	movs	r1, #3
 8008a34:	4a3e      	ldr	r2, [pc, #248]	; (8008b30 <main+0x334>)
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	a820      	add	r0, sp, #128	; 0x80
 8008a3a:	f7ff fe77 	bl	800872c <Display::Printf(unsigned char, char const*, ...)>
 8008a3e:	2104      	movs	r1, #4
 8008a40:	f8bd 310c 	ldrh.w	r3, [sp, #268]	; 0x10c
 8008a44:	4a3b      	ldr	r2, [pc, #236]	; (8008b34 <main+0x338>)
 8008a46:	a820      	add	r0, sp, #128	; 0x80
 8008a48:	f7ff fe70 	bl	800872c <Display::Printf(unsigned char, char const*, ...)>
 8008a4c:	2105      	movs	r1, #5
 8008a4e:	f8bd 310e 	ldrh.w	r3, [sp, #270]	; 0x10e
 8008a52:	4a39      	ldr	r2, [pc, #228]	; (8008b38 <main+0x33c>)
 8008a54:	a820      	add	r0, sp, #128	; 0x80
 8008a56:	f7ff fe69 	bl	800872c <Display::Printf(unsigned char, char const*, ...)>
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	2203      	movs	r2, #3
 8008a5e:	2102      	movs	r1, #2
 8008a60:	a8fa      	add	r0, sp, #1000	; 0x3e8
 8008a62:	f003 fdd7 	bl	800c614 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>
 8008a66:	a80f      	add	r0, sp, #60	; 0x3c
 8008a68:	f005 f9aa 	bl	800ddc0 <StoreRemoteConfig::StoreRemoteConfig()>
 8008a6c:	a90f      	add	r1, sp, #60	; 0x3c
 8008a6e:	a82f      	add	r0, sp, #188	; 0xbc
 8008a70:	f004 f8a4 	bl	800cbbc <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 8008a74:	a82f      	add	r0, sp, #188	; 0xbc
 8008a76:	f004 f8ab 	bl	800cbd0 <RemoteConfigParams::Load()>
 8008a7a:	b130      	cbz	r0, 8008a8a <main+0x28e>
 8008a7c:	a82f      	add	r0, sp, #188	; 0xbc
 8008a7e:	a9fa      	add	r1, sp, #1000	; 0x3e8
 8008a80:	f004 f9cd 	bl	800ce1e <RemoteConfigParams::Set(RemoteConfig*)>
 8008a84:	a82f      	add	r0, sp, #188	; 0xbc
 8008a86:	f004 f9ee 	bl	800ce66 <RemoteConfigParams::Dump()>
 8008a8a:	a807      	add	r0, sp, #28
 8008a8c:	f005 f832 	bl	800daf4 <SpiFlashStore::Flash()>
 8008a90:	2800      	cmp	r0, #0
 8008a92:	d1fa      	bne.n	8008a8a <main+0x28e>
 8008a94:	2303      	movs	r3, #3
 8008a96:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8008a9a:	4928      	ldr	r1, [pc, #160]	; (8008b3c <main+0x340>)
 8008a9c:	a820      	add	r0, sp, #128	; 0x80
 8008a9e:	f7ff fe61 	bl	8008764 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008aa2:	a843      	add	r0, sp, #268	; 0x10c
 8008aa4:	f000 fe22 	bl	80096ec <OscServer::Start()>
 8008aa8:	2302      	movs	r3, #2
 8008aaa:	f248 0280 	movw	r2, #32896	; 0x8080
 8008aae:	4924      	ldr	r1, [pc, #144]	; (8008b40 <main+0x344>)
 8008ab0:	a820      	add	r0, sp, #128	; 0x80
 8008ab2:	f7ff fe57 	bl	8008764 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008ab6:	2102      	movs	r1, #2
 8008ab8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008abc:	f008 fd60 	bl	8011580 <fwdgt_config>
 8008ac0:	2801      	cmp	r0, #1
 8008ac2:	bf0c      	ite	eq
 8008ac4:	2301      	moveq	r3, #1
 8008ac6:	2300      	movne	r3, #0
 8008ac8:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 8008acc:	e03a      	b.n	8008b44 <main+0x348>
 8008ace:	bf00      	nop
 8008ad0:	08013229 	stmdaeq	r1, {r0, r3, r5, r9, ip, sp}
 8008ad4:	08013220 	stmdaeq	r1, {r5, r9, ip, sp}
 8008ad8:	08013321 	stmdaeq	r1, {r0, r5, r8, r9, ip, sp}
 8008adc:	08013235 	stmdaeq	r1, {r0, r2, r4, r5, r9, ip, sp}
 8008ae0:	40011000 	andmi	r1, r1, r0
 8008ae4:	080132dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r9, ip, sp}
 8008ae8:	200096a4 	andcs	r9, r0, r4, lsr #13
 8008aec:	080148f9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, fp, lr}
 8008af0:	080148e8 	stmdaeq	r1, {r3, r5, r6, r7, fp, lr}
 8008af4:	0801326f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r9, ip, sp}
 8008af8:	08013269 	stmdaeq	r1, {r0, r3, r5, r6, r9, ip, sp}
 8008afc:	08013282 	stmdaeq	r1, {r1, r7, r9, ip, sp}
 8008b00:	0801327b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r9, ip, sp}
 8008b04:	080131b8 	stmdaeq	r1, {r3, r4, r5, r7, r8, ip, sp}
 8008b08:	08013442 	stmdaeq	r1, {r1, r6, sl, ip, sp}
 8008b0c:	20000728 	andcs	r0, r0, r8, lsr #14
 8008b10:	080132f0 	stmdaeq	r1, {r4, r5, r6, r7, r9, ip, sp}
 8008b14:	40010c00 	andmi	r0, r1, r0, lsl #24
 8008b18:	40010000 	andmi	r0, r1, r0
 8008b1c:	08013292 	stmdaeq	r1, {r1, r4, r7, r9, ip, sp}
 8008b20:	08013308 	stmdaeq	r1, {r3, r8, r9, ip, sp}
 8008b24:	0801329c 	stmdaeq	r1, {r2, r3, r4, r7, r9, ip, sp}
 8008b28:	080132a8 	stmdaeq	r1, {r3, r5, r7, r9, ip, sp}
 8008b2c:	20009074 	andcs	r9, r0, r4, ror r0
 8008b30:	080132b2 	stmdaeq	r1, {r1, r4, r5, r7, r9, ip, sp}
 8008b34:	080132c5 	stmdaeq	r1, {r0, r2, r6, r7, r9, ip, sp}
 8008b38:	080132cc 	stmdaeq	r1, {r2, r3, r6, r7, r9, ip, sp}
 8008b3c:	0801342a 	stmdaeq	r1, {r1, r3, r5, sl, ip, sp}
 8008b40:	08013459 	stmdaeq	r1, {r0, r3, r4, r6, sl, ip, sp}
 8008b44:	d101      	bne.n	8008b4a <main+0x34e>
 8008b46:	f008 fd0b 	bl	8011560 <fwdgt_enable>
 8008b4a:	2701      	movs	r7, #1
 8008b4c:	4c49      	ldr	r4, [pc, #292]	; (8008c74 <main+0x478>)
 8008b4e:	4d4a      	ldr	r5, [pc, #296]	; (8008c78 <main+0x47c>)
 8008b50:	f008 fd0e 	bl	8011570 <fwdgt_counter_reload>
 8008b54:	f7fe fce4 	bl	8007520 <net_handle>
 8008b58:	a843      	add	r0, sp, #268	; 0x10c
 8008b5a:	f000 fe77 	bl	800984c <OscServer::Run()>
 8008b5e:	a8fa      	add	r0, sp, #1000	; 0x3e8
 8008b60:	f003 fef2 	bl	800c948 <RemoteConfig::Run()>
 8008b64:	a807      	add	r0, sp, #28
 8008b66:	f004 ffc5 	bl	800daf4 <SpiFlashStore::Flash()>
 8008b6a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008b6c:	b172      	cbz	r2, 8008b8c <main+0x390>
 8008b6e:	6823      	ldr	r3, [r4, #0]
 8008b70:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8008b72:	1a5b      	subs	r3, r3, r1
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d809      	bhi.n	8008b8c <main+0x390>
 8008b78:	6823      	ldr	r3, [r4, #0]
 8008b7a:	931f      	str	r3, [sp, #124]	; 0x7c
 8008b7c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	f083 0201 	eor.w	r2, r3, #1
 8008b84:	921e      	str	r2, [sp, #120]	; 0x78
 8008b86:	bf14      	ite	ne
 8008b88:	6137      	strne	r7, [r6, #16]
 8008b8a:	6173      	streq	r3, [r6, #20]
 8008b8c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8008b8e:	b162      	cbz	r2, 8008baa <main+0x3ae>
 8008b90:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d154      	bne.n	8008c42 <main+0x446>
 8008b98:	6823      	ldr	r3, [r4, #0]
 8008b9a:	9921      	ldr	r1, [sp, #132]	; 0x84
 8008b9c:	1a5b      	subs	r3, r3, r1
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d203      	bcs.n	8008baa <main+0x3ae>
 8008ba2:	2101      	movs	r1, #1
 8008ba4:	a820      	add	r0, sp, #128	; 0x80
 8008ba6:	f7ff fdb1 	bl	800870c <Display::SetSleep(bool)>
 8008baa:	682b      	ldr	r3, [r5, #0]
 8008bac:	b113      	cbz	r3, 8008bb4 <main+0x3b8>
 8008bae:	a809      	add	r0, sp, #36	; 0x24
 8008bb0:	f002 fbfe 	bl	800b3b0 <PixelPatterns::Run()>
 8008bb4:	a808      	add	r0, sp, #32
 8008bb6:	f006 fa53 	bl	800f060 <MDNS::Run()>
 8008bba:	e7c9      	b.n	8008b50 <main+0x354>
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	2264      	movs	r2, #100	; 0x64
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	a809      	add	r0, sp, #36	; 0x24
 8008bc4:	f002 f9e6 	bl	800af94 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 8008bc8:	e6e0      	b.n	800898c <main+0x190>
 8008bca:	2200      	movs	r2, #0
 8008bcc:	2364      	movs	r3, #100	; 0x64
 8008bce:	4611      	mov	r1, r2
 8008bd0:	e9cd 3200 	strd	r3, r2, [sp]
 8008bd4:	a809      	add	r0, sp, #36	; 0x24
 8008bd6:	4b29      	ldr	r3, [pc, #164]	; (8008c7c <main+0x480>)
 8008bd8:	f002 f9f0 	bl	800afbc <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8008bdc:	e6d6      	b.n	800898c <main+0x190>
 8008bde:	2100      	movs	r1, #0
 8008be0:	2364      	movs	r3, #100	; 0x64
 8008be2:	4a26      	ldr	r2, [pc, #152]	; (8008c7c <main+0x480>)
 8008be4:	9100      	str	r1, [sp, #0]
 8008be6:	a809      	add	r0, sp, #36	; 0x24
 8008be8:	f002 fa04 	bl	800aff4 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8008bec:	e6ce      	b.n	800898c <main+0x190>
 8008bee:	2364      	movs	r3, #100	; 0x64
 8008bf0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	a809      	add	r0, sp, #36	; 0x24
 8008bf8:	f002 fa16 	bl	800b028 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 8008bfc:	e6c6      	b.n	800898c <main+0x190>
 8008bfe:	2200      	movs	r2, #0
 8008c00:	2364      	movs	r3, #100	; 0x64
 8008c02:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008c06:	230a      	movs	r3, #10
 8008c08:	4611      	mov	r1, r2
 8008c0a:	9300      	str	r3, [sp, #0]
 8008c0c:	a809      	add	r0, sp, #36	; 0x24
 8008c0e:	4b1b      	ldr	r3, [pc, #108]	; (8008c7c <main+0x480>)
 8008c10:	f002 fa3c 	bl	800b08c <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8008c14:	e6ba      	b.n	800898c <main+0x190>
 8008c16:	2400      	movs	r4, #0
 8008c18:	46a0      	mov	r8, r4
 8008c1a:	4b19      	ldr	r3, [pc, #100]	; (8008c80 <main+0x484>)
 8008c1c:	4f19      	ldr	r7, [pc, #100]	; (8008c84 <main+0x488>)
 8008c1e:	4d1a      	ldr	r5, [pc, #104]	; (8008c88 <main+0x48c>)
 8008c20:	61dc      	str	r4, [r3, #28]
 8008c22:	682b      	ldr	r3, [r5, #0]
 8008c24:	6838      	ldr	r0, [r7, #0]
 8008c26:	429c      	cmp	r4, r3
 8008c28:	d302      	bcc.n	8008c30 <main+0x434>
 8008c2a:	f003 fb49 	bl	800c2c0 <WS28xx::Update()>
 8008c2e:	e6ad      	b.n	800898c <main+0x190>
 8008c30:	2300      	movs	r3, #0
 8008c32:	4621      	mov	r1, r4
 8008c34:	461a      	mov	r2, r3
 8008c36:	f8cd 8000 	str.w	r8, [sp]
 8008c3a:	f002 fd01 	bl	800b640 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8008c3e:	3401      	adds	r4, #1
 8008c40:	e7ef      	b.n	8008c22 <main+0x426>
 8008c42:	f007 fdc2 	bl	80107ca <display::timeout::gpio_renew()>
 8008c46:	2800      	cmp	r0, #0
 8008c48:	d0af      	beq.n	8008baa <main+0x3ae>
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	e7aa      	b.n	8008ba4 <main+0x3a8>
 8008c4e:	2c05      	cmp	r4, #5
 8008c50:	f63f ae9c 	bhi.w	800898c <main+0x190>
 8008c54:	a301      	add	r3, pc, #4	; (adr r3, 8008c5c <main+0x460>)
 8008c56:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8008c5a:	bf00      	nop
 8008c5c:	08008c17 	stmdaeq	r0, {r0, r1, r2, r4, sl, fp, pc}
 8008c60:	08008bbd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8, r9, fp, pc}
 8008c64:	08008bcb 	stmdaeq	r0, {r0, r1, r3, r6, r7, r8, r9, fp, pc}
 8008c68:	08008bdf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, r8, r9, fp, pc}
 8008c6c:	08008bef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, r8, r9, fp, pc}
 8008c70:	08008bff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, fp, pc}
 8008c74:	200097ac 	andcs	r9, r0, ip, lsr #15
 8008c78:	20000728 	andcs	r0, r0, r8, lsr #14
 8008c7c:	00646464 	rsbeq	r6, r4, r4, ror #8
 8008c80:	200006f8 	strdcs	r0, [r0], -r8
 8008c84:	20000724 	andcs	r0, r0, r4, lsr #14
 8008c88:	20000720 	andcs	r0, r0, r0, lsr #14

08008c8c <Handler::Update()>:
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	6840      	ldr	r0, [r0, #4]
 8008c90:	f001 bbd9 	b.w	800a446 <WS28xxDmx::Blackout(bool)>

08008c94 <Handler::Blackout()>:
 8008c94:	2101      	movs	r1, #1
 8008c96:	6840      	ldr	r0, [r0, #4]
 8008c98:	f001 bbd5 	b.w	800a446 <WS28xxDmx::Blackout(bool)>

08008c9c <NetworkDisplay::ShowEmacStart()>:
 8008c9c:	4770      	bx	lr

08008c9e <NetworkDisplay::ShowIp()>:
 8008c9e:	4770      	bx	lr

08008ca0 <NetworkDisplay::ShowShutdown()>:
 8008ca0:	4770      	bx	lr

08008ca2 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 8008ca2:	4770      	bx	lr

08008ca4 <_itostr>:
 8008ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ca6:	0fc7      	lsrs	r7, r0, #31
 8008ca8:	b091      	sub	sp, #68	; 0x44
 8008caa:	bf18      	it	ne
 8008cac:	4240      	negne	r0, r0
 8008cae:	f10d 043f 	add.w	r4, sp, #63	; 0x3f
 8008cb2:	b9c8      	cbnz	r0, 8008ce8 <_itostr+0x44>
 8008cb4:	2330      	movs	r3, #48	; 0x30
 8008cb6:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8008cba:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8008cbe:	b132      	cbz	r2, 8008cce <_itostr+0x2a>
 8008cc0:	4668      	mov	r0, sp
 8008cc2:	2530      	movs	r5, #48	; 0x30
 8008cc4:	1ae6      	subs	r6, r4, r3
 8008cc6:	4296      	cmp	r6, r2
 8008cc8:	da01      	bge.n	8008cce <_itostr+0x2a>
 8008cca:	4283      	cmp	r3, r0
 8008ccc:	d81c      	bhi.n	8008d08 <_itostr+0x64>
 8008cce:	b117      	cbz	r7, 8008cd6 <_itostr+0x32>
 8008cd0:	222d      	movs	r2, #45	; 0x2d
 8008cd2:	f803 2901 	strb.w	r2, [r3], #-1
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	1ae0      	subs	r0, r4, r3
 8008cda:	3901      	subs	r1, #1
 8008cdc:	aa10      	add	r2, sp, #64	; 0x40
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d315      	bcc.n	8008d0e <_itostr+0x6a>
 8008ce2:	3001      	adds	r0, #1
 8008ce4:	b011      	add	sp, #68	; 0x44
 8008ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ce8:	4623      	mov	r3, r4
 8008cea:	250a      	movs	r5, #10
 8008cec:	46ec      	mov	ip, sp
 8008cee:	fb90 f6f5 	sdiv	r6, r0, r5
 8008cf2:	fb05 0016 	mls	r0, r5, r6, r0
 8008cf6:	3030      	adds	r0, #48	; 0x30
 8008cf8:	f803 0901 	strb.w	r0, [r3], #-1
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	2e00      	cmp	r6, #0
 8008d00:	d0dd      	beq.n	8008cbe <_itostr+0x1a>
 8008d02:	4563      	cmp	r3, ip
 8008d04:	d1f3      	bne.n	8008cee <_itostr+0x4a>
 8008d06:	e7da      	b.n	8008cbe <_itostr+0x1a>
 8008d08:	f803 5901 	strb.w	r5, [r3], #-1
 8008d0c:	e7da      	b.n	8008cc4 <_itostr+0x20>
 8008d0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d12:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008d16:	e7e1      	b.n	8008cdc <_itostr+0x38>

08008d18 <_xputch>:
 8008d18:	4603      	mov	r3, r0
 8008d1a:	b410      	push	{r4}
 8008d1c:	4c08      	ldr	r4, [pc, #32]	; (8008d40 <_xputch+0x28>)
 8008d1e:	68da      	ldr	r2, [r3, #12]
 8008d20:	4608      	mov	r0, r1
 8008d22:	6821      	ldr	r1, [r4, #0]
 8008d24:	3201      	adds	r2, #1
 8008d26:	60da      	str	r2, [r3, #12]
 8008d28:	b139      	cbz	r1, 8008d3a <_xputch+0x22>
 8008d2a:	691b      	ldr	r3, [r3, #16]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	da02      	bge.n	8008d36 <_xputch+0x1e>
 8008d30:	1c4b      	adds	r3, r1, #1
 8008d32:	6023      	str	r3, [r4, #0]
 8008d34:	7008      	strb	r0, [r1, #0]
 8008d36:	bc10      	pop	{r4}
 8008d38:	4770      	bx	lr
 8008d3a:	bc10      	pop	{r4}
 8008d3c:	f007 bf40 	b.w	8010bc0 <console_putc>
 8008d40:	200000e8 	andcs	r0, r0, r8, ror #1

08008d44 <_format_int>:
 8008d44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d48:	4698      	mov	r8, r3
 8008d4a:	b091      	sub	sp, #68	; 0x44
 8008d4c:	ea52 0308 	orrs.w	r3, r2, r8
 8008d50:	4606      	mov	r6, r0
 8008d52:	4617      	mov	r7, r2
 8008d54:	f10d 053f 	add.w	r5, sp, #63	; 0x3f
 8008d58:	d133      	bne.n	8008dc2 <_format_int+0x7e>
 8008d5a:	2330      	movs	r3, #48	; 0x30
 8008d5c:	f10d 043e 	add.w	r4, sp, #62	; 0x3e
 8008d60:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8008d64:	6833      	ldr	r3, [r6, #0]
 8008d66:	07d8      	lsls	r0, r3, #31
 8008d68:	d507      	bpl.n	8008d7a <_format_int+0x36>
 8008d6a:	466a      	mov	r2, sp
 8008d6c:	2030      	movs	r0, #48	; 0x30
 8008d6e:	6871      	ldr	r1, [r6, #4]
 8008d70:	1b2f      	subs	r7, r5, r4
 8008d72:	428f      	cmp	r7, r1
 8008d74:	da01      	bge.n	8008d7a <_format_int+0x36>
 8008d76:	4294      	cmp	r4, r2
 8008d78:	d839      	bhi.n	8008dee <_format_int+0xaa>
 8008d7a:	0699      	lsls	r1, r3, #26
 8008d7c:	d507      	bpl.n	8008d8e <_format_int+0x4a>
 8008d7e:	466a      	mov	r2, sp
 8008d80:	2030      	movs	r0, #48	; 0x30
 8008d82:	68b1      	ldr	r1, [r6, #8]
 8008d84:	1b2f      	subs	r7, r5, r4
 8008d86:	428f      	cmp	r7, r1
 8008d88:	da01      	bge.n	8008d8e <_format_int+0x4a>
 8008d8a:	4294      	cmp	r4, r2
 8008d8c:	d832      	bhi.n	8008df4 <_format_int+0xb0>
 8008d8e:	071a      	lsls	r2, r3, #28
 8008d90:	bf44      	itt	mi
 8008d92:	222d      	movmi	r2, #45	; 0x2d
 8008d94:	f804 2901 	strbmi.w	r2, [r4], #-1
 8008d98:	065b      	lsls	r3, r3, #25
 8008d9a:	d407      	bmi.n	8008dac <_format_int+0x68>
 8008d9c:	466b      	mov	r3, sp
 8008d9e:	2120      	movs	r1, #32
 8008da0:	68b2      	ldr	r2, [r6, #8]
 8008da2:	1b28      	subs	r0, r5, r4
 8008da4:	4290      	cmp	r0, r2
 8008da6:	da01      	bge.n	8008dac <_format_int+0x68>
 8008da8:	429c      	cmp	r4, r3
 8008daa:	d826      	bhi.n	8008dfa <_format_int+0xb6>
 8008dac:	1b2d      	subs	r5, r5, r4
 8008dae:	3401      	adds	r4, #1
 8008db0:	ab10      	add	r3, sp, #64	; 0x40
 8008db2:	429c      	cmp	r4, r3
 8008db4:	d324      	bcc.n	8008e00 <_format_int+0xbc>
 8008db6:	68b3      	ldr	r3, [r6, #8]
 8008db8:	42ab      	cmp	r3, r5
 8008dba:	dc27      	bgt.n	8008e0c <_format_int+0xc8>
 8008dbc:	b011      	add	sp, #68	; 0x44
 8008dbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008dc2:	462c      	mov	r4, r5
 8008dc4:	46e9      	mov	r9, sp
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	4641      	mov	r1, r8
 8008dca:	220a      	movs	r2, #10
 8008dcc:	2300      	movs	r3, #0
 8008dce:	f7ff f883 	bl	8007ed8 <__aeabi_uldivmod>
 8008dd2:	3230      	adds	r2, #48	; 0x30
 8008dd4:	f804 2901 	strb.w	r2, [r4], #-1
 8008dd8:	463a      	mov	r2, r7
 8008dda:	4643      	mov	r3, r8
 8008ddc:	2a0a      	cmp	r2, #10
 8008dde:	f173 0300 	sbcs.w	r3, r3, #0
 8008de2:	4607      	mov	r7, r0
 8008de4:	4688      	mov	r8, r1
 8008de6:	d3bd      	bcc.n	8008d64 <_format_int+0x20>
 8008de8:	454c      	cmp	r4, r9
 8008dea:	d1ec      	bne.n	8008dc6 <_format_int+0x82>
 8008dec:	e7ba      	b.n	8008d64 <_format_int+0x20>
 8008dee:	f804 0901 	strb.w	r0, [r4], #-1
 8008df2:	e7bd      	b.n	8008d70 <_format_int+0x2c>
 8008df4:	f804 0901 	strb.w	r0, [r4], #-1
 8008df8:	e7c4      	b.n	8008d84 <_format_int+0x40>
 8008dfa:	f804 1901 	strb.w	r1, [r4], #-1
 8008dfe:	e7d0      	b.n	8008da2 <_format_int+0x5e>
 8008e00:	4630      	mov	r0, r6
 8008e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e06:	f7ff ff87 	bl	8008d18 <_xputch>
 8008e0a:	e7d1      	b.n	8008db0 <_format_int+0x6c>
 8008e0c:	2120      	movs	r1, #32
 8008e0e:	4630      	mov	r0, r6
 8008e10:	f7ff ff82 	bl	8008d18 <_xputch>
 8008e14:	3501      	adds	r5, #1
 8008e16:	e7ce      	b.n	8008db6 <_format_int+0x72>

08008e18 <_format_hex>:
 8008e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e1a:	b091      	sub	sp, #68	; 0x44
 8008e1c:	4606      	mov	r6, r0
 8008e1e:	6804      	ldr	r4, [r0, #0]
 8008e20:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 8008e24:	bb61      	cbnz	r1, 8008e80 <_format_hex+0x68>
 8008e26:	2330      	movs	r3, #48	; 0x30
 8008e28:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8008e2c:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8008e30:	07e5      	lsls	r5, r4, #31
 8008e32:	d507      	bpl.n	8008e44 <_format_hex+0x2c>
 8008e34:	4669      	mov	r1, sp
 8008e36:	2530      	movs	r5, #48	; 0x30
 8008e38:	6870      	ldr	r0, [r6, #4]
 8008e3a:	1ad7      	subs	r7, r2, r3
 8008e3c:	4287      	cmp	r7, r0
 8008e3e:	da01      	bge.n	8008e44 <_format_hex+0x2c>
 8008e40:	428b      	cmp	r3, r1
 8008e42:	d831      	bhi.n	8008ea8 <_format_hex+0x90>
 8008e44:	06a0      	lsls	r0, r4, #26
 8008e46:	d507      	bpl.n	8008e58 <_format_hex+0x40>
 8008e48:	4669      	mov	r1, sp
 8008e4a:	2530      	movs	r5, #48	; 0x30
 8008e4c:	68b0      	ldr	r0, [r6, #8]
 8008e4e:	1ad7      	subs	r7, r2, r3
 8008e50:	4287      	cmp	r7, r0
 8008e52:	da01      	bge.n	8008e58 <_format_hex+0x40>
 8008e54:	428b      	cmp	r3, r1
 8008e56:	d82a      	bhi.n	8008eae <_format_hex+0x96>
 8008e58:	0661      	lsls	r1, r4, #25
 8008e5a:	d407      	bmi.n	8008e6c <_format_hex+0x54>
 8008e5c:	4669      	mov	r1, sp
 8008e5e:	2420      	movs	r4, #32
 8008e60:	68b0      	ldr	r0, [r6, #8]
 8008e62:	1ad5      	subs	r5, r2, r3
 8008e64:	4285      	cmp	r5, r0
 8008e66:	da01      	bge.n	8008e6c <_format_hex+0x54>
 8008e68:	428b      	cmp	r3, r1
 8008e6a:	d823      	bhi.n	8008eb4 <_format_hex+0x9c>
 8008e6c:	1ad5      	subs	r5, r2, r3
 8008e6e:	1c5c      	adds	r4, r3, #1
 8008e70:	ab10      	add	r3, sp, #64	; 0x40
 8008e72:	429c      	cmp	r4, r3
 8008e74:	d321      	bcc.n	8008eba <_format_hex+0xa2>
 8008e76:	68b3      	ldr	r3, [r6, #8]
 8008e78:	429d      	cmp	r5, r3
 8008e7a:	db24      	blt.n	8008ec6 <_format_hex+0xae>
 8008e7c:	b011      	add	sp, #68	; 0x44
 8008e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e80:	f014 0f02 	tst.w	r4, #2
 8008e84:	bf0c      	ite	eq
 8008e86:	2757      	moveq	r7, #87	; 0x57
 8008e88:	2737      	movne	r7, #55	; 0x37
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	466d      	mov	r5, sp
 8008e8e:	f001 000f 	and.w	r0, r1, #15
 8008e92:	2809      	cmp	r0, #9
 8008e94:	bf94      	ite	ls
 8008e96:	3030      	addls	r0, #48	; 0x30
 8008e98:	19c0      	addhi	r0, r0, r7
 8008e9a:	0909      	lsrs	r1, r1, #4
 8008e9c:	f803 0901 	strb.w	r0, [r3], #-1
 8008ea0:	d0c6      	beq.n	8008e30 <_format_hex+0x18>
 8008ea2:	42ab      	cmp	r3, r5
 8008ea4:	d1f3      	bne.n	8008e8e <_format_hex+0x76>
 8008ea6:	e7c3      	b.n	8008e30 <_format_hex+0x18>
 8008ea8:	f803 5901 	strb.w	r5, [r3], #-1
 8008eac:	e7c5      	b.n	8008e3a <_format_hex+0x22>
 8008eae:	f803 5901 	strb.w	r5, [r3], #-1
 8008eb2:	e7cc      	b.n	8008e4e <_format_hex+0x36>
 8008eb4:	f803 4901 	strb.w	r4, [r3], #-1
 8008eb8:	e7d3      	b.n	8008e62 <_format_hex+0x4a>
 8008eba:	4630      	mov	r0, r6
 8008ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ec0:	f7ff ff2a 	bl	8008d18 <_xputch>
 8008ec4:	e7d4      	b.n	8008e70 <_format_hex+0x58>
 8008ec6:	2120      	movs	r1, #32
 8008ec8:	4630      	mov	r0, r6
 8008eca:	f7ff ff25 	bl	8008d18 <_xputch>
 8008ece:	3501      	adds	r5, #1
 8008ed0:	e7d1      	b.n	8008e76 <_format_hex+0x5e>
	...

08008ed4 <_vprintf>:
 8008ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed8:	4614      	mov	r4, r2
 8008eda:	2200      	movs	r2, #0
 8008edc:	460b      	mov	r3, r1
 8008ede:	f04f 0800 	mov.w	r8, #0
 8008ee2:	b099      	sub	sp, #100	; 0x64
 8008ee4:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8008ee8:	af08      	add	r7, sp, #32
 8008eea:	7819      	ldrb	r1, [r3, #0]
 8008eec:	b919      	cbnz	r1, 8008ef6 <_vprintf+0x22>
 8008eee:	9806      	ldr	r0, [sp, #24]
 8008ef0:	b019      	add	sp, #100	; 0x64
 8008ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef6:	2925      	cmp	r1, #37	; 0x25
 8008ef8:	f103 0601 	add.w	r6, r3, #1
 8008efc:	d004      	beq.n	8008f08 <_vprintf+0x34>
 8008efe:	a803      	add	r0, sp, #12
 8008f00:	f7ff ff0a 	bl	8008d18 <_xputch>
 8008f04:	4633      	mov	r3, r6
 8008f06:	e7f0      	b.n	8008eea <_vprintf+0x16>
 8008f08:	2200      	movs	r2, #0
 8008f0a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8008f0e:	9205      	str	r2, [sp, #20]
 8008f10:	785a      	ldrb	r2, [r3, #1]
 8008f12:	2a30      	cmp	r2, #48	; 0x30
 8008f14:	d129      	bne.n	8008f6a <_vprintf+0x96>
 8008f16:	2220      	movs	r2, #32
 8008f18:	9203      	str	r2, [sp, #12]
 8008f1a:	1c9e      	adds	r6, r3, #2
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	4635      	mov	r5, r6
 8008f20:	4613      	mov	r3, r2
 8008f22:	f04f 0c0a 	mov.w	ip, #10
 8008f26:	7829      	ldrb	r1, [r5, #0]
 8008f28:	462e      	mov	r6, r5
 8008f2a:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8008f2e:	2809      	cmp	r0, #9
 8008f30:	f105 0501 	add.w	r5, r5, #1
 8008f34:	d91d      	bls.n	8008f72 <_vprintf+0x9e>
 8008f36:	b12a      	cbz	r2, 8008f44 <_vprintf+0x70>
 8008f38:	9305      	str	r3, [sp, #20]
 8008f3a:	b11b      	cbz	r3, 8008f44 <_vprintf+0x70>
 8008f3c:	9b03      	ldr	r3, [sp, #12]
 8008f3e:	f043 0310 	orr.w	r3, r3, #16
 8008f42:	9303      	str	r3, [sp, #12]
 8008f44:	292e      	cmp	r1, #46	; 0x2e
 8008f46:	d123      	bne.n	8008f90 <_vprintf+0xbc>
 8008f48:	7873      	ldrb	r3, [r6, #1]
 8008f4a:	2b2a      	cmp	r3, #42	; 0x2a
 8008f4c:	d015      	beq.n	8008f7a <_vprintf+0xa6>
 8008f4e:	2100      	movs	r1, #0
 8008f50:	250a      	movs	r5, #10
 8008f52:	460a      	mov	r2, r1
 8008f54:	1c70      	adds	r0, r6, #1
 8008f56:	7803      	ldrb	r3, [r0, #0]
 8008f58:	4606      	mov	r6, r0
 8008f5a:	3b30      	subs	r3, #48	; 0x30
 8008f5c:	2b09      	cmp	r3, #9
 8008f5e:	f100 0001 	add.w	r0, r0, #1
 8008f62:	d959      	bls.n	8009018 <_vprintf+0x144>
 8008f64:	b181      	cbz	r1, 8008f88 <_vprintf+0xb4>
 8008f66:	9204      	str	r2, [sp, #16]
 8008f68:	e00e      	b.n	8008f88 <_vprintf+0xb4>
 8008f6a:	2a2d      	cmp	r2, #45	; 0x2d
 8008f6c:	d1d6      	bne.n	8008f1c <_vprintf+0x48>
 8008f6e:	2240      	movs	r2, #64	; 0x40
 8008f70:	e7d2      	b.n	8008f18 <_vprintf+0x44>
 8008f72:	2201      	movs	r2, #1
 8008f74:	fb0c 0303 	mla	r3, ip, r3, r0
 8008f78:	e7d5      	b.n	8008f26 <_vprintf+0x52>
 8008f7a:	f854 3b04 	ldr.w	r3, [r4], #4
 8008f7e:	3602      	adds	r6, #2
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	bfb8      	it	lt
 8008f84:	425b      	neglt	r3, r3
 8008f86:	9304      	str	r3, [sp, #16]
 8008f88:	9b03      	ldr	r3, [sp, #12]
 8008f8a:	f043 0301 	orr.w	r3, r3, #1
 8008f8e:	9303      	str	r3, [sp, #12]
 8008f90:	7833      	ldrb	r3, [r6, #0]
 8008f92:	2b6c      	cmp	r3, #108	; 0x6c
 8008f94:	bf04      	itt	eq
 8008f96:	9b03      	ldreq	r3, [sp, #12]
 8008f98:	3601      	addeq	r6, #1
 8008f9a:	7831      	ldrb	r1, [r6, #0]
 8008f9c:	bf04      	itt	eq
 8008f9e:	f043 0304 	orreq.w	r3, r3, #4
 8008fa2:	9303      	streq	r3, [sp, #12]
 8008fa4:	2958      	cmp	r1, #88	; 0x58
 8008fa6:	f000 8171 	beq.w	800928c <_vprintf+0x3b8>
 8008faa:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 8008fae:	b2da      	uxtb	r2, r3
 8008fb0:	2a15      	cmp	r2, #21
 8008fb2:	d8a4      	bhi.n	8008efe <_vprintf+0x2a>
 8008fb4:	2b15      	cmp	r3, #21
 8008fb6:	d8a2      	bhi.n	8008efe <_vprintf+0x2a>
 8008fb8:	a201      	add	r2, pc, #4	; (adr r2, 8008fc0 <_vprintf+0xec>)
 8008fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fbe:	bf00      	nop
 8008fc0:	08009021 	stmdaeq	r0, {r0, r5, ip, pc}
 8008fc4:	08009033 	stmdaeq	r0, {r0, r1, r4, r5, ip, pc}
 8008fc8:	08008eff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, pc}
 8008fcc:	08009069 	stmdaeq	r0, {r0, r3, r5, r6, ip, pc}
 8008fd0:	08008eff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, pc}
 8008fd4:	08008eff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, pc}
 8008fd8:	08009033 	stmdaeq	r0, {r0, r1, r4, r5, ip, pc}
 8008fdc:	08008eff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, pc}
 8008fe0:	08008eff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, pc}
 8008fe4:	08008eff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, pc}
 8008fe8:	08008eff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, pc}
 8008fec:	08008eff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, pc}
 8008ff0:	08008eff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, pc}
 8008ff4:	080091cf 	stmdaeq	r0, {r0, r1, r2, r3, r6, r7, r8, ip, pc}
 8008ff8:	08008eff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, pc}
 8008ffc:	08008eff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, pc}
 8009000:	080091f7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, r8, ip, pc}
 8009004:	08008eff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, pc}
 8009008:	0800926d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, ip, pc}
 800900c:	08008eff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, pc}
 8009010:	08008eff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, pc}
 8009014:	08009295 	stmdaeq	r0, {r0, r2, r4, r7, r9, ip, pc}
 8009018:	2101      	movs	r1, #1
 800901a:	fb05 3202 	mla	r2, r5, r2, r3
 800901e:	e79a      	b.n	8008f56 <_vprintf+0x82>
 8009020:	4625      	mov	r5, r4
 8009022:	a803      	add	r0, sp, #12
 8009024:	f855 1b04 	ldr.w	r1, [r5], #4
 8009028:	f7ff fe76 	bl	8008d18 <_xputch>
 800902c:	462c      	mov	r4, r5
 800902e:	3601      	adds	r6, #1
 8009030:	e768      	b.n	8008f04 <_vprintf+0x30>
 8009032:	9903      	ldr	r1, [sp, #12]
 8009034:	074d      	lsls	r5, r1, #29
 8009036:	bf51      	iteee	pl
 8009038:	4625      	movpl	r5, r4
 800903a:	3407      	addmi	r4, #7
 800903c:	f024 0407 	bicmi.w	r4, r4, #7
 8009040:	4625      	movmi	r5, r4
 8009042:	bf55      	itete	pl
 8009044:	f855 2b04 	ldrpl.w	r2, [r5], #4
 8009048:	6863      	ldrmi	r3, [r4, #4]
 800904a:	17d3      	asrpl	r3, r2, #31
 800904c:	f855 2b08 	ldrmi.w	r2, [r5], #8
 8009050:	2b00      	cmp	r3, #0
 8009052:	da05      	bge.n	8009060 <_vprintf+0x18c>
 8009054:	f041 0108 	orr.w	r1, r1, #8
 8009058:	4252      	negs	r2, r2
 800905a:	9103      	str	r1, [sp, #12]
 800905c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8009060:	a803      	add	r0, sp, #12
 8009062:	f7ff fe6f 	bl	8008d44 <_format_int>
 8009066:	e7e1      	b.n	800902c <_vprintf+0x158>
 8009068:	3407      	adds	r4, #7
 800906a:	f024 0507 	bic.w	r5, r4, #7
 800906e:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8009072:	f7fe fd37 	bl	8007ae4 <__aeabi_d2f>
 8009076:	9b03      	ldr	r3, [sp, #12]
 8009078:	4641      	mov	r1, r8
 800907a:	07dc      	lsls	r4, r3, #31
 800907c:	bf54      	ite	pl
 800907e:	f04f 0a06 	movpl.w	sl, #6
 8009082:	f8dd a010 	ldrmi.w	sl, [sp, #16]
 8009086:	4681      	mov	r9, r0
 8009088:	f7fe fed8 	bl	8007e3c <__aeabi_fcmplt>
 800908c:	2800      	cmp	r0, #0
 800908e:	d063      	beq.n	8009158 <_vprintf+0x284>
 8009090:	232d      	movs	r3, #45	; 0x2d
 8009092:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000
 8009096:	f88d 3020 	strb.w	r3, [sp, #32]
 800909a:	f10d 0b21 	add.w	fp, sp, #33	; 0x21
 800909e:	4648      	mov	r0, r9
 80090a0:	f7fe fef4 	bl	8007e8c <__aeabi_f2iz>
 80090a4:	4659      	mov	r1, fp
 80090a6:	2200      	movs	r2, #0
 80090a8:	4604      	mov	r4, r0
 80090aa:	f7ff fdfb 	bl	8008ca4 <_itostr>
 80090ae:	eb0b 0200 	add.w	r2, fp, r0
 80090b2:	e9cd 2000 	strd	r2, r0, [sp]
 80090b6:	4620      	mov	r0, r4
 80090b8:	f7fe fe1e 	bl	8007cf8 <__aeabi_i2f>
 80090bc:	4601      	mov	r1, r0
 80090be:	4648      	mov	r0, r9
 80090c0:	f7fe fd64 	bl	8007b8c <__aeabi_fsub>
 80090c4:	222e      	movs	r2, #46	; 0x2e
 80090c6:	4601      	mov	r1, r0
 80090c8:	200a      	movs	r0, #10
 80090ca:	9b00      	ldr	r3, [sp, #0]
 80090cc:	f10a 0901 	add.w	r9, sl, #1
 80090d0:	1c5c      	adds	r4, r3, #1
 80090d2:	9b01      	ldr	r3, [sp, #4]
 80090d4:	f80b 2003 	strb.w	r2, [fp, r3]
 80090d8:	4603      	mov	r3, r0
 80090da:	f1ba 0f00 	cmp.w	sl, #0
 80090de:	dc3d      	bgt.n	800915c <_vprintf+0x288>
 80090e0:	9100      	str	r1, [sp, #0]
 80090e2:	f7fe fe09 	bl	8007cf8 <__aeabi_i2f>
 80090e6:	9900      	ldr	r1, [sp, #0]
 80090e8:	f7ff f8cc 	bl	8008284 <__aeabi_fmul>
 80090ec:	f7fe fece 	bl	8007e8c <__aeabi_f2iz>
 80090f0:	464a      	mov	r2, r9
 80090f2:	4621      	mov	r1, r4
 80090f4:	f7ff fdd6 	bl	8008ca4 <_itostr>
 80090f8:	4404      	add	r4, r0
 80090fa:	1be0      	subs	r0, r4, r7
 80090fc:	1e44      	subs	r4, r0, #1
 80090fe:	5d3b      	ldrb	r3, [r7, r4]
 8009100:	193a      	adds	r2, r7, r4
 8009102:	2b34      	cmp	r3, #52	; 0x34
 8009104:	d910      	bls.n	8009128 <_vprintf+0x254>
 8009106:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800910a:	1e53      	subs	r3, r2, #1
 800910c:	292e      	cmp	r1, #46	; 0x2e
 800910e:	d02c      	beq.n	800916a <_vprintf+0x296>
 8009110:	469c      	mov	ip, r3
 8009112:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8009116:	4663      	mov	r3, ip
 8009118:	f81c 1901 	ldrb.w	r1, [ip], #-1
 800911c:	2939      	cmp	r1, #57	; 0x39
 800911e:	d021      	beq.n	8009164 <_vprintf+0x290>
 8009120:	292e      	cmp	r1, #46	; 0x2e
 8009122:	d022      	beq.n	800916a <_vprintf+0x296>
 8009124:	3101      	adds	r1, #1
 8009126:	7019      	strb	r1, [r3, #0]
 8009128:	f104 0360 	add.w	r3, r4, #96	; 0x60
 800912c:	446b      	add	r3, sp
 800912e:	f813 3c41 	ldrb.w	r3, [r3, #-65]
 8009132:	2b2e      	cmp	r3, #46	; 0x2e
 8009134:	bf08      	it	eq
 8009136:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 800913a:	46a1      	mov	r9, r4
 800913c:	9b05      	ldr	r3, [sp, #20]
 800913e:	4599      	cmp	r9, r3
 8009140:	db3e      	blt.n	80091c0 <_vprintf+0x2ec>
 8009142:	46b9      	mov	r9, r7
 8009144:	2c00      	cmp	r4, #0
 8009146:	f77f af71 	ble.w	800902c <_vprintf+0x158>
 800914a:	f819 1b01 	ldrb.w	r1, [r9], #1
 800914e:	a803      	add	r0, sp, #12
 8009150:	f7ff fde2 	bl	8008d18 <_xputch>
 8009154:	3c01      	subs	r4, #1
 8009156:	e7f5      	b.n	8009144 <_vprintf+0x270>
 8009158:	46bb      	mov	fp, r7
 800915a:	e7a0      	b.n	800909e <_vprintf+0x1ca>
 800915c:	4358      	muls	r0, r3
 800915e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009162:	e7ba      	b.n	80090da <_vprintf+0x206>
 8009164:	f88c e001 	strb.w	lr, [ip, #1]
 8009168:	e7d5      	b.n	8009116 <_vprintf+0x242>
 800916a:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800916e:	3b01      	subs	r3, #1
 8009170:	7819      	ldrb	r1, [r3, #0]
 8009172:	2939      	cmp	r1, #57	; 0x39
 8009174:	d112      	bne.n	800919c <_vprintf+0x2c8>
 8009176:	42bb      	cmp	r3, r7
 8009178:	d20d      	bcs.n	8009196 <_vprintf+0x2c2>
 800917a:	1c5c      	adds	r4, r3, #1
 800917c:	1c99      	adds	r1, r3, #2
 800917e:	428c      	cmp	r4, r1
 8009180:	eba2 0203 	sub.w	r2, r2, r3
 8009184:	d913      	bls.n	80091ae <_vprintf+0x2da>
 8009186:	3201      	adds	r2, #1
 8009188:	441a      	add	r2, r3
 800918a:	42a2      	cmp	r2, r4
 800918c:	d10b      	bne.n	80091a6 <_vprintf+0x2d2>
 800918e:	2231      	movs	r2, #49	; 0x31
 8009190:	4604      	mov	r4, r0
 8009192:	705a      	strb	r2, [r3, #1]
 8009194:	e7c8      	b.n	8009128 <_vprintf+0x254>
 8009196:	f803 c901 	strb.w	ip, [r3], #-1
 800919a:	e7e9      	b.n	8009170 <_vprintf+0x29c>
 800919c:	42bb      	cmp	r3, r7
 800919e:	d3ec      	bcc.n	800917a <_vprintf+0x2a6>
 80091a0:	292d      	cmp	r1, #45	; 0x2d
 80091a2:	d0ea      	beq.n	800917a <_vprintf+0x2a6>
 80091a4:	e7be      	b.n	8009124 <_vprintf+0x250>
 80091a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091aa:	7021      	strb	r1, [r4, #0]
 80091ac:	e7ed      	b.n	800918a <_vprintf+0x2b6>
 80091ae:	4414      	add	r4, r2
 80091b0:	440a      	add	r2, r1
 80091b2:	428a      	cmp	r2, r1
 80091b4:	d0eb      	beq.n	800918e <_vprintf+0x2ba>
 80091b6:	f814 cd01 	ldrb.w	ip, [r4, #-1]!
 80091ba:	f802 cd01 	strb.w	ip, [r2, #-1]!
 80091be:	e7f8      	b.n	80091b2 <_vprintf+0x2de>
 80091c0:	2120      	movs	r1, #32
 80091c2:	a803      	add	r0, sp, #12
 80091c4:	f7ff fda8 	bl	8008d18 <_xputch>
 80091c8:	f109 0901 	add.w	r9, r9, #1
 80091cc:	e7b6      	b.n	800913c <_vprintf+0x268>
 80091ce:	2308      	movs	r3, #8
 80091d0:	4625      	mov	r5, r4
 80091d2:	9305      	str	r3, [sp, #20]
 80091d4:	2320      	movs	r3, #32
 80091d6:	2130      	movs	r1, #48	; 0x30
 80091d8:	f855 4b04 	ldr.w	r4, [r5], #4
 80091dc:	a803      	add	r0, sp, #12
 80091de:	9303      	str	r3, [sp, #12]
 80091e0:	f7ff fd9a 	bl	8008d18 <_xputch>
 80091e4:	2178      	movs	r1, #120	; 0x78
 80091e6:	a803      	add	r0, sp, #12
 80091e8:	f7ff fd96 	bl	8008d18 <_xputch>
 80091ec:	4621      	mov	r1, r4
 80091ee:	a803      	add	r0, sp, #12
 80091f0:	f7ff fe12 	bl	8008e18 <_format_hex>
 80091f4:	e71a      	b.n	800902c <_vprintf+0x158>
 80091f6:	4625      	mov	r5, r4
 80091f8:	2400      	movs	r4, #0
 80091fa:	f855 9b04 	ldr.w	r9, [r5], #4
 80091fe:	f819 3004 	ldrb.w	r3, [r9, r4]
 8009202:	b993      	cbnz	r3, 800922a <_vprintf+0x356>
 8009204:	9b03      	ldr	r3, [sp, #12]
 8009206:	07d9      	lsls	r1, r3, #31
 8009208:	d503      	bpl.n	8009212 <_vprintf+0x33e>
 800920a:	9b04      	ldr	r3, [sp, #16]
 800920c:	429c      	cmp	r4, r3
 800920e:	bfa8      	it	ge
 8009210:	461c      	movge	r4, r3
 8009212:	9b03      	ldr	r3, [sp, #12]
 8009214:	f104 0a01 	add.w	sl, r4, #1
 8009218:	065a      	lsls	r2, r3, #25
 800921a:	d403      	bmi.n	8009224 <_vprintf+0x350>
 800921c:	9b05      	ldr	r3, [sp, #20]
 800921e:	429c      	cmp	r4, r3
 8009220:	db05      	blt.n	800922e <_vprintf+0x35a>
 8009222:	4654      	mov	r4, sl
 8009224:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8009228:	e00d      	b.n	8009246 <_vprintf+0x372>
 800922a:	3401      	adds	r4, #1
 800922c:	e7e7      	b.n	80091fe <_vprintf+0x32a>
 800922e:	2120      	movs	r1, #32
 8009230:	a803      	add	r0, sp, #12
 8009232:	f7ff fd71 	bl	8008d18 <_xputch>
 8009236:	4654      	mov	r4, sl
 8009238:	e7eb      	b.n	8009212 <_vprintf+0x33e>
 800923a:	a803      	add	r0, sp, #12
 800923c:	f7ff fd6c 	bl	8008d18 <_xputch>
 8009240:	9b04      	ldr	r3, [sp, #16]
 8009242:	3b01      	subs	r3, #1
 8009244:	9304      	str	r3, [sp, #16]
 8009246:	9b03      	ldr	r3, [sp, #12]
 8009248:	07db      	lsls	r3, r3, #31
 800924a:	d501      	bpl.n	8009250 <_vprintf+0x37c>
 800924c:	9b04      	ldr	r3, [sp, #16]
 800924e:	b11b      	cbz	r3, 8009258 <_vprintf+0x384>
 8009250:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8009254:	2900      	cmp	r1, #0
 8009256:	d1f0      	bne.n	800923a <_vprintf+0x366>
 8009258:	9b05      	ldr	r3, [sp, #20]
 800925a:	429c      	cmp	r4, r3
 800925c:	f6bf aee6 	bge.w	800902c <_vprintf+0x158>
 8009260:	2120      	movs	r1, #32
 8009262:	a803      	add	r0, sp, #12
 8009264:	f7ff fd58 	bl	8008d18 <_xputch>
 8009268:	3401      	adds	r4, #1
 800926a:	e7f5      	b.n	8009258 <_vprintf+0x384>
 800926c:	9b03      	ldr	r3, [sp, #12]
 800926e:	f013 0304 	ands.w	r3, r3, #4
 8009272:	bf1d      	ittte	ne
 8009274:	3407      	addne	r4, #7
 8009276:	f024 0407 	bicne.w	r4, r4, #7
 800927a:	4625      	movne	r5, r4
 800927c:	4625      	moveq	r5, r4
 800927e:	bf1a      	itte	ne
 8009280:	f855 2b08 	ldrne.w	r2, [r5], #8
 8009284:	6863      	ldrne	r3, [r4, #4]
 8009286:	f855 2b04 	ldreq.w	r2, [r5], #4
 800928a:	e6e9      	b.n	8009060 <_vprintf+0x18c>
 800928c:	9b03      	ldr	r3, [sp, #12]
 800928e:	f043 0302 	orr.w	r3, r3, #2
 8009292:	9303      	str	r3, [sp, #12]
 8009294:	4625      	mov	r5, r4
 8009296:	f855 1b04 	ldr.w	r1, [r5], #4
 800929a:	e7a8      	b.n	80091ee <_vprintf+0x31a>

0800929c <printf>:
 800929c:	b40f      	push	{r0, r1, r2, r3}
 800929e:	b507      	push	{r0, r1, r2, lr}
 80092a0:	aa04      	add	r2, sp, #16
 80092a2:	f852 1b04 	ldr.w	r1, [r2], #4
 80092a6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80092aa:	9201      	str	r2, [sp, #4]
 80092ac:	f7ff fe12 	bl	8008ed4 <_vprintf>
 80092b0:	b003      	add	sp, #12
 80092b2:	f85d eb04 	ldr.w	lr, [sp], #4
 80092b6:	b004      	add	sp, #16
 80092b8:	4770      	bx	lr
	...

080092bc <snprintf>:
 80092bc:	b40c      	push	{r2, r3}
 80092be:	460b      	mov	r3, r1
 80092c0:	b513      	push	{r0, r1, r4, lr}
 80092c2:	4c09      	ldr	r4, [pc, #36]	; (80092e8 <snprintf+0x2c>)
 80092c4:	aa04      	add	r2, sp, #16
 80092c6:	f852 1b04 	ldr.w	r1, [r2], #4
 80092ca:	6020      	str	r0, [r4, #0]
 80092cc:	4618      	mov	r0, r3
 80092ce:	9201      	str	r2, [sp, #4]
 80092d0:	f7ff fe00 	bl	8008ed4 <_vprintf>
 80092d4:	2300      	movs	r3, #0
 80092d6:	6822      	ldr	r2, [r4, #0]
 80092d8:	6023      	str	r3, [r4, #0]
 80092da:	7013      	strb	r3, [r2, #0]
 80092dc:	b002      	add	sp, #8
 80092de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092e2:	b002      	add	sp, #8
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop
 80092e8:	200000e8 	andcs	r0, r0, r8, ror #1

080092ec <vsnprintf>:
 80092ec:	b538      	push	{r3, r4, r5, lr}
 80092ee:	4605      	mov	r5, r0
 80092f0:	4c05      	ldr	r4, [pc, #20]	; (8009308 <vsnprintf+0x1c>)
 80092f2:	4608      	mov	r0, r1
 80092f4:	4611      	mov	r1, r2
 80092f6:	461a      	mov	r2, r3
 80092f8:	6025      	str	r5, [r4, #0]
 80092fa:	f7ff fdeb 	bl	8008ed4 <_vprintf>
 80092fe:	2300      	movs	r3, #0
 8009300:	6822      	ldr	r2, [r4, #0]
 8009302:	6023      	str	r3, [r4, #0]
 8009304:	7013      	strb	r3, [r2, #0]
 8009306:	bd38      	pop	{r3, r4, r5, pc}
 8009308:	200000e8 	andcs	r0, r0, r8, ror #1

0800930c <__udivmoddi4>:
 800930c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009310:	9e08      	ldr	r6, [sp, #32]
 8009312:	460d      	mov	r5, r1
 8009314:	4604      	mov	r4, r0
 8009316:	468e      	mov	lr, r1
 8009318:	2b00      	cmp	r3, #0
 800931a:	d14c      	bne.n	80093b6 <__udivmoddi4+0xaa>
 800931c:	428a      	cmp	r2, r1
 800931e:	4694      	mov	ip, r2
 8009320:	d967      	bls.n	80093f2 <__udivmoddi4+0xe6>
 8009322:	fab2 f382 	clz	r3, r2
 8009326:	b153      	cbz	r3, 800933e <__udivmoddi4+0x32>
 8009328:	fa02 fc03 	lsl.w	ip, r2, r3
 800932c:	f1c3 0220 	rsb	r2, r3, #32
 8009330:	fa01 fe03 	lsl.w	lr, r1, r3
 8009334:	fa20 f202 	lsr.w	r2, r0, r2
 8009338:	ea42 0e0e 	orr.w	lr, r2, lr
 800933c:	409c      	lsls	r4, r3
 800933e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8009342:	fbbe f1f7 	udiv	r1, lr, r7
 8009346:	fa1f f58c 	uxth.w	r5, ip
 800934a:	fb07 ee11 	mls	lr, r7, r1, lr
 800934e:	fb01 f005 	mul.w	r0, r1, r5
 8009352:	0c22      	lsrs	r2, r4, #16
 8009354:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8009358:	4290      	cmp	r0, r2
 800935a:	d90a      	bls.n	8009372 <__udivmoddi4+0x66>
 800935c:	eb1c 0202 	adds.w	r2, ip, r2
 8009360:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8009364:	f080 8119 	bcs.w	800959a <__udivmoddi4+0x28e>
 8009368:	4290      	cmp	r0, r2
 800936a:	f240 8116 	bls.w	800959a <__udivmoddi4+0x28e>
 800936e:	3902      	subs	r1, #2
 8009370:	4462      	add	r2, ip
 8009372:	1a12      	subs	r2, r2, r0
 8009374:	fbb2 f0f7 	udiv	r0, r2, r7
 8009378:	fb07 2210 	mls	r2, r7, r0, r2
 800937c:	fb00 f505 	mul.w	r5, r0, r5
 8009380:	b2a4      	uxth	r4, r4
 8009382:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009386:	42a5      	cmp	r5, r4
 8009388:	d90a      	bls.n	80093a0 <__udivmoddi4+0x94>
 800938a:	eb1c 0404 	adds.w	r4, ip, r4
 800938e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8009392:	f080 8104 	bcs.w	800959e <__udivmoddi4+0x292>
 8009396:	42a5      	cmp	r5, r4
 8009398:	f240 8101 	bls.w	800959e <__udivmoddi4+0x292>
 800939c:	4464      	add	r4, ip
 800939e:	3802      	subs	r0, #2
 80093a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80093a4:	2100      	movs	r1, #0
 80093a6:	1b64      	subs	r4, r4, r5
 80093a8:	b11e      	cbz	r6, 80093b2 <__udivmoddi4+0xa6>
 80093aa:	40dc      	lsrs	r4, r3
 80093ac:	2300      	movs	r3, #0
 80093ae:	e9c6 4300 	strd	r4, r3, [r6]
 80093b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093b6:	428b      	cmp	r3, r1
 80093b8:	d908      	bls.n	80093cc <__udivmoddi4+0xc0>
 80093ba:	2e00      	cmp	r6, #0
 80093bc:	f000 80ea 	beq.w	8009594 <__udivmoddi4+0x288>
 80093c0:	2100      	movs	r1, #0
 80093c2:	e9c6 0500 	strd	r0, r5, [r6]
 80093c6:	4608      	mov	r0, r1
 80093c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093cc:	fab3 f183 	clz	r1, r3
 80093d0:	2900      	cmp	r1, #0
 80093d2:	d148      	bne.n	8009466 <__udivmoddi4+0x15a>
 80093d4:	42ab      	cmp	r3, r5
 80093d6:	d302      	bcc.n	80093de <__udivmoddi4+0xd2>
 80093d8:	4282      	cmp	r2, r0
 80093da:	f200 80f8 	bhi.w	80095ce <__udivmoddi4+0x2c2>
 80093de:	1a84      	subs	r4, r0, r2
 80093e0:	eb65 0203 	sbc.w	r2, r5, r3
 80093e4:	2001      	movs	r0, #1
 80093e6:	4696      	mov	lr, r2
 80093e8:	2e00      	cmp	r6, #0
 80093ea:	d0e2      	beq.n	80093b2 <__udivmoddi4+0xa6>
 80093ec:	e9c6 4e00 	strd	r4, lr, [r6]
 80093f0:	e7df      	b.n	80093b2 <__udivmoddi4+0xa6>
 80093f2:	b902      	cbnz	r2, 80093f6 <__udivmoddi4+0xea>
 80093f4:	deff      	udf	#255	; 0xff
 80093f6:	fab2 f382 	clz	r3, r2
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	f040 808e 	bne.w	800951c <__udivmoddi4+0x210>
 8009400:	1a88      	subs	r0, r1, r2
 8009402:	2101      	movs	r1, #1
 8009404:	0c17      	lsrs	r7, r2, #16
 8009406:	fa1f fe82 	uxth.w	lr, r2
 800940a:	fbb0 f5f7 	udiv	r5, r0, r7
 800940e:	fb07 0015 	mls	r0, r7, r5, r0
 8009412:	0c22      	lsrs	r2, r4, #16
 8009414:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8009418:	fb0e f005 	mul.w	r0, lr, r5
 800941c:	4290      	cmp	r0, r2
 800941e:	d908      	bls.n	8009432 <__udivmoddi4+0x126>
 8009420:	eb1c 0202 	adds.w	r2, ip, r2
 8009424:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8009428:	d202      	bcs.n	8009430 <__udivmoddi4+0x124>
 800942a:	4290      	cmp	r0, r2
 800942c:	f200 80cc 	bhi.w	80095c8 <__udivmoddi4+0x2bc>
 8009430:	4645      	mov	r5, r8
 8009432:	1a12      	subs	r2, r2, r0
 8009434:	fbb2 f0f7 	udiv	r0, r2, r7
 8009438:	fb07 2210 	mls	r2, r7, r0, r2
 800943c:	fb0e fe00 	mul.w	lr, lr, r0
 8009440:	b2a4      	uxth	r4, r4
 8009442:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009446:	45a6      	cmp	lr, r4
 8009448:	d908      	bls.n	800945c <__udivmoddi4+0x150>
 800944a:	eb1c 0404 	adds.w	r4, ip, r4
 800944e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8009452:	d202      	bcs.n	800945a <__udivmoddi4+0x14e>
 8009454:	45a6      	cmp	lr, r4
 8009456:	f200 80b4 	bhi.w	80095c2 <__udivmoddi4+0x2b6>
 800945a:	4610      	mov	r0, r2
 800945c:	eba4 040e 	sub.w	r4, r4, lr
 8009460:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8009464:	e7a0      	b.n	80093a8 <__udivmoddi4+0x9c>
 8009466:	f1c1 0720 	rsb	r7, r1, #32
 800946a:	408b      	lsls	r3, r1
 800946c:	fa22 fc07 	lsr.w	ip, r2, r7
 8009470:	ea4c 0c03 	orr.w	ip, ip, r3
 8009474:	fa25 fa07 	lsr.w	sl, r5, r7
 8009478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800947c:	fbba f8f9 	udiv	r8, sl, r9
 8009480:	408d      	lsls	r5, r1
 8009482:	fa20 f307 	lsr.w	r3, r0, r7
 8009486:	fb09 aa18 	mls	sl, r9, r8, sl
 800948a:	fa1f fe8c 	uxth.w	lr, ip
 800948e:	432b      	orrs	r3, r5
 8009490:	fa00 f501 	lsl.w	r5, r0, r1
 8009494:	fb08 f00e 	mul.w	r0, r8, lr
 8009498:	0c1c      	lsrs	r4, r3, #16
 800949a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800949e:	42a0      	cmp	r0, r4
 80094a0:	fa02 f201 	lsl.w	r2, r2, r1
 80094a4:	d90b      	bls.n	80094be <__udivmoddi4+0x1b2>
 80094a6:	eb1c 0404 	adds.w	r4, ip, r4
 80094aa:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80094ae:	f080 8086 	bcs.w	80095be <__udivmoddi4+0x2b2>
 80094b2:	42a0      	cmp	r0, r4
 80094b4:	f240 8083 	bls.w	80095be <__udivmoddi4+0x2b2>
 80094b8:	f1a8 0802 	sub.w	r8, r8, #2
 80094bc:	4464      	add	r4, ip
 80094be:	1a24      	subs	r4, r4, r0
 80094c0:	b298      	uxth	r0, r3
 80094c2:	fbb4 f3f9 	udiv	r3, r4, r9
 80094c6:	fb09 4413 	mls	r4, r9, r3, r4
 80094ca:	fb03 fe0e 	mul.w	lr, r3, lr
 80094ce:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80094d2:	45a6      	cmp	lr, r4
 80094d4:	d908      	bls.n	80094e8 <__udivmoddi4+0x1dc>
 80094d6:	eb1c 0404 	adds.w	r4, ip, r4
 80094da:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80094de:	d26a      	bcs.n	80095b6 <__udivmoddi4+0x2aa>
 80094e0:	45a6      	cmp	lr, r4
 80094e2:	d968      	bls.n	80095b6 <__udivmoddi4+0x2aa>
 80094e4:	3b02      	subs	r3, #2
 80094e6:	4464      	add	r4, ip
 80094e8:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80094ec:	fba0 9302 	umull	r9, r3, r0, r2
 80094f0:	eba4 040e 	sub.w	r4, r4, lr
 80094f4:	429c      	cmp	r4, r3
 80094f6:	46c8      	mov	r8, r9
 80094f8:	469e      	mov	lr, r3
 80094fa:	d354      	bcc.n	80095a6 <__udivmoddi4+0x29a>
 80094fc:	d051      	beq.n	80095a2 <__udivmoddi4+0x296>
 80094fe:	2e00      	cmp	r6, #0
 8009500:	d067      	beq.n	80095d2 <__udivmoddi4+0x2c6>
 8009502:	ebb5 0308 	subs.w	r3, r5, r8
 8009506:	eb64 040e 	sbc.w	r4, r4, lr
 800950a:	40cb      	lsrs	r3, r1
 800950c:	fa04 f707 	lsl.w	r7, r4, r7
 8009510:	431f      	orrs	r7, r3
 8009512:	40cc      	lsrs	r4, r1
 8009514:	e9c6 7400 	strd	r7, r4, [r6]
 8009518:	2100      	movs	r1, #0
 800951a:	e74a      	b.n	80093b2 <__udivmoddi4+0xa6>
 800951c:	fa02 fc03 	lsl.w	ip, r2, r3
 8009520:	f1c3 0020 	rsb	r0, r3, #32
 8009524:	40c1      	lsrs	r1, r0
 8009526:	409d      	lsls	r5, r3
 8009528:	fa24 f000 	lsr.w	r0, r4, r0
 800952c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8009530:	4328      	orrs	r0, r5
 8009532:	fbb1 f5f7 	udiv	r5, r1, r7
 8009536:	fb07 1115 	mls	r1, r7, r5, r1
 800953a:	fa1f fe8c 	uxth.w	lr, ip
 800953e:	0c02      	lsrs	r2, r0, #16
 8009540:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009544:	fb05 f10e 	mul.w	r1, r5, lr
 8009548:	4291      	cmp	r1, r2
 800954a:	fa04 f403 	lsl.w	r4, r4, r3
 800954e:	d908      	bls.n	8009562 <__udivmoddi4+0x256>
 8009550:	eb1c 0202 	adds.w	r2, ip, r2
 8009554:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8009558:	d22f      	bcs.n	80095ba <__udivmoddi4+0x2ae>
 800955a:	4291      	cmp	r1, r2
 800955c:	d92d      	bls.n	80095ba <__udivmoddi4+0x2ae>
 800955e:	3d02      	subs	r5, #2
 8009560:	4462      	add	r2, ip
 8009562:	1a52      	subs	r2, r2, r1
 8009564:	fbb2 f1f7 	udiv	r1, r2, r7
 8009568:	fb07 2211 	mls	r2, r7, r1, r2
 800956c:	b280      	uxth	r0, r0
 800956e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8009572:	fb01 f20e 	mul.w	r2, r1, lr
 8009576:	4282      	cmp	r2, r0
 8009578:	d908      	bls.n	800958c <__udivmoddi4+0x280>
 800957a:	eb1c 0000 	adds.w	r0, ip, r0
 800957e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8009582:	d216      	bcs.n	80095b2 <__udivmoddi4+0x2a6>
 8009584:	4282      	cmp	r2, r0
 8009586:	d914      	bls.n	80095b2 <__udivmoddi4+0x2a6>
 8009588:	3902      	subs	r1, #2
 800958a:	4460      	add	r0, ip
 800958c:	1a80      	subs	r0, r0, r2
 800958e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8009592:	e73a      	b.n	800940a <__udivmoddi4+0xfe>
 8009594:	4631      	mov	r1, r6
 8009596:	4630      	mov	r0, r6
 8009598:	e70b      	b.n	80093b2 <__udivmoddi4+0xa6>
 800959a:	4671      	mov	r1, lr
 800959c:	e6e9      	b.n	8009372 <__udivmoddi4+0x66>
 800959e:	4610      	mov	r0, r2
 80095a0:	e6fe      	b.n	80093a0 <__udivmoddi4+0x94>
 80095a2:	454d      	cmp	r5, r9
 80095a4:	d2ab      	bcs.n	80094fe <__udivmoddi4+0x1f2>
 80095a6:	ebb9 0802 	subs.w	r8, r9, r2
 80095aa:	eb63 0e0c 	sbc.w	lr, r3, ip
 80095ae:	3801      	subs	r0, #1
 80095b0:	e7a5      	b.n	80094fe <__udivmoddi4+0x1f2>
 80095b2:	4641      	mov	r1, r8
 80095b4:	e7ea      	b.n	800958c <__udivmoddi4+0x280>
 80095b6:	4603      	mov	r3, r0
 80095b8:	e796      	b.n	80094e8 <__udivmoddi4+0x1dc>
 80095ba:	4645      	mov	r5, r8
 80095bc:	e7d1      	b.n	8009562 <__udivmoddi4+0x256>
 80095be:	46d0      	mov	r8, sl
 80095c0:	e77d      	b.n	80094be <__udivmoddi4+0x1b2>
 80095c2:	4464      	add	r4, ip
 80095c4:	3802      	subs	r0, #2
 80095c6:	e749      	b.n	800945c <__udivmoddi4+0x150>
 80095c8:	3d02      	subs	r5, #2
 80095ca:	4462      	add	r2, ip
 80095cc:	e731      	b.n	8009432 <__udivmoddi4+0x126>
 80095ce:	4608      	mov	r0, r1
 80095d0:	e70a      	b.n	80093e8 <__udivmoddi4+0xdc>
 80095d2:	4631      	mov	r1, r6
 80095d4:	e6ed      	b.n	80093b2 <__udivmoddi4+0xa6>
 80095d6:	bf00      	nop

080095d8 <strlen>:
 80095d8:	4603      	mov	r3, r0
 80095da:	461a      	mov	r2, r3
 80095dc:	7811      	ldrb	r1, [r2, #0]
 80095de:	3301      	adds	r3, #1
 80095e0:	2900      	cmp	r1, #0
 80095e2:	d1fa      	bne.n	80095da <strlen+0x2>
 80095e4:	1a10      	subs	r0, r2, r0
 80095e6:	4770      	bx	lr

080095e8 <strncpy.isra.0>:
 80095e8:	3901      	subs	r1, #1
 80095ea:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80095ee:	b92b      	cbnz	r3, 80095fc <strncpy.isra.0+0x14>
 80095f0:	4402      	add	r2, r0
 80095f2:	4290      	cmp	r0, r2
 80095f4:	d006      	beq.n	8009604 <strncpy.isra.0+0x1c>
 80095f6:	f800 3b01 	strb.w	r3, [r0], #1
 80095fa:	e7fa      	b.n	80095f2 <strncpy.isra.0+0xa>
 80095fc:	3a01      	subs	r2, #1
 80095fe:	f800 3b01 	strb.w	r3, [r0], #1
 8009602:	d1f2      	bne.n	80095ea <strncpy.isra.0+0x2>
 8009604:	4770      	bx	lr

08009606 <strcpy.isra.0>:
 8009606:	3801      	subs	r0, #1
 8009608:	f811 3b01 	ldrb.w	r3, [r1], #1
 800960c:	f800 3f01 	strb.w	r3, [r0, #1]!
 8009610:	2b00      	cmp	r3, #0
 8009612:	d1f9      	bne.n	8009608 <strcpy.isra.0+0x2>
 8009614:	4770      	bx	lr
	...

08009618 <OscServer::OscServer()>:
 8009618:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800961c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800961e:	4a24      	ldr	r2, [pc, #144]	; (80096b0 <OscServer::OscServer()+0x98>)
 8009620:	4604      	mov	r4, r0
 8009622:	e9c0 2300 	strd	r2, r3, [r0]
 8009626:	2300      	movs	r3, #0
 8009628:	2581      	movs	r5, #129	; 0x81
 800962a:	4a22      	ldr	r2, [pc, #136]	; (80096b4 <OscServer::OscServer()+0x9c>)
 800962c:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
 8009630:	6010      	str	r0, [r2, #0]
 8009632:	4a21      	ldr	r2, [pc, #132]	; (80096b8 <OscServer::OscServer()+0xa0>)
 8009634:	6083      	str	r3, [r0, #8]
 8009636:	7303      	strb	r3, [r0, #12]
 8009638:	3d01      	subs	r5, #1
 800963a:	d12c      	bne.n	8009696 <OscServer::OscServer()+0x7e>
 800963c:	2281      	movs	r2, #129	; 0x81
 800963e:	491f      	ldr	r1, [pc, #124]	; (80096bc <OscServer::OscServer()+0xa4>)
 8009640:	481d      	ldr	r0, [pc, #116]	; (80096b8 <OscServer::OscServer()+0xa0>)
 8009642:	f7ff ffe0 	bl	8009606 <strcpy.isra.0>
 8009646:	4b1e      	ldr	r3, [pc, #120]	; (80096c0 <OscServer::OscServer()+0xa8>)
 8009648:	3a01      	subs	r2, #1
 800964a:	d127      	bne.n	800969c <OscServer::OscServer()+0x84>
 800964c:	491d      	ldr	r1, [pc, #116]	; (80096c4 <OscServer::OscServer()+0xac>)
 800964e:	481c      	ldr	r0, [pc, #112]	; (80096c0 <OscServer::OscServer()+0xa8>)
 8009650:	f7ff ffd9 	bl	8009606 <strcpy.isra.0>
 8009654:	2380      	movs	r3, #128	; 0x80
 8009656:	491c      	ldr	r1, [pc, #112]	; (80096c8 <OscServer::OscServer()+0xb0>)
 8009658:	3b01      	subs	r3, #1
 800965a:	d222      	bcs.n	80096a2 <OscServer::OscServer()+0x8a>
 800965c:	491b      	ldr	r1, [pc, #108]	; (80096cc <OscServer::OscServer()+0xb4>)
 800965e:	481a      	ldr	r0, [pc, #104]	; (80096c8 <OscServer::OscServer()+0xb0>)
 8009660:	f7ff ffd1 	bl	8009606 <strcpy.isra.0>
 8009664:	2380      	movs	r3, #128	; 0x80
 8009666:	2100      	movs	r1, #0
 8009668:	4a19      	ldr	r2, [pc, #100]	; (80096d0 <OscServer::OscServer()+0xb8>)
 800966a:	3b01      	subs	r3, #1
 800966c:	d21c      	bcs.n	80096a8 <OscServer::OscServer()+0x90>
 800966e:	4919      	ldr	r1, [pc, #100]	; (80096d4 <OscServer::OscServer()+0xbc>)
 8009670:	4817      	ldr	r0, [pc, #92]	; (80096d0 <OscServer::OscServer()+0xb8>)
 8009672:	f7ff ffc8 	bl	8009606 <strcpy.isra.0>
 8009676:	4b18      	ldr	r3, [pc, #96]	; (80096d8 <OscServer::OscServer()+0xc0>)
 8009678:	211f      	movs	r1, #31
 800967a:	9300      	str	r3, [sp, #0]
 800967c:	4a17      	ldr	r2, [pc, #92]	; (80096dc <OscServer::OscServer()+0xc4>)
 800967e:	4b18      	ldr	r3, [pc, #96]	; (80096e0 <OscServer::OscServer()+0xc8>)
 8009680:	f104 000d 	add.w	r0, r4, #13
 8009684:	f7ff fe1a 	bl	80092bc <snprintf>
 8009688:	4620      	mov	r0, r4
 800968a:	4b16      	ldr	r3, [pc, #88]	; (80096e4 <OscServer::OscServer()+0xcc>)
 800968c:	63a3      	str	r3, [r4, #56]	; 0x38
 800968e:	4b16      	ldr	r3, [pc, #88]	; (80096e8 <OscServer::OscServer()+0xd0>)
 8009690:	63e3      	str	r3, [r4, #60]	; 0x3c
 8009692:	b003      	add	sp, #12
 8009694:	bd30      	pop	{r4, r5, pc}
 8009696:	f802 3b01 	strb.w	r3, [r2], #1
 800969a:	e7cd      	b.n	8009638 <OscServer::OscServer()+0x20>
 800969c:	f803 5b01 	strb.w	r5, [r3], #1
 80096a0:	e7d2      	b.n	8009648 <OscServer::OscServer()+0x30>
 80096a2:	f801 2b01 	strb.w	r2, [r1], #1
 80096a6:	e7d7      	b.n	8009658 <OscServer::OscServer()+0x40>
 80096a8:	f802 1b01 	strb.w	r1, [r2], #1
 80096ac:	e7dd      	b.n	800966a <OscServer::OscServer()+0x52>
 80096ae:	bf00      	nop
 80096b0:	23281f40 			; <UNDEFINED> instruction: 0x23281f40
 80096b4:	200004f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 80096b8:	20000270 	andcs	r0, r0, r0, ror r2
 80096bc:	08013325 	stmdaeq	r1, {r0, r2, r5, r8, r9, ip, sp}
 80096c0:	20000170 	andcs	r0, r0, r0, ror r1
 80096c4:	0801332b 	stmdaeq	r1, {r0, r1, r3, r5, r8, r9, ip, sp}
 80096c8:	200000ec 	andcs	r0, r0, ip, ror #1
 80096cc:	08013333 	stmdaeq	r1, {r0, r1, r4, r5, r8, r9, ip, sp}
 80096d0:	200001f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 80096d4:	08013336 	stmdaeq	r1, {r1, r2, r4, r5, r8, r9, ip, sp}
 80096d8:	08013229 	stmdaeq	r1, {r0, r3, r5, r9, ip, sp}
 80096dc:	08013349 	stmdaeq	r1, {r0, r3, r6, r8, r9, ip, sp}
 80096e0:	08013345 	stmdaeq	r1, {r0, r2, r6, r8, r9, ip, sp}
 80096e4:	080132a8 	stmdaeq	r1, {r3, r5, r7, r9, ip, sp}
 80096e8:	08013352 	stmdaeq	r1, {r1, r4, r6, r8, r9, ip, sp}

080096ec <OscServer::Start()>:
 80096ec:	b530      	push	{r4, r5, lr}
 80096ee:	4d0e      	ldr	r5, [pc, #56]	; (8009728 <OscServer::Start()+0x3c>)
 80096f0:	b085      	sub	sp, #20
 80096f2:	4604      	mov	r4, r0
 80096f4:	8801      	ldrh	r1, [r0, #0]
 80096f6:	6828      	ldr	r0, [r5, #0]
 80096f8:	f005 fd54 	bl	800f1a4 <Network::Begin(unsigned short)>
 80096fc:	682b      	ldr	r3, [r5, #0]
 80096fe:	6060      	str	r0, [r4, #4]
 8009700:	691a      	ldr	r2, [r3, #16]
 8009702:	4601      	mov	r1, r0
 8009704:	6998      	ldr	r0, [r3, #24]
 8009706:	2300      	movs	r3, #0
 8009708:	9301      	str	r3, [sp, #4]
 800970a:	4b08      	ldr	r3, [pc, #32]	; (800972c <OscServer::Start()+0x40>)
 800970c:	ea62 0200 	orn	r2, r2, r0
 8009710:	9300      	str	r3, [sp, #0]
 8009712:	a803      	add	r0, sp, #12
 8009714:	8823      	ldrh	r3, [r4, #0]
 8009716:	f000 fd95 	bl	800a244 <OscSimpleSend::OscSimpleSend(int, unsigned int, unsigned short, char const*, char const*)>
 800971a:	4b05      	ldr	r3, [pc, #20]	; (8009730 <OscServer::Start()+0x44>)
 800971c:	2102      	movs	r1, #2
 800971e:	6818      	ldr	r0, [r3, #0]
 8009720:	f007 fb06 	bl	8010d30 <LedBlink::SetMode(ledblink::Mode)>
 8009724:	b005      	add	sp, #20
 8009726:	bd30      	pop	{r4, r5, pc}
 8009728:	20009074 	andcs	r9, r0, r4, ror r0
 800972c:	08013358 	stmdaeq	r1, {r3, r4, r6, r8, r9, ip, sp}
 8009730:	20009790 	mulcs	r0, r0, r7

08009734 <OscServer::SetPath(char const*)>:
 8009734:	b510      	push	{r4, lr}
 8009736:	780b      	ldrb	r3, [r1, #0]
 8009738:	2b2f      	cmp	r3, #47	; 0x2f
 800973a:	d11c      	bne.n	8009776 <OscServer::SetPath(char const*)+0x42>
 800973c:	4c0e      	ldr	r4, [pc, #56]	; (8009778 <OscServer::SetPath(char const*)+0x44>)
 800973e:	227d      	movs	r2, #125	; 0x7d
 8009740:	4620      	mov	r0, r4
 8009742:	f7ff ff51 	bl	80095e8 <strncpy.isra.0>
 8009746:	4620      	mov	r0, r4
 8009748:	f7ff ff46 	bl	80095d8 <strlen>
 800974c:	3801      	subs	r0, #1
 800974e:	5c23      	ldrb	r3, [r4, r0]
 8009750:	4909      	ldr	r1, [pc, #36]	; (8009778 <OscServer::SetPath(char const*)+0x44>)
 8009752:	2b2f      	cmp	r3, #47	; 0x2f
 8009754:	bf04      	itt	eq
 8009756:	2300      	moveq	r3, #0
 8009758:	5423      	strbeq	r3, [r4, r0]
 800975a:	4c08      	ldr	r4, [pc, #32]	; (800977c <OscServer::SetPath(char const*)+0x48>)
 800975c:	4620      	mov	r0, r4
 800975e:	f7ff ff52 	bl	8009606 <strcpy.isra.0>
 8009762:	4620      	mov	r0, r4
 8009764:	f7ff ff38 	bl	80095d8 <strlen>
 8009768:	232f      	movs	r3, #47	; 0x2f
 800976a:	5423      	strb	r3, [r4, r0]
 800976c:	232a      	movs	r3, #42	; 0x2a
 800976e:	4404      	add	r4, r0
 8009770:	7063      	strb	r3, [r4, #1]
 8009772:	2300      	movs	r3, #0
 8009774:	70a3      	strb	r3, [r4, #2]
 8009776:	bd10      	pop	{r4, pc}
 8009778:	20000270 	andcs	r0, r0, r0, ror r2
 800977c:	20000170 	andcs	r0, r0, r0, ror r1

08009780 <OscServer::SetPathInfo(char const*)>:
 8009780:	780b      	ldrb	r3, [r1, #0]
 8009782:	b510      	push	{r4, lr}
 8009784:	2b2f      	cmp	r3, #47	; 0x2f
 8009786:	d10d      	bne.n	80097a4 <OscServer::SetPathInfo(char const*)+0x24>
 8009788:	4c07      	ldr	r4, [pc, #28]	; (80097a8 <OscServer::SetPathInfo(char const*)+0x28>)
 800978a:	227f      	movs	r2, #127	; 0x7f
 800978c:	4620      	mov	r0, r4
 800978e:	f7ff ff2b 	bl	80095e8 <strncpy.isra.0>
 8009792:	4620      	mov	r0, r4
 8009794:	f7ff ff20 	bl	80095d8 <strlen>
 8009798:	3801      	subs	r0, #1
 800979a:	5c23      	ldrb	r3, [r4, r0]
 800979c:	2b2f      	cmp	r3, #47	; 0x2f
 800979e:	bf04      	itt	eq
 80097a0:	2300      	moveq	r3, #0
 80097a2:	5423      	strbeq	r3, [r4, r0]
 80097a4:	bd10      	pop	{r4, pc}
 80097a6:	bf00      	nop
 80097a8:	200000ec 	andcs	r0, r0, ip, ror #1

080097ac <OscServer::SetPathBlackOut(char const*)>:
 80097ac:	780b      	ldrb	r3, [r1, #0]
 80097ae:	b510      	push	{r4, lr}
 80097b0:	2b2f      	cmp	r3, #47	; 0x2f
 80097b2:	d10d      	bne.n	80097d0 <OscServer::SetPathBlackOut(char const*)+0x24>
 80097b4:	4c07      	ldr	r4, [pc, #28]	; (80097d4 <OscServer::SetPathBlackOut(char const*)+0x28>)
 80097b6:	227f      	movs	r2, #127	; 0x7f
 80097b8:	4620      	mov	r0, r4
 80097ba:	f7ff ff15 	bl	80095e8 <strncpy.isra.0>
 80097be:	4620      	mov	r0, r4
 80097c0:	f7ff ff0a 	bl	80095d8 <strlen>
 80097c4:	3801      	subs	r0, #1
 80097c6:	5c23      	ldrb	r3, [r4, r0]
 80097c8:	2b2f      	cmp	r3, #47	; 0x2f
 80097ca:	bf04      	itt	eq
 80097cc:	2300      	moveq	r3, #0
 80097ce:	5423      	strbeq	r3, [r4, r0]
 80097d0:	bd10      	pop	{r4, pc}
 80097d2:	bf00      	nop
 80097d4:	200001f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

080097d8 <OscServer::GetChannel(char const*)>:
 80097d8:	b538      	push	{r3, r4, r5, lr}
 80097da:	480f      	ldr	r0, [pc, #60]	; (8009818 <OscServer::GetChannel(char const*)+0x40>)
 80097dc:	460c      	mov	r4, r1
 80097de:	f7ff fefb 	bl	80095d8 <strlen>
 80097e2:	1822      	adds	r2, r4, r0
 80097e4:	4614      	mov	r4, r2
 80097e6:	2000      	movs	r0, #0
 80097e8:	210a      	movs	r1, #10
 80097ea:	3403      	adds	r4, #3
 80097ec:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80097f0:	b14b      	cbz	r3, 8009806 <OscServer::GetChannel(char const*)+0x2e>
 80097f2:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 80097f6:	2d09      	cmp	r5, #9
 80097f8:	d80b      	bhi.n	8009812 <OscServer::GetChannel(char const*)+0x3a>
 80097fa:	fb01 3000 	mla	r0, r1, r0, r3
 80097fe:	4294      	cmp	r4, r2
 8009800:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
 8009804:	d1f2      	bne.n	80097ec <OscServer::GetChannel(char const*)+0x14>
 8009806:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800980a:	bfc8      	it	gt
 800980c:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8009810:	bd38      	pop	{r3, r4, r5, pc}
 8009812:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009816:	e7fb      	b.n	8009810 <OscServer::GetChannel(char const*)+0x38>
 8009818:	20000270 	andcs	r0, r0, r0, ror r2

0800981c <OscServer::IsDmxDataChanged(unsigned char const*, unsigned short, unsigned int)>:
 800981c:	2000      	movs	r0, #0
 800981e:	b570      	push	{r4, r5, r6, lr}
 8009820:	3a01      	subs	r2, #1
 8009822:	4c09      	ldr	r4, [pc, #36]	; (8009848 <OscServer::IsDmxDataChanged(unsigned char const*, unsigned short, unsigned int)+0x2c>)
 8009824:	b292      	uxth	r2, r2
 8009826:	4414      	add	r4, r2
 8009828:	4413      	add	r3, r2
 800982a:	3901      	subs	r1, #1
 800982c:	429a      	cmp	r2, r3
 800982e:	d300      	bcc.n	8009832 <OscServer::IsDmxDataChanged(unsigned char const*, unsigned short, unsigned int)+0x16>
 8009830:	bd70      	pop	{r4, r5, r6, pc}
 8009832:	7826      	ldrb	r6, [r4, #0]
 8009834:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8009838:	3201      	adds	r2, #1
 800983a:	42ae      	cmp	r6, r5
 800983c:	bf1c      	itt	ne
 800983e:	7025      	strbne	r5, [r4, #0]
 8009840:	2001      	movne	r0, #1
 8009842:	3401      	adds	r4, #1
 8009844:	b292      	uxth	r2, r2
 8009846:	e7f1      	b.n	800982c <OscServer::IsDmxDataChanged(unsigned char const*, unsigned short, unsigned int)+0x10>
 8009848:	200002f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

0800984c <OscServer::Run()>:
 800984c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800984e:	4d98      	ldr	r5, [pc, #608]	; (8009ab0 <OscServer::Run()+0x264>)
 8009850:	b097      	sub	sp, #92	; 0x5c
 8009852:	4604      	mov	r4, r0
 8009854:	4629      	mov	r1, r5
 8009856:	7900      	ldrb	r0, [r0, #4]
 8009858:	f10d 031a 	add.w	r3, sp, #26
 800985c:	aa07      	add	r2, sp, #28
 800985e:	f004 ffb5 	bl	800e7cc <udp_recv2>
 8009862:	4606      	mov	r6, r0
 8009864:	b1a8      	cbz	r0, 8009892 <OscServer::Run()+0x46>
 8009866:	4602      	mov	r2, r0
 8009868:	6829      	ldr	r1, [r5, #0]
 800986a:	a808      	add	r0, sp, #32
 800986c:	f000 fc4d 	bl	800a10a <OscSimpleMessage::OscSimpleMessage(void*, unsigned int)>
 8009870:	4990      	ldr	r1, [pc, #576]	; (8009ab4 <OscServer::Run()+0x268>)
 8009872:	6828      	ldr	r0, [r5, #0]
 8009874:	f000 fb72 	bl	8009f5c <lo_pattern_match>
 8009878:	4607      	mov	r7, r0
 800987a:	2800      	cmp	r0, #0
 800987c:	d075      	beq.n	800996a <OscServer::Run()+0x11e>
 800987e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8009882:	b133      	cbz	r3, 8009892 <OscServer::Run()+0x46>
 8009884:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009886:	2e01      	cmp	r6, #1
 8009888:	d105      	bne.n	8009896 <OscServer::Run()+0x4a>
 800988a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	2b62      	cmp	r3, #98	; 0x62
 8009890:	d03e      	beq.n	8009910 <OscServer::Run()+0xc4>
 8009892:	b017      	add	sp, #92	; 0x5c
 8009894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009896:	2e02      	cmp	r6, #2
 8009898:	d1fb      	bne.n	8009892 <OscServer::Run()+0x46>
 800989a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	2b69      	cmp	r3, #105	; 0x69
 80098a0:	d1f7      	bne.n	8009892 <OscServer::Run()+0x46>
 80098a2:	2100      	movs	r1, #0
 80098a4:	a808      	add	r0, sp, #32
 80098a6:	f000 fc80 	bl	800a1aa <OscSimpleMessage::GetInt(unsigned int)>
 80098aa:	b285      	uxth	r5, r0
 80098ac:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80098b0:	d2ef      	bcs.n	8009892 <OscServer::Run()+0x46>
 80098b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d9ec      	bls.n	8009892 <OscServer::Run()+0x46>
 80098b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098ba:	785b      	ldrb	r3, [r3, #1]
 80098bc:	2b69      	cmp	r3, #105	; 0x69
 80098be:	d148      	bne.n	8009952 <OscServer::Run()+0x106>
 80098c0:	2101      	movs	r1, #1
 80098c2:	a808      	add	r0, sp, #32
 80098c4:	f000 fc71 	bl	800a1aa <OscSimpleMessage::GetInt(unsigned int)>
 80098c8:	3501      	adds	r5, #1
 80098ca:	b2c0      	uxtb	r0, r0
 80098cc:	b2ad      	uxth	r5, r5
 80098ce:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
 80098d2:	2301      	movs	r3, #1
 80098d4:	462a      	mov	r2, r5
 80098d6:	4620      	mov	r0, r4
 80098d8:	a90f      	add	r1, sp, #60	; 0x3c
 80098da:	f7ff ff9f 	bl	800981c <OscServer::IsDmxDataChanged(unsigned char const*, unsigned short, unsigned int)>
 80098de:	b910      	cbnz	r0, 80098e6 <OscServer::Run()+0x9a>
 80098e0:	7ae3      	ldrb	r3, [r4, #11]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d0d5      	beq.n	8009892 <OscServer::Run()+0x46>
 80098e6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80098e8:	7aa1      	ldrb	r1, [r4, #10]
 80098ea:	6803      	ldr	r3, [r0, #0]
 80098ec:	691e      	ldr	r6, [r3, #16]
 80098ee:	2900      	cmp	r1, #0
 80098f0:	f040 80a3 	bne.w	8009a3a <OscServer::Run()+0x1ee>
 80098f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098f8:	4a6f      	ldr	r2, [pc, #444]	; (8009ab8 <OscServer::Run()+0x26c>)
 80098fa:	47b0      	blx	r6
 80098fc:	7b21      	ldrb	r1, [r4, #12]
 80098fe:	2900      	cmp	r1, #0
 8009900:	d1c7      	bne.n	8009892 <OscServer::Run()+0x46>
 8009902:	2301      	movs	r3, #1
 8009904:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009906:	7323      	strb	r3, [r4, #12]
 8009908:	6803      	ldr	r3, [r0, #0]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	4798      	blx	r3
 800990e:	e7c0      	b.n	8009892 <OscServer::Run()+0x46>
 8009910:	2200      	movs	r2, #0
 8009912:	a908      	add	r1, sp, #32
 8009914:	a80f      	add	r0, sp, #60	; 0x3c
 8009916:	f000 fc5c 	bl	800a1d2 <OscSimpleMessage::GetBlob(unsigned int)>
 800991a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800991c:	b29d      	uxth	r5, r3
 800991e:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8009922:	d8b6      	bhi.n	8009892 <OscServer::Run()+0x46>
 8009924:	462b      	mov	r3, r5
 8009926:	4632      	mov	r2, r6
 8009928:	4620      	mov	r0, r4
 800992a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800992c:	f7ff ff76 	bl	800981c <OscServer::IsDmxDataChanged(unsigned char const*, unsigned short, unsigned int)>
 8009930:	b910      	cbnz	r0, 8009938 <OscServer::Run()+0xec>
 8009932:	7ae3      	ldrb	r3, [r4, #11]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d0ac      	beq.n	8009892 <OscServer::Run()+0x46>
 8009938:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800993a:	6803      	ldr	r3, [r0, #0]
 800993c:	691e      	ldr	r6, [r3, #16]
 800993e:	7aa3      	ldrb	r3, [r4, #10]
 8009940:	b113      	cbz	r3, 8009948 <OscServer::Run()+0xfc>
 8009942:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8009946:	d178      	bne.n	8009a3a <OscServer::Run()+0x1ee>
 8009948:	f44f 7300 	mov.w	r3, #512	; 0x200
 800994c:	2100      	movs	r1, #0
 800994e:	4a5a      	ldr	r2, [pc, #360]	; (8009ab8 <OscServer::Run()+0x26c>)
 8009950:	e7d3      	b.n	80098fa <OscServer::Run()+0xae>
 8009952:	2b66      	cmp	r3, #102	; 0x66
 8009954:	d19d      	bne.n	8009892 <OscServer::Run()+0x46>
 8009956:	2101      	movs	r1, #1
 8009958:	a808      	add	r0, sp, #32
 800995a:	f000 fc12 	bl	800a182 <OscSimpleMessage::GetFloat(unsigned int)>
 800995e:	4957      	ldr	r1, [pc, #348]	; (8009abc <OscServer::Run()+0x270>)
 8009960:	f7fe fc90 	bl	8008284 <__aeabi_fmul>
 8009964:	f7fe fdde 	bl	8008524 <__aeabi_f2uiz>
 8009968:	e7ae      	b.n	80098c8 <OscServer::Run()+0x7c>
 800996a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800996c:	6828      	ldr	r0, [r5, #0]
 800996e:	b9b3      	cbnz	r3, 800999e <OscServer::Run()+0x152>
 8009970:	4953      	ldr	r1, [pc, #332]	; (8009ac0 <OscServer::Run()+0x274>)
 8009972:	6828      	ldr	r0, [r5, #0]
 8009974:	f000 faf2 	bl	8009f5c <lo_pattern_match>
 8009978:	4606      	mov	r6, r0
 800997a:	2800      	cmp	r0, #0
 800997c:	d133      	bne.n	80099e6 <OscServer::Run()+0x19a>
 800997e:	4951      	ldr	r1, [pc, #324]	; (8009ac4 <OscServer::Run()+0x278>)
 8009980:	6828      	ldr	r0, [r5, #0]
 8009982:	f000 faeb 	bl	8009f5c <lo_pattern_match>
 8009986:	2800      	cmp	r0, #0
 8009988:	d05d      	beq.n	8009a46 <OscServer::Run()+0x1fa>
 800998a:	4b4f      	ldr	r3, [pc, #316]	; (8009ac8 <OscServer::Run()+0x27c>)
 800998c:	9a07      	ldr	r2, [sp, #28]
 800998e:	9300      	str	r3, [sp, #0]
 8009990:	6861      	ldr	r1, [r4, #4]
 8009992:	8863      	ldrh	r3, [r4, #2]
 8009994:	9601      	str	r6, [sp, #4]
 8009996:	a80f      	add	r0, sp, #60	; 0x3c
 8009998:	f000 fc54 	bl	800a244 <OscSimpleSend::OscSimpleSend(int, unsigned int, unsigned short, char const*, char const*)>
 800999c:	e779      	b.n	8009892 <OscServer::Run()+0x46>
 800999e:	494b      	ldr	r1, [pc, #300]	; (8009acc <OscServer::Run()+0x280>)
 80099a0:	f000 fadc 	bl	8009f5c <lo_pattern_match>
 80099a4:	2800      	cmp	r0, #0
 80099a6:	d0e3      	beq.n	8009970 <OscServer::Run()+0x124>
 80099a8:	4632      	mov	r2, r6
 80099aa:	6829      	ldr	r1, [r5, #0]
 80099ac:	a80f      	add	r0, sp, #60	; 0x3c
 80099ae:	f000 fbac 	bl	800a10a <OscSimpleMessage::OscSimpleMessage(void*, unsigned int)>
 80099b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	f43f af6c 	beq.w	8009892 <OscServer::Run()+0x46>
 80099ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	2b66      	cmp	r3, #102	; 0x66
 80099c0:	f47f af67 	bne.w	8009892 <OscServer::Run()+0x46>
 80099c4:	4639      	mov	r1, r7
 80099c6:	a80f      	add	r0, sp, #60	; 0x3c
 80099c8:	f000 fbdb 	bl	800a182 <OscSimpleMessage::GetFloat(unsigned int)>
 80099cc:	2100      	movs	r1, #0
 80099ce:	f7fe fa2b 	bl	8007e28 <__aeabi_fcmpeq>
 80099d2:	4603      	mov	r3, r0
 80099d4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80099d6:	b91b      	cbnz	r3, 80099e0 <OscServer::Run()+0x194>
 80099d8:	6803      	ldr	r3, [r0, #0]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	4798      	blx	r3
 80099de:	e758      	b.n	8009892 <OscServer::Run()+0x46>
 80099e0:	6803      	ldr	r3, [r0, #0]
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	e7fa      	b.n	80099dc <OscServer::Run()+0x190>
 80099e6:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	f43f af51 	beq.w	8009892 <OscServer::Run()+0x46>
 80099f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	f47f af4d 	bne.w	8009892 <OscServer::Run()+0x46>
 80099f8:	6829      	ldr	r1, [r5, #0]
 80099fa:	4620      	mov	r0, r4
 80099fc:	f7ff feec 	bl	80097d8 <OscServer::GetChannel(char const*)>
 8009a00:	b285      	uxth	r5, r0
 8009a02:	1e6b      	subs	r3, r5, #1
 8009a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a08:	f4bf af43 	bcs.w	8009892 <OscServer::Run()+0x46>
 8009a0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	2b69      	cmp	r3, #105	; 0x69
 8009a12:	d105      	bne.n	8009a20 <OscServer::Run()+0x1d4>
 8009a14:	2100      	movs	r1, #0
 8009a16:	a808      	add	r0, sp, #32
 8009a18:	f000 fbc7 	bl	800a1aa <OscSimpleMessage::GetInt(unsigned int)>
 8009a1c:	b2c0      	uxtb	r0, r0
 8009a1e:	e756      	b.n	80098ce <OscServer::Run()+0x82>
 8009a20:	2b66      	cmp	r3, #102	; 0x66
 8009a22:	f47f af36 	bne.w	8009892 <OscServer::Run()+0x46>
 8009a26:	2100      	movs	r1, #0
 8009a28:	a808      	add	r0, sp, #32
 8009a2a:	f000 fbaa 	bl	800a182 <OscSimpleMessage::GetFloat(unsigned int)>
 8009a2e:	4923      	ldr	r1, [pc, #140]	; (8009abc <OscServer::Run()+0x270>)
 8009a30:	f7fe fc28 	bl	8008284 <__aeabi_fmul>
 8009a34:	f7fe fd76 	bl	8008524 <__aeabi_f2uiz>
 8009a38:	e7f0      	b.n	8009a1c <OscServer::Run()+0x1d0>
 8009a3a:	8923      	ldrh	r3, [r4, #8]
 8009a3c:	42ab      	cmp	r3, r5
 8009a3e:	bf38      	it	cc
 8009a40:	462b      	movcc	r3, r5
 8009a42:	8123      	strh	r3, [r4, #8]
 8009a44:	e782      	b.n	800994c <OscServer::Run()+0x100>
 8009a46:	4922      	ldr	r1, [pc, #136]	; (8009ad0 <OscServer::Run()+0x284>)
 8009a48:	6828      	ldr	r0, [r5, #0]
 8009a4a:	f000 fa87 	bl	8009f5c <lo_pattern_match>
 8009a4e:	2800      	cmp	r0, #0
 8009a50:	f43f af1f 	beq.w	8009892 <OscServer::Run()+0x46>
 8009a54:	f104 030d 	add.w	r3, r4, #13
 8009a58:	4d1e      	ldr	r5, [pc, #120]	; (8009ad4 <OscServer::Run()+0x288>)
 8009a5a:	9302      	str	r3, [sp, #8]
 8009a5c:	4b1e      	ldr	r3, [pc, #120]	; (8009ad8 <OscServer::Run()+0x28c>)
 8009a5e:	9a07      	ldr	r2, [sp, #28]
 8009a60:	6861      	ldr	r1, [r4, #4]
 8009a62:	9300      	str	r3, [sp, #0]
 8009a64:	9501      	str	r5, [sp, #4]
 8009a66:	8863      	ldrh	r3, [r4, #2]
 8009a68:	a805      	add	r0, sp, #20
 8009a6a:	f000 fc0f 	bl	800a28c <OscSimpleSend::OscSimpleSend(int, unsigned int, unsigned short, char const*, char const*, char const*)>
 8009a6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009a70:	9a07      	ldr	r2, [sp, #28]
 8009a72:	e9cd 5301 	strd	r5, r3, [sp, #4]
 8009a76:	4b19      	ldr	r3, [pc, #100]	; (8009adc <OscServer::Run()+0x290>)
 8009a78:	6861      	ldr	r1, [r4, #4]
 8009a7a:	9300      	str	r3, [sp, #0]
 8009a7c:	a806      	add	r0, sp, #24
 8009a7e:	8863      	ldrh	r3, [r4, #2]
 8009a80:	f000 fc04 	bl	800a28c <OscSimpleSend::OscSimpleSend(int, unsigned int, unsigned short, char const*, char const*, char const*)>
 8009a84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009a86:	9a07      	ldr	r2, [sp, #28]
 8009a88:	e9cd 5301 	strd	r5, r3, [sp, #4]
 8009a8c:	4b14      	ldr	r3, [pc, #80]	; (8009ae0 <OscServer::Run()+0x294>)
 8009a8e:	6861      	ldr	r1, [r4, #4]
 8009a90:	9300      	str	r3, [sp, #0]
 8009a92:	a80f      	add	r0, sp, #60	; 0x3c
 8009a94:	8863      	ldrh	r3, [r4, #2]
 8009a96:	f000 fbf9 	bl	800a28c <OscSimpleSend::OscSimpleSend(int, unsigned int, unsigned short, char const*, char const*, char const*)>
 8009a9a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	f43f aef8 	beq.w	8009892 <OscServer::Run()+0x46>
 8009aa2:	6803      	ldr	r3, [r0, #0]
 8009aa4:	9a07      	ldr	r2, [sp, #28]
 8009aa6:	691d      	ldr	r5, [r3, #16]
 8009aa8:	6861      	ldr	r1, [r4, #4]
 8009aaa:	8863      	ldrh	r3, [r4, #2]
 8009aac:	47a8      	blx	r5
 8009aae:	e6f0      	b.n	8009892 <OscServer::Run()+0x46>
 8009ab0:	2000016c 	andcs	r0, r0, ip, ror #2
 8009ab4:	20000270 	andcs	r0, r0, r0, ror r2
 8009ab8:	200002f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8009abc:	437f0000 	cmnmi	pc, #0
 8009ac0:	20000170 	andcs	r0, r0, r0, ror r1
 8009ac4:	08013358 	stmdaeq	r1, {r3, r4, r6, r8, r9, ip, sp}
 8009ac8:	0801335e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, r9, ip, sp}
 8009acc:	200001f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8009ad0:	200000ec 	andcs	r0, r0, ip, ror #1
 8009ad4:	08013350 	stmdaeq	r1, {r4, r6, r8, r9, ip, sp}
 8009ad8:	08013364 	stmdaeq	r1, {r2, r5, r6, r8, r9, ip, sp}
 8009adc:	0801336d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r8, r9, ip, sp}
 8009ae0:	08013379 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, r9, ip, sp}

08009ae4 <OscServer::Print()>:
 8009ae4:	b510      	push	{r4, lr}
 8009ae6:	4604      	mov	r4, r0
 8009ae8:	480f      	ldr	r0, [pc, #60]	; (8009b28 <OscServer::Print()+0x44>)
 8009aea:	f7ff fbd7 	bl	800929c <printf>
 8009aee:	8821      	ldrh	r1, [r4, #0]
 8009af0:	480e      	ldr	r0, [pc, #56]	; (8009b2c <OscServer::Print()+0x48>)
 8009af2:	f7ff fbd3 	bl	800929c <printf>
 8009af6:	8861      	ldrh	r1, [r4, #2]
 8009af8:	480d      	ldr	r0, [pc, #52]	; (8009b30 <OscServer::Print()+0x4c>)
 8009afa:	f7ff fbcf 	bl	800929c <printf>
 8009afe:	4a0d      	ldr	r2, [pc, #52]	; (8009b34 <OscServer::Print()+0x50>)
 8009b00:	490d      	ldr	r1, [pc, #52]	; (8009b38 <OscServer::Print()+0x54>)
 8009b02:	480e      	ldr	r0, [pc, #56]	; (8009b3c <OscServer::Print()+0x58>)
 8009b04:	f7ff fbca 	bl	800929c <printf>
 8009b08:	490d      	ldr	r1, [pc, #52]	; (8009b40 <OscServer::Print()+0x5c>)
 8009b0a:	480e      	ldr	r0, [pc, #56]	; (8009b44 <OscServer::Print()+0x60>)
 8009b0c:	f7ff fbc6 	bl	800929c <printf>
 8009b10:	7aa1      	ldrb	r1, [r4, #10]
 8009b12:	4a0d      	ldr	r2, [pc, #52]	; (8009b48 <OscServer::Print()+0x64>)
 8009b14:	4b0d      	ldr	r3, [pc, #52]	; (8009b4c <OscServer::Print()+0x68>)
 8009b16:	480e      	ldr	r0, [pc, #56]	; (8009b50 <OscServer::Print()+0x6c>)
 8009b18:	2900      	cmp	r1, #0
 8009b1a:	bf14      	ite	ne
 8009b1c:	4611      	movne	r1, r2
 8009b1e:	4619      	moveq	r1, r3
 8009b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b24:	f7ff bbba 	b.w	800929c <printf>
 8009b28:	0801338a 	stmdaeq	r1, {r1, r3, r7, r8, r9, ip, sp}
 8009b2c:	08013396 	stmdaeq	r1, {r1, r2, r4, r7, r8, r9, ip, sp}
 8009b30:	080133b2 	stmdaeq	r1, {r1, r4, r5, r7, r8, r9, ip, sp}
 8009b34:	20000170 	andcs	r0, r0, r0, ror r1
 8009b38:	20000270 	andcs	r0, r0, r0, ror r2
 8009b3c:	080133ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r8, r9, ip, sp}
 8009b40:	200001f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8009b44:	080133f0 	stmdaeq	r1, {r4, r5, r6, r7, r8, r9, ip, sp}
 8009b48:	08013383 	stmdaeq	r1, {r0, r1, r7, r8, r9, ip, sp}
 8009b4c:	08013387 	stmdaeq	r1, {r0, r1, r2, r7, r8, r9, ip, sp}
 8009b50:	0801340e 	stmdaeq	r1, {r1, r2, r3, sl, ip, sp}

08009b54 <strncpy.constprop.0.isra.0>:
 8009b54:	227f      	movs	r2, #127	; 0x7f
 8009b56:	1e4b      	subs	r3, r1, #1
 8009b58:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8009b5c:	b909      	cbnz	r1, 8009b62 <strncpy.constprop.0.isra.0+0xe>
 8009b5e:	f007 ba87 	b.w	8011070 <memset>
 8009b62:	3a01      	subs	r2, #1
 8009b64:	f800 1b01 	strb.w	r1, [r0], #1
 8009b68:	d1f6      	bne.n	8009b58 <strncpy.constprop.0.isra.0+0x4>
 8009b6a:	4770      	bx	lr

08009b6c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>:
 8009b6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b6e:	88c6      	ldrh	r6, [r0, #6]
 8009b70:	8885      	ldrh	r5, [r0, #4]
 8009b72:	42ae      	cmp	r6, r5
 8009b74:	d216      	bcs.n	8009ba4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x38>
 8009b76:	4604      	mov	r4, r0
 8009b78:	6800      	ldr	r0, [r0, #0]
 8009b7a:	1bad      	subs	r5, r5, r6
 8009b7c:	4430      	add	r0, r6
 8009b7e:	7a26      	ldrb	r6, [r4, #8]
 8009b80:	b923      	cbnz	r3, 8009b8c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x20>
 8009b82:	b926      	cbnz	r6, 8009b8e <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x22>
 8009b84:	9200      	str	r2, [sp, #0]
 8009b86:	460b      	mov	r3, r1
 8009b88:	4a09      	ldr	r2, [pc, #36]	; (8009bb0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x44>)
 8009b8a:	e003      	b.n	8009b94 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 8009b8c:	b166      	cbz	r6, 8009ba8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x3c>
 8009b8e:	460b      	mov	r3, r1
 8009b90:	9200      	str	r2, [sp, #0]
 8009b92:	4a08      	ldr	r2, [pc, #32]	; (8009bb4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x48>)
 8009b94:	4629      	mov	r1, r5
 8009b96:	f7ff fb91 	bl	80092bc <snprintf>
 8009b9a:	4285      	cmp	r5, r0
 8009b9c:	bfa2      	ittt	ge
 8009b9e:	88e3      	ldrhge	r3, [r4, #6]
 8009ba0:	181b      	addge	r3, r3, r0
 8009ba2:	80e3      	strhge	r3, [r4, #6]
 8009ba4:	b002      	add	sp, #8
 8009ba6:	bd70      	pop	{r4, r5, r6, pc}
 8009ba8:	9200      	str	r2, [sp, #0]
 8009baa:	460b      	mov	r3, r1
 8009bac:	4a02      	ldr	r2, [pc, #8]	; (8009bb8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x4c>)
 8009bae:	e7f1      	b.n	8009b94 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 8009bb0:	08013475 	stmdaeq	r1, {r0, r2, r4, r5, r6, sl, ip, sp}
 8009bb4:	0801346c 	stmdaeq	r1, {r2, r3, r5, r6, sl, ip, sp}
 8009bb8:	08013476 	stmdaeq	r1, {r1, r2, r4, r5, r6, sl, ip, sp}

08009bbc <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int) [clone .isra.0]>:
 8009bbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009bbe:	88c6      	ldrh	r6, [r0, #6]
 8009bc0:	8885      	ldrh	r5, [r0, #4]
 8009bc2:	42ae      	cmp	r6, r5
 8009bc4:	d216      	bcs.n	8009bf4 <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int) [clone .isra.0]+0x38>
 8009bc6:	4604      	mov	r4, r0
 8009bc8:	6800      	ldr	r0, [r0, #0]
 8009bca:	1bad      	subs	r5, r5, r6
 8009bcc:	4430      	add	r0, r6
 8009bce:	7a26      	ldrb	r6, [r4, #8]
 8009bd0:	b923      	cbnz	r3, 8009bdc <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int) [clone .isra.0]+0x20>
 8009bd2:	b926      	cbnz	r6, 8009bde <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int) [clone .isra.0]+0x22>
 8009bd4:	9200      	str	r2, [sp, #0]
 8009bd6:	460b      	mov	r3, r1
 8009bd8:	4a09      	ldr	r2, [pc, #36]	; (8009c00 <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int) [clone .isra.0]+0x44>)
 8009bda:	e003      	b.n	8009be4 <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int) [clone .isra.0]+0x28>
 8009bdc:	b166      	cbz	r6, 8009bf8 <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int) [clone .isra.0]+0x3c>
 8009bde:	460b      	mov	r3, r1
 8009be0:	9200      	str	r2, [sp, #0]
 8009be2:	4a08      	ldr	r2, [pc, #32]	; (8009c04 <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int) [clone .isra.0]+0x48>)
 8009be4:	4629      	mov	r1, r5
 8009be6:	f7ff fb69 	bl	80092bc <snprintf>
 8009bea:	4285      	cmp	r5, r0
 8009bec:	bfa2      	ittt	ge
 8009bee:	88e3      	ldrhge	r3, [r4, #6]
 8009bf0:	181b      	addge	r3, r3, r0
 8009bf2:	80e3      	strhge	r3, [r4, #6]
 8009bf4:	b002      	add	sp, #8
 8009bf6:	bd70      	pop	{r4, r5, r6, pc}
 8009bf8:	9200      	str	r2, [sp, #0]
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	4a02      	ldr	r2, [pc, #8]	; (8009c08 <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int) [clone .isra.0]+0x4c>)
 8009bfe:	e7f1      	b.n	8009be4 <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int) [clone .isra.0]+0x28>
 8009c00:	08013488 	stmdaeq	r1, {r3, r7, sl, ip, sp}
 8009c04:	0801347d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, sl, ip, sp}
 8009c08:	08013489 	stmdaeq	r1, {r0, r3, r7, sl, ip, sp}

08009c0c <OSCServerParams::OSCServerParams(OSCServerParamsStore*)>:
 8009c0c:	b510      	push	{r4, lr}
 8009c0e:	4604      	mov	r4, r0
 8009c10:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 8009c14:	f840 1b04 	str.w	r1, [r0], #4
 8009c18:	2100      	movs	r1, #0
 8009c1a:	f007 fa29 	bl	8011070 <memset>
 8009c1e:	4b02      	ldr	r3, [pc, #8]	; (8009c28 <OSCServerParams::OSCServerParams(OSCServerParamsStore*)+0x1c>)
 8009c20:	4620      	mov	r0, r4
 8009c22:	60a3      	str	r3, [r4, #8]
 8009c24:	bd10      	pop	{r4, pc}
 8009c26:	bf00      	nop
 8009c28:	23281f40 			; <UNDEFINED> instruction: 0x23281f40

08009c2c <OSCServerParams::Load()>:
 8009c2c:	b508      	push	{r3, lr}
 8009c2e:	2300      	movs	r3, #0
 8009c30:	4601      	mov	r1, r0
 8009c32:	6043      	str	r3, [r0, #4]
 8009c34:	6800      	ldr	r0, [r0, #0]
 8009c36:	b120      	cbz	r0, 8009c42 <OSCServerParams::Load()+0x16>
 8009c38:	6803      	ldr	r3, [r0, #0]
 8009c3a:	3104      	adds	r1, #4
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	4798      	blx	r3
 8009c40:	2001      	movs	r0, #1
 8009c42:	bd08      	pop	{r3, pc}

08009c44 <OSCServerParams::Load(char const*, unsigned int)>:
 8009c44:	6803      	ldr	r3, [r0, #0]
 8009c46:	b1d3      	cbz	r3, 8009c7e <OSCServerParams::Load(char const*, unsigned int)+0x3a>
 8009c48:	2300      	movs	r3, #0
 8009c4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c4c:	460d      	mov	r5, r1
 8009c4e:	4616      	mov	r6, r2
 8009c50:	4604      	mov	r4, r0
 8009c52:	6043      	str	r3, [r0, #4]
 8009c54:	4602      	mov	r2, r0
 8009c56:	490a      	ldr	r1, [pc, #40]	; (8009c80 <OSCServerParams::Load(char const*, unsigned int)+0x3c>)
 8009c58:	4668      	mov	r0, sp
 8009c5a:	f006 fb9b 	bl	8010394 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8009c5e:	4632      	mov	r2, r6
 8009c60:	4629      	mov	r1, r5
 8009c62:	4668      	mov	r0, sp
 8009c64:	f006 fb9a 	bl	801039c <ReadConfigFile::Read(char const*, unsigned int)>
 8009c68:	4621      	mov	r1, r4
 8009c6a:	f851 0b04 	ldr.w	r0, [r1], #4
 8009c6e:	6803      	ldr	r3, [r0, #0]
 8009c70:	689b      	ldr	r3, [r3, #8]
 8009c72:	4798      	blx	r3
 8009c74:	4668      	mov	r0, sp
 8009c76:	f006 fb90 	bl	801039a <ReadConfigFile::~ReadConfigFile()>
 8009c7a:	b002      	add	sp, #8
 8009c7c:	bd70      	pop	{r4, r5, r6, pc}
 8009c7e:	4770      	bx	lr
 8009c80:	08009d7d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, sl, fp, ip, pc}

08009c84 <OSCServerParams::callbackFunction(char const*)>:
 8009c84:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c86:	460d      	mov	r5, r1
 8009c88:	4604      	mov	r4, r0
 8009c8a:	4937      	ldr	r1, [pc, #220]	; (8009d68 <OSCServerParams::callbackFunction(char const*)+0xe4>)
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	f10d 0202 	add.w	r2, sp, #2
 8009c92:	f006 fc74 	bl	801057e <Sscan::Uint16(char const*, char const*, unsigned short&)>
 8009c96:	b980      	cbnz	r0, 8009cba <OSCServerParams::callbackFunction(char const*)+0x36>
 8009c98:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8009c9c:	6863      	ldr	r3, [r4, #4]
 8009c9e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009ca2:	bf33      	iteet	cc
 8009ca4:	f44f 52fa 	movcc.w	r2, #8000	; 0x1f40
 8009ca8:	8122      	strhcs	r2, [r4, #8]
 8009caa:	f043 0301 	orrcs.w	r3, r3, #1
 8009cae:	8122      	strhcc	r2, [r4, #8]
 8009cb0:	bf38      	it	cc
 8009cb2:	f023 0301 	biccc.w	r3, r3, #1
 8009cb6:	6063      	str	r3, [r4, #4]
 8009cb8:	e028      	b.n	8009d0c <OSCServerParams::callbackFunction(char const*)+0x88>
 8009cba:	4628      	mov	r0, r5
 8009cbc:	492b      	ldr	r1, [pc, #172]	; (8009d6c <OSCServerParams::callbackFunction(char const*)+0xe8>)
 8009cbe:	f10d 0202 	add.w	r2, sp, #2
 8009cc2:	f006 fc5c 	bl	801057e <Sscan::Uint16(char const*, char const*, unsigned short&)>
 8009cc6:	b978      	cbnz	r0, 8009ce8 <OSCServerParams::callbackFunction(char const*)+0x64>
 8009cc8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8009ccc:	6863      	ldr	r3, [r4, #4]
 8009cce:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009cd2:	bf33      	iteet	cc
 8009cd4:	f242 3228 	movwcc	r2, #9000	; 0x2328
 8009cd8:	8162      	strhcs	r2, [r4, #10]
 8009cda:	f043 0302 	orrcs.w	r3, r3, #2
 8009cde:	8162      	strhcc	r2, [r4, #10]
 8009ce0:	bf38      	it	cc
 8009ce2:	f023 0302 	biccc.w	r3, r3, #2
 8009ce6:	e7e6      	b.n	8009cb6 <OSCServerParams::callbackFunction(char const*)+0x32>
 8009ce8:	4628      	mov	r0, r5
 8009cea:	4921      	ldr	r1, [pc, #132]	; (8009d70 <OSCServerParams::callbackFunction(char const*)+0xec>)
 8009cec:	f10d 0201 	add.w	r2, sp, #1
 8009cf0:	f006 fc8c 	bl	801060c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8009cf4:	b978      	cbnz	r0, 8009d16 <OSCServerParams::callbackFunction(char const*)+0x92>
 8009cf6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009cfa:	6863      	ldr	r3, [r4, #4]
 8009cfc:	b142      	cbz	r2, 8009d10 <OSCServerParams::callbackFunction(char const*)+0x8c>
 8009cfe:	f043 0308 	orr.w	r3, r3, #8
 8009d02:	3a00      	subs	r2, #0
 8009d04:	bf18      	it	ne
 8009d06:	2201      	movne	r2, #1
 8009d08:	6063      	str	r3, [r4, #4]
 8009d0a:	7362      	strb	r2, [r4, #13]
 8009d0c:	b002      	add	sp, #8
 8009d0e:	bd70      	pop	{r4, r5, r6, pc}
 8009d10:	f023 0308 	bic.w	r3, r3, #8
 8009d14:	e7f5      	b.n	8009d02 <OSCServerParams::callbackFunction(char const*)+0x7e>
 8009d16:	267f      	movs	r6, #127	; 0x7f
 8009d18:	4628      	mov	r0, r5
 8009d1a:	4916      	ldr	r1, [pc, #88]	; (8009d74 <OSCServerParams::callbackFunction(char const*)+0xf0>)
 8009d1c:	ab01      	add	r3, sp, #4
 8009d1e:	f104 020e 	add.w	r2, r4, #14
 8009d22:	9601      	str	r6, [sp, #4]
 8009d24:	f006 fb6e 	bl	8010404 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 8009d28:	b918      	cbnz	r0, 8009d32 <OSCServerParams::callbackFunction(char const*)+0xae>
 8009d2a:	6863      	ldr	r3, [r4, #4]
 8009d2c:	f043 0304 	orr.w	r3, r3, #4
 8009d30:	e7c1      	b.n	8009cb6 <OSCServerParams::callbackFunction(char const*)+0x32>
 8009d32:	4628      	mov	r0, r5
 8009d34:	4910      	ldr	r1, [pc, #64]	; (8009d78 <OSCServerParams::callbackFunction(char const*)+0xf4>)
 8009d36:	ab01      	add	r3, sp, #4
 8009d38:	f104 028e 	add.w	r2, r4, #142	; 0x8e
 8009d3c:	9601      	str	r6, [sp, #4]
 8009d3e:	f006 fb61 	bl	8010404 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 8009d42:	b918      	cbnz	r0, 8009d4c <OSCServerParams::callbackFunction(char const*)+0xc8>
 8009d44:	6863      	ldr	r3, [r4, #4]
 8009d46:	f043 0320 	orr.w	r3, r3, #32
 8009d4a:	e7b4      	b.n	8009cb6 <OSCServerParams::callbackFunction(char const*)+0x32>
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	490a      	ldr	r1, [pc, #40]	; (8009d78 <OSCServerParams::callbackFunction(char const*)+0xf4>)
 8009d50:	ab01      	add	r3, sp, #4
 8009d52:	f504 7287 	add.w	r2, r4, #270	; 0x10e
 8009d56:	9601      	str	r6, [sp, #4]
 8009d58:	f006 fb54 	bl	8010404 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	d1d5      	bne.n	8009d0c <OSCServerParams::callbackFunction(char const*)+0x88>
 8009d60:	6863      	ldr	r3, [r4, #4]
 8009d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d66:	e7a6      	b.n	8009cb6 <OSCServerParams::callbackFunction(char const*)+0x32>
 8009d68:	080134ca 	stmdaeq	r1, {r1, r3, r6, r7, sl, ip, sp}
 8009d6c:	080134d8 	stmdaeq	r1, {r3, r4, r6, r7, sl, ip, sp}
 8009d70:	08013490 	stmdaeq	r1, {r4, r7, sl, ip, sp}
 8009d74:	080134b3 	stmdaeq	r1, {r0, r1, r4, r5, r7, sl, ip, sp}
 8009d78:	080134c0 	stmdaeq	r1, {r6, r7, sl, ip, sp}

08009d7c <OSCServerParams::staticCallbackFunction(void*, char const*)>:
 8009d7c:	f7ff bf82 	b.w	8009c84 <OSCServerParams::callbackFunction(char const*)>

08009d80 <OSCServerParams::Set(OscServer*)>:
 8009d80:	b538      	push	{r3, r4, r5, lr}
 8009d82:	460d      	mov	r5, r1
 8009d84:	6843      	ldr	r3, [r0, #4]
 8009d86:	4604      	mov	r4, r0
 8009d88:	07d9      	lsls	r1, r3, #31
 8009d8a:	bf44      	itt	mi
 8009d8c:	8902      	ldrhmi	r2, [r0, #8]
 8009d8e:	802a      	strhmi	r2, [r5, #0]
 8009d90:	079a      	lsls	r2, r3, #30
 8009d92:	bf44      	itt	mi
 8009d94:	8942      	ldrhmi	r2, [r0, #10]
 8009d96:	806a      	strhmi	r2, [r5, #2]
 8009d98:	0758      	lsls	r0, r3, #29
 8009d9a:	d504      	bpl.n	8009da6 <OSCServerParams::Set(OscServer*)+0x26>
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	f104 010e 	add.w	r1, r4, #14
 8009da2:	f7ff fcc7 	bl	8009734 <OscServer::SetPath(char const*)>
 8009da6:	6863      	ldr	r3, [r4, #4]
 8009da8:	0699      	lsls	r1, r3, #26
 8009daa:	d504      	bpl.n	8009db6 <OSCServerParams::Set(OscServer*)+0x36>
 8009dac:	4628      	mov	r0, r5
 8009dae:	f104 018e 	add.w	r1, r4, #142	; 0x8e
 8009db2:	f7ff fce5 	bl	8009780 <OscServer::SetPathInfo(char const*)>
 8009db6:	6863      	ldr	r3, [r4, #4]
 8009db8:	065a      	lsls	r2, r3, #25
 8009dba:	d504      	bpl.n	8009dc6 <OSCServerParams::Set(OscServer*)+0x46>
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	f504 7187 	add.w	r1, r4, #270	; 0x10e
 8009dc2:	f7ff fcf3 	bl	80097ac <OscServer::SetPathBlackOut(char const*)>
 8009dc6:	6863      	ldr	r3, [r4, #4]
 8009dc8:	071b      	lsls	r3, r3, #28
 8009dca:	bf44      	itt	mi
 8009dcc:	7b63      	ldrbmi	r3, [r4, #13]
 8009dce:	72ab      	strbmi	r3, [r5, #10]
 8009dd0:	bd38      	pop	{r3, r4, r5, pc}
	...

08009dd4 <OSCServerParams::Builder(osc::server::Params const*, char*, unsigned int, unsigned int&)>:
 8009dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	4615      	mov	r5, r2
 8009dda:	461e      	mov	r6, r3
 8009ddc:	b087      	sub	sp, #28
 8009dde:	3004      	adds	r0, #4
 8009de0:	2900      	cmp	r1, #0
 8009de2:	d061      	beq.n	8009ea8 <OSCServerParams::Builder(osc::server::Params const*, char*, unsigned int, unsigned int&)+0xd4>
 8009de4:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 8009de8:	f007 f92b 	bl	8011042 <memmove>
 8009dec:	4633      	mov	r3, r6
 8009dee:	462a      	mov	r2, r5
 8009df0:	4946      	ldr	r1, [pc, #280]	; (8009f0c <OSCServerParams::Builder(osc::server::Params const*, char*, unsigned int, unsigned int&)+0x138>)
 8009df2:	a803      	add	r0, sp, #12
 8009df4:	f006 fa2e 	bl	8010254 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 8009df8:	6863      	ldr	r3, [r4, #4]
 8009dfa:	f104 070e 	add.w	r7, r4, #14
 8009dfe:	075e      	lsls	r6, r3, #29
 8009e00:	d403      	bmi.n	8009e0a <OSCServerParams::Builder(osc::server::Params const*, char*, unsigned int, unsigned int&)+0x36>
 8009e02:	4638      	mov	r0, r7
 8009e04:	4942      	ldr	r1, [pc, #264]	; (8009f10 <OSCServerParams::Builder(osc::server::Params const*, char*, unsigned int, unsigned int&)+0x13c>)
 8009e06:	f7ff fea5 	bl	8009b54 <strncpy.constprop.0.isra.0>
 8009e0a:	6863      	ldr	r3, [r4, #4]
 8009e0c:	f104 068e 	add.w	r6, r4, #142	; 0x8e
 8009e10:	069d      	lsls	r5, r3, #26
 8009e12:	d403      	bmi.n	8009e1c <OSCServerParams::Builder(osc::server::Params const*, char*, unsigned int, unsigned int&)+0x48>
 8009e14:	4630      	mov	r0, r6
 8009e16:	493f      	ldr	r1, [pc, #252]	; (8009f14 <OSCServerParams::Builder(osc::server::Params const*, char*, unsigned int, unsigned int&)+0x140>)
 8009e18:	f7ff fe9c 	bl	8009b54 <strncpy.constprop.0.isra.0>
 8009e1c:	6863      	ldr	r3, [r4, #4]
 8009e1e:	f504 7587 	add.w	r5, r4, #270	; 0x10e
 8009e22:	0658      	lsls	r0, r3, #25
 8009e24:	d403      	bmi.n	8009e2e <OSCServerParams::Builder(osc::server::Params const*, char*, unsigned int, unsigned int&)+0x5a>
 8009e26:	4628      	mov	r0, r5
 8009e28:	493b      	ldr	r1, [pc, #236]	; (8009f18 <OSCServerParams::Builder(osc::server::Params const*, char*, unsigned int, unsigned int&)+0x144>)
 8009e2a:	f7ff fe93 	bl	8009b54 <strncpy.constprop.0.isra.0>
 8009e2e:	6863      	ldr	r3, [r4, #4]
 8009e30:	8922      	ldrh	r2, [r4, #8]
 8009e32:	493a      	ldr	r1, [pc, #232]	; (8009f1c <OSCServerParams::Builder(osc::server::Params const*, char*, unsigned int, unsigned int&)+0x148>)
 8009e34:	f003 0301 	and.w	r3, r3, #1
 8009e38:	a803      	add	r0, sp, #12
 8009e3a:	f7ff fe97 	bl	8009b6c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 8009e3e:	6863      	ldr	r3, [r4, #4]
 8009e40:	8962      	ldrh	r2, [r4, #10]
 8009e42:	4937      	ldr	r1, [pc, #220]	; (8009f20 <OSCServerParams::Builder(osc::server::Params const*, char*, unsigned int, unsigned int&)+0x14c>)
 8009e44:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009e48:	a803      	add	r0, sp, #12
 8009e4a:	f7ff fe8f 	bl	8009b6c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 8009e4e:	6863      	ldr	r3, [r4, #4]
 8009e50:	463a      	mov	r2, r7
 8009e52:	4934      	ldr	r1, [pc, #208]	; (8009f24 <OSCServerParams::Builder(osc::server::Params const*, char*, unsigned int, unsigned int&)+0x150>)
 8009e54:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009e58:	a803      	add	r0, sp, #12
 8009e5a:	f7ff feaf 	bl	8009bbc <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int) [clone .isra.0]>
 8009e5e:	6863      	ldr	r3, [r4, #4]
 8009e60:	4632      	mov	r2, r6
 8009e62:	4931      	ldr	r1, [pc, #196]	; (8009f28 <OSCServerParams::Builder(osc::server::Params const*, char*, unsigned int, unsigned int&)+0x154>)
 8009e64:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009e68:	a803      	add	r0, sp, #12
 8009e6a:	f7ff fea7 	bl	8009bbc <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int) [clone .isra.0]>
 8009e6e:	6863      	ldr	r3, [r4, #4]
 8009e70:	462a      	mov	r2, r5
 8009e72:	492e      	ldr	r1, [pc, #184]	; (8009f2c <OSCServerParams::Builder(osc::server::Params const*, char*, unsigned int, unsigned int&)+0x158>)
 8009e74:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009e78:	a803      	add	r0, sp, #12
 8009e7a:	f7ff fe9f 	bl	8009bbc <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int) [clone .isra.0]>
 8009e7e:	7b63      	ldrb	r3, [r4, #13]
 8009e80:	6861      	ldr	r1, [r4, #4]
 8009e82:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8009e86:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 8009e8a:	42a2      	cmp	r2, r4
 8009e8c:	d221      	bcs.n	8009ed2 <OSCServerParams::Builder(osc::server::Params const*, char*, unsigned int, unsigned int&)+0xfe>
 8009e8e:	9803      	ldr	r0, [sp, #12]
 8009e90:	0709      	lsls	r1, r1, #28
 8009e92:	4410      	add	r0, r2
 8009e94:	eba4 0402 	sub.w	r4, r4, r2
 8009e98:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8009e9c:	d40b      	bmi.n	8009eb6 <OSCServerParams::Builder(osc::server::Params const*, char*, unsigned int, unsigned int&)+0xe2>
 8009e9e:	b95a      	cbnz	r2, 8009eb8 <OSCServerParams::Builder(osc::server::Params const*, char*, unsigned int, unsigned int&)+0xe4>
 8009ea0:	9300      	str	r3, [sp, #0]
 8009ea2:	4a23      	ldr	r2, [pc, #140]	; (8009f30 <OSCServerParams::Builder(osc::server::Params const*, char*, unsigned int, unsigned int&)+0x15c>)
 8009ea4:	4b23      	ldr	r3, [pc, #140]	; (8009f34 <OSCServerParams::Builder(osc::server::Params const*, char*, unsigned int, unsigned int&)+0x160>)
 8009ea6:	e00a      	b.n	8009ebe <OSCServerParams::Builder(osc::server::Params const*, char*, unsigned int, unsigned int&)+0xea>
 8009ea8:	6823      	ldr	r3, [r4, #0]
 8009eaa:	4601      	mov	r1, r0
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	4618      	mov	r0, r3
 8009eb0:	68d2      	ldr	r2, [r2, #12]
 8009eb2:	4790      	blx	r2
 8009eb4:	e79a      	b.n	8009dec <OSCServerParams::Builder(osc::server::Params const*, char*, unsigned int, unsigned int&)+0x18>
 8009eb6:	b32a      	cbz	r2, 8009f04 <OSCServerParams::Builder(osc::server::Params const*, char*, unsigned int, unsigned int&)+0x130>
 8009eb8:	9300      	str	r3, [sp, #0]
 8009eba:	4a1f      	ldr	r2, [pc, #124]	; (8009f38 <OSCServerParams::Builder(osc::server::Params const*, char*, unsigned int, unsigned int&)+0x164>)
 8009ebc:	4b1d      	ldr	r3, [pc, #116]	; (8009f34 <OSCServerParams::Builder(osc::server::Params const*, char*, unsigned int, unsigned int&)+0x160>)
 8009ebe:	4621      	mov	r1, r4
 8009ec0:	f7ff f9fc 	bl	80092bc <snprintf>
 8009ec4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8009ec8:	4284      	cmp	r4, r0
 8009eca:	bfa4      	itt	ge
 8009ecc:	181b      	addge	r3, r3, r0
 8009ece:	f8ad 3012 	strhge.w	r3, [sp, #18]
 8009ed2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8009ed6:	b17b      	cbz	r3, 8009ef8 <OSCServerParams::Builder(osc::server::Params const*, char*, unsigned int, unsigned int&)+0x124>
 8009ed8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8009edc:	9b03      	ldr	r3, [sp, #12]
 8009ede:	4413      	add	r3, r2
 8009ee0:	227d      	movs	r2, #125	; 0x7d
 8009ee2:	f803 2c01 	strb.w	r2, [r3, #-1]
 8009ee6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8009eea:	9903      	ldr	r1, [sp, #12]
 8009eec:	54ca      	strb	r2, [r1, r3]
 8009eee:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	f8ad 3012 	strh.w	r3, [sp, #18]
 8009ef8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8009efc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009efe:	601a      	str	r2, [r3, #0]
 8009f00:	b007      	add	sp, #28
 8009f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f04:	9300      	str	r3, [sp, #0]
 8009f06:	4a0d      	ldr	r2, [pc, #52]	; (8009f3c <OSCServerParams::Builder(osc::server::Params const*, char*, unsigned int, unsigned int&)+0x168>)
 8009f08:	4b0a      	ldr	r3, [pc, #40]	; (8009f34 <OSCServerParams::Builder(osc::server::Params const*, char*, unsigned int, unsigned int&)+0x160>)
 8009f0a:	e7d8      	b.n	8009ebe <OSCServerParams::Builder(osc::server::Params const*, char*, unsigned int, unsigned int&)+0xea>
 8009f0c:	080134b8 	stmdaeq	r1, {r3, r4, r5, r7, sl, ip, sp}
 8009f10:	20000270 	andcs	r0, r0, r0, ror r2
 8009f14:	200000ec 	andcs	r0, r0, ip, ror #1
 8009f18:	200001f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8009f1c:	080134ca 	stmdaeq	r1, {r1, r3, r6, r7, sl, ip, sp}
 8009f20:	080134d8 	stmdaeq	r1, {r3, r4, r6, r7, sl, ip, sp}
 8009f24:	080134b3 	stmdaeq	r1, {r0, r1, r4, r5, r7, sl, ip, sp}
 8009f28:	080134c0 	stmdaeq	r1, {r6, r7, sl, ip, sp}
 8009f2c:	080134a5 	stmdaeq	r1, {r0, r2, r5, r7, sl, ip, sp}
 8009f30:	08013475 	stmdaeq	r1, {r0, r2, r4, r5, r6, sl, ip, sp}
 8009f34:	08013490 	stmdaeq	r1, {r4, r7, sl, ip, sp}
 8009f38:	0801346c 	stmdaeq	r1, {r2, r3, r5, r6, sl, ip, sp}
 8009f3c:	08013476 	stmdaeq	r1, {r1, r2, r4, r5, r6, sl, ip, sp}

08009f40 <OSCServerParams::Save(char*, unsigned int, unsigned int&)>:
 8009f40:	b513      	push	{r0, r1, r4, lr}
 8009f42:	6804      	ldr	r4, [r0, #0]
 8009f44:	b914      	cbnz	r4, 8009f4c <OSCServerParams::Save(char*, unsigned int, unsigned int&)+0xc>
 8009f46:	601c      	str	r4, [r3, #0]
 8009f48:	b002      	add	sp, #8
 8009f4a:	bd10      	pop	{r4, pc}
 8009f4c:	9300      	str	r3, [sp, #0]
 8009f4e:	4613      	mov	r3, r2
 8009f50:	460a      	mov	r2, r1
 8009f52:	2100      	movs	r1, #0
 8009f54:	f7ff ff3e 	bl	8009dd4 <OSCServerParams::Builder(osc::server::Params const*, char*, unsigned int, unsigned int&)>
 8009f58:	e7f6      	b.n	8009f48 <OSCServerParams::Save(char*, unsigned int, unsigned int&)+0x8>

08009f5a <OSCServerParams::Dump()>:
 8009f5a:	4770      	bx	lr

08009f5c <lo_pattern_match>:
 8009f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f5e:	4605      	mov	r5, r0
 8009f60:	460b      	mov	r3, r1
 8009f62:	7819      	ldrb	r1, [r3, #0]
 8009f64:	782a      	ldrb	r2, [r5, #0]
 8009f66:	b919      	cbnz	r1, 8009f70 <lo_pattern_match+0x14>
 8009f68:	fab2 f082 	clz	r0, r2
 8009f6c:	0940      	lsrs	r0, r0, #5
 8009f6e:	e09f      	b.n	800a0b0 <lo_pattern_match+0x154>
 8009f70:	b90a      	cbnz	r2, 8009f76 <lo_pattern_match+0x1a>
 8009f72:	292a      	cmp	r1, #42	; 0x2a
 8009f74:	d132      	bne.n	8009fdc <lo_pattern_match+0x80>
 8009f76:	295b      	cmp	r1, #91	; 0x5b
 8009f78:	f103 0401 	add.w	r4, r3, #1
 8009f7c:	d03c      	beq.n	8009ff8 <lo_pattern_match+0x9c>
 8009f7e:	d806      	bhi.n	8009f8e <lo_pattern_match+0x32>
 8009f80:	292a      	cmp	r1, #42	; 0x2a
 8009f82:	d012      	beq.n	8009faa <lo_pattern_match+0x4e>
 8009f84:	293f      	cmp	r1, #63	; 0x3f
 8009f86:	d032      	beq.n	8009fee <lo_pattern_match+0x92>
 8009f88:	4291      	cmp	r1, r2
 8009f8a:	d032      	beq.n	8009ff2 <lo_pattern_match+0x96>
 8009f8c:	e026      	b.n	8009fdc <lo_pattern_match+0x80>
 8009f8e:	297b      	cmp	r1, #123	; 0x7b
 8009f90:	d1fa      	bne.n	8009f88 <lo_pattern_match+0x2c>
 8009f92:	7820      	ldrb	r0, [r4, #0]
 8009f94:	4626      	mov	r6, r4
 8009f96:	1c67      	adds	r7, r4, #1
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	f000 8089 	beq.w	800a0b0 <lo_pattern_match+0x154>
 8009f9e:	287d      	cmp	r0, #125	; 0x7d
 8009fa0:	d161      	bne.n	800a066 <lo_pattern_match+0x10a>
 8009fa2:	1c9c      	adds	r4, r3, #2
 8009fa4:	4628      	mov	r0, r5
 8009fa6:	785b      	ldrb	r3, [r3, #1]
 8009fa8:	e06d      	b.n	800a086 <lo_pattern_match+0x12a>
 8009faa:	7823      	ldrb	r3, [r4, #0]
 8009fac:	4626      	mov	r6, r4
 8009fae:	2b2a      	cmp	r3, #42	; 0x2a
 8009fb0:	f104 0401 	add.w	r4, r4, #1
 8009fb4:	d0f9      	beq.n	8009faa <lo_pattern_match+0x4e>
 8009fb6:	b1c3      	cbz	r3, 8009fea <lo_pattern_match+0x8e>
 8009fb8:	2b3f      	cmp	r3, #63	; 0x3f
 8009fba:	d00b      	beq.n	8009fd4 <lo_pattern_match+0x78>
 8009fbc:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 8009fc0:	2a5b      	cmp	r2, #91	; 0x5b
 8009fc2:	d007      	beq.n	8009fd4 <lo_pattern_match+0x78>
 8009fc4:	462a      	mov	r2, r5
 8009fc6:	4615      	mov	r5, r2
 8009fc8:	f812 0b01 	ldrb.w	r0, [r2], #1
 8009fcc:	2800      	cmp	r0, #0
 8009fce:	d06f      	beq.n	800a0b0 <lo_pattern_match+0x154>
 8009fd0:	4283      	cmp	r3, r0
 8009fd2:	d1f8      	bne.n	8009fc6 <lo_pattern_match+0x6a>
 8009fd4:	4628      	mov	r0, r5
 8009fd6:	7803      	ldrb	r3, [r0, #0]
 8009fd8:	3501      	adds	r5, #1
 8009fda:	b90b      	cbnz	r3, 8009fe0 <lo_pattern_match+0x84>
 8009fdc:	2000      	movs	r0, #0
 8009fde:	e067      	b.n	800a0b0 <lo_pattern_match+0x154>
 8009fe0:	4631      	mov	r1, r6
 8009fe2:	f7ff ffbb 	bl	8009f5c <lo_pattern_match>
 8009fe6:	2800      	cmp	r0, #0
 8009fe8:	d0f4      	beq.n	8009fd4 <lo_pattern_match+0x78>
 8009fea:	2001      	movs	r0, #1
 8009fec:	e060      	b.n	800a0b0 <lo_pattern_match+0x154>
 8009fee:	2a00      	cmp	r2, #0
 8009ff0:	d0f4      	beq.n	8009fdc <lo_pattern_match+0x80>
 8009ff2:	4623      	mov	r3, r4
 8009ff4:	3501      	adds	r5, #1
 8009ff6:	e7b4      	b.n	8009f62 <lo_pattern_match+0x6>
 8009ff8:	7859      	ldrb	r1, [r3, #1]
 8009ffa:	2921      	cmp	r1, #33	; 0x21
 8009ffc:	bf0a      	itet	eq
 8009ffe:	2601      	moveq	r6, #1
 800a000:	2600      	movne	r6, #0
 800a002:	1c9c      	addeq	r4, r3, #2
 800a004:	4621      	mov	r1, r4
 800a006:	780b      	ldrb	r3, [r1, #0]
 800a008:	3401      	adds	r4, #1
 800a00a:	b1c3      	cbz	r3, 800a03e <lo_pattern_match+0xe2>
 800a00c:	7848      	ldrb	r0, [r1, #1]
 800a00e:	2800      	cmp	r0, #0
 800a010:	d04e      	beq.n	800a0b0 <lo_pattern_match+0x154>
 800a012:	282d      	cmp	r0, #45	; 0x2d
 800a014:	d11c      	bne.n	800a050 <lo_pattern_match+0xf4>
 800a016:	7888      	ldrb	r0, [r1, #2]
 800a018:	1c8c      	adds	r4, r1, #2
 800a01a:	2800      	cmp	r0, #0
 800a01c:	d048      	beq.n	800a0b0 <lo_pattern_match+0x154>
 800a01e:	285d      	cmp	r0, #93	; 0x5d
 800a020:	d009      	beq.n	800a036 <lo_pattern_match+0xda>
 800a022:	429a      	cmp	r2, r3
 800a024:	d005      	beq.n	800a032 <lo_pattern_match+0xd6>
 800a026:	4290      	cmp	r0, r2
 800a028:	d003      	beq.n	800a032 <lo_pattern_match+0xd6>
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d9ea      	bls.n	800a004 <lo_pattern_match+0xa8>
 800a02e:	4290      	cmp	r0, r2
 800a030:	d9e8      	bls.n	800a004 <lo_pattern_match+0xa8>
 800a032:	2301      	movs	r3, #1
 800a034:	e003      	b.n	800a03e <lo_pattern_match+0xe2>
 800a036:	429a      	cmp	r2, r3
 800a038:	bf34      	ite	cc
 800a03a:	2300      	movcc	r3, #0
 800a03c:	2301      	movcs	r3, #1
 800a03e:	429e      	cmp	r6, r3
 800a040:	d0cc      	beq.n	8009fdc <lo_pattern_match+0x80>
 800a042:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a046:	2800      	cmp	r0, #0
 800a048:	d032      	beq.n	800a0b0 <lo_pattern_match+0x154>
 800a04a:	285d      	cmp	r0, #93	; 0x5d
 800a04c:	d1f9      	bne.n	800a042 <lo_pattern_match+0xe6>
 800a04e:	e7d0      	b.n	8009ff2 <lo_pattern_match+0x96>
 800a050:	285d      	cmp	r0, #93	; 0x5d
 800a052:	d103      	bne.n	800a05c <lo_pattern_match+0x100>
 800a054:	1ad2      	subs	r2, r2, r3
 800a056:	4253      	negs	r3, r2
 800a058:	4153      	adcs	r3, r2
 800a05a:	e7f0      	b.n	800a03e <lo_pattern_match+0xe2>
 800a05c:	4290      	cmp	r0, r2
 800a05e:	d0e8      	beq.n	800a032 <lo_pattern_match+0xd6>
 800a060:	429a      	cmp	r2, r3
 800a062:	d1cf      	bne.n	800a004 <lo_pattern_match+0xa8>
 800a064:	e7e5      	b.n	800a032 <lo_pattern_match+0xd6>
 800a066:	463c      	mov	r4, r7
 800a068:	e793      	b.n	8009f92 <lo_pattern_match+0x36>
 800a06a:	2b2c      	cmp	r3, #44	; 0x2c
 800a06c:	d10f      	bne.n	800a08e <lo_pattern_match+0x132>
 800a06e:	4639      	mov	r1, r7
 800a070:	f7ff ff74 	bl	8009f5c <lo_pattern_match>
 800a074:	2800      	cmp	r0, #0
 800a076:	d1b8      	bne.n	8009fea <lo_pattern_match+0x8e>
 800a078:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a07c:	b1c3      	cbz	r3, 800a0b0 <lo_pattern_match+0x154>
 800a07e:	462a      	mov	r2, r5
 800a080:	4610      	mov	r0, r2
 800a082:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a086:	2b00      	cmp	r3, #0
 800a088:	d1ef      	bne.n	800a06a <lo_pattern_match+0x10e>
 800a08a:	4605      	mov	r5, r0
 800a08c:	e7b1      	b.n	8009ff2 <lo_pattern_match+0x96>
 800a08e:	2b7d      	cmp	r3, #125	; 0x7d
 800a090:	7802      	ldrb	r2, [r0, #0]
 800a092:	d104      	bne.n	800a09e <lo_pattern_match+0x142>
 800a094:	7823      	ldrb	r3, [r4, #0]
 800a096:	431a      	orrs	r2, r3
 800a098:	d0a7      	beq.n	8009fea <lo_pattern_match+0x8e>
 800a09a:	1e45      	subs	r5, r0, #1
 800a09c:	e7a9      	b.n	8009ff2 <lo_pattern_match+0x96>
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d107      	bne.n	800a0b2 <lo_pattern_match+0x156>
 800a0a2:	1c42      	adds	r2, r0, #1
 800a0a4:	7840      	ldrb	r0, [r0, #1]
 800a0a6:	2800      	cmp	r0, #0
 800a0a8:	d1ea      	bne.n	800a080 <lo_pattern_match+0x124>
 800a0aa:	7873      	ldrb	r3, [r6, #1]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d0e7      	beq.n	800a080 <lo_pattern_match+0x124>
 800a0b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0b2:	4623      	mov	r3, r4
 800a0b4:	781a      	ldrb	r2, [r3, #0]
 800a0b6:	461c      	mov	r4, r3
 800a0b8:	2a2c      	cmp	r2, #44	; 0x2c
 800a0ba:	f103 0301 	add.w	r3, r3, #1
 800a0be:	d004      	beq.n	800a0ca <lo_pattern_match+0x16e>
 800a0c0:	2a7d      	cmp	r2, #125	; 0x7d
 800a0c2:	d08b      	beq.n	8009fdc <lo_pattern_match+0x80>
 800a0c4:	2a00      	cmp	r2, #0
 800a0c6:	d1f5      	bne.n	800a0b4 <lo_pattern_match+0x158>
 800a0c8:	e7d9      	b.n	800a07e <lo_pattern_match+0x122>
 800a0ca:	461c      	mov	r4, r3
 800a0cc:	e7d7      	b.n	800a07e <lo_pattern_match+0x122>

0800a0ce <osc::string_validate(void*, unsigned int)>:
 800a0ce:	b510      	push	{r4, lr}
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	4604      	mov	r4, r0
 800a0d4:	428a      	cmp	r2, r1
 800a0d6:	d005      	beq.n	800a0e4 <osc::string_validate(void*, unsigned int)+0x16>
 800a0d8:	5ca3      	ldrb	r3, [r4, r2]
 800a0da:	b933      	cbnz	r3, 800a0ea <osc::string_validate(void*, unsigned int)+0x1c>
 800a0dc:	f022 0303 	bic.w	r3, r2, #3
 800a0e0:	1d18      	adds	r0, r3, #4
 800a0e2:	d104      	bne.n	800a0ee <osc::string_validate(void*, unsigned int)+0x20>
 800a0e4:	f06f 0001 	mvn.w	r0, #1
 800a0e8:	e00b      	b.n	800a102 <osc::string_validate(void*, unsigned int)+0x34>
 800a0ea:	3201      	adds	r2, #1
 800a0ec:	e7f2      	b.n	800a0d4 <osc::string_validate(void*, unsigned int)+0x6>
 800a0ee:	4281      	cmp	r1, r0
 800a0f0:	d205      	bcs.n	800a0fe <osc::string_validate(void*, unsigned int)+0x30>
 800a0f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0f6:	e004      	b.n	800a102 <osc::string_validate(void*, unsigned int)+0x34>
 800a0f8:	5ca3      	ldrb	r3, [r4, r2]
 800a0fa:	b91b      	cbnz	r3, 800a104 <osc::string_validate(void*, unsigned int)+0x36>
 800a0fc:	3201      	adds	r2, #1
 800a0fe:	4282      	cmp	r2, r0
 800a100:	d3fa      	bcc.n	800a0f8 <osc::string_validate(void*, unsigned int)+0x2a>
 800a102:	bd10      	pop	{r4, pc}
 800a104:	f06f 0002 	mvn.w	r0, #2
 800a108:	e7fb      	b.n	800a102 <osc::string_validate(void*, unsigned int)+0x34>

0800a10a <OscSimpleMessage::OscSimpleMessage(void*, unsigned int)>:
 800a10a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a10e:	2300      	movs	r3, #0
 800a110:	460d      	mov	r5, r1
 800a112:	e9c0 1200 	strd	r1, r2, [r0]
 800a116:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a11a:	7203      	strb	r3, [r0, #8]
 800a11c:	6183      	str	r3, [r0, #24]
 800a11e:	4604      	mov	r4, r0
 800a120:	4611      	mov	r1, r2
 800a122:	4628      	mov	r0, r5
 800a124:	4617      	mov	r7, r2
 800a126:	f7ff ffd2 	bl	800a0ce <osc::string_validate(void*, unsigned int)>
 800a12a:	f1b0 0800 	subs.w	r8, r0, #0
 800a12e:	db25      	blt.n	800a17c <OscSimpleMessage::OscSimpleMessage(void*, unsigned int)+0x72>
 800a130:	eb05 0608 	add.w	r6, r5, r8
 800a134:	4630      	mov	r0, r6
 800a136:	60e6      	str	r6, [r4, #12]
 800a138:	eba7 0108 	sub.w	r1, r7, r8
 800a13c:	f7ff ffc7 	bl	800a0ce <osc::string_validate(void*, unsigned int)>
 800a140:	2800      	cmp	r0, #0
 800a142:	db1b      	blt.n	800a17c <OscSimpleMessage::OscSimpleMessage(void*, unsigned int)+0x72>
 800a144:	f815 3008 	ldrb.w	r3, [r5, r8]
 800a148:	2b2c      	cmp	r3, #44	; 0x2c
 800a14a:	d117      	bne.n	800a17c <OscSimpleMessage::OscSimpleMessage(void*, unsigned int)+0x72>
 800a14c:	7873      	ldrb	r3, [r6, #1]
 800a14e:	2b73      	cmp	r3, #115	; 0x73
 800a150:	d001      	beq.n	800a156 <OscSimpleMessage::OscSimpleMessage(void*, unsigned int)+0x4c>
 800a152:	2b62      	cmp	r3, #98	; 0x62
 800a154:	d101      	bne.n	800a15a <OscSimpleMessage::OscSimpleMessage(void*, unsigned int)+0x50>
 800a156:	78b3      	ldrb	r3, [r6, #2]
 800a158:	b983      	cbnz	r3, 800a17c <OscSimpleMessage::OscSimpleMessage(void*, unsigned int)+0x72>
 800a15a:	3601      	adds	r6, #1
 800a15c:	4632      	mov	r2, r6
 800a15e:	60e6      	str	r6, [r4, #12]
 800a160:	4613      	mov	r3, r2
 800a162:	7819      	ldrb	r1, [r3, #0]
 800a164:	3201      	adds	r2, #1
 800a166:	2900      	cmp	r1, #0
 800a168:	d1fa      	bne.n	800a160 <OscSimpleMessage::OscSimpleMessage(void*, unsigned int)+0x56>
 800a16a:	1b9b      	subs	r3, r3, r6
 800a16c:	6123      	str	r3, [r4, #16]
 800a16e:	2301      	movs	r3, #1
 800a170:	4440      	add	r0, r8
 800a172:	4405      	add	r5, r0
 800a174:	1a3f      	subs	r7, r7, r0
 800a176:	6165      	str	r5, [r4, #20]
 800a178:	61a7      	str	r7, [r4, #24]
 800a17a:	7223      	strb	r3, [r4, #8]
 800a17c:	4620      	mov	r0, r4
 800a17e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a182 <OscSimpleMessage::GetFloat(unsigned int)>:
 800a182:	b510      	push	{r4, lr}
 800a184:	6984      	ldr	r4, [r0, #24]
 800a186:	1c4b      	adds	r3, r1, #1
 800a188:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
 800a18c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800a190:	d309      	bcc.n	800a1a6 <OscSimpleMessage::GetFloat(unsigned int)+0x24>
 800a192:	68c3      	ldr	r3, [r0, #12]
 800a194:	5c5b      	ldrb	r3, [r3, r1]
 800a196:	2b66      	cmp	r3, #102	; 0x66
 800a198:	d105      	bne.n	800a1a6 <OscSimpleMessage::GetFloat(unsigned int)+0x24>
 800a19a:	6943      	ldr	r3, [r0, #20]
 800a19c:	4413      	add	r3, r2
 800a19e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a1a2:	ba00      	rev	r0, r0
 800a1a4:	bd10      	pop	{r4, pc}
 800a1a6:	2000      	movs	r0, #0
 800a1a8:	e7fc      	b.n	800a1a4 <OscSimpleMessage::GetFloat(unsigned int)+0x22>

0800a1aa <OscSimpleMessage::GetInt(unsigned int)>:
 800a1aa:	b510      	push	{r4, lr}
 800a1ac:	6984      	ldr	r4, [r0, #24]
 800a1ae:	1c4b      	adds	r3, r1, #1
 800a1b0:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
 800a1b4:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800a1b8:	d309      	bcc.n	800a1ce <OscSimpleMessage::GetInt(unsigned int)+0x24>
 800a1ba:	68c3      	ldr	r3, [r0, #12]
 800a1bc:	5c5b      	ldrb	r3, [r3, r1]
 800a1be:	2b69      	cmp	r3, #105	; 0x69
 800a1c0:	d105      	bne.n	800a1ce <OscSimpleMessage::GetInt(unsigned int)+0x24>
 800a1c2:	6943      	ldr	r3, [r0, #20]
 800a1c4:	4413      	add	r3, r2
 800a1c6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a1ca:	ba00      	rev	r0, r0
 800a1cc:	bd10      	pop	{r4, pc}
 800a1ce:	2000      	movs	r0, #0
 800a1d0:	e7fc      	b.n	800a1cc <OscSimpleMessage::GetInt(unsigned int)+0x22>

0800a1d2 <OscSimpleMessage::GetBlob(unsigned int)>:
 800a1d2:	b510      	push	{r4, lr}
 800a1d4:	68cb      	ldr	r3, [r1, #12]
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	2b62      	cmp	r3, #98	; 0x62
 800a1da:	d10a      	bne.n	800a1f2 <OscSimpleMessage::GetBlob(unsigned int)+0x20>
 800a1dc:	694a      	ldr	r2, [r1, #20]
 800a1de:	6989      	ldr	r1, [r1, #24]
 800a1e0:	6813      	ldr	r3, [r2, #0]
 800a1e2:	ba1b      	rev	r3, r3
 800a1e4:	1d1c      	adds	r4, r3, #4
 800a1e6:	428c      	cmp	r4, r1
 800a1e8:	d803      	bhi.n	800a1f2 <OscSimpleMessage::GetBlob(unsigned int)+0x20>
 800a1ea:	3204      	adds	r2, #4
 800a1ec:	6002      	str	r2, [r0, #0]
 800a1ee:	6043      	str	r3, [r0, #4]
 800a1f0:	bd10      	pop	{r4, pc}
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	6003      	str	r3, [r0, #0]
 800a1f6:	e7fa      	b.n	800a1ee <OscSimpleMessage::GetBlob(unsigned int)+0x1c>

0800a1f8 <osc::string_size(char const*)>:
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	4613      	mov	r3, r2
 800a1fc:	7819      	ldrb	r1, [r3, #0]
 800a1fe:	3201      	adds	r2, #1
 800a200:	2900      	cmp	r1, #0
 800a202:	d1fa      	bne.n	800a1fa <osc::string_size(char const*)+0x2>
 800a204:	1a18      	subs	r0, r3, r0
 800a206:	f020 0003 	bic.w	r0, r0, #3
 800a20a:	3004      	adds	r0, #4
 800a20c:	4770      	bx	lr
	...

0800a210 <OscSimpleSend::UpdateMessage(char const*, unsigned int, char)>:
 800a210:	b570      	push	{r4, r5, r6, lr}
 800a212:	2400      	movs	r4, #0
 800a214:	480a      	ldr	r0, [pc, #40]	; (800a240 <OscSimpleSend::UpdateMessage(char const*, unsigned int, char)+0x30>)
 800a216:	1f16      	subs	r6, r2, #4
 800a218:	1985      	adds	r5, r0, r6
 800a21a:	5584      	strb	r4, [r0, r6]
 800a21c:	706c      	strb	r4, [r5, #1]
 800a21e:	70ac      	strb	r4, [r5, #2]
 800a220:	70ec      	strb	r4, [r5, #3]
 800a222:	4604      	mov	r4, r0
 800a224:	f811 5b01 	ldrb.w	r5, [r1], #1
 800a228:	f800 5b01 	strb.w	r5, [r0], #1
 800a22c:	2d00      	cmp	r5, #0
 800a22e:	d1f9      	bne.n	800a224 <OscSimpleSend::UpdateMessage(char const*, unsigned int, char)+0x14>
 800a230:	212c      	movs	r1, #44	; 0x2c
 800a232:	54a1      	strb	r1, [r4, r2]
 800a234:	4422      	add	r2, r4
 800a236:	7053      	strb	r3, [r2, #1]
 800a238:	7095      	strb	r5, [r2, #2]
 800a23a:	70d5      	strb	r5, [r2, #3]
 800a23c:	bd70      	pop	{r4, r5, r6, pc}
 800a23e:	bf00      	nop
 800a240:	200004f4 	strdcs	r0, [r0], -r4

0800a244 <OscSimpleSend::OscSimpleSend(int, unsigned int, unsigned short, char const*, char const*)>:
 800a244:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800a248:	4605      	mov	r5, r0
 800a24a:	e9dd 9a0a 	ldrd	r9, sl, [sp, #40]	; 0x28
 800a24e:	460e      	mov	r6, r1
 800a250:	4617      	mov	r7, r2
 800a252:	4698      	mov	r8, r3
 800a254:	f1ba 0f00 	cmp.w	sl, #0
 800a258:	d112      	bne.n	800a280 <OscSimpleSend::OscSimpleSend(int, unsigned int, unsigned short, char const*, char const*)+0x3c>
 800a25a:	4648      	mov	r0, r9
 800a25c:	f7ff ffcc 	bl	800a1f8 <osc::string_size(char const*)>
 800a260:	4604      	mov	r4, r0
 800a262:	4602      	mov	r2, r0
 800a264:	4653      	mov	r3, sl
 800a266:	4649      	mov	r1, r9
 800a268:	4628      	mov	r0, r5
 800a26a:	3404      	adds	r4, #4
 800a26c:	f7ff ffd0 	bl	800a210 <OscSimpleSend::UpdateMessage(char const*, unsigned int, char)>
 800a270:	463b      	mov	r3, r7
 800a272:	4905      	ldr	r1, [pc, #20]	; (800a288 <OscSimpleSend::OscSimpleSend(int, unsigned int, unsigned short, char const*, char const*)+0x44>)
 800a274:	f8cd 8000 	str.w	r8, [sp]
 800a278:	b2a2      	uxth	r2, r4
 800a27a:	b2f0      	uxtb	r0, r6
 800a27c:	f004 facc 	bl	800e818 <udp_send>
 800a280:	4628      	mov	r0, r5
 800a282:	b002      	add	sp, #8
 800a284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a288:	200004f4 	strdcs	r0, [r0], -r4

0800a28c <OscSimpleSend::OscSimpleSend(int, unsigned int, unsigned short, char const*, char const*, char const*)>:
 800a28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a290:	b085      	sub	sp, #20
 800a292:	460f      	mov	r7, r1
 800a294:	4699      	mov	r9, r3
 800a296:	e9dd 130e 	ldrd	r1, r3, [sp, #56]	; 0x38
 800a29a:	4606      	mov	r6, r0
 800a29c:	4690      	mov	r8, r2
 800a29e:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 800a2a2:	b35b      	cbz	r3, 800a2fc <OscSimpleSend::OscSimpleSend(int, unsigned int, unsigned short, char const*, char const*, char const*)+0x70>
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	2b73      	cmp	r3, #115	; 0x73
 800a2a8:	d128      	bne.n	800a2fc <OscSimpleSend::OscSimpleSend(int, unsigned int, unsigned short, char const*, char const*, char const*)+0x70>
 800a2aa:	4608      	mov	r0, r1
 800a2ac:	9303      	str	r3, [sp, #12]
 800a2ae:	f7ff ffa3 	bl	800a1f8 <osc::string_size(char const*)>
 800a2b2:	4604      	mov	r4, r0
 800a2b4:	4650      	mov	r0, sl
 800a2b6:	f7ff ff9f 	bl	800a1f8 <osc::string_size(char const*)>
 800a2ba:	4622      	mov	r2, r4
 800a2bc:	1825      	adds	r5, r4, r0
 800a2be:	9b03      	ldr	r3, [sp, #12]
 800a2c0:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a2c2:	4630      	mov	r0, r6
 800a2c4:	f7ff ffa4 	bl	800a210 <OscSimpleSend::UpdateMessage(char const*, unsigned int, char)>
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	4b0e      	ldr	r3, [pc, #56]	; (800a304 <OscSimpleSend::OscSimpleSend(int, unsigned int, unsigned short, char const*, char const*, char const*)+0x78>)
 800a2cc:	3403      	adds	r4, #3
 800a2ce:	1959      	adds	r1, r3, r5
 800a2d0:	555a      	strb	r2, [r3, r5]
 800a2d2:	f105 0b04 	add.w	fp, r5, #4
 800a2d6:	704a      	strb	r2, [r1, #1]
 800a2d8:	708a      	strb	r2, [r1, #2]
 800a2da:	70ca      	strb	r2, [r1, #3]
 800a2dc:	4423      	add	r3, r4
 800a2de:	f81a 2b01 	ldrb.w	r2, [sl], #1
 800a2e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2e6:	2a00      	cmp	r2, #0
 800a2e8:	d1f9      	bne.n	800a2de <OscSimpleSend::OscSimpleSend(int, unsigned int, unsigned short, char const*, char const*, char const*)+0x52>
 800a2ea:	4643      	mov	r3, r8
 800a2ec:	4905      	ldr	r1, [pc, #20]	; (800a304 <OscSimpleSend::OscSimpleSend(int, unsigned int, unsigned short, char const*, char const*, char const*)+0x78>)
 800a2ee:	f8cd 9000 	str.w	r9, [sp]
 800a2f2:	fa1f f28b 	uxth.w	r2, fp
 800a2f6:	b2f8      	uxtb	r0, r7
 800a2f8:	f004 fa8e 	bl	800e818 <udp_send>
 800a2fc:	4630      	mov	r0, r6
 800a2fe:	b005      	add	sp, #20
 800a300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a304:	200004f4 	strdcs	r0, [r0], -r4

0800a308 <OscSimpleSend::OscSimpleSend(int, unsigned int, unsigned short, char const*, char const*, int)>:
 800a308:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800a30c:	4698      	mov	r8, r3
 800a30e:	e9dd 930a 	ldrd	r9, r3, [sp, #40]	; 0x28
 800a312:	4605      	mov	r5, r0
 800a314:	460e      	mov	r6, r1
 800a316:	4617      	mov	r7, r2
 800a318:	b1db      	cbz	r3, 800a352 <OscSimpleSend::OscSimpleSend(int, unsigned int, unsigned short, char const*, char const*, int)+0x4a>
 800a31a:	f893 a000 	ldrb.w	sl, [r3]
 800a31e:	f1ba 0f69 	cmp.w	sl, #105	; 0x69
 800a322:	d116      	bne.n	800a352 <OscSimpleSend::OscSimpleSend(int, unsigned int, unsigned short, char const*, char const*, int)+0x4a>
 800a324:	4648      	mov	r0, r9
 800a326:	f7ff ff67 	bl	800a1f8 <osc::string_size(char const*)>
 800a32a:	4604      	mov	r4, r0
 800a32c:	4602      	mov	r2, r0
 800a32e:	4653      	mov	r3, sl
 800a330:	4649      	mov	r1, r9
 800a332:	4628      	mov	r0, r5
 800a334:	f7ff ff6c 	bl	800a210 <OscSimpleSend::UpdateMessage(char const*, unsigned int, char)>
 800a338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a33a:	4908      	ldr	r1, [pc, #32]	; (800a35c <OscSimpleSend::OscSimpleSend(int, unsigned int, unsigned short, char const*, char const*, int)+0x54>)
 800a33c:	ba1b      	rev	r3, r3
 800a33e:	190a      	adds	r2, r1, r4
 800a340:	3408      	adds	r4, #8
 800a342:	6053      	str	r3, [r2, #4]
 800a344:	b2f0      	uxtb	r0, r6
 800a346:	463b      	mov	r3, r7
 800a348:	f8cd 8000 	str.w	r8, [sp]
 800a34c:	b2a2      	uxth	r2, r4
 800a34e:	f004 fa63 	bl	800e818 <udp_send>
 800a352:	4628      	mov	r0, r5
 800a354:	b002      	add	sp, #8
 800a356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a35a:	bf00      	nop
 800a35c:	200004f4 	strdcs	r0, [r0], -r4

0800a360 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)>:
 800a360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a364:	460e      	mov	r6, r1
 800a366:	4611      	mov	r1, r2
 800a368:	4604      	mov	r4, r0
 800a36a:	4690      	mov	r8, r2
 800a36c:	461d      	mov	r5, r3
 800a36e:	9f06      	ldr	r7, [sp, #24]
 800a370:	f000 fd60 	bl	800ae34 <PixelConfiguration::Validate(unsigned int&)>
 800a374:	2e01      	cmp	r6, #1
 800a376:	d009      	beq.n	800a38c <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x2c>
 800a378:	7ce2      	ldrb	r2, [r4, #19]
 800a37a:	b93a      	cbnz	r2, 800a38c <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x2c>
 800a37c:	2e04      	cmp	r6, #4
 800a37e:	d13c      	bne.n	800a3fa <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x9a>
 800a380:	2303      	movs	r3, #3
 800a382:	6023      	str	r3, [r4, #0]
 800a384:	4641      	mov	r1, r8
 800a386:	4620      	mov	r0, r4
 800a388:	f000 fd54 	bl	800ae34 <PixelConfiguration::Validate(unsigned int&)>
 800a38c:	6823      	ldr	r3, [r4, #0]
 800a38e:	2b07      	cmp	r3, #7
 800a390:	bf15      	itete	ne
 800a392:	f44f 72aa 	movne.w	r2, #340	; 0x154
 800a396:	f44f 7280 	moveq.w	r2, #256	; 0x100
 800a39a:	21aa      	movne	r1, #170	; 0xaa
 800a39c:	2180      	moveq	r1, #128	; 0x80
 800a39e:	bf14      	ite	ne
 800a3a0:	f44f 73ff 	movne.w	r3, #510	; 0x1fe
 800a3a4:	f44f 73c0 	moveq.w	r3, #384	; 0x180
 800a3a8:	e9c5 1200 	strd	r1, r2, [r5]
 800a3ac:	69a2      	ldr	r2, [r4, #24]
 800a3ae:	60ab      	str	r3, [r5, #8]
 800a3b0:	6863      	ldr	r3, [r4, #4]
 800a3b2:	b10a      	cbz	r2, 800a3b8 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x58>
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d900      	bls.n	800a3ba <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x5a>
 800a3b8:	61a3      	str	r3, [r4, #24]
 800a3ba:	69a2      	ldr	r2, [r4, #24]
 800a3bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3c0:	603b      	str	r3, [r7, #0]
 800a3c2:	6963      	ldr	r3, [r4, #20]
 800a3c4:	42b3      	cmp	r3, r6
 800a3c6:	bf94      	ite	ls
 800a3c8:	6163      	strls	r3, [r4, #20]
 800a3ca:	6166      	strhi	r6, [r4, #20]
 800a3cc:	682b      	ldr	r3, [r5, #0]
 800a3ce:	683a      	ldr	r2, [r7, #0]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	fbb2 f2f3 	udiv	r2, r2, r3
 800a3d6:	9b07      	ldr	r3, [sp, #28]
 800a3d8:	3201      	adds	r2, #1
 800a3da:	601a      	str	r2, [r3, #0]
 800a3dc:	2e01      	cmp	r6, #1
 800a3de:	bf01      	itttt	eq
 800a3e0:	682b      	ldreq	r3, [r5, #0]
 800a3e2:	683a      	ldreq	r2, [r7, #0]
 800a3e4:	3301      	addeq	r3, #1
 800a3e6:	fbb2 f2f3 	udiveq	r2, r2, r3
 800a3ea:	bf1e      	ittt	ne
 800a3ec:	6963      	ldrne	r3, [r4, #20]
 800a3ee:	435a      	mulne	r2, r3
 800a3f0:	f102 32ff 	addne.w	r2, r2, #4294967295	; 0xffffffff
 800a3f4:	60ea      	str	r2, [r5, #12]
 800a3f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3fa:	6823      	ldr	r3, [r4, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d0c1      	beq.n	800a384 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x24>
 800a400:	3b0b      	subs	r3, #11
 800a402:	2b01      	cmp	r3, #1
 800a404:	bf88      	it	hi
 800a406:	6022      	strhi	r2, [r4, #0]
 800a408:	e7bc      	b.n	800a384 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x24>

0800a40a <PixelDmxConfiguration::Dump()>:
 800a40a:	4770      	bx	lr

0800a40c <WS28xxDmx::GetDmxStartAddress()>:
 800a40c:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
 800a40e:	4770      	bx	lr

0800a410 <WS28xxDmx::GetDmxFootprint()>:
 800a410:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 800a412:	4770      	bx	lr

0800a414 <WS28xxDmx::~WS28xxDmx()>:
 800a414:	b538      	push	{r3, r4, r5, lr}
 800a416:	4b06      	ldr	r3, [pc, #24]	; (800a430 <WS28xxDmx::~WS28xxDmx()+0x1c>)
 800a418:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800a41a:	4604      	mov	r4, r0
 800a41c:	6003      	str	r3, [r0, #0]
 800a41e:	b12d      	cbz	r5, 800a42c <WS28xxDmx::~WS28xxDmx()+0x18>
 800a420:	4628      	mov	r0, r5
 800a422:	f001 feef 	bl	800c204 <WS28xx::~WS28xx()>
 800a426:	4628      	mov	r0, r5
 800a428:	f006 fd48 	bl	8010ebc <operator delete(void*)>
 800a42c:	4620      	mov	r0, r4
 800a42e:	bd38      	pop	{r3, r4, r5, pc}
 800a430:	080134f0 	stmdaeq	r1, {r4, r5, r6, r7, sl, ip, sp}

0800a434 <WS28xxDmx::~WS28xxDmx()>:
 800a434:	b510      	push	{r4, lr}
 800a436:	4604      	mov	r4, r0
 800a438:	f7ff ffec 	bl	800a414 <WS28xxDmx::~WS28xxDmx()>
 800a43c:	4620      	mov	r0, r4
 800a43e:	f006 fd3d 	bl	8010ebc <operator delete(void*)>
 800a442:	4620      	mov	r0, r4
 800a444:	bd10      	pop	{r4, pc}

0800a446 <WS28xxDmx::Blackout(bool)>:
 800a446:	b538      	push	{r3, r4, r5, lr}
 800a448:	4605      	mov	r5, r0
 800a44a:	460c      	mov	r4, r1
 800a44c:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
 800a450:	f007 ff32 	bl	80122b8 <gd32_spi_dma_tx_is_active()>
 800a454:	2800      	cmp	r0, #0
 800a456:	d1fb      	bne.n	800a450 <WS28xxDmx::Blackout(bool)+0xa>
 800a458:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800a45a:	b11c      	cbz	r4, 800a464 <WS28xxDmx::Blackout(bool)+0x1e>
 800a45c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a460:	f001 bf4a 	b.w	800c2f8 <WS28xx::Blackout()>
 800a464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a468:	f001 bf2a 	b.w	800c2c0 <WS28xx::Update()>

0800a46c <WS28xxDmx::Start(unsigned int)>:
 800a46c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a470:	b93b      	cbnz	r3, 800a482 <WS28xxDmx::Start(unsigned int)+0x16>
 800a472:	2301      	movs	r3, #1
 800a474:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800a478:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800a47a:	b110      	cbz	r0, 800a482 <WS28xxDmx::Start(unsigned int)+0x16>
 800a47c:	6803      	ldr	r3, [r0, #0]
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	4718      	bx	r3
 800a482:	4770      	bx	lr

0800a484 <WS28xxDmx::SetDmxStartAddress(unsigned short)>:
 800a484:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
 800a486:	b508      	push	{r3, lr}
 800a488:	428a      	cmp	r2, r1
 800a48a:	d101      	bne.n	800a490 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xc>
 800a48c:	2001      	movs	r0, #1
 800a48e:	bd08      	pop	{r3, pc}
 800a490:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 800a492:	440a      	add	r2, r1
 800a494:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800a498:	dc0b      	bgt.n	800a4b2 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x2e>
 800a49a:	1e4a      	subs	r2, r1, #1
 800a49c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800a4a0:	d207      	bcs.n	800a4b2 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x2e>
 800a4a2:	85c1      	strh	r1, [r0, #46]	; 0x2e
 800a4a4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800a4a6:	2800      	cmp	r0, #0
 800a4a8:	d0f0      	beq.n	800a48c <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x8>
 800a4aa:	6803      	ldr	r3, [r0, #0]
 800a4ac:	69db      	ldr	r3, [r3, #28]
 800a4ae:	4798      	blx	r3
 800a4b0:	e7ec      	b.n	800a48c <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x8>
 800a4b2:	2000      	movs	r0, #0
 800a4b4:	e7eb      	b.n	800a48e <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xa>

0800a4b6 <WS28xxDmx::Stop(unsigned int)>:
 800a4b6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a4ba:	b510      	push	{r4, lr}
 800a4bc:	4604      	mov	r4, r0
 800a4be:	b16b      	cbz	r3, 800a4dc <WS28xxDmx::Stop(unsigned int)+0x26>
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800a4c6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800a4c8:	b108      	cbz	r0, 800a4ce <WS28xxDmx::Stop(unsigned int)+0x18>
 800a4ca:	f001 ff15 	bl	800c2f8 <WS28xx::Blackout()>
 800a4ce:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a4d0:	b120      	cbz	r0, 800a4dc <WS28xxDmx::Stop(unsigned int)+0x26>
 800a4d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4d6:	6803      	ldr	r3, [r0, #0]
 800a4d8:	68db      	ldr	r3, [r3, #12]
 800a4da:	4718      	bx	r3
 800a4dc:	bd10      	pop	{r4, pc}

0800a4de <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 800a4de:	4603      	mov	r3, r0
 800a4e0:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 800a4e2:	4288      	cmp	r0, r1
 800a4e4:	f04f 0000 	mov.w	r0, #0
 800a4e8:	d30f      	bcc.n	800a50a <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x2c>
 800a4ea:	7090      	strb	r0, [r2, #2]
 800a4ec:	6a1b      	ldr	r3, [r3, #32]
 800a4ee:	fbb1 f0f3 	udiv	r0, r1, r3
 800a4f2:	fb03 1110 	mls	r1, r3, r0, r1
 800a4f6:	2903      	cmp	r1, #3
 800a4f8:	d80e      	bhi.n	800a518 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x3a>
 800a4fa:	e8df f001 	tbb	[pc, r1]
 800a4fe:	0d0a0702 	stceq	7, cr0, [sl, #-8]
 800a502:	f240 2305 	movw	r3, #517	; 0x205
 800a506:	2001      	movs	r0, #1
 800a508:	8013      	strh	r3, [r2, #0]
 800a50a:	4770      	bx	lr
 800a50c:	f240 2306 	movw	r3, #518	; 0x206
 800a510:	e7f9      	b.n	800a506 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>
 800a512:	f240 2307 	movw	r3, #519	; 0x207
 800a516:	e7f6      	b.n	800a506 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>
 800a518:	f240 2312 	movw	r3, #530	; 0x212
 800a51c:	e7f3      	b.n	800a506 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>

0800a51e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)>:
 800a51e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a522:	b085      	sub	sp, #20
 800a524:	4606      	mov	r6, r0
 800a526:	4691      	mov	r9, r2
 800a528:	4698      	mov	r8, r3
 800a52a:	9103      	str	r1, [sp, #12]
 800a52c:	f007 fec4 	bl	80122b8 <gd32_spi_dma_tx_is_active()>
 800a530:	2800      	cmp	r0, #0
 800a532:	d172      	bne.n	800a61a <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xfc>
 800a534:	9b03      	ldr	r3, [sp, #12]
 800a536:	6972      	ldr	r2, [r6, #20]
 800a538:	f003 0103 	and.w	r1, r3, #3
 800a53c:	6a33      	ldr	r3, [r6, #32]
 800a53e:	2902      	cmp	r1, #2
 800a540:	fbb8 f7f3 	udiv	r7, r8, r3
 800a544:	d01f      	beq.n	800a586 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x68>
 800a546:	2903      	cmp	r1, #3
 800a548:	d024      	beq.n	800a594 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x76>
 800a54a:	2901      	cmp	r1, #1
 800a54c:	6875      	ldr	r5, [r6, #4]
 800a54e:	d01b      	beq.n	800a588 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x6a>
 800a550:	4297      	cmp	r7, r2
 800a552:	bf28      	it	cs
 800a554:	4617      	movcs	r7, r2
 800a556:	4295      	cmp	r5, r2
 800a558:	d91e      	bls.n	800a598 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x7a>
 800a55a:	4605      	mov	r5, r0
 800a55c:	8df4      	ldrh	r4, [r6, #46]	; 0x2e
 800a55e:	3c01      	subs	r4, #1
 800a560:	2b03      	cmp	r3, #3
 800a562:	444c      	add	r4, r9
 800a564:	d144      	bne.n	800a5f0 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xd2>
 800a566:	42bd      	cmp	r5, r7
 800a568:	d325      	bcc.n	800a5b6 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x98>
 800a56a:	6933      	ldr	r3, [r6, #16]
 800a56c:	9a03      	ldr	r2, [sp, #12]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d153      	bne.n	800a61a <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xfc>
 800a572:	f896 3041 	ldrb.w	r3, [r6, #65]	; 0x41
 800a576:	2b00      	cmp	r3, #0
 800a578:	d14f      	bne.n	800a61a <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xfc>
 800a57a:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800a57c:	b005      	add	sp, #20
 800a57e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a582:	f001 be9d 	b.w	800c2c0 <WS28xx::Update()>
 800a586:	68b5      	ldr	r5, [r6, #8]
 800a588:	442f      	add	r7, r5
 800a58a:	4297      	cmp	r7, r2
 800a58c:	bf28      	it	cs
 800a58e:	4617      	movcs	r7, r2
 800a590:	4604      	mov	r4, r0
 800a592:	e7e5      	b.n	800a560 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x42>
 800a594:	68f5      	ldr	r5, [r6, #12]
 800a596:	e7f7      	b.n	800a588 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x6a>
 800a598:	4605      	mov	r5, r0
 800a59a:	4604      	mov	r4, r0
 800a59c:	e7e0      	b.n	800a560 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x42>
 800a59e:	78a2      	ldrb	r2, [r4, #2]
 800a5a0:	7863      	ldrb	r3, [r4, #1]
 800a5a2:	9200      	str	r2, [sp, #0]
 800a5a4:	eb0b 010a 	add.w	r1, fp, sl
 800a5a8:	7822      	ldrb	r2, [r4, #0]
 800a5aa:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800a5ac:	f001 f848 	bl	800b640 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 800a5b0:	f10a 0a01 	add.w	sl, sl, #1
 800a5b4:	e00a      	b.n	800a5cc <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xae>
 800a5b6:	eba4 0309 	sub.w	r3, r4, r9
 800a5ba:	4598      	cmp	r8, r3
 800a5bc:	d9d5      	bls.n	800a56a <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x4c>
 800a5be:	f04f 0a00 	mov.w	sl, #0
 800a5c2:	69b3      	ldr	r3, [r6, #24]
 800a5c4:	f894 f000 	pld	[r4]
 800a5c8:	fb03 fb05 	mul.w	fp, r3, r5
 800a5cc:	69b3      	ldr	r3, [r6, #24]
 800a5ce:	459a      	cmp	sl, r3
 800a5d0:	d3e5      	bcc.n	800a59e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x80>
 800a5d2:	3501      	adds	r5, #1
 800a5d4:	3403      	adds	r4, #3
 800a5d6:	e7c6      	b.n	800a566 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x48>
 800a5d8:	f04f 0a00 	mov.w	sl, #0
 800a5dc:	69b3      	ldr	r3, [r6, #24]
 800a5de:	f894 f000 	pld	[r4]
 800a5e2:	fb03 fb05 	mul.w	fp, r3, r5
 800a5e6:	69b3      	ldr	r3, [r6, #24]
 800a5e8:	459a      	cmp	sl, r3
 800a5ea:	d308      	bcc.n	800a5fe <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xe0>
 800a5ec:	3501      	adds	r5, #1
 800a5ee:	3404      	adds	r4, #4
 800a5f0:	42af      	cmp	r7, r5
 800a5f2:	d9ba      	bls.n	800a56a <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x4c>
 800a5f4:	eba4 0309 	sub.w	r3, r4, r9
 800a5f8:	4598      	cmp	r8, r3
 800a5fa:	d8ed      	bhi.n	800a5d8 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xba>
 800a5fc:	e7b5      	b.n	800a56a <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x4c>
 800a5fe:	78e2      	ldrb	r2, [r4, #3]
 800a600:	7863      	ldrb	r3, [r4, #1]
 800a602:	9201      	str	r2, [sp, #4]
 800a604:	78a2      	ldrb	r2, [r4, #2]
 800a606:	eb0b 010a 	add.w	r1, fp, sl
 800a60a:	9200      	str	r2, [sp, #0]
 800a60c:	7822      	ldrb	r2, [r4, #0]
 800a60e:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800a610:	f001 fce2 	bl	800bfd8 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 800a614:	f10a 0a01 	add.w	sl, sl, #1
 800a618:	e7e5      	b.n	800a5e6 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xc8>
 800a61a:	b005      	add	sp, #20
 800a61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a620 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>:
 800a620:	22ff      	movs	r2, #255	; 0xff
 800a622:	4b1d      	ldr	r3, [pc, #116]	; (800a698 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x78>)
 800a624:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a626:	6003      	str	r3, [r0, #0]
 800a628:	2300      	movs	r3, #0
 800a62a:	460d      	mov	r5, r1
 800a62c:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 800a630:	2101      	movs	r1, #1
 800a632:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 800a636:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
 800a63a:	8483      	strh	r3, [r0, #36]	; 0x24
 800a63c:	6283      	str	r3, [r0, #40]	; 0x28
 800a63e:	63c3      	str	r3, [r0, #60]	; 0x3c
 800a640:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 800a644:	4b15      	ldr	r3, [pc, #84]	; (800a69c <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x7c>)
 800a646:	85c1      	strh	r1, [r0, #46]	; 0x2e
 800a648:	6018      	str	r0, [r3, #0]
 800a64a:	f100 031c 	add.w	r3, r0, #28
 800a64e:	8602      	strh	r2, [r0, #48]	; 0x30
 800a650:	9301      	str	r3, [sp, #4]
 800a652:	f100 0314 	add.w	r3, r0, #20
 800a656:	4604      	mov	r4, r0
 800a658:	f100 0220 	add.w	r2, r0, #32
 800a65c:	9300      	str	r3, [sp, #0]
 800a65e:	1d03      	adds	r3, r0, #4
 800a660:	4628      	mov	r0, r5
 800a662:	f7ff fe7d 	bl	800a360 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)>
 800a666:	201c      	movs	r0, #28
 800a668:	f006 fc2c 	bl	8010ec4 <operator new(unsigned int)>
 800a66c:	4606      	mov	r6, r0
 800a66e:	4629      	mov	r1, r5
 800a670:	f001 fde6 	bl	800c240 <WS28xx::WS28xx(PixelConfiguration&)>
 800a674:	4630      	mov	r0, r6
 800a676:	6366      	str	r6, [r4, #52]	; 0x34
 800a678:	f001 fe3e 	bl	800c2f8 <WS28xx::Blackout()>
 800a67c:	69ab      	ldr	r3, [r5, #24]
 800a67e:	6a22      	ldr	r2, [r4, #32]
 800a680:	61a3      	str	r3, [r4, #24]
 800a682:	8bab      	ldrh	r3, [r5, #28]
 800a684:	4628      	mov	r0, r5
 800a686:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800a688:	6963      	ldr	r3, [r4, #20]
 800a68a:	4353      	muls	r3, r2
 800a68c:	8623      	strh	r3, [r4, #48]	; 0x30
 800a68e:	f7ff febc 	bl	800a40a <PixelDmxConfiguration::Dump()>
 800a692:	4620      	mov	r0, r4
 800a694:	b002      	add	sp, #8
 800a696:	bd70      	pop	{r4, r5, r6, pc}
 800a698:	080134f0 	stmdaeq	r1, {r4, r5, r6, r7, sl, ip, sp}
 800a69c:	200006f4 	strdcs	r0, [r0], -r4

0800a6a0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 800a6a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a6a2:	88c6      	ldrh	r6, [r0, #6]
 800a6a4:	8885      	ldrh	r5, [r0, #4]
 800a6a6:	42ae      	cmp	r6, r5
 800a6a8:	d216      	bcs.n	800a6d8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 800a6aa:	4604      	mov	r4, r0
 800a6ac:	6800      	ldr	r0, [r0, #0]
 800a6ae:	1bad      	subs	r5, r5, r6
 800a6b0:	4430      	add	r0, r6
 800a6b2:	7a26      	ldrb	r6, [r4, #8]
 800a6b4:	b923      	cbnz	r3, 800a6c0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 800a6b6:	b926      	cbnz	r6, 800a6c2 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 800a6b8:	9200      	str	r2, [sp, #0]
 800a6ba:	460b      	mov	r3, r1
 800a6bc:	4a09      	ldr	r2, [pc, #36]	; (800a6e4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 800a6be:	e003      	b.n	800a6c8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800a6c0:	b166      	cbz	r6, 800a6dc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	9200      	str	r2, [sp, #0]
 800a6c6:	4a08      	ldr	r2, [pc, #32]	; (800a6e8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 800a6c8:	4629      	mov	r1, r5
 800a6ca:	f7fe fdf7 	bl	80092bc <snprintf>
 800a6ce:	4285      	cmp	r5, r0
 800a6d0:	bfa2      	ittt	ge
 800a6d2:	88e3      	ldrhge	r3, [r4, #6]
 800a6d4:	181b      	addge	r3, r3, r0
 800a6d6:	80e3      	strhge	r3, [r4, #6]
 800a6d8:	b002      	add	sp, #8
 800a6da:	bd70      	pop	{r4, r5, r6, pc}
 800a6dc:	9200      	str	r2, [sp, #0]
 800a6de:	460b      	mov	r3, r1
 800a6e0:	4a02      	ldr	r2, [pc, #8]	; (800a6ec <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 800a6e2:	e7f1      	b.n	800a6c8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800a6e4:	08013475 	stmdaeq	r1, {r0, r2, r4, r5, r6, sl, ip, sp}
 800a6e8:	0801346c 	stmdaeq	r1, {r2, r3, r5, r6, sl, ip, sp}
 800a6ec:	08013476 	stmdaeq	r1, {r1, r2, r4, r5, r6, sl, ip, sp}

0800a6f0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>:
 800a6f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a6f2:	88c6      	ldrh	r6, [r0, #6]
 800a6f4:	8885      	ldrh	r5, [r0, #4]
 800a6f6:	42ae      	cmp	r6, r5
 800a6f8:	d216      	bcs.n	800a728 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x38>
 800a6fa:	4604      	mov	r4, r0
 800a6fc:	6800      	ldr	r0, [r0, #0]
 800a6fe:	1bad      	subs	r5, r5, r6
 800a700:	4430      	add	r0, r6
 800a702:	7a26      	ldrb	r6, [r4, #8]
 800a704:	b923      	cbnz	r3, 800a710 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x20>
 800a706:	b926      	cbnz	r6, 800a712 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x22>
 800a708:	9200      	str	r2, [sp, #0]
 800a70a:	460b      	mov	r3, r1
 800a70c:	4a09      	ldr	r2, [pc, #36]	; (800a734 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x44>)
 800a70e:	e003      	b.n	800a718 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800a710:	b166      	cbz	r6, 800a72c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x3c>
 800a712:	460b      	mov	r3, r1
 800a714:	9200      	str	r2, [sp, #0]
 800a716:	4a08      	ldr	r2, [pc, #32]	; (800a738 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x48>)
 800a718:	4629      	mov	r1, r5
 800a71a:	f7fe fdcf 	bl	80092bc <snprintf>
 800a71e:	4285      	cmp	r5, r0
 800a720:	bfa2      	ittt	ge
 800a722:	88e3      	ldrhge	r3, [r4, #6]
 800a724:	181b      	addge	r3, r3, r0
 800a726:	80e3      	strhge	r3, [r4, #6]
 800a728:	b002      	add	sp, #8
 800a72a:	bd70      	pop	{r4, r5, r6, pc}
 800a72c:	9200      	str	r2, [sp, #0]
 800a72e:	460b      	mov	r3, r1
 800a730:	4a02      	ldr	r2, [pc, #8]	; (800a73c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x4c>)
 800a732:	e7f1      	b.n	800a718 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800a734:	08013475 	stmdaeq	r1, {r0, r2, r4, r5, r6, sl, ip, sp}
 800a738:	0801346c 	stmdaeq	r1, {r2, r3, r5, r6, sl, ip, sp}
 800a73c:	08013476 	stmdaeq	r1, {r1, r2, r4, r5, r6, sl, ip, sp}

0800a740 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800a740:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a742:	88c6      	ldrh	r6, [r0, #6]
 800a744:	8885      	ldrh	r5, [r0, #4]
 800a746:	42ae      	cmp	r6, r5
 800a748:	d216      	bcs.n	800a778 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800a74a:	4604      	mov	r4, r0
 800a74c:	6800      	ldr	r0, [r0, #0]
 800a74e:	1bad      	subs	r5, r5, r6
 800a750:	4430      	add	r0, r6
 800a752:	7a26      	ldrb	r6, [r4, #8]
 800a754:	b923      	cbnz	r3, 800a760 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800a756:	b926      	cbnz	r6, 800a762 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800a758:	9200      	str	r2, [sp, #0]
 800a75a:	460b      	mov	r3, r1
 800a75c:	4a09      	ldr	r2, [pc, #36]	; (800a784 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800a75e:	e003      	b.n	800a768 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800a760:	b166      	cbz	r6, 800a77c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800a762:	460b      	mov	r3, r1
 800a764:	9200      	str	r2, [sp, #0]
 800a766:	4a08      	ldr	r2, [pc, #32]	; (800a788 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800a768:	4629      	mov	r1, r5
 800a76a:	f7fe fda7 	bl	80092bc <snprintf>
 800a76e:	4285      	cmp	r5, r0
 800a770:	bfa2      	ittt	ge
 800a772:	88e3      	ldrhge	r3, [r4, #6]
 800a774:	181b      	addge	r3, r3, r0
 800a776:	80e3      	strhge	r3, [r4, #6]
 800a778:	b002      	add	sp, #8
 800a77a:	bd70      	pop	{r4, r5, r6, pc}
 800a77c:	9200      	str	r2, [sp, #0]
 800a77e:	460b      	mov	r3, r1
 800a780:	4a02      	ldr	r2, [pc, #8]	; (800a78c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800a782:	e7f1      	b.n	800a768 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800a784:	08013488 	stmdaeq	r1, {r3, r7, sl, ip, sp}
 800a788:	0801347d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, sl, ip, sp}
 800a78c:	08013489 	stmdaeq	r1, {r0, r3, r7, sl, ip, sp}

0800a790 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>:
 800a790:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a794:	4699      	mov	r9, r3
 800a796:	8885      	ldrh	r5, [r0, #4]
 800a798:	88c3      	ldrh	r3, [r0, #6]
 800a79a:	4604      	mov	r4, r0
 800a79c:	42ab      	cmp	r3, r5
 800a79e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800a7a2:	d227      	bcs.n	800a7f4 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x64>
 800a7a4:	6826      	ldr	r6, [r4, #0]
 800a7a6:	4610      	mov	r0, r2
 800a7a8:	460f      	mov	r7, r1
 800a7aa:	f894 a008 	ldrb.w	sl, [r4, #8]
 800a7ae:	441e      	add	r6, r3
 800a7b0:	1aed      	subs	r5, r5, r3
 800a7b2:	f7fd fd0f 	bl	80081d4 <__aeabi_f2d>
 800a7b6:	f1b9 0f00 	cmp.w	r9, #0
 800a7ba:	d109      	bne.n	800a7d0 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x40>
 800a7bc:	f1ba 0f00 	cmp.w	sl, #0
 800a7c0:	d109      	bne.n	800a7d6 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x46>
 800a7c2:	463b      	mov	r3, r7
 800a7c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7c8:	4a0f      	ldr	r2, [pc, #60]	; (800a808 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x78>)
 800a7ca:	f8cd 8000 	str.w	r8, [sp]
 800a7ce:	e008      	b.n	800a7e2 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x52>
 800a7d0:	f1ba 0f00 	cmp.w	sl, #0
 800a7d4:	d011      	beq.n	800a7fa <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x6a>
 800a7d6:	463b      	mov	r3, r7
 800a7d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7dc:	4a0b      	ldr	r2, [pc, #44]	; (800a80c <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x7c>)
 800a7de:	f8cd 8000 	str.w	r8, [sp]
 800a7e2:	4629      	mov	r1, r5
 800a7e4:	4630      	mov	r0, r6
 800a7e6:	f7fe fd69 	bl	80092bc <snprintf>
 800a7ea:	4285      	cmp	r5, r0
 800a7ec:	bfa2      	ittt	ge
 800a7ee:	88e3      	ldrhge	r3, [r4, #6]
 800a7f0:	181b      	addge	r3, r3, r0
 800a7f2:	80e3      	strhge	r3, [r4, #6]
 800a7f4:	b004      	add	sp, #16
 800a7f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7fa:	463b      	mov	r3, r7
 800a7fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a800:	4a03      	ldr	r2, [pc, #12]	; (800a810 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x80>)
 800a802:	f8cd 8000 	str.w	r8, [sp]
 800a806:	e7ec      	b.n	800a7e2 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x52>
 800a808:	08013527 	stmdaeq	r1, {r0, r1, r2, r5, r8, sl, ip, sp}
 800a80c:	0801351c 	stmdaeq	r1, {r2, r3, r4, r8, sl, ip, sp}
 800a810:	08013528 	stmdaeq	r1, {r3, r5, r8, sl, ip, sp}

0800a814 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>:
 800a814:	2200      	movs	r2, #0
 800a816:	6001      	str	r1, [r0, #0]
 800a818:	4910      	ldr	r1, [pc, #64]	; (800a85c <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x48>)
 800a81a:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 800a81e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a822:	f44f 6110 	mov.w	r1, #2304	; 0x900
 800a826:	81c1      	strh	r1, [r0, #14]
 800a828:	213d      	movs	r1, #61	; 0x3d
 800a82a:	8201      	strh	r1, [r0, #16]
 800a82c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a830:	8241      	strh	r1, [r0, #18]
 800a832:	2101      	movs	r1, #1
 800a834:	7541      	strb	r1, [r0, #21]
 800a836:	2106      	movs	r1, #6
 800a838:	75c1      	strb	r1, [r0, #23]
 800a83a:	4909      	ldr	r1, [pc, #36]	; (800a860 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x4c>)
 800a83c:	7302      	strb	r2, [r0, #12]
 800a83e:	e9c0 c106 	strd	ip, r1, [r0, #24]
 800a842:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
 800a846:	6201      	str	r1, [r0, #32]
 800a848:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
 800a84c:	6241      	str	r1, [r0, #36]	; 0x24
 800a84e:	211d      	movs	r1, #29
 800a850:	7582      	strb	r2, [r0, #22]
 800a852:	8501      	strh	r1, [r0, #40]	; 0x28
 800a854:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	0100aa03 	tsteq	r0, r3, lsl #20
 800a860:	00090005 	andeq	r0, r9, r5

0800a864 <WS28xxDmxParams::Load()>:
 800a864:	b508      	push	{r3, lr}
 800a866:	2300      	movs	r3, #0
 800a868:	4601      	mov	r1, r0
 800a86a:	6043      	str	r3, [r0, #4]
 800a86c:	6800      	ldr	r0, [r0, #0]
 800a86e:	b120      	cbz	r0, 800a87a <WS28xxDmxParams::Load()+0x16>
 800a870:	6803      	ldr	r3, [r0, #0]
 800a872:	3104      	adds	r1, #4
 800a874:	68db      	ldr	r3, [r3, #12]
 800a876:	4798      	blx	r3
 800a878:	2001      	movs	r0, #1
 800a87a:	bd08      	pop	{r3, pc}

0800a87c <WS28xxDmxParams::Load(char const*, unsigned int)>:
 800a87c:	6803      	ldr	r3, [r0, #0]
 800a87e:	b1d3      	cbz	r3, 800a8b6 <WS28xxDmxParams::Load(char const*, unsigned int)+0x3a>
 800a880:	2300      	movs	r3, #0
 800a882:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a884:	460d      	mov	r5, r1
 800a886:	4616      	mov	r6, r2
 800a888:	4604      	mov	r4, r0
 800a88a:	6043      	str	r3, [r0, #4]
 800a88c:	4602      	mov	r2, r0
 800a88e:	490a      	ldr	r1, [pc, #40]	; (800a8b8 <WS28xxDmxParams::Load(char const*, unsigned int)+0x3c>)
 800a890:	4668      	mov	r0, sp
 800a892:	f005 fd7f 	bl	8010394 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800a896:	4632      	mov	r2, r6
 800a898:	4629      	mov	r1, r5
 800a89a:	4668      	mov	r0, sp
 800a89c:	f005 fd7e 	bl	801039c <ReadConfigFile::Read(char const*, unsigned int)>
 800a8a0:	4621      	mov	r1, r4
 800a8a2:	f851 0b04 	ldr.w	r0, [r1], #4
 800a8a6:	6803      	ldr	r3, [r0, #0]
 800a8a8:	689b      	ldr	r3, [r3, #8]
 800a8aa:	4798      	blx	r3
 800a8ac:	4668      	mov	r0, sp
 800a8ae:	f005 fd74 	bl	801039a <ReadConfigFile::~ReadConfigFile()>
 800a8b2:	b002      	add	sp, #8
 800a8b4:	bd70      	pop	{r4, r5, r6, pc}
 800a8b6:	4770      	bx	lr
 800a8b8:	0800ab05 	stmdaeq	r0, {r0, r2, r8, r9, fp, sp, pc}

0800a8bc <WS28xxDmxParams::callbackFunction(char const*)>:
 800a8bc:	b530      	push	{r4, r5, lr}
 800a8be:	2308      	movs	r3, #8
 800a8c0:	460d      	mov	r5, r1
 800a8c2:	b089      	sub	sp, #36	; 0x24
 800a8c4:	4604      	mov	r4, r0
 800a8c6:	9302      	str	r3, [sp, #8]
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	4982      	ldr	r1, [pc, #520]	; (800aad4 <WS28xxDmxParams::callbackFunction(char const*)+0x218>)
 800a8cc:	446b      	add	r3, sp
 800a8ce:	aa04      	add	r2, sp, #16
 800a8d0:	f005 fd98 	bl	8010404 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800a8d4:	b9a0      	cbnz	r0, 800a900 <WS28xxDmxParams::callbackFunction(char const*)+0x44>
 800a8d6:	9b02      	ldr	r3, [sp, #8]
 800a8d8:	3320      	adds	r3, #32
 800a8da:	446b      	add	r3, sp
 800a8dc:	f803 0c10 	strb.w	r0, [r3, #-16]
 800a8e0:	a804      	add	r0, sp, #16
 800a8e2:	f000 fd99 	bl	800b418 <PixelType::GetType(char const*)>
 800a8e6:	280e      	cmp	r0, #14
 800a8e8:	bf08      	it	eq
 800a8ea:	2203      	moveq	r2, #3
 800a8ec:	6863      	ldr	r3, [r4, #4]
 800a8ee:	bf19      	ittee	ne
 800a8f0:	7220      	strbne	r0, [r4, #8]
 800a8f2:	f043 0301 	orrne.w	r3, r3, #1
 800a8f6:	7222      	strbeq	r2, [r4, #8]
 800a8f8:	f023 0301 	biceq.w	r3, r3, #1
 800a8fc:	6063      	str	r3, [r4, #4]
 800a8fe:	e033      	b.n	800a968 <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800a900:	4628      	mov	r0, r5
 800a902:	4975      	ldr	r1, [pc, #468]	; (800aad8 <WS28xxDmxParams::callbackFunction(char const*)+0x21c>)
 800a904:	f10d 0202 	add.w	r2, sp, #2
 800a908:	f005 fe39 	bl	801057e <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800a90c:	b990      	cbnz	r0, 800a934 <WS28xxDmxParams::callbackFunction(char const*)+0x78>
 800a90e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800a912:	6863      	ldr	r3, [r4, #4]
 800a914:	1e51      	subs	r1, r2, #1
 800a916:	f5b1 7f2a 	cmp.w	r1, #680	; 0x2a8
 800a91a:	bf2d      	iteet	cs
 800a91c:	f06f 0255 	mvncs.w	r2, #85	; 0x55
 800a920:	f8a4 2009 	strhcc.w	r2, [r4, #9]
 800a924:	f043 0302 	orrcc.w	r3, r3, #2
 800a928:	7262      	strbcs	r2, [r4, #9]
 800a92a:	bf24      	itt	cs
 800a92c:	72a0      	strbcs	r0, [r4, #10]
 800a92e:	f023 0302 	biccs.w	r3, r3, #2
 800a932:	e7e3      	b.n	800a8fc <WS28xxDmxParams::callbackFunction(char const*)+0x40>
 800a934:	2303      	movs	r3, #3
 800a936:	4628      	mov	r0, r5
 800a938:	9302      	str	r3, [sp, #8]
 800a93a:	4968      	ldr	r1, [pc, #416]	; (800aadc <WS28xxDmxParams::callbackFunction(char const*)+0x220>)
 800a93c:	ab02      	add	r3, sp, #8
 800a93e:	aa04      	add	r2, sp, #16
 800a940:	f005 fd60 	bl	8010404 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800a944:	b990      	cbnz	r0, 800a96c <WS28xxDmxParams::callbackFunction(char const*)+0xb0>
 800a946:	9b02      	ldr	r3, [sp, #8]
 800a948:	3320      	adds	r3, #32
 800a94a:	446b      	add	r3, sp
 800a94c:	f803 0c10 	strb.w	r0, [r3, #-16]
 800a950:	a804      	add	r0, sp, #16
 800a952:	f000 fd85 	bl	800b460 <PixelType::GetMap(char const*)>
 800a956:	6863      	ldr	r3, [r4, #4]
 800a958:	2806      	cmp	r0, #6
 800a95a:	bf14      	ite	ne
 800a95c:	f443 7300 	orrne.w	r3, r3, #512	; 0x200
 800a960:	f423 7300 	biceq.w	r3, r3, #512	; 0x200
 800a964:	6063      	str	r3, [r4, #4]
 800a966:	75e0      	strb	r0, [r4, #23]
 800a968:	b009      	add	sp, #36	; 0x24
 800a96a:	bd30      	pop	{r4, r5, pc}
 800a96c:	4628      	mov	r0, r5
 800a96e:	495c      	ldr	r1, [pc, #368]	; (800aae0 <WS28xxDmxParams::callbackFunction(char const*)+0x224>)
 800a970:	aa01      	add	r2, sp, #4
 800a972:	f005 fd60 	bl	8010436 <Sscan::Float(char const*, char const*, float&)>
 800a976:	b960      	cbnz	r0, 800a992 <WS28xxDmxParams::callbackFunction(char const*)+0xd6>
 800a978:	9801      	ldr	r0, [sp, #4]
 800a97a:	f000 fdd3 	bl	800b524 <PixelType::ConvertTxH(float)>
 800a97e:	6863      	ldr	r3, [r4, #4]
 800a980:	b120      	cbz	r0, 800a98c <WS28xxDmxParams::callbackFunction(char const*)+0xd0>
 800a982:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a986:	6063      	str	r3, [r4, #4]
 800a988:	7620      	strb	r0, [r4, #24]
 800a98a:	e7ed      	b.n	800a968 <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800a98c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a990:	e7f9      	b.n	800a986 <WS28xxDmxParams::callbackFunction(char const*)+0xca>
 800a992:	4628      	mov	r0, r5
 800a994:	4953      	ldr	r1, [pc, #332]	; (800aae4 <WS28xxDmxParams::callbackFunction(char const*)+0x228>)
 800a996:	aa01      	add	r2, sp, #4
 800a998:	f005 fd4d 	bl	8010436 <Sscan::Float(char const*, char const*, float&)>
 800a99c:	b960      	cbnz	r0, 800a9b8 <WS28xxDmxParams::callbackFunction(char const*)+0xfc>
 800a99e:	9801      	ldr	r0, [sp, #4]
 800a9a0:	f000 fdc0 	bl	800b524 <PixelType::ConvertTxH(float)>
 800a9a4:	6863      	ldr	r3, [r4, #4]
 800a9a6:	b120      	cbz	r0, 800a9b2 <WS28xxDmxParams::callbackFunction(char const*)+0xf6>
 800a9a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a9ac:	6063      	str	r3, [r4, #4]
 800a9ae:	7660      	strb	r0, [r4, #25]
 800a9b0:	e7da      	b.n	800a968 <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800a9b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a9b6:	e7f9      	b.n	800a9ac <WS28xxDmxParams::callbackFunction(char const*)+0xf0>
 800a9b8:	4628      	mov	r0, r5
 800a9ba:	494b      	ldr	r1, [pc, #300]	; (800aae8 <WS28xxDmxParams::callbackFunction(char const*)+0x22c>)
 800a9bc:	f10d 0202 	add.w	r2, sp, #2
 800a9c0:	f005 fddd 	bl	801057e <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800a9c4:	b998      	cbnz	r0, 800a9ee <WS28xxDmxParams::callbackFunction(char const*)+0x132>
 800a9c6:	f240 25a6 	movw	r5, #678	; 0x2a6
 800a9ca:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800a9ce:	6863      	ldr	r3, [r4, #4]
 800a9d0:	1e8a      	subs	r2, r1, #2
 800a9d2:	b292      	uxth	r2, r2
 800a9d4:	42aa      	cmp	r2, r5
 800a9d6:	bf81      	itttt	hi
 800a9d8:	2201      	movhi	r2, #1
 800a9da:	75a0      	strbhi	r0, [r4, #22]
 800a9dc:	7562      	strbhi	r2, [r4, #21]
 800a9de:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 800a9e2:	bf9c      	itt	ls
 800a9e4:	f8a4 1015 	strhls.w	r1, [r4, #21]
 800a9e8:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 800a9ec:	e786      	b.n	800a8fc <WS28xxDmxParams::callbackFunction(char const*)+0x40>
 800a9ee:	4628      	mov	r0, r5
 800a9f0:	493e      	ldr	r1, [pc, #248]	; (800aaec <WS28xxDmxParams::callbackFunction(char const*)+0x230>)
 800a9f2:	aa03      	add	r2, sp, #12
 800a9f4:	f005 fde1 	bl	80105ba <Sscan::Uint32(char const*, char const*, unsigned int&)>
 800a9f8:	b960      	cbnz	r0, 800aa14 <WS28xxDmxParams::callbackFunction(char const*)+0x158>
 800a9fa:	9a03      	ldr	r2, [sp, #12]
 800a9fc:	493c      	ldr	r1, [pc, #240]	; (800aaf0 <WS28xxDmxParams::callbackFunction(char const*)+0x234>)
 800a9fe:	6863      	ldr	r3, [r4, #4]
 800aa00:	428a      	cmp	r2, r1
 800aa02:	bf14      	ite	ne
 800aa04:	f043 0310 	orrne.w	r3, r3, #16
 800aa08:	f023 0310 	biceq.w	r3, r3, #16
 800aa0c:	6063      	str	r3, [r4, #4]
 800aa0e:	f8c4 200e 	str.w	r2, [r4, #14]
 800aa12:	e7a9      	b.n	800a968 <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800aa14:	4628      	mov	r0, r5
 800aa16:	4937      	ldr	r1, [pc, #220]	; (800aaf4 <WS28xxDmxParams::callbackFunction(char const*)+0x238>)
 800aa18:	f10d 0201 	add.w	r2, sp, #1
 800aa1c:	f005 fdf6 	bl	801060c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800aa20:	b988      	cbnz	r0, 800aa46 <WS28xxDmxParams::callbackFunction(char const*)+0x18a>
 800aa22:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800aa26:	6863      	ldr	r3, [r4, #4]
 800aa28:	1e4a      	subs	r2, r1, #1
 800aa2a:	b2d2      	uxtb	r2, r2
 800aa2c:	2afd      	cmp	r2, #253	; 0xfd
 800aa2e:	bf83      	ittte	hi
 800aa30:	f023 0320 	bichi.w	r3, r3, #32
 800aa34:	6063      	strhi	r3, [r4, #4]
 800aa36:	23ff      	movhi	r3, #255	; 0xff
 800aa38:	f043 0320 	orrls.w	r3, r3, #32
 800aa3c:	bf9a      	itte	ls
 800aa3e:	6063      	strls	r3, [r4, #4]
 800aa40:	74a1      	strbls	r1, [r4, #18]
 800aa42:	74a3      	strbhi	r3, [r4, #18]
 800aa44:	e790      	b.n	800a968 <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800aa46:	4628      	mov	r0, r5
 800aa48:	492b      	ldr	r1, [pc, #172]	; (800aaf8 <WS28xxDmxParams::callbackFunction(char const*)+0x23c>)
 800aa4a:	f10d 0202 	add.w	r2, sp, #2
 800aa4e:	f005 fd96 	bl	801057e <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800aa52:	b9b8      	cbnz	r0, 800aa84 <WS28xxDmxParams::callbackFunction(char const*)+0x1c8>
 800aa54:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800aa58:	6863      	ldr	r3, [r4, #4]
 800aa5a:	1e91      	subs	r1, r2, #2
 800aa5c:	f5b1 7fff 	cmp.w	r1, #510	; 0x1fe
 800aa60:	bf83      	ittte	hi
 800aa62:	2201      	movhi	r2, #1
 800aa64:	72e2      	strbhi	r2, [r4, #11]
 800aa66:	2200      	movhi	r2, #0
 800aa68:	f8a4 200b 	strhls.w	r2, [r4, #11]
 800aa6c:	bf92      	itee	ls
 800aa6e:	f043 0304 	orrls.w	r3, r3, #4
 800aa72:	7322      	strbhi	r2, [r4, #12]
 800aa74:	f023 0304 	bichi.w	r3, r3, #4
 800aa78:	e740      	b.n	800a8fc <WS28xxDmxParams::callbackFunction(char const*)+0x40>
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa80:	8362      	strh	r2, [r4, #26]
 800aa82:	e00e      	b.n	800aaa2 <WS28xxDmxParams::callbackFunction(char const*)+0x1e6>
 800aa84:	4628      	mov	r0, r5
 800aa86:	491d      	ldr	r1, [pc, #116]	; (800aafc <WS28xxDmxParams::callbackFunction(char const*)+0x240>)
 800aa88:	f10d 0202 	add.w	r2, sp, #2
 800aa8c:	f005 fd77 	bl	801057e <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800aa90:	b940      	cbnz	r0, 800aaa4 <WS28xxDmxParams::callbackFunction(char const*)+0x1e8>
 800aa92:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800aa96:	6863      	ldr	r3, [r4, #4]
 800aa98:	2a00      	cmp	r2, #0
 800aa9a:	d0ee      	beq.n	800aa7a <WS28xxDmxParams::callbackFunction(char const*)+0x1be>
 800aa9c:	8362      	strh	r2, [r4, #26]
 800aa9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aaa2:	6063      	str	r3, [r4, #4]
 800aaa4:	4628      	mov	r0, r5
 800aaa6:	4916      	ldr	r1, [pc, #88]	; (800ab00 <WS28xxDmxParams::callbackFunction(char const*)+0x244>)
 800aaa8:	f10d 0201 	add.w	r2, sp, #1
 800aaac:	f005 fdae 	bl	801060c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800aab0:	2800      	cmp	r0, #0
 800aab2:	f47f af59 	bne.w	800a968 <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800aab6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800aaba:	6863      	ldr	r3, [r4, #4]
 800aabc:	1e51      	subs	r1, r2, #1
 800aabe:	2904      	cmp	r1, #4
 800aac0:	bf99      	ittee	ls
 800aac2:	f884 202a 	strbls.w	r2, [r4, #42]	; 0x2a
 800aac6:	f443 1380 	orrls.w	r3, r3, #1048576	; 0x100000
 800aaca:	f884 002a 	strbhi.w	r0, [r4, #42]	; 0x2a
 800aace:	f423 1380 	bichi.w	r3, r3, #1048576	; 0x100000
 800aad2:	e713      	b.n	800a8fc <WS28xxDmxParams::callbackFunction(char const*)+0x40>
 800aad4:	08014af4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r9, fp, lr}
 800aad8:	08014afd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r9, fp, lr}
 800aadc:	08014ae4 	stmdaeq	r1, {r2, r5, r6, r7, r9, fp, lr}
 800aae0:	08014b07 	stmdaeq	r1, {r0, r1, r2, r8, r9, fp, lr}
 800aae4:	08014b0f 	stmdaeq	r1, {r0, r1, r2, r3, r8, r9, fp, lr}
 800aae8:	08014ac2 	stmdaeq	r1, {r1, r6, r7, r9, fp, lr}
 800aaec:	08014ab3 	stmdaeq	r1, {r0, r1, r4, r5, r7, r9, fp, lr}
 800aaf0:	003d0900 	eorseq	r0, sp, r0, lsl #18
 800aaf4:	08014ad2 	stmdaeq	r1, {r1, r4, r6, r7, r9, fp, lr}
 800aaf8:	08014bed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r8, r9, fp, lr}
 800aafc:	08014b5d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, r9, fp, lr}
 800ab00:	08014b50 	stmdaeq	r1, {r4, r6, r8, r9, fp, lr}

0800ab04 <WS28xxDmxParams::staticCallbackFunction(void*, char const*)>:
 800ab04:	f7ff beda 	b.w	800a8bc <WS28xxDmxParams::callbackFunction(char const*)>

0800ab08 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)>:
 800ab08:	b570      	push	{r4, r5, r6, lr}
 800ab0a:	4604      	mov	r4, r0
 800ab0c:	4615      	mov	r5, r2
 800ab0e:	461e      	mov	r6, r3
 800ab10:	b086      	sub	sp, #24
 800ab12:	3004      	adds	r0, #4
 800ab14:	2900      	cmp	r1, #0
 800ab16:	f000 808f 	beq.w	800ac38 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x130>
 800ab1a:	2227      	movs	r2, #39	; 0x27
 800ab1c:	f006 fa91 	bl	8011042 <memmove>
 800ab20:	4633      	mov	r3, r6
 800ab22:	462a      	mov	r2, r5
 800ab24:	4975      	ldr	r1, [pc, #468]	; (800acfc <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1f4>)
 800ab26:	a803      	add	r0, sp, #12
 800ab28:	f005 fb94 	bl	8010254 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800ab2c:	7a20      	ldrb	r0, [r4, #8]
 800ab2e:	f000 fc67 	bl	800b400 <PixelType::GetType(pixel::Type)>
 800ab32:	6863      	ldr	r3, [r4, #4]
 800ab34:	4602      	mov	r2, r0
 800ab36:	4972      	ldr	r1, [pc, #456]	; (800ad00 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1f8>)
 800ab38:	f003 0301 	and.w	r3, r3, #1
 800ab3c:	a803      	add	r0, sp, #12
 800ab3e:	f7ff fdff 	bl	800a740 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800ab42:	6863      	ldr	r3, [r4, #4]
 800ab44:	f8b4 2009 	ldrh.w	r2, [r4, #9]
 800ab48:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ab4c:	496d      	ldr	r1, [pc, #436]	; (800ad04 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1fc>)
 800ab4e:	a803      	add	r0, sp, #12
 800ab50:	f7ff fdce 	bl	800a6f0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800ab54:	496c      	ldr	r1, [pc, #432]	; (800ad08 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x200>)
 800ab56:	a803      	add	r0, sp, #12
 800ab58:	f005 fc02 	bl	8010360 <PropertiesBuilder::AddComment(char const*)>
 800ab5c:	6863      	ldr	r3, [r4, #4]
 800ab5e:	059e      	lsls	r6, r3, #22
 800ab60:	d403      	bmi.n	800ab6a <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x62>
 800ab62:	7a20      	ldrb	r0, [r4, #8]
 800ab64:	f000 f94e 	bl	800ae04 <PixelConfiguration::GetRgbMapping(pixel::Type)>
 800ab68:	75e0      	strb	r0, [r4, #23]
 800ab6a:	7de0      	ldrb	r0, [r4, #23]
 800ab6c:	f000 fca0 	bl	800b4b0 <PixelType::GetMap(pixel::Map)>
 800ab70:	6863      	ldr	r3, [r4, #4]
 800ab72:	4602      	mov	r2, r0
 800ab74:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800ab78:	4964      	ldr	r1, [pc, #400]	; (800ad0c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x204>)
 800ab7a:	a803      	add	r0, sp, #12
 800ab7c:	f7ff fde0 	bl	800a740 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800ab80:	6863      	ldr	r3, [r4, #4]
 800ab82:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ab86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ab8a:	d011      	beq.n	800abb0 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0xa8>
 800ab8c:	f10d 020b 	add.w	r2, sp, #11
 800ab90:	7a20      	ldrb	r0, [r4, #8]
 800ab92:	f10d 010a 	add.w	r1, sp, #10
 800ab96:	f000 f93f 	bl	800ae18 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 800ab9a:	6863      	ldr	r3, [r4, #4]
 800ab9c:	055d      	lsls	r5, r3, #21
 800ab9e:	bf5c      	itt	pl
 800aba0:	f89d 200a 	ldrbpl.w	r2, [sp, #10]
 800aba4:	7622      	strbpl	r2, [r4, #24]
 800aba6:	0518      	lsls	r0, r3, #20
 800aba8:	bf5c      	itt	pl
 800abaa:	f89d 300b 	ldrbpl.w	r3, [sp, #11]
 800abae:	7663      	strbpl	r3, [r4, #25]
 800abb0:	4957      	ldr	r1, [pc, #348]	; (800ad10 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x208>)
 800abb2:	a803      	add	r0, sp, #12
 800abb4:	f005 fbd4 	bl	8010360 <PropertiesBuilder::AddComment(char const*)>
 800abb8:	7e20      	ldrb	r0, [r4, #24]
 800abba:	f000 fc85 	bl	800b4c8 <PixelType::ConvertTxH(unsigned char)>
 800abbe:	2502      	movs	r5, #2
 800abc0:	6863      	ldr	r3, [r4, #4]
 800abc2:	4602      	mov	r2, r0
 800abc4:	4953      	ldr	r1, [pc, #332]	; (800ad14 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x20c>)
 800abc6:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800abca:	9500      	str	r5, [sp, #0]
 800abcc:	a803      	add	r0, sp, #12
 800abce:	f7ff fddf 	bl	800a790 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 800abd2:	7e60      	ldrb	r0, [r4, #25]
 800abd4:	f000 fc78 	bl	800b4c8 <PixelType::ConvertTxH(unsigned char)>
 800abd8:	6863      	ldr	r3, [r4, #4]
 800abda:	4602      	mov	r2, r0
 800abdc:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 800abe0:	494d      	ldr	r1, [pc, #308]	; (800ad18 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x210>)
 800abe2:	9500      	str	r5, [sp, #0]
 800abe4:	a803      	add	r0, sp, #12
 800abe6:	f7ff fdd3 	bl	800a790 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 800abea:	494c      	ldr	r1, [pc, #304]	; (800ad1c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x214>)
 800abec:	a803      	add	r0, sp, #12
 800abee:	f005 fbb7 	bl	8010360 <PropertiesBuilder::AddComment(char const*)>
 800abf2:	6863      	ldr	r3, [r4, #4]
 800abf4:	f8b4 2015 	ldrh.w	r2, [r4, #21]
 800abf8:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800abfc:	4948      	ldr	r1, [pc, #288]	; (800ad20 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x218>)
 800abfe:	a803      	add	r0, sp, #12
 800ac00:	f7ff fd76 	bl	800a6f0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800ac04:	4947      	ldr	r1, [pc, #284]	; (800ad24 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x21c>)
 800ac06:	a803      	add	r0, sp, #12
 800ac08:	f005 fbaa 	bl	8010360 <PropertiesBuilder::AddComment(char const*)>
 800ac0c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800ac10:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800ac14:	f8d4 300e 	ldr.w	r3, [r4, #14]
 800ac18:	42aa      	cmp	r2, r5
 800ac1a:	6861      	ldr	r1, [r4, #4]
 800ac1c:	d222      	bcs.n	800ac64 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x15c>
 800ac1e:	9803      	ldr	r0, [sp, #12]
 800ac20:	06c9      	lsls	r1, r1, #27
 800ac22:	4410      	add	r0, r2
 800ac24:	eba5 0502 	sub.w	r5, r5, r2
 800ac28:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800ac2c:	d40b      	bmi.n	800ac46 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x13e>
 800ac2e:	b962      	cbnz	r2, 800ac4a <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x142>
 800ac30:	9300      	str	r3, [sp, #0]
 800ac32:	4a3d      	ldr	r2, [pc, #244]	; (800ad28 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x220>)
 800ac34:	4b3d      	ldr	r3, [pc, #244]	; (800ad2c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x224>)
 800ac36:	e00b      	b.n	800ac50 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x148>
 800ac38:	6823      	ldr	r3, [r4, #0]
 800ac3a:	4601      	mov	r1, r0
 800ac3c:	681a      	ldr	r2, [r3, #0]
 800ac3e:	4618      	mov	r0, r3
 800ac40:	68d2      	ldr	r2, [r2, #12]
 800ac42:	4790      	blx	r2
 800ac44:	e76c      	b.n	800ab20 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x18>
 800ac46:	2a00      	cmp	r2, #0
 800ac48:	d053      	beq.n	800acf2 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1ea>
 800ac4a:	9300      	str	r3, [sp, #0]
 800ac4c:	4a38      	ldr	r2, [pc, #224]	; (800ad30 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x228>)
 800ac4e:	4b37      	ldr	r3, [pc, #220]	; (800ad2c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x224>)
 800ac50:	4629      	mov	r1, r5
 800ac52:	f7fe fb33 	bl	80092bc <snprintf>
 800ac56:	4285      	cmp	r5, r0
 800ac58:	bfa2      	ittt	ge
 800ac5a:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800ac5e:	18c0      	addge	r0, r0, r3
 800ac60:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800ac64:	4933      	ldr	r1, [pc, #204]	; (800ad34 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x22c>)
 800ac66:	a803      	add	r0, sp, #12
 800ac68:	f005 fb7a 	bl	8010360 <PropertiesBuilder::AddComment(char const*)>
 800ac6c:	6863      	ldr	r3, [r4, #4]
 800ac6e:	7ca2      	ldrb	r2, [r4, #18]
 800ac70:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ac74:	4930      	ldr	r1, [pc, #192]	; (800ad38 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x230>)
 800ac76:	a803      	add	r0, sp, #12
 800ac78:	f7ff fd12 	bl	800a6a0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800ac7c:	492f      	ldr	r1, [pc, #188]	; (800ad3c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x234>)
 800ac7e:	a803      	add	r0, sp, #12
 800ac80:	f005 fb6e 	bl	8010360 <PropertiesBuilder::AddComment(char const*)>
 800ac84:	6863      	ldr	r3, [r4, #4]
 800ac86:	f8b4 200b 	ldrh.w	r2, [r4, #11]
 800ac8a:	492d      	ldr	r1, [pc, #180]	; (800ad40 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x238>)
 800ac8c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ac90:	a803      	add	r0, sp, #12
 800ac92:	f7ff fd2d 	bl	800a6f0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800ac96:	6863      	ldr	r3, [r4, #4]
 800ac98:	8b62      	ldrh	r2, [r4, #26]
 800ac9a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800ac9e:	4929      	ldr	r1, [pc, #164]	; (800ad44 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x23c>)
 800aca0:	a803      	add	r0, sp, #12
 800aca2:	f7ff fd25 	bl	800a6f0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800aca6:	4928      	ldr	r1, [pc, #160]	; (800ad48 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x240>)
 800aca8:	a803      	add	r0, sp, #12
 800acaa:	f005 fb59 	bl	8010360 <PropertiesBuilder::AddComment(char const*)>
 800acae:	6863      	ldr	r3, [r4, #4]
 800acb0:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800acb4:	f3c3 5300 	ubfx	r3, r3, #20, #1
 800acb8:	4924      	ldr	r1, [pc, #144]	; (800ad4c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x244>)
 800acba:	a803      	add	r0, sp, #12
 800acbc:	f7ff fcf0 	bl	800a6a0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800acc0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800acc4:	b17b      	cbz	r3, 800ace6 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1de>
 800acc6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800acca:	9b03      	ldr	r3, [sp, #12]
 800accc:	4413      	add	r3, r2
 800acce:	227d      	movs	r2, #125	; 0x7d
 800acd0:	f803 2c01 	strb.w	r2, [r3, #-1]
 800acd4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800acd8:	9903      	ldr	r1, [sp, #12]
 800acda:	54ca      	strb	r2, [r1, r3]
 800acdc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800ace0:	3301      	adds	r3, #1
 800ace2:	f8ad 3012 	strh.w	r3, [sp, #18]
 800ace6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800acea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acec:	601a      	str	r2, [r3, #0]
 800acee:	b006      	add	sp, #24
 800acf0:	bd70      	pop	{r4, r5, r6, pc}
 800acf2:	9300      	str	r3, [sp, #0]
 800acf4:	4a16      	ldr	r2, [pc, #88]	; (800ad50 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x248>)
 800acf6:	4b0d      	ldr	r3, [pc, #52]	; (800ad2c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x224>)
 800acf8:	e7aa      	b.n	800ac50 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x148>
 800acfa:	bf00      	nop
 800acfc:	08014b17 	stmdaeq	r1, {r0, r1, r2, r4, r8, r9, fp, lr}
 800ad00:	08014af4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r9, fp, lr}
 800ad04:	08014afd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r9, fp, lr}
 800ad08:	08013531 	stmdaeq	r1, {r0, r4, r5, r8, sl, ip, sp}
 800ad0c:	08014ae4 	stmdaeq	r1, {r2, r5, r6, r7, r9, fp, lr}
 800ad10:	08013545 	stmdaeq	r1, {r0, r2, r6, r8, sl, ip, sp}
 800ad14:	08014b07 	stmdaeq	r1, {r0, r1, r2, r8, r9, fp, lr}
 800ad18:	08014b0f 	stmdaeq	r1, {r0, r1, r2, r3, r8, r9, fp, lr}
 800ad1c:	0801355b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r8, sl, ip, sp}
 800ad20:	08014ac2 	stmdaeq	r1, {r1, r6, r7, r9, fp, lr}
 800ad24:	08013564 	stmdaeq	r1, {r2, r5, r6, r8, sl, ip, sp}
 800ad28:	08013475 	stmdaeq	r1, {r0, r2, r4, r5, r6, sl, ip, sp}
 800ad2c:	08014ab3 	stmdaeq	r1, {r0, r1, r4, r5, r7, r9, fp, lr}
 800ad30:	0801346c 	stmdaeq	r1, {r2, r3, r5, r6, sl, ip, sp}
 800ad34:	08013576 	stmdaeq	r1, {r1, r2, r4, r5, r6, r8, sl, ip, sp}
 800ad38:	08014ad2 	stmdaeq	r1, {r1, r4, r6, r7, r9, fp, lr}
 800ad3c:	08013584 	stmdaeq	r1, {r2, r7, r8, sl, ip, sp}
 800ad40:	08014bed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r8, r9, fp, lr}
 800ad44:	08014b5d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, r9, fp, lr}
 800ad48:	08013588 	stmdaeq	r1, {r3, r7, r8, sl, ip, sp}
 800ad4c:	08014b50 	stmdaeq	r1, {r4, r6, r8, r9, fp, lr}
 800ad50:	08013476 	stmdaeq	r1, {r1, r2, r4, r5, r6, sl, ip, sp}

0800ad54 <WS28xxDmxParams::Save(char*, unsigned int, unsigned int&)>:
 800ad54:	b513      	push	{r0, r1, r4, lr}
 800ad56:	6804      	ldr	r4, [r0, #0]
 800ad58:	b914      	cbnz	r4, 800ad60 <WS28xxDmxParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800ad5a:	601c      	str	r4, [r3, #0]
 800ad5c:	b002      	add	sp, #8
 800ad5e:	bd10      	pop	{r4, pc}
 800ad60:	9300      	str	r3, [sp, #0]
 800ad62:	4613      	mov	r3, r2
 800ad64:	460a      	mov	r2, r1
 800ad66:	2100      	movs	r1, #0
 800ad68:	f7ff fece 	bl	800ab08 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)>
 800ad6c:	e7f6      	b.n	800ad5c <WS28xxDmxParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800ad6e <WS28xxDmxParams::Set(PixelDmxConfiguration*)>:
 800ad6e:	6843      	ldr	r3, [r0, #4]
 800ad70:	07da      	lsls	r2, r3, #31
 800ad72:	bf44      	itt	mi
 800ad74:	7a02      	ldrbmi	r2, [r0, #8]
 800ad76:	600a      	strmi	r2, [r1, #0]
 800ad78:	079a      	lsls	r2, r3, #30
 800ad7a:	d505      	bpl.n	800ad88 <WS28xxDmxParams::Set(PixelDmxConfiguration*)+0x1a>
 800ad7c:	f8b0 2009 	ldrh.w	r2, [r0, #9]
 800ad80:	2a00      	cmp	r2, #0
 800ad82:	bf08      	it	eq
 800ad84:	22aa      	moveq	r2, #170	; 0xaa
 800ad86:	604a      	str	r2, [r1, #4]
 800ad88:	059a      	lsls	r2, r3, #22
 800ad8a:	bf44      	itt	mi
 800ad8c:	7dc2      	ldrbmi	r2, [r0, #23]
 800ad8e:	608a      	strmi	r2, [r1, #8]
 800ad90:	055a      	lsls	r2, r3, #21
 800ad92:	bf44      	itt	mi
 800ad94:	7e02      	ldrbmi	r2, [r0, #24]
 800ad96:	740a      	strbmi	r2, [r1, #16]
 800ad98:	051a      	lsls	r2, r3, #20
 800ad9a:	bf44      	itt	mi
 800ad9c:	7e42      	ldrbmi	r2, [r0, #25]
 800ad9e:	744a      	strbmi	r2, [r1, #17]
 800ada0:	06da      	lsls	r2, r3, #27
 800ada2:	bf44      	itt	mi
 800ada4:	f8d0 200e 	ldrmi.w	r2, [r0, #14]
 800ada8:	60ca      	strmi	r2, [r1, #12]
 800adaa:	069a      	lsls	r2, r3, #26
 800adac:	bf44      	itt	mi
 800adae:	7c82      	ldrbmi	r2, [r0, #18]
 800adb0:	748a      	strbmi	r2, [r1, #18]
 800adb2:	075a      	lsls	r2, r3, #29
 800adb4:	d50b      	bpl.n	800adce <WS28xxDmxParams::Set(PixelDmxConfiguration*)+0x60>
 800adb6:	7ac2      	ldrb	r2, [r0, #11]
 800adb8:	b510      	push	{r4, lr}
 800adba:	7b04      	ldrb	r4, [r0, #12]
 800adbc:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800adc0:	838a      	strh	r2, [r1, #28]
 800adc2:	05da      	lsls	r2, r3, #23
 800adc4:	bf44      	itt	mi
 800adc6:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 800adca:	618b      	strmi	r3, [r1, #24]
 800adcc:	bd10      	pop	{r4, pc}
 800adce:	05db      	lsls	r3, r3, #23
 800add0:	bf44      	itt	mi
 800add2:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 800add6:	618b      	strmi	r3, [r1, #24]
 800add8:	4770      	bx	lr

0800adda <WS28xxDmxParams::Dump()>:
 800adda:	4770      	bx	lr

0800addc <WS28xxDmx::Print()>:
 800addc:	b510      	push	{r4, lr}
 800adde:	4604      	mov	r4, r0
 800ade0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800ade2:	f000 fbeb 	bl	800b5bc <WS28xx::Print()>
 800ade6:	4805      	ldr	r0, [pc, #20]	; (800adfc <WS28xxDmx::Print()+0x20>)
 800ade8:	f7fe fa58 	bl	800929c <printf>
 800adec:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 800adf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adf4:	4802      	ldr	r0, [pc, #8]	; (800ae00 <WS28xxDmx::Print()+0x24>)
 800adf6:	f7fe ba51 	b.w	800929c <printf>
 800adfa:	bf00      	nop
 800adfc:	08013595 	stmdaeq	r1, {r0, r2, r4, r7, r8, sl, ip, sp}
 800ae00:	080135ab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r8, sl, ip, sp}

0800ae04 <PixelConfiguration::GetRgbMapping(pixel::Type)>:
 800ae04:	3801      	subs	r0, #1
 800ae06:	2809      	cmp	r0, #9
 800ae08:	bf9a      	itte	ls
 800ae0a:	4b02      	ldrls	r3, [pc, #8]	; (800ae14 <PixelConfiguration::GetRgbMapping(pixel::Type)+0x10>)
 800ae0c:	5618      	ldrsbls	r0, [r3, r0]
 800ae0e:	2002      	movhi	r0, #2
 800ae10:	4770      	bx	lr
 800ae12:	bf00      	nop
 800ae14:	080135cf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, r8, sl, ip, sp}

0800ae18 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>:
 800ae18:	23c0      	movs	r3, #192	; 0xc0
 800ae1a:	2803      	cmp	r0, #3
 800ae1c:	700b      	strb	r3, [r1, #0]
 800ae1e:	d006      	beq.n	800ae2e <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x16>
 800ae20:	3808      	subs	r0, #8
 800ae22:	2803      	cmp	r0, #3
 800ae24:	bf34      	ite	cc
 800ae26:	23fc      	movcc	r3, #252	; 0xfc
 800ae28:	23f0      	movcs	r3, #240	; 0xf0
 800ae2a:	7013      	strb	r3, [r2, #0]
 800ae2c:	4770      	bx	lr
 800ae2e:	23f8      	movs	r3, #248	; 0xf8
 800ae30:	e7fb      	b.n	800ae2a <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x12>
	...

0800ae34 <PixelConfiguration::Validate(unsigned int&)>:
 800ae34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae36:	e9d0 5300 	ldrd	r5, r3, [r0]
 800ae3a:	2d07      	cmp	r5, #7
 800ae3c:	4604      	mov	r4, r0
 800ae3e:	6882      	ldr	r2, [r0, #8]
 800ae40:	d129      	bne.n	800ae96 <PixelConfiguration::Validate(unsigned int&)+0x62>
 800ae42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae46:	bf28      	it	cs
 800ae48:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800ae4c:	6043      	str	r3, [r0, #4]
 800ae4e:	2304      	movs	r3, #4
 800ae50:	600b      	str	r3, [r1, #0]
 800ae52:	2301      	movs	r3, #1
 800ae54:	2a06      	cmp	r2, #6
 800ae56:	74e3      	strb	r3, [r4, #19]
 800ae58:	d103      	bne.n	800ae62 <PixelConfiguration::Validate(unsigned int&)+0x2e>
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	f7ff ffd2 	bl	800ae04 <PixelConfiguration::GetRgbMapping(pixel::Type)>
 800ae60:	60a0      	str	r0, [r4, #8]
 800ae62:	7c63      	ldrb	r3, [r4, #17]
 800ae64:	7c22      	ldrb	r2, [r4, #16]
 800ae66:	4628      	mov	r0, r5
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	bf28      	it	cs
 800ae6c:	2300      	movcs	r3, #0
 800ae6e:	f10d 0207 	add.w	r2, sp, #7
 800ae72:	bf28      	it	cs
 800ae74:	8223      	strhcs	r3, [r4, #16]
 800ae76:	f10d 0106 	add.w	r1, sp, #6
 800ae7a:	f7ff ffcd 	bl	800ae18 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 800ae7e:	7c23      	ldrb	r3, [r4, #16]
 800ae80:	b913      	cbnz	r3, 800ae88 <PixelConfiguration::Validate(unsigned int&)+0x54>
 800ae82:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ae86:	7423      	strb	r3, [r4, #16]
 800ae88:	7c63      	ldrb	r3, [r4, #17]
 800ae8a:	b913      	cbnz	r3, 800ae92 <PixelConfiguration::Validate(unsigned int&)+0x5e>
 800ae8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ae90:	7463      	strb	r3, [r4, #17]
 800ae92:	4b1a      	ldr	r3, [pc, #104]	; (800aefc <PixelConfiguration::Validate(unsigned int&)+0xc8>)
 800ae94:	e020      	b.n	800aed8 <PixelConfiguration::Validate(unsigned int&)+0xa4>
 800ae96:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 800ae9a:	bf28      	it	cs
 800ae9c:	f44f 732a 	movcs.w	r3, #680	; 0x2a8
 800aea0:	6043      	str	r3, [r0, #4]
 800aea2:	2303      	movs	r3, #3
 800aea4:	600b      	str	r3, [r1, #0]
 800aea6:	f1a5 030b 	sub.w	r3, r5, #11
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d806      	bhi.n	800aebc <PixelConfiguration::Validate(unsigned int&)+0x88>
 800aeae:	7c83      	ldrb	r3, [r0, #18]
 800aeb0:	2b1f      	cmp	r3, #31
 800aeb2:	d81d      	bhi.n	800aef0 <PixelConfiguration::Validate(unsigned int&)+0xbc>
 800aeb4:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800aeb8:	74a3      	strb	r3, [r4, #18]
 800aeba:	e000      	b.n	800aebe <PixelConfiguration::Validate(unsigned int&)+0x8a>
 800aebc:	b9d5      	cbnz	r5, 800aef4 <PixelConfiguration::Validate(unsigned int&)+0xc0>
 800aebe:	2300      	movs	r3, #0
 800aec0:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800aec4:	2a06      	cmp	r2, #6
 800aec6:	bf08      	it	eq
 800aec8:	60a3      	streq	r3, [r4, #8]
 800aeca:	2d0d      	cmp	r5, #13
 800aecc:	74e3      	strb	r3, [r4, #19]
 800aece:	8221      	strh	r1, [r4, #16]
 800aed0:	68e3      	ldr	r3, [r4, #12]
 800aed2:	d109      	bne.n	800aee8 <PixelConfiguration::Validate(unsigned int&)+0xb4>
 800aed4:	b913      	cbnz	r3, 800aedc <PixelConfiguration::Validate(unsigned int&)+0xa8>
 800aed6:	4b0a      	ldr	r3, [pc, #40]	; (800af00 <PixelConfiguration::Validate(unsigned int&)+0xcc>)
 800aed8:	60e3      	str	r3, [r4, #12]
 800aeda:	e003      	b.n	800aee4 <PixelConfiguration::Validate(unsigned int&)+0xb0>
 800aedc:	4a09      	ldr	r2, [pc, #36]	; (800af04 <PixelConfiguration::Validate(unsigned int&)+0xd0>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d900      	bls.n	800aee4 <PixelConfiguration::Validate(unsigned int&)+0xb0>
 800aee2:	60e2      	str	r2, [r4, #12]
 800aee4:	b003      	add	sp, #12
 800aee6:	bd30      	pop	{r4, r5, pc}
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d0f4      	beq.n	800aed6 <PixelConfiguration::Validate(unsigned int&)+0xa2>
 800aeec:	4a06      	ldr	r2, [pc, #24]	; (800af08 <PixelConfiguration::Validate(unsigned int&)+0xd4>)
 800aeee:	e7f6      	b.n	800aede <PixelConfiguration::Validate(unsigned int&)+0xaa>
 800aef0:	23ff      	movs	r3, #255	; 0xff
 800aef2:	e7e1      	b.n	800aeb8 <PixelConfiguration::Validate(unsigned int&)+0x84>
 800aef4:	2d0d      	cmp	r5, #13
 800aef6:	d1ac      	bne.n	800ae52 <PixelConfiguration::Validate(unsigned int&)+0x1e>
 800aef8:	e7e1      	b.n	800aebe <PixelConfiguration::Validate(unsigned int&)+0x8a>
 800aefa:	bf00      	nop
 800aefc:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 800af00:	003d0900 	eorseq	r0, sp, r0, lsl #18
 800af04:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 800af08:	017d7840 	cmneq	sp, r0, asr #16

0800af0c <PixelConfiguration::Dump()>:
 800af0c:	4770      	bx	lr
	...

0800af10 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>:
 800af10:	b507      	push	{r0, r1, r2, lr}
 800af12:	b2cb      	uxtb	r3, r1
 800af14:	9300      	str	r3, [sp, #0]
 800af16:	f3c1 4207 	ubfx	r2, r1, #16, #8
 800af1a:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800af1e:	4601      	mov	r1, r0
 800af20:	4803      	ldr	r0, [pc, #12]	; (800af30 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]+0x20>)
 800af22:	6800      	ldr	r0, [r0, #0]
 800af24:	f000 fb8c 	bl	800b640 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 800af28:	b003      	add	sp, #12
 800af2a:	f85d fb04 	ldr.w	pc, [sp], #4
 800af2e:	bf00      	nop
 800af30:	20000724 	andcs	r0, r0, r4, lsr #14

0800af34 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>:
 800af34:	b538      	push	{r3, r4, r5, lr}
 800af36:	2400      	movs	r4, #0
 800af38:	4d05      	ldr	r5, [pc, #20]	; (800af50 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x1c>)
 800af3a:	682b      	ldr	r3, [r5, #0]
 800af3c:	429c      	cmp	r4, r3
 800af3e:	d300      	bcc.n	800af42 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0xe>
 800af40:	bd38      	pop	{r3, r4, r5, pc}
 800af42:	4620      	mov	r0, r4
 800af44:	2100      	movs	r1, #0
 800af46:	f7ff ffe3 	bl	800af10 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800af4a:	3401      	adds	r4, #1
 800af4c:	e7f5      	b.n	800af3a <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x6>
 800af4e:	bf00      	nop
 800af50:	20000720 	andcs	r0, r0, r0, lsr #14

0800af54 <PixelPatterns::PixelPatterns(unsigned int)>:
 800af54:	2901      	cmp	r1, #1
 800af56:	bf28      	it	cs
 800af58:	2101      	movcs	r1, #1
 800af5a:	4b08      	ldr	r3, [pc, #32]	; (800af7c <PixelPatterns::PixelPatterns(unsigned int)+0x28>)
 800af5c:	4a08      	ldr	r2, [pc, #32]	; (800af80 <PixelPatterns::PixelPatterns(unsigned int)+0x2c>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	6013      	str	r3, [r2, #0]
 800af62:	4a08      	ldr	r2, [pc, #32]	; (800af84 <PixelPatterns::PixelPatterns(unsigned int)+0x30>)
 800af64:	6011      	str	r1, [r2, #0]
 800af66:	685a      	ldr	r2, [r3, #4]
 800af68:	4b07      	ldr	r3, [pc, #28]	; (800af88 <PixelPatterns::PixelPatterns(unsigned int)+0x34>)
 800af6a:	601a      	str	r2, [r3, #0]
 800af6c:	2200      	movs	r2, #0
 800af6e:	4b07      	ldr	r3, [pc, #28]	; (800af8c <PixelPatterns::PixelPatterns(unsigned int)+0x38>)
 800af70:	6819      	ldr	r1, [r3, #0]
 800af72:	4b07      	ldr	r3, [pc, #28]	; (800af90 <PixelPatterns::PixelPatterns(unsigned int)+0x3c>)
 800af74:	61da      	str	r2, [r3, #28]
 800af76:	6019      	str	r1, [r3, #0]
 800af78:	619a      	str	r2, [r3, #24]
 800af7a:	4770      	bx	lr
 800af7c:	20000730 	andcs	r0, r0, r0, lsr r7
 800af80:	20000724 	andcs	r0, r0, r4, lsr #14
 800af84:	20000718 	andcs	r0, r0, r8, lsl r7
 800af88:	20000720 	andcs	r0, r0, r0, lsr #14
 800af8c:	200097ac 	andcs	r9, r0, ip, lsr #15
 800af90:	200006f8 	strdcs	r0, [r0], -r8

0800af94 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>:
 800af94:	b570      	push	{r4, r5, r6, lr}
 800af96:	460e      	mov	r6, r1
 800af98:	4615      	mov	r5, r2
 800af9a:	461c      	mov	r4, r3
 800af9c:	f7ff ffca 	bl	800af34 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800afa0:	2301      	movs	r3, #1
 800afa2:	4905      	ldr	r1, [pc, #20]	; (800afb8 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)+0x24>)
 800afa4:	22ff      	movs	r2, #255	; 0xff
 800afa6:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800afaa:	61cb      	str	r3, [r1, #28]
 800afac:	2300      	movs	r3, #0
 800afae:	604d      	str	r5, [r1, #4]
 800afb0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800afb4:	618c      	str	r4, [r1, #24]
 800afb6:	bd70      	pop	{r4, r5, r6, pc}
 800afb8:	200006f8 	strdcs	r0, [r0], -r8

0800afbc <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 800afbc:	b570      	push	{r4, r5, r6, lr}
 800afbe:	460e      	mov	r6, r1
 800afc0:	461c      	mov	r4, r3
 800afc2:	4615      	mov	r5, r2
 800afc4:	f7ff ffb6 	bl	800af34 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800afc8:	2302      	movs	r3, #2
 800afca:	4908      	ldr	r1, [pc, #32]	; (800afec <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 800afcc:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800afd0:	61cb      	str	r3, [r1, #28]
 800afd2:	9b04      	ldr	r3, [sp, #16]
 800afd4:	e9c1 5402 	strd	r5, r4, [r1, #8]
 800afd8:	604b      	str	r3, [r1, #4]
 800afda:	4b05      	ldr	r3, [pc, #20]	; (800aff0 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x34>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	610b      	str	r3, [r1, #16]
 800afe0:	2300      	movs	r3, #0
 800afe2:	614b      	str	r3, [r1, #20]
 800afe4:	9b05      	ldr	r3, [sp, #20]
 800afe6:	618b      	str	r3, [r1, #24]
 800afe8:	bd70      	pop	{r4, r5, r6, pc}
 800afea:	bf00      	nop
 800afec:	200006f8 	strdcs	r0, [r0], -r8
 800aff0:	20000720 	andcs	r0, r0, r0, lsr #14

0800aff4 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 800aff4:	b570      	push	{r4, r5, r6, lr}
 800aff6:	460e      	mov	r6, r1
 800aff8:	461d      	mov	r5, r3
 800affa:	4614      	mov	r4, r2
 800affc:	f7ff ff9a 	bl	800af34 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800b000:	2303      	movs	r3, #3
 800b002:	4907      	ldr	r1, [pc, #28]	; (800b020 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 800b004:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800b008:	61cb      	str	r3, [r1, #28]
 800b00a:	4b06      	ldr	r3, [pc, #24]	; (800b024 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 800b00c:	604d      	str	r5, [r1, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	608c      	str	r4, [r1, #8]
 800b012:	610b      	str	r3, [r1, #16]
 800b014:	2300      	movs	r3, #0
 800b016:	614b      	str	r3, [r1, #20]
 800b018:	9b04      	ldr	r3, [sp, #16]
 800b01a:	618b      	str	r3, [r1, #24]
 800b01c:	bd70      	pop	{r4, r5, r6, pc}
 800b01e:	bf00      	nop
 800b020:	200006f8 	strdcs	r0, [r0], -r8
 800b024:	20000720 	andcs	r0, r0, r0, lsr #14

0800b028 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>:
 800b028:	b570      	push	{r4, r5, r6, lr}
 800b02a:	460e      	mov	r6, r1
 800b02c:	461d      	mov	r5, r3
 800b02e:	4614      	mov	r4, r2
 800b030:	f7ff ff80 	bl	800af34 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800b034:	2304      	movs	r3, #4
 800b036:	4912      	ldr	r1, [pc, #72]	; (800b080 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x58>)
 800b038:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800b03c:	604d      	str	r5, [r1, #4]
 800b03e:	4d11      	ldr	r5, [pc, #68]	; (800b084 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x5c>)
 800b040:	61cb      	str	r3, [r1, #28]
 800b042:	6828      	ldr	r0, [r5, #0]
 800b044:	608c      	str	r4, [r1, #8]
 800b046:	1e43      	subs	r3, r0, #1
 800b048:	005b      	lsls	r3, r3, #1
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	610b      	str	r3, [r1, #16]
 800b04e:	2300      	movs	r3, #0
 800b050:	4c0d      	ldr	r4, [pc, #52]	; (800b088 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x60>)
 800b052:	614b      	str	r3, [r1, #20]
 800b054:	6823      	ldr	r3, [r4, #0]
 800b056:	b97b      	cbnz	r3, 800b078 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x50>
 800b058:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800b05c:	4298      	cmp	r0, r3
 800b05e:	bf2c      	ite	cs
 800b060:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 800b064:	0080      	lslcc	r0, r0, #2
 800b066:	f005 ff2f 	bl	8010ec8 <operator new[](unsigned int)>
 800b06a:	2200      	movs	r2, #0
 800b06c:	682b      	ldr	r3, [r5, #0]
 800b06e:	6020      	str	r0, [r4, #0]
 800b070:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b074:	4298      	cmp	r0, r3
 800b076:	d100      	bne.n	800b07a <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x52>
 800b078:	bd70      	pop	{r4, r5, r6, pc}
 800b07a:	f840 2b04 	str.w	r2, [r0], #4
 800b07e:	e7f9      	b.n	800b074 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x4c>
 800b080:	200006f8 	strdcs	r0, [r0], -r8
 800b084:	20000720 	andcs	r0, r0, r0, lsr #14
 800b088:	2000071c 	andcs	r0, r0, ip, lsl r7

0800b08c <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 800b08c:	b570      	push	{r4, r5, r6, lr}
 800b08e:	460e      	mov	r6, r1
 800b090:	461c      	mov	r4, r3
 800b092:	4615      	mov	r5, r2
 800b094:	f7ff ff4e 	bl	800af34 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800b098:	2305      	movs	r3, #5
 800b09a:	4907      	ldr	r1, [pc, #28]	; (800b0b8 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 800b09c:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800b0a0:	61cb      	str	r3, [r1, #28]
 800b0a2:	9b05      	ldr	r3, [sp, #20]
 800b0a4:	e9c1 5402 	strd	r5, r4, [r1, #8]
 800b0a8:	604b      	str	r3, [r1, #4]
 800b0aa:	9b04      	ldr	r3, [sp, #16]
 800b0ac:	610b      	str	r3, [r1, #16]
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	614b      	str	r3, [r1, #20]
 800b0b2:	9b06      	ldr	r3, [sp, #24]
 800b0b4:	618b      	str	r3, [r1, #24]
 800b0b6:	bd70      	pop	{r4, r5, r6, pc}
 800b0b8:	200006f8 	strdcs	r0, [r0], -r8

0800b0bc <PixelPatterns::Wheel(unsigned char)>:
 800b0bc:	43cb      	mvns	r3, r1
 800b0be:	b2db      	uxtb	r3, r3
 800b0c0:	2b54      	cmp	r3, #84	; 0x54
 800b0c2:	d809      	bhi.n	800b0d8 <PixelPatterns::Wheel(unsigned char)+0x1c>
 800b0c4:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 800b0c8:	b2db      	uxtb	r3, r3
 800b0ca:	1e5a      	subs	r2, r3, #1
 800b0cc:	4258      	negs	r0, r3
 800b0ce:	b2d2      	uxtb	r2, r2
 800b0d0:	b2c0      	uxtb	r0, r0
 800b0d2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800b0d6:	4770      	bx	lr
 800b0d8:	2ba9      	cmp	r3, #169	; 0xa9
 800b0da:	d809      	bhi.n	800b0f0 <PixelPatterns::Wheel(unsigned char)+0x34>
 800b0dc:	f1c1 01aa 	rsb	r1, r1, #170	; 0xaa
 800b0e0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800b0e4:	b2c9      	uxtb	r1, r1
 800b0e6:	43c8      	mvns	r0, r1
 800b0e8:	b2c0      	uxtb	r0, r0
 800b0ea:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 800b0ee:	4770      	bx	lr
 800b0f0:	f1c1 0155 	rsb	r1, r1, #85	; 0x55
 800b0f4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800b0f8:	b2c9      	uxtb	r1, r1
 800b0fa:	0208      	lsls	r0, r1, #8
 800b0fc:	f480 407f 	eor.w	r0, r0, #65280	; 0xff00
 800b100:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800b104:	4770      	bx	lr
	...

0800b108 <PixelPatterns::Increment(unsigned int)>:
 800b108:	4a0d      	ldr	r2, [pc, #52]	; (800b140 <PixelPatterns::Increment(unsigned int)+0x38>)
 800b10a:	b510      	push	{r4, lr}
 800b10c:	014c      	lsls	r4, r1, #5
 800b10e:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 800b112:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
 800b116:	b930      	cbnz	r0, 800b126 <PixelPatterns::Increment(unsigned int)+0x1e>
 800b118:	690a      	ldr	r2, [r1, #16]
 800b11a:	3301      	adds	r3, #1
 800b11c:	4293      	cmp	r3, r2
 800b11e:	bf18      	it	ne
 800b120:	4618      	movne	r0, r3
 800b122:	6148      	str	r0, [r1, #20]
 800b124:	bd10      	pop	{r4, pc}
 800b126:	b92b      	cbnz	r3, 800b134 <PixelPatterns::Increment(unsigned int)+0x2c>
 800b128:	4422      	add	r2, r4
 800b12a:	6913      	ldr	r3, [r2, #16]
 800b12c:	3b01      	subs	r3, #1
 800b12e:	b29b      	uxth	r3, r3
 800b130:	6153      	str	r3, [r2, #20]
 800b132:	e7f7      	b.n	800b124 <PixelPatterns::Increment(unsigned int)+0x1c>
 800b134:	3b01      	subs	r3, #1
 800b136:	614b      	str	r3, [r1, #20]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d1f3      	bne.n	800b124 <PixelPatterns::Increment(unsigned int)+0x1c>
 800b13c:	e7f4      	b.n	800b128 <PixelPatterns::Increment(unsigned int)+0x20>
 800b13e:	bf00      	nop
 800b140:	200006f8 	strdcs	r0, [r0], -r8

0800b144 <PixelPatterns::RainbowCycleUpdate(unsigned int)>:
 800b144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b148:	4604      	mov	r4, r0
 800b14a:	460d      	mov	r5, r1
 800b14c:	2700      	movs	r7, #0
 800b14e:	4b10      	ldr	r3, [pc, #64]	; (800b190 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x4c>)
 800b150:	f8df 8040 	ldr.w	r8, [pc, #64]	; 800b194 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x50>
 800b154:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b158:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800b15c:	f8d8 2000 	ldr.w	r2, [r8]
 800b160:	b2be      	uxth	r6, r7
 800b162:	42b2      	cmp	r2, r6
 800b164:	f107 0701 	add.w	r7, r7, #1
 800b168:	d805      	bhi.n	800b176 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x32>
 800b16a:	4629      	mov	r1, r5
 800b16c:	4620      	mov	r0, r4
 800b16e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b172:	f7ff bfc9 	b.w	800b108 <PixelPatterns::Increment(unsigned int)>
 800b176:	0233      	lsls	r3, r6, #8
 800b178:	fbb3 f3f2 	udiv	r3, r3, r2
 800b17c:	444b      	add	r3, r9
 800b17e:	b2d9      	uxtb	r1, r3
 800b180:	4620      	mov	r0, r4
 800b182:	f7ff ff9b 	bl	800b0bc <PixelPatterns::Wheel(unsigned char)>
 800b186:	4601      	mov	r1, r0
 800b188:	4630      	mov	r0, r6
 800b18a:	f7ff fec1 	bl	800af10 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800b18e:	e7e5      	b.n	800b15c <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x18>
 800b190:	200006f8 	strdcs	r0, [r0], -r8
 800b194:	20000720 	andcs	r0, r0, r0, lsr #14

0800b198 <PixelPatterns::TheaterChaseUpdate(unsigned int)>:
 800b198:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b19c:	4605      	mov	r5, r0
 800b19e:	460c      	mov	r4, r1
 800b1a0:	f04f 0b00 	mov.w	fp, #0
 800b1a4:	4b11      	ldr	r3, [pc, #68]	; (800b1ec <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x54>)
 800b1a6:	4e12      	ldr	r6, [pc, #72]	; (800b1f0 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x58>)
 800b1a8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b1ac:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800b1b0:	f8df a040 	ldr.w	sl, [pc, #64]	; 800b1f4 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x5c>
 800b1b4:	e9d3 7802 	ldrd	r7, r8, [r3, #8]
 800b1b8:	6833      	ldr	r3, [r6, #0]
 800b1ba:	fa1f f08b 	uxth.w	r0, fp
 800b1be:	4283      	cmp	r3, r0
 800b1c0:	d805      	bhi.n	800b1ce <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x36>
 800b1c2:	4621      	mov	r1, r4
 800b1c4:	4628      	mov	r0, r5
 800b1c6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ca:	f7ff bf9d 	b.w	800b108 <PixelPatterns::Increment(unsigned int)>
 800b1ce:	eb09 0300 	add.w	r3, r9, r0
 800b1d2:	fb0a f303 	mul.w	r3, sl, r3
 800b1d6:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 800b1da:	bf94      	ite	ls
 800b1dc:	4639      	movls	r1, r7
 800b1de:	4641      	movhi	r1, r8
 800b1e0:	f7ff fe96 	bl	800af10 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800b1e4:	f10b 0b01 	add.w	fp, fp, #1
 800b1e8:	e7e6      	b.n	800b1b8 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x20>
 800b1ea:	bf00      	nop
 800b1ec:	200006f8 	strdcs	r0, [r0], -r8
 800b1f0:	20000720 	andcs	r0, r0, r0, lsr #14
 800b1f4:	aaaaaaab 	bge	6ab5ca8 <__stack_size+0x6ab44a8>

0800b1f8 <PixelPatterns::ColourWipeUpdate(unsigned int)>:
 800b1f8:	b538      	push	{r3, r4, r5, lr}
 800b1fa:	4605      	mov	r5, r0
 800b1fc:	460c      	mov	r4, r1
 800b1fe:	4b06      	ldr	r3, [pc, #24]	; (800b218 <PixelPatterns::ColourWipeUpdate(unsigned int)+0x20>)
 800b200:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b204:	6899      	ldr	r1, [r3, #8]
 800b206:	6958      	ldr	r0, [r3, #20]
 800b208:	f7ff fe82 	bl	800af10 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800b20c:	4621      	mov	r1, r4
 800b20e:	4628      	mov	r0, r5
 800b210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b214:	f7ff bf78 	b.w	800b108 <PixelPatterns::Increment(unsigned int)>
 800b218:	200006f8 	strdcs	r0, [r0], -r8

0800b21c <PixelPatterns::ScannerUpdate(unsigned int)>:
 800b21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b220:	460d      	mov	r5, r1
 800b222:	f04f 0900 	mov.w	r9, #0
 800b226:	4a27      	ldr	r2, [pc, #156]	; (800b2c4 <PixelPatterns::ScannerUpdate(unsigned int)+0xa8>)
 800b228:	b085      	sub	sp, #20
 800b22a:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 800b22e:	e9d2 7604 	ldrd	r7, r6, [r2, #16]
 800b232:	f8d2 b008 	ldr.w	fp, [r2, #8]
 800b236:	00b3      	lsls	r3, r6, #2
 800b238:	f8df a08c 	ldr.w	sl, [pc, #140]	; 800b2c8 <PixelPatterns::ScannerUpdate(unsigned int)+0xac>
 800b23c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800b2cc <PixelPatterns::ScannerUpdate(unsigned int)+0xb0>
 800b240:	9002      	str	r0, [sp, #8]
 800b242:	9301      	str	r3, [sp, #4]
 800b244:	1bbf      	subs	r7, r7, r6
 800b246:	f8da 1000 	ldr.w	r1, [sl]
 800b24a:	fa1f f489 	uxth.w	r4, r9
 800b24e:	42a1      	cmp	r1, r4
 800b250:	d806      	bhi.n	800b260 <PixelPatterns::ScannerUpdate(unsigned int)+0x44>
 800b252:	4629      	mov	r1, r5
 800b254:	9802      	ldr	r0, [sp, #8]
 800b256:	b005      	add	sp, #20
 800b258:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b25c:	f7ff bf54 	b.w	800b108 <PixelPatterns::Increment(unsigned int)>
 800b260:	42a6      	cmp	r6, r4
 800b262:	d10b      	bne.n	800b27c <PixelPatterns::ScannerUpdate(unsigned int)+0x60>
 800b264:	4659      	mov	r1, fp
 800b266:	4630      	mov	r0, r6
 800b268:	f7ff fe52 	bl	800af10 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800b26c:	f8d8 1000 	ldr.w	r1, [r8]
 800b270:	9b01      	ldr	r3, [sp, #4]
 800b272:	f841 b003 	str.w	fp, [r1, r3]
 800b276:	f109 0901 	add.w	r9, r9, #1
 800b27a:	e7e4      	b.n	800b246 <PixelPatterns::ScannerUpdate(unsigned int)+0x2a>
 800b27c:	42a7      	cmp	r7, r4
 800b27e:	d108      	bne.n	800b292 <PixelPatterns::ScannerUpdate(unsigned int)+0x76>
 800b280:	4659      	mov	r1, fp
 800b282:	4638      	mov	r0, r7
 800b284:	f7ff fe44 	bl	800af10 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800b288:	f8d8 1000 	ldr.w	r1, [r8]
 800b28c:	f841 b024 	str.w	fp, [r1, r4, lsl #2]
 800b290:	e7f1      	b.n	800b276 <PixelPatterns::ScannerUpdate(unsigned int)+0x5a>
 800b292:	f8d8 1000 	ldr.w	r1, [r8]
 800b296:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 800b29a:	f3c0 2146 	ubfx	r1, r0, #9, #7
 800b29e:	f3c0 4c46 	ubfx	ip, r0, #17, #7
 800b2a2:	0209      	lsls	r1, r1, #8
 800b2a4:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800b2a8:	f3c0 0046 	ubfx	r0, r0, #1, #7
 800b2ac:	4301      	orrs	r1, r0
 800b2ae:	4620      	mov	r0, r4
 800b2b0:	9103      	str	r1, [sp, #12]
 800b2b2:	f7ff fe2d 	bl	800af10 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800b2b6:	f8d8 0000 	ldr.w	r0, [r8]
 800b2ba:	9903      	ldr	r1, [sp, #12]
 800b2bc:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 800b2c0:	e7d9      	b.n	800b276 <PixelPatterns::ScannerUpdate(unsigned int)+0x5a>
 800b2c2:	bf00      	nop
 800b2c4:	200006f8 	strdcs	r0, [r0], -r8
 800b2c8:	20000720 	andcs	r0, r0, r0, lsr #14
 800b2cc:	2000071c 	andcs	r0, r0, ip, lsl r7

0800b2d0 <PixelPatterns::FadeUpdate(unsigned int)>:
 800b2d0:	4a21      	ldr	r2, [pc, #132]	; (800b358 <PixelPatterns::FadeUpdate(unsigned int)+0x88>)
 800b2d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2d6:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 800b2da:	4605      	mov	r5, r0
 800b2dc:	e9d2 0704 	ldrd	r0, r7, [r2, #16]
 800b2e0:	460c      	mov	r4, r1
 800b2e2:	e9d2 1302 	ldrd	r1, r3, [r2, #8]
 800b2e6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800b2ea:	437a      	muls	r2, r7
 800b2ec:	1bc6      	subs	r6, r0, r7
 800b2ee:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 800b2f2:	fb06 220c 	mla	r2, r6, ip, r2
 800b2f6:	fbb2 f2f0 	udiv	r2, r2, r0
 800b2fa:	0212      	lsls	r2, r2, #8
 800b2fc:	fa1f fc82 	uxth.w	ip, r2
 800b300:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800b304:	437a      	muls	r2, r7
 800b306:	b2db      	uxtb	r3, r3
 800b308:	437b      	muls	r3, r7
 800b30a:	f3c1 4e07 	ubfx	lr, r1, #16, #8
 800b30e:	fb06 220e 	mla	r2, r6, lr, r2
 800b312:	b2c9      	uxtb	r1, r1
 800b314:	fb06 3301 	mla	r3, r6, r1, r3
 800b318:	fbb2 f2f0 	udiv	r2, r2, r0
 800b31c:	fbb3 f3f0 	udiv	r3, r3, r0
 800b320:	2700      	movs	r7, #0
 800b322:	0412      	lsls	r2, r2, #16
 800b324:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800b328:	ea4c 0202 	orr.w	r2, ip, r2
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	f8df 802c 	ldr.w	r8, [pc, #44]	; 800b35c <PixelPatterns::FadeUpdate(unsigned int)+0x8c>
 800b332:	ea42 0603 	orr.w	r6, r2, r3
 800b336:	f8d8 3000 	ldr.w	r3, [r8]
 800b33a:	429f      	cmp	r7, r3
 800b33c:	d305      	bcc.n	800b34a <PixelPatterns::FadeUpdate(unsigned int)+0x7a>
 800b33e:	4621      	mov	r1, r4
 800b340:	4628      	mov	r0, r5
 800b342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b346:	f7ff bedf 	b.w	800b108 <PixelPatterns::Increment(unsigned int)>
 800b34a:	4638      	mov	r0, r7
 800b34c:	4631      	mov	r1, r6
 800b34e:	f7ff fddf 	bl	800af10 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800b352:	3701      	adds	r7, #1
 800b354:	e7ef      	b.n	800b336 <PixelPatterns::FadeUpdate(unsigned int)+0x66>
 800b356:	bf00      	nop
 800b358:	200006f8 	strdcs	r0, [r0], -r8
 800b35c:	20000720 	andcs	r0, r0, r0, lsr #14

0800b360 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>:
 800b360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b362:	4b12      	ldr	r3, [pc, #72]	; (800b3ac <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x4c>)
 800b364:	014e      	lsls	r6, r1, #5
 800b366:	599c      	ldr	r4, [r3, r6]
 800b368:	eb03 1541 	add.w	r5, r3, r1, lsl #5
 800b36c:	686f      	ldr	r7, [r5, #4]
 800b36e:	1b14      	subs	r4, r2, r4
 800b370:	42bc      	cmp	r4, r7
 800b372:	d319      	bcc.n	800b3a8 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 800b374:	519a      	str	r2, [r3, r6]
 800b376:	69eb      	ldr	r3, [r5, #28]
 800b378:	3b01      	subs	r3, #1
 800b37a:	2b04      	cmp	r3, #4
 800b37c:	d814      	bhi.n	800b3a8 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 800b37e:	e8df f003 	tbb	[pc, r3]
 800b382:	0d0a0703 	stceq	7, cr0, [sl, #-12]
 800b386:	f7ff0010 			; <UNDEFINED> instruction: 0xf7ff0010
 800b38a:	fedc 2001 	cdp2	0, 13, cr2, cr12, cr1, {0}
 800b38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b390:	f7ff ff02 	bl	800b198 <PixelPatterns::TheaterChaseUpdate(unsigned int)>
 800b394:	e7fa      	b.n	800b38c <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800b396:	f7ff ff2f 	bl	800b1f8 <PixelPatterns::ColourWipeUpdate(unsigned int)>
 800b39a:	e7f7      	b.n	800b38c <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800b39c:	f7ff ff3e 	bl	800b21c <PixelPatterns::ScannerUpdate(unsigned int)>
 800b3a0:	e7f4      	b.n	800b38c <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800b3a2:	f7ff ff95 	bl	800b2d0 <PixelPatterns::FadeUpdate(unsigned int)>
 800b3a6:	e7f1      	b.n	800b38c <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800b3a8:	2000      	movs	r0, #0
 800b3aa:	e7f0      	b.n	800b38e <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2e>
 800b3ac:	200006f8 	strdcs	r0, [r0], -r8

0800b3b0 <PixelPatterns::Run()>:
 800b3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3b4:	4606      	mov	r6, r0
 800b3b6:	f006 ff7f 	bl	80122b8 <gd32_spi_dma_tx_is_active()>
 800b3ba:	4604      	mov	r4, r0
 800b3bc:	b9c0      	cbnz	r0, 800b3f0 <PixelPatterns::Run()+0x40>
 800b3be:	4605      	mov	r5, r0
 800b3c0:	4b0c      	ldr	r3, [pc, #48]	; (800b3f4 <PixelPatterns::Run()+0x44>)
 800b3c2:	4f0d      	ldr	r7, [pc, #52]	; (800b3f8 <PixelPatterns::Run()+0x48>)
 800b3c4:	f8d3 8000 	ldr.w	r8, [r3]
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	b2e9      	uxtb	r1, r5
 800b3cc:	428b      	cmp	r3, r1
 800b3ce:	f105 0501 	add.w	r5, r5, #1
 800b3d2:	d806      	bhi.n	800b3e2 <PixelPatterns::Run()+0x32>
 800b3d4:	b164      	cbz	r4, 800b3f0 <PixelPatterns::Run()+0x40>
 800b3d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3da:	4b08      	ldr	r3, [pc, #32]	; (800b3fc <PixelPatterns::Run()+0x4c>)
 800b3dc:	6818      	ldr	r0, [r3, #0]
 800b3de:	f000 bf6f 	b.w	800c2c0 <WS28xx::Update()>
 800b3e2:	4642      	mov	r2, r8
 800b3e4:	4630      	mov	r0, r6
 800b3e6:	f7ff ffbb 	bl	800b360 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>
 800b3ea:	4304      	orrs	r4, r0
 800b3ec:	b2e4      	uxtb	r4, r4
 800b3ee:	e7eb      	b.n	800b3c8 <PixelPatterns::Run()+0x18>
 800b3f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3f4:	200097ac 	andcs	r9, r0, ip, lsr #15
 800b3f8:	20000718 	andcs	r0, r0, r8, lsl r7
 800b3fc:	20000724 	andcs	r0, r0, r4, lsr #14

0800b400 <PixelType::GetType(pixel::Type)>:
 800b400:	280d      	cmp	r0, #13
 800b402:	bfda      	itte	le
 800b404:	4b02      	ldrle	r3, [pc, #8]	; (800b410 <PixelType::GetType(pixel::Type)+0x10>)
 800b406:	eb03 00c0 	addle.w	r0, r3, r0, lsl #3
 800b40a:	4802      	ldrgt	r0, [pc, #8]	; (800b414 <PixelType::GetType(pixel::Type)+0x14>)
 800b40c:	4770      	bx	lr
 800b40e:	bf00      	nop
 800b410:	08013603 	stmdaeq	r1, {r0, r1, r9, sl, ip, sp}
 800b414:	080135d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r8, sl, ip, sp}

0800b418 <PixelType::GetType(char const*)>:
 800b418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b41a:	4604      	mov	r4, r0
 800b41c:	2000      	movs	r0, #0
 800b41e:	490f      	ldr	r1, [pc, #60]	; (800b45c <PixelType::GetType(char const*)+0x44>)
 800b420:	1e67      	subs	r7, r4, #1
 800b422:	1e4e      	subs	r6, r1, #1
 800b424:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800b428:	4615      	mov	r5, r2
 800b42a:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 800b42e:	2b19      	cmp	r3, #25
 800b430:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800b434:	bf98      	it	ls
 800b436:	f102 0520 	addls.w	r5, r2, #32
 800b43a:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 800b43e:	f1bc 0f19 	cmp.w	ip, #25
 800b442:	bf98      	it	ls
 800b444:	3320      	addls	r3, #32
 800b446:	42ab      	cmp	r3, r5
 800b448:	d005      	beq.n	800b456 <PixelType::GetType(char const*)+0x3e>
 800b44a:	3001      	adds	r0, #1
 800b44c:	280e      	cmp	r0, #14
 800b44e:	f101 0108 	add.w	r1, r1, #8
 800b452:	d1e5      	bne.n	800b420 <PixelType::GetType(char const*)+0x8>
 800b454:	e001      	b.n	800b45a <PixelType::GetType(char const*)+0x42>
 800b456:	2a00      	cmp	r2, #0
 800b458:	d1e4      	bne.n	800b424 <PixelType::GetType(char const*)+0xc>
 800b45a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b45c:	08013603 	stmdaeq	r1, {r0, r1, r9, sl, ip, sp}

0800b460 <PixelType::GetMap(char const*)>:
 800b460:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b462:	4605      	mov	r5, r0
 800b464:	2000      	movs	r0, #0
 800b466:	4b11      	ldr	r3, [pc, #68]	; (800b4ac <PixelType::GetMap(char const*)+0x4c>)
 800b468:	1e5c      	subs	r4, r3, #1
 800b46a:	1e6e      	subs	r6, r5, #1
 800b46c:	f103 0c02 	add.w	ip, r3, #2
 800b470:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 800b474:	4617      	mov	r7, r2
 800b476:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 800b47a:	2919      	cmp	r1, #25
 800b47c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b480:	bf98      	it	ls
 800b482:	f102 0720 	addls.w	r7, r2, #32
 800b486:	f1a1 0e41 	sub.w	lr, r1, #65	; 0x41
 800b48a:	f1be 0f19 	cmp.w	lr, #25
 800b48e:	bf98      	it	ls
 800b490:	3120      	addls	r1, #32
 800b492:	42b9      	cmp	r1, r7
 800b494:	d005      	beq.n	800b4a2 <PixelType::GetMap(char const*)+0x42>
 800b496:	3001      	adds	r0, #1
 800b498:	2806      	cmp	r0, #6
 800b49a:	f103 0304 	add.w	r3, r3, #4
 800b49e:	d1e3      	bne.n	800b468 <PixelType::GetMap(char const*)+0x8>
 800b4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4a2:	2a00      	cmp	r2, #0
 800b4a4:	d0fc      	beq.n	800b4a0 <PixelType::GetMap(char const*)+0x40>
 800b4a6:	4564      	cmp	r4, ip
 800b4a8:	d1e2      	bne.n	800b470 <PixelType::GetMap(char const*)+0x10>
 800b4aa:	e7f9      	b.n	800b4a0 <PixelType::GetMap(char const*)+0x40>
 800b4ac:	080135eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r8, sl, ip, sp}

0800b4b0 <PixelType::GetMap(pixel::Map)>:
 800b4b0:	2805      	cmp	r0, #5
 800b4b2:	bfda      	itte	le
 800b4b4:	4b02      	ldrle	r3, [pc, #8]	; (800b4c0 <PixelType::GetMap(pixel::Map)+0x10>)
 800b4b6:	eb03 0080 	addle.w	r0, r3, r0, lsl #2
 800b4ba:	4802      	ldrgt	r0, [pc, #8]	; (800b4c4 <PixelType::GetMap(pixel::Map)+0x14>)
 800b4bc:	4770      	bx	lr
 800b4be:	bf00      	nop
 800b4c0:	080135eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r8, sl, ip, sp}
 800b4c4:	080135e1 	stmdaeq	r1, {r0, r5, r6, r7, r8, sl, ip, sp}

0800b4c8 <PixelType::ConvertTxH(unsigned char)>:
 800b4c8:	28f0      	cmp	r0, #240	; 0xf0
 800b4ca:	d010      	beq.n	800b4ee <PixelType::ConvertTxH(unsigned char)+0x26>
 800b4cc:	d807      	bhi.n	800b4de <PixelType::ConvertTxH(unsigned char)+0x16>
 800b4ce:	28c0      	cmp	r0, #192	; 0xc0
 800b4d0:	d00f      	beq.n	800b4f2 <PixelType::ConvertTxH(unsigned char)+0x2a>
 800b4d2:	28e0      	cmp	r0, #224	; 0xe0
 800b4d4:	d00f      	beq.n	800b4f6 <PixelType::ConvertTxH(unsigned char)+0x2e>
 800b4d6:	2880      	cmp	r0, #128	; 0x80
 800b4d8:	d113      	bne.n	800b502 <PixelType::ConvertTxH(unsigned char)+0x3a>
 800b4da:	480b      	ldr	r0, [pc, #44]	; (800b508 <PixelType::ConvertTxH(unsigned char)+0x40>)
 800b4dc:	4770      	bx	lr
 800b4de:	28fc      	cmp	r0, #252	; 0xfc
 800b4e0:	d00b      	beq.n	800b4fa <PixelType::ConvertTxH(unsigned char)+0x32>
 800b4e2:	28fe      	cmp	r0, #254	; 0xfe
 800b4e4:	d00b      	beq.n	800b4fe <PixelType::ConvertTxH(unsigned char)+0x36>
 800b4e6:	28f8      	cmp	r0, #248	; 0xf8
 800b4e8:	d10b      	bne.n	800b502 <PixelType::ConvertTxH(unsigned char)+0x3a>
 800b4ea:	4808      	ldr	r0, [pc, #32]	; (800b50c <PixelType::ConvertTxH(unsigned char)+0x44>)
 800b4ec:	4770      	bx	lr
 800b4ee:	4808      	ldr	r0, [pc, #32]	; (800b510 <PixelType::ConvertTxH(unsigned char)+0x48>)
 800b4f0:	4770      	bx	lr
 800b4f2:	4808      	ldr	r0, [pc, #32]	; (800b514 <PixelType::ConvertTxH(unsigned char)+0x4c>)
 800b4f4:	4770      	bx	lr
 800b4f6:	4808      	ldr	r0, [pc, #32]	; (800b518 <PixelType::ConvertTxH(unsigned char)+0x50>)
 800b4f8:	4770      	bx	lr
 800b4fa:	4808      	ldr	r0, [pc, #32]	; (800b51c <PixelType::ConvertTxH(unsigned char)+0x54>)
 800b4fc:	4770      	bx	lr
 800b4fe:	4808      	ldr	r0, [pc, #32]	; (800b520 <PixelType::ConvertTxH(unsigned char)+0x58>)
 800b500:	4770      	bx	lr
 800b502:	2000      	movs	r0, #0
 800b504:	4770      	bx	lr
 800b506:	bf00      	nop
 800b508:	3e200000 	cdpcc	0, 2, cr0, cr0, cr0, {0}
 800b50c:	3f480000 	svccc	0x00480000
 800b510:	3f200000 	svccc	0x00200000
 800b514:	3ea00000 	cdpcc	0, 10, cr0, cr0, cr0, {0}
 800b518:	3ef00000 	cdpcc	0, 15, cr0, cr0, cr0, {0}
 800b51c:	3f700000 	svccc	0x00700000
 800b520:	3f8c0000 	svccc	0x008c0000

0800b524 <PixelType::ConvertTxH(float)>:
 800b524:	b510      	push	{r4, lr}
 800b526:	491d      	ldr	r1, [pc, #116]	; (800b59c <PixelType::ConvertTxH(float)+0x78>)
 800b528:	4604      	mov	r4, r0
 800b52a:	f7fc fc87 	bl	8007e3c <__aeabi_fcmplt>
 800b52e:	bb30      	cbnz	r0, 800b57e <PixelType::ConvertTxH(float)+0x5a>
 800b530:	4620      	mov	r0, r4
 800b532:	491b      	ldr	r1, [pc, #108]	; (800b5a0 <PixelType::ConvertTxH(float)+0x7c>)
 800b534:	f7fc fc82 	bl	8007e3c <__aeabi_fcmplt>
 800b538:	bb18      	cbnz	r0, 800b582 <PixelType::ConvertTxH(float)+0x5e>
 800b53a:	4620      	mov	r0, r4
 800b53c:	4919      	ldr	r1, [pc, #100]	; (800b5a4 <PixelType::ConvertTxH(float)+0x80>)
 800b53e:	f7fc fc7d 	bl	8007e3c <__aeabi_fcmplt>
 800b542:	bb00      	cbnz	r0, 800b586 <PixelType::ConvertTxH(float)+0x62>
 800b544:	4620      	mov	r0, r4
 800b546:	4918      	ldr	r1, [pc, #96]	; (800b5a8 <PixelType::ConvertTxH(float)+0x84>)
 800b548:	f7fc fc78 	bl	8007e3c <__aeabi_fcmplt>
 800b54c:	b9e8      	cbnz	r0, 800b58a <PixelType::ConvertTxH(float)+0x66>
 800b54e:	4620      	mov	r0, r4
 800b550:	4916      	ldr	r1, [pc, #88]	; (800b5ac <PixelType::ConvertTxH(float)+0x88>)
 800b552:	f7fc fc73 	bl	8007e3c <__aeabi_fcmplt>
 800b556:	b9d0      	cbnz	r0, 800b58e <PixelType::ConvertTxH(float)+0x6a>
 800b558:	4620      	mov	r0, r4
 800b55a:	4915      	ldr	r1, [pc, #84]	; (800b5b0 <PixelType::ConvertTxH(float)+0x8c>)
 800b55c:	f7fc fc6e 	bl	8007e3c <__aeabi_fcmplt>
 800b560:	b9b8      	cbnz	r0, 800b592 <PixelType::ConvertTxH(float)+0x6e>
 800b562:	4620      	mov	r0, r4
 800b564:	4913      	ldr	r1, [pc, #76]	; (800b5b4 <PixelType::ConvertTxH(float)+0x90>)
 800b566:	f7fc fc69 	bl	8007e3c <__aeabi_fcmplt>
 800b56a:	b9a0      	cbnz	r0, 800b596 <PixelType::ConvertTxH(float)+0x72>
 800b56c:	4620      	mov	r0, r4
 800b56e:	4912      	ldr	r1, [pc, #72]	; (800b5b8 <PixelType::ConvertTxH(float)+0x94>)
 800b570:	f7fc fc64 	bl	8007e3c <__aeabi_fcmplt>
 800b574:	2800      	cmp	r0, #0
 800b576:	bf14      	ite	ne
 800b578:	20fe      	movne	r0, #254	; 0xfe
 800b57a:	2000      	moveq	r0, #0
 800b57c:	bd10      	pop	{r4, pc}
 800b57e:	2000      	movs	r0, #0
 800b580:	e7fc      	b.n	800b57c <PixelType::ConvertTxH(float)+0x58>
 800b582:	2080      	movs	r0, #128	; 0x80
 800b584:	e7fa      	b.n	800b57c <PixelType::ConvertTxH(float)+0x58>
 800b586:	20c0      	movs	r0, #192	; 0xc0
 800b588:	e7f8      	b.n	800b57c <PixelType::ConvertTxH(float)+0x58>
 800b58a:	20e0      	movs	r0, #224	; 0xe0
 800b58c:	e7f6      	b.n	800b57c <PixelType::ConvertTxH(float)+0x58>
 800b58e:	20f0      	movs	r0, #240	; 0xf0
 800b590:	e7f4      	b.n	800b57c <PixelType::ConvertTxH(float)+0x58>
 800b592:	20f8      	movs	r0, #248	; 0xf8
 800b594:	e7f2      	b.n	800b57c <PixelType::ConvertTxH(float)+0x58>
 800b596:	20fc      	movs	r0, #252	; 0xfc
 800b598:	e7f0      	b.n	800b57c <PixelType::ConvertTxH(float)+0x58>
 800b59a:	bf00      	nop
 800b59c:	3da00000 	stccc	0, cr0, [r0]
 800b5a0:	3e700000 	cdpcc	0, 7, cr0, cr0, cr0, {0}
 800b5a4:	3ec80000 	cdpcc	0, 12, cr0, cr8, cr0, {0}
 800b5a8:	3f0c0000 	svccc	0x000c0000
 800b5ac:	3f340000 	svccc	0x00340000
 800b5b0:	3f5c0000 	svccc	0x005c0000
 800b5b4:	3f820000 	svccc	0x00820000
 800b5b8:	3f960000 	svccc	0x00960000

0800b5bc <WS28xx::Print()>:
 800b5bc:	b513      	push	{r0, r1, r4, lr}
 800b5be:	4604      	mov	r4, r0
 800b5c0:	4819      	ldr	r0, [pc, #100]	; (800b628 <WS28xx::Print()+0x6c>)
 800b5c2:	f7fd fe6b 	bl	800929c <printf>
 800b5c6:	6820      	ldr	r0, [r4, #0]
 800b5c8:	f7ff ff1a 	bl	800b400 <PixelType::GetType(pixel::Type)>
 800b5cc:	6822      	ldr	r2, [r4, #0]
 800b5ce:	4601      	mov	r1, r0
 800b5d0:	4816      	ldr	r0, [pc, #88]	; (800b62c <WS28xx::Print()+0x70>)
 800b5d2:	f7fd fe63 	bl	800929c <printf>
 800b5d6:	6861      	ldr	r1, [r4, #4]
 800b5d8:	4815      	ldr	r0, [pc, #84]	; (800b630 <WS28xx::Print()+0x74>)
 800b5da:	f7fd fe5f 	bl	800929c <printf>
 800b5de:	7ca3      	ldrb	r3, [r4, #18]
 800b5e0:	b1fb      	cbz	r3, 800b622 <WS28xx::Print()+0x66>
 800b5e2:	68a0      	ldr	r0, [r4, #8]
 800b5e4:	f7ff ff64 	bl	800b4b0 <PixelType::GetMap(pixel::Map)>
 800b5e8:	68a2      	ldr	r2, [r4, #8]
 800b5ea:	4601      	mov	r1, r0
 800b5ec:	4811      	ldr	r0, [pc, #68]	; (800b634 <WS28xx::Print()+0x78>)
 800b5ee:	f7fd fe55 	bl	800929c <printf>
 800b5f2:	7c20      	ldrb	r0, [r4, #16]
 800b5f4:	f7ff ff68 	bl	800b4c8 <PixelType::ConvertTxH(unsigned char)>
 800b5f8:	f7fc fdec 	bl	80081d4 <__aeabi_f2d>
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	7c21      	ldrb	r1, [r4, #16]
 800b600:	4602      	mov	r2, r0
 800b602:	9100      	str	r1, [sp, #0]
 800b604:	480c      	ldr	r0, [pc, #48]	; (800b638 <WS28xx::Print()+0x7c>)
 800b606:	f7fd fe49 	bl	800929c <printf>
 800b60a:	7c60      	ldrb	r0, [r4, #17]
 800b60c:	f7ff ff5c 	bl	800b4c8 <PixelType::ConvertTxH(unsigned char)>
 800b610:	f7fc fde0 	bl	80081d4 <__aeabi_f2d>
 800b614:	460b      	mov	r3, r1
 800b616:	7c61      	ldrb	r1, [r4, #17]
 800b618:	4602      	mov	r2, r0
 800b61a:	9100      	str	r1, [sp, #0]
 800b61c:	4807      	ldr	r0, [pc, #28]	; (800b63c <WS28xx::Print()+0x80>)
 800b61e:	f7fd fe3d 	bl	800929c <printf>
 800b622:	b002      	add	sp, #8
 800b624:	bd10      	pop	{r4, pc}
 800b626:	bf00      	nop
 800b628:	08013673 	stmdaeq	r1, {r0, r1, r4, r5, r6, r9, sl, ip, sp}
 800b62c:	08013685 	stmdaeq	r1, {r0, r2, r7, r9, sl, ip, sp}
 800b630:	08013699 	stmdaeq	r1, {r0, r3, r4, r7, r9, sl, ip, sp}
 800b634:	080136a8 	stmdaeq	r1, {r3, r5, r7, r9, sl, ip, sp}
 800b638:	080136bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r9, sl, ip, sp}
 800b63c:	080136d4 	stmdaeq	r1, {r2, r4, r6, r7, r9, sl, ip, sp}

0800b640 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>:
 800b640:	b530      	push	{r4, r5, lr}
 800b642:	7c84      	ldrb	r4, [r0, #18]
 800b644:	f89d c00c 	ldrb.w	ip, [sp, #12]
 800b648:	b994      	cbnz	r4, 800b670 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x30>
 800b64a:	6804      	ldr	r4, [r0, #0]
 800b64c:	f1a4 0e0b 	sub.w	lr, r4, #11
 800b650:	f1be 0f01 	cmp.w	lr, #1
 800b654:	d93d      	bls.n	800b6d2 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x92>
 800b656:	b9d4      	cbnz	r4, 800b68e <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x4e>
 800b658:	6944      	ldr	r4, [r0, #20]
 800b65a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800b65e:	5462      	strb	r2, [r4, r1]
 800b660:	6942      	ldr	r2, [r0, #20]
 800b662:	440a      	add	r2, r1
 800b664:	7053      	strb	r3, [r2, #1]
 800b666:	6943      	ldr	r3, [r0, #20]
 800b668:	440b      	add	r3, r1
 800b66a:	f883 c002 	strb.w	ip, [r3, #2]
 800b66e:	bd30      	pop	{r4, r5, pc}
 800b670:	6884      	ldr	r4, [r0, #8]
 800b672:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800b676:	00c9      	lsls	r1, r1, #3
 800b678:	2c05      	cmp	r4, #5
 800b67a:	f200 812d 	bhi.w	800b8d8 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x298>
 800b67e:	e8df f014 	tbh	[pc, r4, lsl #1]
 800b682:	02ed012b 	rsceq	r0, sp, #-1073741814	; 0xc000000a
 800b686:	04140384 	ldreq	r0, [r4], #-900	; 0xfffffc7c
 800b68a:	0202003b 	andeq	r0, r2, #59	; 0x3b
 800b68e:	ea6f 0e9c 	mvn.w	lr, ip, lsr #2
 800b692:	ea6f 1413 	mvn.w	r4, r3, lsr #4
 800b696:	f082 05c0 	eor.w	r5, r2, #192	; 0xc0
 800b69a:	f00e 0e30 	and.w	lr, lr, #48	; 0x30
 800b69e:	f004 040c 	and.w	r4, r4, #12
 800b6a2:	ea4e 1e95 	orr.w	lr, lr, r5, lsr #6
 800b6a6:	ea4e 0e04 	orr.w	lr, lr, r4
 800b6aa:	6944      	ldr	r4, [r0, #20]
 800b6ac:	3101      	adds	r1, #1
 800b6ae:	f06e 0e3f 	orn	lr, lr, #63	; 0x3f
 800b6b2:	f804 e021 	strb.w	lr, [r4, r1, lsl #2]
 800b6b6:	6944      	ldr	r4, [r0, #20]
 800b6b8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800b6bc:	f884 c001 	strb.w	ip, [r4, #1]
 800b6c0:	6944      	ldr	r4, [r0, #20]
 800b6c2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800b6c6:	70a3      	strb	r3, [r4, #2]
 800b6c8:	6943      	ldr	r3, [r0, #20]
 800b6ca:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800b6ce:	70da      	strb	r2, [r3, #3]
 800b6d0:	bd30      	pop	{r4, r5, pc}
 800b6d2:	6944      	ldr	r4, [r0, #20]
 800b6d4:	7cc5      	ldrb	r5, [r0, #19]
 800b6d6:	3101      	adds	r1, #1
 800b6d8:	f804 5021 	strb.w	r5, [r4, r1, lsl #2]
 800b6dc:	6944      	ldr	r4, [r0, #20]
 800b6de:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800b6e2:	7062      	strb	r2, [r4, #1]
 800b6e4:	6942      	ldr	r2, [r0, #20]
 800b6e6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b6ea:	7093      	strb	r3, [r2, #2]
 800b6ec:	6943      	ldr	r3, [r0, #20]
 800b6ee:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800b6f2:	f883 c003 	strb.w	ip, [r3, #3]
 800b6f6:	bd30      	pop	{r4, r5, pc}
 800b6f8:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800b6fc:	bf0c      	ite	eq
 800b6fe:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800b702:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800b706:	6945      	ldr	r5, [r0, #20]
 800b708:	1c4c      	adds	r4, r1, #1
 800b70a:	f805 e004 	strb.w	lr, [r5, r4]
 800b70e:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800b712:	bf0c      	ite	eq
 800b714:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800b718:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800b71c:	6945      	ldr	r5, [r0, #20]
 800b71e:	1c8c      	adds	r4, r1, #2
 800b720:	f805 e004 	strb.w	lr, [r5, r4]
 800b724:	f01c 0f20 	tst.w	ip, #32
 800b728:	bf0c      	ite	eq
 800b72a:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800b72e:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800b732:	6945      	ldr	r5, [r0, #20]
 800b734:	1ccc      	adds	r4, r1, #3
 800b736:	f805 e004 	strb.w	lr, [r5, r4]
 800b73a:	f01c 0f10 	tst.w	ip, #16
 800b73e:	bf0c      	ite	eq
 800b740:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800b744:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800b748:	6945      	ldr	r5, [r0, #20]
 800b74a:	1d0c      	adds	r4, r1, #4
 800b74c:	f01c 0f08 	tst.w	ip, #8
 800b750:	f805 e004 	strb.w	lr, [r5, r4]
 800b754:	bf0c      	ite	eq
 800b756:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800b75a:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800b75e:	6945      	ldr	r5, [r0, #20]
 800b760:	1d4c      	adds	r4, r1, #5
 800b762:	f01c 0f04 	tst.w	ip, #4
 800b766:	f805 e004 	strb.w	lr, [r5, r4]
 800b76a:	bf0c      	ite	eq
 800b76c:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800b770:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800b774:	6945      	ldr	r5, [r0, #20]
 800b776:	1d8c      	adds	r4, r1, #6
 800b778:	f01c 0f02 	tst.w	ip, #2
 800b77c:	f805 e004 	strb.w	lr, [r5, r4]
 800b780:	bf0c      	ite	eq
 800b782:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800b786:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800b78a:	6945      	ldr	r5, [r0, #20]
 800b78c:	1dcc      	adds	r4, r1, #7
 800b78e:	f01c 0f01 	tst.w	ip, #1
 800b792:	f805 e004 	strb.w	lr, [r5, r4]
 800b796:	bf14      	ite	ne
 800b798:	f890 c011 	ldrbne.w	ip, [r0, #17]
 800b79c:	f890 c010 	ldrbeq.w	ip, [r0, #16]
 800b7a0:	6945      	ldr	r5, [r0, #20]
 800b7a2:	f101 0408 	add.w	r4, r1, #8
 800b7a6:	f805 c004 	strb.w	ip, [r5, r4]
 800b7aa:	0615      	lsls	r5, r2, #24
 800b7ac:	bf54      	ite	pl
 800b7ae:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800b7b2:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800b7b6:	6945      	ldr	r5, [r0, #20]
 800b7b8:	f101 0409 	add.w	r4, r1, #9
 800b7bc:	f805 c004 	strb.w	ip, [r5, r4]
 800b7c0:	0655      	lsls	r5, r2, #25
 800b7c2:	bf54      	ite	pl
 800b7c4:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800b7c8:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800b7cc:	6945      	ldr	r5, [r0, #20]
 800b7ce:	f101 040a 	add.w	r4, r1, #10
 800b7d2:	f805 c004 	strb.w	ip, [r5, r4]
 800b7d6:	0695      	lsls	r5, r2, #26
 800b7d8:	bf54      	ite	pl
 800b7da:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800b7de:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800b7e2:	6945      	ldr	r5, [r0, #20]
 800b7e4:	f101 040b 	add.w	r4, r1, #11
 800b7e8:	f805 c004 	strb.w	ip, [r5, r4]
 800b7ec:	06d5      	lsls	r5, r2, #27
 800b7ee:	bf54      	ite	pl
 800b7f0:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800b7f4:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800b7f8:	6945      	ldr	r5, [r0, #20]
 800b7fa:	f101 040c 	add.w	r4, r1, #12
 800b7fe:	f805 c004 	strb.w	ip, [r5, r4]
 800b802:	0715      	lsls	r5, r2, #28
 800b804:	bf54      	ite	pl
 800b806:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800b80a:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800b80e:	6945      	ldr	r5, [r0, #20]
 800b810:	f101 040d 	add.w	r4, r1, #13
 800b814:	f805 c004 	strb.w	ip, [r5, r4]
 800b818:	0755      	lsls	r5, r2, #29
 800b81a:	bf54      	ite	pl
 800b81c:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800b820:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800b824:	6945      	ldr	r5, [r0, #20]
 800b826:	f101 040e 	add.w	r4, r1, #14
 800b82a:	f805 c004 	strb.w	ip, [r5, r4]
 800b82e:	0795      	lsls	r5, r2, #30
 800b830:	bf58      	it	pl
 800b832:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800b836:	6945      	ldr	r5, [r0, #20]
 800b838:	bf48      	it	mi
 800b83a:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800b83e:	f101 040f 	add.w	r4, r1, #15
 800b842:	f805 c004 	strb.w	ip, [r5, r4]
 800b846:	07d5      	lsls	r5, r2, #31
 800b848:	bf4c      	ite	mi
 800b84a:	7c45      	ldrbmi	r5, [r0, #17]
 800b84c:	7c05      	ldrbpl	r5, [r0, #16]
 800b84e:	6942      	ldr	r2, [r0, #20]
 800b850:	f101 0410 	add.w	r4, r1, #16
 800b854:	5515      	strb	r5, [r2, r4]
 800b856:	061c      	lsls	r4, r3, #24
 800b858:	bf54      	ite	pl
 800b85a:	7c05      	ldrbpl	r5, [r0, #16]
 800b85c:	7c45      	ldrbmi	r5, [r0, #17]
 800b85e:	6944      	ldr	r4, [r0, #20]
 800b860:	f101 0211 	add.w	r2, r1, #17
 800b864:	54a5      	strb	r5, [r4, r2]
 800b866:	065d      	lsls	r5, r3, #25
 800b868:	bf54      	ite	pl
 800b86a:	7c05      	ldrbpl	r5, [r0, #16]
 800b86c:	7c45      	ldrbmi	r5, [r0, #17]
 800b86e:	6944      	ldr	r4, [r0, #20]
 800b870:	f101 0212 	add.w	r2, r1, #18
 800b874:	54a5      	strb	r5, [r4, r2]
 800b876:	069c      	lsls	r4, r3, #26
 800b878:	bf54      	ite	pl
 800b87a:	7c05      	ldrbpl	r5, [r0, #16]
 800b87c:	7c45      	ldrbmi	r5, [r0, #17]
 800b87e:	6944      	ldr	r4, [r0, #20]
 800b880:	f101 0213 	add.w	r2, r1, #19
 800b884:	54a5      	strb	r5, [r4, r2]
 800b886:	06dd      	lsls	r5, r3, #27
 800b888:	bf54      	ite	pl
 800b88a:	7c05      	ldrbpl	r5, [r0, #16]
 800b88c:	7c45      	ldrbmi	r5, [r0, #17]
 800b88e:	6944      	ldr	r4, [r0, #20]
 800b890:	f101 0214 	add.w	r2, r1, #20
 800b894:	54a5      	strb	r5, [r4, r2]
 800b896:	071c      	lsls	r4, r3, #28
 800b898:	bf54      	ite	pl
 800b89a:	7c05      	ldrbpl	r5, [r0, #16]
 800b89c:	7c45      	ldrbmi	r5, [r0, #17]
 800b89e:	6944      	ldr	r4, [r0, #20]
 800b8a0:	f101 0215 	add.w	r2, r1, #21
 800b8a4:	54a5      	strb	r5, [r4, r2]
 800b8a6:	075d      	lsls	r5, r3, #29
 800b8a8:	bf54      	ite	pl
 800b8aa:	7c05      	ldrbpl	r5, [r0, #16]
 800b8ac:	7c45      	ldrbmi	r5, [r0, #17]
 800b8ae:	6944      	ldr	r4, [r0, #20]
 800b8b0:	f101 0216 	add.w	r2, r1, #22
 800b8b4:	54a5      	strb	r5, [r4, r2]
 800b8b6:	079c      	lsls	r4, r3, #30
 800b8b8:	bf54      	ite	pl
 800b8ba:	7c05      	ldrbpl	r5, [r0, #16]
 800b8bc:	7c45      	ldrbmi	r5, [r0, #17]
 800b8be:	6944      	ldr	r4, [r0, #20]
 800b8c0:	f101 0217 	add.w	r2, r1, #23
 800b8c4:	54a5      	strb	r5, [r4, r2]
 800b8c6:	3118      	adds	r1, #24
 800b8c8:	f013 0f01 	tst.w	r3, #1
 800b8cc:	f000 80d9 	beq.w	800ba82 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x442>
 800b8d0:	7c42      	ldrb	r2, [r0, #17]
 800b8d2:	6943      	ldr	r3, [r0, #20]
 800b8d4:	545a      	strb	r2, [r3, r1]
 800b8d6:	bd30      	pop	{r4, r5, pc}
 800b8d8:	0615      	lsls	r5, r2, #24
 800b8da:	bf54      	ite	pl
 800b8dc:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800b8e0:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800b8e4:	6945      	ldr	r5, [r0, #20]
 800b8e6:	1c4c      	adds	r4, r1, #1
 800b8e8:	f805 e004 	strb.w	lr, [r5, r4]
 800b8ec:	0655      	lsls	r5, r2, #25
 800b8ee:	bf54      	ite	pl
 800b8f0:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800b8f4:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800b8f8:	6945      	ldr	r5, [r0, #20]
 800b8fa:	1c8c      	adds	r4, r1, #2
 800b8fc:	f805 e004 	strb.w	lr, [r5, r4]
 800b900:	0695      	lsls	r5, r2, #26
 800b902:	bf54      	ite	pl
 800b904:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800b908:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800b90c:	6945      	ldr	r5, [r0, #20]
 800b90e:	1ccc      	adds	r4, r1, #3
 800b910:	f805 e004 	strb.w	lr, [r5, r4]
 800b914:	06d5      	lsls	r5, r2, #27
 800b916:	bf54      	ite	pl
 800b918:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800b91c:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800b920:	6945      	ldr	r5, [r0, #20]
 800b922:	1d0c      	adds	r4, r1, #4
 800b924:	f805 e004 	strb.w	lr, [r5, r4]
 800b928:	0715      	lsls	r5, r2, #28
 800b92a:	bf54      	ite	pl
 800b92c:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800b930:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800b934:	6945      	ldr	r5, [r0, #20]
 800b936:	1d4c      	adds	r4, r1, #5
 800b938:	f805 e004 	strb.w	lr, [r5, r4]
 800b93c:	0755      	lsls	r5, r2, #29
 800b93e:	bf54      	ite	pl
 800b940:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800b944:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800b948:	6945      	ldr	r5, [r0, #20]
 800b94a:	1d8c      	adds	r4, r1, #6
 800b94c:	f805 e004 	strb.w	lr, [r5, r4]
 800b950:	0795      	lsls	r5, r2, #30
 800b952:	bf58      	it	pl
 800b954:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800b958:	6945      	ldr	r5, [r0, #20]
 800b95a:	bf48      	it	mi
 800b95c:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800b960:	1dcc      	adds	r4, r1, #7
 800b962:	f805 e004 	strb.w	lr, [r5, r4]
 800b966:	07d5      	lsls	r5, r2, #31
 800b968:	bf4c      	ite	mi
 800b96a:	7c45      	ldrbmi	r5, [r0, #17]
 800b96c:	7c05      	ldrbpl	r5, [r0, #16]
 800b96e:	6942      	ldr	r2, [r0, #20]
 800b970:	f101 0408 	add.w	r4, r1, #8
 800b974:	5515      	strb	r5, [r2, r4]
 800b976:	061c      	lsls	r4, r3, #24
 800b978:	bf54      	ite	pl
 800b97a:	7c05      	ldrbpl	r5, [r0, #16]
 800b97c:	7c45      	ldrbmi	r5, [r0, #17]
 800b97e:	6944      	ldr	r4, [r0, #20]
 800b980:	f101 0209 	add.w	r2, r1, #9
 800b984:	54a5      	strb	r5, [r4, r2]
 800b986:	065d      	lsls	r5, r3, #25
 800b988:	bf54      	ite	pl
 800b98a:	7c05      	ldrbpl	r5, [r0, #16]
 800b98c:	7c45      	ldrbmi	r5, [r0, #17]
 800b98e:	6944      	ldr	r4, [r0, #20]
 800b990:	f101 020a 	add.w	r2, r1, #10
 800b994:	54a5      	strb	r5, [r4, r2]
 800b996:	069c      	lsls	r4, r3, #26
 800b998:	bf54      	ite	pl
 800b99a:	7c05      	ldrbpl	r5, [r0, #16]
 800b99c:	7c45      	ldrbmi	r5, [r0, #17]
 800b99e:	6944      	ldr	r4, [r0, #20]
 800b9a0:	f101 020b 	add.w	r2, r1, #11
 800b9a4:	54a5      	strb	r5, [r4, r2]
 800b9a6:	06dd      	lsls	r5, r3, #27
 800b9a8:	bf54      	ite	pl
 800b9aa:	7c05      	ldrbpl	r5, [r0, #16]
 800b9ac:	7c45      	ldrbmi	r5, [r0, #17]
 800b9ae:	6944      	ldr	r4, [r0, #20]
 800b9b0:	f101 020c 	add.w	r2, r1, #12
 800b9b4:	54a5      	strb	r5, [r4, r2]
 800b9b6:	071c      	lsls	r4, r3, #28
 800b9b8:	bf54      	ite	pl
 800b9ba:	7c05      	ldrbpl	r5, [r0, #16]
 800b9bc:	7c45      	ldrbmi	r5, [r0, #17]
 800b9be:	6944      	ldr	r4, [r0, #20]
 800b9c0:	f101 020d 	add.w	r2, r1, #13
 800b9c4:	54a5      	strb	r5, [r4, r2]
 800b9c6:	075d      	lsls	r5, r3, #29
 800b9c8:	bf54      	ite	pl
 800b9ca:	7c05      	ldrbpl	r5, [r0, #16]
 800b9cc:	7c45      	ldrbmi	r5, [r0, #17]
 800b9ce:	6944      	ldr	r4, [r0, #20]
 800b9d0:	f101 020e 	add.w	r2, r1, #14
 800b9d4:	54a5      	strb	r5, [r4, r2]
 800b9d6:	079c      	lsls	r4, r3, #30
 800b9d8:	bf58      	it	pl
 800b9da:	7c05      	ldrbpl	r5, [r0, #16]
 800b9dc:	6944      	ldr	r4, [r0, #20]
 800b9de:	bf48      	it	mi
 800b9e0:	7c45      	ldrbmi	r5, [r0, #17]
 800b9e2:	f101 020f 	add.w	r2, r1, #15
 800b9e6:	54a5      	strb	r5, [r4, r2]
 800b9e8:	07db      	lsls	r3, r3, #31
 800b9ea:	bf4c      	ite	mi
 800b9ec:	7c44      	ldrbmi	r4, [r0, #17]
 800b9ee:	7c04      	ldrbpl	r4, [r0, #16]
 800b9f0:	6943      	ldr	r3, [r0, #20]
 800b9f2:	f101 0210 	add.w	r2, r1, #16
 800b9f6:	549c      	strb	r4, [r3, r2]
 800b9f8:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800b9fc:	bf0c      	ite	eq
 800b9fe:	7c04      	ldrbeq	r4, [r0, #16]
 800ba00:	7c44      	ldrbne	r4, [r0, #17]
 800ba02:	6942      	ldr	r2, [r0, #20]
 800ba04:	f101 0311 	add.w	r3, r1, #17
 800ba08:	54d4      	strb	r4, [r2, r3]
 800ba0a:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800ba0e:	bf0c      	ite	eq
 800ba10:	7c04      	ldrbeq	r4, [r0, #16]
 800ba12:	7c44      	ldrbne	r4, [r0, #17]
 800ba14:	6942      	ldr	r2, [r0, #20]
 800ba16:	f101 0312 	add.w	r3, r1, #18
 800ba1a:	54d4      	strb	r4, [r2, r3]
 800ba1c:	f01c 0f20 	tst.w	ip, #32
 800ba20:	bf0c      	ite	eq
 800ba22:	7c04      	ldrbeq	r4, [r0, #16]
 800ba24:	7c44      	ldrbne	r4, [r0, #17]
 800ba26:	6942      	ldr	r2, [r0, #20]
 800ba28:	f101 0313 	add.w	r3, r1, #19
 800ba2c:	54d4      	strb	r4, [r2, r3]
 800ba2e:	f01c 0f10 	tst.w	ip, #16
 800ba32:	bf0c      	ite	eq
 800ba34:	7c04      	ldrbeq	r4, [r0, #16]
 800ba36:	7c44      	ldrbne	r4, [r0, #17]
 800ba38:	6942      	ldr	r2, [r0, #20]
 800ba3a:	f101 0314 	add.w	r3, r1, #20
 800ba3e:	54d4      	strb	r4, [r2, r3]
 800ba40:	f01c 0f08 	tst.w	ip, #8
 800ba44:	bf0c      	ite	eq
 800ba46:	7c04      	ldrbeq	r4, [r0, #16]
 800ba48:	7c44      	ldrbne	r4, [r0, #17]
 800ba4a:	6942      	ldr	r2, [r0, #20]
 800ba4c:	f101 0315 	add.w	r3, r1, #21
 800ba50:	54d4      	strb	r4, [r2, r3]
 800ba52:	f01c 0f04 	tst.w	ip, #4
 800ba56:	bf0c      	ite	eq
 800ba58:	7c04      	ldrbeq	r4, [r0, #16]
 800ba5a:	7c44      	ldrbne	r4, [r0, #17]
 800ba5c:	6942      	ldr	r2, [r0, #20]
 800ba5e:	f101 0316 	add.w	r3, r1, #22
 800ba62:	54d4      	strb	r4, [r2, r3]
 800ba64:	f01c 0f02 	tst.w	ip, #2
 800ba68:	bf0c      	ite	eq
 800ba6a:	7c04      	ldrbeq	r4, [r0, #16]
 800ba6c:	7c44      	ldrbne	r4, [r0, #17]
 800ba6e:	6942      	ldr	r2, [r0, #20]
 800ba70:	f101 0317 	add.w	r3, r1, #23
 800ba74:	f01c 0f01 	tst.w	ip, #1
 800ba78:	54d4      	strb	r4, [r2, r3]
 800ba7a:	f101 0118 	add.w	r1, r1, #24
 800ba7e:	f47f af27 	bne.w	800b8d0 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x290>
 800ba82:	7c02      	ldrb	r2, [r0, #16]
 800ba84:	e725      	b.n	800b8d2 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x292>
 800ba86:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800ba8a:	bf0c      	ite	eq
 800ba8c:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800ba90:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800ba94:	6945      	ldr	r5, [r0, #20]
 800ba96:	1c4c      	adds	r4, r1, #1
 800ba98:	f805 e004 	strb.w	lr, [r5, r4]
 800ba9c:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800baa0:	bf0c      	ite	eq
 800baa2:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800baa6:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800baaa:	6945      	ldr	r5, [r0, #20]
 800baac:	1c8c      	adds	r4, r1, #2
 800baae:	f805 e004 	strb.w	lr, [r5, r4]
 800bab2:	f01c 0f20 	tst.w	ip, #32
 800bab6:	bf0c      	ite	eq
 800bab8:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800babc:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800bac0:	6945      	ldr	r5, [r0, #20]
 800bac2:	1ccc      	adds	r4, r1, #3
 800bac4:	f805 e004 	strb.w	lr, [r5, r4]
 800bac8:	f01c 0f10 	tst.w	ip, #16
 800bacc:	bf0c      	ite	eq
 800bace:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800bad2:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800bad6:	6945      	ldr	r5, [r0, #20]
 800bad8:	1d0c      	adds	r4, r1, #4
 800bada:	f01c 0f08 	tst.w	ip, #8
 800bade:	f805 e004 	strb.w	lr, [r5, r4]
 800bae2:	bf0c      	ite	eq
 800bae4:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800bae8:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800baec:	6945      	ldr	r5, [r0, #20]
 800baee:	1d4c      	adds	r4, r1, #5
 800baf0:	f01c 0f04 	tst.w	ip, #4
 800baf4:	f805 e004 	strb.w	lr, [r5, r4]
 800baf8:	bf0c      	ite	eq
 800bafa:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800bafe:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800bb02:	6945      	ldr	r5, [r0, #20]
 800bb04:	1d8c      	adds	r4, r1, #6
 800bb06:	f01c 0f02 	tst.w	ip, #2
 800bb0a:	f805 e004 	strb.w	lr, [r5, r4]
 800bb0e:	bf0c      	ite	eq
 800bb10:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800bb14:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800bb18:	6945      	ldr	r5, [r0, #20]
 800bb1a:	1dcc      	adds	r4, r1, #7
 800bb1c:	f01c 0f01 	tst.w	ip, #1
 800bb20:	f805 e004 	strb.w	lr, [r5, r4]
 800bb24:	bf14      	ite	ne
 800bb26:	f890 c011 	ldrbne.w	ip, [r0, #17]
 800bb2a:	f890 c010 	ldrbeq.w	ip, [r0, #16]
 800bb2e:	6945      	ldr	r5, [r0, #20]
 800bb30:	f101 0408 	add.w	r4, r1, #8
 800bb34:	f805 c004 	strb.w	ip, [r5, r4]
 800bb38:	061d      	lsls	r5, r3, #24
 800bb3a:	bf54      	ite	pl
 800bb3c:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800bb40:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800bb44:	6945      	ldr	r5, [r0, #20]
 800bb46:	f101 0409 	add.w	r4, r1, #9
 800bb4a:	f805 c004 	strb.w	ip, [r5, r4]
 800bb4e:	065d      	lsls	r5, r3, #25
 800bb50:	bf54      	ite	pl
 800bb52:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800bb56:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800bb5a:	6945      	ldr	r5, [r0, #20]
 800bb5c:	f101 040a 	add.w	r4, r1, #10
 800bb60:	f805 c004 	strb.w	ip, [r5, r4]
 800bb64:	069d      	lsls	r5, r3, #26
 800bb66:	bf54      	ite	pl
 800bb68:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800bb6c:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800bb70:	6945      	ldr	r5, [r0, #20]
 800bb72:	f101 040b 	add.w	r4, r1, #11
 800bb76:	f805 c004 	strb.w	ip, [r5, r4]
 800bb7a:	06dd      	lsls	r5, r3, #27
 800bb7c:	bf54      	ite	pl
 800bb7e:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800bb82:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800bb86:	6945      	ldr	r5, [r0, #20]
 800bb88:	f101 040c 	add.w	r4, r1, #12
 800bb8c:	f805 c004 	strb.w	ip, [r5, r4]
 800bb90:	071d      	lsls	r5, r3, #28
 800bb92:	bf54      	ite	pl
 800bb94:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800bb98:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800bb9c:	6945      	ldr	r5, [r0, #20]
 800bb9e:	f101 040d 	add.w	r4, r1, #13
 800bba2:	f805 c004 	strb.w	ip, [r5, r4]
 800bba6:	075d      	lsls	r5, r3, #29
 800bba8:	bf54      	ite	pl
 800bbaa:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800bbae:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800bbb2:	6945      	ldr	r5, [r0, #20]
 800bbb4:	f101 040e 	add.w	r4, r1, #14
 800bbb8:	f805 c004 	strb.w	ip, [r5, r4]
 800bbbc:	079d      	lsls	r5, r3, #30
 800bbbe:	bf58      	it	pl
 800bbc0:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800bbc4:	6945      	ldr	r5, [r0, #20]
 800bbc6:	bf48      	it	mi
 800bbc8:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800bbcc:	f101 040f 	add.w	r4, r1, #15
 800bbd0:	f805 c004 	strb.w	ip, [r5, r4]
 800bbd4:	07dd      	lsls	r5, r3, #31
 800bbd6:	bf4c      	ite	mi
 800bbd8:	7c45      	ldrbmi	r5, [r0, #17]
 800bbda:	7c05      	ldrbpl	r5, [r0, #16]
 800bbdc:	6943      	ldr	r3, [r0, #20]
 800bbde:	f101 0410 	add.w	r4, r1, #16
 800bbe2:	551d      	strb	r5, [r3, r4]
 800bbe4:	0614      	lsls	r4, r2, #24
 800bbe6:	bf54      	ite	pl
 800bbe8:	7c05      	ldrbpl	r5, [r0, #16]
 800bbea:	7c45      	ldrbmi	r5, [r0, #17]
 800bbec:	6944      	ldr	r4, [r0, #20]
 800bbee:	f101 0311 	add.w	r3, r1, #17
 800bbf2:	54e5      	strb	r5, [r4, r3]
 800bbf4:	0655      	lsls	r5, r2, #25
 800bbf6:	bf54      	ite	pl
 800bbf8:	7c05      	ldrbpl	r5, [r0, #16]
 800bbfa:	7c45      	ldrbmi	r5, [r0, #17]
 800bbfc:	6944      	ldr	r4, [r0, #20]
 800bbfe:	f101 0312 	add.w	r3, r1, #18
 800bc02:	54e5      	strb	r5, [r4, r3]
 800bc04:	0694      	lsls	r4, r2, #26
 800bc06:	bf54      	ite	pl
 800bc08:	7c05      	ldrbpl	r5, [r0, #16]
 800bc0a:	7c45      	ldrbmi	r5, [r0, #17]
 800bc0c:	6944      	ldr	r4, [r0, #20]
 800bc0e:	f101 0313 	add.w	r3, r1, #19
 800bc12:	54e5      	strb	r5, [r4, r3]
 800bc14:	06d5      	lsls	r5, r2, #27
 800bc16:	bf54      	ite	pl
 800bc18:	7c05      	ldrbpl	r5, [r0, #16]
 800bc1a:	7c45      	ldrbmi	r5, [r0, #17]
 800bc1c:	6944      	ldr	r4, [r0, #20]
 800bc1e:	f101 0314 	add.w	r3, r1, #20
 800bc22:	54e5      	strb	r5, [r4, r3]
 800bc24:	0714      	lsls	r4, r2, #28
 800bc26:	bf54      	ite	pl
 800bc28:	7c05      	ldrbpl	r5, [r0, #16]
 800bc2a:	7c45      	ldrbmi	r5, [r0, #17]
 800bc2c:	6944      	ldr	r4, [r0, #20]
 800bc2e:	f101 0315 	add.w	r3, r1, #21
 800bc32:	54e5      	strb	r5, [r4, r3]
 800bc34:	0755      	lsls	r5, r2, #29
 800bc36:	bf54      	ite	pl
 800bc38:	7c05      	ldrbpl	r5, [r0, #16]
 800bc3a:	7c45      	ldrbmi	r5, [r0, #17]
 800bc3c:	6944      	ldr	r4, [r0, #20]
 800bc3e:	f101 0316 	add.w	r3, r1, #22
 800bc42:	54e5      	strb	r5, [r4, r3]
 800bc44:	0794      	lsls	r4, r2, #30
 800bc46:	bf54      	ite	pl
 800bc48:	7c05      	ldrbpl	r5, [r0, #16]
 800bc4a:	7c45      	ldrbmi	r5, [r0, #17]
 800bc4c:	6944      	ldr	r4, [r0, #20]
 800bc4e:	f101 0317 	add.w	r3, r1, #23
 800bc52:	54e5      	strb	r5, [r4, r3]
 800bc54:	3118      	adds	r1, #24
 800bc56:	f012 0f01 	tst.w	r2, #1
 800bc5a:	e637      	b.n	800b8cc <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x28c>
 800bc5c:	0615      	lsls	r5, r2, #24
 800bc5e:	bf54      	ite	pl
 800bc60:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800bc64:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bc68:	6945      	ldr	r5, [r0, #20]
 800bc6a:	1c4c      	adds	r4, r1, #1
 800bc6c:	f805 e004 	strb.w	lr, [r5, r4]
 800bc70:	0655      	lsls	r5, r2, #25
 800bc72:	bf54      	ite	pl
 800bc74:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800bc78:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bc7c:	6945      	ldr	r5, [r0, #20]
 800bc7e:	1c8c      	adds	r4, r1, #2
 800bc80:	f805 e004 	strb.w	lr, [r5, r4]
 800bc84:	0695      	lsls	r5, r2, #26
 800bc86:	bf54      	ite	pl
 800bc88:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800bc8c:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bc90:	6945      	ldr	r5, [r0, #20]
 800bc92:	1ccc      	adds	r4, r1, #3
 800bc94:	f805 e004 	strb.w	lr, [r5, r4]
 800bc98:	06d5      	lsls	r5, r2, #27
 800bc9a:	bf54      	ite	pl
 800bc9c:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800bca0:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bca4:	6945      	ldr	r5, [r0, #20]
 800bca6:	1d0c      	adds	r4, r1, #4
 800bca8:	f805 e004 	strb.w	lr, [r5, r4]
 800bcac:	0715      	lsls	r5, r2, #28
 800bcae:	bf54      	ite	pl
 800bcb0:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800bcb4:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bcb8:	6945      	ldr	r5, [r0, #20]
 800bcba:	1d4c      	adds	r4, r1, #5
 800bcbc:	f805 e004 	strb.w	lr, [r5, r4]
 800bcc0:	0755      	lsls	r5, r2, #29
 800bcc2:	bf54      	ite	pl
 800bcc4:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800bcc8:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bccc:	6945      	ldr	r5, [r0, #20]
 800bcce:	1d8c      	adds	r4, r1, #6
 800bcd0:	f805 e004 	strb.w	lr, [r5, r4]
 800bcd4:	0795      	lsls	r5, r2, #30
 800bcd6:	bf58      	it	pl
 800bcd8:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800bcdc:	6945      	ldr	r5, [r0, #20]
 800bcde:	bf48      	it	mi
 800bce0:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bce4:	1dcc      	adds	r4, r1, #7
 800bce6:	f805 e004 	strb.w	lr, [r5, r4]
 800bcea:	07d2      	lsls	r2, r2, #31
 800bcec:	bf4c      	ite	mi
 800bcee:	7c45      	ldrbmi	r5, [r0, #17]
 800bcf0:	7c05      	ldrbpl	r5, [r0, #16]
 800bcf2:	6942      	ldr	r2, [r0, #20]
 800bcf4:	f101 0408 	add.w	r4, r1, #8
 800bcf8:	5515      	strb	r5, [r2, r4]
 800bcfa:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800bcfe:	bf0c      	ite	eq
 800bd00:	7c05      	ldrbeq	r5, [r0, #16]
 800bd02:	7c45      	ldrbne	r5, [r0, #17]
 800bd04:	6944      	ldr	r4, [r0, #20]
 800bd06:	f101 0209 	add.w	r2, r1, #9
 800bd0a:	54a5      	strb	r5, [r4, r2]
 800bd0c:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800bd10:	bf0c      	ite	eq
 800bd12:	7c05      	ldrbeq	r5, [r0, #16]
 800bd14:	7c45      	ldrbne	r5, [r0, #17]
 800bd16:	6944      	ldr	r4, [r0, #20]
 800bd18:	f101 020a 	add.w	r2, r1, #10
 800bd1c:	54a5      	strb	r5, [r4, r2]
 800bd1e:	f01c 0f20 	tst.w	ip, #32
 800bd22:	bf0c      	ite	eq
 800bd24:	7c05      	ldrbeq	r5, [r0, #16]
 800bd26:	7c45      	ldrbne	r5, [r0, #17]
 800bd28:	6944      	ldr	r4, [r0, #20]
 800bd2a:	f101 020b 	add.w	r2, r1, #11
 800bd2e:	54a5      	strb	r5, [r4, r2]
 800bd30:	f01c 0f10 	tst.w	ip, #16
 800bd34:	bf0c      	ite	eq
 800bd36:	7c05      	ldrbeq	r5, [r0, #16]
 800bd38:	7c45      	ldrbne	r5, [r0, #17]
 800bd3a:	6944      	ldr	r4, [r0, #20]
 800bd3c:	f101 020c 	add.w	r2, r1, #12
 800bd40:	54a5      	strb	r5, [r4, r2]
 800bd42:	f01c 0f08 	tst.w	ip, #8
 800bd46:	bf0c      	ite	eq
 800bd48:	7c05      	ldrbeq	r5, [r0, #16]
 800bd4a:	7c45      	ldrbne	r5, [r0, #17]
 800bd4c:	6944      	ldr	r4, [r0, #20]
 800bd4e:	f101 020d 	add.w	r2, r1, #13
 800bd52:	54a5      	strb	r5, [r4, r2]
 800bd54:	f01c 0f04 	tst.w	ip, #4
 800bd58:	bf0c      	ite	eq
 800bd5a:	7c05      	ldrbeq	r5, [r0, #16]
 800bd5c:	7c45      	ldrbne	r5, [r0, #17]
 800bd5e:	6944      	ldr	r4, [r0, #20]
 800bd60:	f101 020e 	add.w	r2, r1, #14
 800bd64:	54a5      	strb	r5, [r4, r2]
 800bd66:	f01c 0f02 	tst.w	ip, #2
 800bd6a:	bf0c      	ite	eq
 800bd6c:	7c05      	ldrbeq	r5, [r0, #16]
 800bd6e:	7c45      	ldrbne	r5, [r0, #17]
 800bd70:	6944      	ldr	r4, [r0, #20]
 800bd72:	f101 020f 	add.w	r2, r1, #15
 800bd76:	54a5      	strb	r5, [r4, r2]
 800bd78:	f01c 0f01 	tst.w	ip, #1
 800bd7c:	bf14      	ite	ne
 800bd7e:	7c45      	ldrbne	r5, [r0, #17]
 800bd80:	7c05      	ldrbeq	r5, [r0, #16]
 800bd82:	6944      	ldr	r4, [r0, #20]
 800bd84:	f101 0210 	add.w	r2, r1, #16
 800bd88:	e564      	b.n	800b854 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x214>
 800bd8a:	061d      	lsls	r5, r3, #24
 800bd8c:	bf54      	ite	pl
 800bd8e:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800bd92:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bd96:	6945      	ldr	r5, [r0, #20]
 800bd98:	1c4c      	adds	r4, r1, #1
 800bd9a:	f805 e004 	strb.w	lr, [r5, r4]
 800bd9e:	065d      	lsls	r5, r3, #25
 800bda0:	bf54      	ite	pl
 800bda2:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800bda6:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bdaa:	6945      	ldr	r5, [r0, #20]
 800bdac:	1c8c      	adds	r4, r1, #2
 800bdae:	f805 e004 	strb.w	lr, [r5, r4]
 800bdb2:	069d      	lsls	r5, r3, #26
 800bdb4:	bf54      	ite	pl
 800bdb6:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800bdba:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bdbe:	6945      	ldr	r5, [r0, #20]
 800bdc0:	1ccc      	adds	r4, r1, #3
 800bdc2:	f805 e004 	strb.w	lr, [r5, r4]
 800bdc6:	06dd      	lsls	r5, r3, #27
 800bdc8:	bf54      	ite	pl
 800bdca:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800bdce:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bdd2:	6945      	ldr	r5, [r0, #20]
 800bdd4:	1d0c      	adds	r4, r1, #4
 800bdd6:	f805 e004 	strb.w	lr, [r5, r4]
 800bdda:	071d      	lsls	r5, r3, #28
 800bddc:	bf54      	ite	pl
 800bdde:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800bde2:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bde6:	6945      	ldr	r5, [r0, #20]
 800bde8:	1d4c      	adds	r4, r1, #5
 800bdea:	f805 e004 	strb.w	lr, [r5, r4]
 800bdee:	075d      	lsls	r5, r3, #29
 800bdf0:	bf54      	ite	pl
 800bdf2:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800bdf6:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bdfa:	6945      	ldr	r5, [r0, #20]
 800bdfc:	1d8c      	adds	r4, r1, #6
 800bdfe:	f805 e004 	strb.w	lr, [r5, r4]
 800be02:	079d      	lsls	r5, r3, #30
 800be04:	bf58      	it	pl
 800be06:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800be0a:	6945      	ldr	r5, [r0, #20]
 800be0c:	bf48      	it	mi
 800be0e:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800be12:	1dcc      	adds	r4, r1, #7
 800be14:	f805 e004 	strb.w	lr, [r5, r4]
 800be18:	07dd      	lsls	r5, r3, #31
 800be1a:	bf4c      	ite	mi
 800be1c:	7c45      	ldrbmi	r5, [r0, #17]
 800be1e:	7c05      	ldrbpl	r5, [r0, #16]
 800be20:	6943      	ldr	r3, [r0, #20]
 800be22:	f101 0408 	add.w	r4, r1, #8
 800be26:	551d      	strb	r5, [r3, r4]
 800be28:	0614      	lsls	r4, r2, #24
 800be2a:	bf54      	ite	pl
 800be2c:	7c05      	ldrbpl	r5, [r0, #16]
 800be2e:	7c45      	ldrbmi	r5, [r0, #17]
 800be30:	6944      	ldr	r4, [r0, #20]
 800be32:	f101 0309 	add.w	r3, r1, #9
 800be36:	54e5      	strb	r5, [r4, r3]
 800be38:	0655      	lsls	r5, r2, #25
 800be3a:	bf54      	ite	pl
 800be3c:	7c05      	ldrbpl	r5, [r0, #16]
 800be3e:	7c45      	ldrbmi	r5, [r0, #17]
 800be40:	6944      	ldr	r4, [r0, #20]
 800be42:	f101 030a 	add.w	r3, r1, #10
 800be46:	54e5      	strb	r5, [r4, r3]
 800be48:	0694      	lsls	r4, r2, #26
 800be4a:	bf54      	ite	pl
 800be4c:	7c05      	ldrbpl	r5, [r0, #16]
 800be4e:	7c45      	ldrbmi	r5, [r0, #17]
 800be50:	6944      	ldr	r4, [r0, #20]
 800be52:	f101 030b 	add.w	r3, r1, #11
 800be56:	54e5      	strb	r5, [r4, r3]
 800be58:	06d5      	lsls	r5, r2, #27
 800be5a:	bf54      	ite	pl
 800be5c:	7c05      	ldrbpl	r5, [r0, #16]
 800be5e:	7c45      	ldrbmi	r5, [r0, #17]
 800be60:	6944      	ldr	r4, [r0, #20]
 800be62:	f101 030c 	add.w	r3, r1, #12
 800be66:	54e5      	strb	r5, [r4, r3]
 800be68:	0714      	lsls	r4, r2, #28
 800be6a:	bf54      	ite	pl
 800be6c:	7c05      	ldrbpl	r5, [r0, #16]
 800be6e:	7c45      	ldrbmi	r5, [r0, #17]
 800be70:	6944      	ldr	r4, [r0, #20]
 800be72:	f101 030d 	add.w	r3, r1, #13
 800be76:	54e5      	strb	r5, [r4, r3]
 800be78:	0755      	lsls	r5, r2, #29
 800be7a:	bf54      	ite	pl
 800be7c:	7c05      	ldrbpl	r5, [r0, #16]
 800be7e:	7c45      	ldrbmi	r5, [r0, #17]
 800be80:	6944      	ldr	r4, [r0, #20]
 800be82:	f101 030e 	add.w	r3, r1, #14
 800be86:	54e5      	strb	r5, [r4, r3]
 800be88:	0794      	lsls	r4, r2, #30
 800be8a:	bf58      	it	pl
 800be8c:	7c05      	ldrbpl	r5, [r0, #16]
 800be8e:	6944      	ldr	r4, [r0, #20]
 800be90:	bf48      	it	mi
 800be92:	7c45      	ldrbmi	r5, [r0, #17]
 800be94:	f101 030f 	add.w	r3, r1, #15
 800be98:	54e5      	strb	r5, [r4, r3]
 800be9a:	07d2      	lsls	r2, r2, #31
 800be9c:	bf4c      	ite	mi
 800be9e:	7c44      	ldrbmi	r4, [r0, #17]
 800bea0:	7c04      	ldrbpl	r4, [r0, #16]
 800bea2:	6942      	ldr	r2, [r0, #20]
 800bea4:	f101 0310 	add.w	r3, r1, #16
 800bea8:	e5a5      	b.n	800b9f6 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x3b6>
 800beaa:	061d      	lsls	r5, r3, #24
 800beac:	bf54      	ite	pl
 800beae:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800beb2:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800beb6:	6945      	ldr	r5, [r0, #20]
 800beb8:	1c4c      	adds	r4, r1, #1
 800beba:	f805 e004 	strb.w	lr, [r5, r4]
 800bebe:	065d      	lsls	r5, r3, #25
 800bec0:	bf54      	ite	pl
 800bec2:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800bec6:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800beca:	6945      	ldr	r5, [r0, #20]
 800becc:	1c8c      	adds	r4, r1, #2
 800bece:	f805 e004 	strb.w	lr, [r5, r4]
 800bed2:	069d      	lsls	r5, r3, #26
 800bed4:	bf54      	ite	pl
 800bed6:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800beda:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bede:	6945      	ldr	r5, [r0, #20]
 800bee0:	1ccc      	adds	r4, r1, #3
 800bee2:	f805 e004 	strb.w	lr, [r5, r4]
 800bee6:	06dd      	lsls	r5, r3, #27
 800bee8:	bf54      	ite	pl
 800beea:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800beee:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bef2:	6945      	ldr	r5, [r0, #20]
 800bef4:	1d0c      	adds	r4, r1, #4
 800bef6:	f805 e004 	strb.w	lr, [r5, r4]
 800befa:	071d      	lsls	r5, r3, #28
 800befc:	bf54      	ite	pl
 800befe:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800bf02:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bf06:	6945      	ldr	r5, [r0, #20]
 800bf08:	1d4c      	adds	r4, r1, #5
 800bf0a:	f805 e004 	strb.w	lr, [r5, r4]
 800bf0e:	075d      	lsls	r5, r3, #29
 800bf10:	bf54      	ite	pl
 800bf12:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800bf16:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bf1a:	6945      	ldr	r5, [r0, #20]
 800bf1c:	1d8c      	adds	r4, r1, #6
 800bf1e:	f805 e004 	strb.w	lr, [r5, r4]
 800bf22:	079d      	lsls	r5, r3, #30
 800bf24:	bf58      	it	pl
 800bf26:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800bf2a:	6945      	ldr	r5, [r0, #20]
 800bf2c:	bf48      	it	mi
 800bf2e:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bf32:	1dcc      	adds	r4, r1, #7
 800bf34:	f805 e004 	strb.w	lr, [r5, r4]
 800bf38:	07db      	lsls	r3, r3, #31
 800bf3a:	bf4c      	ite	mi
 800bf3c:	7c45      	ldrbmi	r5, [r0, #17]
 800bf3e:	7c05      	ldrbpl	r5, [r0, #16]
 800bf40:	6943      	ldr	r3, [r0, #20]
 800bf42:	f101 0408 	add.w	r4, r1, #8
 800bf46:	551d      	strb	r5, [r3, r4]
 800bf48:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800bf4c:	bf0c      	ite	eq
 800bf4e:	7c05      	ldrbeq	r5, [r0, #16]
 800bf50:	7c45      	ldrbne	r5, [r0, #17]
 800bf52:	6944      	ldr	r4, [r0, #20]
 800bf54:	f101 0309 	add.w	r3, r1, #9
 800bf58:	54e5      	strb	r5, [r4, r3]
 800bf5a:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800bf5e:	bf0c      	ite	eq
 800bf60:	7c05      	ldrbeq	r5, [r0, #16]
 800bf62:	7c45      	ldrbne	r5, [r0, #17]
 800bf64:	6944      	ldr	r4, [r0, #20]
 800bf66:	f101 030a 	add.w	r3, r1, #10
 800bf6a:	54e5      	strb	r5, [r4, r3]
 800bf6c:	f01c 0f20 	tst.w	ip, #32
 800bf70:	bf0c      	ite	eq
 800bf72:	7c05      	ldrbeq	r5, [r0, #16]
 800bf74:	7c45      	ldrbne	r5, [r0, #17]
 800bf76:	6944      	ldr	r4, [r0, #20]
 800bf78:	f101 030b 	add.w	r3, r1, #11
 800bf7c:	54e5      	strb	r5, [r4, r3]
 800bf7e:	f01c 0f10 	tst.w	ip, #16
 800bf82:	bf0c      	ite	eq
 800bf84:	7c05      	ldrbeq	r5, [r0, #16]
 800bf86:	7c45      	ldrbne	r5, [r0, #17]
 800bf88:	6944      	ldr	r4, [r0, #20]
 800bf8a:	f101 030c 	add.w	r3, r1, #12
 800bf8e:	54e5      	strb	r5, [r4, r3]
 800bf90:	f01c 0f08 	tst.w	ip, #8
 800bf94:	bf0c      	ite	eq
 800bf96:	7c05      	ldrbeq	r5, [r0, #16]
 800bf98:	7c45      	ldrbne	r5, [r0, #17]
 800bf9a:	6944      	ldr	r4, [r0, #20]
 800bf9c:	f101 030d 	add.w	r3, r1, #13
 800bfa0:	54e5      	strb	r5, [r4, r3]
 800bfa2:	f01c 0f04 	tst.w	ip, #4
 800bfa6:	bf0c      	ite	eq
 800bfa8:	7c05      	ldrbeq	r5, [r0, #16]
 800bfaa:	7c45      	ldrbne	r5, [r0, #17]
 800bfac:	6944      	ldr	r4, [r0, #20]
 800bfae:	f101 030e 	add.w	r3, r1, #14
 800bfb2:	54e5      	strb	r5, [r4, r3]
 800bfb4:	f01c 0f02 	tst.w	ip, #2
 800bfb8:	bf0c      	ite	eq
 800bfba:	7c05      	ldrbeq	r5, [r0, #16]
 800bfbc:	7c45      	ldrbne	r5, [r0, #17]
 800bfbe:	6944      	ldr	r4, [r0, #20]
 800bfc0:	f101 030f 	add.w	r3, r1, #15
 800bfc4:	54e5      	strb	r5, [r4, r3]
 800bfc6:	f01c 0f01 	tst.w	ip, #1
 800bfca:	bf14      	ite	ne
 800bfcc:	7c45      	ldrbne	r5, [r0, #17]
 800bfce:	7c05      	ldrbeq	r5, [r0, #16]
 800bfd0:	6944      	ldr	r4, [r0, #20]
 800bfd2:	f101 0310 	add.w	r3, r1, #16
 800bfd6:	e604      	b.n	800bbe2 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x5a2>

0800bfd8 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>:
 800bfd8:	b570      	push	{r4, r5, r6, lr}
 800bfda:	6804      	ldr	r4, [r0, #0]
 800bfdc:	f89d c010 	ldrb.w	ip, [sp, #16]
 800bfe0:	2c07      	cmp	r4, #7
 800bfe2:	f89d e014 	ldrb.w	lr, [sp, #20]
 800bfe6:	d000      	beq.n	800bfea <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)+0x12>
 800bfe8:	bd70      	pop	{r4, r5, r6, pc}
 800bfea:	061e      	lsls	r6, r3, #24
 800bfec:	ea4f 1141 	mov.w	r1, r1, lsl #5
 800bff0:	bf54      	ite	pl
 800bff2:	7c06      	ldrbpl	r6, [r0, #16]
 800bff4:	7c46      	ldrbmi	r6, [r0, #17]
 800bff6:	6945      	ldr	r5, [r0, #20]
 800bff8:	1c4c      	adds	r4, r1, #1
 800bffa:	552e      	strb	r6, [r5, r4]
 800bffc:	065d      	lsls	r5, r3, #25
 800bffe:	bf54      	ite	pl
 800c000:	7c06      	ldrbpl	r6, [r0, #16]
 800c002:	7c46      	ldrbmi	r6, [r0, #17]
 800c004:	6945      	ldr	r5, [r0, #20]
 800c006:	1c8c      	adds	r4, r1, #2
 800c008:	552e      	strb	r6, [r5, r4]
 800c00a:	069e      	lsls	r6, r3, #26
 800c00c:	bf54      	ite	pl
 800c00e:	7c06      	ldrbpl	r6, [r0, #16]
 800c010:	7c46      	ldrbmi	r6, [r0, #17]
 800c012:	6945      	ldr	r5, [r0, #20]
 800c014:	1ccc      	adds	r4, r1, #3
 800c016:	552e      	strb	r6, [r5, r4]
 800c018:	06dd      	lsls	r5, r3, #27
 800c01a:	bf54      	ite	pl
 800c01c:	7c06      	ldrbpl	r6, [r0, #16]
 800c01e:	7c46      	ldrbmi	r6, [r0, #17]
 800c020:	6945      	ldr	r5, [r0, #20]
 800c022:	1d0c      	adds	r4, r1, #4
 800c024:	552e      	strb	r6, [r5, r4]
 800c026:	071e      	lsls	r6, r3, #28
 800c028:	bf54      	ite	pl
 800c02a:	7c06      	ldrbpl	r6, [r0, #16]
 800c02c:	7c46      	ldrbmi	r6, [r0, #17]
 800c02e:	6945      	ldr	r5, [r0, #20]
 800c030:	1d4c      	adds	r4, r1, #5
 800c032:	552e      	strb	r6, [r5, r4]
 800c034:	075d      	lsls	r5, r3, #29
 800c036:	bf54      	ite	pl
 800c038:	7c06      	ldrbpl	r6, [r0, #16]
 800c03a:	7c46      	ldrbmi	r6, [r0, #17]
 800c03c:	6945      	ldr	r5, [r0, #20]
 800c03e:	1d8c      	adds	r4, r1, #6
 800c040:	552e      	strb	r6, [r5, r4]
 800c042:	079e      	lsls	r6, r3, #30
 800c044:	6945      	ldr	r5, [r0, #20]
 800c046:	bf54      	ite	pl
 800c048:	7c06      	ldrbpl	r6, [r0, #16]
 800c04a:	7c46      	ldrbmi	r6, [r0, #17]
 800c04c:	1dcc      	adds	r4, r1, #7
 800c04e:	552e      	strb	r6, [r5, r4]
 800c050:	07dd      	lsls	r5, r3, #31
 800c052:	bf4c      	ite	mi
 800c054:	7c45      	ldrbmi	r5, [r0, #17]
 800c056:	7c05      	ldrbpl	r5, [r0, #16]
 800c058:	6943      	ldr	r3, [r0, #20]
 800c05a:	f101 0408 	add.w	r4, r1, #8
 800c05e:	551d      	strb	r5, [r3, r4]
 800c060:	0614      	lsls	r4, r2, #24
 800c062:	bf54      	ite	pl
 800c064:	7c05      	ldrbpl	r5, [r0, #16]
 800c066:	7c45      	ldrbmi	r5, [r0, #17]
 800c068:	6944      	ldr	r4, [r0, #20]
 800c06a:	f101 0309 	add.w	r3, r1, #9
 800c06e:	54e5      	strb	r5, [r4, r3]
 800c070:	0656      	lsls	r6, r2, #25
 800c072:	bf54      	ite	pl
 800c074:	7c05      	ldrbpl	r5, [r0, #16]
 800c076:	7c45      	ldrbmi	r5, [r0, #17]
 800c078:	6944      	ldr	r4, [r0, #20]
 800c07a:	f101 030a 	add.w	r3, r1, #10
 800c07e:	54e5      	strb	r5, [r4, r3]
 800c080:	0695      	lsls	r5, r2, #26
 800c082:	bf54      	ite	pl
 800c084:	7c05      	ldrbpl	r5, [r0, #16]
 800c086:	7c45      	ldrbmi	r5, [r0, #17]
 800c088:	6944      	ldr	r4, [r0, #20]
 800c08a:	f101 030b 	add.w	r3, r1, #11
 800c08e:	54e5      	strb	r5, [r4, r3]
 800c090:	06d4      	lsls	r4, r2, #27
 800c092:	bf54      	ite	pl
 800c094:	7c05      	ldrbpl	r5, [r0, #16]
 800c096:	7c45      	ldrbmi	r5, [r0, #17]
 800c098:	6944      	ldr	r4, [r0, #20]
 800c09a:	f101 030c 	add.w	r3, r1, #12
 800c09e:	54e5      	strb	r5, [r4, r3]
 800c0a0:	0716      	lsls	r6, r2, #28
 800c0a2:	bf54      	ite	pl
 800c0a4:	7c05      	ldrbpl	r5, [r0, #16]
 800c0a6:	7c45      	ldrbmi	r5, [r0, #17]
 800c0a8:	6944      	ldr	r4, [r0, #20]
 800c0aa:	f101 030d 	add.w	r3, r1, #13
 800c0ae:	54e5      	strb	r5, [r4, r3]
 800c0b0:	0755      	lsls	r5, r2, #29
 800c0b2:	bf54      	ite	pl
 800c0b4:	7c05      	ldrbpl	r5, [r0, #16]
 800c0b6:	7c45      	ldrbmi	r5, [r0, #17]
 800c0b8:	6944      	ldr	r4, [r0, #20]
 800c0ba:	f101 030e 	add.w	r3, r1, #14
 800c0be:	54e5      	strb	r5, [r4, r3]
 800c0c0:	0794      	lsls	r4, r2, #30
 800c0c2:	bf58      	it	pl
 800c0c4:	7c05      	ldrbpl	r5, [r0, #16]
 800c0c6:	6944      	ldr	r4, [r0, #20]
 800c0c8:	bf48      	it	mi
 800c0ca:	7c45      	ldrbmi	r5, [r0, #17]
 800c0cc:	f101 030f 	add.w	r3, r1, #15
 800c0d0:	54e5      	strb	r5, [r4, r3]
 800c0d2:	07d2      	lsls	r2, r2, #31
 800c0d4:	bf4c      	ite	mi
 800c0d6:	7c44      	ldrbmi	r4, [r0, #17]
 800c0d8:	7c04      	ldrbpl	r4, [r0, #16]
 800c0da:	6942      	ldr	r2, [r0, #20]
 800c0dc:	f101 0310 	add.w	r3, r1, #16
 800c0e0:	54d4      	strb	r4, [r2, r3]
 800c0e2:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800c0e6:	bf0c      	ite	eq
 800c0e8:	7c04      	ldrbeq	r4, [r0, #16]
 800c0ea:	7c44      	ldrbne	r4, [r0, #17]
 800c0ec:	6942      	ldr	r2, [r0, #20]
 800c0ee:	f101 0311 	add.w	r3, r1, #17
 800c0f2:	54d4      	strb	r4, [r2, r3]
 800c0f4:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800c0f8:	bf14      	ite	ne
 800c0fa:	7c44      	ldrbne	r4, [r0, #17]
 800c0fc:	7c04      	ldrbeq	r4, [r0, #16]
 800c0fe:	6942      	ldr	r2, [r0, #20]
 800c100:	f101 0312 	add.w	r3, r1, #18
 800c104:	54d4      	strb	r4, [r2, r3]
 800c106:	f01c 0f20 	tst.w	ip, #32
 800c10a:	bf14      	ite	ne
 800c10c:	7c44      	ldrbne	r4, [r0, #17]
 800c10e:	7c04      	ldrbeq	r4, [r0, #16]
 800c110:	6942      	ldr	r2, [r0, #20]
 800c112:	f101 0313 	add.w	r3, r1, #19
 800c116:	54d4      	strb	r4, [r2, r3]
 800c118:	f01c 0f10 	tst.w	ip, #16
 800c11c:	bf14      	ite	ne
 800c11e:	7c44      	ldrbne	r4, [r0, #17]
 800c120:	7c04      	ldrbeq	r4, [r0, #16]
 800c122:	6942      	ldr	r2, [r0, #20]
 800c124:	f101 0314 	add.w	r3, r1, #20
 800c128:	54d4      	strb	r4, [r2, r3]
 800c12a:	f01c 0f08 	tst.w	ip, #8
 800c12e:	bf14      	ite	ne
 800c130:	7c44      	ldrbne	r4, [r0, #17]
 800c132:	7c04      	ldrbeq	r4, [r0, #16]
 800c134:	6942      	ldr	r2, [r0, #20]
 800c136:	f101 0315 	add.w	r3, r1, #21
 800c13a:	54d4      	strb	r4, [r2, r3]
 800c13c:	f01c 0f04 	tst.w	ip, #4
 800c140:	bf14      	ite	ne
 800c142:	7c44      	ldrbne	r4, [r0, #17]
 800c144:	7c04      	ldrbeq	r4, [r0, #16]
 800c146:	6942      	ldr	r2, [r0, #20]
 800c148:	f101 0316 	add.w	r3, r1, #22
 800c14c:	54d4      	strb	r4, [r2, r3]
 800c14e:	f01c 0f02 	tst.w	ip, #2
 800c152:	bf14      	ite	ne
 800c154:	7c44      	ldrbne	r4, [r0, #17]
 800c156:	7c04      	ldrbeq	r4, [r0, #16]
 800c158:	6942      	ldr	r2, [r0, #20]
 800c15a:	f101 0317 	add.w	r3, r1, #23
 800c15e:	54d4      	strb	r4, [r2, r3]
 800c160:	f01c 0f01 	tst.w	ip, #1
 800c164:	bf14      	ite	ne
 800c166:	7c44      	ldrbne	r4, [r0, #17]
 800c168:	7c04      	ldrbeq	r4, [r0, #16]
 800c16a:	6942      	ldr	r2, [r0, #20]
 800c16c:	f101 0318 	add.w	r3, r1, #24
 800c170:	54d4      	strb	r4, [r2, r3]
 800c172:	f01e 0f80 	tst.w	lr, #128	; 0x80
 800c176:	bf0c      	ite	eq
 800c178:	7c04      	ldrbeq	r4, [r0, #16]
 800c17a:	7c44      	ldrbne	r4, [r0, #17]
 800c17c:	6942      	ldr	r2, [r0, #20]
 800c17e:	f101 0319 	add.w	r3, r1, #25
 800c182:	54d4      	strb	r4, [r2, r3]
 800c184:	f01e 0f40 	tst.w	lr, #64	; 0x40
 800c188:	bf0c      	ite	eq
 800c18a:	7c04      	ldrbeq	r4, [r0, #16]
 800c18c:	7c44      	ldrbne	r4, [r0, #17]
 800c18e:	6942      	ldr	r2, [r0, #20]
 800c190:	f101 031a 	add.w	r3, r1, #26
 800c194:	54d4      	strb	r4, [r2, r3]
 800c196:	f01e 0f20 	tst.w	lr, #32
 800c19a:	bf0c      	ite	eq
 800c19c:	7c04      	ldrbeq	r4, [r0, #16]
 800c19e:	7c44      	ldrbne	r4, [r0, #17]
 800c1a0:	6942      	ldr	r2, [r0, #20]
 800c1a2:	f101 031b 	add.w	r3, r1, #27
 800c1a6:	54d4      	strb	r4, [r2, r3]
 800c1a8:	f01e 0f10 	tst.w	lr, #16
 800c1ac:	bf0c      	ite	eq
 800c1ae:	7c04      	ldrbeq	r4, [r0, #16]
 800c1b0:	7c44      	ldrbne	r4, [r0, #17]
 800c1b2:	6942      	ldr	r2, [r0, #20]
 800c1b4:	f101 031c 	add.w	r3, r1, #28
 800c1b8:	54d4      	strb	r4, [r2, r3]
 800c1ba:	f01e 0f08 	tst.w	lr, #8
 800c1be:	bf0c      	ite	eq
 800c1c0:	7c04      	ldrbeq	r4, [r0, #16]
 800c1c2:	7c44      	ldrbne	r4, [r0, #17]
 800c1c4:	6942      	ldr	r2, [r0, #20]
 800c1c6:	f101 031d 	add.w	r3, r1, #29
 800c1ca:	54d4      	strb	r4, [r2, r3]
 800c1cc:	f01e 0f04 	tst.w	lr, #4
 800c1d0:	bf0c      	ite	eq
 800c1d2:	7c04      	ldrbeq	r4, [r0, #16]
 800c1d4:	7c44      	ldrbne	r4, [r0, #17]
 800c1d6:	6942      	ldr	r2, [r0, #20]
 800c1d8:	f101 031e 	add.w	r3, r1, #30
 800c1dc:	54d4      	strb	r4, [r2, r3]
 800c1de:	f01e 0f02 	tst.w	lr, #2
 800c1e2:	6942      	ldr	r2, [r0, #20]
 800c1e4:	bf0c      	ite	eq
 800c1e6:	7c04      	ldrbeq	r4, [r0, #16]
 800c1e8:	7c44      	ldrbne	r4, [r0, #17]
 800c1ea:	f101 031f 	add.w	r3, r1, #31
 800c1ee:	54d4      	strb	r4, [r2, r3]
 800c1f0:	f01e 0f01 	tst.w	lr, #1
 800c1f4:	bf14      	ite	ne
 800c1f6:	7c42      	ldrbne	r2, [r0, #17]
 800c1f8:	7c02      	ldrbeq	r2, [r0, #16]
 800c1fa:	6943      	ldr	r3, [r0, #20]
 800c1fc:	3120      	adds	r1, #32
 800c1fe:	545a      	strb	r2, [r3, r1]
 800c200:	bd70      	pop	{r4, r5, r6, pc}
 800c202:	bf00      	nop

0800c204 <WS28xx::~WS28xx()>:
 800c204:	2200      	movs	r2, #0
 800c206:	4b01      	ldr	r3, [pc, #4]	; (800c20c <WS28xx::~WS28xx()+0x8>)
 800c208:	601a      	str	r2, [r3, #0]
 800c20a:	4770      	bx	lr
 800c20c:	20000730 	andcs	r0, r0, r0, lsr r7

0800c210 <WS28xx::SetupBuffers()>:
 800c210:	b513      	push	{r0, r1, r4, lr}
 800c212:	4604      	mov	r4, r0
 800c214:	a801      	add	r0, sp, #4
 800c216:	f006 f82d 	bl	8012274 <gd32_spi_dma_tx_prepare(unsigned int*)>
 800c21a:	9b01      	ldr	r3, [sp, #4]
 800c21c:	4a07      	ldr	r2, [pc, #28]	; (800c23c <WS28xx::SetupBuffers()+0x2c>)
 800c21e:	085b      	lsrs	r3, r3, #1
 800c220:	f023 0303 	bic.w	r3, r3, #3
 800c224:	6160      	str	r0, [r4, #20]
 800c226:	4418      	add	r0, r3
 800c228:	68e3      	ldr	r3, [r4, #12]
 800c22a:	61a0      	str	r0, [r4, #24]
 800c22c:	6013      	str	r3, [r2, #0]
 800c22e:	3303      	adds	r3, #3
 800c230:	f023 0303 	bic.w	r3, r3, #3
 800c234:	60e3      	str	r3, [r4, #12]
 800c236:	b002      	add	sp, #8
 800c238:	bd10      	pop	{r4, pc}
 800c23a:	bf00      	nop
 800c23c:	2000072c 	andcs	r0, r0, ip, lsr #14

0800c240 <WS28xx::WS28xx(PixelConfiguration&)>:
 800c240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c242:	23aa      	movs	r3, #170	; 0xaa
 800c244:	2203      	movs	r2, #3
 800c246:	e9c0 2300 	strd	r2, r3, [r0]
 800c24a:	2306      	movs	r3, #6
 800c24c:	6083      	str	r3, [r0, #8]
 800c24e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800c252:	8243      	strh	r3, [r0, #18]
 800c254:	2300      	movs	r3, #0
 800c256:	460d      	mov	r5, r1
 800c258:	4604      	mov	r4, r0
 800c25a:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800c25e:	4b17      	ldr	r3, [pc, #92]	; (800c2bc <WS28xx::WS28xx(PixelConfiguration&)+0x7c>)
 800c260:	a901      	add	r1, sp, #4
 800c262:	6018      	str	r0, [r3, #0]
 800c264:	4628      	mov	r0, r5
 800c266:	f7fe fde5 	bl	800ae34 <PixelConfiguration::Validate(unsigned int&)>
 800c26a:	4628      	mov	r0, r5
 800c26c:	f7fe fe4e 	bl	800af0c <PixelConfiguration::Dump()>
 800c270:	68ab      	ldr	r3, [r5, #8]
 800c272:	686a      	ldr	r2, [r5, #4]
 800c274:	60a3      	str	r3, [r4, #8]
 800c276:	8a2b      	ldrh	r3, [r5, #16]
 800c278:	6829      	ldr	r1, [r5, #0]
 800c27a:	8223      	strh	r3, [r4, #16]
 800c27c:	7cab      	ldrb	r3, [r5, #18]
 800c27e:	7ce8      	ldrb	r0, [r5, #19]
 800c280:	74e3      	strb	r3, [r4, #19]
 800c282:	9b01      	ldr	r3, [sp, #4]
 800c284:	6021      	str	r1, [r4, #0]
 800c286:	4353      	muls	r3, r2
 800c288:	6062      	str	r2, [r4, #4]
 800c28a:	74a0      	strb	r0, [r4, #18]
 800c28c:	b998      	cbnz	r0, 800c2b6 <WS28xx::WS28xx(PixelConfiguration&)+0x76>
 800c28e:	390b      	subs	r1, #11
 800c290:	2902      	cmp	r1, #2
 800c292:	60e3      	str	r3, [r4, #12]
 800c294:	bf9e      	ittt	ls
 800c296:	68e3      	ldrls	r3, [r4, #12]
 800c298:	3208      	addls	r2, #8
 800c29a:	189b      	addls	r3, r3, r2
 800c29c:	4620      	mov	r0, r4
 800c29e:	bf98      	it	ls
 800c2a0:	60e3      	strls	r3, [r4, #12]
 800c2a2:	f7ff ffb5 	bl	800c210 <WS28xx::SetupBuffers()>
 800c2a6:	f005 ff5b 	bl	8012160 <gd32_spi_dma_begin()>
 800c2aa:	68e8      	ldr	r0, [r5, #12]
 800c2ac:	f005 ffce 	bl	801224c <gd32_spi_dma_set_speed_hz(unsigned int)>
 800c2b0:	4620      	mov	r0, r4
 800c2b2:	b003      	add	sp, #12
 800c2b4:	bd30      	pop	{r4, r5, pc}
 800c2b6:	00db      	lsls	r3, r3, #3
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	e7e8      	b.n	800c28e <WS28xx::WS28xx(PixelConfiguration&)+0x4e>
 800c2bc:	20000730 	andcs	r0, r0, r0, lsr r7

0800c2c0 <WS28xx::Update()>:
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	b430      	push	{r4, r5}
 800c2c4:	4b0b      	ldr	r3, [pc, #44]	; (800c2f4 <WS28xx::Update()+0x34>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	68c1      	ldr	r1, [r0, #12]
 800c2ca:	6944      	ldr	r4, [r0, #20]
 800c2cc:	4299      	cmp	r1, r3
 800c2ce:	d807      	bhi.n	800c2e0 <WS28xx::Update()+0x20>
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	6980      	ldr	r0, [r0, #24]
 800c2d4:	084d      	lsrs	r5, r1, #1
 800c2d6:	42ab      	cmp	r3, r5
 800c2d8:	d105      	bne.n	800c2e6 <WS28xx::Update()+0x26>
 800c2da:	bc30      	pop	{r4, r5}
 800c2dc:	f005 bfd2 	b.w	8012284 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>
 800c2e0:	54e2      	strb	r2, [r4, r3]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	e7f0      	b.n	800c2c8 <WS28xx::Update()+0x8>
 800c2e6:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
 800c2ea:	ba52      	rev16	r2, r2
 800c2ec:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 800c2f0:	3301      	adds	r3, #1
 800c2f2:	e7f0      	b.n	800c2d6 <WS28xx::Update()+0x16>
 800c2f4:	2000072c 	andcs	r0, r0, ip, lsr #14

0800c2f8 <WS28xx::Blackout()>:
 800c2f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2fa:	e9d0 6305 	ldrd	r6, r3, [r0, #20]
 800c2fe:	4604      	mov	r4, r0
 800c300:	6143      	str	r3, [r0, #20]
 800c302:	f3bf 8f6f 	isb	sy
 800c306:	f005 ffd7 	bl	80122b8 <gd32_spi_dma_tx_is_active()>
 800c30a:	2800      	cmp	r0, #0
 800c30c:	d1f9      	bne.n	800c302 <WS28xx::Blackout()+0xa>
 800c30e:	6822      	ldr	r2, [r4, #0]
 800c310:	6963      	ldr	r3, [r4, #20]
 800c312:	3a0b      	subs	r2, #11
 800c314:	2a02      	cmp	r2, #2
 800c316:	7018      	strb	r0, [r3, #0]
 800c318:	d82a      	bhi.n	800c370 <WS28xx::Blackout()+0x78>
 800c31a:	4605      	mov	r5, r0
 800c31c:	4607      	mov	r7, r0
 800c31e:	7058      	strb	r0, [r3, #1]
 800c320:	7098      	strb	r0, [r3, #2]
 800c322:	70d8      	strb	r0, [r3, #3]
 800c324:	6863      	ldr	r3, [r4, #4]
 800c326:	42ab      	cmp	r3, r5
 800c328:	d819      	bhi.n	800c35e <WS28xx::Blackout()+0x66>
 800c32a:	6821      	ldr	r1, [r4, #0]
 800c32c:	68e2      	ldr	r2, [r4, #12]
 800c32e:	390b      	subs	r1, #11
 800c330:	2901      	cmp	r1, #1
 800c332:	bf94      	ite	ls
 800c334:	21ff      	movls	r1, #255	; 0xff
 800c336:	2100      	movhi	r1, #0
 800c338:	6960      	ldr	r0, [r4, #20]
 800c33a:	3a04      	subs	r2, #4
 800c33c:	1883      	adds	r3, r0, r2
 800c33e:	5481      	strb	r1, [r0, r2]
 800c340:	7059      	strb	r1, [r3, #1]
 800c342:	7099      	strb	r1, [r3, #2]
 800c344:	70d9      	strb	r1, [r3, #3]
 800c346:	4620      	mov	r0, r4
 800c348:	f7ff ffba 	bl	800c2c0 <WS28xx::Update()>
 800c34c:	f3bf 8f6f 	isb	sy
 800c350:	f005 ffb2 	bl	80122b8 <gd32_spi_dma_tx_is_active()>
 800c354:	2800      	cmp	r0, #0
 800c356:	d1f9      	bne.n	800c34c <WS28xx::Blackout()+0x54>
 800c358:	6166      	str	r6, [r4, #20]
 800c35a:	b003      	add	sp, #12
 800c35c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c35e:	2300      	movs	r3, #0
 800c360:	4629      	mov	r1, r5
 800c362:	461a      	mov	r2, r3
 800c364:	4620      	mov	r0, r4
 800c366:	9700      	str	r7, [sp, #0]
 800c368:	f7ff f96a 	bl	800b640 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 800c36c:	3501      	adds	r5, #1
 800c36e:	e7d9      	b.n	800c324 <WS28xx::Blackout()+0x2c>
 800c370:	6963      	ldr	r3, [r4, #20]
 800c372:	6821      	ldr	r1, [r4, #0]
 800c374:	1c5a      	adds	r2, r3, #1
 800c376:	b101      	cbz	r1, 800c37a <WS28xx::Blackout()+0x82>
 800c378:	7c21      	ldrb	r1, [r4, #16]
 800c37a:	68e0      	ldr	r0, [r4, #12]
 800c37c:	3001      	adds	r0, #1
 800c37e:	4403      	add	r3, r0
 800c380:	429a      	cmp	r2, r3
 800c382:	d0e0      	beq.n	800c346 <WS28xx::Blackout()+0x4e>
 800c384:	f802 1b01 	strb.w	r1, [r2], #1
 800c388:	e7fa      	b.n	800c380 <WS28xx::Blackout()+0x88>
	...

0800c38c <RemoteConfig::HandleList()>:
 800c38c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c390:	6801      	ldr	r1, [r0, #0]
 800c392:	4604      	mov	r4, r0
 800c394:	2012      	movs	r0, #18
 800c396:	f04f 080c 	mov.w	r8, #12
 800c39a:	4a2b      	ldr	r2, [pc, #172]	; (800c448 <RemoteConfig::HandleList()+0xbc>)
 800c39c:	4b2b      	ldr	r3, [pc, #172]	; (800c44c <RemoteConfig::HandleList()+0xc0>)
 800c39e:	fb00 2201 	mla	r2, r0, r1, r2
 800c3a2:	6860      	ldr	r0, [r4, #4]
 800c3a4:	492a      	ldr	r1, [pc, #168]	; (800c450 <RemoteConfig::HandleList()+0xc4>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	fb08 1100 	mla	r1, r8, r0, r1
 800c3ac:	4e29      	ldr	r6, [pc, #164]	; (800c454 <RemoteConfig::HandleList()+0xc8>)
 800c3ae:	482a      	ldr	r0, [pc, #168]	; (800c458 <RemoteConfig::HandleList()+0xcc>)
 800c3b0:	691f      	ldr	r7, [r3, #16]
 800c3b2:	6835      	ldr	r5, [r6, #0]
 800c3b4:	f890 9009 	ldrb.w	r9, [r0, #9]
 800c3b8:	b2fb      	uxtb	r3, r7
 800c3ba:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 800c3be:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 800c3c2:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800c3c6:	b089      	sub	sp, #36	; 0x24
 800c3c8:	3507      	adds	r5, #7
 800c3ca:	0e3f      	lsrs	r7, r7, #24
 800c3cc:	f1b9 0f00 	cmp.w	r9, #0
 800c3d0:	d020      	beq.n	800c414 <RemoteConfig::HandleList()+0x88>
 800c3d2:	3009      	adds	r0, #9
 800c3d4:	e9cd 2103 	strd	r2, r1, [sp, #12]
 800c3d8:	e9cd 8005 	strd	r8, r0, [sp, #20]
 800c3dc:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800c3e0:	4628      	mov	r0, r5
 800c3e2:	e9cd e701 	strd	lr, r7, [sp, #4]
 800c3e6:	4a1d      	ldr	r2, [pc, #116]	; (800c45c <RemoteConfig::HandleList()+0xd0>)
 800c3e8:	f8cd c000 	str.w	ip, [sp]
 800c3ec:	f7fc ff66 	bl	80092bc <snprintf>
 800c3f0:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 800c3f4:	2b05      	cmp	r3, #5
 800c3f6:	d11a      	bne.n	800c42e <RemoteConfig::HandleList()+0xa2>
 800c3f8:	f642 1305 	movw	r3, #10501	; 0x2905
 800c3fc:	9300      	str	r3, [sp, #0]
 800c3fe:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800c402:	b282      	uxth	r2, r0
 800c404:	4629      	mov	r1, r5
 800c406:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800c40a:	f002 fa05 	bl	800e818 <udp_send>
 800c40e:	b009      	add	sp, #36	; 0x24
 800c410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c414:	e9cd 1804 	strd	r1, r8, [sp, #16]
 800c418:	e9cd 7202 	strd	r7, r2, [sp, #8]
 800c41c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800c420:	4628      	mov	r0, r5
 800c422:	e9cd ce00 	strd	ip, lr, [sp]
 800c426:	4a0e      	ldr	r2, [pc, #56]	; (800c460 <RemoteConfig::HandleList()+0xd4>)
 800c428:	f7fc ff48 	bl	80092bc <snprintf>
 800c42c:	e7e0      	b.n	800c3f0 <RemoteConfig::HandleList()+0x64>
 800c42e:	2b06      	cmp	r3, #6
 800c430:	d1ed      	bne.n	800c40e <RemoteConfig::HandleList()+0x82>
 800c432:	6833      	ldr	r3, [r6, #0]
 800c434:	799b      	ldrb	r3, [r3, #6]
 800c436:	2b2a      	cmp	r3, #42	; 0x2a
 800c438:	d1e9      	bne.n	800c40e <RemoteConfig::HandleList()+0x82>
 800c43a:	f642 1305 	movw	r3, #10501	; 0x2905
 800c43e:	9300      	str	r3, [sp, #0]
 800c440:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c444:	e7dd      	b.n	800c402 <RemoteConfig::HandleList()+0x76>
 800c446:	bf00      	nop
 800c448:	080137b2 	stmdaeq	r1, {r1, r4, r5, r7, r8, r9, sl, ip, sp}
 800c44c:	20009074 	andcs	r9, r0, r4, ror r0
 800c450:	08013854 	stmdaeq	r1, {r2, r4, r6, fp, ip, sp}
 800c454:	20000734 	andcs	r0, r0, r4, lsr r7
 800c458:	20000738 	andcs	r0, r0, r8, lsr r7
 800c45c:	080136ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r9, sl, ip, sp}
 800c460:	08013705 	stmdaeq	r1, {r0, r2, r8, r9, sl, ip, sp}

0800c464 <RemoteConfig::HandleDisplayGet()>:
 800c464:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800c468:	2b08      	cmp	r3, #8
 800c46a:	d11d      	bne.n	800c4a8 <RemoteConfig::HandleDisplayGet()+0x44>
 800c46c:	4b0f      	ldr	r3, [pc, #60]	; (800c4ac <RemoteConfig::HandleDisplayGet()+0x48>)
 800c46e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	4d0f      	ldr	r5, [pc, #60]	; (800c4b0 <RemoteConfig::HandleDisplayGet()+0x4c>)
 800c474:	7c19      	ldrb	r1, [r3, #16]
 800c476:	4a0f      	ldr	r2, [pc, #60]	; (800c4b4 <RemoteConfig::HandleDisplayGet()+0x50>)
 800c478:	4b0f      	ldr	r3, [pc, #60]	; (800c4b8 <RemoteConfig::HandleDisplayGet()+0x54>)
 800c47a:	4604      	mov	r4, r0
 800c47c:	2900      	cmp	r1, #0
 800c47e:	bf18      	it	ne
 800c480:	4613      	movne	r3, r2
 800c482:	6828      	ldr	r0, [r5, #0]
 800c484:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800c488:	4a0c      	ldr	r2, [pc, #48]	; (800c4bc <RemoteConfig::HandleDisplayGet()+0x58>)
 800c48a:	f7fc ff17 	bl	80092bc <snprintf>
 800c48e:	f642 1305 	movw	r3, #10501	; 0x2905
 800c492:	9300      	str	r3, [sp, #0]
 800c494:	b282      	uxth	r2, r0
 800c496:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800c49a:	6829      	ldr	r1, [r5, #0]
 800c49c:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800c4a0:	f002 f9ba 	bl	800e818 <udp_send>
 800c4a4:	b003      	add	sp, #12
 800c4a6:	bd30      	pop	{r4, r5, pc}
 800c4a8:	4770      	bx	lr
 800c4aa:	bf00      	nop
 800c4ac:	200096a4 	andcs	r9, r0, r4, lsr #13
 800c4b0:	20000734 	andcs	r0, r0, r4, lsr r7
 800c4b4:	0801371e 	stmdaeq	r1, {r1, r2, r3, r4, r8, r9, sl, ip, sp}
 800c4b8:	0801371b 	stmdaeq	r1, {r0, r1, r3, r4, r8, r9, sl, ip, sp}
 800c4bc:	08013722 	stmdaeq	r1, {r1, r5, r8, r9, sl, ip, sp}

0800c4c0 <RemoteConfig::HandleTftpSet()>:
 800c4c0:	f8d0 25e4 	ldr.w	r2, [r0, #1508]	; 0x5e4
 800c4c4:	2a06      	cmp	r2, #6
 800c4c6:	d109      	bne.n	800c4dc <RemoteConfig::HandleTftpSet()+0x1c>
 800c4c8:	4a05      	ldr	r2, [pc, #20]	; (800c4e0 <RemoteConfig::HandleTftpSet()+0x20>)
 800c4ca:	6812      	ldr	r2, [r2, #0]
 800c4cc:	7992      	ldrb	r2, [r2, #6]
 800c4ce:	3a30      	subs	r2, #48	; 0x30
 800c4d0:	bf18      	it	ne
 800c4d2:	2201      	movne	r2, #1
 800c4d4:	f880 25ec 	strb.w	r2, [r0, #1516]	; 0x5ec
 800c4d8:	f000 bd80 	b.w	800cfdc <RemoteConfig::PlatformHandleTftpSet()>
 800c4dc:	4770      	bx	lr
 800c4de:	bf00      	nop
 800c4e0:	20000734 	andcs	r0, r0, r4, lsr r7

0800c4e4 <RemoteConfig::HandleTftpGet()>:
 800c4e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4e6:	4604      	mov	r4, r0
 800c4e8:	f000 fd80 	bl	800cfec <RemoteConfig::PlatformHandleTftpGet()>
 800c4ec:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 800c4f0:	2b05      	cmp	r3, #5
 800c4f2:	d118      	bne.n	800c526 <RemoteConfig::HandleTftpGet()+0x42>
 800c4f4:	f894 15ec 	ldrb.w	r1, [r4, #1516]	; 0x5ec
 800c4f8:	4d0c      	ldr	r5, [pc, #48]	; (800c52c <RemoteConfig::HandleTftpGet()+0x48>)
 800c4fa:	4a0d      	ldr	r2, [pc, #52]	; (800c530 <RemoteConfig::HandleTftpGet()+0x4c>)
 800c4fc:	4b0d      	ldr	r3, [pc, #52]	; (800c534 <RemoteConfig::HandleTftpGet()+0x50>)
 800c4fe:	6828      	ldr	r0, [r5, #0]
 800c500:	2900      	cmp	r1, #0
 800c502:	bf08      	it	eq
 800c504:	4613      	moveq	r3, r2
 800c506:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800c50a:	4a0b      	ldr	r2, [pc, #44]	; (800c538 <RemoteConfig::HandleTftpGet()+0x54>)
 800c50c:	f7fc fed6 	bl	80092bc <snprintf>
 800c510:	f642 1305 	movw	r3, #10501	; 0x2905
 800c514:	b282      	uxth	r2, r0
 800c516:	9300      	str	r3, [sp, #0]
 800c518:	6829      	ldr	r1, [r5, #0]
 800c51a:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800c51e:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800c522:	f002 f979 	bl	800e818 <udp_send>
 800c526:	b003      	add	sp, #12
 800c528:	bd30      	pop	{r4, r5, pc}
 800c52a:	bf00      	nop
 800c52c:	20000734 	andcs	r0, r0, r4, lsr r7
 800c530:	0801371e 	stmdaeq	r1, {r1, r2, r3, r4, r8, r9, sl, ip, sp}
 800c534:	0801371b 	stmdaeq	r1, {r0, r1, r3, r4, r8, r9, sl, ip, sp}
 800c538:	0801372e 	stmdaeq	r1, {r1, r2, r3, r5, r8, r9, sl, ip, sp}

0800c53c <RemoteConfig::HandleVersion()>:
 800c53c:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800c540:	2b08      	cmp	r3, #8
 800c542:	d116      	bne.n	800c572 <RemoteConfig::HandleVersion()+0x36>
 800c544:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c546:	4d0b      	ldr	r5, [pc, #44]	; (800c574 <RemoteConfig::HandleVersion()+0x38>)
 800c548:	4604      	mov	r4, r0
 800c54a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800c54e:	4b0a      	ldr	r3, [pc, #40]	; (800c578 <RemoteConfig::HandleVersion()+0x3c>)
 800c550:	4a0a      	ldr	r2, [pc, #40]	; (800c57c <RemoteConfig::HandleVersion()+0x40>)
 800c552:	6828      	ldr	r0, [r5, #0]
 800c554:	f7fc feb2 	bl	80092bc <snprintf>
 800c558:	f642 1305 	movw	r3, #10501	; 0x2905
 800c55c:	9300      	str	r3, [sp, #0]
 800c55e:	b282      	uxth	r2, r0
 800c560:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800c564:	6829      	ldr	r1, [r5, #0]
 800c566:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800c56a:	f002 f955 	bl	800e818 <udp_send>
 800c56e:	b003      	add	sp, #12
 800c570:	bd30      	pop	{r4, r5, pc}
 800c572:	4770      	bx	lr
 800c574:	20000734 	andcs	r0, r0, r4, lsr r7
 800c578:	2000974a 	andcs	r9, r0, sl, asr #14
 800c57c:	08013737 	stmdaeq	r1, {r0, r1, r2, r4, r5, r8, r9, sl, ip, sp}

0800c580 <RemoteConfig::HandleUptime()>:
 800c580:	f890 35d7 	ldrb.w	r3, [r0, #1495]	; 0x5d7
 800c584:	b1fb      	cbz	r3, 800c5c6 <RemoteConfig::HandleUptime()+0x46>
 800c586:	4b10      	ldr	r3, [pc, #64]	; (800c5c8 <RemoteConfig::HandleUptime()+0x48>)
 800c588:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c58a:	681a      	ldr	r2, [r3, #0]
 800c58c:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800c590:	4604      	mov	r4, r0
 800c592:	2b07      	cmp	r3, #7
 800c594:	d115      	bne.n	800c5c2 <RemoteConfig::HandleUptime()+0x42>
 800c596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c59a:	4d0c      	ldr	r5, [pc, #48]	; (800c5cc <RemoteConfig::HandleUptime()+0x4c>)
 800c59c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5a0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800c5a4:	4a0a      	ldr	r2, [pc, #40]	; (800c5d0 <RemoteConfig::HandleUptime()+0x50>)
 800c5a6:	6828      	ldr	r0, [r5, #0]
 800c5a8:	f7fc fe88 	bl	80092bc <snprintf>
 800c5ac:	f642 1305 	movw	r3, #10501	; 0x2905
 800c5b0:	9300      	str	r3, [sp, #0]
 800c5b2:	b282      	uxth	r2, r0
 800c5b4:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800c5b8:	6829      	ldr	r1, [r5, #0]
 800c5ba:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800c5be:	f002 f92b 	bl	800e818 <udp_send>
 800c5c2:	b003      	add	sp, #12
 800c5c4:	bd30      	pop	{r4, r5, pc}
 800c5c6:	4770      	bx	lr
 800c5c8:	200097ac 	andcs	r9, r0, ip, lsr #15
 800c5cc:	20000734 	andcs	r0, r0, r4, lsr r7
 800c5d0:	08013742 	stmdaeq	r1, {r1, r6, r8, r9, sl, ip, sp}

0800c5d4 <RemoteConfig::HandleDisplaySet()>:
 800c5d4:	b538      	push	{r3, r4, r5, lr}
 800c5d6:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800c5da:	2b09      	cmp	r3, #9
 800c5dc:	d113      	bne.n	800c606 <RemoteConfig::HandleDisplaySet()+0x32>
 800c5de:	4b0a      	ldr	r3, [pc, #40]	; (800c608 <RemoteConfig::HandleDisplaySet()+0x34>)
 800c5e0:	681c      	ldr	r4, [r3, #0]
 800c5e2:	4b0a      	ldr	r3, [pc, #40]	; (800c60c <RemoteConfig::HandleDisplaySet()+0x38>)
 800c5e4:	69a0      	ldr	r0, [r4, #24]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	7a5d      	ldrb	r5, [r3, #9]
 800c5ea:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800c5ee:	4259      	negs	r1, r3
 800c5f0:	4159      	adcs	r1, r3
 800c5f2:	b140      	cbz	r0, 800c606 <RemoteConfig::HandleDisplaySet()+0x32>
 800c5f4:	6803      	ldr	r3, [r0, #0]
 800c5f6:	7421      	strb	r1, [r4, #16]
 800c5f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5fa:	4798      	blx	r3
 800c5fc:	2d30      	cmp	r5, #48	; 0x30
 800c5fe:	bf1e      	ittt	ne
 800c600:	4b03      	ldrne	r3, [pc, #12]	; (800c610 <RemoteConfig::HandleDisplaySet()+0x3c>)
 800c602:	681b      	ldrne	r3, [r3, #0]
 800c604:	6063      	strne	r3, [r4, #4]
 800c606:	bd38      	pop	{r3, r4, r5, pc}
 800c608:	200096a4 	andcs	r9, r0, r4, lsr #13
 800c60c:	20000734 	andcs	r0, r0, r4, lsr r7
 800c610:	200097ac 	andcs	r9, r0, ip, lsr #15

0800c614 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>:
 800c614:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c618:	f100 0a0c 	add.w	sl, r0, #12
 800c61c:	4604      	mov	r4, r0
 800c61e:	e9c0 1200 	strd	r1, r2, [r0]
 800c622:	6083      	str	r3, [r0, #8]
 800c624:	4650      	mov	r0, sl
 800c626:	4690      	mov	r8, r2
 800c628:	4689      	mov	r9, r1
 800c62a:	461f      	mov	r7, r3
 800c62c:	f000 fd1e 	bl	800d06c <HttpDaemon::HttpDaemon()>
 800c630:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c634:	2500      	movs	r5, #0
 800c636:	4e16      	ldr	r6, [pc, #88]	; (800c690 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x7c>)
 800c638:	f8df b058 	ldr.w	fp, [pc, #88]	; 800c694 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x80>
 800c63c:	f8c4 35dc 	str.w	r3, [r4, #1500]	; 0x5dc
 800c640:	4b15      	ldr	r3, [pc, #84]	; (800c698 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x84>)
 800c642:	4631      	mov	r1, r6
 800c644:	f8db 0000 	ldr.w	r0, [fp]
 800c648:	f8c4 55d4 	str.w	r5, [r4, #1492]	; 0x5d4
 800c64c:	f8a4 55d8 	strh.w	r5, [r4, #1496]	; 0x5d8
 800c650:	f8c4 55e0 	str.w	r5, [r4, #1504]	; 0x5e0
 800c654:	f8c4 55e4 	str.w	r5, [r4, #1508]	; 0x5e4
 800c658:	f8c4 55e8 	str.w	r5, [r4, #1512]	; 0x5e8
 800c65c:	f884 55ec 	strb.w	r5, [r4, #1516]	; 0x5ec
 800c660:	601c      	str	r4, [r3, #0]
 800c662:	f002 fda5 	bl	800f1b0 <Network::MacAddressCopyTo(unsigned char*)>
 800c666:	f642 1105 	movw	r1, #10501	; 0x2905
 800c66a:	f8db 0000 	ldr.w	r0, [fp]
 800c66e:	f886 9006 	strb.w	r9, [r6, #6]
 800c672:	f886 8007 	strb.w	r8, [r6, #7]
 800c676:	7237      	strb	r7, [r6, #8]
 800c678:	7275      	strb	r5, [r6, #9]
 800c67a:	f002 fd93 	bl	800f1a4 <Network::Begin(unsigned short)>
 800c67e:	f8c4 05dc 	str.w	r0, [r4, #1500]	; 0x5dc
 800c682:	4650      	mov	r0, sl
 800c684:	f000 fd0a 	bl	800d09c <HttpDaemon::Start()>
 800c688:	4620      	mov	r0, r4
 800c68a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c68e:	bf00      	nop
 800c690:	20000738 	andcs	r0, r0, r8, lsr r7
 800c694:	20009074 	andcs	r9, r0, r4, ror r0
 800c698:	2000075c 	andcs	r0, r0, ip, asr r7

0800c69c <RemoteConfig::GetStringNode() const>:
 800c69c:	2012      	movs	r0, #18
 800c69e:	4b03      	ldr	r3, [pc, #12]	; (800c6ac <RemoteConfig::GetStringNode() const+0x10>)
 800c6a0:	799a      	ldrb	r2, [r3, #6]
 800c6a2:	4b03      	ldr	r3, [pc, #12]	; (800c6b0 <RemoteConfig::GetStringNode() const+0x14>)
 800c6a4:	fb00 3002 	mla	r0, r0, r2, r3
 800c6a8:	4770      	bx	lr
 800c6aa:	bf00      	nop
 800c6ac:	20000738 	andcs	r0, r0, r8, lsr r7
 800c6b0:	080137b2 	stmdaeq	r1, {r1, r4, r5, r7, r8, r9, sl, ip, sp}

0800c6b4 <RemoteConfig::GetStringOutput() const>:
 800c6b4:	200c      	movs	r0, #12
 800c6b6:	4b03      	ldr	r3, [pc, #12]	; (800c6c4 <RemoteConfig::GetStringOutput() const+0x10>)
 800c6b8:	79da      	ldrb	r2, [r3, #7]
 800c6ba:	4b03      	ldr	r3, [pc, #12]	; (800c6c8 <RemoteConfig::GetStringOutput() const+0x14>)
 800c6bc:	fb00 3002 	mla	r0, r0, r2, r3
 800c6c0:	4770      	bx	lr
 800c6c2:	bf00      	nop
 800c6c4:	20000738 	andcs	r0, r0, r8, lsr r7
 800c6c8:	08013854 	stmdaeq	r1, {r2, r4, r6, fp, ip, sp}

0800c6cc <RemoteConfig::SetDisable(bool)>:
 800c6cc:	b538      	push	{r3, r4, r5, lr}
 800c6ce:	4604      	mov	r4, r0
 800c6d0:	f890 35d4 	ldrb.w	r3, [r0, #1492]	; 0x5d4
 800c6d4:	b171      	cbz	r1, 800c6f4 <RemoteConfig::SetDisable(bool)+0x28>
 800c6d6:	b963      	cbnz	r3, 800c6f2 <RemoteConfig::SetDisable(bool)+0x26>
 800c6d8:	4b0d      	ldr	r3, [pc, #52]	; (800c710 <RemoteConfig::SetDisable(bool)+0x44>)
 800c6da:	f642 1105 	movw	r1, #10501	; 0x2905
 800c6de:	6818      	ldr	r0, [r3, #0]
 800c6e0:	f002 fd63 	bl	800f1aa <Network::End(unsigned short)>
 800c6e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6e8:	f8c4 35dc 	str.w	r3, [r4, #1500]	; 0x5dc
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	f884 35d4 	strb.w	r3, [r4, #1492]	; 0x5d4
 800c6f2:	bd38      	pop	{r3, r4, r5, pc}
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d0fc      	beq.n	800c6f2 <RemoteConfig::SetDisable(bool)+0x26>
 800c6f8:	4b05      	ldr	r3, [pc, #20]	; (800c710 <RemoteConfig::SetDisable(bool)+0x44>)
 800c6fa:	460d      	mov	r5, r1
 800c6fc:	6818      	ldr	r0, [r3, #0]
 800c6fe:	f642 1105 	movw	r1, #10501	; 0x2905
 800c702:	f002 fd4f 	bl	800f1a4 <Network::Begin(unsigned short)>
 800c706:	f884 55d4 	strb.w	r5, [r4, #1492]	; 0x5d4
 800c70a:	f8c4 05dc 	str.w	r0, [r4, #1500]	; 0x5dc
 800c70e:	e7f0      	b.n	800c6f2 <RemoteConfig::SetDisable(bool)+0x26>
 800c710:	20009074 	andcs	r9, r0, r4, ror r0

0800c714 <RemoteConfig::SetDisplayName(char const*)>:
 800c714:	2217      	movs	r2, #23
 800c716:	4809      	ldr	r0, [pc, #36]	; (800c73c <RemoteConfig::SetDisplayName(char const*)+0x28>)
 800c718:	b508      	push	{r3, lr}
 800c71a:	1e4b      	subs	r3, r1, #1
 800c71c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800c720:	b911      	cbnz	r1, 800c728 <RemoteConfig::SetDisplayName(char const*)+0x14>
 800c722:	f004 fca5 	bl	8011070 <memset>
 800c726:	e003      	b.n	800c730 <RemoteConfig::SetDisplayName(char const*)+0x1c>
 800c728:	3a01      	subs	r2, #1
 800c72a:	f800 1b01 	strb.w	r1, [r0], #1
 800c72e:	d1f5      	bne.n	800c71c <RemoteConfig::SetDisplayName(char const*)+0x8>
 800c730:	2200      	movs	r2, #0
 800c732:	4b03      	ldr	r3, [pc, #12]	; (800c740 <RemoteConfig::SetDisplayName(char const*)+0x2c>)
 800c734:	f883 2020 	strb.w	r2, [r3, #32]
 800c738:	bd08      	pop	{r3, pc}
 800c73a:	bf00      	nop
 800c73c:	20000741 	andcs	r0, r0, r1, asr #14
 800c740:	20000738 	andcs	r0, r0, r8, lsr r7

0800c744 <RemoteConfig::HandleGet(void*, unsigned int)>:
 800c744:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c746:	4604      	mov	r4, r0
 800c748:	4616      	mov	r6, r2
 800c74a:	460d      	mov	r5, r1
 800c74c:	4f2a      	ldr	r7, [pc, #168]	; (800c7f8 <RemoteConfig::HandleGet(void*, unsigned int)+0xb4>)
 800c74e:	b085      	sub	sp, #20
 800c750:	b9b9      	cbnz	r1, 800c782 <RemoteConfig::HandleGet(void*, unsigned int)+0x3e>
 800c752:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 800c756:	6839      	ldr	r1, [r7, #0]
 800c758:	aa03      	add	r2, sp, #12
 800c75a:	3105      	adds	r1, #5
 800c75c:	9303      	str	r3, [sp, #12]
 800c75e:	f000 fc13 	bl	800cf88 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800c762:	1e03      	subs	r3, r0, #0
 800c764:	da1d      	bge.n	800c7a2 <RemoteConfig::HandleGet(void*, unsigned int)+0x5e>
 800c766:	f642 1305 	movw	r3, #10501	; 0x2905
 800c76a:	220b      	movs	r2, #11
 800c76c:	9300      	str	r3, [sp, #0]
 800c76e:	4923      	ldr	r1, [pc, #140]	; (800c7fc <RemoteConfig::HandleGet(void*, unsigned int)+0xb8>)
 800c770:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800c774:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800c778:	f002 f84e 	bl	800e818 <udp_send>
 800c77c:	200c      	movs	r0, #12
 800c77e:	b005      	add	sp, #20
 800c780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c782:	9203      	str	r2, [sp, #12]
 800c784:	aa03      	add	r2, sp, #12
 800c786:	6039      	str	r1, [r7, #0]
 800c788:	f000 fbfe 	bl	800cf88 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800c78c:	1e03      	subs	r3, r0, #0
 800c78e:	da08      	bge.n	800c7a2 <RemoteConfig::HandleGet(void*, unsigned int)+0x5e>
 800c790:	2e0b      	cmp	r6, #11
 800c792:	4632      	mov	r2, r6
 800c794:	4628      	mov	r0, r5
 800c796:	bf28      	it	cs
 800c798:	220b      	movcs	r2, #11
 800c79a:	4918      	ldr	r1, [pc, #96]	; (800c7fc <RemoteConfig::HandleGet(void*, unsigned int)+0xb8>)
 800c79c:	f004 fc46 	bl	801102c <memcpy>
 800c7a0:	e7ec      	b.n	800c77c <RemoteConfig::HandleGet(void*, unsigned int)+0x38>
 800c7a2:	221c      	movs	r2, #28
 800c7a4:	4353      	muls	r3, r2
 800c7a6:	4916      	ldr	r1, [pc, #88]	; (800c800 <RemoteConfig::HandleGet(void*, unsigned int)+0xbc>)
 800c7a8:	18ca      	adds	r2, r1, r3
 800c7aa:	6852      	ldr	r2, [r2, #4]
 800c7ac:	58cb      	ldr	r3, [r1, r3]
 800c7ae:	ea4f 0c62 	mov.w	ip, r2, asr #1
 800c7b2:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800c7b6:	07d2      	lsls	r2, r2, #31
 800c7b8:	bf48      	it	mi
 800c7ba:	f854 200c 	ldrmi.w	r2, [r4, ip]
 800c7be:	a903      	add	r1, sp, #12
 800c7c0:	bf48      	it	mi
 800c7c2:	58d3      	ldrmi	r3, [r2, r3]
 800c7c4:	4798      	blx	r3
 800c7c6:	b96d      	cbnz	r5, 800c7e4 <RemoteConfig::HandleGet(void*, unsigned int)+0xa0>
 800c7c8:	f642 1305 	movw	r3, #10501	; 0x2905
 800c7cc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800c7d0:	9300      	str	r3, [sp, #0]
 800c7d2:	6839      	ldr	r1, [r7, #0]
 800c7d4:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800c7d8:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800c7dc:	f002 f81c 	bl	800e818 <udp_send>
 800c7e0:	9803      	ldr	r0, [sp, #12]
 800c7e2:	e7cc      	b.n	800c77e <RemoteConfig::HandleGet(void*, unsigned int)+0x3a>
 800c7e4:	9a03      	ldr	r2, [sp, #12]
 800c7e6:	4628      	mov	r0, r5
 800c7e8:	42b2      	cmp	r2, r6
 800c7ea:	bf28      	it	cs
 800c7ec:	4632      	movcs	r2, r6
 800c7ee:	6839      	ldr	r1, [r7, #0]
 800c7f0:	f004 fc27 	bl	8011042 <memmove>
 800c7f4:	e7f4      	b.n	800c7e0 <RemoteConfig::HandleGet(void*, unsigned int)+0x9c>
 800c7f6:	bf00      	nop
 800c7f8:	20000734 	andcs	r0, r0, r4, lsr r7
 800c7fc:	0801374f 	stmdaeq	r1, {r0, r1, r2, r3, r6, r8, r9, sl, ip, sp}
 800c800:	080139e0 	stmdaeq	r1, {r5, r6, r7, r8, fp, ip, sp}

0800c804 <RemoteConfig::HandleGetNoParams()>:
 800c804:	2200      	movs	r2, #0
 800c806:	4611      	mov	r1, r2
 800c808:	f7ff bf9c 	b.w	800c744 <RemoteConfig::HandleGet(void*, unsigned int)>

0800c80c <RemoteConfig::HandleGetRconfigTxt(unsigned int&)>:
 800c80c:	b510      	push	{r4, lr}
 800c80e:	460c      	mov	r4, r1
 800c810:	4b07      	ldr	r3, [pc, #28]	; (800c830 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x24>)
 800c812:	b08a      	sub	sp, #40	; 0x28
 800c814:	6819      	ldr	r1, [r3, #0]
 800c816:	a801      	add	r0, sp, #4
 800c818:	f000 f9d0 	bl	800cbbc <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 800c81c:	4905      	ldr	r1, [pc, #20]	; (800c834 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x28>)
 800c81e:	4623      	mov	r3, r4
 800c820:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c824:	6809      	ldr	r1, [r1, #0]
 800c826:	a801      	add	r0, sp, #4
 800c828:	f000 faec 	bl	800ce04 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>
 800c82c:	b00a      	add	sp, #40	; 0x28
 800c82e:	bd10      	pop	{r4, pc}
 800c830:	20001784 	andcs	r1, r0, r4, lsl #15
 800c834:	20000734 	andcs	r0, r0, r4, lsr r7

0800c838 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)>:
 800c838:	b513      	push	{r0, r1, r4, lr}
 800c83a:	460c      	mov	r4, r1
 800c83c:	4b07      	ldr	r3, [pc, #28]	; (800c85c <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x24>)
 800c83e:	a801      	add	r0, sp, #4
 800c840:	6819      	ldr	r1, [r3, #0]
 800c842:	f002 fe91 	bl	800f568 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800c846:	4906      	ldr	r1, [pc, #24]	; (800c860 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x28>)
 800c848:	4623      	mov	r3, r4
 800c84a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c84e:	6809      	ldr	r1, [r1, #0]
 800c850:	a801      	add	r0, sp, #4
 800c852:	f003 f877 	bl	800f944 <NetworkParams::Save(char*, unsigned int, unsigned int&)>
 800c856:	b002      	add	sp, #8
 800c858:	bd10      	pop	{r4, pc}
 800c85a:	bf00      	nop
 800c85c:	2000177c 	andcs	r1, r0, ip, ror r7
 800c860:	20000734 	andcs	r0, r0, r4, lsr r7

0800c864 <RemoteConfig::HandleGetOscTxt(unsigned int&)>:
 800c864:	b510      	push	{r4, lr}
 800c866:	460c      	mov	r4, r1
 800c868:	4b07      	ldr	r3, [pc, #28]	; (800c888 <RemoteConfig::HandleGetOscTxt(unsigned int&)+0x24>)
 800c86a:	b0e4      	sub	sp, #400	; 0x190
 800c86c:	6819      	ldr	r1, [r3, #0]
 800c86e:	4668      	mov	r0, sp
 800c870:	f7fd f9cc 	bl	8009c0c <OSCServerParams::OSCServerParams(OSCServerParamsStore*)>
 800c874:	4905      	ldr	r1, [pc, #20]	; (800c88c <RemoteConfig::HandleGetOscTxt(unsigned int&)+0x28>)
 800c876:	4623      	mov	r3, r4
 800c878:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c87c:	4668      	mov	r0, sp
 800c87e:	6809      	ldr	r1, [r1, #0]
 800c880:	f7fd fb5e 	bl	8009f40 <OSCServerParams::Save(char*, unsigned int, unsigned int&)>
 800c884:	b064      	add	sp, #400	; 0x190
 800c886:	bd10      	pop	{r4, pc}
 800c888:	20001780 	andcs	r1, r0, r0, lsl #15
 800c88c:	20000734 	andcs	r0, r0, r4, lsr r7

0800c890 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)>:
 800c890:	b510      	push	{r4, lr}
 800c892:	460c      	mov	r4, r1
 800c894:	4b07      	ldr	r3, [pc, #28]	; (800c8b4 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)+0x24>)
 800c896:	b08c      	sub	sp, #48	; 0x30
 800c898:	6819      	ldr	r1, [r3, #0]
 800c89a:	a801      	add	r0, sp, #4
 800c89c:	f7fd ffba 	bl	800a814 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>
 800c8a0:	4905      	ldr	r1, [pc, #20]	; (800c8b8 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)+0x28>)
 800c8a2:	4623      	mov	r3, r4
 800c8a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c8a8:	6809      	ldr	r1, [r1, #0]
 800c8aa:	a801      	add	r0, sp, #4
 800c8ac:	f7fe fa52 	bl	800ad54 <WS28xxDmxParams::Save(char*, unsigned int, unsigned int&)>
 800c8b0:	b00c      	add	sp, #48	; 0x30
 800c8b2:	bd10      	pop	{r4, pc}
 800c8b4:	20001788 	andcs	r1, r0, r8, lsl #15
 800c8b8:	20000734 	andcs	r0, r0, r4, lsr r7

0800c8bc <RemoteConfig::HandleSet(void*, unsigned int)>:
 800c8bc:	b530      	push	{r4, r5, lr}
 800c8be:	b085      	sub	sp, #20
 800c8c0:	4604      	mov	r4, r0
 800c8c2:	9201      	str	r2, [sp, #4]
 800c8c4:	b9d1      	cbnz	r1, 800c8fc <RemoteConfig::HandleSet(void*, unsigned int)+0x40>
 800c8c6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800c8ca:	9303      	str	r3, [sp, #12]
 800c8cc:	4b1b      	ldr	r3, [pc, #108]	; (800c93c <RemoteConfig::HandleSet(void*, unsigned int)+0x80>)
 800c8ce:	aa03      	add	r2, sp, #12
 800c8d0:	6819      	ldr	r1, [r3, #0]
 800c8d2:	3101      	adds	r1, #1
 800c8d4:	f000 fb58 	bl	800cf88 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800c8d8:	2800      	cmp	r0, #0
 800c8da:	db0d      	blt.n	800c8f8 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 800c8dc:	221c      	movs	r2, #28
 800c8de:	4b18      	ldr	r3, [pc, #96]	; (800c940 <RemoteConfig::HandleSet(void*, unsigned int)+0x84>)
 800c8e0:	fb02 3300 	mla	r3, r2, r0, r3
 800c8e4:	68da      	ldr	r2, [r3, #12]
 800c8e6:	689b      	ldr	r3, [r3, #8]
 800c8e8:	1051      	asrs	r1, r2, #1
 800c8ea:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800c8ee:	07d2      	lsls	r2, r2, #31
 800c8f0:	bf44      	itt	mi
 800c8f2:	5862      	ldrmi	r2, [r4, r1]
 800c8f4:	58d3      	ldrmi	r3, [r2, r3]
 800c8f6:	4798      	blx	r3
 800c8f8:	b005      	add	sp, #20
 800c8fa:	bd30      	pop	{r4, r5, pc}
 800c8fc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800c900:	4613      	mov	r3, r2
 800c902:	d8f9      	bhi.n	800c8f8 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 800c904:	2200      	movs	r2, #0
 800c906:	460d      	mov	r5, r1
 800c908:	490e      	ldr	r1, [pc, #56]	; (800c944 <RemoteConfig::HandleSet(void*, unsigned int)+0x88>)
 800c90a:	f8c0 25e8 	str.w	r2, [r0, #1512]	; 0x5e8
 800c90e:	7809      	ldrb	r1, [r1, #0]
 800c910:	07c9      	lsls	r1, r1, #31
 800c912:	d50a      	bpl.n	800c92a <RemoteConfig::HandleSet(void*, unsigned int)+0x6e>
 800c914:	7829      	ldrb	r1, [r5, #0]
 800c916:	297b      	cmp	r1, #123	; 0x7b
 800c918:	d107      	bne.n	800c92a <RemoteConfig::HandleSet(void*, unsigned int)+0x6e>
 800c91a:	3b01      	subs	r3, #1
 800c91c:	b299      	uxth	r1, r3
 800c91e:	4628      	mov	r0, r5
 800c920:	f003 fbe6 	bl	80100f0 <properties::convert_json_file(char*, unsigned short, bool)>
 800c924:	1e03      	subs	r3, r0, #0
 800c926:	dde7      	ble.n	800c8f8 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 800c928:	b29b      	uxth	r3, r3
 800c92a:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
 800c92e:	4b03      	ldr	r3, [pc, #12]	; (800c93c <RemoteConfig::HandleSet(void*, unsigned int)+0x80>)
 800c930:	4620      	mov	r0, r4
 800c932:	601d      	str	r5, [r3, #0]
 800c934:	aa01      	add	r2, sp, #4
 800c936:	1c69      	adds	r1, r5, #1
 800c938:	e7cc      	b.n	800c8d4 <RemoteConfig::HandleSet(void*, unsigned int)+0x18>
 800c93a:	bf00      	nop
 800c93c:	20000734 	andcs	r0, r0, r4, lsr r7
 800c940:	080139e0 	stmdaeq	r1, {r5, r6, r7, r8, fp, ip, sp}
 800c944:	200096a2 	andcs	r9, r0, r2, lsr #13

0800c948 <RemoteConfig::Run()>:
 800c948:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800c94c:	f890 55d4 	ldrb.w	r5, [r0, #1492]	; 0x5d4
 800c950:	2d00      	cmp	r5, #0
 800c952:	d15d      	bne.n	800ca10 <RemoteConfig::Run()+0xc8>
 800c954:	4604      	mov	r4, r0
 800c956:	4e4a      	ldr	r6, [pc, #296]	; (800ca80 <RemoteConfig::Run()+0x138>)
 800c958:	300c      	adds	r0, #12
 800c95a:	f000 fe19 	bl	800d590 <HttpDaemon::Run()>
 800c95e:	4631      	mov	r1, r6
 800c960:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800c964:	f10d 030e 	add.w	r3, sp, #14
 800c968:	f504 62bc 	add.w	r2, r4, #1504	; 0x5e0
 800c96c:	f001 ff2e 	bl	800e7cc <udp_recv2>
 800c970:	2803      	cmp	r0, #3
 800c972:	f8c4 05e4 	str.w	r0, [r4, #1508]	; 0x5e4
 800c976:	d94b      	bls.n	800ca10 <RemoteConfig::Run()+0xc8>
 800c978:	6831      	ldr	r1, [r6, #0]
 800c97a:	1e43      	subs	r3, r0, #1
 800c97c:	5cca      	ldrb	r2, [r1, r3]
 800c97e:	2a0a      	cmp	r2, #10
 800c980:	bf18      	it	ne
 800c982:	4603      	movne	r3, r0
 800c984:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
 800c988:	7808      	ldrb	r0, [r1, #0]
 800c98a:	283f      	cmp	r0, #63	; 0x3f
 800c98c:	d135      	bne.n	800c9fa <RemoteConfig::Run()+0xb2>
 800c98e:	483d      	ldr	r0, [pc, #244]	; (800ca84 <RemoteConfig::Run()+0x13c>)
 800c990:	462a      	mov	r2, r5
 800c992:	4607      	mov	r7, r0
 800c994:	3b01      	subs	r3, #1
 800c996:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
 800c99a:	7b86      	ldrb	r6, [r0, #14]
 800c99c:	8985      	ldrh	r5, [r0, #12]
 800c99e:	b176      	cbz	r6, 800c9be <RemoteConfig::Run()+0x76>
 800c9a0:	42ab      	cmp	r3, r5
 800c9a2:	d80e      	bhi.n	800c9c2 <RemoteConfig::Run()+0x7a>
 800c9a4:	3201      	adds	r2, #1
 800c9a6:	2a09      	cmp	r2, #9
 800c9a8:	f100 0010 	add.w	r0, r0, #16
 800c9ac:	d1f5      	bne.n	800c99a <RemoteConfig::Run()+0x52>
 800c9ae:	f642 1305 	movw	r3, #10501	; 0x2905
 800c9b2:	9300      	str	r3, [sp, #0]
 800c9b4:	2208      	movs	r2, #8
 800c9b6:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800c9ba:	4933      	ldr	r1, [pc, #204]	; (800ca88 <RemoteConfig::Run()+0x140>)
 800c9bc:	e052      	b.n	800ca64 <RemoteConfig::Run()+0x11c>
 800c9be:	42ab      	cmp	r3, r5
 800c9c0:	d1f0      	bne.n	800c9a4 <RemoteConfig::Run()+0x5c>
 800c9c2:	6886      	ldr	r6, [r0, #8]
 800c9c4:	f101 0c01 	add.w	ip, r1, #1
 800c9c8:	4435      	add	r5, r6
 800c9ca:	42b5      	cmp	r5, r6
 800c9cc:	d10b      	bne.n	800c9e6 <RemoteConfig::Run()+0x9e>
 800c9ce:	0113      	lsls	r3, r2, #4
 800c9d0:	eb07 1202 	add.w	r2, r7, r2, lsl #4
 800c9d4:	6852      	ldr	r2, [r2, #4]
 800c9d6:	58fb      	ldr	r3, [r7, r3]
 800c9d8:	1051      	asrs	r1, r2, #1
 800c9da:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800c9de:	07d2      	lsls	r2, r2, #31
 800c9e0:	d408      	bmi.n	800c9f4 <RemoteConfig::Run()+0xac>
 800c9e2:	4798      	blx	r3
 800c9e4:	e014      	b.n	800ca10 <RemoteConfig::Run()+0xc8>
 800c9e6:	f81c 8b01 	ldrb.w	r8, [ip], #1
 800c9ea:	f816 eb01 	ldrb.w	lr, [r6], #1
 800c9ee:	45f0      	cmp	r8, lr
 800c9f0:	d0eb      	beq.n	800c9ca <RemoteConfig::Run()+0x82>
 800c9f2:	e7d7      	b.n	800c9a4 <RemoteConfig::Run()+0x5c>
 800c9f4:	5862      	ldr	r2, [r4, r1]
 800c9f6:	58d3      	ldr	r3, [r2, r3]
 800c9f8:	e7f3      	b.n	800c9e2 <RemoteConfig::Run()+0x9a>
 800c9fa:	f894 25d5 	ldrb.w	r2, [r4, #1493]	; 0x5d5
 800c9fe:	b93a      	cbnz	r2, 800ca10 <RemoteConfig::Run()+0xc8>
 800ca00:	2823      	cmp	r0, #35	; 0x23
 800ca02:	d108      	bne.n	800ca16 <RemoteConfig::Run()+0xce>
 800ca04:	4611      	mov	r1, r2
 800ca06:	4620      	mov	r0, r4
 800ca08:	f8c4 25e8 	str.w	r2, [r4, #1512]	; 0x5e8
 800ca0c:	f7ff ff56 	bl	800c8bc <RemoteConfig::HandleSet(void*, unsigned int)>
 800ca10:	b004      	add	sp, #16
 800ca12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca16:	2821      	cmp	r0, #33	; 0x21
 800ca18:	d1fa      	bne.n	800ca10 <RemoteConfig::Run()+0xc8>
 800ca1a:	3b01      	subs	r3, #1
 800ca1c:	2b05      	cmp	r3, #5
 800ca1e:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
 800ca22:	d918      	bls.n	800ca56 <RemoteConfig::Run()+0x10e>
 800ca24:	1c4a      	adds	r2, r1, #1
 800ca26:	4610      	mov	r0, r2
 800ca28:	4d18      	ldr	r5, [pc, #96]	; (800ca8c <RemoteConfig::Run()+0x144>)
 800ca2a:	f101 0c06 	add.w	ip, r1, #6
 800ca2e:	4560      	cmp	r0, ip
 800ca30:	d01d      	beq.n	800ca6e <RemoteConfig::Run()+0x126>
 800ca32:	f810 7b01 	ldrb.w	r7, [r0], #1
 800ca36:	f815 6b01 	ldrb.w	r6, [r5], #1
 800ca3a:	42b7      	cmp	r7, r6
 800ca3c:	d0f7      	beq.n	800ca2e <RemoteConfig::Run()+0xe6>
 800ca3e:	2b08      	cmp	r3, #8
 800ca40:	d909      	bls.n	800ca56 <RemoteConfig::Run()+0x10e>
 800ca42:	4b13      	ldr	r3, [pc, #76]	; (800ca90 <RemoteConfig::Run()+0x148>)
 800ca44:	3109      	adds	r1, #9
 800ca46:	428a      	cmp	r2, r1
 800ca48:	d017      	beq.n	800ca7a <RemoteConfig::Run()+0x132>
 800ca4a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ca4e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ca52:	4285      	cmp	r5, r0
 800ca54:	d0f7      	beq.n	800ca46 <RemoteConfig::Run()+0xfe>
 800ca56:	f642 1305 	movw	r3, #10501	; 0x2905
 800ca5a:	2208      	movs	r2, #8
 800ca5c:	9300      	str	r3, [sp, #0]
 800ca5e:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800ca62:	490c      	ldr	r1, [pc, #48]	; (800ca94 <RemoteConfig::Run()+0x14c>)
 800ca64:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800ca68:	f001 fed6 	bl	800e818 <udp_send>
 800ca6c:	e7d0      	b.n	800ca10 <RemoteConfig::Run()+0xc8>
 800ca6e:	2300      	movs	r3, #0
 800ca70:	4a09      	ldr	r2, [pc, #36]	; (800ca98 <RemoteConfig::Run()+0x150>)
 800ca72:	011b      	lsls	r3, r3, #4
 800ca74:	4620      	mov	r0, r4
 800ca76:	58d3      	ldr	r3, [r2, r3]
 800ca78:	e7b3      	b.n	800c9e2 <RemoteConfig::Run()+0x9a>
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	e7f8      	b.n	800ca70 <RemoteConfig::Run()+0x128>
 800ca7e:	bf00      	nop
 800ca80:	20000734 	andcs	r0, r0, r4, lsr r7
 800ca84:	080138e4 	stmdaeq	r1, {r2, r5, r6, r7, fp, ip, sp}
 800ca88:	08013773 	stmdaeq	r1, {r0, r1, r4, r5, r6, r8, r9, sl, ip, sp}
 800ca8c:	0801375b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r8, r9, sl, ip, sp}
 800ca90:	08013761 	stmdaeq	r1, {r0, r5, r6, r8, r9, sl, ip, sp}
 800ca94:	0801376a 	stmdaeq	r1, {r1, r3, r5, r6, r8, r9, sl, ip, sp}
 800ca98:	08013974 	stmdaeq	r1, {r2, r4, r5, r6, r8, fp, ip, sp}

0800ca9c <RemoteConfig::HandleSetRconfig()>:
 800ca9c:	b510      	push	{r4, lr}
 800ca9e:	4604      	mov	r4, r0
 800caa0:	4b09      	ldr	r3, [pc, #36]	; (800cac8 <RemoteConfig::HandleSetRconfig()+0x2c>)
 800caa2:	b08a      	sub	sp, #40	; 0x28
 800caa4:	6819      	ldr	r1, [r3, #0]
 800caa6:	a801      	add	r0, sp, #4
 800caa8:	f000 f888 	bl	800cbbc <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 800caac:	4b07      	ldr	r3, [pc, #28]	; (800cacc <RemoteConfig::HandleSetRconfig()+0x30>)
 800caae:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800cab2:	6819      	ldr	r1, [r3, #0]
 800cab4:	a801      	add	r0, sp, #4
 800cab6:	f000 f897 	bl	800cbe8 <RemoteConfigParams::Load(char const*, unsigned int)>
 800caba:	4621      	mov	r1, r4
 800cabc:	a801      	add	r0, sp, #4
 800cabe:	f000 f9ae 	bl	800ce1e <RemoteConfigParams::Set(RemoteConfig*)>
 800cac2:	b00a      	add	sp, #40	; 0x28
 800cac4:	bd10      	pop	{r4, pc}
 800cac6:	bf00      	nop
 800cac8:	20001784 	andcs	r1, r0, r4, lsl #15
 800cacc:	20000734 	andcs	r0, r0, r4, lsr r7

0800cad0 <RemoteConfig::HandleSetNetworkTxt()>:
 800cad0:	b513      	push	{r0, r1, r4, lr}
 800cad2:	4604      	mov	r4, r0
 800cad4:	4b06      	ldr	r3, [pc, #24]	; (800caf0 <RemoteConfig::HandleSetNetworkTxt()+0x20>)
 800cad6:	a801      	add	r0, sp, #4
 800cad8:	6819      	ldr	r1, [r3, #0]
 800cada:	f002 fd45 	bl	800f568 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800cade:	4b05      	ldr	r3, [pc, #20]	; (800caf4 <RemoteConfig::HandleSetNetworkTxt()+0x24>)
 800cae0:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800cae4:	6819      	ldr	r1, [r3, #0]
 800cae6:	a801      	add	r0, sp, #4
 800cae8:	f002 fd5e 	bl	800f5a8 <NetworkParams::Load(char const*, unsigned int)>
 800caec:	b002      	add	sp, #8
 800caee:	bd10      	pop	{r4, pc}
 800caf0:	2000177c 	andcs	r1, r0, ip, ror r7
 800caf4:	20000734 	andcs	r0, r0, r4, lsr r7

0800caf8 <RemoteConfig::HandleSetOscTxt()>:
 800caf8:	b510      	push	{r4, lr}
 800cafa:	4604      	mov	r4, r0
 800cafc:	4b07      	ldr	r3, [pc, #28]	; (800cb1c <RemoteConfig::HandleSetOscTxt()+0x24>)
 800cafe:	b0e4      	sub	sp, #400	; 0x190
 800cb00:	6819      	ldr	r1, [r3, #0]
 800cb02:	4668      	mov	r0, sp
 800cb04:	f7fd f882 	bl	8009c0c <OSCServerParams::OSCServerParams(OSCServerParamsStore*)>
 800cb08:	4b05      	ldr	r3, [pc, #20]	; (800cb20 <RemoteConfig::HandleSetOscTxt()+0x28>)
 800cb0a:	4668      	mov	r0, sp
 800cb0c:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800cb10:	6819      	ldr	r1, [r3, #0]
 800cb12:	f7fd f897 	bl	8009c44 <OSCServerParams::Load(char const*, unsigned int)>
 800cb16:	b064      	add	sp, #400	; 0x190
 800cb18:	bd10      	pop	{r4, pc}
 800cb1a:	bf00      	nop
 800cb1c:	20001780 	andcs	r1, r0, r0, lsl #15
 800cb20:	20000734 	andcs	r0, r0, r4, lsr r7

0800cb24 <RemoteConfig::HandleSetDevicesTxt()>:
 800cb24:	b510      	push	{r4, lr}
 800cb26:	4604      	mov	r4, r0
 800cb28:	4b07      	ldr	r3, [pc, #28]	; (800cb48 <RemoteConfig::HandleSetDevicesTxt()+0x24>)
 800cb2a:	b08c      	sub	sp, #48	; 0x30
 800cb2c:	6819      	ldr	r1, [r3, #0]
 800cb2e:	a801      	add	r0, sp, #4
 800cb30:	f7fd fe70 	bl	800a814 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>
 800cb34:	4b05      	ldr	r3, [pc, #20]	; (800cb4c <RemoteConfig::HandleSetDevicesTxt()+0x28>)
 800cb36:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800cb3a:	6819      	ldr	r1, [r3, #0]
 800cb3c:	a801      	add	r0, sp, #4
 800cb3e:	f7fd fe9d 	bl	800a87c <WS28xxDmxParams::Load(char const*, unsigned int)>
 800cb42:	b00c      	add	sp, #48	; 0x30
 800cb44:	bd10      	pop	{r4, pc}
 800cb46:	bf00      	nop
 800cb48:	20001788 	andcs	r1, r0, r8, lsl #15
 800cb4c:	20000734 	andcs	r0, r0, r4, lsr r7

0800cb50 <RemoteConfig::HandleFactory()>:
 800cb50:	b538      	push	{r3, r4, r5, lr}
 800cb52:	2400      	movs	r4, #0
 800cb54:	4d04      	ldr	r5, [pc, #16]	; (800cb68 <RemoteConfig::HandleFactory()+0x18>)
 800cb56:	4621      	mov	r1, r4
 800cb58:	6828      	ldr	r0, [r5, #0]
 800cb5a:	3401      	adds	r4, #1
 800cb5c:	f000 ff4e 	bl	800d9fc <SpiFlashStore::ResetSetList(spiflashstore::Store)>
 800cb60:	2c1c      	cmp	r4, #28
 800cb62:	d1f8      	bne.n	800cb56 <RemoteConfig::HandleFactory()+0x6>
 800cb64:	bd38      	pop	{r3, r4, r5, pc}
 800cb66:	bf00      	nop
 800cb68:	20001774 	andcs	r1, r0, r4, ror r7

0800cb6c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800cb6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb6e:	460b      	mov	r3, r1
 800cb70:	8885      	ldrh	r5, [r0, #4]
 800cb72:	88c1      	ldrh	r1, [r0, #6]
 800cb74:	42a9      	cmp	r1, r5
 800cb76:	d214      	bcs.n	800cba2 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800cb78:	4604      	mov	r4, r0
 800cb7a:	6800      	ldr	r0, [r0, #0]
 800cb7c:	1a6d      	subs	r5, r5, r1
 800cb7e:	4408      	add	r0, r1
 800cb80:	7a21      	ldrb	r1, [r4, #8]
 800cb82:	b91a      	cbnz	r2, 800cb8c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800cb84:	b919      	cbnz	r1, 800cb8e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800cb86:	4a0a      	ldr	r2, [pc, #40]	; (800cbb0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800cb88:	9100      	str	r1, [sp, #0]
 800cb8a:	e002      	b.n	800cb92 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800cb8c:	b159      	cbz	r1, 800cba6 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800cb8e:	9200      	str	r2, [sp, #0]
 800cb90:	4a08      	ldr	r2, [pc, #32]	; (800cbb4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800cb92:	4629      	mov	r1, r5
 800cb94:	f7fc fb92 	bl	80092bc <snprintf>
 800cb98:	4285      	cmp	r5, r0
 800cb9a:	bfa2      	ittt	ge
 800cb9c:	88e3      	ldrhge	r3, [r4, #6]
 800cb9e:	181b      	addge	r3, r3, r0
 800cba0:	80e3      	strhge	r3, [r4, #6]
 800cba2:	b003      	add	sp, #12
 800cba4:	bd30      	pop	{r4, r5, pc}
 800cba6:	2201      	movs	r2, #1
 800cba8:	9200      	str	r2, [sp, #0]
 800cbaa:	4a03      	ldr	r2, [pc, #12]	; (800cbb8 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800cbac:	e7f1      	b.n	800cb92 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800cbae:	bf00      	nop
 800cbb0:	08013475 	stmdaeq	r1, {r0, r2, r4, r5, r6, sl, ip, sp}
 800cbb4:	0801346c 	stmdaeq	r1, {r2, r3, r5, r6, sl, ip, sp}
 800cbb8:	08013476 	stmdaeq	r1, {r1, r2, r4, r5, r6, sl, ip, sp}

0800cbbc <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>:
 800cbbc:	b510      	push	{r4, lr}
 800cbbe:	4604      	mov	r4, r0
 800cbc0:	2220      	movs	r2, #32
 800cbc2:	f840 1b04 	str.w	r1, [r0], #4
 800cbc6:	2100      	movs	r1, #0
 800cbc8:	f004 fa52 	bl	8011070 <memset>
 800cbcc:	4620      	mov	r0, r4
 800cbce:	bd10      	pop	{r4, pc}

0800cbd0 <RemoteConfigParams::Load()>:
 800cbd0:	b508      	push	{r3, lr}
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	4601      	mov	r1, r0
 800cbd6:	6043      	str	r3, [r0, #4]
 800cbd8:	6800      	ldr	r0, [r0, #0]
 800cbda:	b120      	cbz	r0, 800cbe6 <RemoteConfigParams::Load()+0x16>
 800cbdc:	6803      	ldr	r3, [r0, #0]
 800cbde:	3104      	adds	r1, #4
 800cbe0:	68db      	ldr	r3, [r3, #12]
 800cbe2:	4798      	blx	r3
 800cbe4:	2001      	movs	r0, #1
 800cbe6:	bd08      	pop	{r3, pc}

0800cbe8 <RemoteConfigParams::Load(char const*, unsigned int)>:
 800cbe8:	2300      	movs	r3, #0
 800cbea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cbec:	460d      	mov	r5, r1
 800cbee:	4616      	mov	r6, r2
 800cbf0:	4604      	mov	r4, r0
 800cbf2:	6043      	str	r3, [r0, #4]
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	490a      	ldr	r1, [pc, #40]	; (800cc20 <RemoteConfigParams::Load(char const*, unsigned int)+0x38>)
 800cbf8:	4668      	mov	r0, sp
 800cbfa:	f003 fbcb 	bl	8010394 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800cbfe:	4632      	mov	r2, r6
 800cc00:	4629      	mov	r1, r5
 800cc02:	4668      	mov	r0, sp
 800cc04:	f003 fbca 	bl	801039c <ReadConfigFile::Read(char const*, unsigned int)>
 800cc08:	4621      	mov	r1, r4
 800cc0a:	f851 0b04 	ldr.w	r0, [r1], #4
 800cc0e:	6803      	ldr	r3, [r0, #0]
 800cc10:	689b      	ldr	r3, [r3, #8]
 800cc12:	4798      	blx	r3
 800cc14:	4668      	mov	r0, sp
 800cc16:	f003 fbc0 	bl	801039a <ReadConfigFile::~ReadConfigFile()>
 800cc1a:	b002      	add	sp, #8
 800cc1c:	bd70      	pop	{r4, r5, r6, pc}
 800cc1e:	bf00      	nop
 800cc20:	0800cce1 	stmdaeq	r0, {r0, r5, r6, r7, sl, fp, lr, pc}

0800cc24 <RemoteConfigParams::SetBool(unsigned char, unsigned int)>:
 800cc24:	6843      	ldr	r3, [r0, #4]
 800cc26:	b111      	cbz	r1, 800cc2e <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0xa>
 800cc28:	4313      	orrs	r3, r2
 800cc2a:	6043      	str	r3, [r0, #4]
 800cc2c:	4770      	bx	lr
 800cc2e:	ea23 0302 	bic.w	r3, r3, r2
 800cc32:	e7fa      	b.n	800cc2a <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0x6>

0800cc34 <RemoteConfigParams::callbackFunction(char const*)>:
 800cc34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc36:	460d      	mov	r5, r1
 800cc38:	4604      	mov	r4, r0
 800cc3a:	4923      	ldr	r1, [pc, #140]	; (800ccc8 <RemoteConfigParams::callbackFunction(char const*)+0x94>)
 800cc3c:	4628      	mov	r0, r5
 800cc3e:	f10d 0203 	add.w	r2, sp, #3
 800cc42:	f003 fce3 	bl	801060c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800cc46:	b940      	cbnz	r0, 800cc5a <RemoteConfigParams::callbackFunction(char const*)+0x26>
 800cc48:	2201      	movs	r2, #1
 800cc4a:	4620      	mov	r0, r4
 800cc4c:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800cc50:	b003      	add	sp, #12
 800cc52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc56:	f7ff bfe5 	b.w	800cc24 <RemoteConfigParams::SetBool(unsigned char, unsigned int)>
 800cc5a:	4628      	mov	r0, r5
 800cc5c:	491b      	ldr	r1, [pc, #108]	; (800cccc <RemoteConfigParams::callbackFunction(char const*)+0x98>)
 800cc5e:	f10d 0203 	add.w	r2, sp, #3
 800cc62:	f003 fcd3 	bl	801060c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800cc66:	b908      	cbnz	r0, 800cc6c <RemoteConfigParams::callbackFunction(char const*)+0x38>
 800cc68:	2202      	movs	r2, #2
 800cc6a:	e7ee      	b.n	800cc4a <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800cc6c:	4628      	mov	r0, r5
 800cc6e:	4918      	ldr	r1, [pc, #96]	; (800ccd0 <RemoteConfigParams::callbackFunction(char const*)+0x9c>)
 800cc70:	f10d 0203 	add.w	r2, sp, #3
 800cc74:	f003 fcca 	bl	801060c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800cc78:	b908      	cbnz	r0, 800cc7e <RemoteConfigParams::callbackFunction(char const*)+0x4a>
 800cc7a:	2204      	movs	r2, #4
 800cc7c:	e7e5      	b.n	800cc4a <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800cc7e:	4628      	mov	r0, r5
 800cc80:	4914      	ldr	r1, [pc, #80]	; (800ccd4 <RemoteConfigParams::callbackFunction(char const*)+0xa0>)
 800cc82:	f10d 0203 	add.w	r2, sp, #3
 800cc86:	f003 fcc1 	bl	801060c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800cc8a:	b908      	cbnz	r0, 800cc90 <RemoteConfigParams::callbackFunction(char const*)+0x5c>
 800cc8c:	2208      	movs	r2, #8
 800cc8e:	e7dc      	b.n	800cc4a <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800cc90:	4628      	mov	r0, r5
 800cc92:	4911      	ldr	r1, [pc, #68]	; (800ccd8 <RemoteConfigParams::callbackFunction(char const*)+0xa4>)
 800cc94:	f10d 0203 	add.w	r2, sp, #3
 800cc98:	f003 fcb8 	bl	801060c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800cc9c:	b908      	cbnz	r0, 800cca2 <RemoteConfigParams::callbackFunction(char const*)+0x6e>
 800cc9e:	2220      	movs	r2, #32
 800cca0:	e7d3      	b.n	800cc4a <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800cca2:	2317      	movs	r3, #23
 800cca4:	4628      	mov	r0, r5
 800cca6:	9301      	str	r3, [sp, #4]
 800cca8:	490c      	ldr	r1, [pc, #48]	; (800ccdc <RemoteConfigParams::callbackFunction(char const*)+0xa8>)
 800ccaa:	ab01      	add	r3, sp, #4
 800ccac:	f104 020c 	add.w	r2, r4, #12
 800ccb0:	f003 fba8 	bl	8010404 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800ccb4:	b930      	cbnz	r0, 800ccc4 <RemoteConfigParams::callbackFunction(char const*)+0x90>
 800ccb6:	9b01      	ldr	r3, [sp, #4]
 800ccb8:	4423      	add	r3, r4
 800ccba:	7318      	strb	r0, [r3, #12]
 800ccbc:	6863      	ldr	r3, [r4, #4]
 800ccbe:	f043 0310 	orr.w	r3, r3, #16
 800ccc2:	6063      	str	r3, [r4, #4]
 800ccc4:	b003      	add	sp, #12
 800ccc6:	bd30      	pop	{r4, r5, pc}
 800ccc8:	08013d2c 	stmdaeq	r1, {r2, r3, r5, r8, sl, fp, ip, sp}
 800cccc:	08013d4d 	stmdaeq	r1, {r0, r2, r3, r6, r8, sl, fp, ip, sp}
 800ccd0:	08013d5b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r8, sl, fp, ip, sp}
 800ccd4:	08013d69 	stmdaeq	r1, {r0, r3, r5, r6, r8, sl, fp, ip, sp}
 800ccd8:	08013d77 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r8, sl, fp, ip, sp}
 800ccdc:	08013d40 	stmdaeq	r1, {r6, r8, sl, fp, ip, sp}

0800cce0 <RemoteConfigParams::staticCallbackFunction(void*, char const*)>:
 800cce0:	f7ff bfa8 	b.w	800cc34 <RemoteConfigParams::callbackFunction(char const*)>

0800cce4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>:
 800cce4:	b570      	push	{r4, r5, r6, lr}
 800cce6:	4604      	mov	r4, r0
 800cce8:	4615      	mov	r5, r2
 800ccea:	461e      	mov	r6, r3
 800ccec:	b086      	sub	sp, #24
 800ccee:	3004      	adds	r0, #4
 800ccf0:	2900      	cmp	r1, #0
 800ccf2:	d041      	beq.n	800cd78 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x94>
 800ccf4:	2220      	movs	r2, #32
 800ccf6:	f004 f9a4 	bl	8011042 <memmove>
 800ccfa:	4633      	mov	r3, r6
 800ccfc:	462a      	mov	r2, r5
 800ccfe:	4937      	ldr	r1, [pc, #220]	; (800cddc <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf8>)
 800cd00:	a803      	add	r0, sp, #12
 800cd02:	f003 faa7 	bl	8010254 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800cd06:	6862      	ldr	r2, [r4, #4]
 800cd08:	4935      	ldr	r1, [pc, #212]	; (800cde0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xfc>)
 800cd0a:	f002 0201 	and.w	r2, r2, #1
 800cd0e:	a803      	add	r0, sp, #12
 800cd10:	f7ff ff2c 	bl	800cb6c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800cd14:	6862      	ldr	r2, [r4, #4]
 800cd16:	4933      	ldr	r1, [pc, #204]	; (800cde4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x100>)
 800cd18:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800cd1c:	a803      	add	r0, sp, #12
 800cd1e:	f7ff ff25 	bl	800cb6c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800cd22:	6862      	ldr	r2, [r4, #4]
 800cd24:	4930      	ldr	r1, [pc, #192]	; (800cde8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x104>)
 800cd26:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800cd2a:	a803      	add	r0, sp, #12
 800cd2c:	f7ff ff1e 	bl	800cb6c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800cd30:	6862      	ldr	r2, [r4, #4]
 800cd32:	492e      	ldr	r1, [pc, #184]	; (800cdec <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x108>)
 800cd34:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800cd38:	a803      	add	r0, sp, #12
 800cd3a:	f7ff ff17 	bl	800cb6c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800cd3e:	6862      	ldr	r2, [r4, #4]
 800cd40:	492b      	ldr	r1, [pc, #172]	; (800cdf0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x10c>)
 800cd42:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800cd46:	a803      	add	r0, sp, #12
 800cd48:	f7ff ff10 	bl	800cb6c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800cd4c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800cd50:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800cd54:	6862      	ldr	r2, [r4, #4]
 800cd56:	42ab      	cmp	r3, r5
 800cd58:	d223      	bcs.n	800cda2 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xbe>
 800cd5a:	9803      	ldr	r0, [sp, #12]
 800cd5c:	06d2      	lsls	r2, r2, #27
 800cd5e:	4418      	add	r0, r3
 800cd60:	eba5 0503 	sub.w	r5, r5, r3
 800cd64:	f104 040c 	add.w	r4, r4, #12
 800cd68:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800cd6c:	d40b      	bmi.n	800cd86 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa2>
 800cd6e:	b95b      	cbnz	r3, 800cd88 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa4>
 800cd70:	4b20      	ldr	r3, [pc, #128]	; (800cdf4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 800cd72:	4a21      	ldr	r2, [pc, #132]	; (800cdf8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>)
 800cd74:	9400      	str	r4, [sp, #0]
 800cd76:	e00a      	b.n	800cd8e <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xaa>
 800cd78:	6823      	ldr	r3, [r4, #0]
 800cd7a:	4601      	mov	r1, r0
 800cd7c:	681a      	ldr	r2, [r3, #0]
 800cd7e:	4618      	mov	r0, r3
 800cd80:	68d2      	ldr	r2, [r2, #12]
 800cd82:	4790      	blx	r2
 800cd84:	e7b9      	b.n	800ccfa <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x16>
 800cd86:	b32b      	cbz	r3, 800cdd4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf0>
 800cd88:	4b1a      	ldr	r3, [pc, #104]	; (800cdf4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 800cd8a:	4a1c      	ldr	r2, [pc, #112]	; (800cdfc <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x118>)
 800cd8c:	9400      	str	r4, [sp, #0]
 800cd8e:	4629      	mov	r1, r5
 800cd90:	f7fc fa94 	bl	80092bc <snprintf>
 800cd94:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800cd98:	4285      	cmp	r5, r0
 800cd9a:	bfa4      	itt	ge
 800cd9c:	181b      	addge	r3, r3, r0
 800cd9e:	f8ad 3012 	strhge.w	r3, [sp, #18]
 800cda2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800cda6:	b17b      	cbz	r3, 800cdc8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xe4>
 800cda8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800cdac:	9b03      	ldr	r3, [sp, #12]
 800cdae:	4413      	add	r3, r2
 800cdb0:	227d      	movs	r2, #125	; 0x7d
 800cdb2:	f803 2c01 	strb.w	r2, [r3, #-1]
 800cdb6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800cdba:	9903      	ldr	r1, [sp, #12]
 800cdbc:	54ca      	strb	r2, [r1, r3]
 800cdbe:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800cdc2:	3301      	adds	r3, #1
 800cdc4:	f8ad 3012 	strh.w	r3, [sp, #18]
 800cdc8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800cdcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdce:	601a      	str	r2, [r3, #0]
 800cdd0:	b006      	add	sp, #24
 800cdd2:	bd70      	pop	{r4, r5, r6, pc}
 800cdd4:	4b07      	ldr	r3, [pc, #28]	; (800cdf4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 800cdd6:	4a0a      	ldr	r2, [pc, #40]	; (800ce00 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x11c>)
 800cdd8:	9400      	str	r4, [sp, #0]
 800cdda:	e7d8      	b.n	800cd8e <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xaa>
 800cddc:	08013d34 	stmdaeq	r1, {r2, r4, r5, r8, sl, fp, ip, sp}
 800cde0:	08013d2c 	stmdaeq	r1, {r2, r3, r5, r8, sl, fp, ip, sp}
 800cde4:	08013d4d 	stmdaeq	r1, {r0, r2, r3, r6, r8, sl, fp, ip, sp}
 800cde8:	08013d5b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r8, sl, fp, ip, sp}
 800cdec:	08013d69 	stmdaeq	r1, {r0, r3, r5, r6, r8, sl, fp, ip, sp}
 800cdf0:	08013d77 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r8, sl, fp, ip, sp}
 800cdf4:	08013d40 	stmdaeq	r1, {r6, r8, sl, fp, ip, sp}
 800cdf8:	08013488 	stmdaeq	r1, {r3, r7, sl, ip, sp}
 800cdfc:	0801347d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, sl, ip, sp}
 800ce00:	08013489 	stmdaeq	r1, {r0, r3, r7, sl, ip, sp}

0800ce04 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>:
 800ce04:	b513      	push	{r0, r1, r4, lr}
 800ce06:	6804      	ldr	r4, [r0, #0]
 800ce08:	b914      	cbnz	r4, 800ce10 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800ce0a:	601c      	str	r4, [r3, #0]
 800ce0c:	b002      	add	sp, #8
 800ce0e:	bd10      	pop	{r4, pc}
 800ce10:	9300      	str	r3, [sp, #0]
 800ce12:	4613      	mov	r3, r2
 800ce14:	460a      	mov	r2, r1
 800ce16:	2100      	movs	r1, #0
 800ce18:	f7ff ff64 	bl	800cce4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>
 800ce1c:	e7f6      	b.n	800ce0c <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800ce1e <RemoteConfigParams::Set(RemoteConfig*)>:
 800ce1e:	b538      	push	{r3, r4, r5, lr}
 800ce20:	460c      	mov	r4, r1
 800ce22:	4605      	mov	r5, r0
 800ce24:	6841      	ldr	r1, [r0, #4]
 800ce26:	4620      	mov	r0, r4
 800ce28:	f001 0101 	and.w	r1, r1, #1
 800ce2c:	f7ff fc4e 	bl	800c6cc <RemoteConfig::SetDisable(bool)>
 800ce30:	686b      	ldr	r3, [r5, #4]
 800ce32:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800ce36:	f884 25d5 	strb.w	r2, [r4, #1493]	; 0x5d5
 800ce3a:	f3c3 0280 	ubfx	r2, r3, #2, #1
 800ce3e:	f884 25d6 	strb.w	r2, [r4, #1494]	; 0x5d6
 800ce42:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 800ce46:	f884 25d7 	strb.w	r2, [r4, #1495]	; 0x5d7
 800ce4a:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800ce4e:	06db      	lsls	r3, r3, #27
 800ce50:	f884 25d8 	strb.w	r2, [r4, #1496]	; 0x5d8
 800ce54:	d506      	bpl.n	800ce64 <RemoteConfigParams::Set(RemoteConfig*)+0x46>
 800ce56:	4620      	mov	r0, r4
 800ce58:	f105 010c 	add.w	r1, r5, #12
 800ce5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce60:	f7ff bc58 	b.w	800c714 <RemoteConfig::SetDisplayName(char const*)>
 800ce64:	bd38      	pop	{r3, r4, r5, pc}

0800ce66 <RemoteConfigParams::Dump()>:
 800ce66:	4770      	bx	lr

0800ce68 <Display::TextStatus(char const*)>:
 800ce68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce6c:	4604      	mov	r4, r0
 800ce6e:	6980      	ldr	r0, [r0, #24]
 800ce70:	460d      	mov	r5, r1
 800ce72:	2800      	cmp	r0, #0
 800ce74:	d031      	beq.n	800ceda <Display::TextStatus(char const*)+0x72>
 800ce76:	7947      	ldrb	r7, [r0, #5]
 800ce78:	6803      	ldr	r3, [r0, #0]
 800ce7a:	1e7e      	subs	r6, r7, #1
 800ce7c:	b2f6      	uxtb	r6, r6
 800ce7e:	4632      	mov	r2, r6
 800ce80:	2100      	movs	r1, #0
 800ce82:	6a1b      	ldr	r3, [r3, #32]
 800ce84:	f890 9004 	ldrb.w	r9, [r0, #4]
 800ce88:	f04f 0800 	mov.w	r8, #0
 800ce8c:	4798      	blx	r3
 800ce8e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800ce92:	45c1      	cmp	r9, r8
 800ce94:	69a0      	ldr	r0, [r4, #24]
 800ce96:	d818      	bhi.n	800ceca <Display::TextStatus(char const*)+0x62>
 800ce98:	b120      	cbz	r0, 800cea4 <Display::TextStatus(char const*)+0x3c>
 800ce9a:	6803      	ldr	r3, [r0, #0]
 800ce9c:	4632      	mov	r2, r6
 800ce9e:	2100      	movs	r1, #0
 800cea0:	6a1b      	ldr	r3, [r3, #32]
 800cea2:	4798      	blx	r3
 800cea4:	69a0      	ldr	r0, [r4, #24]
 800cea6:	b1c0      	cbz	r0, 800ceda <Display::TextStatus(char const*)+0x72>
 800cea8:	2300      	movs	r3, #0
 800ceaa:	7901      	ldrb	r1, [r0, #4]
 800ceac:	5cea      	ldrb	r2, [r5, r3]
 800ceae:	b11a      	cbz	r2, 800ceb8 <Display::TextStatus(char const*)+0x50>
 800ceb0:	1c5a      	adds	r2, r3, #1
 800ceb2:	4299      	cmp	r1, r3
 800ceb4:	4613      	mov	r3, r2
 800ceb6:	dcf9      	bgt.n	800ceac <Display::TextStatus(char const*)+0x44>
 800ceb8:	6802      	ldr	r2, [r0, #0]
 800ceba:	4639      	mov	r1, r7
 800cebc:	69d4      	ldr	r4, [r2, #28]
 800cebe:	b2db      	uxtb	r3, r3
 800cec0:	462a      	mov	r2, r5
 800cec2:	46a4      	mov	ip, r4
 800cec4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cec8:	4760      	bx	ip
 800ceca:	b118      	cbz	r0, 800ced4 <Display::TextStatus(char const*)+0x6c>
 800cecc:	6803      	ldr	r3, [r0, #0]
 800cece:	2120      	movs	r1, #32
 800ced0:	695b      	ldr	r3, [r3, #20]
 800ced2:	4798      	blx	r3
 800ced4:	f108 0801 	add.w	r8, r8, #1
 800ced8:	e7db      	b.n	800ce92 <Display::TextStatus(char const*)+0x2a>
 800ceda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800cee0 <RemoteConfig::HandleReboot()>:
 800cee0:	f890 35d6 	ldrb.w	r3, [r0, #1494]	; 0x5d6
 800cee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d03d      	beq.n	800cf66 <RemoteConfig::HandleReboot()+0x86>
 800ceea:	2301      	movs	r3, #1
 800ceec:	4c1f      	ldr	r4, [pc, #124]	; (800cf6c <RemoteConfig::HandleReboot()+0x8c>)
 800ceee:	f880 35d9 	strb.w	r3, [r0, #1497]	; 0x5d9
 800cef2:	6825      	ldr	r5, [r4, #0]
 800cef4:	69a8      	ldr	r0, [r5, #24]
 800cef6:	b138      	cbz	r0, 800cf08 <RemoteConfig::HandleReboot()+0x28>
 800cef8:	2100      	movs	r1, #0
 800cefa:	6803      	ldr	r3, [r0, #0]
 800cefc:	7429      	strb	r1, [r5, #16]
 800cefe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf00:	4798      	blx	r3
 800cf02:	4b1b      	ldr	r3, [pc, #108]	; (800cf70 <RemoteConfig::HandleReboot()+0x90>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	606b      	str	r3, [r5, #4]
 800cf08:	4d1a      	ldr	r5, [pc, #104]	; (800cf74 <RemoteConfig::HandleReboot()+0x94>)
 800cf0a:	6828      	ldr	r0, [r5, #0]
 800cf0c:	f000 fdf2 	bl	800daf4 <SpiFlashStore::Flash()>
 800cf10:	2800      	cmp	r0, #0
 800cf12:	d1fa      	bne.n	800cf0a <RemoteConfig::HandleReboot()+0x2a>
 800cf14:	4b18      	ldr	r3, [pc, #96]	; (800cf78 <RemoteConfig::HandleReboot()+0x98>)
 800cf16:	6818      	ldr	r0, [r3, #0]
 800cf18:	f002 f93c 	bl	800f194 <Network::Shutdown()>
 800cf1c:	4817      	ldr	r0, [pc, #92]	; (800cf7c <RemoteConfig::HandleReboot()+0x9c>)
 800cf1e:	f7fc f9bd 	bl	800929c <printf>
 800cf22:	6823      	ldr	r3, [r4, #0]
 800cf24:	6998      	ldr	r0, [r3, #24]
 800cf26:	b110      	cbz	r0, 800cf2e <RemoteConfig::HandleReboot()+0x4e>
 800cf28:	6803      	ldr	r3, [r0, #0]
 800cf2a:	68db      	ldr	r3, [r3, #12]
 800cf2c:	4798      	blx	r3
 800cf2e:	6824      	ldr	r4, [r4, #0]
 800cf30:	4913      	ldr	r1, [pc, #76]	; (800cf80 <RemoteConfig::HandleReboot()+0xa0>)
 800cf32:	4620      	mov	r0, r4
 800cf34:	f7ff ff98 	bl	800ce68 <Display::TextStatus(char const*)>
 800cf38:	7c63      	ldrb	r3, [r4, #17]
 800cf3a:	b183      	cbz	r3, 800cf5e <RemoteConfig::HandleReboot()+0x7e>
 800cf3c:	f64b 7312 	movw	r3, #48914	; 0xbf12
 800cf40:	f8ad 3004 	strh.w	r3, [sp, #4]
 800cf44:	23bf      	movs	r3, #191	; 0xbf
 800cf46:	7a20      	ldrb	r0, [r4, #8]
 800cf48:	f88d 3006 	strb.w	r3, [sp, #6]
 800cf4c:	f004 fff8 	bl	8011f40 <gd32_i2c_set_address(unsigned char)>
 800cf50:	68e0      	ldr	r0, [r4, #12]
 800cf52:	f004 ffed 	bl	8011f30 <gd32_i2c_set_baudrate(unsigned int)>
 800cf56:	2103      	movs	r1, #3
 800cf58:	a801      	add	r0, sp, #4
 800cf5a:	f004 fff7 	bl	8011f4c <gd32_i2c_write(char const*, unsigned int)>
 800cf5e:	4b09      	ldr	r3, [pc, #36]	; (800cf84 <RemoteConfig::HandleReboot()+0xa4>)
 800cf60:	6818      	ldr	r0, [r3, #0]
 800cf62:	f003 ff6d 	bl	8010e40 <Hardware::Reboot()>
 800cf66:	b003      	add	sp, #12
 800cf68:	bd30      	pop	{r4, r5, pc}
 800cf6a:	bf00      	nop
 800cf6c:	200096a4 	andcs	r9, r0, r4, lsr #13
 800cf70:	200097ac 	andcs	r9, r0, ip, lsr #15
 800cf74:	20001774 	andcs	r1, r0, r4, ror r7
 800cf78:	20009074 	andcs	r9, r0, r4, ror r0
 800cf7c:	08013994 	stmdaeq	r1, {r2, r4, r7, r8, fp, ip, sp}
 800cf80:	080139a3 	stmdaeq	r1, {r0, r1, r5, r7, r8, fp, ip, sp}
 800cf84:	20009794 	mulcs	r0, r4, r7

0800cf88 <RemoteConfig::GetIndex(void const*, unsigned int&)>:
 800cf88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800cf8c:	2000      	movs	r0, #0
 800cf8e:	4d12      	ldr	r5, [pc, #72]	; (800cfd8 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x50>)
 800cf90:	f10d 0c04 	add.w	ip, sp, #4
 800cf94:	6814      	ldr	r4, [r2, #0]
 800cf96:	7d2b      	ldrb	r3, [r5, #20]
 800cf98:	692e      	ldr	r6, [r5, #16]
 800cf9a:	42a3      	cmp	r3, r4
 800cf9c:	bf34      	ite	cc
 800cf9e:	4664      	movcc	r4, ip
 800cfa0:	4614      	movcs	r4, r2
 800cfa2:	9301      	str	r3, [sp, #4]
 800cfa4:	6827      	ldr	r7, [r4, #0]
 800cfa6:	460c      	mov	r4, r1
 800cfa8:	3e01      	subs	r6, #1
 800cfaa:	440f      	add	r7, r1
 800cfac:	42bc      	cmp	r4, r7
 800cfae:	d101      	bne.n	800cfb4 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x2c>
 800cfb0:	6013      	str	r3, [r2, #0]
 800cfb2:	e00c      	b.n	800cfce <RemoteConfig::GetIndex(void const*, unsigned int&)+0x46>
 800cfb4:	f894 8000 	ldrb.w	r8, [r4]
 800cfb8:	f816 ef01 	ldrb.w	lr, [r6, #1]!
 800cfbc:	45f0      	cmp	r8, lr
 800cfbe:	d009      	beq.n	800cfd4 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x4c>
 800cfc0:	3001      	adds	r0, #1
 800cfc2:	2804      	cmp	r0, #4
 800cfc4:	f105 051c 	add.w	r5, r5, #28
 800cfc8:	d1e4      	bne.n	800cf94 <RemoteConfig::GetIndex(void const*, unsigned int&)+0xc>
 800cfca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cfce:	b002      	add	sp, #8
 800cfd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfd4:	3401      	adds	r4, #1
 800cfd6:	e7e9      	b.n	800cfac <RemoteConfig::GetIndex(void const*, unsigned int&)+0x24>
 800cfd8:	080139e0 	stmdaeq	r1, {r5, r6, r7, r8, fp, ip, sp}

0800cfdc <RemoteConfig::PlatformHandleTftpSet()>:
 800cfdc:	f890 15ec 	ldrb.w	r1, [r0, #1516]	; 0x5ec
 800cfe0:	b109      	cbz	r1, 800cfe6 <RemoteConfig::PlatformHandleTftpSet()+0xa>
 800cfe2:	f24a 51a5 	movw	r1, #42405	; 0xa5a5
 800cfe6:	2002      	movs	r0, #2
 800cfe8:	f004 ba3c 	b.w	8011464 <bkp_data_write>

0800cfec <RemoteConfig::PlatformHandleTftpGet()>:
 800cfec:	b510      	push	{r4, lr}
 800cfee:	4604      	mov	r4, r0
 800cff0:	2002      	movs	r0, #2
 800cff2:	f004 fa4d 	bl	8011490 <bkp_data_read>
 800cff6:	f24a 53a5 	movw	r3, #42405	; 0xa5a5
 800cffa:	1ac3      	subs	r3, r0, r3
 800cffc:	4258      	negs	r0, r3
 800cffe:	4158      	adcs	r0, r3
 800d000:	f884 05ec 	strb.w	r0, [r4, #1516]	; 0x5ec
 800d004:	bd10      	pop	{r4, pc}

0800d006 <strcmp>:
 800d006:	1e43      	subs	r3, r0, #1
 800d008:	3901      	subs	r1, #1
 800d00a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800d00e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d012:	4290      	cmp	r0, r2
 800d014:	d001      	beq.n	800d01a <strcmp+0x14>
 800d016:	1a80      	subs	r0, r0, r2
 800d018:	e001      	b.n	800d01e <strcmp+0x18>
 800d01a:	2800      	cmp	r0, #0
 800d01c:	d1f5      	bne.n	800d00a <strcmp+0x4>
 800d01e:	4770      	bx	lr

0800d020 <strcasecmp>:
 800d020:	b530      	push	{r4, r5, lr}
 800d022:	1e42      	subs	r2, r0, #1
 800d024:	3901      	subs	r1, #1
 800d026:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800d02a:	4604      	mov	r4, r0
 800d02c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d030:	2b19      	cmp	r3, #25
 800d032:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d036:	bf98      	it	ls
 800d038:	f100 0420 	addls.w	r4, r0, #32
 800d03c:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
 800d040:	2d19      	cmp	r5, #25
 800d042:	bf98      	it	ls
 800d044:	3320      	addls	r3, #32
 800d046:	42a3      	cmp	r3, r4
 800d048:	d001      	beq.n	800d04e <strcasecmp+0x2e>
 800d04a:	1ae0      	subs	r0, r4, r3
 800d04c:	e001      	b.n	800d052 <strcasecmp+0x32>
 800d04e:	2800      	cmp	r0, #0
 800d050:	d1e9      	bne.n	800d026 <strcasecmp+0x6>
 800d052:	bd30      	pop	{r4, r5, pc}

0800d054 <PropertiesConfig::EnableJSON(bool)>:
 800d054:	4a04      	ldr	r2, [pc, #16]	; (800d068 <PropertiesConfig::EnableJSON(bool)+0x14>)
 800d056:	7813      	ldrb	r3, [r2, #0]
 800d058:	b118      	cbz	r0, 800d062 <PropertiesConfig::EnableJSON(bool)+0xe>
 800d05a:	f043 0301 	orr.w	r3, r3, #1
 800d05e:	7013      	strb	r3, [r2, #0]
 800d060:	4770      	bx	lr
 800d062:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800d066:	e7fa      	b.n	800d05e <PropertiesConfig::EnableJSON(bool)+0xa>
 800d068:	200096a2 	andcs	r9, r0, r2, lsr #13

0800d06c <HttpDaemon::HttpDaemon()>:
 800d06c:	4a0a      	ldr	r2, [pc, #40]	; (800d098 <HttpDaemon::HttpDaemon()+0x2c>)
 800d06e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d072:	6002      	str	r2, [r0, #0]
 800d074:	2200      	movs	r2, #0
 800d076:	f44f 7c02 	mov.w	ip, #520	; 0x208
 800d07a:	e9c0 1204 	strd	r1, r2, [r0, #16]
 800d07e:	2102      	movs	r1, #2
 800d080:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800d084:	e9c0 c106 	strd	ip, r1, [r0, #24]
 800d088:	60c2      	str	r2, [r0, #12]
 800d08a:	8402      	strh	r2, [r0, #32]
 800d08c:	f8a0 25c2 	strh.w	r2, [r0, #1474]	; 0x5c2
 800d090:	f8c0 25c4 	str.w	r2, [r0, #1476]	; 0x5c4
 800d094:	4770      	bx	lr
 800d096:	bf00      	nop
 800d098:	08013cac 	stmdaeq	r1, {r2, r3, r5, r7, sl, fp, ip, sp}

0800d09c <HttpDaemon::Start()>:
 800d09c:	4b04      	ldr	r3, [pc, #16]	; (800d0b0 <HttpDaemon::Start()+0x14>)
 800d09e:	b510      	push	{r4, lr}
 800d0a0:	2150      	movs	r1, #80	; 0x50
 800d0a2:	4604      	mov	r4, r0
 800d0a4:	6818      	ldr	r0, [r3, #0]
 800d0a6:	f002 fa53 	bl	800f550 <Network::TcpBegin(unsigned short)>
 800d0aa:	6120      	str	r0, [r4, #16]
 800d0ac:	bd10      	pop	{r4, pc}
 800d0ae:	bf00      	nop
 800d0b0:	20009074 	andcs	r9, r0, r4, ror r0

0800d0b4 <HttpDaemon::ParseMethod(char*)>:
 800d0b4:	b538      	push	{r3, r4, r5, lr}
 800d0b6:	4604      	mov	r4, r0
 800d0b8:	4608      	mov	r0, r1
 800d0ba:	491a      	ldr	r1, [pc, #104]	; (800d124 <HttpDaemon::ParseMethod(char*)+0x70>)
 800d0bc:	f004 f802 	bl	80110c4 <strtok>
 800d0c0:	4605      	mov	r5, r0
 800d0c2:	b360      	cbz	r0, 800d11e <HttpDaemon::ParseMethod(char*)+0x6a>
 800d0c4:	4918      	ldr	r1, [pc, #96]	; (800d128 <HttpDaemon::ParseMethod(char*)+0x74>)
 800d0c6:	f7ff ff9e 	bl	800d006 <strcmp>
 800d0ca:	b128      	cbz	r0, 800d0d8 <HttpDaemon::ParseMethod(char*)+0x24>
 800d0cc:	4628      	mov	r0, r5
 800d0ce:	4917      	ldr	r1, [pc, #92]	; (800d12c <HttpDaemon::ParseMethod(char*)+0x78>)
 800d0d0:	f7ff ff99 	bl	800d006 <strcmp>
 800d0d4:	bb18      	cbnz	r0, 800d11e <HttpDaemon::ParseMethod(char*)+0x6a>
 800d0d6:	2001      	movs	r0, #1
 800d0d8:	61e0      	str	r0, [r4, #28]
 800d0da:	4912      	ldr	r1, [pc, #72]	; (800d124 <HttpDaemon::ParseMethod(char*)+0x70>)
 800d0dc:	2000      	movs	r0, #0
 800d0de:	f003 fff1 	bl	80110c4 <strtok>
 800d0e2:	b910      	cbnz	r0, 800d0ea <HttpDaemon::ParseMethod(char*)+0x36>
 800d0e4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d0e8:	bd38      	pop	{r3, r4, r5, pc}
 800d0ea:	6060      	str	r0, [r4, #4]
 800d0ec:	4910      	ldr	r1, [pc, #64]	; (800d130 <HttpDaemon::ParseMethod(char*)+0x7c>)
 800d0ee:	2000      	movs	r0, #0
 800d0f0:	f003 ffe8 	bl	80110c4 <strtok>
 800d0f4:	2800      	cmp	r0, #0
 800d0f6:	d0f5      	beq.n	800d0e4 <HttpDaemon::ParseMethod(char*)+0x30>
 800d0f8:	490e      	ldr	r1, [pc, #56]	; (800d134 <HttpDaemon::ParseMethod(char*)+0x80>)
 800d0fa:	f7ff ff84 	bl	800d006 <strcmp>
 800d0fe:	2800      	cmp	r0, #0
 800d100:	d1f0      	bne.n	800d0e4 <HttpDaemon::ParseMethod(char*)+0x30>
 800d102:	490d      	ldr	r1, [pc, #52]	; (800d138 <HttpDaemon::ParseMethod(char*)+0x84>)
 800d104:	f003 ffde 	bl	80110c4 <strtok>
 800d108:	2800      	cmp	r0, #0
 800d10a:	d0eb      	beq.n	800d0e4 <HttpDaemon::ParseMethod(char*)+0x30>
 800d10c:	490b      	ldr	r1, [pc, #44]	; (800d13c <HttpDaemon::ParseMethod(char*)+0x88>)
 800d10e:	f7ff ff7a 	bl	800d006 <strcmp>
 800d112:	2800      	cmp	r0, #0
 800d114:	f240 10f9 	movw	r0, #505	; 0x1f9
 800d118:	bf08      	it	eq
 800d11a:	20c8      	moveq	r0, #200	; 0xc8
 800d11c:	e7e4      	b.n	800d0e8 <HttpDaemon::ParseMethod(char*)+0x34>
 800d11e:	f240 10f5 	movw	r0, #501	; 0x1f5
 800d122:	e7e1      	b.n	800d0e8 <HttpDaemon::ParseMethod(char*)+0x34>
 800d124:	08013a50 	stmdaeq	r1, {r4, r6, r9, fp, ip, sp}
 800d128:	08013a52 	stmdaeq	r1, {r1, r4, r6, r9, fp, ip, sp}
 800d12c:	08013a56 	stmdaeq	r1, {r1, r2, r4, r6, r9, fp, ip, sp}
 800d130:	08013ac0 	stmdaeq	r1, {r6, r7, r9, fp, ip, sp}
 800d134:	08013a5b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r9, fp, ip, sp}
 800d138:	08013a60 	stmdaeq	r1, {r5, r6, r9, fp, ip, sp}
 800d13c:	08013a63 	stmdaeq	r1, {r0, r1, r5, r6, r9, fp, ip, sp}

0800d140 <HttpDaemon::ParseHeaderField(char*)>:
 800d140:	b538      	push	{r3, r4, r5, lr}
 800d142:	4605      	mov	r5, r0
 800d144:	4608      	mov	r0, r1
 800d146:	491d      	ldr	r1, [pc, #116]	; (800d1bc <HttpDaemon::ParseHeaderField(char*)+0x7c>)
 800d148:	f003 ffbc 	bl	80110c4 <strtok>
 800d14c:	4604      	mov	r4, r0
 800d14e:	b910      	cbnz	r0, 800d156 <HttpDaemon::ParseHeaderField(char*)+0x16>
 800d150:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d154:	bd38      	pop	{r3, r4, r5, pc}
 800d156:	491a      	ldr	r1, [pc, #104]	; (800d1c0 <HttpDaemon::ParseHeaderField(char*)+0x80>)
 800d158:	f7ff ff62 	bl	800d020 <strcasecmp>
 800d15c:	b970      	cbnz	r0, 800d17c <HttpDaemon::ParseHeaderField(char*)+0x3c>
 800d15e:	4919      	ldr	r1, [pc, #100]	; (800d1c4 <HttpDaemon::ParseHeaderField(char*)+0x84>)
 800d160:	f003 ffb0 	bl	80110c4 <strtok>
 800d164:	2800      	cmp	r0, #0
 800d166:	d0f3      	beq.n	800d150 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800d168:	4917      	ldr	r1, [pc, #92]	; (800d1c8 <HttpDaemon::ParseHeaderField(char*)+0x88>)
 800d16a:	f7ff ff4c 	bl	800d006 <strcmp>
 800d16e:	b108      	cbz	r0, 800d174 <HttpDaemon::ParseHeaderField(char*)+0x34>
 800d170:	20c8      	movs	r0, #200	; 0xc8
 800d172:	e7ef      	b.n	800d154 <HttpDaemon::ParseHeaderField(char*)+0x14>
 800d174:	2301      	movs	r3, #1
 800d176:	f885 3020 	strb.w	r3, [r5, #32]
 800d17a:	e7f9      	b.n	800d170 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800d17c:	4620      	mov	r0, r4
 800d17e:	4913      	ldr	r1, [pc, #76]	; (800d1cc <HttpDaemon::ParseHeaderField(char*)+0x8c>)
 800d180:	f7ff ff4e 	bl	800d020 <strcasecmp>
 800d184:	4604      	mov	r4, r0
 800d186:	2800      	cmp	r0, #0
 800d188:	d1f2      	bne.n	800d170 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800d18a:	4911      	ldr	r1, [pc, #68]	; (800d1d0 <HttpDaemon::ParseHeaderField(char*)+0x90>)
 800d18c:	f003 ff9a 	bl	80110c4 <strtok>
 800d190:	2800      	cmp	r0, #0
 800d192:	d0dd      	beq.n	800d150 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800d194:	1e42      	subs	r2, r0, #1
 800d196:	4623      	mov	r3, r4
 800d198:	200a      	movs	r0, #10
 800d19a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800d19e:	b911      	cbnz	r1, 800d1a6 <HttpDaemon::ParseHeaderField(char*)+0x66>
 800d1a0:	f8a5 35c6 	strh.w	r3, [r5, #1478]	; 0x5c6
 800d1a4:	e7e4      	b.n	800d170 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800d1a6:	3930      	subs	r1, #48	; 0x30
 800d1a8:	2909      	cmp	r1, #9
 800d1aa:	d8d1      	bhi.n	800d150 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800d1ac:	fb00 1303 	mla	r3, r0, r3, r1
 800d1b0:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 800d1b4:	d9f1      	bls.n	800d19a <HttpDaemon::ParseHeaderField(char*)+0x5a>
 800d1b6:	f240 109d 	movw	r0, #413	; 0x19d
 800d1ba:	e7cb      	b.n	800d154 <HttpDaemon::ParseHeaderField(char*)+0x14>
 800d1bc:	08013a67 	stmdaeq	r1, {r0, r1, r2, r5, r6, r9, fp, ip, sp}
 800d1c0:	08013a69 	stmdaeq	r1, {r0, r3, r5, r6, r9, fp, ip, sp}
 800d1c4:	08013a76 	stmdaeq	r1, {r1, r2, r4, r5, r6, r9, fp, ip, sp}
 800d1c8:	08013a79 	stmdaeq	r1, {r0, r3, r4, r5, r6, r9, fp, ip, sp}
 800d1cc:	08013a8a 	stmdaeq	r1, {r1, r3, r7, r9, fp, ip, sp}
 800d1d0:	08013a50 	stmdaeq	r1, {r4, r6, r9, fp, ip, sp}

0800d1d4 <HttpDaemon::ParseRequest()>:
 800d1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1d6:	2400      	movs	r4, #0
 800d1d8:	4605      	mov	r5, r0
 800d1da:	4622      	mov	r2, r4
 800d1dc:	4626      	mov	r6, r4
 800d1de:	68c1      	ldr	r1, [r0, #12]
 800d1e0:	f880 4020 	strb.w	r4, [r0, #32]
 800d1e4:	f8c0 45c4 	str.w	r4, [r0, #1476]	; 0x5c4
 800d1e8:	8aab      	ldrh	r3, [r5, #20]
 800d1ea:	42a3      	cmp	r3, r4
 800d1ec:	d91e      	bls.n	800d22c <HttpDaemon::ParseRequest()+0x58>
 800d1ee:	68eb      	ldr	r3, [r5, #12]
 800d1f0:	5d18      	ldrb	r0, [r3, r4]
 800d1f2:	280a      	cmp	r0, #10
 800d1f4:	d10e      	bne.n	800d214 <HttpDaemon::ParseRequest()+0x40>
 800d1f6:	4423      	add	r3, r4
 800d1f8:	f803 6c01 	strb.w	r6, [r3, #-1]
 800d1fc:	1c57      	adds	r7, r2, #1
 800d1fe:	b962      	cbnz	r2, 800d21a <HttpDaemon::ParseRequest()+0x46>
 800d200:	4628      	mov	r0, r5
 800d202:	f7ff ff57 	bl	800d0b4 <HttpDaemon::ParseMethod(char*)>
 800d206:	28c8      	cmp	r0, #200	; 0xc8
 800d208:	d111      	bne.n	800d22e <HttpDaemon::ParseRequest()+0x5a>
 800d20a:	463a      	mov	r2, r7
 800d20c:	68e9      	ldr	r1, [r5, #12]
 800d20e:	3401      	adds	r4, #1
 800d210:	b2a4      	uxth	r4, r4
 800d212:	4421      	add	r1, r4
 800d214:	3401      	adds	r4, #1
 800d216:	b2a4      	uxth	r4, r4
 800d218:	e7e6      	b.n	800d1e8 <HttpDaemon::ParseRequest()+0x14>
 800d21a:	7808      	ldrb	r0, [r1, #0]
 800d21c:	b970      	cbnz	r0, 800d23c <HttpDaemon::ParseRequest()+0x68>
 800d21e:	696b      	ldr	r3, [r5, #20]
 800d220:	3b01      	subs	r3, #1
 800d222:	1b1b      	subs	r3, r3, r4
 800d224:	b29b      	uxth	r3, r3
 800d226:	f8a5 35c4 	strh.w	r3, [r5, #1476]	; 0x5c4
 800d22a:	b90b      	cbnz	r3, 800d230 <HttpDaemon::ParseRequest()+0x5c>
 800d22c:	20c8      	movs	r0, #200	; 0xc8
 800d22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d230:	68ea      	ldr	r2, [r5, #12]
 800d232:	3401      	adds	r4, #1
 800d234:	4414      	add	r4, r2
 800d236:	60ac      	str	r4, [r5, #8]
 800d238:	54e0      	strb	r0, [r4, r3]
 800d23a:	e7f7      	b.n	800d22c <HttpDaemon::ParseRequest()+0x58>
 800d23c:	4628      	mov	r0, r5
 800d23e:	f7ff ff7f 	bl	800d140 <HttpDaemon::ParseHeaderField(char*)>
 800d242:	e7e0      	b.n	800d206 <HttpDaemon::ParseRequest()+0x32>

0800d244 <HttpDaemon::HandleGetTxt()>:
 800d244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d248:	6847      	ldr	r7, [r0, #4]
 800d24a:	4604      	mov	r4, r0
 800d24c:	1dbd      	adds	r5, r7, #6
 800d24e:	462b      	mov	r3, r5
 800d250:	4618      	mov	r0, r3
 800d252:	7802      	ldrb	r2, [r0, #0]
 800d254:	3301      	adds	r3, #1
 800d256:	2a00      	cmp	r2, #0
 800d258:	d1fa      	bne.n	800d250 <HttpDaemon::HandleGetTxt()+0xc>
 800d25a:	1b40      	subs	r0, r0, r5
 800d25c:	2804      	cmp	r0, #4
 800d25e:	d803      	bhi.n	800d268 <HttpDaemon::HandleGetTxt()+0x24>
 800d260:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d268:	3804      	subs	r0, #4
 800d26a:	4914      	ldr	r1, [pc, #80]	; (800d2bc <HttpDaemon::HandleGetTxt()+0x78>)
 800d26c:	4428      	add	r0, r5
 800d26e:	f7ff feca 	bl	800d006 <strcmp>
 800d272:	2800      	cmp	r0, #0
 800d274:	d1f4      	bne.n	800d260 <HttpDaemon::HandleGetTxt()+0x1c>
 800d276:	4b12      	ldr	r3, [pc, #72]	; (800d2c0 <HttpDaemon::HandleGetTxt()+0x7c>)
 800d278:	2001      	movs	r0, #1
 800d27a:	f893 8000 	ldrb.w	r8, [r3]
 800d27e:	f7ff fee9 	bl	800d054 <PropertiesConfig::EnableJSON(bool)>
 800d282:	4b10      	ldr	r3, [pc, #64]	; (800d2c4 <HttpDaemon::HandleGetTxt()+0x80>)
 800d284:	f240 529b 	movw	r2, #1435	; 0x59b
 800d288:	4629      	mov	r1, r5
 800d28a:	6818      	ldr	r0, [r3, #0]
 800d28c:	f7ff fa5a 	bl	800c744 <RemoteConfig::HandleGet(void*, unsigned int)>
 800d290:	4606      	mov	r6, r0
 800d292:	f008 0801 	and.w	r8, r8, #1
 800d296:	4640      	mov	r0, r8
 800d298:	f7ff fedc 	bl	800d054 <PropertiesConfig::EnableJSON(bool)>
 800d29c:	2e00      	cmp	r6, #0
 800d29e:	d0df      	beq.n	800d260 <HttpDaemon::HandleGetTxt()+0x1c>
 800d2a0:	f8a4 65c2 	strh.w	r6, [r4, #1474]	; 0x5c2
 800d2a4:	3606      	adds	r6, #6
 800d2a6:	3422      	adds	r4, #34	; 0x22
 800d2a8:	4437      	add	r7, r6
 800d2aa:	42bd      	cmp	r5, r7
 800d2ac:	d101      	bne.n	800d2b2 <HttpDaemon::HandleGetTxt()+0x6e>
 800d2ae:	20c8      	movs	r0, #200	; 0xc8
 800d2b0:	e7d8      	b.n	800d264 <HttpDaemon::HandleGetTxt()+0x20>
 800d2b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d2b6:	f804 3b01 	strb.w	r3, [r4], #1
 800d2ba:	e7f6      	b.n	800d2aa <HttpDaemon::HandleGetTxt()+0x66>
 800d2bc:	080139cc 	stmdaeq	r1, {r2, r3, r6, r7, r8, fp, ip, sp}
 800d2c0:	200096a2 	andcs	r9, r0, r2, lsr #13
 800d2c4:	2000075c 	andcs	r0, r0, ip, asr r7

0800d2c8 <HttpDaemon::HandleGet()>:
 800d2c8:	b570      	push	{r4, r5, r6, lr}
 800d2ca:	6845      	ldr	r5, [r0, #4]
 800d2cc:	4604      	mov	r4, r0
 800d2ce:	4943      	ldr	r1, [pc, #268]	; (800d3dc <HttpDaemon::HandleGet()+0x114>)
 800d2d0:	4628      	mov	r0, r5
 800d2d2:	f7ff fe98 	bl	800d006 <strcmp>
 800d2d6:	b120      	cbz	r0, 800d2e2 <HttpDaemon::HandleGet()+0x1a>
 800d2d8:	4628      	mov	r0, r5
 800d2da:	4941      	ldr	r1, [pc, #260]	; (800d3e0 <HttpDaemon::HandleGet()+0x118>)
 800d2dc:	f7ff fe93 	bl	800d006 <strcmp>
 800d2e0:	b960      	cbnz	r0, 800d2fc <HttpDaemon::HandleGet()+0x34>
 800d2e2:	4621      	mov	r1, r4
 800d2e4:	4b3f      	ldr	r3, [pc, #252]	; (800d3e4 <HttpDaemon::HandleGet()+0x11c>)
 800d2e6:	4840      	ldr	r0, [pc, #256]	; (800d3e8 <HttpDaemon::HandleGet()+0x120>)
 800d2e8:	f841 3b22 	str.w	r3, [r1], #34
 800d2ec:	f000 fa7a 	bl	800d7e4 <get_file_content(char const*, char*)>
 800d2f0:	2800      	cmp	r0, #0
 800d2f2:	dd33      	ble.n	800d35c <HttpDaemon::HandleGet()+0x94>
 800d2f4:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 800d2f8:	20c8      	movs	r0, #200	; 0xc8
 800d2fa:	bd70      	pop	{r4, r5, r6, pc}
 800d2fc:	4628      	mov	r0, r5
 800d2fe:	493b      	ldr	r1, [pc, #236]	; (800d3ec <HttpDaemon::HandleGet()+0x124>)
 800d300:	f7ff fe81 	bl	800d006 <strcmp>
 800d304:	b928      	cbnz	r0, 800d312 <HttpDaemon::HandleGet()+0x4a>
 800d306:	4621      	mov	r1, r4
 800d308:	4b39      	ldr	r3, [pc, #228]	; (800d3f0 <HttpDaemon::HandleGet()+0x128>)
 800d30a:	483a      	ldr	r0, [pc, #232]	; (800d3f4 <HttpDaemon::HandleGet()+0x12c>)
 800d30c:	f841 3b22 	str.w	r3, [r1], #34
 800d310:	e7ec      	b.n	800d2ec <HttpDaemon::HandleGet()+0x24>
 800d312:	4628      	mov	r0, r5
 800d314:	4938      	ldr	r1, [pc, #224]	; (800d3f8 <HttpDaemon::HandleGet()+0x130>)
 800d316:	f7ff fe76 	bl	800d006 <strcmp>
 800d31a:	b198      	cbz	r0, 800d344 <HttpDaemon::HandleGet()+0x7c>
 800d31c:	4a37      	ldr	r2, [pc, #220]	; (800d3fc <HttpDaemon::HandleGet()+0x134>)
 800d31e:	1e6b      	subs	r3, r5, #1
 800d320:	1d69      	adds	r1, r5, #5
 800d322:	428b      	cmp	r3, r1
 800d324:	d114      	bne.n	800d350 <HttpDaemon::HandleGet()+0x88>
 800d326:	4b36      	ldr	r3, [pc, #216]	; (800d400 <HttpDaemon::HandleGet()+0x138>)
 800d328:	3506      	adds	r5, #6
 800d32a:	4628      	mov	r0, r5
 800d32c:	4935      	ldr	r1, [pc, #212]	; (800d404 <HttpDaemon::HandleGet()+0x13c>)
 800d32e:	6023      	str	r3, [r4, #0]
 800d330:	f7ff fe69 	bl	800d006 <strcmp>
 800d334:	b9a8      	cbnz	r0, 800d362 <HttpDaemon::HandleGet()+0x9a>
 800d336:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800d33a:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800d33e:	f000 f9d9 	bl	800d6f4 <remoteconfig::json_get_list(char*, unsigned short)>
 800d342:	e7d5      	b.n	800d2f0 <HttpDaemon::HandleGet()+0x28>
 800d344:	4621      	mov	r1, r4
 800d346:	4b30      	ldr	r3, [pc, #192]	; (800d408 <HttpDaemon::HandleGet()+0x140>)
 800d348:	4830      	ldr	r0, [pc, #192]	; (800d40c <HttpDaemon::HandleGet()+0x144>)
 800d34a:	f841 3b22 	str.w	r3, [r1], #34
 800d34e:	e7cd      	b.n	800d2ec <HttpDaemon::HandleGet()+0x24>
 800d350:	f812 0b01 	ldrb.w	r0, [r2], #1
 800d354:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 800d358:	4286      	cmp	r6, r0
 800d35a:	d0e2      	beq.n	800d322 <HttpDaemon::HandleGet()+0x5a>
 800d35c:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800d360:	e7cb      	b.n	800d2fa <HttpDaemon::HandleGet()+0x32>
 800d362:	4628      	mov	r0, r5
 800d364:	492a      	ldr	r1, [pc, #168]	; (800d410 <HttpDaemon::HandleGet()+0x148>)
 800d366:	f7ff fe4e 	bl	800d006 <strcmp>
 800d36a:	b930      	cbnz	r0, 800d37a <HttpDaemon::HandleGet()+0xb2>
 800d36c:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800d370:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800d374:	f000 f9f2 	bl	800d75c <remoteconfig::json_get_version(char*, unsigned short)>
 800d378:	e7ba      	b.n	800d2f0 <HttpDaemon::HandleGet()+0x28>
 800d37a:	4628      	mov	r0, r5
 800d37c:	4925      	ldr	r1, [pc, #148]	; (800d414 <HttpDaemon::HandleGet()+0x14c>)
 800d37e:	f7ff fe42 	bl	800d006 <strcmp>
 800d382:	b958      	cbnz	r0, 800d39c <HttpDaemon::HandleGet()+0xd4>
 800d384:	4b24      	ldr	r3, [pc, #144]	; (800d418 <HttpDaemon::HandleGet()+0x150>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f893 35d7 	ldrb.w	r3, [r3, #1495]	; 0x5d7
 800d38c:	b31b      	cbz	r3, 800d3d6 <HttpDaemon::HandleGet()+0x10e>
 800d38e:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800d392:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800d396:	f000 f9fd 	bl	800d794 <remoteconfig::json_get_uptime(char*, unsigned short)>
 800d39a:	e7a9      	b.n	800d2f0 <HttpDaemon::HandleGet()+0x28>
 800d39c:	4628      	mov	r0, r5
 800d39e:	491f      	ldr	r1, [pc, #124]	; (800d41c <HttpDaemon::HandleGet()+0x154>)
 800d3a0:	f7ff fe31 	bl	800d006 <strcmp>
 800d3a4:	b930      	cbnz	r0, 800d3b4 <HttpDaemon::HandleGet()+0xec>
 800d3a6:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800d3aa:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800d3ae:	f000 fa01 	bl	800d7b4 <remoteconfig::json_get_display(char*, unsigned short)>
 800d3b2:	e79d      	b.n	800d2f0 <HttpDaemon::HandleGet()+0x28>
 800d3b4:	4628      	mov	r0, r5
 800d3b6:	491a      	ldr	r1, [pc, #104]	; (800d420 <HttpDaemon::HandleGet()+0x158>)
 800d3b8:	f7ff fe25 	bl	800d006 <strcmp>
 800d3bc:	b930      	cbnz	r0, 800d3cc <HttpDaemon::HandleGet()+0x104>
 800d3be:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800d3c2:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800d3c6:	f000 fa05 	bl	800d7d4 <remoteconfig::json_get_directory(char*, unsigned short)>
 800d3ca:	e791      	b.n	800d2f0 <HttpDaemon::HandleGet()+0x28>
 800d3cc:	4620      	mov	r0, r4
 800d3ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d3d2:	f7ff bf37 	b.w	800d244 <HttpDaemon::HandleGetTxt()>
 800d3d6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d3da:	e78e      	b.n	800d2fa <HttpDaemon::HandleGet()+0x32>
 800d3dc:	08013ac0 	stmdaeq	r1, {r6, r7, r9, fp, ip, sp}
 800d3e0:	08013a99 	stmdaeq	r1, {r0, r3, r4, r7, r9, fp, ip, sp}
 800d3e4:	08013cac 	stmdaeq	r1, {r2, r3, r5, r7, sl, fp, ip, sp}
 800d3e8:	08013a9a 	stmdaeq	r1, {r1, r3, r4, r7, r9, fp, ip, sp}
 800d3ec:	08013aa5 	stmdaeq	r1, {r0, r2, r5, r7, r9, fp, ip, sp}
 800d3f0:	08013ccc 	stmdaeq	r1, {r2, r3, r6, r7, sl, fp, ip, sp}
 800d3f4:	08013aa6 	stmdaeq	r1, {r1, r2, r5, r7, r9, fp, ip, sp}
 800d3f8:	08013ab1 	stmdaeq	r1, {r0, r4, r5, r7, r9, fp, ip, sp}
 800d3fc:	08013abb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r9, fp, ip, sp}
 800d400:	08013d0c 	stmdaeq	r1, {r2, r3, r8, sl, fp, ip, sp}
 800d404:	08013ac2 	stmdaeq	r1, {r1, r6, r7, r9, fp, ip, sp}
 800d408:	08013cec 	stmdaeq	r1, {r2, r3, r5, r6, r7, sl, fp, ip, sp}
 800d40c:	08013ab2 	stmdaeq	r1, {r1, r4, r5, r7, r9, fp, ip, sp}
 800d410:	08013ac7 	stmdaeq	r1, {r0, r1, r2, r6, r7, r9, fp, ip, sp}
 800d414:	08013acf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, r9, fp, ip, sp}
 800d418:	2000075c 	andcs	r0, r0, ip, asr r7
 800d41c:	08013ad6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r9, fp, ip, sp}
 800d420:	08013ade 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r9, fp, ip, sp}

0800d424 <HttpDaemon::HandlePost(bool)>:
 800d424:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d426:	4604      	mov	r4, r0
 800d428:	2900      	cmp	r1, #0
 800d42a:	f040 8091 	bne.w	800d550 <HttpDaemon::HandlePost(bool)+0x12c>
 800d42e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d05d      	beq.n	800d4f2 <HttpDaemon::HandlePost(bool)+0xce>
 800d436:	6845      	ldr	r5, [r0, #4]
 800d438:	4948      	ldr	r1, [pc, #288]	; (800d55c <HttpDaemon::HandlePost(bool)+0x138>)
 800d43a:	4628      	mov	r0, r5
 800d43c:	f7ff fde3 	bl	800d006 <strcmp>
 800d440:	2800      	cmp	r0, #0
 800d442:	bf0c      	ite	eq
 800d444:	2301      	moveq	r3, #1
 800d446:	2300      	movne	r3, #0
 800d448:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 800d44c:	d055      	beq.n	800d4fa <HttpDaemon::HandlePost(bool)+0xd6>
 800d44e:	4628      	mov	r0, r5
 800d450:	4943      	ldr	r1, [pc, #268]	; (800d560 <HttpDaemon::HandlePost(bool)+0x13c>)
 800d452:	f7ff fdd8 	bl	800d006 <strcmp>
 800d456:	2800      	cmp	r0, #0
 800d458:	d04f      	beq.n	800d4fa <HttpDaemon::HandlePost(bool)+0xd6>
 800d45a:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800d45e:	e04a      	b.n	800d4f6 <HttpDaemon::HandlePost(bool)+0xd2>
 800d460:	4940      	ldr	r1, [pc, #256]	; (800d564 <HttpDaemon::HandlePost(bool)+0x140>)
 800d462:	68a0      	ldr	r0, [r4, #8]
 800d464:	f10d 0207 	add.w	r2, sp, #7
 800d468:	f003 f8d0 	bl	801060c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d46c:	b9e8      	cbnz	r0, 800d4aa <HttpDaemon::HandlePost(bool)+0x86>
 800d46e:	f89d 6007 	ldrb.w	r6, [sp, #7]
 800d472:	4b3d      	ldr	r3, [pc, #244]	; (800d568 <HttpDaemon::HandlePost(bool)+0x144>)
 800d474:	fab6 f186 	clz	r1, r6
 800d478:	681d      	ldr	r5, [r3, #0]
 800d47a:	0949      	lsrs	r1, r1, #5
 800d47c:	69a8      	ldr	r0, [r5, #24]
 800d47e:	b138      	cbz	r0, 800d490 <HttpDaemon::HandlePost(bool)+0x6c>
 800d480:	6803      	ldr	r3, [r0, #0]
 800d482:	7429      	strb	r1, [r5, #16]
 800d484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d486:	4798      	blx	r3
 800d488:	b116      	cbz	r6, 800d490 <HttpDaemon::HandlePost(bool)+0x6c>
 800d48a:	4b38      	ldr	r3, [pc, #224]	; (800d56c <HttpDaemon::HandlePost(bool)+0x148>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	606b      	str	r3, [r5, #4]
 800d490:	4620      	mov	r0, r4
 800d492:	4b37      	ldr	r3, [pc, #220]	; (800d570 <HttpDaemon::HandlePost(bool)+0x14c>)
 800d494:	f240 519f 	movw	r1, #1439	; 0x59f
 800d498:	4a36      	ldr	r2, [pc, #216]	; (800d574 <HttpDaemon::HandlePost(bool)+0x150>)
 800d49a:	f840 3b22 	str.w	r3, [r0], #34
 800d49e:	f7fb ff0d 	bl	80092bc <snprintf>
 800d4a2:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 800d4a6:	20c8      	movs	r0, #200	; 0xc8
 800d4a8:	e025      	b.n	800d4f6 <HttpDaemon::HandlePost(bool)+0xd2>
 800d4aa:	4933      	ldr	r1, [pc, #204]	; (800d578 <HttpDaemon::HandlePost(bool)+0x154>)
 800d4ac:	68a0      	ldr	r0, [r4, #8]
 800d4ae:	f10d 0207 	add.w	r2, sp, #7
 800d4b2:	f003 f8ab 	bl	801060c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d4b6:	b9e0      	cbnz	r0, 800d4f2 <HttpDaemon::HandlePost(bool)+0xce>
 800d4b8:	4b30      	ldr	r3, [pc, #192]	; (800d57c <HttpDaemon::HandlePost(bool)+0x158>)
 800d4ba:	6818      	ldr	r0, [r3, #0]
 800d4bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d4c0:	b11b      	cbz	r3, 800d4ca <HttpDaemon::HandlePost(bool)+0xa6>
 800d4c2:	2104      	movs	r1, #4
 800d4c4:	f003 fc34 	bl	8010d30 <LedBlink::SetMode(ledblink::Mode)>
 800d4c8:	e7e2      	b.n	800d490 <HttpDaemon::HandlePost(bool)+0x6c>
 800d4ca:	2102      	movs	r1, #2
 800d4cc:	e7fa      	b.n	800d4c4 <HttpDaemon::HandlePost(bool)+0xa0>
 800d4ce:	4b2c      	ldr	r3, [pc, #176]	; (800d580 <HttpDaemon::HandlePost(bool)+0x15c>)
 800d4d0:	2001      	movs	r0, #1
 800d4d2:	781d      	ldrb	r5, [r3, #0]
 800d4d4:	f7ff fdbe 	bl	800d054 <PropertiesConfig::EnableJSON(bool)>
 800d4d8:	4b2a      	ldr	r3, [pc, #168]	; (800d584 <HttpDaemon::HandlePost(bool)+0x160>)
 800d4da:	f8b4 25c4 	ldrh.w	r2, [r4, #1476]	; 0x5c4
 800d4de:	6818      	ldr	r0, [r3, #0]
 800d4e0:	68a1      	ldr	r1, [r4, #8]
 800d4e2:	f005 0501 	and.w	r5, r5, #1
 800d4e6:	f7ff f9e9 	bl	800c8bc <RemoteConfig::HandleSet(void*, unsigned int)>
 800d4ea:	4628      	mov	r0, r5
 800d4ec:	f7ff fdb2 	bl	800d054 <PropertiesConfig::EnableJSON(bool)>
 800d4f0:	e7ce      	b.n	800d490 <HttpDaemon::HandlePost(bool)+0x6c>
 800d4f2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d4f6:	b002      	add	sp, #8
 800d4f8:	bd70      	pop	{r4, r5, r6, pc}
 800d4fa:	f8b4 35c6 	ldrh.w	r3, [r4, #1478]	; 0x5c6
 800d4fe:	6962      	ldr	r2, [r4, #20]
 800d500:	429a      	cmp	r2, r3
 800d502:	dbd0      	blt.n	800d4a6 <HttpDaemon::HandlePost(bool)+0x82>
 800d504:	f8b4 35c4 	ldrh.w	r3, [r4, #1476]	; 0x5c4
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d0cc      	beq.n	800d4a6 <HttpDaemon::HandlePost(bool)+0x82>
 800d50c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800d510:	2b00      	cmp	r3, #0
 800d512:	d0dc      	beq.n	800d4ce <HttpDaemon::HandlePost(bool)+0xaa>
 800d514:	2201      	movs	r2, #1
 800d516:	f8b4 15c4 	ldrh.w	r1, [r4, #1476]	; 0x5c4
 800d51a:	68a0      	ldr	r0, [r4, #8]
 800d51c:	f002 fde8 	bl	80100f0 <properties::convert_json_file(char*, unsigned short, bool)>
 800d520:	2800      	cmp	r0, #0
 800d522:	dde6      	ble.n	800d4f2 <HttpDaemon::HandlePost(bool)+0xce>
 800d524:	4918      	ldr	r1, [pc, #96]	; (800d588 <HttpDaemon::HandlePost(bool)+0x164>)
 800d526:	68a0      	ldr	r0, [r4, #8]
 800d528:	f10d 0207 	add.w	r2, sp, #7
 800d52c:	f003 f86e 	bl	801060c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d530:	2800      	cmp	r0, #0
 800d532:	d195      	bne.n	800d460 <HttpDaemon::HandlePost(bool)+0x3c>
 800d534:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d0a9      	beq.n	800d490 <HttpDaemon::HandlePost(bool)+0x6c>
 800d53c:	4b11      	ldr	r3, [pc, #68]	; (800d584 <HttpDaemon::HandlePost(bool)+0x160>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f893 35d6 	ldrb.w	r3, [r3, #1494]	; 0x5d6
 800d544:	2b00      	cmp	r3, #0
 800d546:	d0d4      	beq.n	800d4f2 <HttpDaemon::HandlePost(bool)+0xce>
 800d548:	4b10      	ldr	r3, [pc, #64]	; (800d58c <HttpDaemon::HandlePost(bool)+0x168>)
 800d54a:	6818      	ldr	r0, [r3, #0]
 800d54c:	f003 fc78 	bl	8010e40 <Hardware::Reboot()>
 800d550:	68c3      	ldr	r3, [r0, #12]
 800d552:	6083      	str	r3, [r0, #8]
 800d554:	6943      	ldr	r3, [r0, #20]
 800d556:	f8a0 35c4 	strh.w	r3, [r0, #1476]	; 0x5c4
 800d55a:	e7d7      	b.n	800d50c <HttpDaemon::HandlePost(bool)+0xe8>
 800d55c:	08013ae8 	stmdaeq	r1, {r3, r5, r6, r7, r9, fp, ip, sp}
 800d560:	08013a84 	stmdaeq	r1, {r2, r7, r9, fp, ip, sp}
 800d564:	08013ad6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r9, fp, ip, sp}
 800d568:	200096a4 	andcs	r9, r0, r4, lsr #13
 800d56c:	200097ac 	andcs	r9, r0, ip, lsr #15
 800d570:	08013cac 	stmdaeq	r1, {r2, r3, r5, r7, sl, fp, ip, sp}
 800d574:	08013b05 	stmdaeq	r1, {r0, r2, r8, r9, fp, ip, sp}
 800d578:	08013afc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r9, fp, ip, sp}
 800d57c:	20009790 	mulcs	r0, r0, r7
 800d580:	200096a2 	andcs	r9, r0, r2, lsr #13
 800d584:	2000075c 	andcs	r0, r0, ip, asr r7
 800d588:	08013af5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r9, fp, ip, sp}
 800d58c:	20009794 	mulcs	r0, r4, r7

0800d590 <HttpDaemon::Run()>:
 800d590:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d592:	4e4a      	ldr	r6, [pc, #296]	; (800d6bc <HttpDaemon::Run()+0x12c>)
 800d594:	4604      	mov	r4, r0
 800d596:	6901      	ldr	r1, [r0, #16]
 800d598:	f100 020c 	add.w	r2, r0, #12
 800d59c:	b085      	sub	sp, #20
 800d59e:	6830      	ldr	r0, [r6, #0]
 800d5a0:	f001 ffd9 	bl	800f556 <Network::TcpRead(int, unsigned char const**)>
 800d5a4:	6160      	str	r0, [r4, #20]
 800d5a6:	2800      	cmp	r0, #0
 800d5a8:	d061      	beq.n	800d66e <HttpDaemon::Run()+0xde>
 800d5aa:	69a3      	ldr	r3, [r4, #24]
 800d5ac:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800d5b0:	d15f      	bne.n	800d672 <HttpDaemon::Run()+0xe2>
 800d5b2:	4620      	mov	r0, r4
 800d5b4:	f7ff fe0e 	bl	800d1d4 <HttpDaemon::ParseRequest()>
 800d5b8:	28c8      	cmp	r0, #200	; 0xc8
 800d5ba:	61a0      	str	r0, [r4, #24]
 800d5bc:	d106      	bne.n	800d5cc <HttpDaemon::Run()+0x3c>
 800d5be:	69e3      	ldr	r3, [r4, #28]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d147      	bne.n	800d654 <HttpDaemon::Run()+0xc4>
 800d5c4:	4620      	mov	r0, r4
 800d5c6:	f7ff fe7f 	bl	800d2c8 <HttpDaemon::HandleGet()>
 800d5ca:	61a0      	str	r0, [r4, #24]
 800d5cc:	69a3      	ldr	r3, [r4, #24]
 800d5ce:	f104 0722 	add.w	r7, r4, #34	; 0x22
 800d5d2:	2bc8      	cmp	r3, #200	; 0xc8
 800d5d4:	d06f      	beq.n	800d6b6 <HttpDaemon::Run()+0x126>
 800d5d6:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 800d5da:	d062      	beq.n	800d6a2 <HttpDaemon::Run()+0x112>
 800d5dc:	dc52      	bgt.n	800d684 <HttpDaemon::Run()+0xf4>
 800d5de:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 800d5e2:	d060      	beq.n	800d6a6 <HttpDaemon::Run()+0x116>
 800d5e4:	f240 129d 	movw	r2, #413	; 0x19d
 800d5e8:	4293      	cmp	r3, r2
 800d5ea:	d05e      	beq.n	800d6aa <HttpDaemon::Run()+0x11a>
 800d5ec:	4d34      	ldr	r5, [pc, #208]	; (800d6c0 <HttpDaemon::Run()+0x130>)
 800d5ee:	4a35      	ldr	r2, [pc, #212]	; (800d6c4 <HttpDaemon::Run()+0x134>)
 800d5f0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800d5f4:	bf18      	it	ne
 800d5f6:	4615      	movne	r5, r2
 800d5f8:	4a33      	ldr	r2, [pc, #204]	; (800d6c8 <HttpDaemon::Run()+0x138>)
 800d5fa:	f240 519f 	movw	r1, #1439	; 0x59f
 800d5fe:	6022      	str	r2, [r4, #0]
 800d600:	4638      	mov	r0, r7
 800d602:	e9cd 5500 	strd	r5, r5, [sp]
 800d606:	4a31      	ldr	r2, [pc, #196]	; (800d6cc <HttpDaemon::Run()+0x13c>)
 800d608:	f7fb fe58 	bl	80092bc <snprintf>
 800d60c:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 800d610:	f8b4 35c2 	ldrh.w	r3, [r4, #1474]	; 0x5c2
 800d614:	f240 519f 	movw	r1, #1439	; 0x59f
 800d618:	9303      	str	r3, [sp, #12]
 800d61a:	6823      	ldr	r3, [r4, #0]
 800d61c:	4a2c      	ldr	r2, [pc, #176]	; (800d6d0 <HttpDaemon::Run()+0x140>)
 800d61e:	9302      	str	r3, [sp, #8]
 800d620:	4b2c      	ldr	r3, [pc, #176]	; (800d6d4 <HttpDaemon::Run()+0x144>)
 800d622:	68e0      	ldr	r0, [r4, #12]
 800d624:	e9cd 5300 	strd	r5, r3, [sp]
 800d628:	69a3      	ldr	r3, [r4, #24]
 800d62a:	f7fb fe47 	bl	80092bc <snprintf>
 800d62e:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800d632:	b283      	uxth	r3, r0
 800d634:	6830      	ldr	r0, [r6, #0]
 800d636:	f001 ff92 	bl	800f55e <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 800d63a:	463a      	mov	r2, r7
 800d63c:	f8b4 35c2 	ldrh.w	r3, [r4, #1474]	; 0x5c2
 800d640:	6921      	ldr	r1, [r4, #16]
 800d642:	6830      	ldr	r0, [r6, #0]
 800d644:	f001 ff8b 	bl	800f55e <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 800d648:	f44f 7202 	mov.w	r2, #520	; 0x208
 800d64c:	2302      	movs	r3, #2
 800d64e:	e9c4 2306 	strd	r2, r3, [r4, #24]
 800d652:	e00c      	b.n	800d66e <HttpDaemon::Run()+0xde>
 800d654:	2b01      	cmp	r3, #1
 800d656:	d1b9      	bne.n	800d5cc <HttpDaemon::Run()+0x3c>
 800d658:	2100      	movs	r1, #0
 800d65a:	4620      	mov	r0, r4
 800d65c:	f7ff fee2 	bl	800d424 <HttpDaemon::HandlePost(bool)>
 800d660:	28c8      	cmp	r0, #200	; 0xc8
 800d662:	61a0      	str	r0, [r4, #24]
 800d664:	d1b2      	bne.n	800d5cc <HttpDaemon::Run()+0x3c>
 800d666:	f8b4 35c4 	ldrh.w	r3, [r4, #1476]	; 0x5c4
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d1ae      	bne.n	800d5cc <HttpDaemon::Run()+0x3c>
 800d66e:	b005      	add	sp, #20
 800d670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d672:	2bc8      	cmp	r3, #200	; 0xc8
 800d674:	d1aa      	bne.n	800d5cc <HttpDaemon::Run()+0x3c>
 800d676:	69e1      	ldr	r1, [r4, #28]
 800d678:	2901      	cmp	r1, #1
 800d67a:	d1a7      	bne.n	800d5cc <HttpDaemon::Run()+0x3c>
 800d67c:	4620      	mov	r0, r4
 800d67e:	f7ff fed1 	bl	800d424 <HttpDaemon::HandlePost(bool)>
 800d682:	e7a2      	b.n	800d5ca <HttpDaemon::Run()+0x3a>
 800d684:	f240 12f5 	movw	r2, #501	; 0x1f5
 800d688:	4293      	cmp	r3, r2
 800d68a:	d010      	beq.n	800d6ae <HttpDaemon::Run()+0x11e>
 800d68c:	f240 12f9 	movw	r2, #505	; 0x1f9
 800d690:	4293      	cmp	r3, r2
 800d692:	d00e      	beq.n	800d6b2 <HttpDaemon::Run()+0x122>
 800d694:	4d10      	ldr	r5, [pc, #64]	; (800d6d8 <HttpDaemon::Run()+0x148>)
 800d696:	4a0b      	ldr	r2, [pc, #44]	; (800d6c4 <HttpDaemon::Run()+0x134>)
 800d698:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800d69c:	bf18      	it	ne
 800d69e:	4615      	movne	r5, r2
 800d6a0:	e7aa      	b.n	800d5f8 <HttpDaemon::Run()+0x68>
 800d6a2:	4d0e      	ldr	r5, [pc, #56]	; (800d6dc <HttpDaemon::Run()+0x14c>)
 800d6a4:	e7a8      	b.n	800d5f8 <HttpDaemon::Run()+0x68>
 800d6a6:	4d0e      	ldr	r5, [pc, #56]	; (800d6e0 <HttpDaemon::Run()+0x150>)
 800d6a8:	e7a6      	b.n	800d5f8 <HttpDaemon::Run()+0x68>
 800d6aa:	4d0e      	ldr	r5, [pc, #56]	; (800d6e4 <HttpDaemon::Run()+0x154>)
 800d6ac:	e7a4      	b.n	800d5f8 <HttpDaemon::Run()+0x68>
 800d6ae:	4d0e      	ldr	r5, [pc, #56]	; (800d6e8 <HttpDaemon::Run()+0x158>)
 800d6b0:	e7a2      	b.n	800d5f8 <HttpDaemon::Run()+0x68>
 800d6b2:	4d0e      	ldr	r5, [pc, #56]	; (800d6ec <HttpDaemon::Run()+0x15c>)
 800d6b4:	e7a0      	b.n	800d5f8 <HttpDaemon::Run()+0x68>
 800d6b6:	4d0e      	ldr	r5, [pc, #56]	; (800d6f0 <HttpDaemon::Run()+0x160>)
 800d6b8:	e7aa      	b.n	800d610 <HttpDaemon::Run()+0x80>
 800d6ba:	bf00      	nop
 800d6bc:	20009074 	andcs	r9, r0, r4, ror r0
 800d6c0:	08013b61 	stmdaeq	r1, {r0, r5, r6, r8, r9, fp, ip, sp}
 800d6c4:	08013be8 	stmdaeq	r1, {r3, r5, r6, r7, r8, r9, fp, ip, sp}
 800d6c8:	08013cac 	stmdaeq	r1, {r2, r3, r5, r7, sl, fp, ip, sp}
 800d6cc:	08013bf9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r8, r9, fp, ip, sp}
 800d6d0:	08013c54 	stmdaeq	r1, {r2, r4, r6, sl, fp, ip, sp}
 800d6d4:	080132a8 	stmdaeq	r1, {r3, r5, r7, r9, ip, sp}
 800d6d8:	08013ba5 	stmdaeq	r1, {r0, r2, r5, r7, r8, r9, fp, ip, sp}
 800d6dc:	08013b90 	stmdaeq	r1, {r4, r7, r8, r9, fp, ip, sp}
 800d6e0:	08013b6d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r8, r9, fp, ip, sp}
 800d6e4:	08013b77 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r8, r9, fp, ip, sp}
 800d6e8:	08013bbb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r8, r9, fp, ip, sp}
 800d6ec:	08013bd2 	stmdaeq	r1, {r1, r4, r6, r7, r8, r9, fp, ip, sp}
 800d6f0:	08013bf6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r8, r9, fp, ip, sp}

0800d6f4 <remoteconfig::json_get_list(char*, unsigned short)>:
 800d6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6f8:	4b14      	ldr	r3, [pc, #80]	; (800d74c <remoteconfig::json_get_list(char*, unsigned short)+0x58>)
 800d6fa:	f8df 8054 	ldr.w	r8, [pc, #84]	; 800d750 <remoteconfig::json_get_list(char*, unsigned short)+0x5c>
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	b088      	sub	sp, #32
 800d702:	4605      	mov	r5, r0
 800d704:	f8d8 0000 	ldr.w	r0, [r8]
 800d708:	691c      	ldr	r4, [r3, #16]
 800d70a:	460e      	mov	r6, r1
 800d70c:	f7fe ffc6 	bl	800c69c <RemoteConfig::GetStringNode() const>
 800d710:	4607      	mov	r7, r0
 800d712:	f8d8 0000 	ldr.w	r0, [r8]
 800d716:	f7fe ffcd 	bl	800c6b4 <RemoteConfig::GetStringOutput() const>
 800d71a:	4b0e      	ldr	r3, [pc, #56]	; (800d754 <remoteconfig::json_get_list(char*, unsigned short)+0x60>)
 800d71c:	4631      	mov	r1, r6
 800d71e:	7a1a      	ldrb	r2, [r3, #8]
 800d720:	3309      	adds	r3, #9
 800d722:	9303      	str	r3, [sp, #12]
 800d724:	0e23      	lsrs	r3, r4, #24
 800d726:	9302      	str	r3, [sp, #8]
 800d728:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800d72c:	9301      	str	r3, [sp, #4]
 800d72e:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800d732:	e9cd 0205 	strd	r0, r2, [sp, #20]
 800d736:	9300      	str	r3, [sp, #0]
 800d738:	4628      	mov	r0, r5
 800d73a:	4a07      	ldr	r2, [pc, #28]	; (800d758 <remoteconfig::json_get_list(char*, unsigned short)+0x64>)
 800d73c:	9704      	str	r7, [sp, #16]
 800d73e:	b2e3      	uxtb	r3, r4
 800d740:	f7fb fdbc 	bl	80092bc <snprintf>
 800d744:	b280      	uxth	r0, r0
 800d746:	b008      	add	sp, #32
 800d748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d74c:	20009074 	andcs	r9, r0, r4, ror r0
 800d750:	2000075c 	andcs	r0, r0, ip, asr r7
 800d754:	20000738 	andcs	r0, r0, r8, lsr r7
 800d758:	08013d86 	stmdaeq	r1, {r1, r2, r7, r8, sl, fp, ip, sp}

0800d75c <remoteconfig::json_get_version(char*, unsigned short)>:
 800d75c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d75e:	2208      	movs	r2, #8
 800d760:	4b09      	ldr	r3, [pc, #36]	; (800d788 <remoteconfig::json_get_version(char*, unsigned short)+0x2c>)
 800d762:	9204      	str	r2, [sp, #16]
 800d764:	f1a3 020b 	sub.w	r2, r3, #11
 800d768:	9203      	str	r2, [sp, #12]
 800d76a:	220b      	movs	r2, #11
 800d76c:	9202      	str	r2, [sp, #8]
 800d76e:	4a07      	ldr	r2, [pc, #28]	; (800d78c <remoteconfig::json_get_version(char*, unsigned short)+0x30>)
 800d770:	9305      	str	r3, [sp, #20]
 800d772:	3b0e      	subs	r3, #14
 800d774:	9201      	str	r2, [sp, #4]
 800d776:	9300      	str	r3, [sp, #0]
 800d778:	4a05      	ldr	r2, [pc, #20]	; (800d790 <remoteconfig::json_get_version(char*, unsigned short)+0x34>)
 800d77a:	2303      	movs	r3, #3
 800d77c:	f7fb fd9e 	bl	80092bc <snprintf>
 800d780:	b280      	uxth	r0, r0
 800d782:	b007      	add	sp, #28
 800d784:	f85d fb04 	ldr.w	pc, [sp], #4
 800d788:	20009742 	andcs	r9, r0, r2, asr #14
 800d78c:	080132a8 	stmdaeq	r1, {r3, r5, r7, r9, ip, sp}
 800d790:	08013de5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r8, sl, fp, ip, sp}

0800d794 <remoteconfig::json_get_uptime(char*, unsigned short)>:
 800d794:	b508      	push	{r3, lr}
 800d796:	4b05      	ldr	r3, [pc, #20]	; (800d7ac <remoteconfig::json_get_uptime(char*, unsigned short)+0x18>)
 800d798:	681a      	ldr	r2, [r3, #0]
 800d79a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d79e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7a2:	4a03      	ldr	r2, [pc, #12]	; (800d7b0 <remoteconfig::json_get_uptime(char*, unsigned short)+0x1c>)
 800d7a4:	f7fb fd8a 	bl	80092bc <snprintf>
 800d7a8:	b280      	uxth	r0, r0
 800d7aa:	bd08      	pop	{r3, pc}
 800d7ac:	200097ac 	andcs	r9, r0, ip, lsr #15
 800d7b0:	08013e2b 	stmdaeq	r1, {r0, r1, r3, r5, r9, sl, fp, ip, sp}

0800d7b4 <remoteconfig::json_get_display(char*, unsigned short)>:
 800d7b4:	b508      	push	{r3, lr}
 800d7b6:	4b05      	ldr	r3, [pc, #20]	; (800d7cc <remoteconfig::json_get_display(char*, unsigned short)+0x18>)
 800d7b8:	4a05      	ldr	r2, [pc, #20]	; (800d7d0 <remoteconfig::json_get_display(char*, unsigned short)+0x1c>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	7c1b      	ldrb	r3, [r3, #16]
 800d7be:	f083 0301 	eor.w	r3, r3, #1
 800d7c2:	f7fb fd7b 	bl	80092bc <snprintf>
 800d7c6:	b280      	uxth	r0, r0
 800d7c8:	bd08      	pop	{r3, pc}
 800d7ca:	bf00      	nop
 800d7cc:	200096a4 	andcs	r9, r0, r4, lsr #13
 800d7d0:	08013e3a 	stmdaeq	r1, {r1, r3, r4, r5, r9, sl, fp, ip, sp}

0800d7d4 <remoteconfig::json_get_directory(char*, unsigned short)>:
 800d7d4:	b508      	push	{r3, lr}
 800d7d6:	4a02      	ldr	r2, [pc, #8]	; (800d7e0 <remoteconfig::json_get_directory(char*, unsigned short)+0xc>)
 800d7d8:	f7fb fd70 	bl	80092bc <snprintf>
 800d7dc:	b280      	uxth	r0, r0
 800d7de:	bd08      	pop	{r3, pc}
 800d7e0:	08013e49 	stmdaeq	r1, {r0, r3, r6, r9, sl, fp, ip, sp}

0800d7e4 <get_file_content(char const*, char*)>:
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d7e8:	4a18      	ldr	r2, [pc, #96]	; (800d84c <get_file_content(char const*, char*)+0x68>)
 800d7ea:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800d7ee:	1e47      	subs	r7, r0, #1
 800d7f0:	1e6e      	subs	r6, r5, #1
 800d7f2:	f817 cf01 	ldrb.w	ip, [r7, #1]!
 800d7f6:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 800d7fa:	4564      	cmp	r4, ip
 800d7fc:	d00b      	beq.n	800d816 <get_file_content(char const*, char*)+0x32>
 800d7fe:	3301      	adds	r3, #1
 800d800:	2b03      	cmp	r3, #3
 800d802:	d1f2      	bne.n	800d7ea <get_file_content(char const*, char*)+0x6>
 800d804:	2333      	movs	r3, #51	; 0x33
 800d806:	4a12      	ldr	r2, [pc, #72]	; (800d850 <get_file_content(char const*, char*)+0x6c>)
 800d808:	4912      	ldr	r1, [pc, #72]	; (800d854 <get_file_content(char const*, char*)+0x70>)
 800d80a:	4813      	ldr	r0, [pc, #76]	; (800d858 <get_file_content(char const*, char*)+0x74>)
 800d80c:	f7fb fd46 	bl	800929c <printf>
 800d810:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d814:	e016      	b.n	800d844 <get_file_content(char const*, char*)+0x60>
 800d816:	2c00      	cmp	r4, #0
 800d818:	d1eb      	bne.n	800d7f2 <get_file_content(char const*, char*)+0xe>
 800d81a:	460c      	mov	r4, r1
 800d81c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d820:	6853      	ldr	r3, [r2, #4]
 800d822:	3b01      	subs	r3, #1
 800d824:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800d828:	f804 2b01 	strb.w	r2, [r4], #1
 800d82c:	2a00      	cmp	r2, #0
 800d82e:	d1f9      	bne.n	800d824 <get_file_content(char const*, char*)+0x40>
 800d830:	1a64      	subs	r4, r4, r1
 800d832:	3c01      	subs	r4, #1
 800d834:	232e      	movs	r3, #46	; 0x2e
 800d836:	e9cd 5400 	strd	r5, r4, [sp]
 800d83a:	4a06      	ldr	r2, [pc, #24]	; (800d854 <get_file_content(char const*, char*)+0x70>)
 800d83c:	4904      	ldr	r1, [pc, #16]	; (800d850 <get_file_content(char const*, char*)+0x6c>)
 800d83e:	4807      	ldr	r0, [pc, #28]	; (800d85c <get_file_content(char const*, char*)+0x78>)
 800d840:	f7fb fd2c 	bl	800929c <printf>
 800d844:	4620      	mov	r0, r4
 800d846:	b003      	add	sp, #12
 800d848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d84a:	bf00      	nop
 800d84c:	080141c8 	stmdaeq	r1, {r3, r6, r7, r8, lr}
 800d850:	08013ee2 	stmdaeq	r1, {r1, r5, r6, r7, r9, sl, fp, ip, sp}
 800d854:	08013ec3 	stmdaeq	r1, {r0, r1, r6, r7, r9, sl, fp, ip, sp}
 800d858:	08013f0f 	stmdaeq	r1, {r0, r1, r2, r3, r8, r9, sl, fp, ip, sp}
 800d85c:	08013ef3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r9, sl, fp, ip, sp}

0800d860 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>:
 800d860:	2300      	movs	r3, #0
 800d862:	2020      	movs	r0, #32
 800d864:	b510      	push	{r4, lr}
 800d866:	4a04      	ldr	r2, [pc, #16]	; (800d878 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x18>)
 800d868:	428b      	cmp	r3, r1
 800d86a:	d100      	bne.n	800d86e <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0xe>
 800d86c:	bd10      	pop	{r4, pc}
 800d86e:	f852 4b04 	ldr.w	r4, [r2], #4
 800d872:	3301      	adds	r3, #1
 800d874:	4420      	add	r0, r4
 800d876:	e7f7      	b.n	800d868 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x8>
 800d878:	0801470c 	stmdaeq	r1, {r2, r3, r8, r9, sl, lr}

0800d87c <SpiFlashStore::Init()>:
 800d87c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d880:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800d998 <SpiFlashStore::Init()+0x11c>
 800d884:	4607      	mov	r7, r0
 800d886:	b085      	sub	sp, #20
 800d888:	f8d8 0000 	ldr.w	r0, [r8]
 800d88c:	f000 fba0 	bl	800dfd0 <FlashRom::GetSectorSize() const>
 800d890:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800d894:	4605      	mov	r5, r0
 800d896:	d17d      	bne.n	800d994 <SpiFlashStore::Init()+0x118>
 800d898:	f8d8 0000 	ldr.w	r0, [r8]
 800d89c:	f000 fb90 	bl	800dfc0 <FlashRom::GetSize() const>
 800d8a0:	4b3e      	ldr	r3, [pc, #248]	; (800d99c <SpiFlashStore::Init()+0x120>)
 800d8a2:	f5a0 5180 	sub.w	r1, r0, #4096	; 0x1000
 800d8a6:	f3c1 060b 	ubfx	r6, r1, #0, #12
 800d8aa:	6019      	str	r1, [r3, #0]
 800d8ac:	2e00      	cmp	r6, #0
 800d8ae:	d171      	bne.n	800d994 <SpiFlashStore::Init()+0x118>
 800d8b0:	4c3b      	ldr	r4, [pc, #236]	; (800d9a0 <SpiFlashStore::Init()+0x124>)
 800d8b2:	ab03      	add	r3, sp, #12
 800d8b4:	9300      	str	r3, [sp, #0]
 800d8b6:	462a      	mov	r2, r5
 800d8b8:	4623      	mov	r3, r4
 800d8ba:	f8d8 0000 	ldr.w	r0, [r8]
 800d8be:	f000 fb8a 	bl	800dfd6 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>
 800d8c2:	7823      	ldrb	r3, [r4, #0]
 800d8c4:	2b41      	cmp	r3, #65	; 0x41
 800d8c6:	bf1c      	itt	ne
 800d8c8:	2341      	movne	r3, #65	; 0x41
 800d8ca:	7023      	strbne	r3, [r4, #0]
 800d8cc:	7863      	ldrb	r3, [r4, #1]
 800d8ce:	bf14      	ite	ne
 800d8d0:	4635      	movne	r5, r6
 800d8d2:	2501      	moveq	r5, #1
 800d8d4:	2b76      	cmp	r3, #118	; 0x76
 800d8d6:	bf1c      	itt	ne
 800d8d8:	2376      	movne	r3, #118	; 0x76
 800d8da:	7063      	strbne	r3, [r4, #1]
 800d8dc:	78a3      	ldrb	r3, [r4, #2]
 800d8de:	bf18      	it	ne
 800d8e0:	2500      	movne	r5, #0
 800d8e2:	2b56      	cmp	r3, #86	; 0x56
 800d8e4:	bf1c      	itt	ne
 800d8e6:	2356      	movne	r3, #86	; 0x56
 800d8e8:	70a3      	strbne	r3, [r4, #2]
 800d8ea:	78e3      	ldrb	r3, [r4, #3]
 800d8ec:	bf18      	it	ne
 800d8ee:	2500      	movne	r5, #0
 800d8f0:	2b10      	cmp	r3, #16
 800d8f2:	d022      	beq.n	800d93a <SpiFlashStore::Init()+0xbe>
 800d8f4:	2310      	movs	r3, #16
 800d8f6:	70e3      	strb	r3, [r4, #3]
 800d8f8:	2201      	movs	r2, #1
 800d8fa:	2500      	movs	r5, #0
 800d8fc:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800d900:	4b28      	ldr	r3, [pc, #160]	; (800d9a4 <SpiFlashStore::Init()+0x128>)
 800d902:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800d9a8 <SpiFlashStore::Init()+0x12c>
 800d906:	701a      	strb	r2, [r3, #0]
 800d908:	4631      	mov	r1, r6
 800d90a:	4638      	mov	r0, r7
 800d90c:	f7ff ffa8 	bl	800d860 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800d910:	1823      	adds	r3, r4, r0
 800d912:	5425      	strb	r5, [r4, r0]
 800d914:	705d      	strb	r5, [r3, #1]
 800d916:	709d      	strb	r5, [r3, #2]
 800d918:	70dd      	strb	r5, [r3, #3]
 800d91a:	f858 3b04 	ldr.w	r3, [r8], #4
 800d91e:	1d02      	adds	r2, r0, #4
 800d920:	4403      	add	r3, r0
 800d922:	429a      	cmp	r2, r3
 800d924:	d332      	bcc.n	800d98c <SpiFlashStore::Init()+0x110>
 800d926:	3601      	adds	r6, #1
 800d928:	2e1c      	cmp	r6, #28
 800d92a:	d1ed      	bne.n	800d908 <SpiFlashStore::Init()+0x8c>
 800d92c:	2501      	movs	r5, #1
 800d92e:	4b1f      	ldr	r3, [pc, #124]	; (800d9ac <SpiFlashStore::Init()+0x130>)
 800d930:	601d      	str	r5, [r3, #0]
 800d932:	4628      	mov	r0, r5
 800d934:	b005      	add	sp, #20
 800d936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d93a:	2d00      	cmp	r5, #0
 800d93c:	d0dc      	beq.n	800d8f8 <SpiFlashStore::Init()+0x7c>
 800d93e:	f04f 0900 	mov.w	r9, #0
 800d942:	46c8      	mov	r8, r9
 800d944:	4631      	mov	r1, r6
 800d946:	4638      	mov	r0, r7
 800d948:	f7ff ff8a 	bl	800d860 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800d94c:	5c23      	ldrb	r3, [r4, r0]
 800d94e:	2bff      	cmp	r3, #255	; 0xff
 800d950:	d112      	bne.n	800d978 <SpiFlashStore::Init()+0xfc>
 800d952:	1823      	adds	r3, r4, r0
 800d954:	785a      	ldrb	r2, [r3, #1]
 800d956:	2aff      	cmp	r2, #255	; 0xff
 800d958:	d10e      	bne.n	800d978 <SpiFlashStore::Init()+0xfc>
 800d95a:	789a      	ldrb	r2, [r3, #2]
 800d95c:	2aff      	cmp	r2, #255	; 0xff
 800d95e:	d10b      	bne.n	800d978 <SpiFlashStore::Init()+0xfc>
 800d960:	78da      	ldrb	r2, [r3, #3]
 800d962:	2aff      	cmp	r2, #255	; 0xff
 800d964:	d108      	bne.n	800d978 <SpiFlashStore::Init()+0xfc>
 800d966:	46a9      	mov	r9, r5
 800d968:	f804 8000 	strb.w	r8, [r4, r0]
 800d96c:	f883 8001 	strb.w	r8, [r3, #1]
 800d970:	f883 8002 	strb.w	r8, [r3, #2]
 800d974:	f883 8003 	strb.w	r8, [r3, #3]
 800d978:	3601      	adds	r6, #1
 800d97a:	2e1c      	cmp	r6, #28
 800d97c:	d1e2      	bne.n	800d944 <SpiFlashStore::Init()+0xc8>
 800d97e:	f1b9 0f00 	cmp.w	r9, #0
 800d982:	d0d6      	beq.n	800d932 <SpiFlashStore::Init()+0xb6>
 800d984:	2201      	movs	r2, #1
 800d986:	4b09      	ldr	r3, [pc, #36]	; (800d9ac <SpiFlashStore::Init()+0x130>)
 800d988:	601a      	str	r2, [r3, #0]
 800d98a:	e7d2      	b.n	800d932 <SpiFlashStore::Init()+0xb6>
 800d98c:	f804 9002 	strb.w	r9, [r4, r2]
 800d990:	3201      	adds	r2, #1
 800d992:	e7c6      	b.n	800d922 <SpiFlashStore::Init()+0xa6>
 800d994:	2500      	movs	r5, #0
 800d996:	e7cc      	b.n	800d932 <SpiFlashStore::Init()+0xb6>
 800d998:	2000178c 	andcs	r1, r0, ip, lsl #15
 800d99c:	20001764 	andcs	r1, r0, r4, ror #14
 800d9a0:	20000764 	andcs	r0, r0, r4, ror #14
 800d9a4:	20001778 	andcs	r1, r0, r8, ror r7
 800d9a8:	0801470c 	stmdaeq	r1, {r2, r3, r8, r9, sl, lr}
 800d9ac:	20001770 	andcs	r1, r0, r0, ror r7

0800d9b0 <SpiFlashStore::SpiFlashStore()>:
 800d9b0:	b538      	push	{r3, r4, r5, lr}
 800d9b2:	4b0d      	ldr	r3, [pc, #52]	; (800d9e8 <SpiFlashStore::SpiFlashStore()+0x38>)
 800d9b4:	4604      	mov	r4, r0
 800d9b6:	6018      	str	r0, [r3, #0]
 800d9b8:	4b0c      	ldr	r3, [pc, #48]	; (800d9ec <SpiFlashStore::SpiFlashStore()+0x3c>)
 800d9ba:	4d0d      	ldr	r5, [pc, #52]	; (800d9f0 <SpiFlashStore::SpiFlashStore()+0x40>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	781b      	ldrb	r3, [r3, #0]
 800d9c0:	b113      	cbz	r3, 800d9c8 <SpiFlashStore::SpiFlashStore()+0x18>
 800d9c2:	f7ff ff5b 	bl	800d87c <SpiFlashStore::Init()>
 800d9c6:	7028      	strb	r0, [r5, #0]
 800d9c8:	782b      	ldrb	r3, [r5, #0]
 800d9ca:	b153      	cbz	r3, 800d9e2 <SpiFlashStore::SpiFlashStore()+0x32>
 800d9cc:	2320      	movs	r3, #32
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	4908      	ldr	r1, [pc, #32]	; (800d9f4 <SpiFlashStore::SpiFlashStore()+0x44>)
 800d9d2:	f851 0b04 	ldr.w	r0, [r1], #4
 800d9d6:	3201      	adds	r2, #1
 800d9d8:	2a1c      	cmp	r2, #28
 800d9da:	4403      	add	r3, r0
 800d9dc:	d1f9      	bne.n	800d9d2 <SpiFlashStore::SpiFlashStore()+0x22>
 800d9de:	4a06      	ldr	r2, [pc, #24]	; (800d9f8 <SpiFlashStore::SpiFlashStore()+0x48>)
 800d9e0:	6013      	str	r3, [r2, #0]
 800d9e2:	4620      	mov	r0, r4
 800d9e4:	bd38      	pop	{r3, r4, r5, pc}
 800d9e6:	bf00      	nop
 800d9e8:	20001774 	andcs	r1, r0, r4, ror r7
 800d9ec:	2000178c 	andcs	r1, r0, ip, lsl #15
 800d9f0:	20001768 	andcs	r1, r0, r8, ror #14
 800d9f4:	0801470c 	stmdaeq	r1, {r2, r3, r8, r9, sl, lr}
 800d9f8:	2000176c 	andcs	r1, r0, ip, ror #14

0800d9fc <SpiFlashStore::ResetSetList(spiflashstore::Store)>:
 800d9fc:	b508      	push	{r3, lr}
 800d9fe:	f7ff ff2f 	bl	800d860 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800da02:	2300      	movs	r3, #0
 800da04:	4904      	ldr	r1, [pc, #16]	; (800da18 <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x1c>)
 800da06:	1842      	adds	r2, r0, r1
 800da08:	540b      	strb	r3, [r1, r0]
 800da0a:	7053      	strb	r3, [r2, #1]
 800da0c:	7093      	strb	r3, [r2, #2]
 800da0e:	70d3      	strb	r3, [r2, #3]
 800da10:	2201      	movs	r2, #1
 800da12:	4b02      	ldr	r3, [pc, #8]	; (800da1c <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x20>)
 800da14:	601a      	str	r2, [r3, #0]
 800da16:	bd08      	pop	{r3, pc}
 800da18:	20000764 	andcs	r0, r0, r4, ror #14
 800da1c:	20001770 	andcs	r1, r0, r0, ror r7

0800da20 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>:
 800da20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da24:	461c      	mov	r4, r3
 800da26:	4b19      	ldr	r3, [pc, #100]	; (800da8c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x6c>)
 800da28:	4615      	mov	r5, r2
 800da2a:	781f      	ldrb	r7, [r3, #0]
 800da2c:	9e07      	ldr	r6, [sp, #28]
 800da2e:	b307      	cbz	r7, 800da72 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800da30:	f7ff ff16 	bl	800d860 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800da34:	f04f 0c00 	mov.w	ip, #0
 800da38:	4a15      	ldr	r2, [pc, #84]	; (800da90 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x70>)
 800da3a:	1941      	adds	r1, r0, r5
 800da3c:	1e63      	subs	r3, r4, #1
 800da3e:	9c06      	ldr	r4, [sp, #24]
 800da40:	4411      	add	r1, r2
 800da42:	440c      	add	r4, r1
 800da44:	42a1      	cmp	r1, r4
 800da46:	d116      	bne.n	800da76 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x56>
 800da48:	f1bc 0f00 	cmp.w	ip, #0
 800da4c:	d011      	beq.n	800da72 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800da4e:	4b11      	ldr	r3, [pc, #68]	; (800da94 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x74>)
 800da50:	6819      	ldr	r1, [r3, #0]
 800da52:	b109      	cbz	r1, 800da58 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x38>
 800da54:	2906      	cmp	r1, #6
 800da56:	d101      	bne.n	800da5c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x3c>
 800da58:	2101      	movs	r1, #1
 800da5a:	6019      	str	r1, [r3, #0]
 800da5c:	4b0e      	ldr	r3, [pc, #56]	; (800da98 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x78>)
 800da5e:	6819      	ldr	r1, [r3, #0]
 800da60:	4b0e      	ldr	r3, [pc, #56]	; (800da9c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x7c>)
 800da62:	6019      	str	r1, [r3, #0]
 800da64:	b12d      	cbz	r5, 800da72 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800da66:	b126      	cbz	r6, 800da72 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800da68:	9b08      	ldr	r3, [sp, #32]
 800da6a:	4418      	add	r0, r3
 800da6c:	5813      	ldr	r3, [r2, r0]
 800da6e:	4333      	orrs	r3, r6
 800da70:	5013      	str	r3, [r2, r0]
 800da72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da76:	f891 8000 	ldrb.w	r8, [r1]
 800da7a:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800da7e:	3101      	adds	r1, #1
 800da80:	45f0      	cmp	r8, lr
 800da82:	bf1c      	itt	ne
 800da84:	f801 ec01 	strbne.w	lr, [r1, #-1]
 800da88:	46bc      	movne	ip, r7
 800da8a:	e7db      	b.n	800da44 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x24>
 800da8c:	20001768 	andcs	r1, r0, r8, ror #14
 800da90:	20000764 	andcs	r0, r0, r4, ror #14
 800da94:	20001770 	andcs	r1, r0, r0, ror r7
 800da98:	200097ac 	andcs	r9, r0, ip, lsr #15
 800da9c:	20000760 	andcs	r0, r0, r0, ror #14

0800daa0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>:
 800daa0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800daa4:	461d      	mov	r5, r3
 800daa6:	4b11      	ldr	r3, [pc, #68]	; (800daec <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x4c>)
 800daa8:	4607      	mov	r7, r0
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	4614      	mov	r4, r2
 800daae:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800dab2:	b1c3      	cbz	r3, 800dae6 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x46>
 800dab4:	f7ff fed4 	bl	800d860 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800dab8:	4a0d      	ldr	r2, [pc, #52]	; (800daf0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x50>)
 800daba:	eb00 0608 	add.w	r6, r0, r8
 800dabe:	5990      	ldr	r0, [r2, r6]
 800dac0:	18b3      	adds	r3, r6, r2
 800dac2:	b140      	cbz	r0, 800dad6 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x36>
 800dac4:	3c01      	subs	r4, #1
 800dac6:	441d      	add	r5, r3
 800dac8:	429d      	cmp	r5, r3
 800daca:	d00c      	beq.n	800dae6 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x46>
 800dacc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dad0:	f804 2f01 	strb.w	r2, [r4, #1]!
 800dad4:	e7f8      	b.n	800dac8 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x28>
 800dad6:	e9cd 0001 	strd	r0, r0, [sp, #4]
 800dada:	4623      	mov	r3, r4
 800dadc:	4642      	mov	r2, r8
 800dade:	4638      	mov	r0, r7
 800dae0:	9500      	str	r5, [sp, #0]
 800dae2:	f7ff ff9d 	bl	800da20 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800dae6:	b004      	add	sp, #16
 800dae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daec:	20001768 	andcs	r1, r0, r8, ror #14
 800daf0:	20000764 	andcs	r0, r0, r4, ror #14

0800daf4 <SpiFlashStore::Flash()>:
 800daf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800daf6:	4c25      	ldr	r4, [pc, #148]	; (800db8c <SpiFlashStore::Flash()+0x98>)
 800daf8:	6820      	ldr	r0, [r4, #0]
 800dafa:	2800      	cmp	r0, #0
 800dafc:	d043      	beq.n	800db86 <SpiFlashStore::Flash()+0x92>
 800dafe:	3801      	subs	r0, #1
 800db00:	2805      	cmp	r0, #5
 800db02:	d831      	bhi.n	800db68 <SpiFlashStore::Flash()+0x74>
 800db04:	e8df f000 	tbb	[pc, r0]
 800db08:	2e140b03 	vnmlscs.f64	d0, d4, d3
 800db0c:	4b203025 	blmi	8819ba8 <__exidx_end+0x804b68>
 800db10:	681a      	ldr	r2, [r3, #0]
 800db12:	4b20      	ldr	r3, [pc, #128]	; (800db94 <SpiFlashStore::Flash()+0xa0>)
 800db14:	601a      	str	r2, [r3, #0]
 800db16:	2302      	movs	r3, #2
 800db18:	6023      	str	r3, [r4, #0]
 800db1a:	2001      	movs	r0, #1
 800db1c:	e033      	b.n	800db86 <SpiFlashStore::Flash()+0x92>
 800db1e:	4b1c      	ldr	r3, [pc, #112]	; (800db90 <SpiFlashStore::Flash()+0x9c>)
 800db20:	4a1c      	ldr	r2, [pc, #112]	; (800db94 <SpiFlashStore::Flash()+0xa0>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	6812      	ldr	r2, [r2, #0]
 800db26:	1a9b      	subs	r3, r3, r2
 800db28:	2b63      	cmp	r3, #99	; 0x63
 800db2a:	d9f6      	bls.n	800db1a <SpiFlashStore::Flash()+0x26>
 800db2c:	2303      	movs	r3, #3
 800db2e:	e7f3      	b.n	800db18 <SpiFlashStore::Flash()+0x24>
 800db30:	4919      	ldr	r1, [pc, #100]	; (800db98 <SpiFlashStore::Flash()+0xa4>)
 800db32:	481a      	ldr	r0, [pc, #104]	; (800db9c <SpiFlashStore::Flash()+0xa8>)
 800db34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800db38:	6809      	ldr	r1, [r1, #0]
 800db3a:	6800      	ldr	r0, [r0, #0]
 800db3c:	ab03      	add	r3, sp, #12
 800db3e:	f000 fa59 	bl	800dff4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>
 800db42:	2800      	cmp	r0, #0
 800db44:	d0e9      	beq.n	800db1a <SpiFlashStore::Flash()+0x26>
 800db46:	4b12      	ldr	r3, [pc, #72]	; (800db90 <SpiFlashStore::Flash()+0x9c>)
 800db48:	681a      	ldr	r2, [r3, #0]
 800db4a:	4b12      	ldr	r3, [pc, #72]	; (800db94 <SpiFlashStore::Flash()+0xa0>)
 800db4c:	601a      	str	r2, [r3, #0]
 800db4e:	2305      	movs	r3, #5
 800db50:	e7e2      	b.n	800db18 <SpiFlashStore::Flash()+0x24>
 800db52:	4b0f      	ldr	r3, [pc, #60]	; (800db90 <SpiFlashStore::Flash()+0x9c>)
 800db54:	4a0f      	ldr	r2, [pc, #60]	; (800db94 <SpiFlashStore::Flash()+0xa0>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	6812      	ldr	r2, [r2, #0]
 800db5a:	1a9b      	subs	r3, r3, r2
 800db5c:	2b63      	cmp	r3, #99	; 0x63
 800db5e:	d9dc      	bls.n	800db1a <SpiFlashStore::Flash()+0x26>
 800db60:	2304      	movs	r3, #4
 800db62:	e7d9      	b.n	800db18 <SpiFlashStore::Flash()+0x24>
 800db64:	2306      	movs	r3, #6
 800db66:	e7d7      	b.n	800db18 <SpiFlashStore::Flash()+0x24>
 800db68:	ab03      	add	r3, sp, #12
 800db6a:	4a0d      	ldr	r2, [pc, #52]	; (800dba0 <SpiFlashStore::Flash()+0xac>)
 800db6c:	490a      	ldr	r1, [pc, #40]	; (800db98 <SpiFlashStore::Flash()+0xa4>)
 800db6e:	480b      	ldr	r0, [pc, #44]	; (800db9c <SpiFlashStore::Flash()+0xa8>)
 800db70:	9300      	str	r3, [sp, #0]
 800db72:	6812      	ldr	r2, [r2, #0]
 800db74:	4b0b      	ldr	r3, [pc, #44]	; (800dba4 <SpiFlashStore::Flash()+0xb0>)
 800db76:	6809      	ldr	r1, [r1, #0]
 800db78:	6800      	ldr	r0, [r0, #0]
 800db7a:	f000 fadb 	bl	800e134 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>
 800db7e:	2800      	cmp	r0, #0
 800db80:	d0cb      	beq.n	800db1a <SpiFlashStore::Flash()+0x26>
 800db82:	2000      	movs	r0, #0
 800db84:	6020      	str	r0, [r4, #0]
 800db86:	b004      	add	sp, #16
 800db88:	bd10      	pop	{r4, pc}
 800db8a:	bf00      	nop
 800db8c:	20001770 	andcs	r1, r0, r0, ror r7
 800db90:	200097ac 	andcs	r9, r0, ip, lsr #15
 800db94:	20000760 	andcs	r0, r0, r0, ror #14
 800db98:	20001764 	andcs	r1, r0, r4, ror #14
 800db9c:	2000178c 	andcs	r1, r0, ip, lsl #15
 800dba0:	2000176c 	andcs	r1, r0, ip, ror #14
 800dba4:	20000764 	andcs	r0, r0, r4, ror #14

0800dba8 <StoreNetwork::~StoreNetwork()>:
 800dba8:	4770      	bx	lr

0800dbaa <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 800dbaa:	3804      	subs	r0, #4
 800dbac:	4770      	bx	lr
	...

0800dbb0 <StoreNetwork::Update(TNetworkParams const*)>:
 800dbb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	460b      	mov	r3, r1
 800dbb6:	215e      	movs	r1, #94	; 0x5e
 800dbb8:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800dbbc:	4804      	ldr	r0, [pc, #16]	; (800dbd0 <StoreNetwork::Update(TNetworkParams const*)+0x20>)
 800dbbe:	9100      	str	r1, [sp, #0]
 800dbc0:	6800      	ldr	r0, [r0, #0]
 800dbc2:	4611      	mov	r1, r2
 800dbc4:	f7ff ff2c 	bl	800da20 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800dbc8:	b005      	add	sp, #20
 800dbca:	f85d fb04 	ldr.w	pc, [sp], #4
 800dbce:	bf00      	nop
 800dbd0:	20001774 	andcs	r1, r0, r4, ror r7

0800dbd4 <StoreNetwork::SaveDhcp(bool)>:
 800dbd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	f88d 1017 	strb.w	r1, [sp, #23]
 800dbdc:	2100      	movs	r1, #0
 800dbde:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800dbe2:	4805      	ldr	r0, [pc, #20]	; (800dbf8 <StoreNetwork::SaveDhcp(bool)+0x24>)
 800dbe4:	9300      	str	r3, [sp, #0]
 800dbe6:	2214      	movs	r2, #20
 800dbe8:	6800      	ldr	r0, [r0, #0]
 800dbea:	f10d 0317 	add.w	r3, sp, #23
 800dbee:	f7ff ff17 	bl	800da20 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800dbf2:	b007      	add	sp, #28
 800dbf4:	f85d fb04 	ldr.w	pc, [sp], #4
 800dbf8:	20001774 	andcs	r1, r0, r4, ror r7

0800dbfc <non-virtual thunk to StoreNetwork::SaveDhcp(bool)>:
 800dbfc:	f1a0 0004 	sub.w	r0, r0, #4
 800dc00:	e7e8      	b.n	800dbd4 <StoreNetwork::SaveDhcp(bool)>
 800dc02:	bf00      	nop

0800dc04 <StoreNetwork::SaveGatewayIp(unsigned int)>:
 800dc04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800dc06:	2308      	movs	r3, #8
 800dc08:	9105      	str	r1, [sp, #20]
 800dc0a:	2100      	movs	r1, #0
 800dc0c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800dc10:	2304      	movs	r3, #4
 800dc12:	4805      	ldr	r0, [pc, #20]	; (800dc28 <StoreNetwork::SaveGatewayIp(unsigned int)+0x24>)
 800dc14:	9300      	str	r3, [sp, #0]
 800dc16:	220c      	movs	r2, #12
 800dc18:	6800      	ldr	r0, [r0, #0]
 800dc1a:	ab05      	add	r3, sp, #20
 800dc1c:	f7ff ff00 	bl	800da20 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800dc20:	b007      	add	sp, #28
 800dc22:	f85d fb04 	ldr.w	pc, [sp], #4
 800dc26:	bf00      	nop
 800dc28:	20001774 	andcs	r1, r0, r4, ror r7

0800dc2c <non-virtual thunk to StoreNetwork::SaveGatewayIp(unsigned int)>:
 800dc2c:	f1a0 0004 	sub.w	r0, r0, #4
 800dc30:	e7e8      	b.n	800dc04 <StoreNetwork::SaveGatewayIp(unsigned int)>
 800dc32:	bf00      	nop

0800dc34 <StoreNetwork::SaveNetMask(unsigned int)>:
 800dc34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800dc36:	2304      	movs	r3, #4
 800dc38:	9105      	str	r1, [sp, #20]
 800dc3a:	2100      	movs	r1, #0
 800dc3c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800dc40:	4804      	ldr	r0, [pc, #16]	; (800dc54 <StoreNetwork::SaveNetMask(unsigned int)+0x20>)
 800dc42:	9300      	str	r3, [sp, #0]
 800dc44:	2208      	movs	r2, #8
 800dc46:	6800      	ldr	r0, [r0, #0]
 800dc48:	ab05      	add	r3, sp, #20
 800dc4a:	f7ff fee9 	bl	800da20 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800dc4e:	b007      	add	sp, #28
 800dc50:	f85d fb04 	ldr.w	pc, [sp], #4
 800dc54:	20001774 	andcs	r1, r0, r4, ror r7

0800dc58 <non-virtual thunk to StoreNetwork::SaveNetMask(unsigned int)>:
 800dc58:	f1a0 0004 	sub.w	r0, r0, #4
 800dc5c:	e7ea      	b.n	800dc34 <StoreNetwork::SaveNetMask(unsigned int)>
 800dc5e:	bf00      	nop

0800dc60 <StoreNetwork::SaveIp(unsigned int)>:
 800dc60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800dc62:	2302      	movs	r3, #2
 800dc64:	9105      	str	r1, [sp, #20]
 800dc66:	2100      	movs	r1, #0
 800dc68:	2204      	movs	r2, #4
 800dc6a:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800dc6e:	4804      	ldr	r0, [pc, #16]	; (800dc80 <StoreNetwork::SaveIp(unsigned int)+0x20>)
 800dc70:	9200      	str	r2, [sp, #0]
 800dc72:	6800      	ldr	r0, [r0, #0]
 800dc74:	ab05      	add	r3, sp, #20
 800dc76:	f7ff fed3 	bl	800da20 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800dc7a:	b007      	add	sp, #28
 800dc7c:	f85d fb04 	ldr.w	pc, [sp], #4
 800dc80:	20001774 	andcs	r1, r0, r4, ror r7

0800dc84 <non-virtual thunk to StoreNetwork::SaveIp(unsigned int)>:
 800dc84:	f1a0 0004 	sub.w	r0, r0, #4
 800dc88:	e7ea      	b.n	800dc60 <StoreNetwork::SaveIp(unsigned int)>
 800dc8a:	bf00      	nop

0800dc8c <StoreNetwork::SaveHostName(char const*, unsigned int)>:
 800dc8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc8e:	460b      	mov	r3, r1
 800dc90:	2020      	movs	r0, #32
 800dc92:	2100      	movs	r1, #0
 800dc94:	2a40      	cmp	r2, #64	; 0x40
 800dc96:	bf28      	it	cs
 800dc98:	2240      	movcs	r2, #64	; 0x40
 800dc9a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800dc9e:	4804      	ldr	r0, [pc, #16]	; (800dcb0 <StoreNetwork::SaveHostName(char const*, unsigned int)+0x24>)
 800dca0:	9200      	str	r2, [sp, #0]
 800dca2:	6800      	ldr	r0, [r0, #0]
 800dca4:	2215      	movs	r2, #21
 800dca6:	f7ff febb 	bl	800da20 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800dcaa:	b005      	add	sp, #20
 800dcac:	f85d fb04 	ldr.w	pc, [sp], #4
 800dcb0:	20001774 	andcs	r1, r0, r4, ror r7

0800dcb4 <non-virtual thunk to StoreNetwork::SaveHostName(char const*, unsigned int)>:
 800dcb4:	f1a0 0004 	sub.w	r0, r0, #4
 800dcb8:	e7e8      	b.n	800dc8c <StoreNetwork::SaveHostName(char const*, unsigned int)>
 800dcba:	bf00      	nop

0800dcbc <StoreNetwork::~StoreNetwork()>:
 800dcbc:	b510      	push	{r4, lr}
 800dcbe:	4604      	mov	r4, r0
 800dcc0:	f003 f8fc 	bl	8010ebc <operator delete(void*)>
 800dcc4:	4620      	mov	r0, r4
 800dcc6:	bd10      	pop	{r4, pc}

0800dcc8 <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 800dcc8:	f1a0 0004 	sub.w	r0, r0, #4
 800dccc:	e7f6      	b.n	800dcbc <StoreNetwork::~StoreNetwork()>
	...

0800dcd0 <StoreNetwork::Copy(TNetworkParams*)>:
 800dcd0:	b507      	push	{r0, r1, r2, lr}
 800dcd2:	460a      	mov	r2, r1
 800dcd4:	2100      	movs	r1, #0
 800dcd6:	4804      	ldr	r0, [pc, #16]	; (800dce8 <StoreNetwork::Copy(TNetworkParams*)+0x18>)
 800dcd8:	9100      	str	r1, [sp, #0]
 800dcda:	235e      	movs	r3, #94	; 0x5e
 800dcdc:	6800      	ldr	r0, [r0, #0]
 800dcde:	f7ff fedf 	bl	800daa0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800dce2:	b003      	add	sp, #12
 800dce4:	f85d fb04 	ldr.w	pc, [sp], #4
 800dce8:	20001774 	andcs	r1, r0, r4, ror r7

0800dcec <StoreNetwork::StoreNetwork()>:
 800dcec:	4a03      	ldr	r2, [pc, #12]	; (800dcfc <StoreNetwork::StoreNetwork()+0x10>)
 800dcee:	6002      	str	r2, [r0, #0]
 800dcf0:	322c      	adds	r2, #44	; 0x2c
 800dcf2:	6042      	str	r2, [r0, #4]
 800dcf4:	4a02      	ldr	r2, [pc, #8]	; (800dd00 <StoreNetwork::StoreNetwork()+0x14>)
 800dcf6:	6010      	str	r0, [r2, #0]
 800dcf8:	4770      	bx	lr
 800dcfa:	bf00      	nop
 800dcfc:	08014784 	stmdaeq	r1, {r2, r7, r8, r9, sl, lr}
 800dd00:	2000177c 	andcs	r1, r0, ip, ror r7

0800dd04 <StoreOscServer::~StoreOscServer()>:
 800dd04:	4770      	bx	lr
	...

0800dd08 <StoreOscServer::Copy(osc::server::Params*)>:
 800dd08:	2300      	movs	r3, #0
 800dd0a:	b507      	push	{r0, r1, r2, lr}
 800dd0c:	4805      	ldr	r0, [pc, #20]	; (800dd24 <StoreOscServer::Copy(osc::server::Params*)+0x1c>)
 800dd0e:	9300      	str	r3, [sp, #0]
 800dd10:	460a      	mov	r2, r1
 800dd12:	f44f 73c5 	mov.w	r3, #394	; 0x18a
 800dd16:	2108      	movs	r1, #8
 800dd18:	6800      	ldr	r0, [r0, #0]
 800dd1a:	f7ff fec1 	bl	800daa0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800dd1e:	b003      	add	sp, #12
 800dd20:	f85d fb04 	ldr.w	pc, [sp], #4
 800dd24:	20001774 	andcs	r1, r0, r4, ror r7

0800dd28 <StoreOscServer::Update(osc::server::Params const*)>:
 800dd28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	460b      	mov	r3, r1
 800dd2e:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800dd32:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800dd36:	4804      	ldr	r0, [pc, #16]	; (800dd48 <StoreOscServer::Update(osc::server::Params const*)+0x20>)
 800dd38:	9100      	str	r1, [sp, #0]
 800dd3a:	6800      	ldr	r0, [r0, #0]
 800dd3c:	2108      	movs	r1, #8
 800dd3e:	f7ff fe6f 	bl	800da20 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800dd42:	b005      	add	sp, #20
 800dd44:	f85d fb04 	ldr.w	pc, [sp], #4
 800dd48:	20001774 	andcs	r1, r0, r4, ror r7

0800dd4c <StoreOscServer::~StoreOscServer()>:
 800dd4c:	b510      	push	{r4, lr}
 800dd4e:	4604      	mov	r4, r0
 800dd50:	f003 f8b4 	bl	8010ebc <operator delete(void*)>
 800dd54:	4620      	mov	r0, r4
 800dd56:	bd10      	pop	{r4, pc}

0800dd58 <StoreOscServer::StoreOscServer()>:
 800dd58:	4a02      	ldr	r2, [pc, #8]	; (800dd64 <StoreOscServer::StoreOscServer()+0xc>)
 800dd5a:	6002      	str	r2, [r0, #0]
 800dd5c:	4a02      	ldr	r2, [pc, #8]	; (800dd68 <StoreOscServer::StoreOscServer()+0x10>)
 800dd5e:	6010      	str	r0, [r2, #0]
 800dd60:	4770      	bx	lr
 800dd62:	bf00      	nop
 800dd64:	080147d4 	stmdaeq	r1, {r2, r4, r6, r7, r8, r9, sl, lr}
 800dd68:	20001780 	andcs	r1, r0, r0, lsl #15

0800dd6c <StoreRemoteConfig::~StoreRemoteConfig()>:
 800dd6c:	4770      	bx	lr
	...

0800dd70 <StoreRemoteConfig::Copy(TRemoteConfigParams*)>:
 800dd70:	2300      	movs	r3, #0
 800dd72:	b507      	push	{r0, r1, r2, lr}
 800dd74:	4805      	ldr	r0, [pc, #20]	; (800dd8c <StoreRemoteConfig::Copy(TRemoteConfigParams*)+0x1c>)
 800dd76:	9300      	str	r3, [sp, #0]
 800dd78:	460a      	mov	r2, r1
 800dd7a:	2320      	movs	r3, #32
 800dd7c:	210c      	movs	r1, #12
 800dd7e:	6800      	ldr	r0, [r0, #0]
 800dd80:	f7ff fe8e 	bl	800daa0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800dd84:	b003      	add	sp, #12
 800dd86:	f85d fb04 	ldr.w	pc, [sp], #4
 800dd8a:	bf00      	nop
 800dd8c:	20001774 	andcs	r1, r0, r4, ror r7

0800dd90 <StoreRemoteConfig::Update(TRemoteConfigParams const*)>:
 800dd90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd92:	2200      	movs	r2, #0
 800dd94:	460b      	mov	r3, r1
 800dd96:	2120      	movs	r1, #32
 800dd98:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800dd9c:	4804      	ldr	r0, [pc, #16]	; (800ddb0 <StoreRemoteConfig::Update(TRemoteConfigParams const*)+0x20>)
 800dd9e:	9100      	str	r1, [sp, #0]
 800dda0:	6800      	ldr	r0, [r0, #0]
 800dda2:	210c      	movs	r1, #12
 800dda4:	f7ff fe3c 	bl	800da20 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800dda8:	b005      	add	sp, #20
 800ddaa:	f85d fb04 	ldr.w	pc, [sp], #4
 800ddae:	bf00      	nop
 800ddb0:	20001774 	andcs	r1, r0, r4, ror r7

0800ddb4 <StoreRemoteConfig::~StoreRemoteConfig()>:
 800ddb4:	b510      	push	{r4, lr}
 800ddb6:	4604      	mov	r4, r0
 800ddb8:	f003 f880 	bl	8010ebc <operator delete(void*)>
 800ddbc:	4620      	mov	r0, r4
 800ddbe:	bd10      	pop	{r4, pc}

0800ddc0 <StoreRemoteConfig::StoreRemoteConfig()>:
 800ddc0:	4a02      	ldr	r2, [pc, #8]	; (800ddcc <StoreRemoteConfig::StoreRemoteConfig()+0xc>)
 800ddc2:	6002      	str	r2, [r0, #0]
 800ddc4:	4a02      	ldr	r2, [pc, #8]	; (800ddd0 <StoreRemoteConfig::StoreRemoteConfig()+0x10>)
 800ddc6:	6010      	str	r0, [r2, #0]
 800ddc8:	4770      	bx	lr
 800ddca:	bf00      	nop
 800ddcc:	080147ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, r9, sl, lr}
 800ddd0:	20001784 	andcs	r1, r0, r4, lsl #15

0800ddd4 <StoreWS28xxDmx::~StoreWS28xxDmx()>:
 800ddd4:	4770      	bx	lr

0800ddd6 <non-virtual thunk to StoreWS28xxDmx::~StoreWS28xxDmx()>:
 800ddd6:	3804      	subs	r0, #4
 800ddd8:	4770      	bx	lr
	...

0800dddc <StoreWS28xxDmx::Update(TWS28xxDmxParams const*)>:
 800dddc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ddde:	2200      	movs	r2, #0
 800dde0:	460b      	mov	r3, r1
 800dde2:	2127      	movs	r1, #39	; 0x27
 800dde4:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800dde8:	4804      	ldr	r0, [pc, #16]	; (800ddfc <StoreWS28xxDmx::Update(TWS28xxDmxParams const*)+0x20>)
 800ddea:	9100      	str	r1, [sp, #0]
 800ddec:	6800      	ldr	r0, [r0, #0]
 800ddee:	2103      	movs	r1, #3
 800ddf0:	f7ff fe16 	bl	800da20 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ddf4:	b005      	add	sp, #20
 800ddf6:	f85d fb04 	ldr.w	pc, [sp], #4
 800ddfa:	bf00      	nop
 800ddfc:	20001774 	andcs	r1, r0, r4, ror r7

0800de00 <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>:
 800de00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800de02:	2304      	movs	r3, #4
 800de04:	2200      	movs	r2, #0
 800de06:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800de0a:	2302      	movs	r3, #2
 800de0c:	4806      	ldr	r0, [pc, #24]	; (800de28 <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)+0x28>)
 800de0e:	9300      	str	r3, [sp, #0]
 800de10:	f8ad 1016 	strh.w	r1, [sp, #22]
 800de14:	2207      	movs	r2, #7
 800de16:	2103      	movs	r1, #3
 800de18:	6800      	ldr	r0, [r0, #0]
 800de1a:	f10d 0316 	add.w	r3, sp, #22
 800de1e:	f7ff fdff 	bl	800da20 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800de22:	b007      	add	sp, #28
 800de24:	f85d fb04 	ldr.w	pc, [sp], #4
 800de28:	20001774 	andcs	r1, r0, r4, ror r7

0800de2c <non-virtual thunk to StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>:
 800de2c:	f1a0 0004 	sub.w	r0, r0, #4
 800de30:	e7e6      	b.n	800de00 <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>
 800de32:	bf00      	nop

0800de34 <StoreWS28xxDmx::SaveTestPattern(unsigned char)>:
 800de34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800de36:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800de3a:	2200      	movs	r2, #0
 800de3c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800de40:	2301      	movs	r3, #1
 800de42:	4807      	ldr	r0, [pc, #28]	; (800de60 <StoreWS28xxDmx::SaveTestPattern(unsigned char)+0x2c>)
 800de44:	9300      	str	r3, [sp, #0]
 800de46:	f88d 1017 	strb.w	r1, [sp, #23]
 800de4a:	2226      	movs	r2, #38	; 0x26
 800de4c:	2103      	movs	r1, #3
 800de4e:	6800      	ldr	r0, [r0, #0]
 800de50:	f10d 0317 	add.w	r3, sp, #23
 800de54:	f7ff fde4 	bl	800da20 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800de58:	b007      	add	sp, #28
 800de5a:	f85d fb04 	ldr.w	pc, [sp], #4
 800de5e:	bf00      	nop
 800de60:	20001774 	andcs	r1, r0, r4, ror r7

0800de64 <non-virtual thunk to StoreWS28xxDmx::SaveTestPattern(unsigned char)>:
 800de64:	f1a0 0004 	sub.w	r0, r0, #4
 800de68:	e7e4      	b.n	800de34 <StoreWS28xxDmx::SaveTestPattern(unsigned char)>
 800de6a:	bf00      	nop

0800de6c <StoreWS28xxDmx::SaveMap(unsigned char)>:
 800de6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800de6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800de72:	2200      	movs	r2, #0
 800de74:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800de78:	2301      	movs	r3, #1
 800de7a:	4807      	ldr	r0, [pc, #28]	; (800de98 <StoreWS28xxDmx::SaveMap(unsigned char)+0x2c>)
 800de7c:	9300      	str	r3, [sp, #0]
 800de7e:	f88d 1017 	strb.w	r1, [sp, #23]
 800de82:	2213      	movs	r2, #19
 800de84:	2103      	movs	r1, #3
 800de86:	6800      	ldr	r0, [r0, #0]
 800de88:	f10d 0317 	add.w	r3, sp, #23
 800de8c:	f7ff fdc8 	bl	800da20 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800de90:	b007      	add	sp, #28
 800de92:	f85d fb04 	ldr.w	pc, [sp], #4
 800de96:	bf00      	nop
 800de98:	20001774 	andcs	r1, r0, r4, ror r7

0800de9c <non-virtual thunk to StoreWS28xxDmx::SaveMap(unsigned char)>:
 800de9c:	f1a0 0004 	sub.w	r0, r0, #4
 800dea0:	e7e4      	b.n	800de6c <StoreWS28xxDmx::SaveMap(unsigned char)>
 800dea2:	bf00      	nop

0800dea4 <StoreWS28xxDmx::SaveGroupingCount(unsigned short)>:
 800dea4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800dea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800deaa:	2200      	movs	r2, #0
 800deac:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800deb0:	2302      	movs	r3, #2
 800deb2:	4807      	ldr	r0, [pc, #28]	; (800ded0 <StoreWS28xxDmx::SaveGroupingCount(unsigned short)+0x2c>)
 800deb4:	9300      	str	r3, [sp, #0]
 800deb6:	f8ad 1016 	strh.w	r1, [sp, #22]
 800deba:	2211      	movs	r2, #17
 800debc:	2103      	movs	r1, #3
 800debe:	6800      	ldr	r0, [r0, #0]
 800dec0:	f10d 0316 	add.w	r3, sp, #22
 800dec4:	f7ff fdac 	bl	800da20 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800dec8:	b007      	add	sp, #28
 800deca:	f85d fb04 	ldr.w	pc, [sp], #4
 800dece:	bf00      	nop
 800ded0:	20001774 	andcs	r1, r0, r4, ror r7

0800ded4 <non-virtual thunk to StoreWS28xxDmx::SaveGroupingCount(unsigned short)>:
 800ded4:	f1a0 0004 	sub.w	r0, r0, #4
 800ded8:	e7e4      	b.n	800dea4 <StoreWS28xxDmx::SaveGroupingCount(unsigned short)>
 800deda:	bf00      	nop

0800dedc <StoreWS28xxDmx::SaveCount(unsigned short)>:
 800dedc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800dede:	2302      	movs	r3, #2
 800dee0:	2200      	movs	r2, #0
 800dee2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800dee6:	4807      	ldr	r0, [pc, #28]	; (800df04 <StoreWS28xxDmx::SaveCount(unsigned short)+0x28>)
 800dee8:	9300      	str	r3, [sp, #0]
 800deea:	f8ad 1016 	strh.w	r1, [sp, #22]
 800deee:	2205      	movs	r2, #5
 800def0:	2103      	movs	r1, #3
 800def2:	6800      	ldr	r0, [r0, #0]
 800def4:	f10d 0316 	add.w	r3, sp, #22
 800def8:	f7ff fd92 	bl	800da20 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800defc:	b007      	add	sp, #28
 800defe:	f85d fb04 	ldr.w	pc, [sp], #4
 800df02:	bf00      	nop
 800df04:	20001774 	andcs	r1, r0, r4, ror r7

0800df08 <non-virtual thunk to StoreWS28xxDmx::SaveCount(unsigned short)>:
 800df08:	f1a0 0004 	sub.w	r0, r0, #4
 800df0c:	e7e6      	b.n	800dedc <StoreWS28xxDmx::SaveCount(unsigned short)>
 800df0e:	bf00      	nop

0800df10 <StoreWS28xxDmx::SaveType(unsigned char)>:
 800df10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800df12:	2301      	movs	r3, #1
 800df14:	2200      	movs	r2, #0
 800df16:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800df1a:	4807      	ldr	r0, [pc, #28]	; (800df38 <StoreWS28xxDmx::SaveType(unsigned char)+0x28>)
 800df1c:	9300      	str	r3, [sp, #0]
 800df1e:	f88d 1017 	strb.w	r1, [sp, #23]
 800df22:	2204      	movs	r2, #4
 800df24:	2103      	movs	r1, #3
 800df26:	6800      	ldr	r0, [r0, #0]
 800df28:	f10d 0317 	add.w	r3, sp, #23
 800df2c:	f7ff fd78 	bl	800da20 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800df30:	b007      	add	sp, #28
 800df32:	f85d fb04 	ldr.w	pc, [sp], #4
 800df36:	bf00      	nop
 800df38:	20001774 	andcs	r1, r0, r4, ror r7

0800df3c <non-virtual thunk to StoreWS28xxDmx::SaveType(unsigned char)>:
 800df3c:	f1a0 0004 	sub.w	r0, r0, #4
 800df40:	e7e6      	b.n	800df10 <StoreWS28xxDmx::SaveType(unsigned char)>
 800df42:	bf00      	nop

0800df44 <StoreWS28xxDmx::~StoreWS28xxDmx()>:
 800df44:	b510      	push	{r4, lr}
 800df46:	4604      	mov	r4, r0
 800df48:	f002 ffb8 	bl	8010ebc <operator delete(void*)>
 800df4c:	4620      	mov	r0, r4
 800df4e:	bd10      	pop	{r4, pc}

0800df50 <non-virtual thunk to StoreWS28xxDmx::~StoreWS28xxDmx()>:
 800df50:	f1a0 0004 	sub.w	r0, r0, #4
 800df54:	e7f6      	b.n	800df44 <StoreWS28xxDmx::~StoreWS28xxDmx()>
	...

0800df58 <StoreWS28xxDmx::Copy(TWS28xxDmxParams*)>:
 800df58:	2300      	movs	r3, #0
 800df5a:	b507      	push	{r0, r1, r2, lr}
 800df5c:	4805      	ldr	r0, [pc, #20]	; (800df74 <StoreWS28xxDmx::Copy(TWS28xxDmxParams*)+0x1c>)
 800df5e:	9300      	str	r3, [sp, #0]
 800df60:	460a      	mov	r2, r1
 800df62:	2327      	movs	r3, #39	; 0x27
 800df64:	2103      	movs	r1, #3
 800df66:	6800      	ldr	r0, [r0, #0]
 800df68:	f7ff fd9a 	bl	800daa0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800df6c:	b003      	add	sp, #12
 800df6e:	f85d fb04 	ldr.w	pc, [sp], #4
 800df72:	bf00      	nop
 800df74:	20001774 	andcs	r1, r0, r4, ror r7

0800df78 <StoreWS28xxDmx::StoreWS28xxDmx()>:
 800df78:	4a03      	ldr	r2, [pc, #12]	; (800df88 <StoreWS28xxDmx::StoreWS28xxDmx()+0x10>)
 800df7a:	6002      	str	r2, [r0, #0]
 800df7c:	3230      	adds	r2, #48	; 0x30
 800df7e:	6042      	str	r2, [r0, #4]
 800df80:	4a02      	ldr	r2, [pc, #8]	; (800df8c <StoreWS28xxDmx::StoreWS28xxDmx()+0x14>)
 800df82:	6010      	str	r0, [r2, #0]
 800df84:	4770      	bx	lr
 800df86:	bf00      	nop
 800df88:	08014804 	stmdaeq	r1, {r2, fp, lr}
 800df8c:	20001788 	andcs	r1, r0, r8, lsl #15

0800df90 <FlashRom::FlashRom()>:
 800df90:	4b07      	ldr	r3, [pc, #28]	; (800dfb0 <FlashRom::FlashRom()+0x20>)
 800df92:	b510      	push	{r4, lr}
 800df94:	6018      	str	r0, [r3, #0]
 800df96:	2301      	movs	r3, #1
 800df98:	4604      	mov	r4, r0
 800df9a:	7003      	strb	r3, [r0, #0]
 800df9c:	4b05      	ldr	r3, [pc, #20]	; (800dfb4 <FlashRom::FlashRom()+0x24>)
 800df9e:	4906      	ldr	r1, [pc, #24]	; (800dfb8 <FlashRom::FlashRom()+0x28>)
 800dfa0:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800dfa4:	4805      	ldr	r0, [pc, #20]	; (800dfbc <FlashRom::FlashRom()+0x2c>)
 800dfa6:	029a      	lsls	r2, r3, #10
 800dfa8:	f7fb f978 	bl	800929c <printf>
 800dfac:	4620      	mov	r0, r4
 800dfae:	bd10      	pop	{r4, pc}
 800dfb0:	2000178c 	andcs	r1, r0, ip, lsl #15
 800dfb4:	1ffff700 	svcne	0x00fff700
 800dfb8:	080132a8 	stmdaeq	r1, {r3, r5, r7, r9, ip, sp}
 800dfbc:	08014854 	stmdaeq	r1, {r2, r4, r6, fp, lr}

0800dfc0 <FlashRom::GetSize() const>:
 800dfc0:	4b02      	ldr	r3, [pc, #8]	; (800dfcc <FlashRom::GetSize() const+0xc>)
 800dfc2:	f8b3 00e0 	ldrh.w	r0, [r3, #224]	; 0xe0
 800dfc6:	0280      	lsls	r0, r0, #10
 800dfc8:	4770      	bx	lr
 800dfca:	bf00      	nop
 800dfcc:	1ffff700 	svcne	0x00fff700

0800dfd0 <FlashRom::GetSectorSize() const>:
 800dfd0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800dfd4:	4770      	bx	lr

0800dfd6 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>:
 800dfd6:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800dfda:	441a      	add	r2, r3
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	d104      	bne.n	800dfea <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x14>
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	9b00      	ldr	r3, [sp, #0]
 800dfe4:	2001      	movs	r0, #1
 800dfe6:	601a      	str	r2, [r3, #0]
 800dfe8:	4770      	bx	lr
 800dfea:	f851 0b04 	ldr.w	r0, [r1], #4
 800dfee:	f843 0b04 	str.w	r0, [r3], #4
 800dff2:	e7f3      	b.n	800dfdc <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x6>

0800dff4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>:
 800dff4:	2000      	movs	r0, #0
 800dff6:	b538      	push	{r3, r4, r5, lr}
 800dff8:	4c47      	ldr	r4, [pc, #284]	; (800e118 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x124>)
 800dffa:	6018      	str	r0, [r3, #0]
 800dffc:	6823      	ldr	r3, [r4, #0]
 800dffe:	2b04      	cmp	r3, #4
 800e000:	f200 8082 	bhi.w	800e108 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 800e004:	e8df f003 	tbb	[pc, r3]
 800e008:	78452003 	stmdavc	r5, {r0, r1, sp}^
 800e00c:	4b430080 	blmi	90ce214 <__exidx_end+0x10b91d4>
 800e010:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800e014:	6019      	str	r1, [r3, #0]
 800e016:	4b42      	ldr	r3, [pc, #264]	; (800e120 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 800e018:	601a      	str	r2, [r3, #0]
 800e01a:	4b42      	ldr	r3, [pc, #264]	; (800e124 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x130>)
 800e01c:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800e020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e024:	4b40      	ldr	r3, [pc, #256]	; (800e128 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800e026:	d807      	bhi.n	800e038 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x44>
 800e028:	2201      	movs	r2, #1
 800e02a:	701a      	strb	r2, [r3, #0]
 800e02c:	f003 fa48 	bl	80114c0 <fmc_bank0_unlock>
 800e030:	2301      	movs	r3, #1
 800e032:	6023      	str	r3, [r4, #0]
 800e034:	2000      	movs	r0, #0
 800e036:	e026      	b.n	800e086 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 800e038:	4a3c      	ldr	r2, [pc, #240]	; (800e12c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x138>)
 800e03a:	4291      	cmp	r1, r2
 800e03c:	d3f4      	bcc.n	800e028 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x34>
 800e03e:	2200      	movs	r2, #0
 800e040:	701a      	strb	r2, [r3, #0]
 800e042:	f003 fa4b 	bl	80114dc <fmc_bank1_unlock>
 800e046:	e7f3      	b.n	800e030 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 800e048:	4d37      	ldr	r5, [pc, #220]	; (800e128 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800e04a:	782b      	ldrb	r3, [r5, #0]
 800e04c:	b15b      	cbz	r3, 800e066 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x72>
 800e04e:	f003 fa63 	bl	8011518 <fmc_bank0_state_get>
 800e052:	2801      	cmp	r0, #1
 800e054:	d0ee      	beq.n	800e034 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x40>
 800e056:	7829      	ldrb	r1, [r5, #0]
 800e058:	4b35      	ldr	r3, [pc, #212]	; (800e130 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800e05a:	b939      	cbnz	r1, 800e06c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x78>
 800e05c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e05e:	f022 0202 	bic.w	r2, r2, #2
 800e062:	651a      	str	r2, [r3, #80]	; 0x50
 800e064:	e006      	b.n	800e074 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x80>
 800e066:	f003 fa69 	bl	801153c <fmc_bank1_state_get>
 800e06a:	e7f2      	b.n	800e052 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x5e>
 800e06c:	691a      	ldr	r2, [r3, #16]
 800e06e:	f022 0202 	bic.w	r2, r2, #2
 800e072:	611a      	str	r2, [r3, #16]
 800e074:	4b2a      	ldr	r3, [pc, #168]	; (800e120 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	b94b      	cbnz	r3, 800e08e <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x9a>
 800e07a:	b129      	cbz	r1, 800e088 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x94>
 800e07c:	f003 fa3c 	bl	80114f8 <fmc_bank0_lock>
 800e080:	2300      	movs	r3, #0
 800e082:	2001      	movs	r0, #1
 800e084:	6023      	str	r3, [r4, #0]
 800e086:	bd38      	pop	{r3, r4, r5, pc}
 800e088:	f003 fa3e 	bl	8011508 <fmc_bank1_lock>
 800e08c:	e7f8      	b.n	800e080 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x8c>
 800e08e:	2302      	movs	r3, #2
 800e090:	e7cf      	b.n	800e032 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3e>
 800e092:	4923      	ldr	r1, [pc, #140]	; (800e120 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 800e094:	680b      	ldr	r3, [r1, #0]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d0ca      	beq.n	800e030 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 800e09a:	4b23      	ldr	r3, [pc, #140]	; (800e128 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800e09c:	4a1f      	ldr	r2, [pc, #124]	; (800e11c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x128>)
 800e09e:	7818      	ldrb	r0, [r3, #0]
 800e0a0:	4b23      	ldr	r3, [pc, #140]	; (800e130 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800e0a2:	b190      	cbz	r0, 800e0ca <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd6>
 800e0a4:	6918      	ldr	r0, [r3, #16]
 800e0a6:	f040 0002 	orr.w	r0, r0, #2
 800e0aa:	6118      	str	r0, [r3, #16]
 800e0ac:	6810      	ldr	r0, [r2, #0]
 800e0ae:	6158      	str	r0, [r3, #20]
 800e0b0:	6918      	ldr	r0, [r3, #16]
 800e0b2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 800e0b6:	6118      	str	r0, [r3, #16]
 800e0b8:	680b      	ldr	r3, [r1, #0]
 800e0ba:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800e0be:	600b      	str	r3, [r1, #0]
 800e0c0:	6813      	ldr	r3, [r2, #0]
 800e0c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0c6:	6013      	str	r3, [r2, #0]
 800e0c8:	e7b2      	b.n	800e030 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 800e0ca:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e0cc:	f040 0002 	orr.w	r0, r0, #2
 800e0d0:	6518      	str	r0, [r3, #80]	; 0x50
 800e0d2:	6810      	ldr	r0, [r2, #0]
 800e0d4:	6558      	str	r0, [r3, #84]	; 0x54
 800e0d6:	69dd      	ldr	r5, [r3, #28]
 800e0d8:	07ad      	lsls	r5, r5, #30
 800e0da:	bf48      	it	mi
 800e0dc:	6158      	strmi	r0, [r3, #20]
 800e0de:	4814      	ldr	r0, [pc, #80]	; (800e130 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800e0e0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e0e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0e6:	6503      	str	r3, [r0, #80]	; 0x50
 800e0e8:	680b      	ldr	r3, [r1, #0]
 800e0ea:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800e0ee:	600b      	str	r3, [r1, #0]
 800e0f0:	6813      	ldr	r3, [r2, #0]
 800e0f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0f6:	e7e6      	b.n	800e0c6 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd2>
 800e0f8:	4b0b      	ldr	r3, [pc, #44]	; (800e128 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800e0fa:	781a      	ldrb	r2, [r3, #0]
 800e0fc:	4b0c      	ldr	r3, [pc, #48]	; (800e130 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800e0fe:	b132      	cbz	r2, 800e10e <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x11a>
 800e100:	691a      	ldr	r2, [r3, #16]
 800e102:	f022 0201 	bic.w	r2, r2, #1
 800e106:	611a      	str	r2, [r3, #16]
 800e108:	2000      	movs	r0, #0
 800e10a:	6020      	str	r0, [r4, #0]
 800e10c:	e7bb      	b.n	800e086 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 800e10e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e110:	f022 0201 	bic.w	r2, r2, #1
 800e114:	651a      	str	r2, [r3, #80]	; 0x50
 800e116:	e7f7      	b.n	800e108 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 800e118:	20001794 	mulcs	r0, r4, r7
 800e11c:	20001798 	mulcs	r0, r8, r7
 800e120:	200017a4 	andcs	r1, r0, r4, lsr #15
 800e124:	1ffff700 	svcne	0x00fff700
 800e128:	200017a0 	andcs	r1, r0, r0, lsr #15
 800e12c:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 800e130:	40022000 	andmi	r2, r2, r0

0800e134 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>:
 800e134:	b570      	push	{r4, r5, r6, lr}
 800e136:	2400      	movs	r4, #0
 800e138:	9804      	ldr	r0, [sp, #16]
 800e13a:	6004      	str	r4, [r0, #0]
 800e13c:	4c48      	ldr	r4, [pc, #288]	; (800e260 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x12c>)
 800e13e:	6820      	ldr	r0, [r4, #0]
 800e140:	2804      	cmp	r0, #4
 800e142:	d848      	bhi.n	800e1d6 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xa2>
 800e144:	e8df f000 	tbb	[pc, r0]
 800e148:	22847c03 	addcs	r7, r4, #768	; 0x300
 800e14c:	48450047 	stmdami	r5, {r0, r1, r2, r6}^
 800e150:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800e154:	6001      	str	r1, [r0, #0]
 800e156:	4844      	ldr	r0, [pc, #272]	; (800e268 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 800e158:	6003      	str	r3, [r0, #0]
 800e15a:	4b44      	ldr	r3, [pc, #272]	; (800e26c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 800e15c:	601a      	str	r2, [r3, #0]
 800e15e:	4b44      	ldr	r3, [pc, #272]	; (800e270 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x13c>)
 800e160:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800e164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e168:	4b42      	ldr	r3, [pc, #264]	; (800e274 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800e16a:	d807      	bhi.n	800e17c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x48>
 800e16c:	2201      	movs	r2, #1
 800e16e:	701a      	strb	r2, [r3, #0]
 800e170:	f003 f9a6 	bl	80114c0 <fmc_bank0_unlock>
 800e174:	2303      	movs	r3, #3
 800e176:	6023      	str	r3, [r4, #0]
 800e178:	2000      	movs	r0, #0
 800e17a:	e026      	b.n	800e1ca <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 800e17c:	4a3e      	ldr	r2, [pc, #248]	; (800e278 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x144>)
 800e17e:	4291      	cmp	r1, r2
 800e180:	d3f4      	bcc.n	800e16c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x38>
 800e182:	2200      	movs	r2, #0
 800e184:	701a      	strb	r2, [r3, #0]
 800e186:	f003 f9a9 	bl	80114dc <fmc_bank1_unlock>
 800e18a:	e7f3      	b.n	800e174 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800e18c:	4d39      	ldr	r5, [pc, #228]	; (800e274 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800e18e:	782b      	ldrb	r3, [r5, #0]
 800e190:	b15b      	cbz	r3, 800e1aa <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x76>
 800e192:	f003 f9c1 	bl	8011518 <fmc_bank0_state_get>
 800e196:	2801      	cmp	r0, #1
 800e198:	d0ee      	beq.n	800e178 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x44>
 800e19a:	7829      	ldrb	r1, [r5, #0]
 800e19c:	4b37      	ldr	r3, [pc, #220]	; (800e27c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800e19e:	b939      	cbnz	r1, 800e1b0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x7c>
 800e1a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e1a2:	f022 0201 	bic.w	r2, r2, #1
 800e1a6:	651a      	str	r2, [r3, #80]	; 0x50
 800e1a8:	e006      	b.n	800e1b8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x84>
 800e1aa:	f003 f9c7 	bl	801153c <fmc_bank1_state_get>
 800e1ae:	e7f2      	b.n	800e196 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x62>
 800e1b0:	691a      	ldr	r2, [r3, #16]
 800e1b2:	f022 0201 	bic.w	r2, r2, #1
 800e1b6:	611a      	str	r2, [r3, #16]
 800e1b8:	4b2c      	ldr	r3, [pc, #176]	; (800e26c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	b94b      	cbnz	r3, 800e1d2 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x9e>
 800e1be:	b129      	cbz	r1, 800e1cc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x98>
 800e1c0:	f003 f99a 	bl	80114f8 <fmc_bank0_lock>
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	2001      	movs	r0, #1
 800e1c8:	6023      	str	r3, [r4, #0]
 800e1ca:	bd70      	pop	{r4, r5, r6, pc}
 800e1cc:	f003 f99c 	bl	8011508 <fmc_bank1_lock>
 800e1d0:	e7f8      	b.n	800e1c4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x90>
 800e1d2:	2304      	movs	r3, #4
 800e1d4:	e7cf      	b.n	800e176 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x42>
 800e1d6:	4a25      	ldr	r2, [pc, #148]	; (800e26c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 800e1d8:	6813      	ldr	r3, [r2, #0]
 800e1da:	2b03      	cmp	r3, #3
 800e1dc:	d91a      	bls.n	800e214 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xe0>
 800e1de:	4b25      	ldr	r3, [pc, #148]	; (800e274 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800e1e0:	7819      	ldrb	r1, [r3, #0]
 800e1e2:	4b26      	ldr	r3, [pc, #152]	; (800e27c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800e1e4:	b189      	cbz	r1, 800e20a <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xd6>
 800e1e6:	6919      	ldr	r1, [r3, #16]
 800e1e8:	f041 0101 	orr.w	r1, r1, #1
 800e1ec:	6119      	str	r1, [r3, #16]
 800e1ee:	4d1e      	ldr	r5, [pc, #120]	; (800e268 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 800e1f0:	481c      	ldr	r0, [pc, #112]	; (800e264 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 800e1f2:	6829      	ldr	r1, [r5, #0]
 800e1f4:	6803      	ldr	r3, [r0, #0]
 800e1f6:	f851 6b04 	ldr.w	r6, [r1], #4
 800e1fa:	f843 6b04 	str.w	r6, [r3], #4
 800e1fe:	6003      	str	r3, [r0, #0]
 800e200:	6813      	ldr	r3, [r2, #0]
 800e202:	6029      	str	r1, [r5, #0]
 800e204:	3b04      	subs	r3, #4
 800e206:	6013      	str	r3, [r2, #0]
 800e208:	e7b4      	b.n	800e174 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800e20a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800e20c:	f041 0101 	orr.w	r1, r1, #1
 800e210:	6519      	str	r1, [r3, #80]	; 0x50
 800e212:	e7ec      	b.n	800e1ee <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xba>
 800e214:	2b00      	cmp	r3, #0
 800e216:	d0ad      	beq.n	800e174 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800e218:	4b16      	ldr	r3, [pc, #88]	; (800e274 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800e21a:	781a      	ldrb	r2, [r3, #0]
 800e21c:	4b17      	ldr	r3, [pc, #92]	; (800e27c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800e21e:	b152      	cbz	r2, 800e236 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x102>
 800e220:	691a      	ldr	r2, [r3, #16]
 800e222:	f042 0201 	orr.w	r2, r2, #1
 800e226:	611a      	str	r2, [r3, #16]
 800e228:	4a0f      	ldr	r2, [pc, #60]	; (800e268 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 800e22a:	4b0e      	ldr	r3, [pc, #56]	; (800e264 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 800e22c:	6812      	ldr	r2, [r2, #0]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	6812      	ldr	r2, [r2, #0]
 800e232:	601a      	str	r2, [r3, #0]
 800e234:	e79e      	b.n	800e174 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800e236:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e238:	f042 0201 	orr.w	r2, r2, #1
 800e23c:	651a      	str	r2, [r3, #80]	; 0x50
 800e23e:	e7f3      	b.n	800e228 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xf4>
 800e240:	4b0c      	ldr	r3, [pc, #48]	; (800e274 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800e242:	781a      	ldrb	r2, [r3, #0]
 800e244:	4b0d      	ldr	r3, [pc, #52]	; (800e27c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800e246:	b132      	cbz	r2, 800e256 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x122>
 800e248:	691a      	ldr	r2, [r3, #16]
 800e24a:	f022 0202 	bic.w	r2, r2, #2
 800e24e:	611a      	str	r2, [r3, #16]
 800e250:	2000      	movs	r0, #0
 800e252:	6020      	str	r0, [r4, #0]
 800e254:	e7b9      	b.n	800e1ca <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 800e256:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e258:	f022 0202 	bic.w	r2, r2, #2
 800e25c:	651a      	str	r2, [r3, #80]	; 0x50
 800e25e:	e7f7      	b.n	800e250 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x11c>
 800e260:	20001794 	mulcs	r0, r4, r7
 800e264:	20001790 	mulcs	r0, r0, r7
 800e268:	2000179c 	mulcs	r0, ip, r7
 800e26c:	200017a4 	andcs	r1, r0, r4, lsr #15
 800e270:	1ffff700 	svcne	0x00fff700
 800e274:	200017a0 	andcs	r1, r0, r0, lsr #15
 800e278:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 800e27c:	40022000 	andmi	r2, r2, r0

0800e280 <net_timers_run>:
 800e280:	4b05      	ldr	r3, [pc, #20]	; (800e298 <net_timers_run+0x18>)
 800e282:	4a06      	ldr	r2, [pc, #24]	; (800e29c <net_timers_run+0x1c>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	6811      	ldr	r1, [r2, #0]
 800e288:	4299      	cmp	r1, r3
 800e28a:	d803      	bhi.n	800e294 <net_timers_run+0x14>
 800e28c:	3364      	adds	r3, #100	; 0x64
 800e28e:	6013      	str	r3, [r2, #0]
 800e290:	f001 be78 	b.w	800ff84 <igmp_timer>
 800e294:	4770      	bx	lr
 800e296:	bf00      	nop
 800e298:	200097ac 	andcs	r9, r0, ip, lsr #15
 800e29c:	200017c0 	andcs	r1, r0, r0, asr #15

0800e2a0 <rfc3927>:
 800e2a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2a4:	4606      	mov	r6, r0
 800e2a6:	25ff      	movs	r5, #255	; 0xff
 800e2a8:	4b18      	ldr	r3, [pc, #96]	; (800e30c <rfc3927+0x6c>)
 800e2aa:	4f19      	ldr	r7, [pc, #100]	; (800e310 <rfc3927+0x70>)
 800e2ac:	791a      	ldrb	r2, [r3, #4]
 800e2ae:	78dc      	ldrb	r4, [r3, #3]
 800e2b0:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800e314 <rfc3927+0x74>
 800e2b4:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 800e2b8:	f8d7 9000 	ldr.w	r9, [r7]
 800e2bc:	f8df b058 	ldr.w	fp, [pc, #88]	; 800e318 <rfc3927+0x78>
 800e2c0:	f8df a058 	ldr.w	sl, [pc, #88]	; 800e31c <rfc3927+0x7c>
 800e2c4:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 800e2c8:	4659      	mov	r1, fp
 800e2ca:	4620      	mov	r0, r4
 800e2cc:	f001 fbba 	bl	800fa44 <arp_cache_lookup>
 800e2d0:	b190      	cbz	r0, 800e2f8 <rfc3927+0x58>
 800e2d2:	ba24      	rev	r4, r4
 800e2d4:	3401      	adds	r4, #1
 800e2d6:	3d01      	subs	r5, #1
 800e2d8:	ba24      	rev	r4, r4
 800e2da:	b2ad      	uxth	r5, r5
 800e2dc:	4554      	cmp	r4, sl
 800e2de:	bf08      	it	eq
 800e2e0:	4644      	moveq	r4, r8
 800e2e2:	b18d      	cbz	r5, 800e308 <rfc3927+0x68>
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	eba3 0309 	sub.w	r3, r3, r9
 800e2ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800e2ee:	d3eb      	bcc.n	800e2c8 <rfc3927+0x28>
 800e2f0:	2400      	movs	r4, #0
 800e2f2:	4623      	mov	r3, r4
 800e2f4:	4620      	mov	r0, r4
 800e2f6:	e002      	b.n	800e2fe <rfc3927+0x5e>
 800e2f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e2fc:	2001      	movs	r0, #1
 800e2fe:	e9c6 3401 	strd	r3, r4, [r6, #4]
 800e302:	6034      	str	r4, [r6, #0]
 800e304:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e308:	462c      	mov	r4, r5
 800e30a:	e7f2      	b.n	800e2f2 <rfc3927+0x52>
 800e30c:	200017c4 	andcs	r1, r0, r4, asr #15
 800e310:	200097ac 	andcs	r9, r0, ip, lsr #15
 800e314:	0100fea9 	smlatbeq	r0, r9, lr, pc	; <UNPREDICTABLE>
 800e318:	200017cc 	andcs	r1, r0, ip, asr #15
 800e31c:	fffefea9 			; <UNDEFINED> instruction: 0xfffefea9

0800e320 <_init_tcb>:
 800e320:	b510      	push	{r4, lr}
 800e322:	4603      	mov	r3, r0
 800e324:	2400      	movs	r4, #0
 800e326:	f100 0244 	add.w	r2, r0, #68	; 0x44
 800e32a:	4293      	cmp	r3, r2
 800e32c:	d10d      	bne.n	800e34a <_init_tcb+0x2a>
 800e32e:	4b08      	ldr	r3, [pc, #32]	; (800e350 <_init_tcb+0x30>)
 800e330:	f640 3268 	movw	r2, #2920	; 0xb68
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	8702      	strh	r2, [r0, #56]	; 0x38
 800e338:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e33c:	6283      	str	r3, [r0, #40]	; 0x28
 800e33e:	6243      	str	r3, [r0, #36]	; 0x24
 800e340:	2301      	movs	r3, #1
 800e342:	8001      	strh	r1, [r0, #0]
 800e344:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800e348:	bd10      	pop	{r4, pc}
 800e34a:	f803 4b01 	strb.w	r4, [r3], #1
 800e34e:	e7ec      	b.n	800e32a <_init_tcb+0xa>
 800e350:	200097ac 	andcs	r9, r0, ip, lsr #15

0800e354 <memcpy.isra.0>:
 800e354:	3801      	subs	r0, #1
 800e356:	440a      	add	r2, r1
 800e358:	4291      	cmp	r1, r2
 800e35a:	d100      	bne.n	800e35e <memcpy.isra.0+0xa>
 800e35c:	4770      	bx	lr
 800e35e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e362:	f800 3f01 	strb.w	r3, [r0, #1]!
 800e366:	e7f7      	b.n	800e358 <memcpy.isra.0+0x4>

0800e368 <_bswap32>:
 800e368:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e36a:	2204      	movs	r2, #4
 800e36c:	f100 052a 	add.w	r5, r0, #42	; 0x2a
 800e370:	4629      	mov	r1, r5
 800e372:	4604      	mov	r4, r0
 800e374:	eb0d 0002 	add.w	r0, sp, r2
 800e378:	f7ff ffec 	bl	800e354 <memcpy.isra.0>
 800e37c:	2204      	movs	r2, #4
 800e37e:	9b01      	ldr	r3, [sp, #4]
 800e380:	eb0d 0102 	add.w	r1, sp, r2
 800e384:	ba1b      	rev	r3, r3
 800e386:	4628      	mov	r0, r5
 800e388:	9301      	str	r3, [sp, #4]
 800e38a:	f7ff ffe3 	bl	800e354 <memcpy.isra.0>
 800e38e:	2204      	movs	r2, #4
 800e390:	3426      	adds	r4, #38	; 0x26
 800e392:	eb0d 0002 	add.w	r0, sp, r2
 800e396:	4621      	mov	r1, r4
 800e398:	f7ff ffdc 	bl	800e354 <memcpy.isra.0>
 800e39c:	2204      	movs	r2, #4
 800e39e:	9b01      	ldr	r3, [sp, #4]
 800e3a0:	4620      	mov	r0, r4
 800e3a2:	ba1b      	rev	r3, r3
 800e3a4:	eb0d 0102 	add.w	r1, sp, r2
 800e3a8:	9301      	str	r3, [sp, #4]
 800e3aa:	f7ff ffd3 	bl	800e354 <memcpy.isra.0>
 800e3ae:	b003      	add	sp, #12
 800e3b0:	bd30      	pop	{r4, r5, pc}
	...

0800e3b4 <_tcp_send_package>:
 800e3b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e3b8:	7a0b      	ldrb	r3, [r1, #8]
 800e3ba:	4605      	mov	r5, r0
 800e3bc:	f013 0f02 	tst.w	r3, #2
 800e3c0:	bf0c      	ite	eq
 800e3c2:	f04f 0805 	moveq.w	r8, #5
 800e3c6:	f04f 0806 	movne.w	r8, #6
 800e3ca:	f04f 0a00 	mov.w	sl, #0
 800e3ce:	4c47      	ldr	r4, [pc, #284]	; (800e4ec <_tcp_send_package+0x138>)
 800e3d0:	460f      	mov	r7, r1
 800e3d2:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 800e3d4:	f100 0108 	add.w	r1, r0, #8
 800e3d8:	2206      	movs	r2, #6
 800e3da:	4620      	mov	r0, r4
 800e3dc:	f7ff ffba 	bl	800e354 <memcpy.isra.0>
 800e3e0:	4a43      	ldr	r2, [pc, #268]	; (800e4f0 <_tcp_send_package+0x13c>)
 800e3e2:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 800e3e6:	8813      	ldrh	r3, [r2, #0]
 800e3e8:	b2b6      	uxth	r6, r6
 800e3ea:	1c59      	adds	r1, r3, #1
 800e3ec:	8263      	strh	r3, [r4, #18]
 800e3ee:	f105 0904 	add.w	r9, r5, #4
 800e3f2:	f106 0314 	add.w	r3, r6, #20
 800e3f6:	ba5b      	rev16	r3, r3
 800e3f8:	8011      	strh	r1, [r2, #0]
 800e3fa:	f104 001e 	add.w	r0, r4, #30
 800e3fe:	2204      	movs	r2, #4
 800e400:	4649      	mov	r1, r9
 800e402:	8223      	strh	r3, [r4, #16]
 800e404:	f7ff ffa6 	bl	800e354 <memcpy.isra.0>
 800e408:	2114      	movs	r1, #20
 800e40a:	f104 000e 	add.w	r0, r4, #14
 800e40e:	f8a4 a018 	strh.w	sl, [r4, #24]
 800e412:	f001 fe4a 	bl	80100aa <net_chksum>
 800e416:	882b      	ldrh	r3, [r5, #0]
 800e418:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800e41c:	8463      	strh	r3, [r4, #34]	; 0x22
 800e41e:	886b      	ldrh	r3, [r5, #2]
 800e420:	8320      	strh	r0, [r4, #24]
 800e422:	84a3      	strh	r3, [r4, #36]	; 0x24
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
 800e428:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f884 802e 	strb.w	r8, [r4, #46]	; 0x2e
 800e432:	f8c4 302a 	str.w	r3, [r4, #42]	; 0x2a
 800e436:	7a3b      	ldrb	r3, [r7, #8]
 800e438:	8622      	strh	r2, [r4, #48]	; 0x30
 800e43a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 800e43e:	079b      	lsls	r3, r3, #30
 800e440:	bf48      	it	mi
 800e442:	f240 4302 	movwmi	r3, #1026	; 0x402
 800e446:	8baa      	ldrh	r2, [r5, #28]
 800e448:	bf48      	it	mi
 800e44a:	86e3      	strhmi	r3, [r4, #54]	; 0x36
 800e44c:	86a2      	strh	r2, [r4, #52]	; 0x34
 800e44e:	bf42      	ittt	mi
 800e450:	f24b 4305 	movwmi	r3, #46085	; 0xb405
 800e454:	4622      	movmi	r2, r4
 800e456:	f822 3f38 	strhmi.w	r3, [r2, #56]!
 800e45a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e45c:	f8a4 a032 	strh.w	sl, [r4, #50]	; 0x32
 800e460:	bf58      	it	pl
 800e462:	f104 0236 	addpl.w	r2, r4, #54	; 0x36
 800e466:	2b00      	cmp	r3, #0
 800e468:	d13e      	bne.n	800e4e8 <_tcp_send_package+0x134>
 800e46a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800e46c:	481f      	ldr	r0, [pc, #124]	; (800e4ec <_tcp_send_package+0x138>)
 800e46e:	ba5b      	rev16	r3, r3
 800e470:	8463      	strh	r3, [r4, #34]	; 0x22
 800e472:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 800e474:	ba5b      	rev16	r3, r3
 800e476:	84a3      	strh	r3, [r4, #36]	; 0x24
 800e478:	f7ff ff76 	bl	800e368 <_bswap32>
 800e47c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800e47e:	a801      	add	r0, sp, #4
 800e480:	ba5b      	rev16	r3, r3
 800e482:	8623      	strh	r3, [r4, #48]	; 0x30
 800e484:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800e486:	220c      	movs	r2, #12
 800e488:	ba5b      	rev16	r3, r3
 800e48a:	491a      	ldr	r1, [pc, #104]	; (800e4f4 <_tcp_send_package+0x140>)
 800e48c:	86a3      	strh	r3, [r4, #52]	; 0x34
 800e48e:	f7ff ff61 	bl	800e354 <memcpy.isra.0>
 800e492:	2204      	movs	r2, #4
 800e494:	4918      	ldr	r1, [pc, #96]	; (800e4f8 <_tcp_send_package+0x144>)
 800e496:	4817      	ldr	r0, [pc, #92]	; (800e4f4 <_tcp_send_package+0x140>)
 800e498:	f7ff ff5c 	bl	800e354 <memcpy.isra.0>
 800e49c:	2204      	movs	r2, #4
 800e49e:	4649      	mov	r1, r9
 800e4a0:	4816      	ldr	r0, [pc, #88]	; (800e4fc <_tcp_send_package+0x148>)
 800e4a2:	f7ff ff57 	bl	800e354 <memcpy.isra.0>
 800e4a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800e4aa:	f106 010c 	add.w	r1, r6, #12
 800e4ae:	83e3      	strh	r3, [r4, #30]
 800e4b0:	4810      	ldr	r0, [pc, #64]	; (800e4f4 <_tcp_send_package+0x140>)
 800e4b2:	ba73      	rev16	r3, r6
 800e4b4:	8423      	strh	r3, [r4, #32]
 800e4b6:	f001 fdf8 	bl	80100aa <net_chksum>
 800e4ba:	a901      	add	r1, sp, #4
 800e4bc:	4605      	mov	r5, r0
 800e4be:	220c      	movs	r2, #12
 800e4c0:	480c      	ldr	r0, [pc, #48]	; (800e4f4 <_tcp_send_package+0x140>)
 800e4c2:	f7ff ff47 	bl	800e354 <memcpy.isra.0>
 800e4c6:	4809      	ldr	r0, [pc, #36]	; (800e4ec <_tcp_send_package+0x138>)
 800e4c8:	f106 0122 	add.w	r1, r6, #34	; 0x22
 800e4cc:	8665      	strh	r5, [r4, #50]	; 0x32
 800e4ce:	b004      	add	sp, #16
 800e4d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4d4:	f003 bc9c 	b.w	8011e10 <emac_eth_send>
 800e4d8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800e4da:	5cc9      	ldrb	r1, [r1, r3]
 800e4dc:	54d1      	strb	r1, [r2, r3]
 800e4de:	3301      	adds	r3, #1
 800e4e0:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 800e4e2:	4299      	cmp	r1, r3
 800e4e4:	d8f8      	bhi.n	800e4d8 <_tcp_send_package+0x124>
 800e4e6:	e7c0      	b.n	800e46a <_tcp_send_package+0xb6>
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	e7f9      	b.n	800e4e0 <_tcp_send_package+0x12c>
 800e4ec:	2000238c 	andcs	r2, r0, ip, lsl #7
 800e4f0:	200017d4 	ldrdcs	r1, [r0], -r4
 800e4f4:	200023a2 	andcs	r2, r0, r2, lsr #7
 800e4f8:	200017a8 	andcs	r1, r0, r8, lsr #15
 800e4fc:	200023a6 	andcs	r2, r0, r6, lsr #7

0800e500 <_send_reset>:
 800e500:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e502:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800e506:	4604      	mov	r4, r0
 800e508:	075a      	lsls	r2, r3, #29
 800e50a:	460e      	mov	r6, r1
 800e50c:	d421      	bmi.n	800e552 <_send_reset+0x52>
 800e50e:	2204      	movs	r2, #4
 800e510:	f013 0310 	ands.w	r3, r3, #16
 800e514:	f88d 200c 	strb.w	r2, [sp, #12]
 800e518:	d01d      	beq.n	800e556 <_send_reset+0x56>
 800e51a:	f100 012a 	add.w	r1, r0, #42	; 0x2a
 800e51e:	4668      	mov	r0, sp
 800e520:	f7ff ff18 	bl	800e354 <memcpy.isra.0>
 800e524:	9b00      	ldr	r3, [sp, #0]
 800e526:	9301      	str	r3, [sp, #4]
 800e528:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800e52c:	4668      	mov	r0, sp
 800e52e:	f3c3 0540 	ubfx	r5, r3, #1, #1
 800e532:	f104 0126 	add.w	r1, r4, #38	; 0x26
 800e536:	07db      	lsls	r3, r3, #31
 800e538:	f04f 0204 	mov.w	r2, #4
 800e53c:	bf48      	it	mi
 800e53e:	3501      	addmi	r5, #1
 800e540:	f7ff ff08 	bl	800e354 <memcpy.isra.0>
 800e544:	9b00      	ldr	r3, [sp, #0]
 800e546:	4630      	mov	r0, r6
 800e548:	441d      	add	r5, r3
 800e54a:	a901      	add	r1, sp, #4
 800e54c:	9502      	str	r5, [sp, #8]
 800e54e:	f7ff ff31 	bl	800e3b4 <_tcp_send_package>
 800e552:	b004      	add	sp, #16
 800e554:	bd70      	pop	{r4, r5, r6, pc}
 800e556:	9301      	str	r3, [sp, #4]
 800e558:	2314      	movs	r3, #20
 800e55a:	f88d 300c 	strb.w	r3, [sp, #12]
 800e55e:	e7e3      	b.n	800e528 <_send_reset+0x28>

0800e560 <tcp_begin>:
 800e560:	b508      	push	{r3, lr}
 800e562:	4b0a      	ldr	r3, [pc, #40]	; (800e58c <tcp_begin+0x2c>)
 800e564:	4601      	mov	r1, r0
 800e566:	881a      	ldrh	r2, [r3, #0]
 800e568:	4282      	cmp	r2, r0
 800e56a:	d102      	bne.n	800e572 <tcp_begin+0x12>
 800e56c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800e570:	b130      	cbz	r0, 800e580 <tcp_begin+0x20>
 800e572:	b12a      	cbz	r2, 800e580 <tcp_begin+0x20>
 800e574:	4806      	ldr	r0, [pc, #24]	; (800e590 <tcp_begin+0x30>)
 800e576:	f002 fb49 	bl	8010c0c <console_error>
 800e57a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e57e:	bd08      	pop	{r3, pc}
 800e580:	4802      	ldr	r0, [pc, #8]	; (800e58c <tcp_begin+0x2c>)
 800e582:	8019      	strh	r1, [r3, #0]
 800e584:	f7ff fecc 	bl	800e320 <_init_tcb>
 800e588:	2000      	movs	r0, #0
 800e58a:	e7f8      	b.n	800e57e <tcp_begin+0x1e>
 800e58c:	20002348 	andcs	r2, r0, r8, asr #6
 800e590:	08014882 	stmdaeq	r1, {r1, r7, fp, lr}

0800e594 <tcp_write>:
 800e594:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800e598:	429a      	cmp	r2, r3
 800e59a:	bf28      	it	cs
 800e59c:	461a      	movcs	r2, r3
 800e59e:	2344      	movs	r3, #68	; 0x44
 800e5a0:	b530      	push	{r4, r5, lr}
 800e5a2:	4c0d      	ldr	r4, [pc, #52]	; (800e5d8 <tcp_write+0x44>)
 800e5a4:	b085      	sub	sp, #20
 800e5a6:	fb03 4400 	mla	r4, r3, r0, r4
 800e5aa:	6963      	ldr	r3, [r4, #20]
 800e5ac:	62e1      	str	r1, [r4, #44]	; 0x2c
 800e5ae:	9301      	str	r3, [sp, #4]
 800e5b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e5b2:	4620      	mov	r0, r4
 800e5b4:	9302      	str	r3, [sp, #8]
 800e5b6:	2318      	movs	r3, #24
 800e5b8:	8622      	strh	r2, [r4, #48]	; 0x30
 800e5ba:	a901      	add	r1, sp, #4
 800e5bc:	4615      	mov	r5, r2
 800e5be:	f88d 300c 	strb.w	r3, [sp, #12]
 800e5c2:	f7ff fef7 	bl	800e3b4 <_tcp_send_package>
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e5ca:	8623      	strh	r3, [r4, #48]	; 0x30
 800e5cc:	6963      	ldr	r3, [r4, #20]
 800e5ce:	442b      	add	r3, r5
 800e5d0:	6163      	str	r3, [r4, #20]
 800e5d2:	b005      	add	sp, #20
 800e5d4:	bd30      	pop	{r4, r5, pc}
 800e5d6:	bf00      	nop
 800e5d8:	20002348 	andcs	r2, r0, r8, asr #6

0800e5dc <tcp_read>:
 800e5dc:	2344      	movs	r3, #68	; 0x44
 800e5de:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5e0:	4c1c      	ldr	r4, [pc, #112]	; (800e654 <tcp_read+0x78>)
 800e5e2:	b085      	sub	sp, #20
 800e5e4:	fb03 4400 	mla	r4, r3, r0, r4
 800e5e8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800e5ec:	2b07      	cmp	r3, #7
 800e5ee:	d112      	bne.n	800e616 <tcp_read+0x3a>
 800e5f0:	6963      	ldr	r3, [r4, #20]
 800e5f2:	4620      	mov	r0, r4
 800e5f4:	9301      	str	r3, [sp, #4]
 800e5f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e5f8:	a901      	add	r1, sp, #4
 800e5fa:	9302      	str	r3, [sp, #8]
 800e5fc:	2311      	movs	r3, #17
 800e5fe:	f88d 300c 	strb.w	r3, [sp, #12]
 800e602:	f7ff fed7 	bl	800e3b4 <_tcp_send_package>
 800e606:	2309      	movs	r3, #9
 800e608:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800e60c:	6963      	ldr	r3, [r4, #20]
 800e60e:	3301      	adds	r3, #1
 800e610:	6163      	str	r3, [r4, #20]
 800e612:	2000      	movs	r0, #0
 800e614:	e01b      	b.n	800e64e <tcp_read+0x72>
 800e616:	f44f 6337 	mov.w	r3, #2928	; 0xb70
 800e61a:	4358      	muls	r0, r3
 800e61c:	4a0e      	ldr	r2, [pc, #56]	; (800e658 <tcp_read+0x7c>)
 800e61e:	1817      	adds	r7, r2, r0
 800e620:	887b      	ldrh	r3, [r7, #2]
 800e622:	5a15      	ldrh	r5, [r2, r0]
 800e624:	429d      	cmp	r5, r3
 800e626:	d0f4      	beq.n	800e612 <tcp_read+0x36>
 800e628:	f240 55b6 	movw	r5, #1462	; 0x5b6
 800e62c:	435d      	muls	r5, r3
 800e62e:	1d06      	adds	r6, r0, #4
 800e630:	442e      	add	r6, r5
 800e632:	4416      	add	r6, r2
 800e634:	4405      	add	r5, r0
 800e636:	600e      	str	r6, [r1, #0]
 800e638:	442a      	add	r2, r5
 800e63a:	f8b2 05b8 	ldrh.w	r0, [r2, #1464]	; 0x5b8
 800e63e:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800e640:	3301      	adds	r3, #1
 800e642:	f202 52b4 	addw	r2, r2, #1460	; 0x5b4
 800e646:	f003 0301 	and.w	r3, r3, #1
 800e64a:	8722      	strh	r2, [r4, #56]	; 0x38
 800e64c:	807b      	strh	r3, [r7, #2]
 800e64e:	b005      	add	sp, #20
 800e650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e652:	bf00      	nop
 800e654:	20002348 	andcs	r2, r0, r8, asr #6
 800e658:	200017d8 	ldrdcs	r1, [r0], -r8

0800e65c <memcpy.isra.0>:
 800e65c:	3801      	subs	r0, #1
 800e65e:	440a      	add	r2, r1
 800e660:	4291      	cmp	r1, r2
 800e662:	d100      	bne.n	800e666 <memcpy.isra.0+0xa>
 800e664:	4770      	bx	lr
 800e666:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e66a:	f800 3f01 	strb.w	r3, [r0, #1]!
 800e66e:	e7f7      	b.n	800e660 <memcpy.isra.0+0x4>

0800e670 <net_memcpy>:
 800e670:	ea40 0301 	orr.w	r3, r0, r1
 800e674:	079b      	lsls	r3, r3, #30
 800e676:	b570      	push	{r4, r5, r6, lr}
 800e678:	d108      	bne.n	800e68c <net_memcpy+0x1c>
 800e67a:	f022 0303 	bic.w	r3, r2, #3
 800e67e:	1f04      	subs	r4, r0, #4
 800e680:	18cd      	adds	r5, r1, r3
 800e682:	42a9      	cmp	r1, r5
 800e684:	d108      	bne.n	800e698 <net_memcpy+0x28>
 800e686:	1ad2      	subs	r2, r2, r3
 800e688:	4403      	add	r3, r0
 800e68a:	e000      	b.n	800e68e <net_memcpy+0x1e>
 800e68c:	4603      	mov	r3, r0
 800e68e:	3b01      	subs	r3, #1
 800e690:	440a      	add	r2, r1
 800e692:	4291      	cmp	r1, r2
 800e694:	d105      	bne.n	800e6a2 <net_memcpy+0x32>
 800e696:	bd70      	pop	{r4, r5, r6, pc}
 800e698:	f851 6b04 	ldr.w	r6, [r1], #4
 800e69c:	f844 6f04 	str.w	r6, [r4, #4]!
 800e6a0:	e7ef      	b.n	800e682 <net_memcpy+0x12>
 800e6a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e6a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e6aa:	e7f2      	b.n	800e692 <net_memcpy+0x22>

0800e6ac <udp_set_ip>:
 800e6ac:	2204      	movs	r2, #4
 800e6ae:	b513      	push	{r0, r1, r4, lr}
 800e6b0:	4604      	mov	r4, r0
 800e6b2:	6803      	ldr	r3, [r0, #0]
 800e6b4:	eb0d 0102 	add.w	r1, sp, r2
 800e6b8:	4808      	ldr	r0, [pc, #32]	; (800e6dc <udp_set_ip+0x30>)
 800e6ba:	9301      	str	r3, [sp, #4]
 800e6bc:	f7ff ffce 	bl	800e65c <memcpy.isra.0>
 800e6c0:	6862      	ldr	r2, [r4, #4]
 800e6c2:	4b07      	ldr	r3, [pc, #28]	; (800e6e0 <udp_set_ip+0x34>)
 800e6c4:	43d1      	mvns	r1, r2
 800e6c6:	6019      	str	r1, [r3, #0]
 800e6c8:	6823      	ldr	r3, [r4, #0]
 800e6ca:	4013      	ands	r3, r2
 800e6cc:	4a05      	ldr	r2, [pc, #20]	; (800e6e4 <udp_set_ip+0x38>)
 800e6ce:	6013      	str	r3, [r2, #0]
 800e6d0:	68a2      	ldr	r2, [r4, #8]
 800e6d2:	4b05      	ldr	r3, [pc, #20]	; (800e6e8 <udp_set_ip+0x3c>)
 800e6d4:	601a      	str	r2, [r3, #0]
 800e6d6:	b002      	add	sp, #8
 800e6d8:	bd10      	pop	{r4, pc}
 800e6da:	bf00      	nop
 800e6dc:	20008662 	andcs	r8, r0, r2, ror #12
 800e6e0:	20002978 	andcs	r2, r0, r8, ror r9
 800e6e4:	20002980 	andcs	r2, r0, r0, lsl #19
 800e6e8:	2000297c 	andcs	r2, r0, ip, ror r9

0800e6ec <udp_bind>:
 800e6ec:	4a0a      	ldr	r2, [pc, #40]	; (800e718 <udp_bind+0x2c>)
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	b510      	push	{r4, lr}
 800e6f2:	2000      	movs	r0, #0
 800e6f4:	4614      	mov	r4, r2
 800e6f6:	f852 1b04 	ldr.w	r1, [r2], #4
 800e6fa:	4299      	cmp	r1, r3
 800e6fc:	d008      	beq.n	800e710 <udp_bind+0x24>
 800e6fe:	b141      	cbz	r1, 800e712 <udp_bind+0x26>
 800e700:	3001      	adds	r0, #1
 800e702:	2808      	cmp	r0, #8
 800e704:	d1f7      	bne.n	800e6f6 <udp_bind+0xa>
 800e706:	4805      	ldr	r0, [pc, #20]	; (800e71c <udp_bind+0x30>)
 800e708:	f002 fa80 	bl	8010c0c <console_error>
 800e70c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e710:	bd10      	pop	{r4, pc}
 800e712:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 800e716:	e7fb      	b.n	800e710 <udp_bind+0x24>
 800e718:	20002988 	andcs	r2, r0, r8, lsl #19
 800e71c:	080148a2 	stmdaeq	r1, {r1, r5, r7, fp, lr}

0800e720 <udp_unbind>:
 800e720:	4a0c      	ldr	r2, [pc, #48]	; (800e754 <udp_unbind+0x34>)
 800e722:	2300      	movs	r3, #0
 800e724:	4611      	mov	r1, r2
 800e726:	b510      	push	{r4, lr}
 800e728:	f852 4b04 	ldr.w	r4, [r2], #4
 800e72c:	4284      	cmp	r4, r0
 800e72e:	d108      	bne.n	800e742 <udp_unbind+0x22>
 800e730:	2000      	movs	r0, #0
 800e732:	f640 3294 	movw	r2, #2964	; 0xb94
 800e736:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800e73a:	4353      	muls	r3, r2
 800e73c:	4a06      	ldr	r2, [pc, #24]	; (800e758 <udp_unbind+0x38>)
 800e73e:	50d0      	str	r0, [r2, r3]
 800e740:	bd10      	pop	{r4, pc}
 800e742:	3301      	adds	r3, #1
 800e744:	2b08      	cmp	r3, #8
 800e746:	d1ef      	bne.n	800e728 <udp_unbind+0x8>
 800e748:	4804      	ldr	r0, [pc, #16]	; (800e75c <udp_unbind+0x3c>)
 800e74a:	f002 fa5f 	bl	8010c0c <console_error>
 800e74e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e752:	e7f5      	b.n	800e740 <udp_unbind+0x20>
 800e754:	20002988 	andcs	r2, r0, r8, lsl #19
 800e758:	200029a8 	andcs	r2, r0, r8, lsr #19
 800e75c:	080148a7 	stmdaeq	r1, {r0, r1, r2, r5, r7, fp, lr}

0800e760 <udp_recv>:
 800e760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e764:	4604      	mov	r4, r0
 800e766:	4698      	mov	r8, r3
 800e768:	f640 3394 	movw	r3, #2964	; 0xb94
 800e76c:	435c      	muls	r4, r3
 800e76e:	4608      	mov	r0, r1
 800e770:	4915      	ldr	r1, [pc, #84]	; (800e7c8 <udp_recv+0x68>)
 800e772:	190f      	adds	r7, r1, r4
 800e774:	f8b7 c002 	ldrh.w	ip, [r7, #2]
 800e778:	5b0b      	ldrh	r3, [r1, r4]
 800e77a:	4563      	cmp	r3, ip
 800e77c:	d021      	beq.n	800e7c2 <udp_recv+0x62>
 800e77e:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 800e782:	fb03 fc0c 	mul.w	ip, r3, ip
 800e786:	eb0c 0604 	add.w	r6, ip, r4
 800e78a:	440e      	add	r6, r1
 800e78c:	f8b6 55ca 	ldrh.w	r5, [r6, #1482]	; 0x5ca
 800e790:	3404      	adds	r4, #4
 800e792:	4295      	cmp	r5, r2
 800e794:	bf28      	it	cs
 800e796:	4615      	movcs	r5, r2
 800e798:	4464      	add	r4, ip
 800e79a:	462a      	mov	r2, r5
 800e79c:	4421      	add	r1, r4
 800e79e:	f7ff ff67 	bl	800e670 <net_memcpy>
 800e7a2:	f8d6 35c4 	ldr.w	r3, [r6, #1476]	; 0x5c4
 800e7a6:	f8c8 3000 	str.w	r3, [r8]
 800e7aa:	f8b6 25c8 	ldrh.w	r2, [r6, #1480]	; 0x5c8
 800e7ae:	9b06      	ldr	r3, [sp, #24]
 800e7b0:	801a      	strh	r2, [r3, #0]
 800e7b2:	887b      	ldrh	r3, [r7, #2]
 800e7b4:	3301      	adds	r3, #1
 800e7b6:	f003 0301 	and.w	r3, r3, #1
 800e7ba:	807b      	strh	r3, [r7, #2]
 800e7bc:	4628      	mov	r0, r5
 800e7be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7c2:	2500      	movs	r5, #0
 800e7c4:	e7fa      	b.n	800e7bc <udp_recv+0x5c>
 800e7c6:	bf00      	nop
 800e7c8:	200029a8 	andcs	r2, r0, r8, lsr #19

0800e7cc <udp_recv2>:
 800e7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7ce:	f640 3594 	movw	r5, #2964	; 0xb94
 800e7d2:	4368      	muls	r0, r5
 800e7d4:	4c0f      	ldr	r4, [pc, #60]	; (800e814 <udp_recv2+0x48>)
 800e7d6:	1827      	adds	r7, r4, r0
 800e7d8:	887d      	ldrh	r5, [r7, #2]
 800e7da:	5a26      	ldrh	r6, [r4, r0]
 800e7dc:	42ae      	cmp	r6, r5
 800e7de:	d017      	beq.n	800e810 <udp_recv2+0x44>
 800e7e0:	f44f 6cb9 	mov.w	ip, #1480	; 0x5c8
 800e7e4:	fb0c f505 	mul.w	r5, ip, r5
 800e7e8:	1d06      	adds	r6, r0, #4
 800e7ea:	442e      	add	r6, r5
 800e7ec:	4405      	add	r5, r0
 800e7ee:	4426      	add	r6, r4
 800e7f0:	442c      	add	r4, r5
 800e7f2:	600e      	str	r6, [r1, #0]
 800e7f4:	f8d4 15c4 	ldr.w	r1, [r4, #1476]	; 0x5c4
 800e7f8:	6011      	str	r1, [r2, #0]
 800e7fa:	f8b4 25c8 	ldrh.w	r2, [r4, #1480]	; 0x5c8
 800e7fe:	801a      	strh	r2, [r3, #0]
 800e800:	887b      	ldrh	r3, [r7, #2]
 800e802:	f8b4 05ca 	ldrh.w	r0, [r4, #1482]	; 0x5ca
 800e806:	3301      	adds	r3, #1
 800e808:	f003 0301 	and.w	r3, r3, #1
 800e80c:	807b      	strh	r3, [r7, #2]
 800e80e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e810:	2000      	movs	r0, #0
 800e812:	e7fc      	b.n	800e80e <udp_recv2+0x42>
 800e814:	200029a8 	andcs	r2, r0, r8, lsr #19

0800e818 <udp_send>:
 800e818:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800e81c:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800e950 <udp_send+0x138>
 800e820:	461c      	mov	r4, r3
 800e822:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
 800e826:	4607      	mov	r7, r0
 800e828:	4688      	mov	r8, r1
 800e82a:	4616      	mov	r6, r2
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	f000 808b 	beq.w	800e948 <udp_send+0x130>
 800e832:	1c63      	adds	r3, r4, #1
 800e834:	d141      	bne.n	800e8ba <udp_send+0xa2>
 800e836:	4a47      	ldr	r2, [pc, #284]	; (800e954 <udp_send+0x13c>)
 800e838:	2307      	movs	r3, #7
 800e83a:	4611      	mov	r1, r2
 800e83c:	20ff      	movs	r0, #255	; 0xff
 800e83e:	e001      	b.n	800e844 <udp_send+0x2c>
 800e840:	f802 0b01 	strb.w	r0, [r2], #1
 800e844:	3b01      	subs	r3, #1
 800e846:	d1fb      	bne.n	800e840 <udp_send+0x28>
 800e848:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e84c:	83cb      	strh	r3, [r1, #30]
 800e84e:	840b      	strh	r3, [r1, #32]
 800e850:	2500      	movs	r5, #0
 800e852:	f8df a104 	ldr.w	sl, [pc, #260]	; 800e958 <udp_send+0x140>
 800e856:	4c3f      	ldr	r4, [pc, #252]	; (800e954 <udp_send+0x13c>)
 800e858:	f8ba 3000 	ldrh.w	r3, [sl]
 800e85c:	2114      	movs	r1, #20
 800e85e:	8263      	strh	r3, [r4, #18]
 800e860:	f106 031c 	add.w	r3, r6, #28
 800e864:	ba5b      	rev16	r3, r3
 800e866:	f104 000e 	add.w	r0, r4, #14
 800e86a:	8223      	strh	r3, [r4, #16]
 800e86c:	8325      	strh	r5, [r4, #24]
 800e86e:	f001 fc1c 	bl	80100aa <net_chksum>
 800e872:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
 800e876:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 800e87a:	ba5b      	rev16	r3, r3
 800e87c:	8463      	strh	r3, [r4, #34]	; 0x22
 800e87e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 800e882:	4632      	mov	r2, r6
 800e884:	ba5b      	rev16	r3, r3
 800e886:	84a3      	strh	r3, [r4, #36]	; 0x24
 800e888:	f106 0308 	add.w	r3, r6, #8
 800e88c:	ba5b      	rev16	r3, r3
 800e88e:	bf28      	it	cs
 800e890:	f44f 62b8 	movcs.w	r2, #1472	; 0x5c0
 800e894:	4641      	mov	r1, r8
 800e896:	8320      	strh	r0, [r4, #24]
 800e898:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 800e89c:	84e3      	strh	r3, [r4, #38]	; 0x26
 800e89e:	f7ff fee7 	bl	800e670 <net_memcpy>
 800e8a2:	4620      	mov	r0, r4
 800e8a4:	f106 012a 	add.w	r1, r6, #42	; 0x2a
 800e8a8:	f003 fab2 	bl	8011e10 <emac_eth_send>
 800e8ac:	f8ba 3000 	ldrh.w	r3, [sl]
 800e8b0:	4628      	mov	r0, r5
 800e8b2:	3301      	adds	r3, #1
 800e8b4:	f8aa 3000 	strh.w	r3, [sl]
 800e8b8:	e037      	b.n	800e92a <udp_send+0x112>
 800e8ba:	4b28      	ldr	r3, [pc, #160]	; (800e95c <udp_send+0x144>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	43a3      	bics	r3, r4
 800e8c0:	d10f      	bne.n	800e8e2 <udp_send+0xca>
 800e8c2:	2307      	movs	r3, #7
 800e8c4:	21ff      	movs	r1, #255	; 0xff
 800e8c6:	4a23      	ldr	r2, [pc, #140]	; (800e954 <udp_send+0x13c>)
 800e8c8:	e001      	b.n	800e8ce <udp_send+0xb6>
 800e8ca:	f802 1b01 	strb.w	r1, [r2], #1
 800e8ce:	3b01      	subs	r3, #1
 800e8d0:	d1fb      	bne.n	800e8ca <udp_send+0xb2>
 800e8d2:	2204      	movs	r2, #4
 800e8d4:	4822      	ldr	r0, [pc, #136]	; (800e960 <udp_send+0x148>)
 800e8d6:	eb0d 0102 	add.w	r1, sp, r2
 800e8da:	9401      	str	r4, [sp, #4]
 800e8dc:	f7ff febe 	bl	800e65c <memcpy.isra.0>
 800e8e0:	e7b6      	b.n	800e850 <udp_send+0x38>
 800e8e2:	f004 03e0 	and.w	r3, r4, #224	; 0xe0
 800e8e6:	2be0      	cmp	r3, #224	; 0xe0
 800e8e8:	d10e      	bne.n	800e908 <udp_send+0xf0>
 800e8ea:	491e      	ldr	r1, [pc, #120]	; (800e964 <udp_send+0x14c>)
 800e8ec:	f3c4 2306 	ubfx	r3, r4, #8, #7
 800e8f0:	70cb      	strb	r3, [r1, #3]
 800e8f2:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800e8f6:	710b      	strb	r3, [r1, #4]
 800e8f8:	f3c4 6307 	ubfx	r3, r4, #24, #8
 800e8fc:	2206      	movs	r2, #6
 800e8fe:	4815      	ldr	r0, [pc, #84]	; (800e954 <udp_send+0x13c>)
 800e900:	714b      	strb	r3, [r1, #5]
 800e902:	f7ff feab 	bl	800e65c <memcpy.isra.0>
 800e906:	e7e4      	b.n	800e8d2 <udp_send+0xba>
 800e908:	4b17      	ldr	r3, [pc, #92]	; (800e968 <udp_send+0x150>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	43a3      	bics	r3, r4
 800e90e:	d00f      	beq.n	800e930 <udp_send+0x118>
 800e910:	4d16      	ldr	r5, [pc, #88]	; (800e96c <udp_send+0x154>)
 800e912:	4910      	ldr	r1, [pc, #64]	; (800e954 <udp_send+0x13c>)
 800e914:	6828      	ldr	r0, [r5, #0]
 800e916:	f001 f895 	bl	800fa44 <arp_cache_lookup>
 800e91a:	682b      	ldr	r3, [r5, #0]
 800e91c:	4298      	cmp	r0, r3
 800e91e:	d0d8      	beq.n	800e8d2 <udp_send+0xba>
 800e920:	4813      	ldr	r0, [pc, #76]	; (800e970 <udp_send+0x158>)
 800e922:	f002 f973 	bl	8010c0c <console_error>
 800e926:	f06f 0002 	mvn.w	r0, #2
 800e92a:	b002      	add	sp, #8
 800e92c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e930:	4620      	mov	r0, r4
 800e932:	4908      	ldr	r1, [pc, #32]	; (800e954 <udp_send+0x13c>)
 800e934:	f001 f886 	bl	800fa44 <arp_cache_lookup>
 800e938:	42a0      	cmp	r0, r4
 800e93a:	d0ca      	beq.n	800e8d2 <udp_send+0xba>
 800e93c:	480d      	ldr	r0, [pc, #52]	; (800e974 <udp_send+0x15c>)
 800e93e:	f002 f965 	bl	8010c0c <console_error>
 800e942:	f06f 0001 	mvn.w	r0, #1
 800e946:	e7f0      	b.n	800e92a <udp_send+0x112>
 800e948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e94c:	e7ed      	b.n	800e92a <udp_send+0x112>
 800e94e:	bf00      	nop
 800e950:	20002988 	andcs	r2, r0, r8, lsl #19
 800e954:	20008648 	andcs	r8, r0, r8, asr #12
 800e958:	20002984 	andcs	r2, r0, r4, lsl #19
 800e95c:	20002978 	andcs	r2, r0, r8, ror r9
 800e960:	20008666 	andcs	r8, r0, r6, ror #12
 800e964:	20000000 	andcs	r0, r0, r0
 800e968:	20002980 	andcs	r2, r0, r0, lsl #19
 800e96c:	2000297c 	andcs	r2, r0, ip, ror r9
 800e970:	080148af 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, fp, lr}
 800e974:	080148d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, fp, lr}

0800e978 <strlen>:
 800e978:	4603      	mov	r3, r0
 800e97a:	461a      	mov	r2, r3
 800e97c:	7811      	ldrb	r1, [r2, #0]
 800e97e:	3301      	adds	r3, #1
 800e980:	2900      	cmp	r1, #0
 800e982:	d1fa      	bne.n	800e97a <strlen+0x2>
 800e984:	1a10      	subs	r0, r2, r0
 800e986:	4770      	bx	lr

0800e988 <strcmp>:
 800e988:	1e43      	subs	r3, r0, #1
 800e98a:	3901      	subs	r1, #1
 800e98c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800e990:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e994:	4290      	cmp	r0, r2
 800e996:	d001      	beq.n	800e99c <strcmp+0x14>
 800e998:	1a80      	subs	r0, r0, r2
 800e99a:	e001      	b.n	800e9a0 <strcmp+0x18>
 800e99c:	2800      	cmp	r0, #0
 800e99e:	d1f5      	bne.n	800e98c <strcmp+0x4>
 800e9a0:	4770      	bx	lr

0800e9a2 <strcpy.isra.0>:
 800e9a2:	3801      	subs	r0, #1
 800e9a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9a8:	f800 3f01 	strb.w	r3, [r0, #1]!
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d1f9      	bne.n	800e9a4 <strcpy.isra.0+0x2>
 800e9b0:	4770      	bx	lr

0800e9b2 <strcat.isra.0>:
 800e9b2:	b538      	push	{r3, r4, r5, lr}
 800e9b4:	4604      	mov	r4, r0
 800e9b6:	460d      	mov	r5, r1
 800e9b8:	f7ff ffde 	bl	800e978 <strlen>
 800e9bc:	4629      	mov	r1, r5
 800e9be:	4420      	add	r0, r4
 800e9c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9c4:	f7ff bfed 	b.w	800e9a2 <strcpy.isra.0>

0800e9c8 <MDNS::MDNS()>:
 800e9c8:	b513      	push	{r0, r1, r4, lr}
 800e9ca:	4604      	mov	r4, r0
 800e9cc:	a901      	add	r1, sp, #4
 800e9ce:	4804      	ldr	r0, [pc, #16]	; (800e9e0 <MDNS::MDNS()+0x18>)
 800e9d0:	f002 fa7c 	bl	8010ecc <inet_aton>
 800e9d4:	4620      	mov	r0, r4
 800e9d6:	4b03      	ldr	r3, [pc, #12]	; (800e9e4 <MDNS::MDNS()+0x1c>)
 800e9d8:	9a01      	ldr	r2, [sp, #4]
 800e9da:	601a      	str	r2, [r3, #0]
 800e9dc:	b002      	add	sp, #8
 800e9de:	bd10      	pop	{r4, pc}
 800e9e0:	08014910 	stmdaeq	r1, {r4, r8, fp, lr}
 800e9e4:	20008c3c 	andcs	r8, r0, ip, lsr ip

0800e9e8 <MDNS::SetName(char const*)>:
 800e9e8:	b538      	push	{r3, r4, r5, lr}
 800e9ea:	4d0b      	ldr	r5, [pc, #44]	; (800ea18 <MDNS::SetName(char const*)+0x30>)
 800e9ec:	460c      	mov	r4, r1
 800e9ee:	6828      	ldr	r0, [r5, #0]
 800e9f0:	b108      	cbz	r0, 800e9f6 <MDNS::SetName(char const*)+0xe>
 800e9f2:	f002 fa65 	bl	8010ec0 <operator delete[](void*)>
 800e9f6:	4620      	mov	r0, r4
 800e9f8:	f7ff ffbe 	bl	800e978 <strlen>
 800e9fc:	3007      	adds	r0, #7
 800e9fe:	f002 fa63 	bl	8010ec8 <operator new[](unsigned int)>
 800ea02:	4621      	mov	r1, r4
 800ea04:	6028      	str	r0, [r5, #0]
 800ea06:	f7ff ffcc 	bl	800e9a2 <strcpy.isra.0>
 800ea0a:	6828      	ldr	r0, [r5, #0]
 800ea0c:	4903      	ldr	r1, [pc, #12]	; (800ea1c <MDNS::SetName(char const*)+0x34>)
 800ea0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea12:	f7ff bfce 	b.w	800e9b2 <strcat.isra.0>
 800ea16:	bf00      	nop
 800ea18:	2000906c 	andcs	r9, r0, ip, rrx
 800ea1c:	08014920 	stmdaeq	r1, {r5, r8, fp, lr}

0800ea20 <MDNS::DecodeDNSNameNotation(char const*, char*)>:
 800ea20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea24:	f04f 0e00 	mov.w	lr, #0
 800ea28:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
 800ea2c:	4675      	mov	r5, lr
 800ea2e:	4e1b      	ldr	r6, [pc, #108]	; (800ea9c <MDNS::DecodeDNSNameNotation(char const*, char*)+0x7c>)
 800ea30:	4f1b      	ldr	r7, [pc, #108]	; (800eaa0 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x80>)
 800ea32:	780b      	ldrb	r3, [r1, #0]
 800ea34:	1c68      	adds	r0, r5, #1
 800ea36:	b913      	cbnz	r3, 800ea3e <MDNS::DecodeDNSNameNotation(char const*, char*)+0x1e>
 800ea38:	7013      	strb	r3, [r2, #0]
 800ea3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea3e:	2b3f      	cmp	r3, #63	; 0x3f
 800ea40:	d91c      	bls.n	800ea7c <MDNS::DecodeDNSNameNotation(char const*, char*)+0x5c>
 800ea42:	7849      	ldrb	r1, [r1, #1]
 800ea44:	ea06 2303 	and.w	r3, r6, r3, lsl #8
 800ea48:	430b      	orrs	r3, r1
 800ea4a:	6839      	ldr	r1, [r7, #0]
 800ea4c:	f1be 0f00 	cmp.w	lr, #0
 800ea50:	bf08      	it	eq
 800ea52:	4605      	moveq	r5, r0
 800ea54:	5ccc      	ldrb	r4, [r1, r3]
 800ea56:	3301      	adds	r3, #1
 800ea58:	4419      	add	r1, r3
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	42a3      	cmp	r3, r4
 800ea5e:	5cc8      	ldrb	r0, [r1, r3]
 800ea60:	d309      	bcc.n	800ea76 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x56>
 800ea62:	f04f 0e01 	mov.w	lr, #1
 800ea66:	4421      	add	r1, r4
 800ea68:	4414      	add	r4, r2
 800ea6a:	780b      	ldrb	r3, [r1, #0]
 800ea6c:	b10b      	cbz	r3, 800ea72 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x52>
 800ea6e:	f804 cb01 	strb.w	ip, [r4], #1
 800ea72:	4622      	mov	r2, r4
 800ea74:	e7dd      	b.n	800ea32 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x12>
 800ea76:	54d0      	strb	r0, [r2, r3]
 800ea78:	3301      	adds	r3, #1
 800ea7a:	e7ef      	b.n	800ea5c <MDNS::DecodeDNSNameNotation(char const*, char*)+0x3c>
 800ea7c:	4688      	mov	r8, r1
 800ea7e:	18d4      	adds	r4, r2, r3
 800ea80:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 800ea84:	f802 9b01 	strb.w	r9, [r2], #1
 800ea88:	4294      	cmp	r4, r2
 800ea8a:	d1f9      	bne.n	800ea80 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x60>
 800ea8c:	1c5a      	adds	r2, r3, #1
 800ea8e:	4411      	add	r1, r2
 800ea90:	f1be 0f00 	cmp.w	lr, #0
 800ea94:	d1e9      	bne.n	800ea6a <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4a>
 800ea96:	181d      	adds	r5, r3, r0
 800ea98:	e7e7      	b.n	800ea6a <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4a>
 800ea9a:	bf00      	nop
 800ea9c:	ffff3f00 			; <UNDEFINED> instruction: 0xffff3f00
 800eaa0:	20009070 	andcs	r9, r0, r0, ror r0

0800eaa4 <MDNS::FindFirstDotFromRight(char const*) const>:
 800eaa4:	b510      	push	{r4, lr}
 800eaa6:	4608      	mov	r0, r1
 800eaa8:	460c      	mov	r4, r1
 800eaaa:	f7ff ff65 	bl	800e978 <strlen>
 800eaae:	4420      	add	r0, r4
 800eab0:	42a0      	cmp	r0, r4
 800eab2:	d903      	bls.n	800eabc <MDNS::FindFirstDotFromRight(char const*) const+0x18>
 800eab4:	f810 3901 	ldrb.w	r3, [r0], #-1
 800eab8:	2b2e      	cmp	r3, #46	; 0x2e
 800eaba:	d1f9      	bne.n	800eab0 <MDNS::FindFirstDotFromRight(char const*) const+0xc>
 800eabc:	3001      	adds	r0, #1
 800eabe:	bd10      	pop	{r4, pc}

0800eac0 <MDNS::WriteDnsName(char const*, char*, bool)>:
 800eac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eac2:	4614      	mov	r4, r2
 800eac4:	460f      	mov	r7, r1
 800eac6:	1c60      	adds	r0, r4, #1
 800eac8:	463d      	mov	r5, r7
 800eaca:	f817 6b01 	ldrb.w	r6, [r7], #1
 800eace:	b946      	cbnz	r6, 800eae2 <MDNS::WriteDnsName(char const*, char*, bool)+0x22>
 800ead0:	1a69      	subs	r1, r5, r1
 800ead2:	7021      	strb	r1, [r4, #0]
 800ead4:	7829      	ldrb	r1, [r5, #0]
 800ead6:	b949      	cbnz	r1, 800eaec <MDNS::WriteDnsName(char const*, char*, bool)+0x2c>
 800ead8:	b10b      	cbz	r3, 800eade <MDNS::WriteDnsName(char const*, char*, bool)+0x1e>
 800eada:	f800 1b01 	strb.w	r1, [r0], #1
 800eade:	1a80      	subs	r0, r0, r2
 800eae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eae2:	2e2e      	cmp	r6, #46	; 0x2e
 800eae4:	d0f4      	beq.n	800ead0 <MDNS::WriteDnsName(char const*, char*, bool)+0x10>
 800eae6:	f800 6b01 	strb.w	r6, [r0], #1
 800eaea:	e7ed      	b.n	800eac8 <MDNS::WriteDnsName(char const*, char*, bool)+0x8>
 800eaec:	4604      	mov	r4, r0
 800eaee:	1c69      	adds	r1, r5, #1
 800eaf0:	e7e8      	b.n	800eac4 <MDNS::WriteDnsName(char const*, char*, bool)+0x4>
	...

0800eaf4 <MDNS::CreateAnswerLocalIpAddress()>:
 800eaf4:	2384      	movs	r3, #132	; 0x84
 800eaf6:	b510      	push	{r4, lr}
 800eaf8:	4c0f      	ldr	r4, [pc, #60]	; (800eb38 <MDNS::CreateAnswerLocalIpAddress()+0x44>)
 800eafa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800eafe:	80e3      	strh	r3, [r4, #6]
 800eb00:	2300      	movs	r3, #0
 800eb02:	490e      	ldr	r1, [pc, #56]	; (800eb3c <MDNS::CreateAnswerLocalIpAddress()+0x48>)
 800eb04:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800eb08:	6809      	ldr	r1, [r1, #0]
 800eb0a:	f104 0210 	add.w	r2, r4, #16
 800eb0e:	2301      	movs	r3, #1
 800eb10:	f7ff ffd6 	bl	800eac0 <MDNS::WriteDnsName(char const*, char*, bool)>
 800eb14:	490a      	ldr	r1, [pc, #40]	; (800eb40 <MDNS::CreateAnswerLocalIpAddress()+0x4c>)
 800eb16:	1813      	adds	r3, r2, r0
 800eb18:	5011      	str	r1, [r2, r0]
 800eb1a:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 800eb1e:	605a      	str	r2, [r3, #4]
 800eb20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800eb24:	811a      	strh	r2, [r3, #8]
 800eb26:	4a07      	ldr	r2, [pc, #28]	; (800eb44 <MDNS::CreateAnswerLocalIpAddress()+0x50>)
 800eb28:	6812      	ldr	r2, [r2, #0]
 800eb2a:	6912      	ldr	r2, [r2, #16]
 800eb2c:	f8c3 200a 	str.w	r2, [r3, #10]
 800eb30:	1b1b      	subs	r3, r3, r4
 800eb32:	330a      	adds	r3, #10
 800eb34:	6023      	str	r3, [r4, #0]
 800eb36:	bd10      	pop	{r4, pc}
 800eb38:	20008c40 	andcs	r8, r0, r0, asr #24
 800eb3c:	2000906c 	andcs	r9, r0, ip, rrx
 800eb40:	01800100 	orreq	r0, r0, r0, lsl #2
 800eb44:	20009074 	andcs	r9, r0, r4, ror r0

0800eb48 <MDNS::Start()>:
 800eb48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb4a:	4c1d      	ldr	r4, [pc, #116]	; (800ebc0 <MDNS::Start()+0x78>)
 800eb4c:	f241 41e9 	movw	r1, #5353	; 0x14e9
 800eb50:	4605      	mov	r5, r0
 800eb52:	6820      	ldr	r0, [r4, #0]
 800eb54:	f000 fb26 	bl	800f1a4 <Network::Begin(unsigned short)>
 800eb58:	4e1a      	ldr	r6, [pc, #104]	; (800ebc4 <MDNS::Start()+0x7c>)
 800eb5a:	4f1b      	ldr	r7, [pc, #108]	; (800ebc8 <MDNS::Start()+0x80>)
 800eb5c:	4601      	mov	r1, r0
 800eb5e:	6030      	str	r0, [r6, #0]
 800eb60:	683a      	ldr	r2, [r7, #0]
 800eb62:	6820      	ldr	r0, [r4, #0]
 800eb64:	f000 fb2f 	bl	800f1c6 <Network::JoinGroup(int, unsigned int)>
 800eb68:	4b18      	ldr	r3, [pc, #96]	; (800ebcc <MDNS::Start()+0x84>)
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	b923      	cbnz	r3, 800eb78 <MDNS::Start()+0x30>
 800eb6e:	6821      	ldr	r1, [r4, #0]
 800eb70:	4628      	mov	r0, r5
 800eb72:	311c      	adds	r1, #28
 800eb74:	f7ff ff38 	bl	800e9e8 <MDNS::SetName(char const*)>
 800eb78:	4628      	mov	r0, r5
 800eb7a:	f7ff ffbb 	bl	800eaf4 <MDNS::CreateAnswerLocalIpAddress()>
 800eb7e:	f241 43e9 	movw	r3, #5353	; 0x14e9
 800eb82:	4913      	ldr	r1, [pc, #76]	; (800ebd0 <MDNS::Start()+0x88>)
 800eb84:	7830      	ldrb	r0, [r6, #0]
 800eb86:	f831 2b04 	ldrh.w	r2, [r1], #4
 800eb8a:	9300      	str	r3, [sp, #0]
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	f7ff fe43 	bl	800e818 <udp_send>
 800eb92:	233f      	movs	r3, #63	; 0x3f
 800eb94:	6820      	ldr	r0, [r4, #0]
 800eb96:	4c0f      	ldr	r4, [pc, #60]	; (800ebd4 <MDNS::Start()+0x8c>)
 800eb98:	f100 025c 	add.w	r2, r0, #92	; 0x5c
 800eb9c:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800eba0:	b929      	cbnz	r1, 800ebae <MDNS::Start()+0x66>
 800eba2:	4413      	add	r3, r2
 800eba4:	429a      	cmp	r2, r3
 800eba6:	d006      	beq.n	800ebb6 <MDNS::Start()+0x6e>
 800eba8:	f802 1b01 	strb.w	r1, [r2], #1
 800ebac:	e7fa      	b.n	800eba4 <MDNS::Start()+0x5c>
 800ebae:	3b01      	subs	r3, #1
 800ebb0:	f802 1b01 	strb.w	r1, [r2], #1
 800ebb4:	d1f2      	bne.n	800eb9c <MDNS::Start()+0x54>
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	f880 309b 	strb.w	r3, [r0, #155]	; 0x9b
 800ebbc:	b003      	add	sp, #12
 800ebbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebc0:	20009074 	andcs	r9, r0, r4, ror r0
 800ebc4:	20000008 	andcs	r0, r0, r8
 800ebc8:	20008c3c 	andcs	r8, r0, ip, lsr ip
 800ebcc:	2000906c 	andcs	r9, r0, ip, rrx
 800ebd0:	20008c40 	andcs	r8, r0, r0, asr #24
 800ebd4:	08014920 	stmdaeq	r1, {r5, r8, fp, lr}

0800ebd8 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>:
 800ebd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebdc:	4c1b      	ldr	r4, [pc, #108]	; (800ec4c <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x74>)
 800ebde:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 800ebe2:	eb04 1501 	add.w	r5, r4, r1, lsl #4
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	f854 100c 	ldr.w	r1, [r4, ip]
 800ebec:	4607      	mov	r7, r0
 800ebee:	f7ff ff67 	bl	800eac0 <MDNS::WriteDnsName(char const*, char*, bool)>
 800ebf2:	2301      	movs	r3, #1
 800ebf4:	7bac      	ldrb	r4, [r5, #14]
 800ebf6:	4616      	mov	r6, r2
 800ebf8:	4915      	ldr	r1, [pc, #84]	; (800ec50 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x78>)
 800ebfa:	4402      	add	r2, r0
 800ebfc:	4815      	ldr	r0, [pc, #84]	; (800ec54 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x7c>)
 800ebfe:	429c      	cmp	r4, r3
 800ec00:	bf18      	it	ne
 800ec02:	4601      	movne	r1, r0
 800ec04:	4638      	mov	r0, r7
 800ec06:	f7ff ff5b 	bl	800eac0 <MDNS::WriteDnsName(char const*, char*, bool)>
 800ec0a:	4b13      	ldr	r3, [pc, #76]	; (800ec58 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x80>)
 800ec0c:	1814      	adds	r4, r2, r0
 800ec0e:	5013      	str	r3, [r2, r0]
 800ec10:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800ec14:	6063      	str	r3, [r4, #4]
 800ec16:	4b11      	ldr	r3, [pc, #68]	; (800ec5c <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x84>)
 800ec18:	f8d3 8000 	ldr.w	r8, [r3]
 800ec1c:	4640      	mov	r0, r8
 800ec1e:	f7ff feab 	bl	800e978 <strlen>
 800ec22:	f100 0308 	add.w	r3, r0, #8
 800ec26:	ba5b      	rev16	r3, r3
 800ec28:	8123      	strh	r3, [r4, #8]
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	f8c4 300a 	str.w	r3, [r4, #10]
 800ec30:	89ab      	ldrh	r3, [r5, #12]
 800ec32:	f104 0210 	add.w	r2, r4, #16
 800ec36:	ba5b      	rev16	r3, r3
 800ec38:	81e3      	strh	r3, [r4, #14]
 800ec3a:	4641      	mov	r1, r8
 800ec3c:	2301      	movs	r3, #1
 800ec3e:	4638      	mov	r0, r7
 800ec40:	f7ff ff3e 	bl	800eac0 <MDNS::WriteDnsName(char const*, char*, bool)>
 800ec44:	4410      	add	r0, r2
 800ec46:	1b80      	subs	r0, r0, r6
 800ec48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec4c:	20008e44 	andcs	r8, r0, r4, asr #28
 800ec50:	0801491c 	stmdaeq	r1, {r2, r3, r4, r8, fp, lr}
 800ec54:	08014939 	stmdaeq	r1, {r0, r3, r4, r5, r8, fp, lr}
 800ec58:	01802100 	orreq	r2, r0, r0, lsl #2
 800ec5c:	2000906c 	andcs	r9, r0, ip, rrx

0800ec60 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>:
 800ec60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec64:	4e19      	ldr	r6, [pc, #100]	; (800eccc <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x6c>)
 800ec66:	010f      	lsls	r7, r1, #4
 800ec68:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	59f1      	ldr	r1, [r6, r7]
 800ec70:	4604      	mov	r4, r0
 800ec72:	f7ff ff25 	bl	800eac0 <MDNS::WriteDnsName(char const*, char*, bool)>
 800ec76:	2301      	movs	r3, #1
 800ec78:	7bae      	ldrb	r6, [r5, #14]
 800ec7a:	4690      	mov	r8, r2
 800ec7c:	4914      	ldr	r1, [pc, #80]	; (800ecd0 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x70>)
 800ec7e:	4402      	add	r2, r0
 800ec80:	4814      	ldr	r0, [pc, #80]	; (800ecd4 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x74>)
 800ec82:	429e      	cmp	r6, r3
 800ec84:	bf18      	it	ne
 800ec86:	4601      	movne	r1, r0
 800ec88:	4620      	mov	r0, r4
 800ec8a:	f7ff ff19 	bl	800eac0 <MDNS::WriteDnsName(char const*, char*, bool)>
 800ec8e:	4b12      	ldr	r3, [pc, #72]	; (800ecd8 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x78>)
 800ec90:	1816      	adds	r6, r2, r0
 800ec92:	5013      	str	r3, [r2, r0]
 800ec94:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800ec98:	68a8      	ldr	r0, [r5, #8]
 800ec9a:	6073      	str	r3, [r6, #4]
 800ec9c:	f106 040b 	add.w	r4, r6, #11
 800eca0:	b938      	cbnz	r0, 800ecb2 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x52>
 800eca2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eca6:	72b0      	strb	r0, [r6, #10]
 800eca8:	8133      	strh	r3, [r6, #8]
 800ecaa:	eba4 0008 	sub.w	r0, r4, r8
 800ecae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecb2:	f7ff fe61 	bl	800e978 <strlen>
 800ecb6:	4607      	mov	r7, r0
 800ecb8:	1c43      	adds	r3, r0, #1
 800ecba:	72b0      	strb	r0, [r6, #10]
 800ecbc:	ba5b      	rev16	r3, r3
 800ecbe:	4620      	mov	r0, r4
 800ecc0:	68a9      	ldr	r1, [r5, #8]
 800ecc2:	8133      	strh	r3, [r6, #8]
 800ecc4:	f7ff fe6d 	bl	800e9a2 <strcpy.isra.0>
 800ecc8:	443c      	add	r4, r7
 800ecca:	e7ee      	b.n	800ecaa <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x4a>
 800eccc:	20008e44 	andcs	r8, r0, r4, asr #28
 800ecd0:	0801491c 	stmdaeq	r1, {r2, r3, r4, r8, fp, lr}
 800ecd4:	08014939 	stmdaeq	r1, {r0, r3, r4, r5, r8, fp, lr}
 800ecd8:	01801000 	orreq	r1, r0, r0

0800ecdc <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>:
 800ecdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ece0:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800ed44 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x68>
 800ece4:	ea4f 1901 	mov.w	r9, r1, lsl #4
 800ece8:	eb08 1501 	add.w	r5, r8, r1, lsl #4
 800ecec:	6869      	ldr	r1, [r5, #4]
 800ecee:	2301      	movs	r3, #1
 800ecf0:	4607      	mov	r7, r0
 800ecf2:	f7ff fee5 	bl	800eac0 <MDNS::WriteDnsName(char const*, char*, bool)>
 800ecf6:	4b14      	ldr	r3, [pc, #80]	; (800ed48 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x6c>)
 800ecf8:	f858 8009 	ldr.w	r8, [r8, r9]
 800ecfc:	5013      	str	r3, [r2, r0]
 800ecfe:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800ed02:	1816      	adds	r6, r2, r0
 800ed04:	6073      	str	r3, [r6, #4]
 800ed06:	4640      	mov	r0, r8
 800ed08:	4614      	mov	r4, r2
 800ed0a:	f7ff fe35 	bl	800e978 <strlen>
 800ed0e:	f100 030d 	add.w	r3, r0, #13
 800ed12:	ba5b      	rev16	r3, r3
 800ed14:	4641      	mov	r1, r8
 800ed16:	8133      	strh	r3, [r6, #8]
 800ed18:	f106 020a 	add.w	r2, r6, #10
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	4638      	mov	r0, r7
 800ed20:	f7ff fece 	bl	800eac0 <MDNS::WriteDnsName(char const*, char*, bool)>
 800ed24:	2301      	movs	r3, #1
 800ed26:	4402      	add	r2, r0
 800ed28:	7bad      	ldrb	r5, [r5, #14]
 800ed2a:	4808      	ldr	r0, [pc, #32]	; (800ed4c <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x70>)
 800ed2c:	4908      	ldr	r1, [pc, #32]	; (800ed50 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x74>)
 800ed2e:	429d      	cmp	r5, r3
 800ed30:	bf18      	it	ne
 800ed32:	4601      	movne	r1, r0
 800ed34:	4638      	mov	r0, r7
 800ed36:	f7ff fec3 	bl	800eac0 <MDNS::WriteDnsName(char const*, char*, bool)>
 800ed3a:	4410      	add	r0, r2
 800ed3c:	1b00      	subs	r0, r0, r4
 800ed3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed42:	bf00      	nop
 800ed44:	20008e44 	andcs	r8, r0, r4, asr #28
 800ed48:	01000c00 	tsteq	r0, r0, lsl #24
 800ed4c:	08014939 	stmdaeq	r1, {r0, r3, r4, r5, r8, fp, lr}
 800ed50:	0801491c 	stmdaeq	r1, {r2, r3, r4, r8, fp, lr}

0800ed54 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>:
 800ed54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed56:	460f      	mov	r7, r1
 800ed58:	2301      	movs	r3, #1
 800ed5a:	490f      	ldr	r1, [pc, #60]	; (800ed98 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x44>)
 800ed5c:	4606      	mov	r6, r0
 800ed5e:	f7ff feaf 	bl	800eac0 <MDNS::WriteDnsName(char const*, char*, bool)>
 800ed62:	4b0e      	ldr	r3, [pc, #56]	; (800ed9c <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x48>)
 800ed64:	490e      	ldr	r1, [pc, #56]	; (800eda0 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x4c>)
 800ed66:	5013      	str	r3, [r2, r0]
 800ed68:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800ed6c:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800ed70:	684f      	ldr	r7, [r1, #4]
 800ed72:	1815      	adds	r5, r2, r0
 800ed74:	606b      	str	r3, [r5, #4]
 800ed76:	4638      	mov	r0, r7
 800ed78:	4614      	mov	r4, r2
 800ed7a:	f7ff fdfd 	bl	800e978 <strlen>
 800ed7e:	1c83      	adds	r3, r0, #2
 800ed80:	ba5b      	rev16	r3, r3
 800ed82:	812b      	strh	r3, [r5, #8]
 800ed84:	f105 020a 	add.w	r2, r5, #10
 800ed88:	2301      	movs	r3, #1
 800ed8a:	4639      	mov	r1, r7
 800ed8c:	4630      	mov	r0, r6
 800ed8e:	f7ff fe97 	bl	800eac0 <MDNS::WriteDnsName(char const*, char*, bool)>
 800ed92:	4410      	add	r0, r2
 800ed94:	1b00      	subs	r0, r0, r4
 800ed96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed98:	08014927 	stmdaeq	r1, {r0, r1, r2, r5, r8, fp, lr}
 800ed9c:	01000c00 	tsteq	r0, r0, lsl #24
 800eda0:	20008e44 	andcs	r8, r0, r4, asr #28

0800eda4 <MDNS::CreateMDNSMessage(unsigned int)>:
 800eda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eda6:	2384      	movs	r3, #132	; 0x84
 800eda8:	4d19      	ldr	r5, [pc, #100]	; (800ee10 <MDNS::CreateMDNSMessage(unsigned int)+0x6c>)
 800edaa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800edae:	80eb      	strh	r3, [r5, #6]
 800edb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800edb4:	f105 0410 	add.w	r4, r5, #16
 800edb8:	e9c5 2302 	strd	r2, r3, [r5, #8]
 800edbc:	4622      	mov	r2, r4
 800edbe:	4606      	mov	r6, r0
 800edc0:	460f      	mov	r7, r1
 800edc2:	f7ff ff09 	bl	800ebd8 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>
 800edc6:	4404      	add	r4, r0
 800edc8:	4622      	mov	r2, r4
 800edca:	4639      	mov	r1, r7
 800edcc:	4630      	mov	r0, r6
 800edce:	f7ff ff47 	bl	800ec60 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>
 800edd2:	4404      	add	r4, r0
 800edd4:	4622      	mov	r2, r4
 800edd6:	4639      	mov	r1, r7
 800edd8:	4630      	mov	r0, r6
 800edda:	f7ff ffbb 	bl	800ed54 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>
 800edde:	4404      	add	r4, r0
 800ede0:	4622      	mov	r2, r4
 800ede2:	4639      	mov	r1, r7
 800ede4:	4630      	mov	r0, r6
 800ede6:	f7ff ff79 	bl	800ecdc <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>
 800edea:	4a0a      	ldr	r2, [pc, #40]	; (800ee14 <MDNS::CreateMDNSMessage(unsigned int)+0x70>)
 800edec:	4404      	add	r4, r0
 800edee:	f852 3b10 	ldr.w	r3, [r2], #16
 800edf2:	1e60      	subs	r0, r4, #1
 800edf4:	3b0c      	subs	r3, #12
 800edf6:	4619      	mov	r1, r3
 800edf8:	3901      	subs	r1, #1
 800edfa:	d204      	bcs.n	800ee06 <MDNS::CreateMDNSMessage(unsigned int)+0x62>
 800edfc:	441c      	add	r4, r3
 800edfe:	4b06      	ldr	r3, [pc, #24]	; (800ee18 <MDNS::CreateMDNSMessage(unsigned int)+0x74>)
 800ee00:	1ae4      	subs	r4, r4, r3
 800ee02:	602c      	str	r4, [r5, #0]
 800ee04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee06:	f812 6b01 	ldrb.w	r6, [r2], #1
 800ee0a:	f800 6f01 	strb.w	r6, [r0, #1]!
 800ee0e:	e7f3      	b.n	800edf8 <MDNS::CreateMDNSMessage(unsigned int)+0x54>
 800ee10:	20008e68 	andcs	r8, r0, r8, ror #28
 800ee14:	20008c40 	andcs	r8, r0, r0, asr #24
 800ee18:	20008e6c 	andcs	r8, r0, ip, ror #28

0800ee1c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>:
 800ee1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee20:	4d40      	ldr	r5, [pc, #256]	; (800ef24 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x108>)
 800ee22:	b085      	sub	sp, #20
 800ee24:	682c      	ldr	r4, [r5, #0]
 800ee26:	4680      	mov	r8, r0
 800ee28:	460f      	mov	r7, r1
 800ee2a:	4616      	mov	r6, r2
 800ee2c:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 800ee30:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 800ee34:	b11c      	cbz	r4, 800ee3e <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x22>
 800ee36:	692a      	ldr	r2, [r5, #16]
 800ee38:	2a00      	cmp	r2, #0
 800ee3a:	d16e      	bne.n	800ef1a <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xfe>
 800ee3c:	2401      	movs	r4, #1
 800ee3e:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 800ee42:	ea4f 1904 	mov.w	r9, r4, lsl #4
 800ee46:	8193      	strh	r3, [r2, #12]
 800ee48:	f882 b00e 	strb.w	fp, [r2, #14]
 800ee4c:	2f00      	cmp	r7, #0
 800ee4e:	d154      	bne.n	800eefa <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xde>
 800ee50:	4b35      	ldr	r3, [pc, #212]	; (800ef28 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10c>)
 800ee52:	6818      	ldr	r0, [r3, #0]
 800ee54:	301c      	adds	r0, #28
 800ee56:	f7ff fd8f 	bl	800e978 <strlen>
 800ee5a:	4607      	mov	r7, r0
 800ee5c:	4630      	mov	r0, r6
 800ee5e:	f7ff fd8b 	bl	800e978 <strlen>
 800ee62:	4438      	add	r0, r7
 800ee64:	3001      	adds	r0, #1
 800ee66:	f002 f82f 	bl	8010ec8 <operator new[](unsigned int)>
 800ee6a:	4b2f      	ldr	r3, [pc, #188]	; (800ef28 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10c>)
 800ee6c:	f845 0009 	str.w	r0, [r5, r9]
 800ee70:	6819      	ldr	r1, [r3, #0]
 800ee72:	311c      	adds	r1, #28
 800ee74:	f7ff fd95 	bl	800e9a2 <strcpy.isra.0>
 800ee78:	f855 0009 	ldr.w	r0, [r5, r9]
 800ee7c:	4631      	mov	r1, r6
 800ee7e:	f7ff fd98 	bl	800e9b2 <strcat.isra.0>
 800ee82:	4631      	mov	r1, r6
 800ee84:	4640      	mov	r0, r8
 800ee86:	f7ff fe0d 	bl	800eaa4 <MDNS::FindFirstDotFromRight(char const*) const>
 800ee8a:	eb05 0709 	add.w	r7, r5, r9
 800ee8e:	4605      	mov	r5, r0
 800ee90:	f7ff fd72 	bl	800e978 <strlen>
 800ee94:	300d      	adds	r0, #13
 800ee96:	f002 f817 	bl	8010ec8 <operator new[](unsigned int)>
 800ee9a:	4629      	mov	r1, r5
 800ee9c:	6078      	str	r0, [r7, #4]
 800ee9e:	f7ff fd80 	bl	800e9a2 <strcpy.isra.0>
 800eea2:	4922      	ldr	r1, [pc, #136]	; (800ef2c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x110>)
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	f7ff fd84 	bl	800e9b2 <strcat.isra.0>
 800eeaa:	4921      	ldr	r1, [pc, #132]	; (800ef30 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x114>)
 800eeac:	4b21      	ldr	r3, [pc, #132]	; (800ef34 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x118>)
 800eeae:	6878      	ldr	r0, [r7, #4]
 800eeb0:	f1bb 0f01 	cmp.w	fp, #1
 800eeb4:	bf18      	it	ne
 800eeb6:	4619      	movne	r1, r3
 800eeb8:	f7ff fd7b 	bl	800e9b2 <strcat.isra.0>
 800eebc:	f1ba 0f00 	cmp.w	sl, #0
 800eec0:	d009      	beq.n	800eed6 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xba>
 800eec2:	4650      	mov	r0, sl
 800eec4:	f7ff fd58 	bl	800e978 <strlen>
 800eec8:	3001      	adds	r0, #1
 800eeca:	f001 fffd 	bl	8010ec8 <operator new[](unsigned int)>
 800eece:	4651      	mov	r1, sl
 800eed0:	60b8      	str	r0, [r7, #8]
 800eed2:	f7ff fd66 	bl	800e9a2 <strcpy.isra.0>
 800eed6:	4621      	mov	r1, r4
 800eed8:	4640      	mov	r0, r8
 800eeda:	f7ff ff63 	bl	800eda4 <MDNS::CreateMDNSMessage(unsigned int)>
 800eede:	f241 43e9 	movw	r3, #5353	; 0x14e9
 800eee2:	4915      	ldr	r1, [pc, #84]	; (800ef38 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x11c>)
 800eee4:	4815      	ldr	r0, [pc, #84]	; (800ef3c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x120>)
 800eee6:	f831 2b04 	ldrh.w	r2, [r1], #4
 800eeea:	9300      	str	r3, [sp, #0]
 800eeec:	4b14      	ldr	r3, [pc, #80]	; (800ef40 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x124>)
 800eeee:	7800      	ldrb	r0, [r0, #0]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	f7ff fc91 	bl	800e818 <udp_send>
 800eef6:	2001      	movs	r0, #1
 800eef8:	e010      	b.n	800ef1c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x100>
 800eefa:	4638      	mov	r0, r7
 800eefc:	f7ff fd3c 	bl	800e978 <strlen>
 800ef00:	9003      	str	r0, [sp, #12]
 800ef02:	4630      	mov	r0, r6
 800ef04:	f7ff fd38 	bl	800e978 <strlen>
 800ef08:	9b03      	ldr	r3, [sp, #12]
 800ef0a:	4418      	add	r0, r3
 800ef0c:	3001      	adds	r0, #1
 800ef0e:	f001 ffdb 	bl	8010ec8 <operator new[](unsigned int)>
 800ef12:	4639      	mov	r1, r7
 800ef14:	f845 0009 	str.w	r0, [r5, r9]
 800ef18:	e7ac      	b.n	800ee74 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x58>
 800ef1a:	2000      	movs	r0, #0
 800ef1c:	b005      	add	sp, #20
 800ef1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef22:	bf00      	nop
 800ef24:	20008e44 	andcs	r8, r0, r4, asr #28
 800ef28:	20009074 	andcs	r9, r0, r4, ror r0
 800ef2c:	080139af 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, r8, fp, ip, sp}
 800ef30:	0801491c 	stmdaeq	r1, {r2, r3, r4, r8, fp, lr}
 800ef34:	08014939 	stmdaeq	r1, {r0, r3, r4, r5, r8, fp, lr}
 800ef38:	20008e68 	andcs	r8, r0, r8, ror #28
 800ef3c:	20000008 	andcs	r0, r0, r8
 800ef40:	20008c3c 	andcs	r8, r0, ip, lsr ip

0800ef44 <MDNS::HandleRequest(unsigned short)>:
 800ef44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef48:	4605      	mov	r5, r0
 800ef4a:	2700      	movs	r7, #0
 800ef4c:	f04f 080c 	mov.w	r8, #12
 800ef50:	b0c5      	sub	sp, #276	; 0x114
 800ef52:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 800f014 <MDNS::HandleRequest(unsigned short)+0xd0>
 800ef56:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 800f018 <MDNS::HandleRequest(unsigned short)+0xd4>
 800ef5a:	9103      	str	r1, [sp, #12]
 800ef5c:	9b03      	ldr	r3, [sp, #12]
 800ef5e:	42bb      	cmp	r3, r7
 800ef60:	d802      	bhi.n	800ef68 <MDNS::HandleRequest(unsigned short)+0x24>
 800ef62:	b045      	add	sp, #276	; 0x114
 800ef64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef68:	f8da 1000 	ldr.w	r1, [sl]
 800ef6c:	aa04      	add	r2, sp, #16
 800ef6e:	4441      	add	r1, r8
 800ef70:	4628      	mov	r0, r5
 800ef72:	f7ff fd55 	bl	800ea20 <MDNS::DecodeDNSNameNotation(char const*, char*)>
 800ef76:	f8da 2000 	ldr.w	r2, [sl]
 800ef7a:	4440      	add	r0, r8
 800ef7c:	1813      	adds	r3, r2, r0
 800ef7e:	885b      	ldrh	r3, [r3, #2]
 800ef80:	f100 0804 	add.w	r8, r0, #4
 800ef84:	ba5b      	rev16	r3, r3
 800ef86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef8a:	2b01      	cmp	r3, #1
 800ef8c:	d13d      	bne.n	800f00a <MDNS::HandleRequest(unsigned short)+0xc6>
 800ef8e:	5a14      	ldrh	r4, [r2, r0]
 800ef90:	4b22      	ldr	r3, [pc, #136]	; (800f01c <MDNS::HandleRequest(unsigned short)+0xd8>)
 800ef92:	ba64      	rev16	r4, r4
 800ef94:	6818      	ldr	r0, [r3, #0]
 800ef96:	a904      	add	r1, sp, #16
 800ef98:	b2a4      	uxth	r4, r4
 800ef9a:	f7ff fcf5 	bl	800e988 <strcmp>
 800ef9e:	b968      	cbnz	r0, 800efbc <MDNS::HandleRequest(unsigned short)+0x78>
 800efa0:	2c01      	cmp	r4, #1
 800efa2:	d10b      	bne.n	800efbc <MDNS::HandleRequest(unsigned short)+0x78>
 800efa4:	f241 43e9 	movw	r3, #5353	; 0x14e9
 800efa8:	491d      	ldr	r1, [pc, #116]	; (800f020 <MDNS::HandleRequest(unsigned short)+0xdc>)
 800efaa:	481e      	ldr	r0, [pc, #120]	; (800f024 <MDNS::HandleRequest(unsigned short)+0xe0>)
 800efac:	f831 2b04 	ldrh.w	r2, [r1], #4
 800efb0:	9300      	str	r3, [sp, #0]
 800efb2:	4b1d      	ldr	r3, [pc, #116]	; (800f028 <MDNS::HandleRequest(unsigned short)+0xe4>)
 800efb4:	7800      	ldrb	r0, [r0, #0]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	f7ff fc2e 	bl	800e818 <udp_send>
 800efbc:	481b      	ldr	r0, [pc, #108]	; (800f02c <MDNS::HandleRequest(unsigned short)+0xe8>)
 800efbe:	a904      	add	r1, sp, #16
 800efc0:	f7ff fce2 	bl	800e988 <strcmp>
 800efc4:	f04f 0900 	mov.w	r9, #0
 800efc8:	4e19      	ldr	r6, [pc, #100]	; (800f030 <MDNS::HandleRequest(unsigned short)+0xec>)
 800efca:	9002      	str	r0, [sp, #8]
 800efcc:	6833      	ldr	r3, [r6, #0]
 800efce:	b1c3      	cbz	r3, 800f002 <MDNS::HandleRequest(unsigned short)+0xbe>
 800efd0:	9b02      	ldr	r3, [sp, #8]
 800efd2:	b123      	cbz	r3, 800efde <MDNS::HandleRequest(unsigned short)+0x9a>
 800efd4:	6870      	ldr	r0, [r6, #4]
 800efd6:	a904      	add	r1, sp, #16
 800efd8:	f7ff fcd6 	bl	800e988 <strcmp>
 800efdc:	b988      	cbnz	r0, 800f002 <MDNS::HandleRequest(unsigned short)+0xbe>
 800efde:	2c0c      	cmp	r4, #12
 800efe0:	d10f      	bne.n	800f002 <MDNS::HandleRequest(unsigned short)+0xbe>
 800efe2:	4649      	mov	r1, r9
 800efe4:	4628      	mov	r0, r5
 800efe6:	f7ff fedd 	bl	800eda4 <MDNS::CreateMDNSMessage(unsigned int)>
 800efea:	f241 43e9 	movw	r3, #5353	; 0x14e9
 800efee:	480d      	ldr	r0, [pc, #52]	; (800f024 <MDNS::HandleRequest(unsigned short)+0xe0>)
 800eff0:	9300      	str	r3, [sp, #0]
 800eff2:	4b0d      	ldr	r3, [pc, #52]	; (800f028 <MDNS::HandleRequest(unsigned short)+0xe4>)
 800eff4:	f8bb 2000 	ldrh.w	r2, [fp]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	490e      	ldr	r1, [pc, #56]	; (800f034 <MDNS::HandleRequest(unsigned short)+0xf0>)
 800effc:	7800      	ldrb	r0, [r0, #0]
 800effe:	f7ff fc0b 	bl	800e818 <udp_send>
 800f002:	3610      	adds	r6, #16
 800f004:	f1b9 0f00 	cmp.w	r9, #0
 800f008:	d001      	beq.n	800f00e <MDNS::HandleRequest(unsigned short)+0xca>
 800f00a:	3701      	adds	r7, #1
 800f00c:	e7a6      	b.n	800ef5c <MDNS::HandleRequest(unsigned short)+0x18>
 800f00e:	f04f 0901 	mov.w	r9, #1
 800f012:	e7db      	b.n	800efcc <MDNS::HandleRequest(unsigned short)+0x88>
 800f014:	20009070 	andcs	r9, r0, r0, ror r0
 800f018:	20008e68 	andcs	r8, r0, r8, ror #28
 800f01c:	2000906c 	andcs	r9, r0, ip, rrx
 800f020:	20008c40 	andcs	r8, r0, r0, asr #24
 800f024:	20000008 	andcs	r0, r0, r8
 800f028:	20008c3c 	andcs	r8, r0, ip, lsr ip
 800f02c:	08014927 	stmdaeq	r1, {r0, r1, r2, r5, r8, fp, lr}
 800f030:	20008e44 	andcs	r8, r0, r4, asr #28
 800f034:	20008e6c 	andcs	r8, r0, ip, ror #28

0800f038 <MDNS::Parse()>:
 800f038:	4b08      	ldr	r3, [pc, #32]	; (800f05c <MDNS::Parse()+0x24>)
 800f03a:	681a      	ldr	r2, [r3, #0]
 800f03c:	8853      	ldrh	r3, [r2, #2]
 800f03e:	ba5b      	rev16	r3, r3
 800f040:	b299      	uxth	r1, r3
 800f042:	041b      	lsls	r3, r3, #16
 800f044:	d408      	bmi.n	800f058 <MDNS::Parse()+0x20>
 800f046:	0b89      	lsrs	r1, r1, #14
 800f048:	d106      	bne.n	800f058 <MDNS::Parse()+0x20>
 800f04a:	8891      	ldrh	r1, [r2, #4]
 800f04c:	b28b      	uxth	r3, r1
 800f04e:	b11b      	cbz	r3, 800f058 <MDNS::Parse()+0x20>
 800f050:	ba49      	rev16	r1, r1
 800f052:	b289      	uxth	r1, r1
 800f054:	f7ff bf76 	b.w	800ef44 <MDNS::HandleRequest(unsigned short)>
 800f058:	4770      	bx	lr
 800f05a:	bf00      	nop
 800f05c:	20009070 	andcs	r9, r0, r0, ror r0

0800f060 <MDNS::Run()>:
 800f060:	b538      	push	{r3, r4, r5, lr}
 800f062:	4d0c      	ldr	r5, [pc, #48]	; (800f094 <MDNS::Run()+0x34>)
 800f064:	4604      	mov	r4, r0
 800f066:	480c      	ldr	r0, [pc, #48]	; (800f098 <MDNS::Run()+0x38>)
 800f068:	462b      	mov	r3, r5
 800f06a:	4a0c      	ldr	r2, [pc, #48]	; (800f09c <MDNS::Run()+0x3c>)
 800f06c:	490c      	ldr	r1, [pc, #48]	; (800f0a0 <MDNS::Run()+0x40>)
 800f06e:	7800      	ldrb	r0, [r0, #0]
 800f070:	f7ff fbac 	bl	800e7cc <udp_recv2>
 800f074:	4b0b      	ldr	r3, [pc, #44]	; (800f0a4 <MDNS::Run()+0x44>)
 800f076:	882a      	ldrh	r2, [r5, #0]
 800f078:	8018      	strh	r0, [r3, #0]
 800f07a:	f241 43e9 	movw	r3, #5353	; 0x14e9
 800f07e:	429a      	cmp	r2, r3
 800f080:	d106      	bne.n	800f090 <MDNS::Run()+0x30>
 800f082:	280c      	cmp	r0, #12
 800f084:	d904      	bls.n	800f090 <MDNS::Run()+0x30>
 800f086:	4620      	mov	r0, r4
 800f088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f08c:	f7ff bfd4 	b.w	800f038 <MDNS::Parse()>
 800f090:	bd38      	pop	{r3, r4, r5, pc}
 800f092:	bf00      	nop
 800f094:	20008c38 	andcs	r8, r0, r8, lsr ip
 800f098:	20000008 	andcs	r0, r0, r8
 800f09c:	20008c34 	andcs	r8, r0, r4, lsr ip
 800f0a0:	20009070 	andcs	r9, r0, r0, ror r0
 800f0a4:	20008e64 	andcs	r8, r0, r4, ror #28

0800f0a8 <MDNS::Print()>:
 800f0a8:	b510      	push	{r4, lr}
 800f0aa:	4816      	ldr	r0, [pc, #88]	; (800f104 <MDNS::Print()+0x5c>)
 800f0ac:	f7fa f8f6 	bl	800929c <printf>
 800f0b0:	4b15      	ldr	r3, [pc, #84]	; (800f108 <MDNS::Print()+0x60>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	3301      	adds	r3, #1
 800f0b6:	d104      	bne.n	800f0c2 <MDNS::Print()+0x1a>
 800f0b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0bc:	4813      	ldr	r0, [pc, #76]	; (800f10c <MDNS::Print()+0x64>)
 800f0be:	f7fa b8ed 	b.w	800929c <printf>
 800f0c2:	4b13      	ldr	r3, [pc, #76]	; (800f110 <MDNS::Print()+0x68>)
 800f0c4:	4c13      	ldr	r4, [pc, #76]	; (800f114 <MDNS::Print()+0x6c>)
 800f0c6:	6819      	ldr	r1, [r3, #0]
 800f0c8:	4813      	ldr	r0, [pc, #76]	; (800f118 <MDNS::Print()+0x70>)
 800f0ca:	f7fa f8e7 	bl	800929c <printf>
 800f0ce:	6823      	ldr	r3, [r4, #0]
 800f0d0:	b14b      	cbz	r3, 800f0e6 <MDNS::Print()+0x3e>
 800f0d2:	4a12      	ldr	r2, [pc, #72]	; (800f11c <MDNS::Print()+0x74>)
 800f0d4:	68a3      	ldr	r3, [r4, #8]
 800f0d6:	6861      	ldr	r1, [r4, #4]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	bf08      	it	eq
 800f0dc:	4613      	moveq	r3, r2
 800f0de:	4810      	ldr	r0, [pc, #64]	; (800f120 <MDNS::Print()+0x78>)
 800f0e0:	89a2      	ldrh	r2, [r4, #12]
 800f0e2:	f7fa f8db 	bl	800929c <printf>
 800f0e6:	6923      	ldr	r3, [r4, #16]
 800f0e8:	b15b      	cbz	r3, 800f102 <MDNS::Print()+0x5a>
 800f0ea:	69a3      	ldr	r3, [r4, #24]
 800f0ec:	4a0b      	ldr	r2, [pc, #44]	; (800f11c <MDNS::Print()+0x74>)
 800f0ee:	6961      	ldr	r1, [r4, #20]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	bf08      	it	eq
 800f0f4:	4613      	moveq	r3, r2
 800f0f6:	480a      	ldr	r0, [pc, #40]	; (800f120 <MDNS::Print()+0x78>)
 800f0f8:	8ba2      	ldrh	r2, [r4, #28]
 800f0fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0fe:	f7fa b8cd 	b.w	800929c <printf>
 800f102:	bd10      	pop	{r4, pc}
 800f104:	08014944 	stmdaeq	r1, {r2, r6, r8, fp, lr}
 800f108:	20000008 	andcs	r0, r0, r8
 800f10c:	0801494a 	stmdaeq	r1, {r1, r3, r6, r8, fp, lr}
 800f110:	2000906c 	andcs	r9, r0, ip, rrx
 800f114:	20008e44 	andcs	r8, r0, r4, asr #28
 800f118:	08014958 	stmdaeq	r1, {r3, r4, r6, r8, fp, lr}
 800f11c:	08013cab 	stmdaeq	r1, {r0, r1, r3, r5, r7, sl, fp, ip, sp}
 800f120:	08014964 	stmdaeq	r1, {r2, r5, r6, r8, fp, lr}

0800f124 <strncpy.constprop.0.isra.0>:
 800f124:	233f      	movs	r3, #63	; 0x3f
 800f126:	3901      	subs	r1, #1
 800f128:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f12c:	b92a      	cbnz	r2, 800f13a <strncpy.constprop.0.isra.0+0x16>
 800f12e:	4403      	add	r3, r0
 800f130:	4298      	cmp	r0, r3
 800f132:	d006      	beq.n	800f142 <strncpy.constprop.0.isra.0+0x1e>
 800f134:	f800 2b01 	strb.w	r2, [r0], #1
 800f138:	e7fa      	b.n	800f130 <strncpy.constprop.0.isra.0+0xc>
 800f13a:	3b01      	subs	r3, #1
 800f13c:	f800 2b01 	strb.w	r2, [r0], #1
 800f140:	d1f2      	bne.n	800f128 <strncpy.constprop.0.isra.0+0x4>
 800f142:	4770      	bx	lr

0800f144 <Network::Network()>:
 800f144:	4a11      	ldr	r2, [pc, #68]	; (800f18c <Network::Network()+0x48>)
 800f146:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800f14a:	6010      	str	r0, [r2, #0]
 800f14c:	2201      	movs	r2, #1
 800f14e:	2300      	movs	r3, #0
 800f150:	e9c0 1200 	strd	r1, r2, [r0]
 800f154:	2200      	movs	r2, #0
 800f156:	e9c0 332f 	strd	r3, r3, [r0, #188]	; 0xbc
 800f15a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f15e:	490c      	ldr	r1, [pc, #48]	; (800f190 <Network::Network()+0x4c>)
 800f160:	60c2      	str	r2, [r0, #12]
 800f162:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
 800f166:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
 800f16a:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
 800f16e:	6083      	str	r3, [r0, #8]
 800f170:	6183      	str	r3, [r0, #24]
 800f172:	7703      	strb	r3, [r0, #28]
 800f174:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 800f178:	f100 02a2 	add.w	r2, r0, #162	; 0xa2
 800f17c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f180:	f802 3b01 	strb.w	r3, [r2], #1
 800f184:	2b00      	cmp	r3, #0
 800f186:	d1f9      	bne.n	800f17c <Network::Network()+0x38>
 800f188:	4770      	bx	lr
 800f18a:	bf00      	nop
 800f18c:	20009074 	andcs	r9, r0, r4, ror r0
 800f190:	0801496f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r8, fp, lr}

0800f194 <Network::Shutdown()>:
 800f194:	b508      	push	{r3, lr}
 800f196:	30b8      	adds	r0, #184	; 0xb8
 800f198:	f7f9 fd82 	bl	8008ca0 <NetworkDisplay::ShowShutdown()>
 800f19c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f1a0:	f7f8 b826 	b.w	80071f0 <net_shutdown>

0800f1a4 <Network::Begin(unsigned short)>:
 800f1a4:	4608      	mov	r0, r1
 800f1a6:	f7ff baa1 	b.w	800e6ec <udp_bind>

0800f1aa <Network::End(unsigned short)>:
 800f1aa:	4608      	mov	r0, r1
 800f1ac:	f7ff bab8 	b.w	800e720 <udp_unbind>

0800f1b0 <Network::MacAddressCopyTo(unsigned char*)>:
 800f1b0:	f100 039c 	add.w	r3, r0, #156	; 0x9c
 800f1b4:	3901      	subs	r1, #1
 800f1b6:	30a2      	adds	r0, #162	; 0xa2
 800f1b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1bc:	4283      	cmp	r3, r0
 800f1be:	f801 2f01 	strb.w	r2, [r1, #1]!
 800f1c2:	d1f9      	bne.n	800f1b8 <Network::MacAddressCopyTo(unsigned char*)+0x8>
 800f1c4:	4770      	bx	lr

0800f1c6 <Network::JoinGroup(int, unsigned int)>:
 800f1c6:	4610      	mov	r0, r2
 800f1c8:	f000 bef6 	b.w	800ffb8 <igmp_join>

0800f1cc <Network::SetDefaultIp()>:
 800f1cc:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800f1d0:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
 800f1d4:	041b      	lsls	r3, r3, #16
 800f1d6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f1da:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
 800f1de:	3302      	adds	r3, #2
 800f1e0:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 800f1e4:	22ff      	movs	r2, #255	; 0xff
 800f1e6:	6103      	str	r3, [r0, #16]
 800f1e8:	e9c0 3205 	strd	r3, r2, [r0, #20]
 800f1ec:	4770      	bx	lr
	...

0800f1f0 <Network::Init(NetworkParamsStore*)>:
 800f1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1f4:	b08b      	sub	sp, #44	; 0x2c
 800f1f6:	4604      	mov	r4, r0
 800f1f8:	a806      	add	r0, sp, #24
 800f1fa:	f000 f9b5 	bl	800f568 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800f1fe:	a806      	add	r0, sp, #24
 800f200:	f000 f9c2 	bl	800f588 <NetworkParams::Load()>
 800f204:	b110      	cbz	r0, 800f20c <Network::Init(NetworkParamsStore*)+0x1c>
 800f206:	a806      	add	r0, sp, #24
 800f208:	f000 fba9 	bl	800f95e <NetworkParams::Dump()>
 800f20c:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
 800f210:	f8df 822c 	ldr.w	r8, [pc, #556]	; 800f440 <Network::Init(NetworkParamsStore*)+0x250>
 800f214:	4628      	mov	r0, r5
 800f216:	f104 079c 	add.w	r7, r4, #156	; 0x9c
 800f21a:	f7f9 fd3f 	bl	8008c9c <NetworkDisplay::ShowEmacStart()>
 800f21e:	4638      	mov	r0, r7
 800f220:	f002 fd32 	bl	8011c88 <emac_start>
 800f224:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f228:	f104 061c 	add.w	r6, r4, #28
 800f22c:	9307      	str	r3, [sp, #28]
 800f22e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f232:	9308      	str	r3, [sp, #32]
 800f234:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f238:	9309      	str	r3, [sp, #36]	; 0x24
 800f23a:	f898 3014 	ldrb.w	r3, [r8, #20]
 800f23e:	7063      	strb	r3, [r4, #1]
 800f240:	f8d8 3000 	ldr.w	r3, [r8]
 800f244:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 800f248:	bf18      	it	ne
 800f24a:	f8d8 2055 	ldrne.w	r2, [r8, #85]	; 0x55
 800f24e:	061b      	lsls	r3, r3, #24
 800f250:	bf58      	it	pl
 800f252:	2300      	movpl	r3, #0
 800f254:	60a2      	str	r2, [r4, #8]
 800f256:	bf48      	it	mi
 800f258:	f8d8 3059 	ldrmi.w	r3, [r8, #89]	; 0x59
 800f25c:	60e3      	str	r3, [r4, #12]
 800f25e:	f898 3015 	ldrb.w	r3, [r8, #21]
 800f262:	2b00      	cmp	r3, #0
 800f264:	f040 80bc 	bne.w	800f3e0 <Network::Init(NetworkParamsStore*)+0x1f0>
 800f268:	4630      	mov	r0, r6
 800f26a:	4976      	ldr	r1, [pc, #472]	; (800f444 <Network::Init(NetworkParamsStore*)+0x254>)
 800f26c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f270:	f103 0c01 	add.w	ip, r3, #1
 800f274:	2a00      	cmp	r2, #0
 800f276:	f040 80af 	bne.w	800f3d8 <Network::Init(NetworkParamsStore*)+0x1e8>
 800f27a:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
 800f27e:	18e1      	adds	r1, r4, r3
 800f280:	0910      	lsrs	r0, r2, #4
 800f282:	2a9f      	cmp	r2, #159	; 0x9f
 800f284:	f002 020f 	and.w	r2, r2, #15
 800f288:	bf94      	ite	ls
 800f28a:	3030      	addls	r0, #48	; 0x30
 800f28c:	3037      	addhi	r0, #55	; 0x37
 800f28e:	2a09      	cmp	r2, #9
 800f290:	bf94      	ite	ls
 800f292:	3230      	addls	r2, #48	; 0x30
 800f294:	3237      	addhi	r2, #55	; 0x37
 800f296:	44a4      	add	ip, r4
 800f298:	7708      	strb	r0, [r1, #28]
 800f29a:	f88c 201c 	strb.w	r2, [ip, #28]
 800f29e:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
 800f2a2:	f103 0e02 	add.w	lr, r3, #2
 800f2a6:	0910      	lsrs	r0, r2, #4
 800f2a8:	2a9f      	cmp	r2, #159	; 0x9f
 800f2aa:	f002 020f 	and.w	r2, r2, #15
 800f2ae:	bf94      	ite	ls
 800f2b0:	3030      	addls	r0, #48	; 0x30
 800f2b2:	3037      	addhi	r0, #55	; 0x37
 800f2b4:	f103 0903 	add.w	r9, r3, #3
 800f2b8:	2a09      	cmp	r2, #9
 800f2ba:	44a6      	add	lr, r4
 800f2bc:	f88e 001c 	strb.w	r0, [lr, #28]
 800f2c0:	bf94      	ite	ls
 800f2c2:	3230      	addls	r2, #48	; 0x30
 800f2c4:	3237      	addhi	r2, #55	; 0x37
 800f2c6:	eb04 0009 	add.w	r0, r4, r9
 800f2ca:	7702      	strb	r2, [r0, #28]
 800f2cc:	f894 20a1 	ldrb.w	r2, [r4, #161]	; 0xa1
 800f2d0:	f103 0c04 	add.w	ip, r3, #4
 800f2d4:	0910      	lsrs	r0, r2, #4
 800f2d6:	2a9f      	cmp	r2, #159	; 0x9f
 800f2d8:	f002 020f 	and.w	r2, r2, #15
 800f2dc:	bf94      	ite	ls
 800f2de:	3030      	addls	r0, #48	; 0x30
 800f2e0:	3037      	addhi	r0, #55	; 0x37
 800f2e2:	3305      	adds	r3, #5
 800f2e4:	2a09      	cmp	r2, #9
 800f2e6:	4423      	add	r3, r4
 800f2e8:	44a4      	add	ip, r4
 800f2ea:	bf94      	ite	ls
 800f2ec:	3230      	addls	r2, #48	; 0x30
 800f2ee:	3237      	addhi	r2, #55	; 0x37
 800f2f0:	f88c 001c 	strb.w	r0, [ip, #28]
 800f2f4:	771a      	strb	r2, [r3, #28]
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	f881 3022 	strb.w	r3, [r1, #34]	; 0x22
 800f2fc:	7863      	ldrb	r3, [r4, #1]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	f040 8098 	bne.w	800f434 <Network::Init(NetworkParamsStore*)+0x244>
 800f304:	9b07      	ldr	r3, [sp, #28]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d172      	bne.n	800f3f0 <Network::Init(NetworkParamsStore*)+0x200>
 800f30a:	4620      	mov	r0, r4
 800f30c:	f7ff ff5e 	bl	800f1cc <Network::SetDefaultIp()>
 800f310:	6923      	ldr	r3, [r4, #16]
 800f312:	69a2      	ldr	r2, [r4, #24]
 800f314:	9307      	str	r3, [sp, #28]
 800f316:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f31a:	1ce3      	adds	r3, r4, #3
 800f31c:	f104 0901 	add.w	r9, r4, #1
 800f320:	9302      	str	r3, [sp, #8]
 800f322:	9300      	str	r3, [sp, #0]
 800f324:	4632      	mov	r2, r6
 800f326:	464b      	mov	r3, r9
 800f328:	4638      	mov	r0, r7
 800f32a:	a907      	add	r1, sp, #28
 800f32c:	f7f7 ff10 	bl	8007150 <net_init>
 800f330:	78e3      	ldrb	r3, [r4, #3]
 800f332:	b11b      	cbz	r3, 800f33c <Network::Init(NetworkParamsStore*)+0x14c>
 800f334:	2104      	movs	r1, #4
 800f336:	4628      	mov	r0, r5
 800f338:	f7f9 fcb3 	bl	8008ca2 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 800f33c:	f898 3014 	ldrb.w	r3, [r8, #20]
 800f340:	f898 a05d 	ldrb.w	sl, [r8, #93]	; 0x5d
 800f344:	9304      	str	r3, [sp, #16]
 800f346:	233c      	movs	r3, #60	; 0x3c
 800f348:	fb03 f30a 	mul.w	r3, r3, sl
 800f34c:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800f448 <Network::Init(NetworkParamsStore*)+0x258>
 800f350:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 800f44c <Network::Init(NetworkParamsStore*)+0x25c>
 800f354:	9303      	str	r3, [sp, #12]
 800f356:	78e3      	ldrb	r3, [r4, #3]
 800f358:	b393      	cbz	r3, 800f3c0 <Network::Init(NetworkParamsStore*)+0x1d0>
 800f35a:	f1ba 0f00 	cmp.w	sl, #0
 800f35e:	d02f      	beq.n	800f3c0 <Network::Init(NetworkParamsStore*)+0x1d0>
 800f360:	9b04      	ldr	r3, [sp, #16]
 800f362:	b36b      	cbz	r3, 800f3c0 <Network::Init(NetworkParamsStore*)+0x1d0>
 800f364:	2104      	movs	r1, #4
 800f366:	f8d8 0000 	ldr.w	r0, [r8]
 800f36a:	f001 fce1 	bl	8010d30 <LedBlink::SetMode(ledblink::Mode)>
 800f36e:	2103      	movs	r1, #3
 800f370:	4628      	mov	r0, r5
 800f372:	f7f9 fc96 	bl	8008ca2 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 800f376:	2000      	movs	r0, #0
 800f378:	f001 ff82 	bl	8011280 <time>
 800f37c:	9005      	str	r0, [sp, #20]
 800f37e:	2000      	movs	r0, #0
 800f380:	f001 ff7e 	bl	8011280 <time>
 800f384:	9b05      	ldr	r3, [sp, #20]
 800f386:	4932      	ldr	r1, [pc, #200]	; (800f450 <Network::Init(NetworkParamsStore*)+0x260>)
 800f388:	1ac0      	subs	r0, r0, r3
 800f38a:	9b03      	ldr	r3, [sp, #12]
 800f38c:	4298      	cmp	r0, r3
 800f38e:	db37      	blt.n	800f400 <Network::Init(NetworkParamsStore*)+0x210>
 800f390:	2101      	movs	r1, #1
 800f392:	4628      	mov	r0, r5
 800f394:	f7f9 fc85 	bl	8008ca2 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 800f398:	2101      	movs	r1, #1
 800f39a:	f8d8 0000 	ldr.w	r0, [r8]
 800f39e:	f001 fcc7 	bl	8010d30 <LedBlink::SetMode(ledblink::Mode)>
 800f3a2:	2301      	movs	r3, #1
 800f3a4:	7063      	strb	r3, [r4, #1]
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	70e3      	strb	r3, [r4, #3]
 800f3aa:	9b02      	ldr	r3, [sp, #8]
 800f3ac:	4632      	mov	r2, r6
 800f3ae:	9300      	str	r3, [sp, #0]
 800f3b0:	4638      	mov	r0, r7
 800f3b2:	464b      	mov	r3, r9
 800f3b4:	a907      	add	r1, sp, #28
 800f3b6:	f7f7 fecb 	bl	8007150 <net_init>
 800f3ba:	7863      	ldrb	r3, [r4, #1]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d0ca      	beq.n	800f356 <Network::Init(NetworkParamsStore*)+0x166>
 800f3c0:	9b07      	ldr	r3, [sp, #28]
 800f3c2:	4628      	mov	r0, r5
 800f3c4:	6123      	str	r3, [r4, #16]
 800f3c6:	9b08      	ldr	r3, [sp, #32]
 800f3c8:	61a3      	str	r3, [r4, #24]
 800f3ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3cc:	6163      	str	r3, [r4, #20]
 800f3ce:	f7f9 fc66 	bl	8008c9e <NetworkDisplay::ShowIp()>
 800f3d2:	b00b      	add	sp, #44	; 0x2c
 800f3d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3d8:	4663      	mov	r3, ip
 800f3da:	f800 2b01 	strb.w	r2, [r0], #1
 800f3de:	e745      	b.n	800f26c <Network::Init(NetworkParamsStore*)+0x7c>
 800f3e0:	4630      	mov	r0, r6
 800f3e2:	491c      	ldr	r1, [pc, #112]	; (800f454 <Network::Init(NetworkParamsStore*)+0x264>)
 800f3e4:	f7ff fe9e 	bl	800f124 <strncpy.constprop.0.isra.0>
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 800f3ee:	e785      	b.n	800f2fc <Network::Init(NetworkParamsStore*)+0x10c>
 800f3f0:	69a1      	ldr	r1, [r4, #24]
 800f3f2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800f3f6:	4053      	eors	r3, r2
 800f3f8:	420b      	tst	r3, r1
 800f3fa:	bf18      	it	ne
 800f3fc:	9209      	strne	r2, [sp, #36]	; 0x24
 800f3fe:	e78c      	b.n	800f31a <Network::Init(NetworkParamsStore*)+0x12a>
 800f400:	f8d8 3000 	ldr.w	r3, [r8]
 800f404:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800f408:	f1bc 0f00 	cmp.w	ip, #0
 800f40c:	d0b7      	beq.n	800f37e <Network::Init(NetworkParamsStore*)+0x18e>
 800f40e:	6808      	ldr	r0, [r1, #0]
 800f410:	695a      	ldr	r2, [r3, #20]
 800f412:	1a80      	subs	r0, r0, r2
 800f414:	4584      	cmp	ip, r0
 800f416:	d8b2      	bhi.n	800f37e <Network::Init(NetworkParamsStore*)+0x18e>
 800f418:	6808      	ldr	r0, [r1, #0]
 800f41a:	6158      	str	r0, [r3, #20]
 800f41c:	6918      	ldr	r0, [r3, #16]
 800f41e:	2801      	cmp	r0, #1
 800f420:	f080 0201 	eor.w	r2, r0, #1
 800f424:	611a      	str	r2, [r3, #16]
 800f426:	bf16      	itet	ne
 800f428:	2301      	movne	r3, #1
 800f42a:	f8cb 0014 	streq.w	r0, [fp, #20]
 800f42e:	f8cb 3010 	strne.w	r3, [fp, #16]
 800f432:	e7a4      	b.n	800f37e <Network::Init(NetworkParamsStore*)+0x18e>
 800f434:	2101      	movs	r1, #1
 800f436:	4628      	mov	r0, r5
 800f438:	f7f9 fc33 	bl	8008ca2 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 800f43c:	e76d      	b.n	800f31a <Network::Init(NetworkParamsStore*)+0x12a>
 800f43e:	bf00      	nop
 800f440:	20009078 	andcs	r9, r0, r8, ror r0
 800f444:	08014974 	stmdaeq	r1, {r2, r4, r5, r6, r8, fp, lr}
 800f448:	20009790 	mulcs	r0, r0, r7
 800f44c:	40011000 	andmi	r1, r1, r0
 800f450:	200097ac 	andcs	r9, r0, ip, lsr #15
 800f454:	2000908d 	andcs	r9, r0, sp, lsl #1

0800f458 <Network::Print()>:
 800f458:	b530      	push	{r4, r5, lr}
 800f45a:	4604      	mov	r4, r0
 800f45c:	b085      	sub	sp, #20
 800f45e:	4832      	ldr	r0, [pc, #200]	; (800f528 <Network::Print()+0xd0>)
 800f460:	f7f9 ff1c 	bl	800929c <printf>
 800f464:	f104 011c 	add.w	r1, r4, #28
 800f468:	4830      	ldr	r0, [pc, #192]	; (800f52c <Network::Print()+0xd4>)
 800f46a:	f7f9 ff17 	bl	800929c <printf>
 800f46e:	6861      	ldr	r1, [r4, #4]
 800f470:	f104 02a2 	add.w	r2, r4, #162	; 0xa2
 800f474:	482e      	ldr	r0, [pc, #184]	; (800f530 <Network::Print()+0xd8>)
 800f476:	f7f9 ff11 	bl	800929c <printf>
 800f47a:	69a0      	ldr	r0, [r4, #24]
 800f47c:	f003 fe88 	bl	8013190 <__popcountsi2>
 800f480:	6925      	ldr	r5, [r4, #16]
 800f482:	9001      	str	r0, [sp, #4]
 800f484:	0e2b      	lsrs	r3, r5, #24
 800f486:	9300      	str	r3, [sp, #0]
 800f488:	f3c5 2207 	ubfx	r2, r5, #8, #8
 800f48c:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800f490:	b2e9      	uxtb	r1, r5
 800f492:	4828      	ldr	r0, [pc, #160]	; (800f534 <Network::Print()+0xdc>)
 800f494:	f7f9 ff02 	bl	800929c <printf>
 800f498:	69a1      	ldr	r1, [r4, #24]
 800f49a:	4827      	ldr	r0, [pc, #156]	; (800f538 <Network::Print()+0xe0>)
 800f49c:	0e0b      	lsrs	r3, r1, #24
 800f49e:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800f4a2:	9300      	str	r3, [sp, #0]
 800f4a4:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800f4a8:	b2c9      	uxtb	r1, r1
 800f4aa:	f7f9 fef7 	bl	800929c <printf>
 800f4ae:	6961      	ldr	r1, [r4, #20]
 800f4b0:	4822      	ldr	r0, [pc, #136]	; (800f53c <Network::Print()+0xe4>)
 800f4b2:	0e0b      	lsrs	r3, r1, #24
 800f4b4:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800f4b8:	9300      	str	r3, [sp, #0]
 800f4ba:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800f4be:	b2c9      	uxtb	r1, r1
 800f4c0:	f7f9 feec 	bl	800929c <printf>
 800f4c4:	69a3      	ldr	r3, [r4, #24]
 800f4c6:	6921      	ldr	r1, [r4, #16]
 800f4c8:	481d      	ldr	r0, [pc, #116]	; (800f540 <Network::Print()+0xe8>)
 800f4ca:	ea61 0103 	orn	r1, r1, r3
 800f4ce:	0e0b      	lsrs	r3, r1, #24
 800f4d0:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800f4d4:	9300      	str	r3, [sp, #0]
 800f4d6:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800f4da:	b2c9      	uxtb	r1, r1
 800f4dc:	f7f9 fede 	bl	800929c <printf>
 800f4e0:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 800f4e4:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
 800f4e8:	9302      	str	r3, [sp, #8]
 800f4ea:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 800f4ee:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
 800f4f2:	9301      	str	r3, [sp, #4]
 800f4f4:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
 800f4f8:	4812      	ldr	r0, [pc, #72]	; (800f544 <Network::Print()+0xec>)
 800f4fa:	9300      	str	r3, [sp, #0]
 800f4fc:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
 800f500:	f7f9 fecc 	bl	800929c <printf>
 800f504:	4b10      	ldr	r3, [pc, #64]	; (800f548 <Network::Print()+0xf0>)
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	78da      	ldrb	r2, [r3, #3]
 800f50a:	b952      	cbnz	r2, 800f522 <Network::Print()+0xca>
 800f50c:	785b      	ldrb	r3, [r3, #1]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	bf14      	ite	ne
 800f512:	2144      	movne	r1, #68	; 0x44
 800f514:	2153      	moveq	r1, #83	; 0x53
 800f516:	480d      	ldr	r0, [pc, #52]	; (800f54c <Network::Print()+0xf4>)
 800f518:	b005      	add	sp, #20
 800f51a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f51e:	f7f9 bebd 	b.w	800929c <printf>
 800f522:	215a      	movs	r1, #90	; 0x5a
 800f524:	e7f7      	b.n	800f516 <Network::Print()+0xbe>
 800f526:	bf00      	nop
 800f528:	08014980 	stmdaeq	r1, {r7, r8, fp, lr}
 800f52c:	08014989 	stmdaeq	r1, {r0, r3, r7, r8, fp, lr}
 800f530:	0801499a 	stmdaeq	r1, {r1, r3, r4, r7, r8, fp, lr}
 800f534:	080149af 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, r8, fp, lr}
 800f538:	080149cc 	stmdaeq	r1, {r2, r3, r6, r7, r8, fp, lr}
 800f53c:	080149e6 	stmdaeq	r1, {r1, r2, r5, r6, r7, r8, fp, lr}
 800f540:	08014a00 	stmdaeq	r1, {r9, fp, lr}
 800f544:	08014a1a 	stmdaeq	r1, {r1, r3, r4, r9, fp, lr}
 800f548:	20009074 	andcs	r9, r0, r4, ror r0
 800f54c:	08014a46 	stmdaeq	r1, {r1, r2, r6, r9, fp, lr}

0800f550 <Network::TcpBegin(unsigned short)>:
 800f550:	4608      	mov	r0, r1
 800f552:	f7ff b805 	b.w	800e560 <tcp_begin>

0800f556 <Network::TcpRead(int, unsigned char const**)>:
 800f556:	4608      	mov	r0, r1
 800f558:	4611      	mov	r1, r2
 800f55a:	f7ff b83f 	b.w	800e5dc <tcp_read>

0800f55e <Network::TcpWrite(int, unsigned char const*, unsigned short)>:
 800f55e:	4608      	mov	r0, r1
 800f560:	4611      	mov	r1, r2
 800f562:	461a      	mov	r2, r3
 800f564:	f7ff b816 	b.w	800e594 <tcp_write>

0800f568 <NetworkParams::NetworkParams(NetworkParamsStore*)>:
 800f568:	4b06      	ldr	r3, [pc, #24]	; (800f584 <NetworkParams::NetworkParams(NetworkParamsStore*)+0x1c>)
 800f56a:	b510      	push	{r4, lr}
 800f56c:	225e      	movs	r2, #94	; 0x5e
 800f56e:	4604      	mov	r4, r0
 800f570:	6001      	str	r1, [r0, #0]
 800f572:	2100      	movs	r1, #0
 800f574:	4618      	mov	r0, r3
 800f576:	f001 fd7b 	bl	8011070 <memset>
 800f57a:	2201      	movs	r2, #1
 800f57c:	7502      	strb	r2, [r0, #20]
 800f57e:	4620      	mov	r0, r4
 800f580:	bd10      	pop	{r4, pc}
 800f582:	bf00      	nop
 800f584:	20009078 	andcs	r9, r0, r8, ror r0

0800f588 <NetworkParams::Load()>:
 800f588:	b508      	push	{r3, lr}
 800f58a:	2300      	movs	r3, #0
 800f58c:	4905      	ldr	r1, [pc, #20]	; (800f5a4 <NetworkParams::Load()+0x1c>)
 800f58e:	6800      	ldr	r0, [r0, #0]
 800f590:	700b      	strb	r3, [r1, #0]
 800f592:	704b      	strb	r3, [r1, #1]
 800f594:	708b      	strb	r3, [r1, #2]
 800f596:	70cb      	strb	r3, [r1, #3]
 800f598:	b118      	cbz	r0, 800f5a2 <NetworkParams::Load()+0x1a>
 800f59a:	6803      	ldr	r3, [r0, #0]
 800f59c:	68db      	ldr	r3, [r3, #12]
 800f59e:	4798      	blx	r3
 800f5a0:	2001      	movs	r0, #1
 800f5a2:	bd08      	pop	{r3, pc}
 800f5a4:	20009078 	andcs	r9, r0, r8, ror r0

0800f5a8 <NetworkParams::Load(char const*, unsigned int)>:
 800f5a8:	6803      	ldr	r3, [r0, #0]
 800f5aa:	b1eb      	cbz	r3, 800f5e8 <NetworkParams::Load(char const*, unsigned int)+0x40>
 800f5ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	460e      	mov	r6, r1
 800f5b2:	4617      	mov	r7, r2
 800f5b4:	4605      	mov	r5, r0
 800f5b6:	4c0d      	ldr	r4, [pc, #52]	; (800f5ec <NetworkParams::Load(char const*, unsigned int)+0x44>)
 800f5b8:	4602      	mov	r2, r0
 800f5ba:	490d      	ldr	r1, [pc, #52]	; (800f5f0 <NetworkParams::Load(char const*, unsigned int)+0x48>)
 800f5bc:	4668      	mov	r0, sp
 800f5be:	7023      	strb	r3, [r4, #0]
 800f5c0:	7063      	strb	r3, [r4, #1]
 800f5c2:	70a3      	strb	r3, [r4, #2]
 800f5c4:	70e3      	strb	r3, [r4, #3]
 800f5c6:	f000 fee5 	bl	8010394 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800f5ca:	463a      	mov	r2, r7
 800f5cc:	4631      	mov	r1, r6
 800f5ce:	4668      	mov	r0, sp
 800f5d0:	f000 fee4 	bl	801039c <ReadConfigFile::Read(char const*, unsigned int)>
 800f5d4:	6828      	ldr	r0, [r5, #0]
 800f5d6:	4621      	mov	r1, r4
 800f5d8:	6803      	ldr	r3, [r0, #0]
 800f5da:	689b      	ldr	r3, [r3, #8]
 800f5dc:	4798      	blx	r3
 800f5de:	4668      	mov	r0, sp
 800f5e0:	f000 fedb 	bl	801039a <ReadConfigFile::~ReadConfigFile()>
 800f5e4:	b003      	add	sp, #12
 800f5e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5e8:	4770      	bx	lr
 800f5ea:	bf00      	nop
 800f5ec:	20009078 	andcs	r9, r0, r8, ror r0
 800f5f0:	0800f725 	stmdaeq	r0, {r0, r2, r5, r8, r9, sl, ip, sp, lr, pc}

0800f5f4 <NetworkParams::callbackFunction(char const*)>:
 800f5f4:	b530      	push	{r4, r5, lr}
 800f5f6:	460c      	mov	r4, r1
 800f5f8:	b085      	sub	sp, #20
 800f5fa:	4620      	mov	r0, r4
 800f5fc:	4942      	ldr	r1, [pc, #264]	; (800f708 <NetworkParams::callbackFunction(char const*)+0x114>)
 800f5fe:	f10d 0207 	add.w	r2, sp, #7
 800f602:	f001 f803 	bl	801060c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800f606:	b980      	cbnz	r0, 800f62a <NetworkParams::callbackFunction(char const*)+0x36>
 800f608:	4940      	ldr	r1, [pc, #256]	; (800f70c <NetworkParams::callbackFunction(char const*)+0x118>)
 800f60a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f60e:	680b      	ldr	r3, [r1, #0]
 800f610:	b142      	cbz	r2, 800f624 <NetworkParams::callbackFunction(char const*)+0x30>
 800f612:	f023 0301 	bic.w	r3, r3, #1
 800f616:	3a00      	subs	r2, #0
 800f618:	bf18      	it	ne
 800f61a:	2201      	movne	r2, #1
 800f61c:	600b      	str	r3, [r1, #0]
 800f61e:	750a      	strb	r2, [r1, #20]
 800f620:	b005      	add	sp, #20
 800f622:	bd30      	pop	{r4, r5, pc}
 800f624:	f043 0301 	orr.w	r3, r3, #1
 800f628:	e7f5      	b.n	800f616 <NetworkParams::callbackFunction(char const*)+0x22>
 800f62a:	4620      	mov	r0, r4
 800f62c:	4938      	ldr	r1, [pc, #224]	; (800f710 <NetworkParams::callbackFunction(char const*)+0x11c>)
 800f62e:	f10d 0207 	add.w	r2, sp, #7
 800f632:	f000 ffeb 	bl	801060c <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800f636:	b988      	cbnz	r0, 800f65c <NetworkParams::callbackFunction(char const*)+0x68>
 800f638:	4a34      	ldr	r2, [pc, #208]	; (800f70c <NetworkParams::callbackFunction(char const*)+0x118>)
 800f63a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f63e:	6813      	ldr	r3, [r2, #0]
 800f640:	1e4d      	subs	r5, r1, #1
 800f642:	2d04      	cmp	r5, #4
 800f644:	bf97      	itett	ls
 800f646:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 800f64a:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 800f64e:	6013      	strls	r3, [r2, #0]
 800f650:	f882 105d 	strbls.w	r1, [r2, #93]	; 0x5d
 800f654:	bf84      	itt	hi
 800f656:	6013      	strhi	r3, [r2, #0]
 800f658:	f882 005d 	strbhi.w	r0, [r2, #93]	; 0x5d
 800f65c:	4620      	mov	r0, r4
 800f65e:	492d      	ldr	r1, [pc, #180]	; (800f714 <NetworkParams::callbackFunction(char const*)+0x120>)
 800f660:	aa02      	add	r2, sp, #8
 800f662:	f000 ff4b 	bl	80104fc <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 800f666:	b9d0      	cbnz	r0, 800f69e <NetworkParams::callbackFunction(char const*)+0xaa>
 800f668:	9b02      	ldr	r3, [sp, #8]
 800f66a:	b2d9      	uxtb	r1, r3
 800f66c:	29ac      	cmp	r1, #172	; 0xac
 800f66e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800f672:	d00a      	beq.n	800f68a <NetworkParams::callbackFunction(char const*)+0x96>
 800f674:	29c0      	cmp	r1, #192	; 0xc0
 800f676:	d00c      	beq.n	800f692 <NetworkParams::callbackFunction(char const*)+0x9e>
 800f678:	290a      	cmp	r1, #10
 800f67a:	d10d      	bne.n	800f698 <NetworkParams::callbackFunction(char const*)+0xa4>
 800f67c:	4a23      	ldr	r2, [pc, #140]	; (800f70c <NetworkParams::callbackFunction(char const*)+0x118>)
 800f67e:	6053      	str	r3, [r2, #4]
 800f680:	6813      	ldr	r3, [r2, #0]
 800f682:	f043 0302 	orr.w	r3, r3, #2
 800f686:	6013      	str	r3, [r2, #0]
 800f688:	e7ca      	b.n	800f620 <NetworkParams::callbackFunction(char const*)+0x2c>
 800f68a:	3a10      	subs	r2, #16
 800f68c:	2a0f      	cmp	r2, #15
 800f68e:	d8c7      	bhi.n	800f620 <NetworkParams::callbackFunction(char const*)+0x2c>
 800f690:	e7f4      	b.n	800f67c <NetworkParams::callbackFunction(char const*)+0x88>
 800f692:	2aa8      	cmp	r2, #168	; 0xa8
 800f694:	d1c4      	bne.n	800f620 <NetworkParams::callbackFunction(char const*)+0x2c>
 800f696:	e7f1      	b.n	800f67c <NetworkParams::callbackFunction(char const*)+0x88>
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d0ef      	beq.n	800f67c <NetworkParams::callbackFunction(char const*)+0x88>
 800f69c:	e7c0      	b.n	800f620 <NetworkParams::callbackFunction(char const*)+0x2c>
 800f69e:	4620      	mov	r0, r4
 800f6a0:	491d      	ldr	r1, [pc, #116]	; (800f718 <NetworkParams::callbackFunction(char const*)+0x124>)
 800f6a2:	aa02      	add	r2, sp, #8
 800f6a4:	f000 ff2a 	bl	80104fc <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 800f6a8:	b970      	cbnz	r0, 800f6c8 <NetworkParams::callbackFunction(char const*)+0xd4>
 800f6aa:	9a02      	ldr	r2, [sp, #8]
 800f6ac:	2a00      	cmp	r2, #0
 800f6ae:	d0b7      	beq.n	800f620 <NetworkParams::callbackFunction(char const*)+0x2c>
 800f6b0:	ba13      	rev	r3, r2
 800f6b2:	43d9      	mvns	r1, r3
 800f6b4:	ea13 0351 	ands.w	r3, r3, r1, lsr #1
 800f6b8:	d1b2      	bne.n	800f620 <NetworkParams::callbackFunction(char const*)+0x2c>
 800f6ba:	4b14      	ldr	r3, [pc, #80]	; (800f70c <NetworkParams::callbackFunction(char const*)+0x118>)
 800f6bc:	609a      	str	r2, [r3, #8]
 800f6be:	681a      	ldr	r2, [r3, #0]
 800f6c0:	f042 0204 	orr.w	r2, r2, #4
 800f6c4:	601a      	str	r2, [r3, #0]
 800f6c6:	e7ab      	b.n	800f620 <NetworkParams::callbackFunction(char const*)+0x2c>
 800f6c8:	4620      	mov	r0, r4
 800f6ca:	4914      	ldr	r1, [pc, #80]	; (800f71c <NetworkParams::callbackFunction(char const*)+0x128>)
 800f6cc:	aa02      	add	r2, sp, #8
 800f6ce:	f000 ff15 	bl	80104fc <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 800f6d2:	4d0e      	ldr	r5, [pc, #56]	; (800f70c <NetworkParams::callbackFunction(char const*)+0x118>)
 800f6d4:	b930      	cbnz	r0, 800f6e4 <NetworkParams::callbackFunction(char const*)+0xf0>
 800f6d6:	9b02      	ldr	r3, [sp, #8]
 800f6d8:	60eb      	str	r3, [r5, #12]
 800f6da:	682b      	ldr	r3, [r5, #0]
 800f6dc:	f043 0308 	orr.w	r3, r3, #8
 800f6e0:	602b      	str	r3, [r5, #0]
 800f6e2:	e79d      	b.n	800f620 <NetworkParams::callbackFunction(char const*)+0x2c>
 800f6e4:	233f      	movs	r3, #63	; 0x3f
 800f6e6:	4620      	mov	r0, r4
 800f6e8:	9303      	str	r3, [sp, #12]
 800f6ea:	490d      	ldr	r1, [pc, #52]	; (800f720 <NetworkParams::callbackFunction(char const*)+0x12c>)
 800f6ec:	ab03      	add	r3, sp, #12
 800f6ee:	f105 0215 	add.w	r2, r5, #21
 800f6f2:	f000 fe87 	bl	8010404 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800f6f6:	2800      	cmp	r0, #0
 800f6f8:	d192      	bne.n	800f620 <NetworkParams::callbackFunction(char const*)+0x2c>
 800f6fa:	9b03      	ldr	r3, [sp, #12]
 800f6fc:	442b      	add	r3, r5
 800f6fe:	7558      	strb	r0, [r3, #21]
 800f700:	682b      	ldr	r3, [r5, #0]
 800f702:	f043 0320 	orr.w	r3, r3, #32
 800f706:	e7eb      	b.n	800f6e0 <NetworkParams::callbackFunction(char const*)+0xec>
 800f708:	08014a9e 	stmdaeq	r1, {r1, r2, r3, r4, r7, r9, fp, lr}
 800f70c:	20009078 	andcs	r9, r0, r8, ror r0
 800f710:	08014a7c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r9, fp, lr}
 800f714:	08014a61 	stmdaeq	r1, {r0, r5, r6, r9, fp, lr}
 800f718:	08014a95 	stmdaeq	r1, {r0, r2, r4, r7, r9, fp, lr}
 800f71c:	08014a6c 	stmdaeq	r1, {r2, r3, r5, r6, r9, fp, lr}
 800f720:	08014a8c 	stmdaeq	r1, {r2, r3, r7, r9, fp, lr}

0800f724 <NetworkParams::staticCallbackFunction(void*, char const*)>:
 800f724:	f7ff bf66 	b.w	800f5f4 <NetworkParams::callbackFunction(char const*)>

0800f728 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)>:
 800f728:	b530      	push	{r4, r5, lr}
 800f72a:	4614      	mov	r4, r2
 800f72c:	461d      	mov	r5, r3
 800f72e:	b087      	sub	sp, #28
 800f730:	2900      	cmp	r1, #0
 800f732:	d02a      	beq.n	800f78a <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x62>
 800f734:	225e      	movs	r2, #94	; 0x5e
 800f736:	4872      	ldr	r0, [pc, #456]	; (800f900 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1d8>)
 800f738:	f001 fc83 	bl	8011042 <memmove>
 800f73c:	4622      	mov	r2, r4
 800f73e:	462b      	mov	r3, r5
 800f740:	4970      	ldr	r1, [pc, #448]	; (800f904 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1dc>)
 800f742:	a803      	add	r0, sp, #12
 800f744:	f000 fd86 	bl	8010254 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800f748:	4c6d      	ldr	r4, [pc, #436]	; (800f900 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1d8>)
 800f74a:	6823      	ldr	r3, [r4, #0]
 800f74c:	0799      	lsls	r1, r3, #30
 800f74e:	bf5f      	itttt	pl
 800f750:	4a6d      	ldrpl	r2, [pc, #436]	; (800f908 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e0>)
 800f752:	6812      	ldrpl	r2, [r2, #0]
 800f754:	6912      	ldrpl	r2, [r2, #16]
 800f756:	6062      	strpl	r2, [r4, #4]
 800f758:	075a      	lsls	r2, r3, #29
 800f75a:	bf5f      	itttt	pl
 800f75c:	4a6a      	ldrpl	r2, [pc, #424]	; (800f908 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e0>)
 800f75e:	6812      	ldrpl	r2, [r2, #0]
 800f760:	6992      	ldrpl	r2, [r2, #24]
 800f762:	60a2      	strpl	r2, [r4, #8]
 800f764:	071d      	lsls	r5, r3, #28
 800f766:	bf5f      	itttt	pl
 800f768:	4a67      	ldrpl	r2, [pc, #412]	; (800f908 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e0>)
 800f76a:	6812      	ldrpl	r2, [r2, #0]
 800f76c:	6952      	ldrpl	r2, [r2, #20]
 800f76e:	60e2      	strpl	r2, [r4, #12]
 800f770:	0698      	lsls	r0, r3, #26
 800f772:	d417      	bmi.n	800f7a4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x7c>
 800f774:	223f      	movs	r2, #63	; 0x3f
 800f776:	4b64      	ldr	r3, [pc, #400]	; (800f908 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e0>)
 800f778:	4864      	ldr	r0, [pc, #400]	; (800f90c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e4>)
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	331b      	adds	r3, #27
 800f77e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800f782:	b941      	cbnz	r1, 800f796 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x6e>
 800f784:	f001 fc74 	bl	8011070 <memset>
 800f788:	e009      	b.n	800f79e <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x76>
 800f78a:	6800      	ldr	r0, [r0, #0]
 800f78c:	495c      	ldr	r1, [pc, #368]	; (800f900 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1d8>)
 800f78e:	6803      	ldr	r3, [r0, #0]
 800f790:	68db      	ldr	r3, [r3, #12]
 800f792:	4798      	blx	r3
 800f794:	e7d2      	b.n	800f73c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x14>
 800f796:	3a01      	subs	r2, #1
 800f798:	f800 1b01 	strb.w	r1, [r0], #1
 800f79c:	d1ef      	bne.n	800f77e <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x56>
 800f79e:	2300      	movs	r3, #0
 800f7a0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800f7a4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800f7a8:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800f7ac:	7d23      	ldrb	r3, [r4, #20]
 800f7ae:	42aa      	cmp	r2, r5
 800f7b0:	6821      	ldr	r1, [r4, #0]
 800f7b2:	d21a      	bcs.n	800f7ea <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xc2>
 800f7b4:	9803      	ldr	r0, [sp, #12]
 800f7b6:	07c9      	lsls	r1, r1, #31
 800f7b8:	4410      	add	r0, r2
 800f7ba:	eba5 0502 	sub.w	r5, r5, r2
 800f7be:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800f7c2:	d404      	bmi.n	800f7ce <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xa6>
 800f7c4:	b922      	cbnz	r2, 800f7d0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xa8>
 800f7c6:	9300      	str	r3, [sp, #0]
 800f7c8:	4a51      	ldr	r2, [pc, #324]	; (800f910 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e8>)
 800f7ca:	4b52      	ldr	r3, [pc, #328]	; (800f914 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1ec>)
 800f7cc:	e003      	b.n	800f7d6 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xae>
 800f7ce:	b312      	cbz	r2, 800f816 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xee>
 800f7d0:	9300      	str	r3, [sp, #0]
 800f7d2:	4a51      	ldr	r2, [pc, #324]	; (800f918 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f0>)
 800f7d4:	4b4f      	ldr	r3, [pc, #316]	; (800f914 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1ec>)
 800f7d6:	4629      	mov	r1, r5
 800f7d8:	f7f9 fd70 	bl	80092bc <snprintf>
 800f7dc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800f7e0:	4285      	cmp	r5, r0
 800f7e2:	bfa4      	itt	ge
 800f7e4:	181b      	addge	r3, r3, r0
 800f7e6:	f8ad 3012 	strhge.w	r3, [sp, #18]
 800f7ea:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800f7ee:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800f7f2:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800f7f6:	42aa      	cmp	r2, r5
 800f7f8:	6821      	ldr	r1, [r4, #0]
 800f7fa:	d21f      	bcs.n	800f83c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x114>
 800f7fc:	9803      	ldr	r0, [sp, #12]
 800f7fe:	05c9      	lsls	r1, r1, #23
 800f800:	4410      	add	r0, r2
 800f802:	eba5 0502 	sub.w	r5, r5, r2
 800f806:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800f80a:	d408      	bmi.n	800f81e <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xf6>
 800f80c:	b94a      	cbnz	r2, 800f822 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xfa>
 800f80e:	9300      	str	r3, [sp, #0]
 800f810:	4a3f      	ldr	r2, [pc, #252]	; (800f910 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e8>)
 800f812:	4b42      	ldr	r3, [pc, #264]	; (800f91c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f4>)
 800f814:	e008      	b.n	800f828 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x100>
 800f816:	9300      	str	r3, [sp, #0]
 800f818:	4a41      	ldr	r2, [pc, #260]	; (800f920 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f8>)
 800f81a:	4b3e      	ldr	r3, [pc, #248]	; (800f914 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1ec>)
 800f81c:	e7db      	b.n	800f7d6 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xae>
 800f81e:	2a00      	cmp	r2, #0
 800f820:	d03e      	beq.n	800f8a0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x178>
 800f822:	9300      	str	r3, [sp, #0]
 800f824:	4a3c      	ldr	r2, [pc, #240]	; (800f918 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f0>)
 800f826:	4b3d      	ldr	r3, [pc, #244]	; (800f91c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f4>)
 800f828:	4629      	mov	r1, r5
 800f82a:	f7f9 fd47 	bl	80092bc <snprintf>
 800f82e:	4285      	cmp	r5, r0
 800f830:	bfa2      	ittt	ge
 800f832:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800f836:	18c0      	addge	r0, r0, r3
 800f838:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800f83c:	4939      	ldr	r1, [pc, #228]	; (800f924 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1fc>)
 800f83e:	a803      	add	r0, sp, #12
 800f840:	f000 fd8e 	bl	8010360 <PropertiesBuilder::AddComment(char const*)>
 800f844:	6823      	ldr	r3, [r4, #0]
 800f846:	6862      	ldr	r2, [r4, #4]
 800f848:	4937      	ldr	r1, [pc, #220]	; (800f928 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x200>)
 800f84a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f84e:	a803      	add	r0, sp, #12
 800f850:	f000 fd42 	bl	80102d8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 800f854:	6823      	ldr	r3, [r4, #0]
 800f856:	68a2      	ldr	r2, [r4, #8]
 800f858:	4934      	ldr	r1, [pc, #208]	; (800f92c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x204>)
 800f85a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800f85e:	a803      	add	r0, sp, #12
 800f860:	f000 fd3a 	bl	80102d8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 800f864:	6823      	ldr	r3, [r4, #0]
 800f866:	68e2      	ldr	r2, [r4, #12]
 800f868:	4931      	ldr	r1, [pc, #196]	; (800f930 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x208>)
 800f86a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800f86e:	a803      	add	r0, sp, #12
 800f870:	f000 fd32 	bl	80102d8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 800f874:	6821      	ldr	r1, [r4, #0]
 800f876:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800f87a:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 800f87e:	42a3      	cmp	r3, r4
 800f880:	d220      	bcs.n	800f8c4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x19c>
 800f882:	9803      	ldr	r0, [sp, #12]
 800f884:	f011 0f20 	tst.w	r1, #32
 800f888:	4418      	add	r0, r3
 800f88a:	eba4 0403 	sub.w	r4, r4, r3
 800f88e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800f892:	4b1e      	ldr	r3, [pc, #120]	; (800f90c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e4>)
 800f894:	d108      	bne.n	800f8a8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x180>
 800f896:	b942      	cbnz	r2, 800f8aa <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x182>
 800f898:	9300      	str	r3, [sp, #0]
 800f89a:	4a26      	ldr	r2, [pc, #152]	; (800f934 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x20c>)
 800f89c:	4b26      	ldr	r3, [pc, #152]	; (800f938 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x210>)
 800f89e:	e007      	b.n	800f8b0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x188>
 800f8a0:	9300      	str	r3, [sp, #0]
 800f8a2:	4a1f      	ldr	r2, [pc, #124]	; (800f920 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f8>)
 800f8a4:	4b1d      	ldr	r3, [pc, #116]	; (800f91c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f4>)
 800f8a6:	e7bf      	b.n	800f828 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x100>
 800f8a8:	b32a      	cbz	r2, 800f8f6 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1ce>
 800f8aa:	9300      	str	r3, [sp, #0]
 800f8ac:	4a23      	ldr	r2, [pc, #140]	; (800f93c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x214>)
 800f8ae:	4b22      	ldr	r3, [pc, #136]	; (800f938 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x210>)
 800f8b0:	4621      	mov	r1, r4
 800f8b2:	f7f9 fd03 	bl	80092bc <snprintf>
 800f8b6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800f8ba:	4284      	cmp	r4, r0
 800f8bc:	bfa4      	itt	ge
 800f8be:	181b      	addge	r3, r3, r0
 800f8c0:	f8ad 3012 	strhge.w	r3, [sp, #18]
 800f8c4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800f8c8:	b17b      	cbz	r3, 800f8ea <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1c2>
 800f8ca:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800f8ce:	9b03      	ldr	r3, [sp, #12]
 800f8d0:	4413      	add	r3, r2
 800f8d2:	227d      	movs	r2, #125	; 0x7d
 800f8d4:	f803 2c01 	strb.w	r2, [r3, #-1]
 800f8d8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800f8dc:	9903      	ldr	r1, [sp, #12]
 800f8de:	54ca      	strb	r2, [r1, r3]
 800f8e0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800f8e4:	3301      	adds	r3, #1
 800f8e6:	f8ad 3012 	strh.w	r3, [sp, #18]
 800f8ea:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800f8ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8f0:	601a      	str	r2, [r3, #0]
 800f8f2:	b007      	add	sp, #28
 800f8f4:	bd30      	pop	{r4, r5, pc}
 800f8f6:	9300      	str	r3, [sp, #0]
 800f8f8:	4a11      	ldr	r2, [pc, #68]	; (800f940 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x218>)
 800f8fa:	4b0f      	ldr	r3, [pc, #60]	; (800f938 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x210>)
 800f8fc:	e7d8      	b.n	800f8b0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x188>
 800f8fe:	bf00      	nop
 800f900:	20009078 	andcs	r9, r0, r8, ror r0
 800f904:	08014aa7 	stmdaeq	r1, {r0, r1, r2, r5, r7, r9, fp, lr}
 800f908:	20009074 	andcs	r9, r0, r4, ror r0
 800f90c:	2000908d 	andcs	r9, r0, sp, lsl #1
 800f910:	08013475 	stmdaeq	r1, {r0, r2, r4, r5, r6, sl, ip, sp}
 800f914:	08014a9e 	stmdaeq	r1, {r1, r2, r3, r4, r7, r9, fp, lr}
 800f918:	0801346c 	stmdaeq	r1, {r2, r3, r5, r6, sl, ip, sp}
 800f91c:	08014a7c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r9, fp, lr}
 800f920:	08013476 	stmdaeq	r1, {r1, r2, r4, r5, r6, sl, ip, sp}
 800f924:	08014a57 	stmdaeq	r1, {r0, r1, r2, r4, r6, r9, fp, lr}
 800f928:	08014a61 	stmdaeq	r1, {r0, r5, r6, r9, fp, lr}
 800f92c:	08014a95 	stmdaeq	r1, {r0, r2, r4, r7, r9, fp, lr}
 800f930:	08014a6c 	stmdaeq	r1, {r2, r3, r5, r6, r9, fp, lr}
 800f934:	08013488 	stmdaeq	r1, {r3, r7, sl, ip, sp}
 800f938:	08014a8c 	stmdaeq	r1, {r2, r3, r7, r9, fp, lr}
 800f93c:	0801347d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, sl, ip, sp}
 800f940:	08013489 	stmdaeq	r1, {r0, r3, r7, sl, ip, sp}

0800f944 <NetworkParams::Save(char*, unsigned int, unsigned int&)>:
 800f944:	b513      	push	{r0, r1, r4, lr}
 800f946:	6804      	ldr	r4, [r0, #0]
 800f948:	b914      	cbnz	r4, 800f950 <NetworkParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800f94a:	601c      	str	r4, [r3, #0]
 800f94c:	b002      	add	sp, #8
 800f94e:	bd10      	pop	{r4, pc}
 800f950:	9300      	str	r3, [sp, #0]
 800f952:	4613      	mov	r3, r2
 800f954:	460a      	mov	r2, r1
 800f956:	2100      	movs	r1, #0
 800f958:	f7ff fee6 	bl	800f728 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)>
 800f95c:	e7f6      	b.n	800f94c <NetworkParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800f95e <NetworkParams::Dump()>:
 800f95e:	4770      	bx	lr

0800f960 <memcpy.isra.0>:
 800f960:	3801      	subs	r0, #1
 800f962:	440a      	add	r2, r1
 800f964:	4291      	cmp	r1, r2
 800f966:	d100      	bne.n	800f96a <memcpy.isra.0+0xa>
 800f968:	4770      	bx	lr
 800f96a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f96e:	f800 3f01 	strb.w	r3, [r0, #1]!
 800f972:	e7f7      	b.n	800f964 <memcpy.isra.0+0x4>

0800f974 <arp_announce>:
 800f974:	4803      	ldr	r0, [pc, #12]	; (800f984 <arp_announce+0x10>)
 800f976:	69c3      	ldr	r3, [r0, #28]
 800f978:	b113      	cbz	r3, 800f980 <arp_announce+0xc>
 800f97a:	212a      	movs	r1, #42	; 0x2a
 800f97c:	f002 ba48 	b.w	8011e10 <emac_eth_send>
 800f980:	4770      	bx	lr
 800f982:	bf00      	nop
 800f984:	200090d8 	ldrdcs	r9, [r0], -r8

0800f988 <arp_handle_request>:
 800f988:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f98a:	2204      	movs	r2, #4
 800f98c:	f100 0126 	add.w	r1, r0, #38	; 0x26
 800f990:	4604      	mov	r4, r0
 800f992:	eb0d 0002 	add.w	r0, sp, r2
 800f996:	f7ff ffe3 	bl	800f960 <memcpy.isra.0>
 800f99a:	4b0d      	ldr	r3, [pc, #52]	; (800f9d0 <arp_handle_request+0x48>)
 800f99c:	9a01      	ldr	r2, [sp, #4]
 800f99e:	69db      	ldr	r3, [r3, #28]
 800f9a0:	429a      	cmp	r2, r3
 800f9a2:	d113      	bne.n	800f9cc <arp_handle_request+0x44>
 800f9a4:	2206      	movs	r2, #6
 800f9a6:	4d0b      	ldr	r5, [pc, #44]	; (800f9d4 <arp_handle_request+0x4c>)
 800f9a8:	18a1      	adds	r1, r4, r2
 800f9aa:	4628      	mov	r0, r5
 800f9ac:	f7ff ffd8 	bl	800f960 <memcpy.isra.0>
 800f9b0:	f104 0116 	add.w	r1, r4, #22
 800f9b4:	f105 0020 	add.w	r0, r5, #32
 800f9b8:	2206      	movs	r2, #6
 800f9ba:	f7ff ffd1 	bl	800f960 <memcpy.isra.0>
 800f9be:	69e3      	ldr	r3, [r4, #28]
 800f9c0:	212a      	movs	r1, #42	; 0x2a
 800f9c2:	4628      	mov	r0, r5
 800f9c4:	f8c5 3026 	str.w	r3, [r5, #38]	; 0x26
 800f9c8:	f002 fa22 	bl	8011e10 <emac_eth_send>
 800f9cc:	b003      	add	sp, #12
 800f9ce:	bd30      	pop	{r4, r5, pc}
 800f9d0:	200090d8 	ldrdcs	r9, [r0], -r8
 800f9d4:	20009104 	andcs	r9, r0, r4, lsl #2

0800f9d8 <arp_handle_reply>:
 800f9d8:	69c1      	ldr	r1, [r0, #28]
 800f9da:	3016      	adds	r0, #22
 800f9dc:	f000 b80a 	b.w	800f9f4 <arp_cache_update>

0800f9e0 <arp_send_request>:
 800f9e0:	4b03      	ldr	r3, [pc, #12]	; (800f9f0 <arp_send_request+0x10>)
 800f9e2:	212a      	movs	r1, #42	; 0x2a
 800f9e4:	f8c3 0026 	str.w	r0, [r3, #38]	; 0x26
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f002 ba11 	b.w	8011e10 <emac_eth_send>
 800f9ee:	bf00      	nop
 800f9f0:	20009130 	andcs	r9, r0, r0, lsr r1

0800f9f4 <arp_cache_update>:
 800f9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9f6:	4e11      	ldr	r6, [pc, #68]	; (800fa3c <arp_cache_update+0x48>)
 800f9f8:	8833      	ldrh	r3, [r6, #0]
 800f9fa:	2b20      	cmp	r3, #32
 800f9fc:	d018      	beq.n	800fa30 <arp_cache_update+0x3c>
 800f9fe:	2400      	movs	r4, #0
 800fa00:	220c      	movs	r2, #12
 800fa02:	4d0f      	ldr	r5, [pc, #60]	; (800fa40 <arp_cache_update+0x4c>)
 800fa04:	b2a7      	uxth	r7, r4
 800fa06:	42bb      	cmp	r3, r7
 800fa08:	d80b      	bhi.n	800fa22 <arp_cache_update+0x2e>
 800fa0a:	fb02 5203 	mla	r2, r2, r3, r5
 800fa0e:	1d84      	adds	r4, r0, #6
 800fa10:	3203      	adds	r2, #3
 800fa12:	42a0      	cmp	r0, r4
 800fa14:	d10d      	bne.n	800fa32 <arp_cache_update+0x3e>
 800fa16:	220c      	movs	r2, #12
 800fa18:	435a      	muls	r2, r3
 800fa1a:	3301      	adds	r3, #1
 800fa1c:	50a9      	str	r1, [r5, r2]
 800fa1e:	8033      	strh	r3, [r6, #0]
 800fa20:	e006      	b.n	800fa30 <arp_cache_update+0x3c>
 800fa22:	3401      	adds	r4, #1
 800fa24:	fb02 5704 	mla	r7, r2, r4, r5
 800fa28:	f857 7c0c 	ldr.w	r7, [r7, #-12]
 800fa2c:	428f      	cmp	r7, r1
 800fa2e:	d1e9      	bne.n	800fa04 <arp_cache_update+0x10>
 800fa30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa32:	f810 7b01 	ldrb.w	r7, [r0], #1
 800fa36:	f802 7f01 	strb.w	r7, [r2, #1]!
 800fa3a:	e7ea      	b.n	800fa12 <arp_cache_update+0x1e>
 800fa3c:	200092dc 	ldrdcs	r9, [r0], -ip
 800fa40:	2000915c 	andcs	r9, r0, ip, asr r1

0800fa44 <arp_cache_lookup>:
 800fa44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa48:	2200      	movs	r2, #0
 800fa4a:	4606      	mov	r6, r0
 800fa4c:	460c      	mov	r4, r1
 800fa4e:	200c      	movs	r0, #12
 800fa50:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800fad8 <arp_cache_lookup+0x94>
 800fa54:	fb00 f302 	mul.w	r3, r0, r2
 800fa58:	f853 1008 	ldr.w	r1, [r3, r8]
 800fa5c:	42b1      	cmp	r1, r6
 800fa5e:	d10d      	bne.n	800fa7c <arp_cache_lookup+0x38>
 800fa60:	3304      	adds	r3, #4
 800fa62:	4443      	add	r3, r8
 800fa64:	3c01      	subs	r4, #1
 800fa66:	1d9a      	adds	r2, r3, #6
 800fa68:	4293      	cmp	r3, r2
 800fa6a:	d102      	bne.n	800fa72 <arp_cache_lookup+0x2e>
 800fa6c:	4630      	mov	r0, r6
 800fa6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa72:	f813 1b01 	ldrb.w	r1, [r3], #1
 800fa76:	f804 1f01 	strb.w	r1, [r4, #1]!
 800fa7a:	e7f5      	b.n	800fa68 <arp_cache_lookup+0x24>
 800fa7c:	b111      	cbz	r1, 800fa84 <arp_cache_lookup+0x40>
 800fa7e:	3201      	adds	r2, #1
 800fa80:	2a20      	cmp	r2, #32
 800fa82:	d1e7      	bne.n	800fa54 <arp_cache_lookup+0x10>
 800fa84:	2704      	movs	r7, #4
 800fa86:	f8df a054 	ldr.w	sl, [pc, #84]	; 800fadc <arp_cache_lookup+0x98>
 800fa8a:	f8ba 5000 	ldrh.w	r5, [sl]
 800fa8e:	3f01      	subs	r7, #1
 800fa90:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 800fa94:	d101      	bne.n	800fa9a <arp_cache_lookup+0x56>
 800fa96:	463e      	mov	r6, r7
 800fa98:	e7e8      	b.n	800fa6c <arp_cache_lookup+0x28>
 800fa9a:	4630      	mov	r0, r6
 800fa9c:	f7ff ffa0 	bl	800f9e0 <arp_send_request>
 800faa0:	f44f 3900 	mov.w	r9, #131072	; 0x20000
 800faa4:	f1b9 0901 	subs.w	r9, r9, #1
 800faa8:	f8ba 3000 	ldrh.w	r3, [sl]
 800faac:	d011      	beq.n	800fad2 <arp_cache_lookup+0x8e>
 800faae:	429d      	cmp	r5, r3
 800fab0:	d00c      	beq.n	800facc <arp_cache_lookup+0x88>
 800fab2:	230c      	movs	r3, #12
 800fab4:	fb03 8505 	mla	r5, r3, r5, r8
 800fab8:	3c01      	subs	r4, #1
 800faba:	1d2b      	adds	r3, r5, #4
 800fabc:	350a      	adds	r5, #10
 800fabe:	42ab      	cmp	r3, r5
 800fac0:	d0d4      	beq.n	800fa6c <arp_cache_lookup+0x28>
 800fac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fac6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800faca:	e7f8      	b.n	800fabe <arp_cache_lookup+0x7a>
 800facc:	f7f7 fd28 	bl	8007520 <net_handle>
 800fad0:	e7e8      	b.n	800faa4 <arp_cache_lookup+0x60>
 800fad2:	429d      	cmp	r5, r3
 800fad4:	d0db      	beq.n	800fa8e <arp_cache_lookup+0x4a>
 800fad6:	e7ec      	b.n	800fab2 <arp_cache_lookup+0x6e>
 800fad8:	2000915c 	andcs	r9, r0, ip, asr r1
 800fadc:	200092dc 	ldrdcs	r9, [r0], -ip

0800fae0 <_parse_response>:
 800fae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fae4:	2400      	movs	r4, #0
 800fae6:	460d      	mov	r5, r1
 800fae8:	46a3      	mov	fp, r4
 800faea:	4627      	mov	r7, r4
 800faec:	46a2      	mov	sl, r4
 800faee:	46a1      	mov	r9, r4
 800faf0:	46a0      	mov	r8, r4
 800faf2:	4e4f      	ldr	r6, [pc, #316]	; (800fc30 <_parse_response+0x150>)
 800faf4:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 800faf8:	6833      	ldr	r3, [r6, #0]
 800fafa:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800fafe:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800fb02:	9009      	str	r0, [sp, #36]	; 0x24
 800fb04:	9402      	str	r4, [sp, #8]
 800fb06:	9407      	str	r4, [sp, #28]
 800fb08:	9308      	str	r3, [sp, #32]
 800fb0a:	f7f7 fd09 	bl	8007520 <net_handle>
 800fb0e:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 800fb12:	9300      	str	r3, [sp, #0]
 800fb14:	f44f 7209 	mov.w	r2, #548	; 0x224
 800fb18:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 800fb1c:	ab0c      	add	r3, sp, #48	; 0x30
 800fb1e:	a90d      	add	r1, sp, #52	; 0x34
 800fb20:	f7fe fe1e 	bl	800e760 <udp_recv>
 800fb24:	2800      	cmp	r0, #0
 800fb26:	d03e      	beq.n	800fba6 <_parse_response+0xc6>
 800fb28:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800fb2c:	2b43      	cmp	r3, #67	; 0x43
 800fb2e:	d13a      	bne.n	800fba6 <_parse_response+0xc6>
 800fb30:	aa14      	add	r2, sp, #80	; 0x50
 800fb32:	1e6b      	subs	r3, r5, #1
 800fb34:	1d69      	adds	r1, r5, #5
 800fb36:	4299      	cmp	r1, r3
 800fb38:	d12f      	bne.n	800fb9a <_parse_response+0xba>
 800fb3a:	2100      	movs	r1, #0
 800fb3c:	ab0d      	add	r3, sp, #52	; 0x34
 800fb3e:	181d      	adds	r5, r3, r0
 800fb40:	468c      	mov	ip, r1
 800fb42:	460e      	mov	r6, r1
 800fb44:	4608      	mov	r0, r1
 800fb46:	ab49      	add	r3, sp, #292	; 0x124
 800fb48:	42ab      	cmp	r3, r5
 800fb4a:	d337      	bcc.n	800fbbc <_parse_response+0xdc>
 800fb4c:	b141      	cbz	r1, 800fb60 <_parse_response+0x80>
 800fb4e:	4b39      	ldr	r3, [pc, #228]	; (800fc34 <_parse_response+0x154>)
 800fb50:	9a07      	ldr	r2, [sp, #28]
 800fb52:	f883 8003 	strb.w	r8, [r3, #3]
 800fb56:	709a      	strb	r2, [r3, #2]
 800fb58:	9a06      	ldr	r2, [sp, #24]
 800fb5a:	705a      	strb	r2, [r3, #1]
 800fb5c:	9a05      	ldr	r2, [sp, #20]
 800fb5e:	701a      	strb	r2, [r3, #0]
 800fb60:	f1bc 0f00 	cmp.w	ip, #0
 800fb64:	d007      	beq.n	800fb76 <_parse_response+0x96>
 800fb66:	4b34      	ldr	r3, [pc, #208]	; (800fc38 <_parse_response+0x158>)
 800fb68:	9a04      	ldr	r2, [sp, #16]
 800fb6a:	705c      	strb	r4, [r3, #1]
 800fb6c:	70da      	strb	r2, [r3, #3]
 800fb6e:	9a03      	ldr	r2, [sp, #12]
 800fb70:	709a      	strb	r2, [r3, #2]
 800fb72:	9a02      	ldr	r2, [sp, #8]
 800fb74:	701a      	strb	r2, [r3, #0]
 800fb76:	b13e      	cbz	r6, 800fb88 <_parse_response+0xa8>
 800fb78:	4b30      	ldr	r3, [pc, #192]	; (800fc3c <_parse_response+0x15c>)
 800fb7a:	70df      	strb	r7, [r3, #3]
 800fb7c:	f883 a002 	strb.w	sl, [r3, #2]
 800fb80:	f883 9001 	strb.w	r9, [r3, #1]
 800fb84:	f883 b000 	strb.w	fp, [r3]
 800fb88:	2802      	cmp	r0, #2
 800fb8a:	d102      	bne.n	800fb92 <_parse_response+0xb2>
 800fb8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fb8e:	4b2c      	ldr	r3, [pc, #176]	; (800fc40 <_parse_response+0x160>)
 800fb90:	601a      	str	r2, [r3, #0]
 800fb92:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 800fb96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb9a:	f812 cb01 	ldrb.w	ip, [r2], #1
 800fb9e:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800fba2:	45e6      	cmp	lr, ip
 800fba4:	d0c7      	beq.n	800fb36 <_parse_response+0x56>
 800fba6:	6833      	ldr	r3, [r6, #0]
 800fba8:	9a08      	ldr	r2, [sp, #32]
 800fbaa:	1a9b      	subs	r3, r3, r2
 800fbac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800fbb0:	d3ab      	bcc.n	800fb0a <_parse_response+0x2a>
 800fbb2:	2800      	cmp	r0, #0
 800fbb4:	d1c1      	bne.n	800fb3a <_parse_response+0x5a>
 800fbb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fbba:	e7ea      	b.n	800fb92 <_parse_response+0xb2>
 800fbbc:	781a      	ldrb	r2, [r3, #0]
 800fbbe:	2a35      	cmp	r2, #53	; 0x35
 800fbc0:	d011      	beq.n	800fbe6 <_parse_response+0x106>
 800fbc2:	d808      	bhi.n	800fbd6 <_parse_response+0xf6>
 800fbc4:	2a01      	cmp	r2, #1
 800fbc6:	d011      	beq.n	800fbec <_parse_response+0x10c>
 800fbc8:	2a03      	cmp	r2, #3
 800fbca:	d019      	beq.n	800fc00 <_parse_response+0x120>
 800fbcc:	b14a      	cbz	r2, 800fbe2 <_parse_response+0x102>
 800fbce:	1c9a      	adds	r2, r3, #2
 800fbd0:	785b      	ldrb	r3, [r3, #1]
 800fbd2:	4413      	add	r3, r2
 800fbd4:	e7b8      	b.n	800fb48 <_parse_response+0x68>
 800fbd6:	2a36      	cmp	r2, #54	; 0x36
 800fbd8:	d01f      	beq.n	800fc1a <_parse_response+0x13a>
 800fbda:	2aff      	cmp	r2, #255	; 0xff
 800fbdc:	d1f7      	bne.n	800fbce <_parse_response+0xee>
 800fbde:	462b      	mov	r3, r5
 800fbe0:	e7b2      	b.n	800fb48 <_parse_response+0x68>
 800fbe2:	3301      	adds	r3, #1
 800fbe4:	e7b0      	b.n	800fb48 <_parse_response+0x68>
 800fbe6:	7898      	ldrb	r0, [r3, #2]
 800fbe8:	3303      	adds	r3, #3
 800fbea:	e7ad      	b.n	800fb48 <_parse_response+0x68>
 800fbec:	f893 b002 	ldrb.w	fp, [r3, #2]
 800fbf0:	f893 9003 	ldrb.w	r9, [r3, #3]
 800fbf4:	f893 a004 	ldrb.w	sl, [r3, #4]
 800fbf8:	795f      	ldrb	r7, [r3, #5]
 800fbfa:	4616      	mov	r6, r2
 800fbfc:	3306      	adds	r3, #6
 800fbfe:	e7a3      	b.n	800fb48 <_parse_response+0x68>
 800fc00:	789a      	ldrb	r2, [r3, #2]
 800fc02:	78dc      	ldrb	r4, [r3, #3]
 800fc04:	9202      	str	r2, [sp, #8]
 800fc06:	791a      	ldrb	r2, [r3, #4]
 800fc08:	f04f 0c01 	mov.w	ip, #1
 800fc0c:	9203      	str	r2, [sp, #12]
 800fc0e:	795a      	ldrb	r2, [r3, #5]
 800fc10:	9204      	str	r2, [sp, #16]
 800fc12:	785a      	ldrb	r2, [r3, #1]
 800fc14:	4413      	add	r3, r2
 800fc16:	3302      	adds	r3, #2
 800fc18:	e796      	b.n	800fb48 <_parse_response+0x68>
 800fc1a:	789a      	ldrb	r2, [r3, #2]
 800fc1c:	f893 8005 	ldrb.w	r8, [r3, #5]
 800fc20:	9205      	str	r2, [sp, #20]
 800fc22:	78da      	ldrb	r2, [r3, #3]
 800fc24:	2101      	movs	r1, #1
 800fc26:	9206      	str	r2, [sp, #24]
 800fc28:	791a      	ldrb	r2, [r3, #4]
 800fc2a:	3306      	adds	r3, #6
 800fc2c:	9207      	str	r2, [sp, #28]
 800fc2e:	e78b      	b.n	800fb48 <_parse_response+0x68>
 800fc30:	200097ac 	andcs	r9, r0, ip, lsr #15
 800fc34:	20009510 	andcs	r9, r0, r0, lsl r5
 800fc38:	200092e0 	andcs	r9, r0, r0, ror #5
 800fc3c:	200092e8 	andcs	r9, r0, r8, ror #5
 800fc40:	200092e4 	andcs	r9, r0, r4, ror #5

0800fc44 <memcpy.isra.0>:
 800fc44:	3801      	subs	r0, #1
 800fc46:	440a      	add	r2, r1
 800fc48:	4291      	cmp	r1, r2
 800fc4a:	d100      	bne.n	800fc4e <memcpy.isra.0+0xa>
 800fc4c:	4770      	bx	lr
 800fc4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc52:	f800 3f01 	strb.w	r3, [r0, #1]!
 800fc56:	e7f7      	b.n	800fc48 <memcpy.isra.0+0x4>

0800fc58 <dhcp_client>:
 800fc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc5c:	b087      	sub	sp, #28
 800fc5e:	9203      	str	r2, [sp, #12]
 800fc60:	4a77      	ldr	r2, [pc, #476]	; (800fe40 <dhcp_client+0x1e8>)
 800fc62:	460f      	mov	r7, r1
 800fc64:	4605      	mov	r5, r0
 800fc66:	f44f 7309 	mov.w	r3, #548	; 0x224
 800fc6a:	4614      	mov	r4, r2
 800fc6c:	2100      	movs	r1, #0
 800fc6e:	3b01      	subs	r3, #1
 800fc70:	f802 1b01 	strb.w	r1, [r2], #1
 800fc74:	d1fb      	bne.n	800fc6e <dhcp_client+0x16>
 800fc76:	f240 1301 	movw	r3, #257	; 0x101
 800fc7a:	2206      	movs	r2, #6
 800fc7c:	4629      	mov	r1, r5
 800fc7e:	4871      	ldr	r0, [pc, #452]	; (800fe44 <dhcp_client+0x1ec>)
 800fc80:	8023      	strh	r3, [r4, #0]
 800fc82:	70a2      	strb	r2, [r4, #2]
 800fc84:	f7ff ffde 	bl	800fc44 <memcpy.isra.0>
 800fc88:	4b6f      	ldr	r3, [pc, #444]	; (800fe48 <dhcp_client+0x1f0>)
 800fc8a:	2044      	movs	r0, #68	; 0x44
 800fc8c:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 800fc90:	f240 1335 	movw	r3, #309	; 0x135
 800fc94:	f8a4 30f0 	strh.w	r3, [r4, #240]	; 0xf0
 800fc98:	f7fe fd28 	bl	800e6ec <udp_bind>
 800fc9c:	1e06      	subs	r6, r0, #0
 800fc9e:	f2c0 80c9 	blt.w	800fe34 <dhcp_client+0x1dc>
 800fca2:	f04f 0915 	mov.w	r9, #21
 800fca6:	f8df a198 	ldr.w	sl, [pc, #408]	; 800fe40 <dhcp_client+0x1e8>
 800fcaa:	f1b9 0901 	subs.w	r9, r9, #1
 800fcae:	d11f      	bne.n	800fcf0 <dhcp_client+0x98>
 800fcb0:	464c      	mov	r4, r9
 800fcb2:	2044      	movs	r0, #68	; 0x44
 800fcb4:	f7fe fd34 	bl	800e720 <udp_unbind>
 800fcb8:	2c00      	cmp	r4, #0
 800fcba:	f000 80be 	beq.w	800fe3a <dhcp_client+0x1e2>
 800fcbe:	2204      	movs	r2, #4
 800fcc0:	4962      	ldr	r1, [pc, #392]	; (800fe4c <dhcp_client+0x1f4>)
 800fcc2:	a805      	add	r0, sp, #20
 800fcc4:	f7ff ffbe 	bl	800fc44 <memcpy.isra.0>
 800fcc8:	9b05      	ldr	r3, [sp, #20]
 800fcca:	2204      	movs	r2, #4
 800fccc:	4960      	ldr	r1, [pc, #384]	; (800fe50 <dhcp_client+0x1f8>)
 800fcce:	603b      	str	r3, [r7, #0]
 800fcd0:	a805      	add	r0, sp, #20
 800fcd2:	f7ff ffb7 	bl	800fc44 <memcpy.isra.0>
 800fcd6:	9b05      	ldr	r3, [sp, #20]
 800fcd8:	a805      	add	r0, sp, #20
 800fcda:	60bb      	str	r3, [r7, #8]
 800fcdc:	2204      	movs	r2, #4
 800fcde:	495d      	ldr	r1, [pc, #372]	; (800fe54 <dhcp_client+0x1fc>)
 800fce0:	f7ff ffb0 	bl	800fc44 <memcpy.isra.0>
 800fce4:	2000      	movs	r0, #0
 800fce6:	9b05      	ldr	r3, [sp, #20]
 800fce8:	607b      	str	r3, [r7, #4]
 800fcea:	b007      	add	sp, #28
 800fcec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcf0:	f643 5301 	movw	r3, #15617	; 0x3d01
 800fcf4:	f240 1807 	movw	r8, #263	; 0x107
 800fcf8:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 800fcfc:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 800fd00:	782b      	ldrb	r3, [r5, #0]
 800fd02:	4a55      	ldr	r2, [pc, #340]	; (800fe58 <dhcp_client+0x200>)
 800fd04:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 800fd08:	786b      	ldrb	r3, [r5, #1]
 800fd0a:	fa5f fb86 	uxtb.w	fp, r6
 800fd0e:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 800fd12:	78ab      	ldrb	r3, [r5, #2]
 800fd14:	4651      	mov	r1, sl
 800fd16:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 800fd1a:	78eb      	ldrb	r3, [r5, #3]
 800fd1c:	4658      	mov	r0, fp
 800fd1e:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 800fd22:	792b      	ldrb	r3, [r5, #4]
 800fd24:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 800fd28:	796b      	ldrb	r3, [r5, #5]
 800fd2a:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 800fd2e:	4b4b      	ldr	r3, [pc, #300]	; (800fe5c <dhcp_client+0x204>)
 800fd30:	e9c4 233f 	strd	r2, r3, [r4, #252]	; 0xfc
 800fd34:	23ff      	movs	r3, #255	; 0xff
 800fd36:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800fd3a:	2343      	movs	r3, #67	; 0x43
 800fd3c:	f240 1205 	movw	r2, #261	; 0x105
 800fd40:	9300      	str	r3, [sp, #0]
 800fd42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fd46:	f7fe fd67 	bl	800e818 <udp_send>
 800fd4a:	4629      	mov	r1, r5
 800fd4c:	4630      	mov	r0, r6
 800fd4e:	f7ff fec7 	bl	800fae0 <_parse_response>
 800fd52:	2802      	cmp	r0, #2
 800fd54:	d1a9      	bne.n	800fcaa <dhcp_client+0x52>
 800fd56:	f643 5303 	movw	r3, #15619	; 0x3d03
 800fd5a:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 800fd5e:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 800fd62:	782b      	ldrb	r3, [r5, #0]
 800fd64:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800fe60 <dhcp_client+0x208>
 800fd68:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 800fd6c:	786b      	ldrb	r3, [r5, #1]
 800fd6e:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 800fd72:	78ab      	ldrb	r3, [r5, #2]
 800fd74:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 800fd78:	78eb      	ldrb	r3, [r5, #3]
 800fd7a:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 800fd7e:	792b      	ldrb	r3, [r5, #4]
 800fd80:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 800fd84:	796b      	ldrb	r3, [r5, #5]
 800fd86:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 800fd8a:	f240 4332 	movw	r3, #1074	; 0x432
 800fd8e:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
 800fd92:	4b2e      	ldr	r3, [pc, #184]	; (800fe4c <dhcp_client+0x1f4>)
 800fd94:	881a      	ldrh	r2, [r3, #0]
 800fd96:	885b      	ldrh	r3, [r3, #2]
 800fd98:	f8a4 20fe 	strh.w	r2, [r4, #254]	; 0xfe
 800fd9c:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 800fda0:	f240 4336 	movw	r3, #1078	; 0x436
 800fda4:	f8a4 3102 	strh.w	r3, [r4, #258]	; 0x102
 800fda8:	4b2e      	ldr	r3, [pc, #184]	; (800fe64 <dhcp_client+0x20c>)
 800fdaa:	221e      	movs	r2, #30
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 800fdb2:	230c      	movs	r3, #12
 800fdb4:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
 800fdb8:	9b03      	ldr	r3, [sp, #12]
 800fdba:	1e58      	subs	r0, r3, #1
 800fdbc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800fdc0:	f1a2 0e1e 	sub.w	lr, r2, #30
 800fdc4:	1c51      	adds	r1, r2, #1
 800fdc6:	bb8b      	cbnz	r3, 800fe2c <dhcp_client+0x1d4>
 800fdc8:	2037      	movs	r0, #55	; 0x37
 800fdca:	18a3      	adds	r3, r4, r2
 800fdcc:	f883 00ec 	strb.w	r0, [r3, #236]	; 0xec
 800fdd0:	2006      	movs	r0, #6
 800fdd2:	4421      	add	r1, r4
 800fdd4:	f881 00ec 	strb.w	r0, [r1, #236]	; 0xec
 800fdd8:	2103      	movs	r1, #3
 800fdda:	f883 10ef 	strb.w	r1, [r3, #239]	; 0xef
 800fdde:	210f      	movs	r1, #15
 800fde0:	f883 10f1 	strb.w	r1, [r3, #241]	; 0xf1
 800fde4:	213a      	movs	r1, #58	; 0x3a
 800fde6:	f883 10f2 	strb.w	r1, [r3, #242]	; 0xf2
 800fdea:	213b      	movs	r1, #59	; 0x3b
 800fdec:	f04f 0801 	mov.w	r8, #1
 800fdf0:	f883 10f3 	strb.w	r1, [r3, #243]	; 0xf3
 800fdf4:	21ff      	movs	r1, #255	; 0xff
 800fdf6:	f883 00f0 	strb.w	r0, [r3, #240]	; 0xf0
 800fdfa:	f883 10f4 	strb.w	r1, [r3, #244]	; 0xf4
 800fdfe:	f883 80ee 	strb.w	r8, [r3, #238]	; 0xee
 800fe02:	2343      	movs	r3, #67	; 0x43
 800fe04:	32f5      	adds	r2, #245	; 0xf5
 800fe06:	f884 e109 	strb.w	lr, [r4, #265]	; 0x109
 800fe0a:	4651      	mov	r1, sl
 800fe0c:	9300      	str	r3, [sp, #0]
 800fe0e:	b292      	uxth	r2, r2
 800fe10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fe14:	4658      	mov	r0, fp
 800fe16:	f7fe fcff 	bl	800e818 <udp_send>
 800fe1a:	4629      	mov	r1, r5
 800fe1c:	4630      	mov	r0, r6
 800fe1e:	f7ff fe5f 	bl	800fae0 <_parse_response>
 800fe22:	2805      	cmp	r0, #5
 800fe24:	f47f af41 	bne.w	800fcaa <dhcp_client+0x52>
 800fe28:	4644      	mov	r4, r8
 800fe2a:	e742      	b.n	800fcb2 <dhcp_client+0x5a>
 800fe2c:	460a      	mov	r2, r1
 800fe2e:	f80c 3b01 	strb.w	r3, [ip], #1
 800fe32:	e7c3      	b.n	800fdbc <dhcp_client+0x164>
 800fe34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe38:	e757      	b.n	800fcea <dhcp_client+0x92>
 800fe3a:	f06f 0001 	mvn.w	r0, #1
 800fe3e:	e754      	b.n	800fcea <dhcp_client+0x92>
 800fe40:	200092ec 	andcs	r9, r0, ip, ror #5
 800fe44:	20009308 	andcs	r9, r0, r8, lsl #6
 800fe48:	63538263 	cmpvs	r3, #805306374	; 0x30000006
 800fe4c:	200092e4 	andcs	r9, r0, r4, ror #5
 800fe50:	200092e0 	andcs	r9, r0, r0, ror #5
 800fe54:	200092e8 	andcs	r9, r0, r8, ror #5
 800fe58:	03010637 	movweq	r0, #5687	; 0x1637
 800fe5c:	3b3a0f06 	blcc	8e93a7c <__exidx_end+0xe7ea3c>
 800fe60:	200093f6 	strdcs	r9, [r0], -r6
 800fe64:	20009510 	andcs	r9, r0, r0, lsl r5

0800fe68 <dhcp_client_release>:
 800fe68:	b507      	push	{r0, r1, r2, lr}
 800fe6a:	2044      	movs	r0, #68	; 0x44
 800fe6c:	f7fe fc3e 	bl	800e6ec <udp_bind>
 800fe70:	f243 6307 	movw	r3, #13831	; 0x3607
 800fe74:	4911      	ldr	r1, [pc, #68]	; (800febc <dhcp_client_release+0x54>)
 800fe76:	b2c0      	uxtb	r0, r0
 800fe78:	f8a1 30f2 	strh.w	r3, [r1, #242]	; 0xf2
 800fe7c:	2304      	movs	r3, #4
 800fe7e:	f881 30f4 	strb.w	r3, [r1, #244]	; 0xf4
 800fe82:	4b0f      	ldr	r3, [pc, #60]	; (800fec0 <dhcp_client_release+0x58>)
 800fe84:	781a      	ldrb	r2, [r3, #0]
 800fe86:	f881 20f5 	strb.w	r2, [r1, #245]	; 0xf5
 800fe8a:	785a      	ldrb	r2, [r3, #1]
 800fe8c:	f881 20f6 	strb.w	r2, [r1, #246]	; 0xf6
 800fe90:	789a      	ldrb	r2, [r3, #2]
 800fe92:	78db      	ldrb	r3, [r3, #3]
 800fe94:	f881 20f7 	strb.w	r2, [r1, #247]	; 0xf7
 800fe98:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
 800fe9c:	23ff      	movs	r3, #255	; 0xff
 800fe9e:	f881 30f9 	strb.w	r3, [r1, #249]	; 0xf9
 800fea2:	2343      	movs	r3, #67	; 0x43
 800fea4:	22fa      	movs	r2, #250	; 0xfa
 800fea6:	9300      	str	r3, [sp, #0]
 800fea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800feac:	f7fe fcb4 	bl	800e818 <udp_send>
 800feb0:	2044      	movs	r0, #68	; 0x44
 800feb2:	b003      	add	sp, #12
 800feb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800feb8:	f7fe bc32 	b.w	800e720 <udp_unbind>
 800febc:	200092ec 	andcs	r9, r0, ip, ror #5
 800fec0:	20009510 	andcs	r9, r0, r0, lsl r5

0800fec4 <memcpy.isra.0>:
 800fec4:	3801      	subs	r0, #1
 800fec6:	440a      	add	r2, r1
 800fec8:	4291      	cmp	r1, r2
 800feca:	d100      	bne.n	800fece <memcpy.isra.0+0xa>
 800fecc:	4770      	bx	lr
 800fece:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fed2:	f800 3f01 	strb.w	r3, [r0, #1]!
 800fed6:	e7f7      	b.n	800fec8 <memcpy.isra.0+0x4>

0800fed8 <_send_report>:
 800fed8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800feda:	491c      	ldr	r1, [pc, #112]	; (800ff4c <_send_report+0x74>)
 800fedc:	4c1c      	ldr	r4, [pc, #112]	; (800ff50 <_send_report+0x78>)
 800fede:	f3c0 2306 	ubfx	r3, r0, #8, #7
 800fee2:	9001      	str	r0, [sp, #4]
 800fee4:	70cb      	strb	r3, [r1, #3]
 800fee6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800feea:	f3c0 6007 	ubfx	r0, r0, #24, #8
 800feee:	710b      	strb	r3, [r1, #4]
 800fef0:	7148      	strb	r0, [r1, #5]
 800fef2:	2206      	movs	r2, #6
 800fef4:	4620      	mov	r0, r4
 800fef6:	f7ff ffe5 	bl	800fec4 <memcpy.isra.0>
 800fefa:	2204      	movs	r2, #4
 800fefc:	2700      	movs	r7, #0
 800fefe:	4d15      	ldr	r5, [pc, #84]	; (800ff54 <_send_report+0x7c>)
 800ff00:	eb0d 0102 	add.w	r1, sp, r2
 800ff04:	882b      	ldrh	r3, [r5, #0]
 800ff06:	f104 001e 	add.w	r0, r4, #30
 800ff0a:	f104 060e 	add.w	r6, r4, #14
 800ff0e:	8263      	strh	r3, [r4, #18]
 800ff10:	f7ff ffd8 	bl	800fec4 <memcpy.isra.0>
 800ff14:	2118      	movs	r1, #24
 800ff16:	4630      	mov	r0, r6
 800ff18:	8327      	strh	r7, [r4, #24]
 800ff1a:	f000 f8c6 	bl	80100aa <net_chksum>
 800ff1e:	2204      	movs	r2, #4
 800ff20:	8320      	strh	r0, [r4, #24]
 800ff22:	eb0d 0102 	add.w	r1, sp, r2
 800ff26:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 800ff2a:	f7ff ffcb 	bl	800fec4 <memcpy.isra.0>
 800ff2e:	2120      	movs	r1, #32
 800ff30:	4630      	mov	r0, r6
 800ff32:	8527      	strh	r7, [r4, #40]	; 0x28
 800ff34:	f000 f8b9 	bl	80100aa <net_chksum>
 800ff38:	212e      	movs	r1, #46	; 0x2e
 800ff3a:	8520      	strh	r0, [r4, #40]	; 0x28
 800ff3c:	4620      	mov	r0, r4
 800ff3e:	f001 ff67 	bl	8011e10 <emac_eth_send>
 800ff42:	882b      	ldrh	r3, [r5, #0]
 800ff44:	3301      	adds	r3, #1
 800ff46:	802b      	strh	r3, [r5, #0]
 800ff48:	b003      	add	sp, #12
 800ff4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff4c:	2000966c 	andcs	r9, r0, ip, ror #12
 800ff50:	20009674 	andcs	r9, r0, r4, ror r6
 800ff54:	20009634 	andcs	r9, r0, r4, lsr r6

0800ff58 <igmp_set_ip>:
 800ff58:	b507      	push	{r0, r1, r2, lr}
 800ff5a:	2204      	movs	r2, #4
 800ff5c:	6803      	ldr	r3, [r0, #0]
 800ff5e:	eb0d 0102 	add.w	r1, sp, r2
 800ff62:	4806      	ldr	r0, [pc, #24]	; (800ff7c <igmp_set_ip+0x24>)
 800ff64:	9301      	str	r3, [sp, #4]
 800ff66:	f7ff ffad 	bl	800fec4 <memcpy.isra.0>
 800ff6a:	2204      	movs	r2, #4
 800ff6c:	4804      	ldr	r0, [pc, #16]	; (800ff80 <igmp_set_ip+0x28>)
 800ff6e:	eb0d 0102 	add.w	r1, sp, r2
 800ff72:	f7ff ffa7 	bl	800fec4 <memcpy.isra.0>
 800ff76:	b003      	add	sp, #12
 800ff78:	f85d fb04 	ldr.w	pc, [sp], #4
 800ff7c:	2000968e 	andcs	r9, r0, lr, lsl #13
 800ff80:	20009656 	andcs	r9, r0, r6, asr r6

0800ff84 <igmp_timer>:
 800ff84:	b570      	push	{r4, r5, r6, lr}
 800ff86:	2500      	movs	r5, #0
 800ff88:	2602      	movs	r6, #2
 800ff8a:	4c0a      	ldr	r4, [pc, #40]	; (800ffb4 <igmp_timer+0x30>)
 800ff8c:	7963      	ldrb	r3, [r4, #5]
 800ff8e:	2b01      	cmp	r3, #1
 800ff90:	d109      	bne.n	800ffa6 <igmp_timer+0x22>
 800ff92:	7923      	ldrb	r3, [r4, #4]
 800ff94:	b13b      	cbz	r3, 800ffa6 <igmp_timer+0x22>
 800ff96:	3b01      	subs	r3, #1
 800ff98:	b2db      	uxtb	r3, r3
 800ff9a:	7123      	strb	r3, [r4, #4]
 800ff9c:	b91b      	cbnz	r3, 800ffa6 <igmp_timer+0x22>
 800ff9e:	6820      	ldr	r0, [r4, #0]
 800ffa0:	f7ff ff9a 	bl	800fed8 <_send_report>
 800ffa4:	7166      	strb	r6, [r4, #5]
 800ffa6:	3501      	adds	r5, #1
 800ffa8:	2d24      	cmp	r5, #36	; 0x24
 800ffaa:	f104 0408 	add.w	r4, r4, #8
 800ffae:	d1ed      	bne.n	800ff8c <igmp_timer+0x8>
 800ffb0:	bd70      	pop	{r4, r5, r6, pc}
 800ffb2:	bf00      	nop
 800ffb4:	20009514 	andcs	r9, r0, r4, lsl r5

0800ffb8 <igmp_join>:
 800ffb8:	b538      	push	{r3, r4, r5, lr}
 800ffba:	f000 03e0 	and.w	r3, r0, #224	; 0xe0
 800ffbe:	2be0      	cmp	r3, #224	; 0xe0
 800ffc0:	d11b      	bne.n	800fffa <igmp_join+0x42>
 800ffc2:	4911      	ldr	r1, [pc, #68]	; (8010008 <igmp_join+0x50>)
 800ffc4:	680c      	ldr	r4, [r1, #0]
 800ffc6:	2c24      	cmp	r4, #36	; 0x24
 800ffc8:	d01a      	beq.n	8010000 <igmp_join+0x48>
 800ffca:	2300      	movs	r3, #0
 800ffcc:	4a0f      	ldr	r2, [pc, #60]	; (801000c <igmp_join+0x54>)
 800ffce:	429c      	cmp	r4, r3
 800ffd0:	dc0d      	bgt.n	800ffee <igmp_join+0x36>
 800ffd2:	f44f 7381 	mov.w	r3, #258	; 0x102
 800ffd6:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
 800ffda:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800ffde:	8093      	strh	r3, [r2, #4]
 800ffe0:	1c63      	adds	r3, r4, #1
 800ffe2:	600b      	str	r3, [r1, #0]
 800ffe4:	f7ff ff78 	bl	800fed8 <_send_report>
 800ffe8:	4623      	mov	r3, r4
 800ffea:	4618      	mov	r0, r3
 800ffec:	bd38      	pop	{r3, r4, r5, pc}
 800ffee:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800fff2:	4285      	cmp	r5, r0
 800fff4:	d0f9      	beq.n	800ffea <igmp_join+0x32>
 800fff6:	3301      	adds	r3, #1
 800fff8:	e7e9      	b.n	800ffce <igmp_join+0x16>
 800fffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fffe:	e7f4      	b.n	800ffea <igmp_join+0x32>
 8010000:	f06f 0301 	mvn.w	r3, #1
 8010004:	e7f1      	b.n	800ffea <igmp_join+0x32>
 8010006:	bf00      	nop
 8010008:	20009638 	andcs	r9, r0, r8, lsr r6
 801000c:	20009514 	andcs	r9, r0, r4, lsl r5

08010010 <igmp_leave>:
 8010010:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010014:	2600      	movs	r6, #0
 8010016:	4f1c      	ldr	r7, [pc, #112]	; (8010088 <igmp_leave+0x78>)
 8010018:	f857 3036 	ldr.w	r3, [r7, r6, lsl #3]
 801001c:	4283      	cmp	r3, r0
 801001e:	d007      	beq.n	8010030 <igmp_leave+0x20>
 8010020:	3601      	adds	r6, #1
 8010022:	2e24      	cmp	r6, #36	; 0x24
 8010024:	d1f8      	bne.n	8010018 <igmp_leave+0x8>
 8010026:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801002a:	b002      	add	sp, #8
 801002c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010030:	2400      	movs	r4, #0
 8010032:	f8df 8058 	ldr.w	r8, [pc, #88]	; 801008c <igmp_leave+0x7c>
 8010036:	4d16      	ldr	r5, [pc, #88]	; (8010090 <igmp_leave+0x80>)
 8010038:	f8b8 3000 	ldrh.w	r3, [r8]
 801003c:	2118      	movs	r1, #24
 801003e:	9001      	str	r0, [sp, #4]
 8010040:	4814      	ldr	r0, [pc, #80]	; (8010094 <igmp_leave+0x84>)
 8010042:	826b      	strh	r3, [r5, #18]
 8010044:	832c      	strh	r4, [r5, #24]
 8010046:	f000 f830 	bl	80100aa <net_chksum>
 801004a:	2204      	movs	r2, #4
 801004c:	8328      	strh	r0, [r5, #24]
 801004e:	eb0d 0102 	add.w	r1, sp, r2
 8010052:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 8010056:	f7ff ff35 	bl	800fec4 <memcpy.isra.0>
 801005a:	2120      	movs	r1, #32
 801005c:	f105 000e 	add.w	r0, r5, #14
 8010060:	852c      	strh	r4, [r5, #40]	; 0x28
 8010062:	f000 f822 	bl	80100aa <net_chksum>
 8010066:	212e      	movs	r1, #46	; 0x2e
 8010068:	8528      	strh	r0, [r5, #40]	; 0x28
 801006a:	4628      	mov	r0, r5
 801006c:	f001 fed0 	bl	8011e10 <emac_eth_send>
 8010070:	f8b8 3000 	ldrh.w	r3, [r8]
 8010074:	f847 4036 	str.w	r4, [r7, r6, lsl #3]
 8010078:	3301      	adds	r3, #1
 801007a:	eb07 07c6 	add.w	r7, r7, r6, lsl #3
 801007e:	4620      	mov	r0, r4
 8010080:	f8a8 3000 	strh.w	r3, [r8]
 8010084:	80bc      	strh	r4, [r7, #4]
 8010086:	e7d0      	b.n	801002a <igmp_leave+0x1a>
 8010088:	20009514 	andcs	r9, r0, r4, lsl r5
 801008c:	20009634 	andcs	r9, r0, r4, lsr r6
 8010090:	2000963c 	andcs	r9, r0, ip, lsr r6
 8010094:	20009682 	andcs	r9, r0, r2, lsl #13

08010098 <ip_set_ip>:
 8010098:	b510      	push	{r4, lr}
 801009a:	4604      	mov	r4, r0
 801009c:	f7fe fb06 	bl	800e6ac <udp_set_ip>
 80100a0:	4620      	mov	r0, r4
 80100a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100a6:	f7ff bf57 	b.w	800ff58 <igmp_set_ip>

080100aa <net_chksum>:
 80100aa:	2300      	movs	r3, #0
 80100ac:	f021 0201 	bic.w	r2, r1, #1
 80100b0:	b530      	push	{r4, r5, lr}
 80100b2:	1884      	adds	r4, r0, r2
 80100b4:	42a0      	cmp	r0, r4
 80100b6:	d10b      	bne.n	80100d0 <net_chksum+0x26>
 80100b8:	4291      	cmp	r1, r2
 80100ba:	d004      	beq.n	80100c6 <net_chksum+0x1c>
 80100bc:	7802      	ldrb	r2, [r0, #0]
 80100be:	0212      	lsls	r2, r2, #8
 80100c0:	ba52      	rev16	r2, r2
 80100c2:	b292      	uxth	r2, r2
 80100c4:	4413      	add	r3, r2
 80100c6:	0c1a      	lsrs	r2, r3, #16
 80100c8:	d106      	bne.n	80100d8 <net_chksum+0x2e>
 80100ca:	43d8      	mvns	r0, r3
 80100cc:	b280      	uxth	r0, r0
 80100ce:	bd30      	pop	{r4, r5, pc}
 80100d0:	f830 5b02 	ldrh.w	r5, [r0], #2
 80100d4:	442b      	add	r3, r5
 80100d6:	e7ed      	b.n	80100b4 <net_chksum+0xa>
 80100d8:	b29b      	uxth	r3, r3
 80100da:	e7f3      	b.n	80100c4 <net_chksum+0x1a>

080100dc <memcpy.isra.0>:
 80100dc:	3801      	subs	r0, #1
 80100de:	440a      	add	r2, r1
 80100e0:	4291      	cmp	r1, r2
 80100e2:	d100      	bne.n	80100e6 <memcpy.isra.0+0xa>
 80100e4:	4770      	bx	lr
 80100e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80100ea:	f800 3f01 	strb.w	r3, [r0, #1]!
 80100ee:	e7f7      	b.n	80100e0 <memcpy.isra.0+0x4>

080100f0 <properties::convert_json_file(char*, unsigned short, bool)>:
 80100f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100f4:	4603      	mov	r3, r0
 80100f6:	7800      	ldrb	r0, [r0, #0]
 80100f8:	287b      	cmp	r0, #123	; 0x7b
 80100fa:	f040 80a2 	bne.w	8010242 <properties::convert_json_file(char*, unsigned short, bool)+0x152>
 80100fe:	b17a      	cbz	r2, 8010120 <properties::convert_json_file(char*, unsigned short, bool)+0x30>
 8010100:	2401      	movs	r4, #1
 8010102:	461e      	mov	r6, r3
 8010104:	4620      	mov	r0, r4
 8010106:	2a00      	cmp	r2, #0
 8010108:	bf0c      	ite	eq
 801010a:	f04f 0c0a 	moveq.w	ip, #10
 801010e:	f04f 0c00 	movne.w	ip, #0
 8010112:	273d      	movs	r7, #61	; 0x3d
 8010114:	42a1      	cmp	r1, r4
 8010116:	d850      	bhi.n	80101ba <properties::convert_json_file(char*, unsigned short, bool)+0xca>
 8010118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801011c:	463c      	mov	r4, r7
 801011e:	e7f2      	b.n	8010106 <properties::convert_json_file(char*, unsigned short, bool)+0x16>
 8010120:	2023      	movs	r0, #35	; 0x23
 8010122:	f803 0b01 	strb.w	r0, [r3], #1
 8010126:	461c      	mov	r4, r3
 8010128:	2701      	movs	r7, #1
 801012a:	42b9      	cmp	r1, r7
 801012c:	d811      	bhi.n	8010152 <properties::convert_json_file(char*, unsigned short, bool)+0x62>
 801012e:	2001      	movs	r0, #1
 8010130:	461e      	mov	r6, r3
 8010132:	230a      	movs	r3, #10
 8010134:	4625      	mov	r5, r4
 8010136:	f806 3b01 	strb.w	r3, [r6], #1
 801013a:	3001      	adds	r0, #1
 801013c:	462b      	mov	r3, r5
 801013e:	781c      	ldrb	r4, [r3, #0]
 8010140:	3501      	adds	r5, #1
 8010142:	2c7b      	cmp	r4, #123	; 0x7b
 8010144:	d0ea      	beq.n	801011c <properties::convert_json_file(char*, unsigned short, bool)+0x2c>
 8010146:	42b9      	cmp	r1, r7
 8010148:	f107 0401 	add.w	r4, r7, #1
 801014c:	d9db      	bls.n	8010106 <properties::convert_json_file(char*, unsigned short, bool)+0x16>
 801014e:	4627      	mov	r7, r4
 8010150:	e7f4      	b.n	801013c <properties::convert_json_file(char*, unsigned short, bool)+0x4c>
 8010152:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010156:	2822      	cmp	r0, #34	; 0x22
 8010158:	d119      	bne.n	801018e <properties::convert_json_file(char*, unsigned short, bool)+0x9e>
 801015a:	46a4      	mov	ip, r4
 801015c:	461d      	mov	r5, r3
 801015e:	2601      	movs	r6, #1
 8010160:	f89c e000 	ldrb.w	lr, [ip]
 8010164:	4664      	mov	r4, ip
 8010166:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 801016a:	462b      	mov	r3, r5
 801016c:	4630      	mov	r0, r6
 801016e:	f10c 0c01 	add.w	ip, ip, #1
 8010172:	f105 0501 	add.w	r5, r5, #1
 8010176:	f106 0601 	add.w	r6, r6, #1
 801017a:	d0d9      	beq.n	8010130 <properties::convert_json_file(char*, unsigned short, bool)+0x40>
 801017c:	3701      	adds	r7, #1
 801017e:	42b9      	cmp	r1, r7
 8010180:	4664      	mov	r4, ip
 8010182:	f805 ec01 	strb.w	lr, [r5, #-1]
 8010186:	d8eb      	bhi.n	8010160 <properties::convert_json_file(char*, unsigned short, bool)+0x70>
 8010188:	4630      	mov	r0, r6
 801018a:	462b      	mov	r3, r5
 801018c:	e7d0      	b.n	8010130 <properties::convert_json_file(char*, unsigned short, bool)+0x40>
 801018e:	3701      	adds	r7, #1
 8010190:	e7cb      	b.n	801012a <properties::convert_json_file(char*, unsigned short, bool)+0x3a>
 8010192:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8010196:	d110      	bne.n	80101ba <properties::convert_json_file(char*, unsigned short, bool)+0xca>
 8010198:	eba0 0803 	sub.w	r8, r0, r3
 801019c:	461a      	mov	r2, r3
 801019e:	eb08 0003 	add.w	r0, r8, r3
 80101a2:	f813 eb01 	ldrb.w	lr, [r3], #1
 80101a6:	1c65      	adds	r5, r4, #1
 80101a8:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 80101ac:	d04c      	beq.n	8010248 <properties::convert_json_file(char*, unsigned short, bool)+0x158>
 80101ae:	42a1      	cmp	r1, r4
 80101b0:	d911      	bls.n	80101d6 <properties::convert_json_file(char*, unsigned short, bool)+0xe6>
 80101b2:	462c      	mov	r4, r5
 80101b4:	f806 eb01 	strb.w	lr, [r6], #1
 80101b8:	e7f0      	b.n	801019c <properties::convert_json_file(char*, unsigned short, bool)+0xac>
 80101ba:	42a1      	cmp	r1, r4
 80101bc:	461d      	mov	r5, r3
 80101be:	f893 e000 	ldrb.w	lr, [r3]
 80101c2:	f104 0401 	add.w	r4, r4, #1
 80101c6:	f103 0301 	add.w	r3, r3, #1
 80101ca:	d8e2      	bhi.n	8010192 <properties::convert_json_file(char*, unsigned short, bool)+0xa2>
 80101cc:	462b      	mov	r3, r5
 80101ce:	e7e3      	b.n	8010198 <properties::convert_json_file(char*, unsigned short, bool)+0xa8>
 80101d0:	f1be 0f3a 	cmp.w	lr, #58	; 0x3a
 80101d4:	d009      	beq.n	80101ea <properties::convert_json_file(char*, unsigned short, bool)+0xfa>
 80101d6:	42a9      	cmp	r1, r5
 80101d8:	4614      	mov	r4, r2
 80101da:	f892 e000 	ldrb.w	lr, [r2]
 80101de:	f105 0501 	add.w	r5, r5, #1
 80101e2:	f102 0201 	add.w	r2, r2, #1
 80101e6:	d8f3      	bhi.n	80101d0 <properties::convert_json_file(char*, unsigned short, bool)+0xe0>
 80101e8:	4622      	mov	r2, r4
 80101ea:	7814      	ldrb	r4, [r2, #0]
 80101ec:	4696      	mov	lr, r2
 80101ee:	2c2f      	cmp	r4, #47	; 0x2f
 80101f0:	462b      	mov	r3, r5
 80101f2:	f102 0201 	add.w	r2, r2, #1
 80101f6:	f105 0501 	add.w	r5, r5, #1
 80101fa:	d81a      	bhi.n	8010232 <properties::convert_json_file(char*, unsigned short, bool)+0x142>
 80101fc:	4299      	cmp	r1, r3
 80101fe:	d8f4      	bhi.n	80101ea <properties::convert_json_file(char*, unsigned short, bool)+0xfa>
 8010200:	2c22      	cmp	r4, #34	; 0x22
 8010202:	bf08      	it	eq
 8010204:	4696      	moveq	lr, r2
 8010206:	4673      	mov	r3, lr
 8010208:	f813 2b01 	ldrb.w	r2, [r3], #1
 801020c:	1c6c      	adds	r4, r5, #1
 801020e:	2a22      	cmp	r2, #34	; 0x22
 8010210:	d011      	beq.n	8010236 <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 8010212:	2a2c      	cmp	r2, #44	; 0x2c
 8010214:	d00f      	beq.n	8010236 <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 8010216:	2a7d      	cmp	r2, #125	; 0x7d
 8010218:	d00d      	beq.n	8010236 <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 801021a:	42a9      	cmp	r1, r5
 801021c:	d90f      	bls.n	801023e <properties::convert_json_file(char*, unsigned short, bool)+0x14e>
 801021e:	f1a2 0520 	sub.w	r5, r2, #32
 8010222:	2d5a      	cmp	r5, #90	; 0x5a
 8010224:	d803      	bhi.n	801022e <properties::convert_json_file(char*, unsigned short, bool)+0x13e>
 8010226:	469e      	mov	lr, r3
 8010228:	f806 2b01 	strb.w	r2, [r6], #1
 801022c:	3001      	adds	r0, #1
 801022e:	4625      	mov	r5, r4
 8010230:	e7e9      	b.n	8010206 <properties::convert_json_file(char*, unsigned short, bool)+0x116>
 8010232:	461d      	mov	r5, r3
 8010234:	e7e7      	b.n	8010206 <properties::convert_json_file(char*, unsigned short, bool)+0x116>
 8010236:	462c      	mov	r4, r5
 8010238:	f806 cb01 	strb.w	ip, [r6], #1
 801023c:	3001      	adds	r0, #1
 801023e:	3401      	adds	r4, #1
 8010240:	e768      	b.n	8010114 <properties::convert_json_file(char*, unsigned short, bool)+0x24>
 8010242:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010246:	e767      	b.n	8010118 <properties::convert_json_file(char*, unsigned short, bool)+0x28>
 8010248:	4625      	mov	r5, r4
 801024a:	f806 7b01 	strb.w	r7, [r6], #1
 801024e:	3001      	adds	r0, #1
 8010250:	e7c1      	b.n	80101d6 <properties::convert_json_file(char*, unsigned short, bool)+0xe6>
	...

08010254 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>:
 8010254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010258:	6002      	str	r2, [r0, #0]
 801025a:	4614      	mov	r4, r2
 801025c:	2200      	movs	r2, #0
 801025e:	80c2      	strh	r2, [r0, #6]
 8010260:	4a1c      	ldr	r2, [pc, #112]	; (80102d4 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x80>)
 8010262:	4606      	mov	r6, r0
 8010264:	7812      	ldrb	r2, [r2, #0]
 8010266:	8083      	strh	r3, [r0, #4]
 8010268:	f002 0201 	and.w	r2, r2, #1
 801026c:	7202      	strb	r2, [r0, #8]
 801026e:	4608      	mov	r0, r1
 8010270:	4605      	mov	r5, r0
 8010272:	782f      	ldrb	r7, [r5, #0]
 8010274:	3001      	adds	r0, #1
 8010276:	2f00      	cmp	r7, #0
 8010278:	d1fa      	bne.n	8010270 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x1c>
 801027a:	1a6d      	subs	r5, r5, r1
 801027c:	b29b      	uxth	r3, r3
 801027e:	b1d2      	cbz	r2, 80102b6 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x62>
 8010280:	1d2f      	adds	r7, r5, #4
 8010282:	429f      	cmp	r7, r3
 8010284:	d814      	bhi.n	80102b0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8010286:	f04f 087b 	mov.w	r8, #123	; 0x7b
 801028a:	f04f 0922 	mov.w	r9, #34	; 0x22
 801028e:	462a      	mov	r2, r5
 8010290:	f884 8000 	strb.w	r8, [r4]
 8010294:	f884 9001 	strb.w	r9, [r4, #1]
 8010298:	1ca0      	adds	r0, r4, #2
 801029a:	f000 fed2 	bl	8011042 <memmove>
 801029e:	223a      	movs	r2, #58	; 0x3a
 80102a0:	1963      	adds	r3, r4, r5
 80102a2:	3505      	adds	r5, #5
 80102a4:	f883 9002 	strb.w	r9, [r3, #2]
 80102a8:	70da      	strb	r2, [r3, #3]
 80102aa:	80f5      	strh	r5, [r6, #6]
 80102ac:	f804 8007 	strb.w	r8, [r4, r7]
 80102b0:	4630      	mov	r0, r6
 80102b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102b6:	1caf      	adds	r7, r5, #2
 80102b8:	429f      	cmp	r7, r3
 80102ba:	d8f9      	bhi.n	80102b0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 80102bc:	4620      	mov	r0, r4
 80102be:	2323      	movs	r3, #35	; 0x23
 80102c0:	462a      	mov	r2, r5
 80102c2:	f800 3b01 	strb.w	r3, [r0], #1
 80102c6:	f000 febc 	bl	8011042 <memmove>
 80102ca:	230a      	movs	r3, #10
 80102cc:	442c      	add	r4, r5
 80102ce:	7063      	strb	r3, [r4, #1]
 80102d0:	80f7      	strh	r7, [r6, #6]
 80102d2:	e7ed      	b.n	80102b0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 80102d4:	200096a2 	andcs	r9, r0, r2, lsr #13

080102d8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>:
 80102d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102da:	469c      	mov	ip, r3
 80102dc:	8885      	ldrh	r5, [r0, #4]
 80102de:	88c3      	ldrh	r3, [r0, #6]
 80102e0:	b085      	sub	sp, #20
 80102e2:	42ab      	cmp	r3, r5
 80102e4:	d302      	bcc.n	80102ec <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x14>
 80102e6:	2000      	movs	r0, #0
 80102e8:	b005      	add	sp, #20
 80102ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102ec:	4604      	mov	r4, r0
 80102ee:	6800      	ldr	r0, [r0, #0]
 80102f0:	1aed      	subs	r5, r5, r3
 80102f2:	4418      	add	r0, r3
 80102f4:	b2d6      	uxtb	r6, r2
 80102f6:	f3c2 2707 	ubfx	r7, r2, #8, #8
 80102fa:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80102fe:	f894 e008 	ldrb.w	lr, [r4, #8]
 8010302:	0e12      	lsrs	r2, r2, #24
 8010304:	f1bc 0f00 	cmp.w	ip, #0
 8010308:	d109      	bne.n	801031e <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x46>
 801030a:	f1be 0f00 	cmp.w	lr, #0
 801030e:	d109      	bne.n	8010324 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x4c>
 8010310:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8010314:	e9cd 6700 	strd	r6, r7, [sp]
 8010318:	460b      	mov	r3, r1
 801031a:	4a0e      	ldr	r2, [pc, #56]	; (8010354 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x7c>)
 801031c:	e008      	b.n	8010330 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 801031e:	f1be 0f00 	cmp.w	lr, #0
 8010322:	d00f      	beq.n	8010344 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x6c>
 8010324:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8010328:	460b      	mov	r3, r1
 801032a:	e9cd 6700 	strd	r6, r7, [sp]
 801032e:	4a0a      	ldr	r2, [pc, #40]	; (8010358 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x80>)
 8010330:	4629      	mov	r1, r5
 8010332:	f7f8 ffc3 	bl	80092bc <snprintf>
 8010336:	4285      	cmp	r5, r0
 8010338:	dbd5      	blt.n	80102e6 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0xe>
 801033a:	88e3      	ldrh	r3, [r4, #6]
 801033c:	4403      	add	r3, r0
 801033e:	80e3      	strh	r3, [r4, #6]
 8010340:	2001      	movs	r0, #1
 8010342:	e7d1      	b.n	80102e8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x10>
 8010344:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8010348:	e9cd 6700 	strd	r6, r7, [sp]
 801034c:	460b      	mov	r3, r1
 801034e:	4a03      	ldr	r2, [pc, #12]	; (801035c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x84>)
 8010350:	e7ee      	b.n	8010330 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 8010352:	bf00      	nop
 8010354:	08014b37 	stmdaeq	r1, {r0, r1, r2, r4, r5, r8, r9, fp, lr}
 8010358:	08014b23 	stmdaeq	r1, {r0, r1, r5, r8, r9, fp, lr}
 801035c:	08014b38 	stmdaeq	r1, {r3, r4, r5, r8, r9, fp, lr}

08010360 <PropertiesBuilder::AddComment(char const*)>:
 8010360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010362:	7a06      	ldrb	r6, [r0, #8]
 8010364:	b996      	cbnz	r6, 801038c <PropertiesBuilder::AddComment(char const*)+0x2c>
 8010366:	4604      	mov	r4, r0
 8010368:	88c0      	ldrh	r0, [r0, #6]
 801036a:	88a5      	ldrh	r5, [r4, #4]
 801036c:	42a8      	cmp	r0, r5
 801036e:	d20d      	bcs.n	801038c <PropertiesBuilder::AddComment(char const*)+0x2c>
 8010370:	6827      	ldr	r7, [r4, #0]
 8010372:	1a2d      	subs	r5, r5, r0
 8010374:	460b      	mov	r3, r1
 8010376:	4a06      	ldr	r2, [pc, #24]	; (8010390 <PropertiesBuilder::AddComment(char const*)+0x30>)
 8010378:	4629      	mov	r1, r5
 801037a:	4438      	add	r0, r7
 801037c:	f7f8 ff9e 	bl	80092bc <snprintf>
 8010380:	4285      	cmp	r5, r0
 8010382:	bfa1      	itttt	ge
 8010384:	2601      	movge	r6, #1
 8010386:	88e3      	ldrhge	r3, [r4, #6]
 8010388:	18c0      	addge	r0, r0, r3
 801038a:	80e0      	strhge	r0, [r4, #6]
 801038c:	4630      	mov	r0, r6
 801038e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010390:	08014b48 	stmdaeq	r1, {r3, r6, r8, r9, fp, lr}

08010394 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>:
 8010394:	e9c0 1200 	strd	r1, r2, [r0]
 8010398:	4770      	bx	lr

0801039a <ReadConfigFile::~ReadConfigFile()>:
 801039a:	4770      	bx	lr

0801039c <ReadConfigFile::Read(char const*, unsigned int)>:
 801039c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103a0:	4606      	mov	r6, r0
 80103a2:	460d      	mov	r5, r1
 80103a4:	4614      	mov	r4, r2
 80103a6:	f04f 0800 	mov.w	r8, #0
 80103aa:	b090      	sub	sp, #64	; 0x40
 80103ac:	b33c      	cbz	r4, 80103fe <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 80103ae:	466b      	mov	r3, sp
 80103b0:	462a      	mov	r2, r5
 80103b2:	4619      	mov	r1, r3
 80103b4:	e007      	b.n	80103c6 <ReadConfigFile::Read(char const*, unsigned int)+0x2a>
 80103b6:	f803 7b01 	strb.w	r7, [r3], #1
 80103ba:	1a58      	subs	r0, r3, r1
 80103bc:	283f      	cmp	r0, #63	; 0x3f
 80103be:	4615      	mov	r5, r2
 80103c0:	dc1d      	bgt.n	80103fe <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 80103c2:	3c01      	subs	r4, #1
 80103c4:	d00f      	beq.n	80103e6 <ReadConfigFile::Read(char const*, unsigned int)+0x4a>
 80103c6:	7817      	ldrb	r7, [r2, #0]
 80103c8:	4610      	mov	r0, r2
 80103ca:	2f0d      	cmp	r7, #13
 80103cc:	f102 0201 	add.w	r2, r2, #1
 80103d0:	d001      	beq.n	80103d6 <ReadConfigFile::Read(char const*, unsigned int)+0x3a>
 80103d2:	2f0a      	cmp	r7, #10
 80103d4:	d1ef      	bne.n	80103b6 <ReadConfigFile::Read(char const*, unsigned int)+0x1a>
 80103d6:	4605      	mov	r5, r0
 80103d8:	b12c      	cbz	r4, 80103e6 <ReadConfigFile::Read(char const*, unsigned int)+0x4a>
 80103da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80103de:	2a0d      	cmp	r2, #13
 80103e0:	d00b      	beq.n	80103fa <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 80103e2:	2a0a      	cmp	r2, #10
 80103e4:	d009      	beq.n	80103fa <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 80103e6:	f89d 2000 	ldrb.w	r2, [sp]
 80103ea:	2a60      	cmp	r2, #96	; 0x60
 80103ec:	d9de      	bls.n	80103ac <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 80103ee:	f883 8000 	strb.w	r8, [r3]
 80103f2:	e9d6 3000 	ldrd	r3, r0, [r6]
 80103f6:	4798      	blx	r3
 80103f8:	e7d8      	b.n	80103ac <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 80103fa:	3c01      	subs	r4, #1
 80103fc:	e7eb      	b.n	80103d6 <ReadConfigFile::Read(char const*, unsigned int)+0x3a>
 80103fe:	b010      	add	sp, #64	; 0x40
 8010400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010404 <Sscan::Char(char const*, char const*, char*, unsigned int&)>:
 8010404:	b570      	push	{r4, r5, r6, lr}
 8010406:	4615      	mov	r5, r2
 8010408:	461c      	mov	r4, r3
 801040a:	f000 f91c 	bl	8010646 <Sscan::checkName(char const*, char const*)>
 801040e:	b180      	cbz	r0, 8010432 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2e>
 8010410:	2100      	movs	r1, #0
 8010412:	5c43      	ldrb	r3, [r0, r1]
 8010414:	6826      	ldr	r6, [r4, #0]
 8010416:	b28a      	uxth	r2, r1
 8010418:	b143      	cbz	r3, 801042c <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x28>
 801041a:	42b2      	cmp	r2, r6
 801041c:	d303      	bcc.n	8010426 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x22>
 801041e:	2b0a      	cmp	r3, #10
 8010420:	d004      	beq.n	801042c <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x28>
 8010422:	2002      	movs	r0, #2
 8010424:	e004      	b.n	8010430 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2c>
 8010426:	546b      	strb	r3, [r5, r1]
 8010428:	3101      	adds	r1, #1
 801042a:	e7f2      	b.n	8010412 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0xe>
 801042c:	2000      	movs	r0, #0
 801042e:	6022      	str	r2, [r4, #0]
 8010430:	bd70      	pop	{r4, r5, r6, pc}
 8010432:	2001      	movs	r0, #1
 8010434:	e7fc      	b.n	8010430 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2c>

08010436 <Sscan::Float(char const*, char const*, float&)>:
 8010436:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801043a:	4616      	mov	r6, r2
 801043c:	f000 f903 	bl	8010646 <Sscan::checkName(char const*, char const*)>
 8010440:	2800      	cmp	r0, #0
 8010442:	d059      	beq.n	80104f8 <Sscan::Float(char const*, char const*, float&)+0xc2>
 8010444:	4604      	mov	r4, r0
 8010446:	7803      	ldrb	r3, [r0, #0]
 8010448:	2b2d      	cmp	r3, #45	; 0x2d
 801044a:	bf08      	it	eq
 801044c:	3401      	addeq	r4, #1
 801044e:	7823      	ldrb	r3, [r4, #0]
 8010450:	bf0c      	ite	eq
 8010452:	f04f 0801 	moveq.w	r8, #1
 8010456:	f04f 0800 	movne.w	r8, #0
 801045a:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 801045e:	d103      	bne.n	8010468 <Sscan::Float(char const*, char const*, float&)+0x32>
 8010460:	2702      	movs	r7, #2
 8010462:	4638      	mov	r0, r7
 8010464:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010468:	2000      	movs	r0, #0
 801046a:	220a      	movs	r2, #10
 801046c:	7823      	ldrb	r3, [r4, #0]
 801046e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8010472:	2909      	cmp	r1, #9
 8010474:	d8f4      	bhi.n	8010460 <Sscan::Float(char const*, char const*, float&)+0x2a>
 8010476:	fb02 3000 	mla	r0, r2, r0, r3
 801047a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801047e:	3830      	subs	r0, #48	; 0x30
 8010480:	2b2e      	cmp	r3, #46	; 0x2e
 8010482:	d002      	beq.n	801048a <Sscan::Float(char const*, char const*, float&)+0x54>
 8010484:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8010488:	d1f0      	bne.n	801046c <Sscan::Float(char const*, char const*, float&)+0x36>
 801048a:	f7f7 fc31 	bl	8007cf0 <__aeabi_ui2f>
 801048e:	6030      	str	r0, [r6, #0]
 8010490:	7823      	ldrb	r3, [r4, #0]
 8010492:	4605      	mov	r5, r0
 8010494:	2b2e      	cmp	r3, #46	; 0x2e
 8010496:	d008      	beq.n	80104aa <Sscan::Float(char const*, char const*, float&)+0x74>
 8010498:	f1b8 0f00 	cmp.w	r8, #0
 801049c:	d101      	bne.n	80104a2 <Sscan::Float(char const*, char const*, float&)+0x6c>
 801049e:	2700      	movs	r7, #0
 80104a0:	e7df      	b.n	8010462 <Sscan::Float(char const*, char const*, float&)+0x2c>
 80104a2:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 80104a6:	6035      	str	r5, [r6, #0]
 80104a8:	e7f9      	b.n	801049e <Sscan::Float(char const*, char const*, float&)+0x68>
 80104aa:	f04f 0901 	mov.w	r9, #1
 80104ae:	2000      	movs	r0, #0
 80104b0:	220a      	movs	r2, #10
 80104b2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80104b6:	f013 07df 	ands.w	r7, r3, #223	; 0xdf
 80104ba:	d111      	bne.n	80104e0 <Sscan::Float(char const*, char const*, float&)+0xaa>
 80104bc:	f7f7 fc18 	bl	8007cf0 <__aeabi_ui2f>
 80104c0:	4604      	mov	r4, r0
 80104c2:	4648      	mov	r0, r9
 80104c4:	f7f7 fc14 	bl	8007cf0 <__aeabi_ui2f>
 80104c8:	4601      	mov	r1, r0
 80104ca:	4620      	mov	r0, r4
 80104cc:	f7f7 ff8e 	bl	80083ec <__aeabi_fdiv>
 80104d0:	4629      	mov	r1, r5
 80104d2:	f7f7 fb5d 	bl	8007b90 <__addsf3>
 80104d6:	f1b8 0f00 	cmp.w	r8, #0
 80104da:	d109      	bne.n	80104f0 <Sscan::Float(char const*, char const*, float&)+0xba>
 80104dc:	6030      	str	r0, [r6, #0]
 80104de:	e7de      	b.n	801049e <Sscan::Float(char const*, char const*, float&)+0x68>
 80104e0:	3b30      	subs	r3, #48	; 0x30
 80104e2:	2b09      	cmp	r3, #9
 80104e4:	d8bc      	bhi.n	8010460 <Sscan::Float(char const*, char const*, float&)+0x2a>
 80104e6:	fb02 3000 	mla	r0, r2, r0, r3
 80104ea:	fb02 f909 	mul.w	r9, r2, r9
 80104ee:	e7e0      	b.n	80104b2 <Sscan::Float(char const*, char const*, float&)+0x7c>
 80104f0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80104f4:	6030      	str	r0, [r6, #0]
 80104f6:	e7b4      	b.n	8010462 <Sscan::Float(char const*, char const*, float&)+0x2c>
 80104f8:	2701      	movs	r7, #1
 80104fa:	e7b2      	b.n	8010462 <Sscan::Float(char const*, char const*, float&)+0x2c>

080104fc <Sscan::IpAddress(char const*, char const*, unsigned int&)>:
 80104fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80104fe:	4615      	mov	r5, r2
 8010500:	f000 f8a1 	bl	8010646 <Sscan::checkName(char const*, char const*)>
 8010504:	bb58      	cbnz	r0, 801055e <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x62>
 8010506:	2001      	movs	r0, #1
 8010508:	e027      	b.n	801055a <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5e>
 801050a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801050e:	2b09      	cmp	r3, #9
 8010510:	d822      	bhi.n	8010558 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8010512:	4603      	mov	r3, r0
 8010514:	fb0c 2101 	mla	r1, ip, r1, r2
 8010518:	3930      	subs	r1, #48	; 0x30
 801051a:	4618      	mov	r0, r3
 801051c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010520:	2a2e      	cmp	r2, #46	; 0x2e
 8010522:	d115      	bne.n	8010550 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x54>
 8010524:	29ff      	cmp	r1, #255	; 0xff
 8010526:	d817      	bhi.n	8010558 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8010528:	3401      	adds	r4, #1
 801052a:	2c03      	cmp	r4, #3
 801052c:	f806 1b01 	strb.w	r1, [r6], #1
 8010530:	d119      	bne.n	8010566 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x6a>
 8010532:	2400      	movs	r4, #0
 8010534:	260a      	movs	r6, #10
 8010536:	1d1a      	adds	r2, r3, #4
 8010538:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 801053c:	f011 00df 	ands.w	r0, r1, #223	; 0xdf
 8010540:	d115      	bne.n	801056e <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x72>
 8010542:	2cff      	cmp	r4, #255	; 0xff
 8010544:	d808      	bhi.n	8010558 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8010546:	f88d 4007 	strb.w	r4, [sp, #7]
 801054a:	9b01      	ldr	r3, [sp, #4]
 801054c:	602b      	str	r3, [r5, #0]
 801054e:	e004      	b.n	801055a <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5e>
 8010550:	2a00      	cmp	r2, #0
 8010552:	d0e7      	beq.n	8010524 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 8010554:	42b8      	cmp	r0, r7
 8010556:	d1d8      	bne.n	801050a <Sscan::IpAddress(char const*, char const*, unsigned int&)+0xe>
 8010558:	2002      	movs	r0, #2
 801055a:	b003      	add	sp, #12
 801055c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801055e:	2400      	movs	r4, #0
 8010560:	f04f 0c0a 	mov.w	ip, #10
 8010564:	ae01      	add	r6, sp, #4
 8010566:	4603      	mov	r3, r0
 8010568:	2100      	movs	r1, #0
 801056a:	1d07      	adds	r7, r0, #4
 801056c:	e7d5      	b.n	801051a <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x1e>
 801056e:	4293      	cmp	r3, r2
 8010570:	d0f2      	beq.n	8010558 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8010572:	3930      	subs	r1, #48	; 0x30
 8010574:	2909      	cmp	r1, #9
 8010576:	d8ef      	bhi.n	8010558 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8010578:	fb06 1404 	mla	r4, r6, r4, r1
 801057c:	e7dc      	b.n	8010538 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x3c>

0801057e <Sscan::Uint16(char const*, char const*, unsigned short&)>:
 801057e:	b538      	push	{r3, r4, r5, lr}
 8010580:	4615      	mov	r5, r2
 8010582:	f000 f860 	bl	8010646 <Sscan::checkName(char const*, char const*)>
 8010586:	b1a0      	cbz	r0, 80105b2 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x34>
 8010588:	4604      	mov	r4, r0
 801058a:	2100      	movs	r1, #0
 801058c:	220a      	movs	r2, #10
 801058e:	7823      	ldrb	r3, [r4, #0]
 8010590:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8010594:	2809      	cmp	r0, #9
 8010596:	d80e      	bhi.n	80105b6 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 8010598:	fb02 3101 	mla	r1, r2, r1, r3
 801059c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80105a0:	3930      	subs	r1, #48	; 0x30
 80105a2:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 80105a6:	d1f2      	bne.n	801058e <Sscan::Uint16(char const*, char const*, unsigned short&)+0x10>
 80105a8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80105ac:	d203      	bcs.n	80105b6 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 80105ae:	8029      	strh	r1, [r5, #0]
 80105b0:	bd38      	pop	{r3, r4, r5, pc}
 80105b2:	2001      	movs	r0, #1
 80105b4:	e7fc      	b.n	80105b0 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>
 80105b6:	2002      	movs	r0, #2
 80105b8:	e7fa      	b.n	80105b0 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>

080105ba <Sscan::Uint32(char const*, char const*, unsigned int&)>:
 80105ba:	b570      	push	{r4, r5, r6, lr}
 80105bc:	4615      	mov	r5, r2
 80105be:	f000 f842 	bl	8010646 <Sscan::checkName(char const*, char const*)>
 80105c2:	b1f8      	cbz	r0, 8010604 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4a>
 80105c4:	2300      	movs	r3, #0
 80105c6:	4604      	mov	r4, r0
 80105c8:	461a      	mov	r2, r3
 80105ca:	260a      	movs	r6, #10
 80105cc:	7820      	ldrb	r0, [r4, #0]
 80105ce:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
 80105d2:	2909      	cmp	r1, #9
 80105d4:	d818      	bhi.n	8010608 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4e>
 80105d6:	fba3 3106 	umull	r3, r1, r3, r6
 80105da:	fb06 1102 	mla	r1, r6, r2, r1
 80105de:	3b30      	subs	r3, #48	; 0x30
 80105e0:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 80105e4:	18c3      	adds	r3, r0, r3
 80105e6:	f141 0200 	adc.w	r2, r1, #0
 80105ea:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80105ee:	f011 00df 	ands.w	r0, r1, #223	; 0xdf
 80105f2:	d1eb      	bne.n	80105cc <Sscan::Uint32(char const*, char const*, unsigned int&)+0x12>
 80105f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80105f8:	4299      	cmp	r1, r3
 80105fa:	eb70 0202 	sbcs.w	r2, r0, r2
 80105fe:	d303      	bcc.n	8010608 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4e>
 8010600:	602b      	str	r3, [r5, #0]
 8010602:	bd70      	pop	{r4, r5, r6, pc}
 8010604:	2001      	movs	r0, #1
 8010606:	e7fc      	b.n	8010602 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x48>
 8010608:	2002      	movs	r0, #2
 801060a:	e7fa      	b.n	8010602 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x48>

0801060c <Sscan::Uint8(char const*, char const*, unsigned char&)>:
 801060c:	b538      	push	{r3, r4, r5, lr}
 801060e:	4615      	mov	r5, r2
 8010610:	f000 f819 	bl	8010646 <Sscan::checkName(char const*, char const*)>
 8010614:	b198      	cbz	r0, 801063e <Sscan::Uint8(char const*, char const*, unsigned char&)+0x32>
 8010616:	4604      	mov	r4, r0
 8010618:	2100      	movs	r1, #0
 801061a:	220a      	movs	r2, #10
 801061c:	7823      	ldrb	r3, [r4, #0]
 801061e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8010622:	2809      	cmp	r0, #9
 8010624:	d80d      	bhi.n	8010642 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 8010626:	fb02 3101 	mla	r1, r2, r1, r3
 801062a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801062e:	3930      	subs	r1, #48	; 0x30
 8010630:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 8010634:	d1f2      	bne.n	801061c <Sscan::Uint8(char const*, char const*, unsigned char&)+0x10>
 8010636:	29ff      	cmp	r1, #255	; 0xff
 8010638:	d803      	bhi.n	8010642 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 801063a:	7029      	strb	r1, [r5, #0]
 801063c:	bd38      	pop	{r3, r4, r5, pc}
 801063e:	2001      	movs	r0, #1
 8010640:	e7fc      	b.n	801063c <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>
 8010642:	2002      	movs	r0, #2
 8010644:	e7fa      	b.n	801063c <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>

08010646 <Sscan::checkName(char const*, char const*)>:
 8010646:	4603      	mov	r3, r0
 8010648:	b510      	push	{r4, lr}
 801064a:	3901      	subs	r1, #1
 801064c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010650:	461c      	mov	r4, r3
 8010652:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010656:	b120      	cbz	r0, 8010662 <Sscan::checkName(char const*, char const*)+0x1c>
 8010658:	b10a      	cbz	r2, 801065e <Sscan::checkName(char const*, char const*)+0x18>
 801065a:	4290      	cmp	r0, r2
 801065c:	d0f6      	beq.n	801064c <Sscan::checkName(char const*, char const*)+0x6>
 801065e:	2000      	movs	r0, #0
 8010660:	e006      	b.n	8010670 <Sscan::checkName(char const*, char const*)+0x2a>
 8010662:	2a3d      	cmp	r2, #61	; 0x3d
 8010664:	d104      	bne.n	8010670 <Sscan::checkName(char const*, char const*)+0x2a>
 8010666:	7860      	ldrb	r0, [r4, #1]
 8010668:	f010 00df 	ands.w	r0, r0, #223	; 0xdf
 801066c:	d000      	beq.n	8010670 <Sscan::checkName(char const*, char const*)+0x2a>
 801066e:	1c60      	adds	r0, r4, #1
 8010670:	bd10      	pop	{r4, pc}
	...

08010674 <Display::PrintInfo() [clone .isra.0]>:
 8010674:	b910      	cbnz	r0, 801067c <Display::PrintInfo() [clone .isra.0]+0x8>
 8010676:	4803      	ldr	r0, [pc, #12]	; (8010684 <Display::PrintInfo() [clone .isra.0]+0x10>)
 8010678:	f000 bd1b 	b.w	80110b2 <puts>
 801067c:	6803      	ldr	r3, [r0, #0]
 801067e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010680:	4718      	bx	r3
 8010682:	bf00      	nop
 8010684:	08014bff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, fp, lr}

08010688 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
 8010688:	b513      	push	{r0, r1, r4, lr}
 801068a:	4604      	mov	r4, r0
 801068c:	0a13      	lsrs	r3, r2, #8
 801068e:	7800      	ldrb	r0, [r0, #0]
 8010690:	f88d 1004 	strb.w	r1, [sp, #4]
 8010694:	f88d 3005 	strb.w	r3, [sp, #5]
 8010698:	f88d 2006 	strb.w	r2, [sp, #6]
 801069c:	f001 fc50 	bl	8011f40 <gd32_i2c_set_address(unsigned char)>
 80106a0:	6860      	ldr	r0, [r4, #4]
 80106a2:	f001 fc45 	bl	8011f30 <gd32_i2c_set_baudrate(unsigned int)>
 80106a6:	2103      	movs	r1, #3
 80106a8:	a801      	add	r0, sp, #4
 80106aa:	f001 fc4f 	bl	8011f4c <gd32_i2c_write(char const*, unsigned int)>
 80106ae:	b002      	add	sp, #8
 80106b0:	bd10      	pop	{r4, pc}

080106b2 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
 80106b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80106b4:	460d      	mov	r5, r1
 80106b6:	4604      	mov	r4, r0
 80106b8:	f001 fc42 	bl	8011f40 <gd32_i2c_set_address(unsigned char)>
 80106bc:	4628      	mov	r0, r5
 80106be:	f001 fc37 	bl	8011f30 <gd32_i2c_set_baudrate(unsigned int)>
 80106c2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80106c6:	2b07      	cmp	r3, #7
 80106c8:	d902      	bls.n	80106d0 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x1e>
 80106ca:	3c50      	subs	r4, #80	; 0x50
 80106cc:	2c0f      	cmp	r4, #15
 80106ce:	d809      	bhi.n	80106e4 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x32>
 80106d0:	2101      	movs	r1, #1
 80106d2:	f10d 0007 	add.w	r0, sp, #7
 80106d6:	f001 fc9f 	bl	8012018 <gd32_i2c_read(char*, unsigned int)>
 80106da:	fab0 f080 	clz	r0, r0
 80106de:	0940      	lsrs	r0, r0, #5
 80106e0:	b003      	add	sp, #12
 80106e2:	bd30      	pop	{r4, r5, pc}
 80106e4:	2100      	movs	r1, #0
 80106e6:	4608      	mov	r0, r1
 80106e8:	f001 fc30 	bl	8011f4c <gd32_i2c_write(char const*, unsigned int)>
 80106ec:	e7f5      	b.n	80106da <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x28>

080106ee <Display::Detect7Segment()>:
 80106ee:	b538      	push	{r3, r4, r5, lr}
 80106f0:	68c1      	ldr	r1, [r0, #12]
 80106f2:	4604      	mov	r4, r0
 80106f4:	7a00      	ldrb	r0, [r0, #8]
 80106f6:	f7ff ffdc 	bl	80106b2 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>
 80106fa:	7460      	strb	r0, [r4, #17]
 80106fc:	b170      	cbz	r0, 801071c <Display::Detect7Segment()+0x2e>
 80106fe:	2200      	movs	r2, #0
 8010700:	f104 0508 	add.w	r5, r4, #8
 8010704:	4611      	mov	r1, r2
 8010706:	4628      	mov	r0, r5
 8010708:	f7ff ffbe 	bl	8010688 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 801070c:	7c63      	ldrb	r3, [r4, #17]
 801070e:	b12b      	cbz	r3, 801071c <Display::Detect7Segment()+0x2e>
 8010710:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 8010714:	2112      	movs	r1, #18
 8010716:	4628      	mov	r0, r5
 8010718:	f7ff ffb6 	bl	8010688 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 801071c:	bd38      	pop	{r3, r4, r5, pc}

0801071e <Display::Detect(display::Type)>:
 801071e:	2902      	cmp	r1, #2
 8010720:	b538      	push	{r3, r4, r5, lr}
 8010722:	4604      	mov	r4, r0
 8010724:	d014      	beq.n	8010750 <Display::Detect(display::Type)+0x32>
 8010726:	2904      	cmp	r1, #4
 8010728:	d01b      	beq.n	8010762 <Display::Detect(display::Type)+0x44>
 801072a:	69a0      	ldr	r0, [r4, #24]
 801072c:	b168      	cbz	r0, 801074a <Display::Detect(display::Type)+0x2c>
 801072e:	6803      	ldr	r3, [r0, #0]
 8010730:	689b      	ldr	r3, [r3, #8]
 8010732:	4798      	blx	r3
 8010734:	4603      	mov	r3, r0
 8010736:	69a0      	ldr	r0, [r4, #24]
 8010738:	b9ab      	cbnz	r3, 8010766 <Display::Detect(display::Type)+0x48>
 801073a:	b110      	cbz	r0, 8010742 <Display::Detect(display::Type)+0x24>
 801073c:	6803      	ldr	r3, [r0, #0]
 801073e:	685b      	ldr	r3, [r3, #4]
 8010740:	4798      	blx	r3
 8010742:	2300      	movs	r3, #0
 8010744:	61a3      	str	r3, [r4, #24]
 8010746:	2304      	movs	r3, #4
 8010748:	6023      	str	r3, [r4, #0]
 801074a:	2300      	movs	r3, #0
 801074c:	6163      	str	r3, [r4, #20]
 801074e:	e010      	b.n	8010772 <Display::Detect(display::Type)+0x54>
 8010750:	2018      	movs	r0, #24
 8010752:	f000 fbb7 	bl	8010ec4 <operator new(unsigned int)>
 8010756:	4605      	mov	r5, r0
 8010758:	2100      	movs	r1, #0
 801075a:	f000 f8a1 	bl	80108a0 <Ssd1306::Ssd1306(TOledPanel)>
 801075e:	61a5      	str	r5, [r4, #24]
 8010760:	e7e3      	b.n	801072a <Display::Detect(display::Type)+0xc>
 8010762:	6001      	str	r1, [r0, #0]
 8010764:	e7e1      	b.n	801072a <Display::Detect(display::Type)+0xc>
 8010766:	6803      	ldr	r3, [r0, #0]
 8010768:	68db      	ldr	r3, [r3, #12]
 801076a:	4798      	blx	r3
 801076c:	69a3      	ldr	r3, [r4, #24]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d0eb      	beq.n	801074a <Display::Detect(display::Type)+0x2c>
 8010772:	bd38      	pop	{r3, r4, r5, pc}

08010774 <Display::Display()>:
 8010774:	2304      	movs	r3, #4
 8010776:	b510      	push	{r4, lr}
 8010778:	6003      	str	r3, [r0, #0]
 801077a:	4b0f      	ldr	r3, [pc, #60]	; (80107b8 <Display::Display()+0x44>)
 801077c:	4604      	mov	r4, r0
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	4a0e      	ldr	r2, [pc, #56]	; (80107bc <Display::Display()+0x48>)
 8010782:	6043      	str	r3, [r0, #4]
 8010784:	2321      	movs	r3, #33	; 0x21
 8010786:	7203      	strb	r3, [r0, #8]
 8010788:	4b0d      	ldr	r3, [pc, #52]	; (80107c0 <Display::Display()+0x4c>)
 801078a:	2102      	movs	r1, #2
 801078c:	60c3      	str	r3, [r0, #12]
 801078e:	2300      	movs	r3, #0
 8010790:	e9c0 2305 	strd	r2, r3, [r0, #20]
 8010794:	8203      	strh	r3, [r0, #16]
 8010796:	4b0b      	ldr	r3, [pc, #44]	; (80107c4 <Display::Display()+0x50>)
 8010798:	6018      	str	r0, [r3, #0]
 801079a:	f7ff ffc0 	bl	801071e <Display::Detect(display::Type)>
 801079e:	4620      	mov	r0, r4
 80107a0:	f7ff ffa5 	bl	80106ee <Display::Detect7Segment()>
 80107a4:	69a3      	ldr	r3, [r4, #24]
 80107a6:	b10b      	cbz	r3, 80107ac <Display::Display()+0x38>
 80107a8:	f000 f80e 	bl	80107c8 <display::timeout::gpio_init()>
 80107ac:	69a0      	ldr	r0, [r4, #24]
 80107ae:	f7ff ff61 	bl	8010674 <Display::PrintInfo() [clone .isra.0]>
 80107b2:	4620      	mov	r0, r4
 80107b4:	bd10      	pop	{r4, pc}
 80107b6:	bf00      	nop
 80107b8:	200097ac 	andcs	r9, r0, ip, lsr #15
 80107bc:	000493e0 	andeq	r9, r4, r0, ror #7
 80107c0:	00061a80 	andeq	r1, r6, r0, lsl #21
 80107c4:	200096a4 	andcs	r9, r0, r4, lsr #13

080107c8 <display::timeout::gpio_init()>:
 80107c8:	4770      	bx	lr

080107ca <display::timeout::gpio_renew()>:
 80107ca:	2000      	movs	r0, #0
 80107cc:	4770      	bx	lr

080107ce <Ssd1306::~Ssd1306()>:
 80107ce:	4770      	bx	lr

080107d0 <Ssd1306::SetCursor(unsigned int)>:
 80107d0:	4770      	bx	lr
	...

080107d4 <Ssd1306::PrintInfo()>:
 80107d4:	b410      	push	{r4}
 80107d6:	4906      	ldr	r1, [pc, #24]	; (80107f0 <Ssd1306::PrintInfo()+0x1c>)
 80107d8:	7c44      	ldrb	r4, [r0, #17]
 80107da:	7903      	ldrb	r3, [r0, #4]
 80107dc:	7942      	ldrb	r2, [r0, #5]
 80107de:	4805      	ldr	r0, [pc, #20]	; (80107f4 <Ssd1306::PrintInfo()+0x20>)
 80107e0:	2c00      	cmp	r4, #0
 80107e2:	bf08      	it	eq
 80107e4:	4601      	moveq	r1, r0
 80107e6:	4804      	ldr	r0, [pc, #16]	; (80107f8 <Ssd1306::PrintInfo()+0x24>)
 80107e8:	bc10      	pop	{r4}
 80107ea:	f7f8 bd57 	b.w	800929c <printf>
 80107ee:	bf00      	nop
 80107f0:	08014c10 	stmdaeq	r1, {r4, sl, fp, lr}
 80107f4:	08014c17 	stmdaeq	r1, {r0, r1, r2, r4, sl, fp, lr}
 80107f8:	08014c1f 	stmdaeq	r1, {r0, r1, r2, r3, r4, sl, fp, lr}

080107fc <Ssd1306::~Ssd1306()>:
 80107fc:	b510      	push	{r4, lr}
 80107fe:	4604      	mov	r4, r0
 8010800:	f000 fb5c 	bl	8010ebc <operator delete(void*)>
 8010804:	4620      	mov	r0, r4
 8010806:	bd10      	pop	{r4, pc}

08010808 <HAL_I2C::Setup()>:
 8010808:	b510      	push	{r4, lr}
 801080a:	4604      	mov	r4, r0
 801080c:	7800      	ldrb	r0, [r0, #0]
 801080e:	f001 fb97 	bl	8011f40 <gd32_i2c_set_address(unsigned char)>
 8010812:	6860      	ldr	r0, [r4, #4]
 8010814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010818:	f001 bb8a 	b.w	8011f30 <gd32_i2c_set_baudrate(unsigned int)>

0801081c <Ssd1306::PutChar(int)>:
 801081c:	b510      	push	{r4, lr}
 801081e:	f1a1 0420 	sub.w	r4, r1, #32
 8010822:	2c5f      	cmp	r4, #95	; 0x5f
 8010824:	bf88      	it	hi
 8010826:	2400      	movhi	r4, #0
 8010828:	3008      	adds	r0, #8
 801082a:	f7ff ffed 	bl	8010808 <HAL_I2C::Setup()>
 801082e:	4804      	ldr	r0, [pc, #16]	; (8010840 <Ssd1306::PutChar(int)+0x24>)
 8010830:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8010834:	4420      	add	r0, r4
 8010836:	2107      	movs	r1, #7
 8010838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801083c:	f001 bb86 	b.w	8011f4c <gd32_i2c_write(char const*, unsigned int)>
 8010840:	08014c34 	stmdaeq	r1, {r2, r4, r5, sl, fp, lr}

08010844 <Ssd1306::PutString(char const*)>:
 8010844:	b538      	push	{r3, r4, r5, lr}
 8010846:	4605      	mov	r5, r0
 8010848:	1e4c      	subs	r4, r1, #1
 801084a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 801084e:	b901      	cbnz	r1, 8010852 <Ssd1306::PutString(char const*)+0xe>
 8010850:	bd38      	pop	{r3, r4, r5, pc}
 8010852:	4628      	mov	r0, r5
 8010854:	f7ff ffe2 	bl	801081c <Ssd1306::PutChar(int)>
 8010858:	e7f7      	b.n	801084a <Ssd1306::PutString(char const*)+0x6>

0801085a <Ssd1306::Text(char const*, unsigned int)>:
 801085a:	b570      	push	{r4, r5, r6, lr}
 801085c:	7903      	ldrb	r3, [r0, #4]
 801085e:	4605      	mov	r5, r0
 8010860:	460c      	mov	r4, r1
 8010862:	4293      	cmp	r3, r2
 8010864:	bf94      	ite	ls
 8010866:	18ce      	addls	r6, r1, r3
 8010868:	188e      	addhi	r6, r1, r2
 801086a:	42b4      	cmp	r4, r6
 801086c:	d100      	bne.n	8010870 <Ssd1306::Text(char const*, unsigned int)+0x16>
 801086e:	bd70      	pop	{r4, r5, r6, pc}
 8010870:	4628      	mov	r0, r5
 8010872:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010876:	f7ff ffd1 	bl	801081c <Ssd1306::PutChar(int)>
 801087a:	e7f6      	b.n	801086a <Ssd1306::Text(char const*, unsigned int)+0x10>

0801087c <Ssd1306::InitMembers()>:
 801087c:	7c03      	ldrb	r3, [r0, #16]
 801087e:	b14b      	cbz	r3, 8010894 <Ssd1306::InitMembers()+0x18>
 8010880:	3b01      	subs	r3, #1
 8010882:	2b01      	cmp	r3, #1
 8010884:	d909      	bls.n	801089a <Ssd1306::InitMembers()+0x1e>
 8010886:	2308      	movs	r3, #8
 8010888:	2204      	movs	r2, #4
 801088a:	2115      	movs	r1, #21
 801088c:	7143      	strb	r3, [r0, #5]
 801088e:	7101      	strb	r1, [r0, #4]
 8010890:	6142      	str	r2, [r0, #20]
 8010892:	4770      	bx	lr
 8010894:	2308      	movs	r3, #8
 8010896:	461a      	mov	r2, r3
 8010898:	e7f7      	b.n	801088a <Ssd1306::InitMembers()+0xe>
 801089a:	2304      	movs	r3, #4
 801089c:	e7fb      	b.n	8010896 <Ssd1306::InitMembers()+0x1a>
	...

080108a0 <Ssd1306::Ssd1306(TOledPanel)>:
 80108a0:	4a08      	ldr	r2, [pc, #32]	; (80108c4 <Ssd1306::Ssd1306(TOledPanel)+0x24>)
 80108a2:	b508      	push	{r3, lr}
 80108a4:	6002      	str	r2, [r0, #0]
 80108a6:	227f      	movs	r2, #127	; 0x7f
 80108a8:	80c2      	strh	r2, [r0, #6]
 80108aa:	223c      	movs	r2, #60	; 0x3c
 80108ac:	7202      	strb	r2, [r0, #8]
 80108ae:	4a06      	ldr	r2, [pc, #24]	; (80108c8 <Ssd1306::Ssd1306(TOledPanel)+0x28>)
 80108b0:	7401      	strb	r1, [r0, #16]
 80108b2:	60c2      	str	r2, [r0, #12]
 80108b4:	2200      	movs	r2, #0
 80108b6:	7442      	strb	r2, [r0, #17]
 80108b8:	4a04      	ldr	r2, [pc, #16]	; (80108cc <Ssd1306::Ssd1306(TOledPanel)+0x2c>)
 80108ba:	6010      	str	r0, [r2, #0]
 80108bc:	f7ff ffde 	bl	801087c <Ssd1306::InitMembers()>
 80108c0:	bd08      	pop	{r3, pc}
 80108c2:	bf00      	nop
 80108c4:	08014f0c 	stmdaeq	r1, {r2, r3, r8, r9, sl, fp, lr}
 80108c8:	00061a80 	andeq	r1, r6, r0, lsl #21
 80108cc:	20009730 	andcs	r9, r0, r0, lsr r7

080108d0 <Ssd1306::SendCommand(unsigned char)>:
 80108d0:	2300      	movs	r3, #0
 80108d2:	b507      	push	{r0, r1, r2, lr}
 80108d4:	3008      	adds	r0, #8
 80108d6:	f88d 3004 	strb.w	r3, [sp, #4]
 80108da:	f88d 1005 	strb.w	r1, [sp, #5]
 80108de:	f7ff ff93 	bl	8010808 <HAL_I2C::Setup()>
 80108e2:	2102      	movs	r1, #2
 80108e4:	a801      	add	r0, sp, #4
 80108e6:	f001 fb31 	bl	8011f4c <gd32_i2c_write(char const*, unsigned int)>
 80108ea:	b003      	add	sp, #12
 80108ec:	f85d fb04 	ldr.w	pc, [sp], #4

080108f0 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>:
 80108f0:	2914      	cmp	r1, #20
 80108f2:	b570      	push	{r4, r5, r6, lr}
 80108f4:	4605      	mov	r5, r0
 80108f6:	4616      	mov	r6, r2
 80108f8:	d81c      	bhi.n	8010934 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 80108fa:	7943      	ldrb	r3, [r0, #5]
 80108fc:	4293      	cmp	r3, r2
 80108fe:	d919      	bls.n	8010934 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 8010900:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8010904:	7c43      	ldrb	r3, [r0, #17]
 8010906:	004c      	lsls	r4, r1, #1
 8010908:	b2e4      	uxtb	r4, r4
 801090a:	b10b      	cbz	r3, 8010910 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x20>
 801090c:	3404      	adds	r4, #4
 801090e:	b2e4      	uxtb	r4, r4
 8010910:	4628      	mov	r0, r5
 8010912:	f004 010e 	and.w	r1, r4, #14
 8010916:	f7ff ffdb 	bl	80108d0 <Ssd1306::SendCommand(unsigned char)>
 801091a:	0921      	lsrs	r1, r4, #4
 801091c:	4628      	mov	r0, r5
 801091e:	f041 0110 	orr.w	r1, r1, #16
 8010922:	f7ff ffd5 	bl	80108d0 <Ssd1306::SendCommand(unsigned char)>
 8010926:	4628      	mov	r0, r5
 8010928:	f046 01b0 	orr.w	r1, r6, #176	; 0xb0
 801092c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010930:	f7ff bfce 	b.w	80108d0 <Ssd1306::SendCommand(unsigned char)>
 8010934:	bd70      	pop	{r4, r5, r6, pc}

08010936 <Ssd1306::TextLine(unsigned char, char const*, unsigned int)>:
 8010936:	b570      	push	{r4, r5, r6, lr}
 8010938:	4604      	mov	r4, r0
 801093a:	4615      	mov	r5, r2
 801093c:	461e      	mov	r6, r3
 801093e:	b171      	cbz	r1, 801095e <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x28>
 8010940:	7943      	ldrb	r3, [r0, #5]
 8010942:	428b      	cmp	r3, r1
 8010944:	d30b      	bcc.n	801095e <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x28>
 8010946:	3901      	subs	r1, #1
 8010948:	b2ca      	uxtb	r2, r1
 801094a:	2100      	movs	r1, #0
 801094c:	f7ff ffd0 	bl	80108f0 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8010950:	4632      	mov	r2, r6
 8010952:	4629      	mov	r1, r5
 8010954:	4620      	mov	r0, r4
 8010956:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801095a:	f7ff bf7e 	b.w	801085a <Ssd1306::Text(char const*, unsigned int)>
 801095e:	bd70      	pop	{r4, r5, r6, pc}

08010960 <Ssd1306::ClearLine(unsigned char)>:
 8010960:	b538      	push	{r3, r4, r5, lr}
 8010962:	4605      	mov	r5, r0
 8010964:	b1b9      	cbz	r1, 8010996 <Ssd1306::ClearLine(unsigned char)+0x36>
 8010966:	7943      	ldrb	r3, [r0, #5]
 8010968:	428b      	cmp	r3, r1
 801096a:	d314      	bcc.n	8010996 <Ssd1306::ClearLine(unsigned char)+0x36>
 801096c:	3901      	subs	r1, #1
 801096e:	b2cc      	uxtb	r4, r1
 8010970:	4622      	mov	r2, r4
 8010972:	2100      	movs	r1, #0
 8010974:	f7ff ffbc 	bl	80108f0 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8010978:	f105 0008 	add.w	r0, r5, #8
 801097c:	f7ff ff44 	bl	8010808 <HAL_I2C::Setup()>
 8010980:	2181      	movs	r1, #129	; 0x81
 8010982:	4805      	ldr	r0, [pc, #20]	; (8010998 <Ssd1306::ClearLine(unsigned char)+0x38>)
 8010984:	f001 fae2 	bl	8011f4c <gd32_i2c_write(char const*, unsigned int)>
 8010988:	4622      	mov	r2, r4
 801098a:	4628      	mov	r0, r5
 801098c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010990:	2100      	movs	r1, #0
 8010992:	f7ff bfad 	b.w	80108f0 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8010996:	bd38      	pop	{r3, r4, r5, pc}
 8010998:	200096a8 	andcs	r9, r0, r8, lsr #13

0801099c <Ssd1306::SetSleep(bool)>:
 801099c:	b111      	cbz	r1, 80109a4 <Ssd1306::SetSleep(bool)+0x8>
 801099e:	21ae      	movs	r1, #174	; 0xae
 80109a0:	f7ff bf96 	b.w	80108d0 <Ssd1306::SendCommand(unsigned char)>
 80109a4:	21af      	movs	r1, #175	; 0xaf
 80109a6:	e7fb      	b.n	80109a0 <Ssd1306::SetSleep(bool)+0x4>

080109a8 <Ssd1306::SetContrast(unsigned char)>:
 80109a8:	b538      	push	{r3, r4, r5, lr}
 80109aa:	4604      	mov	r4, r0
 80109ac:	460d      	mov	r5, r1
 80109ae:	7181      	strb	r1, [r0, #6]
 80109b0:	2181      	movs	r1, #129	; 0x81
 80109b2:	f7ff ff8d 	bl	80108d0 <Ssd1306::SendCommand(unsigned char)>
 80109b6:	4629      	mov	r1, r5
 80109b8:	4620      	mov	r0, r4
 80109ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109be:	f7ff bf87 	b.w	80108d0 <Ssd1306::SendCommand(unsigned char)>

080109c2 <Ssd1306::SetFlipVertically(bool)>:
 80109c2:	b510      	push	{r4, lr}
 80109c4:	4604      	mov	r4, r0
 80109c6:	71c1      	strb	r1, [r0, #7]
 80109c8:	b141      	cbz	r1, 80109dc <Ssd1306::SetFlipVertically(bool)+0x1a>
 80109ca:	21c0      	movs	r1, #192	; 0xc0
 80109cc:	f7ff ff80 	bl	80108d0 <Ssd1306::SendCommand(unsigned char)>
 80109d0:	21a0      	movs	r1, #160	; 0xa0
 80109d2:	4620      	mov	r0, r4
 80109d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109d8:	f7ff bf7a 	b.w	80108d0 <Ssd1306::SendCommand(unsigned char)>
 80109dc:	21c8      	movs	r1, #200	; 0xc8
 80109de:	f7ff ff77 	bl	80108d0 <Ssd1306::SendCommand(unsigned char)>
 80109e2:	21a1      	movs	r1, #161	; 0xa1
 80109e4:	e7f5      	b.n	80109d2 <Ssd1306::SetFlipVertically(bool)+0x10>
	...

080109e8 <Ssd1306::CheckSH1106()>:
 80109e8:	b570      	push	{r4, r5, r6, lr}
 80109ea:	4604      	mov	r4, r0
 80109ec:	b086      	sub	sp, #24
 80109ee:	2100      	movs	r1, #0
 80109f0:	f7ff ff6e 	bl	80108d0 <Ssd1306::SendCommand(unsigned char)>
 80109f4:	2190      	movs	r1, #144	; 0x90
 80109f6:	4620      	mov	r0, r4
 80109f8:	f7ff ff6a 	bl	80108d0 <Ssd1306::SendCommand(unsigned char)>
 80109fc:	21b0      	movs	r1, #176	; 0xb0
 80109fe:	4620      	mov	r0, r4
 8010a00:	f7ff ff66 	bl	80108d0 <Ssd1306::SendCommand(unsigned char)>
 8010a04:	4b22      	ldr	r3, [pc, #136]	; (8010a90 <Ssd1306::CheckSH1106()+0xa8>)
 8010a06:	f104 0608 	add.w	r6, r4, #8
 8010a0a:	6818      	ldr	r0, [r3, #0]
 8010a0c:	791b      	ldrb	r3, [r3, #4]
 8010a0e:	ad02      	add	r5, sp, #8
 8010a10:	9002      	str	r0, [sp, #8]
 8010a12:	4630      	mov	r0, r6
 8010a14:	712b      	strb	r3, [r5, #4]
 8010a16:	f7ff fef7 	bl	8010808 <HAL_I2C::Setup()>
 8010a1a:	2105      	movs	r1, #5
 8010a1c:	4628      	mov	r0, r5
 8010a1e:	f001 fa95 	bl	8011f4c <gd32_i2c_write(char const*, unsigned int)>
 8010a22:	2100      	movs	r1, #0
 8010a24:	4620      	mov	r0, r4
 8010a26:	f7ff ff53 	bl	80108d0 <Ssd1306::SendCommand(unsigned char)>
 8010a2a:	2190      	movs	r1, #144	; 0x90
 8010a2c:	4620      	mov	r0, r4
 8010a2e:	f7ff ff4f 	bl	80108d0 <Ssd1306::SendCommand(unsigned char)>
 8010a32:	21b0      	movs	r1, #176	; 0xb0
 8010a34:	4620      	mov	r0, r4
 8010a36:	f7ff ff4b 	bl	80108d0 <Ssd1306::SendCommand(unsigned char)>
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	9304      	str	r3, [sp, #16]
 8010a3e:	f88d 3014 	strb.w	r3, [sp, #20]
 8010a42:	2340      	movs	r3, #64	; 0x40
 8010a44:	4630      	mov	r0, r6
 8010a46:	f88d 3007 	strb.w	r3, [sp, #7]
 8010a4a:	f7ff fedd 	bl	8010808 <HAL_I2C::Setup()>
 8010a4e:	2101      	movs	r1, #1
 8010a50:	f10d 0007 	add.w	r0, sp, #7
 8010a54:	f001 fa7a 	bl	8011f4c <gd32_i2c_write(char const*, unsigned int)>
 8010a58:	4630      	mov	r0, r6
 8010a5a:	f7ff fed5 	bl	8010808 <HAL_I2C::Setup()>
 8010a5e:	2105      	movs	r1, #5
 8010a60:	a804      	add	r0, sp, #16
 8010a62:	f001 fad9 	bl	8012018 <gd32_i2c_read(char*, unsigned int)>
 8010a66:	2201      	movs	r2, #1
 8010a68:	5cab      	ldrb	r3, [r5, r2]
 8010a6a:	a904      	add	r1, sp, #16
 8010a6c:	3201      	adds	r2, #1
 8010a6e:	4411      	add	r1, r2
 8010a70:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 8010a74:	428b      	cmp	r3, r1
 8010a76:	d006      	beq.n	8010a86 <Ssd1306::CheckSH1106()+0x9e>
 8010a78:	1a5b      	subs	r3, r3, r1
 8010a7a:	fab3 f383 	clz	r3, r3
 8010a7e:	095b      	lsrs	r3, r3, #5
 8010a80:	7463      	strb	r3, [r4, #17]
 8010a82:	b006      	add	sp, #24
 8010a84:	bd70      	pop	{r4, r5, r6, pc}
 8010a86:	2a05      	cmp	r2, #5
 8010a88:	d1ee      	bne.n	8010a68 <Ssd1306::CheckSH1106()+0x80>
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	e7f5      	b.n	8010a7a <Ssd1306::CheckSH1106()+0x92>
 8010a8e:	bf00      	nop
 8010a90:	08014c2b 	stmdaeq	r1, {r0, r1, r3, r5, sl, fp, lr}

08010a94 <Ssd1306::Cls()>:
 8010a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a98:	4604      	mov	r4, r0
 8010a9a:	2600      	movs	r6, #0
 8010a9c:	7c45      	ldrb	r5, [r0, #17]
 8010a9e:	00ad      	lsls	r5, r5, #2
 8010aa0:	b2ed      	uxtb	r5, r5
 8010aa2:	f1a5 077f 	sub.w	r7, r5, #127	; 0x7f
 8010aa6:	f045 0810 	orr.w	r8, r5, #16
 8010aaa:	b2ff      	uxtb	r7, r7
 8010aac:	6963      	ldr	r3, [r4, #20]
 8010aae:	4629      	mov	r1, r5
 8010ab0:	42b3      	cmp	r3, r6
 8010ab2:	4620      	mov	r0, r4
 8010ab4:	d80b      	bhi.n	8010ace <Ssd1306::Cls()+0x3a>
 8010ab6:	f7ff ff0b 	bl	80108d0 <Ssd1306::SendCommand(unsigned char)>
 8010aba:	4641      	mov	r1, r8
 8010abc:	4620      	mov	r0, r4
 8010abe:	f7ff ff07 	bl	80108d0 <Ssd1306::SendCommand(unsigned char)>
 8010ac2:	4620      	mov	r0, r4
 8010ac4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ac8:	21b0      	movs	r1, #176	; 0xb0
 8010aca:	f7ff bf01 	b.w	80108d0 <Ssd1306::SendCommand(unsigned char)>
 8010ace:	f7ff feff 	bl	80108d0 <Ssd1306::SendCommand(unsigned char)>
 8010ad2:	4641      	mov	r1, r8
 8010ad4:	4620      	mov	r0, r4
 8010ad6:	f7ff fefb 	bl	80108d0 <Ssd1306::SendCommand(unsigned char)>
 8010ada:	f066 014f 	orn	r1, r6, #79	; 0x4f
 8010ade:	4620      	mov	r0, r4
 8010ae0:	b2c9      	uxtb	r1, r1
 8010ae2:	f7ff fef5 	bl	80108d0 <Ssd1306::SendCommand(unsigned char)>
 8010ae6:	7c23      	ldrb	r3, [r4, #16]
 8010ae8:	b123      	cbz	r3, 8010af4 <Ssd1306::Cls()+0x60>
 8010aea:	3b01      	subs	r3, #1
 8010aec:	2b01      	cmp	r3, #1
 8010aee:	d901      	bls.n	8010af4 <Ssd1306::Cls()+0x60>
 8010af0:	3601      	adds	r6, #1
 8010af2:	e7db      	b.n	8010aac <Ssd1306::Cls()+0x18>
 8010af4:	f104 0008 	add.w	r0, r4, #8
 8010af8:	f7ff fe86 	bl	8010808 <HAL_I2C::Setup()>
 8010afc:	4639      	mov	r1, r7
 8010afe:	4802      	ldr	r0, [pc, #8]	; (8010b08 <Ssd1306::Cls()+0x74>)
 8010b00:	f001 fa24 	bl	8011f4c <gd32_i2c_write(char const*, unsigned int)>
 8010b04:	e7f4      	b.n	8010af0 <Ssd1306::Cls()+0x5c>
 8010b06:	bf00      	nop
 8010b08:	200096a8 	andcs	r9, r0, r8, lsr #13

08010b0c <Ssd1306::Start()>:
 8010b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b0e:	7a04      	ldrb	r4, [r0, #8]
 8010b10:	68c6      	ldr	r6, [r0, #12]
 8010b12:	4605      	mov	r5, r0
 8010b14:	4620      	mov	r0, r4
 8010b16:	f001 fa13 	bl	8011f40 <gd32_i2c_set_address(unsigned char)>
 8010b1a:	4630      	mov	r0, r6
 8010b1c:	f001 fa08 	bl	8011f30 <gd32_i2c_set_baudrate(unsigned int)>
 8010b20:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8010b24:	2b07      	cmp	r3, #7
 8010b26:	d902      	bls.n	8010b2e <Ssd1306::Start()+0x22>
 8010b28:	3c50      	subs	r4, #80	; 0x50
 8010b2a:	2c0f      	cmp	r4, #15
 8010b2c:	d80f      	bhi.n	8010b4e <Ssd1306::Start()+0x42>
 8010b2e:	2101      	movs	r1, #1
 8010b30:	f10d 0007 	add.w	r0, sp, #7
 8010b34:	f001 fa70 	bl	8012018 <gd32_i2c_read(char*, unsigned int)>
 8010b38:	fab0 f480 	clz	r4, r0
 8010b3c:	0964      	lsrs	r4, r4, #5
 8010b3e:	b35c      	cbz	r4, 8010b98 <Ssd1306::Start()+0x8c>
 8010b40:	7c2e      	ldrb	r6, [r5, #16]
 8010b42:	b14e      	cbz	r6, 8010b58 <Ssd1306::Start()+0x4c>
 8010b44:	3e01      	subs	r6, #1
 8010b46:	2e01      	cmp	r6, #1
 8010b48:	d929      	bls.n	8010b9e <Ssd1306::Start()+0x92>
 8010b4a:	2400      	movs	r4, #0
 8010b4c:	e024      	b.n	8010b98 <Ssd1306::Start()+0x8c>
 8010b4e:	2100      	movs	r1, #0
 8010b50:	4608      	mov	r0, r1
 8010b52:	f001 f9fb 	bl	8011f4c <gd32_i2c_write(char const*, unsigned int)>
 8010b56:	e7ef      	b.n	8010b38 <Ssd1306::Start()+0x2c>
 8010b58:	4f16      	ldr	r7, [pc, #88]	; (8010bb4 <Ssd1306::Start()+0xa8>)
 8010b5a:	4628      	mov	r0, r5
 8010b5c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8010b60:	3601      	adds	r6, #1
 8010b62:	f7ff feb5 	bl	80108d0 <Ssd1306::SendCommand(unsigned char)>
 8010b66:	2e18      	cmp	r6, #24
 8010b68:	d1f7      	bne.n	8010b5a <Ssd1306::Start()+0x4e>
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	4a12      	ldr	r2, [pc, #72]	; (8010bb8 <Ssd1306::Start()+0xac>)
 8010b6e:	4618      	mov	r0, r3
 8010b70:	4611      	mov	r1, r2
 8010b72:	3301      	adds	r3, #1
 8010b74:	2b86      	cmp	r3, #134	; 0x86
 8010b76:	f802 0b01 	strb.w	r0, [r2], #1
 8010b7a:	d1fa      	bne.n	8010b72 <Ssd1306::Start()+0x66>
 8010b7c:	2340      	movs	r3, #64	; 0x40
 8010b7e:	4628      	mov	r0, r5
 8010b80:	700b      	strb	r3, [r1, #0]
 8010b82:	f7ff ff31 	bl	80109e8 <Ssd1306::CheckSH1106()>
 8010b86:	4628      	mov	r0, r5
 8010b88:	f7ff ff84 	bl	8010a94 <Ssd1306::Cls()>
 8010b8c:	21af      	movs	r1, #175	; 0xaf
 8010b8e:	4628      	mov	r0, r5
 8010b90:	f7ff fe9e 	bl	80108d0 <Ssd1306::SendCommand(unsigned char)>
 8010b94:	2301      	movs	r3, #1
 8010b96:	71eb      	strb	r3, [r5, #7]
 8010b98:	4620      	mov	r0, r4
 8010b9a:	b003      	add	sp, #12
 8010b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b9e:	2600      	movs	r6, #0
 8010ba0:	4f06      	ldr	r7, [pc, #24]	; (8010bbc <Ssd1306::Start()+0xb0>)
 8010ba2:	4628      	mov	r0, r5
 8010ba4:	f817 1b01 	ldrb.w	r1, [r7], #1
 8010ba8:	3601      	adds	r6, #1
 8010baa:	f7ff fe91 	bl	80108d0 <Ssd1306::SendCommand(unsigned char)>
 8010bae:	2e18      	cmp	r6, #24
 8010bb0:	d1f7      	bne.n	8010ba2 <Ssd1306::Start()+0x96>
 8010bb2:	e7da      	b.n	8010b6a <Ssd1306::Start()+0x5e>
 8010bb4:	08014eec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r9, sl, fp, lr}
 8010bb8:	200096a8 	andcs	r9, r0, r8, lsr #13
 8010bbc:	08014ed4 	stmdaeq	r1, {r2, r4, r6, r7, r9, sl, fp, lr}

08010bc0 <console_putc>:
 8010bc0:	f000 bb7a 	b.w	80112b8 <uart0_putc>

08010bc4 <console_puts>:
 8010bc4:	f000 bb98 	b.w	80112f8 <uart0_puts>

08010bc8 <console_set_fg_color>:
 8010bc8:	2807      	cmp	r0, #7
 8010bca:	d810      	bhi.n	8010bee <console_set_fg_color+0x26>
 8010bcc:	e8df f000 	tbb	[pc, r0]
 8010bd0:	0b090704 	bleq	82527e8 <__exidx_end+0x23d7a8>
 8010bd4:	0d0f0f0f 	stceq	15, cr0, [pc, #-60]	; 8010ba0 <Ssd1306::Start()+0x94>
 8010bd8:	4806      	ldr	r0, [pc, #24]	; (8010bf4 <console_set_fg_color+0x2c>)
 8010bda:	f000 bb8d 	b.w	80112f8 <uart0_puts>
 8010bde:	4806      	ldr	r0, [pc, #24]	; (8010bf8 <console_set_fg_color+0x30>)
 8010be0:	e7fb      	b.n	8010bda <console_set_fg_color+0x12>
 8010be2:	4806      	ldr	r0, [pc, #24]	; (8010bfc <console_set_fg_color+0x34>)
 8010be4:	e7f9      	b.n	8010bda <console_set_fg_color+0x12>
 8010be6:	4806      	ldr	r0, [pc, #24]	; (8010c00 <console_set_fg_color+0x38>)
 8010be8:	e7f7      	b.n	8010bda <console_set_fg_color+0x12>
 8010bea:	4806      	ldr	r0, [pc, #24]	; (8010c04 <console_set_fg_color+0x3c>)
 8010bec:	e7f5      	b.n	8010bda <console_set_fg_color+0x12>
 8010bee:	4806      	ldr	r0, [pc, #24]	; (8010c08 <console_set_fg_color+0x40>)
 8010bf0:	e7f3      	b.n	8010bda <console_set_fg_color+0x12>
 8010bf2:	bf00      	nop
 8010bf4:	08014f4a 	stmdaeq	r1, {r1, r3, r6, r8, r9, sl, fp, lr}
 8010bf8:	08014f50 	stmdaeq	r1, {r4, r6, r8, r9, sl, fp, lr}
 8010bfc:	08014f56 	stmdaeq	r1, {r1, r2, r4, r6, r8, r9, sl, fp, lr}
 8010c00:	08014f5c 	stmdaeq	r1, {r2, r3, r4, r6, r8, r9, sl, fp, lr}
 8010c04:	08013263 	stmdaeq	r1, {r0, r1, r5, r6, r9, ip, sp}
 8010c08:	08014f62 	stmdaeq	r1, {r1, r5, r6, r8, r9, sl, fp, lr}

08010c0c <console_error>:
 8010c0c:	b510      	push	{r4, lr}
 8010c0e:	4604      	mov	r4, r0
 8010c10:	4805      	ldr	r0, [pc, #20]	; (8010c28 <console_error+0x1c>)
 8010c12:	f000 fb71 	bl	80112f8 <uart0_puts>
 8010c16:	4620      	mov	r0, r4
 8010c18:	f000 fb6e 	bl	80112f8 <uart0_puts>
 8010c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c20:	4802      	ldr	r0, [pc, #8]	; (8010c2c <console_error+0x20>)
 8010c22:	f000 bb69 	b.w	80112f8 <uart0_puts>
 8010c26:	bf00      	nop
 8010c28:	08014f50 	stmdaeq	r1, {r4, r6, r8, r9, sl, fp, lr}
 8010c2c:	08013263 	stmdaeq	r1, {r0, r1, r5, r6, r9, ip, sp}

08010c30 <console_status>:
 8010c30:	b510      	push	{r4, lr}
 8010c32:	460c      	mov	r4, r1
 8010c34:	b280      	uxth	r0, r0
 8010c36:	f7ff ffc7 	bl	8010bc8 <console_set_fg_color>
 8010c3a:	4807      	ldr	r0, [pc, #28]	; (8010c58 <console_status+0x28>)
 8010c3c:	f000 fb5c 	bl	80112f8 <uart0_puts>
 8010c40:	4620      	mov	r0, r4
 8010c42:	f000 fb59 	bl	80112f8 <uart0_puts>
 8010c46:	200a      	movs	r0, #10
 8010c48:	f000 fb36 	bl	80112b8 <uart0_putc>
 8010c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c50:	4802      	ldr	r0, [pc, #8]	; (8010c5c <console_status+0x2c>)
 8010c52:	f000 bb51 	b.w	80112f8 <uart0_puts>
 8010c56:	bf00      	nop
 8010c58:	08014f44 	stmdaeq	r1, {r2, r6, r8, r9, sl, fp, lr}
 8010c5c:	08013263 	stmdaeq	r1, {r0, r1, r5, r6, r9, ip, sp}

08010c60 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
 8010c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c64:	4617      	mov	r7, r2
 8010c66:	461e      	mov	r6, r3
 8010c68:	4d14      	ldr	r5, [pc, #80]	; (8010cbc <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>)
 8010c6a:	4b15      	ldr	r3, [pc, #84]	; (8010cc0 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x60>)
 8010c6c:	b086      	sub	sp, #24
 8010c6e:	6018      	str	r0, [r3, #0]
 8010c70:	4604      	mov	r4, r0
 8010c72:	f105 0803 	add.w	r8, r5, #3
 8010c76:	2203      	movs	r2, #3
 8010c78:	4628      	mov	r0, r5
 8010c7a:	f000 f9e2 	bl	8011042 <memmove>
 8010c7e:	4639      	mov	r1, r7
 8010c80:	220b      	movs	r2, #11
 8010c82:	4640      	mov	r0, r8
 8010c84:	f000 f9dd 	bl	8011042 <memmove>
 8010c88:	f105 030e 	add.w	r3, r5, #14
 8010c8c:	4631      	mov	r1, r6
 8010c8e:	2208      	movs	r2, #8
 8010c90:	4618      	mov	r0, r3
 8010c92:	f000 f9d6 	bl	8011042 <memmove>
 8010c96:	2308      	movs	r3, #8
 8010c98:	e9cd 8303 	strd	r8, r3, [sp, #12]
 8010c9c:	230b      	movs	r3, #11
 8010c9e:	9302      	str	r3, [sp, #8]
 8010ca0:	4b08      	ldr	r3, [pc, #32]	; (8010cc4 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x64>)
 8010ca2:	9005      	str	r0, [sp, #20]
 8010ca4:	e9cd 5300 	strd	r5, r3, [sp]
 8010ca8:	213f      	movs	r1, #63	; 0x3f
 8010caa:	2303      	movs	r3, #3
 8010cac:	4a06      	ldr	r2, [pc, #24]	; (8010cc8 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x68>)
 8010cae:	4807      	ldr	r0, [pc, #28]	; (8010ccc <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x6c>)
 8010cb0:	f7f8 fb04 	bl	80092bc <snprintf>
 8010cb4:	4620      	mov	r0, r4
 8010cb6:	b006      	add	sp, #24
 8010cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cbc:	20009734 	andcs	r9, r0, r4, lsr r7
 8010cc0:	2000978c 	andcs	r9, r0, ip, lsl #15
 8010cc4:	080132a8 	stmdaeq	r1, {r3, r5, r7, r9, ip, sp}
 8010cc8:	08014f68 	stmdaeq	r1, {r3, r5, r6, r8, r9, sl, fp, lr}
 8010ccc:	2000974a 	andcs	r9, r0, sl, asr #14

08010cd0 <FirmwareVersion::Print(char const*)>:
 8010cd0:	b510      	push	{r4, lr}
 8010cd2:	460c      	mov	r4, r1
 8010cd4:	4804      	ldr	r0, [pc, #16]	; (8010ce8 <FirmwareVersion::Print(char const*)+0x18>)
 8010cd6:	f000 f9ec 	bl	80110b2 <puts>
 8010cda:	b124      	cbz	r4, 8010ce6 <FirmwareVersion::Print(char const*)+0x16>
 8010cdc:	4620      	mov	r0, r4
 8010cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ce2:	f000 b9e6 	b.w	80110b2 <puts>
 8010ce6:	bd10      	pop	{r4, pc}
 8010ce8:	2000974a 	andcs	r9, r0, sl, asr #14

08010cec <LedBlink::LedBlink()>:
 8010cec:	b538      	push	{r3, r4, r5, lr}
 8010cee:	2205      	movs	r2, #5
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	e9c0 3200 	strd	r3, r2, [r0]
 8010cf6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8010cfa:	6083      	str	r3, [r0, #8]
 8010cfc:	e9c0 2303 	strd	r2, r3, [r0, #12]
 8010d00:	6143      	str	r3, [r0, #20]
 8010d02:	4b09      	ldr	r3, [pc, #36]	; (8010d28 <LedBlink::LedBlink()+0x3c>)
 8010d04:	4d09      	ldr	r5, [pc, #36]	; (8010d2c <LedBlink::LedBlink()+0x40>)
 8010d06:	4604      	mov	r4, r0
 8010d08:	6018      	str	r0, [r3, #0]
 8010d0a:	f240 6004 	movw	r0, #1540	; 0x604
 8010d0e:	f000 fcf9 	bl	8011704 <rcu_periph_clock_enable>
 8010d12:	4628      	mov	r0, r5
 8010d14:	2301      	movs	r3, #1
 8010d16:	2203      	movs	r2, #3
 8010d18:	2110      	movs	r1, #16
 8010d1a:	f000 fc5b 	bl	80115d4 <gpio_init>
 8010d1e:	2301      	movs	r3, #1
 8010d20:	4620      	mov	r0, r4
 8010d22:	616b      	str	r3, [r5, #20]
 8010d24:	bd38      	pop	{r3, r4, r5, pc}
 8010d26:	bf00      	nop
 8010d28:	20009790 	mulcs	r0, r0, r7
 8010d2c:	40011000 	andmi	r1, r1, r0

08010d30 <LedBlink::SetMode(ledblink::Mode)>:
 8010d30:	6843      	ldr	r3, [r0, #4]
 8010d32:	428b      	cmp	r3, r1
 8010d34:	d02f      	beq.n	8010d96 <LedBlink::SetMode(ledblink::Mode)+0x66>
 8010d36:	6041      	str	r1, [r0, #4]
 8010d38:	2904      	cmp	r1, #4
 8010d3a:	d822      	bhi.n	8010d82 <LedBlink::SetMode(ledblink::Mode)+0x52>
 8010d3c:	e8df f001 	tbb	[pc, r1]
 8010d40:	18120321 	ldmdane	r2, {r0, r5, r8, r9}
 8010d44:	23ff001d 	mvnscs	r0, #29
 8010d48:	6003      	str	r3, [r0, #0]
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	2201      	movs	r2, #1
 8010d4e:	60c3      	str	r3, [r0, #12]
 8010d50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010d54:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8010d58:	611a      	str	r2, [r3, #16]
 8010d5a:	6880      	ldr	r0, [r0, #8]
 8010d5c:	b1d8      	cbz	r0, 8010d96 <LedBlink::SetMode(ledblink::Mode)+0x66>
 8010d5e:	6803      	ldr	r3, [r0, #0]
 8010d60:	689b      	ldr	r3, [r3, #8]
 8010d62:	4718      	bx	r3
 8010d64:	2301      	movs	r3, #1
 8010d66:	6003      	str	r3, [r0, #0]
 8010d68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010d6c:	60c3      	str	r3, [r0, #12]
 8010d6e:	e7f4      	b.n	8010d5a <LedBlink::SetMode(ledblink::Mode)+0x2a>
 8010d70:	2303      	movs	r3, #3
 8010d72:	6003      	str	r3, [r0, #0]
 8010d74:	f240 134d 	movw	r3, #333	; 0x14d
 8010d78:	e7f8      	b.n	8010d6c <LedBlink::SetMode(ledblink::Mode)+0x3c>
 8010d7a:	2305      	movs	r3, #5
 8010d7c:	6003      	str	r3, [r0, #0]
 8010d7e:	23c8      	movs	r3, #200	; 0xc8
 8010d80:	e7f4      	b.n	8010d6c <LedBlink::SetMode(ledblink::Mode)+0x3c>
 8010d82:	2300      	movs	r3, #0
 8010d84:	2201      	movs	r2, #1
 8010d86:	6003      	str	r3, [r0, #0]
 8010d88:	60c3      	str	r3, [r0, #12]
 8010d8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010d8e:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8010d92:	615a      	str	r2, [r3, #20]
 8010d94:	e7e1      	b.n	8010d5a <LedBlink::SetMode(ledblink::Mode)+0x2a>
 8010d96:	4770      	bx	lr

08010d98 <Hardware::Hardware()>:
 8010d98:	b570      	push	{r4, r5, r6, lr}
 8010d9a:	2400      	movs	r4, #0
 8010d9c:	4b26      	ldr	r3, [pc, #152]	; (8010e38 <Hardware::Hardware()+0xa0>)
 8010d9e:	b090      	sub	sp, #64	; 0x40
 8010da0:	6004      	str	r4, [r0, #0]
 8010da2:	7104      	strb	r4, [r0, #4]
 8010da4:	6018      	str	r0, [r3, #0]
 8010da6:	4605      	mov	r5, r0
 8010da8:	f7f6 fbaa 	bl	8007500 <console_init>
 8010dac:	f000 fab4 	bl	8011318 <systick_config>
 8010db0:	f001 fb66 	bl	8012480 <udelay_init()>
 8010db4:	f001 fb62 	bl	801247c <micros_init()>
 8010db8:	f240 701b 	movw	r0, #1819	; 0x71b
 8010dbc:	f000 fca2 	bl	8011704 <rcu_periph_clock_enable>
 8010dc0:	f240 701c 	movw	r0, #1820	; 0x71c
 8010dc4:	f000 fc9e 	bl	8011704 <rcu_periph_clock_enable>
 8010dc8:	4e1c      	ldr	r6, [pc, #112]	; (8010e3c <Hardware::Hardware()+0xa4>)
 8010dca:	f000 fc93 	bl	80116f4 <pmu_backup_write_enable>
 8010dce:	f000 fb41 	bl	8011454 <bkp_deinit>
 8010dd2:	4621      	mov	r1, r4
 8010dd4:	2002      	movs	r0, #2
 8010dd6:	f000 fb45 	bl	8011464 <bkp_data_write>
 8010dda:	f240 7004 	movw	r0, #1796	; 0x704
 8010dde:	f000 fc91 	bl	8011704 <rcu_periph_clock_enable>
 8010de2:	4630      	mov	r0, r6
 8010de4:	f000 fdec 	bl	80119c0 <timer_deinit>
 8010de8:	236b      	movs	r3, #107	; 0x6b
 8010dea:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010dee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010df2:	a903      	add	r1, sp, #12
 8010df4:	4630      	mov	r0, r6
 8010df6:	9305      	str	r3, [sp, #20]
 8010df8:	f000 fe44 	bl	8011a84 <timer_init>
 8010dfc:	4630      	mov	r0, r6
 8010dfe:	f000 fe99 	bl	8011b34 <timer_enable>
 8010e02:	f001 f807 	bl	8011e14 <gd32_adc_init()>
 8010e06:	2213      	movs	r2, #19
 8010e08:	2302      	movs	r3, #2
 8010e0a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8010e0e:	237a      	movs	r3, #122	; 0x7a
 8010e10:	a807      	add	r0, sp, #28
 8010e12:	930c      	str	r3, [sp, #48]	; 0x30
 8010e14:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8010e18:	9407      	str	r4, [sp, #28]
 8010e1a:	940f      	str	r4, [sp, #60]	; 0x3c
 8010e1c:	f000 f9a2 	bl	8011164 <mktime>
 8010e20:	4621      	mov	r1, r4
 8010e22:	e9cd 0401 	strd	r0, r4, [sp, #4]
 8010e26:	a801      	add	r0, sp, #4
 8010e28:	f000 fa12 	bl	8011250 <settimeofday>
 8010e2c:	f001 f84c 	bl	8011ec8 <gd32_i2c_begin()>
 8010e30:	4628      	mov	r0, r5
 8010e32:	b010      	add	sp, #64	; 0x40
 8010e34:	bd70      	pop	{r4, r5, r6, pc}
 8010e36:	bf00      	nop
 8010e38:	20009794 	mulcs	r0, r4, r7
 8010e3c:	40001000 	andmi	r1, r0, r0

08010e40 <Hardware::Reboot()>:
 8010e40:	b508      	push	{r3, lr}
 8010e42:	6803      	ldr	r3, [r0, #0]
 8010e44:	4604      	mov	r4, r0
 8010e46:	b153      	cbz	r3, 8010e5e <Hardware::Reboot()+0x1e>
 8010e48:	2300      	movs	r3, #0
 8010e4a:	2104      	movs	r1, #4
 8010e4c:	7103      	strb	r3, [r0, #4]
 8010e4e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8010e52:	f000 fb95 	bl	8011580 <fwdgt_config>
 8010e56:	6820      	ldr	r0, [r4, #0]
 8010e58:	6803      	ldr	r3, [r0, #0]
 8010e5a:	689b      	ldr	r3, [r3, #8]
 8010e5c:	4798      	blx	r3
 8010e5e:	2102      	movs	r1, #2
 8010e60:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8010e64:	f000 fb8c 	bl	8011580 <fwdgt_config>
 8010e68:	2801      	cmp	r0, #1
 8010e6a:	bf0c      	ite	eq
 8010e6c:	2301      	moveq	r3, #1
 8010e6e:	2300      	movne	r3, #0
 8010e70:	7123      	strb	r3, [r4, #4]
 8010e72:	d101      	bne.n	8010e78 <Hardware::Reboot()+0x38>
 8010e74:	f000 fb74 	bl	8011560 <fwdgt_enable>
 8010e78:	2208      	movs	r2, #8
 8010e7a:	4b0d      	ldr	r3, [pc, #52]	; (8010eb0 <Hardware::Reboot()+0x70>)
 8010e7c:	2501      	movs	r5, #1
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	480c      	ldr	r0, [pc, #48]	; (8010eb4 <Hardware::Reboot()+0x74>)
 8010e82:	601a      	str	r2, [r3, #0]
 8010e84:	227d      	movs	r2, #125	; 0x7d
 8010e86:	490c      	ldr	r1, [pc, #48]	; (8010eb8 <Hardware::Reboot()+0x78>)
 8010e88:	60da      	str	r2, [r3, #12]
 8010e8a:	68dc      	ldr	r4, [r3, #12]
 8010e8c:	b904      	cbnz	r4, 8010e90 <Hardware::Reboot()+0x50>
 8010e8e:	e7fe      	b.n	8010e8e <Hardware::Reboot()+0x4e>
 8010e90:	6802      	ldr	r2, [r0, #0]
 8010e92:	695e      	ldr	r6, [r3, #20]
 8010e94:	1b92      	subs	r2, r2, r6
 8010e96:	4294      	cmp	r4, r2
 8010e98:	d8f8      	bhi.n	8010e8c <Hardware::Reboot()+0x4c>
 8010e9a:	6802      	ldr	r2, [r0, #0]
 8010e9c:	615a      	str	r2, [r3, #20]
 8010e9e:	691a      	ldr	r2, [r3, #16]
 8010ea0:	2a01      	cmp	r2, #1
 8010ea2:	f082 0401 	eor.w	r4, r2, #1
 8010ea6:	611c      	str	r4, [r3, #16]
 8010ea8:	bf14      	ite	ne
 8010eaa:	610d      	strne	r5, [r1, #16]
 8010eac:	614a      	streq	r2, [r1, #20]
 8010eae:	e7ec      	b.n	8010e8a <Hardware::Reboot()+0x4a>
 8010eb0:	20009790 	mulcs	r0, r0, r7
 8010eb4:	200097ac 	andcs	r9, r0, ip, lsr #15
 8010eb8:	40011000 	andmi	r1, r1, r0

08010ebc <operator delete(void*)>:
 8010ebc:	f000 b890 	b.w	8010fe0 <free>

08010ec0 <operator delete[](void*)>:
 8010ec0:	f000 b88e 	b.w	8010fe0 <free>

08010ec4 <operator new(unsigned int)>:
 8010ec4:	f000 b842 	b.w	8010f4c <malloc>

08010ec8 <operator new[](unsigned int)>:
 8010ec8:	f000 b840 	b.w	8010f4c <malloc>

08010ecc <inet_aton>:
 8010ecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010ece:	f04f 0c0a 	mov.w	ip, #10
 8010ed2:	2500      	movs	r5, #0
 8010ed4:	ae01      	add	r6, sp, #4
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	2200      	movs	r2, #0
 8010eda:	1d07      	adds	r7, r0, #4
 8010edc:	e007      	b.n	8010eee <inet_aton+0x22>
 8010ede:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8010ee2:	2b09      	cmp	r3, #9
 8010ee4:	d820      	bhi.n	8010f28 <inet_aton+0x5c>
 8010ee6:	4603      	mov	r3, r0
 8010ee8:	fb0c 4202 	mla	r2, ip, r2, r4
 8010eec:	3a30      	subs	r2, #48	; 0x30
 8010eee:	4618      	mov	r0, r3
 8010ef0:	f810 4b01 	ldrb.w	r4, [r0], #1
 8010ef4:	2c2e      	cmp	r4, #46	; 0x2e
 8010ef6:	d111      	bne.n	8010f1c <inet_aton+0x50>
 8010ef8:	3501      	adds	r5, #1
 8010efa:	2d03      	cmp	r5, #3
 8010efc:	f806 2b01 	strb.w	r2, [r6], #1
 8010f00:	d1e9      	bne.n	8010ed6 <inet_aton+0xa>
 8010f02:	2200      	movs	r2, #0
 8010f04:	250a      	movs	r5, #10
 8010f06:	1d1c      	adds	r4, r3, #4
 8010f08:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8010f0c:	f010 0fdf 	tst.w	r0, #223	; 0xdf
 8010f10:	d10d      	bne.n	8010f2e <inet_aton+0x62>
 8010f12:	f88d 2007 	strb.w	r2, [sp, #7]
 8010f16:	b9b1      	cbnz	r1, 8010f46 <inet_aton+0x7a>
 8010f18:	2001      	movs	r0, #1
 8010f1a:	e006      	b.n	8010f2a <inet_aton+0x5e>
 8010f1c:	2c00      	cmp	r4, #0
 8010f1e:	d0eb      	beq.n	8010ef8 <inet_aton+0x2c>
 8010f20:	2c0a      	cmp	r4, #10
 8010f22:	d0e9      	beq.n	8010ef8 <inet_aton+0x2c>
 8010f24:	42b8      	cmp	r0, r7
 8010f26:	d1da      	bne.n	8010ede <inet_aton+0x12>
 8010f28:	2000      	movs	r0, #0
 8010f2a:	b003      	add	sp, #12
 8010f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f2e:	280a      	cmp	r0, #10
 8010f30:	d0ef      	beq.n	8010f12 <inet_aton+0x46>
 8010f32:	42a3      	cmp	r3, r4
 8010f34:	d0f8      	beq.n	8010f28 <inet_aton+0x5c>
 8010f36:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
 8010f3a:	2e09      	cmp	r6, #9
 8010f3c:	d8f4      	bhi.n	8010f28 <inet_aton+0x5c>
 8010f3e:	fb05 0202 	mla	r2, r5, r2, r0
 8010f42:	3a30      	subs	r2, #48	; 0x30
 8010f44:	e7e0      	b.n	8010f08 <inet_aton+0x3c>
 8010f46:	9b01      	ldr	r3, [sp, #4]
 8010f48:	600b      	str	r3, [r1, #0]
 8010f4a:	e7e5      	b.n	8010f18 <inet_aton+0x4c>

08010f4c <malloc>:
 8010f4c:	b538      	push	{r3, r4, r5, lr}
 8010f4e:	4604      	mov	r4, r0
 8010f50:	4601      	mov	r1, r0
 8010f52:	481c      	ldr	r0, [pc, #112]	; (8010fc4 <malloc+0x78>)
 8010f54:	f7f8 f9a2 	bl	800929c <printf>
 8010f58:	b17c      	cbz	r4, 8010f7a <malloc+0x2e>
 8010f5a:	4b1b      	ldr	r3, [pc, #108]	; (8010fc8 <malloc+0x7c>)
 8010f5c:	6818      	ldr	r0, [r3, #0]
 8010f5e:	b978      	cbnz	r0, 8010f80 <malloc+0x34>
 8010f60:	4a1a      	ldr	r2, [pc, #104]	; (8010fcc <malloc+0x80>)
 8010f62:	f104 031b 	add.w	r3, r4, #27
 8010f66:	6811      	ldr	r1, [r2, #0]
 8010f68:	4819      	ldr	r0, [pc, #100]	; (8010fd0 <malloc+0x84>)
 8010f6a:	f023 030f 	bic.w	r3, r3, #15
 8010f6e:	440b      	add	r3, r1
 8010f70:	4283      	cmp	r3, r0
 8010f72:	d921      	bls.n	8010fb8 <malloc+0x6c>
 8010f74:	4817      	ldr	r0, [pc, #92]	; (8010fd4 <malloc+0x88>)
 8010f76:	f7f8 f991 	bl	800929c <printf>
 8010f7a:	2500      	movs	r5, #0
 8010f7c:	4628      	mov	r0, r5
 8010f7e:	bd38      	pop	{r3, r4, r5, pc}
 8010f80:	4284      	cmp	r4, r0
 8010f82:	d80a      	bhi.n	8010f9a <malloc+0x4e>
 8010f84:	685a      	ldr	r2, [r3, #4]
 8010f86:	6899      	ldr	r1, [r3, #8]
 8010f88:	3201      	adds	r2, #1
 8010f8a:	428a      	cmp	r2, r1
 8010f8c:	605a      	str	r2, [r3, #4]
 8010f8e:	d900      	bls.n	8010f92 <malloc+0x46>
 8010f90:	609a      	str	r2, [r3, #8]
 8010f92:	68d9      	ldr	r1, [r3, #12]
 8010f94:	b919      	cbnz	r1, 8010f9e <malloc+0x52>
 8010f96:	4604      	mov	r4, r0
 8010f98:	e7e2      	b.n	8010f60 <malloc+0x14>
 8010f9a:	3310      	adds	r3, #16
 8010f9c:	e7de      	b.n	8010f5c <malloc+0x10>
 8010f9e:	4604      	mov	r4, r0
 8010fa0:	688a      	ldr	r2, [r1, #8]
 8010fa2:	60da      	str	r2, [r3, #12]
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	f101 050c 	add.w	r5, r1, #12
 8010faa:	608b      	str	r3, [r1, #8]
 8010fac:	4622      	mov	r2, r4
 8010fae:	462b      	mov	r3, r5
 8010fb0:	4809      	ldr	r0, [pc, #36]	; (8010fd8 <malloc+0x8c>)
 8010fb2:	f7f8 f973 	bl	800929c <printf>
 8010fb6:	e7e1      	b.n	8010f7c <malloc+0x30>
 8010fb8:	6013      	str	r3, [r2, #0]
 8010fba:	4b08      	ldr	r3, [pc, #32]	; (8010fdc <malloc+0x90>)
 8010fbc:	e9c1 3400 	strd	r3, r4, [r1]
 8010fc0:	e7f0      	b.n	8010fa4 <malloc+0x58>
 8010fc2:	bf00      	nop
 8010fc4:	08014f8c 	stmdaeq	r1, {r2, r3, r7, r8, r9, sl, fp, lr}
 8010fc8:	20000010 	andcs	r0, r0, r0, lsl r0
 8010fcc:	2000000c 	andcs	r0, r0, ip
 8010fd0:	20016800 	andcs	r6, r1, r0, lsl #16
 8010fd4:	08014f98 	stmdaeq	r1, {r3, r4, r7, r8, r9, sl, fp, lr}
 8010fd8:	08014fb4 	stmdaeq	r1, {r2, r4, r5, r7, r8, r9, sl, fp, lr}
 8010fdc:	424c4d43 	submi	r4, ip, #4288	; 0x10c0

08010fe0 <free>:
 8010fe0:	b538      	push	{r3, r4, r5, lr}
 8010fe2:	4604      	mov	r4, r0
 8010fe4:	b1c8      	cbz	r0, 801101a <free+0x3a>
 8010fe6:	f1a0 050c 	sub.w	r5, r0, #12
 8010fea:	4602      	mov	r2, r0
 8010fec:	4629      	mov	r1, r5
 8010fee:	480c      	ldr	r0, [pc, #48]	; (8011020 <free+0x40>)
 8010ff0:	f7f8 f954 	bl	800929c <printf>
 8010ff4:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8010ff8:	4b0a      	ldr	r3, [pc, #40]	; (8011024 <free+0x44>)
 8010ffa:	429a      	cmp	r2, r3
 8010ffc:	d10d      	bne.n	801101a <free+0x3a>
 8010ffe:	4b0a      	ldr	r3, [pc, #40]	; (8011028 <free+0x48>)
 8011000:	681a      	ldr	r2, [r3, #0]
 8011002:	b152      	cbz	r2, 801101a <free+0x3a>
 8011004:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8011008:	4291      	cmp	r1, r2
 801100a:	d107      	bne.n	801101c <free+0x3c>
 801100c:	68da      	ldr	r2, [r3, #12]
 801100e:	f844 2c04 	str.w	r2, [r4, #-4]
 8011012:	685a      	ldr	r2, [r3, #4]
 8011014:	60dd      	str	r5, [r3, #12]
 8011016:	3a01      	subs	r2, #1
 8011018:	605a      	str	r2, [r3, #4]
 801101a:	bd38      	pop	{r3, r4, r5, pc}
 801101c:	3310      	adds	r3, #16
 801101e:	e7ef      	b.n	8011000 <free+0x20>
 8011020:	08014fdf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, r8, r9, sl, fp, lr}
 8011024:	424c4d43 	submi	r4, ip, #4288	; 0x10c0
 8011028:	20000010 	andcs	r0, r0, r0, lsl r0

0801102c <memcpy>:
 801102c:	b510      	push	{r4, lr}
 801102e:	1e43      	subs	r3, r0, #1
 8011030:	440a      	add	r2, r1
 8011032:	4291      	cmp	r1, r2
 8011034:	d100      	bne.n	8011038 <memcpy+0xc>
 8011036:	bd10      	pop	{r4, pc}
 8011038:	f811 4b01 	ldrb.w	r4, [r1], #1
 801103c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011040:	e7f7      	b.n	8011032 <memcpy+0x6>

08011042 <memmove>:
 8011042:	4288      	cmp	r0, r1
 8011044:	b510      	push	{r4, lr}
 8011046:	eb01 0302 	add.w	r3, r1, r2
 801104a:	d208      	bcs.n	801105e <memmove+0x1c>
 801104c:	1e42      	subs	r2, r0, #1
 801104e:	4299      	cmp	r1, r3
 8011050:	d100      	bne.n	8011054 <memmove+0x12>
 8011052:	bd10      	pop	{r4, pc}
 8011054:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011058:	f802 4f01 	strb.w	r4, [r2, #1]!
 801105c:	e7f7      	b.n	801104e <memmove+0xc>
 801105e:	4601      	mov	r1, r0
 8011060:	4402      	add	r2, r0
 8011062:	428a      	cmp	r2, r1
 8011064:	d0f5      	beq.n	8011052 <memmove+0x10>
 8011066:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801106a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801106e:	e7f8      	b.n	8011062 <memmove+0x20>

08011070 <memset>:
 8011070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011072:	b1c2      	cbz	r2, 80110a6 <memset+0x36>
 8011074:	4603      	mov	r3, r0
 8011076:	b2c9      	uxtb	r1, r1
 8011078:	075c      	lsls	r4, r3, #29
 801107a:	d110      	bne.n	801109e <memset+0x2e>
 801107c:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
 8011080:	ea44 4704 	orr.w	r7, r4, r4, lsl #16
 8011084:	463d      	mov	r5, r7
 8011086:	461e      	mov	r6, r3
 8011088:	f022 0407 	bic.w	r4, r2, #7
 801108c:	441c      	add	r4, r3
 801108e:	42a6      	cmp	r6, r4
 8011090:	d10a      	bne.n	80110a8 <memset+0x38>
 8011092:	4413      	add	r3, r2
 8011094:	429c      	cmp	r4, r3
 8011096:	d006      	beq.n	80110a6 <memset+0x36>
 8011098:	f804 1b01 	strb.w	r1, [r4], #1
 801109c:	e7fa      	b.n	8011094 <memset+0x24>
 801109e:	3a01      	subs	r2, #1
 80110a0:	f803 1b01 	strb.w	r1, [r3], #1
 80110a4:	d1e8      	bne.n	8011078 <memset+0x8>
 80110a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110a8:	f846 7b08 	str.w	r7, [r6], #8
 80110ac:	f846 5c04 	str.w	r5, [r6, #-4]
 80110b0:	e7ed      	b.n	801108e <memset+0x1e>

080110b2 <puts>:
 80110b2:	b508      	push	{r3, lr}
 80110b4:	f7ff fd86 	bl	8010bc4 <console_puts>
 80110b8:	200a      	movs	r0, #10
 80110ba:	f7ff fd81 	bl	8010bc0 <console_putc>
 80110be:	2001      	movs	r0, #1
 80110c0:	bd08      	pop	{r3, pc}
	...

080110c4 <strtok>:
 80110c4:	b530      	push	{r4, r5, lr}
 80110c6:	b910      	cbnz	r0, 80110ce <strtok+0xa>
 80110c8:	4b12      	ldr	r3, [pc, #72]	; (8011114 <strtok+0x50>)
 80110ca:	6818      	ldr	r0, [r3, #0]
 80110cc:	b158      	cbz	r0, 80110e6 <strtok+0x22>
 80110ce:	4603      	mov	r3, r0
 80110d0:	460d      	mov	r5, r1
 80110d2:	4618      	mov	r0, r3
 80110d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80110d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80110dc:	b924      	cbnz	r4, 80110e8 <strtok+0x24>
 80110de:	b94a      	cbnz	r2, 80110f4 <strtok+0x30>
 80110e0:	4610      	mov	r0, r2
 80110e2:	4b0c      	ldr	r3, [pc, #48]	; (8011114 <strtok+0x50>)
 80110e4:	601a      	str	r2, [r3, #0]
 80110e6:	bd30      	pop	{r4, r5, pc}
 80110e8:	42a2      	cmp	r2, r4
 80110ea:	d1f5      	bne.n	80110d8 <strtok+0x14>
 80110ec:	e7f0      	b.n	80110d0 <strtok+0xc>
 80110ee:	4613      	mov	r3, r2
 80110f0:	e00c      	b.n	801110c <strtok+0x48>
 80110f2:	b914      	cbnz	r4, 80110fa <strtok+0x36>
 80110f4:	460d      	mov	r5, r1
 80110f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80110fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80110fe:	42a2      	cmp	r2, r4
 8011100:	d1f7      	bne.n	80110f2 <strtok+0x2e>
 8011102:	2a00      	cmp	r2, #0
 8011104:	d0f3      	beq.n	80110ee <strtok+0x2a>
 8011106:	2200      	movs	r2, #0
 8011108:	f803 2c01 	strb.w	r2, [r3, #-1]
 801110c:	4a01      	ldr	r2, [pc, #4]	; (8011114 <strtok+0x50>)
 801110e:	6013      	str	r3, [r2, #0]
 8011110:	e7e9      	b.n	80110e6 <strtok+0x22>
 8011112:	bf00      	nop
 8011114:	20009798 	mulcs	r0, r8, r7

08011118 <isleapyear>:
 8011118:	2264      	movs	r2, #100	; 0x64
 801111a:	fb90 f3f2 	sdiv	r3, r0, r2
 801111e:	fb02 0313 	mls	r3, r2, r3, r0
 8011122:	b94b      	cbnz	r3, 8011138 <isleapyear+0x20>
 8011124:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8011128:	fb90 f2f3 	sdiv	r2, r0, r3
 801112c:	fb03 0012 	mls	r0, r3, r2, r0
 8011130:	fab0 f080 	clz	r0, r0
 8011134:	0940      	lsrs	r0, r0, #5
 8011136:	4770      	bx	lr
 8011138:	f010 0f03 	tst.w	r0, #3
 801113c:	bf0c      	ite	eq
 801113e:	2001      	moveq	r0, #1
 8011140:	2000      	movne	r0, #0
 8011142:	4770      	bx	lr

08011144 <getdaysofmonth>:
 8011144:	b510      	push	{r4, lr}
 8011146:	4604      	mov	r4, r0
 8011148:	2c01      	cmp	r4, #1
 801114a:	4608      	mov	r0, r1
 801114c:	d102      	bne.n	8011154 <getdaysofmonth+0x10>
 801114e:	f7ff ffe3 	bl	8011118 <isleapyear>
 8011152:	b918      	cbnz	r0, 801115c <getdaysofmonth+0x18>
 8011154:	4b02      	ldr	r3, [pc, #8]	; (8011160 <getdaysofmonth+0x1c>)
 8011156:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801115a:	bd10      	pop	{r4, pc}
 801115c:	201d      	movs	r0, #29
 801115e:	e7fc      	b.n	801115a <getdaysofmonth+0x16>
 8011160:	08015008 	stmdaeq	r1, {r3, ip, lr}

08011164 <mktime>:
 8011164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011168:	4604      	mov	r4, r0
 801116a:	2800      	cmp	r0, #0
 801116c:	d043      	beq.n	80111f6 <mktime+0x92>
 801116e:	6941      	ldr	r1, [r0, #20]
 8011170:	f1a1 0346 	sub.w	r3, r1, #70	; 0x46
 8011174:	2b45      	cmp	r3, #69	; 0x45
 8011176:	d83e      	bhi.n	80111f6 <mktime+0x92>
 8011178:	2600      	movs	r6, #0
 801117a:	f240 75b2 	movw	r5, #1970	; 0x7b2
 801117e:	f240 186d 	movw	r8, #365	; 0x16d
 8011182:	f201 776b 	addw	r7, r1, #1899	; 0x76b
 8011186:	42af      	cmp	r7, r5
 8011188:	da24      	bge.n	80111d4 <mktime+0x70>
 801118a:	6927      	ldr	r7, [r4, #16]
 801118c:	2f0b      	cmp	r7, #11
 801118e:	d832      	bhi.n	80111f6 <mktime+0x92>
 8011190:	2500      	movs	r5, #0
 8011192:	42af      	cmp	r7, r5
 8011194:	d129      	bne.n	80111ea <mktime+0x86>
 8011196:	68e5      	ldr	r5, [r4, #12]
 8011198:	2d00      	cmp	r5, #0
 801119a:	dd2c      	ble.n	80111f6 <mktime+0x92>
 801119c:	4638      	mov	r0, r7
 801119e:	f7ff ffd1 	bl	8011144 <getdaysofmonth>
 80111a2:	4285      	cmp	r5, r0
 80111a4:	dc27      	bgt.n	80111f6 <mktime+0x92>
 80111a6:	2318      	movs	r3, #24
 80111a8:	3d01      	subs	r5, #1
 80111aa:	4435      	add	r5, r6
 80111ac:	435d      	muls	r5, r3
 80111ae:	68a3      	ldr	r3, [r4, #8]
 80111b0:	2b17      	cmp	r3, #23
 80111b2:	d820      	bhi.n	80111f6 <mktime+0x92>
 80111b4:	213c      	movs	r1, #60	; 0x3c
 80111b6:	442b      	add	r3, r5
 80111b8:	fb01 f203 	mul.w	r2, r1, r3
 80111bc:	6863      	ldr	r3, [r4, #4]
 80111be:	2b3b      	cmp	r3, #59	; 0x3b
 80111c0:	d819      	bhi.n	80111f6 <mktime+0x92>
 80111c2:	6820      	ldr	r0, [r4, #0]
 80111c4:	4413      	add	r3, r2
 80111c6:	283b      	cmp	r0, #59	; 0x3b
 80111c8:	fb01 f303 	mul.w	r3, r1, r3
 80111cc:	d813      	bhi.n	80111f6 <mktime+0x92>
 80111ce:	4418      	add	r0, r3
 80111d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111d4:	4628      	mov	r0, r5
 80111d6:	f7ff ff9f 	bl	8011118 <isleapyear>
 80111da:	2800      	cmp	r0, #0
 80111dc:	bf14      	ite	ne
 80111de:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 80111e2:	4643      	moveq	r3, r8
 80111e4:	3501      	adds	r5, #1
 80111e6:	441e      	add	r6, r3
 80111e8:	e7cd      	b.n	8011186 <mktime+0x22>
 80111ea:	4628      	mov	r0, r5
 80111ec:	f7ff ffaa 	bl	8011144 <getdaysofmonth>
 80111f0:	3501      	adds	r5, #1
 80111f2:	4406      	add	r6, r0
 80111f4:	e7cd      	b.n	8011192 <mktime+0x2e>
 80111f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80111fa:	e7e9      	b.n	80111d0 <mktime+0x6c>

080111fc <gettimeofday>:
 80111fc:	b538      	push	{r3, r4, r5, lr}
 80111fe:	4b10      	ldr	r3, [pc, #64]	; (8011240 <gettimeofday+0x44>)
 8011200:	4a10      	ldr	r2, [pc, #64]	; (8011244 <gettimeofday+0x48>)
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	6814      	ldr	r4, [r2, #0]
 8011206:	6013      	str	r3, [r2, #0]
 8011208:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801120c:	429c      	cmp	r4, r3
 801120e:	bf2c      	ite	cs
 8011210:	1ae4      	subcs	r4, r4, r3
 8011212:	1b1c      	subcc	r4, r3, r4
 8011214:	4354      	muls	r4, r2
 8011216:	4b0c      	ldr	r3, [pc, #48]	; (8011248 <gettimeofday+0x4c>)
 8011218:	4605      	mov	r5, r0
 801121a:	e9d3 2100 	ldrd	r2, r1, [r3]
 801121e:	18a4      	adds	r4, r4, r2
 8011220:	f141 0100 	adc.w	r1, r1, #0
 8011224:	e9c3 4100 	strd	r4, r1, [r3]
 8011228:	4620      	mov	r0, r4
 801122a:	2300      	movs	r3, #0
 801122c:	4a07      	ldr	r2, [pc, #28]	; (801124c <gettimeofday+0x50>)
 801122e:	f7f6 fe53 	bl	8007ed8 <__aeabi_uldivmod>
 8011232:	4b06      	ldr	r3, [pc, #24]	; (801124c <gettimeofday+0x50>)
 8011234:	6028      	str	r0, [r5, #0]
 8011236:	fb03 4410 	mls	r4, r3, r0, r4
 801123a:	2000      	movs	r0, #0
 801123c:	606c      	str	r4, [r5, #4]
 801123e:	bd38      	pop	{r3, r4, r5, pc}
 8011240:	200097ac 	andcs	r9, r0, ip, lsr #15
 8011244:	200097a8 	andcs	r9, r0, r8, lsr #15
 8011248:	200097a0 	andcs	r9, r0, r0, lsr #15
 801124c:	000f4240 	andeq	r4, pc, r0, asr #4

08011250 <settimeofday>:
 8011250:	4b07      	ldr	r3, [pc, #28]	; (8011270 <settimeofday+0x20>)
 8011252:	b510      	push	{r4, lr}
 8011254:	681a      	ldr	r2, [r3, #0]
 8011256:	4b07      	ldr	r3, [pc, #28]	; (8011274 <settimeofday+0x24>)
 8011258:	6804      	ldr	r4, [r0, #0]
 801125a:	601a      	str	r2, [r3, #0]
 801125c:	6843      	ldr	r3, [r0, #4]
 801125e:	4806      	ldr	r0, [pc, #24]	; (8011278 <settimeofday+0x28>)
 8011260:	17da      	asrs	r2, r3, #31
 8011262:	fbc4 3200 	smlal	r3, r2, r4, r0
 8011266:	4905      	ldr	r1, [pc, #20]	; (801127c <settimeofday+0x2c>)
 8011268:	2000      	movs	r0, #0
 801126a:	e9c1 3200 	strd	r3, r2, [r1]
 801126e:	bd10      	pop	{r4, pc}
 8011270:	200097ac 	andcs	r9, r0, ip, lsr #15
 8011274:	200097a8 	andcs	r9, r0, r8, lsr #15
 8011278:	000f4240 	andeq	r4, pc, r0, asr #4
 801127c:	200097a0 	andcs	r9, r0, r0, lsr #15

08011280 <time>:
 8011280:	b513      	push	{r0, r1, r4, lr}
 8011282:	4604      	mov	r4, r0
 8011284:	2100      	movs	r1, #0
 8011286:	4668      	mov	r0, sp
 8011288:	f7ff ffb8 	bl	80111fc <gettimeofday>
 801128c:	9800      	ldr	r0, [sp, #0]
 801128e:	b104      	cbz	r4, 8011292 <time+0x12>
 8011290:	6020      	str	r0, [r4, #0]
 8011292:	b002      	add	sp, #8
 8011294:	bd10      	pop	{r4, pc}
	...

08011298 <uart0_init>:
 8011298:	2301      	movs	r3, #1
 801129a:	b507      	push	{r0, r1, r2, lr}
 801129c:	2208      	movs	r2, #8
 801129e:	9300      	str	r3, [sp, #0]
 80112a0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80112a4:	2300      	movs	r3, #0
 80112a6:	4803      	ldr	r0, [pc, #12]	; (80112b4 <uart0_init+0x1c>)
 80112a8:	f001 f810 	bl	80122cc <gd32_uart_begin>
 80112ac:	b003      	add	sp, #12
 80112ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80112b2:	bf00      	nop
 80112b4:	40013800 	andmi	r3, r1, r0, lsl #16

080112b8 <uart0_putc>:
 80112b8:	280a      	cmp	r0, #10
 80112ba:	b538      	push	{r3, r4, r5, lr}
 80112bc:	4604      	mov	r4, r0
 80112be:	d10a      	bne.n	80112d6 <uart0_putc+0x1e>
 80112c0:	4d0b      	ldr	r5, [pc, #44]	; (80112f0 <uart0_putc+0x38>)
 80112c2:	2107      	movs	r1, #7
 80112c4:	4628      	mov	r0, r5
 80112c6:	f000 fcd3 	bl	8011c70 <usart_flag_get>
 80112ca:	2800      	cmp	r0, #0
 80112cc:	d0f9      	beq.n	80112c2 <uart0_putc+0xa>
 80112ce:	220d      	movs	r2, #13
 80112d0:	4b08      	ldr	r3, [pc, #32]	; (80112f4 <uart0_putc+0x3c>)
 80112d2:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 80112d6:	4d06      	ldr	r5, [pc, #24]	; (80112f0 <uart0_putc+0x38>)
 80112d8:	2107      	movs	r1, #7
 80112da:	4628      	mov	r0, r5
 80112dc:	f000 fcc8 	bl	8011c70 <usart_flag_get>
 80112e0:	2800      	cmp	r0, #0
 80112e2:	d0f9      	beq.n	80112d8 <uart0_putc+0x20>
 80112e4:	4b03      	ldr	r3, [pc, #12]	; (80112f4 <uart0_putc+0x3c>)
 80112e6:	b2e4      	uxtb	r4, r4
 80112e8:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
 80112ec:	bd38      	pop	{r3, r4, r5, pc}
 80112ee:	bf00      	nop
 80112f0:	40013800 	andmi	r3, r1, r0, lsl #16
 80112f4:	40013000 	andmi	r3, r1, r0

080112f8 <uart0_puts>:
 80112f8:	b510      	push	{r4, lr}
 80112fa:	1e44      	subs	r4, r0, #1
 80112fc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011300:	b903      	cbnz	r3, 8011304 <uart0_puts+0xc>
 8011302:	bd10      	pop	{r4, pc}
 8011304:	2b0a      	cmp	r3, #10
 8011306:	d102      	bne.n	801130e <uart0_puts+0x16>
 8011308:	200d      	movs	r0, #13
 801130a:	f7ff ffd5 	bl	80112b8 <uart0_putc>
 801130e:	7820      	ldrb	r0, [r4, #0]
 8011310:	f7ff ffd2 	bl	80112b8 <uart0_putc>
 8011314:	e7f2      	b.n	80112fc <uart0_puts+0x4>
	...

08011318 <systick_config>:
 8011318:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801131c:	4b0b      	ldr	r3, [pc, #44]	; (801134c <systick_config+0x34>)
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	fbb3 f3f2 	udiv	r3, r3, r2
 8011324:	3b01      	subs	r3, #1
 8011326:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801132a:	d20d      	bcs.n	8011348 <systick_config+0x30>
 801132c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8011330:	21f0      	movs	r1, #240	; 0xf0
 8011332:	6153      	str	r3, [r2, #20]
 8011334:	4b06      	ldr	r3, [pc, #24]	; (8011350 <systick_config+0x38>)
 8011336:	2007      	movs	r0, #7
 8011338:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 801133c:	2100      	movs	r1, #0
 801133e:	6191      	str	r1, [r2, #24]
 8011340:	6110      	str	r0, [r2, #16]
 8011342:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 8011346:	4770      	bx	lr
 8011348:	e7fe      	b.n	8011348 <systick_config+0x30>
 801134a:	bf00      	nop
 801134c:	200000e0 	andcs	r0, r0, r0, ror #1
 8011350:	e000ed00 	and	lr, r0, r0, lsl #26

08011354 <SysTick_Handler>:
 8011354:	4a02      	ldr	r2, [pc, #8]	; (8011360 <SysTick_Handler+0xc>)
 8011356:	6813      	ldr	r3, [r2, #0]
 8011358:	3301      	adds	r3, #1
 801135a:	6013      	str	r3, [r2, #0]
 801135c:	4770      	bx	lr
 801135e:	bf00      	nop
 8011360:	200097ac 	andcs	r9, r0, ip, lsr #15

08011364 <SystemInit>:
 8011364:	4b37      	ldr	r3, [pc, #220]	; (8011444 <SystemInit+0xe0>)
 8011366:	4938      	ldr	r1, [pc, #224]	; (8011448 <SystemInit+0xe4>)
 8011368:	681a      	ldr	r2, [r3, #0]
 801136a:	f042 0201 	orr.w	r2, r2, #1
 801136e:	601a      	str	r2, [r3, #0]
 8011370:	685a      	ldr	r2, [r3, #4]
 8011372:	f022 0203 	bic.w	r2, r2, #3
 8011376:	605a      	str	r2, [r3, #4]
 8011378:	681a      	ldr	r2, [r3, #0]
 801137a:	400a      	ands	r2, r1
 801137c:	601a      	str	r2, [r3, #0]
 801137e:	6858      	ldr	r0, [r3, #4]
 8011380:	4a32      	ldr	r2, [pc, #200]	; (801144c <SystemInit+0xe8>)
 8011382:	4002      	ands	r2, r0
 8011384:	605a      	str	r2, [r3, #4]
 8011386:	681a      	ldr	r2, [r3, #0]
 8011388:	400a      	ands	r2, r1
 801138a:	601a      	str	r2, [r3, #0]
 801138c:	681a      	ldr	r2, [r3, #0]
 801138e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011392:	601a      	str	r2, [r3, #0]
 8011394:	685a      	ldr	r2, [r3, #4]
 8011396:	f022 5203 	bic.w	r2, r2, #549453824	; 0x20c00000
 801139a:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 801139e:	605a      	str	r2, [r3, #4]
 80113a0:	2200      	movs	r2, #0
 80113a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80113a4:	681a      	ldr	r2, [r3, #0]
 80113a6:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80113aa:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80113ae:	601a      	str	r2, [r3, #0]
 80113b0:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80113b4:	609a      	str	r2, [r3, #8]
 80113b6:	681a      	ldr	r2, [r3, #0]
 80113b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80113bc:	601a      	str	r2, [r3, #0]
 80113be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80113c2:	6819      	ldr	r1, [r3, #0]
 80113c4:	0389      	lsls	r1, r1, #14
 80113c6:	d401      	bmi.n	80113cc <SystemInit+0x68>
 80113c8:	3a01      	subs	r2, #1
 80113ca:	d1fa      	bne.n	80113c2 <SystemInit+0x5e>
 80113cc:	681a      	ldr	r2, [r3, #0]
 80113ce:	0392      	lsls	r2, r2, #14
 80113d0:	d400      	bmi.n	80113d4 <SystemInit+0x70>
 80113d2:	e7fe      	b.n	80113d2 <SystemInit+0x6e>
 80113d4:	685a      	ldr	r2, [r3, #4]
 80113d6:	605a      	str	r2, [r3, #4]
 80113d8:	685a      	ldr	r2, [r3, #4]
 80113da:	605a      	str	r2, [r3, #4]
 80113dc:	685a      	ldr	r2, [r3, #4]
 80113de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80113e2:	605a      	str	r2, [r3, #4]
 80113e4:	685a      	ldr	r2, [r3, #4]
 80113e6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80113ea:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 80113ee:	605a      	str	r2, [r3, #4]
 80113f0:	685a      	ldr	r2, [r3, #4]
 80113f2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80113f6:	f442 1224 	orr.w	r2, r2, #2686976	; 0x290000
 80113fa:	605a      	str	r2, [r3, #4]
 80113fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80113fe:	4a14      	ldr	r2, [pc, #80]	; (8011450 <SystemInit+0xec>)
 8011400:	400a      	ands	r2, r1
 8011402:	62da      	str	r2, [r3, #44]	; 0x2c
 8011404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011406:	f442 3283 	orr.w	r2, r2, #67072	; 0x10600
 801140a:	f042 0249 	orr.w	r2, r2, #73	; 0x49
 801140e:	62da      	str	r2, [r3, #44]	; 0x2c
 8011410:	681a      	ldr	r2, [r3, #0]
 8011412:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8011416:	601a      	str	r2, [r3, #0]
 8011418:	681a      	ldr	r2, [r3, #0]
 801141a:	0110      	lsls	r0, r2, #4
 801141c:	d5fc      	bpl.n	8011418 <SystemInit+0xb4>
 801141e:	681a      	ldr	r2, [r3, #0]
 8011420:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8011424:	601a      	str	r2, [r3, #0]
 8011426:	681a      	ldr	r2, [r3, #0]
 8011428:	0191      	lsls	r1, r2, #6
 801142a:	d5fc      	bpl.n	8011426 <SystemInit+0xc2>
 801142c:	685a      	ldr	r2, [r3, #4]
 801142e:	f022 0203 	bic.w	r2, r2, #3
 8011432:	605a      	str	r2, [r3, #4]
 8011434:	685a      	ldr	r2, [r3, #4]
 8011436:	f042 0202 	orr.w	r2, r2, #2
 801143a:	605a      	str	r2, [r3, #4]
 801143c:	685a      	ldr	r2, [r3, #4]
 801143e:	0712      	lsls	r2, r2, #28
 8011440:	d5fc      	bpl.n	801143c <SystemInit+0xd8>
 8011442:	4770      	bx	lr
 8011444:	40021000 	andmi	r1, r2, r0
 8011448:	fef6ffff 	mrc2	15, 7, pc, cr6, cr15, {7}
 801144c:	e0ff000c 	rscs	r0, pc, ip
 8011450:	fffef000 			; <UNDEFINED> instruction: 0xfffef000

08011454 <bkp_deinit>:
 8011454:	b508      	push	{r3, lr}
 8011456:	f000 f975 	bl	8011744 <rcu_bkp_reset_enable>
 801145a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801145e:	f000 b979 	b.w	8011754 <rcu_bkp_reset_disable>
	...

08011464 <bkp_data_write>:
 8011464:	f1a0 030b 	sub.w	r3, r0, #11
 8011468:	2b1f      	cmp	r3, #31
 801146a:	d804      	bhi.n	8011476 <bkp_data_write+0x12>
 801146c:	4b07      	ldr	r3, [pc, #28]	; (801148c <bkp_data_write+0x28>)
 801146e:	4403      	add	r3, r0
 8011470:	009b      	lsls	r3, r3, #2
 8011472:	8019      	strh	r1, [r3, #0]
 8011474:	4770      	bx	lr
 8011476:	1e43      	subs	r3, r0, #1
 8011478:	2b09      	cmp	r3, #9
 801147a:	bf9f      	itttt	ls
 801147c:	f100 5080 	addls.w	r0, r0, #268435456	; 0x10000000
 8011480:	f500 50d8 	addls.w	r0, r0, #6912	; 0x1b00
 8011484:	0080      	lslls	r0, r0, #2
 8011486:	8001      	strhls	r1, [r0, #0]
 8011488:	4770      	bx	lr
 801148a:	bf00      	nop
 801148c:	10001b05 	andne	r1, r0, r5, lsl #22

08011490 <bkp_data_read>:
 8011490:	f1a0 030b 	sub.w	r3, r0, #11
 8011494:	2b1f      	cmp	r3, #31
 8011496:	d805      	bhi.n	80114a4 <bkp_data_read+0x14>
 8011498:	4b08      	ldr	r3, [pc, #32]	; (80114bc <bkp_data_read+0x2c>)
 801149a:	4403      	add	r3, r0
 801149c:	009b      	lsls	r3, r3, #2
 801149e:	8818      	ldrh	r0, [r3, #0]
 80114a0:	b280      	uxth	r0, r0
 80114a2:	4770      	bx	lr
 80114a4:	1e43      	subs	r3, r0, #1
 80114a6:	2b09      	cmp	r3, #9
 80114a8:	d806      	bhi.n	80114b8 <bkp_data_read+0x28>
 80114aa:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
 80114ae:	f500 50d8 	add.w	r0, r0, #6912	; 0x1b00
 80114b2:	0080      	lsls	r0, r0, #2
 80114b4:	8800      	ldrh	r0, [r0, #0]
 80114b6:	e7f3      	b.n	80114a0 <bkp_data_read+0x10>
 80114b8:	2000      	movs	r0, #0
 80114ba:	4770      	bx	lr
 80114bc:	10001b05 	andne	r1, r0, r5, lsl #22

080114c0 <fmc_bank0_unlock>:
 80114c0:	4b04      	ldr	r3, [pc, #16]	; (80114d4 <fmc_bank0_unlock+0x14>)
 80114c2:	691a      	ldr	r2, [r3, #16]
 80114c4:	0612      	lsls	r2, r2, #24
 80114c6:	bf41      	itttt	mi
 80114c8:	4a03      	ldrmi	r2, [pc, #12]	; (80114d8 <fmc_bank0_unlock+0x18>)
 80114ca:	605a      	strmi	r2, [r3, #4]
 80114cc:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 80114d0:	605a      	strmi	r2, [r3, #4]
 80114d2:	4770      	bx	lr
 80114d4:	40022000 	andmi	r2, r2, r0
 80114d8:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

080114dc <fmc_bank1_unlock>:
 80114dc:	4b04      	ldr	r3, [pc, #16]	; (80114f0 <fmc_bank1_unlock+0x14>)
 80114de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80114e0:	0612      	lsls	r2, r2, #24
 80114e2:	bf41      	itttt	mi
 80114e4:	4a03      	ldrmi	r2, [pc, #12]	; (80114f4 <fmc_bank1_unlock+0x18>)
 80114e6:	645a      	strmi	r2, [r3, #68]	; 0x44
 80114e8:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 80114ec:	645a      	strmi	r2, [r3, #68]	; 0x44
 80114ee:	4770      	bx	lr
 80114f0:	40022000 	andmi	r2, r2, r0
 80114f4:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

080114f8 <fmc_bank0_lock>:
 80114f8:	4a02      	ldr	r2, [pc, #8]	; (8011504 <fmc_bank0_lock+0xc>)
 80114fa:	6913      	ldr	r3, [r2, #16]
 80114fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011500:	6113      	str	r3, [r2, #16]
 8011502:	4770      	bx	lr
 8011504:	40022000 	andmi	r2, r2, r0

08011508 <fmc_bank1_lock>:
 8011508:	4a02      	ldr	r2, [pc, #8]	; (8011514 <fmc_bank1_lock+0xc>)
 801150a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 801150c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011510:	6513      	str	r3, [r2, #80]	; 0x50
 8011512:	4770      	bx	lr
 8011514:	40022000 	andmi	r2, r2, r0

08011518 <fmc_bank0_state_get>:
 8011518:	4b07      	ldr	r3, [pc, #28]	; (8011538 <fmc_bank0_state_get+0x20>)
 801151a:	68da      	ldr	r2, [r3, #12]
 801151c:	07d1      	lsls	r1, r2, #31
 801151e:	d407      	bmi.n	8011530 <fmc_bank0_state_get+0x18>
 8011520:	68da      	ldr	r2, [r3, #12]
 8011522:	06d2      	lsls	r2, r2, #27
 8011524:	d406      	bmi.n	8011534 <fmc_bank0_state_get+0x1c>
 8011526:	68d8      	ldr	r0, [r3, #12]
 8011528:	f3c0 0080 	ubfx	r0, r0, #2, #1
 801152c:	0040      	lsls	r0, r0, #1
 801152e:	4770      	bx	lr
 8011530:	2001      	movs	r0, #1
 8011532:	4770      	bx	lr
 8011534:	2003      	movs	r0, #3
 8011536:	4770      	bx	lr
 8011538:	40022000 	andmi	r2, r2, r0

0801153c <fmc_bank1_state_get>:
 801153c:	4b07      	ldr	r3, [pc, #28]	; (801155c <fmc_bank1_state_get+0x20>)
 801153e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011540:	07d1      	lsls	r1, r2, #31
 8011542:	d407      	bmi.n	8011554 <fmc_bank1_state_get+0x18>
 8011544:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011546:	06d2      	lsls	r2, r2, #27
 8011548:	d406      	bmi.n	8011558 <fmc_bank1_state_get+0x1c>
 801154a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801154c:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8011550:	0040      	lsls	r0, r0, #1
 8011552:	4770      	bx	lr
 8011554:	2001      	movs	r0, #1
 8011556:	4770      	bx	lr
 8011558:	2003      	movs	r0, #3
 801155a:	4770      	bx	lr
 801155c:	40022000 	andmi	r2, r2, r0

08011560 <fwdgt_enable>:
 8011560:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8011564:	4b01      	ldr	r3, [pc, #4]	; (801156c <fwdgt_enable+0xc>)
 8011566:	601a      	str	r2, [r3, #0]
 8011568:	4770      	bx	lr
 801156a:	bf00      	nop
 801156c:	40003000 	andmi	r3, r0, r0

08011570 <fwdgt_counter_reload>:
 8011570:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8011574:	4b01      	ldr	r3, [pc, #4]	; (801157c <fwdgt_counter_reload+0xc>)
 8011576:	601a      	str	r2, [r3, #0]
 8011578:	4770      	bx	lr
 801157a:	bf00      	nop
 801157c:	40003000 	andmi	r3, r0, r0

08011580 <fwdgt_config>:
 8011580:	f245 5355 	movw	r3, #21845	; 0x5555
 8011584:	4a11      	ldr	r2, [pc, #68]	; (80115cc <fwdgt_config+0x4c>)
 8011586:	b510      	push	{r4, lr}
 8011588:	4c11      	ldr	r4, [pc, #68]	; (80115d0 <fwdgt_config+0x50>)
 801158a:	6013      	str	r3, [r2, #0]
 801158c:	68d3      	ldr	r3, [r2, #12]
 801158e:	3c01      	subs	r4, #1
 8011590:	f003 0301 	and.w	r3, r3, #1
 8011594:	d013      	beq.n	80115be <fwdgt_config+0x3e>
 8011596:	2b00      	cmp	r3, #0
 8011598:	d1f8      	bne.n	801158c <fwdgt_config+0xc>
 801159a:	6051      	str	r1, [r2, #4]
 801159c:	490c      	ldr	r1, [pc, #48]	; (80115d0 <fwdgt_config+0x50>)
 801159e:	4a0b      	ldr	r2, [pc, #44]	; (80115cc <fwdgt_config+0x4c>)
 80115a0:	68d3      	ldr	r3, [r2, #12]
 80115a2:	3901      	subs	r1, #1
 80115a4:	f003 0302 	and.w	r3, r3, #2
 80115a8:	d00d      	beq.n	80115c6 <fwdgt_config+0x46>
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d1f8      	bne.n	80115a0 <fwdgt_config+0x20>
 80115ae:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 80115b2:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80115b6:	6090      	str	r0, [r2, #8]
 80115b8:	2001      	movs	r0, #1
 80115ba:	6013      	str	r3, [r2, #0]
 80115bc:	e002      	b.n	80115c4 <fwdgt_config+0x44>
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d0eb      	beq.n	801159a <fwdgt_config+0x1a>
 80115c2:	2000      	movs	r0, #0
 80115c4:	bd10      	pop	{r4, pc}
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d1fb      	bne.n	80115c2 <fwdgt_config+0x42>
 80115ca:	e7f0      	b.n	80115ae <fwdgt_config+0x2e>
 80115cc:	40003000 	andmi	r3, r0, r0
 80115d0:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

080115d4 <gpio_init>:
 80115d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115d8:	f04f 0c0f 	mov.w	ip, #15
 80115dc:	06cf      	lsls	r7, r1, #27
 80115de:	f04f 0400 	mov.w	r4, #0
 80115e2:	f04f 0701 	mov.w	r7, #1
 80115e6:	f001 050f 	and.w	r5, r1, #15
 80115ea:	bf48      	it	mi
 80115ec:	4315      	orrmi	r5, r2
 80115ee:	fa23 f204 	lsr.w	r2, r3, r4
 80115f2:	07d6      	lsls	r6, r2, #31
 80115f4:	d510      	bpl.n	8011618 <gpio_init+0x44>
 80115f6:	00a2      	lsls	r2, r4, #2
 80115f8:	6806      	ldr	r6, [r0, #0]
 80115fa:	fa0c fe02 	lsl.w	lr, ip, r2
 80115fe:	ea26 060e 	bic.w	r6, r6, lr
 8011602:	fa05 f202 	lsl.w	r2, r5, r2
 8011606:	2928      	cmp	r1, #40	; 0x28
 8011608:	ea42 0206 	orr.w	r2, r2, r6
 801160c:	d128      	bne.n	8011660 <gpio_init+0x8c>
 801160e:	fa07 f604 	lsl.w	r6, r7, r4
 8011612:	401e      	ands	r6, r3
 8011614:	6146      	str	r6, [r0, #20]
 8011616:	6002      	str	r2, [r0, #0]
 8011618:	3401      	adds	r4, #1
 801161a:	2c08      	cmp	r4, #8
 801161c:	d1e7      	bne.n	80115ee <gpio_init+0x1a>
 801161e:	2600      	movs	r6, #0
 8011620:	f04f 0c0f 	mov.w	ip, #15
 8011624:	2701      	movs	r7, #1
 8011626:	f106 0208 	add.w	r2, r6, #8
 801162a:	fa23 f402 	lsr.w	r4, r3, r2
 801162e:	07e4      	lsls	r4, r4, #31
 8011630:	d511      	bpl.n	8011656 <gpio_init+0x82>
 8011632:	00b4      	lsls	r4, r6, #2
 8011634:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8011638:	fa0c f804 	lsl.w	r8, ip, r4
 801163c:	ea2e 0e08 	bic.w	lr, lr, r8
 8011640:	fa05 f404 	lsl.w	r4, r5, r4
 8011644:	2928      	cmp	r1, #40	; 0x28
 8011646:	ea44 040e 	orr.w	r4, r4, lr
 801164a:	d110      	bne.n	801166e <gpio_init+0x9a>
 801164c:	fa07 f202 	lsl.w	r2, r7, r2
 8011650:	401a      	ands	r2, r3
 8011652:	6142      	str	r2, [r0, #20]
 8011654:	6044      	str	r4, [r0, #4]
 8011656:	3601      	adds	r6, #1
 8011658:	2e08      	cmp	r6, #8
 801165a:	d1e4      	bne.n	8011626 <gpio_init+0x52>
 801165c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011660:	2948      	cmp	r1, #72	; 0x48
 8011662:	bf02      	ittt	eq
 8011664:	fa07 f604 	lsleq.w	r6, r7, r4
 8011668:	401e      	andeq	r6, r3
 801166a:	6106      	streq	r6, [r0, #16]
 801166c:	e7d3      	b.n	8011616 <gpio_init+0x42>
 801166e:	2948      	cmp	r1, #72	; 0x48
 8011670:	bf02      	ittt	eq
 8011672:	fa07 f202 	lsleq.w	r2, r7, r2
 8011676:	401a      	andeq	r2, r3
 8011678:	6102      	streq	r2, [r0, #16]
 801167a:	e7eb      	b.n	8011654 <gpio_init+0x80>

0801167c <gpio_pin_remap_config>:
 801167c:	2800      	cmp	r0, #0
 801167e:	4a16      	ldr	r2, [pc, #88]	; (80116d8 <gpio_pin_remap_config+0x5c>)
 8011680:	b530      	push	{r4, r5, lr}
 8011682:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 8011686:	bfb4      	ite	lt
 8011688:	69d3      	ldrlt	r3, [r2, #28]
 801168a:	6853      	ldrge	r3, [r2, #4]
 801168c:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
 8011690:	b284      	uxth	r4, r0
 8011692:	d110      	bne.n	80116b6 <gpio_pin_remap_config+0x3a>
 8011694:	6855      	ldr	r5, [r2, #4]
 8011696:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 801169a:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 801169e:	6055      	str	r5, [r2, #4]
 80116a0:	b119      	cbz	r1, 80116aa <gpio_pin_remap_config+0x2e>
 80116a2:	0d42      	lsrs	r2, r0, #21
 80116a4:	0112      	lsls	r2, r2, #4
 80116a6:	4094      	lsls	r4, r2
 80116a8:	4323      	orrs	r3, r4
 80116aa:	4a0b      	ldr	r2, [pc, #44]	; (80116d8 <gpio_pin_remap_config+0x5c>)
 80116ac:	2800      	cmp	r0, #0
 80116ae:	bfb4      	ite	lt
 80116b0:	61d3      	strlt	r3, [r2, #28]
 80116b2:	6053      	strge	r3, [r2, #4]
 80116b4:	bd30      	pop	{r4, r5, pc}
 80116b6:	02c2      	lsls	r2, r0, #11
 80116b8:	bf4d      	iteet	mi
 80116ba:	2203      	movmi	r2, #3
 80116bc:	0d42      	lsrpl	r2, r0, #21
 80116be:	0112      	lslpl	r2, r2, #4
 80116c0:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
 80116c4:	bf4c      	ite	mi
 80116c6:	40aa      	lslmi	r2, r5
 80116c8:	fa04 f202 	lslpl.w	r2, r4, r2
 80116cc:	ea23 0302 	bic.w	r3, r3, r2
 80116d0:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80116d4:	e7e4      	b.n	80116a0 <gpio_pin_remap_config+0x24>
 80116d6:	bf00      	nop
 80116d8:	40010000 	andmi	r0, r1, r0

080116dc <gpio_ethernet_phy_select>:
 80116dc:	4b04      	ldr	r3, [pc, #16]	; (80116f0 <gpio_ethernet_phy_select+0x14>)
 80116de:	685a      	ldr	r2, [r3, #4]
 80116e0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80116e4:	605a      	str	r2, [r3, #4]
 80116e6:	685a      	ldr	r2, [r3, #4]
 80116e8:	4302      	orrs	r2, r0
 80116ea:	605a      	str	r2, [r3, #4]
 80116ec:	4770      	bx	lr
 80116ee:	bf00      	nop
 80116f0:	40010000 	andmi	r0, r1, r0

080116f4 <pmu_backup_write_enable>:
 80116f4:	4a02      	ldr	r2, [pc, #8]	; (8011700 <pmu_backup_write_enable+0xc>)
 80116f6:	6813      	ldr	r3, [r2, #0]
 80116f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80116fc:	6013      	str	r3, [r2, #0]
 80116fe:	4770      	bx	lr
 8011700:	40007000 	andmi	r7, r0, r0

08011704 <rcu_periph_clock_enable>:
 8011704:	2201      	movs	r2, #1
 8011706:	0983      	lsrs	r3, r0, #6
 8011708:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801170c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8011710:	6819      	ldr	r1, [r3, #0]
 8011712:	f000 001f 	and.w	r0, r0, #31
 8011716:	4082      	lsls	r2, r0
 8011718:	430a      	orrs	r2, r1
 801171a:	601a      	str	r2, [r3, #0]
 801171c:	4770      	bx	lr

0801171e <rcu_periph_clock_disable>:
 801171e:	2101      	movs	r1, #1
 8011720:	0983      	lsrs	r3, r0, #6
 8011722:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011726:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 801172a:	681a      	ldr	r2, [r3, #0]
 801172c:	f000 001f 	and.w	r0, r0, #31
 8011730:	4081      	lsls	r1, r0
 8011732:	ea22 0201 	bic.w	r2, r2, r1
 8011736:	601a      	str	r2, [r3, #0]
 8011738:	4770      	bx	lr

0801173a <rcu_periph_reset_enable>:
 801173a:	f7ff bfe3 	b.w	8011704 <rcu_periph_clock_enable>

0801173e <rcu_periph_reset_disable>:
 801173e:	f7ff bfee 	b.w	801171e <rcu_periph_clock_disable>
	...

08011744 <rcu_bkp_reset_enable>:
 8011744:	4a02      	ldr	r2, [pc, #8]	; (8011750 <rcu_bkp_reset_enable+0xc>)
 8011746:	6a13      	ldr	r3, [r2, #32]
 8011748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801174c:	6213      	str	r3, [r2, #32]
 801174e:	4770      	bx	lr
 8011750:	40021000 	andmi	r1, r2, r0

08011754 <rcu_bkp_reset_disable>:
 8011754:	4a02      	ldr	r2, [pc, #8]	; (8011760 <rcu_bkp_reset_disable+0xc>)
 8011756:	6a13      	ldr	r3, [r2, #32]
 8011758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801175c:	6213      	str	r3, [r2, #32]
 801175e:	4770      	bx	lr
 8011760:	40021000 	andmi	r1, r2, r0

08011764 <rcu_ckout0_config>:
 8011764:	4a03      	ldr	r2, [pc, #12]	; (8011774 <rcu_ckout0_config+0x10>)
 8011766:	6853      	ldr	r3, [r2, #4]
 8011768:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 801176c:	4303      	orrs	r3, r0
 801176e:	6053      	str	r3, [r2, #4]
 8011770:	4770      	bx	lr
 8011772:	bf00      	nop
 8011774:	40021000 	andmi	r1, r2, r0

08011778 <rcu_pll2_config>:
 8011778:	4b04      	ldr	r3, [pc, #16]	; (801178c <rcu_pll2_config+0x14>)
 801177a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801177c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8011780:	62da      	str	r2, [r3, #44]	; 0x2c
 8011782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011784:	4302      	orrs	r2, r0
 8011786:	62da      	str	r2, [r3, #44]	; 0x2c
 8011788:	4770      	bx	lr
 801178a:	bf00      	nop
 801178c:	40021000 	andmi	r1, r2, r0

08011790 <rcu_adc_clock_config>:
 8011790:	490c      	ldr	r1, [pc, #48]	; (80117c4 <rcu_adc_clock_config+0x34>)
 8011792:	2805      	cmp	r0, #5
 8011794:	684b      	ldr	r3, [r1, #4]
 8011796:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801179a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 801179e:	d006      	beq.n	80117ae <rcu_adc_clock_config+0x1e>
 80117a0:	d803      	bhi.n	80117aa <rcu_adc_clock_config+0x1a>
 80117a2:	2804      	cmp	r0, #4
 80117a4:	d10a      	bne.n	80117bc <rcu_adc_clock_config+0x2c>
 80117a6:	604b      	str	r3, [r1, #4]
 80117a8:	4770      	bx	lr
 80117aa:	2807      	cmp	r0, #7
 80117ac:	d1fb      	bne.n	80117a6 <rcu_adc_clock_config+0x16>
 80117ae:	4a06      	ldr	r2, [pc, #24]	; (80117c8 <rcu_adc_clock_config+0x38>)
 80117b0:	ea02 3280 	and.w	r2, r2, r0, lsl #14
 80117b4:	4313      	orrs	r3, r2
 80117b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80117ba:	e7f4      	b.n	80117a6 <rcu_adc_clock_config+0x16>
 80117bc:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 80117c0:	e7f1      	b.n	80117a6 <rcu_adc_clock_config+0x16>
 80117c2:	bf00      	nop
 80117c4:	40021000 	andmi	r1, r2, r0
 80117c8:	fffec000 			; <UNDEFINED> instruction: 0xfffec000

080117cc <rcu_flag_get>:
 80117cc:	0983      	lsrs	r3, r0, #6
 80117ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80117d2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80117d6:	681a      	ldr	r2, [r3, #0]
 80117d8:	2301      	movs	r3, #1
 80117da:	f000 001f 	and.w	r0, r0, #31
 80117de:	4083      	lsls	r3, r0
 80117e0:	4213      	tst	r3, r2
 80117e2:	bf14      	ite	ne
 80117e4:	2001      	movne	r0, #1
 80117e6:	2000      	moveq	r0, #0
 80117e8:	4770      	bx	lr
	...

080117ec <rcu_osci_stab_wait>:
 80117ec:	281a      	cmp	r0, #26
 80117ee:	b508      	push	{r3, lr}
 80117f0:	d051      	beq.n	8011896 <rcu_osci_stab_wait+0xaa>
 80117f2:	d806      	bhi.n	8011802 <rcu_osci_stab_wait+0x16>
 80117f4:	2810      	cmp	r0, #16
 80117f6:	d015      	beq.n	8011824 <rcu_osci_stab_wait+0x38>
 80117f8:	2818      	cmp	r0, #24
 80117fa:	d043      	beq.n	8011884 <rcu_osci_stab_wait+0x98>
 80117fc:	b368      	cbz	r0, 801185a <rcu_osci_stab_wait+0x6e>
 80117fe:	2000      	movs	r0, #0
 8011800:	bd08      	pop	{r3, pc}
 8011802:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8011806:	d01c      	beq.n	8011842 <rcu_osci_stab_wait+0x56>
 8011808:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
 801180c:	d02f      	beq.n	801186e <rcu_osci_stab_wait+0x82>
 801180e:	281c      	cmp	r0, #28
 8011810:	d1f5      	bne.n	80117fe <rcu_osci_stab_wait+0x12>
 8011812:	4925      	ldr	r1, [pc, #148]	; (80118a8 <rcu_osci_stab_wait+0xbc>)
 8011814:	201d      	movs	r0, #29
 8011816:	f7ff ffd9 	bl	80117cc <rcu_flag_get>
 801181a:	b908      	cbnz	r0, 8011820 <rcu_osci_stab_wait+0x34>
 801181c:	3901      	subs	r1, #1
 801181e:	d1f9      	bne.n	8011814 <rcu_osci_stab_wait+0x28>
 8011820:	201d      	movs	r0, #29
 8011822:	e008      	b.n	8011836 <rcu_osci_stab_wait+0x4a>
 8011824:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011828:	2011      	movs	r0, #17
 801182a:	f7ff ffcf 	bl	80117cc <rcu_flag_get>
 801182e:	b908      	cbnz	r0, 8011834 <rcu_osci_stab_wait+0x48>
 8011830:	3901      	subs	r1, #1
 8011832:	d1f9      	bne.n	8011828 <rcu_osci_stab_wait+0x3c>
 8011834:	2011      	movs	r0, #17
 8011836:	f7ff ffc9 	bl	80117cc <rcu_flag_get>
 801183a:	3800      	subs	r0, #0
 801183c:	bf18      	it	ne
 801183e:	2001      	movne	r0, #1
 8011840:	e7de      	b.n	8011800 <rcu_osci_stab_wait+0x14>
 8011842:	f06f 417c 	mvn.w	r1, #4227858432	; 0xfc000000
 8011846:	f640 0001 	movw	r0, #2049	; 0x801
 801184a:	f7ff ffbf 	bl	80117cc <rcu_flag_get>
 801184e:	b908      	cbnz	r0, 8011854 <rcu_osci_stab_wait+0x68>
 8011850:	3901      	subs	r1, #1
 8011852:	d1f8      	bne.n	8011846 <rcu_osci_stab_wait+0x5a>
 8011854:	f640 0001 	movw	r0, #2049	; 0x801
 8011858:	e7ed      	b.n	8011836 <rcu_osci_stab_wait+0x4a>
 801185a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 801185e:	2001      	movs	r0, #1
 8011860:	f7ff ffb4 	bl	80117cc <rcu_flag_get>
 8011864:	b908      	cbnz	r0, 801186a <rcu_osci_stab_wait+0x7e>
 8011866:	3901      	subs	r1, #1
 8011868:	d1f9      	bne.n	801185e <rcu_osci_stab_wait+0x72>
 801186a:	2001      	movs	r0, #1
 801186c:	e7e3      	b.n	8011836 <rcu_osci_stab_wait+0x4a>
 801186e:	490e      	ldr	r1, [pc, #56]	; (80118a8 <rcu_osci_stab_wait+0xbc>)
 8011870:	f640 1001 	movw	r0, #2305	; 0x901
 8011874:	f7ff ffaa 	bl	80117cc <rcu_flag_get>
 8011878:	b908      	cbnz	r0, 801187e <rcu_osci_stab_wait+0x92>
 801187a:	3901      	subs	r1, #1
 801187c:	d1f8      	bne.n	8011870 <rcu_osci_stab_wait+0x84>
 801187e:	f640 1001 	movw	r0, #2305	; 0x901
 8011882:	e7d8      	b.n	8011836 <rcu_osci_stab_wait+0x4a>
 8011884:	4908      	ldr	r1, [pc, #32]	; (80118a8 <rcu_osci_stab_wait+0xbc>)
 8011886:	2019      	movs	r0, #25
 8011888:	f7ff ffa0 	bl	80117cc <rcu_flag_get>
 801188c:	b908      	cbnz	r0, 8011892 <rcu_osci_stab_wait+0xa6>
 801188e:	3901      	subs	r1, #1
 8011890:	d1f9      	bne.n	8011886 <rcu_osci_stab_wait+0x9a>
 8011892:	2019      	movs	r0, #25
 8011894:	e7cf      	b.n	8011836 <rcu_osci_stab_wait+0x4a>
 8011896:	4904      	ldr	r1, [pc, #16]	; (80118a8 <rcu_osci_stab_wait+0xbc>)
 8011898:	201b      	movs	r0, #27
 801189a:	f7ff ff97 	bl	80117cc <rcu_flag_get>
 801189e:	b908      	cbnz	r0, 80118a4 <rcu_osci_stab_wait+0xb8>
 80118a0:	3901      	subs	r1, #1
 80118a2:	d1f9      	bne.n	8011898 <rcu_osci_stab_wait+0xac>
 80118a4:	201b      	movs	r0, #27
 80118a6:	e7c6      	b.n	8011836 <rcu_osci_stab_wait+0x4a>
 80118a8:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

080118ac <rcu_osci_on>:
 80118ac:	f7ff bf2a 	b.w	8011704 <rcu_periph_clock_enable>

080118b0 <rcu_clock_freq_get>:
 80118b0:	4b3e      	ldr	r3, [pc, #248]	; (80119ac <rcu_clock_freq_get+0xfc>)
 80118b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118b4:	4604      	mov	r4, r0
 80118b6:	461f      	mov	r7, r3
 80118b8:	b089      	sub	sp, #36	; 0x24
 80118ba:	ad04      	add	r5, sp, #16
 80118bc:	f103 0610 	add.w	r6, r3, #16
 80118c0:	462a      	mov	r2, r5
 80118c2:	6818      	ldr	r0, [r3, #0]
 80118c4:	6859      	ldr	r1, [r3, #4]
 80118c6:	3308      	adds	r3, #8
 80118c8:	c203      	stmia	r2!, {r0, r1}
 80118ca:	42b3      	cmp	r3, r6
 80118cc:	4615      	mov	r5, r2
 80118ce:	d1f7      	bne.n	80118c0 <rcu_clock_freq_get+0x10>
 80118d0:	466b      	mov	r3, sp
 80118d2:	6938      	ldr	r0, [r7, #16]
 80118d4:	6871      	ldr	r1, [r6, #4]
 80118d6:	4a36      	ldr	r2, [pc, #216]	; (80119b0 <rcu_clock_freq_get+0x100>)
 80118d8:	c303      	stmia	r3!, {r0, r1}
 80118da:	c303      	stmia	r3!, {r0, r1}
 80118dc:	6853      	ldr	r3, [r2, #4]
 80118de:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80118e2:	2b01      	cmp	r3, #1
 80118e4:	d053      	beq.n	801198e <rcu_clock_freq_get+0xde>
 80118e6:	2b02      	cmp	r3, #2
 80118e8:	d153      	bne.n	8011992 <rcu_clock_freq_get+0xe2>
 80118ea:	6853      	ldr	r3, [r2, #4]
 80118ec:	03dd      	lsls	r5, r3, #15
 80118ee:	d523      	bpl.n	8011938 <rcu_clock_freq_get+0x88>
 80118f0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80118f2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80118f6:	4b2f      	ldr	r3, [pc, #188]	; (80119b4 <rcu_clock_freq_get+0x104>)
 80118f8:	d00e      	beq.n	8011918 <rcu_clock_freq_get+0x68>
 80118fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80118fc:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80118fe:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8011902:	f3c0 2003 	ubfx	r0, r0, #8, #4
 8011906:	3101      	adds	r1, #1
 8011908:	280f      	cmp	r0, #15
 801190a:	f100 0502 	add.w	r5, r0, #2
 801190e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011912:	bf08      	it	eq
 8011914:	2514      	moveq	r5, #20
 8011916:	436b      	muls	r3, r5
 8011918:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 801191a:	f001 010f 	and.w	r1, r1, #15
 801191e:	3101      	adds	r1, #1
 8011920:	fbb3 f3f1 	udiv	r3, r3, r1
 8011924:	6851      	ldr	r1, [r2, #4]
 8011926:	6850      	ldr	r0, [r2, #4]
 8011928:	f3c1 4183 	ubfx	r1, r1, #18, #4
 801192c:	0080      	lsls	r0, r0, #2
 801192e:	d505      	bpl.n	801193c <rcu_clock_freq_get+0x8c>
 8011930:	f041 0110 	orr.w	r1, r1, #16
 8011934:	1c48      	adds	r0, r1, #1
 8011936:	e007      	b.n	8011948 <rcu_clock_freq_get+0x98>
 8011938:	4b1f      	ldr	r3, [pc, #124]	; (80119b8 <rcu_clock_freq_get+0x108>)
 801193a:	e7f3      	b.n	8011924 <rcu_clock_freq_get+0x74>
 801193c:	290f      	cmp	r1, #15
 801193e:	d0f9      	beq.n	8011934 <rcu_clock_freq_get+0x84>
 8011940:	290d      	cmp	r1, #13
 8011942:	f101 0002 	add.w	r0, r1, #2
 8011946:	d01d      	beq.n	8011984 <rcu_clock_freq_get+0xd4>
 8011948:	4358      	muls	r0, r3
 801194a:	6853      	ldr	r3, [r2, #4]
 801194c:	6851      	ldr	r1, [r2, #4]
 801194e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8011952:	6852      	ldr	r2, [r2, #4]
 8011954:	3320      	adds	r3, #32
 8011956:	446b      	add	r3, sp
 8011958:	f3c1 2102 	ubfx	r1, r1, #8, #3
 801195c:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 8011960:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8011964:	3120      	adds	r1, #32
 8011966:	3220      	adds	r2, #32
 8011968:	4469      	add	r1, sp
 801196a:	446a      	add	r2, sp
 801196c:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 8011970:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8011974:	fa20 f303 	lsr.w	r3, r0, r3
 8011978:	2c03      	cmp	r4, #3
 801197a:	d815      	bhi.n	80119a8 <rcu_clock_freq_get+0xf8>
 801197c:	e8df f004 	tbb	[pc, r4]
 8011980:	110e0b0c 	tstne	lr, ip, lsl #22
 8011984:	2006      	movs	r0, #6
 8011986:	0859      	lsrs	r1, r3, #1
 8011988:	fb00 1003 	mla	r0, r0, r3, r1
 801198c:	e7dd      	b.n	801194a <rcu_clock_freq_get+0x9a>
 801198e:	4809      	ldr	r0, [pc, #36]	; (80119b4 <rcu_clock_freq_get+0x104>)
 8011990:	e7db      	b.n	801194a <rcu_clock_freq_get+0x9a>
 8011992:	480a      	ldr	r0, [pc, #40]	; (80119bc <rcu_clock_freq_get+0x10c>)
 8011994:	e7d9      	b.n	801194a <rcu_clock_freq_get+0x9a>
 8011996:	4618      	mov	r0, r3
 8011998:	b009      	add	sp, #36	; 0x24
 801199a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801199c:	fa23 f001 	lsr.w	r0, r3, r1
 80119a0:	e7fa      	b.n	8011998 <rcu_clock_freq_get+0xe8>
 80119a2:	fa23 f002 	lsr.w	r0, r3, r2
 80119a6:	e7f7      	b.n	8011998 <rcu_clock_freq_get+0xe8>
 80119a8:	2000      	movs	r0, #0
 80119aa:	e7f5      	b.n	8011998 <rcu_clock_freq_get+0xe8>
 80119ac:	080131d8 	stmdaeq	r1, {r3, r4, r6, r7, r8, ip, sp}
 80119b0:	40021000 	andmi	r1, r2, r0
 80119b4:	017d7840 	cmneq	sp, r0, asr #16
 80119b8:	003d0900 	eorseq	r0, sp, r0, lsl #18
 80119bc:	007a1200 	rsbseq	r1, sl, r0, lsl #4

080119c0 <timer_deinit>:
 80119c0:	b508      	push	{r3, lr}
 80119c2:	4b2d      	ldr	r3, [pc, #180]	; (8011a78 <timer_deinit+0xb8>)
 80119c4:	4298      	cmp	r0, r3
 80119c6:	d048      	beq.n	8011a5a <timer_deinit+0x9a>
 80119c8:	d816      	bhi.n	80119f8 <timer_deinit+0x38>
 80119ca:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80119ce:	4298      	cmp	r0, r3
 80119d0:	d03c      	beq.n	8011a4c <timer_deinit+0x8c>
 80119d2:	d807      	bhi.n	80119e4 <timer_deinit+0x24>
 80119d4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80119d8:	d02a      	beq.n	8011a30 <timer_deinit+0x70>
 80119da:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80119de:	4298      	cmp	r0, r3
 80119e0:	d02d      	beq.n	8011a3e <timer_deinit+0x7e>
 80119e2:	bd08      	pop	{r3, pc}
 80119e4:	4b25      	ldr	r3, [pc, #148]	; (8011a7c <timer_deinit+0xbc>)
 80119e6:	4298      	cmp	r0, r3
 80119e8:	d1fb      	bne.n	80119e2 <timer_deinit+0x22>
 80119ea:	f240 4003 	movw	r0, #1027	; 0x403
 80119ee:	f7ff fea4 	bl	801173a <rcu_periph_reset_enable>
 80119f2:	f240 4003 	movw	r0, #1027	; 0x403
 80119f6:	e017      	b.n	8011a28 <timer_deinit+0x68>
 80119f8:	4b21      	ldr	r3, [pc, #132]	; (8011a80 <timer_deinit+0xc0>)
 80119fa:	4298      	cmp	r0, r3
 80119fc:	d00e      	beq.n	8011a1c <timer_deinit+0x5c>
 80119fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011a02:	4298      	cmp	r0, r3
 8011a04:	d030      	beq.n	8011a68 <timer_deinit+0xa8>
 8011a06:	f5a3 3390 	sub.w	r3, r3, #73728	; 0x12000
 8011a0a:	4298      	cmp	r0, r3
 8011a0c:	d1e9      	bne.n	80119e2 <timer_deinit+0x22>
 8011a0e:	f240 4005 	movw	r0, #1029	; 0x405
 8011a12:	f7ff fe92 	bl	801173a <rcu_periph_reset_enable>
 8011a16:	f240 4005 	movw	r0, #1029	; 0x405
 8011a1a:	e005      	b.n	8011a28 <timer_deinit+0x68>
 8011a1c:	f240 300b 	movw	r0, #779	; 0x30b
 8011a20:	f7ff fe8b 	bl	801173a <rcu_periph_reset_enable>
 8011a24:	f240 300b 	movw	r0, #779	; 0x30b
 8011a28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011a2c:	f7ff be87 	b.w	801173e <rcu_periph_reset_disable>
 8011a30:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8011a34:	f7ff fe81 	bl	801173a <rcu_periph_reset_enable>
 8011a38:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8011a3c:	e7f4      	b.n	8011a28 <timer_deinit+0x68>
 8011a3e:	f240 4001 	movw	r0, #1025	; 0x401
 8011a42:	f7ff fe7a 	bl	801173a <rcu_periph_reset_enable>
 8011a46:	f240 4001 	movw	r0, #1025	; 0x401
 8011a4a:	e7ed      	b.n	8011a28 <timer_deinit+0x68>
 8011a4c:	f240 4002 	movw	r0, #1026	; 0x402
 8011a50:	f7ff fe73 	bl	801173a <rcu_periph_reset_enable>
 8011a54:	f240 4002 	movw	r0, #1026	; 0x402
 8011a58:	e7e6      	b.n	8011a28 <timer_deinit+0x68>
 8011a5a:	f240 4004 	movw	r0, #1028	; 0x404
 8011a5e:	f7ff fe6c 	bl	801173a <rcu_periph_reset_enable>
 8011a62:	f240 4004 	movw	r0, #1028	; 0x404
 8011a66:	e7df      	b.n	8011a28 <timer_deinit+0x68>
 8011a68:	f240 300d 	movw	r0, #781	; 0x30d
 8011a6c:	f7ff fe65 	bl	801173a <rcu_periph_reset_enable>
 8011a70:	f240 300d 	movw	r0, #781	; 0x30d
 8011a74:	e7d8      	b.n	8011a28 <timer_deinit+0x68>
 8011a76:	bf00      	nop
 8011a78:	40001000 	andmi	r1, r0, r0
 8011a7c:	40000c00 	andmi	r0, r0, r0, lsl #24
 8011a80:	40012c00 	andmi	r2, r1, r0, lsl #24

08011a84 <timer_init>:
 8011a84:	880b      	ldrh	r3, [r1, #0]
 8011a86:	6283      	str	r3, [r0, #40]	; 0x28
 8011a88:	4b26      	ldr	r3, [pc, #152]	; (8011b24 <timer_init+0xa0>)
 8011a8a:	4298      	cmp	r0, r3
 8011a8c:	d018      	beq.n	8011ac0 <timer_init+0x3c>
 8011a8e:	f420 6240 	bic.w	r2, r0, #3072	; 0xc00
 8011a92:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8011a96:	f420 6380 	bic.w	r3, r0, #1024	; 0x400
 8011a9a:	d011      	beq.n	8011ac0 <timer_init+0x3c>
 8011a9c:	4a22      	ldr	r2, [pc, #136]	; (8011b28 <timer_init+0xa4>)
 8011a9e:	4290      	cmp	r0, r2
 8011aa0:	d00e      	beq.n	8011ac0 <timer_init+0x3c>
 8011aa2:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 8011aa6:	4290      	cmp	r0, r2
 8011aa8:	d00a      	beq.n	8011ac0 <timer_init+0x3c>
 8011aaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011aae:	4293      	cmp	r3, r2
 8011ab0:	d006      	beq.n	8011ac0 <timer_init+0x3c>
 8011ab2:	f5a2 329c 	sub.w	r2, r2, #79872	; 0x13800
 8011ab6:	4293      	cmp	r3, r2
 8011ab8:	d002      	beq.n	8011ac0 <timer_init+0x3c>
 8011aba:	4b1c      	ldr	r3, [pc, #112]	; (8011b2c <timer_init+0xa8>)
 8011abc:	4298      	cmp	r0, r3
 8011abe:	d10f      	bne.n	8011ae0 <timer_init+0x5c>
 8011ac0:	6803      	ldr	r3, [r0, #0]
 8011ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011ac6:	6003      	str	r3, [r0, #0]
 8011ac8:	884b      	ldrh	r3, [r1, #2]
 8011aca:	6802      	ldr	r2, [r0, #0]
 8011acc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011ad0:	4313      	orrs	r3, r2
 8011ad2:	6003      	str	r3, [r0, #0]
 8011ad4:	888b      	ldrh	r3, [r1, #4]
 8011ad6:	6802      	ldr	r2, [r0, #0]
 8011ad8:	f003 0310 	and.w	r3, r3, #16
 8011adc:	4313      	orrs	r3, r2
 8011ade:	6003      	str	r3, [r0, #0]
 8011ae0:	688b      	ldr	r3, [r1, #8]
 8011ae2:	62c3      	str	r3, [r0, #44]	; 0x2c
 8011ae4:	4b12      	ldr	r3, [pc, #72]	; (8011b30 <timer_init+0xac>)
 8011ae6:	4298      	cmp	r0, r3
 8011ae8:	d003      	beq.n	8011af2 <timer_init+0x6e>
 8011aea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011aee:	4298      	cmp	r0, r3
 8011af0:	d104      	bne.n	8011afc <timer_init+0x78>
 8011af2:	6943      	ldr	r3, [r0, #20]
 8011af4:	f043 0301 	orr.w	r3, r3, #1
 8011af8:	6143      	str	r3, [r0, #20]
 8011afa:	4770      	bx	lr
 8011afc:	6803      	ldr	r3, [r0, #0]
 8011afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011b02:	6003      	str	r3, [r0, #0]
 8011b04:	898b      	ldrh	r3, [r1, #12]
 8011b06:	6802      	ldr	r2, [r0, #0]
 8011b08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011b0c:	4313      	orrs	r3, r2
 8011b0e:	6003      	str	r3, [r0, #0]
 8011b10:	4b04      	ldr	r3, [pc, #16]	; (8011b24 <timer_init+0xa0>)
 8011b12:	4298      	cmp	r0, r3
 8011b14:	d002      	beq.n	8011b1c <timer_init+0x98>
 8011b16:	4b04      	ldr	r3, [pc, #16]	; (8011b28 <timer_init+0xa4>)
 8011b18:	4298      	cmp	r0, r3
 8011b1a:	d1ea      	bne.n	8011af2 <timer_init+0x6e>
 8011b1c:	7b8b      	ldrb	r3, [r1, #14]
 8011b1e:	6303      	str	r3, [r0, #48]	; 0x30
 8011b20:	e7e7      	b.n	8011af2 <timer_init+0x6e>
 8011b22:	bf00      	nop
 8011b24:	40012c00 	andmi	r2, r1, r0, lsl #24
 8011b28:	40013400 	andmi	r3, r1, r0, lsl #8
 8011b2c:	40002000 	andmi	r2, r0, r0
 8011b30:	40001000 	andmi	r1, r0, r0

08011b34 <timer_enable>:
 8011b34:	6803      	ldr	r3, [r0, #0]
 8011b36:	f043 0301 	orr.w	r3, r3, #1
 8011b3a:	6003      	str	r3, [r0, #0]
 8011b3c:	4770      	bx	lr
	...

08011b40 <usart_deinit>:
 8011b40:	b508      	push	{r3, lr}
 8011b42:	4b1d      	ldr	r3, [pc, #116]	; (8011bb8 <usart_deinit+0x78>)
 8011b44:	4298      	cmp	r0, r3
 8011b46:	d028      	beq.n	8011b9a <usart_deinit+0x5a>
 8011b48:	d808      	bhi.n	8011b5c <usart_deinit+0x1c>
 8011b4a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8011b4e:	4298      	cmp	r0, r3
 8011b50:	d015      	beq.n	8011b7e <usart_deinit+0x3e>
 8011b52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011b56:	4298      	cmp	r0, r3
 8011b58:	d018      	beq.n	8011b8c <usart_deinit+0x4c>
 8011b5a:	bd08      	pop	{r3, pc}
 8011b5c:	4b17      	ldr	r3, [pc, #92]	; (8011bbc <usart_deinit+0x7c>)
 8011b5e:	4298      	cmp	r0, r3
 8011b60:	d022      	beq.n	8011ba8 <usart_deinit+0x68>
 8011b62:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8011b66:	4298      	cmp	r0, r3
 8011b68:	d1f7      	bne.n	8011b5a <usart_deinit+0x1a>
 8011b6a:	f240 300e 	movw	r0, #782	; 0x30e
 8011b6e:	f7ff fde4 	bl	801173a <rcu_periph_reset_enable>
 8011b72:	f240 300e 	movw	r0, #782	; 0x30e
 8011b76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011b7a:	f7ff bde0 	b.w	801173e <rcu_periph_reset_disable>
 8011b7e:	f240 4011 	movw	r0, #1041	; 0x411
 8011b82:	f7ff fdda 	bl	801173a <rcu_periph_reset_enable>
 8011b86:	f240 4011 	movw	r0, #1041	; 0x411
 8011b8a:	e7f4      	b.n	8011b76 <usart_deinit+0x36>
 8011b8c:	f240 4012 	movw	r0, #1042	; 0x412
 8011b90:	f7ff fdd3 	bl	801173a <rcu_periph_reset_enable>
 8011b94:	f240 4012 	movw	r0, #1042	; 0x412
 8011b98:	e7ed      	b.n	8011b76 <usart_deinit+0x36>
 8011b9a:	f240 4013 	movw	r0, #1043	; 0x413
 8011b9e:	f7ff fdcc 	bl	801173a <rcu_periph_reset_enable>
 8011ba2:	f240 4013 	movw	r0, #1043	; 0x413
 8011ba6:	e7e6      	b.n	8011b76 <usart_deinit+0x36>
 8011ba8:	f240 4014 	movw	r0, #1044	; 0x414
 8011bac:	f7ff fdc5 	bl	801173a <rcu_periph_reset_enable>
 8011bb0:	f240 4014 	movw	r0, #1044	; 0x414
 8011bb4:	e7df      	b.n	8011b76 <usart_deinit+0x36>
 8011bb6:	bf00      	nop
 8011bb8:	40004c00 	andmi	r4, r0, r0, lsl #24
 8011bbc:	40005000 	andmi	r5, r0, r0

08011bc0 <usart_baudrate_set>:
 8011bc0:	b538      	push	{r3, r4, r5, lr}
 8011bc2:	4b11      	ldr	r3, [pc, #68]	; (8011c08 <usart_baudrate_set+0x48>)
 8011bc4:	4604      	mov	r4, r0
 8011bc6:	4298      	cmp	r0, r3
 8011bc8:	460d      	mov	r5, r1
 8011bca:	d01b      	beq.n	8011c04 <usart_baudrate_set+0x44>
 8011bcc:	d809      	bhi.n	8011be2 <usart_baudrate_set+0x22>
 8011bce:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8011bd2:	4298      	cmp	r0, r3
 8011bd4:	d016      	beq.n	8011c04 <usart_baudrate_set+0x44>
 8011bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011bda:	4298      	cmp	r0, r3
 8011bdc:	d012      	beq.n	8011c04 <usart_baudrate_set+0x44>
 8011bde:	2000      	movs	r0, #0
 8011be0:	e009      	b.n	8011bf6 <usart_baudrate_set+0x36>
 8011be2:	4b0a      	ldr	r3, [pc, #40]	; (8011c0c <usart_baudrate_set+0x4c>)
 8011be4:	4298      	cmp	r0, r3
 8011be6:	d00d      	beq.n	8011c04 <usart_baudrate_set+0x44>
 8011be8:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8011bec:	4298      	cmp	r0, r3
 8011bee:	d1f6      	bne.n	8011bde <usart_baudrate_set+0x1e>
 8011bf0:	2003      	movs	r0, #3
 8011bf2:	f7ff fe5d 	bl	80118b0 <rcu_clock_freq_get>
 8011bf6:	eb00 0155 	add.w	r1, r0, r5, lsr #1
 8011bfa:	fbb1 f1f5 	udiv	r1, r1, r5
 8011bfe:	b289      	uxth	r1, r1
 8011c00:	60a1      	str	r1, [r4, #8]
 8011c02:	bd38      	pop	{r3, r4, r5, pc}
 8011c04:	2002      	movs	r0, #2
 8011c06:	e7f4      	b.n	8011bf2 <usart_baudrate_set+0x32>
 8011c08:	40004c00 	andmi	r4, r0, r0, lsl #24
 8011c0c:	40005000 	andmi	r5, r0, r0

08011c10 <usart_parity_config>:
 8011c10:	68c3      	ldr	r3, [r0, #12]
 8011c12:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8011c16:	60c3      	str	r3, [r0, #12]
 8011c18:	68c3      	ldr	r3, [r0, #12]
 8011c1a:	430b      	orrs	r3, r1
 8011c1c:	60c3      	str	r3, [r0, #12]
 8011c1e:	4770      	bx	lr

08011c20 <usart_word_length_set>:
 8011c20:	68c3      	ldr	r3, [r0, #12]
 8011c22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011c26:	60c3      	str	r3, [r0, #12]
 8011c28:	68c3      	ldr	r3, [r0, #12]
 8011c2a:	430b      	orrs	r3, r1
 8011c2c:	60c3      	str	r3, [r0, #12]
 8011c2e:	4770      	bx	lr

08011c30 <usart_stop_bit_set>:
 8011c30:	6903      	ldr	r3, [r0, #16]
 8011c32:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8011c36:	6103      	str	r3, [r0, #16]
 8011c38:	6903      	ldr	r3, [r0, #16]
 8011c3a:	430b      	orrs	r3, r1
 8011c3c:	6103      	str	r3, [r0, #16]
 8011c3e:	4770      	bx	lr

08011c40 <usart_transmit_config>:
 8011c40:	68c3      	ldr	r3, [r0, #12]
 8011c42:	f023 0308 	bic.w	r3, r3, #8
 8011c46:	430b      	orrs	r3, r1
 8011c48:	60c3      	str	r3, [r0, #12]
 8011c4a:	4770      	bx	lr

08011c4c <usart_receive_config>:
 8011c4c:	68c3      	ldr	r3, [r0, #12]
 8011c4e:	f023 0304 	bic.w	r3, r3, #4
 8011c52:	430b      	orrs	r3, r1
 8011c54:	60c3      	str	r3, [r0, #12]
 8011c56:	4770      	bx	lr

08011c58 <usart_hardware_flow_rts_config>:
 8011c58:	6943      	ldr	r3, [r0, #20]
 8011c5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011c5e:	430b      	orrs	r3, r1
 8011c60:	6143      	str	r3, [r0, #20]
 8011c62:	4770      	bx	lr

08011c64 <usart_hardware_flow_cts_config>:
 8011c64:	6943      	ldr	r3, [r0, #20]
 8011c66:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011c6a:	430b      	orrs	r3, r1
 8011c6c:	6143      	str	r3, [r0, #20]
 8011c6e:	4770      	bx	lr

08011c70 <usart_flag_get>:
 8011c70:	098b      	lsrs	r3, r1, #6
 8011c72:	581a      	ldr	r2, [r3, r0]
 8011c74:	2301      	movs	r3, #1
 8011c76:	f001 011f 	and.w	r1, r1, #31
 8011c7a:	408b      	lsls	r3, r1
 8011c7c:	4213      	tst	r3, r2
 8011c7e:	bf14      	ite	ne
 8011c80:	2001      	movne	r0, #1
 8011c82:	2000      	moveq	r0, #0
 8011c84:	4770      	bx	lr
	...

08011c88 <emac_start>:
 8011c88:	b510      	push	{r4, lr}
 8011c8a:	4604      	mov	r4, r0
 8011c8c:	f240 6002 	movw	r0, #1538	; 0x602
 8011c90:	f7ff fd38 	bl	8011704 <rcu_periph_clock_enable>
 8011c94:	f240 6003 	movw	r0, #1539	; 0x603
 8011c98:	f7ff fd34 	bl	8011704 <rcu_periph_clock_enable>
 8011c9c:	f240 6004 	movw	r0, #1540	; 0x604
 8011ca0:	f7ff fd30 	bl	8011704 <rcu_periph_clock_enable>
 8011ca4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011ca8:	2203      	movs	r2, #3
 8011caa:	2118      	movs	r1, #24
 8011cac:	4846      	ldr	r0, [pc, #280]	; (8011dc8 <emac_start+0x140>)
 8011cae:	f7ff fc91 	bl	80115d4 <gpio_init>
 8011cb2:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8011cb6:	f7ff fd25 	bl	8011704 <rcu_periph_clock_enable>
 8011cba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8011cbe:	f7ff fd5b 	bl	8011778 <rcu_pll2_config>
 8011cc2:	201c      	movs	r0, #28
 8011cc4:	f7ff fdf2 	bl	80118ac <rcu_osci_on>
 8011cc8:	201c      	movs	r0, #28
 8011cca:	f7ff fd8f 	bl	80117ec <rcu_osci_stab_wait>
 8011cce:	f04f 6030 	mov.w	r0, #184549376	; 0xb000000
 8011cd2:	f7ff fd47 	bl	8011764 <rcu_ckout0_config>
 8011cd6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8011cda:	f7ff fcff 	bl	80116dc <gpio_ethernet_phy_select>
 8011cde:	2302      	movs	r3, #2
 8011ce0:	2203      	movs	r2, #3
 8011ce2:	2104      	movs	r1, #4
 8011ce4:	4838      	ldr	r0, [pc, #224]	; (8011dc8 <emac_start+0x140>)
 8011ce6:	f7ff fc75 	bl	80115d4 <gpio_init>
 8011cea:	2304      	movs	r3, #4
 8011cec:	2203      	movs	r2, #3
 8011cee:	2118      	movs	r1, #24
 8011cf0:	4835      	ldr	r0, [pc, #212]	; (8011dc8 <emac_start+0x140>)
 8011cf2:	f7ff fc6f 	bl	80115d4 <gpio_init>
 8011cf6:	2380      	movs	r3, #128	; 0x80
 8011cf8:	2203      	movs	r2, #3
 8011cfa:	2104      	movs	r1, #4
 8011cfc:	4832      	ldr	r0, [pc, #200]	; (8011dc8 <emac_start+0x140>)
 8011cfe:	f7ff fc69 	bl	80115d4 <gpio_init>
 8011d02:	2302      	movs	r3, #2
 8011d04:	2203      	movs	r2, #3
 8011d06:	2118      	movs	r1, #24
 8011d08:	4830      	ldr	r0, [pc, #192]	; (8011dcc <emac_start+0x144>)
 8011d0a:	f7ff fc63 	bl	80115d4 <gpio_init>
 8011d0e:	2310      	movs	r3, #16
 8011d10:	2203      	movs	r2, #3
 8011d12:	2104      	movs	r1, #4
 8011d14:	482d      	ldr	r0, [pc, #180]	; (8011dcc <emac_start+0x144>)
 8011d16:	f7ff fc5d 	bl	80115d4 <gpio_init>
 8011d1a:	2320      	movs	r3, #32
 8011d1c:	2203      	movs	r2, #3
 8011d1e:	2104      	movs	r1, #4
 8011d20:	482a      	ldr	r0, [pc, #168]	; (8011dcc <emac_start+0x144>)
 8011d22:	f7ff fc57 	bl	80115d4 <gpio_init>
 8011d26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011d2a:	2203      	movs	r2, #3
 8011d2c:	2118      	movs	r1, #24
 8011d2e:	4828      	ldr	r0, [pc, #160]	; (8011dd0 <emac_start+0x148>)
 8011d30:	f7ff fc50 	bl	80115d4 <gpio_init>
 8011d34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d38:	2203      	movs	r2, #3
 8011d3a:	2118      	movs	r1, #24
 8011d3c:	4824      	ldr	r0, [pc, #144]	; (8011dd0 <emac_start+0x148>)
 8011d3e:	f7ff fc49 	bl	80115d4 <gpio_init>
 8011d42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011d46:	2203      	movs	r2, #3
 8011d48:	2118      	movs	r1, #24
 8011d4a:	4821      	ldr	r0, [pc, #132]	; (8011dd0 <emac_start+0x148>)
 8011d4c:	f7ff fc42 	bl	80115d4 <gpio_init>
 8011d50:	f240 500e 	movw	r0, #1294	; 0x50e
 8011d54:	f7ff fcd6 	bl	8011704 <rcu_periph_clock_enable>
 8011d58:	f240 500f 	movw	r0, #1295	; 0x50f
 8011d5c:	f7ff fcd2 	bl	8011704 <rcu_periph_clock_enable>
 8011d60:	f44f 60a2 	mov.w	r0, #1296	; 0x510
 8011d64:	f7ff fcce 	bl	8011704 <rcu_periph_clock_enable>
 8011d68:	f001 f8dc 	bl	8012f24 <enet_deinit>
 8011d6c:	f000 fd3a 	bl	80127e4 <enet_software_reset>
 8011d70:	b900      	cbnz	r0, 8011d74 <emac_start+0xec>
 8011d72:	e7fe      	b.n	8011d72 <emac_start+0xea>
 8011d74:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011d78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011d7c:	2001      	movs	r0, #1
 8011d7e:	f000 feb5 	bl	8012aec <enet_init>
 8011d82:	4b14      	ldr	r3, [pc, #80]	; (8011dd4 <emac_start+0x14c>)
 8011d84:	6018      	str	r0, [r3, #0]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	b903      	cbnz	r3, 8011d8c <emac_start+0x104>
 8011d8a:	e7fe      	b.n	8011d8a <emac_start+0x102>
 8011d8c:	4620      	mov	r0, r4
 8011d8e:	f000 fba3 	bl	80124d8 <mac_address_get>
 8011d92:	4621      	mov	r1, r4
 8011d94:	2000      	movs	r0, #0
 8011d96:	f000 fe09 	bl	80129ac <enet_mac_address_set>
 8011d9a:	f44f 00e0 	mov.w	r0, #7340032	; 0x700000
 8011d9e:	f000 fd35 	bl	801280c <enet_descriptors_chain_init>
 8011da2:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
 8011da6:	f000 fd31 	bl	801280c <enet_descriptors_chain_init>
 8011daa:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8011dae:	480a      	ldr	r0, [pc, #40]	; (8011dd8 <emac_start+0x150>)
 8011db0:	f000 fdf6 	bl	80129a0 <enet_transmit_checksum_config>
 8011db4:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8011db8:	4808      	ldr	r0, [pc, #32]	; (8011ddc <emac_start+0x154>)
 8011dba:	f000 fdf1 	bl	80129a0 <enet_transmit_checksum_config>
 8011dbe:	f001 f829 	bl	8012e14 <enet_enable>
 8011dc2:	2001      	movs	r0, #1
 8011dc4:	bd10      	pop	{r4, pc}
 8011dc6:	bf00      	nop
 8011dc8:	40010800 	andmi	r0, r1, r0, lsl #16
 8011dcc:	40011000 	andmi	r1, r1, r0
 8011dd0:	40010c00 	andmi	r0, r1, r0, lsl #24
 8011dd4:	200097b0 			; <UNDEFINED> instruction: 0x200097b0
 8011dd8:	20011bfc 	strdcs	r1, [r1], -ip
 8011ddc:	20011c0c 	andcs	r1, r1, ip, lsl #24

08011de0 <emac_eth_recv>:
 8011de0:	b538      	push	{r3, r4, r5, lr}
 8011de2:	4605      	mov	r5, r0
 8011de4:	f001 f86e 	bl	8012ec4 <enet_rxframe_size_get>
 8011de8:	4604      	mov	r4, r0
 8011dea:	b138      	cbz	r0, 8011dfc <emac_eth_recv+0x1c>
 8011dec:	4b05      	ldr	r3, [pc, #20]	; (8011e04 <emac_eth_recv+0x24>)
 8011dee:	2105      	movs	r1, #5
 8011df0:	6818      	ldr	r0, [r3, #0]
 8011df2:	f001 f816 	bl	8012e22 <enet_desc_information_get>
 8011df6:	6028      	str	r0, [r5, #0]
 8011df8:	4620      	mov	r0, r4
 8011dfa:	bd38      	pop	{r3, r4, r5, pc}
 8011dfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e00:	e7fb      	b.n	8011dfa <emac_eth_recv+0x1a>
 8011e02:	bf00      	nop
 8011e04:	2000f7c0 	andcs	pc, r0, r0, asr #15

08011e08 <emac_free_pkt>:
 8011e08:	2100      	movs	r1, #0
 8011e0a:	4608      	mov	r0, r1
 8011e0c:	f000 bd46 	b.w	801289c <enet_frame_receive>

08011e10 <emac_eth_send>:
 8011e10:	f000 bd84 	b.w	801291c <enet_frame_transmit>

08011e14 <gd32_adc_init()>:
 8011e14:	b510      	push	{r4, lr}
 8011e16:	f240 6009 	movw	r0, #1545	; 0x609
 8011e1a:	4c21      	ldr	r4, [pc, #132]	; (8011ea0 <gd32_adc_init()+0x8c>)
 8011e1c:	f7ff fc72 	bl	8011704 <rcu_periph_clock_enable>
 8011e20:	2005      	movs	r0, #5
 8011e22:	f7ff fcb5 	bl	8011790 <rcu_adc_clock_config>
 8011e26:	4620      	mov	r0, r4
 8011e28:	2201      	movs	r2, #1
 8011e2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011e2e:	f000 fb75 	bl	801251c <adc_special_function_config>
 8011e32:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8011e36:	4620      	mov	r0, r4
 8011e38:	2102      	movs	r1, #2
 8011e3a:	f000 fc0e 	bl	801265a <adc_external_trigger_source_config>
 8011e3e:	2100      	movs	r1, #0
 8011e40:	4620      	mov	r0, r4
 8011e42:	f000 fb93 	bl	801256c <adc_data_alignment_config>
 8011e46:	2000      	movs	r0, #0
 8011e48:	f000 fb58 	bl	80124fc <adc_mode_config>
 8011e4c:	2202      	movs	r2, #2
 8011e4e:	4620      	mov	r0, r4
 8011e50:	4611      	mov	r1, r2
 8011e52:	f000 fbb7 	bl	80125c4 <adc_channel_length_config>
 8011e56:	4620      	mov	r0, r4
 8011e58:	2307      	movs	r3, #7
 8011e5a:	2210      	movs	r2, #16
 8011e5c:	2100      	movs	r1, #0
 8011e5e:	f000 fbce 	bl	80125fe <adc_inserted_channel_config>
 8011e62:	2307      	movs	r3, #7
 8011e64:	4620      	mov	r0, r4
 8011e66:	2211      	movs	r2, #17
 8011e68:	2101      	movs	r1, #1
 8011e6a:	f000 fbc8 	bl	80125fe <adc_inserted_channel_config>
 8011e6e:	2201      	movs	r2, #1
 8011e70:	2102      	movs	r1, #2
 8011e72:	4620      	mov	r0, r4
 8011e74:	f000 fc02 	bl	801267c <adc_external_trigger_config>
 8011e78:	f000 fb9a 	bl	80125b0 <adc_tempsensor_vrefint_enable>
 8011e7c:	4620      	mov	r0, r4
 8011e7e:	f000 fb7e 	bl	801257e <adc_enable>
 8011e82:	2100      	movs	r1, #0
 8011e84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011e88:	f000 fb0e 	bl	80124a8 <udelay(unsigned int, unsigned int)>
 8011e8c:	4620      	mov	r0, r4
 8011e8e:	f000 fb7e 	bl	801258e <adc_calibration_enable>
 8011e92:	4620      	mov	r0, r4
 8011e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e98:	2102      	movs	r1, #2
 8011e9a:	f000 bc0a 	b.w	80126b2 <adc_software_trigger_enable>
 8011e9e:	bf00      	nop
 8011ea0:	40012400 	andmi	r2, r1, r0, lsl #8

08011ea4 <_stop() [clone .isra.0]>:
 8011ea4:	b508      	push	{r3, lr}
 8011ea6:	4806      	ldr	r0, [pc, #24]	; (8011ec0 <_stop() [clone .isra.0]+0x1c>)
 8011ea8:	f001 f8d0 	bl	801304c <i2c_stop_on_bus>
 8011eac:	f640 73ff 	movw	r3, #4095	; 0xfff
 8011eb0:	4904      	ldr	r1, [pc, #16]	; (8011ec4 <_stop() [clone .isra.0]+0x20>)
 8011eb2:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 8011eb6:	0592      	lsls	r2, r2, #22
 8011eb8:	d501      	bpl.n	8011ebe <_stop() [clone .isra.0]+0x1a>
 8011eba:	3b01      	subs	r3, #1
 8011ebc:	d1f9      	bne.n	8011eb2 <_stop() [clone .isra.0]+0xe>
 8011ebe:	bd08      	pop	{r3, pc}
 8011ec0:	40005400 	andmi	r5, r0, r0, lsl #8
 8011ec4:	40005000 	andmi	r5, r0, r0

08011ec8 <gd32_i2c_begin()>:
 8011ec8:	b510      	push	{r4, lr}
 8011eca:	f240 7015 	movw	r0, #1813	; 0x715
 8011ece:	f7ff fc19 	bl	8011704 <rcu_periph_clock_enable>
 8011ed2:	4c15      	ldr	r4, [pc, #84]	; (8011f28 <gd32_i2c_begin()+0x60>)
 8011ed4:	f240 6003 	movw	r0, #1539	; 0x603
 8011ed8:	f7ff fc14 	bl	8011704 <rcu_periph_clock_enable>
 8011edc:	f240 6003 	movw	r0, #1539	; 0x603
 8011ee0:	f7ff fc10 	bl	8011704 <rcu_periph_clock_enable>
 8011ee4:	4620      	mov	r0, r4
 8011ee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011eea:	2203      	movs	r2, #3
 8011eec:	211c      	movs	r1, #28
 8011eee:	f7ff fb71 	bl	80115d4 <gpio_init>
 8011ef2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011ef6:	2203      	movs	r2, #3
 8011ef8:	4620      	mov	r0, r4
 8011efa:	211c      	movs	r1, #28
 8011efc:	f7ff fb6a 	bl	80115d4 <gpio_init>
 8011f00:	f5a4 4438 	sub.w	r4, r4, #47104	; 0xb800
 8011f04:	2101      	movs	r1, #1
 8011f06:	2002      	movs	r0, #2
 8011f08:	f7ff fbb8 	bl	801167c <gpio_pin_remap_config>
 8011f0c:	4620      	mov	r0, r4
 8011f0e:	4907      	ldr	r1, [pc, #28]	; (8011f2c <gd32_i2c_begin()+0x64>)
 8011f10:	2200      	movs	r2, #0
 8011f12:	f001 f815 	bl	8012f40 <i2c_clock_config>
 8011f16:	4620      	mov	r0, r4
 8011f18:	f001 f88e 	bl	8013038 <i2c_enable>
 8011f1c:	4620      	mov	r0, r4
 8011f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f22:	2101      	movs	r1, #1
 8011f24:	f001 b86e 	b.w	8013004 <i2c_ack_config>
 8011f28:	40010c00 	andmi	r0, r1, r0, lsl #24
 8011f2c:	00061a80 	andeq	r1, r6, r0, lsl #21

08011f30 <gd32_i2c_set_baudrate(unsigned int)>:
 8011f30:	4601      	mov	r1, r0
 8011f32:	2200      	movs	r2, #0
 8011f34:	4801      	ldr	r0, [pc, #4]	; (8011f3c <gd32_i2c_set_baudrate(unsigned int)+0xc>)
 8011f36:	f001 b803 	b.w	8012f40 <i2c_clock_config>
 8011f3a:	bf00      	nop
 8011f3c:	40005400 	andmi	r5, r0, r0, lsl #8

08011f40 <gd32_i2c_set_address(unsigned char)>:
 8011f40:	4b01      	ldr	r3, [pc, #4]	; (8011f48 <gd32_i2c_set_address(unsigned char)+0x8>)
 8011f42:	0040      	lsls	r0, r0, #1
 8011f44:	7018      	strb	r0, [r3, #0]
 8011f46:	4770      	bx	lr
 8011f48:	200097b4 			; <UNDEFINED> instruction: 0x200097b4

08011f4c <gd32_i2c_write(char const*, unsigned int)>:
 8011f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f4e:	4604      	mov	r4, r0
 8011f50:	460f      	mov	r7, r1
 8011f52:	f640 75ff 	movw	r5, #4095	; 0xfff
 8011f56:	4e2e      	ldr	r6, [pc, #184]	; (8012010 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8011f58:	f240 6101 	movw	r1, #1537	; 0x601
 8011f5c:	4630      	mov	r0, r6
 8011f5e:	f001 f87f 	bl	8013060 <i2c_flag_get>
 8011f62:	b9b0      	cbnz	r0, 8011f92 <gd32_i2c_write(char const*, unsigned int)+0x46>
 8011f64:	482a      	ldr	r0, [pc, #168]	; (8012010 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8011f66:	f001 f86c 	bl	8013042 <i2c_start_on_bus>
 8011f6a:	f640 75ff 	movw	r5, #4095	; 0xfff
 8011f6e:	4e28      	ldr	r6, [pc, #160]	; (8012010 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8011f70:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8011f74:	4630      	mov	r0, r6
 8011f76:	f001 f873 	bl	8013060 <i2c_flag_get>
 8011f7a:	b190      	cbz	r0, 8011fa2 <gd32_i2c_write(char const*, unsigned int)+0x56>
 8011f7c:	4b25      	ldr	r3, [pc, #148]	; (8012014 <gd32_i2c_write(char const*, unsigned int)+0xc8>)
 8011f7e:	f06f 0201 	mvn.w	r2, #1
 8011f82:	7819      	ldrb	r1, [r3, #0]
 8011f84:	4822      	ldr	r0, [pc, #136]	; (8012010 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8011f86:	f001 f84f 	bl	8013028 <i2c_master_addressing>
 8011f8a:	f640 75ff 	movw	r5, #4095	; 0xfff
 8011f8e:	4e20      	ldr	r6, [pc, #128]	; (8012010 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8011f90:	e00c      	b.n	8011fac <gd32_i2c_write(char const*, unsigned int)+0x60>
 8011f92:	3d01      	subs	r5, #1
 8011f94:	d1e0      	bne.n	8011f58 <gd32_i2c_write(char const*, unsigned int)+0xc>
 8011f96:	f7ff ff85 	bl	8011ea4 <_stop() [clone .isra.0]>
 8011f9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f9e:	4240      	negs	r0, r0
 8011fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fa2:	3d01      	subs	r5, #1
 8011fa4:	d1e4      	bne.n	8011f70 <gd32_i2c_write(char const*, unsigned int)+0x24>
 8011fa6:	e7f6      	b.n	8011f96 <gd32_i2c_write(char const*, unsigned int)+0x4a>
 8011fa8:	3d01      	subs	r5, #1
 8011faa:	d0f4      	beq.n	8011f96 <gd32_i2c_write(char const*, unsigned int)+0x4a>
 8011fac:	f240 5101 	movw	r1, #1281	; 0x501
 8011fb0:	4630      	mov	r0, r6
 8011fb2:	f001 f855 	bl	8013060 <i2c_flag_get>
 8011fb6:	2800      	cmp	r0, #0
 8011fb8:	d0f6      	beq.n	8011fa8 <gd32_i2c_write(char const*, unsigned int)+0x5c>
 8011fba:	f240 5101 	movw	r1, #1281	; 0x501
 8011fbe:	4814      	ldr	r0, [pc, #80]	; (8012010 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8011fc0:	f001 f859 	bl	8013076 <i2c_flag_clear>
 8011fc4:	f640 75ff 	movw	r5, #4095	; 0xfff
 8011fc8:	4e11      	ldr	r6, [pc, #68]	; (8012010 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8011fca:	f240 5107 	movw	r1, #1287	; 0x507
 8011fce:	4630      	mov	r0, r6
 8011fd0:	f001 f846 	bl	8013060 <i2c_flag_get>
 8011fd4:	2801      	cmp	r0, #1
 8011fd6:	d107      	bne.n	8011fe8 <gd32_i2c_write(char const*, unsigned int)+0x9c>
 8011fd8:	4e0d      	ldr	r6, [pc, #52]	; (8012010 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8011fda:	4427      	add	r7, r4
 8011fdc:	42a7      	cmp	r7, r4
 8011fde:	d106      	bne.n	8011fee <gd32_i2c_write(char const*, unsigned int)+0xa2>
 8011fe0:	f7ff ff60 	bl	8011ea4 <_stop() [clone .isra.0]>
 8011fe4:	2000      	movs	r0, #0
 8011fe6:	e7da      	b.n	8011f9e <gd32_i2c_write(char const*, unsigned int)+0x52>
 8011fe8:	3d01      	subs	r5, #1
 8011fea:	d1ee      	bne.n	8011fca <gd32_i2c_write(char const*, unsigned int)+0x7e>
 8011fec:	e7d3      	b.n	8011f96 <gd32_i2c_write(char const*, unsigned int)+0x4a>
 8011fee:	4630      	mov	r0, r6
 8011ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ff4:	f001 f82f 	bl	8013056 <i2c_data_transmit>
 8011ff8:	f640 75ff 	movw	r5, #4095	; 0xfff
 8011ffc:	f240 5102 	movw	r1, #1282	; 0x502
 8012000:	4630      	mov	r0, r6
 8012002:	f001 f82d 	bl	8013060 <i2c_flag_get>
 8012006:	2800      	cmp	r0, #0
 8012008:	d1e8      	bne.n	8011fdc <gd32_i2c_write(char const*, unsigned int)+0x90>
 801200a:	3d01      	subs	r5, #1
 801200c:	d1f6      	bne.n	8011ffc <gd32_i2c_write(char const*, unsigned int)+0xb0>
 801200e:	e7c2      	b.n	8011f96 <gd32_i2c_write(char const*, unsigned int)+0x4a>
 8012010:	40005400 	andmi	r5, r0, r0, lsl #8
 8012014:	200097b4 			; <UNDEFINED> instruction: 0x200097b4

08012018 <gd32_i2c_read(char*, unsigned int)>:
 8012018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801201c:	4680      	mov	r8, r0
 801201e:	460c      	mov	r4, r1
 8012020:	f640 76ff 	movw	r6, #4095	; 0xfff
 8012024:	4f4b      	ldr	r7, [pc, #300]	; (8012154 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8012026:	f240 6101 	movw	r1, #1537	; 0x601
 801202a:	4638      	mov	r0, r7
 801202c:	f001 f818 	bl	8013060 <i2c_flag_get>
 8012030:	4605      	mov	r5, r0
 8012032:	bb08      	cbnz	r0, 8012078 <gd32_i2c_read(char*, unsigned int)+0x60>
 8012034:	2c02      	cmp	r4, #2
 8012036:	d103      	bne.n	8012040 <gd32_i2c_read(char*, unsigned int)+0x28>
 8012038:	4601      	mov	r1, r0
 801203a:	4846      	ldr	r0, [pc, #280]	; (8012154 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 801203c:	f000 ffeb 	bl	8013016 <i2c_ackpos_config>
 8012040:	4844      	ldr	r0, [pc, #272]	; (8012154 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8012042:	f000 fffe 	bl	8013042 <i2c_start_on_bus>
 8012046:	f640 76ff 	movw	r6, #4095	; 0xfff
 801204a:	4f42      	ldr	r7, [pc, #264]	; (8012154 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 801204c:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8012050:	4638      	mov	r0, r7
 8012052:	f001 f805 	bl	8013060 <i2c_flag_get>
 8012056:	b1a8      	cbz	r0, 8012084 <gd32_i2c_read(char*, unsigned int)+0x6c>
 8012058:	4b3f      	ldr	r3, [pc, #252]	; (8012158 <gd32_i2c_read(char*, unsigned int)+0x140>)
 801205a:	2201      	movs	r2, #1
 801205c:	7819      	ldrb	r1, [r3, #0]
 801205e:	483d      	ldr	r0, [pc, #244]	; (8012154 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8012060:	f000 ffe2 	bl	8013028 <i2c_master_addressing>
 8012064:	2c02      	cmp	r4, #2
 8012066:	d803      	bhi.n	8012070 <gd32_i2c_read(char*, unsigned int)+0x58>
 8012068:	2100      	movs	r1, #0
 801206a:	483a      	ldr	r0, [pc, #232]	; (8012154 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 801206c:	f000 ffca 	bl	8013004 <i2c_ack_config>
 8012070:	f640 76ff 	movw	r6, #4095	; 0xfff
 8012074:	4f37      	ldr	r7, [pc, #220]	; (8012154 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8012076:	e00a      	b.n	801208e <gd32_i2c_read(char*, unsigned int)+0x76>
 8012078:	3e01      	subs	r6, #1
 801207a:	d1d4      	bne.n	8012026 <gd32_i2c_read(char*, unsigned int)+0xe>
 801207c:	f7ff ff12 	bl	8011ea4 <_stop() [clone .isra.0]>
 8012080:	2504      	movs	r5, #4
 8012082:	e04d      	b.n	8012120 <gd32_i2c_read(char*, unsigned int)+0x108>
 8012084:	3e01      	subs	r6, #1
 8012086:	d1e1      	bne.n	801204c <gd32_i2c_read(char*, unsigned int)+0x34>
 8012088:	e7f8      	b.n	801207c <gd32_i2c_read(char*, unsigned int)+0x64>
 801208a:	3e01      	subs	r6, #1
 801208c:	d0f6      	beq.n	801207c <gd32_i2c_read(char*, unsigned int)+0x64>
 801208e:	f240 5101 	movw	r1, #1281	; 0x501
 8012092:	4638      	mov	r0, r7
 8012094:	f000 ffe4 	bl	8013060 <i2c_flag_get>
 8012098:	2800      	cmp	r0, #0
 801209a:	d0f6      	beq.n	801208a <gd32_i2c_read(char*, unsigned int)+0x72>
 801209c:	f240 5101 	movw	r1, #1281	; 0x501
 80120a0:	482c      	ldr	r0, [pc, #176]	; (8012154 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 80120a2:	f000 ffe8 	bl	8013076 <i2c_flag_clear>
 80120a6:	2c01      	cmp	r4, #1
 80120a8:	d102      	bne.n	80120b0 <gd32_i2c_read(char*, unsigned int)+0x98>
 80120aa:	482a      	ldr	r0, [pc, #168]	; (8012154 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 80120ac:	f000 ffce 	bl	801304c <i2c_stop_on_bus>
 80120b0:	f640 77ff 	movw	r7, #4095	; 0xfff
 80120b4:	4e27      	ldr	r6, [pc, #156]	; (8012154 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 80120b6:	e022      	b.n	80120fe <gd32_i2c_read(char*, unsigned int)+0xe6>
 80120b8:	2c03      	cmp	r4, #3
 80120ba:	d134      	bne.n	8012126 <gd32_i2c_read(char*, unsigned int)+0x10e>
 80120bc:	f640 79ff 	movw	r9, #4095	; 0xfff
 80120c0:	e002      	b.n	80120c8 <gd32_i2c_read(char*, unsigned int)+0xb0>
 80120c2:	f1b9 0901 	subs.w	r9, r9, #1
 80120c6:	d0d9      	beq.n	801207c <gd32_i2c_read(char*, unsigned int)+0x64>
 80120c8:	f240 5102 	movw	r1, #1282	; 0x502
 80120cc:	4630      	mov	r0, r6
 80120ce:	f000 ffc7 	bl	8013060 <i2c_flag_get>
 80120d2:	2800      	cmp	r0, #0
 80120d4:	d0f5      	beq.n	80120c2 <gd32_i2c_read(char*, unsigned int)+0xaa>
 80120d6:	2100      	movs	r1, #0
 80120d8:	4630      	mov	r0, r6
 80120da:	f000 ff93 	bl	8013004 <i2c_ack_config>
 80120de:	f240 5106 	movw	r1, #1286	; 0x506
 80120e2:	4630      	mov	r0, r6
 80120e4:	f000 ffbc 	bl	8013060 <i2c_flag_get>
 80120e8:	b138      	cbz	r0, 80120fa <gd32_i2c_read(char*, unsigned int)+0xe2>
 80120ea:	4630      	mov	r0, r6
 80120ec:	f000 ffb5 	bl	801305a <i2c_data_receive>
 80120f0:	f640 77ff 	movw	r7, #4095	; 0xfff
 80120f4:	f808 0b01 	strb.w	r0, [r8], #1
 80120f8:	3c01      	subs	r4, #1
 80120fa:	3f01      	subs	r7, #1
 80120fc:	d0be      	beq.n	801207c <gd32_i2c_read(char*, unsigned int)+0x64>
 80120fe:	2c00      	cmp	r4, #0
 8012100:	d1da      	bne.n	80120b8 <gd32_i2c_read(char*, unsigned int)+0xa0>
 8012102:	f640 73ff 	movw	r3, #4095	; 0xfff
 8012106:	4915      	ldr	r1, [pc, #84]	; (801215c <gd32_i2c_read(char*, unsigned int)+0x144>)
 8012108:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 801210c:	0592      	lsls	r2, r2, #22
 801210e:	d41d      	bmi.n	801214c <gd32_i2c_read(char*, unsigned int)+0x134>
 8012110:	2101      	movs	r1, #1
 8012112:	4810      	ldr	r0, [pc, #64]	; (8012154 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8012114:	f000 ff76 	bl	8013004 <i2c_ack_config>
 8012118:	2101      	movs	r1, #1
 801211a:	480e      	ldr	r0, [pc, #56]	; (8012154 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 801211c:	f000 ff7b 	bl	8013016 <i2c_ackpos_config>
 8012120:	4628      	mov	r0, r5
 8012122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012126:	2c02      	cmp	r4, #2
 8012128:	d1d9      	bne.n	80120de <gd32_i2c_read(char*, unsigned int)+0xc6>
 801212a:	f640 79ff 	movw	r9, #4095	; 0xfff
 801212e:	e002      	b.n	8012136 <gd32_i2c_read(char*, unsigned int)+0x11e>
 8012130:	f1b9 0901 	subs.w	r9, r9, #1
 8012134:	d0a2      	beq.n	801207c <gd32_i2c_read(char*, unsigned int)+0x64>
 8012136:	f240 5102 	movw	r1, #1282	; 0x502
 801213a:	4630      	mov	r0, r6
 801213c:	f000 ff90 	bl	8013060 <i2c_flag_get>
 8012140:	2800      	cmp	r0, #0
 8012142:	d0f5      	beq.n	8012130 <gd32_i2c_read(char*, unsigned int)+0x118>
 8012144:	4630      	mov	r0, r6
 8012146:	f000 ff81 	bl	801304c <i2c_stop_on_bus>
 801214a:	e7c8      	b.n	80120de <gd32_i2c_read(char*, unsigned int)+0xc6>
 801214c:	3b01      	subs	r3, #1
 801214e:	d1db      	bne.n	8012108 <gd32_i2c_read(char*, unsigned int)+0xf0>
 8012150:	e796      	b.n	8012080 <gd32_i2c_read(char*, unsigned int)+0x68>
 8012152:	bf00      	nop
 8012154:	40005400 	andmi	r5, r0, r0, lsl #8
 8012158:	200097b4 			; <UNDEFINED> instruction: 0x200097b4
 801215c:	40005000 	andmi	r5, r0, r0

08012160 <gd32_spi_dma_begin()>:
 8012160:	b530      	push	{r4, r5, lr}
 8012162:	f240 6002 	movw	r0, #1538	; 0x602
 8012166:	b089      	sub	sp, #36	; 0x24
 8012168:	f7ff facc 	bl	8011704 <rcu_periph_clock_enable>
 801216c:	f240 6003 	movw	r0, #1539	; 0x603
 8012170:	f7ff fac8 	bl	8011704 <rcu_periph_clock_enable>
 8012174:	f240 700f 	movw	r0, #1807	; 0x70f
 8012178:	f7ff fac4 	bl	8011704 <rcu_periph_clock_enable>
 801217c:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8012180:	f7ff fac0 	bl	8011704 <rcu_periph_clock_enable>
 8012184:	2338      	movs	r3, #56	; 0x38
 8012186:	2203      	movs	r2, #3
 8012188:	2118      	movs	r1, #24
 801218a:	4829      	ldr	r0, [pc, #164]	; (8012230 <gd32_spi_dma_begin()+0xd0>)
 801218c:	f7ff fa22 	bl	80115d4 <gpio_init>
 8012190:	4c28      	ldr	r4, [pc, #160]	; (8012234 <gd32_spi_dma_begin()+0xd4>)
 8012192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012196:	2203      	movs	r2, #3
 8012198:	2118      	movs	r1, #24
 801219a:	4827      	ldr	r0, [pc, #156]	; (8012238 <gd32_spi_dma_begin()+0xd8>)
 801219c:	f7ff fa1a 	bl	80115d4 <gpio_init>
 80121a0:	2101      	movs	r1, #1
 80121a2:	4826      	ldr	r0, [pc, #152]	; (801223c <gd32_spi_dma_begin()+0xdc>)
 80121a4:	f7ff fa6a 	bl	801167c <gpio_pin_remap_config>
 80121a8:	4620      	mov	r0, r4
 80121aa:	f000 ffe2 	bl	8013172 <i2s_disable>
 80121ae:	2300      	movs	r3, #0
 80121b0:	4620      	mov	r0, r4
 80121b2:	461a      	mov	r2, r3
 80121b4:	4922      	ldr	r1, [pc, #136]	; (8012240 <gd32_spi_dma_begin()+0xe0>)
 80121b6:	f000 ff7f 	bl	80130b8 <i2s_psc_config>
 80121ba:	2300      	movs	r3, #0
 80121bc:	2210      	movs	r2, #16
 80121be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80121c2:	4620      	mov	r0, r4
 80121c4:	f000 ff69 	bl	801309a <i2s_init>
 80121c8:	4620      	mov	r0, r4
 80121ca:	f000 ffcd 	bl	8013168 <i2s_enable>
 80121ce:	f504 34e4 	add.w	r4, r4, #116736	; 0x1c800
 80121d2:	f240 5001 	movw	r0, #1281	; 0x501
 80121d6:	f7ff fa95 	bl	8011704 <rcu_periph_clock_enable>
 80121da:	2101      	movs	r1, #1
 80121dc:	4620      	mov	r0, r4
 80121de:	f000 fa75 	bl	80126cc <dma_deinit>
 80121e2:	a801      	add	r0, sp, #4
 80121e4:	f000 fa8e 	bl	8012704 <dma_struct_para_init>
 80121e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80121ec:	2501      	movs	r5, #1
 80121ee:	9304      	str	r3, [sp, #16]
 80121f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80121f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121f8:	4912      	ldr	r1, [pc, #72]	; (8012244 <gd32_spi_dma_begin()+0xe4>)
 80121fa:	4620      	mov	r0, r4
 80121fc:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8012200:	9206      	str	r2, [sp, #24]
 8012202:	4629      	mov	r1, r5
 8012204:	aa01      	add	r2, sp, #4
 8012206:	f8ad 301c 	strh.w	r3, [sp, #28]
 801220a:	f88d 501e 	strb.w	r5, [sp, #30]
 801220e:	f000 fa83 	bl	8012718 <dma_init>
 8012212:	4629      	mov	r1, r5
 8012214:	4620      	mov	r0, r4
 8012216:	f000 fab9 	bl	801278c <dma_circulation_disable>
 801221a:	4629      	mov	r1, r5
 801221c:	4620      	mov	r0, r4
 801221e:	f000 fac5 	bl	80127ac <dma_memory_to_memory_disable>
 8012222:	2200      	movs	r2, #0
 8012224:	4b08      	ldr	r3, [pc, #32]	; (8012248 <gd32_spi_dma_begin()+0xe8>)
 8012226:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 801222a:	b009      	add	sp, #36	; 0x24
 801222c:	bd30      	pop	{r4, r5, pc}
 801222e:	bf00      	nop
 8012230:	40010c00 	andmi	r0, r1, r0, lsl #24
 8012234:	40003c00 	andmi	r3, r0, r0, lsl #24
 8012238:	40010800 	andmi	r0, r1, r0, lsl #16
 801223c:	00300400 	eorseq	r0, r0, r0, lsl #8
 8012240:	00030d40 	andeq	r0, r3, r0, asr #26
 8012244:	40003c0c 	andmi	r3, r0, ip, lsl #24
 8012248:	40020000 	andmi	r0, r2, r0

0801224c <gd32_spi_dma_set_speed_hz(unsigned int)>:
 801224c:	b538      	push	{r3, r4, r5, lr}
 801224e:	4c08      	ldr	r4, [pc, #32]	; (8012270 <gd32_spi_dma_set_speed_hz(unsigned int)+0x24>)
 8012250:	4605      	mov	r5, r0
 8012252:	4620      	mov	r0, r4
 8012254:	f000 ff8d 	bl	8013172 <i2s_disable>
 8012258:	2300      	movs	r3, #0
 801225a:	4620      	mov	r0, r4
 801225c:	461a      	mov	r2, r3
 801225e:	0969      	lsrs	r1, r5, #5
 8012260:	f000 ff2a 	bl	80130b8 <i2s_psc_config>
 8012264:	4620      	mov	r0, r4
 8012266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801226a:	f000 bf7d 	b.w	8013168 <i2s_enable>
 801226e:	bf00      	nop
 8012270:	40003c00 	andmi	r3, r0, r0, lsl #24

08012274 <gd32_spi_dma_tx_prepare(unsigned int*)>:
 8012274:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8012278:	6003      	str	r3, [r0, #0]
 801227a:	4801      	ldr	r0, [pc, #4]	; (8012280 <gd32_spi_dma_tx_prepare(unsigned int*)+0xc>)
 801227c:	4770      	bx	lr
 801227e:	bf00      	nop
 8012280:	200097b8 			; <UNDEFINED> instruction: 0x200097b8

08012284 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>:
 8012284:	4a0a      	ldr	r2, [pc, #40]	; (80122b0 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x2c>)
 8012286:	3101      	adds	r1, #1
 8012288:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
 801228c:	f3c1 014f 	ubfx	r1, r1, #1, #16
 8012290:	f023 0301 	bic.w	r3, r3, #1
 8012294:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 8012298:	f043 0301 	orr.w	r3, r3, #1
 801229c:	f8c2 0428 	str.w	r0, [r2, #1064]	; 0x428
 80122a0:	f8c2 1420 	str.w	r1, [r2, #1056]	; 0x420
 80122a4:	4803      	ldr	r0, [pc, #12]	; (80122b4 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x30>)
 80122a6:	2100      	movs	r1, #0
 80122a8:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 80122ac:	f000 bf66 	b.w	801317c <spi_dma_enable>
 80122b0:	40020000 	andmi	r0, r2, r0
 80122b4:	40003c00 	andmi	r3, r0, r0, lsl #24

080122b8 <gd32_spi_dma_tx_is_active()>:
 80122b8:	4b03      	ldr	r3, [pc, #12]	; (80122c8 <gd32_spi_dma_tx_is_active()+0x10>)
 80122ba:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
 80122be:	3800      	subs	r0, #0
 80122c0:	bf18      	it	ne
 80122c2:	2001      	movne	r0, #1
 80122c4:	4770      	bx	lr
 80122c6:	bf00      	nop
 80122c8:	40020000 	andmi	r0, r2, r0

080122cc <gd32_uart_begin>:
 80122cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122ce:	461e      	mov	r6, r3
 80122d0:	4b63      	ldr	r3, [pc, #396]	; (8012460 <gd32_uart_begin+0x194>)
 80122d2:	4604      	mov	r4, r0
 80122d4:	4298      	cmp	r0, r3
 80122d6:	460f      	mov	r7, r1
 80122d8:	4615      	mov	r5, r2
 80122da:	d03b      	beq.n	8012354 <gd32_uart_begin+0x88>
 80122dc:	d80a      	bhi.n	80122f4 <gd32_uart_begin+0x28>
 80122de:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80122e2:	4298      	cmp	r0, r3
 80122e4:	d02f      	beq.n	8012346 <gd32_uart_begin+0x7a>
 80122e6:	f240 7012 	movw	r0, #1810	; 0x712
 80122ea:	f7ff fa0b 	bl	8011704 <rcu_periph_clock_enable>
 80122ee:	f240 6004 	movw	r0, #1540	; 0x604
 80122f2:	e008      	b.n	8012306 <gd32_uart_begin+0x3a>
 80122f4:	4b5b      	ldr	r3, [pc, #364]	; (8012464 <gd32_uart_begin+0x198>)
 80122f6:	4298      	cmp	r0, r3
 80122f8:	d02f      	beq.n	801235a <gd32_uart_begin+0x8e>
 80122fa:	f240 600e 	movw	r0, #1550	; 0x60e
 80122fe:	f7ff fa01 	bl	8011704 <rcu_periph_clock_enable>
 8012302:	f240 6003 	movw	r0, #1539	; 0x603
 8012306:	f7ff f9fd 	bl	8011704 <rcu_periph_clock_enable>
 801230a:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 801230e:	f7ff f9f9 	bl	8011704 <rcu_periph_clock_enable>
 8012312:	4b53      	ldr	r3, [pc, #332]	; (8012460 <gd32_uart_begin+0x194>)
 8012314:	429c      	cmp	r4, r3
 8012316:	f000 8084 	beq.w	8012422 <gd32_uart_begin+0x156>
 801231a:	d829      	bhi.n	8012370 <gd32_uart_begin+0xa4>
 801231c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8012320:	429c      	cmp	r4, r3
 8012322:	d071      	beq.n	8012408 <gd32_uart_begin+0x13c>
 8012324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012328:	2203      	movs	r2, #3
 801232a:	2118      	movs	r1, #24
 801232c:	484e      	ldr	r0, [pc, #312]	; (8012468 <gd32_uart_begin+0x19c>)
 801232e:	f7ff f951 	bl	80115d4 <gpio_init>
 8012332:	2104      	movs	r1, #4
 8012334:	484c      	ldr	r0, [pc, #304]	; (8012468 <gd32_uart_begin+0x19c>)
 8012336:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801233a:	2203      	movs	r2, #3
 801233c:	f7ff f94a 	bl	80115d4 <gpio_init>
 8012340:	2101      	movs	r1, #1
 8012342:	484a      	ldr	r0, [pc, #296]	; (801246c <gd32_uart_begin+0x1a0>)
 8012344:	e025      	b.n	8012392 <gd32_uart_begin+0xc6>
 8012346:	f240 7011 	movw	r0, #1809	; 0x711
 801234a:	f7ff f9db 	bl	8011704 <rcu_periph_clock_enable>
 801234e:	f240 6002 	movw	r0, #1538	; 0x602
 8012352:	e7d8      	b.n	8012306 <gd32_uart_begin+0x3a>
 8012354:	f240 7013 	movw	r0, #1811	; 0x713
 8012358:	e7c7      	b.n	80122ea <gd32_uart_begin+0x1e>
 801235a:	f240 7014 	movw	r0, #1812	; 0x714
 801235e:	f7ff f9d1 	bl	8011704 <rcu_periph_clock_enable>
 8012362:	f240 6004 	movw	r0, #1540	; 0x604
 8012366:	f7ff f9cd 	bl	8011704 <rcu_periph_clock_enable>
 801236a:	f240 6005 	movw	r0, #1541	; 0x605
 801236e:	e7ca      	b.n	8012306 <gd32_uart_begin+0x3a>
 8012370:	4b3c      	ldr	r3, [pc, #240]	; (8012464 <gd32_uart_begin+0x198>)
 8012372:	429c      	cmp	r4, r3
 8012374:	d062      	beq.n	801243c <gd32_uart_begin+0x170>
 8012376:	2340      	movs	r3, #64	; 0x40
 8012378:	2203      	movs	r2, #3
 801237a:	2118      	movs	r1, #24
 801237c:	483c      	ldr	r0, [pc, #240]	; (8012470 <gd32_uart_begin+0x1a4>)
 801237e:	f7ff f929 	bl	80115d4 <gpio_init>
 8012382:	2104      	movs	r1, #4
 8012384:	483a      	ldr	r0, [pc, #232]	; (8012470 <gd32_uart_begin+0x1a4>)
 8012386:	2380      	movs	r3, #128	; 0x80
 8012388:	2203      	movs	r2, #3
 801238a:	f7ff f923 	bl	80115d4 <gpio_init>
 801238e:	2101      	movs	r1, #1
 8012390:	2004      	movs	r0, #4
 8012392:	f7ff f973 	bl	801167c <gpio_pin_remap_config>
 8012396:	4620      	mov	r0, r4
 8012398:	f7ff fbd2 	bl	8011b40 <usart_deinit>
 801239c:	68e3      	ldr	r3, [r4, #12]
 801239e:	4639      	mov	r1, r7
 80123a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80123a4:	4620      	mov	r0, r4
 80123a6:	60e3      	str	r3, [r4, #12]
 80123a8:	f7ff fc0a 	bl	8011bc0 <usart_baudrate_set>
 80123ac:	f1a5 0309 	sub.w	r3, r5, #9
 80123b0:	4259      	negs	r1, r3
 80123b2:	4159      	adcs	r1, r3
 80123b4:	4620      	mov	r0, r4
 80123b6:	0309      	lsls	r1, r1, #12
 80123b8:	f7ff fc32 	bl	8011c20 <usart_word_length_set>
 80123bc:	9906      	ldr	r1, [sp, #24]
 80123be:	4620      	mov	r0, r4
 80123c0:	1e8a      	subs	r2, r1, #2
 80123c2:	4251      	negs	r1, r2
 80123c4:	4151      	adcs	r1, r2
 80123c6:	0349      	lsls	r1, r1, #13
 80123c8:	f7ff fc32 	bl	8011c30 <usart_stop_bit_set>
 80123cc:	2e01      	cmp	r6, #1
 80123ce:	d041      	beq.n	8012454 <gd32_uart_begin+0x188>
 80123d0:	2e02      	cmp	r6, #2
 80123d2:	d142      	bne.n	801245a <gd32_uart_begin+0x18e>
 80123d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80123d8:	4620      	mov	r0, r4
 80123da:	f7ff fc19 	bl	8011c10 <usart_parity_config>
 80123de:	2100      	movs	r1, #0
 80123e0:	4620      	mov	r0, r4
 80123e2:	f7ff fc39 	bl	8011c58 <usart_hardware_flow_rts_config>
 80123e6:	2100      	movs	r1, #0
 80123e8:	4620      	mov	r0, r4
 80123ea:	f7ff fc3b 	bl	8011c64 <usart_hardware_flow_cts_config>
 80123ee:	2104      	movs	r1, #4
 80123f0:	4620      	mov	r0, r4
 80123f2:	f7ff fc2b 	bl	8011c4c <usart_receive_config>
 80123f6:	2108      	movs	r1, #8
 80123f8:	4620      	mov	r0, r4
 80123fa:	f7ff fc21 	bl	8011c40 <usart_transmit_config>
 80123fe:	68e3      	ldr	r3, [r4, #12]
 8012400:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012404:	60e3      	str	r3, [r4, #12]
 8012406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012408:	2304      	movs	r3, #4
 801240a:	2203      	movs	r2, #3
 801240c:	2118      	movs	r1, #24
 801240e:	4819      	ldr	r0, [pc, #100]	; (8012474 <gd32_uart_begin+0x1a8>)
 8012410:	f7ff f8e0 	bl	80115d4 <gpio_init>
 8012414:	2308      	movs	r3, #8
 8012416:	2203      	movs	r2, #3
 8012418:	2104      	movs	r1, #4
 801241a:	4816      	ldr	r0, [pc, #88]	; (8012474 <gd32_uart_begin+0x1a8>)
 801241c:	f7ff f8da 	bl	80115d4 <gpio_init>
 8012420:	e7b9      	b.n	8012396 <gd32_uart_begin+0xca>
 8012422:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012426:	2203      	movs	r2, #3
 8012428:	2118      	movs	r1, #24
 801242a:	480f      	ldr	r0, [pc, #60]	; (8012468 <gd32_uart_begin+0x19c>)
 801242c:	f7ff f8d2 	bl	80115d4 <gpio_init>
 8012430:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012434:	2203      	movs	r2, #3
 8012436:	2104      	movs	r1, #4
 8012438:	480b      	ldr	r0, [pc, #44]	; (8012468 <gd32_uart_begin+0x19c>)
 801243a:	e7ef      	b.n	801241c <gd32_uart_begin+0x150>
 801243c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012440:	2203      	movs	r2, #3
 8012442:	2118      	movs	r1, #24
 8012444:	4808      	ldr	r0, [pc, #32]	; (8012468 <gd32_uart_begin+0x19c>)
 8012446:	f7ff f8c5 	bl	80115d4 <gpio_init>
 801244a:	2304      	movs	r3, #4
 801244c:	2203      	movs	r2, #3
 801244e:	4619      	mov	r1, r3
 8012450:	4809      	ldr	r0, [pc, #36]	; (8012478 <gd32_uart_begin+0x1ac>)
 8012452:	e7e3      	b.n	801241c <gd32_uart_begin+0x150>
 8012454:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8012458:	e7be      	b.n	80123d8 <gd32_uart_begin+0x10c>
 801245a:	2100      	movs	r1, #0
 801245c:	e7bc      	b.n	80123d8 <gd32_uart_begin+0x10c>
 801245e:	bf00      	nop
 8012460:	40004c00 	andmi	r4, r0, r0, lsl #24
 8012464:	40005000 	andmi	r5, r0, r0
 8012468:	40011000 	andmi	r1, r1, r0
 801246c:	00140010 	andseq	r0, r4, r0, lsl r0
 8012470:	40010c00 	andmi	r0, r1, r0, lsl #24
 8012474:	40010800 	andmi	r0, r1, r0, lsl #16
 8012478:	40011400 	andmi	r1, r1, r0, lsl #8

0801247c <micros_init()>:
 801247c:	4770      	bx	lr
	...

08012480 <udelay_init()>:
 8012480:	4a07      	ldr	r2, [pc, #28]	; (80124a0 <udelay_init()+0x20>)
 8012482:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8012486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801248a:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 801248e:	2200      	movs	r2, #0
 8012490:	4b04      	ldr	r3, [pc, #16]	; (80124a4 <udelay_init()+0x24>)
 8012492:	605a      	str	r2, [r3, #4]
 8012494:	681a      	ldr	r2, [r3, #0]
 8012496:	f042 0201 	orr.w	r2, r2, #1
 801249a:	601a      	str	r2, [r3, #0]
 801249c:	4770      	bx	lr
 801249e:	bf00      	nop
 80124a0:	e000ed00 	and	lr, r0, r0, lsl #26
 80124a4:	e0001000 	and	r1, r0, r0

080124a8 <udelay(unsigned int, unsigned int)>:
 80124a8:	236c      	movs	r3, #108	; 0x6c
 80124aa:	b530      	push	{r4, r5, lr}
 80124ac:	4358      	muls	r0, r3
 80124ae:	b909      	cbnz	r1, 80124b4 <udelay(unsigned int, unsigned int)+0xc>
 80124b0:	4b08      	ldr	r3, [pc, #32]	; (80124d4 <udelay(unsigned int, unsigned int)+0x2c>)
 80124b2:	6859      	ldr	r1, [r3, #4]
 80124b4:	2300      	movs	r3, #0
 80124b6:	4c07      	ldr	r4, [pc, #28]	; (80124d4 <udelay(unsigned int, unsigned int)+0x2c>)
 80124b8:	6862      	ldr	r2, [r4, #4]
 80124ba:	4291      	cmp	r1, r2
 80124bc:	d0fc      	beq.n	80124b8 <udelay(unsigned int, unsigned int)+0x10>
 80124be:	bf2a      	itet	cs
 80124c0:	f102 35ff 	addcs.w	r5, r2, #4294967295	; 0xffffffff
 80124c4:	189b      	addcc	r3, r3, r2
 80124c6:	195b      	addcs	r3, r3, r5
 80124c8:	1a5b      	subs	r3, r3, r1
 80124ca:	4283      	cmp	r3, r0
 80124cc:	d300      	bcc.n	80124d0 <udelay(unsigned int, unsigned int)+0x28>
 80124ce:	bd30      	pop	{r4, r5, pc}
 80124d0:	4611      	mov	r1, r2
 80124d2:	e7f1      	b.n	80124b8 <udelay(unsigned int, unsigned int)+0x10>
 80124d4:	e0001000 	and	r1, r0, r0

080124d8 <mac_address_get>:
 80124d8:	2102      	movs	r1, #2
 80124da:	4a07      	ldr	r2, [pc, #28]	; (80124f8 <mac_address_get+0x20>)
 80124dc:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 80124e0:	f8d2 27ec 	ldr.w	r2, [r2, #2028]	; 0x7ec
 80124e4:	7001      	strb	r1, [r0, #0]
 80124e6:	7042      	strb	r2, [r0, #1]
 80124e8:	0e1a      	lsrs	r2, r3, #24
 80124ea:	7082      	strb	r2, [r0, #2]
 80124ec:	0c1a      	lsrs	r2, r3, #16
 80124ee:	70c2      	strb	r2, [r0, #3]
 80124f0:	0a1a      	lsrs	r2, r3, #8
 80124f2:	7102      	strb	r2, [r0, #4]
 80124f4:	7143      	strb	r3, [r0, #5]
 80124f6:	4770      	bx	lr
 80124f8:	1ffff000 	svcne	0x00fff000

080124fc <adc_mode_config>:
 80124fc:	4b06      	ldr	r3, [pc, #24]	; (8012518 <adc_mode_config+0x1c>)
 80124fe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8012502:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8012506:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 801250a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801250e:	4302      	orrs	r2, r0
 8012510:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8012514:	4770      	bx	lr
 8012516:	bf00      	nop
 8012518:	40012000 	andmi	r2, r1, r0

0801251c <adc_special_function_config>:
 801251c:	b510      	push	{r4, lr}
 801251e:	f401 7380 	and.w	r3, r1, #256	; 0x100
 8012522:	f401 6480 	and.w	r4, r1, #1024	; 0x400
 8012526:	f001 0102 	and.w	r1, r1, #2
 801252a:	b17a      	cbz	r2, 801254c <adc_special_function_config+0x30>
 801252c:	b11b      	cbz	r3, 8012536 <adc_special_function_config+0x1a>
 801252e:	6843      	ldr	r3, [r0, #4]
 8012530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012534:	6043      	str	r3, [r0, #4]
 8012536:	b11c      	cbz	r4, 8012540 <adc_special_function_config+0x24>
 8012538:	6843      	ldr	r3, [r0, #4]
 801253a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801253e:	6043      	str	r3, [r0, #4]
 8012540:	b119      	cbz	r1, 801254a <adc_special_function_config+0x2e>
 8012542:	6883      	ldr	r3, [r0, #8]
 8012544:	f043 0302 	orr.w	r3, r3, #2
 8012548:	6083      	str	r3, [r0, #8]
 801254a:	bd10      	pop	{r4, pc}
 801254c:	b11b      	cbz	r3, 8012556 <adc_special_function_config+0x3a>
 801254e:	6843      	ldr	r3, [r0, #4]
 8012550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012554:	6043      	str	r3, [r0, #4]
 8012556:	b11c      	cbz	r4, 8012560 <adc_special_function_config+0x44>
 8012558:	6843      	ldr	r3, [r0, #4]
 801255a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801255e:	6043      	str	r3, [r0, #4]
 8012560:	2900      	cmp	r1, #0
 8012562:	d0f2      	beq.n	801254a <adc_special_function_config+0x2e>
 8012564:	6883      	ldr	r3, [r0, #8]
 8012566:	f023 0302 	bic.w	r3, r3, #2
 801256a:	e7ed      	b.n	8012548 <adc_special_function_config+0x2c>

0801256c <adc_data_alignment_config>:
 801256c:	6883      	ldr	r3, [r0, #8]
 801256e:	b119      	cbz	r1, 8012578 <adc_data_alignment_config+0xc>
 8012570:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012574:	6083      	str	r3, [r0, #8]
 8012576:	4770      	bx	lr
 8012578:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801257c:	e7fa      	b.n	8012574 <adc_data_alignment_config+0x8>

0801257e <adc_enable>:
 801257e:	6883      	ldr	r3, [r0, #8]
 8012580:	07db      	lsls	r3, r3, #31
 8012582:	bf5e      	ittt	pl
 8012584:	6883      	ldrpl	r3, [r0, #8]
 8012586:	f043 0301 	orrpl.w	r3, r3, #1
 801258a:	6083      	strpl	r3, [r0, #8]
 801258c:	4770      	bx	lr

0801258e <adc_calibration_enable>:
 801258e:	6883      	ldr	r3, [r0, #8]
 8012590:	f100 0208 	add.w	r2, r0, #8
 8012594:	f043 0308 	orr.w	r3, r3, #8
 8012598:	6083      	str	r3, [r0, #8]
 801259a:	6813      	ldr	r3, [r2, #0]
 801259c:	0719      	lsls	r1, r3, #28
 801259e:	d4fc      	bmi.n	801259a <adc_calibration_enable+0xc>
 80125a0:	6883      	ldr	r3, [r0, #8]
 80125a2:	f043 0304 	orr.w	r3, r3, #4
 80125a6:	6083      	str	r3, [r0, #8]
 80125a8:	6813      	ldr	r3, [r2, #0]
 80125aa:	075b      	lsls	r3, r3, #29
 80125ac:	d4fc      	bmi.n	80125a8 <adc_calibration_enable+0x1a>
 80125ae:	4770      	bx	lr

080125b0 <adc_tempsensor_vrefint_enable>:
 80125b0:	4a03      	ldr	r2, [pc, #12]	; (80125c0 <adc_tempsensor_vrefint_enable+0x10>)
 80125b2:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 80125b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80125ba:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
 80125be:	4770      	bx	lr
 80125c0:	40012000 	andmi	r2, r1, r0

080125c4 <adc_channel_length_config>:
 80125c4:	2901      	cmp	r1, #1
 80125c6:	d002      	beq.n	80125ce <adc_channel_length_config+0xa>
 80125c8:	2902      	cmp	r1, #2
 80125ca:	d00c      	beq.n	80125e6 <adc_channel_length_config+0x22>
 80125cc:	4770      	bx	lr
 80125ce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80125d0:	3a01      	subs	r2, #1
 80125d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80125d6:	62c3      	str	r3, [r0, #44]	; 0x2c
 80125d8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80125da:	0512      	lsls	r2, r2, #20
 80125dc:	f402 0270 	and.w	r2, r2, #15728640	; 0xf00000
 80125e0:	431a      	orrs	r2, r3
 80125e2:	62c2      	str	r2, [r0, #44]	; 0x2c
 80125e4:	4770      	bx	lr
 80125e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80125e8:	3a01      	subs	r2, #1
 80125ea:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80125ee:	6383      	str	r3, [r0, #56]	; 0x38
 80125f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80125f2:	0512      	lsls	r2, r2, #20
 80125f4:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 80125f8:	431a      	orrs	r2, r3
 80125fa:	6382      	str	r2, [r0, #56]	; 0x38
 80125fc:	4770      	bx	lr

080125fe <adc_inserted_channel_config>:
 80125fe:	b530      	push	{r4, r5, lr}
 8012600:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8012602:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8012604:	f3c4 5401 	ubfx	r4, r4, #20, #2
 8012608:	1a61      	subs	r1, r4, r1
 801260a:	f06f 0404 	mvn.w	r4, #4
 801260e:	4361      	muls	r1, r4
 8012610:	241f      	movs	r4, #31
 8012612:	310f      	adds	r1, #15
 8012614:	408c      	lsls	r4, r1
 8012616:	ea25 0504 	bic.w	r5, r5, r4
 801261a:	fa02 f101 	lsl.w	r1, r2, r1
 801261e:	4329      	orrs	r1, r5
 8012620:	2a09      	cmp	r2, #9
 8012622:	6381      	str	r1, [r0, #56]	; 0x38
 8012624:	d80b      	bhi.n	801263e <adc_inserted_channel_config+0x40>
 8012626:	2407      	movs	r4, #7
 8012628:	6901      	ldr	r1, [r0, #16]
 801262a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801262e:	4094      	lsls	r4, r2
 8012630:	ea21 0104 	bic.w	r1, r1, r4
 8012634:	fa03 f202 	lsl.w	r2, r3, r2
 8012638:	430a      	orrs	r2, r1
 801263a:	6102      	str	r2, [r0, #16]
 801263c:	bd30      	pop	{r4, r5, pc}
 801263e:	2a11      	cmp	r2, #17
 8012640:	d8fc      	bhi.n	801263c <adc_inserted_channel_config+0x3e>
 8012642:	2407      	movs	r4, #7
 8012644:	3a0a      	subs	r2, #10
 8012646:	68c1      	ldr	r1, [r0, #12]
 8012648:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801264c:	4094      	lsls	r4, r2
 801264e:	ea21 0104 	bic.w	r1, r1, r4
 8012652:	4093      	lsls	r3, r2
 8012654:	430b      	orrs	r3, r1
 8012656:	60c3      	str	r3, [r0, #12]
 8012658:	e7f0      	b.n	801263c <adc_inserted_channel_config+0x3e>

0801265a <adc_external_trigger_source_config>:
 801265a:	2901      	cmp	r1, #1
 801265c:	d002      	beq.n	8012664 <adc_external_trigger_source_config+0xa>
 801265e:	2902      	cmp	r1, #2
 8012660:	d008      	beq.n	8012674 <adc_external_trigger_source_config+0x1a>
 8012662:	4770      	bx	lr
 8012664:	6883      	ldr	r3, [r0, #8]
 8012666:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 801266a:	6083      	str	r3, [r0, #8]
 801266c:	6883      	ldr	r3, [r0, #8]
 801266e:	4313      	orrs	r3, r2
 8012670:	6083      	str	r3, [r0, #8]
 8012672:	4770      	bx	lr
 8012674:	6883      	ldr	r3, [r0, #8]
 8012676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801267a:	e7f6      	b.n	801266a <adc_external_trigger_source_config+0x10>

0801267c <adc_external_trigger_config>:
 801267c:	f001 0301 	and.w	r3, r1, #1
 8012680:	f001 0102 	and.w	r1, r1, #2
 8012684:	b152      	cbz	r2, 801269c <adc_external_trigger_config+0x20>
 8012686:	b11b      	cbz	r3, 8012690 <adc_external_trigger_config+0x14>
 8012688:	6883      	ldr	r3, [r0, #8]
 801268a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801268e:	6083      	str	r3, [r0, #8]
 8012690:	b119      	cbz	r1, 801269a <adc_external_trigger_config+0x1e>
 8012692:	6883      	ldr	r3, [r0, #8]
 8012694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012698:	6083      	str	r3, [r0, #8]
 801269a:	4770      	bx	lr
 801269c:	b11b      	cbz	r3, 80126a6 <adc_external_trigger_config+0x2a>
 801269e:	6883      	ldr	r3, [r0, #8]
 80126a0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80126a4:	6083      	str	r3, [r0, #8]
 80126a6:	2900      	cmp	r1, #0
 80126a8:	d0f7      	beq.n	801269a <adc_external_trigger_config+0x1e>
 80126aa:	6883      	ldr	r3, [r0, #8]
 80126ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80126b0:	e7f2      	b.n	8012698 <adc_external_trigger_config+0x1c>

080126b2 <adc_software_trigger_enable>:
 80126b2:	07ca      	lsls	r2, r1, #31
 80126b4:	bf42      	ittt	mi
 80126b6:	6883      	ldrmi	r3, [r0, #8]
 80126b8:	f443 0380 	orrmi.w	r3, r3, #4194304	; 0x400000
 80126bc:	6083      	strmi	r3, [r0, #8]
 80126be:	078b      	lsls	r3, r1, #30
 80126c0:	bf42      	ittt	mi
 80126c2:	6883      	ldrmi	r3, [r0, #8]
 80126c4:	f443 1300 	orrmi.w	r3, r3, #2097152	; 0x200000
 80126c8:	6083      	strmi	r3, [r0, #8]
 80126ca:	4770      	bx	lr

080126cc <dma_deinit>:
 80126cc:	4b0c      	ldr	r3, [pc, #48]	; (8012700 <dma_deinit+0x34>)
 80126ce:	4298      	cmp	r0, r3
 80126d0:	d102      	bne.n	80126d8 <dma_deinit+0xc>
 80126d2:	2904      	cmp	r1, #4
 80126d4:	d900      	bls.n	80126d8 <dma_deinit+0xc>
 80126d6:	e7fe      	b.n	80126d6 <dma_deinit+0xa>
 80126d8:	2314      	movs	r3, #20
 80126da:	fb03 0301 	mla	r3, r3, r1, r0
 80126de:	689a      	ldr	r2, [r3, #8]
 80126e0:	0089      	lsls	r1, r1, #2
 80126e2:	f022 0201 	bic.w	r2, r2, #1
 80126e6:	609a      	str	r2, [r3, #8]
 80126e8:	2200      	movs	r2, #0
 80126ea:	609a      	str	r2, [r3, #8]
 80126ec:	60da      	str	r2, [r3, #12]
 80126ee:	611a      	str	r2, [r3, #16]
 80126f0:	615a      	str	r2, [r3, #20]
 80126f2:	230f      	movs	r3, #15
 80126f4:	6842      	ldr	r2, [r0, #4]
 80126f6:	408b      	lsls	r3, r1
 80126f8:	4313      	orrs	r3, r2
 80126fa:	6043      	str	r3, [r0, #4]
 80126fc:	4770      	bx	lr
 80126fe:	bf00      	nop
 8012700:	40020400 	andmi	r0, r2, r0, lsl #8

08012704 <dma_struct_para_init>:
 8012704:	2300      	movs	r3, #0
 8012706:	e9c0 3300 	strd	r3, r3, [r0]
 801270a:	e9c0 3302 	strd	r3, r3, [r0, #8]
 801270e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012712:	8303      	strh	r3, [r0, #24]
 8012714:	7683      	strb	r3, [r0, #26]
 8012716:	4770      	bx	lr

08012718 <dma_init>:
 8012718:	4b1b      	ldr	r3, [pc, #108]	; (8012788 <dma_init+0x70>)
 801271a:	b510      	push	{r4, lr}
 801271c:	4298      	cmp	r0, r3
 801271e:	d102      	bne.n	8012726 <dma_init+0xe>
 8012720:	2904      	cmp	r1, #4
 8012722:	d900      	bls.n	8012726 <dma_init+0xe>
 8012724:	e7fe      	b.n	8012724 <dma_init+0xc>
 8012726:	2314      	movs	r3, #20
 8012728:	fb03 0101 	mla	r1, r3, r1, r0
 801272c:	6813      	ldr	r3, [r2, #0]
 801272e:	610b      	str	r3, [r1, #16]
 8012730:	6893      	ldr	r3, [r2, #8]
 8012732:	614b      	str	r3, [r1, #20]
 8012734:	8a13      	ldrh	r3, [r2, #16]
 8012736:	60cb      	str	r3, [r1, #12]
 8012738:	68d4      	ldr	r4, [r2, #12]
 801273a:	6853      	ldr	r3, [r2, #4]
 801273c:	6888      	ldr	r0, [r1, #8]
 801273e:	4323      	orrs	r3, r4
 8012740:	6954      	ldr	r4, [r2, #20]
 8012742:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8012746:	4323      	orrs	r3, r4
 8012748:	4303      	orrs	r3, r0
 801274a:	608b      	str	r3, [r1, #8]
 801274c:	7e13      	ldrb	r3, [r2, #24]
 801274e:	2b01      	cmp	r3, #1
 8012750:	688b      	ldr	r3, [r1, #8]
 8012752:	bf0c      	ite	eq
 8012754:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 8012758:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 801275c:	608b      	str	r3, [r1, #8]
 801275e:	7e53      	ldrb	r3, [r2, #25]
 8012760:	2b01      	cmp	r3, #1
 8012762:	688b      	ldr	r3, [r1, #8]
 8012764:	bf0c      	ite	eq
 8012766:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
 801276a:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 801276e:	608b      	str	r3, [r1, #8]
 8012770:	7e93      	ldrb	r3, [r2, #26]
 8012772:	b923      	cbnz	r3, 801277e <dma_init+0x66>
 8012774:	688b      	ldr	r3, [r1, #8]
 8012776:	f023 0310 	bic.w	r3, r3, #16
 801277a:	608b      	str	r3, [r1, #8]
 801277c:	bd10      	pop	{r4, pc}
 801277e:	688b      	ldr	r3, [r1, #8]
 8012780:	f043 0310 	orr.w	r3, r3, #16
 8012784:	e7f9      	b.n	801277a <dma_init+0x62>
 8012786:	bf00      	nop
 8012788:	40020400 	andmi	r0, r2, r0, lsl #8

0801278c <dma_circulation_disable>:
 801278c:	4b06      	ldr	r3, [pc, #24]	; (80127a8 <dma_circulation_disable+0x1c>)
 801278e:	4298      	cmp	r0, r3
 8012790:	d102      	bne.n	8012798 <dma_circulation_disable+0xc>
 8012792:	2904      	cmp	r1, #4
 8012794:	d900      	bls.n	8012798 <dma_circulation_disable+0xc>
 8012796:	e7fe      	b.n	8012796 <dma_circulation_disable+0xa>
 8012798:	2314      	movs	r3, #20
 801279a:	4359      	muls	r1, r3
 801279c:	3008      	adds	r0, #8
 801279e:	580b      	ldr	r3, [r1, r0]
 80127a0:	f023 0320 	bic.w	r3, r3, #32
 80127a4:	500b      	str	r3, [r1, r0]
 80127a6:	4770      	bx	lr
 80127a8:	40020400 	andmi	r0, r2, r0, lsl #8

080127ac <dma_memory_to_memory_disable>:
 80127ac:	4b06      	ldr	r3, [pc, #24]	; (80127c8 <dma_memory_to_memory_disable+0x1c>)
 80127ae:	4298      	cmp	r0, r3
 80127b0:	d102      	bne.n	80127b8 <dma_memory_to_memory_disable+0xc>
 80127b2:	2904      	cmp	r1, #4
 80127b4:	d900      	bls.n	80127b8 <dma_memory_to_memory_disable+0xc>
 80127b6:	e7fe      	b.n	80127b6 <dma_memory_to_memory_disable+0xa>
 80127b8:	2314      	movs	r3, #20
 80127ba:	4359      	muls	r1, r3
 80127bc:	3008      	adds	r0, #8
 80127be:	580b      	ldr	r3, [r1, r0]
 80127c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80127c4:	500b      	str	r3, [r1, r0]
 80127c6:	4770      	bx	lr
 80127c8:	40020400 	andmi	r0, r2, r0, lsl #8

080127cc <enet_delay>:
 80127cc:	2300      	movs	r3, #0
 80127ce:	b082      	sub	sp, #8
 80127d0:	9301      	str	r3, [sp, #4]
 80127d2:	9001      	str	r0, [sp, #4]
 80127d4:	9b01      	ldr	r3, [sp, #4]
 80127d6:	b90b      	cbnz	r3, 80127dc <enet_delay+0x10>
 80127d8:	b002      	add	sp, #8
 80127da:	4770      	bx	lr
 80127dc:	9b01      	ldr	r3, [sp, #4]
 80127de:	3b01      	subs	r3, #1
 80127e0:	9301      	str	r3, [sp, #4]
 80127e2:	e7f7      	b.n	80127d4 <enet_delay+0x8>

080127e4 <enet_software_reset>:
 80127e4:	4b07      	ldr	r3, [pc, #28]	; (8012804 <enet_software_reset+0x20>)
 80127e6:	681a      	ldr	r2, [r3, #0]
 80127e8:	f042 0201 	orr.w	r2, r2, #1
 80127ec:	601a      	str	r2, [r3, #0]
 80127ee:	4a06      	ldr	r2, [pc, #24]	; (8012808 <enet_software_reset+0x24>)
 80127f0:	6819      	ldr	r1, [r3, #0]
 80127f2:	07c9      	lsls	r1, r1, #31
 80127f4:	d501      	bpl.n	80127fa <enet_software_reset+0x16>
 80127f6:	3a01      	subs	r2, #1
 80127f8:	d1fa      	bne.n	80127f0 <enet_software_reset+0xc>
 80127fa:	6818      	ldr	r0, [r3, #0]
 80127fc:	43c0      	mvns	r0, r0
 80127fe:	f000 0001 	and.w	r0, r0, #1
 8012802:	4770      	bx	lr
 8012804:	40029000 	andmi	r9, r2, r0
 8012808:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

0801280c <enet_descriptors_chain_init>:
 801280c:	f5b0 0fe0 	cmp.w	r0, #7340032	; 0x700000
 8012810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012812:	4a19      	ldr	r2, [pc, #100]	; (8012878 <enet_descriptors_chain_init+0x6c>)
 8012814:	d125      	bne.n	8012862 <enet_descriptors_chain_init+0x56>
 8012816:	2500      	movs	r5, #0
 8012818:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 801281c:	2002      	movs	r0, #2
 801281e:	4b17      	ldr	r3, [pc, #92]	; (801287c <enet_descriptors_chain_init+0x70>)
 8012820:	4c17      	ldr	r4, [pc, #92]	; (8012880 <enet_descriptors_chain_init+0x74>)
 8012822:	6113      	str	r3, [r2, #16]
 8012824:	4a17      	ldr	r2, [pc, #92]	; (8012884 <enet_descriptors_chain_init+0x78>)
 8012826:	6013      	str	r3, [r2, #0]
 8012828:	2200      	movs	r2, #0
 801282a:	f240 5ef4 	movw	lr, #1524	; 0x5f4
 801282e:	4916      	ldr	r1, [pc, #88]	; (8012888 <enet_descriptors_chain_init+0x7c>)
 8012830:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8012834:	600a      	str	r2, [r1, #0]
 8012836:	4915      	ldr	r1, [pc, #84]	; (801288c <enet_descriptors_chain_init+0x80>)
 8012838:	600a      	str	r2, [r1, #0]
 801283a:	f103 0110 	add.w	r1, r3, #16
 801283e:	fb0e 4702 	mla	r7, lr, r2, r4
 8012842:	f841 7c08 	str.w	r7, [r1, #-8]
 8012846:	4594      	cmp	ip, r2
 8012848:	bf94      	ite	ls
 801284a:	461f      	movls	r7, r3
 801284c:	460f      	movhi	r7, r1
 801284e:	3201      	adds	r2, #1
 8012850:	4290      	cmp	r0, r2
 8012852:	e941 6504 	strd	r6, r5, [r1, #-16]
 8012856:	f841 7c04 	str.w	r7, [r1, #-4]
 801285a:	f101 0110 	add.w	r1, r1, #16
 801285e:	d1ee      	bne.n	801283e <enet_descriptors_chain_init+0x32>
 8012860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012862:	4b0b      	ldr	r3, [pc, #44]	; (8012890 <enet_descriptors_chain_init+0x84>)
 8012864:	f244 55f4 	movw	r5, #17908	; 0x45f4
 8012868:	60d3      	str	r3, [r2, #12]
 801286a:	4a0a      	ldr	r2, [pc, #40]	; (8012894 <enet_descriptors_chain_init+0x88>)
 801286c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012870:	2004      	movs	r0, #4
 8012872:	4c09      	ldr	r4, [pc, #36]	; (8012898 <enet_descriptors_chain_init+0x8c>)
 8012874:	6013      	str	r3, [r2, #0]
 8012876:	e7d7      	b.n	8012828 <enet_descriptors_chain_init+0x1c>
 8012878:	40029000 	andmi	r9, r2, r0
 801287c:	20011bfc 	strdcs	r1, [r1], -ip
 8012880:	20011014 	andcs	r1, r1, r4, lsl r0
 8012884:	2000f7c4 	andcs	pc, r0, r4, asr #15
 8012888:	2000f7b8 			; <UNDEFINED> instruction: 0x2000f7b8
 801288c:	2000f7bc 			; <UNDEFINED> instruction: 0x2000f7bc
 8012890:	20010fd4 	ldrdcs	r0, [r1], -r4
 8012894:	2000f7c0 	andcs	pc, r0, r0, asr #15
 8012898:	2000f804 	andcs	pc, r0, r4, lsl #16

0801289c <enet_frame_receive>:
 801289c:	4a1d      	ldr	r2, [pc, #116]	; (8012914 <enet_frame_receive+0x78>)
 801289e:	b510      	push	{r4, lr}
 80128a0:	6813      	ldr	r3, [r2, #0]
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	db33      	blt.n	8012910 <enet_frame_receive+0x74>
 80128a8:	b970      	cbnz	r0, 80128c8 <enet_frame_receive+0x2c>
 80128aa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80128ae:	6813      	ldr	r3, [r2, #0]
 80128b0:	6019      	str	r1, [r3, #0]
 80128b2:	4919      	ldr	r1, [pc, #100]	; (8012918 <enet_frame_receive+0x7c>)
 80128b4:	6948      	ldr	r0, [r1, #20]
 80128b6:	0604      	lsls	r4, r0, #24
 80128b8:	d419      	bmi.n	80128ee <enet_frame_receive+0x52>
 80128ba:	6859      	ldr	r1, [r3, #4]
 80128bc:	0448      	lsls	r0, r1, #17
 80128be:	d51b      	bpl.n	80128f8 <enet_frame_receive+0x5c>
 80128c0:	68db      	ldr	r3, [r3, #12]
 80128c2:	2001      	movs	r0, #1
 80128c4:	6013      	str	r3, [r2, #0]
 80128c6:	bd10      	pop	{r4, pc}
 80128c8:	f403 4403 	and.w	r4, r3, #33536	; 0x8300
 80128cc:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 80128d0:	d11e      	bne.n	8012910 <enet_frame_receive+0x74>
 80128d2:	f3c3 430d 	ubfx	r3, r3, #16, #14
 80128d6:	3b04      	subs	r3, #4
 80128d8:	428b      	cmp	r3, r1
 80128da:	d819      	bhi.n	8012910 <enet_frame_receive+0x74>
 80128dc:	2100      	movs	r1, #0
 80128de:	4299      	cmp	r1, r3
 80128e0:	6814      	ldr	r4, [r2, #0]
 80128e2:	d2e2      	bcs.n	80128aa <enet_frame_receive+0xe>
 80128e4:	68a4      	ldr	r4, [r4, #8]
 80128e6:	5d0c      	ldrb	r4, [r1, r4]
 80128e8:	5444      	strb	r4, [r0, r1]
 80128ea:	3101      	adds	r1, #1
 80128ec:	e7f7      	b.n	80128de <enet_frame_receive+0x42>
 80128ee:	2080      	movs	r0, #128	; 0x80
 80128f0:	6148      	str	r0, [r1, #20]
 80128f2:	2000      	movs	r0, #0
 80128f4:	6088      	str	r0, [r1, #8]
 80128f6:	e7e0      	b.n	80128ba <enet_frame_receive+0x1e>
 80128f8:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 80128fc:	4906      	ldr	r1, [pc, #24]	; (8012918 <enet_frame_receive+0x7c>)
 80128fe:	bf05      	ittet	eq
 8012900:	3310      	addeq	r3, #16
 8012902:	6809      	ldreq	r1, [r1, #0]
 8012904:	68cb      	ldrne	r3, [r1, #12]
 8012906:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 801290a:	bf08      	it	eq
 801290c:	185b      	addeq	r3, r3, r1
 801290e:	e7d8      	b.n	80128c2 <enet_frame_receive+0x26>
 8012910:	2000      	movs	r0, #0
 8012912:	e7d8      	b.n	80128c6 <enet_frame_receive+0x2a>
 8012914:	2000f7c0 	andcs	pc, r0, r0, asr #15
 8012918:	40029000 	andmi	r9, r2, r0

0801291c <enet_frame_transmit>:
 801291c:	4a1e      	ldr	r2, [pc, #120]	; (8012998 <enet_frame_transmit+0x7c>)
 801291e:	b530      	push	{r4, r5, lr}
 8012920:	6813      	ldr	r3, [r2, #0]
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	2b00      	cmp	r3, #0
 8012926:	db34      	blt.n	8012992 <enet_frame_transmit+0x76>
 8012928:	f240 53f4 	movw	r3, #1524	; 0x5f4
 801292c:	4299      	cmp	r1, r3
 801292e:	d830      	bhi.n	8012992 <enet_frame_transmit+0x76>
 8012930:	b9e8      	cbnz	r0, 801296e <enet_frame_transmit+0x52>
 8012932:	6813      	ldr	r3, [r2, #0]
 8012934:	4819      	ldr	r0, [pc, #100]	; (801299c <enet_frame_transmit+0x80>)
 8012936:	6059      	str	r1, [r3, #4]
 8012938:	6819      	ldr	r1, [r3, #0]
 801293a:	f041 4130 	orr.w	r1, r1, #2952790016	; 0xb0000000
 801293e:	6019      	str	r1, [r3, #0]
 8012940:	6941      	ldr	r1, [r0, #20]
 8012942:	6944      	ldr	r4, [r0, #20]
 8012944:	f001 0104 	and.w	r1, r1, #4
 8012948:	f004 0420 	and.w	r4, r4, #32
 801294c:	4321      	orrs	r1, r4
 801294e:	d110      	bne.n	8012972 <enet_frame_transmit+0x56>
 8012950:	6819      	ldr	r1, [r3, #0]
 8012952:	02c8      	lsls	r0, r1, #11
 8012954:	d511      	bpl.n	801297a <enet_frame_transmit+0x5e>
 8012956:	68db      	ldr	r3, [r3, #12]
 8012958:	2001      	movs	r0, #1
 801295a:	6013      	str	r3, [r2, #0]
 801295c:	bd30      	pop	{r4, r5, pc}
 801295e:	5cc5      	ldrb	r5, [r0, r3]
 8012960:	68a4      	ldr	r4, [r4, #8]
 8012962:	551d      	strb	r5, [r3, r4]
 8012964:	3301      	adds	r3, #1
 8012966:	428b      	cmp	r3, r1
 8012968:	6814      	ldr	r4, [r2, #0]
 801296a:	d1f8      	bne.n	801295e <enet_frame_transmit+0x42>
 801296c:	e7e1      	b.n	8012932 <enet_frame_transmit+0x16>
 801296e:	2300      	movs	r3, #0
 8012970:	e7f9      	b.n	8012966 <enet_frame_transmit+0x4a>
 8012972:	6141      	str	r1, [r0, #20]
 8012974:	2100      	movs	r1, #0
 8012976:	6041      	str	r1, [r0, #4]
 8012978:	e7ea      	b.n	8012950 <enet_frame_transmit+0x34>
 801297a:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 801297e:	4907      	ldr	r1, [pc, #28]	; (801299c <enet_frame_transmit+0x80>)
 8012980:	bf05      	ittet	eq
 8012982:	3310      	addeq	r3, #16
 8012984:	6809      	ldreq	r1, [r1, #0]
 8012986:	690b      	ldrne	r3, [r1, #16]
 8012988:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 801298c:	bf08      	it	eq
 801298e:	185b      	addeq	r3, r3, r1
 8012990:	e7e2      	b.n	8012958 <enet_frame_transmit+0x3c>
 8012992:	2000      	movs	r0, #0
 8012994:	e7e2      	b.n	801295c <enet_frame_transmit+0x40>
 8012996:	bf00      	nop
 8012998:	2000f7c4 	andcs	pc, r0, r4, asr #15
 801299c:	40029000 	andmi	r9, r2, r0

080129a0 <enet_transmit_checksum_config>:
 80129a0:	6803      	ldr	r3, [r0, #0]
 80129a2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80129a6:	430b      	orrs	r3, r1
 80129a8:	6003      	str	r3, [r0, #0]
 80129aa:	4770      	bx	lr

080129ac <enet_mac_address_set>:
 80129ac:	888a      	ldrh	r2, [r1, #4]
 80129ae:	4b03      	ldr	r3, [pc, #12]	; (80129bc <enet_mac_address_set+0x10>)
 80129b0:	50c2      	str	r2, [r0, r3]
 80129b2:	680a      	ldr	r2, [r1, #0]
 80129b4:	3304      	adds	r3, #4
 80129b6:	50c2      	str	r2, [r0, r3]
 80129b8:	4770      	bx	lr
 80129ba:	bf00      	nop
 80129bc:	40028040 	andmi	r8, r2, r0, asr #32

080129c0 <enet_rx_enable>:
 80129c0:	4a05      	ldr	r2, [pc, #20]	; (80129d8 <enet_rx_enable+0x18>)
 80129c2:	6813      	ldr	r3, [r2, #0]
 80129c4:	f043 0304 	orr.w	r3, r3, #4
 80129c8:	6013      	str	r3, [r2, #0]
 80129ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80129ce:	6993      	ldr	r3, [r2, #24]
 80129d0:	f043 0302 	orr.w	r3, r3, #2
 80129d4:	6193      	str	r3, [r2, #24]
 80129d6:	4770      	bx	lr
 80129d8:	40028000 	andmi	r8, r2, r0

080129dc <enet_phy_write_read>:
 80129dc:	b530      	push	{r4, r5, lr}
 80129de:	4604      	mov	r4, r0
 80129e0:	4d13      	ldr	r5, [pc, #76]	; (8012a30 <enet_phy_write_read+0x54>)
 80129e2:	0192      	lsls	r2, r2, #6
 80129e4:	6928      	ldr	r0, [r5, #16]
 80129e6:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 80129ea:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
 80129ee:	f020 00c3 	bic.w	r0, r0, #195	; 0xc3
 80129f2:	4302      	orrs	r2, r0
 80129f4:	02c9      	lsls	r1, r1, #11
 80129f6:	b289      	uxth	r1, r1
 80129f8:	2c02      	cmp	r4, #2
 80129fa:	ea42 0204 	orr.w	r2, r2, r4
 80129fe:	ea42 0201 	orr.w	r2, r2, r1
 8012a02:	bf08      	it	eq
 8012a04:	8819      	ldrheq	r1, [r3, #0]
 8012a06:	f042 0201 	orr.w	r2, r2, #1
 8012a0a:	bf08      	it	eq
 8012a0c:	6169      	streq	r1, [r5, #20]
 8012a0e:	612a      	str	r2, [r5, #16]
 8012a10:	4907      	ldr	r1, [pc, #28]	; (8012a30 <enet_phy_write_read+0x54>)
 8012a12:	4a08      	ldr	r2, [pc, #32]	; (8012a34 <enet_phy_write_read+0x58>)
 8012a14:	6908      	ldr	r0, [r1, #16]
 8012a16:	07c0      	lsls	r0, r0, #31
 8012a18:	d501      	bpl.n	8012a1e <enet_phy_write_read+0x42>
 8012a1a:	3a01      	subs	r2, #1
 8012a1c:	d1fa      	bne.n	8012a14 <enet_phy_write_read+0x38>
 8012a1e:	690a      	ldr	r2, [r1, #16]
 8012a20:	43d2      	mvns	r2, r2
 8012a22:	f002 0001 	and.w	r0, r2, #1
 8012a26:	b90c      	cbnz	r4, 8012a2c <enet_phy_write_read+0x50>
 8012a28:	694a      	ldr	r2, [r1, #20]
 8012a2a:	801a      	strh	r2, [r3, #0]
 8012a2c:	bd30      	pop	{r4, r5, pc}
 8012a2e:	bf00      	nop
 8012a30:	40028000 	andmi	r8, r2, r0
 8012a34:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08012a38 <enet_phy_config>:
 8012a38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012a3a:	4d22      	ldr	r5, [pc, #136]	; (8012ac4 <enet_phy_config+0x8c>)
 8012a3c:	2001      	movs	r0, #1
 8012a3e:	692c      	ldr	r4, [r5, #16]
 8012a40:	f7fe ff36 	bl	80118b0 <rcu_clock_freq_get>
 8012a44:	4b20      	ldr	r3, [pc, #128]	; (8012ac8 <enet_phy_config+0x90>)
 8012a46:	4a21      	ldr	r2, [pc, #132]	; (8012acc <enet_phy_config+0x94>)
 8012a48:	4403      	add	r3, r0
 8012a4a:	4293      	cmp	r3, r2
 8012a4c:	f024 041c 	bic.w	r4, r4, #28
 8012a50:	d21f      	bcs.n	8012a92 <enet_phy_config+0x5a>
 8012a52:	f044 0408 	orr.w	r4, r4, #8
 8012a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012a5a:	612c      	str	r4, [r5, #16]
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012a62:	2101      	movs	r1, #1
 8012a64:	2002      	movs	r0, #2
 8012a66:	f10d 0306 	add.w	r3, sp, #6
 8012a6a:	f7ff ffb7 	bl	80129dc <enet_phy_write_read>
 8012a6e:	b310      	cbz	r0, 8012ab6 <enet_phy_config+0x7e>
 8012a70:	2200      	movs	r2, #0
 8012a72:	4817      	ldr	r0, [pc, #92]	; (8012ad0 <enet_phy_config+0x98>)
 8012a74:	f7ff feaa 	bl	80127cc <enet_delay>
 8012a78:	2101      	movs	r1, #1
 8012a7a:	4610      	mov	r0, r2
 8012a7c:	f10d 0306 	add.w	r3, sp, #6
 8012a80:	f7ff ffac 	bl	80129dc <enet_phy_write_read>
 8012a84:	b1b8      	cbz	r0, 8012ab6 <enet_phy_config+0x7e>
 8012a86:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8012a8a:	43c0      	mvns	r0, r0
 8012a8c:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8012a90:	e012      	b.n	8012ab8 <enet_phy_config+0x80>
 8012a92:	4b10      	ldr	r3, [pc, #64]	; (8012ad4 <enet_phy_config+0x9c>)
 8012a94:	4a10      	ldr	r2, [pc, #64]	; (8012ad8 <enet_phy_config+0xa0>)
 8012a96:	4403      	add	r3, r0
 8012a98:	4293      	cmp	r3, r2
 8012a9a:	d802      	bhi.n	8012aa2 <enet_phy_config+0x6a>
 8012a9c:	f044 040c 	orr.w	r4, r4, #12
 8012aa0:	e7d9      	b.n	8012a56 <enet_phy_config+0x1e>
 8012aa2:	4b0e      	ldr	r3, [pc, #56]	; (8012adc <enet_phy_config+0xa4>)
 8012aa4:	4a0e      	ldr	r2, [pc, #56]	; (8012ae0 <enet_phy_config+0xa8>)
 8012aa6:	4403      	add	r3, r0
 8012aa8:	4293      	cmp	r3, r2
 8012aaa:	d9d4      	bls.n	8012a56 <enet_phy_config+0x1e>
 8012aac:	4b0d      	ldr	r3, [pc, #52]	; (8012ae4 <enet_phy_config+0xac>)
 8012aae:	4a0e      	ldr	r2, [pc, #56]	; (8012ae8 <enet_phy_config+0xb0>)
 8012ab0:	4403      	add	r3, r0
 8012ab2:	4293      	cmp	r3, r2
 8012ab4:	d902      	bls.n	8012abc <enet_phy_config+0x84>
 8012ab6:	2000      	movs	r0, #0
 8012ab8:	b003      	add	sp, #12
 8012aba:	bd30      	pop	{r4, r5, pc}
 8012abc:	f044 0404 	orr.w	r4, r4, #4
 8012ac0:	e7c9      	b.n	8012a56 <enet_phy_config+0x1e>
 8012ac2:	bf00      	nop
 8012ac4:	40028000 	andmi	r8, r2, r0
 8012ac8:	feced300 	cdp2	3, 12, cr13, cr14, cr0, {0}
 8012acc:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 8012ad0:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 8012ad4:	fde9f140 	stc2l	1, cr15, [r9, #256]!	; 0x100
 8012ad8:	017d783f 	cmneq	sp, pc, lsr r8
 8012adc:	fc6c7900 	stc2l	9, cr7, [ip], #-0	; <UNPREDICTABLE>
 8012ae0:	01c9c37f 	biceq	ip, r9, pc, ror r3
 8012ae4:	faa2b580 	blx	68c00ec <__stack_size+0x68be8ec>
 8012ae8:	0112a880 	tsteq	r2, r0, lsl #17

08012aec <enet_init>:
 8012aec:	2300      	movs	r3, #0
 8012aee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012af0:	4604      	mov	r4, r0
 8012af2:	460d      	mov	r5, r1
 8012af4:	4616      	mov	r6, r2
 8012af6:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012afa:	f7ff ff9d 	bl	8012a38 <enet_phy_config>
 8012afe:	2800      	cmp	r0, #0
 8012b00:	d037      	beq.n	8012b72 <enet_init+0x86>
 8012b02:	4b3b      	ldr	r3, [pc, #236]	; (8012bf0 <enet_init+0x104>)
 8012b04:	4a3b      	ldr	r2, [pc, #236]	; (8012bf4 <enet_init+0x108>)
 8012b06:	6819      	ldr	r1, [r3, #0]
 8012b08:	2c01      	cmp	r4, #1
 8012b0a:	ea02 0201 	and.w	r2, r2, r1
 8012b0e:	601a      	str	r2, [r3, #0]
 8012b10:	f04f 0200 	mov.w	r2, #0
 8012b14:	605a      	str	r2, [r3, #4]
 8012b16:	609a      	str	r2, [r3, #8]
 8012b18:	60da      	str	r2, [r3, #12]
 8012b1a:	6999      	ldr	r1, [r3, #24]
 8012b1c:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
 8012b20:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8012b24:	ea4f 4111 	mov.w	r1, r1, lsr #16
 8012b28:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8012b2c:	6199      	str	r1, [r3, #24]
 8012b2e:	4932      	ldr	r1, [pc, #200]	; (8012bf8 <enet_init+0x10c>)
 8012b30:	61da      	str	r2, [r3, #28]
 8012b32:	6988      	ldr	r0, [r1, #24]
 8012b34:	4b31      	ldr	r3, [pc, #196]	; (8012bfc <enet_init+0x110>)
 8012b36:	ea03 0300 	and.w	r3, r3, r0
 8012b3a:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8012b3e:	618b      	str	r3, [r1, #24]
 8012b40:	680b      	ldr	r3, [r1, #0]
 8012b42:	4b2f      	ldr	r3, [pc, #188]	; (8012c00 <enet_init+0x114>)
 8012b44:	600b      	str	r3, [r1, #0]
 8012b46:	d01e      	beq.n	8012b86 <enet_init+0x9a>
 8012b48:	08e3      	lsrs	r3, r4, #3
 8012b4a:	0861      	lsrs	r1, r4, #1
 8012b4c:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8012b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012b54:	430b      	orrs	r3, r1
 8012b56:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012b5a:	2101      	movs	r1, #1
 8012b5c:	2002      	movs	r0, #2
 8012b5e:	f10d 0306 	add.w	r3, sp, #6
 8012b62:	f7ff ff3b 	bl	80129dc <enet_phy_write_read>
 8012b66:	b158      	cbz	r0, 8012b80 <enet_init+0x94>
 8012b68:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8012b6c:	f7ff fe2e 	bl	80127cc <enet_delay>
 8012b70:	e05d      	b.n	8012c2e <enet_init+0x142>
 8012b72:	4824      	ldr	r0, [pc, #144]	; (8012c04 <enet_init+0x118>)
 8012b74:	f7ff fe2a 	bl	80127cc <enet_delay>
 8012b78:	f7ff ff5e 	bl	8012a38 <enet_phy_config>
 8012b7c:	2800      	cmp	r0, #0
 8012b7e:	d1c0      	bne.n	8012b02 <enet_init+0x16>
 8012b80:	2000      	movs	r0, #0
 8012b82:	b003      	add	sp, #12
 8012b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b86:	4614      	mov	r4, r2
 8012b88:	4f1f      	ldr	r7, [pc, #124]	; (8012c08 <enet_init+0x11c>)
 8012b8a:	2201      	movs	r2, #1
 8012b8c:	2000      	movs	r0, #0
 8012b8e:	4611      	mov	r1, r2
 8012b90:	f10d 0306 	add.w	r3, sp, #6
 8012b94:	f7ff ff22 	bl	80129dc <enet_phy_write_read>
 8012b98:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012b9c:	3401      	adds	r4, #1
 8012b9e:	f002 0204 	and.w	r2, r2, #4
 8012ba2:	f8ad 2006 	strh.w	r2, [sp, #6]
 8012ba6:	b912      	cbnz	r2, 8012bae <enet_init+0xc2>
 8012ba8:	42bc      	cmp	r4, r7
 8012baa:	d1ee      	bne.n	8012b8a <enet_init+0x9e>
 8012bac:	e7e8      	b.n	8012b80 <enet_init+0x94>
 8012bae:	42bc      	cmp	r4, r7
 8012bb0:	d0e6      	beq.n	8012b80 <enet_init+0x94>
 8012bb2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012bb6:	2101      	movs	r1, #1
 8012bb8:	f8ad 2006 	strh.w	r2, [sp, #6]
 8012bbc:	2002      	movs	r0, #2
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	f7ff ff0c 	bl	80129dc <enet_phy_write_read>
 8012bc4:	2800      	cmp	r0, #0
 8012bc6:	d0db      	beq.n	8012b80 <enet_init+0x94>
 8012bc8:	2400      	movs	r4, #0
 8012bca:	4f0f      	ldr	r7, [pc, #60]	; (8012c08 <enet_init+0x11c>)
 8012bcc:	2201      	movs	r2, #1
 8012bce:	2000      	movs	r0, #0
 8012bd0:	4611      	mov	r1, r2
 8012bd2:	f10d 0306 	add.w	r3, sp, #6
 8012bd6:	f7ff ff01 	bl	80129dc <enet_phy_write_read>
 8012bda:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012bde:	3401      	adds	r4, #1
 8012be0:	f002 0220 	and.w	r2, r2, #32
 8012be4:	f8ad 2006 	strh.w	r2, [sp, #6]
 8012be8:	b982      	cbnz	r2, 8012c0c <enet_init+0x120>
 8012bea:	42bc      	cmp	r4, r7
 8012bec:	d1ee      	bne.n	8012bcc <enet_init+0xe0>
 8012bee:	e7c7      	b.n	8012b80 <enet_init+0x94>
 8012bf0:	40028000 	andmi	r8, r2, r0
 8012bf4:	fd30810f 	ldc2	1, cr8, [r0, #-60]!	; 0xffffffc4
 8012bf8:	40029000 	andmi	r9, r2, r0
 8012bfc:	f8de3f23 			; <UNDEFINED> instruction: 0xf8de3f23
 8012c00:	02c16000 	sbceq	r6, r1, #0
 8012c04:	008fffff 	strdeq	pc, [pc], pc	; <UNPREDICTABLE>
 8012c08:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 8012c0c:	42bc      	cmp	r4, r7
 8012c0e:	d0b7      	beq.n	8012b80 <enet_init+0x94>
 8012c10:	2101      	movs	r1, #1
 8012c12:	2210      	movs	r2, #16
 8012c14:	2000      	movs	r0, #0
 8012c16:	f7ff fee1 	bl	80129dc <enet_phy_write_read>
 8012c1a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8012c1e:	f3c3 0480 	ubfx	r4, r3, #2, #1
 8012c22:	0799      	lsls	r1, r3, #30
 8012c24:	ea4f 24c4 	mov.w	r4, r4, lsl #11
 8012c28:	d401      	bmi.n	8012c2e <enet_init+0x142>
 8012c2a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8012c2e:	4b63      	ldr	r3, [pc, #396]	; (8012dbc <enet_init+0x2d0>)
 8012c30:	681a      	ldr	r2, [r3, #0]
 8012c32:	f422 42b0 	bic.w	r2, r2, #22528	; 0x5800
 8012c36:	4314      	orrs	r4, r2
 8012c38:	056a      	lsls	r2, r5, #21
 8012c3a:	601c      	str	r4, [r3, #0]
 8012c3c:	d50b      	bpl.n	8012c56 <enet_init+0x16a>
 8012c3e:	681a      	ldr	r2, [r3, #0]
 8012c40:	f005 6580 	and.w	r5, r5, #67108864	; 0x4000000
 8012c44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012c48:	601a      	str	r2, [r3, #0]
 8012c4a:	4a5d      	ldr	r2, [pc, #372]	; (8012dc0 <enet_init+0x2d4>)
 8012c4c:	6993      	ldr	r3, [r2, #24]
 8012c4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012c52:	431d      	orrs	r5, r3
 8012c54:	6195      	str	r5, [r2, #24]
 8012c56:	4959      	ldr	r1, [pc, #356]	; (8012dbc <enet_init+0x2d0>)
 8012c58:	684b      	ldr	r3, [r1, #4]
 8012c5a:	431e      	orrs	r6, r3
 8012c5c:	4b59      	ldr	r3, [pc, #356]	; (8012dc4 <enet_init+0x2d8>)
 8012c5e:	604e      	str	r6, [r1, #4]
 8012c60:	681a      	ldr	r2, [r3, #0]
 8012c62:	07d7      	lsls	r7, r2, #31
 8012c64:	d510      	bpl.n	8012c88 <enet_init+0x19c>
 8012c66:	685a      	ldr	r2, [r3, #4]
 8012c68:	680c      	ldr	r4, [r1, #0]
 8012c6a:	f002 0080 	and.w	r0, r2, #128	; 0x80
 8012c6e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 8012c72:	4320      	orrs	r0, r4
 8012c74:	6008      	str	r0, [r1, #0]
 8012c76:	4852      	ldr	r0, [pc, #328]	; (8012dc0 <enet_init+0x2d4>)
 8012c78:	0892      	lsrs	r2, r2, #2
 8012c7a:	6981      	ldr	r1, [r0, #24]
 8012c7c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8012c80:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8012c84:	430a      	orrs	r2, r1
 8012c86:	6182      	str	r2, [r0, #24]
 8012c88:	681a      	ldr	r2, [r3, #0]
 8012c8a:	0796      	lsls	r6, r2, #30
 8012c8c:	d508      	bpl.n	8012ca0 <enet_init+0x1b4>
 8012c8e:	494c      	ldr	r1, [pc, #304]	; (8012dc0 <enet_init+0x2d4>)
 8012c90:	6898      	ldr	r0, [r3, #8]
 8012c92:	680a      	ldr	r2, [r1, #0]
 8012c94:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8012c98:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8012c9c:	4302      	orrs	r2, r0
 8012c9e:	600a      	str	r2, [r1, #0]
 8012ca0:	681a      	ldr	r2, [r3, #0]
 8012ca2:	0755      	lsls	r5, r2, #29
 8012ca4:	d508      	bpl.n	8012cb8 <enet_init+0x1cc>
 8012ca6:	4946      	ldr	r1, [pc, #280]	; (8012dc0 <enet_init+0x2d4>)
 8012ca8:	68d8      	ldr	r0, [r3, #12]
 8012caa:	680a      	ldr	r2, [r1, #0]
 8012cac:	f422 027e 	bic.w	r2, r2, #16646144	; 0xfe0000
 8012cb0:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8012cb4:	4302      	orrs	r2, r0
 8012cb6:	600a      	str	r2, [r1, #0]
 8012cb8:	681a      	ldr	r2, [r3, #0]
 8012cba:	0714      	lsls	r4, r2, #28
 8012cbc:	d508      	bpl.n	8012cd0 <enet_init+0x1e4>
 8012cbe:	4940      	ldr	r1, [pc, #256]	; (8012dc0 <enet_init+0x2d4>)
 8012cc0:	6918      	ldr	r0, [r3, #16]
 8012cc2:	680a      	ldr	r2, [r1, #0]
 8012cc4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8012cc8:	f022 0202 	bic.w	r2, r2, #2
 8012ccc:	4302      	orrs	r2, r0
 8012cce:	600a      	str	r2, [r1, #0]
 8012cd0:	681a      	ldr	r2, [r3, #0]
 8012cd2:	06d0      	lsls	r0, r2, #27
 8012cd4:	d506      	bpl.n	8012ce4 <enet_init+0x1f8>
 8012cd6:	493a      	ldr	r1, [pc, #232]	; (8012dc0 <enet_init+0x2d4>)
 8012cd8:	4a3b      	ldr	r2, [pc, #236]	; (8012dc8 <enet_init+0x2dc>)
 8012cda:	6988      	ldr	r0, [r1, #24]
 8012cdc:	4002      	ands	r2, r0
 8012cde:	6958      	ldr	r0, [r3, #20]
 8012ce0:	4302      	orrs	r2, r0
 8012ce2:	618a      	str	r2, [r1, #24]
 8012ce4:	681a      	ldr	r2, [r3, #0]
 8012ce6:	0691      	lsls	r1, r2, #26
 8012ce8:	d508      	bpl.n	8012cfc <enet_init+0x210>
 8012cea:	4935      	ldr	r1, [pc, #212]	; (8012dc0 <enet_init+0x2d4>)
 8012cec:	6998      	ldr	r0, [r3, #24]
 8012cee:	698a      	ldr	r2, [r1, #24]
 8012cf0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8012cf4:	f022 0204 	bic.w	r2, r2, #4
 8012cf8:	4302      	orrs	r2, r0
 8012cfa:	618a      	str	r2, [r1, #24]
 8012cfc:	681a      	ldr	r2, [r3, #0]
 8012cfe:	0652      	lsls	r2, r2, #25
 8012d00:	d506      	bpl.n	8012d10 <enet_init+0x224>
 8012d02:	492e      	ldr	r1, [pc, #184]	; (8012dbc <enet_init+0x2d0>)
 8012d04:	69d8      	ldr	r0, [r3, #28]
 8012d06:	69ca      	ldr	r2, [r1, #28]
 8012d08:	0c52      	lsrs	r2, r2, #17
 8012d0a:	0452      	lsls	r2, r2, #17
 8012d0c:	4302      	orrs	r2, r0
 8012d0e:	61ca      	str	r2, [r1, #28]
 8012d10:	681a      	ldr	r2, [r3, #0]
 8012d12:	0617      	lsls	r7, r2, #24
 8012d14:	d517      	bpl.n	8012d46 <enet_init+0x25a>
 8012d16:	4c29      	ldr	r4, [pc, #164]	; (8012dbc <enet_init+0x2d0>)
 8012d18:	6a1a      	ldr	r2, [r3, #32]
 8012d1a:	69a0      	ldr	r0, [r4, #24]
 8012d1c:	f422 417f 	bic.w	r1, r2, #65280	; 0xff00
 8012d20:	f020 00be 	bic.w	r0, r0, #190	; 0xbe
 8012d24:	0400      	lsls	r0, r0, #16
 8012d26:	0c00      	lsrs	r0, r0, #16
 8012d28:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8012d2c:	4301      	orrs	r1, r0
 8012d2e:	4824      	ldr	r0, [pc, #144]	; (8012dc0 <enet_init+0x2d4>)
 8012d30:	61a1      	str	r1, [r4, #24]
 8012d32:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8012d36:	0a12      	lsrs	r2, r2, #8
 8012d38:	f021 0177 	bic.w	r1, r1, #119	; 0x77
 8012d3c:	f002 0277 	and.w	r2, r2, #119	; 0x77
 8012d40:	430a      	orrs	r2, r1
 8012d42:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8012d46:	681a      	ldr	r2, [r3, #0]
 8012d48:	05d6      	lsls	r6, r2, #23
 8012d4a:	bf42      	ittt	mi
 8012d4c:	6a59      	ldrmi	r1, [r3, #36]	; 0x24
 8012d4e:	4a1b      	ldrmi	r2, [pc, #108]	; (8012dbc <enet_init+0x2d0>)
 8012d50:	6091      	strmi	r1, [r2, #8]
 8012d52:	681a      	ldr	r2, [r3, #0]
 8012d54:	0595      	lsls	r5, r2, #22
 8012d56:	bf42      	ittt	mi
 8012d58:	4a18      	ldrmi	r2, [pc, #96]	; (8012dbc <enet_init+0x2d0>)
 8012d5a:	6a99      	ldrmi	r1, [r3, #40]	; 0x28
 8012d5c:	60d1      	strmi	r1, [r2, #12]
 8012d5e:	681a      	ldr	r2, [r3, #0]
 8012d60:	0554      	lsls	r4, r2, #21
 8012d62:	d508      	bpl.n	8012d76 <enet_init+0x28a>
 8012d64:	4915      	ldr	r1, [pc, #84]	; (8012dbc <enet_init+0x2d0>)
 8012d66:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012d68:	684a      	ldr	r2, [r1, #4]
 8012d6a:	f422 62fb 	bic.w	r2, r2, #2008	; 0x7d8
 8012d6e:	f022 0206 	bic.w	r2, r2, #6
 8012d72:	4302      	orrs	r2, r0
 8012d74:	604a      	str	r2, [r1, #4]
 8012d76:	681a      	ldr	r2, [r3, #0]
 8012d78:	0510      	lsls	r0, r2, #20
 8012d7a:	d508      	bpl.n	8012d8e <enet_init+0x2a2>
 8012d7c:	490f      	ldr	r1, [pc, #60]	; (8012dbc <enet_init+0x2d0>)
 8012d7e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012d80:	680a      	ldr	r2, [r1, #0]
 8012d82:	f422 3291 	bic.w	r2, r2, #74240	; 0x12200
 8012d86:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8012d8a:	4302      	orrs	r2, r0
 8012d8c:	600a      	str	r2, [r1, #0]
 8012d8e:	681a      	ldr	r2, [r3, #0]
 8012d90:	04d1      	lsls	r1, r2, #19
 8012d92:	d506      	bpl.n	8012da2 <enet_init+0x2b6>
 8012d94:	4909      	ldr	r1, [pc, #36]	; (8012dbc <enet_init+0x2d0>)
 8012d96:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8012d98:	680a      	ldr	r2, [r1, #0]
 8012d9a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8012d9e:	4302      	orrs	r2, r0
 8012da0:	600a      	str	r2, [r1, #0]
 8012da2:	681a      	ldr	r2, [r3, #0]
 8012da4:	0492      	lsls	r2, r2, #18
 8012da6:	d506      	bpl.n	8012db6 <enet_init+0x2ca>
 8012da8:	4904      	ldr	r1, [pc, #16]	; (8012dbc <enet_init+0x2d0>)
 8012daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012dac:	680a      	ldr	r2, [r1, #0]
 8012dae:	f422 2260 	bic.w	r2, r2, #917504	; 0xe0000
 8012db2:	4313      	orrs	r3, r2
 8012db4:	600b      	str	r3, [r1, #0]
 8012db6:	2001      	movs	r0, #1
 8012db8:	e6e3      	b.n	8012b82 <enet_init+0x96>
 8012dba:	bf00      	nop
 8012dbc:	40028000 	andmi	r8, r2, r0
 8012dc0:	40029000 	andmi	r9, r2, r0
 8012dc4:	2000f7c8 	andcs	pc, r0, r8, asr #15
 8012dc8:	fdde3fe7 	ldc2l	15, cr3, [lr, #924]	; 0x39c

08012dcc <enet_txfifo_flush>:
 8012dcc:	4b06      	ldr	r3, [pc, #24]	; (8012de8 <enet_txfifo_flush+0x1c>)
 8012dce:	4807      	ldr	r0, [pc, #28]	; (8012dec <enet_txfifo_flush+0x20>)
 8012dd0:	699a      	ldr	r2, [r3, #24]
 8012dd2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8012dd6:	619a      	str	r2, [r3, #24]
 8012dd8:	699a      	ldr	r2, [r3, #24]
 8012dda:	02d2      	lsls	r2, r2, #11
 8012ddc:	d502      	bpl.n	8012de4 <enet_txfifo_flush+0x18>
 8012dde:	3801      	subs	r0, #1
 8012de0:	d1fa      	bne.n	8012dd8 <enet_txfifo_flush+0xc>
 8012de2:	4770      	bx	lr
 8012de4:	2001      	movs	r0, #1
 8012de6:	4770      	bx	lr
 8012de8:	40029000 	andmi	r9, r2, r0
 8012dec:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08012df0 <enet_tx_enable>:
 8012df0:	4a06      	ldr	r2, [pc, #24]	; (8012e0c <enet_tx_enable+0x1c>)
 8012df2:	b508      	push	{r3, lr}
 8012df4:	6813      	ldr	r3, [r2, #0]
 8012df6:	f043 0308 	orr.w	r3, r3, #8
 8012dfa:	6013      	str	r3, [r2, #0]
 8012dfc:	f7ff ffe6 	bl	8012dcc <enet_txfifo_flush>
 8012e00:	4a03      	ldr	r2, [pc, #12]	; (8012e10 <enet_tx_enable+0x20>)
 8012e02:	6993      	ldr	r3, [r2, #24]
 8012e04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012e08:	6193      	str	r3, [r2, #24]
 8012e0a:	bd08      	pop	{r3, pc}
 8012e0c:	40028000 	andmi	r8, r2, r0
 8012e10:	40029000 	andmi	r9, r2, r0

08012e14 <enet_enable>:
 8012e14:	b508      	push	{r3, lr}
 8012e16:	f7ff ffeb 	bl	8012df0 <enet_tx_enable>
 8012e1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012e1e:	f7ff bdcf 	b.w	80129c0 <enet_rx_enable>

08012e22 <enet_desc_information_get>:
 8012e22:	2905      	cmp	r1, #5
 8012e24:	d817      	bhi.n	8012e56 <enet_desc_information_get+0x34>
 8012e26:	e8df f001 	tbb	[pc, r1]
 8012e2a:	03091012 	movweq	r1, #36882	; 0x9012
 8012e2e:	68401007 	stmdavs	r0, {r0, r1, r2, ip}^
 8012e32:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8012e36:	4770      	bx	lr
 8012e38:	88c0      	ldrh	r0, [r0, #6]
 8012e3a:	e7fa      	b.n	8012e32 <enet_desc_information_get+0x10>
 8012e3c:	8840      	ldrh	r0, [r0, #2]
 8012e3e:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8012e42:	2804      	cmp	r0, #4
 8012e44:	d90a      	bls.n	8012e5c <enet_desc_information_get+0x3a>
 8012e46:	3804      	subs	r0, #4
 8012e48:	4770      	bx	lr
 8012e4a:	6880      	ldr	r0, [r0, #8]
 8012e4c:	4770      	bx	lr
 8012e4e:	6800      	ldr	r0, [r0, #0]
 8012e50:	f3c0 00c3 	ubfx	r0, r0, #3, #4
 8012e54:	4770      	bx	lr
 8012e56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012e5a:	4770      	bx	lr
 8012e5c:	2000      	movs	r0, #0
 8012e5e:	4770      	bx	lr

08012e60 <enet_rxframe_drop>:
 8012e60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012e64:	4814      	ldr	r0, [pc, #80]	; (8012eb8 <enet_rxframe_drop+0x58>)
 8012e66:	b510      	push	{r4, lr}
 8012e68:	6802      	ldr	r2, [r0, #0]
 8012e6a:	4914      	ldr	r1, [pc, #80]	; (8012ebc <enet_rxframe_drop+0x5c>)
 8012e6c:	6854      	ldr	r4, [r2, #4]
 8012e6e:	6013      	str	r3, [r2, #0]
 8012e70:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8012e74:	680b      	ldr	r3, [r1, #0]
 8012e76:	d009      	beq.n	8012e8c <enet_rxframe_drop+0x2c>
 8012e78:	b12b      	cbz	r3, 8012e86 <enet_rxframe_drop+0x26>
 8012e7a:	68da      	ldr	r2, [r3, #12]
 8012e7c:	6002      	str	r2, [r0, #0]
 8012e7e:	681a      	ldr	r2, [r3, #0]
 8012e80:	b1ba      	cbz	r2, 8012eb2 <enet_rxframe_drop+0x52>
 8012e82:	600a      	str	r2, [r1, #0]
 8012e84:	bd10      	pop	{r4, pc}
 8012e86:	68d3      	ldr	r3, [r2, #12]
 8012e88:	6003      	str	r3, [r0, #0]
 8012e8a:	e7fb      	b.n	8012e84 <enet_rxframe_drop+0x24>
 8012e8c:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8012e90:	4c0b      	ldr	r4, [pc, #44]	; (8012ec0 <enet_rxframe_drop+0x60>)
 8012e92:	d006      	beq.n	8012ea2 <enet_rxframe_drop+0x42>
 8012e94:	68e2      	ldr	r2, [r4, #12]
 8012e96:	6002      	str	r2, [r0, #0]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d0f3      	beq.n	8012e84 <enet_rxframe_drop+0x24>
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	600b      	str	r3, [r1, #0]
 8012ea0:	e7f0      	b.n	8012e84 <enet_rxframe_drop+0x24>
 8012ea2:	6824      	ldr	r4, [r4, #0]
 8012ea4:	3210      	adds	r2, #16
 8012ea6:	f3c4 0484 	ubfx	r4, r4, #2, #5
 8012eaa:	4422      	add	r2, r4
 8012eac:	6002      	str	r2, [r0, #0]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d0e8      	beq.n	8012e84 <enet_rxframe_drop+0x24>
 8012eb2:	3310      	adds	r3, #16
 8012eb4:	e7f3      	b.n	8012e9e <enet_rxframe_drop+0x3e>
 8012eb6:	bf00      	nop
 8012eb8:	2000f7c0 	andcs	pc, r0, r0, asr #15
 8012ebc:	2000f7b8 			; <UNDEFINED> instruction: 0x2000f7b8
 8012ec0:	40029000 	andmi	r9, r2, r0

08012ec4 <enet_rxframe_size_get>:
 8012ec4:	b508      	push	{r3, lr}
 8012ec6:	4b0c      	ldr	r3, [pc, #48]	; (8012ef8 <enet_rxframe_size_get+0x34>)
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	6818      	ldr	r0, [r3, #0]
 8012ecc:	2800      	cmp	r0, #0
 8012ece:	db10      	blt.n	8012ef2 <enet_rxframe_size_get+0x2e>
 8012ed0:	f400 4303 	and.w	r3, r0, #33536	; 0x8300
 8012ed4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012ed8:	d003      	beq.n	8012ee2 <enet_rxframe_size_get+0x1e>
 8012eda:	f7ff ffc1 	bl	8012e60 <enet_rxframe_drop>
 8012ede:	2001      	movs	r0, #1
 8012ee0:	bd08      	pop	{r3, pc}
 8012ee2:	f000 0321 	and.w	r3, r0, #33	; 0x21
 8012ee6:	2b21      	cmp	r3, #33	; 0x21
 8012ee8:	d0f7      	beq.n	8012eda <enet_rxframe_size_get+0x16>
 8012eea:	f3c0 400d 	ubfx	r0, r0, #16, #14
 8012eee:	3804      	subs	r0, #4
 8012ef0:	e7f6      	b.n	8012ee0 <enet_rxframe_size_get+0x1c>
 8012ef2:	2000      	movs	r0, #0
 8012ef4:	e7f4      	b.n	8012ee0 <enet_rxframe_size_get+0x1c>
 8012ef6:	bf00      	nop
 8012ef8:	2000f7c0 	andcs	pc, r0, r0, asr #15

08012efc <enet_initpara_reset>:
 8012efc:	2200      	movs	r2, #0
 8012efe:	4b08      	ldr	r3, [pc, #32]	; (8012f20 <enet_initpara_reset+0x24>)
 8012f00:	e9c3 2200 	strd	r2, r2, [r3]
 8012f04:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8012f08:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8012f0c:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8012f10:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8012f14:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 8012f18:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
 8012f1c:	639a      	str	r2, [r3, #56]	; 0x38
 8012f1e:	4770      	bx	lr
 8012f20:	2000f7c8 	andcs	pc, r0, r8, asr #15

08012f24 <enet_deinit>:
 8012f24:	b508      	push	{r3, lr}
 8012f26:	f640 200e 	movw	r0, #2574	; 0xa0e
 8012f2a:	f7fe fc06 	bl	801173a <rcu_periph_reset_enable>
 8012f2e:	f640 200e 	movw	r0, #2574	; 0xa0e
 8012f32:	f7fe fc04 	bl	801173e <rcu_periph_reset_disable>
 8012f36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012f3a:	f7ff bfdf 	b.w	8012efc <enet_initpara_reset>
	...

08012f40 <i2c_clock_config>:
 8012f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f42:	4605      	mov	r5, r0
 8012f44:	2002      	movs	r0, #2
 8012f46:	460c      	mov	r4, r1
 8012f48:	4617      	mov	r7, r2
 8012f4a:	f7fe fcb1 	bl	80118b0 <rcu_clock_freq_get>
 8012f4e:	4603      	mov	r3, r0
 8012f50:	4828      	ldr	r0, [pc, #160]	; (8012ff4 <i2c_clock_config+0xb4>)
 8012f52:	4a29      	ldr	r2, [pc, #164]	; (8012ff8 <i2c_clock_config+0xb8>)
 8012f54:	fbb3 f0f0 	udiv	r0, r3, r0
 8012f58:	4293      	cmp	r3, r2
 8012f5a:	bf34      	ite	cc
 8012f5c:	4601      	movcc	r1, r0
 8012f5e:	2136      	movcs	r1, #54	; 0x36
 8012f60:	686e      	ldr	r6, [r5, #4]
 8012f62:	4a26      	ldr	r2, [pc, #152]	; (8012ffc <i2c_clock_config+0xbc>)
 8012f64:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8012f68:	430e      	orrs	r6, r1
 8012f6a:	4294      	cmp	r4, r2
 8012f6c:	606e      	str	r6, [r5, #4]
 8012f6e:	d816      	bhi.n	8012f9e <i2c_clock_config+0x5e>
 8012f70:	3001      	adds	r0, #1
 8012f72:	2835      	cmp	r0, #53	; 0x35
 8012f74:	d90d      	bls.n	8012f92 <i2c_clock_config+0x52>
 8012f76:	2236      	movs	r2, #54	; 0x36
 8012f78:	622a      	str	r2, [r5, #32]
 8012f7a:	0064      	lsls	r4, r4, #1
 8012f7c:	fbb3 f4f4 	udiv	r4, r3, r4
 8012f80:	2c04      	cmp	r4, #4
 8012f82:	bf38      	it	cc
 8012f84:	2404      	movcc	r4, #4
 8012f86:	69ea      	ldr	r2, [r5, #28]
 8012f88:	f3c4 040b 	ubfx	r4, r4, #0, #12
 8012f8c:	4314      	orrs	r4, r2
 8012f8e:	61ec      	str	r4, [r5, #28]
 8012f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f92:	2802      	cmp	r0, #2
 8012f94:	d801      	bhi.n	8012f9a <i2c_clock_config+0x5a>
 8012f96:	2202      	movs	r2, #2
 8012f98:	e7ee      	b.n	8012f78 <i2c_clock_config+0x38>
 8012f9a:	6228      	str	r0, [r5, #32]
 8012f9c:	e7ed      	b.n	8012f7a <i2c_clock_config+0x3a>
 8012f9e:	4a18      	ldr	r2, [pc, #96]	; (8013000 <i2c_clock_config+0xc0>)
 8012fa0:	4294      	cmp	r4, r2
 8012fa2:	d8f5      	bhi.n	8012f90 <i2c_clock_config+0x50>
 8012fa4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8012fa8:	4351      	muls	r1, r2
 8012faa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012fae:	fbb1 f1f2 	udiv	r1, r1, r2
 8012fb2:	3101      	adds	r1, #1
 8012fb4:	6229      	str	r1, [r5, #32]
 8012fb6:	b9a7      	cbnz	r7, 8012fe2 <i2c_clock_config+0xa2>
 8012fb8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8012fbc:	fbb3 f4f4 	udiv	r4, r3, r4
 8012fc0:	69eb      	ldr	r3, [r5, #28]
 8012fc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012fc6:	61eb      	str	r3, [r5, #28]
 8012fc8:	f3c4 030b 	ubfx	r3, r4, #0, #12
 8012fcc:	b90b      	cbnz	r3, 8012fd2 <i2c_clock_config+0x92>
 8012fce:	f044 0401 	orr.w	r4, r4, #1
 8012fd2:	69eb      	ldr	r3, [r5, #28]
 8012fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012fd8:	61eb      	str	r3, [r5, #28]
 8012fda:	69eb      	ldr	r3, [r5, #28]
 8012fdc:	4323      	orrs	r3, r4
 8012fde:	61eb      	str	r3, [r5, #28]
 8012fe0:	e7d6      	b.n	8012f90 <i2c_clock_config+0x50>
 8012fe2:	2219      	movs	r2, #25
 8012fe4:	4354      	muls	r4, r2
 8012fe6:	fbb3 f4f4 	udiv	r4, r3, r4
 8012fea:	69eb      	ldr	r3, [r5, #28]
 8012fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012ff0:	e7e9      	b.n	8012fc6 <i2c_clock_config+0x86>
 8012ff2:	bf00      	nop
 8012ff4:	000f4240 	andeq	r4, pc, r0, asr #4
 8012ff8:	0337f980 	teqeq	r7, #128, 18	; 0x200000	; <UNPREDICTABLE>
 8012ffc:	000186a0 	andeq	r8, r1, r0, lsr #13
 8013000:	00061a80 	andeq	r1, r6, r0, lsl #21

08013004 <i2c_ack_config>:
 8013004:	6803      	ldr	r3, [r0, #0]
 8013006:	2901      	cmp	r1, #1
 8013008:	bf0c      	ite	eq
 801300a:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
 801300e:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 8013012:	6003      	str	r3, [r0, #0]
 8013014:	4770      	bx	lr

08013016 <i2c_ackpos_config>:
 8013016:	6803      	ldr	r3, [r0, #0]
 8013018:	b919      	cbnz	r1, 8013022 <i2c_ackpos_config+0xc>
 801301a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801301e:	6003      	str	r3, [r0, #0]
 8013020:	4770      	bx	lr
 8013022:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013026:	e7fa      	b.n	801301e <i2c_ackpos_config+0x8>

08013028 <i2c_master_addressing>:
 8013028:	3202      	adds	r2, #2
 801302a:	bf0c      	ite	eq
 801302c:	f021 0101 	biceq.w	r1, r1, #1
 8013030:	f041 0101 	orrne.w	r1, r1, #1
 8013034:	6101      	str	r1, [r0, #16]
 8013036:	4770      	bx	lr

08013038 <i2c_enable>:
 8013038:	6803      	ldr	r3, [r0, #0]
 801303a:	f043 0301 	orr.w	r3, r3, #1
 801303e:	6003      	str	r3, [r0, #0]
 8013040:	4770      	bx	lr

08013042 <i2c_start_on_bus>:
 8013042:	6803      	ldr	r3, [r0, #0]
 8013044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013048:	6003      	str	r3, [r0, #0]
 801304a:	4770      	bx	lr

0801304c <i2c_stop_on_bus>:
 801304c:	6803      	ldr	r3, [r0, #0]
 801304e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013052:	6003      	str	r3, [r0, #0]
 8013054:	4770      	bx	lr

08013056 <i2c_data_transmit>:
 8013056:	6101      	str	r1, [r0, #16]
 8013058:	4770      	bx	lr

0801305a <i2c_data_receive>:
 801305a:	6900      	ldr	r0, [r0, #16]
 801305c:	b2c0      	uxtb	r0, r0
 801305e:	4770      	bx	lr

08013060 <i2c_flag_get>:
 8013060:	098b      	lsrs	r3, r1, #6
 8013062:	581a      	ldr	r2, [r3, r0]
 8013064:	2301      	movs	r3, #1
 8013066:	f001 011f 	and.w	r1, r1, #31
 801306a:	408b      	lsls	r3, r1
 801306c:	4213      	tst	r3, r2
 801306e:	bf14      	ite	ne
 8013070:	2001      	movne	r0, #1
 8013072:	2000      	moveq	r0, #0
 8013074:	4770      	bx	lr

08013076 <i2c_flag_clear>:
 8013076:	f240 5301 	movw	r3, #1281	; 0x501
 801307a:	4299      	cmp	r1, r3
 801307c:	b510      	push	{r4, lr}
 801307e:	d102      	bne.n	8013086 <i2c_flag_clear+0x10>
 8013080:	6943      	ldr	r3, [r0, #20]
 8013082:	6983      	ldr	r3, [r0, #24]
 8013084:	bd10      	pop	{r4, pc}
 8013086:	2201      	movs	r2, #1
 8013088:	098c      	lsrs	r4, r1, #6
 801308a:	5823      	ldr	r3, [r4, r0]
 801308c:	f001 011f 	and.w	r1, r1, #31
 8013090:	408a      	lsls	r2, r1
 8013092:	ea23 0302 	bic.w	r3, r3, r2
 8013096:	5023      	str	r3, [r4, r0]
 8013098:	e7f4      	b.n	8013084 <i2c_flag_clear+0xe>

0801309a <i2s_init>:
 801309a:	b510      	push	{r4, lr}
 801309c:	69c4      	ldr	r4, [r0, #28]
 801309e:	f424 647b 	bic.w	r4, r4, #4016	; 0xfb0
 80130a2:	f024 0408 	bic.w	r4, r4, #8
 80130a6:	0424      	lsls	r4, r4, #16
 80130a8:	0c24      	lsrs	r4, r4, #16
 80130aa:	431c      	orrs	r4, r3
 80130ac:	4314      	orrs	r4, r2
 80130ae:	430c      	orrs	r4, r1
 80130b0:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 80130b4:	61c4      	str	r4, [r0, #28]
 80130b6:	bd10      	pop	{r4, pc}

080130b8 <i2s_psc_config>:
 80130b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130bc:	4698      	mov	r8, r3
 80130be:	2302      	movs	r3, #2
 80130c0:	6203      	str	r3, [r0, #32]
 80130c2:	4b26      	ldr	r3, [pc, #152]	; (801315c <i2s_psc_config+0xa4>)
 80130c4:	4617      	mov	r7, r2
 80130c6:	4298      	cmp	r0, r3
 80130c8:	bf0c      	ite	eq
 80130ca:	f44f 3300 	moveq.w	r3, #131072	; 0x20000
 80130ce:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 80130d2:	4a23      	ldr	r2, [pc, #140]	; (8013160 <i2s_psc_config+0xa8>)
 80130d4:	4605      	mov	r5, r0
 80130d6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80130d8:	460e      	mov	r6, r1
 80130da:	4018      	ands	r0, r3
 80130dc:	d036      	beq.n	801314c <i2s_psc_config+0x94>
 80130de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80130e0:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80130e4:	1f99      	subs	r1, r3, #6
 80130e6:	2908      	cmp	r1, #8
 80130e8:	d82c      	bhi.n	8013144 <i2s_psc_config+0x8c>
 80130ea:	3302      	adds	r3, #2
 80130ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80130ee:	481d      	ldr	r0, [pc, #116]	; (8013164 <i2s_psc_config+0xac>)
 80130f0:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80130f4:	3201      	adds	r2, #1
 80130f6:	fbb0 f0f2 	udiv	r0, r0, r2
 80130fa:	4358      	muls	r0, r3
 80130fc:	0040      	lsls	r0, r0, #1
 80130fe:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
 8013102:	f04f 030a 	mov.w	r3, #10
 8013106:	d124      	bne.n	8013152 <i2s_psc_config+0x9a>
 8013108:	0a04      	lsrs	r4, r0, #8
 801310a:	435c      	muls	r4, r3
 801310c:	fbb4 f6f6 	udiv	r6, r4, r6
 8013110:	230a      	movs	r3, #10
 8013112:	3605      	adds	r6, #5
 8013114:	fbb6 f6f3 	udiv	r6, r6, r3
 8013118:	f006 0301 	and.w	r3, r6, #1
 801311c:	0876      	lsrs	r6, r6, #1
 801311e:	1eb2      	subs	r2, r6, #2
 8013120:	2afd      	cmp	r2, #253	; 0xfd
 8013122:	bf86      	itte	hi
 8013124:	2300      	movhi	r3, #0
 8013126:	2602      	movhi	r6, #2
 8013128:	021b      	lslls	r3, r3, #8
 801312a:	431e      	orrs	r6, r3
 801312c:	ea46 0608 	orr.w	r6, r6, r8
 8013130:	622e      	str	r6, [r5, #32]
 8013132:	69eb      	ldr	r3, [r5, #28]
 8013134:	f023 0307 	bic.w	r3, r3, #7
 8013138:	61eb      	str	r3, [r5, #28]
 801313a:	69eb      	ldr	r3, [r5, #28]
 801313c:	433b      	orrs	r3, r7
 801313e:	61eb      	str	r3, [r5, #28]
 8013140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013144:	2b0f      	cmp	r3, #15
 8013146:	bf08      	it	eq
 8013148:	2314      	moveq	r3, #20
 801314a:	e7cf      	b.n	80130ec <i2s_psc_config+0x34>
 801314c:	f7fe fbb0 	bl	80118b0 <rcu_clock_freq_get>
 8013150:	e7d5      	b.n	80130fe <i2s_psc_config+0x46>
 8013152:	b90f      	cbnz	r7, 8013158 <i2s_psc_config+0xa0>
 8013154:	0944      	lsrs	r4, r0, #5
 8013156:	e7d8      	b.n	801310a <i2s_psc_config+0x52>
 8013158:	0984      	lsrs	r4, r0, #6
 801315a:	e7d6      	b.n	801310a <i2s_psc_config+0x52>
 801315c:	40003800 	andmi	r3, r0, r0, lsl #16
 8013160:	40021000 	andmi	r1, r2, r0
 8013164:	017d7840 	cmneq	sp, r0, asr #16

08013168 <i2s_enable>:
 8013168:	69c3      	ldr	r3, [r0, #28]
 801316a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801316e:	61c3      	str	r3, [r0, #28]
 8013170:	4770      	bx	lr

08013172 <i2s_disable>:
 8013172:	69c3      	ldr	r3, [r0, #28]
 8013174:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013178:	61c3      	str	r3, [r0, #28]
 801317a:	4770      	bx	lr

0801317c <spi_dma_enable>:
 801317c:	6843      	ldr	r3, [r0, #4]
 801317e:	b919      	cbnz	r1, 8013188 <spi_dma_enable+0xc>
 8013180:	f043 0302 	orr.w	r3, r3, #2
 8013184:	6043      	str	r3, [r0, #4]
 8013186:	4770      	bx	lr
 8013188:	f043 0301 	orr.w	r3, r3, #1
 801318c:	e7fa      	b.n	8013184 <spi_dma_enable+0x8>
	...

08013190 <__popcountsi2>:
 8013190:	0843      	lsrs	r3, r0, #1
 8013192:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8013196:	1ac0      	subs	r0, r0, r3
 8013198:	0883      	lsrs	r3, r0, #2
 801319a:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 801319e:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 80131a2:	4418      	add	r0, r3
 80131a4:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80131a8:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 80131ac:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80131b0:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80131b4:	0e00      	lsrs	r0, r0, #24
 80131b6:	4770      	bx	lr

Disassembly of section .rodata:

080131b8 <vtable for DisplayHandler-0x11c>:
 80131b8:	00000003 	andeq	r0, r0, r3
 80131bc:	000000aa 	andeq	r0, r0, sl, lsr #1
 80131c0:	00000006 	andeq	r0, r0, r6
 80131c4:	00000000 	andeq	r0, r0, r0
 80131c8:	01ff0000 	mvnseq	r0, r0
 80131cc:	00000001 	andeq	r0, r0, r1
 80131d0:	00000001 	andeq	r0, r0, r1
 80131d4:	00000001 	andeq	r0, r0, r1
	...
 80131e0:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
 80131e4:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}
 80131e8:	00000000 	andeq	r0, r0, r0
 80131ec:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
 80131f0:	666e692f 	strbtvs	r6, [lr], -pc, lsr #18
 80131f4:	656c2f6f 	strbvs	r2, [ip, #-3951]!	; 0xfffff091
 80131f8:	70797464 	rsbsvc	r7, r9, r4, ror #8
 80131fc:	00690065 	rsbeq	r0, r9, r5, rrx
 8013200:	666e692f 	strbtvs	r6, [lr], -pc, lsr #18
 8013204:	656c2f6f 	strbvs	r2, [ip, #-3951]!	; 0xfffff091
 8013208:	756f6364 	strbvc	r6, [pc, #-868]!	; 8012eac <enet_rxframe_drop+0x4c>
 801320c:	2f00746e 	svccs	0x0000746e
 8013210:	6f666e69 	svcvs	0x00666e69
 8013214:	6f72672f 	svcvs	0x0072672f
 8013218:	6f637075 	svcvs	0x00637075
 801321c:	00746e75 	rsbseq	r6, r4, r5, ror lr
 8013220:	353a3731 	ldrcc	r3, [sl, #-1841]!	; 0xfffff8cf
 8013224:	39323a32 	ldmdbcc	r2!, {r1, r4, r5, r9, fp, ip, sp}
 8013228:	72614d00 	rsbvc	r4, r1, #0, 26
 801322c:	20393120 	eorscs	r3, r9, r0, lsr #2
 8013230:	32323032 	eorscc	r3, r2, #50	; 0x32
 8013234:	43534f00 	cmpmi	r3, #0, 30
 8013238:	72655320 	rsbvc	r5, r5, #32, 6	; 0x80000000
 801323c:	20726576 	rsbscs	r6, r2, r6, ror r5
 8013240:	32335b1b 	eorscc	r5, r3, #27648	; 0x6c00
 8013244:	7869506d 	stmdavc	r9!, {r0, r2, r3, r5, r6, ip, lr}^
 8013248:	63206c65 			; <UNDEFINED> instruction: 0x63206c65
 801324c:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 8013250:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 8013254:	317b2072 	cmncc	fp, r2, ror r0
 8013258:	6e552078 	mrcvs	0, 2, r2, cr5, cr8, {3}
 801325c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 8013260:	1b7d6573 	blne	9f6c834 <__exidx_end+0x1f577f4>
 8013264:	6d37335b 	ldcvs	3, cr3, [r7, #-364]!	; 0xfffffe94
 8013268:	6f5f2e00 	svcvs	0x005f2e00
 801326c:	74006373 	strvc	r6, [r0], #-883	; 0xfffffc8d
 8013270:	3d657079 	stclcc	0, cr7, [r5, #-484]!	; 0xfffffe1c
 8013274:	76726573 			; <UNDEFINED> instruction: 0x76726573
 8013278:	2e007265 	cdpcs	2, 0, cr7, cr0, cr5, {3}
 801327c:	7474685f 	ldrbtvc	r6, [r4], #-2143	; 0xfffff7a1
 8013280:	6f6e0070 	svcvs	0x006e0070
 8013284:	4f3d6564 	svcmi	0x003d6564
 8013288:	53204353 			; <UNDEFINED> instruction: 0x53204353
 801328c:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
 8013290:	73250072 			; <UNDEFINED> instruction: 0x73250072
 8013294:	2064253a 	rsbcs	r2, r4, sl, lsr r5
 8013298:	00642547 	rsbeq	r2, r4, r7, asr #10
 801329c:	2043534f 	subcs	r5, r3, pc, asr #6
 80132a0:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 80132a4:	0031206c 	eorseq	r2, r1, ip, rrx
 80132a8:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 80132ac:	37303146 	ldrcc	r3, [r0, -r6, asr #2]!
 80132b0:	50490052 	subpl	r0, r9, r2, asr r0
 80132b4:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 80132b8:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 80132bc:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80132c0:	63252064 			; <UNDEFINED> instruction: 0x63252064
 80132c4:	3a6e4900 	bcc	9ba56cc <__exidx_end+0x1b9068c>
 80132c8:	00642520 	rsbeq	r2, r4, r0, lsr #10
 80132cc:	3a74754f 	bcc	9d30810 <__exidx_end+0x1d1b7d0>
 80132d0:	00642520 	rsbeq	r2, r4, r0, lsr #10

080132d4 <vtable for DisplayHandler>:
	...
 80132dc:	080085b3 	stmdaeq	r0, {r0, r1, r4, r5, r7, r8, sl, pc}
 80132e0:	080085db 	stmdaeq	r0, {r0, r1, r3, r4, r6, r7, r8, sl, pc}
 80132e4:	080086bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r9, sl, pc}

080132e8 <vtable for PixelDmxStartStop>:
	...
 80132f0:	080085b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, sl, pc}
 80132f4:	080085f3 	stmdaeq	r0, {r0, r1, r4, r5, r6, r7, r8, sl, pc}
 80132f8:	080085b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, sl, pc}
 80132fc:	080085c9 	stmdaeq	r0, {r0, r3, r6, r7, r8, sl, pc}

08013300 <vtable for Handler>:
	...
 8013308:	080085d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, sl, pc}
 801330c:	080085e7 	stmdaeq	r0, {r0, r1, r2, r5, r6, r7, r8, sl, pc}
 8013310:	08008c95 	stmdaeq	r0, {r0, r2, r4, r7, sl, fp, pc}
 8013314:	08008c8d 	stmdaeq	r0, {r0, r2, r3, r7, sl, fp, pc}
 8013318:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}

0801331c <CSWTCH.67>:
 801331c:	444e4f4f 	strbmi	r4, [lr], #-3919	; 0xfffff0b1
 8013320:	 	eorcc	r3, lr, #-2147483631	; 0x80000011

08013321 <SOFTWARE_VERSION>:
 8013321:	00322e31 	eorseq	r2, r2, r1, lsr lr
 8013325:	786d642f 	stmdavc	sp!, {r0, r1, r2, r3, r5, sl, sp, lr}^
 8013329:	642f0031 	strtvs	r0, [pc], #-49	; 8013331 <SOFTWARE_VERSION+0x10>
 801332d:	2f31786d 	svccs	0x0031786d
 8013331:	322f002a 	eorcc	r0, pc, #42	; 0x2a
 8013335:	6d642f00 	stclvs	15, cr2, [r4, #-0]
 8013339:	622f3178 	eorvs	r3, pc, #120, 2
 801333d:	6b63616c 	blvs	98eb8f5 <__exidx_end+0x18d68b5>
 8013341:	0074756f 	rsbseq	r7, r4, pc, ror #10
 8013345:	00302e31 	eorseq	r2, r0, r1, lsr lr
 8013349:	7325565b 			; <UNDEFINED> instruction: 0x7325565b
 801334d:	7325205d 			; <UNDEFINED> instruction: 0x7325205d
 8013351:	33444700 	movtcc	r4, #18176	; 0x4700
 8013355:	2f004632 	svccs	0x00004632
 8013359:	676e6970 			; <UNDEFINED> instruction: 0x676e6970
 801335d:	6f702f00 	svcvs	0x00702f00
 8013361:	2f00676e 	svccs	0x0000676e
 8013365:	6f666e69 	svcvs	0x00666e69
 8013369:	00736f2f 	rsbseq	r6, r3, pc, lsr #30
 801336d:	666e692f 	strbtvs	r6, [lr], -pc, lsr #18
 8013371:	6f6d2f6f 	svcvs	0x006d2f6f
 8013375:	006c6564 	rsbeq	r6, ip, r4, ror #10
 8013379:	666e692f 	strbtvs	r6, [lr], -pc, lsr #18
 801337d:	6f732f6f 	svcvs	0x00732f6f
 8013381:	65590063 	ldrbvs	r0, [r9, #-99]	; 0xffffff9d
 8013385:	6f4e0073 	svcvs	0x004e0073
 8013389:	43534f00 	cmpmi	r3, #0, 30
 801338d:	72655320 	rsbvc	r5, r5, #32, 6	; 0x80000000
 8013391:	0a726576 	beq	9cac971 <__exidx_end+0x1c97931>
 8013395:	6e492000 	cdpvs	0, 4, cr2, cr9, cr0, {0}
 8013399:	696d6f63 	stmdbvs	sp!, {r0, r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 801339d:	5020676e 	eorpl	r6, r0, lr, ror #14
 80133a1:	2074726f 	rsbscs	r7, r4, pc, ror #4
 80133a5:	20202020 	eorcs	r2, r0, r0, lsr #32
 80133a9:	3a202020 	bcc	881b431 <__exidx_end+0x8063f1>
 80133ad:	0a642520 	beq	991c835 <__exidx_end+0x19077f5>
 80133b1:	754f2000 	strbvc	r2, [pc, #-0]	; 80133b9 <SOFTWARE_VERSION+0x98>
 80133b5:	696f6774 	stmdbvs	pc!, {r2, r4, r5, r6, r8, r9, sl, sp, lr}^	; <UNPREDICTABLE>
 80133b9:	5020676e 	eorpl	r6, r0, lr, ror #14
 80133bd:	2074726f 	rsbscs	r7, r4, pc, ror #4
 80133c1:	20202020 	eorcs	r2, r0, r0, lsr #32
 80133c5:	3a202020 	bcc	881b44d <__exidx_end+0x80640d>
 80133c9:	0a642520 	beq	991c851 <__exidx_end+0x1907811>
 80133cd:	4d442000 	stclmi	0, cr2, [r4, #-0]
 80133d1:	61502058 	cmpvs	r0, r8, asr r0
 80133d5:	20206874 	eorcs	r6, r0, r4, ror r8
 80133d9:	20202020 	eorcs	r2, r0, r0, lsr #32
 80133dd:	20202020 	eorcs	r2, r0, r0, lsr #32
 80133e1:	3a202020 	bcc	881b469 <__exidx_end+0x806429>
 80133e5:	73255b20 			; <UNDEFINED> instruction: 0x73255b20
 80133e9:	73255b5d 			; <UNDEFINED> instruction: 0x73255b5d
 80133ed:	20000a5d 	andcs	r0, r0, sp, asr sl
 80133f1:	616c4220 	cmnvs	ip, r0, lsr #4
 80133f5:	756f6b63 	strbvc	r6, [pc, #-2915]!	; 801289a <enet_descriptors_chain_init+0x8e>
 80133f9:	61502074 	cmpvs	r0, r4, ror r0
 80133fd:	20206874 	eorcs	r6, r0, r4, ror r8
 8013401:	20202020 	eorcs	r2, r0, r0, lsr #32
 8013405:	5b203a20 	blpl	8821c8d <__exidx_end+0x80cc4d>
 8013409:	0a5d7325 	beq	97700a5 <__exidx_end+0x175b065>
 801340d:	61502000 	cmpvs	r0, r0
 8013411:	61697472 	smcvs	38722	; 0x9742
 8013415:	7254206c 	subsvc	r2, r4, #108	; 0x6c
 8013419:	6d736e61 	ldclvs	14, cr6, [r3, #-388]!	; 0xfffffe7c
 801341d:	69737369 	ldmdbvs	r3!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
 8013421:	3a206e6f 	bcc	882ede5 <__exidx_end+0x819da5>
 8013425:	0a732520 	beq	9cdc8ad <__exidx_end+0x1cc786d>
	...

0801342a <OscServerMsgConst::START>:
 801342a:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
 801342e:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 8013432:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
 8013436:	43534f20 	cmpmi	r3, #32, 30	; 0x80
 801343a:	72655320 	rsbvc	r5, r5, #32, 6	; 0x80000000
 801343e:	00726576 	rsbseq	r6, r2, r6, ror r5

08013442 <OscServerMsgConst::PARAMS>:
 8013442:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 8013446:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 801344a:	20676e69 	rsbcs	r6, r7, r9, ror #28
 801344e:	2043534f 	subcs	r5, r3, pc, asr #6
 8013452:	76726553 			; <UNDEFINED> instruction: 0x76726553
 8013456:	 	svcmi	0x00007265

08013459 <OscServerMsgConst::STARTED>:
 8013459:	2043534f 	subcs	r5, r3, pc, asr #6
 801345d:	76726553 			; <UNDEFINED> instruction: 0x76726553
 8013461:	73207265 			; <UNDEFINED> instruction: 0x73207265
 8013465:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 8013469:	22006465 	andcs	r6, r0, #1694498816	; 0x65000000
 801346d:	3a227325 	bcc	88b0109 <__exidx_end+0x89b0c9>
 8013471:	002c6425 	eoreq	r6, ip, r5, lsr #8
 8013475:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
 8013479:	000a6425 	andeq	r6, sl, r5, lsr #8
 801347d:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8013481:	7325223a 			; <UNDEFINED> instruction: 0x7325223a
 8013485:	23002c22 	movwcs	r2, #3106	; 0xc22
 8013489:	253d7325 	ldrcs	r7, [sp, #-805]!	; 0xfffffcdb
 801348d:	 	andvc	r0, r0, r3, ror sl

08013490 <OscServerParamsConst::TRANSMISSION>:
 8013490:	74726170 	ldrbtvc	r6, [r2], #-368	; 0xfffffe90
 8013494:	5f6c6169 	svcpl	0x006c6169
 8013498:	6e617274 	mcrvs	2, 3, r7, cr1, cr4, {3}
 801349c:	73696d73 	cmnvc	r9, #7360	; 0x1cc0
 80134a0:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
	...

080134a5 <OscServerParamsConst::PATH_BLACKOUT>:
 80134a5:	68746170 	ldmdavs	r4!, {r4, r5, r6, r8, sp, lr}^
 80134a9:	616c625f 	cmnvs	ip, pc, asr r2
 80134ad:	756f6b63 	strbvc	r6, [pc, #-2915]!	; 8012952 <enet_frame_transmit+0x36>
 80134b1:	 	cmnvs	r0, r4, ror r0

080134b3 <OscServerParamsConst::PATH>:
 80134b3:	68746170 	ldmdavs	r4!, {r4, r5, r6, r8, sp, lr}^
	...

080134b8 <OscServerParamsConst::FILE_NAME>:
 80134b8:	2e63736f 	cdpcs	3, 6, cr7, cr3, cr15, {3}
 80134bc:	00747874 	rsbseq	r7, r4, r4, ror r8

080134c0 <OscServerParamsConst::PATH_INFO>:
 80134c0:	68746170 	ldmdavs	r4!, {r4, r5, r6, r8, sp, lr}^
 80134c4:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
 80134c8:	 	cdpvs	0, 6, cr0, cr9, cr15, {3}

080134ca <OscParamsConst::INCOMING_PORT>:
 80134ca:	6f636e69 	svcvs	0x00636e69
 80134ce:	676e696d 	strbvs	r6, [lr, -sp, ror #18]!
 80134d2:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 80134d6:	 	strbvc	r0, [pc, #-116]!	; 801346a <OscServerMsgConst::STARTED+0x11>

080134d8 <OscParamsConst::OUTGOING_PORT>:
 80134d8:	6774756f 	ldrbvs	r7, [r4, -pc, ror #10]!
 80134dc:	676e696f 	strbvs	r6, [lr, -pc, ror #18]!
 80134e0:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 80134e4:	00000074 	andeq	r0, r0, r4, ror r0

080134e8 <vtable for WS28xxDmx>:
	...
 80134f0:	0800a415 	stmdaeq	r0, {r0, r2, r4, sl, sp, pc}
 80134f4:	0800a435 	stmdaeq	r0, {r0, r2, r4, r5, sl, sp, pc}
 80134f8:	0800a46d 	stmdaeq	r0, {r0, r2, r3, r5, r6, sl, sp, pc}
 80134fc:	0800a4b7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r7, sl, sp, pc}
 8013500:	0800a51f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r8, sl, sp, pc}
 8013504:	0800a447 	stmdaeq	r0, {r0, r1, r2, r6, sl, sp, pc}
 8013508:	0800addd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sl, fp, sp, pc}
 801350c:	0800a485 	stmdaeq	r0, {r0, r2, r7, sl, sp, pc}
 8013510:	0800a40d 	stmdaeq	r0, {r0, r2, r3, sl, sp, pc}
 8013514:	0800a411 	stmdaeq	r0, {r0, r4, sl, sp, pc}
 8013518:	0800a4df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, sl, sp, pc}
 801351c:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8013520:	2a2e253a 	bcs	8b9ca10 <__exidx_end+0xb879d0>
 8013524:	23002c66 	movwcs	r2, #3174	; 0xc66
 8013528:	253d7325 	ldrcs	r7, [sp, #-805]!	; 0xfffffcdb
 801352c:	0a662a2e 	beq	999ddec <__exidx_end+0x1988dac>
 8013530:	65764f00 	ldrbvs	r4, [r6, #-3840]!	; 0xfffff100
 8013534:	69727772 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
 8013538:	64206574 	strtvs	r6, [r0], #-1396	; 0xfffffa8c
 801353c:	73617461 	cmnvc	r1, #1627389952	; 0x61000000
 8013540:	74656568 	strbtvc	r6, [r5], #-1384	; 0xfffffa98
 8013544:	65764f00 	ldrbvs	r4, [r6, #-3840]!	; 0xfffff100
 8013548:	69727772 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
 801354c:	74206574 	strtvc	r6, [r0], #-1396	; 0xfffffa8c
 8013550:	6e696d69 	cdpvs	13, 6, cr6, cr9, cr9, {3}
 8013554:	75282067 	strvc	r2, [r8, #-103]!	; 0xffffff99
 8013558:	47002973 	smlsdxmi	r0, r3, r9, r2
 801355c:	70756f72 	rsbsvc	r6, r5, r2, ror pc
 8013560:	00676e69 	rsbeq	r6, r7, r9, ror #28
 8013564:	636f6c43 	cmnvs	pc, #17152	; 0x4300
 8013568:	6162206b 	cmnvs	r2, fp, rrx
 801356c:	20646573 	rsbcs	r6, r4, r3, ror r5
 8013570:	70696863 	rsbvc	r6, r9, r3, ror #16
 8013574:	50410073 	subpl	r0, r1, r3, ror r0
 8013578:	32303141 	eorscc	r3, r0, #1073741840	; 0x40000010
 801357c:	394b532f 	stmdbcc	fp, {r0, r1, r2, r3, r5, r8, r9, ip, lr}^
 8013580:	00323238 	eorseq	r3, r2, r8, lsr r2
 8013584:	00584d44 	subseq	r4, r8, r4, asr #26
 8013588:	74736554 	ldrbtvc	r6, [r3], #-1364	; 0xfffffaac
 801358c:	74617020 	strbtvc	r7, [r1], #-32	; 0xffffffe0
 8013590:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
 8013594:	78695000 	stmdavc	r9!, {ip, lr}^
 8013598:	44206c65 	strtmi	r6, [r0], #-3173	; 0xfffff39b
 801359c:	7020584d 	eorvc	r5, r0, sp, asr #16
 80135a0:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 80135a4:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 80135a8:	20000a73 	andcs	r0, r0, r3, ror sl
 80135ac:	756f7247 	strbvc	r7, [pc, #-583]!	; 801336d <SOFTWARE_VERSION+0x4c>
 80135b0:	676e6970 			; <UNDEFINED> instruction: 0x676e6970
 80135b4:	756f6320 	strbvc	r6, [pc, #-800]!	; 801329c <_etext+0xe4>
 80135b8:	3a20746e 	bcc	8830778 <__exidx_end+0x81b738>
 80135bc:	20642520 	rsbcs	r2, r4, r0, lsr #10
 80135c0:	6f72475b 	svcvs	0x0072475b
 80135c4:	20737075 	rsbscs	r7, r3, r5, ror r0
 80135c8:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 80135cc:	 	andeq	r0, r0, sp, asr sl

080135cf <CSWTCH.6>:
 80135cf:	02020200 	andeq	r0, r2, #0, 4
 80135d3:	04020202 	streq	r0, [r2], #-514	; 0xfffffdfe
 80135d7:	6e550500 	cdpvs	5, 5, cr0, cr5, cr0, {0}
 80135db:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
 80135df:	6e55006e 	cdpvs	0, 5, cr0, cr5, cr14, {3}
 80135e3:	69666564 	stmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 80135e7:	0064656e 	rsbeq	r6, r4, lr, ror #10

080135eb <PixelType::MAPS>:
 80135eb:	00424752 	subeq	r4, r2, r2, asr r7
 80135ef:	00474252 	subeq	r4, r7, r2, asr r2
 80135f3:	00425247 	subeq	r5, r2, r7, asr #4
 80135f7:	00524247 	subseq	r4, r2, r7, asr #4
 80135fb:	00475242 	subeq	r5, r7, r2, asr #4
 80135ff:	00524742 	subseq	r4, r2, r2, asr #14

08013603 <PixelType::TYPES>:
 8013603:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8013607:	00003130 	andeq	r3, r0, r0, lsr r1
 801360b:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801360f:	00003131 	andeq	r3, r0, r1, lsr r1
 8013613:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8013617:	00003231 	andeq	r3, r0, r1, lsr r2
 801361b:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801361f:	00423231 	subeq	r3, r2, r1, lsr r2
 8013623:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8013627:	00003331 	andeq	r3, r0, r1, lsr r3
 801362b:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801362f:	00003531 	andeq	r3, r0, r1, lsr r5
 8013633:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 8013637:	00003231 	andeq	r3, r0, r1, lsr r2
 801363b:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 801363f:	00573231 	subseq	r3, r7, r1, lsr r2
 8013643:	31534355 	cmpcc	r3, r5, asr r3
 8013647:	00333039 	eorseq	r3, r3, r9, lsr r0
 801364b:	32534355 	subscc	r4, r3, #1409286145	; 0x54000001
 801364f:	00333039 	eorseq	r3, r3, r9, lsr r0
 8013653:	38385343 	ldmdacc	r8!, {r0, r1, r6, r8, r9, ip, lr}
 8013657:	00003231 	andeq	r3, r0, r1, lsr r2
 801365b:	31415041 	cmpcc	r1, r1, asr #32
 801365f:	00003230 	andeq	r3, r0, r0, lsr r2
 8013663:	38394b53 	ldmdacc	r9!, {r0, r1, r4, r6, r8, r9, fp, lr}
 8013667:	00003232 	andeq	r3, r0, r2, lsr r2
 801366b:	31383950 	teqcc	r8, r0, asr r9
 801366f:	00000033 	andeq	r0, r0, r3, lsr r0
 8013673:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 8013677:	6170206c 	cmnvs	r0, ip, rrx
 801367b:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
 801367f:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
 8013683:	5420000a 	strtpl	r0, [r0], #-10
 8013687:	20657079 	rsbcs	r7, r5, r9, ror r0
 801368b:	3a202020 	bcc	881b713 <__exidx_end+0x8066d3>
 801368f:	20732520 	rsbscs	r2, r3, r0, lsr #10
 8013693:	5d64255b 	cfstr64pl	mvdx2, [r4, #-364]!	; 0xfffffe94
 8013697:	4320000a 			; <UNDEFINED> instruction: 0x4320000a
 801369b:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 801369f:	3a202020 	bcc	881b727 <__exidx_end+0x8066e7>
 80136a3:	0a642520 	beq	991cb2b <__exidx_end+0x1907aeb>
 80136a7:	614d2000 	mrsvs	r2, (UNDEF: 77)
 80136ab:	6e697070 	mcrvs	0, 3, r7, cr9, cr0, {3}
 80136af:	203a2067 	eorscs	r2, sl, r7, rrx
 80136b3:	5b207325 	blpl	883034f <__exidx_end+0x81b30f>
 80136b7:	0a5d6425 	beq	976c753 <__exidx_end+0x1757713>
 80136bb:	30542000 	subscc	r2, r4, r0
 80136bf:	20202048 	eorcs	r2, r0, r8, asr #32
 80136c3:	203a2020 	eorscs	r2, sl, r0, lsr #32
 80136c7:	66322e25 	ldrtvs	r2, [r2], -r5, lsr #28
 80136cb:	78305b20 	ldmdavc	r0!, {r5, r8, r9, fp, ip, lr}
 80136cf:	0a5d5825 	beq	976976b <__exidx_end+0x175472b>
 80136d3:	31542000 	cmpcc	r4, r0
 80136d7:	20202048 	eorcs	r2, r0, r8, asr #32
 80136db:	203a2020 	eorscs	r2, sl, r0, lsr #32
 80136df:	66322e25 	ldrtvs	r2, [r2], -r5, lsr #28
 80136e3:	78305b20 	ldmdavc	r0!, {r5, r8, r9, fp, ip, lr}
 80136e7:	0a5d5825 	beq	9769783 <__exidx_end+0x1754743>
 80136eb:	2e642500 	cdpcs	5, 6, cr2, cr4, cr0, {0}
 80136ef:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80136f3:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80136f7:	2c73252c 	cfldr64cs	mvdx2, [r3], #-176	; 0xffffff50
 80136fb:	252c7325 	strcs	r7, [ip, #-805]!	; 0xfffffcdb
 80136ff:	73252c64 			; <UNDEFINED> instruction: 0x73252c64
 8013703:	6425000a 	strtvs	r0, [r5], #-10
 8013707:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801370b:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801370f:	73252c64 			; <UNDEFINED> instruction: 0x73252c64
 8013713:	2c73252c 	cfldr64cs	mvdx2, [r3], #-176	; 0xffffff50
 8013717:	000a6425 	andeq	r6, sl, r5, lsr #8
 801371b:	4f006e4f 	svcmi	0x00006e4f
 801371f:	64006666 	strvs	r6, [r0], #-1638	; 0xfffff99a
 8013723:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 8013727:	253a7961 	ldrcs	r7, [sl, #-2401]!	; 0xfffff69f
 801372b:	74000a73 	strvc	r0, [r0], #-2675	; 0xfffff58d
 801372f:	3a707466 	bcc	9c308cf <__exidx_end+0x1c1b88f>
 8013733:	000a7325 	andeq	r7, sl, r5, lsr #6
 8013737:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801373b:	3a6e6f69 	bcc	9baf4e7 <__exidx_end+0x1b9a4a7>
 801373f:	75007325 	strvc	r7, [r0, #-805]	; 0xfffffcdb
 8013743:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 8013747:	25203a65 	strcs	r3, [r0, #-2661]!	; 0xfffff59b
 801374b:	000a7375 	andeq	r7, sl, r5, ror r3
 801374f:	4f525245 	svcmi	0x00525245
 8013753:	673f2352 			; <UNDEFINED> instruction: 0x673f2352
 8013757:	000a7465 	andeq	r7, sl, r5, ror #8
 801375b:	70746674 	rsbsvc	r6, r4, r4, ror r6
 801375f:	69640023 	stmdbvs	r4!, {r0, r1, r5}^
 8013763:	616c7073 	smcvs	50947	; 0xc703
 8013767:	45002379 	strmi	r2, [r0, #-889]	; 0xfffffc87
 801376b:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
 801376f:	000a2123 	andeq	r2, sl, r3, lsr #2
 8013773:	4f525245 	svcmi	0x00525245
 8013777:	0a3f2352 	beq	8fdc4c7 <__exidx_end+0xfc7487>
 801377b:	62657200 	rsbvs	r7, r5, #0, 4
 801377f:	23746f6f 	cmncs	r4, #444	; 0x1bc
 8013783:	696c0023 	stmdbvs	ip!, {r0, r1, r5}^
 8013787:	00237473 	eoreq	r7, r3, r3, ror r4
 801378b:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 801378f:	75002a23 	strvc	r2, [r0, #-2595]	; 0xfffff5dd
 8013793:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 8013797:	76002365 	strvc	r2, [r0], -r5, ror #6
 801379b:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801379f:	00236e6f 	eoreq	r6, r3, pc, ror #28
 80137a3:	23746567 	cmncs	r4, #432013312	; 0x19c00000
 80137a7:	63616600 	cmnvs	r1, #0, 12
 80137ab:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 80137af:	 	tstmi	r0, r3, lsr #6

080137b2 <s_Node>:
 80137b2:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80137b6:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 80137c2:	41730000 	cmnmi	r3, r0
 80137c6:	45204e43 	strmi	r4, [r0, #-3651]!	; 0xfffff1bd
 80137ca:	31332e31 	teqcc	r3, r1, lsr lr
	...
 80137d6:	2043534f 	subcs	r5, r3, pc, asr #6
 80137da:	76726553 			; <UNDEFINED> instruction: 0x76726553
 80137de:	00007265 	andeq	r7, r0, r5, ror #4
 80137e2:	00000000 	andeq	r0, r0, r0
 80137e6:	544c0000 	strbpl	r0, [ip], #-0
 80137ea:	00000043 	andeq	r0, r0, r3, asr #32
	...
 80137fa:	2043534f 	subcs	r5, r3, pc, asr #6
 80137fe:	65696c43 	strbvs	r6, [r9, #-3139]!	; 0xfffff3bd
 8013802:	0000746e 	andeq	r7, r0, lr, ror #8
 8013806:	00000000 	andeq	r0, r0, r0
 801380a:	44520000 	ldrbmi	r0, [r2], #-0
 801380e:	74654e4d 	strbtvc	r4, [r5], #-3661	; 0xfffff1b3
 8013812:	524c4c20 	subpl	r4, ip, #32, 24	; 0x2000
 8013816:	6e4f2050 	mcrvs	0, 2, r2, cr15, cr0, {2}
 801381a:	0000796c 	andeq	r7, r0, ip, ror #18
 801381e:	776f6853 			; <UNDEFINED> instruction: 0x776f6853
 8013822:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
	...
 801382e:	494d0000 	stmdbmi	sp, {}^	; <UNPREDICTABLE>
 8013832:	00004944 	andeq	r4, r0, r4, asr #18
	...
 8013842:	00504444 	subseq	r4, r0, r4, asr #8
	...

08013854 <s_Output>:
 8013854:	00584d44 	subseq	r4, r8, r4, asr #26
	...
 8013860:	004d4452 	subeq	r4, sp, r2, asr r4
	...
 801386c:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
 8013870:	00726f74 	rsbseq	r6, r2, r4, ror pc
 8013874:	00000000 	andeq	r0, r0, r0
 8013878:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 801387c:	0000006c 	andeq	r0, r0, ip, rrx
 8013880:	00000000 	andeq	r0, r0, r0
 8013884:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
 8013888:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 801388c:	00000000 	andeq	r0, r0, r0
 8013890:	0043534f 	subeq	r5, r3, pc, asr #6
	...
 801389c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 80138a0:	00006769 	andeq	r6, r0, r9, ror #14
 80138a4:	00000000 	andeq	r0, r0, r0
 80138a8:	70657453 	rsbvc	r7, r5, r3, asr r4
 80138ac:	00726570 	rsbseq	r6, r2, r0, ror r5
 80138b0:	00000000 	andeq	r0, r0, r0
 80138b4:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
 80138b8:	00007265 	andeq	r7, r0, r5, ror #4
 80138bc:	00000000 	andeq	r0, r0, r0
 80138c0:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80138c4:	0074654e 	rsbseq	r6, r4, lr, asr #10
 80138c8:	00000000 	andeq	r0, r0, r0
 80138cc:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
 80138d0:	00006c61 	andeq	r6, r0, r1, ror #24
 80138d4:	00000000 	andeq	r0, r0, r0
 80138d8:	20424752 	subcs	r4, r2, r2, asr r7
 80138dc:	656e6150 	strbvs	r6, [lr, #-336]!	; 0xfffffeb0
 80138e0:	0000006c 	andeq	r0, r0, ip, rrx

080138e4 <RemoteConfig::s_GET>:
 80138e4:	0800cee1 	stmdaeq	r0, {r0, r5, r6, r7, r9, sl, fp, lr, pc}
 80138e8:	00000000 	andeq	r0, r0, r0
 80138ec:	0801377c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, r9, sl, ip, sp}
 80138f0:	00000008 	andeq	r0, r0, r8
 80138f4:	0800c38d 	stmdaeq	r0, {r0, r2, r3, r7, r8, r9, lr, pc}
 80138f8:	00000000 	andeq	r0, r0, r0
 80138fc:	08013785 	stmdaeq	r1, {r0, r2, r7, r8, r9, sl, ip, sp}
 8013900:	00000005 	andeq	r0, r0, r5
 8013904:	0800c38d 	stmdaeq	r0, {r0, r2, r3, r7, r8, r9, lr, pc}
 8013908:	00000000 	andeq	r0, r0, r0
 801390c:	0801378b 	stmdaeq	r1, {r0, r1, r3, r7, r8, r9, sl, ip, sp}
 8013910:	00000006 	andeq	r0, r0, r6
 8013914:	0800c581 	stmdaeq	r0, {r0, r7, r8, sl, lr, pc}
 8013918:	00000000 	andeq	r0, r0, r0
 801391c:	08013792 	stmdaeq	r1, {r1, r4, r7, r8, r9, sl, ip, sp}
 8013920:	00000007 	andeq	r0, r0, r7
 8013924:	0800c53d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, sl, lr, pc}
 8013928:	00000000 	andeq	r0, r0, r0
 801392c:	0801379a 	stmdaeq	r1, {r1, r3, r4, r7, r8, r9, sl, ip, sp}
 8013930:	00000008 	andeq	r0, r0, r8
 8013934:	0800c465 	stmdaeq	r0, {r0, r2, r5, r6, sl, lr, pc}
 8013938:	00000000 	andeq	r0, r0, r0
 801393c:	08013761 	stmdaeq	r1, {r0, r5, r6, r8, r9, sl, ip, sp}
 8013940:	00000008 	andeq	r0, r0, r8
 8013944:	0800c805 	stmdaeq	r0, {r0, r2, fp, lr, pc}
 8013948:	00000000 	andeq	r0, r0, r0
 801394c:	080137a3 	stmdaeq	r1, {r0, r1, r5, r7, r8, r9, sl, ip, sp}
 8013950:	00010004 	andeq	r0, r1, r4
 8013954:	0800c4e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, sl, lr, pc}
 8013958:	00000000 	andeq	r0, r0, r0
 801395c:	0801375b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r8, r9, sl, ip, sp}
 8013960:	00000005 	andeq	r0, r0, r5
 8013964:	0800cb51 	stmdaeq	r0, {r0, r4, r6, r8, r9, fp, lr, pc}
 8013968:	00000000 	andeq	r0, r0, r0
 801396c:	080137a8 	stmdaeq	r1, {r3, r5, r7, r8, r9, sl, ip, sp}
 8013970:	00000009 	andeq	r0, r0, r9

08013974 <RemoteConfig::s_SET>:
 8013974:	0800c4c1 	stmdaeq	r0, {r0, r6, r7, sl, lr, pc}
 8013978:	00000000 	andeq	r0, r0, r0
 801397c:	0801375b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r8, r9, sl, ip, sp}
 8013980:	00010005 	andeq	r0, r1, r5
 8013984:	0800c5d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, sl, lr, pc}
 8013988:	00000000 	andeq	r0, r0, r0
 801398c:	08013761 	stmdaeq	r1, {r0, r5, r6, r8, r9, sl, ip, sp}
 8013990:	00010008 	andeq	r0, r1, r8
 8013994:	6f626552 	svcvs	0x00626552
 8013998:	6e69746f 	cdpvs	4, 6, cr7, cr9, cr15, {3}
 801399c:	2e2e2067 	cdpcs	0, 2, cr2, cr14, cr7, {3}
 80139a0:	52000a2e 	andpl	r0, r0, #188416	; 0x2e000
 80139a4:	6f6f6265 	svcvs	0x006f6265
 80139a8:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 80139ac:	2e2e2e20 	cdpcs	14, 2, cr2, cr14, cr0, {1}
 80139b0:	6f637200 	svcvs	0x00637200
 80139b4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 80139b8:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 80139bc:	74656e00 	strbtvc	r6, [r5], #-3584	; 0xfffff200
 80139c0:	6b726f77 	blvs	9caf7a4 <__exidx_end+0x1c9a764>
 80139c4:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 80139c8:	63736f00 	cmnvs	r3, #0, 30
 80139cc:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 80139d0:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
 80139d4:	73656369 	cmnvc	r5, #-1543503871	; 0xa4000001
 80139d8:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 80139dc:	00000000 	andeq	r0, r0, r0

080139e0 <RemoteConfig::s_TXT>:
 80139e0:	0800c80d 	stmdaeq	r0, {r0, r2, r3, fp, lr, pc}
 80139e4:	00000000 	andeq	r0, r0, r0
 80139e8:	0800ca9d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r9, fp, lr, pc}
 80139ec:	00000000 	andeq	r0, r0, r0
 80139f0:	080139b1 	stmdaeq	r1, {r0, r4, r5, r7, r8, fp, ip, sp}
 80139f4:	0000000b 	andeq	r0, r0, fp
 80139f8:	0000000c 	andeq	r0, r0, ip
 80139fc:	0800c839 	stmdaeq	r0, {r0, r3, r4, r5, fp, lr, pc}
 8013a00:	00000000 	andeq	r0, r0, r0
 8013a04:	0800cad1 	stmdaeq	r0, {r0, r4, r6, r7, r9, fp, lr, pc}
 8013a08:	00000000 	andeq	r0, r0, r0
 8013a0c:	080139bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, fp, ip, sp}
 8013a10:	0000000b 	andeq	r0, r0, fp
 8013a14:	00000000 	andeq	r0, r0, r0
 8013a18:	0800c865 	stmdaeq	r0, {r0, r2, r5, r6, fp, lr, pc}
 8013a1c:	00000000 	andeq	r0, r0, r0
 8013a20:	0800caf9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r9, fp, lr, pc}
 8013a24:	00000000 	andeq	r0, r0, r0
 8013a28:	080139c9 	stmdaeq	r1, {r0, r3, r6, r7, r8, fp, ip, sp}
 8013a2c:	00000007 	andeq	r0, r0, r7
 8013a30:	00000008 	andeq	r0, r0, r8
 8013a34:	0800c891 	stmdaeq	r0, {r0, r4, r7, fp, lr, pc}
 8013a38:	00000000 	andeq	r0, r0, r0
 8013a3c:	0800cb25 	stmdaeq	r0, {r0, r2, r5, r8, r9, fp, lr, pc}
 8013a40:	00000000 	andeq	r0, r0, r0
 8013a44:	080139d1 	stmdaeq	r1, {r0, r4, r6, r7, r8, fp, ip, sp}
 8013a48:	0000000b 	andeq	r0, r0, fp
 8013a4c:	00000003 	andeq	r0, r0, r3
 8013a50:	45470020 	strbmi	r0, [r7, #-32]	; 0xffffffe0
 8013a54:	4f500054 	svcmi	0x00500054
 8013a58:	48005453 	stmdami	r0, {r0, r1, r4, r6, sl, ip, lr}
 8013a5c:	00505454 	subseq	r5, r0, r4, asr r4
 8013a60:	31000a20 	tstcc	r0, r0, lsr #20
 8013a64:	3a00312e 	bcc	801ff24 <__exidx_end+0xaee4>
 8013a68:	6e6f4300 	cdpvs	3, 6, cr4, cr15, cr0, {0}
 8013a6c:	746e6574 	strbtvc	r6, [lr], #-1396	; 0xfffffa8c
 8013a70:	7079542d 	rsbsvc	r5, r9, sp, lsr #8
 8013a74:	3b200065 	blcc	8813c10 <__exidx_end+0x7febd0>
 8013a78:	70706100 	rsbsvc	r6, r0, r0, lsl #2
 8013a7c:	6163696c 	cmnvs	r3, ip, ror #18
 8013a80:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8013a84:	6f736a2f 	svcvs	0x00736a2f
 8013a88:	6f43006e 	svcvs	0x0043006e
 8013a8c:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 8013a90:	654c2d74 	strbvs	r2, [ip, #-3444]	; 0xfffff28c
 8013a94:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
 8013a98:	6e692f00 	cdpvs	15, 6, cr2, cr9, cr0, {0}
 8013a9c:	2e786564 	cdpcs	5, 7, cr6, cr8, cr4, {3}
 8013aa0:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8013aa4:	74732f00 	ldrbtvc	r2, [r3], #-3840	; 0xfffff100
 8013aa8:	73656c79 	cmnvc	r5, #30976	; 0x7900
 8013aac:	7373632e 	cmnvc	r3, #-1207959552	; 0xb8000000
 8013ab0:	6e692f00 	cdpvs	15, 6, cr2, cr9, cr0, {0}
 8013ab4:	2e786564 	cdpcs	5, 7, cr6, cr8, cr4, {3}
 8013ab8:	2f00736a 	svccs	0x0000736a
 8013abc:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 8013ac0:	696c002f 	stmdbvs	ip!, {r0, r1, r2, r3, r5}^
 8013ac4:	76007473 			; <UNDEFINED> instruction: 0x76007473
 8013ac8:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8013acc:	75006e6f 	strvc	r6, [r0, #-3695]	; 0xfffff191
 8013ad0:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 8013ad4:	69640065 	stmdbvs	r4!, {r0, r2, r5, r6}^
 8013ad8:	616c7073 	smcvs	50947	; 0xc703
 8013adc:	69640079 	stmdbvs	r4!, {r0, r3, r4, r5, r6}^
 8013ae0:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8013ae4:	0079726f 	rsbseq	r7, r9, pc, ror #4
 8013ae8:	6f736a2f 	svcvs	0x00736a2f
 8013aec:	63612f6e 	cmnvs	r1, #440	; 0x1b8
 8013af0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8013af4:	62657200 	rsbvs	r7, r5, #0, 4
 8013af8:	00746f6f 	rsbseq	r6, r4, pc, ror #30
 8013afc:	6e656469 	cdpvs	4, 6, cr6, cr5, cr9, {3}
 8013b00:	79666974 	stmdbvc	r6!, {r2, r4, r5, r6, r8, fp, sp, lr}^
 8013b04:	44213c00 	strtmi	r3, [r1], #-3072	; 0xfffff400
 8013b08:	5954434f 	ldmdbpl	r4, {r0, r1, r2, r3, r6, r8, r9, lr}^
 8013b0c:	68204550 	stmdavs	r0!, {r4, r6, r8, sl, lr}
 8013b10:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 8013b14:	74683c0a 	strbtvc	r3, [r8], #-3082	; 0xfffff3f6
 8013b18:	0a3e6c6d 	beq	8faecd4 <__exidx_end+0xf99c94>
 8013b1c:	6165683c 	cmnvs	r5, ip, lsr r8
 8013b20:	743c3e64 	ldrtvc	r3, [ip], #-3684	; 0xfffff19c
 8013b24:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
 8013b28:	6275533e 	rsbsvs	r5, r5, #-134217728	; 0xf8000000
 8013b2c:	3c74696d 			; <UNDEFINED> instruction: 0x3c74696d
 8013b30:	7469742f 	strbtvc	r7, [r9], #-1071	; 0xfffffbd1
 8013b34:	3c3e656c 	cfldr32cc	mvfx6, [lr], #-432	; 0xfffffe50
 8013b38:	6165682f 	cmnvs	r5, pc, lsr #16
 8013b3c:	3c0a3e64 	stccc	14, cr3, [sl], {100}	; 0x64
 8013b40:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 8013b44:	31683c3e 	cmncc	r8, lr, lsr ip
 8013b48:	3c4b4f3e 	mcrrcc	15, 3, r4, fp, cr14
 8013b4c:	3e31682f 	cdpcc	8, 3, cr6, cr1, cr15, {1}
 8013b50:	6f622f3c 	svcvs	0x00622f3c
 8013b54:	0a3e7964 	beq	8fb20ec <__exidx_end+0xf9d0ac>
 8013b58:	74682f3c 	strbtvc	r2, [r8], #-3900	; 0xfffff0c4
 8013b5c:	0a3e6c6d 	beq	8faed18 <__exidx_end+0xf99cd8>
 8013b60:	64614200 	strbtvs	r4, [r1], #-512	; 0xfffffe00
 8013b64:	71655220 	cmnvc	r5, r0, lsr #4
 8013b68:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0xfffffa8b
 8013b6c:	746f4e00 	strbtvc	r4, [pc], #-3584	; 8013b74 <RemoteConfig::s_TXT+0x194>
 8013b70:	756f4620 	strbvc	r4, [pc, #-1568]!	; 8013558 <vtable for WS28xxDmx+0x70>
 8013b74:	5200646e 	andpl	r6, r0, #1845493760	; 0x6e000000
 8013b78:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
 8013b7c:	45207473 	strmi	r7, [r0, #-1139]!	; 0xfffffb8d
 8013b80:	7469746e 	strbtvc	r7, [r9], #-1134	; 0xfffffb92
 8013b84:	6f542079 	svcvs	0x00542079
 8013b88:	614c206f 	cmpvs	ip, pc, rrx
 8013b8c:	00656772 	rsbeq	r6, r5, r2, ror r7
 8013b90:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
 8013b94:	2d747365 	ldclcs	3, cr7, [r4, #-404]!	; 0xfffffe6c
 8013b98:	20495255 	subcs	r5, r9, r5, asr r2
 8013b9c:	206f6f54 	rsbcs	r6, pc, r4, asr pc	; <UNPREDICTABLE>
 8013ba0:	676e6f4c 	strbvs	r6, [lr, -ip, asr #30]!
 8013ba4:	746e4900 	strbtvc	r4, [lr], #-2304	; 0xfffff700
 8013ba8:	616e7265 	cmnvs	lr, r5, ror #4
 8013bac:	6553206c 	ldrbvs	r2, [r3, #-108]	; 0xffffff94
 8013bb0:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
 8013bb4:	72724520 	rsbsvc	r4, r2, #32, 10	; 0x8000000
 8013bb8:	4d00726f 	sfmmi	f7, 4, [r0, #-444]	; 0xfffffe44
 8013bbc:	6f687465 	svcvs	0x00687465
 8013bc0:	6f4e2064 	svcvs	0x004e2064
 8013bc4:	6d492074 	stclvs	0, cr2, [r9, #-464]	; 0xfffffe30
 8013bc8:	6d656c70 	stclvs	12, cr6, [r5, #-448]!	; 0xfffffe40
 8013bcc:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xfffff19b
 8013bd0:	65560064 	ldrbvs	r0, [r6, #-100]	; 0xffffff9c
 8013bd4:	6f697372 	svcvs	0x00697372
 8013bd8:	6f4e206e 	svcvs	0x004e206e
 8013bdc:	75532074 	ldrbvc	r2, [r3, #-116]	; 0xffffff8c
 8013be0:	726f7070 	rsbvc	r7, pc, #112	; 0x70
 8013be4:	00646574 	rsbeq	r6, r4, r4, ror r5
 8013be8:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
 8013bec:	206e776f 	rsbcs	r7, lr, pc, ror #14
 8013bf0:	6f727245 	svcvs	0x00727245
 8013bf4:	4b4f0072 	blmi	93d3dc4 <__exidx_end+0x13bed84>
 8013bf8:	44213c00 	strtmi	r3, [r1], #-3072	; 0xfffff400
 8013bfc:	5954434f 	ldmdbpl	r4, {r0, r1, r2, r3, r6, r8, r9, lr}^
 8013c00:	68204550 	stmdavs	r0!, {r4, r6, r8, sl, lr}
 8013c04:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 8013c08:	74683c0a 	strbtvc	r3, [r8], #-3082	; 0xfffff3f6
 8013c0c:	0a3e6c6d 	beq	8faedc8 <__exidx_end+0xf99d88>
 8013c10:	6165683c 	cmnvs	r5, ip, lsr r8
 8013c14:	743c3e64 	ldrtvc	r3, [ip], #-3684	; 0xfffff19c
 8013c18:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
 8013c1c:	2075253e 	rsbscs	r2, r5, lr, lsr r5
 8013c20:	2f3c7325 	svccs	0x003c7325
 8013c24:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 8013c28:	2f3c3e65 	svccs	0x003c3e65
 8013c2c:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
 8013c30:	623c0a3e 	eorsvs	r0, ip, #253952	; 0x3e000
 8013c34:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 8013c38:	3e31683c 	mrccc	8, 1, r6, cr1, cr12, {1}
 8013c3c:	2f3c7325 	svccs	0x003c7325
 8013c40:	3c3e3168 	ldfccs	f3, [lr], #-416	; 0xfffffe60
 8013c44:	646f622f 	strbtvs	r6, [pc], #-559	; 8013c4c <RemoteConfig::s_TXT+0x26c>
 8013c48:	3c0a3e79 	stccc	14, cr3, [sl], {121}	; 0x79
 8013c4c:	6d74682f 	ldclvs	8, cr6, [r4, #-188]!	; 0xffffff44
 8013c50:	000a3e6c 	andeq	r3, sl, ip, ror #28
 8013c54:	50545448 	subspl	r5, r4, r8, asr #8
 8013c58:	312e312f 			; <UNDEFINED> instruction: 0x312e312f
 8013c5c:	20752520 	rsbscs	r2, r5, r0, lsr #10
 8013c60:	0a0d7325 	beq	83708fc <__exidx_end+0x35b8bc>
 8013c64:	76726553 			; <UNDEFINED> instruction: 0x76726553
 8013c68:	203a7265 	eorscs	r7, sl, r5, ror #4
 8013c6c:	0a0d7325 	beq	8370908 <__exidx_end+0x35b8c8>
 8013c70:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 8013c74:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 8013c78:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
 8013c7c:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 8013c80:	6f430a0d 	svcvs	0x00430a0d
 8013c84:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 8013c88:	654c2d74 	strbvs	r2, [ip, #-3444]	; 0xfffff28c
 8013c8c:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
 8013c90:	7525203a 	strvc	r2, [r5, #-58]!	; 0xffffffc6
 8013c94:	6f430a0d 	svcvs	0x00430a0d
 8013c98:	63656e6e 	cmnvs	r5, #1760	; 0x6e0
 8013c9c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8013ca0:	6c63203a 	stclvs	0, cr2, [r3], #-232	; 0xffffff18
 8013ca4:	0d65736f 	stcleq	3, cr7, [r5, #-444]!	; 0xfffffe44
 8013ca8:	000a0d0a 	andeq	r0, sl, sl, lsl #26

08013cac <contentType>:
 8013cac:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8013cb0:	6d74682f 	ldclvs	8, cr6, [r4, #-188]!	; 0xffffff44
 8013cb4:	0000006c 	andeq	r0, r0, ip, rrx
	...
 8013ccc:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8013cd0:	7373632f 	cmnvc	r3, #-1140850688	; 0xbc000000
	...
 8013cec:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8013cf0:	76616a2f 	strbtvc	r6, [r1], -pc, lsr #20
 8013cf4:	72637361 	rsbvc	r7, r3, #-2080374783	; 0x84000001
 8013cf8:	00747069 	rsbseq	r7, r4, r9, rrx
	...
 8013d0c:	6c707061 	ldclvs	0, cr7, [r0], #-388	; 0xfffffe7c
 8013d10:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
 8013d14:	2f6e6f69 	svccs	0x006e6f69
 8013d18:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
	...

08013d2c <RemoteConfigConst::PARAMS_DISABLE>:
 8013d2c:	61736964 	cmnvs	r3, r4, ror #18
 8013d30:	00656c62 	rsbeq	r6, r5, r2, ror #24

08013d34 <RemoteConfigConst::PARAMS_FILE_NAME>:
 8013d34:	6e6f6372 	mcrvs	3, 3, r6, cr15, cr2, {3}
 8013d38:	2e676966 	vnmulcs.f16	s13, s14, s13	; <UNPREDICTABLE>
 8013d3c:	00747874 	rsbseq	r7, r4, r4, ror r8

08013d40 <RemoteConfigConst::PARAMS_DISPLAY_NAME>:
 8013d40:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8013d44:	5f79616c 	svcpl	0x0079616c
 8013d48:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

08013d4d <RemoteConfigConst::PARAMS_DISABLE_WRITE>:
 8013d4d:	61736964 	cmnvs	r3, r4, ror #18
 8013d51:	5f656c62 	svcpl	0x00656c62
 8013d55:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 8013d59:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

08013d5b <RemoteConfigConst::PARAMS_ENABLE_REBOOT>:
 8013d5b:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8013d5f:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 8013d63:	6f6f6265 	svcvs	0x006f6265
 8013d67:	 	mcrvs	0, 3, r0, cr5, cr4, {3}

08013d69 <RemoteConfigConst::PARAMS_ENABLE_UPTIME>:
 8013d69:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8013d6d:	755f656c 	ldrbvc	r6, [pc, #-1388]	; 8013809 <s_Node+0x57>
 8013d71:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 8013d75:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

08013d77 <RemoteConfigConst::PARAMS_ENABLE_FACTORY>:
 8013d77:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8013d7b:	665f656c 	ldrbvs	r6, [pc], -ip, ror #10
 8013d7f:	6f746361 	svcvs	0x00746361
 8013d83:	7b007972 	blvc	8032353 <__exidx_end+0x1d313>
 8013d87:	73696c22 	cmnvc	r9, #8704	; 0x2200
 8013d8b:	7b3a2274 	blvc	8e9c763 <__exidx_end+0xe87723>
 8013d8f:	22706922 	rsbscs	r6, r0, #557056	; 0x88000
 8013d93:	6425223a 	strtvs	r2, [r5], #-570	; 0xfffffdc6
 8013d97:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8013d9b:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8013d9f:	222c2264 	eorcs	r2, ip, #100, 4	; 0x40000006
 8013da3:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 8013da7:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8013dab:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8013daf:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
 8013db3:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 8013db7:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8013dbb:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8013dbf:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8013dc3:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8013dc7:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 8013dcb:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8013dcf:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8013dd3:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8013dd7:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 8013ddb:	253a2274 	ldrcs	r2, [sl, #-628]!	; 0xfffffd8c
 8013ddf:	7d7d7d64 	ldclvc	13, cr7, [sp, #-400]!	; 0xfffffe70
 8013de3:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 8013de7:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8013deb:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 8013def:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 8013df3:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 8013df7:	616f6222 	cmnvs	pc, r2, lsr #4
 8013dfb:	3a226472 	bcc	88acfcb <__exidx_end+0x897f8b>
 8013dff:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8013e03:	7562222c 	strbvc	r2, [r2, #-556]!	; 0xfffffdd4
 8013e07:	22646c69 	rsbcs	r6, r4, #26880	; 0x6900
 8013e0b:	64227b3a 	strtvs	r7, [r2], #-2874	; 0xfffff4c6
 8013e0f:	22657461 	rsbcs	r7, r5, #1627389952	; 0x61000000
 8013e13:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 8013e17:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 8013e1b:	6d697422 	cfstrdvs	mvd7, [r9, #-136]!	; 0xffffff78
 8013e1f:	223a2265 	eorscs	r2, sl, #1342177286	; 0x50000006
 8013e23:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 8013e27:	007d7d22 	rsbseq	r7, sp, r2, lsr #26
 8013e2b:	7075227b 	rsbsvc	r2, r5, fp, ror r2
 8013e2f:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 8013e33:	75253a22 	strvc	r3, [r5, #-2594]!	; 0xfffff5de
 8013e37:	7b000a7d 	blvc	8016833 <__exidx_end+0x17f3>
 8013e3b:	73696422 	cmnvc	r9, #570425344	; 0x22000000
 8013e3f:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8013e43:	64253a22 	strtvs	r3, [r5], #-2594	; 0xfffff5de
 8013e47:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 8013e4b:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8013e4f:	7b3a2273 	blvc	8e9c823 <__exidx_end+0xe877e3>
 8013e53:	63736f22 	cmnvs	r3, #34, 30	; 0x88
 8013e57:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8013e5b:	4f223a22 	svcmi	0x00223a22
 8013e5f:	53204353 			; <UNDEFINED> instruction: 0x53204353
 8013e63:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
 8013e67:	222c2272 	eorcs	r2, ip, #536870919	; 0x20000007
 8013e6b:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 8013e6f:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 8013e73:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 8013e77:	4d44223a 	sfmmi	f2, 2, [r4, #-232]	; 0xffffff18
 8013e7b:	69502058 	ldmdbvs	r0, {r3, r4, r6, sp}^
 8013e7f:	226c6578 	rsbcs	r6, ip, #120, 10	; 0x1e000000
 8013e83:	656e222c 	strbvs	r2, [lr, #-556]!	; 0xfffffdd4
 8013e87:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 8013e8b:	78742e6b 	ldmdavc	r4!, {r0, r1, r3, r5, r6, r9, sl, fp, sp}^
 8013e8f:	223a2274 	eorscs	r2, sl, #116, 4	; 0x40000007
 8013e93:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 8013e97:	226b726f 	rsbcs	r7, fp, #-268435450	; 0xf0000006
 8013e9b:	6372222c 	cmnvs	r2, #44, 4	; 0xc0000002
 8013e9f:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 8013ea3:	78742e67 	ldmdavc	r4!, {r0, r1, r2, r5, r6, r9, sl, fp, sp}^
 8013ea7:	223a2274 	eorscs	r2, sl, #116, 4	; 0x40000007
 8013eab:	6f6d6552 	svcvs	0x006d6552
 8013eaf:	63206574 			; <UNDEFINED> instruction: 0x63206574
 8013eb3:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 8013eb7:	61727567 	cmnvs	r2, r7, ror #10
 8013ebb:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8013ebf:	007d7d22 	rsbseq	r7, sp, r2, lsr #26
 8013ec3:	2f637273 	svccs	0x00637273
 8013ec7:	70747468 	rsbsvc	r7, r4, r8, ror #8
 8013ecb:	65672f64 	strbvs	r2, [r7, #-3940]!	; 0xfffff09c
 8013ecf:	69665f74 	stmdbvs	r6!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 8013ed3:	635f656c 	cmpvs	pc, #108, 10	; 0x1b000000
 8013ed7:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 8013edb:	632e746e 			; <UNDEFINED> instruction: 0x632e746e
 8013edf:	67007070 	smlsdxvs	r0, r0, r0, r7
 8013ee3:	665f7465 	ldrbvs	r7, [pc], -r5, ror #8
 8013ee7:	5f656c69 	svcpl	0x00656c69
 8013eeb:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 8013eef:	00746e65 	rsbseq	r6, r4, r5, ror #28
 8013ef3:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 8013ef7:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	; 0xffffff80
 8013efb:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 8013eff:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 8013f03:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 8013f07:	203e2d20 	eorscs	r2, lr, r0, lsr #26
 8013f0b:	000a6425 	andeq	r6, sl, r5, lsr #8
 8013f0f:	202d2d3c 	eorcs	r2, sp, ip, lsr sp
 8013f13:	253a7325 	ldrcs	r7, [sl, #-805]!	; 0xfffffcdb
 8013f17:	64253a73 	strtvs	r3, [r5], #-2675	; 0xfffff58d
 8013f1b:	 	teqcs	ip, sl

08013f1d <index_html>:
 8013f1d:	4f44213c 	svcmi	0x0044213c
 8013f21:	50595443 	subspl	r5, r9, r3, asr #8
 8013f25:	74682045 	strbtvc	r2, [r8], #-69	; 0xffffffbb
 8013f29:	0a3e6c6d 	beq	8faf0e5 <__exidx_end+0xf9a0a5>
 8013f2d:	6d74683c 	ldclvs	8, cr6, [r4, #-240]!	; 0xffffff10
 8013f31:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 8013f35:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
 8013f39:	3c090a3e 			; <UNDEFINED> instruction: 0x3c090a3e
 8013f3d:	6b6e696c 	blvs	9bae4f5 <__exidx_end+0x1b994b5>
 8013f41:	6c657220 	sfmvs	f7, 2, [r5], #-128	; 0xffffff80
 8013f45:	7473223d 	ldrbtvc	r2, [r3], #-573	; 0xfffffdc3
 8013f49:	73656c79 	cmnvc	r5, #30976	; 0x7900
 8013f4d:	74656568 	strbtvc	r6, [r5], #-1384	; 0xfffffa98
 8013f51:	72682022 	rsbvc	r2, r8, #34	; 0x22
 8013f55:	223d6665 	eorscs	r6, sp, #105906176	; 0x6500000
 8013f59:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 8013f5d:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 8013f61:	20227373 	eorcs	r7, r2, r3, ror r3
 8013f65:	090a3e2f 	stmdbeq	sl, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}
 8013f69:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 8013f6d:	3c3e656c 	cfldr32cc	mvfx6, [lr], #-432	; 0xfffffe50
 8013f71:	7469742f 	strbtvc	r7, [r9], #-1071	; 0xfffffbd1
 8013f75:	0a3e656c 	beq	8fad52d <__exidx_end+0xf984ed>
 8013f79:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 8013f7d:	0a3e6461 	beq	8fad109 <__exidx_end+0xf980c9>
 8013f81:	646f623c 	strbtvs	r6, [pc], #-572	; 8013f89 <index_html+0x6c>
 8013f85:	090a3e79 	stmdbeq	sl, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 8013f89:	6165683c 	cmnvs	r5, ip, lsr r8
 8013f8d:	3e726564 	cdpcc	5, 7, cr6, cr2, cr4, {3}
 8013f91:	206c753c 	rsbcs	r7, ip, ip, lsr r5
 8013f95:	223d6469 	eorscs	r6, sp, #1761607680	; 0x69000000
 8013f99:	694c6469 	stmdbvs	ip, {r0, r3, r5, r6, sl, sp, lr}^
 8013f9d:	3e227473 	mcrcc	4, 1, r7, cr2, cr3, {3}
 8013fa1:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 8013fa5:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8013fa9:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 8013fad:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 8013fb1:	3c3e703c 	ldccc	0, cr7, [lr], #-240	; 0xffffff10
 8013fb5:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 8013fb9:	69207463 	stmdbvs	r0!, {r0, r1, r5, r6, sl, ip, sp, lr}
 8013fbd:	69223d64 	stmdbvs	r2!, {r2, r5, r6, r8, sl, fp, ip, sp}
 8013fc1:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 8013fc5:	6f746365 	svcvs	0x00746365
 8013fc9:	20227972 	eorcs	r7, r2, r2, ror r9
 8013fcd:	68636e6f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 8013fd1:	65676e61 	strbvs	r6, [r7, #-3681]!	; 0xfffff19f
 8013fd5:	6567223d 	strbvs	r2, [r7, #-573]!	; 0xfffffdc3
 8013fd9:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 8013fdd:	68742874 	ldmdavs	r4!, {r2, r4, r5, r6, fp, sp}^
 8013fe1:	762e7369 	strtvc	r7, [lr], -r9, ror #6
 8013fe5:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 8013fe9:	3c3e2229 	lfmcc	f2, 4, [lr], #-164	; 0xffffff5c
 8013fed:	6c65732f 	stclvs	3, cr7, [r5], #-188	; 0xffffff44
 8013ff1:	3e746365 	cdpcc	3, 7, cr6, cr4, cr5, {3}
 8013ff5:	3e702f3c 	mrccc	15, 3, r2, cr0, cr12, {1}
 8013ff9:	743c090a 	ldrtvc	r0, [ip], #-2314	; 0xfffff6f6
 8013ffd:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8014001:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 8014005:	54646922 	strbtpl	r6, [r4], #-2338	; 0xfffff6de
 8014009:	20227478 	eorcs	r7, r2, r8, ror r4
 801400d:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 8014011:	273d7265 	ldrcs	r7, [sp, -r5, ror #4]!
 8014015:	3c3e2731 	ldccc	7, cr2, [lr], #-196	; 0xffffff3c
 8014019:	6261742f 	rsbvs	r7, r1, #788529152	; 0x2f000000
 801401d:	0a3e656c 	beq	8fad5d5 <__exidx_end+0xf98595>
 8014021:	6f663c09 	svcvs	0x00663c09
 8014025:	7265746f 	rsbvc	r7, r5, #1862270976	; 0x6f000000
 8014029:	6c753c3e 	ldclvs	12, cr3, [r5], #-248	; 0xffffff08
 801402d:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 8014031:	56646922 	strbtpl	r6, [r4], -r2, lsr #18
 8014035:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8014039:	3e226e6f 	cdpcc	14, 2, cr6, cr2, cr15, {3}
 801403d:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 8014041:	662f3c3e 			; <UNDEFINED> instruction: 0x662f3c3e
 8014045:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 8014049:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 801404d:	7263733c 	rsbvc	r7, r3, #60, 6	; 0xf0000000
 8014051:	20747069 	rsbscs	r7, r4, r9, rrx
 8014055:	3d637273 	sfmcc	f7, 2, [r3, #-460]!	; 0xfffffe34
 8014059:	646e6922 	strbtvs	r6, [lr], #-2338	; 0xfffff6de
 801405d:	6a2e7865 	bvs	8bb21f9 <__exidx_end+0xb9d1b9>
 8014061:	3c3e2273 	lfmcc	f2, 4, [lr], #-460	; 0xfffffe34
 8014065:	7263732f 	rsbvc	r7, r3, #-1140850688	; 0xbc000000
 8014069:	3e747069 	cdpcc	0, 7, cr7, cr4, cr9, {3}
 801406d:	622f3c0a 	eorvs	r3, pc, #2560	; 0xa00
 8014071:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 8014075:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8014079:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 801407d:	 	svcvs	0x0062000a

0801407f <styles_css>:
 801407f:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 8014083:	200a7b20 	andcs	r7, sl, r0, lsr #22
 8014087:	63616220 	cmnvs	r1, #32, 4
 801408b:	6f72676b 	svcvs	0x0072676b
 801408f:	2d646e75 	stclcs	14, cr6, [r4, #-468]!	; 0xfffffe2c
 8014093:	6f6c6f63 	svcvs	0x006c6f63
 8014097:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 801409b:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 801409f:	30322c30 	eorscc	r2, r2, r0, lsr ip
 80140a3:	2930322c 	ldmdbcs	r0!, {r2, r3, r5, r9, ip, sp}
 80140a7:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 80140ab:	6f6c6f63 	svcvs	0x006c6f63
 80140af:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 80140b3:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 80140b7:	202c3535 	eorcs	r3, ip, r5, lsr r5
 80140bb:	2c353532 	cfldr32cs	mvfx3, [r5], #-200	; 0xffffff38
 80140bf:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
 80140c3:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 80140c7:	6c750a0a 			; <UNDEFINED> instruction: 0x6c750a0a
 80140cb:	200a7b20 	andcs	r7, sl, r0, lsr #22
 80140cf:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 80140d3:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 80140d7:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 80140db:	0a3b7865 	beq	8ef2277 <__exidx_end+0xedd237>
 80140df:	6c0a0a7d 			; <UNDEFINED> instruction: 0x6c0a0a7d
 80140e3:	0a7b2069 	beq	9edc28f <__exidx_end+0x1ec724f>
 80140e7:	696c2020 	stmdbvs	ip!, {r5, sp}^
 80140eb:	732d7473 			; <UNDEFINED> instruction: 0x732d7473
 80140ef:	656c7974 	strbvs	r7, [ip, #-2420]!	; 0xfffff68c
 80140f3:	6f6e203a 	svcvs	0x006e203a
 80140f7:	0a3b656e 	beq	8eed6b7 <__exidx_end+0xed8677>
 80140fb:	616d2020 	cmnvs	sp, r0, lsr #32
 80140ff:	6e696772 	mcrvs	7, 3, r6, cr9, cr2, {3}
 8014103:	7031203a 	eorsvc	r2, r1, sl, lsr r0
 8014107:	70352078 	eorsvc	r2, r5, r8, ror r0
 801410b:	7d0a3b78 	vstrvc	d3, [sl, #-480]	; 0xfffffe20
 801410f:	65680a0a 	strbvs	r0, [r8, #-2570]!	; 0xfffff5f6
 8014113:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 8014117:	200a7b20 	andcs	r7, sl, r0, lsr #22
 801411b:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 801411f:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8014123:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 8014127:	0a3b7865 	beq	8ef22c3 <__exidx_end+0xedd283>
 801412b:	6f622020 	svcvs	0x00622020
 801412f:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 8014133:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 8014137:	3a737569 	bcc	9cf16e3 <__exidx_end+0x1cdc6a3>
 801413b:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 801413f:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 8014143:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 8014147:	203a7265 	eorscs	r7, sl, r5, ror #4
 801414b:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801414f:	72672064 	rsbvc	r2, r7, #100	; 0x64
 8014153:	31207965 			; <UNDEFINED> instruction: 0x31207965
 8014157:	0a3b7870 	beq	8ef231f <__exidx_end+0xedd2df>
 801415b:	660a0a7d 			; <UNDEFINED> instruction: 0x660a0a7d
 801415f:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 8014163:	0a7b2072 	beq	9edc333 <__exidx_end+0x1ec72f3>
 8014167:	69642020 	stmdbvs	r4!, {r5, sp}^
 801416b:	616c7073 	smcvs	50947	; 0xc703
 801416f:	66203a79 			; <UNDEFINED> instruction: 0x66203a79
 8014173:	3b78656c 	blcc	9e2d72b <__exidx_end+0x1e186eb>
 8014177:	6a20200a 	bvs	881c1a7 <__exidx_end+0x807167>
 801417b:	69747375 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
 801417f:	632d7966 			; <UNDEFINED> instruction: 0x632d7966
 8014183:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 8014187:	203a746e 	eorscs	r7, sl, lr, ror #8
 801418b:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
 801418f:	0a3b7265 	beq	8ef0b2b <__exidx_end+0xedbaeb>
 8014193:	6f622020 	svcvs	0x00622020
 8014197:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 801419b:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 801419f:	3a737569 	bcc	9cf174b <__exidx_end+0x1cdc70b>
 80141a3:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 80141a7:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 80141ab:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 80141af:	203a7265 	eorscs	r7, sl, r5, ror #4
 80141b3:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 80141b7:	72672064 	rsbvc	r2, r7, #100	; 0x64
 80141bb:	31207965 			; <UNDEFINED> instruction: 0x31207965
 80141bf:	0a3b7870 	beq	8ef2387 <__exidx_end+0xedd347>
 80141c3:	00000a7d 	andeq	r0, r0, sp, ror sl
	...

080141c8 <HttpContent>:
 80141c8:	08013aa6 	stmdaeq	r1, {r1, r2, r5, r7, r9, fp, ip, sp}
 80141cc:	0801407f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, lr}
 80141d0:	08013ab2 	stmdaeq	r1, {r1, r4, r5, r7, r9, fp, ip, sp}
 80141d4:	080141e0 	stmdaeq	r1, {r5, r6, r7, r8, lr}
 80141d8:	08013a9a 	stmdaeq	r1, {r1, r3, r4, r7, r9, fp, ip, sp}
 80141dc:	08013f1d 	stmdaeq	r1, {r0, r2, r3, r4, r8, r9, sl, fp, ip, sp}

080141e0 <index_js>:
 80141e0:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 80141e4:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 80141e8:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 80141ec:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 80141f0:	534a7465 	movtpl	r7, #42085	; 0xa465
 80141f4:	6a284e4f 	bvs	8a27b38 <__exidx_end+0xa12af8>
 80141f8:	296e6f73 	stmdbcs	lr!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 80141fc:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 8014200:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 8014204:	6c727520 	cfldr64vs	mvdx7, [r2], #-128	; 0xffffff80
 8014208:	6a2f273d 	bvs	8bddf04 <__exidx_end+0xbc8ec4>
 801420c:	2f6e6f73 	svccs	0x006e6f73
 8014210:	202b2027 	eorcs	r2, fp, r7, lsr #32
 8014214:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 8014218:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 801421c:	20797274 	rsbscs	r7, r9, r4, ror r2
 8014220:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 8014224:	656c0909 	strbvs	r0, [ip, #-2313]!	; 0xfffff6f7
 8014228:	65722074 	ldrbvs	r2, [r2, #-116]!	; 0xffffff8c
 801422c:	77613d73 			; <UNDEFINED> instruction: 0x77613d73
 8014230:	20746961 	rsbscs	r6, r4, r1, ror #18
 8014234:	63746566 	cmnvs	r4, #427819008	; 0x19800000
 8014238:	72752868 	rsbsvc	r2, r5, #104, 16	; 0x680000
 801423c:	0a3b296c 	beq	8ede7f4 <__exidx_end+0xec97b4>
 8014240:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 8014244:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
 8014248:	61206e72 			; <UNDEFINED> instruction: 0x61206e72
 801424c:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 8014250:	73657220 	cmnvc	r5, #32, 4
 8014254:	6f736a2e 	svcvs	0x00736a2e
 8014258:	3b29286e 	blcc	8a5e418 <__exidx_end+0xa493d8>
 801425c:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 8014260:	74616320 	strbtvc	r6, [r1], #-800	; 0xfffffce0
 8014264:	28206863 	stmdacs	r0!, {r0, r1, r5, r6, fp, sp, lr}
 8014268:	6f727265 	svcvs	0x00727265
 801426c:	7b202972 	blvc	881e83c <__exidx_end+0x8097fc>
 8014270:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8014274:	6e6f6309 	cdpvs	3, 6, cr6, cr15, cr9, {0}
 8014278:	656c6f73 	strbvs	r6, [ip, #-3955]!	; 0xfffff08d
 801427c:	676f6c2e 	strbvs	r6, [pc, -lr, lsr #24]!
 8014280:	72726528 	rsbsvc	r6, r2, #40, 10	; 0xa000000
 8014284:	3b29726f 	blcc	8a70c48 <__exidx_end+0xa5bc08>
 8014288:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 801428c:	0a0a7d0a 	beq	82b36bc <__exidx_end+0x29e67c>
 8014290:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 8014294:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 8014298:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801429c:	72206e6f 	eorvc	r6, r0, #1776	; 0x6f0
 80142a0:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 80142a4:	73694c72 	cmnvc	r9, #29184	; 0x7200
 80142a8:	20292874 	eorcs	r2, r9, r4, ror r8
 80142ac:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 80142b0:	2074656c 	rsbscs	r6, r4, ip, ror #10
 80142b4:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 80142b8:	6177613d 	cmnvs	r7, sp, lsr r1
 80142bc:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 80142c0:	534a7465 	movtpl	r7, #42085	; 0xa465
 80142c4:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 80142c8:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 80142cc:	0a3b2927 	beq	8ede770 <__exidx_end+0xec9730>
 80142d0:	6f640909 	svcvs	0x00640909
 80142d4:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 80142d8:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 80142dc:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 80142e0:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 80142e4:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 80142e8:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 80142ec:	73694c64 	cmnvc	r9, #100, 24	; 0x6400
 80142f0:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 80142f4:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 80142f8:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 80142fc:	3c223d4c 	stccc	13, cr3, [r2], #-304	; 0xfffffed0
 8014300:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 8014304:	73696c2b 	cmnvc	r9, #11008	; 0x2b00
 8014308:	696c2e74 	stmdbvs	ip!, {r2, r4, r5, r6, r9, sl, fp, sp}^
 801430c:	6e2e7473 	mcrvs	4, 1, r7, cr14, cr3, {3}
 8014310:	2b656d61 	blcs	996f89c <__exidx_end+0x195a85c>
 8014314:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8014294 <index_js+0xb4>
 8014318:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 801431c:	2b223e69 	blcs	88a3cc8 <__exidx_end+0x88ec88>
 8014320:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8014324:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 8014328:	6f6e2e74 	svcvs	0x006e2e74
 801432c:	742e6564 	strtvc	r6, [lr], #-1380	; 0xfffffa9c
 8014330:	2b657079 	blcs	997051c <__exidx_end+0x195b4dc>
 8014334:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 80142b4 <index_js+0xd4>
 8014338:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 801433c:	2b223e69 	blcs	88a3ce8 <__exidx_end+0x88eca8>
 8014340:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8014344:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 8014348:	6f6e2e74 	svcvs	0x006e2e74
 801434c:	702e6564 	eorvc	r6, lr, r4, ror #10
 8014350:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
 8014354:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8014358:	2f3c222b 	svccs	0x003c222b
 801435c:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 8014360:	0a7d0a3b 	beq	9f56c54 <__exidx_end+0x1f41c14>
 8014364:	7973610a 	ldmdbvc	r3!, {r1, r3, r8, sp, lr}^
 8014368:	6620636e 	strtvs	r6, [r0], -lr, ror #6
 801436c:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 8014370:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 8014374:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 8014378:	69447265 	stmdbvs	r4, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801437c:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8014380:	2879726f 	ldmdacs	r9!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 8014384:	0a7b2029 	beq	9edc430 <__exidx_end+0x1ec73f0>
 8014388:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 801438c:	64207465 	strtvs	r7, [r0], #-1125	; 0xfffffb9b
 8014390:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 8014394:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8014398:	6177613d 	cmnvs	r7, sp, lsr r1
 801439c:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 80143a0:	534a7465 	movtpl	r7, #42085	; 0xa465
 80143a4:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 80143a8:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 80143ac:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 80143b0:	3b292779 	blcc	8a5e19c <__exidx_end+0xa4915c>
 80143b4:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 80143b8:	2074656c 	rsbscs	r6, r4, ip, ror #10
 80143bc:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 80143c0:	0a22223d 	beq	889ccbc <__exidx_end+0x887c7c>
 80143c4:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 80143c8:	66207465 	strtvs	r7, [r0], -r5, ror #8
 80143cc:	6e656c69 	cdpvs	12, 6, cr6, cr5, cr9, {3}
 80143d0:	73656d61 	cmnvc	r5, #6208	; 0x1840
 80143d4:	6a624f3d 	bvs	98a80d0 <__exidx_end+0x1893090>
 80143d8:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 80143dc:	7379656b 	cmnvc	r9, #448790528	; 0x1ac00000
 80143e0:	72696428 	rsbvc	r6, r9, #40, 8	; 0x28000000
 80143e4:	6f746365 	svcvs	0x00746365
 80143e8:	225b7972 	subscs	r7, fp, #1867776	; 0x1c8000
 80143ec:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 80143f0:	295d2273 	ldmdbcs	sp, {r0, r1, r4, r5, r6, r9, sp}^
 80143f4:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 80143f8:	6c696609 	stclvs	6, cr6, [r9], #-36	; 0xffffffdc
 80143fc:	6d616e65 	stclvs	14, cr6, [r1, #-404]!	; 0xfffffe6c
 8014400:	662e7365 	strtvs	r7, [lr], -r5, ror #6
 8014404:	6145726f 	cmpvs	r5, pc, ror #4
 8014408:	66286863 	strtvs	r6, [r8], -r3, ror #16
 801440c:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 8014410:	286e6f69 	stmdacs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 8014414:	2979656b 	ldmdbcs	r9!, {r0, r1, r3, r5, r6, r8, sl, sp, lr}^
 8014418:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 801441c:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 8014420:	20726176 	rsbscs	r6, r2, r6, ror r1
 8014424:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 8014428:	203d2065 	eorscs	r2, sp, r5, rrx
 801442c:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8014430:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8014434:	66225b79 			; <UNDEFINED> instruction: 0x66225b79
 8014438:	73656c69 	cmnvc	r5, #26880	; 0x6900
 801443c:	6b5b5d22 	blvs	96eb8cc <__exidx_end+0x16d688c>
 8014440:	3b5d7965 	blcc	97729dc <__exidx_end+0x175d99c>
 8014444:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8014448:	74680909 	strbtvc	r0, [r8], #-2313	; 0xfffff6f7
 801444c:	3d2b6c6d 	stccc	12, cr6, [fp, #-436]!	; 0xfffffe4c
 8014450:	706f3c22 	rsbvc	r3, pc, r2, lsr #24
 8014454:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8014458:	6c617620 	stclvs	6, cr7, [r1], #-128	; 0xffffff80
 801445c:	223d6575 	eorscs	r6, sp, #490733568	; 0x1d400000
 8014460:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 8014464:	223e222b 	eorscs	r2, lr, #-1342177278	; 0xb0000002
 8014468:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 801446c:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 8014470:	706f2f3c 	rsbvc	r2, pc, ip, lsr pc	; <UNPREDICTABLE>
 8014474:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8014478:	0a3b223e 	beq	8edcd78 <__exidx_end+0xec7d38>
 801447c:	7d090909 	vstrvc.16	s0, [r9, #-18]	; 0xffffffee	; <UNPREDICTABLE>
 8014480:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 8014484:	6f640909 	svcvs	0x00640909
 8014488:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 801448c:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 8014490:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 8014494:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 8014498:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 801449c:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 80144a0:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 80144a4:	6f746365 	svcvs	0x00746365
 80144a8:	29227972 	stmdbcs	r2!, {r1, r4, r5, r6, r8, fp, ip, sp, lr}
 80144ac:	6e6e692e 	vmulvs.f16	s13, s28, s29	; <UNPREDICTABLE>
 80144b0:	54487265 	strbpl	r7, [r8], #-613	; 0xfffffd9b
 80144b4:	683d4c4d 	ldmdavs	sp!, {r0, r2, r3, r6, sl, fp, lr}
 80144b8:	3b6c6d74 	blcc	9b2fa90 <__exidx_end+0x1b1aa50>
 80144bc:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 80144c0:	5f746567 	svcpl	0x00746567
 80144c4:	28747874 	ldmdacs	r4!, {r2, r4, r5, r6, fp, ip, sp, lr}^
 80144c8:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 80144cc:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 80144d0:	5d305b73 	fldmdbxpl	r0!, {d5-d61}	;@ Deprecated
 80144d4:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 80144d8:	73610a0a 	cmnvc	r1, #40960	; 0xa000
 80144dc:	20636e79 	rsbcs	r6, r3, r9, ror lr
 80144e0:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 80144e4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 80144e8:	6e657220 	cdpvs	2, 6, cr7, cr5, cr0, {1}
 80144ec:	56726564 	ldrbtpl	r6, [r2], -r4, ror #10
 80144f0:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 80144f4:	29286e6f 	stmdbcs	r8!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
 80144f8:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 80144fc:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 8014500:	72657620 	rsbvc	r7, r5, #32, 12	; 0x2000000
 8014504:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 8014508:	6177613d 	cmnvs	r7, sp, lsr r1
 801450c:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 8014510:	534a7465 	movtpl	r7, #42085	; 0xa465
 8014514:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8014518:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801451c:	276e6f69 	strbcs	r6, [lr, -r9, ror #30]!
 8014520:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 8014524:	636f6409 	cmnvs	pc, #150994944	; 0x9000000
 8014528:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 801452c:	65672e74 	strbvs	r2, [r7, #-3700]!	; 0xfffff18c
 8014530:	656c4574 	strbvs	r4, [ip, #-1396]!	; 0xfffffa8c
 8014534:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 8014538:	64497942 	strbvs	r7, [r9], #-2370	; 0xfffff6be
 801453c:	64692228 	strbtvs	r2, [r9], #-552	; 0xfffffdd8
 8014540:	73726556 	cmnvc	r2, #360710144	; 0x15800000
 8014544:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 8014548:	6e692e29 	cdpvs	14, 6, cr2, cr9, cr9, {1}
 801454c:	4872656e 	ldmdami	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 8014550:	3d4c4d54 	stclcc	13, cr4, [ip, #-336]	; 0xfffffeb0
 8014554:	696c3c22 	stmdbvs	ip!, {r1, r5, sl, fp, ip, sp}^
 8014558:	2b22563e 	blcs	88a9e58 <__exidx_end+0x894e18>
 801455c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8014560:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 8014564:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8014568:	2b6e6f69 	blcs	9bb0314 <__exidx_end+0x1b9b2d4>
 801456c:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 80144ec <index_js+0x30c>
 8014570:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 8014574:	2b223e69 	blcs	88a3f20 <__exidx_end+0x88eee0>
 8014578:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801457c:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 8014580:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 8014584:	61642e64 	cmnvs	r4, r4, ror #28
 8014588:	222b6574 	eorcs	r6, fp, #116, 10	; 0x1d000000
 801458c:	696c2f3c 	stmdbvs	ip!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 8014590:	696c3c3e 	stmdbvs	ip!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 8014594:	762b223e 			; <UNDEFINED> instruction: 0x762b223e
 8014598:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801459c:	622e6e6f 	eorvs	r6, lr, #1776	; 0x6f0
 80145a0:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
 80145a4:	6d69742e 	cfstrdvs	mvd7, [r9, #-184]!	; 0xffffff48
 80145a8:	3c222b65 			; <UNDEFINED> instruction: 0x3c222b65
 80145ac:	3e696c2f 	cdpcc	12, 6, cr6, cr9, cr15, {1}
 80145b0:	3e696c3c 	mcrcc	12, 3, r6, cr9, cr12, {1}
 80145b4:	65762b22 	ldrbvs	r2, [r6, #-2850]!	; 0xfffff4de
 80145b8:	6f697372 	svcvs	0x00697372
 80145bc:	6f622e6e 	svcvs	0x00622e6e
 80145c0:	2b647261 	blcs	9930f4c <__exidx_end+0x191bf0c>
 80145c4:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8014544 <index_js+0x364>
 80145c8:	3b223e69 	blcc	88a3f74 <__exidx_end+0x88ef34>
 80145cc:	0a0a7d0a 	beq	82b39fc <__exidx_end+0x29e9bc>
 80145d0:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 80145d4:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 80145d8:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 80145dc:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 80145e0:	745f7465 	ldrbvc	r7, [pc], #-1125	; 80145e8 <index_js+0x408>
 80145e4:	73287478 			; <UNDEFINED> instruction: 0x73287478
 80145e8:	20296c65 	eorcs	r6, r9, r5, ror #24
 80145ec:	6c090a7b 			; <UNDEFINED> instruction: 0x6c090a7b
 80145f0:	74207465 	strtvc	r7, [r0], #-1125	; 0xfffffb9b
 80145f4:	613d7478 	teqvs	sp, r8, ror r4
 80145f8:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 80145fc:	74656720 	strbtvc	r6, [r5], #-1824	; 0xfffff8e0
 8014600:	4e4f534a 	cdpmi	3, 4, cr5, cr15, cr10, {2}
 8014604:	6c657328 	stclvs	3, cr7, [r5], #-160	; 0xffffff60
 8014608:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 801460c:	2074656c 	rsbscs	r6, r4, ip, ror #10
 8014610:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8014614:	3b22223d 	blcc	889cf10 <__exidx_end+0x887ed0>
 8014618:	624f090a 	subvs	r0, pc, #163840	; 0x28000
 801461c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 8014620:	79656b2e 	stmdbvc	r5!, {r1, r2, r3, r5, r8, r9, fp, sp, lr}^
 8014624:	78742873 	ldmdavc	r4!, {r0, r1, r4, r5, r6, fp, sp}^
 8014628:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 801462c:	2e295d6c 	cdpcs	13, 2, cr5, cr9, cr12, {3}
 8014630:	45726f66 	ldrbmi	r6, [r2, #-3942]!	; 0xfffff09a
 8014634:	28686361 	stmdacs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 8014638:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 801463c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8014640:	79656b28 	stmdbvc	r5!, {r3, r5, r8, r9, fp, sp, lr}^
 8014644:	0a7b2029 	beq	9edc6f0 <__exidx_end+0x1ec76b0>
 8014648:	61760909 	cmnvs	r6, r9, lsl #18
 801464c:	61762072 	cmnvs	r6, r2, ror r0
 8014650:	2065756c 	rsbcs	r7, r5, ip, ror #10
 8014654:	7874203d 	ldmdavc	r4!, {r0, r2, r3, r4, r5, sp}^
 8014658:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 801465c:	6b5b5d6c 	blvs	96ebc14 <__exidx_end+0x16d6bd4>
 8014660:	3b5d7965 	blcc	9772bfc <__exidx_end+0x175dbbc>
 8014664:	2009090a 	andcs	r0, r9, sl, lsl #18
 8014668:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 801466c:	3c223d2b 	stccc	13, cr3, [r2], #-172	; 0xffffff54
 8014670:	3c3e7274 	lfmcc	f7, 4, [lr], #-464	; 0xfffffe30
 8014674:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 8014678:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 801467c:	2f3c222b 	svccs	0x003c222b
 8014680:	3c3e6474 	cfldrscc	mvf6, [lr], #-464	; 0xfffffe30
 8014684:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 8014688:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 801468c:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 8014690:	64742f3c 	ldrbtvs	r2, [r4], #-3900	; 0xfffff0c4
 8014694:	742f3c3e 	strtvc	r3, [pc], #-3134	; 801469c <index_js+0x4bc>
 8014698:	3b223e72 	blcc	88a4068 <__exidx_end+0x88f028>
 801469c:	297d090a 	ldmdbcs	sp!, {r1, r3, r8, fp}^
 80146a0:	64090a3b 	strvs	r0, [r9], #-2619	; 0xfffff5c5
 80146a4:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 80146a8:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 80146ac:	45746567 	ldrbmi	r6, [r4, #-1383]!	; 0xfffffa99
 80146b0:	656d656c 	strbvs	r6, [sp, #-1388]!	; 0xfffffa94
 80146b4:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 80146b8:	22286449 	eorcs	r6, r8, #1224736768	; 0x49000000
 80146bc:	78546469 	ldmdavc	r4, {r0, r3, r5, r6, sl, sp, lr}^
 80146c0:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 80146c4:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 80146c8:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 80146cc:	74683d4c 	strbtvc	r3, [r8], #-3404	; 0xfffff2b4
 80146d0:	0a3b6c6d 	beq	8eef88c <__exidx_end+0xeda84c>
 80146d4:	720a0a7d 	andvc	r0, sl, #512000	; 0x7d000
 80146d8:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 80146dc:	73694c72 	cmnvc	r9, #29184	; 0x7200
 80146e0:	3b292874 	blcc	8a5e8b8 <__exidx_end+0xa49878>
 80146e4:	6e65720a 	cdpvs	2, 6, cr7, cr5, cr10, {0}
 80146e8:	44726564 	ldrbtmi	r6, [r2], #-1380	; 0xfffffa9c
 80146ec:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 80146f0:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 80146f4:	0a3b2928 	beq	8edeb9c <__exidx_end+0xec9b5c>
 80146f8:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 80146fc:	65567265 	ldrbvs	r7, [r6, #-613]	; 0xfffffd9b
 8014700:	6f697372 	svcvs	0x00697372
 8014704:	3b29286e 	blcc	8a5e8c4 <__exidx_end+0xa49884>
 8014708:	0000000a 	andeq	r0, r0, sl

0801470c <s_aStorSize>:
 801470c:	00000060 	andeq	r0, r0, r0, rrx
 8014710:	00000090 	muleq	r0, r0, r0
 8014714:	00000020 	andeq	r0, r0, r0, lsr #32
 8014718:	00000040 	andeq	r0, r0, r0, asr #32
 801471c:	00000060 	andeq	r0, r0, r0, rrx
 8014720:	00000040 	andeq	r0, r0, r0, asr #32
 8014724:	00000020 	andeq	r0, r0, r0, lsr #32
 8014728:	00000020 	andeq	r0, r0, r0, lsr #32
 801472c:	000001e0 	andeq	r0, r0, r0, ror #3
 8014730:	00000040 	andeq	r0, r0, r0, asr #32
 8014734:	00000020 	andeq	r0, r0, r0, lsr #32
 8014738:	00000060 	andeq	r0, r0, r0, rrx
 801473c:	00000030 	andeq	r0, r0, r0, lsr r0
 8014740:	00000020 	andeq	r0, r0, r0, lsr #32
 8014744:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
 8014748:	00000030 	andeq	r0, r0, r0, lsr r0
 801474c:	00000040 	andeq	r0, r0, r0, asr #32
 8014750:	00000020 	andeq	r0, r0, r0, lsr #32
 8014754:	00000060 	andeq	r0, r0, r0, rrx
 8014758:	00000020 	andeq	r0, r0, r0, lsr #32
 801475c:	00000400 	andeq	r0, r0, r0, lsl #8
 8014760:	00000020 	andeq	r0, r0, r0, lsr #32
 8014764:	00000020 	andeq	r0, r0, r0, lsr #32
 8014768:	00000040 	andeq	r0, r0, r0, asr #32
 801476c:	00000060 	andeq	r0, r0, r0, rrx
 8014770:	00000020 	andeq	r0, r0, r0, lsr #32
 8014774:	00000020 	andeq	r0, r0, r0, lsr #32
 8014778:	00000020 	andeq	r0, r0, r0, lsr #32

0801477c <vtable for StoreNetwork>:
	...
 8014784:	0800dba9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, fp, ip, lr, pc}
 8014788:	0800dcbd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, sl, fp, ip, lr, pc}
 801478c:	0800dbb1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, fp, ip, lr, pc}
 8014790:	0800dcd1 	stmdaeq	r0, {r0, r4, r6, r7, sl, fp, ip, lr, pc}
 8014794:	0800dc61 	stmdaeq	r0, {r0, r5, r6, sl, fp, ip, lr, pc}
 8014798:	0800dc35 	stmdaeq	r0, {r0, r2, r4, r5, sl, fp, ip, lr, pc}
 801479c:	0800dc05 	stmdaeq	r0, {r0, r2, sl, fp, ip, lr, pc}
 80147a0:	0800dc8d 	stmdaeq	r0, {r0, r2, r3, r7, sl, fp, ip, lr, pc}
 80147a4:	0800dbd5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, r9, fp, ip, lr, pc}
 80147a8:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 80147ac:	00000000 	andeq	r0, r0, r0
 80147b0:	0800dbab 	stmdaeq	r0, {r0, r1, r3, r5, r7, r8, r9, fp, ip, lr, pc}
 80147b4:	0800dcc9 	stmdaeq	r0, {r0, r3, r6, r7, sl, fp, ip, lr, pc}
 80147b8:	0800dc85 	stmdaeq	r0, {r0, r2, r7, sl, fp, ip, lr, pc}
 80147bc:	0800dc59 	stmdaeq	r0, {r0, r3, r4, r6, sl, fp, ip, lr, pc}
 80147c0:	0800dc2d 	stmdaeq	r0, {r0, r2, r3, r5, sl, fp, ip, lr, pc}
 80147c4:	0800dcb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, sl, fp, ip, lr, pc}
 80147c8:	0800dbfd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, lr, pc}

080147cc <vtable for StoreOscServer>:
	...
 80147d4:	0800dd05 	stmdaeq	r0, {r0, r2, r8, sl, fp, ip, lr, pc}
 80147d8:	0800dd4d 	stmdaeq	r0, {r0, r2, r3, r6, r8, sl, fp, ip, lr, pc}
 80147dc:	0800dd29 	stmdaeq	r0, {r0, r3, r5, r8, sl, fp, ip, lr, pc}
 80147e0:	0800dd09 	stmdaeq	r0, {r0, r3, r8, sl, fp, ip, lr, pc}

080147e4 <vtable for StoreRemoteConfig>:
	...
 80147ec:	0800dd6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl, fp, ip, lr, pc}
 80147f0:	0800ddb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, sl, fp, ip, lr, pc}
 80147f4:	0800dd91 	stmdaeq	r0, {r0, r4, r7, r8, sl, fp, ip, lr, pc}
 80147f8:	0800dd71 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, fp, ip, lr, pc}

080147fc <vtable for StoreWS28xxDmx>:
	...
 8014804:	0800ddd5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, sl, fp, ip, lr, pc}
 8014808:	0800df45 	stmdaeq	r0, {r0, r2, r6, r8, r9, sl, fp, ip, lr, pc}
 801480c:	0800dddd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sl, fp, ip, lr, pc}
 8014810:	0800df59 	stmdaeq	r0, {r0, r3, r4, r6, r8, r9, sl, fp, ip, lr, pc}
 8014814:	0800df11 	stmdaeq	r0, {r0, r4, r8, r9, sl, fp, ip, lr, pc}
 8014818:	0800dedd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r9, sl, fp, ip, lr, pc}
 801481c:	0800dea5 	stmdaeq	r0, {r0, r2, r5, r7, r9, sl, fp, ip, lr, pc}
 8014820:	0800de6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, lr, pc}
 8014824:	0800de35 	stmdaeq	r0, {r0, r2, r4, r5, r9, sl, fp, ip, lr, pc}
 8014828:	0800de01 	stmdaeq	r0, {r0, r9, sl, fp, ip, lr, pc}
 801482c:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 8014830:	00000000 	andeq	r0, r0, r0
 8014834:	0800ddd7 	stmdaeq	r0, {r0, r1, r2, r4, r6, r7, r8, sl, fp, ip, lr, pc}
 8014838:	0800df51 	stmdaeq	r0, {r0, r4, r6, r8, r9, sl, fp, ip, lr, pc}
 801483c:	0800df3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, r9, sl, fp, ip, lr, pc}
 8014840:	0800df09 	stmdaeq	r0, {r0, r3, r8, r9, sl, fp, ip, lr, pc}
 8014844:	0800ded5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r9, sl, fp, ip, lr, pc}
 8014848:	0800de9d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r9, sl, fp, ip, lr, pc}
 801484c:	0800de65 	stmdaeq	r0, {r0, r2, r5, r6, r9, sl, fp, ip, lr, pc}
 8014850:	0800de2d 	stmdaeq	r0, {r0, r2, r3, r5, r9, sl, fp, ip, lr, pc}
 8014854:	3a434d46 	bcc	90e7d74 <__exidx_end+0x10d2d34>
 8014858:	74654420 	strbtvc	r4, [r5], #-1056	; 0xfffffbe0
 801485c:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0xfffffc9b
 8014860:	73252064 			; <UNDEFINED> instruction: 0x73252064
 8014864:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
 8014868:	6f742068 	svcvs	0x00742068
 801486c:	206c6174 	rsbcs	r6, ip, r4, ror r1
 8014870:	62206425 	eorvs	r6, r0, #620756992	; 0x25000000
 8014874:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
 8014878:	64255b20 	strtvs	r5, [r5], #-2848	; 0xfffff4e0
 801487c:	5d426b20 	vstrpl	d22, [r2, #-128]	; 0xffffff80
 8014880:	6374000a 	cmnvs	r4, #10
 8014884:	65625f70 	strbvs	r5, [r2, #-3952]!	; 0xfffff090
 8014888:	3a6e6967 	bcc	9baee2c <__exidx_end+0x1b99dec>
 801488c:	6f6f7420 	svcvs	0x006f7420
 8014890:	6e616d20 	cdpvs	13, 6, cr6, cr1, cr0, {1}
 8014894:	6f632079 	svcvs	0x00632079
 8014898:	63656e6e 	cmnvs	r5, #1760	; 0x6e0
 801489c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 80148a0:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
 80148a4:	7500646e 	strvc	r6, [r0, #-1134]	; 0xfffffb92
 80148a8:	6e69626e 	cdpvs	2, 6, cr6, cr9, cr14, {3}
 80148ac:	41000a64 	tstmi	r0, r4, ror #20
 80148b0:	6c205052 	stcvs	0, cr5, [r0], #-328	; 0xfffffeb8
 80148b4:	756b6f6f 	strbvc	r6, [fp, #-3951]!	; 0xfffff091
 80148b8:	61662070 	smcvs	25088	; 0x6200
 80148bc:	64656c69 	strbtvs	r6, [r5], #-3177	; 0xfffff397
 80148c0:	203e2d20 	eorscs	r2, lr, r0, lsr #26
 80148c4:	61666564 	cmnvs	r6, r4, ror #10
 80148c8:	20746c75 	rsbscs	r6, r4, r5, ror ip
 80148cc:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 80148d0:	0a796177 	beq	9e6ceb4 <__exidx_end+0x1e57e74>
 80148d4:	50524100 	subspl	r4, r2, r0, lsl #2
 80148d8:	6f6f6c20 	svcvs	0x006f6c20
 80148dc:	2070756b 	rsbscs	r7, r0, fp, ror #10
 80148e0:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
 80148e4:	000a6465 	andeq	r6, sl, r5, ror #8

080148e8 <NetworkConst::MSG_MDNS_CONFIG>:
 80148e8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 80148ec:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 80148f0:	20676e69 	rsbcs	r6, r7, r9, ror #28
 80148f4:	534e444d 	movtpl	r4, #58445	; 0xe44d
	...

080148f9 <NetworkConst::MSG_NETWORK_INIT>:
 80148f9:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 80148fd:	206b726f 	rsbcs	r7, fp, pc, ror #4
 8014901:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 8014905:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
 8014909:	6974617a 	ldmdbvs	r4!, {r1, r3, r4, r5, r6, r8, sp, lr}^
 801490d:	32006e6f 	andcc	r6, r0, #1776	; 0x6f0
 8014911:	302e3432 	eorcc	r3, lr, r2, lsr r4
 8014915:	322e302e 	eorcc	r3, lr, #46	; 0x2e
 8014919:	5f003135 	svcpl	0x00003135
 801491d:	2e706374 	mrccs	3, 3, r6, cr0, cr4, {3}
 8014921:	61636f6c 	cmnvs	r3, ip, ror #30
 8014925:	735f006c 	cmpvc	pc, #108	; 0x6c
 8014929:	69767265 	ldmdbvs	r6!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801492d:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 8014931:	736e645f 	cmnvc	lr, #1593835520	; 0x5f000000
 8014935:	2e64732d 	cdpcs	3, 6, cr7, cr4, cr13, {1}
 8014939:	7064755f 	rsbvc	r7, r4, pc, asr r5
 801493d:	636f6c2e 	cmnvs	pc, #11776	; 0x2e00
 8014941:	6d006c61 	stcvs	12, cr6, [r0, #-388]	; 0xfffffe7c
 8014945:	0a534e44 	beq	94e825d <__exidx_end+0x14d321d>
 8014949:	6f4e2000 	svcvs	0x004e2000
 801494d:	75722074 	ldrbvc	r2, [r2, #-116]!	; 0xffffff8c
 8014951:	6e696e6e 	cdpvs	14, 6, cr6, cr9, cr14, {3}
 8014955:	20000a67 	andcs	r0, r0, r7, ror #20
 8014959:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
 801495d:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8014961:	20000a73 	andcs	r0, r0, r3, ror sl
 8014965:	25207325 	strcs	r7, [r0, #-805]!	; 0xfffffcdb
 8014969:	73252064 			; <UNDEFINED> instruction: 0x73252064
 801496d:	7465000a 	strbtvc	r0, [r5], #-10
 8014971:	67003068 	strvs	r3, [r0, -r8, rrx]
 8014975:	64616769 	strbtvs	r6, [r1], #-1897	; 0xfffff897
 8014979:	63697665 	cmnvs	r9, #105906176	; 0x6500000
 801497d:	4e005f65 	cdpmi	15, 0, cr5, cr0, cr5, {3}
 8014981:	6f777465 	svcvs	0x00777465
 8014985:	000a6b72 	andeq	r6, sl, r2, ror fp
 8014989:	736f4820 	cmnvc	pc, #32, 16	; 0x200000
 801498d:	6d616e74 	stclvs	14, cr6, [r1, #-464]!	; 0xfffffe30
 8014991:	3a202065 	bcc	881cb2d <__exidx_end+0x807aed>
 8014995:	0a732520 	beq	9cdde1d <__exidx_end+0x1cc8ddd>
 8014999:	66492000 	strbvs	r2, [r9], -r0
 801499d:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
 80149a1:	20202020 	eorcs	r2, r0, r0, lsr #32
 80149a5:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 80149a9:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 80149ad:	4920000a 	stmdbmi	r0!, {r1, r3}
 80149b1:	2074656e 	rsbscs	r6, r4, lr, ror #10
 80149b5:	20202020 	eorcs	r2, r0, r0, lsr #32
 80149b9:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 80149bd:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80149c1:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 80149c5:	252f6425 	strcs	r6, [pc, #-1061]!	; 80145a8 <index_js+0x3c8>
 80149c9:	20000a64 	andcs	r0, r0, r4, ror #20
 80149cd:	6d74654e 	cfldr64vs	mvdx6, [r4, #-312]!	; 0xfffffec8
 80149d1:	206b7361 	rsbcs	r7, fp, r1, ror #6
 80149d5:	203a2020 	eorscs	r2, sl, r0, lsr #32
 80149d9:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80149dd:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80149e1:	0a64252e 	beq	991dea1 <__exidx_end+0x1908e61>
 80149e5:	61472000 	mrsvs	r2, (UNDEF: 71)
 80149e9:	61776574 	cmnvs	r7, r4, ror r5
 80149ed:	20202079 	eorcs	r2, r0, r9, ror r0
 80149f1:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 80149f5:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 80149f9:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80149fd:	20000a64 	andcs	r0, r0, r4, ror #20
 8014a01:	616f7242 	cmnvs	pc, r2, asr #4
 8014a05:	73616364 	cmnvc	r1, #100, 6	; 0x90000001
 8014a09:	203a2074 	eorscs	r2, sl, r4, ror r0
 8014a0d:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8014a11:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8014a15:	0a64252e 	beq	991ded5 <__exidx_end+0x1908e95>
 8014a19:	614d2000 	mrsvs	r2, (UNDEF: 77)
 8014a1d:	20202063 	eorcs	r2, r0, r3, rrx
 8014a21:	20202020 	eorcs	r2, r0, r0, lsr #32
 8014a25:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 8014a29:	253a7832 	ldrcs	r7, [sl, #-2098]!	; 0xfffff7ce
 8014a2d:	3a78322e 	bcc	9e212ed <__exidx_end+0x1e0c2ad>
 8014a31:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8014a35:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 8014a39:	2e253a78 			; <UNDEFINED> instruction: 0x2e253a78
 8014a3d:	253a7832 	ldrcs	r7, [sl, #-2098]!	; 0xfffff7ce
 8014a41:	0a78322e 	beq	9e21301 <__exidx_end+0x1e0c2c1>
 8014a45:	6f4d2000 	svcvs	0x004d2000
 8014a49:	20206564 	eorcs	r6, r0, r4, ror #10
 8014a4d:	20202020 	eorcs	r2, r0, r0, lsr #32
 8014a51:	6325203a 			; <UNDEFINED> instruction: 0x6325203a
 8014a55:	7453000a 	ldrbvc	r0, [r3], #-10
 8014a59:	63697461 	cmnvs	r9, #1627389952	; 0x61000000
 8014a5d:	00504920 	subseq	r4, r0, r0, lsr #18

08014a61 <NetworkParamsConst::IP_ADDRESS>:
 8014a61:	615f7069 	cmpvs	pc, r9, rrx
 8014a65:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 8014a69:	 	strvs	r7, [r0], #-883	; 0xfffffc8d

08014a6c <NetworkParamsConst::DEFAULT_GATEWAY>:
 8014a6c:	61666564 	cmnvs	r6, r4, ror #10
 8014a70:	5f746c75 	svcpl	0x00746c75
 8014a74:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 8014a78:	00796177 	rsbseq	r6, r9, r7, ror r1

08014a7c <NetworkParamsConst::DHCP_RETRY_TIME>:
 8014a7c:	70636864 	rsbvc	r6, r3, r4, ror #16
 8014a80:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
 8014a84:	745f7972 	ldrbvc	r7, [pc], #-2418	; 8014a8c <NetworkParamsConst::HOSTNAME>
 8014a88:	00656d69 	rsbeq	r6, r5, r9, ror #26

08014a8c <NetworkParamsConst::HOSTNAME>:
 8014a8c:	74736f68 	ldrbtvc	r6, [r3], #-3944	; 0xfffff098
 8014a90:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

08014a95 <NetworkParamsConst::NET_MASK>:
 8014a95:	5f74656e 	svcpl	0x0074656e
 8014a99:	6b73616d 	blvs	9ced055 <__exidx_end+0x1cd8015>
	...

08014a9e <NetworkParamsConst::USE_DHCP>:
 8014a9e:	5f657375 	svcpl	0x00657375
 8014aa2:	70636864 	rsbvc	r6, r3, r4, ror #16
	...

08014aa7 <NetworkParamsConst::FILE_NAME>:
 8014aa7:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 8014aab:	2e6b726f 	cdpcs	2, 6, cr7, cr11, cr15, {3}
 8014aaf:	00747874 	rsbseq	r7, r4, r4, ror r8

08014ab3 <DevicesParamsConst::SPI_SPEED_HZ>:
 8014ab3:	636f6c63 	cmnvs	pc, #25344	; 0x6300
 8014ab7:	70735f6b 	rsbsvc	r5, r3, fp, ror #30
 8014abb:	5f646565 	svcpl	0x00646565
 8014abf:	 			; <UNDEFINED> instruction: 0x6c007a68

08014ac2 <DevicesParamsConst::GROUPING_COUNT>:
 8014ac2:	5f64656c 	svcpl	0x0064656c
 8014ac6:	756f7267 	strbvc	r7, [pc, #-615]!	; 8014867 <vtable for StoreWS28xxDmx+0x6b>
 8014aca:	6f635f70 	svcvs	0x00635f70
 8014ace:	00746e75 	rsbseq	r6, r4, r5, ror lr

08014ad2 <DevicesParamsConst::GLOBAL_BRIGHTNESS>:
 8014ad2:	626f6c67 	rsbvs	r6, pc, #26368	; 0x6700
 8014ad6:	625f6c61 	subsvs	r6, pc, #24832	; 0x6100
 8014ada:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 8014ade:	73656e74 	cmnvc	r5, #116, 28	; 0x740
 8014ae2:	 	strbvs	r0, [ip, #-115]!	; 0xffffff8d

08014ae4 <DevicesParamsConst::MAP>:
 8014ae4:	5f64656c 	svcpl	0x0064656c
 8014ae8:	5f626772 	svcpl	0x00626772
 8014aec:	7070616d 	rsbsvc	r6, r0, sp, ror #2
 8014af0:	00676e69 	rsbeq	r6, r7, r9, ror #28

08014af4 <DevicesParamsConst::TYPE>:
 8014af4:	5f64656c 	svcpl	0x0064656c
 8014af8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
	...

08014afd <DevicesParamsConst::COUNT>:
 8014afd:	5f64656c 	svcpl	0x0064656c
 8014b01:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 8014b05:	 	strbvs	r0, [ip, #-116]!	; 0xffffff8c

08014b07 <DevicesParamsConst::LED_T0H>:
 8014b07:	5f64656c 	svcpl	0x0064656c
 8014b0b:	00683074 	rsbeq	r3, r8, r4, ror r0

08014b0f <DevicesParamsConst::LED_T1H>:
 8014b0f:	5f64656c 	svcpl	0x0064656c
 8014b13:	00683174 	rsbeq	r3, r8, r4, ror r1

08014b17 <DevicesParamsConst::FILE_NAME>:
 8014b17:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 8014b1b:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 8014b1f:	00747874 	rsbseq	r7, r4, r4, ror r8
 8014b23:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8014b27:	6425223a 	strtvs	r2, [r5], #-570	; 0xfffffdc6
 8014b2b:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8014b2f:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8014b33:	002c2264 	eoreq	r2, ip, r4, ror #4
 8014b37:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
 8014b3b:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8014b3f:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8014b43:	0a64252e 	beq	991e003 <__exidx_end+0x1908fc3>
 8014b47:	25202300 	strcs	r2, [r0, #-768]!	; 0xfffffd00
 8014b4b:	0a232073 	beq	88dcd1f <__exidx_end+0x8c7cdf>
	...

08014b50 <LightSetParamsConst::TEST_PATTERN>:
 8014b50:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
 8014b54:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
 8014b58:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
	...

08014b5d <LightSetParamsConst::START_UNI_PORT>:
 8014b5d:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8014b61:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 8014b65:	6f705f69 	svcvs	0x00705f69
 8014b69:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 8014b6d:	74730000 	ldrbtvc	r0, [r3], #-0
 8014b71:	5f747261 	svcpl	0x00747261
 8014b75:	5f696e75 	svcpl	0x00696e75
 8014b79:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8014b7d:	0000325f 	andeq	r3, r0, pc, asr r2
 8014b81:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8014b85:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 8014b89:	6f705f69 	svcvs	0x00705f69
 8014b8d:	335f7472 	cmpcc	pc, #1912602624	; 0x72000000
 8014b91:	74730000 	ldrbtvc	r0, [r3], #-0
 8014b95:	5f747261 	svcpl	0x00747261
 8014b99:	5f696e75 	svcpl	0x00696e75
 8014b9d:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8014ba1:	0000345f 	andeq	r3, r0, pc, asr r4
 8014ba5:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8014ba9:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 8014bad:	6f705f69 	svcvs	0x00705f69
 8014bb1:	355f7472 	ldrbcc	r7, [pc, #-1138]	; 8014747 <s_aStorSize+0x3b>
 8014bb5:	74730000 	ldrbtvc	r0, [r3], #-0
 8014bb9:	5f747261 	svcpl	0x00747261
 8014bbd:	5f696e75 	svcpl	0x00696e75
 8014bc1:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8014bc5:	0000365f 	andeq	r3, r0, pc, asr r6
 8014bc9:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8014bcd:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 8014bd1:	6f705f69 	svcvs	0x00705f69
 8014bd5:	375f7472 			; <UNDEFINED> instruction: 0x375f7472
 8014bd9:	74730000 	ldrbtvc	r0, [r3], #-0
 8014bdd:	5f747261 	svcpl	0x00747261
 8014be1:	5f696e75 	svcpl	0x00696e75
 8014be5:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8014be9:	0000385f 	andeq	r3, r0, pc, asr r8

08014bed <LightSetParamsConst::DMX_START_ADDRESS>:
 8014bed:	5f786d64 	svcpl	0x00786d64
 8014bf1:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8014bf5:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xfffff08c
 8014bf9:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 8014bfd:	6f4e0073 	svcvs	0x004e0073
 8014c01:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 8014c05:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8014c09:	756f6620 	strbvc	r6, [pc, #-1568]!	; 80145f1 <index_js+0x411>
 8014c0d:	5300646e 	movwpl	r6, #1134	; 0x46e
 8014c11:	30313148 	eorscc	r3, r1, r8, asr #2
 8014c15:	53530036 	cmppl	r3, #54	; 0x36
 8014c19:	30333144 	eorscc	r3, r3, r4, asr #2
 8014c1d:	73250036 			; <UNDEFINED> instruction: 0x73250036
 8014c21:	64252820 	strtvs	r2, [r5], #-2080	; 0xfffff7e0
 8014c25:	2964252c 	stmdbcs	r4!, {r2, r3, r5, r8, sl, sp}^
 8014c29:	aa40000a 	bge	9014c59 <__exidx_end+0xfffc19>
 8014c2d:	00eeaaee 	rsceq	sl, lr, lr, ror #21
 8014c31:	 	andmi	r0, r0, r0

08014c34 <_OledFont8x6>:
 8014c34:	00000040 	andeq	r0, r0, r0, asr #32
 8014c38:	40000000 	andmi	r0, r0, r0
 8014c3c:	005f0000 	subseq	r0, pc, r0
 8014c40:	00400000 	subeq	r0, r0, r0
 8014c44:	00070007 	andeq	r0, r7, r7
 8014c48:	7f144000 	svcvc	0x00144000
 8014c4c:	00147f14 	andseq	r7, r4, r4, lsl pc
 8014c50:	7f2a2440 	svcvc	0x002a2440
 8014c54:	4000122a 	andmi	r1, r0, sl, lsr #4
 8014c58:	64081323 	strvs	r1, [r8], #-803	; 0xfffffcdd
 8014c5c:	36400062 	strbcc	r0, [r0], -r2, rrx
 8014c60:	50205649 	eorpl	r5, r0, r9, asr #12
 8014c64:	08004000 	stmdaeq	r0, {lr}
 8014c68:	00000307 	andeq	r0, r0, r7, lsl #6
 8014c6c:	221c0040 	andscs	r0, ip, #64	; 0x40
 8014c70:	40000041 	andmi	r0, r0, r1, asr #32
 8014c74:	1c224100 	stfnes	f4, [r2], #-0
 8014c78:	2a400000 	bcs	9014c80 <__exidx_end+0xfffc40>
 8014c7c:	2a1c7f1c 	bcs	87348f4 <__exidx_end+0x71f8b4>
 8014c80:	08084000 	stmdaeq	r8, {lr}
 8014c84:	0008083e 	andeq	r0, r8, lr, lsr r8
 8014c88:	70800040 	addvc	r0, r0, r0, asr #32
 8014c8c:	40000030 	andmi	r0, r0, r0, lsr r0
 8014c90:	08080808 	stmdaeq	r8, {r3, fp}
 8014c94:	00400008 	subeq	r0, r0, r8
 8014c98:	00606000 	rsbeq	r6, r0, r0
 8014c9c:	10204000 	eorne	r4, r0, r0
 8014ca0:	00020408 	andeq	r0, r2, r8, lsl #8
 8014ca4:	49513e40 	ldmdbmi	r1, {r6, r9, sl, fp, ip, sp}^
 8014ca8:	40003e45 	andmi	r3, r0, r5, asr #28
 8014cac:	407f4200 	rsbsmi	r4, pc, r0, lsl #4
 8014cb0:	72400000 	subvc	r0, r0, #0
 8014cb4:	46494949 	strbmi	r4, [r9], -r9, asr #18
 8014cb8:	41214000 			; <UNDEFINED> instruction: 0x41214000
 8014cbc:	00334d49 	eorseq	r4, r3, r9, asr #26
 8014cc0:	12141840 	andsne	r1, r4, #64, 16	; 0x400000
 8014cc4:	4000107f 	andmi	r1, r0, pc, ror r0
 8014cc8:	45454527 	strbmi	r4, [r5, #-1319]	; 0xfffffad9
 8014ccc:	3c400039 	mcrrcc	0, 3, r0, r0, cr9
 8014cd0:	3149494a 	cmpcc	r9, sl, asr #18
 8014cd4:	21414000 	mrscs	r4, (UNDEF: 65)
 8014cd8:	00070911 	andeq	r0, r7, r1, lsl r9
 8014cdc:	49493640 	stmdbmi	r9, {r6, r9, sl, ip, sp}^
 8014ce0:	40003649 	andmi	r3, r0, r9, asr #12
 8014ce4:	29494946 	stmdbcs	r9, {r1, r2, r6, r8, fp, lr}^
 8014ce8:	0040001e 	subeq	r0, r0, lr, lsl r0
 8014cec:	00001400 	andeq	r1, r0, r0, lsl #8
 8014cf0:	40004000 	andmi	r4, r0, r0
 8014cf4:	00000034 	andeq	r0, r0, r4, lsr r0
 8014cf8:	14080040 	strne	r0, [r8], #-64	; 0xffffffc0
 8014cfc:	40004122 	andmi	r4, r0, r2, lsr #2
 8014d00:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec
 8014d04:	00400014 	subeq	r0, r0, r4, lsl r0
 8014d08:	08142241 	ldmdaeq	r4, {r0, r6, r9, sp}
 8014d0c:	01024000 	mrseq	r4, (UNDEF: 2)
 8014d10:	00060959 	andeq	r0, r6, r9, asr r9
 8014d14:	5d413e40 	stclpl	14, cr3, [r1, #-256]	; 0xffffff00
 8014d18:	40004e59 	andmi	r4, r0, r9, asr lr
 8014d1c:	1211127c 	andsne	r1, r1, #124, 4	; 0xc0000007
 8014d20:	7f40007c 	svcvc	0x0040007c
 8014d24:	36494949 	strbcc	r4, [r9], -r9, asr #18
 8014d28:	413e4000 	teqmi	lr, r0
 8014d2c:	00224141 	eoreq	r4, r2, r1, asr #2
 8014d30:	41417f40 	cmpmi	r1, r0, asr #30
 8014d34:	40003e41 	andmi	r3, r0, r1, asr #28
 8014d38:	4949497f 	stmdbmi	r9, {r0, r1, r2, r3, r4, r5, r6, r8, fp, lr}^
 8014d3c:	7f400041 	svcvc	0x00400041
 8014d40:	01090909 	tsteq	r9, r9, lsl #18
 8014d44:	413e4000 	teqmi	lr, r0
 8014d48:	00735141 	rsbseq	r5, r3, r1, asr #2
 8014d4c:	08087f40 	stmdaeq	r8, {r6, r8, r9, sl, fp, ip, sp, lr}
 8014d50:	40007f08 	andmi	r7, r0, r8, lsl #30
 8014d54:	417f4100 	cmnmi	pc, r0, lsl #2
 8014d58:	20400000 	subcs	r0, r0, r0
 8014d5c:	013f4140 	teqeq	pc, r0, asr #2
 8014d60:	087f4000 	ldmdaeq	pc!, {lr}^	; <UNPREDICTABLE>
 8014d64:	00412214 	subeq	r2, r1, r4, lsl r2
 8014d68:	40407f40 	submi	r7, r0, r0, asr #30
 8014d6c:	40004040 	andmi	r4, r0, r0, asr #32
 8014d70:	021c027f 	andseq	r0, ip, #-268435449	; 0xf0000007
 8014d74:	7f40007f 	svcvc	0x0040007f
 8014d78:	7f100804 	svcvc	0x00100804
 8014d7c:	413e4000 	teqmi	lr, r0
 8014d80:	003e4141 	eorseq	r4, lr, r1, asr #2
 8014d84:	09097f40 	stmdbeq	r9, {r6, r8, r9, sl, fp, ip, sp, lr}
 8014d88:	40000609 	andmi	r0, r0, r9, lsl #12
 8014d8c:	2151413e 	cmpcs	r1, lr, lsr r1
 8014d90:	7f40005e 	svcvc	0x0040005e
 8014d94:	46291909 	strtmi	r1, [r9], -r9, lsl #18
 8014d98:	49264000 	stmdbmi	r6!, {lr}
 8014d9c:	00324949 	eorseq	r4, r2, r9, asr #18
 8014da0:	7f010340 	svcvc	0x00010340
 8014da4:	40000301 	andmi	r0, r0, r1, lsl #6
 8014da8:	4040403f 	submi	r4, r0, pc, lsr r0
 8014dac:	1f40003f 	svcne	0x0040003f
 8014db0:	1f204020 	svcne	0x00204020
 8014db4:	403f4000 	eorsmi	r4, pc, r0
 8014db8:	003f4038 	eorseq	r4, pc, r8, lsr r0	; <UNPREDICTABLE>
 8014dbc:	08146340 	ldmdaeq	r4, {r6, r8, r9, sp, lr}
 8014dc0:	40006314 	andmi	r6, r0, r4, lsl r3
 8014dc4:	04780403 	ldrbteq	r0, [r8], #-1027	; 0xfffffbfd
 8014dc8:	61400003 	cmpvs	r0, r3
 8014dcc:	434d4959 	movtmi	r4, #55641	; 0xd959
 8014dd0:	7f004000 	svcvc	0x00004000
 8014dd4:	00414141 	subeq	r4, r1, r1, asr #2
 8014dd8:	08040240 	stmdaeq	r4, {r6, r9}
 8014ddc:	40002010 	andmi	r2, r0, r0, lsl r0
 8014de0:	41414100 	mrsmi	r4, (UNDEF: 81)
 8014de4:	0440007f 	strbeq	r0, [r0], #-127	; 0xffffff81
 8014de8:	04020102 	streq	r0, [r2], #-258	; 0xfffffefe
 8014dec:	40404000 	submi	r4, r0, r0
 8014df0:	00404040 	subeq	r4, r0, r0, asr #32
 8014df4:	07030040 	streq	r0, [r3, -r0, asr #32]
 8014df8:	40000008 	andmi	r0, r0, r8
 8014dfc:	78545420 	ldmdavc	r4, {r5, sl, ip, lr}^
 8014e00:	7f400040 	svcvc	0x00400040
 8014e04:	38444428 	stmdacc	r4, {r3, r5, sl, lr}^
 8014e08:	44384000 	ldrtmi	r4, [r8], #-0
 8014e0c:	00284444 	eoreq	r4, r8, r4, asr #8
 8014e10:	44443840 	strbmi	r3, [r4], #-2112	; 0xfffff7c0
 8014e14:	40007f28 	andmi	r7, r0, r8, lsr #30
 8014e18:	54545438 	ldrbpl	r5, [r4], #-1080	; 0xfffffbc8
 8014e1c:	00400018 	subeq	r0, r0, r8, lsl r0
 8014e20:	02097e08 	andeq	r7, r9, #8, 28	; 0x80
 8014e24:	a4184000 	ldrge	r4, [r8], #-0
 8014e28:	00789ca4 	rsbseq	r9, r8, r4, lsr #25
 8014e2c:	04087f40 	streq	r7, [r8], #-3904	; 0xfffff0c0
 8014e30:	40007804 	andmi	r7, r0, r4, lsl #16
 8014e34:	407d4400 	rsbsmi	r4, sp, r0, lsl #8
 8014e38:	20400000 	subcs	r0, r0, r0
 8014e3c:	003d4040 	eorseq	r4, sp, r0, asr #32
 8014e40:	107f4000 	rsbsne	r4, pc, r0
 8014e44:	00004428 	andeq	r4, r0, r8, lsr #8
 8014e48:	7f410040 	svcvc	0x00410040
 8014e4c:	40000040 	andmi	r0, r0, r0, asr #32
 8014e50:	0478047c 	ldrbteq	r0, [r8], #-1148	; 0xfffffb84
 8014e54:	7c400078 	mcrrvc	0, 7, r0, r0, cr8
 8014e58:	78040408 	stmdavc	r4, {r3, sl}
 8014e5c:	44384000 	ldrtmi	r4, [r8], #-0
 8014e60:	00384444 	eorseq	r4, r8, r4, asr #8
 8014e64:	2418fc40 	ldrcs	pc, [r8], #-3136	; 0xfffff3c0
 8014e68:	40001824 	andmi	r1, r0, r4, lsr #16
 8014e6c:	18242418 	stmdane	r4!, {r3, r4, sl, sp}
 8014e70:	7c4000fc 	mcrrvc	0, 15, r0, r0, cr12
 8014e74:	08040408 	stmdaeq	r4, {r3, sl}
 8014e78:	54484000 	strbpl	r4, [r8], #-0
 8014e7c:	00245454 	eoreq	r5, r4, r4, asr r4
 8014e80:	3f040440 	svccc	0x00040440
 8014e84:	40002444 	andmi	r2, r0, r4, asr #8
 8014e88:	2040403c 	subcs	r4, r0, ip, lsr r0
 8014e8c:	1c40007c 	mcrrne	0, 7, r0, r0, cr12
 8014e90:	1c204020 	stcne	0, cr4, [r0], #-128	; 0xffffff80
 8014e94:	403c4000 	eorsmi	r4, ip, r0
 8014e98:	003c4030 	eorseq	r4, ip, r0, lsr r0
 8014e9c:	10284440 	eorne	r4, r8, r0, asr #8
 8014ea0:	40004428 	andmi	r4, r0, r8, lsr #8
 8014ea4:	9090904c 	addsls	r9, r0, ip, asr #32
 8014ea8:	4440007c 	strbmi	r0, [r0], #-124	; 0xffffff84
 8014eac:	444c5464 	strbmi	r5, [ip], #-1124	; 0xfffffb9c
 8014eb0:	08004000 	stmdaeq	r0, {lr}
 8014eb4:	00004136 	andeq	r4, r0, r6, lsr r1
 8014eb8:	77000040 	strvc	r0, [r0, -r0, asr #32]
 8014ebc:	40000000 	andmi	r0, r0, r0
 8014ec0:	08364100 	ldmdaeq	r6!, {r8, lr}
 8014ec4:	02400000 	subeq	r0, r0, #0
 8014ec8:	02040201 	andeq	r0, r4, #268435456	; 0x10000000
 8014ecc:	263c4000 	ldrtcs	r4, [ip], -r0
 8014ed0:	003c2623 	eorseq	r2, ip, r3, lsr #12

08014ed4 <oled_128x32_init>:
 8014ed4:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 8014ed8:	4000d31f 	andmi	sp, r0, pc, lsl r3
 8014edc:	0020148d 	eoreq	r1, r0, sp, lsl #9
 8014ee0:	02dac8a1 	sbcseq	ip, sl, #10551296	; 0xa10000
 8014ee4:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 8014ee8:	a6a440db 	ssatge	r4, #5, fp, asr #1

08014eec <oled_128x64_init>:
 8014eec:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 8014ef0:	4000d33f 	andmi	sp, r0, pc, lsr r3
 8014ef4:	0020148d 	eoreq	r1, r0, sp, lsl #9
 8014ef8:	12dac8a1 	sbcsne	ip, sl, #10551296	; 0xa10000
 8014efc:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 8014f00:	a6a440db 	ssatge	r4, #5, fp, asr #1

08014f04 <vtable for Ssd1306>:
	...
 8014f0c:	080107cf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, r8, r9, sl}
 8014f10:	080107fd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl}
 8014f14:	08010b0d 	stmdaeq	r1, {r0, r2, r3, r8, r9, fp}
 8014f18:	08010a95 	stmdaeq	r1, {r0, r2, r4, r7, r9, fp}
 8014f1c:	08010961 	stmdaeq	r1, {r0, r5, r6, r8, fp}
 8014f20:	0801081d 	stmdaeq	r1, {r0, r2, r3, r4, fp}
 8014f24:	08010845 	stmdaeq	r1, {r0, r2, r6, fp}
 8014f28:	08010937 	stmdaeq	r1, {r0, r1, r2, r4, r5, r8, fp}
 8014f2c:	080108f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, fp}
 8014f30:	080107d1 	stmdaeq	r1, {r0, r4, r6, r7, r8, r9, sl}
 8014f34:	0801099d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, fp}
 8014f38:	080109a9 	stmdaeq	r1, {r0, r3, r5, r7, r8, fp}
 8014f3c:	080109c3 	stmdaeq	r1, {r0, r1, r6, r7, r8, fp}
 8014f40:	080107d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, r9, sl}
 8014f44:	30345b1b 	eorscc	r5, r4, fp, lsl fp
 8014f48:	5b1b006d 	blpl	86d5104 <__exidx_end+0x6c00c4>
 8014f4c:	006d3033 	rsbeq	r3, sp, r3, lsr r0
 8014f50:	31335b1b 	teqcc	r3, fp, lsl fp
 8014f54:	5b1b006d 	blpl	86d5110 <__exidx_end+0x6c00d0>
 8014f58:	006d3233 	rsbeq	r3, sp, r3, lsr r2
 8014f5c:	33335b1b 	teqcc	r3, #27648	; 0x6c00
 8014f60:	5b1b006d 	blpl	86d511c <__exidx_end+0x6c00dc>
 8014f64:	006d3933 	rsbeq	r3, sp, r3, lsr r9
 8014f68:	2e25565b 	mcrcs	6, 1, r5, cr5, cr11, {2}
 8014f6c:	205d732a 	subscs	r7, sp, sl, lsr #6
 8014f70:	43207325 			; <UNDEFINED> instruction: 0x43207325
 8014f74:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 8014f78:	2064656c 	rsbcs	r6, r4, ip, ror #10
 8014f7c:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 8014f80:	20732a2e 	rsbscs	r2, r3, lr, lsr #20
 8014f84:	25207461 	strcs	r7, [r0, #-1121]!	; 0xfffffb9f
 8014f88:	00732a2e 	rsbseq	r2, r3, lr, lsr #20
 8014f8c:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 8014f90:	203a636f 	eorscs	r6, sl, pc, ror #6
 8014f94:	000a7525 	andeq	r7, sl, r5, lsr #10
 8014f98:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 8014f9c:	203a636f 	eorscs	r6, sl, pc, ror #6
 8014fa0:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 8014fa4:	62203e20 	eorvs	r3, r0, #32, 28	; 0x200
 8014fa8:	6b636f6c 	blvs	98f0d60 <__exidx_end+0x18dbd20>
 8014fac:	6d696c5f 	stclvs	12, cr6, [r9, #-380]!	; 0xfffffe84
 8014fb0:	000a7469 	andeq	r7, sl, r9, ror #8
 8014fb4:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 8014fb8:	203a636f 	eorscs	r6, sl, pc, ror #6
 8014fbc:	6f6c4270 	svcvs	0x006c4270
 8014fc0:	65486b63 	strbvs	r6, [r8, #-2915]	; 0xfffff49d
 8014fc4:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 8014fc8:	2c70253d 	cfldr64cs	mvdx2, [r0], #-244	; 0xffffff0c
 8014fcc:	7a697320 	bvc	9a71c54 <__exidx_end+0x1a5cc14>
 8014fd0:	64253d65 	strtvs	r3, [r5], #-3429	; 0xfffff29b
 8014fd4:	6164202c 	cmnvs	r4, ip, lsr #32
 8014fd8:	253d6174 	ldrcs	r6, [sp, #-372]!	; 0xfffffe8c
 8014fdc:	66000a70 			; <UNDEFINED> instruction: 0x66000a70
 8014fe0:	3a656572 	bcc	996e5b0 <__exidx_end+0x1959570>
 8014fe4:	6c427020 	mcrrvs	0, 2, r7, r2, cr0
 8014fe8:	486b636f 	stmdami	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8014fec:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 8014ff0:	203d2072 	eorscs	r2, sp, r2, ror r0
 8014ff4:	202c7025 	eorcs	r7, ip, r5, lsr #32
 8014ff8:	6f6c4270 	svcvs	0x006c4270
 8014ffc:	3d206b63 	fstmdbxcc	r0!, {d6-d54}	;@ Deprecated
 8015000:	0a702520 	beq	9c1e488 <__exidx_end+0x1c09448>
 8015004:	00000000 	andeq	r0, r0, r0

08015008 <days_of_month>:
 8015008:	0000001f 	andeq	r0, r0, pc, lsl r0
 801500c:	0000001c 	andeq	r0, r0, ip, lsl r0
 8015010:	0000001f 	andeq	r0, r0, pc, lsl r0
 8015014:	0000001e 	andeq	r0, r0, lr, lsl r0
 8015018:	0000001f 	andeq	r0, r0, pc, lsl r0
 801501c:	0000001e 	andeq	r0, r0, lr, lsl r0
 8015020:	0000001f 	andeq	r0, r0, pc, lsl r0
 8015024:	0000001f 	andeq	r0, r0, pc, lsl r0
 8015028:	0000001e 	andeq	r0, r0, lr, lsl r0
 801502c:	0000001f 	andeq	r0, r0, pc, lsl r0
 8015030:	0000001e 	andeq	r0, r0, lr, lsl r0
 8015034:	0000001f 	andeq	r0, r0, pc, lsl r0

Disassembly of section .ARM:

08015038 <__exidx_start>:
 8015038:	7fff42d4 	svcvc	0x00ff42d4
 801503c:	00000001 	andeq	r0, r0, r1

Disassembly of section .ARM.attributes:

08015040 <.ARM.attributes>:
 8015040:	00002e41 	andeq	r2, r0, r1, asr #28
 8015044:	61656100 	cmnvs	r5, r0, lsl #2
 8015048:	01006962 	tsteq	r0, r2, ror #18
 801504c:	00000024 	andeq	r0, r0, r4, lsr #32
 8015050:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
 8015054:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
 8015058:	0600334d 	streq	r3, [r0], -sp, asr #6
 801505c:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
 8015060:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
 8015064:	17011501 	strne	r1, [r1, -r1, lsl #10]
 8015068:	1a011803 	bne	805b07c <__exidx_end+0x4603c>
 801506c:	Address 0x000000000801506c is out of bounds.


Disassembly of section .data:

20000000 <s_multicast_mac>:
20000000:	005e0001 	subseq	r0, lr, r1
20000004:	00000000 	andeq	r0, r0, r0

20000008 <MDNS::s_nHandle>:
20000008:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

2000000c <next_block>:
2000000c:	20016000 	andcs	r6, r1, r0

20000010 <s_block_bucket>:
20000010:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20000020:	00000020 	andeq	r0, r0, r0, lsr #32
	...
20000030:	00000040 	andeq	r0, r0, r0, asr #32
	...
20000040:	00000060 	andeq	r0, r0, r0, rrx
	...
20000050:	00000080 	andeq	r0, r0, r0, lsl #1
	...
20000060:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20000070:	00000140 	andeq	r0, r0, r0, asr #2
	...
20000080:	00000180 	andeq	r0, r0, r0, lsl #3
	...
20000090:	00000200 	andeq	r0, r0, r0, lsl #4
	...
200000a0:	00000300 	andeq	r0, r0, r0, lsl #6
	...
200000b0:	00000400 	andeq	r0, r0, r0, lsl #8
	...
200000c0:	00000500 	andeq	r0, r0, r0, lsl #10
	...

200000e0 <SystemCoreClock>:
200000e0:	066ff300 	strbteq	pc, [pc], -r0, lsl #6	; <UNPREDICTABLE>

Disassembly of section .bss:

200000e8 <outptr>:
200000e8:	00000000 	andeq	r0, r0, r0

200000ec <OscServer::s_aPathInfo>:
	...

2000016c <OscServer::s_pUdpBuffer>:
2000016c:	00000000 	andeq	r0, r0, r0

20000170 <OscServer::s_aPathSecond>:
	...

200001f0 <OscServer::s_aPathBlackOut>:
	...

20000270 <OscServer::s_aPath>:
	...

200002f0 <OscServer::s_pData>:
	...

200004f0 <OscServer::s_pThis>:
200004f0:	00000000 	andeq	r0, r0, r0

200004f4 <OscSimpleSend::s_Message>:
	...

200006f4 <WS28xxDmx::s_pThis>:
200006f4:	00000000 	andeq	r0, r0, r0

200006f8 <PixelPatterns::m_PortConfig>:
	...

20000718 <PixelPatterns::m_nActivePorts>:
20000718:	00000000 	andeq	r0, r0, r0

2000071c <PixelPatterns::m_pScannerColours>:
2000071c:	00000000 	andeq	r0, r0, r0

20000720 <PixelPatterns::m_nCount>:
20000720:	00000000 	andeq	r0, r0, r0

20000724 <PixelPatterns::m_pOutput>:
20000724:	00000000 	andeq	r0, r0, r0

20000728 <PixelTestPattern::s_Pattern>:
20000728:	00000000 	andeq	r0, r0, r0

2000072c <s_tmp>:
2000072c:	00000000 	andeq	r0, r0, r0

20000730 <WS28xx::s_pThis>:
20000730:	00000000 	andeq	r0, r0, r0

20000734 <RemoteConfig::s_pUdpBuffer>:
20000734:	00000000 	andeq	r0, r0, r0

20000738 <RemoteConfig::s_RemoteConfigListBin>:
	...

2000075c <RemoteConfig::s_pThis>:
2000075c:	00000000 	andeq	r0, r0, r0

20000760 <SpiFlashStore::s_nWaitMillis>:
20000760:	00000000 	andeq	r0, r0, r0

20000764 <SpiFlashStore::s_SpiFlashData>:
	...

20001764 <SpiFlashStore::s_nStartAddress>:
20001764:	00000000 	andeq	r0, r0, r0

20001768 <SpiFlashStore::s_bHaveFlashChip>:
20001768:	00000000 	andeq	r0, r0, r0

2000176c <SpiFlashStore::s_nSpiFlashStoreSize>:
2000176c:	00000000 	andeq	r0, r0, r0

20001770 <SpiFlashStore::s_State>:
20001770:	00000000 	andeq	r0, r0, r0

20001774 <SpiFlashStore::s_pThis>:
20001774:	00000000 	andeq	r0, r0, r0

20001778 <SpiFlashStore::s_bIsNew>:
20001778:	00000000 	andeq	r0, r0, r0

2000177c <StoreNetwork::s_pThis>:
2000177c:	00000000 	andeq	r0, r0, r0

20001780 <StoreOscServer::s_pThis>:
20001780:	00000000 	andeq	r0, r0, r0

20001784 <StoreRemoteConfig::s_pThis>:
20001784:	00000000 	andeq	r0, r0, r0

20001788 <StoreWS28xxDmx::s_pThis>:
20001788:	00000000 	andeq	r0, r0, r0

2000178c <FlashRom::s_pThis>:
2000178c:	00000000 	andeq	r0, r0, r0

20001790 <flashrom::s_nAddress>:
20001790:	00000000 	andeq	r0, r0, r0

20001794 <flashrom::s_State>:
20001794:	00000000 	andeq	r0, r0, r0

20001798 <flashrom::s_nPage>:
20001798:	00000000 	andeq	r0, r0, r0

2000179c <flashrom::s_pData>:
2000179c:	00000000 	andeq	r0, r0, r0

200017a0 <flashrom::s_isBank0>:
200017a0:	00000000 	andeq	r0, r0, r0

200017a4 <flashrom::s_nLength>:
200017a4:	00000000 	andeq	r0, r0, r0

200017a8 <g_ip_info>:
	...

200017b4 <g_mac_address>:
200017b4:	00000000 	andeq	r0, r0, r0
	...

200017ba <s_is_dhcp>:
	...

200017bc <s_p>:
200017bc:	00000000 	andeq	r0, r0, r0

200017c0 <s_ticker>:
200017c0:	00000000 	andeq	r0, r0, r0

200017c4 <s_mac_address>:
	...

200017cc <s_mac_address_arp_reply>:
	...

200017d4 <s_id>:
200017d4:	00000000 	andeq	r0, r0, r0

200017d8 <s_recv_queue>:
	...

20002348 <s_tcb>:
	...

2000238c <s_tcp>:
	...

20002978 <broadcast_mask>:
20002978:	00000000 	andeq	r0, r0, r0

2000297c <gw_ip>:
2000297c:	00000000 	andeq	r0, r0, r0

20002980 <on_network_mask>:
20002980:	00000000 	andeq	r0, r0, r0

20002984 <s_id>:
20002984:	00000000 	andeq	r0, r0, r0

20002988 <s_ports_allowed>:
	...

200029a8 <s_recv_queue>:
	...

20008648 <s_send_packet>:
	...

20008c34 <MDNS::s_nRemoteIp>:
20008c34:	00000000 	andeq	r0, r0, r0

20008c38 <MDNS::s_nRemotePort>:
20008c38:	00000000 	andeq	r0, r0, r0

20008c3c <MDNS::s_nMulticastIp>:
20008c3c:	00000000 	andeq	r0, r0, r0

20008c40 <MDNS::s_AnswerLocalIp>:
	...

20008e44 <MDNS::s_ServiceRecords>:
	...

20008e64 <MDNS::s_nBytesReceived>:
20008e64:	00000000 	andeq	r0, r0, r0

20008e68 <MDNS::s_ServiceRecordsData>:
	...

2000906c <MDNS::s_pName>:
2000906c:	00000000 	andeq	r0, r0, r0

20009070 <MDNS::s_pBuffer>:
20009070:	00000000 	andeq	r0, r0, r0

20009074 <Network::s_pThis>:
20009074:	00000000 	andeq	r0, r0, r0

20009078 <NetworkParams::m_tNetworkParams>:
	...

200090d8 <s_arp_announce>:
	...

20009104 <s_arp_reply>:
	...

20009130 <s_arp_request>:
	...

2000915c <s_arp_records>:
	...

200092dc <s_entry_current>:
200092dc:	00000000 	andeq	r0, r0, r0

200092e0 <s_dhcp_allocated_gw>:
200092e0:	00000000 	andeq	r0, r0, r0

200092e4 <s_dhcp_allocated_ip>:
200092e4:	00000000 	andeq	r0, r0, r0

200092e8 <s_dhcp_allocated_netmask>:
200092e8:	00000000 	andeq	r0, r0, r0

200092ec <s_dhcp_message>:
	...

20009510 <s_dhcp_server_ip>:
20009510:	00000000 	andeq	r0, r0, r0

20009514 <s_groups>:
	...

20009634 <s_id>:
20009634:	00000000 	andeq	r0, r0, r0

20009638 <s_joins_allowed_index>:
20009638:	00000000 	andeq	r0, r0, r0

2000963c <s_leave>:
	...

2000966c <s_multicast_mac>:
	...

20009674 <s_report>:
	...

200096a2 <PropertiesConfig::s_Config>:
	...

200096a4 <Display::s_pThis>:
200096a4:	00000000 	andeq	r0, r0, r0

200096a8 <_ClearBuffer>:
	...

20009730 <Ssd1306::s_pThis>:
20009730:	00000000 	andeq	r0, r0, r0

20009734 <FirmwareVersion::s_FirmwareVersion>:
	...

2000974a <FirmwareVersion::s_Print>:
	...

2000978c <FirmwareVersion::s_pThis>:
2000978c:	00000000 	andeq	r0, r0, r0

20009790 <LedBlink::s_pThis>:
20009790:	00000000 	andeq	r0, r0, r0

20009794 <Hardware::s_pThis>:
20009794:	00000000 	andeq	r0, r0, r0

20009798 <last.0>:
	...

200097a0 <s_micros>:
	...

200097a8 <set_timer>:
200097a8:	00000000 	andeq	r0, r0, r0

200097ac <s_nSysTickMillis>:
200097ac:	00000000 	andeq	r0, r0, r0

200097b0 <enet_init_status>:
200097b0:	00000000 	andeq	r0, r0, r0

200097b4 <s_nAddress>:
200097b4:	00000000 	andeq	r0, r0, r0

200097b8 <s_TxBuffer>:
	...

2000f7b8 <dma_current_ptp_rxdesc>:
2000f7b8:	00000000 	andeq	r0, r0, r0

2000f7bc <dma_current_ptp_txdesc>:
2000f7bc:	00000000 	andeq	r0, r0, r0

2000f7c0 <dma_current_rxdesc>:
2000f7c0:	00000000 	andeq	r0, r0, r0

2000f7c4 <dma_current_txdesc>:
2000f7c4:	00000000 	andeq	r0, r0, r0

2000f7c8 <enet_initpara>:
	...

2000f804 <rx_buff>:
	...

20010fd4 <rxdesc_tab>:
	...

20011014 <tx_buff>:
	...

20011bfc <txdesc_tab>:
	...

Disassembly of section .heap:

20016000 <heap_low>:
	...

Disassembly of section .stack:

20016800 <_sp-0x1800>:
	...
